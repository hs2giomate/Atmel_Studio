
CANOpenNMTSlave.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00013ed4  00000000  00000000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00013ed4  00013ed4  00023ed4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     0000093c  20000000  00013edc  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bkupram      00000000  47000000  47000000  0003093c  2**0
                  CONTENTS
  4 .qspi         00000000  04000000  04000000  0003093c  2**0
                  CONTENTS
  5 .bss          000012f4  2000093c  00014818  0003093c  2**2
                  ALLOC
  6 .stack        00010000  20001c30  00015b0c  0003093c  2**0
                  ALLOC
  7 .ARM.attributes 0000002e  00000000  00000000  0003093c  2**0
                  CONTENTS, READONLY
  8 .comment      00000059  00000000  00000000  0003096a  2**0
                  CONTENTS, READONLY
  9 .debug_info   000691b8  00000000  00000000  000309c3  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00008809  00000000  00000000  00099b7b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000186a3  00000000  00000000  000a2384  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00002bd8  00000000  00000000  000baa27  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000028c0  00000000  00000000  000bd5ff  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  0004a9a3  00000000  00000000  000bfebf  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00036320  00000000  00000000  0010a862  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    0013727e  00000000  00000000  00140b82  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  0000b824  00000000  00000000  00277e00  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
{0x6401, 0x0C, 0xB6,  2, (void*)&CO_OD_RAM.readAnalogueInput16Bit[0]},
{0x6411, 0x08, 0xBE,  2, (void*)&CO_OD_RAM.writeAnalogueOutput16Bit[0]},
};

// default constructor
CO_OD_Class::CO_OD_Class()
       0:	30 1c 01 20 d5 02 00 00 d1 02 00 00 d1 02 00 00     0.. ............
{
} //CO_OD
      10:	d1 02 00 00 d1 02 00 00 d1 02 00 00 00 00 00 00     ................
	...
      2c:	d1 02 00 00 d1 02 00 00 00 00 00 00 d1 02 00 00     ................
      3c:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      4c:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      5c:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      6c:	7d 57 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     }W..............
      7c:	d1 02 00 00 25 46 00 00 35 46 00 00 45 46 00 00     ....%F..5F..EF..
      8c:	55 46 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     UF..............
      9c:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      ac:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      bc:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      cc:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      dc:	d1 02 00 00 d1 02 00 00 d1 02 00 00 00 00 00 00     ................
	...
      f4:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     104:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     114:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     124:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     134:	d1 02 00 00 79 69 00 00 95 69 00 00 b1 69 00 00     ....yi...i...i..
     144:	cd 69 00 00 e9 69 00 00 05 6a 00 00 21 6a 00 00     .i...i...j..!j..
     154:	3d 6a 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     =j..............
     164:	d1 02 00 00 59 6a 00 00 75 6a 00 00 91 6a 00 00     ....Yj..uj...j..
     174:	ad 6a 00 00 d1 02 00 00 05 3c 00 00 5d a2 00 00     .j.......<..]...
     184:	6d a2 00 00 7d a2 00 00 8d a2 00 00 d1 02 00 00     m...}...........
     194:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     1a4:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     1b4:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     1c4:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     1d4:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     1e4:	d1 02 00 00 d1 02 00 00 e1 79 00 00 fd 79 00 00     .........y...y..
     1f4:	19 7a 00 00 35 7a 00 00 d1 02 00 00 d1 02 00 00     .z..5z..........
     204:	d1 02 00 00 51 7a 00 00 d1 02 00 00 d1 02 00 00     ....Qz..........
     214:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     224:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     234:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     244:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     254:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................

00000264 <__do_global_dtors_aux>:
     264:	b510      	push	{r4, lr}
     266:	4c05      	ldr	r4, [pc, #20]	; (27c <__do_global_dtors_aux+0x18>)
     268:	7823      	ldrb	r3, [r4, #0]
     26a:	b933      	cbnz	r3, 27a <__do_global_dtors_aux+0x16>
     26c:	4b04      	ldr	r3, [pc, #16]	; (280 <__do_global_dtors_aux+0x1c>)
     26e:	b113      	cbz	r3, 276 <__do_global_dtors_aux+0x12>
     270:	4804      	ldr	r0, [pc, #16]	; (284 <__do_global_dtors_aux+0x20>)
     272:	f3af 8000 	nop.w
     276:	2301      	movs	r3, #1
     278:	7023      	strb	r3, [r4, #0]
     27a:	bd10      	pop	{r4, pc}
     27c:	2000093c 	.word	0x2000093c
     280:	00000000 	.word	0x00000000
     284:	00013edc 	.word	0x00013edc

00000288 <frame_dummy>:
     288:	4b0c      	ldr	r3, [pc, #48]	; (2bc <frame_dummy+0x34>)
     28a:	b143      	cbz	r3, 29e <frame_dummy+0x16>
     28c:	480c      	ldr	r0, [pc, #48]	; (2c0 <frame_dummy+0x38>)
     28e:	490d      	ldr	r1, [pc, #52]	; (2c4 <frame_dummy+0x3c>)
     290:	b510      	push	{r4, lr}
     292:	f3af 8000 	nop.w
     296:	480c      	ldr	r0, [pc, #48]	; (2c8 <frame_dummy+0x40>)
     298:	6803      	ldr	r3, [r0, #0]
     29a:	b923      	cbnz	r3, 2a6 <frame_dummy+0x1e>
     29c:	bd10      	pop	{r4, pc}
     29e:	480a      	ldr	r0, [pc, #40]	; (2c8 <frame_dummy+0x40>)
     2a0:	6803      	ldr	r3, [r0, #0]
     2a2:	b933      	cbnz	r3, 2b2 <frame_dummy+0x2a>
     2a4:	4770      	bx	lr
     2a6:	4b09      	ldr	r3, [pc, #36]	; (2cc <frame_dummy+0x44>)
     2a8:	2b00      	cmp	r3, #0
     2aa:	d0f7      	beq.n	29c <frame_dummy+0x14>
     2ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     2b0:	4718      	bx	r3
     2b2:	4b06      	ldr	r3, [pc, #24]	; (2cc <frame_dummy+0x44>)
     2b4:	2b00      	cmp	r3, #0
     2b6:	d0f5      	beq.n	2a4 <frame_dummy+0x1c>
     2b8:	4718      	bx	r3
     2ba:	bf00      	nop
     2bc:	00000000 	.word	0x00000000
     2c0:	00013edc 	.word	0x00013edc
     2c4:	20000940 	.word	0x20000940
     2c8:	00013edc 	.word	0x00013edc
     2cc:	00000000 	.word	0x00000000

000002d0 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     2d0:	e7fe      	b.n	2d0 <Dummy_Handler>
	...

000002d4 <Reset_Handler>:
{
     2d4:	b508      	push	{r3, lr}
        if (pSrc != pDest) {
     2d6:	4b17      	ldr	r3, [pc, #92]	; (334 <Reset_Handler+0x60>)
     2d8:	4a17      	ldr	r2, [pc, #92]	; (338 <Reset_Handler+0x64>)
     2da:	429a      	cmp	r2, r3
     2dc:	d010      	beq.n	300 <Reset_Handler+0x2c>
                for (; pDest < &_erelocate;) {
     2de:	4b17      	ldr	r3, [pc, #92]	; (33c <Reset_Handler+0x68>)
     2e0:	4a14      	ldr	r2, [pc, #80]	; (334 <Reset_Handler+0x60>)
     2e2:	429a      	cmp	r2, r3
     2e4:	d20c      	bcs.n	300 <Reset_Handler+0x2c>
     2e6:	3b01      	subs	r3, #1
     2e8:	1a9b      	subs	r3, r3, r2
     2ea:	f023 0303 	bic.w	r3, r3, #3
     2ee:	3304      	adds	r3, #4
     2f0:	4413      	add	r3, r2
     2f2:	4911      	ldr	r1, [pc, #68]	; (338 <Reset_Handler+0x64>)
                        *pDest++ = *pSrc++;
     2f4:	f851 0b04 	ldr.w	r0, [r1], #4
     2f8:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
     2fc:	429a      	cmp	r2, r3
     2fe:	d1f9      	bne.n	2f4 <Reset_Handler+0x20>
        for (pDest = &_szero; pDest < &_ezero;) {
     300:	4b0f      	ldr	r3, [pc, #60]	; (340 <Reset_Handler+0x6c>)
     302:	4a10      	ldr	r2, [pc, #64]	; (344 <Reset_Handler+0x70>)
     304:	429a      	cmp	r2, r3
     306:	d20a      	bcs.n	31e <Reset_Handler+0x4a>
     308:	3b01      	subs	r3, #1
     30a:	1a9b      	subs	r3, r3, r2
     30c:	f023 0303 	bic.w	r3, r3, #3
     310:	3304      	adds	r3, #4
     312:	4413      	add	r3, r2
                *pDest++ = 0;
     314:	2100      	movs	r1, #0
     316:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
     31a:	4293      	cmp	r3, r2
     31c:	d1fb      	bne.n	316 <Reset_Handler+0x42>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     31e:	4a0a      	ldr	r2, [pc, #40]	; (348 <Reset_Handler+0x74>)
     320:	4b0a      	ldr	r3, [pc, #40]	; (34c <Reset_Handler+0x78>)
     322:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
     326:	6093      	str	r3, [r2, #8]
        __libc_init_array();
     328:	4b09      	ldr	r3, [pc, #36]	; (350 <Reset_Handler+0x7c>)
     32a:	4798      	blx	r3
        main();
     32c:	4b09      	ldr	r3, [pc, #36]	; (354 <Reset_Handler+0x80>)
     32e:	4798      	blx	r3
     330:	e7fe      	b.n	330 <Reset_Handler+0x5c>
     332:	bf00      	nop
     334:	20000000 	.word	0x20000000
     338:	00013edc 	.word	0x00013edc
     33c:	2000093c 	.word	0x2000093c
     340:	20001c30 	.word	0x20001c30
     344:	2000093c 	.word	0x2000093c
     348:	e000ed00 	.word	0xe000ed00
     34c:	00000000 	.word	0x00000000
     350:	00012ad9 	.word	0x00012ad9
     354:	00000359 	.word	0x00000359

00000358 <main>:
#include "CANOpen_Class.h"

static CANOpen_Class cano(&CAN_CCU);

int main(void)
{
     358:	b580      	push	{r7, lr}
	atmel_start_init();
     35a:	4b0e      	ldr	r3, [pc, #56]	; (394 <main+0x3c>)
     35c:	4798      	blx	r3
	delay_ms(1000);
     35e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
     362:	4b0d      	ldr	r3, [pc, #52]	; (398 <main+0x40>)
     364:	4798      	blx	r3
	cano.Init();
     366:	2102      	movs	r1, #2
     368:	480c      	ldr	r0, [pc, #48]	; (39c <main+0x44>)
     36a:	4b0d      	ldr	r3, [pc, #52]	; (3a0 <main+0x48>)
     36c:	4798      	blx	r3
	/* Replace with your application code */
	while (1)
	{
		cano.Process();
     36e:	4e0b      	ldr	r6, [pc, #44]	; (39c <main+0x44>)
     370:	4f0c      	ldr	r7, [pc, #48]	; (3a4 <main+0x4c>)
		delay_us(500);
     372:	f44f 74fa 	mov.w	r4, #500	; 0x1f4
		cano.Process();
     376:	2200      	movs	r2, #0
     378:	2101      	movs	r1, #1
     37a:	4630      	mov	r0, r6
     37c:	47b8      	blx	r7
		delay_us(500);
     37e:	4620      	mov	r0, r4
     380:	4d09      	ldr	r5, [pc, #36]	; (3a8 <main+0x50>)
     382:	47a8      	blx	r5
		
		cano.Periodic_Process();
     384:	4621      	mov	r1, r4
     386:	4630      	mov	r0, r6
     388:	4b08      	ldr	r3, [pc, #32]	; (3ac <main+0x54>)
     38a:	4798      	blx	r3
		delay_us(500);
     38c:	4620      	mov	r0, r4
     38e:	47a8      	blx	r5
     390:	e7f1      	b.n	376 <main+0x1e>
     392:	bf00      	nop
     394:	000003e1 	.word	0x000003e1
     398:	000019cd 	.word	0x000019cd
     39c:	20000958 	.word	0x20000958
     3a0:	0000c75d 	.word	0x0000c75d
     3a4:	0000d179 	.word	0x0000d179
     3a8:	00001999 	.word	0x00001999
     3ac:	0000c811 	.word	0x0000c811

000003b0 <_GLOBAL__sub_I_main>:
	}
}
     3b0:	b510      	push	{r4, lr}
static CANOpen_Class cano(&CAN_CCU);
     3b2:	4c05      	ldr	r4, [pc, #20]	; (3c8 <_GLOBAL__sub_I_main+0x18>)
     3b4:	4905      	ldr	r1, [pc, #20]	; (3cc <_GLOBAL__sub_I_main+0x1c>)
     3b6:	4620      	mov	r0, r4
     3b8:	4b05      	ldr	r3, [pc, #20]	; (3d0 <_GLOBAL__sub_I_main+0x20>)
     3ba:	4798      	blx	r3
     3bc:	4a05      	ldr	r2, [pc, #20]	; (3d4 <_GLOBAL__sub_I_main+0x24>)
     3be:	4906      	ldr	r1, [pc, #24]	; (3d8 <_GLOBAL__sub_I_main+0x28>)
     3c0:	4620      	mov	r0, r4
     3c2:	4b06      	ldr	r3, [pc, #24]	; (3dc <_GLOBAL__sub_I_main+0x2c>)
     3c4:	4798      	blx	r3
     3c6:	bd10      	pop	{r4, pc}
     3c8:	20000958 	.word	0x20000958
     3cc:	20001a70 	.word	0x20001a70
     3d0:	0000c6f9 	.word	0x0000c6f9
     3d4:	20000000 	.word	0x20000000
     3d8:	0000c735 	.word	0x0000c735
     3dc:	00012aa5 	.word	0x00012aa5

000003e0 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
     3e0:	b580      	push	{r7, lr}
     3e2:	af00      	add	r7, sp, #0
	system_init();
     3e4:	4b03      	ldr	r3, [pc, #12]	; (3f4 <atmel_start_init+0x14>)
     3e6:	4798      	blx	r3
	usb_init();
     3e8:	4b03      	ldr	r3, [pc, #12]	; (3f8 <atmel_start_init+0x18>)
     3ea:	4798      	blx	r3
	spi_nor_flash_init();
     3ec:	4b03      	ldr	r3, [pc, #12]	; (3fc <atmel_start_init+0x1c>)
     3ee:	4798      	blx	r3
}
     3f0:	bf00      	nop
     3f2:	bd80      	pop	{r7, pc}
     3f4:	000014dd 	.word	0x000014dd
     3f8:	0000a961 	.word	0x0000a961
     3fc:	0000a8f5 	.word	0x0000a8f5

00000400 <hri_gclk_write_PCHCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_gclk_write_PCHCTRL_reg(const void *const hw, uint8_t index, hri_gclk_pchctrl_reg_t data)
{
     400:	b480      	push	{r7}
     402:	b085      	sub	sp, #20
     404:	af00      	add	r7, sp, #0
     406:	60f8      	str	r0, [r7, #12]
     408:	460b      	mov	r3, r1
     40a:	607a      	str	r2, [r7, #4]
     40c:	72fb      	strb	r3, [r7, #11]
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->PCHCTRL[index].reg = data;
     40e:	7afa      	ldrb	r2, [r7, #11]
     410:	68fb      	ldr	r3, [r7, #12]
     412:	3220      	adds	r2, #32
     414:	6879      	ldr	r1, [r7, #4]
     416:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	GCLK_CRITICAL_SECTION_LEAVE();
}
     41a:	bf00      	nop
     41c:	3714      	adds	r7, #20
     41e:	46bd      	mov	sp, r7
     420:	f85d 7b04 	ldr.w	r7, [sp], #4
     424:	4770      	bx	lr

00000426 <hri_mclk_set_AHBMASK_USB_bit>:
	((Mclk *)hw)->AHBMASK.reg ^= MCLK_AHBMASK_DMAC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_AHBMASK_USB_bit(const void *const hw)
{
     426:	b480      	push	{r7}
     428:	b083      	sub	sp, #12
     42a:	af00      	add	r7, sp, #0
     42c:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_USB;
     42e:	687b      	ldr	r3, [r7, #4]
     430:	691b      	ldr	r3, [r3, #16]
     432:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
     436:	687b      	ldr	r3, [r7, #4]
     438:	611a      	str	r2, [r3, #16]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     43a:	bf00      	nop
     43c:	370c      	adds	r7, #12
     43e:	46bd      	mov	sp, r7
     440:	f85d 7b04 	ldr.w	r7, [sp], #4
     444:	4770      	bx	lr

00000446 <hri_mclk_set_AHBMASK_QSPI_bit>:
	((Mclk *)hw)->AHBMASK.reg ^= MCLK_AHBMASK_PAC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_AHBMASK_QSPI_bit(const void *const hw)
{
     446:	b480      	push	{r7}
     448:	b083      	sub	sp, #12
     44a:	af00      	add	r7, sp, #0
     44c:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_QSPI;
     44e:	687b      	ldr	r3, [r7, #4]
     450:	691b      	ldr	r3, [r3, #16]
     452:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
     456:	687b      	ldr	r3, [r7, #4]
     458:	611a      	str	r2, [r3, #16]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     45a:	bf00      	nop
     45c:	370c      	adds	r7, #12
     45e:	46bd      	mov	sp, r7
     460:	f85d 7b04 	ldr.w	r7, [sp], #4
     464:	4770      	bx	lr

00000466 <hri_mclk_set_AHBMASK_CAN1_bit>:
	((Mclk *)hw)->AHBMASK.reg ^= MCLK_AHBMASK_CAN0;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_AHBMASK_CAN1_bit(const void *const hw)
{
     466:	b480      	push	{r7}
     468:	b083      	sub	sp, #12
     46a:	af00      	add	r7, sp, #0
     46c:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_CAN1;
     46e:	687b      	ldr	r3, [r7, #4]
     470:	691b      	ldr	r3, [r3, #16]
     472:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
     476:	687b      	ldr	r3, [r7, #4]
     478:	611a      	str	r2, [r3, #16]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     47a:	bf00      	nop
     47c:	370c      	adds	r7, #12
     47e:	46bd      	mov	sp, r7
     480:	f85d 7b04 	ldr.w	r7, [sp], #4
     484:	4770      	bx	lr

00000486 <hri_mclk_set_AHBMASK_QSPI_2X_bit>:
	((Mclk *)hw)->AHBMASK.reg ^= MCLK_AHBMASK_PUKCC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_AHBMASK_QSPI_2X_bit(const void *const hw)
{
     486:	b480      	push	{r7}
     488:	b083      	sub	sp, #12
     48a:	af00      	add	r7, sp, #0
     48c:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_QSPI_2X;
     48e:	687b      	ldr	r3, [r7, #4]
     490:	691b      	ldr	r3, [r3, #16]
     492:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
     496:	687b      	ldr	r3, [r7, #4]
     498:	611a      	str	r2, [r3, #16]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     49a:	bf00      	nop
     49c:	370c      	adds	r7, #12
     49e:	46bd      	mov	sp, r7
     4a0:	f85d 7b04 	ldr.w	r7, [sp], #4
     4a4:	4770      	bx	lr

000004a6 <hri_mclk_set_APBAMASK_WDT_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_GCLK;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_WDT_bit(const void *const hw)
{
     4a6:	b480      	push	{r7}
     4a8:	b083      	sub	sp, #12
     4aa:	af00      	add	r7, sp, #0
     4ac:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_WDT;
     4ae:	687b      	ldr	r3, [r7, #4]
     4b0:	695b      	ldr	r3, [r3, #20]
     4b2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
     4b6:	687b      	ldr	r3, [r7, #4]
     4b8:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     4ba:	bf00      	nop
     4bc:	370c      	adds	r7, #12
     4be:	46bd      	mov	sp, r7
     4c0:	f85d 7b04 	ldr.w	r7, [sp], #4
     4c4:	4770      	bx	lr

000004c6 <hri_mclk_set_APBAMASK_RTC_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_WDT;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_RTC_bit(const void *const hw)
{
     4c6:	b480      	push	{r7}
     4c8:	b083      	sub	sp, #12
     4ca:	af00      	add	r7, sp, #0
     4cc:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_RTC;
     4ce:	687b      	ldr	r3, [r7, #4]
     4d0:	695b      	ldr	r3, [r3, #20]
     4d2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
     4d6:	687b      	ldr	r3, [r7, #4]
     4d8:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     4da:	bf00      	nop
     4dc:	370c      	adds	r7, #12
     4de:	46bd      	mov	sp, r7
     4e0:	f85d 7b04 	ldr.w	r7, [sp], #4
     4e4:	4770      	bx	lr

000004e6 <hri_mclk_set_APBAMASK_EIC_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_RTC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_EIC_bit(const void *const hw)
{
     4e6:	b480      	push	{r7}
     4e8:	b083      	sub	sp, #12
     4ea:	af00      	add	r7, sp, #0
     4ec:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_EIC;
     4ee:	687b      	ldr	r3, [r7, #4]
     4f0:	695b      	ldr	r3, [r3, #20]
     4f2:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
     4f6:	687b      	ldr	r3, [r7, #4]
     4f8:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     4fa:	bf00      	nop
     4fc:	370c      	adds	r7, #12
     4fe:	46bd      	mov	sp, r7
     500:	f85d 7b04 	ldr.w	r7, [sp], #4
     504:	4770      	bx	lr

00000506 <hri_mclk_set_APBAMASK_TC0_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_SERCOM1;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_TC0_bit(const void *const hw)
{
     506:	b480      	push	{r7}
     508:	b083      	sub	sp, #12
     50a:	af00      	add	r7, sp, #0
     50c:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_TC0;
     50e:	687b      	ldr	r3, [r7, #4]
     510:	695b      	ldr	r3, [r3, #20]
     512:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
     516:	687b      	ldr	r3, [r7, #4]
     518:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     51a:	bf00      	nop
     51c:	370c      	adds	r7, #12
     51e:	46bd      	mov	sp, r7
     520:	f85d 7b04 	ldr.w	r7, [sp], #4
     524:	4770      	bx	lr

00000526 <hri_mclk_set_APBAMASK_TC1_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_TC0;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_TC1_bit(const void *const hw)
{
     526:	b480      	push	{r7}
     528:	b083      	sub	sp, #12
     52a:	af00      	add	r7, sp, #0
     52c:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_TC1;
     52e:	687b      	ldr	r3, [r7, #4]
     530:	695b      	ldr	r3, [r3, #20]
     532:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
     536:	687b      	ldr	r3, [r7, #4]
     538:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     53a:	bf00      	nop
     53c:	370c      	adds	r7, #12
     53e:	46bd      	mov	sp, r7
     540:	f85d 7b04 	ldr.w	r7, [sp], #4
     544:	4770      	bx	lr

00000546 <hri_mclk_set_APBBMASK_USB_bit>:
{
	return ((Mclk *)hw)->APBAMASK.reg;
}

static inline void hri_mclk_set_APBBMASK_USB_bit(const void *const hw)
{
     546:	b480      	push	{r7}
     548:	b083      	sub	sp, #12
     54a:	af00      	add	r7, sp, #0
     54c:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_USB;
     54e:	687b      	ldr	r3, [r7, #4]
     550:	699b      	ldr	r3, [r3, #24]
     552:	f043 0201 	orr.w	r2, r3, #1
     556:	687b      	ldr	r3, [r7, #4]
     558:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     55a:	bf00      	nop
     55c:	370c      	adds	r7, #12
     55e:	46bd      	mov	sp, r7
     560:	f85d 7b04 	ldr.w	r7, [sp], #4
     564:	4770      	bx	lr

00000566 <hri_mclk_set_APBBMASK_DSU_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_USB;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_DSU_bit(const void *const hw)
{
     566:	b480      	push	{r7}
     568:	b083      	sub	sp, #12
     56a:	af00      	add	r7, sp, #0
     56c:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_DSU;
     56e:	687b      	ldr	r3, [r7, #4]
     570:	699b      	ldr	r3, [r3, #24]
     572:	f043 0202 	orr.w	r2, r3, #2
     576:	687b      	ldr	r3, [r7, #4]
     578:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     57a:	bf00      	nop
     57c:	370c      	adds	r7, #12
     57e:	46bd      	mov	sp, r7
     580:	f85d 7b04 	ldr.w	r7, [sp], #4
     584:	4770      	bx	lr

00000586 <hri_mclk_set_APBBMASK_EVSYS_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_HMATRIX;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_EVSYS_bit(const void *const hw)
{
     586:	b480      	push	{r7}
     588:	b083      	sub	sp, #12
     58a:	af00      	add	r7, sp, #0
     58c:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_EVSYS;
     58e:	687b      	ldr	r3, [r7, #4]
     590:	699b      	ldr	r3, [r3, #24]
     592:	f043 0280 	orr.w	r2, r3, #128	; 0x80
     596:	687b      	ldr	r3, [r7, #4]
     598:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     59a:	bf00      	nop
     59c:	370c      	adds	r7, #12
     59e:	46bd      	mov	sp, r7
     5a0:	f85d 7b04 	ldr.w	r7, [sp], #4
     5a4:	4770      	bx	lr

000005a6 <hri_mclk_set_APBBMASK_TC2_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_TCC1;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_TC2_bit(const void *const hw)
{
     5a6:	b480      	push	{r7}
     5a8:	b083      	sub	sp, #12
     5aa:	af00      	add	r7, sp, #0
     5ac:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TC2;
     5ae:	687b      	ldr	r3, [r7, #4]
     5b0:	699b      	ldr	r3, [r3, #24]
     5b2:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
     5b6:	687b      	ldr	r3, [r7, #4]
     5b8:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     5ba:	bf00      	nop
     5bc:	370c      	adds	r7, #12
     5be:	46bd      	mov	sp, r7
     5c0:	f85d 7b04 	ldr.w	r7, [sp], #4
     5c4:	4770      	bx	lr

000005c6 <hri_mclk_set_APBBMASK_TC3_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_TC2;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_TC3_bit(const void *const hw)
{
     5c6:	b480      	push	{r7}
     5c8:	b083      	sub	sp, #12
     5ca:	af00      	add	r7, sp, #0
     5cc:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TC3;
     5ce:	687b      	ldr	r3, [r7, #4]
     5d0:	699b      	ldr	r3, [r3, #24]
     5d2:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
     5d6:	687b      	ldr	r3, [r7, #4]
     5d8:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     5da:	bf00      	nop
     5dc:	370c      	adds	r7, #12
     5de:	46bd      	mov	sp, r7
     5e0:	f85d 7b04 	ldr.w	r7, [sp], #4
     5e4:	4770      	bx	lr

000005e6 <hri_mclk_set_APBCMASK_QSPI_bit>:
	((Mclk *)hw)->APBCMASK.reg ^= MCLK_APBCMASK_ICM;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBCMASK_QSPI_bit(const void *const hw)
{
     5e6:	b480      	push	{r7}
     5e8:	b083      	sub	sp, #12
     5ea:	af00      	add	r7, sp, #0
     5ec:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_QSPI;
     5ee:	687b      	ldr	r3, [r7, #4]
     5f0:	69db      	ldr	r3, [r3, #28]
     5f2:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
     5f6:	687b      	ldr	r3, [r7, #4]
     5f8:	61da      	str	r2, [r3, #28]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     5fa:	bf00      	nop
     5fc:	370c      	adds	r7, #12
     5fe:	46bd      	mov	sp, r7
     600:	f85d 7b04 	ldr.w	r7, [sp], #4
     604:	4770      	bx	lr

00000606 <hri_mclk_set_APBDMASK_SERCOM4_bit>:
{
	return ((Mclk *)hw)->APBCMASK.reg;
}

static inline void hri_mclk_set_APBDMASK_SERCOM4_bit(const void *const hw)
{
     606:	b480      	push	{r7}
     608:	b083      	sub	sp, #12
     60a:	af00      	add	r7, sp, #0
     60c:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM4;
     60e:	687b      	ldr	r3, [r7, #4]
     610:	6a1b      	ldr	r3, [r3, #32]
     612:	f043 0201 	orr.w	r2, r3, #1
     616:	687b      	ldr	r3, [r7, #4]
     618:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     61a:	bf00      	nop
     61c:	370c      	adds	r7, #12
     61e:	46bd      	mov	sp, r7
     620:	f85d 7b04 	ldr.w	r7, [sp], #4
     624:	4770      	bx	lr

00000626 <hri_mclk_set_APBDMASK_SERCOM5_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_SERCOM4;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_SERCOM5_bit(const void *const hw)
{
     626:	b480      	push	{r7}
     628:	b083      	sub	sp, #12
     62a:	af00      	add	r7, sp, #0
     62c:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM5;
     62e:	687b      	ldr	r3, [r7, #4]
     630:	6a1b      	ldr	r3, [r3, #32]
     632:	f043 0202 	orr.w	r2, r3, #2
     636:	687b      	ldr	r3, [r7, #4]
     638:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     63a:	bf00      	nop
     63c:	370c      	adds	r7, #12
     63e:	46bd      	mov	sp, r7
     640:	f85d 7b04 	ldr.w	r7, [sp], #4
     644:	4770      	bx	lr

00000646 <hri_mclk_set_APBDMASK_SERCOM6_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_SERCOM5;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_SERCOM6_bit(const void *const hw)
{
     646:	b480      	push	{r7}
     648:	b083      	sub	sp, #12
     64a:	af00      	add	r7, sp, #0
     64c:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM6;
     64e:	687b      	ldr	r3, [r7, #4]
     650:	6a1b      	ldr	r3, [r3, #32]
     652:	f043 0204 	orr.w	r2, r3, #4
     656:	687b      	ldr	r3, [r7, #4]
     658:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     65a:	bf00      	nop
     65c:	370c      	adds	r7, #12
     65e:	46bd      	mov	sp, r7
     660:	f85d 7b04 	ldr.w	r7, [sp], #4
     664:	4770      	bx	lr

00000666 <hri_mclk_set_APBDMASK_SERCOM7_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_SERCOM6;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_SERCOM7_bit(const void *const hw)
{
     666:	b480      	push	{r7}
     668:	b083      	sub	sp, #12
     66a:	af00      	add	r7, sp, #0
     66c:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM7;
     66e:	687b      	ldr	r3, [r7, #4]
     670:	6a1b      	ldr	r3, [r3, #32]
     672:	f043 0208 	orr.w	r2, r3, #8
     676:	687b      	ldr	r3, [r7, #4]
     678:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     67a:	bf00      	nop
     67c:	370c      	adds	r7, #12
     67e:	46bd      	mov	sp, r7
     680:	f85d 7b04 	ldr.w	r7, [sp], #4
     684:	4770      	bx	lr

00000686 <hri_mclk_set_APBDMASK_TC7_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_TC6;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_TC7_bit(const void *const hw)
{
     686:	b480      	push	{r7}
     688:	b083      	sub	sp, #12
     68a:	af00      	add	r7, sp, #0
     68c:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_TC7;
     68e:	687b      	ldr	r3, [r7, #4]
     690:	6a1b      	ldr	r3, [r3, #32]
     692:	f043 0240 	orr.w	r2, r3, #64	; 0x40
     696:	687b      	ldr	r3, [r7, #4]
     698:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     69a:	bf00      	nop
     69c:	370c      	adds	r7, #12
     69e:	46bd      	mov	sp, r7
     6a0:	f85d 7b04 	ldr.w	r7, [sp], #4
     6a4:	4770      	bx	lr

000006a6 <hri_port_set_DIR_reg>:
{
	((Port *)hw)->Group[submodule_index].DIRTGL.reg = PORT_DIR_DIR(mask);
}

static inline void hri_port_set_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
     6a6:	b480      	push	{r7}
     6a8:	b085      	sub	sp, #20
     6aa:	af00      	add	r7, sp, #0
     6ac:	60f8      	str	r0, [r7, #12]
     6ae:	460b      	mov	r3, r1
     6b0:	607a      	str	r2, [r7, #4]
     6b2:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     6b4:	7afb      	ldrb	r3, [r7, #11]
     6b6:	68fa      	ldr	r2, [r7, #12]
     6b8:	01db      	lsls	r3, r3, #7
     6ba:	4413      	add	r3, r2
     6bc:	3308      	adds	r3, #8
     6be:	687a      	ldr	r2, [r7, #4]
     6c0:	601a      	str	r2, [r3, #0]
}
     6c2:	bf00      	nop
     6c4:	3714      	adds	r7, #20
     6c6:	46bd      	mov	sp, r7
     6c8:	f85d 7b04 	ldr.w	r7, [sp], #4
     6cc:	4770      	bx	lr

000006ce <hri_port_clear_DIR_reg>:
	((Port *)hw)->Group[submodule_index].DIRSET.reg = data;
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = ~data;
}

static inline void hri_port_clear_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
     6ce:	b480      	push	{r7}
     6d0:	b085      	sub	sp, #20
     6d2:	af00      	add	r7, sp, #0
     6d4:	60f8      	str	r0, [r7, #12]
     6d6:	460b      	mov	r3, r1
     6d8:	607a      	str	r2, [r7, #4]
     6da:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     6dc:	7afb      	ldrb	r3, [r7, #11]
     6de:	68fa      	ldr	r2, [r7, #12]
     6e0:	01db      	lsls	r3, r3, #7
     6e2:	4413      	add	r3, r2
     6e4:	3304      	adds	r3, #4
     6e6:	687a      	ldr	r2, [r7, #4]
     6e8:	601a      	str	r2, [r3, #0]
}
     6ea:	bf00      	nop
     6ec:	3714      	adds	r7, #20
     6ee:	46bd      	mov	sp, r7
     6f0:	f85d 7b04 	ldr.w	r7, [sp], #4
     6f4:	4770      	bx	lr

000006f6 <hri_port_set_OUT_reg>:
{
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = PORT_OUT_OUT(mask);
}

static inline void hri_port_set_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
     6f6:	b480      	push	{r7}
     6f8:	b085      	sub	sp, #20
     6fa:	af00      	add	r7, sp, #0
     6fc:	60f8      	str	r0, [r7, #12]
     6fe:	460b      	mov	r3, r1
     700:	607a      	str	r2, [r7, #4]
     702:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     704:	7afb      	ldrb	r3, [r7, #11]
     706:	68fa      	ldr	r2, [r7, #12]
     708:	01db      	lsls	r3, r3, #7
     70a:	4413      	add	r3, r2
     70c:	3318      	adds	r3, #24
     70e:	687a      	ldr	r2, [r7, #4]
     710:	601a      	str	r2, [r3, #0]
}
     712:	bf00      	nop
     714:	3714      	adds	r7, #20
     716:	46bd      	mov	sp, r7
     718:	f85d 7b04 	ldr.w	r7, [sp], #4
     71c:	4770      	bx	lr

0000071e <hri_port_clear_OUT_reg>:
	((Port *)hw)->Group[submodule_index].OUTSET.reg = data;
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = ~data;
}

static inline void hri_port_clear_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
     71e:	b480      	push	{r7}
     720:	b085      	sub	sp, #20
     722:	af00      	add	r7, sp, #0
     724:	60f8      	str	r0, [r7, #12]
     726:	460b      	mov	r3, r1
     728:	607a      	str	r2, [r7, #4]
     72a:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     72c:	7afb      	ldrb	r3, [r7, #11]
     72e:	68fa      	ldr	r2, [r7, #12]
     730:	01db      	lsls	r3, r3, #7
     732:	4413      	add	r3, r2
     734:	3314      	adds	r3, #20
     736:	687a      	ldr	r2, [r7, #4]
     738:	601a      	str	r2, [r3, #0]
}
     73a:	bf00      	nop
     73c:	3714      	adds	r7, #20
     73e:	46bd      	mov	sp, r7
     740:	f85d 7b04 	ldr.w	r7, [sp], #4
     744:	4770      	bx	lr

00000746 <hri_port_write_PMUX_PMUXE_bf>:
	return tmp;
}

static inline void hri_port_write_PMUX_PMUXE_bf(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                hri_port_pmux_reg_t data)
{
     746:	b480      	push	{r7}
     748:	b085      	sub	sp, #20
     74a:	af00      	add	r7, sp, #0
     74c:	6078      	str	r0, [r7, #4]
     74e:	4608      	mov	r0, r1
     750:	4611      	mov	r1, r2
     752:	461a      	mov	r2, r3
     754:	4603      	mov	r3, r0
     756:	70fb      	strb	r3, [r7, #3]
     758:	460b      	mov	r3, r1
     75a:	70bb      	strb	r3, [r7, #2]
     75c:	4613      	mov	r3, r2
     75e:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     760:	78fa      	ldrb	r2, [r7, #3]
     762:	78bb      	ldrb	r3, [r7, #2]
     764:	6879      	ldr	r1, [r7, #4]
     766:	01d2      	lsls	r2, r2, #7
     768:	440a      	add	r2, r1
     76a:	4413      	add	r3, r2
     76c:	3330      	adds	r3, #48	; 0x30
     76e:	781b      	ldrb	r3, [r3, #0]
     770:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     772:	7bfb      	ldrb	r3, [r7, #15]
     774:	f023 030f 	bic.w	r3, r3, #15
     778:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXE(data);
     77a:	787b      	ldrb	r3, [r7, #1]
     77c:	f003 030f 	and.w	r3, r3, #15
     780:	b2da      	uxtb	r2, r3
     782:	7bfb      	ldrb	r3, [r7, #15]
     784:	4313      	orrs	r3, r2
     786:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     788:	78fa      	ldrb	r2, [r7, #3]
     78a:	78bb      	ldrb	r3, [r7, #2]
     78c:	6879      	ldr	r1, [r7, #4]
     78e:	01d2      	lsls	r2, r2, #7
     790:	440a      	add	r2, r1
     792:	4413      	add	r3, r2
     794:	3330      	adds	r3, #48	; 0x30
     796:	7bfa      	ldrb	r2, [r7, #15]
     798:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     79a:	bf00      	nop
     79c:	3714      	adds	r7, #20
     79e:	46bd      	mov	sp, r7
     7a0:	f85d 7b04 	ldr.w	r7, [sp], #4
     7a4:	4770      	bx	lr

000007a6 <hri_port_write_PMUX_PMUXO_bf>:
	return tmp;
}

static inline void hri_port_write_PMUX_PMUXO_bf(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                hri_port_pmux_reg_t data)
{
     7a6:	b480      	push	{r7}
     7a8:	b085      	sub	sp, #20
     7aa:	af00      	add	r7, sp, #0
     7ac:	6078      	str	r0, [r7, #4]
     7ae:	4608      	mov	r0, r1
     7b0:	4611      	mov	r1, r2
     7b2:	461a      	mov	r2, r3
     7b4:	4603      	mov	r3, r0
     7b6:	70fb      	strb	r3, [r7, #3]
     7b8:	460b      	mov	r3, r1
     7ba:	70bb      	strb	r3, [r7, #2]
     7bc:	4613      	mov	r3, r2
     7be:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     7c0:	78fa      	ldrb	r2, [r7, #3]
     7c2:	78bb      	ldrb	r3, [r7, #2]
     7c4:	6879      	ldr	r1, [r7, #4]
     7c6:	01d2      	lsls	r2, r2, #7
     7c8:	440a      	add	r2, r1
     7ca:	4413      	add	r3, r2
     7cc:	3330      	adds	r3, #48	; 0x30
     7ce:	781b      	ldrb	r3, [r3, #0]
     7d0:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     7d2:	7bfb      	ldrb	r3, [r7, #15]
     7d4:	f003 030f 	and.w	r3, r3, #15
     7d8:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXO(data);
     7da:	787b      	ldrb	r3, [r7, #1]
     7dc:	011b      	lsls	r3, r3, #4
     7de:	b2da      	uxtb	r2, r3
     7e0:	7bfb      	ldrb	r3, [r7, #15]
     7e2:	4313      	orrs	r3, r2
     7e4:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     7e6:	78fa      	ldrb	r2, [r7, #3]
     7e8:	78bb      	ldrb	r3, [r7, #2]
     7ea:	6879      	ldr	r1, [r7, #4]
     7ec:	01d2      	lsls	r2, r2, #7
     7ee:	440a      	add	r2, r1
     7f0:	4413      	add	r3, r2
     7f2:	3330      	adds	r3, #48	; 0x30
     7f4:	7bfa      	ldrb	r2, [r7, #15]
     7f6:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     7f8:	bf00      	nop
     7fa:	3714      	adds	r7, #20
     7fc:	46bd      	mov	sp, r7
     7fe:	f85d 7b04 	ldr.w	r7, [sp], #4
     802:	4770      	bx	lr

00000804 <hri_port_write_PINCFG_PMUXEN_bit>:
	return (bool)tmp;
}

static inline void hri_port_write_PINCFG_PMUXEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                    bool value)
{
     804:	b480      	push	{r7}
     806:	b085      	sub	sp, #20
     808:	af00      	add	r7, sp, #0
     80a:	6078      	str	r0, [r7, #4]
     80c:	4608      	mov	r0, r1
     80e:	4611      	mov	r1, r2
     810:	461a      	mov	r2, r3
     812:	4603      	mov	r3, r0
     814:	70fb      	strb	r3, [r7, #3]
     816:	460b      	mov	r3, r1
     818:	70bb      	strb	r3, [r7, #2]
     81a:	4613      	mov	r3, r2
     81c:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     81e:	78fa      	ldrb	r2, [r7, #3]
     820:	78bb      	ldrb	r3, [r7, #2]
     822:	6879      	ldr	r1, [r7, #4]
     824:	01d2      	lsls	r2, r2, #7
     826:	440a      	add	r2, r1
     828:	4413      	add	r3, r2
     82a:	3340      	adds	r3, #64	; 0x40
     82c:	781b      	ldrb	r3, [r3, #0]
     82e:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PINCFG_PMUXEN;
     830:	7bfb      	ldrb	r3, [r7, #15]
     832:	f023 0301 	bic.w	r3, r3, #1
     836:	73fb      	strb	r3, [r7, #15]
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     838:	787a      	ldrb	r2, [r7, #1]
     83a:	7bfb      	ldrb	r3, [r7, #15]
     83c:	4313      	orrs	r3, r2
     83e:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     840:	78fa      	ldrb	r2, [r7, #3]
     842:	78bb      	ldrb	r3, [r7, #2]
     844:	6879      	ldr	r1, [r7, #4]
     846:	01d2      	lsls	r2, r2, #7
     848:	440a      	add	r2, r1
     84a:	4413      	add	r3, r2
     84c:	3340      	adds	r3, #64	; 0x40
     84e:	7bfa      	ldrb	r2, [r7, #15]
     850:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     852:	bf00      	nop
     854:	3714      	adds	r7, #20
     856:	46bd      	mov	sp, r7
     858:	f85d 7b04 	ldr.w	r7, [sp], #4
     85c:	4770      	bx	lr

0000085e <hri_port_set_PINCFG_PULLEN_bit>:
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg ^= PORT_PINCFG_INEN;
	PORT_CRITICAL_SECTION_LEAVE();
}

static inline void hri_port_set_PINCFG_PULLEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index)
{
     85e:	b490      	push	{r4, r7}
     860:	b082      	sub	sp, #8
     862:	af00      	add	r7, sp, #0
     864:	6078      	str	r0, [r7, #4]
     866:	460b      	mov	r3, r1
     868:	70fb      	strb	r3, [r7, #3]
     86a:	4613      	mov	r3, r2
     86c:	70bb      	strb	r3, [r7, #2]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
     86e:	78fa      	ldrb	r2, [r7, #3]
     870:	78bb      	ldrb	r3, [r7, #2]
     872:	78f8      	ldrb	r0, [r7, #3]
     874:	78b9      	ldrb	r1, [r7, #2]
     876:	687c      	ldr	r4, [r7, #4]
     878:	01c0      	lsls	r0, r0, #7
     87a:	4420      	add	r0, r4
     87c:	4401      	add	r1, r0
     87e:	3140      	adds	r1, #64	; 0x40
     880:	7809      	ldrb	r1, [r1, #0]
     882:	b2c9      	uxtb	r1, r1
     884:	f041 0104 	orr.w	r1, r1, #4
     888:	b2c8      	uxtb	r0, r1
     88a:	6879      	ldr	r1, [r7, #4]
     88c:	01d2      	lsls	r2, r2, #7
     88e:	440a      	add	r2, r1
     890:	4413      	add	r3, r2
     892:	3340      	adds	r3, #64	; 0x40
     894:	4602      	mov	r2, r0
     896:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     898:	bf00      	nop
     89a:	3708      	adds	r7, #8
     89c:	46bd      	mov	sp, r7
     89e:	bc90      	pop	{r4, r7}
     8a0:	4770      	bx	lr

000008a2 <hri_port_clear_PINCFG_PULLEN_bit>:
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
	PORT_CRITICAL_SECTION_LEAVE();
}

static inline void hri_port_clear_PINCFG_PULLEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index)
{
     8a2:	b490      	push	{r4, r7}
     8a4:	b082      	sub	sp, #8
     8a6:	af00      	add	r7, sp, #0
     8a8:	6078      	str	r0, [r7, #4]
     8aa:	460b      	mov	r3, r1
     8ac:	70fb      	strb	r3, [r7, #3]
     8ae:	4613      	mov	r3, r2
     8b0:	70bb      	strb	r3, [r7, #2]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     8b2:	78fa      	ldrb	r2, [r7, #3]
     8b4:	78bb      	ldrb	r3, [r7, #2]
     8b6:	78f8      	ldrb	r0, [r7, #3]
     8b8:	78b9      	ldrb	r1, [r7, #2]
     8ba:	687c      	ldr	r4, [r7, #4]
     8bc:	01c0      	lsls	r0, r0, #7
     8be:	4420      	add	r0, r4
     8c0:	4401      	add	r1, r0
     8c2:	3140      	adds	r1, #64	; 0x40
     8c4:	7809      	ldrb	r1, [r1, #0]
     8c6:	b2c9      	uxtb	r1, r1
     8c8:	f021 0104 	bic.w	r1, r1, #4
     8cc:	b2c8      	uxtb	r0, r1
     8ce:	6879      	ldr	r1, [r7, #4]
     8d0:	01d2      	lsls	r2, r2, #7
     8d2:	440a      	add	r2, r1
     8d4:	4413      	add	r3, r2
     8d6:	3340      	adds	r3, #64	; 0x40
     8d8:	4602      	mov	r2, r0
     8da:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     8dc:	bf00      	nop
     8de:	3708      	adds	r7, #8
     8e0:	46bd      	mov	sp, r7
     8e2:	bc90      	pop	{r4, r7}
     8e4:	4770      	bx	lr

000008e6 <hri_port_write_WRCONFIG_reg>:
	return ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
}

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
     8e6:	b480      	push	{r7}
     8e8:	b085      	sub	sp, #20
     8ea:	af00      	add	r7, sp, #0
     8ec:	60f8      	str	r0, [r7, #12]
     8ee:	460b      	mov	r3, r1
     8f0:	607a      	str	r2, [r7, #4]
     8f2:	72fb      	strb	r3, [r7, #11]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     8f4:	7afb      	ldrb	r3, [r7, #11]
     8f6:	68fa      	ldr	r2, [r7, #12]
     8f8:	01db      	lsls	r3, r3, #7
     8fa:	4413      	add	r3, r2
     8fc:	3328      	adds	r3, #40	; 0x28
     8fe:	687a      	ldr	r2, [r7, #4]
     900:	601a      	str	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     902:	bf00      	nop
     904:	3714      	adds	r7, #20
     906:	46bd      	mov	sp, r7
     908:	f85d 7b04 	ldr.w	r7, [sp], #4
     90c:	4770      	bx	lr
	...

00000910 <_gpio_set_direction>:
/**
 * \brief Set direction on port with mask
 */
static inline void _gpio_set_direction(const enum gpio_port port, const uint32_t mask,
                                       const enum gpio_direction direction)
{
     910:	b580      	push	{r7, lr}
     912:	b082      	sub	sp, #8
     914:	af00      	add	r7, sp, #0
     916:	4603      	mov	r3, r0
     918:	6039      	str	r1, [r7, #0]
     91a:	71fb      	strb	r3, [r7, #7]
     91c:	4613      	mov	r3, r2
     91e:	71bb      	strb	r3, [r7, #6]
	switch (direction) {
     920:	79bb      	ldrb	r3, [r7, #6]
     922:	2b01      	cmp	r3, #1
     924:	d01c      	beq.n	960 <_gpio_set_direction+0x50>
     926:	2b02      	cmp	r3, #2
     928:	d037      	beq.n	99a <_gpio_set_direction+0x8a>
     92a:	2b00      	cmp	r3, #0
     92c:	d14e      	bne.n	9cc <_gpio_set_direction+0xbc>
	case GPIO_DIRECTION_OFF:
		hri_port_clear_DIR_reg(PORT, port, mask);
     92e:	79fb      	ldrb	r3, [r7, #7]
     930:	683a      	ldr	r2, [r7, #0]
     932:	4619      	mov	r1, r3
     934:	482a      	ldr	r0, [pc, #168]	; (9e0 <_gpio_set_direction+0xd0>)
     936:	4b2b      	ldr	r3, [pc, #172]	; (9e4 <_gpio_set_direction+0xd4>)
     938:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
     93a:	683b      	ldr	r3, [r7, #0]
     93c:	b29b      	uxth	r3, r3
     93e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
     942:	79fb      	ldrb	r3, [r7, #7]
     944:	4619      	mov	r1, r3
     946:	4826      	ldr	r0, [pc, #152]	; (9e0 <_gpio_set_direction+0xd0>)
     948:	4b27      	ldr	r3, [pc, #156]	; (9e8 <_gpio_set_direction+0xd8>)
     94a:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
     94c:	683b      	ldr	r3, [r7, #0]
     94e:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
     950:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
     954:	79fb      	ldrb	r3, [r7, #7]
     956:	4619      	mov	r1, r3
     958:	4821      	ldr	r0, [pc, #132]	; (9e0 <_gpio_set_direction+0xd0>)
     95a:	4b23      	ldr	r3, [pc, #140]	; (9e8 <_gpio_set_direction+0xd8>)
     95c:	4798      	blx	r3
		break;
     95e:	e03a      	b.n	9d6 <_gpio_set_direction+0xc6>

	case GPIO_DIRECTION_IN:
		hri_port_clear_DIR_reg(PORT, port, mask);
     960:	79fb      	ldrb	r3, [r7, #7]
     962:	683a      	ldr	r2, [r7, #0]
     964:	4619      	mov	r1, r3
     966:	481e      	ldr	r0, [pc, #120]	; (9e0 <_gpio_set_direction+0xd0>)
     968:	4b1e      	ldr	r3, [pc, #120]	; (9e4 <_gpio_set_direction+0xd4>)
     96a:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN | (mask & 0xffff));
     96c:	683b      	ldr	r3, [r7, #0]
     96e:	b29b      	uxth	r3, r3
     970:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
     974:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
     978:	79f9      	ldrb	r1, [r7, #7]
     97a:	461a      	mov	r2, r3
     97c:	4818      	ldr	r0, [pc, #96]	; (9e0 <_gpio_set_direction+0xd0>)
     97e:	4b1a      	ldr	r3, [pc, #104]	; (9e8 <_gpio_set_direction+0xd8>)
     980:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT,
		                            port,
		                            PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN
		                                | ((mask & 0xffff0000) >> 16));
     982:	683b      	ldr	r3, [r7, #0]
     984:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(PORT,
     986:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
     98a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
     98e:	79f9      	ldrb	r1, [r7, #7]
     990:	461a      	mov	r2, r3
     992:	4813      	ldr	r0, [pc, #76]	; (9e0 <_gpio_set_direction+0xd0>)
     994:	4b14      	ldr	r3, [pc, #80]	; (9e8 <_gpio_set_direction+0xd8>)
     996:	4798      	blx	r3
		break;
     998:	e01d      	b.n	9d6 <_gpio_set_direction+0xc6>

	case GPIO_DIRECTION_OUT:
		hri_port_set_DIR_reg(PORT, port, mask);
     99a:	79fb      	ldrb	r3, [r7, #7]
     99c:	683a      	ldr	r2, [r7, #0]
     99e:	4619      	mov	r1, r3
     9a0:	480f      	ldr	r0, [pc, #60]	; (9e0 <_gpio_set_direction+0xd0>)
     9a2:	4b12      	ldr	r3, [pc, #72]	; (9ec <_gpio_set_direction+0xdc>)
     9a4:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
     9a6:	683b      	ldr	r3, [r7, #0]
     9a8:	b29b      	uxth	r3, r3
     9aa:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
     9ae:	79fb      	ldrb	r3, [r7, #7]
     9b0:	4619      	mov	r1, r3
     9b2:	480b      	ldr	r0, [pc, #44]	; (9e0 <_gpio_set_direction+0xd0>)
     9b4:	4b0c      	ldr	r3, [pc, #48]	; (9e8 <_gpio_set_direction+0xd8>)
     9b6:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
     9b8:	683b      	ldr	r3, [r7, #0]
     9ba:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
     9bc:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
     9c0:	79fb      	ldrb	r3, [r7, #7]
     9c2:	4619      	mov	r1, r3
     9c4:	4806      	ldr	r0, [pc, #24]	; (9e0 <_gpio_set_direction+0xd0>)
     9c6:	4b08      	ldr	r3, [pc, #32]	; (9e8 <_gpio_set_direction+0xd8>)
     9c8:	4798      	blx	r3
		break;
     9ca:	e004      	b.n	9d6 <_gpio_set_direction+0xc6>

	default:
		ASSERT(false);
     9cc:	2246      	movs	r2, #70	; 0x46
     9ce:	4908      	ldr	r1, [pc, #32]	; (9f0 <_gpio_set_direction+0xe0>)
     9d0:	2000      	movs	r0, #0
     9d2:	4b08      	ldr	r3, [pc, #32]	; (9f4 <_gpio_set_direction+0xe4>)
     9d4:	4798      	blx	r3
	}
}
     9d6:	bf00      	nop
     9d8:	3708      	adds	r7, #8
     9da:	46bd      	mov	sp, r7
     9dc:	bd80      	pop	{r7, pc}
     9de:	bf00      	nop
     9e0:	41008000 	.word	0x41008000
     9e4:	000006cf 	.word	0x000006cf
     9e8:	000008e7 	.word	0x000008e7
     9ec:	000006a7 	.word	0x000006a7
     9f0:	00012e18 	.word	0x00012e18
     9f4:	00002ed9 	.word	0x00002ed9

000009f8 <_gpio_set_level>:

/**
 * \brief Set output level on port with mask
 */
static inline void _gpio_set_level(const enum gpio_port port, const uint32_t mask, const bool level)
{
     9f8:	b580      	push	{r7, lr}
     9fa:	b082      	sub	sp, #8
     9fc:	af00      	add	r7, sp, #0
     9fe:	4603      	mov	r3, r0
     a00:	6039      	str	r1, [r7, #0]
     a02:	71fb      	strb	r3, [r7, #7]
     a04:	4613      	mov	r3, r2
     a06:	71bb      	strb	r3, [r7, #6]
	if (level) {
     a08:	79bb      	ldrb	r3, [r7, #6]
     a0a:	2b00      	cmp	r3, #0
     a0c:	d006      	beq.n	a1c <_gpio_set_level+0x24>
		hri_port_set_OUT_reg(PORT, port, mask);
     a0e:	79fb      	ldrb	r3, [r7, #7]
     a10:	683a      	ldr	r2, [r7, #0]
     a12:	4619      	mov	r1, r3
     a14:	4806      	ldr	r0, [pc, #24]	; (a30 <_gpio_set_level+0x38>)
     a16:	4b07      	ldr	r3, [pc, #28]	; (a34 <_gpio_set_level+0x3c>)
     a18:	4798      	blx	r3
	} else {
		hri_port_clear_OUT_reg(PORT, port, mask);
	}
}
     a1a:	e005      	b.n	a28 <_gpio_set_level+0x30>
		hri_port_clear_OUT_reg(PORT, port, mask);
     a1c:	79fb      	ldrb	r3, [r7, #7]
     a1e:	683a      	ldr	r2, [r7, #0]
     a20:	4619      	mov	r1, r3
     a22:	4803      	ldr	r0, [pc, #12]	; (a30 <_gpio_set_level+0x38>)
     a24:	4b04      	ldr	r3, [pc, #16]	; (a38 <_gpio_set_level+0x40>)
     a26:	4798      	blx	r3
}
     a28:	bf00      	nop
     a2a:	3708      	adds	r7, #8
     a2c:	46bd      	mov	sp, r7
     a2e:	bd80      	pop	{r7, pc}
     a30:	41008000 	.word	0x41008000
     a34:	000006f7 	.word	0x000006f7
     a38:	0000071f 	.word	0x0000071f

00000a3c <_gpio_set_pin_pull_mode>:
/**
 * \brief Set pin pull mode
 */
static inline void _gpio_set_pin_pull_mode(const enum gpio_port port, const uint8_t pin,
                                           const enum gpio_pull_mode pull_mode)
{
     a3c:	b580      	push	{r7, lr}
     a3e:	b082      	sub	sp, #8
     a40:	af00      	add	r7, sp, #0
     a42:	4603      	mov	r3, r0
     a44:	71fb      	strb	r3, [r7, #7]
     a46:	460b      	mov	r3, r1
     a48:	71bb      	strb	r3, [r7, #6]
     a4a:	4613      	mov	r3, r2
     a4c:	717b      	strb	r3, [r7, #5]
	switch (pull_mode) {
     a4e:	797b      	ldrb	r3, [r7, #5]
     a50:	2b01      	cmp	r3, #1
     a52:	d00a      	beq.n	a6a <_gpio_set_pin_pull_mode+0x2e>
     a54:	2b02      	cmp	r3, #2
     a56:	d01f      	beq.n	a98 <_gpio_set_pin_pull_mode+0x5c>
     a58:	2b00      	cmp	r3, #0
     a5a:	d134      	bne.n	ac6 <_gpio_set_pin_pull_mode+0x8a>
	case GPIO_PULL_OFF:
		hri_port_clear_PINCFG_PULLEN_bit(PORT, port, pin);
     a5c:	79ba      	ldrb	r2, [r7, #6]
     a5e:	79fb      	ldrb	r3, [r7, #7]
     a60:	4619      	mov	r1, r3
     a62:	481e      	ldr	r0, [pc, #120]	; (adc <_gpio_set_pin_pull_mode+0xa0>)
     a64:	4b1e      	ldr	r3, [pc, #120]	; (ae0 <_gpio_set_pin_pull_mode+0xa4>)
     a66:	4798      	blx	r3
		break;
     a68:	e033      	b.n	ad2 <_gpio_set_pin_pull_mode+0x96>

	case GPIO_PULL_UP:
		hri_port_clear_DIR_reg(PORT, port, 1U << pin);
     a6a:	79bb      	ldrb	r3, [r7, #6]
     a6c:	2201      	movs	r2, #1
     a6e:	409a      	lsls	r2, r3
     a70:	79fb      	ldrb	r3, [r7, #7]
     a72:	4619      	mov	r1, r3
     a74:	4819      	ldr	r0, [pc, #100]	; (adc <_gpio_set_pin_pull_mode+0xa0>)
     a76:	4b1b      	ldr	r3, [pc, #108]	; (ae4 <_gpio_set_pin_pull_mode+0xa8>)
     a78:	4798      	blx	r3
		hri_port_set_PINCFG_PULLEN_bit(PORT, port, pin);
     a7a:	79ba      	ldrb	r2, [r7, #6]
     a7c:	79fb      	ldrb	r3, [r7, #7]
     a7e:	4619      	mov	r1, r3
     a80:	4816      	ldr	r0, [pc, #88]	; (adc <_gpio_set_pin_pull_mode+0xa0>)
     a82:	4b19      	ldr	r3, [pc, #100]	; (ae8 <_gpio_set_pin_pull_mode+0xac>)
     a84:	4798      	blx	r3
		hri_port_set_OUT_reg(PORT, port, 1U << pin);
     a86:	79bb      	ldrb	r3, [r7, #6]
     a88:	2201      	movs	r2, #1
     a8a:	409a      	lsls	r2, r3
     a8c:	79fb      	ldrb	r3, [r7, #7]
     a8e:	4619      	mov	r1, r3
     a90:	4812      	ldr	r0, [pc, #72]	; (adc <_gpio_set_pin_pull_mode+0xa0>)
     a92:	4b16      	ldr	r3, [pc, #88]	; (aec <_gpio_set_pin_pull_mode+0xb0>)
     a94:	4798      	blx	r3
		break;
     a96:	e01c      	b.n	ad2 <_gpio_set_pin_pull_mode+0x96>

	case GPIO_PULL_DOWN:
		hri_port_clear_DIR_reg(PORT, port, 1U << pin);
     a98:	79bb      	ldrb	r3, [r7, #6]
     a9a:	2201      	movs	r2, #1
     a9c:	409a      	lsls	r2, r3
     a9e:	79fb      	ldrb	r3, [r7, #7]
     aa0:	4619      	mov	r1, r3
     aa2:	480e      	ldr	r0, [pc, #56]	; (adc <_gpio_set_pin_pull_mode+0xa0>)
     aa4:	4b0f      	ldr	r3, [pc, #60]	; (ae4 <_gpio_set_pin_pull_mode+0xa8>)
     aa6:	4798      	blx	r3
		hri_port_set_PINCFG_PULLEN_bit(PORT, port, pin);
     aa8:	79ba      	ldrb	r2, [r7, #6]
     aaa:	79fb      	ldrb	r3, [r7, #7]
     aac:	4619      	mov	r1, r3
     aae:	480b      	ldr	r0, [pc, #44]	; (adc <_gpio_set_pin_pull_mode+0xa0>)
     ab0:	4b0d      	ldr	r3, [pc, #52]	; (ae8 <_gpio_set_pin_pull_mode+0xac>)
     ab2:	4798      	blx	r3
		hri_port_clear_OUT_reg(PORT, port, 1U << pin);
     ab4:	79bb      	ldrb	r3, [r7, #6]
     ab6:	2201      	movs	r2, #1
     ab8:	409a      	lsls	r2, r3
     aba:	79fb      	ldrb	r3, [r7, #7]
     abc:	4619      	mov	r1, r3
     abe:	4807      	ldr	r0, [pc, #28]	; (adc <_gpio_set_pin_pull_mode+0xa0>)
     ac0:	4b0b      	ldr	r3, [pc, #44]	; (af0 <_gpio_set_pin_pull_mode+0xb4>)
     ac2:	4798      	blx	r3
		break;
     ac4:	e005      	b.n	ad2 <_gpio_set_pin_pull_mode+0x96>

	default:
		ASSERT(false);
     ac6:	2289      	movs	r2, #137	; 0x89
     ac8:	490a      	ldr	r1, [pc, #40]	; (af4 <_gpio_set_pin_pull_mode+0xb8>)
     aca:	2000      	movs	r0, #0
     acc:	4b0a      	ldr	r3, [pc, #40]	; (af8 <_gpio_set_pin_pull_mode+0xbc>)
     ace:	4798      	blx	r3
		break;
     ad0:	bf00      	nop
	}
}
     ad2:	bf00      	nop
     ad4:	3708      	adds	r7, #8
     ad6:	46bd      	mov	sp, r7
     ad8:	bd80      	pop	{r7, pc}
     ada:	bf00      	nop
     adc:	41008000 	.word	0x41008000
     ae0:	000008a3 	.word	0x000008a3
     ae4:	000006cf 	.word	0x000006cf
     ae8:	0000085f 	.word	0x0000085f
     aec:	000006f7 	.word	0x000006f7
     af0:	0000071f 	.word	0x0000071f
     af4:	00012e18 	.word	0x00012e18
     af8:	00002ed9 	.word	0x00002ed9

00000afc <_gpio_set_pin_function>:

/**
 * \brief Set gpio pin function
 */
static inline void _gpio_set_pin_function(const uint32_t gpio, const uint32_t function)
{
     afc:	b590      	push	{r4, r7, lr}
     afe:	b085      	sub	sp, #20
     b00:	af00      	add	r7, sp, #0
     b02:	6078      	str	r0, [r7, #4]
     b04:	6039      	str	r1, [r7, #0]
	uint8_t port = GPIO_PORT(gpio);
     b06:	687b      	ldr	r3, [r7, #4]
     b08:	095b      	lsrs	r3, r3, #5
     b0a:	73fb      	strb	r3, [r7, #15]
	uint8_t pin  = GPIO_PIN(gpio);
     b0c:	687b      	ldr	r3, [r7, #4]
     b0e:	b2db      	uxtb	r3, r3
     b10:	f003 031f 	and.w	r3, r3, #31
     b14:	73bb      	strb	r3, [r7, #14]

	if (function == GPIO_PIN_FUNCTION_OFF) {
     b16:	683b      	ldr	r3, [r7, #0]
     b18:	f1b3 3fff 	cmp.w	r3, #4294967295
     b1c:	d106      	bne.n	b2c <_gpio_set_pin_function+0x30>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, false);
     b1e:	7bba      	ldrb	r2, [r7, #14]
     b20:	7bf9      	ldrb	r1, [r7, #15]
     b22:	2300      	movs	r3, #0
     b24:	4812      	ldr	r0, [pc, #72]	; (b70 <_gpio_set_pin_function+0x74>)
     b26:	4c13      	ldr	r4, [pc, #76]	; (b74 <_gpio_set_pin_function+0x78>)
     b28:	47a0      	blx	r4
		} else {
			// Even numbered pin
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
		}
	}
}
     b2a:	e01d      	b.n	b68 <_gpio_set_pin_function+0x6c>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, true);
     b2c:	7bba      	ldrb	r2, [r7, #14]
     b2e:	7bf9      	ldrb	r1, [r7, #15]
     b30:	2301      	movs	r3, #1
     b32:	480f      	ldr	r0, [pc, #60]	; (b70 <_gpio_set_pin_function+0x74>)
     b34:	4c0f      	ldr	r4, [pc, #60]	; (b74 <_gpio_set_pin_function+0x78>)
     b36:	47a0      	blx	r4
		if (pin & 1) {
     b38:	7bbb      	ldrb	r3, [r7, #14]
     b3a:	f003 0301 	and.w	r3, r3, #1
     b3e:	2b00      	cmp	r3, #0
     b40:	d009      	beq.n	b56 <_gpio_set_pin_function+0x5a>
			hri_port_write_PMUX_PMUXO_bf(PORT, port, pin >> 1, function & 0xffff);
     b42:	7bbb      	ldrb	r3, [r7, #14]
     b44:	085b      	lsrs	r3, r3, #1
     b46:	b2da      	uxtb	r2, r3
     b48:	683b      	ldr	r3, [r7, #0]
     b4a:	b2db      	uxtb	r3, r3
     b4c:	7bf9      	ldrb	r1, [r7, #15]
     b4e:	4808      	ldr	r0, [pc, #32]	; (b70 <_gpio_set_pin_function+0x74>)
     b50:	4c09      	ldr	r4, [pc, #36]	; (b78 <_gpio_set_pin_function+0x7c>)
     b52:	47a0      	blx	r4
}
     b54:	e008      	b.n	b68 <_gpio_set_pin_function+0x6c>
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
     b56:	7bbb      	ldrb	r3, [r7, #14]
     b58:	085b      	lsrs	r3, r3, #1
     b5a:	b2da      	uxtb	r2, r3
     b5c:	683b      	ldr	r3, [r7, #0]
     b5e:	b2db      	uxtb	r3, r3
     b60:	7bf9      	ldrb	r1, [r7, #15]
     b62:	4803      	ldr	r0, [pc, #12]	; (b70 <_gpio_set_pin_function+0x74>)
     b64:	4c05      	ldr	r4, [pc, #20]	; (b7c <_gpio_set_pin_function+0x80>)
     b66:	47a0      	blx	r4
}
     b68:	bf00      	nop
     b6a:	3714      	adds	r7, #20
     b6c:	46bd      	mov	sp, r7
     b6e:	bd90      	pop	{r4, r7, pc}
     b70:	41008000 	.word	0x41008000
     b74:	00000805 	.word	0x00000805
     b78:	000007a7 	.word	0x000007a7
     b7c:	00000747 	.word	0x00000747

00000b80 <gpio_set_pin_pull_mode>:
 * \param[in] pull_mode GPIO_PULL_DOWN = Pull pin low with internal resistor
 *                      GPIO_PULL_UP   = Pull pin high with internal resistor
 *                      GPIO_PULL_OFF  = Disable pin pull mode
 */
static inline void gpio_set_pin_pull_mode(const uint8_t pin, const enum gpio_pull_mode pull_mode)
{
     b80:	b580      	push	{r7, lr}
     b82:	b082      	sub	sp, #8
     b84:	af00      	add	r7, sp, #0
     b86:	4603      	mov	r3, r0
     b88:	460a      	mov	r2, r1
     b8a:	71fb      	strb	r3, [r7, #7]
     b8c:	4613      	mov	r3, r2
     b8e:	71bb      	strb	r3, [r7, #6]
	_gpio_set_pin_pull_mode((enum gpio_port)GPIO_PORT(pin), pin & 0x1F, pull_mode);
     b90:	79fb      	ldrb	r3, [r7, #7]
     b92:	095b      	lsrs	r3, r3, #5
     b94:	b2d8      	uxtb	r0, r3
     b96:	79fb      	ldrb	r3, [r7, #7]
     b98:	f003 031f 	and.w	r3, r3, #31
     b9c:	b2db      	uxtb	r3, r3
     b9e:	79ba      	ldrb	r2, [r7, #6]
     ba0:	4619      	mov	r1, r3
     ba2:	4b03      	ldr	r3, [pc, #12]	; (bb0 <gpio_set_pin_pull_mode+0x30>)
     ba4:	4798      	blx	r3
}
     ba6:	bf00      	nop
     ba8:	3708      	adds	r7, #8
     baa:	46bd      	mov	sp, r7
     bac:	bd80      	pop	{r7, pc}
     bae:	bf00      	nop
     bb0:	00000a3d 	.word	0x00000a3d

00000bb4 <gpio_set_pin_function>:
 * \param[in] function  The pin function is given by a 32-bit wide bitfield
 *                      found in the header files for the device
 *
 */
static inline void gpio_set_pin_function(const uint32_t pin, uint32_t function)
{
     bb4:	b580      	push	{r7, lr}
     bb6:	b082      	sub	sp, #8
     bb8:	af00      	add	r7, sp, #0
     bba:	6078      	str	r0, [r7, #4]
     bbc:	6039      	str	r1, [r7, #0]
	_gpio_set_pin_function(pin, function);
     bbe:	6839      	ldr	r1, [r7, #0]
     bc0:	6878      	ldr	r0, [r7, #4]
     bc2:	4b03      	ldr	r3, [pc, #12]	; (bd0 <gpio_set_pin_function+0x1c>)
     bc4:	4798      	blx	r3
}
     bc6:	bf00      	nop
     bc8:	3708      	adds	r7, #8
     bca:	46bd      	mov	sp, r7
     bcc:	bd80      	pop	{r7, pc}
     bce:	bf00      	nop
     bd0:	00000afd 	.word	0x00000afd

00000bd4 <gpio_set_pin_direction>:
 *                      GPIO_DIRECTION_OUT = Data direction out
 *                      GPIO_DIRECTION_OFF = Disables the pin
 *                      (low power state)
 */
static inline void gpio_set_pin_direction(const uint8_t pin, const enum gpio_direction direction)
{
     bd4:	b580      	push	{r7, lr}
     bd6:	b082      	sub	sp, #8
     bd8:	af00      	add	r7, sp, #0
     bda:	4603      	mov	r3, r0
     bdc:	460a      	mov	r2, r1
     bde:	71fb      	strb	r3, [r7, #7]
     be0:	4613      	mov	r3, r2
     be2:	71bb      	strb	r3, [r7, #6]
	_gpio_set_direction((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), direction);
     be4:	79fb      	ldrb	r3, [r7, #7]
     be6:	095b      	lsrs	r3, r3, #5
     be8:	b2d8      	uxtb	r0, r3
     bea:	79fb      	ldrb	r3, [r7, #7]
     bec:	f003 031f 	and.w	r3, r3, #31
     bf0:	2201      	movs	r2, #1
     bf2:	fa02 f303 	lsl.w	r3, r2, r3
     bf6:	79ba      	ldrb	r2, [r7, #6]
     bf8:	4619      	mov	r1, r3
     bfa:	4b03      	ldr	r3, [pc, #12]	; (c08 <gpio_set_pin_direction+0x34>)
     bfc:	4798      	blx	r3
}
     bfe:	bf00      	nop
     c00:	3708      	adds	r7, #8
     c02:	46bd      	mov	sp, r7
     c04:	bd80      	pop	{r7, pc}
     c06:	bf00      	nop
     c08:	00000911 	.word	0x00000911

00000c0c <gpio_set_pin_level>:
 * \param[in] pin       The pin number for device
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void gpio_set_pin_level(const uint8_t pin, const bool level)
{
     c0c:	b580      	push	{r7, lr}
     c0e:	b082      	sub	sp, #8
     c10:	af00      	add	r7, sp, #0
     c12:	4603      	mov	r3, r0
     c14:	460a      	mov	r2, r1
     c16:	71fb      	strb	r3, [r7, #7]
     c18:	4613      	mov	r3, r2
     c1a:	71bb      	strb	r3, [r7, #6]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
     c1c:	79fb      	ldrb	r3, [r7, #7]
     c1e:	095b      	lsrs	r3, r3, #5
     c20:	b2d8      	uxtb	r0, r3
     c22:	79fb      	ldrb	r3, [r7, #7]
     c24:	f003 031f 	and.w	r3, r3, #31
     c28:	2201      	movs	r2, #1
     c2a:	fa02 f303 	lsl.w	r3, r2, r3
     c2e:	79ba      	ldrb	r2, [r7, #6]
     c30:	4619      	mov	r1, r3
     c32:	4b03      	ldr	r3, [pc, #12]	; (c40 <gpio_set_pin_level+0x34>)
     c34:	4798      	blx	r3
}
     c36:	bf00      	nop
     c38:	3708      	adds	r7, #8
     c3a:	46bd      	mov	sp, r7
     c3c:	bd80      	pop	{r7, pc}
     c3e:	bf00      	nop
     c40:	000009f9 	.word	0x000009f9

00000c44 <init_mcu>:
 * This function calls the various initialization functions.
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
     c44:	b580      	push	{r7, lr}
     c46:	af00      	add	r7, sp, #0
	_init_chip();
     c48:	4b01      	ldr	r3, [pc, #4]	; (c50 <init_mcu+0xc>)
     c4a:	4798      	blx	r3
}
     c4c:	bf00      	nop
     c4e:	bd80      	pop	{r7, pc}
     c50:	00004069 	.word	0x00004069

00000c54 <wdt_init>:
 * \return Operation status of init
 * \retval 0 Completed sucessfully.
 * \retval -1 Always on or enabled, don't need init again.
 */
static inline int32_t wdt_init(struct wdt_descriptor *const wdt, const void *hw)
{
     c54:	b580      	push	{r7, lr}
     c56:	b082      	sub	sp, #8
     c58:	af00      	add	r7, sp, #0
     c5a:	6078      	str	r0, [r7, #4]
     c5c:	6039      	str	r1, [r7, #0]
	ASSERT(wdt && hw);
     c5e:	687b      	ldr	r3, [r7, #4]
     c60:	2b00      	cmp	r3, #0
     c62:	d004      	beq.n	c6e <wdt_init+0x1a>
     c64:	683b      	ldr	r3, [r7, #0]
     c66:	2b00      	cmp	r3, #0
     c68:	d001      	beq.n	c6e <wdt_init+0x1a>
     c6a:	2301      	movs	r3, #1
     c6c:	e000      	b.n	c70 <wdt_init+0x1c>
     c6e:	2300      	movs	r3, #0
     c70:	f003 0301 	and.w	r3, r3, #1
     c74:	b2db      	uxtb	r3, r3
     c76:	2248      	movs	r2, #72	; 0x48
     c78:	4907      	ldr	r1, [pc, #28]	; (c98 <wdt_init+0x44>)
     c7a:	4618      	mov	r0, r3
     c7c:	4b07      	ldr	r3, [pc, #28]	; (c9c <wdt_init+0x48>)
     c7e:	4798      	blx	r3

	wdt->dev.hw = (void *)hw;
     c80:	687b      	ldr	r3, [r7, #4]
     c82:	683a      	ldr	r2, [r7, #0]
     c84:	601a      	str	r2, [r3, #0]

	return _wdt_init(&wdt->dev);
     c86:	687b      	ldr	r3, [r7, #4]
     c88:	4618      	mov	r0, r3
     c8a:	4b05      	ldr	r3, [pc, #20]	; (ca0 <wdt_init+0x4c>)
     c8c:	4798      	blx	r3
     c8e:	4603      	mov	r3, r0
}
     c90:	4618      	mov	r0, r3
     c92:	3708      	adds	r7, #8
     c94:	46bd      	mov	sp, r7
     c96:	bd80      	pop	{r7, pc}
     c98:	00012e34 	.word	0x00012e34
     c9c:	00002ed9 	.word	0x00002ed9
     ca0:	0000a399 	.word	0x0000a399

00000ca4 <CRC_CALC_init>:
 * \brief CRC initialization function
 *
 * Enables CRC peripheral, clocks and initializes CRC driver
 */
void CRC_CALC_init(void)
{
     ca4:	b580      	push	{r7, lr}
     ca6:	af00      	add	r7, sp, #0
	hri_mclk_set_APBBMASK_DSU_bit(MCLK);
     ca8:	4804      	ldr	r0, [pc, #16]	; (cbc <CRC_CALC_init+0x18>)
     caa:	4b05      	ldr	r3, [pc, #20]	; (cc0 <CRC_CALC_init+0x1c>)
     cac:	4798      	blx	r3
	crc_sync_init(&CRC_CALC, DSU);
     cae:	4905      	ldr	r1, [pc, #20]	; (cc4 <CRC_CALC_init+0x20>)
     cb0:	4805      	ldr	r0, [pc, #20]	; (cc8 <CRC_CALC_init+0x24>)
     cb2:	4b06      	ldr	r3, [pc, #24]	; (ccc <CRC_CALC_init+0x28>)
     cb4:	4798      	blx	r3
}
     cb6:	bf00      	nop
     cb8:	bd80      	pop	{r7, pc}
     cba:	bf00      	nop
     cbc:	40000800 	.word	0x40000800
     cc0:	00000567 	.word	0x00000567
     cc4:	41002000 	.word	0x41002000
     cc8:	20001b74 	.word	0x20001b74
     ccc:	0000194d 	.word	0x0000194d

00000cd0 <EXTERNAL_IRQ_0_init>:

void EXTERNAL_IRQ_0_init(void)
{
     cd0:	b580      	push	{r7, lr}
     cd2:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, EIC_GCLK_ID, CONF_GCLK_EIC_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
     cd4:	2244      	movs	r2, #68	; 0x44
     cd6:	2104      	movs	r1, #4
     cd8:	481e      	ldr	r0, [pc, #120]	; (d54 <EXTERNAL_IRQ_0_init+0x84>)
     cda:	4b1f      	ldr	r3, [pc, #124]	; (d58 <EXTERNAL_IRQ_0_init+0x88>)
     cdc:	4798      	blx	r3
	hri_mclk_set_APBAMASK_EIC_bit(MCLK);
     cde:	481f      	ldr	r0, [pc, #124]	; (d5c <EXTERNAL_IRQ_0_init+0x8c>)
     ce0:	4b1f      	ldr	r3, [pc, #124]	; (d60 <EXTERNAL_IRQ_0_init+0x90>)
     ce2:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PA04, GPIO_DIRECTION_IN);
     ce4:	2101      	movs	r1, #1
     ce6:	2004      	movs	r0, #4
     ce8:	4b1e      	ldr	r3, [pc, #120]	; (d64 <EXTERNAL_IRQ_0_init+0x94>)
     cea:	4798      	blx	r3

	gpio_set_pin_pull_mode(PA04,
     cec:	2102      	movs	r1, #2
     cee:	2004      	movs	r0, #4
     cf0:	4b1d      	ldr	r3, [pc, #116]	; (d68 <EXTERNAL_IRQ_0_init+0x98>)
     cf2:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(PA04, PINMUX_PA04A_EIC_EXTINT4);
     cf4:	f44f 2180 	mov.w	r1, #262144	; 0x40000
     cf8:	2004      	movs	r0, #4
     cfa:	4b1c      	ldr	r3, [pc, #112]	; (d6c <EXTERNAL_IRQ_0_init+0x9c>)
     cfc:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PA05, GPIO_DIRECTION_IN);
     cfe:	2101      	movs	r1, #1
     d00:	2005      	movs	r0, #5
     d02:	4b18      	ldr	r3, [pc, #96]	; (d64 <EXTERNAL_IRQ_0_init+0x94>)
     d04:	4798      	blx	r3

	gpio_set_pin_pull_mode(PA05,
     d06:	2102      	movs	r1, #2
     d08:	2005      	movs	r0, #5
     d0a:	4b17      	ldr	r3, [pc, #92]	; (d68 <EXTERNAL_IRQ_0_init+0x98>)
     d0c:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(PA05, PINMUX_PA05A_EIC_EXTINT5);
     d0e:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
     d12:	2005      	movs	r0, #5
     d14:	4b15      	ldr	r3, [pc, #84]	; (d6c <EXTERNAL_IRQ_0_init+0x9c>)
     d16:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(R2Int, GPIO_DIRECTION_IN);
     d18:	2101      	movs	r1, #1
     d1a:	2056      	movs	r0, #86	; 0x56
     d1c:	4b11      	ldr	r3, [pc, #68]	; (d64 <EXTERNAL_IRQ_0_init+0x94>)
     d1e:	4798      	blx	r3

	gpio_set_pin_pull_mode(R2Int,
     d20:	2102      	movs	r1, #2
     d22:	2056      	movs	r0, #86	; 0x56
     d24:	4b10      	ldr	r3, [pc, #64]	; (d68 <EXTERNAL_IRQ_0_init+0x98>)
     d26:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(R2Int, PINMUX_PC22A_EIC_EXTINT6);
     d28:	f44f 01ac 	mov.w	r1, #5636096	; 0x560000
     d2c:	2056      	movs	r0, #86	; 0x56
     d2e:	4b0f      	ldr	r3, [pc, #60]	; (d6c <EXTERNAL_IRQ_0_init+0x9c>)
     d30:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(R1Int, GPIO_DIRECTION_IN);
     d32:	2101      	movs	r1, #1
     d34:	2057      	movs	r0, #87	; 0x57
     d36:	4b0b      	ldr	r3, [pc, #44]	; (d64 <EXTERNAL_IRQ_0_init+0x94>)
     d38:	4798      	blx	r3

	gpio_set_pin_pull_mode(R1Int,
     d3a:	2102      	movs	r1, #2
     d3c:	2057      	movs	r0, #87	; 0x57
     d3e:	4b0a      	ldr	r3, [pc, #40]	; (d68 <EXTERNAL_IRQ_0_init+0x98>)
     d40:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(R1Int, PINMUX_PC23A_EIC_EXTINT7);
     d42:	f44f 01ae 	mov.w	r1, #5701632	; 0x570000
     d46:	2057      	movs	r0, #87	; 0x57
     d48:	4b08      	ldr	r3, [pc, #32]	; (d6c <EXTERNAL_IRQ_0_init+0x9c>)
     d4a:	4798      	blx	r3

	ext_irq_init();
     d4c:	4b08      	ldr	r3, [pc, #32]	; (d70 <EXTERNAL_IRQ_0_init+0xa0>)
     d4e:	4798      	blx	r3
}
     d50:	bf00      	nop
     d52:	bd80      	pop	{r7, pc}
     d54:	40001c00 	.word	0x40001c00
     d58:	00000401 	.word	0x00000401
     d5c:	40000800 	.word	0x40000800
     d60:	000004e7 	.word	0x000004e7
     d64:	00000bd5 	.word	0x00000bd5
     d68:	00000b81 	.word	0x00000b81
     d6c:	00000bb5 	.word	0x00000bb5
     d70:	00001a15 	.word	0x00001a15

00000d74 <EVENT_SYSTEM_0_init>:

void EVENT_SYSTEM_0_init(void)
{
     d74:	b580      	push	{r7, lr}
     d76:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, EVSYS_GCLK_ID_0, CONF_GCLK_EVSYS_CHANNEL_0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
     d78:	2244      	movs	r2, #68	; 0x44
     d7a:	210b      	movs	r1, #11
     d7c:	4804      	ldr	r0, [pc, #16]	; (d90 <EVENT_SYSTEM_0_init+0x1c>)
     d7e:	4b05      	ldr	r3, [pc, #20]	; (d94 <EVENT_SYSTEM_0_init+0x20>)
     d80:	4798      	blx	r3

	hri_mclk_set_APBBMASK_EVSYS_bit(MCLK);
     d82:	4805      	ldr	r0, [pc, #20]	; (d98 <EVENT_SYSTEM_0_init+0x24>)
     d84:	4b05      	ldr	r3, [pc, #20]	; (d9c <EVENT_SYSTEM_0_init+0x28>)
     d86:	4798      	blx	r3

	event_system_init();
     d88:	4b05      	ldr	r3, [pc, #20]	; (da0 <EVENT_SYSTEM_0_init+0x2c>)
     d8a:	4798      	blx	r3
}
     d8c:	bf00      	nop
     d8e:	bd80      	pop	{r7, pc}
     d90:	40001c00 	.word	0x40001c00
     d94:	00000401 	.word	0x00000401
     d98:	40000800 	.word	0x40000800
     d9c:	00000587 	.word	0x00000587
     da0:	00001a01 	.word	0x00001a01

00000da4 <QSPI_N25Q256_PORT_init>:

void QSPI_N25Q256_PORT_init(void)
{
     da4:	b580      	push	{r7, lr}
     da6:	af00      	add	r7, sp, #0

	// Set pin direction to input
	gpio_set_pin_direction(FLASH_CS, GPIO_DIRECTION_IN);
     da8:	2101      	movs	r1, #1
     daa:	202b      	movs	r0, #43	; 0x2b
     dac:	4b2b      	ldr	r3, [pc, #172]	; (e5c <QSPI_N25Q256_PORT_init+0xb8>)
     dae:	4798      	blx	r3

	gpio_set_pin_pull_mode(FLASH_CS,
     db0:	2100      	movs	r1, #0
     db2:	202b      	movs	r0, #43	; 0x2b
     db4:	4b2a      	ldr	r3, [pc, #168]	; (e60 <QSPI_N25Q256_PORT_init+0xbc>)
     db6:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_CS, PINMUX_PB11H_QSPI_CS);
     db8:	492a      	ldr	r1, [pc, #168]	; (e64 <QSPI_N25Q256_PORT_init+0xc0>)
     dba:	202b      	movs	r0, #43	; 0x2b
     dbc:	4b2a      	ldr	r3, [pc, #168]	; (e68 <QSPI_N25Q256_PORT_init+0xc4>)
     dbe:	4798      	blx	r3

	gpio_set_pin_direction(FLASH_IO0,
     dc0:	2102      	movs	r1, #2
     dc2:	2008      	movs	r0, #8
     dc4:	4b25      	ldr	r3, [pc, #148]	; (e5c <QSPI_N25Q256_PORT_init+0xb8>)
     dc6:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(FLASH_IO0,
     dc8:	2100      	movs	r1, #0
     dca:	2008      	movs	r0, #8
     dcc:	4b27      	ldr	r3, [pc, #156]	; (e6c <QSPI_N25Q256_PORT_init+0xc8>)
     dce:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(FLASH_IO0,
     dd0:	2100      	movs	r1, #0
     dd2:	2008      	movs	r0, #8
     dd4:	4b22      	ldr	r3, [pc, #136]	; (e60 <QSPI_N25Q256_PORT_init+0xbc>)
     dd6:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_IO0,
     dd8:	4925      	ldr	r1, [pc, #148]	; (e70 <QSPI_N25Q256_PORT_init+0xcc>)
     dda:	2008      	movs	r0, #8
     ddc:	4b22      	ldr	r3, [pc, #136]	; (e68 <QSPI_N25Q256_PORT_init+0xc4>)
     dde:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA08H_QSPI_DATA0);

	gpio_set_pin_direction(FLASH_IO1,
     de0:	2102      	movs	r1, #2
     de2:	2009      	movs	r0, #9
     de4:	4b1d      	ldr	r3, [pc, #116]	; (e5c <QSPI_N25Q256_PORT_init+0xb8>)
     de6:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(FLASH_IO1,
     de8:	2100      	movs	r1, #0
     dea:	2009      	movs	r0, #9
     dec:	4b1f      	ldr	r3, [pc, #124]	; (e6c <QSPI_N25Q256_PORT_init+0xc8>)
     dee:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(FLASH_IO1,
     df0:	2100      	movs	r1, #0
     df2:	2009      	movs	r0, #9
     df4:	4b1a      	ldr	r3, [pc, #104]	; (e60 <QSPI_N25Q256_PORT_init+0xbc>)
     df6:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_IO1,
     df8:	491e      	ldr	r1, [pc, #120]	; (e74 <QSPI_N25Q256_PORT_init+0xd0>)
     dfa:	2009      	movs	r0, #9
     dfc:	4b1a      	ldr	r3, [pc, #104]	; (e68 <QSPI_N25Q256_PORT_init+0xc4>)
     dfe:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA09H_QSPI_DATA1);

	gpio_set_pin_direction(FLASH_IO2,
     e00:	2102      	movs	r1, #2
     e02:	200a      	movs	r0, #10
     e04:	4b15      	ldr	r3, [pc, #84]	; (e5c <QSPI_N25Q256_PORT_init+0xb8>)
     e06:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(FLASH_IO2,
     e08:	2100      	movs	r1, #0
     e0a:	200a      	movs	r0, #10
     e0c:	4b17      	ldr	r3, [pc, #92]	; (e6c <QSPI_N25Q256_PORT_init+0xc8>)
     e0e:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(FLASH_IO2,
     e10:	2100      	movs	r1, #0
     e12:	200a      	movs	r0, #10
     e14:	4b12      	ldr	r3, [pc, #72]	; (e60 <QSPI_N25Q256_PORT_init+0xbc>)
     e16:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_IO2,
     e18:	4917      	ldr	r1, [pc, #92]	; (e78 <QSPI_N25Q256_PORT_init+0xd4>)
     e1a:	200a      	movs	r0, #10
     e1c:	4b12      	ldr	r3, [pc, #72]	; (e68 <QSPI_N25Q256_PORT_init+0xc4>)
     e1e:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA10H_QSPI_DATA2);

	gpio_set_pin_direction(FLASH_IO3,
     e20:	2102      	movs	r1, #2
     e22:	200b      	movs	r0, #11
     e24:	4b0d      	ldr	r3, [pc, #52]	; (e5c <QSPI_N25Q256_PORT_init+0xb8>)
     e26:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(FLASH_IO3,
     e28:	2100      	movs	r1, #0
     e2a:	200b      	movs	r0, #11
     e2c:	4b0f      	ldr	r3, [pc, #60]	; (e6c <QSPI_N25Q256_PORT_init+0xc8>)
     e2e:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(FLASH_IO3,
     e30:	2100      	movs	r1, #0
     e32:	200b      	movs	r0, #11
     e34:	4b0a      	ldr	r3, [pc, #40]	; (e60 <QSPI_N25Q256_PORT_init+0xbc>)
     e36:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_IO3,
     e38:	4910      	ldr	r1, [pc, #64]	; (e7c <QSPI_N25Q256_PORT_init+0xd8>)
     e3a:	200b      	movs	r0, #11
     e3c:	4b0a      	ldr	r3, [pc, #40]	; (e68 <QSPI_N25Q256_PORT_init+0xc4>)
     e3e:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA11H_QSPI_DATA3);

	// Set pin direction to input
	gpio_set_pin_direction(FLASH_CLK, GPIO_DIRECTION_IN);
     e40:	2101      	movs	r1, #1
     e42:	202a      	movs	r0, #42	; 0x2a
     e44:	4b05      	ldr	r3, [pc, #20]	; (e5c <QSPI_N25Q256_PORT_init+0xb8>)
     e46:	4798      	blx	r3

	gpio_set_pin_pull_mode(FLASH_CLK,
     e48:	2100      	movs	r1, #0
     e4a:	202a      	movs	r0, #42	; 0x2a
     e4c:	4b04      	ldr	r3, [pc, #16]	; (e60 <QSPI_N25Q256_PORT_init+0xbc>)
     e4e:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_CLK, PINMUX_PB10H_QSPI_SCK);
     e50:	490b      	ldr	r1, [pc, #44]	; (e80 <QSPI_N25Q256_PORT_init+0xdc>)
     e52:	202a      	movs	r0, #42	; 0x2a
     e54:	4b04      	ldr	r3, [pc, #16]	; (e68 <QSPI_N25Q256_PORT_init+0xc4>)
     e56:	4798      	blx	r3
}
     e58:	bf00      	nop
     e5a:	bd80      	pop	{r7, pc}
     e5c:	00000bd5 	.word	0x00000bd5
     e60:	00000b81 	.word	0x00000b81
     e64:	002b0007 	.word	0x002b0007
     e68:	00000bb5 	.word	0x00000bb5
     e6c:	00000c0d 	.word	0x00000c0d
     e70:	00080007 	.word	0x00080007
     e74:	00090007 	.word	0x00090007
     e78:	000a0007 	.word	0x000a0007
     e7c:	000b0007 	.word	0x000b0007
     e80:	002a0007 	.word	0x002a0007

00000e84 <QSPI_N25Q256_CLOCK_init>:

void QSPI_N25Q256_CLOCK_init(void)
{
     e84:	b580      	push	{r7, lr}
     e86:	af00      	add	r7, sp, #0
	hri_mclk_set_AHBMASK_QSPI_bit(MCLK);
     e88:	4805      	ldr	r0, [pc, #20]	; (ea0 <QSPI_N25Q256_CLOCK_init+0x1c>)
     e8a:	4b06      	ldr	r3, [pc, #24]	; (ea4 <QSPI_N25Q256_CLOCK_init+0x20>)
     e8c:	4798      	blx	r3
	hri_mclk_set_AHBMASK_QSPI_2X_bit(MCLK);
     e8e:	4804      	ldr	r0, [pc, #16]	; (ea0 <QSPI_N25Q256_CLOCK_init+0x1c>)
     e90:	4b05      	ldr	r3, [pc, #20]	; (ea8 <QSPI_N25Q256_CLOCK_init+0x24>)
     e92:	4798      	blx	r3
	hri_mclk_set_APBCMASK_QSPI_bit(MCLK);
     e94:	4802      	ldr	r0, [pc, #8]	; (ea0 <QSPI_N25Q256_CLOCK_init+0x1c>)
     e96:	4b05      	ldr	r3, [pc, #20]	; (eac <QSPI_N25Q256_CLOCK_init+0x28>)
     e98:	4798      	blx	r3
}
     e9a:	bf00      	nop
     e9c:	bd80      	pop	{r7, pc}
     e9e:	bf00      	nop
     ea0:	40000800 	.word	0x40000800
     ea4:	00000447 	.word	0x00000447
     ea8:	00000487 	.word	0x00000487
     eac:	000005e7 	.word	0x000005e7

00000eb0 <QSPI_N25Q256_init>:

void QSPI_N25Q256_init(void)
{
     eb0:	b580      	push	{r7, lr}
     eb2:	af00      	add	r7, sp, #0
	QSPI_N25Q256_CLOCK_init();
     eb4:	4b04      	ldr	r3, [pc, #16]	; (ec8 <QSPI_N25Q256_init+0x18>)
     eb6:	4798      	blx	r3
	qspi_sync_init(&QSPI_N25Q256, QSPI);
     eb8:	4904      	ldr	r1, [pc, #16]	; (ecc <QSPI_N25Q256_init+0x1c>)
     eba:	4805      	ldr	r0, [pc, #20]	; (ed0 <QSPI_N25Q256_init+0x20>)
     ebc:	4b05      	ldr	r3, [pc, #20]	; (ed4 <QSPI_N25Q256_init+0x24>)
     ebe:	4798      	blx	r3
	QSPI_N25Q256_PORT_init();
     ec0:	4b05      	ldr	r3, [pc, #20]	; (ed8 <QSPI_N25Q256_init+0x28>)
     ec2:	4798      	blx	r3
}
     ec4:	bf00      	nop
     ec6:	bd80      	pop	{r7, pc}
     ec8:	00000e85 	.word	0x00000e85
     ecc:	42003400 	.word	0x42003400
     ed0:	20001a18 	.word	0x20001a18
     ed4:	00001d61 	.word	0x00001d61
     ed8:	00000da5 	.word	0x00000da5

00000edc <DATETIME_CLOCK_CLOCK_init>:

void DATETIME_CLOCK_CLOCK_init(void)
{
     edc:	b580      	push	{r7, lr}
     ede:	af00      	add	r7, sp, #0
	hri_mclk_set_APBAMASK_RTC_bit(MCLK);
     ee0:	4802      	ldr	r0, [pc, #8]	; (eec <DATETIME_CLOCK_CLOCK_init+0x10>)
     ee2:	4b03      	ldr	r3, [pc, #12]	; (ef0 <DATETIME_CLOCK_CLOCK_init+0x14>)
     ee4:	4798      	blx	r3
}
     ee6:	bf00      	nop
     ee8:	bd80      	pop	{r7, pc}
     eea:	bf00      	nop
     eec:	40000800 	.word	0x40000800
     ef0:	000004c7 	.word	0x000004c7

00000ef4 <DATETIME_CLOCK_init>:

void DATETIME_CLOCK_init(void)
{
     ef4:	b580      	push	{r7, lr}
     ef6:	af00      	add	r7, sp, #0
	DATETIME_CLOCK_CLOCK_init();
     ef8:	4b03      	ldr	r3, [pc, #12]	; (f08 <DATETIME_CLOCK_init+0x14>)
     efa:	4798      	blx	r3
	calendar_init(&DATETIME_CLOCK, RTC);
     efc:	4903      	ldr	r1, [pc, #12]	; (f0c <DATETIME_CLOCK_init+0x18>)
     efe:	4804      	ldr	r0, [pc, #16]	; (f10 <DATETIME_CLOCK_init+0x1c>)
     f00:	4b04      	ldr	r3, [pc, #16]	; (f14 <DATETIME_CLOCK_init+0x20>)
     f02:	4798      	blx	r3
}
     f04:	bf00      	nop
     f06:	bd80      	pop	{r7, pc}
     f08:	00000edd 	.word	0x00000edd
     f0c:	40002400 	.word	0x40002400
     f10:	20001b50 	.word	0x20001b50
     f14:	00001655 	.word	0x00001655

00000f18 <SPI_TEMP_PORT_init>:

void SPI_TEMP_PORT_init(void)
{
     f18:	b580      	push	{r7, lr}
     f1a:	af00      	add	r7, sp, #0

	gpio_set_pin_level(PB27,
     f1c:	2100      	movs	r1, #0
     f1e:	203b      	movs	r0, #59	; 0x3b
     f20:	4b11      	ldr	r3, [pc, #68]	; (f68 <SPI_TEMP_PORT_init+0x50>)
     f22:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PB27, GPIO_DIRECTION_OUT);
     f24:	2102      	movs	r1, #2
     f26:	203b      	movs	r0, #59	; 0x3b
     f28:	4b10      	ldr	r3, [pc, #64]	; (f6c <SPI_TEMP_PORT_init+0x54>)
     f2a:	4798      	blx	r3

	gpio_set_pin_function(PB27, PINMUX_PB27D_SERCOM4_PAD0);
     f2c:	4910      	ldr	r1, [pc, #64]	; (f70 <SPI_TEMP_PORT_init+0x58>)
     f2e:	203b      	movs	r0, #59	; 0x3b
     f30:	4b10      	ldr	r3, [pc, #64]	; (f74 <SPI_TEMP_PORT_init+0x5c>)
     f32:	4798      	blx	r3

	gpio_set_pin_level(PB26,
     f34:	2100      	movs	r1, #0
     f36:	203a      	movs	r0, #58	; 0x3a
     f38:	4b0b      	ldr	r3, [pc, #44]	; (f68 <SPI_TEMP_PORT_init+0x50>)
     f3a:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PB26, GPIO_DIRECTION_OUT);
     f3c:	2102      	movs	r1, #2
     f3e:	203a      	movs	r0, #58	; 0x3a
     f40:	4b0a      	ldr	r3, [pc, #40]	; (f6c <SPI_TEMP_PORT_init+0x54>)
     f42:	4798      	blx	r3

	gpio_set_pin_function(PB26, PINMUX_PB26D_SERCOM4_PAD1);
     f44:	490c      	ldr	r1, [pc, #48]	; (f78 <SPI_TEMP_PORT_init+0x60>)
     f46:	203a      	movs	r0, #58	; 0x3a
     f48:	4b0a      	ldr	r3, [pc, #40]	; (f74 <SPI_TEMP_PORT_init+0x5c>)
     f4a:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PB28, GPIO_DIRECTION_IN);
     f4c:	2101      	movs	r1, #1
     f4e:	203c      	movs	r0, #60	; 0x3c
     f50:	4b06      	ldr	r3, [pc, #24]	; (f6c <SPI_TEMP_PORT_init+0x54>)
     f52:	4798      	blx	r3

	gpio_set_pin_pull_mode(PB28,
     f54:	2100      	movs	r1, #0
     f56:	203c      	movs	r0, #60	; 0x3c
     f58:	4b08      	ldr	r3, [pc, #32]	; (f7c <SPI_TEMP_PORT_init+0x64>)
     f5a:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PB28, PINMUX_PB28D_SERCOM4_PAD2);
     f5c:	4908      	ldr	r1, [pc, #32]	; (f80 <SPI_TEMP_PORT_init+0x68>)
     f5e:	203c      	movs	r0, #60	; 0x3c
     f60:	4b04      	ldr	r3, [pc, #16]	; (f74 <SPI_TEMP_PORT_init+0x5c>)
     f62:	4798      	blx	r3
}
     f64:	bf00      	nop
     f66:	bd80      	pop	{r7, pc}
     f68:	00000c0d 	.word	0x00000c0d
     f6c:	00000bd5 	.word	0x00000bd5
     f70:	003b0003 	.word	0x003b0003
     f74:	00000bb5 	.word	0x00000bb5
     f78:	003a0003 	.word	0x003a0003
     f7c:	00000b81 	.word	0x00000b81
     f80:	003c0003 	.word	0x003c0003

00000f84 <SPI_TEMP_CLOCK_init>:

void SPI_TEMP_CLOCK_init(void)
{
     f84:	b580      	push	{r7, lr}
     f86:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM4_GCLK_ID_CORE, CONF_GCLK_SERCOM4_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
     f88:	2243      	movs	r2, #67	; 0x43
     f8a:	2122      	movs	r1, #34	; 0x22
     f8c:	4806      	ldr	r0, [pc, #24]	; (fa8 <SPI_TEMP_CLOCK_init+0x24>)
     f8e:	4b07      	ldr	r3, [pc, #28]	; (fac <SPI_TEMP_CLOCK_init+0x28>)
     f90:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM4_GCLK_ID_SLOW, CONF_GCLK_SERCOM4_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
     f92:	224a      	movs	r2, #74	; 0x4a
     f94:	2103      	movs	r1, #3
     f96:	4804      	ldr	r0, [pc, #16]	; (fa8 <SPI_TEMP_CLOCK_init+0x24>)
     f98:	4b04      	ldr	r3, [pc, #16]	; (fac <SPI_TEMP_CLOCK_init+0x28>)
     f9a:	4798      	blx	r3

	hri_mclk_set_APBDMASK_SERCOM4_bit(MCLK);
     f9c:	4804      	ldr	r0, [pc, #16]	; (fb0 <SPI_TEMP_CLOCK_init+0x2c>)
     f9e:	4b05      	ldr	r3, [pc, #20]	; (fb4 <SPI_TEMP_CLOCK_init+0x30>)
     fa0:	4798      	blx	r3
}
     fa2:	bf00      	nop
     fa4:	bd80      	pop	{r7, pc}
     fa6:	bf00      	nop
     fa8:	40001c00 	.word	0x40001c00
     fac:	00000401 	.word	0x00000401
     fb0:	40000800 	.word	0x40000800
     fb4:	00000607 	.word	0x00000607

00000fb8 <SPI_TEMP_init>:

void SPI_TEMP_init(void)
{
     fb8:	b580      	push	{r7, lr}
     fba:	af00      	add	r7, sp, #0
	SPI_TEMP_CLOCK_init();
     fbc:	4b05      	ldr	r3, [pc, #20]	; (fd4 <SPI_TEMP_init+0x1c>)
     fbe:	4798      	blx	r3
	spi_m_async_init(&SPI_TEMP, SERCOM4);
     fc0:	f04f 4186 	mov.w	r1, #1124073472	; 0x43000000
     fc4:	4804      	ldr	r0, [pc, #16]	; (fd8 <SPI_TEMP_init+0x20>)
     fc6:	4b05      	ldr	r3, [pc, #20]	; (fdc <SPI_TEMP_init+0x24>)
     fc8:	4798      	blx	r3
	SPI_TEMP_PORT_init();
     fca:	4b05      	ldr	r3, [pc, #20]	; (fe0 <SPI_TEMP_init+0x28>)
     fcc:	4798      	blx	r3
}
     fce:	bf00      	nop
     fd0:	bd80      	pop	{r7, pc}
     fd2:	bf00      	nop
     fd4:	00000f85 	.word	0x00000f85
     fd8:	200019d0 	.word	0x200019d0
     fdc:	00002089 	.word	0x00002089
     fe0:	00000f19 	.word	0x00000f19

00000fe4 <I2C_EXPANDER_PORT_init>:

void I2C_EXPANDER_PORT_init(void)
{
     fe4:	b580      	push	{r7, lr}
     fe6:	af00      	add	r7, sp, #0

	gpio_set_pin_pull_mode(PA23,
     fe8:	2100      	movs	r1, #0
     fea:	2017      	movs	r0, #23
     fec:	4b07      	ldr	r3, [pc, #28]	; (100c <I2C_EXPANDER_PORT_init+0x28>)
     fee:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA23, PINMUX_PA23D_SERCOM5_PAD0);
     ff0:	4907      	ldr	r1, [pc, #28]	; (1010 <I2C_EXPANDER_PORT_init+0x2c>)
     ff2:	2017      	movs	r0, #23
     ff4:	4b07      	ldr	r3, [pc, #28]	; (1014 <I2C_EXPANDER_PORT_init+0x30>)
     ff6:	4798      	blx	r3

	gpio_set_pin_pull_mode(PA22,
     ff8:	2100      	movs	r1, #0
     ffa:	2016      	movs	r0, #22
     ffc:	4b03      	ldr	r3, [pc, #12]	; (100c <I2C_EXPANDER_PORT_init+0x28>)
     ffe:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA22, PINMUX_PA22D_SERCOM5_PAD1);
    1000:	4905      	ldr	r1, [pc, #20]	; (1018 <I2C_EXPANDER_PORT_init+0x34>)
    1002:	2016      	movs	r0, #22
    1004:	4b03      	ldr	r3, [pc, #12]	; (1014 <I2C_EXPANDER_PORT_init+0x30>)
    1006:	4798      	blx	r3
}
    1008:	bf00      	nop
    100a:	bd80      	pop	{r7, pc}
    100c:	00000b81 	.word	0x00000b81
    1010:	00170003 	.word	0x00170003
    1014:	00000bb5 	.word	0x00000bb5
    1018:	00160003 	.word	0x00160003

0000101c <I2C_EXPANDER_CLOCK_init>:

void I2C_EXPANDER_CLOCK_init(void)
{
    101c:	b580      	push	{r7, lr}
    101e:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM5_GCLK_ID_CORE, CONF_GCLK_SERCOM5_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1020:	2243      	movs	r2, #67	; 0x43
    1022:	2123      	movs	r1, #35	; 0x23
    1024:	4806      	ldr	r0, [pc, #24]	; (1040 <I2C_EXPANDER_CLOCK_init+0x24>)
    1026:	4b07      	ldr	r3, [pc, #28]	; (1044 <I2C_EXPANDER_CLOCK_init+0x28>)
    1028:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM5_GCLK_ID_SLOW, CONF_GCLK_SERCOM5_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    102a:	224a      	movs	r2, #74	; 0x4a
    102c:	2103      	movs	r1, #3
    102e:	4804      	ldr	r0, [pc, #16]	; (1040 <I2C_EXPANDER_CLOCK_init+0x24>)
    1030:	4b04      	ldr	r3, [pc, #16]	; (1044 <I2C_EXPANDER_CLOCK_init+0x28>)
    1032:	4798      	blx	r3

	hri_mclk_set_APBDMASK_SERCOM5_bit(MCLK);
    1034:	4804      	ldr	r0, [pc, #16]	; (1048 <I2C_EXPANDER_CLOCK_init+0x2c>)
    1036:	4b05      	ldr	r3, [pc, #20]	; (104c <I2C_EXPANDER_CLOCK_init+0x30>)
    1038:	4798      	blx	r3
}
    103a:	bf00      	nop
    103c:	bd80      	pop	{r7, pc}
    103e:	bf00      	nop
    1040:	40001c00 	.word	0x40001c00
    1044:	00000401 	.word	0x00000401
    1048:	40000800 	.word	0x40000800
    104c:	00000627 	.word	0x00000627

00001050 <I2C_EXPANDER_init>:

void I2C_EXPANDER_init(void)
{
    1050:	b580      	push	{r7, lr}
    1052:	af00      	add	r7, sp, #0
	I2C_EXPANDER_CLOCK_init();
    1054:	4b04      	ldr	r3, [pc, #16]	; (1068 <I2C_EXPANDER_init+0x18>)
    1056:	4798      	blx	r3
	i2c_m_async_init(&I2C_EXPANDER, SERCOM5);
    1058:	4904      	ldr	r1, [pc, #16]	; (106c <I2C_EXPANDER_init+0x1c>)
    105a:	4805      	ldr	r0, [pc, #20]	; (1070 <I2C_EXPANDER_init+0x20>)
    105c:	4b05      	ldr	r3, [pc, #20]	; (1074 <I2C_EXPANDER_init+0x24>)
    105e:	4798      	blx	r3
	I2C_EXPANDER_PORT_init();
    1060:	4b05      	ldr	r3, [pc, #20]	; (1078 <I2C_EXPANDER_init+0x28>)
    1062:	4798      	blx	r3
}
    1064:	bf00      	nop
    1066:	bd80      	pop	{r7, pc}
    1068:	0000101d 	.word	0x0000101d
    106c:	43000400 	.word	0x43000400
    1070:	20001ab4 	.word	0x20001ab4
    1074:	00001c21 	.word	0x00001c21
    1078:	00000fe5 	.word	0x00000fe5

0000107c <SPI_HI3593_PORT_init>:

void SPI_HI3593_PORT_init(void)
{
    107c:	b580      	push	{r7, lr}
    107e:	af00      	add	r7, sp, #0

	gpio_set_pin_level(PC04,
    1080:	2100      	movs	r1, #0
    1082:	2044      	movs	r0, #68	; 0x44
    1084:	4b11      	ldr	r3, [pc, #68]	; (10cc <SPI_HI3593_PORT_init+0x50>)
    1086:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PC04, GPIO_DIRECTION_OUT);
    1088:	2102      	movs	r1, #2
    108a:	2044      	movs	r0, #68	; 0x44
    108c:	4b10      	ldr	r3, [pc, #64]	; (10d0 <SPI_HI3593_PORT_init+0x54>)
    108e:	4798      	blx	r3

	gpio_set_pin_function(PC04, PINMUX_PC04C_SERCOM6_PAD0);
    1090:	4910      	ldr	r1, [pc, #64]	; (10d4 <SPI_HI3593_PORT_init+0x58>)
    1092:	2044      	movs	r0, #68	; 0x44
    1094:	4b10      	ldr	r3, [pc, #64]	; (10d8 <SPI_HI3593_PORT_init+0x5c>)
    1096:	4798      	blx	r3

	gpio_set_pin_level(PC05,
    1098:	2100      	movs	r1, #0
    109a:	2045      	movs	r0, #69	; 0x45
    109c:	4b0b      	ldr	r3, [pc, #44]	; (10cc <SPI_HI3593_PORT_init+0x50>)
    109e:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PC05, GPIO_DIRECTION_OUT);
    10a0:	2102      	movs	r1, #2
    10a2:	2045      	movs	r0, #69	; 0x45
    10a4:	4b0a      	ldr	r3, [pc, #40]	; (10d0 <SPI_HI3593_PORT_init+0x54>)
    10a6:	4798      	blx	r3

	gpio_set_pin_function(PC05, PINMUX_PC05C_SERCOM6_PAD1);
    10a8:	490c      	ldr	r1, [pc, #48]	; (10dc <SPI_HI3593_PORT_init+0x60>)
    10aa:	2045      	movs	r0, #69	; 0x45
    10ac:	4b0a      	ldr	r3, [pc, #40]	; (10d8 <SPI_HI3593_PORT_init+0x5c>)
    10ae:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PC07, GPIO_DIRECTION_IN);
    10b0:	2101      	movs	r1, #1
    10b2:	2047      	movs	r0, #71	; 0x47
    10b4:	4b06      	ldr	r3, [pc, #24]	; (10d0 <SPI_HI3593_PORT_init+0x54>)
    10b6:	4798      	blx	r3

	gpio_set_pin_pull_mode(PC07,
    10b8:	2100      	movs	r1, #0
    10ba:	2047      	movs	r0, #71	; 0x47
    10bc:	4b08      	ldr	r3, [pc, #32]	; (10e0 <SPI_HI3593_PORT_init+0x64>)
    10be:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PC07, PINMUX_PC07C_SERCOM6_PAD3);
    10c0:	4908      	ldr	r1, [pc, #32]	; (10e4 <SPI_HI3593_PORT_init+0x68>)
    10c2:	2047      	movs	r0, #71	; 0x47
    10c4:	4b04      	ldr	r3, [pc, #16]	; (10d8 <SPI_HI3593_PORT_init+0x5c>)
    10c6:	4798      	blx	r3
}
    10c8:	bf00      	nop
    10ca:	bd80      	pop	{r7, pc}
    10cc:	00000c0d 	.word	0x00000c0d
    10d0:	00000bd5 	.word	0x00000bd5
    10d4:	00440002 	.word	0x00440002
    10d8:	00000bb5 	.word	0x00000bb5
    10dc:	00450002 	.word	0x00450002
    10e0:	00000b81 	.word	0x00000b81
    10e4:	00470002 	.word	0x00470002

000010e8 <SPI_HI3593_CLOCK_init>:

void SPI_HI3593_CLOCK_init(void)
{
    10e8:	b580      	push	{r7, lr}
    10ea:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM6_GCLK_ID_CORE, CONF_GCLK_SERCOM6_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    10ec:	2243      	movs	r2, #67	; 0x43
    10ee:	2124      	movs	r1, #36	; 0x24
    10f0:	4806      	ldr	r0, [pc, #24]	; (110c <SPI_HI3593_CLOCK_init+0x24>)
    10f2:	4b07      	ldr	r3, [pc, #28]	; (1110 <SPI_HI3593_CLOCK_init+0x28>)
    10f4:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM6_GCLK_ID_SLOW, CONF_GCLK_SERCOM6_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    10f6:	224a      	movs	r2, #74	; 0x4a
    10f8:	2103      	movs	r1, #3
    10fa:	4804      	ldr	r0, [pc, #16]	; (110c <SPI_HI3593_CLOCK_init+0x24>)
    10fc:	4b04      	ldr	r3, [pc, #16]	; (1110 <SPI_HI3593_CLOCK_init+0x28>)
    10fe:	4798      	blx	r3

	hri_mclk_set_APBDMASK_SERCOM6_bit(MCLK);
    1100:	4804      	ldr	r0, [pc, #16]	; (1114 <SPI_HI3593_CLOCK_init+0x2c>)
    1102:	4b05      	ldr	r3, [pc, #20]	; (1118 <SPI_HI3593_CLOCK_init+0x30>)
    1104:	4798      	blx	r3
}
    1106:	bf00      	nop
    1108:	bd80      	pop	{r7, pc}
    110a:	bf00      	nop
    110c:	40001c00 	.word	0x40001c00
    1110:	00000401 	.word	0x00000401
    1114:	40000800 	.word	0x40000800
    1118:	00000647 	.word	0x00000647

0000111c <SPI_HI3593_init>:

void SPI_HI3593_init(void)
{
    111c:	b580      	push	{r7, lr}
    111e:	af00      	add	r7, sp, #0
	SPI_HI3593_CLOCK_init();
    1120:	4b04      	ldr	r3, [pc, #16]	; (1134 <SPI_HI3593_init+0x18>)
    1122:	4798      	blx	r3
	spi_m_sync_init(&SPI_HI3593, SERCOM6);
    1124:	4904      	ldr	r1, [pc, #16]	; (1138 <SPI_HI3593_init+0x1c>)
    1126:	4805      	ldr	r0, [pc, #20]	; (113c <SPI_HI3593_init+0x20>)
    1128:	4b05      	ldr	r3, [pc, #20]	; (1140 <SPI_HI3593_init+0x24>)
    112a:	4798      	blx	r3
	SPI_HI3593_PORT_init();
    112c:	4b05      	ldr	r3, [pc, #20]	; (1144 <SPI_HI3593_init+0x28>)
    112e:	4798      	blx	r3
}
    1130:	bf00      	nop
    1132:	bd80      	pop	{r7, pc}
    1134:	000010e9 	.word	0x000010e9
    1138:	43000800 	.word	0x43000800
    113c:	200019b8 	.word	0x200019b8
    1140:	0000223d 	.word	0x0000223d
    1144:	0000107d 	.word	0x0000107d

00001148 <I2C_EEPROM_PORT_init>:

void I2C_EEPROM_PORT_init(void)
{
    1148:	b580      	push	{r7, lr}
    114a:	af00      	add	r7, sp, #0

	gpio_set_pin_pull_mode(PD08,
    114c:	2100      	movs	r1, #0
    114e:	2068      	movs	r0, #104	; 0x68
    1150:	4b07      	ldr	r3, [pc, #28]	; (1170 <I2C_EEPROM_PORT_init+0x28>)
    1152:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PD08, PINMUX_PD08C_SERCOM7_PAD0);
    1154:	4907      	ldr	r1, [pc, #28]	; (1174 <I2C_EEPROM_PORT_init+0x2c>)
    1156:	2068      	movs	r0, #104	; 0x68
    1158:	4b07      	ldr	r3, [pc, #28]	; (1178 <I2C_EEPROM_PORT_init+0x30>)
    115a:	4798      	blx	r3

	gpio_set_pin_pull_mode(PD09,
    115c:	2100      	movs	r1, #0
    115e:	2069      	movs	r0, #105	; 0x69
    1160:	4b03      	ldr	r3, [pc, #12]	; (1170 <I2C_EEPROM_PORT_init+0x28>)
    1162:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PD09, PINMUX_PD09C_SERCOM7_PAD1);
    1164:	4905      	ldr	r1, [pc, #20]	; (117c <I2C_EEPROM_PORT_init+0x34>)
    1166:	2069      	movs	r0, #105	; 0x69
    1168:	4b03      	ldr	r3, [pc, #12]	; (1178 <I2C_EEPROM_PORT_init+0x30>)
    116a:	4798      	blx	r3
}
    116c:	bf00      	nop
    116e:	bd80      	pop	{r7, pc}
    1170:	00000b81 	.word	0x00000b81
    1174:	00680002 	.word	0x00680002
    1178:	00000bb5 	.word	0x00000bb5
    117c:	00690002 	.word	0x00690002

00001180 <I2C_EEPROM_CLOCK_init>:

void I2C_EEPROM_CLOCK_init(void)
{
    1180:	b580      	push	{r7, lr}
    1182:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM7_GCLK_ID_CORE, CONF_GCLK_SERCOM7_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1184:	2242      	movs	r2, #66	; 0x42
    1186:	2125      	movs	r1, #37	; 0x25
    1188:	4806      	ldr	r0, [pc, #24]	; (11a4 <I2C_EEPROM_CLOCK_init+0x24>)
    118a:	4b07      	ldr	r3, [pc, #28]	; (11a8 <I2C_EEPROM_CLOCK_init+0x28>)
    118c:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM7_GCLK_ID_SLOW, CONF_GCLK_SERCOM7_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    118e:	224a      	movs	r2, #74	; 0x4a
    1190:	2103      	movs	r1, #3
    1192:	4804      	ldr	r0, [pc, #16]	; (11a4 <I2C_EEPROM_CLOCK_init+0x24>)
    1194:	4b04      	ldr	r3, [pc, #16]	; (11a8 <I2C_EEPROM_CLOCK_init+0x28>)
    1196:	4798      	blx	r3

	hri_mclk_set_APBDMASK_SERCOM7_bit(MCLK);
    1198:	4804      	ldr	r0, [pc, #16]	; (11ac <I2C_EEPROM_CLOCK_init+0x2c>)
    119a:	4b05      	ldr	r3, [pc, #20]	; (11b0 <I2C_EEPROM_CLOCK_init+0x30>)
    119c:	4798      	blx	r3
}
    119e:	bf00      	nop
    11a0:	bd80      	pop	{r7, pc}
    11a2:	bf00      	nop
    11a4:	40001c00 	.word	0x40001c00
    11a8:	00000401 	.word	0x00000401
    11ac:	40000800 	.word	0x40000800
    11b0:	00000667 	.word	0x00000667

000011b4 <I2C_EEPROM_init>:

void I2C_EEPROM_init(void)
{
    11b4:	b580      	push	{r7, lr}
    11b6:	af00      	add	r7, sp, #0
	I2C_EEPROM_CLOCK_init();
    11b8:	4b04      	ldr	r3, [pc, #16]	; (11cc <I2C_EEPROM_init+0x18>)
    11ba:	4798      	blx	r3
	i2c_m_async_init(&I2C_EEPROM, SERCOM7);
    11bc:	4904      	ldr	r1, [pc, #16]	; (11d0 <I2C_EEPROM_init+0x1c>)
    11be:	4805      	ldr	r0, [pc, #20]	; (11d4 <I2C_EEPROM_init+0x20>)
    11c0:	4b05      	ldr	r3, [pc, #20]	; (11d8 <I2C_EEPROM_init+0x24>)
    11c2:	4798      	blx	r3
	I2C_EEPROM_PORT_init();
    11c4:	4b05      	ldr	r3, [pc, #20]	; (11dc <I2C_EEPROM_init+0x28>)
    11c6:	4798      	blx	r3
}
    11c8:	bf00      	nop
    11ca:	bd80      	pop	{r7, pc}
    11cc:	00001181 	.word	0x00001181
    11d0:	43000c00 	.word	0x43000c00
    11d4:	20001b10 	.word	0x20001b10
    11d8:	00001c21 	.word	0x00001c21
    11dc:	00001149 	.word	0x00001149

000011e0 <TIMER_INTERFACE_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_INTERFACE_init(void)
{
    11e0:	b580      	push	{r7, lr}
    11e2:	af00      	add	r7, sp, #0
	hri_mclk_set_APBAMASK_TC0_bit(MCLK);
    11e4:	4808      	ldr	r0, [pc, #32]	; (1208 <TIMER_INTERFACE_init+0x28>)
    11e6:	4b09      	ldr	r3, [pc, #36]	; (120c <TIMER_INTERFACE_init+0x2c>)
    11e8:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC0_GCLK_ID, CONF_GCLK_TC0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    11ea:	2243      	movs	r2, #67	; 0x43
    11ec:	2109      	movs	r1, #9
    11ee:	4808      	ldr	r0, [pc, #32]	; (1210 <TIMER_INTERFACE_init+0x30>)
    11f0:	4b08      	ldr	r3, [pc, #32]	; (1214 <TIMER_INTERFACE_init+0x34>)
    11f2:	4798      	blx	r3

	timer_init(&TIMER_INTERFACE, TC0, _tc_get_timer());
    11f4:	4b08      	ldr	r3, [pc, #32]	; (1218 <TIMER_INTERFACE_init+0x38>)
    11f6:	4798      	blx	r3
    11f8:	4603      	mov	r3, r0
    11fa:	461a      	mov	r2, r3
    11fc:	4907      	ldr	r1, [pc, #28]	; (121c <TIMER_INTERFACE_init+0x3c>)
    11fe:	4808      	ldr	r0, [pc, #32]	; (1220 <TIMER_INTERFACE_init+0x40>)
    1200:	4b08      	ldr	r3, [pc, #32]	; (1224 <TIMER_INTERFACE_init+0x44>)
    1202:	4798      	blx	r3
}
    1204:	bf00      	nop
    1206:	bd80      	pop	{r7, pc}
    1208:	40000800 	.word	0x40000800
    120c:	00000507 	.word	0x00000507
    1210:	40001c00 	.word	0x40001c00
    1214:	00000401 	.word	0x00000401
    1218:	0000791d 	.word	0x0000791d
    121c:	40003800 	.word	0x40003800
    1220:	20001a38 	.word	0x20001a38
    1224:	0000240d 	.word	0x0000240d

00001228 <TIMER_EVENT_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_EVENT_init(void)
{
    1228:	b580      	push	{r7, lr}
    122a:	af00      	add	r7, sp, #0
	hri_mclk_set_APBAMASK_TC1_bit(MCLK);
    122c:	4808      	ldr	r0, [pc, #32]	; (1250 <TIMER_EVENT_init+0x28>)
    122e:	4b09      	ldr	r3, [pc, #36]	; (1254 <TIMER_EVENT_init+0x2c>)
    1230:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC1_GCLK_ID, CONF_GCLK_TC1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1232:	2245      	movs	r2, #69	; 0x45
    1234:	2109      	movs	r1, #9
    1236:	4808      	ldr	r0, [pc, #32]	; (1258 <TIMER_EVENT_init+0x30>)
    1238:	4b08      	ldr	r3, [pc, #32]	; (125c <TIMER_EVENT_init+0x34>)
    123a:	4798      	blx	r3

	timer_init(&TIMER_EVENT, TC1, _tc_get_timer());
    123c:	4b08      	ldr	r3, [pc, #32]	; (1260 <TIMER_EVENT_init+0x38>)
    123e:	4798      	blx	r3
    1240:	4603      	mov	r3, r0
    1242:	461a      	mov	r2, r3
    1244:	4907      	ldr	r1, [pc, #28]	; (1264 <TIMER_EVENT_init+0x3c>)
    1246:	4808      	ldr	r0, [pc, #32]	; (1268 <TIMER_EVENT_init+0x40>)
    1248:	4b08      	ldr	r3, [pc, #32]	; (126c <TIMER_EVENT_init+0x44>)
    124a:	4798      	blx	r3
}
    124c:	bf00      	nop
    124e:	bd80      	pop	{r7, pc}
    1250:	40000800 	.word	0x40000800
    1254:	00000527 	.word	0x00000527
    1258:	40001c00 	.word	0x40001c00
    125c:	00000401 	.word	0x00000401
    1260:	0000791d 	.word	0x0000791d
    1264:	40003c00 	.word	0x40003c00
    1268:	20001a1c 	.word	0x20001a1c
    126c:	0000240d 	.word	0x0000240d

00001270 <TIMER_ARINC_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_ARINC_init(void)
{
    1270:	b580      	push	{r7, lr}
    1272:	af00      	add	r7, sp, #0
	hri_mclk_set_APBBMASK_TC2_bit(MCLK);
    1274:	4808      	ldr	r0, [pc, #32]	; (1298 <TIMER_ARINC_init+0x28>)
    1276:	4b09      	ldr	r3, [pc, #36]	; (129c <TIMER_ARINC_init+0x2c>)
    1278:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC2_GCLK_ID, CONF_GCLK_TC2_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    127a:	2244      	movs	r2, #68	; 0x44
    127c:	211a      	movs	r1, #26
    127e:	4808      	ldr	r0, [pc, #32]	; (12a0 <TIMER_ARINC_init+0x30>)
    1280:	4b08      	ldr	r3, [pc, #32]	; (12a4 <TIMER_ARINC_init+0x34>)
    1282:	4798      	blx	r3

	timer_init(&TIMER_ARINC, TC2, _tc_get_timer());
    1284:	4b08      	ldr	r3, [pc, #32]	; (12a8 <TIMER_ARINC_init+0x38>)
    1286:	4798      	blx	r3
    1288:	4603      	mov	r3, r0
    128a:	461a      	mov	r2, r3
    128c:	4907      	ldr	r1, [pc, #28]	; (12ac <TIMER_ARINC_init+0x3c>)
    128e:	4808      	ldr	r0, [pc, #32]	; (12b0 <TIMER_ARINC_init+0x40>)
    1290:	4b08      	ldr	r3, [pc, #32]	; (12b4 <TIMER_ARINC_init+0x44>)
    1292:	4798      	blx	r3
}
    1294:	bf00      	nop
    1296:	bd80      	pop	{r7, pc}
    1298:	40000800 	.word	0x40000800
    129c:	000005a7 	.word	0x000005a7
    12a0:	40001c00 	.word	0x40001c00
    12a4:	00000401 	.word	0x00000401
    12a8:	0000791d 	.word	0x0000791d
    12ac:	4101a000 	.word	0x4101a000
    12b0:	20001a98 	.word	0x20001a98
    12b4:	0000240d 	.word	0x0000240d

000012b8 <TIMER_HVAC_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_HVAC_init(void)
{
    12b8:	b580      	push	{r7, lr}
    12ba:	af00      	add	r7, sp, #0
	hri_mclk_set_APBBMASK_TC3_bit(MCLK);
    12bc:	4808      	ldr	r0, [pc, #32]	; (12e0 <TIMER_HVAC_init+0x28>)
    12be:	4b09      	ldr	r3, [pc, #36]	; (12e4 <TIMER_HVAC_init+0x2c>)
    12c0:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC3_GCLK_ID, CONF_GCLK_TC3_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    12c2:	2245      	movs	r2, #69	; 0x45
    12c4:	211a      	movs	r1, #26
    12c6:	4808      	ldr	r0, [pc, #32]	; (12e8 <TIMER_HVAC_init+0x30>)
    12c8:	4b08      	ldr	r3, [pc, #32]	; (12ec <TIMER_HVAC_init+0x34>)
    12ca:	4798      	blx	r3

	timer_init(&TIMER_HVAC, TC3, _tc_get_timer());
    12cc:	4b08      	ldr	r3, [pc, #32]	; (12f0 <TIMER_HVAC_init+0x38>)
    12ce:	4798      	blx	r3
    12d0:	4603      	mov	r3, r0
    12d2:	461a      	mov	r2, r3
    12d4:	4907      	ldr	r1, [pc, #28]	; (12f4 <TIMER_HVAC_init+0x3c>)
    12d6:	4808      	ldr	r0, [pc, #32]	; (12f8 <TIMER_HVAC_init+0x40>)
    12d8:	4b08      	ldr	r3, [pc, #32]	; (12fc <TIMER_HVAC_init+0x44>)
    12da:	4798      	blx	r3
}
    12dc:	bf00      	nop
    12de:	bd80      	pop	{r7, pc}
    12e0:	40000800 	.word	0x40000800
    12e4:	000005c7 	.word	0x000005c7
    12e8:	40001c00 	.word	0x40001c00
    12ec:	00000401 	.word	0x00000401
    12f0:	0000791d 	.word	0x0000791d
    12f4:	4101c000 	.word	0x4101c000
    12f8:	20001af4 	.word	0x20001af4
    12fc:	0000240d 	.word	0x0000240d

00001300 <LIVE_PULSE_PORT_init>:

void LIVE_PULSE_PORT_init(void)
{
    1300:	b580      	push	{r7, lr}
    1302:	af00      	add	r7, sp, #0

	gpio_set_pin_function(PB00, PINMUX_PB00E_TC7_WO0);
    1304:	4904      	ldr	r1, [pc, #16]	; (1318 <LIVE_PULSE_PORT_init+0x18>)
    1306:	2020      	movs	r0, #32
    1308:	4b04      	ldr	r3, [pc, #16]	; (131c <LIVE_PULSE_PORT_init+0x1c>)
    130a:	4798      	blx	r3

	gpio_set_pin_function(PB01, PINMUX_PB01E_TC7_WO1);
    130c:	4904      	ldr	r1, [pc, #16]	; (1320 <LIVE_PULSE_PORT_init+0x20>)
    130e:	2021      	movs	r0, #33	; 0x21
    1310:	4b02      	ldr	r3, [pc, #8]	; (131c <LIVE_PULSE_PORT_init+0x1c>)
    1312:	4798      	blx	r3
}
    1314:	bf00      	nop
    1316:	bd80      	pop	{r7, pc}
    1318:	00200004 	.word	0x00200004
    131c:	00000bb5 	.word	0x00000bb5
    1320:	00210004 	.word	0x00210004

00001324 <LIVE_PULSE_CLOCK_init>:

void LIVE_PULSE_CLOCK_init(void)
{
    1324:	b580      	push	{r7, lr}
    1326:	af00      	add	r7, sp, #0

	hri_mclk_set_APBDMASK_TC7_bit(MCLK);
    1328:	4804      	ldr	r0, [pc, #16]	; (133c <LIVE_PULSE_CLOCK_init+0x18>)
    132a:	4b05      	ldr	r3, [pc, #20]	; (1340 <LIVE_PULSE_CLOCK_init+0x1c>)
    132c:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC7_GCLK_ID, CONF_GCLK_TC7_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    132e:	224b      	movs	r2, #75	; 0x4b
    1330:	2127      	movs	r1, #39	; 0x27
    1332:	4804      	ldr	r0, [pc, #16]	; (1344 <LIVE_PULSE_CLOCK_init+0x20>)
    1334:	4b04      	ldr	r3, [pc, #16]	; (1348 <LIVE_PULSE_CLOCK_init+0x24>)
    1336:	4798      	blx	r3
}
    1338:	bf00      	nop
    133a:	bd80      	pop	{r7, pc}
    133c:	40000800 	.word	0x40000800
    1340:	00000687 	.word	0x00000687
    1344:	40001c00 	.word	0x40001c00
    1348:	00000401 	.word	0x00000401

0000134c <LIVE_PULSE_init>:

void LIVE_PULSE_init(void)
{
    134c:	b580      	push	{r7, lr}
    134e:	af00      	add	r7, sp, #0
	LIVE_PULSE_CLOCK_init();
    1350:	4b06      	ldr	r3, [pc, #24]	; (136c <LIVE_PULSE_init+0x20>)
    1352:	4798      	blx	r3
	LIVE_PULSE_PORT_init();
    1354:	4b06      	ldr	r3, [pc, #24]	; (1370 <LIVE_PULSE_init+0x24>)
    1356:	4798      	blx	r3
	pwm_init(&LIVE_PULSE, TC7, _tc_get_pwm());
    1358:	4b06      	ldr	r3, [pc, #24]	; (1374 <LIVE_PULSE_init+0x28>)
    135a:	4798      	blx	r3
    135c:	4603      	mov	r3, r0
    135e:	461a      	mov	r2, r3
    1360:	4905      	ldr	r1, [pc, #20]	; (1378 <LIVE_PULSE_init+0x2c>)
    1362:	4806      	ldr	r0, [pc, #24]	; (137c <LIVE_PULSE_init+0x30>)
    1364:	4b06      	ldr	r3, [pc, #24]	; (1380 <LIVE_PULSE_init+0x34>)
    1366:	4798      	blx	r3
}
    1368:	bf00      	nop
    136a:	bd80      	pop	{r7, pc}
    136c:	00001325 	.word	0x00001325
    1370:	00001301 	.word	0x00001301
    1374:	0000792d 	.word	0x0000792d
    1378:	43001800 	.word	0x43001800
    137c:	20001a54 	.word	0x20001a54
    1380:	00001cb5 	.word	0x00001cb5

00001384 <CDCUSB_PORT_init>:

void CDCUSB_PORT_init(void)
{
    1384:	b580      	push	{r7, lr}
    1386:	af00      	add	r7, sp, #0

	gpio_set_pin_direction(PA24,
    1388:	2102      	movs	r1, #2
    138a:	2018      	movs	r0, #24
    138c:	4b0f      	ldr	r3, [pc, #60]	; (13cc <CDCUSB_PORT_init+0x48>)
    138e:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(PA24,
    1390:	2100      	movs	r1, #0
    1392:	2018      	movs	r0, #24
    1394:	4b0e      	ldr	r3, [pc, #56]	; (13d0 <CDCUSB_PORT_init+0x4c>)
    1396:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(PA24,
    1398:	2100      	movs	r1, #0
    139a:	2018      	movs	r0, #24
    139c:	4b0d      	ldr	r3, [pc, #52]	; (13d4 <CDCUSB_PORT_init+0x50>)
    139e:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA24,
    13a0:	490d      	ldr	r1, [pc, #52]	; (13d8 <CDCUSB_PORT_init+0x54>)
    13a2:	2018      	movs	r0, #24
    13a4:	4b0d      	ldr	r3, [pc, #52]	; (13dc <CDCUSB_PORT_init+0x58>)
    13a6:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA24H_USB_DM);

	gpio_set_pin_direction(PA25,
    13a8:	2102      	movs	r1, #2
    13aa:	2019      	movs	r0, #25
    13ac:	4b07      	ldr	r3, [pc, #28]	; (13cc <CDCUSB_PORT_init+0x48>)
    13ae:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(PA25,
    13b0:	2100      	movs	r1, #0
    13b2:	2019      	movs	r0, #25
    13b4:	4b06      	ldr	r3, [pc, #24]	; (13d0 <CDCUSB_PORT_init+0x4c>)
    13b6:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(PA25,
    13b8:	2100      	movs	r1, #0
    13ba:	2019      	movs	r0, #25
    13bc:	4b05      	ldr	r3, [pc, #20]	; (13d4 <CDCUSB_PORT_init+0x50>)
    13be:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA25,
    13c0:	4907      	ldr	r1, [pc, #28]	; (13e0 <CDCUSB_PORT_init+0x5c>)
    13c2:	2019      	movs	r0, #25
    13c4:	4b05      	ldr	r3, [pc, #20]	; (13dc <CDCUSB_PORT_init+0x58>)
    13c6:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_K"> K
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA25H_USB_DP);
}
    13c8:	bf00      	nop
    13ca:	bd80      	pop	{r7, pc}
    13cc:	00000bd5 	.word	0x00000bd5
    13d0:	00000c0d 	.word	0x00000c0d
    13d4:	00000b81 	.word	0x00000b81
    13d8:	00180007 	.word	0x00180007
    13dc:	00000bb5 	.word	0x00000bb5
    13e0:	00190007 	.word	0x00190007

000013e4 <CDCUSB_CLOCK_init>:
#if (CONF_GCLK_USB_FREQUENCY > (48000000 + 48000000 / 400)) || (CONF_GCLK_USB_FREQUENCY < (48000000 - 48000000 / 400))
#warning USB clock should be 48MHz ~ 0.25% clock, check your configuration!
#endif

void CDCUSB_CLOCK_init(void)
{
    13e4:	b580      	push	{r7, lr}
    13e6:	af00      	add	r7, sp, #0

	hri_gclk_write_PCHCTRL_reg(GCLK, USB_GCLK_ID, CONF_GCLK_USB_SRC | GCLK_PCHCTRL_CHEN);
    13e8:	2242      	movs	r2, #66	; 0x42
    13ea:	210a      	movs	r1, #10
    13ec:	4805      	ldr	r0, [pc, #20]	; (1404 <CDCUSB_CLOCK_init+0x20>)
    13ee:	4b06      	ldr	r3, [pc, #24]	; (1408 <CDCUSB_CLOCK_init+0x24>)
    13f0:	4798      	blx	r3
	hri_mclk_set_AHBMASK_USB_bit(MCLK);
    13f2:	4806      	ldr	r0, [pc, #24]	; (140c <CDCUSB_CLOCK_init+0x28>)
    13f4:	4b06      	ldr	r3, [pc, #24]	; (1410 <CDCUSB_CLOCK_init+0x2c>)
    13f6:	4798      	blx	r3
	hri_mclk_set_APBBMASK_USB_bit(MCLK);
    13f8:	4804      	ldr	r0, [pc, #16]	; (140c <CDCUSB_CLOCK_init+0x28>)
    13fa:	4b06      	ldr	r3, [pc, #24]	; (1414 <CDCUSB_CLOCK_init+0x30>)
    13fc:	4798      	blx	r3
}
    13fe:	bf00      	nop
    1400:	bd80      	pop	{r7, pc}
    1402:	bf00      	nop
    1404:	40001c00 	.word	0x40001c00
    1408:	00000401 	.word	0x00000401
    140c:	40000800 	.word	0x40000800
    1410:	00000427 	.word	0x00000427
    1414:	00000547 	.word	0x00000547

00001418 <CDCUSB_init>:

void CDCUSB_init(void)
{
    1418:	b580      	push	{r7, lr}
    141a:	af00      	add	r7, sp, #0
	CDCUSB_CLOCK_init();
    141c:	4b03      	ldr	r3, [pc, #12]	; (142c <CDCUSB_init+0x14>)
    141e:	4798      	blx	r3
	usb_d_init();
    1420:	4b03      	ldr	r3, [pc, #12]	; (1430 <CDCUSB_init+0x18>)
    1422:	4798      	blx	r3
	CDCUSB_PORT_init();
    1424:	4b03      	ldr	r3, [pc, #12]	; (1434 <CDCUSB_init+0x1c>)
    1426:	4798      	blx	r3
}
    1428:	bf00      	nop
    142a:	bd80      	pop	{r7, pc}
    142c:	000013e5 	.word	0x000013e5
    1430:	00002985 	.word	0x00002985
    1434:	00001385 	.word	0x00001385

00001438 <WATCHDOG_CLOCK_init>:

void WATCHDOG_CLOCK_init(void)
{
    1438:	b580      	push	{r7, lr}
    143a:	af00      	add	r7, sp, #0
	hri_mclk_set_APBAMASK_WDT_bit(MCLK);
    143c:	4802      	ldr	r0, [pc, #8]	; (1448 <WATCHDOG_CLOCK_init+0x10>)
    143e:	4b03      	ldr	r3, [pc, #12]	; (144c <WATCHDOG_CLOCK_init+0x14>)
    1440:	4798      	blx	r3
}
    1442:	bf00      	nop
    1444:	bd80      	pop	{r7, pc}
    1446:	bf00      	nop
    1448:	40000800 	.word	0x40000800
    144c:	000004a7 	.word	0x000004a7

00001450 <WATCHDOG_init>:

void WATCHDOG_init(void)
{
    1450:	b580      	push	{r7, lr}
    1452:	af00      	add	r7, sp, #0
	WATCHDOG_CLOCK_init();
    1454:	4b03      	ldr	r3, [pc, #12]	; (1464 <WATCHDOG_init+0x14>)
    1456:	4798      	blx	r3
	wdt_init(&WATCHDOG, WDT);
    1458:	4903      	ldr	r1, [pc, #12]	; (1468 <WATCHDOG_init+0x18>)
    145a:	4804      	ldr	r0, [pc, #16]	; (146c <WATCHDOG_init+0x1c>)
    145c:	4b04      	ldr	r3, [pc, #16]	; (1470 <WATCHDOG_init+0x20>)
    145e:	4798      	blx	r3
}
    1460:	bf00      	nop
    1462:	bd80      	pop	{r7, pc}
    1464:	00001439 	.word	0x00001439
    1468:	40002000 	.word	0x40002000
    146c:	20001b70 	.word	0x20001b70
    1470:	00000c55 	.word	0x00000c55

00001474 <CAN_CCU_PORT_init>:

void CAN_CCU_PORT_init(void)
{
    1474:	b580      	push	{r7, lr}
    1476:	af00      	add	r7, sp, #0

	gpio_set_pin_function(PB13, PINMUX_PB13H_CAN1_RX);
    1478:	4904      	ldr	r1, [pc, #16]	; (148c <CAN_CCU_PORT_init+0x18>)
    147a:	202d      	movs	r0, #45	; 0x2d
    147c:	4b04      	ldr	r3, [pc, #16]	; (1490 <CAN_CCU_PORT_init+0x1c>)
    147e:	4798      	blx	r3

	gpio_set_pin_function(PB12, PINMUX_PB12H_CAN1_TX);
    1480:	4904      	ldr	r1, [pc, #16]	; (1494 <CAN_CCU_PORT_init+0x20>)
    1482:	202c      	movs	r0, #44	; 0x2c
    1484:	4b02      	ldr	r3, [pc, #8]	; (1490 <CAN_CCU_PORT_init+0x1c>)
    1486:	4798      	blx	r3
}
    1488:	bf00      	nop
    148a:	bd80      	pop	{r7, pc}
    148c:	002d0007 	.word	0x002d0007
    1490:	00000bb5 	.word	0x00000bb5
    1494:	002c0007 	.word	0x002c0007

00001498 <CAN_CCU_init>:
 * \brief CAN initialization function
 *
 * Enables CAN peripheral, clocks and initializes CAN driver
 */
void CAN_CCU_init(void)
{
    1498:	b580      	push	{r7, lr}
    149a:	af00      	add	r7, sp, #0
	hri_mclk_set_AHBMASK_CAN1_bit(MCLK);
    149c:	4807      	ldr	r0, [pc, #28]	; (14bc <CAN_CCU_init+0x24>)
    149e:	4b08      	ldr	r3, [pc, #32]	; (14c0 <CAN_CCU_init+0x28>)
    14a0:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, CAN1_GCLK_ID, CONF_GCLK_CAN1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    14a2:	2243      	movs	r2, #67	; 0x43
    14a4:	211c      	movs	r1, #28
    14a6:	4807      	ldr	r0, [pc, #28]	; (14c4 <CAN_CCU_init+0x2c>)
    14a8:	4b07      	ldr	r3, [pc, #28]	; (14c8 <CAN_CCU_init+0x30>)
    14aa:	4798      	blx	r3
	can_async_init(&CAN_CCU, CAN1);
    14ac:	4907      	ldr	r1, [pc, #28]	; (14cc <CAN_CCU_init+0x34>)
    14ae:	4808      	ldr	r0, [pc, #32]	; (14d0 <CAN_CCU_init+0x38>)
    14b0:	4b08      	ldr	r3, [pc, #32]	; (14d4 <CAN_CCU_init+0x3c>)
    14b2:	4798      	blx	r3
	CAN_CCU_PORT_init();
    14b4:	4b08      	ldr	r3, [pc, #32]	; (14d8 <CAN_CCU_init+0x40>)
    14b6:	4798      	blx	r3
}
    14b8:	bf00      	nop
    14ba:	bd80      	pop	{r7, pc}
    14bc:	40000800 	.word	0x40000800
    14c0:	00000467 	.word	0x00000467
    14c4:	40001c00 	.word	0x40001c00
    14c8:	00000401 	.word	0x00000401
    14cc:	42000400 	.word	0x42000400
    14d0:	20001a70 	.word	0x20001a70
    14d4:	000016c5 	.word	0x000016c5
    14d8:	00001475 	.word	0x00001475

000014dc <system_init>:

void system_init(void)
{
    14dc:	b580      	push	{r7, lr}
    14de:	af00      	add	r7, sp, #0
	init_mcu();
    14e0:	4b46      	ldr	r3, [pc, #280]	; (15fc <system_init+0x120>)
    14e2:	4798      	blx	r3

	// GPIO on PB07

	// Set pin direction to input
	gpio_set_pin_direction(INT_LTC2983, GPIO_DIRECTION_IN);
    14e4:	2101      	movs	r1, #1
    14e6:	2027      	movs	r0, #39	; 0x27
    14e8:	4b45      	ldr	r3, [pc, #276]	; (1600 <system_init+0x124>)
    14ea:	4798      	blx	r3

	gpio_set_pin_pull_mode(INT_LTC2983,
    14ec:	2102      	movs	r1, #2
    14ee:	2027      	movs	r0, #39	; 0x27
    14f0:	4b44      	ldr	r3, [pc, #272]	; (1604 <system_init+0x128>)
    14f2:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(INT_LTC2983, GPIO_PIN_FUNCTION_OFF);
    14f4:	f04f 31ff 	mov.w	r1, #4294967295
    14f8:	2027      	movs	r0, #39	; 0x27
    14fa:	4b43      	ldr	r3, [pc, #268]	; (1608 <system_init+0x12c>)
    14fc:	4798      	blx	r3

	// GPIO on PB29

	gpio_set_pin_level(CS_SPI_LTC,
    14fe:	2101      	movs	r1, #1
    1500:	203d      	movs	r0, #61	; 0x3d
    1502:	4b42      	ldr	r3, [pc, #264]	; (160c <system_init+0x130>)
    1504:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_SPI_LTC, GPIO_DIRECTION_OUT);
    1506:	2102      	movs	r1, #2
    1508:	203d      	movs	r0, #61	; 0x3d
    150a:	4b3d      	ldr	r3, [pc, #244]	; (1600 <system_init+0x124>)
    150c:	4798      	blx	r3

	gpio_set_pin_function(CS_SPI_LTC, GPIO_PIN_FUNCTION_OFF);
    150e:	f04f 31ff 	mov.w	r1, #4294967295
    1512:	203d      	movs	r0, #61	; 0x3d
    1514:	4b3c      	ldr	r3, [pc, #240]	; (1608 <system_init+0x12c>)
    1516:	4798      	blx	r3

	// GPIO on PB31

	// Set pin direction to input
	gpio_set_pin_direction(SW0, GPIO_DIRECTION_IN);
    1518:	2101      	movs	r1, #1
    151a:	203f      	movs	r0, #63	; 0x3f
    151c:	4b38      	ldr	r3, [pc, #224]	; (1600 <system_init+0x124>)
    151e:	4798      	blx	r3

	gpio_set_pin_pull_mode(SW0,
    1520:	2101      	movs	r1, #1
    1522:	203f      	movs	r0, #63	; 0x3f
    1524:	4b37      	ldr	r3, [pc, #220]	; (1604 <system_init+0x128>)
    1526:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_UP);

	gpio_set_pin_function(SW0, GPIO_PIN_FUNCTION_OFF);
    1528:	f04f 31ff 	mov.w	r1, #4294967295
    152c:	203f      	movs	r0, #63	; 0x3f
    152e:	4b36      	ldr	r3, [pc, #216]	; (1608 <system_init+0x12c>)
    1530:	4798      	blx	r3

	// GPIO on PC00

	// Set pin direction to input
	gpio_set_pin_direction(VBUS_DETECTED, GPIO_DIRECTION_IN);
    1532:	2101      	movs	r1, #1
    1534:	2040      	movs	r0, #64	; 0x40
    1536:	4b32      	ldr	r3, [pc, #200]	; (1600 <system_init+0x124>)
    1538:	4798      	blx	r3

	gpio_set_pin_pull_mode(VBUS_DETECTED,
    153a:	2102      	movs	r1, #2
    153c:	2040      	movs	r0, #64	; 0x40
    153e:	4b31      	ldr	r3, [pc, #196]	; (1604 <system_init+0x128>)
    1540:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(VBUS_DETECTED, GPIO_PIN_FUNCTION_OFF);
    1542:	f04f 31ff 	mov.w	r1, #4294967295
    1546:	2040      	movs	r0, #64	; 0x40
    1548:	4b2f      	ldr	r3, [pc, #188]	; (1608 <system_init+0x12c>)
    154a:	4798      	blx	r3

	// GPIO on PC13

	gpio_set_pin_level(CAN_STDBY,
    154c:	2100      	movs	r1, #0
    154e:	204d      	movs	r0, #77	; 0x4d
    1550:	4b2e      	ldr	r3, [pc, #184]	; (160c <system_init+0x130>)
    1552:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(CAN_STDBY, GPIO_DIRECTION_OUT);
    1554:	2102      	movs	r1, #2
    1556:	204d      	movs	r0, #77	; 0x4d
    1558:	4b29      	ldr	r3, [pc, #164]	; (1600 <system_init+0x124>)
    155a:	4798      	blx	r3

	gpio_set_pin_function(CAN_STDBY, GPIO_PIN_FUNCTION_OFF);
    155c:	f04f 31ff 	mov.w	r1, #4294967295
    1560:	204d      	movs	r0, #77	; 0x4d
    1562:	4b29      	ldr	r3, [pc, #164]	; (1608 <system_init+0x12c>)
    1564:	4798      	blx	r3

	// GPIO on PC14

	gpio_set_pin_level(CS_Holt,
    1566:	2101      	movs	r1, #1
    1568:	204e      	movs	r0, #78	; 0x4e
    156a:	4b28      	ldr	r3, [pc, #160]	; (160c <system_init+0x130>)
    156c:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_Holt, GPIO_DIRECTION_OUT);
    156e:	2102      	movs	r1, #2
    1570:	204e      	movs	r0, #78	; 0x4e
    1572:	4b23      	ldr	r3, [pc, #140]	; (1600 <system_init+0x124>)
    1574:	4798      	blx	r3

	gpio_set_pin_function(CS_Holt, GPIO_PIN_FUNCTION_OFF);
    1576:	f04f 31ff 	mov.w	r1, #4294967295
    157a:	204e      	movs	r0, #78	; 0x4e
    157c:	4b22      	ldr	r3, [pc, #136]	; (1608 <system_init+0x12c>)
    157e:	4798      	blx	r3

	// GPIO on PC15

	gpio_set_pin_level(Ethernet_Led,
    1580:	2100      	movs	r1, #0
    1582:	204f      	movs	r0, #79	; 0x4f
    1584:	4b21      	ldr	r3, [pc, #132]	; (160c <system_init+0x130>)
    1586:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(Ethernet_Led, GPIO_DIRECTION_OUT);
    1588:	2102      	movs	r1, #2
    158a:	204f      	movs	r0, #79	; 0x4f
    158c:	4b1c      	ldr	r3, [pc, #112]	; (1600 <system_init+0x124>)
    158e:	4798      	blx	r3

	gpio_set_pin_function(Ethernet_Led, GPIO_PIN_FUNCTION_OFF);
    1590:	f04f 31ff 	mov.w	r1, #4294967295
    1594:	204f      	movs	r0, #79	; 0x4f
    1596:	4b1c      	ldr	r3, [pc, #112]	; (1608 <system_init+0x12c>)
    1598:	4798      	blx	r3

	// GPIO on PC18

	gpio_set_pin_level(LED0,
    159a:	2100      	movs	r1, #0
    159c:	2052      	movs	r0, #82	; 0x52
    159e:	4b1b      	ldr	r3, [pc, #108]	; (160c <system_init+0x130>)
    15a0:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(LED0, GPIO_DIRECTION_OUT);
    15a2:	2102      	movs	r1, #2
    15a4:	2052      	movs	r0, #82	; 0x52
    15a6:	4b16      	ldr	r3, [pc, #88]	; (1600 <system_init+0x124>)
    15a8:	4798      	blx	r3

	gpio_set_pin_function(LED0, GPIO_PIN_FUNCTION_OFF);
    15aa:	f04f 31ff 	mov.w	r1, #4294967295
    15ae:	2052      	movs	r0, #82	; 0x52
    15b0:	4b15      	ldr	r3, [pc, #84]	; (1608 <system_init+0x12c>)
    15b2:	4798      	blx	r3

	CRC_CALC_init();
    15b4:	4b16      	ldr	r3, [pc, #88]	; (1610 <system_init+0x134>)
    15b6:	4798      	blx	r3
	EXTERNAL_IRQ_0_init();
    15b8:	4b16      	ldr	r3, [pc, #88]	; (1614 <system_init+0x138>)
    15ba:	4798      	blx	r3

	EVENT_SYSTEM_0_init();
    15bc:	4b16      	ldr	r3, [pc, #88]	; (1618 <system_init+0x13c>)
    15be:	4798      	blx	r3

	QSPI_N25Q256_init();
    15c0:	4b16      	ldr	r3, [pc, #88]	; (161c <system_init+0x140>)
    15c2:	4798      	blx	r3

	DATETIME_CLOCK_init();
    15c4:	4b16      	ldr	r3, [pc, #88]	; (1620 <system_init+0x144>)
    15c6:	4798      	blx	r3

	SPI_TEMP_init();
    15c8:	4b16      	ldr	r3, [pc, #88]	; (1624 <system_init+0x148>)
    15ca:	4798      	blx	r3

	I2C_EXPANDER_init();
    15cc:	4b16      	ldr	r3, [pc, #88]	; (1628 <system_init+0x14c>)
    15ce:	4798      	blx	r3

	SPI_HI3593_init();
    15d0:	4b16      	ldr	r3, [pc, #88]	; (162c <system_init+0x150>)
    15d2:	4798      	blx	r3

	I2C_EEPROM_init();
    15d4:	4b16      	ldr	r3, [pc, #88]	; (1630 <system_init+0x154>)
    15d6:	4798      	blx	r3

	TIMER_INTERFACE_init();
    15d8:	4b16      	ldr	r3, [pc, #88]	; (1634 <system_init+0x158>)
    15da:	4798      	blx	r3
	TIMER_EVENT_init();
    15dc:	4b16      	ldr	r3, [pc, #88]	; (1638 <system_init+0x15c>)
    15de:	4798      	blx	r3
	TIMER_ARINC_init();
    15e0:	4b16      	ldr	r3, [pc, #88]	; (163c <system_init+0x160>)
    15e2:	4798      	blx	r3
	TIMER_HVAC_init();
    15e4:	4b16      	ldr	r3, [pc, #88]	; (1640 <system_init+0x164>)
    15e6:	4798      	blx	r3
	LIVE_PULSE_init();
    15e8:	4b16      	ldr	r3, [pc, #88]	; (1644 <system_init+0x168>)
    15ea:	4798      	blx	r3

	CDCUSB_init();
    15ec:	4b16      	ldr	r3, [pc, #88]	; (1648 <system_init+0x16c>)
    15ee:	4798      	blx	r3

	WATCHDOG_init();
    15f0:	4b16      	ldr	r3, [pc, #88]	; (164c <system_init+0x170>)
    15f2:	4798      	blx	r3
	CAN_CCU_init();
    15f4:	4b16      	ldr	r3, [pc, #88]	; (1650 <system_init+0x174>)
    15f6:	4798      	blx	r3
}
    15f8:	bf00      	nop
    15fa:	bd80      	pop	{r7, pc}
    15fc:	00000c45 	.word	0x00000c45
    1600:	00000bd5 	.word	0x00000bd5
    1604:	00000b81 	.word	0x00000b81
    1608:	00000bb5 	.word	0x00000bb5
    160c:	00000c0d 	.word	0x00000c0d
    1610:	00000ca5 	.word	0x00000ca5
    1614:	00000cd1 	.word	0x00000cd1
    1618:	00000d75 	.word	0x00000d75
    161c:	00000eb1 	.word	0x00000eb1
    1620:	00000ef5 	.word	0x00000ef5
    1624:	00000fb9 	.word	0x00000fb9
    1628:	00001051 	.word	0x00001051
    162c:	0000111d 	.word	0x0000111d
    1630:	000011b5 	.word	0x000011b5
    1634:	000011e1 	.word	0x000011e1
    1638:	00001229 	.word	0x00001229
    163c:	00001271 	.word	0x00001271
    1640:	000012b9 	.word	0x000012b9
    1644:	0000134d 	.word	0x0000134d
    1648:	00001419 	.word	0x00001419
    164c:	00001451 	.word	0x00001451
    1650:	00001499 	.word	0x00001499

00001654 <calendar_init>:
}

/** \brief Initialize Calendar
 */
int32_t calendar_init(struct calendar_descriptor *const calendar, const void *hw)
{
    1654:	b580      	push	{r7, lr}
    1656:	b084      	sub	sp, #16
    1658:	af00      	add	r7, sp, #0
    165a:	6078      	str	r0, [r7, #4]
    165c:	6039      	str	r1, [r7, #0]
	int32_t ret = 0;
    165e:	2300      	movs	r3, #0
    1660:	60fb      	str	r3, [r7, #12]

	/* Sanity check arguments */
	ASSERT(calendar);
    1662:	687b      	ldr	r3, [r7, #4]
    1664:	2b00      	cmp	r3, #0
    1666:	bf14      	ite	ne
    1668:	2301      	movne	r3, #1
    166a:	2300      	moveq	r3, #0
    166c:	b2db      	uxtb	r3, r3
    166e:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
    1672:	4911      	ldr	r1, [pc, #68]	; (16b8 <calendar_init+0x64>)
    1674:	4618      	mov	r0, r3
    1676:	4b11      	ldr	r3, [pc, #68]	; (16bc <calendar_init+0x68>)
    1678:	4798      	blx	r3

	if (calendar->device.hw == hw) {
    167a:	687b      	ldr	r3, [r7, #4]
    167c:	681a      	ldr	r2, [r3, #0]
    167e:	683b      	ldr	r3, [r7, #0]
    1680:	429a      	cmp	r2, r3
    1682:	d101      	bne.n	1688 <calendar_init+0x34>
		/* Already initialized with current configuration */
		return ERR_NONE;
    1684:	2300      	movs	r3, #0
    1686:	e013      	b.n	16b0 <calendar_init+0x5c>
	} else if (calendar->device.hw != NULL) {
    1688:	687b      	ldr	r3, [r7, #4]
    168a:	681b      	ldr	r3, [r3, #0]
    168c:	2b00      	cmp	r3, #0
    168e:	d002      	beq.n	1696 <calendar_init+0x42>
		/* Initialized with another configuration */
		return ERR_ALREADY_INITIALIZED;
    1690:	f06f 0311 	mvn.w	r3, #17
    1694:	e00c      	b.n	16b0 <calendar_init+0x5c>
	}
	calendar->device.hw = (void *)hw;
    1696:	687b      	ldr	r3, [r7, #4]
    1698:	683a      	ldr	r2, [r7, #0]
    169a:	601a      	str	r2, [r3, #0]
	ret                 = _calendar_init(&calendar->device);
    169c:	687b      	ldr	r3, [r7, #4]
    169e:	4618      	mov	r0, r3
    16a0:	4b07      	ldr	r3, [pc, #28]	; (16c0 <calendar_init+0x6c>)
    16a2:	4798      	blx	r3
    16a4:	60f8      	str	r0, [r7, #12]
	calendar->base_year = DEFAULT_BASE_YEAR;
    16a6:	687b      	ldr	r3, [r7, #4]
    16a8:	f240 72b2 	movw	r2, #1970	; 0x7b2
    16ac:	619a      	str	r2, [r3, #24]

	return ret;
    16ae:	68fb      	ldr	r3, [r7, #12]
}
    16b0:	4618      	mov	r0, r3
    16b2:	3710      	adds	r7, #16
    16b4:	46bd      	mov	sp, r7
    16b6:	bd80      	pop	{r7, pc}
    16b8:	00012e50 	.word	0x00012e50
    16bc:	00002ed9 	.word	0x00002ed9
    16c0:	00005635 	.word	0x00005635

000016c4 <can_async_init>:

/**
 * \brief Initialize CAN.
 */
int32_t can_async_init(struct can_async_descriptor *const descr, void *const hw)
{
    16c4:	b580      	push	{r7, lr}
    16c6:	b084      	sub	sp, #16
    16c8:	af00      	add	r7, sp, #0
    16ca:	6078      	str	r0, [r7, #4]
    16cc:	6039      	str	r1, [r7, #0]
	int32_t rc;

	ASSERT(descr && hw);
    16ce:	687b      	ldr	r3, [r7, #4]
    16d0:	2b00      	cmp	r3, #0
    16d2:	d004      	beq.n	16de <can_async_init+0x1a>
    16d4:	683b      	ldr	r3, [r7, #0]
    16d6:	2b00      	cmp	r3, #0
    16d8:	d001      	beq.n	16de <can_async_init+0x1a>
    16da:	2301      	movs	r3, #1
    16dc:	e000      	b.n	16e0 <can_async_init+0x1c>
    16de:	2300      	movs	r3, #0
    16e0:	f003 0301 	and.w	r3, r3, #1
    16e4:	b2db      	uxtb	r3, r3
    16e6:	2241      	movs	r2, #65	; 0x41
    16e8:	490e      	ldr	r1, [pc, #56]	; (1724 <can_async_init+0x60>)
    16ea:	4618      	mov	r0, r3
    16ec:	4b0e      	ldr	r3, [pc, #56]	; (1728 <can_async_init+0x64>)
    16ee:	4798      	blx	r3

	rc = _can_async_init(&descr->dev, hw);
    16f0:	687b      	ldr	r3, [r7, #4]
    16f2:	6839      	ldr	r1, [r7, #0]
    16f4:	4618      	mov	r0, r3
    16f6:	4b0d      	ldr	r3, [pc, #52]	; (172c <can_async_init+0x68>)
    16f8:	4798      	blx	r3
    16fa:	60f8      	str	r0, [r7, #12]
	if (rc) {
    16fc:	68fb      	ldr	r3, [r7, #12]
    16fe:	2b00      	cmp	r3, #0
    1700:	d001      	beq.n	1706 <can_async_init+0x42>
		return rc;
    1702:	68fb      	ldr	r3, [r7, #12]
    1704:	e009      	b.n	171a <can_async_init+0x56>
	}
	descr->dev.cb.tx_done     = can_tx_done;
    1706:	687b      	ldr	r3, [r7, #4]
    1708:	4a09      	ldr	r2, [pc, #36]	; (1730 <can_async_init+0x6c>)
    170a:	605a      	str	r2, [r3, #4]
	descr->dev.cb.rx_done     = can_rx_done;
    170c:	687b      	ldr	r3, [r7, #4]
    170e:	4a09      	ldr	r2, [pc, #36]	; (1734 <can_async_init+0x70>)
    1710:	609a      	str	r2, [r3, #8]
	descr->dev.cb.irq_handler = can_irq_handler;
    1712:	687b      	ldr	r3, [r7, #4]
    1714:	4a08      	ldr	r2, [pc, #32]	; (1738 <can_async_init+0x74>)
    1716:	60da      	str	r2, [r3, #12]

	return ERR_NONE;
    1718:	2300      	movs	r3, #0
}
    171a:	4618      	mov	r0, r3
    171c:	3710      	adds	r7, #16
    171e:	46bd      	mov	sp, r7
    1720:	bd80      	pop	{r7, pc}
    1722:	bf00      	nop
    1724:	00012e6c 	.word	0x00012e6c
    1728:	00002ed9 	.word	0x00002ed9
    172c:	000035d9 	.word	0x000035d9
    1730:	000018d9 	.word	0x000018d9
    1734:	000018fd 	.word	0x000018fd
    1738:	00001921 	.word	0x00001921

0000173c <can_async_enable>:

/**
 * \brief Enable CAN
 */
int32_t can_async_enable(struct can_async_descriptor *const descr)
{
    173c:	b580      	push	{r7, lr}
    173e:	b082      	sub	sp, #8
    1740:	af00      	add	r7, sp, #0
    1742:	6078      	str	r0, [r7, #4]
	ASSERT(descr);
    1744:	687b      	ldr	r3, [r7, #4]
    1746:	2b00      	cmp	r3, #0
    1748:	bf14      	ite	ne
    174a:	2301      	movne	r3, #1
    174c:	2300      	moveq	r3, #0
    174e:	b2db      	uxtb	r3, r3
    1750:	225c      	movs	r2, #92	; 0x5c
    1752:	4906      	ldr	r1, [pc, #24]	; (176c <can_async_enable+0x30>)
    1754:	4618      	mov	r0, r3
    1756:	4b06      	ldr	r3, [pc, #24]	; (1770 <can_async_enable+0x34>)
    1758:	4798      	blx	r3
	return _can_async_enable(&descr->dev);
    175a:	687b      	ldr	r3, [r7, #4]
    175c:	4618      	mov	r0, r3
    175e:	4b05      	ldr	r3, [pc, #20]	; (1774 <can_async_enable+0x38>)
    1760:	4798      	blx	r3
    1762:	4603      	mov	r3, r0
}
    1764:	4618      	mov	r0, r3
    1766:	3708      	adds	r7, #8
    1768:	46bd      	mov	sp, r7
    176a:	bd80      	pop	{r7, pc}
    176c:	00012e6c 	.word	0x00012e6c
    1770:	00002ed9 	.word	0x00002ed9
    1774:	000037c5 	.word	0x000037c5

00001778 <can_async_read>:

/**
 * \brief Read a CAN message
 */
int32_t can_async_read(struct can_async_descriptor *const descr, struct can_message *msg)
{
    1778:	b580      	push	{r7, lr}
    177a:	b082      	sub	sp, #8
    177c:	af00      	add	r7, sp, #0
    177e:	6078      	str	r0, [r7, #4]
    1780:	6039      	str	r1, [r7, #0]
	ASSERT(descr && msg);
    1782:	687b      	ldr	r3, [r7, #4]
    1784:	2b00      	cmp	r3, #0
    1786:	d004      	beq.n	1792 <can_async_read+0x1a>
    1788:	683b      	ldr	r3, [r7, #0]
    178a:	2b00      	cmp	r3, #0
    178c:	d001      	beq.n	1792 <can_async_read+0x1a>
    178e:	2301      	movs	r3, #1
    1790:	e000      	b.n	1794 <can_async_read+0x1c>
    1792:	2300      	movs	r3, #0
    1794:	f003 0301 	and.w	r3, r3, #1
    1798:	b2db      	uxtb	r3, r3
    179a:	226e      	movs	r2, #110	; 0x6e
    179c:	4906      	ldr	r1, [pc, #24]	; (17b8 <can_async_read+0x40>)
    179e:	4618      	mov	r0, r3
    17a0:	4b06      	ldr	r3, [pc, #24]	; (17bc <can_async_read+0x44>)
    17a2:	4798      	blx	r3
	return _can_async_read(&descr->dev, msg);
    17a4:	687b      	ldr	r3, [r7, #4]
    17a6:	6839      	ldr	r1, [r7, #0]
    17a8:	4618      	mov	r0, r3
    17aa:	4b05      	ldr	r3, [pc, #20]	; (17c0 <can_async_read+0x48>)
    17ac:	4798      	blx	r3
    17ae:	4603      	mov	r3, r0
}
    17b0:	4618      	mov	r0, r3
    17b2:	3708      	adds	r7, #8
    17b4:	46bd      	mov	sp, r7
    17b6:	bd80      	pop	{r7, pc}
    17b8:	00012e6c 	.word	0x00012e6c
    17bc:	00002ed9 	.word	0x00002ed9
    17c0:	000037e5 	.word	0x000037e5

000017c4 <can_async_write>:

/**
 * \brief Write a CAN message
 */
int32_t can_async_write(struct can_async_descriptor *const descr, struct can_message *msg)
{
    17c4:	b580      	push	{r7, lr}
    17c6:	b082      	sub	sp, #8
    17c8:	af00      	add	r7, sp, #0
    17ca:	6078      	str	r0, [r7, #4]
    17cc:	6039      	str	r1, [r7, #0]
	ASSERT(descr && msg);
    17ce:	687b      	ldr	r3, [r7, #4]
    17d0:	2b00      	cmp	r3, #0
    17d2:	d004      	beq.n	17de <can_async_write+0x1a>
    17d4:	683b      	ldr	r3, [r7, #0]
    17d6:	2b00      	cmp	r3, #0
    17d8:	d001      	beq.n	17de <can_async_write+0x1a>
    17da:	2301      	movs	r3, #1
    17dc:	e000      	b.n	17e0 <can_async_write+0x1c>
    17de:	2300      	movs	r3, #0
    17e0:	f003 0301 	and.w	r3, r3, #1
    17e4:	b2db      	uxtb	r3, r3
    17e6:	2277      	movs	r2, #119	; 0x77
    17e8:	4906      	ldr	r1, [pc, #24]	; (1804 <can_async_write+0x40>)
    17ea:	4618      	mov	r0, r3
    17ec:	4b06      	ldr	r3, [pc, #24]	; (1808 <can_async_write+0x44>)
    17ee:	4798      	blx	r3
	return _can_async_write(&descr->dev, msg);
    17f0:	687b      	ldr	r3, [r7, #4]
    17f2:	6839      	ldr	r1, [r7, #0]
    17f4:	4618      	mov	r0, r3
    17f6:	4b05      	ldr	r3, [pc, #20]	; (180c <can_async_write+0x48>)
    17f8:	4798      	blx	r3
    17fa:	4603      	mov	r3, r0
}
    17fc:	4618      	mov	r0, r3
    17fe:	3708      	adds	r7, #8
    1800:	46bd      	mov	sp, r7
    1802:	bd80      	pop	{r7, pc}
    1804:	00012e6c 	.word	0x00012e6c
    1808:	00002ed9 	.word	0x00002ed9
    180c:	000038f5 	.word	0x000038f5

00001810 <can_async_register_callback>:
/**
 * \brief Register CAN callback function to interrupt
 */
int32_t can_async_register_callback(struct can_async_descriptor *const descr, enum can_async_callback_type type,
                                    FUNC_PTR cb)
{
    1810:	b580      	push	{r7, lr}
    1812:	b084      	sub	sp, #16
    1814:	af00      	add	r7, sp, #0
    1816:	60f8      	str	r0, [r7, #12]
    1818:	460b      	mov	r3, r1
    181a:	607a      	str	r2, [r7, #4]
    181c:	72fb      	strb	r3, [r7, #11]
	ASSERT(descr);
    181e:	68fb      	ldr	r3, [r7, #12]
    1820:	2b00      	cmp	r3, #0
    1822:	bf14      	ite	ne
    1824:	2301      	movne	r3, #1
    1826:	2300      	moveq	r3, #0
    1828:	b2db      	uxtb	r3, r3
    182a:	2281      	movs	r2, #129	; 0x81
    182c:	4914      	ldr	r1, [pc, #80]	; (1880 <can_async_register_callback+0x70>)
    182e:	4618      	mov	r0, r3
    1830:	4b14      	ldr	r3, [pc, #80]	; (1884 <can_async_register_callback+0x74>)
    1832:	4798      	blx	r3

	switch (type) {
    1834:	7afb      	ldrb	r3, [r7, #11]
    1836:	2b01      	cmp	r3, #1
    1838:	d007      	beq.n	184a <can_async_register_callback+0x3a>
    183a:	2b02      	cmp	r3, #2
    183c:	d009      	beq.n	1852 <can_async_register_callback+0x42>
    183e:	2b00      	cmp	r3, #0
    1840:	d10b      	bne.n	185a <can_async_register_callback+0x4a>
	case CAN_ASYNC_RX_CB:
		descr->cb.rx_done = (cb != NULL) ? (can_cb_t)cb : NULL;
    1842:	68fb      	ldr	r3, [r7, #12]
    1844:	687a      	ldr	r2, [r7, #4]
    1846:	621a      	str	r2, [r3, #32]
		break;
    1848:	e00a      	b.n	1860 <can_async_register_callback+0x50>
	case CAN_ASYNC_TX_CB:
		descr->cb.tx_done = (cb != NULL) ? (can_cb_t)cb : NULL;
    184a:	68fb      	ldr	r3, [r7, #12]
    184c:	687a      	ldr	r2, [r7, #4]
    184e:	61da      	str	r2, [r3, #28]
		break;
    1850:	e006      	b.n	1860 <can_async_register_callback+0x50>
	case CAN_ASYNC_IRQ_CB:
		descr->cb.irq_handler
		    = (cb != NULL) ? (void (*)(struct can_async_descriptor *const, enum can_async_interrupt_type))cb : NULL;
    1852:	68fb      	ldr	r3, [r7, #12]
    1854:	687a      	ldr	r2, [r7, #4]
    1856:	625a      	str	r2, [r3, #36]	; 0x24
		break;
    1858:	e002      	b.n	1860 <can_async_register_callback+0x50>
	default:
		return ERR_INVALID_ARG;
    185a:	f06f 030c 	mvn.w	r3, #12
    185e:	e00b      	b.n	1878 <can_async_register_callback+0x68>
	}

	_can_async_set_irq_state(&descr->dev, type, NULL != cb);
    1860:	68f8      	ldr	r0, [r7, #12]
    1862:	687b      	ldr	r3, [r7, #4]
    1864:	2b00      	cmp	r3, #0
    1866:	bf14      	ite	ne
    1868:	2301      	movne	r3, #1
    186a:	2300      	moveq	r3, #0
    186c:	b2da      	uxtb	r2, r3
    186e:	7afb      	ldrb	r3, [r7, #11]
    1870:	4619      	mov	r1, r3
    1872:	4b05      	ldr	r3, [pc, #20]	; (1888 <can_async_register_callback+0x78>)
    1874:	4798      	blx	r3

	return ERR_NONE;
    1876:	2300      	movs	r3, #0
}
    1878:	4618      	mov	r0, r3
    187a:	3710      	adds	r7, #16
    187c:	46bd      	mov	sp, r7
    187e:	bd80      	pop	{r7, pc}
    1880:	00012e6c 	.word	0x00012e6c
    1884:	00002ed9 	.word	0x00002ed9
    1888:	00003ab1 	.word	0x00003ab1

0000188c <can_async_set_filter>:
/**
 * \brief Set CAN filter
 */
int32_t can_async_set_filter(struct can_async_descriptor *const descr, uint8_t index, enum can_format fmt,
                             struct can_filter *filter)
{
    188c:	b590      	push	{r4, r7, lr}
    188e:	b085      	sub	sp, #20
    1890:	af00      	add	r7, sp, #0
    1892:	60f8      	str	r0, [r7, #12]
    1894:	607b      	str	r3, [r7, #4]
    1896:	460b      	mov	r3, r1
    1898:	72fb      	strb	r3, [r7, #11]
    189a:	4613      	mov	r3, r2
    189c:	72bb      	strb	r3, [r7, #10]
	ASSERT(descr);
    189e:	68fb      	ldr	r3, [r7, #12]
    18a0:	2b00      	cmp	r3, #0
    18a2:	bf14      	ite	ne
    18a4:	2301      	movne	r3, #1
    18a6:	2300      	moveq	r3, #0
    18a8:	b2db      	uxtb	r3, r3
    18aa:	22b8      	movs	r2, #184	; 0xb8
    18ac:	4907      	ldr	r1, [pc, #28]	; (18cc <can_async_set_filter+0x40>)
    18ae:	4618      	mov	r0, r3
    18b0:	4b07      	ldr	r3, [pc, #28]	; (18d0 <can_async_set_filter+0x44>)
    18b2:	4798      	blx	r3
	return _can_async_set_filter(&descr->dev, index, fmt, filter);
    18b4:	68f8      	ldr	r0, [r7, #12]
    18b6:	7aba      	ldrb	r2, [r7, #10]
    18b8:	7af9      	ldrb	r1, [r7, #11]
    18ba:	687b      	ldr	r3, [r7, #4]
    18bc:	4c05      	ldr	r4, [pc, #20]	; (18d4 <can_async_set_filter+0x48>)
    18be:	47a0      	blx	r4
    18c0:	4603      	mov	r3, r0
}
    18c2:	4618      	mov	r0, r3
    18c4:	3714      	adds	r7, #20
    18c6:	46bd      	mov	sp, r7
    18c8:	bd90      	pop	{r4, r7, pc}
    18ca:	bf00      	nop
    18cc:	00012e6c 	.word	0x00012e6c
    18d0:	00002ed9 	.word	0x00002ed9
    18d4:	00003b3d 	.word	0x00003b3d

000018d8 <can_tx_done>:

/**
 * \internal Callback of CAN Message Write finished
 */
static void can_tx_done(struct _can_async_device *dev)
{
    18d8:	b580      	push	{r7, lr}
    18da:	b084      	sub	sp, #16
    18dc:	af00      	add	r7, sp, #0
    18de:	6078      	str	r0, [r7, #4]
	struct can_async_descriptor *const descr = CONTAINER_OF(dev, struct can_async_descriptor, dev);
    18e0:	687b      	ldr	r3, [r7, #4]
    18e2:	60fb      	str	r3, [r7, #12]

	if (descr->cb.tx_done) {
    18e4:	68fb      	ldr	r3, [r7, #12]
    18e6:	69db      	ldr	r3, [r3, #28]
    18e8:	2b00      	cmp	r3, #0
    18ea:	d003      	beq.n	18f4 <can_tx_done+0x1c>
		descr->cb.tx_done(descr);
    18ec:	68fb      	ldr	r3, [r7, #12]
    18ee:	69db      	ldr	r3, [r3, #28]
    18f0:	68f8      	ldr	r0, [r7, #12]
    18f2:	4798      	blx	r3
	}
}
    18f4:	bf00      	nop
    18f6:	3710      	adds	r7, #16
    18f8:	46bd      	mov	sp, r7
    18fa:	bd80      	pop	{r7, pc}

000018fc <can_rx_done>:

/**
 * \internal Callback of CAN Message Read finished
 */
static void can_rx_done(struct _can_async_device *dev)
{
    18fc:	b580      	push	{r7, lr}
    18fe:	b084      	sub	sp, #16
    1900:	af00      	add	r7, sp, #0
    1902:	6078      	str	r0, [r7, #4]
	struct can_async_descriptor *const descr = CONTAINER_OF(dev, struct can_async_descriptor, dev);
    1904:	687b      	ldr	r3, [r7, #4]
    1906:	60fb      	str	r3, [r7, #12]

	if (descr->cb.rx_done) {
    1908:	68fb      	ldr	r3, [r7, #12]
    190a:	6a1b      	ldr	r3, [r3, #32]
    190c:	2b00      	cmp	r3, #0
    190e:	d003      	beq.n	1918 <can_rx_done+0x1c>
		descr->cb.rx_done(descr);
    1910:	68fb      	ldr	r3, [r7, #12]
    1912:	6a1b      	ldr	r3, [r3, #32]
    1914:	68f8      	ldr	r0, [r7, #12]
    1916:	4798      	blx	r3
	}
}
    1918:	bf00      	nop
    191a:	3710      	adds	r7, #16
    191c:	46bd      	mov	sp, r7
    191e:	bd80      	pop	{r7, pc}

00001920 <can_irq_handler>:

/**
 * \internal Callback of CAN Interrupt
 */
static void can_irq_handler(struct _can_async_device *dev, enum can_async_interrupt_type type)
{
    1920:	b580      	push	{r7, lr}
    1922:	b084      	sub	sp, #16
    1924:	af00      	add	r7, sp, #0
    1926:	6078      	str	r0, [r7, #4]
    1928:	460b      	mov	r3, r1
    192a:	70fb      	strb	r3, [r7, #3]
	struct can_async_descriptor *const descr = CONTAINER_OF(dev, struct can_async_descriptor, dev);
    192c:	687b      	ldr	r3, [r7, #4]
    192e:	60fb      	str	r3, [r7, #12]

	if (descr->cb.irq_handler) {
    1930:	68fb      	ldr	r3, [r7, #12]
    1932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    1934:	2b00      	cmp	r3, #0
    1936:	d005      	beq.n	1944 <can_irq_handler+0x24>
		descr->cb.irq_handler(descr, type);
    1938:	68fb      	ldr	r3, [r7, #12]
    193a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    193c:	78fa      	ldrb	r2, [r7, #3]
    193e:	4611      	mov	r1, r2
    1940:	68f8      	ldr	r0, [r7, #12]
    1942:	4798      	blx	r3
	}
}
    1944:	bf00      	nop
    1946:	3710      	adds	r7, #16
    1948:	46bd      	mov	sp, r7
    194a:	bd80      	pop	{r7, pc}

0000194c <crc_sync_init>:

/**
 * \brief Initialize CRC.
 */
int32_t crc_sync_init(struct crc_sync_descriptor *const descr, void *const hw)
{
    194c:	b580      	push	{r7, lr}
    194e:	b082      	sub	sp, #8
    1950:	af00      	add	r7, sp, #0
    1952:	6078      	str	r0, [r7, #4]
    1954:	6039      	str	r1, [r7, #0]
	ASSERT(descr && hw);
    1956:	687b      	ldr	r3, [r7, #4]
    1958:	2b00      	cmp	r3, #0
    195a:	d004      	beq.n	1966 <crc_sync_init+0x1a>
    195c:	683b      	ldr	r3, [r7, #0]
    195e:	2b00      	cmp	r3, #0
    1960:	d001      	beq.n	1966 <crc_sync_init+0x1a>
    1962:	2301      	movs	r3, #1
    1964:	e000      	b.n	1968 <crc_sync_init+0x1c>
    1966:	2300      	movs	r3, #0
    1968:	f003 0301 	and.w	r3, r3, #1
    196c:	b2db      	uxtb	r3, r3
    196e:	222b      	movs	r2, #43	; 0x2b
    1970:	4906      	ldr	r1, [pc, #24]	; (198c <crc_sync_init+0x40>)
    1972:	4618      	mov	r0, r3
    1974:	4b06      	ldr	r3, [pc, #24]	; (1990 <crc_sync_init+0x44>)
    1976:	4798      	blx	r3

	return _crc_sync_init(&descr->dev, hw);
    1978:	687b      	ldr	r3, [r7, #4]
    197a:	6839      	ldr	r1, [r7, #0]
    197c:	4618      	mov	r0, r3
    197e:	4b05      	ldr	r3, [pc, #20]	; (1994 <crc_sync_init+0x48>)
    1980:	4798      	blx	r3
    1982:	4603      	mov	r3, r0
}
    1984:	4618      	mov	r0, r3
    1986:	3708      	adds	r7, #8
    1988:	46bd      	mov	sp, r7
    198a:	bd80      	pop	{r7, pc}
    198c:	00012e88 	.word	0x00012e88
    1990:	00002ed9 	.word	0x00002ed9
    1994:	000040bd 	.word	0x000040bd

00001998 <delay_us>:

/**
 * \brief Perform delay in us
 */
void delay_us(const uint16_t us)
{
    1998:	b590      	push	{r4, r7, lr}
    199a:	b083      	sub	sp, #12
    199c:	af00      	add	r7, sp, #0
    199e:	4603      	mov	r3, r0
    19a0:	80fb      	strh	r3, [r7, #6]
	_delay_cycles(hardware, _get_cycles_for_us(us));
    19a2:	4b07      	ldr	r3, [pc, #28]	; (19c0 <delay_us+0x28>)
    19a4:	681c      	ldr	r4, [r3, #0]
    19a6:	88fb      	ldrh	r3, [r7, #6]
    19a8:	4618      	mov	r0, r3
    19aa:	4b06      	ldr	r3, [pc, #24]	; (19c4 <delay_us+0x2c>)
    19ac:	4798      	blx	r3
    19ae:	4603      	mov	r3, r0
    19b0:	4619      	mov	r1, r3
    19b2:	4620      	mov	r0, r4
    19b4:	4b04      	ldr	r3, [pc, #16]	; (19c8 <delay_us+0x30>)
    19b6:	4798      	blx	r3
}
    19b8:	bf00      	nop
    19ba:	370c      	adds	r7, #12
    19bc:	46bd      	mov	sp, r7
    19be:	bd90      	pop	{r4, r7, pc}
    19c0:	20000aac 	.word	0x20000aac
    19c4:	00003e15 	.word	0x00003e15
    19c8:	00003fa9 	.word	0x00003fa9

000019cc <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
    19cc:	b590      	push	{r4, r7, lr}
    19ce:	b083      	sub	sp, #12
    19d0:	af00      	add	r7, sp, #0
    19d2:	4603      	mov	r3, r0
    19d4:	80fb      	strh	r3, [r7, #6]
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
    19d6:	4b07      	ldr	r3, [pc, #28]	; (19f4 <delay_ms+0x28>)
    19d8:	681c      	ldr	r4, [r3, #0]
    19da:	88fb      	ldrh	r3, [r7, #6]
    19dc:	4618      	mov	r0, r3
    19de:	4b06      	ldr	r3, [pc, #24]	; (19f8 <delay_ms+0x2c>)
    19e0:	4798      	blx	r3
    19e2:	4603      	mov	r3, r0
    19e4:	4619      	mov	r1, r3
    19e6:	4620      	mov	r0, r4
    19e8:	4b04      	ldr	r3, [pc, #16]	; (19fc <delay_ms+0x30>)
    19ea:	4798      	blx	r3
}
    19ec:	bf00      	nop
    19ee:	370c      	adds	r7, #12
    19f0:	46bd      	mov	sp, r7
    19f2:	bd90      	pop	{r4, r7, pc}
    19f4:	20000aac 	.word	0x20000aac
    19f8:	00003f81 	.word	0x00003f81
    19fc:	00003fa9 	.word	0x00003fa9

00001a00 <event_system_init>:

/**
 * \brief Initialize event system.
 */
int32_t event_system_init(void)
{
    1a00:	b580      	push	{r7, lr}
    1a02:	af00      	add	r7, sp, #0
	return _event_system_init();
    1a04:	4b02      	ldr	r3, [pc, #8]	; (1a10 <event_system_init+0x10>)
    1a06:	4798      	blx	r3
    1a08:	4603      	mov	r3, r0
}
    1a0a:	4618      	mov	r0, r3
    1a0c:	bd80      	pop	{r7, pc}
    1a0e:	bf00      	nop
    1a10:	000046f1 	.word	0x000046f1

00001a14 <ext_irq_init>:

/**
 * \brief Initialize external irq component if any
 */
int32_t ext_irq_init(void)
{
    1a14:	b580      	push	{r7, lr}
    1a16:	b082      	sub	sp, #8
    1a18:	af00      	add	r7, sp, #0
	uint16_t i;

	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    1a1a:	2300      	movs	r3, #0
    1a1c:	80fb      	strh	r3, [r7, #6]
    1a1e:	e00e      	b.n	1a3e <ext_irq_init+0x2a>
		ext_irqs[i].pin = 0xFFFFFFFF;
    1a20:	88fb      	ldrh	r3, [r7, #6]
    1a22:	4a0c      	ldr	r2, [pc, #48]	; (1a54 <ext_irq_init+0x40>)
    1a24:	00db      	lsls	r3, r3, #3
    1a26:	4413      	add	r3, r2
    1a28:	f04f 32ff 	mov.w	r2, #4294967295
    1a2c:	605a      	str	r2, [r3, #4]
		ext_irqs[i].cb  = NULL;
    1a2e:	88fb      	ldrh	r3, [r7, #6]
    1a30:	4a08      	ldr	r2, [pc, #32]	; (1a54 <ext_irq_init+0x40>)
    1a32:	2100      	movs	r1, #0
    1a34:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    1a38:	88fb      	ldrh	r3, [r7, #6]
    1a3a:	3301      	adds	r3, #1
    1a3c:	80fb      	strh	r3, [r7, #6]
    1a3e:	88fb      	ldrh	r3, [r7, #6]
    1a40:	2b03      	cmp	r3, #3
    1a42:	d9ed      	bls.n	1a20 <ext_irq_init+0xc>
	}

	return _ext_irq_init(process_ext_irq);
    1a44:	4804      	ldr	r0, [pc, #16]	; (1a58 <ext_irq_init+0x44>)
    1a46:	4b05      	ldr	r3, [pc, #20]	; (1a5c <ext_irq_init+0x48>)
    1a48:	4798      	blx	r3
    1a4a:	4603      	mov	r3, r0
}
    1a4c:	4618      	mov	r0, r3
    1a4e:	3708      	adds	r7, #8
    1a50:	46bd      	mov	sp, r7
    1a52:	bd80      	pop	{r7, pc}
    1a54:	20000ab0 	.word	0x20000ab0
    1a58:	00001a61 	.word	0x00001a61
    1a5c:	000043c5 	.word	0x000043c5

00001a60 <process_ext_irq>:
 * \brief Interrupt processing routine
 *
 * \param[in] pin The pin which triggered the interrupt
 */
static void process_ext_irq(const uint32_t pin)
{
    1a60:	b580      	push	{r7, lr}
    1a62:	b084      	sub	sp, #16
    1a64:	af00      	add	r7, sp, #0
    1a66:	6078      	str	r0, [r7, #4]
	uint8_t lower = 0, middle, upper = EXT_IRQ_AMOUNT;
    1a68:	2300      	movs	r3, #0
    1a6a:	73fb      	strb	r3, [r7, #15]
    1a6c:	2304      	movs	r3, #4
    1a6e:	73bb      	strb	r3, [r7, #14]

	while (upper >= lower) {
    1a70:	e02a      	b.n	1ac8 <process_ext_irq+0x68>
		middle = (upper + lower) >> 1;
    1a72:	7bba      	ldrb	r2, [r7, #14]
    1a74:	7bfb      	ldrb	r3, [r7, #15]
    1a76:	4413      	add	r3, r2
    1a78:	105b      	asrs	r3, r3, #1
    1a7a:	737b      	strb	r3, [r7, #13]
		if (middle >= EXT_IRQ_AMOUNT) {
    1a7c:	7b7b      	ldrb	r3, [r7, #13]
    1a7e:	2b03      	cmp	r3, #3
    1a80:	d827      	bhi.n	1ad2 <process_ext_irq+0x72>
			return;
		}

		if (ext_irqs[middle].pin == pin) {
    1a82:	7b7b      	ldrb	r3, [r7, #13]
    1a84:	4a16      	ldr	r2, [pc, #88]	; (1ae0 <process_ext_irq+0x80>)
    1a86:	00db      	lsls	r3, r3, #3
    1a88:	4413      	add	r3, r2
    1a8a:	685a      	ldr	r2, [r3, #4]
    1a8c:	687b      	ldr	r3, [r7, #4]
    1a8e:	429a      	cmp	r2, r3
    1a90:	d10b      	bne.n	1aaa <process_ext_irq+0x4a>
			if (ext_irqs[middle].cb) {
    1a92:	7b7b      	ldrb	r3, [r7, #13]
    1a94:	4a12      	ldr	r2, [pc, #72]	; (1ae0 <process_ext_irq+0x80>)
    1a96:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    1a9a:	2b00      	cmp	r3, #0
    1a9c:	d01b      	beq.n	1ad6 <process_ext_irq+0x76>
				ext_irqs[middle].cb();
    1a9e:	7b7b      	ldrb	r3, [r7, #13]
    1aa0:	4a0f      	ldr	r2, [pc, #60]	; (1ae0 <process_ext_irq+0x80>)
    1aa2:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    1aa6:	4798      	blx	r3
			}
			return;
    1aa8:	e015      	b.n	1ad6 <process_ext_irq+0x76>
		}

		if (ext_irqs[middle].pin < pin) {
    1aaa:	7b7b      	ldrb	r3, [r7, #13]
    1aac:	4a0c      	ldr	r2, [pc, #48]	; (1ae0 <process_ext_irq+0x80>)
    1aae:	00db      	lsls	r3, r3, #3
    1ab0:	4413      	add	r3, r2
    1ab2:	685a      	ldr	r2, [r3, #4]
    1ab4:	687b      	ldr	r3, [r7, #4]
    1ab6:	429a      	cmp	r2, r3
    1ab8:	d203      	bcs.n	1ac2 <process_ext_irq+0x62>
			lower = middle + 1;
    1aba:	7b7b      	ldrb	r3, [r7, #13]
    1abc:	3301      	adds	r3, #1
    1abe:	73fb      	strb	r3, [r7, #15]
    1ac0:	e002      	b.n	1ac8 <process_ext_irq+0x68>
		} else {
			upper = middle - 1;
    1ac2:	7b7b      	ldrb	r3, [r7, #13]
    1ac4:	3b01      	subs	r3, #1
    1ac6:	73bb      	strb	r3, [r7, #14]
	while (upper >= lower) {
    1ac8:	7bba      	ldrb	r2, [r7, #14]
    1aca:	7bfb      	ldrb	r3, [r7, #15]
    1acc:	429a      	cmp	r2, r3
    1ace:	d2d0      	bcs.n	1a72 <process_ext_irq+0x12>
    1ad0:	e002      	b.n	1ad8 <process_ext_irq+0x78>
			return;
    1ad2:	bf00      	nop
    1ad4:	e000      	b.n	1ad8 <process_ext_irq+0x78>
			return;
    1ad6:	bf00      	nop
		}
	}
}
    1ad8:	3710      	adds	r7, #16
    1ada:	46bd      	mov	sp, r7
    1adc:	bd80      	pop	{r7, pc}
    1ade:	bf00      	nop
    1ae0:	20000ab0 	.word	0x20000ab0

00001ae4 <i2c_tx_complete>:

/**
 * \brief Callback function for tx complete
 */
static void i2c_tx_complete(struct _i2c_m_async_device *const i2c_dev)
{
    1ae4:	b580      	push	{r7, lr}
    1ae6:	b084      	sub	sp, #16
    1ae8:	af00      	add	r7, sp, #0
    1aea:	6078      	str	r0, [r7, #4]
	struct i2c_m_async_desc *i2c = CONTAINER_OF(i2c_dev, struct i2c_m_async_desc, device);
    1aec:	687b      	ldr	r3, [r7, #4]
    1aee:	60fb      	str	r3, [r7, #12]

	if (!(i2c_dev->service.msg.flags & I2C_M_BUSY)) {
    1af0:	687b      	ldr	r3, [r7, #4]
    1af2:	885b      	ldrh	r3, [r3, #2]
    1af4:	b29b      	uxth	r3, r3
    1af6:	f403 7380 	and.w	r3, r3, #256	; 0x100
    1afa:	2b00      	cmp	r3, #0
    1afc:	d107      	bne.n	1b0e <i2c_tx_complete+0x2a>
		if (i2c->i2c_cb.tx_complete) {
    1afe:	68fb      	ldr	r3, [r7, #12]
    1b00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    1b02:	2b00      	cmp	r3, #0
    1b04:	d003      	beq.n	1b0e <i2c_tx_complete+0x2a>
			i2c->i2c_cb.tx_complete(i2c);
    1b06:	68fb      	ldr	r3, [r7, #12]
    1b08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    1b0a:	68f8      	ldr	r0, [r7, #12]
    1b0c:	4798      	blx	r3
		}
	}
}
    1b0e:	bf00      	nop
    1b10:	3710      	adds	r7, #16
    1b12:	46bd      	mov	sp, r7
    1b14:	bd80      	pop	{r7, pc}

00001b16 <i2c_rx_complete>:

/**
 * \brief Callback function for rx complete
 */
static void i2c_rx_complete(struct _i2c_m_async_device *const i2c_dev)
{
    1b16:	b580      	push	{r7, lr}
    1b18:	b084      	sub	sp, #16
    1b1a:	af00      	add	r7, sp, #0
    1b1c:	6078      	str	r0, [r7, #4]
	struct i2c_m_async_desc *i2c = CONTAINER_OF(i2c_dev, struct i2c_m_async_desc, device);
    1b1e:	687b      	ldr	r3, [r7, #4]
    1b20:	60fb      	str	r3, [r7, #12]

	if (!(i2c_dev->service.msg.flags & I2C_M_BUSY)) {
    1b22:	687b      	ldr	r3, [r7, #4]
    1b24:	885b      	ldrh	r3, [r3, #2]
    1b26:	b29b      	uxth	r3, r3
    1b28:	f403 7380 	and.w	r3, r3, #256	; 0x100
    1b2c:	2b00      	cmp	r3, #0
    1b2e:	d107      	bne.n	1b40 <i2c_rx_complete+0x2a>
		if (i2c->i2c_cb.rx_complete) {
    1b30:	68fb      	ldr	r3, [r7, #12]
    1b32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    1b34:	2b00      	cmp	r3, #0
    1b36:	d003      	beq.n	1b40 <i2c_rx_complete+0x2a>
			i2c->i2c_cb.rx_complete(i2c);
    1b38:	68fb      	ldr	r3, [r7, #12]
    1b3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    1b3c:	68f8      	ldr	r0, [r7, #12]
    1b3e:	4798      	blx	r3
		}
	}
}
    1b40:	bf00      	nop
    1b42:	3710      	adds	r7, #16
    1b44:	46bd      	mov	sp, r7
    1b46:	bd80      	pop	{r7, pc}

00001b48 <i2c_error>:

static void i2c_error(struct _i2c_m_async_device *const i2c_dev, int32_t error)
{
    1b48:	b580      	push	{r7, lr}
    1b4a:	b084      	sub	sp, #16
    1b4c:	af00      	add	r7, sp, #0
    1b4e:	6078      	str	r0, [r7, #4]
    1b50:	6039      	str	r1, [r7, #0]
	struct i2c_m_async_desc *i2c = CONTAINER_OF(i2c_dev, struct i2c_m_async_desc, device);
    1b52:	687b      	ldr	r3, [r7, #4]
    1b54:	60fb      	str	r3, [r7, #12]

	if (!(i2c_dev->service.msg.flags & I2C_M_BUSY)) {
    1b56:	687b      	ldr	r3, [r7, #4]
    1b58:	885b      	ldrh	r3, [r3, #2]
    1b5a:	b29b      	uxth	r3, r3
    1b5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
    1b60:	2b00      	cmp	r3, #0
    1b62:	d108      	bne.n	1b76 <i2c_error+0x2e>
		if (i2c->i2c_cb.error) {
    1b64:	68fb      	ldr	r3, [r7, #12]
    1b66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    1b68:	2b00      	cmp	r3, #0
    1b6a:	d004      	beq.n	1b76 <i2c_error+0x2e>
			i2c->i2c_cb.error(i2c, error);
    1b6c:	68fb      	ldr	r3, [r7, #12]
    1b6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    1b70:	6839      	ldr	r1, [r7, #0]
    1b72:	68f8      	ldr	r0, [r7, #12]
    1b74:	4798      	blx	r3
		}
	}
}
    1b76:	bf00      	nop
    1b78:	3710      	adds	r7, #16
    1b7a:	46bd      	mov	sp, r7
    1b7c:	bd80      	pop	{r7, pc}
	...

00001b80 <i2c_m_async_read>:

/**
 * \brief Async version of I2C I/O read
 */
static int32_t i2c_m_async_read(struct io_descriptor *const io, uint8_t *buf, const uint16_t n)
{
    1b80:	b580      	push	{r7, lr}
    1b82:	b08a      	sub	sp, #40	; 0x28
    1b84:	af00      	add	r7, sp, #0
    1b86:	60f8      	str	r0, [r7, #12]
    1b88:	60b9      	str	r1, [r7, #8]
    1b8a:	4613      	mov	r3, r2
    1b8c:	80fb      	strh	r3, [r7, #6]
	struct i2c_m_async_desc *i2c = CONTAINER_OF(io, struct i2c_m_async_desc, io);
    1b8e:	68fb      	ldr	r3, [r7, #12]
    1b90:	3b28      	subs	r3, #40	; 0x28
    1b92:	627b      	str	r3, [r7, #36]	; 0x24
	struct _i2c_m_msg        msg;
	int32_t                  ret;

	msg.addr   = i2c->slave_addr;
    1b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1b96:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
    1b98:	82bb      	strh	r3, [r7, #20]
	msg.len    = n;
    1b9a:	88fb      	ldrh	r3, [r7, #6]
    1b9c:	61bb      	str	r3, [r7, #24]
	msg.flags  = I2C_M_STOP | I2C_M_RD;
    1b9e:	f248 0301 	movw	r3, #32769	; 0x8001
    1ba2:	82fb      	strh	r3, [r7, #22]
	msg.buffer = buf;
    1ba4:	68bb      	ldr	r3, [r7, #8]
    1ba6:	61fb      	str	r3, [r7, #28]

	/* start transfer then return */
	ret = _i2c_m_async_transfer(&i2c->device, &msg);
    1ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1baa:	f107 0214 	add.w	r2, r7, #20
    1bae:	4611      	mov	r1, r2
    1bb0:	4618      	mov	r0, r3
    1bb2:	4b06      	ldr	r3, [pc, #24]	; (1bcc <i2c_m_async_read+0x4c>)
    1bb4:	4798      	blx	r3
    1bb6:	6238      	str	r0, [r7, #32]

	if (ret != 0) {
    1bb8:	6a3b      	ldr	r3, [r7, #32]
    1bba:	2b00      	cmp	r3, #0
    1bbc:	d001      	beq.n	1bc2 <i2c_m_async_read+0x42>
		/* error occurred */
		return ret;
    1bbe:	6a3b      	ldr	r3, [r7, #32]
    1bc0:	e000      	b.n	1bc4 <i2c_m_async_read+0x44>
	}

	return (int32_t)n;
    1bc2:	88fb      	ldrh	r3, [r7, #6]
}
    1bc4:	4618      	mov	r0, r3
    1bc6:	3728      	adds	r7, #40	; 0x28
    1bc8:	46bd      	mov	sp, r7
    1bca:	bd80      	pop	{r7, pc}
    1bcc:	000064dd 	.word	0x000064dd

00001bd0 <i2c_m_async_write>:

/**
 * \brief Async version of I2C I/O write
 */
static int32_t i2c_m_async_write(struct io_descriptor *const io, const uint8_t *buf, const uint16_t n)
{
    1bd0:	b580      	push	{r7, lr}
    1bd2:	b08a      	sub	sp, #40	; 0x28
    1bd4:	af00      	add	r7, sp, #0
    1bd6:	60f8      	str	r0, [r7, #12]
    1bd8:	60b9      	str	r1, [r7, #8]
    1bda:	4613      	mov	r3, r2
    1bdc:	80fb      	strh	r3, [r7, #6]
	struct i2c_m_async_desc *i2c = CONTAINER_OF(io, struct i2c_m_async_desc, io);
    1bde:	68fb      	ldr	r3, [r7, #12]
    1be0:	3b28      	subs	r3, #40	; 0x28
    1be2:	627b      	str	r3, [r7, #36]	; 0x24
	struct _i2c_m_msg        msg;
	int32_t                  ret;

	msg.addr   = i2c->slave_addr;
    1be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1be6:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
    1be8:	82bb      	strh	r3, [r7, #20]
	msg.len    = n;
    1bea:	88fb      	ldrh	r3, [r7, #6]
    1bec:	61bb      	str	r3, [r7, #24]
	msg.flags  = I2C_M_STOP;
    1bee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    1bf2:	82fb      	strh	r3, [r7, #22]
	msg.buffer = (uint8_t *)buf;
    1bf4:	68bb      	ldr	r3, [r7, #8]
    1bf6:	61fb      	str	r3, [r7, #28]

	/* start transfer then return */
	ret = _i2c_m_async_transfer(&i2c->device, &msg);
    1bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1bfa:	f107 0214 	add.w	r2, r7, #20
    1bfe:	4611      	mov	r1, r2
    1c00:	4618      	mov	r0, r3
    1c02:	4b06      	ldr	r3, [pc, #24]	; (1c1c <i2c_m_async_write+0x4c>)
    1c04:	4798      	blx	r3
    1c06:	6238      	str	r0, [r7, #32]

	if (ret != 0) {
    1c08:	6a3b      	ldr	r3, [r7, #32]
    1c0a:	2b00      	cmp	r3, #0
    1c0c:	d001      	beq.n	1c12 <i2c_m_async_write+0x42>
		/* error occurred */
		return ret;
    1c0e:	6a3b      	ldr	r3, [r7, #32]
    1c10:	e000      	b.n	1c14 <i2c_m_async_write+0x44>
	}

	return (int32_t)n;
    1c12:	88fb      	ldrh	r3, [r7, #6]
}
    1c14:	4618      	mov	r0, r3
    1c16:	3728      	adds	r7, #40	; 0x28
    1c18:	46bd      	mov	sp, r7
    1c1a:	bd80      	pop	{r7, pc}
    1c1c:	000064dd 	.word	0x000064dd

00001c20 <i2c_m_async_init>:

/**
 * \brief Async version of i2c initialize
 */
int32_t i2c_m_async_init(struct i2c_m_async_desc *const i2c, void *const hw)
{
    1c20:	b580      	push	{r7, lr}
    1c22:	b084      	sub	sp, #16
    1c24:	af00      	add	r7, sp, #0
    1c26:	6078      	str	r0, [r7, #4]
    1c28:	6039      	str	r1, [r7, #0]
	int32_t init_status;
	ASSERT(i2c);
    1c2a:	687b      	ldr	r3, [r7, #4]
    1c2c:	2b00      	cmp	r3, #0
    1c2e:	bf14      	ite	ne
    1c30:	2301      	movne	r3, #1
    1c32:	2300      	moveq	r3, #0
    1c34:	b2db      	uxtb	r3, r3
    1c36:	2289      	movs	r2, #137	; 0x89
    1c38:	4915      	ldr	r1, [pc, #84]	; (1c90 <i2c_m_async_init+0x70>)
    1c3a:	4618      	mov	r0, r3
    1c3c:	4b15      	ldr	r3, [pc, #84]	; (1c94 <i2c_m_async_init+0x74>)
    1c3e:	4798      	blx	r3

	init_status = _i2c_m_async_init(&i2c->device, hw);
    1c40:	687b      	ldr	r3, [r7, #4]
    1c42:	6839      	ldr	r1, [r7, #0]
    1c44:	4618      	mov	r0, r3
    1c46:	4b14      	ldr	r3, [pc, #80]	; (1c98 <i2c_m_async_init+0x78>)
    1c48:	4798      	blx	r3
    1c4a:	60f8      	str	r0, [r7, #12]
	if (init_status) {
    1c4c:	68fb      	ldr	r3, [r7, #12]
    1c4e:	2b00      	cmp	r3, #0
    1c50:	d001      	beq.n	1c56 <i2c_m_async_init+0x36>
		return init_status;
    1c52:	68fb      	ldr	r3, [r7, #12]
    1c54:	e018      	b.n	1c88 <i2c_m_async_init+0x68>
	}
	/* Init I/O */
	i2c->io.read  = i2c_m_async_read;
    1c56:	687b      	ldr	r3, [r7, #4]
    1c58:	4a10      	ldr	r2, [pc, #64]	; (1c9c <i2c_m_async_init+0x7c>)
    1c5a:	62da      	str	r2, [r3, #44]	; 0x2c
	i2c->io.write = i2c_m_async_write;
    1c5c:	687b      	ldr	r3, [r7, #4]
    1c5e:	4a10      	ldr	r2, [pc, #64]	; (1ca0 <i2c_m_async_init+0x80>)
    1c60:	629a      	str	r2, [r3, #40]	; 0x28

	/* Init callbacks */
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_TX_COMPLETE, (FUNC_PTR)i2c_tx_complete);
    1c62:	687b      	ldr	r3, [r7, #4]
    1c64:	4a0f      	ldr	r2, [pc, #60]	; (1ca4 <i2c_m_async_init+0x84>)
    1c66:	2101      	movs	r1, #1
    1c68:	4618      	mov	r0, r3
    1c6a:	4b0f      	ldr	r3, [pc, #60]	; (1ca8 <i2c_m_async_init+0x88>)
    1c6c:	4798      	blx	r3
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_RX_COMPLETE, (FUNC_PTR)i2c_rx_complete);
    1c6e:	687b      	ldr	r3, [r7, #4]
    1c70:	4a0e      	ldr	r2, [pc, #56]	; (1cac <i2c_m_async_init+0x8c>)
    1c72:	2102      	movs	r1, #2
    1c74:	4618      	mov	r0, r3
    1c76:	4b0c      	ldr	r3, [pc, #48]	; (1ca8 <i2c_m_async_init+0x88>)
    1c78:	4798      	blx	r3
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_ERROR, (FUNC_PTR)i2c_error);
    1c7a:	687b      	ldr	r3, [r7, #4]
    1c7c:	4a0c      	ldr	r2, [pc, #48]	; (1cb0 <i2c_m_async_init+0x90>)
    1c7e:	2100      	movs	r1, #0
    1c80:	4618      	mov	r0, r3
    1c82:	4b09      	ldr	r3, [pc, #36]	; (1ca8 <i2c_m_async_init+0x88>)
    1c84:	4798      	blx	r3

	return ERR_NONE;
    1c86:	2300      	movs	r3, #0
}
    1c88:	4618      	mov	r0, r3
    1c8a:	3710      	adds	r7, #16
    1c8c:	46bd      	mov	sp, r7
    1c8e:	bd80      	pop	{r7, pc}
    1c90:	00012ea4 	.word	0x00012ea4
    1c94:	00002ed9 	.word	0x00002ed9
    1c98:	0000632d 	.word	0x0000632d
    1c9c:	00001b81 	.word	0x00001b81
    1ca0:	00001bd1 	.word	0x00001bd1
    1ca4:	00001ae5 	.word	0x00001ae5
    1ca8:	000065b1 	.word	0x000065b1
    1cac:	00001b17 	.word	0x00001b17
    1cb0:	00001b49 	.word	0x00001b49

00001cb4 <pwm_init>:

/**
 * \brief Initialize pwm
 */
int32_t pwm_init(struct pwm_descriptor *const descr, void *const hw, struct _pwm_hpl_interface *const func)
{
    1cb4:	b580      	push	{r7, lr}
    1cb6:	b084      	sub	sp, #16
    1cb8:	af00      	add	r7, sp, #0
    1cba:	60f8      	str	r0, [r7, #12]
    1cbc:	60b9      	str	r1, [r7, #8]
    1cbe:	607a      	str	r2, [r7, #4]
	ASSERT(descr && hw);
    1cc0:	68fb      	ldr	r3, [r7, #12]
    1cc2:	2b00      	cmp	r3, #0
    1cc4:	d004      	beq.n	1cd0 <pwm_init+0x1c>
    1cc6:	68bb      	ldr	r3, [r7, #8]
    1cc8:	2b00      	cmp	r3, #0
    1cca:	d001      	beq.n	1cd0 <pwm_init+0x1c>
    1ccc:	2301      	movs	r3, #1
    1cce:	e000      	b.n	1cd2 <pwm_init+0x1e>
    1cd0:	2300      	movs	r3, #0
    1cd2:	f003 0301 	and.w	r3, r3, #1
    1cd6:	b2db      	uxtb	r3, r3
    1cd8:	2233      	movs	r2, #51	; 0x33
    1cda:	490a      	ldr	r1, [pc, #40]	; (1d04 <pwm_init+0x50>)
    1cdc:	4618      	mov	r0, r3
    1cde:	4b0a      	ldr	r3, [pc, #40]	; (1d08 <pwm_init+0x54>)
    1ce0:	4798      	blx	r3
	_pwm_init(&descr->device, hw);
    1ce2:	68fb      	ldr	r3, [r7, #12]
    1ce4:	68b9      	ldr	r1, [r7, #8]
    1ce6:	4618      	mov	r0, r3
    1ce8:	4b08      	ldr	r3, [pc, #32]	; (1d0c <pwm_init+0x58>)
    1cea:	4798      	blx	r3
	descr->device.callback.pwm_period_cb = pwm_period_expired;
    1cec:	68fb      	ldr	r3, [r7, #12]
    1cee:	4a08      	ldr	r2, [pc, #32]	; (1d10 <pwm_init+0x5c>)
    1cf0:	601a      	str	r2, [r3, #0]
	descr->device.callback.pwm_error_cb  = pwm_detect_fault;
    1cf2:	68fb      	ldr	r3, [r7, #12]
    1cf4:	4a07      	ldr	r2, [pc, #28]	; (1d14 <pwm_init+0x60>)
    1cf6:	605a      	str	r2, [r3, #4]
	return ERR_NONE;
    1cf8:	2300      	movs	r3, #0
}
    1cfa:	4618      	mov	r0, r3
    1cfc:	3710      	adds	r7, #16
    1cfe:	46bd      	mov	sp, r7
    1d00:	bd80      	pop	{r7, pc}
    1d02:	bf00      	nop
    1d04:	00012ec4 	.word	0x00012ec4
    1d08:	00002ed9 	.word	0x00002ed9
    1d0c:	00007701 	.word	0x00007701
    1d10:	00001d19 	.word	0x00001d19
    1d14:	00001d3d 	.word	0x00001d3d

00001d18 <pwm_period_expired>:

/**
 * \internal Process interrupts caused by period experied
 */
static void pwm_period_expired(struct _pwm_device *device)
{
    1d18:	b580      	push	{r7, lr}
    1d1a:	b084      	sub	sp, #16
    1d1c:	af00      	add	r7, sp, #0
    1d1e:	6078      	str	r0, [r7, #4]
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);
    1d20:	687b      	ldr	r3, [r7, #4]
    1d22:	60fb      	str	r3, [r7, #12]

	if (descr->pwm_cb.period) {
    1d24:	68fb      	ldr	r3, [r7, #12]
    1d26:	695b      	ldr	r3, [r3, #20]
    1d28:	2b00      	cmp	r3, #0
    1d2a:	d003      	beq.n	1d34 <pwm_period_expired+0x1c>
		descr->pwm_cb.period(descr);
    1d2c:	68fb      	ldr	r3, [r7, #12]
    1d2e:	695b      	ldr	r3, [r3, #20]
    1d30:	68f8      	ldr	r0, [r7, #12]
    1d32:	4798      	blx	r3
	}
}
    1d34:	bf00      	nop
    1d36:	3710      	adds	r7, #16
    1d38:	46bd      	mov	sp, r7
    1d3a:	bd80      	pop	{r7, pc}

00001d3c <pwm_detect_fault>:

/**
 * \internal Process interrupts caused by pwm fault
 */
static void pwm_detect_fault(struct _pwm_device *device)
{
    1d3c:	b580      	push	{r7, lr}
    1d3e:	b084      	sub	sp, #16
    1d40:	af00      	add	r7, sp, #0
    1d42:	6078      	str	r0, [r7, #4]
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);
    1d44:	687b      	ldr	r3, [r7, #4]
    1d46:	60fb      	str	r3, [r7, #12]

	if (descr->pwm_cb.error) {
    1d48:	68fb      	ldr	r3, [r7, #12]
    1d4a:	699b      	ldr	r3, [r3, #24]
    1d4c:	2b00      	cmp	r3, #0
    1d4e:	d003      	beq.n	1d58 <pwm_detect_fault+0x1c>
		descr->pwm_cb.error(descr);
    1d50:	68fb      	ldr	r3, [r7, #12]
    1d52:	699b      	ldr	r3, [r3, #24]
    1d54:	68f8      	ldr	r0, [r7, #12]
    1d56:	4798      	blx	r3
	}
}
    1d58:	bf00      	nop
    1d5a:	3710      	adds	r7, #16
    1d5c:	46bd      	mov	sp, r7
    1d5e:	bd80      	pop	{r7, pc}

00001d60 <qspi_sync_init>:
 * \brief Driver version
 */
#define QSPI_SYNC_DRIVER_VERSION 0x00000001u

int32_t qspi_sync_init(struct qspi_sync_descriptor *qspi, void *const hw)
{
    1d60:	b580      	push	{r7, lr}
    1d62:	b082      	sub	sp, #8
    1d64:	af00      	add	r7, sp, #0
    1d66:	6078      	str	r0, [r7, #4]
    1d68:	6039      	str	r1, [r7, #0]
	ASSERT(qspi && hw);
    1d6a:	687b      	ldr	r3, [r7, #4]
    1d6c:	2b00      	cmp	r3, #0
    1d6e:	d004      	beq.n	1d7a <qspi_sync_init+0x1a>
    1d70:	683b      	ldr	r3, [r7, #0]
    1d72:	2b00      	cmp	r3, #0
    1d74:	d001      	beq.n	1d7a <qspi_sync_init+0x1a>
    1d76:	2301      	movs	r3, #1
    1d78:	e000      	b.n	1d7c <qspi_sync_init+0x1c>
    1d7a:	2300      	movs	r3, #0
    1d7c:	f003 0301 	and.w	r3, r3, #1
    1d80:	b2db      	uxtb	r3, r3
    1d82:	2231      	movs	r2, #49	; 0x31
    1d84:	4906      	ldr	r1, [pc, #24]	; (1da0 <qspi_sync_init+0x40>)
    1d86:	4618      	mov	r0, r3
    1d88:	4b06      	ldr	r3, [pc, #24]	; (1da4 <qspi_sync_init+0x44>)
    1d8a:	4798      	blx	r3

	return _qspi_sync_init(&qspi->dev, hw);
    1d8c:	687b      	ldr	r3, [r7, #4]
    1d8e:	6839      	ldr	r1, [r7, #0]
    1d90:	4618      	mov	r0, r3
    1d92:	4b05      	ldr	r3, [pc, #20]	; (1da8 <qspi_sync_init+0x48>)
    1d94:	4798      	blx	r3
    1d96:	4603      	mov	r3, r0
}
    1d98:	4618      	mov	r0, r3
    1d9a:	3708      	adds	r7, #8
    1d9c:	46bd      	mov	sp, r7
    1d9e:	bd80      	pop	{r7, pc}
    1da0:	00012edc 	.word	0x00012edc
    1da4:	00002ed9 	.word	0x00002ed9
    1da8:	00005271 	.word	0x00005271

00001dac <qspi_sync_enable>:

	return _qspi_sync_deinit(&qspi->dev);
}

int32_t qspi_sync_enable(struct qspi_sync_descriptor *qspi)
{
    1dac:	b580      	push	{r7, lr}
    1dae:	b082      	sub	sp, #8
    1db0:	af00      	add	r7, sp, #0
    1db2:	6078      	str	r0, [r7, #4]
	ASSERT(qspi);
    1db4:	687b      	ldr	r3, [r7, #4]
    1db6:	2b00      	cmp	r3, #0
    1db8:	bf14      	ite	ne
    1dba:	2301      	movne	r3, #1
    1dbc:	2300      	moveq	r3, #0
    1dbe:	b2db      	uxtb	r3, r3
    1dc0:	223f      	movs	r2, #63	; 0x3f
    1dc2:	4906      	ldr	r1, [pc, #24]	; (1ddc <qspi_sync_enable+0x30>)
    1dc4:	4618      	mov	r0, r3
    1dc6:	4b06      	ldr	r3, [pc, #24]	; (1de0 <qspi_sync_enable+0x34>)
    1dc8:	4798      	blx	r3

	return _qspi_sync_enable(&qspi->dev);
    1dca:	687b      	ldr	r3, [r7, #4]
    1dcc:	4618      	mov	r0, r3
    1dce:	4b05      	ldr	r3, [pc, #20]	; (1de4 <qspi_sync_enable+0x38>)
    1dd0:	4798      	blx	r3
    1dd2:	4603      	mov	r3, r0
}
    1dd4:	4618      	mov	r0, r3
    1dd6:	3708      	adds	r7, #8
    1dd8:	46bd      	mov	sp, r7
    1dda:	bd80      	pop	{r7, pc}
    1ddc:	00012edc 	.word	0x00012edc
    1de0:	00002ed9 	.word	0x00002ed9
    1de4:	000052e5 	.word	0x000052e5

00001de8 <qspi_sync_disable>:

int32_t qspi_sync_disable(struct qspi_sync_descriptor *qspi)
{
    1de8:	b580      	push	{r7, lr}
    1dea:	b082      	sub	sp, #8
    1dec:	af00      	add	r7, sp, #0
    1dee:	6078      	str	r0, [r7, #4]
	ASSERT(qspi);
    1df0:	687b      	ldr	r3, [r7, #4]
    1df2:	2b00      	cmp	r3, #0
    1df4:	bf14      	ite	ne
    1df6:	2301      	movne	r3, #1
    1df8:	2300      	moveq	r3, #0
    1dfa:	b2db      	uxtb	r3, r3
    1dfc:	2246      	movs	r2, #70	; 0x46
    1dfe:	4906      	ldr	r1, [pc, #24]	; (1e18 <qspi_sync_disable+0x30>)
    1e00:	4618      	mov	r0, r3
    1e02:	4b06      	ldr	r3, [pc, #24]	; (1e1c <qspi_sync_disable+0x34>)
    1e04:	4798      	blx	r3

	return _qspi_sync_disable(&qspi->dev);
    1e06:	687b      	ldr	r3, [r7, #4]
    1e08:	4618      	mov	r0, r3
    1e0a:	4b05      	ldr	r3, [pc, #20]	; (1e20 <qspi_sync_disable+0x38>)
    1e0c:	4798      	blx	r3
    1e0e:	4603      	mov	r3, r0
}
    1e10:	4618      	mov	r0, r3
    1e12:	3708      	adds	r7, #8
    1e14:	46bd      	mov	sp, r7
    1e16:	bd80      	pop	{r7, pc}
    1e18:	00012edc 	.word	0x00012edc
    1e1c:	00002ed9 	.word	0x00002ed9
    1e20:	00005309 	.word	0x00005309

00001e24 <qspi_sync_serial_run_command>:

int32_t qspi_sync_serial_run_command(struct qspi_sync_descriptor *qspi, const struct _qspi_command *cmd)
{
    1e24:	b580      	push	{r7, lr}
    1e26:	b082      	sub	sp, #8
    1e28:	af00      	add	r7, sp, #0
    1e2a:	6078      	str	r0, [r7, #4]
    1e2c:	6039      	str	r1, [r7, #0]
	ASSERT(qspi && cmd);
    1e2e:	687b      	ldr	r3, [r7, #4]
    1e30:	2b00      	cmp	r3, #0
    1e32:	d004      	beq.n	1e3e <qspi_sync_serial_run_command+0x1a>
    1e34:	683b      	ldr	r3, [r7, #0]
    1e36:	2b00      	cmp	r3, #0
    1e38:	d001      	beq.n	1e3e <qspi_sync_serial_run_command+0x1a>
    1e3a:	2301      	movs	r3, #1
    1e3c:	e000      	b.n	1e40 <qspi_sync_serial_run_command+0x1c>
    1e3e:	2300      	movs	r3, #0
    1e40:	f003 0301 	and.w	r3, r3, #1
    1e44:	b2db      	uxtb	r3, r3
    1e46:	224d      	movs	r2, #77	; 0x4d
    1e48:	4906      	ldr	r1, [pc, #24]	; (1e64 <qspi_sync_serial_run_command+0x40>)
    1e4a:	4618      	mov	r0, r3
    1e4c:	4b06      	ldr	r3, [pc, #24]	; (1e68 <qspi_sync_serial_run_command+0x44>)
    1e4e:	4798      	blx	r3

	return _qspi_sync_serial_run_command(&qspi->dev, cmd);
    1e50:	687b      	ldr	r3, [r7, #4]
    1e52:	6839      	ldr	r1, [r7, #0]
    1e54:	4618      	mov	r0, r3
    1e56:	4b05      	ldr	r3, [pc, #20]	; (1e6c <qspi_sync_serial_run_command+0x48>)
    1e58:	4798      	blx	r3
    1e5a:	4603      	mov	r3, r0
}
    1e5c:	4618      	mov	r0, r3
    1e5e:	3708      	adds	r7, #8
    1e60:	46bd      	mov	sp, r7
    1e62:	bd80      	pop	{r7, pc}
    1e64:	00012edc 	.word	0x00012edc
    1e68:	00002ed9 	.word	0x00002ed9
    1e6c:	00005455 	.word	0x00005455

00001e70 <_spi_dev_tx>:
/**
 *  \brief Callback for TX
 *  \param[in, out] dev Pointer to the SPI device instance.
 */
static void _spi_dev_tx(struct _spi_m_async_dev *dev)
{
    1e70:	b580      	push	{r7, lr}
    1e72:	b084      	sub	sp, #16
    1e74:	af00      	add	r7, sp, #0
    1e76:	6078      	str	r0, [r7, #4]
	struct spi_m_async_descriptor *spi = CONTAINER_OF(dev, struct spi_m_async_descriptor, dev);
    1e78:	687b      	ldr	r3, [r7, #4]
    1e7a:	3b04      	subs	r3, #4
    1e7c:	60fb      	str	r3, [r7, #12]

	if (!(dev->char_size > 1)) {
    1e7e:	687b      	ldr	r3, [r7, #4]
    1e80:	791b      	ldrb	r3, [r3, #4]
    1e82:	2b01      	cmp	r3, #1
    1e84:	d80e      	bhi.n	1ea4 <_spi_dev_tx+0x34>
		_spi_m_async_write_one(dev, spi->xfer.txbuf[spi->xfercnt++]);
    1e86:	68fb      	ldr	r3, [r7, #12]
    1e88:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    1e8a:	68fb      	ldr	r3, [r7, #12]
    1e8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    1e8e:	1c58      	adds	r0, r3, #1
    1e90:	68f9      	ldr	r1, [r7, #12]
    1e92:	6448      	str	r0, [r1, #68]	; 0x44
    1e94:	4413      	add	r3, r2
    1e96:	781b      	ldrb	r3, [r3, #0]
    1e98:	b29b      	uxth	r3, r3
    1e9a:	4619      	mov	r1, r3
    1e9c:	6878      	ldr	r0, [r7, #4]
    1e9e:	4b11      	ldr	r3, [pc, #68]	; (1ee4 <_spi_dev_tx+0x74>)
    1ea0:	4798      	blx	r3
    1ea2:	e00d      	b.n	1ec0 <_spi_dev_tx+0x50>
	} else {
		_spi_m_async_write_one(dev, ((uint16_t *)spi->xfer.txbuf)[spi->xfercnt++]);
    1ea4:	68fb      	ldr	r3, [r7, #12]
    1ea6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    1ea8:	68fb      	ldr	r3, [r7, #12]
    1eaa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    1eac:	1c58      	adds	r0, r3, #1
    1eae:	68f9      	ldr	r1, [r7, #12]
    1eb0:	6448      	str	r0, [r1, #68]	; 0x44
    1eb2:	005b      	lsls	r3, r3, #1
    1eb4:	4413      	add	r3, r2
    1eb6:	881b      	ldrh	r3, [r3, #0]
    1eb8:	4619      	mov	r1, r3
    1eba:	6878      	ldr	r0, [r7, #4]
    1ebc:	4b09      	ldr	r3, [pc, #36]	; (1ee4 <_spi_dev_tx+0x74>)
    1ebe:	4798      	blx	r3
	}

	if (spi->xfercnt == spi->xfer.size) {
    1ec0:	68fb      	ldr	r3, [r7, #12]
    1ec2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    1ec4:	68fb      	ldr	r3, [r7, #12]
    1ec6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    1ec8:	429a      	cmp	r2, r3
    1eca:	d107      	bne.n	1edc <_spi_dev_tx+0x6c>
		_spi_m_async_enable_tx(dev, false);
    1ecc:	2100      	movs	r1, #0
    1ece:	6878      	ldr	r0, [r7, #4]
    1ed0:	4b05      	ldr	r3, [pc, #20]	; (1ee8 <_spi_dev_tx+0x78>)
    1ed2:	4798      	blx	r3
		_spi_m_async_enable_tx_complete(dev, true);
    1ed4:	2101      	movs	r1, #1
    1ed6:	6878      	ldr	r0, [r7, #4]
    1ed8:	4b04      	ldr	r3, [pc, #16]	; (1eec <_spi_dev_tx+0x7c>)
    1eda:	4798      	blx	r3
	}
}
    1edc:	bf00      	nop
    1ede:	3710      	adds	r7, #16
    1ee0:	46bd      	mov	sp, r7
    1ee2:	bd80      	pop	{r7, pc}
    1ee4:	00007011 	.word	0x00007011
    1ee8:	00006ed5 	.word	0x00006ed5
    1eec:	00006fa9 	.word	0x00006fa9

00001ef0 <_spi_dev_rx>:
/**
 *  \brief Callback for RX
 *  \param[in, out] dev Pointer to the SPI device instance.
 */
static void _spi_dev_rx(struct _spi_m_async_dev *dev)
{
    1ef0:	b590      	push	{r4, r7, lr}
    1ef2:	b085      	sub	sp, #20
    1ef4:	af00      	add	r7, sp, #0
    1ef6:	6078      	str	r0, [r7, #4]
	struct spi_m_async_descriptor *spi = CONTAINER_OF(dev, struct spi_m_async_descriptor, dev);
    1ef8:	687b      	ldr	r3, [r7, #4]
    1efa:	3b04      	subs	r3, #4
    1efc:	60fb      	str	r3, [r7, #12]

	if (spi->xfer.rxbuf) {
    1efe:	68fb      	ldr	r3, [r7, #12]
    1f00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    1f02:	2b00      	cmp	r3, #0
    1f04:	d021      	beq.n	1f4a <_spi_dev_rx+0x5a>
		if (!(dev->char_size > 1)) {
    1f06:	687b      	ldr	r3, [r7, #4]
    1f08:	791b      	ldrb	r3, [r3, #4]
    1f0a:	2b01      	cmp	r3, #1
    1f0c:	d80e      	bhi.n	1f2c <_spi_dev_rx+0x3c>
			/* 8-bit or less */
			spi->xfer.rxbuf[spi->xfercnt++] = (uint8_t)_spi_m_async_read_one(dev);
    1f0e:	68fb      	ldr	r3, [r7, #12]
    1f10:	6bda      	ldr	r2, [r3, #60]	; 0x3c
    1f12:	68fb      	ldr	r3, [r7, #12]
    1f14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    1f16:	1c58      	adds	r0, r3, #1
    1f18:	68f9      	ldr	r1, [r7, #12]
    1f1a:	6448      	str	r0, [r1, #68]	; 0x44
    1f1c:	18d4      	adds	r4, r2, r3
    1f1e:	6878      	ldr	r0, [r7, #4]
    1f20:	4b2e      	ldr	r3, [pc, #184]	; (1fdc <_spi_dev_rx+0xec>)
    1f22:	4798      	blx	r3
    1f24:	4603      	mov	r3, r0
    1f26:	b2db      	uxtb	r3, r3
    1f28:	7023      	strb	r3, [r4, #0]
    1f2a:	e016      	b.n	1f5a <_spi_dev_rx+0x6a>
		} else {
			/* 9-bit or more */
			((uint16_t *)spi->xfer.rxbuf)[spi->xfercnt++] = (uint16_t)_spi_m_async_read_one(dev);
    1f2c:	68fb      	ldr	r3, [r7, #12]
    1f2e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
    1f30:	68fb      	ldr	r3, [r7, #12]
    1f32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    1f34:	1c58      	adds	r0, r3, #1
    1f36:	68f9      	ldr	r1, [r7, #12]
    1f38:	6448      	str	r0, [r1, #68]	; 0x44
    1f3a:	005b      	lsls	r3, r3, #1
    1f3c:	18d4      	adds	r4, r2, r3
    1f3e:	6878      	ldr	r0, [r7, #4]
    1f40:	4b26      	ldr	r3, [pc, #152]	; (1fdc <_spi_dev_rx+0xec>)
    1f42:	4798      	blx	r3
    1f44:	4603      	mov	r3, r0
    1f46:	8023      	strh	r3, [r4, #0]
    1f48:	e007      	b.n	1f5a <_spi_dev_rx+0x6a>
		}
	} else {
		/* dummy data read if rxbuf is NULL */
		_spi_m_async_read_one(dev);
    1f4a:	6878      	ldr	r0, [r7, #4]
    1f4c:	4b23      	ldr	r3, [pc, #140]	; (1fdc <_spi_dev_rx+0xec>)
    1f4e:	4798      	blx	r3
		spi->xfercnt++;
    1f50:	68fb      	ldr	r3, [r7, #12]
    1f52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    1f54:	1c5a      	adds	r2, r3, #1
    1f56:	68fb      	ldr	r3, [r7, #12]
    1f58:	645a      	str	r2, [r3, #68]	; 0x44
	}

	if (spi->xfercnt < spi->xfer.size) {
    1f5a:	68fb      	ldr	r3, [r7, #12]
    1f5c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    1f5e:	68fb      	ldr	r3, [r7, #12]
    1f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    1f62:	429a      	cmp	r2, r3
    1f64:	d226      	bcs.n	1fb4 <_spi_dev_rx+0xc4>
		if (spi->xfer.txbuf) {
    1f66:	68fb      	ldr	r3, [r7, #12]
    1f68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    1f6a:	2b00      	cmp	r3, #0
    1f6c:	d01b      	beq.n	1fa6 <_spi_dev_rx+0xb6>
			if (!(dev->char_size > 1)) {
    1f6e:	687b      	ldr	r3, [r7, #4]
    1f70:	791b      	ldrb	r3, [r3, #4]
    1f72:	2b01      	cmp	r3, #1
    1f74:	d80b      	bhi.n	1f8e <_spi_dev_rx+0x9e>
				_spi_m_async_write_one(dev, spi->xfer.txbuf[spi->xfercnt]);
    1f76:	68fb      	ldr	r3, [r7, #12]
    1f78:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    1f7a:	68fb      	ldr	r3, [r7, #12]
    1f7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    1f7e:	4413      	add	r3, r2
    1f80:	781b      	ldrb	r3, [r3, #0]
    1f82:	b29b      	uxth	r3, r3
    1f84:	4619      	mov	r1, r3
    1f86:	6878      	ldr	r0, [r7, #4]
    1f88:	4b15      	ldr	r3, [pc, #84]	; (1fe0 <_spi_dev_rx+0xf0>)
    1f8a:	4798      	blx	r3

		if (spi->callbacks.cb_xfer) {
			spi->callbacks.cb_xfer(spi);
		}
	}
}
    1f8c:	e022      	b.n	1fd4 <_spi_dev_rx+0xe4>
				_spi_m_async_write_one(dev, ((uint16_t *)spi->xfer.txbuf)[spi->xfercnt]);
    1f8e:	68fb      	ldr	r3, [r7, #12]
    1f90:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    1f92:	68fb      	ldr	r3, [r7, #12]
    1f94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    1f96:	005b      	lsls	r3, r3, #1
    1f98:	4413      	add	r3, r2
    1f9a:	881b      	ldrh	r3, [r3, #0]
    1f9c:	4619      	mov	r1, r3
    1f9e:	6878      	ldr	r0, [r7, #4]
    1fa0:	4b0f      	ldr	r3, [pc, #60]	; (1fe0 <_spi_dev_rx+0xf0>)
    1fa2:	4798      	blx	r3
}
    1fa4:	e016      	b.n	1fd4 <_spi_dev_rx+0xe4>
			_spi_m_async_write_one(dev, dev->dummy_byte);
    1fa6:	687b      	ldr	r3, [r7, #4]
    1fa8:	88db      	ldrh	r3, [r3, #6]
    1faa:	4619      	mov	r1, r3
    1fac:	6878      	ldr	r0, [r7, #4]
    1fae:	4b0c      	ldr	r3, [pc, #48]	; (1fe0 <_spi_dev_rx+0xf0>)
    1fb0:	4798      	blx	r3
}
    1fb2:	e00f      	b.n	1fd4 <_spi_dev_rx+0xe4>
		_spi_m_async_enable_rx(dev, false);
    1fb4:	2100      	movs	r1, #0
    1fb6:	6878      	ldr	r0, [r7, #4]
    1fb8:	4b0a      	ldr	r3, [pc, #40]	; (1fe4 <_spi_dev_rx+0xf4>)
    1fba:	4798      	blx	r3
		spi->stat = 0;
    1fbc:	68fb      	ldr	r3, [r7, #12]
    1fbe:	2200      	movs	r2, #0
    1fc0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
		if (spi->callbacks.cb_xfer) {
    1fc4:	68fb      	ldr	r3, [r7, #12]
    1fc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    1fc8:	2b00      	cmp	r3, #0
    1fca:	d003      	beq.n	1fd4 <_spi_dev_rx+0xe4>
			spi->callbacks.cb_xfer(spi);
    1fcc:	68fb      	ldr	r3, [r7, #12]
    1fce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    1fd0:	68f8      	ldr	r0, [r7, #12]
    1fd2:	4798      	blx	r3
}
    1fd4:	bf00      	nop
    1fd6:	3714      	adds	r7, #20
    1fd8:	46bd      	mov	sp, r7
    1fda:	bd90      	pop	{r4, r7, pc}
    1fdc:	00007069 	.word	0x00007069
    1fe0:	00007011 	.word	0x00007011
    1fe4:	00006f39 	.word	0x00006f39

00001fe8 <_spi_dev_complete>:
/**
 *  \brief Callback for complete
 *  \param[in, out] dev Pointer to the SPI device instance.
 */
static void _spi_dev_complete(struct _spi_m_async_dev *dev)
{
    1fe8:	b580      	push	{r7, lr}
    1fea:	b084      	sub	sp, #16
    1fec:	af00      	add	r7, sp, #0
    1fee:	6078      	str	r0, [r7, #4]
	struct spi_m_async_descriptor *spi = CONTAINER_OF(dev, struct spi_m_async_descriptor, dev);
    1ff0:	687b      	ldr	r3, [r7, #4]
    1ff2:	3b04      	subs	r3, #4
    1ff4:	60fb      	str	r3, [r7, #12]

	if (spi->xfercnt >= spi->xfer.size) {
    1ff6:	68fb      	ldr	r3, [r7, #12]
    1ff8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    1ffa:	68fb      	ldr	r3, [r7, #12]
    1ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    1ffe:	429a      	cmp	r2, r3
    2000:	d30f      	bcc.n	2022 <_spi_dev_complete+0x3a>
		_spi_m_async_enable_tx_complete(dev, false);
    2002:	2100      	movs	r1, #0
    2004:	6878      	ldr	r0, [r7, #4]
    2006:	4b09      	ldr	r3, [pc, #36]	; (202c <_spi_dev_complete+0x44>)
    2008:	4798      	blx	r3
		spi->stat = 0;
    200a:	68fb      	ldr	r3, [r7, #12]
    200c:	2200      	movs	r2, #0
    200e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

		if (spi->callbacks.cb_xfer) {
    2012:	68fb      	ldr	r3, [r7, #12]
    2014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    2016:	2b00      	cmp	r3, #0
    2018:	d003      	beq.n	2022 <_spi_dev_complete+0x3a>
			spi->callbacks.cb_xfer(spi);
    201a:	68fb      	ldr	r3, [r7, #12]
    201c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    201e:	68f8      	ldr	r0, [r7, #12]
    2020:	4798      	blx	r3
		}
	}
}
    2022:	bf00      	nop
    2024:	3710      	adds	r7, #16
    2026:	46bd      	mov	sp, r7
    2028:	bd80      	pop	{r7, pc}
    202a:	bf00      	nop
    202c:	00006fa9 	.word	0x00006fa9

00002030 <_spi_dev_error>:
 *  \brief Callback for error
 *  \param[in, out] dev Pointer to the SPI device instance.
 *  \param[in] status Error status.
 */
static void _spi_dev_error(struct _spi_m_async_dev *dev, int32_t status)
{
    2030:	b580      	push	{r7, lr}
    2032:	b084      	sub	sp, #16
    2034:	af00      	add	r7, sp, #0
    2036:	6078      	str	r0, [r7, #4]
    2038:	6039      	str	r1, [r7, #0]
	struct spi_m_async_descriptor *spi = CONTAINER_OF(dev, struct spi_m_async_descriptor, dev);
    203a:	687b      	ldr	r3, [r7, #4]
    203c:	3b04      	subs	r3, #4
    203e:	60fb      	str	r3, [r7, #12]

	_spi_m_async_enable_tx(dev, false);
    2040:	2100      	movs	r1, #0
    2042:	6878      	ldr	r0, [r7, #4]
    2044:	4b0d      	ldr	r3, [pc, #52]	; (207c <_spi_dev_error+0x4c>)
    2046:	4798      	blx	r3
	_spi_m_async_enable_rx(dev, false);
    2048:	2100      	movs	r1, #0
    204a:	6878      	ldr	r0, [r7, #4]
    204c:	4b0c      	ldr	r3, [pc, #48]	; (2080 <_spi_dev_error+0x50>)
    204e:	4798      	blx	r3
	_spi_m_async_enable_tx_complete(dev, false);
    2050:	2100      	movs	r1, #0
    2052:	6878      	ldr	r0, [r7, #4]
    2054:	4b0b      	ldr	r3, [pc, #44]	; (2084 <_spi_dev_error+0x54>)
    2056:	4798      	blx	r3
	spi->stat = 0;
    2058:	68fb      	ldr	r3, [r7, #12]
    205a:	2200      	movs	r2, #0
    205c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

	/* Invoke complete callback */
	if (spi->callbacks.cb_error) {
    2060:	68fb      	ldr	r3, [r7, #12]
    2062:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    2064:	2b00      	cmp	r3, #0
    2066:	d004      	beq.n	2072 <_spi_dev_error+0x42>
		spi->callbacks.cb_error(spi, status);
    2068:	68fb      	ldr	r3, [r7, #12]
    206a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    206c:	6839      	ldr	r1, [r7, #0]
    206e:	68f8      	ldr	r0, [r7, #12]
    2070:	4798      	blx	r3
	}
}
    2072:	bf00      	nop
    2074:	3710      	adds	r7, #16
    2076:	46bd      	mov	sp, r7
    2078:	bd80      	pop	{r7, pc}
    207a:	bf00      	nop
    207c:	00006ed5 	.word	0x00006ed5
    2080:	00006f39 	.word	0x00006f39
    2084:	00006fa9 	.word	0x00006fa9

00002088 <spi_m_async_init>:
	ASSERT(spi);
	spi->func = (struct _spi_m_async_hpl_interface *)func;
}

int32_t spi_m_async_init(struct spi_m_async_descriptor *spi, void *const hw)
{
    2088:	b580      	push	{r7, lr}
    208a:	b084      	sub	sp, #16
    208c:	af00      	add	r7, sp, #0
    208e:	6078      	str	r0, [r7, #4]
    2090:	6039      	str	r1, [r7, #0]
	int32_t rc = 0;
    2092:	2300      	movs	r3, #0
    2094:	60fb      	str	r3, [r7, #12]
	ASSERT(spi && hw);
    2096:	687b      	ldr	r3, [r7, #4]
    2098:	2b00      	cmp	r3, #0
    209a:	d004      	beq.n	20a6 <spi_m_async_init+0x1e>
    209c:	683b      	ldr	r3, [r7, #0]
    209e:	2b00      	cmp	r3, #0
    20a0:	d001      	beq.n	20a6 <spi_m_async_init+0x1e>
    20a2:	2301      	movs	r3, #1
    20a4:	e000      	b.n	20a8 <spi_m_async_init+0x20>
    20a6:	2300      	movs	r3, #0
    20a8:	f003 0301 	and.w	r3, r3, #1
    20ac:	b2db      	uxtb	r3, r3
    20ae:	22a5      	movs	r2, #165	; 0xa5
    20b0:	491c      	ldr	r1, [pc, #112]	; (2124 <spi_m_async_init+0x9c>)
    20b2:	4618      	mov	r0, r3
    20b4:	4b1c      	ldr	r3, [pc, #112]	; (2128 <spi_m_async_init+0xa0>)
    20b6:	4798      	blx	r3
	spi->dev.prvt = (void *)hw;
    20b8:	687b      	ldr	r3, [r7, #4]
    20ba:	683a      	ldr	r2, [r7, #0]
    20bc:	605a      	str	r2, [r3, #4]
	rc            = _spi_m_async_init(&spi->dev, hw);
    20be:	687b      	ldr	r3, [r7, #4]
    20c0:	3304      	adds	r3, #4
    20c2:	6839      	ldr	r1, [r7, #0]
    20c4:	4618      	mov	r0, r3
    20c6:	4b19      	ldr	r3, [pc, #100]	; (212c <spi_m_async_init+0xa4>)
    20c8:	4798      	blx	r3
    20ca:	60f8      	str	r0, [r7, #12]

	if (rc >= 0) {
    20cc:	68fb      	ldr	r3, [r7, #12]
    20ce:	2b00      	cmp	r3, #0
    20d0:	db23      	blt.n	211a <spi_m_async_init+0x92>
		_spi_m_async_register_callback(&spi->dev, SPI_DEV_CB_TX, (FUNC_PTR)_spi_dev_tx);
    20d2:	687b      	ldr	r3, [r7, #4]
    20d4:	3304      	adds	r3, #4
    20d6:	4a16      	ldr	r2, [pc, #88]	; (2130 <spi_m_async_init+0xa8>)
    20d8:	2100      	movs	r1, #0
    20da:	4618      	mov	r0, r3
    20dc:	4b15      	ldr	r3, [pc, #84]	; (2134 <spi_m_async_init+0xac>)
    20de:	4798      	blx	r3
		_spi_m_async_register_callback(&spi->dev, SPI_DEV_CB_RX, (FUNC_PTR)_spi_dev_rx);
    20e0:	687b      	ldr	r3, [r7, #4]
    20e2:	3304      	adds	r3, #4
    20e4:	4a14      	ldr	r2, [pc, #80]	; (2138 <spi_m_async_init+0xb0>)
    20e6:	2101      	movs	r1, #1
    20e8:	4618      	mov	r0, r3
    20ea:	4b12      	ldr	r3, [pc, #72]	; (2134 <spi_m_async_init+0xac>)
    20ec:	4798      	blx	r3
		_spi_m_async_register_callback(&spi->dev, SPI_DEV_CB_COMPLETE, (FUNC_PTR)_spi_dev_complete);
    20ee:	687b      	ldr	r3, [r7, #4]
    20f0:	3304      	adds	r3, #4
    20f2:	4a12      	ldr	r2, [pc, #72]	; (213c <spi_m_async_init+0xb4>)
    20f4:	2102      	movs	r1, #2
    20f6:	4618      	mov	r0, r3
    20f8:	4b0e      	ldr	r3, [pc, #56]	; (2134 <spi_m_async_init+0xac>)
    20fa:	4798      	blx	r3
		_spi_m_async_register_callback(&spi->dev, SPI_DEV_CB_ERROR, (FUNC_PTR)_spi_dev_error);
    20fc:	687b      	ldr	r3, [r7, #4]
    20fe:	3304      	adds	r3, #4
    2100:	4a0f      	ldr	r2, [pc, #60]	; (2140 <spi_m_async_init+0xb8>)
    2102:	2103      	movs	r1, #3
    2104:	4618      	mov	r0, r3
    2106:	4b0b      	ldr	r3, [pc, #44]	; (2134 <spi_m_async_init+0xac>)
    2108:	4798      	blx	r3
	} else {
		return rc;
	}

	spi->io.read  = _spi_m_async_io_read;
    210a:	687b      	ldr	r3, [r7, #4]
    210c:	4a0d      	ldr	r2, [pc, #52]	; (2144 <spi_m_async_init+0xbc>)
    210e:	629a      	str	r2, [r3, #40]	; 0x28
	spi->io.write = _spi_m_async_io_write;
    2110:	687b      	ldr	r3, [r7, #4]
    2112:	4a0d      	ldr	r2, [pc, #52]	; (2148 <spi_m_async_init+0xc0>)
    2114:	625a      	str	r2, [r3, #36]	; 0x24
	return ERR_NONE;
    2116:	2300      	movs	r3, #0
    2118:	e000      	b.n	211c <spi_m_async_init+0x94>
		return rc;
    211a:	68fb      	ldr	r3, [r7, #12]
}
    211c:	4618      	mov	r0, r3
    211e:	3710      	adds	r7, #16
    2120:	46bd      	mov	sp, r7
    2122:	bd80      	pop	{r7, pc}
    2124:	00012ef8 	.word	0x00012ef8
    2128:	00002ed9 	.word	0x00002ed9
    212c:	00006bd5 	.word	0x00006bd5
    2130:	00001e71 	.word	0x00001e71
    2134:	000070b9 	.word	0x000070b9
    2138:	00001ef1 	.word	0x00001ef1
    213c:	00001fe9 	.word	0x00001fe9
    2140:	00002031 	.word	0x00002031
    2144:	0000214d 	.word	0x0000214d
    2148:	000021cd 	.word	0x000021cd

0000214c <_spi_m_async_io_read>:
 *  \return ERR_NONE on success, or an error code on failure.
 *  \retval ERR_NONE Success, transfer started.
 *  \retval ERR_BUSY Busy.
 */
static int32_t _spi_m_async_io_read(struct io_descriptor *io, uint8_t *const buf, const uint16_t length)
{
    214c:	b580      	push	{r7, lr}
    214e:	b086      	sub	sp, #24
    2150:	af00      	add	r7, sp, #0
    2152:	60f8      	str	r0, [r7, #12]
    2154:	60b9      	str	r1, [r7, #8]
    2156:	4613      	mov	r3, r2
    2158:	80fb      	strh	r3, [r7, #6]
	ASSERT(io);
    215a:	68fb      	ldr	r3, [r7, #12]
    215c:	2b00      	cmp	r3, #0
    215e:	bf14      	ite	ne
    2160:	2301      	movne	r3, #1
    2162:	2300      	moveq	r3, #0
    2164:	b2db      	uxtb	r3, r3
    2166:	f240 1205 	movw	r2, #261	; 0x105
    216a:	4914      	ldr	r1, [pc, #80]	; (21bc <_spi_m_async_io_read+0x70>)
    216c:	4618      	mov	r0, r3
    216e:	4b14      	ldr	r3, [pc, #80]	; (21c0 <_spi_m_async_io_read+0x74>)
    2170:	4798      	blx	r3
	struct spi_m_async_descriptor *spi = CONTAINER_OF(io, struct spi_m_async_descriptor, io);
    2172:	68fb      	ldr	r3, [r7, #12]
    2174:	3b24      	subs	r3, #36	; 0x24
    2176:	617b      	str	r3, [r7, #20]

	spi->xfer.rxbuf = buf;
    2178:	697b      	ldr	r3, [r7, #20]
    217a:	68ba      	ldr	r2, [r7, #8]
    217c:	63da      	str	r2, [r3, #60]	; 0x3c
	spi->xfer.txbuf = NULL;
    217e:	697b      	ldr	r3, [r7, #20]
    2180:	2200      	movs	r2, #0
    2182:	639a      	str	r2, [r3, #56]	; 0x38
	spi->xfer.size  = length;
    2184:	88fa      	ldrh	r2, [r7, #6]
    2186:	697b      	ldr	r3, [r7, #20]
    2188:	641a      	str	r2, [r3, #64]	; 0x40
	spi->xfercnt    = 0;
    218a:	697b      	ldr	r3, [r7, #20]
    218c:	2200      	movs	r2, #0
    218e:	645a      	str	r2, [r3, #68]	; 0x44

	spi->stat = SPI_M_ASYNC_STATUS_BUSY;
    2190:	697b      	ldr	r3, [r7, #20]
    2192:	2210      	movs	r2, #16
    2194:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	_spi_m_async_enable_rx(&spi->dev, true);
    2198:	697b      	ldr	r3, [r7, #20]
    219a:	3304      	adds	r3, #4
    219c:	2101      	movs	r1, #1
    219e:	4618      	mov	r0, r3
    21a0:	4b08      	ldr	r3, [pc, #32]	; (21c4 <_spi_m_async_io_read+0x78>)
    21a2:	4798      	blx	r3
	_spi_m_async_write_one(&spi->dev, SPI_DUMMY_CHAR);
    21a4:	697b      	ldr	r3, [r7, #20]
    21a6:	3304      	adds	r3, #4
    21a8:	f240 11ff 	movw	r1, #511	; 0x1ff
    21ac:	4618      	mov	r0, r3
    21ae:	4b06      	ldr	r3, [pc, #24]	; (21c8 <_spi_m_async_io_read+0x7c>)
    21b0:	4798      	blx	r3

	return ERR_NONE;
    21b2:	2300      	movs	r3, #0
}
    21b4:	4618      	mov	r0, r3
    21b6:	3718      	adds	r7, #24
    21b8:	46bd      	mov	sp, r7
    21ba:	bd80      	pop	{r7, pc}
    21bc:	00012ef8 	.word	0x00012ef8
    21c0:	00002ed9 	.word	0x00002ed9
    21c4:	00006f39 	.word	0x00006f39
    21c8:	00007011 	.word	0x00007011

000021cc <_spi_m_async_io_write>:
 *  \return ERR_NONE on success, or an error code on failure.
 *  \retval ERR_NONE Success, transfer started.
 *  \retval ERR_BUSY Busy.
 */
static int32_t _spi_m_async_io_write(struct io_descriptor *io, const uint8_t *const buf, const uint16_t length)
{
    21cc:	b580      	push	{r7, lr}
    21ce:	b086      	sub	sp, #24
    21d0:	af00      	add	r7, sp, #0
    21d2:	60f8      	str	r0, [r7, #12]
    21d4:	60b9      	str	r1, [r7, #8]
    21d6:	4613      	mov	r3, r2
    21d8:	80fb      	strh	r3, [r7, #6]
	ASSERT(io);
    21da:	68fb      	ldr	r3, [r7, #12]
    21dc:	2b00      	cmp	r3, #0
    21de:	bf14      	ite	ne
    21e0:	2301      	movne	r3, #1
    21e2:	2300      	moveq	r3, #0
    21e4:	b2db      	uxtb	r3, r3
    21e6:	f240 1227 	movw	r2, #295	; 0x127
    21ea:	4911      	ldr	r1, [pc, #68]	; (2230 <_spi_m_async_io_write+0x64>)
    21ec:	4618      	mov	r0, r3
    21ee:	4b11      	ldr	r3, [pc, #68]	; (2234 <_spi_m_async_io_write+0x68>)
    21f0:	4798      	blx	r3
	struct spi_m_async_descriptor *spi = CONTAINER_OF(io, struct spi_m_async_descriptor, io);
    21f2:	68fb      	ldr	r3, [r7, #12]
    21f4:	3b24      	subs	r3, #36	; 0x24
    21f6:	617b      	str	r3, [r7, #20]

	spi->xfer.rxbuf = NULL;
    21f8:	697b      	ldr	r3, [r7, #20]
    21fa:	2200      	movs	r2, #0
    21fc:	63da      	str	r2, [r3, #60]	; 0x3c
	spi->xfer.txbuf = (uint8_t *)buf;
    21fe:	697b      	ldr	r3, [r7, #20]
    2200:	68ba      	ldr	r2, [r7, #8]
    2202:	639a      	str	r2, [r3, #56]	; 0x38
	spi->xfer.size  = length;
    2204:	88fa      	ldrh	r2, [r7, #6]
    2206:	697b      	ldr	r3, [r7, #20]
    2208:	641a      	str	r2, [r3, #64]	; 0x40
	spi->xfercnt    = 0;
    220a:	697b      	ldr	r3, [r7, #20]
    220c:	2200      	movs	r2, #0
    220e:	645a      	str	r2, [r3, #68]	; 0x44

	spi->stat = SPI_M_ASYNC_STATUS_BUSY;
    2210:	697b      	ldr	r3, [r7, #20]
    2212:	2210      	movs	r2, #16
    2214:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	_spi_m_async_enable_tx(&spi->dev, true);
    2218:	697b      	ldr	r3, [r7, #20]
    221a:	3304      	adds	r3, #4
    221c:	2101      	movs	r1, #1
    221e:	4618      	mov	r0, r3
    2220:	4b05      	ldr	r3, [pc, #20]	; (2238 <_spi_m_async_io_write+0x6c>)
    2222:	4798      	blx	r3

	return ERR_NONE;
    2224:	2300      	movs	r3, #0
}
    2226:	4618      	mov	r0, r3
    2228:	3718      	adds	r7, #24
    222a:	46bd      	mov	sp, r7
    222c:	bd80      	pop	{r7, pc}
    222e:	bf00      	nop
    2230:	00012ef8 	.word	0x00012ef8
    2234:	00002ed9 	.word	0x00002ed9
    2238:	00006ed5 	.word	0x00006ed5

0000223c <spi_m_sync_init>:
	ASSERT(spi);
	spi->func = (struct _spi_m_sync_hpl_interface *)func;
}

int32_t spi_m_sync_init(struct spi_m_sync_descriptor *spi, void *const hw)
{
    223c:	b580      	push	{r7, lr}
    223e:	b084      	sub	sp, #16
    2240:	af00      	add	r7, sp, #0
    2242:	6078      	str	r0, [r7, #4]
    2244:	6039      	str	r1, [r7, #0]
	int32_t rc = 0;
    2246:	2300      	movs	r3, #0
    2248:	60fb      	str	r3, [r7, #12]
	ASSERT(spi && hw);
    224a:	687b      	ldr	r3, [r7, #4]
    224c:	2b00      	cmp	r3, #0
    224e:	d004      	beq.n	225a <spi_m_sync_init+0x1e>
    2250:	683b      	ldr	r3, [r7, #0]
    2252:	2b00      	cmp	r3, #0
    2254:	d001      	beq.n	225a <spi_m_sync_init+0x1e>
    2256:	2301      	movs	r3, #1
    2258:	e000      	b.n	225c <spi_m_sync_init+0x20>
    225a:	2300      	movs	r3, #0
    225c:	f003 0301 	and.w	r3, r3, #1
    2260:	b2db      	uxtb	r3, r3
    2262:	2240      	movs	r2, #64	; 0x40
    2264:	4910      	ldr	r1, [pc, #64]	; (22a8 <spi_m_sync_init+0x6c>)
    2266:	4618      	mov	r0, r3
    2268:	4b10      	ldr	r3, [pc, #64]	; (22ac <spi_m_sync_init+0x70>)
    226a:	4798      	blx	r3
	spi->dev.prvt = (void *)hw;
    226c:	687b      	ldr	r3, [r7, #4]
    226e:	683a      	ldr	r2, [r7, #0]
    2270:	605a      	str	r2, [r3, #4]
	rc            = _spi_m_sync_init(&spi->dev, hw);
    2272:	687b      	ldr	r3, [r7, #4]
    2274:	3304      	adds	r3, #4
    2276:	6839      	ldr	r1, [r7, #0]
    2278:	4618      	mov	r0, r3
    227a:	4b0d      	ldr	r3, [pc, #52]	; (22b0 <spi_m_sync_init+0x74>)
    227c:	4798      	blx	r3
    227e:	60f8      	str	r0, [r7, #12]

	if (rc < 0) {
    2280:	68fb      	ldr	r3, [r7, #12]
    2282:	2b00      	cmp	r3, #0
    2284:	da01      	bge.n	228a <spi_m_sync_init+0x4e>
		return rc;
    2286:	68fb      	ldr	r3, [r7, #12]
    2288:	e00a      	b.n	22a0 <spi_m_sync_init+0x64>
	}

	spi->flags    = SPI_DEACTIVATE_NEXT;
    228a:	687b      	ldr	r3, [r7, #4]
    228c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    2290:	829a      	strh	r2, [r3, #20]
	spi->io.read  = _spi_m_sync_io_read;
    2292:	687b      	ldr	r3, [r7, #4]
    2294:	4a07      	ldr	r2, [pc, #28]	; (22b4 <spi_m_sync_init+0x78>)
    2296:	611a      	str	r2, [r3, #16]
	spi->io.write = _spi_m_sync_io_write;
    2298:	687b      	ldr	r3, [r7, #4]
    229a:	4a07      	ldr	r2, [pc, #28]	; (22b8 <spi_m_sync_init+0x7c>)
    229c:	60da      	str	r2, [r3, #12]

	return ERR_NONE;
    229e:	2300      	movs	r3, #0
}
    22a0:	4618      	mov	r0, r3
    22a2:	3710      	adds	r7, #16
    22a4:	46bd      	mov	sp, r7
    22a6:	bd80      	pop	{r7, pc}
    22a8:	00012f18 	.word	0x00012f18
    22ac:	00002ed9 	.word	0x00002ed9
    22b0:	00006ac9 	.word	0x00006ac9
    22b4:	000022bd 	.word	0x000022bd
    22b8:	00002315 	.word	0x00002315

000022bc <_spi_m_sync_io_read>:
 *  \return Operation status.
 *  \retval size Success.
 *  \retval >=0 Time out, with number of characters read.
 */
static int32_t _spi_m_sync_io_read(struct io_descriptor *io, uint8_t *buf, const uint16_t length)
{
    22bc:	b580      	push	{r7, lr}
    22be:	b088      	sub	sp, #32
    22c0:	af00      	add	r7, sp, #0
    22c2:	60f8      	str	r0, [r7, #12]
    22c4:	60b9      	str	r1, [r7, #8]
    22c6:	4613      	mov	r3, r2
    22c8:	80fb      	strh	r3, [r7, #6]
	ASSERT(io);
    22ca:	68fb      	ldr	r3, [r7, #12]
    22cc:	2b00      	cmp	r3, #0
    22ce:	bf14      	ite	ne
    22d0:	2301      	movne	r3, #1
    22d2:	2300      	moveq	r3, #0
    22d4:	b2db      	uxtb	r3, r3
    22d6:	2287      	movs	r2, #135	; 0x87
    22d8:	490b      	ldr	r1, [pc, #44]	; (2308 <_spi_m_sync_io_read+0x4c>)
    22da:	4618      	mov	r0, r3
    22dc:	4b0b      	ldr	r3, [pc, #44]	; (230c <_spi_m_sync_io_read+0x50>)
    22de:	4798      	blx	r3

	struct spi_m_sync_descriptor *spi = CONTAINER_OF(io, struct spi_m_sync_descriptor, io);
    22e0:	68fb      	ldr	r3, [r7, #12]
    22e2:	3b0c      	subs	r3, #12
    22e4:	61fb      	str	r3, [r7, #28]
	struct spi_xfer               xfer;

	xfer.rxbuf = buf;
    22e6:	68bb      	ldr	r3, [r7, #8]
    22e8:	617b      	str	r3, [r7, #20]
	xfer.txbuf = 0;
    22ea:	2300      	movs	r3, #0
    22ec:	613b      	str	r3, [r7, #16]
	xfer.size  = length;
    22ee:	88fb      	ldrh	r3, [r7, #6]
    22f0:	61bb      	str	r3, [r7, #24]

	return spi_m_sync_transfer(spi, &xfer);
    22f2:	f107 0310 	add.w	r3, r7, #16
    22f6:	4619      	mov	r1, r3
    22f8:	69f8      	ldr	r0, [r7, #28]
    22fa:	4b05      	ldr	r3, [pc, #20]	; (2310 <_spi_m_sync_io_read+0x54>)
    22fc:	4798      	blx	r3
    22fe:	4603      	mov	r3, r0
}
    2300:	4618      	mov	r0, r3
    2302:	3720      	adds	r7, #32
    2304:	46bd      	mov	sp, r7
    2306:	bd80      	pop	{r7, pc}
    2308:	00012f18 	.word	0x00012f18
    230c:	00002ed9 	.word	0x00002ed9
    2310:	0000236d 	.word	0x0000236d

00002314 <_spi_m_sync_io_write>:
 *  \return Operation status.
 *  \retval size Success.
 *  \retval >=0 Timeout, with number of characters transferred.
 */
static int32_t _spi_m_sync_io_write(struct io_descriptor *const io, const uint8_t *const buf, const uint16_t length)
{
    2314:	b580      	push	{r7, lr}
    2316:	b088      	sub	sp, #32
    2318:	af00      	add	r7, sp, #0
    231a:	60f8      	str	r0, [r7, #12]
    231c:	60b9      	str	r1, [r7, #8]
    231e:	4613      	mov	r3, r2
    2320:	80fb      	strh	r3, [r7, #6]
	ASSERT(io);
    2322:	68fb      	ldr	r3, [r7, #12]
    2324:	2b00      	cmp	r3, #0
    2326:	bf14      	ite	ne
    2328:	2301      	movne	r3, #1
    232a:	2300      	moveq	r3, #0
    232c:	b2db      	uxtb	r3, r3
    232e:	22a3      	movs	r2, #163	; 0xa3
    2330:	490b      	ldr	r1, [pc, #44]	; (2360 <_spi_m_sync_io_write+0x4c>)
    2332:	4618      	mov	r0, r3
    2334:	4b0b      	ldr	r3, [pc, #44]	; (2364 <_spi_m_sync_io_write+0x50>)
    2336:	4798      	blx	r3

	struct spi_m_sync_descriptor *spi = CONTAINER_OF(io, struct spi_m_sync_descriptor, io);
    2338:	68fb      	ldr	r3, [r7, #12]
    233a:	3b0c      	subs	r3, #12
    233c:	61fb      	str	r3, [r7, #28]
	struct spi_xfer               xfer;

	xfer.rxbuf = 0;
    233e:	2300      	movs	r3, #0
    2340:	617b      	str	r3, [r7, #20]
	xfer.txbuf = (uint8_t *)buf;
    2342:	68bb      	ldr	r3, [r7, #8]
    2344:	613b      	str	r3, [r7, #16]
	xfer.size  = length;
    2346:	88fb      	ldrh	r3, [r7, #6]
    2348:	61bb      	str	r3, [r7, #24]

	return spi_m_sync_transfer(spi, &xfer);
    234a:	f107 0310 	add.w	r3, r7, #16
    234e:	4619      	mov	r1, r3
    2350:	69f8      	ldr	r0, [r7, #28]
    2352:	4b05      	ldr	r3, [pc, #20]	; (2368 <_spi_m_sync_io_write+0x54>)
    2354:	4798      	blx	r3
    2356:	4603      	mov	r3, r0
}
    2358:	4618      	mov	r0, r3
    235a:	3720      	adds	r7, #32
    235c:	46bd      	mov	sp, r7
    235e:	bd80      	pop	{r7, pc}
    2360:	00012f18 	.word	0x00012f18
    2364:	00002ed9 	.word	0x00002ed9
    2368:	0000236d 	.word	0x0000236d

0000236c <spi_m_sync_transfer>:

int32_t spi_m_sync_transfer(struct spi_m_sync_descriptor *spi, const struct spi_xfer *p_xfer)
{
    236c:	b580      	push	{r7, lr}
    236e:	b086      	sub	sp, #24
    2370:	af00      	add	r7, sp, #0
    2372:	6078      	str	r0, [r7, #4]
    2374:	6039      	str	r1, [r7, #0]
	struct spi_msg msg;

	ASSERT(spi && p_xfer);
    2376:	687b      	ldr	r3, [r7, #4]
    2378:	2b00      	cmp	r3, #0
    237a:	d004      	beq.n	2386 <spi_m_sync_transfer+0x1a>
    237c:	683b      	ldr	r3, [r7, #0]
    237e:	2b00      	cmp	r3, #0
    2380:	d001      	beq.n	2386 <spi_m_sync_transfer+0x1a>
    2382:	2301      	movs	r3, #1
    2384:	e000      	b.n	2388 <spi_m_sync_transfer+0x1c>
    2386:	2300      	movs	r3, #0
    2388:	f003 0301 	and.w	r3, r3, #1
    238c:	b2db      	uxtb	r3, r3
    238e:	22b3      	movs	r2, #179	; 0xb3
    2390:	490c      	ldr	r1, [pc, #48]	; (23c4 <spi_m_sync_transfer+0x58>)
    2392:	4618      	mov	r0, r3
    2394:	4b0c      	ldr	r3, [pc, #48]	; (23c8 <spi_m_sync_transfer+0x5c>)
    2396:	4798      	blx	r3

	msg.txbuf = p_xfer->txbuf;
    2398:	683b      	ldr	r3, [r7, #0]
    239a:	681b      	ldr	r3, [r3, #0]
    239c:	60fb      	str	r3, [r7, #12]
	msg.rxbuf = p_xfer->rxbuf;
    239e:	683b      	ldr	r3, [r7, #0]
    23a0:	685b      	ldr	r3, [r3, #4]
    23a2:	613b      	str	r3, [r7, #16]
	msg.size  = p_xfer->size;
    23a4:	683b      	ldr	r3, [r7, #0]
    23a6:	689b      	ldr	r3, [r3, #8]
    23a8:	617b      	str	r3, [r7, #20]
	return _spi_m_sync_trans(&spi->dev, &msg);
    23aa:	687b      	ldr	r3, [r7, #4]
    23ac:	3304      	adds	r3, #4
    23ae:	f107 020c 	add.w	r2, r7, #12
    23b2:	4611      	mov	r1, r2
    23b4:	4618      	mov	r0, r3
    23b6:	4b05      	ldr	r3, [pc, #20]	; (23cc <spi_m_sync_transfer+0x60>)
    23b8:	4798      	blx	r3
    23ba:	4603      	mov	r3, r0
}
    23bc:	4618      	mov	r0, r3
    23be:	3718      	adds	r7, #24
    23c0:	46bd      	mov	sp, r7
    23c2:	bd80      	pop	{r7, pc}
    23c4:	00012f18 	.word	0x00012f18
    23c8:	00002ed9 	.word	0x00002ed9
    23cc:	00006db9 	.word	0x00006db9

000023d0 <list_get_head>:
 *
 * \return A pointer to the head of the given list or NULL if the list is
 * empty
 */
static inline void *list_get_head(const struct list_descriptor *const list)
{
    23d0:	b480      	push	{r7}
    23d2:	b083      	sub	sp, #12
    23d4:	af00      	add	r7, sp, #0
    23d6:	6078      	str	r0, [r7, #4]
	return (void *)list->head;
    23d8:	687b      	ldr	r3, [r7, #4]
    23da:	681b      	ldr	r3, [r3, #0]
}
    23dc:	4618      	mov	r0, r3
    23de:	370c      	adds	r7, #12
    23e0:	46bd      	mov	sp, r7
    23e2:	f85d 7b04 	ldr.w	r7, [sp], #4
    23e6:	4770      	bx	lr

000023e8 <list_get_next_element>:
 *
 * \return A pointer to the next list element or NULL if there is not next
 * element
 */
static inline void *list_get_next_element(const void *const element)
{
    23e8:	b480      	push	{r7}
    23ea:	b083      	sub	sp, #12
    23ec:	af00      	add	r7, sp, #0
    23ee:	6078      	str	r0, [r7, #4]
	return element ? ((struct list_element *)element)->next : NULL;
    23f0:	687b      	ldr	r3, [r7, #4]
    23f2:	2b00      	cmp	r3, #0
    23f4:	d002      	beq.n	23fc <list_get_next_element+0x14>
    23f6:	687b      	ldr	r3, [r7, #4]
    23f8:	681b      	ldr	r3, [r3, #0]
    23fa:	e000      	b.n	23fe <list_get_next_element+0x16>
    23fc:	2300      	movs	r3, #0
}
    23fe:	4618      	mov	r0, r3
    2400:	370c      	adds	r7, #12
    2402:	46bd      	mov	sp, r7
    2404:	f85d 7b04 	ldr.w	r7, [sp], #4
    2408:	4770      	bx	lr
	...

0000240c <timer_init>:

/**
 * \brief Initialize timer
 */
int32_t timer_init(struct timer_descriptor *const descr, void *const hw, struct _timer_hpl_interface *const func)
{
    240c:	b580      	push	{r7, lr}
    240e:	b084      	sub	sp, #16
    2410:	af00      	add	r7, sp, #0
    2412:	60f8      	str	r0, [r7, #12]
    2414:	60b9      	str	r1, [r7, #8]
    2416:	607a      	str	r2, [r7, #4]
	ASSERT(descr && hw);
    2418:	68fb      	ldr	r3, [r7, #12]
    241a:	2b00      	cmp	r3, #0
    241c:	d004      	beq.n	2428 <timer_init+0x1c>
    241e:	68bb      	ldr	r3, [r7, #8]
    2420:	2b00      	cmp	r3, #0
    2422:	d001      	beq.n	2428 <timer_init+0x1c>
    2424:	2301      	movs	r3, #1
    2426:	e000      	b.n	242a <timer_init+0x1e>
    2428:	2300      	movs	r3, #0
    242a:	f003 0301 	and.w	r3, r3, #1
    242e:	b2db      	uxtb	r3, r3
    2430:	223b      	movs	r2, #59	; 0x3b
    2432:	490a      	ldr	r1, [pc, #40]	; (245c <timer_init+0x50>)
    2434:	4618      	mov	r0, r3
    2436:	4b0a      	ldr	r3, [pc, #40]	; (2460 <timer_init+0x54>)
    2438:	4798      	blx	r3
	_timer_init(&descr->device, hw);
    243a:	68fb      	ldr	r3, [r7, #12]
    243c:	68b9      	ldr	r1, [r7, #8]
    243e:	4618      	mov	r0, r3
    2440:	4b08      	ldr	r3, [pc, #32]	; (2464 <timer_init+0x58>)
    2442:	4798      	blx	r3
	descr->time                           = 0;
    2444:	68fb      	ldr	r3, [r7, #12]
    2446:	2200      	movs	r2, #0
    2448:	611a      	str	r2, [r3, #16]
	descr->device.timer_cb.period_expired = timer_process_counted;
    244a:	68fb      	ldr	r3, [r7, #12]
    244c:	4a06      	ldr	r2, [pc, #24]	; (2468 <timer_init+0x5c>)
    244e:	601a      	str	r2, [r3, #0]

	return ERR_NONE;
    2450:	2300      	movs	r3, #0
}
    2452:	4618      	mov	r0, r3
    2454:	3710      	adds	r7, #16
    2456:	46bd      	mov	sp, r7
    2458:	bd80      	pop	{r7, pc}
    245a:	bf00      	nop
    245c:	00012f34 	.word	0x00012f34
    2460:	00002ed9 	.word	0x00002ed9
    2464:	00007451 	.word	0x00007451
    2468:	0000251d 	.word	0x0000251d

0000246c <timer_add_timer_task>:
 * \param[in] head The pointer to the head of timer task list
 * \param[in] task The pointer to task to add
 * \param[in] time Current timer time
 */
static void timer_add_timer_task(struct list_descriptor *list, struct timer_task *const new_task, const uint32_t time)
{
    246c:	b580      	push	{r7, lr}
    246e:	b088      	sub	sp, #32
    2470:	af00      	add	r7, sp, #0
    2472:	60f8      	str	r0, [r7, #12]
    2474:	60b9      	str	r1, [r7, #8]
    2476:	607a      	str	r2, [r7, #4]
	struct timer_task *it, *prev = NULL, *head = (struct timer_task *)list_get_head(list);
    2478:	2300      	movs	r3, #0
    247a:	61bb      	str	r3, [r7, #24]
    247c:	68f8      	ldr	r0, [r7, #12]
    247e:	4b23      	ldr	r3, [pc, #140]	; (250c <timer_add_timer_task+0xa0>)
    2480:	4798      	blx	r3
    2482:	6138      	str	r0, [r7, #16]

	if (!head) {
    2484:	693b      	ldr	r3, [r7, #16]
    2486:	2b00      	cmp	r3, #0
    2488:	d104      	bne.n	2494 <timer_add_timer_task+0x28>
		list_insert_as_head(list, new_task);
    248a:	68b9      	ldr	r1, [r7, #8]
    248c:	68f8      	ldr	r0, [r7, #12]
    248e:	4b20      	ldr	r3, [pc, #128]	; (2510 <timer_add_timer_task+0xa4>)
    2490:	4798      	blx	r3
		return;
    2492:	e037      	b.n	2504 <timer_add_timer_task+0x98>
	}

	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
    2494:	693b      	ldr	r3, [r7, #16]
    2496:	61fb      	str	r3, [r7, #28]
    2498:	e022      	b.n	24e0 <timer_add_timer_task+0x74>
		uint32_t time_left;

		if (it->time_label <= time) {
    249a:	69fb      	ldr	r3, [r7, #28]
    249c:	685a      	ldr	r2, [r3, #4]
    249e:	687b      	ldr	r3, [r7, #4]
    24a0:	429a      	cmp	r2, r3
    24a2:	d808      	bhi.n	24b6 <timer_add_timer_task+0x4a>
			time_left = it->interval - (time - it->time_label);
    24a4:	69fb      	ldr	r3, [r7, #28]
    24a6:	689a      	ldr	r2, [r3, #8]
    24a8:	69fb      	ldr	r3, [r7, #28]
    24aa:	6859      	ldr	r1, [r3, #4]
    24ac:	687b      	ldr	r3, [r7, #4]
    24ae:	1acb      	subs	r3, r1, r3
    24b0:	4413      	add	r3, r2
    24b2:	617b      	str	r3, [r7, #20]
    24b4:	e009      	b.n	24ca <timer_add_timer_task+0x5e>
		} else {
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
    24b6:	69fb      	ldr	r3, [r7, #28]
    24b8:	689a      	ldr	r2, [r3, #8]
    24ba:	69fb      	ldr	r3, [r7, #28]
    24bc:	685b      	ldr	r3, [r3, #4]
    24be:	441a      	add	r2, r3
    24c0:	687b      	ldr	r3, [r7, #4]
    24c2:	425b      	negs	r3, r3
    24c4:	4413      	add	r3, r2
    24c6:	3301      	adds	r3, #1
    24c8:	617b      	str	r3, [r7, #20]
		}
		if (time_left >= new_task->interval)
    24ca:	68bb      	ldr	r3, [r7, #8]
    24cc:	689a      	ldr	r2, [r3, #8]
    24ce:	697b      	ldr	r3, [r7, #20]
    24d0:	429a      	cmp	r2, r3
    24d2:	d909      	bls.n	24e8 <timer_add_timer_task+0x7c>
			break;
		prev = it;
    24d4:	69fb      	ldr	r3, [r7, #28]
    24d6:	61bb      	str	r3, [r7, #24]
	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
    24d8:	69f8      	ldr	r0, [r7, #28]
    24da:	4b0e      	ldr	r3, [pc, #56]	; (2514 <timer_add_timer_task+0xa8>)
    24dc:	4798      	blx	r3
    24de:	61f8      	str	r0, [r7, #28]
    24e0:	69fb      	ldr	r3, [r7, #28]
    24e2:	2b00      	cmp	r3, #0
    24e4:	d1d9      	bne.n	249a <timer_add_timer_task+0x2e>
    24e6:	e000      	b.n	24ea <timer_add_timer_task+0x7e>
			break;
    24e8:	bf00      	nop
	}

	if (it == head) {
    24ea:	69fa      	ldr	r2, [r7, #28]
    24ec:	693b      	ldr	r3, [r7, #16]
    24ee:	429a      	cmp	r2, r3
    24f0:	d104      	bne.n	24fc <timer_add_timer_task+0x90>
		list_insert_as_head(list, new_task);
    24f2:	68b9      	ldr	r1, [r7, #8]
    24f4:	68f8      	ldr	r0, [r7, #12]
    24f6:	4b06      	ldr	r3, [pc, #24]	; (2510 <timer_add_timer_task+0xa4>)
    24f8:	4798      	blx	r3
    24fa:	e003      	b.n	2504 <timer_add_timer_task+0x98>
	} else {
		list_insert_after(prev, new_task);
    24fc:	68b9      	ldr	r1, [r7, #8]
    24fe:	69b8      	ldr	r0, [r7, #24]
    2500:	4b05      	ldr	r3, [pc, #20]	; (2518 <timer_add_timer_task+0xac>)
    2502:	4798      	blx	r3
	}
}
    2504:	3720      	adds	r7, #32
    2506:	46bd      	mov	sp, r7
    2508:	bd80      	pop	{r7, pc}
    250a:	bf00      	nop
    250c:	000023d1 	.word	0x000023d1
    2510:	00002f39 	.word	0x00002f39
    2514:	000023e9 	.word	0x000023e9
    2518:	00002f91 	.word	0x00002f91

0000251c <timer_process_counted>:

/**
 * \internal Process interrupts
 */
static void timer_process_counted(struct _timer_device *device)
{
    251c:	b580      	push	{r7, lr}
    251e:	b086      	sub	sp, #24
    2520:	af00      	add	r7, sp, #0
    2522:	6078      	str	r0, [r7, #4]
	struct timer_descriptor *timer = CONTAINER_OF(device, struct timer_descriptor, device);
    2524:	687b      	ldr	r3, [r7, #4]
    2526:	613b      	str	r3, [r7, #16]
	struct timer_task *      it    = (struct timer_task *)list_get_head(&timer->tasks);
    2528:	693b      	ldr	r3, [r7, #16]
    252a:	3314      	adds	r3, #20
    252c:	4618      	mov	r0, r3
    252e:	4b27      	ldr	r3, [pc, #156]	; (25cc <timer_process_counted+0xb0>)
    2530:	4798      	blx	r3
    2532:	6178      	str	r0, [r7, #20]
	uint32_t                 time  = ++timer->time;
    2534:	693b      	ldr	r3, [r7, #16]
    2536:	691b      	ldr	r3, [r3, #16]
    2538:	1c5a      	adds	r2, r3, #1
    253a:	693b      	ldr	r3, [r7, #16]
    253c:	611a      	str	r2, [r3, #16]
    253e:	693b      	ldr	r3, [r7, #16]
    2540:	691b      	ldr	r3, [r3, #16]
    2542:	60fb      	str	r3, [r7, #12]

	if ((timer->flags & TIMER_FLAG_QUEUE_IS_TAKEN) || (timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED)) {
    2544:	693b      	ldr	r3, [r7, #16]
    2546:	7e1b      	ldrb	r3, [r3, #24]
    2548:	b2db      	uxtb	r3, r3
    254a:	f003 0301 	and.w	r3, r3, #1
    254e:	2b00      	cmp	r3, #0
    2550:	d106      	bne.n	2560 <timer_process_counted+0x44>
    2552:	693b      	ldr	r3, [r7, #16]
    2554:	7e1b      	ldrb	r3, [r3, #24]
    2556:	b2db      	uxtb	r3, r3
    2558:	f003 0302 	and.w	r3, r3, #2
    255c:	2b00      	cmp	r3, #0
    255e:	d027      	beq.n	25b0 <timer_process_counted+0x94>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
    2560:	693b      	ldr	r3, [r7, #16]
    2562:	7e1b      	ldrb	r3, [r3, #24]
    2564:	b2db      	uxtb	r3, r3
    2566:	f043 0302 	orr.w	r3, r3, #2
    256a:	b2da      	uxtb	r2, r3
    256c:	693b      	ldr	r3, [r7, #16]
    256e:	761a      	strb	r2, [r3, #24]
		return;
    2570:	e029      	b.n	25c6 <timer_process_counted+0xaa>
	}

	while (it && ((time - it->time_label) >= it->interval)) {
		struct timer_task *tmp = it;
    2572:	697b      	ldr	r3, [r7, #20]
    2574:	60bb      	str	r3, [r7, #8]

		list_remove_head(&timer->tasks);
    2576:	693b      	ldr	r3, [r7, #16]
    2578:	3314      	adds	r3, #20
    257a:	4618      	mov	r0, r3
    257c:	4b14      	ldr	r3, [pc, #80]	; (25d0 <timer_process_counted+0xb4>)
    257e:	4798      	blx	r3
		if (TIMER_TASK_REPEAT == tmp->mode) {
    2580:	68bb      	ldr	r3, [r7, #8]
    2582:	7c1b      	ldrb	r3, [r3, #16]
    2584:	2b01      	cmp	r3, #1
    2586:	d109      	bne.n	259c <timer_process_counted+0x80>
			tmp->time_label = time;
    2588:	68bb      	ldr	r3, [r7, #8]
    258a:	68fa      	ldr	r2, [r7, #12]
    258c:	605a      	str	r2, [r3, #4]
			timer_add_timer_task(&timer->tasks, tmp, time);
    258e:	693b      	ldr	r3, [r7, #16]
    2590:	3314      	adds	r3, #20
    2592:	68fa      	ldr	r2, [r7, #12]
    2594:	68b9      	ldr	r1, [r7, #8]
    2596:	4618      	mov	r0, r3
    2598:	4b0e      	ldr	r3, [pc, #56]	; (25d4 <timer_process_counted+0xb8>)
    259a:	4798      	blx	r3
		}
		it = (struct timer_task *)list_get_head(&timer->tasks);
    259c:	693b      	ldr	r3, [r7, #16]
    259e:	3314      	adds	r3, #20
    25a0:	4618      	mov	r0, r3
    25a2:	4b0a      	ldr	r3, [pc, #40]	; (25cc <timer_process_counted+0xb0>)
    25a4:	4798      	blx	r3
    25a6:	6178      	str	r0, [r7, #20]

		tmp->cb(tmp);
    25a8:	68bb      	ldr	r3, [r7, #8]
    25aa:	68db      	ldr	r3, [r3, #12]
    25ac:	68b8      	ldr	r0, [r7, #8]
    25ae:	4798      	blx	r3
	while (it && ((time - it->time_label) >= it->interval)) {
    25b0:	697b      	ldr	r3, [r7, #20]
    25b2:	2b00      	cmp	r3, #0
    25b4:	d007      	beq.n	25c6 <timer_process_counted+0xaa>
    25b6:	697b      	ldr	r3, [r7, #20]
    25b8:	685b      	ldr	r3, [r3, #4]
    25ba:	68fa      	ldr	r2, [r7, #12]
    25bc:	1ad2      	subs	r2, r2, r3
    25be:	697b      	ldr	r3, [r7, #20]
    25c0:	689b      	ldr	r3, [r3, #8]
    25c2:	429a      	cmp	r2, r3
    25c4:	d2d5      	bcs.n	2572 <timer_process_counted+0x56>
	}
}
    25c6:	3718      	adds	r7, #24
    25c8:	46bd      	mov	sp, r7
    25ca:	bd80      	pop	{r7, pc}
    25cc:	000023d1 	.word	0x000023d1
    25d0:	00003031 	.word	0x00003031
    25d4:	0000246d 	.word	0x0000246d

000025d8 <_usb_d_find_ep>:
 * \return Index of endpoint descriptor.
 * \retval >=0 The index.
 * \retval <0 Not found (endpoint is not initialized).
 */
static int8_t _usb_d_find_ep(const uint8_t ep)
{
    25d8:	b480      	push	{r7}
    25da:	b085      	sub	sp, #20
    25dc:	af00      	add	r7, sp, #0
    25de:	4603      	mov	r3, r0
    25e0:	71fb      	strb	r3, [r7, #7]
	int8_t i;
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    25e2:	2300      	movs	r3, #0
    25e4:	73fb      	strb	r3, [r7, #15]
    25e6:	e029      	b.n	263c <_usb_d_find_ep+0x64>
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    25e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
    25ec:	4a19      	ldr	r2, [pc, #100]	; (2654 <_usb_d_find_ep+0x7c>)
    25ee:	015b      	lsls	r3, r3, #5
    25f0:	4413      	add	r3, r2
    25f2:	3301      	adds	r3, #1
    25f4:	781b      	ldrb	r3, [r3, #0]
    25f6:	79fa      	ldrb	r2, [r7, #7]
    25f8:	429a      	cmp	r2, r3
    25fa:	d102      	bne.n	2602 <_usb_d_find_ep+0x2a>
			return i;
    25fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
    2600:	e022      	b.n	2648 <_usb_d_find_ep+0x70>
		}
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
    2602:	f997 300f 	ldrsb.w	r3, [r7, #15]
    2606:	4a13      	ldr	r2, [pc, #76]	; (2654 <_usb_d_find_ep+0x7c>)
    2608:	015b      	lsls	r3, r3, #5
    260a:	4413      	add	r3, r2
    260c:	781b      	ldrb	r3, [r3, #0]
    260e:	2b00      	cmp	r3, #0
    2610:	d10e      	bne.n	2630 <_usb_d_find_ep+0x58>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    2612:	79fb      	ldrb	r3, [r7, #7]
    2614:	f003 030f 	and.w	r3, r3, #15
    2618:	f997 200f 	ldrsb.w	r2, [r7, #15]
    261c:	490d      	ldr	r1, [pc, #52]	; (2654 <_usb_d_find_ep+0x7c>)
    261e:	0152      	lsls	r2, r2, #5
    2620:	440a      	add	r2, r1
    2622:	3201      	adds	r2, #1
    2624:	7812      	ldrb	r2, [r2, #0]
    2626:	4293      	cmp	r3, r2
    2628:	d102      	bne.n	2630 <_usb_d_find_ep+0x58>
			return i;
    262a:	f997 300f 	ldrsb.w	r3, [r7, #15]
    262e:	e00b      	b.n	2648 <_usb_d_find_ep+0x70>
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    2630:	f997 300f 	ldrsb.w	r3, [r7, #15]
    2634:	b2db      	uxtb	r3, r3
    2636:	3301      	adds	r3, #1
    2638:	b2db      	uxtb	r3, r3
    263a:	73fb      	strb	r3, [r7, #15]
    263c:	f997 300f 	ldrsb.w	r3, [r7, #15]
    2640:	2b03      	cmp	r3, #3
    2642:	ddd1      	ble.n	25e8 <_usb_d_find_ep+0x10>
		}
	}
	return -1;
    2644:	f04f 33ff 	mov.w	r3, #4294967295
}
    2648:	4618      	mov	r0, r3
    264a:	3714      	adds	r7, #20
    264c:	46bd      	mov	sp, r7
    264e:	f85d 7b04 	ldr.w	r7, [sp], #4
    2652:	4770      	bx	lr
    2654:	20000ad0 	.word	0x20000ad0

00002658 <_usb_d_trans>:
 * \param[in] size Transfer size.
 * \param[in] zlp Auto append ZLP for IN, or wait ZLP for OUT.
 */
static inline int32_t _usb_d_trans(const uint8_t ep, const bool dir, const uint8_t *buf, const uint32_t size,
                                   const uint8_t zlp)
{
    2658:	b580      	push	{r7, lr}
    265a:	b088      	sub	sp, #32
    265c:	af00      	add	r7, sp, #0
    265e:	60ba      	str	r2, [r7, #8]
    2660:	607b      	str	r3, [r7, #4]
    2662:	4603      	mov	r3, r0
    2664:	73fb      	strb	r3, [r7, #15]
    2666:	460b      	mov	r3, r1
    2668:	73bb      	strb	r3, [r7, #14]
	struct usb_d_transfer trans
    266a:	68bb      	ldr	r3, [r7, #8]
    266c:	617b      	str	r3, [r7, #20]
    266e:	687b      	ldr	r3, [r7, #4]
    2670:	61bb      	str	r3, [r7, #24]
    2672:	7bbb      	ldrb	r3, [r7, #14]
    2674:	2b00      	cmp	r3, #0
    2676:	d004      	beq.n	2682 <_usb_d_trans+0x2a>
    2678:	7bfb      	ldrb	r3, [r7, #15]
    267a:	f063 037f 	orn	r3, r3, #127	; 0x7f
    267e:	b2db      	uxtb	r3, r3
    2680:	e003      	b.n	268a <_usb_d_trans+0x32>
    2682:	7bfb      	ldrb	r3, [r7, #15]
    2684:	f003 030f 	and.w	r3, r3, #15
    2688:	b2db      	uxtb	r3, r3
    268a:	773b      	strb	r3, [r7, #28]
    268c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
    2690:	777b      	strb	r3, [r7, #29]
	    = {(uint8_t *)buf, size, dir ? (uint8_t)(ep | USB_EP_DIR) : (uint8_t)(ep & USB_EP_N_MASK), zlp};

	return _usb_d_dev_ep_trans(&trans);
    2692:	f107 0314 	add.w	r3, r7, #20
    2696:	4618      	mov	r0, r3
    2698:	4b03      	ldr	r3, [pc, #12]	; (26a8 <_usb_d_trans+0x50>)
    269a:	4798      	blx	r3
    269c:	4603      	mov	r3, r0
}
    269e:	4618      	mov	r0, r3
    26a0:	3720      	adds	r7, #32
    26a2:	46bd      	mov	sp, r7
    26a4:	bd80      	pop	{r7, pc}
    26a6:	bf00      	nop
    26a8:	00009ff9 	.word	0x00009ff9

000026ac <usb_d_dummy_cb_false>:
 * \param[in] unused1 Unused parameter.
 * \param[in] unused2 Unused parameter.
 * \return Always \c false.
 */
static bool usb_d_dummy_cb_false(uint32_t unused0, uint32_t unused1, uint32_t unused2)
{
    26ac:	b480      	push	{r7}
    26ae:	b085      	sub	sp, #20
    26b0:	af00      	add	r7, sp, #0
    26b2:	60f8      	str	r0, [r7, #12]
    26b4:	60b9      	str	r1, [r7, #8]
    26b6:	607a      	str	r2, [r7, #4]
	(void)unused0;
	(void)unused1;
	(void)unused2;
	return false;
    26b8:	2300      	movs	r3, #0
}
    26ba:	4618      	mov	r0, r3
    26bc:	3714      	adds	r7, #20
    26be:	46bd      	mov	sp, r7
    26c0:	f85d 7b04 	ldr.w	r7, [sp], #4
    26c4:	4770      	bx	lr
	...

000026c8 <usb_d_cb_trans_setup>:
/**
 * \brief Callback invoked when SETUP packet is ready
 * \param[in] ep Endpoint number with transfer direction on bit 8.
 */
static void usb_d_cb_trans_setup(const uint8_t ep)
{
    26c8:	b580      	push	{r7, lr}
    26ca:	b086      	sub	sp, #24
    26cc:	af00      	add	r7, sp, #0
    26ce:	4603      	mov	r3, r0
    26d0:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    26d2:	79fb      	ldrb	r3, [r7, #7]
    26d4:	4618      	mov	r0, r3
    26d6:	4b2a      	ldr	r3, [pc, #168]	; (2780 <usb_d_cb_trans_setup+0xb8>)
    26d8:	4798      	blx	r3
    26da:	4603      	mov	r3, r0
    26dc:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    26de:	f997 3017 	ldrsb.w	r3, [r7, #23]
    26e2:	015b      	lsls	r3, r3, #5
    26e4:	4a27      	ldr	r2, [pc, #156]	; (2784 <usb_d_cb_trans_setup+0xbc>)
    26e6:	4413      	add	r3, r2
    26e8:	613b      	str	r3, [r7, #16]
	uint8_t *        req      = ept->xfer.req;
    26ea:	693b      	ldr	r3, [r7, #16]
    26ec:	330c      	adds	r3, #12
    26ee:	60fb      	str	r3, [r7, #12]

	uint8_t n = _usb_d_dev_ep_read_req(ep, req);
    26f0:	79fb      	ldrb	r3, [r7, #7]
    26f2:	68f9      	ldr	r1, [r7, #12]
    26f4:	4618      	mov	r0, r3
    26f6:	4b24      	ldr	r3, [pc, #144]	; (2788 <usb_d_cb_trans_setup+0xc0>)
    26f8:	4798      	blx	r3
    26fa:	4603      	mov	r3, r0
    26fc:	72fb      	strb	r3, [r7, #11]
	if (n != 8) {
    26fe:	7afb      	ldrb	r3, [r7, #11]
    2700:	2b08      	cmp	r3, #8
    2702:	d00d      	beq.n	2720 <usb_d_cb_trans_setup+0x58>
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    2704:	79fb      	ldrb	r3, [r7, #7]
    2706:	2101      	movs	r1, #1
    2708:	4618      	mov	r0, r3
    270a:	4b20      	ldr	r3, [pc, #128]	; (278c <usb_d_cb_trans_setup+0xc4>)
    270c:	4798      	blx	r3
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    270e:	79fb      	ldrb	r3, [r7, #7]
    2710:	f063 037f 	orn	r3, r3, #127	; 0x7f
    2714:	b2db      	uxtb	r3, r3
    2716:	2101      	movs	r1, #1
    2718:	4618      	mov	r0, r3
    271a:	4b1c      	ldr	r3, [pc, #112]	; (278c <usb_d_cb_trans_setup+0xc4>)
    271c:	4798      	blx	r3
		return;
    271e:	e02b      	b.n	2778 <usb_d_cb_trans_setup+0xb0>
	}

	_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    2720:	79fb      	ldrb	r3, [r7, #7]
    2722:	2100      	movs	r1, #0
    2724:	4618      	mov	r0, r3
    2726:	4b19      	ldr	r3, [pc, #100]	; (278c <usb_d_cb_trans_setup+0xc4>)
    2728:	4798      	blx	r3
	_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_CLR);
    272a:	79fb      	ldrb	r3, [r7, #7]
    272c:	f063 037f 	orn	r3, r3, #127	; 0x7f
    2730:	b2db      	uxtb	r3, r3
    2732:	2100      	movs	r1, #0
    2734:	4618      	mov	r0, r3
    2736:	4b15      	ldr	r3, [pc, #84]	; (278c <usb_d_cb_trans_setup+0xc4>)
    2738:	4798      	blx	r3
	ept->xfer.hdr.state = USB_EP_S_IDLE;
    273a:	693b      	ldr	r3, [r7, #16]
    273c:	2201      	movs	r2, #1
    273e:	709a      	strb	r2, [r3, #2]
	if (!ept->callbacks.req(ep, req)) {
    2740:	693b      	ldr	r3, [r7, #16]
    2742:	695b      	ldr	r3, [r3, #20]
    2744:	79fa      	ldrb	r2, [r7, #7]
    2746:	68f9      	ldr	r1, [r7, #12]
    2748:	4610      	mov	r0, r2
    274a:	4798      	blx	r3
    274c:	4603      	mov	r3, r0
    274e:	f083 0301 	eor.w	r3, r3, #1
    2752:	b2db      	uxtb	r3, r3
    2754:	2b00      	cmp	r3, #0
    2756:	d00f      	beq.n	2778 <usb_d_cb_trans_setup+0xb0>
		ept->xfer.hdr.state = USB_EP_S_HALTED;
    2758:	693b      	ldr	r3, [r7, #16]
    275a:	2205      	movs	r2, #5
    275c:	709a      	strb	r2, [r3, #2]
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    275e:	79fb      	ldrb	r3, [r7, #7]
    2760:	2101      	movs	r1, #1
    2762:	4618      	mov	r0, r3
    2764:	4b09      	ldr	r3, [pc, #36]	; (278c <usb_d_cb_trans_setup+0xc4>)
    2766:	4798      	blx	r3
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    2768:	79fb      	ldrb	r3, [r7, #7]
    276a:	f063 037f 	orn	r3, r3, #127	; 0x7f
    276e:	b2db      	uxtb	r3, r3
    2770:	2101      	movs	r1, #1
    2772:	4618      	mov	r0, r3
    2774:	4b05      	ldr	r3, [pc, #20]	; (278c <usb_d_cb_trans_setup+0xc4>)
    2776:	4798      	blx	r3
	}
}
    2778:	3718      	adds	r7, #24
    277a:	46bd      	mov	sp, r7
    277c:	bd80      	pop	{r7, pc}
    277e:	bf00      	nop
    2780:	000025d9 	.word	0x000025d9
    2784:	20000ad0 	.word	0x20000ad0
    2788:	00009f51 	.word	0x00009f51
    278c:	00009dc9 	.word	0x00009dc9

00002790 <usb_d_cb_trans_more>:
 * \brief Callback invoked when request more data
 * \param[in] ep Endpoint number with transfer direction on bit 8.
 * \param[in] transfered Number of bytes transfered.
 */
static bool usb_d_cb_trans_more(const uint8_t ep, const uint32_t transfered)
{
    2790:	b580      	push	{r7, lr}
    2792:	b084      	sub	sp, #16
    2794:	af00      	add	r7, sp, #0
    2796:	4603      	mov	r3, r0
    2798:	6039      	str	r1, [r7, #0]
    279a:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    279c:	79fb      	ldrb	r3, [r7, #7]
    279e:	4618      	mov	r0, r3
    27a0:	4b0d      	ldr	r3, [pc, #52]	; (27d8 <usb_d_cb_trans_more+0x48>)
    27a2:	4798      	blx	r3
    27a4:	4603      	mov	r3, r0
    27a6:	73fb      	strb	r3, [r7, #15]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    27a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
    27ac:	015b      	lsls	r3, r3, #5
    27ae:	4a0b      	ldr	r2, [pc, #44]	; (27dc <usb_d_cb_trans_more+0x4c>)
    27b0:	4413      	add	r3, r2
    27b2:	60bb      	str	r3, [r7, #8]
	if (ept->xfer.hdr.state == USB_EP_S_X_DATA) {
    27b4:	68bb      	ldr	r3, [r7, #8]
    27b6:	789b      	ldrb	r3, [r3, #2]
    27b8:	2b03      	cmp	r3, #3
    27ba:	d107      	bne.n	27cc <usb_d_cb_trans_more+0x3c>
		return ept->callbacks.more(ep, transfered);
    27bc:	68bb      	ldr	r3, [r7, #8]
    27be:	699b      	ldr	r3, [r3, #24]
    27c0:	79fa      	ldrb	r2, [r7, #7]
    27c2:	6839      	ldr	r1, [r7, #0]
    27c4:	4610      	mov	r0, r2
    27c6:	4798      	blx	r3
    27c8:	4603      	mov	r3, r0
    27ca:	e000      	b.n	27ce <usb_d_cb_trans_more+0x3e>
	}
	return false;
    27cc:	2300      	movs	r3, #0
}
    27ce:	4618      	mov	r0, r3
    27d0:	3710      	adds	r7, #16
    27d2:	46bd      	mov	sp, r7
    27d4:	bd80      	pop	{r7, pc}
    27d6:	bf00      	nop
    27d8:	000025d9 	.word	0x000025d9
    27dc:	20000ad0 	.word	0x20000ad0

000027e0 <usb_d_ctrl_trans_done>:
/**
 * \brief Handles the case that control endpoint transactions are done
 * \param[in,out] ept Pointer to endpoint information.
 */
static inline void usb_d_ctrl_trans_done(struct usb_d_ep *ept)
{
    27e0:	b590      	push	{r4, r7, lr}
    27e2:	b087      	sub	sp, #28
    27e4:	af02      	add	r7, sp, #8
    27e6:	6078      	str	r0, [r7, #4]
	uint8_t state   = ept->xfer.hdr.state;
    27e8:	687b      	ldr	r3, [r7, #4]
    27ea:	789b      	ldrb	r3, [r3, #2]
    27ec:	73fb      	strb	r3, [r7, #15]
	bool    req_dir = USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN;
    27ee:	687b      	ldr	r3, [r7, #4]
    27f0:	7b1b      	ldrb	r3, [r3, #12]
    27f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
    27f6:	2b00      	cmp	r3, #0
    27f8:	bf14      	ite	ne
    27fa:	2301      	movne	r3, #1
    27fc:	2300      	moveq	r3, #0
    27fe:	73bb      	strb	r3, [r7, #14]

	if (state == USB_EP_S_X_DATA) {
    2800:	7bfb      	ldrb	r3, [r7, #15]
    2802:	2b03      	cmp	r3, #3
    2804:	d13a      	bne.n	287c <usb_d_ctrl_trans_done+0x9c>
		/* Data stage -> Status stage */
		bool err = ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DATA, ept->xfer.req);
    2806:	687b      	ldr	r3, [r7, #4]
    2808:	69db      	ldr	r3, [r3, #28]
    280a:	687a      	ldr	r2, [r7, #4]
    280c:	7850      	ldrb	r0, [r2, #1]
    280e:	687a      	ldr	r2, [r7, #4]
    2810:	320c      	adds	r2, #12
    2812:	2101      	movs	r1, #1
    2814:	4798      	blx	r3
    2816:	4603      	mov	r3, r0
    2818:	737b      	strb	r3, [r7, #13]
		if (err) {
    281a:	7b7b      	ldrb	r3, [r7, #13]
    281c:	2b00      	cmp	r3, #0
    281e:	d015      	beq.n	284c <usb_d_ctrl_trans_done+0x6c>
			ept->xfer.hdr.state  = USB_EP_S_HALTED;
    2820:	687b      	ldr	r3, [r7, #4]
    2822:	2205      	movs	r2, #5
    2824:	709a      	strb	r2, [r3, #2]
			ept->xfer.hdr.status = USB_XFER_HALT;
    2826:	687b      	ldr	r3, [r7, #4]
    2828:	2202      	movs	r2, #2
    282a:	70da      	strb	r2, [r3, #3]
			_usb_d_dev_ep_stall(req_dir ? ept->xfer.hdr.ep : (ept->xfer.hdr.ep | USB_EP_DIR), USB_EP_STALL_SET);
    282c:	7bbb      	ldrb	r3, [r7, #14]
    282e:	2b00      	cmp	r3, #0
    2830:	d002      	beq.n	2838 <usb_d_ctrl_trans_done+0x58>
    2832:	687b      	ldr	r3, [r7, #4]
    2834:	785b      	ldrb	r3, [r3, #1]
    2836:	e004      	b.n	2842 <usb_d_ctrl_trans_done+0x62>
    2838:	687b      	ldr	r3, [r7, #4]
    283a:	785b      	ldrb	r3, [r3, #1]
    283c:	f063 037f 	orn	r3, r3, #127	; 0x7f
    2840:	b2db      	uxtb	r3, r3
    2842:	2101      	movs	r1, #1
    2844:	4618      	mov	r0, r3
    2846:	4b15      	ldr	r3, [pc, #84]	; (289c <usb_d_ctrl_trans_done+0xbc>)
    2848:	4798      	blx	r3
	} else {
		/* Status stage done */
		ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DONE, ept->xfer.req);
		ept->xfer.hdr.state = USB_EP_S_X_SETUP;
	}
}
    284a:	e022      	b.n	2892 <usb_d_ctrl_trans_done+0xb2>
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    284c:	687b      	ldr	r3, [r7, #4]
    284e:	2204      	movs	r2, #4
    2850:	709a      	strb	r2, [r3, #2]
			_usb_d_trans(ept->xfer.hdr.ep, !req_dir, NULL, 0, 1);
    2852:	687b      	ldr	r3, [r7, #4]
    2854:	7858      	ldrb	r0, [r3, #1]
    2856:	7bbb      	ldrb	r3, [r7, #14]
    2858:	2b00      	cmp	r3, #0
    285a:	bf14      	ite	ne
    285c:	2301      	movne	r3, #1
    285e:	2300      	moveq	r3, #0
    2860:	b2db      	uxtb	r3, r3
    2862:	f083 0301 	eor.w	r3, r3, #1
    2866:	b2db      	uxtb	r3, r3
    2868:	f003 0301 	and.w	r3, r3, #1
    286c:	b2d9      	uxtb	r1, r3
    286e:	2301      	movs	r3, #1
    2870:	9300      	str	r3, [sp, #0]
    2872:	2300      	movs	r3, #0
    2874:	2200      	movs	r2, #0
    2876:	4c0a      	ldr	r4, [pc, #40]	; (28a0 <usb_d_ctrl_trans_done+0xc0>)
    2878:	47a0      	blx	r4
}
    287a:	e00a      	b.n	2892 <usb_d_ctrl_trans_done+0xb2>
		ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DONE, ept->xfer.req);
    287c:	687b      	ldr	r3, [r7, #4]
    287e:	69db      	ldr	r3, [r3, #28]
    2880:	687a      	ldr	r2, [r7, #4]
    2882:	7850      	ldrb	r0, [r2, #1]
    2884:	687a      	ldr	r2, [r7, #4]
    2886:	320c      	adds	r2, #12
    2888:	2100      	movs	r1, #0
    288a:	4798      	blx	r3
		ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    288c:	687b      	ldr	r3, [r7, #4]
    288e:	2202      	movs	r2, #2
    2890:	709a      	strb	r2, [r3, #2]
}
    2892:	bf00      	nop
    2894:	3714      	adds	r7, #20
    2896:	46bd      	mov	sp, r7
    2898:	bd90      	pop	{r4, r7, pc}
    289a:	bf00      	nop
    289c:	00009dc9 	.word	0x00009dc9
    28a0:	00002659 	.word	0x00002659

000028a4 <_usb_d_cb_trans_done>:

/**
 * Callback when USB transactions are finished.
 */
static void _usb_d_cb_trans_done(const uint8_t ep, const int32_t code, const uint32_t transferred)
{
    28a4:	b580      	push	{r7, lr}
    28a6:	b086      	sub	sp, #24
    28a8:	af00      	add	r7, sp, #0
    28aa:	4603      	mov	r3, r0
    28ac:	60b9      	str	r1, [r7, #8]
    28ae:	607a      	str	r2, [r7, #4]
    28b0:	73fb      	strb	r3, [r7, #15]
	int8_t           ep_index = _usb_d_find_ep(ep);
    28b2:	7bfb      	ldrb	r3, [r7, #15]
    28b4:	4618      	mov	r0, r3
    28b6:	4b2f      	ldr	r3, [pc, #188]	; (2974 <_usb_d_cb_trans_done+0xd0>)
    28b8:	4798      	blx	r3
    28ba:	4603      	mov	r3, r0
    28bc:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    28be:	f997 3017 	ldrsb.w	r3, [r7, #23]
    28c2:	015b      	lsls	r3, r3, #5
    28c4:	4a2c      	ldr	r2, [pc, #176]	; (2978 <_usb_d_cb_trans_done+0xd4>)
    28c6:	4413      	add	r3, r2
    28c8:	613b      	str	r3, [r7, #16]

	if (code == USB_TRANS_DONE) {
    28ca:	68bb      	ldr	r3, [r7, #8]
    28cc:	2b00      	cmp	r3, #0
    28ce:	d10e      	bne.n	28ee <_usb_d_cb_trans_done+0x4a>
		ept->xfer.hdr.status = USB_XFER_DONE;
    28d0:	693b      	ldr	r3, [r7, #16]
    28d2:	2200      	movs	r2, #0
    28d4:	70da      	strb	r2, [r3, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    28d6:	693b      	ldr	r3, [r7, #16]
    28d8:	781b      	ldrb	r3, [r3, #0]
    28da:	2b00      	cmp	r3, #0
    28dc:	d103      	bne.n	28e6 <_usb_d_cb_trans_done+0x42>
			usb_d_ctrl_trans_done(ept);
    28de:	6938      	ldr	r0, [r7, #16]
    28e0:	4b26      	ldr	r3, [pc, #152]	; (297c <_usb_d_cb_trans_done+0xd8>)
    28e2:	4798      	blx	r3
			return;
    28e4:	e043      	b.n	296e <_usb_d_cb_trans_done+0xca>
		}
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    28e6:	693b      	ldr	r3, [r7, #16]
    28e8:	2201      	movs	r2, #1
    28ea:	709a      	strb	r2, [r3, #2]
    28ec:	e038      	b.n	2960 <_usb_d_cb_trans_done+0xbc>
	} else if (code == USB_TRANS_STALL) {
    28ee:	68bb      	ldr	r3, [r7, #8]
    28f0:	2b01      	cmp	r3, #1
    28f2:	d113      	bne.n	291c <_usb_d_cb_trans_done+0x78>
		ept->xfer.hdr.status = USB_XFER_HALT;
    28f4:	693b      	ldr	r3, [r7, #16]
    28f6:	2202      	movs	r2, #2
    28f8:	70da      	strb	r2, [r3, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    28fa:	693b      	ldr	r3, [r7, #16]
    28fc:	781b      	ldrb	r3, [r3, #0]
    28fe:	2b00      	cmp	r3, #0
    2900:	d108      	bne.n	2914 <_usb_d_cb_trans_done+0x70>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    2902:	693b      	ldr	r3, [r7, #16]
    2904:	2202      	movs	r2, #2
    2906:	709a      	strb	r2, [r3, #2]
			_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    2908:	7bfb      	ldrb	r3, [r7, #15]
    290a:	2100      	movs	r1, #0
    290c:	4618      	mov	r0, r3
    290e:	4b1c      	ldr	r3, [pc, #112]	; (2980 <_usb_d_cb_trans_done+0xdc>)
    2910:	4798      	blx	r3
    2912:	e025      	b.n	2960 <_usb_d_cb_trans_done+0xbc>
		} else {
			ept->xfer.hdr.state = USB_EP_S_HALTED;
    2914:	693b      	ldr	r3, [r7, #16]
    2916:	2205      	movs	r2, #5
    2918:	709a      	strb	r2, [r3, #2]
    291a:	e021      	b.n	2960 <_usb_d_cb_trans_done+0xbc>
		}
	} else if (code == USB_TRANS_ABORT) {
    291c:	68bb      	ldr	r3, [r7, #8]
    291e:	2b02      	cmp	r3, #2
    2920:	d10e      	bne.n	2940 <_usb_d_cb_trans_done+0x9c>
		ept->xfer.hdr.status = USB_XFER_ABORT;
    2922:	693b      	ldr	r3, [r7, #16]
    2924:	2204      	movs	r2, #4
    2926:	70da      	strb	r2, [r3, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    2928:	693b      	ldr	r3, [r7, #16]
    292a:	781b      	ldrb	r3, [r3, #0]
    292c:	2b00      	cmp	r3, #0
    292e:	d103      	bne.n	2938 <_usb_d_cb_trans_done+0x94>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    2930:	693b      	ldr	r3, [r7, #16]
    2932:	2202      	movs	r2, #2
    2934:	709a      	strb	r2, [r3, #2]
			return;
    2936:	e01a      	b.n	296e <_usb_d_cb_trans_done+0xca>
		}
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    2938:	693b      	ldr	r3, [r7, #16]
    293a:	2201      	movs	r2, #1
    293c:	709a      	strb	r2, [r3, #2]
    293e:	e00f      	b.n	2960 <_usb_d_cb_trans_done+0xbc>
	} else if (code == USB_TRANS_RESET) {
    2940:	68bb      	ldr	r3, [r7, #8]
    2942:	2b03      	cmp	r3, #3
    2944:	d106      	bne.n	2954 <_usb_d_cb_trans_done+0xb0>
		ept->xfer.hdr.state  = USB_EP_S_DISABLED;
    2946:	693b      	ldr	r3, [r7, #16]
    2948:	2200      	movs	r2, #0
    294a:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_RESET;
    294c:	693b      	ldr	r3, [r7, #16]
    294e:	2205      	movs	r2, #5
    2950:	70da      	strb	r2, [r3, #3]
    2952:	e005      	b.n	2960 <_usb_d_cb_trans_done+0xbc>
	} else {
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
    2954:	693b      	ldr	r3, [r7, #16]
    2956:	2206      	movs	r2, #6
    2958:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_ERROR;
    295a:	693b      	ldr	r3, [r7, #16]
    295c:	2206      	movs	r2, #6
    295e:	70da      	strb	r2, [r3, #3]
	}

	ept->callbacks.xfer(ep, (enum usb_xfer_code)ept->xfer.hdr.status, (void *)transferred);
    2960:	693b      	ldr	r3, [r7, #16]
    2962:	69db      	ldr	r3, [r3, #28]
    2964:	693a      	ldr	r2, [r7, #16]
    2966:	78d1      	ldrb	r1, [r2, #3]
    2968:	687a      	ldr	r2, [r7, #4]
    296a:	7bf8      	ldrb	r0, [r7, #15]
    296c:	4798      	blx	r3
}
    296e:	3718      	adds	r7, #24
    2970:	46bd      	mov	sp, r7
    2972:	bd80      	pop	{r7, pc}
    2974:	000025d9 	.word	0x000025d9
    2978:	20000ad0 	.word	0x20000ad0
    297c:	000027e1 	.word	0x000027e1
    2980:	00009dc9 	.word	0x00009dc9

00002984 <usb_d_init>:

int32_t usb_d_init(void)
{
    2984:	b580      	push	{r7, lr}
    2986:	b082      	sub	sp, #8
    2988:	af00      	add	r7, sp, #0
	int32_t rc = _usb_d_dev_init();
    298a:	4b21      	ldr	r3, [pc, #132]	; (2a10 <usb_d_init+0x8c>)
    298c:	4798      	blx	r3
    298e:	6038      	str	r0, [r7, #0]
	uint8_t i;
	if (rc < 0) {
    2990:	683b      	ldr	r3, [r7, #0]
    2992:	2b00      	cmp	r3, #0
    2994:	da01      	bge.n	299a <usb_d_init+0x16>
		return rc;
    2996:	683b      	ldr	r3, [r7, #0]
    2998:	e036      	b.n	2a08 <usb_d_init+0x84>
	}
	memset(usb_d_inst.ep, 0x00, sizeof(struct usb_d_ep) * CONF_USB_D_NUM_EP_SP);
    299a:	2280      	movs	r2, #128	; 0x80
    299c:	2100      	movs	r1, #0
    299e:	481d      	ldr	r0, [pc, #116]	; (2a14 <usb_d_init+0x90>)
    29a0:	4b1d      	ldr	r3, [pc, #116]	; (2a18 <usb_d_init+0x94>)
    29a2:	4798      	blx	r3
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    29a4:	2300      	movs	r3, #0
    29a6:	71fb      	strb	r3, [r7, #7]
    29a8:	e01e      	b.n	29e8 <usb_d_init+0x64>
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
    29aa:	79fb      	ldrb	r3, [r7, #7]
    29ac:	4a19      	ldr	r2, [pc, #100]	; (2a14 <usb_d_init+0x90>)
    29ae:	015b      	lsls	r3, r3, #5
    29b0:	4413      	add	r3, r2
    29b2:	3301      	adds	r3, #1
    29b4:	22ff      	movs	r2, #255	; 0xff
    29b6:	701a      	strb	r2, [r3, #0]
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    29b8:	79fb      	ldrb	r3, [r7, #7]
    29ba:	4a16      	ldr	r2, [pc, #88]	; (2a14 <usb_d_init+0x90>)
    29bc:	015b      	lsls	r3, r3, #5
    29be:	4413      	add	r3, r2
    29c0:	3314      	adds	r3, #20
    29c2:	4a16      	ldr	r2, [pc, #88]	; (2a1c <usb_d_init+0x98>)
    29c4:	601a      	str	r2, [r3, #0]
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
    29c6:	79fb      	ldrb	r3, [r7, #7]
    29c8:	4a12      	ldr	r2, [pc, #72]	; (2a14 <usb_d_init+0x90>)
    29ca:	015b      	lsls	r3, r3, #5
    29cc:	4413      	add	r3, r2
    29ce:	3318      	adds	r3, #24
    29d0:	4a12      	ldr	r2, [pc, #72]	; (2a1c <usb_d_init+0x98>)
    29d2:	601a      	str	r2, [r3, #0]
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
    29d4:	79fb      	ldrb	r3, [r7, #7]
    29d6:	4a0f      	ldr	r2, [pc, #60]	; (2a14 <usb_d_init+0x90>)
    29d8:	015b      	lsls	r3, r3, #5
    29da:	4413      	add	r3, r2
    29dc:	331c      	adds	r3, #28
    29de:	4a0f      	ldr	r2, [pc, #60]	; (2a1c <usb_d_init+0x98>)
    29e0:	601a      	str	r2, [r3, #0]
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    29e2:	79fb      	ldrb	r3, [r7, #7]
    29e4:	3301      	adds	r3, #1
    29e6:	71fb      	strb	r3, [r7, #7]
    29e8:	79fb      	ldrb	r3, [r7, #7]
    29ea:	2b03      	cmp	r3, #3
    29ec:	d9dd      	bls.n	29aa <usb_d_init+0x26>
	}
	/* Handles device driver endpoint callbacks to build transfer. */
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_SETUP, (FUNC_PTR)usb_d_cb_trans_setup);
    29ee:	490c      	ldr	r1, [pc, #48]	; (2a20 <usb_d_init+0x9c>)
    29f0:	2000      	movs	r0, #0
    29f2:	4b0c      	ldr	r3, [pc, #48]	; (2a24 <usb_d_init+0xa0>)
    29f4:	4798      	blx	r3
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_MORE, (FUNC_PTR)usb_d_cb_trans_more);
    29f6:	490c      	ldr	r1, [pc, #48]	; (2a28 <usb_d_init+0xa4>)
    29f8:	2001      	movs	r0, #1
    29fa:	4b0a      	ldr	r3, [pc, #40]	; (2a24 <usb_d_init+0xa0>)
    29fc:	4798      	blx	r3
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_DONE, (FUNC_PTR)_usb_d_cb_trans_done);
    29fe:	490b      	ldr	r1, [pc, #44]	; (2a2c <usb_d_init+0xa8>)
    2a00:	2002      	movs	r0, #2
    2a02:	4b08      	ldr	r3, [pc, #32]	; (2a24 <usb_d_init+0xa0>)
    2a04:	4798      	blx	r3
	return ERR_NONE;
    2a06:	2300      	movs	r3, #0
}
    2a08:	4618      	mov	r0, r3
    2a0a:	3708      	adds	r7, #8
    2a0c:	46bd      	mov	sp, r7
    2a0e:	bd80      	pop	{r7, pc}
    2a10:	00009611 	.word	0x00009611
    2a14:	20000ad0 	.word	0x20000ad0
    2a18:	00012c5d 	.word	0x00012c5d
    2a1c:	000026ad 	.word	0x000026ad
    2a20:	000026c9 	.word	0x000026c9
    2a24:	0000a205 	.word	0x0000a205
    2a28:	00002791 	.word	0x00002791
    2a2c:	000028a5 	.word	0x000028a5

00002a30 <usb_d_register_callback>:
{
	_usb_d_dev_deinit();
}

void usb_d_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
    2a30:	b580      	push	{r7, lr}
    2a32:	b082      	sub	sp, #8
    2a34:	af00      	add	r7, sp, #0
    2a36:	4603      	mov	r3, r0
    2a38:	6039      	str	r1, [r7, #0]
    2a3a:	71fb      	strb	r3, [r7, #7]
	/* Directly uses device driver callback. */
	_usb_d_dev_register_callback(type, func);
    2a3c:	79fb      	ldrb	r3, [r7, #7]
    2a3e:	6839      	ldr	r1, [r7, #0]
    2a40:	4618      	mov	r0, r3
    2a42:	4b03      	ldr	r3, [pc, #12]	; (2a50 <usb_d_register_callback+0x20>)
    2a44:	4798      	blx	r3
}
    2a46:	bf00      	nop
    2a48:	3708      	adds	r7, #8
    2a4a:	46bd      	mov	sp, r7
    2a4c:	bd80      	pop	{r7, pc}
    2a4e:	bf00      	nop
    2a50:	0000a1bd 	.word	0x0000a1bd

00002a54 <usb_d_enable>:

int32_t usb_d_enable(void)
{
    2a54:	b580      	push	{r7, lr}
    2a56:	af00      	add	r7, sp, #0
	return _usb_d_dev_enable();
    2a58:	4b02      	ldr	r3, [pc, #8]	; (2a64 <usb_d_enable+0x10>)
    2a5a:	4798      	blx	r3
    2a5c:	4603      	mov	r3, r0
}
    2a5e:	4618      	mov	r0, r3
    2a60:	bd80      	pop	{r7, pc}
    2a62:	bf00      	nop
    2a64:	00009701 	.word	0x00009701

00002a68 <usb_d_attach>:
{
	_usb_d_dev_disable();
}

void usb_d_attach(void)
{
    2a68:	b580      	push	{r7, lr}
    2a6a:	af00      	add	r7, sp, #0
	_usb_d_dev_attach();
    2a6c:	4b01      	ldr	r3, [pc, #4]	; (2a74 <usb_d_attach+0xc>)
    2a6e:	4798      	blx	r3
}
    2a70:	bf00      	nop
    2a72:	bd80      	pop	{r7, pc}
    2a74:	00009785 	.word	0x00009785

00002a78 <usb_d_set_address>:
{
	return _usb_d_dev_get_uframe_n();
}

void usb_d_set_address(const uint8_t addr)
{
    2a78:	b580      	push	{r7, lr}
    2a7a:	b082      	sub	sp, #8
    2a7c:	af00      	add	r7, sp, #0
    2a7e:	4603      	mov	r3, r0
    2a80:	71fb      	strb	r3, [r7, #7]
	_usb_d_dev_set_address(addr);
    2a82:	79fb      	ldrb	r3, [r7, #7]
    2a84:	4618      	mov	r0, r3
    2a86:	4b03      	ldr	r3, [pc, #12]	; (2a94 <usb_d_set_address+0x1c>)
    2a88:	4798      	blx	r3
}
    2a8a:	bf00      	nop
    2a8c:	3708      	adds	r7, #8
    2a8e:	46bd      	mov	sp, r7
    2a90:	bd80      	pop	{r7, pc}
    2a92:	bf00      	nop
    2a94:	00009799 	.word	0x00009799

00002a98 <usb_d_ep0_init>:
{
	_usb_d_dev_send_remotewakeup();
}

int32_t usb_d_ep0_init(const uint8_t max_pkt_size)
{
    2a98:	b580      	push	{r7, lr}
    2a9a:	b082      	sub	sp, #8
    2a9c:	af00      	add	r7, sp, #0
    2a9e:	4603      	mov	r3, r0
    2aa0:	71fb      	strb	r3, [r7, #7]
	return usb_d_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_size);
    2aa2:	79fb      	ldrb	r3, [r7, #7]
    2aa4:	b29b      	uxth	r3, r3
    2aa6:	461a      	mov	r2, r3
    2aa8:	2100      	movs	r1, #0
    2aaa:	2000      	movs	r0, #0
    2aac:	4b03      	ldr	r3, [pc, #12]	; (2abc <usb_d_ep0_init+0x24>)
    2aae:	4798      	blx	r3
    2ab0:	4603      	mov	r3, r0
}
    2ab2:	4618      	mov	r0, r3
    2ab4:	3708      	adds	r7, #8
    2ab6:	46bd      	mov	sp, r7
    2ab8:	bd80      	pop	{r7, pc}
    2aba:	bf00      	nop
    2abc:	00002ac1 	.word	0x00002ac1

00002ac0 <usb_d_ep_init>:

int32_t usb_d_ep_init(const uint8_t ep, const uint8_t attr, const uint16_t max_pkt_size)
{
    2ac0:	b580      	push	{r7, lr}
    2ac2:	b086      	sub	sp, #24
    2ac4:	af00      	add	r7, sp, #0
    2ac6:	4603      	mov	r3, r0
    2ac8:	71fb      	strb	r3, [r7, #7]
    2aca:	460b      	mov	r3, r1
    2acc:	71bb      	strb	r3, [r7, #6]
    2ace:	4613      	mov	r3, r2
    2ad0:	80bb      	strh	r3, [r7, #4]
	int32_t          rc;
	int8_t           ep_index = _usb_d_find_ep(ep);
    2ad2:	79fb      	ldrb	r3, [r7, #7]
    2ad4:	4618      	mov	r0, r3
    2ad6:	4b1e      	ldr	r3, [pc, #120]	; (2b50 <usb_d_ep_init+0x90>)
    2ad8:	4798      	blx	r3
    2ada:	4603      	mov	r3, r0
    2adc:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    2ade:	f997 3017 	ldrsb.w	r3, [r7, #23]
    2ae2:	015b      	lsls	r3, r3, #5
    2ae4:	4a1b      	ldr	r2, [pc, #108]	; (2b54 <usb_d_ep_init+0x94>)
    2ae6:	4413      	add	r3, r2
    2ae8:	613b      	str	r3, [r7, #16]
	if (ep_index >= 0) {
    2aea:	f997 3017 	ldrsb.w	r3, [r7, #23]
    2aee:	2b00      	cmp	r3, #0
    2af0:	db02      	blt.n	2af8 <usb_d_ep_init+0x38>
		return -USB_ERR_REDO;
    2af2:	f06f 0313 	mvn.w	r3, #19
    2af6:	e027      	b.n	2b48 <usb_d_ep_init+0x88>
	} else {
		ep_index = _usb_d_find_ep(0xFF);
    2af8:	20ff      	movs	r0, #255	; 0xff
    2afa:	4b15      	ldr	r3, [pc, #84]	; (2b50 <usb_d_ep_init+0x90>)
    2afc:	4798      	blx	r3
    2afe:	4603      	mov	r3, r0
    2b00:	75fb      	strb	r3, [r7, #23]
		if (ep_index < 0) {
    2b02:	f997 3017 	ldrsb.w	r3, [r7, #23]
    2b06:	2b00      	cmp	r3, #0
    2b08:	da02      	bge.n	2b10 <usb_d_ep_init+0x50>
			return -USB_ERR_ALLOC_FAIL;
    2b0a:	f06f 0314 	mvn.w	r3, #20
    2b0e:	e01b      	b.n	2b48 <usb_d_ep_init+0x88>
		}
		ept = &usb_d_inst.ep[ep_index];
    2b10:	f997 3017 	ldrsb.w	r3, [r7, #23]
    2b14:	015b      	lsls	r3, r3, #5
    2b16:	4a0f      	ldr	r2, [pc, #60]	; (2b54 <usb_d_ep_init+0x94>)
    2b18:	4413      	add	r3, r2
    2b1a:	613b      	str	r3, [r7, #16]
	}
	rc = _usb_d_dev_ep_init(ep, attr, max_pkt_size);
    2b1c:	88ba      	ldrh	r2, [r7, #4]
    2b1e:	79b9      	ldrb	r1, [r7, #6]
    2b20:	79fb      	ldrb	r3, [r7, #7]
    2b22:	4618      	mov	r0, r3
    2b24:	4b0c      	ldr	r3, [pc, #48]	; (2b58 <usb_d_ep_init+0x98>)
    2b26:	4798      	blx	r3
    2b28:	60f8      	str	r0, [r7, #12]
	if (rc < 0) {
    2b2a:	68fb      	ldr	r3, [r7, #12]
    2b2c:	2b00      	cmp	r3, #0
    2b2e:	da01      	bge.n	2b34 <usb_d_ep_init+0x74>
		return rc;
    2b30:	68fb      	ldr	r3, [r7, #12]
    2b32:	e009      	b.n	2b48 <usb_d_ep_init+0x88>
	}
	ept->xfer.hdr.ep   = ep;
    2b34:	693b      	ldr	r3, [r7, #16]
    2b36:	79fa      	ldrb	r2, [r7, #7]
    2b38:	705a      	strb	r2, [r3, #1]
	ept->xfer.hdr.type = attr & USB_EP_XTYPE_MASK;
    2b3a:	79bb      	ldrb	r3, [r7, #6]
    2b3c:	f003 0303 	and.w	r3, r3, #3
    2b40:	b2da      	uxtb	r2, r3
    2b42:	693b      	ldr	r3, [r7, #16]
    2b44:	701a      	strb	r2, [r3, #0]
	return ERR_NONE;
    2b46:	2300      	movs	r3, #0
}
    2b48:	4618      	mov	r0, r3
    2b4a:	3718      	adds	r7, #24
    2b4c:	46bd      	mov	sp, r7
    2b4e:	bd80      	pop	{r7, pc}
    2b50:	000025d9 	.word	0x000025d9
    2b54:	20000ad0 	.word	0x20000ad0
    2b58:	00009839 	.word	0x00009839

00002b5c <usb_d_ep_deinit>:

void usb_d_ep_deinit(const uint8_t ep)
{
    2b5c:	b580      	push	{r7, lr}
    2b5e:	b084      	sub	sp, #16
    2b60:	af00      	add	r7, sp, #0
    2b62:	4603      	mov	r3, r0
    2b64:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    2b66:	79fb      	ldrb	r3, [r7, #7]
    2b68:	4618      	mov	r0, r3
    2b6a:	4b0d      	ldr	r3, [pc, #52]	; (2ba0 <usb_d_ep_deinit+0x44>)
    2b6c:	4798      	blx	r3
    2b6e:	4603      	mov	r3, r0
    2b70:	73fb      	strb	r3, [r7, #15]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    2b72:	f997 300f 	ldrsb.w	r3, [r7, #15]
    2b76:	015b      	lsls	r3, r3, #5
    2b78:	4a0a      	ldr	r2, [pc, #40]	; (2ba4 <usb_d_ep_deinit+0x48>)
    2b7a:	4413      	add	r3, r2
    2b7c:	60bb      	str	r3, [r7, #8]
	if (ep_index < 0) {
    2b7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
    2b82:	2b00      	cmp	r3, #0
    2b84:	db07      	blt.n	2b96 <usb_d_ep_deinit+0x3a>
		return;
	}
	_usb_d_dev_ep_deinit(ep);
    2b86:	79fb      	ldrb	r3, [r7, #7]
    2b88:	4618      	mov	r0, r3
    2b8a:	4b07      	ldr	r3, [pc, #28]	; (2ba8 <usb_d_ep_deinit+0x4c>)
    2b8c:	4798      	blx	r3
	ept->xfer.hdr.ep = 0xFF;
    2b8e:	68bb      	ldr	r3, [r7, #8]
    2b90:	22ff      	movs	r2, #255	; 0xff
    2b92:	705a      	strb	r2, [r3, #1]
    2b94:	e000      	b.n	2b98 <usb_d_ep_deinit+0x3c>
		return;
    2b96:	bf00      	nop
}
    2b98:	3710      	adds	r7, #16
    2b9a:	46bd      	mov	sp, r7
    2b9c:	bd80      	pop	{r7, pc}
    2b9e:	bf00      	nop
    2ba0:	000025d9 	.word	0x000025d9
    2ba4:	20000ad0 	.word	0x20000ad0
    2ba8:	0000996d 	.word	0x0000996d

00002bac <usb_d_ep_enable>:

int32_t usb_d_ep_enable(const uint8_t ep)
{
    2bac:	b580      	push	{r7, lr}
    2bae:	b086      	sub	sp, #24
    2bb0:	af00      	add	r7, sp, #0
    2bb2:	4603      	mov	r3, r0
    2bb4:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    2bb6:	79fb      	ldrb	r3, [r7, #7]
    2bb8:	4618      	mov	r0, r3
    2bba:	4b15      	ldr	r3, [pc, #84]	; (2c10 <usb_d_ep_enable+0x64>)
    2bbc:	4798      	blx	r3
    2bbe:	4603      	mov	r3, r0
    2bc0:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    2bc2:	f997 3017 	ldrsb.w	r3, [r7, #23]
    2bc6:	015b      	lsls	r3, r3, #5
    2bc8:	4a12      	ldr	r2, [pc, #72]	; (2c14 <usb_d_ep_enable+0x68>)
    2bca:	4413      	add	r3, r2
    2bcc:	613b      	str	r3, [r7, #16]
	int32_t          rc;
	if (ep_index < 0) {
    2bce:	f997 3017 	ldrsb.w	r3, [r7, #23]
    2bd2:	2b00      	cmp	r3, #0
    2bd4:	da02      	bge.n	2bdc <usb_d_ep_enable+0x30>
		return -USB_ERR_PARAM;
    2bd6:	f06f 0311 	mvn.w	r3, #17
    2bda:	e014      	b.n	2c06 <usb_d_ep_enable+0x5a>
	}
	ept->xfer.hdr.state = (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) ? USB_EP_S_X_SETUP : USB_EP_S_IDLE;
    2bdc:	693b      	ldr	r3, [r7, #16]
    2bde:	781b      	ldrb	r3, [r3, #0]
    2be0:	2b00      	cmp	r3, #0
    2be2:	d101      	bne.n	2be8 <usb_d_ep_enable+0x3c>
    2be4:	2202      	movs	r2, #2
    2be6:	e000      	b.n	2bea <usb_d_ep_enable+0x3e>
    2be8:	2201      	movs	r2, #1
    2bea:	693b      	ldr	r3, [r7, #16]
    2bec:	709a      	strb	r2, [r3, #2]
	rc                  = _usb_d_dev_ep_enable(ep);
    2bee:	79fb      	ldrb	r3, [r7, #7]
    2bf0:	4618      	mov	r0, r3
    2bf2:	4b09      	ldr	r3, [pc, #36]	; (2c18 <usb_d_ep_enable+0x6c>)
    2bf4:	4798      	blx	r3
    2bf6:	60f8      	str	r0, [r7, #12]
	if (rc < 0) {
    2bf8:	68fb      	ldr	r3, [r7, #12]
    2bfa:	2b00      	cmp	r3, #0
    2bfc:	da02      	bge.n	2c04 <usb_d_ep_enable+0x58>
		ept->xfer.hdr.state = USB_EP_S_DISABLED;
    2bfe:	693b      	ldr	r3, [r7, #16]
    2c00:	2200      	movs	r2, #0
    2c02:	709a      	strb	r2, [r3, #2]
	}
	return rc;
    2c04:	68fb      	ldr	r3, [r7, #12]
}
    2c06:	4618      	mov	r0, r3
    2c08:	3718      	adds	r7, #24
    2c0a:	46bd      	mov	sp, r7
    2c0c:	bd80      	pop	{r7, pc}
    2c0e:	bf00      	nop
    2c10:	000025d9 	.word	0x000025d9
    2c14:	20000ad0 	.word	0x20000ad0
    2c18:	00009a51 	.word	0x00009a51

00002c1c <usb_d_ep_transfer>:
	}
	return usb_d_inst.ep[ep_index].xfer.req;
}

int32_t usb_d_ep_transfer(const struct usb_d_transfer *xfer)
{
    2c1c:	b590      	push	{r4, r7, lr}
    2c1e:	b08d      	sub	sp, #52	; 0x34
    2c20:	af02      	add	r7, sp, #8
    2c22:	6078      	str	r0, [r7, #4]
	int8_t                ep_index = _usb_d_find_ep(xfer->ep);
    2c24:	687b      	ldr	r3, [r7, #4]
    2c26:	7a1b      	ldrb	r3, [r3, #8]
    2c28:	4618      	mov	r0, r3
    2c2a:	4b51      	ldr	r3, [pc, #324]	; (2d70 <usb_d_ep_transfer+0x154>)
    2c2c:	4798      	blx	r3
    2c2e:	4603      	mov	r3, r0
    2c30:	77fb      	strb	r3, [r7, #31]
	struct usb_d_ep *     ept      = &usb_d_inst.ep[ep_index];
    2c32:	f997 301f 	ldrsb.w	r3, [r7, #31]
    2c36:	015b      	lsls	r3, r3, #5
    2c38:	4a4e      	ldr	r2, [pc, #312]	; (2d74 <usb_d_ep_transfer+0x158>)
    2c3a:	4413      	add	r3, r2
    2c3c:	61bb      	str	r3, [r7, #24]
	bool                  dir = USB_EP_GET_DIR(xfer->ep), zlp = xfer->zlp;
    2c3e:	687b      	ldr	r3, [r7, #4]
    2c40:	7a1b      	ldrb	r3, [r3, #8]
    2c42:	f003 0380 	and.w	r3, r3, #128	; 0x80
    2c46:	2b00      	cmp	r3, #0
    2c48:	bf14      	ite	ne
    2c4a:	2301      	movne	r3, #1
    2c4c:	2300      	moveq	r3, #0
    2c4e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    2c52:	687b      	ldr	r3, [r7, #4]
    2c54:	7a5b      	ldrb	r3, [r3, #9]
    2c56:	2b00      	cmp	r3, #0
    2c58:	bf14      	ite	ne
    2c5a:	2301      	movne	r3, #1
    2c5c:	2300      	moveq	r3, #0
    2c5e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint32_t              len = xfer->size;
    2c62:	687b      	ldr	r3, [r7, #4]
    2c64:	685b      	ldr	r3, [r3, #4]
    2c66:	623b      	str	r3, [r7, #32]
	int32_t               rc;
	volatile uint8_t      state;
	volatile hal_atomic_t flags;

	if (ep_index < 0) {
    2c68:	f997 301f 	ldrsb.w	r3, [r7, #31]
    2c6c:	2b00      	cmp	r3, #0
    2c6e:	da02      	bge.n	2c76 <usb_d_ep_transfer+0x5a>
		return -USB_ERR_PARAM;
    2c70:	f06f 0311 	mvn.w	r3, #17
    2c74:	e077      	b.n	2d66 <usb_d_ep_transfer+0x14a>
	}

	atomic_enter_critical(&flags);
    2c76:	f107 0308 	add.w	r3, r7, #8
    2c7a:	4618      	mov	r0, r3
    2c7c:	4b3e      	ldr	r3, [pc, #248]	; (2d78 <usb_d_ep_transfer+0x15c>)
    2c7e:	4798      	blx	r3
	state = ept->xfer.hdr.state;
    2c80:	69bb      	ldr	r3, [r7, #24]
    2c82:	789b      	ldrb	r3, [r3, #2]
    2c84:	73fb      	strb	r3, [r7, #15]
	if (state == USB_EP_S_IDLE) {
    2c86:	7bfb      	ldrb	r3, [r7, #15]
    2c88:	b2db      	uxtb	r3, r3
    2c8a:	2b01      	cmp	r3, #1
    2c8c:	d10c      	bne.n	2ca8 <usb_d_ep_transfer+0x8c>
		ept->xfer.hdr.state = USB_EP_S_X_DATA;
    2c8e:	69bb      	ldr	r3, [r7, #24]
    2c90:	2203      	movs	r2, #3
    2c92:	709a      	strb	r2, [r3, #2]
		atomic_leave_critical(&flags);
    2c94:	f107 0308 	add.w	r3, r7, #8
    2c98:	4618      	mov	r0, r3
    2c9a:	4b38      	ldr	r3, [pc, #224]	; (2d7c <usb_d_ep_transfer+0x160>)
    2c9c:	4798      	blx	r3
		default: /* USB_EP_S_X_xxxx  */
			return USB_BUSY;
		}
	}

	if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    2c9e:	69bb      	ldr	r3, [r7, #24]
    2ca0:	781b      	ldrb	r3, [r3, #0]
    2ca2:	2b00      	cmp	r3, #0
    2ca4:	d151      	bne.n	2d4a <usb_d_ep_transfer+0x12e>
    2ca6:	e017      	b.n	2cd8 <usb_d_ep_transfer+0xbc>
		atomic_leave_critical(&flags);
    2ca8:	f107 0308 	add.w	r3, r7, #8
    2cac:	4618      	mov	r0, r3
    2cae:	4b33      	ldr	r3, [pc, #204]	; (2d7c <usb_d_ep_transfer+0x160>)
    2cb0:	4798      	blx	r3
		switch (state) {
    2cb2:	7bfb      	ldrb	r3, [r7, #15]
    2cb4:	b2db      	uxtb	r3, r3
    2cb6:	2b05      	cmp	r3, #5
    2cb8:	d004      	beq.n	2cc4 <usb_d_ep_transfer+0xa8>
    2cba:	2b06      	cmp	r3, #6
    2cbc:	d004      	beq.n	2cc8 <usb_d_ep_transfer+0xac>
    2cbe:	2b00      	cmp	r3, #0
    2cc0:	d005      	beq.n	2cce <usb_d_ep_transfer+0xb2>
    2cc2:	e007      	b.n	2cd4 <usb_d_ep_transfer+0xb8>
			return USB_HALTED;
    2cc4:	2302      	movs	r3, #2
    2cc6:	e04e      	b.n	2d66 <usb_d_ep_transfer+0x14a>
			return -USB_ERROR;
    2cc8:	f06f 030f 	mvn.w	r3, #15
    2ccc:	e04b      	b.n	2d66 <usb_d_ep_transfer+0x14a>
			return -USB_ERR_FUNC;
    2cce:	f06f 0312 	mvn.w	r3, #18
    2cd2:	e048      	b.n	2d66 <usb_d_ep_transfer+0x14a>
			return USB_BUSY;
    2cd4:	2301      	movs	r3, #1
    2cd6:	e046      	b.n	2d66 <usb_d_ep_transfer+0x14a>
		uint16_t req_len = USB_GET_wLength(ept->xfer.req);
    2cd8:	69bb      	ldr	r3, [r7, #24]
    2cda:	7c9b      	ldrb	r3, [r3, #18]
    2cdc:	b29a      	uxth	r2, r3
    2cde:	69bb      	ldr	r3, [r7, #24]
    2ce0:	7cdb      	ldrb	r3, [r3, #19]
    2ce2:	b29b      	uxth	r3, r3
    2ce4:	021b      	lsls	r3, r3, #8
    2ce6:	b29b      	uxth	r3, r3
    2ce8:	4413      	add	r3, r2
    2cea:	82fb      	strh	r3, [r7, #22]
		/* SETUP without data: ZLP IN as status. */
		if (req_len == 0) {
    2cec:	8afb      	ldrh	r3, [r7, #22]
    2cee:	2b00      	cmp	r3, #0
    2cf0:	d10b      	bne.n	2d0a <usb_d_ep_transfer+0xee>
			dir                 = true;
    2cf2:	2301      	movs	r3, #1
    2cf4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			len                 = 0;
    2cf8:	2300      	movs	r3, #0
    2cfa:	623b      	str	r3, [r7, #32]
			zlp                 = true;
    2cfc:	2301      	movs	r3, #1
    2cfe:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    2d02:	69bb      	ldr	r3, [r7, #24]
    2d04:	2204      	movs	r2, #4
    2d06:	709a      	strb	r2, [r3, #2]
    2d08:	e01f      	b.n	2d4a <usb_d_ep_transfer+0x12e>
		} else {
			dir = (USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN);
    2d0a:	69bb      	ldr	r3, [r7, #24]
    2d0c:	7b1b      	ldrb	r3, [r3, #12]
    2d0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
    2d12:	2b00      	cmp	r3, #0
    2d14:	bf14      	ite	ne
    2d16:	2301      	movne	r3, #1
    2d18:	2300      	moveq	r3, #0
    2d1a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			/* Data length not exceed requested. */
			if (len > req_len) {
    2d1e:	8afa      	ldrh	r2, [r7, #22]
    2d20:	6a3b      	ldr	r3, [r7, #32]
    2d22:	429a      	cmp	r2, r3
    2d24:	d201      	bcs.n	2d2a <usb_d_ep_transfer+0x10e>
				len = req_len;
    2d26:	8afb      	ldrh	r3, [r7, #22]
    2d28:	623b      	str	r3, [r7, #32]
			}
			if (dir) {
    2d2a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    2d2e:	2b00      	cmp	r3, #0
    2d30:	d008      	beq.n	2d44 <usb_d_ep_transfer+0x128>
				/* Setup -> In */
				zlp = (req_len > len);
    2d32:	8afa      	ldrh	r2, [r7, #22]
    2d34:	6a3b      	ldr	r3, [r7, #32]
    2d36:	429a      	cmp	r2, r3
    2d38:	bf8c      	ite	hi
    2d3a:	2301      	movhi	r3, #1
    2d3c:	2300      	movls	r3, #0
    2d3e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    2d42:	e002      	b.n	2d4a <usb_d_ep_transfer+0x12e>
			} else {
				zlp = false;
    2d44:	2300      	movs	r3, #0
    2d46:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			}
		}
	}

	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    2d4a:	687b      	ldr	r3, [r7, #4]
    2d4c:	7a18      	ldrb	r0, [r3, #8]
    2d4e:	687b      	ldr	r3, [r7, #4]
    2d50:	681a      	ldr	r2, [r3, #0]
    2d52:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
    2d56:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
    2d5a:	9300      	str	r3, [sp, #0]
    2d5c:	6a3b      	ldr	r3, [r7, #32]
    2d5e:	4c08      	ldr	r4, [pc, #32]	; (2d80 <usb_d_ep_transfer+0x164>)
    2d60:	47a0      	blx	r4
    2d62:	6138      	str	r0, [r7, #16]
	return rc;
    2d64:	693b      	ldr	r3, [r7, #16]
}
    2d66:	4618      	mov	r0, r3
    2d68:	372c      	adds	r7, #44	; 0x2c
    2d6a:	46bd      	mov	sp, r7
    2d6c:	bd90      	pop	{r4, r7, pc}
    2d6e:	bf00      	nop
    2d70:	000025d9 	.word	0x000025d9
    2d74:	20000ad0 	.word	0x20000ad0
    2d78:	0000a971 	.word	0x0000a971
    2d7c:	0000a997 	.word	0x0000a997
    2d80:	00002659 	.word	0x00002659

00002d84 <_usb_d_ep_halt_clr>:
		return USB_BUSY;
	}
}

static inline int32_t _usb_d_ep_halt_clr(const uint8_t ep)
{
    2d84:	b580      	push	{r7, lr}
    2d86:	b086      	sub	sp, #24
    2d88:	af00      	add	r7, sp, #0
    2d8a:	4603      	mov	r3, r0
    2d8c:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    2d8e:	79fb      	ldrb	r3, [r7, #7]
    2d90:	4618      	mov	r0, r3
    2d92:	4b1a      	ldr	r3, [pc, #104]	; (2dfc <_usb_d_ep_halt_clr+0x78>)
    2d94:	4798      	blx	r3
    2d96:	4603      	mov	r3, r0
    2d98:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    2d9a:	f997 3017 	ldrsb.w	r3, [r7, #23]
    2d9e:	015b      	lsls	r3, r3, #5
    2da0:	4a17      	ldr	r2, [pc, #92]	; (2e00 <_usb_d_ep_halt_clr+0x7c>)
    2da2:	4413      	add	r3, r2
    2da4:	613b      	str	r3, [r7, #16]
	int32_t          rc;
	if (ep_index < 0) {
    2da6:	f997 3017 	ldrsb.w	r3, [r7, #23]
    2daa:	2b00      	cmp	r3, #0
    2dac:	da02      	bge.n	2db4 <_usb_d_ep_halt_clr+0x30>
		return -USB_ERR_PARAM;
    2dae:	f06f 0311 	mvn.w	r3, #17
    2db2:	e01f      	b.n	2df4 <_usb_d_ep_halt_clr+0x70>
	}
	if (_usb_d_dev_ep_stall(ep, USB_EP_STALL_GET)) {
    2db4:	79fb      	ldrb	r3, [r7, #7]
    2db6:	2102      	movs	r1, #2
    2db8:	4618      	mov	r0, r3
    2dba:	4b12      	ldr	r3, [pc, #72]	; (2e04 <_usb_d_ep_halt_clr+0x80>)
    2dbc:	4798      	blx	r3
    2dbe:	4603      	mov	r3, r0
    2dc0:	2b00      	cmp	r3, #0
    2dc2:	d016      	beq.n	2df2 <_usb_d_ep_halt_clr+0x6e>
		rc = _usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    2dc4:	79fb      	ldrb	r3, [r7, #7]
    2dc6:	2100      	movs	r1, #0
    2dc8:	4618      	mov	r0, r3
    2dca:	4b0e      	ldr	r3, [pc, #56]	; (2e04 <_usb_d_ep_halt_clr+0x80>)
    2dcc:	4798      	blx	r3
    2dce:	60f8      	str	r0, [r7, #12]
		if (rc < 0) {
    2dd0:	68fb      	ldr	r3, [r7, #12]
    2dd2:	2b00      	cmp	r3, #0
    2dd4:	da01      	bge.n	2dda <_usb_d_ep_halt_clr+0x56>
			return rc;
    2dd6:	68fb      	ldr	r3, [r7, #12]
    2dd8:	e00c      	b.n	2df4 <_usb_d_ep_halt_clr+0x70>
		}
		ept->xfer.hdr.state  = USB_EP_S_IDLE;
    2dda:	693b      	ldr	r3, [r7, #16]
    2ddc:	2201      	movs	r2, #1
    2dde:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_UNHALT;
    2de0:	693b      	ldr	r3, [r7, #16]
    2de2:	2203      	movs	r2, #3
    2de4:	70da      	strb	r2, [r3, #3]
		ept->callbacks.xfer(ep, USB_XFER_UNHALT, NULL);
    2de6:	693b      	ldr	r3, [r7, #16]
    2de8:	69db      	ldr	r3, [r3, #28]
    2dea:	79f8      	ldrb	r0, [r7, #7]
    2dec:	2200      	movs	r2, #0
    2dee:	2103      	movs	r1, #3
    2df0:	4798      	blx	r3
	}
	return ERR_NONE;
    2df2:	2300      	movs	r3, #0
}
    2df4:	4618      	mov	r0, r3
    2df6:	3718      	adds	r7, #24
    2df8:	46bd      	mov	sp, r7
    2dfa:	bd80      	pop	{r7, pc}
    2dfc:	000025d9 	.word	0x000025d9
    2e00:	20000ad0 	.word	0x20000ad0
    2e04:	00009dc9 	.word	0x00009dc9

00002e08 <usb_d_ep_halt>:

int32_t usb_d_ep_halt(const uint8_t ep, const enum usb_ep_halt_ctrl ctrl)
{
    2e08:	b580      	push	{r7, lr}
    2e0a:	b082      	sub	sp, #8
    2e0c:	af00      	add	r7, sp, #0
    2e0e:	4603      	mov	r3, r0
    2e10:	460a      	mov	r2, r1
    2e12:	71fb      	strb	r3, [r7, #7]
    2e14:	4613      	mov	r3, r2
    2e16:	71bb      	strb	r3, [r7, #6]
	if (ctrl == USB_EP_HALT_CLR) {
    2e18:	79bb      	ldrb	r3, [r7, #6]
    2e1a:	2b00      	cmp	r3, #0
    2e1c:	d105      	bne.n	2e2a <usb_d_ep_halt+0x22>
		return _usb_d_ep_halt_clr(ep);
    2e1e:	79fb      	ldrb	r3, [r7, #7]
    2e20:	4618      	mov	r0, r3
    2e22:	4b0c      	ldr	r3, [pc, #48]	; (2e54 <usb_d_ep_halt+0x4c>)
    2e24:	4798      	blx	r3
    2e26:	4603      	mov	r3, r0
    2e28:	e00f      	b.n	2e4a <usb_d_ep_halt+0x42>
	} else if (ctrl == USB_EP_HALT_SET) {
    2e2a:	79bb      	ldrb	r3, [r7, #6]
    2e2c:	2b01      	cmp	r3, #1
    2e2e:	d106      	bne.n	2e3e <usb_d_ep_halt+0x36>
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    2e30:	79fb      	ldrb	r3, [r7, #7]
    2e32:	2101      	movs	r1, #1
    2e34:	4618      	mov	r0, r3
    2e36:	4b08      	ldr	r3, [pc, #32]	; (2e58 <usb_d_ep_halt+0x50>)
    2e38:	4798      	blx	r3
    2e3a:	4603      	mov	r3, r0
    2e3c:	e005      	b.n	2e4a <usb_d_ep_halt+0x42>
	} else {
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_GET);
    2e3e:	79fb      	ldrb	r3, [r7, #7]
    2e40:	2102      	movs	r1, #2
    2e42:	4618      	mov	r0, r3
    2e44:	4b04      	ldr	r3, [pc, #16]	; (2e58 <usb_d_ep_halt+0x50>)
    2e46:	4798      	blx	r3
    2e48:	4603      	mov	r3, r0
	}
}
    2e4a:	4618      	mov	r0, r3
    2e4c:	3708      	adds	r7, #8
    2e4e:	46bd      	mov	sp, r7
    2e50:	bd80      	pop	{r7, pc}
    2e52:	bf00      	nop
    2e54:	00002d85 	.word	0x00002d85
    2e58:	00009dc9 	.word	0x00009dc9

00002e5c <usb_d_ep_register_callback>:

void usb_d_ep_register_callback(const uint8_t ep, const enum usb_d_ep_cb_type type, const FUNC_PTR func)
{
    2e5c:	b580      	push	{r7, lr}
    2e5e:	b086      	sub	sp, #24
    2e60:	af00      	add	r7, sp, #0
    2e62:	4603      	mov	r3, r0
    2e64:	603a      	str	r2, [r7, #0]
    2e66:	71fb      	strb	r3, [r7, #7]
    2e68:	460b      	mov	r3, r1
    2e6a:	71bb      	strb	r3, [r7, #6]
	int8_t           ep_index = _usb_d_find_ep(ep);
    2e6c:	79fb      	ldrb	r3, [r7, #7]
    2e6e:	4618      	mov	r0, r3
    2e70:	4b16      	ldr	r3, [pc, #88]	; (2ecc <usb_d_ep_register_callback+0x70>)
    2e72:	4798      	blx	r3
    2e74:	4603      	mov	r3, r0
    2e76:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    2e78:	f997 3017 	ldrsb.w	r3, [r7, #23]
    2e7c:	015b      	lsls	r3, r3, #5
    2e7e:	4a14      	ldr	r2, [pc, #80]	; (2ed0 <usb_d_ep_register_callback+0x74>)
    2e80:	4413      	add	r3, r2
    2e82:	613b      	str	r3, [r7, #16]
	FUNC_PTR         f        = func ? (FUNC_PTR)func : (FUNC_PTR)usb_d_dummy_cb_false;
    2e84:	683b      	ldr	r3, [r7, #0]
    2e86:	2b00      	cmp	r3, #0
    2e88:	d001      	beq.n	2e8e <usb_d_ep_register_callback+0x32>
    2e8a:	683b      	ldr	r3, [r7, #0]
    2e8c:	e000      	b.n	2e90 <usb_d_ep_register_callback+0x34>
    2e8e:	4b11      	ldr	r3, [pc, #68]	; (2ed4 <usb_d_ep_register_callback+0x78>)
    2e90:	60fb      	str	r3, [r7, #12]
	if (ep_index < 0) {
    2e92:	f997 3017 	ldrsb.w	r3, [r7, #23]
    2e96:	2b00      	cmp	r3, #0
    2e98:	db13      	blt.n	2ec2 <usb_d_ep_register_callback+0x66>
		return;
	}
	switch (type) {
    2e9a:	79bb      	ldrb	r3, [r7, #6]
    2e9c:	2b01      	cmp	r3, #1
    2e9e:	d008      	beq.n	2eb2 <usb_d_ep_register_callback+0x56>
    2ea0:	2b02      	cmp	r3, #2
    2ea2:	d00a      	beq.n	2eba <usb_d_ep_register_callback+0x5e>
    2ea4:	2b00      	cmp	r3, #0
    2ea6:	d000      	beq.n	2eaa <usb_d_ep_register_callback+0x4e>
		break;
	case USB_D_EP_CB_XFER:
		ept->callbacks.xfer = (usb_d_ep_cb_xfer_t)f;
		break;
	default:
		break;
    2ea8:	e00c      	b.n	2ec4 <usb_d_ep_register_callback+0x68>
		ept->callbacks.req = (usb_d_ep_cb_setup_t)f;
    2eaa:	693b      	ldr	r3, [r7, #16]
    2eac:	68fa      	ldr	r2, [r7, #12]
    2eae:	615a      	str	r2, [r3, #20]
		break;
    2eb0:	e008      	b.n	2ec4 <usb_d_ep_register_callback+0x68>
		ept->callbacks.more = (usb_d_ep_cb_more_t)f;
    2eb2:	693b      	ldr	r3, [r7, #16]
    2eb4:	68fa      	ldr	r2, [r7, #12]
    2eb6:	619a      	str	r2, [r3, #24]
		break;
    2eb8:	e004      	b.n	2ec4 <usb_d_ep_register_callback+0x68>
		ept->callbacks.xfer = (usb_d_ep_cb_xfer_t)f;
    2eba:	693b      	ldr	r3, [r7, #16]
    2ebc:	68fa      	ldr	r2, [r7, #12]
    2ebe:	61da      	str	r2, [r3, #28]
		break;
    2ec0:	e000      	b.n	2ec4 <usb_d_ep_register_callback+0x68>
		return;
    2ec2:	bf00      	nop
	}
}
    2ec4:	3718      	adds	r7, #24
    2ec6:	46bd      	mov	sp, r7
    2ec8:	bd80      	pop	{r7, pc}
    2eca:	bf00      	nop
    2ecc:	000025d9 	.word	0x000025d9
    2ed0:	20000ad0 	.word	0x20000ad0
    2ed4:	000026ad 	.word	0x000026ad

00002ed8 <assert>:

/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
    2ed8:	b480      	push	{r7}
    2eda:	b085      	sub	sp, #20
    2edc:	af00      	add	r7, sp, #0
    2ede:	4603      	mov	r3, r0
    2ee0:	60b9      	str	r1, [r7, #8]
    2ee2:	607a      	str	r2, [r7, #4]
    2ee4:	73fb      	strb	r3, [r7, #15]
	if (!(condition)) {
    2ee6:	7bfb      	ldrb	r3, [r7, #15]
    2ee8:	f083 0301 	eor.w	r3, r3, #1
    2eec:	b2db      	uxtb	r3, r3
    2eee:	2b00      	cmp	r3, #0
    2ef0:	d000      	beq.n	2ef4 <assert+0x1c>
		__asm("BKPT #0");
    2ef2:	be00      	bkpt	0x0000
	}
	(void)file;
	(void)line;
}
    2ef4:	bf00      	nop
    2ef6:	3714      	adds	r7, #20
    2ef8:	46bd      	mov	sp, r7
    2efa:	f85d 7b04 	ldr.w	r7, [sp], #4
    2efe:	4770      	bx	lr

00002f00 <is_list_element>:

/**
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
    2f00:	b480      	push	{r7}
    2f02:	b085      	sub	sp, #20
    2f04:	af00      	add	r7, sp, #0
    2f06:	6078      	str	r0, [r7, #4]
    2f08:	6039      	str	r1, [r7, #0]
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
    2f0a:	687b      	ldr	r3, [r7, #4]
    2f0c:	681b      	ldr	r3, [r3, #0]
    2f0e:	60fb      	str	r3, [r7, #12]
    2f10:	e008      	b.n	2f24 <is_list_element+0x24>
		if (it == element) {
    2f12:	68fa      	ldr	r2, [r7, #12]
    2f14:	683b      	ldr	r3, [r7, #0]
    2f16:	429a      	cmp	r2, r3
    2f18:	d101      	bne.n	2f1e <is_list_element+0x1e>
			return true;
    2f1a:	2301      	movs	r3, #1
    2f1c:	e006      	b.n	2f2c <is_list_element+0x2c>
	for (it = list->head; it; it = it->next) {
    2f1e:	68fb      	ldr	r3, [r7, #12]
    2f20:	681b      	ldr	r3, [r3, #0]
    2f22:	60fb      	str	r3, [r7, #12]
    2f24:	68fb      	ldr	r3, [r7, #12]
    2f26:	2b00      	cmp	r3, #0
    2f28:	d1f3      	bne.n	2f12 <is_list_element+0x12>
		}
	}

	return false;
    2f2a:	2300      	movs	r3, #0
}
    2f2c:	4618      	mov	r0, r3
    2f2e:	3714      	adds	r7, #20
    2f30:	46bd      	mov	sp, r7
    2f32:	f85d 7b04 	ldr.w	r7, [sp], #4
    2f36:	4770      	bx	lr

00002f38 <list_insert_as_head>:

/**
 * \brief Insert an element as list head
 */
void list_insert_as_head(struct list_descriptor *const list, void *const element)
{
    2f38:	b580      	push	{r7, lr}
    2f3a:	b082      	sub	sp, #8
    2f3c:	af00      	add	r7, sp, #0
    2f3e:	6078      	str	r0, [r7, #4]
    2f40:	6039      	str	r1, [r7, #0]
	ASSERT(!is_list_element(list, element));
    2f42:	6839      	ldr	r1, [r7, #0]
    2f44:	6878      	ldr	r0, [r7, #4]
    2f46:	4b0f      	ldr	r3, [pc, #60]	; (2f84 <list_insert_as_head+0x4c>)
    2f48:	4798      	blx	r3
    2f4a:	4603      	mov	r3, r0
    2f4c:	2b00      	cmp	r3, #0
    2f4e:	bf14      	ite	ne
    2f50:	2301      	movne	r3, #1
    2f52:	2300      	moveq	r3, #0
    2f54:	b2db      	uxtb	r3, r3
    2f56:	f083 0301 	eor.w	r3, r3, #1
    2f5a:	b2db      	uxtb	r3, r3
    2f5c:	f003 0301 	and.w	r3, r3, #1
    2f60:	b2db      	uxtb	r3, r3
    2f62:	2239      	movs	r2, #57	; 0x39
    2f64:	4908      	ldr	r1, [pc, #32]	; (2f88 <list_insert_as_head+0x50>)
    2f66:	4618      	mov	r0, r3
    2f68:	4b08      	ldr	r3, [pc, #32]	; (2f8c <list_insert_as_head+0x54>)
    2f6a:	4798      	blx	r3

	((struct list_element *)element)->next = list->head;
    2f6c:	687b      	ldr	r3, [r7, #4]
    2f6e:	681a      	ldr	r2, [r3, #0]
    2f70:	683b      	ldr	r3, [r7, #0]
    2f72:	601a      	str	r2, [r3, #0]
	list->head                             = (struct list_element *)element;
    2f74:	687b      	ldr	r3, [r7, #4]
    2f76:	683a      	ldr	r2, [r7, #0]
    2f78:	601a      	str	r2, [r3, #0]
}
    2f7a:	bf00      	nop
    2f7c:	3708      	adds	r7, #8
    2f7e:	46bd      	mov	sp, r7
    2f80:	bd80      	pop	{r7, pc}
    2f82:	bf00      	nop
    2f84:	00002f01 	.word	0x00002f01
    2f88:	00012f4c 	.word	0x00012f4c
    2f8c:	00002ed9 	.word	0x00002ed9

00002f90 <list_insert_after>:

/**
 * \brief Insert an element after the given list element
 */
void list_insert_after(void *const after, void *const element)
{
    2f90:	b480      	push	{r7}
    2f92:	b083      	sub	sp, #12
    2f94:	af00      	add	r7, sp, #0
    2f96:	6078      	str	r0, [r7, #4]
    2f98:	6039      	str	r1, [r7, #0]
	((struct list_element *)element)->next = ((struct list_element *)after)->next;
    2f9a:	687b      	ldr	r3, [r7, #4]
    2f9c:	681a      	ldr	r2, [r3, #0]
    2f9e:	683b      	ldr	r3, [r7, #0]
    2fa0:	601a      	str	r2, [r3, #0]
	((struct list_element *)after)->next   = (struct list_element *)element;
    2fa2:	687b      	ldr	r3, [r7, #4]
    2fa4:	683a      	ldr	r2, [r7, #0]
    2fa6:	601a      	str	r2, [r3, #0]
}
    2fa8:	bf00      	nop
    2faa:	370c      	adds	r7, #12
    2fac:	46bd      	mov	sp, r7
    2fae:	f85d 7b04 	ldr.w	r7, [sp], #4
    2fb2:	4770      	bx	lr

00002fb4 <list_insert_at_end>:

/**
 * \brief Insert an element at list end
 */
void list_insert_at_end(struct list_descriptor *const list, void *const element)
{
    2fb4:	b580      	push	{r7, lr}
    2fb6:	b084      	sub	sp, #16
    2fb8:	af00      	add	r7, sp, #0
    2fba:	6078      	str	r0, [r7, #4]
    2fbc:	6039      	str	r1, [r7, #0]
	struct list_element *it = list->head;
    2fbe:	687b      	ldr	r3, [r7, #4]
    2fc0:	681b      	ldr	r3, [r3, #0]
    2fc2:	60fb      	str	r3, [r7, #12]

	ASSERT(!is_list_element(list, element));
    2fc4:	6839      	ldr	r1, [r7, #0]
    2fc6:	6878      	ldr	r0, [r7, #4]
    2fc8:	4b16      	ldr	r3, [pc, #88]	; (3024 <list_insert_at_end+0x70>)
    2fca:	4798      	blx	r3
    2fcc:	4603      	mov	r3, r0
    2fce:	2b00      	cmp	r3, #0
    2fd0:	bf14      	ite	ne
    2fd2:	2301      	movne	r3, #1
    2fd4:	2300      	moveq	r3, #0
    2fd6:	b2db      	uxtb	r3, r3
    2fd8:	f083 0301 	eor.w	r3, r3, #1
    2fdc:	b2db      	uxtb	r3, r3
    2fde:	f003 0301 	and.w	r3, r3, #1
    2fe2:	b2db      	uxtb	r3, r3
    2fe4:	224f      	movs	r2, #79	; 0x4f
    2fe6:	4910      	ldr	r1, [pc, #64]	; (3028 <list_insert_at_end+0x74>)
    2fe8:	4618      	mov	r0, r3
    2fea:	4b10      	ldr	r3, [pc, #64]	; (302c <list_insert_at_end+0x78>)
    2fec:	4798      	blx	r3

	if (!list->head) {
    2fee:	687b      	ldr	r3, [r7, #4]
    2ff0:	681b      	ldr	r3, [r3, #0]
    2ff2:	2b00      	cmp	r3, #0
    2ff4:	d109      	bne.n	300a <list_insert_at_end+0x56>
		list->head                             = (struct list_element *)element;
    2ff6:	687b      	ldr	r3, [r7, #4]
    2ff8:	683a      	ldr	r2, [r7, #0]
    2ffa:	601a      	str	r2, [r3, #0]
		((struct list_element *)element)->next = NULL;
    2ffc:	683b      	ldr	r3, [r7, #0]
    2ffe:	2200      	movs	r2, #0
    3000:	601a      	str	r2, [r3, #0]
		return;
    3002:	e00c      	b.n	301e <list_insert_at_end+0x6a>
	}

	while (it->next) {
		it = it->next;
    3004:	68fb      	ldr	r3, [r7, #12]
    3006:	681b      	ldr	r3, [r3, #0]
    3008:	60fb      	str	r3, [r7, #12]
	while (it->next) {
    300a:	68fb      	ldr	r3, [r7, #12]
    300c:	681b      	ldr	r3, [r3, #0]
    300e:	2b00      	cmp	r3, #0
    3010:	d1f8      	bne.n	3004 <list_insert_at_end+0x50>
	}
	it->next                               = (struct list_element *)element;
    3012:	68fb      	ldr	r3, [r7, #12]
    3014:	683a      	ldr	r2, [r7, #0]
    3016:	601a      	str	r2, [r3, #0]
	((struct list_element *)element)->next = NULL;
    3018:	683b      	ldr	r3, [r7, #0]
    301a:	2200      	movs	r2, #0
    301c:	601a      	str	r2, [r3, #0]
}
    301e:	3710      	adds	r7, #16
    3020:	46bd      	mov	sp, r7
    3022:	bd80      	pop	{r7, pc}
    3024:	00002f01 	.word	0x00002f01
    3028:	00012f4c 	.word	0x00012f4c
    302c:	00002ed9 	.word	0x00002ed9

00003030 <list_remove_head>:

/**
 * \brief Removes list head
 */
void *list_remove_head(struct list_descriptor *const list)
{
    3030:	b480      	push	{r7}
    3032:	b085      	sub	sp, #20
    3034:	af00      	add	r7, sp, #0
    3036:	6078      	str	r0, [r7, #4]
	if (list->head) {
    3038:	687b      	ldr	r3, [r7, #4]
    303a:	681b      	ldr	r3, [r3, #0]
    303c:	2b00      	cmp	r3, #0
    303e:	d009      	beq.n	3054 <list_remove_head+0x24>
		struct list_element *tmp = list->head;
    3040:	687b      	ldr	r3, [r7, #4]
    3042:	681b      	ldr	r3, [r3, #0]
    3044:	60fb      	str	r3, [r7, #12]

		list->head = list->head->next;
    3046:	687b      	ldr	r3, [r7, #4]
    3048:	681b      	ldr	r3, [r3, #0]
    304a:	681a      	ldr	r2, [r3, #0]
    304c:	687b      	ldr	r3, [r7, #4]
    304e:	601a      	str	r2, [r3, #0]
		return (void *)tmp;
    3050:	68fb      	ldr	r3, [r7, #12]
    3052:	e000      	b.n	3056 <list_remove_head+0x26>
	}

	return NULL;
    3054:	2300      	movs	r3, #0
}
    3056:	4618      	mov	r0, r3
    3058:	3714      	adds	r7, #20
    305a:	46bd      	mov	sp, r7
    305c:	f85d 7b04 	ldr.w	r7, [sp], #4
    3060:	4770      	bx	lr
	...

00003064 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
    3064:	b480      	push	{r7}
    3066:	b083      	sub	sp, #12
    3068:	af00      	add	r7, sp, #0
    306a:	4603      	mov	r3, r0
    306c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    306e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    3072:	2b00      	cmp	r3, #0
    3074:	db0b      	blt.n	308e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3076:	4909      	ldr	r1, [pc, #36]	; (309c <__NVIC_EnableIRQ+0x38>)
    3078:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    307c:	095b      	lsrs	r3, r3, #5
    307e:	88fa      	ldrh	r2, [r7, #6]
    3080:	f002 021f 	and.w	r2, r2, #31
    3084:	2001      	movs	r0, #1
    3086:	fa00 f202 	lsl.w	r2, r0, r2
    308a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
    308e:	bf00      	nop
    3090:	370c      	adds	r7, #12
    3092:	46bd      	mov	sp, r7
    3094:	f85d 7b04 	ldr.w	r7, [sp], #4
    3098:	4770      	bx	lr
    309a:	bf00      	nop
    309c:	e000e100 	.word	0xe000e100

000030a0 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
    30a0:	b480      	push	{r7}
    30a2:	b083      	sub	sp, #12
    30a4:	af00      	add	r7, sp, #0
    30a6:	4603      	mov	r3, r0
    30a8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    30aa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    30ae:	2b00      	cmp	r3, #0
    30b0:	db10      	blt.n	30d4 <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    30b2:	490b      	ldr	r1, [pc, #44]	; (30e0 <__NVIC_DisableIRQ+0x40>)
    30b4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    30b8:	095b      	lsrs	r3, r3, #5
    30ba:	88fa      	ldrh	r2, [r7, #6]
    30bc:	f002 021f 	and.w	r2, r2, #31
    30c0:	2001      	movs	r0, #1
    30c2:	fa00 f202 	lsl.w	r2, r0, r2
    30c6:	3320      	adds	r3, #32
    30c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    30cc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    30d0:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
    30d4:	bf00      	nop
    30d6:	370c      	adds	r7, #12
    30d8:	46bd      	mov	sp, r7
    30da:	f85d 7b04 	ldr.w	r7, [sp], #4
    30de:	4770      	bx	lr
    30e0:	e000e100 	.word	0xe000e100

000030e4 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
    30e4:	b480      	push	{r7}
    30e6:	b083      	sub	sp, #12
    30e8:	af00      	add	r7, sp, #0
    30ea:	4603      	mov	r3, r0
    30ec:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    30ee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    30f2:	2b00      	cmp	r3, #0
    30f4:	db0c      	blt.n	3110 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    30f6:	4909      	ldr	r1, [pc, #36]	; (311c <__NVIC_ClearPendingIRQ+0x38>)
    30f8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    30fc:	095b      	lsrs	r3, r3, #5
    30fe:	88fa      	ldrh	r2, [r7, #6]
    3100:	f002 021f 	and.w	r2, r2, #31
    3104:	2001      	movs	r0, #1
    3106:	fa00 f202 	lsl.w	r2, r0, r2
    310a:	3360      	adds	r3, #96	; 0x60
    310c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
    3110:	bf00      	nop
    3112:	370c      	adds	r7, #12
    3114:	46bd      	mov	sp, r7
    3116:	f85d 7b04 	ldr.w	r7, [sp], #4
    311a:	4770      	bx	lr
    311c:	e000e100 	.word	0xe000e100

00003120 <hri_can_get_PSR_EP_bit>:
{
	return ((Can *)hw)->ECR.reg;
}

static inline bool hri_can_get_PSR_EP_bit(const void *const hw)
{
    3120:	b480      	push	{r7}
    3122:	b083      	sub	sp, #12
    3124:	af00      	add	r7, sp, #0
    3126:	6078      	str	r0, [r7, #4]
	return (((Can *)hw)->PSR.reg & CAN_PSR_EP) >> CAN_PSR_EP_Pos;
    3128:	687b      	ldr	r3, [r7, #4]
    312a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    312c:	095b      	lsrs	r3, r3, #5
    312e:	f003 0301 	and.w	r3, r3, #1
    3132:	2b00      	cmp	r3, #0
    3134:	bf14      	ite	ne
    3136:	2301      	movne	r3, #1
    3138:	2300      	moveq	r3, #0
    313a:	b2db      	uxtb	r3, r3
}
    313c:	4618      	mov	r0, r3
    313e:	370c      	adds	r7, #12
    3140:	46bd      	mov	sp, r7
    3142:	f85d 7b04 	ldr.w	r7, [sp], #4
    3146:	4770      	bx	lr

00003148 <hri_can_read_RXF0S_F0FL_bf>:
{
	return (((Can *)hw)->RXF0S.reg & CAN_RXF0S_F0FL(mask)) >> CAN_RXF0S_F0FL_Pos;
}

static inline hri_can_rxf0s_reg_t hri_can_read_RXF0S_F0FL_bf(const void *const hw)
{
    3148:	b480      	push	{r7}
    314a:	b083      	sub	sp, #12
    314c:	af00      	add	r7, sp, #0
    314e:	6078      	str	r0, [r7, #4]
	return (((Can *)hw)->RXF0S.reg & CAN_RXF0S_F0FL_Msk) >> CAN_RXF0S_F0FL_Pos;
    3150:	687b      	ldr	r3, [r7, #4]
    3152:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
    3156:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
    315a:	4618      	mov	r0, r3
    315c:	370c      	adds	r7, #12
    315e:	46bd      	mov	sp, r7
    3160:	f85d 7b04 	ldr.w	r7, [sp], #4
    3164:	4770      	bx	lr

00003166 <hri_can_read_RXF0S_F0GI_bf>:
{
	return (((Can *)hw)->RXF0S.reg & CAN_RXF0S_F0GI(mask)) >> CAN_RXF0S_F0GI_Pos;
}

static inline hri_can_rxf0s_reg_t hri_can_read_RXF0S_F0GI_bf(const void *const hw)
{
    3166:	b480      	push	{r7}
    3168:	b083      	sub	sp, #12
    316a:	af00      	add	r7, sp, #0
    316c:	6078      	str	r0, [r7, #4]
	return (((Can *)hw)->RXF0S.reg & CAN_RXF0S_F0GI_Msk) >> CAN_RXF0S_F0GI_Pos;
    316e:	687b      	ldr	r3, [r7, #4]
    3170:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
    3174:	0a1b      	lsrs	r3, r3, #8
    3176:	f003 033f 	and.w	r3, r3, #63	; 0x3f
}
    317a:	4618      	mov	r0, r3
    317c:	370c      	adds	r7, #12
    317e:	46bd      	mov	sp, r7
    3180:	f85d 7b04 	ldr.w	r7, [sp], #4
    3184:	4770      	bx	lr

00003186 <hri_can_get_TXFQS_TFQF_bit>:
{
	return ((Can *)hw)->RXF1S.reg;
}

static inline bool hri_can_get_TXFQS_TFQF_bit(const void *const hw)
{
    3186:	b480      	push	{r7}
    3188:	b083      	sub	sp, #12
    318a:	af00      	add	r7, sp, #0
    318c:	6078      	str	r0, [r7, #4]
	return (((Can *)hw)->TXFQS.reg & CAN_TXFQS_TFQF) >> CAN_TXFQS_TFQF_Pos;
    318e:	687b      	ldr	r3, [r7, #4]
    3190:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
    3194:	0d5b      	lsrs	r3, r3, #21
    3196:	f003 0301 	and.w	r3, r3, #1
    319a:	2b00      	cmp	r3, #0
    319c:	bf14      	ite	ne
    319e:	2301      	movne	r3, #1
    31a0:	2300      	moveq	r3, #0
    31a2:	b2db      	uxtb	r3, r3
}
    31a4:	4618      	mov	r0, r3
    31a6:	370c      	adds	r7, #12
    31a8:	46bd      	mov	sp, r7
    31aa:	f85d 7b04 	ldr.w	r7, [sp], #4
    31ae:	4770      	bx	lr

000031b0 <hri_can_read_TXFQS_TFQPI_bf>:
{
	return (((Can *)hw)->TXFQS.reg & CAN_TXFQS_TFQPI(mask)) >> CAN_TXFQS_TFQPI_Pos;
}

static inline hri_can_txfqs_reg_t hri_can_read_TXFQS_TFQPI_bf(const void *const hw)
{
    31b0:	b480      	push	{r7}
    31b2:	b083      	sub	sp, #12
    31b4:	af00      	add	r7, sp, #0
    31b6:	6078      	str	r0, [r7, #4]
	return (((Can *)hw)->TXFQS.reg & CAN_TXFQS_TFQPI_Msk) >> CAN_TXFQS_TFQPI_Pos;
    31b8:	687b      	ldr	r3, [r7, #4]
    31ba:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
    31be:	0c1b      	lsrs	r3, r3, #16
    31c0:	f003 031f 	and.w	r3, r3, #31
}
    31c4:	4618      	mov	r0, r3
    31c6:	370c      	adds	r7, #12
    31c8:	46bd      	mov	sp, r7
    31ca:	f85d 7b04 	ldr.w	r7, [sp], #4
    31ce:	4770      	bx	lr

000031d0 <hri_can_write_MRCFG_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_MRCFG_reg(const void *const hw, hri_can_mrcfg_reg_t data)
{
    31d0:	b480      	push	{r7}
    31d2:	b083      	sub	sp, #12
    31d4:	af00      	add	r7, sp, #0
    31d6:	6078      	str	r0, [r7, #4]
    31d8:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->MRCFG.reg = data;
    31da:	687b      	ldr	r3, [r7, #4]
    31dc:	683a      	ldr	r2, [r7, #0]
    31de:	609a      	str	r2, [r3, #8]
	CAN_CRITICAL_SECTION_LEAVE();
}
    31e0:	bf00      	nop
    31e2:	370c      	adds	r7, #12
    31e4:	46bd      	mov	sp, r7
    31e6:	f85d 7b04 	ldr.w	r7, [sp], #4
    31ea:	4770      	bx	lr

000031ec <hri_can_write_DBTP_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_DBTP_reg(const void *const hw, hri_can_dbtp_reg_t data)
{
    31ec:	b480      	push	{r7}
    31ee:	b083      	sub	sp, #12
    31f0:	af00      	add	r7, sp, #0
    31f2:	6078      	str	r0, [r7, #4]
    31f4:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->DBTP.reg = data;
    31f6:	687b      	ldr	r3, [r7, #4]
    31f8:	683a      	ldr	r2, [r7, #0]
    31fa:	60da      	str	r2, [r3, #12]
	CAN_CRITICAL_SECTION_LEAVE();
}
    31fc:	bf00      	nop
    31fe:	370c      	adds	r7, #12
    3200:	46bd      	mov	sp, r7
    3202:	f85d 7b04 	ldr.w	r7, [sp], #4
    3206:	4770      	bx	lr

00003208 <hri_can_set_CCCR_INIT_bit>:
{
	return ((Can *)hw)->RWD.reg;
}

static inline void hri_can_set_CCCR_INIT_bit(const void *const hw)
{
    3208:	b480      	push	{r7}
    320a:	b083      	sub	sp, #12
    320c:	af00      	add	r7, sp, #0
    320e:	6078      	str	r0, [r7, #4]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg |= CAN_CCCR_INIT;
    3210:	687b      	ldr	r3, [r7, #4]
    3212:	699b      	ldr	r3, [r3, #24]
    3214:	f043 0201 	orr.w	r2, r3, #1
    3218:	687b      	ldr	r3, [r7, #4]
    321a:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    321c:	bf00      	nop
    321e:	370c      	adds	r7, #12
    3220:	46bd      	mov	sp, r7
    3222:	f85d 7b04 	ldr.w	r7, [sp], #4
    3226:	4770      	bx	lr

00003228 <hri_can_get_CCCR_INIT_bit>:

static inline bool hri_can_get_CCCR_INIT_bit(const void *const hw)
{
    3228:	b480      	push	{r7}
    322a:	b085      	sub	sp, #20
    322c:	af00      	add	r7, sp, #0
    322e:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Can *)hw)->CCCR.reg;
    3230:	687b      	ldr	r3, [r7, #4]
    3232:	699b      	ldr	r3, [r3, #24]
    3234:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & CAN_CCCR_INIT) >> CAN_CCCR_INIT_Pos;
    3236:	68fb      	ldr	r3, [r7, #12]
    3238:	f003 0301 	and.w	r3, r3, #1
    323c:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    323e:	68fb      	ldr	r3, [r7, #12]
    3240:	2b00      	cmp	r3, #0
    3242:	bf14      	ite	ne
    3244:	2301      	movne	r3, #1
    3246:	2300      	moveq	r3, #0
    3248:	b2db      	uxtb	r3, r3
}
    324a:	4618      	mov	r0, r3
    324c:	3714      	adds	r7, #20
    324e:	46bd      	mov	sp, r7
    3250:	f85d 7b04 	ldr.w	r7, [sp], #4
    3254:	4770      	bx	lr

00003256 <hri_can_clear_CCCR_INIT_bit>:
	((Can *)hw)->CCCR.reg = tmp;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline void hri_can_clear_CCCR_INIT_bit(const void *const hw)
{
    3256:	b480      	push	{r7}
    3258:	b083      	sub	sp, #12
    325a:	af00      	add	r7, sp, #0
    325c:	6078      	str	r0, [r7, #4]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg &= ~CAN_CCCR_INIT;
    325e:	687b      	ldr	r3, [r7, #4]
    3260:	699b      	ldr	r3, [r3, #24]
    3262:	f023 0201 	bic.w	r2, r3, #1
    3266:	687b      	ldr	r3, [r7, #4]
    3268:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    326a:	bf00      	nop
    326c:	370c      	adds	r7, #12
    326e:	46bd      	mov	sp, r7
    3270:	f85d 7b04 	ldr.w	r7, [sp], #4
    3274:	4770      	bx	lr

00003276 <hri_can_set_CCCR_CCE_bit>:
	((Can *)hw)->CCCR.reg ^= CAN_CCCR_INIT;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline void hri_can_set_CCCR_CCE_bit(const void *const hw)
{
    3276:	b480      	push	{r7}
    3278:	b083      	sub	sp, #12
    327a:	af00      	add	r7, sp, #0
    327c:	6078      	str	r0, [r7, #4]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg |= CAN_CCCR_CCE;
    327e:	687b      	ldr	r3, [r7, #4]
    3280:	699b      	ldr	r3, [r3, #24]
    3282:	f043 0202 	orr.w	r2, r3, #2
    3286:	687b      	ldr	r3, [r7, #4]
    3288:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    328a:	bf00      	nop
    328c:	370c      	adds	r7, #12
    328e:	46bd      	mov	sp, r7
    3290:	f85d 7b04 	ldr.w	r7, [sp], #4
    3294:	4770      	bx	lr

00003296 <hri_can_clear_CCCR_CCE_bit>:
	((Can *)hw)->CCCR.reg = tmp;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline void hri_can_clear_CCCR_CCE_bit(const void *const hw)
{
    3296:	b480      	push	{r7}
    3298:	b083      	sub	sp, #12
    329a:	af00      	add	r7, sp, #0
    329c:	6078      	str	r0, [r7, #4]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg &= ~CAN_CCCR_CCE;
    329e:	687b      	ldr	r3, [r7, #4]
    32a0:	699b      	ldr	r3, [r3, #24]
    32a2:	f023 0202 	bic.w	r2, r3, #2
    32a6:	687b      	ldr	r3, [r7, #4]
    32a8:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    32aa:	bf00      	nop
    32ac:	370c      	adds	r7, #12
    32ae:	46bd      	mov	sp, r7
    32b0:	f85d 7b04 	ldr.w	r7, [sp], #4
    32b4:	4770      	bx	lr

000032b6 <hri_can_get_CCCR_FDOE_bit>:
	((Can *)hw)->CCCR.reg |= CAN_CCCR_FDOE;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_can_get_CCCR_FDOE_bit(const void *const hw)
{
    32b6:	b480      	push	{r7}
    32b8:	b085      	sub	sp, #20
    32ba:	af00      	add	r7, sp, #0
    32bc:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Can *)hw)->CCCR.reg;
    32be:	687b      	ldr	r3, [r7, #4]
    32c0:	699b      	ldr	r3, [r3, #24]
    32c2:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & CAN_CCCR_FDOE) >> CAN_CCCR_FDOE_Pos;
    32c4:	68fb      	ldr	r3, [r7, #12]
    32c6:	0a1b      	lsrs	r3, r3, #8
    32c8:	f003 0301 	and.w	r3, r3, #1
    32cc:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    32ce:	68fb      	ldr	r3, [r7, #12]
    32d0:	2b00      	cmp	r3, #0
    32d2:	bf14      	ite	ne
    32d4:	2301      	movne	r3, #1
    32d6:	2300      	moveq	r3, #0
    32d8:	b2db      	uxtb	r3, r3
}
    32da:	4618      	mov	r0, r3
    32dc:	3714      	adds	r7, #20
    32de:	46bd      	mov	sp, r7
    32e0:	f85d 7b04 	ldr.w	r7, [sp], #4
    32e4:	4770      	bx	lr

000032e6 <hri_can_get_CCCR_BRSE_bit>:
	((Can *)hw)->CCCR.reg |= CAN_CCCR_BRSE;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_can_get_CCCR_BRSE_bit(const void *const hw)
{
    32e6:	b480      	push	{r7}
    32e8:	b085      	sub	sp, #20
    32ea:	af00      	add	r7, sp, #0
    32ec:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Can *)hw)->CCCR.reg;
    32ee:	687b      	ldr	r3, [r7, #4]
    32f0:	699b      	ldr	r3, [r3, #24]
    32f2:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & CAN_CCCR_BRSE) >> CAN_CCCR_BRSE_Pos;
    32f4:	68fb      	ldr	r3, [r7, #12]
    32f6:	0a5b      	lsrs	r3, r3, #9
    32f8:	f003 0301 	and.w	r3, r3, #1
    32fc:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    32fe:	68fb      	ldr	r3, [r7, #12]
    3300:	2b00      	cmp	r3, #0
    3302:	bf14      	ite	ne
    3304:	2301      	movne	r3, #1
    3306:	2300      	moveq	r3, #0
    3308:	b2db      	uxtb	r3, r3
}
    330a:	4618      	mov	r0, r3
    330c:	3714      	adds	r7, #20
    330e:	46bd      	mov	sp, r7
    3310:	f85d 7b04 	ldr.w	r7, [sp], #4
    3314:	4770      	bx	lr

00003316 <hri_can_set_CCCR_reg>:
	((Can *)hw)->CCCR.reg ^= CAN_CCCR_NISO;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline void hri_can_set_CCCR_reg(const void *const hw, hri_can_cccr_reg_t mask)
{
    3316:	b480      	push	{r7}
    3318:	b083      	sub	sp, #12
    331a:	af00      	add	r7, sp, #0
    331c:	6078      	str	r0, [r7, #4]
    331e:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg |= mask;
    3320:	687b      	ldr	r3, [r7, #4]
    3322:	699a      	ldr	r2, [r3, #24]
    3324:	683b      	ldr	r3, [r7, #0]
    3326:	431a      	orrs	r2, r3
    3328:	687b      	ldr	r3, [r7, #4]
    332a:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    332c:	bf00      	nop
    332e:	370c      	adds	r7, #12
    3330:	46bd      	mov	sp, r7
    3332:	f85d 7b04 	ldr.w	r7, [sp], #4
    3336:	4770      	bx	lr

00003338 <hri_can_write_NBTP_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_NBTP_reg(const void *const hw, hri_can_nbtp_reg_t data)
{
    3338:	b480      	push	{r7}
    333a:	b083      	sub	sp, #12
    333c:	af00      	add	r7, sp, #0
    333e:	6078      	str	r0, [r7, #4]
    3340:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->NBTP.reg = data;
    3342:	687b      	ldr	r3, [r7, #4]
    3344:	683a      	ldr	r2, [r7, #0]
    3346:	61da      	str	r2, [r3, #28]
	CAN_CRITICAL_SECTION_LEAVE();
}
    3348:	bf00      	nop
    334a:	370c      	adds	r7, #12
    334c:	46bd      	mov	sp, r7
    334e:	f85d 7b04 	ldr.w	r7, [sp], #4
    3352:	4770      	bx	lr

00003354 <hri_can_write_IR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_IR_reg(const void *const hw, hri_can_ir_reg_t data)
{
    3354:	b480      	push	{r7}
    3356:	b083      	sub	sp, #12
    3358:	af00      	add	r7, sp, #0
    335a:	6078      	str	r0, [r7, #4]
    335c:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->IR.reg = data;
    335e:	687b      	ldr	r3, [r7, #4]
    3360:	683a      	ldr	r2, [r7, #0]
    3362:	651a      	str	r2, [r3, #80]	; 0x50
	CAN_CRITICAL_SECTION_LEAVE();
}
    3364:	bf00      	nop
    3366:	370c      	adds	r7, #12
    3368:	46bd      	mov	sp, r7
    336a:	f85d 7b04 	ldr.w	r7, [sp], #4
    336e:	4770      	bx	lr

00003370 <hri_can_read_IR_reg>:
	((Can *)hw)->IR.reg ^= mask;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline hri_can_ir_reg_t hri_can_read_IR_reg(const void *const hw)
{
    3370:	b480      	push	{r7}
    3372:	b083      	sub	sp, #12
    3374:	af00      	add	r7, sp, #0
    3376:	6078      	str	r0, [r7, #4]
	return ((Can *)hw)->IR.reg;
    3378:	687b      	ldr	r3, [r7, #4]
    337a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
}
    337c:	4618      	mov	r0, r3
    337e:	370c      	adds	r7, #12
    3380:	46bd      	mov	sp, r7
    3382:	f85d 7b04 	ldr.w	r7, [sp], #4
    3386:	4770      	bx	lr

00003388 <hri_can_write_IE_RF0NE_bit>:
	tmp = (tmp & CAN_IE_RF0NE) >> CAN_IE_RF0NE_Pos;
	return (bool)tmp;
}

static inline void hri_can_write_IE_RF0NE_bit(const void *const hw, bool value)
{
    3388:	b480      	push	{r7}
    338a:	b085      	sub	sp, #20
    338c:	af00      	add	r7, sp, #0
    338e:	6078      	str	r0, [r7, #4]
    3390:	460b      	mov	r3, r1
    3392:	70fb      	strb	r3, [r7, #3]
	uint32_t tmp;
	CAN_CRITICAL_SECTION_ENTER();
	tmp = ((Can *)hw)->IE.reg;
    3394:	687b      	ldr	r3, [r7, #4]
    3396:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    3398:	60fb      	str	r3, [r7, #12]
	tmp &= ~CAN_IE_RF0NE;
    339a:	68fb      	ldr	r3, [r7, #12]
    339c:	f023 0301 	bic.w	r3, r3, #1
    33a0:	60fb      	str	r3, [r7, #12]
	tmp |= value << CAN_IE_RF0NE_Pos;
    33a2:	78fb      	ldrb	r3, [r7, #3]
    33a4:	68fa      	ldr	r2, [r7, #12]
    33a6:	4313      	orrs	r3, r2
    33a8:	60fb      	str	r3, [r7, #12]
	((Can *)hw)->IE.reg = tmp;
    33aa:	687b      	ldr	r3, [r7, #4]
    33ac:	68fa      	ldr	r2, [r7, #12]
    33ae:	655a      	str	r2, [r3, #84]	; 0x54
	CAN_CRITICAL_SECTION_LEAVE();
}
    33b0:	bf00      	nop
    33b2:	3714      	adds	r7, #20
    33b4:	46bd      	mov	sp, r7
    33b6:	f85d 7b04 	ldr.w	r7, [sp], #4
    33ba:	4770      	bx	lr

000033bc <hri_can_write_IE_TCE_bit>:
	tmp = (tmp & CAN_IE_TCE) >> CAN_IE_TCE_Pos;
	return (bool)tmp;
}

static inline void hri_can_write_IE_TCE_bit(const void *const hw, bool value)
{
    33bc:	b480      	push	{r7}
    33be:	b085      	sub	sp, #20
    33c0:	af00      	add	r7, sp, #0
    33c2:	6078      	str	r0, [r7, #4]
    33c4:	460b      	mov	r3, r1
    33c6:	70fb      	strb	r3, [r7, #3]
	uint32_t tmp;
	CAN_CRITICAL_SECTION_ENTER();
	tmp = ((Can *)hw)->IE.reg;
    33c8:	687b      	ldr	r3, [r7, #4]
    33ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    33cc:	60fb      	str	r3, [r7, #12]
	tmp &= ~CAN_IE_TCE;
    33ce:	68fb      	ldr	r3, [r7, #12]
    33d0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
    33d4:	60fb      	str	r3, [r7, #12]
	tmp |= value << CAN_IE_TCE_Pos;
    33d6:	78fb      	ldrb	r3, [r7, #3]
    33d8:	025b      	lsls	r3, r3, #9
    33da:	461a      	mov	r2, r3
    33dc:	68fb      	ldr	r3, [r7, #12]
    33de:	4313      	orrs	r3, r2
    33e0:	60fb      	str	r3, [r7, #12]
	((Can *)hw)->IE.reg = tmp;
    33e2:	687b      	ldr	r3, [r7, #4]
    33e4:	68fa      	ldr	r2, [r7, #12]
    33e6:	655a      	str	r2, [r3, #84]	; 0x54
	CAN_CRITICAL_SECTION_LEAVE();
}
    33e8:	bf00      	nop
    33ea:	3714      	adds	r7, #20
    33ec:	46bd      	mov	sp, r7
    33ee:	f85d 7b04 	ldr.w	r7, [sp], #4
    33f2:	4770      	bx	lr

000033f4 <hri_can_get_IE_reg>:
	((Can *)hw)->IE.reg |= mask;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline hri_can_ie_reg_t hri_can_get_IE_reg(const void *const hw, hri_can_ie_reg_t mask)
{
    33f4:	b480      	push	{r7}
    33f6:	b085      	sub	sp, #20
    33f8:	af00      	add	r7, sp, #0
    33fa:	6078      	str	r0, [r7, #4]
    33fc:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	tmp = ((Can *)hw)->IE.reg;
    33fe:	687b      	ldr	r3, [r7, #4]
    3400:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    3402:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    3404:	68fa      	ldr	r2, [r7, #12]
    3406:	683b      	ldr	r3, [r7, #0]
    3408:	4013      	ands	r3, r2
    340a:	60fb      	str	r3, [r7, #12]
	return tmp;
    340c:	68fb      	ldr	r3, [r7, #12]
}
    340e:	4618      	mov	r0, r3
    3410:	3714      	adds	r7, #20
    3412:	46bd      	mov	sp, r7
    3414:	f85d 7b04 	ldr.w	r7, [sp], #4
    3418:	4770      	bx	lr

0000341a <hri_can_write_IE_reg>:

static inline void hri_can_write_IE_reg(const void *const hw, hri_can_ie_reg_t data)
{
    341a:	b480      	push	{r7}
    341c:	b083      	sub	sp, #12
    341e:	af00      	add	r7, sp, #0
    3420:	6078      	str	r0, [r7, #4]
    3422:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->IE.reg = data;
    3424:	687b      	ldr	r3, [r7, #4]
    3426:	683a      	ldr	r2, [r7, #0]
    3428:	655a      	str	r2, [r3, #84]	; 0x54
	CAN_CRITICAL_SECTION_LEAVE();
}
    342a:	bf00      	nop
    342c:	370c      	adds	r7, #12
    342e:	46bd      	mov	sp, r7
    3430:	f85d 7b04 	ldr.w	r7, [sp], #4
    3434:	4770      	bx	lr

00003436 <hri_can_write_ILE_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_ILE_reg(const void *const hw, hri_can_ile_reg_t data)
{
    3436:	b480      	push	{r7}
    3438:	b083      	sub	sp, #12
    343a:	af00      	add	r7, sp, #0
    343c:	6078      	str	r0, [r7, #4]
    343e:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->ILE.reg = data;
    3440:	687b      	ldr	r3, [r7, #4]
    3442:	683a      	ldr	r2, [r7, #0]
    3444:	65da      	str	r2, [r3, #92]	; 0x5c
	CAN_CRITICAL_SECTION_LEAVE();
}
    3446:	bf00      	nop
    3448:	370c      	adds	r7, #12
    344a:	46bd      	mov	sp, r7
    344c:	f85d 7b04 	ldr.w	r7, [sp], #4
    3450:	4770      	bx	lr

00003452 <hri_can_write_GFC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_GFC_reg(const void *const hw, hri_can_gfc_reg_t data)
{
    3452:	b480      	push	{r7}
    3454:	b083      	sub	sp, #12
    3456:	af00      	add	r7, sp, #0
    3458:	6078      	str	r0, [r7, #4]
    345a:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->GFC.reg = data;
    345c:	687b      	ldr	r3, [r7, #4]
    345e:	683a      	ldr	r2, [r7, #0]
    3460:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	CAN_CRITICAL_SECTION_LEAVE();
}
    3464:	bf00      	nop
    3466:	370c      	adds	r7, #12
    3468:	46bd      	mov	sp, r7
    346a:	f85d 7b04 	ldr.w	r7, [sp], #4
    346e:	4770      	bx	lr

00003470 <hri_can_write_SIDFC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_SIDFC_reg(const void *const hw, hri_can_sidfc_reg_t data)
{
    3470:	b480      	push	{r7}
    3472:	b083      	sub	sp, #12
    3474:	af00      	add	r7, sp, #0
    3476:	6078      	str	r0, [r7, #4]
    3478:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->SIDFC.reg = data;
    347a:	687b      	ldr	r3, [r7, #4]
    347c:	683a      	ldr	r2, [r7, #0]
    347e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	CAN_CRITICAL_SECTION_LEAVE();
}
    3482:	bf00      	nop
    3484:	370c      	adds	r7, #12
    3486:	46bd      	mov	sp, r7
    3488:	f85d 7b04 	ldr.w	r7, [sp], #4
    348c:	4770      	bx	lr

0000348e <hri_can_write_XIDFC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_XIDFC_reg(const void *const hw, hri_can_xidfc_reg_t data)
{
    348e:	b480      	push	{r7}
    3490:	b083      	sub	sp, #12
    3492:	af00      	add	r7, sp, #0
    3494:	6078      	str	r0, [r7, #4]
    3496:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->XIDFC.reg = data;
    3498:	687b      	ldr	r3, [r7, #4]
    349a:	683a      	ldr	r2, [r7, #0]
    349c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	CAN_CRITICAL_SECTION_LEAVE();
}
    34a0:	bf00      	nop
    34a2:	370c      	adds	r7, #12
    34a4:	46bd      	mov	sp, r7
    34a6:	f85d 7b04 	ldr.w	r7, [sp], #4
    34aa:	4770      	bx	lr

000034ac <hri_can_write_XIDAM_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_XIDAM_reg(const void *const hw, hri_can_xidam_reg_t data)
{
    34ac:	b480      	push	{r7}
    34ae:	b083      	sub	sp, #12
    34b0:	af00      	add	r7, sp, #0
    34b2:	6078      	str	r0, [r7, #4]
    34b4:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->XIDAM.reg = data;
    34b6:	687b      	ldr	r3, [r7, #4]
    34b8:	683a      	ldr	r2, [r7, #0]
    34ba:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	CAN_CRITICAL_SECTION_LEAVE();
}
    34be:	bf00      	nop
    34c0:	370c      	adds	r7, #12
    34c2:	46bd      	mov	sp, r7
    34c4:	f85d 7b04 	ldr.w	r7, [sp], #4
    34c8:	4770      	bx	lr

000034ca <hri_can_write_RXF0C_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_RXF0C_reg(const void *const hw, hri_can_rxf0c_reg_t data)
{
    34ca:	b480      	push	{r7}
    34cc:	b083      	sub	sp, #12
    34ce:	af00      	add	r7, sp, #0
    34d0:	6078      	str	r0, [r7, #4]
    34d2:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->RXF0C.reg = data;
    34d4:	687b      	ldr	r3, [r7, #4]
    34d6:	683a      	ldr	r2, [r7, #0]
    34d8:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	CAN_CRITICAL_SECTION_LEAVE();
}
    34dc:	bf00      	nop
    34de:	370c      	adds	r7, #12
    34e0:	46bd      	mov	sp, r7
    34e2:	f85d 7b04 	ldr.w	r7, [sp], #4
    34e6:	4770      	bx	lr

000034e8 <hri_can_write_RXF0A_F0AI_bf>:
	tmp = (tmp & CAN_RXF0A_F0AI(mask)) >> CAN_RXF0A_F0AI_Pos;
	return tmp;
}

static inline void hri_can_write_RXF0A_F0AI_bf(const void *const hw, hri_can_rxf0a_reg_t data)
{
    34e8:	b480      	push	{r7}
    34ea:	b085      	sub	sp, #20
    34ec:	af00      	add	r7, sp, #0
    34ee:	6078      	str	r0, [r7, #4]
    34f0:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	CAN_CRITICAL_SECTION_ENTER();
	tmp = ((Can *)hw)->RXF0A.reg;
    34f2:	687b      	ldr	r3, [r7, #4]
    34f4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
    34f8:	60fb      	str	r3, [r7, #12]
	tmp &= ~CAN_RXF0A_F0AI_Msk;
    34fa:	68fb      	ldr	r3, [r7, #12]
    34fc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
    3500:	60fb      	str	r3, [r7, #12]
	tmp |= CAN_RXF0A_F0AI(data);
    3502:	683b      	ldr	r3, [r7, #0]
    3504:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    3508:	68fa      	ldr	r2, [r7, #12]
    350a:	4313      	orrs	r3, r2
    350c:	60fb      	str	r3, [r7, #12]
	((Can *)hw)->RXF0A.reg = tmp;
    350e:	687b      	ldr	r3, [r7, #4]
    3510:	68fa      	ldr	r2, [r7, #12]
    3512:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	CAN_CRITICAL_SECTION_LEAVE();
}
    3516:	bf00      	nop
    3518:	3714      	adds	r7, #20
    351a:	46bd      	mov	sp, r7
    351c:	f85d 7b04 	ldr.w	r7, [sp], #4
    3520:	4770      	bx	lr

00003522 <hri_can_write_RXESC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_RXESC_reg(const void *const hw, hri_can_rxesc_reg_t data)
{
    3522:	b480      	push	{r7}
    3524:	b083      	sub	sp, #12
    3526:	af00      	add	r7, sp, #0
    3528:	6078      	str	r0, [r7, #4]
    352a:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->RXESC.reg = data;
    352c:	687b      	ldr	r3, [r7, #4]
    352e:	683a      	ldr	r2, [r7, #0]
    3530:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
	CAN_CRITICAL_SECTION_LEAVE();
}
    3534:	bf00      	nop
    3536:	370c      	adds	r7, #12
    3538:	46bd      	mov	sp, r7
    353a:	f85d 7b04 	ldr.w	r7, [sp], #4
    353e:	4770      	bx	lr

00003540 <hri_can_write_TXBC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_TXBC_reg(const void *const hw, hri_can_txbc_reg_t data)
{
    3540:	b480      	push	{r7}
    3542:	b083      	sub	sp, #12
    3544:	af00      	add	r7, sp, #0
    3546:	6078      	str	r0, [r7, #4]
    3548:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->TXBC.reg = data;
    354a:	687b      	ldr	r3, [r7, #4]
    354c:	683a      	ldr	r2, [r7, #0]
    354e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	CAN_CRITICAL_SECTION_LEAVE();
}
    3552:	bf00      	nop
    3554:	370c      	adds	r7, #12
    3556:	46bd      	mov	sp, r7
    3558:	f85d 7b04 	ldr.w	r7, [sp], #4
    355c:	4770      	bx	lr

0000355e <hri_can_write_TXESC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_TXESC_reg(const void *const hw, hri_can_txesc_reg_t data)
{
    355e:	b480      	push	{r7}
    3560:	b083      	sub	sp, #12
    3562:	af00      	add	r7, sp, #0
    3564:	6078      	str	r0, [r7, #4]
    3566:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->TXESC.reg = data;
    3568:	687b      	ldr	r3, [r7, #4]
    356a:	683a      	ldr	r2, [r7, #0]
    356c:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	CAN_CRITICAL_SECTION_LEAVE();
}
    3570:	bf00      	nop
    3572:	370c      	adds	r7, #12
    3574:	46bd      	mov	sp, r7
    3576:	f85d 7b04 	ldr.w	r7, [sp], #4
    357a:	4770      	bx	lr

0000357c <hri_can_write_TXBAR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_TXBAR_reg(const void *const hw, hri_can_txbar_reg_t data)
{
    357c:	b480      	push	{r7}
    357e:	b083      	sub	sp, #12
    3580:	af00      	add	r7, sp, #0
    3582:	6078      	str	r0, [r7, #4]
    3584:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->TXBAR.reg = data;
    3586:	687b      	ldr	r3, [r7, #4]
    3588:	683a      	ldr	r2, [r7, #0]
    358a:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
	CAN_CRITICAL_SECTION_LEAVE();
}
    358e:	bf00      	nop
    3590:	370c      	adds	r7, #12
    3592:	46bd      	mov	sp, r7
    3594:	f85d 7b04 	ldr.w	r7, [sp], #4
    3598:	4770      	bx	lr

0000359a <hri_can_write_TXBTIE_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_TXBTIE_reg(const void *const hw, hri_can_txbtie_reg_t data)
{
    359a:	b480      	push	{r7}
    359c:	b083      	sub	sp, #12
    359e:	af00      	add	r7, sp, #0
    35a0:	6078      	str	r0, [r7, #4]
    35a2:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->TXBTIE.reg = data;
    35a4:	687b      	ldr	r3, [r7, #4]
    35a6:	683a      	ldr	r2, [r7, #0]
    35a8:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
	CAN_CRITICAL_SECTION_LEAVE();
}
    35ac:	bf00      	nop
    35ae:	370c      	adds	r7, #12
    35b0:	46bd      	mov	sp, r7
    35b2:	f85d 7b04 	ldr.w	r7, [sp], #4
    35b6:	4770      	bx	lr

000035b8 <hri_can_write_TXEFC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_TXEFC_reg(const void *const hw, hri_can_txefc_reg_t data)
{
    35b8:	b480      	push	{r7}
    35ba:	b083      	sub	sp, #12
    35bc:	af00      	add	r7, sp, #0
    35be:	6078      	str	r0, [r7, #4]
    35c0:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->TXEFC.reg = data;
    35c2:	687b      	ldr	r3, [r7, #4]
    35c4:	683a      	ldr	r2, [r7, #0]
    35c6:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
	CAN_CRITICAL_SECTION_LEAVE();
}
    35ca:	bf00      	nop
    35cc:	370c      	adds	r7, #12
    35ce:	46bd      	mov	sp, r7
    35d0:	f85d 7b04 	ldr.w	r7, [sp], #4
    35d4:	4770      	bx	lr
	...

000035d8 <_can_async_init>:

/**
 * \brief Initialize CAN.
 */
int32_t _can_async_init(struct _can_async_device *const dev, void *const hw)
{
    35d8:	b580      	push	{r7, lr}
    35da:	b082      	sub	sp, #8
    35dc:	af00      	add	r7, sp, #0
    35de:	6078      	str	r0, [r7, #4]
    35e0:	6039      	str	r1, [r7, #0]
	dev->hw = hw;
    35e2:	687b      	ldr	r3, [r7, #4]
    35e4:	683a      	ldr	r2, [r7, #0]
    35e6:	601a      	str	r2, [r3, #0]
	hri_can_set_CCCR_INIT_bit(dev->hw);
    35e8:	687b      	ldr	r3, [r7, #4]
    35ea:	681b      	ldr	r3, [r3, #0]
    35ec:	4618      	mov	r0, r3
    35ee:	4b55      	ldr	r3, [pc, #340]	; (3744 <_can_async_init+0x16c>)
    35f0:	4798      	blx	r3
	while (hri_can_get_CCCR_INIT_bit(dev->hw) == 0)
    35f2:	bf00      	nop
    35f4:	687b      	ldr	r3, [r7, #4]
    35f6:	681b      	ldr	r3, [r3, #0]
    35f8:	4618      	mov	r0, r3
    35fa:	4b53      	ldr	r3, [pc, #332]	; (3748 <_can_async_init+0x170>)
    35fc:	4798      	blx	r3
    35fe:	4603      	mov	r3, r0
    3600:	f083 0301 	eor.w	r3, r3, #1
    3604:	b2db      	uxtb	r3, r3
    3606:	2b00      	cmp	r3, #0
    3608:	d1f4      	bne.n	35f4 <_can_async_init+0x1c>
		;
	hri_can_set_CCCR_CCE_bit(dev->hw);
    360a:	687b      	ldr	r3, [r7, #4]
    360c:	681b      	ldr	r3, [r3, #0]
    360e:	4618      	mov	r0, r3
    3610:	4b4e      	ldr	r3, [pc, #312]	; (374c <_can_async_init+0x174>)
    3612:	4798      	blx	r3
		hri_can_write_ILE_reg(dev->hw, CAN_ILE_EINT0);
	}
#endif

#ifdef CONF_CAN1_ENABLED
	if (hw == CAN1) {
    3614:	683b      	ldr	r3, [r7, #0]
    3616:	4a4e      	ldr	r2, [pc, #312]	; (3750 <_can_async_init+0x178>)
    3618:	4293      	cmp	r3, r2
    361a:	d17a      	bne.n	3712 <_can_async_init+0x13a>
		_can1_dev    = dev;
    361c:	4a4d      	ldr	r2, [pc, #308]	; (3754 <_can_async_init+0x17c>)
    361e:	687b      	ldr	r3, [r7, #4]
    3620:	6013      	str	r3, [r2, #0]
		dev->context = (void *)&_can1_context;
    3622:	687b      	ldr	r3, [r7, #4]
    3624:	4a4c      	ldr	r2, [pc, #304]	; (3758 <_can_async_init+0x180>)
    3626:	619a      	str	r2, [r3, #24]
		hri_can_set_CCCR_reg(dev->hw, CONF_CAN1_CCCR_REG);
    3628:	687b      	ldr	r3, [r7, #4]
    362a:	681b      	ldr	r3, [r3, #0]
    362c:	f44f 7140 	mov.w	r1, #768	; 0x300
    3630:	4618      	mov	r0, r3
    3632:	4b4a      	ldr	r3, [pc, #296]	; (375c <_can_async_init+0x184>)
    3634:	4798      	blx	r3
		hri_can_write_MRCFG_reg(dev->hw, CONF_CAN1_MRCFG_REG);
    3636:	687b      	ldr	r3, [r7, #4]
    3638:	681b      	ldr	r3, [r3, #0]
    363a:	2102      	movs	r1, #2
    363c:	4618      	mov	r0, r3
    363e:	4b48      	ldr	r3, [pc, #288]	; (3760 <_can_async_init+0x188>)
    3640:	4798      	blx	r3
		hri_can_write_NBTP_reg(dev->hw, CONF_CAN1_BTP_REG);
    3642:	687b      	ldr	r3, [r7, #4]
    3644:	681b      	ldr	r3, [r3, #0]
    3646:	4947      	ldr	r1, [pc, #284]	; (3764 <_can_async_init+0x18c>)
    3648:	4618      	mov	r0, r3
    364a:	4b47      	ldr	r3, [pc, #284]	; (3768 <_can_async_init+0x190>)
    364c:	4798      	blx	r3
		hri_can_write_DBTP_reg(dev->hw, CONF_CAN1_DBTP_REG);
    364e:	687b      	ldr	r3, [r7, #4]
    3650:	681b      	ldr	r3, [r3, #0]
    3652:	4946      	ldr	r1, [pc, #280]	; (376c <_can_async_init+0x194>)
    3654:	4618      	mov	r0, r3
    3656:	4b46      	ldr	r3, [pc, #280]	; (3770 <_can_async_init+0x198>)
    3658:	4798      	blx	r3
		hri_can_write_RXF0C_reg(dev->hw, CONF_CAN1_RXF0C_REG | CAN_RXF0C_F0SA((uint32_t)can1_rx_fifo));
    365a:	687b      	ldr	r3, [r7, #4]
    365c:	681a      	ldr	r2, [r3, #0]
    365e:	4b45      	ldr	r3, [pc, #276]	; (3774 <_can_async_init+0x19c>)
    3660:	b29b      	uxth	r3, r3
    3662:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    3666:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    366a:	4619      	mov	r1, r3
    366c:	4610      	mov	r0, r2
    366e:	4b42      	ldr	r3, [pc, #264]	; (3778 <_can_async_init+0x1a0>)
    3670:	4798      	blx	r3
		hri_can_write_RXESC_reg(dev->hw, CONF_CAN1_RXESC_REG);
    3672:	687b      	ldr	r3, [r7, #4]
    3674:	681b      	ldr	r3, [r3, #0]
    3676:	2107      	movs	r1, #7
    3678:	4618      	mov	r0, r3
    367a:	4b40      	ldr	r3, [pc, #256]	; (377c <_can_async_init+0x1a4>)
    367c:	4798      	blx	r3
		hri_can_write_TXESC_reg(dev->hw, CONF_CAN1_TXESC_REG);
    367e:	687b      	ldr	r3, [r7, #4]
    3680:	681b      	ldr	r3, [r3, #0]
    3682:	2107      	movs	r1, #7
    3684:	4618      	mov	r0, r3
    3686:	4b3e      	ldr	r3, [pc, #248]	; (3780 <_can_async_init+0x1a8>)
    3688:	4798      	blx	r3
		hri_can_write_TXBC_reg(dev->hw, CONF_CAN1_TXBC_REG | CAN_TXBC_TBSA((uint32_t)can1_tx_fifo));
    368a:	687b      	ldr	r3, [r7, #4]
    368c:	681a      	ldr	r2, [r3, #0]
    368e:	4b3d      	ldr	r3, [pc, #244]	; (3784 <_can_async_init+0x1ac>)
    3690:	b29b      	uxth	r3, r3
    3692:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    3696:	4619      	mov	r1, r3
    3698:	4610      	mov	r0, r2
    369a:	4b3b      	ldr	r3, [pc, #236]	; (3788 <_can_async_init+0x1b0>)
    369c:	4798      	blx	r3
		hri_can_write_TXEFC_reg(dev->hw, CONF_CAN1_TXEFC_REG | CAN_TXEFC_EFSA((uint32_t)can1_tx_event_fifo));
    369e:	687b      	ldr	r3, [r7, #4]
    36a0:	681a      	ldr	r2, [r3, #0]
    36a2:	4b3a      	ldr	r3, [pc, #232]	; (378c <_can_async_init+0x1b4>)
    36a4:	b29b      	uxth	r3, r3
    36a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    36aa:	4619      	mov	r1, r3
    36ac:	4610      	mov	r0, r2
    36ae:	4b38      	ldr	r3, [pc, #224]	; (3790 <_can_async_init+0x1b8>)
    36b0:	4798      	blx	r3
		hri_can_write_GFC_reg(dev->hw, CONF_CAN1_GFC_REG);
    36b2:	687b      	ldr	r3, [r7, #4]
    36b4:	681b      	ldr	r3, [r3, #0]
    36b6:	2108      	movs	r1, #8
    36b8:	4618      	mov	r0, r3
    36ba:	4b36      	ldr	r3, [pc, #216]	; (3794 <_can_async_init+0x1bc>)
    36bc:	4798      	blx	r3
		hri_can_write_SIDFC_reg(dev->hw, CONF_CAN1_SIDFC_REG | CAN_SIDFC_FLSSA((uint32_t)can1_rx_std_filter));
    36be:	687b      	ldr	r3, [r7, #4]
    36c0:	681a      	ldr	r2, [r3, #0]
    36c2:	4b35      	ldr	r3, [pc, #212]	; (3798 <_can_async_init+0x1c0>)
    36c4:	b29b      	uxth	r3, r3
    36c6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
    36ca:	4619      	mov	r1, r3
    36cc:	4610      	mov	r0, r2
    36ce:	4b33      	ldr	r3, [pc, #204]	; (379c <_can_async_init+0x1c4>)
    36d0:	4798      	blx	r3
		hri_can_write_XIDFC_reg(dev->hw, CONF_CAN1_XIDFC_REG | CAN_XIDFC_FLESA((uint32_t)can1_rx_ext_filter));
    36d2:	687b      	ldr	r3, [r7, #4]
    36d4:	681a      	ldr	r2, [r3, #0]
    36d6:	4b32      	ldr	r3, [pc, #200]	; (37a0 <_can_async_init+0x1c8>)
    36d8:	b29b      	uxth	r3, r3
    36da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    36de:	4619      	mov	r1, r3
    36e0:	4610      	mov	r0, r2
    36e2:	4b30      	ldr	r3, [pc, #192]	; (37a4 <_can_async_init+0x1cc>)
    36e4:	4798      	blx	r3
		hri_can_write_XIDAM_reg(dev->hw, CONF_CAN1_XIDAM_REG);
    36e6:	687b      	ldr	r3, [r7, #4]
    36e8:	681b      	ldr	r3, [r3, #0]
    36ea:	f06f 4160 	mvn.w	r1, #3758096384	; 0xe0000000
    36ee:	4618      	mov	r0, r3
    36f0:	4b2d      	ldr	r3, [pc, #180]	; (37a8 <_can_async_init+0x1d0>)
    36f2:	4798      	blx	r3

		NVIC_DisableIRQ(CAN1_IRQn);
    36f4:	204f      	movs	r0, #79	; 0x4f
    36f6:	4b2d      	ldr	r3, [pc, #180]	; (37ac <_can_async_init+0x1d4>)
    36f8:	4798      	blx	r3
		NVIC_ClearPendingIRQ(CAN1_IRQn);
    36fa:	204f      	movs	r0, #79	; 0x4f
    36fc:	4b2c      	ldr	r3, [pc, #176]	; (37b0 <_can_async_init+0x1d8>)
    36fe:	4798      	blx	r3
		NVIC_EnableIRQ(CAN1_IRQn);
    3700:	204f      	movs	r0, #79	; 0x4f
    3702:	4b2c      	ldr	r3, [pc, #176]	; (37b4 <_can_async_init+0x1dc>)
    3704:	4798      	blx	r3
		hri_can_write_ILE_reg(dev->hw, CAN_ILE_EINT0);
    3706:	687b      	ldr	r3, [r7, #4]
    3708:	681b      	ldr	r3, [r3, #0]
    370a:	2101      	movs	r1, #1
    370c:	4618      	mov	r0, r3
    370e:	4b2a      	ldr	r3, [pc, #168]	; (37b8 <_can_async_init+0x1e0>)
    3710:	4798      	blx	r3
	}
#endif

	/* Disable CCE to prevent Configuration Change */
	hri_can_clear_CCCR_CCE_bit(dev->hw);
    3712:	687b      	ldr	r3, [r7, #4]
    3714:	681b      	ldr	r3, [r3, #0]
    3716:	4618      	mov	r0, r3
    3718:	4b28      	ldr	r3, [pc, #160]	; (37bc <_can_async_init+0x1e4>)
    371a:	4798      	blx	r3
	hri_can_clear_CCCR_INIT_bit(dev->hw);
    371c:	687b      	ldr	r3, [r7, #4]
    371e:	681b      	ldr	r3, [r3, #0]
    3720:	4618      	mov	r0, r3
    3722:	4b27      	ldr	r3, [pc, #156]	; (37c0 <_can_async_init+0x1e8>)
    3724:	4798      	blx	r3
	while (hri_can_get_CCCR_INIT_bit(dev->hw)) {
    3726:	bf00      	nop
    3728:	687b      	ldr	r3, [r7, #4]
    372a:	681b      	ldr	r3, [r3, #0]
    372c:	4618      	mov	r0, r3
    372e:	4b06      	ldr	r3, [pc, #24]	; (3748 <_can_async_init+0x170>)
    3730:	4798      	blx	r3
    3732:	4603      	mov	r3, r0
    3734:	2b00      	cmp	r3, #0
    3736:	d1f7      	bne.n	3728 <_can_async_init+0x150>
	};

	return ERR_NONE;
    3738:	2300      	movs	r3, #0
}
    373a:	4618      	mov	r0, r3
    373c:	3708      	adds	r7, #8
    373e:	46bd      	mov	sp, r7
    3740:	bd80      	pop	{r7, pc}
    3742:	bf00      	nop
    3744:	00003209 	.word	0x00003209
    3748:	00003229 	.word	0x00003229
    374c:	00003277 	.word	0x00003277
    3750:	42000400 	.word	0x42000400
    3754:	20000bf0 	.word	0x20000bf0
    3758:	20000004 	.word	0x20000004
    375c:	00003317 	.word	0x00003317
    3760:	000031d1 	.word	0x000031d1
    3764:	00010c01 	.word	0x00010c01
    3768:	00003339 	.word	0x00003339
    376c:	00010c10 	.word	0x00010c10
    3770:	000031ed 	.word	0x000031ed
    3774:	20001bc0 	.word	0x20001bc0
    3778:	000034cb 	.word	0x000034cb
    377c:	00003523 	.word	0x00003523
    3780:	0000355f 	.word	0x0000355f
    3784:	20001b78 	.word	0x20001b78
    3788:	00003541 	.word	0x00003541
    378c:	20000b50 	.word	0x20000b50
    3790:	000035b9 	.word	0x000035b9
    3794:	00003453 	.word	0x00003453
    3798:	20000b60 	.word	0x20000b60
    379c:	00003471 	.word	0x00003471
    37a0:	20000be0 	.word	0x20000be0
    37a4:	0000348f 	.word	0x0000348f
    37a8:	000034ad 	.word	0x000034ad
    37ac:	000030a1 	.word	0x000030a1
    37b0:	000030e5 	.word	0x000030e5
    37b4:	00003065 	.word	0x00003065
    37b8:	00003437 	.word	0x00003437
    37bc:	00003297 	.word	0x00003297
    37c0:	00003257 	.word	0x00003257

000037c4 <_can_async_enable>:

/**
 * \brief Enable CAN
 */
int32_t _can_async_enable(struct _can_async_device *const dev)
{
    37c4:	b580      	push	{r7, lr}
    37c6:	b082      	sub	sp, #8
    37c8:	af00      	add	r7, sp, #0
    37ca:	6078      	str	r0, [r7, #4]
	hri_can_clear_CCCR_INIT_bit(dev->hw);
    37cc:	687b      	ldr	r3, [r7, #4]
    37ce:	681b      	ldr	r3, [r3, #0]
    37d0:	4618      	mov	r0, r3
    37d2:	4b03      	ldr	r3, [pc, #12]	; (37e0 <_can_async_enable+0x1c>)
    37d4:	4798      	blx	r3
	return ERR_NONE;
    37d6:	2300      	movs	r3, #0
}
    37d8:	4618      	mov	r0, r3
    37da:	3708      	adds	r7, #8
    37dc:	46bd      	mov	sp, r7
    37de:	bd80      	pop	{r7, pc}
    37e0:	00003257 	.word	0x00003257

000037e4 <_can_async_read>:

/**
 * \brief Read a CAN message
 */
int32_t _can_async_read(struct _can_async_device *const dev, struct can_message *msg)
{
    37e4:	b590      	push	{r4, r7, lr}
    37e6:	b089      	sub	sp, #36	; 0x24
    37e8:	af00      	add	r7, sp, #0
    37ea:	6078      	str	r0, [r7, #4]
    37ec:	6039      	str	r1, [r7, #0]
	struct _can_rx_fifo_entry *f = NULL;
    37ee:	2300      	movs	r3, #0
    37f0:	61fb      	str	r3, [r7, #28]
	hri_can_rxf0s_reg_t        get_index;

	if (!hri_can_read_RXF0S_F0FL_bf(dev->hw)) {
    37f2:	687b      	ldr	r3, [r7, #4]
    37f4:	681b      	ldr	r3, [r3, #0]
    37f6:	4618      	mov	r0, r3
    37f8:	4b37      	ldr	r3, [pc, #220]	; (38d8 <_can_async_read+0xf4>)
    37fa:	4798      	blx	r3
    37fc:	4603      	mov	r3, r0
    37fe:	2b00      	cmp	r3, #0
    3800:	d102      	bne.n	3808 <_can_async_read+0x24>
		return ERR_NOT_FOUND;
    3802:	f06f 0309 	mvn.w	r3, #9
    3806:	e063      	b.n	38d0 <_can_async_read+0xec>
	}

	get_index = hri_can_read_RXF0S_F0GI_bf(dev->hw);
    3808:	687b      	ldr	r3, [r7, #4]
    380a:	681b      	ldr	r3, [r3, #0]
    380c:	4618      	mov	r0, r3
    380e:	4b33      	ldr	r3, [pc, #204]	; (38dc <_can_async_read+0xf8>)
    3810:	4798      	blx	r3
    3812:	61b8      	str	r0, [r7, #24]
	if (dev->hw == CAN0) {
		f = (struct _can_rx_fifo_entry *)(can0_rx_fifo + get_index * CONF_CAN0_F0DS);
	}
#endif
#ifdef CONF_CAN1_ENABLED
	if (dev->hw == CAN1) {
    3814:	687b      	ldr	r3, [r7, #4]
    3816:	681b      	ldr	r3, [r3, #0]
    3818:	4a31      	ldr	r2, [pc, #196]	; (38e0 <_can_async_read+0xfc>)
    381a:	4293      	cmp	r3, r2
    381c:	d108      	bne.n	3830 <_can_async_read+0x4c>
		f = (struct _can_rx_fifo_entry *)(can1_rx_fifo + get_index * CONF_CAN1_F0DS);
    381e:	69ba      	ldr	r2, [r7, #24]
    3820:	4613      	mov	r3, r2
    3822:	00db      	lsls	r3, r3, #3
    3824:	4413      	add	r3, r2
    3826:	00db      	lsls	r3, r3, #3
    3828:	461a      	mov	r2, r3
    382a:	4b2e      	ldr	r3, [pc, #184]	; (38e4 <_can_async_read+0x100>)
    382c:	4413      	add	r3, r2
    382e:	61fb      	str	r3, [r7, #28]
	}
#endif

	if (f == NULL) {
    3830:	69fb      	ldr	r3, [r7, #28]
    3832:	2b00      	cmp	r3, #0
    3834:	d102      	bne.n	383c <_can_async_read+0x58>
		return ERR_NO_RESOURCE;
    3836:	f06f 031b 	mvn.w	r3, #27
    383a:	e049      	b.n	38d0 <_can_async_read+0xec>
	}

	if (f->R0.bit.XTD == 1) {
    383c:	69fb      	ldr	r3, [r7, #28]
    383e:	681b      	ldr	r3, [r3, #0]
    3840:	f3c3 7380 	ubfx	r3, r3, #30, #1
    3844:	b2db      	uxtb	r3, r3
    3846:	2b01      	cmp	r3, #1
    3848:	d10a      	bne.n	3860 <_can_async_read+0x7c>
		msg->fmt = CAN_FMT_EXTID;
    384a:	683b      	ldr	r3, [r7, #0]
    384c:	2201      	movs	r2, #1
    384e:	735a      	strb	r2, [r3, #13]
		msg->id  = f->R0.bit.ID;
    3850:	69fb      	ldr	r3, [r7, #28]
    3852:	681b      	ldr	r3, [r3, #0]
    3854:	f3c3 031c 	ubfx	r3, r3, #0, #29
    3858:	461a      	mov	r2, r3
    385a:	683b      	ldr	r3, [r7, #0]
    385c:	601a      	str	r2, [r3, #0]
    385e:	e00a      	b.n	3876 <_can_async_read+0x92>
	} else {
		msg->fmt = CAN_FMT_STDID;
    3860:	683b      	ldr	r3, [r7, #0]
    3862:	2200      	movs	r2, #0
    3864:	735a      	strb	r2, [r3, #13]
		/* A standard identifier is stored into ID[28:18] */
		msg->id = f->R0.bit.ID >> 18;
    3866:	69fb      	ldr	r3, [r7, #28]
    3868:	681b      	ldr	r3, [r3, #0]
    386a:	f3c3 031c 	ubfx	r3, r3, #0, #29
    386e:	149b      	asrs	r3, r3, #18
    3870:	461a      	mov	r2, r3
    3872:	683b      	ldr	r3, [r7, #0]
    3874:	601a      	str	r2, [r3, #0]
	}

	if (f->R0.bit.RTR == 1) {
    3876:	69fb      	ldr	r3, [r7, #28]
    3878:	681b      	ldr	r3, [r3, #0]
    387a:	f3c3 7340 	ubfx	r3, r3, #29, #1
    387e:	b2db      	uxtb	r3, r3
    3880:	2b01      	cmp	r3, #1
    3882:	d102      	bne.n	388a <_can_async_read+0xa6>
		msg->type = CAN_TYPE_REMOTE;
    3884:	683b      	ldr	r3, [r7, #0]
    3886:	2201      	movs	r2, #1
    3888:	711a      	strb	r2, [r3, #4]
	}

	const uint8_t dlc2len[] = {0, 1, 2, 3, 4, 5, 6, 7, 8, 12, 16, 20, 24, 32, 48, 64};
    388a:	4b17      	ldr	r3, [pc, #92]	; (38e8 <_can_async_read+0x104>)
    388c:	f107 0408 	add.w	r4, r7, #8
    3890:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    3892:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	msg->len                = dlc2len[f->R1.bit.DLC];
    3896:	69fb      	ldr	r3, [r7, #28]
    3898:	685b      	ldr	r3, [r3, #4]
    389a:	f3c3 4303 	ubfx	r3, r3, #16, #4
    389e:	b2db      	uxtb	r3, r3
    38a0:	f107 0220 	add.w	r2, r7, #32
    38a4:	4413      	add	r3, r2
    38a6:	f813 2c18 	ldrb.w	r2, [r3, #-24]
    38aa:	683b      	ldr	r3, [r7, #0]
    38ac:	731a      	strb	r2, [r3, #12]

	memcpy(msg->data, f->data, msg->len);
    38ae:	683b      	ldr	r3, [r7, #0]
    38b0:	6898      	ldr	r0, [r3, #8]
    38b2:	69fb      	ldr	r3, [r7, #28]
    38b4:	f103 0108 	add.w	r1, r3, #8
    38b8:	683b      	ldr	r3, [r7, #0]
    38ba:	7b1b      	ldrb	r3, [r3, #12]
    38bc:	461a      	mov	r2, r3
    38be:	4b0b      	ldr	r3, [pc, #44]	; (38ec <_can_async_read+0x108>)
    38c0:	4798      	blx	r3

	hri_can_write_RXF0A_F0AI_bf(dev->hw, get_index);
    38c2:	687b      	ldr	r3, [r7, #4]
    38c4:	681b      	ldr	r3, [r3, #0]
    38c6:	69b9      	ldr	r1, [r7, #24]
    38c8:	4618      	mov	r0, r3
    38ca:	4b09      	ldr	r3, [pc, #36]	; (38f0 <_can_async_read+0x10c>)
    38cc:	4798      	blx	r3

	return ERR_NONE;
    38ce:	2300      	movs	r3, #0
}
    38d0:	4618      	mov	r0, r3
    38d2:	3724      	adds	r7, #36	; 0x24
    38d4:	46bd      	mov	sp, r7
    38d6:	bd90      	pop	{r4, r7, pc}
    38d8:	00003149 	.word	0x00003149
    38dc:	00003167 	.word	0x00003167
    38e0:	42000400 	.word	0x42000400
    38e4:	20001bc0 	.word	0x20001bc0
    38e8:	00012f6c 	.word	0x00012f6c
    38ec:	00012b29 	.word	0x00012b29
    38f0:	000034e9 	.word	0x000034e9

000038f4 <_can_async_write>:

/**
 * \brief Write a CAN message
 */
int32_t _can_async_write(struct _can_async_device *const dev, struct can_message *msg)
{
    38f4:	b590      	push	{r4, r7, lr}
    38f6:	b085      	sub	sp, #20
    38f8:	af00      	add	r7, sp, #0
    38fa:	6078      	str	r0, [r7, #4]
    38fc:	6039      	str	r1, [r7, #0]
	struct _can_tx_fifo_entry *f = NULL;
    38fe:	2300      	movs	r3, #0
    3900:	60fb      	str	r3, [r7, #12]
	hri_can_txfqs_reg_t        put_index;

	if (hri_can_get_TXFQS_TFQF_bit(dev->hw)) {
    3902:	687b      	ldr	r3, [r7, #4]
    3904:	681b      	ldr	r3, [r3, #0]
    3906:	4618      	mov	r0, r3
    3908:	4b61      	ldr	r3, [pc, #388]	; (3a90 <_can_async_write+0x19c>)
    390a:	4798      	blx	r3
    390c:	4603      	mov	r3, r0
    390e:	2b00      	cmp	r3, #0
    3910:	d002      	beq.n	3918 <_can_async_write+0x24>
		return ERR_NO_RESOURCE;
    3912:	f06f 031b 	mvn.w	r3, #27
    3916:	e0b7      	b.n	3a88 <_can_async_write+0x194>
	}

	put_index = hri_can_read_TXFQS_TFQPI_bf(dev->hw);
    3918:	687b      	ldr	r3, [r7, #4]
    391a:	681b      	ldr	r3, [r3, #0]
    391c:	4618      	mov	r0, r3
    391e:	4b5d      	ldr	r3, [pc, #372]	; (3a94 <_can_async_write+0x1a0>)
    3920:	4798      	blx	r3
    3922:	60b8      	str	r0, [r7, #8]
	if (dev->hw == CAN0) {
		f = (struct _can_tx_fifo_entry *)(can0_tx_fifo + put_index * CONF_CAN0_TBDS);
	}
#endif
#ifdef CONF_CAN1_ENABLED
	if (dev->hw == CAN1) {
    3924:	687b      	ldr	r3, [r7, #4]
    3926:	681b      	ldr	r3, [r3, #0]
    3928:	4a5b      	ldr	r2, [pc, #364]	; (3a98 <_can_async_write+0x1a4>)
    392a:	4293      	cmp	r3, r2
    392c:	d108      	bne.n	3940 <_can_async_write+0x4c>
		f = (struct _can_tx_fifo_entry *)(can1_tx_fifo + put_index * CONF_CAN1_TBDS);
    392e:	68ba      	ldr	r2, [r7, #8]
    3930:	4613      	mov	r3, r2
    3932:	00db      	lsls	r3, r3, #3
    3934:	4413      	add	r3, r2
    3936:	00db      	lsls	r3, r3, #3
    3938:	461a      	mov	r2, r3
    393a:	4b58      	ldr	r3, [pc, #352]	; (3a9c <_can_async_write+0x1a8>)
    393c:	4413      	add	r3, r2
    393e:	60fb      	str	r3, [r7, #12]
	}
#endif
	if (f == NULL) {
    3940:	68fb      	ldr	r3, [r7, #12]
    3942:	2b00      	cmp	r3, #0
    3944:	d102      	bne.n	394c <_can_async_write+0x58>
		return ERR_NO_RESOURCE;
    3946:	f06f 031b 	mvn.w	r3, #27
    394a:	e09d      	b.n	3a88 <_can_async_write+0x194>
	}

	if (msg->fmt == CAN_FMT_EXTID) {
    394c:	683b      	ldr	r3, [r7, #0]
    394e:	7b5b      	ldrb	r3, [r3, #13]
    3950:	2b01      	cmp	r3, #1
    3952:	d109      	bne.n	3968 <_can_async_write+0x74>
		f->T0.val     = msg->id;
    3954:	683b      	ldr	r3, [r7, #0]
    3956:	681a      	ldr	r2, [r3, #0]
    3958:	68fb      	ldr	r3, [r7, #12]
    395a:	601a      	str	r2, [r3, #0]
		f->T0.bit.XTD = 1;
    395c:	68fa      	ldr	r2, [r7, #12]
    395e:	6813      	ldr	r3, [r2, #0]
    3960:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
    3964:	6013      	str	r3, [r2, #0]
    3966:	e004      	b.n	3972 <_can_async_write+0x7e>
	} else {
		/* A standard identifier is stored into ID[28:18] */
		f->T0.val = msg->id << 18;
    3968:	683b      	ldr	r3, [r7, #0]
    396a:	681b      	ldr	r3, [r3, #0]
    396c:	049a      	lsls	r2, r3, #18
    396e:	68fb      	ldr	r3, [r7, #12]
    3970:	601a      	str	r2, [r3, #0]
	}

	if (msg->len <= 8) {
    3972:	683b      	ldr	r3, [r7, #0]
    3974:	7b1b      	ldrb	r3, [r3, #12]
    3976:	2b08      	cmp	r3, #8
    3978:	d80a      	bhi.n	3990 <_can_async_write+0x9c>
		f->T1.bit.DLC = msg->len;
    397a:	683b      	ldr	r3, [r7, #0]
    397c:	7b1b      	ldrb	r3, [r3, #12]
    397e:	f003 030f 	and.w	r3, r3, #15
    3982:	b2d9      	uxtb	r1, r3
    3984:	68fa      	ldr	r2, [r7, #12]
    3986:	6853      	ldr	r3, [r2, #4]
    3988:	f361 4313 	bfi	r3, r1, #16, #4
    398c:	6053      	str	r3, [r2, #4]
    398e:	e04a      	b.n	3a26 <_can_async_write+0x132>
	} else if (msg->len <= 12) {
    3990:	683b      	ldr	r3, [r7, #0]
    3992:	7b1b      	ldrb	r3, [r3, #12]
    3994:	2b0c      	cmp	r3, #12
    3996:	d806      	bhi.n	39a6 <_can_async_write+0xb2>
		f->T1.bit.DLC = 0x9;
    3998:	68fa      	ldr	r2, [r7, #12]
    399a:	6853      	ldr	r3, [r2, #4]
    399c:	2109      	movs	r1, #9
    399e:	f361 4313 	bfi	r3, r1, #16, #4
    39a2:	6053      	str	r3, [r2, #4]
    39a4:	e03f      	b.n	3a26 <_can_async_write+0x132>
	} else if (msg->len <= 16) {
    39a6:	683b      	ldr	r3, [r7, #0]
    39a8:	7b1b      	ldrb	r3, [r3, #12]
    39aa:	2b10      	cmp	r3, #16
    39ac:	d806      	bhi.n	39bc <_can_async_write+0xc8>
		f->T1.bit.DLC = 0xA;
    39ae:	68fa      	ldr	r2, [r7, #12]
    39b0:	6853      	ldr	r3, [r2, #4]
    39b2:	210a      	movs	r1, #10
    39b4:	f361 4313 	bfi	r3, r1, #16, #4
    39b8:	6053      	str	r3, [r2, #4]
    39ba:	e034      	b.n	3a26 <_can_async_write+0x132>
	} else if (msg->len <= 20) {
    39bc:	683b      	ldr	r3, [r7, #0]
    39be:	7b1b      	ldrb	r3, [r3, #12]
    39c0:	2b14      	cmp	r3, #20
    39c2:	d806      	bhi.n	39d2 <_can_async_write+0xde>
		f->T1.bit.DLC = 0xB;
    39c4:	68fa      	ldr	r2, [r7, #12]
    39c6:	6853      	ldr	r3, [r2, #4]
    39c8:	210b      	movs	r1, #11
    39ca:	f361 4313 	bfi	r3, r1, #16, #4
    39ce:	6053      	str	r3, [r2, #4]
    39d0:	e029      	b.n	3a26 <_can_async_write+0x132>
	} else if (msg->len <= 24) {
    39d2:	683b      	ldr	r3, [r7, #0]
    39d4:	7b1b      	ldrb	r3, [r3, #12]
    39d6:	2b18      	cmp	r3, #24
    39d8:	d806      	bhi.n	39e8 <_can_async_write+0xf4>
		f->T1.bit.DLC = 0xC;
    39da:	68fa      	ldr	r2, [r7, #12]
    39dc:	6853      	ldr	r3, [r2, #4]
    39de:	210c      	movs	r1, #12
    39e0:	f361 4313 	bfi	r3, r1, #16, #4
    39e4:	6053      	str	r3, [r2, #4]
    39e6:	e01e      	b.n	3a26 <_can_async_write+0x132>
	} else if (msg->len <= 32) {
    39e8:	683b      	ldr	r3, [r7, #0]
    39ea:	7b1b      	ldrb	r3, [r3, #12]
    39ec:	2b20      	cmp	r3, #32
    39ee:	d806      	bhi.n	39fe <_can_async_write+0x10a>
		f->T1.bit.DLC = 0xD;
    39f0:	68fa      	ldr	r2, [r7, #12]
    39f2:	6853      	ldr	r3, [r2, #4]
    39f4:	210d      	movs	r1, #13
    39f6:	f361 4313 	bfi	r3, r1, #16, #4
    39fa:	6053      	str	r3, [r2, #4]
    39fc:	e013      	b.n	3a26 <_can_async_write+0x132>
	} else if (msg->len <= 48) {
    39fe:	683b      	ldr	r3, [r7, #0]
    3a00:	7b1b      	ldrb	r3, [r3, #12]
    3a02:	2b30      	cmp	r3, #48	; 0x30
    3a04:	d806      	bhi.n	3a14 <_can_async_write+0x120>
		f->T1.bit.DLC = 0xE;
    3a06:	68fa      	ldr	r2, [r7, #12]
    3a08:	6853      	ldr	r3, [r2, #4]
    3a0a:	210e      	movs	r1, #14
    3a0c:	f361 4313 	bfi	r3, r1, #16, #4
    3a10:	6053      	str	r3, [r2, #4]
    3a12:	e008      	b.n	3a26 <_can_async_write+0x132>
	} else if (msg->len <= 64) {
    3a14:	683b      	ldr	r3, [r7, #0]
    3a16:	7b1b      	ldrb	r3, [r3, #12]
    3a18:	2b40      	cmp	r3, #64	; 0x40
    3a1a:	d804      	bhi.n	3a26 <_can_async_write+0x132>
		f->T1.bit.DLC = 0xF;
    3a1c:	68fa      	ldr	r2, [r7, #12]
    3a1e:	6853      	ldr	r3, [r2, #4]
    3a20:	f443 2370 	orr.w	r3, r3, #983040	; 0xf0000
    3a24:	6053      	str	r3, [r2, #4]
	}

	f->T1.bit.FDF = hri_can_get_CCCR_FDOE_bit(dev->hw);
    3a26:	687b      	ldr	r3, [r7, #4]
    3a28:	681b      	ldr	r3, [r3, #0]
    3a2a:	4618      	mov	r0, r3
    3a2c:	4b1c      	ldr	r3, [pc, #112]	; (3aa0 <_can_async_write+0x1ac>)
    3a2e:	4798      	blx	r3
    3a30:	4603      	mov	r3, r0
    3a32:	4619      	mov	r1, r3
    3a34:	68fa      	ldr	r2, [r7, #12]
    3a36:	6853      	ldr	r3, [r2, #4]
    3a38:	f361 5355 	bfi	r3, r1, #21, #1
    3a3c:	6053      	str	r3, [r2, #4]
	f->T1.bit.BRS = hri_can_get_CCCR_BRSE_bit(dev->hw);
    3a3e:	687b      	ldr	r3, [r7, #4]
    3a40:	681b      	ldr	r3, [r3, #0]
    3a42:	4618      	mov	r0, r3
    3a44:	4b17      	ldr	r3, [pc, #92]	; (3aa4 <_can_async_write+0x1b0>)
    3a46:	4798      	blx	r3
    3a48:	4603      	mov	r3, r0
    3a4a:	4619      	mov	r1, r3
    3a4c:	68fa      	ldr	r2, [r7, #12]
    3a4e:	6853      	ldr	r3, [r2, #4]
    3a50:	f361 5314 	bfi	r3, r1, #20, #1
    3a54:	6053      	str	r3, [r2, #4]

	memcpy(f->data, msg->data, msg->len);
    3a56:	68fb      	ldr	r3, [r7, #12]
    3a58:	f103 0008 	add.w	r0, r3, #8
    3a5c:	683b      	ldr	r3, [r7, #0]
    3a5e:	6899      	ldr	r1, [r3, #8]
    3a60:	683b      	ldr	r3, [r7, #0]
    3a62:	7b1b      	ldrb	r3, [r3, #12]
    3a64:	461a      	mov	r2, r3
    3a66:	4b10      	ldr	r3, [pc, #64]	; (3aa8 <_can_async_write+0x1b4>)
    3a68:	4798      	blx	r3

	hri_can_write_TXBAR_reg(dev->hw, 1 << hri_can_read_TXFQS_TFQPI_bf(dev->hw));
    3a6a:	687b      	ldr	r3, [r7, #4]
    3a6c:	681c      	ldr	r4, [r3, #0]
    3a6e:	687b      	ldr	r3, [r7, #4]
    3a70:	681b      	ldr	r3, [r3, #0]
    3a72:	4618      	mov	r0, r3
    3a74:	4b07      	ldr	r3, [pc, #28]	; (3a94 <_can_async_write+0x1a0>)
    3a76:	4798      	blx	r3
    3a78:	4602      	mov	r2, r0
    3a7a:	2301      	movs	r3, #1
    3a7c:	4093      	lsls	r3, r2
    3a7e:	4619      	mov	r1, r3
    3a80:	4620      	mov	r0, r4
    3a82:	4b0a      	ldr	r3, [pc, #40]	; (3aac <_can_async_write+0x1b8>)
    3a84:	4798      	blx	r3
	return ERR_NONE;
    3a86:	2300      	movs	r3, #0
}
    3a88:	4618      	mov	r0, r3
    3a8a:	3714      	adds	r7, #20
    3a8c:	46bd      	mov	sp, r7
    3a8e:	bd90      	pop	{r4, r7, pc}
    3a90:	00003187 	.word	0x00003187
    3a94:	000031b1 	.word	0x000031b1
    3a98:	42000400 	.word	0x42000400
    3a9c:	20001b78 	.word	0x20001b78
    3aa0:	000032b7 	.word	0x000032b7
    3aa4:	000032e7 	.word	0x000032e7
    3aa8:	00012b29 	.word	0x00012b29
    3aac:	0000357d 	.word	0x0000357d

00003ab0 <_can_async_set_irq_state>:

/**
 * \brief Set CAN Interrupt State
 */
void _can_async_set_irq_state(struct _can_async_device *const dev, enum can_async_callback_type type, bool state)
{
    3ab0:	b580      	push	{r7, lr}
    3ab2:	b084      	sub	sp, #16
    3ab4:	af00      	add	r7, sp, #0
    3ab6:	6078      	str	r0, [r7, #4]
    3ab8:	460b      	mov	r3, r1
    3aba:	70fb      	strb	r3, [r7, #3]
    3abc:	4613      	mov	r3, r2
    3abe:	70bb      	strb	r3, [r7, #2]
	uint32_t ie;

	if (type == CAN_ASYNC_RX_CB) {
    3ac0:	78fb      	ldrb	r3, [r7, #3]
    3ac2:	2b00      	cmp	r3, #0
    3ac4:	d107      	bne.n	3ad6 <_can_async_set_irq_state+0x26>
		hri_can_write_IE_RF0NE_bit(dev->hw, state);
    3ac6:	687b      	ldr	r3, [r7, #4]
    3ac8:	681b      	ldr	r3, [r3, #0]
    3aca:	78ba      	ldrb	r2, [r7, #2]
    3acc:	4611      	mov	r1, r2
    3ace:	4618      	mov	r0, r3
    3ad0:	4b15      	ldr	r3, [pc, #84]	; (3b28 <_can_async_set_irq_state+0x78>)
    3ad2:	4798      	blx	r3
	} else if (type == CAN_ASYNC_IRQ_CB) {
		ie = hri_can_get_IE_reg(dev->hw, CAN_IE_RF0NE | CAN_IE_TCE);
		hri_can_write_IE_reg(dev->hw, ie | CONF_CAN0_IE_REG);
	}

	return;
    3ad4:	e023      	b.n	3b1e <_can_async_set_irq_state+0x6e>
	} else if (type == CAN_ASYNC_TX_CB) {
    3ad6:	78fb      	ldrb	r3, [r7, #3]
    3ad8:	2b01      	cmp	r3, #1
    3ada:	d10e      	bne.n	3afa <_can_async_set_irq_state+0x4a>
		hri_can_write_IE_TCE_bit(dev->hw, state);
    3adc:	687b      	ldr	r3, [r7, #4]
    3ade:	681b      	ldr	r3, [r3, #0]
    3ae0:	78ba      	ldrb	r2, [r7, #2]
    3ae2:	4611      	mov	r1, r2
    3ae4:	4618      	mov	r0, r3
    3ae6:	4b11      	ldr	r3, [pc, #68]	; (3b2c <_can_async_set_irq_state+0x7c>)
    3ae8:	4798      	blx	r3
		hri_can_write_TXBTIE_reg(dev->hw, CAN_TXBTIE_MASK);
    3aea:	687b      	ldr	r3, [r7, #4]
    3aec:	681b      	ldr	r3, [r3, #0]
    3aee:	f04f 31ff 	mov.w	r1, #4294967295
    3af2:	4618      	mov	r0, r3
    3af4:	4b0e      	ldr	r3, [pc, #56]	; (3b30 <_can_async_set_irq_state+0x80>)
    3af6:	4798      	blx	r3
	return;
    3af8:	e011      	b.n	3b1e <_can_async_set_irq_state+0x6e>
	} else if (type == CAN_ASYNC_IRQ_CB) {
    3afa:	78fb      	ldrb	r3, [r7, #3]
    3afc:	2b02      	cmp	r3, #2
    3afe:	d10e      	bne.n	3b1e <_can_async_set_irq_state+0x6e>
		ie = hri_can_get_IE_reg(dev->hw, CAN_IE_RF0NE | CAN_IE_TCE);
    3b00:	687b      	ldr	r3, [r7, #4]
    3b02:	681b      	ldr	r3, [r3, #0]
    3b04:	f240 2101 	movw	r1, #513	; 0x201
    3b08:	4618      	mov	r0, r3
    3b0a:	4b0a      	ldr	r3, [pc, #40]	; (3b34 <_can_async_set_irq_state+0x84>)
    3b0c:	4798      	blx	r3
    3b0e:	60f8      	str	r0, [r7, #12]
		hri_can_write_IE_reg(dev->hw, ie | CONF_CAN0_IE_REG);
    3b10:	687b      	ldr	r3, [r7, #4]
    3b12:	681b      	ldr	r3, [r3, #0]
    3b14:	68f9      	ldr	r1, [r7, #12]
    3b16:	4618      	mov	r0, r3
    3b18:	4b07      	ldr	r3, [pc, #28]	; (3b38 <_can_async_set_irq_state+0x88>)
    3b1a:	4798      	blx	r3
	return;
    3b1c:	bf00      	nop
    3b1e:	bf00      	nop
}
    3b20:	3710      	adds	r7, #16
    3b22:	46bd      	mov	sp, r7
    3b24:	bd80      	pop	{r7, pc}
    3b26:	bf00      	nop
    3b28:	00003389 	.word	0x00003389
    3b2c:	000033bd 	.word	0x000033bd
    3b30:	0000359b 	.word	0x0000359b
    3b34:	000033f5 	.word	0x000033f5
    3b38:	0000341b 	.word	0x0000341b

00003b3c <_can_async_set_filter>:
/**
 * \brief Set CAN to the specified mode
 */
int32_t _can_async_set_filter(struct _can_async_device *const dev, uint8_t index, enum can_format fmt,
                              struct can_filter *filter)
{
    3b3c:	b480      	push	{r7}
    3b3e:	b087      	sub	sp, #28
    3b40:	af00      	add	r7, sp, #0
    3b42:	60f8      	str	r0, [r7, #12]
    3b44:	607b      	str	r3, [r7, #4]
    3b46:	460b      	mov	r3, r1
    3b48:	72fb      	strb	r3, [r7, #11]
    3b4a:	4613      	mov	r3, r2
    3b4c:	72bb      	strb	r3, [r7, #10]
	struct _can_standard_message_filter_element *sf;
	struct _can_extended_message_filter_element *ef;

	sf = &((struct _can_context *)dev->context)->rx_std_filter[index];
    3b4e:	68fb      	ldr	r3, [r7, #12]
    3b50:	699b      	ldr	r3, [r3, #24]
    3b52:	68da      	ldr	r2, [r3, #12]
    3b54:	7afb      	ldrb	r3, [r7, #11]
    3b56:	009b      	lsls	r3, r3, #2
    3b58:	4413      	add	r3, r2
    3b5a:	617b      	str	r3, [r7, #20]
	ef = &((struct _can_context *)dev->context)->rx_ext_filter[index];
    3b5c:	68fb      	ldr	r3, [r7, #12]
    3b5e:	699b      	ldr	r3, [r3, #24]
    3b60:	691a      	ldr	r2, [r3, #16]
    3b62:	7afb      	ldrb	r3, [r7, #11]
    3b64:	00db      	lsls	r3, r3, #3
    3b66:	4413      	add	r3, r2
    3b68:	613b      	str	r3, [r7, #16]

	if (fmt == CAN_FMT_STDID) {
    3b6a:	7abb      	ldrb	r3, [r7, #10]
    3b6c:	2b00      	cmp	r3, #0
    3b6e:	d123      	bne.n	3bb8 <_can_async_set_filter+0x7c>
		if (filter == NULL) {
    3b70:	687b      	ldr	r3, [r7, #4]
    3b72:	2b00      	cmp	r3, #0
    3b74:	d104      	bne.n	3b80 <_can_async_set_filter+0x44>
			sf->S0.val = 0;
    3b76:	697b      	ldr	r3, [r7, #20]
    3b78:	2200      	movs	r2, #0
    3b7a:	601a      	str	r2, [r3, #0]
			return ERR_NONE;
    3b7c:	2300      	movs	r3, #0
    3b7e:	e03b      	b.n	3bf8 <_can_async_set_filter+0xbc>
		}
		sf->S0.val       = filter->mask;
    3b80:	687b      	ldr	r3, [r7, #4]
    3b82:	685a      	ldr	r2, [r3, #4]
    3b84:	697b      	ldr	r3, [r7, #20]
    3b86:	601a      	str	r2, [r3, #0]
		sf->S0.bit.SFID1 = filter->id;
    3b88:	687b      	ldr	r3, [r7, #4]
    3b8a:	681b      	ldr	r3, [r3, #0]
    3b8c:	b29b      	uxth	r3, r3
    3b8e:	f3c3 030a 	ubfx	r3, r3, #0, #11
    3b92:	b299      	uxth	r1, r3
    3b94:	697a      	ldr	r2, [r7, #20]
    3b96:	6813      	ldr	r3, [r2, #0]
    3b98:	f361 431a 	bfi	r3, r1, #16, #11
    3b9c:	6013      	str	r3, [r2, #0]
		sf->S0.bit.SFT   = _CAN_SFT_CLASSIC;
    3b9e:	697a      	ldr	r2, [r7, #20]
    3ba0:	6813      	ldr	r3, [r2, #0]
    3ba2:	2102      	movs	r1, #2
    3ba4:	f361 739f 	bfi	r3, r1, #30, #2
    3ba8:	6013      	str	r3, [r2, #0]
		sf->S0.bit.SFEC  = _CAN_SFEC_STF0M;
    3baa:	697a      	ldr	r2, [r7, #20]
    3bac:	6813      	ldr	r3, [r2, #0]
    3bae:	2101      	movs	r1, #1
    3bb0:	f361 63dd 	bfi	r3, r1, #27, #3
    3bb4:	6013      	str	r3, [r2, #0]
    3bb6:	e01e      	b.n	3bf6 <_can_async_set_filter+0xba>
	} else if (fmt == CAN_FMT_EXTID) {
    3bb8:	7abb      	ldrb	r3, [r7, #10]
    3bba:	2b01      	cmp	r3, #1
    3bbc:	d11b      	bne.n	3bf6 <_can_async_set_filter+0xba>
		if (filter == NULL) {
    3bbe:	687b      	ldr	r3, [r7, #4]
    3bc0:	2b00      	cmp	r3, #0
    3bc2:	d104      	bne.n	3bce <_can_async_set_filter+0x92>
			ef->F0.val = 0;
    3bc4:	693b      	ldr	r3, [r7, #16]
    3bc6:	2200      	movs	r2, #0
    3bc8:	601a      	str	r2, [r3, #0]
			return ERR_NONE;
    3bca:	2300      	movs	r3, #0
    3bcc:	e014      	b.n	3bf8 <_can_async_set_filter+0xbc>
		}
		ef->F0.val      = filter->id;
    3bce:	687b      	ldr	r3, [r7, #4]
    3bd0:	681a      	ldr	r2, [r3, #0]
    3bd2:	693b      	ldr	r3, [r7, #16]
    3bd4:	601a      	str	r2, [r3, #0]
		ef->F0.bit.EFEC = _CAN_EFEC_STF0M;
    3bd6:	693a      	ldr	r2, [r7, #16]
    3bd8:	6813      	ldr	r3, [r2, #0]
    3bda:	2101      	movs	r1, #1
    3bdc:	f361 735f 	bfi	r3, r1, #29, #3
    3be0:	6013      	str	r3, [r2, #0]
		ef->F1.val      = filter->mask;
    3be2:	687b      	ldr	r3, [r7, #4]
    3be4:	685a      	ldr	r2, [r3, #4]
    3be6:	693b      	ldr	r3, [r7, #16]
    3be8:	605a      	str	r2, [r3, #4]
		ef->F1.bit.EFT  = _CAN_EFT_CLASSIC;
    3bea:	693a      	ldr	r2, [r7, #16]
    3bec:	6853      	ldr	r3, [r2, #4]
    3bee:	2102      	movs	r1, #2
    3bf0:	f361 739f 	bfi	r3, r1, #30, #2
    3bf4:	6053      	str	r3, [r2, #4]
	}

	return ERR_NONE;
    3bf6:	2300      	movs	r3, #0
}
    3bf8:	4618      	mov	r0, r3
    3bfa:	371c      	adds	r7, #28
    3bfc:	46bd      	mov	sp, r7
    3bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
    3c02:	4770      	bx	lr

00003c04 <CAN1_Handler>:

/*
 * \brief CAN interrupt handler
 */
void CAN1_Handler(void)
{
    3c04:	b590      	push	{r4, r7, lr}
    3c06:	b083      	sub	sp, #12
    3c08:	af00      	add	r7, sp, #0
	struct _can_async_device *dev = _can1_dev;
    3c0a:	4b2c      	ldr	r3, [pc, #176]	; (3cbc <CAN1_Handler+0xb8>)
    3c0c:	681b      	ldr	r3, [r3, #0]
    3c0e:	607b      	str	r3, [r7, #4]
	uint32_t                  ir;
	ir = hri_can_read_IR_reg(dev->hw);
    3c10:	687b      	ldr	r3, [r7, #4]
    3c12:	681b      	ldr	r3, [r3, #0]
    3c14:	4618      	mov	r0, r3
    3c16:	4b2a      	ldr	r3, [pc, #168]	; (3cc0 <CAN1_Handler+0xbc>)
    3c18:	4798      	blx	r3
    3c1a:	6038      	str	r0, [r7, #0]

	if (ir & CAN_IR_RF0N) {
    3c1c:	683b      	ldr	r3, [r7, #0]
    3c1e:	f003 0301 	and.w	r3, r3, #1
    3c22:	2b00      	cmp	r3, #0
    3c24:	d003      	beq.n	3c2e <CAN1_Handler+0x2a>
		dev->cb.rx_done(dev);
    3c26:	687b      	ldr	r3, [r7, #4]
    3c28:	689b      	ldr	r3, [r3, #8]
    3c2a:	6878      	ldr	r0, [r7, #4]
    3c2c:	4798      	blx	r3
	}

	if (ir & CAN_IR_TC) {
    3c2e:	683b      	ldr	r3, [r7, #0]
    3c30:	f403 7300 	and.w	r3, r3, #512	; 0x200
    3c34:	2b00      	cmp	r3, #0
    3c36:	d003      	beq.n	3c40 <CAN1_Handler+0x3c>
		dev->cb.tx_done(dev);
    3c38:	687b      	ldr	r3, [r7, #4]
    3c3a:	685b      	ldr	r3, [r3, #4]
    3c3c:	6878      	ldr	r0, [r7, #4]
    3c3e:	4798      	blx	r3
	}

	if (ir & CAN_IR_BO) {
    3c40:	683b      	ldr	r3, [r7, #0]
    3c42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    3c46:	2b00      	cmp	r3, #0
    3c48:	d004      	beq.n	3c54 <CAN1_Handler+0x50>
		dev->cb.irq_handler(dev, CAN_IRQ_BO);
    3c4a:	687b      	ldr	r3, [r7, #4]
    3c4c:	68db      	ldr	r3, [r3, #12]
    3c4e:	2103      	movs	r1, #3
    3c50:	6878      	ldr	r0, [r7, #4]
    3c52:	4798      	blx	r3
	}

	if (ir & CAN_IR_EW) {
    3c54:	683b      	ldr	r3, [r7, #0]
    3c56:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
    3c5a:	2b00      	cmp	r3, #0
    3c5c:	d004      	beq.n	3c68 <CAN1_Handler+0x64>
		dev->cb.irq_handler(dev, CAN_IRQ_EW);
    3c5e:	687b      	ldr	r3, [r7, #4]
    3c60:	68db      	ldr	r3, [r3, #12]
    3c62:	2100      	movs	r1, #0
    3c64:	6878      	ldr	r0, [r7, #4]
    3c66:	4798      	blx	r3
	}

	if (ir & CAN_IR_EP) {
    3c68:	683b      	ldr	r3, [r7, #0]
    3c6a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    3c6e:	2b00      	cmp	r3, #0
    3c70:	d00f      	beq.n	3c92 <CAN1_Handler+0x8e>
		dev->cb.irq_handler(dev, hri_can_get_PSR_EP_bit(dev->hw) ? CAN_IRQ_EP : CAN_IRQ_EA);
    3c72:	687b      	ldr	r3, [r7, #4]
    3c74:	68dc      	ldr	r4, [r3, #12]
    3c76:	687b      	ldr	r3, [r7, #4]
    3c78:	681b      	ldr	r3, [r3, #0]
    3c7a:	4618      	mov	r0, r3
    3c7c:	4b11      	ldr	r3, [pc, #68]	; (3cc4 <CAN1_Handler+0xc0>)
    3c7e:	4798      	blx	r3
    3c80:	4603      	mov	r3, r0
    3c82:	2b00      	cmp	r3, #0
    3c84:	d001      	beq.n	3c8a <CAN1_Handler+0x86>
    3c86:	2302      	movs	r3, #2
    3c88:	e000      	b.n	3c8c <CAN1_Handler+0x88>
    3c8a:	2301      	movs	r3, #1
    3c8c:	4619      	mov	r1, r3
    3c8e:	6878      	ldr	r0, [r7, #4]
    3c90:	47a0      	blx	r4
	}

	if (ir & CAN_IR_RF0L) {
    3c92:	683b      	ldr	r3, [r7, #0]
    3c94:	f003 0308 	and.w	r3, r3, #8
    3c98:	2b00      	cmp	r3, #0
    3c9a:	d004      	beq.n	3ca6 <CAN1_Handler+0xa2>
		dev->cb.irq_handler(dev, CAN_IRQ_DO);
    3c9c:	687b      	ldr	r3, [r7, #4]
    3c9e:	68db      	ldr	r3, [r3, #12]
    3ca0:	2104      	movs	r1, #4
    3ca2:	6878      	ldr	r0, [r7, #4]
    3ca4:	4798      	blx	r3
	}

	hri_can_write_IR_reg(dev->hw, ir);
    3ca6:	687b      	ldr	r3, [r7, #4]
    3ca8:	681b      	ldr	r3, [r3, #0]
    3caa:	6839      	ldr	r1, [r7, #0]
    3cac:	4618      	mov	r0, r3
    3cae:	4b06      	ldr	r3, [pc, #24]	; (3cc8 <CAN1_Handler+0xc4>)
    3cb0:	4798      	blx	r3
}
    3cb2:	bf00      	nop
    3cb4:	370c      	adds	r7, #12
    3cb6:	46bd      	mov	sp, r7
    3cb8:	bd90      	pop	{r4, r7, pc}
    3cba:	bf00      	nop
    3cbc:	20000bf0 	.word	0x20000bf0
    3cc0:	00003371 	.word	0x00003371
    3cc4:	00003121 	.word	0x00003121
    3cc8:	00003355 	.word	0x00003355

00003ccc <_get_cycles_for_us_internal>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of us
 */
static inline uint32_t _get_cycles_for_us_internal(const uint16_t us, const uint32_t freq, const uint8_t power)
{
    3ccc:	b480      	push	{r7}
    3cce:	b083      	sub	sp, #12
    3cd0:	af00      	add	r7, sp, #0
    3cd2:	4603      	mov	r3, r0
    3cd4:	6039      	str	r1, [r7, #0]
    3cd6:	80fb      	strh	r3, [r7, #6]
    3cd8:	4613      	mov	r3, r2
    3cda:	717b      	strb	r3, [r7, #5]
	switch (power) {
    3cdc:	797b      	ldrb	r3, [r7, #5]
    3cde:	3b04      	subs	r3, #4
    3ce0:	2b05      	cmp	r3, #5
    3ce2:	d86b      	bhi.n	3dbc <_get_cycles_for_us_internal+0xf0>
    3ce4:	a201      	add	r2, pc, #4	; (adr r2, 3cec <_get_cycles_for_us_internal+0x20>)
    3ce6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    3cea:	bf00      	nop
    3cec:	00003d9b 	.word	0x00003d9b
    3cf0:	00003d7b 	.word	0x00003d7b
    3cf4:	00003d5d 	.word	0x00003d5d
    3cf8:	00003d3f 	.word	0x00003d3f
    3cfc:	00003d21 	.word	0x00003d21
    3d00:	00003d05 	.word	0x00003d05
	case 9:
		return (us * (freq / 1000000) + 2) / 3;
    3d04:	88fb      	ldrh	r3, [r7, #6]
    3d06:	683a      	ldr	r2, [r7, #0]
    3d08:	4935      	ldr	r1, [pc, #212]	; (3de0 <_get_cycles_for_us_internal+0x114>)
    3d0a:	fba1 1202 	umull	r1, r2, r1, r2
    3d0e:	0c92      	lsrs	r2, r2, #18
    3d10:	fb02 f303 	mul.w	r3, r2, r3
    3d14:	3302      	adds	r3, #2
    3d16:	4a33      	ldr	r2, [pc, #204]	; (3de4 <_get_cycles_for_us_internal+0x118>)
    3d18:	fba2 2303 	umull	r2, r3, r2, r3
    3d1c:	085b      	lsrs	r3, r3, #1
    3d1e:	e059      	b.n	3dd4 <_get_cycles_for_us_internal+0x108>
	case 8:
		return (us * (freq / 100000) + 29) / 30;
    3d20:	88fb      	ldrh	r3, [r7, #6]
    3d22:	683a      	ldr	r2, [r7, #0]
    3d24:	0952      	lsrs	r2, r2, #5
    3d26:	4930      	ldr	r1, [pc, #192]	; (3de8 <_get_cycles_for_us_internal+0x11c>)
    3d28:	fba1 1202 	umull	r1, r2, r1, r2
    3d2c:	09d2      	lsrs	r2, r2, #7
    3d2e:	fb02 f303 	mul.w	r3, r2, r3
    3d32:	331d      	adds	r3, #29
    3d34:	4a2d      	ldr	r2, [pc, #180]	; (3dec <_get_cycles_for_us_internal+0x120>)
    3d36:	fba2 2303 	umull	r2, r3, r2, r3
    3d3a:	091b      	lsrs	r3, r3, #4
    3d3c:	e04a      	b.n	3dd4 <_get_cycles_for_us_internal+0x108>
	case 7:
		return (us * (freq / 10000) + 299) / 300;
    3d3e:	88fb      	ldrh	r3, [r7, #6]
    3d40:	683a      	ldr	r2, [r7, #0]
    3d42:	492b      	ldr	r1, [pc, #172]	; (3df0 <_get_cycles_for_us_internal+0x124>)
    3d44:	fba1 1202 	umull	r1, r2, r1, r2
    3d48:	0b52      	lsrs	r2, r2, #13
    3d4a:	fb02 f303 	mul.w	r3, r2, r3
    3d4e:	f203 132b 	addw	r3, r3, #299	; 0x12b
    3d52:	4a28      	ldr	r2, [pc, #160]	; (3df4 <_get_cycles_for_us_internal+0x128>)
    3d54:	fba2 2303 	umull	r2, r3, r2, r3
    3d58:	095b      	lsrs	r3, r3, #5
    3d5a:	e03b      	b.n	3dd4 <_get_cycles_for_us_internal+0x108>
	case 6:
		return (us * (freq / 1000) + 2999) / 3000;
    3d5c:	88fb      	ldrh	r3, [r7, #6]
    3d5e:	683a      	ldr	r2, [r7, #0]
    3d60:	4925      	ldr	r1, [pc, #148]	; (3df8 <_get_cycles_for_us_internal+0x12c>)
    3d62:	fba1 1202 	umull	r1, r2, r1, r2
    3d66:	0992      	lsrs	r2, r2, #6
    3d68:	fb02 f303 	mul.w	r3, r2, r3
    3d6c:	f603 33b7 	addw	r3, r3, #2999	; 0xbb7
    3d70:	4a22      	ldr	r2, [pc, #136]	; (3dfc <_get_cycles_for_us_internal+0x130>)
    3d72:	fba2 2303 	umull	r2, r3, r2, r3
    3d76:	099b      	lsrs	r3, r3, #6
    3d78:	e02c      	b.n	3dd4 <_get_cycles_for_us_internal+0x108>
	case 5:
		return (us * (freq / 100) + 29999) / 30000;
    3d7a:	88fb      	ldrh	r3, [r7, #6]
    3d7c:	683a      	ldr	r2, [r7, #0]
    3d7e:	4920      	ldr	r1, [pc, #128]	; (3e00 <_get_cycles_for_us_internal+0x134>)
    3d80:	fba1 1202 	umull	r1, r2, r1, r2
    3d84:	0952      	lsrs	r2, r2, #5
    3d86:	fb02 f303 	mul.w	r3, r2, r3
    3d8a:	f503 43ea 	add.w	r3, r3, #29952	; 0x7500
    3d8e:	332f      	adds	r3, #47	; 0x2f
    3d90:	4a1c      	ldr	r2, [pc, #112]	; (3e04 <_get_cycles_for_us_internal+0x138>)
    3d92:	fba2 2303 	umull	r2, r3, r2, r3
    3d96:	0b5b      	lsrs	r3, r3, #13
    3d98:	e01c      	b.n	3dd4 <_get_cycles_for_us_internal+0x108>
	case 4:
		return (us * (freq / 10) + 299999) / 300000;
    3d9a:	88fb      	ldrh	r3, [r7, #6]
    3d9c:	683a      	ldr	r2, [r7, #0]
    3d9e:	491a      	ldr	r1, [pc, #104]	; (3e08 <_get_cycles_for_us_internal+0x13c>)
    3da0:	fba1 1202 	umull	r1, r2, r1, r2
    3da4:	08d2      	lsrs	r2, r2, #3
    3da6:	fb02 f303 	mul.w	r3, r2, r3
    3daa:	f503 2392 	add.w	r3, r3, #299008	; 0x49000
    3dae:	f203 33df 	addw	r3, r3, #991	; 0x3df
    3db2:	4a16      	ldr	r2, [pc, #88]	; (3e0c <_get_cycles_for_us_internal+0x140>)
    3db4:	fba2 2303 	umull	r2, r3, r2, r3
    3db8:	0c5b      	lsrs	r3, r3, #17
    3dba:	e00b      	b.n	3dd4 <_get_cycles_for_us_internal+0x108>
	default:
		return (us * freq + 2999999) / 3000000;
    3dbc:	88fb      	ldrh	r3, [r7, #6]
    3dbe:	683a      	ldr	r2, [r7, #0]
    3dc0:	fb02 f303 	mul.w	r3, r2, r3
    3dc4:	f503 1337 	add.w	r3, r3, #2998272	; 0x2dc000
    3dc8:	f203 63bf 	addw	r3, r3, #1727	; 0x6bf
    3dcc:	4a10      	ldr	r2, [pc, #64]	; (3e10 <_get_cycles_for_us_internal+0x144>)
    3dce:	fba2 2303 	umull	r2, r3, r2, r3
    3dd2:	0c9b      	lsrs	r3, r3, #18
	}
}
    3dd4:	4618      	mov	r0, r3
    3dd6:	370c      	adds	r7, #12
    3dd8:	46bd      	mov	sp, r7
    3dda:	f85d 7b04 	ldr.w	r7, [sp], #4
    3dde:	4770      	bx	lr
    3de0:	431bde83 	.word	0x431bde83
    3de4:	aaaaaaab 	.word	0xaaaaaaab
    3de8:	0a7c5ac5 	.word	0x0a7c5ac5
    3dec:	88888889 	.word	0x88888889
    3df0:	d1b71759 	.word	0xd1b71759
    3df4:	1b4e81b5 	.word	0x1b4e81b5
    3df8:	10624dd3 	.word	0x10624dd3
    3dfc:	057619f1 	.word	0x057619f1
    3e00:	51eb851f 	.word	0x51eb851f
    3e04:	45e7b273 	.word	0x45e7b273
    3e08:	cccccccd 	.word	0xcccccccd
    3e0c:	6fd91d85 	.word	0x6fd91d85
    3e10:	165e9f81 	.word	0x165e9f81

00003e14 <_get_cycles_for_us>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of us
 */
uint32_t _get_cycles_for_us(const uint16_t us)
{
    3e14:	b580      	push	{r7, lr}
    3e16:	b082      	sub	sp, #8
    3e18:	af00      	add	r7, sp, #0
    3e1a:	4603      	mov	r3, r0
    3e1c:	80fb      	strh	r3, [r7, #6]
	return _get_cycles_for_us_internal(us, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
    3e1e:	88fb      	ldrh	r3, [r7, #6]
    3e20:	2209      	movs	r2, #9
    3e22:	4904      	ldr	r1, [pc, #16]	; (3e34 <_get_cycles_for_us+0x20>)
    3e24:	4618      	mov	r0, r3
    3e26:	4b04      	ldr	r3, [pc, #16]	; (3e38 <_get_cycles_for_us+0x24>)
    3e28:	4798      	blx	r3
    3e2a:	4603      	mov	r3, r0
}
    3e2c:	4618      	mov	r0, r3
    3e2e:	3708      	adds	r7, #8
    3e30:	46bd      	mov	sp, r7
    3e32:	bd80      	pop	{r7, pc}
    3e34:	07270e00 	.word	0x07270e00
    3e38:	00003ccd 	.word	0x00003ccd

00003e3c <_get_cycles_for_ms_internal>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
static inline uint32_t _get_cycles_for_ms_internal(const uint16_t ms, const uint32_t freq, const uint8_t power)
{
    3e3c:	b480      	push	{r7}
    3e3e:	b083      	sub	sp, #12
    3e40:	af00      	add	r7, sp, #0
    3e42:	4603      	mov	r3, r0
    3e44:	6039      	str	r1, [r7, #0]
    3e46:	80fb      	strh	r3, [r7, #6]
    3e48:	4613      	mov	r3, r2
    3e4a:	717b      	strb	r3, [r7, #5]
	switch (power) {
    3e4c:	797b      	ldrb	r3, [r7, #5]
    3e4e:	3b04      	subs	r3, #4
    3e50:	2b05      	cmp	r3, #5
    3e52:	d870      	bhi.n	3f36 <_get_cycles_for_ms_internal+0xfa>
    3e54:	a201      	add	r2, pc, #4	; (adr r2, 3e5c <_get_cycles_for_ms_internal+0x20>)
    3e56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    3e5a:	bf00      	nop
    3e5c:	00003f19 	.word	0x00003f19
    3e60:	00003efd 	.word	0x00003efd
    3e64:	00003ee1 	.word	0x00003ee1
    3e68:	00003ebd 	.word	0x00003ebd
    3e6c:	00003e99 	.word	0x00003e99
    3e70:	00003e75 	.word	0x00003e75
	case 9:
		return (ms * (freq / 1000000) + 2) / 3 * 1000;
    3e74:	88fb      	ldrh	r3, [r7, #6]
    3e76:	683a      	ldr	r2, [r7, #0]
    3e78:	4937      	ldr	r1, [pc, #220]	; (3f58 <_get_cycles_for_ms_internal+0x11c>)
    3e7a:	fba1 1202 	umull	r1, r2, r1, r2
    3e7e:	0c92      	lsrs	r2, r2, #18
    3e80:	fb02 f303 	mul.w	r3, r2, r3
    3e84:	3302      	adds	r3, #2
    3e86:	4a35      	ldr	r2, [pc, #212]	; (3f5c <_get_cycles_for_ms_internal+0x120>)
    3e88:	fba2 2303 	umull	r2, r3, r2, r3
    3e8c:	085b      	lsrs	r3, r3, #1
    3e8e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    3e92:	fb02 f303 	mul.w	r3, r2, r3
    3e96:	e058      	b.n	3f4a <_get_cycles_for_ms_internal+0x10e>
	case 8:
		return (ms * (freq / 100000) + 2) / 3 * 100;
    3e98:	88fb      	ldrh	r3, [r7, #6]
    3e9a:	683a      	ldr	r2, [r7, #0]
    3e9c:	0952      	lsrs	r2, r2, #5
    3e9e:	4930      	ldr	r1, [pc, #192]	; (3f60 <_get_cycles_for_ms_internal+0x124>)
    3ea0:	fba1 1202 	umull	r1, r2, r1, r2
    3ea4:	09d2      	lsrs	r2, r2, #7
    3ea6:	fb02 f303 	mul.w	r3, r2, r3
    3eaa:	3302      	adds	r3, #2
    3eac:	4a2b      	ldr	r2, [pc, #172]	; (3f5c <_get_cycles_for_ms_internal+0x120>)
    3eae:	fba2 2303 	umull	r2, r3, r2, r3
    3eb2:	085b      	lsrs	r3, r3, #1
    3eb4:	2264      	movs	r2, #100	; 0x64
    3eb6:	fb02 f303 	mul.w	r3, r2, r3
    3eba:	e046      	b.n	3f4a <_get_cycles_for_ms_internal+0x10e>
	case 7:
		return (ms * (freq / 10000) + 2) / 3 * 10;
    3ebc:	88fb      	ldrh	r3, [r7, #6]
    3ebe:	683a      	ldr	r2, [r7, #0]
    3ec0:	4928      	ldr	r1, [pc, #160]	; (3f64 <_get_cycles_for_ms_internal+0x128>)
    3ec2:	fba1 1202 	umull	r1, r2, r1, r2
    3ec6:	0b52      	lsrs	r2, r2, #13
    3ec8:	fb02 f303 	mul.w	r3, r2, r3
    3ecc:	3302      	adds	r3, #2
    3ece:	4a23      	ldr	r2, [pc, #140]	; (3f5c <_get_cycles_for_ms_internal+0x120>)
    3ed0:	fba2 2303 	umull	r2, r3, r2, r3
    3ed4:	085a      	lsrs	r2, r3, #1
    3ed6:	4613      	mov	r3, r2
    3ed8:	009b      	lsls	r3, r3, #2
    3eda:	4413      	add	r3, r2
    3edc:	005b      	lsls	r3, r3, #1
    3ede:	e034      	b.n	3f4a <_get_cycles_for_ms_internal+0x10e>
	case 6:
		return (ms * (freq / 1000) + 2) / 3;
    3ee0:	88fb      	ldrh	r3, [r7, #6]
    3ee2:	683a      	ldr	r2, [r7, #0]
    3ee4:	4920      	ldr	r1, [pc, #128]	; (3f68 <_get_cycles_for_ms_internal+0x12c>)
    3ee6:	fba1 1202 	umull	r1, r2, r1, r2
    3eea:	0992      	lsrs	r2, r2, #6
    3eec:	fb02 f303 	mul.w	r3, r2, r3
    3ef0:	3302      	adds	r3, #2
    3ef2:	4a1a      	ldr	r2, [pc, #104]	; (3f5c <_get_cycles_for_ms_internal+0x120>)
    3ef4:	fba2 2303 	umull	r2, r3, r2, r3
    3ef8:	085b      	lsrs	r3, r3, #1
    3efa:	e026      	b.n	3f4a <_get_cycles_for_ms_internal+0x10e>
	case 5:
		return (ms * (freq / 100) + 29) / 30;
    3efc:	88fb      	ldrh	r3, [r7, #6]
    3efe:	683a      	ldr	r2, [r7, #0]
    3f00:	491a      	ldr	r1, [pc, #104]	; (3f6c <_get_cycles_for_ms_internal+0x130>)
    3f02:	fba1 1202 	umull	r1, r2, r1, r2
    3f06:	0952      	lsrs	r2, r2, #5
    3f08:	fb02 f303 	mul.w	r3, r2, r3
    3f0c:	331d      	adds	r3, #29
    3f0e:	4a18      	ldr	r2, [pc, #96]	; (3f70 <_get_cycles_for_ms_internal+0x134>)
    3f10:	fba2 2303 	umull	r2, r3, r2, r3
    3f14:	091b      	lsrs	r3, r3, #4
    3f16:	e018      	b.n	3f4a <_get_cycles_for_ms_internal+0x10e>
	case 4:
		return (ms * (freq / 10) + 299) / 300;
    3f18:	88fb      	ldrh	r3, [r7, #6]
    3f1a:	683a      	ldr	r2, [r7, #0]
    3f1c:	4915      	ldr	r1, [pc, #84]	; (3f74 <_get_cycles_for_ms_internal+0x138>)
    3f1e:	fba1 1202 	umull	r1, r2, r1, r2
    3f22:	08d2      	lsrs	r2, r2, #3
    3f24:	fb02 f303 	mul.w	r3, r2, r3
    3f28:	f203 132b 	addw	r3, r3, #299	; 0x12b
    3f2c:	4a12      	ldr	r2, [pc, #72]	; (3f78 <_get_cycles_for_ms_internal+0x13c>)
    3f2e:	fba2 2303 	umull	r2, r3, r2, r3
    3f32:	095b      	lsrs	r3, r3, #5
    3f34:	e009      	b.n	3f4a <_get_cycles_for_ms_internal+0x10e>
	default:
		return (ms * (freq / 1) + 2999) / 3000;
    3f36:	88fb      	ldrh	r3, [r7, #6]
    3f38:	683a      	ldr	r2, [r7, #0]
    3f3a:	fb02 f303 	mul.w	r3, r2, r3
    3f3e:	f603 33b7 	addw	r3, r3, #2999	; 0xbb7
    3f42:	4a0e      	ldr	r2, [pc, #56]	; (3f7c <_get_cycles_for_ms_internal+0x140>)
    3f44:	fba2 2303 	umull	r2, r3, r2, r3
    3f48:	099b      	lsrs	r3, r3, #6
	}
}
    3f4a:	4618      	mov	r0, r3
    3f4c:	370c      	adds	r7, #12
    3f4e:	46bd      	mov	sp, r7
    3f50:	f85d 7b04 	ldr.w	r7, [sp], #4
    3f54:	4770      	bx	lr
    3f56:	bf00      	nop
    3f58:	431bde83 	.word	0x431bde83
    3f5c:	aaaaaaab 	.word	0xaaaaaaab
    3f60:	0a7c5ac5 	.word	0x0a7c5ac5
    3f64:	d1b71759 	.word	0xd1b71759
    3f68:	10624dd3 	.word	0x10624dd3
    3f6c:	51eb851f 	.word	0x51eb851f
    3f70:	88888889 	.word	0x88888889
    3f74:	cccccccd 	.word	0xcccccccd
    3f78:	1b4e81b5 	.word	0x1b4e81b5
    3f7c:	057619f1 	.word	0x057619f1

00003f80 <_get_cycles_for_ms>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
    3f80:	b580      	push	{r7, lr}
    3f82:	b082      	sub	sp, #8
    3f84:	af00      	add	r7, sp, #0
    3f86:	4603      	mov	r3, r0
    3f88:	80fb      	strh	r3, [r7, #6]
	return _get_cycles_for_ms_internal(ms, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
    3f8a:	88fb      	ldrh	r3, [r7, #6]
    3f8c:	2209      	movs	r2, #9
    3f8e:	4904      	ldr	r1, [pc, #16]	; (3fa0 <_get_cycles_for_ms+0x20>)
    3f90:	4618      	mov	r0, r3
    3f92:	4b04      	ldr	r3, [pc, #16]	; (3fa4 <_get_cycles_for_ms+0x24>)
    3f94:	4798      	blx	r3
    3f96:	4603      	mov	r3, r0
}
    3f98:	4618      	mov	r0, r3
    3f9a:	3708      	adds	r7, #8
    3f9c:	46bd      	mov	sp, r7
    3f9e:	bd80      	pop	{r7, pc}
    3fa0:	07270e00 	.word	0x07270e00
    3fa4:	00003e3d 	.word	0x00003e3d

00003fa8 <_delay_cycles>:
}
/**
 * \brief Delay loop to delay n number of cycles
 */
void _delay_cycles(void *const hw, uint32_t cycles)
{
    3fa8:	b480      	push	{r7}
    3faa:	b083      	sub	sp, #12
    3fac:	af00      	add	r7, sp, #0
    3fae:	6078      	str	r0, [r7, #4]
    3fb0:	6039      	str	r1, [r7, #0]
    3fb2:	bf00      	nop
    3fb4:	f3af 8000 	nop.w

00003fb8 <__delay>:
	__asm(".align 3 \n"
	      "__delay:\n"
	      "subs r1, r1, #1\n"
	      "bhi __delay\n");
#elif defined __GNUC__
	__asm(".syntax unified\n"
    3fb8:	3901      	subs	r1, #1
    3fba:	d8fd      	bhi.n	3fb8 <__delay>
	__asm("__delay:\n"
	      "subs r1, r1, #1\n"
	      "bhi.n __delay\n");
#endif
#endif
}
    3fbc:	bf00      	nop
    3fbe:	370c      	adds	r7, #12
    3fc0:	46bd      	mov	sp, r7
    3fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
    3fc6:	4770      	bx	lr

00003fc8 <hri_nvmctrl_set_CTRLA_RWS_bf>:
	tmp = (tmp & NVMCTRL_CTRLA_PRM_Msk) >> NVMCTRL_CTRLA_PRM_Pos;
	return tmp;
}

static inline void hri_nvmctrl_set_CTRLA_RWS_bf(const void *const hw, hri_nvmctrl_ctrla_reg_t mask)
{
    3fc8:	b480      	push	{r7}
    3fca:	b083      	sub	sp, #12
    3fcc:	af00      	add	r7, sp, #0
    3fce:	6078      	str	r0, [r7, #4]
    3fd0:	460b      	mov	r3, r1
    3fd2:	807b      	strh	r3, [r7, #2]
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLA.reg |= NVMCTRL_CTRLA_RWS(mask);
    3fd4:	687b      	ldr	r3, [r7, #4]
    3fd6:	881b      	ldrh	r3, [r3, #0]
    3fd8:	b29a      	uxth	r2, r3
    3fda:	887b      	ldrh	r3, [r7, #2]
    3fdc:	021b      	lsls	r3, r3, #8
    3fde:	b29b      	uxth	r3, r3
    3fe0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
    3fe4:	b29b      	uxth	r3, r3
    3fe6:	4313      	orrs	r3, r2
    3fe8:	b29a      	uxth	r2, r3
    3fea:	687b      	ldr	r3, [r7, #4]
    3fec:	801a      	strh	r2, [r3, #0]
	NVMCTRL_CRITICAL_SECTION_LEAVE();
}
    3fee:	bf00      	nop
    3ff0:	370c      	adds	r7, #12
    3ff2:	46bd      	mov	sp, r7
    3ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
    3ff8:	4770      	bx	lr

00003ffa <hri_port_set_EVCTRL_reg>:
{
    3ffa:	b480      	push	{r7}
    3ffc:	b085      	sub	sp, #20
    3ffe:	af00      	add	r7, sp, #0
    4000:	60f8      	str	r0, [r7, #12]
    4002:	460b      	mov	r3, r1
    4004:	607a      	str	r2, [r7, #4]
    4006:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].EVCTRL.reg |= mask;
    4008:	7afb      	ldrb	r3, [r7, #11]
    400a:	7afa      	ldrb	r2, [r7, #11]
    400c:	68f9      	ldr	r1, [r7, #12]
    400e:	01d2      	lsls	r2, r2, #7
    4010:	440a      	add	r2, r1
    4012:	322c      	adds	r2, #44	; 0x2c
    4014:	6811      	ldr	r1, [r2, #0]
    4016:	687a      	ldr	r2, [r7, #4]
    4018:	430a      	orrs	r2, r1
    401a:	68f9      	ldr	r1, [r7, #12]
    401c:	01db      	lsls	r3, r3, #7
    401e:	440b      	add	r3, r1
    4020:	332c      	adds	r3, #44	; 0x2c
    4022:	601a      	str	r2, [r3, #0]
}
    4024:	bf00      	nop
    4026:	3714      	adds	r7, #20
    4028:	46bd      	mov	sp, r7
    402a:	f85d 7b04 	ldr.w	r7, [sp], #4
    402e:	4770      	bx	lr

00004030 <_port_event_init>:

static inline void _port_event_init()
{
    4030:	b580      	push	{r7, lr}
    4032:	af00      	add	r7, sp, #0
	hri_port_set_EVCTRL_reg(PORT, 0, CONF_PORTA_EVCTRL);
    4034:	2200      	movs	r2, #0
    4036:	2100      	movs	r1, #0
    4038:	4809      	ldr	r0, [pc, #36]	; (4060 <_port_event_init+0x30>)
    403a:	4b0a      	ldr	r3, [pc, #40]	; (4064 <_port_event_init+0x34>)
    403c:	4798      	blx	r3
	hri_port_set_EVCTRL_reg(PORT, 1, CONF_PORTB_EVCTRL);
    403e:	2200      	movs	r2, #0
    4040:	2101      	movs	r1, #1
    4042:	4807      	ldr	r0, [pc, #28]	; (4060 <_port_event_init+0x30>)
    4044:	4b07      	ldr	r3, [pc, #28]	; (4064 <_port_event_init+0x34>)
    4046:	4798      	blx	r3
	hri_port_set_EVCTRL_reg(PORT, 2, CONF_PORTC_EVCTRL);
    4048:	22ef      	movs	r2, #239	; 0xef
    404a:	2102      	movs	r1, #2
    404c:	4804      	ldr	r0, [pc, #16]	; (4060 <_port_event_init+0x30>)
    404e:	4b05      	ldr	r3, [pc, #20]	; (4064 <_port_event_init+0x34>)
    4050:	4798      	blx	r3
	hri_port_set_EVCTRL_reg(PORT, 3, CONF_PORTD_EVCTRL);
    4052:	2200      	movs	r2, #0
    4054:	2103      	movs	r1, #3
    4056:	4802      	ldr	r0, [pc, #8]	; (4060 <_port_event_init+0x30>)
    4058:	4b02      	ldr	r3, [pc, #8]	; (4064 <_port_event_init+0x34>)
    405a:	4798      	blx	r3
}
    405c:	bf00      	nop
    405e:	bd80      	pop	{r7, pc}
    4060:	41008000 	.word	0x41008000
    4064:	00003ffb 	.word	0x00003ffb

00004068 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
    4068:	b580      	push	{r7, lr}
    406a:	af00      	add	r7, sp, #0
	hri_nvmctrl_set_CTRLA_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);
    406c:	2104      	movs	r1, #4
    406e:	480b      	ldr	r0, [pc, #44]	; (409c <_init_chip+0x34>)
    4070:	4b0b      	ldr	r3, [pc, #44]	; (40a0 <_init_chip+0x38>)
    4072:	4798      	blx	r3

	_osc32kctrl_init_sources();
    4074:	4b0b      	ldr	r3, [pc, #44]	; (40a4 <_init_chip+0x3c>)
    4076:	4798      	blx	r3
	_oscctrl_init_sources();
    4078:	4b0b      	ldr	r3, [pc, #44]	; (40a8 <_init_chip+0x40>)
    407a:	4798      	blx	r3
	_mclk_init();
    407c:	4b0b      	ldr	r3, [pc, #44]	; (40ac <_init_chip+0x44>)
    407e:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
    4080:	f44f 6084 	mov.w	r0, #1056	; 0x420
    4084:	4b0a      	ldr	r3, [pc, #40]	; (40b0 <_init_chip+0x48>)
    4086:	4798      	blx	r3
#endif
	_oscctrl_init_referenced_generators();
    4088:	4b0a      	ldr	r3, [pc, #40]	; (40b4 <_init_chip+0x4c>)
    408a:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
    408c:	f640 30df 	movw	r0, #3039	; 0xbdf
    4090:	4b07      	ldr	r3, [pc, #28]	; (40b0 <_init_chip+0x48>)
    4092:	4798      	blx	r3
	hri_mclk_set_AHBMASK_DMAC_bit(MCLK);
	_dma_init();
#endif

#if (CONF_PORT_EVCTRL_PORT_0 | CONF_PORT_EVCTRL_PORT_1 | CONF_PORT_EVCTRL_PORT_2 | CONF_PORT_EVCTRL_PORT_3)
	_port_event_init();
    4094:	4b08      	ldr	r3, [pc, #32]	; (40b8 <_init_chip+0x50>)
    4096:	4798      	blx	r3
#endif

#if CONF_CMCC_ENABLE
	cache_init();
#endif
}
    4098:	bf00      	nop
    409a:	bd80      	pop	{r7, pc}
    409c:	41004000 	.word	0x41004000
    40a0:	00003fc9 	.word	0x00003fc9
    40a4:	000049a9 	.word	0x000049a9
    40a8:	00004e71 	.word	0x00004e71
    40ac:	000048c9 	.word	0x000048c9
    40b0:	000047d1 	.word	0x000047d1
    40b4:	00004eb1 	.word	0x00004eb1
    40b8:	00004031 	.word	0x00004031

000040bc <_crc_sync_init>:

/**
 * \brief Initialize CRC.
 */
int32_t _crc_sync_init(struct _crc_sync_device *const device, void *const hw)
{
    40bc:	b480      	push	{r7}
    40be:	b083      	sub	sp, #12
    40c0:	af00      	add	r7, sp, #0
    40c2:	6078      	str	r0, [r7, #4]
    40c4:	6039      	str	r1, [r7, #0]
	device->hw = hw;
    40c6:	687b      	ldr	r3, [r7, #4]
    40c8:	683a      	ldr	r2, [r7, #0]
    40ca:	601a      	str	r2, [r3, #0]

	return ERR_NONE;
    40cc:	2300      	movs	r3, #0
}
    40ce:	4618      	mov	r0, r3
    40d0:	370c      	adds	r7, #12
    40d2:	46bd      	mov	sp, r7
    40d4:	f85d 7b04 	ldr.w	r7, [sp], #4
    40d8:	4770      	bx	lr
	...

000040dc <__NVIC_EnableIRQ>:
{
    40dc:	b480      	push	{r7}
    40de:	b083      	sub	sp, #12
    40e0:	af00      	add	r7, sp, #0
    40e2:	4603      	mov	r3, r0
    40e4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    40e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    40ea:	2b00      	cmp	r3, #0
    40ec:	db0b      	blt.n	4106 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    40ee:	4909      	ldr	r1, [pc, #36]	; (4114 <__NVIC_EnableIRQ+0x38>)
    40f0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    40f4:	095b      	lsrs	r3, r3, #5
    40f6:	88fa      	ldrh	r2, [r7, #6]
    40f8:	f002 021f 	and.w	r2, r2, #31
    40fc:	2001      	movs	r0, #1
    40fe:	fa00 f202 	lsl.w	r2, r0, r2
    4102:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    4106:	bf00      	nop
    4108:	370c      	adds	r7, #12
    410a:	46bd      	mov	sp, r7
    410c:	f85d 7b04 	ldr.w	r7, [sp], #4
    4110:	4770      	bx	lr
    4112:	bf00      	nop
    4114:	e000e100 	.word	0xe000e100

00004118 <__NVIC_DisableIRQ>:
{
    4118:	b480      	push	{r7}
    411a:	b083      	sub	sp, #12
    411c:	af00      	add	r7, sp, #0
    411e:	4603      	mov	r3, r0
    4120:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    4122:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    4126:	2b00      	cmp	r3, #0
    4128:	db10      	blt.n	414c <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    412a:	490b      	ldr	r1, [pc, #44]	; (4158 <__NVIC_DisableIRQ+0x40>)
    412c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    4130:	095b      	lsrs	r3, r3, #5
    4132:	88fa      	ldrh	r2, [r7, #6]
    4134:	f002 021f 	and.w	r2, r2, #31
    4138:	2001      	movs	r0, #1
    413a:	fa00 f202 	lsl.w	r2, r0, r2
    413e:	3320      	adds	r3, #32
    4140:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    4144:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    4148:	f3bf 8f6f 	isb	sy
}
    414c:	bf00      	nop
    414e:	370c      	adds	r7, #12
    4150:	46bd      	mov	sp, r7
    4152:	f85d 7b04 	ldr.w	r7, [sp], #4
    4156:	4770      	bx	lr
    4158:	e000e100 	.word	0xe000e100

0000415c <__NVIC_ClearPendingIRQ>:
{
    415c:	b480      	push	{r7}
    415e:	b083      	sub	sp, #12
    4160:	af00      	add	r7, sp, #0
    4162:	4603      	mov	r3, r0
    4164:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    4166:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    416a:	2b00      	cmp	r3, #0
    416c:	db0c      	blt.n	4188 <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    416e:	4909      	ldr	r1, [pc, #36]	; (4194 <__NVIC_ClearPendingIRQ+0x38>)
    4170:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    4174:	095b      	lsrs	r3, r3, #5
    4176:	88fa      	ldrh	r2, [r7, #6]
    4178:	f002 021f 	and.w	r2, r2, #31
    417c:	2001      	movs	r0, #1
    417e:	fa00 f202 	lsl.w	r2, r0, r2
    4182:	3360      	adds	r3, #96	; 0x60
    4184:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    4188:	bf00      	nop
    418a:	370c      	adds	r7, #12
    418c:	46bd      	mov	sp, r7
    418e:	f85d 7b04 	ldr.w	r7, [sp], #4
    4192:	4770      	bx	lr
    4194:	e000e100 	.word	0xe000e100

00004198 <hri_eic_wait_for_sync>:
typedef uint32_t hri_eic_syncbusy_reg_t;
typedef uint8_t  hri_eic_ctrla_reg_t;
typedef uint8_t  hri_eic_nmictrl_reg_t;

static inline void hri_eic_wait_for_sync(const void *const hw, hri_eic_syncbusy_reg_t reg)
{
    4198:	b480      	push	{r7}
    419a:	b083      	sub	sp, #12
    419c:	af00      	add	r7, sp, #0
    419e:	6078      	str	r0, [r7, #4]
    41a0:	6039      	str	r1, [r7, #0]
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
    41a2:	bf00      	nop
    41a4:	687b      	ldr	r3, [r7, #4]
    41a6:	685a      	ldr	r2, [r3, #4]
    41a8:	683b      	ldr	r3, [r7, #0]
    41aa:	4013      	ands	r3, r2
    41ac:	2b00      	cmp	r3, #0
    41ae:	d1f9      	bne.n	41a4 <hri_eic_wait_for_sync+0xc>
	};
}
    41b0:	bf00      	nop
    41b2:	370c      	adds	r7, #12
    41b4:	46bd      	mov	sp, r7
    41b6:	f85d 7b04 	ldr.w	r7, [sp], #4
    41ba:	4770      	bx	lr

000041bc <hri_eic_is_syncing>:

static inline bool hri_eic_is_syncing(const void *const hw, hri_eic_syncbusy_reg_t reg)
{
    41bc:	b480      	push	{r7}
    41be:	b083      	sub	sp, #12
    41c0:	af00      	add	r7, sp, #0
    41c2:	6078      	str	r0, [r7, #4]
    41c4:	6039      	str	r1, [r7, #0]
	return ((Eic *)hw)->SYNCBUSY.reg & reg;
    41c6:	687b      	ldr	r3, [r7, #4]
    41c8:	685a      	ldr	r2, [r3, #4]
    41ca:	683b      	ldr	r3, [r7, #0]
    41cc:	4013      	ands	r3, r2
    41ce:	2b00      	cmp	r3, #0
    41d0:	bf14      	ite	ne
    41d2:	2301      	movne	r3, #1
    41d4:	2300      	moveq	r3, #0
    41d6:	b2db      	uxtb	r3, r3
}
    41d8:	4618      	mov	r0, r3
    41da:	370c      	adds	r7, #12
    41dc:	46bd      	mov	sp, r7
    41de:	f85d 7b04 	ldr.w	r7, [sp], #4
    41e2:	4770      	bx	lr

000041e4 <hri_eic_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_eic_intflag_reg_t hri_eic_read_INTFLAG_reg(const void *const hw)
{
    41e4:	b480      	push	{r7}
    41e6:	b083      	sub	sp, #12
    41e8:	af00      	add	r7, sp, #0
    41ea:	6078      	str	r0, [r7, #4]
	return ((Eic *)hw)->INTFLAG.reg;
    41ec:	687b      	ldr	r3, [r7, #4]
    41ee:	695b      	ldr	r3, [r3, #20]
}
    41f0:	4618      	mov	r0, r3
    41f2:	370c      	adds	r7, #12
    41f4:	46bd      	mov	sp, r7
    41f6:	f85d 7b04 	ldr.w	r7, [sp], #4
    41fa:	4770      	bx	lr

000041fc <hri_eic_clear_INTFLAG_reg>:

static inline void hri_eic_clear_INTFLAG_reg(const void *const hw, hri_eic_intflag_reg_t mask)
{
    41fc:	b480      	push	{r7}
    41fe:	b083      	sub	sp, #12
    4200:	af00      	add	r7, sp, #0
    4202:	6078      	str	r0, [r7, #4]
    4204:	6039      	str	r1, [r7, #0]
	((Eic *)hw)->INTFLAG.reg = mask;
    4206:	687b      	ldr	r3, [r7, #4]
    4208:	683a      	ldr	r2, [r7, #0]
    420a:	615a      	str	r2, [r3, #20]
}
    420c:	bf00      	nop
    420e:	370c      	adds	r7, #12
    4210:	46bd      	mov	sp, r7
    4212:	f85d 7b04 	ldr.w	r7, [sp], #4
    4216:	4770      	bx	lr

00004218 <hri_eic_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & EIC_CTRLA_SWRST) >> EIC_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_eic_set_CTRLA_ENABLE_bit(const void *const hw)
{
    4218:	b580      	push	{r7, lr}
    421a:	b082      	sub	sp, #8
    421c:	af00      	add	r7, sp, #0
    421e:	6078      	str	r0, [r7, #4]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRLA.reg |= EIC_CTRLA_ENABLE;
    4220:	687b      	ldr	r3, [r7, #4]
    4222:	781b      	ldrb	r3, [r3, #0]
    4224:	b2db      	uxtb	r3, r3
    4226:	f043 0302 	orr.w	r3, r3, #2
    422a:	b2da      	uxtb	r2, r3
    422c:	687b      	ldr	r3, [r7, #4]
    422e:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_SWRST | EIC_SYNCBUSY_ENABLE);
    4230:	2103      	movs	r1, #3
    4232:	6878      	ldr	r0, [r7, #4]
    4234:	4b02      	ldr	r3, [pc, #8]	; (4240 <hri_eic_set_CTRLA_ENABLE_bit+0x28>)
    4236:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    4238:	bf00      	nop
    423a:	3708      	adds	r7, #8
    423c:	46bd      	mov	sp, r7
    423e:	bd80      	pop	{r7, pc}
    4240:	00004199 	.word	0x00004199

00004244 <hri_eic_clear_CTRLA_ENABLE_bit>:
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_SWRST | EIC_SYNCBUSY_ENABLE);
	EIC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_eic_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    4244:	b580      	push	{r7, lr}
    4246:	b082      	sub	sp, #8
    4248:	af00      	add	r7, sp, #0
    424a:	6078      	str	r0, [r7, #4]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRLA.reg &= ~EIC_CTRLA_ENABLE;
    424c:	687b      	ldr	r3, [r7, #4]
    424e:	781b      	ldrb	r3, [r3, #0]
    4250:	b2db      	uxtb	r3, r3
    4252:	f023 0302 	bic.w	r3, r3, #2
    4256:	b2da      	uxtb	r2, r3
    4258:	687b      	ldr	r3, [r7, #4]
    425a:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_SWRST | EIC_SYNCBUSY_ENABLE);
    425c:	2103      	movs	r1, #3
    425e:	6878      	ldr	r0, [r7, #4]
    4260:	4b02      	ldr	r3, [pc, #8]	; (426c <hri_eic_clear_CTRLA_ENABLE_bit+0x28>)
    4262:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    4264:	bf00      	nop
    4266:	3708      	adds	r7, #8
    4268:	46bd      	mov	sp, r7
    426a:	bd80      	pop	{r7, pc}
    426c:	00004199 	.word	0x00004199

00004270 <hri_eic_write_CTRLA_CKSEL_bit>:
	tmp = (tmp & EIC_CTRLA_CKSEL) >> EIC_CTRLA_CKSEL_Pos;
	return (bool)tmp;
}

static inline void hri_eic_write_CTRLA_CKSEL_bit(const void *const hw, bool value)
{
    4270:	b580      	push	{r7, lr}
    4272:	b084      	sub	sp, #16
    4274:	af00      	add	r7, sp, #0
    4276:	6078      	str	r0, [r7, #4]
    4278:	460b      	mov	r3, r1
    427a:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	EIC_CRITICAL_SECTION_ENTER();
	tmp = ((Eic *)hw)->CTRLA.reg;
    427c:	687b      	ldr	r3, [r7, #4]
    427e:	781b      	ldrb	r3, [r3, #0]
    4280:	73fb      	strb	r3, [r7, #15]
	tmp &= ~EIC_CTRLA_CKSEL;
    4282:	7bfb      	ldrb	r3, [r7, #15]
    4284:	f023 0310 	bic.w	r3, r3, #16
    4288:	73fb      	strb	r3, [r7, #15]
	tmp |= value << EIC_CTRLA_CKSEL_Pos;
    428a:	78fb      	ldrb	r3, [r7, #3]
    428c:	011b      	lsls	r3, r3, #4
    428e:	b25a      	sxtb	r2, r3
    4290:	f997 300f 	ldrsb.w	r3, [r7, #15]
    4294:	4313      	orrs	r3, r2
    4296:	b25b      	sxtb	r3, r3
    4298:	73fb      	strb	r3, [r7, #15]
	((Eic *)hw)->CTRLA.reg = tmp;
    429a:	687b      	ldr	r3, [r7, #4]
    429c:	7bfa      	ldrb	r2, [r7, #15]
    429e:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
    42a0:	2103      	movs	r1, #3
    42a2:	6878      	ldr	r0, [r7, #4]
    42a4:	4b02      	ldr	r3, [pc, #8]	; (42b0 <hri_eic_write_CTRLA_CKSEL_bit+0x40>)
    42a6:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    42a8:	bf00      	nop
    42aa:	3710      	adds	r7, #16
    42ac:	46bd      	mov	sp, r7
    42ae:	bd80      	pop	{r7, pc}
    42b0:	00004199 	.word	0x00004199

000042b4 <hri_eic_get_CTRLA_reg>:
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
	EIC_CRITICAL_SECTION_LEAVE();
}

static inline hri_eic_ctrla_reg_t hri_eic_get_CTRLA_reg(const void *const hw, hri_eic_ctrla_reg_t mask)
{
    42b4:	b580      	push	{r7, lr}
    42b6:	b084      	sub	sp, #16
    42b8:	af00      	add	r7, sp, #0
    42ba:	6078      	str	r0, [r7, #4]
    42bc:	460b      	mov	r3, r1
    42be:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
    42c0:	2103      	movs	r1, #3
    42c2:	6878      	ldr	r0, [r7, #4]
    42c4:	4b06      	ldr	r3, [pc, #24]	; (42e0 <hri_eic_get_CTRLA_reg+0x2c>)
    42c6:	4798      	blx	r3
	tmp = ((Eic *)hw)->CTRLA.reg;
    42c8:	687b      	ldr	r3, [r7, #4]
    42ca:	781b      	ldrb	r3, [r3, #0]
    42cc:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    42ce:	7bfa      	ldrb	r2, [r7, #15]
    42d0:	78fb      	ldrb	r3, [r7, #3]
    42d2:	4013      	ands	r3, r2
    42d4:	73fb      	strb	r3, [r7, #15]
	return tmp;
    42d6:	7bfb      	ldrb	r3, [r7, #15]
}
    42d8:	4618      	mov	r0, r3
    42da:	3710      	adds	r7, #16
    42dc:	46bd      	mov	sp, r7
    42de:	bd80      	pop	{r7, pc}
    42e0:	00004199 	.word	0x00004199

000042e4 <hri_eic_write_CTRLA_reg>:

static inline void hri_eic_write_CTRLA_reg(const void *const hw, hri_eic_ctrla_reg_t data)
{
    42e4:	b580      	push	{r7, lr}
    42e6:	b082      	sub	sp, #8
    42e8:	af00      	add	r7, sp, #0
    42ea:	6078      	str	r0, [r7, #4]
    42ec:	460b      	mov	r3, r1
    42ee:	70fb      	strb	r3, [r7, #3]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRLA.reg = data;
    42f0:	687b      	ldr	r3, [r7, #4]
    42f2:	78fa      	ldrb	r2, [r7, #3]
    42f4:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
    42f6:	2103      	movs	r1, #3
    42f8:	6878      	ldr	r0, [r7, #4]
    42fa:	4b03      	ldr	r3, [pc, #12]	; (4308 <hri_eic_write_CTRLA_reg+0x24>)
    42fc:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    42fe:	bf00      	nop
    4300:	3708      	adds	r7, #8
    4302:	46bd      	mov	sp, r7
    4304:	bd80      	pop	{r7, pc}
    4306:	bf00      	nop
    4308:	00004199 	.word	0x00004199

0000430c <hri_eic_write_NMICTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_NMICTRL_reg(const void *const hw, hri_eic_nmictrl_reg_t data)
{
    430c:	b480      	push	{r7}
    430e:	b083      	sub	sp, #12
    4310:	af00      	add	r7, sp, #0
    4312:	6078      	str	r0, [r7, #4]
    4314:	460b      	mov	r3, r1
    4316:	70fb      	strb	r3, [r7, #3]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->NMICTRL.reg = data;
    4318:	687b      	ldr	r3, [r7, #4]
    431a:	78fa      	ldrb	r2, [r7, #3]
    431c:	705a      	strb	r2, [r3, #1]
	EIC_CRITICAL_SECTION_LEAVE();
}
    431e:	bf00      	nop
    4320:	370c      	adds	r7, #12
    4322:	46bd      	mov	sp, r7
    4324:	f85d 7b04 	ldr.w	r7, [sp], #4
    4328:	4770      	bx	lr

0000432a <hri_eic_write_EVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_EVCTRL_reg(const void *const hw, hri_eic_evctrl_reg_t data)
{
    432a:	b480      	push	{r7}
    432c:	b083      	sub	sp, #12
    432e:	af00      	add	r7, sp, #0
    4330:	6078      	str	r0, [r7, #4]
    4332:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->EVCTRL.reg = data;
    4334:	687b      	ldr	r3, [r7, #4]
    4336:	683a      	ldr	r2, [r7, #0]
    4338:	609a      	str	r2, [r3, #8]
	EIC_CRITICAL_SECTION_LEAVE();
}
    433a:	bf00      	nop
    433c:	370c      	adds	r7, #12
    433e:	46bd      	mov	sp, r7
    4340:	f85d 7b04 	ldr.w	r7, [sp], #4
    4344:	4770      	bx	lr

00004346 <hri_eic_write_ASYNCH_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_ASYNCH_reg(const void *const hw, hri_eic_asynch_reg_t data)
{
    4346:	b480      	push	{r7}
    4348:	b083      	sub	sp, #12
    434a:	af00      	add	r7, sp, #0
    434c:	6078      	str	r0, [r7, #4]
    434e:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->ASYNCH.reg = data;
    4350:	687b      	ldr	r3, [r7, #4]
    4352:	683a      	ldr	r2, [r7, #0]
    4354:	619a      	str	r2, [r3, #24]
	EIC_CRITICAL_SECTION_LEAVE();
}
    4356:	bf00      	nop
    4358:	370c      	adds	r7, #12
    435a:	46bd      	mov	sp, r7
    435c:	f85d 7b04 	ldr.w	r7, [sp], #4
    4360:	4770      	bx	lr

00004362 <hri_eic_write_CONFIG_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_CONFIG_reg(const void *const hw, uint8_t index, hri_eic_config_reg_t data)
{
    4362:	b480      	push	{r7}
    4364:	b085      	sub	sp, #20
    4366:	af00      	add	r7, sp, #0
    4368:	60f8      	str	r0, [r7, #12]
    436a:	460b      	mov	r3, r1
    436c:	607a      	str	r2, [r7, #4]
    436e:	72fb      	strb	r3, [r7, #11]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CONFIG[index].reg = data;
    4370:	7afb      	ldrb	r3, [r7, #11]
    4372:	68fa      	ldr	r2, [r7, #12]
    4374:	3306      	adds	r3, #6
    4376:	009b      	lsls	r3, r3, #2
    4378:	4413      	add	r3, r2
    437a:	687a      	ldr	r2, [r7, #4]
    437c:	605a      	str	r2, [r3, #4]
	EIC_CRITICAL_SECTION_LEAVE();
}
    437e:	bf00      	nop
    4380:	3714      	adds	r7, #20
    4382:	46bd      	mov	sp, r7
    4384:	f85d 7b04 	ldr.w	r7, [sp], #4
    4388:	4770      	bx	lr

0000438a <hri_eic_write_DEBOUNCEN_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_DEBOUNCEN_reg(const void *const hw, hri_eic_debouncen_reg_t data)
{
    438a:	b480      	push	{r7}
    438c:	b083      	sub	sp, #12
    438e:	af00      	add	r7, sp, #0
    4390:	6078      	str	r0, [r7, #4]
    4392:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->DEBOUNCEN.reg = data;
    4394:	687b      	ldr	r3, [r7, #4]
    4396:	683a      	ldr	r2, [r7, #0]
    4398:	631a      	str	r2, [r3, #48]	; 0x30
	EIC_CRITICAL_SECTION_LEAVE();
}
    439a:	bf00      	nop
    439c:	370c      	adds	r7, #12
    439e:	46bd      	mov	sp, r7
    43a0:	f85d 7b04 	ldr.w	r7, [sp], #4
    43a4:	4770      	bx	lr

000043a6 <hri_eic_write_DPRESCALER_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_DPRESCALER_reg(const void *const hw, hri_eic_dprescaler_reg_t data)
{
    43a6:	b480      	push	{r7}
    43a8:	b083      	sub	sp, #12
    43aa:	af00      	add	r7, sp, #0
    43ac:	6078      	str	r0, [r7, #4]
    43ae:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->DPRESCALER.reg = data;
    43b0:	687b      	ldr	r3, [r7, #4]
    43b2:	683a      	ldr	r2, [r7, #0]
    43b4:	635a      	str	r2, [r3, #52]	; 0x34
	EIC_CRITICAL_SECTION_LEAVE();
}
    43b6:	bf00      	nop
    43b8:	370c      	adds	r7, #12
    43ba:	46bd      	mov	sp, r7
    43bc:	f85d 7b04 	ldr.w	r7, [sp], #4
    43c0:	4770      	bx	lr
	...

000043c4 <_ext_irq_init>:

/**
 * \brief Initialize external interrupt module
 */
int32_t _ext_irq_init(void (*cb)(const uint32_t pin))
{
    43c4:	b580      	push	{r7, lr}
    43c6:	b082      	sub	sp, #8
    43c8:	af00      	add	r7, sp, #0
    43ca:	6078      	str	r0, [r7, #4]
	if (!hri_eic_is_syncing(EIC, EIC_SYNCBUSY_SWRST)) {
    43cc:	2101      	movs	r1, #1
    43ce:	4838      	ldr	r0, [pc, #224]	; (44b0 <_ext_irq_init+0xec>)
    43d0:	4b38      	ldr	r3, [pc, #224]	; (44b4 <_ext_irq_init+0xf0>)
    43d2:	4798      	blx	r3
    43d4:	4603      	mov	r3, r0
    43d6:	f083 0301 	eor.w	r3, r3, #1
    43da:	b2db      	uxtb	r3, r3
    43dc:	2b00      	cmp	r3, #0
    43de:	d011      	beq.n	4404 <_ext_irq_init+0x40>
		if (hri_eic_get_CTRLA_reg(EIC, EIC_CTRLA_ENABLE)) {
    43e0:	2102      	movs	r1, #2
    43e2:	4833      	ldr	r0, [pc, #204]	; (44b0 <_ext_irq_init+0xec>)
    43e4:	4b34      	ldr	r3, [pc, #208]	; (44b8 <_ext_irq_init+0xf4>)
    43e6:	4798      	blx	r3
    43e8:	4603      	mov	r3, r0
    43ea:	2b00      	cmp	r3, #0
    43ec:	d006      	beq.n	43fc <_ext_irq_init+0x38>
			hri_eic_clear_CTRLA_ENABLE_bit(EIC);
    43ee:	4830      	ldr	r0, [pc, #192]	; (44b0 <_ext_irq_init+0xec>)
    43f0:	4b32      	ldr	r3, [pc, #200]	; (44bc <_ext_irq_init+0xf8>)
    43f2:	4798      	blx	r3
			hri_eic_wait_for_sync(EIC, EIC_SYNCBUSY_ENABLE);
    43f4:	2102      	movs	r1, #2
    43f6:	482e      	ldr	r0, [pc, #184]	; (44b0 <_ext_irq_init+0xec>)
    43f8:	4b31      	ldr	r3, [pc, #196]	; (44c0 <_ext_irq_init+0xfc>)
    43fa:	4798      	blx	r3
		}
		hri_eic_write_CTRLA_reg(EIC, EIC_CTRLA_SWRST);
    43fc:	2101      	movs	r1, #1
    43fe:	482c      	ldr	r0, [pc, #176]	; (44b0 <_ext_irq_init+0xec>)
    4400:	4b30      	ldr	r3, [pc, #192]	; (44c4 <_ext_irq_init+0x100>)
    4402:	4798      	blx	r3
	}
	hri_eic_wait_for_sync(EIC, EIC_SYNCBUSY_SWRST);
    4404:	2101      	movs	r1, #1
    4406:	482a      	ldr	r0, [pc, #168]	; (44b0 <_ext_irq_init+0xec>)
    4408:	4b2d      	ldr	r3, [pc, #180]	; (44c0 <_ext_irq_init+0xfc>)
    440a:	4798      	blx	r3

	hri_eic_write_CTRLA_CKSEL_bit(EIC, CONF_EIC_CKSEL);
    440c:	2100      	movs	r1, #0
    440e:	4828      	ldr	r0, [pc, #160]	; (44b0 <_ext_irq_init+0xec>)
    4410:	4b2d      	ldr	r3, [pc, #180]	; (44c8 <_ext_irq_init+0x104>)
    4412:	4798      	blx	r3

	hri_eic_write_NMICTRL_reg(EIC,
    4414:	2100      	movs	r1, #0
    4416:	4826      	ldr	r0, [pc, #152]	; (44b0 <_ext_irq_init+0xec>)
    4418:	4b2c      	ldr	r3, [pc, #176]	; (44cc <_ext_irq_init+0x108>)
    441a:	4798      	blx	r3
	                          (CONF_EIC_NMIFILTEN << EIC_NMICTRL_NMIFILTEN_Pos)
	                              | EIC_NMICTRL_NMISENSE(CONF_EIC_NMISENSE) | EIC_ASYNCH_ASYNCH(CONF_EIC_NMIASYNCH)
	                              | 0);

	hri_eic_write_EVCTRL_reg(EIC,
    441c:	2100      	movs	r1, #0
    441e:	4824      	ldr	r0, [pc, #144]	; (44b0 <_ext_irq_init+0xec>)
    4420:	4b2b      	ldr	r3, [pc, #172]	; (44d0 <_ext_irq_init+0x10c>)
    4422:	4798      	blx	r3
	                             | (CONF_EIC_EXTINTEO3 << 3) | (CONF_EIC_EXTINTEO4 << 4) | (CONF_EIC_EXTINTEO5 << 5)
	                             | (CONF_EIC_EXTINTEO6 << 6) | (CONF_EIC_EXTINTEO7 << 7) | (CONF_EIC_EXTINTEO8 << 8)
	                             | (CONF_EIC_EXTINTEO9 << 9) | (CONF_EIC_EXTINTEO10 << 10) | (CONF_EIC_EXTINTEO11 << 11)
	                             | (CONF_EIC_EXTINTEO12 << 12) | (CONF_EIC_EXTINTEO13 << 13)
	                             | (CONF_EIC_EXTINTEO14 << 14) | (CONF_EIC_EXTINTEO15 << 15) | 0);
	hri_eic_write_ASYNCH_reg(EIC,
    4424:	2130      	movs	r1, #48	; 0x30
    4426:	4822      	ldr	r0, [pc, #136]	; (44b0 <_ext_irq_init+0xec>)
    4428:	4b2a      	ldr	r3, [pc, #168]	; (44d4 <_ext_irq_init+0x110>)
    442a:	4798      	blx	r3
	                             | (CONF_EIC_ASYNCH3 << 3) | (CONF_EIC_ASYNCH4 << 4) | (CONF_EIC_ASYNCH5 << 5)
	                             | (CONF_EIC_ASYNCH6 << 6) | (CONF_EIC_ASYNCH7 << 7) | (CONF_EIC_ASYNCH8 << 8)
	                             | (CONF_EIC_ASYNCH9 << 9) | (CONF_EIC_ASYNCH10 << 10) | (CONF_EIC_ASYNCH11 << 11)
	                             | (CONF_EIC_ASYNCH12 << 12) | (CONF_EIC_ASYNCH13 << 13) | (CONF_EIC_ASYNCH14 << 14)
	                             | (CONF_EIC_ASYNCH15 << 15) | 0);
	hri_eic_write_DEBOUNCEN_reg(
    442c:	2130      	movs	r1, #48	; 0x30
    442e:	4820      	ldr	r0, [pc, #128]	; (44b0 <_ext_irq_init+0xec>)
    4430:	4b29      	ldr	r3, [pc, #164]	; (44d8 <_ext_irq_init+0x114>)
    4432:	4798      	blx	r3
	        | (CONF_EIC_DEBOUNCE_ENABLE6 << 6) | (CONF_EIC_DEBOUNCE_ENABLE7 << 7) | (CONF_EIC_DEBOUNCE_ENABLE8 << 8)
	        | (CONF_EIC_DEBOUNCE_ENABLE9 << 9) | (CONF_EIC_DEBOUNCE_ENABLE10 << 10) | (CONF_EIC_DEBOUNCE_ENABLE11 << 11)
	        | (CONF_EIC_DEBOUNCE_ENABLE12 << 12) | (CONF_EIC_DEBOUNCE_ENABLE13 << 13)
	        | (CONF_EIC_DEBOUNCE_ENABLE14 << 14) | (CONF_EIC_DEBOUNCE_ENABLE15 << 15) | 0);

	hri_eic_write_DPRESCALER_reg(
    4434:	2100      	movs	r1, #0
    4436:	481e      	ldr	r0, [pc, #120]	; (44b0 <_ext_irq_init+0xec>)
    4438:	4b28      	ldr	r3, [pc, #160]	; (44dc <_ext_irq_init+0x118>)
    443a:	4798      	blx	r3
	    EIC,
	    (EIC_DPRESCALER_PRESCALER0(CONF_EIC_DPRESCALER0)) | (CONF_EIC_STATES0 << EIC_DPRESCALER_STATES0_Pos)
	        | (EIC_DPRESCALER_PRESCALER1(CONF_EIC_DPRESCALER1)) | (CONF_EIC_STATES1 << EIC_DPRESCALER_STATES1_Pos)
	        | CONF_EIC_TICKON << EIC_DPRESCALER_TICKON_Pos | 0);

	hri_eic_write_CONFIG_reg(EIC,
    443c:	f44f 0219 	mov.w	r2, #10027008	; 0x990000
    4440:	2100      	movs	r1, #0
    4442:	481b      	ldr	r0, [pc, #108]	; (44b0 <_ext_irq_init+0xec>)
    4444:	4b26      	ldr	r3, [pc, #152]	; (44e0 <_ext_irq_init+0x11c>)
    4446:	4798      	blx	r3
	                             | (CONF_EIC_FILTEN5 << EIC_CONFIG_FILTEN5_Pos) | EIC_CONFIG_SENSE5(CONF_EIC_SENSE5)
	                             | (CONF_EIC_FILTEN6 << EIC_CONFIG_FILTEN6_Pos) | EIC_CONFIG_SENSE6(CONF_EIC_SENSE6)
	                             | (CONF_EIC_FILTEN7 << EIC_CONFIG_FILTEN7_Pos) | EIC_CONFIG_SENSE7(CONF_EIC_SENSE7)
	                             | 0);

	hri_eic_write_CONFIG_reg(EIC,
    4448:	2200      	movs	r2, #0
    444a:	2101      	movs	r1, #1
    444c:	4818      	ldr	r0, [pc, #96]	; (44b0 <_ext_irq_init+0xec>)
    444e:	4b24      	ldr	r3, [pc, #144]	; (44e0 <_ext_irq_init+0x11c>)
    4450:	4798      	blx	r3
	                             | (CONF_EIC_FILTEN13 << EIC_CONFIG_FILTEN5_Pos) | EIC_CONFIG_SENSE5(CONF_EIC_SENSE13)
	                             | (CONF_EIC_FILTEN14 << EIC_CONFIG_FILTEN6_Pos) | EIC_CONFIG_SENSE6(CONF_EIC_SENSE14)
	                             | (CONF_EIC_FILTEN15 << EIC_CONFIG_FILTEN7_Pos) | EIC_CONFIG_SENSE7(CONF_EIC_SENSE15)
	                             | 0);

	hri_eic_set_CTRLA_ENABLE_bit(EIC);
    4452:	4817      	ldr	r0, [pc, #92]	; (44b0 <_ext_irq_init+0xec>)
    4454:	4b23      	ldr	r3, [pc, #140]	; (44e4 <_ext_irq_init+0x120>)
    4456:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_4_IRQn);
    4458:	2010      	movs	r0, #16
    445a:	4b23      	ldr	r3, [pc, #140]	; (44e8 <_ext_irq_init+0x124>)
    445c:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_4_IRQn);
    445e:	2010      	movs	r0, #16
    4460:	4b22      	ldr	r3, [pc, #136]	; (44ec <_ext_irq_init+0x128>)
    4462:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_4_IRQn);
    4464:	2010      	movs	r0, #16
    4466:	4b22      	ldr	r3, [pc, #136]	; (44f0 <_ext_irq_init+0x12c>)
    4468:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_5_IRQn);
    446a:	2011      	movs	r0, #17
    446c:	4b1e      	ldr	r3, [pc, #120]	; (44e8 <_ext_irq_init+0x124>)
    446e:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_5_IRQn);
    4470:	2011      	movs	r0, #17
    4472:	4b1e      	ldr	r3, [pc, #120]	; (44ec <_ext_irq_init+0x128>)
    4474:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_5_IRQn);
    4476:	2011      	movs	r0, #17
    4478:	4b1d      	ldr	r3, [pc, #116]	; (44f0 <_ext_irq_init+0x12c>)
    447a:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_6_IRQn);
    447c:	2012      	movs	r0, #18
    447e:	4b1a      	ldr	r3, [pc, #104]	; (44e8 <_ext_irq_init+0x124>)
    4480:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_6_IRQn);
    4482:	2012      	movs	r0, #18
    4484:	4b19      	ldr	r3, [pc, #100]	; (44ec <_ext_irq_init+0x128>)
    4486:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_6_IRQn);
    4488:	2012      	movs	r0, #18
    448a:	4b19      	ldr	r3, [pc, #100]	; (44f0 <_ext_irq_init+0x12c>)
    448c:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_7_IRQn);
    448e:	2013      	movs	r0, #19
    4490:	4b15      	ldr	r3, [pc, #84]	; (44e8 <_ext_irq_init+0x124>)
    4492:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_7_IRQn);
    4494:	2013      	movs	r0, #19
    4496:	4b15      	ldr	r3, [pc, #84]	; (44ec <_ext_irq_init+0x128>)
    4498:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_7_IRQn);
    449a:	2013      	movs	r0, #19
    449c:	4b14      	ldr	r3, [pc, #80]	; (44f0 <_ext_irq_init+0x12c>)
    449e:	4798      	blx	r3

	callback = cb;
    44a0:	4a14      	ldr	r2, [pc, #80]	; (44f4 <_ext_irq_init+0x130>)
    44a2:	687b      	ldr	r3, [r7, #4]
    44a4:	6013      	str	r3, [r2, #0]

	return ERR_NONE;
    44a6:	2300      	movs	r3, #0
}
    44a8:	4618      	mov	r0, r3
    44aa:	3708      	adds	r7, #8
    44ac:	46bd      	mov	sp, r7
    44ae:	bd80      	pop	{r7, pc}
    44b0:	40002800 	.word	0x40002800
    44b4:	000041bd 	.word	0x000041bd
    44b8:	000042b5 	.word	0x000042b5
    44bc:	00004245 	.word	0x00004245
    44c0:	00004199 	.word	0x00004199
    44c4:	000042e5 	.word	0x000042e5
    44c8:	00004271 	.word	0x00004271
    44cc:	0000430d 	.word	0x0000430d
    44d0:	0000432b 	.word	0x0000432b
    44d4:	00004347 	.word	0x00004347
    44d8:	0000438b 	.word	0x0000438b
    44dc:	000043a7 	.word	0x000043a7
    44e0:	00004363 	.word	0x00004363
    44e4:	00004219 	.word	0x00004219
    44e8:	00004119 	.word	0x00004119
    44ec:	0000415d 	.word	0x0000415d
    44f0:	000040dd 	.word	0x000040dd
    44f4:	20000bf4 	.word	0x20000bf4

000044f8 <_ext_irq_handler>:

/**
 * \brief Inter EIC interrupt handler
 */
static void _ext_irq_handler(void)
{
    44f8:	b580      	push	{r7, lr}
    44fa:	b084      	sub	sp, #16
    44fc:	af00      	add	r7, sp, #0
	volatile uint32_t flags = hri_eic_read_INTFLAG_reg(EIC);
    44fe:	4841      	ldr	r0, [pc, #260]	; (4604 <_ext_irq_handler+0x10c>)
    4500:	4b41      	ldr	r3, [pc, #260]	; (4608 <_ext_irq_handler+0x110>)
    4502:	4798      	blx	r3
    4504:	4603      	mov	r3, r0
    4506:	603b      	str	r3, [r7, #0]
	int8_t            pos;
	uint32_t          pin = INVALID_PIN_NUMBER;
    4508:	f04f 33ff 	mov.w	r3, #4294967295
    450c:	60bb      	str	r3, [r7, #8]

	hri_eic_clear_INTFLAG_reg(EIC, flags);
    450e:	683b      	ldr	r3, [r7, #0]
    4510:	4619      	mov	r1, r3
    4512:	483c      	ldr	r0, [pc, #240]	; (4604 <_ext_irq_handler+0x10c>)
    4514:	4b3d      	ldr	r3, [pc, #244]	; (460c <_ext_irq_handler+0x114>)
    4516:	4798      	blx	r3

	ASSERT(callback);
    4518:	4b3d      	ldr	r3, [pc, #244]	; (4610 <_ext_irq_handler+0x118>)
    451a:	681b      	ldr	r3, [r3, #0]
    451c:	2b00      	cmp	r3, #0
    451e:	bf14      	ite	ne
    4520:	2301      	movne	r3, #1
    4522:	2300      	moveq	r3, #0
    4524:	b2db      	uxtb	r3, r3
    4526:	22f4      	movs	r2, #244	; 0xf4
    4528:	493a      	ldr	r1, [pc, #232]	; (4614 <_ext_irq_handler+0x11c>)
    452a:	4618      	mov	r0, r3
    452c:	4b3a      	ldr	r3, [pc, #232]	; (4618 <_ext_irq_handler+0x120>)
    452e:	4798      	blx	r3

	while (flags) {
    4530:	e060      	b.n	45f4 <_ext_irq_handler+0xfc>
		pos = ffs(flags) - 1;
    4532:	683b      	ldr	r3, [r7, #0]
    4534:	4618      	mov	r0, r3
    4536:	4b39      	ldr	r3, [pc, #228]	; (461c <_ext_irq_handler+0x124>)
    4538:	4798      	blx	r3
    453a:	4603      	mov	r3, r0
    453c:	b2db      	uxtb	r3, r3
    453e:	3b01      	subs	r3, #1
    4540:	b2db      	uxtb	r3, r3
    4542:	73fb      	strb	r3, [r7, #15]
		while (-1 != pos) {
    4544:	e047      	b.n	45d6 <_ext_irq_handler+0xde>
			uint8_t lower = 0, middle, upper = EXT_IRQ_AMOUNT;
    4546:	2300      	movs	r3, #0
    4548:	71fb      	strb	r3, [r7, #7]
    454a:	2304      	movs	r3, #4
    454c:	71bb      	strb	r3, [r7, #6]

			while (upper >= lower) {
    454e:	e024      	b.n	459a <_ext_irq_handler+0xa2>
				middle = (upper + lower) >> 1;
    4550:	79ba      	ldrb	r2, [r7, #6]
    4552:	79fb      	ldrb	r3, [r7, #7]
    4554:	4413      	add	r3, r2
    4556:	105b      	asrs	r3, r3, #1
    4558:	717b      	strb	r3, [r7, #5]
				if (_map[middle].extint == pos) {
    455a:	797b      	ldrb	r3, [r7, #5]
    455c:	4a30      	ldr	r2, [pc, #192]	; (4620 <_ext_irq_handler+0x128>)
    455e:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
    4562:	461a      	mov	r2, r3
    4564:	f997 300f 	ldrsb.w	r3, [r7, #15]
    4568:	429a      	cmp	r2, r3
    456a:	d106      	bne.n	457a <_ext_irq_handler+0x82>
					pin = _map[middle].pin;
    456c:	797b      	ldrb	r3, [r7, #5]
    456e:	4a2c      	ldr	r2, [pc, #176]	; (4620 <_ext_irq_handler+0x128>)
    4570:	00db      	lsls	r3, r3, #3
    4572:	4413      	add	r3, r2
    4574:	685b      	ldr	r3, [r3, #4]
    4576:	60bb      	str	r3, [r7, #8]
					break;
    4578:	e013      	b.n	45a2 <_ext_irq_handler+0xaa>
				}
				if (_map[middle].extint < pos) {
    457a:	797b      	ldrb	r3, [r7, #5]
    457c:	4a28      	ldr	r2, [pc, #160]	; (4620 <_ext_irq_handler+0x128>)
    457e:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
    4582:	461a      	mov	r2, r3
    4584:	f997 300f 	ldrsb.w	r3, [r7, #15]
    4588:	429a      	cmp	r2, r3
    458a:	da03      	bge.n	4594 <_ext_irq_handler+0x9c>
					lower = middle + 1;
    458c:	797b      	ldrb	r3, [r7, #5]
    458e:	3301      	adds	r3, #1
    4590:	71fb      	strb	r3, [r7, #7]
    4592:	e002      	b.n	459a <_ext_irq_handler+0xa2>
				} else {
					upper = middle - 1;
    4594:	797b      	ldrb	r3, [r7, #5]
    4596:	3b01      	subs	r3, #1
    4598:	71bb      	strb	r3, [r7, #6]
			while (upper >= lower) {
    459a:	79ba      	ldrb	r2, [r7, #6]
    459c:	79fb      	ldrb	r3, [r7, #7]
    459e:	429a      	cmp	r2, r3
    45a0:	d2d6      	bcs.n	4550 <_ext_irq_handler+0x58>
				}
			}

			if (INVALID_PIN_NUMBER != pin) {
    45a2:	68bb      	ldr	r3, [r7, #8]
    45a4:	f1b3 3fff 	cmp.w	r3, #4294967295
    45a8:	d003      	beq.n	45b2 <_ext_irq_handler+0xba>
				callback(pin);
    45aa:	4b19      	ldr	r3, [pc, #100]	; (4610 <_ext_irq_handler+0x118>)
    45ac:	681b      	ldr	r3, [r3, #0]
    45ae:	68b8      	ldr	r0, [r7, #8]
    45b0:	4798      	blx	r3
			}
			flags &= ~(1ul << pos);
    45b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
    45b6:	2201      	movs	r2, #1
    45b8:	fa02 f303 	lsl.w	r3, r2, r3
    45bc:	43da      	mvns	r2, r3
    45be:	683b      	ldr	r3, [r7, #0]
    45c0:	4013      	ands	r3, r2
    45c2:	603b      	str	r3, [r7, #0]
			pos = ffs(flags) - 1;
    45c4:	683b      	ldr	r3, [r7, #0]
    45c6:	4618      	mov	r0, r3
    45c8:	4b14      	ldr	r3, [pc, #80]	; (461c <_ext_irq_handler+0x124>)
    45ca:	4798      	blx	r3
    45cc:	4603      	mov	r3, r0
    45ce:	b2db      	uxtb	r3, r3
    45d0:	3b01      	subs	r3, #1
    45d2:	b2db      	uxtb	r3, r3
    45d4:	73fb      	strb	r3, [r7, #15]
		while (-1 != pos) {
    45d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
    45da:	f1b3 3fff 	cmp.w	r3, #4294967295
    45de:	d1b2      	bne.n	4546 <_ext_irq_handler+0x4e>
		}
		flags = hri_eic_read_INTFLAG_reg(EIC);
    45e0:	4808      	ldr	r0, [pc, #32]	; (4604 <_ext_irq_handler+0x10c>)
    45e2:	4b09      	ldr	r3, [pc, #36]	; (4608 <_ext_irq_handler+0x110>)
    45e4:	4798      	blx	r3
    45e6:	4603      	mov	r3, r0
    45e8:	603b      	str	r3, [r7, #0]
		hri_eic_clear_INTFLAG_reg(EIC, flags);
    45ea:	683b      	ldr	r3, [r7, #0]
    45ec:	4619      	mov	r1, r3
    45ee:	4805      	ldr	r0, [pc, #20]	; (4604 <_ext_irq_handler+0x10c>)
    45f0:	4b06      	ldr	r3, [pc, #24]	; (460c <_ext_irq_handler+0x114>)
    45f2:	4798      	blx	r3
	while (flags) {
    45f4:	683b      	ldr	r3, [r7, #0]
    45f6:	2b00      	cmp	r3, #0
    45f8:	d19b      	bne.n	4532 <_ext_irq_handler+0x3a>
	}
}
    45fa:	bf00      	nop
    45fc:	3710      	adds	r7, #16
    45fe:	46bd      	mov	sp, r7
    4600:	bd80      	pop	{r7, pc}
    4602:	bf00      	nop
    4604:	40002800 	.word	0x40002800
    4608:	000041e5 	.word	0x000041e5
    460c:	000041fd 	.word	0x000041fd
    4610:	20000bf4 	.word	0x20000bf4
    4614:	00012f9c 	.word	0x00012f9c
    4618:	00002ed9 	.word	0x00002ed9
    461c:	00012abd 	.word	0x00012abd
    4620:	00012f7c 	.word	0x00012f7c

00004624 <EIC_4_Handler>:

/**
 * \brief EIC interrupt handler
 */
void EIC_4_Handler(void)
{
    4624:	b580      	push	{r7, lr}
    4626:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    4628:	4b01      	ldr	r3, [pc, #4]	; (4630 <EIC_4_Handler+0xc>)
    462a:	4798      	blx	r3
} /**
    462c:	bf00      	nop
    462e:	bd80      	pop	{r7, pc}
    4630:	000044f9 	.word	0x000044f9

00004634 <EIC_5_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_5_Handler(void)
{
    4634:	b580      	push	{r7, lr}
    4636:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    4638:	4b01      	ldr	r3, [pc, #4]	; (4640 <EIC_5_Handler+0xc>)
    463a:	4798      	blx	r3
} /**
    463c:	bf00      	nop
    463e:	bd80      	pop	{r7, pc}
    4640:	000044f9 	.word	0x000044f9

00004644 <EIC_6_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_6_Handler(void)
{
    4644:	b580      	push	{r7, lr}
    4646:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    4648:	4b01      	ldr	r3, [pc, #4]	; (4650 <EIC_6_Handler+0xc>)
    464a:	4798      	blx	r3
} /**
    464c:	bf00      	nop
    464e:	bd80      	pop	{r7, pc}
    4650:	000044f9 	.word	0x000044f9

00004654 <EIC_7_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_7_Handler(void)
{
    4654:	b580      	push	{r7, lr}
    4656:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    4658:	4b01      	ldr	r3, [pc, #4]	; (4660 <EIC_7_Handler+0xc>)
    465a:	4798      	blx	r3
}
    465c:	bf00      	nop
    465e:	bd80      	pop	{r7, pc}
    4660:	000044f9 	.word	0x000044f9

00004664 <hri_evsys_write_USER_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_evsys_write_USER_reg(const void *const hw, uint8_t index, hri_evsys_user_reg_t data)
{
    4664:	b480      	push	{r7}
    4666:	b085      	sub	sp, #20
    4668:	af00      	add	r7, sp, #0
    466a:	60f8      	str	r0, [r7, #12]
    466c:	460b      	mov	r3, r1
    466e:	607a      	str	r2, [r7, #4]
    4670:	72fb      	strb	r3, [r7, #11]
	EVSYS_CRITICAL_SECTION_ENTER();
	((Evsys *)hw)->USER[index].reg = data;
    4672:	7afa      	ldrb	r2, [r7, #11]
    4674:	68fb      	ldr	r3, [r7, #12]
    4676:	3248      	adds	r2, #72	; 0x48
    4678:	6879      	ldr	r1, [r7, #4]
    467a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	EVSYS_CRITICAL_SECTION_LEAVE();
}
    467e:	bf00      	nop
    4680:	3714      	adds	r7, #20
    4682:	46bd      	mov	sp, r7
    4684:	f85d 7b04 	ldr.w	r7, [sp], #4
    4688:	4770      	bx	lr

0000468a <hri_evsys_write_CHINTEN_reg>:
	return ((Evsys *)hw)->Channel[submodule_index].CHINTENSET.reg;
}

static inline void hri_evsys_write_CHINTEN_reg(const void *const hw, uint8_t submodule_index,
                                               hri_evsys_chintenset_reg_t data)
{
    468a:	b480      	push	{r7}
    468c:	b083      	sub	sp, #12
    468e:	af00      	add	r7, sp, #0
    4690:	6078      	str	r0, [r7, #4]
    4692:	460b      	mov	r3, r1
    4694:	70fb      	strb	r3, [r7, #3]
    4696:	4613      	mov	r3, r2
    4698:	70bb      	strb	r3, [r7, #2]
	((Evsys *)hw)->Channel[submodule_index].CHINTENSET.reg = data;
    469a:	78fb      	ldrb	r3, [r7, #3]
    469c:	687a      	ldr	r2, [r7, #4]
    469e:	3304      	adds	r3, #4
    46a0:	00db      	lsls	r3, r3, #3
    46a2:	4413      	add	r3, r2
    46a4:	78ba      	ldrb	r2, [r7, #2]
    46a6:	715a      	strb	r2, [r3, #5]
	((Evsys *)hw)->Channel[submodule_index].CHINTENCLR.reg = ~data;
    46a8:	78fb      	ldrb	r3, [r7, #3]
    46aa:	78ba      	ldrb	r2, [r7, #2]
    46ac:	43d2      	mvns	r2, r2
    46ae:	b2d1      	uxtb	r1, r2
    46b0:	687a      	ldr	r2, [r7, #4]
    46b2:	3304      	adds	r3, #4
    46b4:	00db      	lsls	r3, r3, #3
    46b6:	4413      	add	r3, r2
    46b8:	460a      	mov	r2, r1
    46ba:	711a      	strb	r2, [r3, #4]
}
    46bc:	bf00      	nop
    46be:	370c      	adds	r7, #12
    46c0:	46bd      	mov	sp, r7
    46c2:	f85d 7b04 	ldr.w	r7, [sp], #4
    46c6:	4770      	bx	lr

000046c8 <hri_evsys_write_CHANNEL_reg>:
	return tmp;
}

static inline void hri_evsys_write_CHANNEL_reg(const void *const hw, uint8_t submodule_index,
                                               hri_evsys_channel_reg_t data)
{
    46c8:	b480      	push	{r7}
    46ca:	b085      	sub	sp, #20
    46cc:	af00      	add	r7, sp, #0
    46ce:	60f8      	str	r0, [r7, #12]
    46d0:	460b      	mov	r3, r1
    46d2:	607a      	str	r2, [r7, #4]
    46d4:	72fb      	strb	r3, [r7, #11]
	EVSYS_CRITICAL_SECTION_ENTER();
	((Evsys *)hw)->Channel[submodule_index].CHANNEL.reg = data;
    46d6:	7afa      	ldrb	r2, [r7, #11]
    46d8:	68fb      	ldr	r3, [r7, #12]
    46da:	3204      	adds	r2, #4
    46dc:	6879      	ldr	r1, [r7, #4]
    46de:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
	EVSYS_CRITICAL_SECTION_LEAVE();
}
    46e2:	bf00      	nop
    46e4:	3714      	adds	r7, #20
    46e6:	46bd      	mov	sp, r7
    46e8:	f85d 7b04 	ldr.w	r7, [sp], #4
    46ec:	4770      	bx	lr
	...

000046f0 <_event_system_init>:

/**
 * \brief Initialize event system
 */
int32_t _event_system_init(void)
{
    46f0:	b580      	push	{r7, lr}
    46f2:	b082      	sub	sp, #8
    46f4:	af00      	add	r7, sp, #0
	uint8_t i;
	/* configure user multiplexers */
	for (i = 0; i < EVSYS_USERS; i++) {
    46f6:	2300      	movs	r3, #0
    46f8:	71fb      	strb	r3, [r7, #7]
    46fa:	e00b      	b.n	4714 <_event_system_init+0x24>
		hri_evsys_write_USER_reg(EVSYS, i, user_mux_confs[i]);
    46fc:	79fb      	ldrb	r3, [r7, #7]
    46fe:	4a18      	ldr	r2, [pc, #96]	; (4760 <_event_system_init+0x70>)
    4700:	5cd3      	ldrb	r3, [r2, r3]
    4702:	461a      	mov	r2, r3
    4704:	79fb      	ldrb	r3, [r7, #7]
    4706:	4619      	mov	r1, r3
    4708:	4816      	ldr	r0, [pc, #88]	; (4764 <_event_system_init+0x74>)
    470a:	4b17      	ldr	r3, [pc, #92]	; (4768 <_event_system_init+0x78>)
    470c:	4798      	blx	r3
	for (i = 0; i < EVSYS_USERS; i++) {
    470e:	79fb      	ldrb	r3, [r7, #7]
    4710:	3301      	adds	r3, #1
    4712:	71fb      	strb	r3, [r7, #7]
    4714:	79fb      	ldrb	r3, [r7, #7]
    4716:	2b42      	cmp	r3, #66	; 0x42
    4718:	d9f0      	bls.n	46fc <_event_system_init+0xc>
	}

	/* configure channels */
	for (i = 0; i < EVSYS_CHANNELS; i++) {
    471a:	2300      	movs	r3, #0
    471c:	71fb      	strb	r3, [r7, #7]
    471e:	e016      	b.n	474e <_event_system_init+0x5e>
		hri_evsys_write_CHANNEL_reg(EVSYS, i, channel_confs[i]);
    4720:	79fb      	ldrb	r3, [r7, #7]
    4722:	4a12      	ldr	r2, [pc, #72]	; (476c <_event_system_init+0x7c>)
    4724:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
    4728:	461a      	mov	r2, r3
    472a:	79fb      	ldrb	r3, [r7, #7]
    472c:	4619      	mov	r1, r3
    472e:	480d      	ldr	r0, [pc, #52]	; (4764 <_event_system_init+0x74>)
    4730:	4b0f      	ldr	r3, [pc, #60]	; (4770 <_event_system_init+0x80>)
    4732:	4798      	blx	r3
		hri_evsys_write_CHINTEN_reg(EVSYS, i, interrupt_cfg[i]);
    4734:	79fb      	ldrb	r3, [r7, #7]
    4736:	4a0f      	ldr	r2, [pc, #60]	; (4774 <_event_system_init+0x84>)
    4738:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    473c:	b2da      	uxtb	r2, r3
    473e:	79fb      	ldrb	r3, [r7, #7]
    4740:	4619      	mov	r1, r3
    4742:	4808      	ldr	r0, [pc, #32]	; (4764 <_event_system_init+0x74>)
    4744:	4b0c      	ldr	r3, [pc, #48]	; (4778 <_event_system_init+0x88>)
    4746:	4798      	blx	r3
	for (i = 0; i < EVSYS_CHANNELS; i++) {
    4748:	79fb      	ldrb	r3, [r7, #7]
    474a:	3301      	adds	r3, #1
    474c:	71fb      	strb	r3, [r7, #7]
    474e:	79fb      	ldrb	r3, [r7, #7]
    4750:	2b1f      	cmp	r3, #31
    4752:	d9e5      	bls.n	4720 <_event_system_init+0x30>
	}

	return ERR_NONE;
    4754:	2300      	movs	r3, #0
}
    4756:	4618      	mov	r0, r3
    4758:	3708      	adds	r7, #8
    475a:	46bd      	mov	sp, r7
    475c:	bd80      	pop	{r7, pc}
    475e:	bf00      	nop
    4760:	00012fb4 	.word	0x00012fb4
    4764:	4100e000 	.word	0x4100e000
    4768:	00004665 	.word	0x00004665
    476c:	00012ff8 	.word	0x00012ff8
    4770:	000046c9 	.word	0x000046c9
    4774:	00013038 	.word	0x00013038
    4778:	0000468b 	.word	0x0000468b

0000477c <hri_gclk_wait_for_sync>:
{
    477c:	b480      	push	{r7}
    477e:	b083      	sub	sp, #12
    4780:	af00      	add	r7, sp, #0
    4782:	6078      	str	r0, [r7, #4]
    4784:	6039      	str	r1, [r7, #0]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    4786:	bf00      	nop
    4788:	687b      	ldr	r3, [r7, #4]
    478a:	685a      	ldr	r2, [r3, #4]
    478c:	683b      	ldr	r3, [r7, #0]
    478e:	4013      	ands	r3, r2
    4790:	2b00      	cmp	r3, #0
    4792:	d1f9      	bne.n	4788 <hri_gclk_wait_for_sync+0xc>
}
    4794:	bf00      	nop
    4796:	370c      	adds	r7, #12
    4798:	46bd      	mov	sp, r7
    479a:	f85d 7b04 	ldr.w	r7, [sp], #4
    479e:	4770      	bx	lr

000047a0 <hri_gclk_write_GENCTRL_reg>:
{
    47a0:	b580      	push	{r7, lr}
    47a2:	b084      	sub	sp, #16
    47a4:	af00      	add	r7, sp, #0
    47a6:	60f8      	str	r0, [r7, #12]
    47a8:	460b      	mov	r3, r1
    47aa:	607a      	str	r2, [r7, #4]
    47ac:	72fb      	strb	r3, [r7, #11]
	((Gclk *)hw)->GENCTRL[index].reg = data;
    47ae:	7afa      	ldrb	r2, [r7, #11]
    47b0:	68fb      	ldr	r3, [r7, #12]
    47b2:	3208      	adds	r2, #8
    47b4:	6879      	ldr	r1, [r7, #4]
    47b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	hri_gclk_wait_for_sync(hw, GCLK_SYNCBUSY_MASK);
    47ba:	f643 71fd 	movw	r1, #16381	; 0x3ffd
    47be:	68f8      	ldr	r0, [r7, #12]
    47c0:	4b02      	ldr	r3, [pc, #8]	; (47cc <hri_gclk_write_GENCTRL_reg+0x2c>)
    47c2:	4798      	blx	r3
}
    47c4:	bf00      	nop
    47c6:	3710      	adds	r7, #16
    47c8:	46bd      	mov	sp, r7
    47ca:	bd80      	pop	{r7, pc}
    47cc:	0000477d 	.word	0x0000477d

000047d0 <_gclk_init_generators_by_fref>:
	        | (CONF_GCLK_GENERATOR_11_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_11_SOURCE);
#endif
}

void _gclk_init_generators_by_fref(uint32_t bm)
{
    47d0:	b580      	push	{r7, lr}
    47d2:	b082      	sub	sp, #8
    47d4:	af00      	add	r7, sp, #0
    47d6:	6078      	str	r0, [r7, #4]

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
    47d8:	687b      	ldr	r3, [r7, #4]
    47da:	f003 0301 	and.w	r3, r3, #1
    47de:	2b00      	cmp	r3, #0
    47e0:	d004      	beq.n	47ec <_gclk_init_generators_by_fref+0x1c>
		hri_gclk_write_GENCTRL_reg(
    47e2:	4a27      	ldr	r2, [pc, #156]	; (4880 <_gclk_init_generators_by_fref+0xb0>)
    47e4:	2100      	movs	r1, #0
    47e6:	4827      	ldr	r0, [pc, #156]	; (4884 <_gclk_init_generators_by_fref+0xb4>)
    47e8:	4b27      	ldr	r3, [pc, #156]	; (4888 <_gclk_init_generators_by_fref+0xb8>)
    47ea:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_0_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_0_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_1_CONFIG == 1
	if (bm & (1ul << 1)) {
    47ec:	687b      	ldr	r3, [r7, #4]
    47ee:	f003 0302 	and.w	r3, r3, #2
    47f2:	2b00      	cmp	r3, #0
    47f4:	d004      	beq.n	4800 <_gclk_init_generators_by_fref+0x30>
		hri_gclk_write_GENCTRL_reg(
    47f6:	4a25      	ldr	r2, [pc, #148]	; (488c <_gclk_init_generators_by_fref+0xbc>)
    47f8:	2101      	movs	r1, #1
    47fa:	4822      	ldr	r0, [pc, #136]	; (4884 <_gclk_init_generators_by_fref+0xb4>)
    47fc:	4b22      	ldr	r3, [pc, #136]	; (4888 <_gclk_init_generators_by_fref+0xb8>)
    47fe:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_1_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_1_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_2_CONFIG == 1
	if (bm & (1ul << 2)) {
    4800:	687b      	ldr	r3, [r7, #4]
    4802:	f003 0304 	and.w	r3, r3, #4
    4806:	2b00      	cmp	r3, #0
    4808:	d004      	beq.n	4814 <_gclk_init_generators_by_fref+0x44>
		hri_gclk_write_GENCTRL_reg(
    480a:	4a21      	ldr	r2, [pc, #132]	; (4890 <_gclk_init_generators_by_fref+0xc0>)
    480c:	2102      	movs	r1, #2
    480e:	481d      	ldr	r0, [pc, #116]	; (4884 <_gclk_init_generators_by_fref+0xb4>)
    4810:	4b1d      	ldr	r3, [pc, #116]	; (4888 <_gclk_init_generators_by_fref+0xb8>)
    4812:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_2_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_2_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_3_CONFIG == 1
	if (bm & (1ul << 3)) {
    4814:	687b      	ldr	r3, [r7, #4]
    4816:	f003 0308 	and.w	r3, r3, #8
    481a:	2b00      	cmp	r3, #0
    481c:	d004      	beq.n	4828 <_gclk_init_generators_by_fref+0x58>
		hri_gclk_write_GENCTRL_reg(
    481e:	4a1d      	ldr	r2, [pc, #116]	; (4894 <_gclk_init_generators_by_fref+0xc4>)
    4820:	2103      	movs	r1, #3
    4822:	4818      	ldr	r0, [pc, #96]	; (4884 <_gclk_init_generators_by_fref+0xb4>)
    4824:	4b18      	ldr	r3, [pc, #96]	; (4888 <_gclk_init_generators_by_fref+0xb8>)
    4826:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_3_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_3_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_4_CONFIG == 1
	if (bm & (1ul << 4)) {
    4828:	687b      	ldr	r3, [r7, #4]
    482a:	f003 0310 	and.w	r3, r3, #16
    482e:	2b00      	cmp	r3, #0
    4830:	d004      	beq.n	483c <_gclk_init_generators_by_fref+0x6c>
		hri_gclk_write_GENCTRL_reg(
    4832:	4a19      	ldr	r2, [pc, #100]	; (4898 <_gclk_init_generators_by_fref+0xc8>)
    4834:	2104      	movs	r1, #4
    4836:	4813      	ldr	r0, [pc, #76]	; (4884 <_gclk_init_generators_by_fref+0xb4>)
    4838:	4b13      	ldr	r3, [pc, #76]	; (4888 <_gclk_init_generators_by_fref+0xb8>)
    483a:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_4_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_4_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_5_CONFIG == 1
	if (bm & (1ul << 5)) {
    483c:	687b      	ldr	r3, [r7, #4]
    483e:	f003 0320 	and.w	r3, r3, #32
    4842:	2b00      	cmp	r3, #0
    4844:	d004      	beq.n	4850 <_gclk_init_generators_by_fref+0x80>
		hri_gclk_write_GENCTRL_reg(
    4846:	4a15      	ldr	r2, [pc, #84]	; (489c <_gclk_init_generators_by_fref+0xcc>)
    4848:	2105      	movs	r1, #5
    484a:	480e      	ldr	r0, [pc, #56]	; (4884 <_gclk_init_generators_by_fref+0xb4>)
    484c:	4b0e      	ldr	r3, [pc, #56]	; (4888 <_gclk_init_generators_by_fref+0xb8>)
    484e:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_9_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_9_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_10_CONFIG == 1
	if (bm & (1ul << 10)) {
    4850:	687b      	ldr	r3, [r7, #4]
    4852:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    4856:	2b00      	cmp	r3, #0
    4858:	d004      	beq.n	4864 <_gclk_init_generators_by_fref+0x94>
		hri_gclk_write_GENCTRL_reg(
    485a:	4a11      	ldr	r2, [pc, #68]	; (48a0 <_gclk_init_generators_by_fref+0xd0>)
    485c:	210a      	movs	r1, #10
    485e:	4809      	ldr	r0, [pc, #36]	; (4884 <_gclk_init_generators_by_fref+0xb4>)
    4860:	4b09      	ldr	r3, [pc, #36]	; (4888 <_gclk_init_generators_by_fref+0xb8>)
    4862:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_10_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_10_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_11_CONFIG == 1
	if (bm & (1ul << 11)) {
    4864:	687b      	ldr	r3, [r7, #4]
    4866:	f403 6300 	and.w	r3, r3, #2048	; 0x800
    486a:	2b00      	cmp	r3, #0
    486c:	d004      	beq.n	4878 <_gclk_init_generators_by_fref+0xa8>
		hri_gclk_write_GENCTRL_reg(
    486e:	4a0d      	ldr	r2, [pc, #52]	; (48a4 <_gclk_init_generators_by_fref+0xd4>)
    4870:	210b      	movs	r1, #11
    4872:	4804      	ldr	r0, [pc, #16]	; (4884 <_gclk_init_generators_by_fref+0xb4>)
    4874:	4b04      	ldr	r3, [pc, #16]	; (4888 <_gclk_init_generators_by_fref+0xb8>)
    4876:	4798      	blx	r3
		        | (CONF_GCLK_GEN_11_DIVSEL << GCLK_GENCTRL_DIVSEL_Pos) | (CONF_GCLK_GEN_11_OE << GCLK_GENCTRL_OE_Pos)
		        | (CONF_GCLK_GEN_11_OOV << GCLK_GENCTRL_OOV_Pos) | (CONF_GCLK_GEN_11_IDC << GCLK_GENCTRL_IDC_Pos)
		        | (CONF_GCLK_GENERATOR_11_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_11_SOURCE);
	}
#endif
}
    4878:	bf00      	nop
    487a:	3708      	adds	r7, #8
    487c:	46bd      	mov	sp, r7
    487e:	bd80      	pop	{r7, pc}
    4880:	00010107 	.word	0x00010107
    4884:	40001c00 	.word	0x40001c00
    4888:	000047a1 	.word	0x000047a1
    488c:	00010907 	.word	0x00010907
    4890:	00010906 	.word	0x00010906
    4894:	00020908 	.word	0x00020908
    4898:	00010901 	.word	0x00010901
    489c:	00062901 	.word	0x00062901
    48a0:	00010905 	.word	0x00010905
    48a4:	00041905 	.word	0x00041905

000048a8 <hri_mclk_write_CPUDIV_reg>:
{
    48a8:	b480      	push	{r7}
    48aa:	b083      	sub	sp, #12
    48ac:	af00      	add	r7, sp, #0
    48ae:	6078      	str	r0, [r7, #4]
    48b0:	460b      	mov	r3, r1
    48b2:	70fb      	strb	r3, [r7, #3]
	((Mclk *)hw)->CPUDIV.reg = data;
    48b4:	687b      	ldr	r3, [r7, #4]
    48b6:	78fa      	ldrb	r2, [r7, #3]
    48b8:	715a      	strb	r2, [r3, #5]
}
    48ba:	bf00      	nop
    48bc:	370c      	adds	r7, #12
    48be:	46bd      	mov	sp, r7
    48c0:	f85d 7b04 	ldr.w	r7, [sp], #4
    48c4:	4770      	bx	lr
	...

000048c8 <_mclk_init>:

/**
 * \brief Initialize master clock generator
 */
void _mclk_init(void)
{
    48c8:	b580      	push	{r7, lr}
    48ca:	b082      	sub	sp, #8
    48cc:	af00      	add	r7, sp, #0
	void *hw = (void *)MCLK;
    48ce:	4b05      	ldr	r3, [pc, #20]	; (48e4 <_mclk_init+0x1c>)
    48d0:	607b      	str	r3, [r7, #4]
	hri_mclk_write_CPUDIV_reg(hw, MCLK_CPUDIV_DIV(CONF_MCLK_CPUDIV));
    48d2:	2101      	movs	r1, #1
    48d4:	6878      	ldr	r0, [r7, #4]
    48d6:	4b04      	ldr	r3, [pc, #16]	; (48e8 <_mclk_init+0x20>)
    48d8:	4798      	blx	r3
}
    48da:	bf00      	nop
    48dc:	3708      	adds	r7, #8
    48de:	46bd      	mov	sp, r7
    48e0:	bd80      	pop	{r7, pc}
    48e2:	bf00      	nop
    48e4:	40000800 	.word	0x40000800
    48e8:	000048a9 	.word	0x000048a9

000048ec <hri_osc32kctrl_write_RTCCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_RTCCTRL_reg(const void *const hw, hri_osc32kctrl_rtcctrl_reg_t data)
{
    48ec:	b480      	push	{r7}
    48ee:	b083      	sub	sp, #12
    48f0:	af00      	add	r7, sp, #0
    48f2:	6078      	str	r0, [r7, #4]
    48f4:	460b      	mov	r3, r1
    48f6:	70fb      	strb	r3, [r7, #3]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
    48f8:	687b      	ldr	r3, [r7, #4]
    48fa:	78fa      	ldrb	r2, [r7, #3]
    48fc:	741a      	strb	r2, [r3, #16]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    48fe:	bf00      	nop
    4900:	370c      	adds	r7, #12
    4902:	46bd      	mov	sp, r7
    4904:	f85d 7b04 	ldr.w	r7, [sp], #4
    4908:	4770      	bx	lr

0000490a <hri_osc32kctrl_write_XOSC32K_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_XOSC32K_reg(const void *const hw, hri_osc32kctrl_xosc32k_reg_t data)
{
    490a:	b480      	push	{r7}
    490c:	b083      	sub	sp, #12
    490e:	af00      	add	r7, sp, #0
    4910:	6078      	str	r0, [r7, #4]
    4912:	460b      	mov	r3, r1
    4914:	807b      	strh	r3, [r7, #2]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->XOSC32K.reg = data;
    4916:	687b      	ldr	r3, [r7, #4]
    4918:	887a      	ldrh	r2, [r7, #2]
    491a:	829a      	strh	r2, [r3, #20]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    491c:	bf00      	nop
    491e:	370c      	adds	r7, #12
    4920:	46bd      	mov	sp, r7
    4922:	f85d 7b04 	ldr.w	r7, [sp], #4
    4926:	4770      	bx	lr

00004928 <hri_osc32kctrl_write_CFDCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_CFDCTRL_reg(const void *const hw, hri_osc32kctrl_cfdctrl_reg_t data)
{
    4928:	b480      	push	{r7}
    492a:	b083      	sub	sp, #12
    492c:	af00      	add	r7, sp, #0
    492e:	6078      	str	r0, [r7, #4]
    4930:	460b      	mov	r3, r1
    4932:	70fb      	strb	r3, [r7, #3]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->CFDCTRL.reg = data;
    4934:	687b      	ldr	r3, [r7, #4]
    4936:	78fa      	ldrb	r2, [r7, #3]
    4938:	759a      	strb	r2, [r3, #22]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    493a:	bf00      	nop
    493c:	370c      	adds	r7, #12
    493e:	46bd      	mov	sp, r7
    4940:	f85d 7b04 	ldr.w	r7, [sp], #4
    4944:	4770      	bx	lr

00004946 <hri_osc32kctrl_write_EVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_EVCTRL_reg(const void *const hw, hri_osc32kctrl_evctrl_reg_t data)
{
    4946:	b480      	push	{r7}
    4948:	b083      	sub	sp, #12
    494a:	af00      	add	r7, sp, #0
    494c:	6078      	str	r0, [r7, #4]
    494e:	460b      	mov	r3, r1
    4950:	70fb      	strb	r3, [r7, #3]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->EVCTRL.reg = data;
    4952:	687b      	ldr	r3, [r7, #4]
    4954:	78fa      	ldrb	r2, [r7, #3]
    4956:	75da      	strb	r2, [r3, #23]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    4958:	bf00      	nop
    495a:	370c      	adds	r7, #12
    495c:	46bd      	mov	sp, r7
    495e:	f85d 7b04 	ldr.w	r7, [sp], #4
    4962:	4770      	bx	lr

00004964 <hri_osc32kctrl_read_OSCULP32K_CALIB_bf>:
	((Osc32kctrl *)hw)->OSCULP32K.reg ^= OSC32KCTRL_OSCULP32K_CALIB(mask);
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}

static inline hri_osc32kctrl_osculp32k_reg_t hri_osc32kctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
    4964:	b480      	push	{r7}
    4966:	b085      	sub	sp, #20
    4968:	af00      	add	r7, sp, #0
    496a:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Osc32kctrl *)hw)->OSCULP32K.reg;
    496c:	687b      	ldr	r3, [r7, #4]
    496e:	69db      	ldr	r3, [r3, #28]
    4970:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & OSC32KCTRL_OSCULP32K_CALIB_Msk) >> OSC32KCTRL_OSCULP32K_CALIB_Pos;
    4972:	68fb      	ldr	r3, [r7, #12]
    4974:	0a1b      	lsrs	r3, r3, #8
    4976:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    497a:	60fb      	str	r3, [r7, #12]
	return tmp;
    497c:	68fb      	ldr	r3, [r7, #12]
}
    497e:	4618      	mov	r0, r3
    4980:	3714      	adds	r7, #20
    4982:	46bd      	mov	sp, r7
    4984:	f85d 7b04 	ldr.w	r7, [sp], #4
    4988:	4770      	bx	lr

0000498a <hri_osc32kctrl_write_OSCULP32K_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_OSCULP32K_reg(const void *const hw, hri_osc32kctrl_osculp32k_reg_t data)
{
    498a:	b480      	push	{r7}
    498c:	b083      	sub	sp, #12
    498e:	af00      	add	r7, sp, #0
    4990:	6078      	str	r0, [r7, #4]
    4992:	6039      	str	r1, [r7, #0]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->OSCULP32K.reg = data;
    4994:	687b      	ldr	r3, [r7, #4]
    4996:	683a      	ldr	r2, [r7, #0]
    4998:	61da      	str	r2, [r3, #28]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    499a:	bf00      	nop
    499c:	370c      	adds	r7, #12
    499e:	46bd      	mov	sp, r7
    49a0:	f85d 7b04 	ldr.w	r7, [sp], #4
    49a4:	4770      	bx	lr
	...

000049a8 <_osc32kctrl_init_sources>:

/**
 * \brief Initialize 32 kHz clock sources
 */
void _osc32kctrl_init_sources(void)
{
    49a8:	b580      	push	{r7, lr}
    49aa:	b082      	sub	sp, #8
    49ac:	af00      	add	r7, sp, #0
	void *   hw    = (void *)OSC32KCTRL;
    49ae:	4b13      	ldr	r3, [pc, #76]	; (49fc <_osc32kctrl_init_sources+0x54>)
    49b0:	607b      	str	r3, [r7, #4]
	uint16_t calib = 0;
    49b2:	2300      	movs	r3, #0
    49b4:	807b      	strh	r3, [r7, #2]

#if CONF_XOSC32K_CONFIG == 1
	hri_osc32kctrl_write_XOSC32K_reg(
    49b6:	f242 018e 	movw	r1, #8334	; 0x208e
    49ba:	6878      	ldr	r0, [r7, #4]
    49bc:	4b10      	ldr	r3, [pc, #64]	; (4a00 <_osc32kctrl_init_sources+0x58>)
    49be:	4798      	blx	r3
#ifdef CONF_XOSC32K_CGM
	        OSC32KCTRL_XOSC32K_CGM(CONF_XOSC32K_CGM) |
#endif
	        (CONF_XOSC32K_ENABLE << OSC32KCTRL_XOSC32K_ENABLE_Pos));

	hri_osc32kctrl_write_CFDCTRL_reg(hw, (CONF_XOSC32K_CFDEN << OSC32KCTRL_CFDCTRL_CFDEN_Pos));
    49c0:	2100      	movs	r1, #0
    49c2:	6878      	ldr	r0, [r7, #4]
    49c4:	4b0f      	ldr	r3, [pc, #60]	; (4a04 <_osc32kctrl_init_sources+0x5c>)
    49c6:	4798      	blx	r3

	hri_osc32kctrl_write_EVCTRL_reg(hw, (CONF_XOSC32K_CFDEO << OSC32KCTRL_EVCTRL_CFDEO_Pos));
    49c8:	2100      	movs	r1, #0
    49ca:	6878      	ldr	r0, [r7, #4]
    49cc:	4b0e      	ldr	r3, [pc, #56]	; (4a08 <_osc32kctrl_init_sources+0x60>)
    49ce:	4798      	blx	r3
#endif

#if CONF_OSCULP32K_CONFIG == 1
	calib = hri_osc32kctrl_read_OSCULP32K_CALIB_bf(hw);
    49d0:	6878      	ldr	r0, [r7, #4]
    49d2:	4b0e      	ldr	r3, [pc, #56]	; (4a0c <_osc32kctrl_init_sources+0x64>)
    49d4:	4798      	blx	r3
    49d6:	4603      	mov	r3, r0
    49d8:	807b      	strh	r3, [r7, #2]
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
#if CONF_OSCULP32K_CALIB_ENABLE == 1
	                                   OSC32KCTRL_OSCULP32K_CALIB(CONF_OSCULP32K_CALIB)
#else
	                                   OSC32KCTRL_OSCULP32K_CALIB(calib)
    49da:	887b      	ldrh	r3, [r7, #2]
    49dc:	021b      	lsls	r3, r3, #8
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
    49de:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
    49e2:	4619      	mov	r1, r3
    49e4:	6878      	ldr	r0, [r7, #4]
    49e6:	4b0a      	ldr	r3, [pc, #40]	; (4a10 <_osc32kctrl_init_sources+0x68>)
    49e8:	4798      	blx	r3
	while (!hri_osc32kctrl_get_STATUS_XOSC32KRDY_bit(hw))
		;
#endif
#endif

	hri_osc32kctrl_write_RTCCTRL_reg(hw, OSC32KCTRL_RTCCTRL_RTCSEL(CONF_RTCCTRL));
    49ea:	2100      	movs	r1, #0
    49ec:	6878      	ldr	r0, [r7, #4]
    49ee:	4b09      	ldr	r3, [pc, #36]	; (4a14 <_osc32kctrl_init_sources+0x6c>)
    49f0:	4798      	blx	r3
	(void)calib;
}
    49f2:	bf00      	nop
    49f4:	3708      	adds	r7, #8
    49f6:	46bd      	mov	sp, r7
    49f8:	bd80      	pop	{r7, pc}
    49fa:	bf00      	nop
    49fc:	40001400 	.word	0x40001400
    4a00:	0000490b 	.word	0x0000490b
    4a04:	00004929 	.word	0x00004929
    4a08:	00004947 	.word	0x00004947
    4a0c:	00004965 	.word	0x00004965
    4a10:	0000498b 	.word	0x0000498b
    4a14:	000048ed 	.word	0x000048ed

00004a18 <hri_gclk_wait_for_sync>:
{
    4a18:	b480      	push	{r7}
    4a1a:	b083      	sub	sp, #12
    4a1c:	af00      	add	r7, sp, #0
    4a1e:	6078      	str	r0, [r7, #4]
    4a20:	6039      	str	r1, [r7, #0]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    4a22:	bf00      	nop
    4a24:	687b      	ldr	r3, [r7, #4]
    4a26:	685a      	ldr	r2, [r3, #4]
    4a28:	683b      	ldr	r3, [r7, #0]
    4a2a:	4013      	ands	r3, r2
    4a2c:	2b00      	cmp	r3, #0
    4a2e:	d1f9      	bne.n	4a24 <hri_gclk_wait_for_sync+0xc>
}
    4a30:	bf00      	nop
    4a32:	370c      	adds	r7, #12
    4a34:	46bd      	mov	sp, r7
    4a36:	f85d 7b04 	ldr.w	r7, [sp], #4
    4a3a:	4770      	bx	lr

00004a3c <hri_gclk_get_SYNCBUSY_GENCTRL0_bit>:
{
    4a3c:	b480      	push	{r7}
    4a3e:	b083      	sub	sp, #12
    4a40:	af00      	add	r7, sp, #0
    4a42:	6078      	str	r0, [r7, #4]
	return (((Gclk *)hw)->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL0) >> GCLK_SYNCBUSY_GENCTRL0_Pos;
    4a44:	687b      	ldr	r3, [r7, #4]
    4a46:	685b      	ldr	r3, [r3, #4]
    4a48:	089b      	lsrs	r3, r3, #2
    4a4a:	f003 0301 	and.w	r3, r3, #1
    4a4e:	2b00      	cmp	r3, #0
    4a50:	bf14      	ite	ne
    4a52:	2301      	movne	r3, #1
    4a54:	2300      	moveq	r3, #0
    4a56:	b2db      	uxtb	r3, r3
}
    4a58:	4618      	mov	r0, r3
    4a5a:	370c      	adds	r7, #12
    4a5c:	46bd      	mov	sp, r7
    4a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
    4a62:	4770      	bx	lr

00004a64 <hri_gclk_read_SYNCBUSY_reg>:
{
    4a64:	b480      	push	{r7}
    4a66:	b083      	sub	sp, #12
    4a68:	af00      	add	r7, sp, #0
    4a6a:	6078      	str	r0, [r7, #4]
	return ((Gclk *)hw)->SYNCBUSY.reg;
    4a6c:	687b      	ldr	r3, [r7, #4]
    4a6e:	685b      	ldr	r3, [r3, #4]
}
    4a70:	4618      	mov	r0, r3
    4a72:	370c      	adds	r7, #12
    4a74:	46bd      	mov	sp, r7
    4a76:	f85d 7b04 	ldr.w	r7, [sp], #4
    4a7a:	4770      	bx	lr

00004a7c <hri_gclk_write_GENCTRL_SRC_bf>:
{
    4a7c:	b580      	push	{r7, lr}
    4a7e:	b086      	sub	sp, #24
    4a80:	af00      	add	r7, sp, #0
    4a82:	60f8      	str	r0, [r7, #12]
    4a84:	460b      	mov	r3, r1
    4a86:	607a      	str	r2, [r7, #4]
    4a88:	72fb      	strb	r3, [r7, #11]
	tmp = ((Gclk *)hw)->GENCTRL[index].reg;
    4a8a:	7afa      	ldrb	r2, [r7, #11]
    4a8c:	68fb      	ldr	r3, [r7, #12]
    4a8e:	3208      	adds	r2, #8
    4a90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    4a94:	617b      	str	r3, [r7, #20]
	tmp &= ~GCLK_GENCTRL_SRC_Msk;
    4a96:	697b      	ldr	r3, [r7, #20]
    4a98:	f023 030f 	bic.w	r3, r3, #15
    4a9c:	617b      	str	r3, [r7, #20]
	tmp |= GCLK_GENCTRL_SRC(data);
    4a9e:	687b      	ldr	r3, [r7, #4]
    4aa0:	f003 030f 	and.w	r3, r3, #15
    4aa4:	697a      	ldr	r2, [r7, #20]
    4aa6:	4313      	orrs	r3, r2
    4aa8:	617b      	str	r3, [r7, #20]
	((Gclk *)hw)->GENCTRL[index].reg = tmp;
    4aaa:	7afa      	ldrb	r2, [r7, #11]
    4aac:	68fb      	ldr	r3, [r7, #12]
    4aae:	3208      	adds	r2, #8
    4ab0:	6979      	ldr	r1, [r7, #20]
    4ab2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	hri_gclk_wait_for_sync(hw, GCLK_SYNCBUSY_MASK);
    4ab6:	f643 71fd 	movw	r1, #16381	; 0x3ffd
    4aba:	68f8      	ldr	r0, [r7, #12]
    4abc:	4b02      	ldr	r3, [pc, #8]	; (4ac8 <hri_gclk_write_GENCTRL_SRC_bf+0x4c>)
    4abe:	4798      	blx	r3
}
    4ac0:	bf00      	nop
    4ac2:	3718      	adds	r7, #24
    4ac4:	46bd      	mov	sp, r7
    4ac6:	bd80      	pop	{r7, pc}
    4ac8:	00004a19 	.word	0x00004a19

00004acc <hri_gclk_write_PCHCTRL_reg>:
{
    4acc:	b480      	push	{r7}
    4ace:	b085      	sub	sp, #20
    4ad0:	af00      	add	r7, sp, #0
    4ad2:	60f8      	str	r0, [r7, #12]
    4ad4:	460b      	mov	r3, r1
    4ad6:	607a      	str	r2, [r7, #4]
    4ad8:	72fb      	strb	r3, [r7, #11]
	((Gclk *)hw)->PCHCTRL[index].reg = data;
    4ada:	7afa      	ldrb	r2, [r7, #11]
    4adc:	68fb      	ldr	r3, [r7, #12]
    4ade:	3220      	adds	r2, #32
    4ae0:	6879      	ldr	r1, [r7, #4]
    4ae2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
    4ae6:	bf00      	nop
    4ae8:	3714      	adds	r7, #20
    4aea:	46bd      	mov	sp, r7
    4aec:	f85d 7b04 	ldr.w	r7, [sp], #4
    4af0:	4770      	bx	lr

00004af2 <hri_oscctrl_wait_for_sync>:
	return ((OscctrlDpll *)hw)->DPLLSYNCBUSY.reg & reg;
}

static inline void hri_oscctrl_wait_for_sync(const void *const hw, uint8_t submodule_index,
                                             hri_oscctrl_dpllsyncbusy_reg_t reg)
{
    4af2:	b480      	push	{r7}
    4af4:	b085      	sub	sp, #20
    4af6:	af00      	add	r7, sp, #0
    4af8:	60f8      	str	r0, [r7, #12]
    4afa:	460b      	mov	r3, r1
    4afc:	607a      	str	r2, [r7, #4]
    4afe:	72fb      	strb	r3, [r7, #11]
	while (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg & reg) {
    4b00:	bf00      	nop
    4b02:	7afa      	ldrb	r2, [r7, #11]
    4b04:	68f9      	ldr	r1, [r7, #12]
    4b06:	4613      	mov	r3, r2
    4b08:	009b      	lsls	r3, r3, #2
    4b0a:	4413      	add	r3, r2
    4b0c:	009b      	lsls	r3, r3, #2
    4b0e:	440b      	add	r3, r1
    4b10:	333c      	adds	r3, #60	; 0x3c
    4b12:	681a      	ldr	r2, [r3, #0]
    4b14:	687b      	ldr	r3, [r7, #4]
    4b16:	4013      	ands	r3, r2
    4b18:	2b00      	cmp	r3, #0
    4b1a:	d1f2      	bne.n	4b02 <hri_oscctrl_wait_for_sync+0x10>
	};
}
    4b1c:	bf00      	nop
    4b1e:	3714      	adds	r7, #20
    4b20:	46bd      	mov	sp, r7
    4b22:	f85d 7b04 	ldr.w	r7, [sp], #4
    4b26:	4770      	bx	lr

00004b28 <hri_oscctrl_get_DPLLSTATUS_LOCK_bit>:
{
	return ((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg;
}

static inline bool hri_oscctrl_get_DPLLSTATUS_LOCK_bit(const void *const hw, uint8_t submodule_index)
{
    4b28:	b480      	push	{r7}
    4b2a:	b083      	sub	sp, #12
    4b2c:	af00      	add	r7, sp, #0
    4b2e:	6078      	str	r0, [r7, #4]
    4b30:	460b      	mov	r3, r1
    4b32:	70fb      	strb	r3, [r7, #3]
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_LOCK)
    4b34:	78fa      	ldrb	r2, [r7, #3]
    4b36:	6879      	ldr	r1, [r7, #4]
    4b38:	4613      	mov	r3, r2
    4b3a:	009b      	lsls	r3, r3, #2
    4b3c:	4413      	add	r3, r2
    4b3e:	009b      	lsls	r3, r3, #2
    4b40:	440b      	add	r3, r1
    4b42:	3340      	adds	r3, #64	; 0x40
    4b44:	681b      	ldr	r3, [r3, #0]
	       >> OSCCTRL_DPLLSTATUS_LOCK_Pos;
    4b46:	f003 0301 	and.w	r3, r3, #1
    4b4a:	2b00      	cmp	r3, #0
    4b4c:	bf14      	ite	ne
    4b4e:	2301      	movne	r3, #1
    4b50:	2300      	moveq	r3, #0
    4b52:	b2db      	uxtb	r3, r3
}
    4b54:	4618      	mov	r0, r3
    4b56:	370c      	adds	r7, #12
    4b58:	46bd      	mov	sp, r7
    4b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
    4b5e:	4770      	bx	lr

00004b60 <hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit>:

static inline bool hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(const void *const hw, uint8_t submodule_index)
{
    4b60:	b480      	push	{r7}
    4b62:	b083      	sub	sp, #12
    4b64:	af00      	add	r7, sp, #0
    4b66:	6078      	str	r0, [r7, #4]
    4b68:	460b      	mov	r3, r1
    4b6a:	70fb      	strb	r3, [r7, #3]
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_CLKRDY)
    4b6c:	78fa      	ldrb	r2, [r7, #3]
    4b6e:	6879      	ldr	r1, [r7, #4]
    4b70:	4613      	mov	r3, r2
    4b72:	009b      	lsls	r3, r3, #2
    4b74:	4413      	add	r3, r2
    4b76:	009b      	lsls	r3, r3, #2
    4b78:	440b      	add	r3, r1
    4b7a:	3340      	adds	r3, #64	; 0x40
    4b7c:	681b      	ldr	r3, [r3, #0]
	       >> OSCCTRL_DPLLSTATUS_CLKRDY_Pos;
    4b7e:	085b      	lsrs	r3, r3, #1
    4b80:	f003 0301 	and.w	r3, r3, #1
    4b84:	2b00      	cmp	r3, #0
    4b86:	bf14      	ite	ne
    4b88:	2301      	movne	r3, #1
    4b8a:	2300      	moveq	r3, #0
    4b8c:	b2db      	uxtb	r3, r3
}
    4b8e:	4618      	mov	r0, r3
    4b90:	370c      	adds	r7, #12
    4b92:	46bd      	mov	sp, r7
    4b94:	f85d 7b04 	ldr.w	r7, [sp], #4
    4b98:	4770      	bx	lr
	...

00004b9c <hri_oscctrl_write_DPLLCTRLA_reg>:
	return tmp;
}

static inline void hri_oscctrl_write_DPLLCTRLA_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_oscctrl_dpllctrla_reg_t data)
{
    4b9c:	b580      	push	{r7, lr}
    4b9e:	b082      	sub	sp, #8
    4ba0:	af00      	add	r7, sp, #0
    4ba2:	6078      	str	r0, [r7, #4]
    4ba4:	460b      	mov	r3, r1
    4ba6:	70fb      	strb	r3, [r7, #3]
    4ba8:	4613      	mov	r3, r2
    4baa:	70bb      	strb	r3, [r7, #2]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLA.reg = data;
    4bac:	78fa      	ldrb	r2, [r7, #3]
    4bae:	6879      	ldr	r1, [r7, #4]
    4bb0:	4613      	mov	r3, r2
    4bb2:	009b      	lsls	r3, r3, #2
    4bb4:	4413      	add	r3, r2
    4bb6:	009b      	lsls	r3, r3, #2
    4bb8:	440b      	add	r3, r1
    4bba:	3330      	adds	r3, #48	; 0x30
    4bbc:	78ba      	ldrb	r2, [r7, #2]
    4bbe:	701a      	strb	r2, [r3, #0]
	hri_oscctrl_wait_for_sync(hw, submodule_index, OSCCTRL_DPLLSYNCBUSY_ENABLE);
    4bc0:	78fb      	ldrb	r3, [r7, #3]
    4bc2:	2202      	movs	r2, #2
    4bc4:	4619      	mov	r1, r3
    4bc6:	6878      	ldr	r0, [r7, #4]
    4bc8:	4b02      	ldr	r3, [pc, #8]	; (4bd4 <hri_oscctrl_write_DPLLCTRLA_reg+0x38>)
    4bca:	4798      	blx	r3
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    4bcc:	bf00      	nop
    4bce:	3708      	adds	r7, #8
    4bd0:	46bd      	mov	sp, r7
    4bd2:	bd80      	pop	{r7, pc}
    4bd4:	00004af3 	.word	0x00004af3

00004bd8 <hri_oscctrl_write_DPLLRATIO_reg>:
	return tmp;
}

static inline void hri_oscctrl_write_DPLLRATIO_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_oscctrl_dpllratio_reg_t data)
{
    4bd8:	b580      	push	{r7, lr}
    4bda:	b084      	sub	sp, #16
    4bdc:	af00      	add	r7, sp, #0
    4bde:	60f8      	str	r0, [r7, #12]
    4be0:	460b      	mov	r3, r1
    4be2:	607a      	str	r2, [r7, #4]
    4be4:	72fb      	strb	r3, [r7, #11]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLRATIO.reg = data;
    4be6:	7afa      	ldrb	r2, [r7, #11]
    4be8:	68f9      	ldr	r1, [r7, #12]
    4bea:	4613      	mov	r3, r2
    4bec:	009b      	lsls	r3, r3, #2
    4bee:	4413      	add	r3, r2
    4bf0:	009b      	lsls	r3, r3, #2
    4bf2:	440b      	add	r3, r1
    4bf4:	3334      	adds	r3, #52	; 0x34
    4bf6:	687a      	ldr	r2, [r7, #4]
    4bf8:	601a      	str	r2, [r3, #0]
	hri_oscctrl_wait_for_sync(hw, submodule_index, OSCCTRL_DPLLSYNCBUSY_MASK);
    4bfa:	7afb      	ldrb	r3, [r7, #11]
    4bfc:	2206      	movs	r2, #6
    4bfe:	4619      	mov	r1, r3
    4c00:	68f8      	ldr	r0, [r7, #12]
    4c02:	4b03      	ldr	r3, [pc, #12]	; (4c10 <hri_oscctrl_write_DPLLRATIO_reg+0x38>)
    4c04:	4798      	blx	r3
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    4c06:	bf00      	nop
    4c08:	3710      	adds	r7, #16
    4c0a:	46bd      	mov	sp, r7
    4c0c:	bd80      	pop	{r7, pc}
    4c0e:	bf00      	nop
    4c10:	00004af3 	.word	0x00004af3

00004c14 <hri_oscctrl_write_DPLLCTRLB_reg>:
	return tmp;
}

static inline void hri_oscctrl_write_DPLLCTRLB_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_oscctrl_dpllctrlb_reg_t data)
{
    4c14:	b480      	push	{r7}
    4c16:	b085      	sub	sp, #20
    4c18:	af00      	add	r7, sp, #0
    4c1a:	60f8      	str	r0, [r7, #12]
    4c1c:	460b      	mov	r3, r1
    4c1e:	607a      	str	r2, [r7, #4]
    4c20:	72fb      	strb	r3, [r7, #11]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLB.reg = data;
    4c22:	7afa      	ldrb	r2, [r7, #11]
    4c24:	68f9      	ldr	r1, [r7, #12]
    4c26:	4613      	mov	r3, r2
    4c28:	009b      	lsls	r3, r3, #2
    4c2a:	4413      	add	r3, r2
    4c2c:	009b      	lsls	r3, r3, #2
    4c2e:	440b      	add	r3, r1
    4c30:	3338      	adds	r3, #56	; 0x38
    4c32:	687a      	ldr	r2, [r7, #4]
    4c34:	601a      	str	r2, [r3, #0]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    4c36:	bf00      	nop
    4c38:	3714      	adds	r7, #20
    4c3a:	46bd      	mov	sp, r7
    4c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
    4c40:	4770      	bx	lr

00004c42 <hri_oscctrl_get_STATUS_XOSCRDY1_bit>:
{
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCRDY0) >> OSCCTRL_STATUS_XOSCRDY0_Pos;
}

static inline bool hri_oscctrl_get_STATUS_XOSCRDY1_bit(const void *const hw)
{
    4c42:	b480      	push	{r7}
    4c44:	b083      	sub	sp, #12
    4c46:	af00      	add	r7, sp, #0
    4c48:	6078      	str	r0, [r7, #4]
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCRDY1) >> OSCCTRL_STATUS_XOSCRDY1_Pos;
    4c4a:	687b      	ldr	r3, [r7, #4]
    4c4c:	691b      	ldr	r3, [r3, #16]
    4c4e:	085b      	lsrs	r3, r3, #1
    4c50:	f003 0301 	and.w	r3, r3, #1
    4c54:	2b00      	cmp	r3, #0
    4c56:	bf14      	ite	ne
    4c58:	2301      	movne	r3, #1
    4c5a:	2300      	moveq	r3, #0
    4c5c:	b2db      	uxtb	r3, r3
}
    4c5e:	4618      	mov	r0, r3
    4c60:	370c      	adds	r7, #12
    4c62:	46bd      	mov	sp, r7
    4c64:	f85d 7b04 	ldr.w	r7, [sp], #4
    4c68:	4770      	bx	lr

00004c6a <hri_oscctrl_get_STATUS_DFLLRDY_bit>:
{
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCCKSW1) >> OSCCTRL_STATUS_XOSCCKSW1_Pos;
}

static inline bool hri_oscctrl_get_STATUS_DFLLRDY_bit(const void *const hw)
{
    4c6a:	b480      	push	{r7}
    4c6c:	b083      	sub	sp, #12
    4c6e:	af00      	add	r7, sp, #0
    4c70:	6078      	str	r0, [r7, #4]
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_DFLLRDY) >> OSCCTRL_STATUS_DFLLRDY_Pos;
    4c72:	687b      	ldr	r3, [r7, #4]
    4c74:	691b      	ldr	r3, [r3, #16]
    4c76:	0a1b      	lsrs	r3, r3, #8
    4c78:	f003 0301 	and.w	r3, r3, #1
    4c7c:	2b00      	cmp	r3, #0
    4c7e:	bf14      	ite	ne
    4c80:	2301      	movne	r3, #1
    4c82:	2300      	moveq	r3, #0
    4c84:	b2db      	uxtb	r3, r3
}
    4c86:	4618      	mov	r0, r3
    4c88:	370c      	adds	r7, #12
    4c8a:	46bd      	mov	sp, r7
    4c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
    4c90:	4770      	bx	lr

00004c92 <hri_oscctrl_get_STATUS_reg>:
{
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_DPLL1LDRTO) >> OSCCTRL_STATUS_DPLL1LDRTO_Pos;
}

static inline hri_oscctrl_status_reg_t hri_oscctrl_get_STATUS_reg(const void *const hw, hri_oscctrl_status_reg_t mask)
{
    4c92:	b480      	push	{r7}
    4c94:	b085      	sub	sp, #20
    4c96:	af00      	add	r7, sp, #0
    4c98:	6078      	str	r0, [r7, #4]
    4c9a:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    4c9c:	687b      	ldr	r3, [r7, #4]
    4c9e:	691b      	ldr	r3, [r3, #16]
    4ca0:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    4ca2:	68fa      	ldr	r2, [r7, #12]
    4ca4:	683b      	ldr	r3, [r7, #0]
    4ca6:	4013      	ands	r3, r2
    4ca8:	60fb      	str	r3, [r7, #12]
	return tmp;
    4caa:	68fb      	ldr	r3, [r7, #12]
}
    4cac:	4618      	mov	r0, r3
    4cae:	3714      	adds	r7, #20
    4cb0:	46bd      	mov	sp, r7
    4cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
    4cb6:	4770      	bx	lr

00004cb8 <hri_oscctrl_write_XOSCCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_XOSCCTRL_reg(const void *const hw, uint8_t index, hri_oscctrl_xoscctrl_reg_t data)
{
    4cb8:	b480      	push	{r7}
    4cba:	b085      	sub	sp, #20
    4cbc:	af00      	add	r7, sp, #0
    4cbe:	60f8      	str	r0, [r7, #12]
    4cc0:	460b      	mov	r3, r1
    4cc2:	607a      	str	r2, [r7, #4]
    4cc4:	72fb      	strb	r3, [r7, #11]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->XOSCCTRL[index].reg = data;
    4cc6:	7afb      	ldrb	r3, [r7, #11]
    4cc8:	68fa      	ldr	r2, [r7, #12]
    4cca:	3304      	adds	r3, #4
    4ccc:	009b      	lsls	r3, r3, #2
    4cce:	4413      	add	r3, r2
    4cd0:	687a      	ldr	r2, [r7, #4]
    4cd2:	605a      	str	r2, [r3, #4]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    4cd4:	bf00      	nop
    4cd6:	3714      	adds	r7, #20
    4cd8:	46bd      	mov	sp, r7
    4cda:	f85d 7b04 	ldr.w	r7, [sp], #4
    4cde:	4770      	bx	lr

00004ce0 <hri_oscctrl_write_DFLLCTRLA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_DFLLCTRLA_reg(const void *const hw, hri_oscctrl_dfllctrla_reg_t data)
{
    4ce0:	b480      	push	{r7}
    4ce2:	b083      	sub	sp, #12
    4ce4:	af00      	add	r7, sp, #0
    4ce6:	6078      	str	r0, [r7, #4]
    4ce8:	460b      	mov	r3, r1
    4cea:	70fb      	strb	r3, [r7, #3]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLCTRLA.reg = data;
    4cec:	687b      	ldr	r3, [r7, #4]
    4cee:	78fa      	ldrb	r2, [r7, #3]
    4cf0:	771a      	strb	r2, [r3, #28]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    4cf2:	bf00      	nop
    4cf4:	370c      	adds	r7, #12
    4cf6:	46bd      	mov	sp, r7
    4cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
    4cfc:	4770      	bx	lr

00004cfe <hri_oscctrl_get_DFLLCTRLB_MODE_bit>:
	((Oscctrl *)hw)->DFLLCTRLB.reg |= OSCCTRL_DFLLCTRLB_MODE;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLCTRLB_MODE_bit(const void *const hw)
{
    4cfe:	b480      	push	{r7}
    4d00:	b085      	sub	sp, #20
    4d02:	af00      	add	r7, sp, #0
    4d04:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
    4d06:	687b      	ldr	r3, [r7, #4]
    4d08:	f893 3020 	ldrb.w	r3, [r3, #32]
    4d0c:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLCTRLB_MODE) >> OSCCTRL_DFLLCTRLB_MODE_Pos;
    4d0e:	7bfb      	ldrb	r3, [r7, #15]
    4d10:	f003 0301 	and.w	r3, r3, #1
    4d14:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    4d16:	7bfb      	ldrb	r3, [r7, #15]
    4d18:	2b00      	cmp	r3, #0
    4d1a:	bf14      	ite	ne
    4d1c:	2301      	movne	r3, #1
    4d1e:	2300      	moveq	r3, #0
    4d20:	b2db      	uxtb	r3, r3
}
    4d22:	4618      	mov	r0, r3
    4d24:	3714      	adds	r7, #20
    4d26:	46bd      	mov	sp, r7
    4d28:	f85d 7b04 	ldr.w	r7, [sp], #4
    4d2c:	4770      	bx	lr

00004d2e <hri_oscctrl_write_DFLLCTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_DFLLCTRLB_reg(const void *const hw, hri_oscctrl_dfllctrlb_reg_t data)
{
    4d2e:	b480      	push	{r7}
    4d30:	b083      	sub	sp, #12
    4d32:	af00      	add	r7, sp, #0
    4d34:	6078      	str	r0, [r7, #4]
    4d36:	460b      	mov	r3, r1
    4d38:	70fb      	strb	r3, [r7, #3]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLCTRLB.reg = data;
    4d3a:	687b      	ldr	r3, [r7, #4]
    4d3c:	78fa      	ldrb	r2, [r7, #3]
    4d3e:	f883 2020 	strb.w	r2, [r3, #32]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    4d42:	bf00      	nop
    4d44:	370c      	adds	r7, #12
    4d46:	46bd      	mov	sp, r7
    4d48:	f85d 7b04 	ldr.w	r7, [sp], #4
    4d4c:	4770      	bx	lr

00004d4e <hri_oscctrl_write_DFLLVAL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_DFLLVAL_reg(const void *const hw, hri_oscctrl_dfllval_reg_t data)
{
    4d4e:	b480      	push	{r7}
    4d50:	b083      	sub	sp, #12
    4d52:	af00      	add	r7, sp, #0
    4d54:	6078      	str	r0, [r7, #4]
    4d56:	6039      	str	r1, [r7, #0]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLVAL.reg = data;
    4d58:	687b      	ldr	r3, [r7, #4]
    4d5a:	683a      	ldr	r2, [r7, #0]
    4d5c:	625a      	str	r2, [r3, #36]	; 0x24
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    4d5e:	bf00      	nop
    4d60:	370c      	adds	r7, #12
    4d62:	46bd      	mov	sp, r7
    4d64:	f85d 7b04 	ldr.w	r7, [sp], #4
    4d68:	4770      	bx	lr

00004d6a <hri_oscctrl_read_DFLLVAL_reg>:
	((Oscctrl *)hw)->DFLLVAL.reg ^= mask;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline hri_oscctrl_dfllval_reg_t hri_oscctrl_read_DFLLVAL_reg(const void *const hw)
{
    4d6a:	b480      	push	{r7}
    4d6c:	b083      	sub	sp, #12
    4d6e:	af00      	add	r7, sp, #0
    4d70:	6078      	str	r0, [r7, #4]
	return ((Oscctrl *)hw)->DFLLVAL.reg;
    4d72:	687b      	ldr	r3, [r7, #4]
    4d74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
    4d76:	4618      	mov	r0, r3
    4d78:	370c      	adds	r7, #12
    4d7a:	46bd      	mov	sp, r7
    4d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
    4d80:	4770      	bx	lr

00004d82 <hri_oscctrl_write_DFLLMUL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_DFLLMUL_reg(const void *const hw, hri_oscctrl_dfllmul_reg_t data)
{
    4d82:	b480      	push	{r7}
    4d84:	b083      	sub	sp, #12
    4d86:	af00      	add	r7, sp, #0
    4d88:	6078      	str	r0, [r7, #4]
    4d8a:	6039      	str	r1, [r7, #0]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLMUL.reg = data;
    4d8c:	687b      	ldr	r3, [r7, #4]
    4d8e:	683a      	ldr	r2, [r7, #0]
    4d90:	629a      	str	r2, [r3, #40]	; 0x28
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    4d92:	bf00      	nop
    4d94:	370c      	adds	r7, #12
    4d96:	46bd      	mov	sp, r7
    4d98:	f85d 7b04 	ldr.w	r7, [sp], #4
    4d9c:	4770      	bx	lr

00004d9e <hri_oscctrl_get_DFLLSYNC_ENABLE_bit>:
	((Oscctrl *)hw)->DFLLSYNC.reg |= OSCCTRL_DFLLSYNC_ENABLE;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLSYNC_ENABLE_bit(const void *const hw)
{
    4d9e:	b480      	push	{r7}
    4da0:	b085      	sub	sp, #20
    4da2:	af00      	add	r7, sp, #0
    4da4:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    4da6:	687b      	ldr	r3, [r7, #4]
    4da8:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    4dac:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLSYNC_ENABLE) >> OSCCTRL_DFLLSYNC_ENABLE_Pos;
    4dae:	7bfb      	ldrb	r3, [r7, #15]
    4db0:	085b      	lsrs	r3, r3, #1
    4db2:	b2db      	uxtb	r3, r3
    4db4:	f003 0301 	and.w	r3, r3, #1
    4db8:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    4dba:	7bfb      	ldrb	r3, [r7, #15]
    4dbc:	2b00      	cmp	r3, #0
    4dbe:	bf14      	ite	ne
    4dc0:	2301      	movne	r3, #1
    4dc2:	2300      	moveq	r3, #0
    4dc4:	b2db      	uxtb	r3, r3
}
    4dc6:	4618      	mov	r0, r3
    4dc8:	3714      	adds	r7, #20
    4dca:	46bd      	mov	sp, r7
    4dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
    4dd0:	4770      	bx	lr

00004dd2 <hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit>:
	((Oscctrl *)hw)->DFLLSYNC.reg |= OSCCTRL_DFLLSYNC_DFLLCTRLB;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(const void *const hw)
{
    4dd2:	b480      	push	{r7}
    4dd4:	b085      	sub	sp, #20
    4dd6:	af00      	add	r7, sp, #0
    4dd8:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    4dda:	687b      	ldr	r3, [r7, #4]
    4ddc:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    4de0:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLSYNC_DFLLCTRLB) >> OSCCTRL_DFLLSYNC_DFLLCTRLB_Pos;
    4de2:	7bfb      	ldrb	r3, [r7, #15]
    4de4:	089b      	lsrs	r3, r3, #2
    4de6:	b2db      	uxtb	r3, r3
    4de8:	f003 0301 	and.w	r3, r3, #1
    4dec:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    4dee:	7bfb      	ldrb	r3, [r7, #15]
    4df0:	2b00      	cmp	r3, #0
    4df2:	bf14      	ite	ne
    4df4:	2301      	movne	r3, #1
    4df6:	2300      	moveq	r3, #0
    4df8:	b2db      	uxtb	r3, r3
}
    4dfa:	4618      	mov	r0, r3
    4dfc:	3714      	adds	r7, #20
    4dfe:	46bd      	mov	sp, r7
    4e00:	f85d 7b04 	ldr.w	r7, [sp], #4
    4e04:	4770      	bx	lr

00004e06 <hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit>:
	((Oscctrl *)hw)->DFLLSYNC.reg |= OSCCTRL_DFLLSYNC_DFLLVAL;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit(const void *const hw)
{
    4e06:	b480      	push	{r7}
    4e08:	b085      	sub	sp, #20
    4e0a:	af00      	add	r7, sp, #0
    4e0c:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    4e0e:	687b      	ldr	r3, [r7, #4]
    4e10:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    4e14:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLSYNC_DFLLVAL) >> OSCCTRL_DFLLSYNC_DFLLVAL_Pos;
    4e16:	7bfb      	ldrb	r3, [r7, #15]
    4e18:	08db      	lsrs	r3, r3, #3
    4e1a:	b2db      	uxtb	r3, r3
    4e1c:	f003 0301 	and.w	r3, r3, #1
    4e20:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    4e22:	7bfb      	ldrb	r3, [r7, #15]
    4e24:	2b00      	cmp	r3, #0
    4e26:	bf14      	ite	ne
    4e28:	2301      	movne	r3, #1
    4e2a:	2300      	moveq	r3, #0
    4e2c:	b2db      	uxtb	r3, r3
}
    4e2e:	4618      	mov	r0, r3
    4e30:	3714      	adds	r7, #20
    4e32:	46bd      	mov	sp, r7
    4e34:	f85d 7b04 	ldr.w	r7, [sp], #4
    4e38:	4770      	bx	lr

00004e3a <hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit>:
	((Oscctrl *)hw)->DFLLSYNC.reg |= OSCCTRL_DFLLSYNC_DFLLMUL;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(const void *const hw)
{
    4e3a:	b480      	push	{r7}
    4e3c:	b085      	sub	sp, #20
    4e3e:	af00      	add	r7, sp, #0
    4e40:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    4e42:	687b      	ldr	r3, [r7, #4]
    4e44:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    4e48:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLSYNC_DFLLMUL) >> OSCCTRL_DFLLSYNC_DFLLMUL_Pos;
    4e4a:	7bfb      	ldrb	r3, [r7, #15]
    4e4c:	091b      	lsrs	r3, r3, #4
    4e4e:	b2db      	uxtb	r3, r3
    4e50:	f003 0301 	and.w	r3, r3, #1
    4e54:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    4e56:	7bfb      	ldrb	r3, [r7, #15]
    4e58:	2b00      	cmp	r3, #0
    4e5a:	bf14      	ite	ne
    4e5c:	2301      	movne	r3, #1
    4e5e:	2300      	moveq	r3, #0
    4e60:	b2db      	uxtb	r3, r3
}
    4e62:	4618      	mov	r0, r3
    4e64:	3714      	adds	r7, #20
    4e66:	46bd      	mov	sp, r7
    4e68:	f85d 7b04 	ldr.w	r7, [sp], #4
    4e6c:	4770      	bx	lr
	...

00004e70 <_oscctrl_init_sources>:

/**
 * \brief Initialize clock sources
 */
void _oscctrl_init_sources(void)
{
    4e70:	b580      	push	{r7, lr}
    4e72:	b082      	sub	sp, #8
    4e74:	af00      	add	r7, sp, #0
	void *hw = (void *)OSCCTRL;
    4e76:	4b0a      	ldr	r3, [pc, #40]	; (4ea0 <_oscctrl_init_sources+0x30>)
    4e78:	607b      	str	r3, [r7, #4]
	hri_oscctrl_set_XOSCCTRL_ONDEMAND_bit(hw, 0);
#endif
#endif

#if CONF_XOSC1_CONFIG == 1
	hri_oscctrl_write_XOSCCTRL_reg(
    4e7a:	4a0a      	ldr	r2, [pc, #40]	; (4ea4 <_oscctrl_init_sources+0x34>)
    4e7c:	2101      	movs	r1, #1
    4e7e:	6878      	ldr	r0, [r7, #4]
    4e80:	4b09      	ldr	r3, [pc, #36]	; (4ea8 <_oscctrl_init_sources+0x38>)
    4e82:	4798      	blx	r3
	        | (CONF_XOSC1_XTALEN << OSCCTRL_XOSCCTRL_XTALEN_Pos) | (CONF_XOSC1_ENABLE << OSCCTRL_XOSCCTRL_ENABLE_Pos));
#endif

#if CONF_XOSC1_CONFIG == 1
#if CONF_XOSC1_ENABLE == 1
	while (!hri_oscctrl_get_STATUS_XOSCRDY1_bit(hw))
    4e84:	bf00      	nop
    4e86:	6878      	ldr	r0, [r7, #4]
    4e88:	4b08      	ldr	r3, [pc, #32]	; (4eac <_oscctrl_init_sources+0x3c>)
    4e8a:	4798      	blx	r3
    4e8c:	4603      	mov	r3, r0
    4e8e:	f083 0301 	eor.w	r3, r3, #1
    4e92:	b2db      	uxtb	r3, r3
    4e94:	2b00      	cmp	r3, #0
    4e96:	d1f6      	bne.n	4e86 <_oscctrl_init_sources+0x16>
	hri_oscctrl_set_XOSCCTRL_ONDEMAND_bit(hw, 1);
#endif
#endif

	(void)hw;
}
    4e98:	bf00      	nop
    4e9a:	3708      	adds	r7, #8
    4e9c:	46bd      	mov	sp, r7
    4e9e:	bd80      	pop	{r7, pc}
    4ea0:	40001000 	.word	0x40001000
    4ea4:	03002606 	.word	0x03002606
    4ea8:	00004cb9 	.word	0x00004cb9
    4eac:	00004c43 	.word	0x00004c43

00004eb0 <_oscctrl_init_referenced_generators>:

void _oscctrl_init_referenced_generators(void)
{
    4eb0:	b580      	push	{r7, lr}
    4eb2:	b084      	sub	sp, #16
    4eb4:	af00      	add	r7, sp, #0
	void *hw = (void *)OSCCTRL;
    4eb6:	4b6b      	ldr	r3, [pc, #428]	; (5064 <_oscctrl_init_referenced_generators+0x1b4>)
    4eb8:	60fb      	str	r3, [r7, #12]

#if CONF_DFLL_CONFIG == 1
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, GCLK_GENCTRL_SRC_OSCULP32K);
    4eba:	2204      	movs	r2, #4
    4ebc:	2100      	movs	r1, #0
    4ebe:	486a      	ldr	r0, [pc, #424]	; (5068 <_oscctrl_init_referenced_generators+0x1b8>)
    4ec0:	4b6a      	ldr	r3, [pc, #424]	; (506c <_oscctrl_init_referenced_generators+0x1bc>)
    4ec2:	4798      	blx	r3
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
    4ec4:	bf00      	nop
    4ec6:	4868      	ldr	r0, [pc, #416]	; (5068 <_oscctrl_init_referenced_generators+0x1b8>)
    4ec8:	4b69      	ldr	r3, [pc, #420]	; (5070 <_oscctrl_init_referenced_generators+0x1c0>)
    4eca:	4798      	blx	r3
    4ecc:	4603      	mov	r3, r0
    4ece:	2b00      	cmp	r3, #0
    4ed0:	d1f9      	bne.n	4ec6 <_oscctrl_init_referenced_generators+0x16>
		;
	uint8_t tmp;
	hri_oscctrl_write_DFLLCTRLA_reg(hw, 0);
    4ed2:	2100      	movs	r1, #0
    4ed4:	68f8      	ldr	r0, [r7, #12]
    4ed6:	4b67      	ldr	r3, [pc, #412]	; (5074 <_oscctrl_init_referenced_generators+0x1c4>)
    4ed8:	4798      	blx	r3
#if CONF_DFLL_USBCRM != 1 && CONF_DFLL_MODE != 0
	hri_gclk_write_PCHCTRL_reg(
	    GCLK, OSCCTRL_GCLK_ID_DFLL48, (1 << GCLK_PCHCTRL_CHEN_Pos) | GCLK_PCHCTRL_GEN(CONF_DFLL_GCLK));
#endif

	hri_oscctrl_write_DFLLMUL_reg(hw,
    4eda:	4967      	ldr	r1, [pc, #412]	; (5078 <_oscctrl_init_referenced_generators+0x1c8>)
    4edc:	68f8      	ldr	r0, [r7, #12]
    4ede:	4b67      	ldr	r3, [pc, #412]	; (507c <_oscctrl_init_referenced_generators+0x1cc>)
    4ee0:	4798      	blx	r3
	                              OSCCTRL_DFLLMUL_CSTEP(CONF_DFLL_CSTEP) | OSCCTRL_DFLLMUL_FSTEP(CONF_DFLL_FSTEP)
	                                  | OSCCTRL_DFLLMUL_MUL(CONF_DFLL_MUL));
	while (hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(hw))
    4ee2:	bf00      	nop
    4ee4:	68f8      	ldr	r0, [r7, #12]
    4ee6:	4b66      	ldr	r3, [pc, #408]	; (5080 <_oscctrl_init_referenced_generators+0x1d0>)
    4ee8:	4798      	blx	r3
    4eea:	4603      	mov	r3, r0
    4eec:	2b00      	cmp	r3, #0
    4eee:	d1f9      	bne.n	4ee4 <_oscctrl_init_referenced_generators+0x34>
		;

	hri_oscctrl_write_DFLLCTRLB_reg(hw, 0);
    4ef0:	2100      	movs	r1, #0
    4ef2:	68f8      	ldr	r0, [r7, #12]
    4ef4:	4b63      	ldr	r3, [pc, #396]	; (5084 <_oscctrl_init_referenced_generators+0x1d4>)
    4ef6:	4798      	blx	r3
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    4ef8:	bf00      	nop
    4efa:	68f8      	ldr	r0, [r7, #12]
    4efc:	4b62      	ldr	r3, [pc, #392]	; (5088 <_oscctrl_init_referenced_generators+0x1d8>)
    4efe:	4798      	blx	r3
    4f00:	4603      	mov	r3, r0
    4f02:	2b00      	cmp	r3, #0
    4f04:	d1f9      	bne.n	4efa <_oscctrl_init_referenced_generators+0x4a>
		;

	tmp = (CONF_DFLL_RUNSTDBY << OSCCTRL_DFLLCTRLA_RUNSTDBY_Pos) | OSCCTRL_DFLLCTRLA_ENABLE;
    4f06:	2302      	movs	r3, #2
    4f08:	72fb      	strb	r3, [r7, #11]
	hri_oscctrl_write_DFLLCTRLA_reg(hw, tmp);
    4f0a:	7afb      	ldrb	r3, [r7, #11]
    4f0c:	4619      	mov	r1, r3
    4f0e:	68f8      	ldr	r0, [r7, #12]
    4f10:	4b58      	ldr	r3, [pc, #352]	; (5074 <_oscctrl_init_referenced_generators+0x1c4>)
    4f12:	4798      	blx	r3
	while (hri_oscctrl_get_DFLLSYNC_ENABLE_bit(hw))
    4f14:	bf00      	nop
    4f16:	68f8      	ldr	r0, [r7, #12]
    4f18:	4b5c      	ldr	r3, [pc, #368]	; (508c <_oscctrl_init_referenced_generators+0x1dc>)
    4f1a:	4798      	blx	r3
    4f1c:	4603      	mov	r3, r0
    4f1e:	2b00      	cmp	r3, #0
    4f20:	d1f9      	bne.n	4f16 <_oscctrl_init_referenced_generators+0x66>
		;

#if CONF_DFLL_OVERWRITE_CALIBRATION == 1
	hri_oscctrl_write_DFLLVAL_reg(hw, OSCCTRL_DFLLVAL_COARSE(CONF_DFLL_COARSE) | OSCCTRL_DFLLVAL_FINE(CONF_DFLL_FINE));
#endif
	hri_oscctrl_write_DFLLVAL_reg(hw, hri_oscctrl_read_DFLLVAL_reg(hw));
    4f22:	68f8      	ldr	r0, [r7, #12]
    4f24:	4b5a      	ldr	r3, [pc, #360]	; (5090 <_oscctrl_init_referenced_generators+0x1e0>)
    4f26:	4798      	blx	r3
    4f28:	4603      	mov	r3, r0
    4f2a:	4619      	mov	r1, r3
    4f2c:	68f8      	ldr	r0, [r7, #12]
    4f2e:	4b59      	ldr	r3, [pc, #356]	; (5094 <_oscctrl_init_referenced_generators+0x1e4>)
    4f30:	4798      	blx	r3
	while (hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit(hw))
    4f32:	bf00      	nop
    4f34:	68f8      	ldr	r0, [r7, #12]
    4f36:	4b58      	ldr	r3, [pc, #352]	; (5098 <_oscctrl_init_referenced_generators+0x1e8>)
    4f38:	4798      	blx	r3
    4f3a:	4603      	mov	r3, r0
    4f3c:	2b00      	cmp	r3, #0
    4f3e:	d1f9      	bne.n	4f34 <_oscctrl_init_referenced_generators+0x84>
		;

	tmp = (CONF_DFLL_WAITLOCK << OSCCTRL_DFLLCTRLB_WAITLOCK_Pos) | (CONF_DFLL_BPLCKC << OSCCTRL_DFLLCTRLB_BPLCKC_Pos)
    4f40:	2319      	movs	r3, #25
    4f42:	72fb      	strb	r3, [r7, #11]
	      | (CONF_DFLL_QLDIS << OSCCTRL_DFLLCTRLB_QLDIS_Pos) | (CONF_DFLL_CCDIS << OSCCTRL_DFLLCTRLB_CCDIS_Pos)
	      | (CONF_DFLL_USBCRM << OSCCTRL_DFLLCTRLB_USBCRM_Pos) | (CONF_DFLL_LLAW << OSCCTRL_DFLLCTRLB_LLAW_Pos)
	      | (CONF_DFLL_STABLE << OSCCTRL_DFLLCTRLB_STABLE_Pos) | (CONF_DFLL_MODE << OSCCTRL_DFLLCTRLB_MODE_Pos) | 0;
	hri_oscctrl_write_DFLLCTRLB_reg(hw, tmp);
    4f44:	7afb      	ldrb	r3, [r7, #11]
    4f46:	4619      	mov	r1, r3
    4f48:	68f8      	ldr	r0, [r7, #12]
    4f4a:	4b4e      	ldr	r3, [pc, #312]	; (5084 <_oscctrl_init_referenced_generators+0x1d4>)
    4f4c:	4798      	blx	r3
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    4f4e:	bf00      	nop
    4f50:	68f8      	ldr	r0, [r7, #12]
    4f52:	4b4d      	ldr	r3, [pc, #308]	; (5088 <_oscctrl_init_referenced_generators+0x1d8>)
    4f54:	4798      	blx	r3
    4f56:	4603      	mov	r3, r0
    4f58:	2b00      	cmp	r3, #0
    4f5a:	d1f9      	bne.n	4f50 <_oscctrl_init_referenced_generators+0xa0>
		;
#endif

#if CONF_FDPLL0_CONFIG == 1
#if CONF_FDPLL0_REFCLK == 0
	hri_gclk_write_PCHCTRL_reg(
    4f5c:	2245      	movs	r2, #69	; 0x45
    4f5e:	2101      	movs	r1, #1
    4f60:	4841      	ldr	r0, [pc, #260]	; (5068 <_oscctrl_init_referenced_generators+0x1b8>)
    4f62:	4b4e      	ldr	r3, [pc, #312]	; (509c <_oscctrl_init_referenced_generators+0x1ec>)
    4f64:	4798      	blx	r3
	    GCLK, OSCCTRL_GCLK_ID_FDPLL0, (1 << GCLK_PCHCTRL_CHEN_Pos) | GCLK_PCHCTRL_GEN(CONF_FDPLL0_GCLK));
#endif
	hri_oscctrl_write_DPLLRATIO_reg(
    4f66:	223b      	movs	r2, #59	; 0x3b
    4f68:	2100      	movs	r1, #0
    4f6a:	68f8      	ldr	r0, [r7, #12]
    4f6c:	4b4c      	ldr	r3, [pc, #304]	; (50a0 <_oscctrl_init_referenced_generators+0x1f0>)
    4f6e:	4798      	blx	r3
	    hw, 0, OSCCTRL_DPLLRATIO_LDRFRAC(CONF_FDPLL0_LDRFRAC) | OSCCTRL_DPLLRATIO_LDR(CONF_FDPLL0_LDR));
	hri_oscctrl_write_DPLLCTRLB_reg(
    4f70:	f44f 6201 	mov.w	r2, #2064	; 0x810
    4f74:	2100      	movs	r1, #0
    4f76:	68f8      	ldr	r0, [r7, #12]
    4f78:	4b4a      	ldr	r3, [pc, #296]	; (50a4 <_oscctrl_init_referenced_generators+0x1f4>)
    4f7a:	4798      	blx	r3
	    OSCCTRL_DPLLCTRLB_DIV(CONF_FDPLL0_DIV) | (CONF_FDPLL0_DCOEN << OSCCTRL_DPLLCTRLB_DCOEN_Pos)
	        | OSCCTRL_DPLLCTRLB_DCOFILTER(CONF_FDPLL0_DCOFILTER)
	        | (CONF_FDPLL0_LBYPASS << OSCCTRL_DPLLCTRLB_LBYPASS_Pos) | OSCCTRL_DPLLCTRLB_LTIME(CONF_FDPLL0_LTIME)
	        | OSCCTRL_DPLLCTRLB_REFCLK(CONF_FDPLL0_REFCLK) | (CONF_FDPLL0_WUF << OSCCTRL_DPLLCTRLB_WUF_Pos)
	        | OSCCTRL_DPLLCTRLB_FILTER(CONF_FDPLL0_FILTER));
	hri_oscctrl_write_DPLLCTRLA_reg(hw,
    4f7c:	2242      	movs	r2, #66	; 0x42
    4f7e:	2100      	movs	r1, #0
    4f80:	68f8      	ldr	r0, [r7, #12]
    4f82:	4b49      	ldr	r3, [pc, #292]	; (50a8 <_oscctrl_init_referenced_generators+0x1f8>)
    4f84:	4798      	blx	r3
#if CONF_FDPLL1_CONFIG == 1
#if CONF_FDPLL1_REFCLK == 0
	hri_gclk_write_PCHCTRL_reg(
	    GCLK, OSCCTRL_GCLK_ID_FDPLL1, (1 << GCLK_PCHCTRL_CHEN_Pos) | GCLK_PCHCTRL_GEN(CONF_FDPLL1_GCLK));
#endif
	hri_oscctrl_write_DPLLRATIO_reg(
    4f86:	4a49      	ldr	r2, [pc, #292]	; (50ac <_oscctrl_init_referenced_generators+0x1fc>)
    4f88:	2101      	movs	r1, #1
    4f8a:	68f8      	ldr	r0, [r7, #12]
    4f8c:	4b44      	ldr	r3, [pc, #272]	; (50a0 <_oscctrl_init_referenced_generators+0x1f0>)
    4f8e:	4798      	blx	r3
	    hw, 1, OSCCTRL_DPLLRATIO_LDRFRAC(CONF_FDPLL1_LDRFRAC) | OSCCTRL_DPLLRATIO_LDR(CONF_FDPLL1_LDR));
	hri_oscctrl_write_DPLLCTRLB_reg(
    4f90:	f44f 6203 	mov.w	r2, #2096	; 0x830
    4f94:	2101      	movs	r1, #1
    4f96:	68f8      	ldr	r0, [r7, #12]
    4f98:	4b42      	ldr	r3, [pc, #264]	; (50a4 <_oscctrl_init_referenced_generators+0x1f4>)
    4f9a:	4798      	blx	r3
	    OSCCTRL_DPLLCTRLB_DIV(CONF_FDPLL1_DIV) | (CONF_FDPLL1_DCOEN << OSCCTRL_DPLLCTRLB_DCOEN_Pos)
	        | OSCCTRL_DPLLCTRLB_DCOFILTER(CONF_FDPLL1_DCOFILTER)
	        | (CONF_FDPLL1_LBYPASS << OSCCTRL_DPLLCTRLB_LBYPASS_Pos) | OSCCTRL_DPLLCTRLB_LTIME(CONF_FDPLL1_LTIME)
	        | OSCCTRL_DPLLCTRLB_REFCLK(CONF_FDPLL1_REFCLK) | (CONF_FDPLL1_WUF << OSCCTRL_DPLLCTRLB_WUF_Pos)
	        | OSCCTRL_DPLLCTRLB_FILTER(CONF_FDPLL1_FILTER));
	hri_oscctrl_write_DPLLCTRLA_reg(hw,
    4f9c:	2202      	movs	r2, #2
    4f9e:	2101      	movs	r1, #1
    4fa0:	68f8      	ldr	r0, [r7, #12]
    4fa2:	4b41      	ldr	r3, [pc, #260]	; (50a8 <_oscctrl_init_referenced_generators+0x1f8>)
    4fa4:	4798      	blx	r3
	                                (CONF_FDPLL1_RUNSTDBY << OSCCTRL_DPLLCTRLA_RUNSTDBY_Pos)
	                                    | (CONF_FDPLL1_ENABLE << OSCCTRL_DPLLCTRLA_ENABLE_Pos));
#endif

#if CONF_DFLL_CONFIG == 1
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(hw)) {
    4fa6:	68f8      	ldr	r0, [r7, #12]
    4fa8:	4b41      	ldr	r3, [pc, #260]	; (50b0 <_oscctrl_init_referenced_generators+0x200>)
    4faa:	4798      	blx	r3
    4fac:	4603      	mov	r3, r0
    4fae:	2b00      	cmp	r3, #0
    4fb0:	d00c      	beq.n	4fcc <_oscctrl_init_referenced_generators+0x11c>
		hri_oscctrl_status_reg_t status_mask = OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC;
    4fb2:	f44f 6310 	mov.w	r3, #2304	; 0x900
    4fb6:	607b      	str	r3, [r7, #4]

		while (hri_oscctrl_get_STATUS_reg(hw, status_mask) != status_mask)
    4fb8:	bf00      	nop
    4fba:	6879      	ldr	r1, [r7, #4]
    4fbc:	68f8      	ldr	r0, [r7, #12]
    4fbe:	4b3d      	ldr	r3, [pc, #244]	; (50b4 <_oscctrl_init_referenced_generators+0x204>)
    4fc0:	4798      	blx	r3
    4fc2:	4602      	mov	r2, r0
    4fc4:	687b      	ldr	r3, [r7, #4]
    4fc6:	429a      	cmp	r2, r3
    4fc8:	d1f7      	bne.n	4fba <_oscctrl_init_referenced_generators+0x10a>
    4fca:	e009      	b.n	4fe0 <_oscctrl_init_referenced_generators+0x130>
			;
	} else {
		while (!hri_oscctrl_get_STATUS_DFLLRDY_bit(hw))
    4fcc:	bf00      	nop
    4fce:	68f8      	ldr	r0, [r7, #12]
    4fd0:	4b39      	ldr	r3, [pc, #228]	; (50b8 <_oscctrl_init_referenced_generators+0x208>)
    4fd2:	4798      	blx	r3
    4fd4:	4603      	mov	r3, r0
    4fd6:	f083 0301 	eor.w	r3, r3, #1
    4fda:	b2db      	uxtb	r3, r3
    4fdc:	2b00      	cmp	r3, #0
    4fde:	d1f6      	bne.n	4fce <_oscctrl_init_referenced_generators+0x11e>
#endif
#endif

#if CONF_FDPLL0_CONFIG == 1
#if CONF_FDPLL0_ENABLE == 1
	while (!(hri_oscctrl_get_DPLLSTATUS_LOCK_bit(hw, 0) || hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(hw, 0)))
    4fe0:	bf00      	nop
    4fe2:	2100      	movs	r1, #0
    4fe4:	68f8      	ldr	r0, [r7, #12]
    4fe6:	4b35      	ldr	r3, [pc, #212]	; (50bc <_oscctrl_init_referenced_generators+0x20c>)
    4fe8:	4798      	blx	r3
    4fea:	4603      	mov	r3, r0
    4fec:	f083 0301 	eor.w	r3, r3, #1
    4ff0:	b2db      	uxtb	r3, r3
    4ff2:	2b00      	cmp	r3, #0
    4ff4:	d009      	beq.n	500a <_oscctrl_init_referenced_generators+0x15a>
    4ff6:	2100      	movs	r1, #0
    4ff8:	68f8      	ldr	r0, [r7, #12]
    4ffa:	4b31      	ldr	r3, [pc, #196]	; (50c0 <_oscctrl_init_referenced_generators+0x210>)
    4ffc:	4798      	blx	r3
    4ffe:	4603      	mov	r3, r0
    5000:	f083 0301 	eor.w	r3, r3, #1
    5004:	b2db      	uxtb	r3, r3
    5006:	2b00      	cmp	r3, #0
    5008:	d1eb      	bne.n	4fe2 <_oscctrl_init_referenced_generators+0x132>
#endif
#endif

#if CONF_FDPLL1_CONFIG == 1
#if CONF_FDPLL1_ENABLE == 1
	while (!(hri_oscctrl_get_DPLLSTATUS_LOCK_bit(hw, 1) || hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(hw, 1)))
    500a:	bf00      	nop
    500c:	2101      	movs	r1, #1
    500e:	68f8      	ldr	r0, [r7, #12]
    5010:	4b2a      	ldr	r3, [pc, #168]	; (50bc <_oscctrl_init_referenced_generators+0x20c>)
    5012:	4798      	blx	r3
    5014:	4603      	mov	r3, r0
    5016:	f083 0301 	eor.w	r3, r3, #1
    501a:	b2db      	uxtb	r3, r3
    501c:	2b00      	cmp	r3, #0
    501e:	d009      	beq.n	5034 <_oscctrl_init_referenced_generators+0x184>
    5020:	2101      	movs	r1, #1
    5022:	68f8      	ldr	r0, [r7, #12]
    5024:	4b26      	ldr	r3, [pc, #152]	; (50c0 <_oscctrl_init_referenced_generators+0x210>)
    5026:	4798      	blx	r3
    5028:	4603      	mov	r3, r0
    502a:	f083 0301 	eor.w	r3, r3, #1
    502e:	b2db      	uxtb	r3, r3
    5030:	2b00      	cmp	r3, #0
    5032:	d1eb      	bne.n	500c <_oscctrl_init_referenced_generators+0x15c>
	hri_oscctrl_set_DPLLCTRLA_ONDEMAND_bit(hw, 1);
#endif
#endif

#if CONF_DFLL_CONFIG == 1
	while (hri_gclk_read_SYNCBUSY_reg(GCLK))
    5034:	bf00      	nop
    5036:	480c      	ldr	r0, [pc, #48]	; (5068 <_oscctrl_init_referenced_generators+0x1b8>)
    5038:	4b22      	ldr	r3, [pc, #136]	; (50c4 <_oscctrl_init_referenced_generators+0x214>)
    503a:	4798      	blx	r3
    503c:	4603      	mov	r3, r0
    503e:	2b00      	cmp	r3, #0
    5040:	d1f9      	bne.n	5036 <_oscctrl_init_referenced_generators+0x186>
		;
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, CONF_GCLK_GEN_0_SOURCE);
    5042:	2207      	movs	r2, #7
    5044:	2100      	movs	r1, #0
    5046:	4808      	ldr	r0, [pc, #32]	; (5068 <_oscctrl_init_referenced_generators+0x1b8>)
    5048:	4b08      	ldr	r3, [pc, #32]	; (506c <_oscctrl_init_referenced_generators+0x1bc>)
    504a:	4798      	blx	r3
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
    504c:	bf00      	nop
    504e:	4806      	ldr	r0, [pc, #24]	; (5068 <_oscctrl_init_referenced_generators+0x1b8>)
    5050:	4b07      	ldr	r3, [pc, #28]	; (5070 <_oscctrl_init_referenced_generators+0x1c0>)
    5052:	4798      	blx	r3
    5054:	4603      	mov	r3, r0
    5056:	2b00      	cmp	r3, #0
    5058:	d1f9      	bne.n	504e <_oscctrl_init_referenced_generators+0x19e>
		;
#endif
	(void)hw;
}
    505a:	bf00      	nop
    505c:	3710      	adds	r7, #16
    505e:	46bd      	mov	sp, r7
    5060:	bd80      	pop	{r7, pc}
    5062:	bf00      	nop
    5064:	40001000 	.word	0x40001000
    5068:	40001c00 	.word	0x40001c00
    506c:	00004a7d 	.word	0x00004a7d
    5070:	00004a3d 	.word	0x00004a3d
    5074:	00004ce1 	.word	0x00004ce1
    5078:	0401bb80 	.word	0x0401bb80
    507c:	00004d83 	.word	0x00004d83
    5080:	00004e3b 	.word	0x00004e3b
    5084:	00004d2f 	.word	0x00004d2f
    5088:	00004dd3 	.word	0x00004dd3
    508c:	00004d9f 	.word	0x00004d9f
    5090:	00004d6b 	.word	0x00004d6b
    5094:	00004d4f 	.word	0x00004d4f
    5098:	00004e07 	.word	0x00004e07
    509c:	00004acd 	.word	0x00004acd
    50a0:	00004bd9 	.word	0x00004bd9
    50a4:	00004c15 	.word	0x00004c15
    50a8:	00004b9d 	.word	0x00004b9d
    50ac:	000407a0 	.word	0x000407a0
    50b0:	00004cff 	.word	0x00004cff
    50b4:	00004c93 	.word	0x00004c93
    50b8:	00004c6b 	.word	0x00004c6b
    50bc:	00004b29 	.word	0x00004b29
    50c0:	00004b61 	.word	0x00004b61
    50c4:	00004a65 	.word	0x00004a65

000050c8 <hri_qspi_get_INTFLAG_INSTREND_bit>:
{
	((Qspi *)hw)->INTFLAG.reg = QSPI_INTFLAG_CSRISE;
}

static inline bool hri_qspi_get_INTFLAG_INSTREND_bit(const void *const hw)
{
    50c8:	b480      	push	{r7}
    50ca:	b083      	sub	sp, #12
    50cc:	af00      	add	r7, sp, #0
    50ce:	6078      	str	r0, [r7, #4]
	return (((Qspi *)hw)->INTFLAG.reg & QSPI_INTFLAG_INSTREND) >> QSPI_INTFLAG_INSTREND_Pos;
    50d0:	687b      	ldr	r3, [r7, #4]
    50d2:	69db      	ldr	r3, [r3, #28]
    50d4:	0a9b      	lsrs	r3, r3, #10
    50d6:	f003 0301 	and.w	r3, r3, #1
    50da:	2b00      	cmp	r3, #0
    50dc:	bf14      	ite	ne
    50de:	2301      	movne	r3, #1
    50e0:	2300      	moveq	r3, #0
    50e2:	b2db      	uxtb	r3, r3
}
    50e4:	4618      	mov	r0, r3
    50e6:	370c      	adds	r7, #12
    50e8:	46bd      	mov	sp, r7
    50ea:	f85d 7b04 	ldr.w	r7, [sp], #4
    50ee:	4770      	bx	lr

000050f0 <hri_qspi_clear_INTFLAG_INSTREND_bit>:

static inline void hri_qspi_clear_INTFLAG_INSTREND_bit(const void *const hw)
{
    50f0:	b480      	push	{r7}
    50f2:	b083      	sub	sp, #12
    50f4:	af00      	add	r7, sp, #0
    50f6:	6078      	str	r0, [r7, #4]
	((Qspi *)hw)->INTFLAG.reg = QSPI_INTFLAG_INSTREND;
    50f8:	687b      	ldr	r3, [r7, #4]
    50fa:	f44f 6280 	mov.w	r2, #1024	; 0x400
    50fe:	61da      	str	r2, [r3, #28]
}
    5100:	bf00      	nop
    5102:	370c      	adds	r7, #12
    5104:	46bd      	mov	sp, r7
    5106:	f85d 7b04 	ldr.w	r7, [sp], #4
    510a:	4770      	bx	lr

0000510c <hri_qspi_write_CTRLA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_CTRLA_reg(const void *const hw, hri_qspi_ctrla_reg_t data)
{
    510c:	b480      	push	{r7}
    510e:	b083      	sub	sp, #12
    5110:	af00      	add	r7, sp, #0
    5112:	6078      	str	r0, [r7, #4]
    5114:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->CTRLA.reg = data;
    5116:	687b      	ldr	r3, [r7, #4]
    5118:	683a      	ldr	r2, [r7, #0]
    511a:	601a      	str	r2, [r3, #0]
	QSPI_CRITICAL_SECTION_LEAVE();
}
    511c:	bf00      	nop
    511e:	370c      	adds	r7, #12
    5120:	46bd      	mov	sp, r7
    5122:	f85d 7b04 	ldr.w	r7, [sp], #4
    5126:	4770      	bx	lr

00005128 <hri_qspi_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_CTRLB_reg(const void *const hw, hri_qspi_ctrlb_reg_t data)
{
    5128:	b480      	push	{r7}
    512a:	b083      	sub	sp, #12
    512c:	af00      	add	r7, sp, #0
    512e:	6078      	str	r0, [r7, #4]
    5130:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->CTRLB.reg = data;
    5132:	687b      	ldr	r3, [r7, #4]
    5134:	683a      	ldr	r2, [r7, #0]
    5136:	605a      	str	r2, [r3, #4]
	QSPI_CRITICAL_SECTION_LEAVE();
}
    5138:	bf00      	nop
    513a:	370c      	adds	r7, #12
    513c:	46bd      	mov	sp, r7
    513e:	f85d 7b04 	ldr.w	r7, [sp], #4
    5142:	4770      	bx	lr

00005144 <hri_qspi_write_BAUD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_BAUD_reg(const void *const hw, hri_qspi_baud_reg_t data)
{
    5144:	b480      	push	{r7}
    5146:	b083      	sub	sp, #12
    5148:	af00      	add	r7, sp, #0
    514a:	6078      	str	r0, [r7, #4]
    514c:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->BAUD.reg = data;
    514e:	687b      	ldr	r3, [r7, #4]
    5150:	683a      	ldr	r2, [r7, #0]
    5152:	609a      	str	r2, [r3, #8]
	QSPI_CRITICAL_SECTION_LEAVE();
}
    5154:	bf00      	nop
    5156:	370c      	adds	r7, #12
    5158:	46bd      	mov	sp, r7
    515a:	f85d 7b04 	ldr.w	r7, [sp], #4
    515e:	4770      	bx	lr

00005160 <hri_qspi_write_INSTRADDR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_INSTRADDR_reg(const void *const hw, hri_qspi_instraddr_reg_t data)
{
    5160:	b480      	push	{r7}
    5162:	b083      	sub	sp, #12
    5164:	af00      	add	r7, sp, #0
    5166:	6078      	str	r0, [r7, #4]
    5168:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->INSTRADDR.reg = data;
    516a:	687b      	ldr	r3, [r7, #4]
    516c:	683a      	ldr	r2, [r7, #0]
    516e:	631a      	str	r2, [r3, #48]	; 0x30
	QSPI_CRITICAL_SECTION_LEAVE();
}
    5170:	bf00      	nop
    5172:	370c      	adds	r7, #12
    5174:	46bd      	mov	sp, r7
    5176:	f85d 7b04 	ldr.w	r7, [sp], #4
    517a:	4770      	bx	lr

0000517c <hri_qspi_write_INSTRCTRL_INSTR_bf>:
	tmp = (tmp & QSPI_INSTRCTRL_INSTR(mask)) >> QSPI_INSTRCTRL_INSTR_Pos;
	return tmp;
}

static inline void hri_qspi_write_INSTRCTRL_INSTR_bf(const void *const hw, hri_qspi_instrctrl_reg_t data)
{
    517c:	b480      	push	{r7}
    517e:	b085      	sub	sp, #20
    5180:	af00      	add	r7, sp, #0
    5182:	6078      	str	r0, [r7, #4]
    5184:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	QSPI_CRITICAL_SECTION_ENTER();
	tmp = ((Qspi *)hw)->INSTRCTRL.reg;
    5186:	687b      	ldr	r3, [r7, #4]
    5188:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    518a:	60fb      	str	r3, [r7, #12]
	tmp &= ~QSPI_INSTRCTRL_INSTR_Msk;
    518c:	68fb      	ldr	r3, [r7, #12]
    518e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    5192:	60fb      	str	r3, [r7, #12]
	tmp |= QSPI_INSTRCTRL_INSTR(data);
    5194:	683b      	ldr	r3, [r7, #0]
    5196:	b2db      	uxtb	r3, r3
    5198:	68fa      	ldr	r2, [r7, #12]
    519a:	4313      	orrs	r3, r2
    519c:	60fb      	str	r3, [r7, #12]
	((Qspi *)hw)->INSTRCTRL.reg = tmp;
    519e:	687b      	ldr	r3, [r7, #4]
    51a0:	68fa      	ldr	r2, [r7, #12]
    51a2:	635a      	str	r2, [r3, #52]	; 0x34
	QSPI_CRITICAL_SECTION_LEAVE();
}
    51a4:	bf00      	nop
    51a6:	3714      	adds	r7, #20
    51a8:	46bd      	mov	sp, r7
    51aa:	f85d 7b04 	ldr.w	r7, [sp], #4
    51ae:	4770      	bx	lr

000051b0 <hri_qspi_write_INSTRCTRL_OPTCODE_bf>:
	tmp = (tmp & QSPI_INSTRCTRL_OPTCODE(mask)) >> QSPI_INSTRCTRL_OPTCODE_Pos;
	return tmp;
}

static inline void hri_qspi_write_INSTRCTRL_OPTCODE_bf(const void *const hw, hri_qspi_instrctrl_reg_t data)
{
    51b0:	b480      	push	{r7}
    51b2:	b085      	sub	sp, #20
    51b4:	af00      	add	r7, sp, #0
    51b6:	6078      	str	r0, [r7, #4]
    51b8:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	QSPI_CRITICAL_SECTION_ENTER();
	tmp = ((Qspi *)hw)->INSTRCTRL.reg;
    51ba:	687b      	ldr	r3, [r7, #4]
    51bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    51be:	60fb      	str	r3, [r7, #12]
	tmp &= ~QSPI_INSTRCTRL_OPTCODE_Msk;
    51c0:	68fb      	ldr	r3, [r7, #12]
    51c2:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
    51c6:	60fb      	str	r3, [r7, #12]
	tmp |= QSPI_INSTRCTRL_OPTCODE(data);
    51c8:	683b      	ldr	r3, [r7, #0]
    51ca:	041b      	lsls	r3, r3, #16
    51cc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
    51d0:	68fa      	ldr	r2, [r7, #12]
    51d2:	4313      	orrs	r3, r2
    51d4:	60fb      	str	r3, [r7, #12]
	((Qspi *)hw)->INSTRCTRL.reg = tmp;
    51d6:	687b      	ldr	r3, [r7, #4]
    51d8:	68fa      	ldr	r2, [r7, #12]
    51da:	635a      	str	r2, [r3, #52]	; 0x34
	QSPI_CRITICAL_SECTION_LEAVE();
}
    51dc:	bf00      	nop
    51de:	3714      	adds	r7, #20
    51e0:	46bd      	mov	sp, r7
    51e2:	f85d 7b04 	ldr.w	r7, [sp], #4
    51e6:	4770      	bx	lr

000051e8 <hri_qspi_write_INSTRFRAME_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_INSTRFRAME_reg(const void *const hw, hri_qspi_instrframe_reg_t data)
{
    51e8:	b480      	push	{r7}
    51ea:	b083      	sub	sp, #12
    51ec:	af00      	add	r7, sp, #0
    51ee:	6078      	str	r0, [r7, #4]
    51f0:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->INSTRFRAME.reg = data;
    51f2:	687b      	ldr	r3, [r7, #4]
    51f4:	683a      	ldr	r2, [r7, #0]
    51f6:	639a      	str	r2, [r3, #56]	; 0x38
	QSPI_CRITICAL_SECTION_LEAVE();
}
    51f8:	bf00      	nop
    51fa:	370c      	adds	r7, #12
    51fc:	46bd      	mov	sp, r7
    51fe:	f85d 7b04 	ldr.w	r7, [sp], #4
    5202:	4770      	bx	lr

00005204 <hri_qspi_read_INSTRFRAME_reg>:
	((Qspi *)hw)->INSTRFRAME.reg ^= mask;
	QSPI_CRITICAL_SECTION_LEAVE();
}

static inline hri_qspi_instrframe_reg_t hri_qspi_read_INSTRFRAME_reg(const void *const hw)
{
    5204:	b480      	push	{r7}
    5206:	b083      	sub	sp, #12
    5208:	af00      	add	r7, sp, #0
    520a:	6078      	str	r0, [r7, #4]
	return ((Qspi *)hw)->INSTRFRAME.reg;
    520c:	687b      	ldr	r3, [r7, #4]
    520e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
}
    5210:	4618      	mov	r0, r3
    5212:	370c      	adds	r7, #12
    5214:	46bd      	mov	sp, r7
    5216:	f85d 7b04 	ldr.w	r7, [sp], #4
    521a:	4770      	bx	lr

0000521c <_qspi_memcpy>:
 * \param dst  Pointer to destination buffer.
 * \param src  Pointer to source buffer.
 * \param count  Bytes to be copied.
 */
static void _qspi_memcpy(uint8_t *dst, uint8_t *src, uint32_t count)
{
    521c:	b480      	push	{r7}
    521e:	b085      	sub	sp, #20
    5220:	af00      	add	r7, sp, #0
    5222:	60f8      	str	r0, [r7, #12]
    5224:	60b9      	str	r1, [r7, #8]
    5226:	607a      	str	r2, [r7, #4]
	while (count--) {
    5228:	e007      	b.n	523a <_qspi_memcpy+0x1e>
		*dst++ = *src++;
    522a:	68fb      	ldr	r3, [r7, #12]
    522c:	1c5a      	adds	r2, r3, #1
    522e:	60fa      	str	r2, [r7, #12]
    5230:	68ba      	ldr	r2, [r7, #8]
    5232:	1c51      	adds	r1, r2, #1
    5234:	60b9      	str	r1, [r7, #8]
    5236:	7812      	ldrb	r2, [r2, #0]
    5238:	701a      	strb	r2, [r3, #0]
	while (count--) {
    523a:	687b      	ldr	r3, [r7, #4]
    523c:	1e5a      	subs	r2, r3, #1
    523e:	607a      	str	r2, [r7, #4]
    5240:	2b00      	cmp	r3, #0
    5242:	d1f2      	bne.n	522a <_qspi_memcpy+0xe>
	}
}
    5244:	bf00      	nop
    5246:	3714      	adds	r7, #20
    5248:	46bd      	mov	sp, r7
    524a:	f85d 7b04 	ldr.w	r7, [sp], #4
    524e:	4770      	bx	lr

00005250 <_qspi_end_transfer>:
 * \brief Ends ongoing transfer by releasing CS of QSPI peripheral.
 *
 * \param qspi  Pointer to an Qspi instance.
 */
static inline void _qspi_end_transfer(void *hw)
{
    5250:	b580      	push	{r7, lr}
    5252:	b082      	sub	sp, #8
    5254:	af00      	add	r7, sp, #0
    5256:	6078      	str	r0, [r7, #4]
	hri_qspi_write_CTRLA_reg(hw, QSPI_CTRLA_ENABLE | QSPI_CTRLA_LASTXFER);
    5258:	4903      	ldr	r1, [pc, #12]	; (5268 <_qspi_end_transfer+0x18>)
    525a:	6878      	ldr	r0, [r7, #4]
    525c:	4b03      	ldr	r3, [pc, #12]	; (526c <_qspi_end_transfer+0x1c>)
    525e:	4798      	blx	r3
}
    5260:	bf00      	nop
    5262:	3708      	adds	r7, #8
    5264:	46bd      	mov	sp, r7
    5266:	bd80      	pop	{r7, pc}
    5268:	01000002 	.word	0x01000002
    526c:	0000510d 	.word	0x0000510d

00005270 <_qspi_sync_init>:

int32_t _qspi_sync_init(struct _qspi_sync_dev *dev, void *const hw)
{
    5270:	b580      	push	{r7, lr}
    5272:	b082      	sub	sp, #8
    5274:	af00      	add	r7, sp, #0
    5276:	6078      	str	r0, [r7, #4]
    5278:	6039      	str	r1, [r7, #0]
	ASSERT(dev && hw);
    527a:	687b      	ldr	r3, [r7, #4]
    527c:	2b00      	cmp	r3, #0
    527e:	d004      	beq.n	528a <_qspi_sync_init+0x1a>
    5280:	683b      	ldr	r3, [r7, #0]
    5282:	2b00      	cmp	r3, #0
    5284:	d001      	beq.n	528a <_qspi_sync_init+0x1a>
    5286:	2301      	movs	r3, #1
    5288:	e000      	b.n	528c <_qspi_sync_init+0x1c>
    528a:	2300      	movs	r3, #0
    528c:	f003 0301 	and.w	r3, r3, #1
    5290:	b2db      	uxtb	r3, r3
    5292:	2240      	movs	r2, #64	; 0x40
    5294:	490c      	ldr	r1, [pc, #48]	; (52c8 <_qspi_sync_init+0x58>)
    5296:	4618      	mov	r0, r3
    5298:	4b0c      	ldr	r3, [pc, #48]	; (52cc <_qspi_sync_init+0x5c>)
    529a:	4798      	blx	r3
	dev->prvt = hw;
    529c:	687b      	ldr	r3, [r7, #4]
    529e:	683a      	ldr	r2, [r7, #0]
    52a0:	601a      	str	r2, [r3, #0]
	hri_qspi_write_CTRLA_reg(dev->prvt, QSPI_CTRLA_SWRST);
    52a2:	687b      	ldr	r3, [r7, #4]
    52a4:	681b      	ldr	r3, [r3, #0]
    52a6:	2101      	movs	r1, #1
    52a8:	4618      	mov	r0, r3
    52aa:	4b09      	ldr	r3, [pc, #36]	; (52d0 <_qspi_sync_init+0x60>)
    52ac:	4798      	blx	r3

	hri_qspi_write_CTRLB_reg(hw,
    52ae:	4909      	ldr	r1, [pc, #36]	; (52d4 <_qspi_sync_init+0x64>)
    52b0:	6838      	ldr	r0, [r7, #0]
    52b2:	4b09      	ldr	r3, [pc, #36]	; (52d8 <_qspi_sync_init+0x68>)
    52b4:	4798      	blx	r3
	                         QSPI_CTRLB_MODE_MEMORY | QSPI_CTRLB_CSMODE_LASTXFER | QSPI_CTRLB_DATALEN(0)
	                             | QSPI_CTRLB_DLYBCT(0) | QSPI_CTRLB_DLYCS(CONF_QSPI_DLYCS));

	hri_qspi_write_BAUD_reg(hw,
    52b6:	4909      	ldr	r1, [pc, #36]	; (52dc <_qspi_sync_init+0x6c>)
    52b8:	6838      	ldr	r0, [r7, #0]
    52ba:	4b09      	ldr	r3, [pc, #36]	; (52e0 <_qspi_sync_init+0x70>)
    52bc:	4798      	blx	r3
	                        CONF_QSPI_CPOL << QSPI_BAUD_CPOL_Pos | CONF_QSPI_CPHA << QSPI_BAUD_CPHA_Pos
	                            | QSPI_BAUD_BAUD(CONF_QSPI_BAUD_RATE) | QSPI_BAUD_DLYBS(CONF_QSPI_DLYBS));
	return ERR_NONE;
    52be:	2300      	movs	r3, #0
}
    52c0:	4618      	mov	r0, r3
    52c2:	3708      	adds	r7, #8
    52c4:	46bd      	mov	sp, r7
    52c6:	bd80      	pop	{r7, pc}
    52c8:	000130b8 	.word	0x000130b8
    52cc:	00002ed9 	.word	0x00002ed9
    52d0:	0000510d 	.word	0x0000510d
    52d4:	06000011 	.word	0x06000011
    52d8:	00005129 	.word	0x00005129
    52dc:	00241300 	.word	0x00241300
    52e0:	00005145 	.word	0x00005145

000052e4 <_qspi_sync_enable>:
	hri_qspi_write_CTRLA_reg(dev->prvt, QSPI_CTRLA_SWRST);
	return ERR_NONE;
}

int32_t _qspi_sync_enable(struct _qspi_sync_dev *dev)
{
    52e4:	b580      	push	{r7, lr}
    52e6:	b082      	sub	sp, #8
    52e8:	af00      	add	r7, sp, #0
    52ea:	6078      	str	r0, [r7, #4]
	hri_qspi_write_CTRLA_reg(dev->prvt, QSPI_CTRLA_ENABLE);
    52ec:	687b      	ldr	r3, [r7, #4]
    52ee:	681b      	ldr	r3, [r3, #0]
    52f0:	2102      	movs	r1, #2
    52f2:	4618      	mov	r0, r3
    52f4:	4b03      	ldr	r3, [pc, #12]	; (5304 <_qspi_sync_enable+0x20>)
    52f6:	4798      	blx	r3
	return ERR_NONE;
    52f8:	2300      	movs	r3, #0
}
    52fa:	4618      	mov	r0, r3
    52fc:	3708      	adds	r7, #8
    52fe:	46bd      	mov	sp, r7
    5300:	bd80      	pop	{r7, pc}
    5302:	bf00      	nop
    5304:	0000510d 	.word	0x0000510d

00005308 <_qspi_sync_disable>:

int32_t _qspi_sync_disable(struct _qspi_sync_dev *dev)
{
    5308:	b580      	push	{r7, lr}
    530a:	b082      	sub	sp, #8
    530c:	af00      	add	r7, sp, #0
    530e:	6078      	str	r0, [r7, #4]
	hri_qspi_write_CTRLA_reg(dev->prvt, 0);
    5310:	687b      	ldr	r3, [r7, #4]
    5312:	681b      	ldr	r3, [r3, #0]
    5314:	2100      	movs	r1, #0
    5316:	4618      	mov	r0, r3
    5318:	4b03      	ldr	r3, [pc, #12]	; (5328 <_qspi_sync_disable+0x20>)
    531a:	4798      	blx	r3
	return ERR_NONE;
    531c:	2300      	movs	r3, #0
}
    531e:	4618      	mov	r0, r3
    5320:	3708      	adds	r7, #8
    5322:	46bd      	mov	sp, r7
    5324:	bd80      	pop	{r7, pc}
    5326:	bf00      	nop
    5328:	0000510d 	.word	0x0000510d

0000532c <_qspi_sync_command_set_ifr>:

/**
 * \brief Set instruction frame param.
 */
static void _qspi_sync_command_set_ifr(struct _qspi_sync_dev *dev, const struct _qspi_command *cmd)
{
    532c:	b580      	push	{r7, lr}
    532e:	b084      	sub	sp, #16
    5330:	af00      	add	r7, sp, #0
    5332:	6078      	str	r0, [r7, #4]
    5334:	6039      	str	r1, [r7, #0]
	void *hw = dev->prvt;
    5336:	687b      	ldr	r3, [r7, #4]
    5338:	681b      	ldr	r3, [r3, #0]
    533a:	60fb      	str	r3, [r7, #12]
	if (cmd->inst_frame.bits.addr_en) {
    533c:	683b      	ldr	r3, [r7, #0]
    533e:	781b      	ldrb	r3, [r3, #0]
    5340:	f003 0320 	and.w	r3, r3, #32
    5344:	b2db      	uxtb	r3, r3
    5346:	2b00      	cmp	r3, #0
    5348:	d005      	beq.n	5356 <_qspi_sync_command_set_ifr+0x2a>
		hri_qspi_write_INSTRADDR_reg(hw, cmd->address);
    534a:	683b      	ldr	r3, [r7, #0]
    534c:	689b      	ldr	r3, [r3, #8]
    534e:	4619      	mov	r1, r3
    5350:	68f8      	ldr	r0, [r7, #12]
    5352:	4b13      	ldr	r3, [pc, #76]	; (53a0 <_qspi_sync_command_set_ifr+0x74>)
    5354:	4798      	blx	r3
	}

	if (cmd->inst_frame.bits.inst_en) {
    5356:	683b      	ldr	r3, [r7, #0]
    5358:	781b      	ldrb	r3, [r3, #0]
    535a:	f003 0310 	and.w	r3, r3, #16
    535e:	b2db      	uxtb	r3, r3
    5360:	2b00      	cmp	r3, #0
    5362:	d005      	beq.n	5370 <_qspi_sync_command_set_ifr+0x44>
		hri_qspi_write_INSTRCTRL_INSTR_bf(hw, cmd->instruction);
    5364:	683b      	ldr	r3, [r7, #0]
    5366:	791b      	ldrb	r3, [r3, #4]
    5368:	4619      	mov	r1, r3
    536a:	68f8      	ldr	r0, [r7, #12]
    536c:	4b0d      	ldr	r3, [pc, #52]	; (53a4 <_qspi_sync_command_set_ifr+0x78>)
    536e:	4798      	blx	r3
	}

	if (cmd->inst_frame.bits.opt_en) {
    5370:	683b      	ldr	r3, [r7, #0]
    5372:	781b      	ldrb	r3, [r3, #0]
    5374:	f003 0340 	and.w	r3, r3, #64	; 0x40
    5378:	b2db      	uxtb	r3, r3
    537a:	2b00      	cmp	r3, #0
    537c:	d005      	beq.n	538a <_qspi_sync_command_set_ifr+0x5e>
		hri_qspi_write_INSTRCTRL_OPTCODE_bf(hw, cmd->option);
    537e:	683b      	ldr	r3, [r7, #0]
    5380:	795b      	ldrb	r3, [r3, #5]
    5382:	4619      	mov	r1, r3
    5384:	68f8      	ldr	r0, [r7, #12]
    5386:	4b08      	ldr	r3, [pc, #32]	; (53a8 <_qspi_sync_command_set_ifr+0x7c>)
    5388:	4798      	blx	r3
	}

	hri_qspi_write_INSTRFRAME_reg(hw, cmd->inst_frame.word);
    538a:	683b      	ldr	r3, [r7, #0]
    538c:	681b      	ldr	r3, [r3, #0]
    538e:	4619      	mov	r1, r3
    5390:	68f8      	ldr	r0, [r7, #12]
    5392:	4b06      	ldr	r3, [pc, #24]	; (53ac <_qspi_sync_command_set_ifr+0x80>)
    5394:	4798      	blx	r3
}
    5396:	bf00      	nop
    5398:	3710      	adds	r7, #16
    539a:	46bd      	mov	sp, r7
    539c:	bd80      	pop	{r7, pc}
    539e:	bf00      	nop
    53a0:	00005161 	.word	0x00005161
    53a4:	0000517d 	.word	0x0000517d
    53a8:	000051b1 	.word	0x000051b1
    53ac:	000051e9 	.word	0x000051e9

000053b0 <_qspi_sync_run_transfer>:

/**
 * \brief Access QSPI mapping memory via AHB.
 */
static void _qspi_sync_run_transfer(struct _qspi_sync_dev *dev, const struct _qspi_command *cmd)
{
    53b0:	b580      	push	{r7, lr}
    53b2:	b084      	sub	sp, #16
    53b4:	af00      	add	r7, sp, #0
    53b6:	6078      	str	r0, [r7, #4]
    53b8:	6039      	str	r1, [r7, #0]
	void *   hw       = dev->prvt;
    53ba:	687b      	ldr	r3, [r7, #4]
    53bc:	681b      	ldr	r3, [r3, #0]
    53be:	60bb      	str	r3, [r7, #8]
	uint8_t *qspi_mem = (uint8_t *)QSPI_AHB;
    53c0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    53c4:	60fb      	str	r3, [r7, #12]
	if (cmd->inst_frame.bits.addr_en)
    53c6:	683b      	ldr	r3, [r7, #0]
    53c8:	781b      	ldrb	r3, [r3, #0]
    53ca:	f003 0320 	and.w	r3, r3, #32
    53ce:	b2db      	uxtb	r3, r3
    53d0:	2b00      	cmp	r3, #0
    53d2:	d004      	beq.n	53de <_qspi_sync_run_transfer+0x2e>
		qspi_mem += cmd->address;
    53d4:	683b      	ldr	r3, [r7, #0]
    53d6:	689b      	ldr	r3, [r3, #8]
    53d8:	68fa      	ldr	r2, [r7, #12]
    53da:	4413      	add	r3, r2
    53dc:	60fb      	str	r3, [r7, #12]

	/* To synchronize system bus accesses */
	hri_qspi_read_INSTRFRAME_reg(hw);
    53de:	68b8      	ldr	r0, [r7, #8]
    53e0:	4b18      	ldr	r3, [pc, #96]	; (5444 <_qspi_sync_run_transfer+0x94>)
    53e2:	4798      	blx	r3

	ASSERT(cmd->tx_buf || cmd->rx_buf);
    53e4:	683b      	ldr	r3, [r7, #0]
    53e6:	691b      	ldr	r3, [r3, #16]
    53e8:	2b00      	cmp	r3, #0
    53ea:	d103      	bne.n	53f4 <_qspi_sync_run_transfer+0x44>
    53ec:	683b      	ldr	r3, [r7, #0]
    53ee:	695b      	ldr	r3, [r3, #20]
    53f0:	2b00      	cmp	r3, #0
    53f2:	d001      	beq.n	53f8 <_qspi_sync_run_transfer+0x48>
    53f4:	2301      	movs	r3, #1
    53f6:	e000      	b.n	53fa <_qspi_sync_run_transfer+0x4a>
    53f8:	2300      	movs	r3, #0
    53fa:	f003 0301 	and.w	r3, r3, #1
    53fe:	b2db      	uxtb	r3, r3
    5400:	2282      	movs	r2, #130	; 0x82
    5402:	4911      	ldr	r1, [pc, #68]	; (5448 <_qspi_sync_run_transfer+0x98>)
    5404:	4618      	mov	r0, r3
    5406:	4b11      	ldr	r3, [pc, #68]	; (544c <_qspi_sync_run_transfer+0x9c>)
    5408:	4798      	blx	r3

	if (cmd->tx_buf) {
    540a:	683b      	ldr	r3, [r7, #0]
    540c:	691b      	ldr	r3, [r3, #16]
    540e:	2b00      	cmp	r3, #0
    5410:	d008      	beq.n	5424 <_qspi_sync_run_transfer+0x74>
		_qspi_memcpy((uint8_t *)qspi_mem, (uint8_t *)cmd->tx_buf, cmd->buf_len);
    5412:	683b      	ldr	r3, [r7, #0]
    5414:	6919      	ldr	r1, [r3, #16]
    5416:	683b      	ldr	r3, [r7, #0]
    5418:	68db      	ldr	r3, [r3, #12]
    541a:	461a      	mov	r2, r3
    541c:	68f8      	ldr	r0, [r7, #12]
    541e:	4b0c      	ldr	r3, [pc, #48]	; (5450 <_qspi_sync_run_transfer+0xa0>)
    5420:	4798      	blx	r3
    5422:	e007      	b.n	5434 <_qspi_sync_run_transfer+0x84>
	} else {
		_qspi_memcpy((uint8_t *)cmd->rx_buf, (uint8_t *)qspi_mem, cmd->buf_len);
    5424:	683b      	ldr	r3, [r7, #0]
    5426:	6958      	ldr	r0, [r3, #20]
    5428:	683b      	ldr	r3, [r7, #0]
    542a:	68db      	ldr	r3, [r3, #12]
    542c:	461a      	mov	r2, r3
    542e:	68f9      	ldr	r1, [r7, #12]
    5430:	4b07      	ldr	r3, [pc, #28]	; (5450 <_qspi_sync_run_transfer+0xa0>)
    5432:	4798      	blx	r3
  __ASM volatile ("dsb 0xF":::"memory");
    5434:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    5438:	f3bf 8f6f 	isb	sy
	}

	__DSB();
	__ISB();
}
    543c:	bf00      	nop
    543e:	3710      	adds	r7, #16
    5440:	46bd      	mov	sp, r7
    5442:	bd80      	pop	{r7, pc}
    5444:	00005205 	.word	0x00005205
    5448:	000130b8 	.word	0x000130b8
    544c:	00002ed9 	.word	0x00002ed9
    5450:	0000521d 	.word	0x0000521d

00005454 <_qspi_sync_serial_run_command>:

int32_t _qspi_sync_serial_run_command(struct _qspi_sync_dev *dev, const struct _qspi_command *cmd)
{
    5454:	b580      	push	{r7, lr}
    5456:	b082      	sub	sp, #8
    5458:	af00      	add	r7, sp, #0
    545a:	6078      	str	r0, [r7, #4]
    545c:	6039      	str	r1, [r7, #0]
	_qspi_sync_command_set_ifr(dev, cmd);
    545e:	6839      	ldr	r1, [r7, #0]
    5460:	6878      	ldr	r0, [r7, #4]
    5462:	4b14      	ldr	r3, [pc, #80]	; (54b4 <_qspi_sync_serial_run_command+0x60>)
    5464:	4798      	blx	r3

	if (cmd->inst_frame.bits.data_en) {
    5466:	683b      	ldr	r3, [r7, #0]
    5468:	781b      	ldrb	r3, [r3, #0]
    546a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    546e:	b2db      	uxtb	r3, r3
    5470:	2b00      	cmp	r3, #0
    5472:	d003      	beq.n	547c <_qspi_sync_serial_run_command+0x28>
		_qspi_sync_run_transfer(dev, cmd);
    5474:	6839      	ldr	r1, [r7, #0]
    5476:	6878      	ldr	r0, [r7, #4]
    5478:	4b0f      	ldr	r3, [pc, #60]	; (54b8 <_qspi_sync_serial_run_command+0x64>)
    547a:	4798      	blx	r3
	}

	_qspi_end_transfer(dev->prvt);
    547c:	687b      	ldr	r3, [r7, #4]
    547e:	681b      	ldr	r3, [r3, #0]
    5480:	4618      	mov	r0, r3
    5482:	4b0e      	ldr	r3, [pc, #56]	; (54bc <_qspi_sync_serial_run_command+0x68>)
    5484:	4798      	blx	r3

	while (!hri_qspi_get_INTFLAG_INSTREND_bit(dev->prvt))
    5486:	bf00      	nop
    5488:	687b      	ldr	r3, [r7, #4]
    548a:	681b      	ldr	r3, [r3, #0]
    548c:	4618      	mov	r0, r3
    548e:	4b0c      	ldr	r3, [pc, #48]	; (54c0 <_qspi_sync_serial_run_command+0x6c>)
    5490:	4798      	blx	r3
    5492:	4603      	mov	r3, r0
    5494:	f083 0301 	eor.w	r3, r3, #1
    5498:	b2db      	uxtb	r3, r3
    549a:	2b00      	cmp	r3, #0
    549c:	d1f4      	bne.n	5488 <_qspi_sync_serial_run_command+0x34>
		;
	hri_qspi_clear_INTFLAG_INSTREND_bit(dev->prvt);
    549e:	687b      	ldr	r3, [r7, #4]
    54a0:	681b      	ldr	r3, [r3, #0]
    54a2:	4618      	mov	r0, r3
    54a4:	4b07      	ldr	r3, [pc, #28]	; (54c4 <_qspi_sync_serial_run_command+0x70>)
    54a6:	4798      	blx	r3
	return ERR_NONE;
    54a8:	2300      	movs	r3, #0
}
    54aa:	4618      	mov	r0, r3
    54ac:	3708      	adds	r7, #8
    54ae:	46bd      	mov	sp, r7
    54b0:	bd80      	pop	{r7, pc}
    54b2:	bf00      	nop
    54b4:	0000532d 	.word	0x0000532d
    54b8:	000053b1 	.word	0x000053b1
    54bc:	00005251 	.word	0x00005251
    54c0:	000050c9 	.word	0x000050c9
    54c4:	000050f1 	.word	0x000050f1

000054c8 <hri_rtcmode0_wait_for_sync>:
typedef uint8_t  hri_rtc_freqcorr_reg_t;
typedef uint8_t  hri_rtcalarm_mask_reg_t;
typedef uint8_t  hri_rtcmode2_mask_reg_t;

static inline void hri_rtcmode0_wait_for_sync(const void *const hw, hri_rtcmode0_syncbusy_reg_t reg)
{
    54c8:	b480      	push	{r7}
    54ca:	b083      	sub	sp, #12
    54cc:	af00      	add	r7, sp, #0
    54ce:	6078      	str	r0, [r7, #4]
    54d0:	6039      	str	r1, [r7, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    54d2:	bf00      	nop
    54d4:	687b      	ldr	r3, [r7, #4]
    54d6:	691a      	ldr	r2, [r3, #16]
    54d8:	683b      	ldr	r3, [r7, #0]
    54da:	4013      	ands	r3, r2
    54dc:	2b00      	cmp	r3, #0
    54de:	d1f9      	bne.n	54d4 <hri_rtcmode0_wait_for_sync+0xc>
	};
}
    54e0:	bf00      	nop
    54e2:	370c      	adds	r7, #12
    54e4:	46bd      	mov	sp, r7
    54e6:	f85d 7b04 	ldr.w	r7, [sp], #4
    54ea:	4770      	bx	lr

000054ec <hri_rtcmode0_clear_interrupt_CMP0_bit>:
{
	return (((Rtc *)hw)->MODE0.INTFLAG.reg & RTC_MODE0_INTFLAG_CMP0) >> RTC_MODE0_INTFLAG_CMP0_Pos;
}

static inline void hri_rtcmode0_clear_interrupt_CMP0_bit(const void *const hw)
{
    54ec:	b480      	push	{r7}
    54ee:	b083      	sub	sp, #12
    54f0:	af00      	add	r7, sp, #0
    54f2:	6078      	str	r0, [r7, #4]
	((Rtc *)hw)->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_CMP0;
    54f4:	687b      	ldr	r3, [r7, #4]
    54f6:	f44f 7280 	mov.w	r2, #256	; 0x100
    54fa:	819a      	strh	r2, [r3, #12]
}
    54fc:	bf00      	nop
    54fe:	370c      	adds	r7, #12
    5500:	46bd      	mov	sp, r7
    5502:	f85d 7b04 	ldr.w	r7, [sp], #4
    5506:	4770      	bx	lr

00005508 <hri_rtcmode0_clear_interrupt_TAMPER_bit>:
{
	return (((Rtc *)hw)->MODE0.INTFLAG.reg & RTC_MODE0_INTFLAG_TAMPER) >> RTC_MODE0_INTFLAG_TAMPER_Pos;
}

static inline void hri_rtcmode0_clear_interrupt_TAMPER_bit(const void *const hw)
{
    5508:	b480      	push	{r7}
    550a:	b083      	sub	sp, #12
    550c:	af00      	add	r7, sp, #0
    550e:	6078      	str	r0, [r7, #4]
	((Rtc *)hw)->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_TAMPER;
    5510:	687b      	ldr	r3, [r7, #4]
    5512:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    5516:	819a      	strh	r2, [r3, #12]
}
    5518:	bf00      	nop
    551a:	370c      	adds	r7, #12
    551c:	46bd      	mov	sp, r7
    551e:	f85d 7b04 	ldr.w	r7, [sp], #4
    5522:	4770      	bx	lr

00005524 <hri_rtcmode0_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_rtcmode0_intflag_reg_t hri_rtcmode0_read_INTFLAG_reg(const void *const hw)
{
    5524:	b480      	push	{r7}
    5526:	b083      	sub	sp, #12
    5528:	af00      	add	r7, sp, #0
    552a:	6078      	str	r0, [r7, #4]
	return ((Rtc *)hw)->MODE0.INTFLAG.reg;
    552c:	687b      	ldr	r3, [r7, #4]
    552e:	899b      	ldrh	r3, [r3, #12]
    5530:	b29b      	uxth	r3, r3
}
    5532:	4618      	mov	r0, r3
    5534:	370c      	adds	r7, #12
    5536:	46bd      	mov	sp, r7
    5538:	f85d 7b04 	ldr.w	r7, [sp], #4
    553c:	4770      	bx	lr

0000553e <hri_rtcmode0_read_INTEN_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_rtcmode0_intenset_reg_t hri_rtcmode0_read_INTEN_reg(const void *const hw)
{
    553e:	b480      	push	{r7}
    5540:	b083      	sub	sp, #12
    5542:	af00      	add	r7, sp, #0
    5544:	6078      	str	r0, [r7, #4]
	return ((Rtc *)hw)->MODE0.INTENSET.reg;
    5546:	687b      	ldr	r3, [r7, #4]
    5548:	895b      	ldrh	r3, [r3, #10]
    554a:	b29b      	uxth	r3, r3
}
    554c:	4618      	mov	r0, r3
    554e:	370c      	adds	r7, #12
    5550:	46bd      	mov	sp, r7
    5552:	f85d 7b04 	ldr.w	r7, [sp], #4
    5556:	4770      	bx	lr

00005558 <hri_rtcmode0_set_CTRLA_SWRST_bit>:
	hri_rtcmode2_wait_for_sync(hw, RTC_MODE2_SYNCBUSY_MASK_);
	return ((Rtc *)hw)->MODE2.TIMESTAMP.reg;
}

static inline void hri_rtcmode0_set_CTRLA_SWRST_bit(const void *const hw)
{
    5558:	b580      	push	{r7, lr}
    555a:	b082      	sub	sp, #8
    555c:	af00      	add	r7, sp, #0
    555e:	6078      	str	r0, [r7, #4]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg |= RTC_MODE0_CTRLA_SWRST;
    5560:	687b      	ldr	r3, [r7, #4]
    5562:	881b      	ldrh	r3, [r3, #0]
    5564:	b29b      	uxth	r3, r3
    5566:	f043 0301 	orr.w	r3, r3, #1
    556a:	b29a      	uxth	r2, r3
    556c:	687b      	ldr	r3, [r7, #4]
    556e:	801a      	strh	r2, [r3, #0]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST);
    5570:	2101      	movs	r1, #1
    5572:	6878      	ldr	r0, [r7, #4]
    5574:	4b02      	ldr	r3, [pc, #8]	; (5580 <hri_rtcmode0_set_CTRLA_SWRST_bit+0x28>)
    5576:	4798      	blx	r3
	RTC_CRITICAL_SECTION_LEAVE();
}
    5578:	bf00      	nop
    557a:	3708      	adds	r7, #8
    557c:	46bd      	mov	sp, r7
    557e:	bd80      	pop	{r7, pc}
    5580:	000054c9 	.word	0x000054c9

00005584 <hri_rtcmode0_get_CTRLA_ENABLE_bit>:
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
	RTC_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_rtcmode0_get_CTRLA_ENABLE_bit(const void *const hw)
{
    5584:	b580      	push	{r7, lr}
    5586:	b084      	sub	sp, #16
    5588:	af00      	add	r7, sp, #0
    558a:	6078      	str	r0, [r7, #4]
	uint16_t tmp;
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
    558c:	f248 0103 	movw	r1, #32771	; 0x8003
    5590:	6878      	ldr	r0, [r7, #4]
    5592:	4b0a      	ldr	r3, [pc, #40]	; (55bc <hri_rtcmode0_get_CTRLA_ENABLE_bit+0x38>)
    5594:	4798      	blx	r3
	tmp = ((Rtc *)hw)->MODE0.CTRLA.reg;
    5596:	687b      	ldr	r3, [r7, #4]
    5598:	881b      	ldrh	r3, [r3, #0]
    559a:	81fb      	strh	r3, [r7, #14]
	tmp = (tmp & RTC_MODE0_CTRLA_ENABLE) >> RTC_MODE0_CTRLA_ENABLE_Pos;
    559c:	89fb      	ldrh	r3, [r7, #14]
    559e:	085b      	lsrs	r3, r3, #1
    55a0:	b29b      	uxth	r3, r3
    55a2:	f003 0301 	and.w	r3, r3, #1
    55a6:	81fb      	strh	r3, [r7, #14]
	return (bool)tmp;
    55a8:	89fb      	ldrh	r3, [r7, #14]
    55aa:	2b00      	cmp	r3, #0
    55ac:	bf14      	ite	ne
    55ae:	2301      	movne	r3, #1
    55b0:	2300      	moveq	r3, #0
    55b2:	b2db      	uxtb	r3, r3
}
    55b4:	4618      	mov	r0, r3
    55b6:	3710      	adds	r7, #16
    55b8:	46bd      	mov	sp, r7
    55ba:	bd80      	pop	{r7, pc}
    55bc:	000054c9 	.word	0x000054c9

000055c0 <hri_rtcmode0_clear_CTRLA_ENABLE_bit>:
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
	RTC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_rtcmode0_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    55c0:	b580      	push	{r7, lr}
    55c2:	b082      	sub	sp, #8
    55c4:	af00      	add	r7, sp, #0
    55c6:	6078      	str	r0, [r7, #4]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg &= ~RTC_MODE0_CTRLA_ENABLE;
    55c8:	687b      	ldr	r3, [r7, #4]
    55ca:	881b      	ldrh	r3, [r3, #0]
    55cc:	b29b      	uxth	r3, r3
    55ce:	f023 0302 	bic.w	r3, r3, #2
    55d2:	b29a      	uxth	r2, r3
    55d4:	687b      	ldr	r3, [r7, #4]
    55d6:	801a      	strh	r2, [r3, #0]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
    55d8:	f248 0103 	movw	r1, #32771	; 0x8003
    55dc:	6878      	ldr	r0, [r7, #4]
    55de:	4b03      	ldr	r3, [pc, #12]	; (55ec <hri_rtcmode0_clear_CTRLA_ENABLE_bit+0x2c>)
    55e0:	4798      	blx	r3
	RTC_CRITICAL_SECTION_LEAVE();
}
    55e2:	bf00      	nop
    55e4:	3708      	adds	r7, #8
    55e6:	46bd      	mov	sp, r7
    55e8:	bd80      	pop	{r7, pc}
    55ea:	bf00      	nop
    55ec:	000054c9 	.word	0x000054c9

000055f0 <hri_rtcmode0_write_CTRLA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_rtcmode0_write_CTRLA_reg(const void *const hw, hri_rtcmode0_ctrla_reg_t data)
{
    55f0:	b580      	push	{r7, lr}
    55f2:	b082      	sub	sp, #8
    55f4:	af00      	add	r7, sp, #0
    55f6:	6078      	str	r0, [r7, #4]
    55f8:	460b      	mov	r3, r1
    55fa:	807b      	strh	r3, [r7, #2]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg = data;
    55fc:	687b      	ldr	r3, [r7, #4]
    55fe:	887a      	ldrh	r2, [r7, #2]
    5600:	801a      	strh	r2, [r3, #0]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
    5602:	f248 0103 	movw	r1, #32771	; 0x8003
    5606:	6878      	ldr	r0, [r7, #4]
    5608:	4b02      	ldr	r3, [pc, #8]	; (5614 <hri_rtcmode0_write_CTRLA_reg+0x24>)
    560a:	4798      	blx	r3
	RTC_CRITICAL_SECTION_LEAVE();
}
    560c:	bf00      	nop
    560e:	3708      	adds	r7, #8
    5610:	46bd      	mov	sp, r7
    5612:	bd80      	pop	{r7, pc}
    5614:	000054c9 	.word	0x000054c9

00005618 <hri_rtc_write_TAMPCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_rtc_write_TAMPCTRL_reg(const void *const hw, hri_rtc_tampctrl_reg_t data)
{
    5618:	b480      	push	{r7}
    561a:	b083      	sub	sp, #12
    561c:	af00      	add	r7, sp, #0
    561e:	6078      	str	r0, [r7, #4]
    5620:	6039      	str	r1, [r7, #0]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.TAMPCTRL.reg = data;
    5622:	687b      	ldr	r3, [r7, #4]
    5624:	683a      	ldr	r2, [r7, #0]
    5626:	661a      	str	r2, [r3, #96]	; 0x60
	RTC_CRITICAL_SECTION_LEAVE();
}
    5628:	bf00      	nop
    562a:	370c      	adds	r7, #12
    562c:	46bd      	mov	sp, r7
    562e:	f85d 7b04 	ldr.w	r7, [sp], #4
    5632:	4770      	bx	lr

00005634 <_calendar_init>:

/**
 * \brief Initializes the RTC module with given configurations.
 */
int32_t _calendar_init(struct calendar_dev *const dev)
{
    5634:	b580      	push	{r7, lr}
    5636:	b082      	sub	sp, #8
    5638:	af00      	add	r7, sp, #0
    563a:	6078      	str	r0, [r7, #4]
	ASSERT(dev && dev->hw);
    563c:	687b      	ldr	r3, [r7, #4]
    563e:	2b00      	cmp	r3, #0
    5640:	d005      	beq.n	564e <_calendar_init+0x1a>
    5642:	687b      	ldr	r3, [r7, #4]
    5644:	681b      	ldr	r3, [r3, #0]
    5646:	2b00      	cmp	r3, #0
    5648:	d001      	beq.n	564e <_calendar_init+0x1a>
    564a:	2301      	movs	r3, #1
    564c:	e000      	b.n	5650 <_calendar_init+0x1c>
    564e:	2300      	movs	r3, #0
    5650:	f003 0301 	and.w	r3, r3, #1
    5654:	b2db      	uxtb	r3, r3
    5656:	222f      	movs	r2, #47	; 0x2f
    5658:	491e      	ldr	r1, [pc, #120]	; (56d4 <_calendar_init+0xa0>)
    565a:	4618      	mov	r0, r3
    565c:	4b1e      	ldr	r3, [pc, #120]	; (56d8 <_calendar_init+0xa4>)
    565e:	4798      	blx	r3

	_rtc_dev = dev;
    5660:	4a1e      	ldr	r2, [pc, #120]	; (56dc <_calendar_init+0xa8>)
    5662:	687b      	ldr	r3, [r7, #4]
    5664:	6013      	str	r3, [r2, #0]

	hri_rtcmode0_wait_for_sync(dev->hw, RTC_MODE0_SYNCBUSY_SWRST);
    5666:	687b      	ldr	r3, [r7, #4]
    5668:	681b      	ldr	r3, [r3, #0]
    566a:	2101      	movs	r1, #1
    566c:	4618      	mov	r0, r3
    566e:	4b1c      	ldr	r3, [pc, #112]	; (56e0 <_calendar_init+0xac>)
    5670:	4798      	blx	r3
	if (hri_rtcmode0_get_CTRLA_ENABLE_bit(dev->hw)) {
    5672:	687b      	ldr	r3, [r7, #4]
    5674:	681b      	ldr	r3, [r3, #0]
    5676:	4618      	mov	r0, r3
    5678:	4b1a      	ldr	r3, [pc, #104]	; (56e4 <_calendar_init+0xb0>)
    567a:	4798      	blx	r3
    567c:	4603      	mov	r3, r0
    567e:	2b00      	cmp	r3, #0
    5680:	d00a      	beq.n	5698 <_calendar_init+0x64>
#if !CONF_RTC_INIT_RESET
		return ERR_DENIED;
#else
		hri_rtcmode0_clear_CTRLA_ENABLE_bit(dev->hw);
    5682:	687b      	ldr	r3, [r7, #4]
    5684:	681b      	ldr	r3, [r3, #0]
    5686:	4618      	mov	r0, r3
    5688:	4b17      	ldr	r3, [pc, #92]	; (56e8 <_calendar_init+0xb4>)
    568a:	4798      	blx	r3
		hri_rtcmode0_wait_for_sync(dev->hw, RTC_MODE0_SYNCBUSY_ENABLE);
    568c:	687b      	ldr	r3, [r7, #4]
    568e:	681b      	ldr	r3, [r3, #0]
    5690:	2102      	movs	r1, #2
    5692:	4618      	mov	r0, r3
    5694:	4b12      	ldr	r3, [pc, #72]	; (56e0 <_calendar_init+0xac>)
    5696:	4798      	blx	r3
#endif
	}
	hri_rtcmode0_set_CTRLA_SWRST_bit(dev->hw);
    5698:	687b      	ldr	r3, [r7, #4]
    569a:	681b      	ldr	r3, [r3, #0]
    569c:	4618      	mov	r0, r3
    569e:	4b13      	ldr	r3, [pc, #76]	; (56ec <_calendar_init+0xb8>)
    56a0:	4798      	blx	r3
	hri_rtcmode0_wait_for_sync(dev->hw, RTC_MODE0_SYNCBUSY_SWRST);
    56a2:	687b      	ldr	r3, [r7, #4]
    56a4:	681b      	ldr	r3, [r3, #0]
    56a6:	2101      	movs	r1, #1
    56a8:	4618      	mov	r0, r3
    56aa:	4b0d      	ldr	r3, [pc, #52]	; (56e0 <_calendar_init+0xac>)
    56ac:	4798      	blx	r3
	        | (CONF_RTC_COMPE0 << RTC_MODE0_EVCTRL_CMPEO_Pos) | (CONF_RTC_COMPE1 << RTC_MODE0_EVCTRL_CMPEO1_Pos)
	        | (CONF_RTC_TAMPEREO << RTC_MODE0_EVCTRL_TAMPEREO_Pos)
	        | (CONF_RTC_TAMPEVEI << RTC_MODE0_EVCTRL_TAMPEVEI_Pos) | (CONF_RTC_OVFEO << RTC_MODE0_EVCTRL_OVFEO_Pos));
#endif

	hri_rtcmode0_write_CTRLA_reg(dev->hw, RTC_MODE0_CTRLA_PRESCALER(CONF_RTC_PRESCALER) | RTC_MODE0_CTRLA_COUNTSYNC);
    56ae:	687b      	ldr	r3, [r7, #4]
    56b0:	681b      	ldr	r3, [r3, #0]
    56b2:	f44f 410b 	mov.w	r1, #35584	; 0x8b00
    56b6:	4618      	mov	r0, r3
    56b8:	4b0d      	ldr	r3, [pc, #52]	; (56f0 <_calendar_init+0xbc>)
    56ba:	4798      	blx	r3

	hri_rtc_write_TAMPCTRL_reg(
	    dev->hw,
    56bc:	687b      	ldr	r3, [r7, #4]
    56be:	681b      	ldr	r3, [r3, #0]
	hri_rtc_write_TAMPCTRL_reg(
    56c0:	2100      	movs	r1, #0
    56c2:	4618      	mov	r0, r3
    56c4:	4b0b      	ldr	r3, [pc, #44]	; (56f4 <_calendar_init+0xc0>)
    56c6:	4798      	blx	r3
	if ((CONF_RTC_TAMPER_INACT_0 == TAMPER_MODE_ACTL) | (CONF_RTC_TAMPER_INACT_1 == TAMPER_MODE_ACTL)
	    | (CONF_RTC_TAMPER_INACT_2 == TAMPER_MODE_ACTL) | (CONF_RTC_TAMPER_INACT_3 == TAMPER_MODE_ACTL)
	    | (CONF_RTC_TAMPER_INACT_4 == TAMPER_MODE_ACTL)) {
		hri_rtcmode0_set_CTRLB_RTCOUT_bit(dev->hw);
	}
	return ERR_NONE;
    56c8:	2300      	movs	r3, #0
}
    56ca:	4618      	mov	r0, r3
    56cc:	3708      	adds	r7, #8
    56ce:	46bd      	mov	sp, r7
    56d0:	bd80      	pop	{r7, pc}
    56d2:	bf00      	nop
    56d4:	000130d0 	.word	0x000130d0
    56d8:	00002ed9 	.word	0x00002ed9
    56dc:	20000bf8 	.word	0x20000bf8
    56e0:	000054c9 	.word	0x000054c9
    56e4:	00005585 	.word	0x00005585
    56e8:	000055c1 	.word	0x000055c1
    56ec:	00005559 	.word	0x00005559
    56f0:	000055f1 	.word	0x000055f1
    56f4:	00005619 	.word	0x00005619

000056f8 <_rtc_interrupt_handler>:
 * \brief RTC interrupt handler
 *
 * \param[in] dev The pointer to calendar device struct
 */
static void _rtc_interrupt_handler(struct calendar_dev *dev)
{
    56f8:	b580      	push	{r7, lr}
    56fa:	b084      	sub	sp, #16
    56fc:	af00      	add	r7, sp, #0
    56fe:	6078      	str	r0, [r7, #4]
	/* Read and mask interrupt flag register */
	uint16_t interrupt_status  = hri_rtcmode0_read_INTFLAG_reg(dev->hw);
    5700:	687b      	ldr	r3, [r7, #4]
    5702:	681b      	ldr	r3, [r3, #0]
    5704:	4618      	mov	r0, r3
    5706:	4b19      	ldr	r3, [pc, #100]	; (576c <_rtc_interrupt_handler+0x74>)
    5708:	4798      	blx	r3
    570a:	4603      	mov	r3, r0
    570c:	81fb      	strh	r3, [r7, #14]
	uint16_t interrupt_enabled = hri_rtcmode0_read_INTEN_reg(dev->hw);
    570e:	687b      	ldr	r3, [r7, #4]
    5710:	681b      	ldr	r3, [r3, #0]
    5712:	4618      	mov	r0, r3
    5714:	4b16      	ldr	r3, [pc, #88]	; (5770 <_rtc_interrupt_handler+0x78>)
    5716:	4798      	blx	r3
    5718:	4603      	mov	r3, r0
    571a:	81bb      	strh	r3, [r7, #12]

	if ((interrupt_status & interrupt_enabled) & RTC_MODE2_INTFLAG_ALARM0) {
    571c:	89fa      	ldrh	r2, [r7, #14]
    571e:	89bb      	ldrh	r3, [r7, #12]
    5720:	4013      	ands	r3, r2
    5722:	b29b      	uxth	r3, r3
    5724:	f403 7380 	and.w	r3, r3, #256	; 0x100
    5728:	2b00      	cmp	r3, #0
    572a:	d009      	beq.n	5740 <_rtc_interrupt_handler+0x48>
		dev->callback(dev);
    572c:	687b      	ldr	r3, [r7, #4]
    572e:	685b      	ldr	r3, [r3, #4]
    5730:	6878      	ldr	r0, [r7, #4]
    5732:	4798      	blx	r3

		/* Clear interrupt flag */
		hri_rtcmode0_clear_interrupt_CMP0_bit(dev->hw);
    5734:	687b      	ldr	r3, [r7, #4]
    5736:	681b      	ldr	r3, [r3, #0]
    5738:	4618      	mov	r0, r3
    573a:	4b0e      	ldr	r3, [pc, #56]	; (5774 <_rtc_interrupt_handler+0x7c>)
    573c:	4798      	blx	r3
		dev->callback_tamper(dev);

		/* Clear interrupt flag */
		hri_rtcmode0_clear_interrupt_TAMPER_bit(dev->hw);
	}
}
    573e:	e010      	b.n	5762 <_rtc_interrupt_handler+0x6a>
	} else if ((interrupt_status & interrupt_enabled) & RTC_MODE2_INTFLAG_TAMPER) {
    5740:	89fa      	ldrh	r2, [r7, #14]
    5742:	89bb      	ldrh	r3, [r7, #12]
    5744:	4013      	ands	r3, r2
    5746:	b29b      	uxth	r3, r3
    5748:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    574c:	2b00      	cmp	r3, #0
    574e:	d008      	beq.n	5762 <_rtc_interrupt_handler+0x6a>
		dev->callback_tamper(dev);
    5750:	687b      	ldr	r3, [r7, #4]
    5752:	689b      	ldr	r3, [r3, #8]
    5754:	6878      	ldr	r0, [r7, #4]
    5756:	4798      	blx	r3
		hri_rtcmode0_clear_interrupt_TAMPER_bit(dev->hw);
    5758:	687b      	ldr	r3, [r7, #4]
    575a:	681b      	ldr	r3, [r3, #0]
    575c:	4618      	mov	r0, r3
    575e:	4b06      	ldr	r3, [pc, #24]	; (5778 <_rtc_interrupt_handler+0x80>)
    5760:	4798      	blx	r3
}
    5762:	bf00      	nop
    5764:	3710      	adds	r7, #16
    5766:	46bd      	mov	sp, r7
    5768:	bd80      	pop	{r7, pc}
    576a:	bf00      	nop
    576c:	00005525 	.word	0x00005525
    5770:	0000553f 	.word	0x0000553f
    5774:	000054ed 	.word	0x000054ed
    5778:	00005509 	.word	0x00005509

0000577c <RTC_Handler>:

/**
 * \brief Rtc interrupt handler
 */
void RTC_Handler(void)
{
    577c:	b580      	push	{r7, lr}
    577e:	af00      	add	r7, sp, #0
	_rtc_interrupt_handler(_rtc_dev);
    5780:	4b03      	ldr	r3, [pc, #12]	; (5790 <RTC_Handler+0x14>)
    5782:	681b      	ldr	r3, [r3, #0]
    5784:	4618      	mov	r0, r3
    5786:	4b03      	ldr	r3, [pc, #12]	; (5794 <RTC_Handler+0x18>)
    5788:	4798      	blx	r3
}
    578a:	bf00      	nop
    578c:	bd80      	pop	{r7, pc}
    578e:	bf00      	nop
    5790:	20000bf8 	.word	0x20000bf8
    5794:	000056f9 	.word	0x000056f9

00005798 <__NVIC_EnableIRQ>:
{
    5798:	b480      	push	{r7}
    579a:	b083      	sub	sp, #12
    579c:	af00      	add	r7, sp, #0
    579e:	4603      	mov	r3, r0
    57a0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    57a2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    57a6:	2b00      	cmp	r3, #0
    57a8:	db0b      	blt.n	57c2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    57aa:	4909      	ldr	r1, [pc, #36]	; (57d0 <__NVIC_EnableIRQ+0x38>)
    57ac:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    57b0:	095b      	lsrs	r3, r3, #5
    57b2:	88fa      	ldrh	r2, [r7, #6]
    57b4:	f002 021f 	and.w	r2, r2, #31
    57b8:	2001      	movs	r0, #1
    57ba:	fa00 f202 	lsl.w	r2, r0, r2
    57be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    57c2:	bf00      	nop
    57c4:	370c      	adds	r7, #12
    57c6:	46bd      	mov	sp, r7
    57c8:	f85d 7b04 	ldr.w	r7, [sp], #4
    57cc:	4770      	bx	lr
    57ce:	bf00      	nop
    57d0:	e000e100 	.word	0xe000e100

000057d4 <__NVIC_DisableIRQ>:
{
    57d4:	b480      	push	{r7}
    57d6:	b083      	sub	sp, #12
    57d8:	af00      	add	r7, sp, #0
    57da:	4603      	mov	r3, r0
    57dc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    57de:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    57e2:	2b00      	cmp	r3, #0
    57e4:	db10      	blt.n	5808 <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    57e6:	490b      	ldr	r1, [pc, #44]	; (5814 <__NVIC_DisableIRQ+0x40>)
    57e8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    57ec:	095b      	lsrs	r3, r3, #5
    57ee:	88fa      	ldrh	r2, [r7, #6]
    57f0:	f002 021f 	and.w	r2, r2, #31
    57f4:	2001      	movs	r0, #1
    57f6:	fa00 f202 	lsl.w	r2, r0, r2
    57fa:	3320      	adds	r3, #32
    57fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    5800:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    5804:	f3bf 8f6f 	isb	sy
}
    5808:	bf00      	nop
    580a:	370c      	adds	r7, #12
    580c:	46bd      	mov	sp, r7
    580e:	f85d 7b04 	ldr.w	r7, [sp], #4
    5812:	4770      	bx	lr
    5814:	e000e100 	.word	0xe000e100

00005818 <__NVIC_ClearPendingIRQ>:
{
    5818:	b480      	push	{r7}
    581a:	b083      	sub	sp, #12
    581c:	af00      	add	r7, sp, #0
    581e:	4603      	mov	r3, r0
    5820:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    5822:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    5826:	2b00      	cmp	r3, #0
    5828:	db0c      	blt.n	5844 <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    582a:	4909      	ldr	r1, [pc, #36]	; (5850 <__NVIC_ClearPendingIRQ+0x38>)
    582c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    5830:	095b      	lsrs	r3, r3, #5
    5832:	88fa      	ldrh	r2, [r7, #6]
    5834:	f002 021f 	and.w	r2, r2, #31
    5838:	2001      	movs	r0, #1
    583a:	fa00 f202 	lsl.w	r2, r0, r2
    583e:	3360      	adds	r3, #96	; 0x60
    5840:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    5844:	bf00      	nop
    5846:	370c      	adds	r7, #12
    5848:	46bd      	mov	sp, r7
    584a:	f85d 7b04 	ldr.w	r7, [sp], #4
    584e:	4770      	bx	lr
    5850:	e000e100 	.word	0xe000e100

00005854 <hri_sercomi2cm_wait_for_sync>:
typedef uint8_t  hri_sercomusart_intflag_reg_t;
typedef uint8_t  hri_sercomusart_rxerrcnt_reg_t;
typedef uint8_t  hri_sercomusart_rxpl_reg_t;

static inline void hri_sercomi2cm_wait_for_sync(const void *const hw, hri_sercomi2cm_syncbusy_reg_t reg)
{
    5854:	b480      	push	{r7}
    5856:	b083      	sub	sp, #12
    5858:	af00      	add	r7, sp, #0
    585a:	6078      	str	r0, [r7, #4]
    585c:	6039      	str	r1, [r7, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    585e:	bf00      	nop
    5860:	687b      	ldr	r3, [r7, #4]
    5862:	69da      	ldr	r2, [r3, #28]
    5864:	683b      	ldr	r3, [r7, #0]
    5866:	4013      	ands	r3, r2
    5868:	2b00      	cmp	r3, #0
    586a:	d1f9      	bne.n	5860 <hri_sercomi2cm_wait_for_sync+0xc>
	};
}
    586c:	bf00      	nop
    586e:	370c      	adds	r7, #12
    5870:	46bd      	mov	sp, r7
    5872:	f85d 7b04 	ldr.w	r7, [sp], #4
    5876:	4770      	bx	lr

00005878 <hri_sercomi2cm_is_syncing>:

static inline bool hri_sercomi2cm_is_syncing(const void *const hw, hri_sercomi2cm_syncbusy_reg_t reg)
{
    5878:	b480      	push	{r7}
    587a:	b083      	sub	sp, #12
    587c:	af00      	add	r7, sp, #0
    587e:	6078      	str	r0, [r7, #4]
    5880:	6039      	str	r1, [r7, #0]
	return ((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg;
    5882:	687b      	ldr	r3, [r7, #4]
    5884:	69da      	ldr	r2, [r3, #28]
    5886:	683b      	ldr	r3, [r7, #0]
    5888:	4013      	ands	r3, r2
    588a:	2b00      	cmp	r3, #0
    588c:	bf14      	ite	ne
    588e:	2301      	movne	r3, #1
    5890:	2300      	moveq	r3, #0
    5892:	b2db      	uxtb	r3, r3
}
    5894:	4618      	mov	r0, r3
    5896:	370c      	adds	r7, #12
    5898:	46bd      	mov	sp, r7
    589a:	f85d 7b04 	ldr.w	r7, [sp], #4
    589e:	4770      	bx	lr

000058a0 <hri_sercomspi_wait_for_sync>:
{
	return ((Sercom *)hw)->I2CS.SYNCBUSY.reg & reg;
}

static inline void hri_sercomspi_wait_for_sync(const void *const hw, hri_sercomspi_syncbusy_reg_t reg)
{
    58a0:	b480      	push	{r7}
    58a2:	b083      	sub	sp, #12
    58a4:	af00      	add	r7, sp, #0
    58a6:	6078      	str	r0, [r7, #4]
    58a8:	6039      	str	r1, [r7, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    58aa:	bf00      	nop
    58ac:	687b      	ldr	r3, [r7, #4]
    58ae:	69da      	ldr	r2, [r3, #28]
    58b0:	683b      	ldr	r3, [r7, #0]
    58b2:	4013      	ands	r3, r2
    58b4:	2b00      	cmp	r3, #0
    58b6:	d1f9      	bne.n	58ac <hri_sercomspi_wait_for_sync+0xc>
	};
}
    58b8:	bf00      	nop
    58ba:	370c      	adds	r7, #12
    58bc:	46bd      	mov	sp, r7
    58be:	f85d 7b04 	ldr.w	r7, [sp], #4
    58c2:	4770      	bx	lr

000058c4 <hri_sercomspi_is_syncing>:

static inline bool hri_sercomspi_is_syncing(const void *const hw, hri_sercomspi_syncbusy_reg_t reg)
{
    58c4:	b480      	push	{r7}
    58c6:	b083      	sub	sp, #12
    58c8:	af00      	add	r7, sp, #0
    58ca:	6078      	str	r0, [r7, #4]
    58cc:	6039      	str	r1, [r7, #0]
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    58ce:	687b      	ldr	r3, [r7, #4]
    58d0:	69da      	ldr	r2, [r3, #28]
    58d2:	683b      	ldr	r3, [r7, #0]
    58d4:	4013      	ands	r3, r2
    58d6:	2b00      	cmp	r3, #0
    58d8:	bf14      	ite	ne
    58da:	2301      	movne	r3, #1
    58dc:	2300      	moveq	r3, #0
    58de:	b2db      	uxtb	r3, r3
}
    58e0:	4618      	mov	r0, r3
    58e2:	370c      	adds	r7, #12
    58e4:	46bd      	mov	sp, r7
    58e6:	f85d 7b04 	ldr.w	r7, [sp], #4
    58ea:	4770      	bx	lr

000058ec <hri_sercomi2cm_clear_interrupt_MB_bit>:
{
	return (((Sercom *)hw)->I2CM.INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) >> SERCOM_I2CM_INTFLAG_MB_Pos;
}

static inline void hri_sercomi2cm_clear_interrupt_MB_bit(const void *const hw)
{
    58ec:	b480      	push	{r7}
    58ee:	b083      	sub	sp, #12
    58f0:	af00      	add	r7, sp, #0
    58f2:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
    58f4:	687b      	ldr	r3, [r7, #4]
    58f6:	2201      	movs	r2, #1
    58f8:	761a      	strb	r2, [r3, #24]
}
    58fa:	bf00      	nop
    58fc:	370c      	adds	r7, #12
    58fe:	46bd      	mov	sp, r7
    5900:	f85d 7b04 	ldr.w	r7, [sp], #4
    5904:	4770      	bx	lr

00005906 <hri_sercomi2cm_clear_interrupt_SB_bit>:
{
	return (((Sercom *)hw)->I2CM.INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) >> SERCOM_I2CM_INTFLAG_SB_Pos;
}

static inline void hri_sercomi2cm_clear_interrupt_SB_bit(const void *const hw)
{
    5906:	b480      	push	{r7}
    5908:	b083      	sub	sp, #12
    590a:	af00      	add	r7, sp, #0
    590c:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    590e:	687b      	ldr	r3, [r7, #4]
    5910:	2202      	movs	r2, #2
    5912:	761a      	strb	r2, [r3, #24]
}
    5914:	bf00      	nop
    5916:	370c      	adds	r7, #12
    5918:	46bd      	mov	sp, r7
    591a:	f85d 7b04 	ldr.w	r7, [sp], #4
    591e:	4770      	bx	lr

00005920 <hri_sercomi2cm_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_sercomi2cm_intflag_reg_t hri_sercomi2cm_read_INTFLAG_reg(const void *const hw)
{
    5920:	b480      	push	{r7}
    5922:	b083      	sub	sp, #12
    5924:	af00      	add	r7, sp, #0
    5926:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->I2CM.INTFLAG.reg;
    5928:	687b      	ldr	r3, [r7, #4]
    592a:	7e1b      	ldrb	r3, [r3, #24]
    592c:	b2db      	uxtb	r3, r3
}
    592e:	4618      	mov	r0, r3
    5930:	370c      	adds	r7, #12
    5932:	46bd      	mov	sp, r7
    5934:	f85d 7b04 	ldr.w	r7, [sp], #4
    5938:	4770      	bx	lr

0000593a <hri_sercomi2cm_clear_INTFLAG_reg>:

static inline void hri_sercomi2cm_clear_INTFLAG_reg(const void *const hw, hri_sercomi2cm_intflag_reg_t mask)
{
    593a:	b480      	push	{r7}
    593c:	b083      	sub	sp, #12
    593e:	af00      	add	r7, sp, #0
    5940:	6078      	str	r0, [r7, #4]
    5942:	460b      	mov	r3, r1
    5944:	70fb      	strb	r3, [r7, #3]
	((Sercom *)hw)->I2CM.INTFLAG.reg = mask;
    5946:	687b      	ldr	r3, [r7, #4]
    5948:	78fa      	ldrb	r2, [r7, #3]
    594a:	761a      	strb	r2, [r3, #24]
}
    594c:	bf00      	nop
    594e:	370c      	adds	r7, #12
    5950:	46bd      	mov	sp, r7
    5952:	f85d 7b04 	ldr.w	r7, [sp], #4
    5956:	4770      	bx	lr

00005958 <hri_sercomspi_get_INTFLAG_reg>:
	((Sercom *)hw)->SPI.INTFLAG.reg = SERCOM_SPI_INTFLAG_ERROR;
}

static inline hri_sercomspi_intflag_reg_t hri_sercomspi_get_INTFLAG_reg(const void *const           hw,
                                                                        hri_sercomspi_intflag_reg_t mask)
{
    5958:	b480      	push	{r7}
    595a:	b085      	sub	sp, #20
    595c:	af00      	add	r7, sp, #0
    595e:	6078      	str	r0, [r7, #4]
    5960:	460b      	mov	r3, r1
    5962:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	tmp = ((Sercom *)hw)->SPI.INTFLAG.reg;
    5964:	687b      	ldr	r3, [r7, #4]
    5966:	7e1b      	ldrb	r3, [r3, #24]
    5968:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    596a:	7bfa      	ldrb	r2, [r7, #15]
    596c:	78fb      	ldrb	r3, [r7, #3]
    596e:	4013      	ands	r3, r2
    5970:	73fb      	strb	r3, [r7, #15]
	return tmp;
    5972:	7bfb      	ldrb	r3, [r7, #15]
}
    5974:	4618      	mov	r0, r3
    5976:	3714      	adds	r7, #20
    5978:	46bd      	mov	sp, r7
    597a:	f85d 7b04 	ldr.w	r7, [sp], #4
    597e:	4770      	bx	lr

00005980 <hri_sercomspi_read_INTFLAG_reg>:

static inline hri_sercomspi_intflag_reg_t hri_sercomspi_read_INTFLAG_reg(const void *const hw)
{
    5980:	b480      	push	{r7}
    5982:	b083      	sub	sp, #12
    5984:	af00      	add	r7, sp, #0
    5986:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->SPI.INTFLAG.reg;
    5988:	687b      	ldr	r3, [r7, #4]
    598a:	7e1b      	ldrb	r3, [r3, #24]
    598c:	b2db      	uxtb	r3, r3
}
    598e:	4618      	mov	r0, r3
    5990:	370c      	adds	r7, #12
    5992:	46bd      	mov	sp, r7
    5994:	f85d 7b04 	ldr.w	r7, [sp], #4
    5998:	4770      	bx	lr

0000599a <hri_sercomspi_clear_INTFLAG_reg>:

static inline void hri_sercomspi_clear_INTFLAG_reg(const void *const hw, hri_sercomspi_intflag_reg_t mask)
{
    599a:	b480      	push	{r7}
    599c:	b083      	sub	sp, #12
    599e:	af00      	add	r7, sp, #0
    59a0:	6078      	str	r0, [r7, #4]
    59a2:	460b      	mov	r3, r1
    59a4:	70fb      	strb	r3, [r7, #3]
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    59a6:	687b      	ldr	r3, [r7, #4]
    59a8:	78fa      	ldrb	r2, [r7, #3]
    59aa:	761a      	strb	r2, [r3, #24]
}
    59ac:	bf00      	nop
    59ae:	370c      	adds	r7, #12
    59b0:	46bd      	mov	sp, r7
    59b2:	f85d 7b04 	ldr.w	r7, [sp], #4
    59b6:	4770      	bx	lr

000059b8 <hri_sercomspi_set_INTEN_DRE_bit>:
{
	((Sercom *)hw)->I2CS.INTENCLR.reg = mask;
}

static inline void hri_sercomspi_set_INTEN_DRE_bit(const void *const hw)
{
    59b8:	b480      	push	{r7}
    59ba:	b083      	sub	sp, #12
    59bc:	af00      	add	r7, sp, #0
    59be:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_DRE;
    59c0:	687b      	ldr	r3, [r7, #4]
    59c2:	2201      	movs	r2, #1
    59c4:	759a      	strb	r2, [r3, #22]
}
    59c6:	bf00      	nop
    59c8:	370c      	adds	r7, #12
    59ca:	46bd      	mov	sp, r7
    59cc:	f85d 7b04 	ldr.w	r7, [sp], #4
    59d0:	4770      	bx	lr

000059d2 <hri_sercomspi_clear_INTEN_DRE_bit>:
		((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_DRE;
	}
}

static inline void hri_sercomspi_clear_INTEN_DRE_bit(const void *const hw)
{
    59d2:	b480      	push	{r7}
    59d4:	b083      	sub	sp, #12
    59d6:	af00      	add	r7, sp, #0
    59d8:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->SPI.INTENCLR.reg = SERCOM_SPI_INTENSET_DRE;
    59da:	687b      	ldr	r3, [r7, #4]
    59dc:	2201      	movs	r2, #1
    59de:	751a      	strb	r2, [r3, #20]
}
    59e0:	bf00      	nop
    59e2:	370c      	adds	r7, #12
    59e4:	46bd      	mov	sp, r7
    59e6:	f85d 7b04 	ldr.w	r7, [sp], #4
    59ea:	4770      	bx	lr

000059ec <hri_sercomspi_set_INTEN_TXC_bit>:

static inline void hri_sercomspi_set_INTEN_TXC_bit(const void *const hw)
{
    59ec:	b480      	push	{r7}
    59ee:	b083      	sub	sp, #12
    59f0:	af00      	add	r7, sp, #0
    59f2:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_TXC;
    59f4:	687b      	ldr	r3, [r7, #4]
    59f6:	2202      	movs	r2, #2
    59f8:	759a      	strb	r2, [r3, #22]
}
    59fa:	bf00      	nop
    59fc:	370c      	adds	r7, #12
    59fe:	46bd      	mov	sp, r7
    5a00:	f85d 7b04 	ldr.w	r7, [sp], #4
    5a04:	4770      	bx	lr

00005a06 <hri_sercomspi_clear_INTEN_TXC_bit>:
		((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_TXC;
	}
}

static inline void hri_sercomspi_clear_INTEN_TXC_bit(const void *const hw)
{
    5a06:	b480      	push	{r7}
    5a08:	b083      	sub	sp, #12
    5a0a:	af00      	add	r7, sp, #0
    5a0c:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->SPI.INTENCLR.reg = SERCOM_SPI_INTENSET_TXC;
    5a0e:	687b      	ldr	r3, [r7, #4]
    5a10:	2202      	movs	r2, #2
    5a12:	751a      	strb	r2, [r3, #20]
}
    5a14:	bf00      	nop
    5a16:	370c      	adds	r7, #12
    5a18:	46bd      	mov	sp, r7
    5a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
    5a1e:	4770      	bx	lr

00005a20 <hri_sercomspi_set_INTEN_RXC_bit>:

static inline void hri_sercomspi_set_INTEN_RXC_bit(const void *const hw)
{
    5a20:	b480      	push	{r7}
    5a22:	b083      	sub	sp, #12
    5a24:	af00      	add	r7, sp, #0
    5a26:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_RXC;
    5a28:	687b      	ldr	r3, [r7, #4]
    5a2a:	2204      	movs	r2, #4
    5a2c:	759a      	strb	r2, [r3, #22]
}
    5a2e:	bf00      	nop
    5a30:	370c      	adds	r7, #12
    5a32:	46bd      	mov	sp, r7
    5a34:	f85d 7b04 	ldr.w	r7, [sp], #4
    5a38:	4770      	bx	lr

00005a3a <hri_sercomspi_clear_INTEN_RXC_bit>:
		((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_RXC;
	}
}

static inline void hri_sercomspi_clear_INTEN_RXC_bit(const void *const hw)
{
    5a3a:	b480      	push	{r7}
    5a3c:	b083      	sub	sp, #12
    5a3e:	af00      	add	r7, sp, #0
    5a40:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->SPI.INTENCLR.reg = SERCOM_SPI_INTENSET_RXC;
    5a42:	687b      	ldr	r3, [r7, #4]
    5a44:	2204      	movs	r2, #4
    5a46:	751a      	strb	r2, [r3, #20]
}
    5a48:	bf00      	nop
    5a4a:	370c      	adds	r7, #12
    5a4c:	46bd      	mov	sp, r7
    5a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
    5a52:	4770      	bx	lr

00005a54 <hri_sercomspi_read_INTEN_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_sercomspi_intenset_reg_t hri_sercomspi_read_INTEN_reg(const void *const hw)
{
    5a54:	b480      	push	{r7}
    5a56:	b083      	sub	sp, #12
    5a58:	af00      	add	r7, sp, #0
    5a5a:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->SPI.INTENSET.reg;
    5a5c:	687b      	ldr	r3, [r7, #4]
    5a5e:	7d9b      	ldrb	r3, [r3, #22]
    5a60:	b2db      	uxtb	r3, r3
}
    5a62:	4618      	mov	r0, r3
    5a64:	370c      	adds	r7, #12
    5a66:	46bd      	mov	sp, r7
    5a68:	f85d 7b04 	ldr.w	r7, [sp], #4
    5a6c:	4770      	bx	lr
	...

00005a70 <hri_sercomi2cm_clear_CTRLA_ENABLE_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    5a70:	b580      	push	{r7, lr}
    5a72:	b082      	sub	sp, #8
    5a74:	af00      	add	r7, sp, #0
    5a76:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLA.reg &= ~SERCOM_I2CM_CTRLA_ENABLE;
    5a78:	687b      	ldr	r3, [r7, #4]
    5a7a:	681b      	ldr	r3, [r3, #0]
    5a7c:	f023 0202 	bic.w	r2, r3, #2
    5a80:	687b      	ldr	r3, [r7, #4]
    5a82:	601a      	str	r2, [r3, #0]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
    5a84:	2103      	movs	r1, #3
    5a86:	6878      	ldr	r0, [r7, #4]
    5a88:	4b02      	ldr	r3, [pc, #8]	; (5a94 <hri_sercomi2cm_clear_CTRLA_ENABLE_bit+0x24>)
    5a8a:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5a8c:	bf00      	nop
    5a8e:	3708      	adds	r7, #8
    5a90:	46bd      	mov	sp, r7
    5a92:	bd80      	pop	{r7, pc}
    5a94:	00005855 	.word	0x00005855

00005a98 <hri_sercomi2cm_get_CTRLA_SCLSM_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_MASK);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_sercomi2cm_get_CTRLA_SCLSM_bit(const void *const hw)
{
    5a98:	b480      	push	{r7}
    5a9a:	b085      	sub	sp, #20
    5a9c:	af00      	add	r7, sp, #0
    5a9e:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    5aa0:	687b      	ldr	r3, [r7, #4]
    5aa2:	681b      	ldr	r3, [r3, #0]
    5aa4:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & SERCOM_I2CM_CTRLA_SCLSM) >> SERCOM_I2CM_CTRLA_SCLSM_Pos;
    5aa6:	68fb      	ldr	r3, [r7, #12]
    5aa8:	0edb      	lsrs	r3, r3, #27
    5aaa:	f003 0301 	and.w	r3, r3, #1
    5aae:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    5ab0:	68fb      	ldr	r3, [r7, #12]
    5ab2:	2b00      	cmp	r3, #0
    5ab4:	bf14      	ite	ne
    5ab6:	2301      	movne	r3, #1
    5ab8:	2300      	moveq	r3, #0
    5aba:	b2db      	uxtb	r3, r3
}
    5abc:	4618      	mov	r0, r3
    5abe:	3714      	adds	r7, #20
    5ac0:	46bd      	mov	sp, r7
    5ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
    5ac6:	4770      	bx	lr

00005ac8 <hri_sercomi2cm_get_CTRLA_reg>:
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_ctrla_reg_t hri_sercomi2cm_get_CTRLA_reg(const void *const          hw,
                                                                      hri_sercomi2cm_ctrla_reg_t mask)
{
    5ac8:	b580      	push	{r7, lr}
    5aca:	b084      	sub	sp, #16
    5acc:	af00      	add	r7, sp, #0
    5ace:	6078      	str	r0, [r7, #4]
    5ad0:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
    5ad2:	2103      	movs	r1, #3
    5ad4:	6878      	ldr	r0, [r7, #4]
    5ad6:	4b07      	ldr	r3, [pc, #28]	; (5af4 <hri_sercomi2cm_get_CTRLA_reg+0x2c>)
    5ad8:	4798      	blx	r3
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    5ada:	687b      	ldr	r3, [r7, #4]
    5adc:	681b      	ldr	r3, [r3, #0]
    5ade:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    5ae0:	68fa      	ldr	r2, [r7, #12]
    5ae2:	683b      	ldr	r3, [r7, #0]
    5ae4:	4013      	ands	r3, r2
    5ae6:	60fb      	str	r3, [r7, #12]
	return tmp;
    5ae8:	68fb      	ldr	r3, [r7, #12]
}
    5aea:	4618      	mov	r0, r3
    5aec:	3710      	adds	r7, #16
    5aee:	46bd      	mov	sp, r7
    5af0:	bd80      	pop	{r7, pc}
    5af2:	bf00      	nop
    5af4:	00005855 	.word	0x00005855

00005af8 <hri_sercomi2cm_write_CTRLA_reg>:

static inline void hri_sercomi2cm_write_CTRLA_reg(const void *const hw, hri_sercomi2cm_ctrla_reg_t data)
{
    5af8:	b580      	push	{r7, lr}
    5afa:	b082      	sub	sp, #8
    5afc:	af00      	add	r7, sp, #0
    5afe:	6078      	str	r0, [r7, #4]
    5b00:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLA.reg = data;
    5b02:	687b      	ldr	r3, [r7, #4]
    5b04:	683a      	ldr	r2, [r7, #0]
    5b06:	601a      	str	r2, [r3, #0]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
    5b08:	2103      	movs	r1, #3
    5b0a:	6878      	ldr	r0, [r7, #4]
    5b0c:	4b02      	ldr	r3, [pc, #8]	; (5b18 <hri_sercomi2cm_write_CTRLA_reg+0x20>)
    5b0e:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5b10:	bf00      	nop
    5b12:	3708      	adds	r7, #8
    5b14:	46bd      	mov	sp, r7
    5b16:	bd80      	pop	{r7, pc}
    5b18:	00005855 	.word	0x00005855

00005b1c <hri_sercomspi_get_CTRLA_ENABLE_bit>:
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_sercomspi_get_CTRLA_ENABLE_bit(const void *const hw)
{
    5b1c:	b580      	push	{r7, lr}
    5b1e:	b084      	sub	sp, #16
    5b20:	af00      	add	r7, sp, #0
    5b22:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    5b24:	2103      	movs	r1, #3
    5b26:	6878      	ldr	r0, [r7, #4]
    5b28:	4b09      	ldr	r3, [pc, #36]	; (5b50 <hri_sercomspi_get_CTRLA_ENABLE_bit+0x34>)
    5b2a:	4798      	blx	r3
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    5b2c:	687b      	ldr	r3, [r7, #4]
    5b2e:	681b      	ldr	r3, [r3, #0]
    5b30:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & SERCOM_SPI_CTRLA_ENABLE) >> SERCOM_SPI_CTRLA_ENABLE_Pos;
    5b32:	68fb      	ldr	r3, [r7, #12]
    5b34:	085b      	lsrs	r3, r3, #1
    5b36:	f003 0301 	and.w	r3, r3, #1
    5b3a:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    5b3c:	68fb      	ldr	r3, [r7, #12]
    5b3e:	2b00      	cmp	r3, #0
    5b40:	bf14      	ite	ne
    5b42:	2301      	movne	r3, #1
    5b44:	2300      	moveq	r3, #0
    5b46:	b2db      	uxtb	r3, r3
}
    5b48:	4618      	mov	r0, r3
    5b4a:	3710      	adds	r7, #16
    5b4c:	46bd      	mov	sp, r7
    5b4e:	bd80      	pop	{r7, pc}
    5b50:	000058a1 	.word	0x000058a1

00005b54 <hri_sercomspi_clear_CTRLA_ENABLE_bit>:
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomspi_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    5b54:	b580      	push	{r7, lr}
    5b56:	b082      	sub	sp, #8
    5b58:	af00      	add	r7, sp, #0
    5b5a:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    5b5c:	687b      	ldr	r3, [r7, #4]
    5b5e:	681b      	ldr	r3, [r3, #0]
    5b60:	f023 0202 	bic.w	r2, r3, #2
    5b64:	687b      	ldr	r3, [r7, #4]
    5b66:	601a      	str	r2, [r3, #0]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    5b68:	2103      	movs	r1, #3
    5b6a:	6878      	ldr	r0, [r7, #4]
    5b6c:	4b02      	ldr	r3, [pc, #8]	; (5b78 <hri_sercomspi_clear_CTRLA_ENABLE_bit+0x24>)
    5b6e:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5b70:	bf00      	nop
    5b72:	3708      	adds	r7, #8
    5b74:	46bd      	mov	sp, r7
    5b76:	bd80      	pop	{r7, pc}
    5b78:	000058a1 	.word	0x000058a1

00005b7c <hri_sercomspi_get_CTRLA_reg>:
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomspi_ctrla_reg_t hri_sercomspi_get_CTRLA_reg(const void *const         hw,
                                                                    hri_sercomspi_ctrla_reg_t mask)
{
    5b7c:	b580      	push	{r7, lr}
    5b7e:	b084      	sub	sp, #16
    5b80:	af00      	add	r7, sp, #0
    5b82:	6078      	str	r0, [r7, #4]
    5b84:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    5b86:	2103      	movs	r1, #3
    5b88:	6878      	ldr	r0, [r7, #4]
    5b8a:	4b07      	ldr	r3, [pc, #28]	; (5ba8 <hri_sercomspi_get_CTRLA_reg+0x2c>)
    5b8c:	4798      	blx	r3
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    5b8e:	687b      	ldr	r3, [r7, #4]
    5b90:	681b      	ldr	r3, [r3, #0]
    5b92:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    5b94:	68fa      	ldr	r2, [r7, #12]
    5b96:	683b      	ldr	r3, [r7, #0]
    5b98:	4013      	ands	r3, r2
    5b9a:	60fb      	str	r3, [r7, #12]
	return tmp;
    5b9c:	68fb      	ldr	r3, [r7, #12]
}
    5b9e:	4618      	mov	r0, r3
    5ba0:	3710      	adds	r7, #16
    5ba2:	46bd      	mov	sp, r7
    5ba4:	bd80      	pop	{r7, pc}
    5ba6:	bf00      	nop
    5ba8:	000058a1 	.word	0x000058a1

00005bac <hri_sercomspi_write_CTRLA_reg>:

static inline void hri_sercomspi_write_CTRLA_reg(const void *const hw, hri_sercomspi_ctrla_reg_t data)
{
    5bac:	b580      	push	{r7, lr}
    5bae:	b082      	sub	sp, #8
    5bb0:	af00      	add	r7, sp, #0
    5bb2:	6078      	str	r0, [r7, #4]
    5bb4:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    5bb6:	687b      	ldr	r3, [r7, #4]
    5bb8:	683a      	ldr	r2, [r7, #0]
    5bba:	601a      	str	r2, [r3, #0]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    5bbc:	2103      	movs	r1, #3
    5bbe:	6878      	ldr	r0, [r7, #4]
    5bc0:	4b02      	ldr	r3, [pc, #8]	; (5bcc <hri_sercomspi_write_CTRLA_reg+0x20>)
    5bc2:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5bc4:	bf00      	nop
    5bc6:	3708      	adds	r7, #8
    5bc8:	46bd      	mov	sp, r7
    5bca:	bd80      	pop	{r7, pc}
    5bcc:	000058a1 	.word	0x000058a1

00005bd0 <hri_sercomi2cm_set_CTRLB_SMEN_bit>:
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
	return ((Sercom *)hw)->USART.CTRLA.reg;
}

static inline void hri_sercomi2cm_set_CTRLB_SMEN_bit(const void *const hw)
{
    5bd0:	b580      	push	{r7, lr}
    5bd2:	b082      	sub	sp, #8
    5bd4:	af00      	add	r7, sp, #0
    5bd6:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_SMEN;
    5bd8:	687b      	ldr	r3, [r7, #4]
    5bda:	685b      	ldr	r3, [r3, #4]
    5bdc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
    5be0:	687b      	ldr	r3, [r7, #4]
    5be2:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    5be4:	2104      	movs	r1, #4
    5be6:	6878      	ldr	r0, [r7, #4]
    5be8:	4b02      	ldr	r3, [pc, #8]	; (5bf4 <hri_sercomi2cm_set_CTRLB_SMEN_bit+0x24>)
    5bea:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5bec:	bf00      	nop
    5bee:	3708      	adds	r7, #8
    5bf0:	46bd      	mov	sp, r7
    5bf2:	bd80      	pop	{r7, pc}
    5bf4:	00005855 	.word	0x00005855

00005bf8 <hri_sercomi2cm_clear_CTRLB_SMEN_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_clear_CTRLB_SMEN_bit(const void *const hw)
{
    5bf8:	b580      	push	{r7, lr}
    5bfa:	b082      	sub	sp, #8
    5bfc:	af00      	add	r7, sp, #0
    5bfe:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_SMEN;
    5c00:	687b      	ldr	r3, [r7, #4]
    5c02:	685b      	ldr	r3, [r3, #4]
    5c04:	f423 7280 	bic.w	r2, r3, #256	; 0x100
    5c08:	687b      	ldr	r3, [r7, #4]
    5c0a:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    5c0c:	2104      	movs	r1, #4
    5c0e:	6878      	ldr	r0, [r7, #4]
    5c10:	4b02      	ldr	r3, [pc, #8]	; (5c1c <hri_sercomi2cm_clear_CTRLB_SMEN_bit+0x24>)
    5c12:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5c14:	bf00      	nop
    5c16:	3708      	adds	r7, #8
    5c18:	46bd      	mov	sp, r7
    5c1a:	bd80      	pop	{r7, pc}
    5c1c:	00005855 	.word	0x00005855

00005c20 <hri_sercomi2cm_set_CTRLB_ACKACT_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_set_CTRLB_ACKACT_bit(const void *const hw)
{
    5c20:	b580      	push	{r7, lr}
    5c22:	b082      	sub	sp, #8
    5c24:	af00      	add	r7, sp, #0
    5c26:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    5c28:	687b      	ldr	r3, [r7, #4]
    5c2a:	685b      	ldr	r3, [r3, #4]
    5c2c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
    5c30:	687b      	ldr	r3, [r7, #4]
    5c32:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    5c34:	2104      	movs	r1, #4
    5c36:	6878      	ldr	r0, [r7, #4]
    5c38:	4b02      	ldr	r3, [pc, #8]	; (5c44 <hri_sercomi2cm_set_CTRLB_ACKACT_bit+0x24>)
    5c3a:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5c3c:	bf00      	nop
    5c3e:	3708      	adds	r7, #8
    5c40:	46bd      	mov	sp, r7
    5c42:	bd80      	pop	{r7, pc}
    5c44:	00005855 	.word	0x00005855

00005c48 <hri_sercomi2cm_clear_CTRLB_ACKACT_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_clear_CTRLB_ACKACT_bit(const void *const hw)
{
    5c48:	b580      	push	{r7, lr}
    5c4a:	b082      	sub	sp, #8
    5c4c:	af00      	add	r7, sp, #0
    5c4e:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    5c50:	687b      	ldr	r3, [r7, #4]
    5c52:	685b      	ldr	r3, [r3, #4]
    5c54:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
    5c58:	687b      	ldr	r3, [r7, #4]
    5c5a:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    5c5c:	2104      	movs	r1, #4
    5c5e:	6878      	ldr	r0, [r7, #4]
    5c60:	4b02      	ldr	r3, [pc, #8]	; (5c6c <hri_sercomi2cm_clear_CTRLB_ACKACT_bit+0x24>)
    5c62:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5c64:	bf00      	nop
    5c66:	3708      	adds	r7, #8
    5c68:	46bd      	mov	sp, r7
    5c6a:	bd80      	pop	{r7, pc}
    5c6c:	00005855 	.word	0x00005855

00005c70 <hri_sercomi2cm_set_CTRLB_CMD_bf>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_set_CTRLB_CMD_bf(const void *const hw, hri_sercomi2cm_ctrlb_reg_t mask)
{
    5c70:	b580      	push	{r7, lr}
    5c72:	b082      	sub	sp, #8
    5c74:	af00      	add	r7, sp, #0
    5c76:	6078      	str	r0, [r7, #4]
    5c78:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    5c7a:	687b      	ldr	r3, [r7, #4]
    5c7c:	685a      	ldr	r2, [r3, #4]
    5c7e:	683b      	ldr	r3, [r7, #0]
    5c80:	041b      	lsls	r3, r3, #16
    5c82:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
    5c86:	431a      	orrs	r2, r3
    5c88:	687b      	ldr	r3, [r7, #4]
    5c8a:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    5c8c:	2104      	movs	r1, #4
    5c8e:	6878      	ldr	r0, [r7, #4]
    5c90:	4b02      	ldr	r3, [pc, #8]	; (5c9c <hri_sercomi2cm_set_CTRLB_CMD_bf+0x2c>)
    5c92:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5c94:	bf00      	nop
    5c96:	3708      	adds	r7, #8
    5c98:	46bd      	mov	sp, r7
    5c9a:	bd80      	pop	{r7, pc}
    5c9c:	00005855 	.word	0x00005855

00005ca0 <hri_sercomi2cm_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_CTRLB_reg(const void *const hw, hri_sercomi2cm_ctrlb_reg_t data)
{
    5ca0:	b580      	push	{r7, lr}
    5ca2:	b082      	sub	sp, #8
    5ca4:	af00      	add	r7, sp, #0
    5ca6:	6078      	str	r0, [r7, #4]
    5ca8:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg = data;
    5caa:	687b      	ldr	r3, [r7, #4]
    5cac:	683a      	ldr	r2, [r7, #0]
    5cae:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    5cb0:	2104      	movs	r1, #4
    5cb2:	6878      	ldr	r0, [r7, #4]
    5cb4:	4b02      	ldr	r3, [pc, #8]	; (5cc0 <hri_sercomi2cm_write_CTRLB_reg+0x20>)
    5cb6:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5cb8:	bf00      	nop
    5cba:	3708      	adds	r7, #8
    5cbc:	46bd      	mov	sp, r7
    5cbe:	bd80      	pop	{r7, pc}
    5cc0:	00005855 	.word	0x00005855

00005cc4 <hri_sercomspi_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_CTRLB_reg(const void *const hw, hri_sercomspi_ctrlb_reg_t data)
{
    5cc4:	b580      	push	{r7, lr}
    5cc6:	b082      	sub	sp, #8
    5cc8:	af00      	add	r7, sp, #0
    5cca:	6078      	str	r0, [r7, #4]
    5ccc:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    5cce:	687b      	ldr	r3, [r7, #4]
    5cd0:	683a      	ldr	r2, [r7, #0]
    5cd2:	605a      	str	r2, [r3, #4]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_MASK);
    5cd4:	2117      	movs	r1, #23
    5cd6:	6878      	ldr	r0, [r7, #4]
    5cd8:	4b02      	ldr	r3, [pc, #8]	; (5ce4 <hri_sercomspi_write_CTRLB_reg+0x20>)
    5cda:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5cdc:	bf00      	nop
    5cde:	3708      	adds	r7, #8
    5ce0:	46bd      	mov	sp, r7
    5ce2:	bd80      	pop	{r7, pc}
    5ce4:	000058a1 	.word	0x000058a1

00005ce8 <hri_sercomi2cm_write_BAUD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_BAUD_reg(const void *const hw, hri_sercomi2cm_baud_reg_t data)
{
    5ce8:	b480      	push	{r7}
    5cea:	b083      	sub	sp, #12
    5cec:	af00      	add	r7, sp, #0
    5cee:	6078      	str	r0, [r7, #4]
    5cf0:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.BAUD.reg = data;
    5cf2:	687b      	ldr	r3, [r7, #4]
    5cf4:	683a      	ldr	r2, [r7, #0]
    5cf6:	60da      	str	r2, [r3, #12]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5cf8:	bf00      	nop
    5cfa:	370c      	adds	r7, #12
    5cfc:	46bd      	mov	sp, r7
    5cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
    5d02:	4770      	bx	lr

00005d04 <hri_sercomspi_write_BAUD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_BAUD_reg(const void *const hw, hri_sercomspi_baud_reg_t data)
{
    5d04:	b480      	push	{r7}
    5d06:	b083      	sub	sp, #12
    5d08:	af00      	add	r7, sp, #0
    5d0a:	6078      	str	r0, [r7, #4]
    5d0c:	460b      	mov	r3, r1
    5d0e:	70fb      	strb	r3, [r7, #3]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.BAUD.reg = data;
    5d10:	687b      	ldr	r3, [r7, #4]
    5d12:	78fa      	ldrb	r2, [r7, #3]
    5d14:	731a      	strb	r2, [r3, #12]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5d16:	bf00      	nop
    5d18:	370c      	adds	r7, #12
    5d1a:	46bd      	mov	sp, r7
    5d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
    5d20:	4770      	bx	lr
	...

00005d24 <hri_sercomi2cm_write_ADDR_HS_bit>:
	tmp = (tmp & SERCOM_I2CM_ADDR_HS) >> SERCOM_I2CM_ADDR_HS_Pos;
	return (bool)tmp;
}

static inline void hri_sercomi2cm_write_ADDR_HS_bit(const void *const hw, bool value)
{
    5d24:	b580      	push	{r7, lr}
    5d26:	b084      	sub	sp, #16
    5d28:	af00      	add	r7, sp, #0
    5d2a:	6078      	str	r0, [r7, #4]
    5d2c:	460b      	mov	r3, r1
    5d2e:	70fb      	strb	r3, [r7, #3]
	uint32_t tmp;
	SERCOM_CRITICAL_SECTION_ENTER();
	tmp = ((Sercom *)hw)->I2CM.ADDR.reg;
    5d30:	687b      	ldr	r3, [r7, #4]
    5d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    5d34:	60fb      	str	r3, [r7, #12]
	tmp &= ~SERCOM_I2CM_ADDR_HS;
    5d36:	68fb      	ldr	r3, [r7, #12]
    5d38:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    5d3c:	60fb      	str	r3, [r7, #12]
	tmp |= value << SERCOM_I2CM_ADDR_HS_Pos;
    5d3e:	78fb      	ldrb	r3, [r7, #3]
    5d40:	039b      	lsls	r3, r3, #14
    5d42:	461a      	mov	r2, r3
    5d44:	68fb      	ldr	r3, [r7, #12]
    5d46:	4313      	orrs	r3, r2
    5d48:	60fb      	str	r3, [r7, #12]
	((Sercom *)hw)->I2CM.ADDR.reg = tmp;
    5d4a:	687b      	ldr	r3, [r7, #4]
    5d4c:	68fa      	ldr	r2, [r7, #12]
    5d4e:	625a      	str	r2, [r3, #36]	; 0x24
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    5d50:	2104      	movs	r1, #4
    5d52:	6878      	ldr	r0, [r7, #4]
    5d54:	4b02      	ldr	r3, [pc, #8]	; (5d60 <hri_sercomi2cm_write_ADDR_HS_bit+0x3c>)
    5d56:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5d58:	bf00      	nop
    5d5a:	3710      	adds	r7, #16
    5d5c:	46bd      	mov	sp, r7
    5d5e:	bd80      	pop	{r7, pc}
    5d60:	00005855 	.word	0x00005855

00005d64 <hri_sercomi2cm_write_ADDR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_ADDR_reg(const void *const hw, hri_sercomi2cm_addr_reg_t data)
{
    5d64:	b580      	push	{r7, lr}
    5d66:	b082      	sub	sp, #8
    5d68:	af00      	add	r7, sp, #0
    5d6a:	6078      	str	r0, [r7, #4]
    5d6c:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    5d6e:	687b      	ldr	r3, [r7, #4]
    5d70:	683a      	ldr	r2, [r7, #0]
    5d72:	625a      	str	r2, [r3, #36]	; 0x24
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    5d74:	2104      	movs	r1, #4
    5d76:	6878      	ldr	r0, [r7, #4]
    5d78:	4b02      	ldr	r3, [pc, #8]	; (5d84 <hri_sercomi2cm_write_ADDR_reg+0x20>)
    5d7a:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5d7c:	bf00      	nop
    5d7e:	3708      	adds	r7, #8
    5d80:	46bd      	mov	sp, r7
    5d82:	bd80      	pop	{r7, pc}
    5d84:	00005855 	.word	0x00005855

00005d88 <hri_sercomi2cm_read_ADDR_reg>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_addr_reg_t hri_sercomi2cm_read_ADDR_reg(const void *const hw)
{
    5d88:	b580      	push	{r7, lr}
    5d8a:	b082      	sub	sp, #8
    5d8c:	af00      	add	r7, sp, #0
    5d8e:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    5d90:	2104      	movs	r1, #4
    5d92:	6878      	ldr	r0, [r7, #4]
    5d94:	4b03      	ldr	r3, [pc, #12]	; (5da4 <hri_sercomi2cm_read_ADDR_reg+0x1c>)
    5d96:	4798      	blx	r3
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    5d98:	687b      	ldr	r3, [r7, #4]
    5d9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
    5d9c:	4618      	mov	r0, r3
    5d9e:	3708      	adds	r7, #8
    5da0:	46bd      	mov	sp, r7
    5da2:	bd80      	pop	{r7, pc}
    5da4:	00005855 	.word	0x00005855

00005da8 <hri_sercomspi_write_ADDR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_ADDR_reg(const void *const hw, hri_sercomspi_addr_reg_t data)
{
    5da8:	b480      	push	{r7}
    5daa:	b083      	sub	sp, #12
    5dac:	af00      	add	r7, sp, #0
    5dae:	6078      	str	r0, [r7, #4]
    5db0:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.ADDR.reg = data;
    5db2:	687b      	ldr	r3, [r7, #4]
    5db4:	683a      	ldr	r2, [r7, #0]
    5db6:	625a      	str	r2, [r3, #36]	; 0x24
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5db8:	bf00      	nop
    5dba:	370c      	adds	r7, #12
    5dbc:	46bd      	mov	sp, r7
    5dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
    5dc2:	4770      	bx	lr

00005dc4 <hri_sercomi2cm_write_DATA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_DATA_reg(const void *const hw, hri_sercomi2cm_data_reg_t data)
{
    5dc4:	b580      	push	{r7, lr}
    5dc6:	b082      	sub	sp, #8
    5dc8:	af00      	add	r7, sp, #0
    5dca:	6078      	str	r0, [r7, #4]
    5dcc:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.DATA.reg = data;
    5dce:	687b      	ldr	r3, [r7, #4]
    5dd0:	683a      	ldr	r2, [r7, #0]
    5dd2:	629a      	str	r2, [r3, #40]	; 0x28
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    5dd4:	2104      	movs	r1, #4
    5dd6:	6878      	ldr	r0, [r7, #4]
    5dd8:	4b02      	ldr	r3, [pc, #8]	; (5de4 <hri_sercomi2cm_write_DATA_reg+0x20>)
    5dda:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5ddc:	bf00      	nop
    5dde:	3708      	adds	r7, #8
    5de0:	46bd      	mov	sp, r7
    5de2:	bd80      	pop	{r7, pc}
    5de4:	00005855 	.word	0x00005855

00005de8 <hri_sercomi2cm_read_DATA_reg>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_data_reg_t hri_sercomi2cm_read_DATA_reg(const void *const hw)
{
    5de8:	b580      	push	{r7, lr}
    5dea:	b082      	sub	sp, #8
    5dec:	af00      	add	r7, sp, #0
    5dee:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    5df0:	2104      	movs	r1, #4
    5df2:	6878      	ldr	r0, [r7, #4]
    5df4:	4b03      	ldr	r3, [pc, #12]	; (5e04 <hri_sercomi2cm_read_DATA_reg+0x1c>)
    5df6:	4798      	blx	r3
	return ((Sercom *)hw)->I2CM.DATA.reg;
    5df8:	687b      	ldr	r3, [r7, #4]
    5dfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
    5dfc:	4618      	mov	r0, r3
    5dfe:	3708      	adds	r7, #8
    5e00:	46bd      	mov	sp, r7
    5e02:	bd80      	pop	{r7, pc}
    5e04:	00005855 	.word	0x00005855

00005e08 <hri_sercomspi_write_DATA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_DATA_reg(const void *const hw, hri_sercomspi_data_reg_t data)
{
    5e08:	b480      	push	{r7}
    5e0a:	b083      	sub	sp, #12
    5e0c:	af00      	add	r7, sp, #0
    5e0e:	6078      	str	r0, [r7, #4]
    5e10:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.DATA.reg = data;
    5e12:	687b      	ldr	r3, [r7, #4]
    5e14:	683a      	ldr	r2, [r7, #0]
    5e16:	629a      	str	r2, [r3, #40]	; 0x28
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5e18:	bf00      	nop
    5e1a:	370c      	adds	r7, #12
    5e1c:	46bd      	mov	sp, r7
    5e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
    5e22:	4770      	bx	lr

00005e24 <hri_sercomspi_read_DATA_reg>:
	((Sercom *)hw)->SPI.DATA.reg ^= mask;
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomspi_data_reg_t hri_sercomspi_read_DATA_reg(const void *const hw)
{
    5e24:	b480      	push	{r7}
    5e26:	b083      	sub	sp, #12
    5e28:	af00      	add	r7, sp, #0
    5e2a:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->SPI.DATA.reg;
    5e2c:	687b      	ldr	r3, [r7, #4]
    5e2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
    5e30:	4618      	mov	r0, r3
    5e32:	370c      	adds	r7, #12
    5e34:	46bd      	mov	sp, r7
    5e36:	f85d 7b04 	ldr.w	r7, [sp], #4
    5e3a:	4770      	bx	lr

00005e3c <hri_sercomspi_write_DBGCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_DBGCTRL_reg(const void *const hw, hri_sercomspi_dbgctrl_reg_t data)
{
    5e3c:	b480      	push	{r7}
    5e3e:	b083      	sub	sp, #12
    5e40:	af00      	add	r7, sp, #0
    5e42:	6078      	str	r0, [r7, #4]
    5e44:	460b      	mov	r3, r1
    5e46:	70fb      	strb	r3, [r7, #3]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    5e48:	687b      	ldr	r3, [r7, #4]
    5e4a:	78fa      	ldrb	r2, [r7, #3]
    5e4c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5e50:	bf00      	nop
    5e52:	370c      	adds	r7, #12
    5e54:	46bd      	mov	sp, r7
    5e56:	f85d 7b04 	ldr.w	r7, [sp], #4
    5e5a:	4770      	bx	lr

00005e5c <hri_sercomspi_clear_STATUS_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_clear_STATUS_reg(const void *const hw, hri_sercomspi_status_reg_t mask)
{
    5e5c:	b480      	push	{r7}
    5e5e:	b083      	sub	sp, #12
    5e60:	af00      	add	r7, sp, #0
    5e62:	6078      	str	r0, [r7, #4]
    5e64:	460b      	mov	r3, r1
    5e66:	807b      	strh	r3, [r7, #2]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.STATUS.reg = mask;
    5e68:	687b      	ldr	r3, [r7, #4]
    5e6a:	887a      	ldrh	r2, [r7, #2]
    5e6c:	835a      	strh	r2, [r3, #26]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5e6e:	bf00      	nop
    5e70:	370c      	adds	r7, #12
    5e72:	46bd      	mov	sp, r7
    5e74:	f85d 7b04 	ldr.w	r7, [sp], #4
    5e78:	4770      	bx	lr
	...

00005e7c <hri_sercomi2cm_read_STATUS_reg>:
{
	((Sercom *)hw)->I2CM.STATUS.reg |= mask;
}

static inline hri_sercomi2cm_status_reg_t hri_sercomi2cm_read_STATUS_reg(const void *const hw)
{
    5e7c:	b580      	push	{r7, lr}
    5e7e:	b082      	sub	sp, #8
    5e80:	af00      	add	r7, sp, #0
    5e82:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    5e84:	2104      	movs	r1, #4
    5e86:	6878      	ldr	r0, [r7, #4]
    5e88:	4b04      	ldr	r3, [pc, #16]	; (5e9c <hri_sercomi2cm_read_STATUS_reg+0x20>)
    5e8a:	4798      	blx	r3
	return ((Sercom *)hw)->I2CM.STATUS.reg;
    5e8c:	687b      	ldr	r3, [r7, #4]
    5e8e:	8b5b      	ldrh	r3, [r3, #26]
    5e90:	b29b      	uxth	r3, r3
}
    5e92:	4618      	mov	r0, r3
    5e94:	3708      	adds	r7, #8
    5e96:	46bd      	mov	sp, r7
    5e98:	bd80      	pop	{r7, pc}
    5e9a:	bf00      	nop
    5e9c:	00005855 	.word	0x00005855

00005ea0 <_sercom_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given sercom hardware instance
 */
static uint8_t _sercom_get_hardware_index(const void *const hw)
{
    5ea0:	b4b0      	push	{r4, r5, r7}
    5ea2:	b08d      	sub	sp, #52	; 0x34
    5ea4:	af00      	add	r7, sp, #0
    5ea6:	6078      	str	r0, [r7, #4]
	Sercom *const sercom_modules[] = SERCOM_INSTS;
    5ea8:	4b13      	ldr	r3, [pc, #76]	; (5ef8 <_sercom_get_hardware_index+0x58>)
    5eaa:	f107 040c 	add.w	r4, r7, #12
    5eae:	461d      	mov	r5, r3
    5eb0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    5eb2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    5eb4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    5eb8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	/* Find index for SERCOM instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    5ebc:	2300      	movs	r3, #0
    5ebe:	62fb      	str	r3, [r7, #44]	; 0x2c
    5ec0:	e010      	b.n	5ee4 <_sercom_get_hardware_index+0x44>
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
    5ec2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    5ec4:	009b      	lsls	r3, r3, #2
    5ec6:	f107 0230 	add.w	r2, r7, #48	; 0x30
    5eca:	4413      	add	r3, r2
    5ecc:	f853 3c24 	ldr.w	r3, [r3, #-36]
    5ed0:	461a      	mov	r2, r3
    5ed2:	687b      	ldr	r3, [r7, #4]
    5ed4:	429a      	cmp	r2, r3
    5ed6:	d102      	bne.n	5ede <_sercom_get_hardware_index+0x3e>
			return i;
    5ed8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    5eda:	b2db      	uxtb	r3, r3
    5edc:	e006      	b.n	5eec <_sercom_get_hardware_index+0x4c>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    5ede:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    5ee0:	3301      	adds	r3, #1
    5ee2:	62fb      	str	r3, [r7, #44]	; 0x2c
    5ee4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    5ee6:	2b07      	cmp	r3, #7
    5ee8:	d9eb      	bls.n	5ec2 <_sercom_get_hardware_index+0x22>
		}
	}
	return 0;
    5eea:	2300      	movs	r3, #0
}
    5eec:	4618      	mov	r0, r3
    5eee:	3734      	adds	r7, #52	; 0x34
    5ef0:	46bd      	mov	sp, r7
    5ef2:	bcb0      	pop	{r4, r5, r7}
    5ef4:	4770      	bx	lr
    5ef6:	bf00      	nop
    5ef8:	00013104 	.word	0x00013104

00005efc <_sercom_init_irq_param>:

/**
 * \brief Init irq param with the given sercom hardware instance
 */
static void _sercom_init_irq_param(const void *const hw, void *dev)
{
    5efc:	b480      	push	{r7}
    5efe:	b083      	sub	sp, #12
    5f00:	af00      	add	r7, sp, #0
    5f02:	6078      	str	r0, [r7, #4]
    5f04:	6039      	str	r1, [r7, #0]

	if (hw == SERCOM4) {
    5f06:	687b      	ldr	r3, [r7, #4]
    5f08:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
    5f0c:	d102      	bne.n	5f14 <_sercom_init_irq_param+0x18>
		_sercom4_dev = (struct _spi_async_dev *)dev;
    5f0e:	4a0b      	ldr	r2, [pc, #44]	; (5f3c <_sercom_init_irq_param+0x40>)
    5f10:	683b      	ldr	r3, [r7, #0]
    5f12:	6013      	str	r3, [r2, #0]
	}

	if (hw == SERCOM5) {
    5f14:	687b      	ldr	r3, [r7, #4]
    5f16:	4a0a      	ldr	r2, [pc, #40]	; (5f40 <_sercom_init_irq_param+0x44>)
    5f18:	4293      	cmp	r3, r2
    5f1a:	d102      	bne.n	5f22 <_sercom_init_irq_param+0x26>
		_sercom5_dev = (struct _i2c_m_async_device *)dev;
    5f1c:	4a09      	ldr	r2, [pc, #36]	; (5f44 <_sercom_init_irq_param+0x48>)
    5f1e:	683b      	ldr	r3, [r7, #0]
    5f20:	6013      	str	r3, [r2, #0]
	}

	if (hw == SERCOM7) {
    5f22:	687b      	ldr	r3, [r7, #4]
    5f24:	4a08      	ldr	r2, [pc, #32]	; (5f48 <_sercom_init_irq_param+0x4c>)
    5f26:	4293      	cmp	r3, r2
    5f28:	d102      	bne.n	5f30 <_sercom_init_irq_param+0x34>
		_sercom7_dev = (struct _i2c_m_async_device *)dev;
    5f2a:	4a08      	ldr	r2, [pc, #32]	; (5f4c <_sercom_init_irq_param+0x50>)
    5f2c:	683b      	ldr	r3, [r7, #0]
    5f2e:	6013      	str	r3, [r2, #0]
	}
}
    5f30:	bf00      	nop
    5f32:	370c      	adds	r7, #12
    5f34:	46bd      	mov	sp, r7
    5f36:	f85d 7b04 	ldr.w	r7, [sp], #4
    5f3a:	4770      	bx	lr
    5f3c:	20000c14 	.word	0x20000c14
    5f40:	43000400 	.word	0x43000400
    5f44:	20000c18 	.word	0x20000c18
    5f48:	43000c00 	.word	0x43000c00
    5f4c:	20000c1c 	.word	0x20000c1c

00005f50 <_get_i2cm_index>:
 * \param[in] hw The pointer to hardware instance

 * \return The ordinal number of the given sercom hardware instance
 */
static int8_t _get_i2cm_index(const void *const hw)
{
    5f50:	b580      	push	{r7, lr}
    5f52:	b084      	sub	sp, #16
    5f54:	af00      	add	r7, sp, #0
    5f56:	6078      	str	r0, [r7, #4]
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
    5f58:	6878      	ldr	r0, [r7, #4]
    5f5a:	4b13      	ldr	r3, [pc, #76]	; (5fa8 <_get_i2cm_index+0x58>)
    5f5c:	4798      	blx	r3
    5f5e:	4603      	mov	r3, r0
    5f60:	73bb      	strb	r3, [r7, #14]
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_i2cms); i++) {
    5f62:	2300      	movs	r3, #0
    5f64:	73fb      	strb	r3, [r7, #15]
    5f66:	e010      	b.n	5f8a <_get_i2cm_index+0x3a>
		if (_i2cms[i].number == sercom_offset) {
    5f68:	7bfa      	ldrb	r2, [r7, #15]
    5f6a:	4910      	ldr	r1, [pc, #64]	; (5fac <_get_i2cm_index+0x5c>)
    5f6c:	4613      	mov	r3, r2
    5f6e:	005b      	lsls	r3, r3, #1
    5f70:	4413      	add	r3, r2
    5f72:	00db      	lsls	r3, r3, #3
    5f74:	440b      	add	r3, r1
    5f76:	781b      	ldrb	r3, [r3, #0]
    5f78:	7bba      	ldrb	r2, [r7, #14]
    5f7a:	429a      	cmp	r2, r3
    5f7c:	d102      	bne.n	5f84 <_get_i2cm_index+0x34>
			return i;
    5f7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
    5f82:	e00d      	b.n	5fa0 <_get_i2cm_index+0x50>
	for (i = 0; i < ARRAY_SIZE(_i2cms); i++) {
    5f84:	7bfb      	ldrb	r3, [r7, #15]
    5f86:	3301      	adds	r3, #1
    5f88:	73fb      	strb	r3, [r7, #15]
    5f8a:	7bfb      	ldrb	r3, [r7, #15]
    5f8c:	2b01      	cmp	r3, #1
    5f8e:	d9eb      	bls.n	5f68 <_get_i2cm_index+0x18>
		}
	}

	ASSERT(false);
    5f90:	f44f 726e 	mov.w	r2, #952	; 0x3b8
    5f94:	4906      	ldr	r1, [pc, #24]	; (5fb0 <_get_i2cm_index+0x60>)
    5f96:	2000      	movs	r0, #0
    5f98:	4b06      	ldr	r3, [pc, #24]	; (5fb4 <_get_i2cm_index+0x64>)
    5f9a:	4798      	blx	r3
	return -1;
    5f9c:	f04f 33ff 	mov.w	r3, #4294967295
}
    5fa0:	4618      	mov	r0, r3
    5fa2:	3710      	adds	r7, #16
    5fa4:	46bd      	mov	sp, r7
    5fa6:	bd80      	pop	{r7, pc}
    5fa8:	00005ea1 	.word	0x00005ea1
    5fac:	20000018 	.word	0x20000018
    5fb0:	000130e8 	.word	0x000130e8
    5fb4:	00002ed9 	.word	0x00002ed9

00005fb8 <_sercom_i2c_send_stop>:

static inline void _sercom_i2c_send_stop(void *const hw)
{
    5fb8:	b580      	push	{r7, lr}
    5fba:	b082      	sub	sp, #8
    5fbc:	af00      	add	r7, sp, #0
    5fbe:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_set_CTRLB_CMD_bf(hw, CMD_STOP);
    5fc0:	2103      	movs	r1, #3
    5fc2:	6878      	ldr	r0, [r7, #4]
    5fc4:	4b02      	ldr	r3, [pc, #8]	; (5fd0 <_sercom_i2c_send_stop+0x18>)
    5fc6:	4798      	blx	r3
}
    5fc8:	bf00      	nop
    5fca:	3708      	adds	r7, #8
    5fcc:	46bd      	mov	sp, r7
    5fce:	bd80      	pop	{r7, pc}
    5fd0:	00005c71 	.word	0x00005c71

00005fd4 <_sercom_i2c_sync_analyse_flags>:

/**
 * \brief SERCOM I2CM analyze hardware status and transfer next byte
 */
static inline int32_t _sercom_i2c_sync_analyse_flags(void *const hw, uint32_t flags, struct _i2c_m_msg *const msg)
{
    5fd4:	b590      	push	{r4, r7, lr}
    5fd6:	b087      	sub	sp, #28
    5fd8:	af00      	add	r7, sp, #0
    5fda:	60f8      	str	r0, [r7, #12]
    5fdc:	60b9      	str	r1, [r7, #8]
    5fde:	607a      	str	r2, [r7, #4]
	int      sclsm  = hri_sercomi2cm_get_CTRLA_SCLSM_bit(hw);
    5fe0:	68f8      	ldr	r0, [r7, #12]
    5fe2:	4b7d      	ldr	r3, [pc, #500]	; (61d8 <_sercom_i2c_sync_analyse_flags+0x204>)
    5fe4:	4798      	blx	r3
    5fe6:	4603      	mov	r3, r0
    5fe8:	617b      	str	r3, [r7, #20]
	uint16_t status = hri_sercomi2cm_read_STATUS_reg(hw);
    5fea:	68f8      	ldr	r0, [r7, #12]
    5fec:	4b7b      	ldr	r3, [pc, #492]	; (61dc <_sercom_i2c_sync_analyse_flags+0x208>)
    5fee:	4798      	blx	r3
    5ff0:	4603      	mov	r3, r0
    5ff2:	827b      	strh	r3, [r7, #18]

	if (flags & MB_FLAG) {
    5ff4:	68bb      	ldr	r3, [r7, #8]
    5ff6:	f003 0301 	and.w	r3, r3, #1
    5ffa:	2b00      	cmp	r3, #0
    5ffc:	f000 8095 	beq.w	612a <_sercom_i2c_sync_analyse_flags+0x156>
		/* tx error */
		if (status & SERCOM_I2CM_STATUS_ARBLOST) {
    6000:	8a7b      	ldrh	r3, [r7, #18]
    6002:	f003 0302 	and.w	r3, r3, #2
    6006:	2b00      	cmp	r3, #0
    6008:	d01d      	beq.n	6046 <_sercom_i2c_sync_analyse_flags+0x72>
			hri_sercomi2cm_clear_interrupt_MB_bit(hw);
    600a:	68f8      	ldr	r0, [r7, #12]
    600c:	4b74      	ldr	r3, [pc, #464]	; (61e0 <_sercom_i2c_sync_analyse_flags+0x20c>)
    600e:	4798      	blx	r3
			msg->flags |= I2C_M_FAIL;
    6010:	687b      	ldr	r3, [r7, #4]
    6012:	885b      	ldrh	r3, [r3, #2]
    6014:	b29b      	uxth	r3, r3
    6016:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    601a:	b29a      	uxth	r2, r3
    601c:	687b      	ldr	r3, [r7, #4]
    601e:	805a      	strh	r2, [r3, #2]
			msg->flags &= ~I2C_M_BUSY;
    6020:	687b      	ldr	r3, [r7, #4]
    6022:	885b      	ldrh	r3, [r3, #2]
    6024:	b29b      	uxth	r3, r3
    6026:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    602a:	b29a      	uxth	r2, r3
    602c:	687b      	ldr	r3, [r7, #4]
    602e:	805a      	strh	r2, [r3, #2]

			if (status & SERCOM_I2CM_STATUS_BUSERR) {
    6030:	8a7b      	ldrh	r3, [r7, #18]
    6032:	f003 0301 	and.w	r3, r3, #1
    6036:	2b00      	cmp	r3, #0
    6038:	d002      	beq.n	6040 <_sercom_i2c_sync_analyse_flags+0x6c>
				return I2C_ERR_BUS;
    603a:	f06f 0304 	mvn.w	r3, #4
    603e:	e0c6      	b.n	61ce <_sercom_i2c_sync_analyse_flags+0x1fa>
			}

			return I2C_ERR_BAD_ADDRESS;
    6040:	f06f 0303 	mvn.w	r3, #3
    6044:	e0c3      	b.n	61ce <_sercom_i2c_sync_analyse_flags+0x1fa>
		} else {
			if (status & SERCOM_I2CM_STATUS_RXNACK) {
    6046:	8a7b      	ldrh	r3, [r7, #18]
    6048:	f003 0304 	and.w	r3, r3, #4
    604c:	2b00      	cmp	r3, #0
    604e:	d01f      	beq.n	6090 <_sercom_i2c_sync_analyse_flags+0xbc>

				/* Slave rejects to receive more data */
				if (msg->len > 0) {
    6050:	687b      	ldr	r3, [r7, #4]
    6052:	685b      	ldr	r3, [r3, #4]
    6054:	2b00      	cmp	r3, #0
    6056:	dd07      	ble.n	6068 <_sercom_i2c_sync_analyse_flags+0x94>
					msg->flags |= I2C_M_FAIL;
    6058:	687b      	ldr	r3, [r7, #4]
    605a:	885b      	ldrh	r3, [r3, #2]
    605c:	b29b      	uxth	r3, r3
    605e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    6062:	b29a      	uxth	r2, r3
    6064:	687b      	ldr	r3, [r7, #4]
    6066:	805a      	strh	r2, [r3, #2]
				}

				if (msg->flags & I2C_M_STOP) {
    6068:	687b      	ldr	r3, [r7, #4]
    606a:	885b      	ldrh	r3, [r3, #2]
    606c:	b29b      	uxth	r3, r3
    606e:	b21b      	sxth	r3, r3
    6070:	2b00      	cmp	r3, #0
    6072:	da02      	bge.n	607a <_sercom_i2c_sync_analyse_flags+0xa6>
					_sercom_i2c_send_stop(hw);
    6074:	68f8      	ldr	r0, [r7, #12]
    6076:	4b5b      	ldr	r3, [pc, #364]	; (61e4 <_sercom_i2c_sync_analyse_flags+0x210>)
    6078:	4798      	blx	r3
				}

				msg->flags &= ~I2C_M_BUSY;
    607a:	687b      	ldr	r3, [r7, #4]
    607c:	885b      	ldrh	r3, [r3, #2]
    607e:	b29b      	uxth	r3, r3
    6080:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    6084:	b29a      	uxth	r2, r3
    6086:	687b      	ldr	r3, [r7, #4]
    6088:	805a      	strh	r2, [r3, #2]

				return I2C_NACK;
    608a:	f06f 0301 	mvn.w	r3, #1
    608e:	e09e      	b.n	61ce <_sercom_i2c_sync_analyse_flags+0x1fa>
			}

			if (msg->flags & I2C_M_TEN) {
    6090:	687b      	ldr	r3, [r7, #4]
    6092:	885b      	ldrh	r3, [r3, #2]
    6094:	b29b      	uxth	r3, r3
    6096:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    609a:	2b00      	cmp	r3, #0
    609c:	d01c      	beq.n	60d8 <_sercom_i2c_sync_analyse_flags+0x104>
				hri_sercomi2cm_write_ADDR_reg(hw,
				                              ((((msg->addr & TEN_ADDR_MASK) >> 8) | TEN_ADDR_FRAME) << 1) | I2C_M_RD
    609e:	687b      	ldr	r3, [r7, #4]
    60a0:	881b      	ldrh	r3, [r3, #0]
    60a2:	121b      	asrs	r3, r3, #8
    60a4:	005b      	lsls	r3, r3, #1
				                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    60a6:	f003 0406 	and.w	r4, r3, #6
    60aa:	68f8      	ldr	r0, [r7, #12]
    60ac:	4b4e      	ldr	r3, [pc, #312]	; (61e8 <_sercom_i2c_sync_analyse_flags+0x214>)
    60ae:	4798      	blx	r3
    60b0:	4603      	mov	r3, r0
    60b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    60b6:	4323      	orrs	r3, r4
				hri_sercomi2cm_write_ADDR_reg(hw,
    60b8:	f043 03f1 	orr.w	r3, r3, #241	; 0xf1
    60bc:	4619      	mov	r1, r3
    60be:	68f8      	ldr	r0, [r7, #12]
    60c0:	4b4a      	ldr	r3, [pc, #296]	; (61ec <_sercom_i2c_sync_analyse_flags+0x218>)
    60c2:	4798      	blx	r3
				msg->flags &= ~I2C_M_TEN;
    60c4:	687b      	ldr	r3, [r7, #4]
    60c6:	885b      	ldrh	r3, [r3, #2]
    60c8:	b29b      	uxth	r3, r3
    60ca:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    60ce:	b29a      	uxth	r2, r3
    60d0:	687b      	ldr	r3, [r7, #4]
    60d2:	805a      	strh	r2, [r3, #2]

				return I2C_OK;
    60d4:	2300      	movs	r3, #0
    60d6:	e07a      	b.n	61ce <_sercom_i2c_sync_analyse_flags+0x1fa>
			}

			if (msg->len == 0) {
    60d8:	687b      	ldr	r3, [r7, #4]
    60da:	685b      	ldr	r3, [r3, #4]
    60dc:	2b00      	cmp	r3, #0
    60de:	d111      	bne.n	6104 <_sercom_i2c_sync_analyse_flags+0x130>
				if (msg->flags & I2C_M_STOP) {
    60e0:	687b      	ldr	r3, [r7, #4]
    60e2:	885b      	ldrh	r3, [r3, #2]
    60e4:	b29b      	uxth	r3, r3
    60e6:	b21b      	sxth	r3, r3
    60e8:	2b00      	cmp	r3, #0
    60ea:	da02      	bge.n	60f2 <_sercom_i2c_sync_analyse_flags+0x11e>
					_sercom_i2c_send_stop(hw);
    60ec:	68f8      	ldr	r0, [r7, #12]
    60ee:	4b3d      	ldr	r3, [pc, #244]	; (61e4 <_sercom_i2c_sync_analyse_flags+0x210>)
    60f0:	4798      	blx	r3
				}

				msg->flags &= ~I2C_M_BUSY;
    60f2:	687b      	ldr	r3, [r7, #4]
    60f4:	885b      	ldrh	r3, [r3, #2]
    60f6:	b29b      	uxth	r3, r3
    60f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    60fc:	b29a      	uxth	r2, r3
    60fe:	687b      	ldr	r3, [r7, #4]
    6100:	805a      	strh	r2, [r3, #2]
    6102:	e010      	b.n	6126 <_sercom_i2c_sync_analyse_flags+0x152>
			} else {
				hri_sercomi2cm_write_DATA_reg(hw, *msg->buffer);
    6104:	687b      	ldr	r3, [r7, #4]
    6106:	689b      	ldr	r3, [r3, #8]
    6108:	781b      	ldrb	r3, [r3, #0]
    610a:	4619      	mov	r1, r3
    610c:	68f8      	ldr	r0, [r7, #12]
    610e:	4b38      	ldr	r3, [pc, #224]	; (61f0 <_sercom_i2c_sync_analyse_flags+0x21c>)
    6110:	4798      	blx	r3
				msg->buffer++;
    6112:	687b      	ldr	r3, [r7, #4]
    6114:	689b      	ldr	r3, [r3, #8]
    6116:	1c5a      	adds	r2, r3, #1
    6118:	687b      	ldr	r3, [r7, #4]
    611a:	609a      	str	r2, [r3, #8]
				msg->len--;
    611c:	687b      	ldr	r3, [r7, #4]
    611e:	685b      	ldr	r3, [r3, #4]
    6120:	1e5a      	subs	r2, r3, #1
    6122:	687b      	ldr	r3, [r7, #4]
    6124:	605a      	str	r2, [r3, #4]
			}

			return I2C_OK;
    6126:	2300      	movs	r3, #0
    6128:	e051      	b.n	61ce <_sercom_i2c_sync_analyse_flags+0x1fa>
		}
	} else if (flags & SB_FLAG) {
    612a:	68bb      	ldr	r3, [r7, #8]
    612c:	f003 0302 	and.w	r3, r3, #2
    6130:	2b00      	cmp	r3, #0
    6132:	d04b      	beq.n	61cc <_sercom_i2c_sync_analyse_flags+0x1f8>
		if ((msg->len) && !(status & SERCOM_I2CM_STATUS_RXNACK)) {
    6134:	687b      	ldr	r3, [r7, #4]
    6136:	685b      	ldr	r3, [r3, #4]
    6138:	2b00      	cmp	r3, #0
    613a:	d041      	beq.n	61c0 <_sercom_i2c_sync_analyse_flags+0x1ec>
    613c:	8a7b      	ldrh	r3, [r7, #18]
    613e:	f003 0304 	and.w	r3, r3, #4
    6142:	2b00      	cmp	r3, #0
    6144:	d13c      	bne.n	61c0 <_sercom_i2c_sync_analyse_flags+0x1ec>
			msg->len--;
    6146:	687b      	ldr	r3, [r7, #4]
    6148:	685b      	ldr	r3, [r3, #4]
    614a:	1e5a      	subs	r2, r3, #1
    614c:	687b      	ldr	r3, [r7, #4]
    614e:	605a      	str	r2, [r3, #4]

			/* last byte, send nack */
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
    6150:	687b      	ldr	r3, [r7, #4]
    6152:	685b      	ldr	r3, [r3, #4]
    6154:	2b00      	cmp	r3, #0
    6156:	d102      	bne.n	615e <_sercom_i2c_sync_analyse_flags+0x18a>
    6158:	697b      	ldr	r3, [r7, #20]
    615a:	2b00      	cmp	r3, #0
    615c:	d006      	beq.n	616c <_sercom_i2c_sync_analyse_flags+0x198>
    615e:	687b      	ldr	r3, [r7, #4]
    6160:	685b      	ldr	r3, [r3, #4]
    6162:	2b01      	cmp	r3, #1
    6164:	d105      	bne.n	6172 <_sercom_i2c_sync_analyse_flags+0x19e>
    6166:	697b      	ldr	r3, [r7, #20]
    6168:	2b00      	cmp	r3, #0
    616a:	d002      	beq.n	6172 <_sercom_i2c_sync_analyse_flags+0x19e>
				hri_sercomi2cm_set_CTRLB_ACKACT_bit(hw);
    616c:	68f8      	ldr	r0, [r7, #12]
    616e:	4b21      	ldr	r3, [pc, #132]	; (61f4 <_sercom_i2c_sync_analyse_flags+0x220>)
    6170:	4798      	blx	r3
			}

			if (msg->len == 0) {
    6172:	687b      	ldr	r3, [r7, #4]
    6174:	685b      	ldr	r3, [r3, #4]
    6176:	2b00      	cmp	r3, #0
    6178:	d113      	bne.n	61a2 <_sercom_i2c_sync_analyse_flags+0x1ce>
				if (msg->flags & I2C_M_STOP) {
    617a:	687b      	ldr	r3, [r7, #4]
    617c:	885b      	ldrh	r3, [r3, #2]
    617e:	b29b      	uxth	r3, r3
    6180:	b21b      	sxth	r3, r3
    6182:	2b00      	cmp	r3, #0
    6184:	da05      	bge.n	6192 <_sercom_i2c_sync_analyse_flags+0x1be>
					hri_sercomi2cm_clear_CTRLB_SMEN_bit(hw);
    6186:	68f8      	ldr	r0, [r7, #12]
    6188:	4b1b      	ldr	r3, [pc, #108]	; (61f8 <_sercom_i2c_sync_analyse_flags+0x224>)
    618a:	4798      	blx	r3
					_sercom_i2c_send_stop(hw);
    618c:	68f8      	ldr	r0, [r7, #12]
    618e:	4b15      	ldr	r3, [pc, #84]	; (61e4 <_sercom_i2c_sync_analyse_flags+0x210>)
    6190:	4798      	blx	r3
				}

				msg->flags &= ~I2C_M_BUSY;
    6192:	687b      	ldr	r3, [r7, #4]
    6194:	885b      	ldrh	r3, [r3, #2]
    6196:	b29b      	uxth	r3, r3
    6198:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    619c:	b29a      	uxth	r2, r3
    619e:	687b      	ldr	r3, [r7, #4]
    61a0:	805a      	strh	r2, [r3, #2]

			/* Accessing DATA.DATA auto-triggers I2C bus operations.
			 * The operation performed depends on the state of
			 * CTRLB.ACKACT, CTRLB.SMEN
			 **/
			*msg->buffer++ = hri_sercomi2cm_read_DATA_reg(hw);
    61a2:	687b      	ldr	r3, [r7, #4]
    61a4:	689c      	ldr	r4, [r3, #8]
    61a6:	1c62      	adds	r2, r4, #1
    61a8:	687b      	ldr	r3, [r7, #4]
    61aa:	609a      	str	r2, [r3, #8]
    61ac:	68f8      	ldr	r0, [r7, #12]
    61ae:	4b13      	ldr	r3, [pc, #76]	; (61fc <_sercom_i2c_sync_analyse_flags+0x228>)
    61b0:	4798      	blx	r3
    61b2:	4603      	mov	r3, r0
    61b4:	b2db      	uxtb	r3, r3
    61b6:	7023      	strb	r3, [r4, #0]
		} else {
			hri_sercomi2cm_clear_interrupt_SB_bit(hw);
			return I2C_NACK;
		}

		hri_sercomi2cm_clear_interrupt_SB_bit(hw);
    61b8:	68f8      	ldr	r0, [r7, #12]
    61ba:	4b11      	ldr	r3, [pc, #68]	; (6200 <_sercom_i2c_sync_analyse_flags+0x22c>)
    61bc:	4798      	blx	r3
    61be:	e005      	b.n	61cc <_sercom_i2c_sync_analyse_flags+0x1f8>
			hri_sercomi2cm_clear_interrupt_SB_bit(hw);
    61c0:	68f8      	ldr	r0, [r7, #12]
    61c2:	4b0f      	ldr	r3, [pc, #60]	; (6200 <_sercom_i2c_sync_analyse_flags+0x22c>)
    61c4:	4798      	blx	r3
			return I2C_NACK;
    61c6:	f06f 0301 	mvn.w	r3, #1
    61ca:	e000      	b.n	61ce <_sercom_i2c_sync_analyse_flags+0x1fa>
	}

	return I2C_OK;
    61cc:	2300      	movs	r3, #0
}
    61ce:	4618      	mov	r0, r3
    61d0:	371c      	adds	r7, #28
    61d2:	46bd      	mov	sp, r7
    61d4:	bd90      	pop	{r4, r7, pc}
    61d6:	bf00      	nop
    61d8:	00005a99 	.word	0x00005a99
    61dc:	00005e7d 	.word	0x00005e7d
    61e0:	000058ed 	.word	0x000058ed
    61e4:	00005fb9 	.word	0x00005fb9
    61e8:	00005d89 	.word	0x00005d89
    61ec:	00005d65 	.word	0x00005d65
    61f0:	00005dc5 	.word	0x00005dc5
    61f4:	00005c21 	.word	0x00005c21
    61f8:	00005bf9 	.word	0x00005bf9
    61fc:	00005de9 	.word	0x00005de9
    6200:	00005907 	.word	0x00005907

00006204 <_sercom_i2c_m_irq_handler>:
 * \internal Sercom i2c master interrupt handler
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
static void _sercom_i2c_m_irq_handler(struct _i2c_m_async_device *i2c_dev)
{
    6204:	b580      	push	{r7, lr}
    6206:	b086      	sub	sp, #24
    6208:	af00      	add	r7, sp, #0
    620a:	6078      	str	r0, [r7, #4]
	void *   hw    = i2c_dev->hw;
    620c:	687b      	ldr	r3, [r7, #4]
    620e:	691b      	ldr	r3, [r3, #16]
    6210:	613b      	str	r3, [r7, #16]
	uint32_t flags = hri_sercomi2cm_read_INTFLAG_reg(hw);
    6212:	6938      	ldr	r0, [r7, #16]
    6214:	4b37      	ldr	r3, [pc, #220]	; (62f4 <_sercom_i2c_m_irq_handler+0xf0>)
    6216:	4798      	blx	r3
    6218:	4603      	mov	r3, r0
    621a:	60fb      	str	r3, [r7, #12]
	int32_t  ret   = I2C_OK;
    621c:	2300      	movs	r3, #0
    621e:	617b      	str	r3, [r7, #20]

	ASSERT(i2c_dev);
    6220:	687b      	ldr	r3, [r7, #4]
    6222:	2b00      	cmp	r3, #0
    6224:	bf14      	ite	ne
    6226:	2301      	movne	r3, #1
    6228:	2300      	moveq	r3, #0
    622a:	b2db      	uxtb	r3, r3
    622c:	f240 422a 	movw	r2, #1066	; 0x42a
    6230:	4931      	ldr	r1, [pc, #196]	; (62f8 <_sercom_i2c_m_irq_handler+0xf4>)
    6232:	4618      	mov	r0, r3
    6234:	4b31      	ldr	r3, [pc, #196]	; (62fc <_sercom_i2c_m_irq_handler+0xf8>)
    6236:	4798      	blx	r3
	ASSERT(i2c_dev->hw);
    6238:	687b      	ldr	r3, [r7, #4]
    623a:	691b      	ldr	r3, [r3, #16]
    623c:	2b00      	cmp	r3, #0
    623e:	bf14      	ite	ne
    6240:	2301      	movne	r3, #1
    6242:	2300      	moveq	r3, #0
    6244:	b2db      	uxtb	r3, r3
    6246:	f240 422b 	movw	r2, #1067	; 0x42b
    624a:	492b      	ldr	r1, [pc, #172]	; (62f8 <_sercom_i2c_m_irq_handler+0xf4>)
    624c:	4618      	mov	r0, r3
    624e:	4b2b      	ldr	r3, [pc, #172]	; (62fc <_sercom_i2c_m_irq_handler+0xf8>)
    6250:	4798      	blx	r3

	while (!(flags & ERROR_FLAG)) {
    6252:	bf00      	nop
    6254:	68fb      	ldr	r3, [r7, #12]
    6256:	f003 0380 	and.w	r3, r3, #128	; 0x80
    625a:	2b00      	cmp	r3, #0
    625c:	d126      	bne.n	62ac <_sercom_i2c_m_irq_handler+0xa8>
		ret = _sercom_i2c_sync_analyse_flags(hw, flags, &i2c_dev->service.msg);
    625e:	687b      	ldr	r3, [r7, #4]
    6260:	461a      	mov	r2, r3
    6262:	68f9      	ldr	r1, [r7, #12]
    6264:	6938      	ldr	r0, [r7, #16]
    6266:	4b26      	ldr	r3, [pc, #152]	; (6300 <_sercom_i2c_m_irq_handler+0xfc>)
    6268:	4798      	blx	r3
    626a:	6178      	str	r0, [r7, #20]

		if (ret != 0) {
    626c:	697b      	ldr	r3, [r7, #20]
    626e:	2b00      	cmp	r3, #0
    6270:	d11b      	bne.n	62aa <_sercom_i2c_m_irq_handler+0xa6>
			break;
		}

		/* app callback */
		if ((flags & MB_FLAG) && i2c_dev->cb.tx_complete) {
    6272:	68fb      	ldr	r3, [r7, #12]
    6274:	f003 0301 	and.w	r3, r3, #1
    6278:	2b00      	cmp	r3, #0
    627a:	d008      	beq.n	628e <_sercom_i2c_m_irq_handler+0x8a>
    627c:	687b      	ldr	r3, [r7, #4]
    627e:	699b      	ldr	r3, [r3, #24]
    6280:	2b00      	cmp	r3, #0
    6282:	d004      	beq.n	628e <_sercom_i2c_m_irq_handler+0x8a>
			i2c_dev->cb.tx_complete(i2c_dev);
    6284:	687b      	ldr	r3, [r7, #4]
    6286:	699b      	ldr	r3, [r3, #24]
    6288:	6878      	ldr	r0, [r7, #4]
    628a:	4798      	blx	r3
		} else if ((flags & SB_FLAG) && i2c_dev->cb.rx_complete) {
			i2c_dev->cb.rx_complete(i2c_dev);
		}

		return;
    628c:	e02e      	b.n	62ec <_sercom_i2c_m_irq_handler+0xe8>
		} else if ((flags & SB_FLAG) && i2c_dev->cb.rx_complete) {
    628e:	68fb      	ldr	r3, [r7, #12]
    6290:	f003 0302 	and.w	r3, r3, #2
    6294:	2b00      	cmp	r3, #0
    6296:	d029      	beq.n	62ec <_sercom_i2c_m_irq_handler+0xe8>
    6298:	687b      	ldr	r3, [r7, #4]
    629a:	69db      	ldr	r3, [r3, #28]
    629c:	2b00      	cmp	r3, #0
    629e:	d025      	beq.n	62ec <_sercom_i2c_m_irq_handler+0xe8>
			i2c_dev->cb.rx_complete(i2c_dev);
    62a0:	687b      	ldr	r3, [r7, #4]
    62a2:	69db      	ldr	r3, [r3, #28]
    62a4:	6878      	ldr	r0, [r7, #4]
    62a6:	4798      	blx	r3
		return;
    62a8:	e020      	b.n	62ec <_sercom_i2c_m_irq_handler+0xe8>
			break;
    62aa:	bf00      	nop
	}

	i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    62ac:	687b      	ldr	r3, [r7, #4]
    62ae:	885b      	ldrh	r3, [r3, #2]
    62b0:	b29b      	uxth	r3, r3
    62b2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    62b6:	b29a      	uxth	r2, r3
    62b8:	687b      	ldr	r3, [r7, #4]
    62ba:	805a      	strh	r2, [r3, #2]
	if (i2c_dev->cb.error) {
    62bc:	687b      	ldr	r3, [r7, #4]
    62be:	695b      	ldr	r3, [r3, #20]
    62c0:	2b00      	cmp	r3, #0
    62c2:	d014      	beq.n	62ee <_sercom_i2c_m_irq_handler+0xea>
		if (ret != I2C_OK) {
    62c4:	697b      	ldr	r3, [r7, #20]
    62c6:	2b00      	cmp	r3, #0
    62c8:	d005      	beq.n	62d6 <_sercom_i2c_m_irq_handler+0xd2>
			i2c_dev->cb.error(i2c_dev, ret);
    62ca:	687b      	ldr	r3, [r7, #4]
    62cc:	695b      	ldr	r3, [r3, #20]
    62ce:	6979      	ldr	r1, [r7, #20]
    62d0:	6878      	ldr	r0, [r7, #4]
    62d2:	4798      	blx	r3
    62d4:	e005      	b.n	62e2 <_sercom_i2c_m_irq_handler+0xde>
		} else {
			i2c_dev->cb.error(i2c_dev, I2C_ERR_BUS);
    62d6:	687b      	ldr	r3, [r7, #4]
    62d8:	695b      	ldr	r3, [r3, #20]
    62da:	f06f 0104 	mvn.w	r1, #4
    62de:	6878      	ldr	r0, [r7, #4]
    62e0:	4798      	blx	r3
		}
		hri_sercomi2cm_clear_INTFLAG_reg(hw, SERCOM_I2CM_INTFLAG_ERROR);
    62e2:	2180      	movs	r1, #128	; 0x80
    62e4:	6938      	ldr	r0, [r7, #16]
    62e6:	4b07      	ldr	r3, [pc, #28]	; (6304 <_sercom_i2c_m_irq_handler+0x100>)
    62e8:	4798      	blx	r3
    62ea:	e000      	b.n	62ee <_sercom_i2c_m_irq_handler+0xea>
		return;
    62ec:	bf00      	nop
	}
}
    62ee:	3718      	adds	r7, #24
    62f0:	46bd      	mov	sp, r7
    62f2:	bd80      	pop	{r7, pc}
    62f4:	00005921 	.word	0x00005921
    62f8:	000130e8 	.word	0x000130e8
    62fc:	00002ed9 	.word	0x00002ed9
    6300:	00005fd5 	.word	0x00005fd5
    6304:	0000593b 	.word	0x0000593b

00006308 <_sercom_get_irq_num>:

/**
 * \brief Retrieve IRQ number for the given hardware instance
 */
static uint8_t _sercom_get_irq_num(const void *const hw)
{
    6308:	b580      	push	{r7, lr}
    630a:	b082      	sub	sp, #8
    630c:	af00      	add	r7, sp, #0
    630e:	6078      	str	r0, [r7, #4]
	return SERCOM0_0_IRQn + (_sercom_get_hardware_index(hw) << 2);
    6310:	6878      	ldr	r0, [r7, #4]
    6312:	4b05      	ldr	r3, [pc, #20]	; (6328 <_sercom_get_irq_num+0x20>)
    6314:	4798      	blx	r3
    6316:	4603      	mov	r3, r0
    6318:	009b      	lsls	r3, r3, #2
    631a:	b2db      	uxtb	r3, r3
    631c:	332e      	adds	r3, #46	; 0x2e
    631e:	b2db      	uxtb	r3, r3
}
    6320:	4618      	mov	r0, r3
    6322:	3708      	adds	r7, #8
    6324:	46bd      	mov	sp, r7
    6326:	bd80      	pop	{r7, pc}
    6328:	00005ea1 	.word	0x00005ea1

0000632c <_i2c_m_async_init>:
 * \brief Initialize sercom i2c module to use in async mode
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
int32_t _i2c_m_async_init(struct _i2c_m_async_device *const i2c_dev, void *const hw)
{
    632c:	b580      	push	{r7, lr}
    632e:	b086      	sub	sp, #24
    6330:	af00      	add	r7, sp, #0
    6332:	6078      	str	r0, [r7, #4]
    6334:	6039      	str	r1, [r7, #0]
	int32_t init_status;

	ASSERT(i2c_dev);
    6336:	687b      	ldr	r3, [r7, #4]
    6338:	2b00      	cmp	r3, #0
    633a:	bf14      	ite	ne
    633c:	2301      	movne	r3, #1
    633e:	2300      	moveq	r3, #0
    6340:	b2db      	uxtb	r3, r3
    6342:	f240 429e 	movw	r2, #1182	; 0x49e
    6346:	491d      	ldr	r1, [pc, #116]	; (63bc <_i2c_m_async_init+0x90>)
    6348:	4618      	mov	r0, r3
    634a:	4b1d      	ldr	r3, [pc, #116]	; (63c0 <_i2c_m_async_init+0x94>)
    634c:	4798      	blx	r3

	i2c_dev->hw = hw;
    634e:	687b      	ldr	r3, [r7, #4]
    6350:	683a      	ldr	r2, [r7, #0]
    6352:	611a      	str	r2, [r3, #16]

	init_status = _i2c_m_sync_init_impl(&i2c_dev->service, hw);
    6354:	687b      	ldr	r3, [r7, #4]
    6356:	6839      	ldr	r1, [r7, #0]
    6358:	4618      	mov	r0, r3
    635a:	4b1a      	ldr	r3, [pc, #104]	; (63c4 <_i2c_m_async_init+0x98>)
    635c:	4798      	blx	r3
    635e:	60f8      	str	r0, [r7, #12]
	if (init_status) {
    6360:	68fb      	ldr	r3, [r7, #12]
    6362:	2b00      	cmp	r3, #0
    6364:	d001      	beq.n	636a <_i2c_m_async_init+0x3e>
		return init_status;
    6366:	68fb      	ldr	r3, [r7, #12]
    6368:	e024      	b.n	63b4 <_i2c_m_async_init+0x88>
	}

	_sercom_init_irq_param(hw, (void *)i2c_dev);
    636a:	6879      	ldr	r1, [r7, #4]
    636c:	6838      	ldr	r0, [r7, #0]
    636e:	4b16      	ldr	r3, [pc, #88]	; (63c8 <_i2c_m_async_init+0x9c>)
    6370:	4798      	blx	r3
	uint8_t irq = _sercom_get_irq_num(hw);
    6372:	6838      	ldr	r0, [r7, #0]
    6374:	4b15      	ldr	r3, [pc, #84]	; (63cc <_i2c_m_async_init+0xa0>)
    6376:	4798      	blx	r3
    6378:	4603      	mov	r3, r0
    637a:	75fb      	strb	r3, [r7, #23]
	for (uint32_t i = 0; i < 4; i++) {
    637c:	2300      	movs	r3, #0
    637e:	613b      	str	r3, [r7, #16]
    6380:	e014      	b.n	63ac <_i2c_m_async_init+0x80>
		NVIC_DisableIRQ((IRQn_Type)irq);
    6382:	7dfb      	ldrb	r3, [r7, #23]
    6384:	b21b      	sxth	r3, r3
    6386:	4618      	mov	r0, r3
    6388:	4b11      	ldr	r3, [pc, #68]	; (63d0 <_i2c_m_async_init+0xa4>)
    638a:	4798      	blx	r3
		NVIC_ClearPendingIRQ((IRQn_Type)irq);
    638c:	7dfb      	ldrb	r3, [r7, #23]
    638e:	b21b      	sxth	r3, r3
    6390:	4618      	mov	r0, r3
    6392:	4b10      	ldr	r3, [pc, #64]	; (63d4 <_i2c_m_async_init+0xa8>)
    6394:	4798      	blx	r3
		NVIC_EnableIRQ((IRQn_Type)irq);
    6396:	7dfb      	ldrb	r3, [r7, #23]
    6398:	b21b      	sxth	r3, r3
    639a:	4618      	mov	r0, r3
    639c:	4b0e      	ldr	r3, [pc, #56]	; (63d8 <_i2c_m_async_init+0xac>)
    639e:	4798      	blx	r3
		irq++;
    63a0:	7dfb      	ldrb	r3, [r7, #23]
    63a2:	3301      	adds	r3, #1
    63a4:	75fb      	strb	r3, [r7, #23]
	for (uint32_t i = 0; i < 4; i++) {
    63a6:	693b      	ldr	r3, [r7, #16]
    63a8:	3301      	adds	r3, #1
    63aa:	613b      	str	r3, [r7, #16]
    63ac:	693b      	ldr	r3, [r7, #16]
    63ae:	2b03      	cmp	r3, #3
    63b0:	d9e7      	bls.n	6382 <_i2c_m_async_init+0x56>
	}
	return ERR_NONE;
    63b2:	2300      	movs	r3, #0
}
    63b4:	4618      	mov	r0, r3
    63b6:	3718      	adds	r7, #24
    63b8:	46bd      	mov	sp, r7
    63ba:	bd80      	pop	{r7, pc}
    63bc:	000130e8 	.word	0x000130e8
    63c0:	00002ed9 	.word	0x00002ed9
    63c4:	000065f5 	.word	0x000065f5
    63c8:	00005efd 	.word	0x00005efd
    63cc:	00006309 	.word	0x00006309
    63d0:	000057d5 	.word	0x000057d5
    63d4:	00005819 	.word	0x00005819
    63d8:	00005799 	.word	0x00005799

000063dc <_sercom_i2c_send_address>:
 * \brief Transfer the slave address to bus, which will start the transfer
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
static int32_t _sercom_i2c_send_address(struct _i2c_m_async_device *const i2c_dev)
{
    63dc:	b590      	push	{r4, r7, lr}
    63de:	b087      	sub	sp, #28
    63e0:	af00      	add	r7, sp, #0
    63e2:	6078      	str	r0, [r7, #4]
	void *             hw    = i2c_dev->hw;
    63e4:	687b      	ldr	r3, [r7, #4]
    63e6:	691b      	ldr	r3, [r3, #16]
    63e8:	617b      	str	r3, [r7, #20]
	struct _i2c_m_msg *msg   = &i2c_dev->service.msg;
    63ea:	687b      	ldr	r3, [r7, #4]
    63ec:	613b      	str	r3, [r7, #16]
	int                sclsm = hri_sercomi2cm_get_CTRLA_SCLSM_bit(hw);
    63ee:	6978      	ldr	r0, [r7, #20]
    63f0:	4b33      	ldr	r3, [pc, #204]	; (64c0 <_sercom_i2c_send_address+0xe4>)
    63f2:	4798      	blx	r3
    63f4:	4603      	mov	r3, r0
    63f6:	60fb      	str	r3, [r7, #12]

	ASSERT(i2c_dev);
    63f8:	687b      	ldr	r3, [r7, #4]
    63fa:	2b00      	cmp	r3, #0
    63fc:	bf14      	ite	ne
    63fe:	2301      	movne	r3, #1
    6400:	2300      	moveq	r3, #0
    6402:	b2db      	uxtb	r3, r3
    6404:	f240 42cc 	movw	r2, #1228	; 0x4cc
    6408:	492e      	ldr	r1, [pc, #184]	; (64c4 <_sercom_i2c_send_address+0xe8>)
    640a:	4618      	mov	r0, r3
    640c:	4b2e      	ldr	r3, [pc, #184]	; (64c8 <_sercom_i2c_send_address+0xec>)
    640e:	4798      	blx	r3

	if (msg->len == 1 && sclsm) {
    6410:	693b      	ldr	r3, [r7, #16]
    6412:	685b      	ldr	r3, [r3, #4]
    6414:	2b01      	cmp	r3, #1
    6416:	d106      	bne.n	6426 <_sercom_i2c_send_address+0x4a>
    6418:	68fb      	ldr	r3, [r7, #12]
    641a:	2b00      	cmp	r3, #0
    641c:	d003      	beq.n	6426 <_sercom_i2c_send_address+0x4a>
		hri_sercomi2cm_set_CTRLB_ACKACT_bit(hw);
    641e:	6978      	ldr	r0, [r7, #20]
    6420:	4b2a      	ldr	r3, [pc, #168]	; (64cc <_sercom_i2c_send_address+0xf0>)
    6422:	4798      	blx	r3
    6424:	e002      	b.n	642c <_sercom_i2c_send_address+0x50>
	} else {
		hri_sercomi2cm_clear_CTRLB_ACKACT_bit(hw);
    6426:	6978      	ldr	r0, [r7, #20]
    6428:	4b29      	ldr	r3, [pc, #164]	; (64d0 <_sercom_i2c_send_address+0xf4>)
    642a:	4798      	blx	r3
	}

	/* ten bit address */
	if (msg->addr & I2C_M_TEN) {
    642c:	693b      	ldr	r3, [r7, #16]
    642e:	881b      	ldrh	r3, [r3, #0]
    6430:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    6434:	2b00      	cmp	r3, #0
    6436:	d022      	beq.n	647e <_sercom_i2c_send_address+0xa2>
		if (msg->flags & I2C_M_RD) {
    6438:	693b      	ldr	r3, [r7, #16]
    643a:	885b      	ldrh	r3, [r3, #2]
    643c:	b29b      	uxth	r3, r3
    643e:	f003 0301 	and.w	r3, r3, #1
    6442:	2b00      	cmp	r3, #0
    6444:	d007      	beq.n	6456 <_sercom_i2c_send_address+0x7a>
			msg->flags |= I2C_M_TEN;
    6446:	693b      	ldr	r3, [r7, #16]
    6448:	885b      	ldrh	r3, [r3, #2]
    644a:	b29b      	uxth	r3, r3
    644c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    6450:	b29a      	uxth	r2, r3
    6452:	693b      	ldr	r3, [r7, #16]
    6454:	805a      	strh	r2, [r3, #2]
		}

		hri_sercomi2cm_write_ADDR_reg(hw,
		                              ((msg->addr & TEN_ADDR_MASK) << 1) | SERCOM_I2CM_ADDR_TENBITEN
    6456:	693b      	ldr	r3, [r7, #16]
    6458:	881b      	ldrh	r3, [r3, #0]
    645a:	005b      	lsls	r3, r3, #1
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    645c:	f240 74fe 	movw	r4, #2046	; 0x7fe
    6460:	401c      	ands	r4, r3
    6462:	6978      	ldr	r0, [r7, #20]
    6464:	4b1b      	ldr	r3, [pc, #108]	; (64d4 <_sercom_i2c_send_address+0xf8>)
    6466:	4798      	blx	r3
    6468:	4603      	mov	r3, r0
    646a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    646e:	4323      	orrs	r3, r4
		hri_sercomi2cm_write_ADDR_reg(hw,
    6470:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    6474:	4619      	mov	r1, r3
    6476:	6978      	ldr	r0, [r7, #20]
    6478:	4b17      	ldr	r3, [pc, #92]	; (64d8 <_sercom_i2c_send_address+0xfc>)
    647a:	4798      	blx	r3
    647c:	e01a      	b.n	64b4 <_sercom_i2c_send_address+0xd8>
	} else {
		hri_sercomi2cm_write_ADDR_reg(hw,
		                              ((msg->addr & SEVEN_ADDR_MASK) << 1) | (msg->flags & I2C_M_RD ? I2C_M_RD : 0x0)
    647e:	693b      	ldr	r3, [r7, #16]
    6480:	881b      	ldrh	r3, [r3, #0]
    6482:	005b      	lsls	r3, r3, #1
    6484:	b2db      	uxtb	r3, r3
    6486:	693a      	ldr	r2, [r7, #16]
    6488:	8852      	ldrh	r2, [r2, #2]
    648a:	b292      	uxth	r2, r2
    648c:	f002 0201 	and.w	r2, r2, #1
    6490:	2a00      	cmp	r2, #0
    6492:	bf14      	ite	ne
    6494:	2201      	movne	r2, #1
    6496:	2200      	moveq	r2, #0
    6498:	b2d2      	uxtb	r2, r2
    649a:	4313      	orrs	r3, r2
    649c:	461c      	mov	r4, r3
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    649e:	6978      	ldr	r0, [r7, #20]
    64a0:	4b0c      	ldr	r3, [pc, #48]	; (64d4 <_sercom_i2c_send_address+0xf8>)
    64a2:	4798      	blx	r3
    64a4:	4603      	mov	r3, r0
    64a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
		hri_sercomi2cm_write_ADDR_reg(hw,
    64aa:	4323      	orrs	r3, r4
    64ac:	4619      	mov	r1, r3
    64ae:	6978      	ldr	r0, [r7, #20]
    64b0:	4b09      	ldr	r3, [pc, #36]	; (64d8 <_sercom_i2c_send_address+0xfc>)
    64b2:	4798      	blx	r3
	}

	return ERR_NONE;
    64b4:	2300      	movs	r3, #0
}
    64b6:	4618      	mov	r0, r3
    64b8:	371c      	adds	r7, #28
    64ba:	46bd      	mov	sp, r7
    64bc:	bd90      	pop	{r4, r7, pc}
    64be:	bf00      	nop
    64c0:	00005a99 	.word	0x00005a99
    64c4:	000130e8 	.word	0x000130e8
    64c8:	00002ed9 	.word	0x00002ed9
    64cc:	00005c21 	.word	0x00005c21
    64d0:	00005c49 	.word	0x00005c49
    64d4:	00005d89 	.word	0x00005d89
    64d8:	00005d65 	.word	0x00005d65

000064dc <_i2c_m_async_transfer>:
 * \return Transfer status.
 * \retval 0 Transfer success
 * \retval <0 Transfer fail, return the error code
 */
int32_t _i2c_m_async_transfer(struct _i2c_m_async_device *i2c_dev, struct _i2c_m_msg *msg)
{
    64dc:	b580      	push	{r7, lr}
    64de:	b084      	sub	sp, #16
    64e0:	af00      	add	r7, sp, #0
    64e2:	6078      	str	r0, [r7, #4]
    64e4:	6039      	str	r1, [r7, #0]
	int ret;

	ASSERT(i2c_dev);
    64e6:	687b      	ldr	r3, [r7, #4]
    64e8:	2b00      	cmp	r3, #0
    64ea:	bf14      	ite	ne
    64ec:	2301      	movne	r3, #1
    64ee:	2300      	moveq	r3, #0
    64f0:	b2db      	uxtb	r3, r3
    64f2:	f240 42f4 	movw	r2, #1268	; 0x4f4
    64f6:	492a      	ldr	r1, [pc, #168]	; (65a0 <_i2c_m_async_transfer+0xc4>)
    64f8:	4618      	mov	r0, r3
    64fa:	4b2a      	ldr	r3, [pc, #168]	; (65a4 <_i2c_m_async_transfer+0xc8>)
    64fc:	4798      	blx	r3
	ASSERT(i2c_dev->hw);
    64fe:	687b      	ldr	r3, [r7, #4]
    6500:	691b      	ldr	r3, [r3, #16]
    6502:	2b00      	cmp	r3, #0
    6504:	bf14      	ite	ne
    6506:	2301      	movne	r3, #1
    6508:	2300      	moveq	r3, #0
    650a:	b2db      	uxtb	r3, r3
    650c:	f240 42f5 	movw	r2, #1269	; 0x4f5
    6510:	4923      	ldr	r1, [pc, #140]	; (65a0 <_i2c_m_async_transfer+0xc4>)
    6512:	4618      	mov	r0, r3
    6514:	4b23      	ldr	r3, [pc, #140]	; (65a4 <_i2c_m_async_transfer+0xc8>)
    6516:	4798      	blx	r3
	ASSERT(msg);
    6518:	683b      	ldr	r3, [r7, #0]
    651a:	2b00      	cmp	r3, #0
    651c:	bf14      	ite	ne
    651e:	2301      	movne	r3, #1
    6520:	2300      	moveq	r3, #0
    6522:	b2db      	uxtb	r3, r3
    6524:	f240 42f6 	movw	r2, #1270	; 0x4f6
    6528:	491d      	ldr	r1, [pc, #116]	; (65a0 <_i2c_m_async_transfer+0xc4>)
    652a:	4618      	mov	r0, r3
    652c:	4b1d      	ldr	r3, [pc, #116]	; (65a4 <_i2c_m_async_transfer+0xc8>)
    652e:	4798      	blx	r3

	if (msg->len == 0) {
    6530:	683b      	ldr	r3, [r7, #0]
    6532:	685b      	ldr	r3, [r3, #4]
    6534:	2b00      	cmp	r3, #0
    6536:	d101      	bne.n	653c <_i2c_m_async_transfer+0x60>
		return ERR_NONE;
    6538:	2300      	movs	r3, #0
    653a:	e02d      	b.n	6598 <_i2c_m_async_transfer+0xbc>
	}

	if (i2c_dev->service.msg.flags & I2C_M_BUSY) {
    653c:	687b      	ldr	r3, [r7, #4]
    653e:	885b      	ldrh	r3, [r3, #2]
    6540:	b29b      	uxth	r3, r3
    6542:	f403 7380 	and.w	r3, r3, #256	; 0x100
    6546:	2b00      	cmp	r3, #0
    6548:	d002      	beq.n	6550 <_i2c_m_async_transfer+0x74>
		return ERR_BUSY;
    654a:	f06f 0303 	mvn.w	r3, #3
    654e:	e023      	b.n	6598 <_i2c_m_async_transfer+0xbc>
	}

	msg->flags |= I2C_M_BUSY;
    6550:	683b      	ldr	r3, [r7, #0]
    6552:	885b      	ldrh	r3, [r3, #2]
    6554:	b29b      	uxth	r3, r3
    6556:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    655a:	b29a      	uxth	r2, r3
    655c:	683b      	ldr	r3, [r7, #0]
    655e:	805a      	strh	r2, [r3, #2]
	i2c_dev->service.msg = *msg;
    6560:	687b      	ldr	r3, [r7, #4]
    6562:	683a      	ldr	r2, [r7, #0]
    6564:	ca07      	ldmia	r2, {r0, r1, r2}
    6566:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	hri_sercomi2cm_set_CTRLB_SMEN_bit(i2c_dev->hw);
    656a:	687b      	ldr	r3, [r7, #4]
    656c:	691b      	ldr	r3, [r3, #16]
    656e:	4618      	mov	r0, r3
    6570:	4b0d      	ldr	r3, [pc, #52]	; (65a8 <_i2c_m_async_transfer+0xcc>)
    6572:	4798      	blx	r3

	ret = _sercom_i2c_send_address(i2c_dev);
    6574:	6878      	ldr	r0, [r7, #4]
    6576:	4b0d      	ldr	r3, [pc, #52]	; (65ac <_i2c_m_async_transfer+0xd0>)
    6578:	4798      	blx	r3
    657a:	60f8      	str	r0, [r7, #12]

	if (ret) {
    657c:	68fb      	ldr	r3, [r7, #12]
    657e:	2b00      	cmp	r3, #0
    6580:	d009      	beq.n	6596 <_i2c_m_async_transfer+0xba>
		i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    6582:	687b      	ldr	r3, [r7, #4]
    6584:	885b      	ldrh	r3, [r3, #2]
    6586:	b29b      	uxth	r3, r3
    6588:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    658c:	b29a      	uxth	r2, r3
    658e:	687b      	ldr	r3, [r7, #4]
    6590:	805a      	strh	r2, [r3, #2]

		return ret;
    6592:	68fb      	ldr	r3, [r7, #12]
    6594:	e000      	b.n	6598 <_i2c_m_async_transfer+0xbc>
	}

	return ERR_NONE;
    6596:	2300      	movs	r3, #0
}
    6598:	4618      	mov	r0, r3
    659a:	3710      	adds	r7, #16
    659c:	46bd      	mov	sp, r7
    659e:	bd80      	pop	{r7, pc}
    65a0:	000130e8 	.word	0x000130e8
    65a4:	00002ed9 	.word	0x00002ed9
    65a8:	00005bd1 	.word	0x00005bd1
    65ac:	000063dd 	.word	0x000063dd

000065b0 <_i2c_m_async_register_callback>:
 * \param[in] type The callback type
 * \param[in] func The callback function pointer
 */
int32_t _i2c_m_async_register_callback(struct _i2c_m_async_device *const i2c_dev, enum _i2c_m_async_callback_type type,
                                       FUNC_PTR func)
{
    65b0:	b480      	push	{r7}
    65b2:	b085      	sub	sp, #20
    65b4:	af00      	add	r7, sp, #0
    65b6:	60f8      	str	r0, [r7, #12]
    65b8:	460b      	mov	r3, r1
    65ba:	607a      	str	r2, [r7, #4]
    65bc:	72fb      	strb	r3, [r7, #11]
	switch (type) {
    65be:	7afb      	ldrb	r3, [r7, #11]
    65c0:	2b01      	cmp	r3, #1
    65c2:	d008      	beq.n	65d6 <_i2c_m_async_register_callback+0x26>
    65c4:	2b02      	cmp	r3, #2
    65c6:	d00a      	beq.n	65de <_i2c_m_async_register_callback+0x2e>
    65c8:	2b00      	cmp	r3, #0
    65ca:	d000      	beq.n	65ce <_i2c_m_async_register_callback+0x1e>
	case I2C_M_ASYNC_DEVICE_RX_COMPLETE:
		i2c_dev->cb.rx_complete = (_i2c_complete_cb_t)func;
		break;
	default:
		/* error */
		break;
    65cc:	e00b      	b.n	65e6 <_i2c_m_async_register_callback+0x36>
		i2c_dev->cb.error = (_i2c_error_cb_t)func;
    65ce:	68fb      	ldr	r3, [r7, #12]
    65d0:	687a      	ldr	r2, [r7, #4]
    65d2:	615a      	str	r2, [r3, #20]
		break;
    65d4:	e007      	b.n	65e6 <_i2c_m_async_register_callback+0x36>
		i2c_dev->cb.tx_complete = (_i2c_complete_cb_t)func;
    65d6:	68fb      	ldr	r3, [r7, #12]
    65d8:	687a      	ldr	r2, [r7, #4]
    65da:	619a      	str	r2, [r3, #24]
		break;
    65dc:	e003      	b.n	65e6 <_i2c_m_async_register_callback+0x36>
		i2c_dev->cb.rx_complete = (_i2c_complete_cb_t)func;
    65de:	68fb      	ldr	r3, [r7, #12]
    65e0:	687a      	ldr	r2, [r7, #4]
    65e2:	61da      	str	r2, [r3, #28]
		break;
    65e4:	bf00      	nop
	}

	return ERR_NONE;
    65e6:	2300      	movs	r3, #0
}
    65e8:	4618      	mov	r0, r3
    65ea:	3714      	adds	r7, #20
    65ec:	46bd      	mov	sp, r7
    65ee:	f85d 7b04 	ldr.w	r7, [sp], #4
    65f2:	4770      	bx	lr

000065f4 <_i2c_m_sync_init_impl>:
	}
	return ERR_NONE;
}

static int32_t _i2c_m_sync_init_impl(struct _i2c_m_service *const service, void *const hw)
{
    65f4:	b580      	push	{r7, lr}
    65f6:	b084      	sub	sp, #16
    65f8:	af00      	add	r7, sp, #0
    65fa:	6078      	str	r0, [r7, #4]
    65fc:	6039      	str	r1, [r7, #0]
	uint8_t i = _get_i2cm_index(hw);
    65fe:	6838      	ldr	r0, [r7, #0]
    6600:	4b42      	ldr	r3, [pc, #264]	; (670c <_i2c_m_sync_init_impl+0x118>)
    6602:	4798      	blx	r3
    6604:	4603      	mov	r3, r0
    6606:	73fb      	strb	r3, [r7, #15]

	if (!hri_sercomi2cm_is_syncing(hw, SERCOM_I2CM_SYNCBUSY_SWRST)) {
    6608:	2101      	movs	r1, #1
    660a:	6838      	ldr	r0, [r7, #0]
    660c:	4b40      	ldr	r3, [pc, #256]	; (6710 <_i2c_m_sync_init_impl+0x11c>)
    660e:	4798      	blx	r3
    6610:	4603      	mov	r3, r0
    6612:	f083 0301 	eor.w	r3, r3, #1
    6616:	b2db      	uxtb	r3, r3
    6618:	2b00      	cmp	r3, #0
    661a:	d020      	beq.n	665e <_i2c_m_sync_init_impl+0x6a>
		uint32_t mode = _i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_MODE_Msk;
    661c:	7bfa      	ldrb	r2, [r7, #15]
    661e:	493d      	ldr	r1, [pc, #244]	; (6714 <_i2c_m_sync_init_impl+0x120>)
    6620:	4613      	mov	r3, r2
    6622:	005b      	lsls	r3, r3, #1
    6624:	4413      	add	r3, r2
    6626:	00db      	lsls	r3, r3, #3
    6628:	440b      	add	r3, r1
    662a:	3304      	adds	r3, #4
    662c:	681b      	ldr	r3, [r3, #0]
    662e:	f003 031c 	and.w	r3, r3, #28
    6632:	60bb      	str	r3, [r7, #8]
		if (hri_sercomi2cm_get_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_ENABLE)) {
    6634:	2102      	movs	r1, #2
    6636:	6838      	ldr	r0, [r7, #0]
    6638:	4b37      	ldr	r3, [pc, #220]	; (6718 <_i2c_m_sync_init_impl+0x124>)
    663a:	4798      	blx	r3
    663c:	4603      	mov	r3, r0
    663e:	2b00      	cmp	r3, #0
    6640:	d006      	beq.n	6650 <_i2c_m_sync_init_impl+0x5c>
			hri_sercomi2cm_clear_CTRLA_ENABLE_bit(hw);
    6642:	6838      	ldr	r0, [r7, #0]
    6644:	4b35      	ldr	r3, [pc, #212]	; (671c <_i2c_m_sync_init_impl+0x128>)
    6646:	4798      	blx	r3
			hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_ENABLE);
    6648:	2102      	movs	r1, #2
    664a:	6838      	ldr	r0, [r7, #0]
    664c:	4b34      	ldr	r3, [pc, #208]	; (6720 <_i2c_m_sync_init_impl+0x12c>)
    664e:	4798      	blx	r3
		}
		hri_sercomi2cm_write_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_SWRST | mode);
    6650:	68bb      	ldr	r3, [r7, #8]
    6652:	f043 0301 	orr.w	r3, r3, #1
    6656:	4619      	mov	r1, r3
    6658:	6838      	ldr	r0, [r7, #0]
    665a:	4b32      	ldr	r3, [pc, #200]	; (6724 <_i2c_m_sync_init_impl+0x130>)
    665c:	4798      	blx	r3
	}
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST);
    665e:	2101      	movs	r1, #1
    6660:	6838      	ldr	r0, [r7, #0]
    6662:	4b2f      	ldr	r3, [pc, #188]	; (6720 <_i2c_m_sync_init_impl+0x12c>)
    6664:	4798      	blx	r3

	hri_sercomi2cm_write_CTRLA_reg(hw, _i2cms[i].ctrl_a);
    6666:	7bfa      	ldrb	r2, [r7, #15]
    6668:	492a      	ldr	r1, [pc, #168]	; (6714 <_i2c_m_sync_init_impl+0x120>)
    666a:	4613      	mov	r3, r2
    666c:	005b      	lsls	r3, r3, #1
    666e:	4413      	add	r3, r2
    6670:	00db      	lsls	r3, r3, #3
    6672:	440b      	add	r3, r1
    6674:	3304      	adds	r3, #4
    6676:	681b      	ldr	r3, [r3, #0]
    6678:	4619      	mov	r1, r3
    667a:	6838      	ldr	r0, [r7, #0]
    667c:	4b29      	ldr	r3, [pc, #164]	; (6724 <_i2c_m_sync_init_impl+0x130>)
    667e:	4798      	blx	r3
	hri_sercomi2cm_write_CTRLB_reg(hw, _i2cms[i].ctrl_b);
    6680:	7bfa      	ldrb	r2, [r7, #15]
    6682:	4924      	ldr	r1, [pc, #144]	; (6714 <_i2c_m_sync_init_impl+0x120>)
    6684:	4613      	mov	r3, r2
    6686:	005b      	lsls	r3, r3, #1
    6688:	4413      	add	r3, r2
    668a:	00db      	lsls	r3, r3, #3
    668c:	440b      	add	r3, r1
    668e:	3308      	adds	r3, #8
    6690:	681b      	ldr	r3, [r3, #0]
    6692:	4619      	mov	r1, r3
    6694:	6838      	ldr	r0, [r7, #0]
    6696:	4b24      	ldr	r3, [pc, #144]	; (6728 <_i2c_m_sync_init_impl+0x134>)
    6698:	4798      	blx	r3
	hri_sercomi2cm_write_BAUD_reg(hw, _i2cms[i].baud);
    669a:	7bfa      	ldrb	r2, [r7, #15]
    669c:	491d      	ldr	r1, [pc, #116]	; (6714 <_i2c_m_sync_init_impl+0x120>)
    669e:	4613      	mov	r3, r2
    66a0:	005b      	lsls	r3, r3, #1
    66a2:	4413      	add	r3, r2
    66a4:	00db      	lsls	r3, r3, #3
    66a6:	440b      	add	r3, r1
    66a8:	330c      	adds	r3, #12
    66aa:	681b      	ldr	r3, [r3, #0]
    66ac:	4619      	mov	r1, r3
    66ae:	6838      	ldr	r0, [r7, #0]
    66b0:	4b1e      	ldr	r3, [pc, #120]	; (672c <_i2c_m_sync_init_impl+0x138>)
    66b2:	4798      	blx	r3

	service->mode = (_i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_SPEED_Msk) >> SERCOM_I2CM_CTRLA_SPEED_Pos;
    66b4:	7bfa      	ldrb	r2, [r7, #15]
    66b6:	4917      	ldr	r1, [pc, #92]	; (6714 <_i2c_m_sync_init_impl+0x120>)
    66b8:	4613      	mov	r3, r2
    66ba:	005b      	lsls	r3, r3, #1
    66bc:	4413      	add	r3, r2
    66be:	00db      	lsls	r3, r3, #3
    66c0:	440b      	add	r3, r1
    66c2:	3304      	adds	r3, #4
    66c4:	681b      	ldr	r3, [r3, #0]
    66c6:	0e1b      	lsrs	r3, r3, #24
    66c8:	b29b      	uxth	r3, r3
    66ca:	f003 0303 	and.w	r3, r3, #3
    66ce:	b29a      	uxth	r2, r3
    66d0:	687b      	ldr	r3, [r7, #4]
    66d2:	819a      	strh	r2, [r3, #12]
	hri_sercomi2cm_write_ADDR_HS_bit(hw, service->mode < I2C_HS ? 0 : 1);
    66d4:	687b      	ldr	r3, [r7, #4]
    66d6:	899b      	ldrh	r3, [r3, #12]
    66d8:	2b01      	cmp	r3, #1
    66da:	bf8c      	ite	hi
    66dc:	2301      	movhi	r3, #1
    66de:	2300      	movls	r3, #0
    66e0:	b2db      	uxtb	r3, r3
    66e2:	4619      	mov	r1, r3
    66e4:	6838      	ldr	r0, [r7, #0]
    66e6:	4b12      	ldr	r3, [pc, #72]	; (6730 <_i2c_m_sync_init_impl+0x13c>)
    66e8:	4798      	blx	r3

	service->trise = _i2cms[i].trise;
    66ea:	7bfa      	ldrb	r2, [r7, #15]
    66ec:	4909      	ldr	r1, [pc, #36]	; (6714 <_i2c_m_sync_init_impl+0x120>)
    66ee:	4613      	mov	r3, r2
    66f0:	005b      	lsls	r3, r3, #1
    66f2:	4413      	add	r3, r2
    66f4:	00db      	lsls	r3, r3, #3
    66f6:	440b      	add	r3, r1
    66f8:	3312      	adds	r3, #18
    66fa:	881a      	ldrh	r2, [r3, #0]
    66fc:	687b      	ldr	r3, [r7, #4]
    66fe:	81da      	strh	r2, [r3, #14]

	return ERR_NONE;
    6700:	2300      	movs	r3, #0
}
    6702:	4618      	mov	r0, r3
    6704:	3710      	adds	r7, #16
    6706:	46bd      	mov	sp, r7
    6708:	bd80      	pop	{r7, pc}
    670a:	bf00      	nop
    670c:	00005f51 	.word	0x00005f51
    6710:	00005879 	.word	0x00005879
    6714:	20000018 	.word	0x20000018
    6718:	00005ac9 	.word	0x00005ac9
    671c:	00005a71 	.word	0x00005a71
    6720:	00005855 	.word	0x00005855
    6724:	00005af9 	.word	0x00005af9
    6728:	00005ca1 	.word	0x00005ca1
    672c:	00005ce9 	.word	0x00005ce9
    6730:	00005d25 	.word	0x00005d25

00006734 <_spi_load_regs_master>:
 *  are ignored.
 *  \param[in, out] hw Pointer to the hardware register base.
 *  \param[in] regs Pointer to register configuration values.
 */
static inline void _spi_load_regs_master(void *const hw, const struct sercomspi_regs_cfg *regs)
{
    6734:	b580      	push	{r7, lr}
    6736:	b082      	sub	sp, #8
    6738:	af00      	add	r7, sp, #0
    673a:	6078      	str	r0, [r7, #4]
    673c:	6039      	str	r1, [r7, #0]
	ASSERT(hw && regs);
    673e:	687b      	ldr	r3, [r7, #4]
    6740:	2b00      	cmp	r3, #0
    6742:	d004      	beq.n	674e <_spi_load_regs_master+0x1a>
    6744:	683b      	ldr	r3, [r7, #0]
    6746:	2b00      	cmp	r3, #0
    6748:	d001      	beq.n	674e <_spi_load_regs_master+0x1a>
    674a:	2301      	movs	r3, #1
    674c:	e000      	b.n	6750 <_spi_load_regs_master+0x1c>
    674e:	2300      	movs	r3, #0
    6750:	f003 0301 	and.w	r3, r3, #1
    6754:	b2db      	uxtb	r3, r3
    6756:	f640 1242 	movw	r2, #2370	; 0x942
    675a:	4915      	ldr	r1, [pc, #84]	; (67b0 <_spi_load_regs_master+0x7c>)
    675c:	4618      	mov	r0, r3
    675e:	4b15      	ldr	r3, [pc, #84]	; (67b4 <_spi_load_regs_master+0x80>)
    6760:	4798      	blx	r3
	hri_sercomspi_write_CTRLA_reg(
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    6762:	683b      	ldr	r3, [r7, #0]
    6764:	681b      	ldr	r3, [r3, #0]
	hri_sercomspi_write_CTRLA_reg(
    6766:	f423 7381 	bic.w	r3, r3, #258	; 0x102
    676a:	f023 0301 	bic.w	r3, r3, #1
    676e:	4619      	mov	r1, r3
    6770:	6878      	ldr	r0, [r7, #4]
    6772:	4b11      	ldr	r3, [pc, #68]	; (67b8 <_spi_load_regs_master+0x84>)
    6774:	4798      	blx	r3
	hri_sercomspi_write_CTRLB_reg(
	    hw,
	    (regs->ctrlb
    6776:	683b      	ldr	r3, [r7, #0]
    6778:	685b      	ldr	r3, [r3, #4]
	     & ~(SERCOM_SPI_CTRLB_MSSEN | SERCOM_SPI_CTRLB_AMODE_Msk | SERCOM_SPI_CTRLB_SSDE | SERCOM_SPI_CTRLB_PLOADEN))
	        | (SERCOM_SPI_CTRLB_RXEN));
    677a:	f423 3338 	bic.w	r3, r3, #188416	; 0x2e000
    677e:	f423 7310 	bic.w	r3, r3, #576	; 0x240
	hri_sercomspi_write_CTRLB_reg(
    6782:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    6786:	4619      	mov	r1, r3
    6788:	6878      	ldr	r0, [r7, #4]
    678a:	4b0c      	ldr	r3, [pc, #48]	; (67bc <_spi_load_regs_master+0x88>)
    678c:	4798      	blx	r3
	hri_sercomspi_write_BAUD_reg(hw, regs->baud);
    678e:	683b      	ldr	r3, [r7, #0]
    6790:	7b1b      	ldrb	r3, [r3, #12]
    6792:	4619      	mov	r1, r3
    6794:	6878      	ldr	r0, [r7, #4]
    6796:	4b0a      	ldr	r3, [pc, #40]	; (67c0 <_spi_load_regs_master+0x8c>)
    6798:	4798      	blx	r3
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    679a:	683b      	ldr	r3, [r7, #0]
    679c:	7b5b      	ldrb	r3, [r3, #13]
    679e:	4619      	mov	r1, r3
    67a0:	6878      	ldr	r0, [r7, #4]
    67a2:	4b08      	ldr	r3, [pc, #32]	; (67c4 <_spi_load_regs_master+0x90>)
    67a4:	4798      	blx	r3
}
    67a6:	bf00      	nop
    67a8:	3708      	adds	r7, #8
    67aa:	46bd      	mov	sp, r7
    67ac:	bd80      	pop	{r7, pc}
    67ae:	bf00      	nop
    67b0:	000130e8 	.word	0x000130e8
    67b4:	00002ed9 	.word	0x00002ed9
    67b8:	00005bad 	.word	0x00005bad
    67bc:	00005cc5 	.word	0x00005cc5
    67c0:	00005d05 	.word	0x00005d05
    67c4:	00005e3d 	.word	0x00005e3d

000067c8 <_spi_load_regs_slave>:
 *  are ignored.
 *  \param[in, out] hw Pointer to the hardware register base.
 *  \param[in] regs Pointer to register configuration values.
 */
static inline void _spi_load_regs_slave(void *const hw, const struct sercomspi_regs_cfg *regs)
{
    67c8:	b580      	push	{r7, lr}
    67ca:	b082      	sub	sp, #8
    67cc:	af00      	add	r7, sp, #0
    67ce:	6078      	str	r0, [r7, #4]
    67d0:	6039      	str	r1, [r7, #0]
	ASSERT(hw && regs);
    67d2:	687b      	ldr	r3, [r7, #4]
    67d4:	2b00      	cmp	r3, #0
    67d6:	d004      	beq.n	67e2 <_spi_load_regs_slave+0x1a>
    67d8:	683b      	ldr	r3, [r7, #0]
    67da:	2b00      	cmp	r3, #0
    67dc:	d001      	beq.n	67e2 <_spi_load_regs_slave+0x1a>
    67de:	2301      	movs	r3, #1
    67e0:	e000      	b.n	67e4 <_spi_load_regs_slave+0x1c>
    67e2:	2300      	movs	r3, #0
    67e4:	f003 0301 	and.w	r3, r3, #1
    67e8:	b2db      	uxtb	r3, r3
    67ea:	f640 1256 	movw	r2, #2390	; 0x956
    67ee:	491a      	ldr	r1, [pc, #104]	; (6858 <_spi_load_regs_slave+0x90>)
    67f0:	4618      	mov	r0, r3
    67f2:	4b1a      	ldr	r3, [pc, #104]	; (685c <_spi_load_regs_slave+0x94>)
    67f4:	4798      	blx	r3
	hri_sercomspi_write_CTRLA_reg(
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    67f6:	683b      	ldr	r3, [r7, #0]
    67f8:	681b      	ldr	r3, [r3, #0]
	hri_sercomspi_write_CTRLA_reg(
    67fa:	f423 7381 	bic.w	r3, r3, #258	; 0x102
    67fe:	f023 0301 	bic.w	r3, r3, #1
    6802:	4619      	mov	r1, r3
    6804:	6878      	ldr	r0, [r7, #4]
    6806:	4b16      	ldr	r3, [pc, #88]	; (6860 <_spi_load_regs_slave+0x98>)
    6808:	4798      	blx	r3
	hri_sercomspi_write_CTRLB_reg(hw,
	                              (regs->ctrlb & ~(SERCOM_SPI_CTRLB_MSSEN))
    680a:	683b      	ldr	r3, [r7, #0]
    680c:	685b      	ldr	r3, [r3, #4]
	                                  | (SERCOM_SPI_CTRLB_RXEN | SERCOM_SPI_CTRLB_SSDE | SERCOM_SPI_CTRLB_PLOADEN));
    680e:	f423 3308 	bic.w	r3, r3, #139264	; 0x22000
    6812:	f423 7310 	bic.w	r3, r3, #576	; 0x240
	hri_sercomspi_write_CTRLB_reg(hw,
    6816:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    681a:	f443 7310 	orr.w	r3, r3, #576	; 0x240
    681e:	4619      	mov	r1, r3
    6820:	6878      	ldr	r0, [r7, #4]
    6822:	4b10      	ldr	r3, [pc, #64]	; (6864 <_spi_load_regs_slave+0x9c>)
    6824:	4798      	blx	r3
	hri_sercomspi_write_ADDR_reg(hw, regs->addr);
    6826:	683b      	ldr	r3, [r7, #0]
    6828:	689b      	ldr	r3, [r3, #8]
    682a:	4619      	mov	r1, r3
    682c:	6878      	ldr	r0, [r7, #4]
    682e:	4b0e      	ldr	r3, [pc, #56]	; (6868 <_spi_load_regs_slave+0xa0>)
    6830:	4798      	blx	r3
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    6832:	683b      	ldr	r3, [r7, #0]
    6834:	7b5b      	ldrb	r3, [r3, #13]
    6836:	4619      	mov	r1, r3
    6838:	6878      	ldr	r0, [r7, #4]
    683a:	4b0c      	ldr	r3, [pc, #48]	; (686c <_spi_load_regs_slave+0xa4>)
    683c:	4798      	blx	r3
	while (hri_sercomspi_is_syncing(hw, 0xFFFFFFFF))
    683e:	bf00      	nop
    6840:	f04f 31ff 	mov.w	r1, #4294967295
    6844:	6878      	ldr	r0, [r7, #4]
    6846:	4b0a      	ldr	r3, [pc, #40]	; (6870 <_spi_load_regs_slave+0xa8>)
    6848:	4798      	blx	r3
    684a:	4603      	mov	r3, r0
    684c:	2b00      	cmp	r3, #0
    684e:	d1f7      	bne.n	6840 <_spi_load_regs_slave+0x78>
		;
}
    6850:	bf00      	nop
    6852:	3708      	adds	r7, #8
    6854:	46bd      	mov	sp, r7
    6856:	bd80      	pop	{r7, pc}
    6858:	000130e8 	.word	0x000130e8
    685c:	00002ed9 	.word	0x00002ed9
    6860:	00005bad 	.word	0x00005bad
    6864:	00005cc5 	.word	0x00005cc5
    6868:	00005da9 	.word	0x00005da9
    686c:	00005e3d 	.word	0x00005e3d
    6870:	000058c5 	.word	0x000058c5

00006874 <_spi_get_regs>:
/** \brief Return the pointer to register settings of specific SERCOM
 *  \param[in] hw_addr The hardware register base address.
 *  \return Pointer to register settings of specific SERCOM.
 */
static inline const struct sercomspi_regs_cfg *_spi_get_regs(const uint32_t hw_addr)
{
    6874:	b580      	push	{r7, lr}
    6876:	b084      	sub	sp, #16
    6878:	af00      	add	r7, sp, #0
    687a:	6078      	str	r0, [r7, #4]
	uint8_t n = _sercom_get_hardware_index((const void *)hw_addr);
    687c:	687b      	ldr	r3, [r7, #4]
    687e:	4618      	mov	r0, r3
    6880:	4b11      	ldr	r3, [pc, #68]	; (68c8 <_spi_get_regs+0x54>)
    6882:	4798      	blx	r3
    6884:	4603      	mov	r3, r0
    6886:	73bb      	strb	r3, [r7, #14]
	uint8_t i;

	for (i = 0; i < sizeof(sercomspi_regs) / sizeof(struct sercomspi_regs_cfg); i++) {
    6888:	2300      	movs	r3, #0
    688a:	73fb      	strb	r3, [r7, #15]
    688c:	e014      	b.n	68b8 <_spi_get_regs+0x44>
		if (sercomspi_regs[i].n == n) {
    688e:	7bfa      	ldrb	r2, [r7, #15]
    6890:	490e      	ldr	r1, [pc, #56]	; (68cc <_spi_get_regs+0x58>)
    6892:	4613      	mov	r3, r2
    6894:	011b      	lsls	r3, r3, #4
    6896:	4413      	add	r3, r2
    6898:	440b      	add	r3, r1
    689a:	3310      	adds	r3, #16
    689c:	781b      	ldrb	r3, [r3, #0]
    689e:	7bba      	ldrb	r2, [r7, #14]
    68a0:	429a      	cmp	r2, r3
    68a2:	d106      	bne.n	68b2 <_spi_get_regs+0x3e>
			return &sercomspi_regs[i];
    68a4:	7bfa      	ldrb	r2, [r7, #15]
    68a6:	4613      	mov	r3, r2
    68a8:	011b      	lsls	r3, r3, #4
    68aa:	4413      	add	r3, r2
    68ac:	4a07      	ldr	r2, [pc, #28]	; (68cc <_spi_get_regs+0x58>)
    68ae:	4413      	add	r3, r2
    68b0:	e006      	b.n	68c0 <_spi_get_regs+0x4c>
	for (i = 0; i < sizeof(sercomspi_regs) / sizeof(struct sercomspi_regs_cfg); i++) {
    68b2:	7bfb      	ldrb	r3, [r7, #15]
    68b4:	3301      	adds	r3, #1
    68b6:	73fb      	strb	r3, [r7, #15]
    68b8:	7bfb      	ldrb	r3, [r7, #15]
    68ba:	2b01      	cmp	r3, #1
    68bc:	d9e7      	bls.n	688e <_spi_get_regs+0x1a>
		}
	}

	return NULL;
    68be:	2300      	movs	r3, #0
}
    68c0:	4618      	mov	r0, r3
    68c2:	3710      	adds	r7, #16
    68c4:	46bd      	mov	sp, r7
    68c6:	bd80      	pop	{r7, pc}
    68c8:	00005ea1 	.word	0x00005ea1
    68cc:	00013124 	.word	0x00013124

000068d0 <_spi_handler>:
/**
 *  \brief IRQ handler used
 *  \param[in, out] p Pointer to SPI device instance.
 */
static void _spi_handler(struct _spi_async_dev *dev)
{
    68d0:	b580      	push	{r7, lr}
    68d2:	b084      	sub	sp, #16
    68d4:	af00      	add	r7, sp, #0
    68d6:	6078      	str	r0, [r7, #4]
	void *                      hw = dev->prvt;
    68d8:	687b      	ldr	r3, [r7, #4]
    68da:	681b      	ldr	r3, [r3, #0]
    68dc:	60fb      	str	r3, [r7, #12]
	hri_sercomspi_intflag_reg_t st;

	st = hri_sercomspi_read_INTFLAG_reg(hw);
    68de:	68f8      	ldr	r0, [r7, #12]
    68e0:	4b21      	ldr	r3, [pc, #132]	; (6968 <_spi_handler+0x98>)
    68e2:	4798      	blx	r3
    68e4:	4603      	mov	r3, r0
    68e6:	72fb      	strb	r3, [r7, #11]
	st &= hri_sercomspi_read_INTEN_reg(hw);
    68e8:	68f8      	ldr	r0, [r7, #12]
    68ea:	4b20      	ldr	r3, [pc, #128]	; (696c <_spi_handler+0x9c>)
    68ec:	4798      	blx	r3
    68ee:	4603      	mov	r3, r0
    68f0:	461a      	mov	r2, r3
    68f2:	7afb      	ldrb	r3, [r7, #11]
    68f4:	4013      	ands	r3, r2
    68f6:	72fb      	strb	r3, [r7, #11]

	if (st & SERCOM_SPI_INTFLAG_DRE) {
    68f8:	7afb      	ldrb	r3, [r7, #11]
    68fa:	f003 0301 	and.w	r3, r3, #1
    68fe:	2b00      	cmp	r3, #0
    6900:	d004      	beq.n	690c <_spi_handler+0x3c>
		dev->callbacks.tx(dev);
    6902:	687b      	ldr	r3, [r7, #4]
    6904:	689b      	ldr	r3, [r3, #8]
    6906:	6878      	ldr	r0, [r7, #4]
    6908:	4798      	blx	r3
	} else if (st & SERCOM_SPI_INTFLAG_ERROR) {
		hri_sercomspi_clear_STATUS_reg(hw, SERCOM_SPI_STATUS_BUFOVF);
		hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_ERROR);
		dev->callbacks.err(dev, ERR_OVERFLOW);
	}
}
    690a:	e029      	b.n	6960 <_spi_handler+0x90>
	} else if (st & SERCOM_SPI_INTFLAG_RXC) {
    690c:	7afb      	ldrb	r3, [r7, #11]
    690e:	f003 0304 	and.w	r3, r3, #4
    6912:	2b00      	cmp	r3, #0
    6914:	d004      	beq.n	6920 <_spi_handler+0x50>
		dev->callbacks.rx(dev);
    6916:	687b      	ldr	r3, [r7, #4]
    6918:	68db      	ldr	r3, [r3, #12]
    691a:	6878      	ldr	r0, [r7, #4]
    691c:	4798      	blx	r3
}
    691e:	e01f      	b.n	6960 <_spi_handler+0x90>
	} else if (st & SERCOM_SPI_INTFLAG_TXC) {
    6920:	7afb      	ldrb	r3, [r7, #11]
    6922:	f003 0302 	and.w	r3, r3, #2
    6926:	2b00      	cmp	r3, #0
    6928:	d008      	beq.n	693c <_spi_handler+0x6c>
		hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC);
    692a:	2102      	movs	r1, #2
    692c:	68f8      	ldr	r0, [r7, #12]
    692e:	4b10      	ldr	r3, [pc, #64]	; (6970 <_spi_handler+0xa0>)
    6930:	4798      	blx	r3
		dev->callbacks.complete(dev);
    6932:	687b      	ldr	r3, [r7, #4]
    6934:	691b      	ldr	r3, [r3, #16]
    6936:	6878      	ldr	r0, [r7, #4]
    6938:	4798      	blx	r3
}
    693a:	e011      	b.n	6960 <_spi_handler+0x90>
	} else if (st & SERCOM_SPI_INTFLAG_ERROR) {
    693c:	f997 300b 	ldrsb.w	r3, [r7, #11]
    6940:	2b00      	cmp	r3, #0
    6942:	da0d      	bge.n	6960 <_spi_handler+0x90>
		hri_sercomspi_clear_STATUS_reg(hw, SERCOM_SPI_STATUS_BUFOVF);
    6944:	2104      	movs	r1, #4
    6946:	68f8      	ldr	r0, [r7, #12]
    6948:	4b0a      	ldr	r3, [pc, #40]	; (6974 <_spi_handler+0xa4>)
    694a:	4798      	blx	r3
		hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_ERROR);
    694c:	2180      	movs	r1, #128	; 0x80
    694e:	68f8      	ldr	r0, [r7, #12]
    6950:	4b07      	ldr	r3, [pc, #28]	; (6970 <_spi_handler+0xa0>)
    6952:	4798      	blx	r3
		dev->callbacks.err(dev, ERR_OVERFLOW);
    6954:	687b      	ldr	r3, [r7, #4]
    6956:	695b      	ldr	r3, [r3, #20]
    6958:	f06f 0112 	mvn.w	r1, #18
    695c:	6878      	ldr	r0, [r7, #4]
    695e:	4798      	blx	r3
}
    6960:	bf00      	nop
    6962:	3710      	adds	r7, #16
    6964:	46bd      	mov	sp, r7
    6966:	bd80      	pop	{r7, pc}
    6968:	00005981 	.word	0x00005981
    696c:	00005a55 	.word	0x00005a55
    6970:	0000599b 	.word	0x0000599b
    6974:	00005e5d 	.word	0x00005e5d

00006978 <SERCOM4_0_Handler>:

/**
 * \internal Sercom interrupt handler
 */
void SERCOM4_0_Handler(void)
{
    6978:	b580      	push	{r7, lr}
    697a:	af00      	add	r7, sp, #0
	_spi_handler(_sercom4_dev);
    697c:	4b03      	ldr	r3, [pc, #12]	; (698c <SERCOM4_0_Handler+0x14>)
    697e:	681b      	ldr	r3, [r3, #0]
    6980:	4618      	mov	r0, r3
    6982:	4b03      	ldr	r3, [pc, #12]	; (6990 <SERCOM4_0_Handler+0x18>)
    6984:	4798      	blx	r3
}
    6986:	bf00      	nop
    6988:	bd80      	pop	{r7, pc}
    698a:	bf00      	nop
    698c:	20000c14 	.word	0x20000c14
    6990:	000068d1 	.word	0x000068d1

00006994 <SERCOM4_1_Handler>:
/**
 * \internal Sercom interrupt handler
 */
void SERCOM4_1_Handler(void)
{
    6994:	b580      	push	{r7, lr}
    6996:	af00      	add	r7, sp, #0
	_spi_handler(_sercom4_dev);
    6998:	4b03      	ldr	r3, [pc, #12]	; (69a8 <SERCOM4_1_Handler+0x14>)
    699a:	681b      	ldr	r3, [r3, #0]
    699c:	4618      	mov	r0, r3
    699e:	4b03      	ldr	r3, [pc, #12]	; (69ac <SERCOM4_1_Handler+0x18>)
    69a0:	4798      	blx	r3
}
    69a2:	bf00      	nop
    69a4:	bd80      	pop	{r7, pc}
    69a6:	bf00      	nop
    69a8:	20000c14 	.word	0x20000c14
    69ac:	000068d1 	.word	0x000068d1

000069b0 <SERCOM4_2_Handler>:
/**
 * \internal Sercom interrupt handler
 */
void SERCOM4_2_Handler(void)
{
    69b0:	b580      	push	{r7, lr}
    69b2:	af00      	add	r7, sp, #0
	_spi_handler(_sercom4_dev);
    69b4:	4b03      	ldr	r3, [pc, #12]	; (69c4 <SERCOM4_2_Handler+0x14>)
    69b6:	681b      	ldr	r3, [r3, #0]
    69b8:	4618      	mov	r0, r3
    69ba:	4b03      	ldr	r3, [pc, #12]	; (69c8 <SERCOM4_2_Handler+0x18>)
    69bc:	4798      	blx	r3
}
    69be:	bf00      	nop
    69c0:	bd80      	pop	{r7, pc}
    69c2:	bf00      	nop
    69c4:	20000c14 	.word	0x20000c14
    69c8:	000068d1 	.word	0x000068d1

000069cc <SERCOM4_3_Handler>:
/**
 * \internal Sercom interrupt handler
 */
void SERCOM4_3_Handler(void)
{
    69cc:	b580      	push	{r7, lr}
    69ce:	af00      	add	r7, sp, #0
	_spi_handler(_sercom4_dev);
    69d0:	4b03      	ldr	r3, [pc, #12]	; (69e0 <SERCOM4_3_Handler+0x14>)
    69d2:	681b      	ldr	r3, [r3, #0]
    69d4:	4618      	mov	r0, r3
    69d6:	4b03      	ldr	r3, [pc, #12]	; (69e4 <SERCOM4_3_Handler+0x18>)
    69d8:	4798      	blx	r3
}
    69da:	bf00      	nop
    69dc:	bd80      	pop	{r7, pc}
    69de:	bf00      	nop
    69e0:	20000c14 	.word	0x20000c14
    69e4:	000068d1 	.word	0x000068d1

000069e8 <SERCOM5_0_Handler>:

/**
 * \internal Sercom interrupt handler
 */
void SERCOM5_0_Handler(void)
{
    69e8:	b580      	push	{r7, lr}
    69ea:	af00      	add	r7, sp, #0
	_sercom_i2c_m_irq_handler(_sercom5_dev);
    69ec:	4b03      	ldr	r3, [pc, #12]	; (69fc <SERCOM5_0_Handler+0x14>)
    69ee:	681b      	ldr	r3, [r3, #0]
    69f0:	4618      	mov	r0, r3
    69f2:	4b03      	ldr	r3, [pc, #12]	; (6a00 <SERCOM5_0_Handler+0x18>)
    69f4:	4798      	blx	r3
}
    69f6:	bf00      	nop
    69f8:	bd80      	pop	{r7, pc}
    69fa:	bf00      	nop
    69fc:	20000c18 	.word	0x20000c18
    6a00:	00006205 	.word	0x00006205

00006a04 <SERCOM5_1_Handler>:
/**
 * \internal Sercom interrupt handler
 */
void SERCOM5_1_Handler(void)
{
    6a04:	b580      	push	{r7, lr}
    6a06:	af00      	add	r7, sp, #0
	_sercom_i2c_m_irq_handler(_sercom5_dev);
    6a08:	4b03      	ldr	r3, [pc, #12]	; (6a18 <SERCOM5_1_Handler+0x14>)
    6a0a:	681b      	ldr	r3, [r3, #0]
    6a0c:	4618      	mov	r0, r3
    6a0e:	4b03      	ldr	r3, [pc, #12]	; (6a1c <SERCOM5_1_Handler+0x18>)
    6a10:	4798      	blx	r3
}
    6a12:	bf00      	nop
    6a14:	bd80      	pop	{r7, pc}
    6a16:	bf00      	nop
    6a18:	20000c18 	.word	0x20000c18
    6a1c:	00006205 	.word	0x00006205

00006a20 <SERCOM5_2_Handler>:
/**
 * \internal Sercom interrupt handler
 */
void SERCOM5_2_Handler(void)
{
    6a20:	b580      	push	{r7, lr}
    6a22:	af00      	add	r7, sp, #0
	_sercom_i2c_m_irq_handler(_sercom5_dev);
    6a24:	4b03      	ldr	r3, [pc, #12]	; (6a34 <SERCOM5_2_Handler+0x14>)
    6a26:	681b      	ldr	r3, [r3, #0]
    6a28:	4618      	mov	r0, r3
    6a2a:	4b03      	ldr	r3, [pc, #12]	; (6a38 <SERCOM5_2_Handler+0x18>)
    6a2c:	4798      	blx	r3
}
    6a2e:	bf00      	nop
    6a30:	bd80      	pop	{r7, pc}
    6a32:	bf00      	nop
    6a34:	20000c18 	.word	0x20000c18
    6a38:	00006205 	.word	0x00006205

00006a3c <SERCOM5_3_Handler>:
/**
 * \internal Sercom interrupt handler
 */
void SERCOM5_3_Handler(void)
{
    6a3c:	b580      	push	{r7, lr}
    6a3e:	af00      	add	r7, sp, #0
	_sercom_i2c_m_irq_handler(_sercom5_dev);
    6a40:	4b03      	ldr	r3, [pc, #12]	; (6a50 <SERCOM5_3_Handler+0x14>)
    6a42:	681b      	ldr	r3, [r3, #0]
    6a44:	4618      	mov	r0, r3
    6a46:	4b03      	ldr	r3, [pc, #12]	; (6a54 <SERCOM5_3_Handler+0x18>)
    6a48:	4798      	blx	r3
}
    6a4a:	bf00      	nop
    6a4c:	bd80      	pop	{r7, pc}
    6a4e:	bf00      	nop
    6a50:	20000c18 	.word	0x20000c18
    6a54:	00006205 	.word	0x00006205

00006a58 <SERCOM7_0_Handler>:

/**
 * \internal Sercom interrupt handler
 */
void SERCOM7_0_Handler(void)
{
    6a58:	b580      	push	{r7, lr}
    6a5a:	af00      	add	r7, sp, #0
	_sercom_i2c_m_irq_handler(_sercom7_dev);
    6a5c:	4b03      	ldr	r3, [pc, #12]	; (6a6c <SERCOM7_0_Handler+0x14>)
    6a5e:	681b      	ldr	r3, [r3, #0]
    6a60:	4618      	mov	r0, r3
    6a62:	4b03      	ldr	r3, [pc, #12]	; (6a70 <SERCOM7_0_Handler+0x18>)
    6a64:	4798      	blx	r3
}
    6a66:	bf00      	nop
    6a68:	bd80      	pop	{r7, pc}
    6a6a:	bf00      	nop
    6a6c:	20000c1c 	.word	0x20000c1c
    6a70:	00006205 	.word	0x00006205

00006a74 <SERCOM7_1_Handler>:
/**
 * \internal Sercom interrupt handler
 */
void SERCOM7_1_Handler(void)
{
    6a74:	b580      	push	{r7, lr}
    6a76:	af00      	add	r7, sp, #0
	_sercom_i2c_m_irq_handler(_sercom7_dev);
    6a78:	4b03      	ldr	r3, [pc, #12]	; (6a88 <SERCOM7_1_Handler+0x14>)
    6a7a:	681b      	ldr	r3, [r3, #0]
    6a7c:	4618      	mov	r0, r3
    6a7e:	4b03      	ldr	r3, [pc, #12]	; (6a8c <SERCOM7_1_Handler+0x18>)
    6a80:	4798      	blx	r3
}
    6a82:	bf00      	nop
    6a84:	bd80      	pop	{r7, pc}
    6a86:	bf00      	nop
    6a88:	20000c1c 	.word	0x20000c1c
    6a8c:	00006205 	.word	0x00006205

00006a90 <SERCOM7_2_Handler>:
/**
 * \internal Sercom interrupt handler
 */
void SERCOM7_2_Handler(void)
{
    6a90:	b580      	push	{r7, lr}
    6a92:	af00      	add	r7, sp, #0
	_sercom_i2c_m_irq_handler(_sercom7_dev);
    6a94:	4b03      	ldr	r3, [pc, #12]	; (6aa4 <SERCOM7_2_Handler+0x14>)
    6a96:	681b      	ldr	r3, [r3, #0]
    6a98:	4618      	mov	r0, r3
    6a9a:	4b03      	ldr	r3, [pc, #12]	; (6aa8 <SERCOM7_2_Handler+0x18>)
    6a9c:	4798      	blx	r3
}
    6a9e:	bf00      	nop
    6aa0:	bd80      	pop	{r7, pc}
    6aa2:	bf00      	nop
    6aa4:	20000c1c 	.word	0x20000c1c
    6aa8:	00006205 	.word	0x00006205

00006aac <SERCOM7_3_Handler>:
/**
 * \internal Sercom interrupt handler
 */
void SERCOM7_3_Handler(void)
{
    6aac:	b580      	push	{r7, lr}
    6aae:	af00      	add	r7, sp, #0
	_sercom_i2c_m_irq_handler(_sercom7_dev);
    6ab0:	4b03      	ldr	r3, [pc, #12]	; (6ac0 <SERCOM7_3_Handler+0x14>)
    6ab2:	681b      	ldr	r3, [r3, #0]
    6ab4:	4618      	mov	r0, r3
    6ab6:	4b03      	ldr	r3, [pc, #12]	; (6ac4 <SERCOM7_3_Handler+0x18>)
    6ab8:	4798      	blx	r3
}
    6aba:	bf00      	nop
    6abc:	bd80      	pop	{r7, pc}
    6abe:	bf00      	nop
    6ac0:	20000c1c 	.word	0x20000c1c
    6ac4:	00006205 	.word	0x00006205

00006ac8 <_spi_m_sync_init>:

int32_t _spi_m_sync_init(struct _spi_m_sync_dev *dev, void *const hw)
{
    6ac8:	b580      	push	{r7, lr}
    6aca:	b084      	sub	sp, #16
    6acc:	af00      	add	r7, sp, #0
    6ace:	6078      	str	r0, [r7, #4]
    6ad0:	6039      	str	r1, [r7, #0]
	const struct sercomspi_regs_cfg *regs = _spi_get_regs((uint32_t)hw);
    6ad2:	683b      	ldr	r3, [r7, #0]
    6ad4:	4618      	mov	r0, r3
    6ad6:	4b35      	ldr	r3, [pc, #212]	; (6bac <_spi_m_sync_init+0xe4>)
    6ad8:	4798      	blx	r3
    6ada:	60f8      	str	r0, [r7, #12]

	ASSERT(dev && hw);
    6adc:	687b      	ldr	r3, [r7, #4]
    6ade:	2b00      	cmp	r3, #0
    6ae0:	d004      	beq.n	6aec <_spi_m_sync_init+0x24>
    6ae2:	683b      	ldr	r3, [r7, #0]
    6ae4:	2b00      	cmp	r3, #0
    6ae6:	d001      	beq.n	6aec <_spi_m_sync_init+0x24>
    6ae8:	2301      	movs	r3, #1
    6aea:	e000      	b.n	6aee <_spi_m_sync_init+0x26>
    6aec:	2300      	movs	r3, #0
    6aee:	f003 0301 	and.w	r3, r3, #1
    6af2:	b2db      	uxtb	r3, r3
    6af4:	f640 12e9 	movw	r2, #2537	; 0x9e9
    6af8:	492d      	ldr	r1, [pc, #180]	; (6bb0 <_spi_m_sync_init+0xe8>)
    6afa:	4618      	mov	r0, r3
    6afc:	4b2d      	ldr	r3, [pc, #180]	; (6bb4 <_spi_m_sync_init+0xec>)
    6afe:	4798      	blx	r3

	if (regs == NULL) {
    6b00:	68fb      	ldr	r3, [r7, #12]
    6b02:	2b00      	cmp	r3, #0
    6b04:	d102      	bne.n	6b0c <_spi_m_sync_init+0x44>
		return ERR_INVALID_ARG;
    6b06:	f06f 030c 	mvn.w	r3, #12
    6b0a:	e04a      	b.n	6ba2 <_spi_m_sync_init+0xda>
	}

	if (!hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    6b0c:	2101      	movs	r1, #1
    6b0e:	6838      	ldr	r0, [r7, #0]
    6b10:	4b29      	ldr	r3, [pc, #164]	; (6bb8 <_spi_m_sync_init+0xf0>)
    6b12:	4798      	blx	r3
    6b14:	4603      	mov	r3, r0
    6b16:	f083 0301 	eor.w	r3, r3, #1
    6b1a:	b2db      	uxtb	r3, r3
    6b1c:	2b00      	cmp	r3, #0
    6b1e:	d019      	beq.n	6b54 <_spi_m_sync_init+0x8c>
		uint32_t mode = regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk;
    6b20:	68fb      	ldr	r3, [r7, #12]
    6b22:	681b      	ldr	r3, [r3, #0]
    6b24:	f003 031c 	and.w	r3, r3, #28
    6b28:	60bb      	str	r3, [r7, #8]
		if (hri_sercomspi_get_CTRLA_reg(hw, SERCOM_SPI_CTRLA_ENABLE)) {
    6b2a:	2102      	movs	r1, #2
    6b2c:	6838      	ldr	r0, [r7, #0]
    6b2e:	4b23      	ldr	r3, [pc, #140]	; (6bbc <_spi_m_sync_init+0xf4>)
    6b30:	4798      	blx	r3
    6b32:	4603      	mov	r3, r0
    6b34:	2b00      	cmp	r3, #0
    6b36:	d006      	beq.n	6b46 <_spi_m_sync_init+0x7e>
			hri_sercomspi_clear_CTRLA_ENABLE_bit(hw);
    6b38:	6838      	ldr	r0, [r7, #0]
    6b3a:	4b21      	ldr	r3, [pc, #132]	; (6bc0 <_spi_m_sync_init+0xf8>)
    6b3c:	4798      	blx	r3
			hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_ENABLE);
    6b3e:	2102      	movs	r1, #2
    6b40:	6838      	ldr	r0, [r7, #0]
    6b42:	4b20      	ldr	r3, [pc, #128]	; (6bc4 <_spi_m_sync_init+0xfc>)
    6b44:	4798      	blx	r3
		}
		hri_sercomspi_write_CTRLA_reg(hw, SERCOM_SPI_CTRLA_SWRST | mode);
    6b46:	68bb      	ldr	r3, [r7, #8]
    6b48:	f043 0301 	orr.w	r3, r3, #1
    6b4c:	4619      	mov	r1, r3
    6b4e:	6838      	ldr	r0, [r7, #0]
    6b50:	4b1d      	ldr	r3, [pc, #116]	; (6bc8 <_spi_m_sync_init+0x100>)
    6b52:	4798      	blx	r3
	}
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST);
    6b54:	2101      	movs	r1, #1
    6b56:	6838      	ldr	r0, [r7, #0]
    6b58:	4b1a      	ldr	r3, [pc, #104]	; (6bc4 <_spi_m_sync_init+0xfc>)
    6b5a:	4798      	blx	r3

	dev->prvt = hw;
    6b5c:	687b      	ldr	r3, [r7, #4]
    6b5e:	683a      	ldr	r2, [r7, #0]
    6b60:	601a      	str	r2, [r3, #0]

	if ((regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk) == SERCOM_USART_CTRLA_MODE_SPI_SLAVE) {
    6b62:	68fb      	ldr	r3, [r7, #12]
    6b64:	681b      	ldr	r3, [r3, #0]
    6b66:	f003 031c 	and.w	r3, r3, #28
    6b6a:	2b08      	cmp	r3, #8
    6b6c:	d104      	bne.n	6b78 <_spi_m_sync_init+0xb0>
		_spi_load_regs_slave(hw, regs);
    6b6e:	68f9      	ldr	r1, [r7, #12]
    6b70:	6838      	ldr	r0, [r7, #0]
    6b72:	4b16      	ldr	r3, [pc, #88]	; (6bcc <_spi_m_sync_init+0x104>)
    6b74:	4798      	blx	r3
    6b76:	e003      	b.n	6b80 <_spi_m_sync_init+0xb8>
	} else {
		_spi_load_regs_master(hw, regs);
    6b78:	68f9      	ldr	r1, [r7, #12]
    6b7a:	6838      	ldr	r0, [r7, #0]
    6b7c:	4b14      	ldr	r3, [pc, #80]	; (6bd0 <_spi_m_sync_init+0x108>)
    6b7e:	4798      	blx	r3
	}

	/* Load character size from default hardware configuration */
	dev->char_size = ((regs->ctrlb & SERCOM_SPI_CTRLB_CHSIZE_Msk) == 0) ? 1 : 2;
    6b80:	68fb      	ldr	r3, [r7, #12]
    6b82:	685b      	ldr	r3, [r3, #4]
    6b84:	f003 0307 	and.w	r3, r3, #7
    6b88:	2b00      	cmp	r3, #0
    6b8a:	d101      	bne.n	6b90 <_spi_m_sync_init+0xc8>
    6b8c:	2201      	movs	r2, #1
    6b8e:	e000      	b.n	6b92 <_spi_m_sync_init+0xca>
    6b90:	2202      	movs	r2, #2
    6b92:	687b      	ldr	r3, [r7, #4]
    6b94:	711a      	strb	r2, [r3, #4]

	dev->dummy_byte = regs->dummy_byte;
    6b96:	68fb      	ldr	r3, [r7, #12]
    6b98:	89db      	ldrh	r3, [r3, #14]
    6b9a:	b29a      	uxth	r2, r3
    6b9c:	687b      	ldr	r3, [r7, #4]
    6b9e:	80da      	strh	r2, [r3, #6]

	return ERR_NONE;
    6ba0:	2300      	movs	r3, #0
}
    6ba2:	4618      	mov	r0, r3
    6ba4:	3710      	adds	r7, #16
    6ba6:	46bd      	mov	sp, r7
    6ba8:	bd80      	pop	{r7, pc}
    6baa:	bf00      	nop
    6bac:	00006875 	.word	0x00006875
    6bb0:	000130e8 	.word	0x000130e8
    6bb4:	00002ed9 	.word	0x00002ed9
    6bb8:	000058c5 	.word	0x000058c5
    6bbc:	00005b7d 	.word	0x00005b7d
    6bc0:	00005b55 	.word	0x00005b55
    6bc4:	000058a1 	.word	0x000058a1
    6bc8:	00005bad 	.word	0x00005bad
    6bcc:	000067c9 	.word	0x000067c9
    6bd0:	00006735 	.word	0x00006735

00006bd4 <_spi_m_async_init>:
{
	return _spi_m_sync_init(dev, hw);
}

int32_t _spi_m_async_init(struct _spi_async_dev *dev, void *const hw)
{
    6bd4:	b580      	push	{r7, lr}
    6bd6:	b086      	sub	sp, #24
    6bd8:	af00      	add	r7, sp, #0
    6bda:	6078      	str	r0, [r7, #4]
    6bdc:	6039      	str	r1, [r7, #0]
	struct _spi_async_dev *spid = dev;
    6bde:	687b      	ldr	r3, [r7, #4]
    6be0:	60fb      	str	r3, [r7, #12]
	/* Do hardware initialize. */
	int32_t rc = _spi_m_sync_init((struct _spi_m_sync_dev *)dev, hw);
    6be2:	6839      	ldr	r1, [r7, #0]
    6be4:	6878      	ldr	r0, [r7, #4]
    6be6:	4b1a      	ldr	r3, [pc, #104]	; (6c50 <_spi_m_async_init+0x7c>)
    6be8:	4798      	blx	r3
    6bea:	60b8      	str	r0, [r7, #8]

	if (rc < 0) {
    6bec:	68bb      	ldr	r3, [r7, #8]
    6bee:	2b00      	cmp	r3, #0
    6bf0:	da01      	bge.n	6bf6 <_spi_m_async_init+0x22>
		return rc;
    6bf2:	68bb      	ldr	r3, [r7, #8]
    6bf4:	e028      	b.n	6c48 <_spi_m_async_init+0x74>
	}

	_sercom_init_irq_param(hw, (void *)dev);
    6bf6:	6879      	ldr	r1, [r7, #4]
    6bf8:	6838      	ldr	r0, [r7, #0]
    6bfa:	4b16      	ldr	r3, [pc, #88]	; (6c54 <_spi_m_async_init+0x80>)
    6bfc:	4798      	blx	r3
	/* Initialize callbacks: must use them */
	spid->callbacks.complete = NULL;
    6bfe:	68fb      	ldr	r3, [r7, #12]
    6c00:	2200      	movs	r2, #0
    6c02:	611a      	str	r2, [r3, #16]
	spid->callbacks.rx       = NULL;
    6c04:	68fb      	ldr	r3, [r7, #12]
    6c06:	2200      	movs	r2, #0
    6c08:	60da      	str	r2, [r3, #12]
	spid->callbacks.tx       = NULL;
    6c0a:	68fb      	ldr	r3, [r7, #12]
    6c0c:	2200      	movs	r2, #0
    6c0e:	609a      	str	r2, [r3, #8]
	uint8_t irq              = _sercom_get_irq_num(hw);
    6c10:	6838      	ldr	r0, [r7, #0]
    6c12:	4b11      	ldr	r3, [pc, #68]	; (6c58 <_spi_m_async_init+0x84>)
    6c14:	4798      	blx	r3
    6c16:	4603      	mov	r3, r0
    6c18:	75fb      	strb	r3, [r7, #23]
	for (uint32_t i = 0; i < 4; i++) {
    6c1a:	2300      	movs	r3, #0
    6c1c:	613b      	str	r3, [r7, #16]
    6c1e:	e00f      	b.n	6c40 <_spi_m_async_init+0x6c>
		NVIC_DisableIRQ((IRQn_Type)irq);
    6c20:	7dfb      	ldrb	r3, [r7, #23]
    6c22:	b21b      	sxth	r3, r3
    6c24:	4618      	mov	r0, r3
    6c26:	4b0d      	ldr	r3, [pc, #52]	; (6c5c <_spi_m_async_init+0x88>)
    6c28:	4798      	blx	r3
		NVIC_ClearPendingIRQ((IRQn_Type)irq);
    6c2a:	7dfb      	ldrb	r3, [r7, #23]
    6c2c:	b21b      	sxth	r3, r3
    6c2e:	4618      	mov	r0, r3
    6c30:	4b0b      	ldr	r3, [pc, #44]	; (6c60 <_spi_m_async_init+0x8c>)
    6c32:	4798      	blx	r3
		irq++;
    6c34:	7dfb      	ldrb	r3, [r7, #23]
    6c36:	3301      	adds	r3, #1
    6c38:	75fb      	strb	r3, [r7, #23]
	for (uint32_t i = 0; i < 4; i++) {
    6c3a:	693b      	ldr	r3, [r7, #16]
    6c3c:	3301      	adds	r3, #1
    6c3e:	613b      	str	r3, [r7, #16]
    6c40:	693b      	ldr	r3, [r7, #16]
    6c42:	2b03      	cmp	r3, #3
    6c44:	d9ec      	bls.n	6c20 <_spi_m_async_init+0x4c>
	}

	return ERR_NONE;
    6c46:	2300      	movs	r3, #0
}
    6c48:	4618      	mov	r0, r3
    6c4a:	3718      	adds	r7, #24
    6c4c:	46bd      	mov	sp, r7
    6c4e:	bd80      	pop	{r7, pc}
    6c50:	00006ac9 	.word	0x00006ac9
    6c54:	00005efd 	.word	0x00005efd
    6c58:	00006309 	.word	0x00006309
    6c5c:	000057d5 	.word	0x000057d5
    6c60:	00005819 	.word	0x00005819

00006c64 <_spi_wait_bus_idle>:
	return _spi_set_data_order(dev->prvt, dord);
}

/** Wait until SPI bus idle. */
static inline void _spi_wait_bus_idle(void *const hw)
{
    6c64:	b580      	push	{r7, lr}
    6c66:	b082      	sub	sp, #8
    6c68:	af00      	add	r7, sp, #0
    6c6a:	6078      	str	r0, [r7, #4]
	while (!(hri_sercomspi_get_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC | SERCOM_SPI_INTFLAG_DRE))) {
    6c6c:	bf00      	nop
    6c6e:	2103      	movs	r1, #3
    6c70:	6878      	ldr	r0, [r7, #4]
    6c72:	4b06      	ldr	r3, [pc, #24]	; (6c8c <_spi_wait_bus_idle+0x28>)
    6c74:	4798      	blx	r3
    6c76:	4603      	mov	r3, r0
    6c78:	2b00      	cmp	r3, #0
    6c7a:	d0f8      	beq.n	6c6e <_spi_wait_bus_idle+0xa>
		;
	}
	hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC | SERCOM_SPI_INTFLAG_DRE);
    6c7c:	2103      	movs	r1, #3
    6c7e:	6878      	ldr	r0, [r7, #4]
    6c80:	4b03      	ldr	r3, [pc, #12]	; (6c90 <_spi_wait_bus_idle+0x2c>)
    6c82:	4798      	blx	r3
}
    6c84:	bf00      	nop
    6c86:	3708      	adds	r7, #8
    6c88:	46bd      	mov	sp, r7
    6c8a:	bd80      	pop	{r7, pc}
    6c8c:	00005959 	.word	0x00005959
    6c90:	0000599b 	.word	0x0000599b

00006c94 <_spi_rx_check_and_receive>:
	uint8_t char_size;
};

/** Check interrupt flag of RXC and update transaction runtime information. */
static inline bool _spi_rx_check_and_receive(void *const hw, const uint32_t iflag, struct _spi_trans_ctrl *ctrl)
{
    6c94:	b580      	push	{r7, lr}
    6c96:	b086      	sub	sp, #24
    6c98:	af00      	add	r7, sp, #0
    6c9a:	60f8      	str	r0, [r7, #12]
    6c9c:	60b9      	str	r1, [r7, #8]
    6c9e:	607a      	str	r2, [r7, #4]
	uint32_t data;

	if (!(iflag & SERCOM_SPI_INTFLAG_RXC)) {
    6ca0:	68bb      	ldr	r3, [r7, #8]
    6ca2:	f003 0304 	and.w	r3, r3, #4
    6ca6:	2b00      	cmp	r3, #0
    6ca8:	d101      	bne.n	6cae <_spi_rx_check_and_receive+0x1a>
		return false;
    6caa:	2300      	movs	r3, #0
    6cac:	e022      	b.n	6cf4 <_spi_rx_check_and_receive+0x60>
	}

	data = hri_sercomspi_read_DATA_reg(hw);
    6cae:	68f8      	ldr	r0, [r7, #12]
    6cb0:	4b12      	ldr	r3, [pc, #72]	; (6cfc <_spi_rx_check_and_receive+0x68>)
    6cb2:	4798      	blx	r3
    6cb4:	6178      	str	r0, [r7, #20]

	if (ctrl->rxbuf) {
    6cb6:	687b      	ldr	r3, [r7, #4]
    6cb8:	685b      	ldr	r3, [r3, #4]
    6cba:	2b00      	cmp	r3, #0
    6cbc:	d014      	beq.n	6ce8 <_spi_rx_check_and_receive+0x54>
		*ctrl->rxbuf++ = (uint8_t)data;
    6cbe:	687b      	ldr	r3, [r7, #4]
    6cc0:	685b      	ldr	r3, [r3, #4]
    6cc2:	1c59      	adds	r1, r3, #1
    6cc4:	687a      	ldr	r2, [r7, #4]
    6cc6:	6051      	str	r1, [r2, #4]
    6cc8:	697a      	ldr	r2, [r7, #20]
    6cca:	b2d2      	uxtb	r2, r2
    6ccc:	701a      	strb	r2, [r3, #0]

		if (ctrl->char_size > 1) {
    6cce:	687b      	ldr	r3, [r7, #4]
    6cd0:	7c1b      	ldrb	r3, [r3, #16]
    6cd2:	2b01      	cmp	r3, #1
    6cd4:	d908      	bls.n	6ce8 <_spi_rx_check_and_receive+0x54>
			*ctrl->rxbuf++ = (uint8_t)(data >> 8);
    6cd6:	687b      	ldr	r3, [r7, #4]
    6cd8:	685b      	ldr	r3, [r3, #4]
    6cda:	1c59      	adds	r1, r3, #1
    6cdc:	687a      	ldr	r2, [r7, #4]
    6cde:	6051      	str	r1, [r2, #4]
    6ce0:	697a      	ldr	r2, [r7, #20]
    6ce2:	0a12      	lsrs	r2, r2, #8
    6ce4:	b2d2      	uxtb	r2, r2
    6ce6:	701a      	strb	r2, [r3, #0]
		}
	}

	ctrl->rxcnt++;
    6ce8:	687b      	ldr	r3, [r7, #4]
    6cea:	68db      	ldr	r3, [r3, #12]
    6cec:	1c5a      	adds	r2, r3, #1
    6cee:	687b      	ldr	r3, [r7, #4]
    6cf0:	60da      	str	r2, [r3, #12]

	return true;
    6cf2:	2301      	movs	r3, #1
}
    6cf4:	4618      	mov	r0, r3
    6cf6:	3718      	adds	r7, #24
    6cf8:	46bd      	mov	sp, r7
    6cfa:	bd80      	pop	{r7, pc}
    6cfc:	00005e25 	.word	0x00005e25

00006d00 <_spi_tx_check_and_send>:

/** Check interrupt flag of DRE and update transaction runtime information. */
static inline void _spi_tx_check_and_send(void *const hw, const uint32_t iflag, struct _spi_trans_ctrl *ctrl,
                                          uint16_t dummy)
{
    6d00:	b580      	push	{r7, lr}
    6d02:	b086      	sub	sp, #24
    6d04:	af00      	add	r7, sp, #0
    6d06:	60f8      	str	r0, [r7, #12]
    6d08:	60b9      	str	r1, [r7, #8]
    6d0a:	607a      	str	r2, [r7, #4]
    6d0c:	807b      	strh	r3, [r7, #2]
	uint32_t data;

	if (!(SERCOM_SPI_INTFLAG_DRE & iflag)) {
    6d0e:	68bb      	ldr	r3, [r7, #8]
    6d10:	f003 0301 	and.w	r3, r3, #1
    6d14:	2b00      	cmp	r3, #0
    6d16:	d028      	beq.n	6d6a <_spi_tx_check_and_send+0x6a>
		return;
	}

	if (ctrl->txbuf) {
    6d18:	687b      	ldr	r3, [r7, #4]
    6d1a:	681b      	ldr	r3, [r3, #0]
    6d1c:	2b00      	cmp	r3, #0
    6d1e:	d018      	beq.n	6d52 <_spi_tx_check_and_send+0x52>
		data = *ctrl->txbuf++;
    6d20:	687b      	ldr	r3, [r7, #4]
    6d22:	681b      	ldr	r3, [r3, #0]
    6d24:	1c59      	adds	r1, r3, #1
    6d26:	687a      	ldr	r2, [r7, #4]
    6d28:	6011      	str	r1, [r2, #0]
    6d2a:	781b      	ldrb	r3, [r3, #0]
    6d2c:	617b      	str	r3, [r7, #20]

		if (ctrl->char_size > 1) {
    6d2e:	687b      	ldr	r3, [r7, #4]
    6d30:	7c1b      	ldrb	r3, [r3, #16]
    6d32:	2b01      	cmp	r3, #1
    6d34:	d90f      	bls.n	6d56 <_spi_tx_check_and_send+0x56>
			data |= (*ctrl->txbuf) << 8;
    6d36:	687b      	ldr	r3, [r7, #4]
    6d38:	681b      	ldr	r3, [r3, #0]
    6d3a:	781b      	ldrb	r3, [r3, #0]
    6d3c:	021b      	lsls	r3, r3, #8
    6d3e:	461a      	mov	r2, r3
    6d40:	697b      	ldr	r3, [r7, #20]
    6d42:	4313      	orrs	r3, r2
    6d44:	617b      	str	r3, [r7, #20]
			ctrl->txbuf++;
    6d46:	687b      	ldr	r3, [r7, #4]
    6d48:	681b      	ldr	r3, [r3, #0]
    6d4a:	1c5a      	adds	r2, r3, #1
    6d4c:	687b      	ldr	r3, [r7, #4]
    6d4e:	601a      	str	r2, [r3, #0]
    6d50:	e001      	b.n	6d56 <_spi_tx_check_and_send+0x56>
		}
	} else {
		data = dummy;
    6d52:	887b      	ldrh	r3, [r7, #2]
    6d54:	617b      	str	r3, [r7, #20]
	}

	ctrl->txcnt++;
    6d56:	687b      	ldr	r3, [r7, #4]
    6d58:	689b      	ldr	r3, [r3, #8]
    6d5a:	1c5a      	adds	r2, r3, #1
    6d5c:	687b      	ldr	r3, [r7, #4]
    6d5e:	609a      	str	r2, [r3, #8]
	hri_sercomspi_write_DATA_reg(hw, data);
    6d60:	6979      	ldr	r1, [r7, #20]
    6d62:	68f8      	ldr	r0, [r7, #12]
    6d64:	4b03      	ldr	r3, [pc, #12]	; (6d74 <_spi_tx_check_and_send+0x74>)
    6d66:	4798      	blx	r3
    6d68:	e000      	b.n	6d6c <_spi_tx_check_and_send+0x6c>
		return;
    6d6a:	bf00      	nop
}
    6d6c:	3718      	adds	r7, #24
    6d6e:	46bd      	mov	sp, r7
    6d70:	bd80      	pop	{r7, pc}
    6d72:	bf00      	nop
    6d74:	00005e09 	.word	0x00005e09

00006d78 <_spi_err_check>:

/** Check interrupt flag of ERROR and update transaction runtime information. */
static inline int32_t _spi_err_check(const uint32_t iflag, void *const hw)
{
    6d78:	b580      	push	{r7, lr}
    6d7a:	b082      	sub	sp, #8
    6d7c:	af00      	add	r7, sp, #0
    6d7e:	6078      	str	r0, [r7, #4]
    6d80:	6039      	str	r1, [r7, #0]
	if (SERCOM_SPI_INTFLAG_ERROR & iflag) {
    6d82:	687b      	ldr	r3, [r7, #4]
    6d84:	f003 0380 	and.w	r3, r3, #128	; 0x80
    6d88:	2b00      	cmp	r3, #0
    6d8a:	d00b      	beq.n	6da4 <_spi_err_check+0x2c>
		hri_sercomspi_clear_STATUS_reg(hw, ~0);
    6d8c:	f64f 71ff 	movw	r1, #65535	; 0xffff
    6d90:	6838      	ldr	r0, [r7, #0]
    6d92:	4b07      	ldr	r3, [pc, #28]	; (6db0 <_spi_err_check+0x38>)
    6d94:	4798      	blx	r3
		hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_ERROR);
    6d96:	2180      	movs	r1, #128	; 0x80
    6d98:	6838      	ldr	r0, [r7, #0]
    6d9a:	4b06      	ldr	r3, [pc, #24]	; (6db4 <_spi_err_check+0x3c>)
    6d9c:	4798      	blx	r3
		return ERR_OVERFLOW;
    6d9e:	f06f 0312 	mvn.w	r3, #18
    6da2:	e000      	b.n	6da6 <_spi_err_check+0x2e>
	}

	return ERR_NONE;
    6da4:	2300      	movs	r3, #0
}
    6da6:	4618      	mov	r0, r3
    6da8:	3708      	adds	r7, #8
    6daa:	46bd      	mov	sp, r7
    6dac:	bd80      	pop	{r7, pc}
    6dae:	bf00      	nop
    6db0:	00005e5d 	.word	0x00005e5d
    6db4:	0000599b 	.word	0x0000599b

00006db8 <_spi_m_sync_trans>:

int32_t _spi_m_sync_trans(struct _spi_m_sync_dev *dev, const struct spi_msg *msg)
{
    6db8:	b590      	push	{r4, r7, lr}
    6dba:	b08b      	sub	sp, #44	; 0x2c
    6dbc:	af00      	add	r7, sp, #0
    6dbe:	6078      	str	r0, [r7, #4]
    6dc0:	6039      	str	r1, [r7, #0]
	void *                 hw   = dev->prvt;
    6dc2:	687b      	ldr	r3, [r7, #4]
    6dc4:	681b      	ldr	r3, [r3, #0]
    6dc6:	623b      	str	r3, [r7, #32]
	int32_t                rc   = 0;
    6dc8:	2300      	movs	r3, #0
    6dca:	627b      	str	r3, [r7, #36]	; 0x24
	struct _spi_trans_ctrl ctrl = {msg->txbuf, msg->rxbuf, 0, 0, dev->char_size};
    6dcc:	683b      	ldr	r3, [r7, #0]
    6dce:	681b      	ldr	r3, [r3, #0]
    6dd0:	60bb      	str	r3, [r7, #8]
    6dd2:	683b      	ldr	r3, [r7, #0]
    6dd4:	685b      	ldr	r3, [r3, #4]
    6dd6:	60fb      	str	r3, [r7, #12]
    6dd8:	2300      	movs	r3, #0
    6dda:	613b      	str	r3, [r7, #16]
    6ddc:	2300      	movs	r3, #0
    6dde:	617b      	str	r3, [r7, #20]
    6de0:	687b      	ldr	r3, [r7, #4]
    6de2:	791b      	ldrb	r3, [r3, #4]
    6de4:	763b      	strb	r3, [r7, #24]

	ASSERT(dev && hw);
    6de6:	687b      	ldr	r3, [r7, #4]
    6de8:	2b00      	cmp	r3, #0
    6dea:	d004      	beq.n	6df6 <_spi_m_sync_trans+0x3e>
    6dec:	6a3b      	ldr	r3, [r7, #32]
    6dee:	2b00      	cmp	r3, #0
    6df0:	d001      	beq.n	6df6 <_spi_m_sync_trans+0x3e>
    6df2:	2301      	movs	r3, #1
    6df4:	e000      	b.n	6df8 <_spi_m_sync_trans+0x40>
    6df6:	2300      	movs	r3, #0
    6df8:	f003 0301 	and.w	r3, r3, #1
    6dfc:	b2db      	uxtb	r3, r3
    6dfe:	f640 324d 	movw	r2, #2893	; 0xb4d
    6e02:	492b      	ldr	r1, [pc, #172]	; (6eb0 <_spi_m_sync_trans+0xf8>)
    6e04:	4618      	mov	r0, r3
    6e06:	4b2b      	ldr	r3, [pc, #172]	; (6eb4 <_spi_m_sync_trans+0xfc>)
    6e08:	4798      	blx	r3

	/* If settings are not applied (pending), we can not go on */
	if (hri_sercomspi_is_syncing(
    6e0a:	2107      	movs	r1, #7
    6e0c:	6a38      	ldr	r0, [r7, #32]
    6e0e:	4b2a      	ldr	r3, [pc, #168]	; (6eb8 <_spi_m_sync_trans+0x100>)
    6e10:	4798      	blx	r3
    6e12:	4603      	mov	r3, r0
    6e14:	2b00      	cmp	r3, #0
    6e16:	d002      	beq.n	6e1e <_spi_m_sync_trans+0x66>
	        hw, (SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE | SERCOM_SPI_SYNCBUSY_CTRLB))) {
		return ERR_BUSY;
    6e18:	f06f 0303 	mvn.w	r3, #3
    6e1c:	e043      	b.n	6ea6 <_spi_m_sync_trans+0xee>
	}

	/* SPI must be enabled to start synchronous transfer */
	if (!hri_sercomspi_get_CTRLA_ENABLE_bit(hw)) {
    6e1e:	6a38      	ldr	r0, [r7, #32]
    6e20:	4b26      	ldr	r3, [pc, #152]	; (6ebc <_spi_m_sync_trans+0x104>)
    6e22:	4798      	blx	r3
    6e24:	4603      	mov	r3, r0
    6e26:	f083 0301 	eor.w	r3, r3, #1
    6e2a:	b2db      	uxtb	r3, r3
    6e2c:	2b00      	cmp	r3, #0
    6e2e:	d002      	beq.n	6e36 <_spi_m_sync_trans+0x7e>
		return ERR_NOT_INITIALIZED;
    6e30:	f06f 0313 	mvn.w	r3, #19
    6e34:	e037      	b.n	6ea6 <_spi_m_sync_trans+0xee>
	}

	for (;;) {
		uint32_t iflag = hri_sercomspi_read_INTFLAG_reg(hw);
    6e36:	6a38      	ldr	r0, [r7, #32]
    6e38:	4b21      	ldr	r3, [pc, #132]	; (6ec0 <_spi_m_sync_trans+0x108>)
    6e3a:	4798      	blx	r3
    6e3c:	4603      	mov	r3, r0
    6e3e:	61fb      	str	r3, [r7, #28]

		if (!_spi_rx_check_and_receive(hw, iflag, &ctrl)) {
    6e40:	f107 0308 	add.w	r3, r7, #8
    6e44:	461a      	mov	r2, r3
    6e46:	69f9      	ldr	r1, [r7, #28]
    6e48:	6a38      	ldr	r0, [r7, #32]
    6e4a:	4b1e      	ldr	r3, [pc, #120]	; (6ec4 <_spi_m_sync_trans+0x10c>)
    6e4c:	4798      	blx	r3
    6e4e:	4603      	mov	r3, r0
    6e50:	f083 0301 	eor.w	r3, r3, #1
    6e54:	b2db      	uxtb	r3, r3
    6e56:	2b00      	cmp	r3, #0
    6e58:	d00b      	beq.n	6e72 <_spi_m_sync_trans+0xba>
			/* In master mode, do not start next byte before previous byte received
			 * to make better output waveform */
			if (ctrl.rxcnt >= ctrl.txcnt) {
    6e5a:	697a      	ldr	r2, [r7, #20]
    6e5c:	693b      	ldr	r3, [r7, #16]
    6e5e:	429a      	cmp	r2, r3
    6e60:	d307      	bcc.n	6e72 <_spi_m_sync_trans+0xba>
				_spi_tx_check_and_send(hw, iflag, &ctrl, dev->dummy_byte);
    6e62:	687b      	ldr	r3, [r7, #4]
    6e64:	88db      	ldrh	r3, [r3, #6]
    6e66:	f107 0208 	add.w	r2, r7, #8
    6e6a:	69f9      	ldr	r1, [r7, #28]
    6e6c:	6a38      	ldr	r0, [r7, #32]
    6e6e:	4c16      	ldr	r4, [pc, #88]	; (6ec8 <_spi_m_sync_trans+0x110>)
    6e70:	47a0      	blx	r4
			}
		}

		rc = _spi_err_check(iflag, hw);
    6e72:	6a39      	ldr	r1, [r7, #32]
    6e74:	69f8      	ldr	r0, [r7, #28]
    6e76:	4b15      	ldr	r3, [pc, #84]	; (6ecc <_spi_m_sync_trans+0x114>)
    6e78:	4798      	blx	r3
    6e7a:	6278      	str	r0, [r7, #36]	; 0x24

		if (rc < 0) {
    6e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    6e7e:	2b00      	cmp	r3, #0
    6e80:	db0c      	blt.n	6e9c <_spi_m_sync_trans+0xe4>
			break;
		}
		if (ctrl.txcnt >= msg->size && ctrl.rxcnt >= msg->size) {
    6e82:	693a      	ldr	r2, [r7, #16]
    6e84:	683b      	ldr	r3, [r7, #0]
    6e86:	689b      	ldr	r3, [r3, #8]
    6e88:	429a      	cmp	r2, r3
    6e8a:	d3d4      	bcc.n	6e36 <_spi_m_sync_trans+0x7e>
    6e8c:	697a      	ldr	r2, [r7, #20]
    6e8e:	683b      	ldr	r3, [r7, #0]
    6e90:	689b      	ldr	r3, [r3, #8]
    6e92:	429a      	cmp	r2, r3
    6e94:	d3cf      	bcc.n	6e36 <_spi_m_sync_trans+0x7e>
			rc = ctrl.txcnt;
    6e96:	693b      	ldr	r3, [r7, #16]
    6e98:	627b      	str	r3, [r7, #36]	; 0x24
			break;
    6e9a:	e000      	b.n	6e9e <_spi_m_sync_trans+0xe6>
			break;
    6e9c:	bf00      	nop
		}
	}
	/* Wait until SPI bus idle */
	_spi_wait_bus_idle(hw);
    6e9e:	6a38      	ldr	r0, [r7, #32]
    6ea0:	4b0b      	ldr	r3, [pc, #44]	; (6ed0 <_spi_m_sync_trans+0x118>)
    6ea2:	4798      	blx	r3

	return rc;
    6ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
    6ea6:	4618      	mov	r0, r3
    6ea8:	372c      	adds	r7, #44	; 0x2c
    6eaa:	46bd      	mov	sp, r7
    6eac:	bd90      	pop	{r4, r7, pc}
    6eae:	bf00      	nop
    6eb0:	000130e8 	.word	0x000130e8
    6eb4:	00002ed9 	.word	0x00002ed9
    6eb8:	000058c5 	.word	0x000058c5
    6ebc:	00005b1d 	.word	0x00005b1d
    6ec0:	00005981 	.word	0x00005981
    6ec4:	00006c95 	.word	0x00006c95
    6ec8:	00006d01 	.word	0x00006d01
    6ecc:	00006d79 	.word	0x00006d79
    6ed0:	00006c65 	.word	0x00006c65

00006ed4 <_spi_m_async_enable_tx>:

int32_t _spi_m_async_enable_tx(struct _spi_async_dev *dev, bool state)
{
    6ed4:	b580      	push	{r7, lr}
    6ed6:	b084      	sub	sp, #16
    6ed8:	af00      	add	r7, sp, #0
    6eda:	6078      	str	r0, [r7, #4]
    6edc:	460b      	mov	r3, r1
    6ede:	70fb      	strb	r3, [r7, #3]
	void *hw = dev->prvt;
    6ee0:	687b      	ldr	r3, [r7, #4]
    6ee2:	681b      	ldr	r3, [r3, #0]
    6ee4:	60fb      	str	r3, [r7, #12]

	ASSERT(dev && hw);
    6ee6:	687b      	ldr	r3, [r7, #4]
    6ee8:	2b00      	cmp	r3, #0
    6eea:	d004      	beq.n	6ef6 <_spi_m_async_enable_tx+0x22>
    6eec:	68fb      	ldr	r3, [r7, #12]
    6eee:	2b00      	cmp	r3, #0
    6ef0:	d001      	beq.n	6ef6 <_spi_m_async_enable_tx+0x22>
    6ef2:	2301      	movs	r3, #1
    6ef4:	e000      	b.n	6ef8 <_spi_m_async_enable_tx+0x24>
    6ef6:	2300      	movs	r3, #0
    6ef8:	f003 0301 	and.w	r3, r3, #1
    6efc:	b2db      	uxtb	r3, r3
    6efe:	f640 3279 	movw	r2, #2937	; 0xb79
    6f02:	4909      	ldr	r1, [pc, #36]	; (6f28 <_spi_m_async_enable_tx+0x54>)
    6f04:	4618      	mov	r0, r3
    6f06:	4b09      	ldr	r3, [pc, #36]	; (6f2c <_spi_m_async_enable_tx+0x58>)
    6f08:	4798      	blx	r3

	if (state) {
    6f0a:	78fb      	ldrb	r3, [r7, #3]
    6f0c:	2b00      	cmp	r3, #0
    6f0e:	d003      	beq.n	6f18 <_spi_m_async_enable_tx+0x44>
		hri_sercomspi_set_INTEN_DRE_bit(hw);
    6f10:	68f8      	ldr	r0, [r7, #12]
    6f12:	4b07      	ldr	r3, [pc, #28]	; (6f30 <_spi_m_async_enable_tx+0x5c>)
    6f14:	4798      	blx	r3
    6f16:	e002      	b.n	6f1e <_spi_m_async_enable_tx+0x4a>
	} else {
		hri_sercomspi_clear_INTEN_DRE_bit(hw);
    6f18:	68f8      	ldr	r0, [r7, #12]
    6f1a:	4b06      	ldr	r3, [pc, #24]	; (6f34 <_spi_m_async_enable_tx+0x60>)
    6f1c:	4798      	blx	r3
	}

	return ERR_NONE;
    6f1e:	2300      	movs	r3, #0
}
    6f20:	4618      	mov	r0, r3
    6f22:	3710      	adds	r7, #16
    6f24:	46bd      	mov	sp, r7
    6f26:	bd80      	pop	{r7, pc}
    6f28:	000130e8 	.word	0x000130e8
    6f2c:	00002ed9 	.word	0x00002ed9
    6f30:	000059b9 	.word	0x000059b9
    6f34:	000059d3 	.word	0x000059d3

00006f38 <_spi_m_async_enable_rx>:
{
	return _spi_m_async_enable_tx(dev, state);
}

int32_t _spi_m_async_enable_rx(struct _spi_async_dev *dev, bool state)
{
    6f38:	b580      	push	{r7, lr}
    6f3a:	b084      	sub	sp, #16
    6f3c:	af00      	add	r7, sp, #0
    6f3e:	6078      	str	r0, [r7, #4]
    6f40:	460b      	mov	r3, r1
    6f42:	70fb      	strb	r3, [r7, #3]
	void *hw = dev->prvt;
    6f44:	687b      	ldr	r3, [r7, #4]
    6f46:	681b      	ldr	r3, [r3, #0]
    6f48:	60fb      	str	r3, [r7, #12]

	ASSERT(dev);
    6f4a:	687b      	ldr	r3, [r7, #4]
    6f4c:	2b00      	cmp	r3, #0
    6f4e:	bf14      	ite	ne
    6f50:	2301      	movne	r3, #1
    6f52:	2300      	moveq	r3, #0
    6f54:	b2db      	uxtb	r3, r3
    6f56:	f640 328d 	movw	r2, #2957	; 0xb8d
    6f5a:	490f      	ldr	r1, [pc, #60]	; (6f98 <_spi_m_async_enable_rx+0x60>)
    6f5c:	4618      	mov	r0, r3
    6f5e:	4b0f      	ldr	r3, [pc, #60]	; (6f9c <_spi_m_async_enable_rx+0x64>)
    6f60:	4798      	blx	r3
	ASSERT(hw);
    6f62:	68fb      	ldr	r3, [r7, #12]
    6f64:	2b00      	cmp	r3, #0
    6f66:	bf14      	ite	ne
    6f68:	2301      	movne	r3, #1
    6f6a:	2300      	moveq	r3, #0
    6f6c:	b2db      	uxtb	r3, r3
    6f6e:	f640 328e 	movw	r2, #2958	; 0xb8e
    6f72:	4909      	ldr	r1, [pc, #36]	; (6f98 <_spi_m_async_enable_rx+0x60>)
    6f74:	4618      	mov	r0, r3
    6f76:	4b09      	ldr	r3, [pc, #36]	; (6f9c <_spi_m_async_enable_rx+0x64>)
    6f78:	4798      	blx	r3

	if (state) {
    6f7a:	78fb      	ldrb	r3, [r7, #3]
    6f7c:	2b00      	cmp	r3, #0
    6f7e:	d003      	beq.n	6f88 <_spi_m_async_enable_rx+0x50>
		hri_sercomspi_set_INTEN_RXC_bit(hw);
    6f80:	68f8      	ldr	r0, [r7, #12]
    6f82:	4b07      	ldr	r3, [pc, #28]	; (6fa0 <_spi_m_async_enable_rx+0x68>)
    6f84:	4798      	blx	r3
    6f86:	e002      	b.n	6f8e <_spi_m_async_enable_rx+0x56>
	} else {
		hri_sercomspi_clear_INTEN_RXC_bit(hw);
    6f88:	68f8      	ldr	r0, [r7, #12]
    6f8a:	4b06      	ldr	r3, [pc, #24]	; (6fa4 <_spi_m_async_enable_rx+0x6c>)
    6f8c:	4798      	blx	r3
	}

	return ERR_NONE;
    6f8e:	2300      	movs	r3, #0
}
    6f90:	4618      	mov	r0, r3
    6f92:	3710      	adds	r7, #16
    6f94:	46bd      	mov	sp, r7
    6f96:	bd80      	pop	{r7, pc}
    6f98:	000130e8 	.word	0x000130e8
    6f9c:	00002ed9 	.word	0x00002ed9
    6fa0:	00005a21 	.word	0x00005a21
    6fa4:	00005a3b 	.word	0x00005a3b

00006fa8 <_spi_m_async_enable_tx_complete>:
{
	return _spi_m_async_enable_rx(dev, state);
}

int32_t _spi_m_async_enable_tx_complete(struct _spi_async_dev *dev, bool state)
{
    6fa8:	b580      	push	{r7, lr}
    6faa:	b082      	sub	sp, #8
    6fac:	af00      	add	r7, sp, #0
    6fae:	6078      	str	r0, [r7, #4]
    6fb0:	460b      	mov	r3, r1
    6fb2:	70fb      	strb	r3, [r7, #3]
	ASSERT(dev && dev->prvt);
    6fb4:	687b      	ldr	r3, [r7, #4]
    6fb6:	2b00      	cmp	r3, #0
    6fb8:	d005      	beq.n	6fc6 <_spi_m_async_enable_tx_complete+0x1e>
    6fba:	687b      	ldr	r3, [r7, #4]
    6fbc:	681b      	ldr	r3, [r3, #0]
    6fbe:	2b00      	cmp	r3, #0
    6fc0:	d001      	beq.n	6fc6 <_spi_m_async_enable_tx_complete+0x1e>
    6fc2:	2301      	movs	r3, #1
    6fc4:	e000      	b.n	6fc8 <_spi_m_async_enable_tx_complete+0x20>
    6fc6:	2300      	movs	r3, #0
    6fc8:	f003 0301 	and.w	r3, r3, #1
    6fcc:	b2db      	uxtb	r3, r3
    6fce:	f44f 623a 	mov.w	r2, #2976	; 0xba0
    6fd2:	490b      	ldr	r1, [pc, #44]	; (7000 <_spi_m_async_enable_tx_complete+0x58>)
    6fd4:	4618      	mov	r0, r3
    6fd6:	4b0b      	ldr	r3, [pc, #44]	; (7004 <_spi_m_async_enable_tx_complete+0x5c>)
    6fd8:	4798      	blx	r3

	if (state) {
    6fda:	78fb      	ldrb	r3, [r7, #3]
    6fdc:	2b00      	cmp	r3, #0
    6fde:	d005      	beq.n	6fec <_spi_m_async_enable_tx_complete+0x44>
		hri_sercomspi_set_INTEN_TXC_bit(dev->prvt);
    6fe0:	687b      	ldr	r3, [r7, #4]
    6fe2:	681b      	ldr	r3, [r3, #0]
    6fe4:	4618      	mov	r0, r3
    6fe6:	4b08      	ldr	r3, [pc, #32]	; (7008 <_spi_m_async_enable_tx_complete+0x60>)
    6fe8:	4798      	blx	r3
    6fea:	e004      	b.n	6ff6 <_spi_m_async_enable_tx_complete+0x4e>
	} else {
		hri_sercomspi_clear_INTEN_TXC_bit(dev->prvt);
    6fec:	687b      	ldr	r3, [r7, #4]
    6fee:	681b      	ldr	r3, [r3, #0]
    6ff0:	4618      	mov	r0, r3
    6ff2:	4b06      	ldr	r3, [pc, #24]	; (700c <_spi_m_async_enable_tx_complete+0x64>)
    6ff4:	4798      	blx	r3
	}

	return ERR_NONE;
    6ff6:	2300      	movs	r3, #0
}
    6ff8:	4618      	mov	r0, r3
    6ffa:	3708      	adds	r7, #8
    6ffc:	46bd      	mov	sp, r7
    6ffe:	bd80      	pop	{r7, pc}
    7000:	000130e8 	.word	0x000130e8
    7004:	00002ed9 	.word	0x00002ed9
    7008:	000059ed 	.word	0x000059ed
    700c:	00005a07 	.word	0x00005a07

00007010 <_spi_m_async_write_one>:
{
	return _spi_m_async_enable_tx_complete(dev, state);
}

int32_t _spi_m_async_write_one(struct _spi_async_dev *dev, uint16_t data)
{
    7010:	b580      	push	{r7, lr}
    7012:	b082      	sub	sp, #8
    7014:	af00      	add	r7, sp, #0
    7016:	6078      	str	r0, [r7, #4]
    7018:	460b      	mov	r3, r1
    701a:	807b      	strh	r3, [r7, #2]
	ASSERT(dev && dev->prvt);
    701c:	687b      	ldr	r3, [r7, #4]
    701e:	2b00      	cmp	r3, #0
    7020:	d005      	beq.n	702e <_spi_m_async_write_one+0x1e>
    7022:	687b      	ldr	r3, [r7, #4]
    7024:	681b      	ldr	r3, [r3, #0]
    7026:	2b00      	cmp	r3, #0
    7028:	d001      	beq.n	702e <_spi_m_async_write_one+0x1e>
    702a:	2301      	movs	r3, #1
    702c:	e000      	b.n	7030 <_spi_m_async_write_one+0x20>
    702e:	2300      	movs	r3, #0
    7030:	f003 0301 	and.w	r3, r3, #1
    7034:	b2db      	uxtb	r3, r3
    7036:	f640 32b2 	movw	r2, #2994	; 0xbb2
    703a:	4908      	ldr	r1, [pc, #32]	; (705c <_spi_m_async_write_one+0x4c>)
    703c:	4618      	mov	r0, r3
    703e:	4b08      	ldr	r3, [pc, #32]	; (7060 <_spi_m_async_write_one+0x50>)
    7040:	4798      	blx	r3

	hri_sercomspi_write_DATA_reg(dev->prvt, data);
    7042:	687b      	ldr	r3, [r7, #4]
    7044:	681b      	ldr	r3, [r3, #0]
    7046:	887a      	ldrh	r2, [r7, #2]
    7048:	4611      	mov	r1, r2
    704a:	4618      	mov	r0, r3
    704c:	4b05      	ldr	r3, [pc, #20]	; (7064 <_spi_m_async_write_one+0x54>)
    704e:	4798      	blx	r3

	return ERR_NONE;
    7050:	2300      	movs	r3, #0
}
    7052:	4618      	mov	r0, r3
    7054:	3708      	adds	r7, #8
    7056:	46bd      	mov	sp, r7
    7058:	bd80      	pop	{r7, pc}
    705a:	bf00      	nop
    705c:	000130e8 	.word	0x000130e8
    7060:	00002ed9 	.word	0x00002ed9
    7064:	00005e09 	.word	0x00005e09

00007068 <_spi_m_async_read_one>:

	return ERR_NONE;
}

uint16_t _spi_m_async_read_one(struct _spi_async_dev *dev)
{
    7068:	b580      	push	{r7, lr}
    706a:	b082      	sub	sp, #8
    706c:	af00      	add	r7, sp, #0
    706e:	6078      	str	r0, [r7, #4]
	ASSERT(dev && dev->prvt);
    7070:	687b      	ldr	r3, [r7, #4]
    7072:	2b00      	cmp	r3, #0
    7074:	d005      	beq.n	7082 <_spi_m_async_read_one+0x1a>
    7076:	687b      	ldr	r3, [r7, #4]
    7078:	681b      	ldr	r3, [r3, #0]
    707a:	2b00      	cmp	r3, #0
    707c:	d001      	beq.n	7082 <_spi_m_async_read_one+0x1a>
    707e:	2301      	movs	r3, #1
    7080:	e000      	b.n	7084 <_spi_m_async_read_one+0x1c>
    7082:	2300      	movs	r3, #0
    7084:	f003 0301 	and.w	r3, r3, #1
    7088:	b2db      	uxtb	r3, r3
    708a:	f640 32cd 	movw	r2, #3021	; 0xbcd
    708e:	4907      	ldr	r1, [pc, #28]	; (70ac <_spi_m_async_read_one+0x44>)
    7090:	4618      	mov	r0, r3
    7092:	4b07      	ldr	r3, [pc, #28]	; (70b0 <_spi_m_async_read_one+0x48>)
    7094:	4798      	blx	r3

	return hri_sercomspi_read_DATA_reg(dev->prvt);
    7096:	687b      	ldr	r3, [r7, #4]
    7098:	681b      	ldr	r3, [r3, #0]
    709a:	4618      	mov	r0, r3
    709c:	4b05      	ldr	r3, [pc, #20]	; (70b4 <_spi_m_async_read_one+0x4c>)
    709e:	4798      	blx	r3
    70a0:	4603      	mov	r3, r0
    70a2:	b29b      	uxth	r3, r3
}
    70a4:	4618      	mov	r0, r3
    70a6:	3708      	adds	r7, #8
    70a8:	46bd      	mov	sp, r7
    70aa:	bd80      	pop	{r7, pc}
    70ac:	000130e8 	.word	0x000130e8
    70b0:	00002ed9 	.word	0x00002ed9
    70b4:	00005e25 	.word	0x00005e25

000070b8 <_spi_m_async_register_callback>:
	return hri_sercomspi_read_DATA_reg(dev->prvt);
}

int32_t _spi_m_async_register_callback(struct _spi_async_dev *dev, const enum _spi_async_dev_cb_type cb_type,
                                       const FUNC_PTR func)
{
    70b8:	b580      	push	{r7, lr}
    70ba:	b086      	sub	sp, #24
    70bc:	af00      	add	r7, sp, #0
    70be:	60f8      	str	r0, [r7, #12]
    70c0:	460b      	mov	r3, r1
    70c2:	607a      	str	r2, [r7, #4]
    70c4:	72fb      	strb	r3, [r7, #11]
	typedef void (*func_t)(void);
	struct _spi_async_dev *spid = dev;
    70c6:	68fb      	ldr	r3, [r7, #12]
    70c8:	617b      	str	r3, [r7, #20]

	ASSERT(dev && (cb_type < SPI_DEV_CB_N));
    70ca:	68fb      	ldr	r3, [r7, #12]
    70cc:	2b00      	cmp	r3, #0
    70ce:	d004      	beq.n	70da <_spi_m_async_register_callback+0x22>
    70d0:	7afb      	ldrb	r3, [r7, #11]
    70d2:	2b03      	cmp	r3, #3
    70d4:	d801      	bhi.n	70da <_spi_m_async_register_callback+0x22>
    70d6:	2301      	movs	r3, #1
    70d8:	e000      	b.n	70dc <_spi_m_async_register_callback+0x24>
    70da:	2300      	movs	r3, #0
    70dc:	f003 0301 	and.w	r3, r3, #1
    70e0:	b2db      	uxtb	r3, r3
    70e2:	f640 32e6 	movw	r2, #3046	; 0xbe6
    70e6:	4909      	ldr	r1, [pc, #36]	; (710c <_spi_m_async_register_callback+0x54>)
    70e8:	4618      	mov	r0, r3
    70ea:	4b09      	ldr	r3, [pc, #36]	; (7110 <_spi_m_async_register_callback+0x58>)
    70ec:	4798      	blx	r3

	func_t *p_ls  = (func_t *)&spid->callbacks;
    70ee:	697b      	ldr	r3, [r7, #20]
    70f0:	3308      	adds	r3, #8
    70f2:	613b      	str	r3, [r7, #16]
	p_ls[cb_type] = (func_t)func;
    70f4:	7afb      	ldrb	r3, [r7, #11]
    70f6:	009b      	lsls	r3, r3, #2
    70f8:	693a      	ldr	r2, [r7, #16]
    70fa:	4413      	add	r3, r2
    70fc:	687a      	ldr	r2, [r7, #4]
    70fe:	601a      	str	r2, [r3, #0]

	return ERR_NONE;
    7100:	2300      	movs	r3, #0
}
    7102:	4618      	mov	r0, r3
    7104:	3718      	adds	r7, #24
    7106:	46bd      	mov	sp, r7
    7108:	bd80      	pop	{r7, pc}
    710a:	bf00      	nop
    710c:	000130e8 	.word	0x000130e8
    7110:	00002ed9 	.word	0x00002ed9

00007114 <__NVIC_EnableIRQ>:
{
    7114:	b480      	push	{r7}
    7116:	b083      	sub	sp, #12
    7118:	af00      	add	r7, sp, #0
    711a:	4603      	mov	r3, r0
    711c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    711e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    7122:	2b00      	cmp	r3, #0
    7124:	db0b      	blt.n	713e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    7126:	4909      	ldr	r1, [pc, #36]	; (714c <__NVIC_EnableIRQ+0x38>)
    7128:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    712c:	095b      	lsrs	r3, r3, #5
    712e:	88fa      	ldrh	r2, [r7, #6]
    7130:	f002 021f 	and.w	r2, r2, #31
    7134:	2001      	movs	r0, #1
    7136:	fa00 f202 	lsl.w	r2, r0, r2
    713a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    713e:	bf00      	nop
    7140:	370c      	adds	r7, #12
    7142:	46bd      	mov	sp, r7
    7144:	f85d 7b04 	ldr.w	r7, [sp], #4
    7148:	4770      	bx	lr
    714a:	bf00      	nop
    714c:	e000e100 	.word	0xe000e100

00007150 <__NVIC_DisableIRQ>:
{
    7150:	b480      	push	{r7}
    7152:	b083      	sub	sp, #12
    7154:	af00      	add	r7, sp, #0
    7156:	4603      	mov	r3, r0
    7158:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    715a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    715e:	2b00      	cmp	r3, #0
    7160:	db10      	blt.n	7184 <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    7162:	490b      	ldr	r1, [pc, #44]	; (7190 <__NVIC_DisableIRQ+0x40>)
    7164:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    7168:	095b      	lsrs	r3, r3, #5
    716a:	88fa      	ldrh	r2, [r7, #6]
    716c:	f002 021f 	and.w	r2, r2, #31
    7170:	2001      	movs	r0, #1
    7172:	fa00 f202 	lsl.w	r2, r0, r2
    7176:	3320      	adds	r3, #32
    7178:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    717c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    7180:	f3bf 8f6f 	isb	sy
}
    7184:	bf00      	nop
    7186:	370c      	adds	r7, #12
    7188:	46bd      	mov	sp, r7
    718a:	f85d 7b04 	ldr.w	r7, [sp], #4
    718e:	4770      	bx	lr
    7190:	e000e100 	.word	0xe000e100

00007194 <__NVIC_ClearPendingIRQ>:
{
    7194:	b480      	push	{r7}
    7196:	b083      	sub	sp, #12
    7198:	af00      	add	r7, sp, #0
    719a:	4603      	mov	r3, r0
    719c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    719e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    71a2:	2b00      	cmp	r3, #0
    71a4:	db0c      	blt.n	71c0 <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    71a6:	4909      	ldr	r1, [pc, #36]	; (71cc <__NVIC_ClearPendingIRQ+0x38>)
    71a8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    71ac:	095b      	lsrs	r3, r3, #5
    71ae:	88fa      	ldrh	r2, [r7, #6]
    71b0:	f002 021f 	and.w	r2, r2, #31
    71b4:	2001      	movs	r0, #1
    71b6:	fa00 f202 	lsl.w	r2, r0, r2
    71ba:	3360      	adds	r3, #96	; 0x60
    71bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    71c0:	bf00      	nop
    71c2:	370c      	adds	r7, #12
    71c4:	46bd      	mov	sp, r7
    71c6:	f85d 7b04 	ldr.w	r7, [sp], #4
    71ca:	4770      	bx	lr
    71cc:	e000e100 	.word	0xe000e100

000071d0 <hri_tc_wait_for_sync>:
typedef uint8_t  hri_tccount8_count_reg_t;
typedef uint8_t  hri_tccount8_per_reg_t;
typedef uint8_t  hri_tccount8_perbuf_reg_t;

static inline void hri_tc_wait_for_sync(const void *const hw, hri_tc_syncbusy_reg_t reg)
{
    71d0:	b480      	push	{r7}
    71d2:	b083      	sub	sp, #12
    71d4:	af00      	add	r7, sp, #0
    71d6:	6078      	str	r0, [r7, #4]
    71d8:	6039      	str	r1, [r7, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    71da:	bf00      	nop
    71dc:	687b      	ldr	r3, [r7, #4]
    71de:	691a      	ldr	r2, [r3, #16]
    71e0:	683b      	ldr	r3, [r7, #0]
    71e2:	4013      	ands	r3, r2
    71e4:	2b00      	cmp	r3, #0
    71e6:	d1f9      	bne.n	71dc <hri_tc_wait_for_sync+0xc>
	};
}
    71e8:	bf00      	nop
    71ea:	370c      	adds	r7, #12
    71ec:	46bd      	mov	sp, r7
    71ee:	f85d 7b04 	ldr.w	r7, [sp], #4
    71f2:	4770      	bx	lr

000071f4 <hri_tc_is_syncing>:

static inline bool hri_tc_is_syncing(const void *const hw, hri_tc_syncbusy_reg_t reg)
{
    71f4:	b480      	push	{r7}
    71f6:	b083      	sub	sp, #12
    71f8:	af00      	add	r7, sp, #0
    71fa:	6078      	str	r0, [r7, #4]
    71fc:	6039      	str	r1, [r7, #0]
	return ((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg;
    71fe:	687b      	ldr	r3, [r7, #4]
    7200:	691a      	ldr	r2, [r3, #16]
    7202:	683b      	ldr	r3, [r7, #0]
    7204:	4013      	ands	r3, r2
    7206:	2b00      	cmp	r3, #0
    7208:	bf14      	ite	ne
    720a:	2301      	movne	r3, #1
    720c:	2300      	moveq	r3, #0
    720e:	b2db      	uxtb	r3, r3
}
    7210:	4618      	mov	r0, r3
    7212:	370c      	adds	r7, #12
    7214:	46bd      	mov	sp, r7
    7216:	f85d 7b04 	ldr.w	r7, [sp], #4
    721a:	4770      	bx	lr

0000721c <hri_tc_get_interrupt_OVF_bit>:
{
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_MC1;
}

static inline bool hri_tc_get_interrupt_OVF_bit(const void *const hw)
{
    721c:	b480      	push	{r7}
    721e:	b083      	sub	sp, #12
    7220:	af00      	add	r7, sp, #0
    7222:	6078      	str	r0, [r7, #4]
	return (((Tc *)hw)->COUNT16.INTFLAG.reg & TC_INTFLAG_OVF) >> TC_INTFLAG_OVF_Pos;
    7224:	687b      	ldr	r3, [r7, #4]
    7226:	7a9b      	ldrb	r3, [r3, #10]
    7228:	b2db      	uxtb	r3, r3
    722a:	f003 0301 	and.w	r3, r3, #1
    722e:	2b00      	cmp	r3, #0
    7230:	bf14      	ite	ne
    7232:	2301      	movne	r3, #1
    7234:	2300      	moveq	r3, #0
    7236:	b2db      	uxtb	r3, r3
}
    7238:	4618      	mov	r0, r3
    723a:	370c      	adds	r7, #12
    723c:	46bd      	mov	sp, r7
    723e:	f85d 7b04 	ldr.w	r7, [sp], #4
    7242:	4770      	bx	lr

00007244 <hri_tc_clear_interrupt_OVF_bit>:

static inline void hri_tc_clear_interrupt_OVF_bit(const void *const hw)
{
    7244:	b480      	push	{r7}
    7246:	b083      	sub	sp, #12
    7248:	af00      	add	r7, sp, #0
    724a:	6078      	str	r0, [r7, #4]
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_OVF;
    724c:	687b      	ldr	r3, [r7, #4]
    724e:	2201      	movs	r2, #1
    7250:	729a      	strb	r2, [r3, #10]
}
    7252:	bf00      	nop
    7254:	370c      	adds	r7, #12
    7256:	46bd      	mov	sp, r7
    7258:	f85d 7b04 	ldr.w	r7, [sp], #4
    725c:	4770      	bx	lr

0000725e <hri_tc_clear_interrupt_ERR_bit>:
{
	return (((Tc *)hw)->COUNT16.INTFLAG.reg & TC_INTFLAG_ERR) >> TC_INTFLAG_ERR_Pos;
}

static inline void hri_tc_clear_interrupt_ERR_bit(const void *const hw)
{
    725e:	b480      	push	{r7}
    7260:	b083      	sub	sp, #12
    7262:	af00      	add	r7, sp, #0
    7264:	6078      	str	r0, [r7, #4]
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_ERR;
    7266:	687b      	ldr	r3, [r7, #4]
    7268:	2202      	movs	r2, #2
    726a:	729a      	strb	r2, [r3, #10]
}
    726c:	bf00      	nop
    726e:	370c      	adds	r7, #12
    7270:	46bd      	mov	sp, r7
    7272:	f85d 7b04 	ldr.w	r7, [sp], #4
    7276:	4770      	bx	lr

00007278 <hri_tc_set_INTEN_OVF_bit>:
{
	((Tc *)hw)->COUNT16.CTRLBCLR.reg = mask;
}

static inline void hri_tc_set_INTEN_OVF_bit(const void *const hw)
{
    7278:	b480      	push	{r7}
    727a:	b083      	sub	sp, #12
    727c:	af00      	add	r7, sp, #0
    727e:	6078      	str	r0, [r7, #4]
	((Tc *)hw)->COUNT16.INTENSET.reg = TC_INTENSET_OVF;
    7280:	687b      	ldr	r3, [r7, #4]
    7282:	2201      	movs	r2, #1
    7284:	725a      	strb	r2, [r3, #9]
}
    7286:	bf00      	nop
    7288:	370c      	adds	r7, #12
    728a:	46bd      	mov	sp, r7
    728c:	f85d 7b04 	ldr.w	r7, [sp], #4
    7290:	4770      	bx	lr

00007292 <hri_tc_get_INTEN_ERR_bit>:
{
	((Tc *)hw)->COUNT16.INTENSET.reg = TC_INTENSET_ERR;
}

static inline bool hri_tc_get_INTEN_ERR_bit(const void *const hw)
{
    7292:	b480      	push	{r7}
    7294:	b083      	sub	sp, #12
    7296:	af00      	add	r7, sp, #0
    7298:	6078      	str	r0, [r7, #4]
	return (((Tc *)hw)->COUNT16.INTENSET.reg & TC_INTENSET_ERR) >> TC_INTENSET_ERR_Pos;
    729a:	687b      	ldr	r3, [r7, #4]
    729c:	7a5b      	ldrb	r3, [r3, #9]
    729e:	b2db      	uxtb	r3, r3
    72a0:	085b      	lsrs	r3, r3, #1
    72a2:	f003 0301 	and.w	r3, r3, #1
    72a6:	2b00      	cmp	r3, #0
    72a8:	bf14      	ite	ne
    72aa:	2301      	movne	r3, #1
    72ac:	2300      	moveq	r3, #0
    72ae:	b2db      	uxtb	r3, r3
}
    72b0:	4618      	mov	r0, r3
    72b2:	370c      	adds	r7, #12
    72b4:	46bd      	mov	sp, r7
    72b6:	f85d 7b04 	ldr.w	r7, [sp], #4
    72ba:	4770      	bx	lr

000072bc <hri_tc_clear_CTRLA_ENABLE_bit>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_tc_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    72bc:	b580      	push	{r7, lr}
    72be:	b082      	sub	sp, #8
    72c0:	af00      	add	r7, sp, #0
    72c2:	6078      	str	r0, [r7, #4]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    72c4:	687b      	ldr	r3, [r7, #4]
    72c6:	681b      	ldr	r3, [r3, #0]
    72c8:	f023 0202 	bic.w	r2, r3, #2
    72cc:	687b      	ldr	r3, [r7, #4]
    72ce:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    72d0:	2103      	movs	r1, #3
    72d2:	6878      	ldr	r0, [r7, #4]
    72d4:	4b02      	ldr	r3, [pc, #8]	; (72e0 <hri_tc_clear_CTRLA_ENABLE_bit+0x24>)
    72d6:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    72d8:	bf00      	nop
    72da:	3708      	adds	r7, #8
    72dc:	46bd      	mov	sp, r7
    72de:	bd80      	pop	{r7, pc}
    72e0:	000071d1 	.word	0x000071d1

000072e4 <hri_tc_get_CTRLA_reg>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tc_ctrla_reg_t hri_tc_get_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t mask)
{
    72e4:	b580      	push	{r7, lr}
    72e6:	b084      	sub	sp, #16
    72e8:	af00      	add	r7, sp, #0
    72ea:	6078      	str	r0, [r7, #4]
    72ec:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    72ee:	2103      	movs	r1, #3
    72f0:	6878      	ldr	r0, [r7, #4]
    72f2:	4b07      	ldr	r3, [pc, #28]	; (7310 <hri_tc_get_CTRLA_reg+0x2c>)
    72f4:	4798      	blx	r3
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    72f6:	687b      	ldr	r3, [r7, #4]
    72f8:	681b      	ldr	r3, [r3, #0]
    72fa:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    72fc:	68fa      	ldr	r2, [r7, #12]
    72fe:	683b      	ldr	r3, [r7, #0]
    7300:	4013      	ands	r3, r2
    7302:	60fb      	str	r3, [r7, #12]
	return tmp;
    7304:	68fb      	ldr	r3, [r7, #12]
}
    7306:	4618      	mov	r0, r3
    7308:	3710      	adds	r7, #16
    730a:	46bd      	mov	sp, r7
    730c:	bd80      	pop	{r7, pc}
    730e:	bf00      	nop
    7310:	000071d1 	.word	0x000071d1

00007314 <hri_tc_write_CTRLA_reg>:

static inline void hri_tc_write_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t data)
{
    7314:	b580      	push	{r7, lr}
    7316:	b082      	sub	sp, #8
    7318:	af00      	add	r7, sp, #0
    731a:	6078      	str	r0, [r7, #4]
    731c:	6039      	str	r1, [r7, #0]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    731e:	687b      	ldr	r3, [r7, #4]
    7320:	683a      	ldr	r2, [r7, #0]
    7322:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    7324:	2103      	movs	r1, #3
    7326:	6878      	ldr	r0, [r7, #4]
    7328:	4b02      	ldr	r3, [pc, #8]	; (7334 <hri_tc_write_CTRLA_reg+0x20>)
    732a:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    732c:	bf00      	nop
    732e:	3708      	adds	r7, #8
    7330:	46bd      	mov	sp, r7
    7332:	bd80      	pop	{r7, pc}
    7334:	000071d1 	.word	0x000071d1

00007338 <hri_tc_write_EVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tc_write_EVCTRL_reg(const void *const hw, hri_tc_evctrl_reg_t data)
{
    7338:	b480      	push	{r7}
    733a:	b083      	sub	sp, #12
    733c:	af00      	add	r7, sp, #0
    733e:	6078      	str	r0, [r7, #4]
    7340:	460b      	mov	r3, r1
    7342:	807b      	strh	r3, [r7, #2]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.EVCTRL.reg = data;
    7344:	687b      	ldr	r3, [r7, #4]
    7346:	887a      	ldrh	r2, [r7, #2]
    7348:	80da      	strh	r2, [r3, #6]
	TC_CRITICAL_SECTION_LEAVE();
}
    734a:	bf00      	nop
    734c:	370c      	adds	r7, #12
    734e:	46bd      	mov	sp, r7
    7350:	f85d 7b04 	ldr.w	r7, [sp], #4
    7354:	4770      	bx	lr

00007356 <hri_tc_write_WAVE_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tc_write_WAVE_reg(const void *const hw, hri_tc_wave_reg_t data)
{
    7356:	b480      	push	{r7}
    7358:	b083      	sub	sp, #12
    735a:	af00      	add	r7, sp, #0
    735c:	6078      	str	r0, [r7, #4]
    735e:	460b      	mov	r3, r1
    7360:	70fb      	strb	r3, [r7, #3]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.WAVE.reg = data;
    7362:	687b      	ldr	r3, [r7, #4]
    7364:	78fa      	ldrb	r2, [r7, #3]
    7366:	731a      	strb	r2, [r3, #12]
	TC_CRITICAL_SECTION_LEAVE();
}
    7368:	bf00      	nop
    736a:	370c      	adds	r7, #12
    736c:	46bd      	mov	sp, r7
    736e:	f85d 7b04 	ldr.w	r7, [sp], #4
    7372:	4770      	bx	lr

00007374 <hri_tc_write_DBGCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tc_write_DBGCTRL_reg(const void *const hw, hri_tc_dbgctrl_reg_t data)
{
    7374:	b480      	push	{r7}
    7376:	b083      	sub	sp, #12
    7378:	af00      	add	r7, sp, #0
    737a:	6078      	str	r0, [r7, #4]
    737c:	460b      	mov	r3, r1
    737e:	70fb      	strb	r3, [r7, #3]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.DBGCTRL.reg = data;
    7380:	687b      	ldr	r3, [r7, #4]
    7382:	78fa      	ldrb	r2, [r7, #3]
    7384:	73da      	strb	r2, [r3, #15]
	TC_CRITICAL_SECTION_LEAVE();
}
    7386:	bf00      	nop
    7388:	370c      	adds	r7, #12
    738a:	46bd      	mov	sp, r7
    738c:	f85d 7b04 	ldr.w	r7, [sp], #4
    7390:	4770      	bx	lr
	...

00007394 <hri_tccount8_write_PER_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount8_write_PER_reg(const void *const hw, hri_tccount8_per_reg_t data)
{
    7394:	b580      	push	{r7, lr}
    7396:	b082      	sub	sp, #8
    7398:	af00      	add	r7, sp, #0
    739a:	6078      	str	r0, [r7, #4]
    739c:	460b      	mov	r3, r1
    739e:	70fb      	strb	r3, [r7, #3]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT8.PER.reg = data;
    73a0:	687b      	ldr	r3, [r7, #4]
    73a2:	78fa      	ldrb	r2, [r7, #3]
    73a4:	76da      	strb	r2, [r3, #27]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_PER);
    73a6:	2120      	movs	r1, #32
    73a8:	6878      	ldr	r0, [r7, #4]
    73aa:	4b03      	ldr	r3, [pc, #12]	; (73b8 <hri_tccount8_write_PER_reg+0x24>)
    73ac:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    73ae:	bf00      	nop
    73b0:	3708      	adds	r7, #8
    73b2:	46bd      	mov	sp, r7
    73b4:	bd80      	pop	{r7, pc}
    73b6:	bf00      	nop
    73b8:	000071d1 	.word	0x000071d1

000073bc <hri_tccount8_write_CC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount8_write_CC_reg(const void *const hw, uint8_t index, hri_tccount8_cc_reg_t data)
{
    73bc:	b580      	push	{r7, lr}
    73be:	b082      	sub	sp, #8
    73c0:	af00      	add	r7, sp, #0
    73c2:	6078      	str	r0, [r7, #4]
    73c4:	460b      	mov	r3, r1
    73c6:	70fb      	strb	r3, [r7, #3]
    73c8:	4613      	mov	r3, r2
    73ca:	70bb      	strb	r3, [r7, #2]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT8.CC[index].reg = data;
    73cc:	78fb      	ldrb	r3, [r7, #3]
    73ce:	687a      	ldr	r2, [r7, #4]
    73d0:	4413      	add	r3, r2
    73d2:	78ba      	ldrb	r2, [r7, #2]
    73d4:	771a      	strb	r2, [r3, #28]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    73d6:	21c0      	movs	r1, #192	; 0xc0
    73d8:	6878      	ldr	r0, [r7, #4]
    73da:	4b03      	ldr	r3, [pc, #12]	; (73e8 <hri_tccount8_write_CC_reg+0x2c>)
    73dc:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    73de:	bf00      	nop
    73e0:	3708      	adds	r7, #8
    73e2:	46bd      	mov	sp, r7
    73e4:	bd80      	pop	{r7, pc}
    73e6:	bf00      	nop
    73e8:	000071d1 	.word	0x000071d1

000073ec <hri_tccount16_write_CC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount16_write_CC_reg(const void *const hw, uint8_t index, hri_tccount16_cc_reg_t data)
{
    73ec:	b580      	push	{r7, lr}
    73ee:	b082      	sub	sp, #8
    73f0:	af00      	add	r7, sp, #0
    73f2:	6078      	str	r0, [r7, #4]
    73f4:	460b      	mov	r3, r1
    73f6:	70fb      	strb	r3, [r7, #3]
    73f8:	4613      	mov	r3, r2
    73fa:	803b      	strh	r3, [r7, #0]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    73fc:	78fb      	ldrb	r3, [r7, #3]
    73fe:	687a      	ldr	r2, [r7, #4]
    7400:	330c      	adds	r3, #12
    7402:	005b      	lsls	r3, r3, #1
    7404:	4413      	add	r3, r2
    7406:	883a      	ldrh	r2, [r7, #0]
    7408:	809a      	strh	r2, [r3, #4]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    740a:	21c0      	movs	r1, #192	; 0xc0
    740c:	6878      	ldr	r0, [r7, #4]
    740e:	4b03      	ldr	r3, [pc, #12]	; (741c <hri_tccount16_write_CC_reg+0x30>)
    7410:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    7412:	bf00      	nop
    7414:	3708      	adds	r7, #8
    7416:	46bd      	mov	sp, r7
    7418:	bd80      	pop	{r7, pc}
    741a:	bf00      	nop
    741c:	000071d1 	.word	0x000071d1

00007420 <hri_tccount32_write_CC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount32_write_CC_reg(const void *const hw, uint8_t index, hri_tccount32_cc_reg_t data)
{
    7420:	b580      	push	{r7, lr}
    7422:	b084      	sub	sp, #16
    7424:	af00      	add	r7, sp, #0
    7426:	60f8      	str	r0, [r7, #12]
    7428:	460b      	mov	r3, r1
    742a:	607a      	str	r2, [r7, #4]
    742c:	72fb      	strb	r3, [r7, #11]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    742e:	7afb      	ldrb	r3, [r7, #11]
    7430:	68fa      	ldr	r2, [r7, #12]
    7432:	3306      	adds	r3, #6
    7434:	009b      	lsls	r3, r3, #2
    7436:	4413      	add	r3, r2
    7438:	687a      	ldr	r2, [r7, #4]
    743a:	605a      	str	r2, [r3, #4]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    743c:	21c0      	movs	r1, #192	; 0xc0
    743e:	68f8      	ldr	r0, [r7, #12]
    7440:	4b02      	ldr	r3, [pc, #8]	; (744c <hri_tccount32_write_CC_reg+0x2c>)
    7442:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    7444:	bf00      	nop
    7446:	3710      	adds	r7, #16
    7448:	46bd      	mov	sp, r7
    744a:	bd80      	pop	{r7, pc}
    744c:	000071d1 	.word	0x000071d1

00007450 <_timer_init>:
static inline uint8_t _get_hardware_offset(const void *const hw);
/**
 * \brief Initialize TC
 */
int32_t _timer_init(struct _timer_device *const device, void *const hw)
{
    7450:	b580      	push	{r7, lr}
    7452:	b084      	sub	sp, #16
    7454:	af00      	add	r7, sp, #0
    7456:	6078      	str	r0, [r7, #4]
    7458:	6039      	str	r1, [r7, #0]
	int8_t i = get_tc_index(hw);
    745a:	6838      	ldr	r0, [r7, #0]
    745c:	4b93      	ldr	r3, [pc, #588]	; (76ac <_timer_init+0x25c>)
    745e:	4798      	blx	r3
    7460:	4603      	mov	r3, r0
    7462:	73fb      	strb	r3, [r7, #15]

	device->hw = hw;
    7464:	687b      	ldr	r3, [r7, #4]
    7466:	683a      	ldr	r2, [r7, #0]
    7468:	60da      	str	r2, [r3, #12]
	ASSERT(ARRAY_SIZE(_tcs));
    746a:	2295      	movs	r2, #149	; 0x95
    746c:	4990      	ldr	r1, [pc, #576]	; (76b0 <_timer_init+0x260>)
    746e:	2001      	movs	r0, #1
    7470:	4b90      	ldr	r3, [pc, #576]	; (76b4 <_timer_init+0x264>)
    7472:	4798      	blx	r3

	if (!hri_tc_is_syncing(hw, TC_SYNCBUSY_SWRST)) {
    7474:	2101      	movs	r1, #1
    7476:	6838      	ldr	r0, [r7, #0]
    7478:	4b8f      	ldr	r3, [pc, #572]	; (76b8 <_timer_init+0x268>)
    747a:	4798      	blx	r3
    747c:	4603      	mov	r3, r0
    747e:	f083 0301 	eor.w	r3, r3, #1
    7482:	b2db      	uxtb	r3, r3
    7484:	2b00      	cmp	r3, #0
    7486:	d011      	beq.n	74ac <_timer_init+0x5c>
		if (hri_tc_get_CTRLA_reg(hw, TC_CTRLA_ENABLE)) {
    7488:	2102      	movs	r1, #2
    748a:	6838      	ldr	r0, [r7, #0]
    748c:	4b8b      	ldr	r3, [pc, #556]	; (76bc <_timer_init+0x26c>)
    748e:	4798      	blx	r3
    7490:	4603      	mov	r3, r0
    7492:	2b00      	cmp	r3, #0
    7494:	d006      	beq.n	74a4 <_timer_init+0x54>
			hri_tc_clear_CTRLA_ENABLE_bit(hw);
    7496:	6838      	ldr	r0, [r7, #0]
    7498:	4b89      	ldr	r3, [pc, #548]	; (76c0 <_timer_init+0x270>)
    749a:	4798      	blx	r3
			hri_tc_wait_for_sync(hw, TC_SYNCBUSY_ENABLE);
    749c:	2102      	movs	r1, #2
    749e:	6838      	ldr	r0, [r7, #0]
    74a0:	4b88      	ldr	r3, [pc, #544]	; (76c4 <_timer_init+0x274>)
    74a2:	4798      	blx	r3
		}
		hri_tc_write_CTRLA_reg(hw, TC_CTRLA_SWRST);
    74a4:	2101      	movs	r1, #1
    74a6:	6838      	ldr	r0, [r7, #0]
    74a8:	4b87      	ldr	r3, [pc, #540]	; (76c8 <_timer_init+0x278>)
    74aa:	4798      	blx	r3
	}
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST);
    74ac:	2101      	movs	r1, #1
    74ae:	6838      	ldr	r0, [r7, #0]
    74b0:	4b84      	ldr	r3, [pc, #528]	; (76c4 <_timer_init+0x274>)
    74b2:	4798      	blx	r3

	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    74b4:	f997 200f 	ldrsb.w	r2, [r7, #15]
    74b8:	4984      	ldr	r1, [pc, #528]	; (76cc <_timer_init+0x27c>)
    74ba:	4613      	mov	r3, r2
    74bc:	009b      	lsls	r3, r3, #2
    74be:	4413      	add	r3, r2
    74c0:	009b      	lsls	r3, r3, #2
    74c2:	440b      	add	r3, r1
    74c4:	3304      	adds	r3, #4
    74c6:	681b      	ldr	r3, [r3, #0]
    74c8:	4619      	mov	r1, r3
    74ca:	6838      	ldr	r0, [r7, #0]
    74cc:	4b7e      	ldr	r3, [pc, #504]	; (76c8 <_timer_init+0x278>)
    74ce:	4798      	blx	r3
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    74d0:	f997 200f 	ldrsb.w	r2, [r7, #15]
    74d4:	497d      	ldr	r1, [pc, #500]	; (76cc <_timer_init+0x27c>)
    74d6:	4613      	mov	r3, r2
    74d8:	009b      	lsls	r3, r3, #2
    74da:	4413      	add	r3, r2
    74dc:	009b      	lsls	r3, r3, #2
    74de:	440b      	add	r3, r1
    74e0:	330a      	adds	r3, #10
    74e2:	781b      	ldrb	r3, [r3, #0]
    74e4:	4619      	mov	r1, r3
    74e6:	6838      	ldr	r0, [r7, #0]
    74e8:	4b79      	ldr	r3, [pc, #484]	; (76d0 <_timer_init+0x280>)
    74ea:	4798      	blx	r3
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    74ec:	f997 200f 	ldrsb.w	r2, [r7, #15]
    74f0:	4976      	ldr	r1, [pc, #472]	; (76cc <_timer_init+0x27c>)
    74f2:	4613      	mov	r3, r2
    74f4:	009b      	lsls	r3, r3, #2
    74f6:	4413      	add	r3, r2
    74f8:	009b      	lsls	r3, r3, #2
    74fa:	440b      	add	r3, r1
    74fc:	3308      	adds	r3, #8
    74fe:	881b      	ldrh	r3, [r3, #0]
    7500:	4619      	mov	r1, r3
    7502:	6838      	ldr	r0, [r7, #0]
    7504:	4b73      	ldr	r3, [pc, #460]	; (76d4 <_timer_init+0x284>)
    7506:	4798      	blx	r3
	hri_tc_write_WAVE_reg(hw, TC_WAVE_WAVEGEN_MFRQ);
    7508:	2101      	movs	r1, #1
    750a:	6838      	ldr	r0, [r7, #0]
    750c:	4b72      	ldr	r3, [pc, #456]	; (76d8 <_timer_init+0x288>)
    750e:	4798      	blx	r3

	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    7510:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7514:	496d      	ldr	r1, [pc, #436]	; (76cc <_timer_init+0x27c>)
    7516:	4613      	mov	r3, r2
    7518:	009b      	lsls	r3, r3, #2
    751a:	4413      	add	r3, r2
    751c:	009b      	lsls	r3, r3, #2
    751e:	440b      	add	r3, r1
    7520:	3304      	adds	r3, #4
    7522:	681b      	ldr	r3, [r3, #0]
    7524:	f003 030c 	and.w	r3, r3, #12
    7528:	2b08      	cmp	r3, #8
    752a:	d11e      	bne.n	756a <_timer_init+0x11a>
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    752c:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7530:	4966      	ldr	r1, [pc, #408]	; (76cc <_timer_init+0x27c>)
    7532:	4613      	mov	r3, r2
    7534:	009b      	lsls	r3, r3, #2
    7536:	4413      	add	r3, r2
    7538:	009b      	lsls	r3, r3, #2
    753a:	440b      	add	r3, r1
    753c:	330c      	adds	r3, #12
    753e:	681b      	ldr	r3, [r3, #0]
    7540:	461a      	mov	r2, r3
    7542:	2100      	movs	r1, #0
    7544:	6838      	ldr	r0, [r7, #0]
    7546:	4b65      	ldr	r3, [pc, #404]	; (76dc <_timer_init+0x28c>)
    7548:	4798      	blx	r3
		hri_tccount32_write_CC_reg(hw, 1, _tcs[i].cc1);
    754a:	f997 200f 	ldrsb.w	r2, [r7, #15]
    754e:	495f      	ldr	r1, [pc, #380]	; (76cc <_timer_init+0x27c>)
    7550:	4613      	mov	r3, r2
    7552:	009b      	lsls	r3, r3, #2
    7554:	4413      	add	r3, r2
    7556:	009b      	lsls	r3, r3, #2
    7558:	440b      	add	r3, r1
    755a:	3310      	adds	r3, #16
    755c:	681b      	ldr	r3, [r3, #0]
    755e:	461a      	mov	r2, r3
    7560:	2101      	movs	r1, #1
    7562:	6838      	ldr	r0, [r7, #0]
    7564:	4b5d      	ldr	r3, [pc, #372]	; (76dc <_timer_init+0x28c>)
    7566:	4798      	blx	r3
    7568:	e06a      	b.n	7640 <_timer_init+0x1f0>

	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    756a:	f997 200f 	ldrsb.w	r2, [r7, #15]
    756e:	4957      	ldr	r1, [pc, #348]	; (76cc <_timer_init+0x27c>)
    7570:	4613      	mov	r3, r2
    7572:	009b      	lsls	r3, r3, #2
    7574:	4413      	add	r3, r2
    7576:	009b      	lsls	r3, r3, #2
    7578:	440b      	add	r3, r1
    757a:	3304      	adds	r3, #4
    757c:	681b      	ldr	r3, [r3, #0]
    757e:	f003 030c 	and.w	r3, r3, #12
    7582:	2b00      	cmp	r3, #0
    7584:	d120      	bne.n	75c8 <_timer_init+0x178>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)_tcs[i].cc0);
    7586:	f997 200f 	ldrsb.w	r2, [r7, #15]
    758a:	4950      	ldr	r1, [pc, #320]	; (76cc <_timer_init+0x27c>)
    758c:	4613      	mov	r3, r2
    758e:	009b      	lsls	r3, r3, #2
    7590:	4413      	add	r3, r2
    7592:	009b      	lsls	r3, r3, #2
    7594:	440b      	add	r3, r1
    7596:	330c      	adds	r3, #12
    7598:	681b      	ldr	r3, [r3, #0]
    759a:	b29b      	uxth	r3, r3
    759c:	461a      	mov	r2, r3
    759e:	2100      	movs	r1, #0
    75a0:	6838      	ldr	r0, [r7, #0]
    75a2:	4b4f      	ldr	r3, [pc, #316]	; (76e0 <_timer_init+0x290>)
    75a4:	4798      	blx	r3
		hri_tccount16_write_CC_reg(hw, 1, (uint16_t)_tcs[i].cc1);
    75a6:	f997 200f 	ldrsb.w	r2, [r7, #15]
    75aa:	4948      	ldr	r1, [pc, #288]	; (76cc <_timer_init+0x27c>)
    75ac:	4613      	mov	r3, r2
    75ae:	009b      	lsls	r3, r3, #2
    75b0:	4413      	add	r3, r2
    75b2:	009b      	lsls	r3, r3, #2
    75b4:	440b      	add	r3, r1
    75b6:	3310      	adds	r3, #16
    75b8:	681b      	ldr	r3, [r3, #0]
    75ba:	b29b      	uxth	r3, r3
    75bc:	461a      	mov	r2, r3
    75be:	2101      	movs	r1, #1
    75c0:	6838      	ldr	r0, [r7, #0]
    75c2:	4b47      	ldr	r3, [pc, #284]	; (76e0 <_timer_init+0x290>)
    75c4:	4798      	blx	r3
    75c6:	e03b      	b.n	7640 <_timer_init+0x1f0>

	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT8) {
    75c8:	f997 200f 	ldrsb.w	r2, [r7, #15]
    75cc:	493f      	ldr	r1, [pc, #252]	; (76cc <_timer_init+0x27c>)
    75ce:	4613      	mov	r3, r2
    75d0:	009b      	lsls	r3, r3, #2
    75d2:	4413      	add	r3, r2
    75d4:	009b      	lsls	r3, r3, #2
    75d6:	440b      	add	r3, r1
    75d8:	3304      	adds	r3, #4
    75da:	681b      	ldr	r3, [r3, #0]
    75dc:	f003 030c 	and.w	r3, r3, #12
    75e0:	2b04      	cmp	r3, #4
    75e2:	d12d      	bne.n	7640 <_timer_init+0x1f0>
		hri_tccount8_write_CC_reg(hw, 0, (uint8_t)_tcs[i].cc0);
    75e4:	f997 200f 	ldrsb.w	r2, [r7, #15]
    75e8:	4938      	ldr	r1, [pc, #224]	; (76cc <_timer_init+0x27c>)
    75ea:	4613      	mov	r3, r2
    75ec:	009b      	lsls	r3, r3, #2
    75ee:	4413      	add	r3, r2
    75f0:	009b      	lsls	r3, r3, #2
    75f2:	440b      	add	r3, r1
    75f4:	330c      	adds	r3, #12
    75f6:	681b      	ldr	r3, [r3, #0]
    75f8:	b2db      	uxtb	r3, r3
    75fa:	461a      	mov	r2, r3
    75fc:	2100      	movs	r1, #0
    75fe:	6838      	ldr	r0, [r7, #0]
    7600:	4b38      	ldr	r3, [pc, #224]	; (76e4 <_timer_init+0x294>)
    7602:	4798      	blx	r3
		hri_tccount8_write_CC_reg(hw, 1, (uint8_t)_tcs[i].cc1);
    7604:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7608:	4930      	ldr	r1, [pc, #192]	; (76cc <_timer_init+0x27c>)
    760a:	4613      	mov	r3, r2
    760c:	009b      	lsls	r3, r3, #2
    760e:	4413      	add	r3, r2
    7610:	009b      	lsls	r3, r3, #2
    7612:	440b      	add	r3, r1
    7614:	3310      	adds	r3, #16
    7616:	681b      	ldr	r3, [r3, #0]
    7618:	b2db      	uxtb	r3, r3
    761a:	461a      	mov	r2, r3
    761c:	2101      	movs	r1, #1
    761e:	6838      	ldr	r0, [r7, #0]
    7620:	4b30      	ldr	r3, [pc, #192]	; (76e4 <_timer_init+0x294>)
    7622:	4798      	blx	r3
		hri_tccount8_write_PER_reg(hw, _tcs[i].per);
    7624:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7628:	4928      	ldr	r1, [pc, #160]	; (76cc <_timer_init+0x27c>)
    762a:	4613      	mov	r3, r2
    762c:	009b      	lsls	r3, r3, #2
    762e:	4413      	add	r3, r2
    7630:	009b      	lsls	r3, r3, #2
    7632:	440b      	add	r3, r1
    7634:	330b      	adds	r3, #11
    7636:	781b      	ldrb	r3, [r3, #0]
    7638:	4619      	mov	r1, r3
    763a:	6838      	ldr	r0, [r7, #0]
    763c:	4b2a      	ldr	r3, [pc, #168]	; (76e8 <_timer_init+0x298>)
    763e:	4798      	blx	r3
	}
	hri_tc_set_INTEN_OVF_bit(hw);
    7640:	6838      	ldr	r0, [r7, #0]
    7642:	4b2a      	ldr	r3, [pc, #168]	; (76ec <_timer_init+0x29c>)
    7644:	4798      	blx	r3

	_tc_init_irq_param(hw, (void *)device);
    7646:	6879      	ldr	r1, [r7, #4]
    7648:	6838      	ldr	r0, [r7, #0]
    764a:	4b29      	ldr	r3, [pc, #164]	; (76f0 <_timer_init+0x2a0>)
    764c:	4798      	blx	r3
	NVIC_DisableIRQ(_tcs[i].irq);
    764e:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7652:	491e      	ldr	r1, [pc, #120]	; (76cc <_timer_init+0x27c>)
    7654:	4613      	mov	r3, r2
    7656:	009b      	lsls	r3, r3, #2
    7658:	4413      	add	r3, r2
    765a:	009b      	lsls	r3, r3, #2
    765c:	440b      	add	r3, r1
    765e:	3302      	adds	r3, #2
    7660:	f9b3 3000 	ldrsh.w	r3, [r3]
    7664:	4618      	mov	r0, r3
    7666:	4b23      	ldr	r3, [pc, #140]	; (76f4 <_timer_init+0x2a4>)
    7668:	4798      	blx	r3
	NVIC_ClearPendingIRQ(_tcs[i].irq);
    766a:	f997 200f 	ldrsb.w	r2, [r7, #15]
    766e:	4917      	ldr	r1, [pc, #92]	; (76cc <_timer_init+0x27c>)
    7670:	4613      	mov	r3, r2
    7672:	009b      	lsls	r3, r3, #2
    7674:	4413      	add	r3, r2
    7676:	009b      	lsls	r3, r3, #2
    7678:	440b      	add	r3, r1
    767a:	3302      	adds	r3, #2
    767c:	f9b3 3000 	ldrsh.w	r3, [r3]
    7680:	4618      	mov	r0, r3
    7682:	4b1d      	ldr	r3, [pc, #116]	; (76f8 <_timer_init+0x2a8>)
    7684:	4798      	blx	r3
	NVIC_EnableIRQ(_tcs[i].irq);
    7686:	f997 200f 	ldrsb.w	r2, [r7, #15]
    768a:	4910      	ldr	r1, [pc, #64]	; (76cc <_timer_init+0x27c>)
    768c:	4613      	mov	r3, r2
    768e:	009b      	lsls	r3, r3, #2
    7690:	4413      	add	r3, r2
    7692:	009b      	lsls	r3, r3, #2
    7694:	440b      	add	r3, r1
    7696:	3302      	adds	r3, #2
    7698:	f9b3 3000 	ldrsh.w	r3, [r3]
    769c:	4618      	mov	r0, r3
    769e:	4b17      	ldr	r3, [pc, #92]	; (76fc <_timer_init+0x2ac>)
    76a0:	4798      	blx	r3

	return ERR_NONE;
    76a2:	2300      	movs	r3, #0
}
    76a4:	4618      	mov	r0, r3
    76a6:	3710      	adds	r7, #16
    76a8:	46bd      	mov	sp, r7
    76aa:	bd80      	pop	{r7, pc}
    76ac:	00007a6d 	.word	0x00007a6d
    76b0:	00013148 	.word	0x00013148
    76b4:	00002ed9 	.word	0x00002ed9
    76b8:	000071f5 	.word	0x000071f5
    76bc:	000072e5 	.word	0x000072e5
    76c0:	000072bd 	.word	0x000072bd
    76c4:	000071d1 	.word	0x000071d1
    76c8:	00007315 	.word	0x00007315
    76cc:	20000048 	.word	0x20000048
    76d0:	00007375 	.word	0x00007375
    76d4:	00007339 	.word	0x00007339
    76d8:	00007357 	.word	0x00007357
    76dc:	00007421 	.word	0x00007421
    76e0:	000073ed 	.word	0x000073ed
    76e4:	000073bd 	.word	0x000073bd
    76e8:	00007395 	.word	0x00007395
    76ec:	00007279 	.word	0x00007279
    76f0:	00007ad5 	.word	0x00007ad5
    76f4:	00007151 	.word	0x00007151
    76f8:	00007195 	.word	0x00007195
    76fc:	00007115 	.word	0x00007115

00007700 <_pwm_init>:
/**
 * \brief Initialize TC for PWM mode
 */
int32_t _pwm_init(struct _pwm_device *const device, void *const hw)
{
    7700:	b580      	push	{r7, lr}
    7702:	b084      	sub	sp, #16
    7704:	af00      	add	r7, sp, #0
    7706:	6078      	str	r0, [r7, #4]
    7708:	6039      	str	r1, [r7, #0]
	int8_t i   = get_tc_index(hw);
    770a:	6838      	ldr	r0, [r7, #0]
    770c:	4b73      	ldr	r3, [pc, #460]	; (78dc <_pwm_init+0x1dc>)
    770e:	4798      	blx	r3
    7710:	4603      	mov	r3, r0
    7712:	73fb      	strb	r3, [r7, #15]
	device->hw = hw;
    7714:	687b      	ldr	r3, [r7, #4]
    7716:	683a      	ldr	r2, [r7, #0]
    7718:	611a      	str	r2, [r3, #16]

	if (!hri_tc_is_syncing(hw, TC_SYNCBUSY_SWRST)) {
    771a:	2101      	movs	r1, #1
    771c:	6838      	ldr	r0, [r7, #0]
    771e:	4b70      	ldr	r3, [pc, #448]	; (78e0 <_pwm_init+0x1e0>)
    7720:	4798      	blx	r3
    7722:	4603      	mov	r3, r0
    7724:	f083 0301 	eor.w	r3, r3, #1
    7728:	b2db      	uxtb	r3, r3
    772a:	2b00      	cmp	r3, #0
    772c:	d011      	beq.n	7752 <_pwm_init+0x52>
		if (hri_tc_get_CTRLA_reg(hw, TC_CTRLA_ENABLE)) {
    772e:	2102      	movs	r1, #2
    7730:	6838      	ldr	r0, [r7, #0]
    7732:	4b6c      	ldr	r3, [pc, #432]	; (78e4 <_pwm_init+0x1e4>)
    7734:	4798      	blx	r3
    7736:	4603      	mov	r3, r0
    7738:	2b00      	cmp	r3, #0
    773a:	d006      	beq.n	774a <_pwm_init+0x4a>
			hri_tc_clear_CTRLA_ENABLE_bit(hw);
    773c:	6838      	ldr	r0, [r7, #0]
    773e:	4b6a      	ldr	r3, [pc, #424]	; (78e8 <_pwm_init+0x1e8>)
    7740:	4798      	blx	r3
			hri_tc_wait_for_sync(hw, TC_SYNCBUSY_ENABLE);
    7742:	2102      	movs	r1, #2
    7744:	6838      	ldr	r0, [r7, #0]
    7746:	4b69      	ldr	r3, [pc, #420]	; (78ec <_pwm_init+0x1ec>)
    7748:	4798      	blx	r3
		}
		hri_tc_write_CTRLA_reg(hw, TC_CTRLA_SWRST);
    774a:	2101      	movs	r1, #1
    774c:	6838      	ldr	r0, [r7, #0]
    774e:	4b68      	ldr	r3, [pc, #416]	; (78f0 <_pwm_init+0x1f0>)
    7750:	4798      	blx	r3
	}
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST);
    7752:	2101      	movs	r1, #1
    7754:	6838      	ldr	r0, [r7, #0]
    7756:	4b65      	ldr	r3, [pc, #404]	; (78ec <_pwm_init+0x1ec>)
    7758:	4798      	blx	r3

	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    775a:	f997 200f 	ldrsb.w	r2, [r7, #15]
    775e:	4965      	ldr	r1, [pc, #404]	; (78f4 <_pwm_init+0x1f4>)
    7760:	4613      	mov	r3, r2
    7762:	009b      	lsls	r3, r3, #2
    7764:	4413      	add	r3, r2
    7766:	009b      	lsls	r3, r3, #2
    7768:	440b      	add	r3, r1
    776a:	3304      	adds	r3, #4
    776c:	681b      	ldr	r3, [r3, #0]
    776e:	4619      	mov	r1, r3
    7770:	6838      	ldr	r0, [r7, #0]
    7772:	4b5f      	ldr	r3, [pc, #380]	; (78f0 <_pwm_init+0x1f0>)
    7774:	4798      	blx	r3
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    7776:	f997 200f 	ldrsb.w	r2, [r7, #15]
    777a:	495e      	ldr	r1, [pc, #376]	; (78f4 <_pwm_init+0x1f4>)
    777c:	4613      	mov	r3, r2
    777e:	009b      	lsls	r3, r3, #2
    7780:	4413      	add	r3, r2
    7782:	009b      	lsls	r3, r3, #2
    7784:	440b      	add	r3, r1
    7786:	330a      	adds	r3, #10
    7788:	781b      	ldrb	r3, [r3, #0]
    778a:	4619      	mov	r1, r3
    778c:	6838      	ldr	r0, [r7, #0]
    778e:	4b5a      	ldr	r3, [pc, #360]	; (78f8 <_pwm_init+0x1f8>)
    7790:	4798      	blx	r3
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    7792:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7796:	4957      	ldr	r1, [pc, #348]	; (78f4 <_pwm_init+0x1f4>)
    7798:	4613      	mov	r3, r2
    779a:	009b      	lsls	r3, r3, #2
    779c:	4413      	add	r3, r2
    779e:	009b      	lsls	r3, r3, #2
    77a0:	440b      	add	r3, r1
    77a2:	3308      	adds	r3, #8
    77a4:	881b      	ldrh	r3, [r3, #0]
    77a6:	4619      	mov	r1, r3
    77a8:	6838      	ldr	r0, [r7, #0]
    77aa:	4b54      	ldr	r3, [pc, #336]	; (78fc <_pwm_init+0x1fc>)
    77ac:	4798      	blx	r3
	hri_tc_write_WAVE_reg(hw, TC_WAVE_WAVEGEN_MPWM_Val);
    77ae:	2103      	movs	r1, #3
    77b0:	6838      	ldr	r0, [r7, #0]
    77b2:	4b53      	ldr	r3, [pc, #332]	; (7900 <_pwm_init+0x200>)
    77b4:	4798      	blx	r3

	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    77b6:	f997 200f 	ldrsb.w	r2, [r7, #15]
    77ba:	494e      	ldr	r1, [pc, #312]	; (78f4 <_pwm_init+0x1f4>)
    77bc:	4613      	mov	r3, r2
    77be:	009b      	lsls	r3, r3, #2
    77c0:	4413      	add	r3, r2
    77c2:	009b      	lsls	r3, r3, #2
    77c4:	440b      	add	r3, r1
    77c6:	3304      	adds	r3, #4
    77c8:	681b      	ldr	r3, [r3, #0]
    77ca:	f003 030c 	and.w	r3, r3, #12
    77ce:	2b08      	cmp	r3, #8
    77d0:	d11e      	bne.n	7810 <_pwm_init+0x110>
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    77d2:	f997 200f 	ldrsb.w	r2, [r7, #15]
    77d6:	4947      	ldr	r1, [pc, #284]	; (78f4 <_pwm_init+0x1f4>)
    77d8:	4613      	mov	r3, r2
    77da:	009b      	lsls	r3, r3, #2
    77dc:	4413      	add	r3, r2
    77de:	009b      	lsls	r3, r3, #2
    77e0:	440b      	add	r3, r1
    77e2:	330c      	adds	r3, #12
    77e4:	681b      	ldr	r3, [r3, #0]
    77e6:	461a      	mov	r2, r3
    77e8:	2100      	movs	r1, #0
    77ea:	6838      	ldr	r0, [r7, #0]
    77ec:	4b45      	ldr	r3, [pc, #276]	; (7904 <_pwm_init+0x204>)
    77ee:	4798      	blx	r3
		hri_tccount32_write_CC_reg(hw, 1, _tcs[i].cc1);
    77f0:	f997 200f 	ldrsb.w	r2, [r7, #15]
    77f4:	493f      	ldr	r1, [pc, #252]	; (78f4 <_pwm_init+0x1f4>)
    77f6:	4613      	mov	r3, r2
    77f8:	009b      	lsls	r3, r3, #2
    77fa:	4413      	add	r3, r2
    77fc:	009b      	lsls	r3, r3, #2
    77fe:	440b      	add	r3, r1
    7800:	3310      	adds	r3, #16
    7802:	681b      	ldr	r3, [r3, #0]
    7804:	461a      	mov	r2, r3
    7806:	2101      	movs	r1, #1
    7808:	6838      	ldr	r0, [r7, #0]
    780a:	4b3e      	ldr	r3, [pc, #248]	; (7904 <_pwm_init+0x204>)
    780c:	4798      	blx	r3
    780e:	e031      	b.n	7874 <_pwm_init+0x174>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    7810:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7814:	4937      	ldr	r1, [pc, #220]	; (78f4 <_pwm_init+0x1f4>)
    7816:	4613      	mov	r3, r2
    7818:	009b      	lsls	r3, r3, #2
    781a:	4413      	add	r3, r2
    781c:	009b      	lsls	r3, r3, #2
    781e:	440b      	add	r3, r1
    7820:	3304      	adds	r3, #4
    7822:	681b      	ldr	r3, [r3, #0]
    7824:	f003 030c 	and.w	r3, r3, #12
    7828:	2b00      	cmp	r3, #0
    782a:	d120      	bne.n	786e <_pwm_init+0x16e>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)_tcs[i].cc0);
    782c:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7830:	4930      	ldr	r1, [pc, #192]	; (78f4 <_pwm_init+0x1f4>)
    7832:	4613      	mov	r3, r2
    7834:	009b      	lsls	r3, r3, #2
    7836:	4413      	add	r3, r2
    7838:	009b      	lsls	r3, r3, #2
    783a:	440b      	add	r3, r1
    783c:	330c      	adds	r3, #12
    783e:	681b      	ldr	r3, [r3, #0]
    7840:	b29b      	uxth	r3, r3
    7842:	461a      	mov	r2, r3
    7844:	2100      	movs	r1, #0
    7846:	6838      	ldr	r0, [r7, #0]
    7848:	4b2f      	ldr	r3, [pc, #188]	; (7908 <_pwm_init+0x208>)
    784a:	4798      	blx	r3
		hri_tccount16_write_CC_reg(hw, 1, (uint16_t)_tcs[i].cc1);
    784c:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7850:	4928      	ldr	r1, [pc, #160]	; (78f4 <_pwm_init+0x1f4>)
    7852:	4613      	mov	r3, r2
    7854:	009b      	lsls	r3, r3, #2
    7856:	4413      	add	r3, r2
    7858:	009b      	lsls	r3, r3, #2
    785a:	440b      	add	r3, r1
    785c:	3310      	adds	r3, #16
    785e:	681b      	ldr	r3, [r3, #0]
    7860:	b29b      	uxth	r3, r3
    7862:	461a      	mov	r2, r3
    7864:	2101      	movs	r1, #1
    7866:	6838      	ldr	r0, [r7, #0]
    7868:	4b27      	ldr	r3, [pc, #156]	; (7908 <_pwm_init+0x208>)
    786a:	4798      	blx	r3
    786c:	e002      	b.n	7874 <_pwm_init+0x174>
	} else {
		/* 8-bit resolution is not accepted by duty cycle control */
		return -1;
    786e:	f04f 33ff 	mov.w	r3, #4294967295
    7872:	e02e      	b.n	78d2 <_pwm_init+0x1d2>
	}

	_tc_init_irq_param(hw, (void *)device);
    7874:	6879      	ldr	r1, [r7, #4]
    7876:	6838      	ldr	r0, [r7, #0]
    7878:	4b24      	ldr	r3, [pc, #144]	; (790c <_pwm_init+0x20c>)
    787a:	4798      	blx	r3
	NVIC_DisableIRQ(_tcs[i].irq);
    787c:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7880:	491c      	ldr	r1, [pc, #112]	; (78f4 <_pwm_init+0x1f4>)
    7882:	4613      	mov	r3, r2
    7884:	009b      	lsls	r3, r3, #2
    7886:	4413      	add	r3, r2
    7888:	009b      	lsls	r3, r3, #2
    788a:	440b      	add	r3, r1
    788c:	3302      	adds	r3, #2
    788e:	f9b3 3000 	ldrsh.w	r3, [r3]
    7892:	4618      	mov	r0, r3
    7894:	4b1e      	ldr	r3, [pc, #120]	; (7910 <_pwm_init+0x210>)
    7896:	4798      	blx	r3
	NVIC_ClearPendingIRQ(_tcs[i].irq);
    7898:	f997 200f 	ldrsb.w	r2, [r7, #15]
    789c:	4915      	ldr	r1, [pc, #84]	; (78f4 <_pwm_init+0x1f4>)
    789e:	4613      	mov	r3, r2
    78a0:	009b      	lsls	r3, r3, #2
    78a2:	4413      	add	r3, r2
    78a4:	009b      	lsls	r3, r3, #2
    78a6:	440b      	add	r3, r1
    78a8:	3302      	adds	r3, #2
    78aa:	f9b3 3000 	ldrsh.w	r3, [r3]
    78ae:	4618      	mov	r0, r3
    78b0:	4b18      	ldr	r3, [pc, #96]	; (7914 <_pwm_init+0x214>)
    78b2:	4798      	blx	r3
	NVIC_EnableIRQ(_tcs[i].irq);
    78b4:	f997 200f 	ldrsb.w	r2, [r7, #15]
    78b8:	490e      	ldr	r1, [pc, #56]	; (78f4 <_pwm_init+0x1f4>)
    78ba:	4613      	mov	r3, r2
    78bc:	009b      	lsls	r3, r3, #2
    78be:	4413      	add	r3, r2
    78c0:	009b      	lsls	r3, r3, #2
    78c2:	440b      	add	r3, r1
    78c4:	3302      	adds	r3, #2
    78c6:	f9b3 3000 	ldrsh.w	r3, [r3]
    78ca:	4618      	mov	r0, r3
    78cc:	4b12      	ldr	r3, [pc, #72]	; (7918 <_pwm_init+0x218>)
    78ce:	4798      	blx	r3

	return 0;
    78d0:	2300      	movs	r3, #0
}
    78d2:	4618      	mov	r0, r3
    78d4:	3710      	adds	r7, #16
    78d6:	46bd      	mov	sp, r7
    78d8:	bd80      	pop	{r7, pc}
    78da:	bf00      	nop
    78dc:	00007a6d 	.word	0x00007a6d
    78e0:	000071f5 	.word	0x000071f5
    78e4:	000072e5 	.word	0x000072e5
    78e8:	000072bd 	.word	0x000072bd
    78ec:	000071d1 	.word	0x000071d1
    78f0:	00007315 	.word	0x00007315
    78f4:	20000048 	.word	0x20000048
    78f8:	00007375 	.word	0x00007375
    78fc:	00007339 	.word	0x00007339
    7900:	00007357 	.word	0x00007357
    7904:	00007421 	.word	0x00007421
    7908:	000073ed 	.word	0x000073ed
    790c:	00007ad5 	.word	0x00007ad5
    7910:	00007151 	.word	0x00007151
    7914:	00007195 	.word	0x00007195
    7918:	00007115 	.word	0x00007115

0000791c <_tc_get_timer>:

/**
 * \brief Retrieve timer helper functions
 */
struct _timer_hpl_interface *_tc_get_timer(void)
{
    791c:	b480      	push	{r7}
    791e:	af00      	add	r7, sp, #0
	return NULL;
    7920:	2300      	movs	r3, #0
}
    7922:	4618      	mov	r0, r3
    7924:	46bd      	mov	sp, r7
    7926:	f85d 7b04 	ldr.w	r7, [sp], #4
    792a:	4770      	bx	lr

0000792c <_tc_get_pwm>:

/**
 * \brief Retrieve pwm helper functions
 */
struct _pwm_hpl_interface *_tc_get_pwm(void)
{
    792c:	b480      	push	{r7}
    792e:	af00      	add	r7, sp, #0
	return NULL;
    7930:	2300      	movs	r3, #0
}
    7932:	4618      	mov	r0, r3
    7934:	46bd      	mov	sp, r7
    7936:	f85d 7b04 	ldr.w	r7, [sp], #4
    793a:	4770      	bx	lr

0000793c <tc_interrupt_handler>:
 * \internal TC interrupt handler for Timer
 *
 * \param[in] instance TC instance number
 */
static void tc_interrupt_handler(struct _timer_device *device)
{
    793c:	b580      	push	{r7, lr}
    793e:	b084      	sub	sp, #16
    7940:	af00      	add	r7, sp, #0
    7942:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    7944:	687b      	ldr	r3, [r7, #4]
    7946:	68db      	ldr	r3, [r3, #12]
    7948:	60fb      	str	r3, [r7, #12]

	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    794a:	68f8      	ldr	r0, [r7, #12]
    794c:	4b07      	ldr	r3, [pc, #28]	; (796c <tc_interrupt_handler+0x30>)
    794e:	4798      	blx	r3
    7950:	4603      	mov	r3, r0
    7952:	2b00      	cmp	r3, #0
    7954:	d006      	beq.n	7964 <tc_interrupt_handler+0x28>
		hri_tc_clear_interrupt_OVF_bit(hw);
    7956:	68f8      	ldr	r0, [r7, #12]
    7958:	4b05      	ldr	r3, [pc, #20]	; (7970 <tc_interrupt_handler+0x34>)
    795a:	4798      	blx	r3
		device->timer_cb.period_expired(device);
    795c:	687b      	ldr	r3, [r7, #4]
    795e:	681b      	ldr	r3, [r3, #0]
    7960:	6878      	ldr	r0, [r7, #4]
    7962:	4798      	blx	r3
	}
}
    7964:	bf00      	nop
    7966:	3710      	adds	r7, #16
    7968:	46bd      	mov	sp, r7
    796a:	bd80      	pop	{r7, pc}
    796c:	0000721d 	.word	0x0000721d
    7970:	00007245 	.word	0x00007245

00007974 <tc_pwm_interrupt_handler>:
 * \internal TC interrupt handler for PWM
 *
 * \param[in] instance TC instance number
 */
static void tc_pwm_interrupt_handler(struct _pwm_device *device)
{
    7974:	b580      	push	{r7, lr}
    7976:	b084      	sub	sp, #16
    7978:	af00      	add	r7, sp, #0
    797a:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    797c:	687b      	ldr	r3, [r7, #4]
    797e:	691b      	ldr	r3, [r3, #16]
    7980:	60fb      	str	r3, [r7, #12]

	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    7982:	68f8      	ldr	r0, [r7, #12]
    7984:	4b12      	ldr	r3, [pc, #72]	; (79d0 <tc_pwm_interrupt_handler+0x5c>)
    7986:	4798      	blx	r3
    7988:	4603      	mov	r3, r0
    798a:	2b00      	cmp	r3, #0
    798c:	d00a      	beq.n	79a4 <tc_pwm_interrupt_handler+0x30>
		hri_tc_clear_interrupt_OVF_bit(hw);
    798e:	68f8      	ldr	r0, [r7, #12]
    7990:	4b10      	ldr	r3, [pc, #64]	; (79d4 <tc_pwm_interrupt_handler+0x60>)
    7992:	4798      	blx	r3
		if (NULL != device->callback.pwm_period_cb) {
    7994:	687b      	ldr	r3, [r7, #4]
    7996:	681b      	ldr	r3, [r3, #0]
    7998:	2b00      	cmp	r3, #0
    799a:	d003      	beq.n	79a4 <tc_pwm_interrupt_handler+0x30>
			device->callback.pwm_period_cb(device);
    799c:	687b      	ldr	r3, [r7, #4]
    799e:	681b      	ldr	r3, [r3, #0]
    79a0:	6878      	ldr	r0, [r7, #4]
    79a2:	4798      	blx	r3
		}
	}
	if (hri_tc_get_INTEN_ERR_bit(hw)) {
    79a4:	68f8      	ldr	r0, [r7, #12]
    79a6:	4b0c      	ldr	r3, [pc, #48]	; (79d8 <tc_pwm_interrupt_handler+0x64>)
    79a8:	4798      	blx	r3
    79aa:	4603      	mov	r3, r0
    79ac:	2b00      	cmp	r3, #0
    79ae:	d00a      	beq.n	79c6 <tc_pwm_interrupt_handler+0x52>
		hri_tc_clear_interrupt_ERR_bit(hw);
    79b0:	68f8      	ldr	r0, [r7, #12]
    79b2:	4b0a      	ldr	r3, [pc, #40]	; (79dc <tc_pwm_interrupt_handler+0x68>)
    79b4:	4798      	blx	r3
		if (NULL != device->callback.pwm_error_cb) {
    79b6:	687b      	ldr	r3, [r7, #4]
    79b8:	685b      	ldr	r3, [r3, #4]
    79ba:	2b00      	cmp	r3, #0
    79bc:	d003      	beq.n	79c6 <tc_pwm_interrupt_handler+0x52>
			device->callback.pwm_error_cb(device);
    79be:	687b      	ldr	r3, [r7, #4]
    79c0:	685b      	ldr	r3, [r3, #4]
    79c2:	6878      	ldr	r0, [r7, #4]
    79c4:	4798      	blx	r3
		}
	}
}
    79c6:	bf00      	nop
    79c8:	3710      	adds	r7, #16
    79ca:	46bd      	mov	sp, r7
    79cc:	bd80      	pop	{r7, pc}
    79ce:	bf00      	nop
    79d0:	0000721d 	.word	0x0000721d
    79d4:	00007245 	.word	0x00007245
    79d8:	00007293 	.word	0x00007293
    79dc:	0000725f 	.word	0x0000725f

000079e0 <TC0_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC0_Handler(void)
{
    79e0:	b580      	push	{r7, lr}
    79e2:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc0_dev);
    79e4:	4b03      	ldr	r3, [pc, #12]	; (79f4 <TC0_Handler+0x14>)
    79e6:	681b      	ldr	r3, [r3, #0]
    79e8:	4618      	mov	r0, r3
    79ea:	4b03      	ldr	r3, [pc, #12]	; (79f8 <TC0_Handler+0x18>)
    79ec:	4798      	blx	r3
}
    79ee:	bf00      	nop
    79f0:	bd80      	pop	{r7, pc}
    79f2:	bf00      	nop
    79f4:	20000c30 	.word	0x20000c30
    79f8:	0000793d 	.word	0x0000793d

000079fc <TC1_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC1_Handler(void)
{
    79fc:	b580      	push	{r7, lr}
    79fe:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc1_dev);
    7a00:	4b03      	ldr	r3, [pc, #12]	; (7a10 <TC1_Handler+0x14>)
    7a02:	681b      	ldr	r3, [r3, #0]
    7a04:	4618      	mov	r0, r3
    7a06:	4b03      	ldr	r3, [pc, #12]	; (7a14 <TC1_Handler+0x18>)
    7a08:	4798      	blx	r3
}
    7a0a:	bf00      	nop
    7a0c:	bd80      	pop	{r7, pc}
    7a0e:	bf00      	nop
    7a10:	20000c34 	.word	0x20000c34
    7a14:	0000793d 	.word	0x0000793d

00007a18 <TC2_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC2_Handler(void)
{
    7a18:	b580      	push	{r7, lr}
    7a1a:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc2_dev);
    7a1c:	4b03      	ldr	r3, [pc, #12]	; (7a2c <TC2_Handler+0x14>)
    7a1e:	681b      	ldr	r3, [r3, #0]
    7a20:	4618      	mov	r0, r3
    7a22:	4b03      	ldr	r3, [pc, #12]	; (7a30 <TC2_Handler+0x18>)
    7a24:	4798      	blx	r3
}
    7a26:	bf00      	nop
    7a28:	bd80      	pop	{r7, pc}
    7a2a:	bf00      	nop
    7a2c:	20000c38 	.word	0x20000c38
    7a30:	0000793d 	.word	0x0000793d

00007a34 <TC3_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC3_Handler(void)
{
    7a34:	b580      	push	{r7, lr}
    7a36:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc3_dev);
    7a38:	4b03      	ldr	r3, [pc, #12]	; (7a48 <TC3_Handler+0x14>)
    7a3a:	681b      	ldr	r3, [r3, #0]
    7a3c:	4618      	mov	r0, r3
    7a3e:	4b03      	ldr	r3, [pc, #12]	; (7a4c <TC3_Handler+0x18>)
    7a40:	4798      	blx	r3
}
    7a42:	bf00      	nop
    7a44:	bd80      	pop	{r7, pc}
    7a46:	bf00      	nop
    7a48:	20000c3c 	.word	0x20000c3c
    7a4c:	0000793d 	.word	0x0000793d

00007a50 <TC7_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC7_Handler(void)
{
    7a50:	b580      	push	{r7, lr}
    7a52:	af00      	add	r7, sp, #0
	tc_pwm_interrupt_handler(_tc7_dev);
    7a54:	4b03      	ldr	r3, [pc, #12]	; (7a64 <TC7_Handler+0x14>)
    7a56:	681b      	ldr	r3, [r3, #0]
    7a58:	4618      	mov	r0, r3
    7a5a:	4b03      	ldr	r3, [pc, #12]	; (7a68 <TC7_Handler+0x18>)
    7a5c:	4798      	blx	r3
}
    7a5e:	bf00      	nop
    7a60:	bd80      	pop	{r7, pc}
    7a62:	bf00      	nop
    7a64:	20000c40 	.word	0x20000c40
    7a68:	00007975 	.word	0x00007975

00007a6c <get_tc_index>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The index of TC configuration
 */
static int8_t get_tc_index(const void *const hw)
{
    7a6c:	b580      	push	{r7, lr}
    7a6e:	b084      	sub	sp, #16
    7a70:	af00      	add	r7, sp, #0
    7a72:	6078      	str	r0, [r7, #4]
	uint8_t index = _get_hardware_offset(hw);
    7a74:	6878      	ldr	r0, [r7, #4]
    7a76:	4b13      	ldr	r3, [pc, #76]	; (7ac4 <get_tc_index+0x58>)
    7a78:	4798      	blx	r3
    7a7a:	4603      	mov	r3, r0
    7a7c:	73bb      	strb	r3, [r7, #14]
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    7a7e:	2300      	movs	r3, #0
    7a80:	73fb      	strb	r3, [r7, #15]
    7a82:	e010      	b.n	7aa6 <get_tc_index+0x3a>
		if (_tcs[i].number == index) {
    7a84:	7bfa      	ldrb	r2, [r7, #15]
    7a86:	4910      	ldr	r1, [pc, #64]	; (7ac8 <get_tc_index+0x5c>)
    7a88:	4613      	mov	r3, r2
    7a8a:	009b      	lsls	r3, r3, #2
    7a8c:	4413      	add	r3, r2
    7a8e:	009b      	lsls	r3, r3, #2
    7a90:	440b      	add	r3, r1
    7a92:	781b      	ldrb	r3, [r3, #0]
    7a94:	7bba      	ldrb	r2, [r7, #14]
    7a96:	429a      	cmp	r2, r3
    7a98:	d102      	bne.n	7aa0 <get_tc_index+0x34>
			return i;
    7a9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
    7a9e:	e00d      	b.n	7abc <get_tc_index+0x50>
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    7aa0:	7bfb      	ldrb	r3, [r7, #15]
    7aa2:	3301      	adds	r3, #1
    7aa4:	73fb      	strb	r3, [r7, #15]
    7aa6:	7bfb      	ldrb	r3, [r7, #15]
    7aa8:	2b04      	cmp	r3, #4
    7aaa:	d9eb      	bls.n	7a84 <get_tc_index+0x18>
		}
	}

	ASSERT(false);
    7aac:	f240 2206 	movw	r2, #518	; 0x206
    7ab0:	4906      	ldr	r1, [pc, #24]	; (7acc <get_tc_index+0x60>)
    7ab2:	2000      	movs	r0, #0
    7ab4:	4b06      	ldr	r3, [pc, #24]	; (7ad0 <get_tc_index+0x64>)
    7ab6:	4798      	blx	r3
	return -1;
    7ab8:	f04f 33ff 	mov.w	r3, #4294967295
}
    7abc:	4618      	mov	r0, r3
    7abe:	3710      	adds	r7, #16
    7ac0:	46bd      	mov	sp, r7
    7ac2:	bd80      	pop	{r7, pc}
    7ac4:	00007b59 	.word	0x00007b59
    7ac8:	20000048 	.word	0x20000048
    7acc:	00013148 	.word	0x00013148
    7ad0:	00002ed9 	.word	0x00002ed9

00007ad4 <_tc_init_irq_param>:

/**
 * \brief Init irq param with the given tc hardware instance
 */
static void _tc_init_irq_param(const void *const hw, void *dev)
{
    7ad4:	b480      	push	{r7}
    7ad6:	b083      	sub	sp, #12
    7ad8:	af00      	add	r7, sp, #0
    7ada:	6078      	str	r0, [r7, #4]
    7adc:	6039      	str	r1, [r7, #0]
	if (hw == TC0) {
    7ade:	687b      	ldr	r3, [r7, #4]
    7ae0:	4a13      	ldr	r2, [pc, #76]	; (7b30 <_tc_init_irq_param+0x5c>)
    7ae2:	4293      	cmp	r3, r2
    7ae4:	d102      	bne.n	7aec <_tc_init_irq_param+0x18>
		_tc0_dev = (struct _timer_device *)dev;
    7ae6:	4a13      	ldr	r2, [pc, #76]	; (7b34 <_tc_init_irq_param+0x60>)
    7ae8:	683b      	ldr	r3, [r7, #0]
    7aea:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC1) {
    7aec:	687b      	ldr	r3, [r7, #4]
    7aee:	4a12      	ldr	r2, [pc, #72]	; (7b38 <_tc_init_irq_param+0x64>)
    7af0:	4293      	cmp	r3, r2
    7af2:	d102      	bne.n	7afa <_tc_init_irq_param+0x26>
		_tc1_dev = (struct _timer_device *)dev;
    7af4:	4a11      	ldr	r2, [pc, #68]	; (7b3c <_tc_init_irq_param+0x68>)
    7af6:	683b      	ldr	r3, [r7, #0]
    7af8:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC2) {
    7afa:	687b      	ldr	r3, [r7, #4]
    7afc:	4a10      	ldr	r2, [pc, #64]	; (7b40 <_tc_init_irq_param+0x6c>)
    7afe:	4293      	cmp	r3, r2
    7b00:	d102      	bne.n	7b08 <_tc_init_irq_param+0x34>
		_tc2_dev = (struct _timer_device *)dev;
    7b02:	4a10      	ldr	r2, [pc, #64]	; (7b44 <_tc_init_irq_param+0x70>)
    7b04:	683b      	ldr	r3, [r7, #0]
    7b06:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC3) {
    7b08:	687b      	ldr	r3, [r7, #4]
    7b0a:	4a0f      	ldr	r2, [pc, #60]	; (7b48 <_tc_init_irq_param+0x74>)
    7b0c:	4293      	cmp	r3, r2
    7b0e:	d102      	bne.n	7b16 <_tc_init_irq_param+0x42>
		_tc3_dev = (struct _timer_device *)dev;
    7b10:	4a0e      	ldr	r2, [pc, #56]	; (7b4c <_tc_init_irq_param+0x78>)
    7b12:	683b      	ldr	r3, [r7, #0]
    7b14:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC7) {
    7b16:	687b      	ldr	r3, [r7, #4]
    7b18:	4a0d      	ldr	r2, [pc, #52]	; (7b50 <_tc_init_irq_param+0x7c>)
    7b1a:	4293      	cmp	r3, r2
    7b1c:	d102      	bne.n	7b24 <_tc_init_irq_param+0x50>
		_tc7_dev = (struct _pwm_device *)dev;
    7b1e:	4a0d      	ldr	r2, [pc, #52]	; (7b54 <_tc_init_irq_param+0x80>)
    7b20:	683b      	ldr	r3, [r7, #0]
    7b22:	6013      	str	r3, [r2, #0]
	}
}
    7b24:	bf00      	nop
    7b26:	370c      	adds	r7, #12
    7b28:	46bd      	mov	sp, r7
    7b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
    7b2e:	4770      	bx	lr
    7b30:	40003800 	.word	0x40003800
    7b34:	20000c30 	.word	0x20000c30
    7b38:	40003c00 	.word	0x40003c00
    7b3c:	20000c34 	.word	0x20000c34
    7b40:	4101a000 	.word	0x4101a000
    7b44:	20000c38 	.word	0x20000c38
    7b48:	4101c000 	.word	0x4101c000
    7b4c:	20000c3c 	.word	0x20000c3c
    7b50:	43001800 	.word	0x43001800
    7b54:	20000c40 	.word	0x20000c40

00007b58 <_get_hardware_offset>:
 * \internal Retrieve TC hardware index
 *
 * \param[in] hw The pointer to hardware instance
 */
static inline uint8_t _get_hardware_offset(const void *const hw)
{
    7b58:	b4b0      	push	{r4, r5, r7}
    7b5a:	b08d      	sub	sp, #52	; 0x34
    7b5c:	af00      	add	r7, sp, #0
    7b5e:	6078      	str	r0, [r7, #4]
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
    7b60:	4b13      	ldr	r3, [pc, #76]	; (7bb0 <_get_hardware_offset+0x58>)
    7b62:	f107 040c 	add.w	r4, r7, #12
    7b66:	461d      	mov	r5, r3
    7b68:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    7b6a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    7b6c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    7b70:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    7b74:	2300      	movs	r3, #0
    7b76:	62fb      	str	r3, [r7, #44]	; 0x2c
    7b78:	e010      	b.n	7b9c <_get_hardware_offset+0x44>
		if ((uint32_t)hw == (uint32_t)tc_modules[i]) {
    7b7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    7b7c:	009b      	lsls	r3, r3, #2
    7b7e:	f107 0230 	add.w	r2, r7, #48	; 0x30
    7b82:	4413      	add	r3, r2
    7b84:	f853 3c24 	ldr.w	r3, [r3, #-36]
    7b88:	461a      	mov	r2, r3
    7b8a:	687b      	ldr	r3, [r7, #4]
    7b8c:	429a      	cmp	r2, r3
    7b8e:	d102      	bne.n	7b96 <_get_hardware_offset+0x3e>
			return i;
    7b90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    7b92:	b2db      	uxtb	r3, r3
    7b94:	e006      	b.n	7ba4 <_get_hardware_offset+0x4c>
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    7b96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    7b98:	3301      	adds	r3, #1
    7b9a:	62fb      	str	r3, [r7, #44]	; 0x2c
    7b9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    7b9e:	2b07      	cmp	r3, #7
    7ba0:	d9eb      	bls.n	7b7a <_get_hardware_offset+0x22>
		}
	}
	return 0;
    7ba2:	2300      	movs	r3, #0
}
    7ba4:	4618      	mov	r0, r3
    7ba6:	3734      	adds	r7, #52	; 0x34
    7ba8:	46bd      	mov	sp, r7
    7baa:	bcb0      	pop	{r4, r5, r7}
    7bac:	4770      	bx	lr
    7bae:	bf00      	nop
    7bb0:	0001315c 	.word	0x0001315c

00007bb4 <__NVIC_EnableIRQ>:
{
    7bb4:	b480      	push	{r7}
    7bb6:	b083      	sub	sp, #12
    7bb8:	af00      	add	r7, sp, #0
    7bba:	4603      	mov	r3, r0
    7bbc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    7bbe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    7bc2:	2b00      	cmp	r3, #0
    7bc4:	db0b      	blt.n	7bde <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    7bc6:	4909      	ldr	r1, [pc, #36]	; (7bec <__NVIC_EnableIRQ+0x38>)
    7bc8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    7bcc:	095b      	lsrs	r3, r3, #5
    7bce:	88fa      	ldrh	r2, [r7, #6]
    7bd0:	f002 021f 	and.w	r2, r2, #31
    7bd4:	2001      	movs	r0, #1
    7bd6:	fa00 f202 	lsl.w	r2, r0, r2
    7bda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    7bde:	bf00      	nop
    7be0:	370c      	adds	r7, #12
    7be2:	46bd      	mov	sp, r7
    7be4:	f85d 7b04 	ldr.w	r7, [sp], #4
    7be8:	4770      	bx	lr
    7bea:	bf00      	nop
    7bec:	e000e100 	.word	0xe000e100

00007bf0 <hri_oscctrl_get_DPLLSTATUS_reg>:
{
    7bf0:	b480      	push	{r7}
    7bf2:	b087      	sub	sp, #28
    7bf4:	af00      	add	r7, sp, #0
    7bf6:	60f8      	str	r0, [r7, #12]
    7bf8:	460b      	mov	r3, r1
    7bfa:	607a      	str	r2, [r7, #4]
    7bfc:	72fb      	strb	r3, [r7, #11]
	tmp = ((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg;
    7bfe:	7afa      	ldrb	r2, [r7, #11]
    7c00:	68f9      	ldr	r1, [r7, #12]
    7c02:	4613      	mov	r3, r2
    7c04:	009b      	lsls	r3, r3, #2
    7c06:	4413      	add	r3, r2
    7c08:	009b      	lsls	r3, r3, #2
    7c0a:	440b      	add	r3, r1
    7c0c:	3340      	adds	r3, #64	; 0x40
    7c0e:	681b      	ldr	r3, [r3, #0]
    7c10:	617b      	str	r3, [r7, #20]
	tmp &= mask;
    7c12:	697a      	ldr	r2, [r7, #20]
    7c14:	687b      	ldr	r3, [r7, #4]
    7c16:	4013      	ands	r3, r2
    7c18:	617b      	str	r3, [r7, #20]
	return tmp;
    7c1a:	697b      	ldr	r3, [r7, #20]
}
    7c1c:	4618      	mov	r0, r3
    7c1e:	371c      	adds	r7, #28
    7c20:	46bd      	mov	sp, r7
    7c22:	f85d 7b04 	ldr.w	r7, [sp], #4
    7c26:	4770      	bx	lr

00007c28 <hri_oscctrl_get_STATUS_reg>:
{
    7c28:	b480      	push	{r7}
    7c2a:	b085      	sub	sp, #20
    7c2c:	af00      	add	r7, sp, #0
    7c2e:	6078      	str	r0, [r7, #4]
    7c30:	6039      	str	r1, [r7, #0]
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    7c32:	687b      	ldr	r3, [r7, #4]
    7c34:	691b      	ldr	r3, [r3, #16]
    7c36:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    7c38:	68fa      	ldr	r2, [r7, #12]
    7c3a:	683b      	ldr	r3, [r7, #0]
    7c3c:	4013      	ands	r3, r2
    7c3e:	60fb      	str	r3, [r7, #12]
	return tmp;
    7c40:	68fb      	ldr	r3, [r7, #12]
}
    7c42:	4618      	mov	r0, r3
    7c44:	3714      	adds	r7, #20
    7c46:	46bd      	mov	sp, r7
    7c48:	f85d 7b04 	ldr.w	r7, [sp], #4
    7c4c:	4770      	bx	lr

00007c4e <hri_oscctrl_get_DFLLCTRLB_MODE_bit>:
{
    7c4e:	b480      	push	{r7}
    7c50:	b085      	sub	sp, #20
    7c52:	af00      	add	r7, sp, #0
    7c54:	6078      	str	r0, [r7, #4]
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
    7c56:	687b      	ldr	r3, [r7, #4]
    7c58:	f893 3020 	ldrb.w	r3, [r3, #32]
    7c5c:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLCTRLB_MODE) >> OSCCTRL_DFLLCTRLB_MODE_Pos;
    7c5e:	7bfb      	ldrb	r3, [r7, #15]
    7c60:	f003 0301 	and.w	r3, r3, #1
    7c64:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    7c66:	7bfb      	ldrb	r3, [r7, #15]
    7c68:	2b00      	cmp	r3, #0
    7c6a:	bf14      	ite	ne
    7c6c:	2301      	movne	r3, #1
    7c6e:	2300      	moveq	r3, #0
    7c70:	b2db      	uxtb	r3, r3
}
    7c72:	4618      	mov	r0, r3
    7c74:	3714      	adds	r7, #20
    7c76:	46bd      	mov	sp, r7
    7c78:	f85d 7b04 	ldr.w	r7, [sp], #4
    7c7c:	4770      	bx	lr

00007c7e <hri_usb_wait_for_sync>:
typedef uint8_t  hri_usbpipe_pintenset_reg_t;
typedef uint8_t  hri_usbpipe_pintflag_reg_t;
typedef uint8_t  hri_usbpipe_pstatus_reg_t;

static inline void hri_usb_wait_for_sync(const void *const hw, hri_usb_syncbusy_reg_t reg)
{
    7c7e:	b480      	push	{r7}
    7c80:	b083      	sub	sp, #12
    7c82:	af00      	add	r7, sp, #0
    7c84:	6078      	str	r0, [r7, #4]
    7c86:	460b      	mov	r3, r1
    7c88:	70fb      	strb	r3, [r7, #3]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    7c8a:	bf00      	nop
    7c8c:	687b      	ldr	r3, [r7, #4]
    7c8e:	789b      	ldrb	r3, [r3, #2]
    7c90:	b2da      	uxtb	r2, r3
    7c92:	78fb      	ldrb	r3, [r7, #3]
    7c94:	4013      	ands	r3, r2
    7c96:	b2db      	uxtb	r3, r3
    7c98:	2b00      	cmp	r3, #0
    7c9a:	d1f7      	bne.n	7c8c <hri_usb_wait_for_sync+0xe>
	};
}
    7c9c:	bf00      	nop
    7c9e:	370c      	adds	r7, #12
    7ca0:	46bd      	mov	sp, r7
    7ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
    7ca6:	4770      	bx	lr

00007ca8 <hri_usb_is_syncing>:

static inline bool hri_usb_is_syncing(const void *const hw, hri_usb_syncbusy_reg_t reg)
{
    7ca8:	b480      	push	{r7}
    7caa:	b083      	sub	sp, #12
    7cac:	af00      	add	r7, sp, #0
    7cae:	6078      	str	r0, [r7, #4]
    7cb0:	460b      	mov	r3, r1
    7cb2:	70fb      	strb	r3, [r7, #3]
	return ((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg;
    7cb4:	687b      	ldr	r3, [r7, #4]
    7cb6:	789b      	ldrb	r3, [r3, #2]
    7cb8:	b2da      	uxtb	r2, r3
    7cba:	78fb      	ldrb	r3, [r7, #3]
    7cbc:	4013      	ands	r3, r2
    7cbe:	b2db      	uxtb	r3, r3
    7cc0:	2b00      	cmp	r3, #0
    7cc2:	bf14      	ite	ne
    7cc4:	2301      	movne	r3, #1
    7cc6:	2300      	moveq	r3, #0
    7cc8:	b2db      	uxtb	r3, r3
}
    7cca:	4618      	mov	r0, r3
    7ccc:	370c      	adds	r7, #12
    7cce:	46bd      	mov	sp, r7
    7cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
    7cd4:	4770      	bx	lr

00007cd6 <hri_usbendpoint_get_EPINTFLAG_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL1;
}

static inline hri_usbendpoint_epintflag_reg_t
hri_usbendpoint_get_EPINTFLAG_reg(const void *const hw, uint8_t submodule_index, hri_usbendpoint_epintflag_reg_t mask)
{
    7cd6:	b480      	push	{r7}
    7cd8:	b085      	sub	sp, #20
    7cda:	af00      	add	r7, sp, #0
    7cdc:	6078      	str	r0, [r7, #4]
    7cde:	460b      	mov	r3, r1
    7ce0:	70fb      	strb	r3, [r7, #3]
    7ce2:	4613      	mov	r3, r2
    7ce4:	70bb      	strb	r3, [r7, #2]
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    7ce6:	78fb      	ldrb	r3, [r7, #3]
    7ce8:	687a      	ldr	r2, [r7, #4]
    7cea:	3308      	adds	r3, #8
    7cec:	015b      	lsls	r3, r3, #5
    7cee:	4413      	add	r3, r2
    7cf0:	3307      	adds	r3, #7
    7cf2:	781b      	ldrb	r3, [r3, #0]
    7cf4:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    7cf6:	7bfa      	ldrb	r2, [r7, #15]
    7cf8:	78bb      	ldrb	r3, [r7, #2]
    7cfa:	4013      	ands	r3, r2
    7cfc:	73fb      	strb	r3, [r7, #15]
	return tmp;
    7cfe:	7bfb      	ldrb	r3, [r7, #15]
}
    7d00:	4618      	mov	r0, r3
    7d02:	3714      	adds	r7, #20
    7d04:	46bd      	mov	sp, r7
    7d06:	f85d 7b04 	ldr.w	r7, [sp], #4
    7d0a:	4770      	bx	lr

00007d0c <hri_usbendpoint_read_EPINTFLAG_reg>:

static inline hri_usbendpoint_epintflag_reg_t hri_usbendpoint_read_EPINTFLAG_reg(const void *const hw,
                                                                                 uint8_t           submodule_index)
{
    7d0c:	b480      	push	{r7}
    7d0e:	b083      	sub	sp, #12
    7d10:	af00      	add	r7, sp, #0
    7d12:	6078      	str	r0, [r7, #4]
    7d14:	460b      	mov	r3, r1
    7d16:	70fb      	strb	r3, [r7, #3]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    7d18:	78fb      	ldrb	r3, [r7, #3]
    7d1a:	687a      	ldr	r2, [r7, #4]
    7d1c:	3308      	adds	r3, #8
    7d1e:	015b      	lsls	r3, r3, #5
    7d20:	4413      	add	r3, r2
    7d22:	3307      	adds	r3, #7
    7d24:	781b      	ldrb	r3, [r3, #0]
    7d26:	b2db      	uxtb	r3, r3
}
    7d28:	4618      	mov	r0, r3
    7d2a:	370c      	adds	r7, #12
    7d2c:	46bd      	mov	sp, r7
    7d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
    7d32:	4770      	bx	lr

00007d34 <hri_usbendpoint_clear_EPINTFLAG_reg>:

static inline void hri_usbendpoint_clear_EPINTFLAG_reg(const void *const hw, uint8_t submodule_index,
                                                       hri_usbendpoint_epintflag_reg_t mask)
{
    7d34:	b480      	push	{r7}
    7d36:	b083      	sub	sp, #12
    7d38:	af00      	add	r7, sp, #0
    7d3a:	6078      	str	r0, [r7, #4]
    7d3c:	460b      	mov	r3, r1
    7d3e:	70fb      	strb	r3, [r7, #3]
    7d40:	4613      	mov	r3, r2
    7d42:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    7d44:	78fb      	ldrb	r3, [r7, #3]
    7d46:	687a      	ldr	r2, [r7, #4]
    7d48:	3308      	adds	r3, #8
    7d4a:	015b      	lsls	r3, r3, #5
    7d4c:	4413      	add	r3, r2
    7d4e:	3307      	adds	r3, #7
    7d50:	78ba      	ldrb	r2, [r7, #2]
    7d52:	701a      	strb	r2, [r3, #0]
}
    7d54:	bf00      	nop
    7d56:	370c      	adds	r7, #12
    7d58:	46bd      	mov	sp, r7
    7d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
    7d5e:	4770      	bx	lr

00007d60 <hri_usbendpoint_set_EPSTATUS_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUS_BK1RDY;
}

static inline void hri_usbendpoint_set_EPSTATUS_reg(const void *const hw, uint8_t submodule_index,
                                                    hri_usbendpoint_epstatus_reg_t mask)
{
    7d60:	b480      	push	{r7}
    7d62:	b083      	sub	sp, #12
    7d64:	af00      	add	r7, sp, #0
    7d66:	6078      	str	r0, [r7, #4]
    7d68:	460b      	mov	r3, r1
    7d6a:	70fb      	strb	r3, [r7, #3]
    7d6c:	4613      	mov	r3, r2
    7d6e:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    7d70:	78fb      	ldrb	r3, [r7, #3]
    7d72:	687a      	ldr	r2, [r7, #4]
    7d74:	3308      	adds	r3, #8
    7d76:	015b      	lsls	r3, r3, #5
    7d78:	4413      	add	r3, r2
    7d7a:	3305      	adds	r3, #5
    7d7c:	78ba      	ldrb	r2, [r7, #2]
    7d7e:	701a      	strb	r2, [r3, #0]
}
    7d80:	bf00      	nop
    7d82:	370c      	adds	r7, #12
    7d84:	46bd      	mov	sp, r7
    7d86:	f85d 7b04 	ldr.w	r7, [sp], #4
    7d8a:	4770      	bx	lr

00007d8c <hri_usbendpoint_read_EPSTATUS_reg>:
	return tmp;
}

static inline hri_usbendpoint_epstatus_reg_t hri_usbendpoint_read_EPSTATUS_reg(const void *const hw,
                                                                               uint8_t           submodule_index)
{
    7d8c:	b480      	push	{r7}
    7d8e:	b083      	sub	sp, #12
    7d90:	af00      	add	r7, sp, #0
    7d92:	6078      	str	r0, [r7, #4]
    7d94:	460b      	mov	r3, r1
    7d96:	70fb      	strb	r3, [r7, #3]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    7d98:	78fb      	ldrb	r3, [r7, #3]
    7d9a:	687a      	ldr	r2, [r7, #4]
    7d9c:	3308      	adds	r3, #8
    7d9e:	015b      	lsls	r3, r3, #5
    7da0:	4413      	add	r3, r2
    7da2:	3306      	adds	r3, #6
    7da4:	781b      	ldrb	r3, [r3, #0]
    7da6:	b2db      	uxtb	r3, r3
}
    7da8:	4618      	mov	r0, r3
    7daa:	370c      	adds	r7, #12
    7dac:	46bd      	mov	sp, r7
    7dae:	f85d 7b04 	ldr.w	r7, [sp], #4
    7db2:	4770      	bx	lr

00007db4 <hri_usbendpoint_clear_EPSTATUS_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = ~data;
}

static inline void hri_usbendpoint_clear_EPSTATUS_reg(const void *const hw, uint8_t submodule_index,
                                                      hri_usbendpoint_epstatus_reg_t mask)
{
    7db4:	b480      	push	{r7}
    7db6:	b083      	sub	sp, #12
    7db8:	af00      	add	r7, sp, #0
    7dba:	6078      	str	r0, [r7, #4]
    7dbc:	460b      	mov	r3, r1
    7dbe:	70fb      	strb	r3, [r7, #3]
    7dc0:	4613      	mov	r3, r2
    7dc2:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    7dc4:	78fb      	ldrb	r3, [r7, #3]
    7dc6:	687a      	ldr	r2, [r7, #4]
    7dc8:	3308      	adds	r3, #8
    7dca:	015b      	lsls	r3, r3, #5
    7dcc:	4413      	add	r3, r2
    7dce:	3304      	adds	r3, #4
    7dd0:	78ba      	ldrb	r2, [r7, #2]
    7dd2:	701a      	strb	r2, [r3, #0]
}
    7dd4:	bf00      	nop
    7dd6:	370c      	adds	r7, #12
    7dd8:	46bd      	mov	sp, r7
    7dda:	f85d 7b04 	ldr.w	r7, [sp], #4
    7dde:	4770      	bx	lr

00007de0 <hri_usbendpoint_clear_EPINTEN_RXSTP_bit>:
		((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = USB_DEVICE_EPINTENSET_RXSTP;
	}
}

static inline void hri_usbendpoint_clear_EPINTEN_RXSTP_bit(const void *const hw, uint8_t submodule_index)
{
    7de0:	b480      	push	{r7}
    7de2:	b083      	sub	sp, #12
    7de4:	af00      	add	r7, sp, #0
    7de6:	6078      	str	r0, [r7, #4]
    7de8:	460b      	mov	r3, r1
    7dea:	70fb      	strb	r3, [r7, #3]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = USB_DEVICE_EPINTENSET_RXSTP;
    7dec:	78fb      	ldrb	r3, [r7, #3]
    7dee:	687a      	ldr	r2, [r7, #4]
    7df0:	015b      	lsls	r3, r3, #5
    7df2:	4413      	add	r3, r2
    7df4:	f503 7384 	add.w	r3, r3, #264	; 0x108
    7df8:	2210      	movs	r2, #16
    7dfa:	701a      	strb	r2, [r3, #0]
}
    7dfc:	bf00      	nop
    7dfe:	370c      	adds	r7, #12
    7e00:	46bd      	mov	sp, r7
    7e02:	f85d 7b04 	ldr.w	r7, [sp], #4
    7e06:	4770      	bx	lr

00007e08 <hri_usbendpoint_set_EPINTEN_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = USB_DEVICE_EPINTENSET_STALL1;
}

static inline void hri_usbendpoint_set_EPINTEN_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_usbendpoint_epintenset_reg_t mask)
{
    7e08:	b480      	push	{r7}
    7e0a:	b083      	sub	sp, #12
    7e0c:	af00      	add	r7, sp, #0
    7e0e:	6078      	str	r0, [r7, #4]
    7e10:	460b      	mov	r3, r1
    7e12:	70fb      	strb	r3, [r7, #3]
    7e14:	4613      	mov	r3, r2
    7e16:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    7e18:	78fb      	ldrb	r3, [r7, #3]
    7e1a:	687a      	ldr	r2, [r7, #4]
    7e1c:	015b      	lsls	r3, r3, #5
    7e1e:	4413      	add	r3, r2
    7e20:	f203 1309 	addw	r3, r3, #265	; 0x109
    7e24:	78ba      	ldrb	r2, [r7, #2]
    7e26:	701a      	strb	r2, [r3, #0]
}
    7e28:	bf00      	nop
    7e2a:	370c      	adds	r7, #12
    7e2c:	46bd      	mov	sp, r7
    7e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
    7e32:	4770      	bx	lr

00007e34 <hri_usbendpoint_clear_EPINTEN_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = ~data;
}

static inline void hri_usbendpoint_clear_EPINTEN_reg(const void *const hw, uint8_t submodule_index,
                                                     hri_usbendpoint_epintenset_reg_t mask)
{
    7e34:	b480      	push	{r7}
    7e36:	b083      	sub	sp, #12
    7e38:	af00      	add	r7, sp, #0
    7e3a:	6078      	str	r0, [r7, #4]
    7e3c:	460b      	mov	r3, r1
    7e3e:	70fb      	strb	r3, [r7, #3]
    7e40:	4613      	mov	r3, r2
    7e42:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    7e44:	78fb      	ldrb	r3, [r7, #3]
    7e46:	687a      	ldr	r2, [r7, #4]
    7e48:	015b      	lsls	r3, r3, #5
    7e4a:	4413      	add	r3, r2
    7e4c:	f503 7384 	add.w	r3, r3, #264	; 0x108
    7e50:	78ba      	ldrb	r2, [r7, #2]
    7e52:	701a      	strb	r2, [r3, #0]
}
    7e54:	bf00      	nop
    7e56:	370c      	adds	r7, #12
    7e58:	46bd      	mov	sp, r7
    7e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
    7e5e:	4770      	bx	lr

00007e60 <hri_usbendpoint_read_EPCFG_EPTYPE0_bf>:
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_EPTYPE0_bf(const void *const hw,
                                                                                uint8_t           submodule_index)
{
    7e60:	b480      	push	{r7}
    7e62:	b085      	sub	sp, #20
    7e64:	af00      	add	r7, sp, #0
    7e66:	6078      	str	r0, [r7, #4]
    7e68:	460b      	mov	r3, r1
    7e6a:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    7e6c:	78fb      	ldrb	r3, [r7, #3]
    7e6e:	687a      	ldr	r2, [r7, #4]
    7e70:	3308      	adds	r3, #8
    7e72:	015b      	lsls	r3, r3, #5
    7e74:	4413      	add	r3, r2
    7e76:	781b      	ldrb	r3, [r3, #0]
    7e78:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE0_Msk) >> USB_DEVICE_EPCFG_EPTYPE0_Pos;
    7e7a:	7bfb      	ldrb	r3, [r7, #15]
    7e7c:	f003 0307 	and.w	r3, r3, #7
    7e80:	73fb      	strb	r3, [r7, #15]
	return tmp;
    7e82:	7bfb      	ldrb	r3, [r7, #15]
}
    7e84:	4618      	mov	r0, r3
    7e86:	3714      	adds	r7, #20
    7e88:	46bd      	mov	sp, r7
    7e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
    7e8e:	4770      	bx	lr

00007e90 <hri_usbendpoint_read_EPCFG_EPTYPE1_bf>:
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_EPTYPE1_bf(const void *const hw,
                                                                                uint8_t           submodule_index)
{
    7e90:	b480      	push	{r7}
    7e92:	b085      	sub	sp, #20
    7e94:	af00      	add	r7, sp, #0
    7e96:	6078      	str	r0, [r7, #4]
    7e98:	460b      	mov	r3, r1
    7e9a:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    7e9c:	78fb      	ldrb	r3, [r7, #3]
    7e9e:	687a      	ldr	r2, [r7, #4]
    7ea0:	3308      	adds	r3, #8
    7ea2:	015b      	lsls	r3, r3, #5
    7ea4:	4413      	add	r3, r2
    7ea6:	781b      	ldrb	r3, [r3, #0]
    7ea8:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE1_Msk) >> USB_DEVICE_EPCFG_EPTYPE1_Pos;
    7eaa:	7bfb      	ldrb	r3, [r7, #15]
    7eac:	091b      	lsrs	r3, r3, #4
    7eae:	b2db      	uxtb	r3, r3
    7eb0:	f003 0307 	and.w	r3, r3, #7
    7eb4:	73fb      	strb	r3, [r7, #15]
	return tmp;
    7eb6:	7bfb      	ldrb	r3, [r7, #15]
}
    7eb8:	4618      	mov	r0, r3
    7eba:	3714      	adds	r7, #20
    7ebc:	46bd      	mov	sp, r7
    7ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
    7ec2:	4770      	bx	lr

00007ec4 <hri_usbendpoint_write_EPCFG_reg>:
	return tmp;
}

static inline void hri_usbendpoint_write_EPCFG_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_usbendpoint_epcfg_reg_t data)
{
    7ec4:	b480      	push	{r7}
    7ec6:	b083      	sub	sp, #12
    7ec8:	af00      	add	r7, sp, #0
    7eca:	6078      	str	r0, [r7, #4]
    7ecc:	460b      	mov	r3, r1
    7ece:	70fb      	strb	r3, [r7, #3]
    7ed0:	4613      	mov	r3, r2
    7ed2:	70bb      	strb	r3, [r7, #2]
	USB_CRITICAL_SECTION_ENTER();
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    7ed4:	78fb      	ldrb	r3, [r7, #3]
    7ed6:	687a      	ldr	r2, [r7, #4]
    7ed8:	3308      	adds	r3, #8
    7eda:	015b      	lsls	r3, r3, #5
    7edc:	4413      	add	r3, r2
    7ede:	78ba      	ldrb	r2, [r7, #2]
    7ee0:	701a      	strb	r2, [r3, #0]
	USB_CRITICAL_SECTION_LEAVE();
}
    7ee2:	bf00      	nop
    7ee4:	370c      	adds	r7, #12
    7ee6:	46bd      	mov	sp, r7
    7ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
    7eec:	4770      	bx	lr

00007eee <hri_usbendpoint_read_EPCFG_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg ^= mask;
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_reg(const void *const hw, uint8_t submodule_index)
{
    7eee:	b480      	push	{r7}
    7ef0:	b083      	sub	sp, #12
    7ef2:	af00      	add	r7, sp, #0
    7ef4:	6078      	str	r0, [r7, #4]
    7ef6:	460b      	mov	r3, r1
    7ef8:	70fb      	strb	r3, [r7, #3]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    7efa:	78fb      	ldrb	r3, [r7, #3]
    7efc:	687a      	ldr	r2, [r7, #4]
    7efe:	3308      	adds	r3, #8
    7f00:	015b      	lsls	r3, r3, #5
    7f02:	4413      	add	r3, r2
    7f04:	781b      	ldrb	r3, [r3, #0]
    7f06:	b2db      	uxtb	r3, r3
}
    7f08:	4618      	mov	r0, r3
    7f0a:	370c      	adds	r7, #12
    7f0c:	46bd      	mov	sp, r7
    7f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
    7f12:	4770      	bx	lr

00007f14 <hri_usbdevice_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_usbdevice_intflag_reg_t hri_usbdevice_read_INTFLAG_reg(const void *const hw)
{
    7f14:	b480      	push	{r7}
    7f16:	b083      	sub	sp, #12
    7f18:	af00      	add	r7, sp, #0
    7f1a:	6078      	str	r0, [r7, #4]
	return ((Usb *)hw)->DEVICE.INTFLAG.reg;
    7f1c:	687b      	ldr	r3, [r7, #4]
    7f1e:	8b9b      	ldrh	r3, [r3, #28]
    7f20:	b29b      	uxth	r3, r3
}
    7f22:	4618      	mov	r0, r3
    7f24:	370c      	adds	r7, #12
    7f26:	46bd      	mov	sp, r7
    7f28:	f85d 7b04 	ldr.w	r7, [sp], #4
    7f2c:	4770      	bx	lr

00007f2e <hri_usbdevice_clear_INTFLAG_reg>:

static inline void hri_usbdevice_clear_INTFLAG_reg(const void *const hw, hri_usbdevice_intflag_reg_t mask)
{
    7f2e:	b480      	push	{r7}
    7f30:	b083      	sub	sp, #12
    7f32:	af00      	add	r7, sp, #0
    7f34:	6078      	str	r0, [r7, #4]
    7f36:	460b      	mov	r3, r1
    7f38:	807b      	strh	r3, [r7, #2]
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    7f3a:	687b      	ldr	r3, [r7, #4]
    7f3c:	887a      	ldrh	r2, [r7, #2]
    7f3e:	839a      	strh	r2, [r3, #28]
}
    7f40:	bf00      	nop
    7f42:	370c      	adds	r7, #12
    7f44:	46bd      	mov	sp, r7
    7f46:	f85d 7b04 	ldr.w	r7, [sp], #4
    7f4a:	4770      	bx	lr

00007f4c <hri_usbdevice_set_INTEN_reg>:
{
	((Usb *)hw)->DEVICE.INTENCLR.reg = USB_DEVICE_INTENSET_LPMSUSP;
}

static inline void hri_usbdevice_set_INTEN_reg(const void *const hw, hri_usbdevice_intenset_reg_t mask)
{
    7f4c:	b480      	push	{r7}
    7f4e:	b083      	sub	sp, #12
    7f50:	af00      	add	r7, sp, #0
    7f52:	6078      	str	r0, [r7, #4]
    7f54:	460b      	mov	r3, r1
    7f56:	807b      	strh	r3, [r7, #2]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    7f58:	687b      	ldr	r3, [r7, #4]
    7f5a:	887a      	ldrh	r2, [r7, #2]
    7f5c:	831a      	strh	r2, [r3, #24]
}
    7f5e:	bf00      	nop
    7f60:	370c      	adds	r7, #12
    7f62:	46bd      	mov	sp, r7
    7f64:	f85d 7b04 	ldr.w	r7, [sp], #4
    7f68:	4770      	bx	lr

00007f6a <hri_usbdevice_read_INTEN_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_usbdevice_intenset_reg_t hri_usbdevice_read_INTEN_reg(const void *const hw)
{
    7f6a:	b480      	push	{r7}
    7f6c:	b083      	sub	sp, #12
    7f6e:	af00      	add	r7, sp, #0
    7f70:	6078      	str	r0, [r7, #4]
	return ((Usb *)hw)->DEVICE.INTENSET.reg;
    7f72:	687b      	ldr	r3, [r7, #4]
    7f74:	8b1b      	ldrh	r3, [r3, #24]
    7f76:	b29b      	uxth	r3, r3
}
    7f78:	4618      	mov	r0, r3
    7f7a:	370c      	adds	r7, #12
    7f7c:	46bd      	mov	sp, r7
    7f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
    7f82:	4770      	bx	lr

00007f84 <hri_usbdevice_clear_INTEN_reg>:
	((Usb *)hw)->DEVICE.INTENSET.reg = data;
	((Usb *)hw)->DEVICE.INTENCLR.reg = ~data;
}

static inline void hri_usbdevice_clear_INTEN_reg(const void *const hw, hri_usbdevice_intenset_reg_t mask)
{
    7f84:	b480      	push	{r7}
    7f86:	b083      	sub	sp, #12
    7f88:	af00      	add	r7, sp, #0
    7f8a:	6078      	str	r0, [r7, #4]
    7f8c:	460b      	mov	r3, r1
    7f8e:	807b      	strh	r3, [r7, #2]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    7f90:	687b      	ldr	r3, [r7, #4]
    7f92:	887a      	ldrh	r2, [r7, #2]
    7f94:	829a      	strh	r2, [r3, #20]
}
    7f96:	bf00      	nop
    7f98:	370c      	adds	r7, #12
    7f9a:	46bd      	mov	sp, r7
    7f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
    7fa0:	4770      	bx	lr

00007fa2 <hri_usb_get_SYNCBUSY_reg>:
{
	return (((Usb *)hw)->HOST.SYNCBUSY.reg & USB_SYNCBUSY_ENABLE) >> USB_SYNCBUSY_ENABLE_Pos;
}

static inline hri_usb_syncbusy_reg_t hri_usb_get_SYNCBUSY_reg(const void *const hw, hri_usb_syncbusy_reg_t mask)
{
    7fa2:	b480      	push	{r7}
    7fa4:	b085      	sub	sp, #20
    7fa6:	af00      	add	r7, sp, #0
    7fa8:	6078      	str	r0, [r7, #4]
    7faa:	460b      	mov	r3, r1
    7fac:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	tmp = ((Usb *)hw)->HOST.SYNCBUSY.reg;
    7fae:	687b      	ldr	r3, [r7, #4]
    7fb0:	789b      	ldrb	r3, [r3, #2]
    7fb2:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    7fb4:	7bfa      	ldrb	r2, [r7, #15]
    7fb6:	78fb      	ldrb	r3, [r7, #3]
    7fb8:	4013      	ands	r3, r2
    7fba:	73fb      	strb	r3, [r7, #15]
	return tmp;
    7fbc:	7bfb      	ldrb	r3, [r7, #15]
}
    7fbe:	4618      	mov	r0, r3
    7fc0:	3714      	adds	r7, #20
    7fc2:	46bd      	mov	sp, r7
    7fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
    7fc8:	4770      	bx	lr
	...

00007fcc <hri_usb_clear_CTRLA_ENABLE_bit>:
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_SWRST | USB_SYNCBUSY_ENABLE);
	USB_CRITICAL_SECTION_LEAVE();
}

static inline void hri_usb_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    7fcc:	b580      	push	{r7, lr}
    7fce:	b082      	sub	sp, #8
    7fd0:	af00      	add	r7, sp, #0
    7fd2:	6078      	str	r0, [r7, #4]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.CTRLA.reg &= ~USB_CTRLA_ENABLE;
    7fd4:	687b      	ldr	r3, [r7, #4]
    7fd6:	781b      	ldrb	r3, [r3, #0]
    7fd8:	b2db      	uxtb	r3, r3
    7fda:	f023 0302 	bic.w	r3, r3, #2
    7fde:	b2da      	uxtb	r2, r3
    7fe0:	687b      	ldr	r3, [r7, #4]
    7fe2:	701a      	strb	r2, [r3, #0]
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_SWRST | USB_SYNCBUSY_ENABLE);
    7fe4:	2103      	movs	r1, #3
    7fe6:	6878      	ldr	r0, [r7, #4]
    7fe8:	4b02      	ldr	r3, [pc, #8]	; (7ff4 <hri_usb_clear_CTRLA_ENABLE_bit+0x28>)
    7fea:	4798      	blx	r3
	USB_CRITICAL_SECTION_LEAVE();
}
    7fec:	bf00      	nop
    7fee:	3708      	adds	r7, #8
    7ff0:	46bd      	mov	sp, r7
    7ff2:	bd80      	pop	{r7, pc}
    7ff4:	00007c7f 	.word	0x00007c7f

00007ff8 <hri_usb_get_CTRLA_reg>:
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usb_ctrla_reg_t hri_usb_get_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t mask)
{
    7ff8:	b580      	push	{r7, lr}
    7ffa:	b084      	sub	sp, #16
    7ffc:	af00      	add	r7, sp, #0
    7ffe:	6078      	str	r0, [r7, #4]
    8000:	460b      	mov	r3, r1
    8002:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
    8004:	2103      	movs	r1, #3
    8006:	6878      	ldr	r0, [r7, #4]
    8008:	4b06      	ldr	r3, [pc, #24]	; (8024 <hri_usb_get_CTRLA_reg+0x2c>)
    800a:	4798      	blx	r3
	tmp = ((Usb *)hw)->HOST.CTRLA.reg;
    800c:	687b      	ldr	r3, [r7, #4]
    800e:	781b      	ldrb	r3, [r3, #0]
    8010:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    8012:	7bfa      	ldrb	r2, [r7, #15]
    8014:	78fb      	ldrb	r3, [r7, #3]
    8016:	4013      	ands	r3, r2
    8018:	73fb      	strb	r3, [r7, #15]
	return tmp;
    801a:	7bfb      	ldrb	r3, [r7, #15]
}
    801c:	4618      	mov	r0, r3
    801e:	3710      	adds	r7, #16
    8020:	46bd      	mov	sp, r7
    8022:	bd80      	pop	{r7, pc}
    8024:	00007c7f 	.word	0x00007c7f

00008028 <hri_usb_write_CTRLA_reg>:

static inline void hri_usb_write_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t data)
{
    8028:	b580      	push	{r7, lr}
    802a:	b082      	sub	sp, #8
    802c:	af00      	add	r7, sp, #0
    802e:	6078      	str	r0, [r7, #4]
    8030:	460b      	mov	r3, r1
    8032:	70fb      	strb	r3, [r7, #3]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.CTRLA.reg = data;
    8034:	687b      	ldr	r3, [r7, #4]
    8036:	78fa      	ldrb	r2, [r7, #3]
    8038:	701a      	strb	r2, [r3, #0]
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
    803a:	2103      	movs	r1, #3
    803c:	6878      	ldr	r0, [r7, #4]
    803e:	4b03      	ldr	r3, [pc, #12]	; (804c <hri_usb_write_CTRLA_reg+0x24>)
    8040:	4798      	blx	r3
	USB_CRITICAL_SECTION_LEAVE();
}
    8042:	bf00      	nop
    8044:	3708      	adds	r7, #8
    8046:	46bd      	mov	sp, r7
    8048:	bd80      	pop	{r7, pc}
    804a:	bf00      	nop
    804c:	00007c7f 	.word	0x00007c7f

00008050 <hri_usb_read_CTRLA_reg>:
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usb_ctrla_reg_t hri_usb_read_CTRLA_reg(const void *const hw)
{
    8050:	b580      	push	{r7, lr}
    8052:	b082      	sub	sp, #8
    8054:	af00      	add	r7, sp, #0
    8056:	6078      	str	r0, [r7, #4]
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
    8058:	2103      	movs	r1, #3
    805a:	6878      	ldr	r0, [r7, #4]
    805c:	4b04      	ldr	r3, [pc, #16]	; (8070 <hri_usb_read_CTRLA_reg+0x20>)
    805e:	4798      	blx	r3
	return ((Usb *)hw)->HOST.CTRLA.reg;
    8060:	687b      	ldr	r3, [r7, #4]
    8062:	781b      	ldrb	r3, [r3, #0]
    8064:	b2db      	uxtb	r3, r3
}
    8066:	4618      	mov	r0, r3
    8068:	3708      	adds	r7, #8
    806a:	46bd      	mov	sp, r7
    806c:	bd80      	pop	{r7, pc}
    806e:	bf00      	nop
    8070:	00007c7f 	.word	0x00007c7f

00008074 <hri_usbdevice_clear_CTRLB_DETACH_bit>:
	((Usb *)hw)->DEVICE.CTRLB.reg = tmp;
	USB_CRITICAL_SECTION_LEAVE();
}

static inline void hri_usbdevice_clear_CTRLB_DETACH_bit(const void *const hw)
{
    8074:	b480      	push	{r7}
    8076:	b083      	sub	sp, #12
    8078:	af00      	add	r7, sp, #0
    807a:	6078      	str	r0, [r7, #4]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->DEVICE.CTRLB.reg &= ~USB_DEVICE_CTRLB_DETACH;
    807c:	687b      	ldr	r3, [r7, #4]
    807e:	891b      	ldrh	r3, [r3, #8]
    8080:	b29b      	uxth	r3, r3
    8082:	f023 0301 	bic.w	r3, r3, #1
    8086:	b29a      	uxth	r2, r3
    8088:	687b      	ldr	r3, [r7, #4]
    808a:	811a      	strh	r2, [r3, #8]
	USB_CRITICAL_SECTION_LEAVE();
}
    808c:	bf00      	nop
    808e:	370c      	adds	r7, #12
    8090:	46bd      	mov	sp, r7
    8092:	f85d 7b04 	ldr.w	r7, [sp], #4
    8096:	4770      	bx	lr

00008098 <hri_usbdevice_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_usbdevice_write_CTRLB_reg(const void *const hw, hri_usbdevice_ctrlb_reg_t data)
{
    8098:	b480      	push	{r7}
    809a:	b083      	sub	sp, #12
    809c:	af00      	add	r7, sp, #0
    809e:	6078      	str	r0, [r7, #4]
    80a0:	460b      	mov	r3, r1
    80a2:	807b      	strh	r3, [r7, #2]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->DEVICE.CTRLB.reg = data;
    80a4:	687b      	ldr	r3, [r7, #4]
    80a6:	887a      	ldrh	r2, [r7, #2]
    80a8:	811a      	strh	r2, [r3, #8]
	USB_CRITICAL_SECTION_LEAVE();
}
    80aa:	bf00      	nop
    80ac:	370c      	adds	r7, #12
    80ae:	46bd      	mov	sp, r7
    80b0:	f85d 7b04 	ldr.w	r7, [sp], #4
    80b4:	4770      	bx	lr

000080b6 <hri_usbdevice_write_DADD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_usbdevice_write_DADD_reg(const void *const hw, hri_usbdevice_dadd_reg_t data)
{
    80b6:	b480      	push	{r7}
    80b8:	b083      	sub	sp, #12
    80ba:	af00      	add	r7, sp, #0
    80bc:	6078      	str	r0, [r7, #4]
    80be:	460b      	mov	r3, r1
    80c0:	70fb      	strb	r3, [r7, #3]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->DEVICE.DADD.reg = data;
    80c2:	687b      	ldr	r3, [r7, #4]
    80c4:	78fa      	ldrb	r2, [r7, #3]
    80c6:	729a      	strb	r2, [r3, #10]
	USB_CRITICAL_SECTION_LEAVE();
}
    80c8:	bf00      	nop
    80ca:	370c      	adds	r7, #12
    80cc:	46bd      	mov	sp, r7
    80ce:	f85d 7b04 	ldr.w	r7, [sp], #4
    80d2:	4770      	bx	lr

000080d4 <hri_usb_write_DESCADD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_usb_write_DESCADD_reg(const void *const hw, hri_usb_descadd_reg_t data)
{
    80d4:	b480      	push	{r7}
    80d6:	b083      	sub	sp, #12
    80d8:	af00      	add	r7, sp, #0
    80da:	6078      	str	r0, [r7, #4]
    80dc:	6039      	str	r1, [r7, #0]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.DESCADD.reg = data;
    80de:	687b      	ldr	r3, [r7, #4]
    80e0:	683a      	ldr	r2, [r7, #0]
    80e2:	625a      	str	r2, [r3, #36]	; 0x24
	USB_CRITICAL_SECTION_LEAVE();
}
    80e4:	bf00      	nop
    80e6:	370c      	adds	r7, #12
    80e8:	46bd      	mov	sp, r7
    80ea:	f85d 7b04 	ldr.w	r7, [sp], #4
    80ee:	4770      	bx	lr

000080f0 <_dummy_func_no_return>:
/**
 * \brief Dummy callback function
 * \return Always false.
 */
static bool _dummy_func_no_return(uint32_t unused0, uint32_t unused1)
{
    80f0:	b480      	push	{r7}
    80f2:	b083      	sub	sp, #12
    80f4:	af00      	add	r7, sp, #0
    80f6:	6078      	str	r0, [r7, #4]
    80f8:	6039      	str	r1, [r7, #0]
	(void)unused0;
	(void)unused1;
	return false;
    80fa:	2300      	movs	r3, #0
}
    80fc:	4618      	mov	r0, r3
    80fe:	370c      	adds	r7, #12
    8100:	46bd      	mov	sp, r7
    8102:	f85d 7b04 	ldr.w	r7, [sp], #4
    8106:	4770      	bx	lr

00008108 <_usb_load_calib>:

/**
 * \brief Load USB calibration value from NVM
 */
static void _usb_load_calib(void)
{
    8108:	b480      	push	{r7}
    810a:	b085      	sub	sp, #20
    810c:	af00      	add	r7, sp, #0
#define NVM_USB_PAD_TRANSN_SIZE 5
#define NVM_USB_PAD_TRANSP_POS 37
#define NVM_USB_PAD_TRANSP_SIZE 5
#define NVM_USB_PAD_TRIM_POS 42
#define NVM_USB_PAD_TRIM_SIZE 3
	Usb *    hw = USB;
    810e:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    8112:	603b      	str	r3, [r7, #0]
	uint32_t pad_transn
	    = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRANSN_POS / 32)) >> (NVM_USB_PAD_TRANSN_POS % 32))
    8114:	4b28      	ldr	r3, [pc, #160]	; (81b8 <_usb_load_calib+0xb0>)
    8116:	681b      	ldr	r3, [r3, #0]
	uint32_t pad_transn
    8118:	f003 031f 	and.w	r3, r3, #31
    811c:	60fb      	str	r3, [r7, #12]
	      & ((1 << NVM_USB_PAD_TRANSN_SIZE) - 1);
	uint32_t pad_transp
	    = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRANSP_POS / 32)) >> (NVM_USB_PAD_TRANSP_POS % 32))
    811e:	4b26      	ldr	r3, [pc, #152]	; (81b8 <_usb_load_calib+0xb0>)
    8120:	681b      	ldr	r3, [r3, #0]
    8122:	095b      	lsrs	r3, r3, #5
	uint32_t pad_transp
    8124:	f003 031f 	and.w	r3, r3, #31
    8128:	60bb      	str	r3, [r7, #8]
	      & ((1 << NVM_USB_PAD_TRANSP_SIZE) - 1);
	uint32_t pad_trim = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRIM_POS / 32)) >> (NVM_USB_PAD_TRIM_POS % 32))
    812a:	4b23      	ldr	r3, [pc, #140]	; (81b8 <_usb_load_calib+0xb0>)
    812c:	681b      	ldr	r3, [r3, #0]
    812e:	0a9b      	lsrs	r3, r3, #10
    8130:	f003 0307 	and.w	r3, r3, #7
    8134:	607b      	str	r3, [r7, #4]
	                    & ((1 << NVM_USB_PAD_TRIM_SIZE) - 1);
	if (pad_transn == 0 || pad_transn == 0x1F) {
    8136:	68fb      	ldr	r3, [r7, #12]
    8138:	2b00      	cmp	r3, #0
    813a:	d002      	beq.n	8142 <_usb_load_calib+0x3a>
    813c:	68fb      	ldr	r3, [r7, #12]
    813e:	2b1f      	cmp	r3, #31
    8140:	d101      	bne.n	8146 <_usb_load_calib+0x3e>
		pad_transn = 9;
    8142:	2309      	movs	r3, #9
    8144:	60fb      	str	r3, [r7, #12]
	}
	if (pad_transp == 0 || pad_transp == 0x1F) {
    8146:	68bb      	ldr	r3, [r7, #8]
    8148:	2b00      	cmp	r3, #0
    814a:	d002      	beq.n	8152 <_usb_load_calib+0x4a>
    814c:	68bb      	ldr	r3, [r7, #8]
    814e:	2b1f      	cmp	r3, #31
    8150:	d101      	bne.n	8156 <_usb_load_calib+0x4e>
		pad_transp = 25;
    8152:	2319      	movs	r3, #25
    8154:	60bb      	str	r3, [r7, #8]
	}
	if (pad_trim == 0 || pad_trim == 0x7) {
    8156:	687b      	ldr	r3, [r7, #4]
    8158:	2b00      	cmp	r3, #0
    815a:	d002      	beq.n	8162 <_usb_load_calib+0x5a>
    815c:	687b      	ldr	r3, [r7, #4]
    815e:	2b07      	cmp	r3, #7
    8160:	d101      	bne.n	8166 <_usb_load_calib+0x5e>
		pad_trim = 6;
    8162:	2306      	movs	r3, #6
    8164:	607b      	str	r3, [r7, #4]
	}

	hw->DEVICE.PADCAL.reg = USB_PADCAL_TRANSN(pad_transn) | USB_PADCAL_TRANSP(pad_transp) | USB_PADCAL_TRIM(pad_trim);
    8166:	68fb      	ldr	r3, [r7, #12]
    8168:	b29b      	uxth	r3, r3
    816a:	019b      	lsls	r3, r3, #6
    816c:	b29b      	uxth	r3, r3
    816e:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
    8172:	b29a      	uxth	r2, r3
    8174:	68bb      	ldr	r3, [r7, #8]
    8176:	b29b      	uxth	r3, r3
    8178:	f003 031f 	and.w	r3, r3, #31
    817c:	b29b      	uxth	r3, r3
    817e:	4313      	orrs	r3, r2
    8180:	b29a      	uxth	r2, r3
    8182:	687b      	ldr	r3, [r7, #4]
    8184:	b29b      	uxth	r3, r3
    8186:	031b      	lsls	r3, r3, #12
    8188:	b29b      	uxth	r3, r3
    818a:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
    818e:	b29b      	uxth	r3, r3
    8190:	4313      	orrs	r3, r2
    8192:	b29a      	uxth	r2, r3
    8194:	683b      	ldr	r3, [r7, #0]
    8196:	851a      	strh	r2, [r3, #40]	; 0x28

	hw->DEVICE.QOSCTRL.bit.CQOS = 3;
    8198:	683a      	ldr	r2, [r7, #0]
    819a:	78d3      	ldrb	r3, [r2, #3]
    819c:	f043 0303 	orr.w	r3, r3, #3
    81a0:	70d3      	strb	r3, [r2, #3]
	hw->DEVICE.QOSCTRL.bit.DQOS = 3;
    81a2:	683a      	ldr	r2, [r7, #0]
    81a4:	78d3      	ldrb	r3, [r2, #3]
    81a6:	f043 030c 	orr.w	r3, r3, #12
    81aa:	70d3      	strb	r3, [r2, #3]
}
    81ac:	bf00      	nop
    81ae:	3714      	adds	r7, #20
    81b0:	46bd      	mov	sp, r7
    81b2:	f85d 7b04 	ldr.w	r7, [sp], #4
    81b6:	4770      	bx	lr
    81b8:	00800084 	.word	0x00800084

000081bc <_usb_d_dev_wait_dpll_rdy>:

/**
 * \brief Wait DPLL clock to be ready
 */
static inline void _usb_d_dev_wait_dpll_rdy(void)
{
    81bc:	b580      	push	{r7, lr}
    81be:	af00      	add	r7, sp, #0
#define DPLL_READY_FLAG (OSCCTRL_DPLLSTATUS_CLKRDY | OSCCTRL_DPLLSTATUS_LOCK)
	while (hri_oscctrl_get_DPLLSTATUS_reg(OSCCTRL, 0, DPLL_READY_FLAG) != DPLL_READY_FLAG)
    81c0:	bf00      	nop
    81c2:	2203      	movs	r2, #3
    81c4:	2100      	movs	r1, #0
    81c6:	4804      	ldr	r0, [pc, #16]	; (81d8 <_usb_d_dev_wait_dpll_rdy+0x1c>)
    81c8:	4b04      	ldr	r3, [pc, #16]	; (81dc <_usb_d_dev_wait_dpll_rdy+0x20>)
    81ca:	4798      	blx	r3
    81cc:	4603      	mov	r3, r0
    81ce:	2b03      	cmp	r3, #3
    81d0:	d1f7      	bne.n	81c2 <_usb_d_dev_wait_dpll_rdy+0x6>
		;
}
    81d2:	bf00      	nop
    81d4:	bd80      	pop	{r7, pc}
    81d6:	bf00      	nop
    81d8:	40001000 	.word	0x40001000
    81dc:	00007bf1 	.word	0x00007bf1

000081e0 <_usb_d_dev_wait_dfll_rdy>:

/**
 * \brief Wait DFLL clock to be ready
 */
static inline void _usb_d_dev_wait_dfll_rdy(void)
{
    81e0:	b580      	push	{r7, lr}
    81e2:	af00      	add	r7, sp, #0
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(OSCCTRL)) {
    81e4:	480e      	ldr	r0, [pc, #56]	; (8220 <_usb_d_dev_wait_dfll_rdy+0x40>)
    81e6:	4b0f      	ldr	r3, [pc, #60]	; (8224 <_usb_d_dev_wait_dfll_rdy+0x44>)
    81e8:	4798      	blx	r3
    81ea:	4603      	mov	r3, r0
    81ec:	2b00      	cmp	r3, #0
    81ee:	d00a      	beq.n	8206 <_usb_d_dev_wait_dfll_rdy+0x26>
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, (OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC))
    81f0:	bf00      	nop
    81f2:	f44f 6110 	mov.w	r1, #2304	; 0x900
    81f6:	480a      	ldr	r0, [pc, #40]	; (8220 <_usb_d_dev_wait_dfll_rdy+0x40>)
    81f8:	4b0b      	ldr	r3, [pc, #44]	; (8228 <_usb_d_dev_wait_dfll_rdy+0x48>)
    81fa:	4798      	blx	r3
    81fc:	4603      	mov	r3, r0
    81fe:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
    8202:	d1f6      	bne.n	81f2 <_usb_d_dev_wait_dfll_rdy+0x12>
			;
	} else {
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, OSCCTRL_STATUS_DFLLRDY) != OSCCTRL_STATUS_DFLLRDY)
			;
	}
}
    8204:	e009      	b.n	821a <_usb_d_dev_wait_dfll_rdy+0x3a>
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, OSCCTRL_STATUS_DFLLRDY) != OSCCTRL_STATUS_DFLLRDY)
    8206:	bf00      	nop
    8208:	f44f 7180 	mov.w	r1, #256	; 0x100
    820c:	4804      	ldr	r0, [pc, #16]	; (8220 <_usb_d_dev_wait_dfll_rdy+0x40>)
    820e:	4b06      	ldr	r3, [pc, #24]	; (8228 <_usb_d_dev_wait_dfll_rdy+0x48>)
    8210:	4798      	blx	r3
    8212:	4603      	mov	r3, r0
    8214:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    8218:	d1f6      	bne.n	8208 <_usb_d_dev_wait_dfll_rdy+0x28>
}
    821a:	bf00      	nop
    821c:	bd80      	pop	{r7, pc}
    821e:	bf00      	nop
    8220:	40001000 	.word	0x40001000
    8224:	00007c4f 	.word	0x00007c4f
    8228:	00007c29 	.word	0x00007c29

0000822c <_usb_d_dev_wait_clk_rdy>:
 * \brief Wait USB source clock to be ready
 * \param[in] clk_src Clock source, could be \ref USB_CLK_SRC_DFLL or
 *                    \ref USB_CLK_SRC_DPLL.
 */
static inline void _usb_d_dev_wait_clk_rdy(const uint8_t clk_src)
{
    822c:	b580      	push	{r7, lr}
    822e:	b082      	sub	sp, #8
    8230:	af00      	add	r7, sp, #0
    8232:	4603      	mov	r3, r0
    8234:	71fb      	strb	r3, [r7, #7]
	if (clk_src == USB_CLK_SRC_DFLL) {
    8236:	79fb      	ldrb	r3, [r7, #7]
    8238:	2b00      	cmp	r3, #0
    823a:	d102      	bne.n	8242 <_usb_d_dev_wait_clk_rdy+0x16>
		_usb_d_dev_wait_dfll_rdy();
    823c:	4b05      	ldr	r3, [pc, #20]	; (8254 <_usb_d_dev_wait_clk_rdy+0x28>)
    823e:	4798      	blx	r3
	} else if (clk_src == USB_CLK_SRC_DPLL) {
		_usb_d_dev_wait_dpll_rdy();
	}
}
    8240:	e004      	b.n	824c <_usb_d_dev_wait_clk_rdy+0x20>
	} else if (clk_src == USB_CLK_SRC_DPLL) {
    8242:	79fb      	ldrb	r3, [r7, #7]
    8244:	2b01      	cmp	r3, #1
    8246:	d101      	bne.n	824c <_usb_d_dev_wait_clk_rdy+0x20>
		_usb_d_dev_wait_dpll_rdy();
    8248:	4b03      	ldr	r3, [pc, #12]	; (8258 <_usb_d_dev_wait_clk_rdy+0x2c>)
    824a:	4798      	blx	r3
}
    824c:	bf00      	nop
    824e:	3708      	adds	r7, #8
    8250:	46bd      	mov	sp, r7
    8252:	bd80      	pop	{r7, pc}
    8254:	000081e1 	.word	0x000081e1
    8258:	000081bd 	.word	0x000081bd

0000825c <_usbd_ep_int_ack>:
/** \brief ACK the endpoint interrupt
 * \param[in] epn Endpoint number.
 * \param[in] flags Interrupt flags.
 */
static inline void _usbd_ep_int_ack(uint8_t epn, uint32_t flags)
{
    825c:	b580      	push	{r7, lr}
    825e:	b082      	sub	sp, #8
    8260:	af00      	add	r7, sp, #0
    8262:	4603      	mov	r3, r0
    8264:	6039      	str	r1, [r7, #0]
    8266:	71fb      	strb	r3, [r7, #7]
	hri_usbendpoint_clear_EPINTFLAG_reg(USB, epn, flags);
    8268:	683b      	ldr	r3, [r7, #0]
    826a:	b2da      	uxtb	r2, r3
    826c:	79fb      	ldrb	r3, [r7, #7]
    826e:	4619      	mov	r1, r3
    8270:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8274:	4b02      	ldr	r3, [pc, #8]	; (8280 <_usbd_ep_int_ack+0x24>)
    8276:	4798      	blx	r3
}
    8278:	bf00      	nop
    827a:	3708      	adds	r7, #8
    827c:	46bd      	mov	sp, r7
    827e:	bd80      	pop	{r7, pc}
    8280:	00007d35 	.word	0x00007d35

00008284 <_usbd_ep_int_en>:
/** \brief Enable the endpoint interrupt
 * \param[in] epn Endpoint number.
 * \param[in] flags Interrupt flags.
 */
static inline void _usbd_ep_int_en(uint8_t epn, uint32_t flags)
{
    8284:	b580      	push	{r7, lr}
    8286:	b082      	sub	sp, #8
    8288:	af00      	add	r7, sp, #0
    828a:	4603      	mov	r3, r0
    828c:	6039      	str	r1, [r7, #0]
    828e:	71fb      	strb	r3, [r7, #7]
	hri_usbendpoint_set_EPINTEN_reg(USB, epn, flags);
    8290:	683b      	ldr	r3, [r7, #0]
    8292:	b2da      	uxtb	r2, r3
    8294:	79fb      	ldrb	r3, [r7, #7]
    8296:	4619      	mov	r1, r3
    8298:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    829c:	4b02      	ldr	r3, [pc, #8]	; (82a8 <_usbd_ep_int_en+0x24>)
    829e:	4798      	blx	r3
}
    82a0:	bf00      	nop
    82a2:	3708      	adds	r7, #8
    82a4:	46bd      	mov	sp, r7
    82a6:	bd80      	pop	{r7, pc}
    82a8:	00007e09 	.word	0x00007e09

000082ac <_usbd_ep_int_dis>:
/** \brief Disable the endpoint interrupt
 * \param[in] epn Endpoint number.
 * \param[in] flags Interrupt flags.
 */
static inline void _usbd_ep_int_dis(uint8_t epn, uint32_t flags)
{
    82ac:	b580      	push	{r7, lr}
    82ae:	b082      	sub	sp, #8
    82b0:	af00      	add	r7, sp, #0
    82b2:	4603      	mov	r3, r0
    82b4:	6039      	str	r1, [r7, #0]
    82b6:	71fb      	strb	r3, [r7, #7]
	hri_usbendpoint_clear_EPINTEN_reg(USB, epn, flags);
    82b8:	683b      	ldr	r3, [r7, #0]
    82ba:	b2da      	uxtb	r2, r3
    82bc:	79fb      	ldrb	r3, [r7, #7]
    82be:	4619      	mov	r1, r3
    82c0:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    82c4:	4b02      	ldr	r3, [pc, #8]	; (82d0 <_usbd_ep_int_dis+0x24>)
    82c6:	4798      	blx	r3
}
    82c8:	bf00      	nop
    82ca:	3708      	adds	r7, #8
    82cc:	46bd      	mov	sp, r7
    82ce:	bd80      	pop	{r7, pc}
    82d0:	00007e35 	.word	0x00007e35

000082d4 <_usbd_ep_is_ctrl>:

/** \brief Check if endpoint is control endpoint
 * \param[in] epn Endpoint number.
 */
static inline bool _usbd_ep_is_ctrl(uint8_t epn)
{
    82d4:	b580      	push	{r7, lr}
    82d6:	b082      	sub	sp, #8
    82d8:	af00      	add	r7, sp, #0
    82da:	4603      	mov	r3, r0
    82dc:	71fb      	strb	r3, [r7, #7]
	return (hri_usbendpoint_read_EPCFG_reg(USB, epn) == USB_D_EPCFG_CTRL);
    82de:	79fb      	ldrb	r3, [r7, #7]
    82e0:	4619      	mov	r1, r3
    82e2:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    82e6:	4b06      	ldr	r3, [pc, #24]	; (8300 <_usbd_ep_is_ctrl+0x2c>)
    82e8:	4798      	blx	r3
    82ea:	4603      	mov	r3, r0
    82ec:	2b11      	cmp	r3, #17
    82ee:	bf0c      	ite	eq
    82f0:	2301      	moveq	r3, #1
    82f2:	2300      	movne	r3, #0
    82f4:	b2db      	uxtb	r3, r3
}
    82f6:	4618      	mov	r0, r3
    82f8:	3708      	adds	r7, #8
    82fa:	46bd      	mov	sp, r7
    82fc:	bd80      	pop	{r7, pc}
    82fe:	bf00      	nop
    8300:	00007eef 	.word	0x00007eef

00008304 <_usbd_ep_set_stall>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] st Stall status.
 */
static inline void _usbd_ep_set_stall(uint8_t epn, uint8_t bank_n, bool st)
{
    8304:	b580      	push	{r7, lr}
    8306:	b082      	sub	sp, #8
    8308:	af00      	add	r7, sp, #0
    830a:	4603      	mov	r3, r0
    830c:	71fb      	strb	r3, [r7, #7]
    830e:	460b      	mov	r3, r1
    8310:	71bb      	strb	r3, [r7, #6]
    8312:	4613      	mov	r3, r2
    8314:	717b      	strb	r3, [r7, #5]
	if (st) {
    8316:	797b      	ldrb	r3, [r7, #5]
    8318:	2b00      	cmp	r3, #0
    831a:	d00b      	beq.n	8334 <_usbd_ep_set_stall+0x30>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    831c:	79bb      	ldrb	r3, [r7, #6]
    831e:	2210      	movs	r2, #16
    8320:	fa02 f303 	lsl.w	r3, r2, r3
    8324:	b2da      	uxtb	r2, r3
    8326:	79fb      	ldrb	r3, [r7, #7]
    8328:	4619      	mov	r1, r3
    832a:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    832e:	4b09      	ldr	r3, [pc, #36]	; (8354 <_usbd_ep_set_stall+0x50>)
    8330:	4798      	blx	r3
	} else {
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
	}
}
    8332:	e00a      	b.n	834a <_usbd_ep_set_stall+0x46>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    8334:	79bb      	ldrb	r3, [r7, #6]
    8336:	2210      	movs	r2, #16
    8338:	fa02 f303 	lsl.w	r3, r2, r3
    833c:	b2da      	uxtb	r2, r3
    833e:	79fb      	ldrb	r3, [r7, #7]
    8340:	4619      	mov	r1, r3
    8342:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8346:	4b04      	ldr	r3, [pc, #16]	; (8358 <_usbd_ep_set_stall+0x54>)
    8348:	4798      	blx	r3
}
    834a:	bf00      	nop
    834c:	3708      	adds	r7, #8
    834e:	46bd      	mov	sp, r7
    8350:	bd80      	pop	{r7, pc}
    8352:	bf00      	nop
    8354:	00007d61 	.word	0x00007d61
    8358:	00007db5 	.word	0x00007db5

0000835c <_usbd_ep_is_stalled>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \return \c true if it's stalled.
 */
static inline bool _usbd_ep_is_stalled(uint8_t epn, uint8_t bank_n)
{
    835c:	b580      	push	{r7, lr}
    835e:	b084      	sub	sp, #16
    8360:	af00      	add	r7, sp, #0
    8362:	4603      	mov	r3, r0
    8364:	460a      	mov	r2, r1
    8366:	71fb      	strb	r3, [r7, #7]
    8368:	4613      	mov	r3, r2
    836a:	71bb      	strb	r3, [r7, #6]
	Usb *hw = USB;
    836c:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    8370:	60fb      	str	r3, [r7, #12]
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    8372:	79fb      	ldrb	r3, [r7, #7]
    8374:	4619      	mov	r1, r3
    8376:	68f8      	ldr	r0, [r7, #12]
    8378:	4b08      	ldr	r3, [pc, #32]	; (839c <_usbd_ep_is_stalled+0x40>)
    837a:	4798      	blx	r3
    837c:	4603      	mov	r3, r0
    837e:	4619      	mov	r1, r3
    8380:	79bb      	ldrb	r3, [r7, #6]
    8382:	2210      	movs	r2, #16
    8384:	fa02 f303 	lsl.w	r3, r2, r3
    8388:	400b      	ands	r3, r1
    838a:	2b00      	cmp	r3, #0
    838c:	bf14      	ite	ne
    838e:	2301      	movne	r3, #1
    8390:	2300      	moveq	r3, #0
    8392:	b2db      	uxtb	r3, r3
}
    8394:	4618      	mov	r0, r3
    8396:	3710      	adds	r7, #16
    8398:	46bd      	mov	sp, r7
    839a:	bd80      	pop	{r7, pc}
    839c:	00007d8d 	.word	0x00007d8d

000083a0 <_usbd_ep_is_stall_sent>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \return \c true if it's sent.
 */
static inline bool _usbd_ep_is_stall_sent(uint8_t epn, uint8_t bank_n)
{
    83a0:	b580      	push	{r7, lr}
    83a2:	b084      	sub	sp, #16
    83a4:	af00      	add	r7, sp, #0
    83a6:	4603      	mov	r3, r0
    83a8:	460a      	mov	r2, r1
    83aa:	71fb      	strb	r3, [r7, #7]
    83ac:	4613      	mov	r3, r2
    83ae:	71bb      	strb	r3, [r7, #6]
	Usb *hw = USB;
    83b0:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    83b4:	60fb      	str	r3, [r7, #12]
	return (hri_usbendpoint_read_EPINTFLAG_reg(hw, epn) & (USB_DEVICE_EPINTFLAG_STALL0 << bank_n));
    83b6:	79fb      	ldrb	r3, [r7, #7]
    83b8:	4619      	mov	r1, r3
    83ba:	68f8      	ldr	r0, [r7, #12]
    83bc:	4b08      	ldr	r3, [pc, #32]	; (83e0 <_usbd_ep_is_stall_sent+0x40>)
    83be:	4798      	blx	r3
    83c0:	4603      	mov	r3, r0
    83c2:	4619      	mov	r1, r3
    83c4:	79bb      	ldrb	r3, [r7, #6]
    83c6:	2220      	movs	r2, #32
    83c8:	fa02 f303 	lsl.w	r3, r2, r3
    83cc:	400b      	ands	r3, r1
    83ce:	2b00      	cmp	r3, #0
    83d0:	bf14      	ite	ne
    83d2:	2301      	movne	r3, #1
    83d4:	2300      	moveq	r3, #0
    83d6:	b2db      	uxtb	r3, r3
}
    83d8:	4618      	mov	r0, r3
    83da:	3710      	adds	r7, #16
    83dc:	46bd      	mov	sp, r7
    83de:	bd80      	pop	{r7, pc}
    83e0:	00007d0d 	.word	0x00007d0d

000083e4 <_usbd_ep_ack_stall>:
/** \brief ACK endpoint STALL interrupt
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 */
static inline void _usbd_ep_ack_stall(uint8_t epn, uint8_t bank_n)
{
    83e4:	b580      	push	{r7, lr}
    83e6:	b082      	sub	sp, #8
    83e8:	af00      	add	r7, sp, #0
    83ea:	4603      	mov	r3, r0
    83ec:	460a      	mov	r2, r1
    83ee:	71fb      	strb	r3, [r7, #7]
    83f0:	4613      	mov	r3, r2
    83f2:	71bb      	strb	r3, [r7, #6]
	_usbd_ep_int_ack(epn, (USB_DEVICE_EPINTFLAG_STALL0 << bank_n));
    83f4:	79bb      	ldrb	r3, [r7, #6]
    83f6:	2220      	movs	r2, #32
    83f8:	409a      	lsls	r2, r3
    83fa:	79fb      	ldrb	r3, [r7, #7]
    83fc:	4611      	mov	r1, r2
    83fe:	4618      	mov	r0, r3
    8400:	4b02      	ldr	r3, [pc, #8]	; (840c <_usbd_ep_ack_stall+0x28>)
    8402:	4798      	blx	r3
}
    8404:	bf00      	nop
    8406:	3708      	adds	r7, #8
    8408:	46bd      	mov	sp, r7
    840a:	bd80      	pop	{r7, pc}
    840c:	0000825d 	.word	0x0000825d

00008410 <_usbd_ep_int_stall_en>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] en \c true to enable, \c false to disable.
 */
static inline void _usbd_ep_int_stall_en(uint8_t epn, uint8_t bank_n, const bool en)
{
    8410:	b580      	push	{r7, lr}
    8412:	b082      	sub	sp, #8
    8414:	af00      	add	r7, sp, #0
    8416:	4603      	mov	r3, r0
    8418:	71fb      	strb	r3, [r7, #7]
    841a:	460b      	mov	r3, r1
    841c:	71bb      	strb	r3, [r7, #6]
    841e:	4613      	mov	r3, r2
    8420:	717b      	strb	r3, [r7, #5]
	if (en) {
    8422:	797b      	ldrb	r3, [r7, #5]
    8424:	2b00      	cmp	r3, #0
    8426:	d008      	beq.n	843a <_usbd_ep_int_stall_en+0x2a>
		_usbd_ep_int_en(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
    8428:	79bb      	ldrb	r3, [r7, #6]
    842a:	2220      	movs	r2, #32
    842c:	409a      	lsls	r2, r3
    842e:	79fb      	ldrb	r3, [r7, #7]
    8430:	4611      	mov	r1, r2
    8432:	4618      	mov	r0, r3
    8434:	4b07      	ldr	r3, [pc, #28]	; (8454 <_usbd_ep_int_stall_en+0x44>)
    8436:	4798      	blx	r3
	} else {
		_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
	}
}
    8438:	e007      	b.n	844a <_usbd_ep_int_stall_en+0x3a>
		_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
    843a:	79bb      	ldrb	r3, [r7, #6]
    843c:	2220      	movs	r2, #32
    843e:	409a      	lsls	r2, r3
    8440:	79fb      	ldrb	r3, [r7, #7]
    8442:	4611      	mov	r1, r2
    8444:	4618      	mov	r0, r3
    8446:	4b04      	ldr	r3, [pc, #16]	; (8458 <_usbd_ep_int_stall_en+0x48>)
    8448:	4798      	blx	r3
}
    844a:	bf00      	nop
    844c:	3708      	adds	r7, #8
    844e:	46bd      	mov	sp, r7
    8450:	bd80      	pop	{r7, pc}
    8452:	bf00      	nop
    8454:	00008285 	.word	0x00008285
    8458:	000082ad 	.word	0x000082ad

0000845c <_usbd_ep_stop_setup>:

/** \brief Stop SETUP transactions
 * \param[in] epn Endpoint number.
 */
static inline void _usbd_ep_stop_setup(uint8_t epn)
{
    845c:	b580      	push	{r7, lr}
    845e:	b082      	sub	sp, #8
    8460:	af00      	add	r7, sp, #0
    8462:	4603      	mov	r3, r0
    8464:	71fb      	strb	r3, [r7, #7]
	hri_usbendpoint_clear_EPINTEN_RXSTP_bit(USB, epn);
    8466:	79fb      	ldrb	r3, [r7, #7]
    8468:	4619      	mov	r1, r3
    846a:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    846e:	4b03      	ldr	r3, [pc, #12]	; (847c <_usbd_ep_stop_setup+0x20>)
    8470:	4798      	blx	r3
}
    8472:	bf00      	nop
    8474:	3708      	adds	r7, #8
    8476:	46bd      	mov	sp, r7
    8478:	bd80      	pop	{r7, pc}
    847a:	bf00      	nop
    847c:	00007de1 	.word	0x00007de1

00008480 <_usbd_ep_is_setup>:

/** \brief Check if SETUP packet is ready in cache
 * \param[in] epn Endpoint number.
 */
static inline bool _usbd_ep_is_setup(uint8_t epn)
{
    8480:	b580      	push	{r7, lr}
    8482:	b082      	sub	sp, #8
    8484:	af00      	add	r7, sp, #0
    8486:	4603      	mov	r3, r0
    8488:	71fb      	strb	r3, [r7, #7]
	return hri_usbendpoint_get_EPINTFLAG_reg(USB, epn, USB_DEVICE_EPINTFLAG_RXSTP);
    848a:	79fb      	ldrb	r3, [r7, #7]
    848c:	2210      	movs	r2, #16
    848e:	4619      	mov	r1, r3
    8490:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8494:	4b05      	ldr	r3, [pc, #20]	; (84ac <_usbd_ep_is_setup+0x2c>)
    8496:	4798      	blx	r3
    8498:	4603      	mov	r3, r0
    849a:	2b00      	cmp	r3, #0
    849c:	bf14      	ite	ne
    849e:	2301      	movne	r3, #1
    84a0:	2300      	moveq	r3, #0
    84a2:	b2db      	uxtb	r3, r3
}
    84a4:	4618      	mov	r0, r3
    84a6:	3708      	adds	r7, #8
    84a8:	46bd      	mov	sp, r7
    84aa:	bd80      	pop	{r7, pc}
    84ac:	00007cd7 	.word	0x00007cd7

000084b0 <_usbd_ep_ack_setup>:

/** \brief ACK endpoint SETUP interrupt
 * \param[in] epn Endpoint number.
 */
static inline void _usbd_ep_ack_setup(uint8_t epn)
{
    84b0:	b580      	push	{r7, lr}
    84b2:	b082      	sub	sp, #8
    84b4:	af00      	add	r7, sp, #0
    84b6:	4603      	mov	r3, r0
    84b8:	71fb      	strb	r3, [r7, #7]
	_usbd_ep_int_ack(epn, USB_DEVICE_EPINTFLAG_RXSTP);
    84ba:	79fb      	ldrb	r3, [r7, #7]
    84bc:	2110      	movs	r1, #16
    84be:	4618      	mov	r0, r3
    84c0:	4b02      	ldr	r3, [pc, #8]	; (84cc <_usbd_ep_ack_setup+0x1c>)
    84c2:	4798      	blx	r3
}
    84c4:	bf00      	nop
    84c6:	3708      	adds	r7, #8
    84c8:	46bd      	mov	sp, r7
    84ca:	bd80      	pop	{r7, pc}
    84cc:	0000825d 	.word	0x0000825d

000084d0 <_usbd_ep_set_toggle>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] tgl Toggle value.
 */
static inline void _usbd_ep_set_toggle(uint8_t epn, uint8_t bank_n, uint8_t tgl)
{
    84d0:	b580      	push	{r7, lr}
    84d2:	b082      	sub	sp, #8
    84d4:	af00      	add	r7, sp, #0
    84d6:	4603      	mov	r3, r0
    84d8:	71fb      	strb	r3, [r7, #7]
    84da:	460b      	mov	r3, r1
    84dc:	71bb      	strb	r3, [r7, #6]
    84de:	4613      	mov	r3, r2
    84e0:	717b      	strb	r3, [r7, #5]
	if (tgl) {
    84e2:	797b      	ldrb	r3, [r7, #5]
    84e4:	2b00      	cmp	r3, #0
    84e6:	d00b      	beq.n	8500 <_usbd_ep_set_toggle+0x30>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
    84e8:	79bb      	ldrb	r3, [r7, #6]
    84ea:	2201      	movs	r2, #1
    84ec:	fa02 f303 	lsl.w	r3, r2, r3
    84f0:	b2da      	uxtb	r2, r3
    84f2:	79fb      	ldrb	r3, [r7, #7]
    84f4:	4619      	mov	r1, r3
    84f6:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    84fa:	4b09      	ldr	r3, [pc, #36]	; (8520 <_usbd_ep_set_toggle+0x50>)
    84fc:	4798      	blx	r3
	} else {
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
	}
}
    84fe:	e00a      	b.n	8516 <_usbd_ep_set_toggle+0x46>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
    8500:	79bb      	ldrb	r3, [r7, #6]
    8502:	2201      	movs	r2, #1
    8504:	fa02 f303 	lsl.w	r3, r2, r3
    8508:	b2da      	uxtb	r2, r3
    850a:	79fb      	ldrb	r3, [r7, #7]
    850c:	4619      	mov	r1, r3
    850e:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8512:	4b04      	ldr	r3, [pc, #16]	; (8524 <_usbd_ep_set_toggle+0x54>)
    8514:	4798      	blx	r3
}
    8516:	bf00      	nop
    8518:	3708      	adds	r7, #8
    851a:	46bd      	mov	sp, r7
    851c:	bd80      	pop	{r7, pc}
    851e:	bf00      	nop
    8520:	00007d61 	.word	0x00007d61
    8524:	00007db5 	.word	0x00007db5

00008528 <_usbd_ep_ack_io_cpt>:
/** \brief ACK IN/OUT complete interrupt
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 */
static inline void _usbd_ep_ack_io_cpt(uint8_t epn, uint8_t bank_n)
{
    8528:	b580      	push	{r7, lr}
    852a:	b082      	sub	sp, #8
    852c:	af00      	add	r7, sp, #0
    852e:	4603      	mov	r3, r0
    8530:	460a      	mov	r2, r1
    8532:	71fb      	strb	r3, [r7, #7]
    8534:	4613      	mov	r3, r2
    8536:	71bb      	strb	r3, [r7, #6]
	_usbd_ep_int_ack(epn, USB_DEVICE_EPINTFLAG_TRCPT0 << bank_n);
    8538:	79bb      	ldrb	r3, [r7, #6]
    853a:	2201      	movs	r2, #1
    853c:	409a      	lsls	r2, r3
    853e:	79fb      	ldrb	r3, [r7, #7]
    8540:	4611      	mov	r1, r2
    8542:	4618      	mov	r0, r3
    8544:	4b02      	ldr	r3, [pc, #8]	; (8550 <_usbd_ep_ack_io_cpt+0x28>)
    8546:	4798      	blx	r3
}
    8548:	bf00      	nop
    854a:	3708      	adds	r7, #8
    854c:	46bd      	mov	sp, r7
    854e:	bd80      	pop	{r7, pc}
    8550:	0000825d 	.word	0x0000825d

00008554 <_usbd_ep_set_buf>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] addr DMA buffer address to set.
 */
static inline void _usbd_ep_set_buf(uint8_t epn, uint8_t bank_n, uint32_t addr)
{
    8554:	b480      	push	{r7}
    8556:	b085      	sub	sp, #20
    8558:	af00      	add	r7, sp, #0
    855a:	4603      	mov	r3, r0
    855c:	603a      	str	r2, [r7, #0]
    855e:	71fb      	strb	r3, [r7, #7]
    8560:	460b      	mov	r3, r1
    8562:	71bb      	strb	r3, [r7, #6]
	UsbDeviceDescBank *bank = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    8564:	79fa      	ldrb	r2, [r7, #7]
    8566:	79bb      	ldrb	r3, [r7, #6]
    8568:	0052      	lsls	r2, r2, #1
    856a:	4413      	add	r3, r2
    856c:	011b      	lsls	r3, r3, #4
    856e:	4a06      	ldr	r2, [pc, #24]	; (8588 <_usbd_ep_set_buf+0x34>)
    8570:	4413      	add	r3, r2
    8572:	60fb      	str	r3, [r7, #12]
	bank->ADDR.reg          = addr;
    8574:	68fb      	ldr	r3, [r7, #12]
    8576:	683a      	ldr	r2, [r7, #0]
    8578:	601a      	str	r2, [r3, #0]
}
    857a:	bf00      	nop
    857c:	3714      	adds	r7, #20
    857e:	46bd      	mov	sp, r7
    8580:	f85d 7b04 	ldr.w	r7, [sp], #4
    8584:	4770      	bx	lr
    8586:	bf00      	nop
    8588:	20000f4c 	.word	0x20000f4c

0000858c <_usbd_ep_set_in_count>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] count Data count for IN.
 */
static inline void _usbd_ep_set_in_count(uint8_t epn, uint8_t bank_n, uint16_t count)
{
    858c:	b480      	push	{r7}
    858e:	b085      	sub	sp, #20
    8590:	af00      	add	r7, sp, #0
    8592:	4603      	mov	r3, r0
    8594:	71fb      	strb	r3, [r7, #7]
    8596:	460b      	mov	r3, r1
    8598:	71bb      	strb	r3, [r7, #6]
    859a:	4613      	mov	r3, r2
    859c:	80bb      	strh	r3, [r7, #4]
	UsbDeviceDescBank *bank             = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    859e:	79fa      	ldrb	r2, [r7, #7]
    85a0:	79bb      	ldrb	r3, [r7, #6]
    85a2:	0052      	lsls	r2, r2, #1
    85a4:	4413      	add	r3, r2
    85a6:	011b      	lsls	r3, r3, #4
    85a8:	4a08      	ldr	r2, [pc, #32]	; (85cc <_usbd_ep_set_in_count+0x40>)
    85aa:	4413      	add	r3, r2
    85ac:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
    85ae:	88bb      	ldrh	r3, [r7, #4]
    85b0:	f3c3 030d 	ubfx	r3, r3, #0, #14
    85b4:	b299      	uxth	r1, r3
    85b6:	68fa      	ldr	r2, [r7, #12]
    85b8:	6853      	ldr	r3, [r2, #4]
    85ba:	f361 339b 	bfi	r3, r1, #14, #14
    85be:	6053      	str	r3, [r2, #4]
}
    85c0:	bf00      	nop
    85c2:	3714      	adds	r7, #20
    85c4:	46bd      	mov	sp, r7
    85c6:	f85d 7b04 	ldr.w	r7, [sp], #4
    85ca:	4770      	bx	lr
    85cc:	20000f4c 	.word	0x20000f4c

000085d0 <_usbd_ep_set_in_size>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size for IN.
 */
static inline void _usbd_ep_set_in_size(uint8_t epn, uint8_t bank_n, uint16_t size)
{
    85d0:	b480      	push	{r7}
    85d2:	b085      	sub	sp, #20
    85d4:	af00      	add	r7, sp, #0
    85d6:	4603      	mov	r3, r0
    85d8:	71fb      	strb	r3, [r7, #7]
    85da:	460b      	mov	r3, r1
    85dc:	71bb      	strb	r3, [r7, #6]
    85de:	4613      	mov	r3, r2
    85e0:	80bb      	strh	r3, [r7, #4]
	UsbDeviceDescBank *bank      = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    85e2:	79fa      	ldrb	r2, [r7, #7]
    85e4:	79bb      	ldrb	r3, [r7, #6]
    85e6:	0052      	lsls	r2, r2, #1
    85e8:	4413      	add	r3, r2
    85ea:	011b      	lsls	r3, r3, #4
    85ec:	4a08      	ldr	r2, [pc, #32]	; (8610 <_usbd_ep_set_in_size+0x40>)
    85ee:	4413      	add	r3, r2
    85f0:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
    85f2:	88bb      	ldrh	r3, [r7, #4]
    85f4:	f3c3 030d 	ubfx	r3, r3, #0, #14
    85f8:	b299      	uxth	r1, r3
    85fa:	68fa      	ldr	r2, [r7, #12]
    85fc:	6853      	ldr	r3, [r2, #4]
    85fe:	f361 030d 	bfi	r3, r1, #0, #14
    8602:	6053      	str	r3, [r2, #4]
}
    8604:	bf00      	nop
    8606:	3714      	adds	r7, #20
    8608:	46bd      	mov	sp, r7
    860a:	f85d 7b04 	ldr.w	r7, [sp], #4
    860e:	4770      	bx	lr
    8610:	20000f4c 	.word	0x20000f4c

00008614 <_usbd_ep_set_out_count>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] count Data count for OUT.
 */
static inline void _usbd_ep_set_out_count(uint8_t epn, uint8_t bank_n, uint16_t count)
{
    8614:	b480      	push	{r7}
    8616:	b085      	sub	sp, #20
    8618:	af00      	add	r7, sp, #0
    861a:	4603      	mov	r3, r0
    861c:	71fb      	strb	r3, [r7, #7]
    861e:	460b      	mov	r3, r1
    8620:	71bb      	strb	r3, [r7, #6]
    8622:	4613      	mov	r3, r2
    8624:	80bb      	strh	r3, [r7, #4]
	UsbDeviceDescBank *bank      = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    8626:	79fa      	ldrb	r2, [r7, #7]
    8628:	79bb      	ldrb	r3, [r7, #6]
    862a:	0052      	lsls	r2, r2, #1
    862c:	4413      	add	r3, r2
    862e:	011b      	lsls	r3, r3, #4
    8630:	4a08      	ldr	r2, [pc, #32]	; (8654 <_usbd_ep_set_out_count+0x40>)
    8632:	4413      	add	r3, r2
    8634:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    8636:	88bb      	ldrh	r3, [r7, #4]
    8638:	f3c3 030d 	ubfx	r3, r3, #0, #14
    863c:	b299      	uxth	r1, r3
    863e:	68fa      	ldr	r2, [r7, #12]
    8640:	6853      	ldr	r3, [r2, #4]
    8642:	f361 030d 	bfi	r3, r1, #0, #14
    8646:	6053      	str	r3, [r2, #4]
}
    8648:	bf00      	nop
    864a:	3714      	adds	r7, #20
    864c:	46bd      	mov	sp, r7
    864e:	f85d 7b04 	ldr.w	r7, [sp], #4
    8652:	4770      	bx	lr
    8654:	20000f4c 	.word	0x20000f4c

00008658 <_usbd_ep_set_out_size>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size for OUT.
 */
static inline void _usbd_ep_set_out_size(uint8_t epn, uint8_t bank_n, uint16_t size)
{
    8658:	b480      	push	{r7}
    865a:	b085      	sub	sp, #20
    865c:	af00      	add	r7, sp, #0
    865e:	4603      	mov	r3, r0
    8660:	71fb      	strb	r3, [r7, #7]
    8662:	460b      	mov	r3, r1
    8664:	71bb      	strb	r3, [r7, #6]
    8666:	4613      	mov	r3, r2
    8668:	80bb      	strh	r3, [r7, #4]
	UsbDeviceDescBank *bank             = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    866a:	79fa      	ldrb	r2, [r7, #7]
    866c:	79bb      	ldrb	r3, [r7, #6]
    866e:	0052      	lsls	r2, r2, #1
    8670:	4413      	add	r3, r2
    8672:	011b      	lsls	r3, r3, #4
    8674:	4a08      	ldr	r2, [pc, #32]	; (8698 <_usbd_ep_set_out_size+0x40>)
    8676:	4413      	add	r3, r2
    8678:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    867a:	88bb      	ldrh	r3, [r7, #4]
    867c:	f3c3 030d 	ubfx	r3, r3, #0, #14
    8680:	b299      	uxth	r1, r3
    8682:	68fa      	ldr	r2, [r7, #12]
    8684:	6853      	ldr	r3, [r2, #4]
    8686:	f361 339b 	bfi	r3, r1, #14, #14
    868a:	6053      	str	r3, [r2, #4]
}
    868c:	bf00      	nop
    868e:	3714      	adds	r7, #20
    8690:	46bd      	mov	sp, r7
    8692:	f85d 7b04 	ldr.w	r7, [sp], #4
    8696:	4770      	bx	lr
    8698:	20000f4c 	.word	0x20000f4c

0000869c <_usbd_ep_set_in_trans>:
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size.
 * \param[in] count Initial data count.
 */
static inline void _usbd_ep_set_in_trans(uint8_t epn, uint8_t bank_n, uint32_t size, uint32_t count)
{
    869c:	b580      	push	{r7, lr}
    869e:	b084      	sub	sp, #16
    86a0:	af00      	add	r7, sp, #0
    86a2:	60ba      	str	r2, [r7, #8]
    86a4:	607b      	str	r3, [r7, #4]
    86a6:	4603      	mov	r3, r0
    86a8:	73fb      	strb	r3, [r7, #15]
    86aa:	460b      	mov	r3, r1
    86ac:	73bb      	strb	r3, [r7, #14]
	_usbd_ep_set_in_size(epn, bank_n, size);
    86ae:	68bb      	ldr	r3, [r7, #8]
    86b0:	b29a      	uxth	r2, r3
    86b2:	7bb9      	ldrb	r1, [r7, #14]
    86b4:	7bfb      	ldrb	r3, [r7, #15]
    86b6:	4618      	mov	r0, r3
    86b8:	4b06      	ldr	r3, [pc, #24]	; (86d4 <_usbd_ep_set_in_trans+0x38>)
    86ba:	4798      	blx	r3
	_usbd_ep_set_in_count(epn, bank_n, count);
    86bc:	687b      	ldr	r3, [r7, #4]
    86be:	b29a      	uxth	r2, r3
    86c0:	7bb9      	ldrb	r1, [r7, #14]
    86c2:	7bfb      	ldrb	r3, [r7, #15]
    86c4:	4618      	mov	r0, r3
    86c6:	4b04      	ldr	r3, [pc, #16]	; (86d8 <_usbd_ep_set_in_trans+0x3c>)
    86c8:	4798      	blx	r3
}
    86ca:	bf00      	nop
    86cc:	3710      	adds	r7, #16
    86ce:	46bd      	mov	sp, r7
    86d0:	bd80      	pop	{r7, pc}
    86d2:	bf00      	nop
    86d4:	000085d1 	.word	0x000085d1
    86d8:	0000858d 	.word	0x0000858d

000086dc <_usbd_ep_set_out_trans>:
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size.
 * \param[in] count Initial data count.
 */
static inline void _usbd_ep_set_out_trans(uint8_t epn, uint8_t bank_n, uint32_t size, uint32_t count)
{
    86dc:	b580      	push	{r7, lr}
    86de:	b084      	sub	sp, #16
    86e0:	af00      	add	r7, sp, #0
    86e2:	60ba      	str	r2, [r7, #8]
    86e4:	607b      	str	r3, [r7, #4]
    86e6:	4603      	mov	r3, r0
    86e8:	73fb      	strb	r3, [r7, #15]
    86ea:	460b      	mov	r3, r1
    86ec:	73bb      	strb	r3, [r7, #14]
	_usbd_ep_set_out_size(epn, bank_n, size);
    86ee:	68bb      	ldr	r3, [r7, #8]
    86f0:	b29a      	uxth	r2, r3
    86f2:	7bb9      	ldrb	r1, [r7, #14]
    86f4:	7bfb      	ldrb	r3, [r7, #15]
    86f6:	4618      	mov	r0, r3
    86f8:	4b06      	ldr	r3, [pc, #24]	; (8714 <_usbd_ep_set_out_trans+0x38>)
    86fa:	4798      	blx	r3
	_usbd_ep_set_out_count(epn, bank_n, count);
    86fc:	687b      	ldr	r3, [r7, #4]
    86fe:	b29a      	uxth	r2, r3
    8700:	7bb9      	ldrb	r1, [r7, #14]
    8702:	7bfb      	ldrb	r3, [r7, #15]
    8704:	4618      	mov	r0, r3
    8706:	4b04      	ldr	r3, [pc, #16]	; (8718 <_usbd_ep_set_out_trans+0x3c>)
    8708:	4798      	blx	r3
}
    870a:	bf00      	nop
    870c:	3710      	adds	r7, #16
    870e:	46bd      	mov	sp, r7
    8710:	bd80      	pop	{r7, pc}
    8712:	bf00      	nop
    8714:	00008659 	.word	0x00008659
    8718:	00008615 	.word	0x00008615

0000871c <_usbd_ep_clear_bank_status>:
/** \brief Clear bank status
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 */
static inline void _usbd_ep_clear_bank_status(uint8_t epn, uint8_t bank_n)
{
    871c:	b480      	push	{r7}
    871e:	b085      	sub	sp, #20
    8720:	af00      	add	r7, sp, #0
    8722:	4603      	mov	r3, r0
    8724:	460a      	mov	r2, r1
    8726:	71fb      	strb	r3, [r7, #7]
    8728:	4613      	mov	r3, r2
    872a:	71bb      	strb	r3, [r7, #6]
	UsbDeviceDescBank *bank = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    872c:	79fa      	ldrb	r2, [r7, #7]
    872e:	79bb      	ldrb	r3, [r7, #6]
    8730:	0052      	lsls	r2, r2, #1
    8732:	4413      	add	r3, r2
    8734:	011b      	lsls	r3, r3, #4
    8736:	4a06      	ldr	r2, [pc, #24]	; (8750 <_usbd_ep_clear_bank_status+0x34>)
    8738:	4413      	add	r3, r2
    873a:	60fb      	str	r3, [r7, #12]
	bank->STATUS_BK.reg     = 0;
    873c:	68fb      	ldr	r3, [r7, #12]
    873e:	2200      	movs	r2, #0
    8740:	729a      	strb	r2, [r3, #10]
}
    8742:	bf00      	nop
    8744:	3714      	adds	r7, #20
    8746:	46bd      	mov	sp, r7
    8748:	f85d 7b04 	ldr.w	r7, [sp], #4
    874c:	4770      	bx	lr
    874e:	bf00      	nop
    8750:	20000f4c 	.word	0x20000f4c

00008754 <_usbd_ep_set_in_rdy>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] rdy Set to \c true to indicate IN packet ready to TX.
 */
static inline void _usbd_ep_set_in_rdy(uint8_t epn, uint8_t bank_n, const bool rdy)
{
    8754:	b580      	push	{r7, lr}
    8756:	b082      	sub	sp, #8
    8758:	af00      	add	r7, sp, #0
    875a:	4603      	mov	r3, r0
    875c:	71fb      	strb	r3, [r7, #7]
    875e:	460b      	mov	r3, r1
    8760:	71bb      	strb	r3, [r7, #6]
    8762:	4613      	mov	r3, r2
    8764:	717b      	strb	r3, [r7, #5]
	if (rdy) {
    8766:	797b      	ldrb	r3, [r7, #5]
    8768:	2b00      	cmp	r3, #0
    876a:	d00b      	beq.n	8784 <_usbd_ep_set_in_rdy+0x30>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    876c:	79bb      	ldrb	r3, [r7, #6]
    876e:	2240      	movs	r2, #64	; 0x40
    8770:	fa02 f303 	lsl.w	r3, r2, r3
    8774:	b2da      	uxtb	r2, r3
    8776:	79fb      	ldrb	r3, [r7, #7]
    8778:	4619      	mov	r1, r3
    877a:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    877e:	4b09      	ldr	r3, [pc, #36]	; (87a4 <_usbd_ep_set_in_rdy+0x50>)
    8780:	4798      	blx	r3
	} else {
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
	}
}
    8782:	e00a      	b.n	879a <_usbd_ep_set_in_rdy+0x46>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    8784:	79bb      	ldrb	r3, [r7, #6]
    8786:	2240      	movs	r2, #64	; 0x40
    8788:	fa02 f303 	lsl.w	r3, r2, r3
    878c:	b2da      	uxtb	r2, r3
    878e:	79fb      	ldrb	r3, [r7, #7]
    8790:	4619      	mov	r1, r3
    8792:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8796:	4b04      	ldr	r3, [pc, #16]	; (87a8 <_usbd_ep_set_in_rdy+0x54>)
    8798:	4798      	blx	r3
}
    879a:	bf00      	nop
    879c:	3708      	adds	r7, #8
    879e:	46bd      	mov	sp, r7
    87a0:	bd80      	pop	{r7, pc}
    87a2:	bf00      	nop
    87a4:	00007d61 	.word	0x00007d61
    87a8:	00007db5 	.word	0x00007db5

000087ac <_usbd_ep_set_out_rdy>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] rdy Set to \c true to indicate OUT bank ready to RX.
 */
static inline void _usbd_ep_set_out_rdy(uint8_t epn, uint8_t bank_n, const bool rdy)
{
    87ac:	b580      	push	{r7, lr}
    87ae:	b082      	sub	sp, #8
    87b0:	af00      	add	r7, sp, #0
    87b2:	4603      	mov	r3, r0
    87b4:	71fb      	strb	r3, [r7, #7]
    87b6:	460b      	mov	r3, r1
    87b8:	71bb      	strb	r3, [r7, #6]
    87ba:	4613      	mov	r3, r2
    87bc:	717b      	strb	r3, [r7, #5]
	if (rdy) {
    87be:	797b      	ldrb	r3, [r7, #5]
    87c0:	2b00      	cmp	r3, #0
    87c2:	d00b      	beq.n	87dc <_usbd_ep_set_out_rdy+0x30>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    87c4:	79bb      	ldrb	r3, [r7, #6]
    87c6:	2240      	movs	r2, #64	; 0x40
    87c8:	fa02 f303 	lsl.w	r3, r2, r3
    87cc:	b2da      	uxtb	r2, r3
    87ce:	79fb      	ldrb	r3, [r7, #7]
    87d0:	4619      	mov	r1, r3
    87d2:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    87d6:	4b09      	ldr	r3, [pc, #36]	; (87fc <_usbd_ep_set_out_rdy+0x50>)
    87d8:	4798      	blx	r3
	} else {
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
	}
}
    87da:	e00a      	b.n	87f2 <_usbd_ep_set_out_rdy+0x46>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    87dc:	79bb      	ldrb	r3, [r7, #6]
    87de:	2240      	movs	r2, #64	; 0x40
    87e0:	fa02 f303 	lsl.w	r3, r2, r3
    87e4:	b2da      	uxtb	r2, r3
    87e6:	79fb      	ldrb	r3, [r7, #7]
    87e8:	4619      	mov	r1, r3
    87ea:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    87ee:	4b04      	ldr	r3, [pc, #16]	; (8800 <_usbd_ep_set_out_rdy+0x54>)
    87f0:	4798      	blx	r3
}
    87f2:	bf00      	nop
    87f4:	3708      	adds	r7, #8
    87f6:	46bd      	mov	sp, r7
    87f8:	bd80      	pop	{r7, pc}
    87fa:	bf00      	nop
    87fc:	00007db5 	.word	0x00007db5
    8800:	00007d61 	.word	0x00007d61

00008804 <_usbd_ep_pcksize_size>:
/**
 *  \brief Convert USB endpoint size to HW PCKSIZE.SIZE
 * \param[in] n Number of bytes of endpoint size.
 */
static inline uint8_t _usbd_ep_pcksize_size(uint16_t n)
{
    8804:	b480      	push	{r7}
    8806:	b083      	sub	sp, #12
    8808:	af00      	add	r7, sp, #0
    880a:	4603      	mov	r3, r0
    880c:	80fb      	strh	r3, [r7, #6]
	return (
	    (n > 512)
	        ? 7
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    880e:	88fb      	ldrh	r3, [r7, #6]
    8810:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    8814:	d820      	bhi.n	8858 <_usbd_ep_pcksize_size+0x54>
    8816:	88fb      	ldrh	r3, [r7, #6]
    8818:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    881c:	d81a      	bhi.n	8854 <_usbd_ep_pcksize_size+0x50>
    881e:	88fb      	ldrh	r3, [r7, #6]
    8820:	2b80      	cmp	r3, #128	; 0x80
    8822:	d815      	bhi.n	8850 <_usbd_ep_pcksize_size+0x4c>
    8824:	88fb      	ldrh	r3, [r7, #6]
    8826:	2b40      	cmp	r3, #64	; 0x40
    8828:	d810      	bhi.n	884c <_usbd_ep_pcksize_size+0x48>
    882a:	88fb      	ldrh	r3, [r7, #6]
    882c:	2b20      	cmp	r3, #32
    882e:	d80b      	bhi.n	8848 <_usbd_ep_pcksize_size+0x44>
    8830:	88fb      	ldrh	r3, [r7, #6]
    8832:	2b10      	cmp	r3, #16
    8834:	d806      	bhi.n	8844 <_usbd_ep_pcksize_size+0x40>
    8836:	88fb      	ldrh	r3, [r7, #6]
    8838:	2b08      	cmp	r3, #8
    883a:	bf8c      	ite	hi
    883c:	2301      	movhi	r3, #1
    883e:	2300      	movls	r3, #0
    8840:	b2db      	uxtb	r3, r3
    8842:	e00a      	b.n	885a <_usbd_ep_pcksize_size+0x56>
    8844:	2302      	movs	r3, #2
    8846:	e008      	b.n	885a <_usbd_ep_pcksize_size+0x56>
    8848:	2303      	movs	r3, #3
    884a:	e006      	b.n	885a <_usbd_ep_pcksize_size+0x56>
    884c:	2304      	movs	r3, #4
    884e:	e004      	b.n	885a <_usbd_ep_pcksize_size+0x56>
    8850:	2305      	movs	r3, #5
    8852:	e002      	b.n	885a <_usbd_ep_pcksize_size+0x56>
    8854:	2306      	movs	r3, #6
    8856:	e000      	b.n	885a <_usbd_ep_pcksize_size+0x56>
    8858:	2307      	movs	r3, #7
}
    885a:	4618      	mov	r0, r3
    885c:	370c      	adds	r7, #12
    885e:	46bd      	mov	sp, r7
    8860:	f85d 7b04 	ldr.w	r7, [sp], #4
    8864:	4770      	bx	lr
	...

00008868 <_usb_d_dev_ept>:
 *  \brief Obtain endpoint descriptor pointer
 * \param[in] epn Endpoint number.
 * \param[in] dir Endpoint direction.
 */
static inline struct _usb_d_dev_ep *_usb_d_dev_ept(uint8_t epn, bool dir)
{
    8868:	b480      	push	{r7}
    886a:	b085      	sub	sp, #20
    886c:	af00      	add	r7, sp, #0
    886e:	4603      	mov	r3, r0
    8870:	460a      	mov	r2, r1
    8872:	71fb      	strb	r3, [r7, #7]
    8874:	4613      	mov	r3, r2
    8876:	71bb      	strb	r3, [r7, #6]
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    8878:	79fb      	ldrb	r3, [r7, #7]
    887a:	2b00      	cmp	r3, #0
    887c:	d008      	beq.n	8890 <_usb_d_dev_ept+0x28>
    887e:	79bb      	ldrb	r3, [r7, #6]
    8880:	2b00      	cmp	r3, #0
    8882:	d003      	beq.n	888c <_usb_d_dev_ept+0x24>
    8884:	79fb      	ldrb	r3, [r7, #7]
    8886:	3304      	adds	r3, #4
    8888:	b2db      	uxtb	r3, r3
    888a:	e002      	b.n	8892 <_usb_d_dev_ept+0x2a>
    888c:	79fb      	ldrb	r3, [r7, #7]
    888e:	e000      	b.n	8892 <_usb_d_dev_ept+0x2a>
    8890:	2300      	movs	r3, #0
    8892:	73fb      	strb	r3, [r7, #15]
	return &dev_inst.ep[ep_index];
    8894:	7bfa      	ldrb	r2, [r7, #15]
    8896:	4613      	mov	r3, r2
    8898:	009b      	lsls	r3, r3, #2
    889a:	4413      	add	r3, r2
    889c:	009b      	lsls	r3, r3, #2
    889e:	3310      	adds	r3, #16
    88a0:	4a04      	ldr	r2, [pc, #16]	; (88b4 <_usb_d_dev_ept+0x4c>)
    88a2:	4413      	add	r3, r2
    88a4:	3304      	adds	r3, #4
}
    88a6:	4618      	mov	r0, r3
    88a8:	3714      	adds	r7, #20
    88aa:	46bd      	mov	sp, r7
    88ac:	f85d 7b04 	ldr.w	r7, [sp], #4
    88b0:	4770      	bx	lr
    88b2:	bf00      	nop
    88b4:	20000e84 	.word	0x20000e84

000088b8 <_usb_d_dev_sof>:

/**
 * \brief Handles USB SOF interrupt
 */
static inline void _usb_d_dev_sof(void)
{
    88b8:	b580      	push	{r7, lr}
    88ba:	af00      	add	r7, sp, #0
	/* ACK SOF interrupt. */
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_DEVICE_INTFLAG_SOF);
    88bc:	2104      	movs	r1, #4
    88be:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    88c2:	4b03      	ldr	r3, [pc, #12]	; (88d0 <_usb_d_dev_sof+0x18>)
    88c4:	4798      	blx	r3
	dev_inst.callbacks.sof();
    88c6:	4b03      	ldr	r3, [pc, #12]	; (88d4 <_usb_d_dev_sof+0x1c>)
    88c8:	681b      	ldr	r3, [r3, #0]
    88ca:	4798      	blx	r3
}
    88cc:	bf00      	nop
    88ce:	bd80      	pop	{r7, pc}
    88d0:	00007f2f 	.word	0x00007f2f
    88d4:	20000e84 	.word	0x20000e84

000088d8 <_usb_d_dev_lpmsusp>:

/**
 * \brief Handles USB LPM Suspend interrupt
 */
static inline void _usb_d_dev_lpmsusp(void)
{
    88d8:	b580      	push	{r7, lr}
    88da:	b084      	sub	sp, #16
    88dc:	af00      	add	r7, sp, #0
	uint8_t  i;
	uint32_t lpm_variable = 0;
    88de:	2300      	movs	r3, #0
    88e0:	60bb      	str	r3, [r7, #8]

	/* ACK LPMSUSP interrupt. */
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    88e2:	f240 2101 	movw	r1, #513	; 0x201
    88e6:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    88ea:	4b1a      	ldr	r3, [pc, #104]	; (8954 <_usb_d_dev_lpmsusp+0x7c>)
    88ec:	4798      	blx	r3
	/* Change interrupt masks */
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    88ee:	f240 2101 	movw	r1, #513	; 0x201
    88f2:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    88f6:	4b18      	ldr	r3, [pc, #96]	; (8958 <_usb_d_dev_lpmsusp+0x80>)
    88f8:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    88fa:	2170      	movs	r1, #112	; 0x70
    88fc:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8900:	4b16      	ldr	r3, [pc, #88]	; (895c <_usb_d_dev_lpmsusp+0x84>)
    8902:	4798      	blx	r3

	/* Find LPM data */
	for (i = 0; i < CONF_USB_D_MAX_EP_N; i++) {
    8904:	2300      	movs	r3, #0
    8906:	73fb      	strb	r3, [r7, #15]
    8908:	e018      	b.n	893c <_usb_d_dev_lpmsusp+0x64>
		UsbDeviceDescBank *bank = &prvt_inst.desc_table[i].DeviceDescBank[0];
    890a:	7bfb      	ldrb	r3, [r7, #15]
    890c:	015b      	lsls	r3, r3, #5
    890e:	4a14      	ldr	r2, [pc, #80]	; (8960 <_usb_d_dev_lpmsusp+0x88>)
    8910:	4413      	add	r3, r2
    8912:	607b      	str	r3, [r7, #4]
		if (bank->EXTREG.bit.SUBPID == 0x3) {
    8914:	687b      	ldr	r3, [r7, #4]
    8916:	891b      	ldrh	r3, [r3, #8]
    8918:	f3c3 0303 	ubfx	r3, r3, #0, #4
    891c:	b2db      	uxtb	r3, r3
    891e:	2b03      	cmp	r3, #3
    8920:	d109      	bne.n	8936 <_usb_d_dev_lpmsusp+0x5e>
			/* Save LPM variable */
			lpm_variable = bank->EXTREG.bit.VARIABLE;
    8922:	687b      	ldr	r3, [r7, #4]
    8924:	891b      	ldrh	r3, [r3, #8]
    8926:	f3c3 130a 	ubfx	r3, r3, #4, #11
    892a:	b29b      	uxth	r3, r3
    892c:	60bb      	str	r3, [r7, #8]
			/* Clear */
			bank->EXTREG.reg = 0;
    892e:	687b      	ldr	r3, [r7, #4]
    8930:	2200      	movs	r2, #0
    8932:	811a      	strh	r2, [r3, #8]
			break;
    8934:	e005      	b.n	8942 <_usb_d_dev_lpmsusp+0x6a>
	for (i = 0; i < CONF_USB_D_MAX_EP_N; i++) {
    8936:	7bfb      	ldrb	r3, [r7, #15]
    8938:	3301      	adds	r3, #1
    893a:	73fb      	strb	r3, [r7, #15]
    893c:	7bfb      	ldrb	r3, [r7, #15]
    893e:	2b03      	cmp	r3, #3
    8940:	d9e3      	bls.n	890a <_usb_d_dev_lpmsusp+0x32>
		}
	}
	dev_inst.callbacks.event(USB_EV_LPM_SUSPEND, lpm_variable);
    8942:	4b08      	ldr	r3, [pc, #32]	; (8964 <_usb_d_dev_lpmsusp+0x8c>)
    8944:	685b      	ldr	r3, [r3, #4]
    8946:	68b9      	ldr	r1, [r7, #8]
    8948:	2003      	movs	r0, #3
    894a:	4798      	blx	r3
}
    894c:	bf00      	nop
    894e:	3710      	adds	r7, #16
    8950:	46bd      	mov	sp, r7
    8952:	bd80      	pop	{r7, pc}
    8954:	00007f2f 	.word	0x00007f2f
    8958:	00007f85 	.word	0x00007f85
    895c:	00007f4d 	.word	0x00007f4d
    8960:	20000f4c 	.word	0x20000f4c
    8964:	20000e84 	.word	0x20000e84

00008968 <_usb_d_dev_ramerr>:

/**
 * \brief Handles USB RAM Error interrupt
 */
static inline void _usb_d_dev_ramerr(void)
{
    8968:	b580      	push	{r7, lr}
    896a:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_DEVICE_INTFLAG_RAMACER);
    896c:	2180      	movs	r1, #128	; 0x80
    896e:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8972:	4b04      	ldr	r3, [pc, #16]	; (8984 <_usb_d_dev_ramerr+0x1c>)
    8974:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_ERROR, 0);
    8976:	4b04      	ldr	r3, [pc, #16]	; (8988 <_usb_d_dev_ramerr+0x20>)
    8978:	685b      	ldr	r3, [r3, #4]
    897a:	2100      	movs	r1, #0
    897c:	2005      	movs	r0, #5
    897e:	4798      	blx	r3
}
    8980:	bf00      	nop
    8982:	bd80      	pop	{r7, pc}
    8984:	00007f2f 	.word	0x00007f2f
    8988:	20000e84 	.word	0x20000e84

0000898c <_usb_d_dev_wakeup>:

/**
 * \brief Handles USB resume/wakeup interrupts
 */
static inline void _usb_d_dev_wakeup(void)
{
    898c:	b580      	push	{r7, lr}
    898e:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    8990:	2170      	movs	r1, #112	; 0x70
    8992:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8996:	4b0b      	ldr	r3, [pc, #44]	; (89c4 <_usb_d_dev_wakeup+0x38>)
    8998:	4798      	blx	r3
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    899a:	2170      	movs	r1, #112	; 0x70
    899c:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    89a0:	4b09      	ldr	r3, [pc, #36]	; (89c8 <_usb_d_dev_wakeup+0x3c>)
    89a2:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    89a4:	f240 2101 	movw	r1, #513	; 0x201
    89a8:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    89ac:	4b07      	ldr	r3, [pc, #28]	; (89cc <_usb_d_dev_wakeup+0x40>)
    89ae:	4798      	blx	r3

	_usb_d_dev_wait_clk_rdy(CONF_USB_D_CLK_SRC);
    89b0:	2000      	movs	r0, #0
    89b2:	4b07      	ldr	r3, [pc, #28]	; (89d0 <_usb_d_dev_wakeup+0x44>)
    89b4:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_WAKEUP, 0);
    89b6:	4b07      	ldr	r3, [pc, #28]	; (89d4 <_usb_d_dev_wakeup+0x48>)
    89b8:	685b      	ldr	r3, [r3, #4]
    89ba:	2100      	movs	r1, #0
    89bc:	2002      	movs	r0, #2
    89be:	4798      	blx	r3
}
    89c0:	bf00      	nop
    89c2:	bd80      	pop	{r7, pc}
    89c4:	00007f2f 	.word	0x00007f2f
    89c8:	00007f85 	.word	0x00007f85
    89cc:	00007f4d 	.word	0x00007f4d
    89d0:	0000822d 	.word	0x0000822d
    89d4:	20000e84 	.word	0x20000e84

000089d8 <_usb_d_dev_reset>:

/**
 * \brief Handles USB signal reset interrupt
 */
static inline void _usb_d_dev_reset(void)
{
    89d8:	b580      	push	{r7, lr}
    89da:	af00      	add	r7, sp, #0
	/* EP0 will not be reseted by USB RESET, disable manually. */
	hri_usbendpoint_write_EPCFG_reg(USB, 0, 0);
    89dc:	2200      	movs	r2, #0
    89de:	2100      	movs	r1, #0
    89e0:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    89e4:	4b0d      	ldr	r3, [pc, #52]	; (8a1c <_usb_d_dev_reset+0x44>)
    89e6:	4798      	blx	r3

	hri_usbdevice_clear_INTFLAG_reg(USB, USB_DEVICE_INTFLAG_EORST);
    89e8:	2108      	movs	r1, #8
    89ea:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    89ee:	4b0c      	ldr	r3, [pc, #48]	; (8a20 <_usb_d_dev_reset+0x48>)
    89f0:	4798      	blx	r3
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    89f2:	2170      	movs	r1, #112	; 0x70
    89f4:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    89f8:	4b0a      	ldr	r3, [pc, #40]	; (8a24 <_usb_d_dev_reset+0x4c>)
    89fa:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    89fc:	f240 2101 	movw	r1, #513	; 0x201
    8a00:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8a04:	4b08      	ldr	r3, [pc, #32]	; (8a28 <_usb_d_dev_reset+0x50>)
    8a06:	4798      	blx	r3

	_usb_d_dev_reset_epts();
    8a08:	4b08      	ldr	r3, [pc, #32]	; (8a2c <_usb_d_dev_reset+0x54>)
    8a0a:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_RESET, 0);
    8a0c:	4b08      	ldr	r3, [pc, #32]	; (8a30 <_usb_d_dev_reset+0x58>)
    8a0e:	685b      	ldr	r3, [r3, #4]
    8a10:	2100      	movs	r1, #0
    8a12:	2001      	movs	r0, #1
    8a14:	4798      	blx	r3
}
    8a16:	bf00      	nop
    8a18:	bd80      	pop	{r7, pc}
    8a1a:	bf00      	nop
    8a1c:	00007ec5 	.word	0x00007ec5
    8a20:	00007f2f 	.word	0x00007f2f
    8a24:	00007f85 	.word	0x00007f85
    8a28:	00007f4d 	.word	0x00007f4d
    8a2c:	00009595 	.word	0x00009595
    8a30:	20000e84 	.word	0x20000e84

00008a34 <_usb_d_dev_suspend>:

static inline void _usb_d_dev_suspend(void)
{
    8a34:	b580      	push	{r7, lr}
    8a36:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    8a38:	f240 2101 	movw	r1, #513	; 0x201
    8a3c:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8a40:	4b09      	ldr	r3, [pc, #36]	; (8a68 <_usb_d_dev_suspend+0x34>)
    8a42:	4798      	blx	r3
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    8a44:	f240 2101 	movw	r1, #513	; 0x201
    8a48:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8a4c:	4b07      	ldr	r3, [pc, #28]	; (8a6c <_usb_d_dev_suspend+0x38>)
    8a4e:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    8a50:	2170      	movs	r1, #112	; 0x70
    8a52:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8a56:	4b06      	ldr	r3, [pc, #24]	; (8a70 <_usb_d_dev_suspend+0x3c>)
    8a58:	4798      	blx	r3

	dev_inst.callbacks.event(USB_EV_SUSPEND, 0);
    8a5a:	4b06      	ldr	r3, [pc, #24]	; (8a74 <_usb_d_dev_suspend+0x40>)
    8a5c:	685b      	ldr	r3, [r3, #4]
    8a5e:	2100      	movs	r1, #0
    8a60:	2004      	movs	r0, #4
    8a62:	4798      	blx	r3
}
    8a64:	bf00      	nop
    8a66:	bd80      	pop	{r7, pc}
    8a68:	00007f2f 	.word	0x00007f2f
    8a6c:	00007f85 	.word	0x00007f85
    8a70:	00007f4d 	.word	0x00007f4d
    8a74:	20000e84 	.word	0x20000e84

00008a78 <_usb_d_dev_handle_nep>:

/**
 * \brief Handles USB non-endpoint interrupt
 */
static inline bool _usb_d_dev_handle_nep(void)
{
    8a78:	b580      	push	{r7, lr}
    8a7a:	b082      	sub	sp, #8
    8a7c:	af00      	add	r7, sp, #0
	bool     rc    = true;
    8a7e:	2301      	movs	r3, #1
    8a80:	71fb      	strb	r3, [r7, #7]
	uint16_t flags = hri_usbdevice_read_INTFLAG_reg(USB);
    8a82:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8a86:	4b22      	ldr	r3, [pc, #136]	; (8b10 <_usb_d_dev_handle_nep+0x98>)
    8a88:	4798      	blx	r3
    8a8a:	4603      	mov	r3, r0
    8a8c:	80bb      	strh	r3, [r7, #4]
	flags &= hri_usbdevice_read_INTEN_reg(USB);
    8a8e:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8a92:	4b20      	ldr	r3, [pc, #128]	; (8b14 <_usb_d_dev_handle_nep+0x9c>)
    8a94:	4798      	blx	r3
    8a96:	4603      	mov	r3, r0
    8a98:	461a      	mov	r2, r3
    8a9a:	88bb      	ldrh	r3, [r7, #4]
    8a9c:	4013      	ands	r3, r2
    8a9e:	80bb      	strh	r3, [r7, #4]

	if (flags & USB_DEVICE_INTFLAG_SOF) {
    8aa0:	88bb      	ldrh	r3, [r7, #4]
    8aa2:	f003 0304 	and.w	r3, r3, #4
    8aa6:	2b00      	cmp	r3, #0
    8aa8:	d003      	beq.n	8ab2 <_usb_d_dev_handle_nep+0x3a>
		_usb_d_dev_sof();
    8aaa:	4b1b      	ldr	r3, [pc, #108]	; (8b18 <_usb_d_dev_handle_nep+0xa0>)
    8aac:	4798      	blx	r3
		return true;
    8aae:	2301      	movs	r3, #1
    8ab0:	e02a      	b.n	8b08 <_usb_d_dev_handle_nep+0x90>
	}
	if (flags & USB_DEVICE_INTFLAG_LPMSUSP) {
    8ab2:	88bb      	ldrh	r3, [r7, #4]
    8ab4:	f403 7300 	and.w	r3, r3, #512	; 0x200
    8ab8:	2b00      	cmp	r3, #0
    8aba:	d002      	beq.n	8ac2 <_usb_d_dev_handle_nep+0x4a>
		_usb_d_dev_lpmsusp();
    8abc:	4b17      	ldr	r3, [pc, #92]	; (8b1c <_usb_d_dev_handle_nep+0xa4>)
    8abe:	4798      	blx	r3
    8ac0:	e021      	b.n	8b06 <_usb_d_dev_handle_nep+0x8e>
	} else if (flags & USB_DEVICE_INTFLAG_RAMACER) {
    8ac2:	88bb      	ldrh	r3, [r7, #4]
    8ac4:	f003 0380 	and.w	r3, r3, #128	; 0x80
    8ac8:	2b00      	cmp	r3, #0
    8aca:	d002      	beq.n	8ad2 <_usb_d_dev_handle_nep+0x5a>
		_usb_d_dev_ramerr();
    8acc:	4b14      	ldr	r3, [pc, #80]	; (8b20 <_usb_d_dev_handle_nep+0xa8>)
    8ace:	4798      	blx	r3
    8ad0:	e019      	b.n	8b06 <_usb_d_dev_handle_nep+0x8e>
	} else if (flags & USB_D_WAKEUP_INT_FLAGS) {
    8ad2:	88bb      	ldrh	r3, [r7, #4]
    8ad4:	f003 0370 	and.w	r3, r3, #112	; 0x70
    8ad8:	2b00      	cmp	r3, #0
    8ada:	d002      	beq.n	8ae2 <_usb_d_dev_handle_nep+0x6a>
		_usb_d_dev_wakeup();
    8adc:	4b11      	ldr	r3, [pc, #68]	; (8b24 <_usb_d_dev_handle_nep+0xac>)
    8ade:	4798      	blx	r3
    8ae0:	e011      	b.n	8b06 <_usb_d_dev_handle_nep+0x8e>
	} else if (flags & USB_DEVICE_INTFLAG_EORST) {
    8ae2:	88bb      	ldrh	r3, [r7, #4]
    8ae4:	f003 0308 	and.w	r3, r3, #8
    8ae8:	2b00      	cmp	r3, #0
    8aea:	d002      	beq.n	8af2 <_usb_d_dev_handle_nep+0x7a>
		_usb_d_dev_reset();
    8aec:	4b0e      	ldr	r3, [pc, #56]	; (8b28 <_usb_d_dev_handle_nep+0xb0>)
    8aee:	4798      	blx	r3
    8af0:	e009      	b.n	8b06 <_usb_d_dev_handle_nep+0x8e>
	} else if (flags & USB_DEVICE_INTFLAG_SUSPEND) {
    8af2:	88bb      	ldrh	r3, [r7, #4]
    8af4:	f003 0301 	and.w	r3, r3, #1
    8af8:	2b00      	cmp	r3, #0
    8afa:	d002      	beq.n	8b02 <_usb_d_dev_handle_nep+0x8a>
		_usb_d_dev_suspend();
    8afc:	4b0b      	ldr	r3, [pc, #44]	; (8b2c <_usb_d_dev_handle_nep+0xb4>)
    8afe:	4798      	blx	r3
    8b00:	e001      	b.n	8b06 <_usb_d_dev_handle_nep+0x8e>
	} else {
		rc = false;
    8b02:	2300      	movs	r3, #0
    8b04:	71fb      	strb	r3, [r7, #7]
	}
	return rc;
    8b06:	79fb      	ldrb	r3, [r7, #7]
}
    8b08:	4618      	mov	r0, r3
    8b0a:	3708      	adds	r7, #8
    8b0c:	46bd      	mov	sp, r7
    8b0e:	bd80      	pop	{r7, pc}
    8b10:	00007f15 	.word	0x00007f15
    8b14:	00007f6b 	.word	0x00007f6b
    8b18:	000088b9 	.word	0x000088b9
    8b1c:	000088d9 	.word	0x000088d9
    8b20:	00008969 	.word	0x00008969
    8b24:	0000898d 	.word	0x0000898d
    8b28:	000089d9 	.word	0x000089d9
    8b2c:	00008a35 	.word	0x00008a35

00008b30 <_usb_d_dev_in_next>:
 * \brief Prepare next IN transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] isr Invoked from ISR.
 */
static void _usb_d_dev_in_next(struct _usb_d_dev_ep *ept, bool isr)
{
    8b30:	b590      	push	{r4, r7, lr}
    8b32:	b089      	sub	sp, #36	; 0x24
    8b34:	af00      	add	r7, sp, #0
    8b36:	6078      	str	r0, [r7, #4]
    8b38:	460b      	mov	r3, r1
    8b3a:	70fb      	strb	r3, [r7, #3]
	Usb *              hw          = USB;
    8b3c:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    8b40:	61bb      	str	r3, [r7, #24]
	uint8_t            epn         = USB_EP_GET_N(ept->ep);
    8b42:	687b      	ldr	r3, [r7, #4]
    8b44:	7c9b      	ldrb	r3, [r3, #18]
    8b46:	f003 030f 	and.w	r3, r3, #15
    8b4a:	75fb      	strb	r3, [r7, #23]
	UsbDeviceDescBank *bank        = &prvt_inst.desc_table[epn].DeviceDescBank[0];
    8b4c:	7dfb      	ldrb	r3, [r7, #23]
    8b4e:	015b      	lsls	r3, r3, #5
    8b50:	4a73      	ldr	r2, [pc, #460]	; (8d20 <_usb_d_dev_in_next+0x1f0>)
    8b52:	4413      	add	r3, r2
    8b54:	613b      	str	r3, [r7, #16]
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
    8b56:	78fb      	ldrb	r3, [r7, #3]
    8b58:	2b00      	cmp	r3, #0
    8b5a:	d006      	beq.n	8b6a <_usb_d_dev_in_next+0x3a>
    8b5c:	693b      	ldr	r3, [r7, #16]
    8b5e:	3310      	adds	r3, #16
    8b60:	685b      	ldr	r3, [r3, #4]
    8b62:	f3c3 030d 	ubfx	r3, r3, #0, #14
    8b66:	b29b      	uxth	r3, r3
    8b68:	e000      	b.n	8b6c <_usb_d_dev_in_next+0x3c>
    8b6a:	2300      	movs	r3, #0
    8b6c:	81fb      	strh	r3, [r7, #14]
	uint16_t           trans_next;
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    8b6e:	687b      	ldr	r3, [r7, #4]
    8b70:	8a1b      	ldrh	r3, [r3, #16]
    8b72:	f240 32ff 	movw	r2, #1023	; 0x3ff
    8b76:	4293      	cmp	r3, r2
    8b78:	d103      	bne.n	8b82 <_usb_d_dev_in_next+0x52>
    8b7a:	687b      	ldr	r3, [r7, #4]
    8b7c:	8a1b      	ldrh	r3, [r3, #16]
    8b7e:	b21b      	sxth	r3, r3
    8b80:	e004      	b.n	8b8c <_usb_d_dev_in_next+0x5c>
    8b82:	687b      	ldr	r3, [r7, #4]
    8b84:	8a1b      	ldrh	r3, [r3, #16]
    8b86:	3b01      	subs	r3, #1
    8b88:	b29b      	uxth	r3, r3
    8b8a:	b21b      	sxth	r3, r3
    8b8c:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
    8b90:	4013      	ands	r3, r2
    8b92:	b21b      	sxth	r3, r3
    8b94:	81bb      	strh	r3, [r7, #12]
	uint8_t            inten    = 0;
    8b96:	2300      	movs	r3, #0
    8b98:	777b      	strb	r3, [r7, #29]
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    8b9a:	687b      	ldr	r3, [r7, #4]
    8b9c:	7cdb      	ldrb	r3, [r3, #19]
    8b9e:	f003 0307 	and.w	r3, r3, #7
    8ba2:	b2db      	uxtb	r3, r3
    8ba4:	2b01      	cmp	r3, #1
    8ba6:	bf0c      	ite	eq
    8ba8:	2301      	moveq	r3, #1
    8baa:	2300      	movne	r3, #0
    8bac:	72fb      	strb	r3, [r7, #11]

	if (isr) {
    8bae:	78fb      	ldrb	r3, [r7, #3]
    8bb0:	2b00      	cmp	r3, #0
    8bb2:	d004      	beq.n	8bbe <_usb_d_dev_in_next+0x8e>
		_usbd_ep_ack_io_cpt(epn, 1);
    8bb4:	7dfb      	ldrb	r3, [r7, #23]
    8bb6:	2101      	movs	r1, #1
    8bb8:	4618      	mov	r0, r3
    8bba:	4b5a      	ldr	r3, [pc, #360]	; (8d24 <_usb_d_dev_in_next+0x1f4>)
    8bbc:	4798      	blx	r3
	}

	ept->trans_count += trans_count;
    8bbe:	687b      	ldr	r3, [r7, #4]
    8bc0:	689a      	ldr	r2, [r3, #8]
    8bc2:	89fb      	ldrh	r3, [r7, #14]
    8bc4:	441a      	add	r2, r3
    8bc6:	687b      	ldr	r3, [r7, #4]
    8bc8:	609a      	str	r2, [r3, #8]
	/* Send more data. */
	if (ept->trans_count < ept->trans_size) {
    8bca:	687b      	ldr	r3, [r7, #4]
    8bcc:	689a      	ldr	r2, [r3, #8]
    8bce:	687b      	ldr	r3, [r7, #4]
    8bd0:	685b      	ldr	r3, [r3, #4]
    8bd2:	429a      	cmp	r2, r3
    8bd4:	d243      	bcs.n	8c5e <_usb_d_dev_in_next+0x12e>
		trans_next = ept->trans_size - ept->trans_count;
    8bd6:	687b      	ldr	r3, [r7, #4]
    8bd8:	685b      	ldr	r3, [r3, #4]
    8bda:	b29a      	uxth	r2, r3
    8bdc:	687b      	ldr	r3, [r7, #4]
    8bde:	689b      	ldr	r3, [r3, #8]
    8be0:	b29b      	uxth	r3, r3
    8be2:	1ad3      	subs	r3, r2, r3
    8be4:	83fb      	strh	r3, [r7, #30]
		if (ept->flags.bits.use_cache) {
    8be6:	687b      	ldr	r3, [r7, #4]
    8be8:	7cdb      	ldrb	r3, [r3, #19]
    8bea:	f003 0320 	and.w	r3, r3, #32
    8bee:	b2db      	uxtb	r3, r3
    8bf0:	2b00      	cmp	r3, #0
    8bf2:	d01b      	beq.n	8c2c <_usb_d_dev_in_next+0xfc>
			if (trans_next > ept->size) {
    8bf4:	687b      	ldr	r3, [r7, #4]
    8bf6:	8a1b      	ldrh	r3, [r3, #16]
    8bf8:	8bfa      	ldrh	r2, [r7, #30]
    8bfa:	429a      	cmp	r2, r3
    8bfc:	d902      	bls.n	8c04 <_usb_d_dev_in_next+0xd4>
				trans_next = ept->size;
    8bfe:	687b      	ldr	r3, [r7, #4]
    8c00:	8a1b      	ldrh	r3, [r3, #16]
    8c02:	83fb      	strh	r3, [r7, #30]
			}
			memcpy(ept->cache, &ept->trans_buf[ept->trans_count], trans_next);
    8c04:	687b      	ldr	r3, [r7, #4]
    8c06:	68d8      	ldr	r0, [r3, #12]
    8c08:	687b      	ldr	r3, [r7, #4]
    8c0a:	681a      	ldr	r2, [r3, #0]
    8c0c:	687b      	ldr	r3, [r7, #4]
    8c0e:	689b      	ldr	r3, [r3, #8]
    8c10:	4413      	add	r3, r2
    8c12:	8bfa      	ldrh	r2, [r7, #30]
    8c14:	4619      	mov	r1, r3
    8c16:	4b44      	ldr	r3, [pc, #272]	; (8d28 <_usb_d_dev_in_next+0x1f8>)
    8c18:	4798      	blx	r3
			_usbd_ep_set_buf(epn, 1, (uint32_t)ept->cache);
    8c1a:	687b      	ldr	r3, [r7, #4]
    8c1c:	68db      	ldr	r3, [r3, #12]
    8c1e:	461a      	mov	r2, r3
    8c20:	7dfb      	ldrb	r3, [r7, #23]
    8c22:	2101      	movs	r1, #1
    8c24:	4618      	mov	r0, r3
    8c26:	4b41      	ldr	r3, [pc, #260]	; (8d2c <_usb_d_dev_in_next+0x1fc>)
    8c28:	4798      	blx	r3
    8c2a:	e011      	b.n	8c50 <_usb_d_dev_in_next+0x120>
		} else {
			if (trans_next > USB_D_DEV_TRANS_MAX) {
    8c2c:	8bfb      	ldrh	r3, [r7, #30]
    8c2e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
    8c32:	d902      	bls.n	8c3a <_usb_d_dev_in_next+0x10a>
				trans_next = USB_D_DEV_TRANS_MAX;
    8c34:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    8c38:	83fb      	strh	r3, [r7, #30]
			}
			_usbd_ep_set_buf(epn, 1, (uint32_t)&ept->trans_buf[ept->trans_count]);
    8c3a:	687b      	ldr	r3, [r7, #4]
    8c3c:	681a      	ldr	r2, [r3, #0]
    8c3e:	687b      	ldr	r3, [r7, #4]
    8c40:	689b      	ldr	r3, [r3, #8]
    8c42:	4413      	add	r3, r2
    8c44:	461a      	mov	r2, r3
    8c46:	7dfb      	ldrb	r3, [r7, #23]
    8c48:	2101      	movs	r1, #1
    8c4a:	4618      	mov	r0, r3
    8c4c:	4b37      	ldr	r3, [pc, #220]	; (8d2c <_usb_d_dev_in_next+0x1fc>)
    8c4e:	4798      	blx	r3
		}
		_usbd_ep_set_in_trans(epn, 1, trans_next, 0);
    8c50:	8bfa      	ldrh	r2, [r7, #30]
    8c52:	7df8      	ldrb	r0, [r7, #23]
    8c54:	2300      	movs	r3, #0
    8c56:	2101      	movs	r1, #1
    8c58:	4c35      	ldr	r4, [pc, #212]	; (8d30 <_usb_d_dev_in_next+0x200>)
    8c5a:	47a0      	blx	r4
		goto _in_tx_exec;
    8c5c:	e041      	b.n	8ce2 <_usb_d_dev_in_next+0x1b2>
	} else if (ept->flags.bits.need_zlp) {
    8c5e:	687b      	ldr	r3, [r7, #4]
    8c60:	7cdb      	ldrb	r3, [r3, #19]
    8c62:	f003 0310 	and.w	r3, r3, #16
    8c66:	b2db      	uxtb	r3, r3
    8c68:	2b00      	cmp	r3, #0
    8c6a:	d00b      	beq.n	8c84 <_usb_d_dev_in_next+0x154>
		ept->flags.bits.need_zlp = 0;
    8c6c:	687a      	ldr	r2, [r7, #4]
    8c6e:	7cd3      	ldrb	r3, [r2, #19]
    8c70:	f36f 1304 	bfc	r3, #4, #1
    8c74:	74d3      	strb	r3, [r2, #19]
		_usbd_ep_set_in_trans(epn, 1, 0, 0);
    8c76:	7df8      	ldrb	r0, [r7, #23]
    8c78:	2300      	movs	r3, #0
    8c7a:	2200      	movs	r2, #0
    8c7c:	2101      	movs	r1, #1
    8c7e:	4c2c      	ldr	r4, [pc, #176]	; (8d30 <_usb_d_dev_in_next+0x200>)
    8c80:	47a0      	blx	r4
		goto _in_tx_exec;
    8c82:	e02e      	b.n	8ce2 <_usb_d_dev_in_next+0x1b2>
	}
	/* Complete. */
	if (is_ctrl) {
    8c84:	7afb      	ldrb	r3, [r7, #11]
    8c86:	2b00      	cmp	r3, #0
    8c88:	d006      	beq.n	8c98 <_usb_d_dev_in_next+0x168>
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK1_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRCPT0);
    8c8a:	7dfb      	ldrb	r3, [r7, #23]
    8c8c:	224b      	movs	r2, #75	; 0x4b
    8c8e:	4619      	mov	r1, r3
    8c90:	69b8      	ldr	r0, [r7, #24]
    8c92:	4b28      	ldr	r3, [pc, #160]	; (8d34 <_usb_d_dev_in_next+0x204>)
    8c94:	4798      	blx	r3
    8c96:	e005      	b.n	8ca4 <_usb_d_dev_in_next+0x174>
	} else {
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK1_INT_FLAGS);
    8c98:	7dfb      	ldrb	r3, [r7, #23]
    8c9a:	224a      	movs	r2, #74	; 0x4a
    8c9c:	4619      	mov	r1, r3
    8c9e:	69b8      	ldr	r0, [r7, #24]
    8ca0:	4b24      	ldr	r3, [pc, #144]	; (8d34 <_usb_d_dev_in_next+0x204>)
    8ca2:	4798      	blx	r3
	}

	/* No ping-pong, so ask more data without background transfer. */
	if (last_pkt == ept->size) {
    8ca4:	687b      	ldr	r3, [r7, #4]
    8ca6:	8a1b      	ldrh	r3, [r3, #16]
    8ca8:	89ba      	ldrh	r2, [r7, #12]
    8caa:	429a      	cmp	r2, r3
    8cac:	d114      	bne.n	8cd8 <_usb_d_dev_in_next+0x1a8>
		ept->flags.bits.is_busy = 0;
    8cae:	687a      	ldr	r2, [r7, #4]
    8cb0:	7cd3      	ldrb	r3, [r2, #19]
    8cb2:	f36f 1386 	bfc	r3, #6, #1
    8cb6:	74d3      	strb	r3, [r2, #19]
		if (dev_inst.ep_callbacks.more(ept->ep, ept->trans_count)) {
    8cb8:	4b1f      	ldr	r3, [pc, #124]	; (8d38 <_usb_d_dev_in_next+0x208>)
    8cba:	68db      	ldr	r3, [r3, #12]
    8cbc:	687a      	ldr	r2, [r7, #4]
    8cbe:	7c90      	ldrb	r0, [r2, #18]
    8cc0:	687a      	ldr	r2, [r7, #4]
    8cc2:	6892      	ldr	r2, [r2, #8]
    8cc4:	4611      	mov	r1, r2
    8cc6:	4798      	blx	r3
    8cc8:	4603      	mov	r3, r0
    8cca:	2b00      	cmp	r3, #0
    8ccc:	d124      	bne.n	8d18 <_usb_d_dev_in_next+0x1e8>
			/* More data added. */
			return;
		}
		ept->flags.bits.is_busy = 1;
    8cce:	687a      	ldr	r2, [r7, #4]
    8cd0:	7cd3      	ldrb	r3, [r2, #19]
    8cd2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    8cd6:	74d3      	strb	r3, [r2, #19]
	}
	/* Finish normally. */
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    8cd8:	2100      	movs	r1, #0
    8cda:	6878      	ldr	r0, [r7, #4]
    8cdc:	4b17      	ldr	r3, [pc, #92]	; (8d3c <_usb_d_dev_in_next+0x20c>)
    8cde:	4798      	blx	r3
	return;
    8ce0:	e01b      	b.n	8d1a <_usb_d_dev_in_next+0x1ea>

_in_tx_exec:
	if (!isr) {
    8ce2:	78fb      	ldrb	r3, [r7, #3]
    8ce4:	f083 0301 	eor.w	r3, r3, #1
    8ce8:	b2db      	uxtb	r3, r3
    8cea:	2b00      	cmp	r3, #0
    8cec:	d00d      	beq.n	8d0a <_usb_d_dev_in_next+0x1da>
		if (is_ctrl) {
    8cee:	7afb      	ldrb	r3, [r7, #11]
    8cf0:	2b00      	cmp	r3, #0
    8cf2:	d002      	beq.n	8cfa <_usb_d_dev_in_next+0x1ca>
			/* Control endpoint: SETUP or OUT will abort IN transaction.
			 * SETUP: terminate the IN without any notification. Trigger
			 *        SETUP callback.
			 * OUT NAK: terminate IN.
			 */
			inten = USB_D_BANK1_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL0;
    8cf4:	234e      	movs	r3, #78	; 0x4e
    8cf6:	777b      	strb	r3, [r7, #29]
    8cf8:	e001      	b.n	8cfe <_usb_d_dev_in_next+0x1ce>
		} else {
			/* Initialize normal IN transaction. */
			inten = USB_D_BANK1_INT_FLAGS;
    8cfa:	234a      	movs	r3, #74	; 0x4a
    8cfc:	777b      	strb	r3, [r7, #29]
		}
		hri_usbendpoint_set_EPINTEN_reg(hw, epn, inten);
    8cfe:	7f7a      	ldrb	r2, [r7, #29]
    8d00:	7dfb      	ldrb	r3, [r7, #23]
    8d02:	4619      	mov	r1, r3
    8d04:	69b8      	ldr	r0, [r7, #24]
    8d06:	4b0e      	ldr	r3, [pc, #56]	; (8d40 <_usb_d_dev_in_next+0x210>)
    8d08:	4798      	blx	r3
	}
	_usbd_ep_set_in_rdy(epn, 1, true);
    8d0a:	7dfb      	ldrb	r3, [r7, #23]
    8d0c:	2201      	movs	r2, #1
    8d0e:	2101      	movs	r1, #1
    8d10:	4618      	mov	r0, r3
    8d12:	4b0c      	ldr	r3, [pc, #48]	; (8d44 <_usb_d_dev_in_next+0x214>)
    8d14:	4798      	blx	r3
    8d16:	e000      	b.n	8d1a <_usb_d_dev_in_next+0x1ea>
			return;
    8d18:	bf00      	nop
}
    8d1a:	3724      	adds	r7, #36	; 0x24
    8d1c:	46bd      	mov	sp, r7
    8d1e:	bd90      	pop	{r4, r7, pc}
    8d20:	20000f4c 	.word	0x20000f4c
    8d24:	00008529 	.word	0x00008529
    8d28:	00012b29 	.word	0x00012b29
    8d2c:	00008555 	.word	0x00008555
    8d30:	0000869d 	.word	0x0000869d
    8d34:	00007e35 	.word	0x00007e35
    8d38:	20000e84 	.word	0x20000e84
    8d3c:	00009e59 	.word	0x00009e59
    8d40:	00007e09 	.word	0x00007e09
    8d44:	00008755 	.word	0x00008755

00008d48 <_usb_d_dev_out_next>:
 * \brief Prepare next OUT transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] isr Invoked from ISR.
 */
static void _usb_d_dev_out_next(struct _usb_d_dev_ep *ept, bool isr)
{
    8d48:	b590      	push	{r4, r7, lr}
    8d4a:	b08b      	sub	sp, #44	; 0x2c
    8d4c:	af00      	add	r7, sp, #0
    8d4e:	6078      	str	r0, [r7, #4]
    8d50:	460b      	mov	r3, r1
    8d52:	70fb      	strb	r3, [r7, #3]
	Usb *              hw         = USB;
    8d54:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    8d58:	623b      	str	r3, [r7, #32]
	uint8_t            epn        = USB_EP_GET_N(ept->ep);
    8d5a:	687b      	ldr	r3, [r7, #4]
    8d5c:	7c9b      	ldrb	r3, [r3, #18]
    8d5e:	f003 030f 	and.w	r3, r3, #15
    8d62:	77fb      	strb	r3, [r7, #31]
	UsbDeviceDescBank *bank       = &prvt_inst.desc_table[epn].DeviceDescBank[0];
    8d64:	7ffb      	ldrb	r3, [r7, #31]
    8d66:	015b      	lsls	r3, r3, #5
    8d68:	4a94      	ldr	r2, [pc, #592]	; (8fbc <_usb_d_dev_out_next+0x274>)
    8d6a:	4413      	add	r3, r2
    8d6c:	61bb      	str	r3, [r7, #24]
	uint16_t           trans_size = isr ? bank->PCKSIZE.bit.MULTI_PACKET_SIZE : 0;
    8d6e:	78fb      	ldrb	r3, [r7, #3]
    8d70:	2b00      	cmp	r3, #0
    8d72:	d005      	beq.n	8d80 <_usb_d_dev_out_next+0x38>
    8d74:	69bb      	ldr	r3, [r7, #24]
    8d76:	685b      	ldr	r3, [r3, #4]
    8d78:	f3c3 338d 	ubfx	r3, r3, #14, #14
    8d7c:	b29b      	uxth	r3, r3
    8d7e:	e000      	b.n	8d82 <_usb_d_dev_out_next+0x3a>
    8d80:	2300      	movs	r3, #0
    8d82:	82fb      	strh	r3, [r7, #22]
	uint16_t           last_trans = isr ? bank->PCKSIZE.bit.BYTE_COUNT : 0;
    8d84:	78fb      	ldrb	r3, [r7, #3]
    8d86:	2b00      	cmp	r3, #0
    8d88:	d005      	beq.n	8d96 <_usb_d_dev_out_next+0x4e>
    8d8a:	69bb      	ldr	r3, [r7, #24]
    8d8c:	685b      	ldr	r3, [r3, #4]
    8d8e:	f3c3 030d 	ubfx	r3, r3, #0, #14
    8d92:	b29b      	uxth	r3, r3
    8d94:	e000      	b.n	8d98 <_usb_d_dev_out_next+0x50>
    8d96:	2300      	movs	r3, #0
    8d98:	82bb      	strh	r3, [r7, #20]
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
    8d9a:	687b      	ldr	r3, [r7, #4]
    8d9c:	8a1b      	ldrh	r3, [r3, #16]
    8d9e:	f240 32ff 	movw	r2, #1023	; 0x3ff
    8da2:	4293      	cmp	r3, r2
    8da4:	d004      	beq.n	8db0 <_usb_d_dev_out_next+0x68>
    8da6:	687b      	ldr	r3, [r7, #4]
    8da8:	8a1b      	ldrh	r3, [r3, #16]
    8daa:	3b01      	subs	r3, #1
    8dac:	b29b      	uxth	r3, r3
    8dae:	e001      	b.n	8db4 <_usb_d_dev_out_next+0x6c>
    8db0:	f240 33ff 	movw	r3, #1023	; 0x3ff
    8db4:	827b      	strh	r3, [r7, #18]
	uint16_t           last_pkt   = last_trans & size_mask;
    8db6:	8aba      	ldrh	r2, [r7, #20]
    8db8:	8a7b      	ldrh	r3, [r7, #18]
    8dba:	4013      	ands	r3, r2
    8dbc:	823b      	strh	r3, [r7, #16]
	uint16_t           trans_next;
	uint8_t            inten;
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    8dbe:	687b      	ldr	r3, [r7, #4]
    8dc0:	7cdb      	ldrb	r3, [r3, #19]
    8dc2:	f003 0307 	and.w	r3, r3, #7
    8dc6:	b2db      	uxtb	r3, r3
    8dc8:	2b01      	cmp	r3, #1
    8dca:	bf0c      	ite	eq
    8dcc:	2301      	moveq	r3, #1
    8dce:	2300      	movne	r3, #0
    8dd0:	73fb      	strb	r3, [r7, #15]

	if (isr) {
    8dd2:	78fb      	ldrb	r3, [r7, #3]
    8dd4:	2b00      	cmp	r3, #0
    8dd6:	d004      	beq.n	8de2 <_usb_d_dev_out_next+0x9a>
		_usbd_ep_ack_io_cpt(epn, 0);
    8dd8:	7ffb      	ldrb	r3, [r7, #31]
    8dda:	2100      	movs	r1, #0
    8ddc:	4618      	mov	r0, r3
    8dde:	4b78      	ldr	r3, [pc, #480]	; (8fc0 <_usb_d_dev_out_next+0x278>)
    8de0:	4798      	blx	r3
	}

	/* If cache is used, copy data to buffer. */
	if (ept->flags.bits.use_cache && ept->trans_size) {
    8de2:	687b      	ldr	r3, [r7, #4]
    8de4:	7cdb      	ldrb	r3, [r3, #19]
    8de6:	f003 0320 	and.w	r3, r3, #32
    8dea:	b2db      	uxtb	r3, r3
    8dec:	2b00      	cmp	r3, #0
    8dee:	d01c      	beq.n	8e2a <_usb_d_dev_out_next+0xe2>
    8df0:	687b      	ldr	r3, [r7, #4]
    8df2:	685b      	ldr	r3, [r3, #4]
    8df4:	2b00      	cmp	r3, #0
    8df6:	d018      	beq.n	8e2a <_usb_d_dev_out_next+0xe2>
		uint16_t buf_remain = ept->trans_size - ept->trans_count;
    8df8:	687b      	ldr	r3, [r7, #4]
    8dfa:	685b      	ldr	r3, [r3, #4]
    8dfc:	b29a      	uxth	r2, r3
    8dfe:	687b      	ldr	r3, [r7, #4]
    8e00:	689b      	ldr	r3, [r3, #8]
    8e02:	b29b      	uxth	r3, r3
    8e04:	1ad3      	subs	r3, r2, r3
    8e06:	81bb      	strh	r3, [r7, #12]
		memcpy(&ept->trans_buf[ept->trans_count], ept->cache, (buf_remain > last_pkt) ? last_pkt : buf_remain);
    8e08:	687b      	ldr	r3, [r7, #4]
    8e0a:	681a      	ldr	r2, [r3, #0]
    8e0c:	687b      	ldr	r3, [r7, #4]
    8e0e:	689b      	ldr	r3, [r3, #8]
    8e10:	18d0      	adds	r0, r2, r3
    8e12:	687b      	ldr	r3, [r7, #4]
    8e14:	68d9      	ldr	r1, [r3, #12]
    8e16:	89ba      	ldrh	r2, [r7, #12]
    8e18:	8a3b      	ldrh	r3, [r7, #16]
    8e1a:	429a      	cmp	r2, r3
    8e1c:	d901      	bls.n	8e22 <_usb_d_dev_out_next+0xda>
    8e1e:	8a3b      	ldrh	r3, [r7, #16]
    8e20:	e000      	b.n	8e24 <_usb_d_dev_out_next+0xdc>
    8e22:	89bb      	ldrh	r3, [r7, #12]
    8e24:	461a      	mov	r2, r3
    8e26:	4b67      	ldr	r3, [pc, #412]	; (8fc4 <_usb_d_dev_out_next+0x27c>)
    8e28:	4798      	blx	r3
	}

	/* Force wait ZLP */
	if (ept->trans_size == 0 && ept->flags.bits.need_zlp) {
    8e2a:	687b      	ldr	r3, [r7, #4]
    8e2c:	685b      	ldr	r3, [r3, #4]
    8e2e:	2b00      	cmp	r3, #0
    8e30:	d121      	bne.n	8e76 <_usb_d_dev_out_next+0x12e>
    8e32:	687b      	ldr	r3, [r7, #4]
    8e34:	7cdb      	ldrb	r3, [r3, #19]
    8e36:	f003 0310 	and.w	r3, r3, #16
    8e3a:	b2db      	uxtb	r3, r3
    8e3c:	2b00      	cmp	r3, #0
    8e3e:	d01a      	beq.n	8e76 <_usb_d_dev_out_next+0x12e>
		ept->flags.bits.need_zlp  = 0;
    8e40:	687a      	ldr	r2, [r7, #4]
    8e42:	7cd3      	ldrb	r3, [r2, #19]
    8e44:	f36f 1304 	bfc	r3, #4, #1
    8e48:	74d3      	strb	r3, [r2, #19]
		ept->flags.bits.use_cache = 1;
    8e4a:	687a      	ldr	r2, [r7, #4]
    8e4c:	7cd3      	ldrb	r3, [r2, #19]
    8e4e:	f043 0320 	orr.w	r3, r3, #32
    8e52:	74d3      	strb	r3, [r2, #19]
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    8e54:	687b      	ldr	r3, [r7, #4]
    8e56:	68db      	ldr	r3, [r3, #12]
    8e58:	461a      	mov	r2, r3
    8e5a:	7ffb      	ldrb	r3, [r7, #31]
    8e5c:	2100      	movs	r1, #0
    8e5e:	4618      	mov	r0, r3
    8e60:	4b59      	ldr	r3, [pc, #356]	; (8fc8 <_usb_d_dev_out_next+0x280>)
    8e62:	4798      	blx	r3
		_usbd_ep_set_out_trans(epn, 0, ept->size, 0);
    8e64:	687b      	ldr	r3, [r7, #4]
    8e66:	8a1b      	ldrh	r3, [r3, #16]
    8e68:	461a      	mov	r2, r3
    8e6a:	7ff8      	ldrb	r0, [r7, #31]
    8e6c:	2300      	movs	r3, #0
    8e6e:	2100      	movs	r1, #0
    8e70:	4c56      	ldr	r4, [pc, #344]	; (8fcc <_usb_d_dev_out_next+0x284>)
    8e72:	47a0      	blx	r4
		goto _out_rx_exec;
    8e74:	e090      	b.n	8f98 <_usb_d_dev_out_next+0x250>
	} else if (isr && last_pkt < ept->size) {
    8e76:	78fb      	ldrb	r3, [r7, #3]
    8e78:	2b00      	cmp	r3, #0
    8e7a:	d010      	beq.n	8e9e <_usb_d_dev_out_next+0x156>
    8e7c:	687b      	ldr	r3, [r7, #4]
    8e7e:	8a1b      	ldrh	r3, [r3, #16]
    8e80:	8a3a      	ldrh	r2, [r7, #16]
    8e82:	429a      	cmp	r2, r3
    8e84:	d20b      	bcs.n	8e9e <_usb_d_dev_out_next+0x156>
		/* Short packet. */
		ept->flags.bits.need_zlp = 0;
    8e86:	687a      	ldr	r2, [r7, #4]
    8e88:	7cd3      	ldrb	r3, [r2, #19]
    8e8a:	f36f 1304 	bfc	r3, #4, #1
    8e8e:	74d3      	strb	r3, [r2, #19]
		ept->trans_count += last_trans;
    8e90:	687b      	ldr	r3, [r7, #4]
    8e92:	689a      	ldr	r2, [r3, #8]
    8e94:	8abb      	ldrh	r3, [r7, #20]
    8e96:	441a      	add	r2, r3
    8e98:	687b      	ldr	r3, [r7, #4]
    8e9a:	609a      	str	r2, [r3, #8]
    8e9c:	e05c      	b.n	8f58 <_usb_d_dev_out_next+0x210>
	} else {
		/* Full packets. */
		ept->trans_count += trans_size;
    8e9e:	687b      	ldr	r3, [r7, #4]
    8ea0:	689a      	ldr	r2, [r3, #8]
    8ea2:	8afb      	ldrh	r3, [r7, #22]
    8ea4:	441a      	add	r2, r3
    8ea6:	687b      	ldr	r3, [r7, #4]
    8ea8:	609a      	str	r2, [r3, #8]

		/* Wait more data */
		if (ept->trans_count < ept->trans_size) {
    8eaa:	687b      	ldr	r3, [r7, #4]
    8eac:	689a      	ldr	r2, [r3, #8]
    8eae:	687b      	ldr	r3, [r7, #4]
    8eb0:	685b      	ldr	r3, [r3, #4]
    8eb2:	429a      	cmp	r2, r3
    8eb4:	d250      	bcs.n	8f58 <_usb_d_dev_out_next+0x210>
			/* Continue OUT */
			trans_next = ept->trans_size - ept->trans_count;
    8eb6:	687b      	ldr	r3, [r7, #4]
    8eb8:	685b      	ldr	r3, [r3, #4]
    8eba:	b29a      	uxth	r2, r3
    8ebc:	687b      	ldr	r3, [r7, #4]
    8ebe:	689b      	ldr	r3, [r3, #8]
    8ec0:	b29b      	uxth	r3, r3
    8ec2:	1ad3      	subs	r3, r2, r3
    8ec4:	84fb      	strh	r3, [r7, #38]	; 0x26
			if (ept->flags.bits.use_cache) {
    8ec6:	687b      	ldr	r3, [r7, #4]
    8ec8:	7cdb      	ldrb	r3, [r3, #19]
    8eca:	f003 0320 	and.w	r3, r3, #32
    8ece:	b2db      	uxtb	r3, r3
    8ed0:	2b00      	cmp	r3, #0
    8ed2:	d010      	beq.n	8ef6 <_usb_d_dev_out_next+0x1ae>
				/* Expect single packet each time. */
				if (trans_next > ept->size) {
    8ed4:	687b      	ldr	r3, [r7, #4]
    8ed6:	8a1b      	ldrh	r3, [r3, #16]
    8ed8:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    8eda:	429a      	cmp	r2, r3
    8edc:	d902      	bls.n	8ee4 <_usb_d_dev_out_next+0x19c>
					trans_next = ept->size;
    8ede:	687b      	ldr	r3, [r7, #4]
    8ee0:	8a1b      	ldrh	r3, [r3, #16]
    8ee2:	84fb      	strh	r3, [r7, #38]	; 0x26
				}
				_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    8ee4:	687b      	ldr	r3, [r7, #4]
    8ee6:	68db      	ldr	r3, [r3, #12]
    8ee8:	461a      	mov	r2, r3
    8eea:	7ffb      	ldrb	r3, [r7, #31]
    8eec:	2100      	movs	r1, #0
    8eee:	4618      	mov	r0, r3
    8ef0:	4b35      	ldr	r3, [pc, #212]	; (8fc8 <_usb_d_dev_out_next+0x280>)
    8ef2:	4798      	blx	r3
    8ef4:	e029      	b.n	8f4a <_usb_d_dev_out_next+0x202>
			} else {
				/* Multiple packets each time. */
				if (trans_next > ept->size) {
    8ef6:	687b      	ldr	r3, [r7, #4]
    8ef8:	8a1b      	ldrh	r3, [r3, #16]
    8efa:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    8efc:	429a      	cmp	r2, r3
    8efe:	d90f      	bls.n	8f20 <_usb_d_dev_out_next+0x1d8>
					if (trans_next > USB_D_DEV_TRANS_MAX) {
    8f00:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
    8f02:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
    8f06:	d903      	bls.n	8f10 <_usb_d_dev_out_next+0x1c8>
						trans_next = USB_D_DEV_TRANS_MAX;
    8f08:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    8f0c:	84fb      	strh	r3, [r7, #38]	; 0x26
    8f0e:	e011      	b.n	8f34 <_usb_d_dev_out_next+0x1ec>
					} else {
						/* Must expect multiple of ep size. */
						trans_next -= trans_next & size_mask;
    8f10:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    8f12:	8a7b      	ldrh	r3, [r7, #18]
    8f14:	4013      	ands	r3, r2
    8f16:	b29b      	uxth	r3, r3
    8f18:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    8f1a:	1ad3      	subs	r3, r2, r3
    8f1c:	84fb      	strh	r3, [r7, #38]	; 0x26
    8f1e:	e009      	b.n	8f34 <_usb_d_dev_out_next+0x1ec>
					}
				} else if (trans_next < ept->size) {
    8f20:	687b      	ldr	r3, [r7, #4]
    8f22:	8a1b      	ldrh	r3, [r3, #16]
    8f24:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    8f26:	429a      	cmp	r2, r3
    8f28:	d204      	bcs.n	8f34 <_usb_d_dev_out_next+0x1ec>
					/* Last un-aligned packet should be cached. */
					ept->flags.bits.use_cache = 1;
    8f2a:	687a      	ldr	r2, [r7, #4]
    8f2c:	7cd3      	ldrb	r3, [r2, #19]
    8f2e:	f043 0320 	orr.w	r3, r3, #32
    8f32:	74d3      	strb	r3, [r2, #19]
				}
				_usbd_ep_set_buf(epn, 0, (uint32_t)&ept->trans_buf[ept->trans_count]);
    8f34:	687b      	ldr	r3, [r7, #4]
    8f36:	681a      	ldr	r2, [r3, #0]
    8f38:	687b      	ldr	r3, [r7, #4]
    8f3a:	689b      	ldr	r3, [r3, #8]
    8f3c:	4413      	add	r3, r2
    8f3e:	461a      	mov	r2, r3
    8f40:	7ffb      	ldrb	r3, [r7, #31]
    8f42:	2100      	movs	r1, #0
    8f44:	4618      	mov	r0, r3
    8f46:	4b20      	ldr	r3, [pc, #128]	; (8fc8 <_usb_d_dev_out_next+0x280>)
    8f48:	4798      	blx	r3
			}
			_usbd_ep_set_out_trans(epn, 0, trans_next, 0);
    8f4a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    8f4c:	7ff8      	ldrb	r0, [r7, #31]
    8f4e:	2300      	movs	r3, #0
    8f50:	2100      	movs	r1, #0
    8f52:	4c1e      	ldr	r4, [pc, #120]	; (8fcc <_usb_d_dev_out_next+0x284>)
    8f54:	47a0      	blx	r4
			goto _out_rx_exec;
    8f56:	e01f      	b.n	8f98 <_usb_d_dev_out_next+0x250>
		}
	}
	/* Finish normally. */
	if (is_ctrl) {
    8f58:	7bfb      	ldrb	r3, [r7, #15]
    8f5a:	2b00      	cmp	r3, #0
    8f5c:	d006      	beq.n	8f6c <_usb_d_dev_out_next+0x224>
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK0_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL1);
    8f5e:	7ffb      	ldrb	r3, [r7, #31]
    8f60:	222d      	movs	r2, #45	; 0x2d
    8f62:	4619      	mov	r1, r3
    8f64:	6a38      	ldr	r0, [r7, #32]
    8f66:	4b1a      	ldr	r3, [pc, #104]	; (8fd0 <_usb_d_dev_out_next+0x288>)
    8f68:	4798      	blx	r3
    8f6a:	e005      	b.n	8f78 <_usb_d_dev_out_next+0x230>
	} else {
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK0_INT_FLAGS);
    8f6c:	7ffb      	ldrb	r3, [r7, #31]
    8f6e:	2225      	movs	r2, #37	; 0x25
    8f70:	4619      	mov	r1, r3
    8f72:	6a38      	ldr	r0, [r7, #32]
    8f74:	4b16      	ldr	r3, [pc, #88]	; (8fd0 <_usb_d_dev_out_next+0x288>)
    8f76:	4798      	blx	r3
	}
	/* Use ep0 out cache for next setup packets */
	if (0 == epn) {
    8f78:	7ffb      	ldrb	r3, [r7, #31]
    8f7a:	2b00      	cmp	r3, #0
    8f7c:	d107      	bne.n	8f8e <_usb_d_dev_out_next+0x246>
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    8f7e:	687b      	ldr	r3, [r7, #4]
    8f80:	68db      	ldr	r3, [r3, #12]
    8f82:	461a      	mov	r2, r3
    8f84:	7ffb      	ldrb	r3, [r7, #31]
    8f86:	2100      	movs	r1, #0
    8f88:	4618      	mov	r0, r3
    8f8a:	4b0f      	ldr	r3, [pc, #60]	; (8fc8 <_usb_d_dev_out_next+0x280>)
    8f8c:	4798      	blx	r3
	}
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    8f8e:	2100      	movs	r1, #0
    8f90:	6878      	ldr	r0, [r7, #4]
    8f92:	4b10      	ldr	r3, [pc, #64]	; (8fd4 <_usb_d_dev_out_next+0x28c>)
    8f94:	4798      	blx	r3
	return;
    8f96:	e031      	b.n	8ffc <_usb_d_dev_out_next+0x2b4>

_out_rx_exec:
	if (!isr) {
    8f98:	78fb      	ldrb	r3, [r7, #3]
    8f9a:	f083 0301 	eor.w	r3, r3, #1
    8f9e:	b2db      	uxtb	r3, r3
    8fa0:	2b00      	cmp	r3, #0
    8fa2:	d025      	beq.n	8ff0 <_usb_d_dev_out_next+0x2a8>
		if (is_ctrl) {
    8fa4:	7bfb      	ldrb	r3, [r7, #15]
    8fa6:	2b00      	cmp	r3, #0
    8fa8:	d018      	beq.n	8fdc <_usb_d_dev_out_next+0x294>
			 *                   OUT transactions.
			 * SETUP: terminate OUT without any notification.
			 *        Trigger SETUP notification.
			 * IN NAK: finish OUT normally. Notify data done.
			 */
			_usbd_ep_clear_bank_status(epn, 1);
    8faa:	7ffb      	ldrb	r3, [r7, #31]
    8fac:	2101      	movs	r1, #1
    8fae:	4618      	mov	r0, r3
    8fb0:	4b09      	ldr	r3, [pc, #36]	; (8fd8 <_usb_d_dev_out_next+0x290>)
    8fb2:	4798      	blx	r3
			/* Detect OUT, SETUP, NAK IN */
			inten = USB_D_BANK0_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL1;
    8fb4:	232d      	movs	r3, #45	; 0x2d
    8fb6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    8fba:	e012      	b.n	8fe2 <_usb_d_dev_out_next+0x29a>
    8fbc:	20000f4c 	.word	0x20000f4c
    8fc0:	00008529 	.word	0x00008529
    8fc4:	00012b29 	.word	0x00012b29
    8fc8:	00008555 	.word	0x00008555
    8fcc:	000086dd 	.word	0x000086dd
    8fd0:	00007e35 	.word	0x00007e35
    8fd4:	00009e59 	.word	0x00009e59
    8fd8:	0000871d 	.word	0x0000871d
		} else {
			/* Initialize normal OUT transaction. */
			inten = USB_D_BANK0_INT_FLAGS;
    8fdc:	2325      	movs	r3, #37	; 0x25
    8fde:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
		}
		hri_usbendpoint_set_EPINTEN_reg(hw, epn, inten);
    8fe2:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
    8fe6:	7ffb      	ldrb	r3, [r7, #31]
    8fe8:	4619      	mov	r1, r3
    8fea:	6a38      	ldr	r0, [r7, #32]
    8fec:	4b05      	ldr	r3, [pc, #20]	; (9004 <_usb_d_dev_out_next+0x2bc>)
    8fee:	4798      	blx	r3
	}
	_usbd_ep_set_out_rdy(epn, 0, true);
    8ff0:	7ffb      	ldrb	r3, [r7, #31]
    8ff2:	2201      	movs	r2, #1
    8ff4:	2100      	movs	r1, #0
    8ff6:	4618      	mov	r0, r3
    8ff8:	4b03      	ldr	r3, [pc, #12]	; (9008 <_usb_d_dev_out_next+0x2c0>)
    8ffa:	4798      	blx	r3
}
    8ffc:	372c      	adds	r7, #44	; 0x2c
    8ffe:	46bd      	mov	sp, r7
    9000:	bd90      	pop	{r4, r7, pc}
    9002:	bf00      	nop
    9004:	00007e09 	.word	0x00007e09
    9008:	000087ad 	.word	0x000087ad

0000900c <_usb_d_dev_handle_setup>:
/**
 * \brief Handles setup received interrupt
 * \param[in] ept Pointer to endpoint information.
 */
static void _usb_d_dev_handle_setup(struct _usb_d_dev_ep *ept)
{
    900c:	b580      	push	{r7, lr}
    900e:	b084      	sub	sp, #16
    9010:	af00      	add	r7, sp, #0
    9012:	6078      	str	r0, [r7, #4]
	uint8_t epn     = USB_EP_GET_N(ept->ep);
    9014:	687b      	ldr	r3, [r7, #4]
    9016:	7c9b      	ldrb	r3, [r3, #18]
    9018:	f003 030f 	and.w	r3, r3, #15
    901c:	73fb      	strb	r3, [r7, #15]
	bool    is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    901e:	687b      	ldr	r3, [r7, #4]
    9020:	7cdb      	ldrb	r3, [r3, #19]
    9022:	f003 0307 	and.w	r3, r3, #7
    9026:	b2db      	uxtb	r3, r3
    9028:	2b01      	cmp	r3, #1
    902a:	bf0c      	ite	eq
    902c:	2301      	moveq	r3, #1
    902e:	2300      	movne	r3, #0
    9030:	73bb      	strb	r3, [r7, #14]

	if (!is_ctrl) {
    9032:	7bbb      	ldrb	r3, [r7, #14]
    9034:	f083 0301 	eor.w	r3, r3, #1
    9038:	b2db      	uxtb	r3, r3
    903a:	2b00      	cmp	r3, #0
    903c:	d008      	beq.n	9050 <_usb_d_dev_handle_setup+0x44>
		/* Should never be here! */
		_usbd_ep_ack_setup(epn);
    903e:	7bfb      	ldrb	r3, [r7, #15]
    9040:	4618      	mov	r0, r3
    9042:	4b20      	ldr	r3, [pc, #128]	; (90c4 <_usb_d_dev_handle_setup+0xb8>)
    9044:	4798      	blx	r3
		_usbd_ep_stop_setup(epn);
    9046:	7bfb      	ldrb	r3, [r7, #15]
    9048:	4618      	mov	r0, r3
    904a:	4b1f      	ldr	r3, [pc, #124]	; (90c8 <_usb_d_dev_handle_setup+0xbc>)
    904c:	4798      	blx	r3
		return;
    904e:	e036      	b.n	90be <_usb_d_dev_handle_setup+0xb2>
	}
	/* Control transfer:
	 * SETUP transaction will terminate IN/OUT transaction,
	 * and start new transaction with received SETUP packet.
	 */
	if (_usb_d_dev_ep_is_busy(ept)) {
    9050:	687b      	ldr	r3, [r7, #4]
    9052:	7cdb      	ldrb	r3, [r3, #19]
    9054:	f003 0340 	and.w	r3, r3, #64	; 0x40
    9058:	b2db      	uxtb	r3, r3
    905a:	2b00      	cmp	r3, #0
    905c:	d010      	beq.n	9080 <_usb_d_dev_handle_setup+0x74>
		ept->flags.bits.is_busy = 0;
    905e:	687a      	ldr	r2, [r7, #4]
    9060:	7cd3      	ldrb	r3, [r2, #19]
    9062:	f36f 1386 	bfc	r3, #6, #1
    9066:	74d3      	strb	r3, [r2, #19]

		/* Stop transfer on either direction. */
		_usbd_ep_set_in_rdy(epn, 1, false);
    9068:	7bfb      	ldrb	r3, [r7, #15]
    906a:	2200      	movs	r2, #0
    906c:	2101      	movs	r1, #1
    906e:	4618      	mov	r0, r3
    9070:	4b16      	ldr	r3, [pc, #88]	; (90cc <_usb_d_dev_handle_setup+0xc0>)
    9072:	4798      	blx	r3
		_usbd_ep_set_out_rdy(epn, 0, false);
    9074:	7bfb      	ldrb	r3, [r7, #15]
    9076:	2200      	movs	r2, #0
    9078:	2100      	movs	r1, #0
    907a:	4618      	mov	r0, r3
    907c:	4b14      	ldr	r3, [pc, #80]	; (90d0 <_usb_d_dev_handle_setup+0xc4>)
    907e:	4798      	blx	r3
	}
	ept->flags.bits.is_stalled = 0;
    9080:	687a      	ldr	r2, [r7, #4]
    9082:	7cd3      	ldrb	r3, [r2, #19]
    9084:	f36f 03c3 	bfc	r3, #3, #1
    9088:	74d3      	strb	r3, [r2, #19]

	/* Clear status and notify SETUP */
	_usbd_ep_clear_bank_status(epn, 0);
    908a:	7bfb      	ldrb	r3, [r7, #15]
    908c:	2100      	movs	r1, #0
    908e:	4618      	mov	r0, r3
    9090:	4b10      	ldr	r3, [pc, #64]	; (90d4 <_usb_d_dev_handle_setup+0xc8>)
    9092:	4798      	blx	r3
	_usbd_ep_clear_bank_status(epn, 1);
    9094:	7bfb      	ldrb	r3, [r7, #15]
    9096:	2101      	movs	r1, #1
    9098:	4618      	mov	r0, r3
    909a:	4b0e      	ldr	r3, [pc, #56]	; (90d4 <_usb_d_dev_handle_setup+0xc8>)
    909c:	4798      	blx	r3
	_usbd_ep_int_ack(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
    909e:	7bfb      	ldrb	r3, [r7, #15]
    90a0:	216f      	movs	r1, #111	; 0x6f
    90a2:	4618      	mov	r0, r3
    90a4:	4b0c      	ldr	r3, [pc, #48]	; (90d8 <_usb_d_dev_handle_setup+0xcc>)
    90a6:	4798      	blx	r3
	_usbd_ep_int_dis(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
    90a8:	7bfb      	ldrb	r3, [r7, #15]
    90aa:	216f      	movs	r1, #111	; 0x6f
    90ac:	4618      	mov	r0, r3
    90ae:	4b0b      	ldr	r3, [pc, #44]	; (90dc <_usb_d_dev_handle_setup+0xd0>)
    90b0:	4798      	blx	r3
	/* Invoke callback. */
	dev_inst.ep_callbacks.setup(ept->ep);
    90b2:	4b0b      	ldr	r3, [pc, #44]	; (90e0 <_usb_d_dev_handle_setup+0xd4>)
    90b4:	689b      	ldr	r3, [r3, #8]
    90b6:	687a      	ldr	r2, [r7, #4]
    90b8:	7c92      	ldrb	r2, [r2, #18]
    90ba:	4610      	mov	r0, r2
    90bc:	4798      	blx	r3
}
    90be:	3710      	adds	r7, #16
    90c0:	46bd      	mov	sp, r7
    90c2:	bd80      	pop	{r7, pc}
    90c4:	000084b1 	.word	0x000084b1
    90c8:	0000845d 	.word	0x0000845d
    90cc:	00008755 	.word	0x00008755
    90d0:	000087ad 	.word	0x000087ad
    90d4:	0000871d 	.word	0x0000871d
    90d8:	0000825d 	.word	0x0000825d
    90dc:	000082ad 	.word	0x000082ad
    90e0:	20000e84 	.word	0x20000e84

000090e4 <_usb_d_dev_handle_stall>:
 * \brief Handles stall sent interrupt
 * \param[in] ept Pointer to endpoint information.
 * \param[in] bank_n Bank number.
 */
static void _usb_d_dev_handle_stall(struct _usb_d_dev_ep *ept, const uint8_t bank_n)
{
    90e4:	b580      	push	{r7, lr}
    90e6:	b084      	sub	sp, #16
    90e8:	af00      	add	r7, sp, #0
    90ea:	6078      	str	r0, [r7, #4]
    90ec:	460b      	mov	r3, r1
    90ee:	70fb      	strb	r3, [r7, #3]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    90f0:	687b      	ldr	r3, [r7, #4]
    90f2:	7c9b      	ldrb	r3, [r3, #18]
    90f4:	f003 030f 	and.w	r3, r3, #15
    90f8:	73fb      	strb	r3, [r7, #15]
	/* Clear interrupt enable. Leave status there for status check. */
	_usbd_ep_int_stall_en(epn, bank_n, false);
    90fa:	78f9      	ldrb	r1, [r7, #3]
    90fc:	7bfb      	ldrb	r3, [r7, #15]
    90fe:	2200      	movs	r2, #0
    9100:	4618      	mov	r0, r3
    9102:	4b07      	ldr	r3, [pc, #28]	; (9120 <_usb_d_dev_handle_stall+0x3c>)
    9104:	4798      	blx	r3
	dev_inst.ep_callbacks.done(ept->ep, USB_TRANS_STALL, ept->trans_count);
    9106:	4b07      	ldr	r3, [pc, #28]	; (9124 <_usb_d_dev_handle_stall+0x40>)
    9108:	691b      	ldr	r3, [r3, #16]
    910a:	687a      	ldr	r2, [r7, #4]
    910c:	7c90      	ldrb	r0, [r2, #18]
    910e:	687a      	ldr	r2, [r7, #4]
    9110:	6892      	ldr	r2, [r2, #8]
    9112:	2101      	movs	r1, #1
    9114:	4798      	blx	r3
}
    9116:	bf00      	nop
    9118:	3710      	adds	r7, #16
    911a:	46bd      	mov	sp, r7
    911c:	bd80      	pop	{r7, pc}
    911e:	bf00      	nop
    9120:	00008411 	.word	0x00008411
    9124:	20000e84 	.word	0x20000e84

00009128 <_usb_d_dev_handle_trfail>:
 * \brief Handles transaction fail interrupt
 * \param[in] ept Pointer to endpoint information.
 * \param[in] bank_n Bank number.
 */
static void _usb_d_dev_handle_trfail(struct _usb_d_dev_ep *ept, const uint8_t bank_n)
{
    9128:	b580      	push	{r7, lr}
    912a:	b088      	sub	sp, #32
    912c:	af00      	add	r7, sp, #0
    912e:	6078      	str	r0, [r7, #4]
    9130:	460b      	mov	r3, r1
    9132:	70fb      	strb	r3, [r7, #3]
	Usb *              hw      = USB;
    9134:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    9138:	61fb      	str	r3, [r7, #28]
	uint8_t            epn     = USB_EP_GET_N(ept->ep);
    913a:	687b      	ldr	r3, [r7, #4]
    913c:	7c9b      	ldrb	r3, [r3, #18]
    913e:	f003 030f 	and.w	r3, r3, #15
    9142:	76fb      	strb	r3, [r7, #27]
	const uint8_t      fail[2] = {USB_DEVICE_EPINTFLAG_TRFAIL0, USB_DEVICE_EPINTFLAG_TRFAIL1};
    9144:	4b61      	ldr	r3, [pc, #388]	; (92cc <_usb_d_dev_handle_trfail+0x1a4>)
    9146:	881b      	ldrh	r3, [r3, #0]
    9148:	823b      	strh	r3, [r7, #16]
	UsbDeviceDescBank *bank    = prvt_inst.desc_table[epn].DeviceDescBank;
    914a:	7efb      	ldrb	r3, [r7, #27]
    914c:	015b      	lsls	r3, r3, #5
    914e:	4a60      	ldr	r2, [pc, #384]	; (92d0 <_usb_d_dev_handle_trfail+0x1a8>)
    9150:	4413      	add	r3, r2
    9152:	617b      	str	r3, [r7, #20]
	uint8_t            eptype
    9154:	78fb      	ldrb	r3, [r7, #3]
    9156:	2b00      	cmp	r3, #0
    9158:	d006      	beq.n	9168 <_usb_d_dev_handle_trfail+0x40>
    915a:	7efb      	ldrb	r3, [r7, #27]
    915c:	4619      	mov	r1, r3
    915e:	69f8      	ldr	r0, [r7, #28]
    9160:	4b5c      	ldr	r3, [pc, #368]	; (92d4 <_usb_d_dev_handle_trfail+0x1ac>)
    9162:	4798      	blx	r3
    9164:	4603      	mov	r3, r0
    9166:	e005      	b.n	9174 <_usb_d_dev_handle_trfail+0x4c>
    9168:	7efb      	ldrb	r3, [r7, #27]
    916a:	4619      	mov	r1, r3
    916c:	69f8      	ldr	r0, [r7, #28]
    916e:	4b5a      	ldr	r3, [pc, #360]	; (92d8 <_usb_d_dev_handle_trfail+0x1b0>)
    9170:	4798      	blx	r3
    9172:	4603      	mov	r3, r0
    9174:	74fb      	strb	r3, [r7, #19]
	    = bank_n ? hri_usbendpoint_read_EPCFG_EPTYPE1_bf(hw, epn) : hri_usbendpoint_read_EPCFG_EPTYPE0_bf(hw, epn);
	bool                      is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    9176:	687b      	ldr	r3, [r7, #4]
    9178:	7cdb      	ldrb	r3, [r3, #19]
    917a:	f003 0307 	and.w	r3, r3, #7
    917e:	b2db      	uxtb	r3, r3
    9180:	2b01      	cmp	r3, #1
    9182:	bf0c      	ite	eq
    9184:	2301      	moveq	r3, #1
    9186:	2300      	movne	r3, #0
    9188:	74bb      	strb	r3, [r7, #18]
	USB_DEVICE_STATUS_BK_Type st;
	st.reg = bank[bank_n].STATUS_BK.reg;
    918a:	78fb      	ldrb	r3, [r7, #3]
    918c:	011b      	lsls	r3, r3, #4
    918e:	697a      	ldr	r2, [r7, #20]
    9190:	4413      	add	r3, r2
    9192:	7a9b      	ldrb	r3, [r3, #10]
    9194:	b2db      	uxtb	r3, r3
    9196:	733b      	strb	r3, [r7, #12]

	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
    9198:	7cfb      	ldrb	r3, [r7, #19]
    919a:	2b02      	cmp	r3, #2
    919c:	d12f      	bne.n	91fe <_usb_d_dev_handle_trfail+0xd6>
    919e:	7b3b      	ldrb	r3, [r7, #12]
    91a0:	f003 0301 	and.w	r3, r3, #1
    91a4:	b2db      	uxtb	r3, r3
    91a6:	2b00      	cmp	r3, #0
    91a8:	d029      	beq.n	91fe <_usb_d_dev_handle_trfail+0xd6>
		bank[bank_n].STATUS_BK.bit.CRCERR = 0;
    91aa:	78fb      	ldrb	r3, [r7, #3]
    91ac:	011b      	lsls	r3, r3, #4
    91ae:	697a      	ldr	r2, [r7, #20]
    91b0:	441a      	add	r2, r3
    91b2:	7a93      	ldrb	r3, [r2, #10]
    91b4:	f36f 0300 	bfc	r3, #0, #1
    91b8:	7293      	strb	r3, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    91ba:	78fb      	ldrb	r3, [r7, #3]
    91bc:	f107 0220 	add.w	r2, r7, #32
    91c0:	4413      	add	r3, r2
    91c2:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    91c6:	7efb      	ldrb	r3, [r7, #27]
    91c8:	4619      	mov	r1, r3
    91ca:	69f8      	ldr	r0, [r7, #28]
    91cc:	4b43      	ldr	r3, [pc, #268]	; (92dc <_usb_d_dev_handle_trfail+0x1b4>)
    91ce:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
    91d0:	78fb      	ldrb	r3, [r7, #3]
    91d2:	f107 0220 	add.w	r2, r7, #32
    91d6:	4413      	add	r3, r2
    91d8:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    91dc:	7efb      	ldrb	r3, [r7, #27]
    91de:	4619      	mov	r1, r3
    91e0:	69f8      	ldr	r0, [r7, #28]
    91e2:	4b3f      	ldr	r3, [pc, #252]	; (92e0 <_usb_d_dev_handle_trfail+0x1b8>)
    91e4:	4798      	blx	r3
		_usb_d_dev_trans_stop(ept, bank_n, USB_TRANS_ERROR);
    91e6:	78fb      	ldrb	r3, [r7, #3]
    91e8:	2b00      	cmp	r3, #0
    91ea:	bf14      	ite	ne
    91ec:	2301      	movne	r3, #1
    91ee:	2300      	moveq	r3, #0
    91f0:	b2db      	uxtb	r3, r3
    91f2:	2204      	movs	r2, #4
    91f4:	4619      	mov	r1, r3
    91f6:	6878      	ldr	r0, [r7, #4]
    91f8:	4b3a      	ldr	r3, [pc, #232]	; (92e4 <_usb_d_dev_handle_trfail+0x1bc>)
    91fa:	4798      	blx	r3
	} else {
		_usbd_ep_clear_bank_status(epn, bank_n);
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
	}
}
    91fc:	e062      	b.n	92c4 <_usb_d_dev_handle_trfail+0x19c>
	} else if (st.bit.ERRORFLOW) {
    91fe:	7b3b      	ldrb	r3, [r7, #12]
    9200:	f003 0302 	and.w	r3, r3, #2
    9204:	b2db      	uxtb	r3, r3
    9206:	2b00      	cmp	r3, #0
    9208:	d040      	beq.n	928c <_usb_d_dev_handle_trfail+0x164>
		bank[bank_n].STATUS_BK.bit.ERRORFLOW = 0;
    920a:	78fb      	ldrb	r3, [r7, #3]
    920c:	011b      	lsls	r3, r3, #4
    920e:	697a      	ldr	r2, [r7, #20]
    9210:	441a      	add	r2, r3
    9212:	7a93      	ldrb	r3, [r2, #10]
    9214:	f36f 0341 	bfc	r3, #1, #1
    9218:	7293      	strb	r3, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    921a:	78fb      	ldrb	r3, [r7, #3]
    921c:	f107 0220 	add.w	r2, r7, #32
    9220:	4413      	add	r3, r2
    9222:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    9226:	7efb      	ldrb	r3, [r7, #27]
    9228:	4619      	mov	r1, r3
    922a:	69f8      	ldr	r0, [r7, #28]
    922c:	4b2b      	ldr	r3, [pc, #172]	; (92dc <_usb_d_dev_handle_trfail+0x1b4>)
    922e:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
    9230:	78fb      	ldrb	r3, [r7, #3]
    9232:	f107 0220 	add.w	r2, r7, #32
    9236:	4413      	add	r3, r2
    9238:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    923c:	7efb      	ldrb	r3, [r7, #27]
    923e:	4619      	mov	r1, r3
    9240:	69f8      	ldr	r0, [r7, #28]
    9242:	4b27      	ldr	r3, [pc, #156]	; (92e0 <_usb_d_dev_handle_trfail+0x1b8>)
    9244:	4798      	blx	r3
		if (is_ctrl && _usb_d_dev_ep_is_busy(ept)) {
    9246:	7cbb      	ldrb	r3, [r7, #18]
    9248:	2b00      	cmp	r3, #0
    924a:	d03b      	beq.n	92c4 <_usb_d_dev_handle_trfail+0x19c>
    924c:	687b      	ldr	r3, [r7, #4]
    924e:	7cdb      	ldrb	r3, [r3, #19]
    9250:	f003 0340 	and.w	r3, r3, #64	; 0x40
    9254:	b2db      	uxtb	r3, r3
    9256:	2b00      	cmp	r3, #0
    9258:	d034      	beq.n	92c4 <_usb_d_dev_handle_trfail+0x19c>
			if (bank_n != _usb_d_dev_ep_is_in(ept)) {
    925a:	687b      	ldr	r3, [r7, #4]
    925c:	7cdb      	ldrb	r3, [r3, #19]
    925e:	f3c3 13c0 	ubfx	r3, r3, #7, #1
    9262:	b2db      	uxtb	r3, r3
    9264:	461a      	mov	r2, r3
    9266:	78fb      	ldrb	r3, [r7, #3]
    9268:	4293      	cmp	r3, r2
    926a:	d02b      	beq.n	92c4 <_usb_d_dev_handle_trfail+0x19c>
				_usb_d_dev_trans_stop(ept, _usb_d_dev_ep_is_in(ept), USB_TRANS_DONE);
    926c:	687b      	ldr	r3, [r7, #4]
    926e:	7cdb      	ldrb	r3, [r3, #19]
    9270:	f3c3 13c0 	ubfx	r3, r3, #7, #1
    9274:	b2db      	uxtb	r3, r3
    9276:	2b00      	cmp	r3, #0
    9278:	bf14      	ite	ne
    927a:	2301      	movne	r3, #1
    927c:	2300      	moveq	r3, #0
    927e:	b2db      	uxtb	r3, r3
    9280:	2200      	movs	r2, #0
    9282:	4619      	mov	r1, r3
    9284:	6878      	ldr	r0, [r7, #4]
    9286:	4b17      	ldr	r3, [pc, #92]	; (92e4 <_usb_d_dev_handle_trfail+0x1bc>)
    9288:	4798      	blx	r3
}
    928a:	e01b      	b.n	92c4 <_usb_d_dev_handle_trfail+0x19c>
		_usbd_ep_clear_bank_status(epn, bank_n);
    928c:	78fa      	ldrb	r2, [r7, #3]
    928e:	7efb      	ldrb	r3, [r7, #27]
    9290:	4611      	mov	r1, r2
    9292:	4618      	mov	r0, r3
    9294:	4b14      	ldr	r3, [pc, #80]	; (92e8 <_usb_d_dev_handle_trfail+0x1c0>)
    9296:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    9298:	78fb      	ldrb	r3, [r7, #3]
    929a:	f107 0220 	add.w	r2, r7, #32
    929e:	4413      	add	r3, r2
    92a0:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    92a4:	7efb      	ldrb	r3, [r7, #27]
    92a6:	4619      	mov	r1, r3
    92a8:	69f8      	ldr	r0, [r7, #28]
    92aa:	4b0c      	ldr	r3, [pc, #48]	; (92dc <_usb_d_dev_handle_trfail+0x1b4>)
    92ac:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
    92ae:	78fb      	ldrb	r3, [r7, #3]
    92b0:	f107 0220 	add.w	r2, r7, #32
    92b4:	4413      	add	r3, r2
    92b6:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    92ba:	7efb      	ldrb	r3, [r7, #27]
    92bc:	4619      	mov	r1, r3
    92be:	69f8      	ldr	r0, [r7, #28]
    92c0:	4b07      	ldr	r3, [pc, #28]	; (92e0 <_usb_d_dev_handle_trfail+0x1b8>)
    92c2:	4798      	blx	r3
}
    92c4:	bf00      	nop
    92c6:	3720      	adds	r7, #32
    92c8:	46bd      	mov	sp, r7
    92ca:	bd80      	pop	{r7, pc}
    92cc:	000131b8 	.word	0x000131b8
    92d0:	20000f4c 	.word	0x20000f4c
    92d4:	00007e91 	.word	0x00007e91
    92d8:	00007e61 	.word	0x00007e61
    92dc:	00007d35 	.word	0x00007d35
    92e0:	00007e35 	.word	0x00007e35
    92e4:	00009ea1 	.word	0x00009ea1
    92e8:	0000871d 	.word	0x0000871d

000092ec <_usb_d_dev_trans_setup_isr>:
 * \brief Analyze flags for setup transaction
 * \param[in] ept Pointer to endpoint information.
 * \param[in] flags Endpoint interrupt flags.
 */
static inline void _usb_d_dev_trans_setup_isr(struct _usb_d_dev_ep *ept, const uint8_t flags)
{
    92ec:	b580      	push	{r7, lr}
    92ee:	b082      	sub	sp, #8
    92f0:	af00      	add	r7, sp, #0
    92f2:	6078      	str	r0, [r7, #4]
    92f4:	460b      	mov	r3, r1
    92f6:	70fb      	strb	r3, [r7, #3]
	/*
	 * SETPU is automatically ACKed by hardware
	 * OUT & IN should be set to NAK when checking SETUP
	 * No need to check OUT & IN status.
	 */
	if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    92f8:	78fb      	ldrb	r3, [r7, #3]
    92fa:	f003 0310 	and.w	r3, r3, #16
    92fe:	2b00      	cmp	r3, #0
    9300:	d003      	beq.n	930a <_usb_d_dev_trans_setup_isr+0x1e>
		_usb_d_dev_handle_setup(ept);
    9302:	6878      	ldr	r0, [r7, #4]
    9304:	4b0c      	ldr	r3, [pc, #48]	; (9338 <_usb_d_dev_trans_setup_isr+0x4c>)
    9306:	4798      	blx	r3
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
		_usb_d_dev_handle_stall(ept, 1);
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
		_usb_d_dev_handle_stall(ept, 0);
	}
}
    9308:	e012      	b.n	9330 <_usb_d_dev_trans_setup_isr+0x44>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    930a:	78fb      	ldrb	r3, [r7, #3]
    930c:	f003 0340 	and.w	r3, r3, #64	; 0x40
    9310:	2b00      	cmp	r3, #0
    9312:	d004      	beq.n	931e <_usb_d_dev_trans_setup_isr+0x32>
		_usb_d_dev_handle_stall(ept, 1);
    9314:	2101      	movs	r1, #1
    9316:	6878      	ldr	r0, [r7, #4]
    9318:	4b08      	ldr	r3, [pc, #32]	; (933c <_usb_d_dev_trans_setup_isr+0x50>)
    931a:	4798      	blx	r3
}
    931c:	e008      	b.n	9330 <_usb_d_dev_trans_setup_isr+0x44>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    931e:	78fb      	ldrb	r3, [r7, #3]
    9320:	f003 0320 	and.w	r3, r3, #32
    9324:	2b00      	cmp	r3, #0
    9326:	d003      	beq.n	9330 <_usb_d_dev_trans_setup_isr+0x44>
		_usb_d_dev_handle_stall(ept, 0);
    9328:	2100      	movs	r1, #0
    932a:	6878      	ldr	r0, [r7, #4]
    932c:	4b03      	ldr	r3, [pc, #12]	; (933c <_usb_d_dev_trans_setup_isr+0x50>)
    932e:	4798      	blx	r3
}
    9330:	bf00      	nop
    9332:	3708      	adds	r7, #8
    9334:	46bd      	mov	sp, r7
    9336:	bd80      	pop	{r7, pc}
    9338:	0000900d 	.word	0x0000900d
    933c:	000090e5 	.word	0x000090e5

00009340 <_usb_d_dev_trans_in_isr>:
 * \brief Analyze flags for IN transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] flags Endpoint interrupt flags.
 */
static inline void _usb_d_dev_trans_in_isr(struct _usb_d_dev_ep *ept, const uint8_t flags)
{
    9340:	b580      	push	{r7, lr}
    9342:	b082      	sub	sp, #8
    9344:	af00      	add	r7, sp, #0
    9346:	6078      	str	r0, [r7, #4]
    9348:	460b      	mov	r3, r1
    934a:	70fb      	strb	r3, [r7, #3]
	/*
	 * Check IN flags
	 * If control endpoint, SETUP & OUT is checked to see if abort
	 */
	if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    934c:	78fb      	ldrb	r3, [r7, #3]
    934e:	f003 0340 	and.w	r3, r3, #64	; 0x40
    9352:	2b00      	cmp	r3, #0
    9354:	d004      	beq.n	9360 <_usb_d_dev_trans_in_isr+0x20>
		_usb_d_dev_handle_stall(ept, 1);
    9356:	2101      	movs	r1, #1
    9358:	6878      	ldr	r0, [r7, #4]
    935a:	4b1a      	ldr	r3, [pc, #104]	; (93c4 <_usb_d_dev_trans_in_isr+0x84>)
    935c:	4798      	blx	r3
			_usb_d_dev_handle_trfail(ept, 0);
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
			_usb_d_dev_handle_setup(ept);
		}
	}
}
    935e:	e02c      	b.n	93ba <_usb_d_dev_trans_in_isr+0x7a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    9360:	78fb      	ldrb	r3, [r7, #3]
    9362:	f003 0308 	and.w	r3, r3, #8
    9366:	2b00      	cmp	r3, #0
    9368:	d004      	beq.n	9374 <_usb_d_dev_trans_in_isr+0x34>
		_usb_d_dev_handle_trfail(ept, 1);
    936a:	2101      	movs	r1, #1
    936c:	6878      	ldr	r0, [r7, #4]
    936e:	4b16      	ldr	r3, [pc, #88]	; (93c8 <_usb_d_dev_trans_in_isr+0x88>)
    9370:	4798      	blx	r3
}
    9372:	e022      	b.n	93ba <_usb_d_dev_trans_in_isr+0x7a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT1) {
    9374:	78fb      	ldrb	r3, [r7, #3]
    9376:	f003 0302 	and.w	r3, r3, #2
    937a:	2b00      	cmp	r3, #0
    937c:	d004      	beq.n	9388 <_usb_d_dev_trans_in_isr+0x48>
		_usb_d_dev_in_next(ept, true);
    937e:	2101      	movs	r1, #1
    9380:	6878      	ldr	r0, [r7, #4]
    9382:	4b12      	ldr	r3, [pc, #72]	; (93cc <_usb_d_dev_trans_in_isr+0x8c>)
    9384:	4798      	blx	r3
}
    9386:	e018      	b.n	93ba <_usb_d_dev_trans_in_isr+0x7a>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    9388:	687b      	ldr	r3, [r7, #4]
    938a:	7cdb      	ldrb	r3, [r3, #19]
    938c:	f003 0307 	and.w	r3, r3, #7
    9390:	b2db      	uxtb	r3, r3
    9392:	2b01      	cmp	r3, #1
    9394:	d111      	bne.n	93ba <_usb_d_dev_trans_in_isr+0x7a>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    9396:	78fb      	ldrb	r3, [r7, #3]
    9398:	f003 0304 	and.w	r3, r3, #4
    939c:	2b00      	cmp	r3, #0
    939e:	d004      	beq.n	93aa <_usb_d_dev_trans_in_isr+0x6a>
			_usb_d_dev_handle_trfail(ept, 0);
    93a0:	2100      	movs	r1, #0
    93a2:	6878      	ldr	r0, [r7, #4]
    93a4:	4b08      	ldr	r3, [pc, #32]	; (93c8 <_usb_d_dev_trans_in_isr+0x88>)
    93a6:	4798      	blx	r3
}
    93a8:	e007      	b.n	93ba <_usb_d_dev_trans_in_isr+0x7a>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    93aa:	78fb      	ldrb	r3, [r7, #3]
    93ac:	f003 0310 	and.w	r3, r3, #16
    93b0:	2b00      	cmp	r3, #0
    93b2:	d002      	beq.n	93ba <_usb_d_dev_trans_in_isr+0x7a>
			_usb_d_dev_handle_setup(ept);
    93b4:	6878      	ldr	r0, [r7, #4]
    93b6:	4b06      	ldr	r3, [pc, #24]	; (93d0 <_usb_d_dev_trans_in_isr+0x90>)
    93b8:	4798      	blx	r3
}
    93ba:	bf00      	nop
    93bc:	3708      	adds	r7, #8
    93be:	46bd      	mov	sp, r7
    93c0:	bd80      	pop	{r7, pc}
    93c2:	bf00      	nop
    93c4:	000090e5 	.word	0x000090e5
    93c8:	00009129 	.word	0x00009129
    93cc:	00008b31 	.word	0x00008b31
    93d0:	0000900d 	.word	0x0000900d

000093d4 <_usb_d_dev_trans_out_isr>:
 * \brief Analyze flags for OUT transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] flags Endpoint interrupt flags.
 */
static inline void _usb_d_dev_trans_out_isr(struct _usb_d_dev_ep *ept, const uint8_t flags)
{
    93d4:	b580      	push	{r7, lr}
    93d6:	b082      	sub	sp, #8
    93d8:	af00      	add	r7, sp, #0
    93da:	6078      	str	r0, [r7, #4]
    93dc:	460b      	mov	r3, r1
    93de:	70fb      	strb	r3, [r7, #3]
	/*
	 * Check OUT flags.
	 * If control endpoint, SETUP & IN NAK is checked to see if abort
	 */
	if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    93e0:	78fb      	ldrb	r3, [r7, #3]
    93e2:	f003 0320 	and.w	r3, r3, #32
    93e6:	2b00      	cmp	r3, #0
    93e8:	d004      	beq.n	93f4 <_usb_d_dev_trans_out_isr+0x20>
		_usb_d_dev_handle_stall(ept, 0);
    93ea:	2100      	movs	r1, #0
    93ec:	6878      	ldr	r0, [r7, #4]
    93ee:	4b1a      	ldr	r3, [pc, #104]	; (9458 <_usb_d_dev_trans_out_isr+0x84>)
    93f0:	4798      	blx	r3
			_usb_d_dev_handle_trfail(ept, 1);
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
			_usb_d_dev_handle_setup(ept);
		}
	}
}
    93f2:	e02c      	b.n	944e <_usb_d_dev_trans_out_isr+0x7a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    93f4:	78fb      	ldrb	r3, [r7, #3]
    93f6:	f003 0304 	and.w	r3, r3, #4
    93fa:	2b00      	cmp	r3, #0
    93fc:	d004      	beq.n	9408 <_usb_d_dev_trans_out_isr+0x34>
		_usb_d_dev_handle_trfail(ept, 0);
    93fe:	2100      	movs	r1, #0
    9400:	6878      	ldr	r0, [r7, #4]
    9402:	4b16      	ldr	r3, [pc, #88]	; (945c <_usb_d_dev_trans_out_isr+0x88>)
    9404:	4798      	blx	r3
}
    9406:	e022      	b.n	944e <_usb_d_dev_trans_out_isr+0x7a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT0) {
    9408:	78fb      	ldrb	r3, [r7, #3]
    940a:	f003 0301 	and.w	r3, r3, #1
    940e:	2b00      	cmp	r3, #0
    9410:	d004      	beq.n	941c <_usb_d_dev_trans_out_isr+0x48>
		_usb_d_dev_out_next(ept, true);
    9412:	2101      	movs	r1, #1
    9414:	6878      	ldr	r0, [r7, #4]
    9416:	4b12      	ldr	r3, [pc, #72]	; (9460 <_usb_d_dev_trans_out_isr+0x8c>)
    9418:	4798      	blx	r3
}
    941a:	e018      	b.n	944e <_usb_d_dev_trans_out_isr+0x7a>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    941c:	687b      	ldr	r3, [r7, #4]
    941e:	7cdb      	ldrb	r3, [r3, #19]
    9420:	f003 0307 	and.w	r3, r3, #7
    9424:	b2db      	uxtb	r3, r3
    9426:	2b01      	cmp	r3, #1
    9428:	d111      	bne.n	944e <_usb_d_dev_trans_out_isr+0x7a>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    942a:	78fb      	ldrb	r3, [r7, #3]
    942c:	f003 0308 	and.w	r3, r3, #8
    9430:	2b00      	cmp	r3, #0
    9432:	d004      	beq.n	943e <_usb_d_dev_trans_out_isr+0x6a>
			_usb_d_dev_handle_trfail(ept, 1);
    9434:	2101      	movs	r1, #1
    9436:	6878      	ldr	r0, [r7, #4]
    9438:	4b08      	ldr	r3, [pc, #32]	; (945c <_usb_d_dev_trans_out_isr+0x88>)
    943a:	4798      	blx	r3
}
    943c:	e007      	b.n	944e <_usb_d_dev_trans_out_isr+0x7a>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    943e:	78fb      	ldrb	r3, [r7, #3]
    9440:	f003 0310 	and.w	r3, r3, #16
    9444:	2b00      	cmp	r3, #0
    9446:	d002      	beq.n	944e <_usb_d_dev_trans_out_isr+0x7a>
			_usb_d_dev_handle_setup(ept);
    9448:	6878      	ldr	r0, [r7, #4]
    944a:	4b06      	ldr	r3, [pc, #24]	; (9464 <_usb_d_dev_trans_out_isr+0x90>)
    944c:	4798      	blx	r3
}
    944e:	bf00      	nop
    9450:	3708      	adds	r7, #8
    9452:	46bd      	mov	sp, r7
    9454:	bd80      	pop	{r7, pc}
    9456:	bf00      	nop
    9458:	000090e5 	.word	0x000090e5
    945c:	00009129 	.word	0x00009129
    9460:	00008d49 	.word	0x00008d49
    9464:	0000900d 	.word	0x0000900d

00009468 <_usb_d_dev_handle_eps>:
 * \brief Handles the endpoint interrupts.
 * \param[in] epint Endpoint interrupt summary (by bits).
 * \param[in] ept Pointer to endpoint information.
 */
static inline void _usb_d_dev_handle_eps(uint32_t epint, struct _usb_d_dev_ep *ept)
{
    9468:	b580      	push	{r7, lr}
    946a:	b084      	sub	sp, #16
    946c:	af00      	add	r7, sp, #0
    946e:	6078      	str	r0, [r7, #4]
    9470:	6039      	str	r1, [r7, #0]
	Usb *hw = USB;
    9472:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    9476:	60fb      	str	r3, [r7, #12]

	uint8_t flags, mask;
	uint8_t epn = USB_EP_GET_N(ept->ep);
    9478:	683b      	ldr	r3, [r7, #0]
    947a:	7c9b      	ldrb	r3, [r3, #18]
    947c:	f003 030f 	and.w	r3, r3, #15
    9480:	72fb      	strb	r3, [r7, #11]

	if (!(epint & (1u << epn))) {
    9482:	7afb      	ldrb	r3, [r7, #11]
    9484:	2201      	movs	r2, #1
    9486:	409a      	lsls	r2, r3
    9488:	687b      	ldr	r3, [r7, #4]
    948a:	4013      	ands	r3, r2
    948c:	2b00      	cmp	r3, #0
    948e:	d03d      	beq.n	950c <_usb_d_dev_handle_eps+0xa4>
		return;
	}
	flags = hw->DEVICE.DeviceEndpoint[epn].EPINTFLAG.reg;
    9490:	7afb      	ldrb	r3, [r7, #11]
    9492:	68fa      	ldr	r2, [r7, #12]
    9494:	3308      	adds	r3, #8
    9496:	015b      	lsls	r3, r3, #5
    9498:	4413      	add	r3, r2
    949a:	3307      	adds	r3, #7
    949c:	781b      	ldrb	r3, [r3, #0]
    949e:	72bb      	strb	r3, [r7, #10]
	mask  = hw->DEVICE.DeviceEndpoint[epn].EPINTENSET.reg;
    94a0:	7afb      	ldrb	r3, [r7, #11]
    94a2:	68fa      	ldr	r2, [r7, #12]
    94a4:	015b      	lsls	r3, r3, #5
    94a6:	4413      	add	r3, r2
    94a8:	f203 1309 	addw	r3, r3, #265	; 0x109
    94ac:	781b      	ldrb	r3, [r3, #0]
    94ae:	727b      	strb	r3, [r7, #9]
	flags &= mask;
    94b0:	7aba      	ldrb	r2, [r7, #10]
    94b2:	7a7b      	ldrb	r3, [r7, #9]
    94b4:	4013      	ands	r3, r2
    94b6:	72bb      	strb	r3, [r7, #10]
	if (flags) {
    94b8:	7abb      	ldrb	r3, [r7, #10]
    94ba:	2b00      	cmp	r3, #0
    94bc:	d027      	beq.n	950e <_usb_d_dev_handle_eps+0xa6>
		if ((ept->flags.bits.eptype == 0x1) && !_usb_d_dev_ep_is_busy(ept)) {
    94be:	683b      	ldr	r3, [r7, #0]
    94c0:	7cdb      	ldrb	r3, [r3, #19]
    94c2:	f003 0307 	and.w	r3, r3, #7
    94c6:	b2db      	uxtb	r3, r3
    94c8:	2b01      	cmp	r3, #1
    94ca:	d10c      	bne.n	94e6 <_usb_d_dev_handle_eps+0x7e>
    94cc:	683b      	ldr	r3, [r7, #0]
    94ce:	7cdb      	ldrb	r3, [r3, #19]
    94d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
    94d4:	b2db      	uxtb	r3, r3
    94d6:	2b00      	cmp	r3, #0
    94d8:	d105      	bne.n	94e6 <_usb_d_dev_handle_eps+0x7e>
			_usb_d_dev_trans_setup_isr(ept, flags);
    94da:	7abb      	ldrb	r3, [r7, #10]
    94dc:	4619      	mov	r1, r3
    94de:	6838      	ldr	r0, [r7, #0]
    94e0:	4b0c      	ldr	r3, [pc, #48]	; (9514 <_usb_d_dev_handle_eps+0xac>)
    94e2:	4798      	blx	r3
    94e4:	e013      	b.n	950e <_usb_d_dev_handle_eps+0xa6>
		} else if (_usb_d_dev_ep_is_in(ept)) {
    94e6:	683b      	ldr	r3, [r7, #0]
    94e8:	7cdb      	ldrb	r3, [r3, #19]
    94ea:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    94ee:	b2db      	uxtb	r3, r3
    94f0:	2b00      	cmp	r3, #0
    94f2:	d005      	beq.n	9500 <_usb_d_dev_handle_eps+0x98>
			_usb_d_dev_trans_in_isr(ept, flags);
    94f4:	7abb      	ldrb	r3, [r7, #10]
    94f6:	4619      	mov	r1, r3
    94f8:	6838      	ldr	r0, [r7, #0]
    94fa:	4b07      	ldr	r3, [pc, #28]	; (9518 <_usb_d_dev_handle_eps+0xb0>)
    94fc:	4798      	blx	r3
    94fe:	e006      	b.n	950e <_usb_d_dev_handle_eps+0xa6>
		} else {
			_usb_d_dev_trans_out_isr(ept, flags);
    9500:	7abb      	ldrb	r3, [r7, #10]
    9502:	4619      	mov	r1, r3
    9504:	6838      	ldr	r0, [r7, #0]
    9506:	4b05      	ldr	r3, [pc, #20]	; (951c <_usb_d_dev_handle_eps+0xb4>)
    9508:	4798      	blx	r3
    950a:	e000      	b.n	950e <_usb_d_dev_handle_eps+0xa6>
		return;
    950c:	bf00      	nop
		}
	}
}
    950e:	3710      	adds	r7, #16
    9510:	46bd      	mov	sp, r7
    9512:	bd80      	pop	{r7, pc}
    9514:	000092ed 	.word	0x000092ed
    9518:	00009341 	.word	0x00009341
    951c:	000093d5 	.word	0x000093d5

00009520 <_usb_d_dev_handler>:
/**
 * \brief USB device interrupt handler
 * \param[in] unused The parameter is not used
 */
static void _usb_d_dev_handler(void)
{
    9520:	b580      	push	{r7, lr}
    9522:	b084      	sub	sp, #16
    9524:	af00      	add	r7, sp, #0
	Usb *   hw = USB;
    9526:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    952a:	60bb      	str	r3, [r7, #8]
	uint8_t i;

	uint16_t epint = hw->DEVICE.EPINTSMRY.reg;
    952c:	68bb      	ldr	r3, [r7, #8]
    952e:	8c1b      	ldrh	r3, [r3, #32]
    9530:	80fb      	strh	r3, [r7, #6]
	if (0 == epint) {
    9532:	88fb      	ldrh	r3, [r7, #6]
    9534:	2b00      	cmp	r3, #0
    9536:	d104      	bne.n	9542 <_usb_d_dev_handler+0x22>
		if (_usb_d_dev_handle_nep()) {
    9538:	4b13      	ldr	r3, [pc, #76]	; (9588 <_usb_d_dev_handler+0x68>)
    953a:	4798      	blx	r3
    953c:	4603      	mov	r3, r0
    953e:	2b00      	cmp	r3, #0
    9540:	d11e      	bne.n	9580 <_usb_d_dev_handler+0x60>
			return;
		}
	}
	/* Handle endpoints */
	for (i = 0; i < USB_D_N_EP; i++) {
    9542:	2300      	movs	r3, #0
    9544:	73fb      	strb	r3, [r7, #15]
    9546:	e017      	b.n	9578 <_usb_d_dev_handler+0x58>
		struct _usb_d_dev_ep *ept = &dev_inst.ep[i];
    9548:	7bfa      	ldrb	r2, [r7, #15]
    954a:	4613      	mov	r3, r2
    954c:	009b      	lsls	r3, r3, #2
    954e:	4413      	add	r3, r2
    9550:	009b      	lsls	r3, r3, #2
    9552:	3310      	adds	r3, #16
    9554:	4a0d      	ldr	r2, [pc, #52]	; (958c <_usb_d_dev_handler+0x6c>)
    9556:	4413      	add	r3, r2
    9558:	3304      	adds	r3, #4
    955a:	603b      	str	r3, [r7, #0]
		if (ept->ep == 0xFF) {
    955c:	683b      	ldr	r3, [r7, #0]
    955e:	7c9b      	ldrb	r3, [r3, #18]
    9560:	2bff      	cmp	r3, #255	; 0xff
    9562:	d005      	beq.n	9570 <_usb_d_dev_handler+0x50>
			continue;
		}
		_usb_d_dev_handle_eps(epint, ept);
    9564:	88fb      	ldrh	r3, [r7, #6]
    9566:	6839      	ldr	r1, [r7, #0]
    9568:	4618      	mov	r0, r3
    956a:	4b09      	ldr	r3, [pc, #36]	; (9590 <_usb_d_dev_handler+0x70>)
    956c:	4798      	blx	r3
    956e:	e000      	b.n	9572 <_usb_d_dev_handler+0x52>
			continue;
    9570:	bf00      	nop
	for (i = 0; i < USB_D_N_EP; i++) {
    9572:	7bfb      	ldrb	r3, [r7, #15]
    9574:	3301      	adds	r3, #1
    9576:	73fb      	strb	r3, [r7, #15]
    9578:	7bfb      	ldrb	r3, [r7, #15]
    957a:	2b08      	cmp	r3, #8
    957c:	d9e4      	bls.n	9548 <_usb_d_dev_handler+0x28>
    957e:	e000      	b.n	9582 <_usb_d_dev_handler+0x62>
			return;
    9580:	bf00      	nop
	}
}
    9582:	3710      	adds	r7, #16
    9584:	46bd      	mov	sp, r7
    9586:	bd80      	pop	{r7, pc}
    9588:	00008a79 	.word	0x00008a79
    958c:	20000e84 	.word	0x20000e84
    9590:	00009469 	.word	0x00009469

00009594 <_usb_d_dev_reset_epts>:

/**
 * \brief Reset all endpoint software instances
 */
static void _usb_d_dev_reset_epts(void)
{
    9594:	b580      	push	{r7, lr}
    9596:	b082      	sub	sp, #8
    9598:	af00      	add	r7, sp, #0
	uint8_t i;
	for (i = 0; i < USB_D_N_EP; i++) {
    959a:	2300      	movs	r3, #0
    959c:	71fb      	strb	r3, [r7, #7]
    959e:	e023      	b.n	95e8 <_usb_d_dev_reset_epts+0x54>
		_usb_d_dev_trans_done(&dev_inst.ep[i], USB_TRANS_RESET);
    95a0:	79fa      	ldrb	r2, [r7, #7]
    95a2:	4613      	mov	r3, r2
    95a4:	009b      	lsls	r3, r3, #2
    95a6:	4413      	add	r3, r2
    95a8:	009b      	lsls	r3, r3, #2
    95aa:	3310      	adds	r3, #16
    95ac:	4a14      	ldr	r2, [pc, #80]	; (9600 <_usb_d_dev_reset_epts+0x6c>)
    95ae:	4413      	add	r3, r2
    95b0:	3304      	adds	r3, #4
    95b2:	2103      	movs	r1, #3
    95b4:	4618      	mov	r0, r3
    95b6:	4b13      	ldr	r3, [pc, #76]	; (9604 <_usb_d_dev_reset_epts+0x70>)
    95b8:	4798      	blx	r3
		dev_inst.ep[i].ep       = 0xFF;
    95ba:	79fa      	ldrb	r2, [r7, #7]
    95bc:	4910      	ldr	r1, [pc, #64]	; (9600 <_usb_d_dev_reset_epts+0x6c>)
    95be:	4613      	mov	r3, r2
    95c0:	009b      	lsls	r3, r3, #2
    95c2:	4413      	add	r3, r2
    95c4:	009b      	lsls	r3, r3, #2
    95c6:	440b      	add	r3, r1
    95c8:	3326      	adds	r3, #38	; 0x26
    95ca:	22ff      	movs	r2, #255	; 0xff
    95cc:	701a      	strb	r2, [r3, #0]
		dev_inst.ep[i].flags.u8 = 0;
    95ce:	79fa      	ldrb	r2, [r7, #7]
    95d0:	490b      	ldr	r1, [pc, #44]	; (9600 <_usb_d_dev_reset_epts+0x6c>)
    95d2:	4613      	mov	r3, r2
    95d4:	009b      	lsls	r3, r3, #2
    95d6:	4413      	add	r3, r2
    95d8:	009b      	lsls	r3, r3, #2
    95da:	440b      	add	r3, r1
    95dc:	3327      	adds	r3, #39	; 0x27
    95de:	2200      	movs	r2, #0
    95e0:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < USB_D_N_EP; i++) {
    95e2:	79fb      	ldrb	r3, [r7, #7]
    95e4:	3301      	adds	r3, #1
    95e6:	71fb      	strb	r3, [r7, #7]
    95e8:	79fb      	ldrb	r3, [r7, #7]
    95ea:	2b08      	cmp	r3, #8
    95ec:	d9d8      	bls.n	95a0 <_usb_d_dev_reset_epts+0xc>
	}
	memset(prvt_inst.desc_table, 0, sizeof(UsbDeviceDescriptor) * (CONF_USB_D_MAX_EP_N + 1));
    95ee:	22a0      	movs	r2, #160	; 0xa0
    95f0:	2100      	movs	r1, #0
    95f2:	4805      	ldr	r0, [pc, #20]	; (9608 <_usb_d_dev_reset_epts+0x74>)
    95f4:	4b05      	ldr	r3, [pc, #20]	; (960c <_usb_d_dev_reset_epts+0x78>)
    95f6:	4798      	blx	r3
}
    95f8:	bf00      	nop
    95fa:	3708      	adds	r7, #8
    95fc:	46bd      	mov	sp, r7
    95fe:	bd80      	pop	{r7, pc}
    9600:	20000e84 	.word	0x20000e84
    9604:	00009e59 	.word	0x00009e59
    9608:	20000f4c 	.word	0x20000f4c
    960c:	00012c5d 	.word	0x00012c5d

00009610 <_usb_d_dev_init>:

int32_t _usb_d_dev_init(void)
{
    9610:	b580      	push	{r7, lr}
    9612:	b084      	sub	sp, #16
    9614:	af00      	add	r7, sp, #0
	Usb *         hw         = USB;
    9616:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    961a:	60fb      	str	r3, [r7, #12]
	uint8_t       speed      = CONF_USB_D_SPEED;
    961c:	2301      	movs	r3, #1
    961e:	72fb      	strb	r3, [r7, #11]
	const uint8_t spdconf[4] = {
    9620:	2304      	movs	r3, #4
    9622:	713b      	strb	r3, [r7, #4]
    9624:	2300      	movs	r3, #0
    9626:	717b      	strb	r3, [r7, #5]
    9628:	2300      	movs	r3, #0
    962a:	71bb      	strb	r3, [r7, #6]
    962c:	2300      	movs	r3, #0
    962e:	71fb      	strb	r3, [r7, #7]
	    USB_DEVICE_CTRLB_SPDCONF(0), /* FS */
	    0,
	    0 /* Reserved */
	};

	if (!hri_usbdevice_is_syncing(hw, USB_SYNCBUSY_SWRST)) {
    9630:	2101      	movs	r1, #1
    9632:	68f8      	ldr	r0, [r7, #12]
    9634:	4b26      	ldr	r3, [pc, #152]	; (96d0 <_usb_d_dev_init+0xc0>)
    9636:	4798      	blx	r3
    9638:	4603      	mov	r3, r0
    963a:	f083 0301 	eor.w	r3, r3, #1
    963e:	b2db      	uxtb	r3, r3
    9640:	2b00      	cmp	r3, #0
    9642:	d011      	beq.n	9668 <_usb_d_dev_init+0x58>
		if (hri_usbdevice_get_CTRLA_reg(hw, USB_CTRLA_ENABLE)) {
    9644:	2102      	movs	r1, #2
    9646:	68f8      	ldr	r0, [r7, #12]
    9648:	4b22      	ldr	r3, [pc, #136]	; (96d4 <_usb_d_dev_init+0xc4>)
    964a:	4798      	blx	r3
    964c:	4603      	mov	r3, r0
    964e:	2b00      	cmp	r3, #0
    9650:	d006      	beq.n	9660 <_usb_d_dev_init+0x50>
			hri_usbdevice_clear_CTRLA_ENABLE_bit(hw);
    9652:	68f8      	ldr	r0, [r7, #12]
    9654:	4b20      	ldr	r3, [pc, #128]	; (96d8 <_usb_d_dev_init+0xc8>)
    9656:	4798      	blx	r3
			hri_usbdevice_wait_for_sync(hw, USB_SYNCBUSY_ENABLE);
    9658:	2102      	movs	r1, #2
    965a:	68f8      	ldr	r0, [r7, #12]
    965c:	4b1f      	ldr	r3, [pc, #124]	; (96dc <_usb_d_dev_init+0xcc>)
    965e:	4798      	blx	r3
		}
		hri_usbdevice_write_CTRLA_reg(hw, USB_CTRLA_SWRST);
    9660:	2101      	movs	r1, #1
    9662:	68f8      	ldr	r0, [r7, #12]
    9664:	4b1e      	ldr	r3, [pc, #120]	; (96e0 <_usb_d_dev_init+0xd0>)
    9666:	4798      	blx	r3
	}
	hri_usbdevice_wait_for_sync(hw, USB_SYNCBUSY_SWRST);
    9668:	2101      	movs	r1, #1
    966a:	68f8      	ldr	r0, [r7, #12]
    966c:	4b1b      	ldr	r3, [pc, #108]	; (96dc <_usb_d_dev_init+0xcc>)
    966e:	4798      	blx	r3

	dev_inst.callbacks.sof   = (_usb_d_dev_sof_cb_t)_dummy_func_no_return;
    9670:	4b1c      	ldr	r3, [pc, #112]	; (96e4 <_usb_d_dev_init+0xd4>)
    9672:	4a1d      	ldr	r2, [pc, #116]	; (96e8 <_usb_d_dev_init+0xd8>)
    9674:	601a      	str	r2, [r3, #0]
	dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)_dummy_func_no_return;
    9676:	4b1b      	ldr	r3, [pc, #108]	; (96e4 <_usb_d_dev_init+0xd4>)
    9678:	4a1b      	ldr	r2, [pc, #108]	; (96e8 <_usb_d_dev_init+0xd8>)
    967a:	605a      	str	r2, [r3, #4]

	dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)_dummy_func_no_return;
    967c:	4b19      	ldr	r3, [pc, #100]	; (96e4 <_usb_d_dev_init+0xd4>)
    967e:	4a1a      	ldr	r2, [pc, #104]	; (96e8 <_usb_d_dev_init+0xd8>)
    9680:	609a      	str	r2, [r3, #8]
	dev_inst.ep_callbacks.more  = (_usb_d_dev_ep_cb_more_t)_dummy_func_no_return;
    9682:	4b18      	ldr	r3, [pc, #96]	; (96e4 <_usb_d_dev_init+0xd4>)
    9684:	4a18      	ldr	r2, [pc, #96]	; (96e8 <_usb_d_dev_init+0xd8>)
    9686:	60da      	str	r2, [r3, #12]
	dev_inst.ep_callbacks.done  = (_usb_d_dev_ep_cb_done_t)_dummy_func_no_return;
    9688:	4b16      	ldr	r3, [pc, #88]	; (96e4 <_usb_d_dev_init+0xd4>)
    968a:	4a17      	ldr	r2, [pc, #92]	; (96e8 <_usb_d_dev_init+0xd8>)
    968c:	611a      	str	r2, [r3, #16]

	_usb_d_dev_reset_epts();
    968e:	4b17      	ldr	r3, [pc, #92]	; (96ec <_usb_d_dev_init+0xdc>)
    9690:	4798      	blx	r3

	_usb_load_calib();
    9692:	4b17      	ldr	r3, [pc, #92]	; (96f0 <_usb_d_dev_init+0xe0>)
    9694:	4798      	blx	r3

	hri_usbdevice_write_CTRLA_reg(hw, USB_CTRLA_RUNSTDBY);
    9696:	2104      	movs	r1, #4
    9698:	68f8      	ldr	r0, [r7, #12]
    969a:	4b11      	ldr	r3, [pc, #68]	; (96e0 <_usb_d_dev_init+0xd0>)
    969c:	4798      	blx	r3
	hri_usbdevice_write_DESCADD_reg(hw, (uint32_t)prvt_inst.desc_table);
    969e:	4b15      	ldr	r3, [pc, #84]	; (96f4 <_usb_d_dev_init+0xe4>)
    96a0:	4619      	mov	r1, r3
    96a2:	68f8      	ldr	r0, [r7, #12]
    96a4:	4b14      	ldr	r3, [pc, #80]	; (96f8 <_usb_d_dev_init+0xe8>)
    96a6:	4798      	blx	r3
	hri_usbdevice_write_CTRLB_reg(hw, spdconf[speed] | USB_DEVICE_CTRLB_DETACH);
    96a8:	7afb      	ldrb	r3, [r7, #11]
    96aa:	f107 0210 	add.w	r2, r7, #16
    96ae:	4413      	add	r3, r2
    96b0:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
    96b4:	f043 0301 	orr.w	r3, r3, #1
    96b8:	b2db      	uxtb	r3, r3
    96ba:	b29b      	uxth	r3, r3
    96bc:	4619      	mov	r1, r3
    96be:	68f8      	ldr	r0, [r7, #12]
    96c0:	4b0e      	ldr	r3, [pc, #56]	; (96fc <_usb_d_dev_init+0xec>)
    96c2:	4798      	blx	r3

	return ERR_NONE;
    96c4:	2300      	movs	r3, #0
}
    96c6:	4618      	mov	r0, r3
    96c8:	3710      	adds	r7, #16
    96ca:	46bd      	mov	sp, r7
    96cc:	bd80      	pop	{r7, pc}
    96ce:	bf00      	nop
    96d0:	00007ca9 	.word	0x00007ca9
    96d4:	00007ff9 	.word	0x00007ff9
    96d8:	00007fcd 	.word	0x00007fcd
    96dc:	00007c7f 	.word	0x00007c7f
    96e0:	00008029 	.word	0x00008029
    96e4:	20000e84 	.word	0x20000e84
    96e8:	000080f1 	.word	0x000080f1
    96ec:	00009595 	.word	0x00009595
    96f0:	00008109 	.word	0x00008109
    96f4:	20000f4c 	.word	0x20000f4c
    96f8:	000080d5 	.word	0x000080d5
    96fc:	00008099 	.word	0x00008099

00009700 <_usb_d_dev_enable>:
	NVIC_DisableIRQ(USB_3_IRQn);
	NVIC_ClearPendingIRQ(USB_3_IRQn);
}

int32_t _usb_d_dev_enable(void)
{
    9700:	b580      	push	{r7, lr}
    9702:	b082      	sub	sp, #8
    9704:	af00      	add	r7, sp, #0
	Usb *   hw = USB;
    9706:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    970a:	607b      	str	r3, [r7, #4]
	uint8_t ctrla;

	if (hri_usbdevice_get_SYNCBUSY_reg(hw, (USB_SYNCBUSY_ENABLE | USB_SYNCBUSY_SWRST))) {
    970c:	2103      	movs	r1, #3
    970e:	6878      	ldr	r0, [r7, #4]
    9710:	4b17      	ldr	r3, [pc, #92]	; (9770 <_usb_d_dev_enable+0x70>)
    9712:	4798      	blx	r3
    9714:	4603      	mov	r3, r0
    9716:	2b00      	cmp	r3, #0
    9718:	d002      	beq.n	9720 <_usb_d_dev_enable+0x20>
		return -USB_ERR_DENIED;
    971a:	f06f 0310 	mvn.w	r3, #16
    971e:	e023      	b.n	9768 <_usb_d_dev_enable+0x68>
	}
	ctrla = hri_usbdevice_read_CTRLA_reg(hw);
    9720:	6878      	ldr	r0, [r7, #4]
    9722:	4b14      	ldr	r3, [pc, #80]	; (9774 <_usb_d_dev_enable+0x74>)
    9724:	4798      	blx	r3
    9726:	4603      	mov	r3, r0
    9728:	70fb      	strb	r3, [r7, #3]
	if ((ctrla & USB_CTRLA_ENABLE) == 0) {
    972a:	78fb      	ldrb	r3, [r7, #3]
    972c:	f003 0302 	and.w	r3, r3, #2
    9730:	2b00      	cmp	r3, #0
    9732:	d107      	bne.n	9744 <_usb_d_dev_enable+0x44>
		hri_usbdevice_write_CTRLA_reg(hw, ctrla | USB_CTRLA_ENABLE);
    9734:	78fb      	ldrb	r3, [r7, #3]
    9736:	f043 0302 	orr.w	r3, r3, #2
    973a:	b2db      	uxtb	r3, r3
    973c:	4619      	mov	r1, r3
    973e:	6878      	ldr	r0, [r7, #4]
    9740:	4b0d      	ldr	r3, [pc, #52]	; (9778 <_usb_d_dev_enable+0x78>)
    9742:	4798      	blx	r3
	}

	NVIC_EnableIRQ(USB_0_IRQn);
    9744:	2050      	movs	r0, #80	; 0x50
    9746:	4b0d      	ldr	r3, [pc, #52]	; (977c <_usb_d_dev_enable+0x7c>)
    9748:	4798      	blx	r3
	NVIC_EnableIRQ(USB_1_IRQn);
    974a:	2051      	movs	r0, #81	; 0x51
    974c:	4b0b      	ldr	r3, [pc, #44]	; (977c <_usb_d_dev_enable+0x7c>)
    974e:	4798      	blx	r3
	NVIC_EnableIRQ(USB_2_IRQn);
    9750:	2052      	movs	r0, #82	; 0x52
    9752:	4b0a      	ldr	r3, [pc, #40]	; (977c <_usb_d_dev_enable+0x7c>)
    9754:	4798      	blx	r3
	NVIC_EnableIRQ(USB_3_IRQn);
    9756:	2053      	movs	r0, #83	; 0x53
    9758:	4b08      	ldr	r3, [pc, #32]	; (977c <_usb_d_dev_enable+0x7c>)
    975a:	4798      	blx	r3

	hri_usbdevice_set_INTEN_reg(hw,
    975c:	f240 218d 	movw	r1, #653	; 0x28d
    9760:	6878      	ldr	r0, [r7, #4]
    9762:	4b07      	ldr	r3, [pc, #28]	; (9780 <_usb_d_dev_enable+0x80>)
    9764:	4798      	blx	r3
	                            USB_DEVICE_INTENSET_SOF | USB_DEVICE_INTENSET_EORST | USB_DEVICE_INTENSET_RAMACER
	                                | USB_D_SUSPEND_INT_FLAGS);

	return ERR_NONE;
    9766:	2300      	movs	r3, #0
}
    9768:	4618      	mov	r0, r3
    976a:	3708      	adds	r7, #8
    976c:	46bd      	mov	sp, r7
    976e:	bd80      	pop	{r7, pc}
    9770:	00007fa3 	.word	0x00007fa3
    9774:	00008051 	.word	0x00008051
    9778:	00008029 	.word	0x00008029
    977c:	00007bb5 	.word	0x00007bb5
    9780:	00007f4d 	.word	0x00007f4d

00009784 <_usb_d_dev_attach>:

	return ERR_NONE;
}

void _usb_d_dev_attach(void)
{
    9784:	b580      	push	{r7, lr}
    9786:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_CTRLB_DETACH_bit(USB);
    9788:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    978c:	4b01      	ldr	r3, [pc, #4]	; (9794 <_usb_d_dev_attach+0x10>)
    978e:	4798      	blx	r3
}
    9790:	bf00      	nop
    9792:	bd80      	pop	{r7, pc}
    9794:	00008075 	.word	0x00008075

00009798 <_usb_d_dev_set_address>:

	return speed[sp];
}

void _usb_d_dev_set_address(uint8_t addr)
{
    9798:	b580      	push	{r7, lr}
    979a:	b082      	sub	sp, #8
    979c:	af00      	add	r7, sp, #0
    979e:	4603      	mov	r3, r0
    97a0:	71fb      	strb	r3, [r7, #7]
	hri_usbdevice_write_DADD_reg(USB, USB_DEVICE_DADD_ADDEN | USB_DEVICE_DADD_DADD(addr));
    97a2:	79fb      	ldrb	r3, [r7, #7]
    97a4:	f063 037f 	orn	r3, r3, #127	; 0x7f
    97a8:	b2db      	uxtb	r3, r3
    97aa:	4619      	mov	r1, r3
    97ac:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    97b0:	4b02      	ldr	r3, [pc, #8]	; (97bc <_usb_d_dev_set_address+0x24>)
    97b2:	4798      	blx	r3
}
    97b4:	bf00      	nop
    97b6:	3708      	adds	r7, #8
    97b8:	46bd      	mov	sp, r7
    97ba:	bd80      	pop	{r7, pc}
    97bc:	000080b7 	.word	0x000080b7

000097c0 <_usb_d_dev_trans_setup>:
/**
 *  \brief Start a setup transaction
 *  \param[in] ept Endpoint information.
 */
static inline void _usb_d_dev_trans_setup(struct _usb_d_dev_ep *ept)
{
    97c0:	b590      	push	{r4, r7, lr}
    97c2:	b085      	sub	sp, #20
    97c4:	af00      	add	r7, sp, #0
    97c6:	6078      	str	r0, [r7, #4]
	Usb *   hw  = USB;
    97c8:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    97cc:	60fb      	str	r3, [r7, #12]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    97ce:	687b      	ldr	r3, [r7, #4]
    97d0:	7c9b      	ldrb	r3, [r3, #18]
    97d2:	f003 030f 	and.w	r3, r3, #15
    97d6:	72fb      	strb	r3, [r7, #11]

	_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    97d8:	687b      	ldr	r3, [r7, #4]
    97da:	68db      	ldr	r3, [r3, #12]
    97dc:	461a      	mov	r2, r3
    97de:	7afb      	ldrb	r3, [r7, #11]
    97e0:	2100      	movs	r1, #0
    97e2:	4618      	mov	r0, r3
    97e4:	4b0f      	ldr	r3, [pc, #60]	; (9824 <_usb_d_dev_trans_setup+0x64>)
    97e6:	4798      	blx	r3
	_usbd_ep_set_out_trans(epn, 0, ept->size, 0);
    97e8:	687b      	ldr	r3, [r7, #4]
    97ea:	8a1b      	ldrh	r3, [r3, #16]
    97ec:	461a      	mov	r2, r3
    97ee:	7af8      	ldrb	r0, [r7, #11]
    97f0:	2300      	movs	r3, #0
    97f2:	2100      	movs	r1, #0
    97f4:	4c0c      	ldr	r4, [pc, #48]	; (9828 <_usb_d_dev_trans_setup+0x68>)
    97f6:	47a0      	blx	r4

	hri_usbendpoint_clear_EPSTATUS_reg(hw, epn, USB_DEVICE_EPSTATUS_STALLRQ(0x3) | USB_DEVICE_EPSTATUS_BK1RDY);
    97f8:	7afb      	ldrb	r3, [r7, #11]
    97fa:	22b0      	movs	r2, #176	; 0xb0
    97fc:	4619      	mov	r1, r3
    97fe:	68f8      	ldr	r0, [r7, #12]
    9800:	4b0a      	ldr	r3, [pc, #40]	; (982c <_usb_d_dev_trans_setup+0x6c>)
    9802:	4798      	blx	r3
	_usbd_ep_set_out_rdy(epn, 0, false);
    9804:	7afb      	ldrb	r3, [r7, #11]
    9806:	2200      	movs	r2, #0
    9808:	2100      	movs	r1, #0
    980a:	4618      	mov	r0, r3
    980c:	4b08      	ldr	r3, [pc, #32]	; (9830 <_usb_d_dev_trans_setup+0x70>)
    980e:	4798      	blx	r3

	hri_usbendpoint_set_EPINTEN_reg(hw, epn, USB_D_SETUP_INT_FLAGS);
    9810:	7afb      	ldrb	r3, [r7, #11]
    9812:	2210      	movs	r2, #16
    9814:	4619      	mov	r1, r3
    9816:	68f8      	ldr	r0, [r7, #12]
    9818:	4b06      	ldr	r3, [pc, #24]	; (9834 <_usb_d_dev_trans_setup+0x74>)
    981a:	4798      	blx	r3
}
    981c:	bf00      	nop
    981e:	3714      	adds	r7, #20
    9820:	46bd      	mov	sp, r7
    9822:	bd90      	pop	{r4, r7, pc}
    9824:	00008555 	.word	0x00008555
    9828:	000086dd 	.word	0x000086dd
    982c:	00007db5 	.word	0x00007db5
    9830:	000087ad 	.word	0x000087ad
    9834:	00007e09 	.word	0x00007e09

00009838 <_usb_d_dev_ep_init>:
{
	return _usb_d_dev_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_siz);
}

int32_t _usb_d_dev_ep_init(const uint8_t ep, const uint8_t attr, const uint16_t max_pkt_siz)
{
    9838:	b580      	push	{r7, lr}
    983a:	b088      	sub	sp, #32
    983c:	af00      	add	r7, sp, #0
    983e:	4603      	mov	r3, r0
    9840:	71fb      	strb	r3, [r7, #7]
    9842:	460b      	mov	r3, r1
    9844:	71bb      	strb	r3, [r7, #6]
    9846:	4613      	mov	r3, r2
    9848:	80bb      	strh	r3, [r7, #4]
	uint8_t               epn = USB_EP_GET_N(ep);
    984a:	79fb      	ldrb	r3, [r7, #7]
    984c:	f003 030f 	and.w	r3, r3, #15
    9850:	77fb      	strb	r3, [r7, #31]
	bool                  dir = USB_EP_GET_DIR(ep);
    9852:	79fb      	ldrb	r3, [r7, #7]
    9854:	f003 0380 	and.w	r3, r3, #128	; 0x80
    9858:	2b00      	cmp	r3, #0
    985a:	bf14      	ite	ne
    985c:	2301      	movne	r3, #1
    985e:	2300      	moveq	r3, #0
    9860:	77bb      	strb	r3, [r7, #30]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    9862:	7fba      	ldrb	r2, [r7, #30]
    9864:	7ffb      	ldrb	r3, [r7, #31]
    9866:	4611      	mov	r1, r2
    9868:	4618      	mov	r0, r3
    986a:	4b3e      	ldr	r3, [pc, #248]	; (9964 <_usb_d_dev_ep_init+0x12c>)
    986c:	4798      	blx	r3
    986e:	61b8      	str	r0, [r7, #24]

	uint8_t                        ep_type = attr & USB_EP_XTYPE_MASK;
    9870:	79bb      	ldrb	r3, [r7, #6]
    9872:	f003 0303 	and.w	r3, r3, #3
    9876:	75fb      	strb	r3, [r7, #23]
	const struct _usb_ep_cfg_item *pcfg    = &_usb_ep_cfgs[epn];
    9878:	7ffa      	ldrb	r2, [r7, #31]
    987a:	4613      	mov	r3, r2
    987c:	005b      	lsls	r3, r3, #1
    987e:	4413      	add	r3, r2
    9880:	009b      	lsls	r3, r3, #2
    9882:	4a39      	ldr	r2, [pc, #228]	; (9968 <_usb_d_dev_ep_init+0x130>)
    9884:	4413      	add	r3, r2
    9886:	613b      	str	r3, [r7, #16]

	if (epn > CONF_USB_D_MAX_EP_N) {
    9888:	7ffb      	ldrb	r3, [r7, #31]
    988a:	2b04      	cmp	r3, #4
    988c:	d902      	bls.n	9894 <_usb_d_dev_ep_init+0x5c>
		return -USB_ERR_PARAM;
    988e:	f06f 0311 	mvn.w	r3, #17
    9892:	e063      	b.n	995c <_usb_d_dev_ep_init+0x124>
	}
	if (ept->ep != 0xFF) {
    9894:	69bb      	ldr	r3, [r7, #24]
    9896:	7c9b      	ldrb	r3, [r3, #18]
    9898:	2bff      	cmp	r3, #255	; 0xff
    989a:	d002      	beq.n	98a2 <_usb_d_dev_ep_init+0x6a>
		return -USB_ERR_REDO;
    989c:	f06f 0313 	mvn.w	r3, #19
    98a0:	e05c      	b.n	995c <_usb_d_dev_ep_init+0x124>
	}
	if (ep_type == USB_EP_XTYPE_CTRL) {
    98a2:	7dfb      	ldrb	r3, [r7, #23]
    98a4:	2b00      	cmp	r3, #0
    98a6:	d11f      	bne.n	98e8 <_usb_d_dev_ep_init+0xb0>
		struct _usb_d_dev_ep *ept_in = _usb_d_dev_ept(epn, !dir);
    98a8:	7fbb      	ldrb	r3, [r7, #30]
    98aa:	2b00      	cmp	r3, #0
    98ac:	bf14      	ite	ne
    98ae:	2301      	movne	r3, #1
    98b0:	2300      	moveq	r3, #0
    98b2:	b2db      	uxtb	r3, r3
    98b4:	f083 0301 	eor.w	r3, r3, #1
    98b8:	b2db      	uxtb	r3, r3
    98ba:	f003 0301 	and.w	r3, r3, #1
    98be:	b2da      	uxtb	r2, r3
    98c0:	7ffb      	ldrb	r3, [r7, #31]
    98c2:	4611      	mov	r1, r2
    98c4:	4618      	mov	r0, r3
    98c6:	4b27      	ldr	r3, [pc, #156]	; (9964 <_usb_d_dev_ep_init+0x12c>)
    98c8:	4798      	blx	r3
    98ca:	60f8      	str	r0, [r7, #12]
		if (ept_in->ep != 0xFF) {
    98cc:	68fb      	ldr	r3, [r7, #12]
    98ce:	7c9b      	ldrb	r3, [r3, #18]
    98d0:	2bff      	cmp	r3, #255	; 0xff
    98d2:	d002      	beq.n	98da <_usb_d_dev_ep_init+0xa2>
			return -USB_ERR_REDO;
    98d4:	f06f 0313 	mvn.w	r3, #19
    98d8:	e040      	b.n	995c <_usb_d_dev_ep_init+0x124>
		}
		if (pcfg->cache == NULL) {
    98da:	693b      	ldr	r3, [r7, #16]
    98dc:	681b      	ldr	r3, [r3, #0]
    98de:	2b00      	cmp	r3, #0
    98e0:	d102      	bne.n	98e8 <_usb_d_dev_ep_init+0xb0>
			return -USB_ERR_FUNC;
    98e2:	f06f 0312 	mvn.w	r3, #18
    98e6:	e039      	b.n	995c <_usb_d_dev_ep_init+0x124>
		}
	}
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    98e8:	7fbb      	ldrb	r3, [r7, #30]
    98ea:	2b00      	cmp	r3, #0
    98ec:	d007      	beq.n	98fe <_usb_d_dev_ep_init+0xc6>
    98ee:	693b      	ldr	r3, [r7, #16]
    98f0:	685b      	ldr	r3, [r3, #4]
    98f2:	2b00      	cmp	r3, #0
    98f4:	bf14      	ite	ne
    98f6:	2301      	movne	r3, #1
    98f8:	2300      	moveq	r3, #0
    98fa:	b2db      	uxtb	r3, r3
    98fc:	e006      	b.n	990c <_usb_d_dev_ep_init+0xd4>
    98fe:	693b      	ldr	r3, [r7, #16]
    9900:	681b      	ldr	r3, [r3, #0]
    9902:	2b00      	cmp	r3, #0
    9904:	bf14      	ite	ne
    9906:	2301      	movne	r3, #1
    9908:	2300      	moveq	r3, #0
    990a:	b2db      	uxtb	r3, r3
    990c:	2b00      	cmp	r3, #0
    990e:	d00f      	beq.n	9930 <_usb_d_dev_ep_init+0xf8>
    9910:	7fbb      	ldrb	r3, [r7, #30]
    9912:	2b00      	cmp	r3, #0
    9914:	d003      	beq.n	991e <_usb_d_dev_ep_init+0xe6>
    9916:	693b      	ldr	r3, [r7, #16]
    9918:	895b      	ldrh	r3, [r3, #10]
    991a:	461a      	mov	r2, r3
    991c:	e002      	b.n	9924 <_usb_d_dev_ep_init+0xec>
    991e:	693b      	ldr	r3, [r7, #16]
    9920:	891b      	ldrh	r3, [r3, #8]
    9922:	461a      	mov	r2, r3
    9924:	88bb      	ldrh	r3, [r7, #4]
    9926:	429a      	cmp	r2, r3
    9928:	da02      	bge.n	9930 <_usb_d_dev_ep_init+0xf8>
		return -USB_ERR_FUNC;
    992a:	f06f 0312 	mvn.w	r3, #18
    992e:	e015      	b.n	995c <_usb_d_dev_ep_init+0x124>
	}

	/* Initialize EP n settings */
	ept->cache    = (uint8_t *)(dir ? pcfg->i_cache : pcfg->cache);
    9930:	7fbb      	ldrb	r3, [r7, #30]
    9932:	2b00      	cmp	r3, #0
    9934:	d002      	beq.n	993c <_usb_d_dev_ep_init+0x104>
    9936:	693b      	ldr	r3, [r7, #16]
    9938:	685b      	ldr	r3, [r3, #4]
    993a:	e001      	b.n	9940 <_usb_d_dev_ep_init+0x108>
    993c:	693b      	ldr	r3, [r7, #16]
    993e:	681b      	ldr	r3, [r3, #0]
    9940:	69ba      	ldr	r2, [r7, #24]
    9942:	60d3      	str	r3, [r2, #12]
	ept->size     = max_pkt_siz;
    9944:	69bb      	ldr	r3, [r7, #24]
    9946:	88ba      	ldrh	r2, [r7, #4]
    9948:	821a      	strh	r2, [r3, #16]
	ept->flags.u8 = (ep_type + 1);
    994a:	7dfb      	ldrb	r3, [r7, #23]
    994c:	3301      	adds	r3, #1
    994e:	b2da      	uxtb	r2, r3
    9950:	69bb      	ldr	r3, [r7, #24]
    9952:	74da      	strb	r2, [r3, #19]
	ept->ep       = ep;
    9954:	69bb      	ldr	r3, [r7, #24]
    9956:	79fa      	ldrb	r2, [r7, #7]
    9958:	749a      	strb	r2, [r3, #18]

	return USB_OK;
    995a:	2300      	movs	r3, #0
}
    995c:	4618      	mov	r0, r3
    995e:	3720      	adds	r7, #32
    9960:	46bd      	mov	sp, r7
    9962:	bd80      	pop	{r7, pc}
    9964:	00008869 	.word	0x00008869
    9968:	0001317c 	.word	0x0001317c

0000996c <_usb_d_dev_ep_deinit>:

void _usb_d_dev_ep_deinit(uint8_t ep)
{
    996c:	b580      	push	{r7, lr}
    996e:	b086      	sub	sp, #24
    9970:	af00      	add	r7, sp, #0
    9972:	4603      	mov	r3, r0
    9974:	71fb      	strb	r3, [r7, #7]
	Usb *                 hw  = USB;
    9976:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    997a:	617b      	str	r3, [r7, #20]
	uint8_t               epn = USB_EP_GET_N(ep);
    997c:	79fb      	ldrb	r3, [r7, #7]
    997e:	f003 030f 	and.w	r3, r3, #15
    9982:	74fb      	strb	r3, [r7, #19]
	bool                  dir = USB_EP_GET_DIR(ep);
    9984:	79fb      	ldrb	r3, [r7, #7]
    9986:	f003 0380 	and.w	r3, r3, #128	; 0x80
    998a:	2b00      	cmp	r3, #0
    998c:	bf14      	ite	ne
    998e:	2301      	movne	r3, #1
    9990:	2300      	moveq	r3, #0
    9992:	74bb      	strb	r3, [r7, #18]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    9994:	7cba      	ldrb	r2, [r7, #18]
    9996:	7cfb      	ldrb	r3, [r7, #19]
    9998:	4611      	mov	r1, r2
    999a:	4618      	mov	r0, r3
    999c:	4b2a      	ldr	r3, [pc, #168]	; (9a48 <_usb_d_dev_ep_deinit+0xdc>)
    999e:	4798      	blx	r3
    99a0:	60f8      	str	r0, [r7, #12]

	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    99a2:	7cfb      	ldrb	r3, [r7, #19]
    99a4:	2b04      	cmp	r3, #4
    99a6:	d84a      	bhi.n	9a3e <_usb_d_dev_ep_deinit+0xd2>
    99a8:	68fb      	ldr	r3, [r7, #12]
    99aa:	7c9b      	ldrb	r3, [r3, #18]
    99ac:	2bff      	cmp	r3, #255	; 0xff
    99ae:	d046      	beq.n	9a3e <_usb_d_dev_ep_deinit+0xd2>
		return;
	}

	/* Finish pending transactions. */
	_usb_d_dev_trans_stop(ept, dir, USB_TRANS_RESET);
    99b0:	7cbb      	ldrb	r3, [r7, #18]
    99b2:	2203      	movs	r2, #3
    99b4:	4619      	mov	r1, r3
    99b6:	68f8      	ldr	r0, [r7, #12]
    99b8:	4b24      	ldr	r3, [pc, #144]	; (9a4c <_usb_d_dev_ep_deinit+0xe0>)
    99ba:	4798      	blx	r3

	/* Disable the endpoint. */
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    99bc:	68fb      	ldr	r3, [r7, #12]
    99be:	7cdb      	ldrb	r3, [r3, #19]
    99c0:	f003 0307 	and.w	r3, r3, #7
    99c4:	b2db      	uxtb	r3, r3
    99c6:	2b01      	cmp	r3, #1
    99c8:	d107      	bne.n	99da <_usb_d_dev_ep_deinit+0x6e>
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg = 0;
    99ca:	79fb      	ldrb	r3, [r7, #7]
    99cc:	697a      	ldr	r2, [r7, #20]
    99ce:	3308      	adds	r3, #8
    99d0:	015b      	lsls	r3, r3, #5
    99d2:	4413      	add	r3, r2
    99d4:	2200      	movs	r2, #0
    99d6:	701a      	strb	r2, [r3, #0]
    99d8:	e02a      	b.n	9a30 <_usb_d_dev_ep_deinit+0xc4>
	} else if (USB_EP_GET_DIR(ep)) {
    99da:	f997 3007 	ldrsb.w	r3, [r7, #7]
    99de:	2b00      	cmp	r3, #0
    99e0:	da15      	bge.n	9a0e <_usb_d_dev_ep_deinit+0xa2>
		hw->DEVICE.DeviceEndpoint[USB_EP_GET_N(ep)].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE1_Msk;
    99e2:	79fb      	ldrb	r3, [r7, #7]
    99e4:	f003 030f 	and.w	r3, r3, #15
    99e8:	79fa      	ldrb	r2, [r7, #7]
    99ea:	f002 020f 	and.w	r2, r2, #15
    99ee:	6979      	ldr	r1, [r7, #20]
    99f0:	3208      	adds	r2, #8
    99f2:	0152      	lsls	r2, r2, #5
    99f4:	440a      	add	r2, r1
    99f6:	7812      	ldrb	r2, [r2, #0]
    99f8:	b2d2      	uxtb	r2, r2
    99fa:	f022 0270 	bic.w	r2, r2, #112	; 0x70
    99fe:	b2d1      	uxtb	r1, r2
    9a00:	697a      	ldr	r2, [r7, #20]
    9a02:	3308      	adds	r3, #8
    9a04:	015b      	lsls	r3, r3, #5
    9a06:	4413      	add	r3, r2
    9a08:	460a      	mov	r2, r1
    9a0a:	701a      	strb	r2, [r3, #0]
    9a0c:	e010      	b.n	9a30 <_usb_d_dev_ep_deinit+0xc4>
	} else {
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE0_Msk;
    9a0e:	79fb      	ldrb	r3, [r7, #7]
    9a10:	79fa      	ldrb	r2, [r7, #7]
    9a12:	6979      	ldr	r1, [r7, #20]
    9a14:	3208      	adds	r2, #8
    9a16:	0152      	lsls	r2, r2, #5
    9a18:	440a      	add	r2, r1
    9a1a:	7812      	ldrb	r2, [r2, #0]
    9a1c:	b2d2      	uxtb	r2, r2
    9a1e:	f022 0207 	bic.w	r2, r2, #7
    9a22:	b2d1      	uxtb	r1, r2
    9a24:	697a      	ldr	r2, [r7, #20]
    9a26:	3308      	adds	r3, #8
    9a28:	015b      	lsls	r3, r3, #5
    9a2a:	4413      	add	r3, r2
    9a2c:	460a      	mov	r2, r1
    9a2e:	701a      	strb	r2, [r3, #0]
	}
	ept->flags.u8 = 0;
    9a30:	68fb      	ldr	r3, [r7, #12]
    9a32:	2200      	movs	r2, #0
    9a34:	74da      	strb	r2, [r3, #19]
	ept->ep       = 0xFF;
    9a36:	68fb      	ldr	r3, [r7, #12]
    9a38:	22ff      	movs	r2, #255	; 0xff
    9a3a:	749a      	strb	r2, [r3, #18]
    9a3c:	e000      	b.n	9a40 <_usb_d_dev_ep_deinit+0xd4>
		return;
    9a3e:	bf00      	nop
}
    9a40:	3718      	adds	r7, #24
    9a42:	46bd      	mov	sp, r7
    9a44:	bd80      	pop	{r7, pc}
    9a46:	bf00      	nop
    9a48:	00008869 	.word	0x00008869
    9a4c:	00009ea1 	.word	0x00009ea1

00009a50 <_usb_d_dev_ep_enable>:

int32_t _usb_d_dev_ep_enable(const uint8_t ep)
{
    9a50:	b5b0      	push	{r4, r5, r7, lr}
    9a52:	b088      	sub	sp, #32
    9a54:	af00      	add	r7, sp, #0
    9a56:	4603      	mov	r3, r0
    9a58:	71fb      	strb	r3, [r7, #7]
	Usb *                 hw    = USB;
    9a5a:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    9a5e:	61fb      	str	r3, [r7, #28]
	uint8_t               epn   = USB_EP_GET_N(ep);
    9a60:	79fb      	ldrb	r3, [r7, #7]
    9a62:	f003 030f 	and.w	r3, r3, #15
    9a66:	76fb      	strb	r3, [r7, #27]
	bool                  dir   = USB_EP_GET_DIR(ep);
    9a68:	79fb      	ldrb	r3, [r7, #7]
    9a6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
    9a6e:	2b00      	cmp	r3, #0
    9a70:	bf14      	ite	ne
    9a72:	2301      	movne	r3, #1
    9a74:	2300      	moveq	r3, #0
    9a76:	76bb      	strb	r3, [r7, #26]
	struct _usb_d_dev_ep *ept   = _usb_d_dev_ept(epn, dir);
    9a78:	7eba      	ldrb	r2, [r7, #26]
    9a7a:	7efb      	ldrb	r3, [r7, #27]
    9a7c:	4611      	mov	r1, r2
    9a7e:	4618      	mov	r0, r3
    9a80:	4b70      	ldr	r3, [pc, #448]	; (9c44 <_usb_d_dev_ep_enable+0x1f4>)
    9a82:	4798      	blx	r3
    9a84:	6178      	str	r0, [r7, #20]
	uint8_t               epcfg = hri_usbendpoint_read_EPCFG_reg(hw, epn);
    9a86:	7efb      	ldrb	r3, [r7, #27]
    9a88:	4619      	mov	r1, r3
    9a8a:	69f8      	ldr	r0, [r7, #28]
    9a8c:	4b6e      	ldr	r3, [pc, #440]	; (9c48 <_usb_d_dev_ep_enable+0x1f8>)
    9a8e:	4798      	blx	r3
    9a90:	4603      	mov	r3, r0
    9a92:	74fb      	strb	r3, [r7, #19]
	UsbDeviceDescBank *   bank;

	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    9a94:	7efb      	ldrb	r3, [r7, #27]
    9a96:	2b04      	cmp	r3, #4
    9a98:	d803      	bhi.n	9aa2 <_usb_d_dev_ep_enable+0x52>
    9a9a:	697b      	ldr	r3, [r7, #20]
    9a9c:	7c9b      	ldrb	r3, [r3, #18]
    9a9e:	2bff      	cmp	r3, #255	; 0xff
    9aa0:	d102      	bne.n	9aa8 <_usb_d_dev_ep_enable+0x58>
		return -USB_ERR_PARAM;
    9aa2:	f06f 0311 	mvn.w	r3, #17
    9aa6:	e0c8      	b.n	9c3a <_usb_d_dev_ep_enable+0x1ea>
	}

	bank = prvt_inst.desc_table[epn].DeviceDescBank;
    9aa8:	7efb      	ldrb	r3, [r7, #27]
    9aaa:	015b      	lsls	r3, r3, #5
    9aac:	4a67      	ldr	r2, [pc, #412]	; (9c4c <_usb_d_dev_ep_enable+0x1fc>)
    9aae:	4413      	add	r3, r2
    9ab0:	60fb      	str	r3, [r7, #12]
	if (ept->flags.bits.eptype == USB_D_EPTYPE_CTRL) {
    9ab2:	697b      	ldr	r3, [r7, #20]
    9ab4:	7cdb      	ldrb	r3, [r3, #19]
    9ab6:	f003 0307 	and.w	r3, r3, #7
    9aba:	b2db      	uxtb	r3, r3
    9abc:	2b01      	cmp	r3, #1
    9abe:	d14b      	bne.n	9b58 <_usb_d_dev_ep_enable+0x108>
		if (epcfg & (USB_DEVICE_EPCFG_EPTYPE1_Msk | USB_DEVICE_EPCFG_EPTYPE0_Msk)) {
    9ac0:	7cfb      	ldrb	r3, [r7, #19]
    9ac2:	f003 0377 	and.w	r3, r3, #119	; 0x77
    9ac6:	2b00      	cmp	r3, #0
    9ac8:	d002      	beq.n	9ad0 <_usb_d_dev_ep_enable+0x80>
			return -USB_ERR_REDO;
    9aca:	f06f 0313 	mvn.w	r3, #19
    9ace:	e0b4      	b.n	9c3a <_usb_d_dev_ep_enable+0x1ea>
		}
		hri_usbendpoint_write_EPCFG_reg(hw, epn, USB_D_EPCFG_CTRL);
    9ad0:	7efb      	ldrb	r3, [r7, #27]
    9ad2:	2211      	movs	r2, #17
    9ad4:	4619      	mov	r1, r3
    9ad6:	69f8      	ldr	r0, [r7, #28]
    9ad8:	4b5d      	ldr	r3, [pc, #372]	; (9c50 <_usb_d_dev_ep_enable+0x200>)
    9ada:	4798      	blx	r3
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    9adc:	697b      	ldr	r3, [r7, #20]
    9ade:	8a1b      	ldrh	r3, [r3, #16]
    9ae0:	039b      	lsls	r3, r3, #14
    9ae2:	4c5c      	ldr	r4, [pc, #368]	; (9c54 <_usb_d_dev_ep_enable+0x204>)
    9ae4:	401c      	ands	r4, r3
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    9ae6:	697b      	ldr	r3, [r7, #20]
    9ae8:	8a1b      	ldrh	r3, [r3, #16]
    9aea:	4618      	mov	r0, r3
    9aec:	4b5a      	ldr	r3, [pc, #360]	; (9c58 <_usb_d_dev_ep_enable+0x208>)
    9aee:	4798      	blx	r3
    9af0:	4603      	mov	r3, r0
    9af2:	071b      	lsls	r3, r3, #28
    9af4:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    9af8:	ea44 0203 	orr.w	r2, r4, r3
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    9afc:	68fb      	ldr	r3, [r7, #12]
    9afe:	605a      	str	r2, [r3, #4]
		bank[1].PCKSIZE.reg
    9b00:	68fb      	ldr	r3, [r7, #12]
    9b02:	f103 0410 	add.w	r4, r3, #16
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    9b06:	697b      	ldr	r3, [r7, #20]
    9b08:	8a1b      	ldrh	r3, [r3, #16]
    9b0a:	f3c3 050d 	ubfx	r5, r3, #0, #14
    9b0e:	697b      	ldr	r3, [r7, #20]
    9b10:	8a1b      	ldrh	r3, [r3, #16]
    9b12:	4618      	mov	r0, r3
    9b14:	4b50      	ldr	r3, [pc, #320]	; (9c58 <_usb_d_dev_ep_enable+0x208>)
    9b16:	4798      	blx	r3
    9b18:	4603      	mov	r3, r0
    9b1a:	071b      	lsls	r3, r3, #28
    9b1c:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    9b20:	432b      	orrs	r3, r5
    9b22:	6063      	str	r3, [r4, #4]
		/* By default, control endpoint accept SETUP and NAK all other token. */
		_usbd_ep_set_out_rdy(epn, 0, false);
    9b24:	7efb      	ldrb	r3, [r7, #27]
    9b26:	2200      	movs	r2, #0
    9b28:	2100      	movs	r1, #0
    9b2a:	4618      	mov	r0, r3
    9b2c:	4b4b      	ldr	r3, [pc, #300]	; (9c5c <_usb_d_dev_ep_enable+0x20c>)
    9b2e:	4798      	blx	r3
		_usbd_ep_set_in_rdy(epn, 1, false);
    9b30:	7efb      	ldrb	r3, [r7, #27]
    9b32:	2200      	movs	r2, #0
    9b34:	2101      	movs	r1, #1
    9b36:	4618      	mov	r0, r3
    9b38:	4b49      	ldr	r3, [pc, #292]	; (9c60 <_usb_d_dev_ep_enable+0x210>)
    9b3a:	4798      	blx	r3

		_usbd_ep_clear_bank_status(epn, 0);
    9b3c:	7efb      	ldrb	r3, [r7, #27]
    9b3e:	2100      	movs	r1, #0
    9b40:	4618      	mov	r0, r3
    9b42:	4b48      	ldr	r3, [pc, #288]	; (9c64 <_usb_d_dev_ep_enable+0x214>)
    9b44:	4798      	blx	r3
		_usbd_ep_clear_bank_status(epn, 1);
    9b46:	7efb      	ldrb	r3, [r7, #27]
    9b48:	2101      	movs	r1, #1
    9b4a:	4618      	mov	r0, r3
    9b4c:	4b45      	ldr	r3, [pc, #276]	; (9c64 <_usb_d_dev_ep_enable+0x214>)
    9b4e:	4798      	blx	r3

		/* Enable SETUP reception for control endpoint. */
		_usb_d_dev_trans_setup(ept);
    9b50:	6978      	ldr	r0, [r7, #20]
    9b52:	4b45      	ldr	r3, [pc, #276]	; (9c68 <_usb_d_dev_ep_enable+0x218>)
    9b54:	4798      	blx	r3
    9b56:	e06f      	b.n	9c38 <_usb_d_dev_ep_enable+0x1e8>

	} else if (dir) {
    9b58:	7ebb      	ldrb	r3, [r7, #26]
    9b5a:	2b00      	cmp	r3, #0
    9b5c:	d038      	beq.n	9bd0 <_usb_d_dev_ep_enable+0x180>
		if (epcfg & USB_DEVICE_EPCFG_EPTYPE1_Msk) {
    9b5e:	7cfb      	ldrb	r3, [r7, #19]
    9b60:	f003 0370 	and.w	r3, r3, #112	; 0x70
    9b64:	2b00      	cmp	r3, #0
    9b66:	d002      	beq.n	9b6e <_usb_d_dev_ep_enable+0x11e>
			return -USB_ERR_REDO;
    9b68:	f06f 0313 	mvn.w	r3, #19
    9b6c:	e065      	b.n	9c3a <_usb_d_dev_ep_enable+0x1ea>
		}
		epcfg |= USB_DEVICE_EPCFG_EPTYPE1(ept->flags.bits.eptype);
    9b6e:	697b      	ldr	r3, [r7, #20]
    9b70:	7cdb      	ldrb	r3, [r3, #19]
    9b72:	f3c3 0302 	ubfx	r3, r3, #0, #3
    9b76:	b2db      	uxtb	r3, r3
    9b78:	011b      	lsls	r3, r3, #4
    9b7a:	b2db      	uxtb	r3, r3
    9b7c:	f003 0370 	and.w	r3, r3, #112	; 0x70
    9b80:	b2da      	uxtb	r2, r3
    9b82:	7cfb      	ldrb	r3, [r7, #19]
    9b84:	4313      	orrs	r3, r2
    9b86:	74fb      	strb	r3, [r7, #19]
		hri_usbendpoint_write_EPCFG_reg(hw, epn, epcfg);
    9b88:	7cfa      	ldrb	r2, [r7, #19]
    9b8a:	7efb      	ldrb	r3, [r7, #27]
    9b8c:	4619      	mov	r1, r3
    9b8e:	69f8      	ldr	r0, [r7, #28]
    9b90:	4b2f      	ldr	r3, [pc, #188]	; (9c50 <_usb_d_dev_ep_enable+0x200>)
    9b92:	4798      	blx	r3

		bank[1].PCKSIZE.reg
    9b94:	68fb      	ldr	r3, [r7, #12]
    9b96:	f103 0410 	add.w	r4, r3, #16
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    9b9a:	697b      	ldr	r3, [r7, #20]
    9b9c:	8a1b      	ldrh	r3, [r3, #16]
    9b9e:	f3c3 050d 	ubfx	r5, r3, #0, #14
    9ba2:	697b      	ldr	r3, [r7, #20]
    9ba4:	8a1b      	ldrh	r3, [r3, #16]
    9ba6:	4618      	mov	r0, r3
    9ba8:	4b2b      	ldr	r3, [pc, #172]	; (9c58 <_usb_d_dev_ep_enable+0x208>)
    9baa:	4798      	blx	r3
    9bac:	4603      	mov	r3, r0
    9bae:	071b      	lsls	r3, r3, #28
    9bb0:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    9bb4:	432b      	orrs	r3, r5
    9bb6:	6063      	str	r3, [r4, #4]

		/* By default, IN endpoint will NAK all token. */
		_usbd_ep_set_in_rdy(epn, 1, false);
    9bb8:	7efb      	ldrb	r3, [r7, #27]
    9bba:	2200      	movs	r2, #0
    9bbc:	2101      	movs	r1, #1
    9bbe:	4618      	mov	r0, r3
    9bc0:	4b27      	ldr	r3, [pc, #156]	; (9c60 <_usb_d_dev_ep_enable+0x210>)
    9bc2:	4798      	blx	r3
		_usbd_ep_clear_bank_status(epn, 1);
    9bc4:	7efb      	ldrb	r3, [r7, #27]
    9bc6:	2101      	movs	r1, #1
    9bc8:	4618      	mov	r0, r3
    9bca:	4b26      	ldr	r3, [pc, #152]	; (9c64 <_usb_d_dev_ep_enable+0x214>)
    9bcc:	4798      	blx	r3
    9bce:	e033      	b.n	9c38 <_usb_d_dev_ep_enable+0x1e8>

	} else {

		if (epcfg & USB_DEVICE_EPCFG_EPTYPE0_Msk) {
    9bd0:	7cfb      	ldrb	r3, [r7, #19]
    9bd2:	f003 0307 	and.w	r3, r3, #7
    9bd6:	2b00      	cmp	r3, #0
    9bd8:	d002      	beq.n	9be0 <_usb_d_dev_ep_enable+0x190>
			return -USB_ERR_REDO;
    9bda:	f06f 0313 	mvn.w	r3, #19
    9bde:	e02c      	b.n	9c3a <_usb_d_dev_ep_enable+0x1ea>
		}
		epcfg |= USB_DEVICE_EPCFG_EPTYPE0(ept->flags.bits.eptype);
    9be0:	697b      	ldr	r3, [r7, #20]
    9be2:	7cdb      	ldrb	r3, [r3, #19]
    9be4:	f3c3 0302 	ubfx	r3, r3, #0, #3
    9be8:	b2db      	uxtb	r3, r3
    9bea:	461a      	mov	r2, r3
    9bec:	7cfb      	ldrb	r3, [r7, #19]
    9bee:	4313      	orrs	r3, r2
    9bf0:	74fb      	strb	r3, [r7, #19]
		hri_usbendpoint_write_EPCFG_reg(hw, epn, epcfg);
    9bf2:	7cfa      	ldrb	r2, [r7, #19]
    9bf4:	7efb      	ldrb	r3, [r7, #27]
    9bf6:	4619      	mov	r1, r3
    9bf8:	69f8      	ldr	r0, [r7, #28]
    9bfa:	4b15      	ldr	r3, [pc, #84]	; (9c50 <_usb_d_dev_ep_enable+0x200>)
    9bfc:	4798      	blx	r3

		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    9bfe:	697b      	ldr	r3, [r7, #20]
    9c00:	8a1b      	ldrh	r3, [r3, #16]
    9c02:	039b      	lsls	r3, r3, #14
    9c04:	4c13      	ldr	r4, [pc, #76]	; (9c54 <_usb_d_dev_ep_enable+0x204>)
    9c06:	401c      	ands	r4, r3
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    9c08:	697b      	ldr	r3, [r7, #20]
    9c0a:	8a1b      	ldrh	r3, [r3, #16]
    9c0c:	4618      	mov	r0, r3
    9c0e:	4b12      	ldr	r3, [pc, #72]	; (9c58 <_usb_d_dev_ep_enable+0x208>)
    9c10:	4798      	blx	r3
    9c12:	4603      	mov	r3, r0
    9c14:	071b      	lsls	r3, r3, #28
    9c16:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    9c1a:	ea44 0203 	orr.w	r2, r4, r3
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    9c1e:	68fb      	ldr	r3, [r7, #12]
    9c20:	605a      	str	r2, [r3, #4]

		/* By default, OUT endpoint will NAK all token. */
		_usbd_ep_set_out_rdy(epn, 0, false);
    9c22:	7efb      	ldrb	r3, [r7, #27]
    9c24:	2200      	movs	r2, #0
    9c26:	2100      	movs	r1, #0
    9c28:	4618      	mov	r0, r3
    9c2a:	4b0c      	ldr	r3, [pc, #48]	; (9c5c <_usb_d_dev_ep_enable+0x20c>)
    9c2c:	4798      	blx	r3
		_usbd_ep_clear_bank_status(epn, 0);
    9c2e:	7efb      	ldrb	r3, [r7, #27]
    9c30:	2100      	movs	r1, #0
    9c32:	4618      	mov	r0, r3
    9c34:	4b0b      	ldr	r3, [pc, #44]	; (9c64 <_usb_d_dev_ep_enable+0x214>)
    9c36:	4798      	blx	r3
	}

	return USB_OK;
    9c38:	2300      	movs	r3, #0
}
    9c3a:	4618      	mov	r0, r3
    9c3c:	3720      	adds	r7, #32
    9c3e:	46bd      	mov	sp, r7
    9c40:	bdb0      	pop	{r4, r5, r7, pc}
    9c42:	bf00      	nop
    9c44:	00008869 	.word	0x00008869
    9c48:	00007eef 	.word	0x00007eef
    9c4c:	20000f4c 	.word	0x20000f4c
    9c50:	00007ec5 	.word	0x00007ec5
    9c54:	0fffc000 	.word	0x0fffc000
    9c58:	00008805 	.word	0x00008805
    9c5c:	000087ad 	.word	0x000087ad
    9c60:	00008755 	.word	0x00008755
    9c64:	0000871d 	.word	0x0000871d
    9c68:	000097c1 	.word	0x000097c1

00009c6c <_usb_d_dev_ep_stall_get>:
 * \return Stall status.
 * \retval \c true Endpoint is stalled.
 * \retval \c false Endpoint is not stalled.
 */
static inline int32_t _usb_d_dev_ep_stall_get(struct _usb_d_dev_ep *ept, bool dir)
{
    9c6c:	b580      	push	{r7, lr}
    9c6e:	b084      	sub	sp, #16
    9c70:	af00      	add	r7, sp, #0
    9c72:	6078      	str	r0, [r7, #4]
    9c74:	460b      	mov	r3, r1
    9c76:	70fb      	strb	r3, [r7, #3]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    9c78:	687b      	ldr	r3, [r7, #4]
    9c7a:	7c9b      	ldrb	r3, [r3, #18]
    9c7c:	f003 030f 	and.w	r3, r3, #15
    9c80:	73fb      	strb	r3, [r7, #15]
	return _usbd_ep_is_stalled(epn, dir);
    9c82:	78fa      	ldrb	r2, [r7, #3]
    9c84:	7bfb      	ldrb	r3, [r7, #15]
    9c86:	4611      	mov	r1, r2
    9c88:	4618      	mov	r0, r3
    9c8a:	4b03      	ldr	r3, [pc, #12]	; (9c98 <_usb_d_dev_ep_stall_get+0x2c>)
    9c8c:	4798      	blx	r3
    9c8e:	4603      	mov	r3, r0
}
    9c90:	4618      	mov	r0, r3
    9c92:	3710      	adds	r7, #16
    9c94:	46bd      	mov	sp, r7
    9c96:	bd80      	pop	{r7, pc}
    9c98:	0000835d 	.word	0x0000835d

00009c9c <_usb_d_dev_ep_stall_set>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \return Always 0, success.
 */
static inline int32_t _usb_d_dev_ep_stall_set(struct _usb_d_dev_ep *ept, bool dir)
{
    9c9c:	b580      	push	{r7, lr}
    9c9e:	b084      	sub	sp, #16
    9ca0:	af00      	add	r7, sp, #0
    9ca2:	6078      	str	r0, [r7, #4]
    9ca4:	460b      	mov	r3, r1
    9ca6:	70fb      	strb	r3, [r7, #3]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    9ca8:	687b      	ldr	r3, [r7, #4]
    9caa:	7c9b      	ldrb	r3, [r3, #18]
    9cac:	f003 030f 	and.w	r3, r3, #15
    9cb0:	73fb      	strb	r3, [r7, #15]
	_usbd_ep_set_stall(epn, dir, true);
    9cb2:	78f9      	ldrb	r1, [r7, #3]
    9cb4:	7bfb      	ldrb	r3, [r7, #15]
    9cb6:	2201      	movs	r2, #1
    9cb8:	4618      	mov	r0, r3
    9cba:	4b0a      	ldr	r3, [pc, #40]	; (9ce4 <_usb_d_dev_ep_stall_set+0x48>)
    9cbc:	4798      	blx	r3
	_usbd_ep_int_en(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    9cbe:	78fb      	ldrb	r3, [r7, #3]
    9cc0:	2220      	movs	r2, #32
    9cc2:	409a      	lsls	r2, r3
    9cc4:	7bfb      	ldrb	r3, [r7, #15]
    9cc6:	4611      	mov	r1, r2
    9cc8:	4618      	mov	r0, r3
    9cca:	4b07      	ldr	r3, [pc, #28]	; (9ce8 <_usb_d_dev_ep_stall_set+0x4c>)
    9ccc:	4798      	blx	r3
	ept->flags.bits.is_stalled = 1;
    9cce:	687a      	ldr	r2, [r7, #4]
    9cd0:	7cd3      	ldrb	r3, [r2, #19]
    9cd2:	f043 0308 	orr.w	r3, r3, #8
    9cd6:	74d3      	strb	r3, [r2, #19]
	/* In stall interrupt abort the transfer. */
	return ERR_NONE;
    9cd8:	2300      	movs	r3, #0
}
    9cda:	4618      	mov	r0, r3
    9cdc:	3710      	adds	r7, #16
    9cde:	46bd      	mov	sp, r7
    9ce0:	bd80      	pop	{r7, pc}
    9ce2:	bf00      	nop
    9ce4:	00008305 	.word	0x00008305
    9ce8:	00008285 	.word	0x00008285

00009cec <_usb_d_dev_ep_stall_clr>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \return Always 0, success.
 */
static inline int32_t _usb_d_dev_ep_stall_clr(struct _usb_d_dev_ep *ept, bool dir)
{
    9cec:	b580      	push	{r7, lr}
    9cee:	b084      	sub	sp, #16
    9cf0:	af00      	add	r7, sp, #0
    9cf2:	6078      	str	r0, [r7, #4]
    9cf4:	460b      	mov	r3, r1
    9cf6:	70fb      	strb	r3, [r7, #3]
	uint8_t epn        = USB_EP_GET_N(ept->ep);
    9cf8:	687b      	ldr	r3, [r7, #4]
    9cfa:	7c9b      	ldrb	r3, [r3, #18]
    9cfc:	f003 030f 	and.w	r3, r3, #15
    9d00:	73fb      	strb	r3, [r7, #15]
	bool    is_stalled = _usbd_ep_is_stalled(epn, dir);
    9d02:	78fa      	ldrb	r2, [r7, #3]
    9d04:	7bfb      	ldrb	r3, [r7, #15]
    9d06:	4611      	mov	r1, r2
    9d08:	4618      	mov	r0, r3
    9d0a:	4b28      	ldr	r3, [pc, #160]	; (9dac <_usb_d_dev_ep_stall_clr+0xc0>)
    9d0c:	4798      	blx	r3
    9d0e:	4603      	mov	r3, r0
    9d10:	73bb      	strb	r3, [r7, #14]
	if (!is_stalled) {
    9d12:	7bbb      	ldrb	r3, [r7, #14]
    9d14:	f083 0301 	eor.w	r3, r3, #1
    9d18:	b2db      	uxtb	r3, r3
    9d1a:	2b00      	cmp	r3, #0
    9d1c:	d001      	beq.n	9d22 <_usb_d_dev_ep_stall_clr+0x36>
		return ERR_NONE;
    9d1e:	2300      	movs	r3, #0
    9d20:	e040      	b.n	9da4 <_usb_d_dev_ep_stall_clr+0xb8>
	}
	_usbd_ep_set_stall(epn, dir, false);
    9d22:	78f9      	ldrb	r1, [r7, #3]
    9d24:	7bfb      	ldrb	r3, [r7, #15]
    9d26:	2200      	movs	r2, #0
    9d28:	4618      	mov	r0, r3
    9d2a:	4b21      	ldr	r3, [pc, #132]	; (9db0 <_usb_d_dev_ep_stall_clr+0xc4>)
    9d2c:	4798      	blx	r3
	_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    9d2e:	78fb      	ldrb	r3, [r7, #3]
    9d30:	2220      	movs	r2, #32
    9d32:	409a      	lsls	r2, r3
    9d34:	7bfb      	ldrb	r3, [r7, #15]
    9d36:	4611      	mov	r1, r2
    9d38:	4618      	mov	r0, r3
    9d3a:	4b1e      	ldr	r3, [pc, #120]	; (9db4 <_usb_d_dev_ep_stall_clr+0xc8>)
    9d3c:	4798      	blx	r3
	if (_usbd_ep_is_stall_sent(epn, dir)) {
    9d3e:	78fa      	ldrb	r2, [r7, #3]
    9d40:	7bfb      	ldrb	r3, [r7, #15]
    9d42:	4611      	mov	r1, r2
    9d44:	4618      	mov	r0, r3
    9d46:	4b1c      	ldr	r3, [pc, #112]	; (9db8 <_usb_d_dev_ep_stall_clr+0xcc>)
    9d48:	4798      	blx	r3
    9d4a:	4603      	mov	r3, r0
    9d4c:	2b00      	cmp	r3, #0
    9d4e:	d00b      	beq.n	9d68 <_usb_d_dev_ep_stall_clr+0x7c>
		_usbd_ep_ack_stall(epn, dir);
    9d50:	78fa      	ldrb	r2, [r7, #3]
    9d52:	7bfb      	ldrb	r3, [r7, #15]
    9d54:	4611      	mov	r1, r2
    9d56:	4618      	mov	r0, r3
    9d58:	4b18      	ldr	r3, [pc, #96]	; (9dbc <_usb_d_dev_ep_stall_clr+0xd0>)
    9d5a:	4798      	blx	r3
		_usbd_ep_set_toggle(epn, dir, 0);
    9d5c:	78f9      	ldrb	r1, [r7, #3]
    9d5e:	7bfb      	ldrb	r3, [r7, #15]
    9d60:	2200      	movs	r2, #0
    9d62:	4618      	mov	r0, r3
    9d64:	4b16      	ldr	r3, [pc, #88]	; (9dc0 <_usb_d_dev_ep_stall_clr+0xd4>)
    9d66:	4798      	blx	r3
	}
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    9d68:	687b      	ldr	r3, [r7, #4]
    9d6a:	7cdb      	ldrb	r3, [r3, #19]
    9d6c:	f003 0307 	and.w	r3, r3, #7
    9d70:	b2db      	uxtb	r3, r3
    9d72:	2b01      	cmp	r3, #1
    9d74:	d110      	bne.n	9d98 <_usb_d_dev_ep_stall_clr+0xac>
		if ((hri_usbendpoint_read_EPSTATUS_reg(USB, epn) & USB_DEVICE_EPSTATUS_STALLRQ_Msk) == 0) {
    9d76:	7bfb      	ldrb	r3, [r7, #15]
    9d78:	4619      	mov	r1, r3
    9d7a:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9d7e:	4b11      	ldr	r3, [pc, #68]	; (9dc4 <_usb_d_dev_ep_stall_clr+0xd8>)
    9d80:	4798      	blx	r3
    9d82:	4603      	mov	r3, r0
    9d84:	f003 0330 	and.w	r3, r3, #48	; 0x30
    9d88:	2b00      	cmp	r3, #0
    9d8a:	d10a      	bne.n	9da2 <_usb_d_dev_ep_stall_clr+0xb6>
			ept->flags.bits.is_stalled = 0;
    9d8c:	687a      	ldr	r2, [r7, #4]
    9d8e:	7cd3      	ldrb	r3, [r2, #19]
    9d90:	f36f 03c3 	bfc	r3, #3, #1
    9d94:	74d3      	strb	r3, [r2, #19]
    9d96:	e004      	b.n	9da2 <_usb_d_dev_ep_stall_clr+0xb6>
		}
	} else {
		ept->flags.bits.is_stalled = 0;
    9d98:	687a      	ldr	r2, [r7, #4]
    9d9a:	7cd3      	ldrb	r3, [r2, #19]
    9d9c:	f36f 03c3 	bfc	r3, #3, #1
    9da0:	74d3      	strb	r3, [r2, #19]
	}
	return ERR_NONE;
    9da2:	2300      	movs	r3, #0
}
    9da4:	4618      	mov	r0, r3
    9da6:	3710      	adds	r7, #16
    9da8:	46bd      	mov	sp, r7
    9daa:	bd80      	pop	{r7, pc}
    9dac:	0000835d 	.word	0x0000835d
    9db0:	00008305 	.word	0x00008305
    9db4:	000082ad 	.word	0x000082ad
    9db8:	000083a1 	.word	0x000083a1
    9dbc:	000083e5 	.word	0x000083e5
    9dc0:	000084d1 	.word	0x000084d1
    9dc4:	00007d8d 	.word	0x00007d8d

00009dc8 <_usb_d_dev_ep_stall>:

int32_t _usb_d_dev_ep_stall(const uint8_t ep, const enum usb_ep_stall_ctrl ctrl)
{
    9dc8:	b580      	push	{r7, lr}
    9dca:	b086      	sub	sp, #24
    9dcc:	af00      	add	r7, sp, #0
    9dce:	4603      	mov	r3, r0
    9dd0:	460a      	mov	r2, r1
    9dd2:	71fb      	strb	r3, [r7, #7]
    9dd4:	4613      	mov	r3, r2
    9dd6:	71bb      	strb	r3, [r7, #6]
	uint8_t               epn = USB_EP_GET_N(ep);
    9dd8:	79fb      	ldrb	r3, [r7, #7]
    9dda:	f003 030f 	and.w	r3, r3, #15
    9dde:	74fb      	strb	r3, [r7, #19]
	bool                  dir = USB_EP_GET_DIR(ep);
    9de0:	79fb      	ldrb	r3, [r7, #7]
    9de2:	f003 0380 	and.w	r3, r3, #128	; 0x80
    9de6:	2b00      	cmp	r3, #0
    9de8:	bf14      	ite	ne
    9dea:	2301      	movne	r3, #1
    9dec:	2300      	moveq	r3, #0
    9dee:	74bb      	strb	r3, [r7, #18]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    9df0:	7cba      	ldrb	r2, [r7, #18]
    9df2:	7cfb      	ldrb	r3, [r7, #19]
    9df4:	4611      	mov	r1, r2
    9df6:	4618      	mov	r0, r3
    9df8:	4b13      	ldr	r3, [pc, #76]	; (9e48 <_usb_d_dev_ep_stall+0x80>)
    9dfa:	4798      	blx	r3
    9dfc:	60f8      	str	r0, [r7, #12]
	int32_t               rc;

	if (epn > CONF_USB_D_MAX_EP_N) {
    9dfe:	7cfb      	ldrb	r3, [r7, #19]
    9e00:	2b04      	cmp	r3, #4
    9e02:	d902      	bls.n	9e0a <_usb_d_dev_ep_stall+0x42>
		return -USB_ERR_PARAM;
    9e04:	f06f 0311 	mvn.w	r3, #17
    9e08:	e01a      	b.n	9e40 <_usb_d_dev_ep_stall+0x78>
	}

	if (USB_EP_STALL_SET == ctrl) {
    9e0a:	79bb      	ldrb	r3, [r7, #6]
    9e0c:	2b01      	cmp	r3, #1
    9e0e:	d106      	bne.n	9e1e <_usb_d_dev_ep_stall+0x56>
		rc = _usb_d_dev_ep_stall_set(ept, dir);
    9e10:	7cbb      	ldrb	r3, [r7, #18]
    9e12:	4619      	mov	r1, r3
    9e14:	68f8      	ldr	r0, [r7, #12]
    9e16:	4b0d      	ldr	r3, [pc, #52]	; (9e4c <_usb_d_dev_ep_stall+0x84>)
    9e18:	4798      	blx	r3
    9e1a:	6178      	str	r0, [r7, #20]
    9e1c:	e00f      	b.n	9e3e <_usb_d_dev_ep_stall+0x76>
	} else if (USB_EP_STALL_CLR == ctrl) {
    9e1e:	79bb      	ldrb	r3, [r7, #6]
    9e20:	2b00      	cmp	r3, #0
    9e22:	d106      	bne.n	9e32 <_usb_d_dev_ep_stall+0x6a>
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
    9e24:	7cbb      	ldrb	r3, [r7, #18]
    9e26:	4619      	mov	r1, r3
    9e28:	68f8      	ldr	r0, [r7, #12]
    9e2a:	4b09      	ldr	r3, [pc, #36]	; (9e50 <_usb_d_dev_ep_stall+0x88>)
    9e2c:	4798      	blx	r3
    9e2e:	6178      	str	r0, [r7, #20]
    9e30:	e005      	b.n	9e3e <_usb_d_dev_ep_stall+0x76>
	} else {
		rc = _usb_d_dev_ep_stall_get(ept, dir);
    9e32:	7cbb      	ldrb	r3, [r7, #18]
    9e34:	4619      	mov	r1, r3
    9e36:	68f8      	ldr	r0, [r7, #12]
    9e38:	4b06      	ldr	r3, [pc, #24]	; (9e54 <_usb_d_dev_ep_stall+0x8c>)
    9e3a:	4798      	blx	r3
    9e3c:	6178      	str	r0, [r7, #20]
	}
	return rc;
    9e3e:	697b      	ldr	r3, [r7, #20]
}
    9e40:	4618      	mov	r0, r3
    9e42:	3718      	adds	r7, #24
    9e44:	46bd      	mov	sp, r7
    9e46:	bd80      	pop	{r7, pc}
    9e48:	00008869 	.word	0x00008869
    9e4c:	00009c9d 	.word	0x00009c9d
    9e50:	00009ced 	.word	0x00009ced
    9e54:	00009c6d 	.word	0x00009c6d

00009e58 <_usb_d_dev_trans_done>:
 *  \brief Finish the transaction and invoke callback
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_done(struct _usb_d_dev_ep *ept, const int32_t code)
{
    9e58:	b580      	push	{r7, lr}
    9e5a:	b082      	sub	sp, #8
    9e5c:	af00      	add	r7, sp, #0
    9e5e:	6078      	str	r0, [r7, #4]
    9e60:	6039      	str	r1, [r7, #0]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    9e62:	687b      	ldr	r3, [r7, #4]
    9e64:	7c9b      	ldrb	r3, [r3, #18]
    9e66:	2bff      	cmp	r3, #255	; 0xff
    9e68:	d014      	beq.n	9e94 <_usb_d_dev_trans_done+0x3c>
    9e6a:	687b      	ldr	r3, [r7, #4]
    9e6c:	7cdb      	ldrb	r3, [r3, #19]
    9e6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
    9e72:	b2db      	uxtb	r3, r3
    9e74:	2b00      	cmp	r3, #0
    9e76:	d00d      	beq.n	9e94 <_usb_d_dev_trans_done+0x3c>
		return;
	}
	ept->flags.bits.is_busy = 0;
    9e78:	687a      	ldr	r2, [r7, #4]
    9e7a:	7cd3      	ldrb	r3, [r2, #19]
    9e7c:	f36f 1386 	bfc	r3, #6, #1
    9e80:	74d3      	strb	r3, [r2, #19]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
    9e82:	4b06      	ldr	r3, [pc, #24]	; (9e9c <_usb_d_dev_trans_done+0x44>)
    9e84:	691b      	ldr	r3, [r3, #16]
    9e86:	687a      	ldr	r2, [r7, #4]
    9e88:	7c90      	ldrb	r0, [r2, #18]
    9e8a:	687a      	ldr	r2, [r7, #4]
    9e8c:	6892      	ldr	r2, [r2, #8]
    9e8e:	6839      	ldr	r1, [r7, #0]
    9e90:	4798      	blx	r3
    9e92:	e000      	b.n	9e96 <_usb_d_dev_trans_done+0x3e>
		return;
    9e94:	bf00      	nop
}
    9e96:	3708      	adds	r7, #8
    9e98:	46bd      	mov	sp, r7
    9e9a:	bd80      	pop	{r7, pc}
    9e9c:	20000e84 	.word	0x20000e84

00009ea0 <_usb_d_dev_trans_stop>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_stop(struct _usb_d_dev_ep *ept, bool dir, const int32_t code)
{
    9ea0:	b580      	push	{r7, lr}
    9ea2:	b086      	sub	sp, #24
    9ea4:	af00      	add	r7, sp, #0
    9ea6:	60f8      	str	r0, [r7, #12]
    9ea8:	460b      	mov	r3, r1
    9eaa:	607a      	str	r2, [r7, #4]
    9eac:	72fb      	strb	r3, [r7, #11]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    9eae:	68fb      	ldr	r3, [r7, #12]
    9eb0:	7c9b      	ldrb	r3, [r3, #18]
    9eb2:	f003 030f 	and.w	r3, r3, #15
    9eb6:	75fb      	strb	r3, [r7, #23]
	;
	const uint8_t intflags[2] = {USB_D_BANK0_INT_FLAGS, USB_D_BANK1_INT_FLAGS};
    9eb8:	4b1f      	ldr	r3, [pc, #124]	; (9f38 <_usb_d_dev_trans_stop+0x98>)
    9eba:	881b      	ldrh	r3, [r3, #0]
    9ebc:	82bb      	strh	r3, [r7, #20]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    9ebe:	68fb      	ldr	r3, [r7, #12]
    9ec0:	7c9b      	ldrb	r3, [r3, #18]
    9ec2:	2bff      	cmp	r3, #255	; 0xff
    9ec4:	d033      	beq.n	9f2e <_usb_d_dev_trans_stop+0x8e>
    9ec6:	68fb      	ldr	r3, [r7, #12]
    9ec8:	7cdb      	ldrb	r3, [r3, #19]
    9eca:	f003 0340 	and.w	r3, r3, #64	; 0x40
    9ece:	b2db      	uxtb	r3, r3
    9ed0:	2b00      	cmp	r3, #0
    9ed2:	d02c      	beq.n	9f2e <_usb_d_dev_trans_stop+0x8e>
		return;
	}
	/* Stop transfer */
	if (dir) {
    9ed4:	7afb      	ldrb	r3, [r7, #11]
    9ed6:	2b00      	cmp	r3, #0
    9ed8:	d006      	beq.n	9ee8 <_usb_d_dev_trans_stop+0x48>
		/* NAK IN */
		_usbd_ep_set_in_rdy(epn, 1, false);
    9eda:	7dfb      	ldrb	r3, [r7, #23]
    9edc:	2200      	movs	r2, #0
    9ede:	2101      	movs	r1, #1
    9ee0:	4618      	mov	r0, r3
    9ee2:	4b16      	ldr	r3, [pc, #88]	; (9f3c <_usb_d_dev_trans_stop+0x9c>)
    9ee4:	4798      	blx	r3
    9ee6:	e005      	b.n	9ef4 <_usb_d_dev_trans_stop+0x54>
	} else {
		/* NAK OUT */
		_usbd_ep_set_out_rdy(epn, 0, false);
    9ee8:	7dfb      	ldrb	r3, [r7, #23]
    9eea:	2200      	movs	r2, #0
    9eec:	2100      	movs	r1, #0
    9eee:	4618      	mov	r0, r3
    9ef0:	4b13      	ldr	r3, [pc, #76]	; (9f40 <_usb_d_dev_trans_stop+0xa0>)
    9ef2:	4798      	blx	r3
	}
	_usbd_ep_int_ack(epn, intflags[dir]);
    9ef4:	7afb      	ldrb	r3, [r7, #11]
    9ef6:	f107 0218 	add.w	r2, r7, #24
    9efa:	4413      	add	r3, r2
    9efc:	f813 3c04 	ldrb.w	r3, [r3, #-4]
    9f00:	461a      	mov	r2, r3
    9f02:	7dfb      	ldrb	r3, [r7, #23]
    9f04:	4611      	mov	r1, r2
    9f06:	4618      	mov	r0, r3
    9f08:	4b0e      	ldr	r3, [pc, #56]	; (9f44 <_usb_d_dev_trans_stop+0xa4>)
    9f0a:	4798      	blx	r3
	_usbd_ep_int_dis(epn, intflags[dir]);
    9f0c:	7afb      	ldrb	r3, [r7, #11]
    9f0e:	f107 0218 	add.w	r2, r7, #24
    9f12:	4413      	add	r3, r2
    9f14:	f813 3c04 	ldrb.w	r3, [r3, #-4]
    9f18:	461a      	mov	r2, r3
    9f1a:	7dfb      	ldrb	r3, [r7, #23]
    9f1c:	4611      	mov	r1, r2
    9f1e:	4618      	mov	r0, r3
    9f20:	4b09      	ldr	r3, [pc, #36]	; (9f48 <_usb_d_dev_trans_stop+0xa8>)
    9f22:	4798      	blx	r3
	_usb_d_dev_trans_done(ept, code);
    9f24:	6879      	ldr	r1, [r7, #4]
    9f26:	68f8      	ldr	r0, [r7, #12]
    9f28:	4b08      	ldr	r3, [pc, #32]	; (9f4c <_usb_d_dev_trans_stop+0xac>)
    9f2a:	4798      	blx	r3
    9f2c:	e000      	b.n	9f30 <_usb_d_dev_trans_stop+0x90>
		return;
    9f2e:	bf00      	nop
}
    9f30:	3718      	adds	r7, #24
    9f32:	46bd      	mov	sp, r7
    9f34:	bd80      	pop	{r7, pc}
    9f36:	bf00      	nop
    9f38:	000131bc 	.word	0x000131bc
    9f3c:	00008755 	.word	0x00008755
    9f40:	000087ad 	.word	0x000087ad
    9f44:	0000825d 	.word	0x0000825d
    9f48:	000082ad 	.word	0x000082ad
    9f4c:	00009e59 	.word	0x00009e59

00009f50 <_usb_d_dev_ep_read_req>:

int32_t _usb_d_dev_ep_read_req(const uint8_t ep, uint8_t *req_buf)
{
    9f50:	b580      	push	{r7, lr}
    9f52:	b086      	sub	sp, #24
    9f54:	af00      	add	r7, sp, #0
    9f56:	4603      	mov	r3, r0
    9f58:	6039      	str	r1, [r7, #0]
    9f5a:	71fb      	strb	r3, [r7, #7]
	uint8_t            epn   = USB_EP_GET_N(ep);
    9f5c:	79fb      	ldrb	r3, [r7, #7]
    9f5e:	f003 030f 	and.w	r3, r3, #15
    9f62:	75fb      	strb	r3, [r7, #23]
	UsbDeviceDescBank *bank  = prvt_inst.desc_table[epn].DeviceDescBank;
    9f64:	7dfb      	ldrb	r3, [r7, #23]
    9f66:	015b      	lsls	r3, r3, #5
    9f68:	4a1e      	ldr	r2, [pc, #120]	; (9fe4 <_usb_d_dev_ep_read_req+0x94>)
    9f6a:	4413      	add	r3, r2
    9f6c:	613b      	str	r3, [r7, #16]
	uint32_t           addr  = bank[0].ADDR.reg;
    9f6e:	693b      	ldr	r3, [r7, #16]
    9f70:	681b      	ldr	r3, [r3, #0]
    9f72:	60fb      	str	r3, [r7, #12]
	uint16_t           bytes = bank[0].PCKSIZE.bit.BYTE_COUNT;
    9f74:	693b      	ldr	r3, [r7, #16]
    9f76:	685b      	ldr	r3, [r3, #4]
    9f78:	f3c3 030d 	ubfx	r3, r3, #0, #14
    9f7c:	b29b      	uxth	r3, r3
    9f7e:	817b      	strh	r3, [r7, #10]

	if (epn > CONF_USB_D_MAX_EP_N || !req_buf) {
    9f80:	7dfb      	ldrb	r3, [r7, #23]
    9f82:	2b04      	cmp	r3, #4
    9f84:	d802      	bhi.n	9f8c <_usb_d_dev_ep_read_req+0x3c>
    9f86:	683b      	ldr	r3, [r7, #0]
    9f88:	2b00      	cmp	r3, #0
    9f8a:	d102      	bne.n	9f92 <_usb_d_dev_ep_read_req+0x42>
		return -USB_ERR_PARAM;
    9f8c:	f06f 0311 	mvn.w	r3, #17
    9f90:	e023      	b.n	9fda <_usb_d_dev_ep_read_req+0x8a>
	}
	if (!_usbd_ep_is_ctrl(epn)) {
    9f92:	7dfb      	ldrb	r3, [r7, #23]
    9f94:	4618      	mov	r0, r3
    9f96:	4b14      	ldr	r3, [pc, #80]	; (9fe8 <_usb_d_dev_ep_read_req+0x98>)
    9f98:	4798      	blx	r3
    9f9a:	4603      	mov	r3, r0
    9f9c:	f083 0301 	eor.w	r3, r3, #1
    9fa0:	b2db      	uxtb	r3, r3
    9fa2:	2b00      	cmp	r3, #0
    9fa4:	d002      	beq.n	9fac <_usb_d_dev_ep_read_req+0x5c>
		return -USB_ERR_FUNC;
    9fa6:	f06f 0312 	mvn.w	r3, #18
    9faa:	e016      	b.n	9fda <_usb_d_dev_ep_read_req+0x8a>
	}
	if (!_usbd_ep_is_setup(epn)) {
    9fac:	7dfb      	ldrb	r3, [r7, #23]
    9fae:	4618      	mov	r0, r3
    9fb0:	4b0e      	ldr	r3, [pc, #56]	; (9fec <_usb_d_dev_ep_read_req+0x9c>)
    9fb2:	4798      	blx	r3
    9fb4:	4603      	mov	r3, r0
    9fb6:	f083 0301 	eor.w	r3, r3, #1
    9fba:	b2db      	uxtb	r3, r3
    9fbc:	2b00      	cmp	r3, #0
    9fbe:	d001      	beq.n	9fc4 <_usb_d_dev_ep_read_req+0x74>
		return ERR_NONE;
    9fc0:	2300      	movs	r3, #0
    9fc2:	e00a      	b.n	9fda <_usb_d_dev_ep_read_req+0x8a>
	}
	memcpy(req_buf, (void *)addr, 8);
    9fc4:	68fb      	ldr	r3, [r7, #12]
    9fc6:	2208      	movs	r2, #8
    9fc8:	4619      	mov	r1, r3
    9fca:	6838      	ldr	r0, [r7, #0]
    9fcc:	4b08      	ldr	r3, [pc, #32]	; (9ff0 <_usb_d_dev_ep_read_req+0xa0>)
    9fce:	4798      	blx	r3
	_usbd_ep_ack_setup(epn);
    9fd0:	7dfb      	ldrb	r3, [r7, #23]
    9fd2:	4618      	mov	r0, r3
    9fd4:	4b07      	ldr	r3, [pc, #28]	; (9ff4 <_usb_d_dev_ep_read_req+0xa4>)
    9fd6:	4798      	blx	r3

	return bytes;
    9fd8:	897b      	ldrh	r3, [r7, #10]
}
    9fda:	4618      	mov	r0, r3
    9fdc:	3718      	adds	r7, #24
    9fde:	46bd      	mov	sp, r7
    9fe0:	bd80      	pop	{r7, pc}
    9fe2:	bf00      	nop
    9fe4:	20000f4c 	.word	0x20000f4c
    9fe8:	000082d5 	.word	0x000082d5
    9fec:	00008481 	.word	0x00008481
    9ff0:	00012b29 	.word	0x00012b29
    9ff4:	000084b1 	.word	0x000084b1

00009ff8 <_usb_d_dev_ep_trans>:

int32_t _usb_d_dev_ep_trans(const struct usb_d_transfer *trans)
{
    9ff8:	b580      	push	{r7, lr}
    9ffa:	b086      	sub	sp, #24
    9ffc:	af00      	add	r7, sp, #0
    9ffe:	6078      	str	r0, [r7, #4]
	uint8_t               epn = USB_EP_GET_N(trans->ep);
    a000:	687b      	ldr	r3, [r7, #4]
    a002:	7a1b      	ldrb	r3, [r3, #8]
    a004:	f003 030f 	and.w	r3, r3, #15
    a008:	75bb      	strb	r3, [r7, #22]
	bool                  dir = USB_EP_GET_DIR(trans->ep);
    a00a:	687b      	ldr	r3, [r7, #4]
    a00c:	7a1b      	ldrb	r3, [r3, #8]
    a00e:	f003 0380 	and.w	r3, r3, #128	; 0x80
    a012:	2b00      	cmp	r3, #0
    a014:	bf14      	ite	ne
    a016:	2301      	movne	r3, #1
    a018:	2300      	moveq	r3, #0
    a01a:	757b      	strb	r3, [r7, #21]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    a01c:	7d7a      	ldrb	r2, [r7, #21]
    a01e:	7dbb      	ldrb	r3, [r7, #22]
    a020:	4611      	mov	r1, r2
    a022:	4618      	mov	r0, r3
    a024:	4b5f      	ldr	r3, [pc, #380]	; (a1a4 <_usb_d_dev_ep_trans+0x1ac>)
    a026:	4798      	blx	r3
    a028:	6138      	str	r0, [r7, #16]

	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    a02a:	693b      	ldr	r3, [r7, #16]
    a02c:	8a1b      	ldrh	r3, [r3, #16]
    a02e:	f240 32ff 	movw	r2, #1023	; 0x3ff
    a032:	4293      	cmp	r3, r2
    a034:	d004      	beq.n	a040 <_usb_d_dev_ep_trans+0x48>
    a036:	693b      	ldr	r3, [r7, #16]
    a038:	8a1b      	ldrh	r3, [r3, #16]
    a03a:	3b01      	subs	r3, #1
    a03c:	b29b      	uxth	r3, r3
    a03e:	e001      	b.n	a044 <_usb_d_dev_ep_trans+0x4c>
    a040:	f240 33ff 	movw	r3, #1023	; 0x3ff
    a044:	81fb      	strh	r3, [r7, #14]
	bool     size_n_aligned = (trans->size & size_mask);
    a046:	687b      	ldr	r3, [r7, #4]
    a048:	685a      	ldr	r2, [r3, #4]
    a04a:	89fb      	ldrh	r3, [r7, #14]
    a04c:	4013      	ands	r3, r2
    a04e:	2b00      	cmp	r3, #0
    a050:	bf14      	ite	ne
    a052:	2301      	movne	r3, #1
    a054:	2300      	moveq	r3, #0
    a056:	737b      	strb	r3, [r7, #13]

	bool use_cache = false;
    a058:	2300      	movs	r3, #0
    a05a:	75fb      	strb	r3, [r7, #23]

	volatile hal_atomic_t flags;

	if (epn > CONF_USB_D_MAX_EP_N) {
    a05c:	7dbb      	ldrb	r3, [r7, #22]
    a05e:	2b04      	cmp	r3, #4
    a060:	d902      	bls.n	a068 <_usb_d_dev_ep_trans+0x70>
		return -USB_ERR_PARAM;
    a062:	f06f 0311 	mvn.w	r3, #17
    a066:	e098      	b.n	a19a <_usb_d_dev_ep_trans+0x1a2>
	 * 1. Buffer not in RAM (cache all).
	 * 2. IN/OUT with unaligned buffer (cache all).
	 * 3. OUT with unaligned packet size (cache last packet).
	 * 4. OUT size < 8 (sub-case for 3).
	 */
	if (!_usb_is_addr4dma(trans->buf, trans->size) || (!_usb_is_aligned(trans->buf))
    a068:	687b      	ldr	r3, [r7, #4]
    a06a:	681b      	ldr	r3, [r3, #0]
    a06c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
    a070:	d31a      	bcc.n	a0a8 <_usb_d_dev_ep_trans+0xb0>
    a072:	687b      	ldr	r3, [r7, #4]
    a074:	681b      	ldr	r3, [r3, #0]
    a076:	461a      	mov	r2, r3
    a078:	687b      	ldr	r3, [r7, #4]
    a07a:	685b      	ldr	r3, [r3, #4]
    a07c:	4413      	add	r3, r2
    a07e:	4a4a      	ldr	r2, [pc, #296]	; (a1a8 <_usb_d_dev_ep_trans+0x1b0>)
    a080:	4293      	cmp	r3, r2
    a082:	d811      	bhi.n	a0a8 <_usb_d_dev_ep_trans+0xb0>
    a084:	687b      	ldr	r3, [r7, #4]
    a086:	681b      	ldr	r3, [r3, #0]
    a088:	f003 0303 	and.w	r3, r3, #3
    a08c:	2b00      	cmp	r3, #0
    a08e:	d10b      	bne.n	a0a8 <_usb_d_dev_ep_trans+0xb0>
	    || (!dir && (trans->size < ept->size))) {
    a090:	7d7b      	ldrb	r3, [r7, #21]
    a092:	f083 0301 	eor.w	r3, r3, #1
    a096:	b2db      	uxtb	r3, r3
    a098:	2b00      	cmp	r3, #0
    a09a:	d00e      	beq.n	a0ba <_usb_d_dev_ep_trans+0xc2>
    a09c:	687b      	ldr	r3, [r7, #4]
    a09e:	685b      	ldr	r3, [r3, #4]
    a0a0:	693a      	ldr	r2, [r7, #16]
    a0a2:	8a12      	ldrh	r2, [r2, #16]
    a0a4:	4293      	cmp	r3, r2
    a0a6:	d208      	bcs.n	a0ba <_usb_d_dev_ep_trans+0xc2>
		if (!ept->cache) {
    a0a8:	693b      	ldr	r3, [r7, #16]
    a0aa:	68db      	ldr	r3, [r3, #12]
    a0ac:	2b00      	cmp	r3, #0
    a0ae:	d102      	bne.n	a0b6 <_usb_d_dev_ep_trans+0xbe>
			return -USB_ERR_FUNC;
    a0b0:	f06f 0312 	mvn.w	r3, #18
    a0b4:	e071      	b.n	a19a <_usb_d_dev_ep_trans+0x1a2>
		}
		/* Use cache all the time. */
		use_cache = true;
    a0b6:	2301      	movs	r3, #1
    a0b8:	75fb      	strb	r3, [r7, #23]
	}
	if (!dir && size_n_aligned) {
    a0ba:	7d7b      	ldrb	r3, [r7, #21]
    a0bc:	f083 0301 	eor.w	r3, r3, #1
    a0c0:	b2db      	uxtb	r3, r3
    a0c2:	2b00      	cmp	r3, #0
    a0c4:	d009      	beq.n	a0da <_usb_d_dev_ep_trans+0xe2>
    a0c6:	7b7b      	ldrb	r3, [r7, #13]
    a0c8:	2b00      	cmp	r3, #0
    a0ca:	d006      	beq.n	a0da <_usb_d_dev_ep_trans+0xe2>
		if (!ept->cache) {
    a0cc:	693b      	ldr	r3, [r7, #16]
    a0ce:	68db      	ldr	r3, [r3, #12]
    a0d0:	2b00      	cmp	r3, #0
    a0d2:	d102      	bne.n	a0da <_usb_d_dev_ep_trans+0xe2>
			return -USB_ERR_PARAM;
    a0d4:	f06f 0311 	mvn.w	r3, #17
    a0d8:	e05f      	b.n	a19a <_usb_d_dev_ep_trans+0x1a2>
		}
		/* Set 'use_cache' on last packet. */
	}

	/* Check halt */
	if (ept->flags.bits.is_stalled) {
    a0da:	693b      	ldr	r3, [r7, #16]
    a0dc:	7cdb      	ldrb	r3, [r3, #19]
    a0de:	f003 0308 	and.w	r3, r3, #8
    a0e2:	b2db      	uxtb	r3, r3
    a0e4:	2b00      	cmp	r3, #0
    a0e6:	d001      	beq.n	a0ec <_usb_d_dev_ep_trans+0xf4>
		return USB_HALTED;
    a0e8:	2302      	movs	r3, #2
    a0ea:	e056      	b.n	a19a <_usb_d_dev_ep_trans+0x1a2>
	}

	/* Try to start transactions. */

	atomic_enter_critical(&flags);
    a0ec:	f107 0308 	add.w	r3, r7, #8
    a0f0:	4618      	mov	r0, r3
    a0f2:	4b2e      	ldr	r3, [pc, #184]	; (a1ac <_usb_d_dev_ep_trans+0x1b4>)
    a0f4:	4798      	blx	r3
	if (_usb_d_dev_ep_is_busy(ept)) {
    a0f6:	693b      	ldr	r3, [r7, #16]
    a0f8:	7cdb      	ldrb	r3, [r3, #19]
    a0fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
    a0fe:	b2db      	uxtb	r3, r3
    a100:	2b00      	cmp	r3, #0
    a102:	d006      	beq.n	a112 <_usb_d_dev_ep_trans+0x11a>
		atomic_leave_critical(&flags);
    a104:	f107 0308 	add.w	r3, r7, #8
    a108:	4618      	mov	r0, r3
    a10a:	4b29      	ldr	r3, [pc, #164]	; (a1b0 <_usb_d_dev_ep_trans+0x1b8>)
    a10c:	4798      	blx	r3
		return USB_BUSY;
    a10e:	2301      	movs	r3, #1
    a110:	e043      	b.n	a19a <_usb_d_dev_ep_trans+0x1a2>
	}
	ept->flags.bits.is_busy = 1;
    a112:	693a      	ldr	r2, [r7, #16]
    a114:	7cd3      	ldrb	r3, [r2, #19]
    a116:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    a11a:	74d3      	strb	r3, [r2, #19]
	atomic_leave_critical(&flags);
    a11c:	f107 0308 	add.w	r3, r7, #8
    a120:	4618      	mov	r0, r3
    a122:	4b23      	ldr	r3, [pc, #140]	; (a1b0 <_usb_d_dev_ep_trans+0x1b8>)
    a124:	4798      	blx	r3

	/* Copy transaction information. */
	ept->trans_buf   = trans->buf;
    a126:	687b      	ldr	r3, [r7, #4]
    a128:	681a      	ldr	r2, [r3, #0]
    a12a:	693b      	ldr	r3, [r7, #16]
    a12c:	601a      	str	r2, [r3, #0]
	ept->trans_size  = trans->size;
    a12e:	687b      	ldr	r3, [r7, #4]
    a130:	685a      	ldr	r2, [r3, #4]
    a132:	693b      	ldr	r3, [r7, #16]
    a134:	605a      	str	r2, [r3, #4]
	ept->trans_count = 0;
    a136:	693b      	ldr	r3, [r7, #16]
    a138:	2200      	movs	r2, #0
    a13a:	609a      	str	r2, [r3, #8]

	ept->flags.bits.dir       = dir;
    a13c:	693a      	ldr	r2, [r7, #16]
    a13e:	7cd3      	ldrb	r3, [r2, #19]
    a140:	7d79      	ldrb	r1, [r7, #21]
    a142:	f361 13c7 	bfi	r3, r1, #7, #1
    a146:	74d3      	strb	r3, [r2, #19]
	ept->flags.bits.use_cache = use_cache;
    a148:	693a      	ldr	r2, [r7, #16]
    a14a:	7cd3      	ldrb	r3, [r2, #19]
    a14c:	7df9      	ldrb	r1, [r7, #23]
    a14e:	f361 1345 	bfi	r3, r1, #5, #1
    a152:	74d3      	strb	r3, [r2, #19]
	ept->flags.bits.need_zlp  = (trans->zlp && (!size_n_aligned));
    a154:	687b      	ldr	r3, [r7, #4]
    a156:	7a5b      	ldrb	r3, [r3, #9]
    a158:	2b00      	cmp	r3, #0
    a15a:	d007      	beq.n	a16c <_usb_d_dev_ep_trans+0x174>
    a15c:	7b7b      	ldrb	r3, [r7, #13]
    a15e:	f083 0301 	eor.w	r3, r3, #1
    a162:	b2db      	uxtb	r3, r3
    a164:	2b00      	cmp	r3, #0
    a166:	d001      	beq.n	a16c <_usb_d_dev_ep_trans+0x174>
    a168:	2301      	movs	r3, #1
    a16a:	e000      	b.n	a16e <_usb_d_dev_ep_trans+0x176>
    a16c:	2300      	movs	r3, #0
    a16e:	b2db      	uxtb	r3, r3
    a170:	f003 0301 	and.w	r3, r3, #1
    a174:	b2d9      	uxtb	r1, r3
    a176:	693a      	ldr	r2, [r7, #16]
    a178:	7cd3      	ldrb	r3, [r2, #19]
    a17a:	f361 1304 	bfi	r3, r1, #4, #1
    a17e:	74d3      	strb	r3, [r2, #19]

	if (dir) {
    a180:	7d7b      	ldrb	r3, [r7, #21]
    a182:	2b00      	cmp	r3, #0
    a184:	d004      	beq.n	a190 <_usb_d_dev_ep_trans+0x198>
		_usb_d_dev_in_next(ept, false);
    a186:	2100      	movs	r1, #0
    a188:	6938      	ldr	r0, [r7, #16]
    a18a:	4b0a      	ldr	r3, [pc, #40]	; (a1b4 <_usb_d_dev_ep_trans+0x1bc>)
    a18c:	4798      	blx	r3
    a18e:	e003      	b.n	a198 <_usb_d_dev_ep_trans+0x1a0>
	} else {
		_usb_d_dev_out_next(ept, false);
    a190:	2100      	movs	r1, #0
    a192:	6938      	ldr	r0, [r7, #16]
    a194:	4b08      	ldr	r3, [pc, #32]	; (a1b8 <_usb_d_dev_ep_trans+0x1c0>)
    a196:	4798      	blx	r3
	}

	return ERR_NONE;
    a198:	2300      	movs	r3, #0
}
    a19a:	4618      	mov	r0, r3
    a19c:	3718      	adds	r7, #24
    a19e:	46bd      	mov	sp, r7
    a1a0:	bd80      	pop	{r7, pc}
    a1a2:	bf00      	nop
    a1a4:	00008869 	.word	0x00008869
    a1a8:	20041fff 	.word	0x20041fff
    a1ac:	0000a971 	.word	0x0000a971
    a1b0:	0000a997 	.word	0x0000a997
    a1b4:	00008b31 	.word	0x00008b31
    a1b8:	00008d49 	.word	0x00008d49

0000a1bc <_usb_d_dev_register_callback>:
	}
	return USB_OK;
}

void _usb_d_dev_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
    a1bc:	b480      	push	{r7}
    a1be:	b085      	sub	sp, #20
    a1c0:	af00      	add	r7, sp, #0
    a1c2:	4603      	mov	r3, r0
    a1c4:	6039      	str	r1, [r7, #0]
    a1c6:	71fb      	strb	r3, [r7, #7]
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    a1c8:	683b      	ldr	r3, [r7, #0]
    a1ca:	2b00      	cmp	r3, #0
    a1cc:	d001      	beq.n	a1d2 <_usb_d_dev_register_callback+0x16>
    a1ce:	683b      	ldr	r3, [r7, #0]
    a1d0:	e000      	b.n	a1d4 <_usb_d_dev_register_callback+0x18>
    a1d2:	4b0a      	ldr	r3, [pc, #40]	; (a1fc <_usb_d_dev_register_callback+0x40>)
    a1d4:	60fb      	str	r3, [r7, #12]
	if (type == USB_D_CB_EVENT) {
    a1d6:	79fb      	ldrb	r3, [r7, #7]
    a1d8:	2b01      	cmp	r3, #1
    a1da:	d103      	bne.n	a1e4 <_usb_d_dev_register_callback+0x28>
		dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)f;
    a1dc:	4a08      	ldr	r2, [pc, #32]	; (a200 <_usb_d_dev_register_callback+0x44>)
    a1de:	68fb      	ldr	r3, [r7, #12]
    a1e0:	6053      	str	r3, [r2, #4]
	} else if (type == USB_D_CB_SOF) {
		dev_inst.callbacks.sof = (_usb_d_dev_sof_cb_t)f;
	}
}
    a1e2:	e005      	b.n	a1f0 <_usb_d_dev_register_callback+0x34>
	} else if (type == USB_D_CB_SOF) {
    a1e4:	79fb      	ldrb	r3, [r7, #7]
    a1e6:	2b00      	cmp	r3, #0
    a1e8:	d102      	bne.n	a1f0 <_usb_d_dev_register_callback+0x34>
		dev_inst.callbacks.sof = (_usb_d_dev_sof_cb_t)f;
    a1ea:	4a05      	ldr	r2, [pc, #20]	; (a200 <_usb_d_dev_register_callback+0x44>)
    a1ec:	68fb      	ldr	r3, [r7, #12]
    a1ee:	6013      	str	r3, [r2, #0]
}
    a1f0:	bf00      	nop
    a1f2:	3714      	adds	r7, #20
    a1f4:	46bd      	mov	sp, r7
    a1f6:	f85d 7b04 	ldr.w	r7, [sp], #4
    a1fa:	4770      	bx	lr
    a1fc:	000080f1 	.word	0x000080f1
    a200:	20000e84 	.word	0x20000e84

0000a204 <_usb_d_dev_register_ep_callback>:

void _usb_d_dev_register_ep_callback(const enum usb_d_dev_ep_cb_type type, const FUNC_PTR func)
{
    a204:	b480      	push	{r7}
    a206:	b085      	sub	sp, #20
    a208:	af00      	add	r7, sp, #0
    a20a:	4603      	mov	r3, r0
    a20c:	6039      	str	r1, [r7, #0]
    a20e:	71fb      	strb	r3, [r7, #7]
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    a210:	683b      	ldr	r3, [r7, #0]
    a212:	2b00      	cmp	r3, #0
    a214:	d001      	beq.n	a21a <_usb_d_dev_register_ep_callback+0x16>
    a216:	683b      	ldr	r3, [r7, #0]
    a218:	e000      	b.n	a21c <_usb_d_dev_register_ep_callback+0x18>
    a21a:	4b0e      	ldr	r3, [pc, #56]	; (a254 <_usb_d_dev_register_ep_callback+0x50>)
    a21c:	60fb      	str	r3, [r7, #12]
	if (type == USB_D_DEV_EP_CB_SETUP) {
    a21e:	79fb      	ldrb	r3, [r7, #7]
    a220:	2b00      	cmp	r3, #0
    a222:	d103      	bne.n	a22c <_usb_d_dev_register_ep_callback+0x28>
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
    a224:	4a0c      	ldr	r2, [pc, #48]	; (a258 <_usb_d_dev_register_ep_callback+0x54>)
    a226:	68fb      	ldr	r3, [r7, #12]
    a228:	6093      	str	r3, [r2, #8]
	} else if (type == USB_D_DEV_EP_CB_MORE) {
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
	} else if (type == USB_D_DEV_EP_CB_DONE) {
		dev_inst.ep_callbacks.done = (_usb_d_dev_ep_cb_done_t)f;
	}
}
    a22a:	e00c      	b.n	a246 <_usb_d_dev_register_ep_callback+0x42>
	} else if (type == USB_D_DEV_EP_CB_MORE) {
    a22c:	79fb      	ldrb	r3, [r7, #7]
    a22e:	2b01      	cmp	r3, #1
    a230:	d103      	bne.n	a23a <_usb_d_dev_register_ep_callback+0x36>
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
    a232:	4a09      	ldr	r2, [pc, #36]	; (a258 <_usb_d_dev_register_ep_callback+0x54>)
    a234:	68fb      	ldr	r3, [r7, #12]
    a236:	60d3      	str	r3, [r2, #12]
}
    a238:	e005      	b.n	a246 <_usb_d_dev_register_ep_callback+0x42>
	} else if (type == USB_D_DEV_EP_CB_DONE) {
    a23a:	79fb      	ldrb	r3, [r7, #7]
    a23c:	2b02      	cmp	r3, #2
    a23e:	d102      	bne.n	a246 <_usb_d_dev_register_ep_callback+0x42>
		dev_inst.ep_callbacks.done = (_usb_d_dev_ep_cb_done_t)f;
    a240:	4a05      	ldr	r2, [pc, #20]	; (a258 <_usb_d_dev_register_ep_callback+0x54>)
    a242:	68fb      	ldr	r3, [r7, #12]
    a244:	6113      	str	r3, [r2, #16]
}
    a246:	bf00      	nop
    a248:	3714      	adds	r7, #20
    a24a:	46bd      	mov	sp, r7
    a24c:	f85d 7b04 	ldr.w	r7, [sp], #4
    a250:	4770      	bx	lr
    a252:	bf00      	nop
    a254:	000080f1 	.word	0x000080f1
    a258:	20000e84 	.word	0x20000e84

0000a25c <USB_0_Handler>:

/**
 * \brief USB interrupt handler
 */
void USB_0_Handler(void)
{
    a25c:	b580      	push	{r7, lr}
    a25e:	af00      	add	r7, sp, #0

	_usb_d_dev_handler();
    a260:	4b01      	ldr	r3, [pc, #4]	; (a268 <USB_0_Handler+0xc>)
    a262:	4798      	blx	r3
}
    a264:	bf00      	nop
    a266:	bd80      	pop	{r7, pc}
    a268:	00009521 	.word	0x00009521

0000a26c <USB_1_Handler>:
/**
 * \brief USB interrupt handler
 */
void USB_1_Handler(void)
{
    a26c:	b580      	push	{r7, lr}
    a26e:	af00      	add	r7, sp, #0

	_usb_d_dev_handler();
    a270:	4b01      	ldr	r3, [pc, #4]	; (a278 <USB_1_Handler+0xc>)
    a272:	4798      	blx	r3
}
    a274:	bf00      	nop
    a276:	bd80      	pop	{r7, pc}
    a278:	00009521 	.word	0x00009521

0000a27c <USB_2_Handler>:
/**
 * \brief USB interrupt handler
 */
void USB_2_Handler(void)
{
    a27c:	b580      	push	{r7, lr}
    a27e:	af00      	add	r7, sp, #0

	_usb_d_dev_handler();
    a280:	4b01      	ldr	r3, [pc, #4]	; (a288 <USB_2_Handler+0xc>)
    a282:	4798      	blx	r3
}
    a284:	bf00      	nop
    a286:	bd80      	pop	{r7, pc}
    a288:	00009521 	.word	0x00009521

0000a28c <USB_3_Handler>:
/**
 * \brief USB interrupt handler
 */
void USB_3_Handler(void)
{
    a28c:	b580      	push	{r7, lr}
    a28e:	af00      	add	r7, sp, #0

	_usb_d_dev_handler();
    a290:	4b01      	ldr	r3, [pc, #4]	; (a298 <USB_3_Handler+0xc>)
    a292:	4798      	blx	r3
}
    a294:	bf00      	nop
    a296:	bd80      	pop	{r7, pc}
    a298:	00009521 	.word	0x00009521

0000a29c <hri_wdt_wait_for_sync>:
typedef uint8_t  hri_wdt_ewctrl_reg_t;
typedef uint8_t  hri_wdt_intenset_reg_t;
typedef uint8_t  hri_wdt_intflag_reg_t;

static inline void hri_wdt_wait_for_sync(const void *const hw, hri_wdt_syncbusy_reg_t reg)
{
    a29c:	b480      	push	{r7}
    a29e:	b083      	sub	sp, #12
    a2a0:	af00      	add	r7, sp, #0
    a2a2:	6078      	str	r0, [r7, #4]
    a2a4:	6039      	str	r1, [r7, #0]
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    a2a6:	bf00      	nop
    a2a8:	687b      	ldr	r3, [r7, #4]
    a2aa:	689a      	ldr	r2, [r3, #8]
    a2ac:	683b      	ldr	r3, [r7, #0]
    a2ae:	4013      	ands	r3, r2
    a2b0:	2b00      	cmp	r3, #0
    a2b2:	d1f9      	bne.n	a2a8 <hri_wdt_wait_for_sync+0xc>
	};
}
    a2b4:	bf00      	nop
    a2b6:	370c      	adds	r7, #12
    a2b8:	46bd      	mov	sp, r7
    a2ba:	f85d 7b04 	ldr.w	r7, [sp], #4
    a2be:	4770      	bx	lr

0000a2c0 <hri_wdt_get_CTRLA_ENABLE_bit>:
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
	WDT_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_wdt_get_CTRLA_ENABLE_bit(const void *const hw)
{
    a2c0:	b580      	push	{r7, lr}
    a2c2:	b084      	sub	sp, #16
    a2c4:	af00      	add	r7, sp, #0
    a2c6:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
    a2c8:	210e      	movs	r1, #14
    a2ca:	6878      	ldr	r0, [r7, #4]
    a2cc:	4b0a      	ldr	r3, [pc, #40]	; (a2f8 <hri_wdt_get_CTRLA_ENABLE_bit+0x38>)
    a2ce:	4798      	blx	r3
	tmp = ((Wdt *)hw)->CTRLA.reg;
    a2d0:	687b      	ldr	r3, [r7, #4]
    a2d2:	781b      	ldrb	r3, [r3, #0]
    a2d4:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & WDT_CTRLA_ENABLE) >> WDT_CTRLA_ENABLE_Pos;
    a2d6:	7bfb      	ldrb	r3, [r7, #15]
    a2d8:	085b      	lsrs	r3, r3, #1
    a2da:	b2db      	uxtb	r3, r3
    a2dc:	f003 0301 	and.w	r3, r3, #1
    a2e0:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    a2e2:	7bfb      	ldrb	r3, [r7, #15]
    a2e4:	2b00      	cmp	r3, #0
    a2e6:	bf14      	ite	ne
    a2e8:	2301      	movne	r3, #1
    a2ea:	2300      	moveq	r3, #0
    a2ec:	b2db      	uxtb	r3, r3
}
    a2ee:	4618      	mov	r0, r3
    a2f0:	3710      	adds	r7, #16
    a2f2:	46bd      	mov	sp, r7
    a2f4:	bd80      	pop	{r7, pc}
    a2f6:	bf00      	nop
    a2f8:	0000a29d 	.word	0x0000a29d

0000a2fc <hri_wdt_clear_CTRLA_WEN_bit>:
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
	WDT_CRITICAL_SECTION_LEAVE();
}

static inline void hri_wdt_clear_CTRLA_WEN_bit(const void *const hw)
{
    a2fc:	b580      	push	{r7, lr}
    a2fe:	b082      	sub	sp, #8
    a300:	af00      	add	r7, sp, #0
    a302:	6078      	str	r0, [r7, #4]
	WDT_CRITICAL_SECTION_ENTER();
	((Wdt *)hw)->CTRLA.reg &= ~WDT_CTRLA_WEN;
    a304:	687b      	ldr	r3, [r7, #4]
    a306:	781b      	ldrb	r3, [r3, #0]
    a308:	b2db      	uxtb	r3, r3
    a30a:	f023 0304 	bic.w	r3, r3, #4
    a30e:	b2da      	uxtb	r2, r3
    a310:	687b      	ldr	r3, [r7, #4]
    a312:	701a      	strb	r2, [r3, #0]
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
    a314:	210e      	movs	r1, #14
    a316:	6878      	ldr	r0, [r7, #4]
    a318:	4b02      	ldr	r3, [pc, #8]	; (a324 <hri_wdt_clear_CTRLA_WEN_bit+0x28>)
    a31a:	4798      	blx	r3
	WDT_CRITICAL_SECTION_LEAVE();
}
    a31c:	bf00      	nop
    a31e:	3708      	adds	r7, #8
    a320:	46bd      	mov	sp, r7
    a322:	bd80      	pop	{r7, pc}
    a324:	0000a29d 	.word	0x0000a29d

0000a328 <hri_wdt_get_CTRLA_ALWAYSON_bit>:
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
	WDT_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_wdt_get_CTRLA_ALWAYSON_bit(const void *const hw)
{
    a328:	b580      	push	{r7, lr}
    a32a:	b084      	sub	sp, #16
    a32c:	af00      	add	r7, sp, #0
    a32e:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
    a330:	210e      	movs	r1, #14
    a332:	6878      	ldr	r0, [r7, #4]
    a334:	4b08      	ldr	r3, [pc, #32]	; (a358 <hri_wdt_get_CTRLA_ALWAYSON_bit+0x30>)
    a336:	4798      	blx	r3
	tmp = ((Wdt *)hw)->CTRLA.reg;
    a338:	687b      	ldr	r3, [r7, #4]
    a33a:	781b      	ldrb	r3, [r3, #0]
    a33c:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & WDT_CTRLA_ALWAYSON) >> WDT_CTRLA_ALWAYSON_Pos;
    a33e:	7bfb      	ldrb	r3, [r7, #15]
    a340:	09db      	lsrs	r3, r3, #7
    a342:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    a344:	7bfb      	ldrb	r3, [r7, #15]
    a346:	2b00      	cmp	r3, #0
    a348:	bf14      	ite	ne
    a34a:	2301      	movne	r3, #1
    a34c:	2300      	moveq	r3, #0
    a34e:	b2db      	uxtb	r3, r3
}
    a350:	4618      	mov	r0, r3
    a352:	3710      	adds	r7, #16
    a354:	46bd      	mov	sp, r7
    a356:	bd80      	pop	{r7, pc}
    a358:	0000a29d 	.word	0x0000a29d

0000a35c <hri_wdt_write_CONFIG_PER_bf>:
	tmp = (tmp & WDT_CONFIG_PER(mask)) >> WDT_CONFIG_PER_Pos;
	return tmp;
}

static inline void hri_wdt_write_CONFIG_PER_bf(const void *const hw, hri_wdt_config_reg_t data)
{
    a35c:	b480      	push	{r7}
    a35e:	b085      	sub	sp, #20
    a360:	af00      	add	r7, sp, #0
    a362:	6078      	str	r0, [r7, #4]
    a364:	460b      	mov	r3, r1
    a366:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	WDT_CRITICAL_SECTION_ENTER();
	tmp = ((Wdt *)hw)->CONFIG.reg;
    a368:	687b      	ldr	r3, [r7, #4]
    a36a:	785b      	ldrb	r3, [r3, #1]
    a36c:	73fb      	strb	r3, [r7, #15]
	tmp &= ~WDT_CONFIG_PER_Msk;
    a36e:	7bfb      	ldrb	r3, [r7, #15]
    a370:	f023 030f 	bic.w	r3, r3, #15
    a374:	73fb      	strb	r3, [r7, #15]
	tmp |= WDT_CONFIG_PER(data);
    a376:	78fb      	ldrb	r3, [r7, #3]
    a378:	f003 030f 	and.w	r3, r3, #15
    a37c:	b2da      	uxtb	r2, r3
    a37e:	7bfb      	ldrb	r3, [r7, #15]
    a380:	4313      	orrs	r3, r2
    a382:	73fb      	strb	r3, [r7, #15]
	((Wdt *)hw)->CONFIG.reg = tmp;
    a384:	687b      	ldr	r3, [r7, #4]
    a386:	7bfa      	ldrb	r2, [r7, #15]
    a388:	705a      	strb	r2, [r3, #1]
	WDT_CRITICAL_SECTION_LEAVE();
}
    a38a:	bf00      	nop
    a38c:	3714      	adds	r7, #20
    a38e:	46bd      	mov	sp, r7
    a390:	f85d 7b04 	ldr.w	r7, [sp], #4
    a394:	4770      	bx	lr
	...

0000a398 <_wdt_init>:

/**
 * \brief WDT initialization function
 */
int32_t _wdt_init(struct wdt_dev *const dev)
{
    a398:	b580      	push	{r7, lr}
    a39a:	b082      	sub	sp, #8
    a39c:	af00      	add	r7, sp, #0
    a39e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	ASSERT(dev && dev->hw);
    a3a0:	687b      	ldr	r3, [r7, #4]
    a3a2:	2b00      	cmp	r3, #0
    a3a4:	d005      	beq.n	a3b2 <_wdt_init+0x1a>
    a3a6:	687b      	ldr	r3, [r7, #4]
    a3a8:	681b      	ldr	r3, [r3, #0]
    a3aa:	2b00      	cmp	r3, #0
    a3ac:	d001      	beq.n	a3b2 <_wdt_init+0x1a>
    a3ae:	2301      	movs	r3, #1
    a3b0:	e000      	b.n	a3b4 <_wdt_init+0x1c>
    a3b2:	2300      	movs	r3, #0
    a3b4:	f003 0301 	and.w	r3, r3, #1
    a3b8:	b2db      	uxtb	r3, r3
    a3ba:	2250      	movs	r2, #80	; 0x50
    a3bc:	4913      	ldr	r1, [pc, #76]	; (a40c <_wdt_init+0x74>)
    a3be:	4618      	mov	r0, r3
    a3c0:	4b13      	ldr	r3, [pc, #76]	; (a410 <_wdt_init+0x78>)
    a3c2:	4798      	blx	r3

	if (hri_wdt_get_CTRLA_ALWAYSON_bit(dev->hw) || hri_wdt_get_CTRLA_ENABLE_bit(dev->hw)) {
    a3c4:	687b      	ldr	r3, [r7, #4]
    a3c6:	681b      	ldr	r3, [r3, #0]
    a3c8:	4618      	mov	r0, r3
    a3ca:	4b12      	ldr	r3, [pc, #72]	; (a414 <_wdt_init+0x7c>)
    a3cc:	4798      	blx	r3
    a3ce:	4603      	mov	r3, r0
    a3d0:	2b00      	cmp	r3, #0
    a3d2:	d107      	bne.n	a3e4 <_wdt_init+0x4c>
    a3d4:	687b      	ldr	r3, [r7, #4]
    a3d6:	681b      	ldr	r3, [r3, #0]
    a3d8:	4618      	mov	r0, r3
    a3da:	4b0f      	ldr	r3, [pc, #60]	; (a418 <_wdt_init+0x80>)
    a3dc:	4798      	blx	r3
    a3de:	4603      	mov	r3, r0
    a3e0:	2b00      	cmp	r3, #0
    a3e2:	d002      	beq.n	a3ea <_wdt_init+0x52>
		return ERR_DENIED;
    a3e4:	f06f 0310 	mvn.w	r3, #16
    a3e8:	e00b      	b.n	a402 <_wdt_init+0x6a>
	} else {
		if (CONF_WDT_WINDOW_EN) {
			hri_wdt_write_CONFIG_WINDOW_bf(dev->hw, CONF_WDT_WINDOW);
		} else {
			hri_wdt_clear_CTRLA_WEN_bit(dev->hw);
    a3ea:	687b      	ldr	r3, [r7, #4]
    a3ec:	681b      	ldr	r3, [r3, #0]
    a3ee:	4618      	mov	r0, r3
    a3f0:	4b0a      	ldr	r3, [pc, #40]	; (a41c <_wdt_init+0x84>)
    a3f2:	4798      	blx	r3
		}

		hri_wdt_write_CONFIG_PER_bf(dev->hw, CONF_WDT_PER);
    a3f4:	687b      	ldr	r3, [r7, #4]
    a3f6:	681b      	ldr	r3, [r3, #0]
    a3f8:	210b      	movs	r1, #11
    a3fa:	4618      	mov	r0, r3
    a3fc:	4b08      	ldr	r3, [pc, #32]	; (a420 <_wdt_init+0x88>)
    a3fe:	4798      	blx	r3
	}

	return ERR_NONE;
    a400:	2300      	movs	r3, #0
}
    a402:	4618      	mov	r0, r3
    a404:	3708      	adds	r7, #8
    a406:	46bd      	mov	sp, r7
    a408:	bd80      	pop	{r7, pc}
    a40a:	bf00      	nop
    a40c:	000131c0 	.word	0x000131c0
    a410:	00002ed9 	.word	0x00002ed9
    a414:	0000a329 	.word	0x0000a329
    a418:	0000a2c1 	.word	0x0000a2c1
    a41c:	0000a2fd 	.word	0x0000a2fd
    a420:	0000a35d 	.word	0x0000a35d

0000a424 <hri_port_set_DIR_reg>:
{
    a424:	b480      	push	{r7}
    a426:	b085      	sub	sp, #20
    a428:	af00      	add	r7, sp, #0
    a42a:	60f8      	str	r0, [r7, #12]
    a42c:	460b      	mov	r3, r1
    a42e:	607a      	str	r2, [r7, #4]
    a430:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    a432:	7afb      	ldrb	r3, [r7, #11]
    a434:	68fa      	ldr	r2, [r7, #12]
    a436:	01db      	lsls	r3, r3, #7
    a438:	4413      	add	r3, r2
    a43a:	3308      	adds	r3, #8
    a43c:	687a      	ldr	r2, [r7, #4]
    a43e:	601a      	str	r2, [r3, #0]
}
    a440:	bf00      	nop
    a442:	3714      	adds	r7, #20
    a444:	46bd      	mov	sp, r7
    a446:	f85d 7b04 	ldr.w	r7, [sp], #4
    a44a:	4770      	bx	lr

0000a44c <hri_port_clear_DIR_reg>:
{
    a44c:	b480      	push	{r7}
    a44e:	b085      	sub	sp, #20
    a450:	af00      	add	r7, sp, #0
    a452:	60f8      	str	r0, [r7, #12]
    a454:	460b      	mov	r3, r1
    a456:	607a      	str	r2, [r7, #4]
    a458:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    a45a:	7afb      	ldrb	r3, [r7, #11]
    a45c:	68fa      	ldr	r2, [r7, #12]
    a45e:	01db      	lsls	r3, r3, #7
    a460:	4413      	add	r3, r2
    a462:	3304      	adds	r3, #4
    a464:	687a      	ldr	r2, [r7, #4]
    a466:	601a      	str	r2, [r3, #0]
}
    a468:	bf00      	nop
    a46a:	3714      	adds	r7, #20
    a46c:	46bd      	mov	sp, r7
    a46e:	f85d 7b04 	ldr.w	r7, [sp], #4
    a472:	4770      	bx	lr

0000a474 <hri_port_set_OUT_reg>:
{
    a474:	b480      	push	{r7}
    a476:	b085      	sub	sp, #20
    a478:	af00      	add	r7, sp, #0
    a47a:	60f8      	str	r0, [r7, #12]
    a47c:	460b      	mov	r3, r1
    a47e:	607a      	str	r2, [r7, #4]
    a480:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    a482:	7afb      	ldrb	r3, [r7, #11]
    a484:	68fa      	ldr	r2, [r7, #12]
    a486:	01db      	lsls	r3, r3, #7
    a488:	4413      	add	r3, r2
    a48a:	3318      	adds	r3, #24
    a48c:	687a      	ldr	r2, [r7, #4]
    a48e:	601a      	str	r2, [r3, #0]
}
    a490:	bf00      	nop
    a492:	3714      	adds	r7, #20
    a494:	46bd      	mov	sp, r7
    a496:	f85d 7b04 	ldr.w	r7, [sp], #4
    a49a:	4770      	bx	lr

0000a49c <hri_port_clear_OUT_reg>:
{
    a49c:	b480      	push	{r7}
    a49e:	b085      	sub	sp, #20
    a4a0:	af00      	add	r7, sp, #0
    a4a2:	60f8      	str	r0, [r7, #12]
    a4a4:	460b      	mov	r3, r1
    a4a6:	607a      	str	r2, [r7, #4]
    a4a8:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    a4aa:	7afb      	ldrb	r3, [r7, #11]
    a4ac:	68fa      	ldr	r2, [r7, #12]
    a4ae:	01db      	lsls	r3, r3, #7
    a4b0:	4413      	add	r3, r2
    a4b2:	3314      	adds	r3, #20
    a4b4:	687a      	ldr	r2, [r7, #4]
    a4b6:	601a      	str	r2, [r3, #0]
}
    a4b8:	bf00      	nop
    a4ba:	3714      	adds	r7, #20
    a4bc:	46bd      	mov	sp, r7
    a4be:	f85d 7b04 	ldr.w	r7, [sp], #4
    a4c2:	4770      	bx	lr

0000a4c4 <hri_port_write_PMUX_PMUXE_bf>:
{
    a4c4:	b480      	push	{r7}
    a4c6:	b085      	sub	sp, #20
    a4c8:	af00      	add	r7, sp, #0
    a4ca:	6078      	str	r0, [r7, #4]
    a4cc:	4608      	mov	r0, r1
    a4ce:	4611      	mov	r1, r2
    a4d0:	461a      	mov	r2, r3
    a4d2:	4603      	mov	r3, r0
    a4d4:	70fb      	strb	r3, [r7, #3]
    a4d6:	460b      	mov	r3, r1
    a4d8:	70bb      	strb	r3, [r7, #2]
    a4da:	4613      	mov	r3, r2
    a4dc:	707b      	strb	r3, [r7, #1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    a4de:	78fa      	ldrb	r2, [r7, #3]
    a4e0:	78bb      	ldrb	r3, [r7, #2]
    a4e2:	6879      	ldr	r1, [r7, #4]
    a4e4:	01d2      	lsls	r2, r2, #7
    a4e6:	440a      	add	r2, r1
    a4e8:	4413      	add	r3, r2
    a4ea:	3330      	adds	r3, #48	; 0x30
    a4ec:	781b      	ldrb	r3, [r3, #0]
    a4ee:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    a4f0:	7bfb      	ldrb	r3, [r7, #15]
    a4f2:	f023 030f 	bic.w	r3, r3, #15
    a4f6:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXE(data);
    a4f8:	787b      	ldrb	r3, [r7, #1]
    a4fa:	f003 030f 	and.w	r3, r3, #15
    a4fe:	b2da      	uxtb	r2, r3
    a500:	7bfb      	ldrb	r3, [r7, #15]
    a502:	4313      	orrs	r3, r2
    a504:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    a506:	78fa      	ldrb	r2, [r7, #3]
    a508:	78bb      	ldrb	r3, [r7, #2]
    a50a:	6879      	ldr	r1, [r7, #4]
    a50c:	01d2      	lsls	r2, r2, #7
    a50e:	440a      	add	r2, r1
    a510:	4413      	add	r3, r2
    a512:	3330      	adds	r3, #48	; 0x30
    a514:	7bfa      	ldrb	r2, [r7, #15]
    a516:	701a      	strb	r2, [r3, #0]
}
    a518:	bf00      	nop
    a51a:	3714      	adds	r7, #20
    a51c:	46bd      	mov	sp, r7
    a51e:	f85d 7b04 	ldr.w	r7, [sp], #4
    a522:	4770      	bx	lr

0000a524 <hri_port_write_PMUX_PMUXO_bf>:
{
    a524:	b480      	push	{r7}
    a526:	b085      	sub	sp, #20
    a528:	af00      	add	r7, sp, #0
    a52a:	6078      	str	r0, [r7, #4]
    a52c:	4608      	mov	r0, r1
    a52e:	4611      	mov	r1, r2
    a530:	461a      	mov	r2, r3
    a532:	4603      	mov	r3, r0
    a534:	70fb      	strb	r3, [r7, #3]
    a536:	460b      	mov	r3, r1
    a538:	70bb      	strb	r3, [r7, #2]
    a53a:	4613      	mov	r3, r2
    a53c:	707b      	strb	r3, [r7, #1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    a53e:	78fa      	ldrb	r2, [r7, #3]
    a540:	78bb      	ldrb	r3, [r7, #2]
    a542:	6879      	ldr	r1, [r7, #4]
    a544:	01d2      	lsls	r2, r2, #7
    a546:	440a      	add	r2, r1
    a548:	4413      	add	r3, r2
    a54a:	3330      	adds	r3, #48	; 0x30
    a54c:	781b      	ldrb	r3, [r3, #0]
    a54e:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    a550:	7bfb      	ldrb	r3, [r7, #15]
    a552:	f003 030f 	and.w	r3, r3, #15
    a556:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXO(data);
    a558:	787b      	ldrb	r3, [r7, #1]
    a55a:	011b      	lsls	r3, r3, #4
    a55c:	b2da      	uxtb	r2, r3
    a55e:	7bfb      	ldrb	r3, [r7, #15]
    a560:	4313      	orrs	r3, r2
    a562:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    a564:	78fa      	ldrb	r2, [r7, #3]
    a566:	78bb      	ldrb	r3, [r7, #2]
    a568:	6879      	ldr	r1, [r7, #4]
    a56a:	01d2      	lsls	r2, r2, #7
    a56c:	440a      	add	r2, r1
    a56e:	4413      	add	r3, r2
    a570:	3330      	adds	r3, #48	; 0x30
    a572:	7bfa      	ldrb	r2, [r7, #15]
    a574:	701a      	strb	r2, [r3, #0]
}
    a576:	bf00      	nop
    a578:	3714      	adds	r7, #20
    a57a:	46bd      	mov	sp, r7
    a57c:	f85d 7b04 	ldr.w	r7, [sp], #4
    a580:	4770      	bx	lr

0000a582 <hri_port_write_PINCFG_PMUXEN_bit>:
{
    a582:	b480      	push	{r7}
    a584:	b085      	sub	sp, #20
    a586:	af00      	add	r7, sp, #0
    a588:	6078      	str	r0, [r7, #4]
    a58a:	4608      	mov	r0, r1
    a58c:	4611      	mov	r1, r2
    a58e:	461a      	mov	r2, r3
    a590:	4603      	mov	r3, r0
    a592:	70fb      	strb	r3, [r7, #3]
    a594:	460b      	mov	r3, r1
    a596:	70bb      	strb	r3, [r7, #2]
    a598:	4613      	mov	r3, r2
    a59a:	707b      	strb	r3, [r7, #1]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    a59c:	78fa      	ldrb	r2, [r7, #3]
    a59e:	78bb      	ldrb	r3, [r7, #2]
    a5a0:	6879      	ldr	r1, [r7, #4]
    a5a2:	01d2      	lsls	r2, r2, #7
    a5a4:	440a      	add	r2, r1
    a5a6:	4413      	add	r3, r2
    a5a8:	3340      	adds	r3, #64	; 0x40
    a5aa:	781b      	ldrb	r3, [r3, #0]
    a5ac:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PINCFG_PMUXEN;
    a5ae:	7bfb      	ldrb	r3, [r7, #15]
    a5b0:	f023 0301 	bic.w	r3, r3, #1
    a5b4:	73fb      	strb	r3, [r7, #15]
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    a5b6:	787a      	ldrb	r2, [r7, #1]
    a5b8:	7bfb      	ldrb	r3, [r7, #15]
    a5ba:	4313      	orrs	r3, r2
    a5bc:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    a5be:	78fa      	ldrb	r2, [r7, #3]
    a5c0:	78bb      	ldrb	r3, [r7, #2]
    a5c2:	6879      	ldr	r1, [r7, #4]
    a5c4:	01d2      	lsls	r2, r2, #7
    a5c6:	440a      	add	r2, r1
    a5c8:	4413      	add	r3, r2
    a5ca:	3340      	adds	r3, #64	; 0x40
    a5cc:	7bfa      	ldrb	r2, [r7, #15]
    a5ce:	701a      	strb	r2, [r3, #0]
}
    a5d0:	bf00      	nop
    a5d2:	3714      	adds	r7, #20
    a5d4:	46bd      	mov	sp, r7
    a5d6:	f85d 7b04 	ldr.w	r7, [sp], #4
    a5da:	4770      	bx	lr

0000a5dc <hri_port_write_WRCONFIG_reg>:
{
    a5dc:	b480      	push	{r7}
    a5de:	b085      	sub	sp, #20
    a5e0:	af00      	add	r7, sp, #0
    a5e2:	60f8      	str	r0, [r7, #12]
    a5e4:	460b      	mov	r3, r1
    a5e6:	607a      	str	r2, [r7, #4]
    a5e8:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    a5ea:	7afb      	ldrb	r3, [r7, #11]
    a5ec:	68fa      	ldr	r2, [r7, #12]
    a5ee:	01db      	lsls	r3, r3, #7
    a5f0:	4413      	add	r3, r2
    a5f2:	3328      	adds	r3, #40	; 0x28
    a5f4:	687a      	ldr	r2, [r7, #4]
    a5f6:	601a      	str	r2, [r3, #0]
}
    a5f8:	bf00      	nop
    a5fa:	3714      	adds	r7, #20
    a5fc:	46bd      	mov	sp, r7
    a5fe:	f85d 7b04 	ldr.w	r7, [sp], #4
    a602:	4770      	bx	lr

0000a604 <_gpio_set_direction>:
{
    a604:	b580      	push	{r7, lr}
    a606:	b082      	sub	sp, #8
    a608:	af00      	add	r7, sp, #0
    a60a:	4603      	mov	r3, r0
    a60c:	6039      	str	r1, [r7, #0]
    a60e:	71fb      	strb	r3, [r7, #7]
    a610:	4613      	mov	r3, r2
    a612:	71bb      	strb	r3, [r7, #6]
	switch (direction) {
    a614:	79bb      	ldrb	r3, [r7, #6]
    a616:	2b01      	cmp	r3, #1
    a618:	d01c      	beq.n	a654 <_gpio_set_direction+0x50>
    a61a:	2b02      	cmp	r3, #2
    a61c:	d037      	beq.n	a68e <_gpio_set_direction+0x8a>
    a61e:	2b00      	cmp	r3, #0
    a620:	d14e      	bne.n	a6c0 <_gpio_set_direction+0xbc>
		hri_port_clear_DIR_reg(PORT, port, mask);
    a622:	79fb      	ldrb	r3, [r7, #7]
    a624:	683a      	ldr	r2, [r7, #0]
    a626:	4619      	mov	r1, r3
    a628:	482a      	ldr	r0, [pc, #168]	; (a6d4 <_gpio_set_direction+0xd0>)
    a62a:	4b2b      	ldr	r3, [pc, #172]	; (a6d8 <_gpio_set_direction+0xd4>)
    a62c:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    a62e:	683b      	ldr	r3, [r7, #0]
    a630:	b29b      	uxth	r3, r3
    a632:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
    a636:	79fb      	ldrb	r3, [r7, #7]
    a638:	4619      	mov	r1, r3
    a63a:	4826      	ldr	r0, [pc, #152]	; (a6d4 <_gpio_set_direction+0xd0>)
    a63c:	4b27      	ldr	r3, [pc, #156]	; (a6dc <_gpio_set_direction+0xd8>)
    a63e:	4798      	blx	r3
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    a640:	683b      	ldr	r3, [r7, #0]
    a642:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
    a644:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
    a648:	79fb      	ldrb	r3, [r7, #7]
    a64a:	4619      	mov	r1, r3
    a64c:	4821      	ldr	r0, [pc, #132]	; (a6d4 <_gpio_set_direction+0xd0>)
    a64e:	4b23      	ldr	r3, [pc, #140]	; (a6dc <_gpio_set_direction+0xd8>)
    a650:	4798      	blx	r3
		break;
    a652:	e03a      	b.n	a6ca <_gpio_set_direction+0xc6>
		hri_port_clear_DIR_reg(PORT, port, mask);
    a654:	79fb      	ldrb	r3, [r7, #7]
    a656:	683a      	ldr	r2, [r7, #0]
    a658:	4619      	mov	r1, r3
    a65a:	481e      	ldr	r0, [pc, #120]	; (a6d4 <_gpio_set_direction+0xd0>)
    a65c:	4b1e      	ldr	r3, [pc, #120]	; (a6d8 <_gpio_set_direction+0xd4>)
    a65e:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN | (mask & 0xffff));
    a660:	683b      	ldr	r3, [r7, #0]
    a662:	b29b      	uxth	r3, r3
    a664:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
    a668:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    a66c:	79f9      	ldrb	r1, [r7, #7]
    a66e:	461a      	mov	r2, r3
    a670:	4818      	ldr	r0, [pc, #96]	; (a6d4 <_gpio_set_direction+0xd0>)
    a672:	4b1a      	ldr	r3, [pc, #104]	; (a6dc <_gpio_set_direction+0xd8>)
    a674:	4798      	blx	r3
		                                | ((mask & 0xffff0000) >> 16));
    a676:	683b      	ldr	r3, [r7, #0]
    a678:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(PORT,
    a67a:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
    a67e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    a682:	79f9      	ldrb	r1, [r7, #7]
    a684:	461a      	mov	r2, r3
    a686:	4813      	ldr	r0, [pc, #76]	; (a6d4 <_gpio_set_direction+0xd0>)
    a688:	4b14      	ldr	r3, [pc, #80]	; (a6dc <_gpio_set_direction+0xd8>)
    a68a:	4798      	blx	r3
		break;
    a68c:	e01d      	b.n	a6ca <_gpio_set_direction+0xc6>
		hri_port_set_DIR_reg(PORT, port, mask);
    a68e:	79fb      	ldrb	r3, [r7, #7]
    a690:	683a      	ldr	r2, [r7, #0]
    a692:	4619      	mov	r1, r3
    a694:	480f      	ldr	r0, [pc, #60]	; (a6d4 <_gpio_set_direction+0xd0>)
    a696:	4b12      	ldr	r3, [pc, #72]	; (a6e0 <_gpio_set_direction+0xdc>)
    a698:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    a69a:	683b      	ldr	r3, [r7, #0]
    a69c:	b29b      	uxth	r3, r3
    a69e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
    a6a2:	79fb      	ldrb	r3, [r7, #7]
    a6a4:	4619      	mov	r1, r3
    a6a6:	480b      	ldr	r0, [pc, #44]	; (a6d4 <_gpio_set_direction+0xd0>)
    a6a8:	4b0c      	ldr	r3, [pc, #48]	; (a6dc <_gpio_set_direction+0xd8>)
    a6aa:	4798      	blx	r3
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    a6ac:	683b      	ldr	r3, [r7, #0]
    a6ae:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
    a6b0:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
    a6b4:	79fb      	ldrb	r3, [r7, #7]
    a6b6:	4619      	mov	r1, r3
    a6b8:	4806      	ldr	r0, [pc, #24]	; (a6d4 <_gpio_set_direction+0xd0>)
    a6ba:	4b08      	ldr	r3, [pc, #32]	; (a6dc <_gpio_set_direction+0xd8>)
    a6bc:	4798      	blx	r3
		break;
    a6be:	e004      	b.n	a6ca <_gpio_set_direction+0xc6>
		ASSERT(false);
    a6c0:	2246      	movs	r2, #70	; 0x46
    a6c2:	4908      	ldr	r1, [pc, #32]	; (a6e4 <_gpio_set_direction+0xe0>)
    a6c4:	2000      	movs	r0, #0
    a6c6:	4b08      	ldr	r3, [pc, #32]	; (a6e8 <_gpio_set_direction+0xe4>)
    a6c8:	4798      	blx	r3
}
    a6ca:	bf00      	nop
    a6cc:	3708      	adds	r7, #8
    a6ce:	46bd      	mov	sp, r7
    a6d0:	bd80      	pop	{r7, pc}
    a6d2:	bf00      	nop
    a6d4:	41008000 	.word	0x41008000
    a6d8:	0000a44d 	.word	0x0000a44d
    a6dc:	0000a5dd 	.word	0x0000a5dd
    a6e0:	0000a425 	.word	0x0000a425
    a6e4:	000131d8 	.word	0x000131d8
    a6e8:	00002ed9 	.word	0x00002ed9

0000a6ec <_gpio_set_level>:
{
    a6ec:	b580      	push	{r7, lr}
    a6ee:	b082      	sub	sp, #8
    a6f0:	af00      	add	r7, sp, #0
    a6f2:	4603      	mov	r3, r0
    a6f4:	6039      	str	r1, [r7, #0]
    a6f6:	71fb      	strb	r3, [r7, #7]
    a6f8:	4613      	mov	r3, r2
    a6fa:	71bb      	strb	r3, [r7, #6]
	if (level) {
    a6fc:	79bb      	ldrb	r3, [r7, #6]
    a6fe:	2b00      	cmp	r3, #0
    a700:	d006      	beq.n	a710 <_gpio_set_level+0x24>
		hri_port_set_OUT_reg(PORT, port, mask);
    a702:	79fb      	ldrb	r3, [r7, #7]
    a704:	683a      	ldr	r2, [r7, #0]
    a706:	4619      	mov	r1, r3
    a708:	4806      	ldr	r0, [pc, #24]	; (a724 <_gpio_set_level+0x38>)
    a70a:	4b07      	ldr	r3, [pc, #28]	; (a728 <_gpio_set_level+0x3c>)
    a70c:	4798      	blx	r3
}
    a70e:	e005      	b.n	a71c <_gpio_set_level+0x30>
		hri_port_clear_OUT_reg(PORT, port, mask);
    a710:	79fb      	ldrb	r3, [r7, #7]
    a712:	683a      	ldr	r2, [r7, #0]
    a714:	4619      	mov	r1, r3
    a716:	4803      	ldr	r0, [pc, #12]	; (a724 <_gpio_set_level+0x38>)
    a718:	4b04      	ldr	r3, [pc, #16]	; (a72c <_gpio_set_level+0x40>)
    a71a:	4798      	blx	r3
}
    a71c:	bf00      	nop
    a71e:	3708      	adds	r7, #8
    a720:	46bd      	mov	sp, r7
    a722:	bd80      	pop	{r7, pc}
    a724:	41008000 	.word	0x41008000
    a728:	0000a475 	.word	0x0000a475
    a72c:	0000a49d 	.word	0x0000a49d

0000a730 <_gpio_set_pin_function>:
{
    a730:	b590      	push	{r4, r7, lr}
    a732:	b085      	sub	sp, #20
    a734:	af00      	add	r7, sp, #0
    a736:	6078      	str	r0, [r7, #4]
    a738:	6039      	str	r1, [r7, #0]
	uint8_t port = GPIO_PORT(gpio);
    a73a:	687b      	ldr	r3, [r7, #4]
    a73c:	095b      	lsrs	r3, r3, #5
    a73e:	73fb      	strb	r3, [r7, #15]
	uint8_t pin  = GPIO_PIN(gpio);
    a740:	687b      	ldr	r3, [r7, #4]
    a742:	b2db      	uxtb	r3, r3
    a744:	f003 031f 	and.w	r3, r3, #31
    a748:	73bb      	strb	r3, [r7, #14]
	if (function == GPIO_PIN_FUNCTION_OFF) {
    a74a:	683b      	ldr	r3, [r7, #0]
    a74c:	f1b3 3fff 	cmp.w	r3, #4294967295
    a750:	d106      	bne.n	a760 <_gpio_set_pin_function+0x30>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, false);
    a752:	7bba      	ldrb	r2, [r7, #14]
    a754:	7bf9      	ldrb	r1, [r7, #15]
    a756:	2300      	movs	r3, #0
    a758:	4812      	ldr	r0, [pc, #72]	; (a7a4 <_gpio_set_pin_function+0x74>)
    a75a:	4c13      	ldr	r4, [pc, #76]	; (a7a8 <_gpio_set_pin_function+0x78>)
    a75c:	47a0      	blx	r4
}
    a75e:	e01d      	b.n	a79c <_gpio_set_pin_function+0x6c>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, true);
    a760:	7bba      	ldrb	r2, [r7, #14]
    a762:	7bf9      	ldrb	r1, [r7, #15]
    a764:	2301      	movs	r3, #1
    a766:	480f      	ldr	r0, [pc, #60]	; (a7a4 <_gpio_set_pin_function+0x74>)
    a768:	4c0f      	ldr	r4, [pc, #60]	; (a7a8 <_gpio_set_pin_function+0x78>)
    a76a:	47a0      	blx	r4
		if (pin & 1) {
    a76c:	7bbb      	ldrb	r3, [r7, #14]
    a76e:	f003 0301 	and.w	r3, r3, #1
    a772:	2b00      	cmp	r3, #0
    a774:	d009      	beq.n	a78a <_gpio_set_pin_function+0x5a>
			hri_port_write_PMUX_PMUXO_bf(PORT, port, pin >> 1, function & 0xffff);
    a776:	7bbb      	ldrb	r3, [r7, #14]
    a778:	085b      	lsrs	r3, r3, #1
    a77a:	b2da      	uxtb	r2, r3
    a77c:	683b      	ldr	r3, [r7, #0]
    a77e:	b2db      	uxtb	r3, r3
    a780:	7bf9      	ldrb	r1, [r7, #15]
    a782:	4808      	ldr	r0, [pc, #32]	; (a7a4 <_gpio_set_pin_function+0x74>)
    a784:	4c09      	ldr	r4, [pc, #36]	; (a7ac <_gpio_set_pin_function+0x7c>)
    a786:	47a0      	blx	r4
}
    a788:	e008      	b.n	a79c <_gpio_set_pin_function+0x6c>
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
    a78a:	7bbb      	ldrb	r3, [r7, #14]
    a78c:	085b      	lsrs	r3, r3, #1
    a78e:	b2da      	uxtb	r2, r3
    a790:	683b      	ldr	r3, [r7, #0]
    a792:	b2db      	uxtb	r3, r3
    a794:	7bf9      	ldrb	r1, [r7, #15]
    a796:	4803      	ldr	r0, [pc, #12]	; (a7a4 <_gpio_set_pin_function+0x74>)
    a798:	4c05      	ldr	r4, [pc, #20]	; (a7b0 <_gpio_set_pin_function+0x80>)
    a79a:	47a0      	blx	r4
}
    a79c:	bf00      	nop
    a79e:	3714      	adds	r7, #20
    a7a0:	46bd      	mov	sp, r7
    a7a2:	bd90      	pop	{r4, r7, pc}
    a7a4:	41008000 	.word	0x41008000
    a7a8:	0000a583 	.word	0x0000a583
    a7ac:	0000a525 	.word	0x0000a525
    a7b0:	0000a4c5 	.word	0x0000a4c5

0000a7b4 <gpio_set_pin_function>:
{
    a7b4:	b580      	push	{r7, lr}
    a7b6:	b082      	sub	sp, #8
    a7b8:	af00      	add	r7, sp, #0
    a7ba:	6078      	str	r0, [r7, #4]
    a7bc:	6039      	str	r1, [r7, #0]
	_gpio_set_pin_function(pin, function);
    a7be:	6839      	ldr	r1, [r7, #0]
    a7c0:	6878      	ldr	r0, [r7, #4]
    a7c2:	4b03      	ldr	r3, [pc, #12]	; (a7d0 <gpio_set_pin_function+0x1c>)
    a7c4:	4798      	blx	r3
}
    a7c6:	bf00      	nop
    a7c8:	3708      	adds	r7, #8
    a7ca:	46bd      	mov	sp, r7
    a7cc:	bd80      	pop	{r7, pc}
    a7ce:	bf00      	nop
    a7d0:	0000a731 	.word	0x0000a731

0000a7d4 <gpio_set_pin_direction>:
{
    a7d4:	b580      	push	{r7, lr}
    a7d6:	b082      	sub	sp, #8
    a7d8:	af00      	add	r7, sp, #0
    a7da:	4603      	mov	r3, r0
    a7dc:	460a      	mov	r2, r1
    a7de:	71fb      	strb	r3, [r7, #7]
    a7e0:	4613      	mov	r3, r2
    a7e2:	71bb      	strb	r3, [r7, #6]
	_gpio_set_direction((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), direction);
    a7e4:	79fb      	ldrb	r3, [r7, #7]
    a7e6:	095b      	lsrs	r3, r3, #5
    a7e8:	b2d8      	uxtb	r0, r3
    a7ea:	79fb      	ldrb	r3, [r7, #7]
    a7ec:	f003 031f 	and.w	r3, r3, #31
    a7f0:	2201      	movs	r2, #1
    a7f2:	fa02 f303 	lsl.w	r3, r2, r3
    a7f6:	79ba      	ldrb	r2, [r7, #6]
    a7f8:	4619      	mov	r1, r3
    a7fa:	4b03      	ldr	r3, [pc, #12]	; (a808 <gpio_set_pin_direction+0x34>)
    a7fc:	4798      	blx	r3
}
    a7fe:	bf00      	nop
    a800:	3708      	adds	r7, #8
    a802:	46bd      	mov	sp, r7
    a804:	bd80      	pop	{r7, pc}
    a806:	bf00      	nop
    a808:	0000a605 	.word	0x0000a605

0000a80c <gpio_set_pin_level>:
{
    a80c:	b580      	push	{r7, lr}
    a80e:	b082      	sub	sp, #8
    a810:	af00      	add	r7, sp, #0
    a812:	4603      	mov	r3, r0
    a814:	460a      	mov	r2, r1
    a816:	71fb      	strb	r3, [r7, #7]
    a818:	4613      	mov	r3, r2
    a81a:	71bb      	strb	r3, [r7, #6]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
    a81c:	79fb      	ldrb	r3, [r7, #7]
    a81e:	095b      	lsrs	r3, r3, #5
    a820:	b2d8      	uxtb	r0, r3
    a822:	79fb      	ldrb	r3, [r7, #7]
    a824:	f003 031f 	and.w	r3, r3, #31
    a828:	2201      	movs	r2, #1
    a82a:	fa02 f303 	lsl.w	r3, r2, r3
    a82e:	79ba      	ldrb	r2, [r7, #6]
    a830:	4619      	mov	r1, r3
    a832:	4b03      	ldr	r3, [pc, #12]	; (a840 <gpio_set_pin_level+0x34>)
    a834:	4798      	blx	r3
}
    a836:	bf00      	nop
    a838:	3708      	adds	r7, #8
    a83a:	46bd      	mov	sp, r7
    a83c:	bd80      	pop	{r7, pc}
    a83e:	bf00      	nop
    a840:	0000a6ed 	.word	0x0000a6ed

0000a844 <QSPI_N25Q256_exit_xip>:
static struct n25q256a SPI_NOR_FLASH_0_descr;

struct spi_nor_flash *SPI_NOR_FLASH_0;

void QSPI_N25Q256_exit_xip(void)
{
    a844:	b580      	push	{r7, lr}
    a846:	b082      	sub	sp, #8
    a848:	af00      	add	r7, sp, #0
	gpio_set_pin_function(FLASH_IO0, 0);
    a84a:	2100      	movs	r1, #0
    a84c:	2008      	movs	r0, #8
    a84e:	4b24      	ldr	r3, [pc, #144]	; (a8e0 <QSPI_N25Q256_exit_xip+0x9c>)
    a850:	4798      	blx	r3
	gpio_set_pin_function(FLASH_CS, 0);
    a852:	2100      	movs	r1, #0
    a854:	202b      	movs	r0, #43	; 0x2b
    a856:	4b22      	ldr	r3, [pc, #136]	; (a8e0 <QSPI_N25Q256_exit_xip+0x9c>)
    a858:	4798      	blx	r3
	gpio_set_pin_function(FLASH_CLK, 0);
    a85a:	2100      	movs	r1, #0
    a85c:	202a      	movs	r0, #42	; 0x2a
    a85e:	4b20      	ldr	r3, [pc, #128]	; (a8e0 <QSPI_N25Q256_exit_xip+0x9c>)
    a860:	4798      	blx	r3

	gpio_set_pin_direction(FLASH_IO0, GPIO_DIRECTION_OUT);
    a862:	2102      	movs	r1, #2
    a864:	2008      	movs	r0, #8
    a866:	4b1f      	ldr	r3, [pc, #124]	; (a8e4 <QSPI_N25Q256_exit_xip+0xa0>)
    a868:	4798      	blx	r3
	gpio_set_pin_direction(FLASH_CS, GPIO_DIRECTION_OUT);
    a86a:	2102      	movs	r1, #2
    a86c:	202b      	movs	r0, #43	; 0x2b
    a86e:	4b1d      	ldr	r3, [pc, #116]	; (a8e4 <QSPI_N25Q256_exit_xip+0xa0>)
    a870:	4798      	blx	r3
	gpio_set_pin_direction(FLASH_CLK, GPIO_DIRECTION_OUT);
    a872:	2102      	movs	r1, #2
    a874:	202a      	movs	r0, #42	; 0x2a
    a876:	4b1b      	ldr	r3, [pc, #108]	; (a8e4 <QSPI_N25Q256_exit_xip+0xa0>)
    a878:	4798      	blx	r3

	gpio_set_pin_level(FLASH_IO0, true);
    a87a:	2101      	movs	r1, #1
    a87c:	2008      	movs	r0, #8
    a87e:	4b1a      	ldr	r3, [pc, #104]	; (a8e8 <QSPI_N25Q256_exit_xip+0xa4>)
    a880:	4798      	blx	r3
	gpio_set_pin_level(FLASH_CS, false);
    a882:	2100      	movs	r1, #0
    a884:	202b      	movs	r0, #43	; 0x2b
    a886:	4b18      	ldr	r3, [pc, #96]	; (a8e8 <QSPI_N25Q256_exit_xip+0xa4>)
    a888:	4798      	blx	r3
	gpio_set_pin_level(FLASH_CLK, false);
    a88a:	2100      	movs	r1, #0
    a88c:	202a      	movs	r0, #42	; 0x2a
    a88e:	4b16      	ldr	r3, [pc, #88]	; (a8e8 <QSPI_N25Q256_exit_xip+0xa4>)
    a890:	4798      	blx	r3

	delay_us(1);
    a892:	2001      	movs	r0, #1
    a894:	4b15      	ldr	r3, [pc, #84]	; (a8ec <QSPI_N25Q256_exit_xip+0xa8>)
    a896:	4798      	blx	r3

	for (int i = 0; i < 7; i++) {
    a898:	2300      	movs	r3, #0
    a89a:	607b      	str	r3, [r7, #4]
    a89c:	e010      	b.n	a8c0 <QSPI_N25Q256_exit_xip+0x7c>
		gpio_set_pin_level(FLASH_CLK, true);
    a89e:	2101      	movs	r1, #1
    a8a0:	202a      	movs	r0, #42	; 0x2a
    a8a2:	4b11      	ldr	r3, [pc, #68]	; (a8e8 <QSPI_N25Q256_exit_xip+0xa4>)
    a8a4:	4798      	blx	r3
		delay_us(1);
    a8a6:	2001      	movs	r0, #1
    a8a8:	4b10      	ldr	r3, [pc, #64]	; (a8ec <QSPI_N25Q256_exit_xip+0xa8>)
    a8aa:	4798      	blx	r3
		gpio_set_pin_level(FLASH_CLK, false);
    a8ac:	2100      	movs	r1, #0
    a8ae:	202a      	movs	r0, #42	; 0x2a
    a8b0:	4b0d      	ldr	r3, [pc, #52]	; (a8e8 <QSPI_N25Q256_exit_xip+0xa4>)
    a8b2:	4798      	blx	r3
		delay_us(1);
    a8b4:	2001      	movs	r0, #1
    a8b6:	4b0d      	ldr	r3, [pc, #52]	; (a8ec <QSPI_N25Q256_exit_xip+0xa8>)
    a8b8:	4798      	blx	r3
	for (int i = 0; i < 7; i++) {
    a8ba:	687b      	ldr	r3, [r7, #4]
    a8bc:	3301      	adds	r3, #1
    a8be:	607b      	str	r3, [r7, #4]
    a8c0:	687b      	ldr	r3, [r7, #4]
    a8c2:	2b06      	cmp	r3, #6
    a8c4:	ddeb      	ble.n	a89e <QSPI_N25Q256_exit_xip+0x5a>
	}

	gpio_set_pin_level(FLASH_CS, true);
    a8c6:	2101      	movs	r1, #1
    a8c8:	202b      	movs	r0, #43	; 0x2b
    a8ca:	4b07      	ldr	r3, [pc, #28]	; (a8e8 <QSPI_N25Q256_exit_xip+0xa4>)
    a8cc:	4798      	blx	r3
	delay_us(1);
    a8ce:	2001      	movs	r0, #1
    a8d0:	4b06      	ldr	r3, [pc, #24]	; (a8ec <QSPI_N25Q256_exit_xip+0xa8>)
    a8d2:	4798      	blx	r3
	QSPI_N25Q256_PORT_init();
    a8d4:	4b06      	ldr	r3, [pc, #24]	; (a8f0 <QSPI_N25Q256_exit_xip+0xac>)
    a8d6:	4798      	blx	r3
}
    a8d8:	bf00      	nop
    a8da:	3708      	adds	r7, #8
    a8dc:	46bd      	mov	sp, r7
    a8de:	bd80      	pop	{r7, pc}
    a8e0:	0000a7b5 	.word	0x0000a7b5
    a8e4:	0000a7d5 	.word	0x0000a7d5
    a8e8:	0000a80d 	.word	0x0000a80d
    a8ec:	00001999 	.word	0x00001999
    a8f0:	00000da5 	.word	0x00000da5

0000a8f4 <spi_nor_flash_init>:

/**
 * \brief Initialize Temperature Sensors
 */
void spi_nor_flash_init(void)
{
    a8f4:	b598      	push	{r3, r4, r7, lr}
    a8f6:	af00      	add	r7, sp, #0

	qspi_sync_enable(&QSPI_N25Q256);
    a8f8:	4806      	ldr	r0, [pc, #24]	; (a914 <spi_nor_flash_init+0x20>)
    a8fa:	4b07      	ldr	r3, [pc, #28]	; (a918 <spi_nor_flash_init+0x24>)
    a8fc:	4798      	blx	r3
	SPI_NOR_FLASH_0 = n25q256a_construct(
    a8fe:	2300      	movs	r3, #0
    a900:	4a06      	ldr	r2, [pc, #24]	; (a91c <spi_nor_flash_init+0x28>)
    a902:	4904      	ldr	r1, [pc, #16]	; (a914 <spi_nor_flash_init+0x20>)
    a904:	4806      	ldr	r0, [pc, #24]	; (a920 <spi_nor_flash_init+0x2c>)
    a906:	4c07      	ldr	r4, [pc, #28]	; (a924 <spi_nor_flash_init+0x30>)
    a908:	47a0      	blx	r4
    a90a:	4602      	mov	r2, r0
    a90c:	4b06      	ldr	r3, [pc, #24]	; (a928 <spi_nor_flash_init+0x34>)
    a90e:	601a      	str	r2, [r3, #0]
	    &SPI_NOR_FLASH_0_descr.parent, &QSPI_N25Q256, QSPI_N25Q256_exit_xip, CONF_SPI_NOR_FLASH_0_QUAD_MODE);
}
    a910:	bf00      	nop
    a912:	bd98      	pop	{r3, r4, r7, pc}
    a914:	20001a18 	.word	0x20001a18
    a918:	00001dad 	.word	0x00001dad
    a91c:	0000a845 	.word	0x0000a845
    a920:	20000fec 	.word	0x20000fec
    a924:	0000ad61 	.word	0x0000ad61
    a928:	20001c08 	.word	0x20001c08

0000a92c <cdc_device_acm_init>:

/**
 * \brief CDC ACM Init
 */
void cdc_device_acm_init(void)
{
    a92c:	b580      	push	{r7, lr}
    a92e:	af00      	add	r7, sp, #0
	/* usb stack init */
	usbdc_init(ctrl_buffer);
    a930:	4805      	ldr	r0, [pc, #20]	; (a948 <cdc_device_acm_init+0x1c>)
    a932:	4b06      	ldr	r3, [pc, #24]	; (a94c <cdc_device_acm_init+0x20>)
    a934:	4798      	blx	r3

	/* usbdc_register_funcion inside */
	cdcdf_acm_init();
    a936:	4b06      	ldr	r3, [pc, #24]	; (a950 <cdc_device_acm_init+0x24>)
    a938:	4798      	blx	r3

	usbdc_start(single_desc);
    a93a:	4806      	ldr	r0, [pc, #24]	; (a954 <cdc_device_acm_init+0x28>)
    a93c:	4b06      	ldr	r3, [pc, #24]	; (a958 <cdc_device_acm_init+0x2c>)
    a93e:	4798      	blx	r3
	usbdc_attach();
    a940:	4b06      	ldr	r3, [pc, #24]	; (a95c <cdc_device_acm_init+0x30>)
    a942:	4798      	blx	r3
}
    a944:	bf00      	nop
    a946:	bd80      	pop	{r7, pc}
    a948:	2000103c 	.word	0x2000103c
    a94c:	0000c34d 	.word	0x0000c34d
    a950:	0000b701 	.word	0x0000b701
    a954:	20000104 	.word	0x20000104
    a958:	0000c3e9 	.word	0x0000c3e9
    a95c:	0000c439 	.word	0x0000c439

0000a960 <usb_init>:
	while (1) {
	}
}

void usb_init(void)
{
    a960:	b580      	push	{r7, lr}
    a962:	af00      	add	r7, sp, #0

	cdc_device_acm_init();
    a964:	4b01      	ldr	r3, [pc, #4]	; (a96c <usb_init+0xc>)
    a966:	4798      	blx	r3
}
    a968:	bf00      	nop
    a96a:	bd80      	pop	{r7, pc}
    a96c:	0000a92d 	.word	0x0000a92d

0000a970 <atomic_enter_critical>:

/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
    a970:	b480      	push	{r7}
    a972:	b085      	sub	sp, #20
    a974:	af00      	add	r7, sp, #0
    a976:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    a978:	f3ef 8310 	mrs	r3, PRIMASK
    a97c:	60fb      	str	r3, [r7, #12]
  return(result);
    a97e:	68fa      	ldr	r2, [r7, #12]
	*atomic = __get_PRIMASK();
    a980:	687b      	ldr	r3, [r7, #4]
    a982:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
    a984:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    a986:	f3bf 8f5f 	dmb	sy
	__disable_irq();
	__DMB();
}
    a98a:	bf00      	nop
    a98c:	3714      	adds	r7, #20
    a98e:	46bd      	mov	sp, r7
    a990:	f85d 7b04 	ldr.w	r7, [sp], #4
    a994:	4770      	bx	lr

0000a996 <atomic_leave_critical>:

/**
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
    a996:	b480      	push	{r7}
    a998:	b085      	sub	sp, #20
    a99a:	af00      	add	r7, sp, #0
    a99c:	6078      	str	r0, [r7, #4]
    a99e:	f3bf 8f5f 	dmb	sy
	__DMB();
	__set_PRIMASK(*atomic);
    a9a2:	687b      	ldr	r3, [r7, #4]
    a9a4:	681b      	ldr	r3, [r3, #0]
    a9a6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    a9a8:	68fb      	ldr	r3, [r7, #12]
    a9aa:	f383 8810 	msr	PRIMASK, r3
}
    a9ae:	bf00      	nop
    a9b0:	3714      	adds	r7, #20
    a9b2:	46bd      	mov	sp, r7
    a9b4:	f85d 7b04 	ldr.w	r7, [sp], #4
    a9b8:	4770      	bx	lr
	...

0000a9bc <n25q256a_xip_confirm>:
    n25q256a_enable_xip,
    n25q256a_disable_xip,
};

int32_t n25q256a_xip_confirm(const struct spi_nor_flash *const me, const bool on_off)
{
    a9bc:	b580      	push	{r7, lr}
    a9be:	b08c      	sub	sp, #48	; 0x30
    a9c0:	af00      	add	r7, sp, #0
    a9c2:	6078      	str	r0, [r7, #4]
    a9c4:	460b      	mov	r3, r1
    a9c6:	70fb      	strb	r3, [r7, #3]
	uint8_t                      dummy;
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    a9c8:	687b      	ldr	r3, [r7, #4]
    a9ca:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    a9cc:	687b      	ldr	r3, [r7, #4]
    a9ce:	681b      	ldr	r3, [r3, #0]
    a9d0:	62bb      	str	r3, [r7, #40]	; 0x28
	struct _qspi_command         cmd
    a9d2:	f107 030c 	add.w	r3, r7, #12
    a9d6:	2200      	movs	r2, #0
    a9d8:	601a      	str	r2, [r3, #0]
    a9da:	605a      	str	r2, [r3, #4]
    a9dc:	609a      	str	r2, [r3, #8]
    a9de:	60da      	str	r2, [r3, #12]
    a9e0:	611a      	str	r2, [r3, #16]
    a9e2:	615a      	str	r2, [r3, #20]
	    = {.inst_frame.bits.width        = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1,
    a9e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    a9e6:	7b1b      	ldrb	r3, [r3, #12]
    a9e8:	2b00      	cmp	r3, #0
    a9ea:	d001      	beq.n	a9f0 <n25q256a_xip_confirm+0x34>
    a9ec:	2206      	movs	r2, #6
    a9ee:	e000      	b.n	a9f2 <n25q256a_xip_confirm+0x36>
    a9f0:	2200      	movs	r2, #0
	struct _qspi_command         cmd
    a9f2:	7b3b      	ldrb	r3, [r7, #12]
    a9f4:	f362 0302 	bfi	r3, r2, #0, #3
    a9f8:	733b      	strb	r3, [r7, #12]
    a9fa:	7b3b      	ldrb	r3, [r7, #12]
    a9fc:	f043 0310 	orr.w	r3, r3, #16
    aa00:	733b      	strb	r3, [r7, #12]
    aa02:	7b3b      	ldrb	r3, [r7, #12]
    aa04:	f043 0320 	orr.w	r3, r3, #32
    aa08:	733b      	strb	r3, [r7, #12]
    aa0a:	7b3b      	ldrb	r3, [r7, #12]
    aa0c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    aa10:	733b      	strb	r3, [r7, #12]
    aa12:	7b3b      	ldrb	r3, [r7, #12]
    aa14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    aa18:	733b      	strb	r3, [r7, #12]
    aa1a:	7b7b      	ldrb	r3, [r7, #13]
    aa1c:	f043 0303 	orr.w	r3, r3, #3
    aa20:	737b      	strb	r3, [r7, #13]
    aa22:	7b7b      	ldrb	r3, [r7, #13]
    aa24:	2201      	movs	r2, #1
    aa26:	f362 1305 	bfi	r3, r2, #4, #2
    aa2a:	737b      	strb	r3, [r7, #13]
	       .inst_frame.bits.inst_en      = 1,
	       .inst_frame.bits.data_en      = 1,
	       .inst_frame.bits.addr_en      = 1,
	       .inst_frame.bits.opt_en       = 1,
	       .inst_frame.bits.opt_len      = QSPI_OPT_8BIT,
	       .inst_frame.bits.dummy_cycles = n25q->quad_mode ? 8 : 0,
    aa2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    aa2e:	7b1b      	ldrb	r3, [r3, #12]
    aa30:	2b00      	cmp	r3, #0
    aa32:	d001      	beq.n	aa38 <n25q256a_xip_confirm+0x7c>
    aa34:	2208      	movs	r2, #8
    aa36:	e000      	b.n	aa3a <n25q256a_xip_confirm+0x7e>
    aa38:	2200      	movs	r2, #0
	struct _qspi_command         cmd
    aa3a:	7bbb      	ldrb	r3, [r7, #14]
    aa3c:	f362 0304 	bfi	r3, r2, #0, #5
    aa40:	73bb      	strb	r3, [r7, #14]
    aa42:	230b      	movs	r3, #11
    aa44:	743b      	strb	r3, [r7, #16]
    aa46:	78fb      	ldrb	r3, [r7, #3]
    aa48:	2b00      	cmp	r3, #0
    aa4a:	d001      	beq.n	aa50 <n25q256a_xip_confirm+0x94>
    aa4c:	2300      	movs	r3, #0
    aa4e:	e000      	b.n	aa52 <n25q256a_xip_confirm+0x96>
    aa50:	23ff      	movs	r3, #255	; 0xff
    aa52:	747b      	strb	r3, [r7, #17]
    aa54:	2301      	movs	r3, #1
    aa56:	61bb      	str	r3, [r7, #24]
    aa58:	f107 0327 	add.w	r3, r7, #39	; 0x27
    aa5c:	623b      	str	r3, [r7, #32]
	       .instruction                  = N25Q_FAST_READ,
	       .option                       = on_off ? 0x00 : 0xFF,
	       .address                      = 0,
	       .buf_len                      = 1,
	       .rx_buf                       = &dummy};
	qspi_sync_serial_run_command(descr, &cmd);
    aa5e:	f107 030c 	add.w	r3, r7, #12
    aa62:	4619      	mov	r1, r3
    aa64:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    aa66:	4b07      	ldr	r3, [pc, #28]	; (aa84 <n25q256a_xip_confirm+0xc8>)
    aa68:	4798      	blx	r3
	n25q->xip_mode = on_off ? 2 : 1;
    aa6a:	78fb      	ldrb	r3, [r7, #3]
    aa6c:	2b00      	cmp	r3, #0
    aa6e:	d001      	beq.n	aa74 <n25q256a_xip_confirm+0xb8>
    aa70:	2202      	movs	r2, #2
    aa72:	e000      	b.n	aa76 <n25q256a_xip_confirm+0xba>
    aa74:	2201      	movs	r2, #1
    aa76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    aa78:	735a      	strb	r2, [r3, #13]
	return ERR_NONE;
    aa7a:	2300      	movs	r3, #0
}
    aa7c:	4618      	mov	r0, r3
    aa7e:	3730      	adds	r7, #48	; 0x30
    aa80:	46bd      	mov	sp, r7
    aa82:	bd80      	pop	{r7, pc}
    aa84:	00001e25 	.word	0x00001e25

0000aa88 <n25q256a_read_reg>:

uint32_t n25q256a_read_reg(const struct spi_nor_flash *const me, uint8_t width, uint8_t inst)
{
    aa88:	b580      	push	{r7, lr}
    aa8a:	b08c      	sub	sp, #48	; 0x30
    aa8c:	af00      	add	r7, sp, #0
    aa8e:	6078      	str	r0, [r7, #4]
    aa90:	460b      	mov	r3, r1
    aa92:	70fb      	strb	r3, [r7, #3]
    aa94:	4613      	mov	r3, r2
    aa96:	70bb      	strb	r3, [r7, #2]
	uint32_t                     status = 0;
    aa98:	2300      	movs	r3, #0
    aa9a:	627b      	str	r3, [r7, #36]	; 0x24
	struct n25q256a *            n25q   = (struct n25q256a *)me;
    aa9c:	687b      	ldr	r3, [r7, #4]
    aa9e:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr  = (struct qspi_sync_descriptor *)(me->io);
    aaa0:	687b      	ldr	r3, [r7, #4]
    aaa2:	681b      	ldr	r3, [r3, #0]
    aaa4:	62bb      	str	r3, [r7, #40]	; 0x28
	struct _qspi_command         cmd    = {.inst_frame.bits.width    = width,
    aaa6:	f107 030c 	add.w	r3, r7, #12
    aaaa:	2200      	movs	r2, #0
    aaac:	601a      	str	r2, [r3, #0]
    aaae:	605a      	str	r2, [r3, #4]
    aab0:	609a      	str	r2, [r3, #8]
    aab2:	60da      	str	r2, [r3, #12]
    aab4:	611a      	str	r2, [r3, #16]
    aab6:	615a      	str	r2, [r3, #20]
    aab8:	78fb      	ldrb	r3, [r7, #3]
    aaba:	f003 0307 	and.w	r3, r3, #7
    aabe:	b2da      	uxtb	r2, r3
    aac0:	7b3b      	ldrb	r3, [r7, #12]
    aac2:	f362 0302 	bfi	r3, r2, #0, #3
    aac6:	733b      	strb	r3, [r7, #12]
    aac8:	7b3b      	ldrb	r3, [r7, #12]
    aaca:	f043 0310 	orr.w	r3, r3, #16
    aace:	733b      	strb	r3, [r7, #12]
    aad0:	7b3b      	ldrb	r3, [r7, #12]
    aad2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    aad6:	733b      	strb	r3, [r7, #12]
    aad8:	78bb      	ldrb	r3, [r7, #2]
    aada:	743b      	strb	r3, [r7, #16]
    aadc:	2301      	movs	r3, #1
    aade:	61bb      	str	r3, [r7, #24]
    aae0:	f107 0324 	add.w	r3, r7, #36	; 0x24
    aae4:	623b      	str	r3, [r7, #32]
                                .inst_frame.bits.data_en  = 1,
                                .inst_frame.bits.tfr_type = QSPI_READ_ACCESS,
                                .instruction              = inst,
                                .buf_len                  = N25Q_RD_REG_SIZE(inst),
                                .rx_buf                   = &status};
	if (n25q->xip_mode) {
    aae6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    aae8:	7b5b      	ldrb	r3, [r3, #13]
    aaea:	2b00      	cmp	r3, #0
    aaec:	d003      	beq.n	aaf6 <n25q256a_read_reg+0x6e>
		n25q256a_xip_confirm(me, false);
    aaee:	2100      	movs	r1, #0
    aaf0:	6878      	ldr	r0, [r7, #4]
    aaf2:	4b0a      	ldr	r3, [pc, #40]	; (ab1c <n25q256a_read_reg+0x94>)
    aaf4:	4798      	blx	r3
	}
	qspi_sync_serial_run_command(descr, &cmd);
    aaf6:	f107 030c 	add.w	r3, r7, #12
    aafa:	4619      	mov	r1, r3
    aafc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    aafe:	4b08      	ldr	r3, [pc, #32]	; (ab20 <n25q256a_read_reg+0x98>)
    ab00:	4798      	blx	r3
	if (n25q->xip_mode) {
    ab02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    ab04:	7b5b      	ldrb	r3, [r3, #13]
    ab06:	2b00      	cmp	r3, #0
    ab08:	d003      	beq.n	ab12 <n25q256a_read_reg+0x8a>
		n25q256a_xip_confirm(me, true);
    ab0a:	2101      	movs	r1, #1
    ab0c:	6878      	ldr	r0, [r7, #4]
    ab0e:	4b03      	ldr	r3, [pc, #12]	; (ab1c <n25q256a_read_reg+0x94>)
    ab10:	4798      	blx	r3
	}
	return status;
    ab12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
    ab14:	4618      	mov	r0, r3
    ab16:	3730      	adds	r7, #48	; 0x30
    ab18:	46bd      	mov	sp, r7
    ab1a:	bd80      	pop	{r7, pc}
    ab1c:	0000a9bd 	.word	0x0000a9bd
    ab20:	00001e25 	.word	0x00001e25

0000ab24 <n25q256a_write_reg>:
void n25q256a_write_reg(const struct spi_nor_flash *const me, uint8_t width, uint8_t inst, uint32_t data)
{
    ab24:	b580      	push	{r7, lr}
    ab26:	b08c      	sub	sp, #48	; 0x30
    ab28:	af00      	add	r7, sp, #0
    ab2a:	60f8      	str	r0, [r7, #12]
    ab2c:	607b      	str	r3, [r7, #4]
    ab2e:	460b      	mov	r3, r1
    ab30:	72fb      	strb	r3, [r7, #11]
    ab32:	4613      	mov	r3, r2
    ab34:	72bb      	strb	r3, [r7, #10]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    ab36:	68fb      	ldr	r3, [r7, #12]
    ab38:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    ab3a:	68fb      	ldr	r3, [r7, #12]
    ab3c:	681b      	ldr	r3, [r3, #0]
    ab3e:	62bb      	str	r3, [r7, #40]	; 0x28
	struct _qspi_command         cmd   = {.inst_frame.bits.width    = width,
    ab40:	f107 0310 	add.w	r3, r7, #16
    ab44:	2200      	movs	r2, #0
    ab46:	601a      	str	r2, [r3, #0]
    ab48:	605a      	str	r2, [r3, #4]
    ab4a:	609a      	str	r2, [r3, #8]
    ab4c:	60da      	str	r2, [r3, #12]
    ab4e:	611a      	str	r2, [r3, #16]
    ab50:	615a      	str	r2, [r3, #20]
    ab52:	7afb      	ldrb	r3, [r7, #11]
    ab54:	f003 0307 	and.w	r3, r3, #7
    ab58:	b2da      	uxtb	r2, r3
    ab5a:	7c3b      	ldrb	r3, [r7, #16]
    ab5c:	f362 0302 	bfi	r3, r2, #0, #3
    ab60:	743b      	strb	r3, [r7, #16]
    ab62:	7c3b      	ldrb	r3, [r7, #16]
    ab64:	f043 0310 	orr.w	r3, r3, #16
    ab68:	743b      	strb	r3, [r7, #16]
    ab6a:	7c3b      	ldrb	r3, [r7, #16]
    ab6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    ab70:	743b      	strb	r3, [r7, #16]
    ab72:	7c7b      	ldrb	r3, [r7, #17]
    ab74:	2202      	movs	r2, #2
    ab76:	f362 1305 	bfi	r3, r2, #4, #2
    ab7a:	747b      	strb	r3, [r7, #17]
    ab7c:	7abb      	ldrb	r3, [r7, #10]
    ab7e:	753b      	strb	r3, [r7, #20]
    ab80:	2301      	movs	r3, #1
    ab82:	61fb      	str	r3, [r7, #28]
    ab84:	1d3b      	adds	r3, r7, #4
    ab86:	623b      	str	r3, [r7, #32]
                                .inst_frame.bits.data_en  = 1,
                                .inst_frame.bits.tfr_type = QSPI_WRITE_ACCESS,
                                .instruction              = inst,
                                .buf_len                  = N25Q_WR_REG_SIZE(inst),
                                .tx_buf                   = &data};
	if (n25q->xip_mode) {
    ab88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    ab8a:	7b5b      	ldrb	r3, [r3, #13]
    ab8c:	2b00      	cmp	r3, #0
    ab8e:	d003      	beq.n	ab98 <n25q256a_write_reg+0x74>
		n25q256a_xip_confirm(me, false);
    ab90:	2100      	movs	r1, #0
    ab92:	68f8      	ldr	r0, [r7, #12]
    ab94:	4b09      	ldr	r3, [pc, #36]	; (abbc <n25q256a_write_reg+0x98>)
    ab96:	4798      	blx	r3
	}
	qspi_sync_serial_run_command(descr, &cmd);
    ab98:	f107 0310 	add.w	r3, r7, #16
    ab9c:	4619      	mov	r1, r3
    ab9e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    aba0:	4b07      	ldr	r3, [pc, #28]	; (abc0 <n25q256a_write_reg+0x9c>)
    aba2:	4798      	blx	r3
	if (n25q->xip_mode) {
    aba4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    aba6:	7b5b      	ldrb	r3, [r3, #13]
    aba8:	2b00      	cmp	r3, #0
    abaa:	d003      	beq.n	abb4 <n25q256a_write_reg+0x90>
		n25q256a_xip_confirm(me, true);
    abac:	2101      	movs	r1, #1
    abae:	68f8      	ldr	r0, [r7, #12]
    abb0:	4b02      	ldr	r3, [pc, #8]	; (abbc <n25q256a_write_reg+0x98>)
    abb2:	4798      	blx	r3
	}
}
    abb4:	bf00      	nop
    abb6:	3730      	adds	r7, #48	; 0x30
    abb8:	46bd      	mov	sp, r7
    abba:	bd80      	pop	{r7, pc}
    abbc:	0000a9bd 	.word	0x0000a9bd
    abc0:	00001e25 	.word	0x00001e25

0000abc4 <n25q256a_write_enable>:

void n25q256a_write_enable(const struct spi_nor_flash *const me, uint8_t width, bool en)
{
    abc4:	b580      	push	{r7, lr}
    abc6:	b090      	sub	sp, #64	; 0x40
    abc8:	af00      	add	r7, sp, #0
    abca:	6078      	str	r0, [r7, #4]
    abcc:	460b      	mov	r3, r1
    abce:	70fb      	strb	r3, [r7, #3]
    abd0:	4613      	mov	r3, r2
    abd2:	70bb      	strb	r3, [r7, #2]
	uint8_t                      status;
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    abd4:	687b      	ldr	r3, [r7, #4]
    abd6:	681b      	ldr	r3, [r3, #0]
    abd8:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint8_t                      inst  = (en == true ? N25Q_WRITE_ENABLE : N25Q_WRITE_DISABLE);
    abda:	78bb      	ldrb	r3, [r7, #2]
    abdc:	2b00      	cmp	r3, #0
    abde:	d001      	beq.n	abe4 <n25q256a_write_enable+0x20>
    abe0:	2306      	movs	r3, #6
    abe2:	e000      	b.n	abe6 <n25q256a_write_enable+0x22>
    abe4:	2304      	movs	r3, #4
    abe6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	struct _qspi_command cmd_en = {.inst_frame.bits.width = width, .inst_frame.bits.inst_en = 1, .instruction = inst};
    abea:	f107 0320 	add.w	r3, r7, #32
    abee:	2200      	movs	r2, #0
    abf0:	601a      	str	r2, [r3, #0]
    abf2:	605a      	str	r2, [r3, #4]
    abf4:	609a      	str	r2, [r3, #8]
    abf6:	60da      	str	r2, [r3, #12]
    abf8:	611a      	str	r2, [r3, #16]
    abfa:	615a      	str	r2, [r3, #20]
    abfc:	78fb      	ldrb	r3, [r7, #3]
    abfe:	f003 0307 	and.w	r3, r3, #7
    ac02:	b2da      	uxtb	r2, r3
    ac04:	f897 3020 	ldrb.w	r3, [r7, #32]
    ac08:	f362 0302 	bfi	r3, r2, #0, #3
    ac0c:	f887 3020 	strb.w	r3, [r7, #32]
    ac10:	f897 3020 	ldrb.w	r3, [r7, #32]
    ac14:	f043 0310 	orr.w	r3, r3, #16
    ac18:	f887 3020 	strb.w	r3, [r7, #32]
    ac1c:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
    ac20:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	struct _qspi_command cmd_st = {.inst_frame.bits.width    = width,
    ac24:	f107 0308 	add.w	r3, r7, #8
    ac28:	2200      	movs	r2, #0
    ac2a:	601a      	str	r2, [r3, #0]
    ac2c:	605a      	str	r2, [r3, #4]
    ac2e:	609a      	str	r2, [r3, #8]
    ac30:	60da      	str	r2, [r3, #12]
    ac32:	611a      	str	r2, [r3, #16]
    ac34:	615a      	str	r2, [r3, #20]
    ac36:	78fb      	ldrb	r3, [r7, #3]
    ac38:	f003 0307 	and.w	r3, r3, #7
    ac3c:	b2da      	uxtb	r2, r3
    ac3e:	7a3b      	ldrb	r3, [r7, #8]
    ac40:	f362 0302 	bfi	r3, r2, #0, #3
    ac44:	723b      	strb	r3, [r7, #8]
    ac46:	7a3b      	ldrb	r3, [r7, #8]
    ac48:	f043 0310 	orr.w	r3, r3, #16
    ac4c:	723b      	strb	r3, [r7, #8]
    ac4e:	7a3b      	ldrb	r3, [r7, #8]
    ac50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    ac54:	723b      	strb	r3, [r7, #8]
    ac56:	2305      	movs	r3, #5
    ac58:	733b      	strb	r3, [r7, #12]
    ac5a:	2301      	movs	r3, #1
    ac5c:	617b      	str	r3, [r7, #20]
    ac5e:	f107 033a 	add.w	r3, r7, #58	; 0x3a
    ac62:	61fb      	str	r3, [r7, #28]
	                               .inst_frame.bits.tfr_type = QSPI_READ_ACCESS,
	                               .instruction              = N25Q_READ_STATUS_REGISTER,
	                               .buf_len                  = 1,
	                               .rx_buf                   = &status};
	do {
		qspi_sync_serial_run_command(descr, &cmd_en);
    ac64:	f107 0320 	add.w	r3, r7, #32
    ac68:	4619      	mov	r1, r3
    ac6a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
    ac6c:	4b08      	ldr	r3, [pc, #32]	; (ac90 <n25q256a_write_enable+0xcc>)
    ac6e:	4798      	blx	r3
		qspi_sync_serial_run_command(descr, &cmd_st);
    ac70:	f107 0308 	add.w	r3, r7, #8
    ac74:	4619      	mov	r1, r3
    ac76:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
    ac78:	4b05      	ldr	r3, [pc, #20]	; (ac90 <n25q256a_write_enable+0xcc>)
    ac7a:	4798      	blx	r3
	} while ((status & (1 << 1)) == 0);
    ac7c:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
    ac80:	f003 0302 	and.w	r3, r3, #2
    ac84:	2b00      	cmp	r3, #0
    ac86:	d0ed      	beq.n	ac64 <n25q256a_write_enable+0xa0>
}
    ac88:	bf00      	nop
    ac8a:	3740      	adds	r7, #64	; 0x40
    ac8c:	46bd      	mov	sp, r7
    ac8e:	bd80      	pop	{r7, pc}
    ac90:	00001e25 	.word	0x00001e25

0000ac94 <n25q256a_switch_mode>:

void n25q256a_switch_mode(const struct spi_nor_flash *const me, uint8_t mode)
{
    ac94:	b590      	push	{r4, r7, lr}
    ac96:	b087      	sub	sp, #28
    ac98:	af00      	add	r7, sp, #0
    ac9a:	6078      	str	r0, [r7, #4]
    ac9c:	460b      	mov	r3, r1
    ac9e:	70fb      	strb	r3, [r7, #3]
	struct n25q256a *n25q   = (struct n25q256a *)me;
    aca0:	687b      	ldr	r3, [r7, #4]
    aca2:	60fb      	str	r3, [r7, #12]
	uint8_t          width  = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    aca4:	68fb      	ldr	r3, [r7, #12]
    aca6:	7b1b      	ldrb	r3, [r3, #12]
    aca8:	2b00      	cmp	r3, #0
    acaa:	d001      	beq.n	acb0 <n25q256a_switch_mode+0x1c>
    acac:	2306      	movs	r3, #6
    acae:	e000      	b.n	acb2 <n25q256a_switch_mode+0x1e>
    acb0:	2300      	movs	r3, #0
    acb2:	72fb      	strb	r3, [r7, #11]
	uint32_t         evcfg  = n25q256a_read_reg(me, width, N25Q_READ_ENHANCED_VOLATILE_CONFIG_REGISTER);
    acb4:	7afb      	ldrb	r3, [r7, #11]
    acb6:	2265      	movs	r2, #101	; 0x65
    acb8:	4619      	mov	r1, r3
    acba:	6878      	ldr	r0, [r7, #4]
    acbc:	4b25      	ldr	r3, [pc, #148]	; (ad54 <n25q256a_switch_mode+0xc0>)
    acbe:	4798      	blx	r3
    acc0:	6178      	str	r0, [r7, #20]
	uint8_t          modify = 0;
    acc2:	2300      	movs	r3, #0
    acc4:	74fb      	strb	r3, [r7, #19]
	if (n25q->quad_mode == mode) {
    acc6:	68fb      	ldr	r3, [r7, #12]
    acc8:	7b1b      	ldrb	r3, [r3, #12]
    acca:	78fa      	ldrb	r2, [r7, #3]
    accc:	429a      	cmp	r2, r3
    acce:	d03d      	beq.n	ad4c <n25q256a_switch_mode+0xb8>
		return;
	}
	if (mode) {
    acd0:	78fb      	ldrb	r3, [r7, #3]
    acd2:	2b00      	cmp	r3, #0
    acd4:	d00b      	beq.n	acee <n25q256a_switch_mode+0x5a>
		if (evcfg & 0x80) {
    acd6:	697b      	ldr	r3, [r7, #20]
    acd8:	f003 0380 	and.w	r3, r3, #128	; 0x80
    acdc:	2b00      	cmp	r3, #0
    acde:	d011      	beq.n	ad04 <n25q256a_switch_mode+0x70>
			evcfg &= 0x1F;
    ace0:	697b      	ldr	r3, [r7, #20]
    ace2:	f003 031f 	and.w	r3, r3, #31
    ace6:	617b      	str	r3, [r7, #20]
			modify = 1;
    ace8:	2301      	movs	r3, #1
    acea:	74fb      	strb	r3, [r7, #19]
    acec:	e00a      	b.n	ad04 <n25q256a_switch_mode+0x70>
		}
	} else {
		if (!(evcfg & 0x80)) {
    acee:	697b      	ldr	r3, [r7, #20]
    acf0:	f003 0380 	and.w	r3, r3, #128	; 0x80
    acf4:	2b00      	cmp	r3, #0
    acf6:	d105      	bne.n	ad04 <n25q256a_switch_mode+0x70>
			evcfg |= 0xC0;
    acf8:	697b      	ldr	r3, [r7, #20]
    acfa:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
    acfe:	617b      	str	r3, [r7, #20]
			modify = 1;
    ad00:	2301      	movs	r3, #1
    ad02:	74fb      	strb	r3, [r7, #19]
		}
	}
	if (modify) {
    ad04:	7cfb      	ldrb	r3, [r7, #19]
    ad06:	2b00      	cmp	r3, #0
    ad08:	d021      	beq.n	ad4e <n25q256a_switch_mode+0xba>
		n25q->quad_mode = mode;
    ad0a:	68fb      	ldr	r3, [r7, #12]
    ad0c:	78fa      	ldrb	r2, [r7, #3]
    ad0e:	731a      	strb	r2, [r3, #12]
		n25q256a_write_enable(me, width, true);
    ad10:	7afb      	ldrb	r3, [r7, #11]
    ad12:	2201      	movs	r2, #1
    ad14:	4619      	mov	r1, r3
    ad16:	6878      	ldr	r0, [r7, #4]
    ad18:	4b0f      	ldr	r3, [pc, #60]	; (ad58 <n25q256a_switch_mode+0xc4>)
    ad1a:	4798      	blx	r3
		n25q256a_write_reg(me, width, N25Q_WRITE_ENHANCED_VOLATILE_CONFIG_REGISTER, evcfg);
    ad1c:	7af9      	ldrb	r1, [r7, #11]
    ad1e:	697b      	ldr	r3, [r7, #20]
    ad20:	2261      	movs	r2, #97	; 0x61
    ad22:	6878      	ldr	r0, [r7, #4]
    ad24:	4c0d      	ldr	r4, [pc, #52]	; (ad5c <n25q256a_switch_mode+0xc8>)
    ad26:	47a0      	blx	r4
		width           = mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    ad28:	78fb      	ldrb	r3, [r7, #3]
    ad2a:	2b00      	cmp	r3, #0
    ad2c:	d001      	beq.n	ad32 <n25q256a_switch_mode+0x9e>
    ad2e:	2306      	movs	r3, #6
    ad30:	e000      	b.n	ad34 <n25q256a_switch_mode+0xa0>
    ad32:	2300      	movs	r3, #0
    ad34:	72fb      	strb	r3, [r7, #11]
		evcfg           = n25q256a_read_reg(me, width, N25Q_READ_ENHANCED_VOLATILE_CONFIG_REGISTER);
    ad36:	7afb      	ldrb	r3, [r7, #11]
    ad38:	2265      	movs	r2, #101	; 0x65
    ad3a:	4619      	mov	r1, r3
    ad3c:	6878      	ldr	r0, [r7, #4]
    ad3e:	4b05      	ldr	r3, [pc, #20]	; (ad54 <n25q256a_switch_mode+0xc0>)
    ad40:	4798      	blx	r3
    ad42:	6178      	str	r0, [r7, #20]
		n25q->quad_mode = mode;
    ad44:	68fb      	ldr	r3, [r7, #12]
    ad46:	78fa      	ldrb	r2, [r7, #3]
    ad48:	731a      	strb	r2, [r3, #12]
    ad4a:	e000      	b.n	ad4e <n25q256a_switch_mode+0xba>
		return;
    ad4c:	bf00      	nop
	}
}
    ad4e:	371c      	adds	r7, #28
    ad50:	46bd      	mov	sp, r7
    ad52:	bd90      	pop	{r4, r7, pc}
    ad54:	0000aa89 	.word	0x0000aa89
    ad58:	0000abc5 	.word	0x0000abc5
    ad5c:	0000ab25 	.word	0x0000ab25

0000ad60 <n25q256a_construct>:
/**
 * \brief Construct n25q256a spi nor flash
 */
struct spi_nor_flash *n25q256a_construct(struct spi_nor_flash *const me, void *const io, func pin_exit_xip,
                                         const uint8_t quad_mode)
{
    ad60:	b580      	push	{r7, lr}
    ad62:	b086      	sub	sp, #24
    ad64:	af00      	add	r7, sp, #0
    ad66:	60f8      	str	r0, [r7, #12]
    ad68:	60b9      	str	r1, [r7, #8]
    ad6a:	607a      	str	r2, [r7, #4]
    ad6c:	70fb      	strb	r3, [r7, #3]
	struct n25q256a *n25q = (struct n25q256a *)me;
    ad6e:	68fb      	ldr	r3, [r7, #12]
    ad70:	617b      	str	r3, [r7, #20]
	spi_nor_flash_construct(me, io, &n25q256a_interface);
    ad72:	4a0c      	ldr	r2, [pc, #48]	; (ada4 <n25q256a_construct+0x44>)
    ad74:	68b9      	ldr	r1, [r7, #8]
    ad76:	68f8      	ldr	r0, [r7, #12]
    ad78:	4b0b      	ldr	r3, [pc, #44]	; (ada8 <n25q256a_construct+0x48>)
    ad7a:	4798      	blx	r3
	n25q->quad_mode    = 0;
    ad7c:	697b      	ldr	r3, [r7, #20]
    ad7e:	2200      	movs	r2, #0
    ad80:	731a      	strb	r2, [r3, #12]
	n25q->xip_mode     = false;
    ad82:	697b      	ldr	r3, [r7, #20]
    ad84:	2200      	movs	r2, #0
    ad86:	735a      	strb	r2, [r3, #13]
	n25q->pin_exit_xip = pin_exit_xip;
    ad88:	697b      	ldr	r3, [r7, #20]
    ad8a:	687a      	ldr	r2, [r7, #4]
    ad8c:	609a      	str	r2, [r3, #8]
	n25q256a_switch_mode(me, quad_mode);
    ad8e:	78fb      	ldrb	r3, [r7, #3]
    ad90:	4619      	mov	r1, r3
    ad92:	68f8      	ldr	r0, [r7, #12]
    ad94:	4b05      	ldr	r3, [pc, #20]	; (adac <n25q256a_construct+0x4c>)
    ad96:	4798      	blx	r3
	return me;
    ad98:	68fb      	ldr	r3, [r7, #12]
}
    ad9a:	4618      	mov	r0, r3
    ad9c:	3718      	adds	r7, #24
    ad9e:	46bd      	mov	sp, r7
    ada0:	bd80      	pop	{r7, pc}
    ada2:	bf00      	nop
    ada4:	000131f4 	.word	0x000131f4
    ada8:	0000b23d 	.word	0x0000b23d
    adac:	0000ac95 	.word	0x0000ac95

0000adb0 <n25q256a_read>:

int32_t n25q256a_read(const struct spi_nor_flash *const me, uint8_t *buf, uint32_t address, uint32_t length)
{
    adb0:	b580      	push	{r7, lr}
    adb2:	b08c      	sub	sp, #48	; 0x30
    adb4:	af00      	add	r7, sp, #0
    adb6:	60f8      	str	r0, [r7, #12]
    adb8:	60b9      	str	r1, [r7, #8]
    adba:	607a      	str	r2, [r7, #4]
    adbc:	603b      	str	r3, [r7, #0]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    adbe:	68fb      	ldr	r3, [r7, #12]
    adc0:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    adc2:	68fb      	ldr	r3, [r7, #12]
    adc4:	681b      	ldr	r3, [r3, #0]
    adc6:	62bb      	str	r3, [r7, #40]	; 0x28

	struct _qspi_command cmd = {
    adc8:	f107 0310 	add.w	r3, r7, #16
    adcc:	2200      	movs	r2, #0
    adce:	601a      	str	r2, [r3, #0]
    add0:	605a      	str	r2, [r3, #4]
    add2:	609a      	str	r2, [r3, #8]
    add4:	60da      	str	r2, [r3, #12]
    add6:	611a      	str	r2, [r3, #16]
    add8:	615a      	str	r2, [r3, #20]
	    .inst_frame.bits.width        = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1,
    adda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    addc:	7b1b      	ldrb	r3, [r3, #12]
    adde:	2b00      	cmp	r3, #0
    ade0:	d001      	beq.n	ade6 <n25q256a_read+0x36>
    ade2:	2206      	movs	r2, #6
    ade4:	e000      	b.n	ade8 <n25q256a_read+0x38>
    ade6:	2200      	movs	r2, #0
	struct _qspi_command cmd = {
    ade8:	7c3b      	ldrb	r3, [r7, #16]
    adea:	f362 0302 	bfi	r3, r2, #0, #3
    adee:	743b      	strb	r3, [r7, #16]
    adf0:	7c3b      	ldrb	r3, [r7, #16]
    adf2:	f043 0310 	orr.w	r3, r3, #16
    adf6:	743b      	strb	r3, [r7, #16]
    adf8:	7c3b      	ldrb	r3, [r7, #16]
    adfa:	f043 0320 	orr.w	r3, r3, #32
    adfe:	743b      	strb	r3, [r7, #16]
    ae00:	7c3b      	ldrb	r3, [r7, #16]
    ae02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    ae06:	743b      	strb	r3, [r7, #16]
    ae08:	7c7b      	ldrb	r3, [r7, #17]
    ae0a:	2201      	movs	r2, #1
    ae0c:	f362 1305 	bfi	r3, r2, #4, #2
    ae10:	747b      	strb	r3, [r7, #17]
	    .inst_frame.bits.inst_en      = 1,
	    .inst_frame.bits.data_en      = 1,
	    .inst_frame.bits.addr_en      = 1,
	    .inst_frame.bits.dummy_cycles = n25q->quad_mode ? 10 : 8,
    ae12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    ae14:	7b1b      	ldrb	r3, [r3, #12]
    ae16:	2b00      	cmp	r3, #0
    ae18:	d001      	beq.n	ae1e <n25q256a_read+0x6e>
    ae1a:	220a      	movs	r2, #10
    ae1c:	e000      	b.n	ae20 <n25q256a_read+0x70>
    ae1e:	2208      	movs	r2, #8
	struct _qspi_command cmd = {
    ae20:	7cbb      	ldrb	r3, [r7, #18]
    ae22:	f362 0304 	bfi	r3, r2, #0, #5
    ae26:	74bb      	strb	r3, [r7, #18]
    ae28:	230b      	movs	r3, #11
    ae2a:	753b      	strb	r3, [r7, #20]
    ae2c:	687b      	ldr	r3, [r7, #4]
    ae2e:	61bb      	str	r3, [r7, #24]
    ae30:	683b      	ldr	r3, [r7, #0]
    ae32:	61fb      	str	r3, [r7, #28]
    ae34:	68bb      	ldr	r3, [r7, #8]
    ae36:	627b      	str	r3, [r7, #36]	; 0x24
	//	.instruction                  = N25Q_READ_ARRAY_LF,
	    .address                      = address,
	    .buf_len                      = length,
	    .rx_buf                       = buf,
	};
	qspi_sync_serial_run_command(descr, &cmd);
    ae38:	f107 0310 	add.w	r3, r7, #16
    ae3c:	4619      	mov	r1, r3
    ae3e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    ae40:	4b03      	ldr	r3, [pc, #12]	; (ae50 <n25q256a_read+0xa0>)
    ae42:	4798      	blx	r3
	return ERR_NONE;
    ae44:	2300      	movs	r3, #0
}
    ae46:	4618      	mov	r0, r3
    ae48:	3730      	adds	r7, #48	; 0x30
    ae4a:	46bd      	mov	sp, r7
    ae4c:	bd80      	pop	{r7, pc}
    ae4e:	bf00      	nop
    ae50:	00001e25 	.word	0x00001e25

0000ae54 <n25q256a_write>:

int32_t n25q256a_write(const struct spi_nor_flash *const me, uint8_t *buf, uint32_t address, uint32_t length)
{
    ae54:	b580      	push	{r7, lr}
    ae56:	b08c      	sub	sp, #48	; 0x30
    ae58:	af00      	add	r7, sp, #0
    ae5a:	60f8      	str	r0, [r7, #12]
    ae5c:	60b9      	str	r1, [r7, #8]
    ae5e:	607a      	str	r2, [r7, #4]
    ae60:	603b      	str	r3, [r7, #0]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    ae62:	68fb      	ldr	r3, [r7, #12]
    ae64:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    ae66:	68fb      	ldr	r3, [r7, #12]
    ae68:	681b      	ldr	r3, [r3, #0]
    ae6a:	62bb      	str	r3, [r7, #40]	; 0x28
	struct _qspi_command         cmd   = {
    ae6c:	f107 0310 	add.w	r3, r7, #16
    ae70:	2200      	movs	r2, #0
    ae72:	601a      	str	r2, [r3, #0]
    ae74:	605a      	str	r2, [r3, #4]
    ae76:	609a      	str	r2, [r3, #8]
    ae78:	60da      	str	r2, [r3, #12]
    ae7a:	611a      	str	r2, [r3, #16]
    ae7c:	615a      	str	r2, [r3, #20]
    ae7e:	7c3b      	ldrb	r3, [r7, #16]
    ae80:	f043 0310 	orr.w	r3, r3, #16
    ae84:	743b      	strb	r3, [r7, #16]
    ae86:	7c3b      	ldrb	r3, [r7, #16]
    ae88:	f043 0320 	orr.w	r3, r3, #32
    ae8c:	743b      	strb	r3, [r7, #16]
    ae8e:	7c3b      	ldrb	r3, [r7, #16]
    ae90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    ae94:	743b      	strb	r3, [r7, #16]
    ae96:	7c7b      	ldrb	r3, [r7, #17]
    ae98:	f043 0330 	orr.w	r3, r3, #48	; 0x30
    ae9c:	747b      	strb	r3, [r7, #17]
    ae9e:	2302      	movs	r3, #2
    aea0:	753b      	strb	r3, [r7, #20]
    aea2:	687b      	ldr	r3, [r7, #4]
    aea4:	61bb      	str	r3, [r7, #24]
    aea6:	683b      	ldr	r3, [r7, #0]
    aea8:	61fb      	str	r3, [r7, #28]
    aeaa:	68bb      	ldr	r3, [r7, #8]
    aeac:	623b      	str	r3, [r7, #32]
        .address                  = address,
        .buf_len                  = length,
        .tx_buf                   = buf,
    };
	/* Command, address, data width are different for different modes */
	cmd.inst_frame.bits.width = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    aeae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    aeb0:	7b1b      	ldrb	r3, [r3, #12]
    aeb2:	2b00      	cmp	r3, #0
    aeb4:	d001      	beq.n	aeba <n25q256a_write+0x66>
    aeb6:	2206      	movs	r2, #6
    aeb8:	e000      	b.n	aebc <n25q256a_write+0x68>
    aeba:	2200      	movs	r2, #0
    aebc:	7c3b      	ldrb	r3, [r7, #16]
    aebe:	f362 0302 	bfi	r3, r2, #0, #3
    aec2:	743b      	strb	r3, [r7, #16]
	while (length) {
    aec4:	e035      	b.n	af32 <n25q256a_write+0xde>
		cmd.address = address;
    aec6:	687b      	ldr	r3, [r7, #4]
    aec8:	61bb      	str	r3, [r7, #24]
		if (length <= N25Q_PAGE_SIZE) {
    aeca:	683b      	ldr	r3, [r7, #0]
    aecc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    aed0:	d802      	bhi.n	aed8 <n25q256a_write+0x84>
			cmd.buf_len = length;
    aed2:	683b      	ldr	r3, [r7, #0]
    aed4:	61fb      	str	r3, [r7, #28]
    aed6:	e002      	b.n	aede <n25q256a_write+0x8a>
		} else {
			cmd.buf_len = N25Q_PAGE_SIZE;
    aed8:	f44f 7380 	mov.w	r3, #256	; 0x100
    aedc:	61fb      	str	r3, [r7, #28]
		}
		/* PROGRAM commands are initiated by first executing the
		 * WRITE ENABLE command to set the write enable latch bit to 1.
		 */
		n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
    aede:	7c3b      	ldrb	r3, [r7, #16]
    aee0:	f3c3 0302 	ubfx	r3, r3, #0, #3
    aee4:	b2db      	uxtb	r3, r3
    aee6:	2201      	movs	r2, #1
    aee8:	4619      	mov	r1, r3
    aeea:	68f8      	ldr	r0, [r7, #12]
    aeec:	4b19      	ldr	r3, [pc, #100]	; (af54 <n25q256a_write+0x100>)
    aeee:	4798      	blx	r3
		/* Send PROGRAM command */
		qspi_sync_serial_run_command(descr, &cmd);
    aef0:	f107 0310 	add.w	r3, r7, #16
    aef4:	4619      	mov	r1, r3
    aef6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    aef8:	4b17      	ldr	r3, [pc, #92]	; (af58 <n25q256a_write+0x104>)
    aefa:	4798      	blx	r3
		/* When the operation is in progress, the write in progress bit is set.
		 * The write enable latch bit is cleared.
		 * The flag status register is polled for the operation status.
		 */
		while (!(n25q256a_read_reg(me, cmd.inst_frame.bits.width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
    aefc:	bf00      	nop
    aefe:	7c3b      	ldrb	r3, [r7, #16]
    af00:	f3c3 0302 	ubfx	r3, r3, #0, #3
    af04:	b2db      	uxtb	r3, r3
    af06:	2270      	movs	r2, #112	; 0x70
    af08:	4619      	mov	r1, r3
    af0a:	68f8      	ldr	r0, [r7, #12]
    af0c:	4b13      	ldr	r3, [pc, #76]	; (af5c <n25q256a_write+0x108>)
    af0e:	4798      	blx	r3
    af10:	4603      	mov	r3, r0
    af12:	f003 0380 	and.w	r3, r3, #128	; 0x80
    af16:	2b00      	cmp	r3, #0
    af18:	d0f1      	beq.n	aefe <n25q256a_write+0xaa>
			;
		cmd.tx_buf += cmd.buf_len;
    af1a:	6a3a      	ldr	r2, [r7, #32]
    af1c:	69fb      	ldr	r3, [r7, #28]
    af1e:	4413      	add	r3, r2
    af20:	623b      	str	r3, [r7, #32]
		length -= cmd.buf_len;
    af22:	69fb      	ldr	r3, [r7, #28]
    af24:	683a      	ldr	r2, [r7, #0]
    af26:	1ad3      	subs	r3, r2, r3
    af28:	603b      	str	r3, [r7, #0]
		address += cmd.buf_len;
    af2a:	69fb      	ldr	r3, [r7, #28]
    af2c:	687a      	ldr	r2, [r7, #4]
    af2e:	4413      	add	r3, r2
    af30:	607b      	str	r3, [r7, #4]
	while (length) {
    af32:	683b      	ldr	r3, [r7, #0]
    af34:	2b00      	cmp	r3, #0
    af36:	d1c6      	bne.n	aec6 <n25q256a_write+0x72>
	}
	if (n25q->xip_mode) {
    af38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    af3a:	7b5b      	ldrb	r3, [r3, #13]
    af3c:	2b00      	cmp	r3, #0
    af3e:	d003      	beq.n	af48 <n25q256a_write+0xf4>
		n25q256a_xip_confirm(me, true);
    af40:	2101      	movs	r1, #1
    af42:	68f8      	ldr	r0, [r7, #12]
    af44:	4b06      	ldr	r3, [pc, #24]	; (af60 <n25q256a_write+0x10c>)
    af46:	4798      	blx	r3
	}
	return ERR_NONE;
    af48:	2300      	movs	r3, #0
}
    af4a:	4618      	mov	r0, r3
    af4c:	3730      	adds	r7, #48	; 0x30
    af4e:	46bd      	mov	sp, r7
    af50:	bd80      	pop	{r7, pc}
    af52:	bf00      	nop
    af54:	0000abc5 	.word	0x0000abc5
    af58:	00001e25 	.word	0x00001e25
    af5c:	0000aa89 	.word	0x0000aa89
    af60:	0000a9bd 	.word	0x0000a9bd

0000af64 <n25q256a_erase>:

int32_t n25q256a_erase(const struct spi_nor_flash *const me, uint32_t address, uint32_t length)
{
    af64:	b580      	push	{r7, lr}
    af66:	b090      	sub	sp, #64	; 0x40
    af68:	af00      	add	r7, sp, #0
    af6a:	60f8      	str	r0, [r7, #12]
    af6c:	60b9      	str	r1, [r7, #8]
    af6e:	607a      	str	r2, [r7, #4]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    af70:	68fb      	ldr	r3, [r7, #12]
    af72:	633b      	str	r3, [r7, #48]	; 0x30
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    af74:	68fb      	ldr	r3, [r7, #12]
    af76:	681b      	ldr	r3, [r3, #0]
    af78:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct _qspi_command         cmd   = {
    af7a:	f107 0314 	add.w	r3, r7, #20
    af7e:	2200      	movs	r2, #0
    af80:	601a      	str	r2, [r3, #0]
    af82:	605a      	str	r2, [r3, #4]
    af84:	609a      	str	r2, [r3, #8]
    af86:	60da      	str	r2, [r3, #12]
    af88:	611a      	str	r2, [r3, #16]
    af8a:	615a      	str	r2, [r3, #20]
        .inst_frame.bits.width    = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1,
    af8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    af8e:	7b1b      	ldrb	r3, [r3, #12]
    af90:	2b00      	cmp	r3, #0
    af92:	d001      	beq.n	af98 <n25q256a_erase+0x34>
    af94:	2206      	movs	r2, #6
    af96:	e000      	b.n	af9a <n25q256a_erase+0x36>
    af98:	2200      	movs	r2, #0
	struct _qspi_command         cmd   = {
    af9a:	7d3b      	ldrb	r3, [r7, #20]
    af9c:	f362 0302 	bfi	r3, r2, #0, #3
    afa0:	753b      	strb	r3, [r7, #20]
    afa2:	7d3b      	ldrb	r3, [r7, #20]
    afa4:	f043 0310 	orr.w	r3, r3, #16
    afa8:	753b      	strb	r3, [r7, #20]
        .inst_frame.bits.inst_en  = 1,
        .inst_frame.bits.addr_en  = (length < N25Q_FLASH_SIZE) ? 1 : 0,
    afaa:	687b      	ldr	r3, [r7, #4]
    afac:	4a56      	ldr	r2, [pc, #344]	; (b108 <n25q256a_erase+0x1a4>)
    afae:	4293      	cmp	r3, r2
    afb0:	bf94      	ite	ls
    afb2:	2301      	movls	r3, #1
    afb4:	2300      	movhi	r3, #0
    afb6:	b2da      	uxtb	r2, r3
	struct _qspi_command         cmd   = {
    afb8:	7d3b      	ldrb	r3, [r7, #20]
    afba:	f362 1345 	bfi	r3, r2, #5, #1
    afbe:	753b      	strb	r3, [r7, #20]
    afc0:	7d7b      	ldrb	r3, [r7, #21]
    afc2:	2202      	movs	r2, #2
    afc4:	f362 1305 	bfi	r3, r2, #4, #2
    afc8:	757b      	strb	r3, [r7, #21]
        .inst_frame.bits.tfr_type = QSPI_WRITE_ACCESS,
    };
	uint32_t temp_addr = address;
    afca:	68bb      	ldr	r3, [r7, #8]
    afcc:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t temp_len  = length;
    afce:	687b      	ldr	r3, [r7, #4]
    afd0:	63bb      	str	r3, [r7, #56]	; 0x38
	int32_t  rc        = ERR_NONE;
    afd2:	2300      	movs	r3, #0
    afd4:	637b      	str	r3, [r7, #52]	; 0x34

	if ((length % N25Q_SECTOR_SIZE) || (address % N25Q_SECTOR_SIZE)) {
    afd6:	687b      	ldr	r3, [r7, #4]
    afd8:	f3c3 030b 	ubfx	r3, r3, #0, #12
    afdc:	2b00      	cmp	r3, #0
    afde:	d104      	bne.n	afea <n25q256a_erase+0x86>
    afe0:	68bb      	ldr	r3, [r7, #8]
    afe2:	f3c3 030b 	ubfx	r3, r3, #0, #12
    afe6:	2b00      	cmp	r3, #0
    afe8:	d002      	beq.n	aff0 <n25q256a_erase+0x8c>
		return ERR_INVALID_ARG;
    afea:	f06f 030c 	mvn.w	r3, #12
    afee:	e087      	b.n	b100 <n25q256a_erase+0x19c>
	}

	if (length >= N25Q_FLASH_SIZE) {
    aff0:	687b      	ldr	r3, [r7, #4]
    aff2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
    aff6:	d368      	bcc.n	b0ca <n25q256a_erase+0x166>
		cmd.instruction = N25Q_BULK_ERASE;
    aff8:	23c7      	movs	r3, #199	; 0xc7
    affa:	763b      	strb	r3, [r7, #24]
		/* WRITE ENABLE command must be issued to
		 * set the write enable latch bit to 1 */
		n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
    affc:	7d3b      	ldrb	r3, [r7, #20]
    affe:	f3c3 0302 	ubfx	r3, r3, #0, #3
    b002:	b2db      	uxtb	r3, r3
    b004:	2201      	movs	r2, #1
    b006:	4619      	mov	r1, r3
    b008:	68f8      	ldr	r0, [r7, #12]
    b00a:	4b40      	ldr	r3, [pc, #256]	; (b10c <n25q256a_erase+0x1a8>)
    b00c:	4798      	blx	r3
		/* Send specific erase command */
		qspi_sync_serial_run_command(descr, &cmd);
    b00e:	f107 0314 	add.w	r3, r7, #20
    b012:	4619      	mov	r1, r3
    b014:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    b016:	4b3e      	ldr	r3, [pc, #248]	; (b110 <n25q256a_erase+0x1ac>)
    b018:	4798      	blx	r3
    b01a:	e059      	b.n	b0d0 <n25q256a_erase+0x16c>
	} else {
		while (temp_len > 0) {
			if (((temp_addr % N25Q_BLOCK_SIZE) == 0) && (temp_len >= N25Q_BLOCK_SIZE)) {
    b01c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    b01e:	b29b      	uxth	r3, r3
    b020:	2b00      	cmp	r3, #0
    b022:	d11f      	bne.n	b064 <n25q256a_erase+0x100>
    b024:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    b026:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    b02a:	d31b      	bcc.n	b064 <n25q256a_erase+0x100>
				cmd.address     = temp_addr;
    b02c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    b02e:	61fb      	str	r3, [r7, #28]
				cmd.instruction = N25Q_BLOCK_ERASE_64K;
    b030:	23d8      	movs	r3, #216	; 0xd8
    b032:	763b      	strb	r3, [r7, #24]
				/* WRITE ENABLE command must be issued to
				 * set the write enable latch bit to 1 */
				n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
    b034:	7d3b      	ldrb	r3, [r7, #20]
    b036:	f3c3 0302 	ubfx	r3, r3, #0, #3
    b03a:	b2db      	uxtb	r3, r3
    b03c:	2201      	movs	r2, #1
    b03e:	4619      	mov	r1, r3
    b040:	68f8      	ldr	r0, [r7, #12]
    b042:	4b32      	ldr	r3, [pc, #200]	; (b10c <n25q256a_erase+0x1a8>)
    b044:	4798      	blx	r3
				/* Send specific erase command */
				qspi_sync_serial_run_command(descr, &cmd);
    b046:	f107 0314 	add.w	r3, r7, #20
    b04a:	4619      	mov	r1, r3
    b04c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    b04e:	4b30      	ldr	r3, [pc, #192]	; (b110 <n25q256a_erase+0x1ac>)
    b050:	4798      	blx	r3
				temp_addr += N25Q_BLOCK_SIZE;
    b052:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    b054:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
    b058:	63fb      	str	r3, [r7, #60]	; 0x3c
				temp_len -= N25Q_BLOCK_SIZE;
    b05a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    b05c:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
    b060:	63bb      	str	r3, [r7, #56]	; 0x38
    b062:	e023      	b.n	b0ac <n25q256a_erase+0x148>
			} else if (temp_len >= N25Q_SECTOR_SIZE) {
    b064:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    b066:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    b06a:	d31b      	bcc.n	b0a4 <n25q256a_erase+0x140>
				cmd.address     = temp_addr;
    b06c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    b06e:	61fb      	str	r3, [r7, #28]
				cmd.instruction = N25Q_BLOCK_ERASE_4K;
    b070:	2320      	movs	r3, #32
    b072:	763b      	strb	r3, [r7, #24]
				/* WRITE ENABLE command must be issued to
				 * set the write enable latch bit to 1 */
				n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
    b074:	7d3b      	ldrb	r3, [r7, #20]
    b076:	f3c3 0302 	ubfx	r3, r3, #0, #3
    b07a:	b2db      	uxtb	r3, r3
    b07c:	2201      	movs	r2, #1
    b07e:	4619      	mov	r1, r3
    b080:	68f8      	ldr	r0, [r7, #12]
    b082:	4b22      	ldr	r3, [pc, #136]	; (b10c <n25q256a_erase+0x1a8>)
    b084:	4798      	blx	r3
				/* Send specific erase command */
				qspi_sync_serial_run_command(descr, &cmd);
    b086:	f107 0314 	add.w	r3, r7, #20
    b08a:	4619      	mov	r1, r3
    b08c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    b08e:	4b20      	ldr	r3, [pc, #128]	; (b110 <n25q256a_erase+0x1ac>)
    b090:	4798      	blx	r3
				temp_addr += N25Q_SECTOR_SIZE;
    b092:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    b094:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
    b098:	63fb      	str	r3, [r7, #60]	; 0x3c
				temp_len -= N25Q_SECTOR_SIZE;
    b09a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    b09c:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
    b0a0:	63bb      	str	r3, [r7, #56]	; 0x38
    b0a2:	e003      	b.n	b0ac <n25q256a_erase+0x148>
			} else {
				rc = ERR_INVALID_ARG;
    b0a4:	f06f 030c 	mvn.w	r3, #12
    b0a8:	637b      	str	r3, [r7, #52]	; 0x34
				break;
    b0aa:	e011      	b.n	b0d0 <n25q256a_erase+0x16c>
			/* When the operation is in progress,
			 * the write in progress bit is set.
			 * The write enable latch bit is cleared.
			 * The flag status register is polled for the operation status.
			 */
			while (!(n25q256a_read_reg(me, cmd.inst_frame.bits.width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
    b0ac:	bf00      	nop
    b0ae:	7d3b      	ldrb	r3, [r7, #20]
    b0b0:	f3c3 0302 	ubfx	r3, r3, #0, #3
    b0b4:	b2db      	uxtb	r3, r3
    b0b6:	2270      	movs	r2, #112	; 0x70
    b0b8:	4619      	mov	r1, r3
    b0ba:	68f8      	ldr	r0, [r7, #12]
    b0bc:	4b15      	ldr	r3, [pc, #84]	; (b114 <n25q256a_erase+0x1b0>)
    b0be:	4798      	blx	r3
    b0c0:	4603      	mov	r3, r0
    b0c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
    b0c6:	2b00      	cmp	r3, #0
    b0c8:	d0f1      	beq.n	b0ae <n25q256a_erase+0x14a>
		while (temp_len > 0) {
    b0ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    b0cc:	2b00      	cmp	r3, #0
    b0ce:	d1a5      	bne.n	b01c <n25q256a_erase+0xb8>
				;
		}
	}
	/* The flag status register is polled for the final operation status. */
	while (!(n25q256a_read_reg(me, cmd.inst_frame.bits.width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
    b0d0:	bf00      	nop
    b0d2:	7d3b      	ldrb	r3, [r7, #20]
    b0d4:	f3c3 0302 	ubfx	r3, r3, #0, #3
    b0d8:	b2db      	uxtb	r3, r3
    b0da:	2270      	movs	r2, #112	; 0x70
    b0dc:	4619      	mov	r1, r3
    b0de:	68f8      	ldr	r0, [r7, #12]
    b0e0:	4b0c      	ldr	r3, [pc, #48]	; (b114 <n25q256a_erase+0x1b0>)
    b0e2:	4798      	blx	r3
    b0e4:	4603      	mov	r3, r0
    b0e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
    b0ea:	2b00      	cmp	r3, #0
    b0ec:	d0f1      	beq.n	b0d2 <n25q256a_erase+0x16e>
		;
	if (n25q->xip_mode) {
    b0ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    b0f0:	7b5b      	ldrb	r3, [r3, #13]
    b0f2:	2b00      	cmp	r3, #0
    b0f4:	d003      	beq.n	b0fe <n25q256a_erase+0x19a>
		n25q256a_xip_confirm(me, true);
    b0f6:	2101      	movs	r1, #1
    b0f8:	68f8      	ldr	r0, [r7, #12]
    b0fa:	4b07      	ldr	r3, [pc, #28]	; (b118 <n25q256a_erase+0x1b4>)
    b0fc:	4798      	blx	r3
	}
	return rc;
    b0fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
    b100:	4618      	mov	r0, r3
    b102:	3740      	adds	r7, #64	; 0x40
    b104:	46bd      	mov	sp, r7
    b106:	bd80      	pop	{r7, pc}
    b108:	001fffff 	.word	0x001fffff
    b10c:	0000abc5 	.word	0x0000abc5
    b110:	00001e25 	.word	0x00001e25
    b114:	0000aa89 	.word	0x0000aa89
    b118:	0000a9bd 	.word	0x0000a9bd

0000b11c <n25q256a_enable_xip>:

int32_t n25q256a_enable_xip(const struct spi_nor_flash *const me)
{
    b11c:	b590      	push	{r4, r7, lr}
    b11e:	b085      	sub	sp, #20
    b120:	af00      	add	r7, sp, #0
    b122:	6078      	str	r0, [r7, #4]
	struct n25q256a *n25q  = (struct n25q256a *)me;
    b124:	687b      	ldr	r3, [r7, #4]
    b126:	60fb      	str	r3, [r7, #12]
	uint8_t          width = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    b128:	68fb      	ldr	r3, [r7, #12]
    b12a:	7b1b      	ldrb	r3, [r3, #12]
    b12c:	2b00      	cmp	r3, #0
    b12e:	d001      	beq.n	b134 <n25q256a_enable_xip+0x18>
    b130:	2306      	movs	r3, #6
    b132:	e000      	b.n	b136 <n25q256a_enable_xip+0x1a>
    b134:	2300      	movs	r3, #0
    b136:	72fb      	strb	r3, [r7, #11]
	if (!n25q->xip_mode) {
    b138:	68fb      	ldr	r3, [r7, #12]
    b13a:	7b5b      	ldrb	r3, [r3, #13]
    b13c:	2b00      	cmp	r3, #0
    b13e:	d129      	bne.n	b194 <n25q256a_enable_xip+0x78>
		uint8_t vcfg = n25q256a_read_reg(me, width, N25Q_READ_VOLATILE_CONFIG_REGISTER);
    b140:	7afb      	ldrb	r3, [r7, #11]
    b142:	2285      	movs	r2, #133	; 0x85
    b144:	4619      	mov	r1, r3
    b146:	6878      	ldr	r0, [r7, #4]
    b148:	4b15      	ldr	r3, [pc, #84]	; (b1a0 <n25q256a_enable_xip+0x84>)
    b14a:	4798      	blx	r3
    b14c:	4603      	mov	r3, r0
    b14e:	72bb      	strb	r3, [r7, #10]
		if (vcfg & (1u << 3)) {
    b150:	7abb      	ldrb	r3, [r7, #10]
    b152:	f003 0308 	and.w	r3, r3, #8
    b156:	2b00      	cmp	r3, #0
    b158:	d015      	beq.n	b186 <n25q256a_enable_xip+0x6a>
			vcfg &= ~(1u << 3);
    b15a:	7abb      	ldrb	r3, [r7, #10]
    b15c:	f023 0308 	bic.w	r3, r3, #8
    b160:	72bb      	strb	r3, [r7, #10]
			n25q256a_write_reg(me, width, N25Q_WRITE_VOLATILE_CONFIG_REGISTER, vcfg);
    b162:	7abb      	ldrb	r3, [r7, #10]
    b164:	7af9      	ldrb	r1, [r7, #11]
    b166:	2281      	movs	r2, #129	; 0x81
    b168:	6878      	ldr	r0, [r7, #4]
    b16a:	4c0e      	ldr	r4, [pc, #56]	; (b1a4 <n25q256a_enable_xip+0x88>)
    b16c:	47a0      	blx	r4
			while (!(n25q256a_read_reg(me, width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
    b16e:	bf00      	nop
    b170:	7afb      	ldrb	r3, [r7, #11]
    b172:	2270      	movs	r2, #112	; 0x70
    b174:	4619      	mov	r1, r3
    b176:	6878      	ldr	r0, [r7, #4]
    b178:	4b09      	ldr	r3, [pc, #36]	; (b1a0 <n25q256a_enable_xip+0x84>)
    b17a:	4798      	blx	r3
    b17c:	4603      	mov	r3, r0
    b17e:	f003 0380 	and.w	r3, r3, #128	; 0x80
    b182:	2b00      	cmp	r3, #0
    b184:	d0f4      	beq.n	b170 <n25q256a_enable_xip+0x54>
				;
		}
		n25q->xip_mode = 1;
    b186:	68fb      	ldr	r3, [r7, #12]
    b188:	2201      	movs	r2, #1
    b18a:	735a      	strb	r2, [r3, #13]
		n25q256a_xip_confirm(me, true);
    b18c:	2101      	movs	r1, #1
    b18e:	6878      	ldr	r0, [r7, #4]
    b190:	4b05      	ldr	r3, [pc, #20]	; (b1a8 <n25q256a_enable_xip+0x8c>)
    b192:	4798      	blx	r3
	}
	return ERR_NONE;
    b194:	2300      	movs	r3, #0
}
    b196:	4618      	mov	r0, r3
    b198:	3714      	adds	r7, #20
    b19a:	46bd      	mov	sp, r7
    b19c:	bd90      	pop	{r4, r7, pc}
    b19e:	bf00      	nop
    b1a0:	0000aa89 	.word	0x0000aa89
    b1a4:	0000ab25 	.word	0x0000ab25
    b1a8:	0000a9bd 	.word	0x0000a9bd

0000b1ac <n25q256a_disable_xip>:

int32_t n25q256a_disable_xip(const struct spi_nor_flash *const me)
{
    b1ac:	b580      	push	{r7, lr}
    b1ae:	b086      	sub	sp, #24
    b1b0:	af00      	add	r7, sp, #0
    b1b2:	6078      	str	r0, [r7, #4]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    b1b4:	687b      	ldr	r3, [r7, #4]
    b1b6:	617b      	str	r3, [r7, #20]
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    b1b8:	687b      	ldr	r3, [r7, #4]
    b1ba:	681b      	ldr	r3, [r3, #0]
    b1bc:	613b      	str	r3, [r7, #16]
	uint8_t                      width = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    b1be:	697b      	ldr	r3, [r7, #20]
    b1c0:	7b1b      	ldrb	r3, [r3, #12]
    b1c2:	2b00      	cmp	r3, #0
    b1c4:	d001      	beq.n	b1ca <n25q256a_disable_xip+0x1e>
    b1c6:	2306      	movs	r3, #6
    b1c8:	e000      	b.n	b1cc <n25q256a_disable_xip+0x20>
    b1ca:	2300      	movs	r3, #0
    b1cc:	73fb      	strb	r3, [r7, #15]
	uint8_t                      vcfg;
	/* XIP is terminated by driving the XIP confirmation bit to 1.
	 * The device automatically resets volatile configuration register bit 3 to 1.
	 */
	n25q256a_xip_confirm(me, false);
    b1ce:	2100      	movs	r1, #0
    b1d0:	6878      	ldr	r0, [r7, #4]
    b1d2:	4b15      	ldr	r3, [pc, #84]	; (b228 <n25q256a_disable_xip+0x7c>)
    b1d4:	4798      	blx	r3
	vcfg = n25q256a_read_reg(me, width, N25Q_READ_VOLATILE_CONFIG_REGISTER);
    b1d6:	7bfb      	ldrb	r3, [r7, #15]
    b1d8:	2285      	movs	r2, #133	; 0x85
    b1da:	4619      	mov	r1, r3
    b1dc:	6878      	ldr	r0, [r7, #4]
    b1de:	4b13      	ldr	r3, [pc, #76]	; (b22c <n25q256a_disable_xip+0x80>)
    b1e0:	4798      	blx	r3
    b1e2:	4603      	mov	r3, r0
    b1e4:	73bb      	strb	r3, [r7, #14]
	if (!(vcfg & (1u << 3))) {
    b1e6:	7bbb      	ldrb	r3, [r7, #14]
    b1e8:	f003 0308 	and.w	r3, r3, #8
    b1ec:	2b00      	cmp	r3, #0
    b1ee:	d113      	bne.n	b218 <n25q256a_disable_xip+0x6c>
		if (n25q->pin_exit_xip) {
    b1f0:	697b      	ldr	r3, [r7, #20]
    b1f2:	689b      	ldr	r3, [r3, #8]
    b1f4:	2b00      	cmp	r3, #0
    b1f6:	d00f      	beq.n	b218 <n25q256a_disable_xip+0x6c>
			/* Quad    : drive DQ0 = 1 with S# held LOW for  7 clock cycles
			 * Dual    : drive DQ0 = 1 with S# held LOW for 13 clock cycles
			 * Extended: drive DQ0 = 1 with S# held LOW for 25 clock cycles
			 */
			void *hw = descr->dev.prvt;
    b1f8:	693b      	ldr	r3, [r7, #16]
    b1fa:	681b      	ldr	r3, [r3, #0]
    b1fc:	60bb      	str	r3, [r7, #8]
			qspi_sync_disable(descr);
    b1fe:	6938      	ldr	r0, [r7, #16]
    b200:	4b0b      	ldr	r3, [pc, #44]	; (b230 <n25q256a_disable_xip+0x84>)
    b202:	4798      	blx	r3
			n25q->pin_exit_xip();
    b204:	697b      	ldr	r3, [r7, #20]
    b206:	689b      	ldr	r3, [r3, #8]
    b208:	4798      	blx	r3

			qspi_sync_init(descr, hw);
    b20a:	68b9      	ldr	r1, [r7, #8]
    b20c:	6938      	ldr	r0, [r7, #16]
    b20e:	4b09      	ldr	r3, [pc, #36]	; (b234 <n25q256a_disable_xip+0x88>)
    b210:	4798      	blx	r3
			qspi_sync_enable(descr);
    b212:	6938      	ldr	r0, [r7, #16]
    b214:	4b08      	ldr	r3, [pc, #32]	; (b238 <n25q256a_disable_xip+0x8c>)
    b216:	4798      	blx	r3
		}
	}
	n25q->xip_mode = 0;
    b218:	697b      	ldr	r3, [r7, #20]
    b21a:	2200      	movs	r2, #0
    b21c:	735a      	strb	r2, [r3, #13]
	return ERR_NONE;
    b21e:	2300      	movs	r3, #0
}
    b220:	4618      	mov	r0, r3
    b222:	3718      	adds	r7, #24
    b224:	46bd      	mov	sp, r7
    b226:	bd80      	pop	{r7, pc}
    b228:	0000a9bd 	.word	0x0000a9bd
    b22c:	0000aa89 	.word	0x0000aa89
    b230:	00001de9 	.word	0x00001de9
    b234:	00001d61 	.word	0x00001d61
    b238:	00001dad 	.word	0x00001dad

0000b23c <spi_nor_flash_construct>:

#include <spi_nor_flash.h>

struct spi_nor_flash *spi_nor_flash_construct(struct spi_nor_flash *const me, void *const io,
                                              const struct spi_nor_flash_interface *const interface)
{
    b23c:	b480      	push	{r7}
    b23e:	b085      	sub	sp, #20
    b240:	af00      	add	r7, sp, #0
    b242:	60f8      	str	r0, [r7, #12]
    b244:	60b9      	str	r1, [r7, #8]
    b246:	607a      	str	r2, [r7, #4]
	me->io        = io;
    b248:	68fb      	ldr	r3, [r7, #12]
    b24a:	68ba      	ldr	r2, [r7, #8]
    b24c:	601a      	str	r2, [r3, #0]
	me->interface = interface;
    b24e:	68fb      	ldr	r3, [r7, #12]
    b250:	687a      	ldr	r2, [r7, #4]
    b252:	605a      	str	r2, [r3, #4]

	return me;
    b254:	68fb      	ldr	r3, [r7, #12]
}
    b256:	4618      	mov	r0, r3
    b258:	3714      	adds	r7, #20
    b25a:	46bd      	mov	sp, r7
    b25c:	f85d 7b04 	ldr.w	r7, [sp], #4
    b260:	4770      	bx	lr

0000b262 <usb_get_u16>:
/** \brief Get a word (calculate by little endian 16-bit data)
 *  \param[in] ptr Byte pointer to the address to get data
 *  \return a 16-bit word
 */
static inline uint16_t usb_get_u16(const uint8_t *ptr)
{
    b262:	b480      	push	{r7}
    b264:	b083      	sub	sp, #12
    b266:	af00      	add	r7, sp, #0
    b268:	6078      	str	r0, [r7, #4]
	return (ptr[0] + (ptr[1] << 8));
    b26a:	687b      	ldr	r3, [r7, #4]
    b26c:	781b      	ldrb	r3, [r3, #0]
    b26e:	b29a      	uxth	r2, r3
    b270:	687b      	ldr	r3, [r7, #4]
    b272:	3301      	adds	r3, #1
    b274:	781b      	ldrb	r3, [r3, #0]
    b276:	b29b      	uxth	r3, r3
    b278:	021b      	lsls	r3, r3, #8
    b27a:	b29b      	uxth	r3, r3
    b27c:	4413      	add	r3, r2
    b27e:	b29b      	uxth	r3, r3
}
    b280:	4618      	mov	r0, r3
    b282:	370c      	adds	r7, #12
    b284:	46bd      	mov	sp, r7
    b286:	f85d 7b04 	ldr.w	r7, [sp], #4
    b28a:	4770      	bx	lr

0000b28c <usb_desc_len>:
/** \brief Get descriptor length
 *  \param[in] desc Byte pointer to the descriptor start address
 *  \return descriptor length
 */
static inline uint8_t usb_desc_len(const uint8_t *desc)
{
    b28c:	b480      	push	{r7}
    b28e:	b083      	sub	sp, #12
    b290:	af00      	add	r7, sp, #0
    b292:	6078      	str	r0, [r7, #4]
	return desc[0];
    b294:	687b      	ldr	r3, [r7, #4]
    b296:	781b      	ldrb	r3, [r3, #0]
}
    b298:	4618      	mov	r0, r3
    b29a:	370c      	adds	r7, #12
    b29c:	46bd      	mov	sp, r7
    b29e:	f85d 7b04 	ldr.w	r7, [sp], #4
    b2a2:	4770      	bx	lr

0000b2a4 <usb_desc_next>:
/** \brief Get next USB descriptor
 *  \param[in] desc Byte pointer to the descriptor start address
 *  \return Byte pointer to the next descriptor
 */
static inline uint8_t *usb_desc_next(uint8_t *desc)
{
    b2a4:	b580      	push	{r7, lr}
    b2a6:	b082      	sub	sp, #8
    b2a8:	af00      	add	r7, sp, #0
    b2aa:	6078      	str	r0, [r7, #4]
	return (desc + usb_desc_len(desc));
    b2ac:	6878      	ldr	r0, [r7, #4]
    b2ae:	4b05      	ldr	r3, [pc, #20]	; (b2c4 <usb_desc_next+0x20>)
    b2b0:	4798      	blx	r3
    b2b2:	4603      	mov	r3, r0
    b2b4:	461a      	mov	r2, r3
    b2b6:	687b      	ldr	r3, [r7, #4]
    b2b8:	4413      	add	r3, r2
}
    b2ba:	4618      	mov	r0, r3
    b2bc:	3708      	adds	r7, #8
    b2be:	46bd      	mov	sp, r7
    b2c0:	bd80      	pop	{r7, pc}
    b2c2:	bf00      	nop
    b2c4:	0000b28d 	.word	0x0000b28d

0000b2c8 <cdcdf_acm_enable>:
 * \param[in] drv Pointer to USB device function driver
 * \param[in] desc Pointer to USB interface descriptor
 * \return Operation status.
 */
static int32_t cdcdf_acm_enable(struct usbdf_driver *drv, struct usbd_descriptors *desc)
{
    b2c8:	b580      	push	{r7, lr}
    b2ca:	b08c      	sub	sp, #48	; 0x30
    b2cc:	af00      	add	r7, sp, #0
    b2ce:	6078      	str	r0, [r7, #4]
    b2d0:	6039      	str	r1, [r7, #0]
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
    b2d2:	687b      	ldr	r3, [r7, #4]
    b2d4:	689b      	ldr	r3, [r3, #8]
    b2d6:	623b      	str	r3, [r7, #32]
	usb_ep_desc_t    ep_desc;
	usb_iface_desc_t ifc_desc;
	uint8_t *        ifc, *ep;
	uint8_t          i;

	ifc = desc->sod;
    b2d8:	683b      	ldr	r3, [r7, #0]
    b2da:	681b      	ldr	r3, [r3, #0]
    b2dc:	62fb      	str	r3, [r7, #44]	; 0x2c
	for (i = 0; i < 2; i++) {
    b2de:	2300      	movs	r3, #0
    b2e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    b2e4:	e08f      	b.n	b406 <cdcdf_acm_enable+0x13e>
		if (NULL == ifc) {
    b2e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b2e8:	2b00      	cmp	r3, #0
    b2ea:	d102      	bne.n	b2f2 <cdcdf_acm_enable+0x2a>
			return ERR_NOT_FOUND;
    b2ec:	f06f 0309 	mvn.w	r3, #9
    b2f0:	e092      	b.n	b418 <cdcdf_acm_enable+0x150>
		}

		ifc_desc.bInterfaceNumber = ifc[2];
    b2f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b2f4:	789b      	ldrb	r3, [r3, #2]
    b2f6:	73bb      	strb	r3, [r7, #14]
		ifc_desc.bInterfaceClass  = ifc[5];
    b2f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b2fa:	795b      	ldrb	r3, [r3, #5]
    b2fc:	747b      	strb	r3, [r7, #17]

		if ((CDC_CLASS_COMM == ifc_desc.bInterfaceClass) || (CDC_CLASS_DATA == ifc_desc.bInterfaceClass)) {
    b2fe:	7c7b      	ldrb	r3, [r7, #17]
    b300:	2b02      	cmp	r3, #2
    b302:	d002      	beq.n	b30a <cdcdf_acm_enable+0x42>
    b304:	7c7b      	ldrb	r3, [r7, #17]
    b306:	2b0a      	cmp	r3, #10
    b308:	d121      	bne.n	b34e <cdcdf_acm_enable+0x86>
			if (func_data->func_iface[i] == ifc_desc.bInterfaceNumber) { // Initialized
    b30a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    b30e:	6a3a      	ldr	r2, [r7, #32]
    b310:	5cd2      	ldrb	r2, [r2, r3]
    b312:	7bbb      	ldrb	r3, [r7, #14]
    b314:	429a      	cmp	r2, r3
    b316:	d102      	bne.n	b31e <cdcdf_acm_enable+0x56>
				return ERR_ALREADY_INITIALIZED;
    b318:	f06f 0311 	mvn.w	r3, #17
    b31c:	e07c      	b.n	b418 <cdcdf_acm_enable+0x150>
			} else if (func_data->func_iface[i] != 0xFF) { // Occupied
    b31e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    b322:	6a3a      	ldr	r2, [r7, #32]
    b324:	5cd3      	ldrb	r3, [r2, r3]
    b326:	2bff      	cmp	r3, #255	; 0xff
    b328:	d002      	beq.n	b330 <cdcdf_acm_enable+0x68>
				return ERR_NO_RESOURCE;
    b32a:	f06f 031b 	mvn.w	r3, #27
    b32e:	e073      	b.n	b418 <cdcdf_acm_enable+0x150>
			} else {
				func_data->func_iface[i] = ifc_desc.bInterfaceNumber;
    b330:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    b334:	7bb9      	ldrb	r1, [r7, #14]
    b336:	6a3a      	ldr	r2, [r7, #32]
    b338:	54d1      	strb	r1, [r2, r3]
			if (func_data->func_iface[i] == ifc_desc.bInterfaceNumber) { // Initialized
    b33a:	bf00      	nop
		} else { // Not supported by this function driver
			return ERR_NOT_FOUND;
		}

		// Install endpoints
		ep = usb_find_desc(ifc, desc->eod, USB_DT_ENDPOINT);
    b33c:	683b      	ldr	r3, [r7, #0]
    b33e:	685b      	ldr	r3, [r3, #4]
    b340:	2205      	movs	r2, #5
    b342:	4619      	mov	r1, r3
    b344:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    b346:	4b36      	ldr	r3, [pc, #216]	; (b420 <cdcdf_acm_enable+0x158>)
    b348:	4798      	blx	r3
    b34a:	62b8      	str	r0, [r7, #40]	; 0x28
		while (NULL != ep) {
    b34c:	e047      	b.n	b3de <cdcdf_acm_enable+0x116>
			return ERR_NOT_FOUND;
    b34e:	f06f 0309 	mvn.w	r3, #9
    b352:	e061      	b.n	b418 <cdcdf_acm_enable+0x150>
			ep_desc.bEndpointAddress = ep[2];
    b354:	6abb      	ldr	r3, [r7, #40]	; 0x28
    b356:	789b      	ldrb	r3, [r3, #2]
    b358:	76bb      	strb	r3, [r7, #26]
			ep_desc.bmAttributes     = ep[3];
    b35a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    b35c:	78db      	ldrb	r3, [r3, #3]
    b35e:	76fb      	strb	r3, [r7, #27]
			ep_desc.wMaxPacketSize   = usb_get_u16(ep + 4);
    b360:	6abb      	ldr	r3, [r7, #40]	; 0x28
    b362:	3304      	adds	r3, #4
    b364:	4618      	mov	r0, r3
    b366:	4b2f      	ldr	r3, [pc, #188]	; (b424 <cdcdf_acm_enable+0x15c>)
    b368:	4798      	blx	r3
    b36a:	4603      	mov	r3, r0
    b36c:	83bb      	strh	r3, [r7, #28]
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    b36e:	7ebb      	ldrb	r3, [r7, #26]
    b370:	7ef9      	ldrb	r1, [r7, #27]
    b372:	8bba      	ldrh	r2, [r7, #28]
    b374:	4618      	mov	r0, r3
    b376:	4b2c      	ldr	r3, [pc, #176]	; (b428 <cdcdf_acm_enable+0x160>)
    b378:	4798      	blx	r3
    b37a:	4603      	mov	r3, r0
    b37c:	2b00      	cmp	r3, #0
    b37e:	d002      	beq.n	b386 <cdcdf_acm_enable+0xbe>
				return ERR_NOT_INITIALIZED;
    b380:	f06f 0313 	mvn.w	r3, #19
    b384:	e048      	b.n	b418 <cdcdf_acm_enable+0x150>
			}
			if (ep_desc.bEndpointAddress & USB_EP_DIR_IN) {
    b386:	7ebb      	ldrb	r3, [r7, #26]
    b388:	b25b      	sxtb	r3, r3
    b38a:	2b00      	cmp	r3, #0
    b38c:	da0f      	bge.n	b3ae <cdcdf_acm_enable+0xe6>
				func_data->func_ep_in[i] = ep_desc.bEndpointAddress;
    b38e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    b392:	7eb9      	ldrb	r1, [r7, #26]
    b394:	6a3a      	ldr	r2, [r7, #32]
    b396:	4413      	add	r3, r2
    b398:	460a      	mov	r2, r1
    b39a:	709a      	strb	r2, [r3, #2]
				usb_d_ep_enable(func_data->func_ep_in[i]);
    b39c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    b3a0:	6a3a      	ldr	r2, [r7, #32]
    b3a2:	4413      	add	r3, r2
    b3a4:	789b      	ldrb	r3, [r3, #2]
    b3a6:	4618      	mov	r0, r3
    b3a8:	4b20      	ldr	r3, [pc, #128]	; (b42c <cdcdf_acm_enable+0x164>)
    b3aa:	4798      	blx	r3
    b3ac:	e007      	b.n	b3be <cdcdf_acm_enable+0xf6>
			} else {
				func_data->func_ep_out = ep_desc.bEndpointAddress;
    b3ae:	7eba      	ldrb	r2, [r7, #26]
    b3b0:	6a3b      	ldr	r3, [r7, #32]
    b3b2:	711a      	strb	r2, [r3, #4]
				usb_d_ep_enable(func_data->func_ep_out);
    b3b4:	6a3b      	ldr	r3, [r7, #32]
    b3b6:	791b      	ldrb	r3, [r3, #4]
    b3b8:	4618      	mov	r0, r3
    b3ba:	4b1c      	ldr	r3, [pc, #112]	; (b42c <cdcdf_acm_enable+0x164>)
    b3bc:	4798      	blx	r3
			}
			desc->sod = ep;
    b3be:	683b      	ldr	r3, [r7, #0]
    b3c0:	6aba      	ldr	r2, [r7, #40]	; 0x28
    b3c2:	601a      	str	r2, [r3, #0]
			ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    b3c4:	683b      	ldr	r3, [r7, #0]
    b3c6:	681b      	ldr	r3, [r3, #0]
    b3c8:	4618      	mov	r0, r3
    b3ca:	4b19      	ldr	r3, [pc, #100]	; (b430 <cdcdf_acm_enable+0x168>)
    b3cc:	4798      	blx	r3
    b3ce:	4602      	mov	r2, r0
    b3d0:	683b      	ldr	r3, [r7, #0]
    b3d2:	685b      	ldr	r3, [r3, #4]
    b3d4:	4619      	mov	r1, r3
    b3d6:	4610      	mov	r0, r2
    b3d8:	4b16      	ldr	r3, [pc, #88]	; (b434 <cdcdf_acm_enable+0x16c>)
    b3da:	4798      	blx	r3
    b3dc:	62b8      	str	r0, [r7, #40]	; 0x28
		while (NULL != ep) {
    b3de:	6abb      	ldr	r3, [r7, #40]	; 0x28
    b3e0:	2b00      	cmp	r3, #0
    b3e2:	d1b7      	bne.n	b354 <cdcdf_acm_enable+0x8c>
		}
		ifc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_INTERFACE);
    b3e4:	683b      	ldr	r3, [r7, #0]
    b3e6:	681b      	ldr	r3, [r3, #0]
    b3e8:	4618      	mov	r0, r3
    b3ea:	4b11      	ldr	r3, [pc, #68]	; (b430 <cdcdf_acm_enable+0x168>)
    b3ec:	4798      	blx	r3
    b3ee:	683b      	ldr	r3, [r7, #0]
    b3f0:	685b      	ldr	r3, [r3, #4]
    b3f2:	2204      	movs	r2, #4
    b3f4:	4619      	mov	r1, r3
    b3f6:	4b0a      	ldr	r3, [pc, #40]	; (b420 <cdcdf_acm_enable+0x158>)
    b3f8:	4798      	blx	r3
    b3fa:	62f8      	str	r0, [r7, #44]	; 0x2c
	for (i = 0; i < 2; i++) {
    b3fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    b400:	3301      	adds	r3, #1
    b402:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    b406:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    b40a:	2b01      	cmp	r3, #1
    b40c:	f67f af6b 	bls.w	b2e6 <cdcdf_acm_enable+0x1e>
	}
	// Installed
	_cdcdf_acm_funcd.enabled = true;
    b410:	4b09      	ldr	r3, [pc, #36]	; (b438 <cdcdf_acm_enable+0x170>)
    b412:	2201      	movs	r2, #1
    b414:	715a      	strb	r2, [r3, #5]
	return ERR_NONE;
    b416:	2300      	movs	r3, #0
}
    b418:	4618      	mov	r0, r3
    b41a:	3730      	adds	r7, #48	; 0x30
    b41c:	46bd      	mov	sp, r7
    b41e:	bd80      	pop	{r7, pc}
    b420:	0000c54d 	.word	0x0000c54d
    b424:	0000b263 	.word	0x0000b263
    b428:	00002ac1 	.word	0x00002ac1
    b42c:	00002bad 	.word	0x00002bad
    b430:	0000b2a5 	.word	0x0000b2a5
    b434:	0000c5a9 	.word	0x0000c5a9
    b438:	20001088 	.word	0x20001088

0000b43c <cdcdf_acm_disable>:
 * \param[in] drv Pointer to USB device function driver
 * \param[in] desc Pointer to USB device descriptor
 * \return Operation status.
 */
static int32_t cdcdf_acm_disable(struct usbdf_driver *drv, struct usbd_descriptors *desc)
{
    b43c:	b580      	push	{r7, lr}
    b43e:	b088      	sub	sp, #32
    b440:	af00      	add	r7, sp, #0
    b442:	6078      	str	r0, [r7, #4]
    b444:	6039      	str	r1, [r7, #0]
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
    b446:	687b      	ldr	r3, [r7, #4]
    b448:	689b      	ldr	r3, [r3, #8]
    b44a:	61bb      	str	r3, [r7, #24]

	usb_iface_desc_t ifc_desc;
	uint8_t          i;

	if (desc) {
    b44c:	683b      	ldr	r3, [r7, #0]
    b44e:	2b00      	cmp	r3, #0
    b450:	d00c      	beq.n	b46c <cdcdf_acm_disable+0x30>
		ifc_desc.bInterfaceClass = desc->sod[5];
    b452:	683b      	ldr	r3, [r7, #0]
    b454:	681b      	ldr	r3, [r3, #0]
    b456:	795b      	ldrb	r3, [r3, #5]
    b458:	747b      	strb	r3, [r7, #17]
		// Check interface
		if ((ifc_desc.bInterfaceClass != CDC_CLASS_COMM) && (ifc_desc.bInterfaceClass != CDC_CLASS_DATA)) {
    b45a:	7c7b      	ldrb	r3, [r7, #17]
    b45c:	2b02      	cmp	r3, #2
    b45e:	d005      	beq.n	b46c <cdcdf_acm_disable+0x30>
    b460:	7c7b      	ldrb	r3, [r7, #17]
    b462:	2b0a      	cmp	r3, #10
    b464:	d002      	beq.n	b46c <cdcdf_acm_disable+0x30>
			return ERR_NOT_FOUND;
    b466:	f06f 0309 	mvn.w	r3, #9
    b46a:	e035      	b.n	b4d8 <cdcdf_acm_disable+0x9c>
		}
	}

	for (i = 0; i < 2; i++) {
    b46c:	2300      	movs	r3, #0
    b46e:	77fb      	strb	r3, [r7, #31]
    b470:	e01f      	b.n	b4b2 <cdcdf_acm_disable+0x76>
		if (func_data->func_iface[i] == 0xFF) {
    b472:	7ffb      	ldrb	r3, [r7, #31]
    b474:	69ba      	ldr	r2, [r7, #24]
    b476:	5cd3      	ldrb	r3, [r2, r3]
    b478:	2bff      	cmp	r3, #255	; 0xff
    b47a:	d016      	beq.n	b4aa <cdcdf_acm_disable+0x6e>
			continue;
		} else {
			func_data->func_iface[i] = 0xFF;
    b47c:	7ffb      	ldrb	r3, [r7, #31]
    b47e:	69ba      	ldr	r2, [r7, #24]
    b480:	21ff      	movs	r1, #255	; 0xff
    b482:	54d1      	strb	r1, [r2, r3]
			if (func_data->func_ep_in[i] != 0xFF) {
    b484:	7ffb      	ldrb	r3, [r7, #31]
    b486:	69ba      	ldr	r2, [r7, #24]
    b488:	4413      	add	r3, r2
    b48a:	789b      	ldrb	r3, [r3, #2]
    b48c:	2bff      	cmp	r3, #255	; 0xff
    b48e:	d00d      	beq.n	b4ac <cdcdf_acm_disable+0x70>
				usb_d_ep_deinit(func_data->func_ep_in[i]);
    b490:	7ffb      	ldrb	r3, [r7, #31]
    b492:	69ba      	ldr	r2, [r7, #24]
    b494:	4413      	add	r3, r2
    b496:	789b      	ldrb	r3, [r3, #2]
    b498:	4618      	mov	r0, r3
    b49a:	4b11      	ldr	r3, [pc, #68]	; (b4e0 <cdcdf_acm_disable+0xa4>)
    b49c:	4798      	blx	r3
				func_data->func_ep_in[i] = 0xFF;
    b49e:	7ffb      	ldrb	r3, [r7, #31]
    b4a0:	69ba      	ldr	r2, [r7, #24]
    b4a2:	4413      	add	r3, r2
    b4a4:	22ff      	movs	r2, #255	; 0xff
    b4a6:	709a      	strb	r2, [r3, #2]
    b4a8:	e000      	b.n	b4ac <cdcdf_acm_disable+0x70>
			continue;
    b4aa:	bf00      	nop
	for (i = 0; i < 2; i++) {
    b4ac:	7ffb      	ldrb	r3, [r7, #31]
    b4ae:	3301      	adds	r3, #1
    b4b0:	77fb      	strb	r3, [r7, #31]
    b4b2:	7ffb      	ldrb	r3, [r7, #31]
    b4b4:	2b01      	cmp	r3, #1
    b4b6:	d9dc      	bls.n	b472 <cdcdf_acm_disable+0x36>
			}
		}
	}

	if (func_data->func_ep_out != 0xFF) {
    b4b8:	69bb      	ldr	r3, [r7, #24]
    b4ba:	791b      	ldrb	r3, [r3, #4]
    b4bc:	2bff      	cmp	r3, #255	; 0xff
    b4be:	d007      	beq.n	b4d0 <cdcdf_acm_disable+0x94>
		usb_d_ep_deinit(func_data->func_ep_out);
    b4c0:	69bb      	ldr	r3, [r7, #24]
    b4c2:	791b      	ldrb	r3, [r3, #4]
    b4c4:	4618      	mov	r0, r3
    b4c6:	4b06      	ldr	r3, [pc, #24]	; (b4e0 <cdcdf_acm_disable+0xa4>)
    b4c8:	4798      	blx	r3
		func_data->func_ep_out = 0xFF;
    b4ca:	69bb      	ldr	r3, [r7, #24]
    b4cc:	22ff      	movs	r2, #255	; 0xff
    b4ce:	711a      	strb	r2, [r3, #4]
	}

	_cdcdf_acm_funcd.enabled = false;
    b4d0:	4b04      	ldr	r3, [pc, #16]	; (b4e4 <cdcdf_acm_disable+0xa8>)
    b4d2:	2200      	movs	r2, #0
    b4d4:	715a      	strb	r2, [r3, #5]
	return ERR_NONE;
    b4d6:	2300      	movs	r3, #0
}
    b4d8:	4618      	mov	r0, r3
    b4da:	3720      	adds	r7, #32
    b4dc:	46bd      	mov	sp, r7
    b4de:	bd80      	pop	{r7, pc}
    b4e0:	00002b5d 	.word	0x00002b5d
    b4e4:	20001088 	.word	0x20001088

0000b4e8 <cdcdf_acm_ctrl>:
 * \param[in] ctrl USB device general function control type
 * \param[in] param Parameter pointer
 * \return Operation status.
 */
static int32_t cdcdf_acm_ctrl(struct usbdf_driver *drv, enum usbdf_control ctrl, void *param)
{
    b4e8:	b580      	push	{r7, lr}
    b4ea:	b084      	sub	sp, #16
    b4ec:	af00      	add	r7, sp, #0
    b4ee:	60f8      	str	r0, [r7, #12]
    b4f0:	460b      	mov	r3, r1
    b4f2:	607a      	str	r2, [r7, #4]
    b4f4:	72fb      	strb	r3, [r7, #11]
	switch (ctrl) {
    b4f6:	7afb      	ldrb	r3, [r7, #11]
    b4f8:	2b01      	cmp	r3, #1
    b4fa:	d009      	beq.n	b510 <cdcdf_acm_ctrl+0x28>
    b4fc:	2b02      	cmp	r3, #2
    b4fe:	d00d      	beq.n	b51c <cdcdf_acm_ctrl+0x34>
    b500:	2b00      	cmp	r3, #0
    b502:	d10e      	bne.n	b522 <cdcdf_acm_ctrl+0x3a>
	case USBDF_ENABLE:
		return cdcdf_acm_enable(drv, (struct usbd_descriptors *)param);
    b504:	6879      	ldr	r1, [r7, #4]
    b506:	68f8      	ldr	r0, [r7, #12]
    b508:	4b09      	ldr	r3, [pc, #36]	; (b530 <cdcdf_acm_ctrl+0x48>)
    b50a:	4798      	blx	r3
    b50c:	4603      	mov	r3, r0
    b50e:	e00a      	b.n	b526 <cdcdf_acm_ctrl+0x3e>

	case USBDF_DISABLE:
		return cdcdf_acm_disable(drv, (struct usbd_descriptors *)param);
    b510:	6879      	ldr	r1, [r7, #4]
    b512:	68f8      	ldr	r0, [r7, #12]
    b514:	4b07      	ldr	r3, [pc, #28]	; (b534 <cdcdf_acm_ctrl+0x4c>)
    b516:	4798      	blx	r3
    b518:	4603      	mov	r3, r0
    b51a:	e004      	b.n	b526 <cdcdf_acm_ctrl+0x3e>

	case USBDF_GET_IFACE:
		return ERR_UNSUPPORTED_OP;
    b51c:	f06f 031a 	mvn.w	r3, #26
    b520:	e001      	b.n	b526 <cdcdf_acm_ctrl+0x3e>

	default:
		return ERR_INVALID_ARG;
    b522:	f06f 030c 	mvn.w	r3, #12
	}
}
    b526:	4618      	mov	r0, r3
    b528:	3710      	adds	r7, #16
    b52a:	46bd      	mov	sp, r7
    b52c:	bd80      	pop	{r7, pc}
    b52e:	bf00      	nop
    b530:	0000b2c9 	.word	0x0000b2c9
    b534:	0000b43d 	.word	0x0000b43d

0000b538 <cdcdf_acm_set_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_set_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    b538:	b590      	push	{r4, r7, lr}
    b53a:	b087      	sub	sp, #28
    b53c:	af00      	add	r7, sp, #0
    b53e:	4603      	mov	r3, r0
    b540:	6039      	str	r1, [r7, #0]
    b542:	71fb      	strb	r3, [r7, #7]
    b544:	4613      	mov	r3, r2
    b546:	71bb      	strb	r3, [r7, #6]
	struct usb_cdc_line_coding line_coding_tmp;
	uint16_t                   len      = req->wLength;
    b548:	683b      	ldr	r3, [r7, #0]
    b54a:	799a      	ldrb	r2, [r3, #6]
    b54c:	79db      	ldrb	r3, [r3, #7]
    b54e:	021b      	lsls	r3, r3, #8
    b550:	4313      	orrs	r3, r2
    b552:	82fb      	strh	r3, [r7, #22]
	uint8_t *                  ctrl_buf = usbdc_get_ctrl_buffer();
    b554:	4b2b      	ldr	r3, [pc, #172]	; (b604 <cdcdf_acm_set_req+0xcc>)
    b556:	4798      	blx	r3
    b558:	6138      	str	r0, [r7, #16]

	switch (req->bRequest) {
    b55a:	683b      	ldr	r3, [r7, #0]
    b55c:	785b      	ldrb	r3, [r3, #1]
    b55e:	2b20      	cmp	r3, #32
    b560:	d002      	beq.n	b568 <cdcdf_acm_set_req+0x30>
    b562:	2b22      	cmp	r3, #34	; 0x22
    b564:	d034      	beq.n	b5d0 <cdcdf_acm_set_req+0x98>
    b566:	e046      	b.n	b5f6 <cdcdf_acm_set_req+0xbe>
	case USB_REQ_CDC_SET_LINE_CODING:
		if (sizeof(struct usb_cdc_line_coding) != len) {
    b568:	8afb      	ldrh	r3, [r7, #22]
    b56a:	2b07      	cmp	r3, #7
    b56c:	d002      	beq.n	b574 <cdcdf_acm_set_req+0x3c>
			return ERR_INVALID_DATA;
    b56e:	f04f 33ff 	mov.w	r3, #4294967295
    b572:	e042      	b.n	b5fa <cdcdf_acm_set_req+0xc2>
		}
		if (USB_SETUP_STAGE == stage) {
    b574:	79bb      	ldrb	r3, [r7, #6]
    b576:	2b00      	cmp	r3, #0
    b578:	d107      	bne.n	b58a <cdcdf_acm_set_req+0x52>
			return usbdc_xfer(ep, ctrl_buf, len, false);
    b57a:	8afa      	ldrh	r2, [r7, #22]
    b57c:	79f8      	ldrb	r0, [r7, #7]
    b57e:	2300      	movs	r3, #0
    b580:	6939      	ldr	r1, [r7, #16]
    b582:	4c21      	ldr	r4, [pc, #132]	; (b608 <cdcdf_acm_set_req+0xd0>)
    b584:	47a0      	blx	r4
    b586:	4603      	mov	r3, r0
    b588:	e037      	b.n	b5fa <cdcdf_acm_set_req+0xc2>
		} else {
			memcpy(&line_coding_tmp, ctrl_buf, sizeof(struct usb_cdc_line_coding));
    b58a:	693a      	ldr	r2, [r7, #16]
    b58c:	f107 0308 	add.w	r3, r7, #8
    b590:	6810      	ldr	r0, [r2, #0]
    b592:	6018      	str	r0, [r3, #0]
    b594:	8891      	ldrh	r1, [r2, #4]
    b596:	7992      	ldrb	r2, [r2, #6]
    b598:	8099      	strh	r1, [r3, #4]
    b59a:	719a      	strb	r2, [r3, #6]
			if ((NULL == cdcdf_acm_set_line_coding) || (true == cdcdf_acm_set_line_coding(&line_coding_tmp))) {
    b59c:	4b1b      	ldr	r3, [pc, #108]	; (b60c <cdcdf_acm_set_req+0xd4>)
    b59e:	681b      	ldr	r3, [r3, #0]
    b5a0:	2b00      	cmp	r3, #0
    b5a2:	d008      	beq.n	b5b6 <cdcdf_acm_set_req+0x7e>
    b5a4:	4b19      	ldr	r3, [pc, #100]	; (b60c <cdcdf_acm_set_req+0xd4>)
    b5a6:	681b      	ldr	r3, [r3, #0]
    b5a8:	f107 0208 	add.w	r2, r7, #8
    b5ac:	4610      	mov	r0, r2
    b5ae:	4798      	blx	r3
    b5b0:	4603      	mov	r3, r0
    b5b2:	2b00      	cmp	r3, #0
    b5b4:	d00a      	beq.n	b5cc <cdcdf_acm_set_req+0x94>
				usbd_cdc_line_coding = line_coding_tmp;
    b5b6:	4b16      	ldr	r3, [pc, #88]	; (b610 <cdcdf_acm_set_req+0xd8>)
    b5b8:	f107 0208 	add.w	r2, r7, #8
    b5bc:	e892 0003 	ldmia.w	r2, {r0, r1}
    b5c0:	6018      	str	r0, [r3, #0]
    b5c2:	3304      	adds	r3, #4
    b5c4:	8019      	strh	r1, [r3, #0]
    b5c6:	3302      	adds	r3, #2
    b5c8:	0c0a      	lsrs	r2, r1, #16
    b5ca:	701a      	strb	r2, [r3, #0]
			}
			return ERR_NONE;
    b5cc:	2300      	movs	r3, #0
    b5ce:	e014      	b.n	b5fa <cdcdf_acm_set_req+0xc2>
		}
	case USB_REQ_CDC_SET_CONTROL_LINE_STATE:
		usbdc_xfer(0, NULL, 0, 0);
    b5d0:	2300      	movs	r3, #0
    b5d2:	2200      	movs	r2, #0
    b5d4:	2100      	movs	r1, #0
    b5d6:	2000      	movs	r0, #0
    b5d8:	4c0b      	ldr	r4, [pc, #44]	; (b608 <cdcdf_acm_set_req+0xd0>)
    b5da:	47a0      	blx	r4
		if (NULL != cdcdf_acm_notify_state) {
    b5dc:	4b0d      	ldr	r3, [pc, #52]	; (b614 <cdcdf_acm_set_req+0xdc>)
    b5de:	681b      	ldr	r3, [r3, #0]
    b5e0:	2b00      	cmp	r3, #0
    b5e2:	d006      	beq.n	b5f2 <cdcdf_acm_set_req+0xba>
			cdcdf_acm_notify_state(req->wValue);
    b5e4:	4b0b      	ldr	r3, [pc, #44]	; (b614 <cdcdf_acm_set_req+0xdc>)
    b5e6:	681b      	ldr	r3, [r3, #0]
    b5e8:	683a      	ldr	r2, [r7, #0]
    b5ea:	8852      	ldrh	r2, [r2, #2]
    b5ec:	b292      	uxth	r2, r2
    b5ee:	4610      	mov	r0, r2
    b5f0:	4798      	blx	r3
		}
		return ERR_NONE;
    b5f2:	2300      	movs	r3, #0
    b5f4:	e001      	b.n	b5fa <cdcdf_acm_set_req+0xc2>
	default:
		return ERR_INVALID_ARG;
    b5f6:	f06f 030c 	mvn.w	r3, #12
	}
}
    b5fa:	4618      	mov	r0, r3
    b5fc:	371c      	adds	r7, #28
    b5fe:	46bd      	mov	sp, r7
    b600:	bd90      	pop	{r4, r7, pc}
    b602:	bf00      	nop
    b604:	0000c449 	.word	0x0000c449
    b608:	0000c2bd 	.word	0x0000c2bd
    b60c:	2000109c 	.word	0x2000109c
    b610:	20001090 	.word	0x20001090
    b614:	20001098 	.word	0x20001098

0000b618 <cdcdf_acm_get_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_get_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    b618:	b590      	push	{r4, r7, lr}
    b61a:	b085      	sub	sp, #20
    b61c:	af00      	add	r7, sp, #0
    b61e:	4603      	mov	r3, r0
    b620:	6039      	str	r1, [r7, #0]
    b622:	71fb      	strb	r3, [r7, #7]
    b624:	4613      	mov	r3, r2
    b626:	71bb      	strb	r3, [r7, #6]
	uint16_t len = req->wLength;
    b628:	683b      	ldr	r3, [r7, #0]
    b62a:	799a      	ldrb	r2, [r3, #6]
    b62c:	79db      	ldrb	r3, [r3, #7]
    b62e:	021b      	lsls	r3, r3, #8
    b630:	4313      	orrs	r3, r2
    b632:	81fb      	strh	r3, [r7, #14]

	if (USB_DATA_STAGE == stage) {
    b634:	79bb      	ldrb	r3, [r7, #6]
    b636:	2b01      	cmp	r3, #1
    b638:	d101      	bne.n	b63e <cdcdf_acm_get_req+0x26>
		return ERR_NONE;
    b63a:	2300      	movs	r3, #0
    b63c:	e013      	b.n	b666 <cdcdf_acm_get_req+0x4e>
	}

	switch (req->bRequest) {
    b63e:	683b      	ldr	r3, [r7, #0]
    b640:	785b      	ldrb	r3, [r3, #1]
    b642:	2b21      	cmp	r3, #33	; 0x21
    b644:	d10d      	bne.n	b662 <cdcdf_acm_get_req+0x4a>
	case USB_REQ_CDC_GET_LINE_CODING:
		if (sizeof(struct usb_cdc_line_coding) != len) {
    b646:	89fb      	ldrh	r3, [r7, #14]
    b648:	2b07      	cmp	r3, #7
    b64a:	d002      	beq.n	b652 <cdcdf_acm_get_req+0x3a>
			return ERR_INVALID_DATA;
    b64c:	f04f 33ff 	mov.w	r3, #4294967295
    b650:	e009      	b.n	b666 <cdcdf_acm_get_req+0x4e>
		}
		return usbdc_xfer(ep, (uint8_t *)&usbd_cdc_line_coding, len, false);
    b652:	89fa      	ldrh	r2, [r7, #14]
    b654:	79f8      	ldrb	r0, [r7, #7]
    b656:	2300      	movs	r3, #0
    b658:	4905      	ldr	r1, [pc, #20]	; (b670 <cdcdf_acm_get_req+0x58>)
    b65a:	4c06      	ldr	r4, [pc, #24]	; (b674 <cdcdf_acm_get_req+0x5c>)
    b65c:	47a0      	blx	r4
    b65e:	4603      	mov	r3, r0
    b660:	e001      	b.n	b666 <cdcdf_acm_get_req+0x4e>
	default:
		return ERR_INVALID_ARG;
    b662:	f06f 030c 	mvn.w	r3, #12
	}
}
    b666:	4618      	mov	r0, r3
    b668:	3714      	adds	r7, #20
    b66a:	46bd      	mov	sp, r7
    b66c:	bd90      	pop	{r4, r7, pc}
    b66e:	bf00      	nop
    b670:	20001090 	.word	0x20001090
    b674:	0000c2bd 	.word	0x0000c2bd

0000b678 <cdcdf_acm_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    b678:	b580      	push	{r7, lr}
    b67a:	b082      	sub	sp, #8
    b67c:	af00      	add	r7, sp, #0
    b67e:	4603      	mov	r3, r0
    b680:	6039      	str	r1, [r7, #0]
    b682:	71fb      	strb	r3, [r7, #7]
    b684:	4613      	mov	r3, r2
    b686:	71bb      	strb	r3, [r7, #6]
	if (0x01 != ((req->bmRequestType >> 5) & 0x03)) { // class request
    b688:	683b      	ldr	r3, [r7, #0]
    b68a:	781b      	ldrb	r3, [r3, #0]
    b68c:	095b      	lsrs	r3, r3, #5
    b68e:	b2db      	uxtb	r3, r3
    b690:	f003 0303 	and.w	r3, r3, #3
    b694:	2b01      	cmp	r3, #1
    b696:	d002      	beq.n	b69e <cdcdf_acm_req+0x26>
		return ERR_NOT_FOUND;
    b698:	f06f 0309 	mvn.w	r3, #9
    b69c:	e026      	b.n	b6ec <cdcdf_acm_req+0x74>
	}
	if ((req->wIndex == _cdcdf_acm_funcd.func_iface[0]) || (req->wIndex == _cdcdf_acm_funcd.func_iface[1])) {
    b69e:	683b      	ldr	r3, [r7, #0]
    b6a0:	889b      	ldrh	r3, [r3, #4]
    b6a2:	b29a      	uxth	r2, r3
    b6a4:	4b13      	ldr	r3, [pc, #76]	; (b6f4 <cdcdf_acm_req+0x7c>)
    b6a6:	781b      	ldrb	r3, [r3, #0]
    b6a8:	b29b      	uxth	r3, r3
    b6aa:	429a      	cmp	r2, r3
    b6ac:	d007      	beq.n	b6be <cdcdf_acm_req+0x46>
    b6ae:	683b      	ldr	r3, [r7, #0]
    b6b0:	889b      	ldrh	r3, [r3, #4]
    b6b2:	b29a      	uxth	r2, r3
    b6b4:	4b0f      	ldr	r3, [pc, #60]	; (b6f4 <cdcdf_acm_req+0x7c>)
    b6b6:	785b      	ldrb	r3, [r3, #1]
    b6b8:	b29b      	uxth	r3, r3
    b6ba:	429a      	cmp	r2, r3
    b6bc:	d114      	bne.n	b6e8 <cdcdf_acm_req+0x70>
		if (req->bmRequestType & USB_EP_DIR_IN) {
    b6be:	683b      	ldr	r3, [r7, #0]
    b6c0:	781b      	ldrb	r3, [r3, #0]
    b6c2:	b25b      	sxtb	r3, r3
    b6c4:	2b00      	cmp	r3, #0
    b6c6:	da07      	bge.n	b6d8 <cdcdf_acm_req+0x60>
			return cdcdf_acm_get_req(ep, req, stage);
    b6c8:	79ba      	ldrb	r2, [r7, #6]
    b6ca:	79fb      	ldrb	r3, [r7, #7]
    b6cc:	6839      	ldr	r1, [r7, #0]
    b6ce:	4618      	mov	r0, r3
    b6d0:	4b09      	ldr	r3, [pc, #36]	; (b6f8 <cdcdf_acm_req+0x80>)
    b6d2:	4798      	blx	r3
    b6d4:	4603      	mov	r3, r0
    b6d6:	e009      	b.n	b6ec <cdcdf_acm_req+0x74>
		} else {
			return cdcdf_acm_set_req(ep, req, stage);
    b6d8:	79ba      	ldrb	r2, [r7, #6]
    b6da:	79fb      	ldrb	r3, [r7, #7]
    b6dc:	6839      	ldr	r1, [r7, #0]
    b6de:	4618      	mov	r0, r3
    b6e0:	4b06      	ldr	r3, [pc, #24]	; (b6fc <cdcdf_acm_req+0x84>)
    b6e2:	4798      	blx	r3
    b6e4:	4603      	mov	r3, r0
    b6e6:	e001      	b.n	b6ec <cdcdf_acm_req+0x74>
		}
	} else {
		return ERR_NOT_FOUND;
    b6e8:	f06f 0309 	mvn.w	r3, #9
	}
}
    b6ec:	4618      	mov	r0, r3
    b6ee:	3708      	adds	r7, #8
    b6f0:	46bd      	mov	sp, r7
    b6f2:	bd80      	pop	{r7, pc}
    b6f4:	20001088 	.word	0x20001088
    b6f8:	0000b619 	.word	0x0000b619
    b6fc:	0000b539 	.word	0x0000b539

0000b700 <cdcdf_acm_init>:

/**
 * \brief Initialize the USB CDC ACM Function Driver
 */
int32_t cdcdf_acm_init(void)
{
    b700:	b580      	push	{r7, lr}
    b702:	af00      	add	r7, sp, #0
	if (usbdc_get_state() > USBD_S_POWER) {
    b704:	4b0b      	ldr	r3, [pc, #44]	; (b734 <cdcdf_acm_init+0x34>)
    b706:	4798      	blx	r3
    b708:	4603      	mov	r3, r0
    b70a:	2b01      	cmp	r3, #1
    b70c:	d902      	bls.n	b714 <cdcdf_acm_init+0x14>
		return ERR_DENIED;
    b70e:	f06f 0310 	mvn.w	r3, #16
    b712:	e00d      	b.n	b730 <cdcdf_acm_init+0x30>
	}

	_cdcdf_acm.ctrl      = cdcdf_acm_ctrl;
    b714:	4b08      	ldr	r3, [pc, #32]	; (b738 <cdcdf_acm_init+0x38>)
    b716:	4a09      	ldr	r2, [pc, #36]	; (b73c <cdcdf_acm_init+0x3c>)
    b718:	605a      	str	r2, [r3, #4]
	_cdcdf_acm.func_data = &_cdcdf_acm_funcd;
    b71a:	4b07      	ldr	r3, [pc, #28]	; (b738 <cdcdf_acm_init+0x38>)
    b71c:	4a08      	ldr	r2, [pc, #32]	; (b740 <cdcdf_acm_init+0x40>)
    b71e:	609a      	str	r2, [r3, #8]

	usbdc_register_function(&_cdcdf_acm);
    b720:	4805      	ldr	r0, [pc, #20]	; (b738 <cdcdf_acm_init+0x38>)
    b722:	4b08      	ldr	r3, [pc, #32]	; (b744 <cdcdf_acm_init+0x44>)
    b724:	4798      	blx	r3
	usbdc_register_handler(USBDC_HDL_REQ, &cdcdf_acm_req_h);
    b726:	4908      	ldr	r1, [pc, #32]	; (b748 <cdcdf_acm_init+0x48>)
    b728:	2001      	movs	r0, #1
    b72a:	4b08      	ldr	r3, [pc, #32]	; (b74c <cdcdf_acm_init+0x4c>)
    b72c:	4798      	blx	r3
	return ERR_NONE;
    b72e:	2300      	movs	r3, #0
}
    b730:	4618      	mov	r0, r3
    b732:	bd80      	pop	{r7, pc}
    b734:	0000c461 	.word	0x0000c461
    b738:	2000107c 	.word	0x2000107c
    b73c:	0000b4e9 	.word	0x0000b4e9
    b740:	20001088 	.word	0x20001088
    b744:	0000c3c9 	.word	0x0000c3c9
    b748:	2000010c 	.word	0x2000010c
    b74c:	0000c2f9 	.word	0x0000c2f9

0000b750 <usb_get_u16>:
{
    b750:	b480      	push	{r7}
    b752:	b083      	sub	sp, #12
    b754:	af00      	add	r7, sp, #0
    b756:	6078      	str	r0, [r7, #4]
	return (ptr[0] + (ptr[1] << 8));
    b758:	687b      	ldr	r3, [r7, #4]
    b75a:	781b      	ldrb	r3, [r3, #0]
    b75c:	b29a      	uxth	r2, r3
    b75e:	687b      	ldr	r3, [r7, #4]
    b760:	3301      	adds	r3, #1
    b762:	781b      	ldrb	r3, [r3, #0]
    b764:	b29b      	uxth	r3, r3
    b766:	021b      	lsls	r3, r3, #8
    b768:	b29b      	uxth	r3, r3
    b76a:	4413      	add	r3, r2
    b76c:	b29b      	uxth	r3, r3
}
    b76e:	4618      	mov	r0, r3
    b770:	370c      	adds	r7, #12
    b772:	46bd      	mov	sp, r7
    b774:	f85d 7b04 	ldr.w	r7, [sp], #4
    b778:	4770      	bx	lr

0000b77a <usb_desc_len>:
{
    b77a:	b480      	push	{r7}
    b77c:	b083      	sub	sp, #12
    b77e:	af00      	add	r7, sp, #0
    b780:	6078      	str	r0, [r7, #4]
	return desc[0];
    b782:	687b      	ldr	r3, [r7, #4]
    b784:	781b      	ldrb	r3, [r3, #0]
}
    b786:	4618      	mov	r0, r3
    b788:	370c      	adds	r7, #12
    b78a:	46bd      	mov	sp, r7
    b78c:	f85d 7b04 	ldr.w	r7, [sp], #4
    b790:	4770      	bx	lr
	...

0000b794 <usb_desc_next>:
{
    b794:	b580      	push	{r7, lr}
    b796:	b082      	sub	sp, #8
    b798:	af00      	add	r7, sp, #0
    b79a:	6078      	str	r0, [r7, #4]
	return (desc + usb_desc_len(desc));
    b79c:	6878      	ldr	r0, [r7, #4]
    b79e:	4b05      	ldr	r3, [pc, #20]	; (b7b4 <usb_desc_next+0x20>)
    b7a0:	4798      	blx	r3
    b7a2:	4603      	mov	r3, r0
    b7a4:	461a      	mov	r2, r3
    b7a6:	687b      	ldr	r3, [r7, #4]
    b7a8:	4413      	add	r3, r2
}
    b7aa:	4618      	mov	r0, r3
    b7ac:	3708      	adds	r7, #8
    b7ae:	46bd      	mov	sp, r7
    b7b0:	bd80      	pop	{r7, pc}
    b7b2:	bf00      	nop
    b7b4:	0000b77b 	.word	0x0000b77b

0000b7b8 <usb_cfg_desc_total_len>:
/** \brief Get wTotalLength of USB Configuration Descriptor
 *  \param[in] cfg_desc Byte pointer to the descriptor start address
 *  \return 16-bit total length of configuration list
 */
static inline uint16_t usb_cfg_desc_total_len(const uint8_t *cfg_desc)
{
    b7b8:	b580      	push	{r7, lr}
    b7ba:	b082      	sub	sp, #8
    b7bc:	af00      	add	r7, sp, #0
    b7be:	6078      	str	r0, [r7, #4]
	return usb_get_u16(cfg_desc + 2);
    b7c0:	687b      	ldr	r3, [r7, #4]
    b7c2:	3302      	adds	r3, #2
    b7c4:	4618      	mov	r0, r3
    b7c6:	4b03      	ldr	r3, [pc, #12]	; (b7d4 <usb_cfg_desc_total_len+0x1c>)
    b7c8:	4798      	blx	r3
    b7ca:	4603      	mov	r3, r0
}
    b7cc:	4618      	mov	r0, r3
    b7ce:	3708      	adds	r7, #8
    b7d0:	46bd      	mov	sp, r7
    b7d2:	bd80      	pop	{r7, pc}
    b7d4:	0000b751 	.word	0x0000b751

0000b7d8 <usbdc_get_dev_desc>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_dev_desc(const uint8_t ep, struct usb_req *req)
{
    b7d8:	b590      	push	{r4, r7, lr}
    b7da:	b085      	sub	sp, #20
    b7dc:	af00      	add	r7, sp, #0
    b7de:	4603      	mov	r3, r0
    b7e0:	6039      	str	r1, [r7, #0]
    b7e2:	71fb      	strb	r3, [r7, #7]
	uint8_t *dev_desc = NULL;
    b7e4:	2300      	movs	r3, #0
    b7e6:	60fb      	str	r3, [r7, #12]
	uint16_t length   = req->wLength;
    b7e8:	683b      	ldr	r3, [r7, #0]
    b7ea:	799a      	ldrb	r2, [r3, #6]
    b7ec:	79db      	ldrb	r3, [r3, #7]
    b7ee:	021b      	lsls	r3, r3, #8
    b7f0:	4313      	orrs	r3, r2
    b7f2:	817b      	strh	r3, [r7, #10]
	if (length > 0x12) {
    b7f4:	897b      	ldrh	r3, [r7, #10]
    b7f6:	2b12      	cmp	r3, #18
    b7f8:	d901      	bls.n	b7fe <usbdc_get_dev_desc+0x26>
		length = 0x12;
    b7fa:	2312      	movs	r3, #18
    b7fc:	817b      	strh	r3, [r7, #10]
		dev_desc = usb_find_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, USB_DT_DEVICE);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!dev_desc) {
    b7fe:	68fb      	ldr	r3, [r7, #12]
    b800:	2b00      	cmp	r3, #0
    b802:	d10a      	bne.n	b81a <usbdc_get_dev_desc+0x42>
		dev_desc = usb_find_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, USB_DT_DEVICE);
    b804:	4b0f      	ldr	r3, [pc, #60]	; (b844 <usbdc_get_dev_desc+0x6c>)
    b806:	681b      	ldr	r3, [r3, #0]
    b808:	6818      	ldr	r0, [r3, #0]
    b80a:	4b0e      	ldr	r3, [pc, #56]	; (b844 <usbdc_get_dev_desc+0x6c>)
    b80c:	681b      	ldr	r3, [r3, #0]
    b80e:	685b      	ldr	r3, [r3, #4]
    b810:	2201      	movs	r2, #1
    b812:	4619      	mov	r1, r3
    b814:	4b0c      	ldr	r3, [pc, #48]	; (b848 <usbdc_get_dev_desc+0x70>)
    b816:	4798      	blx	r3
    b818:	60f8      	str	r0, [r7, #12]
	}
	if (!dev_desc) {
    b81a:	68fb      	ldr	r3, [r7, #12]
    b81c:	2b00      	cmp	r3, #0
    b81e:	d101      	bne.n	b824 <usbdc_get_dev_desc+0x4c>
		return false;
    b820:	2300      	movs	r3, #0
    b822:	e00b      	b.n	b83c <usbdc_get_dev_desc+0x64>
	}
	if (ERR_NONE != usbdc_xfer(ep, dev_desc, length, false)) {
    b824:	897a      	ldrh	r2, [r7, #10]
    b826:	79f8      	ldrb	r0, [r7, #7]
    b828:	2300      	movs	r3, #0
    b82a:	68f9      	ldr	r1, [r7, #12]
    b82c:	4c07      	ldr	r4, [pc, #28]	; (b84c <usbdc_get_dev_desc+0x74>)
    b82e:	47a0      	blx	r4
    b830:	4603      	mov	r3, r0
    b832:	2b00      	cmp	r3, #0
    b834:	d001      	beq.n	b83a <usbdc_get_dev_desc+0x62>
		return false;
    b836:	2300      	movs	r3, #0
    b838:	e000      	b.n	b83c <usbdc_get_dev_desc+0x64>
	}
	return true;
    b83a:	2301      	movs	r3, #1
}
    b83c:	4618      	mov	r0, r3
    b83e:	3714      	adds	r7, #20
    b840:	46bd      	mov	sp, r7
    b842:	bd90      	pop	{r4, r7, pc}
    b844:	200010a0 	.word	0x200010a0
    b848:	0000c54d 	.word	0x0000c54d
    b84c:	0000c2bd 	.word	0x0000c2bd

0000b850 <usbdc_get_cfg_desc>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_cfg_desc(const uint8_t ep, struct usb_req *req)
{
    b850:	b590      	push	{r4, r7, lr}
    b852:	b087      	sub	sp, #28
    b854:	af00      	add	r7, sp, #0
    b856:	4603      	mov	r3, r0
    b858:	6039      	str	r1, [r7, #0]
    b85a:	71fb      	strb	r3, [r7, #7]
	uint8_t *cfg_desc = NULL;
    b85c:	2300      	movs	r3, #0
    b85e:	617b      	str	r3, [r7, #20]
	uint16_t total_len;
	uint16_t length   = req->wLength;
    b860:	683b      	ldr	r3, [r7, #0]
    b862:	799a      	ldrb	r2, [r3, #6]
    b864:	79db      	ldrb	r3, [r3, #7]
    b866:	021b      	lsls	r3, r3, #8
    b868:	4313      	orrs	r3, r2
    b86a:	827b      	strh	r3, [r7, #18]
	uint8_t  index    = req->wValue & 0x00FF;
    b86c:	683b      	ldr	r3, [r7, #0]
    b86e:	885b      	ldrh	r3, [r3, #2]
    b870:	b29b      	uxth	r3, r3
    b872:	743b      	strb	r3, [r7, #16]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    b874:	8a7a      	ldrh	r2, [r7, #18]
    b876:	4b1e      	ldr	r3, [pc, #120]	; (b8f0 <usbdc_get_cfg_desc+0xa0>)
    b878:	7f1b      	ldrb	r3, [r3, #28]
    b87a:	3b01      	subs	r3, #1
    b87c:	4013      	ands	r3, r2
    b87e:	2b00      	cmp	r3, #0
    b880:	bf0c      	ite	eq
    b882:	2301      	moveq	r3, #1
    b884:	2300      	movne	r3, #0
    b886:	747b      	strb	r3, [r7, #17]
		cfg_desc = usb_find_cfg_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, index + 1);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!cfg_desc) {
    b888:	697b      	ldr	r3, [r7, #20]
    b88a:	2b00      	cmp	r3, #0
    b88c:	d10c      	bne.n	b8a8 <usbdc_get_cfg_desc+0x58>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index + 1);
    b88e:	4b18      	ldr	r3, [pc, #96]	; (b8f0 <usbdc_get_cfg_desc+0xa0>)
    b890:	681b      	ldr	r3, [r3, #0]
    b892:	6818      	ldr	r0, [r3, #0]
    b894:	4b16      	ldr	r3, [pc, #88]	; (b8f0 <usbdc_get_cfg_desc+0xa0>)
    b896:	681b      	ldr	r3, [r3, #0]
    b898:	6859      	ldr	r1, [r3, #4]
    b89a:	7c3b      	ldrb	r3, [r7, #16]
    b89c:	3301      	adds	r3, #1
    b89e:	b2db      	uxtb	r3, r3
    b8a0:	461a      	mov	r2, r3
    b8a2:	4b14      	ldr	r3, [pc, #80]	; (b8f4 <usbdc_get_cfg_desc+0xa4>)
    b8a4:	4798      	blx	r3
    b8a6:	6178      	str	r0, [r7, #20]
	}
	if (NULL == cfg_desc) {
    b8a8:	697b      	ldr	r3, [r7, #20]
    b8aa:	2b00      	cmp	r3, #0
    b8ac:	d101      	bne.n	b8b2 <usbdc_get_cfg_desc+0x62>
		return false;
    b8ae:	2300      	movs	r3, #0
    b8b0:	e019      	b.n	b8e6 <usbdc_get_cfg_desc+0x96>
	}
	total_len = usb_cfg_desc_total_len(cfg_desc);
    b8b2:	6978      	ldr	r0, [r7, #20]
    b8b4:	4b10      	ldr	r3, [pc, #64]	; (b8f8 <usbdc_get_cfg_desc+0xa8>)
    b8b6:	4798      	blx	r3
    b8b8:	4603      	mov	r3, r0
    b8ba:	81fb      	strh	r3, [r7, #14]
	if (length <= total_len) {
    b8bc:	8a7a      	ldrh	r2, [r7, #18]
    b8be:	89fb      	ldrh	r3, [r7, #14]
    b8c0:	429a      	cmp	r2, r3
    b8c2:	d802      	bhi.n	b8ca <usbdc_get_cfg_desc+0x7a>
		need_zlp = false;
    b8c4:	2300      	movs	r3, #0
    b8c6:	747b      	strb	r3, [r7, #17]
    b8c8:	e001      	b.n	b8ce <usbdc_get_cfg_desc+0x7e>
	} else {
		length = total_len;
    b8ca:	89fb      	ldrh	r3, [r7, #14]
    b8cc:	827b      	strh	r3, [r7, #18]
	}
	if (ERR_NONE != usbdc_xfer(ep, cfg_desc, length, need_zlp)) {
    b8ce:	8a7a      	ldrh	r2, [r7, #18]
    b8d0:	7c7b      	ldrb	r3, [r7, #17]
    b8d2:	79f8      	ldrb	r0, [r7, #7]
    b8d4:	6979      	ldr	r1, [r7, #20]
    b8d6:	4c09      	ldr	r4, [pc, #36]	; (b8fc <usbdc_get_cfg_desc+0xac>)
    b8d8:	47a0      	blx	r4
    b8da:	4603      	mov	r3, r0
    b8dc:	2b00      	cmp	r3, #0
    b8de:	d001      	beq.n	b8e4 <usbdc_get_cfg_desc+0x94>
		return false;
    b8e0:	2300      	movs	r3, #0
    b8e2:	e000      	b.n	b8e6 <usbdc_get_cfg_desc+0x96>
	}
	return true;
    b8e4:	2301      	movs	r3, #1
}
    b8e6:	4618      	mov	r0, r3
    b8e8:	371c      	adds	r7, #28
    b8ea:	46bd      	mov	sp, r7
    b8ec:	bd90      	pop	{r4, r7, pc}
    b8ee:	bf00      	nop
    b8f0:	200010a0 	.word	0x200010a0
    b8f4:	0000c60d 	.word	0x0000c60d
    b8f8:	0000b7b9 	.word	0x0000b7b9
    b8fc:	0000c2bd 	.word	0x0000c2bd

0000b900 <usbdc_get_str_desc>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_str_desc(const uint8_t ep, struct usb_req *req)
{
    b900:	b590      	push	{r4, r7, lr}
    b902:	b085      	sub	sp, #20
    b904:	af00      	add	r7, sp, #0
    b906:	4603      	mov	r3, r0
    b908:	6039      	str	r1, [r7, #0]
    b90a:	71fb      	strb	r3, [r7, #7]
	uint8_t *str_desc;
	uint16_t length   = req->wLength;
    b90c:	683b      	ldr	r3, [r7, #0]
    b90e:	799a      	ldrb	r2, [r3, #6]
    b910:	79db      	ldrb	r3, [r3, #7]
    b912:	021b      	lsls	r3, r3, #8
    b914:	4313      	orrs	r3, r2
    b916:	81fb      	strh	r3, [r7, #14]
	uint8_t  index    = req->wValue & 0x00FF;
    b918:	683b      	ldr	r3, [r7, #0]
    b91a:	885b      	ldrh	r3, [r3, #2]
    b91c:	b29b      	uxth	r3, r3
    b91e:	733b      	strb	r3, [r7, #12]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    b920:	89fa      	ldrh	r2, [r7, #14]
    b922:	4b1a      	ldr	r3, [pc, #104]	; (b98c <usbdc_get_str_desc+0x8c>)
    b924:	7f1b      	ldrb	r3, [r3, #28]
    b926:	3b01      	subs	r3, #1
    b928:	4013      	ands	r3, r2
    b92a:	2b00      	cmp	r3, #0
    b92c:	bf0c      	ite	eq
    b92e:	2301      	moveq	r3, #1
    b930:	2300      	movne	r3, #0
    b932:	737b      	strb	r3, [r7, #13]
	/* All string are in default descriptors block: FS/LS */
	str_desc = usb_find_str_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index);
    b934:	4b15      	ldr	r3, [pc, #84]	; (b98c <usbdc_get_str_desc+0x8c>)
    b936:	681b      	ldr	r3, [r3, #0]
    b938:	6818      	ldr	r0, [r3, #0]
    b93a:	4b14      	ldr	r3, [pc, #80]	; (b98c <usbdc_get_str_desc+0x8c>)
    b93c:	681b      	ldr	r3, [r3, #0]
    b93e:	685b      	ldr	r3, [r3, #4]
    b940:	7b3a      	ldrb	r2, [r7, #12]
    b942:	4619      	mov	r1, r3
    b944:	4b12      	ldr	r3, [pc, #72]	; (b990 <usbdc_get_str_desc+0x90>)
    b946:	4798      	blx	r3
    b948:	60b8      	str	r0, [r7, #8]
	if (NULL == str_desc) {
    b94a:	68bb      	ldr	r3, [r7, #8]
    b94c:	2b00      	cmp	r3, #0
    b94e:	d101      	bne.n	b954 <usbdc_get_str_desc+0x54>
		return false;
    b950:	2300      	movs	r3, #0
    b952:	e017      	b.n	b984 <usbdc_get_str_desc+0x84>
	}
	if (length <= str_desc[0]) {
    b954:	68bb      	ldr	r3, [r7, #8]
    b956:	781b      	ldrb	r3, [r3, #0]
    b958:	b29b      	uxth	r3, r3
    b95a:	89fa      	ldrh	r2, [r7, #14]
    b95c:	429a      	cmp	r2, r3
    b95e:	d802      	bhi.n	b966 <usbdc_get_str_desc+0x66>
		need_zlp = false;
    b960:	2300      	movs	r3, #0
    b962:	737b      	strb	r3, [r7, #13]
    b964:	e002      	b.n	b96c <usbdc_get_str_desc+0x6c>
	} else {
		length = str_desc[0];
    b966:	68bb      	ldr	r3, [r7, #8]
    b968:	781b      	ldrb	r3, [r3, #0]
    b96a:	81fb      	strh	r3, [r7, #14]
	}
	if (ERR_NONE != usbdc_xfer(ep, str_desc, length, need_zlp)) {
    b96c:	89fa      	ldrh	r2, [r7, #14]
    b96e:	7b7b      	ldrb	r3, [r7, #13]
    b970:	79f8      	ldrb	r0, [r7, #7]
    b972:	68b9      	ldr	r1, [r7, #8]
    b974:	4c07      	ldr	r4, [pc, #28]	; (b994 <usbdc_get_str_desc+0x94>)
    b976:	47a0      	blx	r4
    b978:	4603      	mov	r3, r0
    b97a:	2b00      	cmp	r3, #0
    b97c:	d001      	beq.n	b982 <usbdc_get_str_desc+0x82>
		return false;
    b97e:	2300      	movs	r3, #0
    b980:	e000      	b.n	b984 <usbdc_get_str_desc+0x84>
	}
	return true;
    b982:	2301      	movs	r3, #1
}
    b984:	4618      	mov	r0, r3
    b986:	3714      	adds	r7, #20
    b988:	46bd      	mov	sp, r7
    b98a:	bd90      	pop	{r4, r7, pc}
    b98c:	200010a0 	.word	0x200010a0
    b990:	0000c685 	.word	0x0000c685
    b994:	0000c2bd 	.word	0x0000c2bd

0000b998 <usbdc_get_desc_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_desc_req(const uint8_t ep, struct usb_req *req)
{
    b998:	b580      	push	{r7, lr}
    b99a:	b084      	sub	sp, #16
    b99c:	af00      	add	r7, sp, #0
    b99e:	4603      	mov	r3, r0
    b9a0:	6039      	str	r1, [r7, #0]
    b9a2:	71fb      	strb	r3, [r7, #7]
	uint8_t type = (uint8_t)(req->wValue >> 8);
    b9a4:	683b      	ldr	r3, [r7, #0]
    b9a6:	885b      	ldrh	r3, [r3, #2]
    b9a8:	b29b      	uxth	r3, r3
    b9aa:	0a1b      	lsrs	r3, r3, #8
    b9ac:	b29b      	uxth	r3, r3
    b9ae:	73fb      	strb	r3, [r7, #15]
	switch (type) {
    b9b0:	7bfb      	ldrb	r3, [r7, #15]
    b9b2:	2b02      	cmp	r3, #2
    b9b4:	d00d      	beq.n	b9d2 <usbdc_get_desc_req+0x3a>
    b9b6:	2b03      	cmp	r3, #3
    b9b8:	d012      	beq.n	b9e0 <usbdc_get_desc_req+0x48>
    b9ba:	2b01      	cmp	r3, #1
    b9bc:	d002      	beq.n	b9c4 <usbdc_get_desc_req+0x2c>
		return usbdc_get_othspdcfg_desc(ep, req);
#endif
	case USB_DT_STRING:
		return usbdc_get_str_desc(ep, req);
	default:
		break;
    b9be:	bf00      	nop
	}
	return false;
    b9c0:	2300      	movs	r3, #0
    b9c2:	e013      	b.n	b9ec <usbdc_get_desc_req+0x54>
		return usbdc_get_dev_desc(ep, req);
    b9c4:	79fb      	ldrb	r3, [r7, #7]
    b9c6:	6839      	ldr	r1, [r7, #0]
    b9c8:	4618      	mov	r0, r3
    b9ca:	4b0a      	ldr	r3, [pc, #40]	; (b9f4 <usbdc_get_desc_req+0x5c>)
    b9cc:	4798      	blx	r3
    b9ce:	4603      	mov	r3, r0
    b9d0:	e00c      	b.n	b9ec <usbdc_get_desc_req+0x54>
		return usbdc_get_cfg_desc(ep, req);
    b9d2:	79fb      	ldrb	r3, [r7, #7]
    b9d4:	6839      	ldr	r1, [r7, #0]
    b9d6:	4618      	mov	r0, r3
    b9d8:	4b07      	ldr	r3, [pc, #28]	; (b9f8 <usbdc_get_desc_req+0x60>)
    b9da:	4798      	blx	r3
    b9dc:	4603      	mov	r3, r0
    b9de:	e005      	b.n	b9ec <usbdc_get_desc_req+0x54>
		return usbdc_get_str_desc(ep, req);
    b9e0:	79fb      	ldrb	r3, [r7, #7]
    b9e2:	6839      	ldr	r1, [r7, #0]
    b9e4:	4618      	mov	r0, r3
    b9e6:	4b05      	ldr	r3, [pc, #20]	; (b9fc <usbdc_get_desc_req+0x64>)
    b9e8:	4798      	blx	r3
    b9ea:	4603      	mov	r3, r0
}
    b9ec:	4618      	mov	r0, r3
    b9ee:	3710      	adds	r7, #16
    b9f0:	46bd      	mov	sp, r7
    b9f2:	bd80      	pop	{r7, pc}
    b9f4:	0000b7d9 	.word	0x0000b7d9
    b9f8:	0000b851 	.word	0x0000b851
    b9fc:	0000b901 	.word	0x0000b901

0000ba00 <usbdc_get_status_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_status_req(const uint8_t ep, const struct usb_req *req)
{
    ba00:	b590      	push	{r4, r7, lr}
    ba02:	b085      	sub	sp, #20
    ba04:	af00      	add	r7, sp, #0
    ba06:	4603      	mov	r3, r0
    ba08:	6039      	str	r1, [r7, #0]
    ba0a:	71fb      	strb	r3, [r7, #7]
	int32_t st;
	(void)ep;

	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    ba0c:	683b      	ldr	r3, [r7, #0]
    ba0e:	781b      	ldrb	r3, [r3, #0]
    ba10:	f003 031f 	and.w	r3, r3, #31
    ba14:	2b00      	cmp	r3, #0
    ba16:	db1b      	blt.n	ba50 <usbdc_get_status_req+0x50>
    ba18:	2b01      	cmp	r3, #1
    ba1a:	dd02      	ble.n	ba22 <usbdc_get_status_req+0x22>
    ba1c:	2b02      	cmp	r3, #2
    ba1e:	d003      	beq.n	ba28 <usbdc_get_status_req+0x28>
    ba20:	e016      	b.n	ba50 <usbdc_get_status_req+0x50>
	case USB_REQT_RECIP_DEVICE:
	case USB_REQT_RECIP_INTERFACE:
		st = 0;
    ba22:	2300      	movs	r3, #0
    ba24:	60fb      	str	r3, [r7, #12]
		break;
    ba26:	e015      	b.n	ba54 <usbdc_get_status_req+0x54>
	case USB_REQT_RECIP_ENDPOINT:
		st = usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_GET);
    ba28:	683b      	ldr	r3, [r7, #0]
    ba2a:	889b      	ldrh	r3, [r3, #4]
    ba2c:	b29b      	uxth	r3, r3
    ba2e:	b2db      	uxtb	r3, r3
    ba30:	2102      	movs	r1, #2
    ba32:	4618      	mov	r0, r3
    ba34:	4b0f      	ldr	r3, [pc, #60]	; (ba74 <usbdc_get_status_req+0x74>)
    ba36:	4798      	blx	r3
    ba38:	4603      	mov	r3, r0
    ba3a:	60fb      	str	r3, [r7, #12]
		if (st < 0) {
    ba3c:	68fb      	ldr	r3, [r7, #12]
    ba3e:	2b00      	cmp	r3, #0
    ba40:	da01      	bge.n	ba46 <usbdc_get_status_req+0x46>
			return false;
    ba42:	2300      	movs	r3, #0
    ba44:	e012      	b.n	ba6c <usbdc_get_status_req+0x6c>
		}
		st = st & 0x1;
    ba46:	68fb      	ldr	r3, [r7, #12]
    ba48:	f003 0301 	and.w	r3, r3, #1
    ba4c:	60fb      	str	r3, [r7, #12]
		break;
    ba4e:	e001      	b.n	ba54 <usbdc_get_status_req+0x54>
	default:
		return false;
    ba50:	2300      	movs	r3, #0
    ba52:	e00b      	b.n	ba6c <usbdc_get_status_req+0x6c>
	}
	memcpy(usbdc.ctrl_buf, &st, 2);
    ba54:	4b08      	ldr	r3, [pc, #32]	; (ba78 <usbdc_get_status_req+0x78>)
    ba56:	695b      	ldr	r3, [r3, #20]
    ba58:	89ba      	ldrh	r2, [r7, #12]
    ba5a:	801a      	strh	r2, [r3, #0]
	usbdc_xfer(ep, usbdc.ctrl_buf, 2, false);
    ba5c:	4b06      	ldr	r3, [pc, #24]	; (ba78 <usbdc_get_status_req+0x78>)
    ba5e:	6959      	ldr	r1, [r3, #20]
    ba60:	79f8      	ldrb	r0, [r7, #7]
    ba62:	2300      	movs	r3, #0
    ba64:	2202      	movs	r2, #2
    ba66:	4c05      	ldr	r4, [pc, #20]	; (ba7c <usbdc_get_status_req+0x7c>)
    ba68:	47a0      	blx	r4
	return true;
    ba6a:	2301      	movs	r3, #1
}
    ba6c:	4618      	mov	r0, r3
    ba6e:	3714      	adds	r7, #20
    ba70:	46bd      	mov	sp, r7
    ba72:	bd90      	pop	{r4, r7, pc}
    ba74:	00002e09 	.word	0x00002e09
    ba78:	200010a0 	.word	0x200010a0
    ba7c:	0000c2bd 	.word	0x0000c2bd

0000ba80 <usbdc_get_interface>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_interface(struct usb_req *req)
{
    ba80:	b590      	push	{r4, r7, lr}
    ba82:	b085      	sub	sp, #20
    ba84:	af00      	add	r7, sp, #0
    ba86:	6078      	str	r0, [r7, #4]
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    ba88:	4b1f      	ldr	r3, [pc, #124]	; (bb08 <usbdc_get_interface+0x88>)
    ba8a:	691b      	ldr	r3, [r3, #16]
    ba8c:	60fb      	str	r3, [r7, #12]
	int32_t              rc;

	if (!(usbdc.ifc_alt_map & (1 << req->wIndex))) {
    ba8e:	4b1e      	ldr	r3, [pc, #120]	; (bb08 <usbdc_get_interface+0x88>)
    ba90:	7f5b      	ldrb	r3, [r3, #29]
    ba92:	461a      	mov	r2, r3
    ba94:	687b      	ldr	r3, [r7, #4]
    ba96:	889b      	ldrh	r3, [r3, #4]
    ba98:	b29b      	uxth	r3, r3
    ba9a:	fa42 f303 	asr.w	r3, r2, r3
    ba9e:	f003 0301 	and.w	r3, r3, #1
    baa2:	2b00      	cmp	r3, #0
    baa4:	d128      	bne.n	baf8 <usbdc_get_interface+0x78>
		/* Return 0 if alternate is not used */
		usbdc.ctrl_buf[0] = 0;
    baa6:	4b18      	ldr	r3, [pc, #96]	; (bb08 <usbdc_get_interface+0x88>)
    baa8:	695b      	ldr	r3, [r3, #20]
    baaa:	2200      	movs	r2, #0
    baac:	701a      	strb	r2, [r3, #0]
		usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    baae:	4b16      	ldr	r3, [pc, #88]	; (bb08 <usbdc_get_interface+0x88>)
    bab0:	6959      	ldr	r1, [r3, #20]
    bab2:	2300      	movs	r3, #0
    bab4:	2201      	movs	r2, #1
    bab6:	2000      	movs	r0, #0
    bab8:	4c14      	ldr	r4, [pc, #80]	; (bb0c <usbdc_get_interface+0x8c>)
    baba:	47a0      	blx	r4
		return true;
    babc:	2301      	movs	r3, #1
    babe:	e01f      	b.n	bb00 <usbdc_get_interface+0x80>
	}
	/* Check function drivers only if alternate is used */
	while (NULL != func) {
		if (0 > (rc = func->ctrl(func, USBDF_GET_IFACE, req))) {
    bac0:	68fb      	ldr	r3, [r7, #12]
    bac2:	685b      	ldr	r3, [r3, #4]
    bac4:	687a      	ldr	r2, [r7, #4]
    bac6:	2102      	movs	r1, #2
    bac8:	68f8      	ldr	r0, [r7, #12]
    baca:	4798      	blx	r3
    bacc:	60b8      	str	r0, [r7, #8]
    bace:	68bb      	ldr	r3, [r7, #8]
    bad0:	2b00      	cmp	r3, #0
    bad2:	da03      	bge.n	badc <usbdc_get_interface+0x5c>
			func = func->next;
    bad4:	68fb      	ldr	r3, [r7, #12]
    bad6:	681b      	ldr	r3, [r3, #0]
    bad8:	60fb      	str	r3, [r7, #12]
    bada:	e00d      	b.n	baf8 <usbdc_get_interface+0x78>
		} else {
			usbdc.ctrl_buf[0] = (uint8_t)rc;
    badc:	4b0a      	ldr	r3, [pc, #40]	; (bb08 <usbdc_get_interface+0x88>)
    bade:	695b      	ldr	r3, [r3, #20]
    bae0:	68ba      	ldr	r2, [r7, #8]
    bae2:	b2d2      	uxtb	r2, r2
    bae4:	701a      	strb	r2, [r3, #0]
			usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    bae6:	4b08      	ldr	r3, [pc, #32]	; (bb08 <usbdc_get_interface+0x88>)
    bae8:	6959      	ldr	r1, [r3, #20]
    baea:	2300      	movs	r3, #0
    baec:	2201      	movs	r2, #1
    baee:	2000      	movs	r0, #0
    baf0:	4c06      	ldr	r4, [pc, #24]	; (bb0c <usbdc_get_interface+0x8c>)
    baf2:	47a0      	blx	r4
			return true;
    baf4:	2301      	movs	r3, #1
    baf6:	e003      	b.n	bb00 <usbdc_get_interface+0x80>
	while (NULL != func) {
    baf8:	68fb      	ldr	r3, [r7, #12]
    bafa:	2b00      	cmp	r3, #0
    bafc:	d1e0      	bne.n	bac0 <usbdc_get_interface+0x40>
		}
	}
	return false;
    bafe:	2300      	movs	r3, #0
}
    bb00:	4618      	mov	r0, r3
    bb02:	3714      	adds	r7, #20
    bb04:	46bd      	mov	sp, r7
    bb06:	bd90      	pop	{r4, r7, pc}
    bb08:	200010a0 	.word	0x200010a0
    bb0c:	0000c2bd 	.word	0x0000c2bd

0000bb10 <usbdc_get_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_req(const uint8_t ep, struct usb_req *req)
{
    bb10:	b590      	push	{r4, r7, lr}
    bb12:	b083      	sub	sp, #12
    bb14:	af00      	add	r7, sp, #0
    bb16:	4603      	mov	r3, r0
    bb18:	6039      	str	r1, [r7, #0]
    bb1a:	71fb      	strb	r3, [r7, #7]
	switch (req->bRequest) {
    bb1c:	683b      	ldr	r3, [r7, #0]
    bb1e:	785b      	ldrb	r3, [r3, #1]
    bb20:	2b0a      	cmp	r3, #10
    bb22:	d83a      	bhi.n	bb9a <usbdc_get_req+0x8a>
    bb24:	a201      	add	r2, pc, #4	; (adr r2, bb2c <usbdc_get_req+0x1c>)
    bb26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    bb2a:	bf00      	nop
    bb2c:	0000bb83 	.word	0x0000bb83
    bb30:	0000bb9b 	.word	0x0000bb9b
    bb34:	0000bb9b 	.word	0x0000bb9b
    bb38:	0000bb9b 	.word	0x0000bb9b
    bb3c:	0000bb9b 	.word	0x0000bb9b
    bb40:	0000bb9b 	.word	0x0000bb9b
    bb44:	0000bb59 	.word	0x0000bb59
    bb48:	0000bb9b 	.word	0x0000bb9b
    bb4c:	0000bb67 	.word	0x0000bb67
    bb50:	0000bb9b 	.word	0x0000bb9b
    bb54:	0000bb91 	.word	0x0000bb91
	case USB_REQ_GET_DESC:
		return usbdc_get_desc_req(ep, req);
    bb58:	79fb      	ldrb	r3, [r7, #7]
    bb5a:	6839      	ldr	r1, [r7, #0]
    bb5c:	4618      	mov	r0, r3
    bb5e:	4b11      	ldr	r3, [pc, #68]	; (bba4 <usbdc_get_req+0x94>)
    bb60:	4798      	blx	r3
    bb62:	4603      	mov	r3, r0
    bb64:	e01a      	b.n	bb9c <usbdc_get_req+0x8c>
	case USB_REQ_GET_CONFIG:
		*(uint8_t *)usbdc.ctrl_buf = usbdc.cfg_value;
    bb66:	4b10      	ldr	r3, [pc, #64]	; (bba8 <usbdc_get_req+0x98>)
    bb68:	695b      	ldr	r3, [r3, #20]
    bb6a:	4a0f      	ldr	r2, [pc, #60]	; (bba8 <usbdc_get_req+0x98>)
    bb6c:	7ed2      	ldrb	r2, [r2, #27]
    bb6e:	701a      	strb	r2, [r3, #0]
		usbdc_xfer(ep, usbdc.ctrl_buf, 1, false);
    bb70:	4b0d      	ldr	r3, [pc, #52]	; (bba8 <usbdc_get_req+0x98>)
    bb72:	6959      	ldr	r1, [r3, #20]
    bb74:	79f8      	ldrb	r0, [r7, #7]
    bb76:	2300      	movs	r3, #0
    bb78:	2201      	movs	r2, #1
    bb7a:	4c0c      	ldr	r4, [pc, #48]	; (bbac <usbdc_get_req+0x9c>)
    bb7c:	47a0      	blx	r4
		return true;
    bb7e:	2301      	movs	r3, #1
    bb80:	e00c      	b.n	bb9c <usbdc_get_req+0x8c>
	case USB_REQ_GET_STATUS:
		return usbdc_get_status_req(ep, req);
    bb82:	79fb      	ldrb	r3, [r7, #7]
    bb84:	6839      	ldr	r1, [r7, #0]
    bb86:	4618      	mov	r0, r3
    bb88:	4b09      	ldr	r3, [pc, #36]	; (bbb0 <usbdc_get_req+0xa0>)
    bb8a:	4798      	blx	r3
    bb8c:	4603      	mov	r3, r0
    bb8e:	e005      	b.n	bb9c <usbdc_get_req+0x8c>
	case USB_REQ_GET_INTERFACE:
		return usbdc_get_interface(req);
    bb90:	6838      	ldr	r0, [r7, #0]
    bb92:	4b08      	ldr	r3, [pc, #32]	; (bbb4 <usbdc_get_req+0xa4>)
    bb94:	4798      	blx	r3
    bb96:	4603      	mov	r3, r0
    bb98:	e000      	b.n	bb9c <usbdc_get_req+0x8c>
	default:
		return false;
    bb9a:	2300      	movs	r3, #0
	}
}
    bb9c:	4618      	mov	r0, r3
    bb9e:	370c      	adds	r7, #12
    bba0:	46bd      	mov	sp, r7
    bba2:	bd90      	pop	{r4, r7, pc}
    bba4:	0000b999 	.word	0x0000b999
    bba8:	200010a0 	.word	0x200010a0
    bbac:	0000c2bd 	.word	0x0000c2bd
    bbb0:	0000ba01 	.word	0x0000ba01
    bbb4:	0000ba81 	.word	0x0000ba81

0000bbb8 <usbdc_clear_ftr_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_clear_ftr_req(const uint8_t ep, const struct usb_req *req)
{
    bbb8:	b590      	push	{r4, r7, lr}
    bbba:	b083      	sub	sp, #12
    bbbc:	af00      	add	r7, sp, #0
    bbbe:	4603      	mov	r3, r0
    bbc0:	6039      	str	r1, [r7, #0]
    bbc2:	71fb      	strb	r3, [r7, #7]
	(void)ep;
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    bbc4:	683b      	ldr	r3, [r7, #0]
    bbc6:	781b      	ldrb	r3, [r3, #0]
    bbc8:	f003 031f 	and.w	r3, r3, #31
    bbcc:	2b02      	cmp	r3, #2
    bbce:	d116      	bne.n	bbfe <usbdc_clear_ftr_req+0x46>
	case USB_REQT_RECIP_ENDPOINT:
		if (req->wLength != 0) {
    bbd0:	683b      	ldr	r3, [r7, #0]
    bbd2:	88db      	ldrh	r3, [r3, #6]
    bbd4:	b29b      	uxth	r3, r3
    bbd6:	2b00      	cmp	r3, #0
    bbd8:	d001      	beq.n	bbde <usbdc_clear_ftr_req+0x26>
			return false;
    bbda:	2300      	movs	r3, #0
    bbdc:	e010      	b.n	bc00 <usbdc_clear_ftr_req+0x48>
		}
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_CLR);
    bbde:	683b      	ldr	r3, [r7, #0]
    bbe0:	889b      	ldrh	r3, [r3, #4]
    bbe2:	b29b      	uxth	r3, r3
    bbe4:	b2db      	uxtb	r3, r3
    bbe6:	2100      	movs	r1, #0
    bbe8:	4618      	mov	r0, r3
    bbea:	4b07      	ldr	r3, [pc, #28]	; (bc08 <usbdc_clear_ftr_req+0x50>)
    bbec:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
    bbee:	79f8      	ldrb	r0, [r7, #7]
    bbf0:	2301      	movs	r3, #1
    bbf2:	2200      	movs	r2, #0
    bbf4:	2100      	movs	r1, #0
    bbf6:	4c05      	ldr	r4, [pc, #20]	; (bc0c <usbdc_clear_ftr_req+0x54>)
    bbf8:	47a0      	blx	r4
		return true;
    bbfa:	2301      	movs	r3, #1
    bbfc:	e000      	b.n	bc00 <usbdc_clear_ftr_req+0x48>
	default:
		return false;
    bbfe:	2300      	movs	r3, #0
	}
}
    bc00:	4618      	mov	r0, r3
    bc02:	370c      	adds	r7, #12
    bc04:	46bd      	mov	sp, r7
    bc06:	bd90      	pop	{r4, r7, pc}
    bc08:	00002e09 	.word	0x00002e09
    bc0c:	0000c2bd 	.word	0x0000c2bd

0000bc10 <usbdc_set_ftr_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_set_ftr_req(const uint8_t ep, const struct usb_req *req)
{
    bc10:	b590      	push	{r4, r7, lr}
    bc12:	b083      	sub	sp, #12
    bc14:	af00      	add	r7, sp, #0
    bc16:	4603      	mov	r3, r0
    bc18:	6039      	str	r1, [r7, #0]
    bc1a:	71fb      	strb	r3, [r7, #7]
	(void)ep;
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    bc1c:	683b      	ldr	r3, [r7, #0]
    bc1e:	781b      	ldrb	r3, [r3, #0]
    bc20:	f003 031f 	and.w	r3, r3, #31
    bc24:	2b02      	cmp	r3, #2
    bc26:	d116      	bne.n	bc56 <usbdc_set_ftr_req+0x46>
	case USB_REQT_RECIP_ENDPOINT:
		if (req->wLength != 0) {
    bc28:	683b      	ldr	r3, [r7, #0]
    bc2a:	88db      	ldrh	r3, [r3, #6]
    bc2c:	b29b      	uxth	r3, r3
    bc2e:	2b00      	cmp	r3, #0
    bc30:	d001      	beq.n	bc36 <usbdc_set_ftr_req+0x26>
			return false;
    bc32:	2300      	movs	r3, #0
    bc34:	e010      	b.n	bc58 <usbdc_set_ftr_req+0x48>
		}
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_SET);
    bc36:	683b      	ldr	r3, [r7, #0]
    bc38:	889b      	ldrh	r3, [r3, #4]
    bc3a:	b29b      	uxth	r3, r3
    bc3c:	b2db      	uxtb	r3, r3
    bc3e:	2101      	movs	r1, #1
    bc40:	4618      	mov	r0, r3
    bc42:	4b07      	ldr	r3, [pc, #28]	; (bc60 <usbdc_set_ftr_req+0x50>)
    bc44:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
    bc46:	79f8      	ldrb	r0, [r7, #7]
    bc48:	2301      	movs	r3, #1
    bc4a:	2200      	movs	r2, #0
    bc4c:	2100      	movs	r1, #0
    bc4e:	4c05      	ldr	r4, [pc, #20]	; (bc64 <usbdc_set_ftr_req+0x54>)
    bc50:	47a0      	blx	r4
		return true;
    bc52:	2301      	movs	r3, #1
    bc54:	e000      	b.n	bc58 <usbdc_set_ftr_req+0x48>
	default:
		return false;
    bc56:	2300      	movs	r3, #0
	}
}
    bc58:	4618      	mov	r0, r3
    bc5a:	370c      	adds	r7, #12
    bc5c:	46bd      	mov	sp, r7
    bc5e:	bd90      	pop	{r4, r7, pc}
    bc60:	00002e09 	.word	0x00002e09
    bc64:	0000c2bd 	.word	0x0000c2bd

0000bc68 <usbdc_unconfig>:

/**
 * \brief Unconfig, close all interfaces
 */
static void usbdc_unconfig(void)
{
    bc68:	b580      	push	{r7, lr}
    bc6a:	b082      	sub	sp, #8
    bc6c:	af00      	add	r7, sp, #0
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    bc6e:	4b0a      	ldr	r3, [pc, #40]	; (bc98 <usbdc_unconfig+0x30>)
    bc70:	691b      	ldr	r3, [r3, #16]
    bc72:	607b      	str	r3, [r7, #4]
	while (NULL != func) {
    bc74:	e008      	b.n	bc88 <usbdc_unconfig+0x20>
		func->ctrl(func, USBDF_DISABLE, NULL);
    bc76:	687b      	ldr	r3, [r7, #4]
    bc78:	685b      	ldr	r3, [r3, #4]
    bc7a:	2200      	movs	r2, #0
    bc7c:	2101      	movs	r1, #1
    bc7e:	6878      	ldr	r0, [r7, #4]
    bc80:	4798      	blx	r3
		func = func->next;
    bc82:	687b      	ldr	r3, [r7, #4]
    bc84:	681b      	ldr	r3, [r3, #0]
    bc86:	607b      	str	r3, [r7, #4]
	while (NULL != func) {
    bc88:	687b      	ldr	r3, [r7, #4]
    bc8a:	2b00      	cmp	r3, #0
    bc8c:	d1f3      	bne.n	bc76 <usbdc_unconfig+0xe>
	}
}
    bc8e:	bf00      	nop
    bc90:	3708      	adds	r7, #8
    bc92:	46bd      	mov	sp, r7
    bc94:	bd80      	pop	{r7, pc}
    bc96:	bf00      	nop
    bc98:	200010a0 	.word	0x200010a0

0000bc9c <usbdc_set_config>:
 * \param[in] cfg_value Configuration Value
 * \retval true Set configuration OK.
 * \retval false Request error.
 */
static bool usbdc_set_config(uint8_t cfg_value)
{
    bc9c:	b580      	push	{r7, lr}
    bc9e:	b088      	sub	sp, #32
    bca0:	af00      	add	r7, sp, #0
    bca2:	4603      	mov	r3, r0
    bca4:	71fb      	strb	r3, [r7, #7]
	struct usbd_descriptors desc;
	struct usbdf_driver *   func;
	uint8_t *               cfg_desc = NULL;
    bca6:	2300      	movs	r3, #0
    bca8:	61bb      	str	r3, [r7, #24]
	uint16_t                total_len;
	uint8_t                 last_iface = 0xFF;
    bcaa:	23ff      	movs	r3, #255	; 0xff
    bcac:	75fb      	strb	r3, [r7, #23]

	if (cfg_value == 0) {
    bcae:	79fb      	ldrb	r3, [r7, #7]
    bcb0:	2b00      	cmp	r3, #0
    bcb2:	d103      	bne.n	bcbc <usbdc_set_config+0x20>
		usbdc_unconfig();
    bcb4:	4b2e      	ldr	r3, [pc, #184]	; (bd70 <usbdc_set_config+0xd4>)
    bcb6:	4798      	blx	r3
		return true;
    bcb8:	2301      	movs	r3, #1
    bcba:	e055      	b.n	bd68 <usbdc_set_config+0xcc>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, cfg_value);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!cfg_desc) {
    bcbc:	69bb      	ldr	r3, [r7, #24]
    bcbe:	2b00      	cmp	r3, #0
    bcc0:	d10a      	bne.n	bcd8 <usbdc_set_config+0x3c>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, cfg_value);
    bcc2:	4b2c      	ldr	r3, [pc, #176]	; (bd74 <usbdc_set_config+0xd8>)
    bcc4:	681b      	ldr	r3, [r3, #0]
    bcc6:	6818      	ldr	r0, [r3, #0]
    bcc8:	4b2a      	ldr	r3, [pc, #168]	; (bd74 <usbdc_set_config+0xd8>)
    bcca:	681b      	ldr	r3, [r3, #0]
    bccc:	685b      	ldr	r3, [r3, #4]
    bcce:	79fa      	ldrb	r2, [r7, #7]
    bcd0:	4619      	mov	r1, r3
    bcd2:	4b29      	ldr	r3, [pc, #164]	; (bd78 <usbdc_set_config+0xdc>)
    bcd4:	4798      	blx	r3
    bcd6:	61b8      	str	r0, [r7, #24]
	}
	if (NULL == cfg_desc) {
    bcd8:	69bb      	ldr	r3, [r7, #24]
    bcda:	2b00      	cmp	r3, #0
    bcdc:	d101      	bne.n	bce2 <usbdc_set_config+0x46>
		return false;
    bcde:	2300      	movs	r3, #0
    bce0:	e042      	b.n	bd68 <usbdc_set_config+0xcc>
	}

	total_len = usb_cfg_desc_total_len(cfg_desc);
    bce2:	69b8      	ldr	r0, [r7, #24]
    bce4:	4b25      	ldr	r3, [pc, #148]	; (bd7c <usbdc_set_config+0xe0>)
    bce6:	4798      	blx	r3
    bce8:	4603      	mov	r3, r0
    bcea:	82bb      	strh	r3, [r7, #20]
	desc.eod  = cfg_desc + total_len;
    bcec:	8abb      	ldrh	r3, [r7, #20]
    bcee:	69ba      	ldr	r2, [r7, #24]
    bcf0:	4413      	add	r3, r2
    bcf2:	613b      	str	r3, [r7, #16]
	desc.sod  = usb_find_desc(cfg_desc, desc.eod, USB_DT_INTERFACE);
    bcf4:	693b      	ldr	r3, [r7, #16]
    bcf6:	2204      	movs	r2, #4
    bcf8:	4619      	mov	r1, r3
    bcfa:	69b8      	ldr	r0, [r7, #24]
    bcfc:	4b20      	ldr	r3, [pc, #128]	; (bd80 <usbdc_set_config+0xe4>)
    bcfe:	4798      	blx	r3
    bd00:	4603      	mov	r3, r0
    bd02:	60fb      	str	r3, [r7, #12]

	while (NULL != desc.sod) {
    bd04:	e02c      	b.n	bd60 <usbdc_set_config+0xc4>
		/* Apply very first alternate setting (must be 0) of the interface */
		if (last_iface != desc.sod[2] /* bInterfaceNumber */) {
    bd06:	68fb      	ldr	r3, [r7, #12]
    bd08:	3302      	adds	r3, #2
    bd0a:	781b      	ldrb	r3, [r3, #0]
    bd0c:	7dfa      	ldrb	r2, [r7, #23]
    bd0e:	429a      	cmp	r2, r3
    bd10:	d018      	beq.n	bd44 <usbdc_set_config+0xa8>
			last_iface = desc.sod[2];
    bd12:	68fb      	ldr	r3, [r7, #12]
    bd14:	789b      	ldrb	r3, [r3, #2]
    bd16:	75fb      	strb	r3, [r7, #23]
			func       = (struct usbdf_driver *)usbdc.func_list.head;
    bd18:	4b16      	ldr	r3, [pc, #88]	; (bd74 <usbdc_set_config+0xd8>)
    bd1a:	691b      	ldr	r3, [r3, #16]
    bd1c:	61fb      	str	r3, [r7, #28]
			while (NULL != func) {
    bd1e:	e00c      	b.n	bd3a <usbdc_set_config+0x9e>
				if (func->ctrl(func, USBDF_ENABLE, &desc)) {
    bd20:	69fb      	ldr	r3, [r7, #28]
    bd22:	685b      	ldr	r3, [r3, #4]
    bd24:	f107 020c 	add.w	r2, r7, #12
    bd28:	2100      	movs	r1, #0
    bd2a:	69f8      	ldr	r0, [r7, #28]
    bd2c:	4798      	blx	r3
    bd2e:	4603      	mov	r3, r0
    bd30:	2b00      	cmp	r3, #0
    bd32:	d006      	beq.n	bd42 <usbdc_set_config+0xa6>
					func = func->next;
    bd34:	69fb      	ldr	r3, [r7, #28]
    bd36:	681b      	ldr	r3, [r3, #0]
    bd38:	61fb      	str	r3, [r7, #28]
			while (NULL != func) {
    bd3a:	69fb      	ldr	r3, [r7, #28]
    bd3c:	2b00      	cmp	r3, #0
    bd3e:	d1ef      	bne.n	bd20 <usbdc_set_config+0x84>
    bd40:	e000      	b.n	bd44 <usbdc_set_config+0xa8>
				} else {
					break;
    bd42:	bf00      	nop
				}
			}
		}
		desc.sod = usb_desc_next(desc.sod);
    bd44:	68fb      	ldr	r3, [r7, #12]
    bd46:	4618      	mov	r0, r3
    bd48:	4b0e      	ldr	r3, [pc, #56]	; (bd84 <usbdc_set_config+0xe8>)
    bd4a:	4798      	blx	r3
    bd4c:	4603      	mov	r3, r0
    bd4e:	60fb      	str	r3, [r7, #12]
		desc.sod = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    bd50:	68fb      	ldr	r3, [r7, #12]
    bd52:	6939      	ldr	r1, [r7, #16]
    bd54:	2204      	movs	r2, #4
    bd56:	4618      	mov	r0, r3
    bd58:	4b09      	ldr	r3, [pc, #36]	; (bd80 <usbdc_set_config+0xe4>)
    bd5a:	4798      	blx	r3
    bd5c:	4603      	mov	r3, r0
    bd5e:	60fb      	str	r3, [r7, #12]
	while (NULL != desc.sod) {
    bd60:	68fb      	ldr	r3, [r7, #12]
    bd62:	2b00      	cmp	r3, #0
    bd64:	d1cf      	bne.n	bd06 <usbdc_set_config+0x6a>
	}
	return true;
    bd66:	2301      	movs	r3, #1
}
    bd68:	4618      	mov	r0, r3
    bd6a:	3720      	adds	r7, #32
    bd6c:	46bd      	mov	sp, r7
    bd6e:	bd80      	pop	{r7, pc}
    bd70:	0000bc69 	.word	0x0000bc69
    bd74:	200010a0 	.word	0x200010a0
    bd78:	0000c60d 	.word	0x0000c60d
    bd7c:	0000b7b9 	.word	0x0000b7b9
    bd80:	0000c54d 	.word	0x0000c54d
    bd84:	0000b795 	.word	0x0000b795

0000bd88 <usbdc_set_address>:
/**
 * \brief Apply the USB device address
 * \param[in] addr address to be set.
 */
static void usbdc_set_address(uint8_t addr)
{
    bd88:	b580      	push	{r7, lr}
    bd8a:	b082      	sub	sp, #8
    bd8c:	af00      	add	r7, sp, #0
    bd8e:	4603      	mov	r3, r0
    bd90:	71fb      	strb	r3, [r7, #7]
	usb_d_set_address(addr);
    bd92:	79fb      	ldrb	r3, [r7, #7]
    bd94:	4618      	mov	r0, r3
    bd96:	4b03      	ldr	r3, [pc, #12]	; (bda4 <usbdc_set_address+0x1c>)
    bd98:	4798      	blx	r3
}
    bd9a:	bf00      	nop
    bd9c:	3708      	adds	r7, #8
    bd9e:	46bd      	mov	sp, r7
    bda0:	bd80      	pop	{r7, pc}
    bda2:	bf00      	nop
    bda4:	00002a79 	.word	0x00002a79

0000bda8 <usbdc_set_interface>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_set_interface(uint16_t alt_set, uint16_t ifc_id)
{
    bda8:	b590      	push	{r4, r7, lr}
    bdaa:	b087      	sub	sp, #28
    bdac:	af00      	add	r7, sp, #0
    bdae:	4603      	mov	r3, r0
    bdb0:	460a      	mov	r2, r1
    bdb2:	80fb      	strh	r3, [r7, #6]
    bdb4:	4613      	mov	r3, r2
    bdb6:	80bb      	strh	r3, [r7, #4]
	struct usbd_descriptors desc;
	struct usbdf_driver *   func;
	uint8_t *               ifc = NULL;
    bdb8:	2300      	movs	r3, #0
    bdba:	613b      	str	r3, [r7, #16]
		ifc = usb_find_cfg_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, usbdc.cfg_value);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!ifc) {
    bdbc:	693b      	ldr	r3, [r7, #16]
    bdbe:	2b00      	cmp	r3, #0
    bdc0:	d10b      	bne.n	bdda <usbdc_set_interface+0x32>
		ifc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, usbdc.cfg_value);
    bdc2:	4b43      	ldr	r3, [pc, #268]	; (bed0 <usbdc_set_interface+0x128>)
    bdc4:	681b      	ldr	r3, [r3, #0]
    bdc6:	6818      	ldr	r0, [r3, #0]
    bdc8:	4b41      	ldr	r3, [pc, #260]	; (bed0 <usbdc_set_interface+0x128>)
    bdca:	681b      	ldr	r3, [r3, #0]
    bdcc:	6859      	ldr	r1, [r3, #4]
    bdce:	4b40      	ldr	r3, [pc, #256]	; (bed0 <usbdc_set_interface+0x128>)
    bdd0:	7edb      	ldrb	r3, [r3, #27]
    bdd2:	461a      	mov	r2, r3
    bdd4:	4b3f      	ldr	r3, [pc, #252]	; (bed4 <usbdc_set_interface+0x12c>)
    bdd6:	4798      	blx	r3
    bdd8:	6138      	str	r0, [r7, #16]
	}
	if (NULL == ifc) {
    bdda:	693b      	ldr	r3, [r7, #16]
    bddc:	2b00      	cmp	r3, #0
    bdde:	d101      	bne.n	bde4 <usbdc_set_interface+0x3c>
		return false;
    bde0:	2300      	movs	r3, #0
    bde2:	e071      	b.n	bec8 <usbdc_set_interface+0x120>
	}
	desc.sod = ifc;
    bde4:	693b      	ldr	r3, [r7, #16]
    bde6:	60bb      	str	r3, [r7, #8]
	desc.eod = ifc + usb_cfg_desc_total_len(ifc);
    bde8:	6938      	ldr	r0, [r7, #16]
    bdea:	4b3b      	ldr	r3, [pc, #236]	; (bed8 <usbdc_set_interface+0x130>)
    bdec:	4798      	blx	r3
    bdee:	4603      	mov	r3, r0
    bdf0:	461a      	mov	r2, r3
    bdf2:	693b      	ldr	r3, [r7, #16]
    bdf4:	4413      	add	r3, r2
    bdf6:	60fb      	str	r3, [r7, #12]

	if (NULL == (ifc = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE))) {
    bdf8:	68bb      	ldr	r3, [r7, #8]
    bdfa:	68f9      	ldr	r1, [r7, #12]
    bdfc:	2204      	movs	r2, #4
    bdfe:	4618      	mov	r0, r3
    be00:	4b36      	ldr	r3, [pc, #216]	; (bedc <usbdc_set_interface+0x134>)
    be02:	4798      	blx	r3
    be04:	6138      	str	r0, [r7, #16]
    be06:	693b      	ldr	r3, [r7, #16]
    be08:	2b00      	cmp	r3, #0
    be0a:	d113      	bne.n	be34 <usbdc_set_interface+0x8c>
		return false;
    be0c:	2300      	movs	r3, #0
    be0e:	e05b      	b.n	bec8 <usbdc_set_interface+0x120>
	}

	while (ifc[2] != ifc_id || ifc[3] != alt_set) {
		desc.sod = usb_desc_next(desc.sod);
    be10:	68bb      	ldr	r3, [r7, #8]
    be12:	4618      	mov	r0, r3
    be14:	4b32      	ldr	r3, [pc, #200]	; (bee0 <usbdc_set_interface+0x138>)
    be16:	4798      	blx	r3
    be18:	4603      	mov	r3, r0
    be1a:	60bb      	str	r3, [r7, #8]
		ifc      = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    be1c:	68bb      	ldr	r3, [r7, #8]
    be1e:	68f9      	ldr	r1, [r7, #12]
    be20:	2204      	movs	r2, #4
    be22:	4618      	mov	r0, r3
    be24:	4b2d      	ldr	r3, [pc, #180]	; (bedc <usbdc_set_interface+0x134>)
    be26:	4798      	blx	r3
    be28:	6138      	str	r0, [r7, #16]
		if (NULL == ifc) {
    be2a:	693b      	ldr	r3, [r7, #16]
    be2c:	2b00      	cmp	r3, #0
    be2e:	d101      	bne.n	be34 <usbdc_set_interface+0x8c>
			return false;
    be30:	2300      	movs	r3, #0
    be32:	e049      	b.n	bec8 <usbdc_set_interface+0x120>
	while (ifc[2] != ifc_id || ifc[3] != alt_set) {
    be34:	693b      	ldr	r3, [r7, #16]
    be36:	3302      	adds	r3, #2
    be38:	781b      	ldrb	r3, [r3, #0]
    be3a:	b29b      	uxth	r3, r3
    be3c:	88ba      	ldrh	r2, [r7, #4]
    be3e:	429a      	cmp	r2, r3
    be40:	d1e6      	bne.n	be10 <usbdc_set_interface+0x68>
    be42:	693b      	ldr	r3, [r7, #16]
    be44:	3303      	adds	r3, #3
    be46:	781b      	ldrb	r3, [r3, #0]
    be48:	b29b      	uxth	r3, r3
    be4a:	88fa      	ldrh	r2, [r7, #6]
    be4c:	429a      	cmp	r2, r3
    be4e:	d1df      	bne.n	be10 <usbdc_set_interface+0x68>
		}
	}

	desc.sod = ifc;
    be50:	693b      	ldr	r3, [r7, #16]
    be52:	60bb      	str	r3, [r7, #8]
	func     = (struct usbdf_driver *)usbdc.func_list.head;
    be54:	4b1e      	ldr	r3, [pc, #120]	; (bed0 <usbdc_set_interface+0x128>)
    be56:	691b      	ldr	r3, [r3, #16]
    be58:	617b      	str	r3, [r7, #20]

	while (NULL != func) {
    be5a:	e031      	b.n	bec0 <usbdc_set_interface+0x118>
		if (func->ctrl(func, USBDF_DISABLE, &desc)) {
    be5c:	697b      	ldr	r3, [r7, #20]
    be5e:	685b      	ldr	r3, [r3, #4]
    be60:	f107 0208 	add.w	r2, r7, #8
    be64:	2101      	movs	r1, #1
    be66:	6978      	ldr	r0, [r7, #20]
    be68:	4798      	blx	r3
    be6a:	4603      	mov	r3, r0
    be6c:	2b00      	cmp	r3, #0
    be6e:	d003      	beq.n	be78 <usbdc_set_interface+0xd0>
			func = func->next;
    be70:	697b      	ldr	r3, [r7, #20]
    be72:	681b      	ldr	r3, [r3, #0]
    be74:	617b      	str	r3, [r7, #20]
    be76:	e023      	b.n	bec0 <usbdc_set_interface+0x118>
		} else if (ERR_NONE == func->ctrl(func, USBDF_ENABLE, &desc)) {
    be78:	697b      	ldr	r3, [r7, #20]
    be7a:	685b      	ldr	r3, [r3, #4]
    be7c:	f107 0208 	add.w	r2, r7, #8
    be80:	2100      	movs	r1, #0
    be82:	6978      	ldr	r0, [r7, #20]
    be84:	4798      	blx	r3
    be86:	4603      	mov	r3, r0
    be88:	2b00      	cmp	r3, #0
    be8a:	d117      	bne.n	bebc <usbdc_set_interface+0x114>
			if (alt_set) {
    be8c:	88fb      	ldrh	r3, [r7, #6]
    be8e:	2b00      	cmp	r3, #0
    be90:	d00c      	beq.n	beac <usbdc_set_interface+0x104>
				/* Alternate settings are used from now on */
				usbdc.ifc_alt_map |= 1 << ifc_id;
    be92:	4b0f      	ldr	r3, [pc, #60]	; (bed0 <usbdc_set_interface+0x128>)
    be94:	7f5b      	ldrb	r3, [r3, #29]
    be96:	b25a      	sxtb	r2, r3
    be98:	88bb      	ldrh	r3, [r7, #4]
    be9a:	2101      	movs	r1, #1
    be9c:	fa01 f303 	lsl.w	r3, r1, r3
    bea0:	b25b      	sxtb	r3, r3
    bea2:	4313      	orrs	r3, r2
    bea4:	b25b      	sxtb	r3, r3
    bea6:	b2da      	uxtb	r2, r3
    bea8:	4b09      	ldr	r3, [pc, #36]	; (bed0 <usbdc_set_interface+0x128>)
    beaa:	775a      	strb	r2, [r3, #29]
			}
			usbdc_xfer(0, NULL, 0, 0);
    beac:	2300      	movs	r3, #0
    beae:	2200      	movs	r2, #0
    beb0:	2100      	movs	r1, #0
    beb2:	2000      	movs	r0, #0
    beb4:	4c0b      	ldr	r4, [pc, #44]	; (bee4 <usbdc_set_interface+0x13c>)
    beb6:	47a0      	blx	r4
			return true;
    beb8:	2301      	movs	r3, #1
    beba:	e005      	b.n	bec8 <usbdc_set_interface+0x120>
		} else {
			return false;
    bebc:	2300      	movs	r3, #0
    bebe:	e003      	b.n	bec8 <usbdc_set_interface+0x120>
	while (NULL != func) {
    bec0:	697b      	ldr	r3, [r7, #20]
    bec2:	2b00      	cmp	r3, #0
    bec4:	d1ca      	bne.n	be5c <usbdc_set_interface+0xb4>
		}
	}

	return false;
    bec6:	2300      	movs	r3, #0
}
    bec8:	4618      	mov	r0, r3
    beca:	371c      	adds	r7, #28
    becc:	46bd      	mov	sp, r7
    bece:	bd90      	pop	{r4, r7, pc}
    bed0:	200010a0 	.word	0x200010a0
    bed4:	0000c60d 	.word	0x0000c60d
    bed8:	0000b7b9 	.word	0x0000b7b9
    bedc:	0000c54d 	.word	0x0000c54d
    bee0:	0000b795 	.word	0x0000b795
    bee4:	0000c2bd 	.word	0x0000c2bd

0000bee8 <usbdc_set_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_set_req(const uint8_t ep, struct usb_req *req)
{
    bee8:	b590      	push	{r4, r7, lr}
    beea:	b083      	sub	sp, #12
    beec:	af00      	add	r7, sp, #0
    beee:	4603      	mov	r3, r0
    bef0:	6039      	str	r1, [r7, #0]
    bef2:	71fb      	strb	r3, [r7, #7]
	switch (req->bRequest) {
    bef4:	683b      	ldr	r3, [r7, #0]
    bef6:	785b      	ldrb	r3, [r3, #1]
    bef8:	3b01      	subs	r3, #1
    befa:	2b0a      	cmp	r3, #10
    befc:	d85b      	bhi.n	bfb6 <usbdc_set_req+0xce>
    befe:	a201      	add	r2, pc, #4	; (adr r2, bf04 <usbdc_set_req+0x1c>)
    bf00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    bf04:	0000bf83 	.word	0x0000bf83
    bf08:	0000bfb7 	.word	0x0000bfb7
    bf0c:	0000bf91 	.word	0x0000bf91
    bf10:	0000bfb7 	.word	0x0000bfb7
    bf14:	0000bf31 	.word	0x0000bf31
    bf18:	0000bfb7 	.word	0x0000bfb7
    bf1c:	0000bfb7 	.word	0x0000bfb7
    bf20:	0000bfb7 	.word	0x0000bfb7
    bf24:	0000bf4b 	.word	0x0000bf4b
    bf28:	0000bfb7 	.word	0x0000bfb7
    bf2c:	0000bf9f 	.word	0x0000bf9f
	case USB_REQ_SET_ADDRESS:
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    bf30:	79f8      	ldrb	r0, [r7, #7]
    bf32:	2301      	movs	r3, #1
    bf34:	2200      	movs	r2, #0
    bf36:	2100      	movs	r1, #0
    bf38:	4c21      	ldr	r4, [pc, #132]	; (bfc0 <usbdc_set_req+0xd8>)
    bf3a:	47a0      	blx	r4
    bf3c:	4603      	mov	r3, r0
    bf3e:	2b00      	cmp	r3, #0
    bf40:	bf0c      	ite	eq
    bf42:	2301      	moveq	r3, #1
    bf44:	2300      	movne	r3, #0
    bf46:	b2db      	uxtb	r3, r3
    bf48:	e036      	b.n	bfb8 <usbdc_set_req+0xd0>
	case USB_REQ_SET_CONFIG:
		if (!usbdc_set_config(req->wValue)) {
    bf4a:	683b      	ldr	r3, [r7, #0]
    bf4c:	885b      	ldrh	r3, [r3, #2]
    bf4e:	b29b      	uxth	r3, r3
    bf50:	b2db      	uxtb	r3, r3
    bf52:	4618      	mov	r0, r3
    bf54:	4b1b      	ldr	r3, [pc, #108]	; (bfc4 <usbdc_set_req+0xdc>)
    bf56:	4798      	blx	r3
    bf58:	4603      	mov	r3, r0
    bf5a:	f083 0301 	eor.w	r3, r3, #1
    bf5e:	b2db      	uxtb	r3, r3
    bf60:	2b00      	cmp	r3, #0
    bf62:	d001      	beq.n	bf68 <usbdc_set_req+0x80>
			return false;
    bf64:	2300      	movs	r3, #0
    bf66:	e027      	b.n	bfb8 <usbdc_set_req+0xd0>
		}
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    bf68:	79f8      	ldrb	r0, [r7, #7]
    bf6a:	2301      	movs	r3, #1
    bf6c:	2200      	movs	r2, #0
    bf6e:	2100      	movs	r1, #0
    bf70:	4c13      	ldr	r4, [pc, #76]	; (bfc0 <usbdc_set_req+0xd8>)
    bf72:	47a0      	blx	r4
    bf74:	4603      	mov	r3, r0
    bf76:	2b00      	cmp	r3, #0
    bf78:	bf0c      	ite	eq
    bf7a:	2301      	moveq	r3, #1
    bf7c:	2300      	movne	r3, #0
    bf7e:	b2db      	uxtb	r3, r3
    bf80:	e01a      	b.n	bfb8 <usbdc_set_req+0xd0>
	case USB_REQ_CLEAR_FTR:
		return usbdc_clear_ftr_req(ep, req);
    bf82:	79fb      	ldrb	r3, [r7, #7]
    bf84:	6839      	ldr	r1, [r7, #0]
    bf86:	4618      	mov	r0, r3
    bf88:	4b0f      	ldr	r3, [pc, #60]	; (bfc8 <usbdc_set_req+0xe0>)
    bf8a:	4798      	blx	r3
    bf8c:	4603      	mov	r3, r0
    bf8e:	e013      	b.n	bfb8 <usbdc_set_req+0xd0>
	case USB_REQ_SET_FTR:
		return usbdc_set_ftr_req(ep, req);
    bf90:	79fb      	ldrb	r3, [r7, #7]
    bf92:	6839      	ldr	r1, [r7, #0]
    bf94:	4618      	mov	r0, r3
    bf96:	4b0d      	ldr	r3, [pc, #52]	; (bfcc <usbdc_set_req+0xe4>)
    bf98:	4798      	blx	r3
    bf9a:	4603      	mov	r3, r0
    bf9c:	e00c      	b.n	bfb8 <usbdc_set_req+0xd0>
	case USB_REQ_SET_INTERFACE:
		return usbdc_set_interface(req->wValue, req->wIndex);
    bf9e:	683b      	ldr	r3, [r7, #0]
    bfa0:	885b      	ldrh	r3, [r3, #2]
    bfa2:	b29a      	uxth	r2, r3
    bfa4:	683b      	ldr	r3, [r7, #0]
    bfa6:	889b      	ldrh	r3, [r3, #4]
    bfa8:	b29b      	uxth	r3, r3
    bfaa:	4619      	mov	r1, r3
    bfac:	4610      	mov	r0, r2
    bfae:	4b08      	ldr	r3, [pc, #32]	; (bfd0 <usbdc_set_req+0xe8>)
    bfb0:	4798      	blx	r3
    bfb2:	4603      	mov	r3, r0
    bfb4:	e000      	b.n	bfb8 <usbdc_set_req+0xd0>
	default:
		return false;
    bfb6:	2300      	movs	r3, #0
	}
}
    bfb8:	4618      	mov	r0, r3
    bfba:	370c      	adds	r7, #12
    bfbc:	46bd      	mov	sp, r7
    bfbe:	bd90      	pop	{r4, r7, pc}
    bfc0:	0000c2bd 	.word	0x0000c2bd
    bfc4:	0000bc9d 	.word	0x0000bc9d
    bfc8:	0000bbb9 	.word	0x0000bbb9
    bfcc:	0000bc11 	.word	0x0000bc11
    bfd0:	0000bda9 	.word	0x0000bda9

0000bfd4 <usbdc_sof_notify>:

/** Invoke all registered SOF callbacks. */
static void usbdc_sof_notify(void)
{
    bfd4:	b580      	push	{r7, lr}
    bfd6:	b082      	sub	sp, #8
    bfd8:	af00      	add	r7, sp, #0
	struct usbdc_sof_handler *sof = (struct usbdc_sof_handler *)usbdc.handlers.sof_list.head;
    bfda:	4b0a      	ldr	r3, [pc, #40]	; (c004 <usbdc_sof_notify+0x30>)
    bfdc:	685b      	ldr	r3, [r3, #4]
    bfde:	607b      	str	r3, [r7, #4]

	while (sof != NULL) {
    bfe0:	e009      	b.n	bff6 <usbdc_sof_notify+0x22>
		if (NULL != sof->cb) {
    bfe2:	687b      	ldr	r3, [r7, #4]
    bfe4:	685b      	ldr	r3, [r3, #4]
    bfe6:	2b00      	cmp	r3, #0
    bfe8:	d002      	beq.n	bff0 <usbdc_sof_notify+0x1c>
			sof->cb();
    bfea:	687b      	ldr	r3, [r7, #4]
    bfec:	685b      	ldr	r3, [r3, #4]
    bfee:	4798      	blx	r3
		}
		sof = sof->next;
    bff0:	687b      	ldr	r3, [r7, #4]
    bff2:	681b      	ldr	r3, [r3, #0]
    bff4:	607b      	str	r3, [r7, #4]
	while (sof != NULL) {
    bff6:	687b      	ldr	r3, [r7, #4]
    bff8:	2b00      	cmp	r3, #0
    bffa:	d1f2      	bne.n	bfe2 <usbdc_sof_notify+0xe>
	}
}
    bffc:	bf00      	nop
    bffe:	3708      	adds	r7, #8
    c000:	46bd      	mov	sp, r7
    c002:	bd80      	pop	{r7, pc}
    c004:	200010a0 	.word	0x200010a0

0000c008 <usbdc_change_notify>:

/** Invoke all registered Change notification callbacks. */
static void usbdc_change_notify(enum usbdc_change_type change, uint32_t value)
{
    c008:	b580      	push	{r7, lr}
    c00a:	b084      	sub	sp, #16
    c00c:	af00      	add	r7, sp, #0
    c00e:	4603      	mov	r3, r0
    c010:	6039      	str	r1, [r7, #0]
    c012:	71fb      	strb	r3, [r7, #7]
	struct usbdc_change_handler *cg = (struct usbdc_change_handler *)usbdc.handlers.change_list.head;
    c014:	4b0b      	ldr	r3, [pc, #44]	; (c044 <usbdc_change_notify+0x3c>)
    c016:	68db      	ldr	r3, [r3, #12]
    c018:	60fb      	str	r3, [r7, #12]

	while (cg != NULL) {
    c01a:	e00c      	b.n	c036 <usbdc_change_notify+0x2e>
		if (NULL != cg->cb) {
    c01c:	68fb      	ldr	r3, [r7, #12]
    c01e:	685b      	ldr	r3, [r3, #4]
    c020:	2b00      	cmp	r3, #0
    c022:	d005      	beq.n	c030 <usbdc_change_notify+0x28>
			cg->cb(change, value);
    c024:	68fb      	ldr	r3, [r7, #12]
    c026:	685b      	ldr	r3, [r3, #4]
    c028:	79fa      	ldrb	r2, [r7, #7]
    c02a:	6839      	ldr	r1, [r7, #0]
    c02c:	4610      	mov	r0, r2
    c02e:	4798      	blx	r3
		}
		cg = cg->next;
    c030:	68fb      	ldr	r3, [r7, #12]
    c032:	681b      	ldr	r3, [r3, #0]
    c034:	60fb      	str	r3, [r7, #12]
	while (cg != NULL) {
    c036:	68fb      	ldr	r3, [r7, #12]
    c038:	2b00      	cmp	r3, #0
    c03a:	d1ef      	bne.n	c01c <usbdc_change_notify+0x14>
	}
}
    c03c:	bf00      	nop
    c03e:	3710      	adds	r7, #16
    c040:	46bd      	mov	sp, r7
    c042:	bd80      	pop	{r7, pc}
    c044:	200010a0 	.word	0x200010a0

0000c048 <usbdc_request_handler>:

/** Invoke all registered request callbacks until request handled. */
static int32_t usbdc_request_handler(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    c048:	b580      	push	{r7, lr}
    c04a:	b084      	sub	sp, #16
    c04c:	af00      	add	r7, sp, #0
    c04e:	4603      	mov	r3, r0
    c050:	6039      	str	r1, [r7, #0]
    c052:	71fb      	strb	r3, [r7, #7]
    c054:	4613      	mov	r3, r2
    c056:	71bb      	strb	r3, [r7, #6]
	struct usbdc_req_handler *h = (struct usbdc_req_handler *)usbdc.handlers.req_list.head;
    c058:	4b12      	ldr	r3, [pc, #72]	; (c0a4 <usbdc_request_handler+0x5c>)
    c05a:	689b      	ldr	r3, [r3, #8]
    c05c:	60fb      	str	r3, [r7, #12]
	int32_t                   rc;

	while (h != NULL) {
    c05e:	e019      	b.n	c094 <usbdc_request_handler+0x4c>
		if (NULL != h->cb) {
    c060:	68fb      	ldr	r3, [r7, #12]
    c062:	685b      	ldr	r3, [r3, #4]
    c064:	2b00      	cmp	r3, #0
    c066:	d012      	beq.n	c08e <usbdc_request_handler+0x46>
			rc = h->cb(ep, req, stage);
    c068:	68fb      	ldr	r3, [r7, #12]
    c06a:	685b      	ldr	r3, [r3, #4]
    c06c:	79ba      	ldrb	r2, [r7, #6]
    c06e:	79f8      	ldrb	r0, [r7, #7]
    c070:	6839      	ldr	r1, [r7, #0]
    c072:	4798      	blx	r3
    c074:	60b8      	str	r0, [r7, #8]
			if (0 == rc) {
    c076:	68bb      	ldr	r3, [r7, #8]
    c078:	2b00      	cmp	r3, #0
    c07a:	d101      	bne.n	c080 <usbdc_request_handler+0x38>
				return true;
    c07c:	2301      	movs	r3, #1
    c07e:	e00d      	b.n	c09c <usbdc_request_handler+0x54>
			} else if (ERR_NOT_FOUND != rc) {
    c080:	68bb      	ldr	r3, [r7, #8]
    c082:	f113 0f0a 	cmn.w	r3, #10
    c086:	d002      	beq.n	c08e <usbdc_request_handler+0x46>
				return -1;
    c088:	f04f 33ff 	mov.w	r3, #4294967295
    c08c:	e006      	b.n	c09c <usbdc_request_handler+0x54>
			}
		}
		h = h->next;
    c08e:	68fb      	ldr	r3, [r7, #12]
    c090:	681b      	ldr	r3, [r3, #0]
    c092:	60fb      	str	r3, [r7, #12]
	while (h != NULL) {
    c094:	68fb      	ldr	r3, [r7, #12]
    c096:	2b00      	cmp	r3, #0
    c098:	d1e2      	bne.n	c060 <usbdc_request_handler+0x18>
	}
	return false;
    c09a:	2300      	movs	r3, #0
}
    c09c:	4618      	mov	r0, r3
    c09e:	3710      	adds	r7, #16
    c0a0:	46bd      	mov	sp, r7
    c0a2:	bd80      	pop	{r7, pc}
    c0a4:	200010a0 	.word	0x200010a0

0000c0a8 <usbd_sof_cb>:

/**
 * \brief Callback invoked on USB device SOF
 */
static void usbd_sof_cb(void)
{
    c0a8:	b580      	push	{r7, lr}
    c0aa:	af00      	add	r7, sp, #0
	usbdc_sof_notify();
    c0ac:	4b01      	ldr	r3, [pc, #4]	; (c0b4 <usbd_sof_cb+0xc>)
    c0ae:	4798      	blx	r3
}
    c0b0:	bf00      	nop
    c0b2:	bd80      	pop	{r7, pc}
    c0b4:	0000bfd5 	.word	0x0000bfd5

0000c0b8 <usbdc_cb_ctl_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_cb_ctl_req(const uint8_t ep, struct usb_req *req)
{
    c0b8:	b580      	push	{r7, lr}
    c0ba:	b082      	sub	sp, #8
    c0bc:	af00      	add	r7, sp, #0
    c0be:	4603      	mov	r3, r0
    c0c0:	6039      	str	r1, [r7, #0]
    c0c2:	71fb      	strb	r3, [r7, #7]
	switch (usbdc_request_handler(ep, req, USB_SETUP_STAGE)) {
    c0c4:	79fb      	ldrb	r3, [r7, #7]
    c0c6:	2200      	movs	r2, #0
    c0c8:	6839      	ldr	r1, [r7, #0]
    c0ca:	4618      	mov	r0, r3
    c0cc:	4b14      	ldr	r3, [pc, #80]	; (c120 <usbdc_cb_ctl_req+0x68>)
    c0ce:	4798      	blx	r3
    c0d0:	4603      	mov	r3, r0
    c0d2:	f1b3 3fff 	cmp.w	r3, #4294967295
    c0d6:	d00b      	beq.n	c0f0 <usbdc_cb_ctl_req+0x38>
    c0d8:	2b01      	cmp	r3, #1
    c0da:	d007      	beq.n	c0ec <usbdc_cb_ctl_req+0x34>
	case true:
		return true;
	case -1:
		return false;
	default:
		break;
    c0dc:	bf00      	nop
	}

	// STD request handling
	switch (req->bmRequestType & (USB_REQT_TYPE_MASK | USB_REQT_DIR_IN)) {
    c0de:	683b      	ldr	r3, [r7, #0]
    c0e0:	781b      	ldrb	r3, [r3, #0]
    c0e2:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
    c0e6:	2b00      	cmp	r3, #0
    c0e8:	d007      	beq.n	c0fa <usbdc_cb_ctl_req+0x42>
    c0ea:	e003      	b.n	c0f4 <usbdc_cb_ctl_req+0x3c>
		return true;
    c0ec:	2301      	movs	r3, #1
    c0ee:	e013      	b.n	c118 <usbdc_cb_ctl_req+0x60>
		return false;
    c0f0:	2300      	movs	r3, #0
    c0f2:	e011      	b.n	c118 <usbdc_cb_ctl_req+0x60>
	switch (req->bmRequestType & (USB_REQT_TYPE_MASK | USB_REQT_DIR_IN)) {
    c0f4:	2b80      	cmp	r3, #128	; 0x80
    c0f6:	d007      	beq.n	c108 <usbdc_cb_ctl_req+0x50>
    c0f8:	e00d      	b.n	c116 <usbdc_cb_ctl_req+0x5e>
	case USB_REQT_TYPE_STANDARD:
		return usbdc_set_req(ep, req);
    c0fa:	79fb      	ldrb	r3, [r7, #7]
    c0fc:	6839      	ldr	r1, [r7, #0]
    c0fe:	4618      	mov	r0, r3
    c100:	4b08      	ldr	r3, [pc, #32]	; (c124 <usbdc_cb_ctl_req+0x6c>)
    c102:	4798      	blx	r3
    c104:	4603      	mov	r3, r0
    c106:	e007      	b.n	c118 <usbdc_cb_ctl_req+0x60>
	case (USB_REQT_TYPE_STANDARD | USB_REQT_DIR_IN):
		return usbdc_get_req(ep, req);
    c108:	79fb      	ldrb	r3, [r7, #7]
    c10a:	6839      	ldr	r1, [r7, #0]
    c10c:	4618      	mov	r0, r3
    c10e:	4b06      	ldr	r3, [pc, #24]	; (c128 <usbdc_cb_ctl_req+0x70>)
    c110:	4798      	blx	r3
    c112:	4603      	mov	r3, r0
    c114:	e000      	b.n	c118 <usbdc_cb_ctl_req+0x60>
	default:
		return false;
    c116:	2300      	movs	r3, #0
	}
}
    c118:	4618      	mov	r0, r3
    c11a:	3708      	adds	r7, #8
    c11c:	46bd      	mov	sp, r7
    c11e:	bd80      	pop	{r7, pc}
    c120:	0000c049 	.word	0x0000c049
    c124:	0000bee9 	.word	0x0000bee9
    c128:	0000bb11 	.word	0x0000bb11

0000c12c <usbdc_ctrl_status_end>:
/**
 * \brief When control status stage is end
 * \param[in] req Pointer to the request.
 */
static void usbdc_ctrl_status_end(const struct usb_req *req)
{
    c12c:	b580      	push	{r7, lr}
    c12e:	b082      	sub	sp, #8
    c130:	af00      	add	r7, sp, #0
    c132:	6078      	str	r0, [r7, #4]
	if (req->bmRequestType != USB_REQT_TYPE_STANDARD) {
    c134:	687b      	ldr	r3, [r7, #4]
    c136:	781b      	ldrb	r3, [r3, #0]
    c138:	2b00      	cmp	r3, #0
    c13a:	d135      	bne.n	c1a8 <usbdc_ctrl_status_end+0x7c>
		return;
	}
	switch (req->bRequest) {
    c13c:	687b      	ldr	r3, [r7, #4]
    c13e:	785b      	ldrb	r3, [r3, #1]
    c140:	2b05      	cmp	r3, #5
    c142:	d019      	beq.n	c178 <usbdc_ctrl_status_end+0x4c>
    c144:	2b09      	cmp	r3, #9
    c146:	d000      	beq.n	c14a <usbdc_ctrl_status_end+0x1e>
		usbdc_set_address(req->wValue);
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
		break;
	default:
		break;
    c148:	e02f      	b.n	c1aa <usbdc_ctrl_status_end+0x7e>
		usbdc.cfg_value = req->wValue;
    c14a:	687b      	ldr	r3, [r7, #4]
    c14c:	885b      	ldrh	r3, [r3, #2]
    c14e:	b29b      	uxth	r3, r3
    c150:	b2da      	uxtb	r2, r3
    c152:	4b17      	ldr	r3, [pc, #92]	; (c1b0 <usbdc_ctrl_status_end+0x84>)
    c154:	76da      	strb	r2, [r3, #27]
		usbdc.state     = req->wValue ? USBD_S_CONFIG : USBD_S_ADDRESS;
    c156:	687b      	ldr	r3, [r7, #4]
    c158:	885b      	ldrh	r3, [r3, #2]
    c15a:	b29b      	uxth	r3, r3
    c15c:	2b00      	cmp	r3, #0
    c15e:	d001      	beq.n	c164 <usbdc_ctrl_status_end+0x38>
    c160:	2204      	movs	r2, #4
    c162:	e000      	b.n	c166 <usbdc_ctrl_status_end+0x3a>
    c164:	2203      	movs	r2, #3
    c166:	4b12      	ldr	r3, [pc, #72]	; (c1b0 <usbdc_ctrl_status_end+0x84>)
    c168:	769a      	strb	r2, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
    c16a:	4b11      	ldr	r3, [pc, #68]	; (c1b0 <usbdc_ctrl_status_end+0x84>)
    c16c:	7e9b      	ldrb	r3, [r3, #26]
    c16e:	4619      	mov	r1, r3
    c170:	2001      	movs	r0, #1
    c172:	4b10      	ldr	r3, [pc, #64]	; (c1b4 <usbdc_ctrl_status_end+0x88>)
    c174:	4798      	blx	r3
		break;
    c176:	e018      	b.n	c1aa <usbdc_ctrl_status_end+0x7e>
		usbdc_set_address(req->wValue);
    c178:	687b      	ldr	r3, [r7, #4]
    c17a:	885b      	ldrh	r3, [r3, #2]
    c17c:	b29b      	uxth	r3, r3
    c17e:	b2db      	uxtb	r3, r3
    c180:	4618      	mov	r0, r3
    c182:	4b0d      	ldr	r3, [pc, #52]	; (c1b8 <usbdc_ctrl_status_end+0x8c>)
    c184:	4798      	blx	r3
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
    c186:	687b      	ldr	r3, [r7, #4]
    c188:	885b      	ldrh	r3, [r3, #2]
    c18a:	b29b      	uxth	r3, r3
    c18c:	2b00      	cmp	r3, #0
    c18e:	d001      	beq.n	c194 <usbdc_ctrl_status_end+0x68>
    c190:	2203      	movs	r2, #3
    c192:	e000      	b.n	c196 <usbdc_ctrl_status_end+0x6a>
    c194:	2202      	movs	r2, #2
    c196:	4b06      	ldr	r3, [pc, #24]	; (c1b0 <usbdc_ctrl_status_end+0x84>)
    c198:	769a      	strb	r2, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
    c19a:	4b05      	ldr	r3, [pc, #20]	; (c1b0 <usbdc_ctrl_status_end+0x84>)
    c19c:	7e9b      	ldrb	r3, [r3, #26]
    c19e:	4619      	mov	r1, r3
    c1a0:	2001      	movs	r0, #1
    c1a2:	4b04      	ldr	r3, [pc, #16]	; (c1b4 <usbdc_ctrl_status_end+0x88>)
    c1a4:	4798      	blx	r3
		break;
    c1a6:	e000      	b.n	c1aa <usbdc_ctrl_status_end+0x7e>
		return;
    c1a8:	bf00      	nop
	}
}
    c1aa:	3708      	adds	r7, #8
    c1ac:	46bd      	mov	sp, r7
    c1ae:	bd80      	pop	{r7, pc}
    c1b0:	200010a0 	.word	0x200010a0
    c1b4:	0000c009 	.word	0x0000c009
    c1b8:	0000bd89 	.word	0x0000bd89

0000c1bc <usbdc_ctrl_data_end>:
/**
 * \brief When control data stage is end
 * \param[in] req Pointer to the request.
 */
static bool usbdc_ctrl_data_end(struct usb_req *req)
{
    c1bc:	b580      	push	{r7, lr}
    c1be:	b082      	sub	sp, #8
    c1c0:	af00      	add	r7, sp, #0
    c1c2:	6078      	str	r0, [r7, #4]
	usbdc_request_handler(0, req, USB_DATA_STAGE);
    c1c4:	2201      	movs	r2, #1
    c1c6:	6879      	ldr	r1, [r7, #4]
    c1c8:	2000      	movs	r0, #0
    c1ca:	4b03      	ldr	r3, [pc, #12]	; (c1d8 <usbdc_ctrl_data_end+0x1c>)
    c1cc:	4798      	blx	r3
	return false;
    c1ce:	2300      	movs	r3, #0
}
    c1d0:	4618      	mov	r0, r3
    c1d2:	3708      	adds	r7, #8
    c1d4:	46bd      	mov	sp, r7
    c1d6:	bd80      	pop	{r7, pc}
    c1d8:	0000c049 	.word	0x0000c049

0000c1dc <usbdc_cb_ctl_done>:
 * \return Data has error or not.
 * \retval true There is data error, protocol error.
 * \retval false There is no data error.
 */
static bool usbdc_cb_ctl_done(const uint8_t ep, const enum usb_xfer_code code, struct usb_req *req)
{
    c1dc:	b580      	push	{r7, lr}
    c1de:	b082      	sub	sp, #8
    c1e0:	af00      	add	r7, sp, #0
    c1e2:	4603      	mov	r3, r0
    c1e4:	603a      	str	r2, [r7, #0]
    c1e6:	71fb      	strb	r3, [r7, #7]
    c1e8:	460b      	mov	r3, r1
    c1ea:	71bb      	strb	r3, [r7, #6]
	(void)ep;

	switch (code) {
    c1ec:	79bb      	ldrb	r3, [r7, #6]
    c1ee:	2b00      	cmp	r3, #0
    c1f0:	d002      	beq.n	c1f8 <usbdc_cb_ctl_done+0x1c>
    c1f2:	2b01      	cmp	r3, #1
    c1f4:	d004      	beq.n	c200 <usbdc_cb_ctl_done+0x24>
		usbdc_ctrl_status_end(req);
		break;
	case USB_XFER_DATA:
		return usbdc_ctrl_data_end(req);
	default:
		break;
    c1f6:	e008      	b.n	c20a <usbdc_cb_ctl_done+0x2e>
		usbdc_ctrl_status_end(req);
    c1f8:	6838      	ldr	r0, [r7, #0]
    c1fa:	4b06      	ldr	r3, [pc, #24]	; (c214 <usbdc_cb_ctl_done+0x38>)
    c1fc:	4798      	blx	r3
		break;
    c1fe:	e004      	b.n	c20a <usbdc_cb_ctl_done+0x2e>
		return usbdc_ctrl_data_end(req);
    c200:	6838      	ldr	r0, [r7, #0]
    c202:	4b05      	ldr	r3, [pc, #20]	; (c218 <usbdc_cb_ctl_done+0x3c>)
    c204:	4798      	blx	r3
    c206:	4603      	mov	r3, r0
    c208:	e000      	b.n	c20c <usbdc_cb_ctl_done+0x30>
	}
	return false;
    c20a:	2300      	movs	r3, #0
}
    c20c:	4618      	mov	r0, r3
    c20e:	3708      	adds	r7, #8
    c210:	46bd      	mov	sp, r7
    c212:	bd80      	pop	{r7, pc}
    c214:	0000c12d 	.word	0x0000c12d
    c218:	0000c1bd 	.word	0x0000c1bd

0000c21c <usbdc_reset>:

/**
 * \brief USB Device Core Reset
 */
void usbdc_reset(void)
{
    c21c:	b580      	push	{r7, lr}
    c21e:	af00      	add	r7, sp, #0
	usbdc_unconfig();
    c220:	4b10      	ldr	r3, [pc, #64]	; (c264 <usbdc_reset+0x48>)
    c222:	4798      	blx	r3

	usbdc.state       = USBD_S_DEFAULT;
    c224:	4b10      	ldr	r3, [pc, #64]	; (c268 <usbdc_reset+0x4c>)
    c226:	2202      	movs	r2, #2
    c228:	769a      	strb	r2, [r3, #26]
	usbdc.cfg_value   = 0;
    c22a:	4b0f      	ldr	r3, [pc, #60]	; (c268 <usbdc_reset+0x4c>)
    c22c:	2200      	movs	r2, #0
    c22e:	76da      	strb	r2, [r3, #27]
	usbdc.ifc_alt_map = 0;
    c230:	4b0d      	ldr	r3, [pc, #52]	; (c268 <usbdc_reset+0x4c>)
    c232:	2200      	movs	r2, #0
    c234:	775a      	strb	r2, [r3, #29]

	// Setup EP0
	usb_d_ep_deinit(0);
    c236:	2000      	movs	r0, #0
    c238:	4b0c      	ldr	r3, [pc, #48]	; (c26c <usbdc_reset+0x50>)
    c23a:	4798      	blx	r3
	usb_d_ep0_init(usbdc.ctrl_size);
    c23c:	4b0a      	ldr	r3, [pc, #40]	; (c268 <usbdc_reset+0x4c>)
    c23e:	7f1b      	ldrb	r3, [r3, #28]
    c240:	4618      	mov	r0, r3
    c242:	4b0b      	ldr	r3, [pc, #44]	; (c270 <usbdc_reset+0x54>)
    c244:	4798      	blx	r3
	usb_d_ep_register_callback(0, USB_D_EP_CB_SETUP, (FUNC_PTR)usbdc_cb_ctl_req);
    c246:	4a0b      	ldr	r2, [pc, #44]	; (c274 <usbdc_reset+0x58>)
    c248:	2100      	movs	r1, #0
    c24a:	2000      	movs	r0, #0
    c24c:	4b0a      	ldr	r3, [pc, #40]	; (c278 <usbdc_reset+0x5c>)
    c24e:	4798      	blx	r3
	usb_d_ep_register_callback(0, USB_D_EP_CB_XFER, (FUNC_PTR)usbdc_cb_ctl_done);
    c250:	4a0a      	ldr	r2, [pc, #40]	; (c27c <usbdc_reset+0x60>)
    c252:	2102      	movs	r1, #2
    c254:	2000      	movs	r0, #0
    c256:	4b08      	ldr	r3, [pc, #32]	; (c278 <usbdc_reset+0x5c>)
    c258:	4798      	blx	r3
	usb_d_ep_enable(0);
    c25a:	2000      	movs	r0, #0
    c25c:	4b08      	ldr	r3, [pc, #32]	; (c280 <usbdc_reset+0x64>)
    c25e:	4798      	blx	r3
}
    c260:	bf00      	nop
    c262:	bd80      	pop	{r7, pc}
    c264:	0000bc69 	.word	0x0000bc69
    c268:	200010a0 	.word	0x200010a0
    c26c:	00002b5d 	.word	0x00002b5d
    c270:	00002a99 	.word	0x00002a99
    c274:	0000c0b9 	.word	0x0000c0b9
    c278:	00002e5d 	.word	0x00002e5d
    c27c:	0000c1dd 	.word	0x0000c1dd
    c280:	00002bad 	.word	0x00002bad

0000c284 <usbd_event_cb>:
 * \brief Callback invoked on USB device events
 * \param[in] ev Event code.
 * \param[in] param Event parameter for event handling.
 */
static void usbd_event_cb(const enum usb_event ev, const uint32_t param)
{
    c284:	b580      	push	{r7, lr}
    c286:	b082      	sub	sp, #8
    c288:	af00      	add	r7, sp, #0
    c28a:	4603      	mov	r3, r0
    c28c:	6039      	str	r1, [r7, #0]
    c28e:	71fb      	strb	r3, [r7, #7]
	(void)param;

	switch (ev) {
    c290:	79fb      	ldrb	r3, [r7, #7]
    c292:	2b00      	cmp	r3, #0
    c294:	d002      	beq.n	c29c <usbd_event_cb+0x18>
    c296:	2b01      	cmp	r3, #1
    c298:	d005      	beq.n	c2a6 <usbd_event_cb+0x22>
	case USB_EV_RESET:
		usbdc_reset();
		break;

	default:
		break;
    c29a:	e007      	b.n	c2ac <usbd_event_cb+0x28>
		usbdc_change_notify(USBDC_C_CONN, param);
    c29c:	6839      	ldr	r1, [r7, #0]
    c29e:	2000      	movs	r0, #0
    c2a0:	4b04      	ldr	r3, [pc, #16]	; (c2b4 <usbd_event_cb+0x30>)
    c2a2:	4798      	blx	r3
		break;
    c2a4:	e002      	b.n	c2ac <usbd_event_cb+0x28>
		usbdc_reset();
    c2a6:	4b04      	ldr	r3, [pc, #16]	; (c2b8 <usbd_event_cb+0x34>)
    c2a8:	4798      	blx	r3
		break;
    c2aa:	bf00      	nop
	}
}
    c2ac:	bf00      	nop
    c2ae:	3708      	adds	r7, #8
    c2b0:	46bd      	mov	sp, r7
    c2b2:	bd80      	pop	{r7, pc}
    c2b4:	0000c009 	.word	0x0000c009
    c2b8:	0000c21d 	.word	0x0000c21d

0000c2bc <usbdc_xfer>:

/**
 * \brief Issue USB device transfer
 */
int32_t usbdc_xfer(uint8_t ep, uint8_t *buf, uint32_t size, bool zlp)
{
    c2bc:	b580      	push	{r7, lr}
    c2be:	b088      	sub	sp, #32
    c2c0:	af00      	add	r7, sp, #0
    c2c2:	60b9      	str	r1, [r7, #8]
    c2c4:	607a      	str	r2, [r7, #4]
    c2c6:	461a      	mov	r2, r3
    c2c8:	4603      	mov	r3, r0
    c2ca:	73fb      	strb	r3, [r7, #15]
    c2cc:	4613      	mov	r3, r2
    c2ce:	73bb      	strb	r3, [r7, #14]
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    c2d0:	68bb      	ldr	r3, [r7, #8]
    c2d2:	617b      	str	r3, [r7, #20]
    c2d4:	687b      	ldr	r3, [r7, #4]
    c2d6:	61bb      	str	r3, [r7, #24]
    c2d8:	7bfb      	ldrb	r3, [r7, #15]
    c2da:	773b      	strb	r3, [r7, #28]
    c2dc:	7bbb      	ldrb	r3, [r7, #14]
    c2de:	777b      	strb	r3, [r7, #29]
	return usb_d_ep_transfer(&xfer);
    c2e0:	f107 0314 	add.w	r3, r7, #20
    c2e4:	4618      	mov	r0, r3
    c2e6:	4b03      	ldr	r3, [pc, #12]	; (c2f4 <usbdc_xfer+0x38>)
    c2e8:	4798      	blx	r3
    c2ea:	4603      	mov	r3, r0
}
    c2ec:	4618      	mov	r0, r3
    c2ee:	3720      	adds	r7, #32
    c2f0:	46bd      	mov	sp, r7
    c2f2:	bd80      	pop	{r7, pc}
    c2f4:	00002c1d 	.word	0x00002c1d

0000c2f8 <usbdc_register_handler>:

/**
 * \brief Register the handler
 */
void usbdc_register_handler(enum usbdc_handler_type type, const struct usbdc_handler *h)
{
    c2f8:	b580      	push	{r7, lr}
    c2fa:	b082      	sub	sp, #8
    c2fc:	af00      	add	r7, sp, #0
    c2fe:	4603      	mov	r3, r0
    c300:	6039      	str	r1, [r7, #0]
    c302:	71fb      	strb	r3, [r7, #7]
	switch (type) {
    c304:	79fb      	ldrb	r3, [r7, #7]
    c306:	2b01      	cmp	r3, #1
    c308:	d009      	beq.n	c31e <usbdc_register_handler+0x26>
    c30a:	2b02      	cmp	r3, #2
    c30c:	d00c      	beq.n	c328 <usbdc_register_handler+0x30>
    c30e:	2b00      	cmp	r3, #0
    c310:	d000      	beq.n	c314 <usbdc_register_handler+0x1c>
		break;
	case USBDC_HDL_CHANGE:
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
		break;
	default:
		break;
    c312:	e00e      	b.n	c332 <usbdc_register_handler+0x3a>
		list_insert_at_end(&usbdc.handlers.sof_list, (void *)h);
    c314:	6839      	ldr	r1, [r7, #0]
    c316:	4809      	ldr	r0, [pc, #36]	; (c33c <usbdc_register_handler+0x44>)
    c318:	4b09      	ldr	r3, [pc, #36]	; (c340 <usbdc_register_handler+0x48>)
    c31a:	4798      	blx	r3
		break;
    c31c:	e009      	b.n	c332 <usbdc_register_handler+0x3a>
		list_insert_at_end(&usbdc.handlers.req_list, (void *)h);
    c31e:	6839      	ldr	r1, [r7, #0]
    c320:	4808      	ldr	r0, [pc, #32]	; (c344 <usbdc_register_handler+0x4c>)
    c322:	4b07      	ldr	r3, [pc, #28]	; (c340 <usbdc_register_handler+0x48>)
    c324:	4798      	blx	r3
		break;
    c326:	e004      	b.n	c332 <usbdc_register_handler+0x3a>
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
    c328:	6839      	ldr	r1, [r7, #0]
    c32a:	4807      	ldr	r0, [pc, #28]	; (c348 <usbdc_register_handler+0x50>)
    c32c:	4b04      	ldr	r3, [pc, #16]	; (c340 <usbdc_register_handler+0x48>)
    c32e:	4798      	blx	r3
		break;
    c330:	bf00      	nop
	}
}
    c332:	bf00      	nop
    c334:	3708      	adds	r7, #8
    c336:	46bd      	mov	sp, r7
    c338:	bd80      	pop	{r7, pc}
    c33a:	bf00      	nop
    c33c:	200010a4 	.word	0x200010a4
    c340:	00002fb5 	.word	0x00002fb5
    c344:	200010a8 	.word	0x200010a8
    c348:	200010ac 	.word	0x200010ac

0000c34c <usbdc_init>:

/**
 * \brief Initialize the USB device core driver
 */
int32_t usbdc_init(uint8_t *ctrl_buf)
{
    c34c:	b580      	push	{r7, lr}
    c34e:	b084      	sub	sp, #16
    c350:	af00      	add	r7, sp, #0
    c352:	6078      	str	r0, [r7, #4]
	ASSERT(ctrl_buf);
    c354:	687b      	ldr	r3, [r7, #4]
    c356:	2b00      	cmp	r3, #0
    c358:	bf14      	ite	ne
    c35a:	2301      	movne	r3, #1
    c35c:	2300      	moveq	r3, #0
    c35e:	b2db      	uxtb	r3, r3
    c360:	f240 3255 	movw	r2, #853	; 0x355
    c364:	4910      	ldr	r1, [pc, #64]	; (c3a8 <usbdc_init+0x5c>)
    c366:	4618      	mov	r0, r3
    c368:	4b10      	ldr	r3, [pc, #64]	; (c3ac <usbdc_init+0x60>)
    c36a:	4798      	blx	r3

	int32_t rc;

	rc = usb_d_init();
    c36c:	4b10      	ldr	r3, [pc, #64]	; (c3b0 <usbdc_init+0x64>)
    c36e:	4798      	blx	r3
    c370:	60f8      	str	r0, [r7, #12]
	if (rc < 0) {
    c372:	68fb      	ldr	r3, [r7, #12]
    c374:	2b00      	cmp	r3, #0
    c376:	da01      	bge.n	c37c <usbdc_init+0x30>
		return rc;
    c378:	68fb      	ldr	r3, [r7, #12]
    c37a:	e010      	b.n	c39e <usbdc_init+0x52>
	}

	memset(&usbdc, 0, sizeof(usbdc));
    c37c:	2220      	movs	r2, #32
    c37e:	2100      	movs	r1, #0
    c380:	480c      	ldr	r0, [pc, #48]	; (c3b4 <usbdc_init+0x68>)
    c382:	4b0d      	ldr	r3, [pc, #52]	; (c3b8 <usbdc_init+0x6c>)
    c384:	4798      	blx	r3
	usbdc.ctrl_buf = ctrl_buf;
    c386:	4a0b      	ldr	r2, [pc, #44]	; (c3b4 <usbdc_init+0x68>)
    c388:	687b      	ldr	r3, [r7, #4]
    c38a:	6153      	str	r3, [r2, #20]
	usb_d_register_callback(USB_D_CB_SOF, (FUNC_PTR)usbd_sof_cb);
    c38c:	490b      	ldr	r1, [pc, #44]	; (c3bc <usbdc_init+0x70>)
    c38e:	2000      	movs	r0, #0
    c390:	4b0b      	ldr	r3, [pc, #44]	; (c3c0 <usbdc_init+0x74>)
    c392:	4798      	blx	r3
	usb_d_register_callback(USB_D_CB_EVENT, (FUNC_PTR)usbd_event_cb);
    c394:	490b      	ldr	r1, [pc, #44]	; (c3c4 <usbdc_init+0x78>)
    c396:	2001      	movs	r0, #1
    c398:	4b09      	ldr	r3, [pc, #36]	; (c3c0 <usbdc_init+0x74>)
    c39a:	4798      	blx	r3

	return 0;
    c39c:	2300      	movs	r3, #0
}
    c39e:	4618      	mov	r0, r3
    c3a0:	3710      	adds	r7, #16
    c3a2:	46bd      	mov	sp, r7
    c3a4:	bd80      	pop	{r7, pc}
    c3a6:	bf00      	nop
    c3a8:	00013208 	.word	0x00013208
    c3ac:	00002ed9 	.word	0x00002ed9
    c3b0:	00002985 	.word	0x00002985
    c3b4:	200010a0 	.word	0x200010a0
    c3b8:	00012c5d 	.word	0x00012c5d
    c3bc:	0000c0a9 	.word	0x0000c0a9
    c3c0:	00002a31 	.word	0x00002a31
    c3c4:	0000c285 	.word	0x0000c285

0000c3c8 <usbdc_register_function>:
 * \brief Register/unregister function support of a USB device function
 *
 * Must be invoked when USB device is stopped.
 */
void usbdc_register_function(struct usbdf_driver *func)
{
    c3c8:	b580      	push	{r7, lr}
    c3ca:	b082      	sub	sp, #8
    c3cc:	af00      	add	r7, sp, #0
    c3ce:	6078      	str	r0, [r7, #4]
	list_insert_at_end(&usbdc.func_list, func);
    c3d0:	6879      	ldr	r1, [r7, #4]
    c3d2:	4803      	ldr	r0, [pc, #12]	; (c3e0 <usbdc_register_function+0x18>)
    c3d4:	4b03      	ldr	r3, [pc, #12]	; (c3e4 <usbdc_register_function+0x1c>)
    c3d6:	4798      	blx	r3
}
    c3d8:	bf00      	nop
    c3da:	3708      	adds	r7, #8
    c3dc:	46bd      	mov	sp, r7
    c3de:	bd80      	pop	{r7, pc}
    c3e0:	200010b0 	.word	0x200010b0
    c3e4:	00002fb5 	.word	0x00002fb5

0000c3e8 <usbdc_start>:

/**
 * \brief Start the USB device driver with specific descriptors set
 */
int32_t usbdc_start(struct usbd_descriptors *desces)
{
    c3e8:	b580      	push	{r7, lr}
    c3ea:	b082      	sub	sp, #8
    c3ec:	af00      	add	r7, sp, #0
    c3ee:	6078      	str	r0, [r7, #4]
	if (usbdc.state >= USBD_S_POWER) {
    c3f0:	4b0f      	ldr	r3, [pc, #60]	; (c430 <usbdc_start+0x48>)
    c3f2:	7e9b      	ldrb	r3, [r3, #26]
    c3f4:	2b00      	cmp	r3, #0
    c3f6:	d002      	beq.n	c3fe <usbdc_start+0x16>
		return ERR_BUSY;
    c3f8:	f06f 0303 	mvn.w	r3, #3
    c3fc:	e013      	b.n	c426 <usbdc_start+0x3e>
	}

	if (desces) {
    c3fe:	687b      	ldr	r3, [r7, #4]
    c400:	2b00      	cmp	r3, #0
    c402:	d00e      	beq.n	c422 <usbdc_start+0x3a>
		usbdc.desces.ls_fs = desces;
    c404:	4a0a      	ldr	r2, [pc, #40]	; (c430 <usbdc_start+0x48>)
    c406:	687b      	ldr	r3, [r7, #4]
    c408:	6013      	str	r3, [r2, #0]
#endif
	} else {
		return ERR_BAD_DATA;
	}

	usbdc.ctrl_size = desces->sod[7];
    c40a:	687b      	ldr	r3, [r7, #4]
    c40c:	681b      	ldr	r3, [r3, #0]
    c40e:	79da      	ldrb	r2, [r3, #7]
    c410:	4b07      	ldr	r3, [pc, #28]	; (c430 <usbdc_start+0x48>)
    c412:	771a      	strb	r2, [r3, #28]
	usbdc.state     = USBD_S_POWER;
    c414:	4b06      	ldr	r3, [pc, #24]	; (c430 <usbdc_start+0x48>)
    c416:	2201      	movs	r2, #1
    c418:	769a      	strb	r2, [r3, #26]
	usb_d_enable();
    c41a:	4b06      	ldr	r3, [pc, #24]	; (c434 <usbdc_start+0x4c>)
    c41c:	4798      	blx	r3
	return ERR_NONE;
    c41e:	2300      	movs	r3, #0
    c420:	e001      	b.n	c426 <usbdc_start+0x3e>
		return ERR_BAD_DATA;
    c422:	f06f 0308 	mvn.w	r3, #8
}
    c426:	4618      	mov	r0, r3
    c428:	3708      	adds	r7, #8
    c42a:	46bd      	mov	sp, r7
    c42c:	bd80      	pop	{r7, pc}
    c42e:	bf00      	nop
    c430:	200010a0 	.word	0x200010a0
    c434:	00002a55 	.word	0x00002a55

0000c438 <usbdc_attach>:

/**
 * \brief Attach the USB device to host
 */
void usbdc_attach(void)
{
    c438:	b580      	push	{r7, lr}
    c43a:	af00      	add	r7, sp, #0
	usb_d_attach();
    c43c:	4b01      	ldr	r3, [pc, #4]	; (c444 <usbdc_attach+0xc>)
    c43e:	4798      	blx	r3
}
    c440:	bf00      	nop
    c442:	bd80      	pop	{r7, pc}
    c444:	00002a69 	.word	0x00002a69

0000c448 <usbdc_get_ctrl_buffer>:

/**
 * \brief Return USB Device endpoint0 buffer
 */
uint8_t *usbdc_get_ctrl_buffer(void)
{
    c448:	b480      	push	{r7}
    c44a:	af00      	add	r7, sp, #0
	return usbdc.ctrl_buf;
    c44c:	4b03      	ldr	r3, [pc, #12]	; (c45c <usbdc_get_ctrl_buffer+0x14>)
    c44e:	695b      	ldr	r3, [r3, #20]
}
    c450:	4618      	mov	r0, r3
    c452:	46bd      	mov	sp, r7
    c454:	f85d 7b04 	ldr.w	r7, [sp], #4
    c458:	4770      	bx	lr
    c45a:	bf00      	nop
    c45c:	200010a0 	.word	0x200010a0

0000c460 <usbdc_get_state>:

/**
 * \brief Return current USB state
 */
uint8_t usbdc_get_state(void)
{
    c460:	b480      	push	{r7}
    c462:	af00      	add	r7, sp, #0
	if (usbdc.state & USBD_S_SUSPEND) {
    c464:	4b07      	ldr	r3, [pc, #28]	; (c484 <usbdc_get_state+0x24>)
    c466:	7e9b      	ldrb	r3, [r3, #26]
    c468:	f003 0310 	and.w	r3, r3, #16
    c46c:	2b00      	cmp	r3, #0
    c46e:	d001      	beq.n	c474 <usbdc_get_state+0x14>
		return USBD_S_SUSPEND;
    c470:	2310      	movs	r3, #16
    c472:	e001      	b.n	c478 <usbdc_get_state+0x18>
	}
	return usbdc.state;
    c474:	4b03      	ldr	r3, [pc, #12]	; (c484 <usbdc_get_state+0x24>)
    c476:	7e9b      	ldrb	r3, [r3, #26]
}
    c478:	4618      	mov	r0, r3
    c47a:	46bd      	mov	sp, r7
    c47c:	f85d 7b04 	ldr.w	r7, [sp], #4
    c480:	4770      	bx	lr
    c482:	bf00      	nop
    c484:	200010a0 	.word	0x200010a0

0000c488 <usb_get_u16>:
{
    c488:	b480      	push	{r7}
    c48a:	b083      	sub	sp, #12
    c48c:	af00      	add	r7, sp, #0
    c48e:	6078      	str	r0, [r7, #4]
	return (ptr[0] + (ptr[1] << 8));
    c490:	687b      	ldr	r3, [r7, #4]
    c492:	781b      	ldrb	r3, [r3, #0]
    c494:	b29a      	uxth	r2, r3
    c496:	687b      	ldr	r3, [r7, #4]
    c498:	3301      	adds	r3, #1
    c49a:	781b      	ldrb	r3, [r3, #0]
    c49c:	b29b      	uxth	r3, r3
    c49e:	021b      	lsls	r3, r3, #8
    c4a0:	b29b      	uxth	r3, r3
    c4a2:	4413      	add	r3, r2
    c4a4:	b29b      	uxth	r3, r3
}
    c4a6:	4618      	mov	r0, r3
    c4a8:	370c      	adds	r7, #12
    c4aa:	46bd      	mov	sp, r7
    c4ac:	f85d 7b04 	ldr.w	r7, [sp], #4
    c4b0:	4770      	bx	lr

0000c4b2 <usb_desc_len>:
{
    c4b2:	b480      	push	{r7}
    c4b4:	b083      	sub	sp, #12
    c4b6:	af00      	add	r7, sp, #0
    c4b8:	6078      	str	r0, [r7, #4]
	return desc[0];
    c4ba:	687b      	ldr	r3, [r7, #4]
    c4bc:	781b      	ldrb	r3, [r3, #0]
}
    c4be:	4618      	mov	r0, r3
    c4c0:	370c      	adds	r7, #12
    c4c2:	46bd      	mov	sp, r7
    c4c4:	f85d 7b04 	ldr.w	r7, [sp], #4
    c4c8:	4770      	bx	lr

0000c4ca <usb_desc_type>:
{
    c4ca:	b480      	push	{r7}
    c4cc:	b083      	sub	sp, #12
    c4ce:	af00      	add	r7, sp, #0
    c4d0:	6078      	str	r0, [r7, #4]
	return desc[1];
    c4d2:	687b      	ldr	r3, [r7, #4]
    c4d4:	3301      	adds	r3, #1
    c4d6:	781b      	ldrb	r3, [r3, #0]
}
    c4d8:	4618      	mov	r0, r3
    c4da:	370c      	adds	r7, #12
    c4dc:	46bd      	mov	sp, r7
    c4de:	f85d 7b04 	ldr.w	r7, [sp], #4
    c4e2:	4770      	bx	lr

0000c4e4 <usb_desc_next>:
{
    c4e4:	b580      	push	{r7, lr}
    c4e6:	b082      	sub	sp, #8
    c4e8:	af00      	add	r7, sp, #0
    c4ea:	6078      	str	r0, [r7, #4]
	return (desc + usb_desc_len(desc));
    c4ec:	6878      	ldr	r0, [r7, #4]
    c4ee:	4b05      	ldr	r3, [pc, #20]	; (c504 <usb_desc_next+0x20>)
    c4f0:	4798      	blx	r3
    c4f2:	4603      	mov	r3, r0
    c4f4:	461a      	mov	r2, r3
    c4f6:	687b      	ldr	r3, [r7, #4]
    c4f8:	4413      	add	r3, r2
}
    c4fa:	4618      	mov	r0, r3
    c4fc:	3708      	adds	r7, #8
    c4fe:	46bd      	mov	sp, r7
    c500:	bd80      	pop	{r7, pc}
    c502:	bf00      	nop
    c504:	0000c4b3 	.word	0x0000c4b3

0000c508 <usb_cfg_desc_total_len>:
{
    c508:	b580      	push	{r7, lr}
    c50a:	b082      	sub	sp, #8
    c50c:	af00      	add	r7, sp, #0
    c50e:	6078      	str	r0, [r7, #4]
	return usb_get_u16(cfg_desc + 2);
    c510:	687b      	ldr	r3, [r7, #4]
    c512:	3302      	adds	r3, #2
    c514:	4618      	mov	r0, r3
    c516:	4b03      	ldr	r3, [pc, #12]	; (c524 <usb_cfg_desc_total_len+0x1c>)
    c518:	4798      	blx	r3
    c51a:	4603      	mov	r3, r0
}
    c51c:	4618      	mov	r0, r3
    c51e:	3708      	adds	r7, #8
    c520:	46bd      	mov	sp, r7
    c522:	bd80      	pop	{r7, pc}
    c524:	0000c489 	.word	0x0000c489

0000c528 <usb_cfg_desc_next>:
/** \brief Get Next USB Descriptor After the Configuration Descriptors list
 *  \param[in] cfg_desc Byte pointer to the descriptor start address
 *  \return Byte pointer to descriptor after configuration end
 */
static inline uint8_t *usb_cfg_desc_next(uint8_t *cfg_desc)
{
    c528:	b580      	push	{r7, lr}
    c52a:	b082      	sub	sp, #8
    c52c:	af00      	add	r7, sp, #0
    c52e:	6078      	str	r0, [r7, #4]
	return (cfg_desc + usb_cfg_desc_total_len(cfg_desc));
    c530:	6878      	ldr	r0, [r7, #4]
    c532:	4b05      	ldr	r3, [pc, #20]	; (c548 <usb_cfg_desc_next+0x20>)
    c534:	4798      	blx	r3
    c536:	4603      	mov	r3, r0
    c538:	461a      	mov	r2, r3
    c53a:	687b      	ldr	r3, [r7, #4]
    c53c:	4413      	add	r3, r2
}
    c53e:	4618      	mov	r0, r3
    c540:	3708      	adds	r7, #8
    c542:	46bd      	mov	sp, r7
    c544:	bd80      	pop	{r7, pc}
    c546:	bf00      	nop
    c548:	0000c509 	.word	0x0000c509

0000c54c <usb_find_desc>:
#define _param_error_check(cond) ASSERT(cond)
#define _desc_len_check() ASSERT(usb_desc_len(desc) >= 2)
#endif

uint8_t *usb_find_desc(uint8_t *desc, uint8_t *eof, uint8_t type)
{
    c54c:	b580      	push	{r7, lr}
    c54e:	b084      	sub	sp, #16
    c550:	af00      	add	r7, sp, #0
    c552:	60f8      	str	r0, [r7, #12]
    c554:	60b9      	str	r1, [r7, #8]
    c556:	4613      	mov	r3, r2
    c558:	71fb      	strb	r3, [r7, #7]
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    c55a:	e015      	b.n	c588 <usb_find_desc+0x3c>
		_desc_len_check();
    c55c:	68f8      	ldr	r0, [r7, #12]
    c55e:	4b0f      	ldr	r3, [pc, #60]	; (c59c <usb_find_desc+0x50>)
    c560:	4798      	blx	r3
    c562:	4603      	mov	r3, r0
    c564:	2b01      	cmp	r3, #1
    c566:	d801      	bhi.n	c56c <usb_find_desc+0x20>
    c568:	2300      	movs	r3, #0
    c56a:	e012      	b.n	c592 <usb_find_desc+0x46>
		if (type == usb_desc_type(desc)) {
    c56c:	68f8      	ldr	r0, [r7, #12]
    c56e:	4b0c      	ldr	r3, [pc, #48]	; (c5a0 <usb_find_desc+0x54>)
    c570:	4798      	blx	r3
    c572:	4603      	mov	r3, r0
    c574:	461a      	mov	r2, r3
    c576:	79fb      	ldrb	r3, [r7, #7]
    c578:	4293      	cmp	r3, r2
    c57a:	d101      	bne.n	c580 <usb_find_desc+0x34>
			return desc;
    c57c:	68fb      	ldr	r3, [r7, #12]
    c57e:	e008      	b.n	c592 <usb_find_desc+0x46>
		}
		desc = usb_desc_next(desc);
    c580:	68f8      	ldr	r0, [r7, #12]
    c582:	4b08      	ldr	r3, [pc, #32]	; (c5a4 <usb_find_desc+0x58>)
    c584:	4798      	blx	r3
    c586:	60f8      	str	r0, [r7, #12]
	while (desc < eof) {
    c588:	68fa      	ldr	r2, [r7, #12]
    c58a:	68bb      	ldr	r3, [r7, #8]
    c58c:	429a      	cmp	r2, r3
    c58e:	d3e5      	bcc.n	c55c <usb_find_desc+0x10>
	}
	return NULL;
    c590:	2300      	movs	r3, #0
}
    c592:	4618      	mov	r0, r3
    c594:	3710      	adds	r7, #16
    c596:	46bd      	mov	sp, r7
    c598:	bd80      	pop	{r7, pc}
    c59a:	bf00      	nop
    c59c:	0000c4b3 	.word	0x0000c4b3
    c5a0:	0000c4cb 	.word	0x0000c4cb
    c5a4:	0000c4e5 	.word	0x0000c4e5

0000c5a8 <usb_find_ep_desc>:
	}
	return eof;
}

uint8_t *usb_find_ep_desc(uint8_t *desc, uint8_t *eof)
{
    c5a8:	b580      	push	{r7, lr}
    c5aa:	b082      	sub	sp, #8
    c5ac:	af00      	add	r7, sp, #0
    c5ae:	6078      	str	r0, [r7, #4]
    c5b0:	6039      	str	r1, [r7, #0]
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    c5b2:	e019      	b.n	c5e8 <usb_find_ep_desc+0x40>
		_desc_len_check();
    c5b4:	6878      	ldr	r0, [r7, #4]
    c5b6:	4b12      	ldr	r3, [pc, #72]	; (c600 <usb_find_ep_desc+0x58>)
    c5b8:	4798      	blx	r3
    c5ba:	4603      	mov	r3, r0
    c5bc:	2b01      	cmp	r3, #1
    c5be:	d801      	bhi.n	c5c4 <usb_find_ep_desc+0x1c>
    c5c0:	2300      	movs	r3, #0
    c5c2:	e018      	b.n	c5f6 <usb_find_ep_desc+0x4e>
		if (USB_DT_INTERFACE == usb_desc_type(desc)) {
    c5c4:	6878      	ldr	r0, [r7, #4]
    c5c6:	4b0f      	ldr	r3, [pc, #60]	; (c604 <usb_find_ep_desc+0x5c>)
    c5c8:	4798      	blx	r3
    c5ca:	4603      	mov	r3, r0
    c5cc:	2b04      	cmp	r3, #4
    c5ce:	d010      	beq.n	c5f2 <usb_find_ep_desc+0x4a>
			break;
		}
		if (USB_DT_ENDPOINT == usb_desc_type(desc)) {
    c5d0:	6878      	ldr	r0, [r7, #4]
    c5d2:	4b0c      	ldr	r3, [pc, #48]	; (c604 <usb_find_ep_desc+0x5c>)
    c5d4:	4798      	blx	r3
    c5d6:	4603      	mov	r3, r0
    c5d8:	2b05      	cmp	r3, #5
    c5da:	d101      	bne.n	c5e0 <usb_find_ep_desc+0x38>
			return desc;
    c5dc:	687b      	ldr	r3, [r7, #4]
    c5de:	e00a      	b.n	c5f6 <usb_find_ep_desc+0x4e>
		}
		desc = usb_desc_next(desc);
    c5e0:	6878      	ldr	r0, [r7, #4]
    c5e2:	4b09      	ldr	r3, [pc, #36]	; (c608 <usb_find_ep_desc+0x60>)
    c5e4:	4798      	blx	r3
    c5e6:	6078      	str	r0, [r7, #4]
	while (desc < eof) {
    c5e8:	687a      	ldr	r2, [r7, #4]
    c5ea:	683b      	ldr	r3, [r7, #0]
    c5ec:	429a      	cmp	r2, r3
    c5ee:	d3e1      	bcc.n	c5b4 <usb_find_ep_desc+0xc>
    c5f0:	e000      	b.n	c5f4 <usb_find_ep_desc+0x4c>
			break;
    c5f2:	bf00      	nop
	}
	return NULL;
    c5f4:	2300      	movs	r3, #0
}
    c5f6:	4618      	mov	r0, r3
    c5f8:	3708      	adds	r7, #8
    c5fa:	46bd      	mov	sp, r7
    c5fc:	bd80      	pop	{r7, pc}
    c5fe:	bf00      	nop
    c600:	0000c4b3 	.word	0x0000c4b3
    c604:	0000c4cb 	.word	0x0000c4cb
    c608:	0000c4e5 	.word	0x0000c4e5

0000c60c <usb_find_cfg_desc>:

uint8_t *usb_find_cfg_desc(uint8_t *desc, uint8_t *eof, uint8_t cfg_value)
{
    c60c:	b580      	push	{r7, lr}
    c60e:	b084      	sub	sp, #16
    c610:	af00      	add	r7, sp, #0
    c612:	60f8      	str	r0, [r7, #12]
    c614:	60b9      	str	r1, [r7, #8]
    c616:	4613      	mov	r3, r2
    c618:	71fb      	strb	r3, [r7, #7]
	_param_error_check(desc && eof && (desc < eof));

	desc = usb_find_desc(desc, eof, USB_DT_CONFIG);
    c61a:	2202      	movs	r2, #2
    c61c:	68b9      	ldr	r1, [r7, #8]
    c61e:	68f8      	ldr	r0, [r7, #12]
    c620:	4b15      	ldr	r3, [pc, #84]	; (c678 <usb_find_cfg_desc+0x6c>)
    c622:	4798      	blx	r3
    c624:	60f8      	str	r0, [r7, #12]
	if (!desc) {
    c626:	68fb      	ldr	r3, [r7, #12]
    c628:	2b00      	cmp	r3, #0
    c62a:	d11a      	bne.n	c662 <usb_find_cfg_desc+0x56>
		return NULL;
    c62c:	2300      	movs	r3, #0
    c62e:	e01f      	b.n	c670 <usb_find_cfg_desc+0x64>
	}
	while (desc < eof) {
		_desc_len_check();
    c630:	68f8      	ldr	r0, [r7, #12]
    c632:	4b12      	ldr	r3, [pc, #72]	; (c67c <usb_find_cfg_desc+0x70>)
    c634:	4798      	blx	r3
    c636:	4603      	mov	r3, r0
    c638:	2b01      	cmp	r3, #1
    c63a:	d801      	bhi.n	c640 <usb_find_cfg_desc+0x34>
    c63c:	2300      	movs	r3, #0
    c63e:	e017      	b.n	c670 <usb_find_cfg_desc+0x64>
		if (desc[1] != USB_DT_CONFIG) {
    c640:	68fb      	ldr	r3, [r7, #12]
    c642:	3301      	adds	r3, #1
    c644:	781b      	ldrb	r3, [r3, #0]
    c646:	2b02      	cmp	r3, #2
    c648:	d110      	bne.n	c66c <usb_find_cfg_desc+0x60>
			break;
		}
		if (desc[5] == cfg_value) {
    c64a:	68fb      	ldr	r3, [r7, #12]
    c64c:	3305      	adds	r3, #5
    c64e:	781b      	ldrb	r3, [r3, #0]
    c650:	79fa      	ldrb	r2, [r7, #7]
    c652:	429a      	cmp	r2, r3
    c654:	d101      	bne.n	c65a <usb_find_cfg_desc+0x4e>
			return desc;
    c656:	68fb      	ldr	r3, [r7, #12]
    c658:	e00a      	b.n	c670 <usb_find_cfg_desc+0x64>
		}
		desc = usb_cfg_desc_next(desc);
    c65a:	68f8      	ldr	r0, [r7, #12]
    c65c:	4b08      	ldr	r3, [pc, #32]	; (c680 <usb_find_cfg_desc+0x74>)
    c65e:	4798      	blx	r3
    c660:	60f8      	str	r0, [r7, #12]
	while (desc < eof) {
    c662:	68fa      	ldr	r2, [r7, #12]
    c664:	68bb      	ldr	r3, [r7, #8]
    c666:	429a      	cmp	r2, r3
    c668:	d3e2      	bcc.n	c630 <usb_find_cfg_desc+0x24>
    c66a:	e000      	b.n	c66e <usb_find_cfg_desc+0x62>
			break;
    c66c:	bf00      	nop
	}
	return NULL;
    c66e:	2300      	movs	r3, #0
}
    c670:	4618      	mov	r0, r3
    c672:	3710      	adds	r7, #16
    c674:	46bd      	mov	sp, r7
    c676:	bd80      	pop	{r7, pc}
    c678:	0000c54d 	.word	0x0000c54d
    c67c:	0000c4b3 	.word	0x0000c4b3
    c680:	0000c529 	.word	0x0000c529

0000c684 <usb_find_str_desc>:
	}
	return NULL;
}

uint8_t *usb_find_str_desc(uint8_t *desc, uint8_t *eof, uint8_t str_index)
{
    c684:	b580      	push	{r7, lr}
    c686:	b086      	sub	sp, #24
    c688:	af00      	add	r7, sp, #0
    c68a:	60f8      	str	r0, [r7, #12]
    c68c:	60b9      	str	r1, [r7, #8]
    c68e:	4613      	mov	r3, r2
    c690:	71fb      	strb	r3, [r7, #7]
	uint8_t i;

	_param_error_check(desc && eof && (desc < eof));

	for (i = 0; desc < eof;) {
    c692:	2300      	movs	r3, #0
    c694:	75fb      	strb	r3, [r7, #23]
    c696:	e020      	b.n	c6da <usb_find_str_desc+0x56>
		desc = usb_find_desc(desc, eof, USB_DT_STRING);
    c698:	2203      	movs	r2, #3
    c69a:	68b9      	ldr	r1, [r7, #8]
    c69c:	68f8      	ldr	r0, [r7, #12]
    c69e:	4b13      	ldr	r3, [pc, #76]	; (c6ec <usb_find_str_desc+0x68>)
    c6a0:	4798      	blx	r3
    c6a2:	60f8      	str	r0, [r7, #12]
		if (desc) {
    c6a4:	68fb      	ldr	r3, [r7, #12]
    c6a6:	2b00      	cmp	r3, #0
    c6a8:	d015      	beq.n	c6d6 <usb_find_str_desc+0x52>
			_desc_len_check();
    c6aa:	68f8      	ldr	r0, [r7, #12]
    c6ac:	4b10      	ldr	r3, [pc, #64]	; (c6f0 <usb_find_str_desc+0x6c>)
    c6ae:	4798      	blx	r3
    c6b0:	4603      	mov	r3, r0
    c6b2:	2b01      	cmp	r3, #1
    c6b4:	d801      	bhi.n	c6ba <usb_find_str_desc+0x36>
    c6b6:	2300      	movs	r3, #0
    c6b8:	e014      	b.n	c6e4 <usb_find_str_desc+0x60>
			if (i == str_index) {
    c6ba:	7dfa      	ldrb	r2, [r7, #23]
    c6bc:	79fb      	ldrb	r3, [r7, #7]
    c6be:	429a      	cmp	r2, r3
    c6c0:	d101      	bne.n	c6c6 <usb_find_str_desc+0x42>
				return desc;
    c6c2:	68fb      	ldr	r3, [r7, #12]
    c6c4:	e00e      	b.n	c6e4 <usb_find_str_desc+0x60>
			}
			i++;
    c6c6:	7dfb      	ldrb	r3, [r7, #23]
    c6c8:	3301      	adds	r3, #1
    c6ca:	75fb      	strb	r3, [r7, #23]
			desc = usb_desc_next(desc);
    c6cc:	68f8      	ldr	r0, [r7, #12]
    c6ce:	4b09      	ldr	r3, [pc, #36]	; (c6f4 <usb_find_str_desc+0x70>)
    c6d0:	4798      	blx	r3
    c6d2:	60f8      	str	r0, [r7, #12]
    c6d4:	e001      	b.n	c6da <usb_find_str_desc+0x56>
		} else {
			return NULL;
    c6d6:	2300      	movs	r3, #0
    c6d8:	e004      	b.n	c6e4 <usb_find_str_desc+0x60>
	for (i = 0; desc < eof;) {
    c6da:	68fa      	ldr	r2, [r7, #12]
    c6dc:	68bb      	ldr	r3, [r7, #8]
    c6de:	429a      	cmp	r2, r3
    c6e0:	d3da      	bcc.n	c698 <usb_find_str_desc+0x14>
		}
	}
	return NULL;
    c6e2:	2300      	movs	r3, #0
}
    c6e4:	4618      	mov	r0, r3
    c6e6:	3718      	adds	r7, #24
    c6e8:	46bd      	mov	sp, r7
    c6ea:	bd80      	pop	{r7, pc}
    c6ec:	0000c54d 	.word	0x0000c54d
    c6f0:	0000c4b3 	.word	0x0000c4b3
    c6f4:	0000c4e5 	.word	0x0000c4e5

0000c6f8 <_ZN13CANOpen_ClassC1EP20can_async_descriptor>:
CANOpen_Class::CANOpen_Class()
{
	ptrCANOpenClass=this;
} //CANOpen_Class

CANOpen_Class::CANOpen_Class(can_async_descriptor  *descr)
    c6f8:	b580      	push	{r7, lr}
    c6fa:	b082      	sub	sp, #8
    c6fc:	af00      	add	r7, sp, #0
    c6fe:	6078      	str	r0, [r7, #4]
    c700:	6039      	str	r1, [r7, #0]
    c702:	687b      	ldr	r3, [r7, #4]
    c704:	4618      	mov	r0, r3
    c706:	4b08      	ldr	r3, [pc, #32]	; (c728 <_ZN13CANOpen_ClassC1EP20can_async_descriptor+0x30>)
    c708:	4798      	blx	r3
    c70a:	4a08      	ldr	r2, [pc, #32]	; (c72c <_ZN13CANOpen_ClassC1EP20can_async_descriptor+0x34>)
    c70c:	687b      	ldr	r3, [r7, #4]
    c70e:	601a      	str	r2, [r3, #0]
{
	ptrCANOpenClass=this;
    c710:	4a07      	ldr	r2, [pc, #28]	; (c730 <_ZN13CANOpen_ClassC1EP20can_async_descriptor+0x38>)
    c712:	687b      	ldr	r3, [r7, #4]
    c714:	6013      	str	r3, [r2, #0]
	canDescr=descr;
    c716:	687b      	ldr	r3, [r7, #4]
    c718:	683a      	ldr	r2, [r7, #0]
    c71a:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
} //CANOpen_Class
    c71e:	687b      	ldr	r3, [r7, #4]
    c720:	4618      	mov	r0, r3
    c722:	3708      	adds	r7, #8
    c724:	46bd      	mov	sp, r7
    c726:	bd80      	pop	{r7, pc}
    c728:	0000c87d 	.word	0x0000c87d
    c72c:	00013228 	.word	0x00013228
    c730:	200010c0 	.word	0x200010c0

0000c734 <_ZN13CANOpen_ClassD1Ev>:

// default destructor
CANOpen_Class::~CANOpen_Class()
    c734:	b580      	push	{r7, lr}
    c736:	b082      	sub	sp, #8
    c738:	af00      	add	r7, sp, #0
    c73a:	6078      	str	r0, [r7, #4]
    c73c:	4a05      	ldr	r2, [pc, #20]	; (c754 <_ZN13CANOpen_ClassD1Ev+0x20>)
    c73e:	687b      	ldr	r3, [r7, #4]
    c740:	601a      	str	r2, [r3, #0]
    c742:	687b      	ldr	r3, [r7, #4]
    c744:	4618      	mov	r0, r3
    c746:	4b04      	ldr	r3, [pc, #16]	; (c758 <_ZN13CANOpen_ClassD1Ev+0x24>)
    c748:	4798      	blx	r3
{
} //~CANOpen_Class
    c74a:	687b      	ldr	r3, [r7, #4]
    c74c:	4618      	mov	r0, r3
    c74e:	3708      	adds	r7, #8
    c750:	46bd      	mov	sp, r7
    c752:	bd80      	pop	{r7, pc}
    c754:	00013228 	.word	0x00013228
    c758:	0000c8c5 	.word	0x0000c8c5

0000c75c <_ZN13CANOpen_Class4InitEh>:

int	CANOpen_Class::Init(uint8_t node){
    c75c:	b590      	push	{r4, r7, lr}
    c75e:	b083      	sub	sp, #12
    c760:	af00      	add	r7, sp, #0
    c762:	6078      	str	r0, [r7, #4]
    c764:	460b      	mov	r3, r1
    c766:	70fb      	strb	r3, [r7, #3]
	coNode=node;
    c768:	687b      	ldr	r3, [r7, #4]
    c76a:	78fa      	ldrb	r2, [r7, #3]
    c76c:	f883 2153 	strb.w	r2, [r3, #339]	; 0x153
	if (node==1)
	{
			//RedefineMacros();
	}
	//can.SetDescriptor(canDescr);
	err=CO_init(canDescr,node,1000);
    c770:	6878      	ldr	r0, [r7, #4]
    c772:	687b      	ldr	r3, [r7, #4]
    c774:	f8d3 114c 	ldr.w	r1, [r3, #332]	; 0x14c
    c778:	78fa      	ldrb	r2, [r7, #3]
    c77a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    c77e:	4c14      	ldr	r4, [pc, #80]	; (c7d0 <_ZN13CANOpen_Class4InitEh+0x74>)
    c780:	47a0      	blx	r4
    c782:	4603      	mov	r3, r0
    c784:	461a      	mov	r2, r3
    c786:	687b      	ldr	r3, [r7, #4]
    c788:	f883 2151 	strb.w	r2, [r3, #337]	; 0x151
	
	if (err==0)
    c78c:	687b      	ldr	r3, [r7, #4]
    c78e:	f993 3151 	ldrsb.w	r3, [r3, #337]	; 0x151
    c792:	2b00      	cmp	r3, #0
    c794:	d111      	bne.n	c7ba <_ZN13CANOpen_Class4InitEh+0x5e>
	{
	
		err=(CO_ReturnError_t)SetInitialMode();
    c796:	6878      	ldr	r0, [r7, #4]
    c798:	4b0e      	ldr	r3, [pc, #56]	; (c7d4 <_ZN13CANOpen_Class4InitEh+0x78>)
    c79a:	4798      	blx	r3
    c79c:	4603      	mov	r3, r0
    c79e:	b25a      	sxtb	r2, r3
    c7a0:	687b      	ldr	r3, [r7, #4]
    c7a2:	f883 2151 	strb.w	r2, [r3, #337]	; 0x151
		if (node==1)
    c7a6:	78fb      	ldrb	r3, [r7, #3]
    c7a8:	2b01      	cmp	r3, #1
    c7aa:	d10a      	bne.n	c7c2 <_ZN13CANOpen_Class4InitEh+0x66>
		{
			CO_sendNMTcommand(1,0);
    c7ac:	687b      	ldr	r3, [r7, #4]
    c7ae:	2200      	movs	r2, #0
    c7b0:	2101      	movs	r1, #1
    c7b2:	4618      	mov	r0, r3
    c7b4:	4b08      	ldr	r3, [pc, #32]	; (c7d8 <_ZN13CANOpen_Class4InitEh+0x7c>)
    c7b6:	4798      	blx	r3
    c7b8:	e003      	b.n	c7c2 <_ZN13CANOpen_Class4InitEh+0x66>
		}
			

		
	}else{
		return	(int)err;
    c7ba:	687b      	ldr	r3, [r7, #4]
    c7bc:	f993 3151 	ldrsb.w	r3, [r3, #337]	; 0x151
    c7c0:	e002      	b.n	c7c8 <_ZN13CANOpen_Class4InitEh+0x6c>
	}
	return	(int)err;
    c7c2:	687b      	ldr	r3, [r7, #4]
    c7c4:	f993 3151 	ldrsb.w	r3, [r3, #337]	; 0x151
}
    c7c8:	4618      	mov	r0, r3
    c7ca:	370c      	adds	r7, #12
    c7cc:	46bd      	mov	sp, r7
    c7ce:	bd90      	pop	{r4, r7, pc}
    c7d0:	0000c9c5 	.word	0x0000c9c5
    c7d4:	0000c7dd 	.word	0x0000c7dd
    c7d8:	0000c8ed 	.word	0x0000c8ed

0000c7dc <_ZN13CANOpen_Class14SetInitialModeEv>:

int	CANOpen_Class::SetInitialMode(void){
    c7dc:	b580      	push	{r7, lr}
    c7de:	b082      	sub	sp, #8
    c7e0:	af00      	add	r7, sp, #0
    c7e2:	6078      	str	r0, [r7, #4]
	/* CAN module address, NodeID, Bitrate */
	/* We do not use CAN registers directly, so address here is a pointer to the CAN_HandleTypeDef object. */
	
	
	/* start CAN */
	err=CO_CANsetNormalMode();
    c7e4:	687b      	ldr	r3, [r7, #4]
    c7e6:	4618      	mov	r0, r3
    c7e8:	4b08      	ldr	r3, [pc, #32]	; (c80c <_ZN13CANOpen_Class14SetInitialModeEv+0x30>)
    c7ea:	4798      	blx	r3
    c7ec:	4603      	mov	r3, r0
    c7ee:	461a      	mov	r2, r3
    c7f0:	687b      	ldr	r3, [r7, #4]
    c7f2:	f883 2151 	strb.w	r2, [r3, #337]	; 0x151
	//err=CO_CANsetNormalMode(CO->CANmodule[0]);

	reset = CO_RESET_NOT;
    c7f6:	687b      	ldr	r3, [r7, #4]
    c7f8:	2200      	movs	r2, #0
    c7fa:	f883 2150 	strb.w	r2, [r3, #336]	; 0x150
	return	(int)err;
    c7fe:	687b      	ldr	r3, [r7, #4]
    c800:	f993 3151 	ldrsb.w	r3, [r3, #337]	; 0x151
}
    c804:	4618      	mov	r0, r3
    c806:	3708      	adds	r7, #8
    c808:	46bd      	mov	sp, r7
    c80a:	bd80      	pop	{r7, pc}
    c80c:	0000d605 	.word	0x0000d605

0000c810 <_ZN13CANOpen_Class16Periodic_ProcessEm>:

int	CANOpen_Class::Periodic_Process(uint32_t timeDifference){
    c810:	b580      	push	{r7, lr}
    c812:	b082      	sub	sp, #8
    c814:	af00      	add	r7, sp, #0
    c816:	6078      	str	r0, [r7, #4]
    c818:	6039      	str	r1, [r7, #0]
	if (ptrCO->CANmodule[0]->CANnormal)
    c81a:	687b      	ldr	r3, [r7, #4]
    c81c:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
    c820:	681b      	ldr	r3, [r3, #0]
    c822:	7d1b      	ldrb	r3, [r3, #20]
    c824:	b2db      	uxtb	r3, r3
    c826:	2b00      	cmp	r3, #0
    c828:	bf14      	ite	ne
    c82a:	2301      	movne	r3, #1
    c82c:	2300      	moveq	r3, #0
    c82e:	b2db      	uxtb	r3, r3
    c830:	2b00      	cmp	r3, #0
    c832:	d015      	beq.n	c860 <_ZN13CANOpen_Class16Periodic_ProcessEm+0x50>
	{
		syncWas=CO_process_SYNC_RPDO(timeDifference);
    c834:	687b      	ldr	r3, [r7, #4]
    c836:	6839      	ldr	r1, [r7, #0]
    c838:	4618      	mov	r0, r3
    c83a:	4b0d      	ldr	r3, [pc, #52]	; (c870 <_ZN13CANOpen_Class16Periodic_ProcessEm+0x60>)
    c83c:	4798      	blx	r3
    c83e:	4603      	mov	r3, r0
    c840:	461a      	mov	r2, r3
    c842:	687b      	ldr	r3, [r7, #4]
    c844:	f883 2152 	strb.w	r2, [r3, #338]	; 0x152
		CO_process_TPDO(syncWas,timeDifference);
    c848:	6878      	ldr	r0, [r7, #4]
    c84a:	687b      	ldr	r3, [r7, #4]
    c84c:	f893 3152 	ldrb.w	r3, [r3, #338]	; 0x152
    c850:	683a      	ldr	r2, [r7, #0]
    c852:	4619      	mov	r1, r3
    c854:	4b07      	ldr	r3, [pc, #28]	; (c874 <_ZN13CANOpen_Class16Periodic_ProcessEm+0x64>)
    c856:	4798      	blx	r3
		CAN_Polling_Tx();
    c858:	687b      	ldr	r3, [r7, #4]
    c85a:	4618      	mov	r0, r3
    c85c:	4b06      	ldr	r3, [pc, #24]	; (c878 <_ZN13CANOpen_Class16Periodic_ProcessEm+0x68>)
    c85e:	4798      	blx	r3
	}
	
	return	int(syncWas);
    c860:	687b      	ldr	r3, [r7, #4]
    c862:	f893 3152 	ldrb.w	r3, [r3, #338]	; 0x152
}
    c866:	4618      	mov	r0, r3
    c868:	3708      	adds	r7, #8
    c86a:	46bd      	mov	sp, r7
    c86c:	bd80      	pop	{r7, pc}
    c86e:	bf00      	nop
    c870:	0000d2a9 	.word	0x0000d2a9
    c874:	0000d32d 	.word	0x0000d32d
    c878:	0000de41 	.word	0x0000de41

0000c87c <_ZN8CO_ClassC1Ev>:
		static	int32_t             *CO_traceValueBuffers[CO_NO_TRACE];
	#endif
#endif

// default constructor
CO_Class::CO_Class()
    c87c:	b580      	push	{r7, lr}
    c87e:	b082      	sub	sp, #8
    c880:	af00      	add	r7, sp, #0
    c882:	6078      	str	r0, [r7, #4]
    c884:	687b      	ldr	r3, [r7, #4]
    c886:	4618      	mov	r0, r3
    c888:	4b0b      	ldr	r3, [pc, #44]	; (c8b8 <_ZN8CO_ClassC1Ev+0x3c>)
    c88a:	4798      	blx	r3
    c88c:	4a0b      	ldr	r2, [pc, #44]	; (c8bc <_ZN8CO_ClassC1Ev+0x40>)
    c88e:	687b      	ldr	r3, [r7, #4]
    c890:	601a      	str	r2, [r3, #0]
{
	ptrCO = CO;
    c892:	4b0b      	ldr	r3, [pc, #44]	; (c8c0 <_ZN8CO_ClassC1Ev+0x44>)
    c894:	681a      	ldr	r2, [r3, #0]
    c896:	687b      	ldr	r3, [r7, #4]
    c898:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
	coCanDescr=NULL;
    c89c:	687b      	ldr	r3, [r7, #4]
    c89e:	2200      	movs	r2, #0
    c8a0:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
	CO_memoryUsed=sizeof(COO);
    c8a4:	687b      	ldr	r3, [r7, #4]
    c8a6:	223c      	movs	r2, #60	; 0x3c
    c8a8:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
} //CO_Class
    c8ac:	687b      	ldr	r3, [r7, #4]
    c8ae:	4618      	mov	r0, r3
    c8b0:	3708      	adds	r7, #8
    c8b2:	46bd      	mov	sp, r7
    c8b4:	bd80      	pop	{r7, pc}
    c8b6:	bf00      	nop
    c8b8:	0000d48d 	.word	0x0000d48d
    c8bc:	00013234 	.word	0x00013234
    c8c0:	20001100 	.word	0x20001100

0000c8c4 <_ZN8CO_ClassD1Ev>:

// default destructor
CO_Class::~CO_Class()
    c8c4:	b580      	push	{r7, lr}
    c8c6:	b082      	sub	sp, #8
    c8c8:	af00      	add	r7, sp, #0
    c8ca:	6078      	str	r0, [r7, #4]
    c8cc:	4a05      	ldr	r2, [pc, #20]	; (c8e4 <_ZN8CO_ClassD1Ev+0x20>)
    c8ce:	687b      	ldr	r3, [r7, #4]
    c8d0:	601a      	str	r2, [r3, #0]
    c8d2:	687b      	ldr	r3, [r7, #4]
    c8d4:	4618      	mov	r0, r3
    c8d6:	4b04      	ldr	r3, [pc, #16]	; (c8e8 <_ZN8CO_ClassD1Ev+0x24>)
    c8d8:	4798      	blx	r3
{
} //~CO_Class
    c8da:	687b      	ldr	r3, [r7, #4]
    c8dc:	4618      	mov	r0, r3
    c8de:	3708      	adds	r7, #8
    c8e0:	46bd      	mov	sp, r7
    c8e2:	bd80      	pop	{r7, pc}
    c8e4:	00013234 	.word	0x00013234
    c8e8:	0000d4f9 	.word	0x0000d4f9

0000c8ec <_ZN8CO_Class17CO_sendNMTcommandEhh>:



uint8_t CO_Class::CO_sendNMTcommand( uint8_t command, uint8_t nodeID){
    c8ec:	b580      	push	{r7, lr}
    c8ee:	b082      	sub	sp, #8
    c8f0:	af00      	add	r7, sp, #0
    c8f2:	6078      	str	r0, [r7, #4]
    c8f4:	460b      	mov	r3, r1
    c8f6:	70fb      	strb	r3, [r7, #3]
    c8f8:	4613      	mov	r3, r2
    c8fa:	70bb      	strb	r3, [r7, #2]
	if(NMTM_txBuff == 0){
    c8fc:	687b      	ldr	r3, [r7, #4]
    c8fe:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
    c902:	2b00      	cmp	r3, #0
    c904:	d101      	bne.n	c90a <_ZN8CO_Class17CO_sendNMTcommandEhh+0x1e>
		/* error, CO_CANtxBufferInit() was not called for this buffer. */
		return CO_ERROR_TX_UNCONFIGURED; /* -11 */
    c906:	23f5      	movs	r3, #245	; 0xf5
    c908:	e053      	b.n	c9b2 <_ZN8CO_Class17CO_sendNMTcommandEhh+0xc6>
	}
	NMTM_txBuff->data[0] = command;
    c90a:	687b      	ldr	r3, [r7, #4]
    c90c:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
    c910:	78fa      	ldrb	r2, [r7, #3]
    c912:	715a      	strb	r2, [r3, #5]
	NMTM_txBuff->data[1] = nodeID;
    c914:	687b      	ldr	r3, [r7, #4]
    c916:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
    c91a:	78ba      	ldrb	r2, [r7, #2]
    c91c:	719a      	strb	r2, [r3, #6]

	/* Apply NMT command also to this node, if set so. */
	if(nodeID == 0 || nodeID == CO->NMT->nodeId){
    c91e:	78bb      	ldrb	r3, [r7, #2]
    c920:	2b00      	cmp	r3, #0
    c922:	d006      	beq.n	c932 <_ZN8CO_Class17CO_sendNMTcommandEhh+0x46>
    c924:	4b25      	ldr	r3, [pc, #148]	; (c9bc <_ZN8CO_Class17CO_sendNMTcommandEhh+0xd0>)
    c926:	681b      	ldr	r3, [r3, #0]
    c928:	691b      	ldr	r3, [r3, #16]
    c92a:	7a9b      	ldrb	r3, [r3, #10]
    c92c:	78ba      	ldrb	r2, [r7, #2]
    c92e:	429a      	cmp	r2, r3
    c930:	d135      	bne.n	c99e <_ZN8CO_Class17CO_sendNMTcommandEhh+0xb2>
		switch(command){
    c932:	78fb      	ldrb	r3, [r7, #3]
    c934:	2b80      	cmp	r3, #128	; 0x80
    c936:	d01f      	beq.n	c978 <_ZN8CO_Class17CO_sendNMTcommandEhh+0x8c>
    c938:	2b80      	cmp	r3, #128	; 0x80
    c93a:	dc04      	bgt.n	c946 <_ZN8CO_Class17CO_sendNMTcommandEhh+0x5a>
    c93c:	2b01      	cmp	r3, #1
    c93e:	d007      	beq.n	c950 <_ZN8CO_Class17CO_sendNMTcommandEhh+0x64>
    c940:	2b02      	cmp	r3, #2
    c942:	d013      	beq.n	c96c <_ZN8CO_Class17CO_sendNMTcommandEhh+0x80>
    c944:	e02b      	b.n	c99e <_ZN8CO_Class17CO_sendNMTcommandEhh+0xb2>
    c946:	2b81      	cmp	r3, #129	; 0x81
    c948:	d01c      	beq.n	c984 <_ZN8CO_Class17CO_sendNMTcommandEhh+0x98>
    c94a:	2b82      	cmp	r3, #130	; 0x82
    c94c:	d020      	beq.n	c990 <_ZN8CO_Class17CO_sendNMTcommandEhh+0xa4>
    c94e:	e026      	b.n	c99e <_ZN8CO_Class17CO_sendNMTcommandEhh+0xb2>
			case CO_NMT_ENTER_OPERATIONAL:
			if((*CO->NMT->emPr->errorRegister) == 0) {
    c950:	4b1a      	ldr	r3, [pc, #104]	; (c9bc <_ZN8CO_Class17CO_sendNMTcommandEhh+0xd0>)
    c952:	681b      	ldr	r3, [r3, #0]
    c954:	691b      	ldr	r3, [r3, #16]
    c956:	695b      	ldr	r3, [r3, #20]
    c958:	681b      	ldr	r3, [r3, #0]
    c95a:	781b      	ldrb	r3, [r3, #0]
    c95c:	2b00      	cmp	r3, #0
    c95e:	d11d      	bne.n	c99c <_ZN8CO_Class17CO_sendNMTcommandEhh+0xb0>
				CO->NMT->operatingState = CO_NMT_OPERATIONAL;
    c960:	4b16      	ldr	r3, [pc, #88]	; (c9bc <_ZN8CO_Class17CO_sendNMTcommandEhh+0xd0>)
    c962:	681b      	ldr	r3, [r3, #0]
    c964:	691b      	ldr	r3, [r3, #16]
    c966:	2205      	movs	r2, #5
    c968:	701a      	strb	r2, [r3, #0]
			}
			break;
    c96a:	e017      	b.n	c99c <_ZN8CO_Class17CO_sendNMTcommandEhh+0xb0>
			case CO_NMT_ENTER_STOPPED:
			CO->NMT->operatingState = CO_NMT_STOPPED;
    c96c:	4b13      	ldr	r3, [pc, #76]	; (c9bc <_ZN8CO_Class17CO_sendNMTcommandEhh+0xd0>)
    c96e:	681b      	ldr	r3, [r3, #0]
    c970:	691b      	ldr	r3, [r3, #16]
    c972:	2204      	movs	r2, #4
    c974:	701a      	strb	r2, [r3, #0]
			break;
    c976:	e012      	b.n	c99e <_ZN8CO_Class17CO_sendNMTcommandEhh+0xb2>
			case CO_NMT_ENTER_PRE_OPERATIONAL:
			CO->NMT->operatingState = CO_NMT_PRE_OPERATIONAL;
    c978:	4b10      	ldr	r3, [pc, #64]	; (c9bc <_ZN8CO_Class17CO_sendNMTcommandEhh+0xd0>)
    c97a:	681b      	ldr	r3, [r3, #0]
    c97c:	691b      	ldr	r3, [r3, #16]
    c97e:	227f      	movs	r2, #127	; 0x7f
    c980:	701a      	strb	r2, [r3, #0]
			break;
    c982:	e00c      	b.n	c99e <_ZN8CO_Class17CO_sendNMTcommandEhh+0xb2>
			case CO_NMT_RESET_NODE:
			CO->NMT->resetCommand = CO_RESET_APP;
    c984:	4b0d      	ldr	r3, [pc, #52]	; (c9bc <_ZN8CO_Class17CO_sendNMTcommandEhh+0xd0>)
    c986:	681b      	ldr	r3, [r3, #0]
    c988:	691b      	ldr	r3, [r3, #16]
    c98a:	2202      	movs	r2, #2
    c98c:	725a      	strb	r2, [r3, #9]
			break;
    c98e:	e006      	b.n	c99e <_ZN8CO_Class17CO_sendNMTcommandEhh+0xb2>
			case CO_NMT_RESET_COMMUNICATION:
			CO->NMT->resetCommand = CO_RESET_COMM;
    c990:	4b0a      	ldr	r3, [pc, #40]	; (c9bc <_ZN8CO_Class17CO_sendNMTcommandEhh+0xd0>)
    c992:	681b      	ldr	r3, [r3, #0]
    c994:	691b      	ldr	r3, [r3, #16]
    c996:	2201      	movs	r2, #1
    c998:	725a      	strb	r2, [r3, #9]
			break;
    c99a:	e000      	b.n	c99e <_ZN8CO_Class17CO_sendNMTcommandEhh+0xb2>
			break;
    c99c:	bf00      	nop
		}
	}

	return CAN_Send( NMTM_txBuff); /* 0 = success */
    c99e:	687a      	ldr	r2, [r7, #4]
    c9a0:	687b      	ldr	r3, [r7, #4]
    c9a2:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
    c9a6:	4619      	mov	r1, r3
    c9a8:	4610      	mov	r0, r2
    c9aa:	4b05      	ldr	r3, [pc, #20]	; (c9c0 <_ZN8CO_Class17CO_sendNMTcommandEhh+0xd4>)
    c9ac:	4798      	blx	r3
    c9ae:	4603      	mov	r3, r0
    c9b0:	b2db      	uxtb	r3, r3
}
    c9b2:	4618      	mov	r0, r3
    c9b4:	3708      	adds	r7, #8
    c9b6:	46bd      	mov	sp, r7
    c9b8:	bd80      	pop	{r7, pc}
    c9ba:	bf00      	nop
    c9bc:	20001100 	.word	0x20001100
    c9c0:	0000d961 	.word	0x0000d961

0000c9c4 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm>:
/******************************************************************************/
CO_ReturnError_t CO_Class::CO_init(
can_async_descriptor   *CANbaseAddress,
uint8_t                 nodeId,
uint32_t                bitRate)
{
    c9c4:	b5f0      	push	{r4, r5, r6, r7, lr}
    c9c6:	b099      	sub	sp, #100	; 0x64
    c9c8:	af0c      	add	r7, sp, #48	; 0x30
    c9ca:	61f8      	str	r0, [r7, #28]
    c9cc:	61b9      	str	r1, [r7, #24]
    c9ce:	613b      	str	r3, [r7, #16]
    c9d0:	4613      	mov	r3, r2
    c9d2:	75fb      	strb	r3, [r7, #23]
	coCanDescr=CANbaseAddress;
    c9d4:	69fb      	ldr	r3, [r7, #28]
    c9d6:	69ba      	ldr	r2, [r7, #24]
    c9d8:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
	coNode=nodeId;
    c9dc:	69fb      	ldr	r3, [r7, #28]
    c9de:	7dfa      	ldrb	r2, [r7, #23]
    c9e0:	f883 2148 	strb.w	r2, [r3, #328]	; 0x148
	#endif


	/* Initialize CANopen object */
	#ifdef CO_USE_GLOBALS
		CO = &COO;
    c9e4:	4ba3      	ldr	r3, [pc, #652]	; (cc74 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2b0>)
    c9e6:	4aa4      	ldr	r2, [pc, #656]	; (cc78 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2b4>)
    c9e8:	601a      	str	r2, [r3, #0]

		CO->CANmodule[0]                    = &COO_CANmodule;
    c9ea:	4ba2      	ldr	r3, [pc, #648]	; (cc74 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2b0>)
    c9ec:	681b      	ldr	r3, [r3, #0]
    c9ee:	4aa3      	ldr	r2, [pc, #652]	; (cc7c <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2b8>)
    c9f0:	601a      	str	r2, [r3, #0]
		CO_CANmodule_rxArray0               = &COO_CANmodule_rxArray0[0];
    c9f2:	4ba3      	ldr	r3, [pc, #652]	; (cc80 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2bc>)
    c9f4:	4aa3      	ldr	r2, [pc, #652]	; (cc84 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2c0>)
    c9f6:	601a      	str	r2, [r3, #0]
		CO_CANmodule_txArray0               = &COO_CANmodule_txArray0[0];
    c9f8:	4ba3      	ldr	r3, [pc, #652]	; (cc88 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2c4>)
    c9fa:	4aa4      	ldr	r2, [pc, #656]	; (cc8c <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2c8>)
    c9fc:	601a      	str	r2, [r3, #0]
		for(i=0; i<CO_NO_SDO_SERVER; i++){
    c9fe:	69fb      	ldr	r3, [r7, #28]
    ca00:	2200      	movs	r2, #0
    ca02:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
    ca06:	69fb      	ldr	r3, [r7, #28]
    ca08:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
    ca0c:	2b00      	cmp	r3, #0
    ca0e:	d118      	bne.n	ca42 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x7e>
			CO->SDO[i]                      = &COO_SDO[i];
    ca10:	4b98      	ldr	r3, [pc, #608]	; (cc74 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2b0>)
    ca12:	6819      	ldr	r1, [r3, #0]
    ca14:	69fb      	ldr	r3, [r7, #28]
    ca16:	f8d3 013c 	ldr.w	r0, [r3, #316]	; 0x13c
    ca1a:	69fb      	ldr	r3, [r7, #28]
    ca1c:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
    ca20:	4613      	mov	r3, r2
    ca22:	011b      	lsls	r3, r3, #4
    ca24:	4413      	add	r3, r2
    ca26:	00db      	lsls	r3, r3, #3
    ca28:	4a99      	ldr	r2, [pc, #612]	; (cc90 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2cc>)
    ca2a:	441a      	add	r2, r3
    ca2c:	0083      	lsls	r3, r0, #2
    ca2e:	440b      	add	r3, r1
    ca30:	605a      	str	r2, [r3, #4]
		for(i=0; i<CO_NO_SDO_SERVER; i++){
    ca32:	69fb      	ldr	r3, [r7, #28]
    ca34:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
    ca38:	1c5a      	adds	r2, r3, #1
    ca3a:	69fb      	ldr	r3, [r7, #28]
    ca3c:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
    ca40:	e7e1      	b.n	ca06 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x42>
		}

		CO_SDO_ODExtensions                 = &COO_SDO_ODExtensions[0];
    ca42:	4b94      	ldr	r3, [pc, #592]	; (cc94 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2d0>)
    ca44:	4a94      	ldr	r2, [pc, #592]	; (cc98 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2d4>)
    ca46:	601a      	str	r2, [r3, #0]
		CO->em                              = &COO_EM;
    ca48:	4b8a      	ldr	r3, [pc, #552]	; (cc74 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2b0>)
    ca4a:	681b      	ldr	r3, [r3, #0]
    ca4c:	4a93      	ldr	r2, [pc, #588]	; (cc9c <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2d8>)
    ca4e:	609a      	str	r2, [r3, #8]
		CO->emPr                            = &COO_EMpr;
    ca50:	4b88      	ldr	r3, [pc, #544]	; (cc74 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2b0>)
    ca52:	681b      	ldr	r3, [r3, #0]
    ca54:	4a92      	ldr	r2, [pc, #584]	; (cca0 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2dc>)
    ca56:	60da      	str	r2, [r3, #12]
		CO->NMT                             = &COO_NMT;
    ca58:	4b86      	ldr	r3, [pc, #536]	; (cc74 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2b0>)
    ca5a:	681b      	ldr	r3, [r3, #0]
    ca5c:	4a91      	ldr	r2, [pc, #580]	; (cca4 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2e0>)
    ca5e:	611a      	str	r2, [r3, #16]
		CO->SYNC                            = &COO_SYNC;
    ca60:	4b84      	ldr	r3, [pc, #528]	; (cc74 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2b0>)
    ca62:	681b      	ldr	r3, [r3, #0]
    ca64:	4a90      	ldr	r2, [pc, #576]	; (cca8 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2e4>)
    ca66:	615a      	str	r2, [r3, #20]
		for(i=0; i<CO_NO_RPDO; i++){
    ca68:	69fb      	ldr	r3, [r7, #28]
    ca6a:	2200      	movs	r2, #0
    ca6c:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
    ca70:	69fb      	ldr	r3, [r7, #28]
    ca72:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
    ca76:	2b03      	cmp	r3, #3
    ca78:	d818      	bhi.n	caac <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0xe8>
			CO->RPDO[i]                     = &COO_RPDO[i];
    ca7a:	4b7e      	ldr	r3, [pc, #504]	; (cc74 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2b0>)
    ca7c:	6819      	ldr	r1, [r3, #0]
    ca7e:	69fb      	ldr	r3, [r7, #28]
    ca80:	f8d3 013c 	ldr.w	r0, [r3, #316]	; 0x13c
    ca84:	69fb      	ldr	r3, [r7, #28]
    ca86:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
    ca8a:	4613      	mov	r3, r2
    ca8c:	005b      	lsls	r3, r3, #1
    ca8e:	4413      	add	r3, r2
    ca90:	015b      	lsls	r3, r3, #5
    ca92:	4a86      	ldr	r2, [pc, #536]	; (ccac <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2e8>)
    ca94:	441a      	add	r2, r3
    ca96:	1d83      	adds	r3, r0, #6
    ca98:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for(i=0; i<CO_NO_RPDO; i++){
    ca9c:	69fb      	ldr	r3, [r7, #28]
    ca9e:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
    caa2:	1c5a      	adds	r2, r3, #1
    caa4:	69fb      	ldr	r3, [r7, #28]
    caa6:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
    caaa:	e7e1      	b.n	ca70 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0xac>
		}
		for(i=0; i<CO_NO_TPDO; i++){
    caac:	69fb      	ldr	r3, [r7, #28]
    caae:	2200      	movs	r2, #0
    cab0:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
    cab4:	69fb      	ldr	r3, [r7, #28]
    cab6:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
    caba:	2b03      	cmp	r3, #3
    cabc:	d817      	bhi.n	caee <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x12a>
			CO->TPDO[i]                     = &COO_TPDO[i];
    cabe:	4b6d      	ldr	r3, [pc, #436]	; (cc74 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2b0>)
    cac0:	681b      	ldr	r3, [r3, #0]
    cac2:	69fa      	ldr	r2, [r7, #28]
    cac4:	f8d2 213c 	ldr.w	r2, [r2, #316]	; 0x13c
    cac8:	69f9      	ldr	r1, [r7, #28]
    caca:	f8d1 113c 	ldr.w	r1, [r1, #316]	; 0x13c
    cace:	2058      	movs	r0, #88	; 0x58
    cad0:	fb00 f101 	mul.w	r1, r0, r1
    cad4:	4876      	ldr	r0, [pc, #472]	; (ccb0 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2ec>)
    cad6:	4401      	add	r1, r0
    cad8:	320a      	adds	r2, #10
    cada:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		for(i=0; i<CO_NO_TPDO; i++){
    cade:	69fb      	ldr	r3, [r7, #28]
    cae0:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
    cae4:	1c5a      	adds	r2, r3, #1
    cae6:	69fb      	ldr	r3, [r7, #28]
    cae8:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
    caec:	e7e2      	b.n	cab4 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0xf0>
		}
		
		CO->HBcons                          = &COO_HBcons;
    caee:	4b61      	ldr	r3, [pc, #388]	; (cc74 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2b0>)
    caf0:	681b      	ldr	r3, [r3, #0]
    caf2:	4a70      	ldr	r2, [pc, #448]	; (ccb4 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2f0>)
    caf4:	639a      	str	r2, [r3, #56]	; 0x38
		CO_HBcons_monitoredNodes            = &COO_HBcons_monitoredNodes[0];
    caf6:	4b70      	ldr	r3, [pc, #448]	; (ccb8 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2f4>)
    caf8:	4a70      	ldr	r2, [pc, #448]	; (ccbc <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2f8>)
    cafa:	601a      	str	r2, [r3, #0]

	if(errCnt != 0) return CO_ERROR_OUT_OF_MEMORY;
	#endif


	CO->CANmodule[0]->CANnormal = false;
    cafc:	4b5d      	ldr	r3, [pc, #372]	; (cc74 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2b0>)
    cafe:	681b      	ldr	r3, [r3, #0]
    cb00:	681b      	ldr	r3, [r3, #0]
    cb02:	2200      	movs	r2, #0
    cb04:	751a      	strb	r2, [r3, #20]
	CO_CANsetConfigurationMode(coCanDescr);
    cb06:	69fa      	ldr	r2, [r7, #28]
    cb08:	69fb      	ldr	r3, [r7, #28]
    cb0a:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
    cb0e:	4619      	mov	r1, r3
    cb10:	4610      	mov	r0, r2
    cb12:	4b6b      	ldr	r3, [pc, #428]	; (ccc0 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2fc>)
    cb14:	4798      	blx	r3

	/* Verify CANopen Node-ID */
	if(nodeId<1 || nodeId>127)
    cb16:	7dfb      	ldrb	r3, [r7, #23]
    cb18:	2b00      	cmp	r3, #0
    cb1a:	dd02      	ble.n	cb22 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x15e>
    cb1c:	7dfb      	ldrb	r3, [r7, #23]
    cb1e:	2b7f      	cmp	r3, #127	; 0x7f
    cb20:	dd05      	ble.n	cb2e <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x16a>
	{
		CO_delete();
    cb22:	69f8      	ldr	r0, [r7, #28]
    cb24:	4b67      	ldr	r3, [pc, #412]	; (ccc4 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x300>)
    cb26:	4798      	blx	r3
		return CO_ERROR_PARAMETERS;
    cb28:	f06f 030b 	mvn.w	r3, #11
    cb2c:	e2f5      	b.n	d11a <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x756>
	}


	err = CANmodule_init(
    cb2e:	69f8      	ldr	r0, [r7, #28]
    cb30:	4b50      	ldr	r3, [pc, #320]	; (cc74 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2b0>)
    cb32:	681b      	ldr	r3, [r3, #0]
    cb34:	6819      	ldr	r1, [r3, #0]
    cb36:	69fb      	ldr	r3, [r7, #28]
    cb38:	f8d3 4130 	ldr.w	r4, [r3, #304]	; 0x130
    cb3c:	4b50      	ldr	r3, [pc, #320]	; (cc80 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2bc>)
    cb3e:	681d      	ldr	r5, [r3, #0]
    cb40:	4b51      	ldr	r3, [pc, #324]	; (cc88 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2c4>)
    cb42:	681b      	ldr	r3, [r3, #0]
    cb44:	693a      	ldr	r2, [r7, #16]
    cb46:	9203      	str	r2, [sp, #12]
    cb48:	2208      	movs	r2, #8
    cb4a:	9202      	str	r2, [sp, #8]
    cb4c:	9301      	str	r3, [sp, #4]
    cb4e:	230b      	movs	r3, #11
    cb50:	9300      	str	r3, [sp, #0]
    cb52:	462b      	mov	r3, r5
    cb54:	4622      	mov	r2, r4
    cb56:	4c5c      	ldr	r4, [pc, #368]	; (ccc8 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x304>)
    cb58:	47a0      	blx	r4
    cb5a:	4603      	mov	r3, r0
    cb5c:	461a      	mov	r2, r3
    cb5e:	69fb      	ldr	r3, [r7, #28]
    cb60:	f883 2140 	strb.w	r2, [r3, #320]	; 0x140
	CO_RXCAN_NO_MSGS,
	CO_CANmodule_txArray0,
	CO_TXCAN_NO_MSGS,
	bitRate);

	if(err){CO_delete(); return err;}
    cb64:	69fb      	ldr	r3, [r7, #28]
    cb66:	f993 3140 	ldrsb.w	r3, [r3, #320]	; 0x140
    cb6a:	2b00      	cmp	r3, #0
    cb6c:	d006      	beq.n	cb7c <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x1b8>
    cb6e:	69f8      	ldr	r0, [r7, #28]
    cb70:	4b54      	ldr	r3, [pc, #336]	; (ccc4 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x300>)
    cb72:	4798      	blx	r3
    cb74:	69fb      	ldr	r3, [r7, #28]
    cb76:	f993 3140 	ldrsb.w	r3, [r3, #320]	; 0x140
    cb7a:	e2ce      	b.n	d11a <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x756>

	for (i=0; i<CO_NO_SDO_SERVER; i++)
    cb7c:	69fb      	ldr	r3, [r7, #28]
    cb7e:	2200      	movs	r2, #0
    cb80:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
    cb84:	69fb      	ldr	r3, [r7, #28]
    cb86:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
    cb8a:	2b00      	cmp	r3, #0
    cb8c:	f040 80a4 	bne.w	ccd8 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x314>
	{
		uint32_t COB_IDClientToServer;
		uint32_t COB_IDServerToClient;
		if(i==0){
    cb90:	69fb      	ldr	r3, [r7, #28]
    cb92:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
    cb96:	2b00      	cmp	r3, #0
    cb98:	d108      	bne.n	cbac <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x1e8>
			/*Default SDO server must be located at first index*/
			COB_IDClientToServer = CO_CAN_ID_RSDO + nodeId;
    cb9a:	7dfb      	ldrb	r3, [r7, #23]
    cb9c:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
    cba0:	62fb      	str	r3, [r7, #44]	; 0x2c
			COB_IDServerToClient = CO_CAN_ID_TSDO + nodeId;
    cba2:	7dfb      	ldrb	r3, [r7, #23]
    cba4:	f503 63b0 	add.w	r3, r3, #1408	; 0x580
    cba8:	62bb      	str	r3, [r7, #40]	; 0x28
    cbaa:	e017      	b.n	cbdc <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x218>
			}else{
			COB_IDClientToServer = OD_SDOServerParameter[i].COB_IDClientToServer;
    cbac:	69fb      	ldr	r3, [r7, #28]
    cbae:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
    cbb2:	4946      	ldr	r1, [pc, #280]	; (cccc <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x308>)
    cbb4:	4613      	mov	r3, r2
    cbb6:	005b      	lsls	r3, r3, #1
    cbb8:	4413      	add	r3, r2
    cbba:	009b      	lsls	r3, r3, #2
    cbbc:	440b      	add	r3, r1
    cbbe:	3364      	adds	r3, #100	; 0x64
    cbc0:	681b      	ldr	r3, [r3, #0]
    cbc2:	62fb      	str	r3, [r7, #44]	; 0x2c
			COB_IDServerToClient = OD_SDOServerParameter[i].COB_IDServerToClient;
    cbc4:	69fb      	ldr	r3, [r7, #28]
    cbc6:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
    cbca:	4940      	ldr	r1, [pc, #256]	; (cccc <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x308>)
    cbcc:	4613      	mov	r3, r2
    cbce:	005b      	lsls	r3, r3, #1
    cbd0:	4413      	add	r3, r2
    cbd2:	009b      	lsls	r3, r3, #2
    cbd4:	440b      	add	r3, r1
    cbd6:	3368      	adds	r3, #104	; 0x68
    cbd8:	681b      	ldr	r3, [r3, #0]
    cbda:	62bb      	str	r3, [r7, #40]	; 0x28
		}

		err = CO_SDO_init(
    cbdc:	69fb      	ldr	r3, [r7, #28]
    cbde:	f103 0e04 	add.w	lr, r3, #4
    cbe2:	4b24      	ldr	r3, [pc, #144]	; (cc74 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2b0>)
    cbe4:	681a      	ldr	r2, [r3, #0]
			CO->SDO[i],
    cbe6:	69fb      	ldr	r3, [r7, #28]
    cbe8:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
		err = CO_SDO_init(
    cbec:	009b      	lsls	r3, r3, #2
    cbee:	4413      	add	r3, r2
    cbf0:	685b      	ldr	r3, [r3, #4]
    cbf2:	60fb      	str	r3, [r7, #12]
			COB_IDClientToServer,
			COB_IDServerToClient,
			OD_H1200_SDO_SERVER_PARAM+i,
    cbf4:	69fb      	ldr	r3, [r7, #28]
    cbf6:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
		err = CO_SDO_init(
    cbfa:	f503 5290 	add.w	r2, r3, #4608	; 0x1200
			i==0 ? 0 : CO->SDO[0],
    cbfe:	69fb      	ldr	r3, [r7, #28]
    cc00:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
		err = CO_SDO_init(
    cc04:	2b00      	cmp	r3, #0
    cc06:	d003      	beq.n	cc10 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x24c>
			i==0 ? 0 : CO->SDO[0],
    cc08:	4b1a      	ldr	r3, [pc, #104]	; (cc74 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2b0>)
    cc0a:	681b      	ldr	r3, [r3, #0]
		err = CO_SDO_init(
    cc0c:	685b      	ldr	r3, [r3, #4]
    cc0e:	e000      	b.n	cc12 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x24e>
    cc10:	2300      	movs	r3, #0
    cc12:	4920      	ldr	r1, [pc, #128]	; (cc94 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2d0>)
    cc14:	6809      	ldr	r1, [r1, #0]
    cc16:	4817      	ldr	r0, [pc, #92]	; (cc74 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2b0>)
    cc18:	6800      	ldr	r0, [r0, #0]
    cc1a:	6800      	ldr	r0, [r0, #0]
			&CO_ObjDict[0],
			CO_OD_NoOfElements,
			CO_SDO_ODExtensions,
			nodeId,
			CO->CANmodule[0],
			CO_RXCAN_SDO_SRV+i,
    cc1c:	69fc      	ldr	r4, [r7, #28]
    cc1e:	f8d4 413c 	ldr.w	r4, [r4, #316]	; 0x13c
		err = CO_SDO_init(
    cc22:	3406      	adds	r4, #6
    cc24:	4d13      	ldr	r5, [pc, #76]	; (cc74 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2b0>)
    cc26:	682d      	ldr	r5, [r5, #0]
    cc28:	682d      	ldr	r5, [r5, #0]
			CO->CANmodule[0],
			CO_TXCAN_SDO_SRV+i);
    cc2a:	69fe      	ldr	r6, [r7, #28]
    cc2c:	f8d6 613c 	ldr.w	r6, [r6, #316]	; 0x13c
		err = CO_SDO_init(
    cc30:	3606      	adds	r6, #6
    cc32:	9609      	str	r6, [sp, #36]	; 0x24
    cc34:	9508      	str	r5, [sp, #32]
    cc36:	9407      	str	r4, [sp, #28]
    cc38:	9006      	str	r0, [sp, #24]
    cc3a:	7df8      	ldrb	r0, [r7, #23]
    cc3c:	9005      	str	r0, [sp, #20]
    cc3e:	9104      	str	r1, [sp, #16]
    cc40:	2137      	movs	r1, #55	; 0x37
    cc42:	9103      	str	r1, [sp, #12]
    cc44:	4922      	ldr	r1, [pc, #136]	; (ccd0 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x30c>)
    cc46:	9102      	str	r1, [sp, #8]
    cc48:	9301      	str	r3, [sp, #4]
    cc4a:	9200      	str	r2, [sp, #0]
    cc4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    cc4e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    cc50:	68f9      	ldr	r1, [r7, #12]
    cc52:	4670      	mov	r0, lr
    cc54:	4c1f      	ldr	r4, [pc, #124]	; (ccd4 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x310>)
    cc56:	47a0      	blx	r4
    cc58:	4603      	mov	r3, r0
    cc5a:	461a      	mov	r2, r3
    cc5c:	69fb      	ldr	r3, [r7, #28]
    cc5e:	f883 2140 	strb.w	r2, [r3, #320]	; 0x140
	for (i=0; i<CO_NO_SDO_SERVER; i++)
    cc62:	69fb      	ldr	r3, [r7, #28]
    cc64:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
    cc68:	1c5a      	adds	r2, r3, #1
    cc6a:	69fb      	ldr	r3, [r7, #28]
    cc6c:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
    cc70:	e788      	b.n	cb84 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x1c0>
    cc72:	bf00      	nop
    cc74:	20001100 	.word	0x20001100
    cc78:	200010c4 	.word	0x200010c4
    cc7c:	20001114 	.word	0x20001114
    cc80:	20001104 	.word	0x20001104
    cc84:	20001138 	.word	0x20001138
    cc88:	20001108 	.word	0x20001108
    cc8c:	200011e8 	.word	0x200011e8
    cc90:	20001268 	.word	0x20001268
    cc94:	2000110c 	.word	0x2000110c
    cc98:	200012f0 	.word	0x200012f0
    cc9c:	20001584 	.word	0x20001584
    cca0:	200015f0 	.word	0x200015f0
    cca4:	2000160c 	.word	0x2000160c
    cca8:	20001630 	.word	0x20001630
    ccac:	2000166c 	.word	0x2000166c
    ccb0:	200017ec 	.word	0x200017ec
    ccb4:	2000194c 	.word	0x2000194c
    ccb8:	20001110 	.word	0x20001110
    ccbc:	20001964 	.word	0x20001964
    ccc0:	0000d5e9 	.word	0x0000d5e9
    ccc4:	0000d149 	.word	0x0000d149
    ccc8:	0000d64d 	.word	0x0000d64d
    cccc:	20000294 	.word	0x20000294
    ccd0:	0001385c 	.word	0x0001385c
    ccd4:	00010735 	.word	0x00010735
	}

	if(err){CO_delete(); return err;}
    ccd8:	69fb      	ldr	r3, [r7, #28]
    ccda:	f993 3140 	ldrsb.w	r3, [r3, #320]	; 0x140
    ccde:	2b00      	cmp	r3, #0
    cce0:	d006      	beq.n	ccf0 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x32c>
    cce2:	69f8      	ldr	r0, [r7, #28]
    cce4:	4b7a      	ldr	r3, [pc, #488]	; (ced0 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x50c>)
    cce6:	4798      	blx	r3
    cce8:	69fb      	ldr	r3, [r7, #28]
    ccea:	f993 3140 	ldrsb.w	r3, [r3, #320]	; 0x140
    ccee:	e214      	b.n	d11a <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x756>


	err = EM_Init(
    ccf0:	69fb      	ldr	r3, [r7, #28]
    ccf2:	1d18      	adds	r0, r3, #4
    ccf4:	4b77      	ldr	r3, [pc, #476]	; (ced4 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x510>)
    ccf6:	681b      	ldr	r3, [r3, #0]
    ccf8:	6899      	ldr	r1, [r3, #8]
    ccfa:	4b76      	ldr	r3, [pc, #472]	; (ced4 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x510>)
    ccfc:	681b      	ldr	r3, [r3, #0]
    ccfe:	68dc      	ldr	r4, [r3, #12]
    cd00:	4b74      	ldr	r3, [pc, #464]	; (ced4 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x510>)
    cd02:	681b      	ldr	r3, [r3, #0]
    cd04:	685d      	ldr	r5, [r3, #4]
    cd06:	4b73      	ldr	r3, [pc, #460]	; (ced4 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x510>)
    cd08:	681b      	ldr	r3, [r3, #0]
    cd0a:	681b      	ldr	r3, [r3, #0]
			&OD_errorRegister,
			&OD_preDefinedErrorField[0],
			ODL_preDefinedErrorField_arrayLength,
			CO->CANmodule[0],
			CO_TXCAN_EMERG,
			CO_CAN_ID_EMERGENCY + (uint32_t)nodeId);
    cd0c:	7dfa      	ldrb	r2, [r7, #23]
	err = EM_Init(
    cd0e:	3280      	adds	r2, #128	; 0x80
    cd10:	9207      	str	r2, [sp, #28]
    cd12:	2201      	movs	r2, #1
    cd14:	9206      	str	r2, [sp, #24]
    cd16:	9305      	str	r3, [sp, #20]
    cd18:	2308      	movs	r3, #8
    cd1a:	9304      	str	r3, [sp, #16]
    cd1c:	4b6e      	ldr	r3, [pc, #440]	; (ced8 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x514>)
    cd1e:	9303      	str	r3, [sp, #12]
    cd20:	4b6e      	ldr	r3, [pc, #440]	; (cedc <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x518>)
    cd22:	9302      	str	r3, [sp, #8]
    cd24:	230a      	movs	r3, #10
    cd26:	9301      	str	r3, [sp, #4]
    cd28:	4b6d      	ldr	r3, [pc, #436]	; (cee0 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x51c>)
    cd2a:	9300      	str	r3, [sp, #0]
    cd2c:	462b      	mov	r3, r5
    cd2e:	4622      	mov	r2, r4
    cd30:	4c6c      	ldr	r4, [pc, #432]	; (cee4 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x520>)
    cd32:	47a0      	blx	r4
    cd34:	4603      	mov	r3, r0
    cd36:	461a      	mov	r2, r3
    cd38:	69fb      	ldr	r3, [r7, #28]
    cd3a:	f883 2140 	strb.w	r2, [r3, #320]	; 0x140

	if(err){CO_delete(); return err;}
    cd3e:	69fb      	ldr	r3, [r7, #28]
    cd40:	f993 3140 	ldrsb.w	r3, [r3, #320]	; 0x140
    cd44:	2b00      	cmp	r3, #0
    cd46:	d006      	beq.n	cd56 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x392>
    cd48:	69f8      	ldr	r0, [r7, #28]
    cd4a:	4b61      	ldr	r3, [pc, #388]	; (ced0 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x50c>)
    cd4c:	4798      	blx	r3
    cd4e:	69fb      	ldr	r3, [r7, #28]
    cd50:	f993 3140 	ldrsb.w	r3, [r3, #320]	; 0x140
    cd54:	e1e1      	b.n	d11a <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x756>


	err = NMT_Init(
    cd56:	69fb      	ldr	r3, [r7, #28]
    cd58:	f103 0010 	add.w	r0, r3, #16
    cd5c:	4b5d      	ldr	r3, [pc, #372]	; (ced4 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x510>)
    cd5e:	681b      	ldr	r3, [r3, #0]
    cd60:	691c      	ldr	r4, [r3, #16]
    cd62:	4b5c      	ldr	r3, [pc, #368]	; (ced4 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x510>)
    cd64:	681b      	ldr	r3, [r3, #0]
    cd66:	68dd      	ldr	r5, [r3, #12]
    cd68:	4b5a      	ldr	r3, [pc, #360]	; (ced4 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x510>)
    cd6a:	681b      	ldr	r3, [r3, #0]
    cd6c:	681b      	ldr	r3, [r3, #0]
    cd6e:	4a59      	ldr	r2, [pc, #356]	; (ced4 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x510>)
    cd70:	6812      	ldr	r2, [r2, #0]
    cd72:	6812      	ldr	r2, [r2, #0]
	CO->CANmodule[0],
	CO_RXCAN_NMT,
	CO_CAN_ID_NMT_SERVICE,
	CO->CANmodule[0],
	CO_TXCAN_HB,
	CO_CAN_ID_HEARTBEAT + nodeId);
    cd74:	7df9      	ldrb	r1, [r7, #23]
    cd76:	f501 61e0 	add.w	r1, r1, #1792	; 0x700
	err = NMT_Init(
    cd7a:	7dfe      	ldrb	r6, [r7, #23]
    cd7c:	9106      	str	r1, [sp, #24]
    cd7e:	2107      	movs	r1, #7
    cd80:	9105      	str	r1, [sp, #20]
    cd82:	9204      	str	r2, [sp, #16]
    cd84:	2200      	movs	r2, #0
    cd86:	9203      	str	r2, [sp, #12]
    cd88:	2200      	movs	r2, #0
    cd8a:	9202      	str	r2, [sp, #8]
    cd8c:	9301      	str	r3, [sp, #4]
    cd8e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
    cd92:	9300      	str	r3, [sp, #0]
    cd94:	4633      	mov	r3, r6
    cd96:	462a      	mov	r2, r5
    cd98:	4621      	mov	r1, r4
    cd9a:	4c53      	ldr	r4, [pc, #332]	; (cee8 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x524>)
    cd9c:	47a0      	blx	r4
    cd9e:	4603      	mov	r3, r0
    cda0:	461a      	mov	r2, r3
    cda2:	69fb      	ldr	r3, [r7, #28]
    cda4:	f883 2140 	strb.w	r2, [r3, #320]	; 0x140

	if(err){CO_delete(); return err;}
    cda8:	69fb      	ldr	r3, [r7, #28]
    cdaa:	f993 3140 	ldrsb.w	r3, [r3, #320]	; 0x140
    cdae:	2b00      	cmp	r3, #0
    cdb0:	d006      	beq.n	cdc0 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x3fc>
    cdb2:	69f8      	ldr	r0, [r7, #28]
    cdb4:	4b46      	ldr	r3, [pc, #280]	; (ced0 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x50c>)
    cdb6:	4798      	blx	r3
    cdb8:	69fb      	ldr	r3, [r7, #28]
    cdba:	f993 3140 	ldrsb.w	r3, [r3, #320]	; 0x140
    cdbe:	e1ac      	b.n	d11a <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x756>


	if (nodeId==1)
    cdc0:	7dfb      	ldrb	r3, [r7, #23]
    cdc2:	2b01      	cmp	r3, #1
    cdc4:	d10d      	bne.n	cde2 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x41e>
	{
				NMTM_txBuff = CAN_Tx_BufferInit(/* return pointer to 8-byte CAN data buffer, which should be populated */
    cdc6:	69f8      	ldr	r0, [r7, #28]
    cdc8:	2300      	movs	r3, #0
    cdca:	9301      	str	r3, [sp, #4]
    cdcc:	2302      	movs	r3, #2
    cdce:	9300      	str	r3, [sp, #0]
    cdd0:	2300      	movs	r3, #0
    cdd2:	2200      	movs	r2, #0
    cdd4:	2100      	movs	r1, #0
    cdd6:	4c45      	ldr	r4, [pc, #276]	; (ceec <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x528>)
    cdd8:	47a0      	blx	r4
    cdda:	4602      	mov	r2, r0
    cddc:	69fb      	ldr	r3, [r7, #28]
    cdde:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
	}
              /* synchronous message flag bit */



	err = SYNC_Init(
    cde2:	4b3c      	ldr	r3, [pc, #240]	; (ced4 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x510>)
    cde4:	681b      	ldr	r3, [r3, #0]
    cde6:	695e      	ldr	r6, [r3, #20]
    cde8:	4b3a      	ldr	r3, [pc, #232]	; (ced4 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x510>)
    cdea:	681b      	ldr	r3, [r3, #0]
    cdec:	689b      	ldr	r3, [r3, #8]
    cdee:	60fb      	str	r3, [r7, #12]
    cdf0:	4b38      	ldr	r3, [pc, #224]	; (ced4 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x510>)
    cdf2:	681b      	ldr	r3, [r3, #0]
    cdf4:	6859      	ldr	r1, [r3, #4]
    cdf6:	60b9      	str	r1, [r7, #8]
	CO->SYNC,
	CO->em,
	CO->SDO[0],
	&CO->NMT->operatingState,
    cdf8:	4b36      	ldr	r3, [pc, #216]	; (ced4 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x510>)
    cdfa:	681b      	ldr	r3, [r3, #0]
    cdfc:	691b      	ldr	r3, [r3, #16]
	err = SYNC_Init(
    cdfe:	607b      	str	r3, [r7, #4]
    ce00:	4b3b      	ldr	r3, [pc, #236]	; (cef0 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x52c>)
    ce02:	689b      	ldr	r3, [r3, #8]
    ce04:	4a3a      	ldr	r2, [pc, #232]	; (cef0 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x52c>)
    ce06:	68d2      	ldr	r2, [r2, #12]
    ce08:	4939      	ldr	r1, [pc, #228]	; (cef0 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x52c>)
    ce0a:	f891 1058 	ldrb.w	r1, [r1, #88]	; 0x58
    ce0e:	4831      	ldr	r0, [pc, #196]	; (ced4 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x510>)
    ce10:	6800      	ldr	r0, [r0, #0]
    ce12:	6800      	ldr	r0, [r0, #0]
    ce14:	4c2f      	ldr	r4, [pc, #188]	; (ced4 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x510>)
    ce16:	6824      	ldr	r4, [r4, #0]
    ce18:	6824      	ldr	r4, [r4, #0]
    ce1a:	2500      	movs	r5, #0
    ce1c:	9507      	str	r5, [sp, #28]
    ce1e:	9406      	str	r4, [sp, #24]
    ce20:	2401      	movs	r4, #1
    ce22:	9405      	str	r4, [sp, #20]
    ce24:	9004      	str	r0, [sp, #16]
    ce26:	9103      	str	r1, [sp, #12]
    ce28:	9202      	str	r2, [sp, #8]
    ce2a:	9301      	str	r3, [sp, #4]
    ce2c:	6878      	ldr	r0, [r7, #4]
    ce2e:	9000      	str	r0, [sp, #0]
    ce30:	68bb      	ldr	r3, [r7, #8]
    ce32:	68fa      	ldr	r2, [r7, #12]
    ce34:	4631      	mov	r1, r6
    ce36:	69f8      	ldr	r0, [r7, #28]
    ce38:	4c2e      	ldr	r4, [pc, #184]	; (cef4 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x530>)
    ce3a:	47a0      	blx	r4
    ce3c:	4603      	mov	r3, r0
    ce3e:	461a      	mov	r2, r3
    ce40:	69fb      	ldr	r3, [r7, #28]
    ce42:	f883 2140 	strb.w	r2, [r3, #320]	; 0x140
	CO->CANmodule[0],
	CO_RXCAN_SYNC,
	CO->CANmodule[0],
	CO_TXCAN_SYNC);

	if(err){CO_delete(); return err;}
    ce46:	69fb      	ldr	r3, [r7, #28]
    ce48:	f993 3140 	ldrsb.w	r3, [r3, #320]	; 0x140
    ce4c:	2b00      	cmp	r3, #0
    ce4e:	d006      	beq.n	ce5e <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x49a>
    ce50:	69f8      	ldr	r0, [r7, #28]
    ce52:	4b1f      	ldr	r3, [pc, #124]	; (ced0 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x50c>)
    ce54:	4798      	blx	r3
    ce56:	69fb      	ldr	r3, [r7, #28]
    ce58:	f993 3140 	ldrsb.w	r3, [r3, #320]	; 0x140
    ce5c:	e15d      	b.n	d11a <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x756>


	for(i=0; i<CO_NO_RPDO; i++){
    ce5e:	69fb      	ldr	r3, [r7, #28]
    ce60:	2200      	movs	r2, #0
    ce62:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
    ce66:	69fb      	ldr	r3, [r7, #28]
    ce68:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
    ce6c:	2b03      	cmp	r3, #3
    ce6e:	f200 8095 	bhi.w	cf9c <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x5d8>
		CO_CANmodule_t *CANdevRx = CO->CANmodule[0];
    ce72:	4b18      	ldr	r3, [pc, #96]	; (ced4 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x510>)
    ce74:	681b      	ldr	r3, [r3, #0]
    ce76:	681b      	ldr	r3, [r3, #0]
    ce78:	627b      	str	r3, [r7, #36]	; 0x24
		CANdevRxIdx = CO_RXCAN_RPDO + i;
    ce7a:	69fb      	ldr	r3, [r7, #28]
    ce7c:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
    ce80:	1c9a      	adds	r2, r3, #2
    ce82:	69fb      	ldr	r3, [r7, #28]
    ce84:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134

		err = CO_RPDO_init(
    ce88:	4b12      	ldr	r3, [pc, #72]	; (ced4 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x510>)
    ce8a:	681b      	ldr	r3, [r3, #0]
		CO->RPDO[i],
    ce8c:	69fa      	ldr	r2, [r7, #28]
    ce8e:	f8d2 213c 	ldr.w	r2, [r2, #316]	; 0x13c
		err = CO_RPDO_init(
    ce92:	3206      	adds	r2, #6
    ce94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    ce98:	60fb      	str	r3, [r7, #12]
    ce9a:	4b0e      	ldr	r3, [pc, #56]	; (ced4 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x510>)
    ce9c:	681b      	ldr	r3, [r3, #0]
    ce9e:	689b      	ldr	r3, [r3, #8]
    cea0:	60bb      	str	r3, [r7, #8]
    cea2:	4b0c      	ldr	r3, [pc, #48]	; (ced4 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x510>)
    cea4:	681b      	ldr	r3, [r3, #0]
    cea6:	685b      	ldr	r3, [r3, #4]
    cea8:	607b      	str	r3, [r7, #4]
    ceaa:	4b0a      	ldr	r3, [pc, #40]	; (ced4 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x510>)
    ceac:	681b      	ldr	r3, [r3, #0]
    ceae:	6958      	ldr	r0, [r3, #20]
		CO->em,
		CO->SDO[0],
		CO->SYNC,
		&CO->NMT->operatingState,
    ceb0:	4b08      	ldr	r3, [pc, #32]	; (ced4 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x510>)
    ceb2:	681b      	ldr	r3, [r3, #0]
    ceb4:	691b      	ldr	r3, [r3, #16]
		err = CO_RPDO_init(
    ceb6:	603b      	str	r3, [r7, #0]
		nodeId,
		((i<4) ? (CO_CAN_ID_RPDO_1+i*0x100) : 0),
    ceb8:	69fb      	ldr	r3, [r7, #28]
    ceba:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
		err = CO_RPDO_init(
    cebe:	2b03      	cmp	r3, #3
    cec0:	d81a      	bhi.n	cef8 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x534>
		((i<4) ? (CO_CAN_ID_RPDO_1+i*0x100) : 0),
    cec2:	69fb      	ldr	r3, [r7, #28]
    cec4:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
		err = CO_RPDO_init(
    cec8:	3302      	adds	r3, #2
    ceca:	021a      	lsls	r2, r3, #8
    cecc:	e015      	b.n	cefa <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x536>
    cece:	bf00      	nop
    ced0:	0000d149 	.word	0x0000d149
    ced4:	20001100 	.word	0x20001100
    ced8:	20000124 	.word	0x20000124
    cedc:	2000011c 	.word	0x2000011c
    cee0:	2000014c 	.word	0x2000014c
    cee4:	0000e0b1 	.word	0x0000e0b1
    cee8:	0000eba1 	.word	0x0000eba1
    ceec:	0000d8b5 	.word	0x0000d8b5
    cef0:	20000294 	.word	0x20000294
    cef4:	00012701 	.word	0x00012701
    cef8:	2200      	movs	r2, #0
		0,
		(CO_RPDOCommPar_t*) &OD_RPDOCommunicationParameter[i],
    cefa:	69fb      	ldr	r3, [r7, #28]
    cefc:	f8d3 113c 	ldr.w	r1, [r3, #316]	; 0x13c
    cf00:	460b      	mov	r3, r1
    cf02:	005b      	lsls	r3, r3, #1
    cf04:	440b      	add	r3, r1
    cf06:	009b      	lsls	r3, r3, #2
    cf08:	3368      	adds	r3, #104	; 0x68
    cf0a:	4986      	ldr	r1, [pc, #536]	; (d124 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x760>)
    cf0c:	440b      	add	r3, r1
    cf0e:	1d1c      	adds	r4, r3, #4
		(CO_RPDOMapPar_t*) &OD_RPDOMappingParameter[i],
    cf10:	69fb      	ldr	r3, [r7, #28]
    cf12:	f8d3 113c 	ldr.w	r1, [r3, #316]	; 0x13c
    cf16:	460b      	mov	r3, r1
    cf18:	00db      	lsls	r3, r3, #3
    cf1a:	440b      	add	r3, r1
    cf1c:	009b      	lsls	r3, r3, #2
    cf1e:	3398      	adds	r3, #152	; 0x98
    cf20:	4980      	ldr	r1, [pc, #512]	; (d124 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x760>)
    cf22:	440b      	add	r3, r1
    cf24:	3304      	adds	r3, #4
		OD_H1400_RXPDO_1_PARAM+i,
    cf26:	69f9      	ldr	r1, [r7, #28]
    cf28:	f8d1 113c 	ldr.w	r1, [r1, #316]	; 0x13c
		err = CO_RPDO_init(
    cf2c:	f501 51a0 	add.w	r1, r1, #5120	; 0x1400
		OD_H1600_RXPDO_1_MAPPING+i,
    cf30:	69fd      	ldr	r5, [r7, #28]
    cf32:	f8d5 513c 	ldr.w	r5, [r5, #316]	; 0x13c
		err = CO_RPDO_init(
    cf36:	f505 55b0 	add.w	r5, r5, #5632	; 0x1600
    cf3a:	69fe      	ldr	r6, [r7, #28]
    cf3c:	f8d6 6134 	ldr.w	r6, [r6, #308]	; 0x134
    cf40:	960a      	str	r6, [sp, #40]	; 0x28
    cf42:	6a7e      	ldr	r6, [r7, #36]	; 0x24
    cf44:	9609      	str	r6, [sp, #36]	; 0x24
    cf46:	9508      	str	r5, [sp, #32]
    cf48:	9107      	str	r1, [sp, #28]
    cf4a:	9306      	str	r3, [sp, #24]
    cf4c:	9405      	str	r4, [sp, #20]
    cf4e:	2300      	movs	r3, #0
    cf50:	9304      	str	r3, [sp, #16]
    cf52:	9203      	str	r2, [sp, #12]
    cf54:	7dfb      	ldrb	r3, [r7, #23]
    cf56:	9302      	str	r3, [sp, #8]
    cf58:	683b      	ldr	r3, [r7, #0]
    cf5a:	9301      	str	r3, [sp, #4]
    cf5c:	9000      	str	r0, [sp, #0]
    cf5e:	687b      	ldr	r3, [r7, #4]
    cf60:	68ba      	ldr	r2, [r7, #8]
    cf62:	68f9      	ldr	r1, [r7, #12]
    cf64:	69f8      	ldr	r0, [r7, #28]
    cf66:	4c70      	ldr	r4, [pc, #448]	; (d128 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x764>)
    cf68:	47a0      	blx	r4
    cf6a:	4603      	mov	r3, r0
    cf6c:	461a      	mov	r2, r3
    cf6e:	69fb      	ldr	r3, [r7, #28]
    cf70:	f883 2140 	strb.w	r2, [r3, #320]	; 0x140
		CANdevRx,
		CANdevRxIdx);

		if(err){CO_delete(); return err;}
    cf74:	69fb      	ldr	r3, [r7, #28]
    cf76:	f993 3140 	ldrsb.w	r3, [r3, #320]	; 0x140
    cf7a:	2b00      	cmp	r3, #0
    cf7c:	d006      	beq.n	cf8c <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x5c8>
    cf7e:	69f8      	ldr	r0, [r7, #28]
    cf80:	4b6a      	ldr	r3, [pc, #424]	; (d12c <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x768>)
    cf82:	4798      	blx	r3
    cf84:	69fb      	ldr	r3, [r7, #28]
    cf86:	f993 3140 	ldrsb.w	r3, [r3, #320]	; 0x140
    cf8a:	e0c6      	b.n	d11a <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x756>
	for(i=0; i<CO_NO_RPDO; i++){
    cf8c:	69fb      	ldr	r3, [r7, #28]
    cf8e:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
    cf92:	1c5a      	adds	r2, r3, #1
    cf94:	69fb      	ldr	r3, [r7, #28]
    cf96:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
    cf9a:	e764      	b.n	ce66 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x4a2>
	}


	for(i=0; i<CO_NO_TPDO; i++){
    cf9c:	69fb      	ldr	r3, [r7, #28]
    cf9e:	2200      	movs	r2, #0
    cfa0:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
    cfa4:	69fb      	ldr	r3, [r7, #28]
    cfa6:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
    cfaa:	2b03      	cmp	r3, #3
    cfac:	d876      	bhi.n	d09c <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x6d8>
		err = CO_TPDO_init(
    cfae:	4b60      	ldr	r3, [pc, #384]	; (d130 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x76c>)
    cfb0:	681b      	ldr	r3, [r3, #0]
		CO->TPDO[i],
    cfb2:	69fa      	ldr	r2, [r7, #28]
    cfb4:	f8d2 213c 	ldr.w	r2, [r2, #316]	; 0x13c
		err = CO_TPDO_init(
    cfb8:	320a      	adds	r2, #10
    cfba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    cfbe:	60fb      	str	r3, [r7, #12]
    cfc0:	4b5b      	ldr	r3, [pc, #364]	; (d130 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x76c>)
    cfc2:	681b      	ldr	r3, [r3, #0]
    cfc4:	689b      	ldr	r3, [r3, #8]
    cfc6:	60bb      	str	r3, [r7, #8]
    cfc8:	4b59      	ldr	r3, [pc, #356]	; (d130 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x76c>)
    cfca:	681b      	ldr	r3, [r3, #0]
    cfcc:	685b      	ldr	r3, [r3, #4]
    cfce:	607b      	str	r3, [r7, #4]
		CO->em,
		CO->SDO[0],
		&CO->NMT->operatingState,
    cfd0:	4b57      	ldr	r3, [pc, #348]	; (d130 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x76c>)
    cfd2:	681b      	ldr	r3, [r3, #0]
    cfd4:	691b      	ldr	r3, [r3, #16]
		err = CO_TPDO_init(
    cfd6:	603b      	str	r3, [r7, #0]
		nodeId,
		((i<4) ? (CO_CAN_ID_TPDO_1+i*0x100) : 0),
    cfd8:	69fb      	ldr	r3, [r7, #28]
    cfda:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
		err = CO_TPDO_init(
    cfde:	2b03      	cmp	r3, #3
    cfe0:	d806      	bhi.n	cff0 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x62c>
		((i<4) ? (CO_CAN_ID_TPDO_1+i*0x100) : 0),
    cfe2:	69fb      	ldr	r3, [r7, #28]
    cfe4:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
    cfe8:	021b      	lsls	r3, r3, #8
		err = CO_TPDO_init(
    cfea:	f503 72c0 	add.w	r2, r3, #384	; 0x180
    cfee:	e000      	b.n	cff2 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x62e>
    cff0:	2200      	movs	r2, #0
		0,
		(CO_TPDOCommPar_t*) &OD_TPDOCommunicationParameter[i],
    cff2:	69fb      	ldr	r3, [r7, #28]
    cff4:	f8d3 113c 	ldr.w	r1, [r3, #316]	; 0x13c
    cff8:	460b      	mov	r3, r1
    cffa:	00db      	lsls	r3, r3, #3
    cffc:	1a5b      	subs	r3, r3, r1
    cffe:	009b      	lsls	r3, r3, #2
    d000:	f503 7394 	add.w	r3, r3, #296	; 0x128
    d004:	4947      	ldr	r1, [pc, #284]	; (d124 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x760>)
    d006:	440b      	add	r3, r1
    d008:	1d18      	adds	r0, r3, #4
		(CO_TPDOMapPar_t*) &OD_TPDOMappingParameter[i],
    d00a:	69fb      	ldr	r3, [r7, #28]
    d00c:	f8d3 113c 	ldr.w	r1, [r3, #316]	; 0x13c
    d010:	460b      	mov	r3, r1
    d012:	00db      	lsls	r3, r3, #3
    d014:	440b      	add	r3, r1
    d016:	009b      	lsls	r3, r3, #2
    d018:	f503 73cc 	add.w	r3, r3, #408	; 0x198
    d01c:	4941      	ldr	r1, [pc, #260]	; (d124 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x760>)
    d01e:	440b      	add	r3, r1
    d020:	3304      	adds	r3, #4
		OD_H1800_TXPDO_1_PARAM+i,
    d022:	69f9      	ldr	r1, [r7, #28]
    d024:	f8d1 113c 	ldr.w	r1, [r1, #316]	; 0x13c
		err = CO_TPDO_init(
    d028:	f501 51c0 	add.w	r1, r1, #6144	; 0x1800
		OD_H1A00_TXPDO_1_MAPPING+i,
    d02c:	69fc      	ldr	r4, [r7, #28]
    d02e:	f8d4 413c 	ldr.w	r4, [r4, #316]	; 0x13c
		err = CO_TPDO_init(
    d032:	f504 54d0 	add.w	r4, r4, #6656	; 0x1a00
    d036:	4d3e      	ldr	r5, [pc, #248]	; (d130 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x76c>)
    d038:	682d      	ldr	r5, [r5, #0]
    d03a:	682d      	ldr	r5, [r5, #0]
		CO->CANmodule[0],
		CO_TXCAN_TPDO+i);
    d03c:	69fe      	ldr	r6, [r7, #28]
    d03e:	f8d6 613c 	ldr.w	r6, [r6, #316]	; 0x13c
		err = CO_TPDO_init(
    d042:	3602      	adds	r6, #2
    d044:	9609      	str	r6, [sp, #36]	; 0x24
    d046:	9508      	str	r5, [sp, #32]
    d048:	9407      	str	r4, [sp, #28]
    d04a:	9106      	str	r1, [sp, #24]
    d04c:	9305      	str	r3, [sp, #20]
    d04e:	9004      	str	r0, [sp, #16]
    d050:	2300      	movs	r3, #0
    d052:	9303      	str	r3, [sp, #12]
    d054:	9202      	str	r2, [sp, #8]
    d056:	7dfb      	ldrb	r3, [r7, #23]
    d058:	9301      	str	r3, [sp, #4]
    d05a:	683b      	ldr	r3, [r7, #0]
    d05c:	9300      	str	r3, [sp, #0]
    d05e:	687b      	ldr	r3, [r7, #4]
    d060:	68ba      	ldr	r2, [r7, #8]
    d062:	68f9      	ldr	r1, [r7, #12]
    d064:	69f8      	ldr	r0, [r7, #28]
    d066:	4c33      	ldr	r4, [pc, #204]	; (d134 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x770>)
    d068:	47a0      	blx	r4
    d06a:	4603      	mov	r3, r0
    d06c:	461a      	mov	r2, r3
    d06e:	69fb      	ldr	r3, [r7, #28]
    d070:	f883 2140 	strb.w	r2, [r3, #320]	; 0x140
		if(err){CO_delete(); return err;}
    d074:	69fb      	ldr	r3, [r7, #28]
    d076:	f993 3140 	ldrsb.w	r3, [r3, #320]	; 0x140
    d07a:	2b00      	cmp	r3, #0
    d07c:	d006      	beq.n	d08c <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x6c8>
    d07e:	69f8      	ldr	r0, [r7, #28]
    d080:	4b2a      	ldr	r3, [pc, #168]	; (d12c <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x768>)
    d082:	4798      	blx	r3
    d084:	69fb      	ldr	r3, [r7, #28]
    d086:	f993 3140 	ldrsb.w	r3, [r3, #320]	; 0x140
    d08a:	e046      	b.n	d11a <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x756>
	for(i=0; i<CO_NO_TPDO; i++){
    d08c:	69fb      	ldr	r3, [r7, #28]
    d08e:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
    d092:	1c5a      	adds	r2, r3, #1
    d094:	69fb      	ldr	r3, [r7, #28]
    d096:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
    d09a:	e783      	b.n	cfa4 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x5e0>
	}

	HB_SetNode(coNode);
    d09c:	69fb      	ldr	r3, [r7, #28]
    d09e:	f103 0214 	add.w	r2, r3, #20
    d0a2:	69fb      	ldr	r3, [r7, #28]
    d0a4:	f893 3148 	ldrb.w	r3, [r3, #328]	; 0x148
    d0a8:	4619      	mov	r1, r3
    d0aa:	4610      	mov	r0, r2
    d0ac:	4b22      	ldr	r3, [pc, #136]	; (d138 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x774>)
    d0ae:	4798      	blx	r3
	err = CO_HBconsumer_init(
    d0b0:	69fb      	ldr	r3, [r7, #28]
    d0b2:	f103 0014 	add.w	r0, r3, #20
    d0b6:	4b1e      	ldr	r3, [pc, #120]	; (d130 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x76c>)
    d0b8:	681b      	ldr	r3, [r3, #0]
    d0ba:	6b9c      	ldr	r4, [r3, #56]	; 0x38
    d0bc:	4b1c      	ldr	r3, [pc, #112]	; (d130 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x76c>)
    d0be:	681b      	ldr	r3, [r3, #0]
    d0c0:	689d      	ldr	r5, [r3, #8]
    d0c2:	4b1b      	ldr	r3, [pc, #108]	; (d130 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x76c>)
    d0c4:	681b      	ldr	r3, [r3, #0]
    d0c6:	685e      	ldr	r6, [r3, #4]
    d0c8:	4b1c      	ldr	r3, [pc, #112]	; (d13c <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x778>)
    d0ca:	681b      	ldr	r3, [r3, #0]
    d0cc:	4a18      	ldr	r2, [pc, #96]	; (d130 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x76c>)
    d0ce:	6812      	ldr	r2, [r2, #0]
    d0d0:	6812      	ldr	r2, [r2, #0]
    d0d2:	2107      	movs	r1, #7
    d0d4:	9104      	str	r1, [sp, #16]
    d0d6:	9203      	str	r2, [sp, #12]
    d0d8:	2204      	movs	r2, #4
    d0da:	9202      	str	r2, [sp, #8]
    d0dc:	9301      	str	r3, [sp, #4]
    d0de:	4b18      	ldr	r3, [pc, #96]	; (d140 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x77c>)
    d0e0:	9300      	str	r3, [sp, #0]
    d0e2:	4633      	mov	r3, r6
    d0e4:	462a      	mov	r2, r5
    d0e6:	4621      	mov	r1, r4
    d0e8:	4c16      	ldr	r4, [pc, #88]	; (d144 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x780>)
    d0ea:	47a0      	blx	r4
    d0ec:	4603      	mov	r3, r0
    d0ee:	461a      	mov	r2, r3
    d0f0:	69fb      	ldr	r3, [r7, #28]
    d0f2:	f883 2140 	strb.w	r2, [r3, #320]	; 0x140
	CO_HBcons_monitoredNodes,
	CO_NO_HB_CONS,
	CO->CANmodule[0],
	CO_RXCAN_CONS_HB);

	if(err){CO_delete(); return err;}
    d0f6:	69fb      	ldr	r3, [r7, #28]
    d0f8:	f993 3140 	ldrsb.w	r3, [r3, #320]	; 0x140
    d0fc:	2b00      	cmp	r3, #0
    d0fe:	d006      	beq.n	d10e <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x74a>
    d100:	69f8      	ldr	r0, [r7, #28]
    d102:	4b0a      	ldr	r3, [pc, #40]	; (d12c <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x768>)
    d104:	4798      	blx	r3
    d106:	69fb      	ldr	r3, [r7, #28]
    d108:	f993 3140 	ldrsb.w	r3, [r3, #320]	; 0x140
    d10c:	e005      	b.n	d11a <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x756>
		OD_INDEX_TRACE_CONFIG + i,
		OD_INDEX_TRACE + i);
	}
	#endif

	ptrCO=CO;
    d10e:	4b08      	ldr	r3, [pc, #32]	; (d130 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x76c>)
    d110:	681a      	ldr	r2, [r3, #0]
    d112:	69fb      	ldr	r3, [r7, #28]
    d114:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
	return CO_ERROR_NO;
    d118:	2300      	movs	r3, #0
}
    d11a:	4618      	mov	r0, r3
    d11c:	3734      	adds	r7, #52	; 0x34
    d11e:	46bd      	mov	sp, r7
    d120:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d122:	bf00      	nop
    d124:	20000294 	.word	0x20000294
    d128:	0000fcc1 	.word	0x0000fcc1
    d12c:	0000d149 	.word	0x0000d149
    d130:	20001100 	.word	0x20001100
    d134:	0000fdc9 	.word	0x0000fdc9
    d138:	0000eaa9 	.word	0x0000eaa9
    d13c:	20001110 	.word	0x20001110
    d140:	200002c4 	.word	0x200002c4
    d144:	0000e8b9 	.word	0x0000e8b9

0000d148 <_ZN8CO_Class9CO_deleteEv>:


/******************************************************************************/
void CO_Class::CO_delete(void){
    d148:	b580      	push	{r7, lr}
    d14a:	b082      	sub	sp, #8
    d14c:	af00      	add	r7, sp, #0
    d14e:	6078      	str	r0, [r7, #4]
	#ifndef CO_USE_GLOBALS
	uint32_t i;
	#endif

	CO_CANsetConfigurationMode(coCanDescr);
    d150:	687a      	ldr	r2, [r7, #4]
    d152:	687b      	ldr	r3, [r7, #4]
    d154:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
    d158:	4619      	mov	r1, r3
    d15a:	4610      	mov	r0, r2
    d15c:	4b04      	ldr	r3, [pc, #16]	; (d170 <_ZN8CO_Class9CO_deleteEv+0x28>)
    d15e:	4798      	blx	r3
	CANmodule_Disable();
    d160:	687b      	ldr	r3, [r7, #4]
    d162:	4618      	mov	r0, r3
    d164:	4b03      	ldr	r3, [pc, #12]	; (d174 <_ZN8CO_Class9CO_deleteEv+0x2c>)
    d166:	4798      	blx	r3
		free(CO_CANmodule_txArray0);
		free(CO_CANmodule_rxArray0);
		free(CO->CANmodule[0]);
		CO = NULL;
	#endif
}
    d168:	bf00      	nop
    d16a:	3708      	adds	r7, #8
    d16c:	46bd      	mov	sp, r7
    d16e:	bd80      	pop	{r7, pc}
    d170:	0000d5e9 	.word	0x0000d5e9
    d174:	0000d7a1 	.word	0x0000d7a1

0000d178 <_ZN8CO_Class7ProcessEmPm>:


/******************************************************************************/
CO_NMT_reset_cmd_t CO_Class::Process(uint32_t                timeDifference_ms,
uint32_t               *timerNext_ms)
{
    d178:	b590      	push	{r4, r7, lr}
    d17a:	b08b      	sub	sp, #44	; 0x2c
    d17c:	af04      	add	r7, sp, #16
    d17e:	60f8      	str	r0, [r7, #12]
    d180:	60b9      	str	r1, [r7, #8]
    d182:	607a      	str	r2, [r7, #4]
	uint8_t i;
	bool_t NMTisPreOrOperational = false;
    d184:	2300      	movs	r3, #0
    d186:	75bb      	strb	r3, [r7, #22]
	CO_NMT_reset_cmd_t reset = CO_RESET_NOT;
    d188:	2300      	movs	r3, #0
    d18a:	757b      	strb	r3, [r7, #21]
	ms50 = 0;
    d18c:	68fb      	ldr	r3, [r7, #12]
    d18e:	2200      	movs	r2, #0
    d190:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
	if(CO->NMT->operatingState == CO_NMT_PRE_OPERATIONAL || CO->NMT->operatingState == CO_NMT_OPERATIONAL)
    d194:	4b3c      	ldr	r3, [pc, #240]	; (d288 <_ZN8CO_Class7ProcessEmPm+0x110>)
    d196:	681b      	ldr	r3, [r3, #0]
    d198:	691b      	ldr	r3, [r3, #16]
    d19a:	781b      	ldrb	r3, [r3, #0]
    d19c:	2b7f      	cmp	r3, #127	; 0x7f
    d19e:	d005      	beq.n	d1ac <_ZN8CO_Class7ProcessEmPm+0x34>
    d1a0:	4b39      	ldr	r3, [pc, #228]	; (d288 <_ZN8CO_Class7ProcessEmPm+0x110>)
    d1a2:	681b      	ldr	r3, [r3, #0]
    d1a4:	691b      	ldr	r3, [r3, #16]
    d1a6:	781b      	ldrb	r3, [r3, #0]
    d1a8:	2b05      	cmp	r3, #5
    d1aa:	d101      	bne.n	d1b0 <_ZN8CO_Class7ProcessEmPm+0x38>
	NMTisPreOrOperational = true;
    d1ac:	2301      	movs	r3, #1
    d1ae:	75bb      	strb	r3, [r7, #22]

	ms50 += timeDifference_ms;
    d1b0:	68fb      	ldr	r3, [r7, #12]
    d1b2:	f8d3 2138 	ldr.w	r2, [r3, #312]	; 0x138
    d1b6:	68bb      	ldr	r3, [r7, #8]
    d1b8:	441a      	add	r2, r3
    d1ba:	68fb      	ldr	r3, [r7, #12]
    d1bc:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
	if(ms50 >= 50){
    d1c0:	68fb      	ldr	r3, [r7, #12]
    d1c2:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
    d1c6:	2b31      	cmp	r3, #49	; 0x31
    d1c8:	d907      	bls.n	d1da <_ZN8CO_Class7ProcessEmPm+0x62>
		ms50 -= 50;
    d1ca:	68fb      	ldr	r3, [r7, #12]
    d1cc:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
    d1d0:	f1a3 0232 	sub.w	r2, r3, #50	; 0x32
    d1d4:	68fb      	ldr	r3, [r7, #12]
    d1d6:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
		//CO_NMT_blinkingProcess50ms();
	}
	if(timerNext_ms != NULL){
    d1da:	687b      	ldr	r3, [r7, #4]
    d1dc:	2b00      	cmp	r3, #0
    d1de:	d006      	beq.n	d1ee <_ZN8CO_Class7ProcessEmPm+0x76>
		if(*timerNext_ms > 50){
    d1e0:	687b      	ldr	r3, [r7, #4]
    d1e2:	681b      	ldr	r3, [r3, #0]
    d1e4:	2b32      	cmp	r3, #50	; 0x32
    d1e6:	d902      	bls.n	d1ee <_ZN8CO_Class7ProcessEmPm+0x76>
			*timerNext_ms = 50;
    d1e8:	687b      	ldr	r3, [r7, #4]
    d1ea:	2232      	movs	r2, #50	; 0x32
    d1ec:	601a      	str	r2, [r3, #0]
		}
	}


	for(i=0; i<CO_NO_SDO_SERVER; i++){
    d1ee:	2300      	movs	r3, #0
    d1f0:	75fb      	strb	r3, [r7, #23]
    d1f2:	7dfb      	ldrb	r3, [r7, #23]
    d1f4:	2b00      	cmp	r3, #0
    d1f6:	dc0d      	bgt.n	d214 <_ZN8CO_Class7ProcessEmPm+0x9c>
		CO_SDO_process(
    d1f8:	68fb      	ldr	r3, [r7, #12]
    d1fa:	1d18      	adds	r0, r3, #4
	
		NMTisPreOrOperational,
		timeDifference_ms,
		1000,
		timerNext_ms);
    d1fc:	7db9      	ldrb	r1, [r7, #22]
    d1fe:	687b      	ldr	r3, [r7, #4]
    d200:	9300      	str	r3, [sp, #0]
    d202:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    d206:	68ba      	ldr	r2, [r7, #8]
    d208:	4c20      	ldr	r4, [pc, #128]	; (d28c <_ZN8CO_Class7ProcessEmPm+0x114>)
    d20a:	47a0      	blx	r4
	for(i=0; i<CO_NO_SDO_SERVER; i++){
    d20c:	7dfb      	ldrb	r3, [r7, #23]
    d20e:	3301      	adds	r3, #1
    d210:	75fb      	strb	r3, [r7, #23]
    d212:	e7ee      	b.n	d1f2 <_ZN8CO_Class7ProcessEmPm+0x7a>
	}

	EM_process(
    d214:	68fb      	ldr	r3, [r7, #12]
    d216:	1d18      	adds	r0, r3, #4
    d218:	4b1b      	ldr	r3, [pc, #108]	; (d288 <_ZN8CO_Class7ProcessEmPm+0x110>)
    d21a:	681b      	ldr	r3, [r3, #0]
    d21c:	68d9      	ldr	r1, [r3, #12]
    d21e:	68ba      	ldr	r2, [r7, #8]
    d220:	4613      	mov	r3, r2
    d222:	009b      	lsls	r3, r3, #2
    d224:	4413      	add	r3, r2
    d226:	005b      	lsls	r3, r3, #1
    d228:	461c      	mov	r4, r3
	CO->emPr,
	NMTisPreOrOperational,
	timeDifference_ms * 10,
	OD_inhibitTimeEMCY);
    d22a:	4b19      	ldr	r3, [pc, #100]	; (d290 <_ZN8CO_Class7ProcessEmPm+0x118>)
    d22c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    d22e:	7dba      	ldrb	r2, [r7, #22]
    d230:	9300      	str	r3, [sp, #0]
    d232:	4623      	mov	r3, r4
    d234:	4c17      	ldr	r4, [pc, #92]	; (d294 <_ZN8CO_Class7ProcessEmPm+0x11c>)
    d236:	47a0      	blx	r4


	reset = NMT_Process(
    d238:	68fb      	ldr	r3, [r7, #12]
    d23a:	f103 0010 	add.w	r0, r3, #16
	timeDifference_ms,
	OD_producerHeartbeatTime,
    d23e:	4b14      	ldr	r3, [pc, #80]	; (d290 <_ZN8CO_Class7ProcessEmPm+0x118>)
    d240:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
	reset = NMT_Process(
    d244:	461c      	mov	r4, r3
    d246:	4b12      	ldr	r3, [pc, #72]	; (d290 <_ZN8CO_Class7ProcessEmPm+0x118>)
    d248:	f8d3 122c 	ldr.w	r1, [r3, #556]	; 0x22c
    d24c:	4b12      	ldr	r3, [pc, #72]	; (d298 <_ZN8CO_Class7ProcessEmPm+0x120>)
    d24e:	791b      	ldrb	r3, [r3, #4]
	OD_NMTStartup,
	OD_errorRegister,
	OD_errorBehavior,
	timerNext_ms);
    d250:	687a      	ldr	r2, [r7, #4]
    d252:	9202      	str	r2, [sp, #8]
    d254:	4a11      	ldr	r2, [pc, #68]	; (d29c <_ZN8CO_Class7ProcessEmPm+0x124>)
    d256:	9201      	str	r2, [sp, #4]
    d258:	9300      	str	r3, [sp, #0]
    d25a:	460b      	mov	r3, r1
    d25c:	4622      	mov	r2, r4
    d25e:	68b9      	ldr	r1, [r7, #8]
    d260:	4c0f      	ldr	r4, [pc, #60]	; (d2a0 <_ZN8CO_Class7ProcessEmPm+0x128>)
    d262:	47a0      	blx	r4
    d264:	4603      	mov	r3, r0
    d266:	757b      	strb	r3, [r7, #21]

	CO_HBconsumer_process(
    d268:	68fb      	ldr	r3, [r7, #12]
    d26a:	f103 0014 	add.w	r0, r3, #20
    d26e:	4b06      	ldr	r3, [pc, #24]	; (d288 <_ZN8CO_Class7ProcessEmPm+0x110>)
    d270:	681b      	ldr	r3, [r3, #0]
    d272:	6b99      	ldr	r1, [r3, #56]	; 0x38
	CO->HBcons,
	NMTisPreOrOperational,
	timeDifference_ms);
    d274:	7dba      	ldrb	r2, [r7, #22]
    d276:	68bb      	ldr	r3, [r7, #8]
    d278:	4c0a      	ldr	r4, [pc, #40]	; (d2a4 <_ZN8CO_Class7ProcessEmPm+0x12c>)
    d27a:	47a0      	blx	r4

	return reset;
    d27c:	7d7b      	ldrb	r3, [r7, #21]
}
    d27e:	4618      	mov	r0, r3
    d280:	371c      	adds	r7, #28
    d282:	46bd      	mov	sp, r7
    d284:	bd90      	pop	{r4, r7, pc}
    d286:	bf00      	nop
    d288:	20001100 	.word	0x20001100
    d28c:	000110d1 	.word	0x000110d1
    d290:	20000294 	.word	0x20000294
    d294:	0000e1f9 	.word	0x0000e1f9
    d298:	20000118 	.word	0x20000118
    d29c:	200002ed 	.word	0x200002ed
    d2a0:	0000ecad 	.word	0x0000ecad
    d2a4:	0000e97d 	.word	0x0000e97d

0000d2a8 <_ZN8CO_Class20CO_process_SYNC_RPDOEm>:


/******************************************************************************/
bool_t CO_Class::CO_process_SYNC_RPDO(uint32_t                timeDifference_us)
{
    d2a8:	b590      	push	{r4, r7, lr}
    d2aa:	b085      	sub	sp, #20
    d2ac:	af00      	add	r7, sp, #0
    d2ae:	6078      	str	r0, [r7, #4]
    d2b0:	6039      	str	r1, [r7, #0]
	uint32_t i;
	bool_t syncWas = false;
    d2b2:	2300      	movs	r3, #0
    d2b4:	72fb      	strb	r3, [r7, #11]

	switch(CO_SYNC_process(CO->SYNC, timeDifference_us, OD_synchronousWindowLength)){
    d2b6:	4b18      	ldr	r3, [pc, #96]	; (d318 <_ZN8CO_Class20CO_process_SYNC_RPDOEm+0x70>)
    d2b8:	681b      	ldr	r3, [r3, #0]
    d2ba:	6959      	ldr	r1, [r3, #20]
    d2bc:	4b17      	ldr	r3, [pc, #92]	; (d31c <_ZN8CO_Class20CO_process_SYNC_RPDOEm+0x74>)
    d2be:	691b      	ldr	r3, [r3, #16]
    d2c0:	683a      	ldr	r2, [r7, #0]
    d2c2:	6878      	ldr	r0, [r7, #4]
    d2c4:	4c16      	ldr	r4, [pc, #88]	; (d320 <_ZN8CO_Class20CO_process_SYNC_RPDOEm+0x78>)
    d2c6:	47a0      	blx	r4
    d2c8:	4603      	mov	r3, r0
    d2ca:	2b01      	cmp	r3, #1
    d2cc:	d002      	beq.n	d2d4 <_ZN8CO_Class20CO_process_SYNC_RPDOEm+0x2c>
    d2ce:	2b02      	cmp	r3, #2
    d2d0:	d003      	beq.n	d2da <_ZN8CO_Class20CO_process_SYNC_RPDOEm+0x32>
    d2d2:	e007      	b.n	d2e4 <_ZN8CO_Class20CO_process_SYNC_RPDOEm+0x3c>
		case 1:     //immediately after the SYNC message
		syncWas = true;
    d2d4:	2301      	movs	r3, #1
    d2d6:	72fb      	strb	r3, [r7, #11]
		break;
    d2d8:	e004      	b.n	d2e4 <_ZN8CO_Class20CO_process_SYNC_RPDOEm+0x3c>
		case 2:     //outside SYNC window
		CANClearPendingSyncPDOs();
    d2da:	687b      	ldr	r3, [r7, #4]
    d2dc:	4618      	mov	r0, r3
    d2de:	4b11      	ldr	r3, [pc, #68]	; (d324 <_ZN8CO_Class20CO_process_SYNC_RPDOEm+0x7c>)
    d2e0:	4798      	blx	r3
		break;
    d2e2:	bf00      	nop
	}

	for(i=0; i<CO_NO_RPDO; i++){
    d2e4:	2300      	movs	r3, #0
    d2e6:	60fb      	str	r3, [r7, #12]
    d2e8:	68fb      	ldr	r3, [r7, #12]
    d2ea:	2b03      	cmp	r3, #3
    d2ec:	d80e      	bhi.n	d30c <_ZN8CO_Class20CO_process_SYNC_RPDOEm+0x64>
		CO_RPDO_process(CO->RPDO[i], syncWas);
    d2ee:	4b0a      	ldr	r3, [pc, #40]	; (d318 <_ZN8CO_Class20CO_process_SYNC_RPDOEm+0x70>)
    d2f0:	681b      	ldr	r3, [r3, #0]
    d2f2:	68fa      	ldr	r2, [r7, #12]
    d2f4:	3206      	adds	r2, #6
    d2f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    d2fa:	7afa      	ldrb	r2, [r7, #11]
    d2fc:	4619      	mov	r1, r3
    d2fe:	6878      	ldr	r0, [r7, #4]
    d300:	4b09      	ldr	r3, [pc, #36]	; (d328 <_ZN8CO_Class20CO_process_SYNC_RPDOEm+0x80>)
    d302:	4798      	blx	r3
	for(i=0; i<CO_NO_RPDO; i++){
    d304:	68fb      	ldr	r3, [r7, #12]
    d306:	3301      	adds	r3, #1
    d308:	60fb      	str	r3, [r7, #12]
    d30a:	e7ed      	b.n	d2e8 <_ZN8CO_Class20CO_process_SYNC_RPDOEm+0x40>
	}

	return syncWas;
    d30c:	7afb      	ldrb	r3, [r7, #11]
}
    d30e:	4618      	mov	r0, r3
    d310:	3714      	adds	r7, #20
    d312:	46bd      	mov	sp, r7
    d314:	bd90      	pop	{r4, r7, pc}
    d316:	bf00      	nop
    d318:	20001100 	.word	0x20001100
    d31c:	20000294 	.word	0x20000294
    d320:	00012895 	.word	0x00012895
    d324:	0000daa5 	.word	0x0000daa5
    d328:	00010185 	.word	0x00010185

0000d32c <_ZN8CO_Class15CO_process_TPDOEhm>:


/******************************************************************************/
void CO_Class::CO_process_TPDO(bool_t                  syncWas,
uint32_t                timeDifference_us)
{
    d32c:	b590      	push	{r4, r7, lr}
    d32e:	b089      	sub	sp, #36	; 0x24
    d330:	af02      	add	r7, sp, #8
    d332:	60f8      	str	r0, [r7, #12]
    d334:	460b      	mov	r3, r1
    d336:	607a      	str	r2, [r7, #4]
    d338:	72fb      	strb	r3, [r7, #11]
	uint32_t i;

	/* Verify PDO Change Of State and process PDOs */
	for(i=0; i<CO_NO_TPDO; i++){
    d33a:	2300      	movs	r3, #0
    d33c:	617b      	str	r3, [r7, #20]
    d33e:	697b      	ldr	r3, [r7, #20]
    d340:	2b03      	cmp	r3, #3
    d342:	d82e      	bhi.n	d3a2 <_ZN8CO_Class15CO_process_TPDOEhm+0x76>
		if(!CO->TPDO[i]->sendRequest) CO->TPDO[i]->sendRequest = CO_TPDOisCOS(CO->TPDO[i]);
    d344:	4b19      	ldr	r3, [pc, #100]	; (d3ac <_ZN8CO_Class15CO_process_TPDOEhm+0x80>)
    d346:	681b      	ldr	r3, [r3, #0]
    d348:	697a      	ldr	r2, [r7, #20]
    d34a:	320a      	adds	r2, #10
    d34c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    d350:	7fdb      	ldrb	r3, [r3, #31]
    d352:	2b00      	cmp	r3, #0
    d354:	d111      	bne.n	d37a <_ZN8CO_Class15CO_process_TPDOEhm+0x4e>
    d356:	4b15      	ldr	r3, [pc, #84]	; (d3ac <_ZN8CO_Class15CO_process_TPDOEhm+0x80>)
    d358:	681b      	ldr	r3, [r3, #0]
    d35a:	697a      	ldr	r2, [r7, #20]
    d35c:	320a      	adds	r2, #10
    d35e:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
    d362:	4b12      	ldr	r3, [pc, #72]	; (d3ac <_ZN8CO_Class15CO_process_TPDOEhm+0x80>)
    d364:	681b      	ldr	r3, [r3, #0]
    d366:	697a      	ldr	r2, [r7, #20]
    d368:	320a      	adds	r2, #10
    d36a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    d36e:	4619      	mov	r1, r3
    d370:	68f8      	ldr	r0, [r7, #12]
    d372:	4b0f      	ldr	r3, [pc, #60]	; (d3b0 <_ZN8CO_Class15CO_process_TPDOEhm+0x84>)
    d374:	4798      	blx	r3
    d376:	4603      	mov	r3, r0
    d378:	77e3      	strb	r3, [r4, #31]
		CO_TPDO_process(CO->TPDO[i], CO->SYNC, syncWas, timeDifference_us);
    d37a:	4b0c      	ldr	r3, [pc, #48]	; (d3ac <_ZN8CO_Class15CO_process_TPDOEhm+0x80>)
    d37c:	681b      	ldr	r3, [r3, #0]
    d37e:	697a      	ldr	r2, [r7, #20]
    d380:	320a      	adds	r2, #10
    d382:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    d386:	4b09      	ldr	r3, [pc, #36]	; (d3ac <_ZN8CO_Class15CO_process_TPDOEhm+0x80>)
    d388:	681b      	ldr	r3, [r3, #0]
    d38a:	695a      	ldr	r2, [r3, #20]
    d38c:	7af8      	ldrb	r0, [r7, #11]
    d38e:	687b      	ldr	r3, [r7, #4]
    d390:	9300      	str	r3, [sp, #0]
    d392:	4603      	mov	r3, r0
    d394:	68f8      	ldr	r0, [r7, #12]
    d396:	4c07      	ldr	r4, [pc, #28]	; (d3b4 <_ZN8CO_Class15CO_process_TPDOEhm+0x88>)
    d398:	47a0      	blx	r4
	for(i=0; i<CO_NO_TPDO; i++){
    d39a:	697b      	ldr	r3, [r7, #20]
    d39c:	3301      	adds	r3, #1
    d39e:	617b      	str	r3, [r7, #20]
    d3a0:	e7cd      	b.n	d33e <_ZN8CO_Class15CO_process_TPDOEhm+0x12>
	}
}
    d3a2:	bf00      	nop
    d3a4:	371c      	adds	r7, #28
    d3a6:	46bd      	mov	sp, r7
    d3a8:	bd90      	pop	{r4, r7, pc}
    d3aa:	bf00      	nop
    d3ac:	20001100 	.word	0x20001100
    d3b0:	0000ff09 	.word	0x0000ff09
    d3b4:	00010255 	.word	0x00010255

0000d3b8 <hri_can_read_TXFQS_TFFL_bf>:
{
	return (((Can *)hw)->TXFQS.reg & CAN_TXFQS_TFFL(mask)) >> CAN_TXFQS_TFFL_Pos;
}

static inline hri_can_txfqs_reg_t hri_can_read_TXFQS_TFFL_bf(const void *const hw)
{
    d3b8:	b480      	push	{r7}
    d3ba:	b083      	sub	sp, #12
    d3bc:	af00      	add	r7, sp, #0
    d3be:	6078      	str	r0, [r7, #4]
	return (((Can *)hw)->TXFQS.reg & CAN_TXFQS_TFFL_Msk) >> CAN_TXFQS_TFFL_Pos;
    d3c0:	687b      	ldr	r3, [r7, #4]
    d3c2:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
    d3c6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
}
    d3ca:	4618      	mov	r0, r3
    d3cc:	370c      	adds	r7, #12
    d3ce:	46bd      	mov	sp, r7
    d3d0:	bc80      	pop	{r7}
    d3d2:	4770      	bx	lr

0000d3d4 <hri_can_read_IR_reg>:
	((Can *)hw)->IR.reg ^= mask;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline hri_can_ir_reg_t hri_can_read_IR_reg(const void *const hw)
{
    d3d4:	b480      	push	{r7}
    d3d6:	b083      	sub	sp, #12
    d3d8:	af00      	add	r7, sp, #0
    d3da:	6078      	str	r0, [r7, #4]
	return ((Can *)hw)->IR.reg;
    d3dc:	687b      	ldr	r3, [r7, #4]
    d3de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
}
    d3e0:	4618      	mov	r0, r3
    d3e2:	370c      	adds	r7, #12
    d3e4:	46bd      	mov	sp, r7
    d3e6:	bc80      	pop	{r7}
    d3e8:	4770      	bx	lr
	...

0000d3ec <_ZL14CO_rx_callbackP20can_async_descriptor>:
#include "string.h"

CO_Driver_Class		*ptrCODriverClass;

static void CO_rx_callback(struct can_async_descriptor *const descr)
{
    d3ec:	b580      	push	{r7, lr}
    d3ee:	b082      	sub	sp, #8
    d3f0:	af00      	add	r7, sp, #0
    d3f2:	6078      	str	r0, [r7, #4]
	ptrCODriverClass->receivedCOMsg.data=ptrCODriverClass->co_rx_buffer_64;
    d3f4:	4b0e      	ldr	r3, [pc, #56]	; (d430 <_ZL14CO_rx_callbackP20can_async_descriptor+0x44>)
    d3f6:	681b      	ldr	r3, [r3, #0]
    d3f8:	4a0d      	ldr	r2, [pc, #52]	; (d430 <_ZL14CO_rx_callbackP20can_async_descriptor+0x44>)
    d3fa:	6812      	ldr	r2, [r2, #0]
    d3fc:	3223      	adds	r2, #35	; 0x23
    d3fe:	66da      	str	r2, [r3, #108]	; 0x6c
	can_async_read(descr, &(ptrCODriverClass->receivedCOMsg));
    d400:	4b0b      	ldr	r3, [pc, #44]	; (d430 <_ZL14CO_rx_callbackP20can_async_descriptor+0x44>)
    d402:	681b      	ldr	r3, [r3, #0]
    d404:	3364      	adds	r3, #100	; 0x64
    d406:	4619      	mov	r1, r3
    d408:	6878      	ldr	r0, [r7, #4]
    d40a:	4b0a      	ldr	r3, [pc, #40]	; (d434 <_ZL14CO_rx_callbackP20can_async_descriptor+0x48>)
    d40c:	4798      	blx	r3
	ptrCODriverClass->ProcessInterrupt_Rx();
    d40e:	4b08      	ldr	r3, [pc, #32]	; (d430 <_ZL14CO_rx_callbackP20can_async_descriptor+0x44>)
    d410:	681b      	ldr	r3, [r3, #0]
    d412:	681b      	ldr	r3, [r3, #0]
    d414:	681b      	ldr	r3, [r3, #0]
    d416:	4a06      	ldr	r2, [pc, #24]	; (d430 <_ZL14CO_rx_callbackP20can_async_descriptor+0x44>)
    d418:	6812      	ldr	r2, [r2, #0]
    d41a:	4610      	mov	r0, r2
    d41c:	4798      	blx	r3
	ptrCODriverClass->receivedRxCOCallback=true;
    d41e:	4b04      	ldr	r3, [pc, #16]	; (d430 <_ZL14CO_rx_callbackP20can_async_descriptor+0x44>)
    d420:	681b      	ldr	r3, [r3, #0]
    d422:	2201      	movs	r2, #1
    d424:	f883 2020 	strb.w	r2, [r3, #32]
// 	if(ptrCODriver->RxFifo_Callback_CanModule_p != NULL)
// 	{
// 		ProcessInterrupt_Rx();
// 	
}
    d428:	bf00      	nop
    d42a:	3708      	adds	r7, #8
    d42c:	46bd      	mov	sp, r7
    d42e:	bd80      	pop	{r7, pc}
    d430:	200019a4 	.word	0x200019a4
    d434:	00001779 	.word	0x00001779

0000d438 <_ZL21CO_IRQ_Error_CallbackP20can_async_descriptor>:

static void CO_IRQ_Error_Callback(struct can_async_descriptor *const descr)
{
    d438:	b590      	push	{r4, r7, lr}
    d43a:	b083      	sub	sp, #12
    d43c:	af00      	add	r7, sp, #0
    d43e:	6078      	str	r0, [r7, #4]

	ptrCODriverClass->HalCanErrorCode= hri_can_read_IR_reg(descr->dev.hw);
    d440:	4b08      	ldr	r3, [pc, #32]	; (d464 <_ZL21CO_IRQ_Error_CallbackP20can_async_descriptor+0x2c>)
    d442:	681c      	ldr	r4, [r3, #0]
    d444:	687b      	ldr	r3, [r7, #4]
    d446:	681b      	ldr	r3, [r3, #0]
    d448:	4618      	mov	r0, r3
    d44a:	4b07      	ldr	r3, [pc, #28]	; (d468 <_ZL21CO_IRQ_Error_CallbackP20can_async_descriptor+0x30>)
    d44c:	4798      	blx	r3
    d44e:	4603      	mov	r3, r0
    d450:	61e3      	str	r3, [r4, #28]
	ptrCODriverClass->receivedIntCOCallback=true;
    d452:	4b04      	ldr	r3, [pc, #16]	; (d464 <_ZL21CO_IRQ_Error_CallbackP20can_async_descriptor+0x2c>)
    d454:	681b      	ldr	r3, [r3, #0]
    d456:	2201      	movs	r2, #1
    d458:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
}
    d45c:	bf00      	nop
    d45e:	370c      	adds	r7, #12
    d460:	46bd      	mov	sp, r7
    d462:	bd90      	pop	{r4, r7, pc}
    d464:	200019a4 	.word	0x200019a4
    d468:	0000d3d5 	.word	0x0000d3d5

0000d46c <_ZL14CO_tx_callbackP20can_async_descriptor>:


static void CO_tx_callback(struct can_async_descriptor *const descr)
{
    d46c:	b480      	push	{r7}
    d46e:	b083      	sub	sp, #12
    d470:	af00      	add	r7, sp, #0
    d472:	6078      	str	r0, [r7, #4]
	(void)descr;
	ptrCODriverClass->receivedtxCOCallback=true;
    d474:	4b04      	ldr	r3, [pc, #16]	; (d488 <_ZL14CO_tx_callbackP20can_async_descriptor+0x1c>)
    d476:	681b      	ldr	r3, [r3, #0]
    d478:	2201      	movs	r2, #1
    d47a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	
}
    d47e:	bf00      	nop
    d480:	370c      	adds	r7, #12
    d482:	46bd      	mov	sp, r7
    d484:	bc80      	pop	{r7}
    d486:	4770      	bx	lr
    d488:	200019a4 	.word	0x200019a4

0000d48c <_ZN15CO_Driver_ClassC1Ev>:

// default constructor
CO_Driver_Class::CO_Driver_Class()
    d48c:	b580      	push	{r7, lr}
    d48e:	b082      	sub	sp, #8
    d490:	af00      	add	r7, sp, #0
    d492:	6078      	str	r0, [r7, #4]
    d494:	687b      	ldr	r3, [r7, #4]
    d496:	3304      	adds	r3, #4
    d498:	4618      	mov	r0, r3
    d49a:	4b10      	ldr	r3, [pc, #64]	; (d4dc <_ZN15CO_Driver_ClassC1Ev+0x50>)
    d49c:	4798      	blx	r3
    d49e:	687b      	ldr	r3, [r7, #4]
    d4a0:	3310      	adds	r3, #16
    d4a2:	4618      	mov	r0, r3
    d4a4:	4b0e      	ldr	r3, [pc, #56]	; (d4e0 <_ZN15CO_Driver_ClassC1Ev+0x54>)
    d4a6:	4798      	blx	r3
    d4a8:	6878      	ldr	r0, [r7, #4]
    d4aa:	4b0e      	ldr	r3, [pc, #56]	; (d4e4 <_ZN15CO_Driver_ClassC1Ev+0x58>)
    d4ac:	4798      	blx	r3
    d4ae:	6878      	ldr	r0, [r7, #4]
    d4b0:	4b0d      	ldr	r3, [pc, #52]	; (d4e8 <_ZN15CO_Driver_ClassC1Ev+0x5c>)
    d4b2:	4798      	blx	r3
    d4b4:	687b      	ldr	r3, [r7, #4]
    d4b6:	3314      	adds	r3, #20
    d4b8:	4618      	mov	r0, r3
    d4ba:	4b0c      	ldr	r3, [pc, #48]	; (d4ec <_ZN15CO_Driver_ClassC1Ev+0x60>)
    d4bc:	4798      	blx	r3
    d4be:	4a0c      	ldr	r2, [pc, #48]	; (d4f0 <_ZN15CO_Driver_ClassC1Ev+0x64>)
    d4c0:	687b      	ldr	r3, [r7, #4]
    d4c2:	601a      	str	r2, [r3, #0]
{
	RxFifo_Callback_CanModule_p = NULL;
    d4c4:	687b      	ldr	r3, [r7, #4]
    d4c6:	2200      	movs	r2, #0
    d4c8:	675a      	str	r2, [r3, #116]	; 0x74
	ptrCODriverClass=this;
    d4ca:	4a0a      	ldr	r2, [pc, #40]	; (d4f4 <_ZN15CO_Driver_ClassC1Ev+0x68>)
    d4cc:	687b      	ldr	r3, [r7, #4]
    d4ce:	6013      	str	r3, [r2, #0]
} //CO_Driver_Class
    d4d0:	687b      	ldr	r3, [r7, #4]
    d4d2:	4618      	mov	r0, r3
    d4d4:	3708      	adds	r7, #8
    d4d6:	46bd      	mov	sp, r7
    d4d8:	bd80      	pop	{r7, pc}
    d4da:	bf00      	nop
    d4dc:	0000df7d 	.word	0x0000df7d
    d4e0:	0000eb77 	.word	0x0000eb77
    d4e4:	00012429 	.word	0x00012429
    d4e8:	0000f129 	.word	0x0000f129
    d4ec:	0000e891 	.word	0x0000e891
    d4f0:	00013240 	.word	0x00013240
    d4f4:	200019a4 	.word	0x200019a4

0000d4f8 <_ZN15CO_Driver_ClassD1Ev>:

// default destructor
CO_Driver_Class::~CO_Driver_Class()
    d4f8:	b580      	push	{r7, lr}
    d4fa:	b082      	sub	sp, #8
    d4fc:	af00      	add	r7, sp, #0
    d4fe:	6078      	str	r0, [r7, #4]
    d500:	4a0e      	ldr	r2, [pc, #56]	; (d53c <_ZN15CO_Driver_ClassD1Ev+0x44>)
    d502:	687b      	ldr	r3, [r7, #4]
    d504:	601a      	str	r2, [r3, #0]
    d506:	687b      	ldr	r3, [r7, #4]
    d508:	3314      	adds	r3, #20
    d50a:	4618      	mov	r0, r3
    d50c:	4b0c      	ldr	r3, [pc, #48]	; (d540 <_ZN15CO_Driver_ClassD1Ev+0x48>)
    d50e:	4798      	blx	r3
    d510:	6878      	ldr	r0, [r7, #4]
    d512:	4b0c      	ldr	r3, [pc, #48]	; (d544 <_ZN15CO_Driver_ClassD1Ev+0x4c>)
    d514:	4798      	blx	r3
    d516:	6878      	ldr	r0, [r7, #4]
    d518:	4b0b      	ldr	r3, [pc, #44]	; (d548 <_ZN15CO_Driver_ClassD1Ev+0x50>)
    d51a:	4798      	blx	r3
    d51c:	687b      	ldr	r3, [r7, #4]
    d51e:	3310      	adds	r3, #16
    d520:	4618      	mov	r0, r3
    d522:	4b0a      	ldr	r3, [pc, #40]	; (d54c <_ZN15CO_Driver_ClassD1Ev+0x54>)
    d524:	4798      	blx	r3
    d526:	687b      	ldr	r3, [r7, #4]
    d528:	3304      	adds	r3, #4
    d52a:	4618      	mov	r0, r3
    d52c:	4b08      	ldr	r3, [pc, #32]	; (d550 <_ZN15CO_Driver_ClassD1Ev+0x58>)
    d52e:	4798      	blx	r3
{
} //~CO_Driver_Class
    d530:	687b      	ldr	r3, [r7, #4]
    d532:	4618      	mov	r0, r3
    d534:	3708      	adds	r7, #8
    d536:	46bd      	mov	sp, r7
    d538:	bd80      	pop	{r7, pc}
    d53a:	bf00      	nop
    d53c:	00013240 	.word	0x00013240
    d540:	0000e8a5 	.word	0x0000e8a5
    d544:	0000f13d 	.word	0x0000f13d
    d548:	0001243d 	.word	0x0001243d
    d54c:	0000eb8b 	.word	0x0000eb8b
    d550:	0000dfa5 	.word	0x0000dfa5

0000d554 <_ZN15CO_Driver_Class16PrepareTxMessageEP11can_messageP10CO_CANtx_t>:
 * \param [in]	buffer ponyer to CO_CANtx_t with CANopen configuration data
 *
 * \ingroup CO_driver
 ******************************************************************************/
void CO_Driver_Class::PrepareTxMessage(struct can_message *msgHeader, CO_CANtx_t *buffer)
{
    d554:	b480      	push	{r7}
    d556:	b085      	sub	sp, #20
    d558:	af00      	add	r7, sp, #0
    d55a:	60f8      	str	r0, [r7, #12]
    d55c:	60b9      	str	r1, [r7, #8]
    d55e:	607a      	str	r2, [r7, #4]
	/* Map buffer data to the HAL CAN tx header data*/
	//TxHeader->ExtId = 0u;
	msgHeader->id=0;
    d560:	68bb      	ldr	r3, [r7, #8]
    d562:	2200      	movs	r2, #0
    d564:	601a      	str	r2, [r3, #0]
	//TxHeader->IDE = 0;
	msgHeader->fmt=CAN_FMT_STDID;
    d566:	68bb      	ldr	r3, [r7, #8]
    d568:	2200      	movs	r2, #0
    d56a:	735a      	strb	r2, [r3, #13]
	
	//TxHeader->DLC = buffer->DLC;
	msgHeader->len=buffer->DLC;
    d56c:	687b      	ldr	r3, [r7, #4]
    d56e:	791a      	ldrb	r2, [r3, #4]
    d570:	68bb      	ldr	r3, [r7, #8]
    d572:	731a      	strb	r2, [r3, #12]
	
	//TxHeader->StdId = ( buffer->ident >> 2 );
	msgHeader->id=( buffer->ident >> 2 );
    d574:	687b      	ldr	r3, [r7, #4]
    d576:	681b      	ldr	r3, [r3, #0]
    d578:	089a      	lsrs	r2, r3, #2
    d57a:	68bb      	ldr	r3, [r7, #8]
    d57c:	601a      	str	r2, [r3, #0]
	
	//TxHeader->RTR = ( buffer->ident & 0x2 );
	msgHeader->type=(can_type)( buffer->ident & 0x2 );
    d57e:	687b      	ldr	r3, [r7, #4]
    d580:	681b      	ldr	r3, [r3, #0]
    d582:	b2db      	uxtb	r3, r3
    d584:	f003 0302 	and.w	r3, r3, #2
    d588:	b2da      	uxtb	r2, r3
    d58a:	68bb      	ldr	r3, [r7, #8]
    d58c:	711a      	strb	r2, [r3, #4]
	msgHeader->data=buffer->data;
    d58e:	687b      	ldr	r3, [r7, #4]
    d590:	1d5a      	adds	r2, r3, #5
    d592:	68bb      	ldr	r3, [r7, #8]
    d594:	609a      	str	r2, [r3, #8]
}
    d596:	bf00      	nop
    d598:	3714      	adds	r7, #20
    d59a:	46bd      	mov	sp, r7
    d59c:	bc80      	pop	{r7}
    d59e:	4770      	bx	lr

0000d5a0 <_ZN15CO_Driver_Class21ConvertCANMsg2CORxMsgER11can_messageP13CO_CANrxMsg_t>:

void CO_Driver_Class::ConvertCANMsg2CORxMsg(can_message& msgHeader, CO_CANrxMsg_t *rxMsg)
{
    d5a0:	b590      	push	{r4, r7, lr}
    d5a2:	b085      	sub	sp, #20
    d5a4:	af00      	add	r7, sp, #0
    d5a6:	60f8      	str	r0, [r7, #12]
    d5a8:	60b9      	str	r1, [r7, #8]
    d5aa:	607a      	str	r2, [r7, #4]
	rxMsg->RxHeader=msgHeader;
    d5ac:	687a      	ldr	r2, [r7, #4]
    d5ae:	68bb      	ldr	r3, [r7, #8]
    d5b0:	4614      	mov	r4, r2
    d5b2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    d5b4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	rxMsg->DLC=msgHeader.len;
    d5b8:	68bb      	ldr	r3, [r7, #8]
    d5ba:	7b1a      	ldrb	r2, [r3, #12]
    d5bc:	687b      	ldr	r3, [r7, #4]
    d5be:	751a      	strb	r2, [r3, #20]
	rxMsg->ident=msgHeader.id;
    d5c0:	68bb      	ldr	r3, [r7, #8]
    d5c2:	681a      	ldr	r2, [r3, #0]
    d5c4:	687b      	ldr	r3, [r7, #4]
    d5c6:	611a      	str	r2, [r3, #16]
	memcpy(&rxMsg->data[0],msgHeader.data,msgHeader.len);
    d5c8:	687b      	ldr	r3, [r7, #4]
    d5ca:	f103 0015 	add.w	r0, r3, #21
    d5ce:	68bb      	ldr	r3, [r7, #8]
    d5d0:	6899      	ldr	r1, [r3, #8]
    d5d2:	68bb      	ldr	r3, [r7, #8]
    d5d4:	7b1b      	ldrb	r3, [r3, #12]
    d5d6:	461a      	mov	r2, r3
    d5d8:	4b02      	ldr	r3, [pc, #8]	; (d5e4 <_ZN15CO_Driver_Class21ConvertCANMsg2CORxMsgER11can_messageP13CO_CANrxMsg_t+0x44>)
    d5da:	4798      	blx	r3

	/* Map buffer data to the HAL CAN tx header data*/
	//TxHeader->ExtId = 0u;

}
    d5dc:	bf00      	nop
    d5de:	3714      	adds	r7, #20
    d5e0:	46bd      	mov	sp, r7
    d5e2:	bd90      	pop	{r4, r7, pc}
    d5e4:	00012b29 	.word	0x00012b29

0000d5e8 <_ZN15CO_Driver_Class26CO_CANsetConfigurationModeEP20can_async_descriptor>:
	{
		;//TODO add assert here
	}
}

void CO_Driver_Class::CO_CANsetConfigurationMode(can_async_descriptor *descr){
    d5e8:	b480      	push	{r7}
    d5ea:	b083      	sub	sp, #12
    d5ec:	af00      	add	r7, sp, #0
    d5ee:	6078      	str	r0, [r7, #4]
    d5f0:	6039      	str	r1, [r7, #0]
	
	canDescr=descr;
    d5f2:	687b      	ldr	r3, [r7, #4]
    d5f4:	683a      	ldr	r2, [r7, #0]
    d5f6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	/* Put CAN module in configuration mode */
	/* HAL is responsible for that */
}
    d5fa:	bf00      	nop
    d5fc:	370c      	adds	r7, #12
    d5fe:	46bd      	mov	sp, r7
    d600:	bc80      	pop	{r7}
    d602:	4770      	bx	lr

0000d604 <_ZN15CO_Driver_Class19CO_CANsetNormalModeEv>:

/******************************************************************************/
CO_ReturnError_t CO_Driver_Class::CO_CANsetNormalMode(void){
    d604:	b580      	push	{r7, lr}
    d606:	b084      	sub	sp, #16
    d608:	af00      	add	r7, sp, #0
    d60a:	6078      	str	r0, [r7, #4]
	/* Put CAN module in normal mode */
	int32_t		error_CAN_hal;
	Error = CO_ERROR_NO;
    d60c:	687b      	ldr	r3, [r7, #4]
    d60e:	2200      	movs	r2, #0
    d610:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	error_CAN_hal=can_async_enable(CAN_Module->CANBaseDescriptor);
    d614:	687b      	ldr	r3, [r7, #4]
    d616:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
    d61a:	681b      	ldr	r3, [r3, #0]
    d61c:	4618      	mov	r0, r3
    d61e:	4b0a      	ldr	r3, [pc, #40]	; (d648 <_ZN15CO_Driver_Class19CO_CANsetNormalModeEv+0x44>)
    d620:	4798      	blx	r3
    d622:	60f8      	str	r0, [r7, #12]
	//    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 1, 0);
	//    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
	//    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 1, 0);
	//    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);

	if (error_CAN_hal != CO_ERROR_NO)
    d624:	68fb      	ldr	r3, [r7, #12]
    d626:	2b00      	cmp	r3, #0
    d628:	d002      	beq.n	d630 <_ZN15CO_Driver_Class19CO_CANsetNormalModeEv+0x2c>
	{
		//_Error_Handler(__FILE__, __LINE__);
		return CO_ERROR_HAL;
    d62a:	f06f 030e 	mvn.w	r3, #14
    d62e:	e007      	b.n	d640 <_ZN15CO_Driver_Class19CO_CANsetNormalModeEv+0x3c>
	}
	CAN_Module->CANnormal = true;
    d630:	687b      	ldr	r3, [r7, #4]
    d632:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
    d636:	2201      	movs	r2, #1
    d638:	751a      	strb	r2, [r3, #20]
	return Error;
    d63a:	687b      	ldr	r3, [r7, #4]
    d63c:	f993 309c 	ldrsb.w	r3, [r3, #156]	; 0x9c
}
    d640:	4618      	mov	r0, r3
    d642:	3710      	adds	r7, #16
    d644:	46bd      	mov	sp, r7
    d646:	bd80      	pop	{r7, pc}
    d648:	0000173d 	.word	0x0000173d

0000d64c <_ZN15CO_Driver_Class14CANmodule_initEP14CO_CANmodule_tP20can_async_descriptorP10CO_CANrx_tmP10CO_CANtx_tmm>:
		CO_CANrx_t              rxArray[],
		uint32_t                rxSize,
		CO_CANtx_t              txArray[],
		uint32_t                txSize,
		uint32_t                CANbitRate)
{
    d64c:	b580      	push	{r7, lr}
    d64e:	b086      	sub	sp, #24
    d650:	af00      	add	r7, sp, #0
    d652:	60f8      	str	r0, [r7, #12]
    d654:	60b9      	str	r1, [r7, #8]
    d656:	607a      	str	r2, [r7, #4]
    d658:	603b      	str	r3, [r7, #0]
	canDescr=HALCanObject;
    d65a:	68fb      	ldr	r3, [r7, #12]
    d65c:	687a      	ldr	r2, [r7, #4]
    d65e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	
	int32_t		error_CAN_hal;

	/* verify arguments */
	if(CANmodule==NULL || rxArray==NULL || txArray==NULL)
    d662:	68bb      	ldr	r3, [r7, #8]
    d664:	2b00      	cmp	r3, #0
    d666:	d005      	beq.n	d674 <_ZN15CO_Driver_Class14CANmodule_initEP14CO_CANmodule_tP20can_async_descriptorP10CO_CANrx_tmP10CO_CANtx_tmm+0x28>
    d668:	683b      	ldr	r3, [r7, #0]
    d66a:	2b00      	cmp	r3, #0
    d66c:	d002      	beq.n	d674 <_ZN15CO_Driver_Class14CANmodule_initEP14CO_CANmodule_tP20can_async_descriptorP10CO_CANrx_tmP10CO_CANtx_tmm+0x28>
    d66e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    d670:	2b00      	cmp	r3, #0
    d672:	d102      	bne.n	d67a <_ZN15CO_Driver_Class14CANmodule_initEP14CO_CANmodule_tP20can_async_descriptorP10CO_CANrx_tmP10CO_CANtx_tmm+0x2e>
	{
		return CO_ERROR_ILLEGAL_ARGUMENT;
    d674:	f04f 33ff 	mov.w	r3, #4294967295
    d678:	e084      	b.n	d784 <_ZN15CO_Driver_Class14CANmodule_initEP14CO_CANmodule_tP20can_async_descriptorP10CO_CANrx_tmP10CO_CANtx_tmm+0x138>
	else
	{
		;//do nothing
	}

	RxFifo_Callback_CanModule_p = CANmodule;
    d67a:	68fb      	ldr	r3, [r7, #12]
    d67c:	68ba      	ldr	r2, [r7, #8]
    d67e:	675a      	str	r2, [r3, #116]	; 0x74

	/* Configure object variables */
	CANmodule->CANBaseDescriptor = (can_async_descriptor*)HALCanObject;
    d680:	68bb      	ldr	r3, [r7, #8]
    d682:	687a      	ldr	r2, [r7, #4]
    d684:	601a      	str	r2, [r3, #0]
	CANmodule->rxArray = rxArray;
    d686:	68bb      	ldr	r3, [r7, #8]
    d688:	683a      	ldr	r2, [r7, #0]
    d68a:	605a      	str	r2, [r3, #4]
	CANmodule->rxSize = rxSize;
    d68c:	68bb      	ldr	r3, [r7, #8]
    d68e:	6a3a      	ldr	r2, [r7, #32]
    d690:	609a      	str	r2, [r3, #8]
	CANmodule->txArray = txArray;
    d692:	68bb      	ldr	r3, [r7, #8]
    d694:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    d696:	60da      	str	r2, [r3, #12]
	CANmodule->txSize = txSize;
    d698:	68bb      	ldr	r3, [r7, #8]
    d69a:	6aba      	ldr	r2, [r7, #40]	; 0x28
    d69c:	611a      	str	r2, [r3, #16]
	CANmodule->CANnormal = false;
    d69e:	68bb      	ldr	r3, [r7, #8]
    d6a0:	2200      	movs	r2, #0
    d6a2:	751a      	strb	r2, [r3, #20]
	CANmodule->useCANrxFilters = false;
    d6a4:	68bb      	ldr	r3, [r7, #8]
    d6a6:	2200      	movs	r2, #0
    d6a8:	755a      	strb	r2, [r3, #21]
	CANmodule->bufferInhibitFlag = false;
    d6aa:	68bb      	ldr	r3, [r7, #8]
    d6ac:	2200      	movs	r2, #0
    d6ae:	759a      	strb	r2, [r3, #22]
	CANmodule->firstCANtxMessage = true;
    d6b0:	68bb      	ldr	r3, [r7, #8]
    d6b2:	2201      	movs	r2, #1
    d6b4:	75da      	strb	r2, [r3, #23]
	CANmodule->CANtxCount = 0U;
    d6b6:	68bb      	ldr	r3, [r7, #8]
    d6b8:	2200      	movs	r2, #0
    d6ba:	619a      	str	r2, [r3, #24]
	CANmodule->errOld = 0U;
    d6bc:	68bb      	ldr	r3, [r7, #8]
    d6be:	2200      	movs	r2, #0
    d6c0:	61da      	str	r2, [r3, #28]
	CANmodule->em = NULL;
    d6c2:	68bb      	ldr	r3, [r7, #8]
    d6c4:	2200      	movs	r2, #0
    d6c6:	621a      	str	r2, [r3, #32]

	for(i=0U; i<rxSize; i++)
    d6c8:	68fb      	ldr	r3, [r7, #12]
    d6ca:	2200      	movs	r2, #0
    d6cc:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
    d6d0:	68fb      	ldr	r3, [r7, #12]
    d6d2:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
    d6d6:	6a3b      	ldr	r3, [r7, #32]
    d6d8:	429a      	cmp	r2, r3
    d6da:	d217      	bcs.n	d70c <_ZN15CO_Driver_Class14CANmodule_initEP14CO_CANmodule_tP20can_async_descriptorP10CO_CANrx_tmP10CO_CANtx_tmm+0xc0>
	{
		rxArray[i].ident = 0U;
    d6dc:	68fb      	ldr	r3, [r7, #12]
    d6de:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
    d6e2:	011b      	lsls	r3, r3, #4
    d6e4:	683a      	ldr	r2, [r7, #0]
    d6e6:	4413      	add	r3, r2
    d6e8:	2200      	movs	r2, #0
    d6ea:	601a      	str	r2, [r3, #0]
		rxArray[i].pFunct = NULL;
    d6ec:	68fb      	ldr	r3, [r7, #12]
    d6ee:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
    d6f2:	011b      	lsls	r3, r3, #4
    d6f4:	683a      	ldr	r2, [r7, #0]
    d6f6:	4413      	add	r3, r2
    d6f8:	2200      	movs	r2, #0
    d6fa:	60da      	str	r2, [r3, #12]
	for(i=0U; i<rxSize; i++)
    d6fc:	68fb      	ldr	r3, [r7, #12]
    d6fe:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
    d702:	1c5a      	adds	r2, r3, #1
    d704:	68fb      	ldr	r3, [r7, #12]
    d706:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
    d70a:	e7e1      	b.n	d6d0 <_ZN15CO_Driver_Class14CANmodule_initEP14CO_CANmodule_tP20can_async_descriptorP10CO_CANrx_tmP10CO_CANtx_tmm+0x84>
	}

	for(i=0U; i<txSize; i++)
    d70c:	68fb      	ldr	r3, [r7, #12]
    d70e:	2200      	movs	r2, #0
    d710:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
    d714:	68fb      	ldr	r3, [r7, #12]
    d716:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
    d71a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    d71c:	429a      	cmp	r2, r3
    d71e:	d20f      	bcs.n	d740 <_ZN15CO_Driver_Class14CANmodule_initEP14CO_CANmodule_tP20can_async_descriptorP10CO_CANrx_tmP10CO_CANtx_tmm+0xf4>
	{
		txArray[i].bufferFull = false;
    d720:	68fb      	ldr	r3, [r7, #12]
    d722:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
    d726:	011b      	lsls	r3, r3, #4
    d728:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    d72a:	4413      	add	r3, r2
    d72c:	2200      	movs	r2, #0
    d72e:	735a      	strb	r2, [r3, #13]
	for(i=0U; i<txSize; i++)
    d730:	68fb      	ldr	r3, [r7, #12]
    d732:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
    d736:	1c5a      	adds	r2, r3, #1
    d738:	68fb      	ldr	r3, [r7, #12]
    d73a:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
    d73e:	e7e9      	b.n	d714 <_ZN15CO_Driver_Class14CANmodule_initEP14CO_CANmodule_tP20can_async_descriptorP10CO_CANrx_tmP10CO_CANtx_tmm+0xc8>
	}


	CANmodule_Disable();
    d740:	68f8      	ldr	r0, [r7, #12]
    d742:	4b12      	ldr	r3, [pc, #72]	; (d78c <_ZN15CO_Driver_Class14CANmodule_initEP14CO_CANmodule_tP20can_async_descriptorP10CO_CANrx_tmP10CO_CANtx_tmm+0x140>)
    d744:	4798      	blx	r3
	
	can_async_register_callback(canDescr, CAN_ASYNC_RX_CB, (FUNC_PTR)CO_rx_callback);
    d746:	68fb      	ldr	r3, [r7, #12]
    d748:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
    d74c:	4a10      	ldr	r2, [pc, #64]	; (d790 <_ZN15CO_Driver_Class14CANmodule_initEP14CO_CANmodule_tP20can_async_descriptorP10CO_CANrx_tmP10CO_CANtx_tmm+0x144>)
    d74e:	2100      	movs	r1, #0
    d750:	4618      	mov	r0, r3
    d752:	4b10      	ldr	r3, [pc, #64]	; (d794 <_ZN15CO_Driver_Class14CANmodule_initEP14CO_CANmodule_tP20can_async_descriptorP10CO_CANrx_tmP10CO_CANtx_tmm+0x148>)
    d754:	4798      	blx	r3
	can_async_register_callback(canDescr, CAN_ASYNC_IRQ_CB, (FUNC_PTR)CO_IRQ_Error_Callback);
    d756:	68fb      	ldr	r3, [r7, #12]
    d758:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
    d75c:	4a0e      	ldr	r2, [pc, #56]	; (d798 <_ZN15CO_Driver_Class14CANmodule_initEP14CO_CANmodule_tP20can_async_descriptorP10CO_CANrx_tmP10CO_CANtx_tmm+0x14c>)
    d75e:	2102      	movs	r1, #2
    d760:	4618      	mov	r0, r3
    d762:	4b0c      	ldr	r3, [pc, #48]	; (d794 <_ZN15CO_Driver_Class14CANmodule_initEP14CO_CANmodule_tP20can_async_descriptorP10CO_CANrx_tmP10CO_CANtx_tmm+0x148>)
    d764:	4798      	blx	r3
	error_CAN_hal=can_async_enable(HALCanObject);
    d766:	6878      	ldr	r0, [r7, #4]
    d768:	4b0c      	ldr	r3, [pc, #48]	; (d79c <_ZN15CO_Driver_Class14CANmodule_initEP14CO_CANmodule_tP20can_async_descriptorP10CO_CANrx_tmP10CO_CANtx_tmm+0x150>)
    d76a:	4798      	blx	r3
    d76c:	6178      	str	r0, [r7, #20]
	if (error_CAN_hal != CO_ERROR_NO)
    d76e:	697b      	ldr	r3, [r7, #20]
    d770:	2b00      	cmp	r3, #0
    d772:	d002      	beq.n	d77a <_ZN15CO_Driver_Class14CANmodule_initEP14CO_CANmodule_tP20can_async_descriptorP10CO_CANrx_tmP10CO_CANtx_tmm+0x12e>
	{
		//_Error_Handler(__FILE__, __LINE__);
		return CO_ERROR_HAL;
    d774:	f06f 030e 	mvn.w	r3, #14
    d778:	e004      	b.n	d784 <_ZN15CO_Driver_Class14CANmodule_initEP14CO_CANmodule_tP20can_async_descriptorP10CO_CANrx_tmP10CO_CANtx_tmm+0x138>
	}
	CAN_Module=CANmodule;
    d77a:	68fb      	ldr	r3, [r7, #12]
    d77c:	68ba      	ldr	r2, [r7, #8]
    d77e:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
	return CO_ERROR_NO;
    d782:	2300      	movs	r3, #0
}
    d784:	4618      	mov	r0, r3
    d786:	3718      	adds	r7, #24
    d788:	46bd      	mov	sp, r7
    d78a:	bd80      	pop	{r7, pc}
    d78c:	0000d7a1 	.word	0x0000d7a1
    d790:	0000d3ed 	.word	0x0000d3ed
    d794:	00001811 	.word	0x00001811
    d798:	0000d439 	.word	0x0000d439
    d79c:	0000173d 	.word	0x0000173d

0000d7a0 <_ZN15CO_Driver_Class17CANmodule_DisableEv>:


/******************************************************************************/
void CO_Driver_Class::CANmodule_Disable(void){
    d7a0:	b480      	push	{r7}
    d7a2:	b083      	sub	sp, #12
    d7a4:	af00      	add	r7, sp, #0
    d7a6:	6078      	str	r0, [r7, #4]
	HAL_CAN_Stop(CANmodule->CANbaseAddress);
	*/
	//can_async_register_callback(canDescr, CAN_ASYNC_RX_CB, (FUNC_PTR)CO_rx_callback);
	//can_async_register_callback(canDescr, CAN_ASYNC_IRQ_CB, (FUNC_PTR)CO_IRQ_Error_Callback);
	//can_async_disable(CAN_Module->CANBaseDescriptor);
}
    d7a8:	bf00      	nop
    d7aa:	370c      	adds	r7, #12
    d7ac:	46bd      	mov	sp, r7
    d7ae:	bc80      	pop	{r7}
    d7b0:	4770      	bx	lr
	...

0000d7b4 <_ZN15CO_Driver_Class17CAN_Rx_BufferInitEmmmhPvPFvS0_PK13CO_CANrxMsg_tE>:
		uint32_t                ident,
		uint32_t                mask,
		bool_t                  rtr,
		void                   *object,
		void                  (*pFunct)(void *object, const CO_CANrxMsg_t *message))
{
    d7b4:	b590      	push	{r4, r7, lr}
    d7b6:	b087      	sub	sp, #28
    d7b8:	af00      	add	r7, sp, #0
    d7ba:	60f8      	str	r0, [r7, #12]
    d7bc:	60b9      	str	r1, [r7, #8]
    d7be:	607a      	str	r2, [r7, #4]
    d7c0:	603b      	str	r3, [r7, #0]
	ret = CO_ERROR_NO;
    d7c2:	68fb      	ldr	r3, [r7, #12]
    d7c4:	2200      	movs	r2, #0
    d7c6:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d

	if((CAN_Module!=NULL) && (object!=NULL) && (pFunct!=NULL) && (index < CAN_Module->rxSize)){
    d7ca:	68fb      	ldr	r3, [r7, #12]
    d7cc:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
    d7d0:	2b00      	cmp	r3, #0
    d7d2:	d060      	beq.n	d896 <_ZN15CO_Driver_Class17CAN_Rx_BufferInitEmmmhPvPFvS0_PK13CO_CANrxMsg_tE+0xe2>
    d7d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    d7d6:	2b00      	cmp	r3, #0
    d7d8:	d05d      	beq.n	d896 <_ZN15CO_Driver_Class17CAN_Rx_BufferInitEmmmhPvPFvS0_PK13CO_CANrxMsg_tE+0xe2>
    d7da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    d7dc:	2b00      	cmp	r3, #0
    d7de:	d05a      	beq.n	d896 <_ZN15CO_Driver_Class17CAN_Rx_BufferInitEmmmhPvPFvS0_PK13CO_CANrxMsg_tE+0xe2>
    d7e0:	68fb      	ldr	r3, [r7, #12]
    d7e2:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
    d7e6:	689a      	ldr	r2, [r3, #8]
    d7e8:	68bb      	ldr	r3, [r7, #8]
    d7ea:	429a      	cmp	r2, r3
    d7ec:	d953      	bls.n	d896 <_ZN15CO_Driver_Class17CAN_Rx_BufferInitEmmmhPvPFvS0_PK13CO_CANrxMsg_tE+0xe2>
		/* buffer, which will be configured */
		CO_CANrx_t *buffer = &CAN_Module->rxArray[index];
    d7ee:	68fb      	ldr	r3, [r7, #12]
    d7f0:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
    d7f4:	685a      	ldr	r2, [r3, #4]
    d7f6:	68bb      	ldr	r3, [r7, #8]
    d7f8:	011b      	lsls	r3, r3, #4
    d7fa:	4413      	add	r3, r2
    d7fc:	617b      	str	r3, [r7, #20]

		/* Configure object variables */
		buffer->object = object;
    d7fe:	697b      	ldr	r3, [r7, #20]
    d800:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    d802:	609a      	str	r2, [r3, #8]
		buffer->pFunct = pFunct;
    d804:	697b      	ldr	r3, [r7, #20]
    d806:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    d808:	60da      	str	r2, [r3, #12]

		/* CAN identifier and CAN mask, bit aligned with CAN module. Different on different microcontrollers. */
		buffer->ident = (ident & 0x07FF) << 2;
    d80a:	687b      	ldr	r3, [r7, #4]
    d80c:	009a      	lsls	r2, r3, #2
    d80e:	f641 73fc 	movw	r3, #8188	; 0x1ffc
    d812:	4013      	ands	r3, r2
    d814:	697a      	ldr	r2, [r7, #20]
    d816:	6013      	str	r3, [r2, #0]
		if (rtr)
    d818:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
    d81c:	2b00      	cmp	r3, #0
    d81e:	d005      	beq.n	d82c <_ZN15CO_Driver_Class17CAN_Rx_BufferInitEmmmhPvPFvS0_PK13CO_CANrxMsg_tE+0x78>
		{
			buffer->ident |= 0x02;
    d820:	697b      	ldr	r3, [r7, #20]
    d822:	681b      	ldr	r3, [r3, #0]
    d824:	f043 0202 	orr.w	r2, r3, #2
    d828:	697b      	ldr	r3, [r7, #20]
    d82a:	601a      	str	r2, [r3, #0]
		}
		buffer->mask = (mask & 0x07FF) << 2;
    d82c:	683b      	ldr	r3, [r7, #0]
    d82e:	009a      	lsls	r2, r3, #2
    d830:	f641 73fc 	movw	r3, #8188	; 0x1ffc
    d834:	4013      	ands	r3, r2
    d836:	697a      	ldr	r2, [r7, #20]
    d838:	6053      	str	r3, [r2, #4]
		buffer->mask |= 0x02;
    d83a:	697b      	ldr	r3, [r7, #20]
    d83c:	685b      	ldr	r3, [r3, #4]
    d83e:	f043 0202 	orr.w	r2, r3, #2
    d842:	697b      	ldr	r3, [r7, #20]
    d844:	605a      	str	r2, [r3, #4]

		/* Set CAN hardware module filter and mask. */
		if(CAN_Module->useCANrxFilters)
    d846:	68fb      	ldr	r3, [r7, #12]
    d848:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
    d84c:	7d5b      	ldrb	r3, [r3, #21]
    d84e:	b2db      	uxtb	r3, r3
    d850:	2b00      	cmp	r3, #0
    d852:	bf14      	ite	ne
    d854:	2301      	movne	r3, #1
    d856:	2300      	moveq	r3, #0
    d858:	b2db      	uxtb	r3, r3
    d85a:	2b00      	cmp	r3, #0
    d85c:	d120      	bne.n	d8a0 <_ZN15CO_Driver_Class17CAN_Rx_BufferInitEmmmhPvPFvS0_PK13CO_CANrxMsg_tE+0xec>
		else
		{
			/*no hardware filters*/
			//CAN_FilterTypeDef FilterConfig;
		
			CO_Filter.id   = buffer->ident;
    d85e:	697b      	ldr	r3, [r7, #20]
    d860:	681a      	ldr	r2, [r3, #0]
    d862:	68fb      	ldr	r3, [r7, #12]
    d864:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
			CO_Filter.mask = buffer->mask;
    d868:	697b      	ldr	r3, [r7, #20]
    d86a:	685a      	ldr	r2, [r3, #4]
    d86c:	68fb      	ldr	r3, [r7, #12]
    d86e:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
			ret= (CO_ReturnError_t)can_async_set_filter(CAN_Module->CANBaseDescriptor,(uint8_t)index, CAN_FMT_STDID, &CO_Filter);
    d872:	68fb      	ldr	r3, [r7, #12]
    d874:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
    d878:	6818      	ldr	r0, [r3, #0]
    d87a:	68bb      	ldr	r3, [r7, #8]
    d87c:	b2d9      	uxtb	r1, r3
    d87e:	68fb      	ldr	r3, [r7, #12]
    d880:	f503 7390 	add.w	r3, r3, #288	; 0x120
    d884:	2200      	movs	r2, #0
    d886:	4c0a      	ldr	r4, [pc, #40]	; (d8b0 <_ZN15CO_Driver_Class17CAN_Rx_BufferInitEmmmhPvPFvS0_PK13CO_CANrxMsg_tE+0xfc>)
    d888:	47a0      	blx	r4
    d88a:	4603      	mov	r3, r0
    d88c:	b25a      	sxtb	r2, r3
    d88e:	68fb      	ldr	r3, [r7, #12]
    d890:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
		}
    d894:	e004      	b.n	d8a0 <_ZN15CO_Driver_Class17CAN_Rx_BufferInitEmmmhPvPFvS0_PK13CO_CANrxMsg_tE+0xec>
	}
	else
	{
		ret = CO_ERROR_ILLEGAL_ARGUMENT;
    d896:	68fb      	ldr	r3, [r7, #12]
    d898:	22ff      	movs	r2, #255	; 0xff
    d89a:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
    d89e:	e000      	b.n	d8a2 <_ZN15CO_Driver_Class17CAN_Rx_BufferInitEmmmhPvPFvS0_PK13CO_CANrxMsg_tE+0xee>
		}
    d8a0:	bf00      	nop
	}
	return ret;
    d8a2:	68fb      	ldr	r3, [r7, #12]
    d8a4:	f993 309d 	ldrsb.w	r3, [r3, #157]	; 0x9d
}
    d8a8:	4618      	mov	r0, r3
    d8aa:	371c      	adds	r7, #28
    d8ac:	46bd      	mov	sp, r7
    d8ae:	bd90      	pop	{r4, r7, pc}
    d8b0:	0000188d 	.word	0x0000188d

0000d8b4 <_ZN15CO_Driver_Class17CAN_Tx_BufferInitEmmhhh>:
		uint32_t                index,
		uint32_t                ident,
		bool_t                  rtr,
		uint8_t                 noOfBytes,
		bool_t                  syncFlag)
{
    d8b4:	b480      	push	{r7}
    d8b6:	b085      	sub	sp, #20
    d8b8:	af00      	add	r7, sp, #0
    d8ba:	60f8      	str	r0, [r7, #12]
    d8bc:	60b9      	str	r1, [r7, #8]
    d8be:	607a      	str	r2, [r7, #4]
    d8c0:	70fb      	strb	r3, [r7, #3]
	buffer = NULL;
    d8c2:	68fb      	ldr	r3, [r7, #12]
    d8c4:	2200      	movs	r2, #0
    d8c6:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

	if((CAN_Module != NULL) && (index < CAN_Module->txSize)){
    d8ca:	68fb      	ldr	r3, [r7, #12]
    d8cc:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
    d8d0:	2b00      	cmp	r3, #0
    d8d2:	d03c      	beq.n	d94e <_ZN15CO_Driver_Class17CAN_Tx_BufferInitEmmhhh+0x9a>
    d8d4:	68fb      	ldr	r3, [r7, #12]
    d8d6:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
    d8da:	691a      	ldr	r2, [r3, #16]
    d8dc:	68bb      	ldr	r3, [r7, #8]
    d8de:	429a      	cmp	r2, r3
    d8e0:	d935      	bls.n	d94e <_ZN15CO_Driver_Class17CAN_Tx_BufferInitEmmhhh+0x9a>
		/* get specific buffer */
		buffer = &CAN_Module->txArray[index];
    d8e2:	68fb      	ldr	r3, [r7, #12]
    d8e4:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
    d8e8:	68da      	ldr	r2, [r3, #12]
    d8ea:	68bb      	ldr	r3, [r7, #8]
    d8ec:	011b      	lsls	r3, r3, #4
    d8ee:	441a      	add	r2, r3
    d8f0:	68fb      	ldr	r3, [r7, #12]
    d8f2:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

		/* CAN identifier, DLC and rtr, bit aligned with CAN module transmit buffer.*/

		buffer->ident &= 0x7FF;
    d8f6:	68fb      	ldr	r3, [r7, #12]
    d8f8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
    d8fc:	68fa      	ldr	r2, [r7, #12]
    d8fe:	f8d2 20a0 	ldr.w	r2, [r2, #160]	; 0xa0
    d902:	6812      	ldr	r2, [r2, #0]
    d904:	f3c2 020a 	ubfx	r2, r2, #0, #11
    d908:	601a      	str	r2, [r3, #0]
		buffer->ident = ident << 2;
    d90a:	68fb      	ldr	r3, [r7, #12]
    d90c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
    d910:	687a      	ldr	r2, [r7, #4]
    d912:	0092      	lsls	r2, r2, #2
    d914:	601a      	str	r2, [r3, #0]
		if (rtr) buffer->ident |= 0x02;
    d916:	78fb      	ldrb	r3, [r7, #3]
    d918:	2b00      	cmp	r3, #0
    d91a:	d009      	beq.n	d930 <_ZN15CO_Driver_Class17CAN_Tx_BufferInitEmmhhh+0x7c>
    d91c:	68fb      	ldr	r3, [r7, #12]
    d91e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
    d922:	68fa      	ldr	r2, [r7, #12]
    d924:	f8d2 20a0 	ldr.w	r2, [r2, #160]	; 0xa0
    d928:	6812      	ldr	r2, [r2, #0]
    d92a:	f042 0202 	orr.w	r2, r2, #2
    d92e:	601a      	str	r2, [r3, #0]

		buffer->DLC = noOfBytes;
    d930:	68fb      	ldr	r3, [r7, #12]
    d932:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
    d936:	7e3a      	ldrb	r2, [r7, #24]
    d938:	711a      	strb	r2, [r3, #4]
		buffer->bufferFull = false;
    d93a:	68fb      	ldr	r3, [r7, #12]
    d93c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
    d940:	2200      	movs	r2, #0
    d942:	735a      	strb	r2, [r3, #13]
		buffer->syncFlag = syncFlag;
    d944:	68fb      	ldr	r3, [r7, #12]
    d946:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
    d94a:	7f3a      	ldrb	r2, [r7, #28]
    d94c:	739a      	strb	r2, [r3, #14]
	}

	return buffer;
    d94e:	68fb      	ldr	r3, [r7, #12]
    d950:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
}
    d954:	4618      	mov	r0, r3
    d956:	3714      	adds	r7, #20
    d958:	46bd      	mov	sp, r7
    d95a:	bc80      	pop	{r7}
    d95c:	4770      	bx	lr
	...

0000d960 <_ZN15CO_Driver_Class8CAN_SendEP10CO_CANtx_t>:

/******************************************************************************/
CO_ReturnError_t CO_Driver_Class::CAN_Send(CO_CANtx_t *buffer)
{
    d960:	b590      	push	{r4, r7, lr}
    d962:	b089      	sub	sp, #36	; 0x24
    d964:	af02      	add	r7, sp, #8
    d966:	6078      	str	r0, [r7, #4]
    d968:	6039      	str	r1, [r7, #0]
	err = CO_ERROR_NO;
    d96a:	687b      	ldr	r3, [r7, #4]
    d96c:	2200      	movs	r2, #0
    d96e:	f883 209e 	strb.w	r2, [r3, #158]	; 0x9e

	if(buffer->bufferFull){
    d972:	683b      	ldr	r3, [r7, #0]
    d974:	7b5b      	ldrb	r3, [r3, #13]
    d976:	b2db      	uxtb	r3, r3
    d978:	2b00      	cmp	r3, #0
    d97a:	bf14      	ite	ne
    d97c:	2301      	movne	r3, #1
    d97e:	2300      	moveq	r3, #0
    d980:	b2db      	uxtb	r3, r3
    d982:	2b00      	cmp	r3, #0
    d984:	d01d      	beq.n	d9c2 <_ZN15CO_Driver_Class8CAN_SendEP10CO_CANtx_t+0x62>
		if(!CAN_Module->firstCANtxMessage){
    d986:	687b      	ldr	r3, [r7, #4]
    d988:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
    d98c:	7ddb      	ldrb	r3, [r3, #23]
    d98e:	b2db      	uxtb	r3, r3
    d990:	2b00      	cmp	r3, #0
    d992:	bf0c      	ite	eq
    d994:	2301      	moveq	r3, #1
    d996:	2300      	movne	r3, #0
    d998:	b2db      	uxtb	r3, r3
    d99a:	2b00      	cmp	r3, #0
    d99c:	d00d      	beq.n	d9ba <_ZN15CO_Driver_Class8CAN_SendEP10CO_CANtx_t+0x5a>
			/* don't set error, if bootup message is still on buffers */
			EM_ErrorReport((CO_EM_t*)CAN_Module->em, CO_EM_CAN_TX_OVERFLOW, CO_EMC_CAN_OVERRUN, buffer->ident);
    d99e:	687b      	ldr	r3, [r7, #4]
    d9a0:	1d18      	adds	r0, r3, #4
    d9a2:	687b      	ldr	r3, [r7, #4]
    d9a4:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
    d9a8:	6a19      	ldr	r1, [r3, #32]
    d9aa:	683b      	ldr	r3, [r7, #0]
    d9ac:	681b      	ldr	r3, [r3, #0]
    d9ae:	9300      	str	r3, [sp, #0]
    d9b0:	f248 1310 	movw	r3, #33040	; 0x8110
    d9b4:	2214      	movs	r2, #20
    d9b6:	4c35      	ldr	r4, [pc, #212]	; (da8c <_ZN15CO_Driver_Class8CAN_SendEP10CO_CANtx_t+0x12c>)
    d9b8:	47a0      	blx	r4
		}
		err = CO_ERROR_TX_OVERFLOW;
    d9ba:	687b      	ldr	r3, [r7, #4]
    d9bc:	22f7      	movs	r2, #247	; 0xf7
    d9be:	f883 209e 	strb.w	r2, [r3, #158]	; 0x9e
	}

	

	PrepareTxMessage(&msgHeader, buffer);
    d9c2:	687b      	ldr	r3, [r7, #4]
    d9c4:	3378      	adds	r3, #120	; 0x78
    d9c6:	683a      	ldr	r2, [r7, #0]
    d9c8:	4619      	mov	r1, r3
    d9ca:	6878      	ldr	r0, [r7, #4]
    d9cc:	4b30      	ldr	r3, [pc, #192]	; (da90 <_ZN15CO_Driver_Class8CAN_SendEP10CO_CANtx_t+0x130>)
    d9ce:	4798      	blx	r3

	if ((CAN_Module->CANtxCount == 0) ) {
    d9d0:	687b      	ldr	r3, [r7, #4]
    d9d2:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
    d9d6:	699b      	ldr	r3, [r3, #24]
    d9d8:	2b00      	cmp	r3, #0
    d9da:	bf0c      	ite	eq
    d9dc:	2301      	moveq	r3, #1
    d9de:	2300      	movne	r3, #0
    d9e0:	b2db      	uxtb	r3, r3
    d9e2:	2b00      	cmp	r3, #0
    d9e4:	d041      	beq.n	da6a <_ZN15CO_Driver_Class8CAN_SendEP10CO_CANtx_t+0x10a>
	//	((uint32_t)hri_can_read_TXFQS_TFFL_bf(canHandler->dev.hw) > 0 )) {
		CAN_Module->bufferInhibitFlag = buffer->syncFlag;
    d9e6:	687b      	ldr	r3, [r7, #4]
    d9e8:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
    d9ec:	683a      	ldr	r2, [r7, #0]
    d9ee:	7b92      	ldrb	r2, [r2, #14]
    d9f0:	b2d2      	uxtb	r2, r2
    d9f2:	759a      	strb	r2, [r3, #22]
		
		can_async_register_callback(CAN_Module->CANBaseDescriptor, CAN_ASYNC_TX_CB, (FUNC_PTR)CO_tx_callback);
    d9f4:	687b      	ldr	r3, [r7, #4]
    d9f6:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
    d9fa:	681b      	ldr	r3, [r3, #0]
    d9fc:	4a25      	ldr	r2, [pc, #148]	; (da94 <_ZN15CO_Driver_Class8CAN_SendEP10CO_CANtx_t+0x134>)
    d9fe:	2101      	movs	r1, #1
    da00:	4618      	mov	r0, r3
    da02:	4b25      	ldr	r3, [pc, #148]	; (da98 <_ZN15CO_Driver_Class8CAN_SendEP10CO_CANtx_t+0x138>)
    da04:	4798      	blx	r3
		can_async_enable(CAN_Module->CANBaseDescriptor);
    da06:	687b      	ldr	r3, [r7, #4]
    da08:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
    da0c:	681b      	ldr	r3, [r3, #0]
    da0e:	4618      	mov	r0, r3
    da10:	4b22      	ldr	r3, [pc, #136]	; (da9c <_ZN15CO_Driver_Class8CAN_SendEP10CO_CANtx_t+0x13c>)
    da12:	4798      	blx	r3
		receivedtxCOCallback=false;
    da14:	687b      	ldr	r3, [r7, #4]
    da16:	2200      	movs	r2, #0
    da18:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    da1c:	f3ef 8310 	mrs	r3, PRIMASK
    da20:	60fb      	str	r3, [r7, #12]
  return(result);
    da22:	68fb      	ldr	r3, [r7, #12]
		CO_LOCK_CAN_SEND();
    da24:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
    da26:	b672      	cpsid	i
		HalCanErrorCode=can_async_write(CAN_Module->CANBaseDescriptor, &msgHeader);
    da28:	687b      	ldr	r3, [r7, #4]
    da2a:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
    da2e:	681a      	ldr	r2, [r3, #0]
    da30:	687b      	ldr	r3, [r7, #4]
    da32:	3378      	adds	r3, #120	; 0x78
    da34:	4619      	mov	r1, r3
    da36:	4610      	mov	r0, r2
    da38:	4b19      	ldr	r3, [pc, #100]	; (daa0 <_ZN15CO_Driver_Class8CAN_SendEP10CO_CANtx_t+0x140>)
    da3a:	4798      	blx	r3
    da3c:	4603      	mov	r3, r0
    da3e:	461a      	mov	r2, r3
    da40:	687b      	ldr	r3, [r7, #4]
    da42:	61da      	str	r2, [r3, #28]
    da44:	697b      	ldr	r3, [r7, #20]
    da46:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    da48:	693b      	ldr	r3, [r7, #16]
    da4a:	f383 8810 	msr	PRIMASK, r3
		CO_UNLOCK_CAN_SEND();
		if(HalCanErrorCode != CO_ERROR_NO)
    da4e:	687b      	ldr	r3, [r7, #4]
    da50:	69db      	ldr	r3, [r3, #28]
    da52:	2b00      	cmp	r3, #0
    da54:	bf14      	ite	ne
    da56:	2301      	movne	r3, #1
    da58:	2300      	moveq	r3, #0
    da5a:	b2db      	uxtb	r3, r3
    da5c:	2b00      	cmp	r3, #0
    da5e:	d00d      	beq.n	da7c <_ZN15CO_Driver_Class8CAN_SendEP10CO_CANtx_t+0x11c>
		{
			err = CO_ERROR_HAL;
    da60:	687b      	ldr	r3, [r7, #4]
    da62:	22f1      	movs	r2, #241	; 0xf1
    da64:	f883 209e 	strb.w	r2, [r3, #158]	; 0x9e
    da68:	e008      	b.n	da7c <_ZN15CO_Driver_Class8CAN_SendEP10CO_CANtx_t+0x11c>
			//CANmodule->CANtxCount++;
		}
	}	/* if no buffer is free, message will be sent in the task */
	else
	{
		buffer->bufferFull = true;
    da6a:	683b      	ldr	r3, [r7, #0]
    da6c:	2201      	movs	r2, #1
    da6e:	735a      	strb	r2, [r3, #13]
		CAN_Module->CANtxCount++;
    da70:	687b      	ldr	r3, [r7, #4]
    da72:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
    da76:	699a      	ldr	r2, [r3, #24]
    da78:	3201      	adds	r2, #1
    da7a:	619a      	str	r2, [r3, #24]
	}
	

	return err;
    da7c:	687b      	ldr	r3, [r7, #4]
    da7e:	f993 309e 	ldrsb.w	r3, [r3, #158]	; 0x9e
}
    da82:	4618      	mov	r0, r3
    da84:	371c      	adds	r7, #28
    da86:	46bd      	mov	sp, r7
    da88:	bd90      	pop	{r4, r7, pc}
    da8a:	bf00      	nop
    da8c:	0000e3f5 	.word	0x0000e3f5
    da90:	0000d555 	.word	0x0000d555
    da94:	0000d46d 	.word	0x0000d46d
    da98:	00001811 	.word	0x00001811
    da9c:	0000173d 	.word	0x0000173d
    daa0:	000017c5 	.word	0x000017c5

0000daa4 <_ZN15CO_Driver_Class23CANClearPendingSyncPDOsEv>:


/******************************************************************************/
void CO_Driver_Class::CANClearPendingSyncPDOs(void)
{
    daa4:	b590      	push	{r4, r7, lr}
    daa6:	b089      	sub	sp, #36	; 0x24
    daa8:	af02      	add	r7, sp, #8
    daaa:	6078      	str	r0, [r7, #4]
	tpdoDeleted = 0U;
    daac:	687b      	ldr	r3, [r7, #4]
    daae:	2200      	movs	r2, #0
    dab0:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    dab4:	f3ef 8310 	mrs	r3, PRIMASK
    dab8:	60bb      	str	r3, [r7, #8]
  return(result);
    daba:	68bb      	ldr	r3, [r7, #8]

	CO_LOCK_CAN_SEND();
    dabc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
    dabe:	b672      	cpsid	i
      {
    	HAL_CAN_AbortTxRequest(CANmodule->);
      }
	 */

	if(/*messageIsOnCanBuffer && */CAN_Module->bufferInhibitFlag){
    dac0:	687b      	ldr	r3, [r7, #4]
    dac2:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
    dac6:	7d9b      	ldrb	r3, [r3, #22]
    dac8:	b2db      	uxtb	r3, r3
    daca:	2b00      	cmp	r3, #0
    dacc:	bf14      	ite	ne
    dace:	2301      	movne	r3, #1
    dad0:	2300      	moveq	r3, #0
    dad2:	b2db      	uxtb	r3, r3
    dad4:	2b00      	cmp	r3, #0
    dad6:	d008      	beq.n	daea <_ZN15CO_Driver_Class23CANClearPendingSyncPDOsEv+0x46>
		/* clear TXREQ */
		CAN_Module->bufferInhibitFlag = false;
    dad8:	687b      	ldr	r3, [r7, #4]
    dada:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
    dade:	2200      	movs	r2, #0
    dae0:	759a      	strb	r2, [r3, #22]
		tpdoDeleted = 1U;
    dae2:	687b      	ldr	r3, [r7, #4]
    dae4:	2201      	movs	r2, #1
    dae6:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	}
	/* delete also pending synchronous TPDOs in TX buffers */
	if(CAN_Module->CANtxCount != 0U){
    daea:	687b      	ldr	r3, [r7, #4]
    daec:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
    daf0:	699b      	ldr	r3, [r3, #24]
    daf2:	2b00      	cmp	r3, #0
    daf4:	bf14      	ite	ne
    daf6:	2301      	movne	r3, #1
    daf8:	2300      	moveq	r3, #0
    dafa:	b2db      	uxtb	r3, r3
    dafc:	2b00      	cmp	r3, #0
    dafe:	d03c      	beq.n	db7a <_ZN15CO_Driver_Class23CANClearPendingSyncPDOsEv+0xd6>
	
		CO_CANtx_t *buffer = &CAN_Module->txArray[0];
    db00:	687b      	ldr	r3, [r7, #4]
    db02:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
    db06:	68db      	ldr	r3, [r3, #12]
    db08:	617b      	str	r3, [r7, #20]
		for(i = CAN_Module->txSize; i > 0U; i--){
    db0a:	687b      	ldr	r3, [r7, #4]
    db0c:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
    db10:	691a      	ldr	r2, [r3, #16]
    db12:	687b      	ldr	r3, [r7, #4]
    db14:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
    db18:	687b      	ldr	r3, [r7, #4]
    db1a:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
    db1e:	2b00      	cmp	r3, #0
    db20:	d02b      	beq.n	db7a <_ZN15CO_Driver_Class23CANClearPendingSyncPDOsEv+0xd6>
			if(buffer->bufferFull){
    db22:	697b      	ldr	r3, [r7, #20]
    db24:	7b5b      	ldrb	r3, [r3, #13]
    db26:	b2db      	uxtb	r3, r3
    db28:	2b00      	cmp	r3, #0
    db2a:	bf14      	ite	ne
    db2c:	2301      	movne	r3, #1
    db2e:	2300      	moveq	r3, #0
    db30:	b2db      	uxtb	r3, r3
    db32:	2b00      	cmp	r3, #0
    db34:	d016      	beq.n	db64 <_ZN15CO_Driver_Class23CANClearPendingSyncPDOsEv+0xc0>
				if(buffer->syncFlag){
    db36:	697b      	ldr	r3, [r7, #20]
    db38:	7b9b      	ldrb	r3, [r3, #14]
    db3a:	b2db      	uxtb	r3, r3
    db3c:	2b00      	cmp	r3, #0
    db3e:	bf14      	ite	ne
    db40:	2301      	movne	r3, #1
    db42:	2300      	moveq	r3, #0
    db44:	b2db      	uxtb	r3, r3
    db46:	2b00      	cmp	r3, #0
    db48:	d00c      	beq.n	db64 <_ZN15CO_Driver_Class23CANClearPendingSyncPDOsEv+0xc0>
					buffer->bufferFull = false;
    db4a:	697b      	ldr	r3, [r7, #20]
    db4c:	2200      	movs	r2, #0
    db4e:	735a      	strb	r2, [r3, #13]
					CAN_Module->CANtxCount--;
    db50:	687b      	ldr	r3, [r7, #4]
    db52:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
    db56:	699a      	ldr	r2, [r3, #24]
    db58:	3a01      	subs	r2, #1
    db5a:	619a      	str	r2, [r3, #24]
					tpdoDeleted = 2U;
    db5c:	687b      	ldr	r3, [r7, #4]
    db5e:	2202      	movs	r2, #2
    db60:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
				}
			}
			buffer++;
    db64:	697b      	ldr	r3, [r7, #20]
    db66:	3310      	adds	r3, #16
    db68:	617b      	str	r3, [r7, #20]
		for(i = CAN_Module->txSize; i > 0U; i--){
    db6a:	687b      	ldr	r3, [r7, #4]
    db6c:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
    db70:	1e5a      	subs	r2, r3, #1
    db72:	687b      	ldr	r3, [r7, #4]
    db74:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
    db78:	e7ce      	b.n	db18 <_ZN15CO_Driver_Class23CANClearPendingSyncPDOsEv+0x74>
    db7a:	693b      	ldr	r3, [r7, #16]
    db7c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    db7e:	68fb      	ldr	r3, [r7, #12]
    db80:	f383 8810 	msr	PRIMASK, r3
		}
	}
	CO_UNLOCK_CAN_SEND();


	if(tpdoDeleted != 0U){
    db84:	687b      	ldr	r3, [r7, #4]
    db86:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
    db8a:	2b00      	cmp	r3, #0
    db8c:	d00e      	beq.n	dbac <_ZN15CO_Driver_Class23CANClearPendingSyncPDOsEv+0x108>
		EM_ErrorReport((CO_EM_t*)CAN_Module->em, CO_EM_TPDO_OUTSIDE_WINDOW, CO_EMC_COMMUNICATION, tpdoDeleted);
    db8e:	687b      	ldr	r3, [r7, #4]
    db90:	1d18      	adds	r0, r3, #4
    db92:	687b      	ldr	r3, [r7, #4]
    db94:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
    db98:	6a19      	ldr	r1, [r3, #32]
    db9a:	687b      	ldr	r3, [r7, #4]
    db9c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
    dba0:	9300      	str	r3, [sp, #0]
    dba2:	f44f 4301 	mov.w	r3, #33024	; 0x8100
    dba6:	2215      	movs	r2, #21
    dba8:	4c02      	ldr	r4, [pc, #8]	; (dbb4 <_ZN15CO_Driver_Class23CANClearPendingSyncPDOsEv+0x110>)
    dbaa:	47a0      	blx	r4
	}
}
    dbac:	bf00      	nop
    dbae:	371c      	adds	r7, #28
    dbb0:	46bd      	mov	sp, r7
    dbb2:	bd90      	pop	{r4, r7, pc}
    dbb4:	0000e3f5 	.word	0x0000e3f5

0000dbb8 <_ZN15CO_Driver_Class16CAN_VerifyErrorsEv>:


/******************************************************************************/
void CO_Driver_Class::CAN_VerifyErrors(void){
    dbb8:	b590      	push	{r4, r7, lr}
    dbba:	b087      	sub	sp, #28
    dbbc:	af02      	add	r7, sp, #8
    dbbe:	6078      	str	r0, [r7, #4]
	em = (CO_EM_t*)CAN_Module->em;
    dbc0:	687b      	ldr	r3, [r7, #4]
    dbc2:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
    dbc6:	6a1a      	ldr	r2, [r3, #32]
    dbc8:	687b      	ldr	r3, [r7, #4]
    dbca:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	//uint32_t HalCanErrorCode = canHandler->dev.cb->irq_handler();

	if(CAN_Module->errOld != HalCanErrorCode)
    dbce:	687b      	ldr	r3, [r7, #4]
    dbd0:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
    dbd4:	69da      	ldr	r2, [r3, #28]
    dbd6:	687b      	ldr	r3, [r7, #4]
    dbd8:	69db      	ldr	r3, [r3, #28]
    dbda:	429a      	cmp	r2, r3
    dbdc:	bf14      	ite	ne
    dbde:	2301      	movne	r3, #1
    dbe0:	2300      	moveq	r3, #0
    dbe2:	b2db      	uxtb	r3, r3
    dbe4:	2b00      	cmp	r3, #0
    dbe6:	f000 80ae 	beq.w	dd46 <_ZN15CO_Driver_Class16CAN_VerifyErrorsEv+0x18e>
	{
		CAN_Module->errOld = HalCanErrorCode;
    dbea:	687b      	ldr	r3, [r7, #4]
    dbec:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
    dbf0:	687a      	ldr	r2, [r7, #4]
    dbf2:	69d2      	ldr	r2, [r2, #28]
    dbf4:	61da      	str	r2, [r3, #28]
		if(HalCanErrorCode & CAN_IRQ_BO)
    dbf6:	687b      	ldr	r3, [r7, #4]
    dbf8:	69db      	ldr	r3, [r3, #28]
    dbfa:	f003 0303 	and.w	r3, r3, #3
    dbfe:	2b00      	cmp	r3, #0
    dc00:	bf14      	ite	ne
    dc02:	2301      	movne	r3, #1
    dc04:	2300      	moveq	r3, #0
    dc06:	b2db      	uxtb	r3, r3
    dc08:	2b00      	cmp	r3, #0
    dc0a:	d00d      	beq.n	dc28 <_ZN15CO_Driver_Class16CAN_VerifyErrorsEv+0x70>
		{                               /* bus off */
			EM_ErrorReport(em, CO_EM_CAN_TX_BUS_OFF, CO_EMC_BUS_OFF_RECOVERED, HalCanErrorCode);
    dc0c:	687b      	ldr	r3, [r7, #4]
    dc0e:	1d18      	adds	r0, r3, #4
    dc10:	687b      	ldr	r3, [r7, #4]
    dc12:	f8d3 10a8 	ldr.w	r1, [r3, #168]	; 0xa8
    dc16:	687b      	ldr	r3, [r7, #4]
    dc18:	69db      	ldr	r3, [r3, #28]
    dc1a:	9300      	str	r3, [sp, #0]
    dc1c:	f248 1340 	movw	r3, #33088	; 0x8140
    dc20:	2212      	movs	r2, #18
    dc22:	4c4d      	ldr	r4, [pc, #308]	; (dd58 <_ZN15CO_Driver_Class16CAN_VerifyErrorsEv+0x1a0>)
    dc24:	47a0      	blx	r4
    dc26:	e076      	b.n	dd16 <_ZN15CO_Driver_Class16CAN_VerifyErrorsEv+0x15e>
		}
		else{                                               /* not bus off */
			EM_ErrorReset(em, CO_EM_CAN_TX_BUS_OFF, HalCanErrorCode);
    dc28:	687b      	ldr	r3, [r7, #4]
    dc2a:	1d18      	adds	r0, r3, #4
    dc2c:	687b      	ldr	r3, [r7, #4]
    dc2e:	f8d3 10a8 	ldr.w	r1, [r3, #168]	; 0xa8
    dc32:	687b      	ldr	r3, [r7, #4]
    dc34:	69db      	ldr	r3, [r3, #28]
    dc36:	2212      	movs	r2, #18
    dc38:	4c48      	ldr	r4, [pc, #288]	; (dd5c <_ZN15CO_Driver_Class16CAN_VerifyErrorsEv+0x1a4>)
    dc3a:	47a0      	blx	r4

			if(HalCanErrorCode & CAN_IRQ_EW)
    dc3c:	687b      	ldr	r3, [r7, #4]
    dc3e:	69db      	ldr	r3, [r3, #28]
    dc40:	2300      	movs	r3, #0
    dc42:	2b00      	cmp	r3, #0
    dc44:	d00b      	beq.n	dc5e <_ZN15CO_Driver_Class16CAN_VerifyErrorsEv+0xa6>
			{     											/* bus warning */
				EM_ErrorReport(em, CO_EM_CAN_BUS_WARNING, CO_EMC_NO_ERROR, HalCanErrorCode);
    dc46:	687b      	ldr	r3, [r7, #4]
    dc48:	1d18      	adds	r0, r3, #4
    dc4a:	687b      	ldr	r3, [r7, #4]
    dc4c:	f8d3 10a8 	ldr.w	r1, [r3, #168]	; 0xa8
    dc50:	687b      	ldr	r3, [r7, #4]
    dc52:	69db      	ldr	r3, [r3, #28]
    dc54:	9300      	str	r3, [sp, #0]
    dc56:	2300      	movs	r3, #0
    dc58:	2201      	movs	r2, #1
    dc5a:	4c3f      	ldr	r4, [pc, #252]	; (dd58 <_ZN15CO_Driver_Class16CAN_VerifyErrorsEv+0x1a0>)
    dc5c:	47a0      	blx	r4
			}
			else
			{
				//do nothing
			}
			if(HalCanErrorCode & CAN_IRQ_EP)
    dc5e:	687b      	ldr	r3, [r7, #4]
    dc60:	69db      	ldr	r3, [r3, #28]
    dc62:	f003 0302 	and.w	r3, r3, #2
    dc66:	2b00      	cmp	r3, #0
    dc68:	bf14      	ite	ne
    dc6a:	2301      	movne	r3, #1
    dc6c:	2300      	moveq	r3, #0
    dc6e:	b2db      	uxtb	r3, r3
    dc70:	2b00      	cmp	r3, #0
    dc72:	d019      	beq.n	dca8 <_ZN15CO_Driver_Class16CAN_VerifyErrorsEv+0xf0>
			{      											/* TX/RX bus passive */
				if(!CAN_Module->firstCANtxMessage)
    dc74:	687b      	ldr	r3, [r7, #4]
    dc76:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
    dc7a:	7ddb      	ldrb	r3, [r3, #23]
    dc7c:	b2db      	uxtb	r3, r3
    dc7e:	2b00      	cmp	r3, #0
    dc80:	bf0c      	ite	eq
    dc82:	2301      	moveq	r3, #1
    dc84:	2300      	movne	r3, #0
    dc86:	b2db      	uxtb	r3, r3
    dc88:	2b00      	cmp	r3, #0
    dc8a:	d02f      	beq.n	dcec <_ZN15CO_Driver_Class16CAN_VerifyErrorsEv+0x134>
				{
					EM_ErrorReport(em, CO_EM_CAN_TX_BUS_PASSIVE, CO_EMC_CAN_PASSIVE, HalCanErrorCode);
    dc8c:	687b      	ldr	r3, [r7, #4]
    dc8e:	1d18      	adds	r0, r3, #4
    dc90:	687b      	ldr	r3, [r7, #4]
    dc92:	f8d3 10a8 	ldr.w	r1, [r3, #168]	; 0xa8
    dc96:	687b      	ldr	r3, [r7, #4]
    dc98:	69db      	ldr	r3, [r3, #28]
    dc9a:	9300      	str	r3, [sp, #0]
    dc9c:	f248 1320 	movw	r3, #33056	; 0x8120
    dca0:	2207      	movs	r2, #7
    dca2:	4c2d      	ldr	r4, [pc, #180]	; (dd58 <_ZN15CO_Driver_Class16CAN_VerifyErrorsEv+0x1a0>)
    dca4:	47a0      	blx	r4
    dca6:	e021      	b.n	dcec <_ZN15CO_Driver_Class16CAN_VerifyErrorsEv+0x134>
				{
					//do nothing
				}
			}
			else{
				bool_t isError = EM_IsError(em, CO_EM_CAN_TX_BUS_PASSIVE);
    dca8:	687b      	ldr	r3, [r7, #4]
    dcaa:	1d18      	adds	r0, r3, #4
    dcac:	687b      	ldr	r3, [r7, #4]
    dcae:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
    dcb2:	2207      	movs	r2, #7
    dcb4:	4619      	mov	r1, r3
    dcb6:	4b2a      	ldr	r3, [pc, #168]	; (dd60 <_ZN15CO_Driver_Class16CAN_VerifyErrorsEv+0x1a8>)
    dcb8:	4798      	blx	r3
    dcba:	4603      	mov	r3, r0
    dcbc:	73fb      	strb	r3, [r7, #15]
				if(isError)
    dcbe:	7bfb      	ldrb	r3, [r7, #15]
    dcc0:	2b00      	cmp	r3, #0
    dcc2:	d013      	beq.n	dcec <_ZN15CO_Driver_Class16CAN_VerifyErrorsEv+0x134>
				{
					EM_ErrorReset(em, CO_EM_CAN_TX_BUS_PASSIVE, HalCanErrorCode);
    dcc4:	687b      	ldr	r3, [r7, #4]
    dcc6:	1d18      	adds	r0, r3, #4
    dcc8:	687b      	ldr	r3, [r7, #4]
    dcca:	f8d3 10a8 	ldr.w	r1, [r3, #168]	; 0xa8
    dcce:	687b      	ldr	r3, [r7, #4]
    dcd0:	69db      	ldr	r3, [r3, #28]
    dcd2:	2207      	movs	r2, #7
    dcd4:	4c21      	ldr	r4, [pc, #132]	; (dd5c <_ZN15CO_Driver_Class16CAN_VerifyErrorsEv+0x1a4>)
    dcd6:	47a0      	blx	r4
					EM_ErrorReset(em, CO_EM_CAN_TX_OVERFLOW, HalCanErrorCode);
    dcd8:	687b      	ldr	r3, [r7, #4]
    dcda:	1d18      	adds	r0, r3, #4
    dcdc:	687b      	ldr	r3, [r7, #4]
    dcde:	f8d3 10a8 	ldr.w	r1, [r3, #168]	; 0xa8
    dce2:	687b      	ldr	r3, [r7, #4]
    dce4:	69db      	ldr	r3, [r3, #28]
    dce6:	2214      	movs	r2, #20
    dce8:	4c1c      	ldr	r4, [pc, #112]	; (dd5c <_ZN15CO_Driver_Class16CAN_VerifyErrorsEv+0x1a4>)
    dcea:	47a0      	blx	r4
				{
					//do nothing
				}
			}

			if(HalCanErrorCode & CAN_IRQ_EA)
    dcec:	687b      	ldr	r3, [r7, #4]
    dcee:	69db      	ldr	r3, [r3, #28]
    dcf0:	f003 0301 	and.w	r3, r3, #1
    dcf4:	2b00      	cmp	r3, #0
    dcf6:	bf14      	ite	ne
    dcf8:	2301      	movne	r3, #1
    dcfa:	2300      	moveq	r3, #0
    dcfc:	b2db      	uxtb	r3, r3
    dcfe:	2b00      	cmp	r3, #0
    dd00:	d009      	beq.n	dd16 <_ZN15CO_Driver_Class16CAN_VerifyErrorsEv+0x15e>
			{      											 /* no error */
				EM_ErrorReset(em, CO_EM_CAN_BUS_WARNING, HalCanErrorCode);
    dd02:	687b      	ldr	r3, [r7, #4]
    dd04:	1d18      	adds	r0, r3, #4
    dd06:	687b      	ldr	r3, [r7, #4]
    dd08:	f8d3 10a8 	ldr.w	r1, [r3, #168]	; 0xa8
    dd0c:	687b      	ldr	r3, [r7, #4]
    dd0e:	69db      	ldr	r3, [r3, #28]
    dd10:	2201      	movs	r2, #1
    dd12:	4c12      	ldr	r4, [pc, #72]	; (dd5c <_ZN15CO_Driver_Class16CAN_VerifyErrorsEv+0x1a4>)
    dd14:	47a0      	blx	r4
				//do nothing
			}

		}

		if((HalCanErrorCode & CAN_IRQ_DO) )
    dd16:	687b      	ldr	r3, [r7, #4]
    dd18:	69db      	ldr	r3, [r3, #28]
    dd1a:	f003 0304 	and.w	r3, r3, #4
    dd1e:	2b00      	cmp	r3, #0
    dd20:	bf14      	ite	ne
    dd22:	2301      	movne	r3, #1
    dd24:	2300      	moveq	r3, #0
    dd26:	b2db      	uxtb	r3, r3
    dd28:	2b00      	cmp	r3, #0
    dd2a:	d00c      	beq.n	dd46 <_ZN15CO_Driver_Class16CAN_VerifyErrorsEv+0x18e>
		{                                 					/* CAN RX bus overflow */
			EM_ErrorReport(em, CO_EM_CAN_RXB_OVERFLOW, CO_EMC_CAN_OVERRUN, HalCanErrorCode);
    dd2c:	687b      	ldr	r3, [r7, #4]
    dd2e:	1d18      	adds	r0, r3, #4
    dd30:	687b      	ldr	r3, [r7, #4]
    dd32:	f8d3 10a8 	ldr.w	r1, [r3, #168]	; 0xa8
    dd36:	687b      	ldr	r3, [r7, #4]
    dd38:	69db      	ldr	r3, [r3, #28]
    dd3a:	9300      	str	r3, [sp, #0]
    dd3c:	f248 1310 	movw	r3, #33040	; 0x8110
    dd40:	2213      	movs	r2, #19
    dd42:	4c05      	ldr	r4, [pc, #20]	; (dd58 <_ZN15CO_Driver_Class16CAN_VerifyErrorsEv+0x1a0>)
    dd44:	47a0      	blx	r4
		else
		{
			//do nothing
		}
	}
		receivedIntCOCallback=false;
    dd46:	687b      	ldr	r3, [r7, #4]
    dd48:	2200      	movs	r2, #0
    dd4a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
}
    dd4e:	bf00      	nop
    dd50:	3714      	adds	r7, #20
    dd52:	46bd      	mov	sp, r7
    dd54:	bd90      	pop	{r4, r7, pc}
    dd56:	bf00      	nop
    dd58:	0000e3f5 	.word	0x0000e3f5
    dd5c:	0000e549 	.word	0x0000e549
    dd60:	0000e695 	.word	0x0000e695

0000dd64 <_ZN15CO_Driver_Class19ProcessInterrupt_RxEv>:

/*Interrupt handlers*/
/******************************************************************************/
void CO_Driver_Class::ProcessInterrupt_Rx(void)
{
    dd64:	b580      	push	{r7, lr}
    dd66:	b084      	sub	sp, #16
    dd68:	af00      	add	r7, sp, #0
    dd6a:	6078      	str	r0, [r7, #4]

	

	ConvertCANMsg2CORxMsg(receivedCOMsg,&CANmessage);
    dd6c:	687b      	ldr	r3, [r7, #4]
    dd6e:	f103 0164 	add.w	r1, r3, #100	; 0x64
    dd72:	687b      	ldr	r3, [r7, #4]
    dd74:	33f4      	adds	r3, #244	; 0xf4
    dd76:	461a      	mov	r2, r3
    dd78:	6878      	ldr	r0, [r7, #4]
    dd7a:	4b30      	ldr	r3, [pc, #192]	; (de3c <_ZN15CO_Driver_Class19ProcessInterrupt_RxEv+0xd8>)
    dd7c:	4798      	blx	r3
	MsgBuff=CAN_Module->rxArray;
    dd7e:	687b      	ldr	r3, [r7, #4]
    dd80:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
    dd84:	685a      	ldr	r2, [r3, #4]
    dd86:	687b      	ldr	r3, [r7, #4]
    dd88:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
	/* Search rxArray form CANmodule for the same CAN-ID. */
	uint32_t msgCO = (((uint32_t)(CANmessage.ident << 2)) | (uint32_t)(msg.type));
    dd8c:	687b      	ldr	r3, [r7, #4]
    dd8e:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
    dd92:	009b      	lsls	r3, r3, #2
    dd94:	687a      	ldr	r2, [r7, #4]
    dd96:	f892 2090 	ldrb.w	r2, [r2, #144]	; 0x90
    dd9a:	4313      	orrs	r3, r2
    dd9c:	60fb      	str	r3, [r7, #12]
	for (index = 0; index < RxFifo_Callback_CanModule_p->rxSize; index++)
    dd9e:	687b      	ldr	r3, [r7, #4]
    dda0:	2200      	movs	r2, #0
    dda2:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
    dda6:	687b      	ldr	r3, [r7, #4]
    dda8:	f8d3 2114 	ldr.w	r2, [r3, #276]	; 0x114
    ddac:	687b      	ldr	r3, [r7, #4]
    ddae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
    ddb0:	689b      	ldr	r3, [r3, #8]
    ddb2:	429a      	cmp	r2, r3
    ddb4:	d221      	bcs.n	ddfa <_ZN15CO_Driver_Class19ProcessInterrupt_RxEv+0x96>
	{
		
		if (((msgCO ^ MsgBuff->ident) & MsgBuff->mask) == 0)
    ddb6:	687b      	ldr	r3, [r7, #4]
    ddb8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
    ddbc:	681a      	ldr	r2, [r3, #0]
    ddbe:	68fb      	ldr	r3, [r7, #12]
    ddc0:	405a      	eors	r2, r3
    ddc2:	687b      	ldr	r3, [r7, #4]
    ddc4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
    ddc8:	685b      	ldr	r3, [r3, #4]
    ddca:	4013      	ands	r3, r2
    ddcc:	2b00      	cmp	r3, #0
    ddce:	d104      	bne.n	ddda <_ZN15CO_Driver_Class19ProcessInterrupt_RxEv+0x76>
		{
			msgMatched = true;
    ddd0:	687b      	ldr	r3, [r7, #4]
    ddd2:	2201      	movs	r2, #1
    ddd4:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
			break;
    ddd8:	e00f      	b.n	ddfa <_ZN15CO_Driver_Class19ProcessInterrupt_RxEv+0x96>
		}
		MsgBuff++;
    ddda:	687b      	ldr	r3, [r7, #4]
    dddc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
    dde0:	f103 0210 	add.w	r2, r3, #16
    dde4:	687b      	ldr	r3, [r7, #4]
    dde6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
	for (index = 0; index < RxFifo_Callback_CanModule_p->rxSize; index++)
    ddea:	687b      	ldr	r3, [r7, #4]
    ddec:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
    ddf0:	1c5a      	adds	r2, r3, #1
    ddf2:	687b      	ldr	r3, [r7, #4]
    ddf4:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
    ddf8:	e7d5      	b.n	dda6 <_ZN15CO_Driver_Class19ProcessInterrupt_RxEv+0x42>
	}

	/* Call specific function, which will process the message */
	if(msgMatched && (MsgBuff != NULL) && (MsgBuff->pFunct != NULL))
    ddfa:	687b      	ldr	r3, [r7, #4]
    ddfc:	f893 30ac 	ldrb.w	r3, [r3, #172]	; 0xac
    de00:	2b00      	cmp	r3, #0
    de02:	d016      	beq.n	de32 <_ZN15CO_Driver_Class19ProcessInterrupt_RxEv+0xce>
    de04:	687b      	ldr	r3, [r7, #4]
    de06:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
    de0a:	2b00      	cmp	r3, #0
    de0c:	d011      	beq.n	de32 <_ZN15CO_Driver_Class19ProcessInterrupt_RxEv+0xce>
    de0e:	687b      	ldr	r3, [r7, #4]
    de10:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
    de14:	68db      	ldr	r3, [r3, #12]
    de16:	2b00      	cmp	r3, #0
    de18:	d00b      	beq.n	de32 <_ZN15CO_Driver_Class19ProcessInterrupt_RxEv+0xce>
	{
			//printf("  %X", CANmessage.ident);
			MsgBuff->pFunct(MsgBuff->object, &CANmessage);
    de1a:	687b      	ldr	r3, [r7, #4]
    de1c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
    de20:	68db      	ldr	r3, [r3, #12]
    de22:	687a      	ldr	r2, [r7, #4]
    de24:	f8d2 20b0 	ldr.w	r2, [r2, #176]	; 0xb0
    de28:	6890      	ldr	r0, [r2, #8]
    de2a:	687a      	ldr	r2, [r7, #4]
    de2c:	32f4      	adds	r2, #244	; 0xf4
    de2e:	4611      	mov	r1, r2
    de30:	4798      	blx	r3
	//                buffer++;
	//            }
	//        }

	/*CubeMx HAL is responsible for clearing interrupt flags and all the dirty work. */
}
    de32:	bf00      	nop
    de34:	3710      	adds	r7, #16
    de36:	46bd      	mov	sp, r7
    de38:	bd80      	pop	{r7, pc}
    de3a:	bf00      	nop
    de3c:	0000d5a1 	.word	0x0000d5a1

0000de40 <_ZN15CO_Driver_Class14CAN_Polling_TxEv>:


void CO_Driver_Class::CAN_Polling_Tx(void)
{
    de40:	b580      	push	{r7, lr}
    de42:	b084      	sub	sp, #16
    de44:	af00      	add	r7, sp, #0
    de46:	6078      	str	r0, [r7, #4]
	
	//struct can_async_descriptor canStruct= (* struct can_async_descriptor )canHandler;
	if (hri_can_read_TXFQS_TFFL_bf(CAN1) > 0)
    de48:	4845      	ldr	r0, [pc, #276]	; (df60 <_ZN15CO_Driver_Class14CAN_Polling_TxEv+0x120>)
    de4a:	4b46      	ldr	r3, [pc, #280]	; (df64 <_ZN15CO_Driver_Class14CAN_Polling_TxEv+0x124>)
    de4c:	4798      	blx	r3
    de4e:	4603      	mov	r3, r0
    de50:	2b00      	cmp	r3, #0
    de52:	bf14      	ite	ne
    de54:	2301      	movne	r3, #1
    de56:	2300      	moveq	r3, #0
    de58:	b2db      	uxtb	r3, r3
    de5a:	2b00      	cmp	r3, #0
    de5c:	d07b      	beq.n	df56 <_ZN15CO_Driver_Class14CAN_Polling_TxEv+0x116>
	{
		/* First CAN message (bootup) was sent successfully */
		CAN_Module->firstCANtxMessage = false;
    de5e:	687b      	ldr	r3, [r7, #4]
    de60:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
    de64:	2200      	movs	r2, #0
    de66:	75da      	strb	r2, [r3, #23]
		/* Clear flag from previous message */
		CAN_Module->bufferInhibitFlag = false;
    de68:	687b      	ldr	r3, [r7, #4]
    de6a:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
    de6e:	2200      	movs	r2, #0
    de70:	759a      	strb	r2, [r3, #22]
		/* Are there any new messages waiting to be send */
		if(CAN_Module->CANtxCount > 0U)
    de72:	687b      	ldr	r3, [r7, #4]
    de74:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
    de78:	699b      	ldr	r3, [r3, #24]
    de7a:	2b00      	cmp	r3, #0
    de7c:	bf14      	ite	ne
    de7e:	2301      	movne	r3, #1
    de80:	2300      	moveq	r3, #0
    de82:	b2db      	uxtb	r3, r3
    de84:	2b00      	cmp	r3, #0
    de86:	d066      	beq.n	df56 <_ZN15CO_Driver_Class14CAN_Polling_TxEv+0x116>
		{
			uint32_t i;             /* index of transmitting message */

			/* first buffer */
			CO_CANtx_t *buffer = &CAN_Module->txArray[0];
    de88:	687b      	ldr	r3, [r7, #4]
    de8a:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
    de8e:	68db      	ldr	r3, [r3, #12]
    de90:	60bb      	str	r3, [r7, #8]
			/* search through whole array of pointers to transmit message buffers. */
			for(i = CAN_Module->txSize; i > 0U; i--)
    de92:	687b      	ldr	r3, [r7, #4]
    de94:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
    de98:	691b      	ldr	r3, [r3, #16]
    de9a:	60fb      	str	r3, [r7, #12]
    de9c:	68fb      	ldr	r3, [r7, #12]
    de9e:	2b00      	cmp	r3, #0
    dea0:	d051      	beq.n	df46 <_ZN15CO_Driver_Class14CAN_Polling_TxEv+0x106>
			{
				/* if message buffer is full, send it. */
				if(buffer->bufferFull)
    dea2:	68bb      	ldr	r3, [r7, #8]
    dea4:	7b5b      	ldrb	r3, [r3, #13]
    dea6:	b2db      	uxtb	r3, r3
    dea8:	2b00      	cmp	r3, #0
    deaa:	bf14      	ite	ne
    deac:	2301      	movne	r3, #1
    deae:	2300      	moveq	r3, #0
    deb0:	b2db      	uxtb	r3, r3
    deb2:	2b00      	cmp	r3, #0
    deb4:	d03f      	beq.n	df36 <_ZN15CO_Driver_Class14CAN_Polling_TxEv+0xf6>
				{

					/* Copy message to CAN buffer */
					CAN_Module->bufferInhibitFlag = buffer->syncFlag;
    deb6:	687b      	ldr	r3, [r7, #4]
    deb8:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
    debc:	68ba      	ldr	r2, [r7, #8]
    debe:	7b92      	ldrb	r2, [r2, #14]
    dec0:	b2d2      	uxtb	r2, r2
    dec2:	759a      	strb	r2, [r3, #22]

					

					PrepareTxMessage(&msgHeader, buffer);
    dec4:	687b      	ldr	r3, [r7, #4]
    dec6:	3378      	adds	r3, #120	; 0x78
    dec8:	68ba      	ldr	r2, [r7, #8]
    deca:	4619      	mov	r1, r3
    decc:	6878      	ldr	r0, [r7, #4]
    dece:	4b26      	ldr	r3, [pc, #152]	; (df68 <_ZN15CO_Driver_Class14CAN_Polling_TxEv+0x128>)
    ded0:	4798      	blx	r3
					can_async_register_callback(canDescr, CAN_ASYNC_TX_CB, (FUNC_PTR)CO_tx_callback);
    ded2:	687b      	ldr	r3, [r7, #4]
    ded4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
    ded8:	4a24      	ldr	r2, [pc, #144]	; (df6c <_ZN15CO_Driver_Class14CAN_Polling_TxEv+0x12c>)
    deda:	2101      	movs	r1, #1
    dedc:	4618      	mov	r0, r3
    dede:	4b24      	ldr	r3, [pc, #144]	; (df70 <_ZN15CO_Driver_Class14CAN_Polling_TxEv+0x130>)
    dee0:	4798      	blx	r3
					can_async_enable(canDescr);
    dee2:	687b      	ldr	r3, [r7, #4]
    dee4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
    dee8:	4618      	mov	r0, r3
    deea:	4b22      	ldr	r3, [pc, #136]	; (df74 <_ZN15CO_Driver_Class14CAN_Polling_TxEv+0x134>)
    deec:	4798      	blx	r3
					receivedtxCOCallback=false;
    deee:	687b      	ldr	r3, [r7, #4]
    def0:	2200      	movs	r2, #0
    def2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
					HalCanErrorCode=can_async_write(canDescr, &msgHeader);
    def6:	687b      	ldr	r3, [r7, #4]
    def8:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    defc:	687b      	ldr	r3, [r7, #4]
    defe:	3378      	adds	r3, #120	; 0x78
    df00:	4619      	mov	r1, r3
    df02:	4610      	mov	r0, r2
    df04:	4b1c      	ldr	r3, [pc, #112]	; (df78 <_ZN15CO_Driver_Class14CAN_Polling_TxEv+0x138>)
    df06:	4798      	blx	r3
    df08:	4603      	mov	r3, r0
    df0a:	461a      	mov	r2, r3
    df0c:	687b      	ldr	r3, [r7, #4]
    df0e:	61da      	str	r2, [r3, #28]
					if( HalCanErrorCode != CO_ERROR_NO)
    df10:	687b      	ldr	r3, [r7, #4]
    df12:	69db      	ldr	r3, [r3, #28]
    df14:	2b00      	cmp	r3, #0
    df16:	bf14      	ite	ne
    df18:	2301      	movne	r3, #1
    df1a:	2300      	moveq	r3, #0
    df1c:	b2db      	uxtb	r3, r3
    df1e:	2b00      	cmp	r3, #0
    df20:	d110      	bne.n	df44 <_ZN15CO_Driver_Class14CAN_Polling_TxEv+0x104>
					{
						;//do nothing
					}
					else
					{
						buffer->bufferFull = false;
    df22:	68bb      	ldr	r3, [r7, #8]
    df24:	2200      	movs	r2, #0
    df26:	735a      	strb	r2, [r3, #13]
						CAN_Module->CANtxCount--;
    df28:	687b      	ldr	r3, [r7, #4]
    df2a:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
    df2e:	699a      	ldr	r2, [r3, #24]
    df30:	3a01      	subs	r2, #1
    df32:	619a      	str	r2, [r3, #24]
					}

					break;                      /* exit for loop */
    df34:	e006      	b.n	df44 <_ZN15CO_Driver_Class14CAN_Polling_TxEv+0x104>
				}
				else
				{
					/*do nothing*/;
				}
				buffer++;
    df36:	68bb      	ldr	r3, [r7, #8]
    df38:	3310      	adds	r3, #16
    df3a:	60bb      	str	r3, [r7, #8]
			for(i = CAN_Module->txSize; i > 0U; i--)
    df3c:	68fb      	ldr	r3, [r7, #12]
    df3e:	3b01      	subs	r3, #1
    df40:	60fb      	str	r3, [r7, #12]
    df42:	e7ab      	b.n	de9c <_ZN15CO_Driver_Class14CAN_Polling_TxEv+0x5c>
					break;                      /* exit for loop */
    df44:	bf00      	nop
			}/* end of for loop */

			/* Clear counter if no more messages */
			if(i == 0U)
    df46:	68fb      	ldr	r3, [r7, #12]
    df48:	2b00      	cmp	r3, #0
    df4a:	d104      	bne.n	df56 <_ZN15CO_Driver_Class14CAN_Polling_TxEv+0x116>
			{
				CAN_Module->CANtxCount = 0U;
    df4c:	687b      	ldr	r3, [r7, #4]
    df4e:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
    df52:	2200      	movs	r2, #0
    df54:	619a      	str	r2, [r3, #24]
			{
				/*do nothing*/;
			}
		}
	}
}
    df56:	bf00      	nop
    df58:	3710      	adds	r7, #16
    df5a:	46bd      	mov	sp, r7
    df5c:	bd80      	pop	{r7, pc}
    df5e:	bf00      	nop
    df60:	42000400 	.word	0x42000400
    df64:	0000d3b9 	.word	0x0000d3b9
    df68:	0000d555 	.word	0x0000d555
    df6c:	0000d46d 	.word	0x0000d46d
    df70:	00001811 	.word	0x00001811
    df74:	0000173d 	.word	0x0000173d
    df78:	000017c5 	.word	0x000017c5

0000df7c <_ZN18CO_Emergency_ClassC1Ev>:
#include "CO_Driver_Class.h"

CO_Emergency_Class	*ptrCOEMClass;

// default constructor
CO_Emergency_Class::CO_Emergency_Class()
    df7c:	b580      	push	{r7, lr}
    df7e:	b082      	sub	sp, #8
    df80:	af00      	add	r7, sp, #0
    df82:	6078      	str	r0, [r7, #4]
    df84:	687b      	ldr	r3, [r7, #4]
    df86:	4618      	mov	r0, r3
    df88:	4b04      	ldr	r3, [pc, #16]	; (df9c <_ZN18CO_Emergency_ClassC1Ev+0x20>)
    df8a:	4798      	blx	r3
{
	ptrCOEMClass=this;
    df8c:	4a04      	ldr	r2, [pc, #16]	; (dfa0 <_ZN18CO_Emergency_ClassC1Ev+0x24>)
    df8e:	687b      	ldr	r3, [r7, #4]
    df90:	6013      	str	r3, [r2, #0]
} //CO_Emergency_Class
    df92:	687b      	ldr	r3, [r7, #4]
    df94:	4618      	mov	r0, r3
    df96:	3708      	adds	r7, #8
    df98:	46bd      	mov	sp, r7
    df9a:	bd80      	pop	{r7, pc}
    df9c:	00010405 	.word	0x00010405
    dfa0:	200019a8 	.word	0x200019a8

0000dfa4 <_ZN18CO_Emergency_ClassD1Ev>:

// default destructor
CO_Emergency_Class::~CO_Emergency_Class()
    dfa4:	b580      	push	{r7, lr}
    dfa6:	b082      	sub	sp, #8
    dfa8:	af00      	add	r7, sp, #0
    dfaa:	6078      	str	r0, [r7, #4]
    dfac:	687b      	ldr	r3, [r7, #4]
    dfae:	4618      	mov	r0, r3
    dfb0:	4b03      	ldr	r3, [pc, #12]	; (dfc0 <_ZN18CO_Emergency_ClassD1Ev+0x1c>)
    dfb2:	4798      	blx	r3
{
} //~CO_Emergency_Class
    dfb4:	687b      	ldr	r3, [r7, #4]
    dfb6:	4618      	mov	r0, r3
    dfb8:	3708      	adds	r7, #8
    dfba:	46bd      	mov	sp, r7
    dfbc:	bd80      	pop	{r7, pc}
    dfbe:	bf00      	nop
    dfc0:	0001042d 	.word	0x0001042d

0000dfc4 <_ZL11CO_ODF_1003P12CO_ODF_arg_t>:
 * Function for accessing _Pre-Defined Error Field_ (index 0x1003) from SDO server.
 *
 * For more information see file CO_SDO.h.
 */

static   CO_SDO_abortCode_t CO_ODF_1003(CO_ODF_arg_t *ODF_arg){
    dfc4:	b480      	push	{r7}
    dfc6:	b087      	sub	sp, #28
    dfc8:	af00      	add	r7, sp, #0
    dfca:	6078      	str	r0, [r7, #4]
    
    uint8_t value;
	CO_SDO_abortCode_t ret = CO_SDO_AB_NONE;
    dfcc:	2300      	movs	r3, #0
    dfce:	617b      	str	r3, [r7, #20]

    CO_EMpr_t *emPr = (CO_EMpr_t*) ODF_arg->object;
    dfd0:	687b      	ldr	r3, [r7, #4]
    dfd2:	681b      	ldr	r3, [r3, #0]
    dfd4:	613b      	str	r3, [r7, #16]
    value = ODF_arg->data[0];
    dfd6:	687b      	ldr	r3, [r7, #4]
    dfd8:	685b      	ldr	r3, [r3, #4]
    dfda:	781b      	ldrb	r3, [r3, #0]
    dfdc:	73fb      	strb	r3, [r7, #15]

    if(ODF_arg->reading){
    dfde:	687b      	ldr	r3, [r7, #4]
    dfe0:	7f5b      	ldrb	r3, [r3, #29]
    dfe2:	2b00      	cmp	r3, #0
    dfe4:	d017      	beq.n	e016 <_ZL11CO_ODF_1003P12CO_ODF_arg_t+0x52>
        uint8_t noOfErrors;
        noOfErrors = emPr->preDefErrNoOfErrors;
    dfe6:	693b      	ldr	r3, [r7, #16]
    dfe8:	7a5b      	ldrb	r3, [r3, #9]
    dfea:	73bb      	strb	r3, [r7, #14]

        if(ODF_arg->subIndex == 0U){
    dfec:	687b      	ldr	r3, [r7, #4]
    dfee:	7f1b      	ldrb	r3, [r3, #28]
    dff0:	2b00      	cmp	r3, #0
    dff2:	d104      	bne.n	dffe <_ZL11CO_ODF_1003P12CO_ODF_arg_t+0x3a>
            ODF_arg->data[0] = noOfErrors;
    dff4:	687b      	ldr	r3, [r7, #4]
    dff6:	685b      	ldr	r3, [r3, #4]
    dff8:	7bba      	ldrb	r2, [r7, #14]
    dffa:	701a      	strb	r2, [r3, #0]
    dffc:	e01b      	b.n	e036 <_ZL11CO_ODF_1003P12CO_ODF_arg_t+0x72>
        }
        else if(ODF_arg->subIndex > noOfErrors){
    dffe:	687b      	ldr	r3, [r7, #4]
    e000:	7f1b      	ldrb	r3, [r3, #28]
    e002:	461a      	mov	r2, r3
    e004:	7bbb      	ldrb	r3, [r7, #14]
    e006:	429a      	cmp	r2, r3
    e008:	dd02      	ble.n	e010 <_ZL11CO_ODF_1003P12CO_ODF_arg_t+0x4c>
            ret = CO_SDO_AB_NO_DATA;
    e00a:	4b0e      	ldr	r3, [pc, #56]	; (e044 <_ZL11CO_ODF_1003P12CO_ODF_arg_t+0x80>)
    e00c:	617b      	str	r3, [r7, #20]
    e00e:	e012      	b.n	e036 <_ZL11CO_ODF_1003P12CO_ODF_arg_t+0x72>
        }
        else{
            ret = CO_SDO_AB_NONE;
    e010:	2300      	movs	r3, #0
    e012:	617b      	str	r3, [r7, #20]
    e014:	e00f      	b.n	e036 <_ZL11CO_ODF_1003P12CO_ODF_arg_t+0x72>
        }
    }
    else{
        /* only '0' may be written to subIndex 0 */
        if(ODF_arg->subIndex == 0U){
    e016:	687b      	ldr	r3, [r7, #4]
    e018:	7f1b      	ldrb	r3, [r3, #28]
    e01a:	2b00      	cmp	r3, #0
    e01c:	d109      	bne.n	e032 <_ZL11CO_ODF_1003P12CO_ODF_arg_t+0x6e>
            if(value == 0U){
    e01e:	7bfb      	ldrb	r3, [r7, #15]
    e020:	2b00      	cmp	r3, #0
    e022:	d103      	bne.n	e02c <_ZL11CO_ODF_1003P12CO_ODF_arg_t+0x68>
                emPr->preDefErrNoOfErrors = 0U;
    e024:	693b      	ldr	r3, [r7, #16]
    e026:	2200      	movs	r2, #0
    e028:	725a      	strb	r2, [r3, #9]
    e02a:	e004      	b.n	e036 <_ZL11CO_ODF_1003P12CO_ODF_arg_t+0x72>
            }
            else{
                ret = CO_SDO_AB_INVALID_VALUE;
    e02c:	4b06      	ldr	r3, [pc, #24]	; (e048 <_ZL11CO_ODF_1003P12CO_ODF_arg_t+0x84>)
    e02e:	617b      	str	r3, [r7, #20]
    e030:	e001      	b.n	e036 <_ZL11CO_ODF_1003P12CO_ODF_arg_t+0x72>
            }
        }
        else{
            ret = CO_SDO_AB_READONLY;
    e032:	4b06      	ldr	r3, [pc, #24]	; (e04c <_ZL11CO_ODF_1003P12CO_ODF_arg_t+0x88>)
    e034:	617b      	str	r3, [r7, #20]
        }
    }

    return ret;
    e036:	697b      	ldr	r3, [r7, #20]
}
    e038:	4618      	mov	r0, r3
    e03a:	371c      	adds	r7, #28
    e03c:	46bd      	mov	sp, r7
    e03e:	bc80      	pop	{r7}
    e040:	4770      	bx	lr
    e042:	bf00      	nop
    e044:	08000024 	.word	0x08000024
    e048:	06090030 	.word	0x06090030
    e04c:	06010002 	.word	0x06010002

0000e050 <_ZL11CO_ODF_1014P12CO_ODF_arg_t>:
 * Function for accessing _COB ID EMCY_ (index 0x1014) from SDO server.
 *
 * For more information see file CO_SDO.h.
 */

static  CO_SDO_abortCode_t CO_ODF_1014(CO_ODF_arg_t *ODF_arg){
    e050:	b580      	push	{r7, lr}
    e052:	b086      	sub	sp, #24
    e054:	af00      	add	r7, sp, #0
    e056:	6078      	str	r0, [r7, #4]
    uint8_t *nodeId;
    uint32_t value;
    CO_SDO_abortCode_t ret = CO_SDO_AB_NONE;
    e058:	2300      	movs	r3, #0
    e05a:	617b      	str	r3, [r7, #20]
    nodeId = (uint8_t*) ODF_arg->object;
    e05c:	687b      	ldr	r3, [r7, #4]
    e05e:	681b      	ldr	r3, [r3, #0]
    e060:	613b      	str	r3, [r7, #16]
    value =ptrCOEMClass->CO_getUint32(ODF_arg->data);
    e062:	4b10      	ldr	r3, [pc, #64]	; (e0a4 <_ZL11CO_ODF_1014P12CO_ODF_arg_t+0x54>)
    e064:	681b      	ldr	r3, [r3, #0]
    e066:	461a      	mov	r2, r3
    e068:	687b      	ldr	r3, [r7, #4]
    e06a:	685b      	ldr	r3, [r3, #4]
    e06c:	4619      	mov	r1, r3
    e06e:	4610      	mov	r0, r2
    e070:	4b0d      	ldr	r3, [pc, #52]	; (e0a8 <_ZL11CO_ODF_1014P12CO_ODF_arg_t+0x58>)
    e072:	4798      	blx	r3
    e074:	60f8      	str	r0, [r7, #12]

    /* add nodeId to the value */
    if(ODF_arg->reading){
    e076:	687b      	ldr	r3, [r7, #4]
    e078:	7f5b      	ldrb	r3, [r3, #29]
    e07a:	2b00      	cmp	r3, #0
    e07c:	d00c      	beq.n	e098 <_ZL11CO_ODF_1014P12CO_ODF_arg_t+0x48>
        ptrCOEMClass->CO_setUint32(ODF_arg->data, value + *nodeId);
    e07e:	4b09      	ldr	r3, [pc, #36]	; (e0a4 <_ZL11CO_ODF_1014P12CO_ODF_arg_t+0x54>)
    e080:	681b      	ldr	r3, [r3, #0]
    e082:	4618      	mov	r0, r3
    e084:	687b      	ldr	r3, [r7, #4]
    e086:	6859      	ldr	r1, [r3, #4]
    e088:	693b      	ldr	r3, [r7, #16]
    e08a:	781b      	ldrb	r3, [r3, #0]
    e08c:	461a      	mov	r2, r3
    e08e:	68fb      	ldr	r3, [r7, #12]
    e090:	4413      	add	r3, r2
    e092:	461a      	mov	r2, r3
    e094:	4b05      	ldr	r3, [pc, #20]	; (e0ac <_ZL11CO_ODF_1014P12CO_ODF_arg_t+0x5c>)
    e096:	4798      	blx	r3
    }

    return ret;
    e098:	697b      	ldr	r3, [r7, #20]
}
    e09a:	4618      	mov	r0, r3
    e09c:	3718      	adds	r7, #24
    e09e:	46bd      	mov	sp, r7
    e0a0:	bd80      	pop	{r7, pc}
    e0a2:	bf00      	nop
    e0a4:	200019a8 	.word	0x200019a8
    e0a8:	00010485 	.word	0x00010485
    e0ac:	000104b9 	.word	0x000104b9

0000e0b0 <_ZN18CO_Emergency_Class7EM_InitEP7CO_EM_tP9CO_EMpr_tP8CO_SDO_tPhhS6_PmhP14CO_CANmodule_tmm>:
        uint32_t               *preDefErr,
        uint8_t                 preDefErrSize,
        CO_CANmodule_t         *CANdev,
        uint32_t                CANdevTxIdx,
        uint32_t                CANidTxEM)
{
    e0b0:	b590      	push	{r4, r7, lr}
    e0b2:	b089      	sub	sp, #36	; 0x24
    e0b4:	af02      	add	r7, sp, #8
    e0b6:	60f8      	str	r0, [r7, #12]
    e0b8:	60b9      	str	r1, [r7, #8]
    e0ba:	607a      	str	r2, [r7, #4]
    e0bc:	603b      	str	r3, [r7, #0]
    uint8_t i;

    /* verify arguments */
    if(em==NULL || emPr==NULL || SDO==NULL || errorStatusBits==NULL ||
    e0be:	68bb      	ldr	r3, [r7, #8]
    e0c0:	2b00      	cmp	r3, #0
    e0c2:	d015      	beq.n	e0f0 <_ZN18CO_Emergency_Class7EM_InitEP7CO_EM_tP9CO_EMpr_tP8CO_SDO_tPhhS6_PmhP14CO_CANmodule_tmm+0x40>
    e0c4:	687b      	ldr	r3, [r7, #4]
    e0c6:	2b00      	cmp	r3, #0
    e0c8:	d012      	beq.n	e0f0 <_ZN18CO_Emergency_Class7EM_InitEP7CO_EM_tP9CO_EMpr_tP8CO_SDO_tPhhS6_PmhP14CO_CANmodule_tmm+0x40>
    e0ca:	683b      	ldr	r3, [r7, #0]
    e0cc:	2b00      	cmp	r3, #0
    e0ce:	d00f      	beq.n	e0f0 <_ZN18CO_Emergency_Class7EM_InitEP7CO_EM_tP9CO_EMpr_tP8CO_SDO_tPhhS6_PmhP14CO_CANmodule_tmm+0x40>
    e0d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
    e0d2:	2b00      	cmp	r3, #0
    e0d4:	d00c      	beq.n	e0f0 <_ZN18CO_Emergency_Class7EM_InitEP7CO_EM_tP9CO_EMpr_tP8CO_SDO_tPhhS6_PmhP14CO_CANmodule_tmm+0x40>
    e0d6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
    e0da:	2b05      	cmp	r3, #5
    e0dc:	d908      	bls.n	e0f0 <_ZN18CO_Emergency_Class7EM_InitEP7CO_EM_tP9CO_EMpr_tP8CO_SDO_tPhhS6_PmhP14CO_CANmodule_tmm+0x40>
        errorStatusBitsSize<6U || errorRegister==NULL || preDefErr==NULL || CANdev==NULL){
    e0de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    e0e0:	2b00      	cmp	r3, #0
    e0e2:	d005      	beq.n	e0f0 <_ZN18CO_Emergency_Class7EM_InitEP7CO_EM_tP9CO_EMpr_tP8CO_SDO_tPhhS6_PmhP14CO_CANmodule_tmm+0x40>
    e0e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    e0e6:	2b00      	cmp	r3, #0
    e0e8:	d002      	beq.n	e0f0 <_ZN18CO_Emergency_Class7EM_InitEP7CO_EM_tP9CO_EMpr_tP8CO_SDO_tPhhS6_PmhP14CO_CANmodule_tmm+0x40>
    e0ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    e0ec:	2b00      	cmp	r3, #0
    e0ee:	d102      	bne.n	e0f6 <_ZN18CO_Emergency_Class7EM_InitEP7CO_EM_tP9CO_EMpr_tP8CO_SDO_tPhhS6_PmhP14CO_CANmodule_tmm+0x46>
        return CO_ERROR_ILLEGAL_ARGUMENT;
    e0f0:	f04f 33ff 	mov.w	r3, #4294967295
    e0f4:	e072      	b.n	e1dc <_ZN18CO_Emergency_Class7EM_InitEP7CO_EM_tP9CO_EMpr_tP8CO_SDO_tPhhS6_PmhP14CO_CANmodule_tmm+0x12c>
    }

    /* Configure object variables */
    em->errorStatusBits         = errorStatusBits;
    e0f6:	68bb      	ldr	r3, [r7, #8]
    e0f8:	6aba      	ldr	r2, [r7, #40]	; 0x28
    e0fa:	601a      	str	r2, [r3, #0]
    em->errorStatusBitsSize     = errorStatusBitsSize;
    e0fc:	68bb      	ldr	r3, [r7, #8]
    e0fe:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
    e102:	711a      	strb	r2, [r3, #4]
    em->bufEnd                  = em->buf + (CO_EM_INTERNAL_BUFFER_SIZE * 8);
    e104:	68bb      	ldr	r3, [r7, #8]
    e106:	3305      	adds	r3, #5
    e108:	f103 0250 	add.w	r2, r3, #80	; 0x50
    e10c:	68bb      	ldr	r3, [r7, #8]
    e10e:	659a      	str	r2, [r3, #88]	; 0x58
    em->bufWritePtr             = em->buf;
    e110:	68bb      	ldr	r3, [r7, #8]
    e112:	1d5a      	adds	r2, r3, #5
    e114:	68bb      	ldr	r3, [r7, #8]
    e116:	65da      	str	r2, [r3, #92]	; 0x5c
    em->bufReadPtr              = em->buf;
    e118:	68bb      	ldr	r3, [r7, #8]
    e11a:	1d5a      	adds	r2, r3, #5
    e11c:	68bb      	ldr	r3, [r7, #8]
    e11e:	661a      	str	r2, [r3, #96]	; 0x60
    em->bufFull                 = 0U;
    e120:	68bb      	ldr	r3, [r7, #8]
    e122:	2200      	movs	r2, #0
    e124:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
    em->wrongErrorReport        = 0U;
    e128:	68bb      	ldr	r3, [r7, #8]
    e12a:	2200      	movs	r2, #0
    e12c:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
    em->handler            = NULL;
    e130:	68bb      	ldr	r3, [r7, #8]
    e132:	2200      	movs	r2, #0
    e134:	669a      	str	r2, [r3, #104]	; 0x68
    emPr->em                    = em;
    e136:	687b      	ldr	r3, [r7, #4]
    e138:	68ba      	ldr	r2, [r7, #8]
    e13a:	611a      	str	r2, [r3, #16]
    emPr->errorRegister         = errorRegister;
    e13c:	687b      	ldr	r3, [r7, #4]
    e13e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    e140:	601a      	str	r2, [r3, #0]
    emPr->preDefErr             = preDefErr;
    e142:	687b      	ldr	r3, [r7, #4]
    e144:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    e146:	605a      	str	r2, [r3, #4]
    emPr->preDefErrSize         = preDefErrSize;
    e148:	687b      	ldr	r3, [r7, #4]
    e14a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
    e14e:	721a      	strb	r2, [r3, #8]
    emPr->preDefErrNoOfErrors   = 0U;
    e150:	687b      	ldr	r3, [r7, #4]
    e152:	2200      	movs	r2, #0
    e154:	725a      	strb	r2, [r3, #9]
    emPr->inhibitEmTimer        = 0U;
    e156:	687b      	ldr	r3, [r7, #4]
    e158:	2200      	movs	r2, #0
    e15a:	60da      	str	r2, [r3, #12]
 
    /* clear error status bits */
    for(i=0U; i<errorStatusBitsSize; i++){
    e15c:	2300      	movs	r3, #0
    e15e:	75fb      	strb	r3, [r7, #23]
    e160:	7dfa      	ldrb	r2, [r7, #23]
    e162:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
    e166:	429a      	cmp	r2, r3
    e168:	da09      	bge.n	e17e <_ZN18CO_Emergency_Class7EM_InitEP7CO_EM_tP9CO_EMpr_tP8CO_SDO_tPhhS6_PmhP14CO_CANmodule_tmm+0xce>
        em->errorStatusBits[i] = 0U;
    e16a:	68bb      	ldr	r3, [r7, #8]
    e16c:	681a      	ldr	r2, [r3, #0]
    e16e:	7dfb      	ldrb	r3, [r7, #23]
    e170:	4413      	add	r3, r2
    e172:	2200      	movs	r2, #0
    e174:	701a      	strb	r2, [r3, #0]
    for(i=0U; i<errorStatusBitsSize; i++){
    e176:	7dfb      	ldrb	r3, [r7, #23]
    e178:	3301      	adds	r3, #1
    e17a:	75fb      	strb	r3, [r7, #23]
    e17c:	e7f0      	b.n	e160 <_ZN18CO_Emergency_Class7EM_InitEP7CO_EM_tP9CO_EMpr_tP8CO_SDO_tPhhS6_PmhP14CO_CANmodule_tmm+0xb0>
    }

    /* Configure Object dictionary entry at index 0x1003 and 0x1014 */
    CO_OD_configure( OD_H1003_PREDEF_ERR_FIELD,CO_ODF_1003, (void*)emPr, 0, 0U);
    e17e:	68f8      	ldr	r0, [r7, #12]
    e180:	2300      	movs	r3, #0
    e182:	9301      	str	r3, [sp, #4]
    e184:	2300      	movs	r3, #0
    e186:	9300      	str	r3, [sp, #0]
    e188:	687b      	ldr	r3, [r7, #4]
    e18a:	4a16      	ldr	r2, [pc, #88]	; (e1e4 <_ZN18CO_Emergency_Class7EM_InitEP7CO_EM_tP9CO_EMpr_tP8CO_SDO_tPhhS6_PmhP14CO_CANmodule_tmm+0x134>)
    e18c:	f241 0103 	movw	r1, #4099	; 0x1003
    e190:	4c15      	ldr	r4, [pc, #84]	; (e1e8 <_ZN18CO_Emergency_Class7EM_InitEP7CO_EM_tP9CO_EMpr_tP8CO_SDO_tPhhS6_PmhP14CO_CANmodule_tmm+0x138>)
    e192:	47a0      	blx	r4
    CO_OD_configure( OD_H1014_COBID_EMERGENCY,CO_ODF_1014, (void*)&SDO->nodeId, 0, 0U);
    e194:	68f8      	ldr	r0, [r7, #12]
    e196:	683b      	ldr	r3, [r7, #0]
    e198:	f103 0268 	add.w	r2, r3, #104	; 0x68
    e19c:	2300      	movs	r3, #0
    e19e:	9301      	str	r3, [sp, #4]
    e1a0:	2300      	movs	r3, #0
    e1a2:	9300      	str	r3, [sp, #0]
    e1a4:	4613      	mov	r3, r2
    e1a6:	4a11      	ldr	r2, [pc, #68]	; (e1ec <_ZN18CO_Emergency_Class7EM_InitEP7CO_EM_tP9CO_EMpr_tP8CO_SDO_tPhhS6_PmhP14CO_CANmodule_tmm+0x13c>)
    e1a8:	f241 0114 	movw	r1, #4116	; 0x1014
    e1ac:	4c0e      	ldr	r4, [pc, #56]	; (e1e8 <_ZN18CO_Emergency_Class7EM_InitEP7CO_EM_tP9CO_EMpr_tP8CO_SDO_tPhhS6_PmhP14CO_CANmodule_tmm+0x138>)
    e1ae:	47a0      	blx	r4

    /* configure emergency message CAN transmission */
    emPr->CANdev = CANdev;
    e1b0:	687b      	ldr	r3, [r7, #4]
    e1b2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    e1b4:	615a      	str	r2, [r3, #20]
    emPr->CANdev->em = (void*)em; /* update pointer inside CAN device. */
    e1b6:	687b      	ldr	r3, [r7, #4]
    e1b8:	695b      	ldr	r3, [r3, #20]
    e1ba:	68ba      	ldr	r2, [r7, #8]
    e1bc:	621a      	str	r2, [r3, #32]
    emPr->CANtxBuff =ptrCODriverClass->CAN_Tx_BufferInit(
    e1be:	4b0c      	ldr	r3, [pc, #48]	; (e1f0 <_ZN18CO_Emergency_Class7EM_InitEP7CO_EM_tP9CO_EMpr_tP8CO_SDO_tPhhS6_PmhP14CO_CANmodule_tmm+0x140>)
    e1c0:	6818      	ldr	r0, [r3, #0]
    e1c2:	2300      	movs	r3, #0
    e1c4:	9301      	str	r3, [sp, #4]
    e1c6:	2308      	movs	r3, #8
    e1c8:	9300      	str	r3, [sp, #0]
    e1ca:	2300      	movs	r3, #0
    e1cc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    e1ce:	6c39      	ldr	r1, [r7, #64]	; 0x40
    e1d0:	4c08      	ldr	r4, [pc, #32]	; (e1f4 <_ZN18CO_Emergency_Class7EM_InitEP7CO_EM_tP9CO_EMpr_tP8CO_SDO_tPhhS6_PmhP14CO_CANmodule_tmm+0x144>)
    e1d2:	47a0      	blx	r4
    e1d4:	4602      	mov	r2, r0
    e1d6:	687b      	ldr	r3, [r7, #4]
    e1d8:	619a      	str	r2, [r3, #24]
            CANidTxEM,          /* CAN identifier */
            0,                  /* rtr */
            8U,                  /* number of data bytes */
            0);                 /* synchronous message flag bit */

    return CO_ERROR_NO;
    e1da:	2300      	movs	r3, #0
}
    e1dc:	4618      	mov	r0, r3
    e1de:	371c      	adds	r7, #28
    e1e0:	46bd      	mov	sp, r7
    e1e2:	bd90      	pop	{r4, r7, pc}
    e1e4:	0000dfc5 	.word	0x0000dfc5
    e1e8:	000108d5 	.word	0x000108d5
    e1ec:	0000e051 	.word	0x0000e051
    e1f0:	200019a4 	.word	0x200019a4
    e1f4:	0000d8b5 	.word	0x0000d8b5

0000e1f8 <_ZN18CO_Emergency_Class10EM_processEP9CO_EMpr_thmm>:
void CO_Emergency_Class::EM_process(
        CO_EMpr_t              *emPr,
        bool_t                  NMTisPreOrOperational,
        uint32_t                timeDifference_100us,
        uint32_t                emInhTime)
{
    e1f8:	b590      	push	{r4, r7, lr}
    e1fa:	b08b      	sub	sp, #44	; 0x2c
    e1fc:	af02      	add	r7, sp, #8
    e1fe:	60f8      	str	r0, [r7, #12]
    e200:	60b9      	str	r1, [r7, #8]
    e202:	603b      	str	r3, [r7, #0]
    e204:	4613      	mov	r3, r2
    e206:	71fb      	strb	r3, [r7, #7]

    CO_EM_t *em = emPr->em;
    e208:	68bb      	ldr	r3, [r7, #8]
    e20a:	691b      	ldr	r3, [r3, #16]
    e20c:	61bb      	str	r3, [r7, #24]
    uint8_t errorRegister;

    /* verify errors from driver and other */
   ptrCODriverClass->CAN_VerifyErrors();
    e20e:	4b74      	ldr	r3, [pc, #464]	; (e3e0 <_ZN18CO_Emergency_Class10EM_processEP9CO_EMpr_thmm+0x1e8>)
    e210:	681b      	ldr	r3, [r3, #0]
    e212:	4618      	mov	r0, r3
    e214:	4b73      	ldr	r3, [pc, #460]	; (e3e4 <_ZN18CO_Emergency_Class10EM_processEP9CO_EMpr_thmm+0x1ec>)
    e216:	4798      	blx	r3
    if(em->wrongErrorReport != 0U){
    e218:	69bb      	ldr	r3, [r7, #24]
    e21a:	f893 3065 	ldrb.w	r3, [r3, #101]	; 0x65
    e21e:	2b00      	cmp	r3, #0
    e220:	d00e      	beq.n	e240 <_ZN18CO_Emergency_Class10EM_processEP9CO_EMpr_thmm+0x48>
        EM_ErrorReport(em, CO_EM_WRONG_ERROR_REPORT, CO_EMC_SOFTWARE_INTERNAL, (uint32_t)em->wrongErrorReport);
    e222:	69bb      	ldr	r3, [r7, #24]
    e224:	f893 3065 	ldrb.w	r3, [r3, #101]	; 0x65
    e228:	9300      	str	r3, [sp, #0]
    e22a:	f44f 43c2 	mov.w	r3, #24832	; 0x6100
    e22e:	2228      	movs	r2, #40	; 0x28
    e230:	69b9      	ldr	r1, [r7, #24]
    e232:	68f8      	ldr	r0, [r7, #12]
    e234:	4c6c      	ldr	r4, [pc, #432]	; (e3e8 <_ZN18CO_Emergency_Class10EM_processEP9CO_EMpr_thmm+0x1f0>)
    e236:	47a0      	blx	r4
        em->wrongErrorReport = 0U;
    e238:	69bb      	ldr	r3, [r7, #24]
    e23a:	2200      	movs	r2, #0
    e23c:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
    }


    /* calculate Error register */
    errorRegister = 0U;
    e240:	2300      	movs	r3, #0
    e242:	77fb      	strb	r3, [r7, #31]
    /* generic error */
    if(em->errorStatusBits[5]){
    e244:	69bb      	ldr	r3, [r7, #24]
    e246:	681b      	ldr	r3, [r3, #0]
    e248:	3305      	adds	r3, #5
    e24a:	781b      	ldrb	r3, [r3, #0]
    e24c:	2b00      	cmp	r3, #0
    e24e:	d003      	beq.n	e258 <_ZN18CO_Emergency_Class10EM_processEP9CO_EMpr_thmm+0x60>
        errorRegister |= CO_ERR_REG_GENERIC_ERR;
    e250:	7ffb      	ldrb	r3, [r7, #31]
    e252:	f043 0301 	orr.w	r3, r3, #1
    e256:	77fb      	strb	r3, [r7, #31]
    }
    /* communication error (overrun, error state) */
    if(em->errorStatusBits[2] || em->errorStatusBits[3]){
    e258:	69bb      	ldr	r3, [r7, #24]
    e25a:	681b      	ldr	r3, [r3, #0]
    e25c:	3302      	adds	r3, #2
    e25e:	781b      	ldrb	r3, [r3, #0]
    e260:	2b00      	cmp	r3, #0
    e262:	d105      	bne.n	e270 <_ZN18CO_Emergency_Class10EM_processEP9CO_EMpr_thmm+0x78>
    e264:	69bb      	ldr	r3, [r7, #24]
    e266:	681b      	ldr	r3, [r3, #0]
    e268:	3303      	adds	r3, #3
    e26a:	781b      	ldrb	r3, [r3, #0]
    e26c:	2b00      	cmp	r3, #0
    e26e:	d003      	beq.n	e278 <_ZN18CO_Emergency_Class10EM_processEP9CO_EMpr_thmm+0x80>
        errorRegister |= CO_ERR_REG_COMM_ERR;
    e270:	7ffb      	ldrb	r3, [r7, #31]
    e272:	f043 0310 	orr.w	r3, r3, #16
    e276:	77fb      	strb	r3, [r7, #31]
    }
    *emPr->errorRegister = (*emPr->errorRegister & 0xEEU) | errorRegister;
    e278:	68bb      	ldr	r3, [r7, #8]
    e27a:	681b      	ldr	r3, [r3, #0]
    e27c:	68ba      	ldr	r2, [r7, #8]
    e27e:	6812      	ldr	r2, [r2, #0]
    e280:	7812      	ldrb	r2, [r2, #0]
    e282:	f022 0211 	bic.w	r2, r2, #17
    e286:	b2d1      	uxtb	r1, r2
    e288:	7ffa      	ldrb	r2, [r7, #31]
    e28a:	430a      	orrs	r2, r1
    e28c:	b2d2      	uxtb	r2, r2
    e28e:	701a      	strb	r2, [r3, #0]

    /* inhibit time */
    if(emPr->inhibitEmTimer < emInhTime){
    e290:	68bb      	ldr	r3, [r7, #8]
    e292:	68da      	ldr	r2, [r3, #12]
    e294:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    e296:	429a      	cmp	r2, r3
    e298:	d205      	bcs.n	e2a6 <_ZN18CO_Emergency_Class10EM_processEP9CO_EMpr_thmm+0xae>
        emPr->inhibitEmTimer += timeDifference_100us;
    e29a:	68bb      	ldr	r3, [r7, #8]
    e29c:	68da      	ldr	r2, [r3, #12]
    e29e:	683b      	ldr	r3, [r7, #0]
    e2a0:	441a      	add	r2, r3
    e2a2:	68bb      	ldr	r3, [r7, #8]
    e2a4:	60da      	str	r2, [r3, #12]
    }

    /* send Emergency message. */
    if(     NMTisPreOrOperational &&
            !emPr->CANtxBuff->bufferFull &&
            emPr->inhibitEmTimer >= emInhTime &&
    e2a6:	79fb      	ldrb	r3, [r7, #7]
    e2a8:	2b00      	cmp	r3, #0
    e2aa:	d017      	beq.n	e2dc <_ZN18CO_Emergency_Class10EM_processEP9CO_EMpr_thmm+0xe4>
            !emPr->CANtxBuff->bufferFull &&
    e2ac:	68bb      	ldr	r3, [r7, #8]
    e2ae:	699b      	ldr	r3, [r3, #24]
    e2b0:	7b5b      	ldrb	r3, [r3, #13]
    e2b2:	b2db      	uxtb	r3, r3
    if(     NMTisPreOrOperational &&
    e2b4:	2b00      	cmp	r3, #0
    e2b6:	d111      	bne.n	e2dc <_ZN18CO_Emergency_Class10EM_processEP9CO_EMpr_thmm+0xe4>
            emPr->inhibitEmTimer >= emInhTime &&
    e2b8:	68bb      	ldr	r3, [r7, #8]
    e2ba:	68da      	ldr	r2, [r3, #12]
            !emPr->CANtxBuff->bufferFull &&
    e2bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    e2be:	429a      	cmp	r2, r3
    e2c0:	d30c      	bcc.n	e2dc <_ZN18CO_Emergency_Class10EM_processEP9CO_EMpr_thmm+0xe4>
            (em->bufReadPtr != em->bufWritePtr || em->bufFull))
    e2c2:	69bb      	ldr	r3, [r7, #24]
    e2c4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
    e2c6:	69bb      	ldr	r3, [r7, #24]
    e2c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
            emPr->inhibitEmTimer >= emInhTime &&
    e2ca:	429a      	cmp	r2, r3
    e2cc:	d104      	bne.n	e2d8 <_ZN18CO_Emergency_Class10EM_processEP9CO_EMpr_thmm+0xe0>
            (em->bufReadPtr != em->bufWritePtr || em->bufFull))
    e2ce:	69bb      	ldr	r3, [r7, #24]
    e2d0:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
    e2d4:	2b00      	cmp	r3, #0
    e2d6:	d001      	beq.n	e2dc <_ZN18CO_Emergency_Class10EM_processEP9CO_EMpr_thmm+0xe4>
            emPr->inhibitEmTimer >= emInhTime &&
    e2d8:	2301      	movs	r3, #1
    e2da:	e000      	b.n	e2de <_ZN18CO_Emergency_Class10EM_processEP9CO_EMpr_thmm+0xe6>
    e2dc:	2300      	movs	r3, #0
    if(     NMTisPreOrOperational &&
    e2de:	2b00      	cmp	r3, #0
    e2e0:	d079      	beq.n	e3d6 <_ZN18CO_Emergency_Class10EM_processEP9CO_EMpr_thmm+0x1de>
    {
        uint32_t preDEF;    /* preDefinedErrorField */
        
        /* add error register */
        em->bufReadPtr[2] = *emPr->errorRegister;
    e2e2:	69bb      	ldr	r3, [r7, #24]
    e2e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    e2e6:	3302      	adds	r3, #2
    e2e8:	68ba      	ldr	r2, [r7, #8]
    e2ea:	6812      	ldr	r2, [r2, #0]
    e2ec:	7812      	ldrb	r2, [r2, #0]
    e2ee:	701a      	strb	r2, [r3, #0]

        /* copy data to CAN emergency message */
        CO_memcpy(emPr->CANtxBuff->data, em->bufReadPtr, 8U);
    e2f0:	68f8      	ldr	r0, [r7, #12]
    e2f2:	68bb      	ldr	r3, [r7, #8]
    e2f4:	699b      	ldr	r3, [r3, #24]
    e2f6:	1d59      	adds	r1, r3, #5
    e2f8:	69bb      	ldr	r3, [r7, #24]
    e2fa:	6e1a      	ldr	r2, [r3, #96]	; 0x60
    e2fc:	2308      	movs	r3, #8
    e2fe:	4c3b      	ldr	r4, [pc, #236]	; (e3ec <_ZN18CO_Emergency_Class10EM_processEP9CO_EMpr_thmm+0x1f4>)
    e300:	47a0      	blx	r4
        CO_memcpy((uint8_t*)&preDEF, em->bufReadPtr, 4U);
    e302:	68f8      	ldr	r0, [r7, #12]
    e304:	69bb      	ldr	r3, [r7, #24]
    e306:	6e1a      	ldr	r2, [r3, #96]	; 0x60
    e308:	f107 0114 	add.w	r1, r7, #20
    e30c:	2304      	movs	r3, #4
    e30e:	4c37      	ldr	r4, [pc, #220]	; (e3ec <_ZN18CO_Emergency_Class10EM_processEP9CO_EMpr_thmm+0x1f4>)
    e310:	47a0      	blx	r4
        em->bufReadPtr += 8;
    e312:	69bb      	ldr	r3, [r7, #24]
    e314:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    e316:	f103 0208 	add.w	r2, r3, #8
    e31a:	69bb      	ldr	r3, [r7, #24]
    e31c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Update read buffer pointer and reset inhibit timer */
        if(em->bufReadPtr == em->bufEnd){
    e31e:	69bb      	ldr	r3, [r7, #24]
    e320:	6e1a      	ldr	r2, [r3, #96]	; 0x60
    e322:	69bb      	ldr	r3, [r7, #24]
    e324:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    e326:	429a      	cmp	r2, r3
    e328:	d103      	bne.n	e332 <_ZN18CO_Emergency_Class10EM_processEP9CO_EMpr_thmm+0x13a>
            em->bufReadPtr = em->buf;
    e32a:	69bb      	ldr	r3, [r7, #24]
    e32c:	1d5a      	adds	r2, r3, #5
    e32e:	69bb      	ldr	r3, [r7, #24]
    e330:	661a      	str	r2, [r3, #96]	; 0x60
        }
        emPr->inhibitEmTimer = 0U;
    e332:	68bb      	ldr	r3, [r7, #8]
    e334:	2200      	movs	r2, #0
    e336:	60da      	str	r2, [r3, #12]

        /* verify message buffer overflow, then clear full flag */
        if(em->bufFull == 2U){
    e338:	69bb      	ldr	r3, [r7, #24]
    e33a:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
    e33e:	2b02      	cmp	r3, #2
    e340:	d10d      	bne.n	e35e <_ZN18CO_Emergency_Class10EM_processEP9CO_EMpr_thmm+0x166>
            em->bufFull = 0U;    /* will be updated below */
    e342:	69bb      	ldr	r3, [r7, #24]
    e344:	2200      	movs	r2, #0
    e346:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
            EM_ErrorReport(em, CO_EM_EMERGENCY_BUFFER_FULL, CO_EMC_GENERIC, 0U);
    e34a:	2300      	movs	r3, #0
    e34c:	9300      	str	r3, [sp, #0]
    e34e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    e352:	2220      	movs	r2, #32
    e354:	69b9      	ldr	r1, [r7, #24]
    e356:	68f8      	ldr	r0, [r7, #12]
    e358:	4c23      	ldr	r4, [pc, #140]	; (e3e8 <_ZN18CO_Emergency_Class10EM_processEP9CO_EMpr_thmm+0x1f0>)
    e35a:	47a0      	blx	r4
    e35c:	e003      	b.n	e366 <_ZN18CO_Emergency_Class10EM_processEP9CO_EMpr_thmm+0x16e>
        }
        else{
            em->bufFull = 0;
    e35e:	69bb      	ldr	r3, [r7, #24]
    e360:	2200      	movs	r2, #0
    e362:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
        }

        /* write to 'pre-defined error field' (object dictionary, index 0x1003) */
        if(emPr->preDefErr){
    e366:	68bb      	ldr	r3, [r7, #8]
    e368:	685b      	ldr	r3, [r3, #4]
    e36a:	2b00      	cmp	r3, #0
    e36c:	d02a      	beq.n	e3c4 <_ZN18CO_Emergency_Class10EM_processEP9CO_EMpr_thmm+0x1cc>
            uint8_t i;

            if(emPr->preDefErrNoOfErrors < emPr->preDefErrSize)
    e36e:	68bb      	ldr	r3, [r7, #8]
    e370:	7a5b      	ldrb	r3, [r3, #9]
    e372:	461a      	mov	r2, r3
    e374:	68bb      	ldr	r3, [r7, #8]
    e376:	7a1b      	ldrb	r3, [r3, #8]
    e378:	429a      	cmp	r2, r3
    e37a:	da05      	bge.n	e388 <_ZN18CO_Emergency_Class10EM_processEP9CO_EMpr_thmm+0x190>
                emPr->preDefErrNoOfErrors++;
    e37c:	68bb      	ldr	r3, [r7, #8]
    e37e:	7a5b      	ldrb	r3, [r3, #9]
    e380:	3301      	adds	r3, #1
    e382:	b2da      	uxtb	r2, r3
    e384:	68bb      	ldr	r3, [r7, #8]
    e386:	725a      	strb	r2, [r3, #9]
            for(i=emPr->preDefErrNoOfErrors-1; i>0; i--)
    e388:	68bb      	ldr	r3, [r7, #8]
    e38a:	7a5b      	ldrb	r3, [r3, #9]
    e38c:	3b01      	subs	r3, #1
    e38e:	77bb      	strb	r3, [r7, #30]
    e390:	7fbb      	ldrb	r3, [r7, #30]
    e392:	2b00      	cmp	r3, #0
    e394:	dd12      	ble.n	e3bc <_ZN18CO_Emergency_Class10EM_processEP9CO_EMpr_thmm+0x1c4>
                emPr->preDefErr[i] = emPr->preDefErr[i-1];
    e396:	68bb      	ldr	r3, [r7, #8]
    e398:	685a      	ldr	r2, [r3, #4]
    e39a:	7fbb      	ldrb	r3, [r7, #30]
    e39c:	009b      	lsls	r3, r3, #2
    e39e:	441a      	add	r2, r3
    e3a0:	68bb      	ldr	r3, [r7, #8]
    e3a2:	6859      	ldr	r1, [r3, #4]
    e3a4:	7fbb      	ldrb	r3, [r7, #30]
    e3a6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    e3aa:	3b01      	subs	r3, #1
    e3ac:	009b      	lsls	r3, r3, #2
    e3ae:	440b      	add	r3, r1
    e3b0:	681b      	ldr	r3, [r3, #0]
    e3b2:	6013      	str	r3, [r2, #0]
            for(i=emPr->preDefErrNoOfErrors-1; i>0; i--)
    e3b4:	7fbb      	ldrb	r3, [r7, #30]
    e3b6:	3b01      	subs	r3, #1
    e3b8:	77bb      	strb	r3, [r7, #30]
    e3ba:	e7e9      	b.n	e390 <_ZN18CO_Emergency_Class10EM_processEP9CO_EMpr_thmm+0x198>
            emPr->preDefErr[0] = preDEF;
    e3bc:	68bb      	ldr	r3, [r7, #8]
    e3be:	685b      	ldr	r3, [r3, #4]
    e3c0:	697a      	ldr	r2, [r7, #20]
    e3c2:	601a      	str	r2, [r3, #0]
        }

        /* send CAN message */
        ptrCODriverClass->CAN_Send(emPr->CANtxBuff);
    e3c4:	4b06      	ldr	r3, [pc, #24]	; (e3e0 <_ZN18CO_Emergency_Class10EM_processEP9CO_EMpr_thmm+0x1e8>)
    e3c6:	681a      	ldr	r2, [r3, #0]
    e3c8:	68bb      	ldr	r3, [r7, #8]
    e3ca:	699b      	ldr	r3, [r3, #24]
    e3cc:	4619      	mov	r1, r3
    e3ce:	4610      	mov	r0, r2
    e3d0:	4b07      	ldr	r3, [pc, #28]	; (e3f0 <_ZN18CO_Emergency_Class10EM_processEP9CO_EMpr_thmm+0x1f8>)
    e3d2:	4798      	blx	r3
    }

    return;
    e3d4:	bf00      	nop
    e3d6:	bf00      	nop
}
    e3d8:	3724      	adds	r7, #36	; 0x24
    e3da:	46bd      	mov	sp, r7
    e3dc:	bd90      	pop	{r4, r7, pc}
    e3de:	bf00      	nop
    e3e0:	200019a4 	.word	0x200019a4
    e3e4:	0000dbb9 	.word	0x0000dbb9
    e3e8:	0000e3f5 	.word	0x0000e3f5
    e3ec:	00010449 	.word	0x00010449
    e3f0:	0000d961 	.word	0x0000d961

0000e3f4 <_ZN18CO_Emergency_Class14EM_ErrorReportEP7CO_EM_thmm>:


/******************************************************************************/
void CO_Emergency_Class::EM_ErrorReport(CO_EM_t *em, const uint8_t errorBit, const uint32_t errorCode, const uint32_t infoCode){
    e3f4:	b590      	push	{r4, r7, lr}
    e3f6:	b08d      	sub	sp, #52	; 0x34
    e3f8:	af00      	add	r7, sp, #0
    e3fa:	60f8      	str	r0, [r7, #12]
    e3fc:	60b9      	str	r1, [r7, #8]
    e3fe:	603b      	str	r3, [r7, #0]
    e400:	4613      	mov	r3, r2
    e402:	71fb      	strb	r3, [r7, #7]
    uint8_t index = errorBit >> 3;
    e404:	79fb      	ldrb	r3, [r7, #7]
    e406:	10db      	asrs	r3, r3, #3
    e408:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    uint8_t bitmask = 1 << (errorBit & 0x7);
    e40c:	79fb      	ldrb	r3, [r7, #7]
    e40e:	f003 0307 	and.w	r3, r3, #7
    e412:	2201      	movs	r2, #1
    e414:	fa02 f303 	lsl.w	r3, r2, r3
    e418:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
    uint8_t *errorStatusBits = 0;
    e41c:	2300      	movs	r3, #0
    e41e:	62fb      	str	r3, [r7, #44]	; 0x2c
    bool_t sendEmergency = true;
    e420:	2301      	movs	r3, #1
    e422:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

    if(em == NULL){
    e426:	68bb      	ldr	r3, [r7, #8]
    e428:	2b00      	cmp	r3, #0
    e42a:	d103      	bne.n	e434 <_ZN18CO_Emergency_Class14EM_ErrorReportEP7CO_EM_thmm+0x40>
        sendEmergency = false;
    e42c:	2300      	movs	r3, #0
    e42e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    e432:	e01e      	b.n	e472 <_ZN18CO_Emergency_Class14EM_ErrorReportEP7CO_EM_thmm+0x7e>
    }
    else if(index >= em->errorStatusBitsSize){
    e434:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
    e438:	68ba      	ldr	r2, [r7, #8]
    e43a:	7912      	ldrb	r2, [r2, #4]
    e43c:	4293      	cmp	r3, r2
    e43e:	db07      	blt.n	e450 <_ZN18CO_Emergency_Class14EM_ErrorReportEP7CO_EM_thmm+0x5c>
        /* if errorBit value not supported, send emergency 'CO_EM_WRONG_ERROR_REPORT' */
        em->wrongErrorReport = errorBit;
    e440:	68bb      	ldr	r3, [r7, #8]
    e442:	79fa      	ldrb	r2, [r7, #7]
    e444:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
        sendEmergency = false;
    e448:	2300      	movs	r3, #0
    e44a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    e44e:	e010      	b.n	e472 <_ZN18CO_Emergency_Class14EM_ErrorReportEP7CO_EM_thmm+0x7e>
    }
    else{
        errorStatusBits = &em->errorStatusBits[index];
    e450:	68bb      	ldr	r3, [r7, #8]
    e452:	681a      	ldr	r2, [r3, #0]
    e454:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
    e458:	4413      	add	r3, r2
    e45a:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* if error was already reported, do nothing */
        if((*errorStatusBits & bitmask) != 0){
    e45c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    e45e:	781a      	ldrb	r2, [r3, #0]
    e460:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
    e464:	4013      	ands	r3, r2
    e466:	b2db      	uxtb	r3, r3
    e468:	2b00      	cmp	r3, #0
    e46a:	d002      	beq.n	e472 <_ZN18CO_Emergency_Class14EM_ErrorReportEP7CO_EM_thmm+0x7e>
            sendEmergency = false;
    e46c:	2300      	movs	r3, #0
    e46e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        }
    }

    if(sendEmergency){
    e472:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
    e476:	2b00      	cmp	r3, #0
    e478:	d05c      	beq.n	e534 <_ZN18CO_Emergency_Class14EM_ErrorReportEP7CO_EM_thmm+0x140>
        /* set error bit */
        if(errorBit){
    e47a:	79fb      	ldrb	r3, [r7, #7]
    e47c:	2b00      	cmp	r3, #0
    e47e:	d007      	beq.n	e490 <_ZN18CO_Emergency_Class14EM_ErrorReportEP7CO_EM_thmm+0x9c>
            /* any error except NO_ERROR */
            *errorStatusBits |= bitmask;
    e480:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    e482:	781a      	ldrb	r2, [r3, #0]
    e484:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
    e488:	4313      	orrs	r3, r2
    e48a:	b2da      	uxtb	r2, r3
    e48c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    e48e:	701a      	strb	r2, [r3, #0]
        }

        /* verify buffer full, set overflow */
        if(em->bufFull){
    e490:	68bb      	ldr	r3, [r7, #8]
    e492:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
    e496:	2b00      	cmp	r3, #0
    e498:	d004      	beq.n	e4a4 <_ZN18CO_Emergency_Class14EM_ErrorReportEP7CO_EM_thmm+0xb0>
            em->bufFull = 2;
    e49a:	68bb      	ldr	r3, [r7, #8]
    e49c:	2202      	movs	r2, #2
    e49e:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
            if(em->handler != NULL) {
                em->handler();
            }
        }
    }
}
    e4a2:	e047      	b.n	e534 <_ZN18CO_Emergency_Class14EM_ErrorReportEP7CO_EM_thmm+0x140>
            CO_memcpySwap2(&bufCopy[0], &errorCode);
    e4a4:	68fb      	ldr	r3, [r7, #12]
    e4a6:	463a      	mov	r2, r7
    e4a8:	f107 0118 	add.w	r1, r7, #24
    e4ac:	4618      	mov	r0, r3
    e4ae:	4b23      	ldr	r3, [pc, #140]	; (e53c <_ZN18CO_Emergency_Class14EM_ErrorReportEP7CO_EM_thmm+0x148>)
    e4b0:	4798      	blx	r3
            bufCopy[2] = 0; /* error register will be set later */
    e4b2:	2300      	movs	r3, #0
    e4b4:	76bb      	strb	r3, [r7, #26]
            bufCopy[3] = errorBit;
    e4b6:	79fb      	ldrb	r3, [r7, #7]
    e4b8:	76fb      	strb	r3, [r7, #27]
            CO_memcpySwap4(&bufCopy[4], &infoCode);
    e4ba:	68f8      	ldr	r0, [r7, #12]
    e4bc:	f107 0318 	add.w	r3, r7, #24
    e4c0:	3304      	adds	r3, #4
    e4c2:	f107 0240 	add.w	r2, r7, #64	; 0x40
    e4c6:	4619      	mov	r1, r3
    e4c8:	4b1d      	ldr	r3, [pc, #116]	; (e540 <_ZN18CO_Emergency_Class14EM_ErrorReportEP7CO_EM_thmm+0x14c>)
    e4ca:	4798      	blx	r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    e4cc:	f3ef 8310 	mrs	r3, PRIMASK
    e4d0:	617b      	str	r3, [r7, #20]
  return(result);
    e4d2:	697b      	ldr	r3, [r7, #20]
            CO_LOCK_EMCY();
    e4d4:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
    e4d6:	b672      	cpsid	i
            CO_memcpy(em->bufWritePtr, &bufCopy[0], 8);
    e4d8:	68f8      	ldr	r0, [r7, #12]
    e4da:	68bb      	ldr	r3, [r7, #8]
    e4dc:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
    e4de:	f107 0218 	add.w	r2, r7, #24
    e4e2:	2308      	movs	r3, #8
    e4e4:	4c17      	ldr	r4, [pc, #92]	; (e544 <_ZN18CO_Emergency_Class14EM_ErrorReportEP7CO_EM_thmm+0x150>)
    e4e6:	47a0      	blx	r4
            em->bufWritePtr += 8;
    e4e8:	68bb      	ldr	r3, [r7, #8]
    e4ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
    e4ec:	f103 0208 	add.w	r2, r3, #8
    e4f0:	68bb      	ldr	r3, [r7, #8]
    e4f2:	65da      	str	r2, [r3, #92]	; 0x5c
            if(em->bufWritePtr == em->bufEnd) em->bufWritePtr = em->buf;
    e4f4:	68bb      	ldr	r3, [r7, #8]
    e4f6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
    e4f8:	68bb      	ldr	r3, [r7, #8]
    e4fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    e4fc:	429a      	cmp	r2, r3
    e4fe:	d103      	bne.n	e508 <_ZN18CO_Emergency_Class14EM_ErrorReportEP7CO_EM_thmm+0x114>
    e500:	68bb      	ldr	r3, [r7, #8]
    e502:	1d5a      	adds	r2, r3, #5
    e504:	68bb      	ldr	r3, [r7, #8]
    e506:	65da      	str	r2, [r3, #92]	; 0x5c
            if(em->bufWritePtr == em->bufReadPtr) em->bufFull = 1;
    e508:	68bb      	ldr	r3, [r7, #8]
    e50a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
    e50c:	68bb      	ldr	r3, [r7, #8]
    e50e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    e510:	429a      	cmp	r2, r3
    e512:	d103      	bne.n	e51c <_ZN18CO_Emergency_Class14EM_ErrorReportEP7CO_EM_thmm+0x128>
    e514:	68bb      	ldr	r3, [r7, #8]
    e516:	2201      	movs	r2, #1
    e518:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
    e51c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    e51e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    e520:	6a3b      	ldr	r3, [r7, #32]
    e522:	f383 8810 	msr	PRIMASK, r3
            if(em->handler != NULL) {
    e526:	68bb      	ldr	r3, [r7, #8]
    e528:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    e52a:	2b00      	cmp	r3, #0
    e52c:	d002      	beq.n	e534 <_ZN18CO_Emergency_Class14EM_ErrorReportEP7CO_EM_thmm+0x140>
                em->handler();
    e52e:	68bb      	ldr	r3, [r7, #8]
    e530:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    e532:	4798      	blx	r3
}
    e534:	bf00      	nop
    e536:	3734      	adds	r7, #52	; 0x34
    e538:	46bd      	mov	sp, r7
    e53a:	bd90      	pop	{r4, r7, pc}
    e53c:	000104f1 	.word	0x000104f1
    e540:	00010521 	.word	0x00010521
    e544:	00010449 	.word	0x00010449

0000e548 <_ZN18CO_Emergency_Class13EM_ErrorResetEP7CO_EM_thm>:


/******************************************************************************/
void CO_Emergency_Class::EM_ErrorReset(CO_EM_t *em, const uint8_t errorBit, const uint32_t infoCode){
    e548:	b590      	push	{r4, r7, lr}
    e54a:	b08d      	sub	sp, #52	; 0x34
    e54c:	af00      	add	r7, sp, #0
    e54e:	60f8      	str	r0, [r7, #12]
    e550:	60b9      	str	r1, [r7, #8]
    e552:	603b      	str	r3, [r7, #0]
    e554:	4613      	mov	r3, r2
    e556:	71fb      	strb	r3, [r7, #7]
    uint8_t index = errorBit >> 3;
    e558:	79fb      	ldrb	r3, [r7, #7]
    e55a:	10db      	asrs	r3, r3, #3
    e55c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    uint8_t bitmask = 1 << (errorBit & 0x7);
    e560:	79fb      	ldrb	r3, [r7, #7]
    e562:	f003 0307 	and.w	r3, r3, #7
    e566:	2201      	movs	r2, #1
    e568:	fa02 f303 	lsl.w	r3, r2, r3
    e56c:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
    uint8_t *errorStatusBits = 0;
    e570:	2300      	movs	r3, #0
    e572:	62fb      	str	r3, [r7, #44]	; 0x2c
    bool_t sendEmergency = true;
    e574:	2301      	movs	r3, #1
    e576:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

    if(em == NULL){
    e57a:	68bb      	ldr	r3, [r7, #8]
    e57c:	2b00      	cmp	r3, #0
    e57e:	d103      	bne.n	e588 <_ZN18CO_Emergency_Class13EM_ErrorResetEP7CO_EM_thm+0x40>
        sendEmergency = false;
    e580:	2300      	movs	r3, #0
    e582:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    e586:	e01e      	b.n	e5c6 <_ZN18CO_Emergency_Class13EM_ErrorResetEP7CO_EM_thm+0x7e>
    }
    else if(index >= em->errorStatusBitsSize){
    e588:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
    e58c:	68ba      	ldr	r2, [r7, #8]
    e58e:	7912      	ldrb	r2, [r2, #4]
    e590:	4293      	cmp	r3, r2
    e592:	db07      	blt.n	e5a4 <_ZN18CO_Emergency_Class13EM_ErrorResetEP7CO_EM_thm+0x5c>
        /* if errorBit value not supported, send emergency 'CO_EM_WRONG_ERROR_REPORT' */
        em->wrongErrorReport = errorBit;
    e594:	68bb      	ldr	r3, [r7, #8]
    e596:	79fa      	ldrb	r2, [r7, #7]
    e598:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
        sendEmergency = false;
    e59c:	2300      	movs	r3, #0
    e59e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    e5a2:	e010      	b.n	e5c6 <_ZN18CO_Emergency_Class13EM_ErrorResetEP7CO_EM_thm+0x7e>
    }
    else{
        errorStatusBits = &em->errorStatusBits[index];
    e5a4:	68bb      	ldr	r3, [r7, #8]
    e5a6:	681a      	ldr	r2, [r3, #0]
    e5a8:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
    e5ac:	4413      	add	r3, r2
    e5ae:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* if error was allready cleared, do nothing */
        if((*errorStatusBits & bitmask) == 0){
    e5b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    e5b2:	781a      	ldrb	r2, [r3, #0]
    e5b4:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
    e5b8:	4013      	ands	r3, r2
    e5ba:	b2db      	uxtb	r3, r3
    e5bc:	2b00      	cmp	r3, #0
    e5be:	d102      	bne.n	e5c6 <_ZN18CO_Emergency_Class13EM_ErrorResetEP7CO_EM_thm+0x7e>
            sendEmergency = false;
    e5c0:	2300      	movs	r3, #0
    e5c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        }
    }

    if(sendEmergency){
    e5c6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
    e5ca:	2b00      	cmp	r3, #0
    e5cc:	d059      	beq.n	e682 <_ZN18CO_Emergency_Class13EM_ErrorResetEP7CO_EM_thm+0x13a>
        /* erase error bit */
        *errorStatusBits &= ~bitmask;
    e5ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    e5d0:	781b      	ldrb	r3, [r3, #0]
    e5d2:	b25a      	sxtb	r2, r3
    e5d4:	f997 3029 	ldrsb.w	r3, [r7, #41]	; 0x29
    e5d8:	43db      	mvns	r3, r3
    e5da:	b25b      	sxtb	r3, r3
    e5dc:	4013      	ands	r3, r2
    e5de:	b25b      	sxtb	r3, r3
    e5e0:	b2da      	uxtb	r2, r3
    e5e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    e5e4:	701a      	strb	r2, [r3, #0]

        /* verify buffer full */
        if(em->bufFull){
    e5e6:	68bb      	ldr	r3, [r7, #8]
    e5e8:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
    e5ec:	2b00      	cmp	r3, #0
    e5ee:	d004      	beq.n	e5fa <_ZN18CO_Emergency_Class13EM_ErrorResetEP7CO_EM_thm+0xb2>
            em->bufFull = 2;
    e5f0:	68bb      	ldr	r3, [r7, #8]
    e5f2:	2202      	movs	r2, #2
    e5f4:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
            if(em->handler != NULL) {
                em->handler();
            }
        }
    }
}
    e5f8:	e043      	b.n	e682 <_ZN18CO_Emergency_Class13EM_ErrorResetEP7CO_EM_thm+0x13a>
            bufCopy[0] = 0;
    e5fa:	2300      	movs	r3, #0
    e5fc:	763b      	strb	r3, [r7, #24]
            bufCopy[1] = 0;
    e5fe:	2300      	movs	r3, #0
    e600:	767b      	strb	r3, [r7, #25]
            bufCopy[2] = 0; /* error register will be set later */
    e602:	2300      	movs	r3, #0
    e604:	76bb      	strb	r3, [r7, #26]
            bufCopy[3] = errorBit;
    e606:	79fb      	ldrb	r3, [r7, #7]
    e608:	76fb      	strb	r3, [r7, #27]
            CO_memcpySwap4(&bufCopy[4], &infoCode);
    e60a:	68f8      	ldr	r0, [r7, #12]
    e60c:	463a      	mov	r2, r7
    e60e:	f107 0318 	add.w	r3, r7, #24
    e612:	3304      	adds	r3, #4
    e614:	4619      	mov	r1, r3
    e616:	4b1d      	ldr	r3, [pc, #116]	; (e68c <_ZN18CO_Emergency_Class13EM_ErrorResetEP7CO_EM_thm+0x144>)
    e618:	4798      	blx	r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    e61a:	f3ef 8310 	mrs	r3, PRIMASK
    e61e:	617b      	str	r3, [r7, #20]
  return(result);
    e620:	697b      	ldr	r3, [r7, #20]
            CO_LOCK_EMCY();
    e622:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
    e624:	b672      	cpsid	i
            CO_memcpy(em->bufWritePtr, &bufCopy[0], 8);
    e626:	68f8      	ldr	r0, [r7, #12]
    e628:	68bb      	ldr	r3, [r7, #8]
    e62a:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
    e62c:	f107 0218 	add.w	r2, r7, #24
    e630:	2308      	movs	r3, #8
    e632:	4c17      	ldr	r4, [pc, #92]	; (e690 <_ZN18CO_Emergency_Class13EM_ErrorResetEP7CO_EM_thm+0x148>)
    e634:	47a0      	blx	r4
            em->bufWritePtr += 8;
    e636:	68bb      	ldr	r3, [r7, #8]
    e638:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
    e63a:	f103 0208 	add.w	r2, r3, #8
    e63e:	68bb      	ldr	r3, [r7, #8]
    e640:	65da      	str	r2, [r3, #92]	; 0x5c
            if(em->bufWritePtr == em->bufEnd) em->bufWritePtr = em->buf;
    e642:	68bb      	ldr	r3, [r7, #8]
    e644:	6dda      	ldr	r2, [r3, #92]	; 0x5c
    e646:	68bb      	ldr	r3, [r7, #8]
    e648:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    e64a:	429a      	cmp	r2, r3
    e64c:	d103      	bne.n	e656 <_ZN18CO_Emergency_Class13EM_ErrorResetEP7CO_EM_thm+0x10e>
    e64e:	68bb      	ldr	r3, [r7, #8]
    e650:	1d5a      	adds	r2, r3, #5
    e652:	68bb      	ldr	r3, [r7, #8]
    e654:	65da      	str	r2, [r3, #92]	; 0x5c
            if(em->bufWritePtr == em->bufReadPtr) em->bufFull = 1;
    e656:	68bb      	ldr	r3, [r7, #8]
    e658:	6dda      	ldr	r2, [r3, #92]	; 0x5c
    e65a:	68bb      	ldr	r3, [r7, #8]
    e65c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    e65e:	429a      	cmp	r2, r3
    e660:	d103      	bne.n	e66a <_ZN18CO_Emergency_Class13EM_ErrorResetEP7CO_EM_thm+0x122>
    e662:	68bb      	ldr	r3, [r7, #8]
    e664:	2201      	movs	r2, #1
    e666:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
    e66a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    e66c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    e66e:	6a3b      	ldr	r3, [r7, #32]
    e670:	f383 8810 	msr	PRIMASK, r3
            if(em->handler != NULL) {
    e674:	68bb      	ldr	r3, [r7, #8]
    e676:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    e678:	2b00      	cmp	r3, #0
    e67a:	d002      	beq.n	e682 <_ZN18CO_Emergency_Class13EM_ErrorResetEP7CO_EM_thm+0x13a>
                em->handler();
    e67c:	68bb      	ldr	r3, [r7, #8]
    e67e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    e680:	4798      	blx	r3
}
    e682:	bf00      	nop
    e684:	3734      	adds	r7, #52	; 0x34
    e686:	46bd      	mov	sp, r7
    e688:	bd90      	pop	{r4, r7, pc}
    e68a:	bf00      	nop
    e68c:	00010521 	.word	0x00010521
    e690:	00010449 	.word	0x00010449

0000e694 <_ZN18CO_Emergency_Class10EM_IsErrorEP7CO_EM_th>:


/******************************************************************************/
bool_t CO_Emergency_Class::EM_IsError(CO_EM_t *em, const uint8_t errorBit){
    e694:	b480      	push	{r7}
    e696:	b087      	sub	sp, #28
    e698:	af00      	add	r7, sp, #0
    e69a:	60f8      	str	r0, [r7, #12]
    e69c:	60b9      	str	r1, [r7, #8]
    e69e:	4613      	mov	r3, r2
    e6a0:	71fb      	strb	r3, [r7, #7]
    uint8_t index = errorBit >> 3;
    e6a2:	79fb      	ldrb	r3, [r7, #7]
    e6a4:	10db      	asrs	r3, r3, #3
    e6a6:	75bb      	strb	r3, [r7, #22]
    uint8_t bitmask = 1 << (errorBit & 0x7);
    e6a8:	79fb      	ldrb	r3, [r7, #7]
    e6aa:	f003 0307 	and.w	r3, r3, #7
    e6ae:	2201      	movs	r2, #1
    e6b0:	fa02 f303 	lsl.w	r3, r2, r3
    e6b4:	757b      	strb	r3, [r7, #21]
    bool_t ret = false;
    e6b6:	2300      	movs	r3, #0
    e6b8:	75fb      	strb	r3, [r7, #23]

    if(em != NULL && index < em->errorStatusBitsSize){
    e6ba:	68bb      	ldr	r3, [r7, #8]
    e6bc:	2b00      	cmp	r3, #0
    e6be:	d010      	beq.n	e6e2 <_ZN18CO_Emergency_Class10EM_IsErrorEP7CO_EM_th+0x4e>
    e6c0:	7dbb      	ldrb	r3, [r7, #22]
    e6c2:	68ba      	ldr	r2, [r7, #8]
    e6c4:	7912      	ldrb	r2, [r2, #4]
    e6c6:	4293      	cmp	r3, r2
    e6c8:	da0b      	bge.n	e6e2 <_ZN18CO_Emergency_Class10EM_IsErrorEP7CO_EM_th+0x4e>
        if((em->errorStatusBits[index] & bitmask) != 0){
    e6ca:	68bb      	ldr	r3, [r7, #8]
    e6cc:	681a      	ldr	r2, [r3, #0]
    e6ce:	7dbb      	ldrb	r3, [r7, #22]
    e6d0:	4413      	add	r3, r2
    e6d2:	781a      	ldrb	r2, [r3, #0]
    e6d4:	7d7b      	ldrb	r3, [r7, #21]
    e6d6:	4013      	ands	r3, r2
    e6d8:	b2db      	uxtb	r3, r3
    e6da:	2b00      	cmp	r3, #0
    e6dc:	d001      	beq.n	e6e2 <_ZN18CO_Emergency_Class10EM_IsErrorEP7CO_EM_th+0x4e>
            ret = true;
    e6de:	2301      	movs	r3, #1
    e6e0:	75fb      	strb	r3, [r7, #23]
        }
    }

    return ret;
    e6e2:	7dfb      	ldrb	r3, [r7, #23]
    e6e4:	4618      	mov	r0, r3
    e6e6:	371c      	adds	r7, #28
    e6e8:	46bd      	mov	sp, r7
    e6ea:	bc80      	pop	{r7}
    e6ec:	4770      	bx	lr

0000e6ee <_ZL17CO_HBcons_receivePvPK13CO_CANrxMsg_t>:
#include "CO_Emergency_Class.h"

CO_HB_Consumer_Class	*ptrHBConsumerClass;


static void CO_HBcons_receive(void *object,const CO_CANrxMsg_t *msg){
    e6ee:	b480      	push	{r7}
    e6f0:	b085      	sub	sp, #20
    e6f2:	af00      	add	r7, sp, #0
    e6f4:	6078      	str	r0, [r7, #4]
    e6f6:	6039      	str	r1, [r7, #0]
	CO_HBconsNode_t *HBconsNode;

	HBconsNode = (CO_HBconsNode_t*) object; /* this is the correct pointer type of the first argument */
    e6f8:	687b      	ldr	r3, [r7, #4]
    e6fa:	60fb      	str	r3, [r7, #12]

	/* verify message length */
	if(msg->DLC == 1){
    e6fc:	683b      	ldr	r3, [r7, #0]
    e6fe:	7d1b      	ldrb	r3, [r3, #20]
    e700:	2b01      	cmp	r3, #1
    e702:	d106      	bne.n	e712 <_ZL17CO_HBcons_receivePvPK13CO_CANrxMsg_t+0x24>
		/* copy data and set 'new message' flag. */
		HBconsNode->NMTstate = msg->data[0];
    e704:	683b      	ldr	r3, [r7, #0]
    e706:	7d5a      	ldrb	r2, [r3, #21]
    e708:	68fb      	ldr	r3, [r7, #12]
    e70a:	701a      	strb	r2, [r3, #0]
		HBconsNode->CANrxNew = true;
    e70c:	68fb      	ldr	r3, [r7, #12]
    e70e:	2201      	movs	r2, #1
    e710:	731a      	strb	r2, [r3, #12]
	}
}
    e712:	bf00      	nop
    e714:	3714      	adds	r7, #20
    e716:	46bd      	mov	sp, r7
    e718:	bc80      	pop	{r7}
    e71a:	4770      	bx	lr

0000e71c <_ZL29CO_HBcons_monitoredNodeConfigP15CO_HBconsumer_thm>:
static void CO_HBcons_monitoredNodeConfig(
CO_HBconsumer_t        *HBcons,
uint8_t                 idx,
uint32_t                HBconsTime)
{
    e71c:	b590      	push	{r4, r7, lr}
    e71e:	b08d      	sub	sp, #52	; 0x34
    e720:	af04      	add	r7, sp, #16
    e722:	60f8      	str	r0, [r7, #12]
    e724:	460b      	mov	r3, r1
    e726:	607a      	str	r2, [r7, #4]
    e728:	72fb      	strb	r3, [r7, #11]
	uint32_t COB_ID;
	uint32_t NodeID;
	CO_HBconsNode_t *monitoredNode;

	if(idx >= HBcons->numberOfMonitoredNodes) return;
    e72a:	7afb      	ldrb	r3, [r7, #11]
    e72c:	68fa      	ldr	r2, [r7, #12]
    e72e:	7b12      	ldrb	r2, [r2, #12]
    e730:	4293      	cmp	r3, r2
    e732:	da2c      	bge.n	e78e <_ZL29CO_HBcons_monitoredNodeConfigP15CO_HBconsumer_thm+0x72>

	NodeID = (uint32_t)((HBconsTime>>16)&0xFF);
    e734:	687b      	ldr	r3, [r7, #4]
    e736:	0c1b      	lsrs	r3, r3, #16
    e738:	b2db      	uxtb	r3, r3
    e73a:	61fb      	str	r3, [r7, #28]
	monitoredNode = &HBcons->monitoredNodes[idx];
    e73c:	68fb      	ldr	r3, [r7, #12]
    e73e:	689a      	ldr	r2, [r3, #8]
    e740:	7afb      	ldrb	r3, [r7, #11]
    e742:	011b      	lsls	r3, r3, #4
    e744:	4413      	add	r3, r2
    e746:	61bb      	str	r3, [r7, #24]
	monitoredNode->time = (uint32_t)HBconsTime;
    e748:	69bb      	ldr	r3, [r7, #24]
    e74a:	687a      	ldr	r2, [r7, #4]
    e74c:	609a      	str	r2, [r3, #8]
	monitoredNode->NMTstate = 0;
    e74e:	69bb      	ldr	r3, [r7, #24]
    e750:	2200      	movs	r2, #0
    e752:	701a      	strb	r2, [r3, #0]
	monitoredNode->monStarted = false;
    e754:	69bb      	ldr	r3, [r7, #24]
    e756:	2200      	movs	r2, #0
    e758:	705a      	strb	r2, [r3, #1]
	COB_ID = (uint32_t)idx + 0x700;
    e75a:	7afb      	ldrb	r3, [r7, #11]
    e75c:	f503 63e0 	add.w	r3, r3, #1792	; 0x700
    e760:	617b      	str	r3, [r7, #20]
// 		COB_ID = 0;
// 		monitoredNode->time = 0;
// 	}

	/* configure Heartbeat consumer CAN reception */
	ptrCODriverClass->CAN_Rx_BufferInit(
    e762:	4b0d      	ldr	r3, [pc, #52]	; (e798 <_ZL29CO_HBcons_monitoredNodeConfigP15CO_HBconsumer_thm+0x7c>)
    e764:	6818      	ldr	r0, [r3, #0]
	HBcons->CANdevRxIdxStart + idx,
    e766:	68fb      	ldr	r3, [r7, #12]
    e768:	695a      	ldr	r2, [r3, #20]
	ptrCODriverClass->CAN_Rx_BufferInit(
    e76a:	7afb      	ldrb	r3, [r7, #11]
    e76c:	18d1      	adds	r1, r2, r3
	COB_ID,
	0x7FF,
	0,
	(void*)&HBcons->monitoredNodes[idx],
    e76e:	68fb      	ldr	r3, [r7, #12]
    e770:	689a      	ldr	r2, [r3, #8]
    e772:	7afb      	ldrb	r3, [r7, #11]
    e774:	011b      	lsls	r3, r3, #4
    e776:	4413      	add	r3, r2
	CO_HBcons_receive);
    e778:	4a08      	ldr	r2, [pc, #32]	; (e79c <_ZL29CO_HBcons_monitoredNodeConfigP15CO_HBconsumer_thm+0x80>)
    e77a:	9202      	str	r2, [sp, #8]
    e77c:	9301      	str	r3, [sp, #4]
    e77e:	2300      	movs	r3, #0
    e780:	9300      	str	r3, [sp, #0]
    e782:	f240 73ff 	movw	r3, #2047	; 0x7ff
    e786:	697a      	ldr	r2, [r7, #20]
    e788:	4c05      	ldr	r4, [pc, #20]	; (e7a0 <_ZL29CO_HBcons_monitoredNodeConfigP15CO_HBconsumer_thm+0x84>)
    e78a:	47a0      	blx	r4
    e78c:	e000      	b.n	e790 <_ZL29CO_HBcons_monitoredNodeConfigP15CO_HBconsumer_thm+0x74>
	if(idx >= HBcons->numberOfMonitoredNodes) return;
    e78e:	bf00      	nop
}
    e790:	3724      	adds	r7, #36	; 0x24
    e792:	46bd      	mov	sp, r7
    e794:	bd90      	pop	{r4, r7, pc}
    e796:	bf00      	nop
    e798:	200019a4 	.word	0x200019a4
    e79c:	0000e6ef 	.word	0x0000e6ef
    e7a0:	0000d7b5 	.word	0x0000d7b5

0000e7a4 <_ZL11CO_ODF_1016P12CO_ODF_arg_t>:
static CO_SDO_abortCode_t CO_ODF_1016(CO_ODF_arg_t *ODF_arg){
    e7a4:	b580      	push	{r7, lr}
    e7a6:	b08c      	sub	sp, #48	; 0x30
    e7a8:	af00      	add	r7, sp, #0
    e7aa:	6078      	str	r0, [r7, #4]
	CO_HBconsumer_t *HBcons;
	uint32_t value;
	CO_SDO_abortCode_t ret = CO_SDO_AB_NONE;
    e7ac:	2300      	movs	r3, #0
    e7ae:	62fb      	str	r3, [r7, #44]	; 0x2c

	HBcons = (CO_HBconsumer_t*) ODF_arg->object;
    e7b0:	687b      	ldr	r3, [r7, #4]
    e7b2:	681b      	ldr	r3, [r3, #0]
    e7b4:	627b      	str	r3, [r7, #36]	; 0x24
	value =ptrCODriverClass->CO_getUint32(ODF_arg->data);
    e7b6:	4b32      	ldr	r3, [pc, #200]	; (e880 <_ZL11CO_ODF_1016P12CO_ODF_arg_t+0xdc>)
    e7b8:	681b      	ldr	r3, [r3, #0]
    e7ba:	1d1a      	adds	r2, r3, #4
    e7bc:	687b      	ldr	r3, [r7, #4]
    e7be:	685b      	ldr	r3, [r3, #4]
    e7c0:	4619      	mov	r1, r3
    e7c2:	4610      	mov	r0, r2
    e7c4:	4b2f      	ldr	r3, [pc, #188]	; (e884 <_ZL11CO_ODF_1016P12CO_ODF_arg_t+0xe0>)
    e7c6:	4798      	blx	r3
    e7c8:	6238      	str	r0, [r7, #32]

	if(!ODF_arg->reading){
    e7ca:	687b      	ldr	r3, [r7, #4]
    e7cc:	7f5b      	ldrb	r3, [r3, #29]
    e7ce:	2b00      	cmp	r3, #0
    e7d0:	d150      	bne.n	e874 <_ZL11CO_ODF_1016P12CO_ODF_arg_t+0xd0>
		uint8_t NodeID;
		uint32_t HBconsTime;

		NodeID = (value >> 16U) & 0xFFU;
    e7d2:	6a3b      	ldr	r3, [r7, #32]
    e7d4:	0c1b      	lsrs	r3, r3, #16
    e7d6:	77fb      	strb	r3, [r7, #31]
		HBconsTime = value & 0xFFFFU;
    e7d8:	6a3b      	ldr	r3, [r7, #32]
    e7da:	b29b      	uxth	r3, r3
    e7dc:	61bb      	str	r3, [r7, #24]

		if((value & 0xFF800000U) != 0){
    e7de:	6a3b      	ldr	r3, [r7, #32]
    e7e0:	0ddb      	lsrs	r3, r3, #23
    e7e2:	05db      	lsls	r3, r3, #23
    e7e4:	2b00      	cmp	r3, #0
    e7e6:	d002      	beq.n	e7ee <_ZL11CO_ODF_1016P12CO_ODF_arg_t+0x4a>
			ret = CO_SDO_AB_PRAM_INCOMPAT;
    e7e8:	4b27      	ldr	r3, [pc, #156]	; (e888 <_ZL11CO_ODF_1016P12CO_ODF_arg_t+0xe4>)
    e7ea:	62fb      	str	r3, [r7, #44]	; 0x2c
    e7ec:	e036      	b.n	e85c <_ZL11CO_ODF_1016P12CO_ODF_arg_t+0xb8>
		}
		else if((HBconsTime != 0) && (NodeID != 0)){
    e7ee:	69bb      	ldr	r3, [r7, #24]
    e7f0:	2b00      	cmp	r3, #0
    e7f2:	d02f      	beq.n	e854 <_ZL11CO_ODF_1016P12CO_ODF_arg_t+0xb0>
    e7f4:	7ffb      	ldrb	r3, [r7, #31]
    e7f6:	2b00      	cmp	r3, #0
    e7f8:	d02c      	beq.n	e854 <_ZL11CO_ODF_1016P12CO_ODF_arg_t+0xb0>
			uint8_t i;
			/* there must not be more entries with same index and time different than zero */
			for(i = 0U; i<HBcons->numberOfMonitoredNodes; i++){
    e7fa:	2300      	movs	r3, #0
    e7fc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    e800:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
    e804:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    e806:	7b12      	ldrb	r2, [r2, #12]
    e808:	4293      	cmp	r3, r2
    e80a:	da26      	bge.n	e85a <_ZL11CO_ODF_1016P12CO_ODF_arg_t+0xb6>
				uint32_t objectCopy = HBcons->HBconsTime[i];
    e80c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    e80e:	685a      	ldr	r2, [r3, #4]
    e810:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
    e814:	009b      	lsls	r3, r3, #2
    e816:	4413      	add	r3, r2
    e818:	681b      	ldr	r3, [r3, #0]
    e81a:	617b      	str	r3, [r7, #20]
				uint8_t NodeIDObj = (objectCopy >> 16U) & 0xFFU;
    e81c:	697b      	ldr	r3, [r7, #20]
    e81e:	0c1b      	lsrs	r3, r3, #16
    e820:	74fb      	strb	r3, [r7, #19]
				uint32_t HBconsTimeObj = objectCopy & 0xFFFFU;
    e822:	697b      	ldr	r3, [r7, #20]
    e824:	b29b      	uxth	r3, r3
    e826:	60fb      	str	r3, [r7, #12]
				if(((ODF_arg->subIndex-1U) != i) && (HBconsTimeObj != 0) && (NodeID == NodeIDObj)){
    e828:	687b      	ldr	r3, [r7, #4]
    e82a:	7f1b      	ldrb	r3, [r3, #28]
    e82c:	1e5a      	subs	r2, r3, #1
    e82e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
    e832:	429a      	cmp	r2, r3
    e834:	d008      	beq.n	e848 <_ZL11CO_ODF_1016P12CO_ODF_arg_t+0xa4>
    e836:	68fb      	ldr	r3, [r7, #12]
    e838:	2b00      	cmp	r3, #0
    e83a:	d005      	beq.n	e848 <_ZL11CO_ODF_1016P12CO_ODF_arg_t+0xa4>
    e83c:	7ffa      	ldrb	r2, [r7, #31]
    e83e:	7cfb      	ldrb	r3, [r7, #19]
    e840:	429a      	cmp	r2, r3
    e842:	d101      	bne.n	e848 <_ZL11CO_ODF_1016P12CO_ODF_arg_t+0xa4>
					ret = CO_SDO_AB_PRAM_INCOMPAT;
    e844:	4b10      	ldr	r3, [pc, #64]	; (e888 <_ZL11CO_ODF_1016P12CO_ODF_arg_t+0xe4>)
    e846:	62fb      	str	r3, [r7, #44]	; 0x2c
			for(i = 0U; i<HBcons->numberOfMonitoredNodes; i++){
    e848:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
    e84c:	3301      	adds	r3, #1
    e84e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    e852:	e7d5      	b.n	e800 <_ZL11CO_ODF_1016P12CO_ODF_arg_t+0x5c>
				}
			}
		}
		else{
			ret = CO_SDO_AB_NONE;
    e854:	2300      	movs	r3, #0
    e856:	62fb      	str	r3, [r7, #44]	; 0x2c
    e858:	e000      	b.n	e85c <_ZL11CO_ODF_1016P12CO_ODF_arg_t+0xb8>
			}
    e85a:	bf00      	nop
		}

		/* Configure */
		if(ret == CO_SDO_AB_NONE){
    e85c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    e85e:	2b00      	cmp	r3, #0
    e860:	d108      	bne.n	e874 <_ZL11CO_ODF_1016P12CO_ODF_arg_t+0xd0>
			CO_HBcons_monitoredNodeConfig(HBcons, ODF_arg->subIndex-1U, value);
    e862:	687b      	ldr	r3, [r7, #4]
    e864:	7f1b      	ldrb	r3, [r3, #28]
    e866:	3b01      	subs	r3, #1
    e868:	b2db      	uxtb	r3, r3
    e86a:	6a3a      	ldr	r2, [r7, #32]
    e86c:	4619      	mov	r1, r3
    e86e:	6a78      	ldr	r0, [r7, #36]	; 0x24
    e870:	4b06      	ldr	r3, [pc, #24]	; (e88c <_ZL11CO_ODF_1016P12CO_ODF_arg_t+0xe8>)
    e872:	4798      	blx	r3
		}
	}

	return ret;
    e874:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
    e876:	4618      	mov	r0, r3
    e878:	3730      	adds	r7, #48	; 0x30
    e87a:	46bd      	mov	sp, r7
    e87c:	bd80      	pop	{r7, pc}
    e87e:	bf00      	nop
    e880:	200019a4 	.word	0x200019a4
    e884:	00010485 	.word	0x00010485
    e888:	06040043 	.word	0x06040043
    e88c:	0000e71d 	.word	0x0000e71d

0000e890 <_ZN20CO_HB_Consumer_ClassC1Ev>:


// default constructor
CO_HB_Consumer_Class::CO_HB_Consumer_Class()
    e890:	b480      	push	{r7}
    e892:	b083      	sub	sp, #12
    e894:	af00      	add	r7, sp, #0
    e896:	6078      	str	r0, [r7, #4]
{
} //CO_HB_Consumer_Class
    e898:	687b      	ldr	r3, [r7, #4]
    e89a:	4618      	mov	r0, r3
    e89c:	370c      	adds	r7, #12
    e89e:	46bd      	mov	sp, r7
    e8a0:	bc80      	pop	{r7}
    e8a2:	4770      	bx	lr

0000e8a4 <_ZN20CO_HB_Consumer_ClassD1Ev>:

// default destructor
CO_HB_Consumer_Class::~CO_HB_Consumer_Class()
    e8a4:	b480      	push	{r7}
    e8a6:	b083      	sub	sp, #12
    e8a8:	af00      	add	r7, sp, #0
    e8aa:	6078      	str	r0, [r7, #4]
{
} //~CO_HB_Consumer_Class
    e8ac:	687b      	ldr	r3, [r7, #4]
    e8ae:	4618      	mov	r0, r3
    e8b0:	370c      	adds	r7, #12
    e8b2:	46bd      	mov	sp, r7
    e8b4:	bc80      	pop	{r7}
    e8b6:	4770      	bx	lr

0000e8b8 <_ZN20CO_HB_Consumer_Class18CO_HBconsumer_initEP15CO_HBconsumer_tP7CO_EM_tP8CO_SDO_tPKmP15CO_HBconsNode_thP14CO_CANmodule_tm>:
const uint32_t          HBconsTime[],
CO_HBconsNode_t         monitoredNodes[],
uint8_t                 numberOfMonitoredNodes,
CO_CANmodule_t         *CANdevRx,
uint32_t                CANdevRxIdxStart)
{
    e8b8:	b590      	push	{r4, r7, lr}
    e8ba:	b089      	sub	sp, #36	; 0x24
    e8bc:	af02      	add	r7, sp, #8
    e8be:	60f8      	str	r0, [r7, #12]
    e8c0:	60b9      	str	r1, [r7, #8]
    e8c2:	607a      	str	r2, [r7, #4]
    e8c4:	603b      	str	r3, [r7, #0]
	uint8_t i;

	/* verify arguments */
	if(HBcons==NULL || em==NULL || SDO==NULL || HBconsTime==NULL ||
    e8c6:	68bb      	ldr	r3, [r7, #8]
    e8c8:	2b00      	cmp	r3, #0
    e8ca:	d00e      	beq.n	e8ea <_ZN20CO_HB_Consumer_Class18CO_HBconsumer_initEP15CO_HBconsumer_tP7CO_EM_tP8CO_SDO_tPKmP15CO_HBconsNode_thP14CO_CANmodule_tm+0x32>
    e8cc:	687b      	ldr	r3, [r7, #4]
    e8ce:	2b00      	cmp	r3, #0
    e8d0:	d00b      	beq.n	e8ea <_ZN20CO_HB_Consumer_Class18CO_HBconsumer_initEP15CO_HBconsumer_tP7CO_EM_tP8CO_SDO_tPKmP15CO_HBconsNode_thP14CO_CANmodule_tm+0x32>
    e8d2:	683b      	ldr	r3, [r7, #0]
    e8d4:	2b00      	cmp	r3, #0
    e8d6:	d008      	beq.n	e8ea <_ZN20CO_HB_Consumer_Class18CO_HBconsumer_initEP15CO_HBconsumer_tP7CO_EM_tP8CO_SDO_tPKmP15CO_HBconsNode_thP14CO_CANmodule_tm+0x32>
    e8d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
    e8da:	2b00      	cmp	r3, #0
    e8dc:	d005      	beq.n	e8ea <_ZN20CO_HB_Consumer_Class18CO_HBconsumer_initEP15CO_HBconsumer_tP7CO_EM_tP8CO_SDO_tPKmP15CO_HBconsNode_thP14CO_CANmodule_tm+0x32>
    e8de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    e8e0:	2b00      	cmp	r3, #0
    e8e2:	d002      	beq.n	e8ea <_ZN20CO_HB_Consumer_Class18CO_HBconsumer_initEP15CO_HBconsumer_tP7CO_EM_tP8CO_SDO_tPKmP15CO_HBconsNode_thP14CO_CANmodule_tm+0x32>
	monitoredNodes==NULL || CANdevRx==NULL){
    e8e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    e8e6:	2b00      	cmp	r3, #0
    e8e8:	d102      	bne.n	e8f0 <_ZN20CO_HB_Consumer_Class18CO_HBconsumer_initEP15CO_HBconsumer_tP7CO_EM_tP8CO_SDO_tPKmP15CO_HBconsNode_thP14CO_CANmodule_tm+0x38>
		return CO_ERROR_ILLEGAL_ARGUMENT;
    e8ea:	f04f 33ff 	mov.w	r3, #4294967295
    e8ee:	e039      	b.n	e964 <_ZN20CO_HB_Consumer_Class18CO_HBconsumer_initEP15CO_HBconsumer_tP7CO_EM_tP8CO_SDO_tPKmP15CO_HBconsNode_thP14CO_CANmodule_tm+0xac>
	}

	/* Configure object variables */
	HBcons->em = em;
    e8f0:	68bb      	ldr	r3, [r7, #8]
    e8f2:	687a      	ldr	r2, [r7, #4]
    e8f4:	601a      	str	r2, [r3, #0]
	HBcons->HBconsTime = HBconsTime;
    e8f6:	68bb      	ldr	r3, [r7, #8]
    e8f8:	6aba      	ldr	r2, [r7, #40]	; 0x28
    e8fa:	605a      	str	r2, [r3, #4]
	HBcons->monitoredNodes = monitoredNodes;
    e8fc:	68bb      	ldr	r3, [r7, #8]
    e8fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    e900:	609a      	str	r2, [r3, #8]
	HBcons->numberOfMonitoredNodes = numberOfMonitoredNodes;
    e902:	68bb      	ldr	r3, [r7, #8]
    e904:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
    e908:	731a      	strb	r2, [r3, #12]
	HBcons->allMonitoredOperational = 0;
    e90a:	68bb      	ldr	r3, [r7, #8]
    e90c:	2200      	movs	r2, #0
    e90e:	735a      	strb	r2, [r3, #13]
	HBcons->CANdevRx = CANdevRx;
    e910:	68bb      	ldr	r3, [r7, #8]
    e912:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    e914:	611a      	str	r2, [r3, #16]
	HBcons->CANdevRxIdxStart = CANdevRxIdxStart;
    e916:	68bb      	ldr	r3, [r7, #8]
    e918:	6bba      	ldr	r2, [r7, #56]	; 0x38
    e91a:	615a      	str	r2, [r3, #20]

	for(i=0; i<HBcons->numberOfMonitoredNodes; i++){
    e91c:	2300      	movs	r3, #0
    e91e:	75fb      	strb	r3, [r7, #23]
    e920:	7dfb      	ldrb	r3, [r7, #23]
    e922:	68ba      	ldr	r2, [r7, #8]
    e924:	7b12      	ldrb	r2, [r2, #12]
    e926:	4293      	cmp	r3, r2
    e928:	da0e      	bge.n	e948 <_ZN20CO_HB_Consumer_Class18CO_HBconsumer_initEP15CO_HBconsumer_tP7CO_EM_tP8CO_SDO_tPKmP15CO_HBconsNode_thP14CO_CANmodule_tm+0x90>

			CO_HBcons_monitoredNodeConfig(HBcons, i, HBcons->HBconsTime[i]);
    e92a:	68bb      	ldr	r3, [r7, #8]
    e92c:	685a      	ldr	r2, [r3, #4]
    e92e:	7dfb      	ldrb	r3, [r7, #23]
    e930:	009b      	lsls	r3, r3, #2
    e932:	4413      	add	r3, r2
    e934:	681a      	ldr	r2, [r3, #0]
    e936:	7dfb      	ldrb	r3, [r7, #23]
    e938:	4619      	mov	r1, r3
    e93a:	68b8      	ldr	r0, [r7, #8]
    e93c:	4b0b      	ldr	r3, [pc, #44]	; (e96c <_ZN20CO_HB_Consumer_Class18CO_HBconsumer_initEP15CO_HBconsumer_tP7CO_EM_tP8CO_SDO_tPKmP15CO_HBconsNode_thP14CO_CANmodule_tm+0xb4>)
    e93e:	4798      	blx	r3
	for(i=0; i<HBcons->numberOfMonitoredNodes; i++){
    e940:	7dfb      	ldrb	r3, [r7, #23]
    e942:	3301      	adds	r3, #1
    e944:	75fb      	strb	r3, [r7, #23]
    e946:	e7eb      	b.n	e920 <_ZN20CO_HB_Consumer_Class18CO_HBconsumer_initEP15CO_HBconsumer_tP7CO_EM_tP8CO_SDO_tPKmP15CO_HBconsNode_thP14CO_CANmodule_tm+0x68>
		
	}
	

	/* Configure Object dictionary entry at index 0x1016 */
	ptrCODriverClass->CO_OD_configure( OD_H1016_CONSUMER_HB_TIME, CO_ODF_1016, (void*)HBcons, 0, 0);
    e948:	4b09      	ldr	r3, [pc, #36]	; (e970 <_ZN20CO_HB_Consumer_Class18CO_HBconsumer_initEP15CO_HBconsumer_tP7CO_EM_tP8CO_SDO_tPKmP15CO_HBconsNode_thP14CO_CANmodule_tm+0xb8>)
    e94a:	681b      	ldr	r3, [r3, #0]
    e94c:	1d18      	adds	r0, r3, #4
    e94e:	2300      	movs	r3, #0
    e950:	9301      	str	r3, [sp, #4]
    e952:	2300      	movs	r3, #0
    e954:	9300      	str	r3, [sp, #0]
    e956:	68bb      	ldr	r3, [r7, #8]
    e958:	4a06      	ldr	r2, [pc, #24]	; (e974 <_ZN20CO_HB_Consumer_Class18CO_HBconsumer_initEP15CO_HBconsumer_tP7CO_EM_tP8CO_SDO_tPKmP15CO_HBconsNode_thP14CO_CANmodule_tm+0xbc>)
    e95a:	f241 0116 	movw	r1, #4118	; 0x1016
    e95e:	4c06      	ldr	r4, [pc, #24]	; (e978 <_ZN20CO_HB_Consumer_Class18CO_HBconsumer_initEP15CO_HBconsumer_tP7CO_EM_tP8CO_SDO_tPKmP15CO_HBconsNode_thP14CO_CANmodule_tm+0xc0>)
    e960:	47a0      	blx	r4

	return CO_ERROR_NO;
    e962:	2300      	movs	r3, #0
}
    e964:	4618      	mov	r0, r3
    e966:	371c      	adds	r7, #28
    e968:	46bd      	mov	sp, r7
    e96a:	bd90      	pop	{r4, r7, pc}
    e96c:	0000e71d 	.word	0x0000e71d
    e970:	200019a4 	.word	0x200019a4
    e974:	0000e7a5 	.word	0x0000e7a5
    e978:	000108d5 	.word	0x000108d5

0000e97c <_ZN20CO_HB_Consumer_Class21CO_HBconsumer_processEP15CO_HBconsumer_thm>:
/******************************************************************************/
void CO_HB_Consumer_Class::CO_HBconsumer_process(
CO_HBconsumer_t        *HBcons,
bool_t                  NMTisPreOrOperational,
uint32_t                timeDifference_ms)
{
    e97c:	b590      	push	{r4, r7, lr}
    e97e:	b089      	sub	sp, #36	; 0x24
    e980:	af02      	add	r7, sp, #8
    e982:	60f8      	str	r0, [r7, #12]
    e984:	60b9      	str	r1, [r7, #8]
    e986:	603b      	str	r3, [r7, #0]
    e988:	4613      	mov	r3, r2
    e98a:	71fb      	strb	r3, [r7, #7]
	uint8_t i;
	uint8_t AllMonitoredOperationalCopy;
	CO_HBconsNode_t *monitoredNode;

	AllMonitoredOperationalCopy = 5;
    e98c:	2305      	movs	r3, #5
    e98e:	75bb      	strb	r3, [r7, #22]
	monitoredNode = &HBcons->monitoredNodes[0];
    e990:	68bb      	ldr	r3, [r7, #8]
    e992:	689b      	ldr	r3, [r3, #8]
    e994:	613b      	str	r3, [r7, #16]

	if(NMTisPreOrOperational){
    e996:	79fb      	ldrb	r3, [r7, #7]
    e998:	2b00      	cmp	r3, #0
    e99a:	d060      	beq.n	ea5e <_ZN20CO_HB_Consumer_Class21CO_HBconsumer_processEP15CO_HBconsumer_thm+0xe2>
		for(i=0; i<HBcons->numberOfMonitoredNodes; i++){
    e99c:	2300      	movs	r3, #0
    e99e:	75fb      	strb	r3, [r7, #23]
    e9a0:	7dfb      	ldrb	r3, [r7, #23]
    e9a2:	68ba      	ldr	r2, [r7, #8]
    e9a4:	7b12      	ldrb	r2, [r2, #12]
    e9a6:	4293      	cmp	r3, r2
    e9a8:	da72      	bge.n	ea90 <_ZN20CO_HB_Consumer_Class21CO_HBconsumer_processEP15CO_HBconsumer_thm+0x114>
			if(monitoredNode->time){/* is node monitored */
    e9aa:	693b      	ldr	r3, [r7, #16]
    e9ac:	689b      	ldr	r3, [r3, #8]
    e9ae:	2b00      	cmp	r3, #0
    e9b0:	d04e      	beq.n	ea50 <_ZN20CO_HB_Consumer_Class21CO_HBconsumer_processEP15CO_HBconsumer_thm+0xd4>
				/* Verify if new Consumer Heartbeat message received */
				if(monitoredNode->CANrxNew){
    e9b2:	693b      	ldr	r3, [r7, #16]
    e9b4:	7b1b      	ldrb	r3, [r3, #12]
    e9b6:	2b00      	cmp	r3, #0
    e9b8:	d00e      	beq.n	e9d8 <_ZN20CO_HB_Consumer_Class21CO_HBconsumer_processEP15CO_HBconsumer_thm+0x5c>
					if(monitoredNode->NMTstate){
    e9ba:	693b      	ldr	r3, [r7, #16]
    e9bc:	781b      	ldrb	r3, [r3, #0]
    e9be:	2b00      	cmp	r3, #0
    e9c0:	d007      	beq.n	e9d2 <_ZN20CO_HB_Consumer_Class21CO_HBconsumer_processEP15CO_HBconsumer_thm+0x56>
						/* not a bootup message */
						monitoredNode->monStarted = true;
    e9c2:	693b      	ldr	r3, [r7, #16]
    e9c4:	2201      	movs	r2, #1
    e9c6:	705a      	strb	r2, [r3, #1]
						monitoredNode->timeoutTimer = 0;  /* reset timer */
    e9c8:	693b      	ldr	r3, [r7, #16]
    e9ca:	2200      	movs	r2, #0
    e9cc:	605a      	str	r2, [r3, #4]
						timeDifference_ms = 0;
    e9ce:	2300      	movs	r3, #0
    e9d0:	603b      	str	r3, [r7, #0]
					}
					monitoredNode->CANrxNew = false;
    e9d2:	693b      	ldr	r3, [r7, #16]
    e9d4:	2200      	movs	r2, #0
    e9d6:	731a      	strb	r2, [r3, #12]
				}
				/* Verify timeout */
				if(monitoredNode->timeoutTimer < monitoredNode->time) monitoredNode->timeoutTimer += timeDifference_ms;
    e9d8:	693b      	ldr	r3, [r7, #16]
    e9da:	685a      	ldr	r2, [r3, #4]
    e9dc:	693b      	ldr	r3, [r7, #16]
    e9de:	689b      	ldr	r3, [r3, #8]
    e9e0:	429a      	cmp	r2, r3
    e9e2:	d205      	bcs.n	e9f0 <_ZN20CO_HB_Consumer_Class21CO_HBconsumer_processEP15CO_HBconsumer_thm+0x74>
    e9e4:	693b      	ldr	r3, [r7, #16]
    e9e6:	685a      	ldr	r2, [r3, #4]
    e9e8:	683b      	ldr	r3, [r7, #0]
    e9ea:	441a      	add	r2, r3
    e9ec:	693b      	ldr	r3, [r7, #16]
    e9ee:	605a      	str	r2, [r3, #4]

				if(monitoredNode->monStarted){
    e9f0:	693b      	ldr	r3, [r7, #16]
    e9f2:	785b      	ldrb	r3, [r3, #1]
    e9f4:	2b00      	cmp	r3, #0
    e9f6:	d025      	beq.n	ea44 <_ZN20CO_HB_Consumer_Class21CO_HBconsumer_processEP15CO_HBconsumer_thm+0xc8>
					if(monitoredNode->timeoutTimer >= monitoredNode->time){
    e9f8:	693b      	ldr	r3, [r7, #16]
    e9fa:	685a      	ldr	r2, [r3, #4]
    e9fc:	693b      	ldr	r3, [r7, #16]
    e9fe:	689b      	ldr	r3, [r3, #8]
    ea00:	429a      	cmp	r2, r3
    ea02:	d30f      	bcc.n	ea24 <_ZN20CO_HB_Consumer_Class21CO_HBconsumer_processEP15CO_HBconsumer_thm+0xa8>
						ptrCODriverClass->EM_ErrorReport(HBcons->em, CO_EM_HEARTBEAT_CONSUMER, CO_EMC_HEARTBEAT, i);
    ea04:	4b26      	ldr	r3, [pc, #152]	; (eaa0 <_ZN20CO_HB_Consumer_Class21CO_HBconsumer_processEP15CO_HBconsumer_thm+0x124>)
    ea06:	681b      	ldr	r3, [r3, #0]
    ea08:	1d18      	adds	r0, r3, #4
    ea0a:	68bb      	ldr	r3, [r7, #8]
    ea0c:	6819      	ldr	r1, [r3, #0]
    ea0e:	7dfb      	ldrb	r3, [r7, #23]
    ea10:	9300      	str	r3, [sp, #0]
    ea12:	f248 1330 	movw	r3, #33072	; 0x8130
    ea16:	221b      	movs	r2, #27
    ea18:	4c22      	ldr	r4, [pc, #136]	; (eaa4 <_ZN20CO_HB_Consumer_Class21CO_HBconsumer_processEP15CO_HBconsumer_thm+0x128>)
    ea1a:	47a0      	blx	r4
						monitoredNode->NMTstate = 0;
    ea1c:	693b      	ldr	r3, [r7, #16]
    ea1e:	2200      	movs	r2, #0
    ea20:	701a      	strb	r2, [r3, #0]
    ea22:	e00f      	b.n	ea44 <_ZN20CO_HB_Consumer_Class21CO_HBconsumer_processEP15CO_HBconsumer_thm+0xc8>
					}
					else if(monitoredNode->NMTstate == 0){
    ea24:	693b      	ldr	r3, [r7, #16]
    ea26:	781b      	ldrb	r3, [r3, #0]
    ea28:	2b00      	cmp	r3, #0
    ea2a:	d10b      	bne.n	ea44 <_ZN20CO_HB_Consumer_Class21CO_HBconsumer_processEP15CO_HBconsumer_thm+0xc8>
						/* there was a bootup message */
						ptrCODriverClass->EM_ErrorReport(HBcons->em, CO_EM_HB_CONSUMER_REMOTE_RESET, CO_EMC_HEARTBEAT, i);
    ea2c:	4b1c      	ldr	r3, [pc, #112]	; (eaa0 <_ZN20CO_HB_Consumer_Class21CO_HBconsumer_processEP15CO_HBconsumer_thm+0x124>)
    ea2e:	681b      	ldr	r3, [r3, #0]
    ea30:	1d18      	adds	r0, r3, #4
    ea32:	68bb      	ldr	r3, [r7, #8]
    ea34:	6819      	ldr	r1, [r3, #0]
    ea36:	7dfb      	ldrb	r3, [r7, #23]
    ea38:	9300      	str	r3, [sp, #0]
    ea3a:	f248 1330 	movw	r3, #33072	; 0x8130
    ea3e:	221c      	movs	r2, #28
    ea40:	4c18      	ldr	r4, [pc, #96]	; (eaa4 <_ZN20CO_HB_Consumer_Class21CO_HBconsumer_processEP15CO_HBconsumer_thm+0x128>)
    ea42:	47a0      	blx	r4
					}
				}
				if(monitoredNode->NMTstate != CO_NMT_OPERATIONAL)
    ea44:	693b      	ldr	r3, [r7, #16]
    ea46:	781b      	ldrb	r3, [r3, #0]
    ea48:	2b05      	cmp	r3, #5
    ea4a:	d001      	beq.n	ea50 <_ZN20CO_HB_Consumer_Class21CO_HBconsumer_processEP15CO_HBconsumer_thm+0xd4>
				AllMonitoredOperationalCopy = 0;
    ea4c:	2300      	movs	r3, #0
    ea4e:	75bb      	strb	r3, [r7, #22]
			}
			monitoredNode++;
    ea50:	693b      	ldr	r3, [r7, #16]
    ea52:	3310      	adds	r3, #16
    ea54:	613b      	str	r3, [r7, #16]
		for(i=0; i<HBcons->numberOfMonitoredNodes; i++){
    ea56:	7dfb      	ldrb	r3, [r7, #23]
    ea58:	3301      	adds	r3, #1
    ea5a:	75fb      	strb	r3, [r7, #23]
    ea5c:	e7a0      	b.n	e9a0 <_ZN20CO_HB_Consumer_Class21CO_HBconsumer_processEP15CO_HBconsumer_thm+0x24>
		}
	}
	else{ /* not in (pre)operational state */
		for(i=0; i<HBcons->numberOfMonitoredNodes; i++){
    ea5e:	2300      	movs	r3, #0
    ea60:	75fb      	strb	r3, [r7, #23]
    ea62:	7dfb      	ldrb	r3, [r7, #23]
    ea64:	68ba      	ldr	r2, [r7, #8]
    ea66:	7b12      	ldrb	r2, [r2, #12]
    ea68:	4293      	cmp	r3, r2
    ea6a:	da0f      	bge.n	ea8c <_ZN20CO_HB_Consumer_Class21CO_HBconsumer_processEP15CO_HBconsumer_thm+0x110>
			monitoredNode->NMTstate = 0;
    ea6c:	693b      	ldr	r3, [r7, #16]
    ea6e:	2200      	movs	r2, #0
    ea70:	701a      	strb	r2, [r3, #0]
			monitoredNode->CANrxNew = false;
    ea72:	693b      	ldr	r3, [r7, #16]
    ea74:	2200      	movs	r2, #0
    ea76:	731a      	strb	r2, [r3, #12]
			monitoredNode->monStarted = false;
    ea78:	693b      	ldr	r3, [r7, #16]
    ea7a:	2200      	movs	r2, #0
    ea7c:	705a      	strb	r2, [r3, #1]
			monitoredNode++;
    ea7e:	693b      	ldr	r3, [r7, #16]
    ea80:	3310      	adds	r3, #16
    ea82:	613b      	str	r3, [r7, #16]
		for(i=0; i<HBcons->numberOfMonitoredNodes; i++){
    ea84:	7dfb      	ldrb	r3, [r7, #23]
    ea86:	3301      	adds	r3, #1
    ea88:	75fb      	strb	r3, [r7, #23]
    ea8a:	e7ea      	b.n	ea62 <_ZN20CO_HB_Consumer_Class21CO_HBconsumer_processEP15CO_HBconsumer_thm+0xe6>
		}
		AllMonitoredOperationalCopy = 0;
    ea8c:	2300      	movs	r3, #0
    ea8e:	75bb      	strb	r3, [r7, #22]
	}
	HBcons->allMonitoredOperational = AllMonitoredOperationalCopy;
    ea90:	68bb      	ldr	r3, [r7, #8]
    ea92:	7dba      	ldrb	r2, [r7, #22]
    ea94:	735a      	strb	r2, [r3, #13]
}
    ea96:	bf00      	nop
    ea98:	371c      	adds	r7, #28
    ea9a:	46bd      	mov	sp, r7
    ea9c:	bd90      	pop	{r4, r7, pc}
    ea9e:	bf00      	nop
    eaa0:	200019a4 	.word	0x200019a4
    eaa4:	0000e3f5 	.word	0x0000e3f5

0000eaa8 <_ZN20CO_HB_Consumer_Class10HB_SetNodeEh>:

void	CO_HB_Consumer_Class::HB_SetNode(uint8_t nd){
    eaa8:	b480      	push	{r7}
    eaaa:	b083      	sub	sp, #12
    eaac:	af00      	add	r7, sp, #0
    eaae:	6078      	str	r0, [r7, #4]
    eab0:	460b      	mov	r3, r1
    eab2:	70fb      	strb	r3, [r7, #3]
	coNode=nd;
    eab4:	687b      	ldr	r3, [r7, #4]
    eab6:	78fa      	ldrb	r2, [r7, #3]
    eab8:	711a      	strb	r2, [r3, #4]
    eaba:	bf00      	nop
    eabc:	370c      	adds	r7, #12
    eabe:	46bd      	mov	sp, r7
    eac0:	bc80      	pop	{r7}
    eac2:	4770      	bx	lr

0000eac4 <_ZL14CO_NMT_receivePvPK13CO_CANrxMsg_t>:
#include "CO_NMT_Heartbeat_Class.h"
#include "CO_Driver_Class.h"



static void CO_NMT_receive(void *object, const CO_CANrxMsg_t *msg){
    eac4:	b580      	push	{r7, lr}
    eac6:	b084      	sub	sp, #16
    eac8:	af00      	add	r7, sp, #0
    eaca:	6078      	str	r0, [r7, #4]
    eacc:	6039      	str	r1, [r7, #0]
    CO_NMT_t *NMT;
    uint8_t nodeId;

    NMT = (CO_NMT_t*)object;   /* this is the correct pointer type of the first argument */
    eace:	687b      	ldr	r3, [r7, #4]
    ead0:	60fb      	str	r3, [r7, #12]

    nodeId = msg->data[1];
    ead2:	683b      	ldr	r3, [r7, #0]
    ead4:	7d9b      	ldrb	r3, [r3, #22]
    ead6:	72fb      	strb	r3, [r7, #11]

    if((msg->DLC == 2) && ((nodeId == 0) || (nodeId == NMT->nodeId))){
    ead8:	683b      	ldr	r3, [r7, #0]
    eada:	7d1b      	ldrb	r3, [r3, #20]
    eadc:	2b02      	cmp	r3, #2
    eade:	d146      	bne.n	eb6e <_ZL14CO_NMT_receivePvPK13CO_CANrxMsg_t+0xaa>
    eae0:	7afb      	ldrb	r3, [r7, #11]
    eae2:	2b00      	cmp	r3, #0
    eae4:	d004      	beq.n	eaf0 <_ZL14CO_NMT_receivePvPK13CO_CANrxMsg_t+0x2c>
    eae6:	68fb      	ldr	r3, [r7, #12]
    eae8:	7a9b      	ldrb	r3, [r3, #10]
    eaea:	7afa      	ldrb	r2, [r7, #11]
    eaec:	429a      	cmp	r2, r3
    eaee:	d13e      	bne.n	eb6e <_ZL14CO_NMT_receivePvPK13CO_CANrxMsg_t+0xaa>
        uint8_t command = msg->data[0];
    eaf0:	683b      	ldr	r3, [r7, #0]
    eaf2:	7d5b      	ldrb	r3, [r3, #21]
    eaf4:	72bb      	strb	r3, [r7, #10]
        uint8_t currentOperatingState = NMT->operatingState;
    eaf6:	68fb      	ldr	r3, [r7, #12]
    eaf8:	781b      	ldrb	r3, [r3, #0]
    eafa:	727b      	strb	r3, [r7, #9]

        switch(command){
    eafc:	7abb      	ldrb	r3, [r7, #10]
    eafe:	2b80      	cmp	r3, #128	; 0x80
    eb00:	d019      	beq.n	eb36 <_ZL14CO_NMT_receivePvPK13CO_CANrxMsg_t+0x72>
    eb02:	2b80      	cmp	r3, #128	; 0x80
    eb04:	dc04      	bgt.n	eb10 <_ZL14CO_NMT_receivePvPK13CO_CANrxMsg_t+0x4c>
    eb06:	2b01      	cmp	r3, #1
    eb08:	d007      	beq.n	eb1a <_ZL14CO_NMT_receivePvPK13CO_CANrxMsg_t+0x56>
    eb0a:	2b02      	cmp	r3, #2
    eb0c:	d00f      	beq.n	eb2e <_ZL14CO_NMT_receivePvPK13CO_CANrxMsg_t+0x6a>
    eb0e:	e01f      	b.n	eb50 <_ZL14CO_NMT_receivePvPK13CO_CANrxMsg_t+0x8c>
    eb10:	2b81      	cmp	r3, #129	; 0x81
    eb12:	d014      	beq.n	eb3e <_ZL14CO_NMT_receivePvPK13CO_CANrxMsg_t+0x7a>
    eb14:	2b82      	cmp	r3, #130	; 0x82
    eb16:	d016      	beq.n	eb46 <_ZL14CO_NMT_receivePvPK13CO_CANrxMsg_t+0x82>
    eb18:	e01a      	b.n	eb50 <_ZL14CO_NMT_receivePvPK13CO_CANrxMsg_t+0x8c>
            case CO_NMT_ENTER_OPERATIONAL:
                if((*NMT->emPr->errorRegister) == 0U){
    eb1a:	68fb      	ldr	r3, [r7, #12]
    eb1c:	695b      	ldr	r3, [r3, #20]
    eb1e:	681b      	ldr	r3, [r3, #0]
    eb20:	781b      	ldrb	r3, [r3, #0]
    eb22:	2b00      	cmp	r3, #0
    eb24:	d113      	bne.n	eb4e <_ZL14CO_NMT_receivePvPK13CO_CANrxMsg_t+0x8a>
                    NMT->operatingState = CO_NMT_OPERATIONAL;
    eb26:	68fb      	ldr	r3, [r7, #12]
    eb28:	2205      	movs	r2, #5
    eb2a:	701a      	strb	r2, [r3, #0]
                }
                break;
    eb2c:	e00f      	b.n	eb4e <_ZL14CO_NMT_receivePvPK13CO_CANrxMsg_t+0x8a>
            case CO_NMT_ENTER_STOPPED:
                NMT->operatingState = CO_NMT_STOPPED;
    eb2e:	68fb      	ldr	r3, [r7, #12]
    eb30:	2204      	movs	r2, #4
    eb32:	701a      	strb	r2, [r3, #0]
                break;
    eb34:	e00c      	b.n	eb50 <_ZL14CO_NMT_receivePvPK13CO_CANrxMsg_t+0x8c>
            case CO_NMT_ENTER_PRE_OPERATIONAL:
                NMT->operatingState = CO_NMT_PRE_OPERATIONAL;
    eb36:	68fb      	ldr	r3, [r7, #12]
    eb38:	227f      	movs	r2, #127	; 0x7f
    eb3a:	701a      	strb	r2, [r3, #0]
                break;
    eb3c:	e008      	b.n	eb50 <_ZL14CO_NMT_receivePvPK13CO_CANrxMsg_t+0x8c>
            case CO_NMT_RESET_NODE:
                NMT->resetCommand = CO_RESET_APP;
    eb3e:	68fb      	ldr	r3, [r7, #12]
    eb40:	2202      	movs	r2, #2
    eb42:	725a      	strb	r2, [r3, #9]
                break;
    eb44:	e004      	b.n	eb50 <_ZL14CO_NMT_receivePvPK13CO_CANrxMsg_t+0x8c>
            case CO_NMT_RESET_COMMUNICATION:
                NMT->resetCommand = CO_RESET_COMM;
    eb46:	68fb      	ldr	r3, [r7, #12]
    eb48:	2201      	movs	r2, #1
    eb4a:	725a      	strb	r2, [r3, #9]
                break;
    eb4c:	e000      	b.n	eb50 <_ZL14CO_NMT_receivePvPK13CO_CANrxMsg_t+0x8c>
                break;
    eb4e:	bf00      	nop
        }

        if(NMT->ptrState!=NULL && currentOperatingState!=NMT->operatingState){
    eb50:	68fb      	ldr	r3, [r7, #12]
    eb52:	69db      	ldr	r3, [r3, #28]
    eb54:	2b00      	cmp	r3, #0
    eb56:	d00a      	beq.n	eb6e <_ZL14CO_NMT_receivePvPK13CO_CANrxMsg_t+0xaa>
    eb58:	68fb      	ldr	r3, [r7, #12]
    eb5a:	781b      	ldrb	r3, [r3, #0]
    eb5c:	7a7a      	ldrb	r2, [r7, #9]
    eb5e:	429a      	cmp	r2, r3
    eb60:	d005      	beq.n	eb6e <_ZL14CO_NMT_receivePvPK13CO_CANrxMsg_t+0xaa>
            NMT->ptrState((CO_NMT_internalState_t)NMT->operatingState);
    eb62:	68fb      	ldr	r3, [r7, #12]
    eb64:	69db      	ldr	r3, [r3, #28]
    eb66:	68fa      	ldr	r2, [r7, #12]
    eb68:	7812      	ldrb	r2, [r2, #0]
    eb6a:	4610      	mov	r0, r2
    eb6c:	4798      	blx	r3
        }
    }
}
    eb6e:	bf00      	nop
    eb70:	3710      	adds	r7, #16
    eb72:	46bd      	mov	sp, r7
    eb74:	bd80      	pop	{r7, pc}

0000eb76 <_ZN22CO_NMT_Heartbeat_ClassC1Ev>:
// default constructor
CO_NMT_Heartbeat_Class::CO_NMT_Heartbeat_Class()
    eb76:	b480      	push	{r7}
    eb78:	b083      	sub	sp, #12
    eb7a:	af00      	add	r7, sp, #0
    eb7c:	6078      	str	r0, [r7, #4]
{
} //CO_NMT_Heartbeat
    eb7e:	687b      	ldr	r3, [r7, #4]
    eb80:	4618      	mov	r0, r3
    eb82:	370c      	adds	r7, #12
    eb84:	46bd      	mov	sp, r7
    eb86:	bc80      	pop	{r7}
    eb88:	4770      	bx	lr

0000eb8a <_ZN22CO_NMT_Heartbeat_ClassD1Ev>:

// default destructor
CO_NMT_Heartbeat_Class::~CO_NMT_Heartbeat_Class()
    eb8a:	b480      	push	{r7}
    eb8c:	b083      	sub	sp, #12
    eb8e:	af00      	add	r7, sp, #0
    eb90:	6078      	str	r0, [r7, #4]
{
} //~CO_NMT_Heartbeat
    eb92:	687b      	ldr	r3, [r7, #4]
    eb94:	4618      	mov	r0, r3
    eb96:	370c      	adds	r7, #12
    eb98:	46bd      	mov	sp, r7
    eb9a:	bc80      	pop	{r7}
    eb9c:	4770      	bx	lr
	...

0000eba0 <_ZN22CO_NMT_Heartbeat_Class8NMT_InitEP8CO_NMT_tP9CO_EMpr_thmP14CO_CANmodule_tmmS5_mm>:
        uint32_t                NMT_rxIdx,
        uint32_t                CANidRxNMT,
        CO_CANmodule_t         *HB_CANdev,
        uint32_t                HB_txIdx,
        uint32_t                CANidTxHB)
{
    eba0:	b5b0      	push	{r4, r5, r7, lr}
    eba2:	b088      	sub	sp, #32
    eba4:	af04      	add	r7, sp, #16
    eba6:	60f8      	str	r0, [r7, #12]
    eba8:	60b9      	str	r1, [r7, #8]
    ebaa:	607a      	str	r2, [r7, #4]
    ebac:	70fb      	strb	r3, [r7, #3]
    /* verify arguments */
    if(NMT_Init==NULL || emPr==NULL || NMT_CANdev==NULL || HB_CANdev==NULL){
    ebae:	68bb      	ldr	r3, [r7, #8]
    ebb0:	2b00      	cmp	r3, #0
    ebb2:	d008      	beq.n	ebc6 <_ZN22CO_NMT_Heartbeat_Class8NMT_InitEP8CO_NMT_tP9CO_EMpr_thmP14CO_CANmodule_tmmS5_mm+0x26>
    ebb4:	687b      	ldr	r3, [r7, #4]
    ebb6:	2b00      	cmp	r3, #0
    ebb8:	d005      	beq.n	ebc6 <_ZN22CO_NMT_Heartbeat_Class8NMT_InitEP8CO_NMT_tP9CO_EMpr_thmP14CO_CANmodule_tmmS5_mm+0x26>
    ebba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    ebbc:	2b00      	cmp	r3, #0
    ebbe:	d002      	beq.n	ebc6 <_ZN22CO_NMT_Heartbeat_Class8NMT_InitEP8CO_NMT_tP9CO_EMpr_thmP14CO_CANmodule_tmmS5_mm+0x26>
    ebc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    ebc2:	2b00      	cmp	r3, #0
    ebc4:	d102      	bne.n	ebcc <_ZN22CO_NMT_Heartbeat_Class8NMT_InitEP8CO_NMT_tP9CO_EMpr_thmP14CO_CANmodule_tmmS5_mm+0x2c>
        return CO_ERROR_ILLEGAL_ARGUMENT;
    ebc6:	f04f 33ff 	mov.w	r3, #4294967295
    ebca:	e062      	b.n	ec92 <_ZN22CO_NMT_Heartbeat_Class8NMT_InitEP8CO_NMT_tP9CO_EMpr_thmP14CO_CANmodule_tmmS5_mm+0xf2>
    }else{
		NMT=NMT_Init;
    ebcc:	68fb      	ldr	r3, [r7, #12]
    ebce:	68ba      	ldr	r2, [r7, #8]
    ebd0:	601a      	str	r2, [r3, #0]
	}

    /* blinking bytes */
    NMT->LEDflickering          = 0;
    ebd2:	68fb      	ldr	r3, [r7, #12]
    ebd4:	681b      	ldr	r3, [r3, #0]
    ebd6:	2200      	movs	r2, #0
    ebd8:	705a      	strb	r2, [r3, #1]
    NMT->LEDblinking            = 0;
    ebda:	68fb      	ldr	r3, [r7, #12]
    ebdc:	681b      	ldr	r3, [r3, #0]
    ebde:	2200      	movs	r2, #0
    ebe0:	709a      	strb	r2, [r3, #2]
    NMT->LEDsingleFlash         = 0;
    ebe2:	68fb      	ldr	r3, [r7, #12]
    ebe4:	681b      	ldr	r3, [r3, #0]
    ebe6:	2200      	movs	r2, #0
    ebe8:	70da      	strb	r2, [r3, #3]
    NMT->LEDdoubleFlash         = 0;
    ebea:	68fb      	ldr	r3, [r7, #12]
    ebec:	681b      	ldr	r3, [r3, #0]
    ebee:	2200      	movs	r2, #0
    ebf0:	711a      	strb	r2, [r3, #4]
    NMT->LEDtripleFlash         = 0;
    ebf2:	68fb      	ldr	r3, [r7, #12]
    ebf4:	681b      	ldr	r3, [r3, #0]
    ebf6:	2200      	movs	r2, #0
    ebf8:	715a      	strb	r2, [r3, #5]
    NMT->LEDquadrupleFlash      = 0;
    ebfa:	68fb      	ldr	r3, [r7, #12]
    ebfc:	681b      	ldr	r3, [r3, #0]
    ebfe:	2200      	movs	r2, #0
    ec00:	719a      	strb	r2, [r3, #6]

    /* Configure object variables */
    NMT->operatingState         = CO_NMT_INITIALIZING;
    ec02:	68fb      	ldr	r3, [r7, #12]
    ec04:	681b      	ldr	r3, [r3, #0]
    ec06:	2200      	movs	r2, #0
    ec08:	701a      	strb	r2, [r3, #0]
    NMT->LEDgreenRun            = -1;
    ec0a:	68fb      	ldr	r3, [r7, #12]
    ec0c:	681b      	ldr	r3, [r3, #0]
    ec0e:	22ff      	movs	r2, #255	; 0xff
    ec10:	71da      	strb	r2, [r3, #7]
    NMT->LEDredError            = 1;
    ec12:	68fb      	ldr	r3, [r7, #12]
    ec14:	681b      	ldr	r3, [r3, #0]
    ec16:	2201      	movs	r2, #1
    ec18:	721a      	strb	r2, [r3, #8]
    NMT->nodeId                 = nodeId;
    ec1a:	68fb      	ldr	r3, [r7, #12]
    ec1c:	681b      	ldr	r3, [r3, #0]
    ec1e:	78fa      	ldrb	r2, [r7, #3]
    ec20:	729a      	strb	r2, [r3, #10]
    NMT->firstHBTime            = firstHBTime;
    ec22:	68fb      	ldr	r3, [r7, #12]
    ec24:	681b      	ldr	r3, [r3, #0]
    ec26:	6a3a      	ldr	r2, [r7, #32]
    ec28:	611a      	str	r2, [r3, #16]
    NMT->resetCommand           = 0;
    ec2a:	68fb      	ldr	r3, [r7, #12]
    ec2c:	681b      	ldr	r3, [r3, #0]
    ec2e:	2200      	movs	r2, #0
    ec30:	725a      	strb	r2, [r3, #9]
    NMT->HBproducerTimer        = 0xFFFF;
    ec32:	68fb      	ldr	r3, [r7, #12]
    ec34:	681b      	ldr	r3, [r3, #0]
    ec36:	f64f 72ff 	movw	r2, #65535	; 0xffff
    ec3a:	60da      	str	r2, [r3, #12]
    NMT->emPr                   = emPr;
    ec3c:	68fb      	ldr	r3, [r7, #12]
    ec3e:	681b      	ldr	r3, [r3, #0]
    ec40:	687a      	ldr	r2, [r7, #4]
    ec42:	615a      	str	r2, [r3, #20]
    NMT->ptrState             = NULL;
    ec44:	68fb      	ldr	r3, [r7, #12]
    ec46:	681b      	ldr	r3, [r3, #0]
    ec48:	2200      	movs	r2, #0
    ec4a:	61da      	str	r2, [r3, #28]

    /* configure NMT CAN reception */
   ptrCODriverClass->CAN_Rx_BufferInit(
    ec4c:	4b13      	ldr	r3, [pc, #76]	; (ec9c <_ZN22CO_NMT_Heartbeat_Class8NMT_InitEP8CO_NMT_tP9CO_EMpr_thmP14CO_CANmodule_tmmS5_mm+0xfc>)
    ec4e:	6818      	ldr	r0, [r3, #0]
      
            NMT_rxIdx,          /* rx buffer index */
            CANidRxNMT,         /* CAN identifier */
            0x7FF,              /* mask */
            0,                  /* rtr */
            (void*)NMT,         /* object passed to receive function */
    ec50:	68fb      	ldr	r3, [r7, #12]
    ec52:	681b      	ldr	r3, [r3, #0]
            CO_NMT_receive);    /* this function will process received message */
    ec54:	4a12      	ldr	r2, [pc, #72]	; (eca0 <_ZN22CO_NMT_Heartbeat_Class8NMT_InitEP8CO_NMT_tP9CO_EMpr_thmP14CO_CANmodule_tmmS5_mm+0x100>)
    ec56:	9202      	str	r2, [sp, #8]
    ec58:	9301      	str	r3, [sp, #4]
    ec5a:	2300      	movs	r3, #0
    ec5c:	9300      	str	r3, [sp, #0]
    ec5e:	f240 73ff 	movw	r3, #2047	; 0x7ff
    ec62:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    ec64:	6ab9      	ldr	r1, [r7, #40]	; 0x28
    ec66:	4c0f      	ldr	r4, [pc, #60]	; (eca4 <_ZN22CO_NMT_Heartbeat_Class8NMT_InitEP8CO_NMT_tP9CO_EMpr_thmP14CO_CANmodule_tmmS5_mm+0x104>)
    ec68:	47a0      	blx	r4

    /* configure HB CAN transmission */
    NMT->HB_CANdev = HB_CANdev;
    ec6a:	68fb      	ldr	r3, [r7, #12]
    ec6c:	681b      	ldr	r3, [r3, #0]
    ec6e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    ec70:	619a      	str	r2, [r3, #24]
    NMT->HB_TXbuff =ptrCODriverClass->CAN_Tx_BufferInit(
    ec72:	68fb      	ldr	r3, [r7, #12]
    ec74:	681c      	ldr	r4, [r3, #0]
    ec76:	4b09      	ldr	r3, [pc, #36]	; (ec9c <_ZN22CO_NMT_Heartbeat_Class8NMT_InitEP8CO_NMT_tP9CO_EMpr_thmP14CO_CANmodule_tmmS5_mm+0xfc>)
    ec78:	6818      	ldr	r0, [r3, #0]
    ec7a:	2300      	movs	r3, #0
    ec7c:	9301      	str	r3, [sp, #4]
    ec7e:	2301      	movs	r3, #1
    ec80:	9300      	str	r3, [sp, #0]
    ec82:	2300      	movs	r3, #0
    ec84:	6bba      	ldr	r2, [r7, #56]	; 0x38
    ec86:	6b79      	ldr	r1, [r7, #52]	; 0x34
    ec88:	4d07      	ldr	r5, [pc, #28]	; (eca8 <_ZN22CO_NMT_Heartbeat_Class8NMT_InitEP8CO_NMT_tP9CO_EMpr_thmP14CO_CANmodule_tmmS5_mm+0x108>)
    ec8a:	47a8      	blx	r5
    ec8c:	4603      	mov	r3, r0
    ec8e:	6223      	str	r3, [r4, #32]
            CANidTxHB,          /* CAN identifier */
            0,                  /* rtr */
            1,                  /* number of data bytes */
            0);                 /* synchronous message flag bit */

    return CO_ERROR_NO;
    ec90:	2300      	movs	r3, #0
}
    ec92:	4618      	mov	r0, r3
    ec94:	3710      	adds	r7, #16
    ec96:	46bd      	mov	sp, r7
    ec98:	bdb0      	pop	{r4, r5, r7, pc}
    ec9a:	bf00      	nop
    ec9c:	200019a4 	.word	0x200019a4
    eca0:	0000eac5 	.word	0x0000eac5
    eca4:	0000d7b5 	.word	0x0000d7b5
    eca8:	0000d8b5 	.word	0x0000d8b5

0000ecac <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm>:
        uint32_t                HBtime,
        uint32_t                NMTstartup,
        uint8_t                 errorRegister,
        const uint8_t           errorBehavior[],
        uint32_t               *timerNext_ms)
{
    ecac:	b580      	push	{r7, lr}
    ecae:	b086      	sub	sp, #24
    ecb0:	af00      	add	r7, sp, #0
    ecb2:	60f8      	str	r0, [r7, #12]
    ecb4:	60b9      	str	r1, [r7, #8]
    ecb6:	607a      	str	r2, [r7, #4]
    ecb8:	603b      	str	r3, [r7, #0]
    uint8_t CANpassive;

    uint8_t currentOperatingState = NMT->operatingState;
    ecba:	68fb      	ldr	r3, [r7, #12]
    ecbc:	681b      	ldr	r3, [r3, #0]
    ecbe:	781b      	ldrb	r3, [r3, #0]
    ecc0:	75bb      	strb	r3, [r7, #22]

    NMT->HBproducerTimer += timeDifference_ms;
    ecc2:	68fb      	ldr	r3, [r7, #12]
    ecc4:	681b      	ldr	r3, [r3, #0]
    ecc6:	68fa      	ldr	r2, [r7, #12]
    ecc8:	6812      	ldr	r2, [r2, #0]
    ecca:	68d1      	ldr	r1, [r2, #12]
    eccc:	68ba      	ldr	r2, [r7, #8]
    ecce:	440a      	add	r2, r1
    ecd0:	60da      	str	r2, [r3, #12]

    /* Heartbeat producer message & Bootup message */
    if((HBtime != 0 && NMT->HBproducerTimer >= HBtime) || NMT->operatingState == CO_NMT_INITIALIZING){
    ecd2:	687b      	ldr	r3, [r7, #4]
    ecd4:	2b00      	cmp	r3, #0
    ecd6:	d005      	beq.n	ece4 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x38>
    ecd8:	68fb      	ldr	r3, [r7, #12]
    ecda:	681b      	ldr	r3, [r3, #0]
    ecdc:	68da      	ldr	r2, [r3, #12]
    ecde:	687b      	ldr	r3, [r7, #4]
    ece0:	429a      	cmp	r2, r3
    ece2:	d204      	bcs.n	ecee <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x42>
    ece4:	68fb      	ldr	r3, [r7, #12]
    ece6:	681b      	ldr	r3, [r3, #0]
    ece8:	781b      	ldrb	r3, [r3, #0]
    ecea:	2b00      	cmp	r3, #0
    ecec:	d139      	bne.n	ed62 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0xb6>

        /* Start from the beginning. If OS is slow, time sliding may occur. However, heartbeat is
         * not for synchronization, it is for health report. */
        NMT->HBproducerTimer = 0;
    ecee:	68fb      	ldr	r3, [r7, #12]
    ecf0:	681b      	ldr	r3, [r3, #0]
    ecf2:	2200      	movs	r2, #0
    ecf4:	60da      	str	r2, [r3, #12]

        NMT->HB_TXbuff->data[0] = NMT->operatingState;
    ecf6:	68fb      	ldr	r3, [r7, #12]
    ecf8:	681b      	ldr	r3, [r3, #0]
    ecfa:	6a1b      	ldr	r3, [r3, #32]
    ecfc:	68fa      	ldr	r2, [r7, #12]
    ecfe:	6812      	ldr	r2, [r2, #0]
    ed00:	7812      	ldrb	r2, [r2, #0]
    ed02:	715a      	strb	r2, [r3, #5]
        ptrCODriverClass->CAN_Send(NMT->HB_TXbuff);
    ed04:	4b8d      	ldr	r3, [pc, #564]	; (ef3c <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x290>)
    ed06:	681a      	ldr	r2, [r3, #0]
    ed08:	68fb      	ldr	r3, [r7, #12]
    ed0a:	681b      	ldr	r3, [r3, #0]
    ed0c:	6a1b      	ldr	r3, [r3, #32]
    ed0e:	4619      	mov	r1, r3
    ed10:	4610      	mov	r0, r2
    ed12:	4b8b      	ldr	r3, [pc, #556]	; (ef40 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x294>)
    ed14:	4798      	blx	r3

        if(NMT->operatingState == CO_NMT_INITIALIZING){
    ed16:	68fb      	ldr	r3, [r7, #12]
    ed18:	681b      	ldr	r3, [r3, #0]
    ed1a:	781b      	ldrb	r3, [r3, #0]
    ed1c:	2b00      	cmp	r3, #0
    ed1e:	d120      	bne.n	ed62 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0xb6>
            if(HBtime > NMT->firstHBTime) NMT->HBproducerTimer = HBtime - NMT->firstHBTime;
    ed20:	68fb      	ldr	r3, [r7, #12]
    ed22:	681b      	ldr	r3, [r3, #0]
    ed24:	691a      	ldr	r2, [r3, #16]
    ed26:	687b      	ldr	r3, [r7, #4]
    ed28:	429a      	cmp	r2, r3
    ed2a:	d208      	bcs.n	ed3e <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x92>
    ed2c:	68fb      	ldr	r3, [r7, #12]
    ed2e:	681b      	ldr	r3, [r3, #0]
    ed30:	68fa      	ldr	r2, [r7, #12]
    ed32:	6812      	ldr	r2, [r2, #0]
    ed34:	6912      	ldr	r2, [r2, #16]
    ed36:	6879      	ldr	r1, [r7, #4]
    ed38:	1a8a      	subs	r2, r1, r2
    ed3a:	60da      	str	r2, [r3, #12]
    ed3c:	e003      	b.n	ed46 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x9a>
            else                          NMT->HBproducerTimer = 0;
    ed3e:	68fb      	ldr	r3, [r7, #12]
    ed40:	681b      	ldr	r3, [r3, #0]
    ed42:	2200      	movs	r2, #0
    ed44:	60da      	str	r2, [r3, #12]

            if((NMTstartup & 0x04) == 0) NMT->operatingState = CO_NMT_OPERATIONAL;
    ed46:	683b      	ldr	r3, [r7, #0]
    ed48:	f003 0304 	and.w	r3, r3, #4
    ed4c:	2b00      	cmp	r3, #0
    ed4e:	d104      	bne.n	ed5a <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0xae>
    ed50:	68fb      	ldr	r3, [r7, #12]
    ed52:	681b      	ldr	r3, [r3, #0]
    ed54:	2205      	movs	r2, #5
    ed56:	701a      	strb	r2, [r3, #0]
    ed58:	e003      	b.n	ed62 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0xb6>
            else                         NMT->operatingState = CO_NMT_PRE_OPERATIONAL;
    ed5a:	68fb      	ldr	r3, [r7, #12]
    ed5c:	681b      	ldr	r3, [r3, #0]
    ed5e:	227f      	movs	r2, #127	; 0x7f
    ed60:	701a      	strb	r2, [r3, #0]
        }
    }


    /* Calculate, when next Heartbeat needs to be send and lower timerNext_ms if necessary. */
    if(HBtime != 0 && timerNext_ms != NULL){
    ed62:	687b      	ldr	r3, [r7, #4]
    ed64:	2b00      	cmp	r3, #0
    ed66:	d01a      	beq.n	ed9e <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0xf2>
    ed68:	6abb      	ldr	r3, [r7, #40]	; 0x28
    ed6a:	2b00      	cmp	r3, #0
    ed6c:	d017      	beq.n	ed9e <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0xf2>
        if(NMT->HBproducerTimer < HBtime){
    ed6e:	68fb      	ldr	r3, [r7, #12]
    ed70:	681b      	ldr	r3, [r3, #0]
    ed72:	68da      	ldr	r2, [r3, #12]
    ed74:	687b      	ldr	r3, [r7, #4]
    ed76:	429a      	cmp	r2, r3
    ed78:	d20e      	bcs.n	ed98 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0xec>
            uint32_t diff = HBtime - NMT->HBproducerTimer;
    ed7a:	68fb      	ldr	r3, [r7, #12]
    ed7c:	681b      	ldr	r3, [r3, #0]
    ed7e:	68db      	ldr	r3, [r3, #12]
    ed80:	687a      	ldr	r2, [r7, #4]
    ed82:	1ad3      	subs	r3, r2, r3
    ed84:	613b      	str	r3, [r7, #16]
            if(*timerNext_ms > diff){
    ed86:	6abb      	ldr	r3, [r7, #40]	; 0x28
    ed88:	681a      	ldr	r2, [r3, #0]
    ed8a:	693b      	ldr	r3, [r7, #16]
    ed8c:	429a      	cmp	r2, r3
    ed8e:	d906      	bls.n	ed9e <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0xf2>
                *timerNext_ms = diff;
    ed90:	6abb      	ldr	r3, [r7, #40]	; 0x28
    ed92:	693a      	ldr	r2, [r7, #16]
    ed94:	601a      	str	r2, [r3, #0]
    ed96:	e002      	b.n	ed9e <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0xf2>
            }
        }else{
            *timerNext_ms = 0;
    ed98:	6abb      	ldr	r3, [r7, #40]	; 0x28
    ed9a:	2200      	movs	r2, #0
    ed9c:	601a      	str	r2, [r3, #0]
        }
    }


    /* CAN passive flag */
    CANpassive = 0;
    ed9e:	2300      	movs	r3, #0
    eda0:	75fb      	strb	r3, [r7, #23]
    if(ptrCODriverClass->EM_IsError(NMT->emPr->em, CO_EM_CAN_TX_BUS_PASSIVE) || ptrCODriverClass->EM_IsError(NMT->emPr->em, CO_EM_CAN_RX_BUS_PASSIVE))
    eda2:	4b66      	ldr	r3, [pc, #408]	; (ef3c <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x290>)
    eda4:	681b      	ldr	r3, [r3, #0]
    eda6:	1d18      	adds	r0, r3, #4
    eda8:	68fb      	ldr	r3, [r7, #12]
    edaa:	681b      	ldr	r3, [r3, #0]
    edac:	695b      	ldr	r3, [r3, #20]
    edae:	691b      	ldr	r3, [r3, #16]
    edb0:	2207      	movs	r2, #7
    edb2:	4619      	mov	r1, r3
    edb4:	4b63      	ldr	r3, [pc, #396]	; (ef44 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x298>)
    edb6:	4798      	blx	r3
    edb8:	4603      	mov	r3, r0
    edba:	2b00      	cmp	r3, #0
    edbc:	d10d      	bne.n	edda <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x12e>
    edbe:	4b5f      	ldr	r3, [pc, #380]	; (ef3c <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x290>)
    edc0:	681b      	ldr	r3, [r3, #0]
    edc2:	1d18      	adds	r0, r3, #4
    edc4:	68fb      	ldr	r3, [r7, #12]
    edc6:	681b      	ldr	r3, [r3, #0]
    edc8:	695b      	ldr	r3, [r3, #20]
    edca:	691b      	ldr	r3, [r3, #16]
    edcc:	2206      	movs	r2, #6
    edce:	4619      	mov	r1, r3
    edd0:	4b5c      	ldr	r3, [pc, #368]	; (ef44 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x298>)
    edd2:	4798      	blx	r3
    edd4:	4603      	mov	r3, r0
    edd6:	2b00      	cmp	r3, #0
    edd8:	d001      	beq.n	edde <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x132>
    edda:	2301      	movs	r3, #1
    eddc:	e000      	b.n	ede0 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x134>
    edde:	2300      	movs	r3, #0
    ede0:	2b00      	cmp	r3, #0
    ede2:	d001      	beq.n	ede8 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x13c>
        CANpassive = 1;
    ede4:	2301      	movs	r3, #1
    ede6:	75fb      	strb	r3, [r7, #23]


    /* CANopen green RUN LED (DR 303-3) */
    switch(NMT->operatingState){
    ede8:	68fb      	ldr	r3, [r7, #12]
    edea:	681b      	ldr	r3, [r3, #0]
    edec:	781b      	ldrb	r3, [r3, #0]
    edee:	2b05      	cmp	r3, #5
    edf0:	d013      	beq.n	ee1a <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x16e>
    edf2:	2b7f      	cmp	r3, #127	; 0x7f
    edf4:	d009      	beq.n	ee0a <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x15e>
    edf6:	2b04      	cmp	r3, #4
    edf8:	d114      	bne.n	ee24 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x178>
        case CO_NMT_STOPPED:          NMT->LEDgreenRun = NMT->LEDsingleFlash;   break;
    edfa:	68fb      	ldr	r3, [r7, #12]
    edfc:	681b      	ldr	r3, [r3, #0]
    edfe:	68fa      	ldr	r2, [r7, #12]
    ee00:	6812      	ldr	r2, [r2, #0]
    ee02:	f992 2003 	ldrsb.w	r2, [r2, #3]
    ee06:	71da      	strb	r2, [r3, #7]
    ee08:	e00c      	b.n	ee24 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x178>
        case CO_NMT_PRE_OPERATIONAL:  NMT->LEDgreenRun = NMT->LEDblinking;      break;
    ee0a:	68fb      	ldr	r3, [r7, #12]
    ee0c:	681b      	ldr	r3, [r3, #0]
    ee0e:	68fa      	ldr	r2, [r7, #12]
    ee10:	6812      	ldr	r2, [r2, #0]
    ee12:	f992 2002 	ldrsb.w	r2, [r2, #2]
    ee16:	71da      	strb	r2, [r3, #7]
    ee18:	e004      	b.n	ee24 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x178>
        case CO_NMT_OPERATIONAL:      NMT->LEDgreenRun = 1;                     break;
    ee1a:	68fb      	ldr	r3, [r7, #12]
    ee1c:	681b      	ldr	r3, [r3, #0]
    ee1e:	2201      	movs	r2, #1
    ee20:	71da      	strb	r2, [r3, #7]
    ee22:	bf00      	nop
    }


    /* CANopen red ERROR LED (DR 303-3) */
    if(ptrCODriverClass->EM_IsError(NMT->emPr->em, CO_EM_CAN_TX_BUS_OFF))
    ee24:	4b45      	ldr	r3, [pc, #276]	; (ef3c <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x290>)
    ee26:	681b      	ldr	r3, [r3, #0]
    ee28:	1d18      	adds	r0, r3, #4
    ee2a:	68fb      	ldr	r3, [r7, #12]
    ee2c:	681b      	ldr	r3, [r3, #0]
    ee2e:	695b      	ldr	r3, [r3, #20]
    ee30:	691b      	ldr	r3, [r3, #16]
    ee32:	2212      	movs	r2, #18
    ee34:	4619      	mov	r1, r3
    ee36:	4b43      	ldr	r3, [pc, #268]	; (ef44 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x298>)
    ee38:	4798      	blx	r3
    ee3a:	4603      	mov	r3, r0
    ee3c:	2b00      	cmp	r3, #0
    ee3e:	bf14      	ite	ne
    ee40:	2301      	movne	r3, #1
    ee42:	2300      	moveq	r3, #0
    ee44:	b2db      	uxtb	r3, r3
    ee46:	2b00      	cmp	r3, #0
    ee48:	d004      	beq.n	ee54 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x1a8>
        NMT->LEDredError = 1;
    ee4a:	68fb      	ldr	r3, [r7, #12]
    ee4c:	681b      	ldr	r3, [r3, #0]
    ee4e:	2201      	movs	r2, #1
    ee50:	721a      	strb	r2, [r3, #8]
    ee52:	e07d      	b.n	ef50 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x2a4>

    else if(ptrCODriverClass->EM_IsError(NMT->emPr->em, CO_EM_SYNC_TIME_OUT))
    ee54:	4b39      	ldr	r3, [pc, #228]	; (ef3c <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x290>)
    ee56:	681b      	ldr	r3, [r3, #0]
    ee58:	1d18      	adds	r0, r3, #4
    ee5a:	68fb      	ldr	r3, [r7, #12]
    ee5c:	681b      	ldr	r3, [r3, #0]
    ee5e:	695b      	ldr	r3, [r3, #20]
    ee60:	691b      	ldr	r3, [r3, #16]
    ee62:	2218      	movs	r2, #24
    ee64:	4619      	mov	r1, r3
    ee66:	4b37      	ldr	r3, [pc, #220]	; (ef44 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x298>)
    ee68:	4798      	blx	r3
    ee6a:	4603      	mov	r3, r0
    ee6c:	2b00      	cmp	r3, #0
    ee6e:	bf14      	ite	ne
    ee70:	2301      	movne	r3, #1
    ee72:	2300      	moveq	r3, #0
    ee74:	b2db      	uxtb	r3, r3
    ee76:	2b00      	cmp	r3, #0
    ee78:	d007      	beq.n	ee8a <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x1de>
        NMT->LEDredError = NMT->LEDtripleFlash;
    ee7a:	68fb      	ldr	r3, [r7, #12]
    ee7c:	681b      	ldr	r3, [r3, #0]
    ee7e:	68fa      	ldr	r2, [r7, #12]
    ee80:	6812      	ldr	r2, [r2, #0]
    ee82:	f992 2005 	ldrsb.w	r2, [r2, #5]
    ee86:	721a      	strb	r2, [r3, #8]
    ee88:	e062      	b.n	ef50 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x2a4>

    else if(ptrCODriverClass->EM_IsError(NMT->emPr->em, CO_EM_HEARTBEAT_CONSUMER) || ptrCODriverClass->EM_IsError(NMT->emPr->em, CO_EM_HB_CONSUMER_REMOTE_RESET))
    ee8a:	4b2c      	ldr	r3, [pc, #176]	; (ef3c <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x290>)
    ee8c:	681b      	ldr	r3, [r3, #0]
    ee8e:	1d18      	adds	r0, r3, #4
    ee90:	68fb      	ldr	r3, [r7, #12]
    ee92:	681b      	ldr	r3, [r3, #0]
    ee94:	695b      	ldr	r3, [r3, #20]
    ee96:	691b      	ldr	r3, [r3, #16]
    ee98:	221b      	movs	r2, #27
    ee9a:	4619      	mov	r1, r3
    ee9c:	4b29      	ldr	r3, [pc, #164]	; (ef44 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x298>)
    ee9e:	4798      	blx	r3
    eea0:	4603      	mov	r3, r0
    eea2:	2b00      	cmp	r3, #0
    eea4:	d10d      	bne.n	eec2 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x216>
    eea6:	4b25      	ldr	r3, [pc, #148]	; (ef3c <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x290>)
    eea8:	681b      	ldr	r3, [r3, #0]
    eeaa:	1d18      	adds	r0, r3, #4
    eeac:	68fb      	ldr	r3, [r7, #12]
    eeae:	681b      	ldr	r3, [r3, #0]
    eeb0:	695b      	ldr	r3, [r3, #20]
    eeb2:	691b      	ldr	r3, [r3, #16]
    eeb4:	221c      	movs	r2, #28
    eeb6:	4619      	mov	r1, r3
    eeb8:	4b22      	ldr	r3, [pc, #136]	; (ef44 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x298>)
    eeba:	4798      	blx	r3
    eebc:	4603      	mov	r3, r0
    eebe:	2b00      	cmp	r3, #0
    eec0:	d001      	beq.n	eec6 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x21a>
    eec2:	2301      	movs	r3, #1
    eec4:	e000      	b.n	eec8 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x21c>
    eec6:	2300      	movs	r3, #0
    eec8:	2b00      	cmp	r3, #0
    eeca:	d007      	beq.n	eedc <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x230>
        NMT->LEDredError = NMT->LEDdoubleFlash;
    eecc:	68fb      	ldr	r3, [r7, #12]
    eece:	681b      	ldr	r3, [r3, #0]
    eed0:	68fa      	ldr	r2, [r7, #12]
    eed2:	6812      	ldr	r2, [r2, #0]
    eed4:	f992 2004 	ldrsb.w	r2, [r2, #4]
    eed8:	721a      	strb	r2, [r3, #8]
    eeda:	e039      	b.n	ef50 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x2a4>

    else if(CANpassive ||  ptrCODriverClass->EM_IsError(NMT->emPr->em, CO_EM_CAN_BUS_WARNING))
    eedc:	7dfb      	ldrb	r3, [r7, #23]
    eede:	2b00      	cmp	r3, #0
    eee0:	d10d      	bne.n	eefe <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x252>
    eee2:	4b16      	ldr	r3, [pc, #88]	; (ef3c <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x290>)
    eee4:	681b      	ldr	r3, [r3, #0]
    eee6:	1d18      	adds	r0, r3, #4
    eee8:	68fb      	ldr	r3, [r7, #12]
    eeea:	681b      	ldr	r3, [r3, #0]
    eeec:	695b      	ldr	r3, [r3, #20]
    eeee:	691b      	ldr	r3, [r3, #16]
    eef0:	2201      	movs	r2, #1
    eef2:	4619      	mov	r1, r3
    eef4:	4b13      	ldr	r3, [pc, #76]	; (ef44 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x298>)
    eef6:	4798      	blx	r3
    eef8:	4603      	mov	r3, r0
    eefa:	2b00      	cmp	r3, #0
    eefc:	d001      	beq.n	ef02 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x256>
    eefe:	2301      	movs	r3, #1
    ef00:	e000      	b.n	ef04 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x258>
    ef02:	2300      	movs	r3, #0
    ef04:	2b00      	cmp	r3, #0
    ef06:	d007      	beq.n	ef18 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x26c>
        NMT->LEDredError = NMT->LEDsingleFlash;
    ef08:	68fb      	ldr	r3, [r7, #12]
    ef0a:	681b      	ldr	r3, [r3, #0]
    ef0c:	68fa      	ldr	r2, [r7, #12]
    ef0e:	6812      	ldr	r2, [r2, #0]
    ef10:	f992 2003 	ldrsb.w	r2, [r2, #3]
    ef14:	721a      	strb	r2, [r3, #8]
    ef16:	e01b      	b.n	ef50 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x2a4>

    else if(errorRegister)
    ef18:	f897 3020 	ldrb.w	r3, [r7, #32]
    ef1c:	2b00      	cmp	r3, #0
    ef1e:	d013      	beq.n	ef48 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x29c>
        NMT->LEDredError = (NMT->LEDblinking>=0)?-1:1;
    ef20:	68fb      	ldr	r3, [r7, #12]
    ef22:	681b      	ldr	r3, [r3, #0]
    ef24:	68fa      	ldr	r2, [r7, #12]
    ef26:	6812      	ldr	r2, [r2, #0]
    ef28:	f992 2002 	ldrsb.w	r2, [r2, #2]
    ef2c:	2a00      	cmp	r2, #0
    ef2e:	db02      	blt.n	ef36 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x28a>
    ef30:	f04f 32ff 	mov.w	r2, #4294967295
    ef34:	e000      	b.n	ef38 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x28c>
    ef36:	2201      	movs	r2, #1
    ef38:	721a      	strb	r2, [r3, #8]
    ef3a:	e009      	b.n	ef50 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x2a4>
    ef3c:	200019a4 	.word	0x200019a4
    ef40:	0000d961 	.word	0x0000d961
    ef44:	0000e695 	.word	0x0000e695

    else
        NMT->LEDredError = -1;
    ef48:	68fb      	ldr	r3, [r7, #12]
    ef4a:	681b      	ldr	r3, [r3, #0]
    ef4c:	22ff      	movs	r2, #255	; 0xff
    ef4e:	721a      	strb	r2, [r3, #8]


    /* in case of error enter pre-operational state */
    if(errorBehavior && (NMT->operatingState == CO_NMT_OPERATIONAL)){
    ef50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    ef52:	2b00      	cmp	r3, #0
    ef54:	f000 80ca 	beq.w	f0ec <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x440>
    ef58:	68fb      	ldr	r3, [r7, #12]
    ef5a:	681b      	ldr	r3, [r3, #0]
    ef5c:	781b      	ldrb	r3, [r3, #0]
    ef5e:	2b05      	cmp	r3, #5
    ef60:	f040 80c4 	bne.w	f0ec <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x440>
        if(CANpassive && (errorBehavior[2] == 0 || errorBehavior[2] == 2)) errorRegister |= 0x10;
    ef64:	7dfb      	ldrb	r3, [r7, #23]
    ef66:	2b00      	cmp	r3, #0
    ef68:	d00f      	beq.n	ef8a <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x2de>
    ef6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    ef6c:	3302      	adds	r3, #2
    ef6e:	781b      	ldrb	r3, [r3, #0]
    ef70:	2b00      	cmp	r3, #0
    ef72:	d004      	beq.n	ef7e <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x2d2>
    ef74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    ef76:	3302      	adds	r3, #2
    ef78:	781b      	ldrb	r3, [r3, #0]
    ef7a:	2b02      	cmp	r3, #2
    ef7c:	d105      	bne.n	ef8a <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x2de>
    ef7e:	f897 3020 	ldrb.w	r3, [r7, #32]
    ef82:	f043 0310 	orr.w	r3, r3, #16
    ef86:	f887 3020 	strb.w	r3, [r7, #32]

        if(errorRegister){
    ef8a:	f897 3020 	ldrb.w	r3, [r7, #32]
    ef8e:	2b00      	cmp	r3, #0
    ef90:	f000 80ac 	beq.w	f0ec <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x440>
            /* Communication error */
            if(errorRegister & CO_ERR_REG_COMM_ERR){
    ef94:	f897 3020 	ldrb.w	r3, [r7, #32]
    ef98:	f003 0310 	and.w	r3, r3, #16
    ef9c:	2b00      	cmp	r3, #0
    ef9e:	d053      	beq.n	f048 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x39c>
                if(errorBehavior[1] == 0){
    efa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    efa2:	3301      	adds	r3, #1
    efa4:	781b      	ldrb	r3, [r3, #0]
    efa6:	2b00      	cmp	r3, #0
    efa8:	d104      	bne.n	efb4 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x308>
                    NMT->operatingState = CO_NMT_PRE_OPERATIONAL;
    efaa:	68fb      	ldr	r3, [r7, #12]
    efac:	681b      	ldr	r3, [r3, #0]
    efae:	227f      	movs	r2, #127	; 0x7f
    efb0:	701a      	strb	r2, [r3, #0]
    efb2:	e049      	b.n	f048 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x39c>
                }
                else if(errorBehavior[1] == 2){
    efb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    efb6:	3301      	adds	r3, #1
    efb8:	781b      	ldrb	r3, [r3, #0]
    efba:	2b02      	cmp	r3, #2
    efbc:	d104      	bne.n	efc8 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x31c>
                    NMT->operatingState = CO_NMT_STOPPED;
    efbe:	68fb      	ldr	r3, [r7, #12]
    efc0:	681b      	ldr	r3, [r3, #0]
    efc2:	2204      	movs	r2, #4
    efc4:	701a      	strb	r2, [r3, #0]
    efc6:	e03f      	b.n	f048 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x39c>
                }
                else if( ptrCODriverClass->EM_IsError(NMT->emPr->em, CO_EM_CAN_TX_BUS_OFF)
    efc8:	4b55      	ldr	r3, [pc, #340]	; (f120 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x474>)
    efca:	681b      	ldr	r3, [r3, #0]
    efcc:	1d18      	adds	r0, r3, #4
    efce:	68fb      	ldr	r3, [r7, #12]
    efd0:	681b      	ldr	r3, [r3, #0]
    efd2:	695b      	ldr	r3, [r3, #20]
    efd4:	691b      	ldr	r3, [r3, #16]
    efd6:	2212      	movs	r2, #18
    efd8:	4619      	mov	r1, r3
    efda:	4b52      	ldr	r3, [pc, #328]	; (f124 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x478>)
    efdc:	4798      	blx	r3
    efde:	4603      	mov	r3, r0
                     ||  ptrCODriverClass->EM_IsError(NMT->emPr->em, CO_EM_HEARTBEAT_CONSUMER)
                     ||  ptrCODriverClass->EM_IsError(NMT->emPr->em, CO_EM_HB_CONSUMER_REMOTE_RESET))
    efe0:	2b00      	cmp	r3, #0
    efe2:	d11b      	bne.n	f01c <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x370>
                     ||  ptrCODriverClass->EM_IsError(NMT->emPr->em, CO_EM_HEARTBEAT_CONSUMER)
    efe4:	4b4e      	ldr	r3, [pc, #312]	; (f120 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x474>)
    efe6:	681b      	ldr	r3, [r3, #0]
    efe8:	1d18      	adds	r0, r3, #4
    efea:	68fb      	ldr	r3, [r7, #12]
    efec:	681b      	ldr	r3, [r3, #0]
    efee:	695b      	ldr	r3, [r3, #20]
    eff0:	691b      	ldr	r3, [r3, #16]
    eff2:	221b      	movs	r2, #27
    eff4:	4619      	mov	r1, r3
    eff6:	4b4b      	ldr	r3, [pc, #300]	; (f124 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x478>)
    eff8:	4798      	blx	r3
    effa:	4603      	mov	r3, r0
    effc:	2b00      	cmp	r3, #0
    effe:	d10d      	bne.n	f01c <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x370>
                     ||  ptrCODriverClass->EM_IsError(NMT->emPr->em, CO_EM_HB_CONSUMER_REMOTE_RESET))
    f000:	4b47      	ldr	r3, [pc, #284]	; (f120 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x474>)
    f002:	681b      	ldr	r3, [r3, #0]
    f004:	1d18      	adds	r0, r3, #4
    f006:	68fb      	ldr	r3, [r7, #12]
    f008:	681b      	ldr	r3, [r3, #0]
    f00a:	695b      	ldr	r3, [r3, #20]
    f00c:	691b      	ldr	r3, [r3, #16]
    f00e:	221c      	movs	r2, #28
    f010:	4619      	mov	r1, r3
    f012:	4b44      	ldr	r3, [pc, #272]	; (f124 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x478>)
    f014:	4798      	blx	r3
    f016:	4603      	mov	r3, r0
    f018:	2b00      	cmp	r3, #0
    f01a:	d001      	beq.n	f020 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x374>
    f01c:	2301      	movs	r3, #1
    f01e:	e000      	b.n	f022 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x376>
    f020:	2300      	movs	r3, #0
                else if( ptrCODriverClass->EM_IsError(NMT->emPr->em, CO_EM_CAN_TX_BUS_OFF)
    f022:	2b00      	cmp	r3, #0
    f024:	d010      	beq.n	f048 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x39c>
                {
                    if(errorBehavior[0] == 0){
    f026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    f028:	781b      	ldrb	r3, [r3, #0]
    f02a:	2b00      	cmp	r3, #0
    f02c:	d104      	bne.n	f038 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x38c>
                        NMT->operatingState = CO_NMT_PRE_OPERATIONAL;
    f02e:	68fb      	ldr	r3, [r7, #12]
    f030:	681b      	ldr	r3, [r3, #0]
    f032:	227f      	movs	r2, #127	; 0x7f
    f034:	701a      	strb	r2, [r3, #0]
    f036:	e007      	b.n	f048 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x39c>
                    }
                    else if(errorBehavior[0] == 2){
    f038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    f03a:	781b      	ldrb	r3, [r3, #0]
    f03c:	2b02      	cmp	r3, #2
    f03e:	d103      	bne.n	f048 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x39c>
                        NMT->operatingState = CO_NMT_STOPPED;
    f040:	68fb      	ldr	r3, [r7, #12]
    f042:	681b      	ldr	r3, [r3, #0]
    f044:	2204      	movs	r2, #4
    f046:	701a      	strb	r2, [r3, #0]
                    }
                }
            }

            /* Generic error */
            if(errorRegister & CO_ERR_REG_GENERIC_ERR){
    f048:	f897 3020 	ldrb.w	r3, [r7, #32]
    f04c:	f003 0301 	and.w	r3, r3, #1
    f050:	2b00      	cmp	r3, #0
    f052:	d012      	beq.n	f07a <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x3ce>
                if      (errorBehavior[3] == 0) NMT->operatingState = CO_NMT_PRE_OPERATIONAL;
    f054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    f056:	3303      	adds	r3, #3
    f058:	781b      	ldrb	r3, [r3, #0]
    f05a:	2b00      	cmp	r3, #0
    f05c:	d104      	bne.n	f068 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x3bc>
    f05e:	68fb      	ldr	r3, [r7, #12]
    f060:	681b      	ldr	r3, [r3, #0]
    f062:	227f      	movs	r2, #127	; 0x7f
    f064:	701a      	strb	r2, [r3, #0]
    f066:	e008      	b.n	f07a <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x3ce>
                else if (errorBehavior[3] == 2) NMT->operatingState = CO_NMT_STOPPED;
    f068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    f06a:	3303      	adds	r3, #3
    f06c:	781b      	ldrb	r3, [r3, #0]
    f06e:	2b02      	cmp	r3, #2
    f070:	d103      	bne.n	f07a <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x3ce>
    f072:	68fb      	ldr	r3, [r7, #12]
    f074:	681b      	ldr	r3, [r3, #0]
    f076:	2204      	movs	r2, #4
    f078:	701a      	strb	r2, [r3, #0]
            }

            /* Device profile error */
            if(errorRegister & CO_ERR_REG_DEV_PROFILE){
    f07a:	f897 3020 	ldrb.w	r3, [r7, #32]
    f07e:	f003 0320 	and.w	r3, r3, #32
    f082:	2b00      	cmp	r3, #0
    f084:	d012      	beq.n	f0ac <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x400>
                if      (errorBehavior[4] == 0) NMT->operatingState = CO_NMT_PRE_OPERATIONAL;
    f086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    f088:	3304      	adds	r3, #4
    f08a:	781b      	ldrb	r3, [r3, #0]
    f08c:	2b00      	cmp	r3, #0
    f08e:	d104      	bne.n	f09a <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x3ee>
    f090:	68fb      	ldr	r3, [r7, #12]
    f092:	681b      	ldr	r3, [r3, #0]
    f094:	227f      	movs	r2, #127	; 0x7f
    f096:	701a      	strb	r2, [r3, #0]
    f098:	e008      	b.n	f0ac <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x400>
                else if (errorBehavior[4] == 2) NMT->operatingState = CO_NMT_STOPPED;
    f09a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    f09c:	3304      	adds	r3, #4
    f09e:	781b      	ldrb	r3, [r3, #0]
    f0a0:	2b02      	cmp	r3, #2
    f0a2:	d103      	bne.n	f0ac <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x400>
    f0a4:	68fb      	ldr	r3, [r7, #12]
    f0a6:	681b      	ldr	r3, [r3, #0]
    f0a8:	2204      	movs	r2, #4
    f0aa:	701a      	strb	r2, [r3, #0]
            }

            /* Manufacturer specific error */
            if(errorRegister & CO_ERR_REG_MANUFACTURER){
    f0ac:	f997 3020 	ldrsb.w	r3, [r7, #32]
    f0b0:	2b00      	cmp	r3, #0
    f0b2:	da12      	bge.n	f0da <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x42e>
                if      (errorBehavior[5] == 0) NMT->operatingState = CO_NMT_PRE_OPERATIONAL;
    f0b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    f0b6:	3305      	adds	r3, #5
    f0b8:	781b      	ldrb	r3, [r3, #0]
    f0ba:	2b00      	cmp	r3, #0
    f0bc:	d104      	bne.n	f0c8 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x41c>
    f0be:	68fb      	ldr	r3, [r7, #12]
    f0c0:	681b      	ldr	r3, [r3, #0]
    f0c2:	227f      	movs	r2, #127	; 0x7f
    f0c4:	701a      	strb	r2, [r3, #0]
    f0c6:	e008      	b.n	f0da <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x42e>
                else if (errorBehavior[5] == 2) NMT->operatingState = CO_NMT_STOPPED;
    f0c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    f0ca:	3305      	adds	r3, #5
    f0cc:	781b      	ldrb	r3, [r3, #0]
    f0ce:	2b02      	cmp	r3, #2
    f0d0:	d103      	bne.n	f0da <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x42e>
    f0d2:	68fb      	ldr	r3, [r7, #12]
    f0d4:	681b      	ldr	r3, [r3, #0]
    f0d6:	2204      	movs	r2, #4
    f0d8:	701a      	strb	r2, [r3, #0]
            }

            /* if operational state is lost, send HB immediately. */
            if(NMT->operatingState != CO_NMT_OPERATIONAL)
    f0da:	68fb      	ldr	r3, [r7, #12]
    f0dc:	681b      	ldr	r3, [r3, #0]
    f0de:	781b      	ldrb	r3, [r3, #0]
    f0e0:	2b05      	cmp	r3, #5
    f0e2:	d003      	beq.n	f0ec <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x440>
                NMT->HBproducerTimer = HBtime;
    f0e4:	68fb      	ldr	r3, [r7, #12]
    f0e6:	681b      	ldr	r3, [r3, #0]
    f0e8:	687a      	ldr	r2, [r7, #4]
    f0ea:	60da      	str	r2, [r3, #12]
        }
    }

    if(NMT->ptrState!=NULL && currentOperatingState!=NMT->operatingState){
    f0ec:	68fb      	ldr	r3, [r7, #12]
    f0ee:	681b      	ldr	r3, [r3, #0]
    f0f0:	69db      	ldr	r3, [r3, #28]
    f0f2:	2b00      	cmp	r3, #0
    f0f4:	d00d      	beq.n	f112 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x466>
    f0f6:	68fb      	ldr	r3, [r7, #12]
    f0f8:	681b      	ldr	r3, [r3, #0]
    f0fa:	781b      	ldrb	r3, [r3, #0]
    f0fc:	7dba      	ldrb	r2, [r7, #22]
    f0fe:	429a      	cmp	r2, r3
    f100:	d007      	beq.n	f112 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x466>
        NMT->ptrState((CO_NMT_internalState_t)NMT->operatingState);
    f102:	68fb      	ldr	r3, [r7, #12]
    f104:	681b      	ldr	r3, [r3, #0]
    f106:	69db      	ldr	r3, [r3, #28]
    f108:	68fa      	ldr	r2, [r7, #12]
    f10a:	6812      	ldr	r2, [r2, #0]
    f10c:	7812      	ldrb	r2, [r2, #0]
    f10e:	4610      	mov	r0, r2
    f110:	4798      	blx	r3
    }

    return (CO_NMT_reset_cmd_t)NMT->resetCommand;
    f112:	68fb      	ldr	r3, [r7, #12]
    f114:	681b      	ldr	r3, [r3, #0]
    f116:	7a5b      	ldrb	r3, [r3, #9]
}
    f118:	4618      	mov	r0, r3
    f11a:	3718      	adds	r7, #24
    f11c:	46bd      	mov	sp, r7
    f11e:	bd80      	pop	{r7, pc}
    f120:	200019a4 	.word	0x200019a4
    f124:	0000e695 	.word	0x0000e695

0000f128 <_ZN12CO_PDO_ClassC1Ev>:


#include "CO_PDO_Class.h"
#include "CO_Driver_Class.h"
// default constructor
CO_PDO_Class::CO_PDO_Class()
    f128:	b480      	push	{r7}
    f12a:	b083      	sub	sp, #12
    f12c:	af00      	add	r7, sp, #0
    f12e:	6078      	str	r0, [r7, #4]
{
} //CO_PDO_Class
    f130:	687b      	ldr	r3, [r7, #4]
    f132:	4618      	mov	r0, r3
    f134:	370c      	adds	r7, #12
    f136:	46bd      	mov	sp, r7
    f138:	bc80      	pop	{r7}
    f13a:	4770      	bx	lr

0000f13c <_ZN12CO_PDO_ClassD1Ev>:

// default destructor
CO_PDO_Class::~CO_PDO_Class()
    f13c:	b480      	push	{r7}
    f13e:	b083      	sub	sp, #12
    f140:	af00      	add	r7, sp, #0
    f142:	6078      	str	r0, [r7, #4]
{
} //~CO_PDO_Class
    f144:	687b      	ldr	r3, [r7, #4]
    f146:	4618      	mov	r0, r3
    f148:	370c      	adds	r7, #12
    f14a:	46bd      	mov	sp, r7
    f14c:	bc80      	pop	{r7}
    f14e:	4770      	bx	lr

0000f150 <_ZL14CO_PDO_receivePvPK13CO_CANrxMsg_t>:
 * message with correct identifier will be received. For more information and
 * description of parameters see file CO_driver.h.
 * If new message arrives and previous message wasn't processed yet, then
 * previous message will be lost and overwritten by new message. That's OK with PDOs.
 */
static void CO_PDO_receive(void *object, const CO_CANrxMsg_t *msg){
    f150:	b480      	push	{r7}
    f152:	b085      	sub	sp, #20
    f154:	af00      	add	r7, sp, #0
    f156:	6078      	str	r0, [r7, #4]
    f158:	6039      	str	r1, [r7, #0]
    CO_RPDO_t *RPDO;

    RPDO = (CO_RPDO_t*)object;   /* this is the correct pointer type of the first argument */
    f15a:	687b      	ldr	r3, [r7, #4]
    f15c:	60fb      	str	r3, [r7, #12]

    if( (RPDO->valid) &&
    f15e:	68fb      	ldr	r3, [r7, #12]
    f160:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
    f164:	2b00      	cmp	r3, #0
    f166:	d070      	beq.n	f24a <_ZL14CO_PDO_receivePvPK13CO_CANrxMsg_t+0xfa>
        (*RPDO->operatingState == CO_NMT_OPERATIONAL) &&
    f168:	68fb      	ldr	r3, [r7, #12]
    f16a:	695b      	ldr	r3, [r3, #20]
    f16c:	781b      	ldrb	r3, [r3, #0]
    if( (RPDO->valid) &&
    f16e:	2b05      	cmp	r3, #5
    f170:	d16b      	bne.n	f24a <_ZL14CO_PDO_receivePvPK13CO_CANrxMsg_t+0xfa>
        (msg->DLC >= RPDO->dataLength))
    f172:	683b      	ldr	r3, [r7, #0]
    f174:	7d1b      	ldrb	r3, [r3, #20]
    f176:	461a      	mov	r2, r3
    f178:	68fb      	ldr	r3, [r7, #12]
    f17a:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
        (*RPDO->operatingState == CO_NMT_OPERATIONAL) &&
    f17e:	429a      	cmp	r2, r3
    f180:	db63      	blt.n	f24a <_ZL14CO_PDO_receivePvPK13CO_CANrxMsg_t+0xfa>
    {
        if(RPDO->synchronous && RPDO->SYNC->CANrxToggle) {
    f182:	68fb      	ldr	r3, [r7, #12]
    f184:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
    f188:	2b00      	cmp	r3, #0
    f18a:	d032      	beq.n	f1f2 <_ZL14CO_PDO_receivePvPK13CO_CANrxMsg_t+0xa2>
    f18c:	68fb      	ldr	r3, [r7, #12]
    f18e:	689b      	ldr	r3, [r3, #8]
    f190:	7edb      	ldrb	r3, [r3, #27]
    f192:	2b00      	cmp	r3, #0
    f194:	d02d      	beq.n	f1f2 <_ZL14CO_PDO_receivePvPK13CO_CANrxMsg_t+0xa2>
            /* copy data into second buffer and set 'new message' flag */
            RPDO->CANrxData[1][0] = msg->data[0];
    f196:	683b      	ldr	r3, [r7, #0]
    f198:	7d5a      	ldrb	r2, [r3, #21]
    f19a:	68fb      	ldr	r3, [r7, #12]
    f19c:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
            RPDO->CANrxData[1][1] = msg->data[1];
    f1a0:	683b      	ldr	r3, [r7, #0]
    f1a2:	7d9a      	ldrb	r2, [r3, #22]
    f1a4:	68fb      	ldr	r3, [r7, #12]
    f1a6:	f883 204f 	strb.w	r2, [r3, #79]	; 0x4f
            RPDO->CANrxData[1][2] = msg->data[2];
    f1aa:	683b      	ldr	r3, [r7, #0]
    f1ac:	7dda      	ldrb	r2, [r3, #23]
    f1ae:	68fb      	ldr	r3, [r7, #12]
    f1b0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            RPDO->CANrxData[1][3] = msg->data[3];
    f1b4:	683b      	ldr	r3, [r7, #0]
    f1b6:	7e1a      	ldrb	r2, [r3, #24]
    f1b8:	68fb      	ldr	r3, [r7, #12]
    f1ba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
            RPDO->CANrxData[1][4] = msg->data[4];
    f1be:	683b      	ldr	r3, [r7, #0]
    f1c0:	7e5a      	ldrb	r2, [r3, #25]
    f1c2:	68fb      	ldr	r3, [r7, #12]
    f1c4:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
            RPDO->CANrxData[1][5] = msg->data[5];
    f1c8:	683b      	ldr	r3, [r7, #0]
    f1ca:	7e9a      	ldrb	r2, [r3, #26]
    f1cc:	68fb      	ldr	r3, [r7, #12]
    f1ce:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            RPDO->CANrxData[1][6] = msg->data[6];
    f1d2:	683b      	ldr	r3, [r7, #0]
    f1d4:	7eda      	ldrb	r2, [r3, #27]
    f1d6:	68fb      	ldr	r3, [r7, #12]
    f1d8:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
            RPDO->CANrxData[1][7] = msg->data[7];
    f1dc:	683b      	ldr	r3, [r7, #0]
    f1de:	7f1a      	ldrb	r2, [r3, #28]
    f1e0:	68fb      	ldr	r3, [r7, #12]
    f1e2:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

            RPDO->CANrxNew[1] = true;
    f1e6:	68fb      	ldr	r3, [r7, #12]
    f1e8:	2201      	movs	r2, #1
    f1ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    f1ee:	bf00      	nop
            RPDO->CANrxData[0][7] = msg->data[7];

            RPDO->CANrxNew[0] = true;
        }
    }
}
    f1f0:	e02b      	b.n	f24a <_ZL14CO_PDO_receivePvPK13CO_CANrxMsg_t+0xfa>
            RPDO->CANrxData[0][0] = msg->data[0];
    f1f2:	683b      	ldr	r3, [r7, #0]
    f1f4:	7d5a      	ldrb	r2, [r3, #21]
    f1f6:	68fb      	ldr	r3, [r7, #12]
    f1f8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
            RPDO->CANrxData[0][1] = msg->data[1];
    f1fc:	683b      	ldr	r3, [r7, #0]
    f1fe:	7d9a      	ldrb	r2, [r3, #22]
    f200:	68fb      	ldr	r3, [r7, #12]
    f202:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
            RPDO->CANrxData[0][2] = msg->data[2];
    f206:	683b      	ldr	r3, [r7, #0]
    f208:	7dda      	ldrb	r2, [r3, #23]
    f20a:	68fb      	ldr	r3, [r7, #12]
    f20c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
            RPDO->CANrxData[0][3] = msg->data[3];
    f210:	683b      	ldr	r3, [r7, #0]
    f212:	7e1a      	ldrb	r2, [r3, #24]
    f214:	68fb      	ldr	r3, [r7, #12]
    f216:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
            RPDO->CANrxData[0][4] = msg->data[4];
    f21a:	683b      	ldr	r3, [r7, #0]
    f21c:	7e5a      	ldrb	r2, [r3, #25]
    f21e:	68fb      	ldr	r3, [r7, #12]
    f220:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
            RPDO->CANrxData[0][5] = msg->data[5];
    f224:	683b      	ldr	r3, [r7, #0]
    f226:	7e9a      	ldrb	r2, [r3, #26]
    f228:	68fb      	ldr	r3, [r7, #12]
    f22a:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
            RPDO->CANrxData[0][6] = msg->data[6];
    f22e:	683b      	ldr	r3, [r7, #0]
    f230:	7eda      	ldrb	r2, [r3, #27]
    f232:	68fb      	ldr	r3, [r7, #12]
    f234:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            RPDO->CANrxData[0][7] = msg->data[7];
    f238:	683b      	ldr	r3, [r7, #0]
    f23a:	7f1a      	ldrb	r2, [r3, #28]
    f23c:	68fb      	ldr	r3, [r7, #12]
    f23e:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
            RPDO->CANrxNew[0] = true;
    f242:	68fb      	ldr	r3, [r7, #12]
    f244:	2201      	movs	r2, #1
    f246:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
}
    f24a:	bf00      	nop
    f24c:	3714      	adds	r7, #20
    f24e:	46bd      	mov	sp, r7
    f250:	bc80      	pop	{r7}
    f252:	4770      	bx	lr

0000f254 <_ZL16CO_RPDOconfigComP9CO_RPDO_tm>:
 *
 * @param RPDO RPDO object.
 * @param COB_IDUsedByRPDO _RPDO communication parameter_, _COB-ID for PDO_ variable
 * from Object dictionary (index 0x1400+, subindex 1).
 */
static void CO_RPDOconfigCom(CO_RPDO_t* RPDO, uint32_t COB_IDUsedByRPDO){
    f254:	b590      	push	{r4, r7, lr}
    f256:	b089      	sub	sp, #36	; 0x24
    f258:	af04      	add	r7, sp, #16
    f25a:	6078      	str	r0, [r7, #4]
    f25c:	6039      	str	r1, [r7, #0]
    uint32_t ID;
    CO_ReturnError_t r;

    ID = (uint32_t)COB_IDUsedByRPDO;
    f25e:	683b      	ldr	r3, [r7, #0]
    f260:	60fb      	str	r3, [r7, #12]

    /* is RPDO used? */
    if((COB_IDUsedByRPDO & 0xBFFFF800L) == 0 && RPDO->dataLength && ID){
    f262:	683a      	ldr	r2, [r7, #0]
    f264:	4b2d      	ldr	r3, [pc, #180]	; (f31c <_ZL16CO_RPDOconfigComP9CO_RPDO_tm+0xc8>)
    f266:	4013      	ands	r3, r2
    f268:	2b00      	cmp	r3, #0
    f26a:	d123      	bne.n	f2b4 <_ZL16CO_RPDOconfigComP9CO_RPDO_tm+0x60>
    f26c:	687b      	ldr	r3, [r7, #4]
    f26e:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
    f272:	2b00      	cmp	r3, #0
    f274:	d01e      	beq.n	f2b4 <_ZL16CO_RPDOconfigComP9CO_RPDO_tm+0x60>
    f276:	68fb      	ldr	r3, [r7, #12]
    f278:	2b00      	cmp	r3, #0
    f27a:	d01b      	beq.n	f2b4 <_ZL16CO_RPDOconfigComP9CO_RPDO_tm+0x60>
        /* is used default COB-ID? */
        if(ID == RPDO->defaultCOB_ID) ID += RPDO->nodeId;
    f27c:	687b      	ldr	r3, [r7, #4]
    f27e:	69da      	ldr	r2, [r3, #28]
    f280:	68fb      	ldr	r3, [r7, #12]
    f282:	429a      	cmp	r2, r3
    f284:	d105      	bne.n	f292 <_ZL16CO_RPDOconfigComP9CO_RPDO_tm+0x3e>
    f286:	687b      	ldr	r3, [r7, #4]
    f288:	7e1b      	ldrb	r3, [r3, #24]
    f28a:	461a      	mov	r2, r3
    f28c:	68fb      	ldr	r3, [r7, #12]
    f28e:	4413      	add	r3, r2
    f290:	60fb      	str	r3, [r7, #12]
        RPDO->valid = true;
    f292:	687b      	ldr	r3, [r7, #4]
    f294:	2201      	movs	r2, #1
    f296:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        RPDO->synchronous = (RPDO->RPDOCommPar->transmissionType <= 240) ? true : false;
    f29a:	687b      	ldr	r3, [r7, #4]
    f29c:	68db      	ldr	r3, [r3, #12]
    f29e:	7a1b      	ldrb	r3, [r3, #8]
    f2a0:	2bf0      	cmp	r3, #240	; 0xf0
    f2a2:	bfd4      	ite	le
    f2a4:	2301      	movle	r3, #1
    f2a6:	2300      	movgt	r3, #0
    f2a8:	b2db      	uxtb	r3, r3
    f2aa:	461a      	mov	r2, r3
    f2ac:	687b      	ldr	r3, [r7, #4]
    f2ae:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
    f2b2:	e00d      	b.n	f2d0 <_ZL16CO_RPDOconfigComP9CO_RPDO_tm+0x7c>
    }
    else{
        ID = 0;
    f2b4:	2300      	movs	r3, #0
    f2b6:	60fb      	str	r3, [r7, #12]
        RPDO->valid = false;
    f2b8:	687b      	ldr	r3, [r7, #4]
    f2ba:	2200      	movs	r2, #0
    f2bc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        RPDO->CANrxNew[0] = RPDO->CANrxNew[1] = false;
    f2c0:	687b      	ldr	r3, [r7, #4]
    f2c2:	2200      	movs	r2, #0
    f2c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    f2c8:	687b      	ldr	r3, [r7, #4]
    f2ca:	2200      	movs	r2, #0
    f2cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    r = ptrCODriverClass->CAN_Rx_BufferInit(
    f2d0:	4b13      	ldr	r3, [pc, #76]	; (f320 <_ZL16CO_RPDOconfigComP9CO_RPDO_tm+0xcc>)
    f2d2:	6818      	ldr	r0, [r3, #0]
    f2d4:	687b      	ldr	r3, [r7, #4]
    f2d6:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
            RPDO->CANdevRxIdx,      /* rx buffer index */
            ID,                     /* CAN identifier */
            0x7FF,                  /* mask */
            0,                      /* rtr */
            (void*)RPDO,            /* object passed to receive function */
            CO_PDO_receive);        /* this function will process received message */
    f2d8:	4b12      	ldr	r3, [pc, #72]	; (f324 <_ZL16CO_RPDOconfigComP9CO_RPDO_tm+0xd0>)
    f2da:	9302      	str	r3, [sp, #8]
    f2dc:	687b      	ldr	r3, [r7, #4]
    f2de:	9301      	str	r3, [sp, #4]
    f2e0:	2300      	movs	r3, #0
    f2e2:	9300      	str	r3, [sp, #0]
    f2e4:	f240 73ff 	movw	r3, #2047	; 0x7ff
    f2e8:	68fa      	ldr	r2, [r7, #12]
    f2ea:	4c0f      	ldr	r4, [pc, #60]	; (f328 <_ZL16CO_RPDOconfigComP9CO_RPDO_tm+0xd4>)
    f2ec:	47a0      	blx	r4
    f2ee:	4603      	mov	r3, r0
    f2f0:	72fb      	strb	r3, [r7, #11]
    if(r != CO_ERROR_NO){
    f2f2:	f997 300b 	ldrsb.w	r3, [r7, #11]
    f2f6:	2b00      	cmp	r3, #0
    f2f8:	d00b      	beq.n	f312 <_ZL16CO_RPDOconfigComP9CO_RPDO_tm+0xbe>
        RPDO->valid = false;
    f2fa:	687b      	ldr	r3, [r7, #4]
    f2fc:	2200      	movs	r2, #0
    f2fe:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        RPDO->CANrxNew[0] = RPDO->CANrxNew[1] = false;
    f302:	687b      	ldr	r3, [r7, #4]
    f304:	2200      	movs	r2, #0
    f306:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    f30a:	687b      	ldr	r3, [r7, #4]
    f30c:	2200      	movs	r2, #0
    f30e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
}
    f312:	bf00      	nop
    f314:	3714      	adds	r7, #20
    f316:	46bd      	mov	sp, r7
    f318:	bd90      	pop	{r4, r7, pc}
    f31a:	bf00      	nop
    f31c:	bffff800 	.word	0xbffff800
    f320:	200019a4 	.word	0x200019a4
    f324:	0000f151 	.word	0x0000f151
    f328:	0000d7b5 	.word	0x0000d7b5

0000f32c <_ZL16CO_TPDOconfigComP9CO_TPDO_tmh>:
 * @param TPDO TPDO object.
 * @param COB_IDUsedByTPDO _TPDO communication parameter_, _COB-ID for PDO_ variable
 * from Object dictionary (index 0x1400+, subindex 1).
 * @param syncFlag Indicate, if TPDO is synchronous.
 */
static void CO_TPDOconfigCom(CO_TPDO_t* TPDO, uint32_t COB_IDUsedByTPDO, uint8_t syncFlag){
    f32c:	b590      	push	{r4, r7, lr}
    f32e:	b089      	sub	sp, #36	; 0x24
    f330:	af02      	add	r7, sp, #8
    f332:	60f8      	str	r0, [r7, #12]
    f334:	60b9      	str	r1, [r7, #8]
    f336:	4613      	mov	r3, r2
    f338:	71fb      	strb	r3, [r7, #7]
    uint32_t ID;

    ID = (uint32_t)COB_IDUsedByTPDO;
    f33a:	68bb      	ldr	r3, [r7, #8]
    f33c:	617b      	str	r3, [r7, #20]

    /* is TPDO used? */
    if((COB_IDUsedByTPDO & 0xBFFFF800L) == 0 && TPDO->dataLength && ID){
    f33e:	68ba      	ldr	r2, [r7, #8]
    f340:	4b1c      	ldr	r3, [pc, #112]	; (f3b4 <_ZL16CO_TPDOconfigComP9CO_TPDO_tmh+0x88>)
    f342:	4013      	ands	r3, r2
    f344:	2b00      	cmp	r3, #0
    f346:	d115      	bne.n	f374 <_ZL16CO_TPDOconfigComP9CO_TPDO_tmh+0x48>
    f348:	68fb      	ldr	r3, [r7, #12]
    f34a:	7f9b      	ldrb	r3, [r3, #30]
    f34c:	2b00      	cmp	r3, #0
    f34e:	d011      	beq.n	f374 <_ZL16CO_TPDOconfigComP9CO_TPDO_tmh+0x48>
    f350:	697b      	ldr	r3, [r7, #20]
    f352:	2b00      	cmp	r3, #0
    f354:	d00e      	beq.n	f374 <_ZL16CO_TPDOconfigComP9CO_TPDO_tmh+0x48>
        /* is used default COB-ID? */
        if(ID == TPDO->defaultCOB_ID) ID += TPDO->nodeId;
    f356:	68fb      	ldr	r3, [r7, #12]
    f358:	699a      	ldr	r2, [r3, #24]
    f35a:	697b      	ldr	r3, [r7, #20]
    f35c:	429a      	cmp	r2, r3
    f35e:	d105      	bne.n	f36c <_ZL16CO_TPDOconfigComP9CO_TPDO_tmh+0x40>
    f360:	68fb      	ldr	r3, [r7, #12]
    f362:	7d1b      	ldrb	r3, [r3, #20]
    f364:	461a      	mov	r2, r3
    f366:	697b      	ldr	r3, [r7, #20]
    f368:	4413      	add	r3, r2
    f36a:	617b      	str	r3, [r7, #20]
        TPDO->valid = true;
    f36c:	68fb      	ldr	r3, [r7, #12]
    f36e:	2201      	movs	r2, #1
    f370:	775a      	strb	r2, [r3, #29]
    f372:	e004      	b.n	f37e <_ZL16CO_TPDOconfigComP9CO_TPDO_tmh+0x52>
    }
    else{
        ID = 0;
    f374:	2300      	movs	r3, #0
    f376:	617b      	str	r3, [r7, #20]
        TPDO->valid = false;
    f378:	68fb      	ldr	r3, [r7, #12]
    f37a:	2200      	movs	r2, #0
    f37c:	775a      	strb	r2, [r3, #29]
    }

    TPDO->CANtxBuff = ptrCODriverClass->CAN_Tx_BufferInit(
    f37e:	4b0e      	ldr	r3, [pc, #56]	; (f3b8 <_ZL16CO_TPDOconfigComP9CO_TPDO_tmh+0x8c>)
    f380:	6818      	ldr	r0, [r3, #0]
    f382:	68fb      	ldr	r3, [r7, #12]
    f384:	6d59      	ldr	r1, [r3, #84]	; 0x54
    f386:	68fb      	ldr	r3, [r7, #12]
    f388:	7f9b      	ldrb	r3, [r3, #30]
    f38a:	79fa      	ldrb	r2, [r7, #7]
    f38c:	9201      	str	r2, [sp, #4]
    f38e:	9300      	str	r3, [sp, #0]
    f390:	2300      	movs	r3, #0
    f392:	697a      	ldr	r2, [r7, #20]
    f394:	4c09      	ldr	r4, [pc, #36]	; (f3bc <_ZL16CO_TPDOconfigComP9CO_TPDO_tmh+0x90>)
    f396:	47a0      	blx	r4
    f398:	4602      	mov	r2, r0
    f39a:	68fb      	ldr	r3, [r7, #12]
    f39c:	651a      	str	r2, [r3, #80]	; 0x50
            ID,                        /* CAN identifier */
            0,                         /* rtr */
            TPDO->dataLength,          /* number of data bytes */
            syncFlag);                 /* synchronous message flag bit */

    if(TPDO->CANtxBuff == 0){
    f39e:	68fb      	ldr	r3, [r7, #12]
    f3a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    f3a2:	2b00      	cmp	r3, #0
    f3a4:	d102      	bne.n	f3ac <_ZL16CO_TPDOconfigComP9CO_TPDO_tmh+0x80>
        TPDO->valid = false;
    f3a6:	68fb      	ldr	r3, [r7, #12]
    f3a8:	2200      	movs	r2, #0
    f3aa:	775a      	strb	r2, [r3, #29]
    }
}
    f3ac:	bf00      	nop
    f3ae:	371c      	adds	r7, #28
    f3b0:	46bd      	mov	sp, r7
    f3b2:	bd90      	pop	{r4, r7, pc}
    f3b4:	bffff800 	.word	0xbffff800
    f3b8:	200019a4 	.word	0x200019a4
    f3bc:	0000d8b5 	.word	0x0000d8b5

0000f3c0 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_>:
        uint8_t                 R_T,
        uint8_t               **ppData,
        uint8_t                *pLength,
        uint8_t                *pSendIfCOSFlags,
        uint8_t                *pIsMultibyteVar)
{
    f3c0:	b580      	push	{r7, lr}
    f3c2:	b08a      	sub	sp, #40	; 0x28
    f3c4:	af00      	add	r7, sp, #0
    f3c6:	60f8      	str	r0, [r7, #12]
    f3c8:	60b9      	str	r1, [r7, #8]
    f3ca:	603b      	str	r3, [r7, #0]
    f3cc:	4613      	mov	r3, r2
    f3ce:	71fb      	strb	r3, [r7, #7]
    uint8_t subIndex;
    uint8_t dataLen;
    uint8_t objectLen;
    uint8_t attr;

    index = (uint32_t)(map>>16);
    f3d0:	68bb      	ldr	r3, [r7, #8]
    f3d2:	0c1b      	lsrs	r3, r3, #16
    f3d4:	61fb      	str	r3, [r7, #28]
    subIndex = (uint8_t)(map>>8);
    f3d6:	68bb      	ldr	r3, [r7, #8]
    f3d8:	0a1b      	lsrs	r3, r3, #8
    f3da:	76fb      	strb	r3, [r7, #27]
    dataLen = (uint8_t) map;   /* data length in bits */
    f3dc:	68bb      	ldr	r3, [r7, #8]
    f3de:	76bb      	strb	r3, [r7, #26]

    /* data length must be byte aligned */
    if(dataLen&0x07) return CO_SDO_AB_NO_MAP;   /* Object cannot be mapped to the PDO. */
    f3e0:	7ebb      	ldrb	r3, [r7, #26]
    f3e2:	f003 0307 	and.w	r3, r3, #7
    f3e6:	2b00      	cmp	r3, #0
    f3e8:	d001      	beq.n	f3ee <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x2e>
    f3ea:	4b6b      	ldr	r3, [pc, #428]	; (f598 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1d8>)
    f3ec:	e0cf      	b.n	f58e <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1ce>

    dataLen >>= 3;    /* new data length is in bytes */
    f3ee:	7ebb      	ldrb	r3, [r7, #26]
    f3f0:	10db      	asrs	r3, r3, #3
    f3f2:	76bb      	strb	r3, [r7, #26]
    *pLength += dataLen;
    f3f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    f3f6:	781a      	ldrb	r2, [r3, #0]
    f3f8:	7ebb      	ldrb	r3, [r7, #26]
    f3fa:	4413      	add	r3, r2
    f3fc:	b2da      	uxtb	r2, r3
    f3fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    f400:	701a      	strb	r2, [r3, #0]

    /* total PDO length can not be more than 8 bytes */
    if(*pLength > 8) return CO_SDO_AB_MAP_LEN;  /* The number and length of the objects to be mapped would exceed PDO length. */
    f402:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    f404:	781b      	ldrb	r3, [r3, #0]
    f406:	2b08      	cmp	r3, #8
    f408:	dd01      	ble.n	f40e <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x4e>
    f40a:	4b64      	ldr	r3, [pc, #400]	; (f59c <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1dc>)
    f40c:	e0bf      	b.n	f58e <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1ce>

    /* is there a reference to dummy entries */
    if(index <=7 && subIndex == 0){
    f40e:	69fb      	ldr	r3, [r7, #28]
    f410:	2b07      	cmp	r3, #7
    f412:	d832      	bhi.n	f47a <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0xba>
    f414:	7efb      	ldrb	r3, [r7, #27]
    f416:	2b00      	cmp	r3, #0
    f418:	d12f      	bne.n	f47a <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0xba>
        static uint32_t dummyTX = 0;
        static uint32_t dummyRX;
        uint8_t dummySize = 4;
    f41a:	2304      	movs	r3, #4
    f41c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

        if(index<2) dummySize = 0;
    f420:	69fb      	ldr	r3, [r7, #28]
    f422:	2b01      	cmp	r3, #1
    f424:	d803      	bhi.n	f42e <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x6e>
    f426:	2300      	movs	r3, #0
    f428:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    f42c:	e012      	b.n	f454 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x94>
        else if(index==2 || index==5) dummySize = 1;
    f42e:	69fb      	ldr	r3, [r7, #28]
    f430:	2b02      	cmp	r3, #2
    f432:	d002      	beq.n	f43a <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x7a>
    f434:	69fb      	ldr	r3, [r7, #28]
    f436:	2b05      	cmp	r3, #5
    f438:	d103      	bne.n	f442 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x82>
    f43a:	2301      	movs	r3, #1
    f43c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    f440:	e008      	b.n	f454 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x94>
        else if(index==3 || index==6) dummySize = 2;
    f442:	69fb      	ldr	r3, [r7, #28]
    f444:	2b03      	cmp	r3, #3
    f446:	d002      	beq.n	f44e <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x8e>
    f448:	69fb      	ldr	r3, [r7, #28]
    f44a:	2b06      	cmp	r3, #6
    f44c:	d102      	bne.n	f454 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x94>
    f44e:	2302      	movs	r3, #2
    f450:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

        /* is size of variable big enough for map */
        if(dummySize < dataLen) return CO_SDO_AB_NO_MAP;   /* Object cannot be mapped to the PDO. */
    f454:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
    f458:	7ebb      	ldrb	r3, [r7, #26]
    f45a:	429a      	cmp	r2, r3
    f45c:	da01      	bge.n	f462 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0xa2>
    f45e:	4b4e      	ldr	r3, [pc, #312]	; (f598 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1d8>)
    f460:	e095      	b.n	f58e <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1ce>

        /* Data and ODE pointer */
        if(R_T == 0) *ppData = (uint8_t*) &dummyRX;
    f462:	79fb      	ldrb	r3, [r7, #7]
    f464:	2b00      	cmp	r3, #0
    f466:	d103      	bne.n	f470 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0xb0>
    f468:	683b      	ldr	r3, [r7, #0]
    f46a:	4a4d      	ldr	r2, [pc, #308]	; (f5a0 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1e0>)
    f46c:	601a      	str	r2, [r3, #0]
    f46e:	e002      	b.n	f476 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0xb6>
        else         *ppData = (uint8_t*) &dummyTX;
    f470:	683b      	ldr	r3, [r7, #0]
    f472:	4a4c      	ldr	r2, [pc, #304]	; (f5a4 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1e4>)
    f474:	601a      	str	r2, [r3, #0]

        return 0;
    f476:	2300      	movs	r3, #0
    f478:	e089      	b.n	f58e <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1ce>
    }

    /* find object in Object Dictionary */
    entryNo = ptrCODriverClass->CO_OD_find( index);
    f47a:	4b4b      	ldr	r3, [pc, #300]	; (f5a8 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1e8>)
    f47c:	681b      	ldr	r3, [r3, #0]
    f47e:	3304      	adds	r3, #4
    f480:	69f9      	ldr	r1, [r7, #28]
    f482:	4618      	mov	r0, r3
    f484:	4b49      	ldr	r3, [pc, #292]	; (f5ac <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1ec>)
    f486:	4798      	blx	r3
    f488:	6178      	str	r0, [r7, #20]

    /* Does object exist in OD? */
    if(entryNo == 0xFFFF || subIndex > SDO->OD[entryNo].maxSubIndex)
    f48a:	697b      	ldr	r3, [r7, #20]
    f48c:	f64f 72ff 	movw	r2, #65535	; 0xffff
    f490:	4293      	cmp	r3, r2
    f492:	d00b      	beq.n	f4ac <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0xec>
    f494:	7ef9      	ldrb	r1, [r7, #27]
    f496:	68fb      	ldr	r3, [r7, #12]
    f498:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
    f49a:	697a      	ldr	r2, [r7, #20]
    f49c:	4613      	mov	r3, r2
    f49e:	009b      	lsls	r3, r3, #2
    f4a0:	4413      	add	r3, r2
    f4a2:	009b      	lsls	r3, r3, #2
    f4a4:	4403      	add	r3, r0
    f4a6:	791b      	ldrb	r3, [r3, #4]
    f4a8:	4299      	cmp	r1, r3
    f4aa:	dd01      	ble.n	f4b0 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0xf0>
        return CO_SDO_AB_NOT_EXIST;   /* Object does not exist in the object dictionary. */
    f4ac:	4b40      	ldr	r3, [pc, #256]	; (f5b0 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1f0>)
    f4ae:	e06e      	b.n	f58e <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1ce>

    attr = ptrCODriverClass->CO_OD_getAttribute( entryNo, subIndex);
    f4b0:	4b3d      	ldr	r3, [pc, #244]	; (f5a8 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1e8>)
    f4b2:	681b      	ldr	r3, [r3, #0]
    f4b4:	3304      	adds	r3, #4
    f4b6:	7efa      	ldrb	r2, [r7, #27]
    f4b8:	6979      	ldr	r1, [r7, #20]
    f4ba:	4618      	mov	r0, r3
    f4bc:	4b3d      	ldr	r3, [pc, #244]	; (f5b4 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1f4>)
    f4be:	4798      	blx	r3
    f4c0:	4603      	mov	r3, r0
    f4c2:	74fb      	strb	r3, [r7, #19]
    /* Is object Mappable for RPDO? */
    if(R_T==0 && !((attr&CO_ODA_RPDO_MAPABLE) && (attr&CO_ODA_WRITEABLE))) return CO_SDO_AB_NO_MAP;   /* Object cannot be mapped to the PDO. */
    f4c4:	79fb      	ldrb	r3, [r7, #7]
    f4c6:	2b00      	cmp	r3, #0
    f4c8:	d10b      	bne.n	f4e2 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x122>
    f4ca:	7cfb      	ldrb	r3, [r7, #19]
    f4cc:	f003 0310 	and.w	r3, r3, #16
    f4d0:	2b00      	cmp	r3, #0
    f4d2:	d004      	beq.n	f4de <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x11e>
    f4d4:	7cfb      	ldrb	r3, [r7, #19]
    f4d6:	f003 0308 	and.w	r3, r3, #8
    f4da:	2b00      	cmp	r3, #0
    f4dc:	d101      	bne.n	f4e2 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x122>
    f4de:	4b2e      	ldr	r3, [pc, #184]	; (f598 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1d8>)
    f4e0:	e055      	b.n	f58e <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1ce>
    /* Is object Mappable for TPDO? */
    if(R_T!=0 && !((attr&CO_ODA_TPDO_MAPABLE) && (attr&CO_ODA_READABLE))) return CO_SDO_AB_NO_MAP;   /* Object cannot be mapped to the PDO. */
    f4e2:	79fb      	ldrb	r3, [r7, #7]
    f4e4:	2b00      	cmp	r3, #0
    f4e6:	d00b      	beq.n	f500 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x140>
    f4e8:	7cfb      	ldrb	r3, [r7, #19]
    f4ea:	f003 0320 	and.w	r3, r3, #32
    f4ee:	2b00      	cmp	r3, #0
    f4f0:	d004      	beq.n	f4fc <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x13c>
    f4f2:	7cfb      	ldrb	r3, [r7, #19]
    f4f4:	f003 0304 	and.w	r3, r3, #4
    f4f8:	2b00      	cmp	r3, #0
    f4fa:	d101      	bne.n	f500 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x140>
    f4fc:	4b26      	ldr	r3, [pc, #152]	; (f598 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1d8>)
    f4fe:	e046      	b.n	f58e <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1ce>

    /* is size of variable big enough for map */
    objectLen = ptrCODriverClass->CO_OD_getLength( entryNo, subIndex);
    f500:	4b29      	ldr	r3, [pc, #164]	; (f5a8 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1e8>)
    f502:	681b      	ldr	r3, [r3, #0]
    f504:	3304      	adds	r3, #4
    f506:	7efa      	ldrb	r2, [r7, #27]
    f508:	6979      	ldr	r1, [r7, #20]
    f50a:	4618      	mov	r0, r3
    f50c:	4b2a      	ldr	r3, [pc, #168]	; (f5b8 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1f8>)
    f50e:	4798      	blx	r3
    f510:	4603      	mov	r3, r0
    f512:	74bb      	strb	r3, [r7, #18]
    if(objectLen < dataLen) return CO_SDO_AB_NO_MAP;   /* Object cannot be mapped to the PDO. */
    f514:	7cba      	ldrb	r2, [r7, #18]
    f516:	7ebb      	ldrb	r3, [r7, #26]
    f518:	429a      	cmp	r2, r3
    f51a:	da01      	bge.n	f520 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x160>
    f51c:	4b1e      	ldr	r3, [pc, #120]	; (f598 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1d8>)
    f51e:	e036      	b.n	f58e <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1ce>

    /* mark multibyte variable */
    *pIsMultibyteVar = (attr&CO_ODA_MB_VALUE) ? 1 : 0;
    f520:	f997 3013 	ldrsb.w	r3, [r7, #19]
    f524:	2b00      	cmp	r3, #0
    f526:	da01      	bge.n	f52c <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x16c>
    f528:	2201      	movs	r2, #1
    f52a:	e000      	b.n	f52e <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x16e>
    f52c:	2200      	movs	r2, #0
    f52e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    f530:	701a      	strb	r2, [r3, #0]

    /* pointer to data */
    *ppData = (uint8_t*) (ptrCODriverClass->CO_OD_getDataPointer( entryNo, subIndex));
    f532:	4b1d      	ldr	r3, [pc, #116]	; (f5a8 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1e8>)
    f534:	681b      	ldr	r3, [r3, #0]
    f536:	3304      	adds	r3, #4
    f538:	7efa      	ldrb	r2, [r7, #27]
    f53a:	6979      	ldr	r1, [r7, #20]
    f53c:	4618      	mov	r0, r3
    f53e:	4b1f      	ldr	r3, [pc, #124]	; (f5bc <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1fc>)
    f540:	4798      	blx	r3
    f542:	4602      	mov	r2, r0
    f544:	683b      	ldr	r3, [r7, #0]
    f546:	601a      	str	r2, [r3, #0]
        *ppData += objectLen - dataLen;
    }
#endif

    /* setup change of state flags */
    if(attr&CO_ODA_TPDO_DETECT_COS){
    f548:	7cfb      	ldrb	r3, [r7, #19]
    f54a:	f003 0340 	and.w	r3, r3, #64	; 0x40
    f54e:	2b00      	cmp	r3, #0
    f550:	d01c      	beq.n	f58c <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1cc>
        uint32_t i;
        for(i=*pLength-dataLen; i<*pLength; i++){
    f552:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    f554:	781b      	ldrb	r3, [r3, #0]
    f556:	461a      	mov	r2, r3
    f558:	7ebb      	ldrb	r3, [r7, #26]
    f55a:	1ad3      	subs	r3, r2, r3
    f55c:	623b      	str	r3, [r7, #32]
    f55e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    f560:	781b      	ldrb	r3, [r3, #0]
    f562:	461a      	mov	r2, r3
    f564:	6a3b      	ldr	r3, [r7, #32]
    f566:	429a      	cmp	r2, r3
    f568:	d910      	bls.n	f58c <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1cc>
            *pSendIfCOSFlags |= 1<<i;
    f56a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    f56c:	781b      	ldrb	r3, [r3, #0]
    f56e:	b25a      	sxtb	r2, r3
    f570:	2101      	movs	r1, #1
    f572:	6a3b      	ldr	r3, [r7, #32]
    f574:	fa01 f303 	lsl.w	r3, r1, r3
    f578:	b25b      	sxtb	r3, r3
    f57a:	4313      	orrs	r3, r2
    f57c:	b25b      	sxtb	r3, r3
    f57e:	b2da      	uxtb	r2, r3
    f580:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    f582:	701a      	strb	r2, [r3, #0]
        for(i=*pLength-dataLen; i<*pLength; i++){
    f584:	6a3b      	ldr	r3, [r7, #32]
    f586:	3301      	adds	r3, #1
    f588:	623b      	str	r3, [r7, #32]
    f58a:	e7e8      	b.n	f55e <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x19e>
        }
    }

    return 0;
    f58c:	2300      	movs	r3, #0
}
    f58e:	4618      	mov	r0, r3
    f590:	3728      	adds	r7, #40	; 0x28
    f592:	46bd      	mov	sp, r7
    f594:	bd80      	pop	{r7, pc}
    f596:	bf00      	nop
    f598:	06040041 	.word	0x06040041
    f59c:	06040042 	.word	0x06040042
    f5a0:	200019b0 	.word	0x200019b0
    f5a4:	200019ac 	.word	0x200019ac
    f5a8:	200019a4 	.word	0x200019a4
    f5ac:	0001098d 	.word	0x0001098d
    f5b0:	06020000 	.word	0x06020000
    f5b4:	00010ad9 	.word	0x00010ad9
    f5b8:	00010a35 	.word	0x00010a35
    f5bc:	00010b83 	.word	0x00010b83

0000f5c0 <_ZL16CO_RPDOconfigMapP9CO_RPDO_th>:
 * @param RPDO RPDO object.
 * @param noOfMappedObjects Number of mapped object (from OD).
 *
 * @return 0 on success, otherwise SDO abort code.
 */
static uint32_t CO_RPDOconfigMap(CO_RPDO_t* RPDO, uint8_t noOfMappedObjects){
    f5c0:	b590      	push	{r4, r7, lr}
    f5c2:	b091      	sub	sp, #68	; 0x44
    f5c4:	af04      	add	r7, sp, #16
    f5c6:	6078      	str	r0, [r7, #4]
    f5c8:	460b      	mov	r3, r1
    f5ca:	70fb      	strb	r3, [r7, #3]
    uint32_t i;
    uint8_t length = 0;
    f5cc:	2300      	movs	r3, #0
    f5ce:	75fb      	strb	r3, [r7, #23]
    uint32_t ret = 0;
    f5d0:	2300      	movs	r3, #0
    f5d2:	62bb      	str	r3, [r7, #40]	; 0x28
    const uint32_t* pMap = &RPDO->RPDOMapPar->mappedObject1;
    f5d4:	687b      	ldr	r3, [r7, #4]
    f5d6:	691b      	ldr	r3, [r3, #16]
    f5d8:	3304      	adds	r3, #4
    f5da:	627b      	str	r3, [r7, #36]	; 0x24

    for(i=noOfMappedObjects; i>0; i--){
    f5dc:	78fb      	ldrb	r3, [r7, #3]
    f5de:	62fb      	str	r3, [r7, #44]	; 0x2c
    f5e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    f5e2:	2b00      	cmp	r3, #0
    f5e4:	d045      	beq.n	f672 <_ZL16CO_RPDOconfigMapP9CO_RPDO_th+0xb2>
        uint32_t j;
        uint8_t* pData;
        uint8_t dummy = 0;
    f5e6:	2300      	movs	r3, #0
    f5e8:	73fb      	strb	r3, [r7, #15]
        uint8_t prevLength = length;
    f5ea:	7dfb      	ldrb	r3, [r7, #23]
    f5ec:	77fb      	strb	r3, [r7, #31]
        uint8_t MBvar;
        uint32_t map = *(pMap++);
    f5ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    f5f0:	1d1a      	adds	r2, r3, #4
    f5f2:	627a      	str	r2, [r7, #36]	; 0x24
    f5f4:	681b      	ldr	r3, [r3, #0]
    f5f6:	61bb      	str	r3, [r7, #24]

        /* function do much checking of errors in map */
        ret = CO_PDOfindMap(
    f5f8:	687b      	ldr	r3, [r7, #4]
    f5fa:	6858      	ldr	r0, [r3, #4]
                map,
                0,
                &pData,
                &length,
                &dummy,
                &MBvar);
    f5fc:	f107 0210 	add.w	r2, r7, #16
    f600:	f107 030e 	add.w	r3, r7, #14
    f604:	9302      	str	r3, [sp, #8]
    f606:	f107 030f 	add.w	r3, r7, #15
    f60a:	9301      	str	r3, [sp, #4]
    f60c:	f107 0317 	add.w	r3, r7, #23
    f610:	9300      	str	r3, [sp, #0]
    f612:	4613      	mov	r3, r2
    f614:	2200      	movs	r2, #0
    f616:	69b9      	ldr	r1, [r7, #24]
    f618:	4c1a      	ldr	r4, [pc, #104]	; (f684 <_ZL16CO_RPDOconfigMapP9CO_RPDO_th+0xc4>)
    f61a:	47a0      	blx	r4
    f61c:	62b8      	str	r0, [r7, #40]	; 0x28
        if(ret){
    f61e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    f620:	2b00      	cmp	r3, #0
    f622:	d00e      	beq.n	f642 <_ZL16CO_RPDOconfigMapP9CO_RPDO_th+0x82>
            length = 0;
    f624:	2300      	movs	r3, #0
    f626:	75fb      	strb	r3, [r7, #23]
           ptrCODriverClass->EM_ErrorReport(RPDO->em, CO_EM_PDO_WRONG_MAPPING, CO_EMC_PROTOCOL_ERROR, map);
    f628:	4b17      	ldr	r3, [pc, #92]	; (f688 <_ZL16CO_RPDOconfigMapP9CO_RPDO_th+0xc8>)
    f62a:	681b      	ldr	r3, [r3, #0]
    f62c:	1d18      	adds	r0, r3, #4
    f62e:	687b      	ldr	r3, [r7, #4]
    f630:	6819      	ldr	r1, [r3, #0]
    f632:	69bb      	ldr	r3, [r7, #24]
    f634:	9300      	str	r3, [sp, #0]
    f636:	f44f 4302 	mov.w	r3, #33280	; 0x8200
    f63a:	221a      	movs	r2, #26
    f63c:	4c13      	ldr	r4, [pc, #76]	; (f68c <_ZL16CO_RPDOconfigMapP9CO_RPDO_th+0xcc>)
    f63e:	47a0      	blx	r4
    f640:	e017      	b.n	f672 <_ZL16CO_RPDOconfigMapP9CO_RPDO_th+0xb2>
        else{
            for(j=prevLength; j<length; j++)
                RPDO->mapPointer[j] = pData++;
        }
#else
        for(j=prevLength; j<length; j++){
    f642:	7ffb      	ldrb	r3, [r7, #31]
    f644:	623b      	str	r3, [r7, #32]
    f646:	7dfb      	ldrb	r3, [r7, #23]
    f648:	461a      	mov	r2, r3
    f64a:	6a3b      	ldr	r3, [r7, #32]
    f64c:	429a      	cmp	r2, r3
    f64e:	d90c      	bls.n	f66a <_ZL16CO_RPDOconfigMapP9CO_RPDO_th+0xaa>
            RPDO->mapPointer[j] = pData++;
    f650:	693a      	ldr	r2, [r7, #16]
    f652:	1c53      	adds	r3, r2, #1
    f654:	613b      	str	r3, [r7, #16]
    f656:	6879      	ldr	r1, [r7, #4]
    f658:	6a3b      	ldr	r3, [r7, #32]
    f65a:	3308      	adds	r3, #8
    f65c:	009b      	lsls	r3, r3, #2
    f65e:	440b      	add	r3, r1
    f660:	605a      	str	r2, [r3, #4]
        for(j=prevLength; j<length; j++){
    f662:	6a3b      	ldr	r3, [r7, #32]
    f664:	3301      	adds	r3, #1
    f666:	623b      	str	r3, [r7, #32]
    f668:	e7ed      	b.n	f646 <_ZL16CO_RPDOconfigMapP9CO_RPDO_th+0x86>
    for(i=noOfMappedObjects; i>0; i--){
    f66a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    f66c:	3b01      	subs	r3, #1
    f66e:	62fb      	str	r3, [r7, #44]	; 0x2c
    f670:	e7b6      	b.n	f5e0 <_ZL16CO_RPDOconfigMapP9CO_RPDO_th+0x20>
        }
#endif

    }

    RPDO->dataLength = length;
    f672:	7dfa      	ldrb	r2, [r7, #23]
    f674:	687b      	ldr	r3, [r7, #4]
    f676:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

    return ret;
    f67a:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
    f67c:	4618      	mov	r0, r3
    f67e:	3734      	adds	r7, #52	; 0x34
    f680:	46bd      	mov	sp, r7
    f682:	bd90      	pop	{r4, r7, pc}
    f684:	0000f3c1 	.word	0x0000f3c1
    f688:	200019a4 	.word	0x200019a4
    f68c:	0000e3f5 	.word	0x0000e3f5

0000f690 <_ZL16CO_TPDOconfigMapP9CO_TPDO_th>:
 * @param TPDO TPDO object.
 * @param noOfMappedObjects Number of mapped object (from OD).
 *
 * @return 0 on success, otherwise SDO abort code.
 */
static uint32_t CO_TPDOconfigMap(CO_TPDO_t* TPDO, uint8_t noOfMappedObjects){
    f690:	b590      	push	{r4, r7, lr}
    f692:	b091      	sub	sp, #68	; 0x44
    f694:	af04      	add	r7, sp, #16
    f696:	6078      	str	r0, [r7, #4]
    f698:	460b      	mov	r3, r1
    f69a:	70fb      	strb	r3, [r7, #3]
    uint32_t i;
    uint8_t length = 0;
    f69c:	2300      	movs	r3, #0
    f69e:	75fb      	strb	r3, [r7, #23]
    uint32_t ret = 0;
    f6a0:	2300      	movs	r3, #0
    f6a2:	62bb      	str	r3, [r7, #40]	; 0x28
    const uint32_t* pMap = &TPDO->TPDOMapPar->mappedObject1;
    f6a4:	687b      	ldr	r3, [r7, #4]
    f6a6:	68db      	ldr	r3, [r3, #12]
    f6a8:	3304      	adds	r3, #4
    f6aa:	627b      	str	r3, [r7, #36]	; 0x24

    TPDO->sendIfCOSFlags = 0;
    f6ac:	687b      	ldr	r3, [r7, #4]
    f6ae:	2200      	movs	r2, #0
    f6b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    for(i=noOfMappedObjects; i>0; i--){
    f6b4:	78fb      	ldrb	r3, [r7, #3]
    f6b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    f6b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    f6ba:	2b00      	cmp	r3, #0
    f6bc:	d042      	beq.n	f744 <_ZL16CO_TPDOconfigMapP9CO_TPDO_th+0xb4>
        uint32_t j;
        uint8_t* pData;
        uint8_t prevLength = length;
    f6be:	7dfb      	ldrb	r3, [r7, #23]
    f6c0:	77fb      	strb	r3, [r7, #31]
        uint8_t MBvar;
        uint32_t map = *(pMap++);
    f6c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    f6c4:	1d1a      	adds	r2, r3, #4
    f6c6:	627a      	str	r2, [r7, #36]	; 0x24
    f6c8:	681b      	ldr	r3, [r3, #0]
    f6ca:	61bb      	str	r3, [r7, #24]

        /* function do much checking of errors in map */
        ret = CO_PDOfindMap(
    f6cc:	687b      	ldr	r3, [r7, #4]
    f6ce:	6858      	ldr	r0, [r3, #4]
    f6d0:	687b      	ldr	r3, [r7, #4]
    f6d2:	3340      	adds	r3, #64	; 0x40
                map,
                1,
                &pData,
                &length,
                &TPDO->sendIfCOSFlags,
                &MBvar);
    f6d4:	f107 0110 	add.w	r1, r7, #16
    f6d8:	f107 020f 	add.w	r2, r7, #15
    f6dc:	9202      	str	r2, [sp, #8]
    f6de:	9301      	str	r3, [sp, #4]
    f6e0:	f107 0317 	add.w	r3, r7, #23
    f6e4:	9300      	str	r3, [sp, #0]
    f6e6:	460b      	mov	r3, r1
    f6e8:	2201      	movs	r2, #1
    f6ea:	69b9      	ldr	r1, [r7, #24]
    f6ec:	4c19      	ldr	r4, [pc, #100]	; (f754 <_ZL16CO_TPDOconfigMapP9CO_TPDO_th+0xc4>)
    f6ee:	47a0      	blx	r4
    f6f0:	62b8      	str	r0, [r7, #40]	; 0x28
        if(ret){
    f6f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    f6f4:	2b00      	cmp	r3, #0
    f6f6:	d00e      	beq.n	f716 <_ZL16CO_TPDOconfigMapP9CO_TPDO_th+0x86>
            length = 0;
    f6f8:	2300      	movs	r3, #0
    f6fa:	75fb      	strb	r3, [r7, #23]
            ptrCODriverClass->EM_ErrorReport(TPDO->em, CO_EM_PDO_WRONG_MAPPING, CO_EMC_PROTOCOL_ERROR, map);
    f6fc:	4b16      	ldr	r3, [pc, #88]	; (f758 <_ZL16CO_TPDOconfigMapP9CO_TPDO_th+0xc8>)
    f6fe:	681b      	ldr	r3, [r3, #0]
    f700:	1d18      	adds	r0, r3, #4
    f702:	687b      	ldr	r3, [r7, #4]
    f704:	6819      	ldr	r1, [r3, #0]
    f706:	69bb      	ldr	r3, [r7, #24]
    f708:	9300      	str	r3, [sp, #0]
    f70a:	f44f 4302 	mov.w	r3, #33280	; 0x8200
    f70e:	221a      	movs	r2, #26
    f710:	4c12      	ldr	r4, [pc, #72]	; (f75c <_ZL16CO_TPDOconfigMapP9CO_TPDO_th+0xcc>)
    f712:	47a0      	blx	r4
    f714:	e016      	b.n	f744 <_ZL16CO_TPDOconfigMapP9CO_TPDO_th+0xb4>
        else{
            for(j=prevLength; j<length; j++)
                TPDO->mapPointer[j] = pData++;
        }
#else
        for(j=prevLength; j<length; j++){
    f716:	7ffb      	ldrb	r3, [r7, #31]
    f718:	623b      	str	r3, [r7, #32]
    f71a:	7dfb      	ldrb	r3, [r7, #23]
    f71c:	461a      	mov	r2, r3
    f71e:	6a3b      	ldr	r3, [r7, #32]
    f720:	429a      	cmp	r2, r3
    f722:	d90b      	bls.n	f73c <_ZL16CO_TPDOconfigMapP9CO_TPDO_th+0xac>
            TPDO->mapPointer[j] = pData++;
    f724:	693b      	ldr	r3, [r7, #16]
    f726:	1c5a      	adds	r2, r3, #1
    f728:	613a      	str	r2, [r7, #16]
    f72a:	687a      	ldr	r2, [r7, #4]
    f72c:	6a39      	ldr	r1, [r7, #32]
    f72e:	3108      	adds	r1, #8
    f730:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
        for(j=prevLength; j<length; j++){
    f734:	6a3b      	ldr	r3, [r7, #32]
    f736:	3301      	adds	r3, #1
    f738:	623b      	str	r3, [r7, #32]
    f73a:	e7ee      	b.n	f71a <_ZL16CO_TPDOconfigMapP9CO_TPDO_th+0x8a>
    for(i=noOfMappedObjects; i>0; i--){
    f73c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    f73e:	3b01      	subs	r3, #1
    f740:	62fb      	str	r3, [r7, #44]	; 0x2c
    f742:	e7b9      	b.n	f6b8 <_ZL16CO_TPDOconfigMapP9CO_TPDO_th+0x28>
        }
#endif

    }

    TPDO->dataLength = length;
    f744:	7dfa      	ldrb	r2, [r7, #23]
    f746:	687b      	ldr	r3, [r7, #4]
    f748:	779a      	strb	r2, [r3, #30]

    return ret;
    f74a:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
    f74c:	4618      	mov	r0, r3
    f74e:	3734      	adds	r7, #52	; 0x34
    f750:	46bd      	mov	sp, r7
    f752:	bd90      	pop	{r4, r7, pc}
    f754:	0000f3c1 	.word	0x0000f3c1
    f758:	200019a4 	.word	0x200019a4
    f75c:	0000e3f5 	.word	0x0000e3f5

0000f760 <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t>:
/*
 * Function for accessing _RPDO communication parameter_ (index 0x1400+) from SDO server.
 *
 * For more information see file CO_SDO.h.
 */
static CO_SDO_abortCode_t CO_ODF_RPDOcom(CO_ODF_arg_t *ODF_arg){
    f760:	b580      	push	{r7, lr}
    f762:	b088      	sub	sp, #32
    f764:	af00      	add	r7, sp, #0
    f766:	6078      	str	r0, [r7, #4]
    CO_RPDO_t *RPDO;

    RPDO = (CO_RPDO_t*) ODF_arg->object;
    f768:	687b      	ldr	r3, [r7, #4]
    f76a:	681b      	ldr	r3, [r3, #0]
    f76c:	61fb      	str	r3, [r7, #28]

    /* Reading Object Dictionary variable */
    if(ODF_arg->reading){
    f76e:	687b      	ldr	r3, [r7, #4]
    f770:	7f5b      	ldrb	r3, [r3, #29]
    f772:	2b00      	cmp	r3, #0
    f774:	d025      	beq.n	f7c2 <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x62>
        if(ODF_arg->subIndex == 1){
    f776:	687b      	ldr	r3, [r7, #4]
    f778:	7f1b      	ldrb	r3, [r3, #28]
    f77a:	2b01      	cmp	r3, #1
    f77c:	d11f      	bne.n	f7be <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x5e>
            uint32_t *value = (uint32_t*) ODF_arg->data;
    f77e:	687b      	ldr	r3, [r7, #4]
    f780:	685b      	ldr	r3, [r3, #4]
    f782:	61bb      	str	r3, [r7, #24]

            /* if default COB ID is used, write default value here */
            if(((*value)&0xFFFF) == RPDO->defaultCOB_ID && RPDO->defaultCOB_ID)
    f784:	69bb      	ldr	r3, [r7, #24]
    f786:	681b      	ldr	r3, [r3, #0]
    f788:	b29a      	uxth	r2, r3
    f78a:	69fb      	ldr	r3, [r7, #28]
    f78c:	69db      	ldr	r3, [r3, #28]
    f78e:	429a      	cmp	r2, r3
    f790:	d10a      	bne.n	f7a8 <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x48>
    f792:	69fb      	ldr	r3, [r7, #28]
    f794:	69db      	ldr	r3, [r3, #28]
    f796:	2b00      	cmp	r3, #0
    f798:	d006      	beq.n	f7a8 <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x48>
                *value += RPDO->nodeId;
    f79a:	69bb      	ldr	r3, [r7, #24]
    f79c:	681b      	ldr	r3, [r3, #0]
    f79e:	69fa      	ldr	r2, [r7, #28]
    f7a0:	7e12      	ldrb	r2, [r2, #24]
    f7a2:	441a      	add	r2, r3
    f7a4:	69bb      	ldr	r3, [r7, #24]
    f7a6:	601a      	str	r2, [r3, #0]

            /* If PDO is not valid, set bit 31 */
            if(!RPDO->valid) *value |= 0x80000000L;
    f7a8:	69fb      	ldr	r3, [r7, #28]
    f7aa:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
    f7ae:	2b00      	cmp	r3, #0
    f7b0:	d105      	bne.n	f7be <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x5e>
    f7b2:	69bb      	ldr	r3, [r7, #24]
    f7b4:	681b      	ldr	r3, [r3, #0]
    f7b6:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
    f7ba:	69bb      	ldr	r3, [r7, #24]
    f7bc:	601a      	str	r2, [r3, #0]
        }
        return CO_SDO_AB_NONE;
    f7be:	2300      	movs	r3, #0
    f7c0:	e07f      	b.n	f8c2 <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x162>
    }

    /* Writing Object Dictionary variable */
    if(RPDO->restrictionFlags & 0x04)
    f7c2:	69fb      	ldr	r3, [r7, #28]
    f7c4:	f893 3020 	ldrb.w	r3, [r3, #32]
    f7c8:	f003 0304 	and.w	r3, r3, #4
    f7cc:	2b00      	cmp	r3, #0
    f7ce:	d001      	beq.n	f7d4 <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x74>
        return CO_SDO_AB_READONLY;  /* Attempt to write a read only object. */
    f7d0:	4b3e      	ldr	r3, [pc, #248]	; (f8cc <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x16c>)
    f7d2:	e076      	b.n	f8c2 <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x162>
    if(*RPDO->operatingState == CO_NMT_OPERATIONAL && (RPDO->restrictionFlags & 0x01))
    f7d4:	69fb      	ldr	r3, [r7, #28]
    f7d6:	695b      	ldr	r3, [r3, #20]
    f7d8:	781b      	ldrb	r3, [r3, #0]
    f7da:	2b05      	cmp	r3, #5
    f7dc:	d108      	bne.n	f7f0 <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x90>
    f7de:	69fb      	ldr	r3, [r7, #28]
    f7e0:	f893 3020 	ldrb.w	r3, [r3, #32]
    f7e4:	f003 0301 	and.w	r3, r3, #1
    f7e8:	2b00      	cmp	r3, #0
    f7ea:	d001      	beq.n	f7f0 <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x90>
        return CO_SDO_AB_DATA_DEV_STATE;   /* Data cannot be transferred or stored to the application because of the present device state. */
    f7ec:	4b38      	ldr	r3, [pc, #224]	; (f8d0 <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x170>)
    f7ee:	e068      	b.n	f8c2 <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x162>

    if(ODF_arg->subIndex == 1){   /* COB_ID */
    f7f0:	687b      	ldr	r3, [r7, #4]
    f7f2:	7f1b      	ldrb	r3, [r3, #28]
    f7f4:	2b01      	cmp	r3, #1
    f7f6:	d139      	bne.n	f86c <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x10c>
        uint32_t *value = (uint32_t*) ODF_arg->data;
    f7f8:	687b      	ldr	r3, [r7, #4]
    f7fa:	685b      	ldr	r3, [r3, #4]
    f7fc:	617b      	str	r3, [r7, #20]

        /* bits 11...29 must be zero */
        if(*value & 0x3FFF8000L)
    f7fe:	697b      	ldr	r3, [r7, #20]
    f800:	681a      	ldr	r2, [r3, #0]
    f802:	4b34      	ldr	r3, [pc, #208]	; (f8d4 <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x174>)
    f804:	4013      	ands	r3, r2
    f806:	2b00      	cmp	r3, #0
    f808:	d001      	beq.n	f80e <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0xae>
            return CO_SDO_AB_INVALID_VALUE;  /* Invalid value for parameter (download only). */
    f80a:	4b33      	ldr	r3, [pc, #204]	; (f8d8 <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x178>)
    f80c:	e059      	b.n	f8c2 <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x162>

        /* if default COB-ID is being written, write defaultCOB_ID without nodeId */
        if(((*value)&0xFFFF) == (RPDO->defaultCOB_ID + RPDO->nodeId)){
    f80e:	697b      	ldr	r3, [r7, #20]
    f810:	681b      	ldr	r3, [r3, #0]
    f812:	b29a      	uxth	r2, r3
    f814:	69fb      	ldr	r3, [r7, #28]
    f816:	69db      	ldr	r3, [r3, #28]
    f818:	69f9      	ldr	r1, [r7, #28]
    f81a:	7e09      	ldrb	r1, [r1, #24]
    f81c:	440b      	add	r3, r1
    f81e:	429a      	cmp	r2, r3
    f820:	d10c      	bne.n	f83c <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0xdc>
            *value &= 0xC0000000L;
    f822:	697b      	ldr	r3, [r7, #20]
    f824:	681b      	ldr	r3, [r3, #0]
    f826:	f003 4240 	and.w	r2, r3, #3221225472	; 0xc0000000
    f82a:	697b      	ldr	r3, [r7, #20]
    f82c:	601a      	str	r2, [r3, #0]
            *value += RPDO->defaultCOB_ID;
    f82e:	697b      	ldr	r3, [r7, #20]
    f830:	681a      	ldr	r2, [r3, #0]
    f832:	69fb      	ldr	r3, [r7, #28]
    f834:	69db      	ldr	r3, [r3, #28]
    f836:	441a      	add	r2, r3
    f838:	697b      	ldr	r3, [r7, #20]
    f83a:	601a      	str	r2, [r3, #0]
        }

        /* if PDO is valid, bits 0..29 can not be changed */
        if(RPDO->valid && ((*value ^ RPDO->RPDOCommPar->COB_IDUsedByRPDO) & 0x3FFFFFFFL))
    f83c:	69fb      	ldr	r3, [r7, #28]
    f83e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
    f842:	2b00      	cmp	r3, #0
    f844:	d00b      	beq.n	f85e <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0xfe>
    f846:	697b      	ldr	r3, [r7, #20]
    f848:	681a      	ldr	r2, [r3, #0]
    f84a:	69fb      	ldr	r3, [r7, #28]
    f84c:	68db      	ldr	r3, [r3, #12]
    f84e:	685b      	ldr	r3, [r3, #4]
    f850:	4053      	eors	r3, r2
    f852:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
    f856:	2b00      	cmp	r3, #0
    f858:	d001      	beq.n	f85e <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0xfe>
            return CO_SDO_AB_INVALID_VALUE;  /* Invalid value for parameter (download only). */
    f85a:	4b1f      	ldr	r3, [pc, #124]	; (f8d8 <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x178>)
    f85c:	e031      	b.n	f8c2 <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x162>

        /* configure RPDO */
        CO_RPDOconfigCom(RPDO, *value);
    f85e:	697b      	ldr	r3, [r7, #20]
    f860:	681b      	ldr	r3, [r3, #0]
    f862:	4619      	mov	r1, r3
    f864:	69f8      	ldr	r0, [r7, #28]
    f866:	4b1d      	ldr	r3, [pc, #116]	; (f8dc <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x17c>)
    f868:	4798      	blx	r3
    f86a:	e029      	b.n	f8c0 <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x160>
    }
    else if(ODF_arg->subIndex == 2){   /* Transmission_type */
    f86c:	687b      	ldr	r3, [r7, #4]
    f86e:	7f1b      	ldrb	r3, [r3, #28]
    f870:	2b02      	cmp	r3, #2
    f872:	d125      	bne.n	f8c0 <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x160>
        uint8_t *value = (uint8_t*) ODF_arg->data;
    f874:	687b      	ldr	r3, [r7, #4]
    f876:	685b      	ldr	r3, [r3, #4]
    f878:	613b      	str	r3, [r7, #16]
        bool_t synchronousPrev = RPDO->synchronous;
    f87a:	69fb      	ldr	r3, [r7, #28]
    f87c:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
    f880:	73fb      	strb	r3, [r7, #15]

        /* values from 241...253 are not valid */
        if(*value >= 241 && *value <= 253)
    f882:	693b      	ldr	r3, [r7, #16]
    f884:	781b      	ldrb	r3, [r3, #0]
    f886:	2bf0      	cmp	r3, #240	; 0xf0
    f888:	dd05      	ble.n	f896 <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x136>
    f88a:	693b      	ldr	r3, [r7, #16]
    f88c:	781b      	ldrb	r3, [r3, #0]
    f88e:	2bfd      	cmp	r3, #253	; 0xfd
    f890:	dc01      	bgt.n	f896 <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x136>
            return CO_SDO_AB_INVALID_VALUE;  /* Invalid value for parameter (download only). */
    f892:	4b11      	ldr	r3, [pc, #68]	; (f8d8 <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x178>)
    f894:	e015      	b.n	f8c2 <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x162>

        RPDO->synchronous = (*value <= 240) ? true : false;
    f896:	693b      	ldr	r3, [r7, #16]
    f898:	781b      	ldrb	r3, [r3, #0]
    f89a:	2bf0      	cmp	r3, #240	; 0xf0
    f89c:	bfd4      	ite	le
    f89e:	2301      	movle	r3, #1
    f8a0:	2300      	movgt	r3, #0
    f8a2:	b2db      	uxtb	r3, r3
    f8a4:	461a      	mov	r2, r3
    f8a6:	69fb      	ldr	r3, [r7, #28]
    f8a8:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

        /* Remove old message from second buffer. */
        if(RPDO->synchronous != synchronousPrev) {
    f8ac:	69fb      	ldr	r3, [r7, #28]
    f8ae:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
    f8b2:	7bfa      	ldrb	r2, [r7, #15]
    f8b4:	429a      	cmp	r2, r3
    f8b6:	d003      	beq.n	f8c0 <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x160>
            RPDO->CANrxNew[1] = false;
    f8b8:	69fb      	ldr	r3, [r7, #28]
    f8ba:	2200      	movs	r2, #0
    f8bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
        }
    }

    return CO_SDO_AB_NONE;
    f8c0:	2300      	movs	r3, #0
}
    f8c2:	4618      	mov	r0, r3
    f8c4:	3720      	adds	r7, #32
    f8c6:	46bd      	mov	sp, r7
    f8c8:	bd80      	pop	{r7, pc}
    f8ca:	bf00      	nop
    f8cc:	06010002 	.word	0x06010002
    f8d0:	08000022 	.word	0x08000022
    f8d4:	3fff8000 	.word	0x3fff8000
    f8d8:	06090030 	.word	0x06090030
    f8dc:	0000f255 	.word	0x0000f255

0000f8e0 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t>:
/*
 * Function for accessing _TPDO communication parameter_ (index 0x1800+) from SDO server.
 *
 * For more information see file CO_SDO.h.
 */
static CO_SDO_abortCode_t CO_ODF_TPDOcom(CO_ODF_arg_t *ODF_arg){
    f8e0:	b580      	push	{r7, lr}
    f8e2:	b088      	sub	sp, #32
    f8e4:	af00      	add	r7, sp, #0
    f8e6:	6078      	str	r0, [r7, #4]
    CO_TPDO_t *TPDO;

    TPDO = (CO_TPDO_t*) ODF_arg->object;
    f8e8:	687b      	ldr	r3, [r7, #4]
    f8ea:	681b      	ldr	r3, [r3, #0]
    f8ec:	61fb      	str	r3, [r7, #28]

    if(ODF_arg->subIndex == 4) return CO_SDO_AB_SUB_UNKNOWN;  /* Sub-index does not exist. */
    f8ee:	687b      	ldr	r3, [r7, #4]
    f8f0:	7f1b      	ldrb	r3, [r3, #28]
    f8f2:	2b04      	cmp	r3, #4
    f8f4:	d101      	bne.n	f8fa <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1a>
    f8f6:	4b6d      	ldr	r3, [pc, #436]	; (faac <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1cc>)
    f8f8:	e0d4      	b.n	faa4 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1c4>

    /* Reading Object Dictionary variable */
    if(ODF_arg->reading){
    f8fa:	687b      	ldr	r3, [r7, #4]
    f8fc:	7f5b      	ldrb	r3, [r3, #29]
    f8fe:	2b00      	cmp	r3, #0
    f900:	d024      	beq.n	f94c <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x6c>
        if(ODF_arg->subIndex == 1){   /* COB_ID */
    f902:	687b      	ldr	r3, [r7, #4]
    f904:	7f1b      	ldrb	r3, [r3, #28]
    f906:	2b01      	cmp	r3, #1
    f908:	d11e      	bne.n	f948 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x68>
            uint32_t *value = (uint32_t*) ODF_arg->data;
    f90a:	687b      	ldr	r3, [r7, #4]
    f90c:	685b      	ldr	r3, [r3, #4]
    f90e:	61bb      	str	r3, [r7, #24]

            /* if default COB ID is used, write default value here */
            if(((*value)&0xFFFF) == TPDO->defaultCOB_ID && TPDO->defaultCOB_ID)
    f910:	69bb      	ldr	r3, [r7, #24]
    f912:	681b      	ldr	r3, [r3, #0]
    f914:	b29a      	uxth	r2, r3
    f916:	69fb      	ldr	r3, [r7, #28]
    f918:	699b      	ldr	r3, [r3, #24]
    f91a:	429a      	cmp	r2, r3
    f91c:	d10a      	bne.n	f934 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x54>
    f91e:	69fb      	ldr	r3, [r7, #28]
    f920:	699b      	ldr	r3, [r3, #24]
    f922:	2b00      	cmp	r3, #0
    f924:	d006      	beq.n	f934 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x54>
                *value += TPDO->nodeId;
    f926:	69bb      	ldr	r3, [r7, #24]
    f928:	681b      	ldr	r3, [r3, #0]
    f92a:	69fa      	ldr	r2, [r7, #28]
    f92c:	7d12      	ldrb	r2, [r2, #20]
    f92e:	441a      	add	r2, r3
    f930:	69bb      	ldr	r3, [r7, #24]
    f932:	601a      	str	r2, [r3, #0]

            /* If PDO is not valid, set bit 31 */
            if(!TPDO->valid) *value |= 0x80000000L;
    f934:	69fb      	ldr	r3, [r7, #28]
    f936:	7f5b      	ldrb	r3, [r3, #29]
    f938:	2b00      	cmp	r3, #0
    f93a:	d105      	bne.n	f948 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x68>
    f93c:	69bb      	ldr	r3, [r7, #24]
    f93e:	681b      	ldr	r3, [r3, #0]
    f940:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
    f944:	69bb      	ldr	r3, [r7, #24]
    f946:	601a      	str	r2, [r3, #0]
        }
        return CO_SDO_AB_NONE;
    f948:	2300      	movs	r3, #0
    f94a:	e0ab      	b.n	faa4 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1c4>
    }

    /* Writing Object Dictionary variable */
    if(TPDO->restrictionFlags & 0x04)
    f94c:	69fb      	ldr	r3, [r7, #28]
    f94e:	7f1b      	ldrb	r3, [r3, #28]
    f950:	f003 0304 	and.w	r3, r3, #4
    f954:	2b00      	cmp	r3, #0
    f956:	d001      	beq.n	f95c <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x7c>
        return CO_SDO_AB_READONLY;  /* Attempt to write a read only object. */
    f958:	4b55      	ldr	r3, [pc, #340]	; (fab0 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1d0>)
    f95a:	e0a3      	b.n	faa4 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1c4>
    if(*TPDO->operatingState == CO_NMT_OPERATIONAL && (TPDO->restrictionFlags & 0x01))
    f95c:	69fb      	ldr	r3, [r7, #28]
    f95e:	691b      	ldr	r3, [r3, #16]
    f960:	781b      	ldrb	r3, [r3, #0]
    f962:	2b05      	cmp	r3, #5
    f964:	d107      	bne.n	f976 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x96>
    f966:	69fb      	ldr	r3, [r7, #28]
    f968:	7f1b      	ldrb	r3, [r3, #28]
    f96a:	f003 0301 	and.w	r3, r3, #1
    f96e:	2b00      	cmp	r3, #0
    f970:	d001      	beq.n	f976 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x96>
        return CO_SDO_AB_DATA_DEV_STATE;   /* Data cannot be transferred or stored to the application because of the present device state. */
    f972:	4b50      	ldr	r3, [pc, #320]	; (fab4 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1d4>)
    f974:	e096      	b.n	faa4 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1c4>

    if(ODF_arg->subIndex == 1){   /* COB_ID */
    f976:	687b      	ldr	r3, [r7, #4]
    f978:	7f1b      	ldrb	r3, [r3, #28]
    f97a:	2b01      	cmp	r3, #1
    f97c:	d140      	bne.n	fa00 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x120>
        uint32_t *value = (uint32_t*) ODF_arg->data;
    f97e:	687b      	ldr	r3, [r7, #4]
    f980:	685b      	ldr	r3, [r3, #4]
    f982:	617b      	str	r3, [r7, #20]

        /* bits 11...29 must be zero */
        if(*value & 0x3FFF8000L)
    f984:	697b      	ldr	r3, [r7, #20]
    f986:	681a      	ldr	r2, [r3, #0]
    f988:	4b4b      	ldr	r3, [pc, #300]	; (fab8 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1d8>)
    f98a:	4013      	ands	r3, r2
    f98c:	2b00      	cmp	r3, #0
    f98e:	d001      	beq.n	f994 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0xb4>
            return CO_SDO_AB_INVALID_VALUE;  /* Invalid value for parameter (download only). */
    f990:	4b4a      	ldr	r3, [pc, #296]	; (fabc <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1dc>)
    f992:	e087      	b.n	faa4 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1c4>

        /* if default COB-ID is being written, write defaultCOB_ID without nodeId */
        if(((*value)&0xFFFF) == (TPDO->defaultCOB_ID + TPDO->nodeId)){
    f994:	697b      	ldr	r3, [r7, #20]
    f996:	681b      	ldr	r3, [r3, #0]
    f998:	b29a      	uxth	r2, r3
    f99a:	69fb      	ldr	r3, [r7, #28]
    f99c:	699b      	ldr	r3, [r3, #24]
    f99e:	69f9      	ldr	r1, [r7, #28]
    f9a0:	7d09      	ldrb	r1, [r1, #20]
    f9a2:	440b      	add	r3, r1
    f9a4:	429a      	cmp	r2, r3
    f9a6:	d10c      	bne.n	f9c2 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0xe2>
            *value &= 0xC0000000L;
    f9a8:	697b      	ldr	r3, [r7, #20]
    f9aa:	681b      	ldr	r3, [r3, #0]
    f9ac:	f003 4240 	and.w	r2, r3, #3221225472	; 0xc0000000
    f9b0:	697b      	ldr	r3, [r7, #20]
    f9b2:	601a      	str	r2, [r3, #0]
            *value += TPDO->defaultCOB_ID;
    f9b4:	697b      	ldr	r3, [r7, #20]
    f9b6:	681a      	ldr	r2, [r3, #0]
    f9b8:	69fb      	ldr	r3, [r7, #28]
    f9ba:	699b      	ldr	r3, [r3, #24]
    f9bc:	441a      	add	r2, r3
    f9be:	697b      	ldr	r3, [r7, #20]
    f9c0:	601a      	str	r2, [r3, #0]
        }

        /* if PDO is valid, bits 0..29 can not be changed */
        if(TPDO->valid && ((*value ^ TPDO->TPDOCommPar->COB_IDUsedByTPDO) & 0x3FFFFFFFL))
    f9c2:	69fb      	ldr	r3, [r7, #28]
    f9c4:	7f5b      	ldrb	r3, [r3, #29]
    f9c6:	2b00      	cmp	r3, #0
    f9c8:	d00b      	beq.n	f9e2 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x102>
    f9ca:	697b      	ldr	r3, [r7, #20]
    f9cc:	681a      	ldr	r2, [r3, #0]
    f9ce:	69fb      	ldr	r3, [r7, #28]
    f9d0:	689b      	ldr	r3, [r3, #8]
    f9d2:	685b      	ldr	r3, [r3, #4]
    f9d4:	4053      	eors	r3, r2
    f9d6:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
    f9da:	2b00      	cmp	r3, #0
    f9dc:	d001      	beq.n	f9e2 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x102>
            return CO_SDO_AB_INVALID_VALUE;  /* Invalid value for parameter (download only). */
    f9de:	4b37      	ldr	r3, [pc, #220]	; (fabc <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1dc>)
    f9e0:	e060      	b.n	faa4 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1c4>

        /* configure TPDO */
        CO_TPDOconfigCom(TPDO, *value, TPDO->CANtxBuff->syncFlag);
    f9e2:	697b      	ldr	r3, [r7, #20]
    f9e4:	6819      	ldr	r1, [r3, #0]
    f9e6:	69fb      	ldr	r3, [r7, #28]
    f9e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    f9ea:	7b9b      	ldrb	r3, [r3, #14]
    f9ec:	b2db      	uxtb	r3, r3
    f9ee:	461a      	mov	r2, r3
    f9f0:	69f8      	ldr	r0, [r7, #28]
    f9f2:	4b33      	ldr	r3, [pc, #204]	; (fac0 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1e0>)
    f9f4:	4798      	blx	r3
        TPDO->syncCounter = 255;
    f9f6:	69fb      	ldr	r3, [r7, #28]
    f9f8:	22ff      	movs	r2, #255	; 0xff
    f9fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    f9fe:	e050      	b.n	faa2 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1c2>
    }
    else if(ODF_arg->subIndex == 2){   /* Transmission_type */
    fa00:	687b      	ldr	r3, [r7, #4]
    fa02:	7f1b      	ldrb	r3, [r3, #28]
    fa04:	2b02      	cmp	r3, #2
    fa06:	d11b      	bne.n	fa40 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x160>
        uint8_t *value = (uint8_t*) ODF_arg->data;
    fa08:	687b      	ldr	r3, [r7, #4]
    fa0a:	685b      	ldr	r3, [r3, #4]
    fa0c:	613b      	str	r3, [r7, #16]

        /* values from 241...253 are not valid */
        if(*value >= 241 && *value <= 253)
    fa0e:	693b      	ldr	r3, [r7, #16]
    fa10:	781b      	ldrb	r3, [r3, #0]
    fa12:	2bf0      	cmp	r3, #240	; 0xf0
    fa14:	dd05      	ble.n	fa22 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x142>
    fa16:	693b      	ldr	r3, [r7, #16]
    fa18:	781b      	ldrb	r3, [r3, #0]
    fa1a:	2bfd      	cmp	r3, #253	; 0xfd
    fa1c:	dc01      	bgt.n	fa22 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x142>
            return CO_SDO_AB_INVALID_VALUE;  /* Invalid value for parameter (download only). */
    fa1e:	4b27      	ldr	r3, [pc, #156]	; (fabc <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1dc>)
    fa20:	e040      	b.n	faa4 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1c4>
        TPDO->CANtxBuff->syncFlag = (*value <= 240) ? 1 : 0;
    fa22:	69fb      	ldr	r3, [r7, #28]
    fa24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    fa26:	693a      	ldr	r2, [r7, #16]
    fa28:	7812      	ldrb	r2, [r2, #0]
    fa2a:	2af0      	cmp	r2, #240	; 0xf0
    fa2c:	dc01      	bgt.n	fa32 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x152>
    fa2e:	2201      	movs	r2, #1
    fa30:	e000      	b.n	fa34 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x154>
    fa32:	2200      	movs	r2, #0
    fa34:	739a      	strb	r2, [r3, #14]
        TPDO->syncCounter = 255;
    fa36:	69fb      	ldr	r3, [r7, #28]
    fa38:	22ff      	movs	r2, #255	; 0xff
    fa3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    fa3e:	e030      	b.n	faa2 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1c2>
    }
    else if(ODF_arg->subIndex == 3){   /* Inhibit_Time */
    fa40:	687b      	ldr	r3, [r7, #4]
    fa42:	7f1b      	ldrb	r3, [r3, #28]
    fa44:	2b03      	cmp	r3, #3
    fa46:	d109      	bne.n	fa5c <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x17c>
        /* if PDO is valid, value can not be changed */
        if(TPDO->valid)
    fa48:	69fb      	ldr	r3, [r7, #28]
    fa4a:	7f5b      	ldrb	r3, [r3, #29]
    fa4c:	2b00      	cmp	r3, #0
    fa4e:	d001      	beq.n	fa54 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x174>
            return CO_SDO_AB_INVALID_VALUE;  /* Invalid value for parameter (download only). */
    fa50:	4b1a      	ldr	r3, [pc, #104]	; (fabc <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1dc>)
    fa52:	e027      	b.n	faa4 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1c4>

        TPDO->inhibitTimer = 0;
    fa54:	69fb      	ldr	r3, [r7, #28]
    fa56:	2200      	movs	r2, #0
    fa58:	645a      	str	r2, [r3, #68]	; 0x44
    fa5a:	e022      	b.n	faa2 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1c2>
    }
    else if(ODF_arg->subIndex == 5){   /* Event_Timer */
    fa5c:	687b      	ldr	r3, [r7, #4]
    fa5e:	7f1b      	ldrb	r3, [r3, #28]
    fa60:	2b05      	cmp	r3, #5
    fa62:	d10b      	bne.n	fa7c <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x19c>
        uint32_t *value = (uint32_t*) ODF_arg->data;
    fa64:	687b      	ldr	r3, [r7, #4]
    fa66:	685b      	ldr	r3, [r3, #4]
    fa68:	60bb      	str	r3, [r7, #8]

        TPDO->eventTimer = ((uint32_t) *value) * 1000;
    fa6a:	68bb      	ldr	r3, [r7, #8]
    fa6c:	681b      	ldr	r3, [r3, #0]
    fa6e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    fa72:	fb02 f203 	mul.w	r2, r2, r3
    fa76:	69fb      	ldr	r3, [r7, #28]
    fa78:	649a      	str	r2, [r3, #72]	; 0x48
    fa7a:	e012      	b.n	faa2 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1c2>
    }
    else if(ODF_arg->subIndex == 6){   /* SYNC start value */
    fa7c:	687b      	ldr	r3, [r7, #4]
    fa7e:	7f1b      	ldrb	r3, [r3, #28]
    fa80:	2b06      	cmp	r3, #6
    fa82:	d10e      	bne.n	faa2 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1c2>
        uint8_t *value = (uint8_t*) ODF_arg->data;
    fa84:	687b      	ldr	r3, [r7, #4]
    fa86:	685b      	ldr	r3, [r3, #4]
    fa88:	60fb      	str	r3, [r7, #12]

        /* if PDO is valid, value can not be changed */
        if(TPDO->valid)
    fa8a:	69fb      	ldr	r3, [r7, #28]
    fa8c:	7f5b      	ldrb	r3, [r3, #29]
    fa8e:	2b00      	cmp	r3, #0
    fa90:	d001      	beq.n	fa96 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1b6>
            return CO_SDO_AB_INVALID_VALUE;  /* Invalid value for parameter (download only). */
    fa92:	4b0a      	ldr	r3, [pc, #40]	; (fabc <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1dc>)
    fa94:	e006      	b.n	faa4 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1c4>

        /* values from 240...255 are not valid */
        if(*value > 240)
    fa96:	68fb      	ldr	r3, [r7, #12]
    fa98:	781b      	ldrb	r3, [r3, #0]
    fa9a:	2bf0      	cmp	r3, #240	; 0xf0
    fa9c:	dd01      	ble.n	faa2 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1c2>
            return CO_SDO_AB_INVALID_VALUE;  /* Invalid value for parameter (download only). */
    fa9e:	4b07      	ldr	r3, [pc, #28]	; (fabc <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1dc>)
    faa0:	e000      	b.n	faa4 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1c4>
    }

    return CO_SDO_AB_NONE;
    faa2:	2300      	movs	r3, #0
}
    faa4:	4618      	mov	r0, r3
    faa6:	3720      	adds	r7, #32
    faa8:	46bd      	mov	sp, r7
    faaa:	bd80      	pop	{r7, pc}
    faac:	06090011 	.word	0x06090011
    fab0:	06010002 	.word	0x06010002
    fab4:	08000022 	.word	0x08000022
    fab8:	3fff8000 	.word	0x3fff8000
    fabc:	06090030 	.word	0x06090030
    fac0:	0000f32d 	.word	0x0000f32d

0000fac4 <_ZL14CO_ODF_RPDOmapP12CO_ODF_arg_t>:
/*
 * Function for accessing _RPDO mapping parameter_ (index 0x1600+) from SDO server.
 *
 * For more information see file CO_SDO.h.
 */
static CO_SDO_abortCode_t CO_ODF_RPDOmap(CO_ODF_arg_t *ODF_arg){
    fac4:	b590      	push	{r4, r7, lr}
    fac6:	b08d      	sub	sp, #52	; 0x34
    fac8:	af04      	add	r7, sp, #16
    faca:	6078      	str	r0, [r7, #4]
    CO_RPDO_t *RPDO;

    RPDO = (CO_RPDO_t*) ODF_arg->object;
    facc:	687b      	ldr	r3, [r7, #4]
    face:	681b      	ldr	r3, [r3, #0]
    fad0:	61fb      	str	r3, [r7, #28]

    /* Reading Object Dictionary variable */
    if(ODF_arg->reading){
    fad2:	687b      	ldr	r3, [r7, #4]
    fad4:	7f5b      	ldrb	r3, [r3, #29]
    fad6:	2b00      	cmp	r3, #0
    fad8:	d010      	beq.n	fafc <_ZL14CO_ODF_RPDOmapP12CO_ODF_arg_t+0x38>
        uint8_t *value = (uint8_t*) ODF_arg->data;
    fada:	687b      	ldr	r3, [r7, #4]
    fadc:	685b      	ldr	r3, [r3, #4]
    fade:	61bb      	str	r3, [r7, #24]

        if(ODF_arg->subIndex == 0){
    fae0:	687b      	ldr	r3, [r7, #4]
    fae2:	7f1b      	ldrb	r3, [r3, #28]
    fae4:	2b00      	cmp	r3, #0
    fae6:	d107      	bne.n	faf8 <_ZL14CO_ODF_RPDOmapP12CO_ODF_arg_t+0x34>
            /* If there is error in mapping, dataLength is 0, so numberOfMappedObjects is 0. */
            if(!RPDO->dataLength) *value = 0;
    fae8:	69fb      	ldr	r3, [r7, #28]
    faea:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
    faee:	2b00      	cmp	r3, #0
    faf0:	d102      	bne.n	faf8 <_ZL14CO_ODF_RPDOmapP12CO_ODF_arg_t+0x34>
    faf2:	69bb      	ldr	r3, [r7, #24]
    faf4:	2200      	movs	r2, #0
    faf6:	701a      	strb	r2, [r3, #0]
        }
        return CO_SDO_AB_NONE;
    faf8:	2300      	movs	r3, #0
    fafa:	e054      	b.n	fba6 <_ZL14CO_ODF_RPDOmapP12CO_ODF_arg_t+0xe2>
    }

    /* Writing Object Dictionary variable */
    if(RPDO->restrictionFlags & 0x08)
    fafc:	69fb      	ldr	r3, [r7, #28]
    fafe:	f893 3020 	ldrb.w	r3, [r3, #32]
    fb02:	f003 0308 	and.w	r3, r3, #8
    fb06:	2b00      	cmp	r3, #0
    fb08:	d001      	beq.n	fb0e <_ZL14CO_ODF_RPDOmapP12CO_ODF_arg_t+0x4a>
        return CO_SDO_AB_READONLY;  /* Attempt to write a read only object. */
    fb0a:	4b29      	ldr	r3, [pc, #164]	; (fbb0 <_ZL14CO_ODF_RPDOmapP12CO_ODF_arg_t+0xec>)
    fb0c:	e04b      	b.n	fba6 <_ZL14CO_ODF_RPDOmapP12CO_ODF_arg_t+0xe2>
    if(*RPDO->operatingState == CO_NMT_OPERATIONAL && (RPDO->restrictionFlags & 0x02))
    fb0e:	69fb      	ldr	r3, [r7, #28]
    fb10:	695b      	ldr	r3, [r3, #20]
    fb12:	781b      	ldrb	r3, [r3, #0]
    fb14:	2b05      	cmp	r3, #5
    fb16:	d108      	bne.n	fb2a <_ZL14CO_ODF_RPDOmapP12CO_ODF_arg_t+0x66>
    fb18:	69fb      	ldr	r3, [r7, #28]
    fb1a:	f893 3020 	ldrb.w	r3, [r3, #32]
    fb1e:	f003 0302 	and.w	r3, r3, #2
    fb22:	2b00      	cmp	r3, #0
    fb24:	d001      	beq.n	fb2a <_ZL14CO_ODF_RPDOmapP12CO_ODF_arg_t+0x66>
        return CO_SDO_AB_DATA_DEV_STATE;   /* Data cannot be transferred or stored to the application because of the present device state. */
    fb26:	4b23      	ldr	r3, [pc, #140]	; (fbb4 <_ZL14CO_ODF_RPDOmapP12CO_ODF_arg_t+0xf0>)
    fb28:	e03d      	b.n	fba6 <_ZL14CO_ODF_RPDOmapP12CO_ODF_arg_t+0xe2>
    if(RPDO->valid)
    fb2a:	69fb      	ldr	r3, [r7, #28]
    fb2c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
    fb30:	2b00      	cmp	r3, #0
    fb32:	d001      	beq.n	fb38 <_ZL14CO_ODF_RPDOmapP12CO_ODF_arg_t+0x74>
        return CO_SDO_AB_UNSUPPORTED_ACCESS;  /* Unsupported access to an object. */
    fb34:	4b20      	ldr	r3, [pc, #128]	; (fbb8 <_ZL14CO_ODF_RPDOmapP12CO_ODF_arg_t+0xf4>)
    fb36:	e036      	b.n	fba6 <_ZL14CO_ODF_RPDOmapP12CO_ODF_arg_t+0xe2>

    /* numberOfMappedObjects */
    if(ODF_arg->subIndex == 0){
    fb38:	687b      	ldr	r3, [r7, #4]
    fb3a:	7f1b      	ldrb	r3, [r3, #28]
    fb3c:	2b00      	cmp	r3, #0
    fb3e:	d110      	bne.n	fb62 <_ZL14CO_ODF_RPDOmapP12CO_ODF_arg_t+0x9e>
        uint8_t *value = (uint8_t*) ODF_arg->data;
    fb40:	687b      	ldr	r3, [r7, #4]
    fb42:	685b      	ldr	r3, [r3, #4]
    fb44:	617b      	str	r3, [r7, #20]

        if(*value > 8)
    fb46:	697b      	ldr	r3, [r7, #20]
    fb48:	781b      	ldrb	r3, [r3, #0]
    fb4a:	2b08      	cmp	r3, #8
    fb4c:	dd01      	ble.n	fb52 <_ZL14CO_ODF_RPDOmapP12CO_ODF_arg_t+0x8e>
            return CO_SDO_AB_MAP_LEN;  /* Number and length of object to be mapped exceeds PDO length. */
    fb4e:	4b1b      	ldr	r3, [pc, #108]	; (fbbc <_ZL14CO_ODF_RPDOmapP12CO_ODF_arg_t+0xf8>)
    fb50:	e029      	b.n	fba6 <_ZL14CO_ODF_RPDOmapP12CO_ODF_arg_t+0xe2>

        /* configure mapping */
        return (CO_SDO_abortCode_t)CO_RPDOconfigMap(RPDO, *value);
    fb52:	697b      	ldr	r3, [r7, #20]
    fb54:	781b      	ldrb	r3, [r3, #0]
    fb56:	4619      	mov	r1, r3
    fb58:	69f8      	ldr	r0, [r7, #28]
    fb5a:	4b19      	ldr	r3, [pc, #100]	; (fbc0 <_ZL14CO_ODF_RPDOmapP12CO_ODF_arg_t+0xfc>)
    fb5c:	4798      	blx	r3
    fb5e:	4603      	mov	r3, r0
    fb60:	e021      	b.n	fba6 <_ZL14CO_ODF_RPDOmapP12CO_ODF_arg_t+0xe2>
    }

    /* mappedObject */
    else{
        uint32_t *value = (uint32_t*) ODF_arg->data;
    fb62:	687b      	ldr	r3, [r7, #4]
    fb64:	685b      	ldr	r3, [r3, #4]
    fb66:	613b      	str	r3, [r7, #16]
        uint8_t* pData;
        uint8_t length = 0;
    fb68:	2300      	movs	r3, #0
    fb6a:	72fb      	strb	r3, [r7, #11]
        uint8_t dummy = 0;
    fb6c:	2300      	movs	r3, #0
    fb6e:	72bb      	strb	r3, [r7, #10]
        uint8_t MBvar;

        if(RPDO->dataLength)
    fb70:	69fb      	ldr	r3, [r7, #28]
    fb72:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
    fb76:	2b00      	cmp	r3, #0
    fb78:	d001      	beq.n	fb7e <_ZL14CO_ODF_RPDOmapP12CO_ODF_arg_t+0xba>
            return CO_SDO_AB_UNSUPPORTED_ACCESS;  /* Unsupported access to an object. */
    fb7a:	4b0f      	ldr	r3, [pc, #60]	; (fbb8 <_ZL14CO_ODF_RPDOmapP12CO_ODF_arg_t+0xf4>)
    fb7c:	e013      	b.n	fba6 <_ZL14CO_ODF_RPDOmapP12CO_ODF_arg_t+0xe2>

        /* verify if mapping is correct */
        return  (CO_SDO_abortCode_t)CO_PDOfindMap(
    fb7e:	69fb      	ldr	r3, [r7, #28]
    fb80:	6858      	ldr	r0, [r3, #4]
    fb82:	693b      	ldr	r3, [r7, #16]
    fb84:	6819      	ldr	r1, [r3, #0]
               *value,
                0,
               &pData,
               &length,
               &dummy,
               &MBvar);
    fb86:	f107 020c 	add.w	r2, r7, #12
    fb8a:	f107 0309 	add.w	r3, r7, #9
    fb8e:	9302      	str	r3, [sp, #8]
    fb90:	f107 030a 	add.w	r3, r7, #10
    fb94:	9301      	str	r3, [sp, #4]
    fb96:	f107 030b 	add.w	r3, r7, #11
    fb9a:	9300      	str	r3, [sp, #0]
    fb9c:	4613      	mov	r3, r2
    fb9e:	2200      	movs	r2, #0
    fba0:	4c08      	ldr	r4, [pc, #32]	; (fbc4 <_ZL14CO_ODF_RPDOmapP12CO_ODF_arg_t+0x100>)
    fba2:	47a0      	blx	r4
    fba4:	4603      	mov	r3, r0
    }

    return CO_SDO_AB_NONE;
}
    fba6:	4618      	mov	r0, r3
    fba8:	3724      	adds	r7, #36	; 0x24
    fbaa:	46bd      	mov	sp, r7
    fbac:	bd90      	pop	{r4, r7, pc}
    fbae:	bf00      	nop
    fbb0:	06010002 	.word	0x06010002
    fbb4:	08000022 	.word	0x08000022
    fbb8:	06010000 	.word	0x06010000
    fbbc:	06040042 	.word	0x06040042
    fbc0:	0000f5c1 	.word	0x0000f5c1
    fbc4:	0000f3c1 	.word	0x0000f3c1

0000fbc8 <_ZL14CO_ODF_TPDOmapP12CO_ODF_arg_t>:
/*
 * Function for accessing _TPDO mapping parameter_ (index 0x1A00+) from SDO server.
 *
 * For more information see file CO_SDO.h.
 */
static CO_SDO_abortCode_t CO_ODF_TPDOmap(CO_ODF_arg_t *ODF_arg){
    fbc8:	b590      	push	{r4, r7, lr}
    fbca:	b08d      	sub	sp, #52	; 0x34
    fbcc:	af04      	add	r7, sp, #16
    fbce:	6078      	str	r0, [r7, #4]
    CO_TPDO_t *TPDO;

    TPDO = (CO_TPDO_t*) ODF_arg->object;
    fbd0:	687b      	ldr	r3, [r7, #4]
    fbd2:	681b      	ldr	r3, [r3, #0]
    fbd4:	61fb      	str	r3, [r7, #28]

    /* Reading Object Dictionary variable */
    if(ODF_arg->reading){
    fbd6:	687b      	ldr	r3, [r7, #4]
    fbd8:	7f5b      	ldrb	r3, [r3, #29]
    fbda:	2b00      	cmp	r3, #0
    fbdc:	d00f      	beq.n	fbfe <_ZL14CO_ODF_TPDOmapP12CO_ODF_arg_t+0x36>
        uint8_t *value = (uint8_t*) ODF_arg->data;
    fbde:	687b      	ldr	r3, [r7, #4]
    fbe0:	685b      	ldr	r3, [r3, #4]
    fbe2:	61bb      	str	r3, [r7, #24]

        if(ODF_arg->subIndex == 0){
    fbe4:	687b      	ldr	r3, [r7, #4]
    fbe6:	7f1b      	ldrb	r3, [r3, #28]
    fbe8:	2b00      	cmp	r3, #0
    fbea:	d106      	bne.n	fbfa <_ZL14CO_ODF_TPDOmapP12CO_ODF_arg_t+0x32>
            /* If there is error in mapping, dataLength is 0, so numberOfMappedObjects is 0. */
            if(!TPDO->dataLength) *value = 0;
    fbec:	69fb      	ldr	r3, [r7, #28]
    fbee:	7f9b      	ldrb	r3, [r3, #30]
    fbf0:	2b00      	cmp	r3, #0
    fbf2:	d102      	bne.n	fbfa <_ZL14CO_ODF_TPDOmapP12CO_ODF_arg_t+0x32>
    fbf4:	69bb      	ldr	r3, [r7, #24]
    fbf6:	2200      	movs	r2, #0
    fbf8:	701a      	strb	r2, [r3, #0]
        }
        return CO_SDO_AB_NONE;
    fbfa:	2300      	movs	r3, #0
    fbfc:	e050      	b.n	fca0 <_ZL14CO_ODF_TPDOmapP12CO_ODF_arg_t+0xd8>
    }

    /* Writing Object Dictionary variable */
    if(TPDO->restrictionFlags & 0x08)
    fbfe:	69fb      	ldr	r3, [r7, #28]
    fc00:	7f1b      	ldrb	r3, [r3, #28]
    fc02:	f003 0308 	and.w	r3, r3, #8
    fc06:	2b00      	cmp	r3, #0
    fc08:	d001      	beq.n	fc0e <_ZL14CO_ODF_TPDOmapP12CO_ODF_arg_t+0x46>
        return CO_SDO_AB_READONLY;  /* Attempt to write a read only object. */
    fc0a:	4b27      	ldr	r3, [pc, #156]	; (fca8 <_ZL14CO_ODF_TPDOmapP12CO_ODF_arg_t+0xe0>)
    fc0c:	e048      	b.n	fca0 <_ZL14CO_ODF_TPDOmapP12CO_ODF_arg_t+0xd8>
    if(*TPDO->operatingState == CO_NMT_OPERATIONAL && (TPDO->restrictionFlags & 0x02))
    fc0e:	69fb      	ldr	r3, [r7, #28]
    fc10:	691b      	ldr	r3, [r3, #16]
    fc12:	781b      	ldrb	r3, [r3, #0]
    fc14:	2b05      	cmp	r3, #5
    fc16:	d107      	bne.n	fc28 <_ZL14CO_ODF_TPDOmapP12CO_ODF_arg_t+0x60>
    fc18:	69fb      	ldr	r3, [r7, #28]
    fc1a:	7f1b      	ldrb	r3, [r3, #28]
    fc1c:	f003 0302 	and.w	r3, r3, #2
    fc20:	2b00      	cmp	r3, #0
    fc22:	d001      	beq.n	fc28 <_ZL14CO_ODF_TPDOmapP12CO_ODF_arg_t+0x60>
        return CO_SDO_AB_DATA_DEV_STATE;   /* Data cannot be transferred or stored to the application because of the present device state. */
    fc24:	4b21      	ldr	r3, [pc, #132]	; (fcac <_ZL14CO_ODF_TPDOmapP12CO_ODF_arg_t+0xe4>)
    fc26:	e03b      	b.n	fca0 <_ZL14CO_ODF_TPDOmapP12CO_ODF_arg_t+0xd8>
    if(TPDO->valid)
    fc28:	69fb      	ldr	r3, [r7, #28]
    fc2a:	7f5b      	ldrb	r3, [r3, #29]
    fc2c:	2b00      	cmp	r3, #0
    fc2e:	d001      	beq.n	fc34 <_ZL14CO_ODF_TPDOmapP12CO_ODF_arg_t+0x6c>
        return CO_SDO_AB_UNSUPPORTED_ACCESS;  /* Unsupported access to an object. */
    fc30:	4b1f      	ldr	r3, [pc, #124]	; (fcb0 <_ZL14CO_ODF_TPDOmapP12CO_ODF_arg_t+0xe8>)
    fc32:	e035      	b.n	fca0 <_ZL14CO_ODF_TPDOmapP12CO_ODF_arg_t+0xd8>

    /* numberOfMappedObjects */
    if(ODF_arg->subIndex == 0){
    fc34:	687b      	ldr	r3, [r7, #4]
    fc36:	7f1b      	ldrb	r3, [r3, #28]
    fc38:	2b00      	cmp	r3, #0
    fc3a:	d110      	bne.n	fc5e <_ZL14CO_ODF_TPDOmapP12CO_ODF_arg_t+0x96>
        uint8_t *value = (uint8_t*) ODF_arg->data;
    fc3c:	687b      	ldr	r3, [r7, #4]
    fc3e:	685b      	ldr	r3, [r3, #4]
    fc40:	617b      	str	r3, [r7, #20]

        if(*value > 8)
    fc42:	697b      	ldr	r3, [r7, #20]
    fc44:	781b      	ldrb	r3, [r3, #0]
    fc46:	2b08      	cmp	r3, #8
    fc48:	dd01      	ble.n	fc4e <_ZL14CO_ODF_TPDOmapP12CO_ODF_arg_t+0x86>
            return CO_SDO_AB_MAP_LEN;  /* Number and length of object to be mapped exceeds PDO length. */
    fc4a:	4b1a      	ldr	r3, [pc, #104]	; (fcb4 <_ZL14CO_ODF_TPDOmapP12CO_ODF_arg_t+0xec>)
    fc4c:	e028      	b.n	fca0 <_ZL14CO_ODF_TPDOmapP12CO_ODF_arg_t+0xd8>

        /* configure mapping */
        return (CO_SDO_abortCode_t)CO_TPDOconfigMap(TPDO, *value);
    fc4e:	697b      	ldr	r3, [r7, #20]
    fc50:	781b      	ldrb	r3, [r3, #0]
    fc52:	4619      	mov	r1, r3
    fc54:	69f8      	ldr	r0, [r7, #28]
    fc56:	4b18      	ldr	r3, [pc, #96]	; (fcb8 <_ZL14CO_ODF_TPDOmapP12CO_ODF_arg_t+0xf0>)
    fc58:	4798      	blx	r3
    fc5a:	4603      	mov	r3, r0
    fc5c:	e020      	b.n	fca0 <_ZL14CO_ODF_TPDOmapP12CO_ODF_arg_t+0xd8>
    }

    /* mappedObject */
    else{
        uint32_t *value = (uint32_t*) ODF_arg->data;
    fc5e:	687b      	ldr	r3, [r7, #4]
    fc60:	685b      	ldr	r3, [r3, #4]
    fc62:	613b      	str	r3, [r7, #16]
        uint8_t* pData;
        uint8_t length = 0;
    fc64:	2300      	movs	r3, #0
    fc66:	72fb      	strb	r3, [r7, #11]
        uint8_t dummy = 0;
    fc68:	2300      	movs	r3, #0
    fc6a:	72bb      	strb	r3, [r7, #10]
        uint8_t MBvar;

        if(TPDO->dataLength)
    fc6c:	69fb      	ldr	r3, [r7, #28]
    fc6e:	7f9b      	ldrb	r3, [r3, #30]
    fc70:	2b00      	cmp	r3, #0
    fc72:	d001      	beq.n	fc78 <_ZL14CO_ODF_TPDOmapP12CO_ODF_arg_t+0xb0>
            return CO_SDO_AB_UNSUPPORTED_ACCESS;  /* Unsupported access to an object. */
    fc74:	4b0e      	ldr	r3, [pc, #56]	; (fcb0 <_ZL14CO_ODF_TPDOmapP12CO_ODF_arg_t+0xe8>)
    fc76:	e013      	b.n	fca0 <_ZL14CO_ODF_TPDOmapP12CO_ODF_arg_t+0xd8>

        /* verify if mapping is correct */
        return (CO_SDO_abortCode_t)CO_PDOfindMap(
    fc78:	69fb      	ldr	r3, [r7, #28]
    fc7a:	6858      	ldr	r0, [r3, #4]
    fc7c:	693b      	ldr	r3, [r7, #16]
    fc7e:	6819      	ldr	r1, [r3, #0]
               *value,
                1,
               &pData,
               &length,
               &dummy,
               &MBvar);
    fc80:	f107 020c 	add.w	r2, r7, #12
    fc84:	f107 0309 	add.w	r3, r7, #9
    fc88:	9302      	str	r3, [sp, #8]
    fc8a:	f107 030a 	add.w	r3, r7, #10
    fc8e:	9301      	str	r3, [sp, #4]
    fc90:	f107 030b 	add.w	r3, r7, #11
    fc94:	9300      	str	r3, [sp, #0]
    fc96:	4613      	mov	r3, r2
    fc98:	2201      	movs	r2, #1
    fc9a:	4c08      	ldr	r4, [pc, #32]	; (fcbc <_ZL14CO_ODF_TPDOmapP12CO_ODF_arg_t+0xf4>)
    fc9c:	47a0      	blx	r4
    fc9e:	4603      	mov	r3, r0
    }

    return CO_SDO_AB_NONE;
}
    fca0:	4618      	mov	r0, r3
    fca2:	3724      	adds	r7, #36	; 0x24
    fca4:	46bd      	mov	sp, r7
    fca6:	bd90      	pop	{r4, r7, pc}
    fca8:	06010002 	.word	0x06010002
    fcac:	08000022 	.word	0x08000022
    fcb0:	06010000 	.word	0x06010000
    fcb4:	06040042 	.word	0x06040042
    fcb8:	0000f691 	.word	0x0000f691
    fcbc:	0000f3c1 	.word	0x0000f3c1

0000fcc0 <_ZN12CO_PDO_Class12CO_RPDO_initEP9CO_RPDO_tP7CO_EM_tP8CO_SDO_tP9CO_SYNC_tPhhmhPK16CO_RPDOCommPar_tPK15CO_RPDOMapPar_tmmP14CO_CANmodule_tm>:
        const CO_RPDOMapPar_t  *RPDOMapPar,
        uint32_t                idx_RPDOCommPar,
        uint32_t                idx_RPDOMapPar,
        CO_CANmodule_t         *CANdevRx,
        uint32_t                CANdevRxIdx)
{
    fcc0:	b590      	push	{r4, r7, lr}
    fcc2:	b087      	sub	sp, #28
    fcc4:	af02      	add	r7, sp, #8
    fcc6:	60f8      	str	r0, [r7, #12]
    fcc8:	60b9      	str	r1, [r7, #8]
    fcca:	607a      	str	r2, [r7, #4]
    fccc:	603b      	str	r3, [r7, #0]
    /* verify arguments */
    if(RPDO==NULL || em==NULL || SDO==NULL || SYNC==NULL || operatingState==NULL ||
    fcce:	68bb      	ldr	r3, [r7, #8]
    fcd0:	2b00      	cmp	r3, #0
    fcd2:	d014      	beq.n	fcfe <_ZN12CO_PDO_Class12CO_RPDO_initEP9CO_RPDO_tP7CO_EM_tP8CO_SDO_tP9CO_SYNC_tPhhmhPK16CO_RPDOCommPar_tPK15CO_RPDOMapPar_tmmP14CO_CANmodule_tm+0x3e>
    fcd4:	687b      	ldr	r3, [r7, #4]
    fcd6:	2b00      	cmp	r3, #0
    fcd8:	d011      	beq.n	fcfe <_ZN12CO_PDO_Class12CO_RPDO_initEP9CO_RPDO_tP7CO_EM_tP8CO_SDO_tP9CO_SYNC_tPhhmhPK16CO_RPDOCommPar_tPK15CO_RPDOMapPar_tmmP14CO_CANmodule_tm+0x3e>
    fcda:	683b      	ldr	r3, [r7, #0]
    fcdc:	2b00      	cmp	r3, #0
    fcde:	d00e      	beq.n	fcfe <_ZN12CO_PDO_Class12CO_RPDO_initEP9CO_RPDO_tP7CO_EM_tP8CO_SDO_tP9CO_SYNC_tPhhmhPK16CO_RPDOCommPar_tPK15CO_RPDOMapPar_tmmP14CO_CANmodule_tm+0x3e>
    fce0:	6a3b      	ldr	r3, [r7, #32]
    fce2:	2b00      	cmp	r3, #0
    fce4:	d00b      	beq.n	fcfe <_ZN12CO_PDO_Class12CO_RPDO_initEP9CO_RPDO_tP7CO_EM_tP8CO_SDO_tP9CO_SYNC_tPhhmhPK16CO_RPDOCommPar_tPK15CO_RPDOMapPar_tmmP14CO_CANmodule_tm+0x3e>
    fce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    fce8:	2b00      	cmp	r3, #0
    fcea:	d008      	beq.n	fcfe <_ZN12CO_PDO_Class12CO_RPDO_initEP9CO_RPDO_tP7CO_EM_tP8CO_SDO_tP9CO_SYNC_tPhhmhPK16CO_RPDOCommPar_tPK15CO_RPDOMapPar_tmmP14CO_CANmodule_tm+0x3e>
    fcec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    fcee:	2b00      	cmp	r3, #0
    fcf0:	d005      	beq.n	fcfe <_ZN12CO_PDO_Class12CO_RPDO_initEP9CO_RPDO_tP7CO_EM_tP8CO_SDO_tP9CO_SYNC_tPhhmhPK16CO_RPDOCommPar_tPK15CO_RPDOMapPar_tmmP14CO_CANmodule_tm+0x3e>
        RPDOCommPar==NULL || RPDOMapPar==NULL || CANdevRx==NULL){
    fcf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    fcf4:	2b00      	cmp	r3, #0
    fcf6:	d002      	beq.n	fcfe <_ZN12CO_PDO_Class12CO_RPDO_initEP9CO_RPDO_tP7CO_EM_tP8CO_SDO_tP9CO_SYNC_tPhhmhPK16CO_RPDOCommPar_tPK15CO_RPDOMapPar_tmmP14CO_CANmodule_tm+0x3e>
    fcf8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    fcfa:	2b00      	cmp	r3, #0
    fcfc:	d102      	bne.n	fd04 <_ZN12CO_PDO_Class12CO_RPDO_initEP9CO_RPDO_tP7CO_EM_tP8CO_SDO_tP9CO_SYNC_tPhhmhPK16CO_RPDOCommPar_tPK15CO_RPDOMapPar_tmmP14CO_CANmodule_tm+0x44>
        return CO_ERROR_ILLEGAL_ARGUMENT;
    fcfe:	f04f 33ff 	mov.w	r3, #4294967295
    fd02:	e050      	b.n	fda6 <_ZN12CO_PDO_Class12CO_RPDO_initEP9CO_RPDO_tP7CO_EM_tP8CO_SDO_tP9CO_SYNC_tPhhmhPK16CO_RPDOCommPar_tPK15CO_RPDOMapPar_tmmP14CO_CANmodule_tm+0xe6>
    }

    /* Configure object variables */
    RPDO->em = em;
    fd04:	68bb      	ldr	r3, [r7, #8]
    fd06:	687a      	ldr	r2, [r7, #4]
    fd08:	601a      	str	r2, [r3, #0]
    RPDO->SDO = SDO;
    fd0a:	68bb      	ldr	r3, [r7, #8]
    fd0c:	683a      	ldr	r2, [r7, #0]
    fd0e:	605a      	str	r2, [r3, #4]
    RPDO->SYNC = SYNC;
    fd10:	68bb      	ldr	r3, [r7, #8]
    fd12:	6a3a      	ldr	r2, [r7, #32]
    fd14:	609a      	str	r2, [r3, #8]
    RPDO->RPDOCommPar = RPDOCommPar;
    fd16:	68bb      	ldr	r3, [r7, #8]
    fd18:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    fd1a:	60da      	str	r2, [r3, #12]
    RPDO->RPDOMapPar = RPDOMapPar;
    fd1c:	68bb      	ldr	r3, [r7, #8]
    fd1e:	6bba      	ldr	r2, [r7, #56]	; 0x38
    fd20:	611a      	str	r2, [r3, #16]
    RPDO->operatingState = operatingState;
    fd22:	68bb      	ldr	r3, [r7, #8]
    fd24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    fd26:	615a      	str	r2, [r3, #20]
    RPDO->nodeId = nodeId;
    fd28:	68bb      	ldr	r3, [r7, #8]
    fd2a:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
    fd2e:	761a      	strb	r2, [r3, #24]
    RPDO->defaultCOB_ID = defaultCOB_ID;
    fd30:	68bb      	ldr	r3, [r7, #8]
    fd32:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    fd34:	61da      	str	r2, [r3, #28]
    RPDO->restrictionFlags = restrictionFlags;
    fd36:	68bb      	ldr	r3, [r7, #8]
    fd38:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
    fd3c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Configure Object dictionary entry at index 0x1400+ and 0x1600+ */
    ptrCODriverClass->CO_OD_configure( idx_RPDOCommPar, CO_ODF_RPDOcom, (void*)RPDO, 0, 0);
    fd40:	4b1b      	ldr	r3, [pc, #108]	; (fdb0 <_ZN12CO_PDO_Class12CO_RPDO_initEP9CO_RPDO_tP7CO_EM_tP8CO_SDO_tP9CO_SYNC_tPhhmhPK16CO_RPDOCommPar_tPK15CO_RPDOMapPar_tmmP14CO_CANmodule_tm+0xf0>)
    fd42:	681b      	ldr	r3, [r3, #0]
    fd44:	1d18      	adds	r0, r3, #4
    fd46:	2300      	movs	r3, #0
    fd48:	9301      	str	r3, [sp, #4]
    fd4a:	2300      	movs	r3, #0
    fd4c:	9300      	str	r3, [sp, #0]
    fd4e:	68bb      	ldr	r3, [r7, #8]
    fd50:	4a18      	ldr	r2, [pc, #96]	; (fdb4 <_ZN12CO_PDO_Class12CO_RPDO_initEP9CO_RPDO_tP7CO_EM_tP8CO_SDO_tP9CO_SYNC_tPhhmhPK16CO_RPDOCommPar_tPK15CO_RPDOMapPar_tmmP14CO_CANmodule_tm+0xf4>)
    fd52:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
    fd54:	4c18      	ldr	r4, [pc, #96]	; (fdb8 <_ZN12CO_PDO_Class12CO_RPDO_initEP9CO_RPDO_tP7CO_EM_tP8CO_SDO_tP9CO_SYNC_tPhhmhPK16CO_RPDOCommPar_tPK15CO_RPDOMapPar_tmmP14CO_CANmodule_tm+0xf8>)
    fd56:	47a0      	blx	r4
    ptrCODriverClass->CO_OD_configure( idx_RPDOMapPar, CO_ODF_RPDOmap, (void*)RPDO, 0, 0);
    fd58:	4b15      	ldr	r3, [pc, #84]	; (fdb0 <_ZN12CO_PDO_Class12CO_RPDO_initEP9CO_RPDO_tP7CO_EM_tP8CO_SDO_tP9CO_SYNC_tPhhmhPK16CO_RPDOCommPar_tPK15CO_RPDOMapPar_tmmP14CO_CANmodule_tm+0xf0>)
    fd5a:	681b      	ldr	r3, [r3, #0]
    fd5c:	1d18      	adds	r0, r3, #4
    fd5e:	2300      	movs	r3, #0
    fd60:	9301      	str	r3, [sp, #4]
    fd62:	2300      	movs	r3, #0
    fd64:	9300      	str	r3, [sp, #0]
    fd66:	68bb      	ldr	r3, [r7, #8]
    fd68:	4a14      	ldr	r2, [pc, #80]	; (fdbc <_ZN12CO_PDO_Class12CO_RPDO_initEP9CO_RPDO_tP7CO_EM_tP8CO_SDO_tP9CO_SYNC_tPhhmhPK16CO_RPDOCommPar_tPK15CO_RPDOMapPar_tmmP14CO_CANmodule_tm+0xfc>)
    fd6a:	6c39      	ldr	r1, [r7, #64]	; 0x40
    fd6c:	4c12      	ldr	r4, [pc, #72]	; (fdb8 <_ZN12CO_PDO_Class12CO_RPDO_initEP9CO_RPDO_tP7CO_EM_tP8CO_SDO_tP9CO_SYNC_tPhhmhPK16CO_RPDOCommPar_tPK15CO_RPDOMapPar_tmmP14CO_CANmodule_tm+0xf8>)
    fd6e:	47a0      	blx	r4

    /* configure communication and mapping */
    RPDO->CANrxNew[0] = RPDO->CANrxNew[1] = false;
    fd70:	68bb      	ldr	r3, [r7, #8]
    fd72:	2200      	movs	r2, #0
    fd74:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    fd78:	68bb      	ldr	r3, [r7, #8]
    fd7a:	2200      	movs	r2, #0
    fd7c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    RPDO->CANdevRx = CANdevRx;
    fd80:	68bb      	ldr	r3, [r7, #8]
    fd82:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    fd84:	659a      	str	r2, [r3, #88]	; 0x58
    RPDO->CANdevRxIdx = CANdevRxIdx;
    fd86:	68bb      	ldr	r3, [r7, #8]
    fd88:	6cba      	ldr	r2, [r7, #72]	; 0x48
    fd8a:	65da      	str	r2, [r3, #92]	; 0x5c

    CO_RPDOconfigMap(RPDO, RPDOMapPar->numberOfMappedObjects);
    fd8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    fd8e:	781b      	ldrb	r3, [r3, #0]
    fd90:	4619      	mov	r1, r3
    fd92:	68b8      	ldr	r0, [r7, #8]
    fd94:	4b0a      	ldr	r3, [pc, #40]	; (fdc0 <_ZN12CO_PDO_Class12CO_RPDO_initEP9CO_RPDO_tP7CO_EM_tP8CO_SDO_tP9CO_SYNC_tPhhmhPK16CO_RPDOCommPar_tPK15CO_RPDOMapPar_tmmP14CO_CANmodule_tm+0x100>)
    fd96:	4798      	blx	r3
    CO_RPDOconfigCom(RPDO, RPDOCommPar->COB_IDUsedByRPDO);
    fd98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    fd9a:	685b      	ldr	r3, [r3, #4]
    fd9c:	4619      	mov	r1, r3
    fd9e:	68b8      	ldr	r0, [r7, #8]
    fda0:	4b08      	ldr	r3, [pc, #32]	; (fdc4 <_ZN12CO_PDO_Class12CO_RPDO_initEP9CO_RPDO_tP7CO_EM_tP8CO_SDO_tP9CO_SYNC_tPhhmhPK16CO_RPDOCommPar_tPK15CO_RPDOMapPar_tmmP14CO_CANmodule_tm+0x104>)
    fda2:	4798      	blx	r3

    return CO_ERROR_NO;
    fda4:	2300      	movs	r3, #0
}
    fda6:	4618      	mov	r0, r3
    fda8:	3714      	adds	r7, #20
    fdaa:	46bd      	mov	sp, r7
    fdac:	bd90      	pop	{r4, r7, pc}
    fdae:	bf00      	nop
    fdb0:	200019a4 	.word	0x200019a4
    fdb4:	0000f761 	.word	0x0000f761
    fdb8:	000108d5 	.word	0x000108d5
    fdbc:	0000fac5 	.word	0x0000fac5
    fdc0:	0000f5c1 	.word	0x0000f5c1
    fdc4:	0000f255 	.word	0x0000f255

0000fdc8 <_ZN12CO_PDO_Class12CO_TPDO_initEP9CO_TPDO_tP7CO_EM_tP8CO_SDO_tPhhmhPK16CO_TPDOCommPar_tPK15CO_TPDOMapPar_tmmP14CO_CANmodule_tm>:
        const CO_TPDOMapPar_t  *TPDOMapPar,
        uint32_t                idx_TPDOCommPar,
        uint32_t                idx_TPDOMapPar,
        CO_CANmodule_t         *CANdevTx,
        uint32_t                CANdevTxIdx)
{
    fdc8:	b590      	push	{r4, r7, lr}
    fdca:	b087      	sub	sp, #28
    fdcc:	af02      	add	r7, sp, #8
    fdce:	60f8      	str	r0, [r7, #12]
    fdd0:	60b9      	str	r1, [r7, #8]
    fdd2:	607a      	str	r2, [r7, #4]
    fdd4:	603b      	str	r3, [r7, #0]
    /* verify arguments */
    if(TPDO==NULL || em==NULL || SDO==NULL || operatingState==NULL ||
    fdd6:	68bb      	ldr	r3, [r7, #8]
    fdd8:	2b00      	cmp	r3, #0
    fdda:	d011      	beq.n	fe00 <_ZN12CO_PDO_Class12CO_TPDO_initEP9CO_TPDO_tP7CO_EM_tP8CO_SDO_tPhhmhPK16CO_TPDOCommPar_tPK15CO_TPDOMapPar_tmmP14CO_CANmodule_tm+0x38>
    fddc:	687b      	ldr	r3, [r7, #4]
    fdde:	2b00      	cmp	r3, #0
    fde0:	d00e      	beq.n	fe00 <_ZN12CO_PDO_Class12CO_TPDO_initEP9CO_TPDO_tP7CO_EM_tP8CO_SDO_tPhhmhPK16CO_TPDOCommPar_tPK15CO_TPDOMapPar_tmmP14CO_CANmodule_tm+0x38>
    fde2:	683b      	ldr	r3, [r7, #0]
    fde4:	2b00      	cmp	r3, #0
    fde6:	d00b      	beq.n	fe00 <_ZN12CO_PDO_Class12CO_TPDO_initEP9CO_TPDO_tP7CO_EM_tP8CO_SDO_tPhhmhPK16CO_TPDOCommPar_tPK15CO_TPDOMapPar_tmmP14CO_CANmodule_tm+0x38>
    fde8:	6a3b      	ldr	r3, [r7, #32]
    fdea:	2b00      	cmp	r3, #0
    fdec:	d008      	beq.n	fe00 <_ZN12CO_PDO_Class12CO_TPDO_initEP9CO_TPDO_tP7CO_EM_tP8CO_SDO_tPhhmhPK16CO_TPDOCommPar_tPK15CO_TPDOMapPar_tmmP14CO_CANmodule_tm+0x38>
    fdee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    fdf0:	2b00      	cmp	r3, #0
    fdf2:	d005      	beq.n	fe00 <_ZN12CO_PDO_Class12CO_TPDO_initEP9CO_TPDO_tP7CO_EM_tP8CO_SDO_tPhhmhPK16CO_TPDOCommPar_tPK15CO_TPDOMapPar_tmmP14CO_CANmodule_tm+0x38>
        TPDOCommPar==NULL || TPDOMapPar==NULL || CANdevTx==NULL){
    fdf4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    fdf6:	2b00      	cmp	r3, #0
    fdf8:	d002      	beq.n	fe00 <_ZN12CO_PDO_Class12CO_TPDO_initEP9CO_TPDO_tP7CO_EM_tP8CO_SDO_tPhhmhPK16CO_TPDOCommPar_tPK15CO_TPDOMapPar_tmmP14CO_CANmodule_tm+0x38>
    fdfa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    fdfc:	2b00      	cmp	r3, #0
    fdfe:	d102      	bne.n	fe06 <_ZN12CO_PDO_Class12CO_TPDO_initEP9CO_TPDO_tP7CO_EM_tP8CO_SDO_tPhhmhPK16CO_TPDOCommPar_tPK15CO_TPDOMapPar_tmmP14CO_CANmodule_tm+0x3e>
        return CO_ERROR_ILLEGAL_ARGUMENT;
    fe00:	f04f 33ff 	mov.w	r3, #4294967295
    fe04:	e070      	b.n	fee8 <_ZN12CO_PDO_Class12CO_TPDO_initEP9CO_TPDO_tP7CO_EM_tP8CO_SDO_tPhhmhPK16CO_TPDOCommPar_tPK15CO_TPDOMapPar_tmmP14CO_CANmodule_tm+0x120>
    }

    /* Configure object variables */
    TPDO->em = em;
    fe06:	68bb      	ldr	r3, [r7, #8]
    fe08:	687a      	ldr	r2, [r7, #4]
    fe0a:	601a      	str	r2, [r3, #0]
    TPDO->SDO = SDO;
    fe0c:	68bb      	ldr	r3, [r7, #8]
    fe0e:	683a      	ldr	r2, [r7, #0]
    fe10:	605a      	str	r2, [r3, #4]
    TPDO->TPDOCommPar = TPDOCommPar;
    fe12:	68bb      	ldr	r3, [r7, #8]
    fe14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    fe16:	609a      	str	r2, [r3, #8]
    TPDO->TPDOMapPar = TPDOMapPar;
    fe18:	68bb      	ldr	r3, [r7, #8]
    fe1a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    fe1c:	60da      	str	r2, [r3, #12]
    TPDO->operatingState = operatingState;
    fe1e:	68bb      	ldr	r3, [r7, #8]
    fe20:	6a3a      	ldr	r2, [r7, #32]
    fe22:	611a      	str	r2, [r3, #16]
    TPDO->nodeId = nodeId;
    fe24:	68bb      	ldr	r3, [r7, #8]
    fe26:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
    fe2a:	751a      	strb	r2, [r3, #20]
    TPDO->defaultCOB_ID = defaultCOB_ID;
    fe2c:	68bb      	ldr	r3, [r7, #8]
    fe2e:	6aba      	ldr	r2, [r7, #40]	; 0x28
    fe30:	619a      	str	r2, [r3, #24]
    TPDO->restrictionFlags = restrictionFlags;
    fe32:	68bb      	ldr	r3, [r7, #8]
    fe34:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
    fe38:	771a      	strb	r2, [r3, #28]

    /* Configure Object dictionary entry at index 0x1800+ and 0x1A00+ */
    ptrCODriverClass->CO_OD_configure( idx_TPDOCommPar, CO_ODF_TPDOcom, (void*)TPDO, 0, 0);
    fe3a:	4b2d      	ldr	r3, [pc, #180]	; (fef0 <_ZN12CO_PDO_Class12CO_TPDO_initEP9CO_TPDO_tP7CO_EM_tP8CO_SDO_tPhhmhPK16CO_TPDOCommPar_tPK15CO_TPDOMapPar_tmmP14CO_CANmodule_tm+0x128>)
    fe3c:	681b      	ldr	r3, [r3, #0]
    fe3e:	1d18      	adds	r0, r3, #4
    fe40:	2300      	movs	r3, #0
    fe42:	9301      	str	r3, [sp, #4]
    fe44:	2300      	movs	r3, #0
    fe46:	9300      	str	r3, [sp, #0]
    fe48:	68bb      	ldr	r3, [r7, #8]
    fe4a:	4a2a      	ldr	r2, [pc, #168]	; (fef4 <_ZN12CO_PDO_Class12CO_TPDO_initEP9CO_TPDO_tP7CO_EM_tP8CO_SDO_tPhhmhPK16CO_TPDOCommPar_tPK15CO_TPDOMapPar_tmmP14CO_CANmodule_tm+0x12c>)
    fe4c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
    fe4e:	4c2a      	ldr	r4, [pc, #168]	; (fef8 <_ZN12CO_PDO_Class12CO_TPDO_initEP9CO_TPDO_tP7CO_EM_tP8CO_SDO_tPhhmhPK16CO_TPDOCommPar_tPK15CO_TPDOMapPar_tmmP14CO_CANmodule_tm+0x130>)
    fe50:	47a0      	blx	r4
    ptrCODriverClass->CO_OD_configure( idx_TPDOMapPar, CO_ODF_TPDOmap, (void*)TPDO, 0, 0);
    fe52:	4b27      	ldr	r3, [pc, #156]	; (fef0 <_ZN12CO_PDO_Class12CO_TPDO_initEP9CO_TPDO_tP7CO_EM_tP8CO_SDO_tPhhmhPK16CO_TPDOCommPar_tPK15CO_TPDOMapPar_tmmP14CO_CANmodule_tm+0x128>)
    fe54:	681b      	ldr	r3, [r3, #0]
    fe56:	1d18      	adds	r0, r3, #4
    fe58:	2300      	movs	r3, #0
    fe5a:	9301      	str	r3, [sp, #4]
    fe5c:	2300      	movs	r3, #0
    fe5e:	9300      	str	r3, [sp, #0]
    fe60:	68bb      	ldr	r3, [r7, #8]
    fe62:	4a26      	ldr	r2, [pc, #152]	; (fefc <_ZN12CO_PDO_Class12CO_TPDO_initEP9CO_TPDO_tP7CO_EM_tP8CO_SDO_tPhhmhPK16CO_TPDOCommPar_tPK15CO_TPDOMapPar_tmmP14CO_CANmodule_tm+0x134>)
    fe64:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
    fe66:	4c24      	ldr	r4, [pc, #144]	; (fef8 <_ZN12CO_PDO_Class12CO_TPDO_initEP9CO_TPDO_tP7CO_EM_tP8CO_SDO_tPhhmhPK16CO_TPDOCommPar_tPK15CO_TPDOMapPar_tmmP14CO_CANmodule_tm+0x130>)
    fe68:	47a0      	blx	r4

    /* configure communication and mapping */
    TPDO->CANdevTx = CANdevTx;
    fe6a:	68bb      	ldr	r3, [r7, #8]
    fe6c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    fe6e:	64da      	str	r2, [r3, #76]	; 0x4c
    TPDO->CANdevTxIdx = CANdevTxIdx;
    fe70:	68bb      	ldr	r3, [r7, #8]
    fe72:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    fe74:	655a      	str	r2, [r3, #84]	; 0x54
    TPDO->syncCounter = 255;
    fe76:	68bb      	ldr	r3, [r7, #8]
    fe78:	22ff      	movs	r2, #255	; 0xff
    fe7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    TPDO->inhibitTimer = 0;
    fe7e:	68bb      	ldr	r3, [r7, #8]
    fe80:	2200      	movs	r2, #0
    fe82:	645a      	str	r2, [r3, #68]	; 0x44
    TPDO->eventTimer = ((uint32_t) TPDOCommPar->eventTimer) * 1000;
    fe84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    fe86:	695b      	ldr	r3, [r3, #20]
    fe88:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    fe8c:	fb02 f203 	mul.w	r2, r2, r3
    fe90:	68bb      	ldr	r3, [r7, #8]
    fe92:	649a      	str	r2, [r3, #72]	; 0x48
    if(TPDOCommPar->transmissionType>=254) TPDO->sendRequest = 1;
    fe94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    fe96:	7a1b      	ldrb	r3, [r3, #8]
    fe98:	2bfd      	cmp	r3, #253	; 0xfd
    fe9a:	dd02      	ble.n	fea2 <_ZN12CO_PDO_Class12CO_TPDO_initEP9CO_TPDO_tP7CO_EM_tP8CO_SDO_tPhhmhPK16CO_TPDOCommPar_tPK15CO_TPDOMapPar_tmmP14CO_CANmodule_tm+0xda>
    fe9c:	68bb      	ldr	r3, [r7, #8]
    fe9e:	2201      	movs	r2, #1
    fea0:	77da      	strb	r2, [r3, #31]

    CO_TPDOconfigMap(TPDO, TPDOMapPar->numberOfMappedObjects);
    fea2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    fea4:	781b      	ldrb	r3, [r3, #0]
    fea6:	4619      	mov	r1, r3
    fea8:	68b8      	ldr	r0, [r7, #8]
    feaa:	4b15      	ldr	r3, [pc, #84]	; (ff00 <_ZN12CO_PDO_Class12CO_TPDO_initEP9CO_TPDO_tP7CO_EM_tP8CO_SDO_tPhhmhPK16CO_TPDOCommPar_tPK15CO_TPDOMapPar_tmmP14CO_CANmodule_tm+0x138>)
    feac:	4798      	blx	r3
    CO_TPDOconfigCom(TPDO, TPDOCommPar->COB_IDUsedByTPDO, ((TPDOCommPar->transmissionType<=240) ? 1 : 0));
    feae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    feb0:	6859      	ldr	r1, [r3, #4]
    feb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    feb4:	7a1b      	ldrb	r3, [r3, #8]
    feb6:	2bf0      	cmp	r3, #240	; 0xf0
    feb8:	dc01      	bgt.n	febe <_ZN12CO_PDO_Class12CO_TPDO_initEP9CO_TPDO_tP7CO_EM_tP8CO_SDO_tPhhmhPK16CO_TPDOCommPar_tPK15CO_TPDOMapPar_tmmP14CO_CANmodule_tm+0xf6>
    feba:	2301      	movs	r3, #1
    febc:	e000      	b.n	fec0 <_ZN12CO_PDO_Class12CO_TPDO_initEP9CO_TPDO_tP7CO_EM_tP8CO_SDO_tPhhmhPK16CO_TPDOCommPar_tPK15CO_TPDOMapPar_tmmP14CO_CANmodule_tm+0xf8>
    febe:	2300      	movs	r3, #0
    fec0:	461a      	mov	r2, r3
    fec2:	68b8      	ldr	r0, [r7, #8]
    fec4:	4b0f      	ldr	r3, [pc, #60]	; (ff04 <_ZN12CO_PDO_Class12CO_TPDO_initEP9CO_TPDO_tP7CO_EM_tP8CO_SDO_tPhhmhPK16CO_TPDOCommPar_tPK15CO_TPDOMapPar_tmmP14CO_CANmodule_tm+0x13c>)
    fec6:	4798      	blx	r3

    if((TPDOCommPar->transmissionType>240 &&
    fec8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    feca:	7a1b      	ldrb	r3, [r3, #8]
    fecc:	2bf0      	cmp	r3, #240	; 0xf0
    fece:	dd03      	ble.n	fed8 <_ZN12CO_PDO_Class12CO_TPDO_initEP9CO_TPDO_tP7CO_EM_tP8CO_SDO_tPhhmhPK16CO_TPDOCommPar_tPK15CO_TPDOMapPar_tmmP14CO_CANmodule_tm+0x110>
         TPDOCommPar->transmissionType<254) ||
    fed0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    fed2:	7a1b      	ldrb	r3, [r3, #8]
    if((TPDOCommPar->transmissionType>240 &&
    fed4:	2bfd      	cmp	r3, #253	; 0xfd
    fed6:	dd03      	ble.n	fee0 <_ZN12CO_PDO_Class12CO_TPDO_initEP9CO_TPDO_tP7CO_EM_tP8CO_SDO_tPhhmhPK16CO_TPDOCommPar_tPK15CO_TPDOMapPar_tmmP14CO_CANmodule_tm+0x118>
         TPDOCommPar->SYNCStartValue>240){
    fed8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    feda:	7e1b      	ldrb	r3, [r3, #24]
         TPDOCommPar->transmissionType<254) ||
    fedc:	2bf0      	cmp	r3, #240	; 0xf0
    fede:	dd02      	ble.n	fee6 <_ZN12CO_PDO_Class12CO_TPDO_initEP9CO_TPDO_tP7CO_EM_tP8CO_SDO_tPhhmhPK16CO_TPDOCommPar_tPK15CO_TPDOMapPar_tmmP14CO_CANmodule_tm+0x11e>
            TPDO->valid = false;
    fee0:	68bb      	ldr	r3, [r7, #8]
    fee2:	2200      	movs	r2, #0
    fee4:	775a      	strb	r2, [r3, #29]
    }

    return CO_ERROR_NO;
    fee6:	2300      	movs	r3, #0
}
    fee8:	4618      	mov	r0, r3
    feea:	3714      	adds	r7, #20
    feec:	46bd      	mov	sp, r7
    feee:	bd90      	pop	{r4, r7, pc}
    fef0:	200019a4 	.word	0x200019a4
    fef4:	0000f8e1 	.word	0x0000f8e1
    fef8:	000108d5 	.word	0x000108d5
    fefc:	0000fbc9 	.word	0x0000fbc9
    ff00:	0000f691 	.word	0x0000f691
    ff04:	0000f32d 	.word	0x0000f32d

0000ff08 <_ZN12CO_PDO_Class12CO_TPDOisCOSEP9CO_TPDO_t>:


/******************************************************************************/
uint8_t CO_PDO_Class::CO_TPDOisCOS(CO_TPDO_t *TPDO){
    ff08:	b480      	push	{r7}
    ff0a:	b085      	sub	sp, #20
    ff0c:	af00      	add	r7, sp, #0
    ff0e:	6078      	str	r0, [r7, #4]
    ff10:	6039      	str	r1, [r7, #0]

    /* Prepare TPDO data automatically from Object Dictionary variables */
    uint8_t* pPDOdataByte;
    uint8_t** ppODdataByte;

    pPDOdataByte = &TPDO->CANtxBuff->data[TPDO->dataLength];
    ff12:	683b      	ldr	r3, [r7, #0]
    ff14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    ff16:	683a      	ldr	r2, [r7, #0]
    ff18:	7f92      	ldrb	r2, [r2, #30]
    ff1a:	4413      	add	r3, r2
    ff1c:	3305      	adds	r3, #5
    ff1e:	60fb      	str	r3, [r7, #12]
    ppODdataByte = &TPDO->mapPointer[TPDO->dataLength];
    ff20:	683b      	ldr	r3, [r7, #0]
    ff22:	7f9b      	ldrb	r3, [r3, #30]
    ff24:	3308      	adds	r3, #8
    ff26:	009b      	lsls	r3, r3, #2
    ff28:	683a      	ldr	r2, [r7, #0]
    ff2a:	4413      	add	r3, r2
    ff2c:	60bb      	str	r3, [r7, #8]

    switch(TPDO->dataLength){
    ff2e:	683b      	ldr	r3, [r7, #0]
    ff30:	7f9b      	ldrb	r3, [r3, #30]
    ff32:	3b01      	subs	r3, #1
    ff34:	2b07      	cmp	r3, #7
    ff36:	f200 80ea 	bhi.w	1010e <STACK_SIZE+0x10e>
    ff3a:	a201      	add	r2, pc, #4	; (adr r2, ff40 <_ZN12CO_PDO_Class12CO_TPDOisCOSEP9CO_TPDO_t+0x38>)
    ff3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    ff40:	000100d9 	.word	0x000100d9
    ff44:	000100a3 	.word	0x000100a3
    ff48:	0001006d 	.word	0x0001006d
    ff4c:	00010037 	.word	0x00010037
    ff50:	00010001 	.word	0x00010001
    ff54:	0000ffcb 	.word	0x0000ffcb
    ff58:	0000ff95 	.word	0x0000ff95
    ff5c:	0000ff61 	.word	0x0000ff61
        case 8: if(*(--pPDOdataByte) != **(--ppODdataByte) && (TPDO->sendIfCOSFlags&0x80)) return 1;
    ff60:	68fb      	ldr	r3, [r7, #12]
    ff62:	3b01      	subs	r3, #1
    ff64:	60fb      	str	r3, [r7, #12]
    ff66:	68fb      	ldr	r3, [r7, #12]
    ff68:	781a      	ldrb	r2, [r3, #0]
    ff6a:	68bb      	ldr	r3, [r7, #8]
    ff6c:	3b04      	subs	r3, #4
    ff6e:	60bb      	str	r3, [r7, #8]
    ff70:	68bb      	ldr	r3, [r7, #8]
    ff72:	681b      	ldr	r3, [r3, #0]
    ff74:	781b      	ldrb	r3, [r3, #0]
    ff76:	429a      	cmp	r2, r3
    ff78:	d007      	beq.n	ff8a <_ZN12CO_PDO_Class12CO_TPDOisCOSEP9CO_TPDO_t+0x82>
    ff7a:	683b      	ldr	r3, [r7, #0]
    ff7c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
    ff80:	b25b      	sxtb	r3, r3
    ff82:	2b00      	cmp	r3, #0
    ff84:	da01      	bge.n	ff8a <_ZN12CO_PDO_Class12CO_TPDOisCOSEP9CO_TPDO_t+0x82>
    ff86:	2301      	movs	r3, #1
    ff88:	e000      	b.n	ff8c <_ZN12CO_PDO_Class12CO_TPDOisCOSEP9CO_TPDO_t+0x84>
    ff8a:	2300      	movs	r3, #0
    ff8c:	2b00      	cmp	r3, #0
    ff8e:	d001      	beq.n	ff94 <_ZN12CO_PDO_Class12CO_TPDOisCOSEP9CO_TPDO_t+0x8c>
    ff90:	2301      	movs	r3, #1
    ff92:	e0bd      	b.n	10110 <STACK_SIZE+0x110>
        case 7: if(*(--pPDOdataByte) != **(--ppODdataByte) && (TPDO->sendIfCOSFlags&0x40)) return 1;
    ff94:	68fb      	ldr	r3, [r7, #12]
    ff96:	3b01      	subs	r3, #1
    ff98:	60fb      	str	r3, [r7, #12]
    ff9a:	68fb      	ldr	r3, [r7, #12]
    ff9c:	781a      	ldrb	r2, [r3, #0]
    ff9e:	68bb      	ldr	r3, [r7, #8]
    ffa0:	3b04      	subs	r3, #4
    ffa2:	60bb      	str	r3, [r7, #8]
    ffa4:	68bb      	ldr	r3, [r7, #8]
    ffa6:	681b      	ldr	r3, [r3, #0]
    ffa8:	781b      	ldrb	r3, [r3, #0]
    ffaa:	429a      	cmp	r2, r3
    ffac:	d008      	beq.n	ffc0 <_ZN12CO_PDO_Class12CO_TPDOisCOSEP9CO_TPDO_t+0xb8>
    ffae:	683b      	ldr	r3, [r7, #0]
    ffb0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
    ffb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
    ffb8:	2b00      	cmp	r3, #0
    ffba:	d001      	beq.n	ffc0 <_ZN12CO_PDO_Class12CO_TPDOisCOSEP9CO_TPDO_t+0xb8>
    ffbc:	2301      	movs	r3, #1
    ffbe:	e000      	b.n	ffc2 <_ZN12CO_PDO_Class12CO_TPDOisCOSEP9CO_TPDO_t+0xba>
    ffc0:	2300      	movs	r3, #0
    ffc2:	2b00      	cmp	r3, #0
    ffc4:	d001      	beq.n	ffca <_ZN12CO_PDO_Class12CO_TPDOisCOSEP9CO_TPDO_t+0xc2>
    ffc6:	2301      	movs	r3, #1
    ffc8:	e0a2      	b.n	10110 <STACK_SIZE+0x110>
        case 6: if(*(--pPDOdataByte) != **(--ppODdataByte) && (TPDO->sendIfCOSFlags&0x20)) return 1;
    ffca:	68fb      	ldr	r3, [r7, #12]
    ffcc:	3b01      	subs	r3, #1
    ffce:	60fb      	str	r3, [r7, #12]
    ffd0:	68fb      	ldr	r3, [r7, #12]
    ffd2:	781a      	ldrb	r2, [r3, #0]
    ffd4:	68bb      	ldr	r3, [r7, #8]
    ffd6:	3b04      	subs	r3, #4
    ffd8:	60bb      	str	r3, [r7, #8]
    ffda:	68bb      	ldr	r3, [r7, #8]
    ffdc:	681b      	ldr	r3, [r3, #0]
    ffde:	781b      	ldrb	r3, [r3, #0]
    ffe0:	429a      	cmp	r2, r3
    ffe2:	d008      	beq.n	fff6 <_ZN12CO_PDO_Class12CO_TPDOisCOSEP9CO_TPDO_t+0xee>
    ffe4:	683b      	ldr	r3, [r7, #0]
    ffe6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
    ffea:	f003 0320 	and.w	r3, r3, #32
    ffee:	2b00      	cmp	r3, #0
    fff0:	d001      	beq.n	fff6 <_ZN12CO_PDO_Class12CO_TPDOisCOSEP9CO_TPDO_t+0xee>
    fff2:	2301      	movs	r3, #1
    fff4:	e000      	b.n	fff8 <_ZN12CO_PDO_Class12CO_TPDOisCOSEP9CO_TPDO_t+0xf0>
    fff6:	2300      	movs	r3, #0
    fff8:	2b00      	cmp	r3, #0
    fffa:	d001      	beq.n	10000 <STACK_SIZE>
    fffc:	2301      	movs	r3, #1
    fffe:	e087      	b.n	10110 <STACK_SIZE+0x110>
        case 5: if(*(--pPDOdataByte) != **(--ppODdataByte) && (TPDO->sendIfCOSFlags&0x10)) return 1;
   10000:	68fb      	ldr	r3, [r7, #12]
   10002:	3b01      	subs	r3, #1
   10004:	60fb      	str	r3, [r7, #12]
   10006:	68fb      	ldr	r3, [r7, #12]
   10008:	781a      	ldrb	r2, [r3, #0]
   1000a:	68bb      	ldr	r3, [r7, #8]
   1000c:	3b04      	subs	r3, #4
   1000e:	60bb      	str	r3, [r7, #8]
   10010:	68bb      	ldr	r3, [r7, #8]
   10012:	681b      	ldr	r3, [r3, #0]
   10014:	781b      	ldrb	r3, [r3, #0]
   10016:	429a      	cmp	r2, r3
   10018:	d008      	beq.n	1002c <STACK_SIZE+0x2c>
   1001a:	683b      	ldr	r3, [r7, #0]
   1001c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
   10020:	f003 0310 	and.w	r3, r3, #16
   10024:	2b00      	cmp	r3, #0
   10026:	d001      	beq.n	1002c <STACK_SIZE+0x2c>
   10028:	2301      	movs	r3, #1
   1002a:	e000      	b.n	1002e <STACK_SIZE+0x2e>
   1002c:	2300      	movs	r3, #0
   1002e:	2b00      	cmp	r3, #0
   10030:	d001      	beq.n	10036 <STACK_SIZE+0x36>
   10032:	2301      	movs	r3, #1
   10034:	e06c      	b.n	10110 <STACK_SIZE+0x110>
        case 4: if(*(--pPDOdataByte) != **(--ppODdataByte) && (TPDO->sendIfCOSFlags&0x08)) return 1;
   10036:	68fb      	ldr	r3, [r7, #12]
   10038:	3b01      	subs	r3, #1
   1003a:	60fb      	str	r3, [r7, #12]
   1003c:	68fb      	ldr	r3, [r7, #12]
   1003e:	781a      	ldrb	r2, [r3, #0]
   10040:	68bb      	ldr	r3, [r7, #8]
   10042:	3b04      	subs	r3, #4
   10044:	60bb      	str	r3, [r7, #8]
   10046:	68bb      	ldr	r3, [r7, #8]
   10048:	681b      	ldr	r3, [r3, #0]
   1004a:	781b      	ldrb	r3, [r3, #0]
   1004c:	429a      	cmp	r2, r3
   1004e:	d008      	beq.n	10062 <STACK_SIZE+0x62>
   10050:	683b      	ldr	r3, [r7, #0]
   10052:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
   10056:	f003 0308 	and.w	r3, r3, #8
   1005a:	2b00      	cmp	r3, #0
   1005c:	d001      	beq.n	10062 <STACK_SIZE+0x62>
   1005e:	2301      	movs	r3, #1
   10060:	e000      	b.n	10064 <STACK_SIZE+0x64>
   10062:	2300      	movs	r3, #0
   10064:	2b00      	cmp	r3, #0
   10066:	d001      	beq.n	1006c <STACK_SIZE+0x6c>
   10068:	2301      	movs	r3, #1
   1006a:	e051      	b.n	10110 <STACK_SIZE+0x110>
        case 3: if(*(--pPDOdataByte) != **(--ppODdataByte) && (TPDO->sendIfCOSFlags&0x04)) return 1;
   1006c:	68fb      	ldr	r3, [r7, #12]
   1006e:	3b01      	subs	r3, #1
   10070:	60fb      	str	r3, [r7, #12]
   10072:	68fb      	ldr	r3, [r7, #12]
   10074:	781a      	ldrb	r2, [r3, #0]
   10076:	68bb      	ldr	r3, [r7, #8]
   10078:	3b04      	subs	r3, #4
   1007a:	60bb      	str	r3, [r7, #8]
   1007c:	68bb      	ldr	r3, [r7, #8]
   1007e:	681b      	ldr	r3, [r3, #0]
   10080:	781b      	ldrb	r3, [r3, #0]
   10082:	429a      	cmp	r2, r3
   10084:	d008      	beq.n	10098 <STACK_SIZE+0x98>
   10086:	683b      	ldr	r3, [r7, #0]
   10088:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
   1008c:	f003 0304 	and.w	r3, r3, #4
   10090:	2b00      	cmp	r3, #0
   10092:	d001      	beq.n	10098 <STACK_SIZE+0x98>
   10094:	2301      	movs	r3, #1
   10096:	e000      	b.n	1009a <STACK_SIZE+0x9a>
   10098:	2300      	movs	r3, #0
   1009a:	2b00      	cmp	r3, #0
   1009c:	d001      	beq.n	100a2 <STACK_SIZE+0xa2>
   1009e:	2301      	movs	r3, #1
   100a0:	e036      	b.n	10110 <STACK_SIZE+0x110>
        case 2: if(*(--pPDOdataByte) != **(--ppODdataByte) && (TPDO->sendIfCOSFlags&0x02)) return 1;
   100a2:	68fb      	ldr	r3, [r7, #12]
   100a4:	3b01      	subs	r3, #1
   100a6:	60fb      	str	r3, [r7, #12]
   100a8:	68fb      	ldr	r3, [r7, #12]
   100aa:	781a      	ldrb	r2, [r3, #0]
   100ac:	68bb      	ldr	r3, [r7, #8]
   100ae:	3b04      	subs	r3, #4
   100b0:	60bb      	str	r3, [r7, #8]
   100b2:	68bb      	ldr	r3, [r7, #8]
   100b4:	681b      	ldr	r3, [r3, #0]
   100b6:	781b      	ldrb	r3, [r3, #0]
   100b8:	429a      	cmp	r2, r3
   100ba:	d008      	beq.n	100ce <STACK_SIZE+0xce>
   100bc:	683b      	ldr	r3, [r7, #0]
   100be:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
   100c2:	f003 0302 	and.w	r3, r3, #2
   100c6:	2b00      	cmp	r3, #0
   100c8:	d001      	beq.n	100ce <STACK_SIZE+0xce>
   100ca:	2301      	movs	r3, #1
   100cc:	e000      	b.n	100d0 <STACK_SIZE+0xd0>
   100ce:	2300      	movs	r3, #0
   100d0:	2b00      	cmp	r3, #0
   100d2:	d001      	beq.n	100d8 <STACK_SIZE+0xd8>
   100d4:	2301      	movs	r3, #1
   100d6:	e01b      	b.n	10110 <STACK_SIZE+0x110>
        case 1: if(*(--pPDOdataByte) != **(--ppODdataByte) && (TPDO->sendIfCOSFlags&0x01)) return 1;
   100d8:	68fb      	ldr	r3, [r7, #12]
   100da:	3b01      	subs	r3, #1
   100dc:	60fb      	str	r3, [r7, #12]
   100de:	68fb      	ldr	r3, [r7, #12]
   100e0:	781a      	ldrb	r2, [r3, #0]
   100e2:	68bb      	ldr	r3, [r7, #8]
   100e4:	3b04      	subs	r3, #4
   100e6:	60bb      	str	r3, [r7, #8]
   100e8:	68bb      	ldr	r3, [r7, #8]
   100ea:	681b      	ldr	r3, [r3, #0]
   100ec:	781b      	ldrb	r3, [r3, #0]
   100ee:	429a      	cmp	r2, r3
   100f0:	d008      	beq.n	10104 <STACK_SIZE+0x104>
   100f2:	683b      	ldr	r3, [r7, #0]
   100f4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
   100f8:	f003 0301 	and.w	r3, r3, #1
   100fc:	2b00      	cmp	r3, #0
   100fe:	d001      	beq.n	10104 <STACK_SIZE+0x104>
   10100:	2301      	movs	r3, #1
   10102:	e000      	b.n	10106 <STACK_SIZE+0x106>
   10104:	2300      	movs	r3, #0
   10106:	2b00      	cmp	r3, #0
   10108:	d001      	beq.n	1010e <STACK_SIZE+0x10e>
   1010a:	2301      	movs	r3, #1
   1010c:	e000      	b.n	10110 <STACK_SIZE+0x110>
    }

    return 0;
   1010e:	2300      	movs	r3, #0
}
   10110:	4618      	mov	r0, r3
   10112:	3714      	adds	r7, #20
   10114:	46bd      	mov	sp, r7
   10116:	bc80      	pop	{r7}
   10118:	4770      	bx	lr
   1011a:	bf00      	nop

0001011c <_ZN12CO_PDO_Class11CO_TPDOsendEP9CO_TPDO_t>:

//#define TPDO_CALLS_EXTENSION
/******************************************************************************/
uint32_t CO_PDO_Class::CO_TPDOsend(CO_TPDO_t *TPDO){
   1011c:	b580      	push	{r7, lr}
   1011e:	b086      	sub	sp, #24
   10120:	af00      	add	r7, sp, #0
   10122:	6078      	str	r0, [r7, #4]
   10124:	6039      	str	r1, [r7, #0]
            ODF_arg.dataLength = CO_OD_getLength(pSDO, entryNo, subIndex);
            ext->pODFunc(&ODF_arg);
        }
    }
#endif
    i = TPDO->dataLength;
   10126:	683b      	ldr	r3, [r7, #0]
   10128:	7f9b      	ldrb	r3, [r3, #30]
   1012a:	617b      	str	r3, [r7, #20]
    pPDOdataByte = &TPDO->CANtxBuff->data[0];
   1012c:	683b      	ldr	r3, [r7, #0]
   1012e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   10130:	3305      	adds	r3, #5
   10132:	613b      	str	r3, [r7, #16]
    ppODdataByte = &TPDO->mapPointer[0];
   10134:	683b      	ldr	r3, [r7, #0]
   10136:	3320      	adds	r3, #32
   10138:	60fb      	str	r3, [r7, #12]

    /* Copy data from Object dictionary. */
    for(; i>0; i--) {
   1013a:	697b      	ldr	r3, [r7, #20]
   1013c:	2b00      	cmp	r3, #0
   1013e:	d00c      	beq.n	1015a <_ZN12CO_PDO_Class11CO_TPDOsendEP9CO_TPDO_t+0x3e>
        *(pPDOdataByte++) = **(ppODdataByte++);
   10140:	693b      	ldr	r3, [r7, #16]
   10142:	1c5a      	adds	r2, r3, #1
   10144:	613a      	str	r2, [r7, #16]
   10146:	68fa      	ldr	r2, [r7, #12]
   10148:	1d11      	adds	r1, r2, #4
   1014a:	60f9      	str	r1, [r7, #12]
   1014c:	6812      	ldr	r2, [r2, #0]
   1014e:	7812      	ldrb	r2, [r2, #0]
   10150:	701a      	strb	r2, [r3, #0]
    for(; i>0; i--) {
   10152:	697b      	ldr	r3, [r7, #20]
   10154:	3b01      	subs	r3, #1
   10156:	617b      	str	r3, [r7, #20]
   10158:	e7ef      	b.n	1013a <_ZN12CO_PDO_Class11CO_TPDOsendEP9CO_TPDO_t+0x1e>
    }

    TPDO->sendRequest = 0;
   1015a:	683b      	ldr	r3, [r7, #0]
   1015c:	2200      	movs	r2, #0
   1015e:	77da      	strb	r2, [r3, #31]

    return   ptrCODriverClass->CAN_Send( TPDO->CANtxBuff);
   10160:	4b06      	ldr	r3, [pc, #24]	; (1017c <_ZN12CO_PDO_Class11CO_TPDOsendEP9CO_TPDO_t+0x60>)
   10162:	681a      	ldr	r2, [r3, #0]
   10164:	683b      	ldr	r3, [r7, #0]
   10166:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   10168:	4619      	mov	r1, r3
   1016a:	4610      	mov	r0, r2
   1016c:	4b04      	ldr	r3, [pc, #16]	; (10180 <_ZN12CO_PDO_Class11CO_TPDOsendEP9CO_TPDO_t+0x64>)
   1016e:	4798      	blx	r3
   10170:	4603      	mov	r3, r0
}
   10172:	4618      	mov	r0, r3
   10174:	3718      	adds	r7, #24
   10176:	46bd      	mov	sp, r7
   10178:	bd80      	pop	{r7, pc}
   1017a:	bf00      	nop
   1017c:	200019a4 	.word	0x200019a4
   10180:	0000d961 	.word	0x0000d961

00010184 <_ZN12CO_PDO_Class15CO_RPDO_processEP9CO_RPDO_th>:

//#define RPDO_CALLS_EXTENSION
/******************************************************************************/
void CO_PDO_Class::CO_RPDO_process(CO_RPDO_t *RPDO, bool_t syncWas){
   10184:	b480      	push	{r7}
   10186:	b089      	sub	sp, #36	; 0x24
   10188:	af00      	add	r7, sp, #0
   1018a:	60f8      	str	r0, [r7, #12]
   1018c:	60b9      	str	r1, [r7, #8]
   1018e:	4613      	mov	r3, r2
   10190:	71fb      	strb	r3, [r7, #7]

    if(!RPDO->valid || !(*RPDO->operatingState == CO_NMT_OPERATIONAL))
   10192:	68bb      	ldr	r3, [r7, #8]
   10194:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
   10198:	2b00      	cmp	r3, #0
   1019a:	d004      	beq.n	101a6 <_ZN12CO_PDO_Class15CO_RPDO_processEP9CO_RPDO_th+0x22>
   1019c:	68bb      	ldr	r3, [r7, #8]
   1019e:	695b      	ldr	r3, [r3, #20]
   101a0:	781b      	ldrb	r3, [r3, #0]
   101a2:	2b05      	cmp	r3, #5
   101a4:	d009      	beq.n	101ba <_ZN12CO_PDO_Class15CO_RPDO_processEP9CO_RPDO_th+0x36>
    {
        RPDO->CANrxNew[0] = RPDO->CANrxNew[1] = false;
   101a6:	68bb      	ldr	r3, [r7, #8]
   101a8:	2200      	movs	r2, #0
   101aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
   101ae:	68bb      	ldr	r3, [r7, #8]
   101b0:	2200      	movs	r2, #0
   101b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
   101b6:	bf00      	nop
                }
            }
#endif
        }
    }
}
   101b8:	e046      	b.n	10248 <_ZN12CO_PDO_Class15CO_RPDO_processEP9CO_RPDO_th+0xc4>
    else if(!RPDO->synchronous || syncWas)
   101ba:	68bb      	ldr	r3, [r7, #8]
   101bc:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
   101c0:	2b00      	cmp	r3, #0
   101c2:	d002      	beq.n	101ca <_ZN12CO_PDO_Class15CO_RPDO_processEP9CO_RPDO_th+0x46>
   101c4:	79fb      	ldrb	r3, [r7, #7]
   101c6:	2b00      	cmp	r3, #0
   101c8:	d03e      	beq.n	10248 <_ZN12CO_PDO_Class15CO_RPDO_processEP9CO_RPDO_th+0xc4>
        uint8_t bufNo = 0;
   101ca:	2300      	movs	r3, #0
   101cc:	77fb      	strb	r3, [r7, #31]
        if(RPDO->synchronous && !RPDO->SYNC->CANrxToggle) {
   101ce:	68bb      	ldr	r3, [r7, #8]
   101d0:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
   101d4:	2b00      	cmp	r3, #0
   101d6:	d006      	beq.n	101e6 <_ZN12CO_PDO_Class15CO_RPDO_processEP9CO_RPDO_th+0x62>
   101d8:	68bb      	ldr	r3, [r7, #8]
   101da:	689b      	ldr	r3, [r3, #8]
   101dc:	7edb      	ldrb	r3, [r3, #27]
   101de:	2b00      	cmp	r3, #0
   101e0:	d101      	bne.n	101e6 <_ZN12CO_PDO_Class15CO_RPDO_processEP9CO_RPDO_th+0x62>
            bufNo = 1;
   101e2:	2301      	movs	r3, #1
   101e4:	77fb      	strb	r3, [r7, #31]
        while(RPDO->CANrxNew[bufNo]){
   101e6:	7ffb      	ldrb	r3, [r7, #31]
   101e8:	68ba      	ldr	r2, [r7, #8]
   101ea:	4413      	add	r3, r2
   101ec:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
   101f0:	b2db      	uxtb	r3, r3
   101f2:	2b00      	cmp	r3, #0
   101f4:	bf14      	ite	ne
   101f6:	2301      	movne	r3, #1
   101f8:	2300      	moveq	r3, #0
   101fa:	b2db      	uxtb	r3, r3
   101fc:	2b00      	cmp	r3, #0
   101fe:	d023      	beq.n	10248 <_ZN12CO_PDO_Class15CO_RPDO_processEP9CO_RPDO_th+0xc4>
            i = RPDO->dataLength;
   10200:	68bb      	ldr	r3, [r7, #8]
   10202:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
   10206:	61bb      	str	r3, [r7, #24]
            pPDOdataByte = &RPDO->CANrxData[bufNo][0];
   10208:	7ffb      	ldrb	r3, [r7, #31]
   1020a:	3308      	adds	r3, #8
   1020c:	00db      	lsls	r3, r3, #3
   1020e:	68ba      	ldr	r2, [r7, #8]
   10210:	4413      	add	r3, r2
   10212:	3306      	adds	r3, #6
   10214:	617b      	str	r3, [r7, #20]
            ppODdataByte = &RPDO->mapPointer[0];
   10216:	68bb      	ldr	r3, [r7, #8]
   10218:	3324      	adds	r3, #36	; 0x24
   1021a:	613b      	str	r3, [r7, #16]
            RPDO->CANrxNew[bufNo] = false;
   1021c:	7ffb      	ldrb	r3, [r7, #31]
   1021e:	68ba      	ldr	r2, [r7, #8]
   10220:	4413      	add	r3, r2
   10222:	2200      	movs	r2, #0
   10224:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            for(; i>0; i--) {
   10228:	69bb      	ldr	r3, [r7, #24]
   1022a:	2b00      	cmp	r3, #0
   1022c:	d0db      	beq.n	101e6 <_ZN12CO_PDO_Class15CO_RPDO_processEP9CO_RPDO_th+0x62>
                **(ppODdataByte++) = *(pPDOdataByte++);
   1022e:	693b      	ldr	r3, [r7, #16]
   10230:	1d1a      	adds	r2, r3, #4
   10232:	613a      	str	r2, [r7, #16]
   10234:	681a      	ldr	r2, [r3, #0]
   10236:	697b      	ldr	r3, [r7, #20]
   10238:	1c59      	adds	r1, r3, #1
   1023a:	6179      	str	r1, [r7, #20]
   1023c:	781b      	ldrb	r3, [r3, #0]
   1023e:	7013      	strb	r3, [r2, #0]
            for(; i>0; i--) {
   10240:	69bb      	ldr	r3, [r7, #24]
   10242:	3b01      	subs	r3, #1
   10244:	61bb      	str	r3, [r7, #24]
   10246:	e7ef      	b.n	10228 <_ZN12CO_PDO_Class15CO_RPDO_processEP9CO_RPDO_th+0xa4>
}
   10248:	bf00      	nop
   1024a:	3724      	adds	r7, #36	; 0x24
   1024c:	46bd      	mov	sp, r7
   1024e:	bc80      	pop	{r7}
   10250:	4770      	bx	lr
	...

00010254 <_ZN12CO_PDO_Class15CO_TPDO_processEP9CO_TPDO_tP9CO_SYNC_thm>:
void CO_PDO_Class::CO_TPDO_process(
        CO_TPDO_t              *TPDO,
        CO_SYNC_t              *SYNC,
        bool_t                  syncWas,
        uint32_t                timeDifference_us)
{
   10254:	b580      	push	{r7, lr}
   10256:	b084      	sub	sp, #16
   10258:	af00      	add	r7, sp, #0
   1025a:	60f8      	str	r0, [r7, #12]
   1025c:	60b9      	str	r1, [r7, #8]
   1025e:	607a      	str	r2, [r7, #4]
   10260:	70fb      	strb	r3, [r7, #3]
    if(TPDO->valid && *TPDO->operatingState == CO_NMT_OPERATIONAL){
   10262:	68bb      	ldr	r3, [r7, #8]
   10264:	7f5b      	ldrb	r3, [r3, #29]
   10266:	2b00      	cmp	r3, #0
   10268:	f000 809e 	beq.w	103a8 <_ZN12CO_PDO_Class15CO_TPDO_processEP9CO_TPDO_tP9CO_SYNC_thm+0x154>
   1026c:	68bb      	ldr	r3, [r7, #8]
   1026e:	691b      	ldr	r3, [r3, #16]
   10270:	781b      	ldrb	r3, [r3, #0]
   10272:	2b05      	cmp	r3, #5
   10274:	f040 8098 	bne.w	103a8 <_ZN12CO_PDO_Class15CO_TPDO_processEP9CO_TPDO_tP9CO_SYNC_thm+0x154>

        /* Send PDO by application request or by Event timer */
        if(TPDO->TPDOCommPar->transmissionType >= 253){
   10278:	68bb      	ldr	r3, [r7, #8]
   1027a:	689b      	ldr	r3, [r3, #8]
   1027c:	7a1b      	ldrb	r3, [r3, #8]
   1027e:	2bfc      	cmp	r3, #252	; 0xfc
   10280:	dd31      	ble.n	102e6 <_ZN12CO_PDO_Class15CO_TPDO_processEP9CO_TPDO_tP9CO_SYNC_thm+0x92>
            if(TPDO->inhibitTimer == 0 && (TPDO->sendRequest || (TPDO->TPDOCommPar->eventTimer && TPDO->eventTimer == 0))){
   10282:	68bb      	ldr	r3, [r7, #8]
   10284:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   10286:	2b00      	cmp	r3, #0
   10288:	f040 809b 	bne.w	103c2 <_ZN12CO_PDO_Class15CO_TPDO_processEP9CO_TPDO_tP9CO_SYNC_thm+0x16e>
   1028c:	68bb      	ldr	r3, [r7, #8]
   1028e:	7fdb      	ldrb	r3, [r3, #31]
   10290:	2b00      	cmp	r3, #0
   10292:	d10a      	bne.n	102aa <_ZN12CO_PDO_Class15CO_TPDO_processEP9CO_TPDO_tP9CO_SYNC_thm+0x56>
   10294:	68bb      	ldr	r3, [r7, #8]
   10296:	689b      	ldr	r3, [r3, #8]
   10298:	695b      	ldr	r3, [r3, #20]
   1029a:	2b00      	cmp	r3, #0
   1029c:	f000 8091 	beq.w	103c2 <_ZN12CO_PDO_Class15CO_TPDO_processEP9CO_TPDO_tP9CO_SYNC_thm+0x16e>
   102a0:	68bb      	ldr	r3, [r7, #8]
   102a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   102a4:	2b00      	cmp	r3, #0
   102a6:	f040 808c 	bne.w	103c2 <_ZN12CO_PDO_Class15CO_TPDO_processEP9CO_TPDO_tP9CO_SYNC_thm+0x16e>
                if(CO_TPDOsend(TPDO) == CO_ERROR_NO){
   102aa:	68b9      	ldr	r1, [r7, #8]
   102ac:	68f8      	ldr	r0, [r7, #12]
   102ae:	4b54      	ldr	r3, [pc, #336]	; (10400 <_ZN12CO_PDO_Class15CO_TPDO_processEP9CO_TPDO_tP9CO_SYNC_thm+0x1ac>)
   102b0:	4798      	blx	r3
   102b2:	4603      	mov	r3, r0
   102b4:	2b00      	cmp	r3, #0
   102b6:	bf0c      	ite	eq
   102b8:	2301      	moveq	r3, #1
   102ba:	2300      	movne	r3, #0
   102bc:	b2db      	uxtb	r3, r3
   102be:	2b00      	cmp	r3, #0
   102c0:	d07f      	beq.n	103c2 <_ZN12CO_PDO_Class15CO_TPDO_processEP9CO_TPDO_tP9CO_SYNC_thm+0x16e>
                    /* successfully sent */
                    TPDO->inhibitTimer = ((uint32_t) TPDO->TPDOCommPar->inhibitTime) * 100;
   102c2:	68bb      	ldr	r3, [r7, #8]
   102c4:	689b      	ldr	r3, [r3, #8]
   102c6:	68db      	ldr	r3, [r3, #12]
   102c8:	2264      	movs	r2, #100	; 0x64
   102ca:	fb02 f203 	mul.w	r2, r2, r3
   102ce:	68bb      	ldr	r3, [r7, #8]
   102d0:	645a      	str	r2, [r3, #68]	; 0x44
                    TPDO->eventTimer = ((uint32_t) TPDO->TPDOCommPar->eventTimer) * 1000;
   102d2:	68bb      	ldr	r3, [r7, #8]
   102d4:	689b      	ldr	r3, [r3, #8]
   102d6:	695b      	ldr	r3, [r3, #20]
   102d8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   102dc:	fb02 f203 	mul.w	r2, r2, r3
   102e0:	68bb      	ldr	r3, [r7, #8]
   102e2:	649a      	str	r2, [r3, #72]	; 0x48
        if(TPDO->TPDOCommPar->transmissionType >= 253){
   102e4:	e06d      	b.n	103c2 <_ZN12CO_PDO_Class15CO_TPDO_processEP9CO_TPDO_tP9CO_SYNC_thm+0x16e>
                }
            }
        }

        /* Synchronous PDOs */
        else if(SYNC && syncWas){
   102e6:	687b      	ldr	r3, [r7, #4]
   102e8:	2b00      	cmp	r3, #0
   102ea:	d06a      	beq.n	103c2 <_ZN12CO_PDO_Class15CO_TPDO_processEP9CO_TPDO_tP9CO_SYNC_thm+0x16e>
   102ec:	78fb      	ldrb	r3, [r7, #3]
   102ee:	2b00      	cmp	r3, #0
   102f0:	d067      	beq.n	103c2 <_ZN12CO_PDO_Class15CO_TPDO_processEP9CO_TPDO_tP9CO_SYNC_thm+0x16e>
            /* send synchronous acyclic PDO */
            if(TPDO->TPDOCommPar->transmissionType == 0){
   102f2:	68bb      	ldr	r3, [r7, #8]
   102f4:	689b      	ldr	r3, [r3, #8]
   102f6:	7a1b      	ldrb	r3, [r3, #8]
   102f8:	2b00      	cmp	r3, #0
   102fa:	d108      	bne.n	1030e <_ZN12CO_PDO_Class15CO_TPDO_processEP9CO_TPDO_tP9CO_SYNC_thm+0xba>
                if(TPDO->sendRequest) CO_TPDOsend(TPDO);
   102fc:	68bb      	ldr	r3, [r7, #8]
   102fe:	7fdb      	ldrb	r3, [r3, #31]
   10300:	2b00      	cmp	r3, #0
   10302:	d05e      	beq.n	103c2 <_ZN12CO_PDO_Class15CO_TPDO_processEP9CO_TPDO_tP9CO_SYNC_thm+0x16e>
   10304:	68b9      	ldr	r1, [r7, #8]
   10306:	68f8      	ldr	r0, [r7, #12]
   10308:	4b3d      	ldr	r3, [pc, #244]	; (10400 <_ZN12CO_PDO_Class15CO_TPDO_processEP9CO_TPDO_tP9CO_SYNC_thm+0x1ac>)
   1030a:	4798      	blx	r3
        if(TPDO->TPDOCommPar->transmissionType >= 253){
   1030c:	e059      	b.n	103c2 <_ZN12CO_PDO_Class15CO_TPDO_processEP9CO_TPDO_tP9CO_SYNC_thm+0x16e>
            }
            /* send synchronous cyclic PDO */
            else{
                /* is the start of synchronous TPDO transmission */
                if(TPDO->syncCounter == 255){
   1030e:	68bb      	ldr	r3, [r7, #8]
   10310:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
   10314:	2bff      	cmp	r3, #255	; 0xff
   10316:	d113      	bne.n	10340 <_ZN12CO_PDO_Class15CO_TPDO_processEP9CO_TPDO_tP9CO_SYNC_thm+0xec>
                    if(SYNC->counterOverflowValue && TPDO->TPDOCommPar->SYNCStartValue)
   10318:	687b      	ldr	r3, [r7, #4]
   1031a:	7e1b      	ldrb	r3, [r3, #24]
   1031c:	2b00      	cmp	r3, #0
   1031e:	d009      	beq.n	10334 <_ZN12CO_PDO_Class15CO_TPDO_processEP9CO_TPDO_tP9CO_SYNC_thm+0xe0>
   10320:	68bb      	ldr	r3, [r7, #8]
   10322:	689b      	ldr	r3, [r3, #8]
   10324:	7e1b      	ldrb	r3, [r3, #24]
   10326:	2b00      	cmp	r3, #0
   10328:	d004      	beq.n	10334 <_ZN12CO_PDO_Class15CO_TPDO_processEP9CO_TPDO_tP9CO_SYNC_thm+0xe0>
                        TPDO->syncCounter = 254;   /* SYNCStartValue is in use */
   1032a:	68bb      	ldr	r3, [r7, #8]
   1032c:	22fe      	movs	r2, #254	; 0xfe
   1032e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
   10332:	e005      	b.n	10340 <_ZN12CO_PDO_Class15CO_TPDO_processEP9CO_TPDO_tP9CO_SYNC_thm+0xec>
                    else
                        TPDO->syncCounter = TPDO->TPDOCommPar->transmissionType;
   10334:	68bb      	ldr	r3, [r7, #8]
   10336:	689b      	ldr	r3, [r3, #8]
   10338:	7a1a      	ldrb	r2, [r3, #8]
   1033a:	68bb      	ldr	r3, [r7, #8]
   1033c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
                }
                /* if the SYNCStartValue is in use, start first TPDO after SYNC with matched SYNCStartValue. */
                if(TPDO->syncCounter == 254){
   10340:	68bb      	ldr	r3, [r7, #8]
   10342:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
   10346:	2bfe      	cmp	r3, #254	; 0xfe
   10348:	d111      	bne.n	1036e <_ZN12CO_PDO_Class15CO_TPDO_processEP9CO_TPDO_tP9CO_SYNC_thm+0x11a>
                    if(SYNC->counter == TPDO->TPDOCommPar->SYNCStartValue){
   1034a:	687b      	ldr	r3, [r7, #4]
   1034c:	7f1a      	ldrb	r2, [r3, #28]
   1034e:	68bb      	ldr	r3, [r7, #8]
   10350:	689b      	ldr	r3, [r3, #8]
   10352:	7e1b      	ldrb	r3, [r3, #24]
   10354:	429a      	cmp	r2, r3
   10356:	d134      	bne.n	103c2 <_ZN12CO_PDO_Class15CO_TPDO_processEP9CO_TPDO_tP9CO_SYNC_thm+0x16e>
                        TPDO->syncCounter = TPDO->TPDOCommPar->transmissionType;
   10358:	68bb      	ldr	r3, [r7, #8]
   1035a:	689b      	ldr	r3, [r3, #8]
   1035c:	7a1a      	ldrb	r2, [r3, #8]
   1035e:	68bb      	ldr	r3, [r7, #8]
   10360:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
                        CO_TPDOsend(TPDO);
   10364:	68b9      	ldr	r1, [r7, #8]
   10366:	68f8      	ldr	r0, [r7, #12]
   10368:	4b25      	ldr	r3, [pc, #148]	; (10400 <_ZN12CO_PDO_Class15CO_TPDO_processEP9CO_TPDO_tP9CO_SYNC_thm+0x1ac>)
   1036a:	4798      	blx	r3
        if(TPDO->TPDOCommPar->transmissionType >= 253){
   1036c:	e029      	b.n	103c2 <_ZN12CO_PDO_Class15CO_TPDO_processEP9CO_TPDO_tP9CO_SYNC_thm+0x16e>
                    }
                }
                /* Send PDO after every N-th Sync */
                else if(--TPDO->syncCounter == 0){
   1036e:	68bb      	ldr	r3, [r7, #8]
   10370:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
   10374:	3b01      	subs	r3, #1
   10376:	b2da      	uxtb	r2, r3
   10378:	68bb      	ldr	r3, [r7, #8]
   1037a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
   1037e:	68bb      	ldr	r3, [r7, #8]
   10380:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
   10384:	2b00      	cmp	r3, #0
   10386:	bf0c      	ite	eq
   10388:	2301      	moveq	r3, #1
   1038a:	2300      	movne	r3, #0
   1038c:	b2db      	uxtb	r3, r3
   1038e:	2b00      	cmp	r3, #0
   10390:	d017      	beq.n	103c2 <_ZN12CO_PDO_Class15CO_TPDO_processEP9CO_TPDO_tP9CO_SYNC_thm+0x16e>
                    TPDO->syncCounter = TPDO->TPDOCommPar->transmissionType;
   10392:	68bb      	ldr	r3, [r7, #8]
   10394:	689b      	ldr	r3, [r3, #8]
   10396:	7a1a      	ldrb	r2, [r3, #8]
   10398:	68bb      	ldr	r3, [r7, #8]
   1039a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
                    CO_TPDOsend(TPDO);
   1039e:	68b9      	ldr	r1, [r7, #8]
   103a0:	68f8      	ldr	r0, [r7, #12]
   103a2:	4b17      	ldr	r3, [pc, #92]	; (10400 <_ZN12CO_PDO_Class15CO_TPDO_processEP9CO_TPDO_tP9CO_SYNC_thm+0x1ac>)
   103a4:	4798      	blx	r3
        if(TPDO->TPDOCommPar->transmissionType >= 253){
   103a6:	e00c      	b.n	103c2 <_ZN12CO_PDO_Class15CO_TPDO_processEP9CO_TPDO_tP9CO_SYNC_thm+0x16e>
        }

    }
    else{
        /* Not operational or valid. Force TPDO first send after operational or valid. */
        if(TPDO->TPDOCommPar->transmissionType>=254) TPDO->sendRequest = 1;
   103a8:	68bb      	ldr	r3, [r7, #8]
   103aa:	689b      	ldr	r3, [r3, #8]
   103ac:	7a1b      	ldrb	r3, [r3, #8]
   103ae:	2bfd      	cmp	r3, #253	; 0xfd
   103b0:	dd03      	ble.n	103ba <_ZN12CO_PDO_Class15CO_TPDO_processEP9CO_TPDO_tP9CO_SYNC_thm+0x166>
   103b2:	68bb      	ldr	r3, [r7, #8]
   103b4:	2201      	movs	r2, #1
   103b6:	77da      	strb	r2, [r3, #31]
   103b8:	e004      	b.n	103c4 <_ZN12CO_PDO_Class15CO_TPDO_processEP9CO_TPDO_tP9CO_SYNC_thm+0x170>
        else                                         TPDO->sendRequest = 0;
   103ba:	68bb      	ldr	r3, [r7, #8]
   103bc:	2200      	movs	r2, #0
   103be:	77da      	strb	r2, [r3, #31]
   103c0:	e000      	b.n	103c4 <_ZN12CO_PDO_Class15CO_TPDO_processEP9CO_TPDO_tP9CO_SYNC_thm+0x170>
        if(TPDO->TPDOCommPar->transmissionType >= 253){
   103c2:	bf00      	nop
    }

    /* update timers */
    TPDO->inhibitTimer = (TPDO->inhibitTimer > timeDifference_us) ? (TPDO->inhibitTimer - timeDifference_us) : 0;
   103c4:	68bb      	ldr	r3, [r7, #8]
   103c6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   103c8:	69bb      	ldr	r3, [r7, #24]
   103ca:	429a      	cmp	r2, r3
   103cc:	d904      	bls.n	103d8 <_ZN12CO_PDO_Class15CO_TPDO_processEP9CO_TPDO_tP9CO_SYNC_thm+0x184>
   103ce:	68bb      	ldr	r3, [r7, #8]
   103d0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   103d2:	69bb      	ldr	r3, [r7, #24]
   103d4:	1ad3      	subs	r3, r2, r3
   103d6:	e000      	b.n	103da <_ZN12CO_PDO_Class15CO_TPDO_processEP9CO_TPDO_tP9CO_SYNC_thm+0x186>
   103d8:	2300      	movs	r3, #0
   103da:	68ba      	ldr	r2, [r7, #8]
   103dc:	6453      	str	r3, [r2, #68]	; 0x44
    TPDO->eventTimer = (TPDO->eventTimer > timeDifference_us) ? (TPDO->eventTimer - timeDifference_us) : 0;
   103de:	68bb      	ldr	r3, [r7, #8]
   103e0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   103e2:	69bb      	ldr	r3, [r7, #24]
   103e4:	429a      	cmp	r2, r3
   103e6:	d904      	bls.n	103f2 <_ZN12CO_PDO_Class15CO_TPDO_processEP9CO_TPDO_tP9CO_SYNC_thm+0x19e>
   103e8:	68bb      	ldr	r3, [r7, #8]
   103ea:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   103ec:	69bb      	ldr	r3, [r7, #24]
   103ee:	1ad3      	subs	r3, r2, r3
   103f0:	e000      	b.n	103f4 <_ZN12CO_PDO_Class15CO_TPDO_processEP9CO_TPDO_tP9CO_SYNC_thm+0x1a0>
   103f2:	2300      	movs	r3, #0
   103f4:	68ba      	ldr	r2, [r7, #8]
   103f6:	6493      	str	r3, [r2, #72]	; 0x48
   103f8:	bf00      	nop
   103fa:	3710      	adds	r7, #16
   103fc:	46bd      	mov	sp, r7
   103fe:	bd80      	pop	{r7, pc}
   10400:	0001011d 	.word	0x0001011d

00010404 <_ZN12CO_SDO_ClassC1Ev>:
#include "CO_Driver_Class.h"

CO_SDO_Class	*ptrCOSDOClass;

// default constructor
CO_SDO_Class::CO_SDO_Class()
   10404:	b580      	push	{r7, lr}
   10406:	b082      	sub	sp, #8
   10408:	af00      	add	r7, sp, #0
   1040a:	6078      	str	r0, [r7, #4]
   1040c:	6878      	ldr	r0, [r7, #4]
   1040e:	4b05      	ldr	r3, [pc, #20]	; (10424 <_ZN12CO_SDO_ClassC1Ev+0x20>)
   10410:	4798      	blx	r3
{
	ptrCOSDOClass=this;
   10412:	4a05      	ldr	r2, [pc, #20]	; (10428 <_ZN12CO_SDO_ClassC1Ev+0x24>)
   10414:	687b      	ldr	r3, [r7, #4]
   10416:	6013      	str	r3, [r2, #0]
} //CO_SDO_Class
   10418:	687b      	ldr	r3, [r7, #4]
   1041a:	4618      	mov	r0, r3
   1041c:	3708      	adds	r7, #8
   1041e:	46bd      	mov	sp, r7
   10420:	bd80      	pop	{r7, pc}
   10422:	bf00      	nop
   10424:	00012a21 	.word	0x00012a21
   10428:	200019b4 	.word	0x200019b4

0001042c <_ZN12CO_SDO_ClassD1Ev>:

// default destructor
CO_SDO_Class::~CO_SDO_Class()
   1042c:	b580      	push	{r7, lr}
   1042e:	b082      	sub	sp, #8
   10430:	af00      	add	r7, sp, #0
   10432:	6078      	str	r0, [r7, #4]
   10434:	6878      	ldr	r0, [r7, #4]
   10436:	4b03      	ldr	r3, [pc, #12]	; (10444 <_ZN12CO_SDO_ClassD1Ev+0x18>)
   10438:	4798      	blx	r3
{
} //~CO_SDO_Class
   1043a:	687b      	ldr	r3, [r7, #4]
   1043c:	4618      	mov	r0, r3
   1043e:	3708      	adds	r7, #8
   10440:	46bd      	mov	sp, r7
   10442:	bd80      	pop	{r7, pc}
   10444:	00012a35 	.word	0x00012a35

00010448 <_ZN12CO_SDO_Class9CO_memcpyEPhPKhm>:

void CO_SDO_Class::CO_memcpy(uint8_t dest[], const uint8_t src[], const uint32_t size){
   10448:	b480      	push	{r7}
   1044a:	b087      	sub	sp, #28
   1044c:	af00      	add	r7, sp, #0
   1044e:	60f8      	str	r0, [r7, #12]
   10450:	60b9      	str	r1, [r7, #8]
   10452:	607a      	str	r2, [r7, #4]
   10454:	603b      	str	r3, [r7, #0]
    uint32_t i;
    for(i = 0; i < size; i++){
   10456:	2300      	movs	r3, #0
   10458:	617b      	str	r3, [r7, #20]
   1045a:	697a      	ldr	r2, [r7, #20]
   1045c:	683b      	ldr	r3, [r7, #0]
   1045e:	429a      	cmp	r2, r3
   10460:	d20b      	bcs.n	1047a <_ZN12CO_SDO_Class9CO_memcpyEPhPKhm+0x32>
        dest[i] = src[i];
   10462:	68ba      	ldr	r2, [r7, #8]
   10464:	697b      	ldr	r3, [r7, #20]
   10466:	4413      	add	r3, r2
   10468:	6879      	ldr	r1, [r7, #4]
   1046a:	697a      	ldr	r2, [r7, #20]
   1046c:	440a      	add	r2, r1
   1046e:	7812      	ldrb	r2, [r2, #0]
   10470:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < size; i++){
   10472:	697b      	ldr	r3, [r7, #20]
   10474:	3301      	adds	r3, #1
   10476:	617b      	str	r3, [r7, #20]
   10478:	e7ef      	b.n	1045a <_ZN12CO_SDO_Class9CO_memcpyEPhPKhm+0x12>
    }
}
   1047a:	bf00      	nop
   1047c:	371c      	adds	r7, #28
   1047e:	46bd      	mov	sp, r7
   10480:	bc80      	pop	{r7}
   10482:	4770      	bx	lr

00010484 <_ZN12CO_SDO_Class12CO_getUint32EPKh>:
    b.u8[0] = data[0];
    b.u8[1] = data[1];
    return b.u16[0];
}

uint32_t CO_SDO_Class::CO_getUint32(const uint8_t data[]){
   10484:	b480      	push	{r7}
   10486:	b087      	sub	sp, #28
   10488:	af00      	add	r7, sp, #0
   1048a:	6078      	str	r0, [r7, #4]
   1048c:	6039      	str	r1, [r7, #0]
    CO_bytes_t b;
    b.u8[0] = data[0];
   1048e:	683b      	ldr	r3, [r7, #0]
   10490:	781b      	ldrb	r3, [r3, #0]
   10492:	723b      	strb	r3, [r7, #8]
    b.u8[1] = data[1];
   10494:	683b      	ldr	r3, [r7, #0]
   10496:	3301      	adds	r3, #1
   10498:	781b      	ldrb	r3, [r3, #0]
   1049a:	727b      	strb	r3, [r7, #9]
    b.u8[2] = data[2];
   1049c:	683b      	ldr	r3, [r7, #0]
   1049e:	3302      	adds	r3, #2
   104a0:	781b      	ldrb	r3, [r3, #0]
   104a2:	72bb      	strb	r3, [r7, #10]
    b.u8[3] = data[3];
   104a4:	683b      	ldr	r3, [r7, #0]
   104a6:	3303      	adds	r3, #3
   104a8:	781b      	ldrb	r3, [r3, #0]
   104aa:	72fb      	strb	r3, [r7, #11]
    return b.u32[0];
   104ac:	68bb      	ldr	r3, [r7, #8]
}
   104ae:	4618      	mov	r0, r3
   104b0:	371c      	adds	r7, #28
   104b2:	46bd      	mov	sp, r7
   104b4:	bc80      	pop	{r7}
   104b6:	4770      	bx	lr

000104b8 <_ZN12CO_SDO_Class12CO_setUint32EPhm>:
    b.u16[0] = value;
    data[0] = b.u8[0];
    data[1] = b.u8[1];
}

void CO_SDO_Class::CO_setUint32(uint8_t data[], const uint32_t value){
   104b8:	b480      	push	{r7}
   104ba:	b089      	sub	sp, #36	; 0x24
   104bc:	af00      	add	r7, sp, #0
   104be:	60f8      	str	r0, [r7, #12]
   104c0:	60b9      	str	r1, [r7, #8]
   104c2:	607a      	str	r2, [r7, #4]
    CO_bytes_t b;
    b.u32[0] = value;
   104c4:	687b      	ldr	r3, [r7, #4]
   104c6:	613b      	str	r3, [r7, #16]
    data[0] = b.u8[0];
   104c8:	7c3a      	ldrb	r2, [r7, #16]
   104ca:	68bb      	ldr	r3, [r7, #8]
   104cc:	701a      	strb	r2, [r3, #0]
    data[1] = b.u8[1];
   104ce:	68bb      	ldr	r3, [r7, #8]
   104d0:	3301      	adds	r3, #1
   104d2:	7c7a      	ldrb	r2, [r7, #17]
   104d4:	701a      	strb	r2, [r3, #0]
    data[2] = b.u8[2];
   104d6:	68bb      	ldr	r3, [r7, #8]
   104d8:	3302      	adds	r3, #2
   104da:	7cba      	ldrb	r2, [r7, #18]
   104dc:	701a      	strb	r2, [r3, #0]
    data[3] = b.u8[3];
   104de:	68bb      	ldr	r3, [r7, #8]
   104e0:	3303      	adds	r3, #3
   104e2:	7cfa      	ldrb	r2, [r7, #19]
   104e4:	701a      	strb	r2, [r3, #0]
}
   104e6:	bf00      	nop
   104e8:	3724      	adds	r7, #36	; 0x24
   104ea:	46bd      	mov	sp, r7
   104ec:	bc80      	pop	{r7}
   104ee:	4770      	bx	lr

000104f0 <_ZN12CO_SDO_Class14CO_memcpySwap2EPvPKv>:

#ifdef CO_LITTLE_ENDIAN
void CO_SDO_Class::CO_memcpySwap2(void* dest, const void* src){
   104f0:	b480      	push	{r7}
   104f2:	b087      	sub	sp, #28
   104f4:	af00      	add	r7, sp, #0
   104f6:	60f8      	str	r0, [r7, #12]
   104f8:	60b9      	str	r1, [r7, #8]
   104fa:	607a      	str	r2, [r7, #4]
    char *cdest;
    char *csrc;
    cdest = (char *) dest;
   104fc:	68bb      	ldr	r3, [r7, #8]
   104fe:	617b      	str	r3, [r7, #20]
    csrc = (char *) src;
   10500:	687b      	ldr	r3, [r7, #4]
   10502:	613b      	str	r3, [r7, #16]
    cdest[0] = csrc[0];
   10504:	693b      	ldr	r3, [r7, #16]
   10506:	781a      	ldrb	r2, [r3, #0]
   10508:	697b      	ldr	r3, [r7, #20]
   1050a:	701a      	strb	r2, [r3, #0]
    cdest[1] = csrc[1];
   1050c:	697b      	ldr	r3, [r7, #20]
   1050e:	3301      	adds	r3, #1
   10510:	693a      	ldr	r2, [r7, #16]
   10512:	7852      	ldrb	r2, [r2, #1]
   10514:	701a      	strb	r2, [r3, #0]
}
   10516:	bf00      	nop
   10518:	371c      	adds	r7, #28
   1051a:	46bd      	mov	sp, r7
   1051c:	bc80      	pop	{r7}
   1051e:	4770      	bx	lr

00010520 <_ZN12CO_SDO_Class14CO_memcpySwap4EPvPKv>:
void CO_SDO_Class::CO_memcpySwap4(void* dest, const void* src){
   10520:	b480      	push	{r7}
   10522:	b087      	sub	sp, #28
   10524:	af00      	add	r7, sp, #0
   10526:	60f8      	str	r0, [r7, #12]
   10528:	60b9      	str	r1, [r7, #8]
   1052a:	607a      	str	r2, [r7, #4]
    char *cdest;
    char *csrc;
    cdest = (char *) dest;
   1052c:	68bb      	ldr	r3, [r7, #8]
   1052e:	617b      	str	r3, [r7, #20]
    csrc = (char *) src;
   10530:	687b      	ldr	r3, [r7, #4]
   10532:	613b      	str	r3, [r7, #16]
    cdest[0] = csrc[0];
   10534:	693b      	ldr	r3, [r7, #16]
   10536:	781a      	ldrb	r2, [r3, #0]
   10538:	697b      	ldr	r3, [r7, #20]
   1053a:	701a      	strb	r2, [r3, #0]
    cdest[1] = csrc[1];
   1053c:	697b      	ldr	r3, [r7, #20]
   1053e:	3301      	adds	r3, #1
   10540:	693a      	ldr	r2, [r7, #16]
   10542:	7852      	ldrb	r2, [r2, #1]
   10544:	701a      	strb	r2, [r3, #0]
    cdest[2] = csrc[2];
   10546:	697b      	ldr	r3, [r7, #20]
   10548:	3302      	adds	r3, #2
   1054a:	693a      	ldr	r2, [r7, #16]
   1054c:	7892      	ldrb	r2, [r2, #2]
   1054e:	701a      	strb	r2, [r3, #0]
    cdest[3] = csrc[3];
   10550:	697b      	ldr	r3, [r7, #20]
   10552:	3303      	adds	r3, #3
   10554:	693a      	ldr	r2, [r7, #16]
   10556:	78d2      	ldrb	r2, [r2, #3]
   10558:	701a      	strb	r2, [r3, #0]
}
   1055a:	bf00      	nop
   1055c:	371c      	adds	r7, #28
   1055e:	46bd      	mov	sp, r7
   10560:	bc80      	pop	{r7}
   10562:	4770      	bx	lr

00010564 <_ZL14CO_SDO_receivePvPK13CO_CANrxMsg_t>:
 * Function will be called (by CAN receive interrupt) every time, when CAN
 * message with correct identifier will be received. For more information and
 * description of parameters see file CO_driver.h.
 */

static void CO_SDO_receive(void *object, const CO_CANrxMsg_t *msg){
   10564:	b580      	push	{r7, lr}
   10566:	b086      	sub	sp, #24
   10568:	af00      	add	r7, sp, #0
   1056a:	6078      	str	r0, [r7, #4]
   1056c:	6039      	str	r1, [r7, #0]
    CO_SDO_t *SDO;
	
    SDO = (CO_SDO_t*)object;   /* this is the correct pointer type of the first argument */
   1056e:	687b      	ldr	r3, [r7, #4]
   10570:	613b      	str	r3, [r7, #16]
     * starting another SDO request, this request is dropped. Especially if
     * processing function has slow response.
     * See: https://github.com/CANopenNode/CANopenNode/issues/39 */

    /* verify message length and message overflow (previous message was not processed yet) */
    if((msg->DLC == 8U) && (!SDO->CANrxNew)){
   10572:	683b      	ldr	r3, [r7, #0]
   10574:	7d1b      	ldrb	r3, [r3, #20]
   10576:	2b08      	cmp	r3, #8
   10578:	f040 80a4 	bne.w	106c4 <_ZL14CO_SDO_receivePvPK13CO_CANrxMsg_t+0x160>
   1057c:	693b      	ldr	r3, [r7, #16]
   1057e:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
   10582:	2b00      	cmp	r3, #0
   10584:	f040 809e 	bne.w	106c4 <_ZL14CO_SDO_receivePvPK13CO_CANrxMsg_t+0x160>
        if(SDO->state != CO_SDO_ST_DOWNLOAD_BL_SUBBLOCK) {
   10588:	693b      	ldr	r3, [r7, #16]
   1058a:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
   1058e:	2b15      	cmp	r3, #21
   10590:	d024      	beq.n	105dc <_ZL14CO_SDO_receivePvPK13CO_CANrxMsg_t+0x78>
            /* copy data and set 'new message' flag */
            SDO->CANrxData[0] = msg->data[0];
   10592:	683b      	ldr	r3, [r7, #0]
   10594:	7d5a      	ldrb	r2, [r3, #21]
   10596:	693b      	ldr	r3, [r7, #16]
   10598:	701a      	strb	r2, [r3, #0]
            SDO->CANrxData[1] = msg->data[1];
   1059a:	683b      	ldr	r3, [r7, #0]
   1059c:	7d9a      	ldrb	r2, [r3, #22]
   1059e:	693b      	ldr	r3, [r7, #16]
   105a0:	705a      	strb	r2, [r3, #1]
            SDO->CANrxData[2] = msg->data[2];
   105a2:	683b      	ldr	r3, [r7, #0]
   105a4:	7dda      	ldrb	r2, [r3, #23]
   105a6:	693b      	ldr	r3, [r7, #16]
   105a8:	709a      	strb	r2, [r3, #2]
            SDO->CANrxData[3] = msg->data[3];
   105aa:	683b      	ldr	r3, [r7, #0]
   105ac:	7e1a      	ldrb	r2, [r3, #24]
   105ae:	693b      	ldr	r3, [r7, #16]
   105b0:	70da      	strb	r2, [r3, #3]
            SDO->CANrxData[4] = msg->data[4];
   105b2:	683b      	ldr	r3, [r7, #0]
   105b4:	7e5a      	ldrb	r2, [r3, #25]
   105b6:	693b      	ldr	r3, [r7, #16]
   105b8:	711a      	strb	r2, [r3, #4]
            SDO->CANrxData[5] = msg->data[5];
   105ba:	683b      	ldr	r3, [r7, #0]
   105bc:	7e9a      	ldrb	r2, [r3, #26]
   105be:	693b      	ldr	r3, [r7, #16]
   105c0:	715a      	strb	r2, [r3, #5]
            SDO->CANrxData[6] = msg->data[6];
   105c2:	683b      	ldr	r3, [r7, #0]
   105c4:	7eda      	ldrb	r2, [r3, #27]
   105c6:	693b      	ldr	r3, [r7, #16]
   105c8:	719a      	strb	r2, [r3, #6]
            SDO->CANrxData[7] = msg->data[7];
   105ca:	683b      	ldr	r3, [r7, #0]
   105cc:	7f1a      	ldrb	r2, [r3, #28]
   105ce:	693b      	ldr	r3, [r7, #16]
   105d0:	71da      	strb	r2, [r3, #7]

            SDO->CANrxNew = true;
   105d2:	693b      	ldr	r3, [r7, #16]
   105d4:	2201      	movs	r2, #1
   105d6:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
   105da:	e067      	b.n	106ac <_ZL14CO_SDO_receivePvPK13CO_CANrxMsg_t+0x148>
        }
        else {
            /* block download, copy data directly */
            uint8_t seqno;

            SDO->CANrxData[0] = msg->data[0];
   105dc:	683b      	ldr	r3, [r7, #0]
   105de:	7d5a      	ldrb	r2, [r3, #21]
   105e0:	693b      	ldr	r3, [r7, #16]
   105e2:	701a      	strb	r2, [r3, #0]
            seqno = SDO->CANrxData[0] & 0x7fU;
   105e4:	693b      	ldr	r3, [r7, #16]
   105e6:	781b      	ldrb	r3, [r3, #0]
   105e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   105ec:	73fb      	strb	r3, [r7, #15]
            SDO->timeoutTimer = 0;
   105ee:	693b      	ldr	r3, [r7, #16]
   105f0:	2200      	movs	r2, #0
   105f2:	66da      	str	r2, [r3, #108]	; 0x6c

            /* check correct sequence number. */
            if(seqno == (SDO->sequence + 1U)) {
   105f4:	7bfa      	ldrb	r2, [r7, #15]
   105f6:	693b      	ldr	r3, [r7, #16]
   105f8:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
   105fc:	3301      	adds	r3, #1
   105fe:	429a      	cmp	r2, r3
   10600:	d141      	bne.n	10686 <_ZL14CO_SDO_receivePvPK13CO_CANrxMsg_t+0x122>
                /* sequence is correct */
                uint8_t i;

                SDO->sequence++;
   10602:	693b      	ldr	r3, [r7, #16]
   10604:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
   10608:	3301      	adds	r3, #1
   1060a:	b2da      	uxtb	r2, r3
   1060c:	693b      	ldr	r3, [r7, #16]
   1060e:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

                /* copy data */
                for(i=1; i<8; i++) {
   10612:	2301      	movs	r3, #1
   10614:	75fb      	strb	r3, [r7, #23]
   10616:	7dfb      	ldrb	r3, [r7, #23]
   10618:	2b07      	cmp	r3, #7
   1061a:	dc1d      	bgt.n	10658 <_ZL14CO_SDO_receivePvPK13CO_CANrxMsg_t+0xf4>
                    SDO->ODF_arg.data[SDO->bufferOffset++] = msg->data[i]; //SDO->ODF_arg.data is equal as SDO->databuffer
   1061c:	693b      	ldr	r3, [r7, #16]
   1061e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   10620:	693b      	ldr	r3, [r7, #16]
   10622:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   10624:	1c58      	adds	r0, r3, #1
   10626:	6939      	ldr	r1, [r7, #16]
   10628:	6388      	str	r0, [r1, #56]	; 0x38
   1062a:	4413      	add	r3, r2
   1062c:	7dfa      	ldrb	r2, [r7, #23]
   1062e:	6839      	ldr	r1, [r7, #0]
   10630:	440a      	add	r2, r1
   10632:	7d52      	ldrb	r2, [r2, #21]
   10634:	701a      	strb	r2, [r3, #0]
                    if(SDO->bufferOffset >= CO_SDO_BUFFER_SIZE) {
   10636:	693b      	ldr	r3, [r7, #16]
   10638:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1063a:	2b1f      	cmp	r3, #31
   1063c:	d908      	bls.n	10650 <_ZL14CO_SDO_receivePvPK13CO_CANrxMsg_t+0xec>
                        /* buffer full, break reception */
                        SDO->state = CO_SDO_ST_DOWNLOAD_BL_SUB_RESP;
   1063e:	693b      	ldr	r3, [r7, #16]
   10640:	2216      	movs	r2, #22
   10642:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
                        SDO->CANrxNew = true;
   10646:	693b      	ldr	r3, [r7, #16]
   10648:	2201      	movs	r2, #1
   1064a:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
                        break;
   1064e:	e003      	b.n	10658 <_ZL14CO_SDO_receivePvPK13CO_CANrxMsg_t+0xf4>
                for(i=1; i<8; i++) {
   10650:	7dfb      	ldrb	r3, [r7, #23]
   10652:	3301      	adds	r3, #1
   10654:	75fb      	strb	r3, [r7, #23]
   10656:	e7de      	b.n	10616 <_ZL14CO_SDO_receivePvPK13CO_CANrxMsg_t+0xb2>
                    }
                }

                /* break reception if last segment or block sequence is too large */
                if(((SDO->CANrxData[0] & 0x80U) == 0x80U) || (SDO->sequence >= SDO->blksize)) {
   10658:	693b      	ldr	r3, [r7, #16]
   1065a:	781b      	ldrb	r3, [r3, #0]
   1065c:	b25b      	sxtb	r3, r3
   1065e:	2b00      	cmp	r3, #0
   10660:	db08      	blt.n	10674 <_ZL14CO_SDO_receivePvPK13CO_CANrxMsg_t+0x110>
   10662:	693b      	ldr	r3, [r7, #16]
   10664:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
   10668:	461a      	mov	r2, r3
   1066a:	693b      	ldr	r3, [r7, #16]
   1066c:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
   10670:	429a      	cmp	r2, r3
   10672:	db1b      	blt.n	106ac <_ZL14CO_SDO_receivePvPK13CO_CANrxMsg_t+0x148>
                    SDO->state = CO_SDO_ST_DOWNLOAD_BL_SUB_RESP;
   10674:	693b      	ldr	r3, [r7, #16]
   10676:	2216      	movs	r2, #22
   10678:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
                    SDO->CANrxNew = true;
   1067c:	693b      	ldr	r3, [r7, #16]
   1067e:	2201      	movs	r2, #1
   10680:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
   10684:	e012      	b.n	106ac <_ZL14CO_SDO_receivePvPK13CO_CANrxMsg_t+0x148>
                }
            }
            else if((seqno == SDO->sequence) || (SDO->sequence == 0U)){
   10686:	693b      	ldr	r3, [r7, #16]
   10688:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
   1068c:	7bfa      	ldrb	r2, [r7, #15]
   1068e:	429a      	cmp	r2, r3
   10690:	d00c      	beq.n	106ac <_ZL14CO_SDO_receivePvPK13CO_CANrxMsg_t+0x148>
   10692:	693b      	ldr	r3, [r7, #16]
   10694:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
   10698:	2b00      	cmp	r3, #0
   1069a:	d007      	beq.n	106ac <_ZL14CO_SDO_receivePvPK13CO_CANrxMsg_t+0x148>
                /* Ignore message, if it is duplicate or if sequence didn't started yet. */
            }
            else {
                /* seqno is totally wrong, break reception. */
                SDO->state = CO_SDO_ST_DOWNLOAD_BL_SUB_RESP;
   1069c:	693b      	ldr	r3, [r7, #16]
   1069e:	2216      	movs	r2, #22
   106a0:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
                SDO->CANrxNew = true;
   106a4:	693b      	ldr	r3, [r7, #16]
   106a6:	2201      	movs	r2, #1
   106a8:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
            }
        }

        /* Optional signal to RTOS, which can resume task, which handles SDO server. */
        if(SDO->CANrxNew && SDO->ptrFunctSignal != NULL) {
   106ac:	693b      	ldr	r3, [r7, #16]
   106ae:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
   106b2:	2b00      	cmp	r3, #0
   106b4:	d006      	beq.n	106c4 <_ZL14CO_SDO_receivePvPK13CO_CANrxMsg_t+0x160>
   106b6:	693b      	ldr	r3, [r7, #16]
   106b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   106ba:	2b00      	cmp	r3, #0
   106bc:	d002      	beq.n	106c4 <_ZL14CO_SDO_receivePvPK13CO_CANrxMsg_t+0x160>
            SDO->ptrFunctSignal();
   106be:	693b      	ldr	r3, [r7, #16]
   106c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   106c2:	4798      	blx	r3
        }
    }
}
   106c4:	bf00      	nop
   106c6:	3718      	adds	r7, #24
   106c8:	46bd      	mov	sp, r7
   106ca:	bd80      	pop	{r7, pc}

000106cc <_ZL11CO_ODF_1200P12CO_ODF_arg_t>:
 * Function for accessing _SDO server parameter_ for default SDO (index 0x1200)
 * from SDO server.
 *
 * For more information see file CO_SDO.h.
 */
 static CO_SDO_abortCode_t  CO_ODF_1200(CO_ODF_arg_t *ODF_arg){
   106cc:	b580      	push	{r7, lr}
   106ce:	b086      	sub	sp, #24
   106d0:	af00      	add	r7, sp, #0
   106d2:	6078      	str	r0, [r7, #4]
    uint8_t *nodeId;
    uint32_t value;
    CO_SDO_abortCode_t ret = CO_SDO_AB_NONE;
   106d4:	2300      	movs	r3, #0
   106d6:	617b      	str	r3, [r7, #20]

    nodeId = (uint8_t*) ODF_arg->object;
   106d8:	687b      	ldr	r3, [r7, #4]
   106da:	681b      	ldr	r3, [r3, #0]
   106dc:	613b      	str	r3, [r7, #16]
    value = ptrCODriverClass->CO_getUint32(ODF_arg->data);
   106de:	4b12      	ldr	r3, [pc, #72]	; (10728 <_ZL11CO_ODF_1200P12CO_ODF_arg_t+0x5c>)
   106e0:	681b      	ldr	r3, [r3, #0]
   106e2:	1d1a      	adds	r2, r3, #4
   106e4:	687b      	ldr	r3, [r7, #4]
   106e6:	685b      	ldr	r3, [r3, #4]
   106e8:	4619      	mov	r1, r3
   106ea:	4610      	mov	r0, r2
   106ec:	4b0f      	ldr	r3, [pc, #60]	; (1072c <_ZL11CO_ODF_1200P12CO_ODF_arg_t+0x60>)
   106ee:	4798      	blx	r3
   106f0:	60f8      	str	r0, [r7, #12]

    /* if SDO reading Object dictionary 0x1200, add nodeId to the value */
    if((ODF_arg->reading) && (ODF_arg->subIndex > 0U)){
   106f2:	687b      	ldr	r3, [r7, #4]
   106f4:	7f5b      	ldrb	r3, [r3, #29]
   106f6:	2b00      	cmp	r3, #0
   106f8:	d010      	beq.n	1071c <_ZL11CO_ODF_1200P12CO_ODF_arg_t+0x50>
   106fa:	687b      	ldr	r3, [r7, #4]
   106fc:	7f1b      	ldrb	r3, [r3, #28]
   106fe:	2b00      	cmp	r3, #0
   10700:	d00c      	beq.n	1071c <_ZL11CO_ODF_1200P12CO_ODF_arg_t+0x50>
        ptrCODriverClass->CO_setUint32(ODF_arg->data, value + *nodeId);
   10702:	4b09      	ldr	r3, [pc, #36]	; (10728 <_ZL11CO_ODF_1200P12CO_ODF_arg_t+0x5c>)
   10704:	681b      	ldr	r3, [r3, #0]
   10706:	1d18      	adds	r0, r3, #4
   10708:	687b      	ldr	r3, [r7, #4]
   1070a:	6859      	ldr	r1, [r3, #4]
   1070c:	693b      	ldr	r3, [r7, #16]
   1070e:	781b      	ldrb	r3, [r3, #0]
   10710:	461a      	mov	r2, r3
   10712:	68fb      	ldr	r3, [r7, #12]
   10714:	4413      	add	r3, r2
   10716:	461a      	mov	r2, r3
   10718:	4b05      	ldr	r3, [pc, #20]	; (10730 <_ZL11CO_ODF_1200P12CO_ODF_arg_t+0x64>)
   1071a:	4798      	blx	r3
    }

    return ret;
   1071c:	697b      	ldr	r3, [r7, #20]
}
   1071e:	4618      	mov	r0, r3
   10720:	3718      	adds	r7, #24
   10722:	46bd      	mov	sp, r7
   10724:	bd80      	pop	{r7, pc}
   10726:	bf00      	nop
   10728:	200019a4 	.word	0x200019a4
   1072c:	00010485 	.word	0x00010485
   10730:	000104b9 	.word	0x000104b9

00010734 <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m>:
        uint8_t                 nodeId,
        CO_CANmodule_t         *CANdevRx,
        uint32_t                CANdevRxIdx,
        CO_CANmodule_t         *CANdevTx,
        uint32_t                CANdevTxIdx)
{
   10734:	b5b0      	push	{r4, r5, r7, lr}
   10736:	b08a      	sub	sp, #40	; 0x28
   10738:	af04      	add	r7, sp, #16
   1073a:	60f8      	str	r0, [r7, #12]
   1073c:	60b9      	str	r1, [r7, #8]
   1073e:	607a      	str	r2, [r7, #4]
   10740:	603b      	str	r3, [r7, #0]
    /* verify arguments */
    if(SDO_init==NULL || CANdevRx==NULL || CANdevTx==NULL){
   10742:	68bb      	ldr	r3, [r7, #8]
   10744:	2b00      	cmp	r3, #0
   10746:	d005      	beq.n	10754 <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x20>
   10748:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1074a:	2b00      	cmp	r3, #0
   1074c:	d002      	beq.n	10754 <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x20>
   1074e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   10750:	2b00      	cmp	r3, #0
   10752:	d102      	bne.n	1075a <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x26>
        return CO_ERROR_ILLEGAL_ARGUMENT;
   10754:	f04f 33ff 	mov.w	r3, #4294967295
   10758:	e0ac      	b.n	108b4 <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x180>
    }else{
		SDO=SDO_init;
   1075a:	68fb      	ldr	r3, [r7, #12]
   1075c:	68ba      	ldr	r2, [r7, #8]
   1075e:	601a      	str	r2, [r3, #0]
	}
	
    /* configure own object dictionary */
    if(parentSDO == NULL){
   10760:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   10762:	2b00      	cmp	r3, #0
   10764:	d13b      	bne.n	107de <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0xaa>
        uint32_t i;

        SDO->ownOD = true;
   10766:	68fb      	ldr	r3, [r7, #12]
   10768:	681b      	ldr	r3, [r3, #0]
   1076a:	2201      	movs	r2, #1
   1076c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        SDO->OD = OD;
   10770:	68fb      	ldr	r3, [r7, #12]
   10772:	681b      	ldr	r3, [r3, #0]
   10774:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   10776:	62da      	str	r2, [r3, #44]	; 0x2c
        SDO->ODSize = ODSize;
   10778:	68fb      	ldr	r3, [r7, #12]
   1077a:	681b      	ldr	r3, [r3, #0]
   1077c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   1077e:	631a      	str	r2, [r3, #48]	; 0x30
        SDO->ODExtensions = ODExtensions;
   10780:	68fb      	ldr	r3, [r7, #12]
   10782:	681b      	ldr	r3, [r3, #0]
   10784:	6bba      	ldr	r2, [r7, #56]	; 0x38
   10786:	635a      	str	r2, [r3, #52]	; 0x34

        /* clear pointers in ODExtensions */
        for(i=0U; i<ODSize; i++){
   10788:	2300      	movs	r3, #0
   1078a:	617b      	str	r3, [r7, #20]
   1078c:	697a      	ldr	r2, [r7, #20]
   1078e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   10790:	429a      	cmp	r2, r3
   10792:	d238      	bcs.n	10806 <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0xd2>
            SDO->ODExtensions[i].pODFunc = NULL;
   10794:	68fb      	ldr	r3, [r7, #12]
   10796:	681b      	ldr	r3, [r3, #0]
   10798:	6b59      	ldr	r1, [r3, #52]	; 0x34
   1079a:	697a      	ldr	r2, [r7, #20]
   1079c:	4613      	mov	r3, r2
   1079e:	005b      	lsls	r3, r3, #1
   107a0:	4413      	add	r3, r2
   107a2:	009b      	lsls	r3, r3, #2
   107a4:	440b      	add	r3, r1
   107a6:	2200      	movs	r2, #0
   107a8:	601a      	str	r2, [r3, #0]
            SDO->ODExtensions[i].object = NULL;
   107aa:	68fb      	ldr	r3, [r7, #12]
   107ac:	681b      	ldr	r3, [r3, #0]
   107ae:	6b59      	ldr	r1, [r3, #52]	; 0x34
   107b0:	697a      	ldr	r2, [r7, #20]
   107b2:	4613      	mov	r3, r2
   107b4:	005b      	lsls	r3, r3, #1
   107b6:	4413      	add	r3, r2
   107b8:	009b      	lsls	r3, r3, #2
   107ba:	440b      	add	r3, r1
   107bc:	2200      	movs	r2, #0
   107be:	605a      	str	r2, [r3, #4]
            SDO->ODExtensions[i].flags = NULL;
   107c0:	68fb      	ldr	r3, [r7, #12]
   107c2:	681b      	ldr	r3, [r3, #0]
   107c4:	6b59      	ldr	r1, [r3, #52]	; 0x34
   107c6:	697a      	ldr	r2, [r7, #20]
   107c8:	4613      	mov	r3, r2
   107ca:	005b      	lsls	r3, r3, #1
   107cc:	4413      	add	r3, r2
   107ce:	009b      	lsls	r3, r3, #2
   107d0:	440b      	add	r3, r1
   107d2:	2200      	movs	r2, #0
   107d4:	609a      	str	r2, [r3, #8]
        for(i=0U; i<ODSize; i++){
   107d6:	697b      	ldr	r3, [r7, #20]
   107d8:	3301      	adds	r3, #1
   107da:	617b      	str	r3, [r7, #20]
   107dc:	e7d6      	b.n	1078c <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x58>
        }
    }
    /* copy object dictionary from parent */
    else{
        SDO->ownOD = false;
   107de:	68fb      	ldr	r3, [r7, #12]
   107e0:	681b      	ldr	r3, [r3, #0]
   107e2:	2200      	movs	r2, #0
   107e4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        SDO->OD = parentSDO->OD;
   107e8:	68fb      	ldr	r3, [r7, #12]
   107ea:	681b      	ldr	r3, [r3, #0]
   107ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   107ee:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
   107f0:	62da      	str	r2, [r3, #44]	; 0x2c
        SDO->ODSize = parentSDO->ODSize;
   107f2:	68fb      	ldr	r3, [r7, #12]
   107f4:	681b      	ldr	r3, [r3, #0]
   107f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   107f8:	6b12      	ldr	r2, [r2, #48]	; 0x30
   107fa:	631a      	str	r2, [r3, #48]	; 0x30
        SDO->ODExtensions = parentSDO->ODExtensions;
   107fc:	68fb      	ldr	r3, [r7, #12]
   107fe:	681b      	ldr	r3, [r3, #0]
   10800:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   10802:	6b52      	ldr	r2, [r2, #52]	; 0x34
   10804:	635a      	str	r2, [r3, #52]	; 0x34
    }

    /* Configure object variables */
    SDO->nodeId = nodeId;
   10806:	68fb      	ldr	r3, [r7, #12]
   10808:	681b      	ldr	r3, [r3, #0]
   1080a:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
   1080e:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    SDO->state = CO_SDO_ST_IDLE;
   10812:	68fb      	ldr	r3, [r7, #12]
   10814:	681b      	ldr	r3, [r3, #0]
   10816:	2200      	movs	r2, #0
   10818:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
    SDO->CANrxNew = false;
   1081c:	68fb      	ldr	r3, [r7, #12]
   1081e:	681b      	ldr	r3, [r3, #0]
   10820:	2200      	movs	r2, #0
   10822:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
    SDO->ptrFunctSignal = NULL;
   10826:	68fb      	ldr	r3, [r7, #12]
   10828:	681b      	ldr	r3, [r3, #0]
   1082a:	2200      	movs	r2, #0
   1082c:	67da      	str	r2, [r3, #124]	; 0x7c


    /* Configure Object dictionary entry at index 0x1200 */
    if(ObjDictIndex_SDOServerParameter == OD_H1200_SDO_SERVER_PARAM){
   1082e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   10830:	f5b3 5f90 	cmp.w	r3, #4608	; 0x1200
   10834:	d10f      	bne.n	10856 <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x122>
        ptrCODriverClass->CO_OD_configure( ObjDictIndex_SDOServerParameter, CO_ODF_1200, (void*)&SDO->nodeId, 0U, 0U);
   10836:	4b21      	ldr	r3, [pc, #132]	; (108bc <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x188>)
   10838:	681b      	ldr	r3, [r3, #0]
   1083a:	1d18      	adds	r0, r3, #4
   1083c:	68fb      	ldr	r3, [r7, #12]
   1083e:	681b      	ldr	r3, [r3, #0]
   10840:	f103 0268 	add.w	r2, r3, #104	; 0x68
   10844:	2300      	movs	r3, #0
   10846:	9301      	str	r3, [sp, #4]
   10848:	2300      	movs	r3, #0
   1084a:	9300      	str	r3, [sp, #0]
   1084c:	4613      	mov	r3, r2
   1084e:	4a1c      	ldr	r2, [pc, #112]	; (108c0 <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x18c>)
   10850:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   10852:	4c1c      	ldr	r4, [pc, #112]	; (108c4 <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x190>)
   10854:	47a0      	blx	r4
    }

    if((COB_IDClientToServer & 0x80000000) != 0 || (COB_IDServerToClient & 0x80000000) != 0 ){
   10856:	687b      	ldr	r3, [r7, #4]
   10858:	2b00      	cmp	r3, #0
   1085a:	db02      	blt.n	10862 <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x12e>
   1085c:	683b      	ldr	r3, [r7, #0]
   1085e:	2b00      	cmp	r3, #0
   10860:	da03      	bge.n	1086a <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x136>
        // SDO is invalid
        COB_IDClientToServer = 0;
   10862:	2300      	movs	r3, #0
   10864:	607b      	str	r3, [r7, #4]
        COB_IDServerToClient = 0;
   10866:	2300      	movs	r3, #0
   10868:	603b      	str	r3, [r7, #0]
    }
    /* configure SDO server CAN reception */
  ptrCODriverClass->CAN_Rx_BufferInit(
   1086a:	4b14      	ldr	r3, [pc, #80]	; (108bc <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x188>)
   1086c:	6818      	ldr	r0, [r3, #0]
            CANdevRxIdx,            /* rx buffer index */
            COB_IDClientToServer,   /* CAN identifier */
            0x7FF,                  /* mask */
            0,                      /* rtr */
            (void*)SDO,             /* object passed to receive function */
   1086e:	68fb      	ldr	r3, [r7, #12]
   10870:	681b      	ldr	r3, [r3, #0]
            CO_SDO_receive);        /* this function will process received message */
   10872:	4a15      	ldr	r2, [pc, #84]	; (108c8 <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x194>)
   10874:	9202      	str	r2, [sp, #8]
   10876:	9301      	str	r3, [sp, #4]
   10878:	2300      	movs	r3, #0
   1087a:	9300      	str	r3, [sp, #0]
   1087c:	f240 73ff 	movw	r3, #2047	; 0x7ff
   10880:	687a      	ldr	r2, [r7, #4]
   10882:	6c79      	ldr	r1, [r7, #68]	; 0x44
   10884:	4c11      	ldr	r4, [pc, #68]	; (108cc <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x198>)
   10886:	47a0      	blx	r4
	//printf("Config_SDO_recieve");
    /* configure SDO server CAN transmission */
    SDO->CANdevTx = CANdevTx;
   10888:	68fb      	ldr	r3, [r7, #12]
   1088a:	681b      	ldr	r3, [r3, #0]
   1088c:	6cba      	ldr	r2, [r7, #72]	; 0x48
   1088e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    SDO->CANtxBuff = ptrCODriverClass->CAN_Tx_BufferInit(
   10892:	68fb      	ldr	r3, [r7, #12]
   10894:	681c      	ldr	r4, [r3, #0]
   10896:	4b09      	ldr	r3, [pc, #36]	; (108bc <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x188>)
   10898:	6818      	ldr	r0, [r3, #0]
   1089a:	2300      	movs	r3, #0
   1089c:	9301      	str	r3, [sp, #4]
   1089e:	2308      	movs	r3, #8
   108a0:	9300      	str	r3, [sp, #0]
   108a2:	2300      	movs	r3, #0
   108a4:	683a      	ldr	r2, [r7, #0]
   108a6:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
   108a8:	4d09      	ldr	r5, [pc, #36]	; (108d0 <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x19c>)
   108aa:	47a8      	blx	r5
   108ac:	4603      	mov	r3, r0
   108ae:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
            COB_IDServerToClient,   /* CAN identifier */
            0,                      /* rtr */
            8,                      /* number of data bytes */
            0);                     /* synchronous message flag bit */
	
    return CO_ERROR_NO;
   108b2:	2300      	movs	r3, #0
}
   108b4:	4618      	mov	r0, r3
   108b6:	3718      	adds	r7, #24
   108b8:	46bd      	mov	sp, r7
   108ba:	bdb0      	pop	{r4, r5, r7, pc}
   108bc:	200019a4 	.word	0x200019a4
   108c0:	000106cd 	.word	0x000106cd
   108c4:	000108d5 	.word	0x000108d5
   108c8:	00010565 	.word	0x00010565
   108cc:	0000d7b5 	.word	0x0000d7b5
   108d0:	0000d8b5 	.word	0x0000d8b5

000108d4 <_ZN12CO_SDO_Class15CO_OD_configureEmPF18CO_SDO_abortCode_tP12CO_ODF_arg_tEPvPhh>:
        uint32_t                index,
        CO_SDO_abortCode_t    (*pODFunc)(CO_ODF_arg_t *ODF_arg),
        void                   *object,
        uint8_t                *flags,
        uint8_t                 flagsSize)
{
   108d4:	b580      	push	{r7, lr}
   108d6:	b088      	sub	sp, #32
   108d8:	af00      	add	r7, sp, #0
   108da:	60f8      	str	r0, [r7, #12]
   108dc:	60b9      	str	r1, [r7, #8]
   108de:	607a      	str	r2, [r7, #4]
   108e0:	603b      	str	r3, [r7, #0]
    uint32_t entryNo;

    entryNo = ptrCODriverClass->CO_OD_find(index);
   108e2:	4b28      	ldr	r3, [pc, #160]	; (10984 <_ZN12CO_SDO_Class15CO_OD_configureEmPF18CO_SDO_abortCode_tP12CO_ODF_arg_tEPvPhh+0xb0>)
   108e4:	681b      	ldr	r3, [r3, #0]
   108e6:	3304      	adds	r3, #4
   108e8:	68b9      	ldr	r1, [r7, #8]
   108ea:	4618      	mov	r0, r3
   108ec:	4b26      	ldr	r3, [pc, #152]	; (10988 <_ZN12CO_SDO_Class15CO_OD_configureEmPF18CO_SDO_abortCode_tP12CO_ODF_arg_tEPvPhh+0xb4>)
   108ee:	4798      	blx	r3
   108f0:	61b8      	str	r0, [r7, #24]
    if(entryNo < 0xFFFFU){
   108f2:	69bb      	ldr	r3, [r7, #24]
   108f4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
   108f8:	4293      	cmp	r3, r2
   108fa:	d83e      	bhi.n	1097a <_ZN12CO_SDO_Class15CO_OD_configureEmPF18CO_SDO_abortCode_tP12CO_ODF_arg_tEPvPhh+0xa6>
        CO_OD_extension_t *ext = &SDO->ODExtensions[entryNo];
   108fc:	68fb      	ldr	r3, [r7, #12]
   108fe:	681b      	ldr	r3, [r3, #0]
   10900:	6b59      	ldr	r1, [r3, #52]	; 0x34
   10902:	69ba      	ldr	r2, [r7, #24]
   10904:	4613      	mov	r3, r2
   10906:	005b      	lsls	r3, r3, #1
   10908:	4413      	add	r3, r2
   1090a:	009b      	lsls	r3, r3, #2
   1090c:	440b      	add	r3, r1
   1090e:	617b      	str	r3, [r7, #20]
        uint8_t maxSubIndex = SDO->OD[entryNo].maxSubIndex;
   10910:	68fb      	ldr	r3, [r7, #12]
   10912:	681b      	ldr	r3, [r3, #0]
   10914:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
   10916:	69ba      	ldr	r2, [r7, #24]
   10918:	4613      	mov	r3, r2
   1091a:	009b      	lsls	r3, r3, #2
   1091c:	4413      	add	r3, r2
   1091e:	009b      	lsls	r3, r3, #2
   10920:	440b      	add	r3, r1
   10922:	791b      	ldrb	r3, [r3, #4]
   10924:	74fb      	strb	r3, [r7, #19]

        ext->pODFunc = pODFunc;
   10926:	697b      	ldr	r3, [r7, #20]
   10928:	687a      	ldr	r2, [r7, #4]
   1092a:	601a      	str	r2, [r3, #0]
        ext->object = object;
   1092c:	697b      	ldr	r3, [r7, #20]
   1092e:	683a      	ldr	r2, [r7, #0]
   10930:	605a      	str	r2, [r3, #4]
        if((flags != NULL) && (flagsSize != 0U) && (flagsSize == maxSubIndex)){
   10932:	6abb      	ldr	r3, [r7, #40]	; 0x28
   10934:	2b00      	cmp	r3, #0
   10936:	d01b      	beq.n	10970 <_ZN12CO_SDO_Class15CO_OD_configureEmPF18CO_SDO_abortCode_tP12CO_ODF_arg_tEPvPhh+0x9c>
   10938:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
   1093c:	2b00      	cmp	r3, #0
   1093e:	d017      	beq.n	10970 <_ZN12CO_SDO_Class15CO_OD_configureEmPF18CO_SDO_abortCode_tP12CO_ODF_arg_tEPvPhh+0x9c>
   10940:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
   10944:	7cfb      	ldrb	r3, [r7, #19]
   10946:	429a      	cmp	r2, r3
   10948:	d112      	bne.n	10970 <_ZN12CO_SDO_Class15CO_OD_configureEmPF18CO_SDO_abortCode_tP12CO_ODF_arg_tEPvPhh+0x9c>
            uint32_t i;
            ext->flags = flags;
   1094a:	697b      	ldr	r3, [r7, #20]
   1094c:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1094e:	609a      	str	r2, [r3, #8]
            for(i=0U; i<=maxSubIndex; i++){
   10950:	2300      	movs	r3, #0
   10952:	61fb      	str	r3, [r7, #28]
   10954:	7cfa      	ldrb	r2, [r7, #19]
   10956:	69fb      	ldr	r3, [r7, #28]
   10958:	429a      	cmp	r2, r3
   1095a:	d30d      	bcc.n	10978 <_ZN12CO_SDO_Class15CO_OD_configureEmPF18CO_SDO_abortCode_tP12CO_ODF_arg_tEPvPhh+0xa4>
                ext->flags[i] = 0U;
   1095c:	697b      	ldr	r3, [r7, #20]
   1095e:	689a      	ldr	r2, [r3, #8]
   10960:	69fb      	ldr	r3, [r7, #28]
   10962:	4413      	add	r3, r2
   10964:	2200      	movs	r2, #0
   10966:	701a      	strb	r2, [r3, #0]
            for(i=0U; i<=maxSubIndex; i++){
   10968:	69fb      	ldr	r3, [r7, #28]
   1096a:	3301      	adds	r3, #1
   1096c:	61fb      	str	r3, [r7, #28]
   1096e:	e7f1      	b.n	10954 <_ZN12CO_SDO_Class15CO_OD_configureEmPF18CO_SDO_abortCode_tP12CO_ODF_arg_tEPvPhh+0x80>
            }
        }
        else{
            ext->flags = NULL;
   10970:	697b      	ldr	r3, [r7, #20]
   10972:	2200      	movs	r2, #0
   10974:	609a      	str	r2, [r3, #8]
        }
    }
}
   10976:	e000      	b.n	1097a <_ZN12CO_SDO_Class15CO_OD_configureEmPF18CO_SDO_abortCode_tP12CO_ODF_arg_tEPvPhh+0xa6>
            }
   10978:	bf00      	nop
}
   1097a:	bf00      	nop
   1097c:	3720      	adds	r7, #32
   1097e:	46bd      	mov	sp, r7
   10980:	bd80      	pop	{r7, pc}
   10982:	bf00      	nop
   10984:	200019a4 	.word	0x200019a4
   10988:	0001098d 	.word	0x0001098d

0001098c <_ZN12CO_SDO_Class10CO_OD_findEm>:


/******************************************************************************/
uint32_t CO_SDO_Class::CO_OD_find( uint32_t index){
   1098c:	b480      	push	{r7}
   1098e:	b087      	sub	sp, #28
   10990:	af00      	add	r7, sp, #0
   10992:	6078      	str	r0, [r7, #4]
   10994:	6039      	str	r1, [r7, #0]
    /* Fast search in ordered Object Dictionary. If indexes are mixed, this won't work. */
    /* If Object Dictionary has up to 2^N entries, then N is max number of loop passes. */
    uint32_t cur, min, max;
    const CO_OD_entry_t* object;

    min = 0U;
   10996:	2300      	movs	r3, #0
   10998:	617b      	str	r3, [r7, #20]
    max = SDO->ODSize - 1U;
   1099a:	687b      	ldr	r3, [r7, #4]
   1099c:	681b      	ldr	r3, [r3, #0]
   1099e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   109a0:	3b01      	subs	r3, #1
   109a2:	613b      	str	r3, [r7, #16]
    while(min < max){
   109a4:	697a      	ldr	r2, [r7, #20]
   109a6:	693b      	ldr	r3, [r7, #16]
   109a8:	429a      	cmp	r2, r3
   109aa:	d227      	bcs.n	109fc <_ZN12CO_SDO_Class10CO_OD_findEm+0x70>
        cur = (min + max) / 2;
   109ac:	697a      	ldr	r2, [r7, #20]
   109ae:	693b      	ldr	r3, [r7, #16]
   109b0:	4413      	add	r3, r2
   109b2:	085b      	lsrs	r3, r3, #1
   109b4:	60fb      	str	r3, [r7, #12]
        object = &SDO->OD[cur];
   109b6:	687b      	ldr	r3, [r7, #4]
   109b8:	681b      	ldr	r3, [r3, #0]
   109ba:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
   109bc:	68fa      	ldr	r2, [r7, #12]
   109be:	4613      	mov	r3, r2
   109c0:	009b      	lsls	r3, r3, #2
   109c2:	4413      	add	r3, r2
   109c4:	009b      	lsls	r3, r3, #2
   109c6:	440b      	add	r3, r1
   109c8:	60bb      	str	r3, [r7, #8]
        /* Is object matched */
        if(index == object->index){
   109ca:	68bb      	ldr	r3, [r7, #8]
   109cc:	681a      	ldr	r2, [r3, #0]
   109ce:	683b      	ldr	r3, [r7, #0]
   109d0:	429a      	cmp	r2, r3
   109d2:	d101      	bne.n	109d8 <_ZN12CO_SDO_Class10CO_OD_findEm+0x4c>
            return cur;
   109d4:	68fb      	ldr	r3, [r7, #12]
   109d6:	e028      	b.n	10a2a <_ZN12CO_SDO_Class10CO_OD_findEm+0x9e>
        }
        if(index < object->index){
   109d8:	68bb      	ldr	r3, [r7, #8]
   109da:	681a      	ldr	r2, [r3, #0]
   109dc:	683b      	ldr	r3, [r7, #0]
   109de:	429a      	cmp	r2, r3
   109e0:	d908      	bls.n	109f4 <_ZN12CO_SDO_Class10CO_OD_findEm+0x68>
            max = cur;
   109e2:	68fb      	ldr	r3, [r7, #12]
   109e4:	613b      	str	r3, [r7, #16]
            if(max) max--;
   109e6:	693b      	ldr	r3, [r7, #16]
   109e8:	2b00      	cmp	r3, #0
   109ea:	d0db      	beq.n	109a4 <_ZN12CO_SDO_Class10CO_OD_findEm+0x18>
   109ec:	693b      	ldr	r3, [r7, #16]
   109ee:	3b01      	subs	r3, #1
   109f0:	613b      	str	r3, [r7, #16]
   109f2:	e7d7      	b.n	109a4 <_ZN12CO_SDO_Class10CO_OD_findEm+0x18>
        }
        else
            min = cur + 1U;
   109f4:	68fb      	ldr	r3, [r7, #12]
   109f6:	3301      	adds	r3, #1
   109f8:	617b      	str	r3, [r7, #20]
    while(min < max){
   109fa:	e7d3      	b.n	109a4 <_ZN12CO_SDO_Class10CO_OD_findEm+0x18>
    }

    if(min == max){
   109fc:	697a      	ldr	r2, [r7, #20]
   109fe:	693b      	ldr	r3, [r7, #16]
   10a00:	429a      	cmp	r2, r3
   10a02:	d110      	bne.n	10a26 <_ZN12CO_SDO_Class10CO_OD_findEm+0x9a>
        object = &SDO->OD[min];
   10a04:	687b      	ldr	r3, [r7, #4]
   10a06:	681b      	ldr	r3, [r3, #0]
   10a08:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
   10a0a:	697a      	ldr	r2, [r7, #20]
   10a0c:	4613      	mov	r3, r2
   10a0e:	009b      	lsls	r3, r3, #2
   10a10:	4413      	add	r3, r2
   10a12:	009b      	lsls	r3, r3, #2
   10a14:	440b      	add	r3, r1
   10a16:	60bb      	str	r3, [r7, #8]
        /* Is object matched */
        if(index == object->index){
   10a18:	68bb      	ldr	r3, [r7, #8]
   10a1a:	681a      	ldr	r2, [r3, #0]
   10a1c:	683b      	ldr	r3, [r7, #0]
   10a1e:	429a      	cmp	r2, r3
   10a20:	d101      	bne.n	10a26 <_ZN12CO_SDO_Class10CO_OD_findEm+0x9a>
            return min;
   10a22:	697b      	ldr	r3, [r7, #20]
   10a24:	e001      	b.n	10a2a <_ZN12CO_SDO_Class10CO_OD_findEm+0x9e>
        }
    }

    return 0xFFFFU;  /* object does not exist in OD */
   10a26:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
   10a2a:	4618      	mov	r0, r3
   10a2c:	371c      	adds	r7, #28
   10a2e:	46bd      	mov	sp, r7
   10a30:	bc80      	pop	{r7}
   10a32:	4770      	bx	lr

00010a34 <_ZN12CO_SDO_Class15CO_OD_getLengthEmh>:


/******************************************************************************/
uint32_t CO_SDO_Class::CO_OD_getLength(uint32_t entryNo, uint8_t subIndex){
   10a34:	b480      	push	{r7}
   10a36:	b087      	sub	sp, #28
   10a38:	af00      	add	r7, sp, #0
   10a3a:	60f8      	str	r0, [r7, #12]
   10a3c:	60b9      	str	r1, [r7, #8]
   10a3e:	4613      	mov	r3, r2
   10a40:	71fb      	strb	r3, [r7, #7]
    const CO_OD_entry_t* object = &SDO->OD[entryNo];
   10a42:	68fb      	ldr	r3, [r7, #12]
   10a44:	681b      	ldr	r3, [r3, #0]
   10a46:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
   10a48:	68ba      	ldr	r2, [r7, #8]
   10a4a:	4613      	mov	r3, r2
   10a4c:	009b      	lsls	r3, r3, #2
   10a4e:	4413      	add	r3, r2
   10a50:	009b      	lsls	r3, r3, #2
   10a52:	440b      	add	r3, r1
   10a54:	617b      	str	r3, [r7, #20]

    if(entryNo == 0xFFFFU){
   10a56:	68bb      	ldr	r3, [r7, #8]
   10a58:	f64f 72ff 	movw	r2, #65535	; 0xffff
   10a5c:	4293      	cmp	r3, r2
   10a5e:	d101      	bne.n	10a64 <_ZN12CO_SDO_Class15CO_OD_getLengthEmh+0x30>
        return 0U;
   10a60:	2300      	movs	r3, #0
   10a62:	e034      	b.n	10ace <_ZN12CO_SDO_Class15CO_OD_getLengthEmh+0x9a>
    }

    if(object->maxSubIndex == 0U){    /* Object type is Var */
   10a64:	697b      	ldr	r3, [r7, #20]
   10a66:	791b      	ldrb	r3, [r3, #4]
   10a68:	2b00      	cmp	r3, #0
   10a6a:	d108      	bne.n	10a7e <_ZN12CO_SDO_Class15CO_OD_getLengthEmh+0x4a>
        if(object->pData == 0){ /* data type is domain */
   10a6c:	697b      	ldr	r3, [r7, #20]
   10a6e:	691b      	ldr	r3, [r3, #16]
   10a70:	2b00      	cmp	r3, #0
   10a72:	d101      	bne.n	10a78 <_ZN12CO_SDO_Class15CO_OD_getLengthEmh+0x44>
            return CO_SDO_BUFFER_SIZE;
   10a74:	2320      	movs	r3, #32
   10a76:	e02a      	b.n	10ace <_ZN12CO_SDO_Class15CO_OD_getLengthEmh+0x9a>
        }
        else{
            return object->length;
   10a78:	697b      	ldr	r3, [r7, #20]
   10a7a:	68db      	ldr	r3, [r3, #12]
   10a7c:	e027      	b.n	10ace <_ZN12CO_SDO_Class15CO_OD_getLengthEmh+0x9a>
        }
    }
    else if(object->attribute != 0U){ /* Object type is Array */
   10a7e:	697b      	ldr	r3, [r7, #20]
   10a80:	689b      	ldr	r3, [r3, #8]
   10a82:	2b00      	cmp	r3, #0
   10a84:	d00d      	beq.n	10aa2 <_ZN12CO_SDO_Class15CO_OD_getLengthEmh+0x6e>
        if(subIndex == 0U){
   10a86:	79fb      	ldrb	r3, [r7, #7]
   10a88:	2b00      	cmp	r3, #0
   10a8a:	d101      	bne.n	10a90 <_ZN12CO_SDO_Class15CO_OD_getLengthEmh+0x5c>
            return 1U;
   10a8c:	2301      	movs	r3, #1
   10a8e:	e01e      	b.n	10ace <_ZN12CO_SDO_Class15CO_OD_getLengthEmh+0x9a>
        }
        else if(object->pData == 0){
   10a90:	697b      	ldr	r3, [r7, #20]
   10a92:	691b      	ldr	r3, [r3, #16]
   10a94:	2b00      	cmp	r3, #0
   10a96:	d101      	bne.n	10a9c <_ZN12CO_SDO_Class15CO_OD_getLengthEmh+0x68>
            /* data type is domain */
            return CO_SDO_BUFFER_SIZE;
   10a98:	2320      	movs	r3, #32
   10a9a:	e018      	b.n	10ace <_ZN12CO_SDO_Class15CO_OD_getLengthEmh+0x9a>
        }
        else{
            return object->length;
   10a9c:	697b      	ldr	r3, [r7, #20]
   10a9e:	68db      	ldr	r3, [r3, #12]
   10aa0:	e015      	b.n	10ace <_ZN12CO_SDO_Class15CO_OD_getLengthEmh+0x9a>
        }
    }
    else{                            /* Object type is Record */
        if(((const CO_OD_entryRecord_t*)(object->pData))[subIndex].pData == 0){
   10aa2:	697b      	ldr	r3, [r7, #20]
   10aa4:	6919      	ldr	r1, [r3, #16]
   10aa6:	79fa      	ldrb	r2, [r7, #7]
   10aa8:	4613      	mov	r3, r2
   10aaa:	005b      	lsls	r3, r3, #1
   10aac:	4413      	add	r3, r2
   10aae:	009b      	lsls	r3, r3, #2
   10ab0:	440b      	add	r3, r1
   10ab2:	681b      	ldr	r3, [r3, #0]
   10ab4:	2b00      	cmp	r3, #0
   10ab6:	d101      	bne.n	10abc <_ZN12CO_SDO_Class15CO_OD_getLengthEmh+0x88>
            /* data type is domain */
            return CO_SDO_BUFFER_SIZE;
   10ab8:	2320      	movs	r3, #32
   10aba:	e008      	b.n	10ace <_ZN12CO_SDO_Class15CO_OD_getLengthEmh+0x9a>
        }
        else{
            return ((const CO_OD_entryRecord_t*)(object->pData))[subIndex].length;
   10abc:	697b      	ldr	r3, [r7, #20]
   10abe:	6919      	ldr	r1, [r3, #16]
   10ac0:	79fa      	ldrb	r2, [r7, #7]
   10ac2:	4613      	mov	r3, r2
   10ac4:	005b      	lsls	r3, r3, #1
   10ac6:	4413      	add	r3, r2
   10ac8:	009b      	lsls	r3, r3, #2
   10aca:	440b      	add	r3, r1
   10acc:	689b      	ldr	r3, [r3, #8]
        }
    }
}
   10ace:	4618      	mov	r0, r3
   10ad0:	371c      	adds	r7, #28
   10ad2:	46bd      	mov	sp, r7
   10ad4:	bc80      	pop	{r7}
   10ad6:	4770      	bx	lr

00010ad8 <_ZN12CO_SDO_Class18CO_OD_getAttributeEmh>:


/******************************************************************************/
uint32_t CO_SDO_Class::CO_OD_getAttribute(uint32_t entryNo, uint8_t subIndex){
   10ad8:	b480      	push	{r7}
   10ada:	b089      	sub	sp, #36	; 0x24
   10adc:	af00      	add	r7, sp, #0
   10ade:	60f8      	str	r0, [r7, #12]
   10ae0:	60b9      	str	r1, [r7, #8]
   10ae2:	4613      	mov	r3, r2
   10ae4:	71fb      	strb	r3, [r7, #7]
    const CO_OD_entry_t* object = &SDO->OD[entryNo];
   10ae6:	68fb      	ldr	r3, [r7, #12]
   10ae8:	681b      	ldr	r3, [r3, #0]
   10aea:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
   10aec:	68ba      	ldr	r2, [r7, #8]
   10aee:	4613      	mov	r3, r2
   10af0:	009b      	lsls	r3, r3, #2
   10af2:	4413      	add	r3, r2
   10af4:	009b      	lsls	r3, r3, #2
   10af6:	440b      	add	r3, r1
   10af8:	617b      	str	r3, [r7, #20]

    if(entryNo == 0xFFFFU){
   10afa:	68bb      	ldr	r3, [r7, #8]
   10afc:	f64f 72ff 	movw	r2, #65535	; 0xffff
   10b00:	4293      	cmp	r3, r2
   10b02:	d101      	bne.n	10b08 <_ZN12CO_SDO_Class18CO_OD_getAttributeEmh+0x30>
        return 0U;
   10b04:	2300      	movs	r3, #0
   10b06:	e037      	b.n	10b78 <_ZN12CO_SDO_Class18CO_OD_getAttributeEmh+0xa0>
    }

    if(object->maxSubIndex == 0U){   /* Object type is Var */
   10b08:	697b      	ldr	r3, [r7, #20]
   10b0a:	791b      	ldrb	r3, [r3, #4]
   10b0c:	2b00      	cmp	r3, #0
   10b0e:	d102      	bne.n	10b16 <_ZN12CO_SDO_Class18CO_OD_getAttributeEmh+0x3e>
        return object->attribute;
   10b10:	697b      	ldr	r3, [r7, #20]
   10b12:	689b      	ldr	r3, [r3, #8]
   10b14:	e030      	b.n	10b78 <_ZN12CO_SDO_Class18CO_OD_getAttributeEmh+0xa0>
    }
    else if(object->attribute != 0U){/* Object type is Array */
   10b16:	697b      	ldr	r3, [r7, #20]
   10b18:	689b      	ldr	r3, [r3, #8]
   10b1a:	2b00      	cmp	r3, #0
   10b1c:	d023      	beq.n	10b66 <_ZN12CO_SDO_Class18CO_OD_getAttributeEmh+0x8e>
        bool_t exception_1003 = false;
   10b1e:	2300      	movs	r3, #0
   10b20:	77fb      	strb	r3, [r7, #31]
        uint32_t attr = object->attribute;
   10b22:	697b      	ldr	r3, [r7, #20]
   10b24:	689b      	ldr	r3, [r3, #8]
   10b26:	61bb      	str	r3, [r7, #24]

        /* Special exception: Object 1003,00 should be writable */
        if(object->index == 0x1003 && subIndex == 0) {
   10b28:	697b      	ldr	r3, [r7, #20]
   10b2a:	681b      	ldr	r3, [r3, #0]
   10b2c:	f241 0203 	movw	r2, #4099	; 0x1003
   10b30:	4293      	cmp	r3, r2
   10b32:	d108      	bne.n	10b46 <_ZN12CO_SDO_Class18CO_OD_getAttributeEmh+0x6e>
   10b34:	79fb      	ldrb	r3, [r7, #7]
   10b36:	2b00      	cmp	r3, #0
   10b38:	d105      	bne.n	10b46 <_ZN12CO_SDO_Class18CO_OD_getAttributeEmh+0x6e>
            exception_1003 = true;
   10b3a:	2301      	movs	r3, #1
   10b3c:	77fb      	strb	r3, [r7, #31]
            attr |= CO_ODA_WRITEABLE;
   10b3e:	69bb      	ldr	r3, [r7, #24]
   10b40:	f043 0308 	orr.w	r3, r3, #8
   10b44:	61bb      	str	r3, [r7, #24]
        }

        if(subIndex == 0U  && exception_1003 == false){
   10b46:	79fb      	ldrb	r3, [r7, #7]
   10b48:	2b00      	cmp	r3, #0
   10b4a:	d10a      	bne.n	10b62 <_ZN12CO_SDO_Class18CO_OD_getAttributeEmh+0x8a>
   10b4c:	7ffb      	ldrb	r3, [r7, #31]
   10b4e:	2b00      	cmp	r3, #0
   10b50:	d107      	bne.n	10b62 <_ZN12CO_SDO_Class18CO_OD_getAttributeEmh+0x8a>
            /* First subIndex is readonly */
            attr &= ~(CO_ODA_WRITEABLE | CO_ODA_RPDO_MAPABLE);
   10b52:	69bb      	ldr	r3, [r7, #24]
   10b54:	f023 0318 	bic.w	r3, r3, #24
   10b58:	61bb      	str	r3, [r7, #24]
            attr |= CO_ODA_READABLE;
   10b5a:	69bb      	ldr	r3, [r7, #24]
   10b5c:	f043 0304 	orr.w	r3, r3, #4
   10b60:	61bb      	str	r3, [r7, #24]
        }
        return attr;
   10b62:	69bb      	ldr	r3, [r7, #24]
   10b64:	e008      	b.n	10b78 <_ZN12CO_SDO_Class18CO_OD_getAttributeEmh+0xa0>
    }
    else{                            /* Object type is Record */
        return ((const CO_OD_entryRecord_t*)(object->pData))[subIndex].attribute;
   10b66:	697b      	ldr	r3, [r7, #20]
   10b68:	6919      	ldr	r1, [r3, #16]
   10b6a:	79fa      	ldrb	r2, [r7, #7]
   10b6c:	4613      	mov	r3, r2
   10b6e:	005b      	lsls	r3, r3, #1
   10b70:	4413      	add	r3, r2
   10b72:	009b      	lsls	r3, r3, #2
   10b74:	440b      	add	r3, r1
   10b76:	685b      	ldr	r3, [r3, #4]
    }
}
   10b78:	4618      	mov	r0, r3
   10b7a:	3724      	adds	r7, #36	; 0x24
   10b7c:	46bd      	mov	sp, r7
   10b7e:	bc80      	pop	{r7}
   10b80:	4770      	bx	lr

00010b82 <_ZN12CO_SDO_Class20CO_OD_getDataPointerEmh>:


/******************************************************************************/
void* CO_SDO_Class::CO_OD_getDataPointer( uint32_t entryNo, uint8_t subIndex){
   10b82:	b480      	push	{r7}
   10b84:	b087      	sub	sp, #28
   10b86:	af00      	add	r7, sp, #0
   10b88:	60f8      	str	r0, [r7, #12]
   10b8a:	60b9      	str	r1, [r7, #8]
   10b8c:	4613      	mov	r3, r2
   10b8e:	71fb      	strb	r3, [r7, #7]
    const CO_OD_entry_t* object = &SDO->OD[entryNo];
   10b90:	68fb      	ldr	r3, [r7, #12]
   10b92:	681b      	ldr	r3, [r3, #0]
   10b94:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
   10b96:	68ba      	ldr	r2, [r7, #8]
   10b98:	4613      	mov	r3, r2
   10b9a:	009b      	lsls	r3, r3, #2
   10b9c:	4413      	add	r3, r2
   10b9e:	009b      	lsls	r3, r3, #2
   10ba0:	440b      	add	r3, r1
   10ba2:	617b      	str	r3, [r7, #20]

    if(entryNo == 0xFFFFU){
   10ba4:	68bb      	ldr	r3, [r7, #8]
   10ba6:	f64f 72ff 	movw	r2, #65535	; 0xffff
   10baa:	4293      	cmp	r3, r2
   10bac:	d101      	bne.n	10bb2 <_ZN12CO_SDO_Class20CO_OD_getDataPointerEmh+0x30>
        return 0;
   10bae:	2300      	movs	r3, #0
   10bb0:	e02a      	b.n	10c08 <_ZN12CO_SDO_Class20CO_OD_getDataPointerEmh+0x86>
    }

    if(object->maxSubIndex == 0U){   /* Object type is Var */
   10bb2:	697b      	ldr	r3, [r7, #20]
   10bb4:	791b      	ldrb	r3, [r3, #4]
   10bb6:	2b00      	cmp	r3, #0
   10bb8:	d102      	bne.n	10bc0 <_ZN12CO_SDO_Class20CO_OD_getDataPointerEmh+0x3e>
        return object->pData;
   10bba:	697b      	ldr	r3, [r7, #20]
   10bbc:	691b      	ldr	r3, [r3, #16]
   10bbe:	e023      	b.n	10c08 <_ZN12CO_SDO_Class20CO_OD_getDataPointerEmh+0x86>
    }
    else if(object->attribute != 0U){/* Object type is Array */
   10bc0:	697b      	ldr	r3, [r7, #20]
   10bc2:	689b      	ldr	r3, [r3, #8]
   10bc4:	2b00      	cmp	r3, #0
   10bc6:	d016      	beq.n	10bf6 <_ZN12CO_SDO_Class20CO_OD_getDataPointerEmh+0x74>
        if(subIndex==0){
   10bc8:	79fb      	ldrb	r3, [r7, #7]
   10bca:	2b00      	cmp	r3, #0
   10bcc:	d102      	bne.n	10bd4 <_ZN12CO_SDO_Class20CO_OD_getDataPointerEmh+0x52>
            /* this is the data, for the subIndex 0 in the array */
            return (void*) &object->maxSubIndex;
   10bce:	697b      	ldr	r3, [r7, #20]
   10bd0:	3304      	adds	r3, #4
   10bd2:	e019      	b.n	10c08 <_ZN12CO_SDO_Class20CO_OD_getDataPointerEmh+0x86>
        }
        else if(object->pData == 0){
   10bd4:	697b      	ldr	r3, [r7, #20]
   10bd6:	691b      	ldr	r3, [r3, #16]
   10bd8:	2b00      	cmp	r3, #0
   10bda:	d101      	bne.n	10be0 <_ZN12CO_SDO_Class20CO_OD_getDataPointerEmh+0x5e>
            /* data type is domain */
            return 0;
   10bdc:	2300      	movs	r3, #0
   10bde:	e013      	b.n	10c08 <_ZN12CO_SDO_Class20CO_OD_getDataPointerEmh+0x86>
        }
        else{
            return (void*)(((int8_t*)object->pData) + ((subIndex-1) * object->length));
   10be0:	697b      	ldr	r3, [r7, #20]
   10be2:	691a      	ldr	r2, [r3, #16]
   10be4:	79fb      	ldrb	r3, [r7, #7]
   10be6:	3b01      	subs	r3, #1
   10be8:	4619      	mov	r1, r3
   10bea:	697b      	ldr	r3, [r7, #20]
   10bec:	68db      	ldr	r3, [r3, #12]
   10bee:	fb03 f301 	mul.w	r3, r3, r1
   10bf2:	4413      	add	r3, r2
   10bf4:	e008      	b.n	10c08 <_ZN12CO_SDO_Class20CO_OD_getDataPointerEmh+0x86>
        }
    }
    else{                            /* Object Type is Record */
        return ((const CO_OD_entryRecord_t*)(object->pData))[subIndex].pData;
   10bf6:	697b      	ldr	r3, [r7, #20]
   10bf8:	6919      	ldr	r1, [r3, #16]
   10bfa:	79fa      	ldrb	r2, [r7, #7]
   10bfc:	4613      	mov	r3, r2
   10bfe:	005b      	lsls	r3, r3, #1
   10c00:	4413      	add	r3, r2
   10c02:	009b      	lsls	r3, r3, #2
   10c04:	440b      	add	r3, r1
   10c06:	681b      	ldr	r3, [r3, #0]
    }
}
   10c08:	4618      	mov	r0, r3
   10c0a:	371c      	adds	r7, #28
   10c0c:	46bd      	mov	sp, r7
   10c0e:	bc80      	pop	{r7}
   10c10:	4770      	bx	lr

00010c12 <_ZN12CO_SDO_Class21CO_OD_getFlagsPointerEmh>:


/******************************************************************************/
uint8_t* CO_SDO_Class::CO_OD_getFlagsPointer( uint32_t entryNo, uint8_t subIndex){
   10c12:	b480      	push	{r7}
   10c14:	b087      	sub	sp, #28
   10c16:	af00      	add	r7, sp, #0
   10c18:	60f8      	str	r0, [r7, #12]
   10c1a:	60b9      	str	r1, [r7, #8]
   10c1c:	4613      	mov	r3, r2
   10c1e:	71fb      	strb	r3, [r7, #7]
    CO_OD_extension_t* ext;

    if((entryNo == 0xFFFFU) || (SDO->ODExtensions == 0)){
   10c20:	68bb      	ldr	r3, [r7, #8]
   10c22:	f64f 72ff 	movw	r2, #65535	; 0xffff
   10c26:	4293      	cmp	r3, r2
   10c28:	d004      	beq.n	10c34 <_ZN12CO_SDO_Class21CO_OD_getFlagsPointerEmh+0x22>
   10c2a:	68fb      	ldr	r3, [r7, #12]
   10c2c:	681b      	ldr	r3, [r3, #0]
   10c2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   10c30:	2b00      	cmp	r3, #0
   10c32:	d101      	bne.n	10c38 <_ZN12CO_SDO_Class21CO_OD_getFlagsPointerEmh+0x26>
        return 0;
   10c34:	2300      	movs	r3, #0
   10c36:	e00d      	b.n	10c54 <_ZN12CO_SDO_Class21CO_OD_getFlagsPointerEmh+0x42>
    }

    ext = &SDO->ODExtensions[entryNo];
   10c38:	68fb      	ldr	r3, [r7, #12]
   10c3a:	681b      	ldr	r3, [r3, #0]
   10c3c:	6b59      	ldr	r1, [r3, #52]	; 0x34
   10c3e:	68ba      	ldr	r2, [r7, #8]
   10c40:	4613      	mov	r3, r2
   10c42:	005b      	lsls	r3, r3, #1
   10c44:	4413      	add	r3, r2
   10c46:	009b      	lsls	r3, r3, #2
   10c48:	440b      	add	r3, r1
   10c4a:	617b      	str	r3, [r7, #20]

    return &ext->flags[subIndex];
   10c4c:	697b      	ldr	r3, [r7, #20]
   10c4e:	689a      	ldr	r2, [r3, #8]
   10c50:	79fb      	ldrb	r3, [r7, #7]
   10c52:	4413      	add	r3, r2
}
   10c54:	4618      	mov	r0, r3
   10c56:	371c      	adds	r7, #28
   10c58:	46bd      	mov	sp, r7
   10c5a:	bc80      	pop	{r7}
   10c5c:	4770      	bx	lr
	...

00010c60 <_ZN12CO_SDO_Class19CO_SDO_initTransferEmh>:


/******************************************************************************/
uint32_t CO_SDO_Class::CO_SDO_initTransfer( uint32_t index, uint8_t subIndex){
   10c60:	b590      	push	{r4, r7, lr}
   10c62:	b087      	sub	sp, #28
   10c64:	af00      	add	r7, sp, #0
   10c66:	60f8      	str	r0, [r7, #12]
   10c68:	60b9      	str	r1, [r7, #8]
   10c6a:	4613      	mov	r3, r2
   10c6c:	71fb      	strb	r3, [r7, #7]

    SDO->ODF_arg.index = index;
   10c6e:	68fb      	ldr	r3, [r7, #12]
   10c70:	681b      	ldr	r3, [r3, #0]
   10c72:	68ba      	ldr	r2, [r7, #8]
   10c74:	659a      	str	r2, [r3, #88]	; 0x58
    SDO->ODF_arg.subIndex = subIndex;
   10c76:	68fb      	ldr	r3, [r7, #12]
   10c78:	681b      	ldr	r3, [r3, #0]
   10c7a:	79fa      	ldrb	r2, [r7, #7]
   10c7c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* find object in Object Dictionary */
    SDO->entryNo = CO_OD_find( index);
   10c80:	68fb      	ldr	r3, [r7, #12]
   10c82:	681c      	ldr	r4, [r3, #0]
   10c84:	68b9      	ldr	r1, [r7, #8]
   10c86:	68f8      	ldr	r0, [r7, #12]
   10c88:	4b51      	ldr	r3, [pc, #324]	; (10dd0 <_ZN12CO_SDO_Class19CO_SDO_initTransferEmh+0x170>)
   10c8a:	4798      	blx	r3
   10c8c:	4603      	mov	r3, r0
   10c8e:	63e3      	str	r3, [r4, #60]	; 0x3c
    if(SDO->entryNo == 0xFFFFU){
   10c90:	68fb      	ldr	r3, [r7, #12]
   10c92:	681b      	ldr	r3, [r3, #0]
   10c94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   10c96:	f64f 72ff 	movw	r2, #65535	; 0xffff
   10c9a:	4293      	cmp	r3, r2
   10c9c:	d101      	bne.n	10ca2 <_ZN12CO_SDO_Class19CO_SDO_initTransferEmh+0x42>
        return CO_SDO_AB_NOT_EXIST ;     /* object does not exist in OD */
   10c9e:	4b4d      	ldr	r3, [pc, #308]	; (10dd4 <_ZN12CO_SDO_Class19CO_SDO_initTransferEmh+0x174>)
   10ca0:	e091      	b.n	10dc6 <_ZN12CO_SDO_Class19CO_SDO_initTransferEmh+0x166>
    }

    /* verify existance of subIndex */
    if(subIndex > SDO->OD[SDO->entryNo].maxSubIndex &&
   10ca2:	79f9      	ldrb	r1, [r7, #7]
   10ca4:	68fb      	ldr	r3, [r7, #12]
   10ca6:	681b      	ldr	r3, [r3, #0]
   10ca8:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
   10caa:	68fb      	ldr	r3, [r7, #12]
   10cac:	681b      	ldr	r3, [r3, #0]
   10cae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
   10cb0:	4613      	mov	r3, r2
   10cb2:	009b      	lsls	r3, r3, #2
   10cb4:	4413      	add	r3, r2
   10cb6:	009b      	lsls	r3, r3, #2
   10cb8:	4403      	add	r3, r0
   10cba:	791b      	ldrb	r3, [r3, #4]
   10cbc:	4299      	cmp	r1, r3
   10cbe:	dd0f      	ble.n	10ce0 <_ZN12CO_SDO_Class19CO_SDO_initTransferEmh+0x80>
            SDO->OD[SDO->entryNo].pData != NULL)
   10cc0:	68fb      	ldr	r3, [r7, #12]
   10cc2:	681b      	ldr	r3, [r3, #0]
   10cc4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
   10cc6:	68fb      	ldr	r3, [r7, #12]
   10cc8:	681b      	ldr	r3, [r3, #0]
   10cca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
   10ccc:	4613      	mov	r3, r2
   10cce:	009b      	lsls	r3, r3, #2
   10cd0:	4413      	add	r3, r2
   10cd2:	009b      	lsls	r3, r3, #2
   10cd4:	440b      	add	r3, r1
   10cd6:	691b      	ldr	r3, [r3, #16]
    if(subIndex > SDO->OD[SDO->entryNo].maxSubIndex &&
   10cd8:	2b00      	cmp	r3, #0
   10cda:	d001      	beq.n	10ce0 <_ZN12CO_SDO_Class19CO_SDO_initTransferEmh+0x80>
    {
        return CO_SDO_AB_SUB_UNKNOWN;     /* Sub-index does not exist. */
   10cdc:	4b3e      	ldr	r3, [pc, #248]	; (10dd8 <_ZN12CO_SDO_Class19CO_SDO_initTransferEmh+0x178>)
   10cde:	e072      	b.n	10dc6 <_ZN12CO_SDO_Class19CO_SDO_initTransferEmh+0x166>
    }

    /* pointer to data in Object dictionary */
    SDO->ODF_arg.ODdataStorage = CO_OD_getDataPointer(SDO->entryNo, subIndex);
   10ce0:	68fb      	ldr	r3, [r7, #12]
   10ce2:	681c      	ldr	r4, [r3, #0]
   10ce4:	68fb      	ldr	r3, [r7, #12]
   10ce6:	681b      	ldr	r3, [r3, #0]
   10ce8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   10cea:	79fa      	ldrb	r2, [r7, #7]
   10cec:	4619      	mov	r1, r3
   10cee:	68f8      	ldr	r0, [r7, #12]
   10cf0:	4b3a      	ldr	r3, [pc, #232]	; (10ddc <_ZN12CO_SDO_Class19CO_SDO_initTransferEmh+0x17c>)
   10cf2:	4798      	blx	r3
   10cf4:	4603      	mov	r3, r0
   10cf6:	64a3      	str	r3, [r4, #72]	; 0x48

    /* fill ODF_arg */
    SDO->ODF_arg.object = NULL;
   10cf8:	68fb      	ldr	r3, [r7, #12]
   10cfa:	681b      	ldr	r3, [r3, #0]
   10cfc:	2200      	movs	r2, #0
   10cfe:	641a      	str	r2, [r3, #64]	; 0x40
    if(SDO->ODExtensions){
   10d00:	68fb      	ldr	r3, [r7, #12]
   10d02:	681b      	ldr	r3, [r3, #0]
   10d04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   10d06:	2b00      	cmp	r3, #0
   10d08:	d010      	beq.n	10d2c <_ZN12CO_SDO_Class19CO_SDO_initTransferEmh+0xcc>
        CO_OD_extension_t *ext = &SDO->ODExtensions[SDO->entryNo];
   10d0a:	68fb      	ldr	r3, [r7, #12]
   10d0c:	681b      	ldr	r3, [r3, #0]
   10d0e:	6b59      	ldr	r1, [r3, #52]	; 0x34
   10d10:	68fb      	ldr	r3, [r7, #12]
   10d12:	681b      	ldr	r3, [r3, #0]
   10d14:	6bda      	ldr	r2, [r3, #60]	; 0x3c
   10d16:	4613      	mov	r3, r2
   10d18:	005b      	lsls	r3, r3, #1
   10d1a:	4413      	add	r3, r2
   10d1c:	009b      	lsls	r3, r3, #2
   10d1e:	440b      	add	r3, r1
   10d20:	617b      	str	r3, [r7, #20]
        SDO->ODF_arg.object = ext->object;
   10d22:	68fb      	ldr	r3, [r7, #12]
   10d24:	681b      	ldr	r3, [r3, #0]
   10d26:	697a      	ldr	r2, [r7, #20]
   10d28:	6852      	ldr	r2, [r2, #4]
   10d2a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    SDO->ODF_arg.data = SDO->databuffer;
   10d2c:	68fb      	ldr	r3, [r7, #12]
   10d2e:	681b      	ldr	r3, [r3, #0]
   10d30:	68fa      	ldr	r2, [r7, #12]
   10d32:	6812      	ldr	r2, [r2, #0]
   10d34:	3208      	adds	r2, #8
   10d36:	645a      	str	r2, [r3, #68]	; 0x44
    SDO->ODF_arg.dataLength = CO_OD_getLength(SDO->entryNo, subIndex);
   10d38:	68fb      	ldr	r3, [r7, #12]
   10d3a:	681c      	ldr	r4, [r3, #0]
   10d3c:	68fb      	ldr	r3, [r7, #12]
   10d3e:	681b      	ldr	r3, [r3, #0]
   10d40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   10d42:	79fa      	ldrb	r2, [r7, #7]
   10d44:	4619      	mov	r1, r3
   10d46:	68f8      	ldr	r0, [r7, #12]
   10d48:	4b25      	ldr	r3, [pc, #148]	; (10de0 <_ZN12CO_SDO_Class19CO_SDO_initTransferEmh+0x180>)
   10d4a:	4798      	blx	r3
   10d4c:	4603      	mov	r3, r0
   10d4e:	64e3      	str	r3, [r4, #76]	; 0x4c
    SDO->ODF_arg.attribute = CO_OD_getAttribute(SDO->entryNo, subIndex);
   10d50:	68fb      	ldr	r3, [r7, #12]
   10d52:	681c      	ldr	r4, [r3, #0]
   10d54:	68fb      	ldr	r3, [r7, #12]
   10d56:	681b      	ldr	r3, [r3, #0]
   10d58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   10d5a:	79fa      	ldrb	r2, [r7, #7]
   10d5c:	4619      	mov	r1, r3
   10d5e:	68f8      	ldr	r0, [r7, #12]
   10d60:	4b20      	ldr	r3, [pc, #128]	; (10de4 <_ZN12CO_SDO_Class19CO_SDO_initTransferEmh+0x184>)
   10d62:	4798      	blx	r3
   10d64:	4603      	mov	r3, r0
   10d66:	6523      	str	r3, [r4, #80]	; 0x50
    SDO->ODF_arg.pFlags = CO_OD_getFlagsPointer( SDO->entryNo, subIndex);
   10d68:	68fb      	ldr	r3, [r7, #12]
   10d6a:	681c      	ldr	r4, [r3, #0]
   10d6c:	68fb      	ldr	r3, [r7, #12]
   10d6e:	681b      	ldr	r3, [r3, #0]
   10d70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   10d72:	79fa      	ldrb	r2, [r7, #7]
   10d74:	4619      	mov	r1, r3
   10d76:	68f8      	ldr	r0, [r7, #12]
   10d78:	4b1b      	ldr	r3, [pc, #108]	; (10de8 <_ZN12CO_SDO_Class19CO_SDO_initTransferEmh+0x188>)
   10d7a:	4798      	blx	r3
   10d7c:	4603      	mov	r3, r0
   10d7e:	6563      	str	r3, [r4, #84]	; 0x54

    SDO->ODF_arg.firstSegment = true;
   10d80:	68fb      	ldr	r3, [r7, #12]
   10d82:	681b      	ldr	r3, [r3, #0]
   10d84:	2201      	movs	r2, #1
   10d86:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
    SDO->ODF_arg.lastSegment = true;
   10d8a:	68fb      	ldr	r3, [r7, #12]
   10d8c:	681b      	ldr	r3, [r3, #0]
   10d8e:	2201      	movs	r2, #1
   10d90:	f883 205f 	strb.w	r2, [r3, #95]	; 0x5f

    /* indicate total data length, if not domain */
    SDO->ODF_arg.dataLengthTotal = (SDO->ODF_arg.ODdataStorage) ? SDO->ODF_arg.dataLength : 0U;
   10d94:	68fb      	ldr	r3, [r7, #12]
   10d96:	681a      	ldr	r2, [r3, #0]
   10d98:	68fb      	ldr	r3, [r7, #12]
   10d9a:	681b      	ldr	r3, [r3, #0]
   10d9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   10d9e:	2b00      	cmp	r3, #0
   10da0:	d003      	beq.n	10daa <_ZN12CO_SDO_Class19CO_SDO_initTransferEmh+0x14a>
   10da2:	68fb      	ldr	r3, [r7, #12]
   10da4:	681b      	ldr	r3, [r3, #0]
   10da6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   10da8:	e000      	b.n	10dac <_ZN12CO_SDO_Class19CO_SDO_initTransferEmh+0x14c>
   10daa:	2300      	movs	r3, #0
   10dac:	6613      	str	r3, [r2, #96]	; 0x60

    SDO->ODF_arg.offset = 0U;
   10dae:	68fb      	ldr	r3, [r7, #12]
   10db0:	681b      	ldr	r3, [r3, #0]
   10db2:	2200      	movs	r2, #0
   10db4:	665a      	str	r2, [r3, #100]	; 0x64

    /* verify length */
    if(SDO->ODF_arg.dataLength > CO_SDO_BUFFER_SIZE){
   10db6:	68fb      	ldr	r3, [r7, #12]
   10db8:	681b      	ldr	r3, [r3, #0]
   10dba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   10dbc:	2b20      	cmp	r3, #32
   10dbe:	d901      	bls.n	10dc4 <_ZN12CO_SDO_Class19CO_SDO_initTransferEmh+0x164>
        return CO_SDO_AB_DEVICE_INCOMPAT;     /* general internal incompatibility in the device */
   10dc0:	4b0a      	ldr	r3, [pc, #40]	; (10dec <_ZN12CO_SDO_Class19CO_SDO_initTransferEmh+0x18c>)
   10dc2:	e000      	b.n	10dc6 <_ZN12CO_SDO_Class19CO_SDO_initTransferEmh+0x166>
    }

    return 0U;
   10dc4:	2300      	movs	r3, #0
}
   10dc6:	4618      	mov	r0, r3
   10dc8:	371c      	adds	r7, #28
   10dca:	46bd      	mov	sp, r7
   10dcc:	bd90      	pop	{r4, r7, pc}
   10dce:	bf00      	nop
   10dd0:	0001098d 	.word	0x0001098d
   10dd4:	06020000 	.word	0x06020000
   10dd8:	06090011 	.word	0x06090011
   10ddc:	00010b83 	.word	0x00010b83
   10de0:	00010a35 	.word	0x00010a35
   10de4:	00010ad9 	.word	0x00010ad9
   10de8:	00010c13 	.word	0x00010c13
   10dec:	06040047 	.word	0x06040047

00010df0 <_ZN12CO_SDO_Class13CO_SDO_readODEm>:


/******************************************************************************/
uint32_t CO_SDO_Class::CO_SDO_readOD(uint32_t SDOBufferSize){
   10df0:	b580      	push	{r7, lr}
   10df2:	b08a      	sub	sp, #40	; 0x28
   10df4:	af00      	add	r7, sp, #0
   10df6:	6078      	str	r0, [r7, #4]
   10df8:	6039      	str	r1, [r7, #0]
    uint8_t *SDObuffer = SDO->ODF_arg.data;
   10dfa:	687b      	ldr	r3, [r7, #4]
   10dfc:	681b      	ldr	r3, [r3, #0]
   10dfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   10e00:	627b      	str	r3, [r7, #36]	; 0x24
    uint8_t *ODdata = (uint8_t*)SDO->ODF_arg.ODdataStorage;
   10e02:	687b      	ldr	r3, [r7, #4]
   10e04:	681b      	ldr	r3, [r3, #0]
   10e06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   10e08:	623b      	str	r3, [r7, #32]
    uint32_t length = SDO->ODF_arg.dataLength;
   10e0a:	687b      	ldr	r3, [r7, #4]
   10e0c:	681b      	ldr	r3, [r3, #0]
   10e0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   10e10:	61fb      	str	r3, [r7, #28]
    CO_OD_extension_t *ext = 0;
   10e12:	2300      	movs	r3, #0
   10e14:	61bb      	str	r3, [r7, #24]

    /* is object readable? */
    if((SDO->ODF_arg.attribute & CO_ODA_READABLE) == 0)
   10e16:	687b      	ldr	r3, [r7, #4]
   10e18:	681b      	ldr	r3, [r3, #0]
   10e1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   10e1c:	f003 0304 	and.w	r3, r3, #4
   10e20:	2b00      	cmp	r3, #0
   10e22:	d101      	bne.n	10e28 <_ZN12CO_SDO_Class13CO_SDO_readODEm+0x38>
        return CO_SDO_AB_WRITEONLY;     /* attempt to read a write-only object */
   10e24:	4b38      	ldr	r3, [pc, #224]	; (10f08 <_ZN12CO_SDO_Class13CO_SDO_readODEm+0x118>)
   10e26:	e06b      	b.n	10f00 <_ZN12CO_SDO_Class13CO_SDO_readODEm+0x110>

    /* find extension */
    if(SDO->ODExtensions != NULL){
   10e28:	687b      	ldr	r3, [r7, #4]
   10e2a:	681b      	ldr	r3, [r3, #0]
   10e2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   10e2e:	2b00      	cmp	r3, #0
   10e30:	d00b      	beq.n	10e4a <_ZN12CO_SDO_Class13CO_SDO_readODEm+0x5a>
        ext = &SDO->ODExtensions[SDO->entryNo];
   10e32:	687b      	ldr	r3, [r7, #4]
   10e34:	681b      	ldr	r3, [r3, #0]
   10e36:	6b59      	ldr	r1, [r3, #52]	; 0x34
   10e38:	687b      	ldr	r3, [r7, #4]
   10e3a:	681b      	ldr	r3, [r3, #0]
   10e3c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
   10e3e:	4613      	mov	r3, r2
   10e40:	005b      	lsls	r3, r3, #1
   10e42:	4413      	add	r3, r2
   10e44:	009b      	lsls	r3, r3, #2
   10e46:	440b      	add	r3, r1
   10e48:	61bb      	str	r3, [r7, #24]
    }

    /* copy data from OD to SDO buffer if not domain */
    if(ODdata != NULL){
   10e4a:	6a3b      	ldr	r3, [r7, #32]
   10e4c:	2b00      	cmp	r3, #0
   10e4e:	d01e      	beq.n	10e8e <_ZN12CO_SDO_Class13CO_SDO_readODEm+0x9e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   10e50:	f3ef 8310 	mrs	r3, PRIMASK
   10e54:	60bb      	str	r3, [r7, #8]
  return(result);
   10e56:	68bb      	ldr	r3, [r7, #8]
        CO_LOCK_OD();
   10e58:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
   10e5a:	b672      	cpsid	i
        while(length--) *(SDObuffer++) = *(ODdata++);
   10e5c:	69fb      	ldr	r3, [r7, #28]
   10e5e:	1e5a      	subs	r2, r3, #1
   10e60:	61fa      	str	r2, [r7, #28]
   10e62:	2b00      	cmp	r3, #0
   10e64:	bf14      	ite	ne
   10e66:	2301      	movne	r3, #1
   10e68:	2300      	moveq	r3, #0
   10e6a:	b2db      	uxtb	r3, r3
   10e6c:	2b00      	cmp	r3, #0
   10e6e:	d008      	beq.n	10e82 <_ZN12CO_SDO_Class13CO_SDO_readODEm+0x92>
   10e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   10e72:	1c5a      	adds	r2, r3, #1
   10e74:	627a      	str	r2, [r7, #36]	; 0x24
   10e76:	6a3a      	ldr	r2, [r7, #32]
   10e78:	1c51      	adds	r1, r2, #1
   10e7a:	6239      	str	r1, [r7, #32]
   10e7c:	7812      	ldrb	r2, [r2, #0]
   10e7e:	701a      	strb	r2, [r3, #0]
   10e80:	e7ec      	b.n	10e5c <_ZN12CO_SDO_Class13CO_SDO_readODEm+0x6c>
   10e82:	697b      	ldr	r3, [r7, #20]
   10e84:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   10e86:	68fb      	ldr	r3, [r7, #12]
   10e88:	f383 8810 	msr	PRIMASK, r3
   10e8c:	e005      	b.n	10e9a <_ZN12CO_SDO_Class13CO_SDO_readODEm+0xaa>
        CO_UNLOCK_OD();
    }
    /* if domain, Object dictionary function MUST exist */
    else{
        if(ext->pODFunc == NULL){
   10e8e:	69bb      	ldr	r3, [r7, #24]
   10e90:	681b      	ldr	r3, [r3, #0]
   10e92:	2b00      	cmp	r3, #0
   10e94:	d101      	bne.n	10e9a <_ZN12CO_SDO_Class13CO_SDO_readODEm+0xaa>
            return CO_SDO_AB_DEVICE_INCOMPAT;     /* general internal incompatibility in the device */
   10e96:	4b1d      	ldr	r3, [pc, #116]	; (10f0c <_ZN12CO_SDO_Class13CO_SDO_readODEm+0x11c>)
   10e98:	e032      	b.n	10f00 <_ZN12CO_SDO_Class13CO_SDO_readODEm+0x110>
        }
    }

    /* call Object dictionary function if registered */
    SDO->ODF_arg.reading = true;
   10e9a:	687b      	ldr	r3, [r7, #4]
   10e9c:	681b      	ldr	r3, [r3, #0]
   10e9e:	2201      	movs	r2, #1
   10ea0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    if(ext->pODFunc != NULL){
   10ea4:	69bb      	ldr	r3, [r7, #24]
   10ea6:	681b      	ldr	r3, [r3, #0]
   10ea8:	2b00      	cmp	r3, #0
   10eaa:	d019      	beq.n	10ee0 <_ZN12CO_SDO_Class13CO_SDO_readODEm+0xf0>
        uint32_t abortCode = ext->pODFunc(&SDO->ODF_arg);
   10eac:	69bb      	ldr	r3, [r7, #24]
   10eae:	681b      	ldr	r3, [r3, #0]
   10eb0:	687a      	ldr	r2, [r7, #4]
   10eb2:	6812      	ldr	r2, [r2, #0]
   10eb4:	3240      	adds	r2, #64	; 0x40
   10eb6:	4610      	mov	r0, r2
   10eb8:	4798      	blx	r3
   10eba:	6138      	str	r0, [r7, #16]
        if(abortCode != 0U){
   10ebc:	693b      	ldr	r3, [r7, #16]
   10ebe:	2b00      	cmp	r3, #0
   10ec0:	d001      	beq.n	10ec6 <_ZN12CO_SDO_Class13CO_SDO_readODEm+0xd6>
            return abortCode;
   10ec2:	693b      	ldr	r3, [r7, #16]
   10ec4:	e01c      	b.n	10f00 <_ZN12CO_SDO_Class13CO_SDO_readODEm+0x110>
        }

        /* dataLength (upadted by pODFunc) must be inside limits */
        if((SDO->ODF_arg.dataLength == 0U) || (SDO->ODF_arg.dataLength > SDOBufferSize)){
   10ec6:	687b      	ldr	r3, [r7, #4]
   10ec8:	681b      	ldr	r3, [r3, #0]
   10eca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   10ecc:	2b00      	cmp	r3, #0
   10ece:	d005      	beq.n	10edc <_ZN12CO_SDO_Class13CO_SDO_readODEm+0xec>
   10ed0:	687b      	ldr	r3, [r7, #4]
   10ed2:	681b      	ldr	r3, [r3, #0]
   10ed4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
   10ed6:	683b      	ldr	r3, [r7, #0]
   10ed8:	429a      	cmp	r2, r3
   10eda:	d901      	bls.n	10ee0 <_ZN12CO_SDO_Class13CO_SDO_readODEm+0xf0>
            return CO_SDO_AB_DEVICE_INCOMPAT;     /* general internal incompatibility in the device */
   10edc:	4b0b      	ldr	r3, [pc, #44]	; (10f0c <_ZN12CO_SDO_Class13CO_SDO_readODEm+0x11c>)
   10ede:	e00f      	b.n	10f00 <_ZN12CO_SDO_Class13CO_SDO_readODEm+0x110>
        }
    }
    SDO->ODF_arg.offset += SDO->ODF_arg.dataLength;
   10ee0:	687b      	ldr	r3, [r7, #4]
   10ee2:	681b      	ldr	r3, [r3, #0]
   10ee4:	687a      	ldr	r2, [r7, #4]
   10ee6:	6812      	ldr	r2, [r2, #0]
   10ee8:	6e51      	ldr	r1, [r2, #100]	; 0x64
   10eea:	687a      	ldr	r2, [r7, #4]
   10eec:	6812      	ldr	r2, [r2, #0]
   10eee:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
   10ef0:	440a      	add	r2, r1
   10ef2:	665a      	str	r2, [r3, #100]	; 0x64
    SDO->ODF_arg.firstSegment = false;
   10ef4:	687b      	ldr	r3, [r7, #4]
   10ef6:	681b      	ldr	r3, [r3, #0]
   10ef8:	2200      	movs	r2, #0
   10efa:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
            *(buf2--) = b;
        }
    }
#endif

    return 0U;
   10efe:	2300      	movs	r3, #0
}
   10f00:	4618      	mov	r0, r3
   10f02:	3728      	adds	r7, #40	; 0x28
   10f04:	46bd      	mov	sp, r7
   10f06:	bd80      	pop	{r7, pc}
   10f08:	06010001 	.word	0x06010001
   10f0c:	06040047 	.word	0x06040047

00010f10 <_ZN12CO_SDO_Class14CO_SDO_writeODEm>:


/******************************************************************************/
uint32_t CO_SDO_Class::CO_SDO_writeOD(uint32_t length){
   10f10:	b580      	push	{r7, lr}
   10f12:	b08a      	sub	sp, #40	; 0x28
   10f14:	af00      	add	r7, sp, #0
   10f16:	6078      	str	r0, [r7, #4]
   10f18:	6039      	str	r1, [r7, #0]
    uint8_t *SDObuffer = SDO->ODF_arg.data;
   10f1a:	687b      	ldr	r3, [r7, #4]
   10f1c:	681b      	ldr	r3, [r3, #0]
   10f1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   10f20:	627b      	str	r3, [r7, #36]	; 0x24
    uint8_t *ODdata = (uint8_t*)SDO->ODF_arg.ODdataStorage;
   10f22:	687b      	ldr	r3, [r7, #4]
   10f24:	681b      	ldr	r3, [r3, #0]
   10f26:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   10f28:	623b      	str	r3, [r7, #32]
    bool_t exception_1003 = false;
   10f2a:	2300      	movs	r3, #0
   10f2c:	77fb      	strb	r3, [r7, #31]

    /* is object writeable? */
    if((SDO->ODF_arg.attribute & CO_ODA_WRITEABLE) == 0){
   10f2e:	687b      	ldr	r3, [r7, #4]
   10f30:	681b      	ldr	r3, [r3, #0]
   10f32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   10f34:	f003 0308 	and.w	r3, r3, #8
   10f38:	2b00      	cmp	r3, #0
   10f3a:	d101      	bne.n	10f40 <_ZN12CO_SDO_Class14CO_SDO_writeODEm+0x30>
        return CO_SDO_AB_READONLY;     /* attempt to write a read-only object */
   10f3c:	4b3f      	ldr	r3, [pc, #252]	; (1103c <_ZN12CO_SDO_Class14CO_SDO_writeODEm+0x12c>)
   10f3e:	e079      	b.n	11034 <_ZN12CO_SDO_Class14CO_SDO_writeODEm+0x124>
    }

    /* length of domain data is application specific and not verified */
    if(ODdata == 0){
   10f40:	6a3b      	ldr	r3, [r7, #32]
   10f42:	2b00      	cmp	r3, #0
   10f44:	d104      	bne.n	10f50 <_ZN12CO_SDO_Class14CO_SDO_writeODEm+0x40>
        SDO->ODF_arg.dataLength = length;
   10f46:	687b      	ldr	r3, [r7, #4]
   10f48:	681b      	ldr	r3, [r3, #0]
   10f4a:	683a      	ldr	r2, [r7, #0]
   10f4c:	64da      	str	r2, [r3, #76]	; 0x4c
   10f4e:	e007      	b.n	10f60 <_ZN12CO_SDO_Class14CO_SDO_writeODEm+0x50>
    }

    /* verify length except for domain data type */
    else if(SDO->ODF_arg.dataLength != length){
   10f50:	687b      	ldr	r3, [r7, #4]
   10f52:	681b      	ldr	r3, [r3, #0]
   10f54:	6cda      	ldr	r2, [r3, #76]	; 0x4c
   10f56:	683b      	ldr	r3, [r7, #0]
   10f58:	429a      	cmp	r2, r3
   10f5a:	d001      	beq.n	10f60 <_ZN12CO_SDO_Class14CO_SDO_writeODEm+0x50>
        return CO_SDO_AB_TYPE_MISMATCH;     /* Length of service parameter does not match */
   10f5c:	4b38      	ldr	r3, [pc, #224]	; (11040 <_ZN12CO_SDO_Class14CO_SDO_writeODEm+0x130>)
   10f5e:	e069      	b.n	11034 <_ZN12CO_SDO_Class14CO_SDO_writeODEm+0x124>
        }
    }
#endif

    /* call Object dictionary function if registered */
    SDO->ODF_arg.reading = false;
   10f60:	687b      	ldr	r3, [r7, #4]
   10f62:	681b      	ldr	r3, [r3, #0]
   10f64:	2200      	movs	r2, #0
   10f66:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    if(SDO->ODExtensions != NULL){
   10f6a:	687b      	ldr	r3, [r7, #4]
   10f6c:	681b      	ldr	r3, [r3, #0]
   10f6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   10f70:	2b00      	cmp	r3, #0
   10f72:	d01c      	beq.n	10fae <_ZN12CO_SDO_Class14CO_SDO_writeODEm+0x9e>
        CO_OD_extension_t *ext = &SDO->ODExtensions[SDO->entryNo];
   10f74:	687b      	ldr	r3, [r7, #4]
   10f76:	681b      	ldr	r3, [r3, #0]
   10f78:	6b59      	ldr	r1, [r3, #52]	; 0x34
   10f7a:	687b      	ldr	r3, [r7, #4]
   10f7c:	681b      	ldr	r3, [r3, #0]
   10f7e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
   10f80:	4613      	mov	r3, r2
   10f82:	005b      	lsls	r3, r3, #1
   10f84:	4413      	add	r3, r2
   10f86:	009b      	lsls	r3, r3, #2
   10f88:	440b      	add	r3, r1
   10f8a:	61bb      	str	r3, [r7, #24]

        if(ext->pODFunc != NULL){
   10f8c:	69bb      	ldr	r3, [r7, #24]
   10f8e:	681b      	ldr	r3, [r3, #0]
   10f90:	2b00      	cmp	r3, #0
   10f92:	d00c      	beq.n	10fae <_ZN12CO_SDO_Class14CO_SDO_writeODEm+0x9e>
            uint32_t abortCode = ext->pODFunc(&SDO->ODF_arg);
   10f94:	69bb      	ldr	r3, [r7, #24]
   10f96:	681b      	ldr	r3, [r3, #0]
   10f98:	687a      	ldr	r2, [r7, #4]
   10f9a:	6812      	ldr	r2, [r2, #0]
   10f9c:	3240      	adds	r2, #64	; 0x40
   10f9e:	4610      	mov	r0, r2
   10fa0:	4798      	blx	r3
   10fa2:	6178      	str	r0, [r7, #20]
            if(abortCode != 0U){
   10fa4:	697b      	ldr	r3, [r7, #20]
   10fa6:	2b00      	cmp	r3, #0
   10fa8:	d001      	beq.n	10fae <_ZN12CO_SDO_Class14CO_SDO_writeODEm+0x9e>
                return abortCode;
   10faa:	697b      	ldr	r3, [r7, #20]
   10fac:	e042      	b.n	11034 <_ZN12CO_SDO_Class14CO_SDO_writeODEm+0x124>
            }
        }
    }
    SDO->ODF_arg.offset += SDO->ODF_arg.dataLength;
   10fae:	687b      	ldr	r3, [r7, #4]
   10fb0:	681b      	ldr	r3, [r3, #0]
   10fb2:	687a      	ldr	r2, [r7, #4]
   10fb4:	6812      	ldr	r2, [r2, #0]
   10fb6:	6e51      	ldr	r1, [r2, #100]	; 0x64
   10fb8:	687a      	ldr	r2, [r7, #4]
   10fba:	6812      	ldr	r2, [r2, #0]
   10fbc:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
   10fbe:	440a      	add	r2, r1
   10fc0:	665a      	str	r2, [r3, #100]	; 0x64
    SDO->ODF_arg.firstSegment = false;
   10fc2:	687b      	ldr	r3, [r7, #4]
   10fc4:	681b      	ldr	r3, [r3, #0]
   10fc6:	2200      	movs	r2, #0
   10fc8:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e

    /* Special exception: 1003,00 is writable from network, but not in OD  */
    if(SDO->ODF_arg.index == 0x1003 && SDO->ODF_arg.subIndex == 0) {
   10fcc:	687b      	ldr	r3, [r7, #4]
   10fce:	681b      	ldr	r3, [r3, #0]
   10fd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   10fd2:	f241 0203 	movw	r2, #4099	; 0x1003
   10fd6:	4293      	cmp	r3, r2
   10fd8:	d107      	bne.n	10fea <_ZN12CO_SDO_Class14CO_SDO_writeODEm+0xda>
   10fda:	687b      	ldr	r3, [r7, #4]
   10fdc:	681b      	ldr	r3, [r3, #0]
   10fde:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
   10fe2:	2b00      	cmp	r3, #0
   10fe4:	d101      	bne.n	10fea <_ZN12CO_SDO_Class14CO_SDO_writeODEm+0xda>
        exception_1003 = true;
   10fe6:	2301      	movs	r3, #1
   10fe8:	77fb      	strb	r3, [r7, #31]
    }

    /* copy data from SDO buffer to OD if not domain */
    if(ODdata != NULL && exception_1003 == false){
   10fea:	6a3b      	ldr	r3, [r7, #32]
   10fec:	2b00      	cmp	r3, #0
   10fee:	d020      	beq.n	11032 <_ZN12CO_SDO_Class14CO_SDO_writeODEm+0x122>
   10ff0:	7ffb      	ldrb	r3, [r7, #31]
   10ff2:	2b00      	cmp	r3, #0
   10ff4:	d11d      	bne.n	11032 <_ZN12CO_SDO_Class14CO_SDO_writeODEm+0x122>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   10ff6:	f3ef 8310 	mrs	r3, PRIMASK
   10ffa:	60bb      	str	r3, [r7, #8]
  return(result);
   10ffc:	68bb      	ldr	r3, [r7, #8]
        CO_LOCK_OD();
   10ffe:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
   11000:	b672      	cpsid	i
        while(length--){
   11002:	683b      	ldr	r3, [r7, #0]
   11004:	1e5a      	subs	r2, r3, #1
   11006:	603a      	str	r2, [r7, #0]
   11008:	2b00      	cmp	r3, #0
   1100a:	bf14      	ite	ne
   1100c:	2301      	movne	r3, #1
   1100e:	2300      	moveq	r3, #0
   11010:	b2db      	uxtb	r3, r3
   11012:	2b00      	cmp	r3, #0
   11014:	d008      	beq.n	11028 <_ZN12CO_SDO_Class14CO_SDO_writeODEm+0x118>
            *(ODdata++) = *(SDObuffer++);
   11016:	6a3b      	ldr	r3, [r7, #32]
   11018:	1c5a      	adds	r2, r3, #1
   1101a:	623a      	str	r2, [r7, #32]
   1101c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   1101e:	1c51      	adds	r1, r2, #1
   11020:	6279      	str	r1, [r7, #36]	; 0x24
   11022:	7812      	ldrb	r2, [r2, #0]
   11024:	701a      	strb	r2, [r3, #0]
        while(length--){
   11026:	e7ec      	b.n	11002 <_ZN12CO_SDO_Class14CO_SDO_writeODEm+0xf2>
   11028:	693b      	ldr	r3, [r7, #16]
   1102a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   1102c:	68fb      	ldr	r3, [r7, #12]
   1102e:	f383 8810 	msr	PRIMASK, r3
        }
        CO_UNLOCK_OD();
    }

    return 0;
   11032:	2300      	movs	r3, #0
}
   11034:	4618      	mov	r0, r3
   11036:	3728      	adds	r7, #40	; 0x28
   11038:	46bd      	mov	sp, r7
   1103a:	bd80      	pop	{r7, pc}
   1103c:	06010002 	.word	0x06010002
   11040:	06070010 	.word	0x06070010

00011044 <_ZL12CO_SDO_abortP8CO_SDO_tm>:


/******************************************************************************/
static void CO_SDO_abort(CO_SDO_t *SDO,uint32_t code){
   11044:	b580      	push	{r7, lr}
   11046:	b082      	sub	sp, #8
   11048:	af00      	add	r7, sp, #0
   1104a:	6078      	str	r0, [r7, #4]
   1104c:	6039      	str	r1, [r7, #0]
    SDO->CANtxBuff->data[0] = 0x80;
   1104e:	687b      	ldr	r3, [r7, #4]
   11050:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   11054:	2280      	movs	r2, #128	; 0x80
   11056:	715a      	strb	r2, [r3, #5]
    SDO->CANtxBuff->data[1] = SDO->ODF_arg.index & 0xFF;
   11058:	687b      	ldr	r3, [r7, #4]
   1105a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   1105e:	687a      	ldr	r2, [r7, #4]
   11060:	6d92      	ldr	r2, [r2, #88]	; 0x58
   11062:	b2d2      	uxtb	r2, r2
   11064:	719a      	strb	r2, [r3, #6]
    SDO->CANtxBuff->data[2] = (SDO->ODF_arg.index>>8) & 0xFF;
   11066:	687b      	ldr	r3, [r7, #4]
   11068:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   1106c:	687a      	ldr	r2, [r7, #4]
   1106e:	6d92      	ldr	r2, [r2, #88]	; 0x58
   11070:	0a12      	lsrs	r2, r2, #8
   11072:	b2d2      	uxtb	r2, r2
   11074:	71da      	strb	r2, [r3, #7]
    SDO->CANtxBuff->data[3] = SDO->ODF_arg.subIndex;
   11076:	687b      	ldr	r3, [r7, #4]
   11078:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   1107c:	687a      	ldr	r2, [r7, #4]
   1107e:	f892 205c 	ldrb.w	r2, [r2, #92]	; 0x5c
   11082:	721a      	strb	r2, [r3, #8]
   ptrCODriverClass->CO_memcpySwap4(&SDO->CANtxBuff->data[4], &code);
   11084:	4b0f      	ldr	r3, [pc, #60]	; (110c4 <_ZL12CO_SDO_abortP8CO_SDO_tm+0x80>)
   11086:	681b      	ldr	r3, [r3, #0]
   11088:	1d18      	adds	r0, r3, #4
   1108a:	687b      	ldr	r3, [r7, #4]
   1108c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   11090:	3309      	adds	r3, #9
   11092:	463a      	mov	r2, r7
   11094:	4619      	mov	r1, r3
   11096:	4b0c      	ldr	r3, [pc, #48]	; (110c8 <_ZL12CO_SDO_abortP8CO_SDO_tm+0x84>)
   11098:	4798      	blx	r3
    SDO->state = CO_SDO_ST_IDLE;
   1109a:	687b      	ldr	r3, [r7, #4]
   1109c:	2200      	movs	r2, #0
   1109e:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
    SDO->CANrxNew = false;
   110a2:	687b      	ldr	r3, [r7, #4]
   110a4:	2200      	movs	r2, #0
   110a6:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
    ptrCODriverClass->CAN_Send(SDO->CANtxBuff);
   110aa:	4b06      	ldr	r3, [pc, #24]	; (110c4 <_ZL12CO_SDO_abortP8CO_SDO_tm+0x80>)
   110ac:	681a      	ldr	r2, [r3, #0]
   110ae:	687b      	ldr	r3, [r7, #4]
   110b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   110b4:	4619      	mov	r1, r3
   110b6:	4610      	mov	r0, r2
   110b8:	4b04      	ldr	r3, [pc, #16]	; (110cc <_ZL12CO_SDO_abortP8CO_SDO_tm+0x88>)
   110ba:	4798      	blx	r3
}
   110bc:	bf00      	nop
   110be:	3708      	adds	r7, #8
   110c0:	46bd      	mov	sp, r7
   110c2:	bd80      	pop	{r7, pc}
   110c4:	200019a4 	.word	0x200019a4
   110c8:	00010521 	.word	0x00010521
   110cc:	0000d961 	.word	0x0000d961

000110d0 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm>:
int8_t CO_SDO_Class::CO_SDO_process(
         bool_t                  NMTisPreOrOperational,
        uint32_t                timeDifference_ms,
        uint32_t                SDOtimeoutTime,
        uint32_t               *timerNext_ms)
{
   110d0:	b5b0      	push	{r4, r5, r7, lr}
   110d2:	b092      	sub	sp, #72	; 0x48
   110d4:	af00      	add	r7, sp, #0
   110d6:	60f8      	str	r0, [r7, #12]
   110d8:	607a      	str	r2, [r7, #4]
   110da:	603b      	str	r3, [r7, #0]
   110dc:	460b      	mov	r3, r1
   110de:	72fb      	strb	r3, [r7, #11]
    CO_SDO_state_t state = CO_SDO_ST_IDLE;
   110e0:	2300      	movs	r3, #0
   110e2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    bool_t timeoutSubblockDownolad = false;
   110e6:	2300      	movs	r3, #0
   110e8:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    bool_t sendResponse = false;
   110ec:	2300      	movs	r3, #0
   110ee:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
	
    /* return if idle */
    if((SDO->state == CO_SDO_ST_IDLE) && (!SDO->CANrxNew)){
   110f2:	68fb      	ldr	r3, [r7, #12]
   110f4:	681b      	ldr	r3, [r3, #0]
   110f6:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
   110fa:	2b00      	cmp	r3, #0
   110fc:	d108      	bne.n	11110 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x40>
   110fe:	68fb      	ldr	r3, [r7, #12]
   11100:	681b      	ldr	r3, [r3, #0]
   11102:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
   11106:	2b00      	cmp	r3, #0
   11108:	d102      	bne.n	11110 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x40>
	//	printf("CO_SDO_ST_IDLE\n\r");
        return 0;
   1110a:	2300      	movs	r3, #0
   1110c:	f001 b976 	b.w	123fc <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x132c>
    }

    /* SDO is allowed to work only in operational or pre-operational NMT state */
    if(!NMTisPreOrOperational){
   11110:	7afb      	ldrb	r3, [r7, #11]
   11112:	2b00      	cmp	r3, #0
   11114:	d10c      	bne.n	11130 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x60>
        SDO->state = CO_SDO_ST_IDLE;
   11116:	68fb      	ldr	r3, [r7, #12]
   11118:	681b      	ldr	r3, [r3, #0]
   1111a:	2200      	movs	r2, #0
   1111c:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
        SDO->CANrxNew = false;
   11120:	68fb      	ldr	r3, [r7, #12]
   11122:	681b      	ldr	r3, [r3, #0]
   11124:	2200      	movs	r2, #0
   11126:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
	//	printf("!NMTisPreOrOperational\n\r");
        return 0;
   1112a:	2300      	movs	r3, #0
   1112c:	f001 b966 	b.w	123fc <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x132c>
    }

    /* Is something new to process? */
    if((!SDO->CANtxBuff->bufferFull) && ((SDO->CANrxNew) || (SDO->state == CO_SDO_ST_UPLOAD_BL_SUBBLOCK))){
   11130:	68fb      	ldr	r3, [r7, #12]
   11132:	681b      	ldr	r3, [r3, #0]
   11134:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   11138:	7b5b      	ldrb	r3, [r3, #13]
   1113a:	b2db      	uxtb	r3, r3
   1113c:	2b00      	cmp	r3, #0
   1113e:	d10d      	bne.n	1115c <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x8c>
   11140:	68fb      	ldr	r3, [r7, #12]
   11142:	681b      	ldr	r3, [r3, #0]
   11144:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
   11148:	2b00      	cmp	r3, #0
   1114a:	d105      	bne.n	11158 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x88>
   1114c:	68fb      	ldr	r3, [r7, #12]
   1114e:	681b      	ldr	r3, [r3, #0]
   11150:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
   11154:	2b26      	cmp	r3, #38	; 0x26
   11156:	d101      	bne.n	1115c <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x8c>
   11158:	2301      	movs	r3, #1
   1115a:	e000      	b.n	1115e <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x8e>
   1115c:	2300      	movs	r3, #0
   1115e:	2b00      	cmp	r3, #0
   11160:	f000 80eb 	beq.w	1133a <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x26a>
        uint8_t CCS = SDO->CANrxData[0] >> 5;   /* Client command specifier */
   11164:	68fb      	ldr	r3, [r7, #12]
   11166:	681b      	ldr	r3, [r3, #0]
   11168:	781b      	ldrb	r3, [r3, #0]
   1116a:	115b      	asrs	r3, r3, #5
   1116c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		//printf("Is something new to process\n\r");
        /* reset timeout */
        if(SDO->state != CO_SDO_ST_UPLOAD_BL_SUBBLOCK)
   11170:	68fb      	ldr	r3, [r7, #12]
   11172:	681b      	ldr	r3, [r3, #0]
   11174:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
   11178:	2b26      	cmp	r3, #38	; 0x26
   1117a:	d003      	beq.n	11184 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xb4>
            SDO->timeoutTimer = 0;
   1117c:	68fb      	ldr	r3, [r7, #12]
   1117e:	681b      	ldr	r3, [r3, #0]
   11180:	2200      	movs	r2, #0
   11182:	66da      	str	r2, [r3, #108]	; 0x6c

        /* clear response buffer */
        SDO->CANtxBuff->data[0] = SDO->CANtxBuff->data[1] = SDO->CANtxBuff->data[2] = SDO->CANtxBuff->data[3] = 0;
   11184:	68fb      	ldr	r3, [r7, #12]
   11186:	681b      	ldr	r3, [r3, #0]
   11188:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
   1118c:	68fb      	ldr	r3, [r7, #12]
   1118e:	681b      	ldr	r3, [r3, #0]
   11190:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   11194:	68fa      	ldr	r2, [r7, #12]
   11196:	6812      	ldr	r2, [r2, #0]
   11198:	f8d2 2084 	ldr.w	r2, [r2, #132]	; 0x84
   1119c:	68f9      	ldr	r1, [r7, #12]
   1119e:	6809      	ldr	r1, [r1, #0]
   111a0:	f8d1 1084 	ldr.w	r1, [r1, #132]	; 0x84
   111a4:	2400      	movs	r4, #0
   111a6:	720c      	strb	r4, [r1, #8]
   111a8:	7a09      	ldrb	r1, [r1, #8]
   111aa:	71d1      	strb	r1, [r2, #7]
   111ac:	79d2      	ldrb	r2, [r2, #7]
   111ae:	719a      	strb	r2, [r3, #6]
   111b0:	799b      	ldrb	r3, [r3, #6]
   111b2:	7143      	strb	r3, [r0, #5]
        SDO->CANtxBuff->data[4] = SDO->CANtxBuff->data[5] = SDO->CANtxBuff->data[6] = SDO->CANtxBuff->data[7] = 0;
   111b4:	68fb      	ldr	r3, [r7, #12]
   111b6:	681b      	ldr	r3, [r3, #0]
   111b8:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
   111bc:	68fb      	ldr	r3, [r7, #12]
   111be:	681b      	ldr	r3, [r3, #0]
   111c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   111c4:	68fa      	ldr	r2, [r7, #12]
   111c6:	6812      	ldr	r2, [r2, #0]
   111c8:	f8d2 2084 	ldr.w	r2, [r2, #132]	; 0x84
   111cc:	68f9      	ldr	r1, [r7, #12]
   111ce:	6809      	ldr	r1, [r1, #0]
   111d0:	f8d1 1084 	ldr.w	r1, [r1, #132]	; 0x84
   111d4:	2400      	movs	r4, #0
   111d6:	730c      	strb	r4, [r1, #12]
   111d8:	7b09      	ldrb	r1, [r1, #12]
   111da:	72d1      	strb	r1, [r2, #11]
   111dc:	7ad2      	ldrb	r2, [r2, #11]
   111de:	729a      	strb	r2, [r3, #10]
   111e0:	7a9b      	ldrb	r3, [r3, #10]
   111e2:	7243      	strb	r3, [r0, #9]

        /* Is abort from client? */
        if((SDO->CANrxNew) && (SDO->CANrxData[0] == CCS_ABORT)){
   111e4:	68fb      	ldr	r3, [r7, #12]
   111e6:	681b      	ldr	r3, [r3, #0]
   111e8:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
   111ec:	2b00      	cmp	r3, #0
   111ee:	d012      	beq.n	11216 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x146>
   111f0:	68fb      	ldr	r3, [r7, #12]
   111f2:	681b      	ldr	r3, [r3, #0]
   111f4:	781b      	ldrb	r3, [r3, #0]
   111f6:	2b80      	cmp	r3, #128	; 0x80
   111f8:	d10d      	bne.n	11216 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x146>
            SDO->state = CO_SDO_ST_IDLE;
   111fa:	68fb      	ldr	r3, [r7, #12]
   111fc:	681b      	ldr	r3, [r3, #0]
   111fe:	2200      	movs	r2, #0
   11200:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
            SDO->CANrxNew = false;
   11204:	68fb      	ldr	r3, [r7, #12]
   11206:	681b      	ldr	r3, [r3, #0]
   11208:	2200      	movs	r2, #0
   1120a:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
            return -1;
   1120e:	f04f 33ff 	mov.w	r3, #4294967295
   11212:	f001 b8f3 	b.w	123fc <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x132c>
        }

        /* continue with previous SDO communication or start new */
        if(SDO->state != CO_SDO_ST_IDLE){
   11216:	68fb      	ldr	r3, [r7, #12]
   11218:	681b      	ldr	r3, [r3, #0]
   1121a:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
   1121e:	2b00      	cmp	r3, #0
   11220:	d006      	beq.n	11230 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x160>
            state = SDO->state;
   11222:	68fb      	ldr	r3, [r7, #12]
   11224:	681b      	ldr	r3, [r3, #0]
   11226:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
   1122a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
   1122e:	e084      	b.n	1133a <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x26a>
        else{
            uint32_t abortCode;
            uint32_t index;
			
            /* Is client command specifier valid */
            if((CCS != CCS_DOWNLOAD_INITIATE) && (CCS != CCS_UPLOAD_INITIATE) &&
   11230:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
   11234:	2b01      	cmp	r3, #1
   11236:	d015      	beq.n	11264 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x194>
   11238:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
   1123c:	2b02      	cmp	r3, #2
   1123e:	d011      	beq.n	11264 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x194>
   11240:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
   11244:	2b06      	cmp	r3, #6
   11246:	d00d      	beq.n	11264 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x194>
                (CCS != CCS_DOWNLOAD_BLOCK) && (CCS != CCS_UPLOAD_BLOCK)){
   11248:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
   1124c:	2b05      	cmp	r3, #5
   1124e:	d009      	beq.n	11264 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x194>
                CO_SDO_abort(SDO, CO_SDO_AB_CMD);/* Client command specifier not valid or unknown. */
   11250:	68fb      	ldr	r3, [r7, #12]
   11252:	681b      	ldr	r3, [r3, #0]
   11254:	4992      	ldr	r1, [pc, #584]	; (114a0 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x3d0>)
   11256:	4618      	mov	r0, r3
   11258:	4b92      	ldr	r3, [pc, #584]	; (114a4 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x3d4>)
   1125a:	4798      	blx	r3
                return -1;
   1125c:	f04f 33ff 	mov.w	r3, #4294967295
   11260:	f001 b8cc 	b.w	123fc <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x132c>
            }

            /* init ODF_arg */
            index = SDO->CANrxData[2];
   11264:	68fb      	ldr	r3, [r7, #12]
   11266:	681b      	ldr	r3, [r3, #0]
   11268:	789b      	ldrb	r3, [r3, #2]
   1126a:	633b      	str	r3, [r7, #48]	; 0x30
            index = index << 8 | SDO->CANrxData[1];
   1126c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1126e:	021b      	lsls	r3, r3, #8
   11270:	68fa      	ldr	r2, [r7, #12]
   11272:	6812      	ldr	r2, [r2, #0]
   11274:	7852      	ldrb	r2, [r2, #1]
   11276:	4313      	orrs	r3, r2
   11278:	633b      	str	r3, [r7, #48]	; 0x30
            abortCode = CO_SDO_initTransfer( index, SDO->CANrxData[3]);
   1127a:	68fb      	ldr	r3, [r7, #12]
   1127c:	681b      	ldr	r3, [r3, #0]
   1127e:	78db      	ldrb	r3, [r3, #3]
   11280:	461a      	mov	r2, r3
   11282:	6b39      	ldr	r1, [r7, #48]	; 0x30
   11284:	68f8      	ldr	r0, [r7, #12]
   11286:	4b88      	ldr	r3, [pc, #544]	; (114a8 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x3d8>)
   11288:	4798      	blx	r3
   1128a:	62f8      	str	r0, [r7, #44]	; 0x2c
            if(abortCode != 0U){
   1128c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1128e:	2b00      	cmp	r3, #0
   11290:	d009      	beq.n	112a6 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x1d6>
                CO_SDO_abort(SDO, abortCode);
   11292:	68fb      	ldr	r3, [r7, #12]
   11294:	681b      	ldr	r3, [r3, #0]
   11296:	6af9      	ldr	r1, [r7, #44]	; 0x2c
   11298:	4618      	mov	r0, r3
   1129a:	4b82      	ldr	r3, [pc, #520]	; (114a4 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x3d4>)
   1129c:	4798      	blx	r3
                return -1;
   1129e:	f04f 33ff 	mov.w	r3, #4294967295
   112a2:	f001 b8ab 	b.w	123fc <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x132c>
            }

            /* download */
            if((CCS == CCS_DOWNLOAD_INITIATE) || (CCS == CCS_DOWNLOAD_BLOCK)){
   112a6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
   112aa:	2b01      	cmp	r3, #1
   112ac:	d003      	beq.n	112b6 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x1e6>
   112ae:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
   112b2:	2b06      	cmp	r3, #6
   112b4:	d11c      	bne.n	112f0 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x220>
                if((SDO->ODF_arg.attribute & CO_ODA_WRITEABLE) == 0U){
   112b6:	68fb      	ldr	r3, [r7, #12]
   112b8:	681b      	ldr	r3, [r3, #0]
   112ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   112bc:	f003 0308 	and.w	r3, r3, #8
   112c0:	2b00      	cmp	r3, #0
   112c2:	d109      	bne.n	112d8 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x208>
                    CO_SDO_abort(SDO, CO_SDO_AB_READONLY); /* attempt to write a read-only object */
   112c4:	68fb      	ldr	r3, [r7, #12]
   112c6:	681b      	ldr	r3, [r3, #0]
   112c8:	4978      	ldr	r1, [pc, #480]	; (114ac <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x3dc>)
   112ca:	4618      	mov	r0, r3
   112cc:	4b75      	ldr	r3, [pc, #468]	; (114a4 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x3d4>)
   112ce:	4798      	blx	r3
                    return -1;
   112d0:	f04f 33ff 	mov.w	r3, #4294967295
   112d4:	f001 b892 	b.w	123fc <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x132c>
                }

                /* set state machine to normal or block download */
                if(CCS == CCS_DOWNLOAD_INITIATE){
   112d8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
   112dc:	2b01      	cmp	r3, #1
   112de:	d103      	bne.n	112e8 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x218>
                    state = CO_SDO_ST_DOWNLOAD_INITIATE;
   112e0:	2311      	movs	r3, #17
   112e2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
                if(CCS == CCS_DOWNLOAD_INITIATE){
   112e6:	e028      	b.n	1133a <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x26a>
                }
                else{
                    state = CO_SDO_ST_DOWNLOAD_BL_INITIATE;
   112e8:	2314      	movs	r3, #20
   112ea:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
                if(CCS == CCS_DOWNLOAD_INITIATE){
   112ee:	e024      	b.n	1133a <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x26a>
                }
            }

            /* upload */
            else{
                abortCode = CO_SDO_readOD( CO_SDO_BUFFER_SIZE);
   112f0:	2120      	movs	r1, #32
   112f2:	68f8      	ldr	r0, [r7, #12]
   112f4:	4b6e      	ldr	r3, [pc, #440]	; (114b0 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x3e0>)
   112f6:	4798      	blx	r3
   112f8:	62f8      	str	r0, [r7, #44]	; 0x2c
                if(abortCode != 0U){
   112fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   112fc:	2b00      	cmp	r3, #0
   112fe:	d009      	beq.n	11314 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x244>
                    CO_SDO_abort(SDO, abortCode);
   11300:	68fb      	ldr	r3, [r7, #12]
   11302:	681b      	ldr	r3, [r3, #0]
   11304:	6af9      	ldr	r1, [r7, #44]	; 0x2c
   11306:	4618      	mov	r0, r3
   11308:	4b66      	ldr	r3, [pc, #408]	; (114a4 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x3d4>)
   1130a:	4798      	blx	r3
                    return -1;
   1130c:	f04f 33ff 	mov.w	r3, #4294967295
   11310:	f001 b874 	b.w	123fc <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x132c>
                }

                /* if data size is large enough set state machine to block upload, otherwise set to normal transfer */
                if((CCS == CCS_UPLOAD_BLOCK) && (SDO->ODF_arg.dataLength > SDO->CANrxData[5])){
   11314:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
   11318:	2b05      	cmp	r3, #5
   1131a:	d10b      	bne.n	11334 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x264>
   1131c:	68fb      	ldr	r3, [r7, #12]
   1131e:	681b      	ldr	r3, [r3, #0]
   11320:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   11322:	68fa      	ldr	r2, [r7, #12]
   11324:	6812      	ldr	r2, [r2, #0]
   11326:	7952      	ldrb	r2, [r2, #5]
   11328:	4293      	cmp	r3, r2
   1132a:	d903      	bls.n	11334 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x264>
                    state = CO_SDO_ST_UPLOAD_BL_INITIATE;
   1132c:	2324      	movs	r3, #36	; 0x24
   1132e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
   11332:	e002      	b.n	1133a <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x26a>
                }
                else{
                    state = CO_SDO_ST_UPLOAD_INITIATE;
   11334:	2321      	movs	r3, #33	; 0x21
   11336:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            }
        }
    }

    /* verify SDO timeout */
    if(SDO->timeoutTimer < SDOtimeoutTime){
   1133a:	68fb      	ldr	r3, [r7, #12]
   1133c:	681b      	ldr	r3, [r3, #0]
   1133e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
   11340:	683b      	ldr	r3, [r7, #0]
   11342:	429a      	cmp	r2, r3
   11344:	d207      	bcs.n	11356 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x286>
        SDO->timeoutTimer += timeDifference_ms;
   11346:	68fb      	ldr	r3, [r7, #12]
   11348:	681b      	ldr	r3, [r3, #0]
   1134a:	68fa      	ldr	r2, [r7, #12]
   1134c:	6812      	ldr	r2, [r2, #0]
   1134e:	6ed1      	ldr	r1, [r2, #108]	; 0x6c
   11350:	687a      	ldr	r2, [r7, #4]
   11352:	440a      	add	r2, r1
   11354:	66da      	str	r2, [r3, #108]	; 0x6c
    }
    if(SDO->timeoutTimer >= SDOtimeoutTime){
   11356:	68fb      	ldr	r3, [r7, #12]
   11358:	681b      	ldr	r3, [r3, #0]
   1135a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
   1135c:	683b      	ldr	r3, [r7, #0]
   1135e:	429a      	cmp	r2, r3
   11360:	d329      	bcc.n	113b6 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x2e6>
        if((SDO->state == CO_SDO_ST_DOWNLOAD_BL_SUBBLOCK) && (SDO->sequence != 0) && (!SDO->CANtxBuff->bufferFull)){
   11362:	68fb      	ldr	r3, [r7, #12]
   11364:	681b      	ldr	r3, [r3, #0]
   11366:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
   1136a:	2b15      	cmp	r3, #21
   1136c:	d10f      	bne.n	1138e <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x2be>
   1136e:	68fb      	ldr	r3, [r7, #12]
   11370:	681b      	ldr	r3, [r3, #0]
   11372:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
   11376:	2b00      	cmp	r3, #0
   11378:	d009      	beq.n	1138e <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x2be>
   1137a:	68fb      	ldr	r3, [r7, #12]
   1137c:	681b      	ldr	r3, [r3, #0]
   1137e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   11382:	7b5b      	ldrb	r3, [r3, #13]
   11384:	b2db      	uxtb	r3, r3
   11386:	2b00      	cmp	r3, #0
   11388:	d101      	bne.n	1138e <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x2be>
   1138a:	2301      	movs	r3, #1
   1138c:	e000      	b.n	11390 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x2c0>
   1138e:	2300      	movs	r3, #0
   11390:	2b00      	cmp	r3, #0
   11392:	d006      	beq.n	113a2 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x2d2>
            timeoutSubblockDownolad = true;
   11394:	2301      	movs	r3, #1
   11396:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
            state = CO_SDO_ST_DOWNLOAD_BL_SUB_RESP;
   1139a:	2316      	movs	r3, #22
   1139c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
   113a0:	e009      	b.n	113b6 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x2e6>
        }
        else{
            CO_SDO_abort(SDO, CO_SDO_AB_TIMEOUT); /* SDO protocol timed out */
   113a2:	68fb      	ldr	r3, [r7, #12]
   113a4:	681b      	ldr	r3, [r3, #0]
   113a6:	4943      	ldr	r1, [pc, #268]	; (114b4 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x3e4>)
   113a8:	4618      	mov	r0, r3
   113aa:	4b3e      	ldr	r3, [pc, #248]	; (114a4 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x3d4>)
   113ac:	4798      	blx	r3
            return -1;
   113ae:	f04f 33ff 	mov.w	r3, #4294967295
   113b2:	f001 b823 	b.w	123fc <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x132c>
        }
    }

    /* return immediately if still idle */
    if(state == CO_SDO_ST_IDLE){
   113b6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
   113ba:	2b00      	cmp	r3, #0
   113bc:	d102      	bne.n	113c4 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x2f4>
        return 0;
   113be:	2300      	movs	r3, #0
   113c0:	f001 b81c 	b.w	123fc <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x132c>
    }

    /* state machine (buffer is freed (SDO->CANrxNew = 0;) at the end) */
    switch(state){
   113c4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
   113c8:	3b11      	subs	r3, #17
   113ca:	2b16      	cmp	r3, #22
   113cc:	f200 87f0 	bhi.w	123b0 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x12e0>
   113d0:	a201      	add	r2, pc, #4	; (adr r2, 113d8 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x308>)
   113d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   113d6:	bf00      	nop
   113d8:	00011435 	.word	0x00011435
   113dc:	000115af 	.word	0x000115af
   113e0:	000123b1 	.word	0x000123b1
   113e4:	0001174f 	.word	0x0001174f
   113e8:	000123c3 	.word	0x000123c3
   113ec:	00011881 	.word	0x00011881
   113f0:	000119e1 	.word	0x000119e1
   113f4:	000123b1 	.word	0x000123b1
   113f8:	000123b1 	.word	0x000123b1
   113fc:	000123b1 	.word	0x000123b1
   11400:	000123b1 	.word	0x000123b1
   11404:	000123b1 	.word	0x000123b1
   11408:	000123b1 	.word	0x000123b1
   1140c:	000123b1 	.word	0x000123b1
   11410:	000123b1 	.word	0x000123b1
   11414:	000123b1 	.word	0x000123b1
   11418:	00011afd 	.word	0x00011afd
   1141c:	00011c09 	.word	0x00011c09
   11420:	000123b1 	.word	0x000123b1
   11424:	00011e41 	.word	0x00011e41
   11428:	00011f8d 	.word	0x00011f8d
   1142c:	00011fdd 	.word	0x00011fdd
   11430:	00012385 	.word	0x00012385
        uint32_t len, i;
        bool_t lastSegmentInSubblock;

        case CO_SDO_ST_DOWNLOAD_INITIATE:{
            /* default response */
            SDO->CANtxBuff->data[0] = 0x60;
   11434:	68fb      	ldr	r3, [r7, #12]
   11436:	681b      	ldr	r3, [r3, #0]
   11438:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   1143c:	2260      	movs	r2, #96	; 0x60
   1143e:	715a      	strb	r2, [r3, #5]
            SDO->CANtxBuff->data[1] = SDO->CANrxData[1];
   11440:	68fb      	ldr	r3, [r7, #12]
   11442:	681b      	ldr	r3, [r3, #0]
   11444:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   11448:	68fa      	ldr	r2, [r7, #12]
   1144a:	6812      	ldr	r2, [r2, #0]
   1144c:	7852      	ldrb	r2, [r2, #1]
   1144e:	719a      	strb	r2, [r3, #6]
            SDO->CANtxBuff->data[2] = SDO->CANrxData[2];
   11450:	68fb      	ldr	r3, [r7, #12]
   11452:	681b      	ldr	r3, [r3, #0]
   11454:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   11458:	68fa      	ldr	r2, [r7, #12]
   1145a:	6812      	ldr	r2, [r2, #0]
   1145c:	7892      	ldrb	r2, [r2, #2]
   1145e:	71da      	strb	r2, [r3, #7]
            SDO->CANtxBuff->data[3] = SDO->CANrxData[3];
   11460:	68fb      	ldr	r3, [r7, #12]
   11462:	681b      	ldr	r3, [r3, #0]
   11464:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   11468:	68fa      	ldr	r2, [r7, #12]
   1146a:	6812      	ldr	r2, [r2, #0]
   1146c:	78d2      	ldrb	r2, [r2, #3]
   1146e:	721a      	strb	r2, [r3, #8]

            /* Expedited transfer */
            if((SDO->CANrxData[0] & 0x02U) != 0U){
   11470:	68fb      	ldr	r3, [r7, #12]
   11472:	681b      	ldr	r3, [r3, #0]
   11474:	781b      	ldrb	r3, [r3, #0]
   11476:	f003 0302 	and.w	r3, r3, #2
   1147a:	2b00      	cmp	r3, #0
   1147c:	d05b      	beq.n	11536 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x466>
                /* is size indicated? Get message length */
                if((SDO->CANrxData[0] & 0x01U) != 0U){
   1147e:	68fb      	ldr	r3, [r7, #12]
   11480:	681b      	ldr	r3, [r3, #0]
   11482:	781b      	ldrb	r3, [r3, #0]
   11484:	f003 0301 	and.w	r3, r3, #1
   11488:	2b00      	cmp	r3, #0
   1148a:	d015      	beq.n	114b8 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x3e8>
                    len = 4U - ((SDO->CANrxData[0] >> 2U) & 0x03U);
   1148c:	68fb      	ldr	r3, [r7, #12]
   1148e:	681b      	ldr	r3, [r3, #0]
   11490:	781b      	ldrb	r3, [r3, #0]
   11492:	109b      	asrs	r3, r3, #2
   11494:	f003 0303 	and.w	r3, r3, #3
   11498:	f1c3 0304 	rsb	r3, r3, #4
   1149c:	643b      	str	r3, [r7, #64]	; 0x40
   1149e:	e00f      	b.n	114c0 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x3f0>
   114a0:	05040001 	.word	0x05040001
   114a4:	00011045 	.word	0x00011045
   114a8:	00010c61 	.word	0x00010c61
   114ac:	06010002 	.word	0x06010002
   114b0:	00010df1 	.word	0x00010df1
   114b4:	05040000 	.word	0x05040000
                }
                else{
                    len = SDO->ODF_arg.dataLength;
   114b8:	68fb      	ldr	r3, [r7, #12]
   114ba:	681b      	ldr	r3, [r3, #0]
   114bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   114be:	643b      	str	r3, [r7, #64]	; 0x40
                }

                /* copy data to SDO buffer */
                SDO->ODF_arg.data[0] = SDO->CANrxData[4];
   114c0:	68fb      	ldr	r3, [r7, #12]
   114c2:	681b      	ldr	r3, [r3, #0]
   114c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   114c6:	68fa      	ldr	r2, [r7, #12]
   114c8:	6812      	ldr	r2, [r2, #0]
   114ca:	7912      	ldrb	r2, [r2, #4]
   114cc:	701a      	strb	r2, [r3, #0]
                SDO->ODF_arg.data[1] = SDO->CANrxData[5];
   114ce:	68fb      	ldr	r3, [r7, #12]
   114d0:	681b      	ldr	r3, [r3, #0]
   114d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   114d4:	3301      	adds	r3, #1
   114d6:	68fa      	ldr	r2, [r7, #12]
   114d8:	6812      	ldr	r2, [r2, #0]
   114da:	7952      	ldrb	r2, [r2, #5]
   114dc:	701a      	strb	r2, [r3, #0]
                SDO->ODF_arg.data[2] = SDO->CANrxData[6];
   114de:	68fb      	ldr	r3, [r7, #12]
   114e0:	681b      	ldr	r3, [r3, #0]
   114e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   114e4:	3302      	adds	r3, #2
   114e6:	68fa      	ldr	r2, [r7, #12]
   114e8:	6812      	ldr	r2, [r2, #0]
   114ea:	7992      	ldrb	r2, [r2, #6]
   114ec:	701a      	strb	r2, [r3, #0]
                SDO->ODF_arg.data[3] = SDO->CANrxData[7];
   114ee:	68fb      	ldr	r3, [r7, #12]
   114f0:	681b      	ldr	r3, [r3, #0]
   114f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   114f4:	3303      	adds	r3, #3
   114f6:	68fa      	ldr	r2, [r7, #12]
   114f8:	6812      	ldr	r2, [r2, #0]
   114fa:	79d2      	ldrb	r2, [r2, #7]
   114fc:	701a      	strb	r2, [r3, #0]

                /* write data to the Object dictionary */
                abortCode = CO_SDO_writeOD( len);
   114fe:	6c39      	ldr	r1, [r7, #64]	; 0x40
   11500:	68f8      	ldr	r0, [r7, #12]
   11502:	4b9b      	ldr	r3, [pc, #620]	; (11770 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x6a0>)
   11504:	4798      	blx	r3
   11506:	62b8      	str	r0, [r7, #40]	; 0x28
                if(abortCode != 0U){
   11508:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1150a:	2b00      	cmp	r3, #0
   1150c:	d009      	beq.n	11522 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x452>
                    CO_SDO_abort(SDO, abortCode);
   1150e:	68fb      	ldr	r3, [r7, #12]
   11510:	681b      	ldr	r3, [r3, #0]
   11512:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   11514:	4618      	mov	r0, r3
   11516:	4b97      	ldr	r3, [pc, #604]	; (11774 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x6a4>)
   11518:	4798      	blx	r3
                    return -1;
   1151a:	f04f 33ff 	mov.w	r3, #4294967295
   1151e:	f000 bf6d 	b.w	123fc <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x132c>
                }

                /* finish the communication */
                SDO->state = CO_SDO_ST_IDLE;
   11522:	68fb      	ldr	r3, [r7, #12]
   11524:	681b      	ldr	r3, [r3, #0]
   11526:	2200      	movs	r2, #0
   11528:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
                sendResponse = true;
   1152c:	2301      	movs	r3, #1
   1152e:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
                SDO->bufferOffset = 0;
                SDO->sequence = 0;
                SDO->state = CO_SDO_ST_DOWNLOAD_SEGMENTED;
                sendResponse = true;
            }
            break;
   11532:	f000 bf47 	b.w	123c4 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x12f4>
                if((SDO->CANrxData[0]&0x01) != 0){
   11536:	68fb      	ldr	r3, [r7, #12]
   11538:	681b      	ldr	r3, [r3, #0]
   1153a:	781b      	ldrb	r3, [r3, #0]
   1153c:	f003 0301 	and.w	r3, r3, #1
   11540:	2b00      	cmp	r3, #0
   11542:	d021      	beq.n	11588 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x4b8>
                    CO_memcpySwap4(&lenRx, &SDO->CANrxData[4]);
   11544:	68fb      	ldr	r3, [r7, #12]
   11546:	681b      	ldr	r3, [r3, #0]
   11548:	1d1a      	adds	r2, r3, #4
   1154a:	f107 0320 	add.w	r3, r7, #32
   1154e:	4619      	mov	r1, r3
   11550:	68f8      	ldr	r0, [r7, #12]
   11552:	4b89      	ldr	r3, [pc, #548]	; (11778 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x6a8>)
   11554:	4798      	blx	r3
                    SDO->ODF_arg.dataLengthTotal = lenRx;
   11556:	68fb      	ldr	r3, [r7, #12]
   11558:	681b      	ldr	r3, [r3, #0]
   1155a:	6a3a      	ldr	r2, [r7, #32]
   1155c:	661a      	str	r2, [r3, #96]	; 0x60
                    if((lenRx != SDO->ODF_arg.dataLength) && (SDO->ODF_arg.ODdataStorage != 0)){
   1155e:	68fb      	ldr	r3, [r7, #12]
   11560:	681b      	ldr	r3, [r3, #0]
   11562:	6cda      	ldr	r2, [r3, #76]	; 0x4c
   11564:	6a3b      	ldr	r3, [r7, #32]
   11566:	429a      	cmp	r2, r3
   11568:	d00e      	beq.n	11588 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x4b8>
   1156a:	68fb      	ldr	r3, [r7, #12]
   1156c:	681b      	ldr	r3, [r3, #0]
   1156e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   11570:	2b00      	cmp	r3, #0
   11572:	d009      	beq.n	11588 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x4b8>
                        CO_SDO_abort(SDO, CO_SDO_AB_TYPE_MISMATCH);  /* Length of service parameter does not match */
   11574:	68fb      	ldr	r3, [r7, #12]
   11576:	681b      	ldr	r3, [r3, #0]
   11578:	4980      	ldr	r1, [pc, #512]	; (1177c <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x6ac>)
   1157a:	4618      	mov	r0, r3
   1157c:	4b7d      	ldr	r3, [pc, #500]	; (11774 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x6a4>)
   1157e:	4798      	blx	r3
                        return -1;
   11580:	f04f 33ff 	mov.w	r3, #4294967295
   11584:	f000 bf3a 	b.w	123fc <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x132c>
                SDO->bufferOffset = 0;
   11588:	68fb      	ldr	r3, [r7, #12]
   1158a:	681b      	ldr	r3, [r3, #0]
   1158c:	2200      	movs	r2, #0
   1158e:	639a      	str	r2, [r3, #56]	; 0x38
                SDO->sequence = 0;
   11590:	68fb      	ldr	r3, [r7, #12]
   11592:	681b      	ldr	r3, [r3, #0]
   11594:	2200      	movs	r2, #0
   11596:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
                SDO->state = CO_SDO_ST_DOWNLOAD_SEGMENTED;
   1159a:	68fb      	ldr	r3, [r7, #12]
   1159c:	681b      	ldr	r3, [r3, #0]
   1159e:	2212      	movs	r2, #18
   115a0:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
                sendResponse = true;
   115a4:	2301      	movs	r3, #1
   115a6:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
            break;
   115aa:	f000 bf0b 	b.w	123c4 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x12f4>
        }

        case CO_SDO_ST_DOWNLOAD_SEGMENTED:{
            /* verify client command specifier */
            if((SDO->CANrxData[0]&0xE0) != 0x00U){
   115ae:	68fb      	ldr	r3, [r7, #12]
   115b0:	681b      	ldr	r3, [r3, #0]
   115b2:	781b      	ldrb	r3, [r3, #0]
   115b4:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
   115b8:	2b00      	cmp	r3, #0
   115ba:	d009      	beq.n	115d0 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x500>
                CO_SDO_abort(SDO, CO_SDO_AB_CMD);/* Client command specifier not valid or unknown. */
   115bc:	68fb      	ldr	r3, [r7, #12]
   115be:	681b      	ldr	r3, [r3, #0]
   115c0:	496f      	ldr	r1, [pc, #444]	; (11780 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x6b0>)
   115c2:	4618      	mov	r0, r3
   115c4:	4b6b      	ldr	r3, [pc, #428]	; (11774 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x6a4>)
   115c6:	4798      	blx	r3
                return -1;
   115c8:	f04f 33ff 	mov.w	r3, #4294967295
   115cc:	f000 bf16 	b.w	123fc <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x132c>
            }

            /* verify toggle bit */
            i = (SDO->CANrxData[0]&0x10U) ? 1U : 0U;
   115d0:	68fb      	ldr	r3, [r7, #12]
   115d2:	681b      	ldr	r3, [r3, #0]
   115d4:	781b      	ldrb	r3, [r3, #0]
   115d6:	f003 0310 	and.w	r3, r3, #16
   115da:	2b00      	cmp	r3, #0
   115dc:	d001      	beq.n	115e2 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x512>
   115de:	2301      	movs	r3, #1
   115e0:	e000      	b.n	115e4 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x514>
   115e2:	2300      	movs	r3, #0
   115e4:	63fb      	str	r3, [r7, #60]	; 0x3c
            if(i != SDO->sequence){
   115e6:	68fb      	ldr	r3, [r7, #12]
   115e8:	681b      	ldr	r3, [r3, #0]
   115ea:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
   115ee:	461a      	mov	r2, r3
   115f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   115f2:	429a      	cmp	r2, r3
   115f4:	d009      	beq.n	1160a <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x53a>
                CO_SDO_abort(SDO, CO_SDO_AB_TOGGLE_BIT);/* toggle bit not alternated */
   115f6:	68fb      	ldr	r3, [r7, #12]
   115f8:	681b      	ldr	r3, [r3, #0]
   115fa:	4962      	ldr	r1, [pc, #392]	; (11784 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x6b4>)
   115fc:	4618      	mov	r0, r3
   115fe:	4b5d      	ldr	r3, [pc, #372]	; (11774 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x6a4>)
   11600:	4798      	blx	r3
                return -1;
   11602:	f04f 33ff 	mov.w	r3, #4294967295
   11606:	f000 bef9 	b.w	123fc <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x132c>
            }

            /* get size of data in message */
            len = 7U - ((SDO->CANrxData[0] >> 1U) & 0x07U);
   1160a:	68fb      	ldr	r3, [r7, #12]
   1160c:	681b      	ldr	r3, [r3, #0]
   1160e:	781b      	ldrb	r3, [r3, #0]
   11610:	105b      	asrs	r3, r3, #1
   11612:	43db      	mvns	r3, r3
   11614:	f003 0307 	and.w	r3, r3, #7
   11618:	643b      	str	r3, [r7, #64]	; 0x40

            /* verify length. Domain data type enables length larger than SDO buffer size */
            if((SDO->bufferOffset + len) > SDO->ODF_arg.dataLength){
   1161a:	68fb      	ldr	r3, [r7, #12]
   1161c:	681b      	ldr	r3, [r3, #0]
   1161e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   11620:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   11622:	441a      	add	r2, r3
   11624:	68fb      	ldr	r3, [r7, #12]
   11626:	681b      	ldr	r3, [r3, #0]
   11628:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   1162a:	429a      	cmp	r2, r3
   1162c:	d930      	bls.n	11690 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x5c0>
                if(SDO->ODF_arg.ODdataStorage != 0){
   1162e:	68fb      	ldr	r3, [r7, #12]
   11630:	681b      	ldr	r3, [r3, #0]
   11632:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   11634:	2b00      	cmp	r3, #0
   11636:	d009      	beq.n	1164c <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x57c>
                    CO_SDO_abort(SDO, CO_SDO_AB_DATA_LONG);  /* Length of service parameter too high */
   11638:	68fb      	ldr	r3, [r7, #12]
   1163a:	681b      	ldr	r3, [r3, #0]
   1163c:	4952      	ldr	r1, [pc, #328]	; (11788 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x6b8>)
   1163e:	4618      	mov	r0, r3
   11640:	4b4c      	ldr	r3, [pc, #304]	; (11774 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x6a4>)
   11642:	4798      	blx	r3
                    return -1;
   11644:	f04f 33ff 	mov.w	r3, #4294967295
   11648:	f000 bed8 	b.w	123fc <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x132c>
                }
                else{
                    /* empty buffer in domain data type */
                    SDO->ODF_arg.lastSegment = false;
   1164c:	68fb      	ldr	r3, [r7, #12]
   1164e:	681b      	ldr	r3, [r3, #0]
   11650:	2200      	movs	r2, #0
   11652:	f883 205f 	strb.w	r2, [r3, #95]	; 0x5f
                    abortCode = CO_SDO_writeOD( SDO->bufferOffset);
   11656:	68fb      	ldr	r3, [r7, #12]
   11658:	681b      	ldr	r3, [r3, #0]
   1165a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1165c:	4619      	mov	r1, r3
   1165e:	68f8      	ldr	r0, [r7, #12]
   11660:	4b43      	ldr	r3, [pc, #268]	; (11770 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x6a0>)
   11662:	4798      	blx	r3
   11664:	62b8      	str	r0, [r7, #40]	; 0x28
                    if(abortCode != 0U){
   11666:	6abb      	ldr	r3, [r7, #40]	; 0x28
   11668:	2b00      	cmp	r3, #0
   1166a:	d009      	beq.n	11680 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x5b0>
                        CO_SDO_abort(SDO, abortCode);
   1166c:	68fb      	ldr	r3, [r7, #12]
   1166e:	681b      	ldr	r3, [r3, #0]
   11670:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   11672:	4618      	mov	r0, r3
   11674:	4b3f      	ldr	r3, [pc, #252]	; (11774 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x6a4>)
   11676:	4798      	blx	r3
                        return -1;
   11678:	f04f 33ff 	mov.w	r3, #4294967295
   1167c:	f000 bebe 	b.w	123fc <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x132c>
                    }

                    SDO->ODF_arg.dataLength = CO_SDO_BUFFER_SIZE;
   11680:	68fb      	ldr	r3, [r7, #12]
   11682:	681b      	ldr	r3, [r3, #0]
   11684:	2220      	movs	r2, #32
   11686:	64da      	str	r2, [r3, #76]	; 0x4c
                    SDO->bufferOffset = 0;
   11688:	68fb      	ldr	r3, [r7, #12]
   1168a:	681b      	ldr	r3, [r3, #0]
   1168c:	2200      	movs	r2, #0
   1168e:	639a      	str	r2, [r3, #56]	; 0x38
                }
            }

            /* copy data to buffer */
            for(i=0U; i<len; i++)
   11690:	2300      	movs	r3, #0
   11692:	63fb      	str	r3, [r7, #60]	; 0x3c
   11694:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   11696:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   11698:	429a      	cmp	r2, r3
   1169a:	d212      	bcs.n	116c2 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x5f2>
                SDO->ODF_arg.data[SDO->bufferOffset++] = SDO->CANrxData[i+1];
   1169c:	68fb      	ldr	r3, [r7, #12]
   1169e:	681b      	ldr	r3, [r3, #0]
   116a0:	6c59      	ldr	r1, [r3, #68]	; 0x44
   116a2:	68fb      	ldr	r3, [r7, #12]
   116a4:	681a      	ldr	r2, [r3, #0]
   116a6:	6b93      	ldr	r3, [r2, #56]	; 0x38
   116a8:	1c58      	adds	r0, r3, #1
   116aa:	6390      	str	r0, [r2, #56]	; 0x38
   116ac:	440b      	add	r3, r1
   116ae:	68fa      	ldr	r2, [r7, #12]
   116b0:	6811      	ldr	r1, [r2, #0]
   116b2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   116b4:	3201      	adds	r2, #1
   116b6:	5c8a      	ldrb	r2, [r1, r2]
   116b8:	701a      	strb	r2, [r3, #0]
            for(i=0U; i<len; i++)
   116ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   116bc:	3301      	adds	r3, #1
   116be:	63fb      	str	r3, [r7, #60]	; 0x3c
   116c0:	e7e8      	b.n	11694 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x5c4>

            /* If no more segments to be downloaded, write data to the Object dictionary */
            if((SDO->CANrxData[0] & 0x01U) != 0U){
   116c2:	68fb      	ldr	r3, [r7, #12]
   116c4:	681b      	ldr	r3, [r3, #0]
   116c6:	781b      	ldrb	r3, [r3, #0]
   116c8:	f003 0301 	and.w	r3, r3, #1
   116cc:	2b00      	cmp	r3, #0
   116ce:	d01e      	beq.n	1170e <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x63e>
                SDO->ODF_arg.lastSegment = true;
   116d0:	68fb      	ldr	r3, [r7, #12]
   116d2:	681b      	ldr	r3, [r3, #0]
   116d4:	2201      	movs	r2, #1
   116d6:	f883 205f 	strb.w	r2, [r3, #95]	; 0x5f
                abortCode = CO_SDO_writeOD( SDO->bufferOffset);
   116da:	68fb      	ldr	r3, [r7, #12]
   116dc:	681b      	ldr	r3, [r3, #0]
   116de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   116e0:	4619      	mov	r1, r3
   116e2:	68f8      	ldr	r0, [r7, #12]
   116e4:	4b22      	ldr	r3, [pc, #136]	; (11770 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x6a0>)
   116e6:	4798      	blx	r3
   116e8:	62b8      	str	r0, [r7, #40]	; 0x28
                if(abortCode != 0U){
   116ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
   116ec:	2b00      	cmp	r3, #0
   116ee:	d009      	beq.n	11704 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x634>
                    CO_SDO_abort(SDO, abortCode);
   116f0:	68fb      	ldr	r3, [r7, #12]
   116f2:	681b      	ldr	r3, [r3, #0]
   116f4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   116f6:	4618      	mov	r0, r3
   116f8:	4b1e      	ldr	r3, [pc, #120]	; (11774 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x6a4>)
   116fa:	4798      	blx	r3
                    return -1;
   116fc:	f04f 33ff 	mov.w	r3, #4294967295
   11700:	f000 be7c 	b.w	123fc <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x132c>
                }

                /* finish */
                SDO->state = CO_SDO_ST_IDLE;
   11704:	68fb      	ldr	r3, [r7, #12]
   11706:	681b      	ldr	r3, [r3, #0]
   11708:	2200      	movs	r2, #0
   1170a:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
            }

            /* download segment response and alternate toggle bit */
            SDO->CANtxBuff->data[0] = 0x20 | (SDO->sequence ? 0x10 : 0x00);
   1170e:	68fb      	ldr	r3, [r7, #12]
   11710:	681b      	ldr	r3, [r3, #0]
   11712:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   11716:	68fa      	ldr	r2, [r7, #12]
   11718:	6812      	ldr	r2, [r2, #0]
   1171a:	f892 206a 	ldrb.w	r2, [r2, #106]	; 0x6a
   1171e:	2a00      	cmp	r2, #0
   11720:	d001      	beq.n	11726 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x656>
   11722:	2230      	movs	r2, #48	; 0x30
   11724:	e000      	b.n	11728 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x658>
   11726:	2220      	movs	r2, #32
   11728:	715a      	strb	r2, [r3, #5]
            SDO->sequence = (SDO->sequence) ? 0 : 1;
   1172a:	68fb      	ldr	r3, [r7, #12]
   1172c:	681b      	ldr	r3, [r3, #0]
   1172e:	68fa      	ldr	r2, [r7, #12]
   11730:	6812      	ldr	r2, [r2, #0]
   11732:	f892 206a 	ldrb.w	r2, [r2, #106]	; 0x6a
   11736:	2a00      	cmp	r2, #0
   11738:	bf0c      	ite	eq
   1173a:	2201      	moveq	r2, #1
   1173c:	2200      	movne	r2, #0
   1173e:	b2d2      	uxtb	r2, r2
   11740:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
            sendResponse = true;
   11744:	2301      	movs	r3, #1
   11746:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
            break;
   1174a:	f000 be3b 	b.w	123c4 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x12f4>
        }

        case CO_SDO_ST_DOWNLOAD_BL_INITIATE:{
            /* verify client command specifier and subcommand */
            if((SDO->CANrxData[0]&0xE1U) != 0xC0U){
   1174e:	68fb      	ldr	r3, [r7, #12]
   11750:	681b      	ldr	r3, [r3, #0]
   11752:	781b      	ldrb	r3, [r3, #0]
   11754:	f003 03e1 	and.w	r3, r3, #225	; 0xe1
   11758:	2bc0      	cmp	r3, #192	; 0xc0
   1175a:	d017      	beq.n	1178c <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x6bc>
                CO_SDO_abort(SDO, CO_SDO_AB_CMD);/* Client command specifier not valid or unknown. */
   1175c:	68fb      	ldr	r3, [r7, #12]
   1175e:	681b      	ldr	r3, [r3, #0]
   11760:	4907      	ldr	r1, [pc, #28]	; (11780 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x6b0>)
   11762:	4618      	mov	r0, r3
   11764:	4b03      	ldr	r3, [pc, #12]	; (11774 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x6a4>)
   11766:	4798      	blx	r3
                return -1;
   11768:	f04f 33ff 	mov.w	r3, #4294967295
   1176c:	f000 be46 	b.w	123fc <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x132c>
   11770:	00010f11 	.word	0x00010f11
   11774:	00011045 	.word	0x00011045
   11778:	00010521 	.word	0x00010521
   1177c:	06070010 	.word	0x06070010
   11780:	05040001 	.word	0x05040001
   11784:	05030000 	.word	0x05030000
   11788:	06070012 	.word	0x06070012
            }

            /* prepare response */
            SDO->CANtxBuff->data[0] = 0xA4;
   1178c:	68fb      	ldr	r3, [r7, #12]
   1178e:	681b      	ldr	r3, [r3, #0]
   11790:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   11794:	22a4      	movs	r2, #164	; 0xa4
   11796:	715a      	strb	r2, [r3, #5]
            SDO->CANtxBuff->data[1] = SDO->CANrxData[1];
   11798:	68fb      	ldr	r3, [r7, #12]
   1179a:	681b      	ldr	r3, [r3, #0]
   1179c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   117a0:	68fa      	ldr	r2, [r7, #12]
   117a2:	6812      	ldr	r2, [r2, #0]
   117a4:	7852      	ldrb	r2, [r2, #1]
   117a6:	719a      	strb	r2, [r3, #6]
            SDO->CANtxBuff->data[2] = SDO->CANrxData[2];
   117a8:	68fb      	ldr	r3, [r7, #12]
   117aa:	681b      	ldr	r3, [r3, #0]
   117ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   117b0:	68fa      	ldr	r2, [r7, #12]
   117b2:	6812      	ldr	r2, [r2, #0]
   117b4:	7892      	ldrb	r2, [r2, #2]
   117b6:	71da      	strb	r2, [r3, #7]
            SDO->CANtxBuff->data[3] = SDO->CANrxData[3];
   117b8:	68fb      	ldr	r3, [r7, #12]
   117ba:	681b      	ldr	r3, [r3, #0]
   117bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   117c0:	68fa      	ldr	r2, [r7, #12]
   117c2:	6812      	ldr	r2, [r2, #0]
   117c4:	78d2      	ldrb	r2, [r2, #3]
   117c6:	721a      	strb	r2, [r3, #8]

            /* blksize */
            SDO->blksize = (CO_SDO_BUFFER_SIZE > (7*127)) ? 127 : (CO_SDO_BUFFER_SIZE / 7);
   117c8:	68fb      	ldr	r3, [r7, #12]
   117ca:	681b      	ldr	r3, [r3, #0]
   117cc:	2204      	movs	r2, #4
   117ce:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
            SDO->CANtxBuff->data[4] = SDO->blksize;
   117d2:	68fb      	ldr	r3, [r7, #12]
   117d4:	681b      	ldr	r3, [r3, #0]
   117d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   117da:	68fa      	ldr	r2, [r7, #12]
   117dc:	6812      	ldr	r2, [r2, #0]
   117de:	f892 2070 	ldrb.w	r2, [r2, #112]	; 0x70
   117e2:	725a      	strb	r2, [r3, #9]

            /* is CRC enabled */
            SDO->crcEnabled = (SDO->CANrxData[0] & 0x04) ? true : false;
   117e4:	68fb      	ldr	r3, [r7, #12]
   117e6:	681b      	ldr	r3, [r3, #0]
   117e8:	68fa      	ldr	r2, [r7, #12]
   117ea:	6812      	ldr	r2, [r2, #0]
   117ec:	7812      	ldrb	r2, [r2, #0]
   117ee:	f002 0204 	and.w	r2, r2, #4
   117f2:	2a00      	cmp	r2, #0
   117f4:	bf14      	ite	ne
   117f6:	2201      	movne	r2, #1
   117f8:	2200      	moveq	r2, #0
   117fa:	b2d2      	uxtb	r2, r2
   117fc:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
            SDO->crc = 0;
   11800:	68fb      	ldr	r3, [r7, #12]
   11802:	681b      	ldr	r3, [r3, #0]
   11804:	2200      	movs	r2, #0
   11806:	675a      	str	r2, [r3, #116]	; 0x74

            /* verify length if size is indicated */
            if((SDO->CANrxData[0]&0x02) != 0U){
   11808:	68fb      	ldr	r3, [r7, #12]
   1180a:	681b      	ldr	r3, [r3, #0]
   1180c:	781b      	ldrb	r3, [r3, #0]
   1180e:	f003 0302 	and.w	r3, r3, #2
   11812:	2b00      	cmp	r3, #0
   11814:	d021      	beq.n	1185a <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x78a>
                uint32_t lenRx;
                CO_memcpySwap4(&lenRx, &SDO->CANrxData[4]);
   11816:	68fb      	ldr	r3, [r7, #12]
   11818:	681b      	ldr	r3, [r3, #0]
   1181a:	1d1a      	adds	r2, r3, #4
   1181c:	f107 031c 	add.w	r3, r7, #28
   11820:	4619      	mov	r1, r3
   11822:	68f8      	ldr	r0, [r7, #12]
   11824:	4b96      	ldr	r3, [pc, #600]	; (11a80 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x9b0>)
   11826:	4798      	blx	r3
                SDO->ODF_arg.dataLengthTotal = lenRx;
   11828:	68fb      	ldr	r3, [r7, #12]
   1182a:	681b      	ldr	r3, [r3, #0]
   1182c:	69fa      	ldr	r2, [r7, #28]
   1182e:	661a      	str	r2, [r3, #96]	; 0x60

                /* verify length except for domain data type */
                if((lenRx != SDO->ODF_arg.dataLength) && (SDO->ODF_arg.ODdataStorage != 0)){
   11830:	68fb      	ldr	r3, [r7, #12]
   11832:	681b      	ldr	r3, [r3, #0]
   11834:	6cda      	ldr	r2, [r3, #76]	; 0x4c
   11836:	69fb      	ldr	r3, [r7, #28]
   11838:	429a      	cmp	r2, r3
   1183a:	d00e      	beq.n	1185a <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x78a>
   1183c:	68fb      	ldr	r3, [r7, #12]
   1183e:	681b      	ldr	r3, [r3, #0]
   11840:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   11842:	2b00      	cmp	r3, #0
   11844:	d009      	beq.n	1185a <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x78a>
                    CO_SDO_abort(SDO, CO_SDO_AB_TYPE_MISMATCH);  /* Length of service parameter does not match */
   11846:	68fb      	ldr	r3, [r7, #12]
   11848:	681b      	ldr	r3, [r3, #0]
   1184a:	498e      	ldr	r1, [pc, #568]	; (11a84 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x9b4>)
   1184c:	4618      	mov	r0, r3
   1184e:	4b8e      	ldr	r3, [pc, #568]	; (11a88 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x9b8>)
   11850:	4798      	blx	r3
                    return -1;
   11852:	f04f 33ff 	mov.w	r3, #4294967295
   11856:	f000 bdd1 	b.w	123fc <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x132c>
                }
            }

            SDO->bufferOffset = 0;
   1185a:	68fb      	ldr	r3, [r7, #12]
   1185c:	681b      	ldr	r3, [r3, #0]
   1185e:	2200      	movs	r2, #0
   11860:	639a      	str	r2, [r3, #56]	; 0x38
            SDO->sequence = 0;
   11862:	68fb      	ldr	r3, [r7, #12]
   11864:	681b      	ldr	r3, [r3, #0]
   11866:	2200      	movs	r2, #0
   11868:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
            SDO->state = CO_SDO_ST_DOWNLOAD_BL_SUBBLOCK;
   1186c:	68fb      	ldr	r3, [r7, #12]
   1186e:	681b      	ldr	r3, [r3, #0]
   11870:	2215      	movs	r2, #21
   11872:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69

            /* send response */
            sendResponse = true;
   11876:	2301      	movs	r3, #1
   11878:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
            break;
   1187c:	f000 bda2 	b.w	123c4 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x12f4>
        }

        case CO_SDO_ST_DOWNLOAD_BL_SUB_RESP:{
            /* no new message received, SDO timeout occured, try to response */
            lastSegmentInSubblock = (!timeoutSubblockDownolad &&
                        ((SDO->CANrxData[0] & 0x80U) == 0x80U)) ? true : false;
   11880:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
   11884:	2b00      	cmp	r3, #0
   11886:	d107      	bne.n	11898 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x7c8>
   11888:	68fb      	ldr	r3, [r7, #12]
   1188a:	681b      	ldr	r3, [r3, #0]
   1188c:	781b      	ldrb	r3, [r3, #0]
   1188e:	b25b      	sxtb	r3, r3
   11890:	2b00      	cmp	r3, #0
   11892:	da01      	bge.n	11898 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x7c8>
   11894:	2301      	movs	r3, #1
   11896:	e000      	b.n	1189a <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x7ca>
   11898:	2300      	movs	r3, #0
            lastSegmentInSubblock = (!timeoutSubblockDownolad &&
   1189a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

            /* prepare response */
            SDO->CANtxBuff->data[0] = 0xA2;
   1189e:	68fb      	ldr	r3, [r7, #12]
   118a0:	681b      	ldr	r3, [r3, #0]
   118a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   118a6:	22a2      	movs	r2, #162	; 0xa2
   118a8:	715a      	strb	r2, [r3, #5]
            SDO->CANtxBuff->data[1] = SDO->sequence;
   118aa:	68fb      	ldr	r3, [r7, #12]
   118ac:	681b      	ldr	r3, [r3, #0]
   118ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   118b2:	68fa      	ldr	r2, [r7, #12]
   118b4:	6812      	ldr	r2, [r2, #0]
   118b6:	f892 206a 	ldrb.w	r2, [r2, #106]	; 0x6a
   118ba:	719a      	strb	r2, [r3, #6]
            SDO->sequence = 0;
   118bc:	68fb      	ldr	r3, [r7, #12]
   118be:	681b      	ldr	r3, [r3, #0]
   118c0:	2200      	movs	r2, #0
   118c2:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

            /* empty buffer in domain data type if not last segment */
            if((SDO->ODF_arg.ODdataStorage == 0) && (SDO->bufferOffset != 0) && !lastSegmentInSubblock){
   118c6:	68fb      	ldr	r3, [r7, #12]
   118c8:	681b      	ldr	r3, [r3, #0]
   118ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   118cc:	2b00      	cmp	r3, #0
   118ce:	d141      	bne.n	11954 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x884>
   118d0:	68fb      	ldr	r3, [r7, #12]
   118d2:	681b      	ldr	r3, [r3, #0]
   118d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   118d6:	2b00      	cmp	r3, #0
   118d8:	d03c      	beq.n	11954 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x884>
   118da:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   118de:	2b00      	cmp	r3, #0
   118e0:	d138      	bne.n	11954 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x884>
                /* calculate CRC on next bytes, if enabled */
                if(SDO->crcEnabled){
   118e2:	68fb      	ldr	r3, [r7, #12]
   118e4:	681b      	ldr	r3, [r3, #0]
   118e6:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
   118ea:	2b00      	cmp	r3, #0
   118ec:	d010      	beq.n	11910 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x840>
                    SDO->crc = crc16_ccitt(SDO->ODF_arg.data, SDO->bufferOffset, SDO->crc);
   118ee:	68fb      	ldr	r3, [r7, #12]
   118f0:	681c      	ldr	r4, [r3, #0]
   118f2:	68fb      	ldr	r3, [r7, #12]
   118f4:	681b      	ldr	r3, [r3, #0]
   118f6:	6c59      	ldr	r1, [r3, #68]	; 0x44
   118f8:	68fb      	ldr	r3, [r7, #12]
   118fa:	681b      	ldr	r3, [r3, #0]
   118fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   118fe:	68fb      	ldr	r3, [r7, #12]
   11900:	681b      	ldr	r3, [r3, #0]
   11902:	6f5b      	ldr	r3, [r3, #116]	; 0x74
   11904:	b29b      	uxth	r3, r3
   11906:	68f8      	ldr	r0, [r7, #12]
   11908:	4d60      	ldr	r5, [pc, #384]	; (11a8c <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x9bc>)
   1190a:	47a8      	blx	r5
   1190c:	4603      	mov	r3, r0
   1190e:	6763      	str	r3, [r4, #116]	; 0x74
                }

                /* write data to the Object dictionary */
                SDO->ODF_arg.lastSegment = false;
   11910:	68fb      	ldr	r3, [r7, #12]
   11912:	681b      	ldr	r3, [r3, #0]
   11914:	2200      	movs	r2, #0
   11916:	f883 205f 	strb.w	r2, [r3, #95]	; 0x5f
                abortCode = CO_SDO_writeOD(SDO->bufferOffset);
   1191a:	68fb      	ldr	r3, [r7, #12]
   1191c:	681b      	ldr	r3, [r3, #0]
   1191e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   11920:	4619      	mov	r1, r3
   11922:	68f8      	ldr	r0, [r7, #12]
   11924:	4b5a      	ldr	r3, [pc, #360]	; (11a90 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x9c0>)
   11926:	4798      	blx	r3
   11928:	62b8      	str	r0, [r7, #40]	; 0x28
                if(abortCode != 0U){
   1192a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1192c:	2b00      	cmp	r3, #0
   1192e:	d009      	beq.n	11944 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x874>
                    CO_SDO_abort(SDO, abortCode);
   11930:	68fb      	ldr	r3, [r7, #12]
   11932:	681b      	ldr	r3, [r3, #0]
   11934:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   11936:	4618      	mov	r0, r3
   11938:	4b53      	ldr	r3, [pc, #332]	; (11a88 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x9b8>)
   1193a:	4798      	blx	r3
                    return -1;
   1193c:	f04f 33ff 	mov.w	r3, #4294967295
   11940:	f000 bd5c 	b.w	123fc <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x132c>
                }

                SDO->ODF_arg.dataLength = CO_SDO_BUFFER_SIZE;
   11944:	68fb      	ldr	r3, [r7, #12]
   11946:	681b      	ldr	r3, [r3, #0]
   11948:	2220      	movs	r2, #32
   1194a:	64da      	str	r2, [r3, #76]	; 0x4c
                SDO->bufferOffset = 0;
   1194c:	68fb      	ldr	r3, [r7, #12]
   1194e:	681b      	ldr	r3, [r3, #0]
   11950:	2200      	movs	r2, #0
   11952:	639a      	str	r2, [r3, #56]	; 0x38
            }

            /* blksize */
            len = CO_SDO_BUFFER_SIZE - SDO->bufferOffset;
   11954:	68fb      	ldr	r3, [r7, #12]
   11956:	681b      	ldr	r3, [r3, #0]
   11958:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1195a:	f1c3 0320 	rsb	r3, r3, #32
   1195e:	643b      	str	r3, [r7, #64]	; 0x40
            SDO->blksize = (len > (7*127)) ? 127 : (len / 7);
   11960:	68fb      	ldr	r3, [r7, #12]
   11962:	6819      	ldr	r1, [r3, #0]
   11964:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   11966:	f240 3279 	movw	r2, #889	; 0x379
   1196a:	4293      	cmp	r3, r2
   1196c:	d809      	bhi.n	11982 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x8b2>
   1196e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   11970:	4b48      	ldr	r3, [pc, #288]	; (11a94 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x9c4>)
   11972:	fba3 0302 	umull	r0, r3, r3, r2
   11976:	1ad2      	subs	r2, r2, r3
   11978:	0852      	lsrs	r2, r2, #1
   1197a:	4413      	add	r3, r2
   1197c:	089b      	lsrs	r3, r3, #2
   1197e:	b2db      	uxtb	r3, r3
   11980:	e000      	b.n	11984 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x8b4>
   11982:	237f      	movs	r3, #127	; 0x7f
   11984:	f881 3070 	strb.w	r3, [r1, #112]	; 0x70
            SDO->CANtxBuff->data[2] = SDO->blksize;
   11988:	68fb      	ldr	r3, [r7, #12]
   1198a:	681b      	ldr	r3, [r3, #0]
   1198c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   11990:	68fa      	ldr	r2, [r7, #12]
   11992:	6812      	ldr	r2, [r2, #0]
   11994:	f892 2070 	ldrb.w	r2, [r2, #112]	; 0x70
   11998:	71da      	strb	r2, [r3, #7]

            /* set next state */
            if(lastSegmentInSubblock) {
   1199a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   1199e:	2b00      	cmp	r3, #0
   119a0:	d005      	beq.n	119ae <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x8de>
                SDO->state = CO_SDO_ST_DOWNLOAD_BL_END;
   119a2:	68fb      	ldr	r3, [r7, #12]
   119a4:	681b      	ldr	r3, [r3, #0]
   119a6:	2217      	movs	r2, #23
   119a8:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
   119ac:	e013      	b.n	119d6 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x906>
            }
            else if(SDO->bufferOffset >= CO_SDO_BUFFER_SIZE) {
   119ae:	68fb      	ldr	r3, [r7, #12]
   119b0:	681b      	ldr	r3, [r3, #0]
   119b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   119b4:	2b1f      	cmp	r3, #31
   119b6:	d909      	bls.n	119cc <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x8fc>
                CO_SDO_abort(SDO, CO_SDO_AB_DEVICE_INCOMPAT);
   119b8:	68fb      	ldr	r3, [r7, #12]
   119ba:	681b      	ldr	r3, [r3, #0]
   119bc:	4936      	ldr	r1, [pc, #216]	; (11a98 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x9c8>)
   119be:	4618      	mov	r0, r3
   119c0:	4b31      	ldr	r3, [pc, #196]	; (11a88 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x9b8>)
   119c2:	4798      	blx	r3
                return -1;
   119c4:	f04f 33ff 	mov.w	r3, #4294967295
   119c8:	f000 bd18 	b.w	123fc <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x132c>
            }
            else {
                SDO->state = CO_SDO_ST_DOWNLOAD_BL_SUBBLOCK;
   119cc:	68fb      	ldr	r3, [r7, #12]
   119ce:	681b      	ldr	r3, [r3, #0]
   119d0:	2215      	movs	r2, #21
   119d2:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
            }

            /* send response */
            sendResponse = true;
   119d6:	2301      	movs	r3, #1
   119d8:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45

            break;
   119dc:	f000 bcf2 	b.w	123c4 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x12f4>
        }

        case CO_SDO_ST_DOWNLOAD_BL_END:{
            /* verify client command specifier and subcommand */
            if((SDO->CANrxData[0]&0xE1U) != 0xC1U){
   119e0:	68fb      	ldr	r3, [r7, #12]
   119e2:	681b      	ldr	r3, [r3, #0]
   119e4:	781b      	ldrb	r3, [r3, #0]
   119e6:	f003 03e1 	and.w	r3, r3, #225	; 0xe1
   119ea:	2bc1      	cmp	r3, #193	; 0xc1
   119ec:	d009      	beq.n	11a02 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x932>
                CO_SDO_abort(SDO, CO_SDO_AB_CMD);/* Client command specifier not valid or unknown. */
   119ee:	68fb      	ldr	r3, [r7, #12]
   119f0:	681b      	ldr	r3, [r3, #0]
   119f2:	492a      	ldr	r1, [pc, #168]	; (11a9c <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x9cc>)
   119f4:	4618      	mov	r0, r3
   119f6:	4b24      	ldr	r3, [pc, #144]	; (11a88 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x9b8>)
   119f8:	4798      	blx	r3
                return -1;
   119fa:	f04f 33ff 	mov.w	r3, #4294967295
   119fe:	f000 bcfd 	b.w	123fc <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x132c>
            }

            /* number of bytes in the last segment of the last block that do not contain data. */
            len = (SDO->CANrxData[0]>>2U) & 0x07U;
   11a02:	68fb      	ldr	r3, [r7, #12]
   11a04:	681b      	ldr	r3, [r3, #0]
   11a06:	781b      	ldrb	r3, [r3, #0]
   11a08:	109b      	asrs	r3, r3, #2
   11a0a:	f003 0307 	and.w	r3, r3, #7
   11a0e:	643b      	str	r3, [r7, #64]	; 0x40
            SDO->bufferOffset -= len;
   11a10:	68fb      	ldr	r3, [r7, #12]
   11a12:	681b      	ldr	r3, [r3, #0]
   11a14:	68fa      	ldr	r2, [r7, #12]
   11a16:	6812      	ldr	r2, [r2, #0]
   11a18:	6b91      	ldr	r1, [r2, #56]	; 0x38
   11a1a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   11a1c:	1a8a      	subs	r2, r1, r2
   11a1e:	639a      	str	r2, [r3, #56]	; 0x38

            /* calculate and verify CRC, if enabled */
            if(SDO->crcEnabled){
   11a20:	68fb      	ldr	r3, [r7, #12]
   11a22:	681b      	ldr	r3, [r3, #0]
   11a24:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
   11a28:	2b00      	cmp	r3, #0
   11a2a:	d03d      	beq.n	11aa8 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x9d8>
                uint32_t crc;
                SDO->crc = crc16_ccitt(SDO->ODF_arg.data, SDO->bufferOffset, SDO->crc);
   11a2c:	68fb      	ldr	r3, [r7, #12]
   11a2e:	681c      	ldr	r4, [r3, #0]
   11a30:	68fb      	ldr	r3, [r7, #12]
   11a32:	681b      	ldr	r3, [r3, #0]
   11a34:	6c59      	ldr	r1, [r3, #68]	; 0x44
   11a36:	68fb      	ldr	r3, [r7, #12]
   11a38:	681b      	ldr	r3, [r3, #0]
   11a3a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   11a3c:	68fb      	ldr	r3, [r7, #12]
   11a3e:	681b      	ldr	r3, [r3, #0]
   11a40:	6f5b      	ldr	r3, [r3, #116]	; 0x74
   11a42:	b29b      	uxth	r3, r3
   11a44:	68f8      	ldr	r0, [r7, #12]
   11a46:	4d11      	ldr	r5, [pc, #68]	; (11a8c <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x9bc>)
   11a48:	47a8      	blx	r5
   11a4a:	4603      	mov	r3, r0
   11a4c:	6763      	str	r3, [r4, #116]	; 0x74

                CO_memcpySwap2(&crc, &SDO->CANrxData[1]);
   11a4e:	68fb      	ldr	r3, [r7, #12]
   11a50:	681b      	ldr	r3, [r3, #0]
   11a52:	1c5a      	adds	r2, r3, #1
   11a54:	f107 0318 	add.w	r3, r7, #24
   11a58:	4619      	mov	r1, r3
   11a5a:	68f8      	ldr	r0, [r7, #12]
   11a5c:	4b10      	ldr	r3, [pc, #64]	; (11aa0 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x9d0>)
   11a5e:	4798      	blx	r3

                if(SDO->crc != crc){
   11a60:	68fb      	ldr	r3, [r7, #12]
   11a62:	681b      	ldr	r3, [r3, #0]
   11a64:	6f5a      	ldr	r2, [r3, #116]	; 0x74
   11a66:	69bb      	ldr	r3, [r7, #24]
   11a68:	429a      	cmp	r2, r3
   11a6a:	d01d      	beq.n	11aa8 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x9d8>
                    CO_SDO_abort(SDO, CO_SDO_AB_CRC);   /* CRC error (block mode only). */
   11a6c:	68fb      	ldr	r3, [r7, #12]
   11a6e:	681b      	ldr	r3, [r3, #0]
   11a70:	490c      	ldr	r1, [pc, #48]	; (11aa4 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x9d4>)
   11a72:	4618      	mov	r0, r3
   11a74:	4b04      	ldr	r3, [pc, #16]	; (11a88 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x9b8>)
   11a76:	4798      	blx	r3
                    return -1;
   11a78:	f04f 33ff 	mov.w	r3, #4294967295
   11a7c:	f000 bcbe 	b.w	123fc <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x132c>
   11a80:	00010521 	.word	0x00010521
   11a84:	06070010 	.word	0x06070010
   11a88:	00011045 	.word	0x00011045
   11a8c:	00012a49 	.word	0x00012a49
   11a90:	00010f11 	.word	0x00010f11
   11a94:	24924925 	.word	0x24924925
   11a98:	06040047 	.word	0x06040047
   11a9c:	05040001 	.word	0x05040001
   11aa0:	000104f1 	.word	0x000104f1
   11aa4:	05040004 	.word	0x05040004
                }
            }

            /* write data to the Object dictionary */
            SDO->ODF_arg.lastSegment = true;
   11aa8:	68fb      	ldr	r3, [r7, #12]
   11aaa:	681b      	ldr	r3, [r3, #0]
   11aac:	2201      	movs	r2, #1
   11aae:	f883 205f 	strb.w	r2, [r3, #95]	; 0x5f
            abortCode = CO_SDO_writeOD( SDO->bufferOffset);
   11ab2:	68fb      	ldr	r3, [r7, #12]
   11ab4:	681b      	ldr	r3, [r3, #0]
   11ab6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   11ab8:	4619      	mov	r1, r3
   11aba:	68f8      	ldr	r0, [r7, #12]
   11abc:	4b98      	ldr	r3, [pc, #608]	; (11d20 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xc50>)
   11abe:	4798      	blx	r3
   11ac0:	62b8      	str	r0, [r7, #40]	; 0x28
            if(abortCode != 0U){
   11ac2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   11ac4:	2b00      	cmp	r3, #0
   11ac6:	d009      	beq.n	11adc <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xa0c>
                CO_SDO_abort(SDO, abortCode);
   11ac8:	68fb      	ldr	r3, [r7, #12]
   11aca:	681b      	ldr	r3, [r3, #0]
   11acc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   11ace:	4618      	mov	r0, r3
   11ad0:	4b94      	ldr	r3, [pc, #592]	; (11d24 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xc54>)
   11ad2:	4798      	blx	r3
                return -1;
   11ad4:	f04f 33ff 	mov.w	r3, #4294967295
   11ad8:	f000 bc90 	b.w	123fc <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x132c>
            }

            /* send response */
            SDO->CANtxBuff->data[0] = 0xA1;
   11adc:	68fb      	ldr	r3, [r7, #12]
   11ade:	681b      	ldr	r3, [r3, #0]
   11ae0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   11ae4:	22a1      	movs	r2, #161	; 0xa1
   11ae6:	715a      	strb	r2, [r3, #5]
            SDO->state = CO_SDO_ST_IDLE;
   11ae8:	68fb      	ldr	r3, [r7, #12]
   11aea:	681b      	ldr	r3, [r3, #0]
   11aec:	2200      	movs	r2, #0
   11aee:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
            sendResponse = true;
   11af2:	2301      	movs	r3, #1
   11af4:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
            break;
   11af8:	f000 bc64 	b.w	123c4 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x12f4>
        }

        case CO_SDO_ST_UPLOAD_INITIATE:{
            /* default response */
            SDO->CANtxBuff->data[1] = SDO->CANrxData[1];
   11afc:	68fb      	ldr	r3, [r7, #12]
   11afe:	681b      	ldr	r3, [r3, #0]
   11b00:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   11b04:	68fa      	ldr	r2, [r7, #12]
   11b06:	6812      	ldr	r2, [r2, #0]
   11b08:	7852      	ldrb	r2, [r2, #1]
   11b0a:	719a      	strb	r2, [r3, #6]
            SDO->CANtxBuff->data[2] = SDO->CANrxData[2];
   11b0c:	68fb      	ldr	r3, [r7, #12]
   11b0e:	681b      	ldr	r3, [r3, #0]
   11b10:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   11b14:	68fa      	ldr	r2, [r7, #12]
   11b16:	6812      	ldr	r2, [r2, #0]
   11b18:	7892      	ldrb	r2, [r2, #2]
   11b1a:	71da      	strb	r2, [r3, #7]
            SDO->CANtxBuff->data[3] = SDO->CANrxData[3];
   11b1c:	68fb      	ldr	r3, [r7, #12]
   11b1e:	681b      	ldr	r3, [r3, #0]
   11b20:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   11b24:	68fa      	ldr	r2, [r7, #12]
   11b26:	6812      	ldr	r2, [r2, #0]
   11b28:	78d2      	ldrb	r2, [r2, #3]
   11b2a:	721a      	strb	r2, [r3, #8]

            /* Expedited transfer */
            if(SDO->ODF_arg.dataLength <= 4U){
   11b2c:	68fb      	ldr	r3, [r7, #12]
   11b2e:	681b      	ldr	r3, [r3, #0]
   11b30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   11b32:	2b04      	cmp	r3, #4
   11b34:	d835      	bhi.n	11ba2 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xad2>
                for(i=0U; i<SDO->ODF_arg.dataLength; i++)
   11b36:	2300      	movs	r3, #0
   11b38:	63fb      	str	r3, [r7, #60]	; 0x3c
   11b3a:	68fb      	ldr	r3, [r7, #12]
   11b3c:	681b      	ldr	r3, [r3, #0]
   11b3e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
   11b40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   11b42:	429a      	cmp	r2, r3
   11b44:	d912      	bls.n	11b6c <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xa9c>
                    SDO->CANtxBuff->data[4U+i] = SDO->ODF_arg.data[i];
   11b46:	68fb      	ldr	r3, [r7, #12]
   11b48:	681b      	ldr	r3, [r3, #0]
   11b4a:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
   11b4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   11b50:	3304      	adds	r3, #4
   11b52:	68f9      	ldr	r1, [r7, #12]
   11b54:	6809      	ldr	r1, [r1, #0]
   11b56:	6c48      	ldr	r0, [r1, #68]	; 0x44
   11b58:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
   11b5a:	4401      	add	r1, r0
   11b5c:	7809      	ldrb	r1, [r1, #0]
   11b5e:	4413      	add	r3, r2
   11b60:	460a      	mov	r2, r1
   11b62:	715a      	strb	r2, [r3, #5]
                for(i=0U; i<SDO->ODF_arg.dataLength; i++)
   11b64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   11b66:	3301      	adds	r3, #1
   11b68:	63fb      	str	r3, [r7, #60]	; 0x3c
   11b6a:	e7e6      	b.n	11b3a <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xa6a>

                SDO->CANtxBuff->data[0] = 0x43U | ((4U-SDO->ODF_arg.dataLength) << 2U);
   11b6c:	68fb      	ldr	r3, [r7, #12]
   11b6e:	681b      	ldr	r3, [r3, #0]
   11b70:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   11b74:	68fa      	ldr	r2, [r7, #12]
   11b76:	6812      	ldr	r2, [r2, #0]
   11b78:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
   11b7a:	b2d2      	uxtb	r2, r2
   11b7c:	f1c2 0204 	rsb	r2, r2, #4
   11b80:	b2d2      	uxtb	r2, r2
   11b82:	0092      	lsls	r2, r2, #2
   11b84:	b2d2      	uxtb	r2, r2
   11b86:	f042 0243 	orr.w	r2, r2, #67	; 0x43
   11b8a:	b2d2      	uxtb	r2, r2
   11b8c:	715a      	strb	r2, [r3, #5]
                SDO->state = CO_SDO_ST_IDLE;
   11b8e:	68fb      	ldr	r3, [r7, #12]
   11b90:	681b      	ldr	r3, [r3, #0]
   11b92:	2200      	movs	r2, #0
   11b94:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69

                sendResponse = true;
   11b98:	2301      	movs	r3, #1
   11b9a:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
                }

                /* send response */
                sendResponse = true;
            }
            break;
   11b9e:	f000 bc11 	b.w	123c4 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x12f4>
                SDO->bufferOffset = 0U;
   11ba2:	68fb      	ldr	r3, [r7, #12]
   11ba4:	681b      	ldr	r3, [r3, #0]
   11ba6:	2200      	movs	r2, #0
   11ba8:	639a      	str	r2, [r3, #56]	; 0x38
                SDO->sequence = 0U;
   11baa:	68fb      	ldr	r3, [r7, #12]
   11bac:	681b      	ldr	r3, [r3, #0]
   11bae:	2200      	movs	r2, #0
   11bb0:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
                SDO->state = CO_SDO_ST_UPLOAD_SEGMENTED;
   11bb4:	68fb      	ldr	r3, [r7, #12]
   11bb6:	681b      	ldr	r3, [r3, #0]
   11bb8:	2222      	movs	r2, #34	; 0x22
   11bba:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
                if(SDO->ODF_arg.dataLengthTotal != 0U){
   11bbe:	68fb      	ldr	r3, [r7, #12]
   11bc0:	681b      	ldr	r3, [r3, #0]
   11bc2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   11bc4:	2b00      	cmp	r3, #0
   11bc6:	d015      	beq.n	11bf4 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xb24>
                    uint32_t len = SDO->ODF_arg.dataLengthTotal;
   11bc8:	68fb      	ldr	r3, [r7, #12]
   11bca:	681b      	ldr	r3, [r3, #0]
   11bcc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   11bce:	617b      	str	r3, [r7, #20]
                    CO_memcpySwap4(&SDO->CANtxBuff->data[4], &len);
   11bd0:	68fb      	ldr	r3, [r7, #12]
   11bd2:	681b      	ldr	r3, [r3, #0]
   11bd4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   11bd8:	3309      	adds	r3, #9
   11bda:	f107 0214 	add.w	r2, r7, #20
   11bde:	4619      	mov	r1, r3
   11be0:	68f8      	ldr	r0, [r7, #12]
   11be2:	4b51      	ldr	r3, [pc, #324]	; (11d28 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xc58>)
   11be4:	4798      	blx	r3
                    SDO->CANtxBuff->data[0] = 0x41U;
   11be6:	68fb      	ldr	r3, [r7, #12]
   11be8:	681b      	ldr	r3, [r3, #0]
   11bea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   11bee:	2241      	movs	r2, #65	; 0x41
   11bf0:	715a      	strb	r2, [r3, #5]
   11bf2:	e005      	b.n	11c00 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xb30>
                    SDO->CANtxBuff->data[0] = 0x40U;
   11bf4:	68fb      	ldr	r3, [r7, #12]
   11bf6:	681b      	ldr	r3, [r3, #0]
   11bf8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   11bfc:	2240      	movs	r2, #64	; 0x40
   11bfe:	715a      	strb	r2, [r3, #5]
                sendResponse = true;
   11c00:	2301      	movs	r3, #1
   11c02:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
            break;
   11c06:	e3dd      	b.n	123c4 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x12f4>
        }

        case CO_SDO_ST_UPLOAD_SEGMENTED:{
            /* verify client command specifier */
            if((SDO->CANrxData[0]&0xE0U) != 0x60U){
   11c08:	68fb      	ldr	r3, [r7, #12]
   11c0a:	681b      	ldr	r3, [r3, #0]
   11c0c:	781b      	ldrb	r3, [r3, #0]
   11c0e:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
   11c12:	2b60      	cmp	r3, #96	; 0x60
   11c14:	d008      	beq.n	11c28 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xb58>
                CO_SDO_abort(SDO, CO_SDO_AB_CMD);/* Client command specifier not valid or unknown. */
   11c16:	68fb      	ldr	r3, [r7, #12]
   11c18:	681b      	ldr	r3, [r3, #0]
   11c1a:	4944      	ldr	r1, [pc, #272]	; (11d2c <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xc5c>)
   11c1c:	4618      	mov	r0, r3
   11c1e:	4b41      	ldr	r3, [pc, #260]	; (11d24 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xc54>)
   11c20:	4798      	blx	r3
                return -1;
   11c22:	f04f 33ff 	mov.w	r3, #4294967295
   11c26:	e3e9      	b.n	123fc <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x132c>
            }

            /* verify toggle bit */
            i = ((SDO->CANrxData[0]&0x10U) != 0) ? 1U : 0U;
   11c28:	68fb      	ldr	r3, [r7, #12]
   11c2a:	681b      	ldr	r3, [r3, #0]
   11c2c:	781b      	ldrb	r3, [r3, #0]
   11c2e:	f003 0310 	and.w	r3, r3, #16
   11c32:	2b00      	cmp	r3, #0
   11c34:	d001      	beq.n	11c3a <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xb6a>
   11c36:	2301      	movs	r3, #1
   11c38:	e000      	b.n	11c3c <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xb6c>
   11c3a:	2300      	movs	r3, #0
   11c3c:	63fb      	str	r3, [r7, #60]	; 0x3c
            if(i != SDO->sequence){
   11c3e:	68fb      	ldr	r3, [r7, #12]
   11c40:	681b      	ldr	r3, [r3, #0]
   11c42:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
   11c46:	461a      	mov	r2, r3
   11c48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   11c4a:	429a      	cmp	r2, r3
   11c4c:	d008      	beq.n	11c60 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xb90>
                CO_SDO_abort(SDO, CO_SDO_AB_TOGGLE_BIT);/* toggle bit not alternated */
   11c4e:	68fb      	ldr	r3, [r7, #12]
   11c50:	681b      	ldr	r3, [r3, #0]
   11c52:	4937      	ldr	r1, [pc, #220]	; (11d30 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xc60>)
   11c54:	4618      	mov	r0, r3
   11c56:	4b33      	ldr	r3, [pc, #204]	; (11d24 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xc54>)
   11c58:	4798      	blx	r3
                return -1;
   11c5a:	f04f 33ff 	mov.w	r3, #4294967295
   11c5e:	e3cd      	b.n	123fc <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x132c>
            }

            /* calculate length to be sent */
            len = SDO->ODF_arg.dataLength - SDO->bufferOffset;
   11c60:	68fb      	ldr	r3, [r7, #12]
   11c62:	681b      	ldr	r3, [r3, #0]
   11c64:	6cda      	ldr	r2, [r3, #76]	; 0x4c
   11c66:	68fb      	ldr	r3, [r7, #12]
   11c68:	681b      	ldr	r3, [r3, #0]
   11c6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   11c6c:	1ad3      	subs	r3, r2, r3
   11c6e:	643b      	str	r3, [r7, #64]	; 0x40
            if(len > 7U) len = 7U;
   11c70:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   11c72:	2b07      	cmp	r3, #7
   11c74:	d901      	bls.n	11c7a <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xbaa>
   11c76:	2307      	movs	r3, #7
   11c78:	643b      	str	r3, [r7, #64]	; 0x40

            /* If data type is domain, re-fill the data buffer if neccessary and indicated so. */
            if((SDO->ODF_arg.ODdataStorage == 0) && (len < 7U) && (!SDO->ODF_arg.lastSegment)){
   11c7a:	68fb      	ldr	r3, [r7, #12]
   11c7c:	681b      	ldr	r3, [r3, #0]
   11c7e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   11c80:	2b00      	cmp	r3, #0
   11c82:	d179      	bne.n	11d78 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xca8>
   11c84:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   11c86:	2b06      	cmp	r3, #6
   11c88:	d876      	bhi.n	11d78 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xca8>
   11c8a:	68fb      	ldr	r3, [r7, #12]
   11c8c:	681b      	ldr	r3, [r3, #0]
   11c8e:	f893 305f 	ldrb.w	r3, [r3, #95]	; 0x5f
   11c92:	2b00      	cmp	r3, #0
   11c94:	d170      	bne.n	11d78 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xca8>
                /* copy previous data to the beginning */
                for(i=0U; i<len; i++){
   11c96:	2300      	movs	r3, #0
   11c98:	63fb      	str	r3, [r7, #60]	; 0x3c
   11c9a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   11c9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   11c9e:	429a      	cmp	r2, r3
   11ca0:	d213      	bcs.n	11cca <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xbfa>
                    SDO->ODF_arg.data[i] = SDO->ODF_arg.data[SDO->bufferOffset+i];
   11ca2:	68fb      	ldr	r3, [r7, #12]
   11ca4:	681b      	ldr	r3, [r3, #0]
   11ca6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   11ca8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   11caa:	4413      	add	r3, r2
   11cac:	68fa      	ldr	r2, [r7, #12]
   11cae:	6812      	ldr	r2, [r2, #0]
   11cb0:	6c51      	ldr	r1, [r2, #68]	; 0x44
   11cb2:	68fa      	ldr	r2, [r7, #12]
   11cb4:	6812      	ldr	r2, [r2, #0]
   11cb6:	6b90      	ldr	r0, [r2, #56]	; 0x38
   11cb8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   11cba:	4402      	add	r2, r0
   11cbc:	440a      	add	r2, r1
   11cbe:	7812      	ldrb	r2, [r2, #0]
   11cc0:	701a      	strb	r2, [r3, #0]
                for(i=0U; i<len; i++){
   11cc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   11cc4:	3301      	adds	r3, #1
   11cc6:	63fb      	str	r3, [r7, #60]	; 0x3c
   11cc8:	e7e7      	b.n	11c9a <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xbca>
                }

                /* move the beginning of the data buffer */
                SDO->ODF_arg.data += len;
   11cca:	68fb      	ldr	r3, [r7, #12]
   11ccc:	681b      	ldr	r3, [r3, #0]
   11cce:	68fa      	ldr	r2, [r7, #12]
   11cd0:	6812      	ldr	r2, [r2, #0]
   11cd2:	6c51      	ldr	r1, [r2, #68]	; 0x44
   11cd4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   11cd6:	440a      	add	r2, r1
   11cd8:	645a      	str	r2, [r3, #68]	; 0x44
                SDO->ODF_arg.dataLength = CO_OD_getLength( SDO->entryNo, SDO->ODF_arg.subIndex) - len;
   11cda:	68fb      	ldr	r3, [r7, #12]
   11cdc:	681c      	ldr	r4, [r3, #0]
   11cde:	68fb      	ldr	r3, [r7, #12]
   11ce0:	681b      	ldr	r3, [r3, #0]
   11ce2:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
   11ce4:	68fb      	ldr	r3, [r7, #12]
   11ce6:	681b      	ldr	r3, [r3, #0]
   11ce8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
   11cec:	461a      	mov	r2, r3
   11cee:	68f8      	ldr	r0, [r7, #12]
   11cf0:	4b10      	ldr	r3, [pc, #64]	; (11d34 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xc64>)
   11cf2:	4798      	blx	r3
   11cf4:	4602      	mov	r2, r0
   11cf6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   11cf8:	1ad3      	subs	r3, r2, r3
   11cfa:	64e3      	str	r3, [r4, #76]	; 0x4c

                /* read next data from Object dictionary function */
                abortCode = CO_SDO_readOD( CO_SDO_BUFFER_SIZE);
   11cfc:	2120      	movs	r1, #32
   11cfe:	68f8      	ldr	r0, [r7, #12]
   11d00:	4b0d      	ldr	r3, [pc, #52]	; (11d38 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xc68>)
   11d02:	4798      	blx	r3
   11d04:	62b8      	str	r0, [r7, #40]	; 0x28
                if(abortCode != 0U){
   11d06:	6abb      	ldr	r3, [r7, #40]	; 0x28
   11d08:	2b00      	cmp	r3, #0
   11d0a:	d017      	beq.n	11d3c <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xc6c>
                    CO_SDO_abort(SDO, abortCode);
   11d0c:	68fb      	ldr	r3, [r7, #12]
   11d0e:	681b      	ldr	r3, [r3, #0]
   11d10:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   11d12:	4618      	mov	r0, r3
   11d14:	4b03      	ldr	r3, [pc, #12]	; (11d24 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xc54>)
   11d16:	4798      	blx	r3
                    return -1;
   11d18:	f04f 33ff 	mov.w	r3, #4294967295
   11d1c:	e36e      	b.n	123fc <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x132c>
   11d1e:	bf00      	nop
   11d20:	00010f11 	.word	0x00010f11
   11d24:	00011045 	.word	0x00011045
   11d28:	00010521 	.word	0x00010521
   11d2c:	05040001 	.word	0x05040001
   11d30:	05030000 	.word	0x05030000
   11d34:	00010a35 	.word	0x00010a35
   11d38:	00010df1 	.word	0x00010df1
                }

                /* return to the original data buffer */
                SDO->ODF_arg.data -= len;
   11d3c:	68fb      	ldr	r3, [r7, #12]
   11d3e:	681b      	ldr	r3, [r3, #0]
   11d40:	68fa      	ldr	r2, [r7, #12]
   11d42:	6812      	ldr	r2, [r2, #0]
   11d44:	6c51      	ldr	r1, [r2, #68]	; 0x44
   11d46:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   11d48:	4252      	negs	r2, r2
   11d4a:	440a      	add	r2, r1
   11d4c:	645a      	str	r2, [r3, #68]	; 0x44
                SDO->ODF_arg.dataLength +=  len;
   11d4e:	68fb      	ldr	r3, [r7, #12]
   11d50:	681b      	ldr	r3, [r3, #0]
   11d52:	68fa      	ldr	r2, [r7, #12]
   11d54:	6812      	ldr	r2, [r2, #0]
   11d56:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
   11d58:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   11d5a:	440a      	add	r2, r1
   11d5c:	64da      	str	r2, [r3, #76]	; 0x4c
                SDO->bufferOffset = 0;
   11d5e:	68fb      	ldr	r3, [r7, #12]
   11d60:	681b      	ldr	r3, [r3, #0]
   11d62:	2200      	movs	r2, #0
   11d64:	639a      	str	r2, [r3, #56]	; 0x38

                /* re-calculate the length */
                len = SDO->ODF_arg.dataLength;
   11d66:	68fb      	ldr	r3, [r7, #12]
   11d68:	681b      	ldr	r3, [r3, #0]
   11d6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   11d6c:	643b      	str	r3, [r7, #64]	; 0x40
                if(len > 7U) len = 7U;
   11d6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   11d70:	2b07      	cmp	r3, #7
   11d72:	d901      	bls.n	11d78 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xca8>
   11d74:	2307      	movs	r3, #7
   11d76:	643b      	str	r3, [r7, #64]	; 0x40
            }

            /* fill response data bytes */
            for(i=0U; i<len; i++)
   11d78:	2300      	movs	r3, #0
   11d7a:	63fb      	str	r3, [r7, #60]	; 0x3c
   11d7c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   11d7e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   11d80:	429a      	cmp	r2, r3
   11d82:	d215      	bcs.n	11db0 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xce0>
                SDO->CANtxBuff->data[i+1] = SDO->ODF_arg.data[SDO->bufferOffset++];
   11d84:	68fb      	ldr	r3, [r7, #12]
   11d86:	681b      	ldr	r3, [r3, #0]
   11d88:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
   11d8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   11d8e:	1c59      	adds	r1, r3, #1
   11d90:	68fb      	ldr	r3, [r7, #12]
   11d92:	681b      	ldr	r3, [r3, #0]
   11d94:	6c5c      	ldr	r4, [r3, #68]	; 0x44
   11d96:	68fb      	ldr	r3, [r7, #12]
   11d98:	681a      	ldr	r2, [r3, #0]
   11d9a:	6b93      	ldr	r3, [r2, #56]	; 0x38
   11d9c:	1c5d      	adds	r5, r3, #1
   11d9e:	6395      	str	r5, [r2, #56]	; 0x38
   11da0:	4423      	add	r3, r4
   11da2:	781a      	ldrb	r2, [r3, #0]
   11da4:	1843      	adds	r3, r0, r1
   11da6:	715a      	strb	r2, [r3, #5]
            for(i=0U; i<len; i++)
   11da8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   11daa:	3301      	adds	r3, #1
   11dac:	63fb      	str	r3, [r7, #60]	; 0x3c
   11dae:	e7e5      	b.n	11d7c <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xcac>

            /* first response byte */
            SDO->CANtxBuff->data[0] = 0x00 | (SDO->sequence ? 0x10 : 0x00) | ((7-len)<<1);
   11db0:	68fb      	ldr	r3, [r7, #12]
   11db2:	681b      	ldr	r3, [r3, #0]
   11db4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   11db8:	68fa      	ldr	r2, [r7, #12]
   11dba:	6812      	ldr	r2, [r2, #0]
   11dbc:	f892 206a 	ldrb.w	r2, [r2, #106]	; 0x6a
   11dc0:	2a00      	cmp	r2, #0
   11dc2:	d001      	beq.n	11dc8 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xcf8>
   11dc4:	2110      	movs	r1, #16
   11dc6:	e000      	b.n	11dca <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xcfa>
   11dc8:	2100      	movs	r1, #0
   11dca:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   11dcc:	b2d2      	uxtb	r2, r2
   11dce:	f1c2 0207 	rsb	r2, r2, #7
   11dd2:	b2d2      	uxtb	r2, r2
   11dd4:	0052      	lsls	r2, r2, #1
   11dd6:	b2d2      	uxtb	r2, r2
   11dd8:	430a      	orrs	r2, r1
   11dda:	b2d2      	uxtb	r2, r2
   11ddc:	715a      	strb	r2, [r3, #5]
            SDO->sequence = (SDO->sequence) ? 0 : 1;
   11dde:	68fb      	ldr	r3, [r7, #12]
   11de0:	681b      	ldr	r3, [r3, #0]
   11de2:	68fa      	ldr	r2, [r7, #12]
   11de4:	6812      	ldr	r2, [r2, #0]
   11de6:	f892 206a 	ldrb.w	r2, [r2, #106]	; 0x6a
   11dea:	2a00      	cmp	r2, #0
   11dec:	bf0c      	ite	eq
   11dee:	2201      	moveq	r2, #1
   11df0:	2200      	movne	r2, #0
   11df2:	b2d2      	uxtb	r2, r2
   11df4:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

            /* verify end of transfer */
            if((SDO->bufferOffset == SDO->ODF_arg.dataLength) && (SDO->ODF_arg.lastSegment)){
   11df8:	68fb      	ldr	r3, [r7, #12]
   11dfa:	681b      	ldr	r3, [r3, #0]
   11dfc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   11dfe:	68fb      	ldr	r3, [r7, #12]
   11e00:	681b      	ldr	r3, [r3, #0]
   11e02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   11e04:	429a      	cmp	r2, r3
   11e06:	d117      	bne.n	11e38 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xd68>
   11e08:	68fb      	ldr	r3, [r7, #12]
   11e0a:	681b      	ldr	r3, [r3, #0]
   11e0c:	f893 305f 	ldrb.w	r3, [r3, #95]	; 0x5f
   11e10:	2b00      	cmp	r3, #0
   11e12:	d011      	beq.n	11e38 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xd68>
                SDO->CANtxBuff->data[0] |= 0x01;
   11e14:	68fb      	ldr	r3, [r7, #12]
   11e16:	681b      	ldr	r3, [r3, #0]
   11e18:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   11e1c:	68fa      	ldr	r2, [r7, #12]
   11e1e:	6812      	ldr	r2, [r2, #0]
   11e20:	f8d2 2084 	ldr.w	r2, [r2, #132]	; 0x84
   11e24:	7952      	ldrb	r2, [r2, #5]
   11e26:	f042 0201 	orr.w	r2, r2, #1
   11e2a:	b2d2      	uxtb	r2, r2
   11e2c:	715a      	strb	r2, [r3, #5]
                SDO->state = CO_SDO_ST_IDLE;
   11e2e:	68fb      	ldr	r3, [r7, #12]
   11e30:	681b      	ldr	r3, [r3, #0]
   11e32:	2200      	movs	r2, #0
   11e34:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
            }

            /* send response */
            sendResponse = true;
   11e38:	2301      	movs	r3, #1
   11e3a:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
            break;
   11e3e:	e2c1      	b.n	123c4 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x12f4>
        }

        case CO_SDO_ST_UPLOAD_BL_INITIATE:{
            /* default response */
            SDO->CANtxBuff->data[1] = SDO->CANrxData[1];
   11e40:	68fb      	ldr	r3, [r7, #12]
   11e42:	681b      	ldr	r3, [r3, #0]
   11e44:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   11e48:	68fa      	ldr	r2, [r7, #12]
   11e4a:	6812      	ldr	r2, [r2, #0]
   11e4c:	7852      	ldrb	r2, [r2, #1]
   11e4e:	719a      	strb	r2, [r3, #6]
            SDO->CANtxBuff->data[2] = SDO->CANrxData[2];
   11e50:	68fb      	ldr	r3, [r7, #12]
   11e52:	681b      	ldr	r3, [r3, #0]
   11e54:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   11e58:	68fa      	ldr	r2, [r7, #12]
   11e5a:	6812      	ldr	r2, [r2, #0]
   11e5c:	7892      	ldrb	r2, [r2, #2]
   11e5e:	71da      	strb	r2, [r3, #7]
            SDO->CANtxBuff->data[3] = SDO->CANrxData[3];
   11e60:	68fb      	ldr	r3, [r7, #12]
   11e62:	681b      	ldr	r3, [r3, #0]
   11e64:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   11e68:	68fa      	ldr	r2, [r7, #12]
   11e6a:	6812      	ldr	r2, [r2, #0]
   11e6c:	78d2      	ldrb	r2, [r2, #3]
   11e6e:	721a      	strb	r2, [r3, #8]

            /* calculate CRC, if enabled */
            if((SDO->CANrxData[0] & 0x04U) != 0U){
   11e70:	68fb      	ldr	r3, [r7, #12]
   11e72:	681b      	ldr	r3, [r3, #0]
   11e74:	781b      	ldrb	r3, [r3, #0]
   11e76:	f003 0304 	and.w	r3, r3, #4
   11e7a:	2b00      	cmp	r3, #0
   11e7c:	d013      	beq.n	11ea6 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xdd6>
                SDO->crcEnabled = true;
   11e7e:	68fb      	ldr	r3, [r7, #12]
   11e80:	681b      	ldr	r3, [r3, #0]
   11e82:	2201      	movs	r2, #1
   11e84:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                SDO->crc = crc16_ccitt(SDO->ODF_arg.data, SDO->ODF_arg.dataLength, 0);
   11e88:	68fb      	ldr	r3, [r7, #12]
   11e8a:	681c      	ldr	r4, [r3, #0]
   11e8c:	68fb      	ldr	r3, [r7, #12]
   11e8e:	681b      	ldr	r3, [r3, #0]
   11e90:	6c59      	ldr	r1, [r3, #68]	; 0x44
   11e92:	68fb      	ldr	r3, [r7, #12]
   11e94:	681b      	ldr	r3, [r3, #0]
   11e96:	6cda      	ldr	r2, [r3, #76]	; 0x4c
   11e98:	2300      	movs	r3, #0
   11e9a:	68f8      	ldr	r0, [r7, #12]
   11e9c:	4d93      	ldr	r5, [pc, #588]	; (120ec <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x101c>)
   11e9e:	47a8      	blx	r5
   11ea0:	4603      	mov	r3, r0
   11ea2:	6763      	str	r3, [r4, #116]	; 0x74
   11ea4:	e008      	b.n	11eb8 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xde8>
            }
            else{
                SDO->crcEnabled = false;
   11ea6:	68fb      	ldr	r3, [r7, #12]
   11ea8:	681b      	ldr	r3, [r3, #0]
   11eaa:	2200      	movs	r2, #0
   11eac:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                SDO->crc = 0;
   11eb0:	68fb      	ldr	r3, [r7, #12]
   11eb2:	681b      	ldr	r3, [r3, #0]
   11eb4:	2200      	movs	r2, #0
   11eb6:	675a      	str	r2, [r3, #116]	; 0x74
            }

            /* Number of segments per block */
            SDO->blksize = SDO->CANrxData[4];
   11eb8:	68fb      	ldr	r3, [r7, #12]
   11eba:	681b      	ldr	r3, [r3, #0]
   11ebc:	68fa      	ldr	r2, [r7, #12]
   11ebe:	6812      	ldr	r2, [r2, #0]
   11ec0:	7912      	ldrb	r2, [r2, #4]
   11ec2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

            /* verify client subcommand */
            if((SDO->CANrxData[0]&0x03U) != 0x00U){
   11ec6:	68fb      	ldr	r3, [r7, #12]
   11ec8:	681b      	ldr	r3, [r3, #0]
   11eca:	781b      	ldrb	r3, [r3, #0]
   11ecc:	f003 0303 	and.w	r3, r3, #3
   11ed0:	2b00      	cmp	r3, #0
   11ed2:	d008      	beq.n	11ee6 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xe16>
                CO_SDO_abort(SDO, CO_SDO_AB_CMD);/* Client command specifier not valid or unknown. */
   11ed4:	68fb      	ldr	r3, [r7, #12]
   11ed6:	681b      	ldr	r3, [r3, #0]
   11ed8:	4985      	ldr	r1, [pc, #532]	; (120f0 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x1020>)
   11eda:	4618      	mov	r0, r3
   11edc:	4b85      	ldr	r3, [pc, #532]	; (120f4 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x1024>)
   11ede:	4798      	blx	r3
                return -1;
   11ee0:	f04f 33ff 	mov.w	r3, #4294967295
   11ee4:	e28a      	b.n	123fc <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x132c>
            }

            /* verify blksize and if SDO data buffer is large enough */
            if((SDO->blksize < 1U) || (SDO->blksize > 127U) ||
   11ee6:	68fb      	ldr	r3, [r7, #12]
   11ee8:	681b      	ldr	r3, [r3, #0]
   11eea:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
   11eee:	2b00      	cmp	r3, #0
   11ef0:	d019      	beq.n	11f26 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xe56>
   11ef2:	68fb      	ldr	r3, [r7, #12]
   11ef4:	681b      	ldr	r3, [r3, #0]
   11ef6:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
   11efa:	b25b      	sxtb	r3, r3
   11efc:	2b00      	cmp	r3, #0
   11efe:	db12      	blt.n	11f26 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xe56>
               (((SDO->blksize*7U) > SDO->ODF_arg.dataLength) && (!SDO->ODF_arg.lastSegment))){
   11f00:	68fb      	ldr	r3, [r7, #12]
   11f02:	681b      	ldr	r3, [r3, #0]
   11f04:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
   11f08:	461a      	mov	r2, r3
   11f0a:	4613      	mov	r3, r2
   11f0c:	00db      	lsls	r3, r3, #3
   11f0e:	1a9a      	subs	r2, r3, r2
   11f10:	68fb      	ldr	r3, [r7, #12]
   11f12:	681b      	ldr	r3, [r3, #0]
   11f14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
            if((SDO->blksize < 1U) || (SDO->blksize > 127U) ||
   11f16:	429a      	cmp	r2, r3
   11f18:	d90e      	bls.n	11f38 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xe68>
               (((SDO->blksize*7U) > SDO->ODF_arg.dataLength) && (!SDO->ODF_arg.lastSegment))){
   11f1a:	68fb      	ldr	r3, [r7, #12]
   11f1c:	681b      	ldr	r3, [r3, #0]
   11f1e:	f893 305f 	ldrb.w	r3, [r3, #95]	; 0x5f
   11f22:	2b00      	cmp	r3, #0
   11f24:	d108      	bne.n	11f38 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xe68>
                CO_SDO_abort(SDO, CO_SDO_AB_BLOCK_SIZE); /* Invalid block size (block mode only). */
   11f26:	68fb      	ldr	r3, [r7, #12]
   11f28:	681b      	ldr	r3, [r3, #0]
   11f2a:	4973      	ldr	r1, [pc, #460]	; (120f8 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x1028>)
   11f2c:	4618      	mov	r0, r3
   11f2e:	4b71      	ldr	r3, [pc, #452]	; (120f4 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x1024>)
   11f30:	4798      	blx	r3
                return -1;
   11f32:	f04f 33ff 	mov.w	r3, #4294967295
   11f36:	e261      	b.n	123fc <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x132c>
            }

            /* indicate data size, if known */
            if(SDO->ODF_arg.dataLengthTotal != 0U){
   11f38:	68fb      	ldr	r3, [r7, #12]
   11f3a:	681b      	ldr	r3, [r3, #0]
   11f3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   11f3e:	2b00      	cmp	r3, #0
   11f40:	d015      	beq.n	11f6e <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xe9e>
                uint32_t len = SDO->ODF_arg.dataLengthTotal;
   11f42:	68fb      	ldr	r3, [r7, #12]
   11f44:	681b      	ldr	r3, [r3, #0]
   11f46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   11f48:	613b      	str	r3, [r7, #16]
                CO_memcpySwap4(&SDO->CANtxBuff->data[4], &len);
   11f4a:	68fb      	ldr	r3, [r7, #12]
   11f4c:	681b      	ldr	r3, [r3, #0]
   11f4e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   11f52:	3309      	adds	r3, #9
   11f54:	f107 0210 	add.w	r2, r7, #16
   11f58:	4619      	mov	r1, r3
   11f5a:	68f8      	ldr	r0, [r7, #12]
   11f5c:	4b67      	ldr	r3, [pc, #412]	; (120fc <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x102c>)
   11f5e:	4798      	blx	r3
                SDO->CANtxBuff->data[0] = 0xC6U;
   11f60:	68fb      	ldr	r3, [r7, #12]
   11f62:	681b      	ldr	r3, [r3, #0]
   11f64:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   11f68:	22c6      	movs	r2, #198	; 0xc6
   11f6a:	715a      	strb	r2, [r3, #5]
   11f6c:	e005      	b.n	11f7a <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xeaa>
            }
            else{
                SDO->CANtxBuff->data[0] = 0xC4U;
   11f6e:	68fb      	ldr	r3, [r7, #12]
   11f70:	681b      	ldr	r3, [r3, #0]
   11f72:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   11f76:	22c4      	movs	r2, #196	; 0xc4
   11f78:	715a      	strb	r2, [r3, #5]
            }

            /* send response */
            SDO->state = CO_SDO_ST_UPLOAD_BL_INITIATE_2;
   11f7a:	68fb      	ldr	r3, [r7, #12]
   11f7c:	681b      	ldr	r3, [r3, #0]
   11f7e:	2225      	movs	r2, #37	; 0x25
   11f80:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
            sendResponse = true;
   11f84:	2301      	movs	r3, #1
   11f86:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
            break;
   11f8a:	e21b      	b.n	123c4 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x12f4>
        }

        case CO_SDO_ST_UPLOAD_BL_INITIATE_2:{
            /* verify client command specifier and subcommand */
            if((SDO->CANrxData[0]&0xE3U) != 0xA3U){
   11f8c:	68fb      	ldr	r3, [r7, #12]
   11f8e:	681b      	ldr	r3, [r3, #0]
   11f90:	781b      	ldrb	r3, [r3, #0]
   11f92:	f003 03e3 	and.w	r3, r3, #227	; 0xe3
   11f96:	2ba3      	cmp	r3, #163	; 0xa3
   11f98:	d008      	beq.n	11fac <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xedc>
                CO_SDO_abort(SDO, CO_SDO_AB_CMD);/* Client command specifier not valid or unknown. */
   11f9a:	68fb      	ldr	r3, [r7, #12]
   11f9c:	681b      	ldr	r3, [r3, #0]
   11f9e:	4954      	ldr	r1, [pc, #336]	; (120f0 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x1020>)
   11fa0:	4618      	mov	r0, r3
   11fa2:	4b54      	ldr	r3, [pc, #336]	; (120f4 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x1024>)
   11fa4:	4798      	blx	r3
                return -1;
   11fa6:	f04f 33ff 	mov.w	r3, #4294967295
   11faa:	e227      	b.n	123fc <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x132c>
            }

            SDO->bufferOffset = 0;
   11fac:	68fb      	ldr	r3, [r7, #12]
   11fae:	681b      	ldr	r3, [r3, #0]
   11fb0:	2200      	movs	r2, #0
   11fb2:	639a      	str	r2, [r3, #56]	; 0x38
            SDO->sequence = 0;
   11fb4:	68fb      	ldr	r3, [r7, #12]
   11fb6:	681b      	ldr	r3, [r3, #0]
   11fb8:	2200      	movs	r2, #0
   11fba:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
            SDO->endOfTransfer = false;
   11fbe:	68fb      	ldr	r3, [r7, #12]
   11fc0:	681b      	ldr	r3, [r3, #0]
   11fc2:	2200      	movs	r2, #0
   11fc4:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
            SDO->CANrxNew = false;
   11fc8:	68fb      	ldr	r3, [r7, #12]
   11fca:	681b      	ldr	r3, [r3, #0]
   11fcc:	2200      	movs	r2, #0
   11fce:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
            SDO->state = CO_SDO_ST_UPLOAD_BL_SUBBLOCK;
   11fd2:	68fb      	ldr	r3, [r7, #12]
   11fd4:	681b      	ldr	r3, [r3, #0]
   11fd6:	2226      	movs	r2, #38	; 0x26
   11fd8:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
            /* continue in next case */
        }

        case CO_SDO_ST_UPLOAD_BL_SUBBLOCK:{
            /* is block confirmation received */
            if(SDO->CANrxNew){
   11fdc:	68fb      	ldr	r3, [r7, #12]
   11fde:	681b      	ldr	r3, [r3, #0]
   11fe0:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
   11fe4:	2b00      	cmp	r3, #0
   11fe6:	f000 813f 	beq.w	12268 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x1198>
                uint8_t ackseq;
                uint32_t j;

                /* verify client command specifier and subcommand */
                if((SDO->CANrxData[0]&0xE3U) != 0xA2U){
   11fea:	68fb      	ldr	r3, [r7, #12]
   11fec:	681b      	ldr	r3, [r3, #0]
   11fee:	781b      	ldrb	r3, [r3, #0]
   11ff0:	f003 03e3 	and.w	r3, r3, #227	; 0xe3
   11ff4:	2ba2      	cmp	r3, #162	; 0xa2
   11ff6:	d008      	beq.n	1200a <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xf3a>
                    CO_SDO_abort(SDO, CO_SDO_AB_CMD);/* Client command specifier not valid or unknown. */
   11ff8:	68fb      	ldr	r3, [r7, #12]
   11ffa:	681b      	ldr	r3, [r3, #0]
   11ffc:	493c      	ldr	r1, [pc, #240]	; (120f0 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x1020>)
   11ffe:	4618      	mov	r0, r3
   12000:	4b3c      	ldr	r3, [pc, #240]	; (120f4 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x1024>)
   12002:	4798      	blx	r3
                    return -1;
   12004:	f04f 33ff 	mov.w	r3, #4294967295
   12008:	e1f8      	b.n	123fc <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x132c>
                }

                ackseq = SDO->CANrxData[1];   /* sequence number of the last segment, that was received correctly. */
   1200a:	68fb      	ldr	r3, [r7, #12]
   1200c:	681b      	ldr	r3, [r3, #0]
   1200e:	785b      	ldrb	r3, [r3, #1]
   12010:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

                /* verify if response is too early */
                if(ackseq > SDO->sequence){
   12014:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
   12018:	68fa      	ldr	r2, [r7, #12]
   1201a:	6812      	ldr	r2, [r2, #0]
   1201c:	f892 206a 	ldrb.w	r2, [r2, #106]	; 0x6a
   12020:	4293      	cmp	r3, r2
   12022:	dd08      	ble.n	12036 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xf66>
                    CO_SDO_abort(SDO, CO_SDO_AB_SEQ_NUM); /* Invalid sequence */
   12024:	68fb      	ldr	r3, [r7, #12]
   12026:	681b      	ldr	r3, [r3, #0]
   12028:	4935      	ldr	r1, [pc, #212]	; (12100 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x1030>)
   1202a:	4618      	mov	r0, r3
   1202c:	4b31      	ldr	r3, [pc, #196]	; (120f4 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x1024>)
   1202e:	4798      	blx	r3
                    return -1;
   12030:	f04f 33ff 	mov.w	r3, #4294967295
   12034:	e1e2      	b.n	123fc <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x132c>
                }

                /* end of transfer */
                if((SDO->endOfTransfer) && (ackseq == SDO->blksize)){
   12036:	68fb      	ldr	r3, [r7, #12]
   12038:	681b      	ldr	r3, [r3, #0]
   1203a:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
   1203e:	2b00      	cmp	r3, #0
   12040:	d033      	beq.n	120aa <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xfda>
   12042:	68fb      	ldr	r3, [r7, #12]
   12044:	681b      	ldr	r3, [r3, #0]
   12046:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
   1204a:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
   1204e:	429a      	cmp	r2, r3
   12050:	d12b      	bne.n	120aa <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xfda>
                    /* first response byte */
                    SDO->CANtxBuff->data[0] = 0xC1 | ((7 - SDO->lastLen) << 2);
   12052:	68fb      	ldr	r3, [r7, #12]
   12054:	681b      	ldr	r3, [r3, #0]
   12056:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   1205a:	68fa      	ldr	r2, [r7, #12]
   1205c:	6812      	ldr	r2, [r2, #0]
   1205e:	f892 2078 	ldrb.w	r2, [r2, #120]	; 0x78
   12062:	f1c2 0207 	rsb	r2, r2, #7
   12066:	0092      	lsls	r2, r2, #2
   12068:	b252      	sxtb	r2, r2
   1206a:	f062 023e 	orn	r2, r2, #62	; 0x3e
   1206e:	b252      	sxtb	r2, r2
   12070:	b2d2      	uxtb	r2, r2
   12072:	715a      	strb	r2, [r3, #5]

                    /* CRC */
                    if(SDO->crcEnabled)
   12074:	68fb      	ldr	r3, [r7, #12]
   12076:	681b      	ldr	r3, [r3, #0]
   12078:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
   1207c:	2b00      	cmp	r3, #0
   1207e:	d00b      	beq.n	12098 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xfc8>
                        CO_memcpySwap2(&SDO->CANtxBuff->data[1], &SDO->crc);
   12080:	68fb      	ldr	r3, [r7, #12]
   12082:	681b      	ldr	r3, [r3, #0]
   12084:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   12088:	1d99      	adds	r1, r3, #6
   1208a:	68fb      	ldr	r3, [r7, #12]
   1208c:	681b      	ldr	r3, [r3, #0]
   1208e:	3374      	adds	r3, #116	; 0x74
   12090:	461a      	mov	r2, r3
   12092:	68f8      	ldr	r0, [r7, #12]
   12094:	4b1b      	ldr	r3, [pc, #108]	; (12104 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x1034>)
   12096:	4798      	blx	r3

                    SDO->state = CO_SDO_ST_UPLOAD_BL_END;
   12098:	68fb      	ldr	r3, [r7, #12]
   1209a:	681b      	ldr	r3, [r3, #0]
   1209c:	2227      	movs	r2, #39	; 0x27
   1209e:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69

                    /* send response */
                    sendResponse = true;
   120a2:	2301      	movs	r3, #1
   120a4:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
                    break;
   120a8:	e18c      	b.n	123c4 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x12f4>
                }

                /* move remaining data to the beginning */
                for(i=ackseq*7, j=0; i<SDO->ODF_arg.dataLength; i++, j++)
   120aa:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
   120ae:	4613      	mov	r3, r2
   120b0:	00db      	lsls	r3, r3, #3
   120b2:	1a9b      	subs	r3, r3, r2
   120b4:	63fb      	str	r3, [r7, #60]	; 0x3c
   120b6:	2300      	movs	r3, #0
   120b8:	63bb      	str	r3, [r7, #56]	; 0x38
   120ba:	68fb      	ldr	r3, [r7, #12]
   120bc:	681b      	ldr	r3, [r3, #0]
   120be:	6cda      	ldr	r2, [r3, #76]	; 0x4c
   120c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   120c2:	429a      	cmp	r2, r3
   120c4:	d920      	bls.n	12108 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x1038>
                    SDO->ODF_arg.data[j] = SDO->ODF_arg.data[i];
   120c6:	68fb      	ldr	r3, [r7, #12]
   120c8:	681b      	ldr	r3, [r3, #0]
   120ca:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   120cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   120ce:	4413      	add	r3, r2
   120d0:	68fa      	ldr	r2, [r7, #12]
   120d2:	6812      	ldr	r2, [r2, #0]
   120d4:	6c51      	ldr	r1, [r2, #68]	; 0x44
   120d6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   120d8:	440a      	add	r2, r1
   120da:	7812      	ldrb	r2, [r2, #0]
   120dc:	701a      	strb	r2, [r3, #0]
                for(i=ackseq*7, j=0; i<SDO->ODF_arg.dataLength; i++, j++)
   120de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   120e0:	3301      	adds	r3, #1
   120e2:	63fb      	str	r3, [r7, #60]	; 0x3c
   120e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   120e6:	3301      	adds	r3, #1
   120e8:	63bb      	str	r3, [r7, #56]	; 0x38
   120ea:	e7e6      	b.n	120ba <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xfea>
   120ec:	00012a49 	.word	0x00012a49
   120f0:	05040001 	.word	0x05040001
   120f4:	00011045 	.word	0x00011045
   120f8:	05040002 	.word	0x05040002
   120fc:	00010521 	.word	0x00010521
   12100:	05040003 	.word	0x05040003
   12104:	000104f1 	.word	0x000104f1

                /* set remaining data length in buffer */
                SDO->ODF_arg.dataLength -= ackseq * 7U;
   12108:	68fb      	ldr	r3, [r7, #12]
   1210a:	6819      	ldr	r1, [r3, #0]
   1210c:	68fb      	ldr	r3, [r7, #12]
   1210e:	681b      	ldr	r3, [r3, #0]
   12110:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
   12112:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
   12116:	4613      	mov	r3, r2
   12118:	00db      	lsls	r3, r3, #3
   1211a:	1a9b      	subs	r3, r3, r2
   1211c:	1ac3      	subs	r3, r0, r3
   1211e:	64cb      	str	r3, [r1, #76]	; 0x4c

                /* new block size */
                SDO->blksize = SDO->CANrxData[2];
   12120:	68fb      	ldr	r3, [r7, #12]
   12122:	681b      	ldr	r3, [r3, #0]
   12124:	68fa      	ldr	r2, [r7, #12]
   12126:	6812      	ldr	r2, [r2, #0]
   12128:	7892      	ldrb	r2, [r2, #2]
   1212a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

                /* If data type is domain, re-fill the data buffer if necessary and indicated so. */
                if((SDO->ODF_arg.ODdataStorage == 0) && (SDO->ODF_arg.dataLength < (SDO->blksize*7U)) && (!SDO->ODF_arg.lastSegment)){
   1212e:	68fb      	ldr	r3, [r7, #12]
   12130:	681b      	ldr	r3, [r3, #0]
   12132:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   12134:	2b00      	cmp	r3, #0
   12136:	d168      	bne.n	1220a <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x113a>
   12138:	68fb      	ldr	r3, [r7, #12]
   1213a:	681b      	ldr	r3, [r3, #0]
   1213c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
   1213e:	68fb      	ldr	r3, [r7, #12]
   12140:	681b      	ldr	r3, [r3, #0]
   12142:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
   12146:	4619      	mov	r1, r3
   12148:	460b      	mov	r3, r1
   1214a:	00db      	lsls	r3, r3, #3
   1214c:	1a5b      	subs	r3, r3, r1
   1214e:	429a      	cmp	r2, r3
   12150:	d25b      	bcs.n	1220a <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x113a>
   12152:	68fb      	ldr	r3, [r7, #12]
   12154:	681b      	ldr	r3, [r3, #0]
   12156:	f893 305f 	ldrb.w	r3, [r3, #95]	; 0x5f
   1215a:	2b00      	cmp	r3, #0
   1215c:	d155      	bne.n	1220a <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x113a>
                    /* move the beginning of the data buffer */
                    len = SDO->ODF_arg.dataLength; /* length of valid data in buffer */
   1215e:	68fb      	ldr	r3, [r7, #12]
   12160:	681b      	ldr	r3, [r3, #0]
   12162:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   12164:	643b      	str	r3, [r7, #64]	; 0x40
                    SDO->ODF_arg.data += len;
   12166:	68fb      	ldr	r3, [r7, #12]
   12168:	681b      	ldr	r3, [r3, #0]
   1216a:	68fa      	ldr	r2, [r7, #12]
   1216c:	6812      	ldr	r2, [r2, #0]
   1216e:	6c51      	ldr	r1, [r2, #68]	; 0x44
   12170:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   12172:	440a      	add	r2, r1
   12174:	645a      	str	r2, [r3, #68]	; 0x44
                    SDO->ODF_arg.dataLength = CO_OD_getLength( SDO->entryNo, SDO->ODF_arg.subIndex) - len;
   12176:	68fb      	ldr	r3, [r7, #12]
   12178:	681c      	ldr	r4, [r3, #0]
   1217a:	68fb      	ldr	r3, [r7, #12]
   1217c:	681b      	ldr	r3, [r3, #0]
   1217e:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
   12180:	68fb      	ldr	r3, [r7, #12]
   12182:	681b      	ldr	r3, [r3, #0]
   12184:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
   12188:	461a      	mov	r2, r3
   1218a:	68f8      	ldr	r0, [r7, #12]
   1218c:	4b9d      	ldr	r3, [pc, #628]	; (12404 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x1334>)
   1218e:	4798      	blx	r3
   12190:	4602      	mov	r2, r0
   12192:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   12194:	1ad3      	subs	r3, r2, r3
   12196:	64e3      	str	r3, [r4, #76]	; 0x4c

                    /* read next data from Object dictionary function */
                    abortCode = CO_SDO_readOD( CO_SDO_BUFFER_SIZE);
   12198:	2120      	movs	r1, #32
   1219a:	68f8      	ldr	r0, [r7, #12]
   1219c:	4b9a      	ldr	r3, [pc, #616]	; (12408 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x1338>)
   1219e:	4798      	blx	r3
   121a0:	62b8      	str	r0, [r7, #40]	; 0x28
                    if(abortCode != 0U){
   121a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   121a4:	2b00      	cmp	r3, #0
   121a6:	d008      	beq.n	121ba <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x10ea>
                        CO_SDO_abort(SDO, abortCode);
   121a8:	68fb      	ldr	r3, [r7, #12]
   121aa:	681b      	ldr	r3, [r3, #0]
   121ac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   121ae:	4618      	mov	r0, r3
   121b0:	4b96      	ldr	r3, [pc, #600]	; (1240c <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x133c>)
   121b2:	4798      	blx	r3
                        return -1;
   121b4:	f04f 33ff 	mov.w	r3, #4294967295
   121b8:	e120      	b.n	123fc <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x132c>
                    }

                    /* calculate CRC on next bytes, if enabled */
                    if(SDO->crcEnabled){
   121ba:	68fb      	ldr	r3, [r7, #12]
   121bc:	681b      	ldr	r3, [r3, #0]
   121be:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
   121c2:	2b00      	cmp	r3, #0
   121c4:	d010      	beq.n	121e8 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x1118>
                        SDO->crc = crc16_ccitt(SDO->ODF_arg.data, SDO->ODF_arg.dataLength, SDO->crc);
   121c6:	68fb      	ldr	r3, [r7, #12]
   121c8:	681c      	ldr	r4, [r3, #0]
   121ca:	68fb      	ldr	r3, [r7, #12]
   121cc:	681b      	ldr	r3, [r3, #0]
   121ce:	6c59      	ldr	r1, [r3, #68]	; 0x44
   121d0:	68fb      	ldr	r3, [r7, #12]
   121d2:	681b      	ldr	r3, [r3, #0]
   121d4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
   121d6:	68fb      	ldr	r3, [r7, #12]
   121d8:	681b      	ldr	r3, [r3, #0]
   121da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
   121dc:	b29b      	uxth	r3, r3
   121de:	68f8      	ldr	r0, [r7, #12]
   121e0:	4d8b      	ldr	r5, [pc, #556]	; (12410 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x1340>)
   121e2:	47a8      	blx	r5
   121e4:	4603      	mov	r3, r0
   121e6:	6763      	str	r3, [r4, #116]	; 0x74
                    }

                  /* return to the original data buffer */
                    SDO->ODF_arg.data -= len;
   121e8:	68fb      	ldr	r3, [r7, #12]
   121ea:	681b      	ldr	r3, [r3, #0]
   121ec:	68fa      	ldr	r2, [r7, #12]
   121ee:	6812      	ldr	r2, [r2, #0]
   121f0:	6c51      	ldr	r1, [r2, #68]	; 0x44
   121f2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   121f4:	4252      	negs	r2, r2
   121f6:	440a      	add	r2, r1
   121f8:	645a      	str	r2, [r3, #68]	; 0x44
                    SDO->ODF_arg.dataLength +=  len;
   121fa:	68fb      	ldr	r3, [r7, #12]
   121fc:	681b      	ldr	r3, [r3, #0]
   121fe:	68fa      	ldr	r2, [r7, #12]
   12200:	6812      	ldr	r2, [r2, #0]
   12202:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
   12204:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   12206:	440a      	add	r2, r1
   12208:	64da      	str	r2, [r3, #76]	; 0x4c
                }

                /* verify if SDO data buffer is large enough */
                if(((SDO->blksize*7U) > SDO->ODF_arg.dataLength) && (!SDO->ODF_arg.lastSegment)){
   1220a:	68fb      	ldr	r3, [r7, #12]
   1220c:	681b      	ldr	r3, [r3, #0]
   1220e:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
   12212:	461a      	mov	r2, r3
   12214:	4613      	mov	r3, r2
   12216:	00db      	lsls	r3, r3, #3
   12218:	1a9a      	subs	r2, r3, r2
   1221a:	68fb      	ldr	r3, [r7, #12]
   1221c:	681b      	ldr	r3, [r3, #0]
   1221e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   12220:	429a      	cmp	r2, r3
   12222:	d90e      	bls.n	12242 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x1172>
   12224:	68fb      	ldr	r3, [r7, #12]
   12226:	681b      	ldr	r3, [r3, #0]
   12228:	f893 305f 	ldrb.w	r3, [r3, #95]	; 0x5f
   1222c:	2b00      	cmp	r3, #0
   1222e:	d108      	bne.n	12242 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x1172>
                    CO_SDO_abort(SDO, CO_SDO_AB_BLOCK_SIZE); /* Invalid block size (block mode only). */
   12230:	68fb      	ldr	r3, [r7, #12]
   12232:	681b      	ldr	r3, [r3, #0]
   12234:	4977      	ldr	r1, [pc, #476]	; (12414 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x1344>)
   12236:	4618      	mov	r0, r3
   12238:	4b74      	ldr	r3, [pc, #464]	; (1240c <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x133c>)
   1223a:	4798      	blx	r3
                    return -1;
   1223c:	f04f 33ff 	mov.w	r3, #4294967295
   12240:	e0dc      	b.n	123fc <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x132c>
                }

                SDO->bufferOffset = 0U;
   12242:	68fb      	ldr	r3, [r7, #12]
   12244:	681b      	ldr	r3, [r3, #0]
   12246:	2200      	movs	r2, #0
   12248:	639a      	str	r2, [r3, #56]	; 0x38
                SDO->sequence = 0U;
   1224a:	68fb      	ldr	r3, [r7, #12]
   1224c:	681b      	ldr	r3, [r3, #0]
   1224e:	2200      	movs	r2, #0
   12250:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
                SDO->endOfTransfer = false;
   12254:	68fb      	ldr	r3, [r7, #12]
   12256:	681b      	ldr	r3, [r3, #0]
   12258:	2200      	movs	r2, #0
   1225a:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79

                /* clear flag here */
                SDO->CANrxNew = false;
   1225e:	68fb      	ldr	r3, [r7, #12]
   12260:	681b      	ldr	r3, [r3, #0]
   12262:	2200      	movs	r2, #0
   12264:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
            }

            /* return, if all segments was already transfered or on end of transfer */
            if((SDO->sequence == SDO->blksize) || (SDO->endOfTransfer)){
   12268:	68fb      	ldr	r3, [r7, #12]
   1226a:	681b      	ldr	r3, [r3, #0]
   1226c:	f893 206a 	ldrb.w	r2, [r3, #106]	; 0x6a
   12270:	68fb      	ldr	r3, [r7, #12]
   12272:	681b      	ldr	r3, [r3, #0]
   12274:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
   12278:	429a      	cmp	r2, r3
   1227a:	d005      	beq.n	12288 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x11b8>
   1227c:	68fb      	ldr	r3, [r7, #12]
   1227e:	681b      	ldr	r3, [r3, #0]
   12280:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
   12284:	2b00      	cmp	r3, #0
   12286:	d001      	beq.n	1228c <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x11bc>
                return 1;/* don't clear the SDO->CANrxNew flag, so return directly */
   12288:	2301      	movs	r3, #1
   1228a:	e0b7      	b.n	123fc <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x132c>
            }

            /* reset timeout */
            SDO->timeoutTimer = 0;
   1228c:	68fb      	ldr	r3, [r7, #12]
   1228e:	681b      	ldr	r3, [r3, #0]
   12290:	2200      	movs	r2, #0
   12292:	66da      	str	r2, [r3, #108]	; 0x6c

            /* calculate length to be sent */
            len = SDO->ODF_arg.dataLength - SDO->bufferOffset;
   12294:	68fb      	ldr	r3, [r7, #12]
   12296:	681b      	ldr	r3, [r3, #0]
   12298:	6cda      	ldr	r2, [r3, #76]	; 0x4c
   1229a:	68fb      	ldr	r3, [r7, #12]
   1229c:	681b      	ldr	r3, [r3, #0]
   1229e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   122a0:	1ad3      	subs	r3, r2, r3
   122a2:	643b      	str	r3, [r7, #64]	; 0x40
            if(len > 7U){
   122a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   122a6:	2b07      	cmp	r3, #7
   122a8:	d901      	bls.n	122ae <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x11de>
                len = 7U;
   122aa:	2307      	movs	r3, #7
   122ac:	643b      	str	r3, [r7, #64]	; 0x40
            }

            /* fill response data bytes */
            for(i=0U; i<len; i++){
   122ae:	2300      	movs	r3, #0
   122b0:	63fb      	str	r3, [r7, #60]	; 0x3c
   122b2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   122b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   122b6:	429a      	cmp	r2, r3
   122b8:	d215      	bcs.n	122e6 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x1216>
                SDO->CANtxBuff->data[i+1] = SDO->ODF_arg.data[SDO->bufferOffset++];
   122ba:	68fb      	ldr	r3, [r7, #12]
   122bc:	681b      	ldr	r3, [r3, #0]
   122be:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
   122c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   122c4:	1c59      	adds	r1, r3, #1
   122c6:	68fb      	ldr	r3, [r7, #12]
   122c8:	681b      	ldr	r3, [r3, #0]
   122ca:	6c5c      	ldr	r4, [r3, #68]	; 0x44
   122cc:	68fb      	ldr	r3, [r7, #12]
   122ce:	681a      	ldr	r2, [r3, #0]
   122d0:	6b93      	ldr	r3, [r2, #56]	; 0x38
   122d2:	1c5d      	adds	r5, r3, #1
   122d4:	6395      	str	r5, [r2, #56]	; 0x38
   122d6:	4423      	add	r3, r4
   122d8:	781a      	ldrb	r2, [r3, #0]
   122da:	1843      	adds	r3, r0, r1
   122dc:	715a      	strb	r2, [r3, #5]
            for(i=0U; i<len; i++){
   122de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   122e0:	3301      	adds	r3, #1
   122e2:	63fb      	str	r3, [r7, #60]	; 0x3c
   122e4:	e7e5      	b.n	122b2 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x11e2>
            }

            /* first response byte */
            SDO->CANtxBuff->data[0] = ++SDO->sequence;
   122e6:	68fb      	ldr	r3, [r7, #12]
   122e8:	681b      	ldr	r3, [r3, #0]
   122ea:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
   122ee:	68fb      	ldr	r3, [r7, #12]
   122f0:	681b      	ldr	r3, [r3, #0]
   122f2:	f893 106a 	ldrb.w	r1, [r3, #106]	; 0x6a
   122f6:	3101      	adds	r1, #1
   122f8:	b2c9      	uxtb	r1, r1
   122fa:	f883 106a 	strb.w	r1, [r3, #106]	; 0x6a
   122fe:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
   12302:	7153      	strb	r3, [r2, #5]

            /* verify end of transfer */
            if((SDO->bufferOffset == SDO->ODF_arg.dataLength) && (SDO->ODF_arg.lastSegment)){
   12304:	68fb      	ldr	r3, [r7, #12]
   12306:	681b      	ldr	r3, [r3, #0]
   12308:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   1230a:	68fb      	ldr	r3, [r7, #12]
   1230c:	681b      	ldr	r3, [r3, #0]
   1230e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   12310:	429a      	cmp	r2, r3
   12312:	d125      	bne.n	12360 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x1290>
   12314:	68fb      	ldr	r3, [r7, #12]
   12316:	681b      	ldr	r3, [r3, #0]
   12318:	f893 305f 	ldrb.w	r3, [r3, #95]	; 0x5f
   1231c:	2b00      	cmp	r3, #0
   1231e:	d01f      	beq.n	12360 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x1290>
                SDO->CANtxBuff->data[0] |= 0x80;
   12320:	68fb      	ldr	r3, [r7, #12]
   12322:	681b      	ldr	r3, [r3, #0]
   12324:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   12328:	68fa      	ldr	r2, [r7, #12]
   1232a:	6812      	ldr	r2, [r2, #0]
   1232c:	f8d2 2084 	ldr.w	r2, [r2, #132]	; 0x84
   12330:	7952      	ldrb	r2, [r2, #5]
   12332:	f062 027f 	orn	r2, r2, #127	; 0x7f
   12336:	b2d2      	uxtb	r2, r2
   12338:	715a      	strb	r2, [r3, #5]
                SDO->lastLen = len;
   1233a:	68fb      	ldr	r3, [r7, #12]
   1233c:	681b      	ldr	r3, [r3, #0]
   1233e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   12340:	b2d2      	uxtb	r2, r2
   12342:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
                SDO->blksize = SDO->sequence;
   12346:	68fb      	ldr	r3, [r7, #12]
   12348:	681b      	ldr	r3, [r3, #0]
   1234a:	68fa      	ldr	r2, [r7, #12]
   1234c:	6812      	ldr	r2, [r2, #0]
   1234e:	f892 206a 	ldrb.w	r2, [r2, #106]	; 0x6a
   12352:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
                SDO->endOfTransfer = true;
   12356:	68fb      	ldr	r3, [r7, #12]
   12358:	681b      	ldr	r3, [r3, #0]
   1235a:	2201      	movs	r2, #1
   1235c:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
            }

            /* send response */
             ptrCODriverClass->CAN_Send(SDO->CANtxBuff);
   12360:	4b2d      	ldr	r3, [pc, #180]	; (12418 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x1348>)
   12362:	681a      	ldr	r2, [r3, #0]
   12364:	68fb      	ldr	r3, [r7, #12]
   12366:	681b      	ldr	r3, [r3, #0]
   12368:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   1236c:	4619      	mov	r1, r3
   1236e:	4610      	mov	r0, r2
   12370:	4b2a      	ldr	r3, [pc, #168]	; (1241c <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x134c>)
   12372:	4798      	blx	r3

            /* Set timerNext_ms to 0 to inform OS to call this function again without delay. */
            if(timerNext_ms != NULL){
   12374:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   12376:	2b00      	cmp	r3, #0
   12378:	d002      	beq.n	12380 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x12b0>
                *timerNext_ms = 0;
   1237a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   1237c:	2200      	movs	r2, #0
   1237e:	601a      	str	r2, [r3, #0]
            }

            /* don't clear the SDO->CANrxNew flag, so return directly */
            return 1;
   12380:	2301      	movs	r3, #1
   12382:	e03b      	b.n	123fc <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x132c>
        }

        case CO_SDO_ST_UPLOAD_BL_END:{
            /* verify client command specifier */
            if((SDO->CANrxData[0]&0xE1U) != 0xA1U){
   12384:	68fb      	ldr	r3, [r7, #12]
   12386:	681b      	ldr	r3, [r3, #0]
   12388:	781b      	ldrb	r3, [r3, #0]
   1238a:	f003 03e1 	and.w	r3, r3, #225	; 0xe1
   1238e:	2ba1      	cmp	r3, #161	; 0xa1
   12390:	d008      	beq.n	123a4 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x12d4>
                CO_SDO_abort(SDO, CO_SDO_AB_CMD);/* Client command specifier not valid or unknown. */
   12392:	68fb      	ldr	r3, [r7, #12]
   12394:	681b      	ldr	r3, [r3, #0]
   12396:	4922      	ldr	r1, [pc, #136]	; (12420 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x1350>)
   12398:	4618      	mov	r0, r3
   1239a:	4b1c      	ldr	r3, [pc, #112]	; (1240c <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x133c>)
   1239c:	4798      	blx	r3
                return -1;
   1239e:	f04f 33ff 	mov.w	r3, #4294967295
   123a2:	e02b      	b.n	123fc <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x132c>
            }

            SDO->state = CO_SDO_ST_IDLE;
   123a4:	68fb      	ldr	r3, [r7, #12]
   123a6:	681b      	ldr	r3, [r3, #0]
   123a8:	2200      	movs	r2, #0
   123aa:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
            break;
   123ae:	e009      	b.n	123c4 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x12f4>
        }

        default:{
            CO_SDO_abort(SDO, CO_SDO_AB_DEVICE_INCOMPAT);/* general internal incompatibility in the device */
   123b0:	68fb      	ldr	r3, [r7, #12]
   123b2:	681b      	ldr	r3, [r3, #0]
   123b4:	491b      	ldr	r1, [pc, #108]	; (12424 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x1354>)
   123b6:	4618      	mov	r0, r3
   123b8:	4b14      	ldr	r3, [pc, #80]	; (1240c <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x133c>)
   123ba:	4798      	blx	r3
            return -1;
   123bc:	f04f 33ff 	mov.w	r3, #4294967295
   123c0:	e01c      	b.n	123fc <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x132c>
            break;
   123c2:	bf00      	nop
        }
    }

    /* free buffer and send message */
    SDO->CANrxNew = false;
   123c4:	68fb      	ldr	r3, [r7, #12]
   123c6:	681b      	ldr	r3, [r3, #0]
   123c8:	2200      	movs	r2, #0
   123ca:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
    if(sendResponse) {
   123ce:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
   123d2:	2b00      	cmp	r3, #0
   123d4:	d009      	beq.n	123ea <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x131a>
        ptrCODriverClass->CAN_Send(SDO->CANtxBuff);
   123d6:	4b10      	ldr	r3, [pc, #64]	; (12418 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x1348>)
   123d8:	681a      	ldr	r2, [r3, #0]
   123da:	68fb      	ldr	r3, [r7, #12]
   123dc:	681b      	ldr	r3, [r3, #0]
   123de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   123e2:	4619      	mov	r1, r3
   123e4:	4610      	mov	r0, r2
   123e6:	4b0d      	ldr	r3, [pc, #52]	; (1241c <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x134c>)
   123e8:	4798      	blx	r3
    }

    if(SDO->state != CO_SDO_ST_IDLE){
   123ea:	68fb      	ldr	r3, [r7, #12]
   123ec:	681b      	ldr	r3, [r3, #0]
   123ee:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
   123f2:	2b00      	cmp	r3, #0
   123f4:	d001      	beq.n	123fa <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x132a>
        return 1;
   123f6:	2301      	movs	r3, #1
   123f8:	e000      	b.n	123fc <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x132c>
    }

    return 0;
   123fa:	2300      	movs	r3, #0
}
   123fc:	4618      	mov	r0, r3
   123fe:	3748      	adds	r7, #72	; 0x48
   12400:	46bd      	mov	sp, r7
   12402:	bdb0      	pop	{r4, r5, r7, pc}
   12404:	00010a35 	.word	0x00010a35
   12408:	00010df1 	.word	0x00010df1
   1240c:	00011045 	.word	0x00011045
   12410:	00012a49 	.word	0x00012a49
   12414:	05040002 	.word	0x05040002
   12418:	200019a4 	.word	0x200019a4
   1241c:	0000d961 	.word	0x0000d961
   12420:	05040001 	.word	0x05040001
   12424:	06040047 	.word	0x06040047

00012428 <_ZN13CO_SYNC_ClassC1Ev>:

#include "CO_SYNC_Class.h"
#include "CO_Driver_Class.h"

// default constructor
CO_SYNC_Class::CO_SYNC_Class()
   12428:	b480      	push	{r7}
   1242a:	b083      	sub	sp, #12
   1242c:	af00      	add	r7, sp, #0
   1242e:	6078      	str	r0, [r7, #4]
{
} //CO_SYNC_Class
   12430:	687b      	ldr	r3, [r7, #4]
   12432:	4618      	mov	r0, r3
   12434:	370c      	adds	r7, #12
   12436:	46bd      	mov	sp, r7
   12438:	bc80      	pop	{r7}
   1243a:	4770      	bx	lr

0001243c <_ZN13CO_SYNC_ClassD1Ev>:

// default destructor
CO_SYNC_Class::~CO_SYNC_Class()
   1243c:	b480      	push	{r7}
   1243e:	b083      	sub	sp, #12
   12440:	af00      	add	r7, sp, #0
   12442:	6078      	str	r0, [r7, #4]
{
} //~CO_SYNC_Class
   12444:	687b      	ldr	r3, [r7, #4]
   12446:	4618      	mov	r0, r3
   12448:	370c      	adds	r7, #12
   1244a:	46bd      	mov	sp, r7
   1244c:	bc80      	pop	{r7}
   1244e:	4770      	bx	lr

00012450 <_ZL15CO_SYNC_receivePvPK13CO_CANrxMsg_t>:
 *
 * Function will be called (by CAN receive interrupt) every time, when CAN
 * message with correct identifier will be received. For more information and
 * description of parameters see file CO_driver.h.
 */
static void CO_SYNC_receive(void *object, const CO_CANrxMsg_t *msg){
   12450:	b480      	push	{r7}
   12452:	b085      	sub	sp, #20
   12454:	af00      	add	r7, sp, #0
   12456:	6078      	str	r0, [r7, #4]
   12458:	6039      	str	r1, [r7, #0]
	
    CO_SYNC_t *SYNC;
    uint8_t operState;

    SYNC = (CO_SYNC_t*)object;   /* this is the correct pointer type of the first argument */
   1245a:	687b      	ldr	r3, [r7, #4]
   1245c:	60fb      	str	r3, [r7, #12]
    operState = *SYNC->operatingState;
   1245e:	68fb      	ldr	r3, [r7, #12]
   12460:	685b      	ldr	r3, [r3, #4]
   12462:	781b      	ldrb	r3, [r3, #0]
   12464:	72fb      	strb	r3, [r7, #11]

    if((operState == CO_NMT_OPERATIONAL) || (operState == CO_NMT_PRE_OPERATIONAL)){
   12466:	7afb      	ldrb	r3, [r7, #11]
   12468:	2b05      	cmp	r3, #5
   1246a:	d002      	beq.n	12472 <_ZL15CO_SYNC_receivePvPK13CO_CANrxMsg_t+0x22>
   1246c:	7afb      	ldrb	r3, [r7, #11]
   1246e:	2b7f      	cmp	r3, #127	; 0x7f
   12470:	d132      	bne.n	124d8 <_ZL15CO_SYNC_receivePvPK13CO_CANrxMsg_t+0x88>
        if(SYNC->counterOverflowValue == 0){
   12472:	68fb      	ldr	r3, [r7, #12]
   12474:	7e1b      	ldrb	r3, [r3, #24]
   12476:	2b00      	cmp	r3, #0
   12478:	d10e      	bne.n	12498 <_ZL15CO_SYNC_receivePvPK13CO_CANrxMsg_t+0x48>
            if(msg->DLC == 0U){
   1247a:	683b      	ldr	r3, [r7, #0]
   1247c:	7d1b      	ldrb	r3, [r3, #20]
   1247e:	2b00      	cmp	r3, #0
   12480:	d103      	bne.n	1248a <_ZL15CO_SYNC_receivePvPK13CO_CANrxMsg_t+0x3a>
                SYNC->CANrxNew = true;
   12482:	68fb      	ldr	r3, [r7, #12]
   12484:	2201      	movs	r2, #1
   12486:	769a      	strb	r2, [r3, #26]
   12488:	e018      	b.n	124bc <_ZL15CO_SYNC_receivePvPK13CO_CANrxMsg_t+0x6c>
            }
            else{
                SYNC->receiveError = (uint32_t)msg->DLC | 0x0100U;
   1248a:	683b      	ldr	r3, [r7, #0]
   1248c:	7d1b      	ldrb	r3, [r3, #20]
   1248e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
   12492:	68fb      	ldr	r3, [r7, #12]
   12494:	625a      	str	r2, [r3, #36]	; 0x24
   12496:	e011      	b.n	124bc <_ZL15CO_SYNC_receivePvPK13CO_CANrxMsg_t+0x6c>
            }
        }
        else{
            if(msg->DLC == 1U){
   12498:	683b      	ldr	r3, [r7, #0]
   1249a:	7d1b      	ldrb	r3, [r3, #20]
   1249c:	2b01      	cmp	r3, #1
   1249e:	d107      	bne.n	124b0 <_ZL15CO_SYNC_receivePvPK13CO_CANrxMsg_t+0x60>
                SYNC->counter = msg->data[0];
   124a0:	683b      	ldr	r3, [r7, #0]
   124a2:	7d5a      	ldrb	r2, [r3, #21]
   124a4:	68fb      	ldr	r3, [r7, #12]
   124a6:	771a      	strb	r2, [r3, #28]
                SYNC->CANrxNew = true;
   124a8:	68fb      	ldr	r3, [r7, #12]
   124aa:	2201      	movs	r2, #1
   124ac:	769a      	strb	r2, [r3, #26]
   124ae:	e005      	b.n	124bc <_ZL15CO_SYNC_receivePvPK13CO_CANrxMsg_t+0x6c>
            }
            else{
                SYNC->receiveError = (uint32_t)msg->DLC | 0x0200U;
   124b0:	683b      	ldr	r3, [r7, #0]
   124b2:	7d1b      	ldrb	r3, [r3, #20]
   124b4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
   124b8:	68fb      	ldr	r3, [r7, #12]
   124ba:	625a      	str	r2, [r3, #36]	; 0x24
            }
        }
        if(SYNC->CANrxNew) {
   124bc:	68fb      	ldr	r3, [r7, #12]
   124be:	7e9b      	ldrb	r3, [r3, #26]
   124c0:	2b00      	cmp	r3, #0
   124c2:	d009      	beq.n	124d8 <_ZL15CO_SYNC_receivePvPK13CO_CANrxMsg_t+0x88>
            SYNC->CANrxToggle = SYNC->CANrxToggle ? false : true;
   124c4:	68fb      	ldr	r3, [r7, #12]
   124c6:	7edb      	ldrb	r3, [r3, #27]
   124c8:	2b00      	cmp	r3, #0
   124ca:	bf0c      	ite	eq
   124cc:	2301      	moveq	r3, #1
   124ce:	2300      	movne	r3, #0
   124d0:	b2db      	uxtb	r3, r3
   124d2:	461a      	mov	r2, r3
   124d4:	68fb      	ldr	r3, [r7, #12]
   124d6:	76da      	strb	r2, [r3, #27]
        }
    }
}
   124d8:	bf00      	nop
   124da:	3714      	adds	r7, #20
   124dc:	46bd      	mov	sp, r7
   124de:	bc80      	pop	{r7}
   124e0:	4770      	bx	lr
	...

000124e4 <_ZL11CO_ODF_1005P12CO_ODF_arg_t>:
/*
 * Function for accessing _COB ID SYNC Message_ (index 0x1005) from SDO server.
 *
 * For more information see file CO_SDO.h.
 */
static CO_SDO_abortCode_t CO_ODF_1005(CO_ODF_arg_t *ODF_arg){
   124e4:	b590      	push	{r4, r7, lr}
   124e6:	b08b      	sub	sp, #44	; 0x2c
   124e8:	af04      	add	r7, sp, #16
   124ea:	6078      	str	r0, [r7, #4]
    CO_SYNC_t *SYNC;
    uint32_t value;
    CO_SDO_abortCode_t ret = CO_SDO_AB_NONE;
   124ec:	2300      	movs	r3, #0
   124ee:	617b      	str	r3, [r7, #20]

    SYNC = (CO_SYNC_t*) ODF_arg->object;
   124f0:	687b      	ldr	r3, [r7, #4]
   124f2:	681b      	ldr	r3, [r3, #0]
   124f4:	60fb      	str	r3, [r7, #12]
    value =ptrCODriverClass->CO_getUint32(ODF_arg->data);
   124f6:	4b35      	ldr	r3, [pc, #212]	; (125cc <_ZL11CO_ODF_1005P12CO_ODF_arg_t+0xe8>)
   124f8:	681b      	ldr	r3, [r3, #0]
   124fa:	1d1a      	adds	r2, r3, #4
   124fc:	687b      	ldr	r3, [r7, #4]
   124fe:	685b      	ldr	r3, [r3, #4]
   12500:	4619      	mov	r1, r3
   12502:	4610      	mov	r0, r2
   12504:	4b32      	ldr	r3, [pc, #200]	; (125d0 <_ZL11CO_ODF_1005P12CO_ODF_arg_t+0xec>)
   12506:	4798      	blx	r3
   12508:	60b8      	str	r0, [r7, #8]

    if(!ODF_arg->reading){
   1250a:	687b      	ldr	r3, [r7, #4]
   1250c:	7f5b      	ldrb	r3, [r3, #29]
   1250e:	2b00      	cmp	r3, #0
   12510:	d157      	bne.n	125c2 <_ZL11CO_ODF_1005P12CO_ODF_arg_t+0xde>
        uint8_t configureSyncProducer = 0;
   12512:	2300      	movs	r3, #0
   12514:	74fb      	strb	r3, [r7, #19]

        /* only 11-bit CAN identifier is supported */
        if(value & 0x20000000UL){
   12516:	68bb      	ldr	r3, [r7, #8]
   12518:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
   1251c:	2b00      	cmp	r3, #0
   1251e:	d002      	beq.n	12526 <_ZL11CO_ODF_1005P12CO_ODF_arg_t+0x42>
            ret = CO_SDO_AB_INVALID_VALUE;
   12520:	4b2c      	ldr	r3, [pc, #176]	; (125d4 <_ZL11CO_ODF_1005P12CO_ODF_arg_t+0xf0>)
   12522:	617b      	str	r3, [r7, #20]
   12524:	e00d      	b.n	12542 <_ZL11CO_ODF_1005P12CO_ODF_arg_t+0x5e>
        }
        else{
            /* is 'generate Sync messge' bit set? */
            if(value & 0x40000000UL){
   12526:	68bb      	ldr	r3, [r7, #8]
   12528:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
   1252c:	2b00      	cmp	r3, #0
   1252e:	d008      	beq.n	12542 <_ZL11CO_ODF_1005P12CO_ODF_arg_t+0x5e>
                /* if bit was set before, value can not be changed */
                if(SYNC->isProducer){
   12530:	68fb      	ldr	r3, [r7, #12]
   12532:	7a1b      	ldrb	r3, [r3, #8]
   12534:	2b00      	cmp	r3, #0
   12536:	d002      	beq.n	1253e <_ZL11CO_ODF_1005P12CO_ODF_arg_t+0x5a>
                    ret = CO_SDO_AB_DATA_DEV_STATE;
   12538:	4b27      	ldr	r3, [pc, #156]	; (125d8 <_ZL11CO_ODF_1005P12CO_ODF_arg_t+0xf4>)
   1253a:	617b      	str	r3, [r7, #20]
   1253c:	e001      	b.n	12542 <_ZL11CO_ODF_1005P12CO_ODF_arg_t+0x5e>
                }
                else{
                    configureSyncProducer = 1;
   1253e:	2301      	movs	r3, #1
   12540:	74fb      	strb	r3, [r7, #19]
                }
            }
        }

        /* configure sync producer and consumer */
        if(ret == CO_SDO_AB_NONE){
   12542:	697b      	ldr	r3, [r7, #20]
   12544:	2b00      	cmp	r3, #0
   12546:	d13c      	bne.n	125c2 <_ZL11CO_ODF_1005P12CO_ODF_arg_t+0xde>
            SYNC->COB_ID = (uint32_t)(value & 0x7FFU);
   12548:	68bb      	ldr	r3, [r7, #8]
   1254a:	f3c3 020a 	ubfx	r2, r3, #0, #11
   1254e:	68fb      	ldr	r3, [r7, #12]
   12550:	60da      	str	r2, [r3, #12]

            if(configureSyncProducer){
   12552:	7cfb      	ldrb	r3, [r7, #19]
   12554:	2b00      	cmp	r3, #0
   12556:	d021      	beq.n	1259c <_ZL11CO_ODF_1005P12CO_ODF_arg_t+0xb8>
                uint8_t len = 0U;
   12558:	2300      	movs	r3, #0
   1255a:	74bb      	strb	r3, [r7, #18]
                if(SYNC->counterOverflowValue != 0U){
   1255c:	68fb      	ldr	r3, [r7, #12]
   1255e:	7e1b      	ldrb	r3, [r3, #24]
   12560:	2b00      	cmp	r3, #0
   12562:	d007      	beq.n	12574 <_ZL11CO_ODF_1005P12CO_ODF_arg_t+0x90>
                    len = 1U;
   12564:	2301      	movs	r3, #1
   12566:	74bb      	strb	r3, [r7, #18]
                    SYNC->counter = 0U;
   12568:	68fb      	ldr	r3, [r7, #12]
   1256a:	2200      	movs	r2, #0
   1256c:	771a      	strb	r2, [r3, #28]
                    SYNC->timer = 0U;
   1256e:	68fb      	ldr	r3, [r7, #12]
   12570:	2200      	movs	r2, #0
   12572:	621a      	str	r2, [r3, #32]
                }
                SYNC->CANtxBuff = ptrCODriverClass->CAN_Tx_BufferInit(
   12574:	4b15      	ldr	r3, [pc, #84]	; (125cc <_ZL11CO_ODF_1005P12CO_ODF_arg_t+0xe8>)
   12576:	6818      	ldr	r0, [r3, #0]
   12578:	68fb      	ldr	r3, [r7, #12]
   1257a:	6b99      	ldr	r1, [r3, #56]	; 0x38
   1257c:	68fb      	ldr	r3, [r7, #12]
   1257e:	68da      	ldr	r2, [r3, #12]
   12580:	2300      	movs	r3, #0
   12582:	9301      	str	r3, [sp, #4]
   12584:	7cbb      	ldrb	r3, [r7, #18]
   12586:	9300      	str	r3, [sp, #0]
   12588:	2300      	movs	r3, #0
   1258a:	4c14      	ldr	r4, [pc, #80]	; (125dc <_ZL11CO_ODF_1005P12CO_ODF_arg_t+0xf8>)
   1258c:	47a0      	blx	r4
   1258e:	4602      	mov	r2, r0
   12590:	68fb      	ldr	r3, [r7, #12]
   12592:	635a      	str	r2, [r3, #52]	; 0x34
                        SYNC->CANdevTxIdx,      /* index of specific buffer inside CAN module */
                        SYNC->COB_ID,           /* CAN identifier */
                        0,                      /* rtr */
                        len,                    /* number of data bytes */
                        0);                     /* synchronous message flag bit */
                SYNC->isProducer = true;
   12594:	68fb      	ldr	r3, [r7, #12]
   12596:	2201      	movs	r2, #1
   12598:	721a      	strb	r2, [r3, #8]
   1259a:	e002      	b.n	125a2 <_ZL11CO_ODF_1005P12CO_ODF_arg_t+0xbe>
            }
            else{
                SYNC->isProducer = false;
   1259c:	68fb      	ldr	r3, [r7, #12]
   1259e:	2200      	movs	r2, #0
   125a0:	721a      	strb	r2, [r3, #8]
            }

            ptrCODriverClass->CAN_Rx_BufferInit(
   125a2:	4b0a      	ldr	r3, [pc, #40]	; (125cc <_ZL11CO_ODF_1005P12CO_ODF_arg_t+0xe8>)
   125a4:	6818      	ldr	r0, [r3, #0]
   125a6:	68fb      	ldr	r3, [r7, #12]
   125a8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
   125aa:	68fb      	ldr	r3, [r7, #12]
   125ac:	68da      	ldr	r2, [r3, #12]
                    SYNC->CANdevRxIdx,      /* rx buffer index */
                    SYNC->COB_ID,           /* CAN identifier */
                    0x7FF,                  /* mask */
                    0,                      /* rtr */
                    (void*)SYNC,            /* object passed to receive function */
                    CO_SYNC_receive);       /* this function will process received message */
   125ae:	4b0c      	ldr	r3, [pc, #48]	; (125e0 <_ZL11CO_ODF_1005P12CO_ODF_arg_t+0xfc>)
   125b0:	9302      	str	r3, [sp, #8]
   125b2:	68fb      	ldr	r3, [r7, #12]
   125b4:	9301      	str	r3, [sp, #4]
   125b6:	2300      	movs	r3, #0
   125b8:	9300      	str	r3, [sp, #0]
   125ba:	f240 73ff 	movw	r3, #2047	; 0x7ff
   125be:	4c09      	ldr	r4, [pc, #36]	; (125e4 <_ZL11CO_ODF_1005P12CO_ODF_arg_t+0x100>)
   125c0:	47a0      	blx	r4
        }
    }

    return ret;
   125c2:	697b      	ldr	r3, [r7, #20]
}
   125c4:	4618      	mov	r0, r3
   125c6:	371c      	adds	r7, #28
   125c8:	46bd      	mov	sp, r7
   125ca:	bd90      	pop	{r4, r7, pc}
   125cc:	200019a4 	.word	0x200019a4
   125d0:	00010485 	.word	0x00010485
   125d4:	06090030 	.word	0x06090030
   125d8:	08000022 	.word	0x08000022
   125dc:	0000d8b5 	.word	0x0000d8b5
   125e0:	00012451 	.word	0x00012451
   125e4:	0000d7b5 	.word	0x0000d7b5

000125e8 <_ZL11CO_ODF_1006P12CO_ODF_arg_t>:
/*
 * Function for accessing _Communication cycle period_ (index 0x1006) from SDO server.
 *
 * For more information see file CO_SDO.h.
 */
static CO_SDO_abortCode_t CO_ODF_1006(CO_ODF_arg_t *ODF_arg){
   125e8:	b580      	push	{r7, lr}
   125ea:	b086      	sub	sp, #24
   125ec:	af00      	add	r7, sp, #0
   125ee:	6078      	str	r0, [r7, #4]
    CO_SYNC_t *SYNC;
    uint32_t value;
    CO_SDO_abortCode_t ret = CO_SDO_AB_NONE;
   125f0:	2300      	movs	r3, #0
   125f2:	617b      	str	r3, [r7, #20]

    SYNC = (CO_SYNC_t*) ODF_arg->object;
   125f4:	687b      	ldr	r3, [r7, #4]
   125f6:	681b      	ldr	r3, [r3, #0]
   125f8:	613b      	str	r3, [r7, #16]
    value = ptrCODriverClass->CO_getUint32(ODF_arg->data);
   125fa:	4b19      	ldr	r3, [pc, #100]	; (12660 <_ZL11CO_ODF_1006P12CO_ODF_arg_t+0x78>)
   125fc:	681b      	ldr	r3, [r3, #0]
   125fe:	1d1a      	adds	r2, r3, #4
   12600:	687b      	ldr	r3, [r7, #4]
   12602:	685b      	ldr	r3, [r3, #4]
   12604:	4619      	mov	r1, r3
   12606:	4610      	mov	r0, r2
   12608:	4b16      	ldr	r3, [pc, #88]	; (12664 <_ZL11CO_ODF_1006P12CO_ODF_arg_t+0x7c>)
   1260a:	4798      	blx	r3
   1260c:	60f8      	str	r0, [r7, #12]

    if(!ODF_arg->reading){
   1260e:	687b      	ldr	r3, [r7, #4]
   12610:	7f5b      	ldrb	r3, [r3, #29]
   12612:	2b00      	cmp	r3, #0
   12614:	d11f      	bne.n	12656 <_ZL11CO_ODF_1006P12CO_ODF_arg_t+0x6e>
        /* period transition from 0 to something */
        if((SYNC->periodTime == 0) && (value != 0)){
   12616:	693b      	ldr	r3, [r7, #16]
   12618:	691b      	ldr	r3, [r3, #16]
   1261a:	2b00      	cmp	r3, #0
   1261c:	d105      	bne.n	1262a <_ZL11CO_ODF_1006P12CO_ODF_arg_t+0x42>
   1261e:	68fb      	ldr	r3, [r7, #12]
   12620:	2b00      	cmp	r3, #0
   12622:	d002      	beq.n	1262a <_ZL11CO_ODF_1006P12CO_ODF_arg_t+0x42>
            SYNC->counter = 0;
   12624:	693b      	ldr	r3, [r7, #16]
   12626:	2200      	movs	r2, #0
   12628:	771a      	strb	r2, [r3, #28]
        }

        SYNC->periodTime = value;
   1262a:	693b      	ldr	r3, [r7, #16]
   1262c:	68fa      	ldr	r2, [r7, #12]
   1262e:	611a      	str	r2, [r3, #16]
        SYNC->periodTimeoutTime = (value / 2U) * 3U;
   12630:	68fb      	ldr	r3, [r7, #12]
   12632:	085a      	lsrs	r2, r3, #1
   12634:	4613      	mov	r3, r2
   12636:	005b      	lsls	r3, r3, #1
   12638:	441a      	add	r2, r3
   1263a:	693b      	ldr	r3, [r7, #16]
   1263c:	615a      	str	r2, [r3, #20]
        /* overflow? */
        if(SYNC->periodTimeoutTime < value){
   1263e:	693b      	ldr	r3, [r7, #16]
   12640:	695a      	ldr	r2, [r3, #20]
   12642:	68fb      	ldr	r3, [r7, #12]
   12644:	429a      	cmp	r2, r3
   12646:	d203      	bcs.n	12650 <_ZL11CO_ODF_1006P12CO_ODF_arg_t+0x68>
            SYNC->periodTimeoutTime = 0xFFFFFFFFUL;
   12648:	693b      	ldr	r3, [r7, #16]
   1264a:	f04f 32ff 	mov.w	r2, #4294967295
   1264e:	615a      	str	r2, [r3, #20]
        }

        SYNC->timer = 0;
   12650:	693b      	ldr	r3, [r7, #16]
   12652:	2200      	movs	r2, #0
   12654:	621a      	str	r2, [r3, #32]
    }

    return ret;
   12656:	697b      	ldr	r3, [r7, #20]
}
   12658:	4618      	mov	r0, r3
   1265a:	3718      	adds	r7, #24
   1265c:	46bd      	mov	sp, r7
   1265e:	bd80      	pop	{r7, pc}
   12660:	200019a4 	.word	0x200019a4
   12664:	00010485 	.word	0x00010485

00012668 <_ZL11CO_ODF_1019P12CO_ODF_arg_t>:
/**
 * Function for accessing _Synchronous counter overflow value_ (index 0x1019) from SDO server.
 *
 * For more information see file CO_SDO.h.
 */
static CO_SDO_abortCode_t CO_ODF_1019(CO_ODF_arg_t *ODF_arg){
   12668:	b590      	push	{r4, r7, lr}
   1266a:	b089      	sub	sp, #36	; 0x24
   1266c:	af02      	add	r7, sp, #8
   1266e:	6078      	str	r0, [r7, #4]
    CO_SYNC_t *SYNC;
    uint8_t value;
    CO_SDO_abortCode_t ret = CO_SDO_AB_NONE;
   12670:	2300      	movs	r3, #0
   12672:	617b      	str	r3, [r7, #20]

    SYNC = (CO_SYNC_t*) ODF_arg->object;
   12674:	687b      	ldr	r3, [r7, #4]
   12676:	681b      	ldr	r3, [r3, #0]
   12678:	60fb      	str	r3, [r7, #12]
    value = ODF_arg->data[0];
   1267a:	687b      	ldr	r3, [r7, #4]
   1267c:	685b      	ldr	r3, [r3, #4]
   1267e:	781b      	ldrb	r3, [r3, #0]
   12680:	72fb      	strb	r3, [r7, #11]

    if(!ODF_arg->reading){
   12682:	687b      	ldr	r3, [r7, #4]
   12684:	7f5b      	ldrb	r3, [r3, #29]
   12686:	2b00      	cmp	r3, #0
   12688:	d12c      	bne.n	126e4 <_ZL11CO_ODF_1019P12CO_ODF_arg_t+0x7c>
        uint8_t len = 0U;
   1268a:	2300      	movs	r3, #0
   1268c:	74fb      	strb	r3, [r7, #19]

        if(SYNC->periodTime){
   1268e:	68fb      	ldr	r3, [r7, #12]
   12690:	691b      	ldr	r3, [r3, #16]
   12692:	2b00      	cmp	r3, #0
   12694:	d002      	beq.n	1269c <_ZL11CO_ODF_1019P12CO_ODF_arg_t+0x34>
            ret = CO_SDO_AB_DATA_DEV_STATE;
   12696:	4b16      	ldr	r3, [pc, #88]	; (126f0 <_ZL11CO_ODF_1019P12CO_ODF_arg_t+0x88>)
   12698:	617b      	str	r3, [r7, #20]
   1269a:	e023      	b.n	126e4 <_ZL11CO_ODF_1019P12CO_ODF_arg_t+0x7c>
        }
        else if((value == 1) || (value > 240 && value <= 255)){
   1269c:	7afb      	ldrb	r3, [r7, #11]
   1269e:	2b01      	cmp	r3, #1
   126a0:	d005      	beq.n	126ae <_ZL11CO_ODF_1019P12CO_ODF_arg_t+0x46>
   126a2:	7afb      	ldrb	r3, [r7, #11]
   126a4:	2bf0      	cmp	r3, #240	; 0xf0
   126a6:	dd05      	ble.n	126b4 <_ZL11CO_ODF_1019P12CO_ODF_arg_t+0x4c>
   126a8:	7afb      	ldrb	r3, [r7, #11]
   126aa:	2bff      	cmp	r3, #255	; 0xff
   126ac:	dc02      	bgt.n	126b4 <_ZL11CO_ODF_1019P12CO_ODF_arg_t+0x4c>
            ret = CO_SDO_AB_INVALID_VALUE;
   126ae:	4b11      	ldr	r3, [pc, #68]	; (126f4 <_ZL11CO_ODF_1019P12CO_ODF_arg_t+0x8c>)
   126b0:	617b      	str	r3, [r7, #20]
   126b2:	e017      	b.n	126e4 <_ZL11CO_ODF_1019P12CO_ODF_arg_t+0x7c>
        }
        else{
            SYNC->counterOverflowValue = value;
   126b4:	68fb      	ldr	r3, [r7, #12]
   126b6:	7afa      	ldrb	r2, [r7, #11]
   126b8:	761a      	strb	r2, [r3, #24]
            if(value != 0){
   126ba:	7afb      	ldrb	r3, [r7, #11]
   126bc:	2b00      	cmp	r3, #0
   126be:	d001      	beq.n	126c4 <_ZL11CO_ODF_1019P12CO_ODF_arg_t+0x5c>
                len = 1U;
   126c0:	2301      	movs	r3, #1
   126c2:	74fb      	strb	r3, [r7, #19]
            }

            SYNC->CANtxBuff =ptrCODriverClass->CAN_Tx_BufferInit(
   126c4:	4b0c      	ldr	r3, [pc, #48]	; (126f8 <_ZL11CO_ODF_1019P12CO_ODF_arg_t+0x90>)
   126c6:	6818      	ldr	r0, [r3, #0]
   126c8:	68fb      	ldr	r3, [r7, #12]
   126ca:	6b99      	ldr	r1, [r3, #56]	; 0x38
   126cc:	68fb      	ldr	r3, [r7, #12]
   126ce:	68da      	ldr	r2, [r3, #12]
   126d0:	2300      	movs	r3, #0
   126d2:	9301      	str	r3, [sp, #4]
   126d4:	7cfb      	ldrb	r3, [r7, #19]
   126d6:	9300      	str	r3, [sp, #0]
   126d8:	2300      	movs	r3, #0
   126da:	4c08      	ldr	r4, [pc, #32]	; (126fc <_ZL11CO_ODF_1019P12CO_ODF_arg_t+0x94>)
   126dc:	47a0      	blx	r4
   126de:	4602      	mov	r2, r0
   126e0:	68fb      	ldr	r3, [r7, #12]
   126e2:	635a      	str	r2, [r3, #52]	; 0x34
                    len,                    /* number of data bytes */
                    0);                     /* synchronous message flag bit */
        }
    }

    return ret;
   126e4:	697b      	ldr	r3, [r7, #20]
}
   126e6:	4618      	mov	r0, r3
   126e8:	371c      	adds	r7, #28
   126ea:	46bd      	mov	sp, r7
   126ec:	bd90      	pop	{r4, r7, pc}
   126ee:	bf00      	nop
   126f0:	08000022 	.word	0x08000022
   126f4:	06090030 	.word	0x06090030
   126f8:	200019a4 	.word	0x200019a4
   126fc:	0000d8b5 	.word	0x0000d8b5

00012700 <_ZN13CO_SYNC_Class9SYNC_InitEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m>:
        uint8_t                 synchronousCounterOverflowValue,
        CO_CANmodule_t         *CANdevRx,
        uint32_t                CANdevRxIdx,
        CO_CANmodule_t         *CANdevTx,
        uint32_t                CANdevTxIdx)
{
   12700:	b590      	push	{r4, r7, lr}
   12702:	b08b      	sub	sp, #44	; 0x2c
   12704:	af04      	add	r7, sp, #16
   12706:	60f8      	str	r0, [r7, #12]
   12708:	60b9      	str	r1, [r7, #8]
   1270a:	607a      	str	r2, [r7, #4]
   1270c:	603b      	str	r3, [r7, #0]
    uint8_t len = 0;
   1270e:	2300      	movs	r3, #0
   12710:	75fb      	strb	r3, [r7, #23]

    /* verify arguments */
    if(SYNC==NULL || em==NULL || SDO==NULL || operatingState==NULL ||
   12712:	68bb      	ldr	r3, [r7, #8]
   12714:	2b00      	cmp	r3, #0
   12716:	d00e      	beq.n	12736 <_ZN13CO_SYNC_Class9SYNC_InitEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m+0x36>
   12718:	687b      	ldr	r3, [r7, #4]
   1271a:	2b00      	cmp	r3, #0
   1271c:	d00b      	beq.n	12736 <_ZN13CO_SYNC_Class9SYNC_InitEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m+0x36>
   1271e:	683b      	ldr	r3, [r7, #0]
   12720:	2b00      	cmp	r3, #0
   12722:	d008      	beq.n	12736 <_ZN13CO_SYNC_Class9SYNC_InitEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m+0x36>
   12724:	6abb      	ldr	r3, [r7, #40]	; 0x28
   12726:	2b00      	cmp	r3, #0
   12728:	d005      	beq.n	12736 <_ZN13CO_SYNC_Class9SYNC_InitEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m+0x36>
   1272a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1272c:	2b00      	cmp	r3, #0
   1272e:	d002      	beq.n	12736 <_ZN13CO_SYNC_Class9SYNC_InitEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m+0x36>
        CANdevRx==NULL || CANdevTx==NULL){
   12730:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   12732:	2b00      	cmp	r3, #0
   12734:	d102      	bne.n	1273c <_ZN13CO_SYNC_Class9SYNC_InitEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m+0x3c>
        return CO_ERROR_ILLEGAL_ARGUMENT;
   12736:	f04f 33ff 	mov.w	r3, #4294967295
   1273a:	e096      	b.n	1286a <_ZN13CO_SYNC_Class9SYNC_InitEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m+0x16a>
    }

    /* Configure object variables */
    SYNC->isProducer = (COB_ID_SYNCMessage&0x40000000L) ? true : false;
   1273c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1273e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
   12742:	2b00      	cmp	r3, #0
   12744:	bf14      	ite	ne
   12746:	2301      	movne	r3, #1
   12748:	2300      	moveq	r3, #0
   1274a:	b2db      	uxtb	r3, r3
   1274c:	461a      	mov	r2, r3
   1274e:	68bb      	ldr	r3, [r7, #8]
   12750:	721a      	strb	r2, [r3, #8]
    SYNC->COB_ID = COB_ID_SYNCMessage&0x7FF;
   12752:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   12754:	f3c3 020a 	ubfx	r2, r3, #0, #11
   12758:	68bb      	ldr	r3, [r7, #8]
   1275a:	60da      	str	r2, [r3, #12]

    SYNC->periodTime = communicationCyclePeriod;
   1275c:	68bb      	ldr	r3, [r7, #8]
   1275e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   12760:	611a      	str	r2, [r3, #16]
    SYNC->periodTimeoutTime = communicationCyclePeriod / 2 * 3;
   12762:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   12764:	085a      	lsrs	r2, r3, #1
   12766:	4613      	mov	r3, r2
   12768:	005b      	lsls	r3, r3, #1
   1276a:	441a      	add	r2, r3
   1276c:	68bb      	ldr	r3, [r7, #8]
   1276e:	615a      	str	r2, [r3, #20]
    /* overflow? */
    if(SYNC->periodTimeoutTime < communicationCyclePeriod) SYNC->periodTimeoutTime = 0xFFFFFFFFL;
   12770:	68bb      	ldr	r3, [r7, #8]
   12772:	695a      	ldr	r2, [r3, #20]
   12774:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   12776:	429a      	cmp	r2, r3
   12778:	d203      	bcs.n	12782 <_ZN13CO_SYNC_Class9SYNC_InitEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m+0x82>
   1277a:	68bb      	ldr	r3, [r7, #8]
   1277c:	f04f 32ff 	mov.w	r2, #4294967295
   12780:	615a      	str	r2, [r3, #20]

    SYNC->counterOverflowValue = synchronousCounterOverflowValue;
   12782:	68bb      	ldr	r3, [r7, #8]
   12784:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
   12788:	761a      	strb	r2, [r3, #24]
    if(synchronousCounterOverflowValue) len = 1;
   1278a:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
   1278e:	2b00      	cmp	r3, #0
   12790:	d001      	beq.n	12796 <_ZN13CO_SYNC_Class9SYNC_InitEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m+0x96>
   12792:	2301      	movs	r3, #1
   12794:	75fb      	strb	r3, [r7, #23]

    SYNC->curentSyncTimeIsInsideWindow = true;
   12796:	68bb      	ldr	r3, [r7, #8]
   12798:	2201      	movs	r2, #1
   1279a:	765a      	strb	r2, [r3, #25]

    SYNC->CANrxNew = false;
   1279c:	68bb      	ldr	r3, [r7, #8]
   1279e:	2200      	movs	r2, #0
   127a0:	769a      	strb	r2, [r3, #26]
    SYNC->CANrxToggle = false;
   127a2:	68bb      	ldr	r3, [r7, #8]
   127a4:	2200      	movs	r2, #0
   127a6:	76da      	strb	r2, [r3, #27]
    SYNC->timer = 0;
   127a8:	68bb      	ldr	r3, [r7, #8]
   127aa:	2200      	movs	r2, #0
   127ac:	621a      	str	r2, [r3, #32]
    SYNC->counter = 0;
   127ae:	68bb      	ldr	r3, [r7, #8]
   127b0:	2200      	movs	r2, #0
   127b2:	771a      	strb	r2, [r3, #28]
    SYNC->receiveError = 0U;
   127b4:	68bb      	ldr	r3, [r7, #8]
   127b6:	2200      	movs	r2, #0
   127b8:	625a      	str	r2, [r3, #36]	; 0x24

    SYNC->em = em;
   127ba:	68bb      	ldr	r3, [r7, #8]
   127bc:	687a      	ldr	r2, [r7, #4]
   127be:	601a      	str	r2, [r3, #0]
    SYNC->operatingState = operatingState;
   127c0:	68bb      	ldr	r3, [r7, #8]
   127c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
   127c4:	605a      	str	r2, [r3, #4]

    SYNC->CANdevRx = CANdevRx;
   127c6:	68bb      	ldr	r3, [r7, #8]
   127c8:	6bba      	ldr	r2, [r7, #56]	; 0x38
   127ca:	629a      	str	r2, [r3, #40]	; 0x28
    SYNC->CANdevRxIdx = CANdevRxIdx;
   127cc:	68bb      	ldr	r3, [r7, #8]
   127ce:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   127d0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Configure Object dictionary entry at index 0x1005, 0x1006 and 0x1019 */
    ptrCODriverClass->CO_OD_configure( OD_H1005_COBID_SYNC,        CO_ODF_1005, (void*)SYNC, 0, 0);
   127d2:	4b28      	ldr	r3, [pc, #160]	; (12874 <_ZN13CO_SYNC_Class9SYNC_InitEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m+0x174>)
   127d4:	681b      	ldr	r3, [r3, #0]
   127d6:	1d18      	adds	r0, r3, #4
   127d8:	2300      	movs	r3, #0
   127da:	9301      	str	r3, [sp, #4]
   127dc:	2300      	movs	r3, #0
   127de:	9300      	str	r3, [sp, #0]
   127e0:	68bb      	ldr	r3, [r7, #8]
   127e2:	4a25      	ldr	r2, [pc, #148]	; (12878 <_ZN13CO_SYNC_Class9SYNC_InitEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m+0x178>)
   127e4:	f241 0105 	movw	r1, #4101	; 0x1005
   127e8:	4c24      	ldr	r4, [pc, #144]	; (1287c <_ZN13CO_SYNC_Class9SYNC_InitEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m+0x17c>)
   127ea:	47a0      	blx	r4
    ptrCODriverClass->CO_OD_configure( OD_H1006_COMM_CYCL_PERIOD,  CO_ODF_1006, (void*)SYNC, 0, 0);
   127ec:	4b21      	ldr	r3, [pc, #132]	; (12874 <_ZN13CO_SYNC_Class9SYNC_InitEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m+0x174>)
   127ee:	681b      	ldr	r3, [r3, #0]
   127f0:	1d18      	adds	r0, r3, #4
   127f2:	2300      	movs	r3, #0
   127f4:	9301      	str	r3, [sp, #4]
   127f6:	2300      	movs	r3, #0
   127f8:	9300      	str	r3, [sp, #0]
   127fa:	68bb      	ldr	r3, [r7, #8]
   127fc:	4a20      	ldr	r2, [pc, #128]	; (12880 <_ZN13CO_SYNC_Class9SYNC_InitEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m+0x180>)
   127fe:	f241 0106 	movw	r1, #4102	; 0x1006
   12802:	4c1e      	ldr	r4, [pc, #120]	; (1287c <_ZN13CO_SYNC_Class9SYNC_InitEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m+0x17c>)
   12804:	47a0      	blx	r4
    ptrCODriverClass->CO_OD_configure( OD_H1019_SYNC_CNT_OVERFLOW, CO_ODF_1019, (void*)SYNC, 0, 0);
   12806:	4b1b      	ldr	r3, [pc, #108]	; (12874 <_ZN13CO_SYNC_Class9SYNC_InitEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m+0x174>)
   12808:	681b      	ldr	r3, [r3, #0]
   1280a:	1d18      	adds	r0, r3, #4
   1280c:	2300      	movs	r3, #0
   1280e:	9301      	str	r3, [sp, #4]
   12810:	2300      	movs	r3, #0
   12812:	9300      	str	r3, [sp, #0]
   12814:	68bb      	ldr	r3, [r7, #8]
   12816:	4a1b      	ldr	r2, [pc, #108]	; (12884 <_ZN13CO_SYNC_Class9SYNC_InitEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m+0x184>)
   12818:	f241 0119 	movw	r1, #4121	; 0x1019
   1281c:	4c17      	ldr	r4, [pc, #92]	; (1287c <_ZN13CO_SYNC_Class9SYNC_InitEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m+0x17c>)
   1281e:	47a0      	blx	r4

    /* configure SYNC CAN reception */
    ptrCODriverClass->CAN_Rx_BufferInit(
   12820:	4b14      	ldr	r3, [pc, #80]	; (12874 <_ZN13CO_SYNC_Class9SYNC_InitEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m+0x174>)
   12822:	6818      	ldr	r0, [r3, #0]
   12824:	68bb      	ldr	r3, [r7, #8]
   12826:	68da      	ldr	r2, [r3, #12]
            CANdevRxIdx,            /* rx buffer index */
            SYNC->COB_ID,           /* CAN identifier */
            0x7FF,                  /* mask */
            0,                      /* rtr */
            (void*)SYNC,            /* object passed to receive function */
            CO_SYNC_receive);       /* this function will process received message */
   12828:	4b17      	ldr	r3, [pc, #92]	; (12888 <_ZN13CO_SYNC_Class9SYNC_InitEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m+0x188>)
   1282a:	9302      	str	r3, [sp, #8]
   1282c:	68bb      	ldr	r3, [r7, #8]
   1282e:	9301      	str	r3, [sp, #4]
   12830:	2300      	movs	r3, #0
   12832:	9300      	str	r3, [sp, #0]
   12834:	f240 73ff 	movw	r3, #2047	; 0x7ff
   12838:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
   1283a:	4c14      	ldr	r4, [pc, #80]	; (1288c <_ZN13CO_SYNC_Class9SYNC_InitEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m+0x18c>)
   1283c:	47a0      	blx	r4

    /* configure SYNC CAN transmission */
    SYNC->CANdevTx = CANdevTx;
   1283e:	68bb      	ldr	r3, [r7, #8]
   12840:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   12842:	631a      	str	r2, [r3, #48]	; 0x30
    SYNC->CANdevTxIdx = CANdevTxIdx;
   12844:	68bb      	ldr	r3, [r7, #8]
   12846:	6c7a      	ldr	r2, [r7, #68]	; 0x44
   12848:	639a      	str	r2, [r3, #56]	; 0x38
    SYNC->CANtxBuff =  ptrCODriverClass->CAN_Tx_BufferInit(
   1284a:	4b0a      	ldr	r3, [pc, #40]	; (12874 <_ZN13CO_SYNC_Class9SYNC_InitEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m+0x174>)
   1284c:	6818      	ldr	r0, [r3, #0]
   1284e:	68bb      	ldr	r3, [r7, #8]
   12850:	68da      	ldr	r2, [r3, #12]
   12852:	2300      	movs	r3, #0
   12854:	9301      	str	r3, [sp, #4]
   12856:	7dfb      	ldrb	r3, [r7, #23]
   12858:	9300      	str	r3, [sp, #0]
   1285a:	2300      	movs	r3, #0
   1285c:	6c79      	ldr	r1, [r7, #68]	; 0x44
   1285e:	4c0c      	ldr	r4, [pc, #48]	; (12890 <_ZN13CO_SYNC_Class9SYNC_InitEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m+0x190>)
   12860:	47a0      	blx	r4
   12862:	4602      	mov	r2, r0
   12864:	68bb      	ldr	r3, [r7, #8]
   12866:	635a      	str	r2, [r3, #52]	; 0x34
            SYNC->COB_ID,           /* CAN identifier */
            0,                      /* rtr */
            len,                    /* number of data bytes */
            0);                     /* synchronous message flag bit */

    return CO_ERROR_NO;
   12868:	2300      	movs	r3, #0
}
   1286a:	4618      	mov	r0, r3
   1286c:	371c      	adds	r7, #28
   1286e:	46bd      	mov	sp, r7
   12870:	bd90      	pop	{r4, r7, pc}
   12872:	bf00      	nop
   12874:	200019a4 	.word	0x200019a4
   12878:	000124e5 	.word	0x000124e5
   1287c:	000108d5 	.word	0x000108d5
   12880:	000125e9 	.word	0x000125e9
   12884:	00012669 	.word	0x00012669
   12888:	00012451 	.word	0x00012451
   1288c:	0000d7b5 	.word	0x0000d7b5
   12890:	0000d8b5 	.word	0x0000d8b5

00012894 <_ZN13CO_SYNC_Class15CO_SYNC_processEP9CO_SYNC_tmm>:
/******************************************************************************/
uint8_t CO_SYNC_Class::CO_SYNC_process(
        CO_SYNC_t              *SYNC,
        uint32_t                timeDifference_us,
        uint32_t                ObjDict_synchronousWindowLength)
{
   12894:	b590      	push	{r4, r7, lr}
   12896:	b089      	sub	sp, #36	; 0x24
   12898:	af02      	add	r7, sp, #8
   1289a:	60f8      	str	r0, [r7, #12]
   1289c:	60b9      	str	r1, [r7, #8]
   1289e:	607a      	str	r2, [r7, #4]
   128a0:	603b      	str	r3, [r7, #0]
    uint8_t ret = 0;
   128a2:	2300      	movs	r3, #0
   128a4:	75fb      	strb	r3, [r7, #23]
    uint32_t timerNew;

    if(*SYNC->operatingState == CO_NMT_OPERATIONAL || *SYNC->operatingState == CO_NMT_PRE_OPERATIONAL){
   128a6:	68bb      	ldr	r3, [r7, #8]
   128a8:	685b      	ldr	r3, [r3, #4]
   128aa:	781b      	ldrb	r3, [r3, #0]
   128ac:	2b05      	cmp	r3, #5
   128ae:	d005      	beq.n	128bc <_ZN13CO_SYNC_Class15CO_SYNC_processEP9CO_SYNC_tmm+0x28>
   128b0:	68bb      	ldr	r3, [r7, #8]
   128b2:	685b      	ldr	r3, [r3, #4]
   128b4:	781b      	ldrb	r3, [r3, #0]
   128b6:	2b7f      	cmp	r3, #127	; 0x7f
   128b8:	f040 808e 	bne.w	129d8 <_ZN13CO_SYNC_Class15CO_SYNC_processEP9CO_SYNC_tmm+0x144>
        /* update sync timer, no overflow */
        timerNew = SYNC->timer + timeDifference_us;
   128bc:	68bb      	ldr	r3, [r7, #8]
   128be:	6a1a      	ldr	r2, [r3, #32]
   128c0:	687b      	ldr	r3, [r7, #4]
   128c2:	4413      	add	r3, r2
   128c4:	613b      	str	r3, [r7, #16]
        if(timerNew > SYNC->timer) SYNC->timer = timerNew;
   128c6:	68bb      	ldr	r3, [r7, #8]
   128c8:	6a1a      	ldr	r2, [r3, #32]
   128ca:	693b      	ldr	r3, [r7, #16]
   128cc:	429a      	cmp	r2, r3
   128ce:	d202      	bcs.n	128d6 <_ZN13CO_SYNC_Class15CO_SYNC_processEP9CO_SYNC_tmm+0x42>
   128d0:	68bb      	ldr	r3, [r7, #8]
   128d2:	693a      	ldr	r2, [r7, #16]
   128d4:	621a      	str	r2, [r3, #32]

        /* was SYNC just received */
        if(SYNC->CANrxNew){
   128d6:	68bb      	ldr	r3, [r7, #8]
   128d8:	7e9b      	ldrb	r3, [r3, #26]
   128da:	2b00      	cmp	r3, #0
   128dc:	d007      	beq.n	128ee <_ZN13CO_SYNC_Class15CO_SYNC_processEP9CO_SYNC_tmm+0x5a>
            SYNC->timer = 0;
   128de:	68bb      	ldr	r3, [r7, #8]
   128e0:	2200      	movs	r2, #0
   128e2:	621a      	str	r2, [r3, #32]
            ret = 1;
   128e4:	2301      	movs	r3, #1
   128e6:	75fb      	strb	r3, [r7, #23]
            SYNC->CANrxNew = false;
   128e8:	68bb      	ldr	r3, [r7, #8]
   128ea:	2200      	movs	r2, #0
   128ec:	769a      	strb	r2, [r3, #26]
        }

        /* SYNC producer */
        if(SYNC->isProducer && SYNC->periodTime){
   128ee:	68bb      	ldr	r3, [r7, #8]
   128f0:	7a1b      	ldrb	r3, [r3, #8]
   128f2:	2b00      	cmp	r3, #0
   128f4:	d03a      	beq.n	1296c <_ZN13CO_SYNC_Class15CO_SYNC_processEP9CO_SYNC_tmm+0xd8>
   128f6:	68bb      	ldr	r3, [r7, #8]
   128f8:	691b      	ldr	r3, [r3, #16]
   128fa:	2b00      	cmp	r3, #0
   128fc:	d036      	beq.n	1296c <_ZN13CO_SYNC_Class15CO_SYNC_processEP9CO_SYNC_tmm+0xd8>
            if(SYNC->timer >= SYNC->periodTime){
   128fe:	68bb      	ldr	r3, [r7, #8]
   12900:	6a1a      	ldr	r2, [r3, #32]
   12902:	68bb      	ldr	r3, [r7, #8]
   12904:	691b      	ldr	r3, [r3, #16]
   12906:	429a      	cmp	r2, r3
   12908:	d330      	bcc.n	1296c <_ZN13CO_SYNC_Class15CO_SYNC_processEP9CO_SYNC_tmm+0xd8>
                if(++SYNC->counter > SYNC->counterOverflowValue) SYNC->counter = 1;
   1290a:	68bb      	ldr	r3, [r7, #8]
   1290c:	7f1b      	ldrb	r3, [r3, #28]
   1290e:	3301      	adds	r3, #1
   12910:	b2da      	uxtb	r2, r3
   12912:	68bb      	ldr	r3, [r7, #8]
   12914:	771a      	strb	r2, [r3, #28]
   12916:	68bb      	ldr	r3, [r7, #8]
   12918:	7f1b      	ldrb	r3, [r3, #28]
   1291a:	461a      	mov	r2, r3
   1291c:	68bb      	ldr	r3, [r7, #8]
   1291e:	7e1b      	ldrb	r3, [r3, #24]
   12920:	429a      	cmp	r2, r3
   12922:	bfcc      	ite	gt
   12924:	2301      	movgt	r3, #1
   12926:	2300      	movle	r3, #0
   12928:	b2db      	uxtb	r3, r3
   1292a:	2b00      	cmp	r3, #0
   1292c:	d002      	beq.n	12934 <_ZN13CO_SYNC_Class15CO_SYNC_processEP9CO_SYNC_tmm+0xa0>
   1292e:	68bb      	ldr	r3, [r7, #8]
   12930:	2201      	movs	r2, #1
   12932:	771a      	strb	r2, [r3, #28]
                SYNC->timer = 0;
   12934:	68bb      	ldr	r3, [r7, #8]
   12936:	2200      	movs	r2, #0
   12938:	621a      	str	r2, [r3, #32]
                ret = 1;
   1293a:	2301      	movs	r3, #1
   1293c:	75fb      	strb	r3, [r7, #23]
                SYNC->CANrxToggle = SYNC->CANrxToggle ? false : true;
   1293e:	68bb      	ldr	r3, [r7, #8]
   12940:	7edb      	ldrb	r3, [r3, #27]
   12942:	2b00      	cmp	r3, #0
   12944:	bf0c      	ite	eq
   12946:	2301      	moveq	r3, #1
   12948:	2300      	movne	r3, #0
   1294a:	b2db      	uxtb	r3, r3
   1294c:	461a      	mov	r2, r3
   1294e:	68bb      	ldr	r3, [r7, #8]
   12950:	76da      	strb	r2, [r3, #27]
                SYNC->CANtxBuff->data[0] = SYNC->counter;
   12952:	68bb      	ldr	r3, [r7, #8]
   12954:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   12956:	68ba      	ldr	r2, [r7, #8]
   12958:	7f12      	ldrb	r2, [r2, #28]
   1295a:	715a      	strb	r2, [r3, #5]
                ptrCODriverClass->CAN_Send(SYNC->CANtxBuff);
   1295c:	4b2d      	ldr	r3, [pc, #180]	; (12a14 <_ZN13CO_SYNC_Class15CO_SYNC_processEP9CO_SYNC_tmm+0x180>)
   1295e:	681a      	ldr	r2, [r3, #0]
   12960:	68bb      	ldr	r3, [r7, #8]
   12962:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   12964:	4619      	mov	r1, r3
   12966:	4610      	mov	r0, r2
   12968:	4b2b      	ldr	r3, [pc, #172]	; (12a18 <_ZN13CO_SYNC_Class15CO_SYNC_processEP9CO_SYNC_tmm+0x184>)
   1296a:	4798      	blx	r3
            }
        }

        /* Synchronous PDOs are allowed only inside time window */
        if(ObjDict_synchronousWindowLength){
   1296c:	683b      	ldr	r3, [r7, #0]
   1296e:	2b00      	cmp	r3, #0
   12970:	d012      	beq.n	12998 <_ZN13CO_SYNC_Class15CO_SYNC_processEP9CO_SYNC_tmm+0x104>
            if(SYNC->timer > ObjDict_synchronousWindowLength){
   12972:	68bb      	ldr	r3, [r7, #8]
   12974:	6a1a      	ldr	r2, [r3, #32]
   12976:	683b      	ldr	r3, [r7, #0]
   12978:	429a      	cmp	r2, r3
   1297a:	d909      	bls.n	12990 <_ZN13CO_SYNC_Class15CO_SYNC_processEP9CO_SYNC_tmm+0xfc>
                if(SYNC->curentSyncTimeIsInsideWindow){
   1297c:	68bb      	ldr	r3, [r7, #8]
   1297e:	7e5b      	ldrb	r3, [r3, #25]
   12980:	2b00      	cmp	r3, #0
   12982:	d001      	beq.n	12988 <_ZN13CO_SYNC_Class15CO_SYNC_processEP9CO_SYNC_tmm+0xf4>
                    ret = 2;
   12984:	2302      	movs	r3, #2
   12986:	75fb      	strb	r3, [r7, #23]
                }
                SYNC->curentSyncTimeIsInsideWindow = false;
   12988:	68bb      	ldr	r3, [r7, #8]
   1298a:	2200      	movs	r2, #0
   1298c:	765a      	strb	r2, [r3, #25]
   1298e:	e006      	b.n	1299e <_ZN13CO_SYNC_Class15CO_SYNC_processEP9CO_SYNC_tmm+0x10a>
            }
            else{
                SYNC->curentSyncTimeIsInsideWindow = true;
   12990:	68bb      	ldr	r3, [r7, #8]
   12992:	2201      	movs	r2, #1
   12994:	765a      	strb	r2, [r3, #25]
   12996:	e002      	b.n	1299e <_ZN13CO_SYNC_Class15CO_SYNC_processEP9CO_SYNC_tmm+0x10a>
            }
        }
        else{
            SYNC->curentSyncTimeIsInsideWindow = true;
   12998:	68bb      	ldr	r3, [r7, #8]
   1299a:	2201      	movs	r2, #1
   1299c:	765a      	strb	r2, [r3, #25]
        }

        /* Verify timeout of SYNC */
        if(SYNC->periodTime && SYNC->timer > SYNC->periodTimeoutTime && *SYNC->operatingState == CO_NMT_OPERATIONAL)
   1299e:	68bb      	ldr	r3, [r7, #8]
   129a0:	691b      	ldr	r3, [r3, #16]
   129a2:	2b00      	cmp	r3, #0
   129a4:	d01c      	beq.n	129e0 <_ZN13CO_SYNC_Class15CO_SYNC_processEP9CO_SYNC_tmm+0x14c>
   129a6:	68bb      	ldr	r3, [r7, #8]
   129a8:	6a1a      	ldr	r2, [r3, #32]
   129aa:	68bb      	ldr	r3, [r7, #8]
   129ac:	695b      	ldr	r3, [r3, #20]
   129ae:	429a      	cmp	r2, r3
   129b0:	d916      	bls.n	129e0 <_ZN13CO_SYNC_Class15CO_SYNC_processEP9CO_SYNC_tmm+0x14c>
   129b2:	68bb      	ldr	r3, [r7, #8]
   129b4:	685b      	ldr	r3, [r3, #4]
   129b6:	781b      	ldrb	r3, [r3, #0]
   129b8:	2b05      	cmp	r3, #5
   129ba:	d111      	bne.n	129e0 <_ZN13CO_SYNC_Class15CO_SYNC_processEP9CO_SYNC_tmm+0x14c>
             ptrCODriverClass->EM_ErrorReport(SYNC->em, CO_EM_SYNC_TIME_OUT, CO_EMC_COMMUNICATION, SYNC->timer);
   129bc:	4b15      	ldr	r3, [pc, #84]	; (12a14 <_ZN13CO_SYNC_Class15CO_SYNC_processEP9CO_SYNC_tmm+0x180>)
   129be:	681b      	ldr	r3, [r3, #0]
   129c0:	1d18      	adds	r0, r3, #4
   129c2:	68bb      	ldr	r3, [r7, #8]
   129c4:	6819      	ldr	r1, [r3, #0]
   129c6:	68bb      	ldr	r3, [r7, #8]
   129c8:	6a1b      	ldr	r3, [r3, #32]
   129ca:	9300      	str	r3, [sp, #0]
   129cc:	f44f 4301 	mov.w	r3, #33024	; 0x8100
   129d0:	2218      	movs	r2, #24
   129d2:	4c12      	ldr	r4, [pc, #72]	; (12a1c <_ZN13CO_SYNC_Class15CO_SYNC_processEP9CO_SYNC_tmm+0x188>)
   129d4:	47a0      	blx	r4
        if(SYNC->periodTime && SYNC->timer > SYNC->periodTimeoutTime && *SYNC->operatingState == CO_NMT_OPERATIONAL)
   129d6:	e003      	b.n	129e0 <_ZN13CO_SYNC_Class15CO_SYNC_processEP9CO_SYNC_tmm+0x14c>
    }
    else {
        SYNC->CANrxNew = false;
   129d8:	68bb      	ldr	r3, [r7, #8]
   129da:	2200      	movs	r2, #0
   129dc:	769a      	strb	r2, [r3, #26]
   129de:	e000      	b.n	129e2 <_ZN13CO_SYNC_Class15CO_SYNC_processEP9CO_SYNC_tmm+0x14e>
        if(SYNC->periodTime && SYNC->timer > SYNC->periodTimeoutTime && *SYNC->operatingState == CO_NMT_OPERATIONAL)
   129e0:	bf00      	nop
    }

    /* verify error from receive function */
    if(SYNC->receiveError != 0U){
   129e2:	68bb      	ldr	r3, [r7, #8]
   129e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   129e6:	2b00      	cmp	r3, #0
   129e8:	d00f      	beq.n	12a0a <_ZN13CO_SYNC_Class15CO_SYNC_processEP9CO_SYNC_tmm+0x176>
        ptrCODriverClass->EM_ErrorReport(SYNC->em, CO_EM_SYNC_LENGTH, CO_EMC_SYNC_DATA_LENGTH, (uint32_t)SYNC->receiveError);
   129ea:	4b0a      	ldr	r3, [pc, #40]	; (12a14 <_ZN13CO_SYNC_Class15CO_SYNC_processEP9CO_SYNC_tmm+0x180>)
   129ec:	681b      	ldr	r3, [r3, #0]
   129ee:	1d18      	adds	r0, r3, #4
   129f0:	68bb      	ldr	r3, [r7, #8]
   129f2:	6819      	ldr	r1, [r3, #0]
   129f4:	68bb      	ldr	r3, [r7, #8]
   129f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   129f8:	9300      	str	r3, [sp, #0]
   129fa:	f248 2340 	movw	r3, #33344	; 0x8240
   129fe:	2219      	movs	r2, #25
   12a00:	4c06      	ldr	r4, [pc, #24]	; (12a1c <_ZN13CO_SYNC_Class15CO_SYNC_processEP9CO_SYNC_tmm+0x188>)
   12a02:	47a0      	blx	r4
        SYNC->receiveError = 0U;
   12a04:	68bb      	ldr	r3, [r7, #8]
   12a06:	2200      	movs	r2, #0
   12a08:	625a      	str	r2, [r3, #36]	; 0x24
    }

    return ret;
   12a0a:	7dfb      	ldrb	r3, [r7, #23]
   12a0c:	4618      	mov	r0, r3
   12a0e:	371c      	adds	r7, #28
   12a10:	46bd      	mov	sp, r7
   12a12:	bd90      	pop	{r4, r7, pc}
   12a14:	200019a4 	.word	0x200019a4
   12a18:	0000d961 	.word	0x0000d961
   12a1c:	0000e3f5 	.word	0x0000e3f5

00012a20 <_ZN14CO_CRC16_ClassC1Ev>:
	0x6E17U, 0x7E36U, 0x4E55U, 0x5E74U, 0x2E93U, 0x3EB2U, 0x0ED1U, 0x1EF0U
};


// default constructor
CO_CRC16_Class::CO_CRC16_Class()
   12a20:	b480      	push	{r7}
   12a22:	b083      	sub	sp, #12
   12a24:	af00      	add	r7, sp, #0
   12a26:	6078      	str	r0, [r7, #4]
{
} //CO_CRC16_Class
   12a28:	687b      	ldr	r3, [r7, #4]
   12a2a:	4618      	mov	r0, r3
   12a2c:	370c      	adds	r7, #12
   12a2e:	46bd      	mov	sp, r7
   12a30:	bc80      	pop	{r7}
   12a32:	4770      	bx	lr

00012a34 <_ZN14CO_CRC16_ClassD1Ev>:

// default destructor
CO_CRC16_Class::~CO_CRC16_Class()
   12a34:	b480      	push	{r7}
   12a36:	b083      	sub	sp, #12
   12a38:	af00      	add	r7, sp, #0
   12a3a:	6078      	str	r0, [r7, #4]
{
} //~CO_CRC16_Class
   12a3c:	687b      	ldr	r3, [r7, #4]
   12a3e:	4618      	mov	r0, r3
   12a40:	370c      	adds	r7, #12
   12a42:	46bd      	mov	sp, r7
   12a44:	bc80      	pop	{r7}
   12a46:	4770      	bx	lr

00012a48 <_ZN14CO_CRC16_Class11crc16_ccittEPKhjt>:
/******************************************************************************/
unsigned short CO_CRC16_Class::crc16_ccitt(
const unsigned char     block[],
unsigned int            blockLength,
unsigned short          crc)
{
   12a48:	b480      	push	{r7}
   12a4a:	b087      	sub	sp, #28
   12a4c:	af00      	add	r7, sp, #0
   12a4e:	60f8      	str	r0, [r7, #12]
   12a50:	60b9      	str	r1, [r7, #8]
   12a52:	607a      	str	r2, [r7, #4]
   12a54:	807b      	strh	r3, [r7, #2]
	unsigned int i;

	for(i=0U; i<blockLength; i++){
   12a56:	2300      	movs	r3, #0
   12a58:	617b      	str	r3, [r7, #20]
   12a5a:	697a      	ldr	r2, [r7, #20]
   12a5c:	687b      	ldr	r3, [r7, #4]
   12a5e:	429a      	cmp	r2, r3
   12a60:	d217      	bcs.n	12a92 <_ZN14CO_CRC16_Class11crc16_ccittEPKhjt+0x4a>
		unsigned short tmp = (crc >> 8) ^ (unsigned short) block[i];
   12a62:	887b      	ldrh	r3, [r7, #2]
   12a64:	121b      	asrs	r3, r3, #8
   12a66:	b21a      	sxth	r2, r3
   12a68:	68b9      	ldr	r1, [r7, #8]
   12a6a:	697b      	ldr	r3, [r7, #20]
   12a6c:	440b      	add	r3, r1
   12a6e:	781b      	ldrb	r3, [r3, #0]
   12a70:	b21b      	sxth	r3, r3
   12a72:	4053      	eors	r3, r2
   12a74:	b21b      	sxth	r3, r3
   12a76:	827b      	strh	r3, [r7, #18]
		crc = ((unsigned short)(crc << 8U)) ^ crc16_ccitt_table[tmp];
   12a78:	887b      	ldrh	r3, [r7, #2]
   12a7a:	021b      	lsls	r3, r3, #8
   12a7c:	b29a      	uxth	r2, r3
   12a7e:	8a7b      	ldrh	r3, [r7, #18]
   12a80:	4907      	ldr	r1, [pc, #28]	; (12aa0 <_ZN14CO_CRC16_Class11crc16_ccittEPKhjt+0x58>)
   12a82:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
   12a86:	4053      	eors	r3, r2
   12a88:	807b      	strh	r3, [r7, #2]
	for(i=0U; i<blockLength; i++){
   12a8a:	697b      	ldr	r3, [r7, #20]
   12a8c:	3301      	adds	r3, #1
   12a8e:	617b      	str	r3, [r7, #20]
   12a90:	e7e3      	b.n	12a5a <_ZN14CO_CRC16_Class11crc16_ccittEPKhjt+0x12>
	}
	return crc;
   12a92:	887b      	ldrh	r3, [r7, #2]
   12a94:	4618      	mov	r0, r3
   12a96:	371c      	adds	r7, #28
   12a98:	46bd      	mov	sp, r7
   12a9a:	bc80      	pop	{r7}
   12a9c:	4770      	bx	lr
   12a9e:	bf00      	nop
   12aa0:	00013ca8 	.word	0x00013ca8

00012aa4 <__aeabi_atexit>:
   12aa4:	460b      	mov	r3, r1
   12aa6:	4601      	mov	r1, r0
   12aa8:	4618      	mov	r0, r3
   12aaa:	f000 b801 	b.w	12ab0 <__cxa_atexit>
   12aae:	bf00      	nop

00012ab0 <__cxa_atexit>:
   12ab0:	4613      	mov	r3, r2
   12ab2:	460a      	mov	r2, r1
   12ab4:	4601      	mov	r1, r0
   12ab6:	2002      	movs	r0, #2
   12ab8:	f000 b91e 	b.w	12cf8 <__register_exitproc>

00012abc <ffs>:
   12abc:	b140      	cbz	r0, 12ad0 <ffs+0x14>
   12abe:	2300      	movs	r3, #0
   12ac0:	fa40 f103 	asr.w	r1, r0, r3
   12ac4:	1c5a      	adds	r2, r3, #1
   12ac6:	07c9      	lsls	r1, r1, #31
   12ac8:	4613      	mov	r3, r2
   12aca:	d5f9      	bpl.n	12ac0 <ffs+0x4>
   12acc:	4610      	mov	r0, r2
   12ace:	4770      	bx	lr
   12ad0:	4602      	mov	r2, r0
   12ad2:	4610      	mov	r0, r2
   12ad4:	4770      	bx	lr
   12ad6:	bf00      	nop

00012ad8 <__libc_init_array>:
   12ad8:	b570      	push	{r4, r5, r6, lr}
   12ada:	4e0f      	ldr	r6, [pc, #60]	; (12b18 <__libc_init_array+0x40>)
   12adc:	4d0f      	ldr	r5, [pc, #60]	; (12b1c <__libc_init_array+0x44>)
   12ade:	1b76      	subs	r6, r6, r5
   12ae0:	10b6      	asrs	r6, r6, #2
   12ae2:	bf18      	it	ne
   12ae4:	2400      	movne	r4, #0
   12ae6:	d005      	beq.n	12af4 <__libc_init_array+0x1c>
   12ae8:	3401      	adds	r4, #1
   12aea:	f855 3b04 	ldr.w	r3, [r5], #4
   12aee:	4798      	blx	r3
   12af0:	42a6      	cmp	r6, r4
   12af2:	d1f9      	bne.n	12ae8 <__libc_init_array+0x10>
   12af4:	4e0a      	ldr	r6, [pc, #40]	; (12b20 <__libc_init_array+0x48>)
   12af6:	4d0b      	ldr	r5, [pc, #44]	; (12b24 <__libc_init_array+0x4c>)
   12af8:	1b76      	subs	r6, r6, r5
   12afa:	f001 f9d7 	bl	13eac <_init>
   12afe:	10b6      	asrs	r6, r6, #2
   12b00:	bf18      	it	ne
   12b02:	2400      	movne	r4, #0
   12b04:	d006      	beq.n	12b14 <__libc_init_array+0x3c>
   12b06:	3401      	adds	r4, #1
   12b08:	f855 3b04 	ldr.w	r3, [r5], #4
   12b0c:	4798      	blx	r3
   12b0e:	42a6      	cmp	r6, r4
   12b10:	d1f9      	bne.n	12b06 <__libc_init_array+0x2e>
   12b12:	bd70      	pop	{r4, r5, r6, pc}
   12b14:	bd70      	pop	{r4, r5, r6, pc}
   12b16:	bf00      	nop
   12b18:	00013eb8 	.word	0x00013eb8
   12b1c:	00013eb8 	.word	0x00013eb8
   12b20:	00013ec4 	.word	0x00013ec4
   12b24:	00013eb8 	.word	0x00013eb8

00012b28 <memcpy>:
   12b28:	4684      	mov	ip, r0
   12b2a:	ea41 0300 	orr.w	r3, r1, r0
   12b2e:	f013 0303 	ands.w	r3, r3, #3
   12b32:	d16d      	bne.n	12c10 <memcpy+0xe8>
   12b34:	3a40      	subs	r2, #64	; 0x40
   12b36:	d341      	bcc.n	12bbc <memcpy+0x94>
   12b38:	f851 3b04 	ldr.w	r3, [r1], #4
   12b3c:	f840 3b04 	str.w	r3, [r0], #4
   12b40:	f851 3b04 	ldr.w	r3, [r1], #4
   12b44:	f840 3b04 	str.w	r3, [r0], #4
   12b48:	f851 3b04 	ldr.w	r3, [r1], #4
   12b4c:	f840 3b04 	str.w	r3, [r0], #4
   12b50:	f851 3b04 	ldr.w	r3, [r1], #4
   12b54:	f840 3b04 	str.w	r3, [r0], #4
   12b58:	f851 3b04 	ldr.w	r3, [r1], #4
   12b5c:	f840 3b04 	str.w	r3, [r0], #4
   12b60:	f851 3b04 	ldr.w	r3, [r1], #4
   12b64:	f840 3b04 	str.w	r3, [r0], #4
   12b68:	f851 3b04 	ldr.w	r3, [r1], #4
   12b6c:	f840 3b04 	str.w	r3, [r0], #4
   12b70:	f851 3b04 	ldr.w	r3, [r1], #4
   12b74:	f840 3b04 	str.w	r3, [r0], #4
   12b78:	f851 3b04 	ldr.w	r3, [r1], #4
   12b7c:	f840 3b04 	str.w	r3, [r0], #4
   12b80:	f851 3b04 	ldr.w	r3, [r1], #4
   12b84:	f840 3b04 	str.w	r3, [r0], #4
   12b88:	f851 3b04 	ldr.w	r3, [r1], #4
   12b8c:	f840 3b04 	str.w	r3, [r0], #4
   12b90:	f851 3b04 	ldr.w	r3, [r1], #4
   12b94:	f840 3b04 	str.w	r3, [r0], #4
   12b98:	f851 3b04 	ldr.w	r3, [r1], #4
   12b9c:	f840 3b04 	str.w	r3, [r0], #4
   12ba0:	f851 3b04 	ldr.w	r3, [r1], #4
   12ba4:	f840 3b04 	str.w	r3, [r0], #4
   12ba8:	f851 3b04 	ldr.w	r3, [r1], #4
   12bac:	f840 3b04 	str.w	r3, [r0], #4
   12bb0:	f851 3b04 	ldr.w	r3, [r1], #4
   12bb4:	f840 3b04 	str.w	r3, [r0], #4
   12bb8:	3a40      	subs	r2, #64	; 0x40
   12bba:	d2bd      	bcs.n	12b38 <memcpy+0x10>
   12bbc:	3230      	adds	r2, #48	; 0x30
   12bbe:	d311      	bcc.n	12be4 <memcpy+0xbc>
   12bc0:	f851 3b04 	ldr.w	r3, [r1], #4
   12bc4:	f840 3b04 	str.w	r3, [r0], #4
   12bc8:	f851 3b04 	ldr.w	r3, [r1], #4
   12bcc:	f840 3b04 	str.w	r3, [r0], #4
   12bd0:	f851 3b04 	ldr.w	r3, [r1], #4
   12bd4:	f840 3b04 	str.w	r3, [r0], #4
   12bd8:	f851 3b04 	ldr.w	r3, [r1], #4
   12bdc:	f840 3b04 	str.w	r3, [r0], #4
   12be0:	3a10      	subs	r2, #16
   12be2:	d2ed      	bcs.n	12bc0 <memcpy+0x98>
   12be4:	320c      	adds	r2, #12
   12be6:	d305      	bcc.n	12bf4 <memcpy+0xcc>
   12be8:	f851 3b04 	ldr.w	r3, [r1], #4
   12bec:	f840 3b04 	str.w	r3, [r0], #4
   12bf0:	3a04      	subs	r2, #4
   12bf2:	d2f9      	bcs.n	12be8 <memcpy+0xc0>
   12bf4:	3204      	adds	r2, #4
   12bf6:	d008      	beq.n	12c0a <memcpy+0xe2>
   12bf8:	07d2      	lsls	r2, r2, #31
   12bfa:	bf1c      	itt	ne
   12bfc:	f811 3b01 	ldrbne.w	r3, [r1], #1
   12c00:	f800 3b01 	strbne.w	r3, [r0], #1
   12c04:	d301      	bcc.n	12c0a <memcpy+0xe2>
   12c06:	880b      	ldrh	r3, [r1, #0]
   12c08:	8003      	strh	r3, [r0, #0]
   12c0a:	4660      	mov	r0, ip
   12c0c:	4770      	bx	lr
   12c0e:	bf00      	nop
   12c10:	2a08      	cmp	r2, #8
   12c12:	d313      	bcc.n	12c3c <memcpy+0x114>
   12c14:	078b      	lsls	r3, r1, #30
   12c16:	d08d      	beq.n	12b34 <memcpy+0xc>
   12c18:	f010 0303 	ands.w	r3, r0, #3
   12c1c:	d08a      	beq.n	12b34 <memcpy+0xc>
   12c1e:	f1c3 0304 	rsb	r3, r3, #4
   12c22:	1ad2      	subs	r2, r2, r3
   12c24:	07db      	lsls	r3, r3, #31
   12c26:	bf1c      	itt	ne
   12c28:	f811 3b01 	ldrbne.w	r3, [r1], #1
   12c2c:	f800 3b01 	strbne.w	r3, [r0], #1
   12c30:	d380      	bcc.n	12b34 <memcpy+0xc>
   12c32:	f831 3b02 	ldrh.w	r3, [r1], #2
   12c36:	f820 3b02 	strh.w	r3, [r0], #2
   12c3a:	e77b      	b.n	12b34 <memcpy+0xc>
   12c3c:	3a04      	subs	r2, #4
   12c3e:	d3d9      	bcc.n	12bf4 <memcpy+0xcc>
   12c40:	3a01      	subs	r2, #1
   12c42:	f811 3b01 	ldrb.w	r3, [r1], #1
   12c46:	f800 3b01 	strb.w	r3, [r0], #1
   12c4a:	d2f9      	bcs.n	12c40 <memcpy+0x118>
   12c4c:	780b      	ldrb	r3, [r1, #0]
   12c4e:	7003      	strb	r3, [r0, #0]
   12c50:	784b      	ldrb	r3, [r1, #1]
   12c52:	7043      	strb	r3, [r0, #1]
   12c54:	788b      	ldrb	r3, [r1, #2]
   12c56:	7083      	strb	r3, [r0, #2]
   12c58:	4660      	mov	r0, ip
   12c5a:	4770      	bx	lr

00012c5c <memset>:
   12c5c:	b470      	push	{r4, r5, r6}
   12c5e:	0786      	lsls	r6, r0, #30
   12c60:	d046      	beq.n	12cf0 <memset+0x94>
   12c62:	1e54      	subs	r4, r2, #1
   12c64:	2a00      	cmp	r2, #0
   12c66:	d041      	beq.n	12cec <memset+0x90>
   12c68:	b2ca      	uxtb	r2, r1
   12c6a:	4603      	mov	r3, r0
   12c6c:	e002      	b.n	12c74 <memset+0x18>
   12c6e:	f114 34ff 	adds.w	r4, r4, #4294967295
   12c72:	d33b      	bcc.n	12cec <memset+0x90>
   12c74:	f803 2b01 	strb.w	r2, [r3], #1
   12c78:	079d      	lsls	r5, r3, #30
   12c7a:	d1f8      	bne.n	12c6e <memset+0x12>
   12c7c:	2c03      	cmp	r4, #3
   12c7e:	d92e      	bls.n	12cde <memset+0x82>
   12c80:	b2cd      	uxtb	r5, r1
   12c82:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   12c86:	2c0f      	cmp	r4, #15
   12c88:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   12c8c:	d919      	bls.n	12cc2 <memset+0x66>
   12c8e:	f103 0210 	add.w	r2, r3, #16
   12c92:	4626      	mov	r6, r4
   12c94:	3e10      	subs	r6, #16
   12c96:	2e0f      	cmp	r6, #15
   12c98:	f842 5c10 	str.w	r5, [r2, #-16]
   12c9c:	f842 5c0c 	str.w	r5, [r2, #-12]
   12ca0:	f842 5c08 	str.w	r5, [r2, #-8]
   12ca4:	f842 5c04 	str.w	r5, [r2, #-4]
   12ca8:	f102 0210 	add.w	r2, r2, #16
   12cac:	d8f2      	bhi.n	12c94 <memset+0x38>
   12cae:	f1a4 0210 	sub.w	r2, r4, #16
   12cb2:	f022 020f 	bic.w	r2, r2, #15
   12cb6:	f004 040f 	and.w	r4, r4, #15
   12cba:	3210      	adds	r2, #16
   12cbc:	2c03      	cmp	r4, #3
   12cbe:	4413      	add	r3, r2
   12cc0:	d90d      	bls.n	12cde <memset+0x82>
   12cc2:	461e      	mov	r6, r3
   12cc4:	4622      	mov	r2, r4
   12cc6:	3a04      	subs	r2, #4
   12cc8:	2a03      	cmp	r2, #3
   12cca:	f846 5b04 	str.w	r5, [r6], #4
   12cce:	d8fa      	bhi.n	12cc6 <memset+0x6a>
   12cd0:	1f22      	subs	r2, r4, #4
   12cd2:	f022 0203 	bic.w	r2, r2, #3
   12cd6:	3204      	adds	r2, #4
   12cd8:	4413      	add	r3, r2
   12cda:	f004 0403 	and.w	r4, r4, #3
   12cde:	b12c      	cbz	r4, 12cec <memset+0x90>
   12ce0:	b2c9      	uxtb	r1, r1
   12ce2:	441c      	add	r4, r3
   12ce4:	f803 1b01 	strb.w	r1, [r3], #1
   12ce8:	429c      	cmp	r4, r3
   12cea:	d1fb      	bne.n	12ce4 <memset+0x88>
   12cec:	bc70      	pop	{r4, r5, r6}
   12cee:	4770      	bx	lr
   12cf0:	4614      	mov	r4, r2
   12cf2:	4603      	mov	r3, r0
   12cf4:	e7c2      	b.n	12c7c <memset+0x20>
   12cf6:	bf00      	nop

00012cf8 <__register_exitproc>:
   12cf8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   12cfc:	4d2c      	ldr	r5, [pc, #176]	; (12db0 <__register_exitproc+0xb8>)
   12cfe:	4606      	mov	r6, r0
   12d00:	6828      	ldr	r0, [r5, #0]
   12d02:	4698      	mov	r8, r3
   12d04:	460f      	mov	r7, r1
   12d06:	4691      	mov	r9, r2
   12d08:	f000 f882 	bl	12e10 <__retarget_lock_acquire_recursive>
   12d0c:	4b29      	ldr	r3, [pc, #164]	; (12db4 <__register_exitproc+0xbc>)
   12d0e:	681c      	ldr	r4, [r3, #0]
   12d10:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
   12d14:	2b00      	cmp	r3, #0
   12d16:	d03e      	beq.n	12d96 <__register_exitproc+0x9e>
   12d18:	685a      	ldr	r2, [r3, #4]
   12d1a:	2a1f      	cmp	r2, #31
   12d1c:	dc1c      	bgt.n	12d58 <__register_exitproc+0x60>
   12d1e:	f102 0e01 	add.w	lr, r2, #1
   12d22:	b176      	cbz	r6, 12d42 <__register_exitproc+0x4a>
   12d24:	eb03 0182 	add.w	r1, r3, r2, lsl #2
   12d28:	2401      	movs	r4, #1
   12d2a:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
   12d2e:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
   12d32:	4094      	lsls	r4, r2
   12d34:	4320      	orrs	r0, r4
   12d36:	2e02      	cmp	r6, #2
   12d38:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   12d3c:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
   12d40:	d023      	beq.n	12d8a <__register_exitproc+0x92>
   12d42:	3202      	adds	r2, #2
   12d44:	f8c3 e004 	str.w	lr, [r3, #4]
   12d48:	6828      	ldr	r0, [r5, #0]
   12d4a:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
   12d4e:	f000 f861 	bl	12e14 <__retarget_lock_release_recursive>
   12d52:	2000      	movs	r0, #0
   12d54:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   12d58:	4b17      	ldr	r3, [pc, #92]	; (12db8 <__register_exitproc+0xc0>)
   12d5a:	b30b      	cbz	r3, 12da0 <__register_exitproc+0xa8>
   12d5c:	f44f 70c8 	mov.w	r0, #400	; 0x190
   12d60:	f3af 8000 	nop.w
   12d64:	4603      	mov	r3, r0
   12d66:	b1d8      	cbz	r0, 12da0 <__register_exitproc+0xa8>
   12d68:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
   12d6c:	6002      	str	r2, [r0, #0]
   12d6e:	2100      	movs	r1, #0
   12d70:	6041      	str	r1, [r0, #4]
   12d72:	460a      	mov	r2, r1
   12d74:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
   12d78:	f04f 0e01 	mov.w	lr, #1
   12d7c:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
   12d80:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
   12d84:	2e00      	cmp	r6, #0
   12d86:	d0dc      	beq.n	12d42 <__register_exitproc+0x4a>
   12d88:	e7cc      	b.n	12d24 <__register_exitproc+0x2c>
   12d8a:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
   12d8e:	430c      	orrs	r4, r1
   12d90:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
   12d94:	e7d5      	b.n	12d42 <__register_exitproc+0x4a>
   12d96:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
   12d9a:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   12d9e:	e7bb      	b.n	12d18 <__register_exitproc+0x20>
   12da0:	6828      	ldr	r0, [r5, #0]
   12da2:	f000 f837 	bl	12e14 <__retarget_lock_release_recursive>
   12da6:	f04f 30ff 	mov.w	r0, #4294967295
   12daa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   12dae:	bf00      	nop
   12db0:	20000938 	.word	0x20000938
   12db4:	00013ea8 	.word	0x00013ea8
   12db8:	00000000 	.word	0x00000000

00012dbc <register_fini>:
   12dbc:	4b02      	ldr	r3, [pc, #8]	; (12dc8 <register_fini+0xc>)
   12dbe:	b113      	cbz	r3, 12dc6 <register_fini+0xa>
   12dc0:	4802      	ldr	r0, [pc, #8]	; (12dcc <register_fini+0x10>)
   12dc2:	f000 b805 	b.w	12dd0 <atexit>
   12dc6:	4770      	bx	lr
   12dc8:	00000000 	.word	0x00000000
   12dcc:	00012ddd 	.word	0x00012ddd

00012dd0 <atexit>:
   12dd0:	2300      	movs	r3, #0
   12dd2:	4601      	mov	r1, r0
   12dd4:	461a      	mov	r2, r3
   12dd6:	4618      	mov	r0, r3
   12dd8:	f7ff bf8e 	b.w	12cf8 <__register_exitproc>

00012ddc <__libc_fini_array>:
   12ddc:	b538      	push	{r3, r4, r5, lr}
   12dde:	4c0a      	ldr	r4, [pc, #40]	; (12e08 <__libc_fini_array+0x2c>)
   12de0:	4d0a      	ldr	r5, [pc, #40]	; (12e0c <__libc_fini_array+0x30>)
   12de2:	1b64      	subs	r4, r4, r5
   12de4:	10a4      	asrs	r4, r4, #2
   12de6:	d00a      	beq.n	12dfe <__libc_fini_array+0x22>
   12de8:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
   12dec:	3b01      	subs	r3, #1
   12dee:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   12df2:	3c01      	subs	r4, #1
   12df4:	f855 3904 	ldr.w	r3, [r5], #-4
   12df8:	4798      	blx	r3
   12dfa:	2c00      	cmp	r4, #0
   12dfc:	d1f9      	bne.n	12df2 <__libc_fini_array+0x16>
   12dfe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   12e02:	f001 b85f 	b.w	13ec4 <_fini>
   12e06:	bf00      	nop
   12e08:	00013ed4 	.word	0x00013ed4
   12e0c:	00013ed0 	.word	0x00013ed0

00012e10 <__retarget_lock_acquire_recursive>:
   12e10:	4770      	bx	lr
   12e12:	bf00      	nop

00012e14 <__retarget_lock_release_recursive>:
   12e14:	4770      	bx	lr
   12e16:	bf00      	nop
   12e18:	682f2e2e 	.word	0x682f2e2e
   12e1c:	702f6c70 	.word	0x702f6c70
   12e20:	2f74726f 	.word	0x2f74726f
   12e24:	5f6c7068 	.word	0x5f6c7068
   12e28:	6f697067 	.word	0x6f697067
   12e2c:	7361625f 	.word	0x7361625f
   12e30:	00682e65 	.word	0x00682e65
   12e34:	682f2e2e 	.word	0x682f2e2e
   12e38:	692f6c61 	.word	0x692f6c61
   12e3c:	756c636e 	.word	0x756c636e
   12e40:	682f6564 	.word	0x682f6564
   12e44:	775f6c61 	.word	0x775f6c61
   12e48:	682e7464 	.word	0x682e7464
   12e4c:	00000000 	.word	0x00000000
   12e50:	682f2e2e 	.word	0x682f2e2e
   12e54:	732f6c61 	.word	0x732f6c61
   12e58:	682f6372 	.word	0x682f6372
   12e5c:	635f6c61 	.word	0x635f6c61
   12e60:	6e656c61 	.word	0x6e656c61
   12e64:	2e726164 	.word	0x2e726164
   12e68:	00000063 	.word	0x00000063
   12e6c:	682f2e2e 	.word	0x682f2e2e
   12e70:	732f6c61 	.word	0x732f6c61
   12e74:	682f6372 	.word	0x682f6372
   12e78:	635f6c61 	.word	0x635f6c61
   12e7c:	615f6e61 	.word	0x615f6e61
   12e80:	636e7973 	.word	0x636e7973
   12e84:	0000632e 	.word	0x0000632e
   12e88:	682f2e2e 	.word	0x682f2e2e
   12e8c:	732f6c61 	.word	0x732f6c61
   12e90:	682f6372 	.word	0x682f6372
   12e94:	635f6c61 	.word	0x635f6c61
   12e98:	735f6372 	.word	0x735f6372
   12e9c:	2e636e79 	.word	0x2e636e79
   12ea0:	00000063 	.word	0x00000063
   12ea4:	682f2e2e 	.word	0x682f2e2e
   12ea8:	732f6c61 	.word	0x732f6c61
   12eac:	682f6372 	.word	0x682f6372
   12eb0:	695f6c61 	.word	0x695f6c61
   12eb4:	6d5f6332 	.word	0x6d5f6332
   12eb8:	7973615f 	.word	0x7973615f
   12ebc:	632e636e 	.word	0x632e636e
   12ec0:	00000000 	.word	0x00000000
   12ec4:	682f2e2e 	.word	0x682f2e2e
   12ec8:	732f6c61 	.word	0x732f6c61
   12ecc:	682f6372 	.word	0x682f6372
   12ed0:	705f6c61 	.word	0x705f6c61
   12ed4:	632e6d77 	.word	0x632e6d77
   12ed8:	00000000 	.word	0x00000000
   12edc:	682f2e2e 	.word	0x682f2e2e
   12ee0:	732f6c61 	.word	0x732f6c61
   12ee4:	682f6372 	.word	0x682f6372
   12ee8:	715f6c61 	.word	0x715f6c61
   12eec:	5f697073 	.word	0x5f697073
   12ef0:	636e7973 	.word	0x636e7973
   12ef4:	0000632e 	.word	0x0000632e
   12ef8:	682f2e2e 	.word	0x682f2e2e
   12efc:	732f6c61 	.word	0x732f6c61
   12f00:	682f6372 	.word	0x682f6372
   12f04:	735f6c61 	.word	0x735f6c61
   12f08:	6d5f6970 	.word	0x6d5f6970
   12f0c:	7973615f 	.word	0x7973615f
   12f10:	632e636e 	.word	0x632e636e
   12f14:	00000000 	.word	0x00000000
   12f18:	682f2e2e 	.word	0x682f2e2e
   12f1c:	732f6c61 	.word	0x732f6c61
   12f20:	682f6372 	.word	0x682f6372
   12f24:	735f6c61 	.word	0x735f6c61
   12f28:	6d5f6970 	.word	0x6d5f6970
   12f2c:	6e79735f 	.word	0x6e79735f
   12f30:	00632e63 	.word	0x00632e63
   12f34:	682f2e2e 	.word	0x682f2e2e
   12f38:	732f6c61 	.word	0x732f6c61
   12f3c:	682f6372 	.word	0x682f6372
   12f40:	745f6c61 	.word	0x745f6c61
   12f44:	72656d69 	.word	0x72656d69
   12f48:	0000632e 	.word	0x0000632e
   12f4c:	682f2e2e 	.word	0x682f2e2e
   12f50:	752f6c61 	.word	0x752f6c61
   12f54:	736c6974 	.word	0x736c6974
   12f58:	6372732f 	.word	0x6372732f
   12f5c:	6974752f 	.word	0x6974752f
   12f60:	6c5f736c 	.word	0x6c5f736c
   12f64:	2e747369 	.word	0x2e747369
   12f68:	00000063 	.word	0x00000063
   12f6c:	03020100 	.word	0x03020100
   12f70:	07060504 	.word	0x07060504
   12f74:	14100c08 	.word	0x14100c08
   12f78:	40302018 	.word	0x40302018

00012f7c <_map>:
   12f7c:	00000004 00000004 00000005 00000005     ................
   12f8c:	00000006 00000056 00000007 00000057     ....V.......W...
   12f9c:	682f2e2e 652f6c70 682f6369 655f6c70     ../hpl/eic/hpl_e
   12fac:	632e6369 00000000                       ic.c....

00012fb4 <user_mux_confs>:
   12fb4:	00000100 00000000 00000000 00000000     ................
	...

00012ff8 <channel_confs>:
   12ff8:	0000065e 00000000 00000000 00000000     ^...............
	...

00013038 <interrupt_cfg>:
	...
   130b8:	682f2e2e 712f6c70 2f697073 5f6c7068     ../hpl/qspi/hpl_
   130c8:	69707371 0000632e 682f2e2e 722f6c70     qspi.c..../hpl/r
   130d8:	682f6374 725f6c70 632e6374 00000000     tc/hpl_rtc.c....
   130e8:	682f2e2e 732f6c70 6f637265 70682f6d     ../hpl/sercom/hp
   130f8:	65735f6c 6d6f6372 0000632e 40003000     l_sercom.c...0.@
   13108:	40003400 41012000 41014000 43000000     .4.@. .A.@.A...C
   13118:	43000400 43000800 43000c00              ...C...C...C

00013124 <sercomspi_regs>:
   13124:	0020000c 00020000 00000000 01ff009f     .. .............
   13134:	30000c04 02000000 00000000 ff009f00     ...0............
   13144:	00000601 682f2e2e 742f6c70 70682f63     ....../hpl/tc/hp
   13154:	63745f6c 0000632e 40003800 40003c00     l_tc.c...8.@.<.@
   13164:	4101a000 4101c000 42001400 42001800     ...A...A...B...B
   13174:	43001400 43001800                       ...C...C

0001317c <_usb_ep_cfgs>:
   1317c:	20000c44 00000000 00000040 20000c84     D.. ....@...... 
   1318c:	20000cc4 00400040 20000d04 20000d44     ... @.@.... D.. 
   1319c:	00400040 20000d84 20000dc4 00400040     @.@.... ... @.@.
   131ac:	20000e04 20000e44 00400040 00000804     ... D.. @.@.....
   131bc:	00004a25 682f2e2e 772f6c70 682f7464     %J..../hpl/wdt/h
   131cc:	775f6c70 632e7464 00000000 682f2e2e     pl_wdt.c....../h
   131dc:	702f6c70 2f74726f 5f6c7068 6f697067     pl/port/hpl_gpio
   131ec:	7361625f 00682e65                       _base.h.

000131f4 <n25q256a_interface>:
   131f4:	0000adb1 0000ae55 0000af65 0000b11d     ....U...e.......
   13204:	0000b1ad 752f2e2e 642f6273 63697665     ....../usb/devic
   13214:	73752f65 2e636462 00000063              e/usbdc.c...

00013220 <_ZTV13CANOpen_Class>:
	...
   13228:	0000dd65                                e...

0001322c <_ZTV8CO_Class>:
	...
   13234:	0000dd65                                e...

00013238 <_ZTV15CO_Driver_Class>:
	...
   13240:	0000dd65                                e...

00013244 <_ZL13OD_record1018>:
   13244:	200002d8 00000005 00000001 200002dc     ... ........... 
   13254:	00000085 00000004 200002e0 00000085     ........... ....
   13264:	00000004 200002e4 00000085 00000004     ....... ........
   13274:	200002e8 00000085 00000004              ... ........

00013280 <_ZL13OD_record1200>:
   13280:	200002f4 00000005 00000001 200002f8     ... ........... 
   13290:	00000085 00000004 200002fc 00000085     ........... ....
   132a0:	00000004                                ....

000132a4 <_ZL13OD_record1400>:
   132a4:	20000300 00000005 00000001 20000304     ... ........... 
   132b4:	0000008d 00000004 20000308 0000000d     ........... ....
   132c4:	00000001                                ....

000132c8 <_ZL13OD_record1401>:
   132c8:	2000030c 00000005 00000001 20000310     ... ........... 
   132d8:	0000008d 00000004 20000314 0000000d     ........... ....
   132e8:	00000001                                ....

000132ec <_ZL13OD_record1402>:
   132ec:	20000318 00000005 00000001 2000031c     ... ........... 
   132fc:	0000008d 00000004 20000320 0000000d     ........ .. ....
   1330c:	00000001                                ....

00013310 <_ZL13OD_record1403>:
   13310:	20000324 00000005 00000001 20000328     $.. ........(.. 
   13320:	0000008d 00000004 2000032c 0000000d     ........,.. ....
   13330:	00000001                                ....

00013334 <_ZL13OD_record1600>:
   13334:	20000330 0000000d 00000001 20000334     0.. ........4.. 
   13344:	0000008d 00000004 20000338 0000008d     ........8.. ....
   13354:	00000004 2000033c 0000008d 00000004     ....<.. ........
   13364:	20000340 0000008d 00000004 20000344     @.. ........D.. 
   13374:	0000008d 00000004 20000348 0000008d     ........H.. ....
   13384:	00000004 2000034c 0000008d 00000004     ....L.. ........
   13394:	20000350 0000008d 00000004              P.. ........

000133a0 <_ZL13OD_record1601>:
   133a0:	20000354 0000000d 00000001 20000358     T.. ........X.. 
   133b0:	0000008d 00000004 2000035c 0000008d     ........\.. ....
   133c0:	00000004 20000360 0000008d 00000004     ....`.. ........
   133d0:	20000364 0000008d 00000004 20000368     d.. ........h.. 
   133e0:	0000008d 00000004 2000036c 0000008d     ........l.. ....
   133f0:	00000004 20000370 0000008d 00000004     ....p.. ........
   13400:	20000374 0000008d 00000004              t.. ........

0001340c <_ZL13OD_record1602>:
   1340c:	20000378 0000000d 00000001 2000037c     x.. ........|.. 
   1341c:	0000008d 00000004 20000380 0000008d     ........... ....
   1342c:	00000004 20000384 0000008d 00000004     ....... ........
   1343c:	20000388 0000008d 00000004 2000038c     ... ........... 
   1344c:	0000008d 00000004 20000390 0000008d     ........... ....
   1345c:	00000004 20000394 0000008d 00000004     ....... ........
   1346c:	20000398 0000008d 00000004              ... ........

00013478 <_ZL13OD_record1603>:
   13478:	2000039c 0000000d 00000001 200003a0     ... ........... 
   13488:	0000008d 00000004 200003a4 0000008d     ........... ....
   13498:	00000004 200003a8 0000008d 00000004     ....... ........
   134a8:	200003ac 0000008d 00000004 200003b0     ... ........... 
   134b8:	0000008d 00000004 200003b4 0000008d     ........... ....
   134c8:	00000004 200003b8 0000008d 00000004     ....... ........
   134d8:	200003bc 0000008d 00000004              ... ........

000134e4 <_ZL13OD_record1800>:
   134e4:	200003c0 00000005 00000001 200003c4     ... ........... 
   134f4:	0000008d 00000004 200003c8 0000000d     ........... ....
   13504:	00000001 200003cc 0000008d 00000002     ....... ........
   13514:	200003d0 0000000d 00000001 200003d4     ... ........... 
   13524:	0000008d 00000002 200003d8 0000000d     ........... ....
   13534:	00000001                                ....

00013538 <_ZL13OD_record1801>:
   13538:	200003dc 00000005 00000001 200003e0     ... ........... 
   13548:	0000008d 00000004 200003e4 0000000d     ........... ....
   13558:	00000001 200003e8 0000008d 00000002     ....... ........
   13568:	200003ec 0000000d 00000001 200003f0     ... ........... 
   13578:	0000008d 00000002 200003f4 0000000d     ........... ....
   13588:	00000001                                ....

0001358c <_ZL13OD_record1802>:
   1358c:	200003f8 00000005 00000001 200003fc     ... ........... 
   1359c:	0000008d 00000004 20000400 0000000d     ........... ....
   135ac:	00000001 20000404 0000008d 00000002     ....... ........
   135bc:	20000408 0000000d 00000001 2000040c     ... ........... 
   135cc:	0000008d 00000002 20000410 0000000d     ........... ....
   135dc:	00000001                                ....

000135e0 <_ZL13OD_record1803>:
   135e0:	20000414 00000005 00000001 20000418     ... ........... 
   135f0:	0000008d 00000004 2000041c 0000000d     ........... ....
   13600:	00000001 20000420 0000008d 00000002     .... .. ........
   13610:	20000424 0000000d 00000001 20000428     $.. ........(.. 
   13620:	0000008d 00000002 2000042c 0000000d     ........,.. ....
   13630:	00000001                                ....

00013634 <_ZL13OD_record1A00>:
   13634:	20000430 0000000d 00000001 20000434     0.. ........4.. 
   13644:	0000008d 00000004 20000438 0000008d     ........8.. ....
   13654:	00000004 2000043c 0000008d 00000004     ....<.. ........
   13664:	20000440 0000008d 00000004 20000444     @.. ........D.. 
   13674:	0000008d 00000004 20000448 0000008d     ........H.. ....
   13684:	00000004 2000044c 0000008d 00000004     ....L.. ........
   13694:	20000450 0000008d 00000004              P.. ........

000136a0 <_ZL13OD_record1A01>:
   136a0:	20000454 0000000d 00000001 20000458     T.. ........X.. 
   136b0:	0000008d 00000004 2000045c 0000008d     ........\.. ....
   136c0:	00000004 20000460 0000008d 00000004     ....`.. ........
   136d0:	20000464 0000008d 00000004 20000468     d.. ........h.. 
   136e0:	0000008d 00000004 2000046c 0000008d     ........l.. ....
   136f0:	00000004 20000470 0000008d 00000004     ....p.. ........
   13700:	20000474 0000008d 00000004              t.. ........

0001370c <_ZL13OD_record1A02>:
   1370c:	20000478 0000000d 00000001 2000047c     x.. ........|.. 
   1371c:	0000008d 00000004 20000480 0000008d     ........... ....
   1372c:	00000004 20000484 0000008d 00000004     ....... ........
   1373c:	20000488 0000008d 00000004 2000048c     ... ........... 
   1374c:	0000008d 00000004 20000490 0000008d     ........... ....
   1375c:	00000004 20000494 0000008d 00000004     ....... ........
   1376c:	20000498 0000008d 00000004              ... ........

00013778 <_ZL13OD_record1A03>:
   13778:	2000049c 0000000d 00000001 200004a0     ... ........... 
   13788:	0000008d 00000004 200004a4 0000008d     ........... ....
   13798:	00000004 200004a8 0000008d 00000004     ....... ........
   137a8:	200004ac 0000008d 00000004 200004b0     ... ........... 
   137b8:	0000008d 00000004 200004b4 0000008d     ........... ....
   137c8:	00000004 200004b8 0000008d 00000004     ....... ........
   137d8:	200004bc 0000008d 00000004              ... ........

000137e4 <_ZL13OD_record2120>:
   137e4:	200001a8 00000006 00000001 200001b0     ... ........... 
   137f4:	000000be 00000008 200001b8 000000be     ........... ....
   13804:	00000008 200001c0 000000be 00000004     ....... ........
   13814:	200001c8 000000be 00000008 00000000     ... ............
   13824:	0000000e 00000000                       ........

0001382c <_ZL13OD_record2130>:
   1382c:	200001d8 00000006 00000001 200001d9     ... ........... 
   1383c:	00000006 0000001e 200001f8 0000008e     ........... ....
   1384c:	00000008 20000200 000000be 00000004     ....... ........

0001385c <CO_ObjDict>:
   1385c:	00001000 00000000 00000085 00000004     ................
   1386c:	20000298 00001001 00000000 00000036     ... ........6...
   1387c:	00000001 2000011c 00001002 00000000     ....... ........
   1388c:	000000b6 00000004 20000120 00001003     ........ .. ....
   1389c:	00000008 0000008e 00000004 20000124     ............$.. 
   138ac:	00001005 00000000 0000008d 00000004     ................
   138bc:	2000029c 00001006 00000000 0000008d     ... ............
   138cc:	00000004 200002a0 00001007 00000000     ....... ........
   138dc:	0000008d 00000004 200002a4 00001008     ........... ....
   138ec:	00000000 00000005 0000000b 200002a8     ............... 
   138fc:	00001009 00000000 00000005 00000004     ................
   1390c:	200002b3 0000100a 00000000 00000005     ... ............
   1391c:	00000004 200002b7 00001010 00000001     ....... ........
   1392c:	0000008e 00000004 20000144 00001011     ........D.. ....
   1393c:	00000001 0000008e 00000004 20000148     ............H.. 
   1394c:	00001014 00000000 00000085 00000004     ................
   1395c:	200002bc 00001015 00000000 0000008d     ... ............
   1396c:	00000002 200002c0 00001016 00000004     ....... ........
   1397c:	0000008d 00000004 200002c4 00001017     ........... ....
   1398c:	00000000 0000008d 00000002 200002d4     ............... 
   1399c:	00001018 00000004 00000000 00000000     ................
   139ac:	00013244 00001019 00000000 0000000d     D2..............
   139bc:	00000001 200002ec 00001029 00000006     ....... ).......
   139cc:	0000000d 00000001 200002ed 00001200     ........... ....
   139dc:	00000002 00000000 00000000 00013280     .............2..
   139ec:	00001400 00000002 00000000 00000000     ................
   139fc:	000132a4 00001401 00000002 00000000     .2..............
   13a0c:	00000000 000132c8 00001402 00000002     .....2..........
	...
   13a24:	000132ec 00001403 00000002 00000000     .2..............
   13a34:	00000000 00013310 00001600 00000008     .....3..........
	...
   13a4c:	00013334 00001601 00000008 00000000     43..............
   13a5c:	00000000 000133a0 00001602 00000008     .....3..........
	...
   13a74:	0001340c 00001603 00000008 00000000     .4..............
   13a84:	00000000 00013478 00001800 00000006     ....x4..........
	...
   13a9c:	000134e4 00001801 00000006 00000000     .4..............
   13aac:	00000000 00013538 00001802 00000006     ....85..........
	...
   13ac4:	0001358c 00001803 00000006 00000000     .5..............
   13ad4:	00000000 000135e0 00001a00 00000008     .....5..........
	...
   13aec:	00013634 00001a01 00000008 00000000     46..............
   13afc:	00000000 000136a0 00001a02 00000008     .....6..........
	...
   13b14:	0001370c 00001a03 00000008 00000000     .7..............
   13b24:	00000000 00013778 00001f80 00000000     ....x7..........
   13b34:	0000008d 00000004 200004c0 00002100     ........... .!..
   13b44:	00000000 00000036 0000000a 2000014c     ....6.......L.. 
   13b54:	00002101 00000000 0000000d 00000001     .!..............
   13b64:	200004c4 00002102 00000000 0000008d     ... .!..........
   13b74:	00000002 200004c6 00002103 00000000     ....... .!......
   13b84:	0000008e 00000002 20000156 00002104     ........V.. .!..
   13b94:	00000000 00000086 00000002 20000158     ............X.. 
   13ba4:	00002106 00000000 00000087 00000004     .!..............
   13bb4:	2000024c 00002107 00000005 000000be     L.. .!..........
   13bc4:	00000002 2000015a 00002108 00000001     ....Z.. .!......
   13bd4:	000000b6 00000002 20000164 00002109     ........d.. .!..
   13be4:	00000001 000000b6 00000002 20000166     ............f.. 
   13bf4:	00002110 00000010 000000fe 00000004     .!..............
   13c04:	20000168 00002111 00000010 000000fd     h.. .!..........
   13c14:	00000004 200004c8 00002112 00000010     ....... .!......
   13c24:	000000ff 00000004 20000250 00002120     ........P..  !..
   13c34:	00000005 00000000 00000000 000137e4     .............7..
   13c44:	00002130 00000003 00000000 00000000     0!..............
   13c54:	0001382c 00006000 00000008 00000076     ,8...`......v...
   13c64:	00000001 20000208 00006200 00000008     ....... .b......
   13c74:	0000003e 00000001 20000210 00006401     >.......... .d..
   13c84:	0000000c 000000b6 00000002 20000218     ............... 
   13c94:	00006411 00000008 000000be 00000002     .d..............
   13ca4:	20000230                                0.. 

00013ca8 <_ZL17crc16_ccitt_table>:
   13ca8:	10210000 30632042 50a54084 70e760c6     ..!.B c0.@.P.`.p
   13cb8:	91298108 b16ba14a d1adc18c f1efe1ce     ..).J.k.........
   13cc8:	02101231 22523273 429452b5 62d672f7     1...s2R".R.B.r.b
   13cd8:	83189339 a35ab37b c39cd3bd e3def3ff     9...{.Z.........
   13ce8:	34432462 14010420 74c764e6 548544a4     b$C4 ....d.t.D.T
   13cf8:	b54ba56a 95098528 f5cfe5ee d58dc5ac     j.K.(...........
   13d08:	26723653 06301611 66f676d7 46b45695     S6r&..0..v.f.V.F
   13d18:	a77ab75b 87389719 e7fef7df c7bcd79d     [.z...8.........
   13d28:	58e548c4 78a76886 18610840 38232802     .H.X.h.x@.a..(#8
   13d38:	d9edc9cc f9afe98e 99698948 b92ba90a     ........H.i...+.
   13d48:	4ad45af5 6a967ab7 0a501a71 2a123a33     .Z.J.z.jq.P.3:.*
   13d58:	cbdcdbfd eb9efbbf 8b589b79 ab1abb3b     ........y.X.;...
   13d68:	7c876ca6 5cc54ce4 3c032c22 1c410c60     .l.|.L.\",.<`.A.
   13d78:	fd8fedae ddcdcdec bd0bad2a 9d498d68     ........*...h.I.
   13d88:	6eb67e97 4ef45ed5 2e323e13 0e701e51     .~.n.^.N.>2.Q.p.
   13d98:	efbeff9f cffcdfdd af3abf1b 8f789f59     ..........:.Y.x.
   13da8:	81a99188 a1ebb1ca c12dd10c e16ff14e     ..........-.N.o.
   13db8:	00a11080 20e330c2 40255004 60677046     .....0. .P%@Fpg`
   13dc8:	939883b9 b3daa3fb d31cc33d f35ee37f     ........=.....^.
   13dd8:	129002b1 32d222f3 52144235 72566277     .....".25B.RwbVr
   13de8:	a5cbb5ea 858995a8 e54ff56e c50dd52c     ........n.O.,...
   13df8:	24c334e2 048114a0 64477466 44055424     .4.$....ftGd$T.D
   13e08:	b7faa7db 97b88799 f77ee75f d73cc71d     ........_.~...<.
   13e18:	36f226d3 16b00691 76766657 56344615     .&.6....Wfvv.F4V
   13e28:	c96dd94c e92ff90e 89e999c8 a9abb98a     L.m.../.........
   13e38:	48655844 68277806 08e118c0 28a33882     DXeH.x'h.....8.(
   13e48:	db5ccb7d fb1eeb3f 9bd88bf9 bb9aabbb     }.\.?...........
   13e58:	5a544a75 7a166a37 1ad00af1 3a922ab3     uJTZ7j.z.....*.:
   13e68:	ed0ffd2e cd4ddd6c ad8bbdaa 8dc99de8     ....l.M.........
   13e78:	6c077c26 4c455c64 2c833ca2 0cc11ce0     &|.ld\EL.<.,....
   13e88:	ff3eef1f df7ccf5d bfbaaf9b 9ff88fd9     ..>.].|.........
   13e98:	7e366e17 5e744e55 3eb22e93 1ef00ed1     .n6~UNt^...>....

00013ea8 <_global_impure_ptr>:
   13ea8:	20000510                                ... 

00013eac <_init>:
   13eac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   13eae:	bf00      	nop
   13eb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
   13eb2:	bc08      	pop	{r3}
   13eb4:	469e      	mov	lr, r3
   13eb6:	4770      	bx	lr

00013eb8 <__init_array_start>:
   13eb8:	00012dbd 	.word	0x00012dbd

00013ebc <__frame_dummy_init_array_entry>:
   13ebc:	00000289 000003b1                       ........

00013ec4 <_fini>:
   13ec4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   13ec6:	bf00      	nop
   13ec8:	bcf8      	pop	{r3, r4, r5, r6, r7}
   13eca:	bc08      	pop	{r3}
   13ecc:	469e      	mov	lr, r3
   13ece:	4770      	bx	lr

00013ed0 <__fini_array_start>:
   13ed0:	00000265 	.word	0x00000265
