
CANOpenNMTSlave.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000142cc  00000000  00000000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  000142cc  000142cc  000242cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000a34  20000000  000142d4  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bkupram      00000000  47000000  47000000  00030a34  2**0
                  CONTENTS
  4 .qspi         00000000  04000000  04000000  00030a34  2**0
                  CONTENTS
  5 .bss          00001394  20000a34  00014d08  00030a34  2**2
                  ALLOC
  6 .stack        00010000  20001dc8  0001609c  00030a34  2**0
                  ALLOC
  7 .ARM.attributes 0000002e  00000000  00000000  00030a34  2**0
                  CONTENTS, READONLY
  8 .comment      00000059  00000000  00000000  00030a62  2**0
                  CONTENTS, READONLY
  9 .debug_info   0006d626  00000000  00000000  00030abb  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00008b2f  00000000  00000000  0009e0e1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00018daf  00000000  00000000  000a6c10  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00002c90  00000000  00000000  000bf9bf  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00002978  00000000  00000000  000c264f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  0004a7a3  00000000  00000000  000c4fc7  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0003648a  00000000  00000000  0010f76a  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00138741  00000000  00000000  00145bf4  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  0000bb68  00000000  00000000  0027e338  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	c8 1d 01 20 d5 02 00 00 d1 02 00 00 d1 02 00 00     ... ............
      10:	d1 02 00 00 d1 02 00 00 d1 02 00 00 00 00 00 00     ................
	...
      2c:	d1 02 00 00 d1 02 00 00 00 00 00 00 d1 02 00 00     ................
      3c:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      4c:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      5c:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      6c:	d5 57 00 00 d9 45 00 00 e9 45 00 00 d1 02 00 00     .W...E...E......
      7c:	f9 45 00 00 09 46 00 00 19 46 00 00 29 46 00 00     .E...F...F..)F..
      8c:	39 46 00 00 49 46 00 00 59 46 00 00 d1 02 00 00     9F..IF..YF......
      9c:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      ac:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      bc:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      cc:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      dc:	d1 02 00 00 d1 02 00 00 d1 02 00 00 00 00 00 00     ................
	...
      f4:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     104:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     114:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     124:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     134:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     144:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     154:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     164:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     174:	d1 02 00 00 d1 02 00 00 f5 3a 00 00 19 a5 00 00     .........:......
     184:	29 a5 00 00 39 a5 00 00 49 a5 00 00 d1 02 00 00     )...9...I.......
     194:	ad 6f 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     .o..............
     1a4:	d1 02 00 00 d1 02 00 00 d1 02 00 00 c9 6f 00 00     .............o..
     1b4:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     1c4:	e5 6f 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     .o..............
     1d4:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     1e4:	d1 02 00 00 d1 02 00 00 69 7c 00 00 d1 02 00 00     ........i|......
     1f4:	85 7c 00 00 d1 02 00 00 a1 7c 00 00 bd 7c 00 00     .|.......|...|..
     204:	d9 7c 00 00 f5 7c 00 00 d1 02 00 00 d1 02 00 00     .|...|..........
     214:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     224:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     234:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     244:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     254:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................

00000264 <__do_global_dtors_aux>:
     264:	b510      	push	{r4, lr}
     266:	4c05      	ldr	r4, [pc, #20]	; (27c <__do_global_dtors_aux+0x18>)
     268:	7823      	ldrb	r3, [r4, #0]
     26a:	b933      	cbnz	r3, 27a <__do_global_dtors_aux+0x16>
     26c:	4b04      	ldr	r3, [pc, #16]	; (280 <__do_global_dtors_aux+0x1c>)
     26e:	b113      	cbz	r3, 276 <__do_global_dtors_aux+0x12>
     270:	4804      	ldr	r0, [pc, #16]	; (284 <__do_global_dtors_aux+0x20>)
     272:	f3af 8000 	nop.w
     276:	2301      	movs	r3, #1
     278:	7023      	strb	r3, [r4, #0]
     27a:	bd10      	pop	{r4, pc}
     27c:	20000a34 	.word	0x20000a34
     280:	00000000 	.word	0x00000000
     284:	000142d4 	.word	0x000142d4

00000288 <frame_dummy>:
     288:	4b0c      	ldr	r3, [pc, #48]	; (2bc <frame_dummy+0x34>)
     28a:	b143      	cbz	r3, 29e <frame_dummy+0x16>
     28c:	480c      	ldr	r0, [pc, #48]	; (2c0 <frame_dummy+0x38>)
     28e:	490d      	ldr	r1, [pc, #52]	; (2c4 <frame_dummy+0x3c>)
     290:	b510      	push	{r4, lr}
     292:	f3af 8000 	nop.w
     296:	480c      	ldr	r0, [pc, #48]	; (2c8 <frame_dummy+0x40>)
     298:	6803      	ldr	r3, [r0, #0]
     29a:	b923      	cbnz	r3, 2a6 <frame_dummy+0x1e>
     29c:	bd10      	pop	{r4, pc}
     29e:	480a      	ldr	r0, [pc, #40]	; (2c8 <frame_dummy+0x40>)
     2a0:	6803      	ldr	r3, [r0, #0]
     2a2:	b933      	cbnz	r3, 2b2 <frame_dummy+0x2a>
     2a4:	4770      	bx	lr
     2a6:	4b09      	ldr	r3, [pc, #36]	; (2cc <frame_dummy+0x44>)
     2a8:	2b00      	cmp	r3, #0
     2aa:	d0f7      	beq.n	29c <frame_dummy+0x14>
     2ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     2b0:	4718      	bx	r3
     2b2:	4b06      	ldr	r3, [pc, #24]	; (2cc <frame_dummy+0x44>)
     2b4:	2b00      	cmp	r3, #0
     2b6:	d0f5      	beq.n	2a4 <frame_dummy+0x1c>
     2b8:	4718      	bx	r3
     2ba:	bf00      	nop
     2bc:	00000000 	.word	0x00000000
     2c0:	000142d4 	.word	0x000142d4
     2c4:	20000a38 	.word	0x20000a38
     2c8:	000142d4 	.word	0x000142d4
     2cc:	00000000 	.word	0x00000000

000002d0 <Dummy_Handler>:
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
        while (1) {
			asm("nop");
     2d0:	bf00      	nop
     2d2:	e7fd      	b.n	2d0 <Dummy_Handler>

000002d4 <Reset_Handler>:
{
     2d4:	b508      	push	{r3, lr}
        if (pSrc != pDest) {
     2d6:	4b17      	ldr	r3, [pc, #92]	; (334 <Reset_Handler+0x60>)
     2d8:	4a17      	ldr	r2, [pc, #92]	; (338 <Reset_Handler+0x64>)
     2da:	429a      	cmp	r2, r3
     2dc:	d010      	beq.n	300 <Reset_Handler+0x2c>
                for (; pDest < &_erelocate;) {
     2de:	4b17      	ldr	r3, [pc, #92]	; (33c <Reset_Handler+0x68>)
     2e0:	4a14      	ldr	r2, [pc, #80]	; (334 <Reset_Handler+0x60>)
     2e2:	429a      	cmp	r2, r3
     2e4:	d20c      	bcs.n	300 <Reset_Handler+0x2c>
     2e6:	3b01      	subs	r3, #1
     2e8:	1a9b      	subs	r3, r3, r2
     2ea:	f023 0303 	bic.w	r3, r3, #3
     2ee:	3304      	adds	r3, #4
     2f0:	4413      	add	r3, r2
     2f2:	4911      	ldr	r1, [pc, #68]	; (338 <Reset_Handler+0x64>)
                        *pDest++ = *pSrc++;
     2f4:	f851 0b04 	ldr.w	r0, [r1], #4
     2f8:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
     2fc:	429a      	cmp	r2, r3
     2fe:	d1f9      	bne.n	2f4 <Reset_Handler+0x20>
        for (pDest = &_szero; pDest < &_ezero;) {
     300:	4b0f      	ldr	r3, [pc, #60]	; (340 <Reset_Handler+0x6c>)
     302:	4a10      	ldr	r2, [pc, #64]	; (344 <Reset_Handler+0x70>)
     304:	429a      	cmp	r2, r3
     306:	d20a      	bcs.n	31e <Reset_Handler+0x4a>
     308:	3b01      	subs	r3, #1
     30a:	1a9b      	subs	r3, r3, r2
     30c:	f023 0303 	bic.w	r3, r3, #3
     310:	3304      	adds	r3, #4
     312:	4413      	add	r3, r2
                *pDest++ = 0;
     314:	2100      	movs	r1, #0
     316:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
     31a:	4293      	cmp	r3, r2
     31c:	d1fb      	bne.n	316 <Reset_Handler+0x42>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     31e:	4a0a      	ldr	r2, [pc, #40]	; (348 <Reset_Handler+0x74>)
     320:	4b0a      	ldr	r3, [pc, #40]	; (34c <Reset_Handler+0x78>)
     322:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
     326:	6093      	str	r3, [r2, #8]
        __libc_init_array();
     328:	4b09      	ldr	r3, [pc, #36]	; (350 <Reset_Handler+0x7c>)
     32a:	4798      	blx	r3
        main();
     32c:	4b09      	ldr	r3, [pc, #36]	; (354 <Reset_Handler+0x80>)
     32e:	4798      	blx	r3
     330:	e7fe      	b.n	330 <Reset_Handler+0x5c>
     332:	bf00      	nop
     334:	20000000 	.word	0x20000000
     338:	000142d4 	.word	0x000142d4
     33c:	20000a34 	.word	0x20000a34
     340:	20001dc8 	.word	0x20001dc8
     344:	20000a34 	.word	0x20000a34
     348:	e000ed00 	.word	0xe000ed00
     34c:	00000000 	.word	0x00000000
     350:	00012ecd 	.word	0x00012ecd
     354:	00000359 	.word	0x00000359

00000358 <main>:
#include "CANOpen_Class.h"

static CANOpen_Class cano(&CAN_CCU);

int main(void)
{
     358:	b508      	push	{r3, lr}
	atmel_start_init();
     35a:	4b0e      	ldr	r3, [pc, #56]	; (394 <main+0x3c>)
     35c:	4798      	blx	r3
	delay_ms(100);
     35e:	2064      	movs	r0, #100	; 0x64
     360:	4c0d      	ldr	r4, [pc, #52]	; (398 <main+0x40>)
     362:	47a0      	blx	r4
	cano.Init();
     364:	2102      	movs	r1, #2
     366:	480d      	ldr	r0, [pc, #52]	; (39c <main+0x44>)
     368:	4b0d      	ldr	r3, [pc, #52]	; (3a0 <main+0x48>)
     36a:	4798      	blx	r3
	delay_ms(100);
     36c:	2064      	movs	r0, #100	; 0x64
     36e:	47a0      	blx	r4
	//	cano.Process();
	/* Replace with your application code */
	while (1)
	{
		cano.Process(1);
     370:	4c0a      	ldr	r4, [pc, #40]	; (39c <main+0x44>)
     372:	4e0c      	ldr	r6, [pc, #48]	; (3a4 <main+0x4c>)
		//delay_ms(10);
		
		cano.Periodic_Process(1000);
		//delay_ms(10);
		
		cano.Pass_Temperature_To_voltage();
     374:	f504 759a 	add.w	r5, r4, #308	; 0x134
		cano.Process(1);
     378:	2200      	movs	r2, #0
     37a:	2101      	movs	r1, #1
     37c:	4620      	mov	r0, r4
     37e:	47b0      	blx	r6
		cano.Periodic_Process(1000);
     380:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
     384:	4620      	mov	r0, r4
     386:	4b08      	ldr	r3, [pc, #32]	; (3a8 <main+0x50>)
     388:	4798      	blx	r3
		cano.Pass_Temperature_To_voltage();
     38a:	4628      	mov	r0, r5
     38c:	4b07      	ldr	r3, [pc, #28]	; (3ac <main+0x54>)
     38e:	4798      	blx	r3
     390:	e7f2      	b.n	378 <main+0x20>
     392:	bf00      	nop
     394:	000003e1 	.word	0x000003e1
     398:	00001d49 	.word	0x00001d49
     39c:	20000a50 	.word	0x20000a50
     3a0:	0000ca19 	.word	0x0000ca19
     3a4:	0000d479 	.word	0x0000d479
     3a8:	0000cadd 	.word	0x0000cadd
     3ac:	0000f465 	.word	0x0000f465

000003b0 <_GLOBAL__sub_I_main>:
	}
}
     3b0:	b510      	push	{r4, lr}
static CANOpen_Class cano(&CAN_CCU);
     3b2:	4c05      	ldr	r4, [pc, #20]	; (3c8 <_GLOBAL__sub_I_main+0x18>)
     3b4:	4905      	ldr	r1, [pc, #20]	; (3cc <_GLOBAL__sub_I_main+0x1c>)
     3b6:	4620      	mov	r0, r4
     3b8:	4b05      	ldr	r3, [pc, #20]	; (3d0 <_GLOBAL__sub_I_main+0x20>)
     3ba:	4798      	blx	r3
     3bc:	4a05      	ldr	r2, [pc, #20]	; (3d4 <_GLOBAL__sub_I_main+0x24>)
     3be:	4906      	ldr	r1, [pc, #24]	; (3d8 <_GLOBAL__sub_I_main+0x28>)
     3c0:	4620      	mov	r0, r4
     3c2:	4b06      	ldr	r3, [pc, #24]	; (3dc <_GLOBAL__sub_I_main+0x2c>)
     3c4:	4798      	blx	r3
     3c6:	bd10      	pop	{r4, pc}
     3c8:	20000a50 	.word	0x20000a50
     3cc:	20001c60 	.word	0x20001c60
     3d0:	0000c9b5 	.word	0x0000c9b5
     3d4:	20000000 	.word	0x20000000
     3d8:	0000c9f1 	.word	0x0000c9f1
     3dc:	00012e99 	.word	0x00012e99

000003e0 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
     3e0:	b580      	push	{r7, lr}
     3e2:	af00      	add	r7, sp, #0
	system_init();
     3e4:	4b03      	ldr	r3, [pc, #12]	; (3f4 <atmel_start_init+0x14>)
     3e6:	4798      	blx	r3
	usb_init();
     3e8:	4b03      	ldr	r3, [pc, #12]	; (3f8 <atmel_start_init+0x18>)
     3ea:	4798      	blx	r3
	spi_nor_flash_init();
     3ec:	4b03      	ldr	r3, [pc, #12]	; (3fc <atmel_start_init+0x1c>)
     3ee:	4798      	blx	r3
}
     3f0:	bf00      	nop
     3f2:	bd80      	pop	{r7, pc}
     3f4:	000017e1 	.word	0x000017e1
     3f8:	0000ac1d 	.word	0x0000ac1d
     3fc:	0000abb1 	.word	0x0000abb1

00000400 <hri_gclk_write_PCHCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_gclk_write_PCHCTRL_reg(const void *const hw, uint8_t index, hri_gclk_pchctrl_reg_t data)
{
     400:	b480      	push	{r7}
     402:	b085      	sub	sp, #20
     404:	af00      	add	r7, sp, #0
     406:	60f8      	str	r0, [r7, #12]
     408:	460b      	mov	r3, r1
     40a:	607a      	str	r2, [r7, #4]
     40c:	72fb      	strb	r3, [r7, #11]
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->PCHCTRL[index].reg = data;
     40e:	7afa      	ldrb	r2, [r7, #11]
     410:	68fb      	ldr	r3, [r7, #12]
     412:	3220      	adds	r2, #32
     414:	6879      	ldr	r1, [r7, #4]
     416:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	GCLK_CRITICAL_SECTION_LEAVE();
}
     41a:	bf00      	nop
     41c:	3714      	adds	r7, #20
     41e:	46bd      	mov	sp, r7
     420:	f85d 7b04 	ldr.w	r7, [sp], #4
     424:	4770      	bx	lr

00000426 <hri_mclk_set_AHBMASK_USB_bit>:
	((Mclk *)hw)->AHBMASK.reg ^= MCLK_AHBMASK_DMAC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_AHBMASK_USB_bit(const void *const hw)
{
     426:	b480      	push	{r7}
     428:	b083      	sub	sp, #12
     42a:	af00      	add	r7, sp, #0
     42c:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_USB;
     42e:	687b      	ldr	r3, [r7, #4]
     430:	691b      	ldr	r3, [r3, #16]
     432:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
     436:	687b      	ldr	r3, [r7, #4]
     438:	611a      	str	r2, [r3, #16]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     43a:	bf00      	nop
     43c:	370c      	adds	r7, #12
     43e:	46bd      	mov	sp, r7
     440:	f85d 7b04 	ldr.w	r7, [sp], #4
     444:	4770      	bx	lr

00000446 <hri_mclk_set_AHBMASK_QSPI_bit>:
	((Mclk *)hw)->AHBMASK.reg ^= MCLK_AHBMASK_PAC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_AHBMASK_QSPI_bit(const void *const hw)
{
     446:	b480      	push	{r7}
     448:	b083      	sub	sp, #12
     44a:	af00      	add	r7, sp, #0
     44c:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_QSPI;
     44e:	687b      	ldr	r3, [r7, #4]
     450:	691b      	ldr	r3, [r3, #16]
     452:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
     456:	687b      	ldr	r3, [r7, #4]
     458:	611a      	str	r2, [r3, #16]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     45a:	bf00      	nop
     45c:	370c      	adds	r7, #12
     45e:	46bd      	mov	sp, r7
     460:	f85d 7b04 	ldr.w	r7, [sp], #4
     464:	4770      	bx	lr

00000466 <hri_mclk_set_AHBMASK_CAN1_bit>:
	((Mclk *)hw)->AHBMASK.reg ^= MCLK_AHBMASK_CAN0;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_AHBMASK_CAN1_bit(const void *const hw)
{
     466:	b480      	push	{r7}
     468:	b083      	sub	sp, #12
     46a:	af00      	add	r7, sp, #0
     46c:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_CAN1;
     46e:	687b      	ldr	r3, [r7, #4]
     470:	691b      	ldr	r3, [r3, #16]
     472:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
     476:	687b      	ldr	r3, [r7, #4]
     478:	611a      	str	r2, [r3, #16]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     47a:	bf00      	nop
     47c:	370c      	adds	r7, #12
     47e:	46bd      	mov	sp, r7
     480:	f85d 7b04 	ldr.w	r7, [sp], #4
     484:	4770      	bx	lr

00000486 <hri_mclk_set_AHBMASK_QSPI_2X_bit>:
	((Mclk *)hw)->AHBMASK.reg ^= MCLK_AHBMASK_PUKCC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_AHBMASK_QSPI_2X_bit(const void *const hw)
{
     486:	b480      	push	{r7}
     488:	b083      	sub	sp, #12
     48a:	af00      	add	r7, sp, #0
     48c:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_QSPI_2X;
     48e:	687b      	ldr	r3, [r7, #4]
     490:	691b      	ldr	r3, [r3, #16]
     492:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
     496:	687b      	ldr	r3, [r7, #4]
     498:	611a      	str	r2, [r3, #16]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     49a:	bf00      	nop
     49c:	370c      	adds	r7, #12
     49e:	46bd      	mov	sp, r7
     4a0:	f85d 7b04 	ldr.w	r7, [sp], #4
     4a4:	4770      	bx	lr

000004a6 <hri_mclk_set_APBAMASK_WDT_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_GCLK;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_WDT_bit(const void *const hw)
{
     4a6:	b480      	push	{r7}
     4a8:	b083      	sub	sp, #12
     4aa:	af00      	add	r7, sp, #0
     4ac:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_WDT;
     4ae:	687b      	ldr	r3, [r7, #4]
     4b0:	695b      	ldr	r3, [r3, #20]
     4b2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
     4b6:	687b      	ldr	r3, [r7, #4]
     4b8:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     4ba:	bf00      	nop
     4bc:	370c      	adds	r7, #12
     4be:	46bd      	mov	sp, r7
     4c0:	f85d 7b04 	ldr.w	r7, [sp], #4
     4c4:	4770      	bx	lr

000004c6 <hri_mclk_set_APBAMASK_RTC_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_WDT;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_RTC_bit(const void *const hw)
{
     4c6:	b480      	push	{r7}
     4c8:	b083      	sub	sp, #12
     4ca:	af00      	add	r7, sp, #0
     4cc:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_RTC;
     4ce:	687b      	ldr	r3, [r7, #4]
     4d0:	695b      	ldr	r3, [r3, #20]
     4d2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
     4d6:	687b      	ldr	r3, [r7, #4]
     4d8:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     4da:	bf00      	nop
     4dc:	370c      	adds	r7, #12
     4de:	46bd      	mov	sp, r7
     4e0:	f85d 7b04 	ldr.w	r7, [sp], #4
     4e4:	4770      	bx	lr

000004e6 <hri_mclk_set_APBAMASK_EIC_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_RTC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_EIC_bit(const void *const hw)
{
     4e6:	b480      	push	{r7}
     4e8:	b083      	sub	sp, #12
     4ea:	af00      	add	r7, sp, #0
     4ec:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_EIC;
     4ee:	687b      	ldr	r3, [r7, #4]
     4f0:	695b      	ldr	r3, [r3, #20]
     4f2:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
     4f6:	687b      	ldr	r3, [r7, #4]
     4f8:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     4fa:	bf00      	nop
     4fc:	370c      	adds	r7, #12
     4fe:	46bd      	mov	sp, r7
     500:	f85d 7b04 	ldr.w	r7, [sp], #4
     504:	4770      	bx	lr

00000506 <hri_mclk_set_APBAMASK_SERCOM1_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_SERCOM0;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_SERCOM1_bit(const void *const hw)
{
     506:	b480      	push	{r7}
     508:	b083      	sub	sp, #12
     50a:	af00      	add	r7, sp, #0
     50c:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_SERCOM1;
     50e:	687b      	ldr	r3, [r7, #4]
     510:	695b      	ldr	r3, [r3, #20]
     512:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
     516:	687b      	ldr	r3, [r7, #4]
     518:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     51a:	bf00      	nop
     51c:	370c      	adds	r7, #12
     51e:	46bd      	mov	sp, r7
     520:	f85d 7b04 	ldr.w	r7, [sp], #4
     524:	4770      	bx	lr

00000526 <hri_mclk_set_APBAMASK_TC0_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_SERCOM1;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_TC0_bit(const void *const hw)
{
     526:	b480      	push	{r7}
     528:	b083      	sub	sp, #12
     52a:	af00      	add	r7, sp, #0
     52c:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_TC0;
     52e:	687b      	ldr	r3, [r7, #4]
     530:	695b      	ldr	r3, [r3, #20]
     532:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
     536:	687b      	ldr	r3, [r7, #4]
     538:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     53a:	bf00      	nop
     53c:	370c      	adds	r7, #12
     53e:	46bd      	mov	sp, r7
     540:	f85d 7b04 	ldr.w	r7, [sp], #4
     544:	4770      	bx	lr

00000546 <hri_mclk_set_APBBMASK_USB_bit>:
{
	return ((Mclk *)hw)->APBAMASK.reg;
}

static inline void hri_mclk_set_APBBMASK_USB_bit(const void *const hw)
{
     546:	b480      	push	{r7}
     548:	b083      	sub	sp, #12
     54a:	af00      	add	r7, sp, #0
     54c:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_USB;
     54e:	687b      	ldr	r3, [r7, #4]
     550:	699b      	ldr	r3, [r3, #24]
     552:	f043 0201 	orr.w	r2, r3, #1
     556:	687b      	ldr	r3, [r7, #4]
     558:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     55a:	bf00      	nop
     55c:	370c      	adds	r7, #12
     55e:	46bd      	mov	sp, r7
     560:	f85d 7b04 	ldr.w	r7, [sp], #4
     564:	4770      	bx	lr

00000566 <hri_mclk_set_APBBMASK_DSU_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_USB;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_DSU_bit(const void *const hw)
{
     566:	b480      	push	{r7}
     568:	b083      	sub	sp, #12
     56a:	af00      	add	r7, sp, #0
     56c:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_DSU;
     56e:	687b      	ldr	r3, [r7, #4]
     570:	699b      	ldr	r3, [r3, #24]
     572:	f043 0202 	orr.w	r2, r3, #2
     576:	687b      	ldr	r3, [r7, #4]
     578:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     57a:	bf00      	nop
     57c:	370c      	adds	r7, #12
     57e:	46bd      	mov	sp, r7
     580:	f85d 7b04 	ldr.w	r7, [sp], #4
     584:	4770      	bx	lr

00000586 <hri_mclk_set_APBBMASK_EVSYS_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_HMATRIX;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_EVSYS_bit(const void *const hw)
{
     586:	b480      	push	{r7}
     588:	b083      	sub	sp, #12
     58a:	af00      	add	r7, sp, #0
     58c:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_EVSYS;
     58e:	687b      	ldr	r3, [r7, #4]
     590:	699b      	ldr	r3, [r3, #24]
     592:	f043 0280 	orr.w	r2, r3, #128	; 0x80
     596:	687b      	ldr	r3, [r7, #4]
     598:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     59a:	bf00      	nop
     59c:	370c      	adds	r7, #12
     59e:	46bd      	mov	sp, r7
     5a0:	f85d 7b04 	ldr.w	r7, [sp], #4
     5a4:	4770      	bx	lr

000005a6 <hri_mclk_set_APBBMASK_TCC0_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_SERCOM3;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_TCC0_bit(const void *const hw)
{
     5a6:	b480      	push	{r7}
     5a8:	b083      	sub	sp, #12
     5aa:	af00      	add	r7, sp, #0
     5ac:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TCC0;
     5ae:	687b      	ldr	r3, [r7, #4]
     5b0:	699b      	ldr	r3, [r3, #24]
     5b2:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
     5b6:	687b      	ldr	r3, [r7, #4]
     5b8:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     5ba:	bf00      	nop
     5bc:	370c      	adds	r7, #12
     5be:	46bd      	mov	sp, r7
     5c0:	f85d 7b04 	ldr.w	r7, [sp], #4
     5c4:	4770      	bx	lr

000005c6 <hri_mclk_set_APBBMASK_TCC1_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_TCC0;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_TCC1_bit(const void *const hw)
{
     5c6:	b480      	push	{r7}
     5c8:	b083      	sub	sp, #12
     5ca:	af00      	add	r7, sp, #0
     5cc:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TCC1;
     5ce:	687b      	ldr	r3, [r7, #4]
     5d0:	699b      	ldr	r3, [r3, #24]
     5d2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
     5d6:	687b      	ldr	r3, [r7, #4]
     5d8:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     5da:	bf00      	nop
     5dc:	370c      	adds	r7, #12
     5de:	46bd      	mov	sp, r7
     5e0:	f85d 7b04 	ldr.w	r7, [sp], #4
     5e4:	4770      	bx	lr

000005e6 <hri_mclk_set_APBBMASK_TC2_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_TCC1;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_TC2_bit(const void *const hw)
{
     5e6:	b480      	push	{r7}
     5e8:	b083      	sub	sp, #12
     5ea:	af00      	add	r7, sp, #0
     5ec:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TC2;
     5ee:	687b      	ldr	r3, [r7, #4]
     5f0:	699b      	ldr	r3, [r3, #24]
     5f2:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
     5f6:	687b      	ldr	r3, [r7, #4]
     5f8:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     5fa:	bf00      	nop
     5fc:	370c      	adds	r7, #12
     5fe:	46bd      	mov	sp, r7
     600:	f85d 7b04 	ldr.w	r7, [sp], #4
     604:	4770      	bx	lr

00000606 <hri_mclk_set_APBCMASK_TCC2_bit>:
	((Mclk *)hw)->APBCMASK.reg ^= MCLK_APBCMASK_GMAC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBCMASK_TCC2_bit(const void *const hw)
{
     606:	b480      	push	{r7}
     608:	b083      	sub	sp, #12
     60a:	af00      	add	r7, sp, #0
     60c:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_TCC2;
     60e:	687b      	ldr	r3, [r7, #4]
     610:	69db      	ldr	r3, [r3, #28]
     612:	f043 0208 	orr.w	r2, r3, #8
     616:	687b      	ldr	r3, [r7, #4]
     618:	61da      	str	r2, [r3, #28]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     61a:	bf00      	nop
     61c:	370c      	adds	r7, #12
     61e:	46bd      	mov	sp, r7
     620:	f85d 7b04 	ldr.w	r7, [sp], #4
     624:	4770      	bx	lr

00000626 <hri_mclk_set_APBCMASK_TC4_bit>:
	((Mclk *)hw)->APBCMASK.reg ^= MCLK_APBCMASK_TCC3;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBCMASK_TC4_bit(const void *const hw)
{
     626:	b480      	push	{r7}
     628:	b083      	sub	sp, #12
     62a:	af00      	add	r7, sp, #0
     62c:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_TC4;
     62e:	687b      	ldr	r3, [r7, #4]
     630:	69db      	ldr	r3, [r3, #28]
     632:	f043 0220 	orr.w	r2, r3, #32
     636:	687b      	ldr	r3, [r7, #4]
     638:	61da      	str	r2, [r3, #28]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     63a:	bf00      	nop
     63c:	370c      	adds	r7, #12
     63e:	46bd      	mov	sp, r7
     640:	f85d 7b04 	ldr.w	r7, [sp], #4
     644:	4770      	bx	lr

00000646 <hri_mclk_set_APBCMASK_TC5_bit>:
	((Mclk *)hw)->APBCMASK.reg ^= MCLK_APBCMASK_TC4;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBCMASK_TC5_bit(const void *const hw)
{
     646:	b480      	push	{r7}
     648:	b083      	sub	sp, #12
     64a:	af00      	add	r7, sp, #0
     64c:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_TC5;
     64e:	687b      	ldr	r3, [r7, #4]
     650:	69db      	ldr	r3, [r3, #28]
     652:	f043 0240 	orr.w	r2, r3, #64	; 0x40
     656:	687b      	ldr	r3, [r7, #4]
     658:	61da      	str	r2, [r3, #28]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     65a:	bf00      	nop
     65c:	370c      	adds	r7, #12
     65e:	46bd      	mov	sp, r7
     660:	f85d 7b04 	ldr.w	r7, [sp], #4
     664:	4770      	bx	lr

00000666 <hri_mclk_set_APBCMASK_QSPI_bit>:
	((Mclk *)hw)->APBCMASK.reg ^= MCLK_APBCMASK_ICM;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBCMASK_QSPI_bit(const void *const hw)
{
     666:	b480      	push	{r7}
     668:	b083      	sub	sp, #12
     66a:	af00      	add	r7, sp, #0
     66c:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_QSPI;
     66e:	687b      	ldr	r3, [r7, #4]
     670:	69db      	ldr	r3, [r3, #28]
     672:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
     676:	687b      	ldr	r3, [r7, #4]
     678:	61da      	str	r2, [r3, #28]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     67a:	bf00      	nop
     67c:	370c      	adds	r7, #12
     67e:	46bd      	mov	sp, r7
     680:	f85d 7b04 	ldr.w	r7, [sp], #4
     684:	4770      	bx	lr

00000686 <hri_mclk_set_APBDMASK_SERCOM4_bit>:
{
	return ((Mclk *)hw)->APBCMASK.reg;
}

static inline void hri_mclk_set_APBDMASK_SERCOM4_bit(const void *const hw)
{
     686:	b480      	push	{r7}
     688:	b083      	sub	sp, #12
     68a:	af00      	add	r7, sp, #0
     68c:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM4;
     68e:	687b      	ldr	r3, [r7, #4]
     690:	6a1b      	ldr	r3, [r3, #32]
     692:	f043 0201 	orr.w	r2, r3, #1
     696:	687b      	ldr	r3, [r7, #4]
     698:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     69a:	bf00      	nop
     69c:	370c      	adds	r7, #12
     69e:	46bd      	mov	sp, r7
     6a0:	f85d 7b04 	ldr.w	r7, [sp], #4
     6a4:	4770      	bx	lr

000006a6 <hri_mclk_set_APBDMASK_SERCOM5_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_SERCOM4;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_SERCOM5_bit(const void *const hw)
{
     6a6:	b480      	push	{r7}
     6a8:	b083      	sub	sp, #12
     6aa:	af00      	add	r7, sp, #0
     6ac:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM5;
     6ae:	687b      	ldr	r3, [r7, #4]
     6b0:	6a1b      	ldr	r3, [r3, #32]
     6b2:	f043 0202 	orr.w	r2, r3, #2
     6b6:	687b      	ldr	r3, [r7, #4]
     6b8:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     6ba:	bf00      	nop
     6bc:	370c      	adds	r7, #12
     6be:	46bd      	mov	sp, r7
     6c0:	f85d 7b04 	ldr.w	r7, [sp], #4
     6c4:	4770      	bx	lr

000006c6 <hri_mclk_set_APBDMASK_SERCOM6_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_SERCOM5;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_SERCOM6_bit(const void *const hw)
{
     6c6:	b480      	push	{r7}
     6c8:	b083      	sub	sp, #12
     6ca:	af00      	add	r7, sp, #0
     6cc:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM6;
     6ce:	687b      	ldr	r3, [r7, #4]
     6d0:	6a1b      	ldr	r3, [r3, #32]
     6d2:	f043 0204 	orr.w	r2, r3, #4
     6d6:	687b      	ldr	r3, [r7, #4]
     6d8:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     6da:	bf00      	nop
     6dc:	370c      	adds	r7, #12
     6de:	46bd      	mov	sp, r7
     6e0:	f85d 7b04 	ldr.w	r7, [sp], #4
     6e4:	4770      	bx	lr

000006e6 <hri_mclk_set_APBDMASK_SERCOM7_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_SERCOM6;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_SERCOM7_bit(const void *const hw)
{
     6e6:	b480      	push	{r7}
     6e8:	b083      	sub	sp, #12
     6ea:	af00      	add	r7, sp, #0
     6ec:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM7;
     6ee:	687b      	ldr	r3, [r7, #4]
     6f0:	6a1b      	ldr	r3, [r3, #32]
     6f2:	f043 0208 	orr.w	r2, r3, #8
     6f6:	687b      	ldr	r3, [r7, #4]
     6f8:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     6fa:	bf00      	nop
     6fc:	370c      	adds	r7, #12
     6fe:	46bd      	mov	sp, r7
     700:	f85d 7b04 	ldr.w	r7, [sp], #4
     704:	4770      	bx	lr

00000706 <hri_mclk_set_APBDMASK_TC6_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_TCC4;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_TC6_bit(const void *const hw)
{
     706:	b480      	push	{r7}
     708:	b083      	sub	sp, #12
     70a:	af00      	add	r7, sp, #0
     70c:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_TC6;
     70e:	687b      	ldr	r3, [r7, #4]
     710:	6a1b      	ldr	r3, [r3, #32]
     712:	f043 0220 	orr.w	r2, r3, #32
     716:	687b      	ldr	r3, [r7, #4]
     718:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     71a:	bf00      	nop
     71c:	370c      	adds	r7, #12
     71e:	46bd      	mov	sp, r7
     720:	f85d 7b04 	ldr.w	r7, [sp], #4
     724:	4770      	bx	lr

00000726 <hri_mclk_set_APBDMASK_TC7_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_TC6;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_TC7_bit(const void *const hw)
{
     726:	b480      	push	{r7}
     728:	b083      	sub	sp, #12
     72a:	af00      	add	r7, sp, #0
     72c:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_TC7;
     72e:	687b      	ldr	r3, [r7, #4]
     730:	6a1b      	ldr	r3, [r3, #32]
     732:	f043 0240 	orr.w	r2, r3, #64	; 0x40
     736:	687b      	ldr	r3, [r7, #4]
     738:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     73a:	bf00      	nop
     73c:	370c      	adds	r7, #12
     73e:	46bd      	mov	sp, r7
     740:	f85d 7b04 	ldr.w	r7, [sp], #4
     744:	4770      	bx	lr

00000746 <hri_port_set_DIR_reg>:
{
	((Port *)hw)->Group[submodule_index].DIRTGL.reg = PORT_DIR_DIR(mask);
}

static inline void hri_port_set_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
     746:	b480      	push	{r7}
     748:	b085      	sub	sp, #20
     74a:	af00      	add	r7, sp, #0
     74c:	60f8      	str	r0, [r7, #12]
     74e:	460b      	mov	r3, r1
     750:	607a      	str	r2, [r7, #4]
     752:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     754:	7afb      	ldrb	r3, [r7, #11]
     756:	68fa      	ldr	r2, [r7, #12]
     758:	01db      	lsls	r3, r3, #7
     75a:	4413      	add	r3, r2
     75c:	3308      	adds	r3, #8
     75e:	687a      	ldr	r2, [r7, #4]
     760:	601a      	str	r2, [r3, #0]
}
     762:	bf00      	nop
     764:	3714      	adds	r7, #20
     766:	46bd      	mov	sp, r7
     768:	f85d 7b04 	ldr.w	r7, [sp], #4
     76c:	4770      	bx	lr

0000076e <hri_port_clear_DIR_reg>:
	((Port *)hw)->Group[submodule_index].DIRSET.reg = data;
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = ~data;
}

static inline void hri_port_clear_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
     76e:	b480      	push	{r7}
     770:	b085      	sub	sp, #20
     772:	af00      	add	r7, sp, #0
     774:	60f8      	str	r0, [r7, #12]
     776:	460b      	mov	r3, r1
     778:	607a      	str	r2, [r7, #4]
     77a:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     77c:	7afb      	ldrb	r3, [r7, #11]
     77e:	68fa      	ldr	r2, [r7, #12]
     780:	01db      	lsls	r3, r3, #7
     782:	4413      	add	r3, r2
     784:	3304      	adds	r3, #4
     786:	687a      	ldr	r2, [r7, #4]
     788:	601a      	str	r2, [r3, #0]
}
     78a:	bf00      	nop
     78c:	3714      	adds	r7, #20
     78e:	46bd      	mov	sp, r7
     790:	f85d 7b04 	ldr.w	r7, [sp], #4
     794:	4770      	bx	lr

00000796 <hri_port_set_OUT_reg>:
{
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = PORT_OUT_OUT(mask);
}

static inline void hri_port_set_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
     796:	b480      	push	{r7}
     798:	b085      	sub	sp, #20
     79a:	af00      	add	r7, sp, #0
     79c:	60f8      	str	r0, [r7, #12]
     79e:	460b      	mov	r3, r1
     7a0:	607a      	str	r2, [r7, #4]
     7a2:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     7a4:	7afb      	ldrb	r3, [r7, #11]
     7a6:	68fa      	ldr	r2, [r7, #12]
     7a8:	01db      	lsls	r3, r3, #7
     7aa:	4413      	add	r3, r2
     7ac:	3318      	adds	r3, #24
     7ae:	687a      	ldr	r2, [r7, #4]
     7b0:	601a      	str	r2, [r3, #0]
}
     7b2:	bf00      	nop
     7b4:	3714      	adds	r7, #20
     7b6:	46bd      	mov	sp, r7
     7b8:	f85d 7b04 	ldr.w	r7, [sp], #4
     7bc:	4770      	bx	lr

000007be <hri_port_clear_OUT_reg>:
	((Port *)hw)->Group[submodule_index].OUTSET.reg = data;
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = ~data;
}

static inline void hri_port_clear_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
     7be:	b480      	push	{r7}
     7c0:	b085      	sub	sp, #20
     7c2:	af00      	add	r7, sp, #0
     7c4:	60f8      	str	r0, [r7, #12]
     7c6:	460b      	mov	r3, r1
     7c8:	607a      	str	r2, [r7, #4]
     7ca:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     7cc:	7afb      	ldrb	r3, [r7, #11]
     7ce:	68fa      	ldr	r2, [r7, #12]
     7d0:	01db      	lsls	r3, r3, #7
     7d2:	4413      	add	r3, r2
     7d4:	3314      	adds	r3, #20
     7d6:	687a      	ldr	r2, [r7, #4]
     7d8:	601a      	str	r2, [r3, #0]
}
     7da:	bf00      	nop
     7dc:	3714      	adds	r7, #20
     7de:	46bd      	mov	sp, r7
     7e0:	f85d 7b04 	ldr.w	r7, [sp], #4
     7e4:	4770      	bx	lr

000007e6 <hri_port_write_PMUX_PMUXE_bf>:
	return tmp;
}

static inline void hri_port_write_PMUX_PMUXE_bf(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                hri_port_pmux_reg_t data)
{
     7e6:	b480      	push	{r7}
     7e8:	b085      	sub	sp, #20
     7ea:	af00      	add	r7, sp, #0
     7ec:	6078      	str	r0, [r7, #4]
     7ee:	4608      	mov	r0, r1
     7f0:	4611      	mov	r1, r2
     7f2:	461a      	mov	r2, r3
     7f4:	4603      	mov	r3, r0
     7f6:	70fb      	strb	r3, [r7, #3]
     7f8:	460b      	mov	r3, r1
     7fa:	70bb      	strb	r3, [r7, #2]
     7fc:	4613      	mov	r3, r2
     7fe:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     800:	78fa      	ldrb	r2, [r7, #3]
     802:	78bb      	ldrb	r3, [r7, #2]
     804:	6879      	ldr	r1, [r7, #4]
     806:	01d2      	lsls	r2, r2, #7
     808:	440a      	add	r2, r1
     80a:	4413      	add	r3, r2
     80c:	3330      	adds	r3, #48	; 0x30
     80e:	781b      	ldrb	r3, [r3, #0]
     810:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     812:	7bfb      	ldrb	r3, [r7, #15]
     814:	f023 030f 	bic.w	r3, r3, #15
     818:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXE(data);
     81a:	787b      	ldrb	r3, [r7, #1]
     81c:	f003 030f 	and.w	r3, r3, #15
     820:	b2da      	uxtb	r2, r3
     822:	7bfb      	ldrb	r3, [r7, #15]
     824:	4313      	orrs	r3, r2
     826:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     828:	78fa      	ldrb	r2, [r7, #3]
     82a:	78bb      	ldrb	r3, [r7, #2]
     82c:	6879      	ldr	r1, [r7, #4]
     82e:	01d2      	lsls	r2, r2, #7
     830:	440a      	add	r2, r1
     832:	4413      	add	r3, r2
     834:	3330      	adds	r3, #48	; 0x30
     836:	7bfa      	ldrb	r2, [r7, #15]
     838:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     83a:	bf00      	nop
     83c:	3714      	adds	r7, #20
     83e:	46bd      	mov	sp, r7
     840:	f85d 7b04 	ldr.w	r7, [sp], #4
     844:	4770      	bx	lr

00000846 <hri_port_write_PMUX_PMUXO_bf>:
	return tmp;
}

static inline void hri_port_write_PMUX_PMUXO_bf(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                hri_port_pmux_reg_t data)
{
     846:	b480      	push	{r7}
     848:	b085      	sub	sp, #20
     84a:	af00      	add	r7, sp, #0
     84c:	6078      	str	r0, [r7, #4]
     84e:	4608      	mov	r0, r1
     850:	4611      	mov	r1, r2
     852:	461a      	mov	r2, r3
     854:	4603      	mov	r3, r0
     856:	70fb      	strb	r3, [r7, #3]
     858:	460b      	mov	r3, r1
     85a:	70bb      	strb	r3, [r7, #2]
     85c:	4613      	mov	r3, r2
     85e:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     860:	78fa      	ldrb	r2, [r7, #3]
     862:	78bb      	ldrb	r3, [r7, #2]
     864:	6879      	ldr	r1, [r7, #4]
     866:	01d2      	lsls	r2, r2, #7
     868:	440a      	add	r2, r1
     86a:	4413      	add	r3, r2
     86c:	3330      	adds	r3, #48	; 0x30
     86e:	781b      	ldrb	r3, [r3, #0]
     870:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     872:	7bfb      	ldrb	r3, [r7, #15]
     874:	f003 030f 	and.w	r3, r3, #15
     878:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXO(data);
     87a:	787b      	ldrb	r3, [r7, #1]
     87c:	011b      	lsls	r3, r3, #4
     87e:	b2da      	uxtb	r2, r3
     880:	7bfb      	ldrb	r3, [r7, #15]
     882:	4313      	orrs	r3, r2
     884:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     886:	78fa      	ldrb	r2, [r7, #3]
     888:	78bb      	ldrb	r3, [r7, #2]
     88a:	6879      	ldr	r1, [r7, #4]
     88c:	01d2      	lsls	r2, r2, #7
     88e:	440a      	add	r2, r1
     890:	4413      	add	r3, r2
     892:	3330      	adds	r3, #48	; 0x30
     894:	7bfa      	ldrb	r2, [r7, #15]
     896:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     898:	bf00      	nop
     89a:	3714      	adds	r7, #20
     89c:	46bd      	mov	sp, r7
     89e:	f85d 7b04 	ldr.w	r7, [sp], #4
     8a2:	4770      	bx	lr

000008a4 <hri_port_write_PINCFG_PMUXEN_bit>:
	return (bool)tmp;
}

static inline void hri_port_write_PINCFG_PMUXEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                    bool value)
{
     8a4:	b480      	push	{r7}
     8a6:	b085      	sub	sp, #20
     8a8:	af00      	add	r7, sp, #0
     8aa:	6078      	str	r0, [r7, #4]
     8ac:	4608      	mov	r0, r1
     8ae:	4611      	mov	r1, r2
     8b0:	461a      	mov	r2, r3
     8b2:	4603      	mov	r3, r0
     8b4:	70fb      	strb	r3, [r7, #3]
     8b6:	460b      	mov	r3, r1
     8b8:	70bb      	strb	r3, [r7, #2]
     8ba:	4613      	mov	r3, r2
     8bc:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     8be:	78fa      	ldrb	r2, [r7, #3]
     8c0:	78bb      	ldrb	r3, [r7, #2]
     8c2:	6879      	ldr	r1, [r7, #4]
     8c4:	01d2      	lsls	r2, r2, #7
     8c6:	440a      	add	r2, r1
     8c8:	4413      	add	r3, r2
     8ca:	3340      	adds	r3, #64	; 0x40
     8cc:	781b      	ldrb	r3, [r3, #0]
     8ce:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PINCFG_PMUXEN;
     8d0:	7bfb      	ldrb	r3, [r7, #15]
     8d2:	f023 0301 	bic.w	r3, r3, #1
     8d6:	73fb      	strb	r3, [r7, #15]
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     8d8:	787a      	ldrb	r2, [r7, #1]
     8da:	7bfb      	ldrb	r3, [r7, #15]
     8dc:	4313      	orrs	r3, r2
     8de:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     8e0:	78fa      	ldrb	r2, [r7, #3]
     8e2:	78bb      	ldrb	r3, [r7, #2]
     8e4:	6879      	ldr	r1, [r7, #4]
     8e6:	01d2      	lsls	r2, r2, #7
     8e8:	440a      	add	r2, r1
     8ea:	4413      	add	r3, r2
     8ec:	3340      	adds	r3, #64	; 0x40
     8ee:	7bfa      	ldrb	r2, [r7, #15]
     8f0:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     8f2:	bf00      	nop
     8f4:	3714      	adds	r7, #20
     8f6:	46bd      	mov	sp, r7
     8f8:	f85d 7b04 	ldr.w	r7, [sp], #4
     8fc:	4770      	bx	lr

000008fe <hri_port_set_PINCFG_PULLEN_bit>:
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg ^= PORT_PINCFG_INEN;
	PORT_CRITICAL_SECTION_LEAVE();
}

static inline void hri_port_set_PINCFG_PULLEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index)
{
     8fe:	b490      	push	{r4, r7}
     900:	b082      	sub	sp, #8
     902:	af00      	add	r7, sp, #0
     904:	6078      	str	r0, [r7, #4]
     906:	460b      	mov	r3, r1
     908:	70fb      	strb	r3, [r7, #3]
     90a:	4613      	mov	r3, r2
     90c:	70bb      	strb	r3, [r7, #2]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
     90e:	78fa      	ldrb	r2, [r7, #3]
     910:	78bb      	ldrb	r3, [r7, #2]
     912:	78f8      	ldrb	r0, [r7, #3]
     914:	78b9      	ldrb	r1, [r7, #2]
     916:	687c      	ldr	r4, [r7, #4]
     918:	01c0      	lsls	r0, r0, #7
     91a:	4420      	add	r0, r4
     91c:	4401      	add	r1, r0
     91e:	3140      	adds	r1, #64	; 0x40
     920:	7809      	ldrb	r1, [r1, #0]
     922:	b2c9      	uxtb	r1, r1
     924:	f041 0104 	orr.w	r1, r1, #4
     928:	b2c8      	uxtb	r0, r1
     92a:	6879      	ldr	r1, [r7, #4]
     92c:	01d2      	lsls	r2, r2, #7
     92e:	440a      	add	r2, r1
     930:	4413      	add	r3, r2
     932:	3340      	adds	r3, #64	; 0x40
     934:	4602      	mov	r2, r0
     936:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     938:	bf00      	nop
     93a:	3708      	adds	r7, #8
     93c:	46bd      	mov	sp, r7
     93e:	bc90      	pop	{r4, r7}
     940:	4770      	bx	lr

00000942 <hri_port_clear_PINCFG_PULLEN_bit>:
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
	PORT_CRITICAL_SECTION_LEAVE();
}

static inline void hri_port_clear_PINCFG_PULLEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index)
{
     942:	b490      	push	{r4, r7}
     944:	b082      	sub	sp, #8
     946:	af00      	add	r7, sp, #0
     948:	6078      	str	r0, [r7, #4]
     94a:	460b      	mov	r3, r1
     94c:	70fb      	strb	r3, [r7, #3]
     94e:	4613      	mov	r3, r2
     950:	70bb      	strb	r3, [r7, #2]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     952:	78fa      	ldrb	r2, [r7, #3]
     954:	78bb      	ldrb	r3, [r7, #2]
     956:	78f8      	ldrb	r0, [r7, #3]
     958:	78b9      	ldrb	r1, [r7, #2]
     95a:	687c      	ldr	r4, [r7, #4]
     95c:	01c0      	lsls	r0, r0, #7
     95e:	4420      	add	r0, r4
     960:	4401      	add	r1, r0
     962:	3140      	adds	r1, #64	; 0x40
     964:	7809      	ldrb	r1, [r1, #0]
     966:	b2c9      	uxtb	r1, r1
     968:	f021 0104 	bic.w	r1, r1, #4
     96c:	b2c8      	uxtb	r0, r1
     96e:	6879      	ldr	r1, [r7, #4]
     970:	01d2      	lsls	r2, r2, #7
     972:	440a      	add	r2, r1
     974:	4413      	add	r3, r2
     976:	3340      	adds	r3, #64	; 0x40
     978:	4602      	mov	r2, r0
     97a:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     97c:	bf00      	nop
     97e:	3708      	adds	r7, #8
     980:	46bd      	mov	sp, r7
     982:	bc90      	pop	{r4, r7}
     984:	4770      	bx	lr

00000986 <hri_port_write_WRCONFIG_reg>:
	return ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
}

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
     986:	b480      	push	{r7}
     988:	b085      	sub	sp, #20
     98a:	af00      	add	r7, sp, #0
     98c:	60f8      	str	r0, [r7, #12]
     98e:	460b      	mov	r3, r1
     990:	607a      	str	r2, [r7, #4]
     992:	72fb      	strb	r3, [r7, #11]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     994:	7afb      	ldrb	r3, [r7, #11]
     996:	68fa      	ldr	r2, [r7, #12]
     998:	01db      	lsls	r3, r3, #7
     99a:	4413      	add	r3, r2
     99c:	3328      	adds	r3, #40	; 0x28
     99e:	687a      	ldr	r2, [r7, #4]
     9a0:	601a      	str	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     9a2:	bf00      	nop
     9a4:	3714      	adds	r7, #20
     9a6:	46bd      	mov	sp, r7
     9a8:	f85d 7b04 	ldr.w	r7, [sp], #4
     9ac:	4770      	bx	lr
	...

000009b0 <_gpio_set_direction>:
/**
 * \brief Set direction on port with mask
 */
static inline void _gpio_set_direction(const enum gpio_port port, const uint32_t mask,
                                       const enum gpio_direction direction)
{
     9b0:	b580      	push	{r7, lr}
     9b2:	b082      	sub	sp, #8
     9b4:	af00      	add	r7, sp, #0
     9b6:	4603      	mov	r3, r0
     9b8:	6039      	str	r1, [r7, #0]
     9ba:	71fb      	strb	r3, [r7, #7]
     9bc:	4613      	mov	r3, r2
     9be:	71bb      	strb	r3, [r7, #6]
	switch (direction) {
     9c0:	79bb      	ldrb	r3, [r7, #6]
     9c2:	2b01      	cmp	r3, #1
     9c4:	d01c      	beq.n	a00 <_gpio_set_direction+0x50>
     9c6:	2b02      	cmp	r3, #2
     9c8:	d037      	beq.n	a3a <_gpio_set_direction+0x8a>
     9ca:	2b00      	cmp	r3, #0
     9cc:	d14e      	bne.n	a6c <_gpio_set_direction+0xbc>
	case GPIO_DIRECTION_OFF:
		hri_port_clear_DIR_reg(PORT, port, mask);
     9ce:	79fb      	ldrb	r3, [r7, #7]
     9d0:	683a      	ldr	r2, [r7, #0]
     9d2:	4619      	mov	r1, r3
     9d4:	482a      	ldr	r0, [pc, #168]	; (a80 <_gpio_set_direction+0xd0>)
     9d6:	4b2b      	ldr	r3, [pc, #172]	; (a84 <_gpio_set_direction+0xd4>)
     9d8:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
     9da:	683b      	ldr	r3, [r7, #0]
     9dc:	b29b      	uxth	r3, r3
     9de:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
     9e2:	79fb      	ldrb	r3, [r7, #7]
     9e4:	4619      	mov	r1, r3
     9e6:	4826      	ldr	r0, [pc, #152]	; (a80 <_gpio_set_direction+0xd0>)
     9e8:	4b27      	ldr	r3, [pc, #156]	; (a88 <_gpio_set_direction+0xd8>)
     9ea:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
     9ec:	683b      	ldr	r3, [r7, #0]
     9ee:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
     9f0:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
     9f4:	79fb      	ldrb	r3, [r7, #7]
     9f6:	4619      	mov	r1, r3
     9f8:	4821      	ldr	r0, [pc, #132]	; (a80 <_gpio_set_direction+0xd0>)
     9fa:	4b23      	ldr	r3, [pc, #140]	; (a88 <_gpio_set_direction+0xd8>)
     9fc:	4798      	blx	r3
		break;
     9fe:	e03a      	b.n	a76 <_gpio_set_direction+0xc6>

	case GPIO_DIRECTION_IN:
		hri_port_clear_DIR_reg(PORT, port, mask);
     a00:	79fb      	ldrb	r3, [r7, #7]
     a02:	683a      	ldr	r2, [r7, #0]
     a04:	4619      	mov	r1, r3
     a06:	481e      	ldr	r0, [pc, #120]	; (a80 <_gpio_set_direction+0xd0>)
     a08:	4b1e      	ldr	r3, [pc, #120]	; (a84 <_gpio_set_direction+0xd4>)
     a0a:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN | (mask & 0xffff));
     a0c:	683b      	ldr	r3, [r7, #0]
     a0e:	b29b      	uxth	r3, r3
     a10:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
     a14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
     a18:	79f9      	ldrb	r1, [r7, #7]
     a1a:	461a      	mov	r2, r3
     a1c:	4818      	ldr	r0, [pc, #96]	; (a80 <_gpio_set_direction+0xd0>)
     a1e:	4b1a      	ldr	r3, [pc, #104]	; (a88 <_gpio_set_direction+0xd8>)
     a20:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT,
		                            port,
		                            PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN
		                                | ((mask & 0xffff0000) >> 16));
     a22:	683b      	ldr	r3, [r7, #0]
     a24:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(PORT,
     a26:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
     a2a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
     a2e:	79f9      	ldrb	r1, [r7, #7]
     a30:	461a      	mov	r2, r3
     a32:	4813      	ldr	r0, [pc, #76]	; (a80 <_gpio_set_direction+0xd0>)
     a34:	4b14      	ldr	r3, [pc, #80]	; (a88 <_gpio_set_direction+0xd8>)
     a36:	4798      	blx	r3
		break;
     a38:	e01d      	b.n	a76 <_gpio_set_direction+0xc6>

	case GPIO_DIRECTION_OUT:
		hri_port_set_DIR_reg(PORT, port, mask);
     a3a:	79fb      	ldrb	r3, [r7, #7]
     a3c:	683a      	ldr	r2, [r7, #0]
     a3e:	4619      	mov	r1, r3
     a40:	480f      	ldr	r0, [pc, #60]	; (a80 <_gpio_set_direction+0xd0>)
     a42:	4b12      	ldr	r3, [pc, #72]	; (a8c <_gpio_set_direction+0xdc>)
     a44:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
     a46:	683b      	ldr	r3, [r7, #0]
     a48:	b29b      	uxth	r3, r3
     a4a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
     a4e:	79fb      	ldrb	r3, [r7, #7]
     a50:	4619      	mov	r1, r3
     a52:	480b      	ldr	r0, [pc, #44]	; (a80 <_gpio_set_direction+0xd0>)
     a54:	4b0c      	ldr	r3, [pc, #48]	; (a88 <_gpio_set_direction+0xd8>)
     a56:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
     a58:	683b      	ldr	r3, [r7, #0]
     a5a:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
     a5c:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
     a60:	79fb      	ldrb	r3, [r7, #7]
     a62:	4619      	mov	r1, r3
     a64:	4806      	ldr	r0, [pc, #24]	; (a80 <_gpio_set_direction+0xd0>)
     a66:	4b08      	ldr	r3, [pc, #32]	; (a88 <_gpio_set_direction+0xd8>)
     a68:	4798      	blx	r3
		break;
     a6a:	e004      	b.n	a76 <_gpio_set_direction+0xc6>

	default:
		ASSERT(false);
     a6c:	2246      	movs	r2, #70	; 0x46
     a6e:	4908      	ldr	r1, [pc, #32]	; (a90 <_gpio_set_direction+0xe0>)
     a70:	2000      	movs	r0, #0
     a72:	4b08      	ldr	r3, [pc, #32]	; (a94 <_gpio_set_direction+0xe4>)
     a74:	4798      	blx	r3
	}
}
     a76:	bf00      	nop
     a78:	3708      	adds	r7, #8
     a7a:	46bd      	mov	sp, r7
     a7c:	bd80      	pop	{r7, pc}
     a7e:	bf00      	nop
     a80:	41008000 	.word	0x41008000
     a84:	0000076f 	.word	0x0000076f
     a88:	00000987 	.word	0x00000987
     a8c:	00000747 	.word	0x00000747
     a90:	0001320c 	.word	0x0001320c
     a94:	00002dc9 	.word	0x00002dc9

00000a98 <_gpio_set_level>:

/**
 * \brief Set output level on port with mask
 */
static inline void _gpio_set_level(const enum gpio_port port, const uint32_t mask, const bool level)
{
     a98:	b580      	push	{r7, lr}
     a9a:	b082      	sub	sp, #8
     a9c:	af00      	add	r7, sp, #0
     a9e:	4603      	mov	r3, r0
     aa0:	6039      	str	r1, [r7, #0]
     aa2:	71fb      	strb	r3, [r7, #7]
     aa4:	4613      	mov	r3, r2
     aa6:	71bb      	strb	r3, [r7, #6]
	if (level) {
     aa8:	79bb      	ldrb	r3, [r7, #6]
     aaa:	2b00      	cmp	r3, #0
     aac:	d006      	beq.n	abc <_gpio_set_level+0x24>
		hri_port_set_OUT_reg(PORT, port, mask);
     aae:	79fb      	ldrb	r3, [r7, #7]
     ab0:	683a      	ldr	r2, [r7, #0]
     ab2:	4619      	mov	r1, r3
     ab4:	4806      	ldr	r0, [pc, #24]	; (ad0 <_gpio_set_level+0x38>)
     ab6:	4b07      	ldr	r3, [pc, #28]	; (ad4 <_gpio_set_level+0x3c>)
     ab8:	4798      	blx	r3
	} else {
		hri_port_clear_OUT_reg(PORT, port, mask);
	}
}
     aba:	e005      	b.n	ac8 <_gpio_set_level+0x30>
		hri_port_clear_OUT_reg(PORT, port, mask);
     abc:	79fb      	ldrb	r3, [r7, #7]
     abe:	683a      	ldr	r2, [r7, #0]
     ac0:	4619      	mov	r1, r3
     ac2:	4803      	ldr	r0, [pc, #12]	; (ad0 <_gpio_set_level+0x38>)
     ac4:	4b04      	ldr	r3, [pc, #16]	; (ad8 <_gpio_set_level+0x40>)
     ac6:	4798      	blx	r3
}
     ac8:	bf00      	nop
     aca:	3708      	adds	r7, #8
     acc:	46bd      	mov	sp, r7
     ace:	bd80      	pop	{r7, pc}
     ad0:	41008000 	.word	0x41008000
     ad4:	00000797 	.word	0x00000797
     ad8:	000007bf 	.word	0x000007bf

00000adc <_gpio_set_pin_pull_mode>:
/**
 * \brief Set pin pull mode
 */
static inline void _gpio_set_pin_pull_mode(const enum gpio_port port, const uint8_t pin,
                                           const enum gpio_pull_mode pull_mode)
{
     adc:	b580      	push	{r7, lr}
     ade:	b082      	sub	sp, #8
     ae0:	af00      	add	r7, sp, #0
     ae2:	4603      	mov	r3, r0
     ae4:	71fb      	strb	r3, [r7, #7]
     ae6:	460b      	mov	r3, r1
     ae8:	71bb      	strb	r3, [r7, #6]
     aea:	4613      	mov	r3, r2
     aec:	717b      	strb	r3, [r7, #5]
	switch (pull_mode) {
     aee:	797b      	ldrb	r3, [r7, #5]
     af0:	2b01      	cmp	r3, #1
     af2:	d00a      	beq.n	b0a <_gpio_set_pin_pull_mode+0x2e>
     af4:	2b02      	cmp	r3, #2
     af6:	d01f      	beq.n	b38 <_gpio_set_pin_pull_mode+0x5c>
     af8:	2b00      	cmp	r3, #0
     afa:	d134      	bne.n	b66 <_gpio_set_pin_pull_mode+0x8a>
	case GPIO_PULL_OFF:
		hri_port_clear_PINCFG_PULLEN_bit(PORT, port, pin);
     afc:	79ba      	ldrb	r2, [r7, #6]
     afe:	79fb      	ldrb	r3, [r7, #7]
     b00:	4619      	mov	r1, r3
     b02:	481e      	ldr	r0, [pc, #120]	; (b7c <_gpio_set_pin_pull_mode+0xa0>)
     b04:	4b1e      	ldr	r3, [pc, #120]	; (b80 <_gpio_set_pin_pull_mode+0xa4>)
     b06:	4798      	blx	r3
		break;
     b08:	e033      	b.n	b72 <_gpio_set_pin_pull_mode+0x96>

	case GPIO_PULL_UP:
		hri_port_clear_DIR_reg(PORT, port, 1U << pin);
     b0a:	79bb      	ldrb	r3, [r7, #6]
     b0c:	2201      	movs	r2, #1
     b0e:	409a      	lsls	r2, r3
     b10:	79fb      	ldrb	r3, [r7, #7]
     b12:	4619      	mov	r1, r3
     b14:	4819      	ldr	r0, [pc, #100]	; (b7c <_gpio_set_pin_pull_mode+0xa0>)
     b16:	4b1b      	ldr	r3, [pc, #108]	; (b84 <_gpio_set_pin_pull_mode+0xa8>)
     b18:	4798      	blx	r3
		hri_port_set_PINCFG_PULLEN_bit(PORT, port, pin);
     b1a:	79ba      	ldrb	r2, [r7, #6]
     b1c:	79fb      	ldrb	r3, [r7, #7]
     b1e:	4619      	mov	r1, r3
     b20:	4816      	ldr	r0, [pc, #88]	; (b7c <_gpio_set_pin_pull_mode+0xa0>)
     b22:	4b19      	ldr	r3, [pc, #100]	; (b88 <_gpio_set_pin_pull_mode+0xac>)
     b24:	4798      	blx	r3
		hri_port_set_OUT_reg(PORT, port, 1U << pin);
     b26:	79bb      	ldrb	r3, [r7, #6]
     b28:	2201      	movs	r2, #1
     b2a:	409a      	lsls	r2, r3
     b2c:	79fb      	ldrb	r3, [r7, #7]
     b2e:	4619      	mov	r1, r3
     b30:	4812      	ldr	r0, [pc, #72]	; (b7c <_gpio_set_pin_pull_mode+0xa0>)
     b32:	4b16      	ldr	r3, [pc, #88]	; (b8c <_gpio_set_pin_pull_mode+0xb0>)
     b34:	4798      	blx	r3
		break;
     b36:	e01c      	b.n	b72 <_gpio_set_pin_pull_mode+0x96>

	case GPIO_PULL_DOWN:
		hri_port_clear_DIR_reg(PORT, port, 1U << pin);
     b38:	79bb      	ldrb	r3, [r7, #6]
     b3a:	2201      	movs	r2, #1
     b3c:	409a      	lsls	r2, r3
     b3e:	79fb      	ldrb	r3, [r7, #7]
     b40:	4619      	mov	r1, r3
     b42:	480e      	ldr	r0, [pc, #56]	; (b7c <_gpio_set_pin_pull_mode+0xa0>)
     b44:	4b0f      	ldr	r3, [pc, #60]	; (b84 <_gpio_set_pin_pull_mode+0xa8>)
     b46:	4798      	blx	r3
		hri_port_set_PINCFG_PULLEN_bit(PORT, port, pin);
     b48:	79ba      	ldrb	r2, [r7, #6]
     b4a:	79fb      	ldrb	r3, [r7, #7]
     b4c:	4619      	mov	r1, r3
     b4e:	480b      	ldr	r0, [pc, #44]	; (b7c <_gpio_set_pin_pull_mode+0xa0>)
     b50:	4b0d      	ldr	r3, [pc, #52]	; (b88 <_gpio_set_pin_pull_mode+0xac>)
     b52:	4798      	blx	r3
		hri_port_clear_OUT_reg(PORT, port, 1U << pin);
     b54:	79bb      	ldrb	r3, [r7, #6]
     b56:	2201      	movs	r2, #1
     b58:	409a      	lsls	r2, r3
     b5a:	79fb      	ldrb	r3, [r7, #7]
     b5c:	4619      	mov	r1, r3
     b5e:	4807      	ldr	r0, [pc, #28]	; (b7c <_gpio_set_pin_pull_mode+0xa0>)
     b60:	4b0b      	ldr	r3, [pc, #44]	; (b90 <_gpio_set_pin_pull_mode+0xb4>)
     b62:	4798      	blx	r3
		break;
     b64:	e005      	b.n	b72 <_gpio_set_pin_pull_mode+0x96>

	default:
		ASSERT(false);
     b66:	2289      	movs	r2, #137	; 0x89
     b68:	490a      	ldr	r1, [pc, #40]	; (b94 <_gpio_set_pin_pull_mode+0xb8>)
     b6a:	2000      	movs	r0, #0
     b6c:	4b0a      	ldr	r3, [pc, #40]	; (b98 <_gpio_set_pin_pull_mode+0xbc>)
     b6e:	4798      	blx	r3
		break;
     b70:	bf00      	nop
	}
}
     b72:	bf00      	nop
     b74:	3708      	adds	r7, #8
     b76:	46bd      	mov	sp, r7
     b78:	bd80      	pop	{r7, pc}
     b7a:	bf00      	nop
     b7c:	41008000 	.word	0x41008000
     b80:	00000943 	.word	0x00000943
     b84:	0000076f 	.word	0x0000076f
     b88:	000008ff 	.word	0x000008ff
     b8c:	00000797 	.word	0x00000797
     b90:	000007bf 	.word	0x000007bf
     b94:	0001320c 	.word	0x0001320c
     b98:	00002dc9 	.word	0x00002dc9

00000b9c <_gpio_set_pin_function>:

/**
 * \brief Set gpio pin function
 */
static inline void _gpio_set_pin_function(const uint32_t gpio, const uint32_t function)
{
     b9c:	b590      	push	{r4, r7, lr}
     b9e:	b085      	sub	sp, #20
     ba0:	af00      	add	r7, sp, #0
     ba2:	6078      	str	r0, [r7, #4]
     ba4:	6039      	str	r1, [r7, #0]
	uint8_t port = GPIO_PORT(gpio);
     ba6:	687b      	ldr	r3, [r7, #4]
     ba8:	095b      	lsrs	r3, r3, #5
     baa:	73fb      	strb	r3, [r7, #15]
	uint8_t pin  = GPIO_PIN(gpio);
     bac:	687b      	ldr	r3, [r7, #4]
     bae:	b2db      	uxtb	r3, r3
     bb0:	f003 031f 	and.w	r3, r3, #31
     bb4:	73bb      	strb	r3, [r7, #14]

	if (function == GPIO_PIN_FUNCTION_OFF) {
     bb6:	683b      	ldr	r3, [r7, #0]
     bb8:	f1b3 3fff 	cmp.w	r3, #4294967295
     bbc:	d106      	bne.n	bcc <_gpio_set_pin_function+0x30>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, false);
     bbe:	7bba      	ldrb	r2, [r7, #14]
     bc0:	7bf9      	ldrb	r1, [r7, #15]
     bc2:	2300      	movs	r3, #0
     bc4:	4812      	ldr	r0, [pc, #72]	; (c10 <_gpio_set_pin_function+0x74>)
     bc6:	4c13      	ldr	r4, [pc, #76]	; (c14 <_gpio_set_pin_function+0x78>)
     bc8:	47a0      	blx	r4
		} else {
			// Even numbered pin
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
		}
	}
}
     bca:	e01d      	b.n	c08 <_gpio_set_pin_function+0x6c>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, true);
     bcc:	7bba      	ldrb	r2, [r7, #14]
     bce:	7bf9      	ldrb	r1, [r7, #15]
     bd0:	2301      	movs	r3, #1
     bd2:	480f      	ldr	r0, [pc, #60]	; (c10 <_gpio_set_pin_function+0x74>)
     bd4:	4c0f      	ldr	r4, [pc, #60]	; (c14 <_gpio_set_pin_function+0x78>)
     bd6:	47a0      	blx	r4
		if (pin & 1) {
     bd8:	7bbb      	ldrb	r3, [r7, #14]
     bda:	f003 0301 	and.w	r3, r3, #1
     bde:	2b00      	cmp	r3, #0
     be0:	d009      	beq.n	bf6 <_gpio_set_pin_function+0x5a>
			hri_port_write_PMUX_PMUXO_bf(PORT, port, pin >> 1, function & 0xffff);
     be2:	7bbb      	ldrb	r3, [r7, #14]
     be4:	085b      	lsrs	r3, r3, #1
     be6:	b2da      	uxtb	r2, r3
     be8:	683b      	ldr	r3, [r7, #0]
     bea:	b2db      	uxtb	r3, r3
     bec:	7bf9      	ldrb	r1, [r7, #15]
     bee:	4808      	ldr	r0, [pc, #32]	; (c10 <_gpio_set_pin_function+0x74>)
     bf0:	4c09      	ldr	r4, [pc, #36]	; (c18 <_gpio_set_pin_function+0x7c>)
     bf2:	47a0      	blx	r4
}
     bf4:	e008      	b.n	c08 <_gpio_set_pin_function+0x6c>
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
     bf6:	7bbb      	ldrb	r3, [r7, #14]
     bf8:	085b      	lsrs	r3, r3, #1
     bfa:	b2da      	uxtb	r2, r3
     bfc:	683b      	ldr	r3, [r7, #0]
     bfe:	b2db      	uxtb	r3, r3
     c00:	7bf9      	ldrb	r1, [r7, #15]
     c02:	4803      	ldr	r0, [pc, #12]	; (c10 <_gpio_set_pin_function+0x74>)
     c04:	4c05      	ldr	r4, [pc, #20]	; (c1c <_gpio_set_pin_function+0x80>)
     c06:	47a0      	blx	r4
}
     c08:	bf00      	nop
     c0a:	3714      	adds	r7, #20
     c0c:	46bd      	mov	sp, r7
     c0e:	bd90      	pop	{r4, r7, pc}
     c10:	41008000 	.word	0x41008000
     c14:	000008a5 	.word	0x000008a5
     c18:	00000847 	.word	0x00000847
     c1c:	000007e7 	.word	0x000007e7

00000c20 <gpio_set_pin_pull_mode>:
 * \param[in] pull_mode GPIO_PULL_DOWN = Pull pin low with internal resistor
 *                      GPIO_PULL_UP   = Pull pin high with internal resistor
 *                      GPIO_PULL_OFF  = Disable pin pull mode
 */
static inline void gpio_set_pin_pull_mode(const uint8_t pin, const enum gpio_pull_mode pull_mode)
{
     c20:	b580      	push	{r7, lr}
     c22:	b082      	sub	sp, #8
     c24:	af00      	add	r7, sp, #0
     c26:	4603      	mov	r3, r0
     c28:	460a      	mov	r2, r1
     c2a:	71fb      	strb	r3, [r7, #7]
     c2c:	4613      	mov	r3, r2
     c2e:	71bb      	strb	r3, [r7, #6]
	_gpio_set_pin_pull_mode((enum gpio_port)GPIO_PORT(pin), pin & 0x1F, pull_mode);
     c30:	79fb      	ldrb	r3, [r7, #7]
     c32:	095b      	lsrs	r3, r3, #5
     c34:	b2d8      	uxtb	r0, r3
     c36:	79fb      	ldrb	r3, [r7, #7]
     c38:	f003 031f 	and.w	r3, r3, #31
     c3c:	b2db      	uxtb	r3, r3
     c3e:	79ba      	ldrb	r2, [r7, #6]
     c40:	4619      	mov	r1, r3
     c42:	4b03      	ldr	r3, [pc, #12]	; (c50 <gpio_set_pin_pull_mode+0x30>)
     c44:	4798      	blx	r3
}
     c46:	bf00      	nop
     c48:	3708      	adds	r7, #8
     c4a:	46bd      	mov	sp, r7
     c4c:	bd80      	pop	{r7, pc}
     c4e:	bf00      	nop
     c50:	00000add 	.word	0x00000add

00000c54 <gpio_set_pin_function>:
 * \param[in] function  The pin function is given by a 32-bit wide bitfield
 *                      found in the header files for the device
 *
 */
static inline void gpio_set_pin_function(const uint32_t pin, uint32_t function)
{
     c54:	b580      	push	{r7, lr}
     c56:	b082      	sub	sp, #8
     c58:	af00      	add	r7, sp, #0
     c5a:	6078      	str	r0, [r7, #4]
     c5c:	6039      	str	r1, [r7, #0]
	_gpio_set_pin_function(pin, function);
     c5e:	6839      	ldr	r1, [r7, #0]
     c60:	6878      	ldr	r0, [r7, #4]
     c62:	4b03      	ldr	r3, [pc, #12]	; (c70 <gpio_set_pin_function+0x1c>)
     c64:	4798      	blx	r3
}
     c66:	bf00      	nop
     c68:	3708      	adds	r7, #8
     c6a:	46bd      	mov	sp, r7
     c6c:	bd80      	pop	{r7, pc}
     c6e:	bf00      	nop
     c70:	00000b9d 	.word	0x00000b9d

00000c74 <gpio_set_pin_direction>:
 *                      GPIO_DIRECTION_OUT = Data direction out
 *                      GPIO_DIRECTION_OFF = Disables the pin
 *                      (low power state)
 */
static inline void gpio_set_pin_direction(const uint8_t pin, const enum gpio_direction direction)
{
     c74:	b580      	push	{r7, lr}
     c76:	b082      	sub	sp, #8
     c78:	af00      	add	r7, sp, #0
     c7a:	4603      	mov	r3, r0
     c7c:	460a      	mov	r2, r1
     c7e:	71fb      	strb	r3, [r7, #7]
     c80:	4613      	mov	r3, r2
     c82:	71bb      	strb	r3, [r7, #6]
	_gpio_set_direction((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), direction);
     c84:	79fb      	ldrb	r3, [r7, #7]
     c86:	095b      	lsrs	r3, r3, #5
     c88:	b2d8      	uxtb	r0, r3
     c8a:	79fb      	ldrb	r3, [r7, #7]
     c8c:	f003 031f 	and.w	r3, r3, #31
     c90:	2201      	movs	r2, #1
     c92:	fa02 f303 	lsl.w	r3, r2, r3
     c96:	79ba      	ldrb	r2, [r7, #6]
     c98:	4619      	mov	r1, r3
     c9a:	4b03      	ldr	r3, [pc, #12]	; (ca8 <gpio_set_pin_direction+0x34>)
     c9c:	4798      	blx	r3
}
     c9e:	bf00      	nop
     ca0:	3708      	adds	r7, #8
     ca2:	46bd      	mov	sp, r7
     ca4:	bd80      	pop	{r7, pc}
     ca6:	bf00      	nop
     ca8:	000009b1 	.word	0x000009b1

00000cac <gpio_set_pin_level>:
 * \param[in] pin       The pin number for device
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void gpio_set_pin_level(const uint8_t pin, const bool level)
{
     cac:	b580      	push	{r7, lr}
     cae:	b082      	sub	sp, #8
     cb0:	af00      	add	r7, sp, #0
     cb2:	4603      	mov	r3, r0
     cb4:	460a      	mov	r2, r1
     cb6:	71fb      	strb	r3, [r7, #7]
     cb8:	4613      	mov	r3, r2
     cba:	71bb      	strb	r3, [r7, #6]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
     cbc:	79fb      	ldrb	r3, [r7, #7]
     cbe:	095b      	lsrs	r3, r3, #5
     cc0:	b2d8      	uxtb	r0, r3
     cc2:	79fb      	ldrb	r3, [r7, #7]
     cc4:	f003 031f 	and.w	r3, r3, #31
     cc8:	2201      	movs	r2, #1
     cca:	fa02 f303 	lsl.w	r3, r2, r3
     cce:	79ba      	ldrb	r2, [r7, #6]
     cd0:	4619      	mov	r1, r3
     cd2:	4b03      	ldr	r3, [pc, #12]	; (ce0 <gpio_set_pin_level+0x34>)
     cd4:	4798      	blx	r3
}
     cd6:	bf00      	nop
     cd8:	3708      	adds	r7, #8
     cda:	46bd      	mov	sp, r7
     cdc:	bd80      	pop	{r7, pc}
     cde:	bf00      	nop
     ce0:	00000a99 	.word	0x00000a99

00000ce4 <init_mcu>:
 * This function calls the various initialization functions.
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
     ce4:	b580      	push	{r7, lr}
     ce6:	af00      	add	r7, sp, #0
	_init_chip();
     ce8:	4b01      	ldr	r3, [pc, #4]	; (cf0 <init_mcu+0xc>)
     cea:	4798      	blx	r3
}
     cec:	bf00      	nop
     cee:	bd80      	pop	{r7, pc}
     cf0:	00003fbd 	.word	0x00003fbd

00000cf4 <wdt_init>:
 * \return Operation status of init
 * \retval 0 Completed sucessfully.
 * \retval -1 Always on or enabled, don't need init again.
 */
static inline int32_t wdt_init(struct wdt_descriptor *const wdt, const void *hw)
{
     cf4:	b580      	push	{r7, lr}
     cf6:	b082      	sub	sp, #8
     cf8:	af00      	add	r7, sp, #0
     cfa:	6078      	str	r0, [r7, #4]
     cfc:	6039      	str	r1, [r7, #0]
	ASSERT(wdt && hw);
     cfe:	687b      	ldr	r3, [r7, #4]
     d00:	2b00      	cmp	r3, #0
     d02:	d004      	beq.n	d0e <wdt_init+0x1a>
     d04:	683b      	ldr	r3, [r7, #0]
     d06:	2b00      	cmp	r3, #0
     d08:	d001      	beq.n	d0e <wdt_init+0x1a>
     d0a:	2301      	movs	r3, #1
     d0c:	e000      	b.n	d10 <wdt_init+0x1c>
     d0e:	2300      	movs	r3, #0
     d10:	f003 0301 	and.w	r3, r3, #1
     d14:	b2db      	uxtb	r3, r3
     d16:	2248      	movs	r2, #72	; 0x48
     d18:	4907      	ldr	r1, [pc, #28]	; (d38 <wdt_init+0x44>)
     d1a:	4618      	mov	r0, r3
     d1c:	4b07      	ldr	r3, [pc, #28]	; (d3c <wdt_init+0x48>)
     d1e:	4798      	blx	r3

	wdt->dev.hw = (void *)hw;
     d20:	687b      	ldr	r3, [r7, #4]
     d22:	683a      	ldr	r2, [r7, #0]
     d24:	601a      	str	r2, [r3, #0]

	return _wdt_init(&wdt->dev);
     d26:	687b      	ldr	r3, [r7, #4]
     d28:	4618      	mov	r0, r3
     d2a:	4b05      	ldr	r3, [pc, #20]	; (d40 <wdt_init+0x4c>)
     d2c:	4798      	blx	r3
     d2e:	4603      	mov	r3, r0
}
     d30:	4618      	mov	r0, r3
     d32:	3708      	adds	r7, #8
     d34:	46bd      	mov	sp, r7
     d36:	bd80      	pop	{r7, pc}
     d38:	00013228 	.word	0x00013228
     d3c:	00002dc9 	.word	0x00002dc9
     d40:	0000a655 	.word	0x0000a655

00000d44 <CRC_CALC_init>:
 * \brief CRC initialization function
 *
 * Enables CRC peripheral, clocks and initializes CRC driver
 */
void CRC_CALC_init(void)
{
     d44:	b580      	push	{r7, lr}
     d46:	af00      	add	r7, sp, #0
	hri_mclk_set_APBBMASK_DSU_bit(MCLK);
     d48:	4804      	ldr	r0, [pc, #16]	; (d5c <CRC_CALC_init+0x18>)
     d4a:	4b05      	ldr	r3, [pc, #20]	; (d60 <CRC_CALC_init+0x1c>)
     d4c:	4798      	blx	r3
	crc_sync_init(&CRC_CALC, DSU);
     d4e:	4905      	ldr	r1, [pc, #20]	; (d64 <CRC_CALC_init+0x20>)
     d50:	4805      	ldr	r0, [pc, #20]	; (d68 <CRC_CALC_init+0x24>)
     d52:	4b06      	ldr	r3, [pc, #24]	; (d6c <CRC_CALC_init+0x28>)
     d54:	4798      	blx	r3
}
     d56:	bf00      	nop
     d58:	bd80      	pop	{r7, pc}
     d5a:	bf00      	nop
     d5c:	40000800 	.word	0x40000800
     d60:	00000567 	.word	0x00000567
     d64:	41002000 	.word	0x41002000
     d68:	20001d0c 	.word	0x20001d0c
     d6c:	00001cc9 	.word	0x00001cc9

00000d70 <EXTERNAL_IRQ_0_init>:

void EXTERNAL_IRQ_0_init(void)
{
     d70:	b580      	push	{r7, lr}
     d72:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, EIC_GCLK_ID, CONF_GCLK_EIC_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
     d74:	2244      	movs	r2, #68	; 0x44
     d76:	2104      	movs	r1, #4
     d78:	483f      	ldr	r0, [pc, #252]	; (e78 <EXTERNAL_IRQ_0_init+0x108>)
     d7a:	4b40      	ldr	r3, [pc, #256]	; (e7c <EXTERNAL_IRQ_0_init+0x10c>)
     d7c:	4798      	blx	r3
	hri_mclk_set_APBAMASK_EIC_bit(MCLK);
     d7e:	4840      	ldr	r0, [pc, #256]	; (e80 <EXTERNAL_IRQ_0_init+0x110>)
     d80:	4b40      	ldr	r3, [pc, #256]	; (e84 <EXTERNAL_IRQ_0_init+0x114>)
     d82:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(VBUS_DETECTED, GPIO_DIRECTION_IN);
     d84:	2101      	movs	r1, #1
     d86:	2040      	movs	r0, #64	; 0x40
     d88:	4b3f      	ldr	r3, [pc, #252]	; (e88 <EXTERNAL_IRQ_0_init+0x118>)
     d8a:	4798      	blx	r3

	gpio_set_pin_pull_mode(VBUS_DETECTED,
     d8c:	2100      	movs	r1, #0
     d8e:	2040      	movs	r0, #64	; 0x40
     d90:	4b3e      	ldr	r3, [pc, #248]	; (e8c <EXTERNAL_IRQ_0_init+0x11c>)
     d92:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(VBUS_DETECTED, PINMUX_PC00A_EIC_EXTINT0);
     d94:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
     d98:	2040      	movs	r0, #64	; 0x40
     d9a:	4b3d      	ldr	r3, [pc, #244]	; (e90 <EXTERNAL_IRQ_0_init+0x120>)
     d9c:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PB01, GPIO_DIRECTION_IN);
     d9e:	2101      	movs	r1, #1
     da0:	2021      	movs	r0, #33	; 0x21
     da2:	4b39      	ldr	r3, [pc, #228]	; (e88 <EXTERNAL_IRQ_0_init+0x118>)
     da4:	4798      	blx	r3

	gpio_set_pin_pull_mode(PB01,
     da6:	2100      	movs	r1, #0
     da8:	2021      	movs	r0, #33	; 0x21
     daa:	4b38      	ldr	r3, [pc, #224]	; (e8c <EXTERNAL_IRQ_0_init+0x11c>)
     dac:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PB01, PINMUX_PB01A_EIC_EXTINT1);
     dae:	f44f 1104 	mov.w	r1, #2162688	; 0x210000
     db2:	2021      	movs	r0, #33	; 0x21
     db4:	4b36      	ldr	r3, [pc, #216]	; (e90 <EXTERNAL_IRQ_0_init+0x120>)
     db6:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PA03, GPIO_DIRECTION_IN);
     db8:	2101      	movs	r1, #1
     dba:	2003      	movs	r0, #3
     dbc:	4b32      	ldr	r3, [pc, #200]	; (e88 <EXTERNAL_IRQ_0_init+0x118>)
     dbe:	4798      	blx	r3

	gpio_set_pin_pull_mode(PA03,
     dc0:	2102      	movs	r1, #2
     dc2:	2003      	movs	r0, #3
     dc4:	4b31      	ldr	r3, [pc, #196]	; (e8c <EXTERNAL_IRQ_0_init+0x11c>)
     dc6:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(PA03, PINMUX_PA03A_EIC_EXTINT3);
     dc8:	f44f 3140 	mov.w	r1, #196608	; 0x30000
     dcc:	2003      	movs	r0, #3
     dce:	4b30      	ldr	r3, [pc, #192]	; (e90 <EXTERNAL_IRQ_0_init+0x120>)
     dd0:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(I2CFV1CHANGED, GPIO_DIRECTION_IN);
     dd2:	2101      	movs	r1, #1
     dd4:	2004      	movs	r0, #4
     dd6:	4b2c      	ldr	r3, [pc, #176]	; (e88 <EXTERNAL_IRQ_0_init+0x118>)
     dd8:	4798      	blx	r3

	gpio_set_pin_pull_mode(I2CFV1CHANGED,
     dda:	2102      	movs	r1, #2
     ddc:	2004      	movs	r0, #4
     dde:	4b2b      	ldr	r3, [pc, #172]	; (e8c <EXTERNAL_IRQ_0_init+0x11c>)
     de0:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(I2CFV1CHANGED, PINMUX_PA04A_EIC_EXTINT4);
     de2:	f44f 2180 	mov.w	r1, #262144	; 0x40000
     de6:	2004      	movs	r0, #4
     de8:	4b29      	ldr	r3, [pc, #164]	; (e90 <EXTERNAL_IRQ_0_init+0x120>)
     dea:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(I2CFV2CHANGED, GPIO_DIRECTION_IN);
     dec:	2101      	movs	r1, #1
     dee:	2005      	movs	r0, #5
     df0:	4b25      	ldr	r3, [pc, #148]	; (e88 <EXTERNAL_IRQ_0_init+0x118>)
     df2:	4798      	blx	r3

	gpio_set_pin_pull_mode(I2CFV2CHANGED,
     df4:	2102      	movs	r1, #2
     df6:	2005      	movs	r0, #5
     df8:	4b24      	ldr	r3, [pc, #144]	; (e8c <EXTERNAL_IRQ_0_init+0x11c>)
     dfa:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(I2CFV2CHANGED, PINMUX_PA05A_EIC_EXTINT5);
     dfc:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
     e00:	2005      	movs	r0, #5
     e02:	4b23      	ldr	r3, [pc, #140]	; (e90 <EXTERNAL_IRQ_0_init+0x120>)
     e04:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(ARINCR2Int, GPIO_DIRECTION_IN);
     e06:	2101      	movs	r1, #1
     e08:	2056      	movs	r0, #86	; 0x56
     e0a:	4b1f      	ldr	r3, [pc, #124]	; (e88 <EXTERNAL_IRQ_0_init+0x118>)
     e0c:	4798      	blx	r3

	gpio_set_pin_pull_mode(ARINCR2Int,
     e0e:	2102      	movs	r1, #2
     e10:	2056      	movs	r0, #86	; 0x56
     e12:	4b1e      	ldr	r3, [pc, #120]	; (e8c <EXTERNAL_IRQ_0_init+0x11c>)
     e14:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(ARINCR2Int, PINMUX_PC22A_EIC_EXTINT6);
     e16:	f44f 01ac 	mov.w	r1, #5636096	; 0x560000
     e1a:	2056      	movs	r0, #86	; 0x56
     e1c:	4b1c      	ldr	r3, [pc, #112]	; (e90 <EXTERNAL_IRQ_0_init+0x120>)
     e1e:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(ARINCR1Int, GPIO_DIRECTION_IN);
     e20:	2101      	movs	r1, #1
     e22:	2057      	movs	r0, #87	; 0x57
     e24:	4b18      	ldr	r3, [pc, #96]	; (e88 <EXTERNAL_IRQ_0_init+0x118>)
     e26:	4798      	blx	r3

	gpio_set_pin_pull_mode(ARINCR1Int,
     e28:	2102      	movs	r1, #2
     e2a:	2057      	movs	r0, #87	; 0x57
     e2c:	4b17      	ldr	r3, [pc, #92]	; (e8c <EXTERNAL_IRQ_0_init+0x11c>)
     e2e:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(ARINCR1Int, PINMUX_PC23A_EIC_EXTINT7);
     e30:	f44f 01ae 	mov.w	r1, #5701632	; 0x570000
     e34:	2057      	movs	r0, #87	; 0x57
     e36:	4b16      	ldr	r3, [pc, #88]	; (e90 <EXTERNAL_IRQ_0_init+0x120>)
     e38:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PB08, GPIO_DIRECTION_IN);
     e3a:	2101      	movs	r1, #1
     e3c:	2028      	movs	r0, #40	; 0x28
     e3e:	4b12      	ldr	r3, [pc, #72]	; (e88 <EXTERNAL_IRQ_0_init+0x118>)
     e40:	4798      	blx	r3

	gpio_set_pin_pull_mode(PB08,
     e42:	2100      	movs	r1, #0
     e44:	2028      	movs	r0, #40	; 0x28
     e46:	4b11      	ldr	r3, [pc, #68]	; (e8c <EXTERNAL_IRQ_0_init+0x11c>)
     e48:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PB08, PINMUX_PB08A_EIC_EXTINT8);
     e4a:	f44f 1120 	mov.w	r1, #2621440	; 0x280000
     e4e:	2028      	movs	r0, #40	; 0x28
     e50:	4b0f      	ldr	r3, [pc, #60]	; (e90 <EXTERNAL_IRQ_0_init+0x120>)
     e52:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PB09, GPIO_DIRECTION_IN);
     e54:	2101      	movs	r1, #1
     e56:	2029      	movs	r0, #41	; 0x29
     e58:	4b0b      	ldr	r3, [pc, #44]	; (e88 <EXTERNAL_IRQ_0_init+0x118>)
     e5a:	4798      	blx	r3

	gpio_set_pin_pull_mode(PB09,
     e5c:	2100      	movs	r1, #0
     e5e:	2029      	movs	r0, #41	; 0x29
     e60:	4b0a      	ldr	r3, [pc, #40]	; (e8c <EXTERNAL_IRQ_0_init+0x11c>)
     e62:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PB09, PINMUX_PB09A_EIC_EXTINT9);
     e64:	f44f 1124 	mov.w	r1, #2686976	; 0x290000
     e68:	2029      	movs	r0, #41	; 0x29
     e6a:	4b09      	ldr	r3, [pc, #36]	; (e90 <EXTERNAL_IRQ_0_init+0x120>)
     e6c:	4798      	blx	r3

	ext_irq_init();
     e6e:	4b09      	ldr	r3, [pc, #36]	; (e94 <EXTERNAL_IRQ_0_init+0x124>)
     e70:	4798      	blx	r3
}
     e72:	bf00      	nop
     e74:	bd80      	pop	{r7, pc}
     e76:	bf00      	nop
     e78:	40001c00 	.word	0x40001c00
     e7c:	00000401 	.word	0x00000401
     e80:	40000800 	.word	0x40000800
     e84:	000004e7 	.word	0x000004e7
     e88:	00000c75 	.word	0x00000c75
     e8c:	00000c21 	.word	0x00000c21
     e90:	00000c55 	.word	0x00000c55
     e94:	00001d91 	.word	0x00001d91

00000e98 <EVENT_SYSTEM_0_init>:

void EVENT_SYSTEM_0_init(void)
{
     e98:	b580      	push	{r7, lr}
     e9a:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, EVSYS_GCLK_ID_0, CONF_GCLK_EVSYS_CHANNEL_0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
     e9c:	2244      	movs	r2, #68	; 0x44
     e9e:	210b      	movs	r1, #11
     ea0:	4807      	ldr	r0, [pc, #28]	; (ec0 <EVENT_SYSTEM_0_init+0x28>)
     ea2:	4b08      	ldr	r3, [pc, #32]	; (ec4 <EVENT_SYSTEM_0_init+0x2c>)
     ea4:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, EVSYS_GCLK_ID_1, CONF_GCLK_EVSYS_CHANNEL_1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
     ea6:	2244      	movs	r2, #68	; 0x44
     ea8:	210c      	movs	r1, #12
     eaa:	4805      	ldr	r0, [pc, #20]	; (ec0 <EVENT_SYSTEM_0_init+0x28>)
     eac:	4b05      	ldr	r3, [pc, #20]	; (ec4 <EVENT_SYSTEM_0_init+0x2c>)
     eae:	4798      	blx	r3

	hri_mclk_set_APBBMASK_EVSYS_bit(MCLK);
     eb0:	4805      	ldr	r0, [pc, #20]	; (ec8 <EVENT_SYSTEM_0_init+0x30>)
     eb2:	4b06      	ldr	r3, [pc, #24]	; (ecc <EVENT_SYSTEM_0_init+0x34>)
     eb4:	4798      	blx	r3

	event_system_init();
     eb6:	4b06      	ldr	r3, [pc, #24]	; (ed0 <EVENT_SYSTEM_0_init+0x38>)
     eb8:	4798      	blx	r3
}
     eba:	bf00      	nop
     ebc:	bd80      	pop	{r7, pc}
     ebe:	bf00      	nop
     ec0:	40001c00 	.word	0x40001c00
     ec4:	00000401 	.word	0x00000401
     ec8:	40000800 	.word	0x40000800
     ecc:	00000587 	.word	0x00000587
     ed0:	00001d7d 	.word	0x00001d7d

00000ed4 <QSPI_N25Q256_PORT_init>:

void QSPI_N25Q256_PORT_init(void)
{
     ed4:	b580      	push	{r7, lr}
     ed6:	af00      	add	r7, sp, #0

	// Set pin direction to input
	gpio_set_pin_direction(FLASH_CS, GPIO_DIRECTION_IN);
     ed8:	2101      	movs	r1, #1
     eda:	202b      	movs	r0, #43	; 0x2b
     edc:	4b2b      	ldr	r3, [pc, #172]	; (f8c <QSPI_N25Q256_PORT_init+0xb8>)
     ede:	4798      	blx	r3

	gpio_set_pin_pull_mode(FLASH_CS,
     ee0:	2100      	movs	r1, #0
     ee2:	202b      	movs	r0, #43	; 0x2b
     ee4:	4b2a      	ldr	r3, [pc, #168]	; (f90 <QSPI_N25Q256_PORT_init+0xbc>)
     ee6:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_CS, PINMUX_PB11H_QSPI_CS);
     ee8:	492a      	ldr	r1, [pc, #168]	; (f94 <QSPI_N25Q256_PORT_init+0xc0>)
     eea:	202b      	movs	r0, #43	; 0x2b
     eec:	4b2a      	ldr	r3, [pc, #168]	; (f98 <QSPI_N25Q256_PORT_init+0xc4>)
     eee:	4798      	blx	r3

	gpio_set_pin_direction(FLASH_IO0,
     ef0:	2102      	movs	r1, #2
     ef2:	2008      	movs	r0, #8
     ef4:	4b25      	ldr	r3, [pc, #148]	; (f8c <QSPI_N25Q256_PORT_init+0xb8>)
     ef6:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(FLASH_IO0,
     ef8:	2100      	movs	r1, #0
     efa:	2008      	movs	r0, #8
     efc:	4b27      	ldr	r3, [pc, #156]	; (f9c <QSPI_N25Q256_PORT_init+0xc8>)
     efe:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(FLASH_IO0,
     f00:	2100      	movs	r1, #0
     f02:	2008      	movs	r0, #8
     f04:	4b22      	ldr	r3, [pc, #136]	; (f90 <QSPI_N25Q256_PORT_init+0xbc>)
     f06:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_IO0,
     f08:	4925      	ldr	r1, [pc, #148]	; (fa0 <QSPI_N25Q256_PORT_init+0xcc>)
     f0a:	2008      	movs	r0, #8
     f0c:	4b22      	ldr	r3, [pc, #136]	; (f98 <QSPI_N25Q256_PORT_init+0xc4>)
     f0e:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA08H_QSPI_DATA0);

	gpio_set_pin_direction(FLASH_IO1,
     f10:	2102      	movs	r1, #2
     f12:	2009      	movs	r0, #9
     f14:	4b1d      	ldr	r3, [pc, #116]	; (f8c <QSPI_N25Q256_PORT_init+0xb8>)
     f16:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(FLASH_IO1,
     f18:	2100      	movs	r1, #0
     f1a:	2009      	movs	r0, #9
     f1c:	4b1f      	ldr	r3, [pc, #124]	; (f9c <QSPI_N25Q256_PORT_init+0xc8>)
     f1e:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(FLASH_IO1,
     f20:	2100      	movs	r1, #0
     f22:	2009      	movs	r0, #9
     f24:	4b1a      	ldr	r3, [pc, #104]	; (f90 <QSPI_N25Q256_PORT_init+0xbc>)
     f26:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_IO1,
     f28:	491e      	ldr	r1, [pc, #120]	; (fa4 <QSPI_N25Q256_PORT_init+0xd0>)
     f2a:	2009      	movs	r0, #9
     f2c:	4b1a      	ldr	r3, [pc, #104]	; (f98 <QSPI_N25Q256_PORT_init+0xc4>)
     f2e:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA09H_QSPI_DATA1);

	gpio_set_pin_direction(FLASH_IO2,
     f30:	2102      	movs	r1, #2
     f32:	200a      	movs	r0, #10
     f34:	4b15      	ldr	r3, [pc, #84]	; (f8c <QSPI_N25Q256_PORT_init+0xb8>)
     f36:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(FLASH_IO2,
     f38:	2100      	movs	r1, #0
     f3a:	200a      	movs	r0, #10
     f3c:	4b17      	ldr	r3, [pc, #92]	; (f9c <QSPI_N25Q256_PORT_init+0xc8>)
     f3e:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(FLASH_IO2,
     f40:	2100      	movs	r1, #0
     f42:	200a      	movs	r0, #10
     f44:	4b12      	ldr	r3, [pc, #72]	; (f90 <QSPI_N25Q256_PORT_init+0xbc>)
     f46:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_IO2,
     f48:	4917      	ldr	r1, [pc, #92]	; (fa8 <QSPI_N25Q256_PORT_init+0xd4>)
     f4a:	200a      	movs	r0, #10
     f4c:	4b12      	ldr	r3, [pc, #72]	; (f98 <QSPI_N25Q256_PORT_init+0xc4>)
     f4e:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA10H_QSPI_DATA2);

	gpio_set_pin_direction(FLASH_IO3,
     f50:	2102      	movs	r1, #2
     f52:	200b      	movs	r0, #11
     f54:	4b0d      	ldr	r3, [pc, #52]	; (f8c <QSPI_N25Q256_PORT_init+0xb8>)
     f56:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(FLASH_IO3,
     f58:	2100      	movs	r1, #0
     f5a:	200b      	movs	r0, #11
     f5c:	4b0f      	ldr	r3, [pc, #60]	; (f9c <QSPI_N25Q256_PORT_init+0xc8>)
     f5e:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(FLASH_IO3,
     f60:	2100      	movs	r1, #0
     f62:	200b      	movs	r0, #11
     f64:	4b0a      	ldr	r3, [pc, #40]	; (f90 <QSPI_N25Q256_PORT_init+0xbc>)
     f66:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_IO3,
     f68:	4910      	ldr	r1, [pc, #64]	; (fac <QSPI_N25Q256_PORT_init+0xd8>)
     f6a:	200b      	movs	r0, #11
     f6c:	4b0a      	ldr	r3, [pc, #40]	; (f98 <QSPI_N25Q256_PORT_init+0xc4>)
     f6e:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA11H_QSPI_DATA3);

	// Set pin direction to input
	gpio_set_pin_direction(FLASH_CLK, GPIO_DIRECTION_IN);
     f70:	2101      	movs	r1, #1
     f72:	202a      	movs	r0, #42	; 0x2a
     f74:	4b05      	ldr	r3, [pc, #20]	; (f8c <QSPI_N25Q256_PORT_init+0xb8>)
     f76:	4798      	blx	r3

	gpio_set_pin_pull_mode(FLASH_CLK,
     f78:	2100      	movs	r1, #0
     f7a:	202a      	movs	r0, #42	; 0x2a
     f7c:	4b04      	ldr	r3, [pc, #16]	; (f90 <QSPI_N25Q256_PORT_init+0xbc>)
     f7e:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_CLK, PINMUX_PB10H_QSPI_SCK);
     f80:	490b      	ldr	r1, [pc, #44]	; (fb0 <QSPI_N25Q256_PORT_init+0xdc>)
     f82:	202a      	movs	r0, #42	; 0x2a
     f84:	4b04      	ldr	r3, [pc, #16]	; (f98 <QSPI_N25Q256_PORT_init+0xc4>)
     f86:	4798      	blx	r3
}
     f88:	bf00      	nop
     f8a:	bd80      	pop	{r7, pc}
     f8c:	00000c75 	.word	0x00000c75
     f90:	00000c21 	.word	0x00000c21
     f94:	002b0007 	.word	0x002b0007
     f98:	00000c55 	.word	0x00000c55
     f9c:	00000cad 	.word	0x00000cad
     fa0:	00080007 	.word	0x00080007
     fa4:	00090007 	.word	0x00090007
     fa8:	000a0007 	.word	0x000a0007
     fac:	000b0007 	.word	0x000b0007
     fb0:	002a0007 	.word	0x002a0007

00000fb4 <QSPI_N25Q256_CLOCK_init>:

void QSPI_N25Q256_CLOCK_init(void)
{
     fb4:	b580      	push	{r7, lr}
     fb6:	af00      	add	r7, sp, #0
	hri_mclk_set_AHBMASK_QSPI_bit(MCLK);
     fb8:	4805      	ldr	r0, [pc, #20]	; (fd0 <QSPI_N25Q256_CLOCK_init+0x1c>)
     fba:	4b06      	ldr	r3, [pc, #24]	; (fd4 <QSPI_N25Q256_CLOCK_init+0x20>)
     fbc:	4798      	blx	r3
	hri_mclk_set_AHBMASK_QSPI_2X_bit(MCLK);
     fbe:	4804      	ldr	r0, [pc, #16]	; (fd0 <QSPI_N25Q256_CLOCK_init+0x1c>)
     fc0:	4b05      	ldr	r3, [pc, #20]	; (fd8 <QSPI_N25Q256_CLOCK_init+0x24>)
     fc2:	4798      	blx	r3
	hri_mclk_set_APBCMASK_QSPI_bit(MCLK);
     fc4:	4802      	ldr	r0, [pc, #8]	; (fd0 <QSPI_N25Q256_CLOCK_init+0x1c>)
     fc6:	4b05      	ldr	r3, [pc, #20]	; (fdc <QSPI_N25Q256_CLOCK_init+0x28>)
     fc8:	4798      	blx	r3
}
     fca:	bf00      	nop
     fcc:	bd80      	pop	{r7, pc}
     fce:	bf00      	nop
     fd0:	40000800 	.word	0x40000800
     fd4:	00000447 	.word	0x00000447
     fd8:	00000487 	.word	0x00000487
     fdc:	00000667 	.word	0x00000667

00000fe0 <QSPI_N25Q256_init>:

void QSPI_N25Q256_init(void)
{
     fe0:	b580      	push	{r7, lr}
     fe2:	af00      	add	r7, sp, #0
	QSPI_N25Q256_CLOCK_init();
     fe4:	4b04      	ldr	r3, [pc, #16]	; (ff8 <QSPI_N25Q256_init+0x18>)
     fe6:	4798      	blx	r3
	qspi_sync_init(&QSPI_N25Q256, QSPI);
     fe8:	4904      	ldr	r1, [pc, #16]	; (ffc <QSPI_N25Q256_init+0x1c>)
     fea:	4805      	ldr	r0, [pc, #20]	; (1000 <QSPI_N25Q256_init+0x20>)
     fec:	4b05      	ldr	r3, [pc, #20]	; (1004 <QSPI_N25Q256_init+0x24>)
     fee:	4798      	blx	r3
	QSPI_N25Q256_PORT_init();
     ff0:	4b05      	ldr	r3, [pc, #20]	; (1008 <QSPI_N25Q256_init+0x28>)
     ff2:	4798      	blx	r3
}
     ff4:	bf00      	nop
     ff6:	bd80      	pop	{r7, pc}
     ff8:	00000fb5 	.word	0x00000fb5
     ffc:	42003400 	.word	0x42003400
    1000:	20001ba0 	.word	0x20001ba0
    1004:	0000200d 	.word	0x0000200d
    1008:	00000ed5 	.word	0x00000ed5

0000100c <DATETIME_CLOCK_CLOCK_init>:

void DATETIME_CLOCK_CLOCK_init(void)
{
    100c:	b580      	push	{r7, lr}
    100e:	af00      	add	r7, sp, #0
	hri_mclk_set_APBAMASK_RTC_bit(MCLK);
    1010:	4802      	ldr	r0, [pc, #8]	; (101c <DATETIME_CLOCK_CLOCK_init+0x10>)
    1012:	4b03      	ldr	r3, [pc, #12]	; (1020 <DATETIME_CLOCK_CLOCK_init+0x14>)
    1014:	4798      	blx	r3
}
    1016:	bf00      	nop
    1018:	bd80      	pop	{r7, pc}
    101a:	bf00      	nop
    101c:	40000800 	.word	0x40000800
    1020:	000004c7 	.word	0x000004c7

00001024 <DATETIME_CLOCK_init>:

void DATETIME_CLOCK_init(void)
{
    1024:	b580      	push	{r7, lr}
    1026:	af00      	add	r7, sp, #0
	DATETIME_CLOCK_CLOCK_init();
    1028:	4b03      	ldr	r3, [pc, #12]	; (1038 <DATETIME_CLOCK_init+0x14>)
    102a:	4798      	blx	r3
	calendar_init(&DATETIME_CLOCK, RTC);
    102c:	4903      	ldr	r1, [pc, #12]	; (103c <DATETIME_CLOCK_init+0x18>)
    102e:	4804      	ldr	r0, [pc, #16]	; (1040 <DATETIME_CLOCK_init+0x1c>)
    1030:	4b04      	ldr	r3, [pc, #16]	; (1044 <DATETIME_CLOCK_init+0x20>)
    1032:	4798      	blx	r3
}
    1034:	bf00      	nop
    1036:	bd80      	pop	{r7, pc}
    1038:	0000100d 	.word	0x0000100d
    103c:	40002400 	.word	0x40002400
    1040:	20001ce8 	.word	0x20001ce8
    1044:	000019d1 	.word	0x000019d1

00001048 <I2C_HEATERS_PORT_init>:

void I2C_HEATERS_PORT_init(void)
{
    1048:	b580      	push	{r7, lr}
    104a:	af00      	add	r7, sp, #0

	gpio_set_pin_pull_mode(PA16,
    104c:	2101      	movs	r1, #1
    104e:	2010      	movs	r0, #16
    1050:	4b07      	ldr	r3, [pc, #28]	; (1070 <I2C_HEATERS_PORT_init+0x28>)
    1052:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_UP);

	gpio_set_pin_function(PA16, PINMUX_PA16C_SERCOM1_PAD0);
    1054:	4907      	ldr	r1, [pc, #28]	; (1074 <I2C_HEATERS_PORT_init+0x2c>)
    1056:	2010      	movs	r0, #16
    1058:	4b07      	ldr	r3, [pc, #28]	; (1078 <I2C_HEATERS_PORT_init+0x30>)
    105a:	4798      	blx	r3

	gpio_set_pin_pull_mode(PA17,
    105c:	2101      	movs	r1, #1
    105e:	2011      	movs	r0, #17
    1060:	4b03      	ldr	r3, [pc, #12]	; (1070 <I2C_HEATERS_PORT_init+0x28>)
    1062:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_UP);

	gpio_set_pin_function(PA17, PINMUX_PA17C_SERCOM1_PAD1);
    1064:	4905      	ldr	r1, [pc, #20]	; (107c <I2C_HEATERS_PORT_init+0x34>)
    1066:	2011      	movs	r0, #17
    1068:	4b03      	ldr	r3, [pc, #12]	; (1078 <I2C_HEATERS_PORT_init+0x30>)
    106a:	4798      	blx	r3
}
    106c:	bf00      	nop
    106e:	bd80      	pop	{r7, pc}
    1070:	00000c21 	.word	0x00000c21
    1074:	00100002 	.word	0x00100002
    1078:	00000c55 	.word	0x00000c55
    107c:	00110002 	.word	0x00110002

00001080 <I2C_HEATERS_CLOCK_init>:

void I2C_HEATERS_CLOCK_init(void)
{
    1080:	b580      	push	{r7, lr}
    1082:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM1_GCLK_ID_CORE, CONF_GCLK_SERCOM1_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1084:	2242      	movs	r2, #66	; 0x42
    1086:	2108      	movs	r1, #8
    1088:	4806      	ldr	r0, [pc, #24]	; (10a4 <I2C_HEATERS_CLOCK_init+0x24>)
    108a:	4b07      	ldr	r3, [pc, #28]	; (10a8 <I2C_HEATERS_CLOCK_init+0x28>)
    108c:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM1_GCLK_ID_SLOW, CONF_GCLK_SERCOM1_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    108e:	224a      	movs	r2, #74	; 0x4a
    1090:	2103      	movs	r1, #3
    1092:	4804      	ldr	r0, [pc, #16]	; (10a4 <I2C_HEATERS_CLOCK_init+0x24>)
    1094:	4b04      	ldr	r3, [pc, #16]	; (10a8 <I2C_HEATERS_CLOCK_init+0x28>)
    1096:	4798      	blx	r3

	hri_mclk_set_APBAMASK_SERCOM1_bit(MCLK);
    1098:	4804      	ldr	r0, [pc, #16]	; (10ac <I2C_HEATERS_CLOCK_init+0x2c>)
    109a:	4b05      	ldr	r3, [pc, #20]	; (10b0 <I2C_HEATERS_CLOCK_init+0x30>)
    109c:	4798      	blx	r3
}
    109e:	bf00      	nop
    10a0:	bd80      	pop	{r7, pc}
    10a2:	bf00      	nop
    10a4:	40001c00 	.word	0x40001c00
    10a8:	00000401 	.word	0x00000401
    10ac:	40000800 	.word	0x40000800
    10b0:	00000507 	.word	0x00000507

000010b4 <I2C_HEATERS_init>:

void I2C_HEATERS_init(void)
{
    10b4:	b580      	push	{r7, lr}
    10b6:	af00      	add	r7, sp, #0
	I2C_HEATERS_CLOCK_init();
    10b8:	4b04      	ldr	r3, [pc, #16]	; (10cc <I2C_HEATERS_init+0x18>)
    10ba:	4798      	blx	r3
	i2c_m_sync_init(&I2C_HEATERS, SERCOM1);
    10bc:	4904      	ldr	r1, [pc, #16]	; (10d0 <I2C_HEATERS_init+0x1c>)
    10be:	4805      	ldr	r0, [pc, #20]	; (10d4 <I2C_HEATERS_init+0x20>)
    10c0:	4b05      	ldr	r3, [pc, #20]	; (10d8 <I2C_HEATERS_init+0x24>)
    10c2:	4798      	blx	r3
	I2C_HEATERS_PORT_init();
    10c4:	4b05      	ldr	r3, [pc, #20]	; (10dc <I2C_HEATERS_init+0x28>)
    10c6:	4798      	blx	r3
}
    10c8:	bf00      	nop
    10ca:	bd80      	pop	{r7, pc}
    10cc:	00001081 	.word	0x00001081
    10d0:	40003400 	.word	0x40003400
    10d4:	20001c40 	.word	0x20001c40
    10d8:	00001f01 	.word	0x00001f01
    10dc:	00001049 	.word	0x00001049

000010e0 <SPI_TEMP_PORT_init>:

void SPI_TEMP_PORT_init(void)
{
    10e0:	b580      	push	{r7, lr}
    10e2:	af00      	add	r7, sp, #0

	gpio_set_pin_level(PB27,
    10e4:	2100      	movs	r1, #0
    10e6:	203b      	movs	r0, #59	; 0x3b
    10e8:	4b11      	ldr	r3, [pc, #68]	; (1130 <SPI_TEMP_PORT_init+0x50>)
    10ea:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PB27, GPIO_DIRECTION_OUT);
    10ec:	2102      	movs	r1, #2
    10ee:	203b      	movs	r0, #59	; 0x3b
    10f0:	4b10      	ldr	r3, [pc, #64]	; (1134 <SPI_TEMP_PORT_init+0x54>)
    10f2:	4798      	blx	r3

	gpio_set_pin_function(PB27, PINMUX_PB27D_SERCOM4_PAD0);
    10f4:	4910      	ldr	r1, [pc, #64]	; (1138 <SPI_TEMP_PORT_init+0x58>)
    10f6:	203b      	movs	r0, #59	; 0x3b
    10f8:	4b10      	ldr	r3, [pc, #64]	; (113c <SPI_TEMP_PORT_init+0x5c>)
    10fa:	4798      	blx	r3

	gpio_set_pin_level(PB26,
    10fc:	2100      	movs	r1, #0
    10fe:	203a      	movs	r0, #58	; 0x3a
    1100:	4b0b      	ldr	r3, [pc, #44]	; (1130 <SPI_TEMP_PORT_init+0x50>)
    1102:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PB26, GPIO_DIRECTION_OUT);
    1104:	2102      	movs	r1, #2
    1106:	203a      	movs	r0, #58	; 0x3a
    1108:	4b0a      	ldr	r3, [pc, #40]	; (1134 <SPI_TEMP_PORT_init+0x54>)
    110a:	4798      	blx	r3

	gpio_set_pin_function(PB26, PINMUX_PB26D_SERCOM4_PAD1);
    110c:	490c      	ldr	r1, [pc, #48]	; (1140 <SPI_TEMP_PORT_init+0x60>)
    110e:	203a      	movs	r0, #58	; 0x3a
    1110:	4b0a      	ldr	r3, [pc, #40]	; (113c <SPI_TEMP_PORT_init+0x5c>)
    1112:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PB28, GPIO_DIRECTION_IN);
    1114:	2101      	movs	r1, #1
    1116:	203c      	movs	r0, #60	; 0x3c
    1118:	4b06      	ldr	r3, [pc, #24]	; (1134 <SPI_TEMP_PORT_init+0x54>)
    111a:	4798      	blx	r3

	gpio_set_pin_pull_mode(PB28,
    111c:	2100      	movs	r1, #0
    111e:	203c      	movs	r0, #60	; 0x3c
    1120:	4b08      	ldr	r3, [pc, #32]	; (1144 <SPI_TEMP_PORT_init+0x64>)
    1122:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PB28, PINMUX_PB28D_SERCOM4_PAD2);
    1124:	4908      	ldr	r1, [pc, #32]	; (1148 <SPI_TEMP_PORT_init+0x68>)
    1126:	203c      	movs	r0, #60	; 0x3c
    1128:	4b04      	ldr	r3, [pc, #16]	; (113c <SPI_TEMP_PORT_init+0x5c>)
    112a:	4798      	blx	r3
}
    112c:	bf00      	nop
    112e:	bd80      	pop	{r7, pc}
    1130:	00000cad 	.word	0x00000cad
    1134:	00000c75 	.word	0x00000c75
    1138:	003b0003 	.word	0x003b0003
    113c:	00000c55 	.word	0x00000c55
    1140:	003a0003 	.word	0x003a0003
    1144:	00000c21 	.word	0x00000c21
    1148:	003c0003 	.word	0x003c0003

0000114c <SPI_TEMP_CLOCK_init>:

void SPI_TEMP_CLOCK_init(void)
{
    114c:	b580      	push	{r7, lr}
    114e:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM4_GCLK_ID_CORE, CONF_GCLK_SERCOM4_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1150:	2245      	movs	r2, #69	; 0x45
    1152:	2122      	movs	r1, #34	; 0x22
    1154:	4806      	ldr	r0, [pc, #24]	; (1170 <SPI_TEMP_CLOCK_init+0x24>)
    1156:	4b07      	ldr	r3, [pc, #28]	; (1174 <SPI_TEMP_CLOCK_init+0x28>)
    1158:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM4_GCLK_ID_SLOW, CONF_GCLK_SERCOM4_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    115a:	224a      	movs	r2, #74	; 0x4a
    115c:	2103      	movs	r1, #3
    115e:	4804      	ldr	r0, [pc, #16]	; (1170 <SPI_TEMP_CLOCK_init+0x24>)
    1160:	4b04      	ldr	r3, [pc, #16]	; (1174 <SPI_TEMP_CLOCK_init+0x28>)
    1162:	4798      	blx	r3

	hri_mclk_set_APBDMASK_SERCOM4_bit(MCLK);
    1164:	4804      	ldr	r0, [pc, #16]	; (1178 <SPI_TEMP_CLOCK_init+0x2c>)
    1166:	4b05      	ldr	r3, [pc, #20]	; (117c <SPI_TEMP_CLOCK_init+0x30>)
    1168:	4798      	blx	r3
}
    116a:	bf00      	nop
    116c:	bd80      	pop	{r7, pc}
    116e:	bf00      	nop
    1170:	40001c00 	.word	0x40001c00
    1174:	00000401 	.word	0x00000401
    1178:	40000800 	.word	0x40000800
    117c:	00000687 	.word	0x00000687

00001180 <SPI_TEMP_init>:

void SPI_TEMP_init(void)
{
    1180:	b580      	push	{r7, lr}
    1182:	af00      	add	r7, sp, #0
	SPI_TEMP_CLOCK_init();
    1184:	4b05      	ldr	r3, [pc, #20]	; (119c <SPI_TEMP_init+0x1c>)
    1186:	4798      	blx	r3
	spi_m_sync_init(&SPI_TEMP, SERCOM4);
    1188:	f04f 4186 	mov.w	r1, #1124073472	; 0x43000000
    118c:	4804      	ldr	r0, [pc, #16]	; (11a0 <SPI_TEMP_init+0x20>)
    118e:	4b05      	ldr	r3, [pc, #20]	; (11a4 <SPI_TEMP_init+0x24>)
    1190:	4798      	blx	r3
	SPI_TEMP_PORT_init();
    1192:	4b05      	ldr	r3, [pc, #20]	; (11a8 <SPI_TEMP_init+0x28>)
    1194:	4798      	blx	r3
}
    1196:	bf00      	nop
    1198:	bd80      	pop	{r7, pc}
    119a:	bf00      	nop
    119c:	0000114d 	.word	0x0000114d
    11a0:	20001b48 	.word	0x20001b48
    11a4:	0000211d 	.word	0x0000211d
    11a8:	000010e1 	.word	0x000010e1

000011ac <I2C_FLAPPER_VALVE_PORT_init>:

void I2C_FLAPPER_VALVE_PORT_init(void)
{
    11ac:	b580      	push	{r7, lr}
    11ae:	af00      	add	r7, sp, #0

	gpio_set_pin_pull_mode(PA23,
    11b0:	2100      	movs	r1, #0
    11b2:	2017      	movs	r0, #23
    11b4:	4b07      	ldr	r3, [pc, #28]	; (11d4 <I2C_FLAPPER_VALVE_PORT_init+0x28>)
    11b6:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA23, PINMUX_PA23D_SERCOM5_PAD0);
    11b8:	4907      	ldr	r1, [pc, #28]	; (11d8 <I2C_FLAPPER_VALVE_PORT_init+0x2c>)
    11ba:	2017      	movs	r0, #23
    11bc:	4b07      	ldr	r3, [pc, #28]	; (11dc <I2C_FLAPPER_VALVE_PORT_init+0x30>)
    11be:	4798      	blx	r3

	gpio_set_pin_pull_mode(PA22,
    11c0:	2100      	movs	r1, #0
    11c2:	2016      	movs	r0, #22
    11c4:	4b03      	ldr	r3, [pc, #12]	; (11d4 <I2C_FLAPPER_VALVE_PORT_init+0x28>)
    11c6:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA22, PINMUX_PA22D_SERCOM5_PAD1);
    11c8:	4905      	ldr	r1, [pc, #20]	; (11e0 <I2C_FLAPPER_VALVE_PORT_init+0x34>)
    11ca:	2016      	movs	r0, #22
    11cc:	4b03      	ldr	r3, [pc, #12]	; (11dc <I2C_FLAPPER_VALVE_PORT_init+0x30>)
    11ce:	4798      	blx	r3
}
    11d0:	bf00      	nop
    11d2:	bd80      	pop	{r7, pc}
    11d4:	00000c21 	.word	0x00000c21
    11d8:	00170003 	.word	0x00170003
    11dc:	00000c55 	.word	0x00000c55
    11e0:	00160003 	.word	0x00160003

000011e4 <I2C_FLAPPER_VALVE_CLOCK_init>:

void I2C_FLAPPER_VALVE_CLOCK_init(void)
{
    11e4:	b580      	push	{r7, lr}
    11e6:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM5_GCLK_ID_CORE, CONF_GCLK_SERCOM5_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    11e8:	2244      	movs	r2, #68	; 0x44
    11ea:	2123      	movs	r1, #35	; 0x23
    11ec:	4806      	ldr	r0, [pc, #24]	; (1208 <I2C_FLAPPER_VALVE_CLOCK_init+0x24>)
    11ee:	4b07      	ldr	r3, [pc, #28]	; (120c <I2C_FLAPPER_VALVE_CLOCK_init+0x28>)
    11f0:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM5_GCLK_ID_SLOW, CONF_GCLK_SERCOM5_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    11f2:	224a      	movs	r2, #74	; 0x4a
    11f4:	2103      	movs	r1, #3
    11f6:	4804      	ldr	r0, [pc, #16]	; (1208 <I2C_FLAPPER_VALVE_CLOCK_init+0x24>)
    11f8:	4b04      	ldr	r3, [pc, #16]	; (120c <I2C_FLAPPER_VALVE_CLOCK_init+0x28>)
    11fa:	4798      	blx	r3

	hri_mclk_set_APBDMASK_SERCOM5_bit(MCLK);
    11fc:	4804      	ldr	r0, [pc, #16]	; (1210 <I2C_FLAPPER_VALVE_CLOCK_init+0x2c>)
    11fe:	4b05      	ldr	r3, [pc, #20]	; (1214 <I2C_FLAPPER_VALVE_CLOCK_init+0x30>)
    1200:	4798      	blx	r3
}
    1202:	bf00      	nop
    1204:	bd80      	pop	{r7, pc}
    1206:	bf00      	nop
    1208:	40001c00 	.word	0x40001c00
    120c:	00000401 	.word	0x00000401
    1210:	40000800 	.word	0x40000800
    1214:	000006a7 	.word	0x000006a7

00001218 <I2C_FLAPPER_VALVE_init>:

void I2C_FLAPPER_VALVE_init(void)
{
    1218:	b580      	push	{r7, lr}
    121a:	af00      	add	r7, sp, #0
	I2C_FLAPPER_VALVE_CLOCK_init();
    121c:	4b04      	ldr	r3, [pc, #16]	; (1230 <I2C_FLAPPER_VALVE_init+0x18>)
    121e:	4798      	blx	r3
	i2c_m_sync_init(&I2C_FLAPPER_VALVE, SERCOM5);
    1220:	4904      	ldr	r1, [pc, #16]	; (1234 <I2C_FLAPPER_VALVE_init+0x1c>)
    1222:	4805      	ldr	r0, [pc, #20]	; (1238 <I2C_FLAPPER_VALVE_init+0x20>)
    1224:	4b05      	ldr	r3, [pc, #20]	; (123c <I2C_FLAPPER_VALVE_init+0x24>)
    1226:	4798      	blx	r3
	I2C_FLAPPER_VALVE_PORT_init();
    1228:	4b05      	ldr	r3, [pc, #20]	; (1240 <I2C_FLAPPER_VALVE_init+0x28>)
    122a:	4798      	blx	r3
}
    122c:	bf00      	nop
    122e:	bd80      	pop	{r7, pc}
    1230:	000011e5 	.word	0x000011e5
    1234:	43000400 	.word	0x43000400
    1238:	20001be4 	.word	0x20001be4
    123c:	00001f01 	.word	0x00001f01
    1240:	000011ad 	.word	0x000011ad

00001244 <SPI_HI3593_PORT_init>:

void SPI_HI3593_PORT_init(void)
{
    1244:	b580      	push	{r7, lr}
    1246:	af00      	add	r7, sp, #0

	gpio_set_pin_level(PC04,
    1248:	2100      	movs	r1, #0
    124a:	2044      	movs	r0, #68	; 0x44
    124c:	4b11      	ldr	r3, [pc, #68]	; (1294 <SPI_HI3593_PORT_init+0x50>)
    124e:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PC04, GPIO_DIRECTION_OUT);
    1250:	2102      	movs	r1, #2
    1252:	2044      	movs	r0, #68	; 0x44
    1254:	4b10      	ldr	r3, [pc, #64]	; (1298 <SPI_HI3593_PORT_init+0x54>)
    1256:	4798      	blx	r3

	gpio_set_pin_function(PC04, PINMUX_PC04C_SERCOM6_PAD0);
    1258:	4910      	ldr	r1, [pc, #64]	; (129c <SPI_HI3593_PORT_init+0x58>)
    125a:	2044      	movs	r0, #68	; 0x44
    125c:	4b10      	ldr	r3, [pc, #64]	; (12a0 <SPI_HI3593_PORT_init+0x5c>)
    125e:	4798      	blx	r3

	gpio_set_pin_level(PC05,
    1260:	2100      	movs	r1, #0
    1262:	2045      	movs	r0, #69	; 0x45
    1264:	4b0b      	ldr	r3, [pc, #44]	; (1294 <SPI_HI3593_PORT_init+0x50>)
    1266:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PC05, GPIO_DIRECTION_OUT);
    1268:	2102      	movs	r1, #2
    126a:	2045      	movs	r0, #69	; 0x45
    126c:	4b0a      	ldr	r3, [pc, #40]	; (1298 <SPI_HI3593_PORT_init+0x54>)
    126e:	4798      	blx	r3

	gpio_set_pin_function(PC05, PINMUX_PC05C_SERCOM6_PAD1);
    1270:	490c      	ldr	r1, [pc, #48]	; (12a4 <SPI_HI3593_PORT_init+0x60>)
    1272:	2045      	movs	r0, #69	; 0x45
    1274:	4b0a      	ldr	r3, [pc, #40]	; (12a0 <SPI_HI3593_PORT_init+0x5c>)
    1276:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PC07, GPIO_DIRECTION_IN);
    1278:	2101      	movs	r1, #1
    127a:	2047      	movs	r0, #71	; 0x47
    127c:	4b06      	ldr	r3, [pc, #24]	; (1298 <SPI_HI3593_PORT_init+0x54>)
    127e:	4798      	blx	r3

	gpio_set_pin_pull_mode(PC07,
    1280:	2100      	movs	r1, #0
    1282:	2047      	movs	r0, #71	; 0x47
    1284:	4b08      	ldr	r3, [pc, #32]	; (12a8 <SPI_HI3593_PORT_init+0x64>)
    1286:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PC07, PINMUX_PC07C_SERCOM6_PAD3);
    1288:	4908      	ldr	r1, [pc, #32]	; (12ac <SPI_HI3593_PORT_init+0x68>)
    128a:	2047      	movs	r0, #71	; 0x47
    128c:	4b04      	ldr	r3, [pc, #16]	; (12a0 <SPI_HI3593_PORT_init+0x5c>)
    128e:	4798      	blx	r3
}
    1290:	bf00      	nop
    1292:	bd80      	pop	{r7, pc}
    1294:	00000cad 	.word	0x00000cad
    1298:	00000c75 	.word	0x00000c75
    129c:	00440002 	.word	0x00440002
    12a0:	00000c55 	.word	0x00000c55
    12a4:	00450002 	.word	0x00450002
    12a8:	00000c21 	.word	0x00000c21
    12ac:	00470002 	.word	0x00470002

000012b0 <SPI_HI3593_CLOCK_init>:

void SPI_HI3593_CLOCK_init(void)
{
    12b0:	b580      	push	{r7, lr}
    12b2:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM6_GCLK_ID_CORE, CONF_GCLK_SERCOM6_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    12b4:	2242      	movs	r2, #66	; 0x42
    12b6:	2124      	movs	r1, #36	; 0x24
    12b8:	4806      	ldr	r0, [pc, #24]	; (12d4 <SPI_HI3593_CLOCK_init+0x24>)
    12ba:	4b07      	ldr	r3, [pc, #28]	; (12d8 <SPI_HI3593_CLOCK_init+0x28>)
    12bc:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM6_GCLK_ID_SLOW, CONF_GCLK_SERCOM6_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    12be:	224a      	movs	r2, #74	; 0x4a
    12c0:	2103      	movs	r1, #3
    12c2:	4804      	ldr	r0, [pc, #16]	; (12d4 <SPI_HI3593_CLOCK_init+0x24>)
    12c4:	4b04      	ldr	r3, [pc, #16]	; (12d8 <SPI_HI3593_CLOCK_init+0x28>)
    12c6:	4798      	blx	r3

	hri_mclk_set_APBDMASK_SERCOM6_bit(MCLK);
    12c8:	4804      	ldr	r0, [pc, #16]	; (12dc <SPI_HI3593_CLOCK_init+0x2c>)
    12ca:	4b05      	ldr	r3, [pc, #20]	; (12e0 <SPI_HI3593_CLOCK_init+0x30>)
    12cc:	4798      	blx	r3
}
    12ce:	bf00      	nop
    12d0:	bd80      	pop	{r7, pc}
    12d2:	bf00      	nop
    12d4:	40001c00 	.word	0x40001c00
    12d8:	00000401 	.word	0x00000401
    12dc:	40000800 	.word	0x40000800
    12e0:	000006c7 	.word	0x000006c7

000012e4 <SPI_HI3593_init>:

void SPI_HI3593_init(void)
{
    12e4:	b580      	push	{r7, lr}
    12e6:	af00      	add	r7, sp, #0
	SPI_HI3593_CLOCK_init();
    12e8:	4b04      	ldr	r3, [pc, #16]	; (12fc <SPI_HI3593_init+0x18>)
    12ea:	4798      	blx	r3
	spi_m_sync_init(&SPI_HI3593, SERCOM6);
    12ec:	4904      	ldr	r1, [pc, #16]	; (1300 <SPI_HI3593_init+0x1c>)
    12ee:	4805      	ldr	r0, [pc, #20]	; (1304 <SPI_HI3593_init+0x20>)
    12f0:	4b05      	ldr	r3, [pc, #20]	; (1308 <SPI_HI3593_init+0x24>)
    12f2:	4798      	blx	r3
	SPI_HI3593_PORT_init();
    12f4:	4b05      	ldr	r3, [pc, #20]	; (130c <SPI_HI3593_init+0x28>)
    12f6:	4798      	blx	r3
}
    12f8:	bf00      	nop
    12fa:	bd80      	pop	{r7, pc}
    12fc:	000012b1 	.word	0x000012b1
    1300:	43000800 	.word	0x43000800
    1304:	20001b30 	.word	0x20001b30
    1308:	0000211d 	.word	0x0000211d
    130c:	00001245 	.word	0x00001245

00001310 <I2C_FANS_PORT_init>:

void I2C_FANS_PORT_init(void)
{
    1310:	b580      	push	{r7, lr}
    1312:	af00      	add	r7, sp, #0

	gpio_set_pin_pull_mode(PD08,
    1314:	2100      	movs	r1, #0
    1316:	2068      	movs	r0, #104	; 0x68
    1318:	4b07      	ldr	r3, [pc, #28]	; (1338 <I2C_FANS_PORT_init+0x28>)
    131a:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PD08, PINMUX_PD08C_SERCOM7_PAD0);
    131c:	4907      	ldr	r1, [pc, #28]	; (133c <I2C_FANS_PORT_init+0x2c>)
    131e:	2068      	movs	r0, #104	; 0x68
    1320:	4b07      	ldr	r3, [pc, #28]	; (1340 <I2C_FANS_PORT_init+0x30>)
    1322:	4798      	blx	r3

	gpio_set_pin_pull_mode(PD09,
    1324:	2100      	movs	r1, #0
    1326:	2069      	movs	r0, #105	; 0x69
    1328:	4b03      	ldr	r3, [pc, #12]	; (1338 <I2C_FANS_PORT_init+0x28>)
    132a:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PD09, PINMUX_PD09C_SERCOM7_PAD1);
    132c:	4905      	ldr	r1, [pc, #20]	; (1344 <I2C_FANS_PORT_init+0x34>)
    132e:	2069      	movs	r0, #105	; 0x69
    1330:	4b03      	ldr	r3, [pc, #12]	; (1340 <I2C_FANS_PORT_init+0x30>)
    1332:	4798      	blx	r3
}
    1334:	bf00      	nop
    1336:	bd80      	pop	{r7, pc}
    1338:	00000c21 	.word	0x00000c21
    133c:	00680002 	.word	0x00680002
    1340:	00000c55 	.word	0x00000c55
    1344:	00690002 	.word	0x00690002

00001348 <I2C_FANS_CLOCK_init>:

void I2C_FANS_CLOCK_init(void)
{
    1348:	b580      	push	{r7, lr}
    134a:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM7_GCLK_ID_CORE, CONF_GCLK_SERCOM7_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    134c:	2244      	movs	r2, #68	; 0x44
    134e:	2125      	movs	r1, #37	; 0x25
    1350:	4806      	ldr	r0, [pc, #24]	; (136c <I2C_FANS_CLOCK_init+0x24>)
    1352:	4b07      	ldr	r3, [pc, #28]	; (1370 <I2C_FANS_CLOCK_init+0x28>)
    1354:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM7_GCLK_ID_SLOW, CONF_GCLK_SERCOM7_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1356:	224a      	movs	r2, #74	; 0x4a
    1358:	2103      	movs	r1, #3
    135a:	4804      	ldr	r0, [pc, #16]	; (136c <I2C_FANS_CLOCK_init+0x24>)
    135c:	4b04      	ldr	r3, [pc, #16]	; (1370 <I2C_FANS_CLOCK_init+0x28>)
    135e:	4798      	blx	r3

	hri_mclk_set_APBDMASK_SERCOM7_bit(MCLK);
    1360:	4804      	ldr	r0, [pc, #16]	; (1374 <I2C_FANS_CLOCK_init+0x2c>)
    1362:	4b05      	ldr	r3, [pc, #20]	; (1378 <I2C_FANS_CLOCK_init+0x30>)
    1364:	4798      	blx	r3
}
    1366:	bf00      	nop
    1368:	bd80      	pop	{r7, pc}
    136a:	bf00      	nop
    136c:	40001c00 	.word	0x40001c00
    1370:	00000401 	.word	0x00000401
    1374:	40000800 	.word	0x40000800
    1378:	000006e7 	.word	0x000006e7

0000137c <I2C_FANS_init>:

void I2C_FANS_init(void)
{
    137c:	b580      	push	{r7, lr}
    137e:	af00      	add	r7, sp, #0
	I2C_FANS_CLOCK_init();
    1380:	4b04      	ldr	r3, [pc, #16]	; (1394 <I2C_FANS_init+0x18>)
    1382:	4798      	blx	r3
	i2c_m_sync_init(&I2C_FANS, SERCOM7);
    1384:	4904      	ldr	r1, [pc, #16]	; (1398 <I2C_FANS_init+0x1c>)
    1386:	4805      	ldr	r0, [pc, #20]	; (139c <I2C_FANS_init+0x20>)
    1388:	4b05      	ldr	r3, [pc, #20]	; (13a0 <I2C_FANS_init+0x24>)
    138a:	4798      	blx	r3
	I2C_FANS_PORT_init();
    138c:	4b05      	ldr	r3, [pc, #20]	; (13a4 <I2C_FANS_init+0x28>)
    138e:	4798      	blx	r3
}
    1390:	bf00      	nop
    1392:	bd80      	pop	{r7, pc}
    1394:	00001349 	.word	0x00001349
    1398:	43000c00 	.word	0x43000c00
    139c:	20001b60 	.word	0x20001b60
    13a0:	00001f01 	.word	0x00001f01
    13a4:	00001311 	.word	0x00001311

000013a8 <TIMER_USB_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_USB_init(void)
{
    13a8:	b580      	push	{r7, lr}
    13aa:	af00      	add	r7, sp, #0
	hri_mclk_set_APBAMASK_TC0_bit(MCLK);
    13ac:	4808      	ldr	r0, [pc, #32]	; (13d0 <TIMER_USB_init+0x28>)
    13ae:	4b09      	ldr	r3, [pc, #36]	; (13d4 <TIMER_USB_init+0x2c>)
    13b0:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC0_GCLK_ID, CONF_GCLK_TC0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    13b2:	2243      	movs	r2, #67	; 0x43
    13b4:	2109      	movs	r1, #9
    13b6:	4808      	ldr	r0, [pc, #32]	; (13d8 <TIMER_USB_init+0x30>)
    13b8:	4b08      	ldr	r3, [pc, #32]	; (13dc <TIMER_USB_init+0x34>)
    13ba:	4798      	blx	r3

	timer_init(&TIMER_USB, TC0, _tc_get_timer());
    13bc:	4b08      	ldr	r3, [pc, #32]	; (13e0 <TIMER_USB_init+0x38>)
    13be:	4798      	blx	r3
    13c0:	4603      	mov	r3, r0
    13c2:	461a      	mov	r2, r3
    13c4:	4907      	ldr	r1, [pc, #28]	; (13e4 <TIMER_USB_init+0x3c>)
    13c6:	4808      	ldr	r0, [pc, #32]	; (13e8 <TIMER_USB_init+0x40>)
    13c8:	4b08      	ldr	r3, [pc, #32]	; (13ec <TIMER_USB_init+0x44>)
    13ca:	4798      	blx	r3
}
    13cc:	bf00      	nop
    13ce:	bd80      	pop	{r7, pc}
    13d0:	40000800 	.word	0x40000800
    13d4:	00000527 	.word	0x00000527
    13d8:	40001c00 	.word	0x40001c00
    13dc:	00000401 	.word	0x00000401
    13e0:	00007b41 	.word	0x00007b41
    13e4:	40003800 	.word	0x40003800
    13e8:	20001ca8 	.word	0x20001ca8
    13ec:	000022ed 	.word	0x000022ed

000013f0 <TIMER_ARINC_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_ARINC_init(void)
{
    13f0:	b580      	push	{r7, lr}
    13f2:	af00      	add	r7, sp, #0
	hri_mclk_set_APBBMASK_TC2_bit(MCLK);
    13f4:	4808      	ldr	r0, [pc, #32]	; (1418 <TIMER_ARINC_init+0x28>)
    13f6:	4b09      	ldr	r3, [pc, #36]	; (141c <TIMER_ARINC_init+0x2c>)
    13f8:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC2_GCLK_ID, CONF_GCLK_TC2_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    13fa:	2244      	movs	r2, #68	; 0x44
    13fc:	211a      	movs	r1, #26
    13fe:	4808      	ldr	r0, [pc, #32]	; (1420 <TIMER_ARINC_init+0x30>)
    1400:	4b08      	ldr	r3, [pc, #32]	; (1424 <TIMER_ARINC_init+0x34>)
    1402:	4798      	blx	r3

	timer_init(&TIMER_ARINC, TC2, _tc_get_timer());
    1404:	4b08      	ldr	r3, [pc, #32]	; (1428 <TIMER_ARINC_init+0x38>)
    1406:	4798      	blx	r3
    1408:	4603      	mov	r3, r0
    140a:	461a      	mov	r2, r3
    140c:	4907      	ldr	r1, [pc, #28]	; (142c <TIMER_ARINC_init+0x3c>)
    140e:	4808      	ldr	r0, [pc, #32]	; (1430 <TIMER_ARINC_init+0x40>)
    1410:	4b08      	ldr	r3, [pc, #32]	; (1434 <TIMER_ARINC_init+0x44>)
    1412:	4798      	blx	r3
}
    1414:	bf00      	nop
    1416:	bd80      	pop	{r7, pc}
    1418:	40000800 	.word	0x40000800
    141c:	000005e7 	.word	0x000005e7
    1420:	40001c00 	.word	0x40001c00
    1424:	00000401 	.word	0x00000401
    1428:	00007b41 	.word	0x00007b41
    142c:	4101a000 	.word	0x4101a000
    1430:	20001c88 	.word	0x20001c88
    1434:	000022ed 	.word	0x000022ed

00001438 <TIMER_MAINTENANCE_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_MAINTENANCE_init(void)
{
    1438:	b580      	push	{r7, lr}
    143a:	af00      	add	r7, sp, #0
	hri_mclk_set_APBCMASK_TC4_bit(MCLK);
    143c:	4808      	ldr	r0, [pc, #32]	; (1460 <TIMER_MAINTENANCE_init+0x28>)
    143e:	4b09      	ldr	r3, [pc, #36]	; (1464 <TIMER_MAINTENANCE_init+0x2c>)
    1440:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC4_GCLK_ID, CONF_GCLK_TC4_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1442:	2246      	movs	r2, #70	; 0x46
    1444:	211e      	movs	r1, #30
    1446:	4808      	ldr	r0, [pc, #32]	; (1468 <TIMER_MAINTENANCE_init+0x30>)
    1448:	4b08      	ldr	r3, [pc, #32]	; (146c <TIMER_MAINTENANCE_init+0x34>)
    144a:	4798      	blx	r3

	timer_init(&TIMER_MAINTENANCE, TC4, _tc_get_timer());
    144c:	4b08      	ldr	r3, [pc, #32]	; (1470 <TIMER_MAINTENANCE_init+0x38>)
    144e:	4798      	blx	r3
    1450:	4603      	mov	r3, r0
    1452:	461a      	mov	r2, r3
    1454:	4907      	ldr	r1, [pc, #28]	; (1474 <TIMER_MAINTENANCE_init+0x3c>)
    1456:	4808      	ldr	r0, [pc, #32]	; (1478 <TIMER_MAINTENANCE_init+0x40>)
    1458:	4b08      	ldr	r3, [pc, #32]	; (147c <TIMER_MAINTENANCE_init+0x44>)
    145a:	4798      	blx	r3
}
    145c:	bf00      	nop
    145e:	bd80      	pop	{r7, pc}
    1460:	40000800 	.word	0x40000800
    1464:	00000627 	.word	0x00000627
    1468:	40001c00 	.word	0x40001c00
    146c:	00000401 	.word	0x00000401
    1470:	00007b41 	.word	0x00007b41
    1474:	42001400 	.word	0x42001400
    1478:	20001b80 	.word	0x20001b80
    147c:	000022ed 	.word	0x000022ed

00001480 <TIMER_INTERFACE_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_INTERFACE_init(void)
{
    1480:	b580      	push	{r7, lr}
    1482:	af00      	add	r7, sp, #0
	hri_mclk_set_APBCMASK_TC5_bit(MCLK);
    1484:	4808      	ldr	r0, [pc, #32]	; (14a8 <TIMER_INTERFACE_init+0x28>)
    1486:	4b09      	ldr	r3, [pc, #36]	; (14ac <TIMER_INTERFACE_init+0x2c>)
    1488:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC5_GCLK_ID, CONF_GCLK_TC5_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    148a:	2246      	movs	r2, #70	; 0x46
    148c:	211e      	movs	r1, #30
    148e:	4808      	ldr	r0, [pc, #32]	; (14b0 <TIMER_INTERFACE_init+0x30>)
    1490:	4b08      	ldr	r3, [pc, #32]	; (14b4 <TIMER_INTERFACE_init+0x34>)
    1492:	4798      	blx	r3

	timer_init(&TIMER_INTERFACE, TC5, _tc_get_timer());
    1494:	4b08      	ldr	r3, [pc, #32]	; (14b8 <TIMER_INTERFACE_init+0x38>)
    1496:	4798      	blx	r3
    1498:	4603      	mov	r3, r0
    149a:	461a      	mov	r2, r3
    149c:	4907      	ldr	r1, [pc, #28]	; (14bc <TIMER_INTERFACE_init+0x3c>)
    149e:	4808      	ldr	r0, [pc, #32]	; (14c0 <TIMER_INTERFACE_init+0x40>)
    14a0:	4b08      	ldr	r3, [pc, #32]	; (14c4 <TIMER_INTERFACE_init+0x44>)
    14a2:	4798      	blx	r3
}
    14a4:	bf00      	nop
    14a6:	bd80      	pop	{r7, pc}
    14a8:	40000800 	.word	0x40000800
    14ac:	00000647 	.word	0x00000647
    14b0:	40001c00 	.word	0x40001c00
    14b4:	00000401 	.word	0x00000401
    14b8:	00007b41 	.word	0x00007b41
    14bc:	42001800 	.word	0x42001800
    14c0:	20001bc4 	.word	0x20001bc4
    14c4:	000022ed 	.word	0x000022ed

000014c8 <TIMER_EVENT_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_EVENT_init(void)
{
    14c8:	b580      	push	{r7, lr}
    14ca:	af00      	add	r7, sp, #0
	hri_mclk_set_APBDMASK_TC6_bit(MCLK);
    14cc:	4808      	ldr	r0, [pc, #32]	; (14f0 <TIMER_EVENT_init+0x28>)
    14ce:	4b09      	ldr	r3, [pc, #36]	; (14f4 <TIMER_EVENT_init+0x2c>)
    14d0:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC6_GCLK_ID, CONF_GCLK_TC6_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    14d2:	2246      	movs	r2, #70	; 0x46
    14d4:	2127      	movs	r1, #39	; 0x27
    14d6:	4808      	ldr	r0, [pc, #32]	; (14f8 <TIMER_EVENT_init+0x30>)
    14d8:	4b08      	ldr	r3, [pc, #32]	; (14fc <TIMER_EVENT_init+0x34>)
    14da:	4798      	blx	r3

	timer_init(&TIMER_EVENT, TC6, _tc_get_timer());
    14dc:	4b08      	ldr	r3, [pc, #32]	; (1500 <TIMER_EVENT_init+0x38>)
    14de:	4798      	blx	r3
    14e0:	4603      	mov	r3, r0
    14e2:	461a      	mov	r2, r3
    14e4:	4907      	ldr	r1, [pc, #28]	; (1504 <TIMER_EVENT_init+0x3c>)
    14e6:	4808      	ldr	r0, [pc, #32]	; (1508 <TIMER_EVENT_init+0x40>)
    14e8:	4b08      	ldr	r3, [pc, #32]	; (150c <TIMER_EVENT_init+0x44>)
    14ea:	4798      	blx	r3
}
    14ec:	bf00      	nop
    14ee:	bd80      	pop	{r7, pc}
    14f0:	40000800 	.word	0x40000800
    14f4:	00000707 	.word	0x00000707
    14f8:	40001c00 	.word	0x40001c00
    14fc:	00000401 	.word	0x00000401
    1500:	00007b41 	.word	0x00007b41
    1504:	43001400 	.word	0x43001400
    1508:	20001ba4 	.word	0x20001ba4
    150c:	000022ed 	.word	0x000022ed

00001510 <LIVE_PULSE_PORT_init>:

void LIVE_PULSE_PORT_init(void)
{
    1510:	b480      	push	{r7}
    1512:	af00      	add	r7, sp, #0
}
    1514:	bf00      	nop
    1516:	46bd      	mov	sp, r7
    1518:	f85d 7b04 	ldr.w	r7, [sp], #4
    151c:	4770      	bx	lr
	...

00001520 <LIVE_PULSE_CLOCK_init>:

void LIVE_PULSE_CLOCK_init(void)
{
    1520:	b580      	push	{r7, lr}
    1522:	af00      	add	r7, sp, #0

	hri_mclk_set_APBDMASK_TC7_bit(MCLK);
    1524:	4804      	ldr	r0, [pc, #16]	; (1538 <LIVE_PULSE_CLOCK_init+0x18>)
    1526:	4b05      	ldr	r3, [pc, #20]	; (153c <LIVE_PULSE_CLOCK_init+0x1c>)
    1528:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC7_GCLK_ID, CONF_GCLK_TC7_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    152a:	2240      	movs	r2, #64	; 0x40
    152c:	2127      	movs	r1, #39	; 0x27
    152e:	4804      	ldr	r0, [pc, #16]	; (1540 <LIVE_PULSE_CLOCK_init+0x20>)
    1530:	4b04      	ldr	r3, [pc, #16]	; (1544 <LIVE_PULSE_CLOCK_init+0x24>)
    1532:	4798      	blx	r3
}
    1534:	bf00      	nop
    1536:	bd80      	pop	{r7, pc}
    1538:	40000800 	.word	0x40000800
    153c:	00000727 	.word	0x00000727
    1540:	40001c00 	.word	0x40001c00
    1544:	00000401 	.word	0x00000401

00001548 <LIVE_PULSE_init>:

void LIVE_PULSE_init(void)
{
    1548:	b580      	push	{r7, lr}
    154a:	af00      	add	r7, sp, #0
	LIVE_PULSE_CLOCK_init();
    154c:	4b06      	ldr	r3, [pc, #24]	; (1568 <LIVE_PULSE_init+0x20>)
    154e:	4798      	blx	r3
	LIVE_PULSE_PORT_init();
    1550:	4b06      	ldr	r3, [pc, #24]	; (156c <LIVE_PULSE_init+0x24>)
    1552:	4798      	blx	r3
	pwm_init(&LIVE_PULSE, TC7, _tc_get_pwm());
    1554:	4b06      	ldr	r3, [pc, #24]	; (1570 <LIVE_PULSE_init+0x28>)
    1556:	4798      	blx	r3
    1558:	4603      	mov	r3, r0
    155a:	461a      	mov	r2, r3
    155c:	4905      	ldr	r1, [pc, #20]	; (1574 <LIVE_PULSE_init+0x2c>)
    155e:	4806      	ldr	r0, [pc, #24]	; (1578 <LIVE_PULSE_init+0x30>)
    1560:	4b06      	ldr	r3, [pc, #24]	; (157c <LIVE_PULSE_init+0x34>)
    1562:	4798      	blx	r3
}
    1564:	bf00      	nop
    1566:	bd80      	pop	{r7, pc}
    1568:	00001521 	.word	0x00001521
    156c:	00001511 	.word	0x00001511
    1570:	00007b55 	.word	0x00007b55
    1574:	43001800 	.word	0x43001800
    1578:	20001c04 	.word	0x20001c04
    157c:	00001f61 	.word	0x00001f61

00001580 <TIMER_HVAC_CLOCK_init>:

void TIMER_HVAC_CLOCK_init(void)
{
    1580:	b580      	push	{r7, lr}
    1582:	af00      	add	r7, sp, #0
	hri_mclk_set_APBBMASK_TCC0_bit(MCLK);
    1584:	4804      	ldr	r0, [pc, #16]	; (1598 <TIMER_HVAC_CLOCK_init+0x18>)
    1586:	4b05      	ldr	r3, [pc, #20]	; (159c <TIMER_HVAC_CLOCK_init+0x1c>)
    1588:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TCC0_GCLK_ID, CONF_GCLK_TCC0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    158a:	2244      	movs	r2, #68	; 0x44
    158c:	2119      	movs	r1, #25
    158e:	4804      	ldr	r0, [pc, #16]	; (15a0 <TIMER_HVAC_CLOCK_init+0x20>)
    1590:	4b04      	ldr	r3, [pc, #16]	; (15a4 <TIMER_HVAC_CLOCK_init+0x24>)
    1592:	4798      	blx	r3
}
    1594:	bf00      	nop
    1596:	bd80      	pop	{r7, pc}
    1598:	40000800 	.word	0x40000800
    159c:	000005a7 	.word	0x000005a7
    15a0:	40001c00 	.word	0x40001c00
    15a4:	00000401 	.word	0x00000401

000015a8 <TIMER_HVAC_init>:

void TIMER_HVAC_init(void)
{
    15a8:	b580      	push	{r7, lr}
    15aa:	af00      	add	r7, sp, #0
	TIMER_HVAC_CLOCK_init();
    15ac:	4b05      	ldr	r3, [pc, #20]	; (15c4 <TIMER_HVAC_init+0x1c>)
    15ae:	4798      	blx	r3
	timer_init(&TIMER_HVAC, TCC0, _tcc_get_timer());
    15b0:	4b05      	ldr	r3, [pc, #20]	; (15c8 <TIMER_HVAC_init+0x20>)
    15b2:	4798      	blx	r3
    15b4:	4603      	mov	r3, r0
    15b6:	461a      	mov	r2, r3
    15b8:	4904      	ldr	r1, [pc, #16]	; (15cc <TIMER_HVAC_init+0x24>)
    15ba:	4805      	ldr	r0, [pc, #20]	; (15d0 <TIMER_HVAC_init+0x28>)
    15bc:	4b05      	ldr	r3, [pc, #20]	; (15d4 <TIMER_HVAC_init+0x2c>)
    15be:	4798      	blx	r3
}
    15c0:	bf00      	nop
    15c2:	bd80      	pop	{r7, pc}
    15c4:	00001581 	.word	0x00001581
    15c8:	00006f25 	.word	0x00006f25
    15cc:	41016000 	.word	0x41016000
    15d0:	20001cc8 	.word	0x20001cc8
    15d4:	000022ed 	.word	0x000022ed

000015d8 <TIMER_TEMPERATURES_CLOCK_init>:

void TIMER_TEMPERATURES_CLOCK_init(void)
{
    15d8:	b580      	push	{r7, lr}
    15da:	af00      	add	r7, sp, #0
	hri_mclk_set_APBBMASK_TCC1_bit(MCLK);
    15dc:	4804      	ldr	r0, [pc, #16]	; (15f0 <TIMER_TEMPERATURES_CLOCK_init+0x18>)
    15de:	4b05      	ldr	r3, [pc, #20]	; (15f4 <TIMER_TEMPERATURES_CLOCK_init+0x1c>)
    15e0:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TCC1_GCLK_ID, CONF_GCLK_TCC1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    15e2:	2244      	movs	r2, #68	; 0x44
    15e4:	2119      	movs	r1, #25
    15e6:	4804      	ldr	r0, [pc, #16]	; (15f8 <TIMER_TEMPERATURES_CLOCK_init+0x20>)
    15e8:	4b04      	ldr	r3, [pc, #16]	; (15fc <TIMER_TEMPERATURES_CLOCK_init+0x24>)
    15ea:	4798      	blx	r3
}
    15ec:	bf00      	nop
    15ee:	bd80      	pop	{r7, pc}
    15f0:	40000800 	.word	0x40000800
    15f4:	000005c7 	.word	0x000005c7
    15f8:	40001c00 	.word	0x40001c00
    15fc:	00000401 	.word	0x00000401

00001600 <TIMER_TEMPERATURES_init>:

void TIMER_TEMPERATURES_init(void)
{
    1600:	b580      	push	{r7, lr}
    1602:	af00      	add	r7, sp, #0
	TIMER_TEMPERATURES_CLOCK_init();
    1604:	4b05      	ldr	r3, [pc, #20]	; (161c <TIMER_TEMPERATURES_init+0x1c>)
    1606:	4798      	blx	r3
	timer_init(&TIMER_TEMPERATURES, TCC1, _tcc_get_timer());
    1608:	4b05      	ldr	r3, [pc, #20]	; (1620 <TIMER_TEMPERATURES_init+0x20>)
    160a:	4798      	blx	r3
    160c:	4603      	mov	r3, r0
    160e:	461a      	mov	r2, r3
    1610:	4904      	ldr	r1, [pc, #16]	; (1624 <TIMER_TEMPERATURES_init+0x24>)
    1612:	4805      	ldr	r0, [pc, #20]	; (1628 <TIMER_TEMPERATURES_init+0x28>)
    1614:	4b05      	ldr	r3, [pc, #20]	; (162c <TIMER_TEMPERATURES_init+0x2c>)
    1616:	4798      	blx	r3
}
    1618:	bf00      	nop
    161a:	bd80      	pop	{r7, pc}
    161c:	000015d9 	.word	0x000015d9
    1620:	00006f25 	.word	0x00006f25
    1624:	41018000 	.word	0x41018000
    1628:	20001b10 	.word	0x20001b10
    162c:	000022ed 	.word	0x000022ed

00001630 <TIMER_CCU_CLOCK_init>:

void TIMER_CCU_CLOCK_init(void)
{
    1630:	b580      	push	{r7, lr}
    1632:	af00      	add	r7, sp, #0
	hri_mclk_set_APBCMASK_TCC2_bit(MCLK);
    1634:	4804      	ldr	r0, [pc, #16]	; (1648 <TIMER_CCU_CLOCK_init+0x18>)
    1636:	4b05      	ldr	r3, [pc, #20]	; (164c <TIMER_CCU_CLOCK_init+0x1c>)
    1638:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TCC2_GCLK_ID, CONF_GCLK_TCC2_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    163a:	2240      	movs	r2, #64	; 0x40
    163c:	211d      	movs	r1, #29
    163e:	4804      	ldr	r0, [pc, #16]	; (1650 <TIMER_CCU_CLOCK_init+0x20>)
    1640:	4b04      	ldr	r3, [pc, #16]	; (1654 <TIMER_CCU_CLOCK_init+0x24>)
    1642:	4798      	blx	r3
}
    1644:	bf00      	nop
    1646:	bd80      	pop	{r7, pc}
    1648:	40000800 	.word	0x40000800
    164c:	00000607 	.word	0x00000607
    1650:	40001c00 	.word	0x40001c00
    1654:	00000401 	.word	0x00000401

00001658 <TIMER_CCU_init>:

void TIMER_CCU_init(void)
{
    1658:	b580      	push	{r7, lr}
    165a:	af00      	add	r7, sp, #0
	TIMER_CCU_CLOCK_init();
    165c:	4b05      	ldr	r3, [pc, #20]	; (1674 <TIMER_CCU_init+0x1c>)
    165e:	4798      	blx	r3
	timer_init(&TIMER_CCU, TCC2, _tcc_get_timer());
    1660:	4b05      	ldr	r3, [pc, #20]	; (1678 <TIMER_CCU_init+0x20>)
    1662:	4798      	blx	r3
    1664:	4603      	mov	r3, r0
    1666:	461a      	mov	r2, r3
    1668:	4904      	ldr	r1, [pc, #16]	; (167c <TIMER_CCU_init+0x24>)
    166a:	4805      	ldr	r0, [pc, #20]	; (1680 <TIMER_CCU_init+0x28>)
    166c:	4b05      	ldr	r3, [pc, #20]	; (1684 <TIMER_CCU_init+0x2c>)
    166e:	4798      	blx	r3
}
    1670:	bf00      	nop
    1672:	bd80      	pop	{r7, pc}
    1674:	00001631 	.word	0x00001631
    1678:	00006f25 	.word	0x00006f25
    167c:	42000c00 	.word	0x42000c00
    1680:	20001c20 	.word	0x20001c20
    1684:	000022ed 	.word	0x000022ed

00001688 <CDCUSB_PORT_init>:

void CDCUSB_PORT_init(void)
{
    1688:	b580      	push	{r7, lr}
    168a:	af00      	add	r7, sp, #0

	gpio_set_pin_direction(PA24,
    168c:	2102      	movs	r1, #2
    168e:	2018      	movs	r0, #24
    1690:	4b0f      	ldr	r3, [pc, #60]	; (16d0 <CDCUSB_PORT_init+0x48>)
    1692:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(PA24,
    1694:	2100      	movs	r1, #0
    1696:	2018      	movs	r0, #24
    1698:	4b0e      	ldr	r3, [pc, #56]	; (16d4 <CDCUSB_PORT_init+0x4c>)
    169a:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(PA24,
    169c:	2100      	movs	r1, #0
    169e:	2018      	movs	r0, #24
    16a0:	4b0d      	ldr	r3, [pc, #52]	; (16d8 <CDCUSB_PORT_init+0x50>)
    16a2:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA24,
    16a4:	490d      	ldr	r1, [pc, #52]	; (16dc <CDCUSB_PORT_init+0x54>)
    16a6:	2018      	movs	r0, #24
    16a8:	4b0d      	ldr	r3, [pc, #52]	; (16e0 <CDCUSB_PORT_init+0x58>)
    16aa:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA24H_USB_DM);

	gpio_set_pin_direction(PA25,
    16ac:	2102      	movs	r1, #2
    16ae:	2019      	movs	r0, #25
    16b0:	4b07      	ldr	r3, [pc, #28]	; (16d0 <CDCUSB_PORT_init+0x48>)
    16b2:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(PA25,
    16b4:	2100      	movs	r1, #0
    16b6:	2019      	movs	r0, #25
    16b8:	4b06      	ldr	r3, [pc, #24]	; (16d4 <CDCUSB_PORT_init+0x4c>)
    16ba:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(PA25,
    16bc:	2100      	movs	r1, #0
    16be:	2019      	movs	r0, #25
    16c0:	4b05      	ldr	r3, [pc, #20]	; (16d8 <CDCUSB_PORT_init+0x50>)
    16c2:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA25,
    16c4:	4907      	ldr	r1, [pc, #28]	; (16e4 <CDCUSB_PORT_init+0x5c>)
    16c6:	2019      	movs	r0, #25
    16c8:	4b05      	ldr	r3, [pc, #20]	; (16e0 <CDCUSB_PORT_init+0x58>)
    16ca:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_K"> K
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA25H_USB_DP);
}
    16cc:	bf00      	nop
    16ce:	bd80      	pop	{r7, pc}
    16d0:	00000c75 	.word	0x00000c75
    16d4:	00000cad 	.word	0x00000cad
    16d8:	00000c21 	.word	0x00000c21
    16dc:	00180007 	.word	0x00180007
    16e0:	00000c55 	.word	0x00000c55
    16e4:	00190007 	.word	0x00190007

000016e8 <CDCUSB_CLOCK_init>:
#if (CONF_GCLK_USB_FREQUENCY > (48000000 + 48000000 / 400)) || (CONF_GCLK_USB_FREQUENCY < (48000000 - 48000000 / 400))
#warning USB clock should be 48MHz ~ 0.25% clock, check your configuration!
#endif

void CDCUSB_CLOCK_init(void)
{
    16e8:	b580      	push	{r7, lr}
    16ea:	af00      	add	r7, sp, #0

	hri_gclk_write_PCHCTRL_reg(GCLK, USB_GCLK_ID, CONF_GCLK_USB_SRC | GCLK_PCHCTRL_CHEN);
    16ec:	2242      	movs	r2, #66	; 0x42
    16ee:	210a      	movs	r1, #10
    16f0:	4805      	ldr	r0, [pc, #20]	; (1708 <CDCUSB_CLOCK_init+0x20>)
    16f2:	4b06      	ldr	r3, [pc, #24]	; (170c <CDCUSB_CLOCK_init+0x24>)
    16f4:	4798      	blx	r3
	hri_mclk_set_AHBMASK_USB_bit(MCLK);
    16f6:	4806      	ldr	r0, [pc, #24]	; (1710 <CDCUSB_CLOCK_init+0x28>)
    16f8:	4b06      	ldr	r3, [pc, #24]	; (1714 <CDCUSB_CLOCK_init+0x2c>)
    16fa:	4798      	blx	r3
	hri_mclk_set_APBBMASK_USB_bit(MCLK);
    16fc:	4804      	ldr	r0, [pc, #16]	; (1710 <CDCUSB_CLOCK_init+0x28>)
    16fe:	4b06      	ldr	r3, [pc, #24]	; (1718 <CDCUSB_CLOCK_init+0x30>)
    1700:	4798      	blx	r3
}
    1702:	bf00      	nop
    1704:	bd80      	pop	{r7, pc}
    1706:	bf00      	nop
    1708:	40001c00 	.word	0x40001c00
    170c:	00000401 	.word	0x00000401
    1710:	40000800 	.word	0x40000800
    1714:	00000427 	.word	0x00000427
    1718:	00000547 	.word	0x00000547

0000171c <CDCUSB_init>:

void CDCUSB_init(void)
{
    171c:	b580      	push	{r7, lr}
    171e:	af00      	add	r7, sp, #0
	CDCUSB_CLOCK_init();
    1720:	4b03      	ldr	r3, [pc, #12]	; (1730 <CDCUSB_init+0x14>)
    1722:	4798      	blx	r3
	usb_d_init();
    1724:	4b03      	ldr	r3, [pc, #12]	; (1734 <CDCUSB_init+0x18>)
    1726:	4798      	blx	r3
	CDCUSB_PORT_init();
    1728:	4b03      	ldr	r3, [pc, #12]	; (1738 <CDCUSB_init+0x1c>)
    172a:	4798      	blx	r3
}
    172c:	bf00      	nop
    172e:	bd80      	pop	{r7, pc}
    1730:	000016e9 	.word	0x000016e9
    1734:	00002875 	.word	0x00002875
    1738:	00001689 	.word	0x00001689

0000173c <WATCHDOG_CLOCK_init>:

void WATCHDOG_CLOCK_init(void)
{
    173c:	b580      	push	{r7, lr}
    173e:	af00      	add	r7, sp, #0
	hri_mclk_set_APBAMASK_WDT_bit(MCLK);
    1740:	4802      	ldr	r0, [pc, #8]	; (174c <WATCHDOG_CLOCK_init+0x10>)
    1742:	4b03      	ldr	r3, [pc, #12]	; (1750 <WATCHDOG_CLOCK_init+0x14>)
    1744:	4798      	blx	r3
}
    1746:	bf00      	nop
    1748:	bd80      	pop	{r7, pc}
    174a:	bf00      	nop
    174c:	40000800 	.word	0x40000800
    1750:	000004a7 	.word	0x000004a7

00001754 <WATCHDOG_init>:

void WATCHDOG_init(void)
{
    1754:	b580      	push	{r7, lr}
    1756:	af00      	add	r7, sp, #0
	WATCHDOG_CLOCK_init();
    1758:	4b03      	ldr	r3, [pc, #12]	; (1768 <WATCHDOG_init+0x14>)
    175a:	4798      	blx	r3
	wdt_init(&WATCHDOG, WDT);
    175c:	4903      	ldr	r1, [pc, #12]	; (176c <WATCHDOG_init+0x18>)
    175e:	4804      	ldr	r0, [pc, #16]	; (1770 <WATCHDOG_init+0x1c>)
    1760:	4b04      	ldr	r3, [pc, #16]	; (1774 <WATCHDOG_init+0x20>)
    1762:	4798      	blx	r3
}
    1764:	bf00      	nop
    1766:	bd80      	pop	{r7, pc}
    1768:	0000173d 	.word	0x0000173d
    176c:	40002000 	.word	0x40002000
    1770:	20001d08 	.word	0x20001d08
    1774:	00000cf5 	.word	0x00000cf5

00001778 <CAN_CCU_PORT_init>:

void CAN_CCU_PORT_init(void)
{
    1778:	b580      	push	{r7, lr}
    177a:	af00      	add	r7, sp, #0

	gpio_set_pin_function(PB13, PINMUX_PB13H_CAN1_RX);
    177c:	4904      	ldr	r1, [pc, #16]	; (1790 <CAN_CCU_PORT_init+0x18>)
    177e:	202d      	movs	r0, #45	; 0x2d
    1780:	4b04      	ldr	r3, [pc, #16]	; (1794 <CAN_CCU_PORT_init+0x1c>)
    1782:	4798      	blx	r3

	gpio_set_pin_function(PB12, PINMUX_PB12H_CAN1_TX);
    1784:	4904      	ldr	r1, [pc, #16]	; (1798 <CAN_CCU_PORT_init+0x20>)
    1786:	202c      	movs	r0, #44	; 0x2c
    1788:	4b02      	ldr	r3, [pc, #8]	; (1794 <CAN_CCU_PORT_init+0x1c>)
    178a:	4798      	blx	r3
}
    178c:	bf00      	nop
    178e:	bd80      	pop	{r7, pc}
    1790:	002d0007 	.word	0x002d0007
    1794:	00000c55 	.word	0x00000c55
    1798:	002c0007 	.word	0x002c0007

0000179c <CAN_CCU_init>:
 * \brief CAN initialization function
 *
 * Enables CAN peripheral, clocks and initializes CAN driver
 */
void CAN_CCU_init(void)
{
    179c:	b580      	push	{r7, lr}
    179e:	af00      	add	r7, sp, #0
	hri_mclk_set_AHBMASK_CAN1_bit(MCLK);
    17a0:	4807      	ldr	r0, [pc, #28]	; (17c0 <CAN_CCU_init+0x24>)
    17a2:	4b08      	ldr	r3, [pc, #32]	; (17c4 <CAN_CCU_init+0x28>)
    17a4:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, CAN1_GCLK_ID, CONF_GCLK_CAN1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    17a6:	2249      	movs	r2, #73	; 0x49
    17a8:	211c      	movs	r1, #28
    17aa:	4807      	ldr	r0, [pc, #28]	; (17c8 <CAN_CCU_init+0x2c>)
    17ac:	4b07      	ldr	r3, [pc, #28]	; (17cc <CAN_CCU_init+0x30>)
    17ae:	4798      	blx	r3
	can_async_init(&CAN_CCU, CAN1);
    17b0:	4907      	ldr	r1, [pc, #28]	; (17d0 <CAN_CCU_init+0x34>)
    17b2:	4808      	ldr	r0, [pc, #32]	; (17d4 <CAN_CCU_init+0x38>)
    17b4:	4b08      	ldr	r3, [pc, #32]	; (17d8 <CAN_CCU_init+0x3c>)
    17b6:	4798      	blx	r3
	CAN_CCU_PORT_init();
    17b8:	4b08      	ldr	r3, [pc, #32]	; (17dc <CAN_CCU_init+0x40>)
    17ba:	4798      	blx	r3
}
    17bc:	bf00      	nop
    17be:	bd80      	pop	{r7, pc}
    17c0:	40000800 	.word	0x40000800
    17c4:	00000467 	.word	0x00000467
    17c8:	40001c00 	.word	0x40001c00
    17cc:	00000401 	.word	0x00000401
    17d0:	42000400 	.word	0x42000400
    17d4:	20001c60 	.word	0x20001c60
    17d8:	00001a41 	.word	0x00001a41
    17dc:	00001779 	.word	0x00001779

000017e0 <system_init>:

void system_init(void)
{
    17e0:	b580      	push	{r7, lr}
    17e2:	af00      	add	r7, sp, #0
	init_mcu();
    17e4:	4b5f      	ldr	r3, [pc, #380]	; (1964 <system_init+0x184>)
    17e6:	4798      	blx	r3

	// GPIO on PA07

	gpio_set_pin_level(iAlcFwIsAlive,
    17e8:	2100      	movs	r1, #0
    17ea:	2007      	movs	r0, #7
    17ec:	4b5e      	ldr	r3, [pc, #376]	; (1968 <system_init+0x188>)
    17ee:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(iAlcFwIsAlive, GPIO_DIRECTION_OUT);
    17f0:	2102      	movs	r1, #2
    17f2:	2007      	movs	r0, #7
    17f4:	4b5d      	ldr	r3, [pc, #372]	; (196c <system_init+0x18c>)
    17f6:	4798      	blx	r3

	gpio_set_pin_function(iAlcFwIsAlive, GPIO_PIN_FUNCTION_OFF);
    17f8:	f04f 31ff 	mov.w	r1, #4294967295
    17fc:	2007      	movs	r0, #7
    17fe:	4b5c      	ldr	r3, [pc, #368]	; (1970 <system_init+0x190>)
    1800:	4798      	blx	r3

	// GPIO on PA15

	gpio_set_pin_level(CS_FLASH,
    1802:	2101      	movs	r1, #1
    1804:	200f      	movs	r0, #15
    1806:	4b58      	ldr	r3, [pc, #352]	; (1968 <system_init+0x188>)
    1808:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_FLASH, GPIO_DIRECTION_OUT);
    180a:	2102      	movs	r1, #2
    180c:	200f      	movs	r0, #15
    180e:	4b57      	ldr	r3, [pc, #348]	; (196c <system_init+0x18c>)
    1810:	4798      	blx	r3

	gpio_set_pin_function(CS_FLASH, GPIO_PIN_FUNCTION_OFF);
    1812:	f04f 31ff 	mov.w	r1, #4294967295
    1816:	200f      	movs	r0, #15
    1818:	4b55      	ldr	r3, [pc, #340]	; (1970 <system_init+0x190>)
    181a:	4798      	blx	r3

	// GPIO on PA19

	gpio_set_pin_level(CS_FRAM,
    181c:	2101      	movs	r1, #1
    181e:	2013      	movs	r0, #19
    1820:	4b51      	ldr	r3, [pc, #324]	; (1968 <system_init+0x188>)
    1822:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_FRAM, GPIO_DIRECTION_OUT);
    1824:	2102      	movs	r1, #2
    1826:	2013      	movs	r0, #19
    1828:	4b50      	ldr	r3, [pc, #320]	; (196c <system_init+0x18c>)
    182a:	4798      	blx	r3

	gpio_set_pin_function(CS_FRAM, GPIO_PIN_FUNCTION_OFF);
    182c:	f04f 31ff 	mov.w	r1, #4294967295
    1830:	2013      	movs	r0, #19
    1832:	4b4f      	ldr	r3, [pc, #316]	; (1970 <system_init+0x190>)
    1834:	4798      	blx	r3

	// GPIO on PA27

	gpio_set_pin_level(CS_TEMP2,
    1836:	2101      	movs	r1, #1
    1838:	201b      	movs	r0, #27
    183a:	4b4b      	ldr	r3, [pc, #300]	; (1968 <system_init+0x188>)
    183c:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_TEMP2, GPIO_DIRECTION_OUT);
    183e:	2102      	movs	r1, #2
    1840:	201b      	movs	r0, #27
    1842:	4b4a      	ldr	r3, [pc, #296]	; (196c <system_init+0x18c>)
    1844:	4798      	blx	r3

	gpio_set_pin_function(CS_TEMP2, GPIO_PIN_FUNCTION_OFF);
    1846:	f04f 31ff 	mov.w	r1, #4294967295
    184a:	201b      	movs	r0, #27
    184c:	4b48      	ldr	r3, [pc, #288]	; (1970 <system_init+0x190>)
    184e:	4798      	blx	r3

	// GPIO on PB07

	gpio_set_pin_level(CS_TEMP3,
    1850:	2101      	movs	r1, #1
    1852:	2027      	movs	r0, #39	; 0x27
    1854:	4b44      	ldr	r3, [pc, #272]	; (1968 <system_init+0x188>)
    1856:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_TEMP3, GPIO_DIRECTION_OUT);
    1858:	2102      	movs	r1, #2
    185a:	2027      	movs	r0, #39	; 0x27
    185c:	4b43      	ldr	r3, [pc, #268]	; (196c <system_init+0x18c>)
    185e:	4798      	blx	r3

	gpio_set_pin_function(CS_TEMP3, GPIO_PIN_FUNCTION_OFF);
    1860:	f04f 31ff 	mov.w	r1, #4294967295
    1864:	2027      	movs	r0, #39	; 0x27
    1866:	4b42      	ldr	r3, [pc, #264]	; (1970 <system_init+0x190>)
    1868:	4798      	blx	r3

	// GPIO on PB29

	gpio_set_pin_level(CS_TEMP1,
    186a:	2101      	movs	r1, #1
    186c:	203d      	movs	r0, #61	; 0x3d
    186e:	4b3e      	ldr	r3, [pc, #248]	; (1968 <system_init+0x188>)
    1870:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_TEMP1, GPIO_DIRECTION_OUT);
    1872:	2102      	movs	r1, #2
    1874:	203d      	movs	r0, #61	; 0x3d
    1876:	4b3d      	ldr	r3, [pc, #244]	; (196c <system_init+0x18c>)
    1878:	4798      	blx	r3

	gpio_set_pin_function(CS_TEMP1, GPIO_PIN_FUNCTION_OFF);
    187a:	f04f 31ff 	mov.w	r1, #4294967295
    187e:	203d      	movs	r0, #61	; 0x3d
    1880:	4b3b      	ldr	r3, [pc, #236]	; (1970 <system_init+0x190>)
    1882:	4798      	blx	r3

	// GPIO on PB31

	// Set pin direction to input
	gpio_set_pin_direction(SW0, GPIO_DIRECTION_IN);
    1884:	2101      	movs	r1, #1
    1886:	203f      	movs	r0, #63	; 0x3f
    1888:	4b38      	ldr	r3, [pc, #224]	; (196c <system_init+0x18c>)
    188a:	4798      	blx	r3

	gpio_set_pin_pull_mode(SW0,
    188c:	2101      	movs	r1, #1
    188e:	203f      	movs	r0, #63	; 0x3f
    1890:	4b38      	ldr	r3, [pc, #224]	; (1974 <system_init+0x194>)
    1892:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_UP);

	gpio_set_pin_function(SW0, GPIO_PIN_FUNCTION_OFF);
    1894:	f04f 31ff 	mov.w	r1, #4294967295
    1898:	203f      	movs	r0, #63	; 0x3f
    189a:	4b35      	ldr	r3, [pc, #212]	; (1970 <system_init+0x190>)
    189c:	4798      	blx	r3

	// GPIO on PC13

	gpio_set_pin_level(CAN_STDBY,
    189e:	2100      	movs	r1, #0
    18a0:	204d      	movs	r0, #77	; 0x4d
    18a2:	4b31      	ldr	r3, [pc, #196]	; (1968 <system_init+0x188>)
    18a4:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(CAN_STDBY, GPIO_DIRECTION_OUT);
    18a6:	2102      	movs	r1, #2
    18a8:	204d      	movs	r0, #77	; 0x4d
    18aa:	4b30      	ldr	r3, [pc, #192]	; (196c <system_init+0x18c>)
    18ac:	4798      	blx	r3

	gpio_set_pin_function(CAN_STDBY, GPIO_PIN_FUNCTION_OFF);
    18ae:	f04f 31ff 	mov.w	r1, #4294967295
    18b2:	204d      	movs	r0, #77	; 0x4d
    18b4:	4b2e      	ldr	r3, [pc, #184]	; (1970 <system_init+0x190>)
    18b6:	4798      	blx	r3

	// GPIO on PC14

	gpio_set_pin_level(CS_Holt,
    18b8:	2101      	movs	r1, #1
    18ba:	204e      	movs	r0, #78	; 0x4e
    18bc:	4b2a      	ldr	r3, [pc, #168]	; (1968 <system_init+0x188>)
    18be:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_Holt, GPIO_DIRECTION_OUT);
    18c0:	2102      	movs	r1, #2
    18c2:	204e      	movs	r0, #78	; 0x4e
    18c4:	4b29      	ldr	r3, [pc, #164]	; (196c <system_init+0x18c>)
    18c6:	4798      	blx	r3

	gpio_set_pin_function(CS_Holt, GPIO_PIN_FUNCTION_OFF);
    18c8:	f04f 31ff 	mov.w	r1, #4294967295
    18cc:	204e      	movs	r0, #78	; 0x4e
    18ce:	4b28      	ldr	r3, [pc, #160]	; (1970 <system_init+0x190>)
    18d0:	4798      	blx	r3

	// GPIO on PC15

	gpio_set_pin_level(Ethernet_Led,
    18d2:	2100      	movs	r1, #0
    18d4:	204f      	movs	r0, #79	; 0x4f
    18d6:	4b24      	ldr	r3, [pc, #144]	; (1968 <system_init+0x188>)
    18d8:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(Ethernet_Led, GPIO_DIRECTION_OUT);
    18da:	2102      	movs	r1, #2
    18dc:	204f      	movs	r0, #79	; 0x4f
    18de:	4b23      	ldr	r3, [pc, #140]	; (196c <system_init+0x18c>)
    18e0:	4798      	blx	r3

	gpio_set_pin_function(Ethernet_Led, GPIO_PIN_FUNCTION_OFF);
    18e2:	f04f 31ff 	mov.w	r1, #4294967295
    18e6:	204f      	movs	r0, #79	; 0x4f
    18e8:	4b21      	ldr	r3, [pc, #132]	; (1970 <system_init+0x190>)
    18ea:	4798      	blx	r3

	// GPIO on PC18

	gpio_set_pin_level(LED0,
    18ec:	2100      	movs	r1, #0
    18ee:	2052      	movs	r0, #82	; 0x52
    18f0:	4b1d      	ldr	r3, [pc, #116]	; (1968 <system_init+0x188>)
    18f2:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(LED0, GPIO_DIRECTION_OUT);
    18f4:	2102      	movs	r1, #2
    18f6:	2052      	movs	r0, #82	; 0x52
    18f8:	4b1c      	ldr	r3, [pc, #112]	; (196c <system_init+0x18c>)
    18fa:	4798      	blx	r3

	gpio_set_pin_function(LED0, GPIO_PIN_FUNCTION_OFF);
    18fc:	f04f 31ff 	mov.w	r1, #4294967295
    1900:	2052      	movs	r0, #82	; 0x52
    1902:	4b1b      	ldr	r3, [pc, #108]	; (1970 <system_init+0x190>)
    1904:	4798      	blx	r3

	CRC_CALC_init();
    1906:	4b1c      	ldr	r3, [pc, #112]	; (1978 <system_init+0x198>)
    1908:	4798      	blx	r3
	EXTERNAL_IRQ_0_init();
    190a:	4b1c      	ldr	r3, [pc, #112]	; (197c <system_init+0x19c>)
    190c:	4798      	blx	r3

	EVENT_SYSTEM_0_init();
    190e:	4b1c      	ldr	r3, [pc, #112]	; (1980 <system_init+0x1a0>)
    1910:	4798      	blx	r3

	QSPI_N25Q256_init();
    1912:	4b1c      	ldr	r3, [pc, #112]	; (1984 <system_init+0x1a4>)
    1914:	4798      	blx	r3

	DATETIME_CLOCK_init();
    1916:	4b1c      	ldr	r3, [pc, #112]	; (1988 <system_init+0x1a8>)
    1918:	4798      	blx	r3

	I2C_HEATERS_init();
    191a:	4b1c      	ldr	r3, [pc, #112]	; (198c <system_init+0x1ac>)
    191c:	4798      	blx	r3

	SPI_TEMP_init();
    191e:	4b1c      	ldr	r3, [pc, #112]	; (1990 <system_init+0x1b0>)
    1920:	4798      	blx	r3

	I2C_FLAPPER_VALVE_init();
    1922:	4b1c      	ldr	r3, [pc, #112]	; (1994 <system_init+0x1b4>)
    1924:	4798      	blx	r3

	SPI_HI3593_init();
    1926:	4b1c      	ldr	r3, [pc, #112]	; (1998 <system_init+0x1b8>)
    1928:	4798      	blx	r3

	I2C_FANS_init();
    192a:	4b1c      	ldr	r3, [pc, #112]	; (199c <system_init+0x1bc>)
    192c:	4798      	blx	r3

	TIMER_USB_init();
    192e:	4b1c      	ldr	r3, [pc, #112]	; (19a0 <system_init+0x1c0>)
    1930:	4798      	blx	r3
	TIMER_ARINC_init();
    1932:	4b1c      	ldr	r3, [pc, #112]	; (19a4 <system_init+0x1c4>)
    1934:	4798      	blx	r3
	TIMER_MAINTENANCE_init();
    1936:	4b1c      	ldr	r3, [pc, #112]	; (19a8 <system_init+0x1c8>)
    1938:	4798      	blx	r3
	TIMER_INTERFACE_init();
    193a:	4b1c      	ldr	r3, [pc, #112]	; (19ac <system_init+0x1cc>)
    193c:	4798      	blx	r3
	TIMER_EVENT_init();
    193e:	4b1c      	ldr	r3, [pc, #112]	; (19b0 <system_init+0x1d0>)
    1940:	4798      	blx	r3
	LIVE_PULSE_init();
    1942:	4b1c      	ldr	r3, [pc, #112]	; (19b4 <system_init+0x1d4>)
    1944:	4798      	blx	r3

	TIMER_HVAC_init();
    1946:	4b1c      	ldr	r3, [pc, #112]	; (19b8 <system_init+0x1d8>)
    1948:	4798      	blx	r3

	TIMER_TEMPERATURES_init();
    194a:	4b1c      	ldr	r3, [pc, #112]	; (19bc <system_init+0x1dc>)
    194c:	4798      	blx	r3

	TIMER_CCU_init();
    194e:	4b1c      	ldr	r3, [pc, #112]	; (19c0 <system_init+0x1e0>)
    1950:	4798      	blx	r3

	CDCUSB_init();
    1952:	4b1c      	ldr	r3, [pc, #112]	; (19c4 <system_init+0x1e4>)
    1954:	4798      	blx	r3

	WATCHDOG_init();
    1956:	4b1c      	ldr	r3, [pc, #112]	; (19c8 <system_init+0x1e8>)
    1958:	4798      	blx	r3
	CAN_CCU_init();
    195a:	4b1c      	ldr	r3, [pc, #112]	; (19cc <system_init+0x1ec>)
    195c:	4798      	blx	r3
}
    195e:	bf00      	nop
    1960:	bd80      	pop	{r7, pc}
    1962:	bf00      	nop
    1964:	00000ce5 	.word	0x00000ce5
    1968:	00000cad 	.word	0x00000cad
    196c:	00000c75 	.word	0x00000c75
    1970:	00000c55 	.word	0x00000c55
    1974:	00000c21 	.word	0x00000c21
    1978:	00000d45 	.word	0x00000d45
    197c:	00000d71 	.word	0x00000d71
    1980:	00000e99 	.word	0x00000e99
    1984:	00000fe1 	.word	0x00000fe1
    1988:	00001025 	.word	0x00001025
    198c:	000010b5 	.word	0x000010b5
    1990:	00001181 	.word	0x00001181
    1994:	00001219 	.word	0x00001219
    1998:	000012e5 	.word	0x000012e5
    199c:	0000137d 	.word	0x0000137d
    19a0:	000013a9 	.word	0x000013a9
    19a4:	000013f1 	.word	0x000013f1
    19a8:	00001439 	.word	0x00001439
    19ac:	00001481 	.word	0x00001481
    19b0:	000014c9 	.word	0x000014c9
    19b4:	00001549 	.word	0x00001549
    19b8:	000015a9 	.word	0x000015a9
    19bc:	00001601 	.word	0x00001601
    19c0:	00001659 	.word	0x00001659
    19c4:	0000171d 	.word	0x0000171d
    19c8:	00001755 	.word	0x00001755
    19cc:	0000179d 	.word	0x0000179d

000019d0 <calendar_init>:
}

/** \brief Initialize Calendar
 */
int32_t calendar_init(struct calendar_descriptor *const calendar, const void *hw)
{
    19d0:	b580      	push	{r7, lr}
    19d2:	b084      	sub	sp, #16
    19d4:	af00      	add	r7, sp, #0
    19d6:	6078      	str	r0, [r7, #4]
    19d8:	6039      	str	r1, [r7, #0]
	int32_t ret = 0;
    19da:	2300      	movs	r3, #0
    19dc:	60fb      	str	r3, [r7, #12]

	/* Sanity check arguments */
	ASSERT(calendar);
    19de:	687b      	ldr	r3, [r7, #4]
    19e0:	2b00      	cmp	r3, #0
    19e2:	bf14      	ite	ne
    19e4:	2301      	movne	r3, #1
    19e6:	2300      	moveq	r3, #0
    19e8:	b2db      	uxtb	r3, r3
    19ea:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
    19ee:	4911      	ldr	r1, [pc, #68]	; (1a34 <calendar_init+0x64>)
    19f0:	4618      	mov	r0, r3
    19f2:	4b11      	ldr	r3, [pc, #68]	; (1a38 <calendar_init+0x68>)
    19f4:	4798      	blx	r3

	if (calendar->device.hw == hw) {
    19f6:	687b      	ldr	r3, [r7, #4]
    19f8:	681a      	ldr	r2, [r3, #0]
    19fa:	683b      	ldr	r3, [r7, #0]
    19fc:	429a      	cmp	r2, r3
    19fe:	d101      	bne.n	1a04 <calendar_init+0x34>
		/* Already initialized with current configuration */
		return ERR_NONE;
    1a00:	2300      	movs	r3, #0
    1a02:	e013      	b.n	1a2c <calendar_init+0x5c>
	} else if (calendar->device.hw != NULL) {
    1a04:	687b      	ldr	r3, [r7, #4]
    1a06:	681b      	ldr	r3, [r3, #0]
    1a08:	2b00      	cmp	r3, #0
    1a0a:	d002      	beq.n	1a12 <calendar_init+0x42>
		/* Initialized with another configuration */
		return ERR_ALREADY_INITIALIZED;
    1a0c:	f06f 0311 	mvn.w	r3, #17
    1a10:	e00c      	b.n	1a2c <calendar_init+0x5c>
	}
	calendar->device.hw = (void *)hw;
    1a12:	687b      	ldr	r3, [r7, #4]
    1a14:	683a      	ldr	r2, [r7, #0]
    1a16:	601a      	str	r2, [r3, #0]
	ret                 = _calendar_init(&calendar->device);
    1a18:	687b      	ldr	r3, [r7, #4]
    1a1a:	4618      	mov	r0, r3
    1a1c:	4b07      	ldr	r3, [pc, #28]	; (1a3c <calendar_init+0x6c>)
    1a1e:	4798      	blx	r3
    1a20:	60f8      	str	r0, [r7, #12]
	calendar->base_year = DEFAULT_BASE_YEAR;
    1a22:	687b      	ldr	r3, [r7, #4]
    1a24:	f240 72b2 	movw	r2, #1970	; 0x7b2
    1a28:	619a      	str	r2, [r3, #24]

	return ret;
    1a2a:	68fb      	ldr	r3, [r7, #12]
}
    1a2c:	4618      	mov	r0, r3
    1a2e:	3710      	adds	r7, #16
    1a30:	46bd      	mov	sp, r7
    1a32:	bd80      	pop	{r7, pc}
    1a34:	00013244 	.word	0x00013244
    1a38:	00002dc9 	.word	0x00002dc9
    1a3c:	00005699 	.word	0x00005699

00001a40 <can_async_init>:

/**
 * \brief Initialize CAN.
 */
int32_t can_async_init(struct can_async_descriptor *const descr, void *const hw)
{
    1a40:	b580      	push	{r7, lr}
    1a42:	b084      	sub	sp, #16
    1a44:	af00      	add	r7, sp, #0
    1a46:	6078      	str	r0, [r7, #4]
    1a48:	6039      	str	r1, [r7, #0]
	int32_t rc;

	ASSERT(descr && hw);
    1a4a:	687b      	ldr	r3, [r7, #4]
    1a4c:	2b00      	cmp	r3, #0
    1a4e:	d004      	beq.n	1a5a <can_async_init+0x1a>
    1a50:	683b      	ldr	r3, [r7, #0]
    1a52:	2b00      	cmp	r3, #0
    1a54:	d001      	beq.n	1a5a <can_async_init+0x1a>
    1a56:	2301      	movs	r3, #1
    1a58:	e000      	b.n	1a5c <can_async_init+0x1c>
    1a5a:	2300      	movs	r3, #0
    1a5c:	f003 0301 	and.w	r3, r3, #1
    1a60:	b2db      	uxtb	r3, r3
    1a62:	2241      	movs	r2, #65	; 0x41
    1a64:	490e      	ldr	r1, [pc, #56]	; (1aa0 <can_async_init+0x60>)
    1a66:	4618      	mov	r0, r3
    1a68:	4b0e      	ldr	r3, [pc, #56]	; (1aa4 <can_async_init+0x64>)
    1a6a:	4798      	blx	r3

	rc = _can_async_init(&descr->dev, hw);
    1a6c:	687b      	ldr	r3, [r7, #4]
    1a6e:	6839      	ldr	r1, [r7, #0]
    1a70:	4618      	mov	r0, r3
    1a72:	4b0d      	ldr	r3, [pc, #52]	; (1aa8 <can_async_init+0x68>)
    1a74:	4798      	blx	r3
    1a76:	60f8      	str	r0, [r7, #12]
	if (rc) {
    1a78:	68fb      	ldr	r3, [r7, #12]
    1a7a:	2b00      	cmp	r3, #0
    1a7c:	d001      	beq.n	1a82 <can_async_init+0x42>
		return rc;
    1a7e:	68fb      	ldr	r3, [r7, #12]
    1a80:	e009      	b.n	1a96 <can_async_init+0x56>
	}
	descr->dev.cb.tx_done     = can_tx_done;
    1a82:	687b      	ldr	r3, [r7, #4]
    1a84:	4a09      	ldr	r2, [pc, #36]	; (1aac <can_async_init+0x6c>)
    1a86:	605a      	str	r2, [r3, #4]
	descr->dev.cb.rx_done     = can_rx_done;
    1a88:	687b      	ldr	r3, [r7, #4]
    1a8a:	4a09      	ldr	r2, [pc, #36]	; (1ab0 <can_async_init+0x70>)
    1a8c:	609a      	str	r2, [r3, #8]
	descr->dev.cb.irq_handler = can_irq_handler;
    1a8e:	687b      	ldr	r3, [r7, #4]
    1a90:	4a08      	ldr	r2, [pc, #32]	; (1ab4 <can_async_init+0x74>)
    1a92:	60da      	str	r2, [r3, #12]

	return ERR_NONE;
    1a94:	2300      	movs	r3, #0
}
    1a96:	4618      	mov	r0, r3
    1a98:	3710      	adds	r7, #16
    1a9a:	46bd      	mov	sp, r7
    1a9c:	bd80      	pop	{r7, pc}
    1a9e:	bf00      	nop
    1aa0:	00013260 	.word	0x00013260
    1aa4:	00002dc9 	.word	0x00002dc9
    1aa8:	000034c9 	.word	0x000034c9
    1aac:	00001c55 	.word	0x00001c55
    1ab0:	00001c79 	.word	0x00001c79
    1ab4:	00001c9d 	.word	0x00001c9d

00001ab8 <can_async_enable>:

/**
 * \brief Enable CAN
 */
int32_t can_async_enable(struct can_async_descriptor *const descr)
{
    1ab8:	b580      	push	{r7, lr}
    1aba:	b082      	sub	sp, #8
    1abc:	af00      	add	r7, sp, #0
    1abe:	6078      	str	r0, [r7, #4]
	ASSERT(descr);
    1ac0:	687b      	ldr	r3, [r7, #4]
    1ac2:	2b00      	cmp	r3, #0
    1ac4:	bf14      	ite	ne
    1ac6:	2301      	movne	r3, #1
    1ac8:	2300      	moveq	r3, #0
    1aca:	b2db      	uxtb	r3, r3
    1acc:	225c      	movs	r2, #92	; 0x5c
    1ace:	4906      	ldr	r1, [pc, #24]	; (1ae8 <can_async_enable+0x30>)
    1ad0:	4618      	mov	r0, r3
    1ad2:	4b06      	ldr	r3, [pc, #24]	; (1aec <can_async_enable+0x34>)
    1ad4:	4798      	blx	r3
	return _can_async_enable(&descr->dev);
    1ad6:	687b      	ldr	r3, [r7, #4]
    1ad8:	4618      	mov	r0, r3
    1ada:	4b05      	ldr	r3, [pc, #20]	; (1af0 <can_async_enable+0x38>)
    1adc:	4798      	blx	r3
    1ade:	4603      	mov	r3, r0
}
    1ae0:	4618      	mov	r0, r3
    1ae2:	3708      	adds	r7, #8
    1ae4:	46bd      	mov	sp, r7
    1ae6:	bd80      	pop	{r7, pc}
    1ae8:	00013260 	.word	0x00013260
    1aec:	00002dc9 	.word	0x00002dc9
    1af0:	000036b1 	.word	0x000036b1

00001af4 <can_async_read>:

/**
 * \brief Read a CAN message
 */
int32_t can_async_read(struct can_async_descriptor *const descr, struct can_message *msg)
{
    1af4:	b580      	push	{r7, lr}
    1af6:	b082      	sub	sp, #8
    1af8:	af00      	add	r7, sp, #0
    1afa:	6078      	str	r0, [r7, #4]
    1afc:	6039      	str	r1, [r7, #0]
	ASSERT(descr && msg);
    1afe:	687b      	ldr	r3, [r7, #4]
    1b00:	2b00      	cmp	r3, #0
    1b02:	d004      	beq.n	1b0e <can_async_read+0x1a>
    1b04:	683b      	ldr	r3, [r7, #0]
    1b06:	2b00      	cmp	r3, #0
    1b08:	d001      	beq.n	1b0e <can_async_read+0x1a>
    1b0a:	2301      	movs	r3, #1
    1b0c:	e000      	b.n	1b10 <can_async_read+0x1c>
    1b0e:	2300      	movs	r3, #0
    1b10:	f003 0301 	and.w	r3, r3, #1
    1b14:	b2db      	uxtb	r3, r3
    1b16:	226e      	movs	r2, #110	; 0x6e
    1b18:	4906      	ldr	r1, [pc, #24]	; (1b34 <can_async_read+0x40>)
    1b1a:	4618      	mov	r0, r3
    1b1c:	4b06      	ldr	r3, [pc, #24]	; (1b38 <can_async_read+0x44>)
    1b1e:	4798      	blx	r3
	return _can_async_read(&descr->dev, msg);
    1b20:	687b      	ldr	r3, [r7, #4]
    1b22:	6839      	ldr	r1, [r7, #0]
    1b24:	4618      	mov	r0, r3
    1b26:	4b05      	ldr	r3, [pc, #20]	; (1b3c <can_async_read+0x48>)
    1b28:	4798      	blx	r3
    1b2a:	4603      	mov	r3, r0
}
    1b2c:	4618      	mov	r0, r3
    1b2e:	3708      	adds	r7, #8
    1b30:	46bd      	mov	sp, r7
    1b32:	bd80      	pop	{r7, pc}
    1b34:	00013260 	.word	0x00013260
    1b38:	00002dc9 	.word	0x00002dc9
    1b3c:	000036d1 	.word	0x000036d1

00001b40 <can_async_write>:

/**
 * \brief Write a CAN message
 */
int32_t can_async_write(struct can_async_descriptor *const descr, struct can_message *msg)
{
    1b40:	b580      	push	{r7, lr}
    1b42:	b082      	sub	sp, #8
    1b44:	af00      	add	r7, sp, #0
    1b46:	6078      	str	r0, [r7, #4]
    1b48:	6039      	str	r1, [r7, #0]
	ASSERT(descr && msg);
    1b4a:	687b      	ldr	r3, [r7, #4]
    1b4c:	2b00      	cmp	r3, #0
    1b4e:	d004      	beq.n	1b5a <can_async_write+0x1a>
    1b50:	683b      	ldr	r3, [r7, #0]
    1b52:	2b00      	cmp	r3, #0
    1b54:	d001      	beq.n	1b5a <can_async_write+0x1a>
    1b56:	2301      	movs	r3, #1
    1b58:	e000      	b.n	1b5c <can_async_write+0x1c>
    1b5a:	2300      	movs	r3, #0
    1b5c:	f003 0301 	and.w	r3, r3, #1
    1b60:	b2db      	uxtb	r3, r3
    1b62:	2277      	movs	r2, #119	; 0x77
    1b64:	4906      	ldr	r1, [pc, #24]	; (1b80 <can_async_write+0x40>)
    1b66:	4618      	mov	r0, r3
    1b68:	4b06      	ldr	r3, [pc, #24]	; (1b84 <can_async_write+0x44>)
    1b6a:	4798      	blx	r3
	return _can_async_write(&descr->dev, msg);
    1b6c:	687b      	ldr	r3, [r7, #4]
    1b6e:	6839      	ldr	r1, [r7, #0]
    1b70:	4618      	mov	r0, r3
    1b72:	4b05      	ldr	r3, [pc, #20]	; (1b88 <can_async_write+0x48>)
    1b74:	4798      	blx	r3
    1b76:	4603      	mov	r3, r0
}
    1b78:	4618      	mov	r0, r3
    1b7a:	3708      	adds	r7, #8
    1b7c:	46bd      	mov	sp, r7
    1b7e:	bd80      	pop	{r7, pc}
    1b80:	00013260 	.word	0x00013260
    1b84:	00002dc9 	.word	0x00002dc9
    1b88:	000037e1 	.word	0x000037e1

00001b8c <can_async_register_callback>:
/**
 * \brief Register CAN callback function to interrupt
 */
int32_t can_async_register_callback(struct can_async_descriptor *const descr, enum can_async_callback_type type,
                                    FUNC_PTR cb)
{
    1b8c:	b580      	push	{r7, lr}
    1b8e:	b084      	sub	sp, #16
    1b90:	af00      	add	r7, sp, #0
    1b92:	60f8      	str	r0, [r7, #12]
    1b94:	460b      	mov	r3, r1
    1b96:	607a      	str	r2, [r7, #4]
    1b98:	72fb      	strb	r3, [r7, #11]
	ASSERT(descr);
    1b9a:	68fb      	ldr	r3, [r7, #12]
    1b9c:	2b00      	cmp	r3, #0
    1b9e:	bf14      	ite	ne
    1ba0:	2301      	movne	r3, #1
    1ba2:	2300      	moveq	r3, #0
    1ba4:	b2db      	uxtb	r3, r3
    1ba6:	2281      	movs	r2, #129	; 0x81
    1ba8:	4914      	ldr	r1, [pc, #80]	; (1bfc <can_async_register_callback+0x70>)
    1baa:	4618      	mov	r0, r3
    1bac:	4b14      	ldr	r3, [pc, #80]	; (1c00 <can_async_register_callback+0x74>)
    1bae:	4798      	blx	r3

	switch (type) {
    1bb0:	7afb      	ldrb	r3, [r7, #11]
    1bb2:	2b01      	cmp	r3, #1
    1bb4:	d007      	beq.n	1bc6 <can_async_register_callback+0x3a>
    1bb6:	2b02      	cmp	r3, #2
    1bb8:	d009      	beq.n	1bce <can_async_register_callback+0x42>
    1bba:	2b00      	cmp	r3, #0
    1bbc:	d10b      	bne.n	1bd6 <can_async_register_callback+0x4a>
	case CAN_ASYNC_RX_CB:
		descr->cb.rx_done = (cb != NULL) ? (can_cb_t)cb : NULL;
    1bbe:	68fb      	ldr	r3, [r7, #12]
    1bc0:	687a      	ldr	r2, [r7, #4]
    1bc2:	621a      	str	r2, [r3, #32]
		break;
    1bc4:	e00a      	b.n	1bdc <can_async_register_callback+0x50>
	case CAN_ASYNC_TX_CB:
		descr->cb.tx_done = (cb != NULL) ? (can_cb_t)cb : NULL;
    1bc6:	68fb      	ldr	r3, [r7, #12]
    1bc8:	687a      	ldr	r2, [r7, #4]
    1bca:	61da      	str	r2, [r3, #28]
		break;
    1bcc:	e006      	b.n	1bdc <can_async_register_callback+0x50>
	case CAN_ASYNC_IRQ_CB:
		descr->cb.irq_handler
		    = (cb != NULL) ? (void (*)(struct can_async_descriptor *const, enum can_async_interrupt_type))cb : NULL;
    1bce:	68fb      	ldr	r3, [r7, #12]
    1bd0:	687a      	ldr	r2, [r7, #4]
    1bd2:	625a      	str	r2, [r3, #36]	; 0x24
		break;
    1bd4:	e002      	b.n	1bdc <can_async_register_callback+0x50>
	default:
		return ERR_INVALID_ARG;
    1bd6:	f06f 030c 	mvn.w	r3, #12
    1bda:	e00b      	b.n	1bf4 <can_async_register_callback+0x68>
	}

	_can_async_set_irq_state(&descr->dev, type, NULL != cb);
    1bdc:	68f8      	ldr	r0, [r7, #12]
    1bde:	687b      	ldr	r3, [r7, #4]
    1be0:	2b00      	cmp	r3, #0
    1be2:	bf14      	ite	ne
    1be4:	2301      	movne	r3, #1
    1be6:	2300      	moveq	r3, #0
    1be8:	b2da      	uxtb	r2, r3
    1bea:	7afb      	ldrb	r3, [r7, #11]
    1bec:	4619      	mov	r1, r3
    1bee:	4b05      	ldr	r3, [pc, #20]	; (1c04 <can_async_register_callback+0x78>)
    1bf0:	4798      	blx	r3

	return ERR_NONE;
    1bf2:	2300      	movs	r3, #0
}
    1bf4:	4618      	mov	r0, r3
    1bf6:	3710      	adds	r7, #16
    1bf8:	46bd      	mov	sp, r7
    1bfa:	bd80      	pop	{r7, pc}
    1bfc:	00013260 	.word	0x00013260
    1c00:	00002dc9 	.word	0x00002dc9
    1c04:	0000399d 	.word	0x0000399d

00001c08 <can_async_set_filter>:
/**
 * \brief Set CAN filter
 */
int32_t can_async_set_filter(struct can_async_descriptor *const descr, uint8_t index, enum can_format fmt,
                             struct can_filter *filter)
{
    1c08:	b590      	push	{r4, r7, lr}
    1c0a:	b085      	sub	sp, #20
    1c0c:	af00      	add	r7, sp, #0
    1c0e:	60f8      	str	r0, [r7, #12]
    1c10:	607b      	str	r3, [r7, #4]
    1c12:	460b      	mov	r3, r1
    1c14:	72fb      	strb	r3, [r7, #11]
    1c16:	4613      	mov	r3, r2
    1c18:	72bb      	strb	r3, [r7, #10]
	ASSERT(descr);
    1c1a:	68fb      	ldr	r3, [r7, #12]
    1c1c:	2b00      	cmp	r3, #0
    1c1e:	bf14      	ite	ne
    1c20:	2301      	movne	r3, #1
    1c22:	2300      	moveq	r3, #0
    1c24:	b2db      	uxtb	r3, r3
    1c26:	22b8      	movs	r2, #184	; 0xb8
    1c28:	4907      	ldr	r1, [pc, #28]	; (1c48 <can_async_set_filter+0x40>)
    1c2a:	4618      	mov	r0, r3
    1c2c:	4b07      	ldr	r3, [pc, #28]	; (1c4c <can_async_set_filter+0x44>)
    1c2e:	4798      	blx	r3
	return _can_async_set_filter(&descr->dev, index, fmt, filter);
    1c30:	68f8      	ldr	r0, [r7, #12]
    1c32:	7aba      	ldrb	r2, [r7, #10]
    1c34:	7af9      	ldrb	r1, [r7, #11]
    1c36:	687b      	ldr	r3, [r7, #4]
    1c38:	4c05      	ldr	r4, [pc, #20]	; (1c50 <can_async_set_filter+0x48>)
    1c3a:	47a0      	blx	r4
    1c3c:	4603      	mov	r3, r0
}
    1c3e:	4618      	mov	r0, r3
    1c40:	3714      	adds	r7, #20
    1c42:	46bd      	mov	sp, r7
    1c44:	bd90      	pop	{r4, r7, pc}
    1c46:	bf00      	nop
    1c48:	00013260 	.word	0x00013260
    1c4c:	00002dc9 	.word	0x00002dc9
    1c50:	00003a2d 	.word	0x00003a2d

00001c54 <can_tx_done>:

/**
 * \internal Callback of CAN Message Write finished
 */
static void can_tx_done(struct _can_async_device *dev)
{
    1c54:	b580      	push	{r7, lr}
    1c56:	b084      	sub	sp, #16
    1c58:	af00      	add	r7, sp, #0
    1c5a:	6078      	str	r0, [r7, #4]
	struct can_async_descriptor *const descr = CONTAINER_OF(dev, struct can_async_descriptor, dev);
    1c5c:	687b      	ldr	r3, [r7, #4]
    1c5e:	60fb      	str	r3, [r7, #12]

	if (descr->cb.tx_done) {
    1c60:	68fb      	ldr	r3, [r7, #12]
    1c62:	69db      	ldr	r3, [r3, #28]
    1c64:	2b00      	cmp	r3, #0
    1c66:	d003      	beq.n	1c70 <can_tx_done+0x1c>
		descr->cb.tx_done(descr);
    1c68:	68fb      	ldr	r3, [r7, #12]
    1c6a:	69db      	ldr	r3, [r3, #28]
    1c6c:	68f8      	ldr	r0, [r7, #12]
    1c6e:	4798      	blx	r3
	}
}
    1c70:	bf00      	nop
    1c72:	3710      	adds	r7, #16
    1c74:	46bd      	mov	sp, r7
    1c76:	bd80      	pop	{r7, pc}

00001c78 <can_rx_done>:

/**
 * \internal Callback of CAN Message Read finished
 */
static void can_rx_done(struct _can_async_device *dev)
{
    1c78:	b580      	push	{r7, lr}
    1c7a:	b084      	sub	sp, #16
    1c7c:	af00      	add	r7, sp, #0
    1c7e:	6078      	str	r0, [r7, #4]
	struct can_async_descriptor *const descr = CONTAINER_OF(dev, struct can_async_descriptor, dev);
    1c80:	687b      	ldr	r3, [r7, #4]
    1c82:	60fb      	str	r3, [r7, #12]

	if (descr->cb.rx_done) {
    1c84:	68fb      	ldr	r3, [r7, #12]
    1c86:	6a1b      	ldr	r3, [r3, #32]
    1c88:	2b00      	cmp	r3, #0
    1c8a:	d003      	beq.n	1c94 <can_rx_done+0x1c>
		descr->cb.rx_done(descr);
    1c8c:	68fb      	ldr	r3, [r7, #12]
    1c8e:	6a1b      	ldr	r3, [r3, #32]
    1c90:	68f8      	ldr	r0, [r7, #12]
    1c92:	4798      	blx	r3
	}
}
    1c94:	bf00      	nop
    1c96:	3710      	adds	r7, #16
    1c98:	46bd      	mov	sp, r7
    1c9a:	bd80      	pop	{r7, pc}

00001c9c <can_irq_handler>:

/**
 * \internal Callback of CAN Interrupt
 */
static void can_irq_handler(struct _can_async_device *dev, enum can_async_interrupt_type type)
{
    1c9c:	b580      	push	{r7, lr}
    1c9e:	b084      	sub	sp, #16
    1ca0:	af00      	add	r7, sp, #0
    1ca2:	6078      	str	r0, [r7, #4]
    1ca4:	460b      	mov	r3, r1
    1ca6:	70fb      	strb	r3, [r7, #3]
	struct can_async_descriptor *const descr = CONTAINER_OF(dev, struct can_async_descriptor, dev);
    1ca8:	687b      	ldr	r3, [r7, #4]
    1caa:	60fb      	str	r3, [r7, #12]

	if (descr->cb.irq_handler) {
    1cac:	68fb      	ldr	r3, [r7, #12]
    1cae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    1cb0:	2b00      	cmp	r3, #0
    1cb2:	d005      	beq.n	1cc0 <can_irq_handler+0x24>
		descr->cb.irq_handler(descr, type);
    1cb4:	68fb      	ldr	r3, [r7, #12]
    1cb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    1cb8:	78fa      	ldrb	r2, [r7, #3]
    1cba:	4611      	mov	r1, r2
    1cbc:	68f8      	ldr	r0, [r7, #12]
    1cbe:	4798      	blx	r3
	}
}
    1cc0:	bf00      	nop
    1cc2:	3710      	adds	r7, #16
    1cc4:	46bd      	mov	sp, r7
    1cc6:	bd80      	pop	{r7, pc}

00001cc8 <crc_sync_init>:

/**
 * \brief Initialize CRC.
 */
int32_t crc_sync_init(struct crc_sync_descriptor *const descr, void *const hw)
{
    1cc8:	b580      	push	{r7, lr}
    1cca:	b082      	sub	sp, #8
    1ccc:	af00      	add	r7, sp, #0
    1cce:	6078      	str	r0, [r7, #4]
    1cd0:	6039      	str	r1, [r7, #0]
	ASSERT(descr && hw);
    1cd2:	687b      	ldr	r3, [r7, #4]
    1cd4:	2b00      	cmp	r3, #0
    1cd6:	d004      	beq.n	1ce2 <crc_sync_init+0x1a>
    1cd8:	683b      	ldr	r3, [r7, #0]
    1cda:	2b00      	cmp	r3, #0
    1cdc:	d001      	beq.n	1ce2 <crc_sync_init+0x1a>
    1cde:	2301      	movs	r3, #1
    1ce0:	e000      	b.n	1ce4 <crc_sync_init+0x1c>
    1ce2:	2300      	movs	r3, #0
    1ce4:	f003 0301 	and.w	r3, r3, #1
    1ce8:	b2db      	uxtb	r3, r3
    1cea:	222b      	movs	r2, #43	; 0x2b
    1cec:	4906      	ldr	r1, [pc, #24]	; (1d08 <crc_sync_init+0x40>)
    1cee:	4618      	mov	r0, r3
    1cf0:	4b06      	ldr	r3, [pc, #24]	; (1d0c <crc_sync_init+0x44>)
    1cf2:	4798      	blx	r3

	return _crc_sync_init(&descr->dev, hw);
    1cf4:	687b      	ldr	r3, [r7, #4]
    1cf6:	6839      	ldr	r1, [r7, #0]
    1cf8:	4618      	mov	r0, r3
    1cfa:	4b05      	ldr	r3, [pc, #20]	; (1d10 <crc_sync_init+0x48>)
    1cfc:	4798      	blx	r3
    1cfe:	4603      	mov	r3, r0
}
    1d00:	4618      	mov	r0, r3
    1d02:	3708      	adds	r7, #8
    1d04:	46bd      	mov	sp, r7
    1d06:	bd80      	pop	{r7, pc}
    1d08:	0001327c 	.word	0x0001327c
    1d0c:	00002dc9 	.word	0x00002dc9
    1d10:	00004011 	.word	0x00004011

00001d14 <delay_us>:

/**
 * \brief Perform delay in us
 */
void delay_us(const uint16_t us)
{
    1d14:	b590      	push	{r4, r7, lr}
    1d16:	b083      	sub	sp, #12
    1d18:	af00      	add	r7, sp, #0
    1d1a:	4603      	mov	r3, r0
    1d1c:	80fb      	strh	r3, [r7, #6]
	_delay_cycles(hardware, _get_cycles_for_us(us));
    1d1e:	4b07      	ldr	r3, [pc, #28]	; (1d3c <delay_us+0x28>)
    1d20:	681c      	ldr	r4, [r3, #0]
    1d22:	88fb      	ldrh	r3, [r7, #6]
    1d24:	4618      	mov	r0, r3
    1d26:	4b06      	ldr	r3, [pc, #24]	; (1d40 <delay_us+0x2c>)
    1d28:	4798      	blx	r3
    1d2a:	4603      	mov	r3, r0
    1d2c:	4619      	mov	r1, r3
    1d2e:	4620      	mov	r0, r4
    1d30:	4b04      	ldr	r3, [pc, #16]	; (1d44 <delay_us+0x30>)
    1d32:	4798      	blx	r3
}
    1d34:	bf00      	nop
    1d36:	370c      	adds	r7, #12
    1d38:	46bd      	mov	sp, r7
    1d3a:	bd90      	pop	{r4, r7, pc}
    1d3c:	20000bc0 	.word	0x20000bc0
    1d40:	00003d61 	.word	0x00003d61
    1d44:	00003ef9 	.word	0x00003ef9

00001d48 <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
    1d48:	b590      	push	{r4, r7, lr}
    1d4a:	b083      	sub	sp, #12
    1d4c:	af00      	add	r7, sp, #0
    1d4e:	4603      	mov	r3, r0
    1d50:	80fb      	strh	r3, [r7, #6]
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
    1d52:	4b07      	ldr	r3, [pc, #28]	; (1d70 <delay_ms+0x28>)
    1d54:	681c      	ldr	r4, [r3, #0]
    1d56:	88fb      	ldrh	r3, [r7, #6]
    1d58:	4618      	mov	r0, r3
    1d5a:	4b06      	ldr	r3, [pc, #24]	; (1d74 <delay_ms+0x2c>)
    1d5c:	4798      	blx	r3
    1d5e:	4603      	mov	r3, r0
    1d60:	4619      	mov	r1, r3
    1d62:	4620      	mov	r0, r4
    1d64:	4b04      	ldr	r3, [pc, #16]	; (1d78 <delay_ms+0x30>)
    1d66:	4798      	blx	r3
}
    1d68:	bf00      	nop
    1d6a:	370c      	adds	r7, #12
    1d6c:	46bd      	mov	sp, r7
    1d6e:	bd90      	pop	{r4, r7, pc}
    1d70:	20000bc0 	.word	0x20000bc0
    1d74:	00003ecd 	.word	0x00003ecd
    1d78:	00003ef9 	.word	0x00003ef9

00001d7c <event_system_init>:

/**
 * \brief Initialize event system.
 */
int32_t event_system_init(void)
{
    1d7c:	b580      	push	{r7, lr}
    1d7e:	af00      	add	r7, sp, #0
	return _event_system_init();
    1d80:	4b02      	ldr	r3, [pc, #8]	; (1d8c <event_system_init+0x10>)
    1d82:	4798      	blx	r3
    1d84:	4603      	mov	r3, r0
}
    1d86:	4618      	mov	r0, r3
    1d88:	bd80      	pop	{r7, pc}
    1d8a:	bf00      	nop
    1d8c:	000046f5 	.word	0x000046f5

00001d90 <ext_irq_init>:

/**
 * \brief Initialize external irq component if any
 */
int32_t ext_irq_init(void)
{
    1d90:	b580      	push	{r7, lr}
    1d92:	b082      	sub	sp, #8
    1d94:	af00      	add	r7, sp, #0
	uint16_t i;

	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    1d96:	2300      	movs	r3, #0
    1d98:	80fb      	strh	r3, [r7, #6]
    1d9a:	e00e      	b.n	1dba <ext_irq_init+0x2a>
		ext_irqs[i].pin = 0xFFFFFFFF;
    1d9c:	88fb      	ldrh	r3, [r7, #6]
    1d9e:	4a0c      	ldr	r2, [pc, #48]	; (1dd0 <ext_irq_init+0x40>)
    1da0:	00db      	lsls	r3, r3, #3
    1da2:	4413      	add	r3, r2
    1da4:	f04f 32ff 	mov.w	r2, #4294967295
    1da8:	605a      	str	r2, [r3, #4]
		ext_irqs[i].cb  = NULL;
    1daa:	88fb      	ldrh	r3, [r7, #6]
    1dac:	4a08      	ldr	r2, [pc, #32]	; (1dd0 <ext_irq_init+0x40>)
    1dae:	2100      	movs	r1, #0
    1db0:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    1db4:	88fb      	ldrh	r3, [r7, #6]
    1db6:	3301      	adds	r3, #1
    1db8:	80fb      	strh	r3, [r7, #6]
    1dba:	88fb      	ldrh	r3, [r7, #6]
    1dbc:	2b08      	cmp	r3, #8
    1dbe:	d9ed      	bls.n	1d9c <ext_irq_init+0xc>
	}

	return _ext_irq_init(process_ext_irq);
    1dc0:	4804      	ldr	r0, [pc, #16]	; (1dd4 <ext_irq_init+0x44>)
    1dc2:	4b05      	ldr	r3, [pc, #20]	; (1dd8 <ext_irq_init+0x48>)
    1dc4:	4798      	blx	r3
    1dc6:	4603      	mov	r3, r0
}
    1dc8:	4618      	mov	r0, r3
    1dca:	3708      	adds	r7, #8
    1dcc:	46bd      	mov	sp, r7
    1dce:	bd80      	pop	{r7, pc}
    1dd0:	20000bc4 	.word	0x20000bc4
    1dd4:	00001ddd 	.word	0x00001ddd
    1dd8:	00004319 	.word	0x00004319

00001ddc <process_ext_irq>:
 * \brief Interrupt processing routine
 *
 * \param[in] pin The pin which triggered the interrupt
 */
static void process_ext_irq(const uint32_t pin)
{
    1ddc:	b580      	push	{r7, lr}
    1dde:	b084      	sub	sp, #16
    1de0:	af00      	add	r7, sp, #0
    1de2:	6078      	str	r0, [r7, #4]
	uint8_t lower = 0, middle, upper = EXT_IRQ_AMOUNT;
    1de4:	2300      	movs	r3, #0
    1de6:	73fb      	strb	r3, [r7, #15]
    1de8:	2309      	movs	r3, #9
    1dea:	73bb      	strb	r3, [r7, #14]

	while (upper >= lower) {
    1dec:	e02a      	b.n	1e44 <process_ext_irq+0x68>
		middle = (upper + lower) >> 1;
    1dee:	7bba      	ldrb	r2, [r7, #14]
    1df0:	7bfb      	ldrb	r3, [r7, #15]
    1df2:	4413      	add	r3, r2
    1df4:	105b      	asrs	r3, r3, #1
    1df6:	737b      	strb	r3, [r7, #13]
		if (middle >= EXT_IRQ_AMOUNT) {
    1df8:	7b7b      	ldrb	r3, [r7, #13]
    1dfa:	2b08      	cmp	r3, #8
    1dfc:	d827      	bhi.n	1e4e <process_ext_irq+0x72>
			return;
		}

		if (ext_irqs[middle].pin == pin) {
    1dfe:	7b7b      	ldrb	r3, [r7, #13]
    1e00:	4a16      	ldr	r2, [pc, #88]	; (1e5c <process_ext_irq+0x80>)
    1e02:	00db      	lsls	r3, r3, #3
    1e04:	4413      	add	r3, r2
    1e06:	685a      	ldr	r2, [r3, #4]
    1e08:	687b      	ldr	r3, [r7, #4]
    1e0a:	429a      	cmp	r2, r3
    1e0c:	d10b      	bne.n	1e26 <process_ext_irq+0x4a>
			if (ext_irqs[middle].cb) {
    1e0e:	7b7b      	ldrb	r3, [r7, #13]
    1e10:	4a12      	ldr	r2, [pc, #72]	; (1e5c <process_ext_irq+0x80>)
    1e12:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    1e16:	2b00      	cmp	r3, #0
    1e18:	d01b      	beq.n	1e52 <process_ext_irq+0x76>
				ext_irqs[middle].cb();
    1e1a:	7b7b      	ldrb	r3, [r7, #13]
    1e1c:	4a0f      	ldr	r2, [pc, #60]	; (1e5c <process_ext_irq+0x80>)
    1e1e:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    1e22:	4798      	blx	r3
			}
			return;
    1e24:	e015      	b.n	1e52 <process_ext_irq+0x76>
		}

		if (ext_irqs[middle].pin < pin) {
    1e26:	7b7b      	ldrb	r3, [r7, #13]
    1e28:	4a0c      	ldr	r2, [pc, #48]	; (1e5c <process_ext_irq+0x80>)
    1e2a:	00db      	lsls	r3, r3, #3
    1e2c:	4413      	add	r3, r2
    1e2e:	685a      	ldr	r2, [r3, #4]
    1e30:	687b      	ldr	r3, [r7, #4]
    1e32:	429a      	cmp	r2, r3
    1e34:	d203      	bcs.n	1e3e <process_ext_irq+0x62>
			lower = middle + 1;
    1e36:	7b7b      	ldrb	r3, [r7, #13]
    1e38:	3301      	adds	r3, #1
    1e3a:	73fb      	strb	r3, [r7, #15]
    1e3c:	e002      	b.n	1e44 <process_ext_irq+0x68>
		} else {
			upper = middle - 1;
    1e3e:	7b7b      	ldrb	r3, [r7, #13]
    1e40:	3b01      	subs	r3, #1
    1e42:	73bb      	strb	r3, [r7, #14]
	while (upper >= lower) {
    1e44:	7bba      	ldrb	r2, [r7, #14]
    1e46:	7bfb      	ldrb	r3, [r7, #15]
    1e48:	429a      	cmp	r2, r3
    1e4a:	d2d0      	bcs.n	1dee <process_ext_irq+0x12>
    1e4c:	e002      	b.n	1e54 <process_ext_irq+0x78>
			return;
    1e4e:	bf00      	nop
    1e50:	e000      	b.n	1e54 <process_ext_irq+0x78>
			return;
    1e52:	bf00      	nop
		}
	}
}
    1e54:	3710      	adds	r7, #16
    1e56:	46bd      	mov	sp, r7
    1e58:	bd80      	pop	{r7, pc}
    1e5a:	bf00      	nop
    1e5c:	20000bc4 	.word	0x20000bc4

00001e60 <i2c_m_sync_read>:

/**
 * \brief Sync version of I2C I/O read
 */
static int32_t i2c_m_sync_read(struct io_descriptor *io, uint8_t *buf, const uint16_t n)
{
    1e60:	b580      	push	{r7, lr}
    1e62:	b08a      	sub	sp, #40	; 0x28
    1e64:	af00      	add	r7, sp, #0
    1e66:	60f8      	str	r0, [r7, #12]
    1e68:	60b9      	str	r1, [r7, #8]
    1e6a:	4613      	mov	r3, r2
    1e6c:	80fb      	strh	r3, [r7, #6]
	struct i2c_m_sync_desc *i2c = CONTAINER_OF(io, struct i2c_m_sync_desc, io);
    1e6e:	68fb      	ldr	r3, [r7, #12]
    1e70:	3b14      	subs	r3, #20
    1e72:	627b      	str	r3, [r7, #36]	; 0x24
	struct _i2c_m_msg       msg;
	int32_t                 ret;

	msg.addr   = i2c->slave_addr;
    1e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1e76:	8b9b      	ldrh	r3, [r3, #28]
    1e78:	82bb      	strh	r3, [r7, #20]
	msg.len    = n;
    1e7a:	88fb      	ldrh	r3, [r7, #6]
    1e7c:	61bb      	str	r3, [r7, #24]
	msg.flags  = I2C_M_STOP | I2C_M_RD;
    1e7e:	f248 0301 	movw	r3, #32769	; 0x8001
    1e82:	82fb      	strh	r3, [r7, #22]
	msg.buffer = buf;
    1e84:	68bb      	ldr	r3, [r7, #8]
    1e86:	61fb      	str	r3, [r7, #28]

	ret = _i2c_m_sync_transfer(&i2c->device, &msg);
    1e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1e8a:	f107 0214 	add.w	r2, r7, #20
    1e8e:	4611      	mov	r1, r2
    1e90:	4618      	mov	r0, r3
    1e92:	4b06      	ldr	r3, [pc, #24]	; (1eac <i2c_m_sync_read+0x4c>)
    1e94:	4798      	blx	r3
    1e96:	6238      	str	r0, [r7, #32]

	if (ret) {
    1e98:	6a3b      	ldr	r3, [r7, #32]
    1e9a:	2b00      	cmp	r3, #0
    1e9c:	d001      	beq.n	1ea2 <i2c_m_sync_read+0x42>
		return ret;
    1e9e:	6a3b      	ldr	r3, [r7, #32]
    1ea0:	e000      	b.n	1ea4 <i2c_m_sync_read+0x44>
	}

	return n;
    1ea2:	88fb      	ldrh	r3, [r7, #6]
}
    1ea4:	4618      	mov	r0, r3
    1ea6:	3728      	adds	r7, #40	; 0x28
    1ea8:	46bd      	mov	sp, r7
    1eaa:	bd80      	pop	{r7, pc}
    1eac:	0000623d 	.word	0x0000623d

00001eb0 <i2c_m_sync_write>:

/**
 * \brief Sync version of I2C I/O write
 */
static int32_t i2c_m_sync_write(struct io_descriptor *io, const uint8_t *buf, const uint16_t n)
{
    1eb0:	b580      	push	{r7, lr}
    1eb2:	b08a      	sub	sp, #40	; 0x28
    1eb4:	af00      	add	r7, sp, #0
    1eb6:	60f8      	str	r0, [r7, #12]
    1eb8:	60b9      	str	r1, [r7, #8]
    1eba:	4613      	mov	r3, r2
    1ebc:	80fb      	strh	r3, [r7, #6]
	struct i2c_m_sync_desc *i2c = CONTAINER_OF(io, struct i2c_m_sync_desc, io);
    1ebe:	68fb      	ldr	r3, [r7, #12]
    1ec0:	3b14      	subs	r3, #20
    1ec2:	627b      	str	r3, [r7, #36]	; 0x24
	struct _i2c_m_msg       msg;
	int32_t                 ret;

	msg.addr   = i2c->slave_addr;
    1ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1ec6:	8b9b      	ldrh	r3, [r3, #28]
    1ec8:	82bb      	strh	r3, [r7, #20]
	msg.len    = n;
    1eca:	88fb      	ldrh	r3, [r7, #6]
    1ecc:	61bb      	str	r3, [r7, #24]
	msg.flags  = I2C_M_STOP;
    1ece:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    1ed2:	82fb      	strh	r3, [r7, #22]
	msg.buffer = (uint8_t *)buf;
    1ed4:	68bb      	ldr	r3, [r7, #8]
    1ed6:	61fb      	str	r3, [r7, #28]

	ret = _i2c_m_sync_transfer(&i2c->device, &msg);
    1ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1eda:	f107 0214 	add.w	r2, r7, #20
    1ede:	4611      	mov	r1, r2
    1ee0:	4618      	mov	r0, r3
    1ee2:	4b06      	ldr	r3, [pc, #24]	; (1efc <i2c_m_sync_write+0x4c>)
    1ee4:	4798      	blx	r3
    1ee6:	6238      	str	r0, [r7, #32]

	if (ret) {
    1ee8:	6a3b      	ldr	r3, [r7, #32]
    1eea:	2b00      	cmp	r3, #0
    1eec:	d001      	beq.n	1ef2 <i2c_m_sync_write+0x42>
		return ret;
    1eee:	6a3b      	ldr	r3, [r7, #32]
    1ef0:	e000      	b.n	1ef4 <i2c_m_sync_write+0x44>
	}

	return n;
    1ef2:	88fb      	ldrh	r3, [r7, #6]
}
    1ef4:	4618      	mov	r0, r3
    1ef6:	3728      	adds	r7, #40	; 0x28
    1ef8:	46bd      	mov	sp, r7
    1efa:	bd80      	pop	{r7, pc}
    1efc:	0000623d 	.word	0x0000623d

00001f00 <i2c_m_sync_init>:

/**
 * \brief Sync version of i2c initialize
 */
int32_t i2c_m_sync_init(struct i2c_m_sync_desc *i2c, void *hw)
{
    1f00:	b580      	push	{r7, lr}
    1f02:	b084      	sub	sp, #16
    1f04:	af00      	add	r7, sp, #0
    1f06:	6078      	str	r0, [r7, #4]
    1f08:	6039      	str	r1, [r7, #0]
	int32_t init_status;
	ASSERT(i2c);
    1f0a:	687b      	ldr	r3, [r7, #4]
    1f0c:	2b00      	cmp	r3, #0
    1f0e:	bf14      	ite	ne
    1f10:	2301      	movne	r3, #1
    1f12:	2300      	moveq	r3, #0
    1f14:	b2db      	uxtb	r3, r3
    1f16:	225e      	movs	r2, #94	; 0x5e
    1f18:	490c      	ldr	r1, [pc, #48]	; (1f4c <i2c_m_sync_init+0x4c>)
    1f1a:	4618      	mov	r0, r3
    1f1c:	4b0c      	ldr	r3, [pc, #48]	; (1f50 <i2c_m_sync_init+0x50>)
    1f1e:	4798      	blx	r3

	init_status = _i2c_m_sync_init(&i2c->device, hw);
    1f20:	687b      	ldr	r3, [r7, #4]
    1f22:	6839      	ldr	r1, [r7, #0]
    1f24:	4618      	mov	r0, r3
    1f26:	4b0b      	ldr	r3, [pc, #44]	; (1f54 <i2c_m_sync_init+0x54>)
    1f28:	4798      	blx	r3
    1f2a:	60f8      	str	r0, [r7, #12]
	if (init_status) {
    1f2c:	68fb      	ldr	r3, [r7, #12]
    1f2e:	2b00      	cmp	r3, #0
    1f30:	d001      	beq.n	1f36 <i2c_m_sync_init+0x36>
		return init_status;
    1f32:	68fb      	ldr	r3, [r7, #12]
    1f34:	e006      	b.n	1f44 <i2c_m_sync_init+0x44>
	}

	/* Init I/O */
	i2c->io.read  = i2c_m_sync_read;
    1f36:	687b      	ldr	r3, [r7, #4]
    1f38:	4a07      	ldr	r2, [pc, #28]	; (1f58 <i2c_m_sync_init+0x58>)
    1f3a:	619a      	str	r2, [r3, #24]
	i2c->io.write = i2c_m_sync_write;
    1f3c:	687b      	ldr	r3, [r7, #4]
    1f3e:	4a07      	ldr	r2, [pc, #28]	; (1f5c <i2c_m_sync_init+0x5c>)
    1f40:	615a      	str	r2, [r3, #20]

	return ERR_NONE;
    1f42:	2300      	movs	r3, #0
}
    1f44:	4618      	mov	r0, r3
    1f46:	3710      	adds	r7, #16
    1f48:	46bd      	mov	sp, r7
    1f4a:	bd80      	pop	{r7, pc}
    1f4c:	00013298 	.word	0x00013298
    1f50:	00002dc9 	.word	0x00002dc9
    1f54:	00006079 	.word	0x00006079
    1f58:	00001e61 	.word	0x00001e61
    1f5c:	00001eb1 	.word	0x00001eb1

00001f60 <pwm_init>:

/**
 * \brief Initialize pwm
 */
int32_t pwm_init(struct pwm_descriptor *const descr, void *const hw, struct _pwm_hpl_interface *const func)
{
    1f60:	b580      	push	{r7, lr}
    1f62:	b084      	sub	sp, #16
    1f64:	af00      	add	r7, sp, #0
    1f66:	60f8      	str	r0, [r7, #12]
    1f68:	60b9      	str	r1, [r7, #8]
    1f6a:	607a      	str	r2, [r7, #4]
	ASSERT(descr && hw);
    1f6c:	68fb      	ldr	r3, [r7, #12]
    1f6e:	2b00      	cmp	r3, #0
    1f70:	d004      	beq.n	1f7c <pwm_init+0x1c>
    1f72:	68bb      	ldr	r3, [r7, #8]
    1f74:	2b00      	cmp	r3, #0
    1f76:	d001      	beq.n	1f7c <pwm_init+0x1c>
    1f78:	2301      	movs	r3, #1
    1f7a:	e000      	b.n	1f7e <pwm_init+0x1e>
    1f7c:	2300      	movs	r3, #0
    1f7e:	f003 0301 	and.w	r3, r3, #1
    1f82:	b2db      	uxtb	r3, r3
    1f84:	2233      	movs	r2, #51	; 0x33
    1f86:	490a      	ldr	r1, [pc, #40]	; (1fb0 <pwm_init+0x50>)
    1f88:	4618      	mov	r0, r3
    1f8a:	4b0a      	ldr	r3, [pc, #40]	; (1fb4 <pwm_init+0x54>)
    1f8c:	4798      	blx	r3
	_pwm_init(&descr->device, hw);
    1f8e:	68fb      	ldr	r3, [r7, #12]
    1f90:	68b9      	ldr	r1, [r7, #8]
    1f92:	4618      	mov	r0, r3
    1f94:	4b08      	ldr	r3, [pc, #32]	; (1fb8 <pwm_init+0x58>)
    1f96:	4798      	blx	r3
	descr->device.callback.pwm_period_cb = pwm_period_expired;
    1f98:	68fb      	ldr	r3, [r7, #12]
    1f9a:	4a08      	ldr	r2, [pc, #32]	; (1fbc <pwm_init+0x5c>)
    1f9c:	601a      	str	r2, [r3, #0]
	descr->device.callback.pwm_error_cb  = pwm_detect_fault;
    1f9e:	68fb      	ldr	r3, [r7, #12]
    1fa0:	4a07      	ldr	r2, [pc, #28]	; (1fc0 <pwm_init+0x60>)
    1fa2:	605a      	str	r2, [r3, #4]
	return ERR_NONE;
    1fa4:	2300      	movs	r3, #0
}
    1fa6:	4618      	mov	r0, r3
    1fa8:	3710      	adds	r7, #16
    1faa:	46bd      	mov	sp, r7
    1fac:	bd80      	pop	{r7, pc}
    1fae:	bf00      	nop
    1fb0:	000132b4 	.word	0x000132b4
    1fb4:	00002dc9 	.word	0x00002dc9
    1fb8:	00007771 	.word	0x00007771
    1fbc:	00001fc5 	.word	0x00001fc5
    1fc0:	00001fe9 	.word	0x00001fe9

00001fc4 <pwm_period_expired>:

/**
 * \internal Process interrupts caused by period experied
 */
static void pwm_period_expired(struct _pwm_device *device)
{
    1fc4:	b580      	push	{r7, lr}
    1fc6:	b084      	sub	sp, #16
    1fc8:	af00      	add	r7, sp, #0
    1fca:	6078      	str	r0, [r7, #4]
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);
    1fcc:	687b      	ldr	r3, [r7, #4]
    1fce:	60fb      	str	r3, [r7, #12]

	if (descr->pwm_cb.period) {
    1fd0:	68fb      	ldr	r3, [r7, #12]
    1fd2:	695b      	ldr	r3, [r3, #20]
    1fd4:	2b00      	cmp	r3, #0
    1fd6:	d003      	beq.n	1fe0 <pwm_period_expired+0x1c>
		descr->pwm_cb.period(descr);
    1fd8:	68fb      	ldr	r3, [r7, #12]
    1fda:	695b      	ldr	r3, [r3, #20]
    1fdc:	68f8      	ldr	r0, [r7, #12]
    1fde:	4798      	blx	r3
	}
}
    1fe0:	bf00      	nop
    1fe2:	3710      	adds	r7, #16
    1fe4:	46bd      	mov	sp, r7
    1fe6:	bd80      	pop	{r7, pc}

00001fe8 <pwm_detect_fault>:

/**
 * \internal Process interrupts caused by pwm fault
 */
static void pwm_detect_fault(struct _pwm_device *device)
{
    1fe8:	b580      	push	{r7, lr}
    1fea:	b084      	sub	sp, #16
    1fec:	af00      	add	r7, sp, #0
    1fee:	6078      	str	r0, [r7, #4]
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);
    1ff0:	687b      	ldr	r3, [r7, #4]
    1ff2:	60fb      	str	r3, [r7, #12]

	if (descr->pwm_cb.error) {
    1ff4:	68fb      	ldr	r3, [r7, #12]
    1ff6:	699b      	ldr	r3, [r3, #24]
    1ff8:	2b00      	cmp	r3, #0
    1ffa:	d003      	beq.n	2004 <pwm_detect_fault+0x1c>
		descr->pwm_cb.error(descr);
    1ffc:	68fb      	ldr	r3, [r7, #12]
    1ffe:	699b      	ldr	r3, [r3, #24]
    2000:	68f8      	ldr	r0, [r7, #12]
    2002:	4798      	blx	r3
	}
}
    2004:	bf00      	nop
    2006:	3710      	adds	r7, #16
    2008:	46bd      	mov	sp, r7
    200a:	bd80      	pop	{r7, pc}

0000200c <qspi_sync_init>:
 * \brief Driver version
 */
#define QSPI_SYNC_DRIVER_VERSION 0x00000001u

int32_t qspi_sync_init(struct qspi_sync_descriptor *qspi, void *const hw)
{
    200c:	b580      	push	{r7, lr}
    200e:	b082      	sub	sp, #8
    2010:	af00      	add	r7, sp, #0
    2012:	6078      	str	r0, [r7, #4]
    2014:	6039      	str	r1, [r7, #0]
	ASSERT(qspi && hw);
    2016:	687b      	ldr	r3, [r7, #4]
    2018:	2b00      	cmp	r3, #0
    201a:	d004      	beq.n	2026 <qspi_sync_init+0x1a>
    201c:	683b      	ldr	r3, [r7, #0]
    201e:	2b00      	cmp	r3, #0
    2020:	d001      	beq.n	2026 <qspi_sync_init+0x1a>
    2022:	2301      	movs	r3, #1
    2024:	e000      	b.n	2028 <qspi_sync_init+0x1c>
    2026:	2300      	movs	r3, #0
    2028:	f003 0301 	and.w	r3, r3, #1
    202c:	b2db      	uxtb	r3, r3
    202e:	2231      	movs	r2, #49	; 0x31
    2030:	4906      	ldr	r1, [pc, #24]	; (204c <qspi_sync_init+0x40>)
    2032:	4618      	mov	r0, r3
    2034:	4b06      	ldr	r3, [pc, #24]	; (2050 <qspi_sync_init+0x44>)
    2036:	4798      	blx	r3

	return _qspi_sync_init(&qspi->dev, hw);
    2038:	687b      	ldr	r3, [r7, #4]
    203a:	6839      	ldr	r1, [r7, #0]
    203c:	4618      	mov	r0, r3
    203e:	4b05      	ldr	r3, [pc, #20]	; (2054 <qspi_sync_init+0x48>)
    2040:	4798      	blx	r3
    2042:	4603      	mov	r3, r0
}
    2044:	4618      	mov	r0, r3
    2046:	3708      	adds	r7, #8
    2048:	46bd      	mov	sp, r7
    204a:	bd80      	pop	{r7, pc}
    204c:	000132cc 	.word	0x000132cc
    2050:	00002dc9 	.word	0x00002dc9
    2054:	000052d5 	.word	0x000052d5

00002058 <qspi_sync_enable>:

	return _qspi_sync_deinit(&qspi->dev);
}

int32_t qspi_sync_enable(struct qspi_sync_descriptor *qspi)
{
    2058:	b580      	push	{r7, lr}
    205a:	b082      	sub	sp, #8
    205c:	af00      	add	r7, sp, #0
    205e:	6078      	str	r0, [r7, #4]
	ASSERT(qspi);
    2060:	687b      	ldr	r3, [r7, #4]
    2062:	2b00      	cmp	r3, #0
    2064:	bf14      	ite	ne
    2066:	2301      	movne	r3, #1
    2068:	2300      	moveq	r3, #0
    206a:	b2db      	uxtb	r3, r3
    206c:	223f      	movs	r2, #63	; 0x3f
    206e:	4906      	ldr	r1, [pc, #24]	; (2088 <qspi_sync_enable+0x30>)
    2070:	4618      	mov	r0, r3
    2072:	4b06      	ldr	r3, [pc, #24]	; (208c <qspi_sync_enable+0x34>)
    2074:	4798      	blx	r3

	return _qspi_sync_enable(&qspi->dev);
    2076:	687b      	ldr	r3, [r7, #4]
    2078:	4618      	mov	r0, r3
    207a:	4b05      	ldr	r3, [pc, #20]	; (2090 <qspi_sync_enable+0x38>)
    207c:	4798      	blx	r3
    207e:	4603      	mov	r3, r0
}
    2080:	4618      	mov	r0, r3
    2082:	3708      	adds	r7, #8
    2084:	46bd      	mov	sp, r7
    2086:	bd80      	pop	{r7, pc}
    2088:	000132cc 	.word	0x000132cc
    208c:	00002dc9 	.word	0x00002dc9
    2090:	00005349 	.word	0x00005349

00002094 <qspi_sync_disable>:

int32_t qspi_sync_disable(struct qspi_sync_descriptor *qspi)
{
    2094:	b580      	push	{r7, lr}
    2096:	b082      	sub	sp, #8
    2098:	af00      	add	r7, sp, #0
    209a:	6078      	str	r0, [r7, #4]
	ASSERT(qspi);
    209c:	687b      	ldr	r3, [r7, #4]
    209e:	2b00      	cmp	r3, #0
    20a0:	bf14      	ite	ne
    20a2:	2301      	movne	r3, #1
    20a4:	2300      	moveq	r3, #0
    20a6:	b2db      	uxtb	r3, r3
    20a8:	2246      	movs	r2, #70	; 0x46
    20aa:	4906      	ldr	r1, [pc, #24]	; (20c4 <qspi_sync_disable+0x30>)
    20ac:	4618      	mov	r0, r3
    20ae:	4b06      	ldr	r3, [pc, #24]	; (20c8 <qspi_sync_disable+0x34>)
    20b0:	4798      	blx	r3

	return _qspi_sync_disable(&qspi->dev);
    20b2:	687b      	ldr	r3, [r7, #4]
    20b4:	4618      	mov	r0, r3
    20b6:	4b05      	ldr	r3, [pc, #20]	; (20cc <qspi_sync_disable+0x38>)
    20b8:	4798      	blx	r3
    20ba:	4603      	mov	r3, r0
}
    20bc:	4618      	mov	r0, r3
    20be:	3708      	adds	r7, #8
    20c0:	46bd      	mov	sp, r7
    20c2:	bd80      	pop	{r7, pc}
    20c4:	000132cc 	.word	0x000132cc
    20c8:	00002dc9 	.word	0x00002dc9
    20cc:	0000536d 	.word	0x0000536d

000020d0 <qspi_sync_serial_run_command>:

int32_t qspi_sync_serial_run_command(struct qspi_sync_descriptor *qspi, const struct _qspi_command *cmd)
{
    20d0:	b580      	push	{r7, lr}
    20d2:	b082      	sub	sp, #8
    20d4:	af00      	add	r7, sp, #0
    20d6:	6078      	str	r0, [r7, #4]
    20d8:	6039      	str	r1, [r7, #0]
	ASSERT(qspi && cmd);
    20da:	687b      	ldr	r3, [r7, #4]
    20dc:	2b00      	cmp	r3, #0
    20de:	d004      	beq.n	20ea <qspi_sync_serial_run_command+0x1a>
    20e0:	683b      	ldr	r3, [r7, #0]
    20e2:	2b00      	cmp	r3, #0
    20e4:	d001      	beq.n	20ea <qspi_sync_serial_run_command+0x1a>
    20e6:	2301      	movs	r3, #1
    20e8:	e000      	b.n	20ec <qspi_sync_serial_run_command+0x1c>
    20ea:	2300      	movs	r3, #0
    20ec:	f003 0301 	and.w	r3, r3, #1
    20f0:	b2db      	uxtb	r3, r3
    20f2:	224d      	movs	r2, #77	; 0x4d
    20f4:	4906      	ldr	r1, [pc, #24]	; (2110 <qspi_sync_serial_run_command+0x40>)
    20f6:	4618      	mov	r0, r3
    20f8:	4b06      	ldr	r3, [pc, #24]	; (2114 <qspi_sync_serial_run_command+0x44>)
    20fa:	4798      	blx	r3

	return _qspi_sync_serial_run_command(&qspi->dev, cmd);
    20fc:	687b      	ldr	r3, [r7, #4]
    20fe:	6839      	ldr	r1, [r7, #0]
    2100:	4618      	mov	r0, r3
    2102:	4b05      	ldr	r3, [pc, #20]	; (2118 <qspi_sync_serial_run_command+0x48>)
    2104:	4798      	blx	r3
    2106:	4603      	mov	r3, r0
}
    2108:	4618      	mov	r0, r3
    210a:	3708      	adds	r7, #8
    210c:	46bd      	mov	sp, r7
    210e:	bd80      	pop	{r7, pc}
    2110:	000132cc 	.word	0x000132cc
    2114:	00002dc9 	.word	0x00002dc9
    2118:	000054b9 	.word	0x000054b9

0000211c <spi_m_sync_init>:
	ASSERT(spi);
	spi->func = (struct _spi_m_sync_hpl_interface *)func;
}

int32_t spi_m_sync_init(struct spi_m_sync_descriptor *spi, void *const hw)
{
    211c:	b580      	push	{r7, lr}
    211e:	b084      	sub	sp, #16
    2120:	af00      	add	r7, sp, #0
    2122:	6078      	str	r0, [r7, #4]
    2124:	6039      	str	r1, [r7, #0]
	int32_t rc = 0;
    2126:	2300      	movs	r3, #0
    2128:	60fb      	str	r3, [r7, #12]
	ASSERT(spi && hw);
    212a:	687b      	ldr	r3, [r7, #4]
    212c:	2b00      	cmp	r3, #0
    212e:	d004      	beq.n	213a <spi_m_sync_init+0x1e>
    2130:	683b      	ldr	r3, [r7, #0]
    2132:	2b00      	cmp	r3, #0
    2134:	d001      	beq.n	213a <spi_m_sync_init+0x1e>
    2136:	2301      	movs	r3, #1
    2138:	e000      	b.n	213c <spi_m_sync_init+0x20>
    213a:	2300      	movs	r3, #0
    213c:	f003 0301 	and.w	r3, r3, #1
    2140:	b2db      	uxtb	r3, r3
    2142:	2240      	movs	r2, #64	; 0x40
    2144:	4910      	ldr	r1, [pc, #64]	; (2188 <spi_m_sync_init+0x6c>)
    2146:	4618      	mov	r0, r3
    2148:	4b10      	ldr	r3, [pc, #64]	; (218c <spi_m_sync_init+0x70>)
    214a:	4798      	blx	r3
	spi->dev.prvt = (void *)hw;
    214c:	687b      	ldr	r3, [r7, #4]
    214e:	683a      	ldr	r2, [r7, #0]
    2150:	605a      	str	r2, [r3, #4]
	rc            = _spi_m_sync_init(&spi->dev, hw);
    2152:	687b      	ldr	r3, [r7, #4]
    2154:	3304      	adds	r3, #4
    2156:	6839      	ldr	r1, [r7, #0]
    2158:	4618      	mov	r0, r3
    215a:	4b0d      	ldr	r3, [pc, #52]	; (2190 <spi_m_sync_init+0x74>)
    215c:	4798      	blx	r3
    215e:	60f8      	str	r0, [r7, #12]

	if (rc < 0) {
    2160:	68fb      	ldr	r3, [r7, #12]
    2162:	2b00      	cmp	r3, #0
    2164:	da01      	bge.n	216a <spi_m_sync_init+0x4e>
		return rc;
    2166:	68fb      	ldr	r3, [r7, #12]
    2168:	e00a      	b.n	2180 <spi_m_sync_init+0x64>
	}

	spi->flags    = SPI_DEACTIVATE_NEXT;
    216a:	687b      	ldr	r3, [r7, #4]
    216c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    2170:	829a      	strh	r2, [r3, #20]
	spi->io.read  = _spi_m_sync_io_read;
    2172:	687b      	ldr	r3, [r7, #4]
    2174:	4a07      	ldr	r2, [pc, #28]	; (2194 <spi_m_sync_init+0x78>)
    2176:	611a      	str	r2, [r3, #16]
	spi->io.write = _spi_m_sync_io_write;
    2178:	687b      	ldr	r3, [r7, #4]
    217a:	4a07      	ldr	r2, [pc, #28]	; (2198 <spi_m_sync_init+0x7c>)
    217c:	60da      	str	r2, [r3, #12]

	return ERR_NONE;
    217e:	2300      	movs	r3, #0
}
    2180:	4618      	mov	r0, r3
    2182:	3710      	adds	r7, #16
    2184:	46bd      	mov	sp, r7
    2186:	bd80      	pop	{r7, pc}
    2188:	000132e8 	.word	0x000132e8
    218c:	00002dc9 	.word	0x00002dc9
    2190:	00006645 	.word	0x00006645
    2194:	0000219d 	.word	0x0000219d
    2198:	000021f5 	.word	0x000021f5

0000219c <_spi_m_sync_io_read>:
 *  \return Operation status.
 *  \retval size Success.
 *  \retval >=0 Time out, with number of characters read.
 */
static int32_t _spi_m_sync_io_read(struct io_descriptor *io, uint8_t *buf, const uint16_t length)
{
    219c:	b580      	push	{r7, lr}
    219e:	b088      	sub	sp, #32
    21a0:	af00      	add	r7, sp, #0
    21a2:	60f8      	str	r0, [r7, #12]
    21a4:	60b9      	str	r1, [r7, #8]
    21a6:	4613      	mov	r3, r2
    21a8:	80fb      	strh	r3, [r7, #6]
	ASSERT(io);
    21aa:	68fb      	ldr	r3, [r7, #12]
    21ac:	2b00      	cmp	r3, #0
    21ae:	bf14      	ite	ne
    21b0:	2301      	movne	r3, #1
    21b2:	2300      	moveq	r3, #0
    21b4:	b2db      	uxtb	r3, r3
    21b6:	2287      	movs	r2, #135	; 0x87
    21b8:	490b      	ldr	r1, [pc, #44]	; (21e8 <_spi_m_sync_io_read+0x4c>)
    21ba:	4618      	mov	r0, r3
    21bc:	4b0b      	ldr	r3, [pc, #44]	; (21ec <_spi_m_sync_io_read+0x50>)
    21be:	4798      	blx	r3

	struct spi_m_sync_descriptor *spi = CONTAINER_OF(io, struct spi_m_sync_descriptor, io);
    21c0:	68fb      	ldr	r3, [r7, #12]
    21c2:	3b0c      	subs	r3, #12
    21c4:	61fb      	str	r3, [r7, #28]
	struct spi_xfer               xfer;

	xfer.rxbuf = buf;
    21c6:	68bb      	ldr	r3, [r7, #8]
    21c8:	617b      	str	r3, [r7, #20]
	xfer.txbuf = 0;
    21ca:	2300      	movs	r3, #0
    21cc:	613b      	str	r3, [r7, #16]
	xfer.size  = length;
    21ce:	88fb      	ldrh	r3, [r7, #6]
    21d0:	61bb      	str	r3, [r7, #24]

	return spi_m_sync_transfer(spi, &xfer);
    21d2:	f107 0310 	add.w	r3, r7, #16
    21d6:	4619      	mov	r1, r3
    21d8:	69f8      	ldr	r0, [r7, #28]
    21da:	4b05      	ldr	r3, [pc, #20]	; (21f0 <_spi_m_sync_io_read+0x54>)
    21dc:	4798      	blx	r3
    21de:	4603      	mov	r3, r0
}
    21e0:	4618      	mov	r0, r3
    21e2:	3720      	adds	r7, #32
    21e4:	46bd      	mov	sp, r7
    21e6:	bd80      	pop	{r7, pc}
    21e8:	000132e8 	.word	0x000132e8
    21ec:	00002dc9 	.word	0x00002dc9
    21f0:	0000224d 	.word	0x0000224d

000021f4 <_spi_m_sync_io_write>:
 *  \return Operation status.
 *  \retval size Success.
 *  \retval >=0 Timeout, with number of characters transferred.
 */
static int32_t _spi_m_sync_io_write(struct io_descriptor *const io, const uint8_t *const buf, const uint16_t length)
{
    21f4:	b580      	push	{r7, lr}
    21f6:	b088      	sub	sp, #32
    21f8:	af00      	add	r7, sp, #0
    21fa:	60f8      	str	r0, [r7, #12]
    21fc:	60b9      	str	r1, [r7, #8]
    21fe:	4613      	mov	r3, r2
    2200:	80fb      	strh	r3, [r7, #6]
	ASSERT(io);
    2202:	68fb      	ldr	r3, [r7, #12]
    2204:	2b00      	cmp	r3, #0
    2206:	bf14      	ite	ne
    2208:	2301      	movne	r3, #1
    220a:	2300      	moveq	r3, #0
    220c:	b2db      	uxtb	r3, r3
    220e:	22a3      	movs	r2, #163	; 0xa3
    2210:	490b      	ldr	r1, [pc, #44]	; (2240 <_spi_m_sync_io_write+0x4c>)
    2212:	4618      	mov	r0, r3
    2214:	4b0b      	ldr	r3, [pc, #44]	; (2244 <_spi_m_sync_io_write+0x50>)
    2216:	4798      	blx	r3

	struct spi_m_sync_descriptor *spi = CONTAINER_OF(io, struct spi_m_sync_descriptor, io);
    2218:	68fb      	ldr	r3, [r7, #12]
    221a:	3b0c      	subs	r3, #12
    221c:	61fb      	str	r3, [r7, #28]
	struct spi_xfer               xfer;

	xfer.rxbuf = 0;
    221e:	2300      	movs	r3, #0
    2220:	617b      	str	r3, [r7, #20]
	xfer.txbuf = (uint8_t *)buf;
    2222:	68bb      	ldr	r3, [r7, #8]
    2224:	613b      	str	r3, [r7, #16]
	xfer.size  = length;
    2226:	88fb      	ldrh	r3, [r7, #6]
    2228:	61bb      	str	r3, [r7, #24]

	return spi_m_sync_transfer(spi, &xfer);
    222a:	f107 0310 	add.w	r3, r7, #16
    222e:	4619      	mov	r1, r3
    2230:	69f8      	ldr	r0, [r7, #28]
    2232:	4b05      	ldr	r3, [pc, #20]	; (2248 <_spi_m_sync_io_write+0x54>)
    2234:	4798      	blx	r3
    2236:	4603      	mov	r3, r0
}
    2238:	4618      	mov	r0, r3
    223a:	3720      	adds	r7, #32
    223c:	46bd      	mov	sp, r7
    223e:	bd80      	pop	{r7, pc}
    2240:	000132e8 	.word	0x000132e8
    2244:	00002dc9 	.word	0x00002dc9
    2248:	0000224d 	.word	0x0000224d

0000224c <spi_m_sync_transfer>:

int32_t spi_m_sync_transfer(struct spi_m_sync_descriptor *spi, const struct spi_xfer *p_xfer)
{
    224c:	b580      	push	{r7, lr}
    224e:	b086      	sub	sp, #24
    2250:	af00      	add	r7, sp, #0
    2252:	6078      	str	r0, [r7, #4]
    2254:	6039      	str	r1, [r7, #0]
	struct spi_msg msg;

	ASSERT(spi && p_xfer);
    2256:	687b      	ldr	r3, [r7, #4]
    2258:	2b00      	cmp	r3, #0
    225a:	d004      	beq.n	2266 <spi_m_sync_transfer+0x1a>
    225c:	683b      	ldr	r3, [r7, #0]
    225e:	2b00      	cmp	r3, #0
    2260:	d001      	beq.n	2266 <spi_m_sync_transfer+0x1a>
    2262:	2301      	movs	r3, #1
    2264:	e000      	b.n	2268 <spi_m_sync_transfer+0x1c>
    2266:	2300      	movs	r3, #0
    2268:	f003 0301 	and.w	r3, r3, #1
    226c:	b2db      	uxtb	r3, r3
    226e:	22b3      	movs	r2, #179	; 0xb3
    2270:	490c      	ldr	r1, [pc, #48]	; (22a4 <spi_m_sync_transfer+0x58>)
    2272:	4618      	mov	r0, r3
    2274:	4b0c      	ldr	r3, [pc, #48]	; (22a8 <spi_m_sync_transfer+0x5c>)
    2276:	4798      	blx	r3

	msg.txbuf = p_xfer->txbuf;
    2278:	683b      	ldr	r3, [r7, #0]
    227a:	681b      	ldr	r3, [r3, #0]
    227c:	60fb      	str	r3, [r7, #12]
	msg.rxbuf = p_xfer->rxbuf;
    227e:	683b      	ldr	r3, [r7, #0]
    2280:	685b      	ldr	r3, [r3, #4]
    2282:	613b      	str	r3, [r7, #16]
	msg.size  = p_xfer->size;
    2284:	683b      	ldr	r3, [r7, #0]
    2286:	689b      	ldr	r3, [r3, #8]
    2288:	617b      	str	r3, [r7, #20]
	return _spi_m_sync_trans(&spi->dev, &msg);
    228a:	687b      	ldr	r3, [r7, #4]
    228c:	3304      	adds	r3, #4
    228e:	f107 020c 	add.w	r2, r7, #12
    2292:	4611      	mov	r1, r2
    2294:	4618      	mov	r0, r3
    2296:	4b05      	ldr	r3, [pc, #20]	; (22ac <spi_m_sync_transfer+0x60>)
    2298:	4798      	blx	r3
    229a:	4603      	mov	r3, r0
}
    229c:	4618      	mov	r0, r3
    229e:	3718      	adds	r7, #24
    22a0:	46bd      	mov	sp, r7
    22a2:	bd80      	pop	{r7, pc}
    22a4:	000132e8 	.word	0x000132e8
    22a8:	00002dc9 	.word	0x00002dc9
    22ac:	000068a5 	.word	0x000068a5

000022b0 <list_get_head>:
 *
 * \return A pointer to the head of the given list or NULL if the list is
 * empty
 */
static inline void *list_get_head(const struct list_descriptor *const list)
{
    22b0:	b480      	push	{r7}
    22b2:	b083      	sub	sp, #12
    22b4:	af00      	add	r7, sp, #0
    22b6:	6078      	str	r0, [r7, #4]
	return (void *)list->head;
    22b8:	687b      	ldr	r3, [r7, #4]
    22ba:	681b      	ldr	r3, [r3, #0]
}
    22bc:	4618      	mov	r0, r3
    22be:	370c      	adds	r7, #12
    22c0:	46bd      	mov	sp, r7
    22c2:	f85d 7b04 	ldr.w	r7, [sp], #4
    22c6:	4770      	bx	lr

000022c8 <list_get_next_element>:
 *
 * \return A pointer to the next list element or NULL if there is not next
 * element
 */
static inline void *list_get_next_element(const void *const element)
{
    22c8:	b480      	push	{r7}
    22ca:	b083      	sub	sp, #12
    22cc:	af00      	add	r7, sp, #0
    22ce:	6078      	str	r0, [r7, #4]
	return element ? ((struct list_element *)element)->next : NULL;
    22d0:	687b      	ldr	r3, [r7, #4]
    22d2:	2b00      	cmp	r3, #0
    22d4:	d002      	beq.n	22dc <list_get_next_element+0x14>
    22d6:	687b      	ldr	r3, [r7, #4]
    22d8:	681b      	ldr	r3, [r3, #0]
    22da:	e000      	b.n	22de <list_get_next_element+0x16>
    22dc:	2300      	movs	r3, #0
}
    22de:	4618      	mov	r0, r3
    22e0:	370c      	adds	r7, #12
    22e2:	46bd      	mov	sp, r7
    22e4:	f85d 7b04 	ldr.w	r7, [sp], #4
    22e8:	4770      	bx	lr
	...

000022ec <timer_init>:

/**
 * \brief Initialize timer
 */
int32_t timer_init(struct timer_descriptor *const descr, void *const hw, struct _timer_hpl_interface *const func)
{
    22ec:	b580      	push	{r7, lr}
    22ee:	b084      	sub	sp, #16
    22f0:	af00      	add	r7, sp, #0
    22f2:	60f8      	str	r0, [r7, #12]
    22f4:	60b9      	str	r1, [r7, #8]
    22f6:	607a      	str	r2, [r7, #4]
	ASSERT(descr && hw && func);
    22f8:	68fb      	ldr	r3, [r7, #12]
    22fa:	2b00      	cmp	r3, #0
    22fc:	d007      	beq.n	230e <timer_init+0x22>
    22fe:	68bb      	ldr	r3, [r7, #8]
    2300:	2b00      	cmp	r3, #0
    2302:	d004      	beq.n	230e <timer_init+0x22>
    2304:	687b      	ldr	r3, [r7, #4]
    2306:	2b00      	cmp	r3, #0
    2308:	d001      	beq.n	230e <timer_init+0x22>
    230a:	2301      	movs	r3, #1
    230c:	e000      	b.n	2310 <timer_init+0x24>
    230e:	2300      	movs	r3, #0
    2310:	f003 0301 	and.w	r3, r3, #1
    2314:	b2db      	uxtb	r3, r3
    2316:	223b      	movs	r2, #59	; 0x3b
    2318:	490c      	ldr	r1, [pc, #48]	; (234c <timer_init+0x60>)
    231a:	4618      	mov	r0, r3
    231c:	4b0c      	ldr	r3, [pc, #48]	; (2350 <timer_init+0x64>)
    231e:	4798      	blx	r3
	descr->func = func;
    2320:	68fb      	ldr	r3, [r7, #12]
    2322:	687a      	ldr	r2, [r7, #4]
    2324:	601a      	str	r2, [r3, #0]
	descr->func->init(&descr->device, hw);
    2326:	68fb      	ldr	r3, [r7, #12]
    2328:	681b      	ldr	r3, [r3, #0]
    232a:	681b      	ldr	r3, [r3, #0]
    232c:	68fa      	ldr	r2, [r7, #12]
    232e:	3204      	adds	r2, #4
    2330:	68b9      	ldr	r1, [r7, #8]
    2332:	4610      	mov	r0, r2
    2334:	4798      	blx	r3
	descr->time                           = 0;
    2336:	68fb      	ldr	r3, [r7, #12]
    2338:	2200      	movs	r2, #0
    233a:	615a      	str	r2, [r3, #20]
	descr->device.timer_cb.period_expired = timer_process_counted;
    233c:	68fb      	ldr	r3, [r7, #12]
    233e:	4a05      	ldr	r2, [pc, #20]	; (2354 <timer_init+0x68>)
    2340:	605a      	str	r2, [r3, #4]

	return ERR_NONE;
    2342:	2300      	movs	r3, #0
}
    2344:	4618      	mov	r0, r3
    2346:	3710      	adds	r7, #16
    2348:	46bd      	mov	sp, r7
    234a:	bd80      	pop	{r7, pc}
    234c:	00013304 	.word	0x00013304
    2350:	00002dc9 	.word	0x00002dc9
    2354:	00002409 	.word	0x00002409

00002358 <timer_add_timer_task>:
 * \param[in] head The pointer to the head of timer task list
 * \param[in] task The pointer to task to add
 * \param[in] time Current timer time
 */
static void timer_add_timer_task(struct list_descriptor *list, struct timer_task *const new_task, const uint32_t time)
{
    2358:	b580      	push	{r7, lr}
    235a:	b088      	sub	sp, #32
    235c:	af00      	add	r7, sp, #0
    235e:	60f8      	str	r0, [r7, #12]
    2360:	60b9      	str	r1, [r7, #8]
    2362:	607a      	str	r2, [r7, #4]
	struct timer_task *it, *prev = NULL, *head = (struct timer_task *)list_get_head(list);
    2364:	2300      	movs	r3, #0
    2366:	61bb      	str	r3, [r7, #24]
    2368:	68f8      	ldr	r0, [r7, #12]
    236a:	4b23      	ldr	r3, [pc, #140]	; (23f8 <timer_add_timer_task+0xa0>)
    236c:	4798      	blx	r3
    236e:	6138      	str	r0, [r7, #16]

	if (!head) {
    2370:	693b      	ldr	r3, [r7, #16]
    2372:	2b00      	cmp	r3, #0
    2374:	d104      	bne.n	2380 <timer_add_timer_task+0x28>
		list_insert_as_head(list, new_task);
    2376:	68b9      	ldr	r1, [r7, #8]
    2378:	68f8      	ldr	r0, [r7, #12]
    237a:	4b20      	ldr	r3, [pc, #128]	; (23fc <timer_add_timer_task+0xa4>)
    237c:	4798      	blx	r3
		return;
    237e:	e037      	b.n	23f0 <timer_add_timer_task+0x98>
	}

	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
    2380:	693b      	ldr	r3, [r7, #16]
    2382:	61fb      	str	r3, [r7, #28]
    2384:	e022      	b.n	23cc <timer_add_timer_task+0x74>
		uint32_t time_left;

		if (it->time_label <= time) {
    2386:	69fb      	ldr	r3, [r7, #28]
    2388:	685a      	ldr	r2, [r3, #4]
    238a:	687b      	ldr	r3, [r7, #4]
    238c:	429a      	cmp	r2, r3
    238e:	d808      	bhi.n	23a2 <timer_add_timer_task+0x4a>
			time_left = it->interval - (time - it->time_label);
    2390:	69fb      	ldr	r3, [r7, #28]
    2392:	689a      	ldr	r2, [r3, #8]
    2394:	69fb      	ldr	r3, [r7, #28]
    2396:	6859      	ldr	r1, [r3, #4]
    2398:	687b      	ldr	r3, [r7, #4]
    239a:	1acb      	subs	r3, r1, r3
    239c:	4413      	add	r3, r2
    239e:	617b      	str	r3, [r7, #20]
    23a0:	e009      	b.n	23b6 <timer_add_timer_task+0x5e>
		} else {
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
    23a2:	69fb      	ldr	r3, [r7, #28]
    23a4:	689a      	ldr	r2, [r3, #8]
    23a6:	69fb      	ldr	r3, [r7, #28]
    23a8:	685b      	ldr	r3, [r3, #4]
    23aa:	441a      	add	r2, r3
    23ac:	687b      	ldr	r3, [r7, #4]
    23ae:	425b      	negs	r3, r3
    23b0:	4413      	add	r3, r2
    23b2:	3301      	adds	r3, #1
    23b4:	617b      	str	r3, [r7, #20]
		}
		if (time_left >= new_task->interval)
    23b6:	68bb      	ldr	r3, [r7, #8]
    23b8:	689a      	ldr	r2, [r3, #8]
    23ba:	697b      	ldr	r3, [r7, #20]
    23bc:	429a      	cmp	r2, r3
    23be:	d909      	bls.n	23d4 <timer_add_timer_task+0x7c>
			break;
		prev = it;
    23c0:	69fb      	ldr	r3, [r7, #28]
    23c2:	61bb      	str	r3, [r7, #24]
	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
    23c4:	69f8      	ldr	r0, [r7, #28]
    23c6:	4b0e      	ldr	r3, [pc, #56]	; (2400 <timer_add_timer_task+0xa8>)
    23c8:	4798      	blx	r3
    23ca:	61f8      	str	r0, [r7, #28]
    23cc:	69fb      	ldr	r3, [r7, #28]
    23ce:	2b00      	cmp	r3, #0
    23d0:	d1d9      	bne.n	2386 <timer_add_timer_task+0x2e>
    23d2:	e000      	b.n	23d6 <timer_add_timer_task+0x7e>
			break;
    23d4:	bf00      	nop
	}

	if (it == head) {
    23d6:	69fa      	ldr	r2, [r7, #28]
    23d8:	693b      	ldr	r3, [r7, #16]
    23da:	429a      	cmp	r2, r3
    23dc:	d104      	bne.n	23e8 <timer_add_timer_task+0x90>
		list_insert_as_head(list, new_task);
    23de:	68b9      	ldr	r1, [r7, #8]
    23e0:	68f8      	ldr	r0, [r7, #12]
    23e2:	4b06      	ldr	r3, [pc, #24]	; (23fc <timer_add_timer_task+0xa4>)
    23e4:	4798      	blx	r3
    23e6:	e003      	b.n	23f0 <timer_add_timer_task+0x98>
	} else {
		list_insert_after(prev, new_task);
    23e8:	68b9      	ldr	r1, [r7, #8]
    23ea:	69b8      	ldr	r0, [r7, #24]
    23ec:	4b05      	ldr	r3, [pc, #20]	; (2404 <timer_add_timer_task+0xac>)
    23ee:	4798      	blx	r3
	}
}
    23f0:	3720      	adds	r7, #32
    23f2:	46bd      	mov	sp, r7
    23f4:	bd80      	pop	{r7, pc}
    23f6:	bf00      	nop
    23f8:	000022b1 	.word	0x000022b1
    23fc:	00002e29 	.word	0x00002e29
    2400:	000022c9 	.word	0x000022c9
    2404:	00002e81 	.word	0x00002e81

00002408 <timer_process_counted>:

/**
 * \internal Process interrupts
 */
static void timer_process_counted(struct _timer_device *device)
{
    2408:	b580      	push	{r7, lr}
    240a:	b086      	sub	sp, #24
    240c:	af00      	add	r7, sp, #0
    240e:	6078      	str	r0, [r7, #4]
	struct timer_descriptor *timer = CONTAINER_OF(device, struct timer_descriptor, device);
    2410:	687b      	ldr	r3, [r7, #4]
    2412:	3b04      	subs	r3, #4
    2414:	613b      	str	r3, [r7, #16]
	struct timer_task *      it    = (struct timer_task *)list_get_head(&timer->tasks);
    2416:	693b      	ldr	r3, [r7, #16]
    2418:	3318      	adds	r3, #24
    241a:	4618      	mov	r0, r3
    241c:	4b27      	ldr	r3, [pc, #156]	; (24bc <timer_process_counted+0xb4>)
    241e:	4798      	blx	r3
    2420:	6178      	str	r0, [r7, #20]
	uint32_t                 time  = ++timer->time;
    2422:	693b      	ldr	r3, [r7, #16]
    2424:	695b      	ldr	r3, [r3, #20]
    2426:	1c5a      	adds	r2, r3, #1
    2428:	693b      	ldr	r3, [r7, #16]
    242a:	615a      	str	r2, [r3, #20]
    242c:	693b      	ldr	r3, [r7, #16]
    242e:	695b      	ldr	r3, [r3, #20]
    2430:	60fb      	str	r3, [r7, #12]

	if ((timer->flags & TIMER_FLAG_QUEUE_IS_TAKEN) || (timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED)) {
    2432:	693b      	ldr	r3, [r7, #16]
    2434:	7f1b      	ldrb	r3, [r3, #28]
    2436:	b2db      	uxtb	r3, r3
    2438:	f003 0301 	and.w	r3, r3, #1
    243c:	2b00      	cmp	r3, #0
    243e:	d106      	bne.n	244e <timer_process_counted+0x46>
    2440:	693b      	ldr	r3, [r7, #16]
    2442:	7f1b      	ldrb	r3, [r3, #28]
    2444:	b2db      	uxtb	r3, r3
    2446:	f003 0302 	and.w	r3, r3, #2
    244a:	2b00      	cmp	r3, #0
    244c:	d027      	beq.n	249e <timer_process_counted+0x96>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
    244e:	693b      	ldr	r3, [r7, #16]
    2450:	7f1b      	ldrb	r3, [r3, #28]
    2452:	b2db      	uxtb	r3, r3
    2454:	f043 0302 	orr.w	r3, r3, #2
    2458:	b2da      	uxtb	r2, r3
    245a:	693b      	ldr	r3, [r7, #16]
    245c:	771a      	strb	r2, [r3, #28]
		return;
    245e:	e029      	b.n	24b4 <timer_process_counted+0xac>
	}

	while (it && ((time - it->time_label) >= it->interval)) {
		struct timer_task *tmp = it;
    2460:	697b      	ldr	r3, [r7, #20]
    2462:	60bb      	str	r3, [r7, #8]

		list_remove_head(&timer->tasks);
    2464:	693b      	ldr	r3, [r7, #16]
    2466:	3318      	adds	r3, #24
    2468:	4618      	mov	r0, r3
    246a:	4b15      	ldr	r3, [pc, #84]	; (24c0 <timer_process_counted+0xb8>)
    246c:	4798      	blx	r3
		if (TIMER_TASK_REPEAT == tmp->mode) {
    246e:	68bb      	ldr	r3, [r7, #8]
    2470:	7c1b      	ldrb	r3, [r3, #16]
    2472:	2b01      	cmp	r3, #1
    2474:	d109      	bne.n	248a <timer_process_counted+0x82>
			tmp->time_label = time;
    2476:	68bb      	ldr	r3, [r7, #8]
    2478:	68fa      	ldr	r2, [r7, #12]
    247a:	605a      	str	r2, [r3, #4]
			timer_add_timer_task(&timer->tasks, tmp, time);
    247c:	693b      	ldr	r3, [r7, #16]
    247e:	3318      	adds	r3, #24
    2480:	68fa      	ldr	r2, [r7, #12]
    2482:	68b9      	ldr	r1, [r7, #8]
    2484:	4618      	mov	r0, r3
    2486:	4b0f      	ldr	r3, [pc, #60]	; (24c4 <timer_process_counted+0xbc>)
    2488:	4798      	blx	r3
		}
		it = (struct timer_task *)list_get_head(&timer->tasks);
    248a:	693b      	ldr	r3, [r7, #16]
    248c:	3318      	adds	r3, #24
    248e:	4618      	mov	r0, r3
    2490:	4b0a      	ldr	r3, [pc, #40]	; (24bc <timer_process_counted+0xb4>)
    2492:	4798      	blx	r3
    2494:	6178      	str	r0, [r7, #20]

		tmp->cb(tmp);
    2496:	68bb      	ldr	r3, [r7, #8]
    2498:	68db      	ldr	r3, [r3, #12]
    249a:	68b8      	ldr	r0, [r7, #8]
    249c:	4798      	blx	r3
	while (it && ((time - it->time_label) >= it->interval)) {
    249e:	697b      	ldr	r3, [r7, #20]
    24a0:	2b00      	cmp	r3, #0
    24a2:	d007      	beq.n	24b4 <timer_process_counted+0xac>
    24a4:	697b      	ldr	r3, [r7, #20]
    24a6:	685b      	ldr	r3, [r3, #4]
    24a8:	68fa      	ldr	r2, [r7, #12]
    24aa:	1ad2      	subs	r2, r2, r3
    24ac:	697b      	ldr	r3, [r7, #20]
    24ae:	689b      	ldr	r3, [r3, #8]
    24b0:	429a      	cmp	r2, r3
    24b2:	d2d5      	bcs.n	2460 <timer_process_counted+0x58>
	}
}
    24b4:	3718      	adds	r7, #24
    24b6:	46bd      	mov	sp, r7
    24b8:	bd80      	pop	{r7, pc}
    24ba:	bf00      	nop
    24bc:	000022b1 	.word	0x000022b1
    24c0:	00002f21 	.word	0x00002f21
    24c4:	00002359 	.word	0x00002359

000024c8 <_usb_d_find_ep>:
 * \return Index of endpoint descriptor.
 * \retval >=0 The index.
 * \retval <0 Not found (endpoint is not initialized).
 */
static int8_t _usb_d_find_ep(const uint8_t ep)
{
    24c8:	b480      	push	{r7}
    24ca:	b085      	sub	sp, #20
    24cc:	af00      	add	r7, sp, #0
    24ce:	4603      	mov	r3, r0
    24d0:	71fb      	strb	r3, [r7, #7]
	int8_t i;
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    24d2:	2300      	movs	r3, #0
    24d4:	73fb      	strb	r3, [r7, #15]
    24d6:	e029      	b.n	252c <_usb_d_find_ep+0x64>
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    24d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
    24dc:	4a19      	ldr	r2, [pc, #100]	; (2544 <_usb_d_find_ep+0x7c>)
    24de:	015b      	lsls	r3, r3, #5
    24e0:	4413      	add	r3, r2
    24e2:	3301      	adds	r3, #1
    24e4:	781b      	ldrb	r3, [r3, #0]
    24e6:	79fa      	ldrb	r2, [r7, #7]
    24e8:	429a      	cmp	r2, r3
    24ea:	d102      	bne.n	24f2 <_usb_d_find_ep+0x2a>
			return i;
    24ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
    24f0:	e022      	b.n	2538 <_usb_d_find_ep+0x70>
		}
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
    24f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
    24f6:	4a13      	ldr	r2, [pc, #76]	; (2544 <_usb_d_find_ep+0x7c>)
    24f8:	015b      	lsls	r3, r3, #5
    24fa:	4413      	add	r3, r2
    24fc:	781b      	ldrb	r3, [r3, #0]
    24fe:	2b00      	cmp	r3, #0
    2500:	d10e      	bne.n	2520 <_usb_d_find_ep+0x58>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    2502:	79fb      	ldrb	r3, [r7, #7]
    2504:	f003 030f 	and.w	r3, r3, #15
    2508:	f997 200f 	ldrsb.w	r2, [r7, #15]
    250c:	490d      	ldr	r1, [pc, #52]	; (2544 <_usb_d_find_ep+0x7c>)
    250e:	0152      	lsls	r2, r2, #5
    2510:	440a      	add	r2, r1
    2512:	3201      	adds	r2, #1
    2514:	7812      	ldrb	r2, [r2, #0]
    2516:	4293      	cmp	r3, r2
    2518:	d102      	bne.n	2520 <_usb_d_find_ep+0x58>
			return i;
    251a:	f997 300f 	ldrsb.w	r3, [r7, #15]
    251e:	e00b      	b.n	2538 <_usb_d_find_ep+0x70>
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    2520:	f997 300f 	ldrsb.w	r3, [r7, #15]
    2524:	b2db      	uxtb	r3, r3
    2526:	3301      	adds	r3, #1
    2528:	b2db      	uxtb	r3, r3
    252a:	73fb      	strb	r3, [r7, #15]
    252c:	f997 300f 	ldrsb.w	r3, [r7, #15]
    2530:	2b03      	cmp	r3, #3
    2532:	ddd1      	ble.n	24d8 <_usb_d_find_ep+0x10>
		}
	}
	return -1;
    2534:	f04f 33ff 	mov.w	r3, #4294967295
}
    2538:	4618      	mov	r0, r3
    253a:	3714      	adds	r7, #20
    253c:	46bd      	mov	sp, r7
    253e:	f85d 7b04 	ldr.w	r7, [sp], #4
    2542:	4770      	bx	lr
    2544:	20000c0c 	.word	0x20000c0c

00002548 <_usb_d_trans>:
 * \param[in] size Transfer size.
 * \param[in] zlp Auto append ZLP for IN, or wait ZLP for OUT.
 */
static inline int32_t _usb_d_trans(const uint8_t ep, const bool dir, const uint8_t *buf, const uint32_t size,
                                   const uint8_t zlp)
{
    2548:	b580      	push	{r7, lr}
    254a:	b088      	sub	sp, #32
    254c:	af00      	add	r7, sp, #0
    254e:	60ba      	str	r2, [r7, #8]
    2550:	607b      	str	r3, [r7, #4]
    2552:	4603      	mov	r3, r0
    2554:	73fb      	strb	r3, [r7, #15]
    2556:	460b      	mov	r3, r1
    2558:	73bb      	strb	r3, [r7, #14]
	struct usb_d_transfer trans
    255a:	68bb      	ldr	r3, [r7, #8]
    255c:	617b      	str	r3, [r7, #20]
    255e:	687b      	ldr	r3, [r7, #4]
    2560:	61bb      	str	r3, [r7, #24]
    2562:	7bbb      	ldrb	r3, [r7, #14]
    2564:	2b00      	cmp	r3, #0
    2566:	d004      	beq.n	2572 <_usb_d_trans+0x2a>
    2568:	7bfb      	ldrb	r3, [r7, #15]
    256a:	f063 037f 	orn	r3, r3, #127	; 0x7f
    256e:	b2db      	uxtb	r3, r3
    2570:	e003      	b.n	257a <_usb_d_trans+0x32>
    2572:	7bfb      	ldrb	r3, [r7, #15]
    2574:	f003 030f 	and.w	r3, r3, #15
    2578:	b2db      	uxtb	r3, r3
    257a:	773b      	strb	r3, [r7, #28]
    257c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
    2580:	777b      	strb	r3, [r7, #29]
	    = {(uint8_t *)buf, size, dir ? (uint8_t)(ep | USB_EP_DIR) : (uint8_t)(ep & USB_EP_N_MASK), zlp};

	return _usb_d_dev_ep_trans(&trans);
    2582:	f107 0314 	add.w	r3, r7, #20
    2586:	4618      	mov	r0, r3
    2588:	4b03      	ldr	r3, [pc, #12]	; (2598 <_usb_d_trans+0x50>)
    258a:	4798      	blx	r3
    258c:	4603      	mov	r3, r0
}
    258e:	4618      	mov	r0, r3
    2590:	3720      	adds	r7, #32
    2592:	46bd      	mov	sp, r7
    2594:	bd80      	pop	{r7, pc}
    2596:	bf00      	nop
    2598:	0000a2b5 	.word	0x0000a2b5

0000259c <usb_d_dummy_cb_false>:
 * \param[in] unused1 Unused parameter.
 * \param[in] unused2 Unused parameter.
 * \return Always \c false.
 */
static bool usb_d_dummy_cb_false(uint32_t unused0, uint32_t unused1, uint32_t unused2)
{
    259c:	b480      	push	{r7}
    259e:	b085      	sub	sp, #20
    25a0:	af00      	add	r7, sp, #0
    25a2:	60f8      	str	r0, [r7, #12]
    25a4:	60b9      	str	r1, [r7, #8]
    25a6:	607a      	str	r2, [r7, #4]
	(void)unused0;
	(void)unused1;
	(void)unused2;
	return false;
    25a8:	2300      	movs	r3, #0
}
    25aa:	4618      	mov	r0, r3
    25ac:	3714      	adds	r7, #20
    25ae:	46bd      	mov	sp, r7
    25b0:	f85d 7b04 	ldr.w	r7, [sp], #4
    25b4:	4770      	bx	lr
	...

000025b8 <usb_d_cb_trans_setup>:
/**
 * \brief Callback invoked when SETUP packet is ready
 * \param[in] ep Endpoint number with transfer direction on bit 8.
 */
static void usb_d_cb_trans_setup(const uint8_t ep)
{
    25b8:	b580      	push	{r7, lr}
    25ba:	b086      	sub	sp, #24
    25bc:	af00      	add	r7, sp, #0
    25be:	4603      	mov	r3, r0
    25c0:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    25c2:	79fb      	ldrb	r3, [r7, #7]
    25c4:	4618      	mov	r0, r3
    25c6:	4b2a      	ldr	r3, [pc, #168]	; (2670 <usb_d_cb_trans_setup+0xb8>)
    25c8:	4798      	blx	r3
    25ca:	4603      	mov	r3, r0
    25cc:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    25ce:	f997 3017 	ldrsb.w	r3, [r7, #23]
    25d2:	015b      	lsls	r3, r3, #5
    25d4:	4a27      	ldr	r2, [pc, #156]	; (2674 <usb_d_cb_trans_setup+0xbc>)
    25d6:	4413      	add	r3, r2
    25d8:	613b      	str	r3, [r7, #16]
	uint8_t *        req      = ept->xfer.req;
    25da:	693b      	ldr	r3, [r7, #16]
    25dc:	330c      	adds	r3, #12
    25de:	60fb      	str	r3, [r7, #12]

	uint8_t n = _usb_d_dev_ep_read_req(ep, req);
    25e0:	79fb      	ldrb	r3, [r7, #7]
    25e2:	68f9      	ldr	r1, [r7, #12]
    25e4:	4618      	mov	r0, r3
    25e6:	4b24      	ldr	r3, [pc, #144]	; (2678 <usb_d_cb_trans_setup+0xc0>)
    25e8:	4798      	blx	r3
    25ea:	4603      	mov	r3, r0
    25ec:	72fb      	strb	r3, [r7, #11]
	if (n != 8) {
    25ee:	7afb      	ldrb	r3, [r7, #11]
    25f0:	2b08      	cmp	r3, #8
    25f2:	d00d      	beq.n	2610 <usb_d_cb_trans_setup+0x58>
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    25f4:	79fb      	ldrb	r3, [r7, #7]
    25f6:	2101      	movs	r1, #1
    25f8:	4618      	mov	r0, r3
    25fa:	4b20      	ldr	r3, [pc, #128]	; (267c <usb_d_cb_trans_setup+0xc4>)
    25fc:	4798      	blx	r3
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    25fe:	79fb      	ldrb	r3, [r7, #7]
    2600:	f063 037f 	orn	r3, r3, #127	; 0x7f
    2604:	b2db      	uxtb	r3, r3
    2606:	2101      	movs	r1, #1
    2608:	4618      	mov	r0, r3
    260a:	4b1c      	ldr	r3, [pc, #112]	; (267c <usb_d_cb_trans_setup+0xc4>)
    260c:	4798      	blx	r3
		return;
    260e:	e02b      	b.n	2668 <usb_d_cb_trans_setup+0xb0>
	}

	_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    2610:	79fb      	ldrb	r3, [r7, #7]
    2612:	2100      	movs	r1, #0
    2614:	4618      	mov	r0, r3
    2616:	4b19      	ldr	r3, [pc, #100]	; (267c <usb_d_cb_trans_setup+0xc4>)
    2618:	4798      	blx	r3
	_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_CLR);
    261a:	79fb      	ldrb	r3, [r7, #7]
    261c:	f063 037f 	orn	r3, r3, #127	; 0x7f
    2620:	b2db      	uxtb	r3, r3
    2622:	2100      	movs	r1, #0
    2624:	4618      	mov	r0, r3
    2626:	4b15      	ldr	r3, [pc, #84]	; (267c <usb_d_cb_trans_setup+0xc4>)
    2628:	4798      	blx	r3
	ept->xfer.hdr.state = USB_EP_S_IDLE;
    262a:	693b      	ldr	r3, [r7, #16]
    262c:	2201      	movs	r2, #1
    262e:	709a      	strb	r2, [r3, #2]
	if (!ept->callbacks.req(ep, req)) {
    2630:	693b      	ldr	r3, [r7, #16]
    2632:	695b      	ldr	r3, [r3, #20]
    2634:	79fa      	ldrb	r2, [r7, #7]
    2636:	68f9      	ldr	r1, [r7, #12]
    2638:	4610      	mov	r0, r2
    263a:	4798      	blx	r3
    263c:	4603      	mov	r3, r0
    263e:	f083 0301 	eor.w	r3, r3, #1
    2642:	b2db      	uxtb	r3, r3
    2644:	2b00      	cmp	r3, #0
    2646:	d00f      	beq.n	2668 <usb_d_cb_trans_setup+0xb0>
		ept->xfer.hdr.state = USB_EP_S_HALTED;
    2648:	693b      	ldr	r3, [r7, #16]
    264a:	2205      	movs	r2, #5
    264c:	709a      	strb	r2, [r3, #2]
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    264e:	79fb      	ldrb	r3, [r7, #7]
    2650:	2101      	movs	r1, #1
    2652:	4618      	mov	r0, r3
    2654:	4b09      	ldr	r3, [pc, #36]	; (267c <usb_d_cb_trans_setup+0xc4>)
    2656:	4798      	blx	r3
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    2658:	79fb      	ldrb	r3, [r7, #7]
    265a:	f063 037f 	orn	r3, r3, #127	; 0x7f
    265e:	b2db      	uxtb	r3, r3
    2660:	2101      	movs	r1, #1
    2662:	4618      	mov	r0, r3
    2664:	4b05      	ldr	r3, [pc, #20]	; (267c <usb_d_cb_trans_setup+0xc4>)
    2666:	4798      	blx	r3
	}
}
    2668:	3718      	adds	r7, #24
    266a:	46bd      	mov	sp, r7
    266c:	bd80      	pop	{r7, pc}
    266e:	bf00      	nop
    2670:	000024c9 	.word	0x000024c9
    2674:	20000c0c 	.word	0x20000c0c
    2678:	0000a20d 	.word	0x0000a20d
    267c:	0000a085 	.word	0x0000a085

00002680 <usb_d_cb_trans_more>:
 * \brief Callback invoked when request more data
 * \param[in] ep Endpoint number with transfer direction on bit 8.
 * \param[in] transfered Number of bytes transfered.
 */
static bool usb_d_cb_trans_more(const uint8_t ep, const uint32_t transfered)
{
    2680:	b580      	push	{r7, lr}
    2682:	b084      	sub	sp, #16
    2684:	af00      	add	r7, sp, #0
    2686:	4603      	mov	r3, r0
    2688:	6039      	str	r1, [r7, #0]
    268a:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    268c:	79fb      	ldrb	r3, [r7, #7]
    268e:	4618      	mov	r0, r3
    2690:	4b0d      	ldr	r3, [pc, #52]	; (26c8 <usb_d_cb_trans_more+0x48>)
    2692:	4798      	blx	r3
    2694:	4603      	mov	r3, r0
    2696:	73fb      	strb	r3, [r7, #15]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    2698:	f997 300f 	ldrsb.w	r3, [r7, #15]
    269c:	015b      	lsls	r3, r3, #5
    269e:	4a0b      	ldr	r2, [pc, #44]	; (26cc <usb_d_cb_trans_more+0x4c>)
    26a0:	4413      	add	r3, r2
    26a2:	60bb      	str	r3, [r7, #8]
	if (ept->xfer.hdr.state == USB_EP_S_X_DATA) {
    26a4:	68bb      	ldr	r3, [r7, #8]
    26a6:	789b      	ldrb	r3, [r3, #2]
    26a8:	2b03      	cmp	r3, #3
    26aa:	d107      	bne.n	26bc <usb_d_cb_trans_more+0x3c>
		return ept->callbacks.more(ep, transfered);
    26ac:	68bb      	ldr	r3, [r7, #8]
    26ae:	699b      	ldr	r3, [r3, #24]
    26b0:	79fa      	ldrb	r2, [r7, #7]
    26b2:	6839      	ldr	r1, [r7, #0]
    26b4:	4610      	mov	r0, r2
    26b6:	4798      	blx	r3
    26b8:	4603      	mov	r3, r0
    26ba:	e000      	b.n	26be <usb_d_cb_trans_more+0x3e>
	}
	return false;
    26bc:	2300      	movs	r3, #0
}
    26be:	4618      	mov	r0, r3
    26c0:	3710      	adds	r7, #16
    26c2:	46bd      	mov	sp, r7
    26c4:	bd80      	pop	{r7, pc}
    26c6:	bf00      	nop
    26c8:	000024c9 	.word	0x000024c9
    26cc:	20000c0c 	.word	0x20000c0c

000026d0 <usb_d_ctrl_trans_done>:
/**
 * \brief Handles the case that control endpoint transactions are done
 * \param[in,out] ept Pointer to endpoint information.
 */
static inline void usb_d_ctrl_trans_done(struct usb_d_ep *ept)
{
    26d0:	b590      	push	{r4, r7, lr}
    26d2:	b087      	sub	sp, #28
    26d4:	af02      	add	r7, sp, #8
    26d6:	6078      	str	r0, [r7, #4]
	uint8_t state   = ept->xfer.hdr.state;
    26d8:	687b      	ldr	r3, [r7, #4]
    26da:	789b      	ldrb	r3, [r3, #2]
    26dc:	73fb      	strb	r3, [r7, #15]
	bool    req_dir = USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN;
    26de:	687b      	ldr	r3, [r7, #4]
    26e0:	7b1b      	ldrb	r3, [r3, #12]
    26e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
    26e6:	2b00      	cmp	r3, #0
    26e8:	bf14      	ite	ne
    26ea:	2301      	movne	r3, #1
    26ec:	2300      	moveq	r3, #0
    26ee:	73bb      	strb	r3, [r7, #14]

	if (state == USB_EP_S_X_DATA) {
    26f0:	7bfb      	ldrb	r3, [r7, #15]
    26f2:	2b03      	cmp	r3, #3
    26f4:	d13a      	bne.n	276c <usb_d_ctrl_trans_done+0x9c>
		/* Data stage -> Status stage */
		bool err = ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DATA, ept->xfer.req);
    26f6:	687b      	ldr	r3, [r7, #4]
    26f8:	69db      	ldr	r3, [r3, #28]
    26fa:	687a      	ldr	r2, [r7, #4]
    26fc:	7850      	ldrb	r0, [r2, #1]
    26fe:	687a      	ldr	r2, [r7, #4]
    2700:	320c      	adds	r2, #12
    2702:	2101      	movs	r1, #1
    2704:	4798      	blx	r3
    2706:	4603      	mov	r3, r0
    2708:	737b      	strb	r3, [r7, #13]
		if (err) {
    270a:	7b7b      	ldrb	r3, [r7, #13]
    270c:	2b00      	cmp	r3, #0
    270e:	d015      	beq.n	273c <usb_d_ctrl_trans_done+0x6c>
			ept->xfer.hdr.state  = USB_EP_S_HALTED;
    2710:	687b      	ldr	r3, [r7, #4]
    2712:	2205      	movs	r2, #5
    2714:	709a      	strb	r2, [r3, #2]
			ept->xfer.hdr.status = USB_XFER_HALT;
    2716:	687b      	ldr	r3, [r7, #4]
    2718:	2202      	movs	r2, #2
    271a:	70da      	strb	r2, [r3, #3]
			_usb_d_dev_ep_stall(req_dir ? ept->xfer.hdr.ep : (ept->xfer.hdr.ep | USB_EP_DIR), USB_EP_STALL_SET);
    271c:	7bbb      	ldrb	r3, [r7, #14]
    271e:	2b00      	cmp	r3, #0
    2720:	d002      	beq.n	2728 <usb_d_ctrl_trans_done+0x58>
    2722:	687b      	ldr	r3, [r7, #4]
    2724:	785b      	ldrb	r3, [r3, #1]
    2726:	e004      	b.n	2732 <usb_d_ctrl_trans_done+0x62>
    2728:	687b      	ldr	r3, [r7, #4]
    272a:	785b      	ldrb	r3, [r3, #1]
    272c:	f063 037f 	orn	r3, r3, #127	; 0x7f
    2730:	b2db      	uxtb	r3, r3
    2732:	2101      	movs	r1, #1
    2734:	4618      	mov	r0, r3
    2736:	4b15      	ldr	r3, [pc, #84]	; (278c <usb_d_ctrl_trans_done+0xbc>)
    2738:	4798      	blx	r3
	} else {
		/* Status stage done */
		ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DONE, ept->xfer.req);
		ept->xfer.hdr.state = USB_EP_S_X_SETUP;
	}
}
    273a:	e022      	b.n	2782 <usb_d_ctrl_trans_done+0xb2>
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    273c:	687b      	ldr	r3, [r7, #4]
    273e:	2204      	movs	r2, #4
    2740:	709a      	strb	r2, [r3, #2]
			_usb_d_trans(ept->xfer.hdr.ep, !req_dir, NULL, 0, 1);
    2742:	687b      	ldr	r3, [r7, #4]
    2744:	7858      	ldrb	r0, [r3, #1]
    2746:	7bbb      	ldrb	r3, [r7, #14]
    2748:	2b00      	cmp	r3, #0
    274a:	bf14      	ite	ne
    274c:	2301      	movne	r3, #1
    274e:	2300      	moveq	r3, #0
    2750:	b2db      	uxtb	r3, r3
    2752:	f083 0301 	eor.w	r3, r3, #1
    2756:	b2db      	uxtb	r3, r3
    2758:	f003 0301 	and.w	r3, r3, #1
    275c:	b2d9      	uxtb	r1, r3
    275e:	2301      	movs	r3, #1
    2760:	9300      	str	r3, [sp, #0]
    2762:	2300      	movs	r3, #0
    2764:	2200      	movs	r2, #0
    2766:	4c0a      	ldr	r4, [pc, #40]	; (2790 <usb_d_ctrl_trans_done+0xc0>)
    2768:	47a0      	blx	r4
}
    276a:	e00a      	b.n	2782 <usb_d_ctrl_trans_done+0xb2>
		ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DONE, ept->xfer.req);
    276c:	687b      	ldr	r3, [r7, #4]
    276e:	69db      	ldr	r3, [r3, #28]
    2770:	687a      	ldr	r2, [r7, #4]
    2772:	7850      	ldrb	r0, [r2, #1]
    2774:	687a      	ldr	r2, [r7, #4]
    2776:	320c      	adds	r2, #12
    2778:	2100      	movs	r1, #0
    277a:	4798      	blx	r3
		ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    277c:	687b      	ldr	r3, [r7, #4]
    277e:	2202      	movs	r2, #2
    2780:	709a      	strb	r2, [r3, #2]
}
    2782:	bf00      	nop
    2784:	3714      	adds	r7, #20
    2786:	46bd      	mov	sp, r7
    2788:	bd90      	pop	{r4, r7, pc}
    278a:	bf00      	nop
    278c:	0000a085 	.word	0x0000a085
    2790:	00002549 	.word	0x00002549

00002794 <_usb_d_cb_trans_done>:

/**
 * Callback when USB transactions are finished.
 */
static void _usb_d_cb_trans_done(const uint8_t ep, const int32_t code, const uint32_t transferred)
{
    2794:	b580      	push	{r7, lr}
    2796:	b086      	sub	sp, #24
    2798:	af00      	add	r7, sp, #0
    279a:	4603      	mov	r3, r0
    279c:	60b9      	str	r1, [r7, #8]
    279e:	607a      	str	r2, [r7, #4]
    27a0:	73fb      	strb	r3, [r7, #15]
	int8_t           ep_index = _usb_d_find_ep(ep);
    27a2:	7bfb      	ldrb	r3, [r7, #15]
    27a4:	4618      	mov	r0, r3
    27a6:	4b2f      	ldr	r3, [pc, #188]	; (2864 <_usb_d_cb_trans_done+0xd0>)
    27a8:	4798      	blx	r3
    27aa:	4603      	mov	r3, r0
    27ac:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    27ae:	f997 3017 	ldrsb.w	r3, [r7, #23]
    27b2:	015b      	lsls	r3, r3, #5
    27b4:	4a2c      	ldr	r2, [pc, #176]	; (2868 <_usb_d_cb_trans_done+0xd4>)
    27b6:	4413      	add	r3, r2
    27b8:	613b      	str	r3, [r7, #16]

	if (code == USB_TRANS_DONE) {
    27ba:	68bb      	ldr	r3, [r7, #8]
    27bc:	2b00      	cmp	r3, #0
    27be:	d10e      	bne.n	27de <_usb_d_cb_trans_done+0x4a>
		ept->xfer.hdr.status = USB_XFER_DONE;
    27c0:	693b      	ldr	r3, [r7, #16]
    27c2:	2200      	movs	r2, #0
    27c4:	70da      	strb	r2, [r3, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    27c6:	693b      	ldr	r3, [r7, #16]
    27c8:	781b      	ldrb	r3, [r3, #0]
    27ca:	2b00      	cmp	r3, #0
    27cc:	d103      	bne.n	27d6 <_usb_d_cb_trans_done+0x42>
			usb_d_ctrl_trans_done(ept);
    27ce:	6938      	ldr	r0, [r7, #16]
    27d0:	4b26      	ldr	r3, [pc, #152]	; (286c <_usb_d_cb_trans_done+0xd8>)
    27d2:	4798      	blx	r3
			return;
    27d4:	e043      	b.n	285e <_usb_d_cb_trans_done+0xca>
		}
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    27d6:	693b      	ldr	r3, [r7, #16]
    27d8:	2201      	movs	r2, #1
    27da:	709a      	strb	r2, [r3, #2]
    27dc:	e038      	b.n	2850 <_usb_d_cb_trans_done+0xbc>
	} else if (code == USB_TRANS_STALL) {
    27de:	68bb      	ldr	r3, [r7, #8]
    27e0:	2b01      	cmp	r3, #1
    27e2:	d113      	bne.n	280c <_usb_d_cb_trans_done+0x78>
		ept->xfer.hdr.status = USB_XFER_HALT;
    27e4:	693b      	ldr	r3, [r7, #16]
    27e6:	2202      	movs	r2, #2
    27e8:	70da      	strb	r2, [r3, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    27ea:	693b      	ldr	r3, [r7, #16]
    27ec:	781b      	ldrb	r3, [r3, #0]
    27ee:	2b00      	cmp	r3, #0
    27f0:	d108      	bne.n	2804 <_usb_d_cb_trans_done+0x70>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    27f2:	693b      	ldr	r3, [r7, #16]
    27f4:	2202      	movs	r2, #2
    27f6:	709a      	strb	r2, [r3, #2]
			_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    27f8:	7bfb      	ldrb	r3, [r7, #15]
    27fa:	2100      	movs	r1, #0
    27fc:	4618      	mov	r0, r3
    27fe:	4b1c      	ldr	r3, [pc, #112]	; (2870 <_usb_d_cb_trans_done+0xdc>)
    2800:	4798      	blx	r3
    2802:	e025      	b.n	2850 <_usb_d_cb_trans_done+0xbc>
		} else {
			ept->xfer.hdr.state = USB_EP_S_HALTED;
    2804:	693b      	ldr	r3, [r7, #16]
    2806:	2205      	movs	r2, #5
    2808:	709a      	strb	r2, [r3, #2]
    280a:	e021      	b.n	2850 <_usb_d_cb_trans_done+0xbc>
		}
	} else if (code == USB_TRANS_ABORT) {
    280c:	68bb      	ldr	r3, [r7, #8]
    280e:	2b02      	cmp	r3, #2
    2810:	d10e      	bne.n	2830 <_usb_d_cb_trans_done+0x9c>
		ept->xfer.hdr.status = USB_XFER_ABORT;
    2812:	693b      	ldr	r3, [r7, #16]
    2814:	2204      	movs	r2, #4
    2816:	70da      	strb	r2, [r3, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    2818:	693b      	ldr	r3, [r7, #16]
    281a:	781b      	ldrb	r3, [r3, #0]
    281c:	2b00      	cmp	r3, #0
    281e:	d103      	bne.n	2828 <_usb_d_cb_trans_done+0x94>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    2820:	693b      	ldr	r3, [r7, #16]
    2822:	2202      	movs	r2, #2
    2824:	709a      	strb	r2, [r3, #2]
			return;
    2826:	e01a      	b.n	285e <_usb_d_cb_trans_done+0xca>
		}
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    2828:	693b      	ldr	r3, [r7, #16]
    282a:	2201      	movs	r2, #1
    282c:	709a      	strb	r2, [r3, #2]
    282e:	e00f      	b.n	2850 <_usb_d_cb_trans_done+0xbc>
	} else if (code == USB_TRANS_RESET) {
    2830:	68bb      	ldr	r3, [r7, #8]
    2832:	2b03      	cmp	r3, #3
    2834:	d106      	bne.n	2844 <_usb_d_cb_trans_done+0xb0>
		ept->xfer.hdr.state  = USB_EP_S_DISABLED;
    2836:	693b      	ldr	r3, [r7, #16]
    2838:	2200      	movs	r2, #0
    283a:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_RESET;
    283c:	693b      	ldr	r3, [r7, #16]
    283e:	2205      	movs	r2, #5
    2840:	70da      	strb	r2, [r3, #3]
    2842:	e005      	b.n	2850 <_usb_d_cb_trans_done+0xbc>
	} else {
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
    2844:	693b      	ldr	r3, [r7, #16]
    2846:	2206      	movs	r2, #6
    2848:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_ERROR;
    284a:	693b      	ldr	r3, [r7, #16]
    284c:	2206      	movs	r2, #6
    284e:	70da      	strb	r2, [r3, #3]
	}

	ept->callbacks.xfer(ep, (enum usb_xfer_code)ept->xfer.hdr.status, (void *)transferred);
    2850:	693b      	ldr	r3, [r7, #16]
    2852:	69db      	ldr	r3, [r3, #28]
    2854:	693a      	ldr	r2, [r7, #16]
    2856:	78d1      	ldrb	r1, [r2, #3]
    2858:	687a      	ldr	r2, [r7, #4]
    285a:	7bf8      	ldrb	r0, [r7, #15]
    285c:	4798      	blx	r3
}
    285e:	3718      	adds	r7, #24
    2860:	46bd      	mov	sp, r7
    2862:	bd80      	pop	{r7, pc}
    2864:	000024c9 	.word	0x000024c9
    2868:	20000c0c 	.word	0x20000c0c
    286c:	000026d1 	.word	0x000026d1
    2870:	0000a085 	.word	0x0000a085

00002874 <usb_d_init>:

int32_t usb_d_init(void)
{
    2874:	b580      	push	{r7, lr}
    2876:	b082      	sub	sp, #8
    2878:	af00      	add	r7, sp, #0
	int32_t rc = _usb_d_dev_init();
    287a:	4b21      	ldr	r3, [pc, #132]	; (2900 <usb_d_init+0x8c>)
    287c:	4798      	blx	r3
    287e:	6038      	str	r0, [r7, #0]
	uint8_t i;
	if (rc < 0) {
    2880:	683b      	ldr	r3, [r7, #0]
    2882:	2b00      	cmp	r3, #0
    2884:	da01      	bge.n	288a <usb_d_init+0x16>
		return rc;
    2886:	683b      	ldr	r3, [r7, #0]
    2888:	e036      	b.n	28f8 <usb_d_init+0x84>
	}
	memset(usb_d_inst.ep, 0x00, sizeof(struct usb_d_ep) * CONF_USB_D_NUM_EP_SP);
    288a:	2280      	movs	r2, #128	; 0x80
    288c:	2100      	movs	r1, #0
    288e:	481d      	ldr	r0, [pc, #116]	; (2904 <usb_d_init+0x90>)
    2890:	4b1d      	ldr	r3, [pc, #116]	; (2908 <usb_d_init+0x94>)
    2892:	4798      	blx	r3
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    2894:	2300      	movs	r3, #0
    2896:	71fb      	strb	r3, [r7, #7]
    2898:	e01e      	b.n	28d8 <usb_d_init+0x64>
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
    289a:	79fb      	ldrb	r3, [r7, #7]
    289c:	4a19      	ldr	r2, [pc, #100]	; (2904 <usb_d_init+0x90>)
    289e:	015b      	lsls	r3, r3, #5
    28a0:	4413      	add	r3, r2
    28a2:	3301      	adds	r3, #1
    28a4:	22ff      	movs	r2, #255	; 0xff
    28a6:	701a      	strb	r2, [r3, #0]
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    28a8:	79fb      	ldrb	r3, [r7, #7]
    28aa:	4a16      	ldr	r2, [pc, #88]	; (2904 <usb_d_init+0x90>)
    28ac:	015b      	lsls	r3, r3, #5
    28ae:	4413      	add	r3, r2
    28b0:	3314      	adds	r3, #20
    28b2:	4a16      	ldr	r2, [pc, #88]	; (290c <usb_d_init+0x98>)
    28b4:	601a      	str	r2, [r3, #0]
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
    28b6:	79fb      	ldrb	r3, [r7, #7]
    28b8:	4a12      	ldr	r2, [pc, #72]	; (2904 <usb_d_init+0x90>)
    28ba:	015b      	lsls	r3, r3, #5
    28bc:	4413      	add	r3, r2
    28be:	3318      	adds	r3, #24
    28c0:	4a12      	ldr	r2, [pc, #72]	; (290c <usb_d_init+0x98>)
    28c2:	601a      	str	r2, [r3, #0]
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
    28c4:	79fb      	ldrb	r3, [r7, #7]
    28c6:	4a0f      	ldr	r2, [pc, #60]	; (2904 <usb_d_init+0x90>)
    28c8:	015b      	lsls	r3, r3, #5
    28ca:	4413      	add	r3, r2
    28cc:	331c      	adds	r3, #28
    28ce:	4a0f      	ldr	r2, [pc, #60]	; (290c <usb_d_init+0x98>)
    28d0:	601a      	str	r2, [r3, #0]
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    28d2:	79fb      	ldrb	r3, [r7, #7]
    28d4:	3301      	adds	r3, #1
    28d6:	71fb      	strb	r3, [r7, #7]
    28d8:	79fb      	ldrb	r3, [r7, #7]
    28da:	2b03      	cmp	r3, #3
    28dc:	d9dd      	bls.n	289a <usb_d_init+0x26>
	}
	/* Handles device driver endpoint callbacks to build transfer. */
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_SETUP, (FUNC_PTR)usb_d_cb_trans_setup);
    28de:	490c      	ldr	r1, [pc, #48]	; (2910 <usb_d_init+0x9c>)
    28e0:	2000      	movs	r0, #0
    28e2:	4b0c      	ldr	r3, [pc, #48]	; (2914 <usb_d_init+0xa0>)
    28e4:	4798      	blx	r3
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_MORE, (FUNC_PTR)usb_d_cb_trans_more);
    28e6:	490c      	ldr	r1, [pc, #48]	; (2918 <usb_d_init+0xa4>)
    28e8:	2001      	movs	r0, #1
    28ea:	4b0a      	ldr	r3, [pc, #40]	; (2914 <usb_d_init+0xa0>)
    28ec:	4798      	blx	r3
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_DONE, (FUNC_PTR)_usb_d_cb_trans_done);
    28ee:	490b      	ldr	r1, [pc, #44]	; (291c <usb_d_init+0xa8>)
    28f0:	2002      	movs	r0, #2
    28f2:	4b08      	ldr	r3, [pc, #32]	; (2914 <usb_d_init+0xa0>)
    28f4:	4798      	blx	r3
	return ERR_NONE;
    28f6:	2300      	movs	r3, #0
}
    28f8:	4618      	mov	r0, r3
    28fa:	3708      	adds	r7, #8
    28fc:	46bd      	mov	sp, r7
    28fe:	bd80      	pop	{r7, pc}
    2900:	000098cd 	.word	0x000098cd
    2904:	20000c0c 	.word	0x20000c0c
    2908:	00013051 	.word	0x00013051
    290c:	0000259d 	.word	0x0000259d
    2910:	000025b9 	.word	0x000025b9
    2914:	0000a4c1 	.word	0x0000a4c1
    2918:	00002681 	.word	0x00002681
    291c:	00002795 	.word	0x00002795

00002920 <usb_d_register_callback>:
{
	_usb_d_dev_deinit();
}

void usb_d_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
    2920:	b580      	push	{r7, lr}
    2922:	b082      	sub	sp, #8
    2924:	af00      	add	r7, sp, #0
    2926:	4603      	mov	r3, r0
    2928:	6039      	str	r1, [r7, #0]
    292a:	71fb      	strb	r3, [r7, #7]
	/* Directly uses device driver callback. */
	_usb_d_dev_register_callback(type, func);
    292c:	79fb      	ldrb	r3, [r7, #7]
    292e:	6839      	ldr	r1, [r7, #0]
    2930:	4618      	mov	r0, r3
    2932:	4b03      	ldr	r3, [pc, #12]	; (2940 <usb_d_register_callback+0x20>)
    2934:	4798      	blx	r3
}
    2936:	bf00      	nop
    2938:	3708      	adds	r7, #8
    293a:	46bd      	mov	sp, r7
    293c:	bd80      	pop	{r7, pc}
    293e:	bf00      	nop
    2940:	0000a479 	.word	0x0000a479

00002944 <usb_d_enable>:

int32_t usb_d_enable(void)
{
    2944:	b580      	push	{r7, lr}
    2946:	af00      	add	r7, sp, #0
	return _usb_d_dev_enable();
    2948:	4b02      	ldr	r3, [pc, #8]	; (2954 <usb_d_enable+0x10>)
    294a:	4798      	blx	r3
    294c:	4603      	mov	r3, r0
}
    294e:	4618      	mov	r0, r3
    2950:	bd80      	pop	{r7, pc}
    2952:	bf00      	nop
    2954:	000099bd 	.word	0x000099bd

00002958 <usb_d_attach>:
{
	_usb_d_dev_disable();
}

void usb_d_attach(void)
{
    2958:	b580      	push	{r7, lr}
    295a:	af00      	add	r7, sp, #0
	_usb_d_dev_attach();
    295c:	4b01      	ldr	r3, [pc, #4]	; (2964 <usb_d_attach+0xc>)
    295e:	4798      	blx	r3
}
    2960:	bf00      	nop
    2962:	bd80      	pop	{r7, pc}
    2964:	00009a41 	.word	0x00009a41

00002968 <usb_d_set_address>:
{
	return _usb_d_dev_get_uframe_n();
}

void usb_d_set_address(const uint8_t addr)
{
    2968:	b580      	push	{r7, lr}
    296a:	b082      	sub	sp, #8
    296c:	af00      	add	r7, sp, #0
    296e:	4603      	mov	r3, r0
    2970:	71fb      	strb	r3, [r7, #7]
	_usb_d_dev_set_address(addr);
    2972:	79fb      	ldrb	r3, [r7, #7]
    2974:	4618      	mov	r0, r3
    2976:	4b03      	ldr	r3, [pc, #12]	; (2984 <usb_d_set_address+0x1c>)
    2978:	4798      	blx	r3
}
    297a:	bf00      	nop
    297c:	3708      	adds	r7, #8
    297e:	46bd      	mov	sp, r7
    2980:	bd80      	pop	{r7, pc}
    2982:	bf00      	nop
    2984:	00009a55 	.word	0x00009a55

00002988 <usb_d_ep0_init>:
{
	_usb_d_dev_send_remotewakeup();
}

int32_t usb_d_ep0_init(const uint8_t max_pkt_size)
{
    2988:	b580      	push	{r7, lr}
    298a:	b082      	sub	sp, #8
    298c:	af00      	add	r7, sp, #0
    298e:	4603      	mov	r3, r0
    2990:	71fb      	strb	r3, [r7, #7]
	return usb_d_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_size);
    2992:	79fb      	ldrb	r3, [r7, #7]
    2994:	b29b      	uxth	r3, r3
    2996:	461a      	mov	r2, r3
    2998:	2100      	movs	r1, #0
    299a:	2000      	movs	r0, #0
    299c:	4b03      	ldr	r3, [pc, #12]	; (29ac <usb_d_ep0_init+0x24>)
    299e:	4798      	blx	r3
    29a0:	4603      	mov	r3, r0
}
    29a2:	4618      	mov	r0, r3
    29a4:	3708      	adds	r7, #8
    29a6:	46bd      	mov	sp, r7
    29a8:	bd80      	pop	{r7, pc}
    29aa:	bf00      	nop
    29ac:	000029b1 	.word	0x000029b1

000029b0 <usb_d_ep_init>:

int32_t usb_d_ep_init(const uint8_t ep, const uint8_t attr, const uint16_t max_pkt_size)
{
    29b0:	b580      	push	{r7, lr}
    29b2:	b086      	sub	sp, #24
    29b4:	af00      	add	r7, sp, #0
    29b6:	4603      	mov	r3, r0
    29b8:	71fb      	strb	r3, [r7, #7]
    29ba:	460b      	mov	r3, r1
    29bc:	71bb      	strb	r3, [r7, #6]
    29be:	4613      	mov	r3, r2
    29c0:	80bb      	strh	r3, [r7, #4]
	int32_t          rc;
	int8_t           ep_index = _usb_d_find_ep(ep);
    29c2:	79fb      	ldrb	r3, [r7, #7]
    29c4:	4618      	mov	r0, r3
    29c6:	4b1e      	ldr	r3, [pc, #120]	; (2a40 <usb_d_ep_init+0x90>)
    29c8:	4798      	blx	r3
    29ca:	4603      	mov	r3, r0
    29cc:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    29ce:	f997 3017 	ldrsb.w	r3, [r7, #23]
    29d2:	015b      	lsls	r3, r3, #5
    29d4:	4a1b      	ldr	r2, [pc, #108]	; (2a44 <usb_d_ep_init+0x94>)
    29d6:	4413      	add	r3, r2
    29d8:	613b      	str	r3, [r7, #16]
	if (ep_index >= 0) {
    29da:	f997 3017 	ldrsb.w	r3, [r7, #23]
    29de:	2b00      	cmp	r3, #0
    29e0:	db02      	blt.n	29e8 <usb_d_ep_init+0x38>
		return -USB_ERR_REDO;
    29e2:	f06f 0313 	mvn.w	r3, #19
    29e6:	e027      	b.n	2a38 <usb_d_ep_init+0x88>
	} else {
		ep_index = _usb_d_find_ep(0xFF);
    29e8:	20ff      	movs	r0, #255	; 0xff
    29ea:	4b15      	ldr	r3, [pc, #84]	; (2a40 <usb_d_ep_init+0x90>)
    29ec:	4798      	blx	r3
    29ee:	4603      	mov	r3, r0
    29f0:	75fb      	strb	r3, [r7, #23]
		if (ep_index < 0) {
    29f2:	f997 3017 	ldrsb.w	r3, [r7, #23]
    29f6:	2b00      	cmp	r3, #0
    29f8:	da02      	bge.n	2a00 <usb_d_ep_init+0x50>
			return -USB_ERR_ALLOC_FAIL;
    29fa:	f06f 0314 	mvn.w	r3, #20
    29fe:	e01b      	b.n	2a38 <usb_d_ep_init+0x88>
		}
		ept = &usb_d_inst.ep[ep_index];
    2a00:	f997 3017 	ldrsb.w	r3, [r7, #23]
    2a04:	015b      	lsls	r3, r3, #5
    2a06:	4a0f      	ldr	r2, [pc, #60]	; (2a44 <usb_d_ep_init+0x94>)
    2a08:	4413      	add	r3, r2
    2a0a:	613b      	str	r3, [r7, #16]
	}
	rc = _usb_d_dev_ep_init(ep, attr, max_pkt_size);
    2a0c:	88ba      	ldrh	r2, [r7, #4]
    2a0e:	79b9      	ldrb	r1, [r7, #6]
    2a10:	79fb      	ldrb	r3, [r7, #7]
    2a12:	4618      	mov	r0, r3
    2a14:	4b0c      	ldr	r3, [pc, #48]	; (2a48 <usb_d_ep_init+0x98>)
    2a16:	4798      	blx	r3
    2a18:	60f8      	str	r0, [r7, #12]
	if (rc < 0) {
    2a1a:	68fb      	ldr	r3, [r7, #12]
    2a1c:	2b00      	cmp	r3, #0
    2a1e:	da01      	bge.n	2a24 <usb_d_ep_init+0x74>
		return rc;
    2a20:	68fb      	ldr	r3, [r7, #12]
    2a22:	e009      	b.n	2a38 <usb_d_ep_init+0x88>
	}
	ept->xfer.hdr.ep   = ep;
    2a24:	693b      	ldr	r3, [r7, #16]
    2a26:	79fa      	ldrb	r2, [r7, #7]
    2a28:	705a      	strb	r2, [r3, #1]
	ept->xfer.hdr.type = attr & USB_EP_XTYPE_MASK;
    2a2a:	79bb      	ldrb	r3, [r7, #6]
    2a2c:	f003 0303 	and.w	r3, r3, #3
    2a30:	b2da      	uxtb	r2, r3
    2a32:	693b      	ldr	r3, [r7, #16]
    2a34:	701a      	strb	r2, [r3, #0]
	return ERR_NONE;
    2a36:	2300      	movs	r3, #0
}
    2a38:	4618      	mov	r0, r3
    2a3a:	3718      	adds	r7, #24
    2a3c:	46bd      	mov	sp, r7
    2a3e:	bd80      	pop	{r7, pc}
    2a40:	000024c9 	.word	0x000024c9
    2a44:	20000c0c 	.word	0x20000c0c
    2a48:	00009af5 	.word	0x00009af5

00002a4c <usb_d_ep_deinit>:

void usb_d_ep_deinit(const uint8_t ep)
{
    2a4c:	b580      	push	{r7, lr}
    2a4e:	b084      	sub	sp, #16
    2a50:	af00      	add	r7, sp, #0
    2a52:	4603      	mov	r3, r0
    2a54:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    2a56:	79fb      	ldrb	r3, [r7, #7]
    2a58:	4618      	mov	r0, r3
    2a5a:	4b0d      	ldr	r3, [pc, #52]	; (2a90 <usb_d_ep_deinit+0x44>)
    2a5c:	4798      	blx	r3
    2a5e:	4603      	mov	r3, r0
    2a60:	73fb      	strb	r3, [r7, #15]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    2a62:	f997 300f 	ldrsb.w	r3, [r7, #15]
    2a66:	015b      	lsls	r3, r3, #5
    2a68:	4a0a      	ldr	r2, [pc, #40]	; (2a94 <usb_d_ep_deinit+0x48>)
    2a6a:	4413      	add	r3, r2
    2a6c:	60bb      	str	r3, [r7, #8]
	if (ep_index < 0) {
    2a6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
    2a72:	2b00      	cmp	r3, #0
    2a74:	db07      	blt.n	2a86 <usb_d_ep_deinit+0x3a>
		return;
	}
	_usb_d_dev_ep_deinit(ep);
    2a76:	79fb      	ldrb	r3, [r7, #7]
    2a78:	4618      	mov	r0, r3
    2a7a:	4b07      	ldr	r3, [pc, #28]	; (2a98 <usb_d_ep_deinit+0x4c>)
    2a7c:	4798      	blx	r3
	ept->xfer.hdr.ep = 0xFF;
    2a7e:	68bb      	ldr	r3, [r7, #8]
    2a80:	22ff      	movs	r2, #255	; 0xff
    2a82:	705a      	strb	r2, [r3, #1]
    2a84:	e000      	b.n	2a88 <usb_d_ep_deinit+0x3c>
		return;
    2a86:	bf00      	nop
}
    2a88:	3710      	adds	r7, #16
    2a8a:	46bd      	mov	sp, r7
    2a8c:	bd80      	pop	{r7, pc}
    2a8e:	bf00      	nop
    2a90:	000024c9 	.word	0x000024c9
    2a94:	20000c0c 	.word	0x20000c0c
    2a98:	00009c29 	.word	0x00009c29

00002a9c <usb_d_ep_enable>:

int32_t usb_d_ep_enable(const uint8_t ep)
{
    2a9c:	b580      	push	{r7, lr}
    2a9e:	b086      	sub	sp, #24
    2aa0:	af00      	add	r7, sp, #0
    2aa2:	4603      	mov	r3, r0
    2aa4:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    2aa6:	79fb      	ldrb	r3, [r7, #7]
    2aa8:	4618      	mov	r0, r3
    2aaa:	4b15      	ldr	r3, [pc, #84]	; (2b00 <usb_d_ep_enable+0x64>)
    2aac:	4798      	blx	r3
    2aae:	4603      	mov	r3, r0
    2ab0:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    2ab2:	f997 3017 	ldrsb.w	r3, [r7, #23]
    2ab6:	015b      	lsls	r3, r3, #5
    2ab8:	4a12      	ldr	r2, [pc, #72]	; (2b04 <usb_d_ep_enable+0x68>)
    2aba:	4413      	add	r3, r2
    2abc:	613b      	str	r3, [r7, #16]
	int32_t          rc;
	if (ep_index < 0) {
    2abe:	f997 3017 	ldrsb.w	r3, [r7, #23]
    2ac2:	2b00      	cmp	r3, #0
    2ac4:	da02      	bge.n	2acc <usb_d_ep_enable+0x30>
		return -USB_ERR_PARAM;
    2ac6:	f06f 0311 	mvn.w	r3, #17
    2aca:	e014      	b.n	2af6 <usb_d_ep_enable+0x5a>
	}
	ept->xfer.hdr.state = (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) ? USB_EP_S_X_SETUP : USB_EP_S_IDLE;
    2acc:	693b      	ldr	r3, [r7, #16]
    2ace:	781b      	ldrb	r3, [r3, #0]
    2ad0:	2b00      	cmp	r3, #0
    2ad2:	d101      	bne.n	2ad8 <usb_d_ep_enable+0x3c>
    2ad4:	2202      	movs	r2, #2
    2ad6:	e000      	b.n	2ada <usb_d_ep_enable+0x3e>
    2ad8:	2201      	movs	r2, #1
    2ada:	693b      	ldr	r3, [r7, #16]
    2adc:	709a      	strb	r2, [r3, #2]
	rc                  = _usb_d_dev_ep_enable(ep);
    2ade:	79fb      	ldrb	r3, [r7, #7]
    2ae0:	4618      	mov	r0, r3
    2ae2:	4b09      	ldr	r3, [pc, #36]	; (2b08 <usb_d_ep_enable+0x6c>)
    2ae4:	4798      	blx	r3
    2ae6:	60f8      	str	r0, [r7, #12]
	if (rc < 0) {
    2ae8:	68fb      	ldr	r3, [r7, #12]
    2aea:	2b00      	cmp	r3, #0
    2aec:	da02      	bge.n	2af4 <usb_d_ep_enable+0x58>
		ept->xfer.hdr.state = USB_EP_S_DISABLED;
    2aee:	693b      	ldr	r3, [r7, #16]
    2af0:	2200      	movs	r2, #0
    2af2:	709a      	strb	r2, [r3, #2]
	}
	return rc;
    2af4:	68fb      	ldr	r3, [r7, #12]
}
    2af6:	4618      	mov	r0, r3
    2af8:	3718      	adds	r7, #24
    2afa:	46bd      	mov	sp, r7
    2afc:	bd80      	pop	{r7, pc}
    2afe:	bf00      	nop
    2b00:	000024c9 	.word	0x000024c9
    2b04:	20000c0c 	.word	0x20000c0c
    2b08:	00009d0d 	.word	0x00009d0d

00002b0c <usb_d_ep_transfer>:
	}
	return usb_d_inst.ep[ep_index].xfer.req;
}

int32_t usb_d_ep_transfer(const struct usb_d_transfer *xfer)
{
    2b0c:	b590      	push	{r4, r7, lr}
    2b0e:	b08d      	sub	sp, #52	; 0x34
    2b10:	af02      	add	r7, sp, #8
    2b12:	6078      	str	r0, [r7, #4]
	int8_t                ep_index = _usb_d_find_ep(xfer->ep);
    2b14:	687b      	ldr	r3, [r7, #4]
    2b16:	7a1b      	ldrb	r3, [r3, #8]
    2b18:	4618      	mov	r0, r3
    2b1a:	4b51      	ldr	r3, [pc, #324]	; (2c60 <usb_d_ep_transfer+0x154>)
    2b1c:	4798      	blx	r3
    2b1e:	4603      	mov	r3, r0
    2b20:	77fb      	strb	r3, [r7, #31]
	struct usb_d_ep *     ept      = &usb_d_inst.ep[ep_index];
    2b22:	f997 301f 	ldrsb.w	r3, [r7, #31]
    2b26:	015b      	lsls	r3, r3, #5
    2b28:	4a4e      	ldr	r2, [pc, #312]	; (2c64 <usb_d_ep_transfer+0x158>)
    2b2a:	4413      	add	r3, r2
    2b2c:	61bb      	str	r3, [r7, #24]
	bool                  dir = USB_EP_GET_DIR(xfer->ep), zlp = xfer->zlp;
    2b2e:	687b      	ldr	r3, [r7, #4]
    2b30:	7a1b      	ldrb	r3, [r3, #8]
    2b32:	f003 0380 	and.w	r3, r3, #128	; 0x80
    2b36:	2b00      	cmp	r3, #0
    2b38:	bf14      	ite	ne
    2b3a:	2301      	movne	r3, #1
    2b3c:	2300      	moveq	r3, #0
    2b3e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    2b42:	687b      	ldr	r3, [r7, #4]
    2b44:	7a5b      	ldrb	r3, [r3, #9]
    2b46:	2b00      	cmp	r3, #0
    2b48:	bf14      	ite	ne
    2b4a:	2301      	movne	r3, #1
    2b4c:	2300      	moveq	r3, #0
    2b4e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint32_t              len = xfer->size;
    2b52:	687b      	ldr	r3, [r7, #4]
    2b54:	685b      	ldr	r3, [r3, #4]
    2b56:	623b      	str	r3, [r7, #32]
	int32_t               rc;
	volatile uint8_t      state;
	volatile hal_atomic_t flags;

	if (ep_index < 0) {
    2b58:	f997 301f 	ldrsb.w	r3, [r7, #31]
    2b5c:	2b00      	cmp	r3, #0
    2b5e:	da02      	bge.n	2b66 <usb_d_ep_transfer+0x5a>
		return -USB_ERR_PARAM;
    2b60:	f06f 0311 	mvn.w	r3, #17
    2b64:	e077      	b.n	2c56 <usb_d_ep_transfer+0x14a>
	}

	atomic_enter_critical(&flags);
    2b66:	f107 0308 	add.w	r3, r7, #8
    2b6a:	4618      	mov	r0, r3
    2b6c:	4b3e      	ldr	r3, [pc, #248]	; (2c68 <usb_d_ep_transfer+0x15c>)
    2b6e:	4798      	blx	r3
	state = ept->xfer.hdr.state;
    2b70:	69bb      	ldr	r3, [r7, #24]
    2b72:	789b      	ldrb	r3, [r3, #2]
    2b74:	73fb      	strb	r3, [r7, #15]
	if (state == USB_EP_S_IDLE) {
    2b76:	7bfb      	ldrb	r3, [r7, #15]
    2b78:	b2db      	uxtb	r3, r3
    2b7a:	2b01      	cmp	r3, #1
    2b7c:	d10c      	bne.n	2b98 <usb_d_ep_transfer+0x8c>
		ept->xfer.hdr.state = USB_EP_S_X_DATA;
    2b7e:	69bb      	ldr	r3, [r7, #24]
    2b80:	2203      	movs	r2, #3
    2b82:	709a      	strb	r2, [r3, #2]
		atomic_leave_critical(&flags);
    2b84:	f107 0308 	add.w	r3, r7, #8
    2b88:	4618      	mov	r0, r3
    2b8a:	4b38      	ldr	r3, [pc, #224]	; (2c6c <usb_d_ep_transfer+0x160>)
    2b8c:	4798      	blx	r3
		default: /* USB_EP_S_X_xxxx  */
			return USB_BUSY;
		}
	}

	if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    2b8e:	69bb      	ldr	r3, [r7, #24]
    2b90:	781b      	ldrb	r3, [r3, #0]
    2b92:	2b00      	cmp	r3, #0
    2b94:	d151      	bne.n	2c3a <usb_d_ep_transfer+0x12e>
    2b96:	e017      	b.n	2bc8 <usb_d_ep_transfer+0xbc>
		atomic_leave_critical(&flags);
    2b98:	f107 0308 	add.w	r3, r7, #8
    2b9c:	4618      	mov	r0, r3
    2b9e:	4b33      	ldr	r3, [pc, #204]	; (2c6c <usb_d_ep_transfer+0x160>)
    2ba0:	4798      	blx	r3
		switch (state) {
    2ba2:	7bfb      	ldrb	r3, [r7, #15]
    2ba4:	b2db      	uxtb	r3, r3
    2ba6:	2b05      	cmp	r3, #5
    2ba8:	d004      	beq.n	2bb4 <usb_d_ep_transfer+0xa8>
    2baa:	2b06      	cmp	r3, #6
    2bac:	d004      	beq.n	2bb8 <usb_d_ep_transfer+0xac>
    2bae:	2b00      	cmp	r3, #0
    2bb0:	d005      	beq.n	2bbe <usb_d_ep_transfer+0xb2>
    2bb2:	e007      	b.n	2bc4 <usb_d_ep_transfer+0xb8>
			return USB_HALTED;
    2bb4:	2302      	movs	r3, #2
    2bb6:	e04e      	b.n	2c56 <usb_d_ep_transfer+0x14a>
			return -USB_ERROR;
    2bb8:	f06f 030f 	mvn.w	r3, #15
    2bbc:	e04b      	b.n	2c56 <usb_d_ep_transfer+0x14a>
			return -USB_ERR_FUNC;
    2bbe:	f06f 0312 	mvn.w	r3, #18
    2bc2:	e048      	b.n	2c56 <usb_d_ep_transfer+0x14a>
			return USB_BUSY;
    2bc4:	2301      	movs	r3, #1
    2bc6:	e046      	b.n	2c56 <usb_d_ep_transfer+0x14a>
		uint16_t req_len = USB_GET_wLength(ept->xfer.req);
    2bc8:	69bb      	ldr	r3, [r7, #24]
    2bca:	7c9b      	ldrb	r3, [r3, #18]
    2bcc:	b29a      	uxth	r2, r3
    2bce:	69bb      	ldr	r3, [r7, #24]
    2bd0:	7cdb      	ldrb	r3, [r3, #19]
    2bd2:	b29b      	uxth	r3, r3
    2bd4:	021b      	lsls	r3, r3, #8
    2bd6:	b29b      	uxth	r3, r3
    2bd8:	4413      	add	r3, r2
    2bda:	82fb      	strh	r3, [r7, #22]
		/* SETUP without data: ZLP IN as status. */
		if (req_len == 0) {
    2bdc:	8afb      	ldrh	r3, [r7, #22]
    2bde:	2b00      	cmp	r3, #0
    2be0:	d10b      	bne.n	2bfa <usb_d_ep_transfer+0xee>
			dir                 = true;
    2be2:	2301      	movs	r3, #1
    2be4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			len                 = 0;
    2be8:	2300      	movs	r3, #0
    2bea:	623b      	str	r3, [r7, #32]
			zlp                 = true;
    2bec:	2301      	movs	r3, #1
    2bee:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    2bf2:	69bb      	ldr	r3, [r7, #24]
    2bf4:	2204      	movs	r2, #4
    2bf6:	709a      	strb	r2, [r3, #2]
    2bf8:	e01f      	b.n	2c3a <usb_d_ep_transfer+0x12e>
		} else {
			dir = (USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN);
    2bfa:	69bb      	ldr	r3, [r7, #24]
    2bfc:	7b1b      	ldrb	r3, [r3, #12]
    2bfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
    2c02:	2b00      	cmp	r3, #0
    2c04:	bf14      	ite	ne
    2c06:	2301      	movne	r3, #1
    2c08:	2300      	moveq	r3, #0
    2c0a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			/* Data length not exceed requested. */
			if (len > req_len) {
    2c0e:	8afa      	ldrh	r2, [r7, #22]
    2c10:	6a3b      	ldr	r3, [r7, #32]
    2c12:	429a      	cmp	r2, r3
    2c14:	d201      	bcs.n	2c1a <usb_d_ep_transfer+0x10e>
				len = req_len;
    2c16:	8afb      	ldrh	r3, [r7, #22]
    2c18:	623b      	str	r3, [r7, #32]
			}
			if (dir) {
    2c1a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    2c1e:	2b00      	cmp	r3, #0
    2c20:	d008      	beq.n	2c34 <usb_d_ep_transfer+0x128>
				/* Setup -> In */
				zlp = (req_len > len);
    2c22:	8afa      	ldrh	r2, [r7, #22]
    2c24:	6a3b      	ldr	r3, [r7, #32]
    2c26:	429a      	cmp	r2, r3
    2c28:	bf8c      	ite	hi
    2c2a:	2301      	movhi	r3, #1
    2c2c:	2300      	movls	r3, #0
    2c2e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    2c32:	e002      	b.n	2c3a <usb_d_ep_transfer+0x12e>
			} else {
				zlp = false;
    2c34:	2300      	movs	r3, #0
    2c36:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			}
		}
	}

	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    2c3a:	687b      	ldr	r3, [r7, #4]
    2c3c:	7a18      	ldrb	r0, [r3, #8]
    2c3e:	687b      	ldr	r3, [r7, #4]
    2c40:	681a      	ldr	r2, [r3, #0]
    2c42:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
    2c46:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
    2c4a:	9300      	str	r3, [sp, #0]
    2c4c:	6a3b      	ldr	r3, [r7, #32]
    2c4e:	4c08      	ldr	r4, [pc, #32]	; (2c70 <usb_d_ep_transfer+0x164>)
    2c50:	47a0      	blx	r4
    2c52:	6138      	str	r0, [r7, #16]
	return rc;
    2c54:	693b      	ldr	r3, [r7, #16]
}
    2c56:	4618      	mov	r0, r3
    2c58:	372c      	adds	r7, #44	; 0x2c
    2c5a:	46bd      	mov	sp, r7
    2c5c:	bd90      	pop	{r4, r7, pc}
    2c5e:	bf00      	nop
    2c60:	000024c9 	.word	0x000024c9
    2c64:	20000c0c 	.word	0x20000c0c
    2c68:	0000ac2d 	.word	0x0000ac2d
    2c6c:	0000ac53 	.word	0x0000ac53
    2c70:	00002549 	.word	0x00002549

00002c74 <_usb_d_ep_halt_clr>:
		return USB_BUSY;
	}
}

static inline int32_t _usb_d_ep_halt_clr(const uint8_t ep)
{
    2c74:	b580      	push	{r7, lr}
    2c76:	b086      	sub	sp, #24
    2c78:	af00      	add	r7, sp, #0
    2c7a:	4603      	mov	r3, r0
    2c7c:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    2c7e:	79fb      	ldrb	r3, [r7, #7]
    2c80:	4618      	mov	r0, r3
    2c82:	4b1a      	ldr	r3, [pc, #104]	; (2cec <_usb_d_ep_halt_clr+0x78>)
    2c84:	4798      	blx	r3
    2c86:	4603      	mov	r3, r0
    2c88:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    2c8a:	f997 3017 	ldrsb.w	r3, [r7, #23]
    2c8e:	015b      	lsls	r3, r3, #5
    2c90:	4a17      	ldr	r2, [pc, #92]	; (2cf0 <_usb_d_ep_halt_clr+0x7c>)
    2c92:	4413      	add	r3, r2
    2c94:	613b      	str	r3, [r7, #16]
	int32_t          rc;
	if (ep_index < 0) {
    2c96:	f997 3017 	ldrsb.w	r3, [r7, #23]
    2c9a:	2b00      	cmp	r3, #0
    2c9c:	da02      	bge.n	2ca4 <_usb_d_ep_halt_clr+0x30>
		return -USB_ERR_PARAM;
    2c9e:	f06f 0311 	mvn.w	r3, #17
    2ca2:	e01f      	b.n	2ce4 <_usb_d_ep_halt_clr+0x70>
	}
	if (_usb_d_dev_ep_stall(ep, USB_EP_STALL_GET)) {
    2ca4:	79fb      	ldrb	r3, [r7, #7]
    2ca6:	2102      	movs	r1, #2
    2ca8:	4618      	mov	r0, r3
    2caa:	4b12      	ldr	r3, [pc, #72]	; (2cf4 <_usb_d_ep_halt_clr+0x80>)
    2cac:	4798      	blx	r3
    2cae:	4603      	mov	r3, r0
    2cb0:	2b00      	cmp	r3, #0
    2cb2:	d016      	beq.n	2ce2 <_usb_d_ep_halt_clr+0x6e>
		rc = _usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    2cb4:	79fb      	ldrb	r3, [r7, #7]
    2cb6:	2100      	movs	r1, #0
    2cb8:	4618      	mov	r0, r3
    2cba:	4b0e      	ldr	r3, [pc, #56]	; (2cf4 <_usb_d_ep_halt_clr+0x80>)
    2cbc:	4798      	blx	r3
    2cbe:	60f8      	str	r0, [r7, #12]
		if (rc < 0) {
    2cc0:	68fb      	ldr	r3, [r7, #12]
    2cc2:	2b00      	cmp	r3, #0
    2cc4:	da01      	bge.n	2cca <_usb_d_ep_halt_clr+0x56>
			return rc;
    2cc6:	68fb      	ldr	r3, [r7, #12]
    2cc8:	e00c      	b.n	2ce4 <_usb_d_ep_halt_clr+0x70>
		}
		ept->xfer.hdr.state  = USB_EP_S_IDLE;
    2cca:	693b      	ldr	r3, [r7, #16]
    2ccc:	2201      	movs	r2, #1
    2cce:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_UNHALT;
    2cd0:	693b      	ldr	r3, [r7, #16]
    2cd2:	2203      	movs	r2, #3
    2cd4:	70da      	strb	r2, [r3, #3]
		ept->callbacks.xfer(ep, USB_XFER_UNHALT, NULL);
    2cd6:	693b      	ldr	r3, [r7, #16]
    2cd8:	69db      	ldr	r3, [r3, #28]
    2cda:	79f8      	ldrb	r0, [r7, #7]
    2cdc:	2200      	movs	r2, #0
    2cde:	2103      	movs	r1, #3
    2ce0:	4798      	blx	r3
	}
	return ERR_NONE;
    2ce2:	2300      	movs	r3, #0
}
    2ce4:	4618      	mov	r0, r3
    2ce6:	3718      	adds	r7, #24
    2ce8:	46bd      	mov	sp, r7
    2cea:	bd80      	pop	{r7, pc}
    2cec:	000024c9 	.word	0x000024c9
    2cf0:	20000c0c 	.word	0x20000c0c
    2cf4:	0000a085 	.word	0x0000a085

00002cf8 <usb_d_ep_halt>:

int32_t usb_d_ep_halt(const uint8_t ep, const enum usb_ep_halt_ctrl ctrl)
{
    2cf8:	b580      	push	{r7, lr}
    2cfa:	b082      	sub	sp, #8
    2cfc:	af00      	add	r7, sp, #0
    2cfe:	4603      	mov	r3, r0
    2d00:	460a      	mov	r2, r1
    2d02:	71fb      	strb	r3, [r7, #7]
    2d04:	4613      	mov	r3, r2
    2d06:	71bb      	strb	r3, [r7, #6]
	if (ctrl == USB_EP_HALT_CLR) {
    2d08:	79bb      	ldrb	r3, [r7, #6]
    2d0a:	2b00      	cmp	r3, #0
    2d0c:	d105      	bne.n	2d1a <usb_d_ep_halt+0x22>
		return _usb_d_ep_halt_clr(ep);
    2d0e:	79fb      	ldrb	r3, [r7, #7]
    2d10:	4618      	mov	r0, r3
    2d12:	4b0c      	ldr	r3, [pc, #48]	; (2d44 <usb_d_ep_halt+0x4c>)
    2d14:	4798      	blx	r3
    2d16:	4603      	mov	r3, r0
    2d18:	e00f      	b.n	2d3a <usb_d_ep_halt+0x42>
	} else if (ctrl == USB_EP_HALT_SET) {
    2d1a:	79bb      	ldrb	r3, [r7, #6]
    2d1c:	2b01      	cmp	r3, #1
    2d1e:	d106      	bne.n	2d2e <usb_d_ep_halt+0x36>
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    2d20:	79fb      	ldrb	r3, [r7, #7]
    2d22:	2101      	movs	r1, #1
    2d24:	4618      	mov	r0, r3
    2d26:	4b08      	ldr	r3, [pc, #32]	; (2d48 <usb_d_ep_halt+0x50>)
    2d28:	4798      	blx	r3
    2d2a:	4603      	mov	r3, r0
    2d2c:	e005      	b.n	2d3a <usb_d_ep_halt+0x42>
	} else {
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_GET);
    2d2e:	79fb      	ldrb	r3, [r7, #7]
    2d30:	2102      	movs	r1, #2
    2d32:	4618      	mov	r0, r3
    2d34:	4b04      	ldr	r3, [pc, #16]	; (2d48 <usb_d_ep_halt+0x50>)
    2d36:	4798      	blx	r3
    2d38:	4603      	mov	r3, r0
	}
}
    2d3a:	4618      	mov	r0, r3
    2d3c:	3708      	adds	r7, #8
    2d3e:	46bd      	mov	sp, r7
    2d40:	bd80      	pop	{r7, pc}
    2d42:	bf00      	nop
    2d44:	00002c75 	.word	0x00002c75
    2d48:	0000a085 	.word	0x0000a085

00002d4c <usb_d_ep_register_callback>:

void usb_d_ep_register_callback(const uint8_t ep, const enum usb_d_ep_cb_type type, const FUNC_PTR func)
{
    2d4c:	b580      	push	{r7, lr}
    2d4e:	b086      	sub	sp, #24
    2d50:	af00      	add	r7, sp, #0
    2d52:	4603      	mov	r3, r0
    2d54:	603a      	str	r2, [r7, #0]
    2d56:	71fb      	strb	r3, [r7, #7]
    2d58:	460b      	mov	r3, r1
    2d5a:	71bb      	strb	r3, [r7, #6]
	int8_t           ep_index = _usb_d_find_ep(ep);
    2d5c:	79fb      	ldrb	r3, [r7, #7]
    2d5e:	4618      	mov	r0, r3
    2d60:	4b16      	ldr	r3, [pc, #88]	; (2dbc <usb_d_ep_register_callback+0x70>)
    2d62:	4798      	blx	r3
    2d64:	4603      	mov	r3, r0
    2d66:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    2d68:	f997 3017 	ldrsb.w	r3, [r7, #23]
    2d6c:	015b      	lsls	r3, r3, #5
    2d6e:	4a14      	ldr	r2, [pc, #80]	; (2dc0 <usb_d_ep_register_callback+0x74>)
    2d70:	4413      	add	r3, r2
    2d72:	613b      	str	r3, [r7, #16]
	FUNC_PTR         f        = func ? (FUNC_PTR)func : (FUNC_PTR)usb_d_dummy_cb_false;
    2d74:	683b      	ldr	r3, [r7, #0]
    2d76:	2b00      	cmp	r3, #0
    2d78:	d001      	beq.n	2d7e <usb_d_ep_register_callback+0x32>
    2d7a:	683b      	ldr	r3, [r7, #0]
    2d7c:	e000      	b.n	2d80 <usb_d_ep_register_callback+0x34>
    2d7e:	4b11      	ldr	r3, [pc, #68]	; (2dc4 <usb_d_ep_register_callback+0x78>)
    2d80:	60fb      	str	r3, [r7, #12]
	if (ep_index < 0) {
    2d82:	f997 3017 	ldrsb.w	r3, [r7, #23]
    2d86:	2b00      	cmp	r3, #0
    2d88:	db13      	blt.n	2db2 <usb_d_ep_register_callback+0x66>
		return;
	}
	switch (type) {
    2d8a:	79bb      	ldrb	r3, [r7, #6]
    2d8c:	2b01      	cmp	r3, #1
    2d8e:	d008      	beq.n	2da2 <usb_d_ep_register_callback+0x56>
    2d90:	2b02      	cmp	r3, #2
    2d92:	d00a      	beq.n	2daa <usb_d_ep_register_callback+0x5e>
    2d94:	2b00      	cmp	r3, #0
    2d96:	d000      	beq.n	2d9a <usb_d_ep_register_callback+0x4e>
		break;
	case USB_D_EP_CB_XFER:
		ept->callbacks.xfer = (usb_d_ep_cb_xfer_t)f;
		break;
	default:
		break;
    2d98:	e00c      	b.n	2db4 <usb_d_ep_register_callback+0x68>
		ept->callbacks.req = (usb_d_ep_cb_setup_t)f;
    2d9a:	693b      	ldr	r3, [r7, #16]
    2d9c:	68fa      	ldr	r2, [r7, #12]
    2d9e:	615a      	str	r2, [r3, #20]
		break;
    2da0:	e008      	b.n	2db4 <usb_d_ep_register_callback+0x68>
		ept->callbacks.more = (usb_d_ep_cb_more_t)f;
    2da2:	693b      	ldr	r3, [r7, #16]
    2da4:	68fa      	ldr	r2, [r7, #12]
    2da6:	619a      	str	r2, [r3, #24]
		break;
    2da8:	e004      	b.n	2db4 <usb_d_ep_register_callback+0x68>
		ept->callbacks.xfer = (usb_d_ep_cb_xfer_t)f;
    2daa:	693b      	ldr	r3, [r7, #16]
    2dac:	68fa      	ldr	r2, [r7, #12]
    2dae:	61da      	str	r2, [r3, #28]
		break;
    2db0:	e000      	b.n	2db4 <usb_d_ep_register_callback+0x68>
		return;
    2db2:	bf00      	nop
	}
}
    2db4:	3718      	adds	r7, #24
    2db6:	46bd      	mov	sp, r7
    2db8:	bd80      	pop	{r7, pc}
    2dba:	bf00      	nop
    2dbc:	000024c9 	.word	0x000024c9
    2dc0:	20000c0c 	.word	0x20000c0c
    2dc4:	0000259d 	.word	0x0000259d

00002dc8 <assert>:

/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
    2dc8:	b480      	push	{r7}
    2dca:	b085      	sub	sp, #20
    2dcc:	af00      	add	r7, sp, #0
    2dce:	4603      	mov	r3, r0
    2dd0:	60b9      	str	r1, [r7, #8]
    2dd2:	607a      	str	r2, [r7, #4]
    2dd4:	73fb      	strb	r3, [r7, #15]
	if (!(condition)) {
    2dd6:	7bfb      	ldrb	r3, [r7, #15]
    2dd8:	f083 0301 	eor.w	r3, r3, #1
    2ddc:	b2db      	uxtb	r3, r3
    2dde:	2b00      	cmp	r3, #0
    2de0:	d000      	beq.n	2de4 <assert+0x1c>
		__asm("BKPT #0");
    2de2:	be00      	bkpt	0x0000
	}
	(void)file;
	(void)line;
}
    2de4:	bf00      	nop
    2de6:	3714      	adds	r7, #20
    2de8:	46bd      	mov	sp, r7
    2dea:	f85d 7b04 	ldr.w	r7, [sp], #4
    2dee:	4770      	bx	lr

00002df0 <is_list_element>:

/**
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
    2df0:	b480      	push	{r7}
    2df2:	b085      	sub	sp, #20
    2df4:	af00      	add	r7, sp, #0
    2df6:	6078      	str	r0, [r7, #4]
    2df8:	6039      	str	r1, [r7, #0]
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
    2dfa:	687b      	ldr	r3, [r7, #4]
    2dfc:	681b      	ldr	r3, [r3, #0]
    2dfe:	60fb      	str	r3, [r7, #12]
    2e00:	e008      	b.n	2e14 <is_list_element+0x24>
		if (it == element) {
    2e02:	68fa      	ldr	r2, [r7, #12]
    2e04:	683b      	ldr	r3, [r7, #0]
    2e06:	429a      	cmp	r2, r3
    2e08:	d101      	bne.n	2e0e <is_list_element+0x1e>
			return true;
    2e0a:	2301      	movs	r3, #1
    2e0c:	e006      	b.n	2e1c <is_list_element+0x2c>
	for (it = list->head; it; it = it->next) {
    2e0e:	68fb      	ldr	r3, [r7, #12]
    2e10:	681b      	ldr	r3, [r3, #0]
    2e12:	60fb      	str	r3, [r7, #12]
    2e14:	68fb      	ldr	r3, [r7, #12]
    2e16:	2b00      	cmp	r3, #0
    2e18:	d1f3      	bne.n	2e02 <is_list_element+0x12>
		}
	}

	return false;
    2e1a:	2300      	movs	r3, #0
}
    2e1c:	4618      	mov	r0, r3
    2e1e:	3714      	adds	r7, #20
    2e20:	46bd      	mov	sp, r7
    2e22:	f85d 7b04 	ldr.w	r7, [sp], #4
    2e26:	4770      	bx	lr

00002e28 <list_insert_as_head>:

/**
 * \brief Insert an element as list head
 */
void list_insert_as_head(struct list_descriptor *const list, void *const element)
{
    2e28:	b580      	push	{r7, lr}
    2e2a:	b082      	sub	sp, #8
    2e2c:	af00      	add	r7, sp, #0
    2e2e:	6078      	str	r0, [r7, #4]
    2e30:	6039      	str	r1, [r7, #0]
	ASSERT(!is_list_element(list, element));
    2e32:	6839      	ldr	r1, [r7, #0]
    2e34:	6878      	ldr	r0, [r7, #4]
    2e36:	4b0f      	ldr	r3, [pc, #60]	; (2e74 <list_insert_as_head+0x4c>)
    2e38:	4798      	blx	r3
    2e3a:	4603      	mov	r3, r0
    2e3c:	2b00      	cmp	r3, #0
    2e3e:	bf14      	ite	ne
    2e40:	2301      	movne	r3, #1
    2e42:	2300      	moveq	r3, #0
    2e44:	b2db      	uxtb	r3, r3
    2e46:	f083 0301 	eor.w	r3, r3, #1
    2e4a:	b2db      	uxtb	r3, r3
    2e4c:	f003 0301 	and.w	r3, r3, #1
    2e50:	b2db      	uxtb	r3, r3
    2e52:	2239      	movs	r2, #57	; 0x39
    2e54:	4908      	ldr	r1, [pc, #32]	; (2e78 <list_insert_as_head+0x50>)
    2e56:	4618      	mov	r0, r3
    2e58:	4b08      	ldr	r3, [pc, #32]	; (2e7c <list_insert_as_head+0x54>)
    2e5a:	4798      	blx	r3

	((struct list_element *)element)->next = list->head;
    2e5c:	687b      	ldr	r3, [r7, #4]
    2e5e:	681a      	ldr	r2, [r3, #0]
    2e60:	683b      	ldr	r3, [r7, #0]
    2e62:	601a      	str	r2, [r3, #0]
	list->head                             = (struct list_element *)element;
    2e64:	687b      	ldr	r3, [r7, #4]
    2e66:	683a      	ldr	r2, [r7, #0]
    2e68:	601a      	str	r2, [r3, #0]
}
    2e6a:	bf00      	nop
    2e6c:	3708      	adds	r7, #8
    2e6e:	46bd      	mov	sp, r7
    2e70:	bd80      	pop	{r7, pc}
    2e72:	bf00      	nop
    2e74:	00002df1 	.word	0x00002df1
    2e78:	0001331c 	.word	0x0001331c
    2e7c:	00002dc9 	.word	0x00002dc9

00002e80 <list_insert_after>:

/**
 * \brief Insert an element after the given list element
 */
void list_insert_after(void *const after, void *const element)
{
    2e80:	b480      	push	{r7}
    2e82:	b083      	sub	sp, #12
    2e84:	af00      	add	r7, sp, #0
    2e86:	6078      	str	r0, [r7, #4]
    2e88:	6039      	str	r1, [r7, #0]
	((struct list_element *)element)->next = ((struct list_element *)after)->next;
    2e8a:	687b      	ldr	r3, [r7, #4]
    2e8c:	681a      	ldr	r2, [r3, #0]
    2e8e:	683b      	ldr	r3, [r7, #0]
    2e90:	601a      	str	r2, [r3, #0]
	((struct list_element *)after)->next   = (struct list_element *)element;
    2e92:	687b      	ldr	r3, [r7, #4]
    2e94:	683a      	ldr	r2, [r7, #0]
    2e96:	601a      	str	r2, [r3, #0]
}
    2e98:	bf00      	nop
    2e9a:	370c      	adds	r7, #12
    2e9c:	46bd      	mov	sp, r7
    2e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
    2ea2:	4770      	bx	lr

00002ea4 <list_insert_at_end>:

/**
 * \brief Insert an element at list end
 */
void list_insert_at_end(struct list_descriptor *const list, void *const element)
{
    2ea4:	b580      	push	{r7, lr}
    2ea6:	b084      	sub	sp, #16
    2ea8:	af00      	add	r7, sp, #0
    2eaa:	6078      	str	r0, [r7, #4]
    2eac:	6039      	str	r1, [r7, #0]
	struct list_element *it = list->head;
    2eae:	687b      	ldr	r3, [r7, #4]
    2eb0:	681b      	ldr	r3, [r3, #0]
    2eb2:	60fb      	str	r3, [r7, #12]

	ASSERT(!is_list_element(list, element));
    2eb4:	6839      	ldr	r1, [r7, #0]
    2eb6:	6878      	ldr	r0, [r7, #4]
    2eb8:	4b16      	ldr	r3, [pc, #88]	; (2f14 <list_insert_at_end+0x70>)
    2eba:	4798      	blx	r3
    2ebc:	4603      	mov	r3, r0
    2ebe:	2b00      	cmp	r3, #0
    2ec0:	bf14      	ite	ne
    2ec2:	2301      	movne	r3, #1
    2ec4:	2300      	moveq	r3, #0
    2ec6:	b2db      	uxtb	r3, r3
    2ec8:	f083 0301 	eor.w	r3, r3, #1
    2ecc:	b2db      	uxtb	r3, r3
    2ece:	f003 0301 	and.w	r3, r3, #1
    2ed2:	b2db      	uxtb	r3, r3
    2ed4:	224f      	movs	r2, #79	; 0x4f
    2ed6:	4910      	ldr	r1, [pc, #64]	; (2f18 <list_insert_at_end+0x74>)
    2ed8:	4618      	mov	r0, r3
    2eda:	4b10      	ldr	r3, [pc, #64]	; (2f1c <list_insert_at_end+0x78>)
    2edc:	4798      	blx	r3

	if (!list->head) {
    2ede:	687b      	ldr	r3, [r7, #4]
    2ee0:	681b      	ldr	r3, [r3, #0]
    2ee2:	2b00      	cmp	r3, #0
    2ee4:	d109      	bne.n	2efa <list_insert_at_end+0x56>
		list->head                             = (struct list_element *)element;
    2ee6:	687b      	ldr	r3, [r7, #4]
    2ee8:	683a      	ldr	r2, [r7, #0]
    2eea:	601a      	str	r2, [r3, #0]
		((struct list_element *)element)->next = NULL;
    2eec:	683b      	ldr	r3, [r7, #0]
    2eee:	2200      	movs	r2, #0
    2ef0:	601a      	str	r2, [r3, #0]
		return;
    2ef2:	e00c      	b.n	2f0e <list_insert_at_end+0x6a>
	}

	while (it->next) {
		it = it->next;
    2ef4:	68fb      	ldr	r3, [r7, #12]
    2ef6:	681b      	ldr	r3, [r3, #0]
    2ef8:	60fb      	str	r3, [r7, #12]
	while (it->next) {
    2efa:	68fb      	ldr	r3, [r7, #12]
    2efc:	681b      	ldr	r3, [r3, #0]
    2efe:	2b00      	cmp	r3, #0
    2f00:	d1f8      	bne.n	2ef4 <list_insert_at_end+0x50>
	}
	it->next                               = (struct list_element *)element;
    2f02:	68fb      	ldr	r3, [r7, #12]
    2f04:	683a      	ldr	r2, [r7, #0]
    2f06:	601a      	str	r2, [r3, #0]
	((struct list_element *)element)->next = NULL;
    2f08:	683b      	ldr	r3, [r7, #0]
    2f0a:	2200      	movs	r2, #0
    2f0c:	601a      	str	r2, [r3, #0]
}
    2f0e:	3710      	adds	r7, #16
    2f10:	46bd      	mov	sp, r7
    2f12:	bd80      	pop	{r7, pc}
    2f14:	00002df1 	.word	0x00002df1
    2f18:	0001331c 	.word	0x0001331c
    2f1c:	00002dc9 	.word	0x00002dc9

00002f20 <list_remove_head>:

/**
 * \brief Removes list head
 */
void *list_remove_head(struct list_descriptor *const list)
{
    2f20:	b480      	push	{r7}
    2f22:	b085      	sub	sp, #20
    2f24:	af00      	add	r7, sp, #0
    2f26:	6078      	str	r0, [r7, #4]
	if (list->head) {
    2f28:	687b      	ldr	r3, [r7, #4]
    2f2a:	681b      	ldr	r3, [r3, #0]
    2f2c:	2b00      	cmp	r3, #0
    2f2e:	d009      	beq.n	2f44 <list_remove_head+0x24>
		struct list_element *tmp = list->head;
    2f30:	687b      	ldr	r3, [r7, #4]
    2f32:	681b      	ldr	r3, [r3, #0]
    2f34:	60fb      	str	r3, [r7, #12]

		list->head = list->head->next;
    2f36:	687b      	ldr	r3, [r7, #4]
    2f38:	681b      	ldr	r3, [r3, #0]
    2f3a:	681a      	ldr	r2, [r3, #0]
    2f3c:	687b      	ldr	r3, [r7, #4]
    2f3e:	601a      	str	r2, [r3, #0]
		return (void *)tmp;
    2f40:	68fb      	ldr	r3, [r7, #12]
    2f42:	e000      	b.n	2f46 <list_remove_head+0x26>
	}

	return NULL;
    2f44:	2300      	movs	r3, #0
}
    2f46:	4618      	mov	r0, r3
    2f48:	3714      	adds	r7, #20
    2f4a:	46bd      	mov	sp, r7
    2f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
    2f50:	4770      	bx	lr
	...

00002f54 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
    2f54:	b480      	push	{r7}
    2f56:	b083      	sub	sp, #12
    2f58:	af00      	add	r7, sp, #0
    2f5a:	4603      	mov	r3, r0
    2f5c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    2f5e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    2f62:	2b00      	cmp	r3, #0
    2f64:	db0b      	blt.n	2f7e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2f66:	4909      	ldr	r1, [pc, #36]	; (2f8c <__NVIC_EnableIRQ+0x38>)
    2f68:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    2f6c:	095b      	lsrs	r3, r3, #5
    2f6e:	88fa      	ldrh	r2, [r7, #6]
    2f70:	f002 021f 	and.w	r2, r2, #31
    2f74:	2001      	movs	r0, #1
    2f76:	fa00 f202 	lsl.w	r2, r0, r2
    2f7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
    2f7e:	bf00      	nop
    2f80:	370c      	adds	r7, #12
    2f82:	46bd      	mov	sp, r7
    2f84:	f85d 7b04 	ldr.w	r7, [sp], #4
    2f88:	4770      	bx	lr
    2f8a:	bf00      	nop
    2f8c:	e000e100 	.word	0xe000e100

00002f90 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
    2f90:	b480      	push	{r7}
    2f92:	b083      	sub	sp, #12
    2f94:	af00      	add	r7, sp, #0
    2f96:	4603      	mov	r3, r0
    2f98:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    2f9a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    2f9e:	2b00      	cmp	r3, #0
    2fa0:	db10      	blt.n	2fc4 <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2fa2:	490b      	ldr	r1, [pc, #44]	; (2fd0 <__NVIC_DisableIRQ+0x40>)
    2fa4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    2fa8:	095b      	lsrs	r3, r3, #5
    2faa:	88fa      	ldrh	r2, [r7, #6]
    2fac:	f002 021f 	and.w	r2, r2, #31
    2fb0:	2001      	movs	r0, #1
    2fb2:	fa00 f202 	lsl.w	r2, r0, r2
    2fb6:	3320      	adds	r3, #32
    2fb8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    2fbc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2fc0:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
    2fc4:	bf00      	nop
    2fc6:	370c      	adds	r7, #12
    2fc8:	46bd      	mov	sp, r7
    2fca:	f85d 7b04 	ldr.w	r7, [sp], #4
    2fce:	4770      	bx	lr
    2fd0:	e000e100 	.word	0xe000e100

00002fd4 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
    2fd4:	b480      	push	{r7}
    2fd6:	b083      	sub	sp, #12
    2fd8:	af00      	add	r7, sp, #0
    2fda:	4603      	mov	r3, r0
    2fdc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    2fde:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    2fe2:	2b00      	cmp	r3, #0
    2fe4:	db0c      	blt.n	3000 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2fe6:	4909      	ldr	r1, [pc, #36]	; (300c <__NVIC_ClearPendingIRQ+0x38>)
    2fe8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    2fec:	095b      	lsrs	r3, r3, #5
    2fee:	88fa      	ldrh	r2, [r7, #6]
    2ff0:	f002 021f 	and.w	r2, r2, #31
    2ff4:	2001      	movs	r0, #1
    2ff6:	fa00 f202 	lsl.w	r2, r0, r2
    2ffa:	3360      	adds	r3, #96	; 0x60
    2ffc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
    3000:	bf00      	nop
    3002:	370c      	adds	r7, #12
    3004:	46bd      	mov	sp, r7
    3006:	f85d 7b04 	ldr.w	r7, [sp], #4
    300a:	4770      	bx	lr
    300c:	e000e100 	.word	0xe000e100

00003010 <hri_can_get_PSR_EP_bit>:
{
	return ((Can *)hw)->ECR.reg;
}

static inline bool hri_can_get_PSR_EP_bit(const void *const hw)
{
    3010:	b480      	push	{r7}
    3012:	b083      	sub	sp, #12
    3014:	af00      	add	r7, sp, #0
    3016:	6078      	str	r0, [r7, #4]
	return (((Can *)hw)->PSR.reg & CAN_PSR_EP) >> CAN_PSR_EP_Pos;
    3018:	687b      	ldr	r3, [r7, #4]
    301a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    301c:	095b      	lsrs	r3, r3, #5
    301e:	f003 0301 	and.w	r3, r3, #1
    3022:	2b00      	cmp	r3, #0
    3024:	bf14      	ite	ne
    3026:	2301      	movne	r3, #1
    3028:	2300      	moveq	r3, #0
    302a:	b2db      	uxtb	r3, r3
}
    302c:	4618      	mov	r0, r3
    302e:	370c      	adds	r7, #12
    3030:	46bd      	mov	sp, r7
    3032:	f85d 7b04 	ldr.w	r7, [sp], #4
    3036:	4770      	bx	lr

00003038 <hri_can_read_RXF0S_F0FL_bf>:
{
	return (((Can *)hw)->RXF0S.reg & CAN_RXF0S_F0FL(mask)) >> CAN_RXF0S_F0FL_Pos;
}

static inline hri_can_rxf0s_reg_t hri_can_read_RXF0S_F0FL_bf(const void *const hw)
{
    3038:	b480      	push	{r7}
    303a:	b083      	sub	sp, #12
    303c:	af00      	add	r7, sp, #0
    303e:	6078      	str	r0, [r7, #4]
	return (((Can *)hw)->RXF0S.reg & CAN_RXF0S_F0FL_Msk) >> CAN_RXF0S_F0FL_Pos;
    3040:	687b      	ldr	r3, [r7, #4]
    3042:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
    3046:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
    304a:	4618      	mov	r0, r3
    304c:	370c      	adds	r7, #12
    304e:	46bd      	mov	sp, r7
    3050:	f85d 7b04 	ldr.w	r7, [sp], #4
    3054:	4770      	bx	lr

00003056 <hri_can_read_RXF0S_F0GI_bf>:
{
	return (((Can *)hw)->RXF0S.reg & CAN_RXF0S_F0GI(mask)) >> CAN_RXF0S_F0GI_Pos;
}

static inline hri_can_rxf0s_reg_t hri_can_read_RXF0S_F0GI_bf(const void *const hw)
{
    3056:	b480      	push	{r7}
    3058:	b083      	sub	sp, #12
    305a:	af00      	add	r7, sp, #0
    305c:	6078      	str	r0, [r7, #4]
	return (((Can *)hw)->RXF0S.reg & CAN_RXF0S_F0GI_Msk) >> CAN_RXF0S_F0GI_Pos;
    305e:	687b      	ldr	r3, [r7, #4]
    3060:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
    3064:	0a1b      	lsrs	r3, r3, #8
    3066:	f003 033f 	and.w	r3, r3, #63	; 0x3f
}
    306a:	4618      	mov	r0, r3
    306c:	370c      	adds	r7, #12
    306e:	46bd      	mov	sp, r7
    3070:	f85d 7b04 	ldr.w	r7, [sp], #4
    3074:	4770      	bx	lr

00003076 <hri_can_get_TXFQS_TFQF_bit>:
{
	return ((Can *)hw)->RXF1S.reg;
}

static inline bool hri_can_get_TXFQS_TFQF_bit(const void *const hw)
{
    3076:	b480      	push	{r7}
    3078:	b083      	sub	sp, #12
    307a:	af00      	add	r7, sp, #0
    307c:	6078      	str	r0, [r7, #4]
	return (((Can *)hw)->TXFQS.reg & CAN_TXFQS_TFQF) >> CAN_TXFQS_TFQF_Pos;
    307e:	687b      	ldr	r3, [r7, #4]
    3080:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
    3084:	0d5b      	lsrs	r3, r3, #21
    3086:	f003 0301 	and.w	r3, r3, #1
    308a:	2b00      	cmp	r3, #0
    308c:	bf14      	ite	ne
    308e:	2301      	movne	r3, #1
    3090:	2300      	moveq	r3, #0
    3092:	b2db      	uxtb	r3, r3
}
    3094:	4618      	mov	r0, r3
    3096:	370c      	adds	r7, #12
    3098:	46bd      	mov	sp, r7
    309a:	f85d 7b04 	ldr.w	r7, [sp], #4
    309e:	4770      	bx	lr

000030a0 <hri_can_read_TXFQS_TFQPI_bf>:
{
	return (((Can *)hw)->TXFQS.reg & CAN_TXFQS_TFQPI(mask)) >> CAN_TXFQS_TFQPI_Pos;
}

static inline hri_can_txfqs_reg_t hri_can_read_TXFQS_TFQPI_bf(const void *const hw)
{
    30a0:	b480      	push	{r7}
    30a2:	b083      	sub	sp, #12
    30a4:	af00      	add	r7, sp, #0
    30a6:	6078      	str	r0, [r7, #4]
	return (((Can *)hw)->TXFQS.reg & CAN_TXFQS_TFQPI_Msk) >> CAN_TXFQS_TFQPI_Pos;
    30a8:	687b      	ldr	r3, [r7, #4]
    30aa:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
    30ae:	0c1b      	lsrs	r3, r3, #16
    30b0:	f003 031f 	and.w	r3, r3, #31
}
    30b4:	4618      	mov	r0, r3
    30b6:	370c      	adds	r7, #12
    30b8:	46bd      	mov	sp, r7
    30ba:	f85d 7b04 	ldr.w	r7, [sp], #4
    30be:	4770      	bx	lr

000030c0 <hri_can_write_MRCFG_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_MRCFG_reg(const void *const hw, hri_can_mrcfg_reg_t data)
{
    30c0:	b480      	push	{r7}
    30c2:	b083      	sub	sp, #12
    30c4:	af00      	add	r7, sp, #0
    30c6:	6078      	str	r0, [r7, #4]
    30c8:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->MRCFG.reg = data;
    30ca:	687b      	ldr	r3, [r7, #4]
    30cc:	683a      	ldr	r2, [r7, #0]
    30ce:	609a      	str	r2, [r3, #8]
	CAN_CRITICAL_SECTION_LEAVE();
}
    30d0:	bf00      	nop
    30d2:	370c      	adds	r7, #12
    30d4:	46bd      	mov	sp, r7
    30d6:	f85d 7b04 	ldr.w	r7, [sp], #4
    30da:	4770      	bx	lr

000030dc <hri_can_write_DBTP_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_DBTP_reg(const void *const hw, hri_can_dbtp_reg_t data)
{
    30dc:	b480      	push	{r7}
    30de:	b083      	sub	sp, #12
    30e0:	af00      	add	r7, sp, #0
    30e2:	6078      	str	r0, [r7, #4]
    30e4:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->DBTP.reg = data;
    30e6:	687b      	ldr	r3, [r7, #4]
    30e8:	683a      	ldr	r2, [r7, #0]
    30ea:	60da      	str	r2, [r3, #12]
	CAN_CRITICAL_SECTION_LEAVE();
}
    30ec:	bf00      	nop
    30ee:	370c      	adds	r7, #12
    30f0:	46bd      	mov	sp, r7
    30f2:	f85d 7b04 	ldr.w	r7, [sp], #4
    30f6:	4770      	bx	lr

000030f8 <hri_can_set_CCCR_INIT_bit>:
{
	return ((Can *)hw)->RWD.reg;
}

static inline void hri_can_set_CCCR_INIT_bit(const void *const hw)
{
    30f8:	b480      	push	{r7}
    30fa:	b083      	sub	sp, #12
    30fc:	af00      	add	r7, sp, #0
    30fe:	6078      	str	r0, [r7, #4]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg |= CAN_CCCR_INIT;
    3100:	687b      	ldr	r3, [r7, #4]
    3102:	699b      	ldr	r3, [r3, #24]
    3104:	f043 0201 	orr.w	r2, r3, #1
    3108:	687b      	ldr	r3, [r7, #4]
    310a:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    310c:	bf00      	nop
    310e:	370c      	adds	r7, #12
    3110:	46bd      	mov	sp, r7
    3112:	f85d 7b04 	ldr.w	r7, [sp], #4
    3116:	4770      	bx	lr

00003118 <hri_can_get_CCCR_INIT_bit>:

static inline bool hri_can_get_CCCR_INIT_bit(const void *const hw)
{
    3118:	b480      	push	{r7}
    311a:	b085      	sub	sp, #20
    311c:	af00      	add	r7, sp, #0
    311e:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Can *)hw)->CCCR.reg;
    3120:	687b      	ldr	r3, [r7, #4]
    3122:	699b      	ldr	r3, [r3, #24]
    3124:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & CAN_CCCR_INIT) >> CAN_CCCR_INIT_Pos;
    3126:	68fb      	ldr	r3, [r7, #12]
    3128:	f003 0301 	and.w	r3, r3, #1
    312c:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    312e:	68fb      	ldr	r3, [r7, #12]
    3130:	2b00      	cmp	r3, #0
    3132:	bf14      	ite	ne
    3134:	2301      	movne	r3, #1
    3136:	2300      	moveq	r3, #0
    3138:	b2db      	uxtb	r3, r3
}
    313a:	4618      	mov	r0, r3
    313c:	3714      	adds	r7, #20
    313e:	46bd      	mov	sp, r7
    3140:	f85d 7b04 	ldr.w	r7, [sp], #4
    3144:	4770      	bx	lr

00003146 <hri_can_clear_CCCR_INIT_bit>:
	((Can *)hw)->CCCR.reg = tmp;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline void hri_can_clear_CCCR_INIT_bit(const void *const hw)
{
    3146:	b480      	push	{r7}
    3148:	b083      	sub	sp, #12
    314a:	af00      	add	r7, sp, #0
    314c:	6078      	str	r0, [r7, #4]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg &= ~CAN_CCCR_INIT;
    314e:	687b      	ldr	r3, [r7, #4]
    3150:	699b      	ldr	r3, [r3, #24]
    3152:	f023 0201 	bic.w	r2, r3, #1
    3156:	687b      	ldr	r3, [r7, #4]
    3158:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    315a:	bf00      	nop
    315c:	370c      	adds	r7, #12
    315e:	46bd      	mov	sp, r7
    3160:	f85d 7b04 	ldr.w	r7, [sp], #4
    3164:	4770      	bx	lr

00003166 <hri_can_set_CCCR_CCE_bit>:
	((Can *)hw)->CCCR.reg ^= CAN_CCCR_INIT;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline void hri_can_set_CCCR_CCE_bit(const void *const hw)
{
    3166:	b480      	push	{r7}
    3168:	b083      	sub	sp, #12
    316a:	af00      	add	r7, sp, #0
    316c:	6078      	str	r0, [r7, #4]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg |= CAN_CCCR_CCE;
    316e:	687b      	ldr	r3, [r7, #4]
    3170:	699b      	ldr	r3, [r3, #24]
    3172:	f043 0202 	orr.w	r2, r3, #2
    3176:	687b      	ldr	r3, [r7, #4]
    3178:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    317a:	bf00      	nop
    317c:	370c      	adds	r7, #12
    317e:	46bd      	mov	sp, r7
    3180:	f85d 7b04 	ldr.w	r7, [sp], #4
    3184:	4770      	bx	lr

00003186 <hri_can_clear_CCCR_CCE_bit>:
	((Can *)hw)->CCCR.reg = tmp;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline void hri_can_clear_CCCR_CCE_bit(const void *const hw)
{
    3186:	b480      	push	{r7}
    3188:	b083      	sub	sp, #12
    318a:	af00      	add	r7, sp, #0
    318c:	6078      	str	r0, [r7, #4]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg &= ~CAN_CCCR_CCE;
    318e:	687b      	ldr	r3, [r7, #4]
    3190:	699b      	ldr	r3, [r3, #24]
    3192:	f023 0202 	bic.w	r2, r3, #2
    3196:	687b      	ldr	r3, [r7, #4]
    3198:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    319a:	bf00      	nop
    319c:	370c      	adds	r7, #12
    319e:	46bd      	mov	sp, r7
    31a0:	f85d 7b04 	ldr.w	r7, [sp], #4
    31a4:	4770      	bx	lr

000031a6 <hri_can_get_CCCR_FDOE_bit>:
	((Can *)hw)->CCCR.reg |= CAN_CCCR_FDOE;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_can_get_CCCR_FDOE_bit(const void *const hw)
{
    31a6:	b480      	push	{r7}
    31a8:	b085      	sub	sp, #20
    31aa:	af00      	add	r7, sp, #0
    31ac:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Can *)hw)->CCCR.reg;
    31ae:	687b      	ldr	r3, [r7, #4]
    31b0:	699b      	ldr	r3, [r3, #24]
    31b2:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & CAN_CCCR_FDOE) >> CAN_CCCR_FDOE_Pos;
    31b4:	68fb      	ldr	r3, [r7, #12]
    31b6:	0a1b      	lsrs	r3, r3, #8
    31b8:	f003 0301 	and.w	r3, r3, #1
    31bc:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    31be:	68fb      	ldr	r3, [r7, #12]
    31c0:	2b00      	cmp	r3, #0
    31c2:	bf14      	ite	ne
    31c4:	2301      	movne	r3, #1
    31c6:	2300      	moveq	r3, #0
    31c8:	b2db      	uxtb	r3, r3
}
    31ca:	4618      	mov	r0, r3
    31cc:	3714      	adds	r7, #20
    31ce:	46bd      	mov	sp, r7
    31d0:	f85d 7b04 	ldr.w	r7, [sp], #4
    31d4:	4770      	bx	lr

000031d6 <hri_can_get_CCCR_BRSE_bit>:
	((Can *)hw)->CCCR.reg |= CAN_CCCR_BRSE;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_can_get_CCCR_BRSE_bit(const void *const hw)
{
    31d6:	b480      	push	{r7}
    31d8:	b085      	sub	sp, #20
    31da:	af00      	add	r7, sp, #0
    31dc:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Can *)hw)->CCCR.reg;
    31de:	687b      	ldr	r3, [r7, #4]
    31e0:	699b      	ldr	r3, [r3, #24]
    31e2:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & CAN_CCCR_BRSE) >> CAN_CCCR_BRSE_Pos;
    31e4:	68fb      	ldr	r3, [r7, #12]
    31e6:	0a5b      	lsrs	r3, r3, #9
    31e8:	f003 0301 	and.w	r3, r3, #1
    31ec:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    31ee:	68fb      	ldr	r3, [r7, #12]
    31f0:	2b00      	cmp	r3, #0
    31f2:	bf14      	ite	ne
    31f4:	2301      	movne	r3, #1
    31f6:	2300      	moveq	r3, #0
    31f8:	b2db      	uxtb	r3, r3
}
    31fa:	4618      	mov	r0, r3
    31fc:	3714      	adds	r7, #20
    31fe:	46bd      	mov	sp, r7
    3200:	f85d 7b04 	ldr.w	r7, [sp], #4
    3204:	4770      	bx	lr

00003206 <hri_can_set_CCCR_reg>:
	((Can *)hw)->CCCR.reg ^= CAN_CCCR_NISO;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline void hri_can_set_CCCR_reg(const void *const hw, hri_can_cccr_reg_t mask)
{
    3206:	b480      	push	{r7}
    3208:	b083      	sub	sp, #12
    320a:	af00      	add	r7, sp, #0
    320c:	6078      	str	r0, [r7, #4]
    320e:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg |= mask;
    3210:	687b      	ldr	r3, [r7, #4]
    3212:	699a      	ldr	r2, [r3, #24]
    3214:	683b      	ldr	r3, [r7, #0]
    3216:	431a      	orrs	r2, r3
    3218:	687b      	ldr	r3, [r7, #4]
    321a:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    321c:	bf00      	nop
    321e:	370c      	adds	r7, #12
    3220:	46bd      	mov	sp, r7
    3222:	f85d 7b04 	ldr.w	r7, [sp], #4
    3226:	4770      	bx	lr

00003228 <hri_can_write_NBTP_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_NBTP_reg(const void *const hw, hri_can_nbtp_reg_t data)
{
    3228:	b480      	push	{r7}
    322a:	b083      	sub	sp, #12
    322c:	af00      	add	r7, sp, #0
    322e:	6078      	str	r0, [r7, #4]
    3230:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->NBTP.reg = data;
    3232:	687b      	ldr	r3, [r7, #4]
    3234:	683a      	ldr	r2, [r7, #0]
    3236:	61da      	str	r2, [r3, #28]
	CAN_CRITICAL_SECTION_LEAVE();
}
    3238:	bf00      	nop
    323a:	370c      	adds	r7, #12
    323c:	46bd      	mov	sp, r7
    323e:	f85d 7b04 	ldr.w	r7, [sp], #4
    3242:	4770      	bx	lr

00003244 <hri_can_write_IR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_IR_reg(const void *const hw, hri_can_ir_reg_t data)
{
    3244:	b480      	push	{r7}
    3246:	b083      	sub	sp, #12
    3248:	af00      	add	r7, sp, #0
    324a:	6078      	str	r0, [r7, #4]
    324c:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->IR.reg = data;
    324e:	687b      	ldr	r3, [r7, #4]
    3250:	683a      	ldr	r2, [r7, #0]
    3252:	651a      	str	r2, [r3, #80]	; 0x50
	CAN_CRITICAL_SECTION_LEAVE();
}
    3254:	bf00      	nop
    3256:	370c      	adds	r7, #12
    3258:	46bd      	mov	sp, r7
    325a:	f85d 7b04 	ldr.w	r7, [sp], #4
    325e:	4770      	bx	lr

00003260 <hri_can_read_IR_reg>:
	((Can *)hw)->IR.reg ^= mask;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline hri_can_ir_reg_t hri_can_read_IR_reg(const void *const hw)
{
    3260:	b480      	push	{r7}
    3262:	b083      	sub	sp, #12
    3264:	af00      	add	r7, sp, #0
    3266:	6078      	str	r0, [r7, #4]
	return ((Can *)hw)->IR.reg;
    3268:	687b      	ldr	r3, [r7, #4]
    326a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
}
    326c:	4618      	mov	r0, r3
    326e:	370c      	adds	r7, #12
    3270:	46bd      	mov	sp, r7
    3272:	f85d 7b04 	ldr.w	r7, [sp], #4
    3276:	4770      	bx	lr

00003278 <hri_can_write_IE_RF0NE_bit>:
	tmp = (tmp & CAN_IE_RF0NE) >> CAN_IE_RF0NE_Pos;
	return (bool)tmp;
}

static inline void hri_can_write_IE_RF0NE_bit(const void *const hw, bool value)
{
    3278:	b480      	push	{r7}
    327a:	b085      	sub	sp, #20
    327c:	af00      	add	r7, sp, #0
    327e:	6078      	str	r0, [r7, #4]
    3280:	460b      	mov	r3, r1
    3282:	70fb      	strb	r3, [r7, #3]
	uint32_t tmp;
	CAN_CRITICAL_SECTION_ENTER();
	tmp = ((Can *)hw)->IE.reg;
    3284:	687b      	ldr	r3, [r7, #4]
    3286:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    3288:	60fb      	str	r3, [r7, #12]
	tmp &= ~CAN_IE_RF0NE;
    328a:	68fb      	ldr	r3, [r7, #12]
    328c:	f023 0301 	bic.w	r3, r3, #1
    3290:	60fb      	str	r3, [r7, #12]
	tmp |= value << CAN_IE_RF0NE_Pos;
    3292:	78fb      	ldrb	r3, [r7, #3]
    3294:	68fa      	ldr	r2, [r7, #12]
    3296:	4313      	orrs	r3, r2
    3298:	60fb      	str	r3, [r7, #12]
	((Can *)hw)->IE.reg = tmp;
    329a:	687b      	ldr	r3, [r7, #4]
    329c:	68fa      	ldr	r2, [r7, #12]
    329e:	655a      	str	r2, [r3, #84]	; 0x54
	CAN_CRITICAL_SECTION_LEAVE();
}
    32a0:	bf00      	nop
    32a2:	3714      	adds	r7, #20
    32a4:	46bd      	mov	sp, r7
    32a6:	f85d 7b04 	ldr.w	r7, [sp], #4
    32aa:	4770      	bx	lr

000032ac <hri_can_write_IE_TCE_bit>:
	tmp = (tmp & CAN_IE_TCE) >> CAN_IE_TCE_Pos;
	return (bool)tmp;
}

static inline void hri_can_write_IE_TCE_bit(const void *const hw, bool value)
{
    32ac:	b480      	push	{r7}
    32ae:	b085      	sub	sp, #20
    32b0:	af00      	add	r7, sp, #0
    32b2:	6078      	str	r0, [r7, #4]
    32b4:	460b      	mov	r3, r1
    32b6:	70fb      	strb	r3, [r7, #3]
	uint32_t tmp;
	CAN_CRITICAL_SECTION_ENTER();
	tmp = ((Can *)hw)->IE.reg;
    32b8:	687b      	ldr	r3, [r7, #4]
    32ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    32bc:	60fb      	str	r3, [r7, #12]
	tmp &= ~CAN_IE_TCE;
    32be:	68fb      	ldr	r3, [r7, #12]
    32c0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
    32c4:	60fb      	str	r3, [r7, #12]
	tmp |= value << CAN_IE_TCE_Pos;
    32c6:	78fb      	ldrb	r3, [r7, #3]
    32c8:	025b      	lsls	r3, r3, #9
    32ca:	461a      	mov	r2, r3
    32cc:	68fb      	ldr	r3, [r7, #12]
    32ce:	4313      	orrs	r3, r2
    32d0:	60fb      	str	r3, [r7, #12]
	((Can *)hw)->IE.reg = tmp;
    32d2:	687b      	ldr	r3, [r7, #4]
    32d4:	68fa      	ldr	r2, [r7, #12]
    32d6:	655a      	str	r2, [r3, #84]	; 0x54
	CAN_CRITICAL_SECTION_LEAVE();
}
    32d8:	bf00      	nop
    32da:	3714      	adds	r7, #20
    32dc:	46bd      	mov	sp, r7
    32de:	f85d 7b04 	ldr.w	r7, [sp], #4
    32e2:	4770      	bx	lr

000032e4 <hri_can_get_IE_reg>:
	((Can *)hw)->IE.reg |= mask;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline hri_can_ie_reg_t hri_can_get_IE_reg(const void *const hw, hri_can_ie_reg_t mask)
{
    32e4:	b480      	push	{r7}
    32e6:	b085      	sub	sp, #20
    32e8:	af00      	add	r7, sp, #0
    32ea:	6078      	str	r0, [r7, #4]
    32ec:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	tmp = ((Can *)hw)->IE.reg;
    32ee:	687b      	ldr	r3, [r7, #4]
    32f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    32f2:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    32f4:	68fa      	ldr	r2, [r7, #12]
    32f6:	683b      	ldr	r3, [r7, #0]
    32f8:	4013      	ands	r3, r2
    32fa:	60fb      	str	r3, [r7, #12]
	return tmp;
    32fc:	68fb      	ldr	r3, [r7, #12]
}
    32fe:	4618      	mov	r0, r3
    3300:	3714      	adds	r7, #20
    3302:	46bd      	mov	sp, r7
    3304:	f85d 7b04 	ldr.w	r7, [sp], #4
    3308:	4770      	bx	lr

0000330a <hri_can_write_IE_reg>:

static inline void hri_can_write_IE_reg(const void *const hw, hri_can_ie_reg_t data)
{
    330a:	b480      	push	{r7}
    330c:	b083      	sub	sp, #12
    330e:	af00      	add	r7, sp, #0
    3310:	6078      	str	r0, [r7, #4]
    3312:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->IE.reg = data;
    3314:	687b      	ldr	r3, [r7, #4]
    3316:	683a      	ldr	r2, [r7, #0]
    3318:	655a      	str	r2, [r3, #84]	; 0x54
	CAN_CRITICAL_SECTION_LEAVE();
}
    331a:	bf00      	nop
    331c:	370c      	adds	r7, #12
    331e:	46bd      	mov	sp, r7
    3320:	f85d 7b04 	ldr.w	r7, [sp], #4
    3324:	4770      	bx	lr

00003326 <hri_can_write_ILE_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_ILE_reg(const void *const hw, hri_can_ile_reg_t data)
{
    3326:	b480      	push	{r7}
    3328:	b083      	sub	sp, #12
    332a:	af00      	add	r7, sp, #0
    332c:	6078      	str	r0, [r7, #4]
    332e:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->ILE.reg = data;
    3330:	687b      	ldr	r3, [r7, #4]
    3332:	683a      	ldr	r2, [r7, #0]
    3334:	65da      	str	r2, [r3, #92]	; 0x5c
	CAN_CRITICAL_SECTION_LEAVE();
}
    3336:	bf00      	nop
    3338:	370c      	adds	r7, #12
    333a:	46bd      	mov	sp, r7
    333c:	f85d 7b04 	ldr.w	r7, [sp], #4
    3340:	4770      	bx	lr

00003342 <hri_can_write_GFC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_GFC_reg(const void *const hw, hri_can_gfc_reg_t data)
{
    3342:	b480      	push	{r7}
    3344:	b083      	sub	sp, #12
    3346:	af00      	add	r7, sp, #0
    3348:	6078      	str	r0, [r7, #4]
    334a:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->GFC.reg = data;
    334c:	687b      	ldr	r3, [r7, #4]
    334e:	683a      	ldr	r2, [r7, #0]
    3350:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	CAN_CRITICAL_SECTION_LEAVE();
}
    3354:	bf00      	nop
    3356:	370c      	adds	r7, #12
    3358:	46bd      	mov	sp, r7
    335a:	f85d 7b04 	ldr.w	r7, [sp], #4
    335e:	4770      	bx	lr

00003360 <hri_can_write_SIDFC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_SIDFC_reg(const void *const hw, hri_can_sidfc_reg_t data)
{
    3360:	b480      	push	{r7}
    3362:	b083      	sub	sp, #12
    3364:	af00      	add	r7, sp, #0
    3366:	6078      	str	r0, [r7, #4]
    3368:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->SIDFC.reg = data;
    336a:	687b      	ldr	r3, [r7, #4]
    336c:	683a      	ldr	r2, [r7, #0]
    336e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	CAN_CRITICAL_SECTION_LEAVE();
}
    3372:	bf00      	nop
    3374:	370c      	adds	r7, #12
    3376:	46bd      	mov	sp, r7
    3378:	f85d 7b04 	ldr.w	r7, [sp], #4
    337c:	4770      	bx	lr

0000337e <hri_can_write_XIDFC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_XIDFC_reg(const void *const hw, hri_can_xidfc_reg_t data)
{
    337e:	b480      	push	{r7}
    3380:	b083      	sub	sp, #12
    3382:	af00      	add	r7, sp, #0
    3384:	6078      	str	r0, [r7, #4]
    3386:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->XIDFC.reg = data;
    3388:	687b      	ldr	r3, [r7, #4]
    338a:	683a      	ldr	r2, [r7, #0]
    338c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	CAN_CRITICAL_SECTION_LEAVE();
}
    3390:	bf00      	nop
    3392:	370c      	adds	r7, #12
    3394:	46bd      	mov	sp, r7
    3396:	f85d 7b04 	ldr.w	r7, [sp], #4
    339a:	4770      	bx	lr

0000339c <hri_can_write_XIDAM_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_XIDAM_reg(const void *const hw, hri_can_xidam_reg_t data)
{
    339c:	b480      	push	{r7}
    339e:	b083      	sub	sp, #12
    33a0:	af00      	add	r7, sp, #0
    33a2:	6078      	str	r0, [r7, #4]
    33a4:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->XIDAM.reg = data;
    33a6:	687b      	ldr	r3, [r7, #4]
    33a8:	683a      	ldr	r2, [r7, #0]
    33aa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	CAN_CRITICAL_SECTION_LEAVE();
}
    33ae:	bf00      	nop
    33b0:	370c      	adds	r7, #12
    33b2:	46bd      	mov	sp, r7
    33b4:	f85d 7b04 	ldr.w	r7, [sp], #4
    33b8:	4770      	bx	lr

000033ba <hri_can_write_RXF0C_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_RXF0C_reg(const void *const hw, hri_can_rxf0c_reg_t data)
{
    33ba:	b480      	push	{r7}
    33bc:	b083      	sub	sp, #12
    33be:	af00      	add	r7, sp, #0
    33c0:	6078      	str	r0, [r7, #4]
    33c2:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->RXF0C.reg = data;
    33c4:	687b      	ldr	r3, [r7, #4]
    33c6:	683a      	ldr	r2, [r7, #0]
    33c8:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	CAN_CRITICAL_SECTION_LEAVE();
}
    33cc:	bf00      	nop
    33ce:	370c      	adds	r7, #12
    33d0:	46bd      	mov	sp, r7
    33d2:	f85d 7b04 	ldr.w	r7, [sp], #4
    33d6:	4770      	bx	lr

000033d8 <hri_can_write_RXF0A_F0AI_bf>:
	tmp = (tmp & CAN_RXF0A_F0AI(mask)) >> CAN_RXF0A_F0AI_Pos;
	return tmp;
}

static inline void hri_can_write_RXF0A_F0AI_bf(const void *const hw, hri_can_rxf0a_reg_t data)
{
    33d8:	b480      	push	{r7}
    33da:	b085      	sub	sp, #20
    33dc:	af00      	add	r7, sp, #0
    33de:	6078      	str	r0, [r7, #4]
    33e0:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	CAN_CRITICAL_SECTION_ENTER();
	tmp = ((Can *)hw)->RXF0A.reg;
    33e2:	687b      	ldr	r3, [r7, #4]
    33e4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
    33e8:	60fb      	str	r3, [r7, #12]
	tmp &= ~CAN_RXF0A_F0AI_Msk;
    33ea:	68fb      	ldr	r3, [r7, #12]
    33ec:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
    33f0:	60fb      	str	r3, [r7, #12]
	tmp |= CAN_RXF0A_F0AI(data);
    33f2:	683b      	ldr	r3, [r7, #0]
    33f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    33f8:	68fa      	ldr	r2, [r7, #12]
    33fa:	4313      	orrs	r3, r2
    33fc:	60fb      	str	r3, [r7, #12]
	((Can *)hw)->RXF0A.reg = tmp;
    33fe:	687b      	ldr	r3, [r7, #4]
    3400:	68fa      	ldr	r2, [r7, #12]
    3402:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	CAN_CRITICAL_SECTION_LEAVE();
}
    3406:	bf00      	nop
    3408:	3714      	adds	r7, #20
    340a:	46bd      	mov	sp, r7
    340c:	f85d 7b04 	ldr.w	r7, [sp], #4
    3410:	4770      	bx	lr

00003412 <hri_can_write_RXESC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_RXESC_reg(const void *const hw, hri_can_rxesc_reg_t data)
{
    3412:	b480      	push	{r7}
    3414:	b083      	sub	sp, #12
    3416:	af00      	add	r7, sp, #0
    3418:	6078      	str	r0, [r7, #4]
    341a:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->RXESC.reg = data;
    341c:	687b      	ldr	r3, [r7, #4]
    341e:	683a      	ldr	r2, [r7, #0]
    3420:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
	CAN_CRITICAL_SECTION_LEAVE();
}
    3424:	bf00      	nop
    3426:	370c      	adds	r7, #12
    3428:	46bd      	mov	sp, r7
    342a:	f85d 7b04 	ldr.w	r7, [sp], #4
    342e:	4770      	bx	lr

00003430 <hri_can_write_TXBC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_TXBC_reg(const void *const hw, hri_can_txbc_reg_t data)
{
    3430:	b480      	push	{r7}
    3432:	b083      	sub	sp, #12
    3434:	af00      	add	r7, sp, #0
    3436:	6078      	str	r0, [r7, #4]
    3438:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->TXBC.reg = data;
    343a:	687b      	ldr	r3, [r7, #4]
    343c:	683a      	ldr	r2, [r7, #0]
    343e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	CAN_CRITICAL_SECTION_LEAVE();
}
    3442:	bf00      	nop
    3444:	370c      	adds	r7, #12
    3446:	46bd      	mov	sp, r7
    3448:	f85d 7b04 	ldr.w	r7, [sp], #4
    344c:	4770      	bx	lr

0000344e <hri_can_write_TXESC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_TXESC_reg(const void *const hw, hri_can_txesc_reg_t data)
{
    344e:	b480      	push	{r7}
    3450:	b083      	sub	sp, #12
    3452:	af00      	add	r7, sp, #0
    3454:	6078      	str	r0, [r7, #4]
    3456:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->TXESC.reg = data;
    3458:	687b      	ldr	r3, [r7, #4]
    345a:	683a      	ldr	r2, [r7, #0]
    345c:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	CAN_CRITICAL_SECTION_LEAVE();
}
    3460:	bf00      	nop
    3462:	370c      	adds	r7, #12
    3464:	46bd      	mov	sp, r7
    3466:	f85d 7b04 	ldr.w	r7, [sp], #4
    346a:	4770      	bx	lr

0000346c <hri_can_write_TXBAR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_TXBAR_reg(const void *const hw, hri_can_txbar_reg_t data)
{
    346c:	b480      	push	{r7}
    346e:	b083      	sub	sp, #12
    3470:	af00      	add	r7, sp, #0
    3472:	6078      	str	r0, [r7, #4]
    3474:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->TXBAR.reg = data;
    3476:	687b      	ldr	r3, [r7, #4]
    3478:	683a      	ldr	r2, [r7, #0]
    347a:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
	CAN_CRITICAL_SECTION_LEAVE();
}
    347e:	bf00      	nop
    3480:	370c      	adds	r7, #12
    3482:	46bd      	mov	sp, r7
    3484:	f85d 7b04 	ldr.w	r7, [sp], #4
    3488:	4770      	bx	lr

0000348a <hri_can_write_TXBTIE_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_TXBTIE_reg(const void *const hw, hri_can_txbtie_reg_t data)
{
    348a:	b480      	push	{r7}
    348c:	b083      	sub	sp, #12
    348e:	af00      	add	r7, sp, #0
    3490:	6078      	str	r0, [r7, #4]
    3492:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->TXBTIE.reg = data;
    3494:	687b      	ldr	r3, [r7, #4]
    3496:	683a      	ldr	r2, [r7, #0]
    3498:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
	CAN_CRITICAL_SECTION_LEAVE();
}
    349c:	bf00      	nop
    349e:	370c      	adds	r7, #12
    34a0:	46bd      	mov	sp, r7
    34a2:	f85d 7b04 	ldr.w	r7, [sp], #4
    34a6:	4770      	bx	lr

000034a8 <hri_can_write_TXEFC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_TXEFC_reg(const void *const hw, hri_can_txefc_reg_t data)
{
    34a8:	b480      	push	{r7}
    34aa:	b083      	sub	sp, #12
    34ac:	af00      	add	r7, sp, #0
    34ae:	6078      	str	r0, [r7, #4]
    34b0:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->TXEFC.reg = data;
    34b2:	687b      	ldr	r3, [r7, #4]
    34b4:	683a      	ldr	r2, [r7, #0]
    34b6:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
	CAN_CRITICAL_SECTION_LEAVE();
}
    34ba:	bf00      	nop
    34bc:	370c      	adds	r7, #12
    34be:	46bd      	mov	sp, r7
    34c0:	f85d 7b04 	ldr.w	r7, [sp], #4
    34c4:	4770      	bx	lr
	...

000034c8 <_can_async_init>:

/**
 * \brief Initialize CAN.
 */
int32_t _can_async_init(struct _can_async_device *const dev, void *const hw)
{
    34c8:	b580      	push	{r7, lr}
    34ca:	b082      	sub	sp, #8
    34cc:	af00      	add	r7, sp, #0
    34ce:	6078      	str	r0, [r7, #4]
    34d0:	6039      	str	r1, [r7, #0]
	dev->hw = hw;
    34d2:	687b      	ldr	r3, [r7, #4]
    34d4:	683a      	ldr	r2, [r7, #0]
    34d6:	601a      	str	r2, [r3, #0]
	hri_can_set_CCCR_INIT_bit(dev->hw);
    34d8:	687b      	ldr	r3, [r7, #4]
    34da:	681b      	ldr	r3, [r3, #0]
    34dc:	4618      	mov	r0, r3
    34de:	4b56      	ldr	r3, [pc, #344]	; (3638 <_can_async_init+0x170>)
    34e0:	4798      	blx	r3
	while (hri_can_get_CCCR_INIT_bit(dev->hw) == 0)
    34e2:	bf00      	nop
    34e4:	687b      	ldr	r3, [r7, #4]
    34e6:	681b      	ldr	r3, [r3, #0]
    34e8:	4618      	mov	r0, r3
    34ea:	4b54      	ldr	r3, [pc, #336]	; (363c <_can_async_init+0x174>)
    34ec:	4798      	blx	r3
    34ee:	4603      	mov	r3, r0
    34f0:	f083 0301 	eor.w	r3, r3, #1
    34f4:	b2db      	uxtb	r3, r3
    34f6:	2b00      	cmp	r3, #0
    34f8:	d1f4      	bne.n	34e4 <_can_async_init+0x1c>
		;
	hri_can_set_CCCR_CCE_bit(dev->hw);
    34fa:	687b      	ldr	r3, [r7, #4]
    34fc:	681b      	ldr	r3, [r3, #0]
    34fe:	4618      	mov	r0, r3
    3500:	4b4f      	ldr	r3, [pc, #316]	; (3640 <_can_async_init+0x178>)
    3502:	4798      	blx	r3
		hri_can_write_ILE_reg(dev->hw, CAN_ILE_EINT0);
	}
#endif

#ifdef CONF_CAN1_ENABLED
	if (hw == CAN1) {
    3504:	683b      	ldr	r3, [r7, #0]
    3506:	4a4f      	ldr	r2, [pc, #316]	; (3644 <_can_async_init+0x17c>)
    3508:	4293      	cmp	r3, r2
    350a:	d17c      	bne.n	3606 <_can_async_init+0x13e>
		_can1_dev    = dev;
    350c:	4a4e      	ldr	r2, [pc, #312]	; (3648 <_can_async_init+0x180>)
    350e:	687b      	ldr	r3, [r7, #4]
    3510:	6013      	str	r3, [r2, #0]
		dev->context = (void *)&_can1_context;
    3512:	687b      	ldr	r3, [r7, #4]
    3514:	4a4d      	ldr	r2, [pc, #308]	; (364c <_can_async_init+0x184>)
    3516:	619a      	str	r2, [r3, #24]
		hri_can_set_CCCR_reg(dev->hw, CONF_CAN1_CCCR_REG);
    3518:	687b      	ldr	r3, [r7, #4]
    351a:	681b      	ldr	r3, [r3, #0]
    351c:	f44f 7100 	mov.w	r1, #512	; 0x200
    3520:	4618      	mov	r0, r3
    3522:	4b4b      	ldr	r3, [pc, #300]	; (3650 <_can_async_init+0x188>)
    3524:	4798      	blx	r3
		hri_can_write_MRCFG_reg(dev->hw, CONF_CAN1_MRCFG_REG);
    3526:	687b      	ldr	r3, [r7, #4]
    3528:	681b      	ldr	r3, [r3, #0]
    352a:	2102      	movs	r1, #2
    352c:	4618      	mov	r0, r3
    352e:	4b49      	ldr	r3, [pc, #292]	; (3654 <_can_async_init+0x18c>)
    3530:	4798      	blx	r3
		hri_can_write_NBTP_reg(dev->hw, CONF_CAN1_BTP_REG);
    3532:	687b      	ldr	r3, [r7, #4]
    3534:	681b      	ldr	r3, [r3, #0]
    3536:	f640 2103 	movw	r1, #2563	; 0xa03
    353a:	4618      	mov	r0, r3
    353c:	4b46      	ldr	r3, [pc, #280]	; (3658 <_can_async_init+0x190>)
    353e:	4798      	blx	r3
		hri_can_write_DBTP_reg(dev->hw, CONF_CAN1_DBTP_REG);
    3540:	687b      	ldr	r3, [r7, #4]
    3542:	681b      	ldr	r3, [r3, #0]
    3544:	f44f 6123 	mov.w	r1, #2608	; 0xa30
    3548:	4618      	mov	r0, r3
    354a:	4b44      	ldr	r3, [pc, #272]	; (365c <_can_async_init+0x194>)
    354c:	4798      	blx	r3
		hri_can_write_RXF0C_reg(dev->hw, CONF_CAN1_RXF0C_REG | CAN_RXF0C_F0SA((uint32_t)can1_rx_fifo));
    354e:	687b      	ldr	r3, [r7, #4]
    3550:	681a      	ldr	r2, [r3, #0]
    3552:	4b43      	ldr	r3, [pc, #268]	; (3660 <_can_async_init+0x198>)
    3554:	b29b      	uxth	r3, r3
    3556:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    355a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    355e:	4619      	mov	r1, r3
    3560:	4610      	mov	r0, r2
    3562:	4b40      	ldr	r3, [pc, #256]	; (3664 <_can_async_init+0x19c>)
    3564:	4798      	blx	r3
		hri_can_write_RXESC_reg(dev->hw, CONF_CAN1_RXESC_REG);
    3566:	687b      	ldr	r3, [r7, #4]
    3568:	681b      	ldr	r3, [r3, #0]
    356a:	2107      	movs	r1, #7
    356c:	4618      	mov	r0, r3
    356e:	4b3e      	ldr	r3, [pc, #248]	; (3668 <_can_async_init+0x1a0>)
    3570:	4798      	blx	r3
		hri_can_write_TXESC_reg(dev->hw, CONF_CAN1_TXESC_REG);
    3572:	687b      	ldr	r3, [r7, #4]
    3574:	681b      	ldr	r3, [r3, #0]
    3576:	2107      	movs	r1, #7
    3578:	4618      	mov	r0, r3
    357a:	4b3c      	ldr	r3, [pc, #240]	; (366c <_can_async_init+0x1a4>)
    357c:	4798      	blx	r3
		hri_can_write_TXBC_reg(dev->hw, CONF_CAN1_TXBC_REG | CAN_TXBC_TBSA((uint32_t)can1_tx_fifo));
    357e:	687b      	ldr	r3, [r7, #4]
    3580:	681a      	ldr	r2, [r3, #0]
    3582:	4b3b      	ldr	r3, [pc, #236]	; (3670 <_can_async_init+0x1a8>)
    3584:	b29b      	uxth	r3, r3
    3586:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    358a:	4619      	mov	r1, r3
    358c:	4610      	mov	r0, r2
    358e:	4b39      	ldr	r3, [pc, #228]	; (3674 <_can_async_init+0x1ac>)
    3590:	4798      	blx	r3
		hri_can_write_TXEFC_reg(dev->hw, CONF_CAN1_TXEFC_REG | CAN_TXEFC_EFSA((uint32_t)can1_tx_event_fifo));
    3592:	687b      	ldr	r3, [r7, #4]
    3594:	681a      	ldr	r2, [r3, #0]
    3596:	4b38      	ldr	r3, [pc, #224]	; (3678 <_can_async_init+0x1b0>)
    3598:	b29b      	uxth	r3, r3
    359a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    359e:	4619      	mov	r1, r3
    35a0:	4610      	mov	r0, r2
    35a2:	4b36      	ldr	r3, [pc, #216]	; (367c <_can_async_init+0x1b4>)
    35a4:	4798      	blx	r3
		hri_can_write_GFC_reg(dev->hw, CONF_CAN1_GFC_REG);
    35a6:	687b      	ldr	r3, [r7, #4]
    35a8:	681b      	ldr	r3, [r3, #0]
    35aa:	2108      	movs	r1, #8
    35ac:	4618      	mov	r0, r3
    35ae:	4b34      	ldr	r3, [pc, #208]	; (3680 <_can_async_init+0x1b8>)
    35b0:	4798      	blx	r3
		hri_can_write_SIDFC_reg(dev->hw, CONF_CAN1_SIDFC_REG | CAN_SIDFC_FLSSA((uint32_t)can1_rx_std_filter));
    35b2:	687b      	ldr	r3, [r7, #4]
    35b4:	681a      	ldr	r2, [r3, #0]
    35b6:	4b33      	ldr	r3, [pc, #204]	; (3684 <_can_async_init+0x1bc>)
    35b8:	b29b      	uxth	r3, r3
    35ba:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
    35be:	4619      	mov	r1, r3
    35c0:	4610      	mov	r0, r2
    35c2:	4b31      	ldr	r3, [pc, #196]	; (3688 <_can_async_init+0x1c0>)
    35c4:	4798      	blx	r3
		hri_can_write_XIDFC_reg(dev->hw, CONF_CAN1_XIDFC_REG | CAN_XIDFC_FLESA((uint32_t)can1_rx_ext_filter));
    35c6:	687b      	ldr	r3, [r7, #4]
    35c8:	681a      	ldr	r2, [r3, #0]
    35ca:	4b30      	ldr	r3, [pc, #192]	; (368c <_can_async_init+0x1c4>)
    35cc:	b29b      	uxth	r3, r3
    35ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    35d2:	4619      	mov	r1, r3
    35d4:	4610      	mov	r0, r2
    35d6:	4b2e      	ldr	r3, [pc, #184]	; (3690 <_can_async_init+0x1c8>)
    35d8:	4798      	blx	r3
		hri_can_write_XIDAM_reg(dev->hw, CONF_CAN1_XIDAM_REG);
    35da:	687b      	ldr	r3, [r7, #4]
    35dc:	681b      	ldr	r3, [r3, #0]
    35de:	f06f 4160 	mvn.w	r1, #3758096384	; 0xe0000000
    35e2:	4618      	mov	r0, r3
    35e4:	4b2b      	ldr	r3, [pc, #172]	; (3694 <_can_async_init+0x1cc>)
    35e6:	4798      	blx	r3

		NVIC_DisableIRQ(CAN1_IRQn);
    35e8:	204f      	movs	r0, #79	; 0x4f
    35ea:	4b2b      	ldr	r3, [pc, #172]	; (3698 <_can_async_init+0x1d0>)
    35ec:	4798      	blx	r3
		NVIC_ClearPendingIRQ(CAN1_IRQn);
    35ee:	204f      	movs	r0, #79	; 0x4f
    35f0:	4b2a      	ldr	r3, [pc, #168]	; (369c <_can_async_init+0x1d4>)
    35f2:	4798      	blx	r3
		NVIC_EnableIRQ(CAN1_IRQn);
    35f4:	204f      	movs	r0, #79	; 0x4f
    35f6:	4b2a      	ldr	r3, [pc, #168]	; (36a0 <_can_async_init+0x1d8>)
    35f8:	4798      	blx	r3
		hri_can_write_ILE_reg(dev->hw, CAN_ILE_EINT0);
    35fa:	687b      	ldr	r3, [r7, #4]
    35fc:	681b      	ldr	r3, [r3, #0]
    35fe:	2101      	movs	r1, #1
    3600:	4618      	mov	r0, r3
    3602:	4b28      	ldr	r3, [pc, #160]	; (36a4 <_can_async_init+0x1dc>)
    3604:	4798      	blx	r3
	}
#endif

	/* Disable CCE to prevent Configuration Change */
	hri_can_clear_CCCR_CCE_bit(dev->hw);
    3606:	687b      	ldr	r3, [r7, #4]
    3608:	681b      	ldr	r3, [r3, #0]
    360a:	4618      	mov	r0, r3
    360c:	4b26      	ldr	r3, [pc, #152]	; (36a8 <_can_async_init+0x1e0>)
    360e:	4798      	blx	r3
	hri_can_clear_CCCR_INIT_bit(dev->hw);
    3610:	687b      	ldr	r3, [r7, #4]
    3612:	681b      	ldr	r3, [r3, #0]
    3614:	4618      	mov	r0, r3
    3616:	4b25      	ldr	r3, [pc, #148]	; (36ac <_can_async_init+0x1e4>)
    3618:	4798      	blx	r3
	while (hri_can_get_CCCR_INIT_bit(dev->hw)) {
    361a:	bf00      	nop
    361c:	687b      	ldr	r3, [r7, #4]
    361e:	681b      	ldr	r3, [r3, #0]
    3620:	4618      	mov	r0, r3
    3622:	4b06      	ldr	r3, [pc, #24]	; (363c <_can_async_init+0x174>)
    3624:	4798      	blx	r3
    3626:	4603      	mov	r3, r0
    3628:	2b00      	cmp	r3, #0
    362a:	d1f7      	bne.n	361c <_can_async_init+0x154>
	};

	return ERR_NONE;
    362c:	2300      	movs	r3, #0
}
    362e:	4618      	mov	r0, r3
    3630:	3708      	adds	r7, #8
    3632:	46bd      	mov	sp, r7
    3634:	bd80      	pop	{r7, pc}
    3636:	bf00      	nop
    3638:	000030f9 	.word	0x000030f9
    363c:	00003119 	.word	0x00003119
    3640:	00003167 	.word	0x00003167
    3644:	42000400 	.word	0x42000400
    3648:	20000d2c 	.word	0x20000d2c
    364c:	20000004 	.word	0x20000004
    3650:	00003207 	.word	0x00003207
    3654:	000030c1 	.word	0x000030c1
    3658:	00003229 	.word	0x00003229
    365c:	000030dd 	.word	0x000030dd
    3660:	20001d58 	.word	0x20001d58
    3664:	000033bb 	.word	0x000033bb
    3668:	00003413 	.word	0x00003413
    366c:	0000344f 	.word	0x0000344f
    3670:	20001d10 	.word	0x20001d10
    3674:	00003431 	.word	0x00003431
    3678:	20000c8c 	.word	0x20000c8c
    367c:	000034a9 	.word	0x000034a9
    3680:	00003343 	.word	0x00003343
    3684:	20000c9c 	.word	0x20000c9c
    3688:	00003361 	.word	0x00003361
    368c:	20000d1c 	.word	0x20000d1c
    3690:	0000337f 	.word	0x0000337f
    3694:	0000339d 	.word	0x0000339d
    3698:	00002f91 	.word	0x00002f91
    369c:	00002fd5 	.word	0x00002fd5
    36a0:	00002f55 	.word	0x00002f55
    36a4:	00003327 	.word	0x00003327
    36a8:	00003187 	.word	0x00003187
    36ac:	00003147 	.word	0x00003147

000036b0 <_can_async_enable>:

/**
 * \brief Enable CAN
 */
int32_t _can_async_enable(struct _can_async_device *const dev)
{
    36b0:	b580      	push	{r7, lr}
    36b2:	b082      	sub	sp, #8
    36b4:	af00      	add	r7, sp, #0
    36b6:	6078      	str	r0, [r7, #4]
	hri_can_clear_CCCR_INIT_bit(dev->hw);
    36b8:	687b      	ldr	r3, [r7, #4]
    36ba:	681b      	ldr	r3, [r3, #0]
    36bc:	4618      	mov	r0, r3
    36be:	4b03      	ldr	r3, [pc, #12]	; (36cc <_can_async_enable+0x1c>)
    36c0:	4798      	blx	r3
	return ERR_NONE;
    36c2:	2300      	movs	r3, #0
}
    36c4:	4618      	mov	r0, r3
    36c6:	3708      	adds	r7, #8
    36c8:	46bd      	mov	sp, r7
    36ca:	bd80      	pop	{r7, pc}
    36cc:	00003147 	.word	0x00003147

000036d0 <_can_async_read>:

/**
 * \brief Read a CAN message
 */
int32_t _can_async_read(struct _can_async_device *const dev, struct can_message *msg)
{
    36d0:	b590      	push	{r4, r7, lr}
    36d2:	b089      	sub	sp, #36	; 0x24
    36d4:	af00      	add	r7, sp, #0
    36d6:	6078      	str	r0, [r7, #4]
    36d8:	6039      	str	r1, [r7, #0]
	struct _can_rx_fifo_entry *f = NULL;
    36da:	2300      	movs	r3, #0
    36dc:	61fb      	str	r3, [r7, #28]
	hri_can_rxf0s_reg_t        get_index;

	if (!hri_can_read_RXF0S_F0FL_bf(dev->hw)) {
    36de:	687b      	ldr	r3, [r7, #4]
    36e0:	681b      	ldr	r3, [r3, #0]
    36e2:	4618      	mov	r0, r3
    36e4:	4b37      	ldr	r3, [pc, #220]	; (37c4 <_can_async_read+0xf4>)
    36e6:	4798      	blx	r3
    36e8:	4603      	mov	r3, r0
    36ea:	2b00      	cmp	r3, #0
    36ec:	d102      	bne.n	36f4 <_can_async_read+0x24>
		return ERR_NOT_FOUND;
    36ee:	f06f 0309 	mvn.w	r3, #9
    36f2:	e063      	b.n	37bc <_can_async_read+0xec>
	}

	get_index = hri_can_read_RXF0S_F0GI_bf(dev->hw);
    36f4:	687b      	ldr	r3, [r7, #4]
    36f6:	681b      	ldr	r3, [r3, #0]
    36f8:	4618      	mov	r0, r3
    36fa:	4b33      	ldr	r3, [pc, #204]	; (37c8 <_can_async_read+0xf8>)
    36fc:	4798      	blx	r3
    36fe:	61b8      	str	r0, [r7, #24]
	if (dev->hw == CAN0) {
		f = (struct _can_rx_fifo_entry *)(can0_rx_fifo + get_index * CONF_CAN0_F0DS);
	}
#endif
#ifdef CONF_CAN1_ENABLED
	if (dev->hw == CAN1) {
    3700:	687b      	ldr	r3, [r7, #4]
    3702:	681b      	ldr	r3, [r3, #0]
    3704:	4a31      	ldr	r2, [pc, #196]	; (37cc <_can_async_read+0xfc>)
    3706:	4293      	cmp	r3, r2
    3708:	d108      	bne.n	371c <_can_async_read+0x4c>
		f = (struct _can_rx_fifo_entry *)(can1_rx_fifo + get_index * CONF_CAN1_F0DS);
    370a:	69ba      	ldr	r2, [r7, #24]
    370c:	4613      	mov	r3, r2
    370e:	00db      	lsls	r3, r3, #3
    3710:	4413      	add	r3, r2
    3712:	00db      	lsls	r3, r3, #3
    3714:	461a      	mov	r2, r3
    3716:	4b2e      	ldr	r3, [pc, #184]	; (37d0 <_can_async_read+0x100>)
    3718:	4413      	add	r3, r2
    371a:	61fb      	str	r3, [r7, #28]
	}
#endif

	if (f == NULL) {
    371c:	69fb      	ldr	r3, [r7, #28]
    371e:	2b00      	cmp	r3, #0
    3720:	d102      	bne.n	3728 <_can_async_read+0x58>
		return ERR_NO_RESOURCE;
    3722:	f06f 031b 	mvn.w	r3, #27
    3726:	e049      	b.n	37bc <_can_async_read+0xec>
	}

	if (f->R0.bit.XTD == 1) {
    3728:	69fb      	ldr	r3, [r7, #28]
    372a:	681b      	ldr	r3, [r3, #0]
    372c:	f3c3 7380 	ubfx	r3, r3, #30, #1
    3730:	b2db      	uxtb	r3, r3
    3732:	2b01      	cmp	r3, #1
    3734:	d10a      	bne.n	374c <_can_async_read+0x7c>
		msg->fmt = CAN_FMT_EXTID;
    3736:	683b      	ldr	r3, [r7, #0]
    3738:	2201      	movs	r2, #1
    373a:	735a      	strb	r2, [r3, #13]
		msg->id  = f->R0.bit.ID;
    373c:	69fb      	ldr	r3, [r7, #28]
    373e:	681b      	ldr	r3, [r3, #0]
    3740:	f3c3 031c 	ubfx	r3, r3, #0, #29
    3744:	461a      	mov	r2, r3
    3746:	683b      	ldr	r3, [r7, #0]
    3748:	601a      	str	r2, [r3, #0]
    374a:	e00a      	b.n	3762 <_can_async_read+0x92>
	} else {
		msg->fmt = CAN_FMT_STDID;
    374c:	683b      	ldr	r3, [r7, #0]
    374e:	2200      	movs	r2, #0
    3750:	735a      	strb	r2, [r3, #13]
		/* A standard identifier is stored into ID[28:18] */
		msg->id = f->R0.bit.ID >> 18;
    3752:	69fb      	ldr	r3, [r7, #28]
    3754:	681b      	ldr	r3, [r3, #0]
    3756:	f3c3 031c 	ubfx	r3, r3, #0, #29
    375a:	149b      	asrs	r3, r3, #18
    375c:	461a      	mov	r2, r3
    375e:	683b      	ldr	r3, [r7, #0]
    3760:	601a      	str	r2, [r3, #0]
	}

	if (f->R0.bit.RTR == 1) {
    3762:	69fb      	ldr	r3, [r7, #28]
    3764:	681b      	ldr	r3, [r3, #0]
    3766:	f3c3 7340 	ubfx	r3, r3, #29, #1
    376a:	b2db      	uxtb	r3, r3
    376c:	2b01      	cmp	r3, #1
    376e:	d102      	bne.n	3776 <_can_async_read+0xa6>
		msg->type = CAN_TYPE_REMOTE;
    3770:	683b      	ldr	r3, [r7, #0]
    3772:	2201      	movs	r2, #1
    3774:	711a      	strb	r2, [r3, #4]
	}

	const uint8_t dlc2len[] = {0, 1, 2, 3, 4, 5, 6, 7, 8, 12, 16, 20, 24, 32, 48, 64};
    3776:	4b17      	ldr	r3, [pc, #92]	; (37d4 <_can_async_read+0x104>)
    3778:	f107 0408 	add.w	r4, r7, #8
    377c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    377e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	msg->len                = dlc2len[f->R1.bit.DLC];
    3782:	69fb      	ldr	r3, [r7, #28]
    3784:	685b      	ldr	r3, [r3, #4]
    3786:	f3c3 4303 	ubfx	r3, r3, #16, #4
    378a:	b2db      	uxtb	r3, r3
    378c:	f107 0220 	add.w	r2, r7, #32
    3790:	4413      	add	r3, r2
    3792:	f813 2c18 	ldrb.w	r2, [r3, #-24]
    3796:	683b      	ldr	r3, [r7, #0]
    3798:	731a      	strb	r2, [r3, #12]

	memcpy(msg->data, f->data, msg->len);
    379a:	683b      	ldr	r3, [r7, #0]
    379c:	6898      	ldr	r0, [r3, #8]
    379e:	69fb      	ldr	r3, [r7, #28]
    37a0:	f103 0108 	add.w	r1, r3, #8
    37a4:	683b      	ldr	r3, [r7, #0]
    37a6:	7b1b      	ldrb	r3, [r3, #12]
    37a8:	461a      	mov	r2, r3
    37aa:	4b0b      	ldr	r3, [pc, #44]	; (37d8 <_can_async_read+0x108>)
    37ac:	4798      	blx	r3

	hri_can_write_RXF0A_F0AI_bf(dev->hw, get_index);
    37ae:	687b      	ldr	r3, [r7, #4]
    37b0:	681b      	ldr	r3, [r3, #0]
    37b2:	69b9      	ldr	r1, [r7, #24]
    37b4:	4618      	mov	r0, r3
    37b6:	4b09      	ldr	r3, [pc, #36]	; (37dc <_can_async_read+0x10c>)
    37b8:	4798      	blx	r3

	return ERR_NONE;
    37ba:	2300      	movs	r3, #0
}
    37bc:	4618      	mov	r0, r3
    37be:	3724      	adds	r7, #36	; 0x24
    37c0:	46bd      	mov	sp, r7
    37c2:	bd90      	pop	{r4, r7, pc}
    37c4:	00003039 	.word	0x00003039
    37c8:	00003057 	.word	0x00003057
    37cc:	42000400 	.word	0x42000400
    37d0:	20001d58 	.word	0x20001d58
    37d4:	0001333c 	.word	0x0001333c
    37d8:	00012f1d 	.word	0x00012f1d
    37dc:	000033d9 	.word	0x000033d9

000037e0 <_can_async_write>:

/**
 * \brief Write a CAN message
 */
int32_t _can_async_write(struct _can_async_device *const dev, struct can_message *msg)
{
    37e0:	b590      	push	{r4, r7, lr}
    37e2:	b085      	sub	sp, #20
    37e4:	af00      	add	r7, sp, #0
    37e6:	6078      	str	r0, [r7, #4]
    37e8:	6039      	str	r1, [r7, #0]
	struct _can_tx_fifo_entry *f = NULL;
    37ea:	2300      	movs	r3, #0
    37ec:	60fb      	str	r3, [r7, #12]
	hri_can_txfqs_reg_t        put_index;

	if (hri_can_get_TXFQS_TFQF_bit(dev->hw)) {
    37ee:	687b      	ldr	r3, [r7, #4]
    37f0:	681b      	ldr	r3, [r3, #0]
    37f2:	4618      	mov	r0, r3
    37f4:	4b61      	ldr	r3, [pc, #388]	; (397c <_can_async_write+0x19c>)
    37f6:	4798      	blx	r3
    37f8:	4603      	mov	r3, r0
    37fa:	2b00      	cmp	r3, #0
    37fc:	d002      	beq.n	3804 <_can_async_write+0x24>
		return ERR_NO_RESOURCE;
    37fe:	f06f 031b 	mvn.w	r3, #27
    3802:	e0b7      	b.n	3974 <_can_async_write+0x194>
	}

	put_index = hri_can_read_TXFQS_TFQPI_bf(dev->hw);
    3804:	687b      	ldr	r3, [r7, #4]
    3806:	681b      	ldr	r3, [r3, #0]
    3808:	4618      	mov	r0, r3
    380a:	4b5d      	ldr	r3, [pc, #372]	; (3980 <_can_async_write+0x1a0>)
    380c:	4798      	blx	r3
    380e:	60b8      	str	r0, [r7, #8]
	if (dev->hw == CAN0) {
		f = (struct _can_tx_fifo_entry *)(can0_tx_fifo + put_index * CONF_CAN0_TBDS);
	}
#endif
#ifdef CONF_CAN1_ENABLED
	if (dev->hw == CAN1) {
    3810:	687b      	ldr	r3, [r7, #4]
    3812:	681b      	ldr	r3, [r3, #0]
    3814:	4a5b      	ldr	r2, [pc, #364]	; (3984 <_can_async_write+0x1a4>)
    3816:	4293      	cmp	r3, r2
    3818:	d108      	bne.n	382c <_can_async_write+0x4c>
		f = (struct _can_tx_fifo_entry *)(can1_tx_fifo + put_index * CONF_CAN1_TBDS);
    381a:	68ba      	ldr	r2, [r7, #8]
    381c:	4613      	mov	r3, r2
    381e:	00db      	lsls	r3, r3, #3
    3820:	4413      	add	r3, r2
    3822:	00db      	lsls	r3, r3, #3
    3824:	461a      	mov	r2, r3
    3826:	4b58      	ldr	r3, [pc, #352]	; (3988 <_can_async_write+0x1a8>)
    3828:	4413      	add	r3, r2
    382a:	60fb      	str	r3, [r7, #12]
	}
#endif
	if (f == NULL) {
    382c:	68fb      	ldr	r3, [r7, #12]
    382e:	2b00      	cmp	r3, #0
    3830:	d102      	bne.n	3838 <_can_async_write+0x58>
		return ERR_NO_RESOURCE;
    3832:	f06f 031b 	mvn.w	r3, #27
    3836:	e09d      	b.n	3974 <_can_async_write+0x194>
	}

	if (msg->fmt == CAN_FMT_EXTID) {
    3838:	683b      	ldr	r3, [r7, #0]
    383a:	7b5b      	ldrb	r3, [r3, #13]
    383c:	2b01      	cmp	r3, #1
    383e:	d109      	bne.n	3854 <_can_async_write+0x74>
		f->T0.val     = msg->id;
    3840:	683b      	ldr	r3, [r7, #0]
    3842:	681a      	ldr	r2, [r3, #0]
    3844:	68fb      	ldr	r3, [r7, #12]
    3846:	601a      	str	r2, [r3, #0]
		f->T0.bit.XTD = 1;
    3848:	68fa      	ldr	r2, [r7, #12]
    384a:	6813      	ldr	r3, [r2, #0]
    384c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
    3850:	6013      	str	r3, [r2, #0]
    3852:	e004      	b.n	385e <_can_async_write+0x7e>
	} else {
		/* A standard identifier is stored into ID[28:18] */
		f->T0.val = msg->id << 18;
    3854:	683b      	ldr	r3, [r7, #0]
    3856:	681b      	ldr	r3, [r3, #0]
    3858:	049a      	lsls	r2, r3, #18
    385a:	68fb      	ldr	r3, [r7, #12]
    385c:	601a      	str	r2, [r3, #0]
	}

	if (msg->len <= 8) {
    385e:	683b      	ldr	r3, [r7, #0]
    3860:	7b1b      	ldrb	r3, [r3, #12]
    3862:	2b08      	cmp	r3, #8
    3864:	d80a      	bhi.n	387c <_can_async_write+0x9c>
		f->T1.bit.DLC = msg->len;
    3866:	683b      	ldr	r3, [r7, #0]
    3868:	7b1b      	ldrb	r3, [r3, #12]
    386a:	f003 030f 	and.w	r3, r3, #15
    386e:	b2d9      	uxtb	r1, r3
    3870:	68fa      	ldr	r2, [r7, #12]
    3872:	6853      	ldr	r3, [r2, #4]
    3874:	f361 4313 	bfi	r3, r1, #16, #4
    3878:	6053      	str	r3, [r2, #4]
    387a:	e04a      	b.n	3912 <_can_async_write+0x132>
	} else if (msg->len <= 12) {
    387c:	683b      	ldr	r3, [r7, #0]
    387e:	7b1b      	ldrb	r3, [r3, #12]
    3880:	2b0c      	cmp	r3, #12
    3882:	d806      	bhi.n	3892 <_can_async_write+0xb2>
		f->T1.bit.DLC = 0x9;
    3884:	68fa      	ldr	r2, [r7, #12]
    3886:	6853      	ldr	r3, [r2, #4]
    3888:	2109      	movs	r1, #9
    388a:	f361 4313 	bfi	r3, r1, #16, #4
    388e:	6053      	str	r3, [r2, #4]
    3890:	e03f      	b.n	3912 <_can_async_write+0x132>
	} else if (msg->len <= 16) {
    3892:	683b      	ldr	r3, [r7, #0]
    3894:	7b1b      	ldrb	r3, [r3, #12]
    3896:	2b10      	cmp	r3, #16
    3898:	d806      	bhi.n	38a8 <_can_async_write+0xc8>
		f->T1.bit.DLC = 0xA;
    389a:	68fa      	ldr	r2, [r7, #12]
    389c:	6853      	ldr	r3, [r2, #4]
    389e:	210a      	movs	r1, #10
    38a0:	f361 4313 	bfi	r3, r1, #16, #4
    38a4:	6053      	str	r3, [r2, #4]
    38a6:	e034      	b.n	3912 <_can_async_write+0x132>
	} else if (msg->len <= 20) {
    38a8:	683b      	ldr	r3, [r7, #0]
    38aa:	7b1b      	ldrb	r3, [r3, #12]
    38ac:	2b14      	cmp	r3, #20
    38ae:	d806      	bhi.n	38be <_can_async_write+0xde>
		f->T1.bit.DLC = 0xB;
    38b0:	68fa      	ldr	r2, [r7, #12]
    38b2:	6853      	ldr	r3, [r2, #4]
    38b4:	210b      	movs	r1, #11
    38b6:	f361 4313 	bfi	r3, r1, #16, #4
    38ba:	6053      	str	r3, [r2, #4]
    38bc:	e029      	b.n	3912 <_can_async_write+0x132>
	} else if (msg->len <= 24) {
    38be:	683b      	ldr	r3, [r7, #0]
    38c0:	7b1b      	ldrb	r3, [r3, #12]
    38c2:	2b18      	cmp	r3, #24
    38c4:	d806      	bhi.n	38d4 <_can_async_write+0xf4>
		f->T1.bit.DLC = 0xC;
    38c6:	68fa      	ldr	r2, [r7, #12]
    38c8:	6853      	ldr	r3, [r2, #4]
    38ca:	210c      	movs	r1, #12
    38cc:	f361 4313 	bfi	r3, r1, #16, #4
    38d0:	6053      	str	r3, [r2, #4]
    38d2:	e01e      	b.n	3912 <_can_async_write+0x132>
	} else if (msg->len <= 32) {
    38d4:	683b      	ldr	r3, [r7, #0]
    38d6:	7b1b      	ldrb	r3, [r3, #12]
    38d8:	2b20      	cmp	r3, #32
    38da:	d806      	bhi.n	38ea <_can_async_write+0x10a>
		f->T1.bit.DLC = 0xD;
    38dc:	68fa      	ldr	r2, [r7, #12]
    38de:	6853      	ldr	r3, [r2, #4]
    38e0:	210d      	movs	r1, #13
    38e2:	f361 4313 	bfi	r3, r1, #16, #4
    38e6:	6053      	str	r3, [r2, #4]
    38e8:	e013      	b.n	3912 <_can_async_write+0x132>
	} else if (msg->len <= 48) {
    38ea:	683b      	ldr	r3, [r7, #0]
    38ec:	7b1b      	ldrb	r3, [r3, #12]
    38ee:	2b30      	cmp	r3, #48	; 0x30
    38f0:	d806      	bhi.n	3900 <_can_async_write+0x120>
		f->T1.bit.DLC = 0xE;
    38f2:	68fa      	ldr	r2, [r7, #12]
    38f4:	6853      	ldr	r3, [r2, #4]
    38f6:	210e      	movs	r1, #14
    38f8:	f361 4313 	bfi	r3, r1, #16, #4
    38fc:	6053      	str	r3, [r2, #4]
    38fe:	e008      	b.n	3912 <_can_async_write+0x132>
	} else if (msg->len <= 64) {
    3900:	683b      	ldr	r3, [r7, #0]
    3902:	7b1b      	ldrb	r3, [r3, #12]
    3904:	2b40      	cmp	r3, #64	; 0x40
    3906:	d804      	bhi.n	3912 <_can_async_write+0x132>
		f->T1.bit.DLC = 0xF;
    3908:	68fa      	ldr	r2, [r7, #12]
    390a:	6853      	ldr	r3, [r2, #4]
    390c:	f443 2370 	orr.w	r3, r3, #983040	; 0xf0000
    3910:	6053      	str	r3, [r2, #4]
	}

	f->T1.bit.FDF = hri_can_get_CCCR_FDOE_bit(dev->hw);
    3912:	687b      	ldr	r3, [r7, #4]
    3914:	681b      	ldr	r3, [r3, #0]
    3916:	4618      	mov	r0, r3
    3918:	4b1c      	ldr	r3, [pc, #112]	; (398c <_can_async_write+0x1ac>)
    391a:	4798      	blx	r3
    391c:	4603      	mov	r3, r0
    391e:	4619      	mov	r1, r3
    3920:	68fa      	ldr	r2, [r7, #12]
    3922:	6853      	ldr	r3, [r2, #4]
    3924:	f361 5355 	bfi	r3, r1, #21, #1
    3928:	6053      	str	r3, [r2, #4]
	f->T1.bit.BRS = hri_can_get_CCCR_BRSE_bit(dev->hw);
    392a:	687b      	ldr	r3, [r7, #4]
    392c:	681b      	ldr	r3, [r3, #0]
    392e:	4618      	mov	r0, r3
    3930:	4b17      	ldr	r3, [pc, #92]	; (3990 <_can_async_write+0x1b0>)
    3932:	4798      	blx	r3
    3934:	4603      	mov	r3, r0
    3936:	4619      	mov	r1, r3
    3938:	68fa      	ldr	r2, [r7, #12]
    393a:	6853      	ldr	r3, [r2, #4]
    393c:	f361 5314 	bfi	r3, r1, #20, #1
    3940:	6053      	str	r3, [r2, #4]

	memcpy(f->data, msg->data, msg->len);
    3942:	68fb      	ldr	r3, [r7, #12]
    3944:	f103 0008 	add.w	r0, r3, #8
    3948:	683b      	ldr	r3, [r7, #0]
    394a:	6899      	ldr	r1, [r3, #8]
    394c:	683b      	ldr	r3, [r7, #0]
    394e:	7b1b      	ldrb	r3, [r3, #12]
    3950:	461a      	mov	r2, r3
    3952:	4b10      	ldr	r3, [pc, #64]	; (3994 <_can_async_write+0x1b4>)
    3954:	4798      	blx	r3

	hri_can_write_TXBAR_reg(dev->hw, 1 << hri_can_read_TXFQS_TFQPI_bf(dev->hw));
    3956:	687b      	ldr	r3, [r7, #4]
    3958:	681c      	ldr	r4, [r3, #0]
    395a:	687b      	ldr	r3, [r7, #4]
    395c:	681b      	ldr	r3, [r3, #0]
    395e:	4618      	mov	r0, r3
    3960:	4b07      	ldr	r3, [pc, #28]	; (3980 <_can_async_write+0x1a0>)
    3962:	4798      	blx	r3
    3964:	4602      	mov	r2, r0
    3966:	2301      	movs	r3, #1
    3968:	4093      	lsls	r3, r2
    396a:	4619      	mov	r1, r3
    396c:	4620      	mov	r0, r4
    396e:	4b0a      	ldr	r3, [pc, #40]	; (3998 <_can_async_write+0x1b8>)
    3970:	4798      	blx	r3
	return ERR_NONE;
    3972:	2300      	movs	r3, #0
}
    3974:	4618      	mov	r0, r3
    3976:	3714      	adds	r7, #20
    3978:	46bd      	mov	sp, r7
    397a:	bd90      	pop	{r4, r7, pc}
    397c:	00003077 	.word	0x00003077
    3980:	000030a1 	.word	0x000030a1
    3984:	42000400 	.word	0x42000400
    3988:	20001d10 	.word	0x20001d10
    398c:	000031a7 	.word	0x000031a7
    3990:	000031d7 	.word	0x000031d7
    3994:	00012f1d 	.word	0x00012f1d
    3998:	0000346d 	.word	0x0000346d

0000399c <_can_async_set_irq_state>:

/**
 * \brief Set CAN Interrupt State
 */
void _can_async_set_irq_state(struct _can_async_device *const dev, enum can_async_callback_type type, bool state)
{
    399c:	b580      	push	{r7, lr}
    399e:	b084      	sub	sp, #16
    39a0:	af00      	add	r7, sp, #0
    39a2:	6078      	str	r0, [r7, #4]
    39a4:	460b      	mov	r3, r1
    39a6:	70fb      	strb	r3, [r7, #3]
    39a8:	4613      	mov	r3, r2
    39aa:	70bb      	strb	r3, [r7, #2]
	uint32_t ie;

	if (type == CAN_ASYNC_RX_CB) {
    39ac:	78fb      	ldrb	r3, [r7, #3]
    39ae:	2b00      	cmp	r3, #0
    39b0:	d107      	bne.n	39c2 <_can_async_set_irq_state+0x26>
		hri_can_write_IE_RF0NE_bit(dev->hw, state);
    39b2:	687b      	ldr	r3, [r7, #4]
    39b4:	681b      	ldr	r3, [r3, #0]
    39b6:	78ba      	ldrb	r2, [r7, #2]
    39b8:	4611      	mov	r1, r2
    39ba:	4618      	mov	r0, r3
    39bc:	4b16      	ldr	r3, [pc, #88]	; (3a18 <_can_async_set_irq_state+0x7c>)
    39be:	4798      	blx	r3
	} else if (type == CAN_ASYNC_IRQ_CB) {
		ie = hri_can_get_IE_reg(dev->hw, CAN_IE_RF0NE | CAN_IE_TCE);
		hri_can_write_IE_reg(dev->hw, ie | CONF_CAN0_IE_REG);
	}

	return;
    39c0:	e026      	b.n	3a10 <_can_async_set_irq_state+0x74>
	} else if (type == CAN_ASYNC_TX_CB) {
    39c2:	78fb      	ldrb	r3, [r7, #3]
    39c4:	2b01      	cmp	r3, #1
    39c6:	d10e      	bne.n	39e6 <_can_async_set_irq_state+0x4a>
		hri_can_write_IE_TCE_bit(dev->hw, state);
    39c8:	687b      	ldr	r3, [r7, #4]
    39ca:	681b      	ldr	r3, [r3, #0]
    39cc:	78ba      	ldrb	r2, [r7, #2]
    39ce:	4611      	mov	r1, r2
    39d0:	4618      	mov	r0, r3
    39d2:	4b12      	ldr	r3, [pc, #72]	; (3a1c <_can_async_set_irq_state+0x80>)
    39d4:	4798      	blx	r3
		hri_can_write_TXBTIE_reg(dev->hw, CAN_TXBTIE_MASK);
    39d6:	687b      	ldr	r3, [r7, #4]
    39d8:	681b      	ldr	r3, [r3, #0]
    39da:	f04f 31ff 	mov.w	r1, #4294967295
    39de:	4618      	mov	r0, r3
    39e0:	4b0f      	ldr	r3, [pc, #60]	; (3a20 <_can_async_set_irq_state+0x84>)
    39e2:	4798      	blx	r3
	return;
    39e4:	e014      	b.n	3a10 <_can_async_set_irq_state+0x74>
	} else if (type == CAN_ASYNC_IRQ_CB) {
    39e6:	78fb      	ldrb	r3, [r7, #3]
    39e8:	2b02      	cmp	r3, #2
    39ea:	d111      	bne.n	3a10 <_can_async_set_irq_state+0x74>
		ie = hri_can_get_IE_reg(dev->hw, CAN_IE_RF0NE | CAN_IE_TCE);
    39ec:	687b      	ldr	r3, [r7, #4]
    39ee:	681b      	ldr	r3, [r3, #0]
    39f0:	f240 2101 	movw	r1, #513	; 0x201
    39f4:	4618      	mov	r0, r3
    39f6:	4b0b      	ldr	r3, [pc, #44]	; (3a24 <_can_async_set_irq_state+0x88>)
    39f8:	4798      	blx	r3
    39fa:	60f8      	str	r0, [r7, #12]
		hri_can_write_IE_reg(dev->hw, ie | CONF_CAN0_IE_REG);
    39fc:	687b      	ldr	r3, [r7, #4]
    39fe:	681a      	ldr	r2, [r3, #0]
    3a00:	68fb      	ldr	r3, [r7, #12]
    3a02:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
    3a06:	4619      	mov	r1, r3
    3a08:	4610      	mov	r0, r2
    3a0a:	4b07      	ldr	r3, [pc, #28]	; (3a28 <_can_async_set_irq_state+0x8c>)
    3a0c:	4798      	blx	r3
	return;
    3a0e:	bf00      	nop
    3a10:	bf00      	nop
}
    3a12:	3710      	adds	r7, #16
    3a14:	46bd      	mov	sp, r7
    3a16:	bd80      	pop	{r7, pc}
    3a18:	00003279 	.word	0x00003279
    3a1c:	000032ad 	.word	0x000032ad
    3a20:	0000348b 	.word	0x0000348b
    3a24:	000032e5 	.word	0x000032e5
    3a28:	0000330b 	.word	0x0000330b

00003a2c <_can_async_set_filter>:
/**
 * \brief Set CAN to the specified mode
 */
int32_t _can_async_set_filter(struct _can_async_device *const dev, uint8_t index, enum can_format fmt,
                              struct can_filter *filter)
{
    3a2c:	b480      	push	{r7}
    3a2e:	b087      	sub	sp, #28
    3a30:	af00      	add	r7, sp, #0
    3a32:	60f8      	str	r0, [r7, #12]
    3a34:	607b      	str	r3, [r7, #4]
    3a36:	460b      	mov	r3, r1
    3a38:	72fb      	strb	r3, [r7, #11]
    3a3a:	4613      	mov	r3, r2
    3a3c:	72bb      	strb	r3, [r7, #10]
	struct _can_standard_message_filter_element *sf;
	struct _can_extended_message_filter_element *ef;

	sf = &((struct _can_context *)dev->context)->rx_std_filter[index];
    3a3e:	68fb      	ldr	r3, [r7, #12]
    3a40:	699b      	ldr	r3, [r3, #24]
    3a42:	68da      	ldr	r2, [r3, #12]
    3a44:	7afb      	ldrb	r3, [r7, #11]
    3a46:	009b      	lsls	r3, r3, #2
    3a48:	4413      	add	r3, r2
    3a4a:	617b      	str	r3, [r7, #20]
	ef = &((struct _can_context *)dev->context)->rx_ext_filter[index];
    3a4c:	68fb      	ldr	r3, [r7, #12]
    3a4e:	699b      	ldr	r3, [r3, #24]
    3a50:	691a      	ldr	r2, [r3, #16]
    3a52:	7afb      	ldrb	r3, [r7, #11]
    3a54:	00db      	lsls	r3, r3, #3
    3a56:	4413      	add	r3, r2
    3a58:	613b      	str	r3, [r7, #16]

	if (fmt == CAN_FMT_STDID) {
    3a5a:	7abb      	ldrb	r3, [r7, #10]
    3a5c:	2b00      	cmp	r3, #0
    3a5e:	d123      	bne.n	3aa8 <_can_async_set_filter+0x7c>
		if (filter == NULL) {
    3a60:	687b      	ldr	r3, [r7, #4]
    3a62:	2b00      	cmp	r3, #0
    3a64:	d104      	bne.n	3a70 <_can_async_set_filter+0x44>
			sf->S0.val = 0;
    3a66:	697b      	ldr	r3, [r7, #20]
    3a68:	2200      	movs	r2, #0
    3a6a:	601a      	str	r2, [r3, #0]
			return ERR_NONE;
    3a6c:	2300      	movs	r3, #0
    3a6e:	e03b      	b.n	3ae8 <_can_async_set_filter+0xbc>
		}
		sf->S0.val       = filter->mask;
    3a70:	687b      	ldr	r3, [r7, #4]
    3a72:	685a      	ldr	r2, [r3, #4]
    3a74:	697b      	ldr	r3, [r7, #20]
    3a76:	601a      	str	r2, [r3, #0]
		sf->S0.bit.SFID1 = filter->id;
    3a78:	687b      	ldr	r3, [r7, #4]
    3a7a:	681b      	ldr	r3, [r3, #0]
    3a7c:	b29b      	uxth	r3, r3
    3a7e:	f3c3 030a 	ubfx	r3, r3, #0, #11
    3a82:	b299      	uxth	r1, r3
    3a84:	697a      	ldr	r2, [r7, #20]
    3a86:	6813      	ldr	r3, [r2, #0]
    3a88:	f361 431a 	bfi	r3, r1, #16, #11
    3a8c:	6013      	str	r3, [r2, #0]
		sf->S0.bit.SFT   = _CAN_SFT_CLASSIC;
    3a8e:	697a      	ldr	r2, [r7, #20]
    3a90:	6813      	ldr	r3, [r2, #0]
    3a92:	2102      	movs	r1, #2
    3a94:	f361 739f 	bfi	r3, r1, #30, #2
    3a98:	6013      	str	r3, [r2, #0]
		sf->S0.bit.SFEC  = _CAN_SFEC_STF0M;
    3a9a:	697a      	ldr	r2, [r7, #20]
    3a9c:	6813      	ldr	r3, [r2, #0]
    3a9e:	2101      	movs	r1, #1
    3aa0:	f361 63dd 	bfi	r3, r1, #27, #3
    3aa4:	6013      	str	r3, [r2, #0]
    3aa6:	e01e      	b.n	3ae6 <_can_async_set_filter+0xba>
	} else if (fmt == CAN_FMT_EXTID) {
    3aa8:	7abb      	ldrb	r3, [r7, #10]
    3aaa:	2b01      	cmp	r3, #1
    3aac:	d11b      	bne.n	3ae6 <_can_async_set_filter+0xba>
		if (filter == NULL) {
    3aae:	687b      	ldr	r3, [r7, #4]
    3ab0:	2b00      	cmp	r3, #0
    3ab2:	d104      	bne.n	3abe <_can_async_set_filter+0x92>
			ef->F0.val = 0;
    3ab4:	693b      	ldr	r3, [r7, #16]
    3ab6:	2200      	movs	r2, #0
    3ab8:	601a      	str	r2, [r3, #0]
			return ERR_NONE;
    3aba:	2300      	movs	r3, #0
    3abc:	e014      	b.n	3ae8 <_can_async_set_filter+0xbc>
		}
		ef->F0.val      = filter->id;
    3abe:	687b      	ldr	r3, [r7, #4]
    3ac0:	681a      	ldr	r2, [r3, #0]
    3ac2:	693b      	ldr	r3, [r7, #16]
    3ac4:	601a      	str	r2, [r3, #0]
		ef->F0.bit.EFEC = _CAN_EFEC_STF0M;
    3ac6:	693a      	ldr	r2, [r7, #16]
    3ac8:	6813      	ldr	r3, [r2, #0]
    3aca:	2101      	movs	r1, #1
    3acc:	f361 735f 	bfi	r3, r1, #29, #3
    3ad0:	6013      	str	r3, [r2, #0]
		ef->F1.val      = filter->mask;
    3ad2:	687b      	ldr	r3, [r7, #4]
    3ad4:	685a      	ldr	r2, [r3, #4]
    3ad6:	693b      	ldr	r3, [r7, #16]
    3ad8:	605a      	str	r2, [r3, #4]
		ef->F1.bit.EFT  = _CAN_EFT_CLASSIC;
    3ada:	693a      	ldr	r2, [r7, #16]
    3adc:	6853      	ldr	r3, [r2, #4]
    3ade:	2102      	movs	r1, #2
    3ae0:	f361 739f 	bfi	r3, r1, #30, #2
    3ae4:	6053      	str	r3, [r2, #4]
	}

	return ERR_NONE;
    3ae6:	2300      	movs	r3, #0
}
    3ae8:	4618      	mov	r0, r3
    3aea:	371c      	adds	r7, #28
    3aec:	46bd      	mov	sp, r7
    3aee:	f85d 7b04 	ldr.w	r7, [sp], #4
    3af2:	4770      	bx	lr

00003af4 <CAN1_Handler>:

/*
 * \brief CAN interrupt handler
 */
void CAN1_Handler(void)
{
    3af4:	b590      	push	{r4, r7, lr}
    3af6:	b083      	sub	sp, #12
    3af8:	af00      	add	r7, sp, #0
	struct _can_async_device *dev = _can1_dev;
    3afa:	4b2c      	ldr	r3, [pc, #176]	; (3bac <CAN1_Handler+0xb8>)
    3afc:	681b      	ldr	r3, [r3, #0]
    3afe:	607b      	str	r3, [r7, #4]
	uint32_t                  ir;
	ir = hri_can_read_IR_reg(dev->hw);
    3b00:	687b      	ldr	r3, [r7, #4]
    3b02:	681b      	ldr	r3, [r3, #0]
    3b04:	4618      	mov	r0, r3
    3b06:	4b2a      	ldr	r3, [pc, #168]	; (3bb0 <CAN1_Handler+0xbc>)
    3b08:	4798      	blx	r3
    3b0a:	6038      	str	r0, [r7, #0]

	if (ir & CAN_IR_RF0N) {
    3b0c:	683b      	ldr	r3, [r7, #0]
    3b0e:	f003 0301 	and.w	r3, r3, #1
    3b12:	2b00      	cmp	r3, #0
    3b14:	d003      	beq.n	3b1e <CAN1_Handler+0x2a>
		dev->cb.rx_done(dev);
    3b16:	687b      	ldr	r3, [r7, #4]
    3b18:	689b      	ldr	r3, [r3, #8]
    3b1a:	6878      	ldr	r0, [r7, #4]
    3b1c:	4798      	blx	r3
	}

	if (ir & CAN_IR_TC) {
    3b1e:	683b      	ldr	r3, [r7, #0]
    3b20:	f403 7300 	and.w	r3, r3, #512	; 0x200
    3b24:	2b00      	cmp	r3, #0
    3b26:	d003      	beq.n	3b30 <CAN1_Handler+0x3c>
		dev->cb.tx_done(dev);
    3b28:	687b      	ldr	r3, [r7, #4]
    3b2a:	685b      	ldr	r3, [r3, #4]
    3b2c:	6878      	ldr	r0, [r7, #4]
    3b2e:	4798      	blx	r3
	}

	if (ir & CAN_IR_BO) {
    3b30:	683b      	ldr	r3, [r7, #0]
    3b32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    3b36:	2b00      	cmp	r3, #0
    3b38:	d004      	beq.n	3b44 <CAN1_Handler+0x50>
		dev->cb.irq_handler(dev, CAN_IRQ_BO);
    3b3a:	687b      	ldr	r3, [r7, #4]
    3b3c:	68db      	ldr	r3, [r3, #12]
    3b3e:	2103      	movs	r1, #3
    3b40:	6878      	ldr	r0, [r7, #4]
    3b42:	4798      	blx	r3
	}

	if (ir & CAN_IR_EW) {
    3b44:	683b      	ldr	r3, [r7, #0]
    3b46:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
    3b4a:	2b00      	cmp	r3, #0
    3b4c:	d004      	beq.n	3b58 <CAN1_Handler+0x64>
		dev->cb.irq_handler(dev, CAN_IRQ_EW);
    3b4e:	687b      	ldr	r3, [r7, #4]
    3b50:	68db      	ldr	r3, [r3, #12]
    3b52:	2100      	movs	r1, #0
    3b54:	6878      	ldr	r0, [r7, #4]
    3b56:	4798      	blx	r3
	}

	if (ir & CAN_IR_EP) {
    3b58:	683b      	ldr	r3, [r7, #0]
    3b5a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    3b5e:	2b00      	cmp	r3, #0
    3b60:	d00f      	beq.n	3b82 <CAN1_Handler+0x8e>
		dev->cb.irq_handler(dev, hri_can_get_PSR_EP_bit(dev->hw) ? CAN_IRQ_EP : CAN_IRQ_EA);
    3b62:	687b      	ldr	r3, [r7, #4]
    3b64:	68dc      	ldr	r4, [r3, #12]
    3b66:	687b      	ldr	r3, [r7, #4]
    3b68:	681b      	ldr	r3, [r3, #0]
    3b6a:	4618      	mov	r0, r3
    3b6c:	4b11      	ldr	r3, [pc, #68]	; (3bb4 <CAN1_Handler+0xc0>)
    3b6e:	4798      	blx	r3
    3b70:	4603      	mov	r3, r0
    3b72:	2b00      	cmp	r3, #0
    3b74:	d001      	beq.n	3b7a <CAN1_Handler+0x86>
    3b76:	2302      	movs	r3, #2
    3b78:	e000      	b.n	3b7c <CAN1_Handler+0x88>
    3b7a:	2301      	movs	r3, #1
    3b7c:	4619      	mov	r1, r3
    3b7e:	6878      	ldr	r0, [r7, #4]
    3b80:	47a0      	blx	r4
	}

	if (ir & CAN_IR_RF0L) {
    3b82:	683b      	ldr	r3, [r7, #0]
    3b84:	f003 0308 	and.w	r3, r3, #8
    3b88:	2b00      	cmp	r3, #0
    3b8a:	d004      	beq.n	3b96 <CAN1_Handler+0xa2>
		dev->cb.irq_handler(dev, CAN_IRQ_DO);
    3b8c:	687b      	ldr	r3, [r7, #4]
    3b8e:	68db      	ldr	r3, [r3, #12]
    3b90:	2104      	movs	r1, #4
    3b92:	6878      	ldr	r0, [r7, #4]
    3b94:	4798      	blx	r3
	}

	hri_can_write_IR_reg(dev->hw, ir);
    3b96:	687b      	ldr	r3, [r7, #4]
    3b98:	681b      	ldr	r3, [r3, #0]
    3b9a:	6839      	ldr	r1, [r7, #0]
    3b9c:	4618      	mov	r0, r3
    3b9e:	4b06      	ldr	r3, [pc, #24]	; (3bb8 <CAN1_Handler+0xc4>)
    3ba0:	4798      	blx	r3
}
    3ba2:	bf00      	nop
    3ba4:	370c      	adds	r7, #12
    3ba6:	46bd      	mov	sp, r7
    3ba8:	bd90      	pop	{r4, r7, pc}
    3baa:	bf00      	nop
    3bac:	20000d2c 	.word	0x20000d2c
    3bb0:	00003261 	.word	0x00003261
    3bb4:	00003011 	.word	0x00003011
    3bb8:	00003245 	.word	0x00003245

00003bbc <__NVIC_SetPendingIRQ>:
{
    3bbc:	b480      	push	{r7}
    3bbe:	b083      	sub	sp, #12
    3bc0:	af00      	add	r7, sp, #0
    3bc2:	4603      	mov	r3, r0
    3bc4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    3bc6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    3bca:	2b00      	cmp	r3, #0
    3bcc:	db0c      	blt.n	3be8 <__NVIC_SetPendingIRQ+0x2c>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3bce:	4909      	ldr	r1, [pc, #36]	; (3bf4 <__NVIC_SetPendingIRQ+0x38>)
    3bd0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    3bd4:	095b      	lsrs	r3, r3, #5
    3bd6:	88fa      	ldrh	r2, [r7, #6]
    3bd8:	f002 021f 	and.w	r2, r2, #31
    3bdc:	2001      	movs	r0, #1
    3bde:	fa00 f202 	lsl.w	r2, r0, r2
    3be2:	3340      	adds	r3, #64	; 0x40
    3be4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    3be8:	bf00      	nop
    3bea:	370c      	adds	r7, #12
    3bec:	46bd      	mov	sp, r7
    3bee:	f85d 7b04 	ldr.w	r7, [sp], #4
    3bf2:	4770      	bx	lr
    3bf4:	e000e100 	.word	0xe000e100

00003bf8 <_irq_set>:

/**
 * \brief Set the given IRQ
 */
void _irq_set(uint8_t n)
{
    3bf8:	b580      	push	{r7, lr}
    3bfa:	b082      	sub	sp, #8
    3bfc:	af00      	add	r7, sp, #0
    3bfe:	4603      	mov	r3, r0
    3c00:	71fb      	strb	r3, [r7, #7]
	NVIC_SetPendingIRQ((IRQn_Type)n);
    3c02:	79fb      	ldrb	r3, [r7, #7]
    3c04:	b21b      	sxth	r3, r3
    3c06:	4618      	mov	r0, r3
    3c08:	4b02      	ldr	r3, [pc, #8]	; (3c14 <_irq_set+0x1c>)
    3c0a:	4798      	blx	r3
}
    3c0c:	bf00      	nop
    3c0e:	3708      	adds	r7, #8
    3c10:	46bd      	mov	sp, r7
    3c12:	bd80      	pop	{r7, pc}
    3c14:	00003bbd 	.word	0x00003bbd

00003c18 <_get_cycles_for_us_internal>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of us
 */
static inline uint32_t _get_cycles_for_us_internal(const uint16_t us, const uint32_t freq, const uint8_t power)
{
    3c18:	b480      	push	{r7}
    3c1a:	b083      	sub	sp, #12
    3c1c:	af00      	add	r7, sp, #0
    3c1e:	4603      	mov	r3, r0
    3c20:	6039      	str	r1, [r7, #0]
    3c22:	80fb      	strh	r3, [r7, #6]
    3c24:	4613      	mov	r3, r2
    3c26:	717b      	strb	r3, [r7, #5]
	switch (power) {
    3c28:	797b      	ldrb	r3, [r7, #5]
    3c2a:	3b04      	subs	r3, #4
    3c2c:	2b05      	cmp	r3, #5
    3c2e:	d86b      	bhi.n	3d08 <_get_cycles_for_us_internal+0xf0>
    3c30:	a201      	add	r2, pc, #4	; (adr r2, 3c38 <_get_cycles_for_us_internal+0x20>)
    3c32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    3c36:	bf00      	nop
    3c38:	00003ce7 	.word	0x00003ce7
    3c3c:	00003cc7 	.word	0x00003cc7
    3c40:	00003ca9 	.word	0x00003ca9
    3c44:	00003c8b 	.word	0x00003c8b
    3c48:	00003c6d 	.word	0x00003c6d
    3c4c:	00003c51 	.word	0x00003c51
	case 9:
		return (us * (freq / 1000000) + 2) / 3;
    3c50:	88fb      	ldrh	r3, [r7, #6]
    3c52:	683a      	ldr	r2, [r7, #0]
    3c54:	4935      	ldr	r1, [pc, #212]	; (3d2c <_get_cycles_for_us_internal+0x114>)
    3c56:	fba1 1202 	umull	r1, r2, r1, r2
    3c5a:	0c92      	lsrs	r2, r2, #18
    3c5c:	fb02 f303 	mul.w	r3, r2, r3
    3c60:	3302      	adds	r3, #2
    3c62:	4a33      	ldr	r2, [pc, #204]	; (3d30 <_get_cycles_for_us_internal+0x118>)
    3c64:	fba2 2303 	umull	r2, r3, r2, r3
    3c68:	085b      	lsrs	r3, r3, #1
    3c6a:	e059      	b.n	3d20 <_get_cycles_for_us_internal+0x108>
	case 8:
		return (us * (freq / 100000) + 29) / 30;
    3c6c:	88fb      	ldrh	r3, [r7, #6]
    3c6e:	683a      	ldr	r2, [r7, #0]
    3c70:	0952      	lsrs	r2, r2, #5
    3c72:	4930      	ldr	r1, [pc, #192]	; (3d34 <_get_cycles_for_us_internal+0x11c>)
    3c74:	fba1 1202 	umull	r1, r2, r1, r2
    3c78:	09d2      	lsrs	r2, r2, #7
    3c7a:	fb02 f303 	mul.w	r3, r2, r3
    3c7e:	331d      	adds	r3, #29
    3c80:	4a2d      	ldr	r2, [pc, #180]	; (3d38 <_get_cycles_for_us_internal+0x120>)
    3c82:	fba2 2303 	umull	r2, r3, r2, r3
    3c86:	091b      	lsrs	r3, r3, #4
    3c88:	e04a      	b.n	3d20 <_get_cycles_for_us_internal+0x108>
	case 7:
		return (us * (freq / 10000) + 299) / 300;
    3c8a:	88fb      	ldrh	r3, [r7, #6]
    3c8c:	683a      	ldr	r2, [r7, #0]
    3c8e:	492b      	ldr	r1, [pc, #172]	; (3d3c <_get_cycles_for_us_internal+0x124>)
    3c90:	fba1 1202 	umull	r1, r2, r1, r2
    3c94:	0b52      	lsrs	r2, r2, #13
    3c96:	fb02 f303 	mul.w	r3, r2, r3
    3c9a:	f203 132b 	addw	r3, r3, #299	; 0x12b
    3c9e:	4a28      	ldr	r2, [pc, #160]	; (3d40 <_get_cycles_for_us_internal+0x128>)
    3ca0:	fba2 2303 	umull	r2, r3, r2, r3
    3ca4:	095b      	lsrs	r3, r3, #5
    3ca6:	e03b      	b.n	3d20 <_get_cycles_for_us_internal+0x108>
	case 6:
		return (us * (freq / 1000) + 2999) / 3000;
    3ca8:	88fb      	ldrh	r3, [r7, #6]
    3caa:	683a      	ldr	r2, [r7, #0]
    3cac:	4925      	ldr	r1, [pc, #148]	; (3d44 <_get_cycles_for_us_internal+0x12c>)
    3cae:	fba1 1202 	umull	r1, r2, r1, r2
    3cb2:	0992      	lsrs	r2, r2, #6
    3cb4:	fb02 f303 	mul.w	r3, r2, r3
    3cb8:	f603 33b7 	addw	r3, r3, #2999	; 0xbb7
    3cbc:	4a22      	ldr	r2, [pc, #136]	; (3d48 <_get_cycles_for_us_internal+0x130>)
    3cbe:	fba2 2303 	umull	r2, r3, r2, r3
    3cc2:	099b      	lsrs	r3, r3, #6
    3cc4:	e02c      	b.n	3d20 <_get_cycles_for_us_internal+0x108>
	case 5:
		return (us * (freq / 100) + 29999) / 30000;
    3cc6:	88fb      	ldrh	r3, [r7, #6]
    3cc8:	683a      	ldr	r2, [r7, #0]
    3cca:	4920      	ldr	r1, [pc, #128]	; (3d4c <_get_cycles_for_us_internal+0x134>)
    3ccc:	fba1 1202 	umull	r1, r2, r1, r2
    3cd0:	0952      	lsrs	r2, r2, #5
    3cd2:	fb02 f303 	mul.w	r3, r2, r3
    3cd6:	f503 43ea 	add.w	r3, r3, #29952	; 0x7500
    3cda:	332f      	adds	r3, #47	; 0x2f
    3cdc:	4a1c      	ldr	r2, [pc, #112]	; (3d50 <_get_cycles_for_us_internal+0x138>)
    3cde:	fba2 2303 	umull	r2, r3, r2, r3
    3ce2:	0b5b      	lsrs	r3, r3, #13
    3ce4:	e01c      	b.n	3d20 <_get_cycles_for_us_internal+0x108>
	case 4:
		return (us * (freq / 10) + 299999) / 300000;
    3ce6:	88fb      	ldrh	r3, [r7, #6]
    3ce8:	683a      	ldr	r2, [r7, #0]
    3cea:	491a      	ldr	r1, [pc, #104]	; (3d54 <_get_cycles_for_us_internal+0x13c>)
    3cec:	fba1 1202 	umull	r1, r2, r1, r2
    3cf0:	08d2      	lsrs	r2, r2, #3
    3cf2:	fb02 f303 	mul.w	r3, r2, r3
    3cf6:	f503 2392 	add.w	r3, r3, #299008	; 0x49000
    3cfa:	f203 33df 	addw	r3, r3, #991	; 0x3df
    3cfe:	4a16      	ldr	r2, [pc, #88]	; (3d58 <_get_cycles_for_us_internal+0x140>)
    3d00:	fba2 2303 	umull	r2, r3, r2, r3
    3d04:	0c5b      	lsrs	r3, r3, #17
    3d06:	e00b      	b.n	3d20 <_get_cycles_for_us_internal+0x108>
	default:
		return (us * freq + 2999999) / 3000000;
    3d08:	88fb      	ldrh	r3, [r7, #6]
    3d0a:	683a      	ldr	r2, [r7, #0]
    3d0c:	fb02 f303 	mul.w	r3, r2, r3
    3d10:	f503 1337 	add.w	r3, r3, #2998272	; 0x2dc000
    3d14:	f203 63bf 	addw	r3, r3, #1727	; 0x6bf
    3d18:	4a10      	ldr	r2, [pc, #64]	; (3d5c <_get_cycles_for_us_internal+0x144>)
    3d1a:	fba2 2303 	umull	r2, r3, r2, r3
    3d1e:	0c9b      	lsrs	r3, r3, #18
	}
}
    3d20:	4618      	mov	r0, r3
    3d22:	370c      	adds	r7, #12
    3d24:	46bd      	mov	sp, r7
    3d26:	f85d 7b04 	ldr.w	r7, [sp], #4
    3d2a:	4770      	bx	lr
    3d2c:	431bde83 	.word	0x431bde83
    3d30:	aaaaaaab 	.word	0xaaaaaaab
    3d34:	0a7c5ac5 	.word	0x0a7c5ac5
    3d38:	88888889 	.word	0x88888889
    3d3c:	d1b71759 	.word	0xd1b71759
    3d40:	1b4e81b5 	.word	0x1b4e81b5
    3d44:	10624dd3 	.word	0x10624dd3
    3d48:	057619f1 	.word	0x057619f1
    3d4c:	51eb851f 	.word	0x51eb851f
    3d50:	45e7b273 	.word	0x45e7b273
    3d54:	cccccccd 	.word	0xcccccccd
    3d58:	6fd91d85 	.word	0x6fd91d85
    3d5c:	165e9f81 	.word	0x165e9f81

00003d60 <_get_cycles_for_us>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of us
 */
uint32_t _get_cycles_for_us(const uint16_t us)
{
    3d60:	b580      	push	{r7, lr}
    3d62:	b082      	sub	sp, #8
    3d64:	af00      	add	r7, sp, #0
    3d66:	4603      	mov	r3, r0
    3d68:	80fb      	strh	r3, [r7, #6]
	return _get_cycles_for_us_internal(us, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
    3d6a:	88fb      	ldrh	r3, [r7, #6]
    3d6c:	2209      	movs	r2, #9
    3d6e:	4904      	ldr	r1, [pc, #16]	; (3d80 <_get_cycles_for_us+0x20>)
    3d70:	4618      	mov	r0, r3
    3d72:	4b04      	ldr	r3, [pc, #16]	; (3d84 <_get_cycles_for_us+0x24>)
    3d74:	4798      	blx	r3
    3d76:	4603      	mov	r3, r0
}
    3d78:	4618      	mov	r0, r3
    3d7a:	3708      	adds	r7, #8
    3d7c:	46bd      	mov	sp, r7
    3d7e:	bd80      	pop	{r7, pc}
    3d80:	07270e00 	.word	0x07270e00
    3d84:	00003c19 	.word	0x00003c19

00003d88 <_get_cycles_for_ms_internal>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
static inline uint32_t _get_cycles_for_ms_internal(const uint16_t ms, const uint32_t freq, const uint8_t power)
{
    3d88:	b480      	push	{r7}
    3d8a:	b083      	sub	sp, #12
    3d8c:	af00      	add	r7, sp, #0
    3d8e:	4603      	mov	r3, r0
    3d90:	6039      	str	r1, [r7, #0]
    3d92:	80fb      	strh	r3, [r7, #6]
    3d94:	4613      	mov	r3, r2
    3d96:	717b      	strb	r3, [r7, #5]
	switch (power) {
    3d98:	797b      	ldrb	r3, [r7, #5]
    3d9a:	3b04      	subs	r3, #4
    3d9c:	2b05      	cmp	r3, #5
    3d9e:	d870      	bhi.n	3e82 <_get_cycles_for_ms_internal+0xfa>
    3da0:	a201      	add	r2, pc, #4	; (adr r2, 3da8 <_get_cycles_for_ms_internal+0x20>)
    3da2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    3da6:	bf00      	nop
    3da8:	00003e65 	.word	0x00003e65
    3dac:	00003e49 	.word	0x00003e49
    3db0:	00003e2d 	.word	0x00003e2d
    3db4:	00003e09 	.word	0x00003e09
    3db8:	00003de5 	.word	0x00003de5
    3dbc:	00003dc1 	.word	0x00003dc1
	case 9:
		return (ms * (freq / 1000000) + 2) / 3 * 1000;
    3dc0:	88fb      	ldrh	r3, [r7, #6]
    3dc2:	683a      	ldr	r2, [r7, #0]
    3dc4:	4937      	ldr	r1, [pc, #220]	; (3ea4 <_get_cycles_for_ms_internal+0x11c>)
    3dc6:	fba1 1202 	umull	r1, r2, r1, r2
    3dca:	0c92      	lsrs	r2, r2, #18
    3dcc:	fb02 f303 	mul.w	r3, r2, r3
    3dd0:	3302      	adds	r3, #2
    3dd2:	4a35      	ldr	r2, [pc, #212]	; (3ea8 <_get_cycles_for_ms_internal+0x120>)
    3dd4:	fba2 2303 	umull	r2, r3, r2, r3
    3dd8:	085b      	lsrs	r3, r3, #1
    3dda:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    3dde:	fb02 f303 	mul.w	r3, r2, r3
    3de2:	e058      	b.n	3e96 <_get_cycles_for_ms_internal+0x10e>
	case 8:
		return (ms * (freq / 100000) + 2) / 3 * 100;
    3de4:	88fb      	ldrh	r3, [r7, #6]
    3de6:	683a      	ldr	r2, [r7, #0]
    3de8:	0952      	lsrs	r2, r2, #5
    3dea:	4930      	ldr	r1, [pc, #192]	; (3eac <_get_cycles_for_ms_internal+0x124>)
    3dec:	fba1 1202 	umull	r1, r2, r1, r2
    3df0:	09d2      	lsrs	r2, r2, #7
    3df2:	fb02 f303 	mul.w	r3, r2, r3
    3df6:	3302      	adds	r3, #2
    3df8:	4a2b      	ldr	r2, [pc, #172]	; (3ea8 <_get_cycles_for_ms_internal+0x120>)
    3dfa:	fba2 2303 	umull	r2, r3, r2, r3
    3dfe:	085b      	lsrs	r3, r3, #1
    3e00:	2264      	movs	r2, #100	; 0x64
    3e02:	fb02 f303 	mul.w	r3, r2, r3
    3e06:	e046      	b.n	3e96 <_get_cycles_for_ms_internal+0x10e>
	case 7:
		return (ms * (freq / 10000) + 2) / 3 * 10;
    3e08:	88fb      	ldrh	r3, [r7, #6]
    3e0a:	683a      	ldr	r2, [r7, #0]
    3e0c:	4928      	ldr	r1, [pc, #160]	; (3eb0 <_get_cycles_for_ms_internal+0x128>)
    3e0e:	fba1 1202 	umull	r1, r2, r1, r2
    3e12:	0b52      	lsrs	r2, r2, #13
    3e14:	fb02 f303 	mul.w	r3, r2, r3
    3e18:	3302      	adds	r3, #2
    3e1a:	4a23      	ldr	r2, [pc, #140]	; (3ea8 <_get_cycles_for_ms_internal+0x120>)
    3e1c:	fba2 2303 	umull	r2, r3, r2, r3
    3e20:	085a      	lsrs	r2, r3, #1
    3e22:	4613      	mov	r3, r2
    3e24:	009b      	lsls	r3, r3, #2
    3e26:	4413      	add	r3, r2
    3e28:	005b      	lsls	r3, r3, #1
    3e2a:	e034      	b.n	3e96 <_get_cycles_for_ms_internal+0x10e>
	case 6:
		return (ms * (freq / 1000) + 2) / 3;
    3e2c:	88fb      	ldrh	r3, [r7, #6]
    3e2e:	683a      	ldr	r2, [r7, #0]
    3e30:	4920      	ldr	r1, [pc, #128]	; (3eb4 <_get_cycles_for_ms_internal+0x12c>)
    3e32:	fba1 1202 	umull	r1, r2, r1, r2
    3e36:	0992      	lsrs	r2, r2, #6
    3e38:	fb02 f303 	mul.w	r3, r2, r3
    3e3c:	3302      	adds	r3, #2
    3e3e:	4a1a      	ldr	r2, [pc, #104]	; (3ea8 <_get_cycles_for_ms_internal+0x120>)
    3e40:	fba2 2303 	umull	r2, r3, r2, r3
    3e44:	085b      	lsrs	r3, r3, #1
    3e46:	e026      	b.n	3e96 <_get_cycles_for_ms_internal+0x10e>
	case 5:
		return (ms * (freq / 100) + 29) / 30;
    3e48:	88fb      	ldrh	r3, [r7, #6]
    3e4a:	683a      	ldr	r2, [r7, #0]
    3e4c:	491a      	ldr	r1, [pc, #104]	; (3eb8 <_get_cycles_for_ms_internal+0x130>)
    3e4e:	fba1 1202 	umull	r1, r2, r1, r2
    3e52:	0952      	lsrs	r2, r2, #5
    3e54:	fb02 f303 	mul.w	r3, r2, r3
    3e58:	331d      	adds	r3, #29
    3e5a:	4a18      	ldr	r2, [pc, #96]	; (3ebc <_get_cycles_for_ms_internal+0x134>)
    3e5c:	fba2 2303 	umull	r2, r3, r2, r3
    3e60:	091b      	lsrs	r3, r3, #4
    3e62:	e018      	b.n	3e96 <_get_cycles_for_ms_internal+0x10e>
	case 4:
		return (ms * (freq / 10) + 299) / 300;
    3e64:	88fb      	ldrh	r3, [r7, #6]
    3e66:	683a      	ldr	r2, [r7, #0]
    3e68:	4915      	ldr	r1, [pc, #84]	; (3ec0 <_get_cycles_for_ms_internal+0x138>)
    3e6a:	fba1 1202 	umull	r1, r2, r1, r2
    3e6e:	08d2      	lsrs	r2, r2, #3
    3e70:	fb02 f303 	mul.w	r3, r2, r3
    3e74:	f203 132b 	addw	r3, r3, #299	; 0x12b
    3e78:	4a12      	ldr	r2, [pc, #72]	; (3ec4 <_get_cycles_for_ms_internal+0x13c>)
    3e7a:	fba2 2303 	umull	r2, r3, r2, r3
    3e7e:	095b      	lsrs	r3, r3, #5
    3e80:	e009      	b.n	3e96 <_get_cycles_for_ms_internal+0x10e>
	default:
		return (ms * (freq / 1) + 2999) / 3000;
    3e82:	88fb      	ldrh	r3, [r7, #6]
    3e84:	683a      	ldr	r2, [r7, #0]
    3e86:	fb02 f303 	mul.w	r3, r2, r3
    3e8a:	f603 33b7 	addw	r3, r3, #2999	; 0xbb7
    3e8e:	4a0e      	ldr	r2, [pc, #56]	; (3ec8 <_get_cycles_for_ms_internal+0x140>)
    3e90:	fba2 2303 	umull	r2, r3, r2, r3
    3e94:	099b      	lsrs	r3, r3, #6
	}
}
    3e96:	4618      	mov	r0, r3
    3e98:	370c      	adds	r7, #12
    3e9a:	46bd      	mov	sp, r7
    3e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
    3ea0:	4770      	bx	lr
    3ea2:	bf00      	nop
    3ea4:	431bde83 	.word	0x431bde83
    3ea8:	aaaaaaab 	.word	0xaaaaaaab
    3eac:	0a7c5ac5 	.word	0x0a7c5ac5
    3eb0:	d1b71759 	.word	0xd1b71759
    3eb4:	10624dd3 	.word	0x10624dd3
    3eb8:	51eb851f 	.word	0x51eb851f
    3ebc:	88888889 	.word	0x88888889
    3ec0:	cccccccd 	.word	0xcccccccd
    3ec4:	1b4e81b5 	.word	0x1b4e81b5
    3ec8:	057619f1 	.word	0x057619f1

00003ecc <_get_cycles_for_ms>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
    3ecc:	b580      	push	{r7, lr}
    3ece:	b082      	sub	sp, #8
    3ed0:	af00      	add	r7, sp, #0
    3ed2:	4603      	mov	r3, r0
    3ed4:	80fb      	strh	r3, [r7, #6]
	return _get_cycles_for_ms_internal(ms, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
    3ed6:	88fb      	ldrh	r3, [r7, #6]
    3ed8:	2209      	movs	r2, #9
    3eda:	4904      	ldr	r1, [pc, #16]	; (3eec <_get_cycles_for_ms+0x20>)
    3edc:	4618      	mov	r0, r3
    3ede:	4b04      	ldr	r3, [pc, #16]	; (3ef0 <_get_cycles_for_ms+0x24>)
    3ee0:	4798      	blx	r3
    3ee2:	4603      	mov	r3, r0
}
    3ee4:	4618      	mov	r0, r3
    3ee6:	3708      	adds	r7, #8
    3ee8:	46bd      	mov	sp, r7
    3eea:	bd80      	pop	{r7, pc}
    3eec:	07270e00 	.word	0x07270e00
    3ef0:	00003d89 	.word	0x00003d89
    3ef4:	00000000 	.word	0x00000000

00003ef8 <_delay_cycles>:
}
/**
 * \brief Delay loop to delay n number of cycles
 */
void _delay_cycles(void *const hw, uint32_t cycles)
{
    3ef8:	b480      	push	{r7}
    3efa:	b083      	sub	sp, #12
    3efc:	af00      	add	r7, sp, #0
    3efe:	6078      	str	r0, [r7, #4]
    3f00:	6039      	str	r1, [r7, #0]
    3f02:	bf00      	nop
    3f04:	f3af 8000 	nop.w

00003f08 <__delay>:
	__asm(".align 3 \n"
	      "__delay:\n"
	      "subs r1, r1, #1\n"
	      "bhi __delay\n");
#elif defined __GNUC__
	__asm(".syntax unified\n"
    3f08:	3901      	subs	r1, #1
    3f0a:	d8fd      	bhi.n	3f08 <__delay>
	__asm("__delay:\n"
	      "subs r1, r1, #1\n"
	      "bhi.n __delay\n");
#endif
#endif
}
    3f0c:	bf00      	nop
    3f0e:	370c      	adds	r7, #12
    3f10:	46bd      	mov	sp, r7
    3f12:	f85d 7b04 	ldr.w	r7, [sp], #4
    3f16:	4770      	bx	lr

00003f18 <hri_nvmctrl_set_CTRLA_RWS_bf>:
	tmp = (tmp & NVMCTRL_CTRLA_PRM_Msk) >> NVMCTRL_CTRLA_PRM_Pos;
	return tmp;
}

static inline void hri_nvmctrl_set_CTRLA_RWS_bf(const void *const hw, hri_nvmctrl_ctrla_reg_t mask)
{
    3f18:	b480      	push	{r7}
    3f1a:	b083      	sub	sp, #12
    3f1c:	af00      	add	r7, sp, #0
    3f1e:	6078      	str	r0, [r7, #4]
    3f20:	460b      	mov	r3, r1
    3f22:	807b      	strh	r3, [r7, #2]
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLA.reg |= NVMCTRL_CTRLA_RWS(mask);
    3f24:	687b      	ldr	r3, [r7, #4]
    3f26:	881b      	ldrh	r3, [r3, #0]
    3f28:	b29a      	uxth	r2, r3
    3f2a:	887b      	ldrh	r3, [r7, #2]
    3f2c:	021b      	lsls	r3, r3, #8
    3f2e:	b29b      	uxth	r3, r3
    3f30:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
    3f34:	b29b      	uxth	r3, r3
    3f36:	4313      	orrs	r3, r2
    3f38:	b29a      	uxth	r2, r3
    3f3a:	687b      	ldr	r3, [r7, #4]
    3f3c:	801a      	strh	r2, [r3, #0]
	NVMCTRL_CRITICAL_SECTION_LEAVE();
}
    3f3e:	bf00      	nop
    3f40:	370c      	adds	r7, #12
    3f42:	46bd      	mov	sp, r7
    3f44:	f85d 7b04 	ldr.w	r7, [sp], #4
    3f48:	4770      	bx	lr

00003f4a <hri_port_set_EVCTRL_reg>:
{
    3f4a:	b480      	push	{r7}
    3f4c:	b085      	sub	sp, #20
    3f4e:	af00      	add	r7, sp, #0
    3f50:	60f8      	str	r0, [r7, #12]
    3f52:	460b      	mov	r3, r1
    3f54:	607a      	str	r2, [r7, #4]
    3f56:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].EVCTRL.reg |= mask;
    3f58:	7afb      	ldrb	r3, [r7, #11]
    3f5a:	7afa      	ldrb	r2, [r7, #11]
    3f5c:	68f9      	ldr	r1, [r7, #12]
    3f5e:	01d2      	lsls	r2, r2, #7
    3f60:	440a      	add	r2, r1
    3f62:	322c      	adds	r2, #44	; 0x2c
    3f64:	6811      	ldr	r1, [r2, #0]
    3f66:	687a      	ldr	r2, [r7, #4]
    3f68:	430a      	orrs	r2, r1
    3f6a:	68f9      	ldr	r1, [r7, #12]
    3f6c:	01db      	lsls	r3, r3, #7
    3f6e:	440b      	add	r3, r1
    3f70:	332c      	adds	r3, #44	; 0x2c
    3f72:	601a      	str	r2, [r3, #0]
}
    3f74:	bf00      	nop
    3f76:	3714      	adds	r7, #20
    3f78:	46bd      	mov	sp, r7
    3f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
    3f7e:	4770      	bx	lr

00003f80 <_port_event_init>:

static inline void _port_event_init()
{
    3f80:	b580      	push	{r7, lr}
    3f82:	af00      	add	r7, sp, #0
	hri_port_set_EVCTRL_reg(PORT, 0, CONF_PORTA_EVCTRL);
    3f84:	2200      	movs	r2, #0
    3f86:	2100      	movs	r1, #0
    3f88:	480a      	ldr	r0, [pc, #40]	; (3fb4 <_port_event_init+0x34>)
    3f8a:	4b0b      	ldr	r3, [pc, #44]	; (3fb8 <_port_event_init+0x38>)
    3f8c:	4798      	blx	r3
	hri_port_set_EVCTRL_reg(PORT, 1, CONF_PORTB_EVCTRL);
    3f8e:	2200      	movs	r2, #0
    3f90:	2101      	movs	r1, #1
    3f92:	4808      	ldr	r0, [pc, #32]	; (3fb4 <_port_event_init+0x34>)
    3f94:	4b08      	ldr	r3, [pc, #32]	; (3fb8 <_port_event_init+0x38>)
    3f96:	4798      	blx	r3
	hri_port_set_EVCTRL_reg(PORT, 2, CONF_PORTC_EVCTRL);
    3f98:	f64e 72ef 	movw	r2, #61423	; 0xefef
    3f9c:	2102      	movs	r1, #2
    3f9e:	4805      	ldr	r0, [pc, #20]	; (3fb4 <_port_event_init+0x34>)
    3fa0:	4b05      	ldr	r3, [pc, #20]	; (3fb8 <_port_event_init+0x38>)
    3fa2:	4798      	blx	r3
	hri_port_set_EVCTRL_reg(PORT, 3, CONF_PORTD_EVCTRL);
    3fa4:	2200      	movs	r2, #0
    3fa6:	2103      	movs	r1, #3
    3fa8:	4802      	ldr	r0, [pc, #8]	; (3fb4 <_port_event_init+0x34>)
    3faa:	4b03      	ldr	r3, [pc, #12]	; (3fb8 <_port_event_init+0x38>)
    3fac:	4798      	blx	r3
}
    3fae:	bf00      	nop
    3fb0:	bd80      	pop	{r7, pc}
    3fb2:	bf00      	nop
    3fb4:	41008000 	.word	0x41008000
    3fb8:	00003f4b 	.word	0x00003f4b

00003fbc <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
    3fbc:	b580      	push	{r7, lr}
    3fbe:	af00      	add	r7, sp, #0
	hri_nvmctrl_set_CTRLA_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);
    3fc0:	2104      	movs	r1, #4
    3fc2:	480b      	ldr	r0, [pc, #44]	; (3ff0 <_init_chip+0x34>)
    3fc4:	4b0b      	ldr	r3, [pc, #44]	; (3ff4 <_init_chip+0x38>)
    3fc6:	4798      	blx	r3

	_osc32kctrl_init_sources();
    3fc8:	4b0b      	ldr	r3, [pc, #44]	; (3ff8 <_init_chip+0x3c>)
    3fca:	4798      	blx	r3
	_oscctrl_init_sources();
    3fcc:	4b0b      	ldr	r3, [pc, #44]	; (3ffc <_init_chip+0x40>)
    3fce:	4798      	blx	r3
	_mclk_init();
    3fd0:	4b0b      	ldr	r3, [pc, #44]	; (4000 <_init_chip+0x44>)
    3fd2:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
    3fd4:	f44f 6084 	mov.w	r0, #1056	; 0x420
    3fd8:	4b0a      	ldr	r3, [pc, #40]	; (4004 <_init_chip+0x48>)
    3fda:	4798      	blx	r3
#endif
	_oscctrl_init_referenced_generators();
    3fdc:	4b0a      	ldr	r3, [pc, #40]	; (4008 <_init_chip+0x4c>)
    3fde:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
    3fe0:	f640 30df 	movw	r0, #3039	; 0xbdf
    3fe4:	4b07      	ldr	r3, [pc, #28]	; (4004 <_init_chip+0x48>)
    3fe6:	4798      	blx	r3
	hri_mclk_set_AHBMASK_DMAC_bit(MCLK);
	_dma_init();
#endif

#if (CONF_PORT_EVCTRL_PORT_0 | CONF_PORT_EVCTRL_PORT_1 | CONF_PORT_EVCTRL_PORT_2 | CONF_PORT_EVCTRL_PORT_3)
	_port_event_init();
    3fe8:	4b08      	ldr	r3, [pc, #32]	; (400c <_init_chip+0x50>)
    3fea:	4798      	blx	r3
#endif

#if CONF_CMCC_ENABLE
	cache_init();
#endif
}
    3fec:	bf00      	nop
    3fee:	bd80      	pop	{r7, pc}
    3ff0:	41004000 	.word	0x41004000
    3ff4:	00003f19 	.word	0x00003f19
    3ff8:	00004a0d 	.word	0x00004a0d
    3ffc:	00004ed5 	.word	0x00004ed5
    4000:	0000492d 	.word	0x0000492d
    4004:	000047d5 	.word	0x000047d5
    4008:	00004f15 	.word	0x00004f15
    400c:	00003f81 	.word	0x00003f81

00004010 <_crc_sync_init>:

/**
 * \brief Initialize CRC.
 */
int32_t _crc_sync_init(struct _crc_sync_device *const device, void *const hw)
{
    4010:	b480      	push	{r7}
    4012:	b083      	sub	sp, #12
    4014:	af00      	add	r7, sp, #0
    4016:	6078      	str	r0, [r7, #4]
    4018:	6039      	str	r1, [r7, #0]
	device->hw = hw;
    401a:	687b      	ldr	r3, [r7, #4]
    401c:	683a      	ldr	r2, [r7, #0]
    401e:	601a      	str	r2, [r3, #0]

	return ERR_NONE;
    4020:	2300      	movs	r3, #0
}
    4022:	4618      	mov	r0, r3
    4024:	370c      	adds	r7, #12
    4026:	46bd      	mov	sp, r7
    4028:	f85d 7b04 	ldr.w	r7, [sp], #4
    402c:	4770      	bx	lr
	...

00004030 <__NVIC_EnableIRQ>:
{
    4030:	b480      	push	{r7}
    4032:	b083      	sub	sp, #12
    4034:	af00      	add	r7, sp, #0
    4036:	4603      	mov	r3, r0
    4038:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    403a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    403e:	2b00      	cmp	r3, #0
    4040:	db0b      	blt.n	405a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    4042:	4909      	ldr	r1, [pc, #36]	; (4068 <__NVIC_EnableIRQ+0x38>)
    4044:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    4048:	095b      	lsrs	r3, r3, #5
    404a:	88fa      	ldrh	r2, [r7, #6]
    404c:	f002 021f 	and.w	r2, r2, #31
    4050:	2001      	movs	r0, #1
    4052:	fa00 f202 	lsl.w	r2, r0, r2
    4056:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    405a:	bf00      	nop
    405c:	370c      	adds	r7, #12
    405e:	46bd      	mov	sp, r7
    4060:	f85d 7b04 	ldr.w	r7, [sp], #4
    4064:	4770      	bx	lr
    4066:	bf00      	nop
    4068:	e000e100 	.word	0xe000e100

0000406c <__NVIC_DisableIRQ>:
{
    406c:	b480      	push	{r7}
    406e:	b083      	sub	sp, #12
    4070:	af00      	add	r7, sp, #0
    4072:	4603      	mov	r3, r0
    4074:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    4076:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    407a:	2b00      	cmp	r3, #0
    407c:	db10      	blt.n	40a0 <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    407e:	490b      	ldr	r1, [pc, #44]	; (40ac <__NVIC_DisableIRQ+0x40>)
    4080:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    4084:	095b      	lsrs	r3, r3, #5
    4086:	88fa      	ldrh	r2, [r7, #6]
    4088:	f002 021f 	and.w	r2, r2, #31
    408c:	2001      	movs	r0, #1
    408e:	fa00 f202 	lsl.w	r2, r0, r2
    4092:	3320      	adds	r3, #32
    4094:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    4098:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    409c:	f3bf 8f6f 	isb	sy
}
    40a0:	bf00      	nop
    40a2:	370c      	adds	r7, #12
    40a4:	46bd      	mov	sp, r7
    40a6:	f85d 7b04 	ldr.w	r7, [sp], #4
    40aa:	4770      	bx	lr
    40ac:	e000e100 	.word	0xe000e100

000040b0 <__NVIC_ClearPendingIRQ>:
{
    40b0:	b480      	push	{r7}
    40b2:	b083      	sub	sp, #12
    40b4:	af00      	add	r7, sp, #0
    40b6:	4603      	mov	r3, r0
    40b8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    40ba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    40be:	2b00      	cmp	r3, #0
    40c0:	db0c      	blt.n	40dc <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    40c2:	4909      	ldr	r1, [pc, #36]	; (40e8 <__NVIC_ClearPendingIRQ+0x38>)
    40c4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    40c8:	095b      	lsrs	r3, r3, #5
    40ca:	88fa      	ldrh	r2, [r7, #6]
    40cc:	f002 021f 	and.w	r2, r2, #31
    40d0:	2001      	movs	r0, #1
    40d2:	fa00 f202 	lsl.w	r2, r0, r2
    40d6:	3360      	adds	r3, #96	; 0x60
    40d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    40dc:	bf00      	nop
    40de:	370c      	adds	r7, #12
    40e0:	46bd      	mov	sp, r7
    40e2:	f85d 7b04 	ldr.w	r7, [sp], #4
    40e6:	4770      	bx	lr
    40e8:	e000e100 	.word	0xe000e100

000040ec <hri_eic_wait_for_sync>:
typedef uint32_t hri_eic_syncbusy_reg_t;
typedef uint8_t  hri_eic_ctrla_reg_t;
typedef uint8_t  hri_eic_nmictrl_reg_t;

static inline void hri_eic_wait_for_sync(const void *const hw, hri_eic_syncbusy_reg_t reg)
{
    40ec:	b480      	push	{r7}
    40ee:	b083      	sub	sp, #12
    40f0:	af00      	add	r7, sp, #0
    40f2:	6078      	str	r0, [r7, #4]
    40f4:	6039      	str	r1, [r7, #0]
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
    40f6:	bf00      	nop
    40f8:	687b      	ldr	r3, [r7, #4]
    40fa:	685a      	ldr	r2, [r3, #4]
    40fc:	683b      	ldr	r3, [r7, #0]
    40fe:	4013      	ands	r3, r2
    4100:	2b00      	cmp	r3, #0
    4102:	d1f9      	bne.n	40f8 <hri_eic_wait_for_sync+0xc>
	};
}
    4104:	bf00      	nop
    4106:	370c      	adds	r7, #12
    4108:	46bd      	mov	sp, r7
    410a:	f85d 7b04 	ldr.w	r7, [sp], #4
    410e:	4770      	bx	lr

00004110 <hri_eic_is_syncing>:

static inline bool hri_eic_is_syncing(const void *const hw, hri_eic_syncbusy_reg_t reg)
{
    4110:	b480      	push	{r7}
    4112:	b083      	sub	sp, #12
    4114:	af00      	add	r7, sp, #0
    4116:	6078      	str	r0, [r7, #4]
    4118:	6039      	str	r1, [r7, #0]
	return ((Eic *)hw)->SYNCBUSY.reg & reg;
    411a:	687b      	ldr	r3, [r7, #4]
    411c:	685a      	ldr	r2, [r3, #4]
    411e:	683b      	ldr	r3, [r7, #0]
    4120:	4013      	ands	r3, r2
    4122:	2b00      	cmp	r3, #0
    4124:	bf14      	ite	ne
    4126:	2301      	movne	r3, #1
    4128:	2300      	moveq	r3, #0
    412a:	b2db      	uxtb	r3, r3
}
    412c:	4618      	mov	r0, r3
    412e:	370c      	adds	r7, #12
    4130:	46bd      	mov	sp, r7
    4132:	f85d 7b04 	ldr.w	r7, [sp], #4
    4136:	4770      	bx	lr

00004138 <hri_eic_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_eic_intflag_reg_t hri_eic_read_INTFLAG_reg(const void *const hw)
{
    4138:	b480      	push	{r7}
    413a:	b083      	sub	sp, #12
    413c:	af00      	add	r7, sp, #0
    413e:	6078      	str	r0, [r7, #4]
	return ((Eic *)hw)->INTFLAG.reg;
    4140:	687b      	ldr	r3, [r7, #4]
    4142:	695b      	ldr	r3, [r3, #20]
}
    4144:	4618      	mov	r0, r3
    4146:	370c      	adds	r7, #12
    4148:	46bd      	mov	sp, r7
    414a:	f85d 7b04 	ldr.w	r7, [sp], #4
    414e:	4770      	bx	lr

00004150 <hri_eic_clear_INTFLAG_reg>:

static inline void hri_eic_clear_INTFLAG_reg(const void *const hw, hri_eic_intflag_reg_t mask)
{
    4150:	b480      	push	{r7}
    4152:	b083      	sub	sp, #12
    4154:	af00      	add	r7, sp, #0
    4156:	6078      	str	r0, [r7, #4]
    4158:	6039      	str	r1, [r7, #0]
	((Eic *)hw)->INTFLAG.reg = mask;
    415a:	687b      	ldr	r3, [r7, #4]
    415c:	683a      	ldr	r2, [r7, #0]
    415e:	615a      	str	r2, [r3, #20]
}
    4160:	bf00      	nop
    4162:	370c      	adds	r7, #12
    4164:	46bd      	mov	sp, r7
    4166:	f85d 7b04 	ldr.w	r7, [sp], #4
    416a:	4770      	bx	lr

0000416c <hri_eic_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & EIC_CTRLA_SWRST) >> EIC_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_eic_set_CTRLA_ENABLE_bit(const void *const hw)
{
    416c:	b580      	push	{r7, lr}
    416e:	b082      	sub	sp, #8
    4170:	af00      	add	r7, sp, #0
    4172:	6078      	str	r0, [r7, #4]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRLA.reg |= EIC_CTRLA_ENABLE;
    4174:	687b      	ldr	r3, [r7, #4]
    4176:	781b      	ldrb	r3, [r3, #0]
    4178:	b2db      	uxtb	r3, r3
    417a:	f043 0302 	orr.w	r3, r3, #2
    417e:	b2da      	uxtb	r2, r3
    4180:	687b      	ldr	r3, [r7, #4]
    4182:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_SWRST | EIC_SYNCBUSY_ENABLE);
    4184:	2103      	movs	r1, #3
    4186:	6878      	ldr	r0, [r7, #4]
    4188:	4b02      	ldr	r3, [pc, #8]	; (4194 <hri_eic_set_CTRLA_ENABLE_bit+0x28>)
    418a:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    418c:	bf00      	nop
    418e:	3708      	adds	r7, #8
    4190:	46bd      	mov	sp, r7
    4192:	bd80      	pop	{r7, pc}
    4194:	000040ed 	.word	0x000040ed

00004198 <hri_eic_clear_CTRLA_ENABLE_bit>:
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_SWRST | EIC_SYNCBUSY_ENABLE);
	EIC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_eic_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    4198:	b580      	push	{r7, lr}
    419a:	b082      	sub	sp, #8
    419c:	af00      	add	r7, sp, #0
    419e:	6078      	str	r0, [r7, #4]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRLA.reg &= ~EIC_CTRLA_ENABLE;
    41a0:	687b      	ldr	r3, [r7, #4]
    41a2:	781b      	ldrb	r3, [r3, #0]
    41a4:	b2db      	uxtb	r3, r3
    41a6:	f023 0302 	bic.w	r3, r3, #2
    41aa:	b2da      	uxtb	r2, r3
    41ac:	687b      	ldr	r3, [r7, #4]
    41ae:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_SWRST | EIC_SYNCBUSY_ENABLE);
    41b0:	2103      	movs	r1, #3
    41b2:	6878      	ldr	r0, [r7, #4]
    41b4:	4b02      	ldr	r3, [pc, #8]	; (41c0 <hri_eic_clear_CTRLA_ENABLE_bit+0x28>)
    41b6:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    41b8:	bf00      	nop
    41ba:	3708      	adds	r7, #8
    41bc:	46bd      	mov	sp, r7
    41be:	bd80      	pop	{r7, pc}
    41c0:	000040ed 	.word	0x000040ed

000041c4 <hri_eic_write_CTRLA_CKSEL_bit>:
	tmp = (tmp & EIC_CTRLA_CKSEL) >> EIC_CTRLA_CKSEL_Pos;
	return (bool)tmp;
}

static inline void hri_eic_write_CTRLA_CKSEL_bit(const void *const hw, bool value)
{
    41c4:	b580      	push	{r7, lr}
    41c6:	b084      	sub	sp, #16
    41c8:	af00      	add	r7, sp, #0
    41ca:	6078      	str	r0, [r7, #4]
    41cc:	460b      	mov	r3, r1
    41ce:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	EIC_CRITICAL_SECTION_ENTER();
	tmp = ((Eic *)hw)->CTRLA.reg;
    41d0:	687b      	ldr	r3, [r7, #4]
    41d2:	781b      	ldrb	r3, [r3, #0]
    41d4:	73fb      	strb	r3, [r7, #15]
	tmp &= ~EIC_CTRLA_CKSEL;
    41d6:	7bfb      	ldrb	r3, [r7, #15]
    41d8:	f023 0310 	bic.w	r3, r3, #16
    41dc:	73fb      	strb	r3, [r7, #15]
	tmp |= value << EIC_CTRLA_CKSEL_Pos;
    41de:	78fb      	ldrb	r3, [r7, #3]
    41e0:	011b      	lsls	r3, r3, #4
    41e2:	b25a      	sxtb	r2, r3
    41e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
    41e8:	4313      	orrs	r3, r2
    41ea:	b25b      	sxtb	r3, r3
    41ec:	73fb      	strb	r3, [r7, #15]
	((Eic *)hw)->CTRLA.reg = tmp;
    41ee:	687b      	ldr	r3, [r7, #4]
    41f0:	7bfa      	ldrb	r2, [r7, #15]
    41f2:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
    41f4:	2103      	movs	r1, #3
    41f6:	6878      	ldr	r0, [r7, #4]
    41f8:	4b02      	ldr	r3, [pc, #8]	; (4204 <hri_eic_write_CTRLA_CKSEL_bit+0x40>)
    41fa:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    41fc:	bf00      	nop
    41fe:	3710      	adds	r7, #16
    4200:	46bd      	mov	sp, r7
    4202:	bd80      	pop	{r7, pc}
    4204:	000040ed 	.word	0x000040ed

00004208 <hri_eic_get_CTRLA_reg>:
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
	EIC_CRITICAL_SECTION_LEAVE();
}

static inline hri_eic_ctrla_reg_t hri_eic_get_CTRLA_reg(const void *const hw, hri_eic_ctrla_reg_t mask)
{
    4208:	b580      	push	{r7, lr}
    420a:	b084      	sub	sp, #16
    420c:	af00      	add	r7, sp, #0
    420e:	6078      	str	r0, [r7, #4]
    4210:	460b      	mov	r3, r1
    4212:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
    4214:	2103      	movs	r1, #3
    4216:	6878      	ldr	r0, [r7, #4]
    4218:	4b06      	ldr	r3, [pc, #24]	; (4234 <hri_eic_get_CTRLA_reg+0x2c>)
    421a:	4798      	blx	r3
	tmp = ((Eic *)hw)->CTRLA.reg;
    421c:	687b      	ldr	r3, [r7, #4]
    421e:	781b      	ldrb	r3, [r3, #0]
    4220:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    4222:	7bfa      	ldrb	r2, [r7, #15]
    4224:	78fb      	ldrb	r3, [r7, #3]
    4226:	4013      	ands	r3, r2
    4228:	73fb      	strb	r3, [r7, #15]
	return tmp;
    422a:	7bfb      	ldrb	r3, [r7, #15]
}
    422c:	4618      	mov	r0, r3
    422e:	3710      	adds	r7, #16
    4230:	46bd      	mov	sp, r7
    4232:	bd80      	pop	{r7, pc}
    4234:	000040ed 	.word	0x000040ed

00004238 <hri_eic_write_CTRLA_reg>:

static inline void hri_eic_write_CTRLA_reg(const void *const hw, hri_eic_ctrla_reg_t data)
{
    4238:	b580      	push	{r7, lr}
    423a:	b082      	sub	sp, #8
    423c:	af00      	add	r7, sp, #0
    423e:	6078      	str	r0, [r7, #4]
    4240:	460b      	mov	r3, r1
    4242:	70fb      	strb	r3, [r7, #3]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRLA.reg = data;
    4244:	687b      	ldr	r3, [r7, #4]
    4246:	78fa      	ldrb	r2, [r7, #3]
    4248:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
    424a:	2103      	movs	r1, #3
    424c:	6878      	ldr	r0, [r7, #4]
    424e:	4b03      	ldr	r3, [pc, #12]	; (425c <hri_eic_write_CTRLA_reg+0x24>)
    4250:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    4252:	bf00      	nop
    4254:	3708      	adds	r7, #8
    4256:	46bd      	mov	sp, r7
    4258:	bd80      	pop	{r7, pc}
    425a:	bf00      	nop
    425c:	000040ed 	.word	0x000040ed

00004260 <hri_eic_write_NMICTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_NMICTRL_reg(const void *const hw, hri_eic_nmictrl_reg_t data)
{
    4260:	b480      	push	{r7}
    4262:	b083      	sub	sp, #12
    4264:	af00      	add	r7, sp, #0
    4266:	6078      	str	r0, [r7, #4]
    4268:	460b      	mov	r3, r1
    426a:	70fb      	strb	r3, [r7, #3]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->NMICTRL.reg = data;
    426c:	687b      	ldr	r3, [r7, #4]
    426e:	78fa      	ldrb	r2, [r7, #3]
    4270:	705a      	strb	r2, [r3, #1]
	EIC_CRITICAL_SECTION_LEAVE();
}
    4272:	bf00      	nop
    4274:	370c      	adds	r7, #12
    4276:	46bd      	mov	sp, r7
    4278:	f85d 7b04 	ldr.w	r7, [sp], #4
    427c:	4770      	bx	lr

0000427e <hri_eic_write_EVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_EVCTRL_reg(const void *const hw, hri_eic_evctrl_reg_t data)
{
    427e:	b480      	push	{r7}
    4280:	b083      	sub	sp, #12
    4282:	af00      	add	r7, sp, #0
    4284:	6078      	str	r0, [r7, #4]
    4286:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->EVCTRL.reg = data;
    4288:	687b      	ldr	r3, [r7, #4]
    428a:	683a      	ldr	r2, [r7, #0]
    428c:	609a      	str	r2, [r3, #8]
	EIC_CRITICAL_SECTION_LEAVE();
}
    428e:	bf00      	nop
    4290:	370c      	adds	r7, #12
    4292:	46bd      	mov	sp, r7
    4294:	f85d 7b04 	ldr.w	r7, [sp], #4
    4298:	4770      	bx	lr

0000429a <hri_eic_write_ASYNCH_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_ASYNCH_reg(const void *const hw, hri_eic_asynch_reg_t data)
{
    429a:	b480      	push	{r7}
    429c:	b083      	sub	sp, #12
    429e:	af00      	add	r7, sp, #0
    42a0:	6078      	str	r0, [r7, #4]
    42a2:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->ASYNCH.reg = data;
    42a4:	687b      	ldr	r3, [r7, #4]
    42a6:	683a      	ldr	r2, [r7, #0]
    42a8:	619a      	str	r2, [r3, #24]
	EIC_CRITICAL_SECTION_LEAVE();
}
    42aa:	bf00      	nop
    42ac:	370c      	adds	r7, #12
    42ae:	46bd      	mov	sp, r7
    42b0:	f85d 7b04 	ldr.w	r7, [sp], #4
    42b4:	4770      	bx	lr

000042b6 <hri_eic_write_CONFIG_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_CONFIG_reg(const void *const hw, uint8_t index, hri_eic_config_reg_t data)
{
    42b6:	b480      	push	{r7}
    42b8:	b085      	sub	sp, #20
    42ba:	af00      	add	r7, sp, #0
    42bc:	60f8      	str	r0, [r7, #12]
    42be:	460b      	mov	r3, r1
    42c0:	607a      	str	r2, [r7, #4]
    42c2:	72fb      	strb	r3, [r7, #11]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CONFIG[index].reg = data;
    42c4:	7afb      	ldrb	r3, [r7, #11]
    42c6:	68fa      	ldr	r2, [r7, #12]
    42c8:	3306      	adds	r3, #6
    42ca:	009b      	lsls	r3, r3, #2
    42cc:	4413      	add	r3, r2
    42ce:	687a      	ldr	r2, [r7, #4]
    42d0:	605a      	str	r2, [r3, #4]
	EIC_CRITICAL_SECTION_LEAVE();
}
    42d2:	bf00      	nop
    42d4:	3714      	adds	r7, #20
    42d6:	46bd      	mov	sp, r7
    42d8:	f85d 7b04 	ldr.w	r7, [sp], #4
    42dc:	4770      	bx	lr

000042de <hri_eic_write_DEBOUNCEN_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_DEBOUNCEN_reg(const void *const hw, hri_eic_debouncen_reg_t data)
{
    42de:	b480      	push	{r7}
    42e0:	b083      	sub	sp, #12
    42e2:	af00      	add	r7, sp, #0
    42e4:	6078      	str	r0, [r7, #4]
    42e6:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->DEBOUNCEN.reg = data;
    42e8:	687b      	ldr	r3, [r7, #4]
    42ea:	683a      	ldr	r2, [r7, #0]
    42ec:	631a      	str	r2, [r3, #48]	; 0x30
	EIC_CRITICAL_SECTION_LEAVE();
}
    42ee:	bf00      	nop
    42f0:	370c      	adds	r7, #12
    42f2:	46bd      	mov	sp, r7
    42f4:	f85d 7b04 	ldr.w	r7, [sp], #4
    42f8:	4770      	bx	lr

000042fa <hri_eic_write_DPRESCALER_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_DPRESCALER_reg(const void *const hw, hri_eic_dprescaler_reg_t data)
{
    42fa:	b480      	push	{r7}
    42fc:	b083      	sub	sp, #12
    42fe:	af00      	add	r7, sp, #0
    4300:	6078      	str	r0, [r7, #4]
    4302:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->DPRESCALER.reg = data;
    4304:	687b      	ldr	r3, [r7, #4]
    4306:	683a      	ldr	r2, [r7, #0]
    4308:	635a      	str	r2, [r3, #52]	; 0x34
	EIC_CRITICAL_SECTION_LEAVE();
}
    430a:	bf00      	nop
    430c:	370c      	adds	r7, #12
    430e:	46bd      	mov	sp, r7
    4310:	f85d 7b04 	ldr.w	r7, [sp], #4
    4314:	4770      	bx	lr
	...

00004318 <_ext_irq_init>:

/**
 * \brief Initialize external interrupt module
 */
int32_t _ext_irq_init(void (*cb)(const uint32_t pin))
{
    4318:	b580      	push	{r7, lr}
    431a:	b082      	sub	sp, #8
    431c:	af00      	add	r7, sp, #0
    431e:	6078      	str	r0, [r7, #4]
	if (!hri_eic_is_syncing(EIC, EIC_SYNCBUSY_SWRST)) {
    4320:	2101      	movs	r1, #1
    4322:	484f      	ldr	r0, [pc, #316]	; (4460 <_ext_irq_init+0x148>)
    4324:	4b4f      	ldr	r3, [pc, #316]	; (4464 <_ext_irq_init+0x14c>)
    4326:	4798      	blx	r3
    4328:	4603      	mov	r3, r0
    432a:	f083 0301 	eor.w	r3, r3, #1
    432e:	b2db      	uxtb	r3, r3
    4330:	2b00      	cmp	r3, #0
    4332:	d011      	beq.n	4358 <_ext_irq_init+0x40>
		if (hri_eic_get_CTRLA_reg(EIC, EIC_CTRLA_ENABLE)) {
    4334:	2102      	movs	r1, #2
    4336:	484a      	ldr	r0, [pc, #296]	; (4460 <_ext_irq_init+0x148>)
    4338:	4b4b      	ldr	r3, [pc, #300]	; (4468 <_ext_irq_init+0x150>)
    433a:	4798      	blx	r3
    433c:	4603      	mov	r3, r0
    433e:	2b00      	cmp	r3, #0
    4340:	d006      	beq.n	4350 <_ext_irq_init+0x38>
			hri_eic_clear_CTRLA_ENABLE_bit(EIC);
    4342:	4847      	ldr	r0, [pc, #284]	; (4460 <_ext_irq_init+0x148>)
    4344:	4b49      	ldr	r3, [pc, #292]	; (446c <_ext_irq_init+0x154>)
    4346:	4798      	blx	r3
			hri_eic_wait_for_sync(EIC, EIC_SYNCBUSY_ENABLE);
    4348:	2102      	movs	r1, #2
    434a:	4845      	ldr	r0, [pc, #276]	; (4460 <_ext_irq_init+0x148>)
    434c:	4b48      	ldr	r3, [pc, #288]	; (4470 <_ext_irq_init+0x158>)
    434e:	4798      	blx	r3
		}
		hri_eic_write_CTRLA_reg(EIC, EIC_CTRLA_SWRST);
    4350:	2101      	movs	r1, #1
    4352:	4843      	ldr	r0, [pc, #268]	; (4460 <_ext_irq_init+0x148>)
    4354:	4b47      	ldr	r3, [pc, #284]	; (4474 <_ext_irq_init+0x15c>)
    4356:	4798      	blx	r3
	}
	hri_eic_wait_for_sync(EIC, EIC_SYNCBUSY_SWRST);
    4358:	2101      	movs	r1, #1
    435a:	4841      	ldr	r0, [pc, #260]	; (4460 <_ext_irq_init+0x148>)
    435c:	4b44      	ldr	r3, [pc, #272]	; (4470 <_ext_irq_init+0x158>)
    435e:	4798      	blx	r3

	hri_eic_write_CTRLA_CKSEL_bit(EIC, CONF_EIC_CKSEL);
    4360:	2100      	movs	r1, #0
    4362:	483f      	ldr	r0, [pc, #252]	; (4460 <_ext_irq_init+0x148>)
    4364:	4b44      	ldr	r3, [pc, #272]	; (4478 <_ext_irq_init+0x160>)
    4366:	4798      	blx	r3

	hri_eic_write_NMICTRL_reg(EIC,
    4368:	2100      	movs	r1, #0
    436a:	483d      	ldr	r0, [pc, #244]	; (4460 <_ext_irq_init+0x148>)
    436c:	4b43      	ldr	r3, [pc, #268]	; (447c <_ext_irq_init+0x164>)
    436e:	4798      	blx	r3
	                          (CONF_EIC_NMIFILTEN << EIC_NMICTRL_NMIFILTEN_Pos)
	                              | EIC_NMICTRL_NMISENSE(CONF_EIC_NMISENSE) | EIC_ASYNCH_ASYNCH(CONF_EIC_NMIASYNCH)
	                              | 0);

	hri_eic_write_EVCTRL_reg(EIC,
    4370:	2100      	movs	r1, #0
    4372:	483b      	ldr	r0, [pc, #236]	; (4460 <_ext_irq_init+0x148>)
    4374:	4b42      	ldr	r3, [pc, #264]	; (4480 <_ext_irq_init+0x168>)
    4376:	4798      	blx	r3
	                             | (CONF_EIC_EXTINTEO3 << 3) | (CONF_EIC_EXTINTEO4 << 4) | (CONF_EIC_EXTINTEO5 << 5)
	                             | (CONF_EIC_EXTINTEO6 << 6) | (CONF_EIC_EXTINTEO7 << 7) | (CONF_EIC_EXTINTEO8 << 8)
	                             | (CONF_EIC_EXTINTEO9 << 9) | (CONF_EIC_EXTINTEO10 << 10) | (CONF_EIC_EXTINTEO11 << 11)
	                             | (CONF_EIC_EXTINTEO12 << 12) | (CONF_EIC_EXTINTEO13 << 13)
	                             | (CONF_EIC_EXTINTEO14 << 14) | (CONF_EIC_EXTINTEO15 << 15) | 0);
	hri_eic_write_ASYNCH_reg(EIC,
    4378:	f240 31bb 	movw	r1, #955	; 0x3bb
    437c:	4838      	ldr	r0, [pc, #224]	; (4460 <_ext_irq_init+0x148>)
    437e:	4b41      	ldr	r3, [pc, #260]	; (4484 <_ext_irq_init+0x16c>)
    4380:	4798      	blx	r3
	                             | (CONF_EIC_ASYNCH3 << 3) | (CONF_EIC_ASYNCH4 << 4) | (CONF_EIC_ASYNCH5 << 5)
	                             | (CONF_EIC_ASYNCH6 << 6) | (CONF_EIC_ASYNCH7 << 7) | (CONF_EIC_ASYNCH8 << 8)
	                             | (CONF_EIC_ASYNCH9 << 9) | (CONF_EIC_ASYNCH10 << 10) | (CONF_EIC_ASYNCH11 << 11)
	                             | (CONF_EIC_ASYNCH12 << 12) | (CONF_EIC_ASYNCH13 << 13) | (CONF_EIC_ASYNCH14 << 14)
	                             | (CONF_EIC_ASYNCH15 << 15) | 0);
	hri_eic_write_DEBOUNCEN_reg(
    4382:	f240 313b 	movw	r1, #827	; 0x33b
    4386:	4836      	ldr	r0, [pc, #216]	; (4460 <_ext_irq_init+0x148>)
    4388:	4b3f      	ldr	r3, [pc, #252]	; (4488 <_ext_irq_init+0x170>)
    438a:	4798      	blx	r3
	        | (CONF_EIC_DEBOUNCE_ENABLE6 << 6) | (CONF_EIC_DEBOUNCE_ENABLE7 << 7) | (CONF_EIC_DEBOUNCE_ENABLE8 << 8)
	        | (CONF_EIC_DEBOUNCE_ENABLE9 << 9) | (CONF_EIC_DEBOUNCE_ENABLE10 << 10) | (CONF_EIC_DEBOUNCE_ENABLE11 << 11)
	        | (CONF_EIC_DEBOUNCE_ENABLE12 << 12) | (CONF_EIC_DEBOUNCE_ENABLE13 << 13)
	        | (CONF_EIC_DEBOUNCE_ENABLE14 << 14) | (CONF_EIC_DEBOUNCE_ENABLE15 << 15) | 0);

	hri_eic_write_DPRESCALER_reg(
    438c:	2100      	movs	r1, #0
    438e:	4834      	ldr	r0, [pc, #208]	; (4460 <_ext_irq_init+0x148>)
    4390:	4b3e      	ldr	r3, [pc, #248]	; (448c <_ext_irq_init+0x174>)
    4392:	4798      	blx	r3
	    EIC,
	    (EIC_DPRESCALER_PRESCALER0(CONF_EIC_DPRESCALER0)) | (CONF_EIC_STATES0 << EIC_DPRESCALER_STATES0_Pos)
	        | (EIC_DPRESCALER_PRESCALER1(CONF_EIC_DPRESCALER1)) | (CONF_EIC_STATES1 << EIC_DPRESCALER_STATES1_Pos)
	        | CONF_EIC_TICKON << EIC_DPRESCALER_TICKON_Pos | 0);

	hri_eic_write_CONFIG_reg(EIC,
    4394:	4a3e      	ldr	r2, [pc, #248]	; (4490 <_ext_irq_init+0x178>)
    4396:	2100      	movs	r1, #0
    4398:	4831      	ldr	r0, [pc, #196]	; (4460 <_ext_irq_init+0x148>)
    439a:	4b3e      	ldr	r3, [pc, #248]	; (4494 <_ext_irq_init+0x17c>)
    439c:	4798      	blx	r3
	                             | (CONF_EIC_FILTEN5 << EIC_CONFIG_FILTEN5_Pos) | EIC_CONFIG_SENSE5(CONF_EIC_SENSE5)
	                             | (CONF_EIC_FILTEN6 << EIC_CONFIG_FILTEN6_Pos) | EIC_CONFIG_SENSE6(CONF_EIC_SENSE6)
	                             | (CONF_EIC_FILTEN7 << EIC_CONFIG_FILTEN7_Pos) | EIC_CONFIG_SENSE7(CONF_EIC_SENSE7)
	                             | 0);

	hri_eic_write_CONFIG_reg(EIC,
    439e:	2211      	movs	r2, #17
    43a0:	2101      	movs	r1, #1
    43a2:	482f      	ldr	r0, [pc, #188]	; (4460 <_ext_irq_init+0x148>)
    43a4:	4b3b      	ldr	r3, [pc, #236]	; (4494 <_ext_irq_init+0x17c>)
    43a6:	4798      	blx	r3
	                             | (CONF_EIC_FILTEN13 << EIC_CONFIG_FILTEN5_Pos) | EIC_CONFIG_SENSE5(CONF_EIC_SENSE13)
	                             | (CONF_EIC_FILTEN14 << EIC_CONFIG_FILTEN6_Pos) | EIC_CONFIG_SENSE6(CONF_EIC_SENSE14)
	                             | (CONF_EIC_FILTEN15 << EIC_CONFIG_FILTEN7_Pos) | EIC_CONFIG_SENSE7(CONF_EIC_SENSE15)
	                             | 0);

	hri_eic_set_CTRLA_ENABLE_bit(EIC);
    43a8:	482d      	ldr	r0, [pc, #180]	; (4460 <_ext_irq_init+0x148>)
    43aa:	4b3b      	ldr	r3, [pc, #236]	; (4498 <_ext_irq_init+0x180>)
    43ac:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_0_IRQn);
    43ae:	200c      	movs	r0, #12
    43b0:	4b3a      	ldr	r3, [pc, #232]	; (449c <_ext_irq_init+0x184>)
    43b2:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_0_IRQn);
    43b4:	200c      	movs	r0, #12
    43b6:	4b3a      	ldr	r3, [pc, #232]	; (44a0 <_ext_irq_init+0x188>)
    43b8:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_0_IRQn);
    43ba:	200c      	movs	r0, #12
    43bc:	4b39      	ldr	r3, [pc, #228]	; (44a4 <_ext_irq_init+0x18c>)
    43be:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_1_IRQn);
    43c0:	200d      	movs	r0, #13
    43c2:	4b36      	ldr	r3, [pc, #216]	; (449c <_ext_irq_init+0x184>)
    43c4:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_1_IRQn);
    43c6:	200d      	movs	r0, #13
    43c8:	4b35      	ldr	r3, [pc, #212]	; (44a0 <_ext_irq_init+0x188>)
    43ca:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_1_IRQn);
    43cc:	200d      	movs	r0, #13
    43ce:	4b35      	ldr	r3, [pc, #212]	; (44a4 <_ext_irq_init+0x18c>)
    43d0:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_3_IRQn);
    43d2:	200f      	movs	r0, #15
    43d4:	4b31      	ldr	r3, [pc, #196]	; (449c <_ext_irq_init+0x184>)
    43d6:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_3_IRQn);
    43d8:	200f      	movs	r0, #15
    43da:	4b31      	ldr	r3, [pc, #196]	; (44a0 <_ext_irq_init+0x188>)
    43dc:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_3_IRQn);
    43de:	200f      	movs	r0, #15
    43e0:	4b30      	ldr	r3, [pc, #192]	; (44a4 <_ext_irq_init+0x18c>)
    43e2:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_4_IRQn);
    43e4:	2010      	movs	r0, #16
    43e6:	4b2d      	ldr	r3, [pc, #180]	; (449c <_ext_irq_init+0x184>)
    43e8:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_4_IRQn);
    43ea:	2010      	movs	r0, #16
    43ec:	4b2c      	ldr	r3, [pc, #176]	; (44a0 <_ext_irq_init+0x188>)
    43ee:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_4_IRQn);
    43f0:	2010      	movs	r0, #16
    43f2:	4b2c      	ldr	r3, [pc, #176]	; (44a4 <_ext_irq_init+0x18c>)
    43f4:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_5_IRQn);
    43f6:	2011      	movs	r0, #17
    43f8:	4b28      	ldr	r3, [pc, #160]	; (449c <_ext_irq_init+0x184>)
    43fa:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_5_IRQn);
    43fc:	2011      	movs	r0, #17
    43fe:	4b28      	ldr	r3, [pc, #160]	; (44a0 <_ext_irq_init+0x188>)
    4400:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_5_IRQn);
    4402:	2011      	movs	r0, #17
    4404:	4b27      	ldr	r3, [pc, #156]	; (44a4 <_ext_irq_init+0x18c>)
    4406:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_6_IRQn);
    4408:	2012      	movs	r0, #18
    440a:	4b24      	ldr	r3, [pc, #144]	; (449c <_ext_irq_init+0x184>)
    440c:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_6_IRQn);
    440e:	2012      	movs	r0, #18
    4410:	4b23      	ldr	r3, [pc, #140]	; (44a0 <_ext_irq_init+0x188>)
    4412:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_6_IRQn);
    4414:	2012      	movs	r0, #18
    4416:	4b23      	ldr	r3, [pc, #140]	; (44a4 <_ext_irq_init+0x18c>)
    4418:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_7_IRQn);
    441a:	2013      	movs	r0, #19
    441c:	4b1f      	ldr	r3, [pc, #124]	; (449c <_ext_irq_init+0x184>)
    441e:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_7_IRQn);
    4420:	2013      	movs	r0, #19
    4422:	4b1f      	ldr	r3, [pc, #124]	; (44a0 <_ext_irq_init+0x188>)
    4424:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_7_IRQn);
    4426:	2013      	movs	r0, #19
    4428:	4b1e      	ldr	r3, [pc, #120]	; (44a4 <_ext_irq_init+0x18c>)
    442a:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_8_IRQn);
    442c:	2014      	movs	r0, #20
    442e:	4b1b      	ldr	r3, [pc, #108]	; (449c <_ext_irq_init+0x184>)
    4430:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_8_IRQn);
    4432:	2014      	movs	r0, #20
    4434:	4b1a      	ldr	r3, [pc, #104]	; (44a0 <_ext_irq_init+0x188>)
    4436:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_8_IRQn);
    4438:	2014      	movs	r0, #20
    443a:	4b1a      	ldr	r3, [pc, #104]	; (44a4 <_ext_irq_init+0x18c>)
    443c:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_9_IRQn);
    443e:	2015      	movs	r0, #21
    4440:	4b16      	ldr	r3, [pc, #88]	; (449c <_ext_irq_init+0x184>)
    4442:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_9_IRQn);
    4444:	2015      	movs	r0, #21
    4446:	4b16      	ldr	r3, [pc, #88]	; (44a0 <_ext_irq_init+0x188>)
    4448:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_9_IRQn);
    444a:	2015      	movs	r0, #21
    444c:	4b15      	ldr	r3, [pc, #84]	; (44a4 <_ext_irq_init+0x18c>)
    444e:	4798      	blx	r3

	callback = cb;
    4450:	4a15      	ldr	r2, [pc, #84]	; (44a8 <_ext_irq_init+0x190>)
    4452:	687b      	ldr	r3, [r7, #4]
    4454:	6013      	str	r3, [r2, #0]

	return ERR_NONE;
    4456:	2300      	movs	r3, #0
}
    4458:	4618      	mov	r0, r3
    445a:	3708      	adds	r7, #8
    445c:	46bd      	mov	sp, r7
    445e:	bd80      	pop	{r7, pc}
    4460:	40002800 	.word	0x40002800
    4464:	00004111 	.word	0x00004111
    4468:	00004209 	.word	0x00004209
    446c:	00004199 	.word	0x00004199
    4470:	000040ed 	.word	0x000040ed
    4474:	00004239 	.word	0x00004239
    4478:	000041c5 	.word	0x000041c5
    447c:	00004261 	.word	0x00004261
    4480:	0000427f 	.word	0x0000427f
    4484:	0000429b 	.word	0x0000429b
    4488:	000042df 	.word	0x000042df
    448c:	000042fb 	.word	0x000042fb
    4490:	90999013 	.word	0x90999013
    4494:	000042b7 	.word	0x000042b7
    4498:	0000416d 	.word	0x0000416d
    449c:	0000406d 	.word	0x0000406d
    44a0:	000040b1 	.word	0x000040b1
    44a4:	00004031 	.word	0x00004031
    44a8:	20000d30 	.word	0x20000d30

000044ac <_ext_irq_handler>:

/**
 * \brief Inter EIC interrupt handler
 */
static void _ext_irq_handler(void)
{
    44ac:	b580      	push	{r7, lr}
    44ae:	b084      	sub	sp, #16
    44b0:	af00      	add	r7, sp, #0
	volatile uint32_t flags = hri_eic_read_INTFLAG_reg(EIC);
    44b2:	4841      	ldr	r0, [pc, #260]	; (45b8 <_ext_irq_handler+0x10c>)
    44b4:	4b41      	ldr	r3, [pc, #260]	; (45bc <_ext_irq_handler+0x110>)
    44b6:	4798      	blx	r3
    44b8:	4603      	mov	r3, r0
    44ba:	603b      	str	r3, [r7, #0]
	int8_t            pos;
	uint32_t          pin = INVALID_PIN_NUMBER;
    44bc:	f04f 33ff 	mov.w	r3, #4294967295
    44c0:	60bb      	str	r3, [r7, #8]

	hri_eic_clear_INTFLAG_reg(EIC, flags);
    44c2:	683b      	ldr	r3, [r7, #0]
    44c4:	4619      	mov	r1, r3
    44c6:	483c      	ldr	r0, [pc, #240]	; (45b8 <_ext_irq_handler+0x10c>)
    44c8:	4b3d      	ldr	r3, [pc, #244]	; (45c0 <_ext_irq_handler+0x114>)
    44ca:	4798      	blx	r3

	ASSERT(callback);
    44cc:	4b3d      	ldr	r3, [pc, #244]	; (45c4 <_ext_irq_handler+0x118>)
    44ce:	681b      	ldr	r3, [r3, #0]
    44d0:	2b00      	cmp	r3, #0
    44d2:	bf14      	ite	ne
    44d4:	2301      	movne	r3, #1
    44d6:	2300      	moveq	r3, #0
    44d8:	b2db      	uxtb	r3, r3
    44da:	f44f 7284 	mov.w	r2, #264	; 0x108
    44de:	493a      	ldr	r1, [pc, #232]	; (45c8 <_ext_irq_handler+0x11c>)
    44e0:	4618      	mov	r0, r3
    44e2:	4b3a      	ldr	r3, [pc, #232]	; (45cc <_ext_irq_handler+0x120>)
    44e4:	4798      	blx	r3

	while (flags) {
    44e6:	e060      	b.n	45aa <_ext_irq_handler+0xfe>
		pos = ffs(flags) - 1;
    44e8:	683b      	ldr	r3, [r7, #0]
    44ea:	4618      	mov	r0, r3
    44ec:	4b38      	ldr	r3, [pc, #224]	; (45d0 <_ext_irq_handler+0x124>)
    44ee:	4798      	blx	r3
    44f0:	4603      	mov	r3, r0
    44f2:	b2db      	uxtb	r3, r3
    44f4:	3b01      	subs	r3, #1
    44f6:	b2db      	uxtb	r3, r3
    44f8:	73fb      	strb	r3, [r7, #15]
		while (-1 != pos) {
    44fa:	e047      	b.n	458c <_ext_irq_handler+0xe0>
			uint8_t lower = 0, middle, upper = EXT_IRQ_AMOUNT;
    44fc:	2300      	movs	r3, #0
    44fe:	71fb      	strb	r3, [r7, #7]
    4500:	2309      	movs	r3, #9
    4502:	71bb      	strb	r3, [r7, #6]

			while (upper >= lower) {
    4504:	e024      	b.n	4550 <_ext_irq_handler+0xa4>
				middle = (upper + lower) >> 1;
    4506:	79ba      	ldrb	r2, [r7, #6]
    4508:	79fb      	ldrb	r3, [r7, #7]
    450a:	4413      	add	r3, r2
    450c:	105b      	asrs	r3, r3, #1
    450e:	717b      	strb	r3, [r7, #5]
				if (_map[middle].extint == pos) {
    4510:	797b      	ldrb	r3, [r7, #5]
    4512:	4a30      	ldr	r2, [pc, #192]	; (45d4 <_ext_irq_handler+0x128>)
    4514:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
    4518:	461a      	mov	r2, r3
    451a:	f997 300f 	ldrsb.w	r3, [r7, #15]
    451e:	429a      	cmp	r2, r3
    4520:	d106      	bne.n	4530 <_ext_irq_handler+0x84>
					pin = _map[middle].pin;
    4522:	797b      	ldrb	r3, [r7, #5]
    4524:	4a2b      	ldr	r2, [pc, #172]	; (45d4 <_ext_irq_handler+0x128>)
    4526:	00db      	lsls	r3, r3, #3
    4528:	4413      	add	r3, r2
    452a:	685b      	ldr	r3, [r3, #4]
    452c:	60bb      	str	r3, [r7, #8]
					break;
    452e:	e013      	b.n	4558 <_ext_irq_handler+0xac>
				}
				if (_map[middle].extint < pos) {
    4530:	797b      	ldrb	r3, [r7, #5]
    4532:	4a28      	ldr	r2, [pc, #160]	; (45d4 <_ext_irq_handler+0x128>)
    4534:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
    4538:	461a      	mov	r2, r3
    453a:	f997 300f 	ldrsb.w	r3, [r7, #15]
    453e:	429a      	cmp	r2, r3
    4540:	da03      	bge.n	454a <_ext_irq_handler+0x9e>
					lower = middle + 1;
    4542:	797b      	ldrb	r3, [r7, #5]
    4544:	3301      	adds	r3, #1
    4546:	71fb      	strb	r3, [r7, #7]
    4548:	e002      	b.n	4550 <_ext_irq_handler+0xa4>
				} else {
					upper = middle - 1;
    454a:	797b      	ldrb	r3, [r7, #5]
    454c:	3b01      	subs	r3, #1
    454e:	71bb      	strb	r3, [r7, #6]
			while (upper >= lower) {
    4550:	79ba      	ldrb	r2, [r7, #6]
    4552:	79fb      	ldrb	r3, [r7, #7]
    4554:	429a      	cmp	r2, r3
    4556:	d2d6      	bcs.n	4506 <_ext_irq_handler+0x5a>
				}
			}

			if (INVALID_PIN_NUMBER != pin) {
    4558:	68bb      	ldr	r3, [r7, #8]
    455a:	f1b3 3fff 	cmp.w	r3, #4294967295
    455e:	d003      	beq.n	4568 <_ext_irq_handler+0xbc>
				callback(pin);
    4560:	4b18      	ldr	r3, [pc, #96]	; (45c4 <_ext_irq_handler+0x118>)
    4562:	681b      	ldr	r3, [r3, #0]
    4564:	68b8      	ldr	r0, [r7, #8]
    4566:	4798      	blx	r3
			}
			flags &= ~(1ul << pos);
    4568:	f997 300f 	ldrsb.w	r3, [r7, #15]
    456c:	2201      	movs	r2, #1
    456e:	fa02 f303 	lsl.w	r3, r2, r3
    4572:	43da      	mvns	r2, r3
    4574:	683b      	ldr	r3, [r7, #0]
    4576:	4013      	ands	r3, r2
    4578:	603b      	str	r3, [r7, #0]
			pos = ffs(flags) - 1;
    457a:	683b      	ldr	r3, [r7, #0]
    457c:	4618      	mov	r0, r3
    457e:	4b14      	ldr	r3, [pc, #80]	; (45d0 <_ext_irq_handler+0x124>)
    4580:	4798      	blx	r3
    4582:	4603      	mov	r3, r0
    4584:	b2db      	uxtb	r3, r3
    4586:	3b01      	subs	r3, #1
    4588:	b2db      	uxtb	r3, r3
    458a:	73fb      	strb	r3, [r7, #15]
		while (-1 != pos) {
    458c:	f997 300f 	ldrsb.w	r3, [r7, #15]
    4590:	f1b3 3fff 	cmp.w	r3, #4294967295
    4594:	d1b2      	bne.n	44fc <_ext_irq_handler+0x50>
		}
		flags = hri_eic_read_INTFLAG_reg(EIC);
    4596:	4808      	ldr	r0, [pc, #32]	; (45b8 <_ext_irq_handler+0x10c>)
    4598:	4b08      	ldr	r3, [pc, #32]	; (45bc <_ext_irq_handler+0x110>)
    459a:	4798      	blx	r3
    459c:	4603      	mov	r3, r0
    459e:	603b      	str	r3, [r7, #0]
		hri_eic_clear_INTFLAG_reg(EIC, flags);
    45a0:	683b      	ldr	r3, [r7, #0]
    45a2:	4619      	mov	r1, r3
    45a4:	4804      	ldr	r0, [pc, #16]	; (45b8 <_ext_irq_handler+0x10c>)
    45a6:	4b06      	ldr	r3, [pc, #24]	; (45c0 <_ext_irq_handler+0x114>)
    45a8:	4798      	blx	r3
	while (flags) {
    45aa:	683b      	ldr	r3, [r7, #0]
    45ac:	2b00      	cmp	r3, #0
    45ae:	d19b      	bne.n	44e8 <_ext_irq_handler+0x3c>
	}
}
    45b0:	bf00      	nop
    45b2:	3710      	adds	r7, #16
    45b4:	46bd      	mov	sp, r7
    45b6:	bd80      	pop	{r7, pc}
    45b8:	40002800 	.word	0x40002800
    45bc:	00004139 	.word	0x00004139
    45c0:	00004151 	.word	0x00004151
    45c4:	20000d30 	.word	0x20000d30
    45c8:	00013394 	.word	0x00013394
    45cc:	00002dc9 	.word	0x00002dc9
    45d0:	00012eb1 	.word	0x00012eb1
    45d4:	0001334c 	.word	0x0001334c

000045d8 <EIC_0_Handler>:

/**
 * \brief EIC interrupt handler
 */
void EIC_0_Handler(void)
{
    45d8:	b580      	push	{r7, lr}
    45da:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    45dc:	4b01      	ldr	r3, [pc, #4]	; (45e4 <EIC_0_Handler+0xc>)
    45de:	4798      	blx	r3
} /**
    45e0:	bf00      	nop
    45e2:	bd80      	pop	{r7, pc}
    45e4:	000044ad 	.word	0x000044ad

000045e8 <EIC_1_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_1_Handler(void)
{
    45e8:	b580      	push	{r7, lr}
    45ea:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    45ec:	4b01      	ldr	r3, [pc, #4]	; (45f4 <EIC_1_Handler+0xc>)
    45ee:	4798      	blx	r3
} /**
    45f0:	bf00      	nop
    45f2:	bd80      	pop	{r7, pc}
    45f4:	000044ad 	.word	0x000044ad

000045f8 <EIC_3_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_3_Handler(void)
{
    45f8:	b580      	push	{r7, lr}
    45fa:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    45fc:	4b01      	ldr	r3, [pc, #4]	; (4604 <EIC_3_Handler+0xc>)
    45fe:	4798      	blx	r3
} /**
    4600:	bf00      	nop
    4602:	bd80      	pop	{r7, pc}
    4604:	000044ad 	.word	0x000044ad

00004608 <EIC_4_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_4_Handler(void)
{
    4608:	b580      	push	{r7, lr}
    460a:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    460c:	4b01      	ldr	r3, [pc, #4]	; (4614 <EIC_4_Handler+0xc>)
    460e:	4798      	blx	r3
} /**
    4610:	bf00      	nop
    4612:	bd80      	pop	{r7, pc}
    4614:	000044ad 	.word	0x000044ad

00004618 <EIC_5_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_5_Handler(void)
{
    4618:	b580      	push	{r7, lr}
    461a:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    461c:	4b01      	ldr	r3, [pc, #4]	; (4624 <EIC_5_Handler+0xc>)
    461e:	4798      	blx	r3
} /**
    4620:	bf00      	nop
    4622:	bd80      	pop	{r7, pc}
    4624:	000044ad 	.word	0x000044ad

00004628 <EIC_6_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_6_Handler(void)
{
    4628:	b580      	push	{r7, lr}
    462a:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    462c:	4b01      	ldr	r3, [pc, #4]	; (4634 <EIC_6_Handler+0xc>)
    462e:	4798      	blx	r3
} /**
    4630:	bf00      	nop
    4632:	bd80      	pop	{r7, pc}
    4634:	000044ad 	.word	0x000044ad

00004638 <EIC_7_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_7_Handler(void)
{
    4638:	b580      	push	{r7, lr}
    463a:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    463c:	4b01      	ldr	r3, [pc, #4]	; (4644 <EIC_7_Handler+0xc>)
    463e:	4798      	blx	r3
} /**
    4640:	bf00      	nop
    4642:	bd80      	pop	{r7, pc}
    4644:	000044ad 	.word	0x000044ad

00004648 <EIC_8_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_8_Handler(void)
{
    4648:	b580      	push	{r7, lr}
    464a:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    464c:	4b01      	ldr	r3, [pc, #4]	; (4654 <EIC_8_Handler+0xc>)
    464e:	4798      	blx	r3
} /**
    4650:	bf00      	nop
    4652:	bd80      	pop	{r7, pc}
    4654:	000044ad 	.word	0x000044ad

00004658 <EIC_9_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_9_Handler(void)
{
    4658:	b580      	push	{r7, lr}
    465a:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    465c:	4b01      	ldr	r3, [pc, #4]	; (4664 <EIC_9_Handler+0xc>)
    465e:	4798      	blx	r3
}
    4660:	bf00      	nop
    4662:	bd80      	pop	{r7, pc}
    4664:	000044ad 	.word	0x000044ad

00004668 <hri_evsys_write_USER_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_evsys_write_USER_reg(const void *const hw, uint8_t index, hri_evsys_user_reg_t data)
{
    4668:	b480      	push	{r7}
    466a:	b085      	sub	sp, #20
    466c:	af00      	add	r7, sp, #0
    466e:	60f8      	str	r0, [r7, #12]
    4670:	460b      	mov	r3, r1
    4672:	607a      	str	r2, [r7, #4]
    4674:	72fb      	strb	r3, [r7, #11]
	EVSYS_CRITICAL_SECTION_ENTER();
	((Evsys *)hw)->USER[index].reg = data;
    4676:	7afa      	ldrb	r2, [r7, #11]
    4678:	68fb      	ldr	r3, [r7, #12]
    467a:	3248      	adds	r2, #72	; 0x48
    467c:	6879      	ldr	r1, [r7, #4]
    467e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	EVSYS_CRITICAL_SECTION_LEAVE();
}
    4682:	bf00      	nop
    4684:	3714      	adds	r7, #20
    4686:	46bd      	mov	sp, r7
    4688:	f85d 7b04 	ldr.w	r7, [sp], #4
    468c:	4770      	bx	lr

0000468e <hri_evsys_write_CHINTEN_reg>:
	return ((Evsys *)hw)->Channel[submodule_index].CHINTENSET.reg;
}

static inline void hri_evsys_write_CHINTEN_reg(const void *const hw, uint8_t submodule_index,
                                               hri_evsys_chintenset_reg_t data)
{
    468e:	b480      	push	{r7}
    4690:	b083      	sub	sp, #12
    4692:	af00      	add	r7, sp, #0
    4694:	6078      	str	r0, [r7, #4]
    4696:	460b      	mov	r3, r1
    4698:	70fb      	strb	r3, [r7, #3]
    469a:	4613      	mov	r3, r2
    469c:	70bb      	strb	r3, [r7, #2]
	((Evsys *)hw)->Channel[submodule_index].CHINTENSET.reg = data;
    469e:	78fb      	ldrb	r3, [r7, #3]
    46a0:	687a      	ldr	r2, [r7, #4]
    46a2:	3304      	adds	r3, #4
    46a4:	00db      	lsls	r3, r3, #3
    46a6:	4413      	add	r3, r2
    46a8:	78ba      	ldrb	r2, [r7, #2]
    46aa:	715a      	strb	r2, [r3, #5]
	((Evsys *)hw)->Channel[submodule_index].CHINTENCLR.reg = ~data;
    46ac:	78fb      	ldrb	r3, [r7, #3]
    46ae:	78ba      	ldrb	r2, [r7, #2]
    46b0:	43d2      	mvns	r2, r2
    46b2:	b2d1      	uxtb	r1, r2
    46b4:	687a      	ldr	r2, [r7, #4]
    46b6:	3304      	adds	r3, #4
    46b8:	00db      	lsls	r3, r3, #3
    46ba:	4413      	add	r3, r2
    46bc:	460a      	mov	r2, r1
    46be:	711a      	strb	r2, [r3, #4]
}
    46c0:	bf00      	nop
    46c2:	370c      	adds	r7, #12
    46c4:	46bd      	mov	sp, r7
    46c6:	f85d 7b04 	ldr.w	r7, [sp], #4
    46ca:	4770      	bx	lr

000046cc <hri_evsys_write_CHANNEL_reg>:
	return tmp;
}

static inline void hri_evsys_write_CHANNEL_reg(const void *const hw, uint8_t submodule_index,
                                               hri_evsys_channel_reg_t data)
{
    46cc:	b480      	push	{r7}
    46ce:	b085      	sub	sp, #20
    46d0:	af00      	add	r7, sp, #0
    46d2:	60f8      	str	r0, [r7, #12]
    46d4:	460b      	mov	r3, r1
    46d6:	607a      	str	r2, [r7, #4]
    46d8:	72fb      	strb	r3, [r7, #11]
	EVSYS_CRITICAL_SECTION_ENTER();
	((Evsys *)hw)->Channel[submodule_index].CHANNEL.reg = data;
    46da:	7afa      	ldrb	r2, [r7, #11]
    46dc:	68fb      	ldr	r3, [r7, #12]
    46de:	3204      	adds	r2, #4
    46e0:	6879      	ldr	r1, [r7, #4]
    46e2:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
	EVSYS_CRITICAL_SECTION_LEAVE();
}
    46e6:	bf00      	nop
    46e8:	3714      	adds	r7, #20
    46ea:	46bd      	mov	sp, r7
    46ec:	f85d 7b04 	ldr.w	r7, [sp], #4
    46f0:	4770      	bx	lr
	...

000046f4 <_event_system_init>:

/**
 * \brief Initialize event system
 */
int32_t _event_system_init(void)
{
    46f4:	b580      	push	{r7, lr}
    46f6:	b082      	sub	sp, #8
    46f8:	af00      	add	r7, sp, #0
	uint8_t i;
	/* configure user multiplexers */
	for (i = 0; i < EVSYS_USERS; i++) {
    46fa:	2300      	movs	r3, #0
    46fc:	71fb      	strb	r3, [r7, #7]
    46fe:	e00b      	b.n	4718 <_event_system_init+0x24>
		hri_evsys_write_USER_reg(EVSYS, i, user_mux_confs[i]);
    4700:	79fb      	ldrb	r3, [r7, #7]
    4702:	4a18      	ldr	r2, [pc, #96]	; (4764 <_event_system_init+0x70>)
    4704:	5cd3      	ldrb	r3, [r2, r3]
    4706:	461a      	mov	r2, r3
    4708:	79fb      	ldrb	r3, [r7, #7]
    470a:	4619      	mov	r1, r3
    470c:	4816      	ldr	r0, [pc, #88]	; (4768 <_event_system_init+0x74>)
    470e:	4b17      	ldr	r3, [pc, #92]	; (476c <_event_system_init+0x78>)
    4710:	4798      	blx	r3
	for (i = 0; i < EVSYS_USERS; i++) {
    4712:	79fb      	ldrb	r3, [r7, #7]
    4714:	3301      	adds	r3, #1
    4716:	71fb      	strb	r3, [r7, #7]
    4718:	79fb      	ldrb	r3, [r7, #7]
    471a:	2b42      	cmp	r3, #66	; 0x42
    471c:	d9f0      	bls.n	4700 <_event_system_init+0xc>
	}

	/* configure channels */
	for (i = 0; i < EVSYS_CHANNELS; i++) {
    471e:	2300      	movs	r3, #0
    4720:	71fb      	strb	r3, [r7, #7]
    4722:	e016      	b.n	4752 <_event_system_init+0x5e>
		hri_evsys_write_CHANNEL_reg(EVSYS, i, channel_confs[i]);
    4724:	79fb      	ldrb	r3, [r7, #7]
    4726:	4a12      	ldr	r2, [pc, #72]	; (4770 <_event_system_init+0x7c>)
    4728:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
    472c:	461a      	mov	r2, r3
    472e:	79fb      	ldrb	r3, [r7, #7]
    4730:	4619      	mov	r1, r3
    4732:	480d      	ldr	r0, [pc, #52]	; (4768 <_event_system_init+0x74>)
    4734:	4b0f      	ldr	r3, [pc, #60]	; (4774 <_event_system_init+0x80>)
    4736:	4798      	blx	r3
		hri_evsys_write_CHINTEN_reg(EVSYS, i, interrupt_cfg[i]);
    4738:	79fb      	ldrb	r3, [r7, #7]
    473a:	4a0f      	ldr	r2, [pc, #60]	; (4778 <_event_system_init+0x84>)
    473c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    4740:	b2da      	uxtb	r2, r3
    4742:	79fb      	ldrb	r3, [r7, #7]
    4744:	4619      	mov	r1, r3
    4746:	4808      	ldr	r0, [pc, #32]	; (4768 <_event_system_init+0x74>)
    4748:	4b0c      	ldr	r3, [pc, #48]	; (477c <_event_system_init+0x88>)
    474a:	4798      	blx	r3
	for (i = 0; i < EVSYS_CHANNELS; i++) {
    474c:	79fb      	ldrb	r3, [r7, #7]
    474e:	3301      	adds	r3, #1
    4750:	71fb      	strb	r3, [r7, #7]
    4752:	79fb      	ldrb	r3, [r7, #7]
    4754:	2b1f      	cmp	r3, #31
    4756:	d9e5      	bls.n	4724 <_event_system_init+0x30>
	}

	return ERR_NONE;
    4758:	2300      	movs	r3, #0
}
    475a:	4618      	mov	r0, r3
    475c:	3708      	adds	r7, #8
    475e:	46bd      	mov	sp, r7
    4760:	bd80      	pop	{r7, pc}
    4762:	bf00      	nop
    4764:	000133ac 	.word	0x000133ac
    4768:	4100e000 	.word	0x4100e000
    476c:	00004669 	.word	0x00004669
    4770:	000133f0 	.word	0x000133f0
    4774:	000046cd 	.word	0x000046cd
    4778:	00013430 	.word	0x00013430
    477c:	0000468f 	.word	0x0000468f

00004780 <hri_gclk_wait_for_sync>:
{
    4780:	b480      	push	{r7}
    4782:	b083      	sub	sp, #12
    4784:	af00      	add	r7, sp, #0
    4786:	6078      	str	r0, [r7, #4]
    4788:	6039      	str	r1, [r7, #0]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    478a:	bf00      	nop
    478c:	687b      	ldr	r3, [r7, #4]
    478e:	685a      	ldr	r2, [r3, #4]
    4790:	683b      	ldr	r3, [r7, #0]
    4792:	4013      	ands	r3, r2
    4794:	2b00      	cmp	r3, #0
    4796:	d1f9      	bne.n	478c <hri_gclk_wait_for_sync+0xc>
}
    4798:	bf00      	nop
    479a:	370c      	adds	r7, #12
    479c:	46bd      	mov	sp, r7
    479e:	f85d 7b04 	ldr.w	r7, [sp], #4
    47a2:	4770      	bx	lr

000047a4 <hri_gclk_write_GENCTRL_reg>:
{
    47a4:	b580      	push	{r7, lr}
    47a6:	b084      	sub	sp, #16
    47a8:	af00      	add	r7, sp, #0
    47aa:	60f8      	str	r0, [r7, #12]
    47ac:	460b      	mov	r3, r1
    47ae:	607a      	str	r2, [r7, #4]
    47b0:	72fb      	strb	r3, [r7, #11]
	((Gclk *)hw)->GENCTRL[index].reg = data;
    47b2:	7afa      	ldrb	r2, [r7, #11]
    47b4:	68fb      	ldr	r3, [r7, #12]
    47b6:	3208      	adds	r2, #8
    47b8:	6879      	ldr	r1, [r7, #4]
    47ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	hri_gclk_wait_for_sync(hw, GCLK_SYNCBUSY_MASK);
    47be:	f643 71fd 	movw	r1, #16381	; 0x3ffd
    47c2:	68f8      	ldr	r0, [r7, #12]
    47c4:	4b02      	ldr	r3, [pc, #8]	; (47d0 <hri_gclk_write_GENCTRL_reg+0x2c>)
    47c6:	4798      	blx	r3
}
    47c8:	bf00      	nop
    47ca:	3710      	adds	r7, #16
    47cc:	46bd      	mov	sp, r7
    47ce:	bd80      	pop	{r7, pc}
    47d0:	00004781 	.word	0x00004781

000047d4 <_gclk_init_generators_by_fref>:
	        | (CONF_GCLK_GENERATOR_11_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_11_SOURCE);
#endif
}

void _gclk_init_generators_by_fref(uint32_t bm)
{
    47d4:	b580      	push	{r7, lr}
    47d6:	b082      	sub	sp, #8
    47d8:	af00      	add	r7, sp, #0
    47da:	6078      	str	r0, [r7, #4]

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
    47dc:	687b      	ldr	r3, [r7, #4]
    47de:	f003 0301 	and.w	r3, r3, #1
    47e2:	2b00      	cmp	r3, #0
    47e4:	d004      	beq.n	47f0 <_gclk_init_generators_by_fref+0x1c>
		hri_gclk_write_GENCTRL_reg(
    47e6:	4a3b      	ldr	r2, [pc, #236]	; (48d4 <_gclk_init_generators_by_fref+0x100>)
    47e8:	2100      	movs	r1, #0
    47ea:	483b      	ldr	r0, [pc, #236]	; (48d8 <_gclk_init_generators_by_fref+0x104>)
    47ec:	4b3b      	ldr	r3, [pc, #236]	; (48dc <_gclk_init_generators_by_fref+0x108>)
    47ee:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_0_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_0_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_1_CONFIG == 1
	if (bm & (1ul << 1)) {
    47f0:	687b      	ldr	r3, [r7, #4]
    47f2:	f003 0302 	and.w	r3, r3, #2
    47f6:	2b00      	cmp	r3, #0
    47f8:	d004      	beq.n	4804 <_gclk_init_generators_by_fref+0x30>
		hri_gclk_write_GENCTRL_reg(
    47fa:	4a39      	ldr	r2, [pc, #228]	; (48e0 <_gclk_init_generators_by_fref+0x10c>)
    47fc:	2101      	movs	r1, #1
    47fe:	4836      	ldr	r0, [pc, #216]	; (48d8 <_gclk_init_generators_by_fref+0x104>)
    4800:	4b36      	ldr	r3, [pc, #216]	; (48dc <_gclk_init_generators_by_fref+0x108>)
    4802:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_1_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_1_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_2_CONFIG == 1
	if (bm & (1ul << 2)) {
    4804:	687b      	ldr	r3, [r7, #4]
    4806:	f003 0304 	and.w	r3, r3, #4
    480a:	2b00      	cmp	r3, #0
    480c:	d004      	beq.n	4818 <_gclk_init_generators_by_fref+0x44>
		hri_gclk_write_GENCTRL_reg(
    480e:	4a35      	ldr	r2, [pc, #212]	; (48e4 <_gclk_init_generators_by_fref+0x110>)
    4810:	2102      	movs	r1, #2
    4812:	4831      	ldr	r0, [pc, #196]	; (48d8 <_gclk_init_generators_by_fref+0x104>)
    4814:	4b31      	ldr	r3, [pc, #196]	; (48dc <_gclk_init_generators_by_fref+0x108>)
    4816:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_2_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_2_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_3_CONFIG == 1
	if (bm & (1ul << 3)) {
    4818:	687b      	ldr	r3, [r7, #4]
    481a:	f003 0308 	and.w	r3, r3, #8
    481e:	2b00      	cmp	r3, #0
    4820:	d004      	beq.n	482c <_gclk_init_generators_by_fref+0x58>
		hri_gclk_write_GENCTRL_reg(
    4822:	4a31      	ldr	r2, [pc, #196]	; (48e8 <_gclk_init_generators_by_fref+0x114>)
    4824:	2103      	movs	r1, #3
    4826:	482c      	ldr	r0, [pc, #176]	; (48d8 <_gclk_init_generators_by_fref+0x104>)
    4828:	4b2c      	ldr	r3, [pc, #176]	; (48dc <_gclk_init_generators_by_fref+0x108>)
    482a:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_3_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_3_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_4_CONFIG == 1
	if (bm & (1ul << 4)) {
    482c:	687b      	ldr	r3, [r7, #4]
    482e:	f003 0310 	and.w	r3, r3, #16
    4832:	2b00      	cmp	r3, #0
    4834:	d004      	beq.n	4840 <_gclk_init_generators_by_fref+0x6c>
		hri_gclk_write_GENCTRL_reg(
    4836:	4a2d      	ldr	r2, [pc, #180]	; (48ec <_gclk_init_generators_by_fref+0x118>)
    4838:	2104      	movs	r1, #4
    483a:	4827      	ldr	r0, [pc, #156]	; (48d8 <_gclk_init_generators_by_fref+0x104>)
    483c:	4b27      	ldr	r3, [pc, #156]	; (48dc <_gclk_init_generators_by_fref+0x108>)
    483e:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_4_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_4_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_5_CONFIG == 1
	if (bm & (1ul << 5)) {
    4840:	687b      	ldr	r3, [r7, #4]
    4842:	f003 0320 	and.w	r3, r3, #32
    4846:	2b00      	cmp	r3, #0
    4848:	d004      	beq.n	4854 <_gclk_init_generators_by_fref+0x80>
		hri_gclk_write_GENCTRL_reg(
    484a:	4a29      	ldr	r2, [pc, #164]	; (48f0 <_gclk_init_generators_by_fref+0x11c>)
    484c:	2105      	movs	r1, #5
    484e:	4822      	ldr	r0, [pc, #136]	; (48d8 <_gclk_init_generators_by_fref+0x104>)
    4850:	4b22      	ldr	r3, [pc, #136]	; (48dc <_gclk_init_generators_by_fref+0x108>)
    4852:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_5_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_5_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_6_CONFIG == 1
	if (bm & (1ul << 6)) {
    4854:	687b      	ldr	r3, [r7, #4]
    4856:	f003 0340 	and.w	r3, r3, #64	; 0x40
    485a:	2b00      	cmp	r3, #0
    485c:	d004      	beq.n	4868 <_gclk_init_generators_by_fref+0x94>
		hri_gclk_write_GENCTRL_reg(
    485e:	4a25      	ldr	r2, [pc, #148]	; (48f4 <_gclk_init_generators_by_fref+0x120>)
    4860:	2106      	movs	r1, #6
    4862:	481d      	ldr	r0, [pc, #116]	; (48d8 <_gclk_init_generators_by_fref+0x104>)
    4864:	4b1d      	ldr	r3, [pc, #116]	; (48dc <_gclk_init_generators_by_fref+0x108>)
    4866:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_6_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_6_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_7_CONFIG == 1
	if (bm & (1ul << 7)) {
    4868:	687b      	ldr	r3, [r7, #4]
    486a:	f003 0380 	and.w	r3, r3, #128	; 0x80
    486e:	2b00      	cmp	r3, #0
    4870:	d004      	beq.n	487c <_gclk_init_generators_by_fref+0xa8>
		hri_gclk_write_GENCTRL_reg(
    4872:	4a21      	ldr	r2, [pc, #132]	; (48f8 <_gclk_init_generators_by_fref+0x124>)
    4874:	2107      	movs	r1, #7
    4876:	4818      	ldr	r0, [pc, #96]	; (48d8 <_gclk_init_generators_by_fref+0x104>)
    4878:	4b18      	ldr	r3, [pc, #96]	; (48dc <_gclk_init_generators_by_fref+0x108>)
    487a:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_7_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_7_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_8_CONFIG == 1
	if (bm & (1ul << 8)) {
    487c:	687b      	ldr	r3, [r7, #4]
    487e:	f403 7380 	and.w	r3, r3, #256	; 0x100
    4882:	2b00      	cmp	r3, #0
    4884:	d004      	beq.n	4890 <_gclk_init_generators_by_fref+0xbc>
		hri_gclk_write_GENCTRL_reg(
    4886:	4a1d      	ldr	r2, [pc, #116]	; (48fc <_gclk_init_generators_by_fref+0x128>)
    4888:	2108      	movs	r1, #8
    488a:	4813      	ldr	r0, [pc, #76]	; (48d8 <_gclk_init_generators_by_fref+0x104>)
    488c:	4b13      	ldr	r3, [pc, #76]	; (48dc <_gclk_init_generators_by_fref+0x108>)
    488e:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_8_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_8_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_9_CONFIG == 1
	if (bm & (1ul << 9)) {
    4890:	687b      	ldr	r3, [r7, #4]
    4892:	f403 7300 	and.w	r3, r3, #512	; 0x200
    4896:	2b00      	cmp	r3, #0
    4898:	d004      	beq.n	48a4 <_gclk_init_generators_by_fref+0xd0>
		hri_gclk_write_GENCTRL_reg(
    489a:	4a19      	ldr	r2, [pc, #100]	; (4900 <_gclk_init_generators_by_fref+0x12c>)
    489c:	2109      	movs	r1, #9
    489e:	480e      	ldr	r0, [pc, #56]	; (48d8 <_gclk_init_generators_by_fref+0x104>)
    48a0:	4b0e      	ldr	r3, [pc, #56]	; (48dc <_gclk_init_generators_by_fref+0x108>)
    48a2:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_9_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_9_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_10_CONFIG == 1
	if (bm & (1ul << 10)) {
    48a4:	687b      	ldr	r3, [r7, #4]
    48a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    48aa:	2b00      	cmp	r3, #0
    48ac:	d004      	beq.n	48b8 <_gclk_init_generators_by_fref+0xe4>
		hri_gclk_write_GENCTRL_reg(
    48ae:	4a15      	ldr	r2, [pc, #84]	; (4904 <_gclk_init_generators_by_fref+0x130>)
    48b0:	210a      	movs	r1, #10
    48b2:	4809      	ldr	r0, [pc, #36]	; (48d8 <_gclk_init_generators_by_fref+0x104>)
    48b4:	4b09      	ldr	r3, [pc, #36]	; (48dc <_gclk_init_generators_by_fref+0x108>)
    48b6:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_10_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_10_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_11_CONFIG == 1
	if (bm & (1ul << 11)) {
    48b8:	687b      	ldr	r3, [r7, #4]
    48ba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
    48be:	2b00      	cmp	r3, #0
    48c0:	d004      	beq.n	48cc <_gclk_init_generators_by_fref+0xf8>
		hri_gclk_write_GENCTRL_reg(
    48c2:	4a11      	ldr	r2, [pc, #68]	; (4908 <_gclk_init_generators_by_fref+0x134>)
    48c4:	210b      	movs	r1, #11
    48c6:	4804      	ldr	r0, [pc, #16]	; (48d8 <_gclk_init_generators_by_fref+0x104>)
    48c8:	4b04      	ldr	r3, [pc, #16]	; (48dc <_gclk_init_generators_by_fref+0x108>)
    48ca:	4798      	blx	r3
		        | (CONF_GCLK_GEN_11_DIVSEL << GCLK_GENCTRL_DIVSEL_Pos) | (CONF_GCLK_GEN_11_OE << GCLK_GENCTRL_OE_Pos)
		        | (CONF_GCLK_GEN_11_OOV << GCLK_GENCTRL_OOV_Pos) | (CONF_GCLK_GEN_11_IDC << GCLK_GENCTRL_IDC_Pos)
		        | (CONF_GCLK_GENERATOR_11_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_11_SOURCE);
	}
#endif
}
    48cc:	bf00      	nop
    48ce:	3708      	adds	r7, #8
    48d0:	46bd      	mov	sp, r7
    48d2:	bd80      	pop	{r7, pc}
    48d4:	00010107 	.word	0x00010107
    48d8:	40001c00 	.word	0x40001c00
    48dc:	000047a5 	.word	0x000047a5
    48e0:	00010907 	.word	0x00010907
    48e4:	00010906 	.word	0x00010906
    48e8:	00020908 	.word	0x00020908
    48ec:	00010901 	.word	0x00010901
    48f0:	00062901 	.word	0x00062901
    48f4:	000c2901 	.word	0x000c2901
    48f8:	00082908 	.word	0x00082908
    48fc:	00032901 	.word	0x00032901
    4900:	00011908 	.word	0x00011908
    4904:	00010905 	.word	0x00010905
    4908:	00041905 	.word	0x00041905

0000490c <hri_mclk_write_CPUDIV_reg>:
{
    490c:	b480      	push	{r7}
    490e:	b083      	sub	sp, #12
    4910:	af00      	add	r7, sp, #0
    4912:	6078      	str	r0, [r7, #4]
    4914:	460b      	mov	r3, r1
    4916:	70fb      	strb	r3, [r7, #3]
	((Mclk *)hw)->CPUDIV.reg = data;
    4918:	687b      	ldr	r3, [r7, #4]
    491a:	78fa      	ldrb	r2, [r7, #3]
    491c:	715a      	strb	r2, [r3, #5]
}
    491e:	bf00      	nop
    4920:	370c      	adds	r7, #12
    4922:	46bd      	mov	sp, r7
    4924:	f85d 7b04 	ldr.w	r7, [sp], #4
    4928:	4770      	bx	lr
	...

0000492c <_mclk_init>:

/**
 * \brief Initialize master clock generator
 */
void _mclk_init(void)
{
    492c:	b580      	push	{r7, lr}
    492e:	b082      	sub	sp, #8
    4930:	af00      	add	r7, sp, #0
	void *hw = (void *)MCLK;
    4932:	4b05      	ldr	r3, [pc, #20]	; (4948 <_mclk_init+0x1c>)
    4934:	607b      	str	r3, [r7, #4]
	hri_mclk_write_CPUDIV_reg(hw, MCLK_CPUDIV_DIV(CONF_MCLK_CPUDIV));
    4936:	2101      	movs	r1, #1
    4938:	6878      	ldr	r0, [r7, #4]
    493a:	4b04      	ldr	r3, [pc, #16]	; (494c <_mclk_init+0x20>)
    493c:	4798      	blx	r3
}
    493e:	bf00      	nop
    4940:	3708      	adds	r7, #8
    4942:	46bd      	mov	sp, r7
    4944:	bd80      	pop	{r7, pc}
    4946:	bf00      	nop
    4948:	40000800 	.word	0x40000800
    494c:	0000490d 	.word	0x0000490d

00004950 <hri_osc32kctrl_write_RTCCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_RTCCTRL_reg(const void *const hw, hri_osc32kctrl_rtcctrl_reg_t data)
{
    4950:	b480      	push	{r7}
    4952:	b083      	sub	sp, #12
    4954:	af00      	add	r7, sp, #0
    4956:	6078      	str	r0, [r7, #4]
    4958:	460b      	mov	r3, r1
    495a:	70fb      	strb	r3, [r7, #3]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
    495c:	687b      	ldr	r3, [r7, #4]
    495e:	78fa      	ldrb	r2, [r7, #3]
    4960:	741a      	strb	r2, [r3, #16]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    4962:	bf00      	nop
    4964:	370c      	adds	r7, #12
    4966:	46bd      	mov	sp, r7
    4968:	f85d 7b04 	ldr.w	r7, [sp], #4
    496c:	4770      	bx	lr

0000496e <hri_osc32kctrl_write_XOSC32K_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_XOSC32K_reg(const void *const hw, hri_osc32kctrl_xosc32k_reg_t data)
{
    496e:	b480      	push	{r7}
    4970:	b083      	sub	sp, #12
    4972:	af00      	add	r7, sp, #0
    4974:	6078      	str	r0, [r7, #4]
    4976:	460b      	mov	r3, r1
    4978:	807b      	strh	r3, [r7, #2]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->XOSC32K.reg = data;
    497a:	687b      	ldr	r3, [r7, #4]
    497c:	887a      	ldrh	r2, [r7, #2]
    497e:	829a      	strh	r2, [r3, #20]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    4980:	bf00      	nop
    4982:	370c      	adds	r7, #12
    4984:	46bd      	mov	sp, r7
    4986:	f85d 7b04 	ldr.w	r7, [sp], #4
    498a:	4770      	bx	lr

0000498c <hri_osc32kctrl_write_CFDCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_CFDCTRL_reg(const void *const hw, hri_osc32kctrl_cfdctrl_reg_t data)
{
    498c:	b480      	push	{r7}
    498e:	b083      	sub	sp, #12
    4990:	af00      	add	r7, sp, #0
    4992:	6078      	str	r0, [r7, #4]
    4994:	460b      	mov	r3, r1
    4996:	70fb      	strb	r3, [r7, #3]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->CFDCTRL.reg = data;
    4998:	687b      	ldr	r3, [r7, #4]
    499a:	78fa      	ldrb	r2, [r7, #3]
    499c:	759a      	strb	r2, [r3, #22]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    499e:	bf00      	nop
    49a0:	370c      	adds	r7, #12
    49a2:	46bd      	mov	sp, r7
    49a4:	f85d 7b04 	ldr.w	r7, [sp], #4
    49a8:	4770      	bx	lr

000049aa <hri_osc32kctrl_write_EVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_EVCTRL_reg(const void *const hw, hri_osc32kctrl_evctrl_reg_t data)
{
    49aa:	b480      	push	{r7}
    49ac:	b083      	sub	sp, #12
    49ae:	af00      	add	r7, sp, #0
    49b0:	6078      	str	r0, [r7, #4]
    49b2:	460b      	mov	r3, r1
    49b4:	70fb      	strb	r3, [r7, #3]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->EVCTRL.reg = data;
    49b6:	687b      	ldr	r3, [r7, #4]
    49b8:	78fa      	ldrb	r2, [r7, #3]
    49ba:	75da      	strb	r2, [r3, #23]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    49bc:	bf00      	nop
    49be:	370c      	adds	r7, #12
    49c0:	46bd      	mov	sp, r7
    49c2:	f85d 7b04 	ldr.w	r7, [sp], #4
    49c6:	4770      	bx	lr

000049c8 <hri_osc32kctrl_read_OSCULP32K_CALIB_bf>:
	((Osc32kctrl *)hw)->OSCULP32K.reg ^= OSC32KCTRL_OSCULP32K_CALIB(mask);
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}

static inline hri_osc32kctrl_osculp32k_reg_t hri_osc32kctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
    49c8:	b480      	push	{r7}
    49ca:	b085      	sub	sp, #20
    49cc:	af00      	add	r7, sp, #0
    49ce:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Osc32kctrl *)hw)->OSCULP32K.reg;
    49d0:	687b      	ldr	r3, [r7, #4]
    49d2:	69db      	ldr	r3, [r3, #28]
    49d4:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & OSC32KCTRL_OSCULP32K_CALIB_Msk) >> OSC32KCTRL_OSCULP32K_CALIB_Pos;
    49d6:	68fb      	ldr	r3, [r7, #12]
    49d8:	0a1b      	lsrs	r3, r3, #8
    49da:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    49de:	60fb      	str	r3, [r7, #12]
	return tmp;
    49e0:	68fb      	ldr	r3, [r7, #12]
}
    49e2:	4618      	mov	r0, r3
    49e4:	3714      	adds	r7, #20
    49e6:	46bd      	mov	sp, r7
    49e8:	f85d 7b04 	ldr.w	r7, [sp], #4
    49ec:	4770      	bx	lr

000049ee <hri_osc32kctrl_write_OSCULP32K_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_OSCULP32K_reg(const void *const hw, hri_osc32kctrl_osculp32k_reg_t data)
{
    49ee:	b480      	push	{r7}
    49f0:	b083      	sub	sp, #12
    49f2:	af00      	add	r7, sp, #0
    49f4:	6078      	str	r0, [r7, #4]
    49f6:	6039      	str	r1, [r7, #0]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->OSCULP32K.reg = data;
    49f8:	687b      	ldr	r3, [r7, #4]
    49fa:	683a      	ldr	r2, [r7, #0]
    49fc:	61da      	str	r2, [r3, #28]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    49fe:	bf00      	nop
    4a00:	370c      	adds	r7, #12
    4a02:	46bd      	mov	sp, r7
    4a04:	f85d 7b04 	ldr.w	r7, [sp], #4
    4a08:	4770      	bx	lr
	...

00004a0c <_osc32kctrl_init_sources>:

/**
 * \brief Initialize 32 kHz clock sources
 */
void _osc32kctrl_init_sources(void)
{
    4a0c:	b580      	push	{r7, lr}
    4a0e:	b082      	sub	sp, #8
    4a10:	af00      	add	r7, sp, #0
	void *   hw    = (void *)OSC32KCTRL;
    4a12:	4b13      	ldr	r3, [pc, #76]	; (4a60 <_osc32kctrl_init_sources+0x54>)
    4a14:	607b      	str	r3, [r7, #4]
	uint16_t calib = 0;
    4a16:	2300      	movs	r3, #0
    4a18:	807b      	strh	r3, [r7, #2]

#if CONF_XOSC32K_CONFIG == 1
	hri_osc32kctrl_write_XOSC32K_reg(
    4a1a:	f242 018e 	movw	r1, #8334	; 0x208e
    4a1e:	6878      	ldr	r0, [r7, #4]
    4a20:	4b10      	ldr	r3, [pc, #64]	; (4a64 <_osc32kctrl_init_sources+0x58>)
    4a22:	4798      	blx	r3
#ifdef CONF_XOSC32K_CGM
	        OSC32KCTRL_XOSC32K_CGM(CONF_XOSC32K_CGM) |
#endif
	        (CONF_XOSC32K_ENABLE << OSC32KCTRL_XOSC32K_ENABLE_Pos));

	hri_osc32kctrl_write_CFDCTRL_reg(hw, (CONF_XOSC32K_CFDEN << OSC32KCTRL_CFDCTRL_CFDEN_Pos));
    4a24:	2100      	movs	r1, #0
    4a26:	6878      	ldr	r0, [r7, #4]
    4a28:	4b0f      	ldr	r3, [pc, #60]	; (4a68 <_osc32kctrl_init_sources+0x5c>)
    4a2a:	4798      	blx	r3

	hri_osc32kctrl_write_EVCTRL_reg(hw, (CONF_XOSC32K_CFDEO << OSC32KCTRL_EVCTRL_CFDEO_Pos));
    4a2c:	2100      	movs	r1, #0
    4a2e:	6878      	ldr	r0, [r7, #4]
    4a30:	4b0e      	ldr	r3, [pc, #56]	; (4a6c <_osc32kctrl_init_sources+0x60>)
    4a32:	4798      	blx	r3
#endif

#if CONF_OSCULP32K_CONFIG == 1
	calib = hri_osc32kctrl_read_OSCULP32K_CALIB_bf(hw);
    4a34:	6878      	ldr	r0, [r7, #4]
    4a36:	4b0e      	ldr	r3, [pc, #56]	; (4a70 <_osc32kctrl_init_sources+0x64>)
    4a38:	4798      	blx	r3
    4a3a:	4603      	mov	r3, r0
    4a3c:	807b      	strh	r3, [r7, #2]
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
#if CONF_OSCULP32K_CALIB_ENABLE == 1
	                                   OSC32KCTRL_OSCULP32K_CALIB(CONF_OSCULP32K_CALIB)
#else
	                                   OSC32KCTRL_OSCULP32K_CALIB(calib)
    4a3e:	887b      	ldrh	r3, [r7, #2]
    4a40:	021b      	lsls	r3, r3, #8
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
    4a42:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
    4a46:	4619      	mov	r1, r3
    4a48:	6878      	ldr	r0, [r7, #4]
    4a4a:	4b0a      	ldr	r3, [pc, #40]	; (4a74 <_osc32kctrl_init_sources+0x68>)
    4a4c:	4798      	blx	r3
	while (!hri_osc32kctrl_get_STATUS_XOSC32KRDY_bit(hw))
		;
#endif
#endif

	hri_osc32kctrl_write_RTCCTRL_reg(hw, OSC32KCTRL_RTCCTRL_RTCSEL(CONF_RTCCTRL));
    4a4e:	2100      	movs	r1, #0
    4a50:	6878      	ldr	r0, [r7, #4]
    4a52:	4b09      	ldr	r3, [pc, #36]	; (4a78 <_osc32kctrl_init_sources+0x6c>)
    4a54:	4798      	blx	r3
	(void)calib;
}
    4a56:	bf00      	nop
    4a58:	3708      	adds	r7, #8
    4a5a:	46bd      	mov	sp, r7
    4a5c:	bd80      	pop	{r7, pc}
    4a5e:	bf00      	nop
    4a60:	40001400 	.word	0x40001400
    4a64:	0000496f 	.word	0x0000496f
    4a68:	0000498d 	.word	0x0000498d
    4a6c:	000049ab 	.word	0x000049ab
    4a70:	000049c9 	.word	0x000049c9
    4a74:	000049ef 	.word	0x000049ef
    4a78:	00004951 	.word	0x00004951

00004a7c <hri_gclk_wait_for_sync>:
{
    4a7c:	b480      	push	{r7}
    4a7e:	b083      	sub	sp, #12
    4a80:	af00      	add	r7, sp, #0
    4a82:	6078      	str	r0, [r7, #4]
    4a84:	6039      	str	r1, [r7, #0]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    4a86:	bf00      	nop
    4a88:	687b      	ldr	r3, [r7, #4]
    4a8a:	685a      	ldr	r2, [r3, #4]
    4a8c:	683b      	ldr	r3, [r7, #0]
    4a8e:	4013      	ands	r3, r2
    4a90:	2b00      	cmp	r3, #0
    4a92:	d1f9      	bne.n	4a88 <hri_gclk_wait_for_sync+0xc>
}
    4a94:	bf00      	nop
    4a96:	370c      	adds	r7, #12
    4a98:	46bd      	mov	sp, r7
    4a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
    4a9e:	4770      	bx	lr

00004aa0 <hri_gclk_get_SYNCBUSY_GENCTRL0_bit>:
{
    4aa0:	b480      	push	{r7}
    4aa2:	b083      	sub	sp, #12
    4aa4:	af00      	add	r7, sp, #0
    4aa6:	6078      	str	r0, [r7, #4]
	return (((Gclk *)hw)->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL0) >> GCLK_SYNCBUSY_GENCTRL0_Pos;
    4aa8:	687b      	ldr	r3, [r7, #4]
    4aaa:	685b      	ldr	r3, [r3, #4]
    4aac:	089b      	lsrs	r3, r3, #2
    4aae:	f003 0301 	and.w	r3, r3, #1
    4ab2:	2b00      	cmp	r3, #0
    4ab4:	bf14      	ite	ne
    4ab6:	2301      	movne	r3, #1
    4ab8:	2300      	moveq	r3, #0
    4aba:	b2db      	uxtb	r3, r3
}
    4abc:	4618      	mov	r0, r3
    4abe:	370c      	adds	r7, #12
    4ac0:	46bd      	mov	sp, r7
    4ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
    4ac6:	4770      	bx	lr

00004ac8 <hri_gclk_read_SYNCBUSY_reg>:
{
    4ac8:	b480      	push	{r7}
    4aca:	b083      	sub	sp, #12
    4acc:	af00      	add	r7, sp, #0
    4ace:	6078      	str	r0, [r7, #4]
	return ((Gclk *)hw)->SYNCBUSY.reg;
    4ad0:	687b      	ldr	r3, [r7, #4]
    4ad2:	685b      	ldr	r3, [r3, #4]
}
    4ad4:	4618      	mov	r0, r3
    4ad6:	370c      	adds	r7, #12
    4ad8:	46bd      	mov	sp, r7
    4ada:	f85d 7b04 	ldr.w	r7, [sp], #4
    4ade:	4770      	bx	lr

00004ae0 <hri_gclk_write_GENCTRL_SRC_bf>:
{
    4ae0:	b580      	push	{r7, lr}
    4ae2:	b086      	sub	sp, #24
    4ae4:	af00      	add	r7, sp, #0
    4ae6:	60f8      	str	r0, [r7, #12]
    4ae8:	460b      	mov	r3, r1
    4aea:	607a      	str	r2, [r7, #4]
    4aec:	72fb      	strb	r3, [r7, #11]
	tmp = ((Gclk *)hw)->GENCTRL[index].reg;
    4aee:	7afa      	ldrb	r2, [r7, #11]
    4af0:	68fb      	ldr	r3, [r7, #12]
    4af2:	3208      	adds	r2, #8
    4af4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    4af8:	617b      	str	r3, [r7, #20]
	tmp &= ~GCLK_GENCTRL_SRC_Msk;
    4afa:	697b      	ldr	r3, [r7, #20]
    4afc:	f023 030f 	bic.w	r3, r3, #15
    4b00:	617b      	str	r3, [r7, #20]
	tmp |= GCLK_GENCTRL_SRC(data);
    4b02:	687b      	ldr	r3, [r7, #4]
    4b04:	f003 030f 	and.w	r3, r3, #15
    4b08:	697a      	ldr	r2, [r7, #20]
    4b0a:	4313      	orrs	r3, r2
    4b0c:	617b      	str	r3, [r7, #20]
	((Gclk *)hw)->GENCTRL[index].reg = tmp;
    4b0e:	7afa      	ldrb	r2, [r7, #11]
    4b10:	68fb      	ldr	r3, [r7, #12]
    4b12:	3208      	adds	r2, #8
    4b14:	6979      	ldr	r1, [r7, #20]
    4b16:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	hri_gclk_wait_for_sync(hw, GCLK_SYNCBUSY_MASK);
    4b1a:	f643 71fd 	movw	r1, #16381	; 0x3ffd
    4b1e:	68f8      	ldr	r0, [r7, #12]
    4b20:	4b02      	ldr	r3, [pc, #8]	; (4b2c <hri_gclk_write_GENCTRL_SRC_bf+0x4c>)
    4b22:	4798      	blx	r3
}
    4b24:	bf00      	nop
    4b26:	3718      	adds	r7, #24
    4b28:	46bd      	mov	sp, r7
    4b2a:	bd80      	pop	{r7, pc}
    4b2c:	00004a7d 	.word	0x00004a7d

00004b30 <hri_gclk_write_PCHCTRL_reg>:
{
    4b30:	b480      	push	{r7}
    4b32:	b085      	sub	sp, #20
    4b34:	af00      	add	r7, sp, #0
    4b36:	60f8      	str	r0, [r7, #12]
    4b38:	460b      	mov	r3, r1
    4b3a:	607a      	str	r2, [r7, #4]
    4b3c:	72fb      	strb	r3, [r7, #11]
	((Gclk *)hw)->PCHCTRL[index].reg = data;
    4b3e:	7afa      	ldrb	r2, [r7, #11]
    4b40:	68fb      	ldr	r3, [r7, #12]
    4b42:	3220      	adds	r2, #32
    4b44:	6879      	ldr	r1, [r7, #4]
    4b46:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
    4b4a:	bf00      	nop
    4b4c:	3714      	adds	r7, #20
    4b4e:	46bd      	mov	sp, r7
    4b50:	f85d 7b04 	ldr.w	r7, [sp], #4
    4b54:	4770      	bx	lr

00004b56 <hri_oscctrl_wait_for_sync>:
	return ((OscctrlDpll *)hw)->DPLLSYNCBUSY.reg & reg;
}

static inline void hri_oscctrl_wait_for_sync(const void *const hw, uint8_t submodule_index,
                                             hri_oscctrl_dpllsyncbusy_reg_t reg)
{
    4b56:	b480      	push	{r7}
    4b58:	b085      	sub	sp, #20
    4b5a:	af00      	add	r7, sp, #0
    4b5c:	60f8      	str	r0, [r7, #12]
    4b5e:	460b      	mov	r3, r1
    4b60:	607a      	str	r2, [r7, #4]
    4b62:	72fb      	strb	r3, [r7, #11]
	while (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg & reg) {
    4b64:	bf00      	nop
    4b66:	7afa      	ldrb	r2, [r7, #11]
    4b68:	68f9      	ldr	r1, [r7, #12]
    4b6a:	4613      	mov	r3, r2
    4b6c:	009b      	lsls	r3, r3, #2
    4b6e:	4413      	add	r3, r2
    4b70:	009b      	lsls	r3, r3, #2
    4b72:	440b      	add	r3, r1
    4b74:	333c      	adds	r3, #60	; 0x3c
    4b76:	681a      	ldr	r2, [r3, #0]
    4b78:	687b      	ldr	r3, [r7, #4]
    4b7a:	4013      	ands	r3, r2
    4b7c:	2b00      	cmp	r3, #0
    4b7e:	d1f2      	bne.n	4b66 <hri_oscctrl_wait_for_sync+0x10>
	};
}
    4b80:	bf00      	nop
    4b82:	3714      	adds	r7, #20
    4b84:	46bd      	mov	sp, r7
    4b86:	f85d 7b04 	ldr.w	r7, [sp], #4
    4b8a:	4770      	bx	lr

00004b8c <hri_oscctrl_get_DPLLSTATUS_LOCK_bit>:
{
	return ((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg;
}

static inline bool hri_oscctrl_get_DPLLSTATUS_LOCK_bit(const void *const hw, uint8_t submodule_index)
{
    4b8c:	b480      	push	{r7}
    4b8e:	b083      	sub	sp, #12
    4b90:	af00      	add	r7, sp, #0
    4b92:	6078      	str	r0, [r7, #4]
    4b94:	460b      	mov	r3, r1
    4b96:	70fb      	strb	r3, [r7, #3]
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_LOCK)
    4b98:	78fa      	ldrb	r2, [r7, #3]
    4b9a:	6879      	ldr	r1, [r7, #4]
    4b9c:	4613      	mov	r3, r2
    4b9e:	009b      	lsls	r3, r3, #2
    4ba0:	4413      	add	r3, r2
    4ba2:	009b      	lsls	r3, r3, #2
    4ba4:	440b      	add	r3, r1
    4ba6:	3340      	adds	r3, #64	; 0x40
    4ba8:	681b      	ldr	r3, [r3, #0]
	       >> OSCCTRL_DPLLSTATUS_LOCK_Pos;
    4baa:	f003 0301 	and.w	r3, r3, #1
    4bae:	2b00      	cmp	r3, #0
    4bb0:	bf14      	ite	ne
    4bb2:	2301      	movne	r3, #1
    4bb4:	2300      	moveq	r3, #0
    4bb6:	b2db      	uxtb	r3, r3
}
    4bb8:	4618      	mov	r0, r3
    4bba:	370c      	adds	r7, #12
    4bbc:	46bd      	mov	sp, r7
    4bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
    4bc2:	4770      	bx	lr

00004bc4 <hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit>:

static inline bool hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(const void *const hw, uint8_t submodule_index)
{
    4bc4:	b480      	push	{r7}
    4bc6:	b083      	sub	sp, #12
    4bc8:	af00      	add	r7, sp, #0
    4bca:	6078      	str	r0, [r7, #4]
    4bcc:	460b      	mov	r3, r1
    4bce:	70fb      	strb	r3, [r7, #3]
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_CLKRDY)
    4bd0:	78fa      	ldrb	r2, [r7, #3]
    4bd2:	6879      	ldr	r1, [r7, #4]
    4bd4:	4613      	mov	r3, r2
    4bd6:	009b      	lsls	r3, r3, #2
    4bd8:	4413      	add	r3, r2
    4bda:	009b      	lsls	r3, r3, #2
    4bdc:	440b      	add	r3, r1
    4bde:	3340      	adds	r3, #64	; 0x40
    4be0:	681b      	ldr	r3, [r3, #0]
	       >> OSCCTRL_DPLLSTATUS_CLKRDY_Pos;
    4be2:	085b      	lsrs	r3, r3, #1
    4be4:	f003 0301 	and.w	r3, r3, #1
    4be8:	2b00      	cmp	r3, #0
    4bea:	bf14      	ite	ne
    4bec:	2301      	movne	r3, #1
    4bee:	2300      	moveq	r3, #0
    4bf0:	b2db      	uxtb	r3, r3
}
    4bf2:	4618      	mov	r0, r3
    4bf4:	370c      	adds	r7, #12
    4bf6:	46bd      	mov	sp, r7
    4bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
    4bfc:	4770      	bx	lr
	...

00004c00 <hri_oscctrl_write_DPLLCTRLA_reg>:
	return tmp;
}

static inline void hri_oscctrl_write_DPLLCTRLA_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_oscctrl_dpllctrla_reg_t data)
{
    4c00:	b580      	push	{r7, lr}
    4c02:	b082      	sub	sp, #8
    4c04:	af00      	add	r7, sp, #0
    4c06:	6078      	str	r0, [r7, #4]
    4c08:	460b      	mov	r3, r1
    4c0a:	70fb      	strb	r3, [r7, #3]
    4c0c:	4613      	mov	r3, r2
    4c0e:	70bb      	strb	r3, [r7, #2]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLA.reg = data;
    4c10:	78fa      	ldrb	r2, [r7, #3]
    4c12:	6879      	ldr	r1, [r7, #4]
    4c14:	4613      	mov	r3, r2
    4c16:	009b      	lsls	r3, r3, #2
    4c18:	4413      	add	r3, r2
    4c1a:	009b      	lsls	r3, r3, #2
    4c1c:	440b      	add	r3, r1
    4c1e:	3330      	adds	r3, #48	; 0x30
    4c20:	78ba      	ldrb	r2, [r7, #2]
    4c22:	701a      	strb	r2, [r3, #0]
	hri_oscctrl_wait_for_sync(hw, submodule_index, OSCCTRL_DPLLSYNCBUSY_ENABLE);
    4c24:	78fb      	ldrb	r3, [r7, #3]
    4c26:	2202      	movs	r2, #2
    4c28:	4619      	mov	r1, r3
    4c2a:	6878      	ldr	r0, [r7, #4]
    4c2c:	4b02      	ldr	r3, [pc, #8]	; (4c38 <hri_oscctrl_write_DPLLCTRLA_reg+0x38>)
    4c2e:	4798      	blx	r3
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    4c30:	bf00      	nop
    4c32:	3708      	adds	r7, #8
    4c34:	46bd      	mov	sp, r7
    4c36:	bd80      	pop	{r7, pc}
    4c38:	00004b57 	.word	0x00004b57

00004c3c <hri_oscctrl_write_DPLLRATIO_reg>:
	return tmp;
}

static inline void hri_oscctrl_write_DPLLRATIO_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_oscctrl_dpllratio_reg_t data)
{
    4c3c:	b580      	push	{r7, lr}
    4c3e:	b084      	sub	sp, #16
    4c40:	af00      	add	r7, sp, #0
    4c42:	60f8      	str	r0, [r7, #12]
    4c44:	460b      	mov	r3, r1
    4c46:	607a      	str	r2, [r7, #4]
    4c48:	72fb      	strb	r3, [r7, #11]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLRATIO.reg = data;
    4c4a:	7afa      	ldrb	r2, [r7, #11]
    4c4c:	68f9      	ldr	r1, [r7, #12]
    4c4e:	4613      	mov	r3, r2
    4c50:	009b      	lsls	r3, r3, #2
    4c52:	4413      	add	r3, r2
    4c54:	009b      	lsls	r3, r3, #2
    4c56:	440b      	add	r3, r1
    4c58:	3334      	adds	r3, #52	; 0x34
    4c5a:	687a      	ldr	r2, [r7, #4]
    4c5c:	601a      	str	r2, [r3, #0]
	hri_oscctrl_wait_for_sync(hw, submodule_index, OSCCTRL_DPLLSYNCBUSY_MASK);
    4c5e:	7afb      	ldrb	r3, [r7, #11]
    4c60:	2206      	movs	r2, #6
    4c62:	4619      	mov	r1, r3
    4c64:	68f8      	ldr	r0, [r7, #12]
    4c66:	4b03      	ldr	r3, [pc, #12]	; (4c74 <hri_oscctrl_write_DPLLRATIO_reg+0x38>)
    4c68:	4798      	blx	r3
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    4c6a:	bf00      	nop
    4c6c:	3710      	adds	r7, #16
    4c6e:	46bd      	mov	sp, r7
    4c70:	bd80      	pop	{r7, pc}
    4c72:	bf00      	nop
    4c74:	00004b57 	.word	0x00004b57

00004c78 <hri_oscctrl_write_DPLLCTRLB_reg>:
	return tmp;
}

static inline void hri_oscctrl_write_DPLLCTRLB_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_oscctrl_dpllctrlb_reg_t data)
{
    4c78:	b480      	push	{r7}
    4c7a:	b085      	sub	sp, #20
    4c7c:	af00      	add	r7, sp, #0
    4c7e:	60f8      	str	r0, [r7, #12]
    4c80:	460b      	mov	r3, r1
    4c82:	607a      	str	r2, [r7, #4]
    4c84:	72fb      	strb	r3, [r7, #11]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLB.reg = data;
    4c86:	7afa      	ldrb	r2, [r7, #11]
    4c88:	68f9      	ldr	r1, [r7, #12]
    4c8a:	4613      	mov	r3, r2
    4c8c:	009b      	lsls	r3, r3, #2
    4c8e:	4413      	add	r3, r2
    4c90:	009b      	lsls	r3, r3, #2
    4c92:	440b      	add	r3, r1
    4c94:	3338      	adds	r3, #56	; 0x38
    4c96:	687a      	ldr	r2, [r7, #4]
    4c98:	601a      	str	r2, [r3, #0]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    4c9a:	bf00      	nop
    4c9c:	3714      	adds	r7, #20
    4c9e:	46bd      	mov	sp, r7
    4ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
    4ca4:	4770      	bx	lr

00004ca6 <hri_oscctrl_get_STATUS_XOSCRDY1_bit>:
{
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCRDY0) >> OSCCTRL_STATUS_XOSCRDY0_Pos;
}

static inline bool hri_oscctrl_get_STATUS_XOSCRDY1_bit(const void *const hw)
{
    4ca6:	b480      	push	{r7}
    4ca8:	b083      	sub	sp, #12
    4caa:	af00      	add	r7, sp, #0
    4cac:	6078      	str	r0, [r7, #4]
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCRDY1) >> OSCCTRL_STATUS_XOSCRDY1_Pos;
    4cae:	687b      	ldr	r3, [r7, #4]
    4cb0:	691b      	ldr	r3, [r3, #16]
    4cb2:	085b      	lsrs	r3, r3, #1
    4cb4:	f003 0301 	and.w	r3, r3, #1
    4cb8:	2b00      	cmp	r3, #0
    4cba:	bf14      	ite	ne
    4cbc:	2301      	movne	r3, #1
    4cbe:	2300      	moveq	r3, #0
    4cc0:	b2db      	uxtb	r3, r3
}
    4cc2:	4618      	mov	r0, r3
    4cc4:	370c      	adds	r7, #12
    4cc6:	46bd      	mov	sp, r7
    4cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
    4ccc:	4770      	bx	lr

00004cce <hri_oscctrl_get_STATUS_DFLLRDY_bit>:
{
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCCKSW1) >> OSCCTRL_STATUS_XOSCCKSW1_Pos;
}

static inline bool hri_oscctrl_get_STATUS_DFLLRDY_bit(const void *const hw)
{
    4cce:	b480      	push	{r7}
    4cd0:	b083      	sub	sp, #12
    4cd2:	af00      	add	r7, sp, #0
    4cd4:	6078      	str	r0, [r7, #4]
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_DFLLRDY) >> OSCCTRL_STATUS_DFLLRDY_Pos;
    4cd6:	687b      	ldr	r3, [r7, #4]
    4cd8:	691b      	ldr	r3, [r3, #16]
    4cda:	0a1b      	lsrs	r3, r3, #8
    4cdc:	f003 0301 	and.w	r3, r3, #1
    4ce0:	2b00      	cmp	r3, #0
    4ce2:	bf14      	ite	ne
    4ce4:	2301      	movne	r3, #1
    4ce6:	2300      	moveq	r3, #0
    4ce8:	b2db      	uxtb	r3, r3
}
    4cea:	4618      	mov	r0, r3
    4cec:	370c      	adds	r7, #12
    4cee:	46bd      	mov	sp, r7
    4cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
    4cf4:	4770      	bx	lr

00004cf6 <hri_oscctrl_get_STATUS_reg>:
{
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_DPLL1LDRTO) >> OSCCTRL_STATUS_DPLL1LDRTO_Pos;
}

static inline hri_oscctrl_status_reg_t hri_oscctrl_get_STATUS_reg(const void *const hw, hri_oscctrl_status_reg_t mask)
{
    4cf6:	b480      	push	{r7}
    4cf8:	b085      	sub	sp, #20
    4cfa:	af00      	add	r7, sp, #0
    4cfc:	6078      	str	r0, [r7, #4]
    4cfe:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    4d00:	687b      	ldr	r3, [r7, #4]
    4d02:	691b      	ldr	r3, [r3, #16]
    4d04:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    4d06:	68fa      	ldr	r2, [r7, #12]
    4d08:	683b      	ldr	r3, [r7, #0]
    4d0a:	4013      	ands	r3, r2
    4d0c:	60fb      	str	r3, [r7, #12]
	return tmp;
    4d0e:	68fb      	ldr	r3, [r7, #12]
}
    4d10:	4618      	mov	r0, r3
    4d12:	3714      	adds	r7, #20
    4d14:	46bd      	mov	sp, r7
    4d16:	f85d 7b04 	ldr.w	r7, [sp], #4
    4d1a:	4770      	bx	lr

00004d1c <hri_oscctrl_write_XOSCCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_XOSCCTRL_reg(const void *const hw, uint8_t index, hri_oscctrl_xoscctrl_reg_t data)
{
    4d1c:	b480      	push	{r7}
    4d1e:	b085      	sub	sp, #20
    4d20:	af00      	add	r7, sp, #0
    4d22:	60f8      	str	r0, [r7, #12]
    4d24:	460b      	mov	r3, r1
    4d26:	607a      	str	r2, [r7, #4]
    4d28:	72fb      	strb	r3, [r7, #11]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->XOSCCTRL[index].reg = data;
    4d2a:	7afb      	ldrb	r3, [r7, #11]
    4d2c:	68fa      	ldr	r2, [r7, #12]
    4d2e:	3304      	adds	r3, #4
    4d30:	009b      	lsls	r3, r3, #2
    4d32:	4413      	add	r3, r2
    4d34:	687a      	ldr	r2, [r7, #4]
    4d36:	605a      	str	r2, [r3, #4]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    4d38:	bf00      	nop
    4d3a:	3714      	adds	r7, #20
    4d3c:	46bd      	mov	sp, r7
    4d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
    4d42:	4770      	bx	lr

00004d44 <hri_oscctrl_write_DFLLCTRLA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_DFLLCTRLA_reg(const void *const hw, hri_oscctrl_dfllctrla_reg_t data)
{
    4d44:	b480      	push	{r7}
    4d46:	b083      	sub	sp, #12
    4d48:	af00      	add	r7, sp, #0
    4d4a:	6078      	str	r0, [r7, #4]
    4d4c:	460b      	mov	r3, r1
    4d4e:	70fb      	strb	r3, [r7, #3]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLCTRLA.reg = data;
    4d50:	687b      	ldr	r3, [r7, #4]
    4d52:	78fa      	ldrb	r2, [r7, #3]
    4d54:	771a      	strb	r2, [r3, #28]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    4d56:	bf00      	nop
    4d58:	370c      	adds	r7, #12
    4d5a:	46bd      	mov	sp, r7
    4d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
    4d60:	4770      	bx	lr

00004d62 <hri_oscctrl_get_DFLLCTRLB_MODE_bit>:
	((Oscctrl *)hw)->DFLLCTRLB.reg |= OSCCTRL_DFLLCTRLB_MODE;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLCTRLB_MODE_bit(const void *const hw)
{
    4d62:	b480      	push	{r7}
    4d64:	b085      	sub	sp, #20
    4d66:	af00      	add	r7, sp, #0
    4d68:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
    4d6a:	687b      	ldr	r3, [r7, #4]
    4d6c:	f893 3020 	ldrb.w	r3, [r3, #32]
    4d70:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLCTRLB_MODE) >> OSCCTRL_DFLLCTRLB_MODE_Pos;
    4d72:	7bfb      	ldrb	r3, [r7, #15]
    4d74:	f003 0301 	and.w	r3, r3, #1
    4d78:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    4d7a:	7bfb      	ldrb	r3, [r7, #15]
    4d7c:	2b00      	cmp	r3, #0
    4d7e:	bf14      	ite	ne
    4d80:	2301      	movne	r3, #1
    4d82:	2300      	moveq	r3, #0
    4d84:	b2db      	uxtb	r3, r3
}
    4d86:	4618      	mov	r0, r3
    4d88:	3714      	adds	r7, #20
    4d8a:	46bd      	mov	sp, r7
    4d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
    4d90:	4770      	bx	lr

00004d92 <hri_oscctrl_write_DFLLCTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_DFLLCTRLB_reg(const void *const hw, hri_oscctrl_dfllctrlb_reg_t data)
{
    4d92:	b480      	push	{r7}
    4d94:	b083      	sub	sp, #12
    4d96:	af00      	add	r7, sp, #0
    4d98:	6078      	str	r0, [r7, #4]
    4d9a:	460b      	mov	r3, r1
    4d9c:	70fb      	strb	r3, [r7, #3]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLCTRLB.reg = data;
    4d9e:	687b      	ldr	r3, [r7, #4]
    4da0:	78fa      	ldrb	r2, [r7, #3]
    4da2:	f883 2020 	strb.w	r2, [r3, #32]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    4da6:	bf00      	nop
    4da8:	370c      	adds	r7, #12
    4daa:	46bd      	mov	sp, r7
    4dac:	f85d 7b04 	ldr.w	r7, [sp], #4
    4db0:	4770      	bx	lr

00004db2 <hri_oscctrl_write_DFLLVAL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_DFLLVAL_reg(const void *const hw, hri_oscctrl_dfllval_reg_t data)
{
    4db2:	b480      	push	{r7}
    4db4:	b083      	sub	sp, #12
    4db6:	af00      	add	r7, sp, #0
    4db8:	6078      	str	r0, [r7, #4]
    4dba:	6039      	str	r1, [r7, #0]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLVAL.reg = data;
    4dbc:	687b      	ldr	r3, [r7, #4]
    4dbe:	683a      	ldr	r2, [r7, #0]
    4dc0:	625a      	str	r2, [r3, #36]	; 0x24
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    4dc2:	bf00      	nop
    4dc4:	370c      	adds	r7, #12
    4dc6:	46bd      	mov	sp, r7
    4dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
    4dcc:	4770      	bx	lr

00004dce <hri_oscctrl_read_DFLLVAL_reg>:
	((Oscctrl *)hw)->DFLLVAL.reg ^= mask;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline hri_oscctrl_dfllval_reg_t hri_oscctrl_read_DFLLVAL_reg(const void *const hw)
{
    4dce:	b480      	push	{r7}
    4dd0:	b083      	sub	sp, #12
    4dd2:	af00      	add	r7, sp, #0
    4dd4:	6078      	str	r0, [r7, #4]
	return ((Oscctrl *)hw)->DFLLVAL.reg;
    4dd6:	687b      	ldr	r3, [r7, #4]
    4dd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
    4dda:	4618      	mov	r0, r3
    4ddc:	370c      	adds	r7, #12
    4dde:	46bd      	mov	sp, r7
    4de0:	f85d 7b04 	ldr.w	r7, [sp], #4
    4de4:	4770      	bx	lr

00004de6 <hri_oscctrl_write_DFLLMUL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_DFLLMUL_reg(const void *const hw, hri_oscctrl_dfllmul_reg_t data)
{
    4de6:	b480      	push	{r7}
    4de8:	b083      	sub	sp, #12
    4dea:	af00      	add	r7, sp, #0
    4dec:	6078      	str	r0, [r7, #4]
    4dee:	6039      	str	r1, [r7, #0]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLMUL.reg = data;
    4df0:	687b      	ldr	r3, [r7, #4]
    4df2:	683a      	ldr	r2, [r7, #0]
    4df4:	629a      	str	r2, [r3, #40]	; 0x28
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    4df6:	bf00      	nop
    4df8:	370c      	adds	r7, #12
    4dfa:	46bd      	mov	sp, r7
    4dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
    4e00:	4770      	bx	lr

00004e02 <hri_oscctrl_get_DFLLSYNC_ENABLE_bit>:
	((Oscctrl *)hw)->DFLLSYNC.reg |= OSCCTRL_DFLLSYNC_ENABLE;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLSYNC_ENABLE_bit(const void *const hw)
{
    4e02:	b480      	push	{r7}
    4e04:	b085      	sub	sp, #20
    4e06:	af00      	add	r7, sp, #0
    4e08:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    4e0a:	687b      	ldr	r3, [r7, #4]
    4e0c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    4e10:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLSYNC_ENABLE) >> OSCCTRL_DFLLSYNC_ENABLE_Pos;
    4e12:	7bfb      	ldrb	r3, [r7, #15]
    4e14:	085b      	lsrs	r3, r3, #1
    4e16:	b2db      	uxtb	r3, r3
    4e18:	f003 0301 	and.w	r3, r3, #1
    4e1c:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    4e1e:	7bfb      	ldrb	r3, [r7, #15]
    4e20:	2b00      	cmp	r3, #0
    4e22:	bf14      	ite	ne
    4e24:	2301      	movne	r3, #1
    4e26:	2300      	moveq	r3, #0
    4e28:	b2db      	uxtb	r3, r3
}
    4e2a:	4618      	mov	r0, r3
    4e2c:	3714      	adds	r7, #20
    4e2e:	46bd      	mov	sp, r7
    4e30:	f85d 7b04 	ldr.w	r7, [sp], #4
    4e34:	4770      	bx	lr

00004e36 <hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit>:
	((Oscctrl *)hw)->DFLLSYNC.reg |= OSCCTRL_DFLLSYNC_DFLLCTRLB;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(const void *const hw)
{
    4e36:	b480      	push	{r7}
    4e38:	b085      	sub	sp, #20
    4e3a:	af00      	add	r7, sp, #0
    4e3c:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    4e3e:	687b      	ldr	r3, [r7, #4]
    4e40:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    4e44:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLSYNC_DFLLCTRLB) >> OSCCTRL_DFLLSYNC_DFLLCTRLB_Pos;
    4e46:	7bfb      	ldrb	r3, [r7, #15]
    4e48:	089b      	lsrs	r3, r3, #2
    4e4a:	b2db      	uxtb	r3, r3
    4e4c:	f003 0301 	and.w	r3, r3, #1
    4e50:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    4e52:	7bfb      	ldrb	r3, [r7, #15]
    4e54:	2b00      	cmp	r3, #0
    4e56:	bf14      	ite	ne
    4e58:	2301      	movne	r3, #1
    4e5a:	2300      	moveq	r3, #0
    4e5c:	b2db      	uxtb	r3, r3
}
    4e5e:	4618      	mov	r0, r3
    4e60:	3714      	adds	r7, #20
    4e62:	46bd      	mov	sp, r7
    4e64:	f85d 7b04 	ldr.w	r7, [sp], #4
    4e68:	4770      	bx	lr

00004e6a <hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit>:
	((Oscctrl *)hw)->DFLLSYNC.reg |= OSCCTRL_DFLLSYNC_DFLLVAL;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit(const void *const hw)
{
    4e6a:	b480      	push	{r7}
    4e6c:	b085      	sub	sp, #20
    4e6e:	af00      	add	r7, sp, #0
    4e70:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    4e72:	687b      	ldr	r3, [r7, #4]
    4e74:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    4e78:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLSYNC_DFLLVAL) >> OSCCTRL_DFLLSYNC_DFLLVAL_Pos;
    4e7a:	7bfb      	ldrb	r3, [r7, #15]
    4e7c:	08db      	lsrs	r3, r3, #3
    4e7e:	b2db      	uxtb	r3, r3
    4e80:	f003 0301 	and.w	r3, r3, #1
    4e84:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    4e86:	7bfb      	ldrb	r3, [r7, #15]
    4e88:	2b00      	cmp	r3, #0
    4e8a:	bf14      	ite	ne
    4e8c:	2301      	movne	r3, #1
    4e8e:	2300      	moveq	r3, #0
    4e90:	b2db      	uxtb	r3, r3
}
    4e92:	4618      	mov	r0, r3
    4e94:	3714      	adds	r7, #20
    4e96:	46bd      	mov	sp, r7
    4e98:	f85d 7b04 	ldr.w	r7, [sp], #4
    4e9c:	4770      	bx	lr

00004e9e <hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit>:
	((Oscctrl *)hw)->DFLLSYNC.reg |= OSCCTRL_DFLLSYNC_DFLLMUL;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(const void *const hw)
{
    4e9e:	b480      	push	{r7}
    4ea0:	b085      	sub	sp, #20
    4ea2:	af00      	add	r7, sp, #0
    4ea4:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    4ea6:	687b      	ldr	r3, [r7, #4]
    4ea8:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    4eac:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLSYNC_DFLLMUL) >> OSCCTRL_DFLLSYNC_DFLLMUL_Pos;
    4eae:	7bfb      	ldrb	r3, [r7, #15]
    4eb0:	091b      	lsrs	r3, r3, #4
    4eb2:	b2db      	uxtb	r3, r3
    4eb4:	f003 0301 	and.w	r3, r3, #1
    4eb8:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    4eba:	7bfb      	ldrb	r3, [r7, #15]
    4ebc:	2b00      	cmp	r3, #0
    4ebe:	bf14      	ite	ne
    4ec0:	2301      	movne	r3, #1
    4ec2:	2300      	moveq	r3, #0
    4ec4:	b2db      	uxtb	r3, r3
}
    4ec6:	4618      	mov	r0, r3
    4ec8:	3714      	adds	r7, #20
    4eca:	46bd      	mov	sp, r7
    4ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
    4ed0:	4770      	bx	lr
	...

00004ed4 <_oscctrl_init_sources>:

/**
 * \brief Initialize clock sources
 */
void _oscctrl_init_sources(void)
{
    4ed4:	b580      	push	{r7, lr}
    4ed6:	b082      	sub	sp, #8
    4ed8:	af00      	add	r7, sp, #0
	void *hw = (void *)OSCCTRL;
    4eda:	4b0a      	ldr	r3, [pc, #40]	; (4f04 <_oscctrl_init_sources+0x30>)
    4edc:	607b      	str	r3, [r7, #4]
	hri_oscctrl_set_XOSCCTRL_ONDEMAND_bit(hw, 0);
#endif
#endif

#if CONF_XOSC1_CONFIG == 1
	hri_oscctrl_write_XOSCCTRL_reg(
    4ede:	4a0a      	ldr	r2, [pc, #40]	; (4f08 <_oscctrl_init_sources+0x34>)
    4ee0:	2101      	movs	r1, #1
    4ee2:	6878      	ldr	r0, [r7, #4]
    4ee4:	4b09      	ldr	r3, [pc, #36]	; (4f0c <_oscctrl_init_sources+0x38>)
    4ee6:	4798      	blx	r3
	        | (CONF_XOSC1_XTALEN << OSCCTRL_XOSCCTRL_XTALEN_Pos) | (CONF_XOSC1_ENABLE << OSCCTRL_XOSCCTRL_ENABLE_Pos));
#endif

#if CONF_XOSC1_CONFIG == 1
#if CONF_XOSC1_ENABLE == 1
	while (!hri_oscctrl_get_STATUS_XOSCRDY1_bit(hw))
    4ee8:	bf00      	nop
    4eea:	6878      	ldr	r0, [r7, #4]
    4eec:	4b08      	ldr	r3, [pc, #32]	; (4f10 <_oscctrl_init_sources+0x3c>)
    4eee:	4798      	blx	r3
    4ef0:	4603      	mov	r3, r0
    4ef2:	f083 0301 	eor.w	r3, r3, #1
    4ef6:	b2db      	uxtb	r3, r3
    4ef8:	2b00      	cmp	r3, #0
    4efa:	d1f6      	bne.n	4eea <_oscctrl_init_sources+0x16>
	hri_oscctrl_set_XOSCCTRL_ONDEMAND_bit(hw, 1);
#endif
#endif

	(void)hw;
}
    4efc:	bf00      	nop
    4efe:	3708      	adds	r7, #8
    4f00:	46bd      	mov	sp, r7
    4f02:	bd80      	pop	{r7, pc}
    4f04:	40001000 	.word	0x40001000
    4f08:	03002646 	.word	0x03002646
    4f0c:	00004d1d 	.word	0x00004d1d
    4f10:	00004ca7 	.word	0x00004ca7

00004f14 <_oscctrl_init_referenced_generators>:

void _oscctrl_init_referenced_generators(void)
{
    4f14:	b580      	push	{r7, lr}
    4f16:	b084      	sub	sp, #16
    4f18:	af00      	add	r7, sp, #0
	void *hw = (void *)OSCCTRL;
    4f1a:	4b6b      	ldr	r3, [pc, #428]	; (50c8 <_oscctrl_init_referenced_generators+0x1b4>)
    4f1c:	60fb      	str	r3, [r7, #12]

#if CONF_DFLL_CONFIG == 1
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, GCLK_GENCTRL_SRC_OSCULP32K);
    4f1e:	2204      	movs	r2, #4
    4f20:	2100      	movs	r1, #0
    4f22:	486a      	ldr	r0, [pc, #424]	; (50cc <_oscctrl_init_referenced_generators+0x1b8>)
    4f24:	4b6a      	ldr	r3, [pc, #424]	; (50d0 <_oscctrl_init_referenced_generators+0x1bc>)
    4f26:	4798      	blx	r3
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
    4f28:	bf00      	nop
    4f2a:	4868      	ldr	r0, [pc, #416]	; (50cc <_oscctrl_init_referenced_generators+0x1b8>)
    4f2c:	4b69      	ldr	r3, [pc, #420]	; (50d4 <_oscctrl_init_referenced_generators+0x1c0>)
    4f2e:	4798      	blx	r3
    4f30:	4603      	mov	r3, r0
    4f32:	2b00      	cmp	r3, #0
    4f34:	d1f9      	bne.n	4f2a <_oscctrl_init_referenced_generators+0x16>
		;
	uint8_t tmp;
	hri_oscctrl_write_DFLLCTRLA_reg(hw, 0);
    4f36:	2100      	movs	r1, #0
    4f38:	68f8      	ldr	r0, [r7, #12]
    4f3a:	4b67      	ldr	r3, [pc, #412]	; (50d8 <_oscctrl_init_referenced_generators+0x1c4>)
    4f3c:	4798      	blx	r3
#if CONF_DFLL_USBCRM != 1 && CONF_DFLL_MODE != 0
	hri_gclk_write_PCHCTRL_reg(
	    GCLK, OSCCTRL_GCLK_ID_DFLL48, (1 << GCLK_PCHCTRL_CHEN_Pos) | GCLK_PCHCTRL_GEN(CONF_DFLL_GCLK));
#endif

	hri_oscctrl_write_DFLLMUL_reg(hw,
    4f3e:	4967      	ldr	r1, [pc, #412]	; (50dc <_oscctrl_init_referenced_generators+0x1c8>)
    4f40:	68f8      	ldr	r0, [r7, #12]
    4f42:	4b67      	ldr	r3, [pc, #412]	; (50e0 <_oscctrl_init_referenced_generators+0x1cc>)
    4f44:	4798      	blx	r3
	                              OSCCTRL_DFLLMUL_CSTEP(CONF_DFLL_CSTEP) | OSCCTRL_DFLLMUL_FSTEP(CONF_DFLL_FSTEP)
	                                  | OSCCTRL_DFLLMUL_MUL(CONF_DFLL_MUL));
	while (hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(hw))
    4f46:	bf00      	nop
    4f48:	68f8      	ldr	r0, [r7, #12]
    4f4a:	4b66      	ldr	r3, [pc, #408]	; (50e4 <_oscctrl_init_referenced_generators+0x1d0>)
    4f4c:	4798      	blx	r3
    4f4e:	4603      	mov	r3, r0
    4f50:	2b00      	cmp	r3, #0
    4f52:	d1f9      	bne.n	4f48 <_oscctrl_init_referenced_generators+0x34>
		;

	hri_oscctrl_write_DFLLCTRLB_reg(hw, 0);
    4f54:	2100      	movs	r1, #0
    4f56:	68f8      	ldr	r0, [r7, #12]
    4f58:	4b63      	ldr	r3, [pc, #396]	; (50e8 <_oscctrl_init_referenced_generators+0x1d4>)
    4f5a:	4798      	blx	r3
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    4f5c:	bf00      	nop
    4f5e:	68f8      	ldr	r0, [r7, #12]
    4f60:	4b62      	ldr	r3, [pc, #392]	; (50ec <_oscctrl_init_referenced_generators+0x1d8>)
    4f62:	4798      	blx	r3
    4f64:	4603      	mov	r3, r0
    4f66:	2b00      	cmp	r3, #0
    4f68:	d1f9      	bne.n	4f5e <_oscctrl_init_referenced_generators+0x4a>
		;

	tmp = (CONF_DFLL_RUNSTDBY << OSCCTRL_DFLLCTRLA_RUNSTDBY_Pos) | OSCCTRL_DFLLCTRLA_ENABLE;
    4f6a:	2302      	movs	r3, #2
    4f6c:	72fb      	strb	r3, [r7, #11]
	hri_oscctrl_write_DFLLCTRLA_reg(hw, tmp);
    4f6e:	7afb      	ldrb	r3, [r7, #11]
    4f70:	4619      	mov	r1, r3
    4f72:	68f8      	ldr	r0, [r7, #12]
    4f74:	4b58      	ldr	r3, [pc, #352]	; (50d8 <_oscctrl_init_referenced_generators+0x1c4>)
    4f76:	4798      	blx	r3
	while (hri_oscctrl_get_DFLLSYNC_ENABLE_bit(hw))
    4f78:	bf00      	nop
    4f7a:	68f8      	ldr	r0, [r7, #12]
    4f7c:	4b5c      	ldr	r3, [pc, #368]	; (50f0 <_oscctrl_init_referenced_generators+0x1dc>)
    4f7e:	4798      	blx	r3
    4f80:	4603      	mov	r3, r0
    4f82:	2b00      	cmp	r3, #0
    4f84:	d1f9      	bne.n	4f7a <_oscctrl_init_referenced_generators+0x66>
		;

#if CONF_DFLL_OVERWRITE_CALIBRATION == 1
	hri_oscctrl_write_DFLLVAL_reg(hw, OSCCTRL_DFLLVAL_COARSE(CONF_DFLL_COARSE) | OSCCTRL_DFLLVAL_FINE(CONF_DFLL_FINE));
#endif
	hri_oscctrl_write_DFLLVAL_reg(hw, hri_oscctrl_read_DFLLVAL_reg(hw));
    4f86:	68f8      	ldr	r0, [r7, #12]
    4f88:	4b5a      	ldr	r3, [pc, #360]	; (50f4 <_oscctrl_init_referenced_generators+0x1e0>)
    4f8a:	4798      	blx	r3
    4f8c:	4603      	mov	r3, r0
    4f8e:	4619      	mov	r1, r3
    4f90:	68f8      	ldr	r0, [r7, #12]
    4f92:	4b59      	ldr	r3, [pc, #356]	; (50f8 <_oscctrl_init_referenced_generators+0x1e4>)
    4f94:	4798      	blx	r3
	while (hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit(hw))
    4f96:	bf00      	nop
    4f98:	68f8      	ldr	r0, [r7, #12]
    4f9a:	4b58      	ldr	r3, [pc, #352]	; (50fc <_oscctrl_init_referenced_generators+0x1e8>)
    4f9c:	4798      	blx	r3
    4f9e:	4603      	mov	r3, r0
    4fa0:	2b00      	cmp	r3, #0
    4fa2:	d1f9      	bne.n	4f98 <_oscctrl_init_referenced_generators+0x84>
		;

	tmp = (CONF_DFLL_WAITLOCK << OSCCTRL_DFLLCTRLB_WAITLOCK_Pos) | (CONF_DFLL_BPLCKC << OSCCTRL_DFLLCTRLB_BPLCKC_Pos)
    4fa4:	2319      	movs	r3, #25
    4fa6:	72fb      	strb	r3, [r7, #11]
	      | (CONF_DFLL_QLDIS << OSCCTRL_DFLLCTRLB_QLDIS_Pos) | (CONF_DFLL_CCDIS << OSCCTRL_DFLLCTRLB_CCDIS_Pos)
	      | (CONF_DFLL_USBCRM << OSCCTRL_DFLLCTRLB_USBCRM_Pos) | (CONF_DFLL_LLAW << OSCCTRL_DFLLCTRLB_LLAW_Pos)
	      | (CONF_DFLL_STABLE << OSCCTRL_DFLLCTRLB_STABLE_Pos) | (CONF_DFLL_MODE << OSCCTRL_DFLLCTRLB_MODE_Pos) | 0;
	hri_oscctrl_write_DFLLCTRLB_reg(hw, tmp);
    4fa8:	7afb      	ldrb	r3, [r7, #11]
    4faa:	4619      	mov	r1, r3
    4fac:	68f8      	ldr	r0, [r7, #12]
    4fae:	4b4e      	ldr	r3, [pc, #312]	; (50e8 <_oscctrl_init_referenced_generators+0x1d4>)
    4fb0:	4798      	blx	r3
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    4fb2:	bf00      	nop
    4fb4:	68f8      	ldr	r0, [r7, #12]
    4fb6:	4b4d      	ldr	r3, [pc, #308]	; (50ec <_oscctrl_init_referenced_generators+0x1d8>)
    4fb8:	4798      	blx	r3
    4fba:	4603      	mov	r3, r0
    4fbc:	2b00      	cmp	r3, #0
    4fbe:	d1f9      	bne.n	4fb4 <_oscctrl_init_referenced_generators+0xa0>
		;
#endif

#if CONF_FDPLL0_CONFIG == 1
#if CONF_FDPLL0_REFCLK == 0
	hri_gclk_write_PCHCTRL_reg(
    4fc0:	2245      	movs	r2, #69	; 0x45
    4fc2:	2101      	movs	r1, #1
    4fc4:	4841      	ldr	r0, [pc, #260]	; (50cc <_oscctrl_init_referenced_generators+0x1b8>)
    4fc6:	4b4e      	ldr	r3, [pc, #312]	; (5100 <_oscctrl_init_referenced_generators+0x1ec>)
    4fc8:	4798      	blx	r3
	    GCLK, OSCCTRL_GCLK_ID_FDPLL0, (1 << GCLK_PCHCTRL_CHEN_Pos) | GCLK_PCHCTRL_GEN(CONF_FDPLL0_GCLK));
#endif
	hri_oscctrl_write_DPLLRATIO_reg(
    4fca:	223b      	movs	r2, #59	; 0x3b
    4fcc:	2100      	movs	r1, #0
    4fce:	68f8      	ldr	r0, [r7, #12]
    4fd0:	4b4c      	ldr	r3, [pc, #304]	; (5104 <_oscctrl_init_referenced_generators+0x1f0>)
    4fd2:	4798      	blx	r3
	    hw, 0, OSCCTRL_DPLLRATIO_LDRFRAC(CONF_FDPLL0_LDRFRAC) | OSCCTRL_DPLLRATIO_LDR(CONF_FDPLL0_LDR));
	hri_oscctrl_write_DPLLCTRLB_reg(
    4fd4:	f44f 6201 	mov.w	r2, #2064	; 0x810
    4fd8:	2100      	movs	r1, #0
    4fda:	68f8      	ldr	r0, [r7, #12]
    4fdc:	4b4a      	ldr	r3, [pc, #296]	; (5108 <_oscctrl_init_referenced_generators+0x1f4>)
    4fde:	4798      	blx	r3
	    OSCCTRL_DPLLCTRLB_DIV(CONF_FDPLL0_DIV) | (CONF_FDPLL0_DCOEN << OSCCTRL_DPLLCTRLB_DCOEN_Pos)
	        | OSCCTRL_DPLLCTRLB_DCOFILTER(CONF_FDPLL0_DCOFILTER)
	        | (CONF_FDPLL0_LBYPASS << OSCCTRL_DPLLCTRLB_LBYPASS_Pos) | OSCCTRL_DPLLCTRLB_LTIME(CONF_FDPLL0_LTIME)
	        | OSCCTRL_DPLLCTRLB_REFCLK(CONF_FDPLL0_REFCLK) | (CONF_FDPLL0_WUF << OSCCTRL_DPLLCTRLB_WUF_Pos)
	        | OSCCTRL_DPLLCTRLB_FILTER(CONF_FDPLL0_FILTER));
	hri_oscctrl_write_DPLLCTRLA_reg(hw,
    4fe0:	2242      	movs	r2, #66	; 0x42
    4fe2:	2100      	movs	r1, #0
    4fe4:	68f8      	ldr	r0, [r7, #12]
    4fe6:	4b49      	ldr	r3, [pc, #292]	; (510c <_oscctrl_init_referenced_generators+0x1f8>)
    4fe8:	4798      	blx	r3
#if CONF_FDPLL1_CONFIG == 1
#if CONF_FDPLL1_REFCLK == 0
	hri_gclk_write_PCHCTRL_reg(
	    GCLK, OSCCTRL_GCLK_ID_FDPLL1, (1 << GCLK_PCHCTRL_CHEN_Pos) | GCLK_PCHCTRL_GEN(CONF_FDPLL1_GCLK));
#endif
	hri_oscctrl_write_DPLLRATIO_reg(
    4fea:	4a49      	ldr	r2, [pc, #292]	; (5110 <_oscctrl_init_referenced_generators+0x1fc>)
    4fec:	2101      	movs	r1, #1
    4fee:	68f8      	ldr	r0, [r7, #12]
    4ff0:	4b44      	ldr	r3, [pc, #272]	; (5104 <_oscctrl_init_referenced_generators+0x1f0>)
    4ff2:	4798      	blx	r3
	    hw, 1, OSCCTRL_DPLLRATIO_LDRFRAC(CONF_FDPLL1_LDRFRAC) | OSCCTRL_DPLLRATIO_LDR(CONF_FDPLL1_LDR));
	hri_oscctrl_write_DPLLCTRLB_reg(
    4ff4:	f44f 6203 	mov.w	r2, #2096	; 0x830
    4ff8:	2101      	movs	r1, #1
    4ffa:	68f8      	ldr	r0, [r7, #12]
    4ffc:	4b42      	ldr	r3, [pc, #264]	; (5108 <_oscctrl_init_referenced_generators+0x1f4>)
    4ffe:	4798      	blx	r3
	    OSCCTRL_DPLLCTRLB_DIV(CONF_FDPLL1_DIV) | (CONF_FDPLL1_DCOEN << OSCCTRL_DPLLCTRLB_DCOEN_Pos)
	        | OSCCTRL_DPLLCTRLB_DCOFILTER(CONF_FDPLL1_DCOFILTER)
	        | (CONF_FDPLL1_LBYPASS << OSCCTRL_DPLLCTRLB_LBYPASS_Pos) | OSCCTRL_DPLLCTRLB_LTIME(CONF_FDPLL1_LTIME)
	        | OSCCTRL_DPLLCTRLB_REFCLK(CONF_FDPLL1_REFCLK) | (CONF_FDPLL1_WUF << OSCCTRL_DPLLCTRLB_WUF_Pos)
	        | OSCCTRL_DPLLCTRLB_FILTER(CONF_FDPLL1_FILTER));
	hri_oscctrl_write_DPLLCTRLA_reg(hw,
    5000:	2202      	movs	r2, #2
    5002:	2101      	movs	r1, #1
    5004:	68f8      	ldr	r0, [r7, #12]
    5006:	4b41      	ldr	r3, [pc, #260]	; (510c <_oscctrl_init_referenced_generators+0x1f8>)
    5008:	4798      	blx	r3
	                                (CONF_FDPLL1_RUNSTDBY << OSCCTRL_DPLLCTRLA_RUNSTDBY_Pos)
	                                    | (CONF_FDPLL1_ENABLE << OSCCTRL_DPLLCTRLA_ENABLE_Pos));
#endif

#if CONF_DFLL_CONFIG == 1
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(hw)) {
    500a:	68f8      	ldr	r0, [r7, #12]
    500c:	4b41      	ldr	r3, [pc, #260]	; (5114 <_oscctrl_init_referenced_generators+0x200>)
    500e:	4798      	blx	r3
    5010:	4603      	mov	r3, r0
    5012:	2b00      	cmp	r3, #0
    5014:	d00c      	beq.n	5030 <_oscctrl_init_referenced_generators+0x11c>
		hri_oscctrl_status_reg_t status_mask = OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC;
    5016:	f44f 6310 	mov.w	r3, #2304	; 0x900
    501a:	607b      	str	r3, [r7, #4]

		while (hri_oscctrl_get_STATUS_reg(hw, status_mask) != status_mask)
    501c:	bf00      	nop
    501e:	6879      	ldr	r1, [r7, #4]
    5020:	68f8      	ldr	r0, [r7, #12]
    5022:	4b3d      	ldr	r3, [pc, #244]	; (5118 <_oscctrl_init_referenced_generators+0x204>)
    5024:	4798      	blx	r3
    5026:	4602      	mov	r2, r0
    5028:	687b      	ldr	r3, [r7, #4]
    502a:	429a      	cmp	r2, r3
    502c:	d1f7      	bne.n	501e <_oscctrl_init_referenced_generators+0x10a>
    502e:	e009      	b.n	5044 <_oscctrl_init_referenced_generators+0x130>
			;
	} else {
		while (!hri_oscctrl_get_STATUS_DFLLRDY_bit(hw))
    5030:	bf00      	nop
    5032:	68f8      	ldr	r0, [r7, #12]
    5034:	4b39      	ldr	r3, [pc, #228]	; (511c <_oscctrl_init_referenced_generators+0x208>)
    5036:	4798      	blx	r3
    5038:	4603      	mov	r3, r0
    503a:	f083 0301 	eor.w	r3, r3, #1
    503e:	b2db      	uxtb	r3, r3
    5040:	2b00      	cmp	r3, #0
    5042:	d1f6      	bne.n	5032 <_oscctrl_init_referenced_generators+0x11e>
#endif
#endif

#if CONF_FDPLL0_CONFIG == 1
#if CONF_FDPLL0_ENABLE == 1
	while (!(hri_oscctrl_get_DPLLSTATUS_LOCK_bit(hw, 0) || hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(hw, 0)))
    5044:	bf00      	nop
    5046:	2100      	movs	r1, #0
    5048:	68f8      	ldr	r0, [r7, #12]
    504a:	4b35      	ldr	r3, [pc, #212]	; (5120 <_oscctrl_init_referenced_generators+0x20c>)
    504c:	4798      	blx	r3
    504e:	4603      	mov	r3, r0
    5050:	f083 0301 	eor.w	r3, r3, #1
    5054:	b2db      	uxtb	r3, r3
    5056:	2b00      	cmp	r3, #0
    5058:	d009      	beq.n	506e <_oscctrl_init_referenced_generators+0x15a>
    505a:	2100      	movs	r1, #0
    505c:	68f8      	ldr	r0, [r7, #12]
    505e:	4b31      	ldr	r3, [pc, #196]	; (5124 <_oscctrl_init_referenced_generators+0x210>)
    5060:	4798      	blx	r3
    5062:	4603      	mov	r3, r0
    5064:	f083 0301 	eor.w	r3, r3, #1
    5068:	b2db      	uxtb	r3, r3
    506a:	2b00      	cmp	r3, #0
    506c:	d1eb      	bne.n	5046 <_oscctrl_init_referenced_generators+0x132>
#endif
#endif

#if CONF_FDPLL1_CONFIG == 1
#if CONF_FDPLL1_ENABLE == 1
	while (!(hri_oscctrl_get_DPLLSTATUS_LOCK_bit(hw, 1) || hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(hw, 1)))
    506e:	bf00      	nop
    5070:	2101      	movs	r1, #1
    5072:	68f8      	ldr	r0, [r7, #12]
    5074:	4b2a      	ldr	r3, [pc, #168]	; (5120 <_oscctrl_init_referenced_generators+0x20c>)
    5076:	4798      	blx	r3
    5078:	4603      	mov	r3, r0
    507a:	f083 0301 	eor.w	r3, r3, #1
    507e:	b2db      	uxtb	r3, r3
    5080:	2b00      	cmp	r3, #0
    5082:	d009      	beq.n	5098 <_oscctrl_init_referenced_generators+0x184>
    5084:	2101      	movs	r1, #1
    5086:	68f8      	ldr	r0, [r7, #12]
    5088:	4b26      	ldr	r3, [pc, #152]	; (5124 <_oscctrl_init_referenced_generators+0x210>)
    508a:	4798      	blx	r3
    508c:	4603      	mov	r3, r0
    508e:	f083 0301 	eor.w	r3, r3, #1
    5092:	b2db      	uxtb	r3, r3
    5094:	2b00      	cmp	r3, #0
    5096:	d1eb      	bne.n	5070 <_oscctrl_init_referenced_generators+0x15c>
	hri_oscctrl_set_DPLLCTRLA_ONDEMAND_bit(hw, 1);
#endif
#endif

#if CONF_DFLL_CONFIG == 1
	while (hri_gclk_read_SYNCBUSY_reg(GCLK))
    5098:	bf00      	nop
    509a:	480c      	ldr	r0, [pc, #48]	; (50cc <_oscctrl_init_referenced_generators+0x1b8>)
    509c:	4b22      	ldr	r3, [pc, #136]	; (5128 <_oscctrl_init_referenced_generators+0x214>)
    509e:	4798      	blx	r3
    50a0:	4603      	mov	r3, r0
    50a2:	2b00      	cmp	r3, #0
    50a4:	d1f9      	bne.n	509a <_oscctrl_init_referenced_generators+0x186>
		;
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, CONF_GCLK_GEN_0_SOURCE);
    50a6:	2207      	movs	r2, #7
    50a8:	2100      	movs	r1, #0
    50aa:	4808      	ldr	r0, [pc, #32]	; (50cc <_oscctrl_init_referenced_generators+0x1b8>)
    50ac:	4b08      	ldr	r3, [pc, #32]	; (50d0 <_oscctrl_init_referenced_generators+0x1bc>)
    50ae:	4798      	blx	r3
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
    50b0:	bf00      	nop
    50b2:	4806      	ldr	r0, [pc, #24]	; (50cc <_oscctrl_init_referenced_generators+0x1b8>)
    50b4:	4b07      	ldr	r3, [pc, #28]	; (50d4 <_oscctrl_init_referenced_generators+0x1c0>)
    50b6:	4798      	blx	r3
    50b8:	4603      	mov	r3, r0
    50ba:	2b00      	cmp	r3, #0
    50bc:	d1f9      	bne.n	50b2 <_oscctrl_init_referenced_generators+0x19e>
		;
#endif
	(void)hw;
}
    50be:	bf00      	nop
    50c0:	3710      	adds	r7, #16
    50c2:	46bd      	mov	sp, r7
    50c4:	bd80      	pop	{r7, pc}
    50c6:	bf00      	nop
    50c8:	40001000 	.word	0x40001000
    50cc:	40001c00 	.word	0x40001c00
    50d0:	00004ae1 	.word	0x00004ae1
    50d4:	00004aa1 	.word	0x00004aa1
    50d8:	00004d45 	.word	0x00004d45
    50dc:	0401bb80 	.word	0x0401bb80
    50e0:	00004de7 	.word	0x00004de7
    50e4:	00004e9f 	.word	0x00004e9f
    50e8:	00004d93 	.word	0x00004d93
    50ec:	00004e37 	.word	0x00004e37
    50f0:	00004e03 	.word	0x00004e03
    50f4:	00004dcf 	.word	0x00004dcf
    50f8:	00004db3 	.word	0x00004db3
    50fc:	00004e6b 	.word	0x00004e6b
    5100:	00004b31 	.word	0x00004b31
    5104:	00004c3d 	.word	0x00004c3d
    5108:	00004c79 	.word	0x00004c79
    510c:	00004c01 	.word	0x00004c01
    5110:	000407a0 	.word	0x000407a0
    5114:	00004d63 	.word	0x00004d63
    5118:	00004cf7 	.word	0x00004cf7
    511c:	00004ccf 	.word	0x00004ccf
    5120:	00004b8d 	.word	0x00004b8d
    5124:	00004bc5 	.word	0x00004bc5
    5128:	00004ac9 	.word	0x00004ac9

0000512c <hri_qspi_get_INTFLAG_INSTREND_bit>:
{
	((Qspi *)hw)->INTFLAG.reg = QSPI_INTFLAG_CSRISE;
}

static inline bool hri_qspi_get_INTFLAG_INSTREND_bit(const void *const hw)
{
    512c:	b480      	push	{r7}
    512e:	b083      	sub	sp, #12
    5130:	af00      	add	r7, sp, #0
    5132:	6078      	str	r0, [r7, #4]
	return (((Qspi *)hw)->INTFLAG.reg & QSPI_INTFLAG_INSTREND) >> QSPI_INTFLAG_INSTREND_Pos;
    5134:	687b      	ldr	r3, [r7, #4]
    5136:	69db      	ldr	r3, [r3, #28]
    5138:	0a9b      	lsrs	r3, r3, #10
    513a:	f003 0301 	and.w	r3, r3, #1
    513e:	2b00      	cmp	r3, #0
    5140:	bf14      	ite	ne
    5142:	2301      	movne	r3, #1
    5144:	2300      	moveq	r3, #0
    5146:	b2db      	uxtb	r3, r3
}
    5148:	4618      	mov	r0, r3
    514a:	370c      	adds	r7, #12
    514c:	46bd      	mov	sp, r7
    514e:	f85d 7b04 	ldr.w	r7, [sp], #4
    5152:	4770      	bx	lr

00005154 <hri_qspi_clear_INTFLAG_INSTREND_bit>:

static inline void hri_qspi_clear_INTFLAG_INSTREND_bit(const void *const hw)
{
    5154:	b480      	push	{r7}
    5156:	b083      	sub	sp, #12
    5158:	af00      	add	r7, sp, #0
    515a:	6078      	str	r0, [r7, #4]
	((Qspi *)hw)->INTFLAG.reg = QSPI_INTFLAG_INSTREND;
    515c:	687b      	ldr	r3, [r7, #4]
    515e:	f44f 6280 	mov.w	r2, #1024	; 0x400
    5162:	61da      	str	r2, [r3, #28]
}
    5164:	bf00      	nop
    5166:	370c      	adds	r7, #12
    5168:	46bd      	mov	sp, r7
    516a:	f85d 7b04 	ldr.w	r7, [sp], #4
    516e:	4770      	bx	lr

00005170 <hri_qspi_write_CTRLA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_CTRLA_reg(const void *const hw, hri_qspi_ctrla_reg_t data)
{
    5170:	b480      	push	{r7}
    5172:	b083      	sub	sp, #12
    5174:	af00      	add	r7, sp, #0
    5176:	6078      	str	r0, [r7, #4]
    5178:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->CTRLA.reg = data;
    517a:	687b      	ldr	r3, [r7, #4]
    517c:	683a      	ldr	r2, [r7, #0]
    517e:	601a      	str	r2, [r3, #0]
	QSPI_CRITICAL_SECTION_LEAVE();
}
    5180:	bf00      	nop
    5182:	370c      	adds	r7, #12
    5184:	46bd      	mov	sp, r7
    5186:	f85d 7b04 	ldr.w	r7, [sp], #4
    518a:	4770      	bx	lr

0000518c <hri_qspi_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_CTRLB_reg(const void *const hw, hri_qspi_ctrlb_reg_t data)
{
    518c:	b480      	push	{r7}
    518e:	b083      	sub	sp, #12
    5190:	af00      	add	r7, sp, #0
    5192:	6078      	str	r0, [r7, #4]
    5194:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->CTRLB.reg = data;
    5196:	687b      	ldr	r3, [r7, #4]
    5198:	683a      	ldr	r2, [r7, #0]
    519a:	605a      	str	r2, [r3, #4]
	QSPI_CRITICAL_SECTION_LEAVE();
}
    519c:	bf00      	nop
    519e:	370c      	adds	r7, #12
    51a0:	46bd      	mov	sp, r7
    51a2:	f85d 7b04 	ldr.w	r7, [sp], #4
    51a6:	4770      	bx	lr

000051a8 <hri_qspi_write_BAUD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_BAUD_reg(const void *const hw, hri_qspi_baud_reg_t data)
{
    51a8:	b480      	push	{r7}
    51aa:	b083      	sub	sp, #12
    51ac:	af00      	add	r7, sp, #0
    51ae:	6078      	str	r0, [r7, #4]
    51b0:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->BAUD.reg = data;
    51b2:	687b      	ldr	r3, [r7, #4]
    51b4:	683a      	ldr	r2, [r7, #0]
    51b6:	609a      	str	r2, [r3, #8]
	QSPI_CRITICAL_SECTION_LEAVE();
}
    51b8:	bf00      	nop
    51ba:	370c      	adds	r7, #12
    51bc:	46bd      	mov	sp, r7
    51be:	f85d 7b04 	ldr.w	r7, [sp], #4
    51c2:	4770      	bx	lr

000051c4 <hri_qspi_write_INSTRADDR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_INSTRADDR_reg(const void *const hw, hri_qspi_instraddr_reg_t data)
{
    51c4:	b480      	push	{r7}
    51c6:	b083      	sub	sp, #12
    51c8:	af00      	add	r7, sp, #0
    51ca:	6078      	str	r0, [r7, #4]
    51cc:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->INSTRADDR.reg = data;
    51ce:	687b      	ldr	r3, [r7, #4]
    51d0:	683a      	ldr	r2, [r7, #0]
    51d2:	631a      	str	r2, [r3, #48]	; 0x30
	QSPI_CRITICAL_SECTION_LEAVE();
}
    51d4:	bf00      	nop
    51d6:	370c      	adds	r7, #12
    51d8:	46bd      	mov	sp, r7
    51da:	f85d 7b04 	ldr.w	r7, [sp], #4
    51de:	4770      	bx	lr

000051e0 <hri_qspi_write_INSTRCTRL_INSTR_bf>:
	tmp = (tmp & QSPI_INSTRCTRL_INSTR(mask)) >> QSPI_INSTRCTRL_INSTR_Pos;
	return tmp;
}

static inline void hri_qspi_write_INSTRCTRL_INSTR_bf(const void *const hw, hri_qspi_instrctrl_reg_t data)
{
    51e0:	b480      	push	{r7}
    51e2:	b085      	sub	sp, #20
    51e4:	af00      	add	r7, sp, #0
    51e6:	6078      	str	r0, [r7, #4]
    51e8:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	QSPI_CRITICAL_SECTION_ENTER();
	tmp = ((Qspi *)hw)->INSTRCTRL.reg;
    51ea:	687b      	ldr	r3, [r7, #4]
    51ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    51ee:	60fb      	str	r3, [r7, #12]
	tmp &= ~QSPI_INSTRCTRL_INSTR_Msk;
    51f0:	68fb      	ldr	r3, [r7, #12]
    51f2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    51f6:	60fb      	str	r3, [r7, #12]
	tmp |= QSPI_INSTRCTRL_INSTR(data);
    51f8:	683b      	ldr	r3, [r7, #0]
    51fa:	b2db      	uxtb	r3, r3
    51fc:	68fa      	ldr	r2, [r7, #12]
    51fe:	4313      	orrs	r3, r2
    5200:	60fb      	str	r3, [r7, #12]
	((Qspi *)hw)->INSTRCTRL.reg = tmp;
    5202:	687b      	ldr	r3, [r7, #4]
    5204:	68fa      	ldr	r2, [r7, #12]
    5206:	635a      	str	r2, [r3, #52]	; 0x34
	QSPI_CRITICAL_SECTION_LEAVE();
}
    5208:	bf00      	nop
    520a:	3714      	adds	r7, #20
    520c:	46bd      	mov	sp, r7
    520e:	f85d 7b04 	ldr.w	r7, [sp], #4
    5212:	4770      	bx	lr

00005214 <hri_qspi_write_INSTRCTRL_OPTCODE_bf>:
	tmp = (tmp & QSPI_INSTRCTRL_OPTCODE(mask)) >> QSPI_INSTRCTRL_OPTCODE_Pos;
	return tmp;
}

static inline void hri_qspi_write_INSTRCTRL_OPTCODE_bf(const void *const hw, hri_qspi_instrctrl_reg_t data)
{
    5214:	b480      	push	{r7}
    5216:	b085      	sub	sp, #20
    5218:	af00      	add	r7, sp, #0
    521a:	6078      	str	r0, [r7, #4]
    521c:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	QSPI_CRITICAL_SECTION_ENTER();
	tmp = ((Qspi *)hw)->INSTRCTRL.reg;
    521e:	687b      	ldr	r3, [r7, #4]
    5220:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    5222:	60fb      	str	r3, [r7, #12]
	tmp &= ~QSPI_INSTRCTRL_OPTCODE_Msk;
    5224:	68fb      	ldr	r3, [r7, #12]
    5226:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
    522a:	60fb      	str	r3, [r7, #12]
	tmp |= QSPI_INSTRCTRL_OPTCODE(data);
    522c:	683b      	ldr	r3, [r7, #0]
    522e:	041b      	lsls	r3, r3, #16
    5230:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
    5234:	68fa      	ldr	r2, [r7, #12]
    5236:	4313      	orrs	r3, r2
    5238:	60fb      	str	r3, [r7, #12]
	((Qspi *)hw)->INSTRCTRL.reg = tmp;
    523a:	687b      	ldr	r3, [r7, #4]
    523c:	68fa      	ldr	r2, [r7, #12]
    523e:	635a      	str	r2, [r3, #52]	; 0x34
	QSPI_CRITICAL_SECTION_LEAVE();
}
    5240:	bf00      	nop
    5242:	3714      	adds	r7, #20
    5244:	46bd      	mov	sp, r7
    5246:	f85d 7b04 	ldr.w	r7, [sp], #4
    524a:	4770      	bx	lr

0000524c <hri_qspi_write_INSTRFRAME_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_INSTRFRAME_reg(const void *const hw, hri_qspi_instrframe_reg_t data)
{
    524c:	b480      	push	{r7}
    524e:	b083      	sub	sp, #12
    5250:	af00      	add	r7, sp, #0
    5252:	6078      	str	r0, [r7, #4]
    5254:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->INSTRFRAME.reg = data;
    5256:	687b      	ldr	r3, [r7, #4]
    5258:	683a      	ldr	r2, [r7, #0]
    525a:	639a      	str	r2, [r3, #56]	; 0x38
	QSPI_CRITICAL_SECTION_LEAVE();
}
    525c:	bf00      	nop
    525e:	370c      	adds	r7, #12
    5260:	46bd      	mov	sp, r7
    5262:	f85d 7b04 	ldr.w	r7, [sp], #4
    5266:	4770      	bx	lr

00005268 <hri_qspi_read_INSTRFRAME_reg>:
	((Qspi *)hw)->INSTRFRAME.reg ^= mask;
	QSPI_CRITICAL_SECTION_LEAVE();
}

static inline hri_qspi_instrframe_reg_t hri_qspi_read_INSTRFRAME_reg(const void *const hw)
{
    5268:	b480      	push	{r7}
    526a:	b083      	sub	sp, #12
    526c:	af00      	add	r7, sp, #0
    526e:	6078      	str	r0, [r7, #4]
	return ((Qspi *)hw)->INSTRFRAME.reg;
    5270:	687b      	ldr	r3, [r7, #4]
    5272:	6b9b      	ldr	r3, [r3, #56]	; 0x38
}
    5274:	4618      	mov	r0, r3
    5276:	370c      	adds	r7, #12
    5278:	46bd      	mov	sp, r7
    527a:	f85d 7b04 	ldr.w	r7, [sp], #4
    527e:	4770      	bx	lr

00005280 <_qspi_memcpy>:
 * \param dst  Pointer to destination buffer.
 * \param src  Pointer to source buffer.
 * \param count  Bytes to be copied.
 */
static void _qspi_memcpy(uint8_t *dst, uint8_t *src, uint32_t count)
{
    5280:	b480      	push	{r7}
    5282:	b085      	sub	sp, #20
    5284:	af00      	add	r7, sp, #0
    5286:	60f8      	str	r0, [r7, #12]
    5288:	60b9      	str	r1, [r7, #8]
    528a:	607a      	str	r2, [r7, #4]
	while (count--) {
    528c:	e007      	b.n	529e <_qspi_memcpy+0x1e>
		*dst++ = *src++;
    528e:	68fb      	ldr	r3, [r7, #12]
    5290:	1c5a      	adds	r2, r3, #1
    5292:	60fa      	str	r2, [r7, #12]
    5294:	68ba      	ldr	r2, [r7, #8]
    5296:	1c51      	adds	r1, r2, #1
    5298:	60b9      	str	r1, [r7, #8]
    529a:	7812      	ldrb	r2, [r2, #0]
    529c:	701a      	strb	r2, [r3, #0]
	while (count--) {
    529e:	687b      	ldr	r3, [r7, #4]
    52a0:	1e5a      	subs	r2, r3, #1
    52a2:	607a      	str	r2, [r7, #4]
    52a4:	2b00      	cmp	r3, #0
    52a6:	d1f2      	bne.n	528e <_qspi_memcpy+0xe>
	}
}
    52a8:	bf00      	nop
    52aa:	3714      	adds	r7, #20
    52ac:	46bd      	mov	sp, r7
    52ae:	f85d 7b04 	ldr.w	r7, [sp], #4
    52b2:	4770      	bx	lr

000052b4 <_qspi_end_transfer>:
 * \brief Ends ongoing transfer by releasing CS of QSPI peripheral.
 *
 * \param qspi  Pointer to an Qspi instance.
 */
static inline void _qspi_end_transfer(void *hw)
{
    52b4:	b580      	push	{r7, lr}
    52b6:	b082      	sub	sp, #8
    52b8:	af00      	add	r7, sp, #0
    52ba:	6078      	str	r0, [r7, #4]
	hri_qspi_write_CTRLA_reg(hw, QSPI_CTRLA_ENABLE | QSPI_CTRLA_LASTXFER);
    52bc:	4903      	ldr	r1, [pc, #12]	; (52cc <_qspi_end_transfer+0x18>)
    52be:	6878      	ldr	r0, [r7, #4]
    52c0:	4b03      	ldr	r3, [pc, #12]	; (52d0 <_qspi_end_transfer+0x1c>)
    52c2:	4798      	blx	r3
}
    52c4:	bf00      	nop
    52c6:	3708      	adds	r7, #8
    52c8:	46bd      	mov	sp, r7
    52ca:	bd80      	pop	{r7, pc}
    52cc:	01000002 	.word	0x01000002
    52d0:	00005171 	.word	0x00005171

000052d4 <_qspi_sync_init>:

int32_t _qspi_sync_init(struct _qspi_sync_dev *dev, void *const hw)
{
    52d4:	b580      	push	{r7, lr}
    52d6:	b082      	sub	sp, #8
    52d8:	af00      	add	r7, sp, #0
    52da:	6078      	str	r0, [r7, #4]
    52dc:	6039      	str	r1, [r7, #0]
	ASSERT(dev && hw);
    52de:	687b      	ldr	r3, [r7, #4]
    52e0:	2b00      	cmp	r3, #0
    52e2:	d004      	beq.n	52ee <_qspi_sync_init+0x1a>
    52e4:	683b      	ldr	r3, [r7, #0]
    52e6:	2b00      	cmp	r3, #0
    52e8:	d001      	beq.n	52ee <_qspi_sync_init+0x1a>
    52ea:	2301      	movs	r3, #1
    52ec:	e000      	b.n	52f0 <_qspi_sync_init+0x1c>
    52ee:	2300      	movs	r3, #0
    52f0:	f003 0301 	and.w	r3, r3, #1
    52f4:	b2db      	uxtb	r3, r3
    52f6:	2240      	movs	r2, #64	; 0x40
    52f8:	490c      	ldr	r1, [pc, #48]	; (532c <_qspi_sync_init+0x58>)
    52fa:	4618      	mov	r0, r3
    52fc:	4b0c      	ldr	r3, [pc, #48]	; (5330 <_qspi_sync_init+0x5c>)
    52fe:	4798      	blx	r3
	dev->prvt = hw;
    5300:	687b      	ldr	r3, [r7, #4]
    5302:	683a      	ldr	r2, [r7, #0]
    5304:	601a      	str	r2, [r3, #0]
	hri_qspi_write_CTRLA_reg(dev->prvt, QSPI_CTRLA_SWRST);
    5306:	687b      	ldr	r3, [r7, #4]
    5308:	681b      	ldr	r3, [r3, #0]
    530a:	2101      	movs	r1, #1
    530c:	4618      	mov	r0, r3
    530e:	4b09      	ldr	r3, [pc, #36]	; (5334 <_qspi_sync_init+0x60>)
    5310:	4798      	blx	r3

	hri_qspi_write_CTRLB_reg(hw,
    5312:	4909      	ldr	r1, [pc, #36]	; (5338 <_qspi_sync_init+0x64>)
    5314:	6838      	ldr	r0, [r7, #0]
    5316:	4b09      	ldr	r3, [pc, #36]	; (533c <_qspi_sync_init+0x68>)
    5318:	4798      	blx	r3
	                         QSPI_CTRLB_MODE_MEMORY | QSPI_CTRLB_CSMODE_LASTXFER | QSPI_CTRLB_DATALEN(0)
	                             | QSPI_CTRLB_DLYBCT(0) | QSPI_CTRLB_DLYCS(CONF_QSPI_DLYCS));

	hri_qspi_write_BAUD_reg(hw,
    531a:	4909      	ldr	r1, [pc, #36]	; (5340 <_qspi_sync_init+0x6c>)
    531c:	6838      	ldr	r0, [r7, #0]
    531e:	4b09      	ldr	r3, [pc, #36]	; (5344 <_qspi_sync_init+0x70>)
    5320:	4798      	blx	r3
	                        CONF_QSPI_CPOL << QSPI_BAUD_CPOL_Pos | CONF_QSPI_CPHA << QSPI_BAUD_CPHA_Pos
	                            | QSPI_BAUD_BAUD(CONF_QSPI_BAUD_RATE) | QSPI_BAUD_DLYBS(CONF_QSPI_DLYBS));
	return ERR_NONE;
    5322:	2300      	movs	r3, #0
}
    5324:	4618      	mov	r0, r3
    5326:	3708      	adds	r7, #8
    5328:	46bd      	mov	sp, r7
    532a:	bd80      	pop	{r7, pc}
    532c:	000134b0 	.word	0x000134b0
    5330:	00002dc9 	.word	0x00002dc9
    5334:	00005171 	.word	0x00005171
    5338:	06000011 	.word	0x06000011
    533c:	0000518d 	.word	0x0000518d
    5340:	00241300 	.word	0x00241300
    5344:	000051a9 	.word	0x000051a9

00005348 <_qspi_sync_enable>:
	hri_qspi_write_CTRLA_reg(dev->prvt, QSPI_CTRLA_SWRST);
	return ERR_NONE;
}

int32_t _qspi_sync_enable(struct _qspi_sync_dev *dev)
{
    5348:	b580      	push	{r7, lr}
    534a:	b082      	sub	sp, #8
    534c:	af00      	add	r7, sp, #0
    534e:	6078      	str	r0, [r7, #4]
	hri_qspi_write_CTRLA_reg(dev->prvt, QSPI_CTRLA_ENABLE);
    5350:	687b      	ldr	r3, [r7, #4]
    5352:	681b      	ldr	r3, [r3, #0]
    5354:	2102      	movs	r1, #2
    5356:	4618      	mov	r0, r3
    5358:	4b03      	ldr	r3, [pc, #12]	; (5368 <_qspi_sync_enable+0x20>)
    535a:	4798      	blx	r3
	return ERR_NONE;
    535c:	2300      	movs	r3, #0
}
    535e:	4618      	mov	r0, r3
    5360:	3708      	adds	r7, #8
    5362:	46bd      	mov	sp, r7
    5364:	bd80      	pop	{r7, pc}
    5366:	bf00      	nop
    5368:	00005171 	.word	0x00005171

0000536c <_qspi_sync_disable>:

int32_t _qspi_sync_disable(struct _qspi_sync_dev *dev)
{
    536c:	b580      	push	{r7, lr}
    536e:	b082      	sub	sp, #8
    5370:	af00      	add	r7, sp, #0
    5372:	6078      	str	r0, [r7, #4]
	hri_qspi_write_CTRLA_reg(dev->prvt, 0);
    5374:	687b      	ldr	r3, [r7, #4]
    5376:	681b      	ldr	r3, [r3, #0]
    5378:	2100      	movs	r1, #0
    537a:	4618      	mov	r0, r3
    537c:	4b03      	ldr	r3, [pc, #12]	; (538c <_qspi_sync_disable+0x20>)
    537e:	4798      	blx	r3
	return ERR_NONE;
    5380:	2300      	movs	r3, #0
}
    5382:	4618      	mov	r0, r3
    5384:	3708      	adds	r7, #8
    5386:	46bd      	mov	sp, r7
    5388:	bd80      	pop	{r7, pc}
    538a:	bf00      	nop
    538c:	00005171 	.word	0x00005171

00005390 <_qspi_sync_command_set_ifr>:

/**
 * \brief Set instruction frame param.
 */
static void _qspi_sync_command_set_ifr(struct _qspi_sync_dev *dev, const struct _qspi_command *cmd)
{
    5390:	b580      	push	{r7, lr}
    5392:	b084      	sub	sp, #16
    5394:	af00      	add	r7, sp, #0
    5396:	6078      	str	r0, [r7, #4]
    5398:	6039      	str	r1, [r7, #0]
	void *hw = dev->prvt;
    539a:	687b      	ldr	r3, [r7, #4]
    539c:	681b      	ldr	r3, [r3, #0]
    539e:	60fb      	str	r3, [r7, #12]
	if (cmd->inst_frame.bits.addr_en) {
    53a0:	683b      	ldr	r3, [r7, #0]
    53a2:	781b      	ldrb	r3, [r3, #0]
    53a4:	f003 0320 	and.w	r3, r3, #32
    53a8:	b2db      	uxtb	r3, r3
    53aa:	2b00      	cmp	r3, #0
    53ac:	d005      	beq.n	53ba <_qspi_sync_command_set_ifr+0x2a>
		hri_qspi_write_INSTRADDR_reg(hw, cmd->address);
    53ae:	683b      	ldr	r3, [r7, #0]
    53b0:	689b      	ldr	r3, [r3, #8]
    53b2:	4619      	mov	r1, r3
    53b4:	68f8      	ldr	r0, [r7, #12]
    53b6:	4b13      	ldr	r3, [pc, #76]	; (5404 <_qspi_sync_command_set_ifr+0x74>)
    53b8:	4798      	blx	r3
	}

	if (cmd->inst_frame.bits.inst_en) {
    53ba:	683b      	ldr	r3, [r7, #0]
    53bc:	781b      	ldrb	r3, [r3, #0]
    53be:	f003 0310 	and.w	r3, r3, #16
    53c2:	b2db      	uxtb	r3, r3
    53c4:	2b00      	cmp	r3, #0
    53c6:	d005      	beq.n	53d4 <_qspi_sync_command_set_ifr+0x44>
		hri_qspi_write_INSTRCTRL_INSTR_bf(hw, cmd->instruction);
    53c8:	683b      	ldr	r3, [r7, #0]
    53ca:	791b      	ldrb	r3, [r3, #4]
    53cc:	4619      	mov	r1, r3
    53ce:	68f8      	ldr	r0, [r7, #12]
    53d0:	4b0d      	ldr	r3, [pc, #52]	; (5408 <_qspi_sync_command_set_ifr+0x78>)
    53d2:	4798      	blx	r3
	}

	if (cmd->inst_frame.bits.opt_en) {
    53d4:	683b      	ldr	r3, [r7, #0]
    53d6:	781b      	ldrb	r3, [r3, #0]
    53d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
    53dc:	b2db      	uxtb	r3, r3
    53de:	2b00      	cmp	r3, #0
    53e0:	d005      	beq.n	53ee <_qspi_sync_command_set_ifr+0x5e>
		hri_qspi_write_INSTRCTRL_OPTCODE_bf(hw, cmd->option);
    53e2:	683b      	ldr	r3, [r7, #0]
    53e4:	795b      	ldrb	r3, [r3, #5]
    53e6:	4619      	mov	r1, r3
    53e8:	68f8      	ldr	r0, [r7, #12]
    53ea:	4b08      	ldr	r3, [pc, #32]	; (540c <_qspi_sync_command_set_ifr+0x7c>)
    53ec:	4798      	blx	r3
	}

	hri_qspi_write_INSTRFRAME_reg(hw, cmd->inst_frame.word);
    53ee:	683b      	ldr	r3, [r7, #0]
    53f0:	681b      	ldr	r3, [r3, #0]
    53f2:	4619      	mov	r1, r3
    53f4:	68f8      	ldr	r0, [r7, #12]
    53f6:	4b06      	ldr	r3, [pc, #24]	; (5410 <_qspi_sync_command_set_ifr+0x80>)
    53f8:	4798      	blx	r3
}
    53fa:	bf00      	nop
    53fc:	3710      	adds	r7, #16
    53fe:	46bd      	mov	sp, r7
    5400:	bd80      	pop	{r7, pc}
    5402:	bf00      	nop
    5404:	000051c5 	.word	0x000051c5
    5408:	000051e1 	.word	0x000051e1
    540c:	00005215 	.word	0x00005215
    5410:	0000524d 	.word	0x0000524d

00005414 <_qspi_sync_run_transfer>:

/**
 * \brief Access QSPI mapping memory via AHB.
 */
static void _qspi_sync_run_transfer(struct _qspi_sync_dev *dev, const struct _qspi_command *cmd)
{
    5414:	b580      	push	{r7, lr}
    5416:	b084      	sub	sp, #16
    5418:	af00      	add	r7, sp, #0
    541a:	6078      	str	r0, [r7, #4]
    541c:	6039      	str	r1, [r7, #0]
	void *   hw       = dev->prvt;
    541e:	687b      	ldr	r3, [r7, #4]
    5420:	681b      	ldr	r3, [r3, #0]
    5422:	60bb      	str	r3, [r7, #8]
	uint8_t *qspi_mem = (uint8_t *)QSPI_AHB;
    5424:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    5428:	60fb      	str	r3, [r7, #12]
	if (cmd->inst_frame.bits.addr_en)
    542a:	683b      	ldr	r3, [r7, #0]
    542c:	781b      	ldrb	r3, [r3, #0]
    542e:	f003 0320 	and.w	r3, r3, #32
    5432:	b2db      	uxtb	r3, r3
    5434:	2b00      	cmp	r3, #0
    5436:	d004      	beq.n	5442 <_qspi_sync_run_transfer+0x2e>
		qspi_mem += cmd->address;
    5438:	683b      	ldr	r3, [r7, #0]
    543a:	689b      	ldr	r3, [r3, #8]
    543c:	68fa      	ldr	r2, [r7, #12]
    543e:	4413      	add	r3, r2
    5440:	60fb      	str	r3, [r7, #12]

	/* To synchronize system bus accesses */
	hri_qspi_read_INSTRFRAME_reg(hw);
    5442:	68b8      	ldr	r0, [r7, #8]
    5444:	4b18      	ldr	r3, [pc, #96]	; (54a8 <_qspi_sync_run_transfer+0x94>)
    5446:	4798      	blx	r3

	ASSERT(cmd->tx_buf || cmd->rx_buf);
    5448:	683b      	ldr	r3, [r7, #0]
    544a:	691b      	ldr	r3, [r3, #16]
    544c:	2b00      	cmp	r3, #0
    544e:	d103      	bne.n	5458 <_qspi_sync_run_transfer+0x44>
    5450:	683b      	ldr	r3, [r7, #0]
    5452:	695b      	ldr	r3, [r3, #20]
    5454:	2b00      	cmp	r3, #0
    5456:	d001      	beq.n	545c <_qspi_sync_run_transfer+0x48>
    5458:	2301      	movs	r3, #1
    545a:	e000      	b.n	545e <_qspi_sync_run_transfer+0x4a>
    545c:	2300      	movs	r3, #0
    545e:	f003 0301 	and.w	r3, r3, #1
    5462:	b2db      	uxtb	r3, r3
    5464:	2282      	movs	r2, #130	; 0x82
    5466:	4911      	ldr	r1, [pc, #68]	; (54ac <_qspi_sync_run_transfer+0x98>)
    5468:	4618      	mov	r0, r3
    546a:	4b11      	ldr	r3, [pc, #68]	; (54b0 <_qspi_sync_run_transfer+0x9c>)
    546c:	4798      	blx	r3

	if (cmd->tx_buf) {
    546e:	683b      	ldr	r3, [r7, #0]
    5470:	691b      	ldr	r3, [r3, #16]
    5472:	2b00      	cmp	r3, #0
    5474:	d008      	beq.n	5488 <_qspi_sync_run_transfer+0x74>
		_qspi_memcpy((uint8_t *)qspi_mem, (uint8_t *)cmd->tx_buf, cmd->buf_len);
    5476:	683b      	ldr	r3, [r7, #0]
    5478:	6919      	ldr	r1, [r3, #16]
    547a:	683b      	ldr	r3, [r7, #0]
    547c:	68db      	ldr	r3, [r3, #12]
    547e:	461a      	mov	r2, r3
    5480:	68f8      	ldr	r0, [r7, #12]
    5482:	4b0c      	ldr	r3, [pc, #48]	; (54b4 <_qspi_sync_run_transfer+0xa0>)
    5484:	4798      	blx	r3
    5486:	e007      	b.n	5498 <_qspi_sync_run_transfer+0x84>
	} else {
		_qspi_memcpy((uint8_t *)cmd->rx_buf, (uint8_t *)qspi_mem, cmd->buf_len);
    5488:	683b      	ldr	r3, [r7, #0]
    548a:	6958      	ldr	r0, [r3, #20]
    548c:	683b      	ldr	r3, [r7, #0]
    548e:	68db      	ldr	r3, [r3, #12]
    5490:	461a      	mov	r2, r3
    5492:	68f9      	ldr	r1, [r7, #12]
    5494:	4b07      	ldr	r3, [pc, #28]	; (54b4 <_qspi_sync_run_transfer+0xa0>)
    5496:	4798      	blx	r3
  __ASM volatile ("dsb 0xF":::"memory");
    5498:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    549c:	f3bf 8f6f 	isb	sy
	}

	__DSB();
	__ISB();
}
    54a0:	bf00      	nop
    54a2:	3710      	adds	r7, #16
    54a4:	46bd      	mov	sp, r7
    54a6:	bd80      	pop	{r7, pc}
    54a8:	00005269 	.word	0x00005269
    54ac:	000134b0 	.word	0x000134b0
    54b0:	00002dc9 	.word	0x00002dc9
    54b4:	00005281 	.word	0x00005281

000054b8 <_qspi_sync_serial_run_command>:

int32_t _qspi_sync_serial_run_command(struct _qspi_sync_dev *dev, const struct _qspi_command *cmd)
{
    54b8:	b580      	push	{r7, lr}
    54ba:	b082      	sub	sp, #8
    54bc:	af00      	add	r7, sp, #0
    54be:	6078      	str	r0, [r7, #4]
    54c0:	6039      	str	r1, [r7, #0]
	_qspi_sync_command_set_ifr(dev, cmd);
    54c2:	6839      	ldr	r1, [r7, #0]
    54c4:	6878      	ldr	r0, [r7, #4]
    54c6:	4b14      	ldr	r3, [pc, #80]	; (5518 <_qspi_sync_serial_run_command+0x60>)
    54c8:	4798      	blx	r3

	if (cmd->inst_frame.bits.data_en) {
    54ca:	683b      	ldr	r3, [r7, #0]
    54cc:	781b      	ldrb	r3, [r3, #0]
    54ce:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    54d2:	b2db      	uxtb	r3, r3
    54d4:	2b00      	cmp	r3, #0
    54d6:	d003      	beq.n	54e0 <_qspi_sync_serial_run_command+0x28>
		_qspi_sync_run_transfer(dev, cmd);
    54d8:	6839      	ldr	r1, [r7, #0]
    54da:	6878      	ldr	r0, [r7, #4]
    54dc:	4b0f      	ldr	r3, [pc, #60]	; (551c <_qspi_sync_serial_run_command+0x64>)
    54de:	4798      	blx	r3
	}

	_qspi_end_transfer(dev->prvt);
    54e0:	687b      	ldr	r3, [r7, #4]
    54e2:	681b      	ldr	r3, [r3, #0]
    54e4:	4618      	mov	r0, r3
    54e6:	4b0e      	ldr	r3, [pc, #56]	; (5520 <_qspi_sync_serial_run_command+0x68>)
    54e8:	4798      	blx	r3

	while (!hri_qspi_get_INTFLAG_INSTREND_bit(dev->prvt))
    54ea:	bf00      	nop
    54ec:	687b      	ldr	r3, [r7, #4]
    54ee:	681b      	ldr	r3, [r3, #0]
    54f0:	4618      	mov	r0, r3
    54f2:	4b0c      	ldr	r3, [pc, #48]	; (5524 <_qspi_sync_serial_run_command+0x6c>)
    54f4:	4798      	blx	r3
    54f6:	4603      	mov	r3, r0
    54f8:	f083 0301 	eor.w	r3, r3, #1
    54fc:	b2db      	uxtb	r3, r3
    54fe:	2b00      	cmp	r3, #0
    5500:	d1f4      	bne.n	54ec <_qspi_sync_serial_run_command+0x34>
		;
	hri_qspi_clear_INTFLAG_INSTREND_bit(dev->prvt);
    5502:	687b      	ldr	r3, [r7, #4]
    5504:	681b      	ldr	r3, [r3, #0]
    5506:	4618      	mov	r0, r3
    5508:	4b07      	ldr	r3, [pc, #28]	; (5528 <_qspi_sync_serial_run_command+0x70>)
    550a:	4798      	blx	r3
	return ERR_NONE;
    550c:	2300      	movs	r3, #0
}
    550e:	4618      	mov	r0, r3
    5510:	3708      	adds	r7, #8
    5512:	46bd      	mov	sp, r7
    5514:	bd80      	pop	{r7, pc}
    5516:	bf00      	nop
    5518:	00005391 	.word	0x00005391
    551c:	00005415 	.word	0x00005415
    5520:	000052b5 	.word	0x000052b5
    5524:	0000512d 	.word	0x0000512d
    5528:	00005155 	.word	0x00005155

0000552c <hri_rtcmode0_wait_for_sync>:
typedef uint8_t  hri_rtc_freqcorr_reg_t;
typedef uint8_t  hri_rtcalarm_mask_reg_t;
typedef uint8_t  hri_rtcmode2_mask_reg_t;

static inline void hri_rtcmode0_wait_for_sync(const void *const hw, hri_rtcmode0_syncbusy_reg_t reg)
{
    552c:	b480      	push	{r7}
    552e:	b083      	sub	sp, #12
    5530:	af00      	add	r7, sp, #0
    5532:	6078      	str	r0, [r7, #4]
    5534:	6039      	str	r1, [r7, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    5536:	bf00      	nop
    5538:	687b      	ldr	r3, [r7, #4]
    553a:	691a      	ldr	r2, [r3, #16]
    553c:	683b      	ldr	r3, [r7, #0]
    553e:	4013      	ands	r3, r2
    5540:	2b00      	cmp	r3, #0
    5542:	d1f9      	bne.n	5538 <hri_rtcmode0_wait_for_sync+0xc>
	};
}
    5544:	bf00      	nop
    5546:	370c      	adds	r7, #12
    5548:	46bd      	mov	sp, r7
    554a:	f85d 7b04 	ldr.w	r7, [sp], #4
    554e:	4770      	bx	lr

00005550 <hri_rtcmode0_clear_interrupt_CMP0_bit>:
{
	return (((Rtc *)hw)->MODE0.INTFLAG.reg & RTC_MODE0_INTFLAG_CMP0) >> RTC_MODE0_INTFLAG_CMP0_Pos;
}

static inline void hri_rtcmode0_clear_interrupt_CMP0_bit(const void *const hw)
{
    5550:	b480      	push	{r7}
    5552:	b083      	sub	sp, #12
    5554:	af00      	add	r7, sp, #0
    5556:	6078      	str	r0, [r7, #4]
	((Rtc *)hw)->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_CMP0;
    5558:	687b      	ldr	r3, [r7, #4]
    555a:	f44f 7280 	mov.w	r2, #256	; 0x100
    555e:	819a      	strh	r2, [r3, #12]
}
    5560:	bf00      	nop
    5562:	370c      	adds	r7, #12
    5564:	46bd      	mov	sp, r7
    5566:	f85d 7b04 	ldr.w	r7, [sp], #4
    556a:	4770      	bx	lr

0000556c <hri_rtcmode0_clear_interrupt_TAMPER_bit>:
{
	return (((Rtc *)hw)->MODE0.INTFLAG.reg & RTC_MODE0_INTFLAG_TAMPER) >> RTC_MODE0_INTFLAG_TAMPER_Pos;
}

static inline void hri_rtcmode0_clear_interrupt_TAMPER_bit(const void *const hw)
{
    556c:	b480      	push	{r7}
    556e:	b083      	sub	sp, #12
    5570:	af00      	add	r7, sp, #0
    5572:	6078      	str	r0, [r7, #4]
	((Rtc *)hw)->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_TAMPER;
    5574:	687b      	ldr	r3, [r7, #4]
    5576:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    557a:	819a      	strh	r2, [r3, #12]
}
    557c:	bf00      	nop
    557e:	370c      	adds	r7, #12
    5580:	46bd      	mov	sp, r7
    5582:	f85d 7b04 	ldr.w	r7, [sp], #4
    5586:	4770      	bx	lr

00005588 <hri_rtcmode0_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_rtcmode0_intflag_reg_t hri_rtcmode0_read_INTFLAG_reg(const void *const hw)
{
    5588:	b480      	push	{r7}
    558a:	b083      	sub	sp, #12
    558c:	af00      	add	r7, sp, #0
    558e:	6078      	str	r0, [r7, #4]
	return ((Rtc *)hw)->MODE0.INTFLAG.reg;
    5590:	687b      	ldr	r3, [r7, #4]
    5592:	899b      	ldrh	r3, [r3, #12]
    5594:	b29b      	uxth	r3, r3
}
    5596:	4618      	mov	r0, r3
    5598:	370c      	adds	r7, #12
    559a:	46bd      	mov	sp, r7
    559c:	f85d 7b04 	ldr.w	r7, [sp], #4
    55a0:	4770      	bx	lr

000055a2 <hri_rtcmode0_read_INTEN_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_rtcmode0_intenset_reg_t hri_rtcmode0_read_INTEN_reg(const void *const hw)
{
    55a2:	b480      	push	{r7}
    55a4:	b083      	sub	sp, #12
    55a6:	af00      	add	r7, sp, #0
    55a8:	6078      	str	r0, [r7, #4]
	return ((Rtc *)hw)->MODE0.INTENSET.reg;
    55aa:	687b      	ldr	r3, [r7, #4]
    55ac:	895b      	ldrh	r3, [r3, #10]
    55ae:	b29b      	uxth	r3, r3
}
    55b0:	4618      	mov	r0, r3
    55b2:	370c      	adds	r7, #12
    55b4:	46bd      	mov	sp, r7
    55b6:	f85d 7b04 	ldr.w	r7, [sp], #4
    55ba:	4770      	bx	lr

000055bc <hri_rtcmode0_set_CTRLA_SWRST_bit>:
	hri_rtcmode2_wait_for_sync(hw, RTC_MODE2_SYNCBUSY_MASK_);
	return ((Rtc *)hw)->MODE2.TIMESTAMP.reg;
}

static inline void hri_rtcmode0_set_CTRLA_SWRST_bit(const void *const hw)
{
    55bc:	b580      	push	{r7, lr}
    55be:	b082      	sub	sp, #8
    55c0:	af00      	add	r7, sp, #0
    55c2:	6078      	str	r0, [r7, #4]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg |= RTC_MODE0_CTRLA_SWRST;
    55c4:	687b      	ldr	r3, [r7, #4]
    55c6:	881b      	ldrh	r3, [r3, #0]
    55c8:	b29b      	uxth	r3, r3
    55ca:	f043 0301 	orr.w	r3, r3, #1
    55ce:	b29a      	uxth	r2, r3
    55d0:	687b      	ldr	r3, [r7, #4]
    55d2:	801a      	strh	r2, [r3, #0]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST);
    55d4:	2101      	movs	r1, #1
    55d6:	6878      	ldr	r0, [r7, #4]
    55d8:	4b02      	ldr	r3, [pc, #8]	; (55e4 <hri_rtcmode0_set_CTRLA_SWRST_bit+0x28>)
    55da:	4798      	blx	r3
	RTC_CRITICAL_SECTION_LEAVE();
}
    55dc:	bf00      	nop
    55de:	3708      	adds	r7, #8
    55e0:	46bd      	mov	sp, r7
    55e2:	bd80      	pop	{r7, pc}
    55e4:	0000552d 	.word	0x0000552d

000055e8 <hri_rtcmode0_get_CTRLA_ENABLE_bit>:
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
	RTC_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_rtcmode0_get_CTRLA_ENABLE_bit(const void *const hw)
{
    55e8:	b580      	push	{r7, lr}
    55ea:	b084      	sub	sp, #16
    55ec:	af00      	add	r7, sp, #0
    55ee:	6078      	str	r0, [r7, #4]
	uint16_t tmp;
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
    55f0:	f248 0103 	movw	r1, #32771	; 0x8003
    55f4:	6878      	ldr	r0, [r7, #4]
    55f6:	4b0a      	ldr	r3, [pc, #40]	; (5620 <hri_rtcmode0_get_CTRLA_ENABLE_bit+0x38>)
    55f8:	4798      	blx	r3
	tmp = ((Rtc *)hw)->MODE0.CTRLA.reg;
    55fa:	687b      	ldr	r3, [r7, #4]
    55fc:	881b      	ldrh	r3, [r3, #0]
    55fe:	81fb      	strh	r3, [r7, #14]
	tmp = (tmp & RTC_MODE0_CTRLA_ENABLE) >> RTC_MODE0_CTRLA_ENABLE_Pos;
    5600:	89fb      	ldrh	r3, [r7, #14]
    5602:	085b      	lsrs	r3, r3, #1
    5604:	b29b      	uxth	r3, r3
    5606:	f003 0301 	and.w	r3, r3, #1
    560a:	81fb      	strh	r3, [r7, #14]
	return (bool)tmp;
    560c:	89fb      	ldrh	r3, [r7, #14]
    560e:	2b00      	cmp	r3, #0
    5610:	bf14      	ite	ne
    5612:	2301      	movne	r3, #1
    5614:	2300      	moveq	r3, #0
    5616:	b2db      	uxtb	r3, r3
}
    5618:	4618      	mov	r0, r3
    561a:	3710      	adds	r7, #16
    561c:	46bd      	mov	sp, r7
    561e:	bd80      	pop	{r7, pc}
    5620:	0000552d 	.word	0x0000552d

00005624 <hri_rtcmode0_clear_CTRLA_ENABLE_bit>:
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
	RTC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_rtcmode0_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    5624:	b580      	push	{r7, lr}
    5626:	b082      	sub	sp, #8
    5628:	af00      	add	r7, sp, #0
    562a:	6078      	str	r0, [r7, #4]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg &= ~RTC_MODE0_CTRLA_ENABLE;
    562c:	687b      	ldr	r3, [r7, #4]
    562e:	881b      	ldrh	r3, [r3, #0]
    5630:	b29b      	uxth	r3, r3
    5632:	f023 0302 	bic.w	r3, r3, #2
    5636:	b29a      	uxth	r2, r3
    5638:	687b      	ldr	r3, [r7, #4]
    563a:	801a      	strh	r2, [r3, #0]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
    563c:	f248 0103 	movw	r1, #32771	; 0x8003
    5640:	6878      	ldr	r0, [r7, #4]
    5642:	4b03      	ldr	r3, [pc, #12]	; (5650 <hri_rtcmode0_clear_CTRLA_ENABLE_bit+0x2c>)
    5644:	4798      	blx	r3
	RTC_CRITICAL_SECTION_LEAVE();
}
    5646:	bf00      	nop
    5648:	3708      	adds	r7, #8
    564a:	46bd      	mov	sp, r7
    564c:	bd80      	pop	{r7, pc}
    564e:	bf00      	nop
    5650:	0000552d 	.word	0x0000552d

00005654 <hri_rtcmode0_write_CTRLA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_rtcmode0_write_CTRLA_reg(const void *const hw, hri_rtcmode0_ctrla_reg_t data)
{
    5654:	b580      	push	{r7, lr}
    5656:	b082      	sub	sp, #8
    5658:	af00      	add	r7, sp, #0
    565a:	6078      	str	r0, [r7, #4]
    565c:	460b      	mov	r3, r1
    565e:	807b      	strh	r3, [r7, #2]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg = data;
    5660:	687b      	ldr	r3, [r7, #4]
    5662:	887a      	ldrh	r2, [r7, #2]
    5664:	801a      	strh	r2, [r3, #0]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
    5666:	f248 0103 	movw	r1, #32771	; 0x8003
    566a:	6878      	ldr	r0, [r7, #4]
    566c:	4b02      	ldr	r3, [pc, #8]	; (5678 <hri_rtcmode0_write_CTRLA_reg+0x24>)
    566e:	4798      	blx	r3
	RTC_CRITICAL_SECTION_LEAVE();
}
    5670:	bf00      	nop
    5672:	3708      	adds	r7, #8
    5674:	46bd      	mov	sp, r7
    5676:	bd80      	pop	{r7, pc}
    5678:	0000552d 	.word	0x0000552d

0000567c <hri_rtc_write_TAMPCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_rtc_write_TAMPCTRL_reg(const void *const hw, hri_rtc_tampctrl_reg_t data)
{
    567c:	b480      	push	{r7}
    567e:	b083      	sub	sp, #12
    5680:	af00      	add	r7, sp, #0
    5682:	6078      	str	r0, [r7, #4]
    5684:	6039      	str	r1, [r7, #0]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.TAMPCTRL.reg = data;
    5686:	687b      	ldr	r3, [r7, #4]
    5688:	683a      	ldr	r2, [r7, #0]
    568a:	661a      	str	r2, [r3, #96]	; 0x60
	RTC_CRITICAL_SECTION_LEAVE();
}
    568c:	bf00      	nop
    568e:	370c      	adds	r7, #12
    5690:	46bd      	mov	sp, r7
    5692:	f85d 7b04 	ldr.w	r7, [sp], #4
    5696:	4770      	bx	lr

00005698 <_calendar_init>:

/**
 * \brief Initializes the RTC module with given configurations.
 */
int32_t _calendar_init(struct calendar_dev *const dev)
{
    5698:	b580      	push	{r7, lr}
    569a:	b082      	sub	sp, #8
    569c:	af00      	add	r7, sp, #0
    569e:	6078      	str	r0, [r7, #4]
	ASSERT(dev && dev->hw);
    56a0:	687b      	ldr	r3, [r7, #4]
    56a2:	2b00      	cmp	r3, #0
    56a4:	d005      	beq.n	56b2 <_calendar_init+0x1a>
    56a6:	687b      	ldr	r3, [r7, #4]
    56a8:	681b      	ldr	r3, [r3, #0]
    56aa:	2b00      	cmp	r3, #0
    56ac:	d001      	beq.n	56b2 <_calendar_init+0x1a>
    56ae:	2301      	movs	r3, #1
    56b0:	e000      	b.n	56b4 <_calendar_init+0x1c>
    56b2:	2300      	movs	r3, #0
    56b4:	f003 0301 	and.w	r3, r3, #1
    56b8:	b2db      	uxtb	r3, r3
    56ba:	222f      	movs	r2, #47	; 0x2f
    56bc:	491b      	ldr	r1, [pc, #108]	; (572c <_calendar_init+0x94>)
    56be:	4618      	mov	r0, r3
    56c0:	4b1b      	ldr	r3, [pc, #108]	; (5730 <_calendar_init+0x98>)
    56c2:	4798      	blx	r3

	_rtc_dev = dev;
    56c4:	4a1b      	ldr	r2, [pc, #108]	; (5734 <_calendar_init+0x9c>)
    56c6:	687b      	ldr	r3, [r7, #4]
    56c8:	6013      	str	r3, [r2, #0]

	if (hri_rtcmode0_get_CTRLA_ENABLE_bit(dev->hw)) {
    56ca:	687b      	ldr	r3, [r7, #4]
    56cc:	681b      	ldr	r3, [r3, #0]
    56ce:	4618      	mov	r0, r3
    56d0:	4b19      	ldr	r3, [pc, #100]	; (5738 <_calendar_init+0xa0>)
    56d2:	4798      	blx	r3
    56d4:	4603      	mov	r3, r0
    56d6:	2b00      	cmp	r3, #0
    56d8:	d00a      	beq.n	56f0 <_calendar_init+0x58>
#if !CONF_RTC_INIT_RESET
		return ERR_DENIED;
#else
		hri_rtcmode0_clear_CTRLA_ENABLE_bit(dev->hw);
    56da:	687b      	ldr	r3, [r7, #4]
    56dc:	681b      	ldr	r3, [r3, #0]
    56de:	4618      	mov	r0, r3
    56e0:	4b16      	ldr	r3, [pc, #88]	; (573c <_calendar_init+0xa4>)
    56e2:	4798      	blx	r3
		hri_rtcmode0_wait_for_sync(dev->hw, RTC_MODE0_SYNCBUSY_ENABLE);
    56e4:	687b      	ldr	r3, [r7, #4]
    56e6:	681b      	ldr	r3, [r3, #0]
    56e8:	2102      	movs	r1, #2
    56ea:	4618      	mov	r0, r3
    56ec:	4b14      	ldr	r3, [pc, #80]	; (5740 <_calendar_init+0xa8>)
    56ee:	4798      	blx	r3
#endif
	}
	hri_rtcmode0_set_CTRLA_SWRST_bit(dev->hw);
    56f0:	687b      	ldr	r3, [r7, #4]
    56f2:	681b      	ldr	r3, [r3, #0]
    56f4:	4618      	mov	r0, r3
    56f6:	4b13      	ldr	r3, [pc, #76]	; (5744 <_calendar_init+0xac>)
    56f8:	4798      	blx	r3
	hri_rtcmode0_wait_for_sync(dev->hw, RTC_MODE0_SYNCBUSY_SWRST);
    56fa:	687b      	ldr	r3, [r7, #4]
    56fc:	681b      	ldr	r3, [r3, #0]
    56fe:	2101      	movs	r1, #1
    5700:	4618      	mov	r0, r3
    5702:	4b0f      	ldr	r3, [pc, #60]	; (5740 <_calendar_init+0xa8>)
    5704:	4798      	blx	r3
	        | (CONF_RTC_COMPE0 << RTC_MODE0_EVCTRL_CMPEO_Pos) | (CONF_RTC_COMPE1 << RTC_MODE0_EVCTRL_CMPEO1_Pos)
	        | (CONF_RTC_TAMPEREO << RTC_MODE0_EVCTRL_TAMPEREO_Pos)
	        | (CONF_RTC_TAMPEVEI << RTC_MODE0_EVCTRL_TAMPEVEI_Pos) | (CONF_RTC_OVFEO << RTC_MODE0_EVCTRL_OVFEO_Pos));
#endif

	hri_rtcmode0_write_CTRLA_reg(dev->hw, RTC_MODE0_CTRLA_PRESCALER(CONF_RTC_PRESCALER) | RTC_MODE0_CTRLA_COUNTSYNC);
    5706:	687b      	ldr	r3, [r7, #4]
    5708:	681b      	ldr	r3, [r3, #0]
    570a:	f44f 410b 	mov.w	r1, #35584	; 0x8b00
    570e:	4618      	mov	r0, r3
    5710:	4b0d      	ldr	r3, [pc, #52]	; (5748 <_calendar_init+0xb0>)
    5712:	4798      	blx	r3

	hri_rtc_write_TAMPCTRL_reg(
	    dev->hw,
    5714:	687b      	ldr	r3, [r7, #4]
    5716:	681b      	ldr	r3, [r3, #0]
	hri_rtc_write_TAMPCTRL_reg(
    5718:	2100      	movs	r1, #0
    571a:	4618      	mov	r0, r3
    571c:	4b0b      	ldr	r3, [pc, #44]	; (574c <_calendar_init+0xb4>)
    571e:	4798      	blx	r3
	if ((CONF_RTC_TAMPER_INACT_0 == TAMPER_MODE_ACTL) | (CONF_RTC_TAMPER_INACT_1 == TAMPER_MODE_ACTL)
	    | (CONF_RTC_TAMPER_INACT_2 == TAMPER_MODE_ACTL) | (CONF_RTC_TAMPER_INACT_3 == TAMPER_MODE_ACTL)
	    | (CONF_RTC_TAMPER_INACT_4 == TAMPER_MODE_ACTL)) {
		hri_rtcmode0_set_CTRLB_RTCOUT_bit(dev->hw);
	}
	return ERR_NONE;
    5720:	2300      	movs	r3, #0
}
    5722:	4618      	mov	r0, r3
    5724:	3708      	adds	r7, #8
    5726:	46bd      	mov	sp, r7
    5728:	bd80      	pop	{r7, pc}
    572a:	bf00      	nop
    572c:	000134c8 	.word	0x000134c8
    5730:	00002dc9 	.word	0x00002dc9
    5734:	20000d34 	.word	0x20000d34
    5738:	000055e9 	.word	0x000055e9
    573c:	00005625 	.word	0x00005625
    5740:	0000552d 	.word	0x0000552d
    5744:	000055bd 	.word	0x000055bd
    5748:	00005655 	.word	0x00005655
    574c:	0000567d 	.word	0x0000567d

00005750 <_rtc_interrupt_handler>:
 * \brief RTC interrupt handler
 *
 * \param[in] dev The pointer to calendar device struct
 */
static void _rtc_interrupt_handler(struct calendar_dev *dev)
{
    5750:	b580      	push	{r7, lr}
    5752:	b084      	sub	sp, #16
    5754:	af00      	add	r7, sp, #0
    5756:	6078      	str	r0, [r7, #4]
	/* Read and mask interrupt flag register */
	uint16_t interrupt_status  = hri_rtcmode0_read_INTFLAG_reg(dev->hw);
    5758:	687b      	ldr	r3, [r7, #4]
    575a:	681b      	ldr	r3, [r3, #0]
    575c:	4618      	mov	r0, r3
    575e:	4b19      	ldr	r3, [pc, #100]	; (57c4 <_rtc_interrupt_handler+0x74>)
    5760:	4798      	blx	r3
    5762:	4603      	mov	r3, r0
    5764:	81fb      	strh	r3, [r7, #14]
	uint16_t interrupt_enabled = hri_rtcmode0_read_INTEN_reg(dev->hw);
    5766:	687b      	ldr	r3, [r7, #4]
    5768:	681b      	ldr	r3, [r3, #0]
    576a:	4618      	mov	r0, r3
    576c:	4b16      	ldr	r3, [pc, #88]	; (57c8 <_rtc_interrupt_handler+0x78>)
    576e:	4798      	blx	r3
    5770:	4603      	mov	r3, r0
    5772:	81bb      	strh	r3, [r7, #12]

	if ((interrupt_status & interrupt_enabled) & RTC_MODE2_INTFLAG_ALARM0) {
    5774:	89fa      	ldrh	r2, [r7, #14]
    5776:	89bb      	ldrh	r3, [r7, #12]
    5778:	4013      	ands	r3, r2
    577a:	b29b      	uxth	r3, r3
    577c:	f403 7380 	and.w	r3, r3, #256	; 0x100
    5780:	2b00      	cmp	r3, #0
    5782:	d009      	beq.n	5798 <_rtc_interrupt_handler+0x48>
		dev->callback(dev);
    5784:	687b      	ldr	r3, [r7, #4]
    5786:	685b      	ldr	r3, [r3, #4]
    5788:	6878      	ldr	r0, [r7, #4]
    578a:	4798      	blx	r3

		/* Clear interrupt flag */
		hri_rtcmode0_clear_interrupt_CMP0_bit(dev->hw);
    578c:	687b      	ldr	r3, [r7, #4]
    578e:	681b      	ldr	r3, [r3, #0]
    5790:	4618      	mov	r0, r3
    5792:	4b0e      	ldr	r3, [pc, #56]	; (57cc <_rtc_interrupt_handler+0x7c>)
    5794:	4798      	blx	r3
		dev->callback_tamper(dev);

		/* Clear interrupt flag */
		hri_rtcmode0_clear_interrupt_TAMPER_bit(dev->hw);
	}
}
    5796:	e010      	b.n	57ba <_rtc_interrupt_handler+0x6a>
	} else if ((interrupt_status & interrupt_enabled) & RTC_MODE2_INTFLAG_TAMPER) {
    5798:	89fa      	ldrh	r2, [r7, #14]
    579a:	89bb      	ldrh	r3, [r7, #12]
    579c:	4013      	ands	r3, r2
    579e:	b29b      	uxth	r3, r3
    57a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    57a4:	2b00      	cmp	r3, #0
    57a6:	d008      	beq.n	57ba <_rtc_interrupt_handler+0x6a>
		dev->callback_tamper(dev);
    57a8:	687b      	ldr	r3, [r7, #4]
    57aa:	689b      	ldr	r3, [r3, #8]
    57ac:	6878      	ldr	r0, [r7, #4]
    57ae:	4798      	blx	r3
		hri_rtcmode0_clear_interrupt_TAMPER_bit(dev->hw);
    57b0:	687b      	ldr	r3, [r7, #4]
    57b2:	681b      	ldr	r3, [r3, #0]
    57b4:	4618      	mov	r0, r3
    57b6:	4b06      	ldr	r3, [pc, #24]	; (57d0 <_rtc_interrupt_handler+0x80>)
    57b8:	4798      	blx	r3
}
    57ba:	bf00      	nop
    57bc:	3710      	adds	r7, #16
    57be:	46bd      	mov	sp, r7
    57c0:	bd80      	pop	{r7, pc}
    57c2:	bf00      	nop
    57c4:	00005589 	.word	0x00005589
    57c8:	000055a3 	.word	0x000055a3
    57cc:	00005551 	.word	0x00005551
    57d0:	0000556d 	.word	0x0000556d

000057d4 <RTC_Handler>:

/**
 * \brief Rtc interrupt handler
 */
void RTC_Handler(void)
{
    57d4:	b580      	push	{r7, lr}
    57d6:	af00      	add	r7, sp, #0
	_rtc_interrupt_handler(_rtc_dev);
    57d8:	4b03      	ldr	r3, [pc, #12]	; (57e8 <RTC_Handler+0x14>)
    57da:	681b      	ldr	r3, [r3, #0]
    57dc:	4618      	mov	r0, r3
    57de:	4b03      	ldr	r3, [pc, #12]	; (57ec <RTC_Handler+0x18>)
    57e0:	4798      	blx	r3
}
    57e2:	bf00      	nop
    57e4:	bd80      	pop	{r7, pc}
    57e6:	bf00      	nop
    57e8:	20000d34 	.word	0x20000d34
    57ec:	00005751 	.word	0x00005751

000057f0 <hri_sercomi2cm_wait_for_sync>:
typedef uint8_t  hri_sercomusart_intflag_reg_t;
typedef uint8_t  hri_sercomusart_rxerrcnt_reg_t;
typedef uint8_t  hri_sercomusart_rxpl_reg_t;

static inline void hri_sercomi2cm_wait_for_sync(const void *const hw, hri_sercomi2cm_syncbusy_reg_t reg)
{
    57f0:	b480      	push	{r7}
    57f2:	b083      	sub	sp, #12
    57f4:	af00      	add	r7, sp, #0
    57f6:	6078      	str	r0, [r7, #4]
    57f8:	6039      	str	r1, [r7, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    57fa:	bf00      	nop
    57fc:	687b      	ldr	r3, [r7, #4]
    57fe:	69da      	ldr	r2, [r3, #28]
    5800:	683b      	ldr	r3, [r7, #0]
    5802:	4013      	ands	r3, r2
    5804:	2b00      	cmp	r3, #0
    5806:	d1f9      	bne.n	57fc <hri_sercomi2cm_wait_for_sync+0xc>
	};
}
    5808:	bf00      	nop
    580a:	370c      	adds	r7, #12
    580c:	46bd      	mov	sp, r7
    580e:	f85d 7b04 	ldr.w	r7, [sp], #4
    5812:	4770      	bx	lr

00005814 <hri_sercomi2cm_is_syncing>:

static inline bool hri_sercomi2cm_is_syncing(const void *const hw, hri_sercomi2cm_syncbusy_reg_t reg)
{
    5814:	b480      	push	{r7}
    5816:	b083      	sub	sp, #12
    5818:	af00      	add	r7, sp, #0
    581a:	6078      	str	r0, [r7, #4]
    581c:	6039      	str	r1, [r7, #0]
	return ((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg;
    581e:	687b      	ldr	r3, [r7, #4]
    5820:	69da      	ldr	r2, [r3, #28]
    5822:	683b      	ldr	r3, [r7, #0]
    5824:	4013      	ands	r3, r2
    5826:	2b00      	cmp	r3, #0
    5828:	bf14      	ite	ne
    582a:	2301      	movne	r3, #1
    582c:	2300      	moveq	r3, #0
    582e:	b2db      	uxtb	r3, r3
}
    5830:	4618      	mov	r0, r3
    5832:	370c      	adds	r7, #12
    5834:	46bd      	mov	sp, r7
    5836:	f85d 7b04 	ldr.w	r7, [sp], #4
    583a:	4770      	bx	lr

0000583c <hri_sercomspi_wait_for_sync>:
{
	return ((Sercom *)hw)->I2CS.SYNCBUSY.reg & reg;
}

static inline void hri_sercomspi_wait_for_sync(const void *const hw, hri_sercomspi_syncbusy_reg_t reg)
{
    583c:	b480      	push	{r7}
    583e:	b083      	sub	sp, #12
    5840:	af00      	add	r7, sp, #0
    5842:	6078      	str	r0, [r7, #4]
    5844:	6039      	str	r1, [r7, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    5846:	bf00      	nop
    5848:	687b      	ldr	r3, [r7, #4]
    584a:	69da      	ldr	r2, [r3, #28]
    584c:	683b      	ldr	r3, [r7, #0]
    584e:	4013      	ands	r3, r2
    5850:	2b00      	cmp	r3, #0
    5852:	d1f9      	bne.n	5848 <hri_sercomspi_wait_for_sync+0xc>
	};
}
    5854:	bf00      	nop
    5856:	370c      	adds	r7, #12
    5858:	46bd      	mov	sp, r7
    585a:	f85d 7b04 	ldr.w	r7, [sp], #4
    585e:	4770      	bx	lr

00005860 <hri_sercomspi_is_syncing>:

static inline bool hri_sercomspi_is_syncing(const void *const hw, hri_sercomspi_syncbusy_reg_t reg)
{
    5860:	b480      	push	{r7}
    5862:	b083      	sub	sp, #12
    5864:	af00      	add	r7, sp, #0
    5866:	6078      	str	r0, [r7, #4]
    5868:	6039      	str	r1, [r7, #0]
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    586a:	687b      	ldr	r3, [r7, #4]
    586c:	69da      	ldr	r2, [r3, #28]
    586e:	683b      	ldr	r3, [r7, #0]
    5870:	4013      	ands	r3, r2
    5872:	2b00      	cmp	r3, #0
    5874:	bf14      	ite	ne
    5876:	2301      	movne	r3, #1
    5878:	2300      	moveq	r3, #0
    587a:	b2db      	uxtb	r3, r3
}
    587c:	4618      	mov	r0, r3
    587e:	370c      	adds	r7, #12
    5880:	46bd      	mov	sp, r7
    5882:	f85d 7b04 	ldr.w	r7, [sp], #4
    5886:	4770      	bx	lr

00005888 <hri_sercomi2cm_clear_interrupt_MB_bit>:
{
	return (((Sercom *)hw)->I2CM.INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) >> SERCOM_I2CM_INTFLAG_MB_Pos;
}

static inline void hri_sercomi2cm_clear_interrupt_MB_bit(const void *const hw)
{
    5888:	b480      	push	{r7}
    588a:	b083      	sub	sp, #12
    588c:	af00      	add	r7, sp, #0
    588e:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
    5890:	687b      	ldr	r3, [r7, #4]
    5892:	2201      	movs	r2, #1
    5894:	761a      	strb	r2, [r3, #24]
}
    5896:	bf00      	nop
    5898:	370c      	adds	r7, #12
    589a:	46bd      	mov	sp, r7
    589c:	f85d 7b04 	ldr.w	r7, [sp], #4
    58a0:	4770      	bx	lr

000058a2 <hri_sercomi2cm_clear_interrupt_SB_bit>:
{
	return (((Sercom *)hw)->I2CM.INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) >> SERCOM_I2CM_INTFLAG_SB_Pos;
}

static inline void hri_sercomi2cm_clear_interrupt_SB_bit(const void *const hw)
{
    58a2:	b480      	push	{r7}
    58a4:	b083      	sub	sp, #12
    58a6:	af00      	add	r7, sp, #0
    58a8:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    58aa:	687b      	ldr	r3, [r7, #4]
    58ac:	2202      	movs	r2, #2
    58ae:	761a      	strb	r2, [r3, #24]
}
    58b0:	bf00      	nop
    58b2:	370c      	adds	r7, #12
    58b4:	46bd      	mov	sp, r7
    58b6:	f85d 7b04 	ldr.w	r7, [sp], #4
    58ba:	4770      	bx	lr

000058bc <hri_sercomi2cm_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_sercomi2cm_intflag_reg_t hri_sercomi2cm_read_INTFLAG_reg(const void *const hw)
{
    58bc:	b480      	push	{r7}
    58be:	b083      	sub	sp, #12
    58c0:	af00      	add	r7, sp, #0
    58c2:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->I2CM.INTFLAG.reg;
    58c4:	687b      	ldr	r3, [r7, #4]
    58c6:	7e1b      	ldrb	r3, [r3, #24]
    58c8:	b2db      	uxtb	r3, r3
}
    58ca:	4618      	mov	r0, r3
    58cc:	370c      	adds	r7, #12
    58ce:	46bd      	mov	sp, r7
    58d0:	f85d 7b04 	ldr.w	r7, [sp], #4
    58d4:	4770      	bx	lr

000058d6 <hri_sercomspi_get_INTFLAG_reg>:
	((Sercom *)hw)->SPI.INTFLAG.reg = SERCOM_SPI_INTFLAG_ERROR;
}

static inline hri_sercomspi_intflag_reg_t hri_sercomspi_get_INTFLAG_reg(const void *const           hw,
                                                                        hri_sercomspi_intflag_reg_t mask)
{
    58d6:	b480      	push	{r7}
    58d8:	b085      	sub	sp, #20
    58da:	af00      	add	r7, sp, #0
    58dc:	6078      	str	r0, [r7, #4]
    58de:	460b      	mov	r3, r1
    58e0:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	tmp = ((Sercom *)hw)->SPI.INTFLAG.reg;
    58e2:	687b      	ldr	r3, [r7, #4]
    58e4:	7e1b      	ldrb	r3, [r3, #24]
    58e6:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    58e8:	7bfa      	ldrb	r2, [r7, #15]
    58ea:	78fb      	ldrb	r3, [r7, #3]
    58ec:	4013      	ands	r3, r2
    58ee:	73fb      	strb	r3, [r7, #15]
	return tmp;
    58f0:	7bfb      	ldrb	r3, [r7, #15]
}
    58f2:	4618      	mov	r0, r3
    58f4:	3714      	adds	r7, #20
    58f6:	46bd      	mov	sp, r7
    58f8:	f85d 7b04 	ldr.w	r7, [sp], #4
    58fc:	4770      	bx	lr

000058fe <hri_sercomspi_read_INTFLAG_reg>:

static inline hri_sercomspi_intflag_reg_t hri_sercomspi_read_INTFLAG_reg(const void *const hw)
{
    58fe:	b480      	push	{r7}
    5900:	b083      	sub	sp, #12
    5902:	af00      	add	r7, sp, #0
    5904:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->SPI.INTFLAG.reg;
    5906:	687b      	ldr	r3, [r7, #4]
    5908:	7e1b      	ldrb	r3, [r3, #24]
    590a:	b2db      	uxtb	r3, r3
}
    590c:	4618      	mov	r0, r3
    590e:	370c      	adds	r7, #12
    5910:	46bd      	mov	sp, r7
    5912:	f85d 7b04 	ldr.w	r7, [sp], #4
    5916:	4770      	bx	lr

00005918 <hri_sercomspi_clear_INTFLAG_reg>:

static inline void hri_sercomspi_clear_INTFLAG_reg(const void *const hw, hri_sercomspi_intflag_reg_t mask)
{
    5918:	b480      	push	{r7}
    591a:	b083      	sub	sp, #12
    591c:	af00      	add	r7, sp, #0
    591e:	6078      	str	r0, [r7, #4]
    5920:	460b      	mov	r3, r1
    5922:	70fb      	strb	r3, [r7, #3]
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    5924:	687b      	ldr	r3, [r7, #4]
    5926:	78fa      	ldrb	r2, [r7, #3]
    5928:	761a      	strb	r2, [r3, #24]
}
    592a:	bf00      	nop
    592c:	370c      	adds	r7, #12
    592e:	46bd      	mov	sp, r7
    5930:	f85d 7b04 	ldr.w	r7, [sp], #4
    5934:	4770      	bx	lr
	...

00005938 <hri_sercomi2cm_clear_CTRLA_ENABLE_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    5938:	b580      	push	{r7, lr}
    593a:	b082      	sub	sp, #8
    593c:	af00      	add	r7, sp, #0
    593e:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLA.reg &= ~SERCOM_I2CM_CTRLA_ENABLE;
    5940:	687b      	ldr	r3, [r7, #4]
    5942:	681b      	ldr	r3, [r3, #0]
    5944:	f023 0202 	bic.w	r2, r3, #2
    5948:	687b      	ldr	r3, [r7, #4]
    594a:	601a      	str	r2, [r3, #0]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
    594c:	2103      	movs	r1, #3
    594e:	6878      	ldr	r0, [r7, #4]
    5950:	4b02      	ldr	r3, [pc, #8]	; (595c <hri_sercomi2cm_clear_CTRLA_ENABLE_bit+0x24>)
    5952:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5954:	bf00      	nop
    5956:	3708      	adds	r7, #8
    5958:	46bd      	mov	sp, r7
    595a:	bd80      	pop	{r7, pc}
    595c:	000057f1 	.word	0x000057f1

00005960 <hri_sercomi2cm_get_CTRLA_SCLSM_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_MASK);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_sercomi2cm_get_CTRLA_SCLSM_bit(const void *const hw)
{
    5960:	b480      	push	{r7}
    5962:	b085      	sub	sp, #20
    5964:	af00      	add	r7, sp, #0
    5966:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    5968:	687b      	ldr	r3, [r7, #4]
    596a:	681b      	ldr	r3, [r3, #0]
    596c:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & SERCOM_I2CM_CTRLA_SCLSM) >> SERCOM_I2CM_CTRLA_SCLSM_Pos;
    596e:	68fb      	ldr	r3, [r7, #12]
    5970:	0edb      	lsrs	r3, r3, #27
    5972:	f003 0301 	and.w	r3, r3, #1
    5976:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    5978:	68fb      	ldr	r3, [r7, #12]
    597a:	2b00      	cmp	r3, #0
    597c:	bf14      	ite	ne
    597e:	2301      	movne	r3, #1
    5980:	2300      	moveq	r3, #0
    5982:	b2db      	uxtb	r3, r3
}
    5984:	4618      	mov	r0, r3
    5986:	3714      	adds	r7, #20
    5988:	46bd      	mov	sp, r7
    598a:	f85d 7b04 	ldr.w	r7, [sp], #4
    598e:	4770      	bx	lr

00005990 <hri_sercomi2cm_get_CTRLA_reg>:
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_ctrla_reg_t hri_sercomi2cm_get_CTRLA_reg(const void *const          hw,
                                                                      hri_sercomi2cm_ctrla_reg_t mask)
{
    5990:	b580      	push	{r7, lr}
    5992:	b084      	sub	sp, #16
    5994:	af00      	add	r7, sp, #0
    5996:	6078      	str	r0, [r7, #4]
    5998:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
    599a:	2103      	movs	r1, #3
    599c:	6878      	ldr	r0, [r7, #4]
    599e:	4b07      	ldr	r3, [pc, #28]	; (59bc <hri_sercomi2cm_get_CTRLA_reg+0x2c>)
    59a0:	4798      	blx	r3
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    59a2:	687b      	ldr	r3, [r7, #4]
    59a4:	681b      	ldr	r3, [r3, #0]
    59a6:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    59a8:	68fa      	ldr	r2, [r7, #12]
    59aa:	683b      	ldr	r3, [r7, #0]
    59ac:	4013      	ands	r3, r2
    59ae:	60fb      	str	r3, [r7, #12]
	return tmp;
    59b0:	68fb      	ldr	r3, [r7, #12]
}
    59b2:	4618      	mov	r0, r3
    59b4:	3710      	adds	r7, #16
    59b6:	46bd      	mov	sp, r7
    59b8:	bd80      	pop	{r7, pc}
    59ba:	bf00      	nop
    59bc:	000057f1 	.word	0x000057f1

000059c0 <hri_sercomi2cm_write_CTRLA_reg>:

static inline void hri_sercomi2cm_write_CTRLA_reg(const void *const hw, hri_sercomi2cm_ctrla_reg_t data)
{
    59c0:	b580      	push	{r7, lr}
    59c2:	b082      	sub	sp, #8
    59c4:	af00      	add	r7, sp, #0
    59c6:	6078      	str	r0, [r7, #4]
    59c8:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLA.reg = data;
    59ca:	687b      	ldr	r3, [r7, #4]
    59cc:	683a      	ldr	r2, [r7, #0]
    59ce:	601a      	str	r2, [r3, #0]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
    59d0:	2103      	movs	r1, #3
    59d2:	6878      	ldr	r0, [r7, #4]
    59d4:	4b02      	ldr	r3, [pc, #8]	; (59e0 <hri_sercomi2cm_write_CTRLA_reg+0x20>)
    59d6:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    59d8:	bf00      	nop
    59da:	3708      	adds	r7, #8
    59dc:	46bd      	mov	sp, r7
    59de:	bd80      	pop	{r7, pc}
    59e0:	000057f1 	.word	0x000057f1

000059e4 <hri_sercomspi_get_CTRLA_ENABLE_bit>:
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_sercomspi_get_CTRLA_ENABLE_bit(const void *const hw)
{
    59e4:	b580      	push	{r7, lr}
    59e6:	b084      	sub	sp, #16
    59e8:	af00      	add	r7, sp, #0
    59ea:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    59ec:	2103      	movs	r1, #3
    59ee:	6878      	ldr	r0, [r7, #4]
    59f0:	4b09      	ldr	r3, [pc, #36]	; (5a18 <hri_sercomspi_get_CTRLA_ENABLE_bit+0x34>)
    59f2:	4798      	blx	r3
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    59f4:	687b      	ldr	r3, [r7, #4]
    59f6:	681b      	ldr	r3, [r3, #0]
    59f8:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & SERCOM_SPI_CTRLA_ENABLE) >> SERCOM_SPI_CTRLA_ENABLE_Pos;
    59fa:	68fb      	ldr	r3, [r7, #12]
    59fc:	085b      	lsrs	r3, r3, #1
    59fe:	f003 0301 	and.w	r3, r3, #1
    5a02:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    5a04:	68fb      	ldr	r3, [r7, #12]
    5a06:	2b00      	cmp	r3, #0
    5a08:	bf14      	ite	ne
    5a0a:	2301      	movne	r3, #1
    5a0c:	2300      	moveq	r3, #0
    5a0e:	b2db      	uxtb	r3, r3
}
    5a10:	4618      	mov	r0, r3
    5a12:	3710      	adds	r7, #16
    5a14:	46bd      	mov	sp, r7
    5a16:	bd80      	pop	{r7, pc}
    5a18:	0000583d 	.word	0x0000583d

00005a1c <hri_sercomspi_clear_CTRLA_ENABLE_bit>:
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomspi_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    5a1c:	b580      	push	{r7, lr}
    5a1e:	b082      	sub	sp, #8
    5a20:	af00      	add	r7, sp, #0
    5a22:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    5a24:	687b      	ldr	r3, [r7, #4]
    5a26:	681b      	ldr	r3, [r3, #0]
    5a28:	f023 0202 	bic.w	r2, r3, #2
    5a2c:	687b      	ldr	r3, [r7, #4]
    5a2e:	601a      	str	r2, [r3, #0]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    5a30:	2103      	movs	r1, #3
    5a32:	6878      	ldr	r0, [r7, #4]
    5a34:	4b02      	ldr	r3, [pc, #8]	; (5a40 <hri_sercomspi_clear_CTRLA_ENABLE_bit+0x24>)
    5a36:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5a38:	bf00      	nop
    5a3a:	3708      	adds	r7, #8
    5a3c:	46bd      	mov	sp, r7
    5a3e:	bd80      	pop	{r7, pc}
    5a40:	0000583d 	.word	0x0000583d

00005a44 <hri_sercomspi_get_CTRLA_reg>:
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomspi_ctrla_reg_t hri_sercomspi_get_CTRLA_reg(const void *const         hw,
                                                                    hri_sercomspi_ctrla_reg_t mask)
{
    5a44:	b580      	push	{r7, lr}
    5a46:	b084      	sub	sp, #16
    5a48:	af00      	add	r7, sp, #0
    5a4a:	6078      	str	r0, [r7, #4]
    5a4c:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    5a4e:	2103      	movs	r1, #3
    5a50:	6878      	ldr	r0, [r7, #4]
    5a52:	4b07      	ldr	r3, [pc, #28]	; (5a70 <hri_sercomspi_get_CTRLA_reg+0x2c>)
    5a54:	4798      	blx	r3
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    5a56:	687b      	ldr	r3, [r7, #4]
    5a58:	681b      	ldr	r3, [r3, #0]
    5a5a:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    5a5c:	68fa      	ldr	r2, [r7, #12]
    5a5e:	683b      	ldr	r3, [r7, #0]
    5a60:	4013      	ands	r3, r2
    5a62:	60fb      	str	r3, [r7, #12]
	return tmp;
    5a64:	68fb      	ldr	r3, [r7, #12]
}
    5a66:	4618      	mov	r0, r3
    5a68:	3710      	adds	r7, #16
    5a6a:	46bd      	mov	sp, r7
    5a6c:	bd80      	pop	{r7, pc}
    5a6e:	bf00      	nop
    5a70:	0000583d 	.word	0x0000583d

00005a74 <hri_sercomspi_write_CTRLA_reg>:

static inline void hri_sercomspi_write_CTRLA_reg(const void *const hw, hri_sercomspi_ctrla_reg_t data)
{
    5a74:	b580      	push	{r7, lr}
    5a76:	b082      	sub	sp, #8
    5a78:	af00      	add	r7, sp, #0
    5a7a:	6078      	str	r0, [r7, #4]
    5a7c:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    5a7e:	687b      	ldr	r3, [r7, #4]
    5a80:	683a      	ldr	r2, [r7, #0]
    5a82:	601a      	str	r2, [r3, #0]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    5a84:	2103      	movs	r1, #3
    5a86:	6878      	ldr	r0, [r7, #4]
    5a88:	4b02      	ldr	r3, [pc, #8]	; (5a94 <hri_sercomspi_write_CTRLA_reg+0x20>)
    5a8a:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5a8c:	bf00      	nop
    5a8e:	3708      	adds	r7, #8
    5a90:	46bd      	mov	sp, r7
    5a92:	bd80      	pop	{r7, pc}
    5a94:	0000583d 	.word	0x0000583d

00005a98 <hri_sercomi2cm_set_CTRLB_SMEN_bit>:
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
	return ((Sercom *)hw)->USART.CTRLA.reg;
}

static inline void hri_sercomi2cm_set_CTRLB_SMEN_bit(const void *const hw)
{
    5a98:	b580      	push	{r7, lr}
    5a9a:	b082      	sub	sp, #8
    5a9c:	af00      	add	r7, sp, #0
    5a9e:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_SMEN;
    5aa0:	687b      	ldr	r3, [r7, #4]
    5aa2:	685b      	ldr	r3, [r3, #4]
    5aa4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
    5aa8:	687b      	ldr	r3, [r7, #4]
    5aaa:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    5aac:	2104      	movs	r1, #4
    5aae:	6878      	ldr	r0, [r7, #4]
    5ab0:	4b02      	ldr	r3, [pc, #8]	; (5abc <hri_sercomi2cm_set_CTRLB_SMEN_bit+0x24>)
    5ab2:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5ab4:	bf00      	nop
    5ab6:	3708      	adds	r7, #8
    5ab8:	46bd      	mov	sp, r7
    5aba:	bd80      	pop	{r7, pc}
    5abc:	000057f1 	.word	0x000057f1

00005ac0 <hri_sercomi2cm_clear_CTRLB_SMEN_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_clear_CTRLB_SMEN_bit(const void *const hw)
{
    5ac0:	b580      	push	{r7, lr}
    5ac2:	b082      	sub	sp, #8
    5ac4:	af00      	add	r7, sp, #0
    5ac6:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_SMEN;
    5ac8:	687b      	ldr	r3, [r7, #4]
    5aca:	685b      	ldr	r3, [r3, #4]
    5acc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
    5ad0:	687b      	ldr	r3, [r7, #4]
    5ad2:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    5ad4:	2104      	movs	r1, #4
    5ad6:	6878      	ldr	r0, [r7, #4]
    5ad8:	4b02      	ldr	r3, [pc, #8]	; (5ae4 <hri_sercomi2cm_clear_CTRLB_SMEN_bit+0x24>)
    5ada:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5adc:	bf00      	nop
    5ade:	3708      	adds	r7, #8
    5ae0:	46bd      	mov	sp, r7
    5ae2:	bd80      	pop	{r7, pc}
    5ae4:	000057f1 	.word	0x000057f1

00005ae8 <hri_sercomi2cm_set_CTRLB_ACKACT_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_set_CTRLB_ACKACT_bit(const void *const hw)
{
    5ae8:	b580      	push	{r7, lr}
    5aea:	b082      	sub	sp, #8
    5aec:	af00      	add	r7, sp, #0
    5aee:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    5af0:	687b      	ldr	r3, [r7, #4]
    5af2:	685b      	ldr	r3, [r3, #4]
    5af4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
    5af8:	687b      	ldr	r3, [r7, #4]
    5afa:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    5afc:	2104      	movs	r1, #4
    5afe:	6878      	ldr	r0, [r7, #4]
    5b00:	4b02      	ldr	r3, [pc, #8]	; (5b0c <hri_sercomi2cm_set_CTRLB_ACKACT_bit+0x24>)
    5b02:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5b04:	bf00      	nop
    5b06:	3708      	adds	r7, #8
    5b08:	46bd      	mov	sp, r7
    5b0a:	bd80      	pop	{r7, pc}
    5b0c:	000057f1 	.word	0x000057f1

00005b10 <hri_sercomi2cm_clear_CTRLB_ACKACT_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_clear_CTRLB_ACKACT_bit(const void *const hw)
{
    5b10:	b580      	push	{r7, lr}
    5b12:	b082      	sub	sp, #8
    5b14:	af00      	add	r7, sp, #0
    5b16:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    5b18:	687b      	ldr	r3, [r7, #4]
    5b1a:	685b      	ldr	r3, [r3, #4]
    5b1c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
    5b20:	687b      	ldr	r3, [r7, #4]
    5b22:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    5b24:	2104      	movs	r1, #4
    5b26:	6878      	ldr	r0, [r7, #4]
    5b28:	4b02      	ldr	r3, [pc, #8]	; (5b34 <hri_sercomi2cm_clear_CTRLB_ACKACT_bit+0x24>)
    5b2a:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5b2c:	bf00      	nop
    5b2e:	3708      	adds	r7, #8
    5b30:	46bd      	mov	sp, r7
    5b32:	bd80      	pop	{r7, pc}
    5b34:	000057f1 	.word	0x000057f1

00005b38 <hri_sercomi2cm_set_CTRLB_CMD_bf>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_set_CTRLB_CMD_bf(const void *const hw, hri_sercomi2cm_ctrlb_reg_t mask)
{
    5b38:	b580      	push	{r7, lr}
    5b3a:	b082      	sub	sp, #8
    5b3c:	af00      	add	r7, sp, #0
    5b3e:	6078      	str	r0, [r7, #4]
    5b40:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    5b42:	687b      	ldr	r3, [r7, #4]
    5b44:	685a      	ldr	r2, [r3, #4]
    5b46:	683b      	ldr	r3, [r7, #0]
    5b48:	041b      	lsls	r3, r3, #16
    5b4a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
    5b4e:	431a      	orrs	r2, r3
    5b50:	687b      	ldr	r3, [r7, #4]
    5b52:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    5b54:	2104      	movs	r1, #4
    5b56:	6878      	ldr	r0, [r7, #4]
    5b58:	4b02      	ldr	r3, [pc, #8]	; (5b64 <hri_sercomi2cm_set_CTRLB_CMD_bf+0x2c>)
    5b5a:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5b5c:	bf00      	nop
    5b5e:	3708      	adds	r7, #8
    5b60:	46bd      	mov	sp, r7
    5b62:	bd80      	pop	{r7, pc}
    5b64:	000057f1 	.word	0x000057f1

00005b68 <hri_sercomi2cm_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_CTRLB_reg(const void *const hw, hri_sercomi2cm_ctrlb_reg_t data)
{
    5b68:	b580      	push	{r7, lr}
    5b6a:	b082      	sub	sp, #8
    5b6c:	af00      	add	r7, sp, #0
    5b6e:	6078      	str	r0, [r7, #4]
    5b70:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg = data;
    5b72:	687b      	ldr	r3, [r7, #4]
    5b74:	683a      	ldr	r2, [r7, #0]
    5b76:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    5b78:	2104      	movs	r1, #4
    5b7a:	6878      	ldr	r0, [r7, #4]
    5b7c:	4b02      	ldr	r3, [pc, #8]	; (5b88 <hri_sercomi2cm_write_CTRLB_reg+0x20>)
    5b7e:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5b80:	bf00      	nop
    5b82:	3708      	adds	r7, #8
    5b84:	46bd      	mov	sp, r7
    5b86:	bd80      	pop	{r7, pc}
    5b88:	000057f1 	.word	0x000057f1

00005b8c <hri_sercomspi_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_CTRLB_reg(const void *const hw, hri_sercomspi_ctrlb_reg_t data)
{
    5b8c:	b580      	push	{r7, lr}
    5b8e:	b082      	sub	sp, #8
    5b90:	af00      	add	r7, sp, #0
    5b92:	6078      	str	r0, [r7, #4]
    5b94:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    5b96:	687b      	ldr	r3, [r7, #4]
    5b98:	683a      	ldr	r2, [r7, #0]
    5b9a:	605a      	str	r2, [r3, #4]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_MASK);
    5b9c:	2117      	movs	r1, #23
    5b9e:	6878      	ldr	r0, [r7, #4]
    5ba0:	4b02      	ldr	r3, [pc, #8]	; (5bac <hri_sercomspi_write_CTRLB_reg+0x20>)
    5ba2:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5ba4:	bf00      	nop
    5ba6:	3708      	adds	r7, #8
    5ba8:	46bd      	mov	sp, r7
    5baa:	bd80      	pop	{r7, pc}
    5bac:	0000583d 	.word	0x0000583d

00005bb0 <hri_sercomi2cm_write_BAUD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_BAUD_reg(const void *const hw, hri_sercomi2cm_baud_reg_t data)
{
    5bb0:	b480      	push	{r7}
    5bb2:	b083      	sub	sp, #12
    5bb4:	af00      	add	r7, sp, #0
    5bb6:	6078      	str	r0, [r7, #4]
    5bb8:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.BAUD.reg = data;
    5bba:	687b      	ldr	r3, [r7, #4]
    5bbc:	683a      	ldr	r2, [r7, #0]
    5bbe:	60da      	str	r2, [r3, #12]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5bc0:	bf00      	nop
    5bc2:	370c      	adds	r7, #12
    5bc4:	46bd      	mov	sp, r7
    5bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
    5bca:	4770      	bx	lr

00005bcc <hri_sercomspi_write_BAUD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_BAUD_reg(const void *const hw, hri_sercomspi_baud_reg_t data)
{
    5bcc:	b480      	push	{r7}
    5bce:	b083      	sub	sp, #12
    5bd0:	af00      	add	r7, sp, #0
    5bd2:	6078      	str	r0, [r7, #4]
    5bd4:	460b      	mov	r3, r1
    5bd6:	70fb      	strb	r3, [r7, #3]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.BAUD.reg = data;
    5bd8:	687b      	ldr	r3, [r7, #4]
    5bda:	78fa      	ldrb	r2, [r7, #3]
    5bdc:	731a      	strb	r2, [r3, #12]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5bde:	bf00      	nop
    5be0:	370c      	adds	r7, #12
    5be2:	46bd      	mov	sp, r7
    5be4:	f85d 7b04 	ldr.w	r7, [sp], #4
    5be8:	4770      	bx	lr
	...

00005bec <hri_sercomi2cm_write_ADDR_HS_bit>:
	tmp = (tmp & SERCOM_I2CM_ADDR_HS) >> SERCOM_I2CM_ADDR_HS_Pos;
	return (bool)tmp;
}

static inline void hri_sercomi2cm_write_ADDR_HS_bit(const void *const hw, bool value)
{
    5bec:	b580      	push	{r7, lr}
    5bee:	b084      	sub	sp, #16
    5bf0:	af00      	add	r7, sp, #0
    5bf2:	6078      	str	r0, [r7, #4]
    5bf4:	460b      	mov	r3, r1
    5bf6:	70fb      	strb	r3, [r7, #3]
	uint32_t tmp;
	SERCOM_CRITICAL_SECTION_ENTER();
	tmp = ((Sercom *)hw)->I2CM.ADDR.reg;
    5bf8:	687b      	ldr	r3, [r7, #4]
    5bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    5bfc:	60fb      	str	r3, [r7, #12]
	tmp &= ~SERCOM_I2CM_ADDR_HS;
    5bfe:	68fb      	ldr	r3, [r7, #12]
    5c00:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    5c04:	60fb      	str	r3, [r7, #12]
	tmp |= value << SERCOM_I2CM_ADDR_HS_Pos;
    5c06:	78fb      	ldrb	r3, [r7, #3]
    5c08:	039b      	lsls	r3, r3, #14
    5c0a:	461a      	mov	r2, r3
    5c0c:	68fb      	ldr	r3, [r7, #12]
    5c0e:	4313      	orrs	r3, r2
    5c10:	60fb      	str	r3, [r7, #12]
	((Sercom *)hw)->I2CM.ADDR.reg = tmp;
    5c12:	687b      	ldr	r3, [r7, #4]
    5c14:	68fa      	ldr	r2, [r7, #12]
    5c16:	625a      	str	r2, [r3, #36]	; 0x24
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    5c18:	2104      	movs	r1, #4
    5c1a:	6878      	ldr	r0, [r7, #4]
    5c1c:	4b02      	ldr	r3, [pc, #8]	; (5c28 <hri_sercomi2cm_write_ADDR_HS_bit+0x3c>)
    5c1e:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5c20:	bf00      	nop
    5c22:	3710      	adds	r7, #16
    5c24:	46bd      	mov	sp, r7
    5c26:	bd80      	pop	{r7, pc}
    5c28:	000057f1 	.word	0x000057f1

00005c2c <hri_sercomi2cm_write_ADDR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_ADDR_reg(const void *const hw, hri_sercomi2cm_addr_reg_t data)
{
    5c2c:	b580      	push	{r7, lr}
    5c2e:	b082      	sub	sp, #8
    5c30:	af00      	add	r7, sp, #0
    5c32:	6078      	str	r0, [r7, #4]
    5c34:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    5c36:	687b      	ldr	r3, [r7, #4]
    5c38:	683a      	ldr	r2, [r7, #0]
    5c3a:	625a      	str	r2, [r3, #36]	; 0x24
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    5c3c:	2104      	movs	r1, #4
    5c3e:	6878      	ldr	r0, [r7, #4]
    5c40:	4b02      	ldr	r3, [pc, #8]	; (5c4c <hri_sercomi2cm_write_ADDR_reg+0x20>)
    5c42:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5c44:	bf00      	nop
    5c46:	3708      	adds	r7, #8
    5c48:	46bd      	mov	sp, r7
    5c4a:	bd80      	pop	{r7, pc}
    5c4c:	000057f1 	.word	0x000057f1

00005c50 <hri_sercomi2cm_read_ADDR_reg>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_addr_reg_t hri_sercomi2cm_read_ADDR_reg(const void *const hw)
{
    5c50:	b580      	push	{r7, lr}
    5c52:	b082      	sub	sp, #8
    5c54:	af00      	add	r7, sp, #0
    5c56:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    5c58:	2104      	movs	r1, #4
    5c5a:	6878      	ldr	r0, [r7, #4]
    5c5c:	4b03      	ldr	r3, [pc, #12]	; (5c6c <hri_sercomi2cm_read_ADDR_reg+0x1c>)
    5c5e:	4798      	blx	r3
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    5c60:	687b      	ldr	r3, [r7, #4]
    5c62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
    5c64:	4618      	mov	r0, r3
    5c66:	3708      	adds	r7, #8
    5c68:	46bd      	mov	sp, r7
    5c6a:	bd80      	pop	{r7, pc}
    5c6c:	000057f1 	.word	0x000057f1

00005c70 <hri_sercomspi_write_ADDR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_ADDR_reg(const void *const hw, hri_sercomspi_addr_reg_t data)
{
    5c70:	b480      	push	{r7}
    5c72:	b083      	sub	sp, #12
    5c74:	af00      	add	r7, sp, #0
    5c76:	6078      	str	r0, [r7, #4]
    5c78:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.ADDR.reg = data;
    5c7a:	687b      	ldr	r3, [r7, #4]
    5c7c:	683a      	ldr	r2, [r7, #0]
    5c7e:	625a      	str	r2, [r3, #36]	; 0x24
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5c80:	bf00      	nop
    5c82:	370c      	adds	r7, #12
    5c84:	46bd      	mov	sp, r7
    5c86:	f85d 7b04 	ldr.w	r7, [sp], #4
    5c8a:	4770      	bx	lr

00005c8c <hri_sercomi2cm_write_DATA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_DATA_reg(const void *const hw, hri_sercomi2cm_data_reg_t data)
{
    5c8c:	b580      	push	{r7, lr}
    5c8e:	b082      	sub	sp, #8
    5c90:	af00      	add	r7, sp, #0
    5c92:	6078      	str	r0, [r7, #4]
    5c94:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.DATA.reg = data;
    5c96:	687b      	ldr	r3, [r7, #4]
    5c98:	683a      	ldr	r2, [r7, #0]
    5c9a:	629a      	str	r2, [r3, #40]	; 0x28
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    5c9c:	2104      	movs	r1, #4
    5c9e:	6878      	ldr	r0, [r7, #4]
    5ca0:	4b02      	ldr	r3, [pc, #8]	; (5cac <hri_sercomi2cm_write_DATA_reg+0x20>)
    5ca2:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5ca4:	bf00      	nop
    5ca6:	3708      	adds	r7, #8
    5ca8:	46bd      	mov	sp, r7
    5caa:	bd80      	pop	{r7, pc}
    5cac:	000057f1 	.word	0x000057f1

00005cb0 <hri_sercomi2cm_read_DATA_reg>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_data_reg_t hri_sercomi2cm_read_DATA_reg(const void *const hw)
{
    5cb0:	b580      	push	{r7, lr}
    5cb2:	b082      	sub	sp, #8
    5cb4:	af00      	add	r7, sp, #0
    5cb6:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    5cb8:	2104      	movs	r1, #4
    5cba:	6878      	ldr	r0, [r7, #4]
    5cbc:	4b03      	ldr	r3, [pc, #12]	; (5ccc <hri_sercomi2cm_read_DATA_reg+0x1c>)
    5cbe:	4798      	blx	r3
	return ((Sercom *)hw)->I2CM.DATA.reg;
    5cc0:	687b      	ldr	r3, [r7, #4]
    5cc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
    5cc4:	4618      	mov	r0, r3
    5cc6:	3708      	adds	r7, #8
    5cc8:	46bd      	mov	sp, r7
    5cca:	bd80      	pop	{r7, pc}
    5ccc:	000057f1 	.word	0x000057f1

00005cd0 <hri_sercomspi_write_DATA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_DATA_reg(const void *const hw, hri_sercomspi_data_reg_t data)
{
    5cd0:	b480      	push	{r7}
    5cd2:	b083      	sub	sp, #12
    5cd4:	af00      	add	r7, sp, #0
    5cd6:	6078      	str	r0, [r7, #4]
    5cd8:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.DATA.reg = data;
    5cda:	687b      	ldr	r3, [r7, #4]
    5cdc:	683a      	ldr	r2, [r7, #0]
    5cde:	629a      	str	r2, [r3, #40]	; 0x28
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5ce0:	bf00      	nop
    5ce2:	370c      	adds	r7, #12
    5ce4:	46bd      	mov	sp, r7
    5ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
    5cea:	4770      	bx	lr

00005cec <hri_sercomspi_read_DATA_reg>:
	((Sercom *)hw)->SPI.DATA.reg ^= mask;
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomspi_data_reg_t hri_sercomspi_read_DATA_reg(const void *const hw)
{
    5cec:	b480      	push	{r7}
    5cee:	b083      	sub	sp, #12
    5cf0:	af00      	add	r7, sp, #0
    5cf2:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->SPI.DATA.reg;
    5cf4:	687b      	ldr	r3, [r7, #4]
    5cf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
    5cf8:	4618      	mov	r0, r3
    5cfa:	370c      	adds	r7, #12
    5cfc:	46bd      	mov	sp, r7
    5cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
    5d02:	4770      	bx	lr

00005d04 <hri_sercomspi_write_DBGCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_DBGCTRL_reg(const void *const hw, hri_sercomspi_dbgctrl_reg_t data)
{
    5d04:	b480      	push	{r7}
    5d06:	b083      	sub	sp, #12
    5d08:	af00      	add	r7, sp, #0
    5d0a:	6078      	str	r0, [r7, #4]
    5d0c:	460b      	mov	r3, r1
    5d0e:	70fb      	strb	r3, [r7, #3]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    5d10:	687b      	ldr	r3, [r7, #4]
    5d12:	78fa      	ldrb	r2, [r7, #3]
    5d14:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5d18:	bf00      	nop
    5d1a:	370c      	adds	r7, #12
    5d1c:	46bd      	mov	sp, r7
    5d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
    5d22:	4770      	bx	lr

00005d24 <hri_sercomspi_clear_STATUS_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_clear_STATUS_reg(const void *const hw, hri_sercomspi_status_reg_t mask)
{
    5d24:	b480      	push	{r7}
    5d26:	b083      	sub	sp, #12
    5d28:	af00      	add	r7, sp, #0
    5d2a:	6078      	str	r0, [r7, #4]
    5d2c:	460b      	mov	r3, r1
    5d2e:	807b      	strh	r3, [r7, #2]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.STATUS.reg = mask;
    5d30:	687b      	ldr	r3, [r7, #4]
    5d32:	887a      	ldrh	r2, [r7, #2]
    5d34:	835a      	strh	r2, [r3, #26]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5d36:	bf00      	nop
    5d38:	370c      	adds	r7, #12
    5d3a:	46bd      	mov	sp, r7
    5d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
    5d40:	4770      	bx	lr
	...

00005d44 <hri_sercomi2cm_read_STATUS_reg>:
{
	((Sercom *)hw)->I2CM.STATUS.reg |= mask;
}

static inline hri_sercomi2cm_status_reg_t hri_sercomi2cm_read_STATUS_reg(const void *const hw)
{
    5d44:	b580      	push	{r7, lr}
    5d46:	b082      	sub	sp, #8
    5d48:	af00      	add	r7, sp, #0
    5d4a:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    5d4c:	2104      	movs	r1, #4
    5d4e:	6878      	ldr	r0, [r7, #4]
    5d50:	4b04      	ldr	r3, [pc, #16]	; (5d64 <hri_sercomi2cm_read_STATUS_reg+0x20>)
    5d52:	4798      	blx	r3
	return ((Sercom *)hw)->I2CM.STATUS.reg;
    5d54:	687b      	ldr	r3, [r7, #4]
    5d56:	8b5b      	ldrh	r3, [r3, #26]
    5d58:	b29b      	uxth	r3, r3
}
    5d5a:	4618      	mov	r0, r3
    5d5c:	3708      	adds	r7, #8
    5d5e:	46bd      	mov	sp, r7
    5d60:	bd80      	pop	{r7, pc}
    5d62:	bf00      	nop
    5d64:	000057f1 	.word	0x000057f1

00005d68 <_sercom_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given sercom hardware instance
 */
static uint8_t _sercom_get_hardware_index(const void *const hw)
{
    5d68:	b4b0      	push	{r4, r5, r7}
    5d6a:	b08d      	sub	sp, #52	; 0x34
    5d6c:	af00      	add	r7, sp, #0
    5d6e:	6078      	str	r0, [r7, #4]
	Sercom *const sercom_modules[] = SERCOM_INSTS;
    5d70:	4b13      	ldr	r3, [pc, #76]	; (5dc0 <_sercom_get_hardware_index+0x58>)
    5d72:	f107 040c 	add.w	r4, r7, #12
    5d76:	461d      	mov	r5, r3
    5d78:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    5d7a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    5d7c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    5d80:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	/* Find index for SERCOM instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    5d84:	2300      	movs	r3, #0
    5d86:	62fb      	str	r3, [r7, #44]	; 0x2c
    5d88:	e010      	b.n	5dac <_sercom_get_hardware_index+0x44>
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
    5d8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    5d8c:	009b      	lsls	r3, r3, #2
    5d8e:	f107 0230 	add.w	r2, r7, #48	; 0x30
    5d92:	4413      	add	r3, r2
    5d94:	f853 3c24 	ldr.w	r3, [r3, #-36]
    5d98:	461a      	mov	r2, r3
    5d9a:	687b      	ldr	r3, [r7, #4]
    5d9c:	429a      	cmp	r2, r3
    5d9e:	d102      	bne.n	5da6 <_sercom_get_hardware_index+0x3e>
			return i;
    5da0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    5da2:	b2db      	uxtb	r3, r3
    5da4:	e006      	b.n	5db4 <_sercom_get_hardware_index+0x4c>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    5da6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    5da8:	3301      	adds	r3, #1
    5daa:	62fb      	str	r3, [r7, #44]	; 0x2c
    5dac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    5dae:	2b07      	cmp	r3, #7
    5db0:	d9eb      	bls.n	5d8a <_sercom_get_hardware_index+0x22>
		}
	}
	return 0;
    5db2:	2300      	movs	r3, #0
}
    5db4:	4618      	mov	r0, r3
    5db6:	3734      	adds	r7, #52	; 0x34
    5db8:	46bd      	mov	sp, r7
    5dba:	bcb0      	pop	{r4, r5, r7}
    5dbc:	4770      	bx	lr
    5dbe:	bf00      	nop
    5dc0:	000134fc 	.word	0x000134fc

00005dc4 <_get_i2cm_index>:
 * \param[in] hw The pointer to hardware instance

 * \return The ordinal number of the given sercom hardware instance
 */
static int8_t _get_i2cm_index(const void *const hw)
{
    5dc4:	b580      	push	{r7, lr}
    5dc6:	b084      	sub	sp, #16
    5dc8:	af00      	add	r7, sp, #0
    5dca:	6078      	str	r0, [r7, #4]
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
    5dcc:	6878      	ldr	r0, [r7, #4]
    5dce:	4b13      	ldr	r3, [pc, #76]	; (5e1c <_get_i2cm_index+0x58>)
    5dd0:	4798      	blx	r3
    5dd2:	4603      	mov	r3, r0
    5dd4:	73bb      	strb	r3, [r7, #14]
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_i2cms); i++) {
    5dd6:	2300      	movs	r3, #0
    5dd8:	73fb      	strb	r3, [r7, #15]
    5dda:	e010      	b.n	5dfe <_get_i2cm_index+0x3a>
		if (_i2cms[i].number == sercom_offset) {
    5ddc:	7bfa      	ldrb	r2, [r7, #15]
    5dde:	4910      	ldr	r1, [pc, #64]	; (5e20 <_get_i2cm_index+0x5c>)
    5de0:	4613      	mov	r3, r2
    5de2:	005b      	lsls	r3, r3, #1
    5de4:	4413      	add	r3, r2
    5de6:	00db      	lsls	r3, r3, #3
    5de8:	440b      	add	r3, r1
    5dea:	781b      	ldrb	r3, [r3, #0]
    5dec:	7bba      	ldrb	r2, [r7, #14]
    5dee:	429a      	cmp	r2, r3
    5df0:	d102      	bne.n	5df8 <_get_i2cm_index+0x34>
			return i;
    5df2:	f997 300f 	ldrsb.w	r3, [r7, #15]
    5df6:	e00d      	b.n	5e14 <_get_i2cm_index+0x50>
	for (i = 0; i < ARRAY_SIZE(_i2cms); i++) {
    5df8:	7bfb      	ldrb	r3, [r7, #15]
    5dfa:	3301      	adds	r3, #1
    5dfc:	73fb      	strb	r3, [r7, #15]
    5dfe:	7bfb      	ldrb	r3, [r7, #15]
    5e00:	2b02      	cmp	r3, #2
    5e02:	d9eb      	bls.n	5ddc <_get_i2cm_index+0x18>
		}
	}

	ASSERT(false);
    5e04:	f240 32a6 	movw	r2, #934	; 0x3a6
    5e08:	4906      	ldr	r1, [pc, #24]	; (5e24 <_get_i2cm_index+0x60>)
    5e0a:	2000      	movs	r0, #0
    5e0c:	4b06      	ldr	r3, [pc, #24]	; (5e28 <_get_i2cm_index+0x64>)
    5e0e:	4798      	blx	r3
	return -1;
    5e10:	f04f 33ff 	mov.w	r3, #4294967295
}
    5e14:	4618      	mov	r0, r3
    5e16:	3710      	adds	r7, #16
    5e18:	46bd      	mov	sp, r7
    5e1a:	bd80      	pop	{r7, pc}
    5e1c:	00005d69 	.word	0x00005d69
    5e20:	20000018 	.word	0x20000018
    5e24:	000134e0 	.word	0x000134e0
    5e28:	00002dc9 	.word	0x00002dc9

00005e2c <_sercom_i2c_send_stop>:

static inline void _sercom_i2c_send_stop(void *const hw)
{
    5e2c:	b580      	push	{r7, lr}
    5e2e:	b082      	sub	sp, #8
    5e30:	af00      	add	r7, sp, #0
    5e32:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_set_CTRLB_CMD_bf(hw, CMD_STOP);
    5e34:	2103      	movs	r1, #3
    5e36:	6878      	ldr	r0, [r7, #4]
    5e38:	4b02      	ldr	r3, [pc, #8]	; (5e44 <_sercom_i2c_send_stop+0x18>)
    5e3a:	4798      	blx	r3
}
    5e3c:	bf00      	nop
    5e3e:	3708      	adds	r7, #8
    5e40:	46bd      	mov	sp, r7
    5e42:	bd80      	pop	{r7, pc}
    5e44:	00005b39 	.word	0x00005b39

00005e48 <_sercom_i2c_sync_analyse_flags>:

/**
 * \brief SERCOM I2CM analyze hardware status and transfer next byte
 */
static inline int32_t _sercom_i2c_sync_analyse_flags(void *const hw, uint32_t flags, struct _i2c_m_msg *const msg)
{
    5e48:	b590      	push	{r4, r7, lr}
    5e4a:	b087      	sub	sp, #28
    5e4c:	af00      	add	r7, sp, #0
    5e4e:	60f8      	str	r0, [r7, #12]
    5e50:	60b9      	str	r1, [r7, #8]
    5e52:	607a      	str	r2, [r7, #4]
	int      sclsm  = hri_sercomi2cm_get_CTRLA_SCLSM_bit(hw);
    5e54:	68f8      	ldr	r0, [r7, #12]
    5e56:	4b7d      	ldr	r3, [pc, #500]	; (604c <_sercom_i2c_sync_analyse_flags+0x204>)
    5e58:	4798      	blx	r3
    5e5a:	4603      	mov	r3, r0
    5e5c:	617b      	str	r3, [r7, #20]
	uint16_t status = hri_sercomi2cm_read_STATUS_reg(hw);
    5e5e:	68f8      	ldr	r0, [r7, #12]
    5e60:	4b7b      	ldr	r3, [pc, #492]	; (6050 <_sercom_i2c_sync_analyse_flags+0x208>)
    5e62:	4798      	blx	r3
    5e64:	4603      	mov	r3, r0
    5e66:	827b      	strh	r3, [r7, #18]

	if (flags & MB_FLAG) {
    5e68:	68bb      	ldr	r3, [r7, #8]
    5e6a:	f003 0301 	and.w	r3, r3, #1
    5e6e:	2b00      	cmp	r3, #0
    5e70:	f000 8095 	beq.w	5f9e <_sercom_i2c_sync_analyse_flags+0x156>
		/* tx error */
		if (status & SERCOM_I2CM_STATUS_ARBLOST) {
    5e74:	8a7b      	ldrh	r3, [r7, #18]
    5e76:	f003 0302 	and.w	r3, r3, #2
    5e7a:	2b00      	cmp	r3, #0
    5e7c:	d01d      	beq.n	5eba <_sercom_i2c_sync_analyse_flags+0x72>
			hri_sercomi2cm_clear_interrupt_MB_bit(hw);
    5e7e:	68f8      	ldr	r0, [r7, #12]
    5e80:	4b74      	ldr	r3, [pc, #464]	; (6054 <_sercom_i2c_sync_analyse_flags+0x20c>)
    5e82:	4798      	blx	r3
			msg->flags |= I2C_M_FAIL;
    5e84:	687b      	ldr	r3, [r7, #4]
    5e86:	885b      	ldrh	r3, [r3, #2]
    5e88:	b29b      	uxth	r3, r3
    5e8a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    5e8e:	b29a      	uxth	r2, r3
    5e90:	687b      	ldr	r3, [r7, #4]
    5e92:	805a      	strh	r2, [r3, #2]
			msg->flags &= ~I2C_M_BUSY;
    5e94:	687b      	ldr	r3, [r7, #4]
    5e96:	885b      	ldrh	r3, [r3, #2]
    5e98:	b29b      	uxth	r3, r3
    5e9a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    5e9e:	b29a      	uxth	r2, r3
    5ea0:	687b      	ldr	r3, [r7, #4]
    5ea2:	805a      	strh	r2, [r3, #2]

			if (status & SERCOM_I2CM_STATUS_BUSERR) {
    5ea4:	8a7b      	ldrh	r3, [r7, #18]
    5ea6:	f003 0301 	and.w	r3, r3, #1
    5eaa:	2b00      	cmp	r3, #0
    5eac:	d002      	beq.n	5eb4 <_sercom_i2c_sync_analyse_flags+0x6c>
				return I2C_ERR_BUS;
    5eae:	f06f 0304 	mvn.w	r3, #4
    5eb2:	e0c6      	b.n	6042 <_sercom_i2c_sync_analyse_flags+0x1fa>
			}

			return I2C_ERR_BAD_ADDRESS;
    5eb4:	f06f 0303 	mvn.w	r3, #3
    5eb8:	e0c3      	b.n	6042 <_sercom_i2c_sync_analyse_flags+0x1fa>
		} else {
			if (status & SERCOM_I2CM_STATUS_RXNACK) {
    5eba:	8a7b      	ldrh	r3, [r7, #18]
    5ebc:	f003 0304 	and.w	r3, r3, #4
    5ec0:	2b00      	cmp	r3, #0
    5ec2:	d01f      	beq.n	5f04 <_sercom_i2c_sync_analyse_flags+0xbc>

				/* Slave rejects to receive more data */
				if (msg->len > 0) {
    5ec4:	687b      	ldr	r3, [r7, #4]
    5ec6:	685b      	ldr	r3, [r3, #4]
    5ec8:	2b00      	cmp	r3, #0
    5eca:	dd07      	ble.n	5edc <_sercom_i2c_sync_analyse_flags+0x94>
					msg->flags |= I2C_M_FAIL;
    5ecc:	687b      	ldr	r3, [r7, #4]
    5ece:	885b      	ldrh	r3, [r3, #2]
    5ed0:	b29b      	uxth	r3, r3
    5ed2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    5ed6:	b29a      	uxth	r2, r3
    5ed8:	687b      	ldr	r3, [r7, #4]
    5eda:	805a      	strh	r2, [r3, #2]
				}

				if (msg->flags & I2C_M_STOP) {
    5edc:	687b      	ldr	r3, [r7, #4]
    5ede:	885b      	ldrh	r3, [r3, #2]
    5ee0:	b29b      	uxth	r3, r3
    5ee2:	b21b      	sxth	r3, r3
    5ee4:	2b00      	cmp	r3, #0
    5ee6:	da02      	bge.n	5eee <_sercom_i2c_sync_analyse_flags+0xa6>
					_sercom_i2c_send_stop(hw);
    5ee8:	68f8      	ldr	r0, [r7, #12]
    5eea:	4b5b      	ldr	r3, [pc, #364]	; (6058 <_sercom_i2c_sync_analyse_flags+0x210>)
    5eec:	4798      	blx	r3
				}

				msg->flags &= ~I2C_M_BUSY;
    5eee:	687b      	ldr	r3, [r7, #4]
    5ef0:	885b      	ldrh	r3, [r3, #2]
    5ef2:	b29b      	uxth	r3, r3
    5ef4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    5ef8:	b29a      	uxth	r2, r3
    5efa:	687b      	ldr	r3, [r7, #4]
    5efc:	805a      	strh	r2, [r3, #2]

				return I2C_NACK;
    5efe:	f06f 0301 	mvn.w	r3, #1
    5f02:	e09e      	b.n	6042 <_sercom_i2c_sync_analyse_flags+0x1fa>
			}

			if (msg->flags & I2C_M_TEN) {
    5f04:	687b      	ldr	r3, [r7, #4]
    5f06:	885b      	ldrh	r3, [r3, #2]
    5f08:	b29b      	uxth	r3, r3
    5f0a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    5f0e:	2b00      	cmp	r3, #0
    5f10:	d01c      	beq.n	5f4c <_sercom_i2c_sync_analyse_flags+0x104>
				hri_sercomi2cm_write_ADDR_reg(hw,
				                              ((((msg->addr & TEN_ADDR_MASK) >> 8) | TEN_ADDR_FRAME) << 1) | I2C_M_RD
    5f12:	687b      	ldr	r3, [r7, #4]
    5f14:	881b      	ldrh	r3, [r3, #0]
    5f16:	121b      	asrs	r3, r3, #8
    5f18:	005b      	lsls	r3, r3, #1
				                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    5f1a:	f003 0406 	and.w	r4, r3, #6
    5f1e:	68f8      	ldr	r0, [r7, #12]
    5f20:	4b4e      	ldr	r3, [pc, #312]	; (605c <_sercom_i2c_sync_analyse_flags+0x214>)
    5f22:	4798      	blx	r3
    5f24:	4603      	mov	r3, r0
    5f26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    5f2a:	4323      	orrs	r3, r4
				hri_sercomi2cm_write_ADDR_reg(hw,
    5f2c:	f043 03f1 	orr.w	r3, r3, #241	; 0xf1
    5f30:	4619      	mov	r1, r3
    5f32:	68f8      	ldr	r0, [r7, #12]
    5f34:	4b4a      	ldr	r3, [pc, #296]	; (6060 <_sercom_i2c_sync_analyse_flags+0x218>)
    5f36:	4798      	blx	r3
				msg->flags &= ~I2C_M_TEN;
    5f38:	687b      	ldr	r3, [r7, #4]
    5f3a:	885b      	ldrh	r3, [r3, #2]
    5f3c:	b29b      	uxth	r3, r3
    5f3e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    5f42:	b29a      	uxth	r2, r3
    5f44:	687b      	ldr	r3, [r7, #4]
    5f46:	805a      	strh	r2, [r3, #2]

				return I2C_OK;
    5f48:	2300      	movs	r3, #0
    5f4a:	e07a      	b.n	6042 <_sercom_i2c_sync_analyse_flags+0x1fa>
			}

			if (msg->len == 0) {
    5f4c:	687b      	ldr	r3, [r7, #4]
    5f4e:	685b      	ldr	r3, [r3, #4]
    5f50:	2b00      	cmp	r3, #0
    5f52:	d111      	bne.n	5f78 <_sercom_i2c_sync_analyse_flags+0x130>
				if (msg->flags & I2C_M_STOP) {
    5f54:	687b      	ldr	r3, [r7, #4]
    5f56:	885b      	ldrh	r3, [r3, #2]
    5f58:	b29b      	uxth	r3, r3
    5f5a:	b21b      	sxth	r3, r3
    5f5c:	2b00      	cmp	r3, #0
    5f5e:	da02      	bge.n	5f66 <_sercom_i2c_sync_analyse_flags+0x11e>
					_sercom_i2c_send_stop(hw);
    5f60:	68f8      	ldr	r0, [r7, #12]
    5f62:	4b3d      	ldr	r3, [pc, #244]	; (6058 <_sercom_i2c_sync_analyse_flags+0x210>)
    5f64:	4798      	blx	r3
				}

				msg->flags &= ~I2C_M_BUSY;
    5f66:	687b      	ldr	r3, [r7, #4]
    5f68:	885b      	ldrh	r3, [r3, #2]
    5f6a:	b29b      	uxth	r3, r3
    5f6c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    5f70:	b29a      	uxth	r2, r3
    5f72:	687b      	ldr	r3, [r7, #4]
    5f74:	805a      	strh	r2, [r3, #2]
    5f76:	e010      	b.n	5f9a <_sercom_i2c_sync_analyse_flags+0x152>
			} else {
				hri_sercomi2cm_write_DATA_reg(hw, *msg->buffer);
    5f78:	687b      	ldr	r3, [r7, #4]
    5f7a:	689b      	ldr	r3, [r3, #8]
    5f7c:	781b      	ldrb	r3, [r3, #0]
    5f7e:	4619      	mov	r1, r3
    5f80:	68f8      	ldr	r0, [r7, #12]
    5f82:	4b38      	ldr	r3, [pc, #224]	; (6064 <_sercom_i2c_sync_analyse_flags+0x21c>)
    5f84:	4798      	blx	r3
				msg->buffer++;
    5f86:	687b      	ldr	r3, [r7, #4]
    5f88:	689b      	ldr	r3, [r3, #8]
    5f8a:	1c5a      	adds	r2, r3, #1
    5f8c:	687b      	ldr	r3, [r7, #4]
    5f8e:	609a      	str	r2, [r3, #8]
				msg->len--;
    5f90:	687b      	ldr	r3, [r7, #4]
    5f92:	685b      	ldr	r3, [r3, #4]
    5f94:	1e5a      	subs	r2, r3, #1
    5f96:	687b      	ldr	r3, [r7, #4]
    5f98:	605a      	str	r2, [r3, #4]
			}

			return I2C_OK;
    5f9a:	2300      	movs	r3, #0
    5f9c:	e051      	b.n	6042 <_sercom_i2c_sync_analyse_flags+0x1fa>
		}
	} else if (flags & SB_FLAG) {
    5f9e:	68bb      	ldr	r3, [r7, #8]
    5fa0:	f003 0302 	and.w	r3, r3, #2
    5fa4:	2b00      	cmp	r3, #0
    5fa6:	d04b      	beq.n	6040 <_sercom_i2c_sync_analyse_flags+0x1f8>
		if ((msg->len) && !(status & SERCOM_I2CM_STATUS_RXNACK)) {
    5fa8:	687b      	ldr	r3, [r7, #4]
    5faa:	685b      	ldr	r3, [r3, #4]
    5fac:	2b00      	cmp	r3, #0
    5fae:	d041      	beq.n	6034 <_sercom_i2c_sync_analyse_flags+0x1ec>
    5fb0:	8a7b      	ldrh	r3, [r7, #18]
    5fb2:	f003 0304 	and.w	r3, r3, #4
    5fb6:	2b00      	cmp	r3, #0
    5fb8:	d13c      	bne.n	6034 <_sercom_i2c_sync_analyse_flags+0x1ec>
			msg->len--;
    5fba:	687b      	ldr	r3, [r7, #4]
    5fbc:	685b      	ldr	r3, [r3, #4]
    5fbe:	1e5a      	subs	r2, r3, #1
    5fc0:	687b      	ldr	r3, [r7, #4]
    5fc2:	605a      	str	r2, [r3, #4]

			/* last byte, send nack */
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
    5fc4:	687b      	ldr	r3, [r7, #4]
    5fc6:	685b      	ldr	r3, [r3, #4]
    5fc8:	2b00      	cmp	r3, #0
    5fca:	d102      	bne.n	5fd2 <_sercom_i2c_sync_analyse_flags+0x18a>
    5fcc:	697b      	ldr	r3, [r7, #20]
    5fce:	2b00      	cmp	r3, #0
    5fd0:	d006      	beq.n	5fe0 <_sercom_i2c_sync_analyse_flags+0x198>
    5fd2:	687b      	ldr	r3, [r7, #4]
    5fd4:	685b      	ldr	r3, [r3, #4]
    5fd6:	2b01      	cmp	r3, #1
    5fd8:	d105      	bne.n	5fe6 <_sercom_i2c_sync_analyse_flags+0x19e>
    5fda:	697b      	ldr	r3, [r7, #20]
    5fdc:	2b00      	cmp	r3, #0
    5fde:	d002      	beq.n	5fe6 <_sercom_i2c_sync_analyse_flags+0x19e>
				hri_sercomi2cm_set_CTRLB_ACKACT_bit(hw);
    5fe0:	68f8      	ldr	r0, [r7, #12]
    5fe2:	4b21      	ldr	r3, [pc, #132]	; (6068 <_sercom_i2c_sync_analyse_flags+0x220>)
    5fe4:	4798      	blx	r3
			}

			if (msg->len == 0) {
    5fe6:	687b      	ldr	r3, [r7, #4]
    5fe8:	685b      	ldr	r3, [r3, #4]
    5fea:	2b00      	cmp	r3, #0
    5fec:	d113      	bne.n	6016 <_sercom_i2c_sync_analyse_flags+0x1ce>
				if (msg->flags & I2C_M_STOP) {
    5fee:	687b      	ldr	r3, [r7, #4]
    5ff0:	885b      	ldrh	r3, [r3, #2]
    5ff2:	b29b      	uxth	r3, r3
    5ff4:	b21b      	sxth	r3, r3
    5ff6:	2b00      	cmp	r3, #0
    5ff8:	da05      	bge.n	6006 <_sercom_i2c_sync_analyse_flags+0x1be>
					hri_sercomi2cm_clear_CTRLB_SMEN_bit(hw);
    5ffa:	68f8      	ldr	r0, [r7, #12]
    5ffc:	4b1b      	ldr	r3, [pc, #108]	; (606c <_sercom_i2c_sync_analyse_flags+0x224>)
    5ffe:	4798      	blx	r3
					_sercom_i2c_send_stop(hw);
    6000:	68f8      	ldr	r0, [r7, #12]
    6002:	4b15      	ldr	r3, [pc, #84]	; (6058 <_sercom_i2c_sync_analyse_flags+0x210>)
    6004:	4798      	blx	r3
				}

				msg->flags &= ~I2C_M_BUSY;
    6006:	687b      	ldr	r3, [r7, #4]
    6008:	885b      	ldrh	r3, [r3, #2]
    600a:	b29b      	uxth	r3, r3
    600c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    6010:	b29a      	uxth	r2, r3
    6012:	687b      	ldr	r3, [r7, #4]
    6014:	805a      	strh	r2, [r3, #2]

			/* Accessing DATA.DATA auto-triggers I2C bus operations.
			 * The operation performed depends on the state of
			 * CTRLB.ACKACT, CTRLB.SMEN
			 **/
			*msg->buffer++ = hri_sercomi2cm_read_DATA_reg(hw);
    6016:	687b      	ldr	r3, [r7, #4]
    6018:	689c      	ldr	r4, [r3, #8]
    601a:	1c62      	adds	r2, r4, #1
    601c:	687b      	ldr	r3, [r7, #4]
    601e:	609a      	str	r2, [r3, #8]
    6020:	68f8      	ldr	r0, [r7, #12]
    6022:	4b13      	ldr	r3, [pc, #76]	; (6070 <_sercom_i2c_sync_analyse_flags+0x228>)
    6024:	4798      	blx	r3
    6026:	4603      	mov	r3, r0
    6028:	b2db      	uxtb	r3, r3
    602a:	7023      	strb	r3, [r4, #0]
		} else {
			hri_sercomi2cm_clear_interrupt_SB_bit(hw);
			return I2C_NACK;
		}

		hri_sercomi2cm_clear_interrupt_SB_bit(hw);
    602c:	68f8      	ldr	r0, [r7, #12]
    602e:	4b11      	ldr	r3, [pc, #68]	; (6074 <_sercom_i2c_sync_analyse_flags+0x22c>)
    6030:	4798      	blx	r3
    6032:	e005      	b.n	6040 <_sercom_i2c_sync_analyse_flags+0x1f8>
			hri_sercomi2cm_clear_interrupt_SB_bit(hw);
    6034:	68f8      	ldr	r0, [r7, #12]
    6036:	4b0f      	ldr	r3, [pc, #60]	; (6074 <_sercom_i2c_sync_analyse_flags+0x22c>)
    6038:	4798      	blx	r3
			return I2C_NACK;
    603a:	f06f 0301 	mvn.w	r3, #1
    603e:	e000      	b.n	6042 <_sercom_i2c_sync_analyse_flags+0x1fa>
	}

	return I2C_OK;
    6040:	2300      	movs	r3, #0
}
    6042:	4618      	mov	r0, r3
    6044:	371c      	adds	r7, #28
    6046:	46bd      	mov	sp, r7
    6048:	bd90      	pop	{r4, r7, pc}
    604a:	bf00      	nop
    604c:	00005961 	.word	0x00005961
    6050:	00005d45 	.word	0x00005d45
    6054:	00005889 	.word	0x00005889
    6058:	00005e2d 	.word	0x00005e2d
    605c:	00005c51 	.word	0x00005c51
    6060:	00005c2d 	.word	0x00005c2d
    6064:	00005c8d 	.word	0x00005c8d
    6068:	00005ae9 	.word	0x00005ae9
    606c:	00005ac1 	.word	0x00005ac1
    6070:	00005cb1 	.word	0x00005cb1
    6074:	000058a3 	.word	0x000058a3

00006078 <_i2c_m_sync_init>:
 * \brief Initialize sercom i2c module to use in sync mode
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
int32_t _i2c_m_sync_init(struct _i2c_m_sync_device *const i2c_dev, void *const hw)
{
    6078:	b580      	push	{r7, lr}
    607a:	b082      	sub	sp, #8
    607c:	af00      	add	r7, sp, #0
    607e:	6078      	str	r0, [r7, #4]
    6080:	6039      	str	r1, [r7, #0]
	ASSERT(i2c_dev);
    6082:	687b      	ldr	r3, [r7, #4]
    6084:	2b00      	cmp	r3, #0
    6086:	bf14      	ite	ne
    6088:	2301      	movne	r3, #1
    608a:	2300      	moveq	r3, #0
    608c:	b2db      	uxtb	r3, r3
    608e:	f44f 62a3 	mov.w	r2, #1304	; 0x518
    6092:	4908      	ldr	r1, [pc, #32]	; (60b4 <_i2c_m_sync_init+0x3c>)
    6094:	4618      	mov	r0, r3
    6096:	4b08      	ldr	r3, [pc, #32]	; (60b8 <_i2c_m_sync_init+0x40>)
    6098:	4798      	blx	r3

	i2c_dev->hw = hw;
    609a:	687b      	ldr	r3, [r7, #4]
    609c:	683a      	ldr	r2, [r7, #0]
    609e:	611a      	str	r2, [r3, #16]

	return _i2c_m_sync_init_impl(&i2c_dev->service, hw);
    60a0:	687b      	ldr	r3, [r7, #4]
    60a2:	6839      	ldr	r1, [r7, #0]
    60a4:	4618      	mov	r0, r3
    60a6:	4b05      	ldr	r3, [pc, #20]	; (60bc <_i2c_m_sync_init+0x44>)
    60a8:	4798      	blx	r3
    60aa:	4603      	mov	r3, r0
}
    60ac:	4618      	mov	r0, r3
    60ae:	3708      	adds	r7, #8
    60b0:	46bd      	mov	sp, r7
    60b2:	bd80      	pop	{r7, pc}
    60b4:	000134e0 	.word	0x000134e0
    60b8:	00002dc9 	.word	0x00002dc9
    60bc:	00006369 	.word	0x00006369

000060c0 <_sercom_i2c_sync_wait_bus>:
 * \return Bus response status.
 * \retval 0 Bus response status OK
 * \retval <0 Bus response fail
 */
inline static int32_t _sercom_i2c_sync_wait_bus(struct _i2c_m_sync_device *const i2c_dev, uint32_t *flags)
{
    60c0:	b580      	push	{r7, lr}
    60c2:	b084      	sub	sp, #16
    60c4:	af00      	add	r7, sp, #0
    60c6:	6078      	str	r0, [r7, #4]
    60c8:	6039      	str	r1, [r7, #0]
	uint32_t timeout = 65535;
    60ca:	f64f 73ff 	movw	r3, #65535	; 0xffff
    60ce:	60fb      	str	r3, [r7, #12]
	void *   hw      = i2c_dev->hw;
    60d0:	687b      	ldr	r3, [r7, #4]
    60d2:	691b      	ldr	r3, [r3, #16]
    60d4:	60bb      	str	r3, [r7, #8]

	do {
		*flags = hri_sercomi2cm_read_INTFLAG_reg(hw);
    60d6:	68b8      	ldr	r0, [r7, #8]
    60d8:	4b0f      	ldr	r3, [pc, #60]	; (6118 <_sercom_i2c_sync_wait_bus+0x58>)
    60da:	4798      	blx	r3
    60dc:	4603      	mov	r3, r0
    60de:	461a      	mov	r2, r3
    60e0:	683b      	ldr	r3, [r7, #0]
    60e2:	601a      	str	r2, [r3, #0]

		if (timeout-- == 0) {
    60e4:	68fb      	ldr	r3, [r7, #12]
    60e6:	1e5a      	subs	r2, r3, #1
    60e8:	60fa      	str	r2, [r7, #12]
    60ea:	2b00      	cmp	r3, #0
    60ec:	d102      	bne.n	60f4 <_sercom_i2c_sync_wait_bus+0x34>
			return I2C_ERR_BUS;
    60ee:	f06f 0304 	mvn.w	r3, #4
    60f2:	e00c      	b.n	610e <_sercom_i2c_sync_wait_bus+0x4e>
		}
	} while (!(*flags & MB_FLAG) && !(*flags & SB_FLAG));
    60f4:	683b      	ldr	r3, [r7, #0]
    60f6:	681b      	ldr	r3, [r3, #0]
    60f8:	f003 0301 	and.w	r3, r3, #1
    60fc:	2b00      	cmp	r3, #0
    60fe:	d105      	bne.n	610c <_sercom_i2c_sync_wait_bus+0x4c>
    6100:	683b      	ldr	r3, [r7, #0]
    6102:	681b      	ldr	r3, [r3, #0]
    6104:	f003 0302 	and.w	r3, r3, #2
    6108:	2b00      	cmp	r3, #0
    610a:	d0e4      	beq.n	60d6 <_sercom_i2c_sync_wait_bus+0x16>

	return I2C_OK;
    610c:	2300      	movs	r3, #0
}
    610e:	4618      	mov	r0, r3
    6110:	3710      	adds	r7, #16
    6112:	46bd      	mov	sp, r7
    6114:	bd80      	pop	{r7, pc}
    6116:	bf00      	nop
    6118:	000058bd 	.word	0x000058bd

0000611c <_sercom_i2c_sync_send_address>:
 * \brief Send the slave address to bus, which will start the transfer
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
static int32_t _sercom_i2c_sync_send_address(struct _i2c_m_sync_device *const i2c_dev)
{
    611c:	b590      	push	{r4, r7, lr}
    611e:	b087      	sub	sp, #28
    6120:	af00      	add	r7, sp, #0
    6122:	6078      	str	r0, [r7, #4]
	void *             hw    = i2c_dev->hw;
    6124:	687b      	ldr	r3, [r7, #4]
    6126:	691b      	ldr	r3, [r3, #16]
    6128:	617b      	str	r3, [r7, #20]
	struct _i2c_m_msg *msg   = &i2c_dev->service.msg;
    612a:	687b      	ldr	r3, [r7, #4]
    612c:	613b      	str	r3, [r7, #16]
	int                sclsm = hri_sercomi2cm_get_CTRLA_SCLSM_bit(hw);
    612e:	6978      	ldr	r0, [r7, #20]
    6130:	4b39      	ldr	r3, [pc, #228]	; (6218 <_sercom_i2c_sync_send_address+0xfc>)
    6132:	4798      	blx	r3
    6134:	4603      	mov	r3, r0
    6136:	60fb      	str	r3, [r7, #12]
	uint32_t           flags;

	ASSERT(i2c_dev);
    6138:	687b      	ldr	r3, [r7, #4]
    613a:	2b00      	cmp	r3, #0
    613c:	bf14      	ite	ne
    613e:	2301      	movne	r3, #1
    6140:	2300      	moveq	r3, #0
    6142:	b2db      	uxtb	r3, r3
    6144:	f240 52a5 	movw	r2, #1445	; 0x5a5
    6148:	4934      	ldr	r1, [pc, #208]	; (621c <_sercom_i2c_sync_send_address+0x100>)
    614a:	4618      	mov	r0, r3
    614c:	4b34      	ldr	r3, [pc, #208]	; (6220 <_sercom_i2c_sync_send_address+0x104>)
    614e:	4798      	blx	r3

	if (msg->len == 1 && sclsm) {
    6150:	693b      	ldr	r3, [r7, #16]
    6152:	685b      	ldr	r3, [r3, #4]
    6154:	2b01      	cmp	r3, #1
    6156:	d106      	bne.n	6166 <_sercom_i2c_sync_send_address+0x4a>
    6158:	68fb      	ldr	r3, [r7, #12]
    615a:	2b00      	cmp	r3, #0
    615c:	d003      	beq.n	6166 <_sercom_i2c_sync_send_address+0x4a>
		hri_sercomi2cm_set_CTRLB_ACKACT_bit(hw);
    615e:	6978      	ldr	r0, [r7, #20]
    6160:	4b30      	ldr	r3, [pc, #192]	; (6224 <_sercom_i2c_sync_send_address+0x108>)
    6162:	4798      	blx	r3
    6164:	e002      	b.n	616c <_sercom_i2c_sync_send_address+0x50>
	} else {
		hri_sercomi2cm_clear_CTRLB_ACKACT_bit(hw);
    6166:	6978      	ldr	r0, [r7, #20]
    6168:	4b2f      	ldr	r3, [pc, #188]	; (6228 <_sercom_i2c_sync_send_address+0x10c>)
    616a:	4798      	blx	r3
	}

	/* ten bit address */
	if (msg->addr & I2C_M_TEN) {
    616c:	693b      	ldr	r3, [r7, #16]
    616e:	881b      	ldrh	r3, [r3, #0]
    6170:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    6174:	2b00      	cmp	r3, #0
    6176:	d022      	beq.n	61be <_sercom_i2c_sync_send_address+0xa2>
		if (msg->flags & I2C_M_RD) {
    6178:	693b      	ldr	r3, [r7, #16]
    617a:	885b      	ldrh	r3, [r3, #2]
    617c:	b29b      	uxth	r3, r3
    617e:	f003 0301 	and.w	r3, r3, #1
    6182:	2b00      	cmp	r3, #0
    6184:	d007      	beq.n	6196 <_sercom_i2c_sync_send_address+0x7a>
			msg->flags |= I2C_M_TEN;
    6186:	693b      	ldr	r3, [r7, #16]
    6188:	885b      	ldrh	r3, [r3, #2]
    618a:	b29b      	uxth	r3, r3
    618c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    6190:	b29a      	uxth	r2, r3
    6192:	693b      	ldr	r3, [r7, #16]
    6194:	805a      	strh	r2, [r3, #2]
		}

		hri_sercomi2cm_write_ADDR_reg(hw,
		                              ((msg->addr & TEN_ADDR_MASK) << 1) | SERCOM_I2CM_ADDR_TENBITEN
    6196:	693b      	ldr	r3, [r7, #16]
    6198:	881b      	ldrh	r3, [r3, #0]
    619a:	005b      	lsls	r3, r3, #1
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    619c:	f240 74fe 	movw	r4, #2046	; 0x7fe
    61a0:	401c      	ands	r4, r3
    61a2:	6978      	ldr	r0, [r7, #20]
    61a4:	4b21      	ldr	r3, [pc, #132]	; (622c <_sercom_i2c_sync_send_address+0x110>)
    61a6:	4798      	blx	r3
    61a8:	4603      	mov	r3, r0
    61aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    61ae:	4323      	orrs	r3, r4
		hri_sercomi2cm_write_ADDR_reg(hw,
    61b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    61b4:	4619      	mov	r1, r3
    61b6:	6978      	ldr	r0, [r7, #20]
    61b8:	4b1d      	ldr	r3, [pc, #116]	; (6230 <_sercom_i2c_sync_send_address+0x114>)
    61ba:	4798      	blx	r3
    61bc:	e01a      	b.n	61f4 <_sercom_i2c_sync_send_address+0xd8>
	} else {
		hri_sercomi2cm_write_ADDR_reg(hw,
		                              ((msg->addr & SEVEN_ADDR_MASK) << 1) | (msg->flags & I2C_M_RD ? I2C_M_RD : 0x0)
    61be:	693b      	ldr	r3, [r7, #16]
    61c0:	881b      	ldrh	r3, [r3, #0]
    61c2:	005b      	lsls	r3, r3, #1
    61c4:	b2db      	uxtb	r3, r3
    61c6:	693a      	ldr	r2, [r7, #16]
    61c8:	8852      	ldrh	r2, [r2, #2]
    61ca:	b292      	uxth	r2, r2
    61cc:	f002 0201 	and.w	r2, r2, #1
    61d0:	2a00      	cmp	r2, #0
    61d2:	bf14      	ite	ne
    61d4:	2201      	movne	r2, #1
    61d6:	2200      	moveq	r2, #0
    61d8:	b2d2      	uxtb	r2, r2
    61da:	4313      	orrs	r3, r2
    61dc:	461c      	mov	r4, r3
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    61de:	6978      	ldr	r0, [r7, #20]
    61e0:	4b12      	ldr	r3, [pc, #72]	; (622c <_sercom_i2c_sync_send_address+0x110>)
    61e2:	4798      	blx	r3
    61e4:	4603      	mov	r3, r0
    61e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
		hri_sercomi2cm_write_ADDR_reg(hw,
    61ea:	4323      	orrs	r3, r4
    61ec:	4619      	mov	r1, r3
    61ee:	6978      	ldr	r0, [r7, #20]
    61f0:	4b0f      	ldr	r3, [pc, #60]	; (6230 <_sercom_i2c_sync_send_address+0x114>)
    61f2:	4798      	blx	r3
	}

	_sercom_i2c_sync_wait_bus(i2c_dev, &flags);
    61f4:	f107 0308 	add.w	r3, r7, #8
    61f8:	4619      	mov	r1, r3
    61fa:	6878      	ldr	r0, [r7, #4]
    61fc:	4b0d      	ldr	r3, [pc, #52]	; (6234 <_sercom_i2c_sync_send_address+0x118>)
    61fe:	4798      	blx	r3
	return _sercom_i2c_sync_analyse_flags(hw, flags, msg);
    6200:	68bb      	ldr	r3, [r7, #8]
    6202:	693a      	ldr	r2, [r7, #16]
    6204:	4619      	mov	r1, r3
    6206:	6978      	ldr	r0, [r7, #20]
    6208:	4b0b      	ldr	r3, [pc, #44]	; (6238 <_sercom_i2c_sync_send_address+0x11c>)
    620a:	4798      	blx	r3
    620c:	4603      	mov	r3, r0
}
    620e:	4618      	mov	r0, r3
    6210:	371c      	adds	r7, #28
    6212:	46bd      	mov	sp, r7
    6214:	bd90      	pop	{r4, r7, pc}
    6216:	bf00      	nop
    6218:	00005961 	.word	0x00005961
    621c:	000134e0 	.word	0x000134e0
    6220:	00002dc9 	.word	0x00002dc9
    6224:	00005ae9 	.word	0x00005ae9
    6228:	00005b11 	.word	0x00005b11
    622c:	00005c51 	.word	0x00005c51
    6230:	00005c2d 	.word	0x00005c2d
    6234:	000060c1 	.word	0x000060c1
    6238:	00005e49 	.word	0x00005e49

0000623c <_i2c_m_sync_transfer>:
 * \return Transfer status.
 * \retval 0 Transfer success
 * \retval <0 Transfer fail or partial fail, return the error code
 */
int32_t _i2c_m_sync_transfer(struct _i2c_m_sync_device *const i2c_dev, struct _i2c_m_msg *msg)
{
    623c:	b580      	push	{r7, lr}
    623e:	b086      	sub	sp, #24
    6240:	af00      	add	r7, sp, #0
    6242:	6078      	str	r0, [r7, #4]
    6244:	6039      	str	r1, [r7, #0]
	uint32_t flags;
	int      ret;
	void *   hw = i2c_dev->hw;
    6246:	687b      	ldr	r3, [r7, #4]
    6248:	691b      	ldr	r3, [r3, #16]
    624a:	613b      	str	r3, [r7, #16]

	ASSERT(i2c_dev);
    624c:	687b      	ldr	r3, [r7, #4]
    624e:	2b00      	cmp	r3, #0
    6250:	bf14      	ite	ne
    6252:	2301      	movne	r3, #1
    6254:	2300      	moveq	r3, #0
    6256:	b2db      	uxtb	r3, r3
    6258:	f44f 62ba 	mov.w	r2, #1488	; 0x5d0
    625c:	493b      	ldr	r1, [pc, #236]	; (634c <_i2c_m_sync_transfer+0x110>)
    625e:	4618      	mov	r0, r3
    6260:	4b3b      	ldr	r3, [pc, #236]	; (6350 <_i2c_m_sync_transfer+0x114>)
    6262:	4798      	blx	r3
	ASSERT(i2c_dev->hw);
    6264:	687b      	ldr	r3, [r7, #4]
    6266:	691b      	ldr	r3, [r3, #16]
    6268:	2b00      	cmp	r3, #0
    626a:	bf14      	ite	ne
    626c:	2301      	movne	r3, #1
    626e:	2300      	moveq	r3, #0
    6270:	b2db      	uxtb	r3, r3
    6272:	f240 52d1 	movw	r2, #1489	; 0x5d1
    6276:	4935      	ldr	r1, [pc, #212]	; (634c <_i2c_m_sync_transfer+0x110>)
    6278:	4618      	mov	r0, r3
    627a:	4b35      	ldr	r3, [pc, #212]	; (6350 <_i2c_m_sync_transfer+0x114>)
    627c:	4798      	blx	r3
	ASSERT(msg);
    627e:	683b      	ldr	r3, [r7, #0]
    6280:	2b00      	cmp	r3, #0
    6282:	bf14      	ite	ne
    6284:	2301      	movne	r3, #1
    6286:	2300      	moveq	r3, #0
    6288:	b2db      	uxtb	r3, r3
    628a:	f240 52d2 	movw	r2, #1490	; 0x5d2
    628e:	492f      	ldr	r1, [pc, #188]	; (634c <_i2c_m_sync_transfer+0x110>)
    6290:	4618      	mov	r0, r3
    6292:	4b2f      	ldr	r3, [pc, #188]	; (6350 <_i2c_m_sync_transfer+0x114>)
    6294:	4798      	blx	r3

	if (i2c_dev->service.msg.flags & I2C_M_BUSY) {
    6296:	687b      	ldr	r3, [r7, #4]
    6298:	885b      	ldrh	r3, [r3, #2]
    629a:	b29b      	uxth	r3, r3
    629c:	f403 7380 	and.w	r3, r3, #256	; 0x100
    62a0:	2b00      	cmp	r3, #0
    62a2:	d002      	beq.n	62aa <_i2c_m_sync_transfer+0x6e>
		return I2C_ERR_BUSY;
    62a4:	f06f 0305 	mvn.w	r3, #5
    62a8:	e04c      	b.n	6344 <_i2c_m_sync_transfer+0x108>
	}

	msg->flags |= I2C_M_BUSY;
    62aa:	683b      	ldr	r3, [r7, #0]
    62ac:	885b      	ldrh	r3, [r3, #2]
    62ae:	b29b      	uxth	r3, r3
    62b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    62b4:	b29a      	uxth	r2, r3
    62b6:	683b      	ldr	r3, [r7, #0]
    62b8:	805a      	strh	r2, [r3, #2]
	i2c_dev->service.msg = *msg;
    62ba:	687b      	ldr	r3, [r7, #4]
    62bc:	683a      	ldr	r2, [r7, #0]
    62be:	ca07      	ldmia	r2, {r0, r1, r2}
    62c0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	hri_sercomi2cm_set_CTRLB_SMEN_bit(hw);
    62c4:	6938      	ldr	r0, [r7, #16]
    62c6:	4b23      	ldr	r3, [pc, #140]	; (6354 <_i2c_m_sync_transfer+0x118>)
    62c8:	4798      	blx	r3

	ret = _sercom_i2c_sync_send_address(i2c_dev);
    62ca:	6878      	ldr	r0, [r7, #4]
    62cc:	4b22      	ldr	r3, [pc, #136]	; (6358 <_i2c_m_sync_transfer+0x11c>)
    62ce:	4798      	blx	r3
    62d0:	6178      	str	r0, [r7, #20]

	if (ret) {
    62d2:	697b      	ldr	r3, [r7, #20]
    62d4:	2b00      	cmp	r3, #0
    62d6:	d02d      	beq.n	6334 <_i2c_m_sync_transfer+0xf8>
		i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    62d8:	687b      	ldr	r3, [r7, #4]
    62da:	885b      	ldrh	r3, [r3, #2]
    62dc:	b29b      	uxth	r3, r3
    62de:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    62e2:	b29a      	uxth	r2, r3
    62e4:	687b      	ldr	r3, [r7, #4]
    62e6:	805a      	strh	r2, [r3, #2]

		return ret;
    62e8:	697b      	ldr	r3, [r7, #20]
    62ea:	e02b      	b.n	6344 <_i2c_m_sync_transfer+0x108>
	}

	while (i2c_dev->service.msg.flags & I2C_M_BUSY) {
		ret = _sercom_i2c_sync_wait_bus(i2c_dev, &flags);
    62ec:	f107 030c 	add.w	r3, r7, #12
    62f0:	4619      	mov	r1, r3
    62f2:	6878      	ldr	r0, [r7, #4]
    62f4:	4b19      	ldr	r3, [pc, #100]	; (635c <_i2c_m_sync_transfer+0x120>)
    62f6:	4798      	blx	r3
    62f8:	6178      	str	r0, [r7, #20]

		if (ret) {
    62fa:	697b      	ldr	r3, [r7, #20]
    62fc:	2b00      	cmp	r3, #0
    62fe:	d012      	beq.n	6326 <_i2c_m_sync_transfer+0xea>
			if (msg->flags & I2C_M_STOP) {
    6300:	683b      	ldr	r3, [r7, #0]
    6302:	885b      	ldrh	r3, [r3, #2]
    6304:	b29b      	uxth	r3, r3
    6306:	b21b      	sxth	r3, r3
    6308:	2b00      	cmp	r3, #0
    630a:	da02      	bge.n	6312 <_i2c_m_sync_transfer+0xd6>
				_sercom_i2c_send_stop(hw);
    630c:	6938      	ldr	r0, [r7, #16]
    630e:	4b14      	ldr	r3, [pc, #80]	; (6360 <_i2c_m_sync_transfer+0x124>)
    6310:	4798      	blx	r3
			}

			i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    6312:	687b      	ldr	r3, [r7, #4]
    6314:	885b      	ldrh	r3, [r3, #2]
    6316:	b29b      	uxth	r3, r3
    6318:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    631c:	b29a      	uxth	r2, r3
    631e:	687b      	ldr	r3, [r7, #4]
    6320:	805a      	strh	r2, [r3, #2]

			return ret;
    6322:	697b      	ldr	r3, [r7, #20]
    6324:	e00e      	b.n	6344 <_i2c_m_sync_transfer+0x108>
		}

		ret = _sercom_i2c_sync_analyse_flags(hw, flags, &i2c_dev->service.msg);
    6326:	68fb      	ldr	r3, [r7, #12]
    6328:	687a      	ldr	r2, [r7, #4]
    632a:	4619      	mov	r1, r3
    632c:	6938      	ldr	r0, [r7, #16]
    632e:	4b0d      	ldr	r3, [pc, #52]	; (6364 <_i2c_m_sync_transfer+0x128>)
    6330:	4798      	blx	r3
    6332:	6178      	str	r0, [r7, #20]
	while (i2c_dev->service.msg.flags & I2C_M_BUSY) {
    6334:	687b      	ldr	r3, [r7, #4]
    6336:	885b      	ldrh	r3, [r3, #2]
    6338:	b29b      	uxth	r3, r3
    633a:	f403 7380 	and.w	r3, r3, #256	; 0x100
    633e:	2b00      	cmp	r3, #0
    6340:	d1d4      	bne.n	62ec <_i2c_m_sync_transfer+0xb0>
	}

	return ret;
    6342:	697b      	ldr	r3, [r7, #20]
}
    6344:	4618      	mov	r0, r3
    6346:	3718      	adds	r7, #24
    6348:	46bd      	mov	sp, r7
    634a:	bd80      	pop	{r7, pc}
    634c:	000134e0 	.word	0x000134e0
    6350:	00002dc9 	.word	0x00002dc9
    6354:	00005a99 	.word	0x00005a99
    6358:	0000611d 	.word	0x0000611d
    635c:	000060c1 	.word	0x000060c1
    6360:	00005e2d 	.word	0x00005e2d
    6364:	00005e49 	.word	0x00005e49

00006368 <_i2c_m_sync_init_impl>:
	}
	return ERR_NONE;
}

static int32_t _i2c_m_sync_init_impl(struct _i2c_m_service *const service, void *const hw)
{
    6368:	b580      	push	{r7, lr}
    636a:	b084      	sub	sp, #16
    636c:	af00      	add	r7, sp, #0
    636e:	6078      	str	r0, [r7, #4]
    6370:	6039      	str	r1, [r7, #0]
	uint8_t i = _get_i2cm_index(hw);
    6372:	6838      	ldr	r0, [r7, #0]
    6374:	4b42      	ldr	r3, [pc, #264]	; (6480 <_i2c_m_sync_init_impl+0x118>)
    6376:	4798      	blx	r3
    6378:	4603      	mov	r3, r0
    637a:	73fb      	strb	r3, [r7, #15]

	if (!hri_sercomi2cm_is_syncing(hw, SERCOM_I2CM_SYNCBUSY_SWRST)) {
    637c:	2101      	movs	r1, #1
    637e:	6838      	ldr	r0, [r7, #0]
    6380:	4b40      	ldr	r3, [pc, #256]	; (6484 <_i2c_m_sync_init_impl+0x11c>)
    6382:	4798      	blx	r3
    6384:	4603      	mov	r3, r0
    6386:	f083 0301 	eor.w	r3, r3, #1
    638a:	b2db      	uxtb	r3, r3
    638c:	2b00      	cmp	r3, #0
    638e:	d020      	beq.n	63d2 <_i2c_m_sync_init_impl+0x6a>
		uint32_t mode = _i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_MODE_Msk;
    6390:	7bfa      	ldrb	r2, [r7, #15]
    6392:	493d      	ldr	r1, [pc, #244]	; (6488 <_i2c_m_sync_init_impl+0x120>)
    6394:	4613      	mov	r3, r2
    6396:	005b      	lsls	r3, r3, #1
    6398:	4413      	add	r3, r2
    639a:	00db      	lsls	r3, r3, #3
    639c:	440b      	add	r3, r1
    639e:	3304      	adds	r3, #4
    63a0:	681b      	ldr	r3, [r3, #0]
    63a2:	f003 031c 	and.w	r3, r3, #28
    63a6:	60bb      	str	r3, [r7, #8]
		if (hri_sercomi2cm_get_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_ENABLE)) {
    63a8:	2102      	movs	r1, #2
    63aa:	6838      	ldr	r0, [r7, #0]
    63ac:	4b37      	ldr	r3, [pc, #220]	; (648c <_i2c_m_sync_init_impl+0x124>)
    63ae:	4798      	blx	r3
    63b0:	4603      	mov	r3, r0
    63b2:	2b00      	cmp	r3, #0
    63b4:	d006      	beq.n	63c4 <_i2c_m_sync_init_impl+0x5c>
			hri_sercomi2cm_clear_CTRLA_ENABLE_bit(hw);
    63b6:	6838      	ldr	r0, [r7, #0]
    63b8:	4b35      	ldr	r3, [pc, #212]	; (6490 <_i2c_m_sync_init_impl+0x128>)
    63ba:	4798      	blx	r3
			hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_ENABLE);
    63bc:	2102      	movs	r1, #2
    63be:	6838      	ldr	r0, [r7, #0]
    63c0:	4b34      	ldr	r3, [pc, #208]	; (6494 <_i2c_m_sync_init_impl+0x12c>)
    63c2:	4798      	blx	r3
		}
		hri_sercomi2cm_write_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_SWRST | mode);
    63c4:	68bb      	ldr	r3, [r7, #8]
    63c6:	f043 0301 	orr.w	r3, r3, #1
    63ca:	4619      	mov	r1, r3
    63cc:	6838      	ldr	r0, [r7, #0]
    63ce:	4b32      	ldr	r3, [pc, #200]	; (6498 <_i2c_m_sync_init_impl+0x130>)
    63d0:	4798      	blx	r3
	}
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST);
    63d2:	2101      	movs	r1, #1
    63d4:	6838      	ldr	r0, [r7, #0]
    63d6:	4b2f      	ldr	r3, [pc, #188]	; (6494 <_i2c_m_sync_init_impl+0x12c>)
    63d8:	4798      	blx	r3

	hri_sercomi2cm_write_CTRLA_reg(hw, _i2cms[i].ctrl_a);
    63da:	7bfa      	ldrb	r2, [r7, #15]
    63dc:	492a      	ldr	r1, [pc, #168]	; (6488 <_i2c_m_sync_init_impl+0x120>)
    63de:	4613      	mov	r3, r2
    63e0:	005b      	lsls	r3, r3, #1
    63e2:	4413      	add	r3, r2
    63e4:	00db      	lsls	r3, r3, #3
    63e6:	440b      	add	r3, r1
    63e8:	3304      	adds	r3, #4
    63ea:	681b      	ldr	r3, [r3, #0]
    63ec:	4619      	mov	r1, r3
    63ee:	6838      	ldr	r0, [r7, #0]
    63f0:	4b29      	ldr	r3, [pc, #164]	; (6498 <_i2c_m_sync_init_impl+0x130>)
    63f2:	4798      	blx	r3
	hri_sercomi2cm_write_CTRLB_reg(hw, _i2cms[i].ctrl_b);
    63f4:	7bfa      	ldrb	r2, [r7, #15]
    63f6:	4924      	ldr	r1, [pc, #144]	; (6488 <_i2c_m_sync_init_impl+0x120>)
    63f8:	4613      	mov	r3, r2
    63fa:	005b      	lsls	r3, r3, #1
    63fc:	4413      	add	r3, r2
    63fe:	00db      	lsls	r3, r3, #3
    6400:	440b      	add	r3, r1
    6402:	3308      	adds	r3, #8
    6404:	681b      	ldr	r3, [r3, #0]
    6406:	4619      	mov	r1, r3
    6408:	6838      	ldr	r0, [r7, #0]
    640a:	4b24      	ldr	r3, [pc, #144]	; (649c <_i2c_m_sync_init_impl+0x134>)
    640c:	4798      	blx	r3
	hri_sercomi2cm_write_BAUD_reg(hw, _i2cms[i].baud);
    640e:	7bfa      	ldrb	r2, [r7, #15]
    6410:	491d      	ldr	r1, [pc, #116]	; (6488 <_i2c_m_sync_init_impl+0x120>)
    6412:	4613      	mov	r3, r2
    6414:	005b      	lsls	r3, r3, #1
    6416:	4413      	add	r3, r2
    6418:	00db      	lsls	r3, r3, #3
    641a:	440b      	add	r3, r1
    641c:	330c      	adds	r3, #12
    641e:	681b      	ldr	r3, [r3, #0]
    6420:	4619      	mov	r1, r3
    6422:	6838      	ldr	r0, [r7, #0]
    6424:	4b1e      	ldr	r3, [pc, #120]	; (64a0 <_i2c_m_sync_init_impl+0x138>)
    6426:	4798      	blx	r3

	service->mode = (_i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_SPEED_Msk) >> SERCOM_I2CM_CTRLA_SPEED_Pos;
    6428:	7bfa      	ldrb	r2, [r7, #15]
    642a:	4917      	ldr	r1, [pc, #92]	; (6488 <_i2c_m_sync_init_impl+0x120>)
    642c:	4613      	mov	r3, r2
    642e:	005b      	lsls	r3, r3, #1
    6430:	4413      	add	r3, r2
    6432:	00db      	lsls	r3, r3, #3
    6434:	440b      	add	r3, r1
    6436:	3304      	adds	r3, #4
    6438:	681b      	ldr	r3, [r3, #0]
    643a:	0e1b      	lsrs	r3, r3, #24
    643c:	b29b      	uxth	r3, r3
    643e:	f003 0303 	and.w	r3, r3, #3
    6442:	b29a      	uxth	r2, r3
    6444:	687b      	ldr	r3, [r7, #4]
    6446:	819a      	strh	r2, [r3, #12]
	hri_sercomi2cm_write_ADDR_HS_bit(hw, service->mode < I2C_HS ? 0 : 1);
    6448:	687b      	ldr	r3, [r7, #4]
    644a:	899b      	ldrh	r3, [r3, #12]
    644c:	2b01      	cmp	r3, #1
    644e:	bf8c      	ite	hi
    6450:	2301      	movhi	r3, #1
    6452:	2300      	movls	r3, #0
    6454:	b2db      	uxtb	r3, r3
    6456:	4619      	mov	r1, r3
    6458:	6838      	ldr	r0, [r7, #0]
    645a:	4b12      	ldr	r3, [pc, #72]	; (64a4 <_i2c_m_sync_init_impl+0x13c>)
    645c:	4798      	blx	r3

	service->trise = _i2cms[i].trise;
    645e:	7bfa      	ldrb	r2, [r7, #15]
    6460:	4909      	ldr	r1, [pc, #36]	; (6488 <_i2c_m_sync_init_impl+0x120>)
    6462:	4613      	mov	r3, r2
    6464:	005b      	lsls	r3, r3, #1
    6466:	4413      	add	r3, r2
    6468:	00db      	lsls	r3, r3, #3
    646a:	440b      	add	r3, r1
    646c:	3312      	adds	r3, #18
    646e:	881a      	ldrh	r2, [r3, #0]
    6470:	687b      	ldr	r3, [r7, #4]
    6472:	81da      	strh	r2, [r3, #14]

	return ERR_NONE;
    6474:	2300      	movs	r3, #0
}
    6476:	4618      	mov	r0, r3
    6478:	3710      	adds	r7, #16
    647a:	46bd      	mov	sp, r7
    647c:	bd80      	pop	{r7, pc}
    647e:	bf00      	nop
    6480:	00005dc5 	.word	0x00005dc5
    6484:	00005815 	.word	0x00005815
    6488:	20000018 	.word	0x20000018
    648c:	00005991 	.word	0x00005991
    6490:	00005939 	.word	0x00005939
    6494:	000057f1 	.word	0x000057f1
    6498:	000059c1 	.word	0x000059c1
    649c:	00005b69 	.word	0x00005b69
    64a0:	00005bb1 	.word	0x00005bb1
    64a4:	00005bed 	.word	0x00005bed

000064a8 <_spi_load_regs_master>:
 *  are ignored.
 *  \param[in, out] hw Pointer to the hardware register base.
 *  \param[in] regs Pointer to register configuration values.
 */
static inline void _spi_load_regs_master(void *const hw, const struct sercomspi_regs_cfg *regs)
{
    64a8:	b580      	push	{r7, lr}
    64aa:	b082      	sub	sp, #8
    64ac:	af00      	add	r7, sp, #0
    64ae:	6078      	str	r0, [r7, #4]
    64b0:	6039      	str	r1, [r7, #0]
	ASSERT(hw && regs);
    64b2:	687b      	ldr	r3, [r7, #4]
    64b4:	2b00      	cmp	r3, #0
    64b6:	d004      	beq.n	64c2 <_spi_load_regs_master+0x1a>
    64b8:	683b      	ldr	r3, [r7, #0]
    64ba:	2b00      	cmp	r3, #0
    64bc:	d001      	beq.n	64c2 <_spi_load_regs_master+0x1a>
    64be:	2301      	movs	r3, #1
    64c0:	e000      	b.n	64c4 <_spi_load_regs_master+0x1c>
    64c2:	2300      	movs	r3, #0
    64c4:	f003 0301 	and.w	r3, r3, #1
    64c8:	b2db      	uxtb	r3, r3
    64ca:	f640 1209 	movw	r2, #2313	; 0x909
    64ce:	4915      	ldr	r1, [pc, #84]	; (6524 <_spi_load_regs_master+0x7c>)
    64d0:	4618      	mov	r0, r3
    64d2:	4b15      	ldr	r3, [pc, #84]	; (6528 <_spi_load_regs_master+0x80>)
    64d4:	4798      	blx	r3
	hri_sercomspi_write_CTRLA_reg(
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    64d6:	683b      	ldr	r3, [r7, #0]
    64d8:	681b      	ldr	r3, [r3, #0]
	hri_sercomspi_write_CTRLA_reg(
    64da:	f423 7381 	bic.w	r3, r3, #258	; 0x102
    64de:	f023 0301 	bic.w	r3, r3, #1
    64e2:	4619      	mov	r1, r3
    64e4:	6878      	ldr	r0, [r7, #4]
    64e6:	4b11      	ldr	r3, [pc, #68]	; (652c <_spi_load_regs_master+0x84>)
    64e8:	4798      	blx	r3
	hri_sercomspi_write_CTRLB_reg(
	    hw,
	    (regs->ctrlb
    64ea:	683b      	ldr	r3, [r7, #0]
    64ec:	685b      	ldr	r3, [r3, #4]
	     & ~(SERCOM_SPI_CTRLB_MSSEN | SERCOM_SPI_CTRLB_AMODE_Msk | SERCOM_SPI_CTRLB_SSDE | SERCOM_SPI_CTRLB_PLOADEN))
	        | (SERCOM_SPI_CTRLB_RXEN));
    64ee:	f423 3338 	bic.w	r3, r3, #188416	; 0x2e000
    64f2:	f423 7310 	bic.w	r3, r3, #576	; 0x240
	hri_sercomspi_write_CTRLB_reg(
    64f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    64fa:	4619      	mov	r1, r3
    64fc:	6878      	ldr	r0, [r7, #4]
    64fe:	4b0c      	ldr	r3, [pc, #48]	; (6530 <_spi_load_regs_master+0x88>)
    6500:	4798      	blx	r3
	hri_sercomspi_write_BAUD_reg(hw, regs->baud);
    6502:	683b      	ldr	r3, [r7, #0]
    6504:	7b1b      	ldrb	r3, [r3, #12]
    6506:	4619      	mov	r1, r3
    6508:	6878      	ldr	r0, [r7, #4]
    650a:	4b0a      	ldr	r3, [pc, #40]	; (6534 <_spi_load_regs_master+0x8c>)
    650c:	4798      	blx	r3
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    650e:	683b      	ldr	r3, [r7, #0]
    6510:	7b5b      	ldrb	r3, [r3, #13]
    6512:	4619      	mov	r1, r3
    6514:	6878      	ldr	r0, [r7, #4]
    6516:	4b08      	ldr	r3, [pc, #32]	; (6538 <_spi_load_regs_master+0x90>)
    6518:	4798      	blx	r3
}
    651a:	bf00      	nop
    651c:	3708      	adds	r7, #8
    651e:	46bd      	mov	sp, r7
    6520:	bd80      	pop	{r7, pc}
    6522:	bf00      	nop
    6524:	000134e0 	.word	0x000134e0
    6528:	00002dc9 	.word	0x00002dc9
    652c:	00005a75 	.word	0x00005a75
    6530:	00005b8d 	.word	0x00005b8d
    6534:	00005bcd 	.word	0x00005bcd
    6538:	00005d05 	.word	0x00005d05

0000653c <_spi_load_regs_slave>:
 *  are ignored.
 *  \param[in, out] hw Pointer to the hardware register base.
 *  \param[in] regs Pointer to register configuration values.
 */
static inline void _spi_load_regs_slave(void *const hw, const struct sercomspi_regs_cfg *regs)
{
    653c:	b580      	push	{r7, lr}
    653e:	b082      	sub	sp, #8
    6540:	af00      	add	r7, sp, #0
    6542:	6078      	str	r0, [r7, #4]
    6544:	6039      	str	r1, [r7, #0]
	ASSERT(hw && regs);
    6546:	687b      	ldr	r3, [r7, #4]
    6548:	2b00      	cmp	r3, #0
    654a:	d004      	beq.n	6556 <_spi_load_regs_slave+0x1a>
    654c:	683b      	ldr	r3, [r7, #0]
    654e:	2b00      	cmp	r3, #0
    6550:	d001      	beq.n	6556 <_spi_load_regs_slave+0x1a>
    6552:	2301      	movs	r3, #1
    6554:	e000      	b.n	6558 <_spi_load_regs_slave+0x1c>
    6556:	2300      	movs	r3, #0
    6558:	f003 0301 	and.w	r3, r3, #1
    655c:	b2db      	uxtb	r3, r3
    655e:	f640 121d 	movw	r2, #2333	; 0x91d
    6562:	491a      	ldr	r1, [pc, #104]	; (65cc <_spi_load_regs_slave+0x90>)
    6564:	4618      	mov	r0, r3
    6566:	4b1a      	ldr	r3, [pc, #104]	; (65d0 <_spi_load_regs_slave+0x94>)
    6568:	4798      	blx	r3
	hri_sercomspi_write_CTRLA_reg(
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    656a:	683b      	ldr	r3, [r7, #0]
    656c:	681b      	ldr	r3, [r3, #0]
	hri_sercomspi_write_CTRLA_reg(
    656e:	f423 7381 	bic.w	r3, r3, #258	; 0x102
    6572:	f023 0301 	bic.w	r3, r3, #1
    6576:	4619      	mov	r1, r3
    6578:	6878      	ldr	r0, [r7, #4]
    657a:	4b16      	ldr	r3, [pc, #88]	; (65d4 <_spi_load_regs_slave+0x98>)
    657c:	4798      	blx	r3
	hri_sercomspi_write_CTRLB_reg(hw,
	                              (regs->ctrlb & ~(SERCOM_SPI_CTRLB_MSSEN))
    657e:	683b      	ldr	r3, [r7, #0]
    6580:	685b      	ldr	r3, [r3, #4]
	                                  | (SERCOM_SPI_CTRLB_RXEN | SERCOM_SPI_CTRLB_SSDE | SERCOM_SPI_CTRLB_PLOADEN));
    6582:	f423 3308 	bic.w	r3, r3, #139264	; 0x22000
    6586:	f423 7310 	bic.w	r3, r3, #576	; 0x240
	hri_sercomspi_write_CTRLB_reg(hw,
    658a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    658e:	f443 7310 	orr.w	r3, r3, #576	; 0x240
    6592:	4619      	mov	r1, r3
    6594:	6878      	ldr	r0, [r7, #4]
    6596:	4b10      	ldr	r3, [pc, #64]	; (65d8 <_spi_load_regs_slave+0x9c>)
    6598:	4798      	blx	r3
	hri_sercomspi_write_ADDR_reg(hw, regs->addr);
    659a:	683b      	ldr	r3, [r7, #0]
    659c:	689b      	ldr	r3, [r3, #8]
    659e:	4619      	mov	r1, r3
    65a0:	6878      	ldr	r0, [r7, #4]
    65a2:	4b0e      	ldr	r3, [pc, #56]	; (65dc <_spi_load_regs_slave+0xa0>)
    65a4:	4798      	blx	r3
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    65a6:	683b      	ldr	r3, [r7, #0]
    65a8:	7b5b      	ldrb	r3, [r3, #13]
    65aa:	4619      	mov	r1, r3
    65ac:	6878      	ldr	r0, [r7, #4]
    65ae:	4b0c      	ldr	r3, [pc, #48]	; (65e0 <_spi_load_regs_slave+0xa4>)
    65b0:	4798      	blx	r3
	while (hri_sercomspi_is_syncing(hw, 0xFFFFFFFF))
    65b2:	bf00      	nop
    65b4:	f04f 31ff 	mov.w	r1, #4294967295
    65b8:	6878      	ldr	r0, [r7, #4]
    65ba:	4b0a      	ldr	r3, [pc, #40]	; (65e4 <_spi_load_regs_slave+0xa8>)
    65bc:	4798      	blx	r3
    65be:	4603      	mov	r3, r0
    65c0:	2b00      	cmp	r3, #0
    65c2:	d1f7      	bne.n	65b4 <_spi_load_regs_slave+0x78>
		;
}
    65c4:	bf00      	nop
    65c6:	3708      	adds	r7, #8
    65c8:	46bd      	mov	sp, r7
    65ca:	bd80      	pop	{r7, pc}
    65cc:	000134e0 	.word	0x000134e0
    65d0:	00002dc9 	.word	0x00002dc9
    65d4:	00005a75 	.word	0x00005a75
    65d8:	00005b8d 	.word	0x00005b8d
    65dc:	00005c71 	.word	0x00005c71
    65e0:	00005d05 	.word	0x00005d05
    65e4:	00005861 	.word	0x00005861

000065e8 <_spi_get_regs>:
/** \brief Return the pointer to register settings of specific SERCOM
 *  \param[in] hw_addr The hardware register base address.
 *  \return Pointer to register settings of specific SERCOM.
 */
static inline const struct sercomspi_regs_cfg *_spi_get_regs(const uint32_t hw_addr)
{
    65e8:	b580      	push	{r7, lr}
    65ea:	b084      	sub	sp, #16
    65ec:	af00      	add	r7, sp, #0
    65ee:	6078      	str	r0, [r7, #4]
	uint8_t n = _sercom_get_hardware_index((const void *)hw_addr);
    65f0:	687b      	ldr	r3, [r7, #4]
    65f2:	4618      	mov	r0, r3
    65f4:	4b11      	ldr	r3, [pc, #68]	; (663c <_spi_get_regs+0x54>)
    65f6:	4798      	blx	r3
    65f8:	4603      	mov	r3, r0
    65fa:	73bb      	strb	r3, [r7, #14]
	uint8_t i;

	for (i = 0; i < sizeof(sercomspi_regs) / sizeof(struct sercomspi_regs_cfg); i++) {
    65fc:	2300      	movs	r3, #0
    65fe:	73fb      	strb	r3, [r7, #15]
    6600:	e014      	b.n	662c <_spi_get_regs+0x44>
		if (sercomspi_regs[i].n == n) {
    6602:	7bfa      	ldrb	r2, [r7, #15]
    6604:	490e      	ldr	r1, [pc, #56]	; (6640 <_spi_get_regs+0x58>)
    6606:	4613      	mov	r3, r2
    6608:	011b      	lsls	r3, r3, #4
    660a:	4413      	add	r3, r2
    660c:	440b      	add	r3, r1
    660e:	3310      	adds	r3, #16
    6610:	781b      	ldrb	r3, [r3, #0]
    6612:	7bba      	ldrb	r2, [r7, #14]
    6614:	429a      	cmp	r2, r3
    6616:	d106      	bne.n	6626 <_spi_get_regs+0x3e>
			return &sercomspi_regs[i];
    6618:	7bfa      	ldrb	r2, [r7, #15]
    661a:	4613      	mov	r3, r2
    661c:	011b      	lsls	r3, r3, #4
    661e:	4413      	add	r3, r2
    6620:	4a07      	ldr	r2, [pc, #28]	; (6640 <_spi_get_regs+0x58>)
    6622:	4413      	add	r3, r2
    6624:	e006      	b.n	6634 <_spi_get_regs+0x4c>
	for (i = 0; i < sizeof(sercomspi_regs) / sizeof(struct sercomspi_regs_cfg); i++) {
    6626:	7bfb      	ldrb	r3, [r7, #15]
    6628:	3301      	adds	r3, #1
    662a:	73fb      	strb	r3, [r7, #15]
    662c:	7bfb      	ldrb	r3, [r7, #15]
    662e:	2b01      	cmp	r3, #1
    6630:	d9e7      	bls.n	6602 <_spi_get_regs+0x1a>
		}
	}

	return NULL;
    6632:	2300      	movs	r3, #0
}
    6634:	4618      	mov	r0, r3
    6636:	3710      	adds	r7, #16
    6638:	46bd      	mov	sp, r7
    663a:	bd80      	pop	{r7, pc}
    663c:	00005d69 	.word	0x00005d69
    6640:	0001351c 	.word	0x0001351c

00006644 <_spi_m_sync_init>:

int32_t _spi_m_sync_init(struct _spi_m_sync_dev *dev, void *const hw)
{
    6644:	b580      	push	{r7, lr}
    6646:	b084      	sub	sp, #16
    6648:	af00      	add	r7, sp, #0
    664a:	6078      	str	r0, [r7, #4]
    664c:	6039      	str	r1, [r7, #0]
	const struct sercomspi_regs_cfg *regs = _spi_get_regs((uint32_t)hw);
    664e:	683b      	ldr	r3, [r7, #0]
    6650:	4618      	mov	r0, r3
    6652:	4b35      	ldr	r3, [pc, #212]	; (6728 <_spi_m_sync_init+0xe4>)
    6654:	4798      	blx	r3
    6656:	60f8      	str	r0, [r7, #12]

	ASSERT(dev && hw);
    6658:	687b      	ldr	r3, [r7, #4]
    665a:	2b00      	cmp	r3, #0
    665c:	d004      	beq.n	6668 <_spi_m_sync_init+0x24>
    665e:	683b      	ldr	r3, [r7, #0]
    6660:	2b00      	cmp	r3, #0
    6662:	d001      	beq.n	6668 <_spi_m_sync_init+0x24>
    6664:	2301      	movs	r3, #1
    6666:	e000      	b.n	666a <_spi_m_sync_init+0x26>
    6668:	2300      	movs	r3, #0
    666a:	f003 0301 	and.w	r3, r3, #1
    666e:	b2db      	uxtb	r3, r3
    6670:	f640 123f 	movw	r2, #2367	; 0x93f
    6674:	492d      	ldr	r1, [pc, #180]	; (672c <_spi_m_sync_init+0xe8>)
    6676:	4618      	mov	r0, r3
    6678:	4b2d      	ldr	r3, [pc, #180]	; (6730 <_spi_m_sync_init+0xec>)
    667a:	4798      	blx	r3

	if (regs == NULL) {
    667c:	68fb      	ldr	r3, [r7, #12]
    667e:	2b00      	cmp	r3, #0
    6680:	d102      	bne.n	6688 <_spi_m_sync_init+0x44>
		return ERR_INVALID_ARG;
    6682:	f06f 030c 	mvn.w	r3, #12
    6686:	e04a      	b.n	671e <_spi_m_sync_init+0xda>
	}

	if (!hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    6688:	2101      	movs	r1, #1
    668a:	6838      	ldr	r0, [r7, #0]
    668c:	4b29      	ldr	r3, [pc, #164]	; (6734 <_spi_m_sync_init+0xf0>)
    668e:	4798      	blx	r3
    6690:	4603      	mov	r3, r0
    6692:	f083 0301 	eor.w	r3, r3, #1
    6696:	b2db      	uxtb	r3, r3
    6698:	2b00      	cmp	r3, #0
    669a:	d019      	beq.n	66d0 <_spi_m_sync_init+0x8c>
		uint32_t mode = regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk;
    669c:	68fb      	ldr	r3, [r7, #12]
    669e:	681b      	ldr	r3, [r3, #0]
    66a0:	f003 031c 	and.w	r3, r3, #28
    66a4:	60bb      	str	r3, [r7, #8]
		if (hri_sercomspi_get_CTRLA_reg(hw, SERCOM_SPI_CTRLA_ENABLE)) {
    66a6:	2102      	movs	r1, #2
    66a8:	6838      	ldr	r0, [r7, #0]
    66aa:	4b23      	ldr	r3, [pc, #140]	; (6738 <_spi_m_sync_init+0xf4>)
    66ac:	4798      	blx	r3
    66ae:	4603      	mov	r3, r0
    66b0:	2b00      	cmp	r3, #0
    66b2:	d006      	beq.n	66c2 <_spi_m_sync_init+0x7e>
			hri_sercomspi_clear_CTRLA_ENABLE_bit(hw);
    66b4:	6838      	ldr	r0, [r7, #0]
    66b6:	4b21      	ldr	r3, [pc, #132]	; (673c <_spi_m_sync_init+0xf8>)
    66b8:	4798      	blx	r3
			hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_ENABLE);
    66ba:	2102      	movs	r1, #2
    66bc:	6838      	ldr	r0, [r7, #0]
    66be:	4b20      	ldr	r3, [pc, #128]	; (6740 <_spi_m_sync_init+0xfc>)
    66c0:	4798      	blx	r3
		}
		hri_sercomspi_write_CTRLA_reg(hw, SERCOM_SPI_CTRLA_SWRST | mode);
    66c2:	68bb      	ldr	r3, [r7, #8]
    66c4:	f043 0301 	orr.w	r3, r3, #1
    66c8:	4619      	mov	r1, r3
    66ca:	6838      	ldr	r0, [r7, #0]
    66cc:	4b1d      	ldr	r3, [pc, #116]	; (6744 <_spi_m_sync_init+0x100>)
    66ce:	4798      	blx	r3
	}
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST);
    66d0:	2101      	movs	r1, #1
    66d2:	6838      	ldr	r0, [r7, #0]
    66d4:	4b1a      	ldr	r3, [pc, #104]	; (6740 <_spi_m_sync_init+0xfc>)
    66d6:	4798      	blx	r3

	dev->prvt = hw;
    66d8:	687b      	ldr	r3, [r7, #4]
    66da:	683a      	ldr	r2, [r7, #0]
    66dc:	601a      	str	r2, [r3, #0]

	if ((regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk) == SERCOM_USART_CTRLA_MODE_SPI_SLAVE) {
    66de:	68fb      	ldr	r3, [r7, #12]
    66e0:	681b      	ldr	r3, [r3, #0]
    66e2:	f003 031c 	and.w	r3, r3, #28
    66e6:	2b08      	cmp	r3, #8
    66e8:	d104      	bne.n	66f4 <_spi_m_sync_init+0xb0>
		_spi_load_regs_slave(hw, regs);
    66ea:	68f9      	ldr	r1, [r7, #12]
    66ec:	6838      	ldr	r0, [r7, #0]
    66ee:	4b16      	ldr	r3, [pc, #88]	; (6748 <_spi_m_sync_init+0x104>)
    66f0:	4798      	blx	r3
    66f2:	e003      	b.n	66fc <_spi_m_sync_init+0xb8>
	} else {
		_spi_load_regs_master(hw, regs);
    66f4:	68f9      	ldr	r1, [r7, #12]
    66f6:	6838      	ldr	r0, [r7, #0]
    66f8:	4b14      	ldr	r3, [pc, #80]	; (674c <_spi_m_sync_init+0x108>)
    66fa:	4798      	blx	r3
	}

	/* Load character size from default hardware configuration */
	dev->char_size = ((regs->ctrlb & SERCOM_SPI_CTRLB_CHSIZE_Msk) == 0) ? 1 : 2;
    66fc:	68fb      	ldr	r3, [r7, #12]
    66fe:	685b      	ldr	r3, [r3, #4]
    6700:	f003 0307 	and.w	r3, r3, #7
    6704:	2b00      	cmp	r3, #0
    6706:	d101      	bne.n	670c <_spi_m_sync_init+0xc8>
    6708:	2201      	movs	r2, #1
    670a:	e000      	b.n	670e <_spi_m_sync_init+0xca>
    670c:	2202      	movs	r2, #2
    670e:	687b      	ldr	r3, [r7, #4]
    6710:	711a      	strb	r2, [r3, #4]

	dev->dummy_byte = regs->dummy_byte;
    6712:	68fb      	ldr	r3, [r7, #12]
    6714:	89db      	ldrh	r3, [r3, #14]
    6716:	b29a      	uxth	r2, r3
    6718:	687b      	ldr	r3, [r7, #4]
    671a:	80da      	strh	r2, [r3, #6]

	return ERR_NONE;
    671c:	2300      	movs	r3, #0
}
    671e:	4618      	mov	r0, r3
    6720:	3710      	adds	r7, #16
    6722:	46bd      	mov	sp, r7
    6724:	bd80      	pop	{r7, pc}
    6726:	bf00      	nop
    6728:	000065e9 	.word	0x000065e9
    672c:	000134e0 	.word	0x000134e0
    6730:	00002dc9 	.word	0x00002dc9
    6734:	00005861 	.word	0x00005861
    6738:	00005a45 	.word	0x00005a45
    673c:	00005a1d 	.word	0x00005a1d
    6740:	0000583d 	.word	0x0000583d
    6744:	00005a75 	.word	0x00005a75
    6748:	0000653d 	.word	0x0000653d
    674c:	000064a9 	.word	0x000064a9

00006750 <_spi_wait_bus_idle>:
	return _spi_set_data_order(dev->prvt, dord);
}

/** Wait until SPI bus idle. */
static inline void _spi_wait_bus_idle(void *const hw)
{
    6750:	b580      	push	{r7, lr}
    6752:	b082      	sub	sp, #8
    6754:	af00      	add	r7, sp, #0
    6756:	6078      	str	r0, [r7, #4]
	while (!(hri_sercomspi_get_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC | SERCOM_SPI_INTFLAG_DRE))) {
    6758:	bf00      	nop
    675a:	2103      	movs	r1, #3
    675c:	6878      	ldr	r0, [r7, #4]
    675e:	4b06      	ldr	r3, [pc, #24]	; (6778 <_spi_wait_bus_idle+0x28>)
    6760:	4798      	blx	r3
    6762:	4603      	mov	r3, r0
    6764:	2b00      	cmp	r3, #0
    6766:	d0f8      	beq.n	675a <_spi_wait_bus_idle+0xa>
		;
	}
	hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC | SERCOM_SPI_INTFLAG_DRE);
    6768:	2103      	movs	r1, #3
    676a:	6878      	ldr	r0, [r7, #4]
    676c:	4b03      	ldr	r3, [pc, #12]	; (677c <_spi_wait_bus_idle+0x2c>)
    676e:	4798      	blx	r3
}
    6770:	bf00      	nop
    6772:	3708      	adds	r7, #8
    6774:	46bd      	mov	sp, r7
    6776:	bd80      	pop	{r7, pc}
    6778:	000058d7 	.word	0x000058d7
    677c:	00005919 	.word	0x00005919

00006780 <_spi_rx_check_and_receive>:
	uint8_t char_size;
};

/** Check interrupt flag of RXC and update transaction runtime information. */
static inline bool _spi_rx_check_and_receive(void *const hw, const uint32_t iflag, struct _spi_trans_ctrl *ctrl)
{
    6780:	b580      	push	{r7, lr}
    6782:	b086      	sub	sp, #24
    6784:	af00      	add	r7, sp, #0
    6786:	60f8      	str	r0, [r7, #12]
    6788:	60b9      	str	r1, [r7, #8]
    678a:	607a      	str	r2, [r7, #4]
	uint32_t data;

	if (!(iflag & SERCOM_SPI_INTFLAG_RXC)) {
    678c:	68bb      	ldr	r3, [r7, #8]
    678e:	f003 0304 	and.w	r3, r3, #4
    6792:	2b00      	cmp	r3, #0
    6794:	d101      	bne.n	679a <_spi_rx_check_and_receive+0x1a>
		return false;
    6796:	2300      	movs	r3, #0
    6798:	e022      	b.n	67e0 <_spi_rx_check_and_receive+0x60>
	}

	data = hri_sercomspi_read_DATA_reg(hw);
    679a:	68f8      	ldr	r0, [r7, #12]
    679c:	4b12      	ldr	r3, [pc, #72]	; (67e8 <_spi_rx_check_and_receive+0x68>)
    679e:	4798      	blx	r3
    67a0:	6178      	str	r0, [r7, #20]

	if (ctrl->rxbuf) {
    67a2:	687b      	ldr	r3, [r7, #4]
    67a4:	685b      	ldr	r3, [r3, #4]
    67a6:	2b00      	cmp	r3, #0
    67a8:	d014      	beq.n	67d4 <_spi_rx_check_and_receive+0x54>
		*ctrl->rxbuf++ = (uint8_t)data;
    67aa:	687b      	ldr	r3, [r7, #4]
    67ac:	685b      	ldr	r3, [r3, #4]
    67ae:	1c59      	adds	r1, r3, #1
    67b0:	687a      	ldr	r2, [r7, #4]
    67b2:	6051      	str	r1, [r2, #4]
    67b4:	697a      	ldr	r2, [r7, #20]
    67b6:	b2d2      	uxtb	r2, r2
    67b8:	701a      	strb	r2, [r3, #0]

		if (ctrl->char_size > 1) {
    67ba:	687b      	ldr	r3, [r7, #4]
    67bc:	7c1b      	ldrb	r3, [r3, #16]
    67be:	2b01      	cmp	r3, #1
    67c0:	d908      	bls.n	67d4 <_spi_rx_check_and_receive+0x54>
			*ctrl->rxbuf++ = (uint8_t)(data >> 8);
    67c2:	687b      	ldr	r3, [r7, #4]
    67c4:	685b      	ldr	r3, [r3, #4]
    67c6:	1c59      	adds	r1, r3, #1
    67c8:	687a      	ldr	r2, [r7, #4]
    67ca:	6051      	str	r1, [r2, #4]
    67cc:	697a      	ldr	r2, [r7, #20]
    67ce:	0a12      	lsrs	r2, r2, #8
    67d0:	b2d2      	uxtb	r2, r2
    67d2:	701a      	strb	r2, [r3, #0]
		}
	}

	ctrl->rxcnt++;
    67d4:	687b      	ldr	r3, [r7, #4]
    67d6:	68db      	ldr	r3, [r3, #12]
    67d8:	1c5a      	adds	r2, r3, #1
    67da:	687b      	ldr	r3, [r7, #4]
    67dc:	60da      	str	r2, [r3, #12]

	return true;
    67de:	2301      	movs	r3, #1
}
    67e0:	4618      	mov	r0, r3
    67e2:	3718      	adds	r7, #24
    67e4:	46bd      	mov	sp, r7
    67e6:	bd80      	pop	{r7, pc}
    67e8:	00005ced 	.word	0x00005ced

000067ec <_spi_tx_check_and_send>:

/** Check interrupt flag of DRE and update transaction runtime information. */
static inline void _spi_tx_check_and_send(void *const hw, const uint32_t iflag, struct _spi_trans_ctrl *ctrl,
                                          uint16_t dummy)
{
    67ec:	b580      	push	{r7, lr}
    67ee:	b086      	sub	sp, #24
    67f0:	af00      	add	r7, sp, #0
    67f2:	60f8      	str	r0, [r7, #12]
    67f4:	60b9      	str	r1, [r7, #8]
    67f6:	607a      	str	r2, [r7, #4]
    67f8:	807b      	strh	r3, [r7, #2]
	uint32_t data;

	if (!(SERCOM_SPI_INTFLAG_DRE & iflag)) {
    67fa:	68bb      	ldr	r3, [r7, #8]
    67fc:	f003 0301 	and.w	r3, r3, #1
    6800:	2b00      	cmp	r3, #0
    6802:	d028      	beq.n	6856 <_spi_tx_check_and_send+0x6a>
		return;
	}

	if (ctrl->txbuf) {
    6804:	687b      	ldr	r3, [r7, #4]
    6806:	681b      	ldr	r3, [r3, #0]
    6808:	2b00      	cmp	r3, #0
    680a:	d018      	beq.n	683e <_spi_tx_check_and_send+0x52>
		data = *ctrl->txbuf++;
    680c:	687b      	ldr	r3, [r7, #4]
    680e:	681b      	ldr	r3, [r3, #0]
    6810:	1c59      	adds	r1, r3, #1
    6812:	687a      	ldr	r2, [r7, #4]
    6814:	6011      	str	r1, [r2, #0]
    6816:	781b      	ldrb	r3, [r3, #0]
    6818:	617b      	str	r3, [r7, #20]

		if (ctrl->char_size > 1) {
    681a:	687b      	ldr	r3, [r7, #4]
    681c:	7c1b      	ldrb	r3, [r3, #16]
    681e:	2b01      	cmp	r3, #1
    6820:	d90f      	bls.n	6842 <_spi_tx_check_and_send+0x56>
			data |= (*ctrl->txbuf) << 8;
    6822:	687b      	ldr	r3, [r7, #4]
    6824:	681b      	ldr	r3, [r3, #0]
    6826:	781b      	ldrb	r3, [r3, #0]
    6828:	021b      	lsls	r3, r3, #8
    682a:	461a      	mov	r2, r3
    682c:	697b      	ldr	r3, [r7, #20]
    682e:	4313      	orrs	r3, r2
    6830:	617b      	str	r3, [r7, #20]
			ctrl->txbuf++;
    6832:	687b      	ldr	r3, [r7, #4]
    6834:	681b      	ldr	r3, [r3, #0]
    6836:	1c5a      	adds	r2, r3, #1
    6838:	687b      	ldr	r3, [r7, #4]
    683a:	601a      	str	r2, [r3, #0]
    683c:	e001      	b.n	6842 <_spi_tx_check_and_send+0x56>
		}
	} else {
		data = dummy;
    683e:	887b      	ldrh	r3, [r7, #2]
    6840:	617b      	str	r3, [r7, #20]
	}

	ctrl->txcnt++;
    6842:	687b      	ldr	r3, [r7, #4]
    6844:	689b      	ldr	r3, [r3, #8]
    6846:	1c5a      	adds	r2, r3, #1
    6848:	687b      	ldr	r3, [r7, #4]
    684a:	609a      	str	r2, [r3, #8]
	hri_sercomspi_write_DATA_reg(hw, data);
    684c:	6979      	ldr	r1, [r7, #20]
    684e:	68f8      	ldr	r0, [r7, #12]
    6850:	4b03      	ldr	r3, [pc, #12]	; (6860 <_spi_tx_check_and_send+0x74>)
    6852:	4798      	blx	r3
    6854:	e000      	b.n	6858 <_spi_tx_check_and_send+0x6c>
		return;
    6856:	bf00      	nop
}
    6858:	3718      	adds	r7, #24
    685a:	46bd      	mov	sp, r7
    685c:	bd80      	pop	{r7, pc}
    685e:	bf00      	nop
    6860:	00005cd1 	.word	0x00005cd1

00006864 <_spi_err_check>:

/** Check interrupt flag of ERROR and update transaction runtime information. */
static inline int32_t _spi_err_check(const uint32_t iflag, void *const hw)
{
    6864:	b580      	push	{r7, lr}
    6866:	b082      	sub	sp, #8
    6868:	af00      	add	r7, sp, #0
    686a:	6078      	str	r0, [r7, #4]
    686c:	6039      	str	r1, [r7, #0]
	if (SERCOM_SPI_INTFLAG_ERROR & iflag) {
    686e:	687b      	ldr	r3, [r7, #4]
    6870:	f003 0380 	and.w	r3, r3, #128	; 0x80
    6874:	2b00      	cmp	r3, #0
    6876:	d00b      	beq.n	6890 <_spi_err_check+0x2c>
		hri_sercomspi_clear_STATUS_reg(hw, ~0);
    6878:	f64f 71ff 	movw	r1, #65535	; 0xffff
    687c:	6838      	ldr	r0, [r7, #0]
    687e:	4b07      	ldr	r3, [pc, #28]	; (689c <_spi_err_check+0x38>)
    6880:	4798      	blx	r3
		hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_ERROR);
    6882:	2180      	movs	r1, #128	; 0x80
    6884:	6838      	ldr	r0, [r7, #0]
    6886:	4b06      	ldr	r3, [pc, #24]	; (68a0 <_spi_err_check+0x3c>)
    6888:	4798      	blx	r3
		return ERR_OVERFLOW;
    688a:	f06f 0312 	mvn.w	r3, #18
    688e:	e000      	b.n	6892 <_spi_err_check+0x2e>
	}

	return ERR_NONE;
    6890:	2300      	movs	r3, #0
}
    6892:	4618      	mov	r0, r3
    6894:	3708      	adds	r7, #8
    6896:	46bd      	mov	sp, r7
    6898:	bd80      	pop	{r7, pc}
    689a:	bf00      	nop
    689c:	00005d25 	.word	0x00005d25
    68a0:	00005919 	.word	0x00005919

000068a4 <_spi_m_sync_trans>:

int32_t _spi_m_sync_trans(struct _spi_m_sync_dev *dev, const struct spi_msg *msg)
{
    68a4:	b590      	push	{r4, r7, lr}
    68a6:	b08b      	sub	sp, #44	; 0x2c
    68a8:	af00      	add	r7, sp, #0
    68aa:	6078      	str	r0, [r7, #4]
    68ac:	6039      	str	r1, [r7, #0]
	void *                 hw   = dev->prvt;
    68ae:	687b      	ldr	r3, [r7, #4]
    68b0:	681b      	ldr	r3, [r3, #0]
    68b2:	623b      	str	r3, [r7, #32]
	int32_t                rc   = 0;
    68b4:	2300      	movs	r3, #0
    68b6:	627b      	str	r3, [r7, #36]	; 0x24
	struct _spi_trans_ctrl ctrl = {msg->txbuf, msg->rxbuf, 0, 0, dev->char_size};
    68b8:	683b      	ldr	r3, [r7, #0]
    68ba:	681b      	ldr	r3, [r3, #0]
    68bc:	60bb      	str	r3, [r7, #8]
    68be:	683b      	ldr	r3, [r7, #0]
    68c0:	685b      	ldr	r3, [r3, #4]
    68c2:	60fb      	str	r3, [r7, #12]
    68c4:	2300      	movs	r3, #0
    68c6:	613b      	str	r3, [r7, #16]
    68c8:	2300      	movs	r3, #0
    68ca:	617b      	str	r3, [r7, #20]
    68cc:	687b      	ldr	r3, [r7, #4]
    68ce:	791b      	ldrb	r3, [r3, #4]
    68d0:	763b      	strb	r3, [r7, #24]

	ASSERT(dev && hw);
    68d2:	687b      	ldr	r3, [r7, #4]
    68d4:	2b00      	cmp	r3, #0
    68d6:	d004      	beq.n	68e2 <_spi_m_sync_trans+0x3e>
    68d8:	6a3b      	ldr	r3, [r7, #32]
    68da:	2b00      	cmp	r3, #0
    68dc:	d001      	beq.n	68e2 <_spi_m_sync_trans+0x3e>
    68de:	2301      	movs	r3, #1
    68e0:	e000      	b.n	68e4 <_spi_m_sync_trans+0x40>
    68e2:	2300      	movs	r3, #0
    68e4:	f003 0301 	and.w	r3, r3, #1
    68e8:	b2db      	uxtb	r3, r3
    68ea:	f640 22a3 	movw	r2, #2723	; 0xaa3
    68ee:	492b      	ldr	r1, [pc, #172]	; (699c <_spi_m_sync_trans+0xf8>)
    68f0:	4618      	mov	r0, r3
    68f2:	4b2b      	ldr	r3, [pc, #172]	; (69a0 <_spi_m_sync_trans+0xfc>)
    68f4:	4798      	blx	r3

	/* If settings are not applied (pending), we can not go on */
	if (hri_sercomspi_is_syncing(
    68f6:	2107      	movs	r1, #7
    68f8:	6a38      	ldr	r0, [r7, #32]
    68fa:	4b2a      	ldr	r3, [pc, #168]	; (69a4 <_spi_m_sync_trans+0x100>)
    68fc:	4798      	blx	r3
    68fe:	4603      	mov	r3, r0
    6900:	2b00      	cmp	r3, #0
    6902:	d002      	beq.n	690a <_spi_m_sync_trans+0x66>
	        hw, (SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE | SERCOM_SPI_SYNCBUSY_CTRLB))) {
		return ERR_BUSY;
    6904:	f06f 0303 	mvn.w	r3, #3
    6908:	e043      	b.n	6992 <_spi_m_sync_trans+0xee>
	}

	/* SPI must be enabled to start synchronous transfer */
	if (!hri_sercomspi_get_CTRLA_ENABLE_bit(hw)) {
    690a:	6a38      	ldr	r0, [r7, #32]
    690c:	4b26      	ldr	r3, [pc, #152]	; (69a8 <_spi_m_sync_trans+0x104>)
    690e:	4798      	blx	r3
    6910:	4603      	mov	r3, r0
    6912:	f083 0301 	eor.w	r3, r3, #1
    6916:	b2db      	uxtb	r3, r3
    6918:	2b00      	cmp	r3, #0
    691a:	d002      	beq.n	6922 <_spi_m_sync_trans+0x7e>
		return ERR_NOT_INITIALIZED;
    691c:	f06f 0313 	mvn.w	r3, #19
    6920:	e037      	b.n	6992 <_spi_m_sync_trans+0xee>
	}

	for (;;) {
		uint32_t iflag = hri_sercomspi_read_INTFLAG_reg(hw);
    6922:	6a38      	ldr	r0, [r7, #32]
    6924:	4b21      	ldr	r3, [pc, #132]	; (69ac <_spi_m_sync_trans+0x108>)
    6926:	4798      	blx	r3
    6928:	4603      	mov	r3, r0
    692a:	61fb      	str	r3, [r7, #28]

		if (!_spi_rx_check_and_receive(hw, iflag, &ctrl)) {
    692c:	f107 0308 	add.w	r3, r7, #8
    6930:	461a      	mov	r2, r3
    6932:	69f9      	ldr	r1, [r7, #28]
    6934:	6a38      	ldr	r0, [r7, #32]
    6936:	4b1e      	ldr	r3, [pc, #120]	; (69b0 <_spi_m_sync_trans+0x10c>)
    6938:	4798      	blx	r3
    693a:	4603      	mov	r3, r0
    693c:	f083 0301 	eor.w	r3, r3, #1
    6940:	b2db      	uxtb	r3, r3
    6942:	2b00      	cmp	r3, #0
    6944:	d00b      	beq.n	695e <_spi_m_sync_trans+0xba>
			/* In master mode, do not start next byte before previous byte received
			 * to make better output waveform */
			if (ctrl.rxcnt >= ctrl.txcnt) {
    6946:	697a      	ldr	r2, [r7, #20]
    6948:	693b      	ldr	r3, [r7, #16]
    694a:	429a      	cmp	r2, r3
    694c:	d307      	bcc.n	695e <_spi_m_sync_trans+0xba>
				_spi_tx_check_and_send(hw, iflag, &ctrl, dev->dummy_byte);
    694e:	687b      	ldr	r3, [r7, #4]
    6950:	88db      	ldrh	r3, [r3, #6]
    6952:	f107 0208 	add.w	r2, r7, #8
    6956:	69f9      	ldr	r1, [r7, #28]
    6958:	6a38      	ldr	r0, [r7, #32]
    695a:	4c16      	ldr	r4, [pc, #88]	; (69b4 <_spi_m_sync_trans+0x110>)
    695c:	47a0      	blx	r4
			}
		}

		rc = _spi_err_check(iflag, hw);
    695e:	6a39      	ldr	r1, [r7, #32]
    6960:	69f8      	ldr	r0, [r7, #28]
    6962:	4b15      	ldr	r3, [pc, #84]	; (69b8 <_spi_m_sync_trans+0x114>)
    6964:	4798      	blx	r3
    6966:	6278      	str	r0, [r7, #36]	; 0x24

		if (rc < 0) {
    6968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    696a:	2b00      	cmp	r3, #0
    696c:	db0c      	blt.n	6988 <_spi_m_sync_trans+0xe4>
			break;
		}
		if (ctrl.txcnt >= msg->size && ctrl.rxcnt >= msg->size) {
    696e:	693a      	ldr	r2, [r7, #16]
    6970:	683b      	ldr	r3, [r7, #0]
    6972:	689b      	ldr	r3, [r3, #8]
    6974:	429a      	cmp	r2, r3
    6976:	d3d4      	bcc.n	6922 <_spi_m_sync_trans+0x7e>
    6978:	697a      	ldr	r2, [r7, #20]
    697a:	683b      	ldr	r3, [r7, #0]
    697c:	689b      	ldr	r3, [r3, #8]
    697e:	429a      	cmp	r2, r3
    6980:	d3cf      	bcc.n	6922 <_spi_m_sync_trans+0x7e>
			rc = ctrl.txcnt;
    6982:	693b      	ldr	r3, [r7, #16]
    6984:	627b      	str	r3, [r7, #36]	; 0x24
			break;
    6986:	e000      	b.n	698a <_spi_m_sync_trans+0xe6>
			break;
    6988:	bf00      	nop
		}
	}
	/* Wait until SPI bus idle */
	_spi_wait_bus_idle(hw);
    698a:	6a38      	ldr	r0, [r7, #32]
    698c:	4b0b      	ldr	r3, [pc, #44]	; (69bc <_spi_m_sync_trans+0x118>)
    698e:	4798      	blx	r3

	return rc;
    6990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
    6992:	4618      	mov	r0, r3
    6994:	372c      	adds	r7, #44	; 0x2c
    6996:	46bd      	mov	sp, r7
    6998:	bd90      	pop	{r4, r7, pc}
    699a:	bf00      	nop
    699c:	000134e0 	.word	0x000134e0
    69a0:	00002dc9 	.word	0x00002dc9
    69a4:	00005861 	.word	0x00005861
    69a8:	000059e5 	.word	0x000059e5
    69ac:	000058ff 	.word	0x000058ff
    69b0:	00006781 	.word	0x00006781
    69b4:	000067ed 	.word	0x000067ed
    69b8:	00006865 	.word	0x00006865
    69bc:	00006751 	.word	0x00006751

000069c0 <__NVIC_EnableIRQ>:
{
    69c0:	b480      	push	{r7}
    69c2:	b083      	sub	sp, #12
    69c4:	af00      	add	r7, sp, #0
    69c6:	4603      	mov	r3, r0
    69c8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    69ca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    69ce:	2b00      	cmp	r3, #0
    69d0:	db0b      	blt.n	69ea <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    69d2:	4909      	ldr	r1, [pc, #36]	; (69f8 <__NVIC_EnableIRQ+0x38>)
    69d4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    69d8:	095b      	lsrs	r3, r3, #5
    69da:	88fa      	ldrh	r2, [r7, #6]
    69dc:	f002 021f 	and.w	r2, r2, #31
    69e0:	2001      	movs	r0, #1
    69e2:	fa00 f202 	lsl.w	r2, r0, r2
    69e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    69ea:	bf00      	nop
    69ec:	370c      	adds	r7, #12
    69ee:	46bd      	mov	sp, r7
    69f0:	f85d 7b04 	ldr.w	r7, [sp], #4
    69f4:	4770      	bx	lr
    69f6:	bf00      	nop
    69f8:	e000e100 	.word	0xe000e100

000069fc <__NVIC_DisableIRQ>:
{
    69fc:	b480      	push	{r7}
    69fe:	b083      	sub	sp, #12
    6a00:	af00      	add	r7, sp, #0
    6a02:	4603      	mov	r3, r0
    6a04:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    6a06:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    6a0a:	2b00      	cmp	r3, #0
    6a0c:	db10      	blt.n	6a30 <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    6a0e:	490b      	ldr	r1, [pc, #44]	; (6a3c <__NVIC_DisableIRQ+0x40>)
    6a10:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    6a14:	095b      	lsrs	r3, r3, #5
    6a16:	88fa      	ldrh	r2, [r7, #6]
    6a18:	f002 021f 	and.w	r2, r2, #31
    6a1c:	2001      	movs	r0, #1
    6a1e:	fa00 f202 	lsl.w	r2, r0, r2
    6a22:	3320      	adds	r3, #32
    6a24:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    6a28:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    6a2c:	f3bf 8f6f 	isb	sy
}
    6a30:	bf00      	nop
    6a32:	370c      	adds	r7, #12
    6a34:	46bd      	mov	sp, r7
    6a36:	f85d 7b04 	ldr.w	r7, [sp], #4
    6a3a:	4770      	bx	lr
    6a3c:	e000e100 	.word	0xe000e100

00006a40 <__NVIC_ClearPendingIRQ>:
{
    6a40:	b480      	push	{r7}
    6a42:	b083      	sub	sp, #12
    6a44:	af00      	add	r7, sp, #0
    6a46:	4603      	mov	r3, r0
    6a48:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    6a4a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    6a4e:	2b00      	cmp	r3, #0
    6a50:	db0c      	blt.n	6a6c <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    6a52:	4909      	ldr	r1, [pc, #36]	; (6a78 <__NVIC_ClearPendingIRQ+0x38>)
    6a54:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    6a58:	095b      	lsrs	r3, r3, #5
    6a5a:	88fa      	ldrh	r2, [r7, #6]
    6a5c:	f002 021f 	and.w	r2, r2, #31
    6a60:	2001      	movs	r0, #1
    6a62:	fa00 f202 	lsl.w	r2, r0, r2
    6a66:	3360      	adds	r3, #96	; 0x60
    6a68:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    6a6c:	bf00      	nop
    6a6e:	370c      	adds	r7, #12
    6a70:	46bd      	mov	sp, r7
    6a72:	f85d 7b04 	ldr.w	r7, [sp], #4
    6a76:	4770      	bx	lr
    6a78:	e000e100 	.word	0xe000e100

00006a7c <hri_tcc_wait_for_sync>:
typedef uint32_t hri_tcc_wexctrl_reg_t;
typedef uint8_t  hri_tcc_ctrlbset_reg_t;
typedef uint8_t  hri_tcc_dbgctrl_reg_t;

static inline void hri_tcc_wait_for_sync(const void *const hw, hri_tcc_syncbusy_reg_t reg)
{
    6a7c:	b480      	push	{r7}
    6a7e:	b083      	sub	sp, #12
    6a80:	af00      	add	r7, sp, #0
    6a82:	6078      	str	r0, [r7, #4]
    6a84:	6039      	str	r1, [r7, #0]
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    6a86:	bf00      	nop
    6a88:	687b      	ldr	r3, [r7, #4]
    6a8a:	689a      	ldr	r2, [r3, #8]
    6a8c:	683b      	ldr	r3, [r7, #0]
    6a8e:	4013      	ands	r3, r2
    6a90:	2b00      	cmp	r3, #0
    6a92:	d1f9      	bne.n	6a88 <hri_tcc_wait_for_sync+0xc>
	};
}
    6a94:	bf00      	nop
    6a96:	370c      	adds	r7, #12
    6a98:	46bd      	mov	sp, r7
    6a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
    6a9e:	4770      	bx	lr

00006aa0 <hri_tcc_is_syncing>:

static inline bool hri_tcc_is_syncing(const void *const hw, hri_tcc_syncbusy_reg_t reg)
{
    6aa0:	b480      	push	{r7}
    6aa2:	b083      	sub	sp, #12
    6aa4:	af00      	add	r7, sp, #0
    6aa6:	6078      	str	r0, [r7, #4]
    6aa8:	6039      	str	r1, [r7, #0]
	return ((Tcc *)hw)->SYNCBUSY.reg & reg;
    6aaa:	687b      	ldr	r3, [r7, #4]
    6aac:	689a      	ldr	r2, [r3, #8]
    6aae:	683b      	ldr	r3, [r7, #0]
    6ab0:	4013      	ands	r3, r2
    6ab2:	2b00      	cmp	r3, #0
    6ab4:	bf14      	ite	ne
    6ab6:	2301      	movne	r3, #1
    6ab8:	2300      	moveq	r3, #0
    6aba:	b2db      	uxtb	r3, r3
}
    6abc:	4618      	mov	r0, r3
    6abe:	370c      	adds	r7, #12
    6ac0:	46bd      	mov	sp, r7
    6ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
    6ac6:	4770      	bx	lr

00006ac8 <hri_tcc_get_interrupt_OVF_bit>:
{
	((Tcc *)hw)->INTFLAG.reg = TCC_INTFLAG_MC5;
}

static inline bool hri_tcc_get_interrupt_OVF_bit(const void *const hw)
{
    6ac8:	b480      	push	{r7}
    6aca:	b083      	sub	sp, #12
    6acc:	af00      	add	r7, sp, #0
    6ace:	6078      	str	r0, [r7, #4]
	return (((Tcc *)hw)->INTFLAG.reg & TCC_INTFLAG_OVF) >> TCC_INTFLAG_OVF_Pos;
    6ad0:	687b      	ldr	r3, [r7, #4]
    6ad2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    6ad4:	f003 0301 	and.w	r3, r3, #1
    6ad8:	2b00      	cmp	r3, #0
    6ada:	bf14      	ite	ne
    6adc:	2301      	movne	r3, #1
    6ade:	2300      	moveq	r3, #0
    6ae0:	b2db      	uxtb	r3, r3
}
    6ae2:	4618      	mov	r0, r3
    6ae4:	370c      	adds	r7, #12
    6ae6:	46bd      	mov	sp, r7
    6ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
    6aec:	4770      	bx	lr

00006aee <hri_tcc_clear_interrupt_OVF_bit>:

static inline void hri_tcc_clear_interrupt_OVF_bit(const void *const hw)
{
    6aee:	b480      	push	{r7}
    6af0:	b083      	sub	sp, #12
    6af2:	af00      	add	r7, sp, #0
    6af4:	6078      	str	r0, [r7, #4]
	((Tcc *)hw)->INTFLAG.reg = TCC_INTFLAG_OVF;
    6af6:	687b      	ldr	r3, [r7, #4]
    6af8:	2201      	movs	r2, #1
    6afa:	62da      	str	r2, [r3, #44]	; 0x2c
}
    6afc:	bf00      	nop
    6afe:	370c      	adds	r7, #12
    6b00:	46bd      	mov	sp, r7
    6b02:	f85d 7b04 	ldr.w	r7, [sp], #4
    6b06:	4770      	bx	lr

00006b08 <hri_tcc_set_CTRLB_reg>:
{
	((Tcc *)hw)->CTRLBCLR.reg = TCC_CTRLBSET_CMD(mask);
}

static inline void hri_tcc_set_CTRLB_reg(const void *const hw, hri_tcc_ctrlbset_reg_t mask)
{
    6b08:	b480      	push	{r7}
    6b0a:	b083      	sub	sp, #12
    6b0c:	af00      	add	r7, sp, #0
    6b0e:	6078      	str	r0, [r7, #4]
    6b10:	460b      	mov	r3, r1
    6b12:	70fb      	strb	r3, [r7, #3]
	((Tcc *)hw)->CTRLBSET.reg = mask;
    6b14:	687b      	ldr	r3, [r7, #4]
    6b16:	78fa      	ldrb	r2, [r7, #3]
    6b18:	715a      	strb	r2, [r3, #5]
}
    6b1a:	bf00      	nop
    6b1c:	370c      	adds	r7, #12
    6b1e:	46bd      	mov	sp, r7
    6b20:	f85d 7b04 	ldr.w	r7, [sp], #4
    6b24:	4770      	bx	lr

00006b26 <hri_tcc_set_INTEN_OVF_bit>:
{
	((Tcc *)hw)->CTRLBCLR.reg = mask;
}

static inline void hri_tcc_set_INTEN_OVF_bit(const void *const hw)
{
    6b26:	b480      	push	{r7}
    6b28:	b083      	sub	sp, #12
    6b2a:	af00      	add	r7, sp, #0
    6b2c:	6078      	str	r0, [r7, #4]
	((Tcc *)hw)->INTENSET.reg = TCC_INTENSET_OVF;
    6b2e:	687b      	ldr	r3, [r7, #4]
    6b30:	2201      	movs	r2, #1
    6b32:	629a      	str	r2, [r3, #40]	; 0x28
}
    6b34:	bf00      	nop
    6b36:	370c      	adds	r7, #12
    6b38:	46bd      	mov	sp, r7
    6b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
    6b3e:	4770      	bx	lr

00006b40 <hri_tcc_set_CTRLA_SWRST_bit>:
{
	return ((Tcc *)hw)->SYNCBUSY.reg;
}

static inline void hri_tcc_set_CTRLA_SWRST_bit(const void *const hw)
{
    6b40:	b580      	push	{r7, lr}
    6b42:	b082      	sub	sp, #8
    6b44:	af00      	add	r7, sp, #0
    6b46:	6078      	str	r0, [r7, #4]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->CTRLA.reg |= TCC_CTRLA_SWRST;
    6b48:	687b      	ldr	r3, [r7, #4]
    6b4a:	681b      	ldr	r3, [r3, #0]
    6b4c:	f043 0201 	orr.w	r2, r3, #1
    6b50:	687b      	ldr	r3, [r7, #4]
    6b52:	601a      	str	r2, [r3, #0]
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST);
    6b54:	2101      	movs	r1, #1
    6b56:	6878      	ldr	r0, [r7, #4]
    6b58:	4b02      	ldr	r3, [pc, #8]	; (6b64 <hri_tcc_set_CTRLA_SWRST_bit+0x24>)
    6b5a:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    6b5c:	bf00      	nop
    6b5e:	3708      	adds	r7, #8
    6b60:	46bd      	mov	sp, r7
    6b62:	bd80      	pop	{r7, pc}
    6b64:	00006a7d 	.word	0x00006a7d

00006b68 <hri_tcc_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & TCC_CTRLA_SWRST) >> TCC_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_tcc_set_CTRLA_ENABLE_bit(const void *const hw)
{
    6b68:	b580      	push	{r7, lr}
    6b6a:	b082      	sub	sp, #8
    6b6c:	af00      	add	r7, sp, #0
    6b6e:	6078      	str	r0, [r7, #4]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->CTRLA.reg |= TCC_CTRLA_ENABLE;
    6b70:	687b      	ldr	r3, [r7, #4]
    6b72:	681b      	ldr	r3, [r3, #0]
    6b74:	f043 0202 	orr.w	r2, r3, #2
    6b78:	687b      	ldr	r3, [r7, #4]
    6b7a:	601a      	str	r2, [r3, #0]
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
    6b7c:	2103      	movs	r1, #3
    6b7e:	6878      	ldr	r0, [r7, #4]
    6b80:	4b02      	ldr	r3, [pc, #8]	; (6b8c <hri_tcc_set_CTRLA_ENABLE_bit+0x24>)
    6b82:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    6b84:	bf00      	nop
    6b86:	3708      	adds	r7, #8
    6b88:	46bd      	mov	sp, r7
    6b8a:	bd80      	pop	{r7, pc}
    6b8c:	00006a7d 	.word	0x00006a7d

00006b90 <hri_tcc_get_CTRLA_ENABLE_bit>:

static inline bool hri_tcc_get_CTRLA_ENABLE_bit(const void *const hw)
{
    6b90:	b580      	push	{r7, lr}
    6b92:	b084      	sub	sp, #16
    6b94:	af00      	add	r7, sp, #0
    6b96:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
    6b98:	2103      	movs	r1, #3
    6b9a:	6878      	ldr	r0, [r7, #4]
    6b9c:	4b09      	ldr	r3, [pc, #36]	; (6bc4 <hri_tcc_get_CTRLA_ENABLE_bit+0x34>)
    6b9e:	4798      	blx	r3
	tmp = ((Tcc *)hw)->CTRLA.reg;
    6ba0:	687b      	ldr	r3, [r7, #4]
    6ba2:	681b      	ldr	r3, [r3, #0]
    6ba4:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & TCC_CTRLA_ENABLE) >> TCC_CTRLA_ENABLE_Pos;
    6ba6:	68fb      	ldr	r3, [r7, #12]
    6ba8:	085b      	lsrs	r3, r3, #1
    6baa:	f003 0301 	and.w	r3, r3, #1
    6bae:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    6bb0:	68fb      	ldr	r3, [r7, #12]
    6bb2:	2b00      	cmp	r3, #0
    6bb4:	bf14      	ite	ne
    6bb6:	2301      	movne	r3, #1
    6bb8:	2300      	moveq	r3, #0
    6bba:	b2db      	uxtb	r3, r3
}
    6bbc:	4618      	mov	r0, r3
    6bbe:	3710      	adds	r7, #16
    6bc0:	46bd      	mov	sp, r7
    6bc2:	bd80      	pop	{r7, pc}
    6bc4:	00006a7d 	.word	0x00006a7d

00006bc8 <hri_tcc_clear_CTRLA_ENABLE_bit>:
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
	TCC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_tcc_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    6bc8:	b580      	push	{r7, lr}
    6bca:	b082      	sub	sp, #8
    6bcc:	af00      	add	r7, sp, #0
    6bce:	6078      	str	r0, [r7, #4]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->CTRLA.reg &= ~TCC_CTRLA_ENABLE;
    6bd0:	687b      	ldr	r3, [r7, #4]
    6bd2:	681b      	ldr	r3, [r3, #0]
    6bd4:	f023 0202 	bic.w	r2, r3, #2
    6bd8:	687b      	ldr	r3, [r7, #4]
    6bda:	601a      	str	r2, [r3, #0]
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
    6bdc:	2103      	movs	r1, #3
    6bde:	6878      	ldr	r0, [r7, #4]
    6be0:	4b02      	ldr	r3, [pc, #8]	; (6bec <hri_tcc_clear_CTRLA_ENABLE_bit+0x24>)
    6be2:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    6be4:	bf00      	nop
    6be6:	3708      	adds	r7, #8
    6be8:	46bd      	mov	sp, r7
    6bea:	bd80      	pop	{r7, pc}
    6bec:	00006a7d 	.word	0x00006a7d

00006bf0 <hri_tcc_get_CTRLA_reg>:
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
	TCC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tcc_ctrla_reg_t hri_tcc_get_CTRLA_reg(const void *const hw, hri_tcc_ctrla_reg_t mask)
{
    6bf0:	b580      	push	{r7, lr}
    6bf2:	b084      	sub	sp, #16
    6bf4:	af00      	add	r7, sp, #0
    6bf6:	6078      	str	r0, [r7, #4]
    6bf8:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
    6bfa:	2103      	movs	r1, #3
    6bfc:	6878      	ldr	r0, [r7, #4]
    6bfe:	4b07      	ldr	r3, [pc, #28]	; (6c1c <hri_tcc_get_CTRLA_reg+0x2c>)
    6c00:	4798      	blx	r3
	tmp = ((Tcc *)hw)->CTRLA.reg;
    6c02:	687b      	ldr	r3, [r7, #4]
    6c04:	681b      	ldr	r3, [r3, #0]
    6c06:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    6c08:	68fa      	ldr	r2, [r7, #12]
    6c0a:	683b      	ldr	r3, [r7, #0]
    6c0c:	4013      	ands	r3, r2
    6c0e:	60fb      	str	r3, [r7, #12]
	return tmp;
    6c10:	68fb      	ldr	r3, [r7, #12]
}
    6c12:	4618      	mov	r0, r3
    6c14:	3710      	adds	r7, #16
    6c16:	46bd      	mov	sp, r7
    6c18:	bd80      	pop	{r7, pc}
    6c1a:	bf00      	nop
    6c1c:	00006a7d 	.word	0x00006a7d

00006c20 <hri_tcc_write_CTRLA_reg>:

static inline void hri_tcc_write_CTRLA_reg(const void *const hw, hri_tcc_ctrla_reg_t data)
{
    6c20:	b580      	push	{r7, lr}
    6c22:	b082      	sub	sp, #8
    6c24:	af00      	add	r7, sp, #0
    6c26:	6078      	str	r0, [r7, #4]
    6c28:	6039      	str	r1, [r7, #0]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->CTRLA.reg = data;
    6c2a:	687b      	ldr	r3, [r7, #4]
    6c2c:	683a      	ldr	r2, [r7, #0]
    6c2e:	601a      	str	r2, [r3, #0]
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
    6c30:	2103      	movs	r1, #3
    6c32:	6878      	ldr	r0, [r7, #4]
    6c34:	4b02      	ldr	r3, [pc, #8]	; (6c40 <hri_tcc_write_CTRLA_reg+0x20>)
    6c36:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    6c38:	bf00      	nop
    6c3a:	3708      	adds	r7, #8
    6c3c:	46bd      	mov	sp, r7
    6c3e:	bd80      	pop	{r7, pc}
    6c40:	00006a7d 	.word	0x00006a7d

00006c44 <hri_tcc_write_DBGCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tcc_write_DBGCTRL_reg(const void *const hw, hri_tcc_dbgctrl_reg_t data)
{
    6c44:	b480      	push	{r7}
    6c46:	b083      	sub	sp, #12
    6c48:	af00      	add	r7, sp, #0
    6c4a:	6078      	str	r0, [r7, #4]
    6c4c:	460b      	mov	r3, r1
    6c4e:	70fb      	strb	r3, [r7, #3]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->DBGCTRL.reg = data;
    6c50:	687b      	ldr	r3, [r7, #4]
    6c52:	78fa      	ldrb	r2, [r7, #3]
    6c54:	779a      	strb	r2, [r3, #30]
	TCC_CRITICAL_SECTION_LEAVE();
}
    6c56:	bf00      	nop
    6c58:	370c      	adds	r7, #12
    6c5a:	46bd      	mov	sp, r7
    6c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
    6c60:	4770      	bx	lr

00006c62 <hri_tcc_write_EVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tcc_write_EVCTRL_reg(const void *const hw, hri_tcc_evctrl_reg_t data)
{
    6c62:	b480      	push	{r7}
    6c64:	b083      	sub	sp, #12
    6c66:	af00      	add	r7, sp, #0
    6c68:	6078      	str	r0, [r7, #4]
    6c6a:	6039      	str	r1, [r7, #0]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->EVCTRL.reg = data;
    6c6c:	687b      	ldr	r3, [r7, #4]
    6c6e:	683a      	ldr	r2, [r7, #0]
    6c70:	621a      	str	r2, [r3, #32]
	TCC_CRITICAL_SECTION_LEAVE();
}
    6c72:	bf00      	nop
    6c74:	370c      	adds	r7, #12
    6c76:	46bd      	mov	sp, r7
    6c78:	f85d 7b04 	ldr.w	r7, [sp], #4
    6c7c:	4770      	bx	lr
	...

00006c80 <hri_tcc_write_PER_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tcc_write_PER_reg(const void *const hw, hri_tcc_per_reg_t data)
{
    6c80:	b580      	push	{r7, lr}
    6c82:	b082      	sub	sp, #8
    6c84:	af00      	add	r7, sp, #0
    6c86:	6078      	str	r0, [r7, #4]
    6c88:	6039      	str	r1, [r7, #0]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->PER.reg = data;
    6c8a:	687b      	ldr	r3, [r7, #4]
    6c8c:	683a      	ldr	r2, [r7, #0]
    6c8e:	641a      	str	r2, [r3, #64]	; 0x40
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_PER);
    6c90:	2180      	movs	r1, #128	; 0x80
    6c92:	6878      	ldr	r0, [r7, #4]
    6c94:	4b02      	ldr	r3, [pc, #8]	; (6ca0 <hri_tcc_write_PER_reg+0x20>)
    6c96:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    6c98:	bf00      	nop
    6c9a:	3708      	adds	r7, #8
    6c9c:	46bd      	mov	sp, r7
    6c9e:	bd80      	pop	{r7, pc}
    6ca0:	00006a7d 	.word	0x00006a7d

00006ca4 <hri_tcc_read_PER_reg>:
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_PER);
	TCC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tcc_per_reg_t hri_tcc_read_PER_reg(const void *const hw)
{
    6ca4:	b580      	push	{r7, lr}
    6ca6:	b082      	sub	sp, #8
    6ca8:	af00      	add	r7, sp, #0
    6caa:	6078      	str	r0, [r7, #4]
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_PER);
    6cac:	2180      	movs	r1, #128	; 0x80
    6cae:	6878      	ldr	r0, [r7, #4]
    6cb0:	4b03      	ldr	r3, [pc, #12]	; (6cc0 <hri_tcc_read_PER_reg+0x1c>)
    6cb2:	4798      	blx	r3
	return ((Tcc *)hw)->PER.reg;
    6cb4:	687b      	ldr	r3, [r7, #4]
    6cb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
    6cb8:	4618      	mov	r0, r3
    6cba:	3708      	adds	r7, #8
    6cbc:	46bd      	mov	sp, r7
    6cbe:	bd80      	pop	{r7, pc}
    6cc0:	00006a7d 	.word	0x00006a7d

00006cc4 <_tcc_init_irq_param>:

/**
 * \brief Init irq param with the given tcc hardware instance
 */
static void _tcc_init_irq_param(const void *const hw, void *dev)
{
    6cc4:	b480      	push	{r7}
    6cc6:	b083      	sub	sp, #12
    6cc8:	af00      	add	r7, sp, #0
    6cca:	6078      	str	r0, [r7, #4]
    6ccc:	6039      	str	r1, [r7, #0]
	if (hw == TCC0) {
    6cce:	687b      	ldr	r3, [r7, #4]
    6cd0:	4a0c      	ldr	r2, [pc, #48]	; (6d04 <_tcc_init_irq_param+0x40>)
    6cd2:	4293      	cmp	r3, r2
    6cd4:	d102      	bne.n	6cdc <_tcc_init_irq_param+0x18>
		_tcc0_dev = (struct _timer_device *)dev;
    6cd6:	4a0c      	ldr	r2, [pc, #48]	; (6d08 <_tcc_init_irq_param+0x44>)
    6cd8:	683b      	ldr	r3, [r7, #0]
    6cda:	6013      	str	r3, [r2, #0]
	}
	if (hw == TCC1) {
    6cdc:	687b      	ldr	r3, [r7, #4]
    6cde:	4a0b      	ldr	r2, [pc, #44]	; (6d0c <_tcc_init_irq_param+0x48>)
    6ce0:	4293      	cmp	r3, r2
    6ce2:	d102      	bne.n	6cea <_tcc_init_irq_param+0x26>
		_tcc1_dev = (struct _timer_device *)dev;
    6ce4:	4a0a      	ldr	r2, [pc, #40]	; (6d10 <_tcc_init_irq_param+0x4c>)
    6ce6:	683b      	ldr	r3, [r7, #0]
    6ce8:	6013      	str	r3, [r2, #0]
	}
	if (hw == TCC2) {
    6cea:	687b      	ldr	r3, [r7, #4]
    6cec:	4a09      	ldr	r2, [pc, #36]	; (6d14 <_tcc_init_irq_param+0x50>)
    6cee:	4293      	cmp	r3, r2
    6cf0:	d102      	bne.n	6cf8 <_tcc_init_irq_param+0x34>
		_tcc2_dev = (struct _timer_device *)dev;
    6cf2:	4a09      	ldr	r2, [pc, #36]	; (6d18 <_tcc_init_irq_param+0x54>)
    6cf4:	683b      	ldr	r3, [r7, #0]
    6cf6:	6013      	str	r3, [r2, #0]
	}
}
    6cf8:	bf00      	nop
    6cfa:	370c      	adds	r7, #12
    6cfc:	46bd      	mov	sp, r7
    6cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
    6d02:	4770      	bx	lr
    6d04:	41016000 	.word	0x41016000
    6d08:	20000d38 	.word	0x20000d38
    6d0c:	41018000 	.word	0x41018000
    6d10:	20000d3c 	.word	0x20000d3c
    6d14:	42000c00 	.word	0x42000c00
    6d18:	20000d40 	.word	0x20000d40

00006d1c <_tcc_timer_init>:
/**
 * \brief Initialize TCC
 */
int32_t _tcc_timer_init(struct _timer_device *const device, void *const hw)
{
    6d1c:	b580      	push	{r7, lr}
    6d1e:	b084      	sub	sp, #16
    6d20:	af00      	add	r7, sp, #0
    6d22:	6078      	str	r0, [r7, #4]
    6d24:	6039      	str	r1, [r7, #0]
	struct tcc_cfg *cfg = _get_tcc_cfg(hw);
    6d26:	6838      	ldr	r0, [r7, #0]
    6d28:	4b33      	ldr	r3, [pc, #204]	; (6df8 <_tcc_timer_init+0xdc>)
    6d2a:	4798      	blx	r3
    6d2c:	60f8      	str	r0, [r7, #12]
	if (cfg == NULL) {
    6d2e:	68fb      	ldr	r3, [r7, #12]
    6d30:	2b00      	cmp	r3, #0
    6d32:	d102      	bne.n	6d3a <_tcc_timer_init+0x1e>
		return ERR_NOT_FOUND;
    6d34:	f06f 0309 	mvn.w	r3, #9
    6d38:	e05a      	b.n	6df0 <_tcc_timer_init+0xd4>
	}

	device->hw = hw;
    6d3a:	687b      	ldr	r3, [r7, #4]
    6d3c:	683a      	ldr	r2, [r7, #0]
    6d3e:	60da      	str	r2, [r3, #12]

	if (!hri_tcc_is_syncing(hw, TCC_SYNCBUSY_SWRST)) {
    6d40:	2101      	movs	r1, #1
    6d42:	6838      	ldr	r0, [r7, #0]
    6d44:	4b2d      	ldr	r3, [pc, #180]	; (6dfc <_tcc_timer_init+0xe0>)
    6d46:	4798      	blx	r3
    6d48:	4603      	mov	r3, r0
    6d4a:	f083 0301 	eor.w	r3, r3, #1
    6d4e:	b2db      	uxtb	r3, r3
    6d50:	2b00      	cmp	r3, #0
    6d52:	d011      	beq.n	6d78 <_tcc_timer_init+0x5c>
		if (hri_tcc_get_CTRLA_reg(hw, TCC_CTRLA_ENABLE)) {
    6d54:	2102      	movs	r1, #2
    6d56:	6838      	ldr	r0, [r7, #0]
    6d58:	4b29      	ldr	r3, [pc, #164]	; (6e00 <_tcc_timer_init+0xe4>)
    6d5a:	4798      	blx	r3
    6d5c:	4603      	mov	r3, r0
    6d5e:	2b00      	cmp	r3, #0
    6d60:	d006      	beq.n	6d70 <_tcc_timer_init+0x54>
			hri_tcc_clear_CTRLA_ENABLE_bit(hw);
    6d62:	6838      	ldr	r0, [r7, #0]
    6d64:	4b27      	ldr	r3, [pc, #156]	; (6e04 <_tcc_timer_init+0xe8>)
    6d66:	4798      	blx	r3
			hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_ENABLE);
    6d68:	2102      	movs	r1, #2
    6d6a:	6838      	ldr	r0, [r7, #0]
    6d6c:	4b26      	ldr	r3, [pc, #152]	; (6e08 <_tcc_timer_init+0xec>)
    6d6e:	4798      	blx	r3
		}
		hri_tcc_write_CTRLA_reg(hw, TCC_CTRLA_SWRST);
    6d70:	2101      	movs	r1, #1
    6d72:	6838      	ldr	r0, [r7, #0]
    6d74:	4b25      	ldr	r3, [pc, #148]	; (6e0c <_tcc_timer_init+0xf0>)
    6d76:	4798      	blx	r3
	}
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST);
    6d78:	2101      	movs	r1, #1
    6d7a:	6838      	ldr	r0, [r7, #0]
    6d7c:	4b22      	ldr	r3, [pc, #136]	; (6e08 <_tcc_timer_init+0xec>)
    6d7e:	4798      	blx	r3

	hri_tcc_write_CTRLA_reg(hw, cfg->ctrl_a);
    6d80:	68fb      	ldr	r3, [r7, #12]
    6d82:	689b      	ldr	r3, [r3, #8]
    6d84:	4619      	mov	r1, r3
    6d86:	6838      	ldr	r0, [r7, #0]
    6d88:	4b20      	ldr	r3, [pc, #128]	; (6e0c <_tcc_timer_init+0xf0>)
    6d8a:	4798      	blx	r3
	hri_tcc_set_CTRLB_reg(hw, cfg->ctrl_b);
    6d8c:	68fb      	ldr	r3, [r7, #12]
    6d8e:	7b1b      	ldrb	r3, [r3, #12]
    6d90:	4619      	mov	r1, r3
    6d92:	6838      	ldr	r0, [r7, #0]
    6d94:	4b1e      	ldr	r3, [pc, #120]	; (6e10 <_tcc_timer_init+0xf4>)
    6d96:	4798      	blx	r3
	hri_tcc_write_DBGCTRL_reg(hw, cfg->dbg_ctrl);
    6d98:	68fb      	ldr	r3, [r7, #12]
    6d9a:	7b5b      	ldrb	r3, [r3, #13]
    6d9c:	4619      	mov	r1, r3
    6d9e:	6838      	ldr	r0, [r7, #0]
    6da0:	4b1c      	ldr	r3, [pc, #112]	; (6e14 <_tcc_timer_init+0xf8>)
    6da2:	4798      	blx	r3
	hri_tcc_write_EVCTRL_reg(hw, cfg->event_ctrl);
    6da4:	68fb      	ldr	r3, [r7, #12]
    6da6:	691b      	ldr	r3, [r3, #16]
    6da8:	4619      	mov	r1, r3
    6daa:	6838      	ldr	r0, [r7, #0]
    6dac:	4b1a      	ldr	r3, [pc, #104]	; (6e18 <_tcc_timer_init+0xfc>)
    6dae:	4798      	blx	r3
	hri_tcc_write_PER_reg(hw, cfg->per);
    6db0:	68fb      	ldr	r3, [r7, #12]
    6db2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    6db4:	4619      	mov	r1, r3
    6db6:	6838      	ldr	r0, [r7, #0]
    6db8:	4b18      	ldr	r3, [pc, #96]	; (6e1c <_tcc_timer_init+0x100>)
    6dba:	4798      	blx	r3
	hri_tcc_set_INTEN_OVF_bit(hw);
    6dbc:	6838      	ldr	r0, [r7, #0]
    6dbe:	4b18      	ldr	r3, [pc, #96]	; (6e20 <_tcc_timer_init+0x104>)
    6dc0:	4798      	blx	r3

	_tcc_init_irq_param(hw, (void *)device);
    6dc2:	6879      	ldr	r1, [r7, #4]
    6dc4:	6838      	ldr	r0, [r7, #0]
    6dc6:	4b17      	ldr	r3, [pc, #92]	; (6e24 <_tcc_timer_init+0x108>)
    6dc8:	4798      	blx	r3
	NVIC_DisableIRQ((IRQn_Type)cfg->irq);
    6dca:	68fb      	ldr	r3, [r7, #12]
    6dcc:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    6dd0:	4618      	mov	r0, r3
    6dd2:	4b15      	ldr	r3, [pc, #84]	; (6e28 <_tcc_timer_init+0x10c>)
    6dd4:	4798      	blx	r3
	NVIC_ClearPendingIRQ((IRQn_Type)cfg->irq);
    6dd6:	68fb      	ldr	r3, [r7, #12]
    6dd8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    6ddc:	4618      	mov	r0, r3
    6dde:	4b13      	ldr	r3, [pc, #76]	; (6e2c <_tcc_timer_init+0x110>)
    6de0:	4798      	blx	r3
	NVIC_EnableIRQ((IRQn_Type)cfg->irq);
    6de2:	68fb      	ldr	r3, [r7, #12]
    6de4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    6de8:	4618      	mov	r0, r3
    6dea:	4b11      	ldr	r3, [pc, #68]	; (6e30 <_tcc_timer_init+0x114>)
    6dec:	4798      	blx	r3

	return ERR_NONE;
    6dee:	2300      	movs	r3, #0
}
    6df0:	4618      	mov	r0, r3
    6df2:	3710      	adds	r7, #16
    6df4:	46bd      	mov	sp, r7
    6df6:	bd80      	pop	{r7, pc}
    6df8:	00007001 	.word	0x00007001
    6dfc:	00006aa1 	.word	0x00006aa1
    6e00:	00006bf1 	.word	0x00006bf1
    6e04:	00006bc9 	.word	0x00006bc9
    6e08:	00006a7d 	.word	0x00006a7d
    6e0c:	00006c21 	.word	0x00006c21
    6e10:	00006b09 	.word	0x00006b09
    6e14:	00006c45 	.word	0x00006c45
    6e18:	00006c63 	.word	0x00006c63
    6e1c:	00006c81 	.word	0x00006c81
    6e20:	00006b27 	.word	0x00006b27
    6e24:	00006cc5 	.word	0x00006cc5
    6e28:	000069fd 	.word	0x000069fd
    6e2c:	00006a41 	.word	0x00006a41
    6e30:	000069c1 	.word	0x000069c1

00006e34 <_tcc_timer_deinit>:
/**
 * \brief De-initialize TCC
 */
void _tcc_timer_deinit(struct _timer_device *const device)
{
    6e34:	b580      	push	{r7, lr}
    6e36:	b084      	sub	sp, #16
    6e38:	af00      	add	r7, sp, #0
    6e3a:	6078      	str	r0, [r7, #4]
	void *const     hw  = device->hw;
    6e3c:	687b      	ldr	r3, [r7, #4]
    6e3e:	68db      	ldr	r3, [r3, #12]
    6e40:	60fb      	str	r3, [r7, #12]
	struct tcc_cfg *cfg = _get_tcc_cfg(hw);
    6e42:	68f8      	ldr	r0, [r7, #12]
    6e44:	4b0a      	ldr	r3, [pc, #40]	; (6e70 <_tcc_timer_deinit+0x3c>)
    6e46:	4798      	blx	r3
    6e48:	60b8      	str	r0, [r7, #8]
	if (cfg != NULL) {
    6e4a:	68bb      	ldr	r3, [r7, #8]
    6e4c:	2b00      	cmp	r3, #0
    6e4e:	d00b      	beq.n	6e68 <_tcc_timer_deinit+0x34>
		NVIC_DisableIRQ((IRQn_Type)cfg->irq);
    6e50:	68bb      	ldr	r3, [r7, #8]
    6e52:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    6e56:	4618      	mov	r0, r3
    6e58:	4b06      	ldr	r3, [pc, #24]	; (6e74 <_tcc_timer_deinit+0x40>)
    6e5a:	4798      	blx	r3
		hri_tcc_clear_CTRLA_ENABLE_bit(hw);
    6e5c:	68f8      	ldr	r0, [r7, #12]
    6e5e:	4b06      	ldr	r3, [pc, #24]	; (6e78 <_tcc_timer_deinit+0x44>)
    6e60:	4798      	blx	r3
		hri_tcc_set_CTRLA_SWRST_bit(hw);
    6e62:	68f8      	ldr	r0, [r7, #12]
    6e64:	4b05      	ldr	r3, [pc, #20]	; (6e7c <_tcc_timer_deinit+0x48>)
    6e66:	4798      	blx	r3
	}
}
    6e68:	bf00      	nop
    6e6a:	3710      	adds	r7, #16
    6e6c:	46bd      	mov	sp, r7
    6e6e:	bd80      	pop	{r7, pc}
    6e70:	00007001 	.word	0x00007001
    6e74:	000069fd 	.word	0x000069fd
    6e78:	00006bc9 	.word	0x00006bc9
    6e7c:	00006b41 	.word	0x00006b41

00006e80 <_tcc_timer_start>:
/**
 * \brief Start hardware timer
 */
void _tcc_timer_start(struct _timer_device *const device)
{
    6e80:	b580      	push	{r7, lr}
    6e82:	b082      	sub	sp, #8
    6e84:	af00      	add	r7, sp, #0
    6e86:	6078      	str	r0, [r7, #4]
	hri_tcc_set_CTRLA_ENABLE_bit(device->hw);
    6e88:	687b      	ldr	r3, [r7, #4]
    6e8a:	68db      	ldr	r3, [r3, #12]
    6e8c:	4618      	mov	r0, r3
    6e8e:	4b03      	ldr	r3, [pc, #12]	; (6e9c <_tcc_timer_start+0x1c>)
    6e90:	4798      	blx	r3
}
    6e92:	bf00      	nop
    6e94:	3708      	adds	r7, #8
    6e96:	46bd      	mov	sp, r7
    6e98:	bd80      	pop	{r7, pc}
    6e9a:	bf00      	nop
    6e9c:	00006b69 	.word	0x00006b69

00006ea0 <_tcc_timer_stop>:
/**
 * \brief Stop hardware timer
 */
void _tcc_timer_stop(struct _timer_device *const device)
{
    6ea0:	b580      	push	{r7, lr}
    6ea2:	b082      	sub	sp, #8
    6ea4:	af00      	add	r7, sp, #0
    6ea6:	6078      	str	r0, [r7, #4]
	hri_tcc_clear_CTRLA_ENABLE_bit(device->hw);
    6ea8:	687b      	ldr	r3, [r7, #4]
    6eaa:	68db      	ldr	r3, [r3, #12]
    6eac:	4618      	mov	r0, r3
    6eae:	4b03      	ldr	r3, [pc, #12]	; (6ebc <_tcc_timer_stop+0x1c>)
    6eb0:	4798      	blx	r3
}
    6eb2:	bf00      	nop
    6eb4:	3708      	adds	r7, #8
    6eb6:	46bd      	mov	sp, r7
    6eb8:	bd80      	pop	{r7, pc}
    6eba:	bf00      	nop
    6ebc:	00006bc9 	.word	0x00006bc9

00006ec0 <_tcc_timer_set_period>:
/**
 * \brief Set timer period
 */
void _tcc_timer_set_period(struct _timer_device *const device, const uint32_t clock_cycles)
{
    6ec0:	b580      	push	{r7, lr}
    6ec2:	b082      	sub	sp, #8
    6ec4:	af00      	add	r7, sp, #0
    6ec6:	6078      	str	r0, [r7, #4]
    6ec8:	6039      	str	r1, [r7, #0]
	hri_tcc_write_PER_reg(device->hw, clock_cycles);
    6eca:	687b      	ldr	r3, [r7, #4]
    6ecc:	68db      	ldr	r3, [r3, #12]
    6ece:	6839      	ldr	r1, [r7, #0]
    6ed0:	4618      	mov	r0, r3
    6ed2:	4b03      	ldr	r3, [pc, #12]	; (6ee0 <_tcc_timer_set_period+0x20>)
    6ed4:	4798      	blx	r3
}
    6ed6:	bf00      	nop
    6ed8:	3708      	adds	r7, #8
    6eda:	46bd      	mov	sp, r7
    6edc:	bd80      	pop	{r7, pc}
    6ede:	bf00      	nop
    6ee0:	00006c81 	.word	0x00006c81

00006ee4 <_tcc_timer_get_period>:
/**
 * \brief Retrieve timer period
 */
uint32_t _tcc_timer_get_period(const struct _timer_device *const device)
{
    6ee4:	b580      	push	{r7, lr}
    6ee6:	b082      	sub	sp, #8
    6ee8:	af00      	add	r7, sp, #0
    6eea:	6078      	str	r0, [r7, #4]
	return hri_tcc_read_PER_reg(device->hw);
    6eec:	687b      	ldr	r3, [r7, #4]
    6eee:	68db      	ldr	r3, [r3, #12]
    6ef0:	4618      	mov	r0, r3
    6ef2:	4b03      	ldr	r3, [pc, #12]	; (6f00 <_tcc_timer_get_period+0x1c>)
    6ef4:	4798      	blx	r3
    6ef6:	4603      	mov	r3, r0
}
    6ef8:	4618      	mov	r0, r3
    6efa:	3708      	adds	r7, #8
    6efc:	46bd      	mov	sp, r7
    6efe:	bd80      	pop	{r7, pc}
    6f00:	00006ca5 	.word	0x00006ca5

00006f04 <_tcc_timer_is_started>:
/**
 * \brief Check if timer is running
 */
bool _tcc_timer_is_started(const struct _timer_device *const device)
{
    6f04:	b580      	push	{r7, lr}
    6f06:	b082      	sub	sp, #8
    6f08:	af00      	add	r7, sp, #0
    6f0a:	6078      	str	r0, [r7, #4]
	return hri_tcc_get_CTRLA_ENABLE_bit(device->hw);
    6f0c:	687b      	ldr	r3, [r7, #4]
    6f0e:	68db      	ldr	r3, [r3, #12]
    6f10:	4618      	mov	r0, r3
    6f12:	4b03      	ldr	r3, [pc, #12]	; (6f20 <_tcc_timer_is_started+0x1c>)
    6f14:	4798      	blx	r3
    6f16:	4603      	mov	r3, r0
}
    6f18:	4618      	mov	r0, r3
    6f1a:	3708      	adds	r7, #8
    6f1c:	46bd      	mov	sp, r7
    6f1e:	bd80      	pop	{r7, pc}
    6f20:	00006b91 	.word	0x00006b91

00006f24 <_tcc_get_timer>:

/**
 * \brief Retrieve timer helper functions
 */
struct _timer_hpl_interface *_tcc_get_timer(void)
{
    6f24:	b480      	push	{r7}
    6f26:	af00      	add	r7, sp, #0
	return &_tcc_timer_functions;
    6f28:	4b02      	ldr	r3, [pc, #8]	; (6f34 <_tcc_get_timer+0x10>)
}
    6f2a:	4618      	mov	r0, r3
    6f2c:	46bd      	mov	sp, r7
    6f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
    6f32:	4770      	bx	lr
    6f34:	200000f0 	.word	0x200000f0

00006f38 <_tcc_timer_set_irq>:
 * \brief Set timer IRQ
 *
 * \param[in] hw The pointer to hardware instance
 */
void _tcc_timer_set_irq(struct _timer_device *const device)
{
    6f38:	b580      	push	{r7, lr}
    6f3a:	b084      	sub	sp, #16
    6f3c:	af00      	add	r7, sp, #0
    6f3e:	6078      	str	r0, [r7, #4]
	void *const     hw  = device->hw;
    6f40:	687b      	ldr	r3, [r7, #4]
    6f42:	68db      	ldr	r3, [r3, #12]
    6f44:	60fb      	str	r3, [r7, #12]
	struct tcc_cfg *cfg = _get_tcc_cfg(hw);
    6f46:	68f8      	ldr	r0, [r7, #12]
    6f48:	4b08      	ldr	r3, [pc, #32]	; (6f6c <_tcc_timer_set_irq+0x34>)
    6f4a:	4798      	blx	r3
    6f4c:	60b8      	str	r0, [r7, #8]
	if (cfg != NULL) {
    6f4e:	68bb      	ldr	r3, [r7, #8]
    6f50:	2b00      	cmp	r3, #0
    6f52:	d006      	beq.n	6f62 <_tcc_timer_set_irq+0x2a>
		_irq_set((IRQn_Type)cfg->irq);
    6f54:	68bb      	ldr	r3, [r7, #8]
    6f56:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    6f5a:	b2db      	uxtb	r3, r3
    6f5c:	4618      	mov	r0, r3
    6f5e:	4b04      	ldr	r3, [pc, #16]	; (6f70 <_tcc_timer_set_irq+0x38>)
    6f60:	4798      	blx	r3
	}
}
    6f62:	bf00      	nop
    6f64:	3710      	adds	r7, #16
    6f66:	46bd      	mov	sp, r7
    6f68:	bd80      	pop	{r7, pc}
    6f6a:	bf00      	nop
    6f6c:	00007001 	.word	0x00007001
    6f70:	00003bf9 	.word	0x00003bf9

00006f74 <tcc_interrupt_handler>:
 * \internal TCC interrupt handler
 *
 * \param[in] instance TCC instance number
 */
static void tcc_interrupt_handler(struct _timer_device *device)
{
    6f74:	b580      	push	{r7, lr}
    6f76:	b084      	sub	sp, #16
    6f78:	af00      	add	r7, sp, #0
    6f7a:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    6f7c:	687b      	ldr	r3, [r7, #4]
    6f7e:	68db      	ldr	r3, [r3, #12]
    6f80:	60fb      	str	r3, [r7, #12]

	if (hri_tcc_get_interrupt_OVF_bit(hw)) {
    6f82:	68f8      	ldr	r0, [r7, #12]
    6f84:	4b07      	ldr	r3, [pc, #28]	; (6fa4 <tcc_interrupt_handler+0x30>)
    6f86:	4798      	blx	r3
    6f88:	4603      	mov	r3, r0
    6f8a:	2b00      	cmp	r3, #0
    6f8c:	d006      	beq.n	6f9c <tcc_interrupt_handler+0x28>
		hri_tcc_clear_interrupt_OVF_bit(hw);
    6f8e:	68f8      	ldr	r0, [r7, #12]
    6f90:	4b05      	ldr	r3, [pc, #20]	; (6fa8 <tcc_interrupt_handler+0x34>)
    6f92:	4798      	blx	r3
		device->timer_cb.period_expired(device);
    6f94:	687b      	ldr	r3, [r7, #4]
    6f96:	681b      	ldr	r3, [r3, #0]
    6f98:	6878      	ldr	r0, [r7, #4]
    6f9a:	4798      	blx	r3
	}
}
    6f9c:	bf00      	nop
    6f9e:	3710      	adds	r7, #16
    6fa0:	46bd      	mov	sp, r7
    6fa2:	bd80      	pop	{r7, pc}
    6fa4:	00006ac9 	.word	0x00006ac9
    6fa8:	00006aef 	.word	0x00006aef

00006fac <TCC0_0_Handler>:

/**
 * \brief TCC interrupt handler
 */
void TCC0_0_Handler(void)
{
    6fac:	b580      	push	{r7, lr}
    6fae:	af00      	add	r7, sp, #0
	tcc_interrupt_handler(_tcc0_dev);
    6fb0:	4b03      	ldr	r3, [pc, #12]	; (6fc0 <TCC0_0_Handler+0x14>)
    6fb2:	681b      	ldr	r3, [r3, #0]
    6fb4:	4618      	mov	r0, r3
    6fb6:	4b03      	ldr	r3, [pc, #12]	; (6fc4 <TCC0_0_Handler+0x18>)
    6fb8:	4798      	blx	r3
}
    6fba:	bf00      	nop
    6fbc:	bd80      	pop	{r7, pc}
    6fbe:	bf00      	nop
    6fc0:	20000d38 	.word	0x20000d38
    6fc4:	00006f75 	.word	0x00006f75

00006fc8 <TCC1_0_Handler>:

/**
 * \brief TCC interrupt handler
 */
void TCC1_0_Handler(void)
{
    6fc8:	b580      	push	{r7, lr}
    6fca:	af00      	add	r7, sp, #0
	tcc_interrupt_handler(_tcc1_dev);
    6fcc:	4b03      	ldr	r3, [pc, #12]	; (6fdc <TCC1_0_Handler+0x14>)
    6fce:	681b      	ldr	r3, [r3, #0]
    6fd0:	4618      	mov	r0, r3
    6fd2:	4b03      	ldr	r3, [pc, #12]	; (6fe0 <TCC1_0_Handler+0x18>)
    6fd4:	4798      	blx	r3
}
    6fd6:	bf00      	nop
    6fd8:	bd80      	pop	{r7, pc}
    6fda:	bf00      	nop
    6fdc:	20000d3c 	.word	0x20000d3c
    6fe0:	00006f75 	.word	0x00006f75

00006fe4 <TCC2_0_Handler>:

/**
 * \brief TCC interrupt handler
 */
void TCC2_0_Handler(void)
{
    6fe4:	b580      	push	{r7, lr}
    6fe6:	af00      	add	r7, sp, #0
	tcc_interrupt_handler(_tcc2_dev);
    6fe8:	4b03      	ldr	r3, [pc, #12]	; (6ff8 <TCC2_0_Handler+0x14>)
    6fea:	681b      	ldr	r3, [r3, #0]
    6fec:	4618      	mov	r0, r3
    6fee:	4b03      	ldr	r3, [pc, #12]	; (6ffc <TCC2_0_Handler+0x18>)
    6ff0:	4798      	blx	r3
}
    6ff2:	bf00      	nop
    6ff4:	bd80      	pop	{r7, pc}
    6ff6:	bf00      	nop
    6ff8:	20000d40 	.word	0x20000d40
    6ffc:	00006f75 	.word	0x00006f75

00007000 <_get_tcc_cfg>:

static struct tcc_cfg *_get_tcc_cfg(void *hw)
{
    7000:	b480      	push	{r7}
    7002:	b085      	sub	sp, #20
    7004:	af00      	add	r7, sp, #0
    7006:	6078      	str	r0, [r7, #4]
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_cfgs); i++) {
    7008:	2300      	movs	r3, #0
    700a:	73fb      	strb	r3, [r7, #15]
    700c:	e015      	b.n	703a <_get_tcc_cfg+0x3a>
		if (_cfgs[i].hw == hw) {
    700e:	7bfa      	ldrb	r2, [r7, #15]
    7010:	490f      	ldr	r1, [pc, #60]	; (7050 <_get_tcc_cfg+0x50>)
    7012:	4613      	mov	r3, r2
    7014:	005b      	lsls	r3, r3, #1
    7016:	4413      	add	r3, r2
    7018:	011b      	lsls	r3, r3, #4
    701a:	440b      	add	r3, r1
    701c:	681a      	ldr	r2, [r3, #0]
    701e:	687b      	ldr	r3, [r7, #4]
    7020:	429a      	cmp	r2, r3
    7022:	d107      	bne.n	7034 <_get_tcc_cfg+0x34>
			return &(_cfgs[i]);
    7024:	7bfa      	ldrb	r2, [r7, #15]
    7026:	4613      	mov	r3, r2
    7028:	005b      	lsls	r3, r3, #1
    702a:	4413      	add	r3, r2
    702c:	011b      	lsls	r3, r3, #4
    702e:	4a08      	ldr	r2, [pc, #32]	; (7050 <_get_tcc_cfg+0x50>)
    7030:	4413      	add	r3, r2
    7032:	e006      	b.n	7042 <_get_tcc_cfg+0x42>
	for (i = 0; i < ARRAY_SIZE(_cfgs); i++) {
    7034:	7bfb      	ldrb	r3, [r7, #15]
    7036:	3301      	adds	r3, #1
    7038:	73fb      	strb	r3, [r7, #15]
    703a:	7bfb      	ldrb	r3, [r7, #15]
    703c:	2b02      	cmp	r3, #2
    703e:	d9e6      	bls.n	700e <_get_tcc_cfg+0xe>
		}
	}
	return NULL;
    7040:	2300      	movs	r3, #0
}
    7042:	4618      	mov	r0, r3
    7044:	3714      	adds	r7, #20
    7046:	46bd      	mov	sp, r7
    7048:	f85d 7b04 	ldr.w	r7, [sp], #4
    704c:	4770      	bx	lr
    704e:	bf00      	nop
    7050:	20000060 	.word	0x20000060

00007054 <__NVIC_EnableIRQ>:
{
    7054:	b480      	push	{r7}
    7056:	b083      	sub	sp, #12
    7058:	af00      	add	r7, sp, #0
    705a:	4603      	mov	r3, r0
    705c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    705e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    7062:	2b00      	cmp	r3, #0
    7064:	db0b      	blt.n	707e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    7066:	4909      	ldr	r1, [pc, #36]	; (708c <__NVIC_EnableIRQ+0x38>)
    7068:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    706c:	095b      	lsrs	r3, r3, #5
    706e:	88fa      	ldrh	r2, [r7, #6]
    7070:	f002 021f 	and.w	r2, r2, #31
    7074:	2001      	movs	r0, #1
    7076:	fa00 f202 	lsl.w	r2, r0, r2
    707a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    707e:	bf00      	nop
    7080:	370c      	adds	r7, #12
    7082:	46bd      	mov	sp, r7
    7084:	f85d 7b04 	ldr.w	r7, [sp], #4
    7088:	4770      	bx	lr
    708a:	bf00      	nop
    708c:	e000e100 	.word	0xe000e100

00007090 <__NVIC_DisableIRQ>:
{
    7090:	b480      	push	{r7}
    7092:	b083      	sub	sp, #12
    7094:	af00      	add	r7, sp, #0
    7096:	4603      	mov	r3, r0
    7098:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    709a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    709e:	2b00      	cmp	r3, #0
    70a0:	db10      	blt.n	70c4 <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    70a2:	490b      	ldr	r1, [pc, #44]	; (70d0 <__NVIC_DisableIRQ+0x40>)
    70a4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    70a8:	095b      	lsrs	r3, r3, #5
    70aa:	88fa      	ldrh	r2, [r7, #6]
    70ac:	f002 021f 	and.w	r2, r2, #31
    70b0:	2001      	movs	r0, #1
    70b2:	fa00 f202 	lsl.w	r2, r0, r2
    70b6:	3320      	adds	r3, #32
    70b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    70bc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    70c0:	f3bf 8f6f 	isb	sy
}
    70c4:	bf00      	nop
    70c6:	370c      	adds	r7, #12
    70c8:	46bd      	mov	sp, r7
    70ca:	f85d 7b04 	ldr.w	r7, [sp], #4
    70ce:	4770      	bx	lr
    70d0:	e000e100 	.word	0xe000e100

000070d4 <__NVIC_ClearPendingIRQ>:
{
    70d4:	b480      	push	{r7}
    70d6:	b083      	sub	sp, #12
    70d8:	af00      	add	r7, sp, #0
    70da:	4603      	mov	r3, r0
    70dc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    70de:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    70e2:	2b00      	cmp	r3, #0
    70e4:	db0c      	blt.n	7100 <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    70e6:	4909      	ldr	r1, [pc, #36]	; (710c <__NVIC_ClearPendingIRQ+0x38>)
    70e8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    70ec:	095b      	lsrs	r3, r3, #5
    70ee:	88fa      	ldrh	r2, [r7, #6]
    70f0:	f002 021f 	and.w	r2, r2, #31
    70f4:	2001      	movs	r0, #1
    70f6:	fa00 f202 	lsl.w	r2, r0, r2
    70fa:	3360      	adds	r3, #96	; 0x60
    70fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    7100:	bf00      	nop
    7102:	370c      	adds	r7, #12
    7104:	46bd      	mov	sp, r7
    7106:	f85d 7b04 	ldr.w	r7, [sp], #4
    710a:	4770      	bx	lr
    710c:	e000e100 	.word	0xe000e100

00007110 <hri_tc_wait_for_sync>:
typedef uint8_t  hri_tccount8_count_reg_t;
typedef uint8_t  hri_tccount8_per_reg_t;
typedef uint8_t  hri_tccount8_perbuf_reg_t;

static inline void hri_tc_wait_for_sync(const void *const hw, hri_tc_syncbusy_reg_t reg)
{
    7110:	b480      	push	{r7}
    7112:	b083      	sub	sp, #12
    7114:	af00      	add	r7, sp, #0
    7116:	6078      	str	r0, [r7, #4]
    7118:	6039      	str	r1, [r7, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    711a:	bf00      	nop
    711c:	687b      	ldr	r3, [r7, #4]
    711e:	691a      	ldr	r2, [r3, #16]
    7120:	683b      	ldr	r3, [r7, #0]
    7122:	4013      	ands	r3, r2
    7124:	2b00      	cmp	r3, #0
    7126:	d1f9      	bne.n	711c <hri_tc_wait_for_sync+0xc>
	};
}
    7128:	bf00      	nop
    712a:	370c      	adds	r7, #12
    712c:	46bd      	mov	sp, r7
    712e:	f85d 7b04 	ldr.w	r7, [sp], #4
    7132:	4770      	bx	lr

00007134 <hri_tc_is_syncing>:

static inline bool hri_tc_is_syncing(const void *const hw, hri_tc_syncbusy_reg_t reg)
{
    7134:	b480      	push	{r7}
    7136:	b083      	sub	sp, #12
    7138:	af00      	add	r7, sp, #0
    713a:	6078      	str	r0, [r7, #4]
    713c:	6039      	str	r1, [r7, #0]
	return ((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg;
    713e:	687b      	ldr	r3, [r7, #4]
    7140:	691a      	ldr	r2, [r3, #16]
    7142:	683b      	ldr	r3, [r7, #0]
    7144:	4013      	ands	r3, r2
    7146:	2b00      	cmp	r3, #0
    7148:	bf14      	ite	ne
    714a:	2301      	movne	r3, #1
    714c:	2300      	moveq	r3, #0
    714e:	b2db      	uxtb	r3, r3
}
    7150:	4618      	mov	r0, r3
    7152:	370c      	adds	r7, #12
    7154:	46bd      	mov	sp, r7
    7156:	f85d 7b04 	ldr.w	r7, [sp], #4
    715a:	4770      	bx	lr

0000715c <hri_tc_get_interrupt_OVF_bit>:
{
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_MC1;
}

static inline bool hri_tc_get_interrupt_OVF_bit(const void *const hw)
{
    715c:	b480      	push	{r7}
    715e:	b083      	sub	sp, #12
    7160:	af00      	add	r7, sp, #0
    7162:	6078      	str	r0, [r7, #4]
	return (((Tc *)hw)->COUNT16.INTFLAG.reg & TC_INTFLAG_OVF) >> TC_INTFLAG_OVF_Pos;
    7164:	687b      	ldr	r3, [r7, #4]
    7166:	7a9b      	ldrb	r3, [r3, #10]
    7168:	b2db      	uxtb	r3, r3
    716a:	f003 0301 	and.w	r3, r3, #1
    716e:	2b00      	cmp	r3, #0
    7170:	bf14      	ite	ne
    7172:	2301      	movne	r3, #1
    7174:	2300      	moveq	r3, #0
    7176:	b2db      	uxtb	r3, r3
}
    7178:	4618      	mov	r0, r3
    717a:	370c      	adds	r7, #12
    717c:	46bd      	mov	sp, r7
    717e:	f85d 7b04 	ldr.w	r7, [sp], #4
    7182:	4770      	bx	lr

00007184 <hri_tc_clear_interrupt_OVF_bit>:

static inline void hri_tc_clear_interrupt_OVF_bit(const void *const hw)
{
    7184:	b480      	push	{r7}
    7186:	b083      	sub	sp, #12
    7188:	af00      	add	r7, sp, #0
    718a:	6078      	str	r0, [r7, #4]
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_OVF;
    718c:	687b      	ldr	r3, [r7, #4]
    718e:	2201      	movs	r2, #1
    7190:	729a      	strb	r2, [r3, #10]
}
    7192:	bf00      	nop
    7194:	370c      	adds	r7, #12
    7196:	46bd      	mov	sp, r7
    7198:	f85d 7b04 	ldr.w	r7, [sp], #4
    719c:	4770      	bx	lr

0000719e <hri_tc_clear_interrupt_ERR_bit>:
{
	return (((Tc *)hw)->COUNT16.INTFLAG.reg & TC_INTFLAG_ERR) >> TC_INTFLAG_ERR_Pos;
}

static inline void hri_tc_clear_interrupt_ERR_bit(const void *const hw)
{
    719e:	b480      	push	{r7}
    71a0:	b083      	sub	sp, #12
    71a2:	af00      	add	r7, sp, #0
    71a4:	6078      	str	r0, [r7, #4]
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_ERR;
    71a6:	687b      	ldr	r3, [r7, #4]
    71a8:	2202      	movs	r2, #2
    71aa:	729a      	strb	r2, [r3, #10]
}
    71ac:	bf00      	nop
    71ae:	370c      	adds	r7, #12
    71b0:	46bd      	mov	sp, r7
    71b2:	f85d 7b04 	ldr.w	r7, [sp], #4
    71b6:	4770      	bx	lr

000071b8 <hri_tc_set_INTEN_OVF_bit>:
{
	((Tc *)hw)->COUNT16.CTRLBCLR.reg = mask;
}

static inline void hri_tc_set_INTEN_OVF_bit(const void *const hw)
{
    71b8:	b480      	push	{r7}
    71ba:	b083      	sub	sp, #12
    71bc:	af00      	add	r7, sp, #0
    71be:	6078      	str	r0, [r7, #4]
	((Tc *)hw)->COUNT16.INTENSET.reg = TC_INTENSET_OVF;
    71c0:	687b      	ldr	r3, [r7, #4]
    71c2:	2201      	movs	r2, #1
    71c4:	725a      	strb	r2, [r3, #9]
}
    71c6:	bf00      	nop
    71c8:	370c      	adds	r7, #12
    71ca:	46bd      	mov	sp, r7
    71cc:	f85d 7b04 	ldr.w	r7, [sp], #4
    71d0:	4770      	bx	lr

000071d2 <hri_tc_get_INTEN_ERR_bit>:
{
	((Tc *)hw)->COUNT16.INTENSET.reg = TC_INTENSET_ERR;
}

static inline bool hri_tc_get_INTEN_ERR_bit(const void *const hw)
{
    71d2:	b480      	push	{r7}
    71d4:	b083      	sub	sp, #12
    71d6:	af00      	add	r7, sp, #0
    71d8:	6078      	str	r0, [r7, #4]
	return (((Tc *)hw)->COUNT16.INTENSET.reg & TC_INTENSET_ERR) >> TC_INTENSET_ERR_Pos;
    71da:	687b      	ldr	r3, [r7, #4]
    71dc:	7a5b      	ldrb	r3, [r3, #9]
    71de:	b2db      	uxtb	r3, r3
    71e0:	085b      	lsrs	r3, r3, #1
    71e2:	f003 0301 	and.w	r3, r3, #1
    71e6:	2b00      	cmp	r3, #0
    71e8:	bf14      	ite	ne
    71ea:	2301      	movne	r3, #1
    71ec:	2300      	moveq	r3, #0
    71ee:	b2db      	uxtb	r3, r3
}
    71f0:	4618      	mov	r0, r3
    71f2:	370c      	adds	r7, #12
    71f4:	46bd      	mov	sp, r7
    71f6:	f85d 7b04 	ldr.w	r7, [sp], #4
    71fa:	4770      	bx	lr

000071fc <hri_tc_set_CTRLA_SWRST_bit>:
{
	return ((Tc *)hw)->COUNT16.SYNCBUSY.reg;
}

static inline void hri_tc_set_CTRLA_SWRST_bit(const void *const hw)
{
    71fc:	b580      	push	{r7, lr}
    71fe:	b082      	sub	sp, #8
    7200:	af00      	add	r7, sp, #0
    7202:	6078      	str	r0, [r7, #4]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg |= TC_CTRLA_SWRST;
    7204:	687b      	ldr	r3, [r7, #4]
    7206:	681b      	ldr	r3, [r3, #0]
    7208:	f043 0201 	orr.w	r2, r3, #1
    720c:	687b      	ldr	r3, [r7, #4]
    720e:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST);
    7210:	2101      	movs	r1, #1
    7212:	6878      	ldr	r0, [r7, #4]
    7214:	4b02      	ldr	r3, [pc, #8]	; (7220 <hri_tc_set_CTRLA_SWRST_bit+0x24>)
    7216:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    7218:	bf00      	nop
    721a:	3708      	adds	r7, #8
    721c:	46bd      	mov	sp, r7
    721e:	bd80      	pop	{r7, pc}
    7220:	00007111 	.word	0x00007111

00007224 <hri_tc_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & TC_CTRLA_SWRST) >> TC_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_tc_set_CTRLA_ENABLE_bit(const void *const hw)
{
    7224:	b580      	push	{r7, lr}
    7226:	b082      	sub	sp, #8
    7228:	af00      	add	r7, sp, #0
    722a:	6078      	str	r0, [r7, #4]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg |= TC_CTRLA_ENABLE;
    722c:	687b      	ldr	r3, [r7, #4]
    722e:	681b      	ldr	r3, [r3, #0]
    7230:	f043 0202 	orr.w	r2, r3, #2
    7234:	687b      	ldr	r3, [r7, #4]
    7236:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    7238:	2103      	movs	r1, #3
    723a:	6878      	ldr	r0, [r7, #4]
    723c:	4b02      	ldr	r3, [pc, #8]	; (7248 <hri_tc_set_CTRLA_ENABLE_bit+0x24>)
    723e:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    7240:	bf00      	nop
    7242:	3708      	adds	r7, #8
    7244:	46bd      	mov	sp, r7
    7246:	bd80      	pop	{r7, pc}
    7248:	00007111 	.word	0x00007111

0000724c <hri_tc_get_CTRLA_ENABLE_bit>:

static inline bool hri_tc_get_CTRLA_ENABLE_bit(const void *const hw)
{
    724c:	b580      	push	{r7, lr}
    724e:	b084      	sub	sp, #16
    7250:	af00      	add	r7, sp, #0
    7252:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    7254:	2103      	movs	r1, #3
    7256:	6878      	ldr	r0, [r7, #4]
    7258:	4b09      	ldr	r3, [pc, #36]	; (7280 <hri_tc_get_CTRLA_ENABLE_bit+0x34>)
    725a:	4798      	blx	r3
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    725c:	687b      	ldr	r3, [r7, #4]
    725e:	681b      	ldr	r3, [r3, #0]
    7260:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & TC_CTRLA_ENABLE) >> TC_CTRLA_ENABLE_Pos;
    7262:	68fb      	ldr	r3, [r7, #12]
    7264:	085b      	lsrs	r3, r3, #1
    7266:	f003 0301 	and.w	r3, r3, #1
    726a:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    726c:	68fb      	ldr	r3, [r7, #12]
    726e:	2b00      	cmp	r3, #0
    7270:	bf14      	ite	ne
    7272:	2301      	movne	r3, #1
    7274:	2300      	moveq	r3, #0
    7276:	b2db      	uxtb	r3, r3
}
    7278:	4618      	mov	r0, r3
    727a:	3710      	adds	r7, #16
    727c:	46bd      	mov	sp, r7
    727e:	bd80      	pop	{r7, pc}
    7280:	00007111 	.word	0x00007111

00007284 <hri_tc_clear_CTRLA_ENABLE_bit>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_tc_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    7284:	b580      	push	{r7, lr}
    7286:	b082      	sub	sp, #8
    7288:	af00      	add	r7, sp, #0
    728a:	6078      	str	r0, [r7, #4]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    728c:	687b      	ldr	r3, [r7, #4]
    728e:	681b      	ldr	r3, [r3, #0]
    7290:	f023 0202 	bic.w	r2, r3, #2
    7294:	687b      	ldr	r3, [r7, #4]
    7296:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    7298:	2103      	movs	r1, #3
    729a:	6878      	ldr	r0, [r7, #4]
    729c:	4b02      	ldr	r3, [pc, #8]	; (72a8 <hri_tc_clear_CTRLA_ENABLE_bit+0x24>)
    729e:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    72a0:	bf00      	nop
    72a2:	3708      	adds	r7, #8
    72a4:	46bd      	mov	sp, r7
    72a6:	bd80      	pop	{r7, pc}
    72a8:	00007111 	.word	0x00007111

000072ac <hri_tc_read_CTRLA_MODE_bf>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_MASK);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tc_ctrla_reg_t hri_tc_read_CTRLA_MODE_bf(const void *const hw)
{
    72ac:	b480      	push	{r7}
    72ae:	b085      	sub	sp, #20
    72b0:	af00      	add	r7, sp, #0
    72b2:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    72b4:	687b      	ldr	r3, [r7, #4]
    72b6:	681b      	ldr	r3, [r3, #0]
    72b8:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & TC_CTRLA_MODE_Msk) >> TC_CTRLA_MODE_Pos;
    72ba:	68fb      	ldr	r3, [r7, #12]
    72bc:	089b      	lsrs	r3, r3, #2
    72be:	f003 0303 	and.w	r3, r3, #3
    72c2:	60fb      	str	r3, [r7, #12]
	return tmp;
    72c4:	68fb      	ldr	r3, [r7, #12]
}
    72c6:	4618      	mov	r0, r3
    72c8:	3714      	adds	r7, #20
    72ca:	46bd      	mov	sp, r7
    72cc:	f85d 7b04 	ldr.w	r7, [sp], #4
    72d0:	4770      	bx	lr
	...

000072d4 <hri_tc_get_CTRLA_reg>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tc_ctrla_reg_t hri_tc_get_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t mask)
{
    72d4:	b580      	push	{r7, lr}
    72d6:	b084      	sub	sp, #16
    72d8:	af00      	add	r7, sp, #0
    72da:	6078      	str	r0, [r7, #4]
    72dc:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    72de:	2103      	movs	r1, #3
    72e0:	6878      	ldr	r0, [r7, #4]
    72e2:	4b07      	ldr	r3, [pc, #28]	; (7300 <hri_tc_get_CTRLA_reg+0x2c>)
    72e4:	4798      	blx	r3
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    72e6:	687b      	ldr	r3, [r7, #4]
    72e8:	681b      	ldr	r3, [r3, #0]
    72ea:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    72ec:	68fa      	ldr	r2, [r7, #12]
    72ee:	683b      	ldr	r3, [r7, #0]
    72f0:	4013      	ands	r3, r2
    72f2:	60fb      	str	r3, [r7, #12]
	return tmp;
    72f4:	68fb      	ldr	r3, [r7, #12]
}
    72f6:	4618      	mov	r0, r3
    72f8:	3710      	adds	r7, #16
    72fa:	46bd      	mov	sp, r7
    72fc:	bd80      	pop	{r7, pc}
    72fe:	bf00      	nop
    7300:	00007111 	.word	0x00007111

00007304 <hri_tc_write_CTRLA_reg>:

static inline void hri_tc_write_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t data)
{
    7304:	b580      	push	{r7, lr}
    7306:	b082      	sub	sp, #8
    7308:	af00      	add	r7, sp, #0
    730a:	6078      	str	r0, [r7, #4]
    730c:	6039      	str	r1, [r7, #0]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    730e:	687b      	ldr	r3, [r7, #4]
    7310:	683a      	ldr	r2, [r7, #0]
    7312:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    7314:	2103      	movs	r1, #3
    7316:	6878      	ldr	r0, [r7, #4]
    7318:	4b02      	ldr	r3, [pc, #8]	; (7324 <hri_tc_write_CTRLA_reg+0x20>)
    731a:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    731c:	bf00      	nop
    731e:	3708      	adds	r7, #8
    7320:	46bd      	mov	sp, r7
    7322:	bd80      	pop	{r7, pc}
    7324:	00007111 	.word	0x00007111

00007328 <hri_tc_write_EVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tc_write_EVCTRL_reg(const void *const hw, hri_tc_evctrl_reg_t data)
{
    7328:	b480      	push	{r7}
    732a:	b083      	sub	sp, #12
    732c:	af00      	add	r7, sp, #0
    732e:	6078      	str	r0, [r7, #4]
    7330:	460b      	mov	r3, r1
    7332:	807b      	strh	r3, [r7, #2]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.EVCTRL.reg = data;
    7334:	687b      	ldr	r3, [r7, #4]
    7336:	887a      	ldrh	r2, [r7, #2]
    7338:	80da      	strh	r2, [r3, #6]
	TC_CRITICAL_SECTION_LEAVE();
}
    733a:	bf00      	nop
    733c:	370c      	adds	r7, #12
    733e:	46bd      	mov	sp, r7
    7340:	f85d 7b04 	ldr.w	r7, [sp], #4
    7344:	4770      	bx	lr

00007346 <hri_tc_write_WAVE_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tc_write_WAVE_reg(const void *const hw, hri_tc_wave_reg_t data)
{
    7346:	b480      	push	{r7}
    7348:	b083      	sub	sp, #12
    734a:	af00      	add	r7, sp, #0
    734c:	6078      	str	r0, [r7, #4]
    734e:	460b      	mov	r3, r1
    7350:	70fb      	strb	r3, [r7, #3]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.WAVE.reg = data;
    7352:	687b      	ldr	r3, [r7, #4]
    7354:	78fa      	ldrb	r2, [r7, #3]
    7356:	731a      	strb	r2, [r3, #12]
	TC_CRITICAL_SECTION_LEAVE();
}
    7358:	bf00      	nop
    735a:	370c      	adds	r7, #12
    735c:	46bd      	mov	sp, r7
    735e:	f85d 7b04 	ldr.w	r7, [sp], #4
    7362:	4770      	bx	lr

00007364 <hri_tc_write_DBGCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tc_write_DBGCTRL_reg(const void *const hw, hri_tc_dbgctrl_reg_t data)
{
    7364:	b480      	push	{r7}
    7366:	b083      	sub	sp, #12
    7368:	af00      	add	r7, sp, #0
    736a:	6078      	str	r0, [r7, #4]
    736c:	460b      	mov	r3, r1
    736e:	70fb      	strb	r3, [r7, #3]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.DBGCTRL.reg = data;
    7370:	687b      	ldr	r3, [r7, #4]
    7372:	78fa      	ldrb	r2, [r7, #3]
    7374:	73da      	strb	r2, [r3, #15]
	TC_CRITICAL_SECTION_LEAVE();
}
    7376:	bf00      	nop
    7378:	370c      	adds	r7, #12
    737a:	46bd      	mov	sp, r7
    737c:	f85d 7b04 	ldr.w	r7, [sp], #4
    7380:	4770      	bx	lr
	...

00007384 <hri_tccount8_write_PER_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount8_write_PER_reg(const void *const hw, hri_tccount8_per_reg_t data)
{
    7384:	b580      	push	{r7, lr}
    7386:	b082      	sub	sp, #8
    7388:	af00      	add	r7, sp, #0
    738a:	6078      	str	r0, [r7, #4]
    738c:	460b      	mov	r3, r1
    738e:	70fb      	strb	r3, [r7, #3]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT8.PER.reg = data;
    7390:	687b      	ldr	r3, [r7, #4]
    7392:	78fa      	ldrb	r2, [r7, #3]
    7394:	76da      	strb	r2, [r3, #27]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_PER);
    7396:	2120      	movs	r1, #32
    7398:	6878      	ldr	r0, [r7, #4]
    739a:	4b03      	ldr	r3, [pc, #12]	; (73a8 <hri_tccount8_write_PER_reg+0x24>)
    739c:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    739e:	bf00      	nop
    73a0:	3708      	adds	r7, #8
    73a2:	46bd      	mov	sp, r7
    73a4:	bd80      	pop	{r7, pc}
    73a6:	bf00      	nop
    73a8:	00007111 	.word	0x00007111

000073ac <hri_tccount8_read_PER_reg>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_PER);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tccount8_per_reg_t hri_tccount8_read_PER_reg(const void *const hw)
{
    73ac:	b580      	push	{r7, lr}
    73ae:	b082      	sub	sp, #8
    73b0:	af00      	add	r7, sp, #0
    73b2:	6078      	str	r0, [r7, #4]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_PER);
    73b4:	2120      	movs	r1, #32
    73b6:	6878      	ldr	r0, [r7, #4]
    73b8:	4b04      	ldr	r3, [pc, #16]	; (73cc <hri_tccount8_read_PER_reg+0x20>)
    73ba:	4798      	blx	r3
	return ((Tc *)hw)->COUNT8.PER.reg;
    73bc:	687b      	ldr	r3, [r7, #4]
    73be:	7edb      	ldrb	r3, [r3, #27]
    73c0:	b2db      	uxtb	r3, r3
}
    73c2:	4618      	mov	r0, r3
    73c4:	3708      	adds	r7, #8
    73c6:	46bd      	mov	sp, r7
    73c8:	bd80      	pop	{r7, pc}
    73ca:	bf00      	nop
    73cc:	00007111 	.word	0x00007111

000073d0 <hri_tccount8_write_CC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount8_write_CC_reg(const void *const hw, uint8_t index, hri_tccount8_cc_reg_t data)
{
    73d0:	b580      	push	{r7, lr}
    73d2:	b082      	sub	sp, #8
    73d4:	af00      	add	r7, sp, #0
    73d6:	6078      	str	r0, [r7, #4]
    73d8:	460b      	mov	r3, r1
    73da:	70fb      	strb	r3, [r7, #3]
    73dc:	4613      	mov	r3, r2
    73de:	70bb      	strb	r3, [r7, #2]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT8.CC[index].reg = data;
    73e0:	78fb      	ldrb	r3, [r7, #3]
    73e2:	687a      	ldr	r2, [r7, #4]
    73e4:	4413      	add	r3, r2
    73e6:	78ba      	ldrb	r2, [r7, #2]
    73e8:	771a      	strb	r2, [r3, #28]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    73ea:	21c0      	movs	r1, #192	; 0xc0
    73ec:	6878      	ldr	r0, [r7, #4]
    73ee:	4b03      	ldr	r3, [pc, #12]	; (73fc <hri_tccount8_write_CC_reg+0x2c>)
    73f0:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    73f2:	bf00      	nop
    73f4:	3708      	adds	r7, #8
    73f6:	46bd      	mov	sp, r7
    73f8:	bd80      	pop	{r7, pc}
    73fa:	bf00      	nop
    73fc:	00007111 	.word	0x00007111

00007400 <hri_tccount16_write_CC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount16_write_CC_reg(const void *const hw, uint8_t index, hri_tccount16_cc_reg_t data)
{
    7400:	b580      	push	{r7, lr}
    7402:	b082      	sub	sp, #8
    7404:	af00      	add	r7, sp, #0
    7406:	6078      	str	r0, [r7, #4]
    7408:	460b      	mov	r3, r1
    740a:	70fb      	strb	r3, [r7, #3]
    740c:	4613      	mov	r3, r2
    740e:	803b      	strh	r3, [r7, #0]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    7410:	78fb      	ldrb	r3, [r7, #3]
    7412:	687a      	ldr	r2, [r7, #4]
    7414:	330c      	adds	r3, #12
    7416:	005b      	lsls	r3, r3, #1
    7418:	4413      	add	r3, r2
    741a:	883a      	ldrh	r2, [r7, #0]
    741c:	809a      	strh	r2, [r3, #4]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    741e:	21c0      	movs	r1, #192	; 0xc0
    7420:	6878      	ldr	r0, [r7, #4]
    7422:	4b03      	ldr	r3, [pc, #12]	; (7430 <hri_tccount16_write_CC_reg+0x30>)
    7424:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    7426:	bf00      	nop
    7428:	3708      	adds	r7, #8
    742a:	46bd      	mov	sp, r7
    742c:	bd80      	pop	{r7, pc}
    742e:	bf00      	nop
    7430:	00007111 	.word	0x00007111

00007434 <hri_tccount16_read_CC_reg>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tccount16_cc_reg_t hri_tccount16_read_CC_reg(const void *const hw, uint8_t index)
{
    7434:	b580      	push	{r7, lr}
    7436:	b082      	sub	sp, #8
    7438:	af00      	add	r7, sp, #0
    743a:	6078      	str	r0, [r7, #4]
    743c:	460b      	mov	r3, r1
    743e:	70fb      	strb	r3, [r7, #3]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    7440:	21c0      	movs	r1, #192	; 0xc0
    7442:	6878      	ldr	r0, [r7, #4]
    7444:	4b06      	ldr	r3, [pc, #24]	; (7460 <hri_tccount16_read_CC_reg+0x2c>)
    7446:	4798      	blx	r3
	return ((Tc *)hw)->COUNT16.CC[index].reg;
    7448:	78fb      	ldrb	r3, [r7, #3]
    744a:	687a      	ldr	r2, [r7, #4]
    744c:	330c      	adds	r3, #12
    744e:	005b      	lsls	r3, r3, #1
    7450:	4413      	add	r3, r2
    7452:	889b      	ldrh	r3, [r3, #4]
    7454:	b29b      	uxth	r3, r3
}
    7456:	4618      	mov	r0, r3
    7458:	3708      	adds	r7, #8
    745a:	46bd      	mov	sp, r7
    745c:	bd80      	pop	{r7, pc}
    745e:	bf00      	nop
    7460:	00007111 	.word	0x00007111

00007464 <hri_tccount32_write_CC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount32_write_CC_reg(const void *const hw, uint8_t index, hri_tccount32_cc_reg_t data)
{
    7464:	b580      	push	{r7, lr}
    7466:	b084      	sub	sp, #16
    7468:	af00      	add	r7, sp, #0
    746a:	60f8      	str	r0, [r7, #12]
    746c:	460b      	mov	r3, r1
    746e:	607a      	str	r2, [r7, #4]
    7470:	72fb      	strb	r3, [r7, #11]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    7472:	7afb      	ldrb	r3, [r7, #11]
    7474:	68fa      	ldr	r2, [r7, #12]
    7476:	3306      	adds	r3, #6
    7478:	009b      	lsls	r3, r3, #2
    747a:	4413      	add	r3, r2
    747c:	687a      	ldr	r2, [r7, #4]
    747e:	605a      	str	r2, [r3, #4]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    7480:	21c0      	movs	r1, #192	; 0xc0
    7482:	68f8      	ldr	r0, [r7, #12]
    7484:	4b02      	ldr	r3, [pc, #8]	; (7490 <hri_tccount32_write_CC_reg+0x2c>)
    7486:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    7488:	bf00      	nop
    748a:	3710      	adds	r7, #16
    748c:	46bd      	mov	sp, r7
    748e:	bd80      	pop	{r7, pc}
    7490:	00007111 	.word	0x00007111

00007494 <hri_tccount32_read_CC_reg>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tccount32_cc_reg_t hri_tccount32_read_CC_reg(const void *const hw, uint8_t index)
{
    7494:	b580      	push	{r7, lr}
    7496:	b082      	sub	sp, #8
    7498:	af00      	add	r7, sp, #0
    749a:	6078      	str	r0, [r7, #4]
    749c:	460b      	mov	r3, r1
    749e:	70fb      	strb	r3, [r7, #3]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    74a0:	21c0      	movs	r1, #192	; 0xc0
    74a2:	6878      	ldr	r0, [r7, #4]
    74a4:	4b05      	ldr	r3, [pc, #20]	; (74bc <hri_tccount32_read_CC_reg+0x28>)
    74a6:	4798      	blx	r3
	return ((Tc *)hw)->COUNT32.CC[index].reg;
    74a8:	78fb      	ldrb	r3, [r7, #3]
    74aa:	687a      	ldr	r2, [r7, #4]
    74ac:	3306      	adds	r3, #6
    74ae:	009b      	lsls	r3, r3, #2
    74b0:	4413      	add	r3, r2
    74b2:	685b      	ldr	r3, [r3, #4]
}
    74b4:	4618      	mov	r0, r3
    74b6:	3708      	adds	r7, #8
    74b8:	46bd      	mov	sp, r7
    74ba:	bd80      	pop	{r7, pc}
    74bc:	00007111 	.word	0x00007111

000074c0 <_tc_timer_init>:
static inline uint8_t _get_hardware_offset(const void *const hw);
/**
 * \brief Initialize TC
 */
int32_t _tc_timer_init(struct _timer_device *const device, void *const hw)
{
    74c0:	b580      	push	{r7, lr}
    74c2:	b084      	sub	sp, #16
    74c4:	af00      	add	r7, sp, #0
    74c6:	6078      	str	r0, [r7, #4]
    74c8:	6039      	str	r1, [r7, #0]
	int8_t i = get_tc_index(hw);
    74ca:	6838      	ldr	r0, [r7, #0]
    74cc:	4b93      	ldr	r3, [pc, #588]	; (771c <_tc_timer_init+0x25c>)
    74ce:	4798      	blx	r3
    74d0:	4603      	mov	r3, r0
    74d2:	73fb      	strb	r3, [r7, #15]

	device->hw = hw;
    74d4:	687b      	ldr	r3, [r7, #4]
    74d6:	683a      	ldr	r2, [r7, #0]
    74d8:	60da      	str	r2, [r3, #12]
	ASSERT(ARRAY_SIZE(_tcs));
    74da:	22a4      	movs	r2, #164	; 0xa4
    74dc:	4990      	ldr	r1, [pc, #576]	; (7720 <_tc_timer_init+0x260>)
    74de:	2001      	movs	r0, #1
    74e0:	4b90      	ldr	r3, [pc, #576]	; (7724 <_tc_timer_init+0x264>)
    74e2:	4798      	blx	r3

	if (!hri_tc_is_syncing(hw, TC_SYNCBUSY_SWRST)) {
    74e4:	2101      	movs	r1, #1
    74e6:	6838      	ldr	r0, [r7, #0]
    74e8:	4b8f      	ldr	r3, [pc, #572]	; (7728 <_tc_timer_init+0x268>)
    74ea:	4798      	blx	r3
    74ec:	4603      	mov	r3, r0
    74ee:	f083 0301 	eor.w	r3, r3, #1
    74f2:	b2db      	uxtb	r3, r3
    74f4:	2b00      	cmp	r3, #0
    74f6:	d011      	beq.n	751c <_tc_timer_init+0x5c>
		if (hri_tc_get_CTRLA_reg(hw, TC_CTRLA_ENABLE)) {
    74f8:	2102      	movs	r1, #2
    74fa:	6838      	ldr	r0, [r7, #0]
    74fc:	4b8b      	ldr	r3, [pc, #556]	; (772c <_tc_timer_init+0x26c>)
    74fe:	4798      	blx	r3
    7500:	4603      	mov	r3, r0
    7502:	2b00      	cmp	r3, #0
    7504:	d006      	beq.n	7514 <_tc_timer_init+0x54>
			hri_tc_clear_CTRLA_ENABLE_bit(hw);
    7506:	6838      	ldr	r0, [r7, #0]
    7508:	4b89      	ldr	r3, [pc, #548]	; (7730 <_tc_timer_init+0x270>)
    750a:	4798      	blx	r3
			hri_tc_wait_for_sync(hw, TC_SYNCBUSY_ENABLE);
    750c:	2102      	movs	r1, #2
    750e:	6838      	ldr	r0, [r7, #0]
    7510:	4b88      	ldr	r3, [pc, #544]	; (7734 <_tc_timer_init+0x274>)
    7512:	4798      	blx	r3
		}
		hri_tc_write_CTRLA_reg(hw, TC_CTRLA_SWRST);
    7514:	2101      	movs	r1, #1
    7516:	6838      	ldr	r0, [r7, #0]
    7518:	4b87      	ldr	r3, [pc, #540]	; (7738 <_tc_timer_init+0x278>)
    751a:	4798      	blx	r3
	}
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST);
    751c:	2101      	movs	r1, #1
    751e:	6838      	ldr	r0, [r7, #0]
    7520:	4b84      	ldr	r3, [pc, #528]	; (7734 <_tc_timer_init+0x274>)
    7522:	4798      	blx	r3

	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    7524:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7528:	4984      	ldr	r1, [pc, #528]	; (773c <_tc_timer_init+0x27c>)
    752a:	4613      	mov	r3, r2
    752c:	009b      	lsls	r3, r3, #2
    752e:	4413      	add	r3, r2
    7530:	009b      	lsls	r3, r3, #2
    7532:	440b      	add	r3, r1
    7534:	3304      	adds	r3, #4
    7536:	681b      	ldr	r3, [r3, #0]
    7538:	4619      	mov	r1, r3
    753a:	6838      	ldr	r0, [r7, #0]
    753c:	4b7e      	ldr	r3, [pc, #504]	; (7738 <_tc_timer_init+0x278>)
    753e:	4798      	blx	r3
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    7540:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7544:	497d      	ldr	r1, [pc, #500]	; (773c <_tc_timer_init+0x27c>)
    7546:	4613      	mov	r3, r2
    7548:	009b      	lsls	r3, r3, #2
    754a:	4413      	add	r3, r2
    754c:	009b      	lsls	r3, r3, #2
    754e:	440b      	add	r3, r1
    7550:	330a      	adds	r3, #10
    7552:	781b      	ldrb	r3, [r3, #0]
    7554:	4619      	mov	r1, r3
    7556:	6838      	ldr	r0, [r7, #0]
    7558:	4b79      	ldr	r3, [pc, #484]	; (7740 <_tc_timer_init+0x280>)
    755a:	4798      	blx	r3
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    755c:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7560:	4976      	ldr	r1, [pc, #472]	; (773c <_tc_timer_init+0x27c>)
    7562:	4613      	mov	r3, r2
    7564:	009b      	lsls	r3, r3, #2
    7566:	4413      	add	r3, r2
    7568:	009b      	lsls	r3, r3, #2
    756a:	440b      	add	r3, r1
    756c:	3308      	adds	r3, #8
    756e:	881b      	ldrh	r3, [r3, #0]
    7570:	4619      	mov	r1, r3
    7572:	6838      	ldr	r0, [r7, #0]
    7574:	4b73      	ldr	r3, [pc, #460]	; (7744 <_tc_timer_init+0x284>)
    7576:	4798      	blx	r3
	hri_tc_write_WAVE_reg(hw, TC_WAVE_WAVEGEN_MFRQ);
    7578:	2101      	movs	r1, #1
    757a:	6838      	ldr	r0, [r7, #0]
    757c:	4b72      	ldr	r3, [pc, #456]	; (7748 <_tc_timer_init+0x288>)
    757e:	4798      	blx	r3

	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    7580:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7584:	496d      	ldr	r1, [pc, #436]	; (773c <_tc_timer_init+0x27c>)
    7586:	4613      	mov	r3, r2
    7588:	009b      	lsls	r3, r3, #2
    758a:	4413      	add	r3, r2
    758c:	009b      	lsls	r3, r3, #2
    758e:	440b      	add	r3, r1
    7590:	3304      	adds	r3, #4
    7592:	681b      	ldr	r3, [r3, #0]
    7594:	f003 030c 	and.w	r3, r3, #12
    7598:	2b08      	cmp	r3, #8
    759a:	d11e      	bne.n	75da <_tc_timer_init+0x11a>
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    759c:	f997 200f 	ldrsb.w	r2, [r7, #15]
    75a0:	4966      	ldr	r1, [pc, #408]	; (773c <_tc_timer_init+0x27c>)
    75a2:	4613      	mov	r3, r2
    75a4:	009b      	lsls	r3, r3, #2
    75a6:	4413      	add	r3, r2
    75a8:	009b      	lsls	r3, r3, #2
    75aa:	440b      	add	r3, r1
    75ac:	330c      	adds	r3, #12
    75ae:	681b      	ldr	r3, [r3, #0]
    75b0:	461a      	mov	r2, r3
    75b2:	2100      	movs	r1, #0
    75b4:	6838      	ldr	r0, [r7, #0]
    75b6:	4b65      	ldr	r3, [pc, #404]	; (774c <_tc_timer_init+0x28c>)
    75b8:	4798      	blx	r3
		hri_tccount32_write_CC_reg(hw, 1, _tcs[i].cc1);
    75ba:	f997 200f 	ldrsb.w	r2, [r7, #15]
    75be:	495f      	ldr	r1, [pc, #380]	; (773c <_tc_timer_init+0x27c>)
    75c0:	4613      	mov	r3, r2
    75c2:	009b      	lsls	r3, r3, #2
    75c4:	4413      	add	r3, r2
    75c6:	009b      	lsls	r3, r3, #2
    75c8:	440b      	add	r3, r1
    75ca:	3310      	adds	r3, #16
    75cc:	681b      	ldr	r3, [r3, #0]
    75ce:	461a      	mov	r2, r3
    75d0:	2101      	movs	r1, #1
    75d2:	6838      	ldr	r0, [r7, #0]
    75d4:	4b5d      	ldr	r3, [pc, #372]	; (774c <_tc_timer_init+0x28c>)
    75d6:	4798      	blx	r3
    75d8:	e06a      	b.n	76b0 <_tc_timer_init+0x1f0>

	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    75da:	f997 200f 	ldrsb.w	r2, [r7, #15]
    75de:	4957      	ldr	r1, [pc, #348]	; (773c <_tc_timer_init+0x27c>)
    75e0:	4613      	mov	r3, r2
    75e2:	009b      	lsls	r3, r3, #2
    75e4:	4413      	add	r3, r2
    75e6:	009b      	lsls	r3, r3, #2
    75e8:	440b      	add	r3, r1
    75ea:	3304      	adds	r3, #4
    75ec:	681b      	ldr	r3, [r3, #0]
    75ee:	f003 030c 	and.w	r3, r3, #12
    75f2:	2b00      	cmp	r3, #0
    75f4:	d120      	bne.n	7638 <_tc_timer_init+0x178>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)_tcs[i].cc0);
    75f6:	f997 200f 	ldrsb.w	r2, [r7, #15]
    75fa:	4950      	ldr	r1, [pc, #320]	; (773c <_tc_timer_init+0x27c>)
    75fc:	4613      	mov	r3, r2
    75fe:	009b      	lsls	r3, r3, #2
    7600:	4413      	add	r3, r2
    7602:	009b      	lsls	r3, r3, #2
    7604:	440b      	add	r3, r1
    7606:	330c      	adds	r3, #12
    7608:	681b      	ldr	r3, [r3, #0]
    760a:	b29b      	uxth	r3, r3
    760c:	461a      	mov	r2, r3
    760e:	2100      	movs	r1, #0
    7610:	6838      	ldr	r0, [r7, #0]
    7612:	4b4f      	ldr	r3, [pc, #316]	; (7750 <_tc_timer_init+0x290>)
    7614:	4798      	blx	r3
		hri_tccount16_write_CC_reg(hw, 1, (uint16_t)_tcs[i].cc1);
    7616:	f997 200f 	ldrsb.w	r2, [r7, #15]
    761a:	4948      	ldr	r1, [pc, #288]	; (773c <_tc_timer_init+0x27c>)
    761c:	4613      	mov	r3, r2
    761e:	009b      	lsls	r3, r3, #2
    7620:	4413      	add	r3, r2
    7622:	009b      	lsls	r3, r3, #2
    7624:	440b      	add	r3, r1
    7626:	3310      	adds	r3, #16
    7628:	681b      	ldr	r3, [r3, #0]
    762a:	b29b      	uxth	r3, r3
    762c:	461a      	mov	r2, r3
    762e:	2101      	movs	r1, #1
    7630:	6838      	ldr	r0, [r7, #0]
    7632:	4b47      	ldr	r3, [pc, #284]	; (7750 <_tc_timer_init+0x290>)
    7634:	4798      	blx	r3
    7636:	e03b      	b.n	76b0 <_tc_timer_init+0x1f0>

	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT8) {
    7638:	f997 200f 	ldrsb.w	r2, [r7, #15]
    763c:	493f      	ldr	r1, [pc, #252]	; (773c <_tc_timer_init+0x27c>)
    763e:	4613      	mov	r3, r2
    7640:	009b      	lsls	r3, r3, #2
    7642:	4413      	add	r3, r2
    7644:	009b      	lsls	r3, r3, #2
    7646:	440b      	add	r3, r1
    7648:	3304      	adds	r3, #4
    764a:	681b      	ldr	r3, [r3, #0]
    764c:	f003 030c 	and.w	r3, r3, #12
    7650:	2b04      	cmp	r3, #4
    7652:	d12d      	bne.n	76b0 <_tc_timer_init+0x1f0>
		hri_tccount8_write_CC_reg(hw, 0, (uint8_t)_tcs[i].cc0);
    7654:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7658:	4938      	ldr	r1, [pc, #224]	; (773c <_tc_timer_init+0x27c>)
    765a:	4613      	mov	r3, r2
    765c:	009b      	lsls	r3, r3, #2
    765e:	4413      	add	r3, r2
    7660:	009b      	lsls	r3, r3, #2
    7662:	440b      	add	r3, r1
    7664:	330c      	adds	r3, #12
    7666:	681b      	ldr	r3, [r3, #0]
    7668:	b2db      	uxtb	r3, r3
    766a:	461a      	mov	r2, r3
    766c:	2100      	movs	r1, #0
    766e:	6838      	ldr	r0, [r7, #0]
    7670:	4b38      	ldr	r3, [pc, #224]	; (7754 <_tc_timer_init+0x294>)
    7672:	4798      	blx	r3
		hri_tccount8_write_CC_reg(hw, 1, (uint8_t)_tcs[i].cc1);
    7674:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7678:	4930      	ldr	r1, [pc, #192]	; (773c <_tc_timer_init+0x27c>)
    767a:	4613      	mov	r3, r2
    767c:	009b      	lsls	r3, r3, #2
    767e:	4413      	add	r3, r2
    7680:	009b      	lsls	r3, r3, #2
    7682:	440b      	add	r3, r1
    7684:	3310      	adds	r3, #16
    7686:	681b      	ldr	r3, [r3, #0]
    7688:	b2db      	uxtb	r3, r3
    768a:	461a      	mov	r2, r3
    768c:	2101      	movs	r1, #1
    768e:	6838      	ldr	r0, [r7, #0]
    7690:	4b30      	ldr	r3, [pc, #192]	; (7754 <_tc_timer_init+0x294>)
    7692:	4798      	blx	r3
		hri_tccount8_write_PER_reg(hw, _tcs[i].per);
    7694:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7698:	4928      	ldr	r1, [pc, #160]	; (773c <_tc_timer_init+0x27c>)
    769a:	4613      	mov	r3, r2
    769c:	009b      	lsls	r3, r3, #2
    769e:	4413      	add	r3, r2
    76a0:	009b      	lsls	r3, r3, #2
    76a2:	440b      	add	r3, r1
    76a4:	330b      	adds	r3, #11
    76a6:	781b      	ldrb	r3, [r3, #0]
    76a8:	4619      	mov	r1, r3
    76aa:	6838      	ldr	r0, [r7, #0]
    76ac:	4b2a      	ldr	r3, [pc, #168]	; (7758 <_tc_timer_init+0x298>)
    76ae:	4798      	blx	r3
	}
	hri_tc_set_INTEN_OVF_bit(hw);
    76b0:	6838      	ldr	r0, [r7, #0]
    76b2:	4b2a      	ldr	r3, [pc, #168]	; (775c <_tc_timer_init+0x29c>)
    76b4:	4798      	blx	r3

	_tc_init_irq_param(hw, (void *)device);
    76b6:	6879      	ldr	r1, [r7, #4]
    76b8:	6838      	ldr	r0, [r7, #0]
    76ba:	4b29      	ldr	r3, [pc, #164]	; (7760 <_tc_timer_init+0x2a0>)
    76bc:	4798      	blx	r3
	NVIC_DisableIRQ(_tcs[i].irq);
    76be:	f997 200f 	ldrsb.w	r2, [r7, #15]
    76c2:	491e      	ldr	r1, [pc, #120]	; (773c <_tc_timer_init+0x27c>)
    76c4:	4613      	mov	r3, r2
    76c6:	009b      	lsls	r3, r3, #2
    76c8:	4413      	add	r3, r2
    76ca:	009b      	lsls	r3, r3, #2
    76cc:	440b      	add	r3, r1
    76ce:	3302      	adds	r3, #2
    76d0:	f9b3 3000 	ldrsh.w	r3, [r3]
    76d4:	4618      	mov	r0, r3
    76d6:	4b23      	ldr	r3, [pc, #140]	; (7764 <_tc_timer_init+0x2a4>)
    76d8:	4798      	blx	r3
	NVIC_ClearPendingIRQ(_tcs[i].irq);
    76da:	f997 200f 	ldrsb.w	r2, [r7, #15]
    76de:	4917      	ldr	r1, [pc, #92]	; (773c <_tc_timer_init+0x27c>)
    76e0:	4613      	mov	r3, r2
    76e2:	009b      	lsls	r3, r3, #2
    76e4:	4413      	add	r3, r2
    76e6:	009b      	lsls	r3, r3, #2
    76e8:	440b      	add	r3, r1
    76ea:	3302      	adds	r3, #2
    76ec:	f9b3 3000 	ldrsh.w	r3, [r3]
    76f0:	4618      	mov	r0, r3
    76f2:	4b1d      	ldr	r3, [pc, #116]	; (7768 <_tc_timer_init+0x2a8>)
    76f4:	4798      	blx	r3
	NVIC_EnableIRQ(_tcs[i].irq);
    76f6:	f997 200f 	ldrsb.w	r2, [r7, #15]
    76fa:	4910      	ldr	r1, [pc, #64]	; (773c <_tc_timer_init+0x27c>)
    76fc:	4613      	mov	r3, r2
    76fe:	009b      	lsls	r3, r3, #2
    7700:	4413      	add	r3, r2
    7702:	009b      	lsls	r3, r3, #2
    7704:	440b      	add	r3, r1
    7706:	3302      	adds	r3, #2
    7708:	f9b3 3000 	ldrsh.w	r3, [r3]
    770c:	4618      	mov	r0, r3
    770e:	4b17      	ldr	r3, [pc, #92]	; (776c <_tc_timer_init+0x2ac>)
    7710:	4798      	blx	r3

	return ERR_NONE;
    7712:	2300      	movs	r3, #0
}
    7714:	4618      	mov	r0, r3
    7716:	3710      	adds	r7, #16
    7718:	46bd      	mov	sp, r7
    771a:	bd80      	pop	{r7, pc}
    771c:	00007d11 	.word	0x00007d11
    7720:	00013540 	.word	0x00013540
    7724:	00002dc9 	.word	0x00002dc9
    7728:	00007135 	.word	0x00007135
    772c:	000072d5 	.word	0x000072d5
    7730:	00007285 	.word	0x00007285
    7734:	00007111 	.word	0x00007111
    7738:	00007305 	.word	0x00007305
    773c:	20000110 	.word	0x20000110
    7740:	00007365 	.word	0x00007365
    7744:	00007329 	.word	0x00007329
    7748:	00007347 	.word	0x00007347
    774c:	00007465 	.word	0x00007465
    7750:	00007401 	.word	0x00007401
    7754:	000073d1 	.word	0x000073d1
    7758:	00007385 	.word	0x00007385
    775c:	000071b9 	.word	0x000071b9
    7760:	00007d79 	.word	0x00007d79
    7764:	00007091 	.word	0x00007091
    7768:	000070d5 	.word	0x000070d5
    776c:	00007055 	.word	0x00007055

00007770 <_pwm_init>:
/**
 * \brief Initialize TC for PWM mode
 */
int32_t _pwm_init(struct _pwm_device *const device, void *const hw)
{
    7770:	b580      	push	{r7, lr}
    7772:	b084      	sub	sp, #16
    7774:	af00      	add	r7, sp, #0
    7776:	6078      	str	r0, [r7, #4]
    7778:	6039      	str	r1, [r7, #0]
	int8_t i   = get_tc_index(hw);
    777a:	6838      	ldr	r0, [r7, #0]
    777c:	4b73      	ldr	r3, [pc, #460]	; (794c <_pwm_init+0x1dc>)
    777e:	4798      	blx	r3
    7780:	4603      	mov	r3, r0
    7782:	73fb      	strb	r3, [r7, #15]
	device->hw = hw;
    7784:	687b      	ldr	r3, [r7, #4]
    7786:	683a      	ldr	r2, [r7, #0]
    7788:	611a      	str	r2, [r3, #16]

	if (!hri_tc_is_syncing(hw, TC_SYNCBUSY_SWRST)) {
    778a:	2101      	movs	r1, #1
    778c:	6838      	ldr	r0, [r7, #0]
    778e:	4b70      	ldr	r3, [pc, #448]	; (7950 <_pwm_init+0x1e0>)
    7790:	4798      	blx	r3
    7792:	4603      	mov	r3, r0
    7794:	f083 0301 	eor.w	r3, r3, #1
    7798:	b2db      	uxtb	r3, r3
    779a:	2b00      	cmp	r3, #0
    779c:	d011      	beq.n	77c2 <_pwm_init+0x52>
		if (hri_tc_get_CTRLA_reg(hw, TC_CTRLA_ENABLE)) {
    779e:	2102      	movs	r1, #2
    77a0:	6838      	ldr	r0, [r7, #0]
    77a2:	4b6c      	ldr	r3, [pc, #432]	; (7954 <_pwm_init+0x1e4>)
    77a4:	4798      	blx	r3
    77a6:	4603      	mov	r3, r0
    77a8:	2b00      	cmp	r3, #0
    77aa:	d006      	beq.n	77ba <_pwm_init+0x4a>
			hri_tc_clear_CTRLA_ENABLE_bit(hw);
    77ac:	6838      	ldr	r0, [r7, #0]
    77ae:	4b6a      	ldr	r3, [pc, #424]	; (7958 <_pwm_init+0x1e8>)
    77b0:	4798      	blx	r3
			hri_tc_wait_for_sync(hw, TC_SYNCBUSY_ENABLE);
    77b2:	2102      	movs	r1, #2
    77b4:	6838      	ldr	r0, [r7, #0]
    77b6:	4b69      	ldr	r3, [pc, #420]	; (795c <_pwm_init+0x1ec>)
    77b8:	4798      	blx	r3
		}
		hri_tc_write_CTRLA_reg(hw, TC_CTRLA_SWRST);
    77ba:	2101      	movs	r1, #1
    77bc:	6838      	ldr	r0, [r7, #0]
    77be:	4b68      	ldr	r3, [pc, #416]	; (7960 <_pwm_init+0x1f0>)
    77c0:	4798      	blx	r3
	}
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST);
    77c2:	2101      	movs	r1, #1
    77c4:	6838      	ldr	r0, [r7, #0]
    77c6:	4b65      	ldr	r3, [pc, #404]	; (795c <_pwm_init+0x1ec>)
    77c8:	4798      	blx	r3

	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    77ca:	f997 200f 	ldrsb.w	r2, [r7, #15]
    77ce:	4965      	ldr	r1, [pc, #404]	; (7964 <_pwm_init+0x1f4>)
    77d0:	4613      	mov	r3, r2
    77d2:	009b      	lsls	r3, r3, #2
    77d4:	4413      	add	r3, r2
    77d6:	009b      	lsls	r3, r3, #2
    77d8:	440b      	add	r3, r1
    77da:	3304      	adds	r3, #4
    77dc:	681b      	ldr	r3, [r3, #0]
    77de:	4619      	mov	r1, r3
    77e0:	6838      	ldr	r0, [r7, #0]
    77e2:	4b5f      	ldr	r3, [pc, #380]	; (7960 <_pwm_init+0x1f0>)
    77e4:	4798      	blx	r3
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    77e6:	f997 200f 	ldrsb.w	r2, [r7, #15]
    77ea:	495e      	ldr	r1, [pc, #376]	; (7964 <_pwm_init+0x1f4>)
    77ec:	4613      	mov	r3, r2
    77ee:	009b      	lsls	r3, r3, #2
    77f0:	4413      	add	r3, r2
    77f2:	009b      	lsls	r3, r3, #2
    77f4:	440b      	add	r3, r1
    77f6:	330a      	adds	r3, #10
    77f8:	781b      	ldrb	r3, [r3, #0]
    77fa:	4619      	mov	r1, r3
    77fc:	6838      	ldr	r0, [r7, #0]
    77fe:	4b5a      	ldr	r3, [pc, #360]	; (7968 <_pwm_init+0x1f8>)
    7800:	4798      	blx	r3
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    7802:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7806:	4957      	ldr	r1, [pc, #348]	; (7964 <_pwm_init+0x1f4>)
    7808:	4613      	mov	r3, r2
    780a:	009b      	lsls	r3, r3, #2
    780c:	4413      	add	r3, r2
    780e:	009b      	lsls	r3, r3, #2
    7810:	440b      	add	r3, r1
    7812:	3308      	adds	r3, #8
    7814:	881b      	ldrh	r3, [r3, #0]
    7816:	4619      	mov	r1, r3
    7818:	6838      	ldr	r0, [r7, #0]
    781a:	4b54      	ldr	r3, [pc, #336]	; (796c <_pwm_init+0x1fc>)
    781c:	4798      	blx	r3
	hri_tc_write_WAVE_reg(hw, TC_WAVE_WAVEGEN_MPWM_Val);
    781e:	2103      	movs	r1, #3
    7820:	6838      	ldr	r0, [r7, #0]
    7822:	4b53      	ldr	r3, [pc, #332]	; (7970 <_pwm_init+0x200>)
    7824:	4798      	blx	r3

	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    7826:	f997 200f 	ldrsb.w	r2, [r7, #15]
    782a:	494e      	ldr	r1, [pc, #312]	; (7964 <_pwm_init+0x1f4>)
    782c:	4613      	mov	r3, r2
    782e:	009b      	lsls	r3, r3, #2
    7830:	4413      	add	r3, r2
    7832:	009b      	lsls	r3, r3, #2
    7834:	440b      	add	r3, r1
    7836:	3304      	adds	r3, #4
    7838:	681b      	ldr	r3, [r3, #0]
    783a:	f003 030c 	and.w	r3, r3, #12
    783e:	2b08      	cmp	r3, #8
    7840:	d11e      	bne.n	7880 <_pwm_init+0x110>
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    7842:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7846:	4947      	ldr	r1, [pc, #284]	; (7964 <_pwm_init+0x1f4>)
    7848:	4613      	mov	r3, r2
    784a:	009b      	lsls	r3, r3, #2
    784c:	4413      	add	r3, r2
    784e:	009b      	lsls	r3, r3, #2
    7850:	440b      	add	r3, r1
    7852:	330c      	adds	r3, #12
    7854:	681b      	ldr	r3, [r3, #0]
    7856:	461a      	mov	r2, r3
    7858:	2100      	movs	r1, #0
    785a:	6838      	ldr	r0, [r7, #0]
    785c:	4b45      	ldr	r3, [pc, #276]	; (7974 <_pwm_init+0x204>)
    785e:	4798      	blx	r3
		hri_tccount32_write_CC_reg(hw, 1, _tcs[i].cc1);
    7860:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7864:	493f      	ldr	r1, [pc, #252]	; (7964 <_pwm_init+0x1f4>)
    7866:	4613      	mov	r3, r2
    7868:	009b      	lsls	r3, r3, #2
    786a:	4413      	add	r3, r2
    786c:	009b      	lsls	r3, r3, #2
    786e:	440b      	add	r3, r1
    7870:	3310      	adds	r3, #16
    7872:	681b      	ldr	r3, [r3, #0]
    7874:	461a      	mov	r2, r3
    7876:	2101      	movs	r1, #1
    7878:	6838      	ldr	r0, [r7, #0]
    787a:	4b3e      	ldr	r3, [pc, #248]	; (7974 <_pwm_init+0x204>)
    787c:	4798      	blx	r3
    787e:	e031      	b.n	78e4 <_pwm_init+0x174>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    7880:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7884:	4937      	ldr	r1, [pc, #220]	; (7964 <_pwm_init+0x1f4>)
    7886:	4613      	mov	r3, r2
    7888:	009b      	lsls	r3, r3, #2
    788a:	4413      	add	r3, r2
    788c:	009b      	lsls	r3, r3, #2
    788e:	440b      	add	r3, r1
    7890:	3304      	adds	r3, #4
    7892:	681b      	ldr	r3, [r3, #0]
    7894:	f003 030c 	and.w	r3, r3, #12
    7898:	2b00      	cmp	r3, #0
    789a:	d120      	bne.n	78de <_pwm_init+0x16e>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)_tcs[i].cc0);
    789c:	f997 200f 	ldrsb.w	r2, [r7, #15]
    78a0:	4930      	ldr	r1, [pc, #192]	; (7964 <_pwm_init+0x1f4>)
    78a2:	4613      	mov	r3, r2
    78a4:	009b      	lsls	r3, r3, #2
    78a6:	4413      	add	r3, r2
    78a8:	009b      	lsls	r3, r3, #2
    78aa:	440b      	add	r3, r1
    78ac:	330c      	adds	r3, #12
    78ae:	681b      	ldr	r3, [r3, #0]
    78b0:	b29b      	uxth	r3, r3
    78b2:	461a      	mov	r2, r3
    78b4:	2100      	movs	r1, #0
    78b6:	6838      	ldr	r0, [r7, #0]
    78b8:	4b2f      	ldr	r3, [pc, #188]	; (7978 <_pwm_init+0x208>)
    78ba:	4798      	blx	r3
		hri_tccount16_write_CC_reg(hw, 1, (uint16_t)_tcs[i].cc1);
    78bc:	f997 200f 	ldrsb.w	r2, [r7, #15]
    78c0:	4928      	ldr	r1, [pc, #160]	; (7964 <_pwm_init+0x1f4>)
    78c2:	4613      	mov	r3, r2
    78c4:	009b      	lsls	r3, r3, #2
    78c6:	4413      	add	r3, r2
    78c8:	009b      	lsls	r3, r3, #2
    78ca:	440b      	add	r3, r1
    78cc:	3310      	adds	r3, #16
    78ce:	681b      	ldr	r3, [r3, #0]
    78d0:	b29b      	uxth	r3, r3
    78d2:	461a      	mov	r2, r3
    78d4:	2101      	movs	r1, #1
    78d6:	6838      	ldr	r0, [r7, #0]
    78d8:	4b27      	ldr	r3, [pc, #156]	; (7978 <_pwm_init+0x208>)
    78da:	4798      	blx	r3
    78dc:	e002      	b.n	78e4 <_pwm_init+0x174>
	} else {
		/* 8-bit resolution is not accepted by duty cycle control */
		return -1;
    78de:	f04f 33ff 	mov.w	r3, #4294967295
    78e2:	e02e      	b.n	7942 <_pwm_init+0x1d2>
	}

	_tc_init_irq_param(hw, (void *)device);
    78e4:	6879      	ldr	r1, [r7, #4]
    78e6:	6838      	ldr	r0, [r7, #0]
    78e8:	4b24      	ldr	r3, [pc, #144]	; (797c <_pwm_init+0x20c>)
    78ea:	4798      	blx	r3
	NVIC_DisableIRQ(_tcs[i].irq);
    78ec:	f997 200f 	ldrsb.w	r2, [r7, #15]
    78f0:	491c      	ldr	r1, [pc, #112]	; (7964 <_pwm_init+0x1f4>)
    78f2:	4613      	mov	r3, r2
    78f4:	009b      	lsls	r3, r3, #2
    78f6:	4413      	add	r3, r2
    78f8:	009b      	lsls	r3, r3, #2
    78fa:	440b      	add	r3, r1
    78fc:	3302      	adds	r3, #2
    78fe:	f9b3 3000 	ldrsh.w	r3, [r3]
    7902:	4618      	mov	r0, r3
    7904:	4b1e      	ldr	r3, [pc, #120]	; (7980 <_pwm_init+0x210>)
    7906:	4798      	blx	r3
	NVIC_ClearPendingIRQ(_tcs[i].irq);
    7908:	f997 200f 	ldrsb.w	r2, [r7, #15]
    790c:	4915      	ldr	r1, [pc, #84]	; (7964 <_pwm_init+0x1f4>)
    790e:	4613      	mov	r3, r2
    7910:	009b      	lsls	r3, r3, #2
    7912:	4413      	add	r3, r2
    7914:	009b      	lsls	r3, r3, #2
    7916:	440b      	add	r3, r1
    7918:	3302      	adds	r3, #2
    791a:	f9b3 3000 	ldrsh.w	r3, [r3]
    791e:	4618      	mov	r0, r3
    7920:	4b18      	ldr	r3, [pc, #96]	; (7984 <_pwm_init+0x214>)
    7922:	4798      	blx	r3
	NVIC_EnableIRQ(_tcs[i].irq);
    7924:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7928:	490e      	ldr	r1, [pc, #56]	; (7964 <_pwm_init+0x1f4>)
    792a:	4613      	mov	r3, r2
    792c:	009b      	lsls	r3, r3, #2
    792e:	4413      	add	r3, r2
    7930:	009b      	lsls	r3, r3, #2
    7932:	440b      	add	r3, r1
    7934:	3302      	adds	r3, #2
    7936:	f9b3 3000 	ldrsh.w	r3, [r3]
    793a:	4618      	mov	r0, r3
    793c:	4b12      	ldr	r3, [pc, #72]	; (7988 <_pwm_init+0x218>)
    793e:	4798      	blx	r3

	return 0;
    7940:	2300      	movs	r3, #0
}
    7942:	4618      	mov	r0, r3
    7944:	3710      	adds	r7, #16
    7946:	46bd      	mov	sp, r7
    7948:	bd80      	pop	{r7, pc}
    794a:	bf00      	nop
    794c:	00007d11 	.word	0x00007d11
    7950:	00007135 	.word	0x00007135
    7954:	000072d5 	.word	0x000072d5
    7958:	00007285 	.word	0x00007285
    795c:	00007111 	.word	0x00007111
    7960:	00007305 	.word	0x00007305
    7964:	20000110 	.word	0x20000110
    7968:	00007365 	.word	0x00007365
    796c:	00007329 	.word	0x00007329
    7970:	00007347 	.word	0x00007347
    7974:	00007465 	.word	0x00007465
    7978:	00007401 	.word	0x00007401
    797c:	00007d79 	.word	0x00007d79
    7980:	00007091 	.word	0x00007091
    7984:	000070d5 	.word	0x000070d5
    7988:	00007055 	.word	0x00007055

0000798c <_tc_timer_deinit>:
/**
 * \brief De-initialize TC
 */
void _tc_timer_deinit(struct _timer_device *const device)
{
    798c:	b580      	push	{r7, lr}
    798e:	b084      	sub	sp, #16
    7990:	af00      	add	r7, sp, #0
    7992:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    7994:	687b      	ldr	r3, [r7, #4]
    7996:	68db      	ldr	r3, [r3, #12]
    7998:	60fb      	str	r3, [r7, #12]
	int8_t      i  = get_tc_index(hw);
    799a:	68f8      	ldr	r0, [r7, #12]
    799c:	4b10      	ldr	r3, [pc, #64]	; (79e0 <_tc_timer_deinit+0x54>)
    799e:	4798      	blx	r3
    79a0:	4603      	mov	r3, r0
    79a2:	72fb      	strb	r3, [r7, #11]
	ASSERT(ARRAY_SIZE(_tcs));
    79a4:	22f9      	movs	r2, #249	; 0xf9
    79a6:	490f      	ldr	r1, [pc, #60]	; (79e4 <_tc_timer_deinit+0x58>)
    79a8:	2001      	movs	r0, #1
    79aa:	4b0f      	ldr	r3, [pc, #60]	; (79e8 <_tc_timer_deinit+0x5c>)
    79ac:	4798      	blx	r3

	NVIC_DisableIRQ(_tcs[i].irq);
    79ae:	f997 200b 	ldrsb.w	r2, [r7, #11]
    79b2:	490e      	ldr	r1, [pc, #56]	; (79ec <_tc_timer_deinit+0x60>)
    79b4:	4613      	mov	r3, r2
    79b6:	009b      	lsls	r3, r3, #2
    79b8:	4413      	add	r3, r2
    79ba:	009b      	lsls	r3, r3, #2
    79bc:	440b      	add	r3, r1
    79be:	3302      	adds	r3, #2
    79c0:	f9b3 3000 	ldrsh.w	r3, [r3]
    79c4:	4618      	mov	r0, r3
    79c6:	4b0a      	ldr	r3, [pc, #40]	; (79f0 <_tc_timer_deinit+0x64>)
    79c8:	4798      	blx	r3

	hri_tc_clear_CTRLA_ENABLE_bit(hw);
    79ca:	68f8      	ldr	r0, [r7, #12]
    79cc:	4b09      	ldr	r3, [pc, #36]	; (79f4 <_tc_timer_deinit+0x68>)
    79ce:	4798      	blx	r3
	hri_tc_set_CTRLA_SWRST_bit(hw);
    79d0:	68f8      	ldr	r0, [r7, #12]
    79d2:	4b09      	ldr	r3, [pc, #36]	; (79f8 <_tc_timer_deinit+0x6c>)
    79d4:	4798      	blx	r3
}
    79d6:	bf00      	nop
    79d8:	3710      	adds	r7, #16
    79da:	46bd      	mov	sp, r7
    79dc:	bd80      	pop	{r7, pc}
    79de:	bf00      	nop
    79e0:	00007d11 	.word	0x00007d11
    79e4:	00013540 	.word	0x00013540
    79e8:	00002dc9 	.word	0x00002dc9
    79ec:	20000110 	.word	0x20000110
    79f0:	00007091 	.word	0x00007091
    79f4:	00007285 	.word	0x00007285
    79f8:	000071fd 	.word	0x000071fd

000079fc <_tc_timer_start>:
}
/**
 * \brief Start hardware timer
 */
void _tc_timer_start(struct _timer_device *const device)
{
    79fc:	b580      	push	{r7, lr}
    79fe:	b082      	sub	sp, #8
    7a00:	af00      	add	r7, sp, #0
    7a02:	6078      	str	r0, [r7, #4]
	hri_tc_set_CTRLA_ENABLE_bit(device->hw);
    7a04:	687b      	ldr	r3, [r7, #4]
    7a06:	68db      	ldr	r3, [r3, #12]
    7a08:	4618      	mov	r0, r3
    7a0a:	4b03      	ldr	r3, [pc, #12]	; (7a18 <_tc_timer_start+0x1c>)
    7a0c:	4798      	blx	r3
}
    7a0e:	bf00      	nop
    7a10:	3708      	adds	r7, #8
    7a12:	46bd      	mov	sp, r7
    7a14:	bd80      	pop	{r7, pc}
    7a16:	bf00      	nop
    7a18:	00007225 	.word	0x00007225

00007a1c <_tc_timer_stop>:
}
/**
 * \brief Stop hardware timer
 */
void _tc_timer_stop(struct _timer_device *const device)
{
    7a1c:	b580      	push	{r7, lr}
    7a1e:	b082      	sub	sp, #8
    7a20:	af00      	add	r7, sp, #0
    7a22:	6078      	str	r0, [r7, #4]
	hri_tc_clear_CTRLA_ENABLE_bit(device->hw);
    7a24:	687b      	ldr	r3, [r7, #4]
    7a26:	68db      	ldr	r3, [r3, #12]
    7a28:	4618      	mov	r0, r3
    7a2a:	4b03      	ldr	r3, [pc, #12]	; (7a38 <_tc_timer_stop+0x1c>)
    7a2c:	4798      	blx	r3
}
    7a2e:	bf00      	nop
    7a30:	3708      	adds	r7, #8
    7a32:	46bd      	mov	sp, r7
    7a34:	bd80      	pop	{r7, pc}
    7a36:	bf00      	nop
    7a38:	00007285 	.word	0x00007285

00007a3c <_tc_timer_set_period>:
}
/**
 * \brief Set timer period
 */
void _tc_timer_set_period(struct _timer_device *const device, const uint32_t clock_cycles)
{
    7a3c:	b580      	push	{r7, lr}
    7a3e:	b084      	sub	sp, #16
    7a40:	af00      	add	r7, sp, #0
    7a42:	6078      	str	r0, [r7, #4]
    7a44:	6039      	str	r1, [r7, #0]
	void *const hw = device->hw;
    7a46:	687b      	ldr	r3, [r7, #4]
    7a48:	68db      	ldr	r3, [r3, #12]
    7a4a:	60fb      	str	r3, [r7, #12]

	if (TC_CTRLA_MODE_COUNT32_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    7a4c:	68f8      	ldr	r0, [r7, #12]
    7a4e:	4b14      	ldr	r3, [pc, #80]	; (7aa0 <_tc_timer_set_period+0x64>)
    7a50:	4798      	blx	r3
    7a52:	4603      	mov	r3, r0
    7a54:	2b02      	cmp	r3, #2
    7a56:	d105      	bne.n	7a64 <_tc_timer_set_period+0x28>
		hri_tccount32_write_CC_reg(hw, 0, clock_cycles);
    7a58:	683a      	ldr	r2, [r7, #0]
    7a5a:	2100      	movs	r1, #0
    7a5c:	68f8      	ldr	r0, [r7, #12]
    7a5e:	4b11      	ldr	r3, [pc, #68]	; (7aa4 <_tc_timer_set_period+0x68>)
    7a60:	4798      	blx	r3
	} else if (TC_CTRLA_MODE_COUNT16_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)clock_cycles);
	} else if (TC_CTRLA_MODE_COUNT8_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
		hri_tccount8_write_PER_reg(hw, clock_cycles);
	}
}
    7a62:	e019      	b.n	7a98 <_tc_timer_set_period+0x5c>
	} else if (TC_CTRLA_MODE_COUNT16_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    7a64:	68f8      	ldr	r0, [r7, #12]
    7a66:	4b0e      	ldr	r3, [pc, #56]	; (7aa0 <_tc_timer_set_period+0x64>)
    7a68:	4798      	blx	r3
    7a6a:	4603      	mov	r3, r0
    7a6c:	2b00      	cmp	r3, #0
    7a6e:	d107      	bne.n	7a80 <_tc_timer_set_period+0x44>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)clock_cycles);
    7a70:	683b      	ldr	r3, [r7, #0]
    7a72:	b29b      	uxth	r3, r3
    7a74:	461a      	mov	r2, r3
    7a76:	2100      	movs	r1, #0
    7a78:	68f8      	ldr	r0, [r7, #12]
    7a7a:	4b0b      	ldr	r3, [pc, #44]	; (7aa8 <_tc_timer_set_period+0x6c>)
    7a7c:	4798      	blx	r3
}
    7a7e:	e00b      	b.n	7a98 <_tc_timer_set_period+0x5c>
	} else if (TC_CTRLA_MODE_COUNT8_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    7a80:	68f8      	ldr	r0, [r7, #12]
    7a82:	4b07      	ldr	r3, [pc, #28]	; (7aa0 <_tc_timer_set_period+0x64>)
    7a84:	4798      	blx	r3
    7a86:	4603      	mov	r3, r0
    7a88:	2b01      	cmp	r3, #1
    7a8a:	d105      	bne.n	7a98 <_tc_timer_set_period+0x5c>
		hri_tccount8_write_PER_reg(hw, clock_cycles);
    7a8c:	683b      	ldr	r3, [r7, #0]
    7a8e:	b2db      	uxtb	r3, r3
    7a90:	4619      	mov	r1, r3
    7a92:	68f8      	ldr	r0, [r7, #12]
    7a94:	4b05      	ldr	r3, [pc, #20]	; (7aac <_tc_timer_set_period+0x70>)
    7a96:	4798      	blx	r3
}
    7a98:	bf00      	nop
    7a9a:	3710      	adds	r7, #16
    7a9c:	46bd      	mov	sp, r7
    7a9e:	bd80      	pop	{r7, pc}
    7aa0:	000072ad 	.word	0x000072ad
    7aa4:	00007465 	.word	0x00007465
    7aa8:	00007401 	.word	0x00007401
    7aac:	00007385 	.word	0x00007385

00007ab0 <_tc_timer_get_period>:
}
/**
 * \brief Retrieve timer period
 */
uint32_t _tc_timer_get_period(const struct _timer_device *const device)
{
    7ab0:	b580      	push	{r7, lr}
    7ab2:	b084      	sub	sp, #16
    7ab4:	af00      	add	r7, sp, #0
    7ab6:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    7ab8:	687b      	ldr	r3, [r7, #4]
    7aba:	68db      	ldr	r3, [r3, #12]
    7abc:	60fb      	str	r3, [r7, #12]

	if (TC_CTRLA_MODE_COUNT32_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    7abe:	68f8      	ldr	r0, [r7, #12]
    7ac0:	4b13      	ldr	r3, [pc, #76]	; (7b10 <_tc_timer_get_period+0x60>)
    7ac2:	4798      	blx	r3
    7ac4:	4603      	mov	r3, r0
    7ac6:	2b02      	cmp	r3, #2
    7ac8:	d105      	bne.n	7ad6 <_tc_timer_get_period+0x26>
		return hri_tccount32_read_CC_reg(hw, 0);
    7aca:	2100      	movs	r1, #0
    7acc:	68f8      	ldr	r0, [r7, #12]
    7ace:	4b11      	ldr	r3, [pc, #68]	; (7b14 <_tc_timer_get_period+0x64>)
    7ad0:	4798      	blx	r3
    7ad2:	4603      	mov	r3, r0
    7ad4:	e017      	b.n	7b06 <_tc_timer_get_period+0x56>
	} else if (TC_CTRLA_MODE_COUNT16_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    7ad6:	68f8      	ldr	r0, [r7, #12]
    7ad8:	4b0d      	ldr	r3, [pc, #52]	; (7b10 <_tc_timer_get_period+0x60>)
    7ada:	4798      	blx	r3
    7adc:	4603      	mov	r3, r0
    7ade:	2b00      	cmp	r3, #0
    7ae0:	d105      	bne.n	7aee <_tc_timer_get_period+0x3e>
		return hri_tccount16_read_CC_reg(hw, 0);
    7ae2:	2100      	movs	r1, #0
    7ae4:	68f8      	ldr	r0, [r7, #12]
    7ae6:	4b0c      	ldr	r3, [pc, #48]	; (7b18 <_tc_timer_get_period+0x68>)
    7ae8:	4798      	blx	r3
    7aea:	4603      	mov	r3, r0
    7aec:	e00b      	b.n	7b06 <_tc_timer_get_period+0x56>
	} else if (TC_CTRLA_MODE_COUNT8_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    7aee:	68f8      	ldr	r0, [r7, #12]
    7af0:	4b07      	ldr	r3, [pc, #28]	; (7b10 <_tc_timer_get_period+0x60>)
    7af2:	4798      	blx	r3
    7af4:	4603      	mov	r3, r0
    7af6:	2b01      	cmp	r3, #1
    7af8:	d104      	bne.n	7b04 <_tc_timer_get_period+0x54>
		return hri_tccount8_read_PER_reg(hw);
    7afa:	68f8      	ldr	r0, [r7, #12]
    7afc:	4b07      	ldr	r3, [pc, #28]	; (7b1c <_tc_timer_get_period+0x6c>)
    7afe:	4798      	blx	r3
    7b00:	4603      	mov	r3, r0
    7b02:	e000      	b.n	7b06 <_tc_timer_get_period+0x56>
	}

	return 0;
    7b04:	2300      	movs	r3, #0
}
    7b06:	4618      	mov	r0, r3
    7b08:	3710      	adds	r7, #16
    7b0a:	46bd      	mov	sp, r7
    7b0c:	bd80      	pop	{r7, pc}
    7b0e:	bf00      	nop
    7b10:	000072ad 	.word	0x000072ad
    7b14:	00007495 	.word	0x00007495
    7b18:	00007435 	.word	0x00007435
    7b1c:	000073ad 	.word	0x000073ad

00007b20 <_tc_timer_is_started>:
/**
 * \brief Check if timer is running
 */
bool _tc_timer_is_started(const struct _timer_device *const device)
{
    7b20:	b580      	push	{r7, lr}
    7b22:	b082      	sub	sp, #8
    7b24:	af00      	add	r7, sp, #0
    7b26:	6078      	str	r0, [r7, #4]
	return hri_tc_get_CTRLA_ENABLE_bit(device->hw);
    7b28:	687b      	ldr	r3, [r7, #4]
    7b2a:	68db      	ldr	r3, [r3, #12]
    7b2c:	4618      	mov	r0, r3
    7b2e:	4b03      	ldr	r3, [pc, #12]	; (7b3c <_tc_timer_is_started+0x1c>)
    7b30:	4798      	blx	r3
    7b32:	4603      	mov	r3, r0
}
    7b34:	4618      	mov	r0, r3
    7b36:	3708      	adds	r7, #8
    7b38:	46bd      	mov	sp, r7
    7b3a:	bd80      	pop	{r7, pc}
    7b3c:	0000724d 	.word	0x0000724d

00007b40 <_tc_get_timer>:

/**
 * \brief Retrieve timer helper functions
 */
struct _timer_hpl_interface *_tc_get_timer(void)
{
    7b40:	b480      	push	{r7}
    7b42:	af00      	add	r7, sp, #0
	return &_tc_timer_functions;
    7b44:	4b02      	ldr	r3, [pc, #8]	; (7b50 <_tc_get_timer+0x10>)
}
    7b46:	4618      	mov	r0, r3
    7b48:	46bd      	mov	sp, r7
    7b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
    7b4e:	4770      	bx	lr
    7b50:	20000188 	.word	0x20000188

00007b54 <_tc_get_pwm>:

/**
 * \brief Retrieve pwm helper functions
 */
struct _pwm_hpl_interface *_tc_get_pwm(void)
{
    7b54:	b480      	push	{r7}
    7b56:	af00      	add	r7, sp, #0
	return NULL;
    7b58:	2300      	movs	r3, #0
}
    7b5a:	4618      	mov	r0, r3
    7b5c:	46bd      	mov	sp, r7
    7b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
    7b62:	4770      	bx	lr

00007b64 <_tc_timer_set_irq>:
 * \brief Set timer IRQ
 *
 * \param[in] hw The pointer to hardware instance
 */
void _tc_timer_set_irq(struct _timer_device *const device)
{
    7b64:	b580      	push	{r7, lr}
    7b66:	b084      	sub	sp, #16
    7b68:	af00      	add	r7, sp, #0
    7b6a:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    7b6c:	687b      	ldr	r3, [r7, #4]
    7b6e:	68db      	ldr	r3, [r3, #12]
    7b70:	60fb      	str	r3, [r7, #12]
	int8_t      i  = get_tc_index(hw);
    7b72:	68f8      	ldr	r0, [r7, #12]
    7b74:	4b0e      	ldr	r3, [pc, #56]	; (7bb0 <_tc_timer_set_irq+0x4c>)
    7b76:	4798      	blx	r3
    7b78:	4603      	mov	r3, r0
    7b7a:	72fb      	strb	r3, [r7, #11]
	ASSERT(ARRAY_SIZE(_tcs));
    7b7c:	f44f 72d9 	mov.w	r2, #434	; 0x1b2
    7b80:	490c      	ldr	r1, [pc, #48]	; (7bb4 <_tc_timer_set_irq+0x50>)
    7b82:	2001      	movs	r0, #1
    7b84:	4b0c      	ldr	r3, [pc, #48]	; (7bb8 <_tc_timer_set_irq+0x54>)
    7b86:	4798      	blx	r3

	_irq_set(_tcs[i].irq);
    7b88:	f997 200b 	ldrsb.w	r2, [r7, #11]
    7b8c:	490b      	ldr	r1, [pc, #44]	; (7bbc <_tc_timer_set_irq+0x58>)
    7b8e:	4613      	mov	r3, r2
    7b90:	009b      	lsls	r3, r3, #2
    7b92:	4413      	add	r3, r2
    7b94:	009b      	lsls	r3, r3, #2
    7b96:	440b      	add	r3, r1
    7b98:	3302      	adds	r3, #2
    7b9a:	f9b3 3000 	ldrsh.w	r3, [r3]
    7b9e:	b2db      	uxtb	r3, r3
    7ba0:	4618      	mov	r0, r3
    7ba2:	4b07      	ldr	r3, [pc, #28]	; (7bc0 <_tc_timer_set_irq+0x5c>)
    7ba4:	4798      	blx	r3
}
    7ba6:	bf00      	nop
    7ba8:	3710      	adds	r7, #16
    7baa:	46bd      	mov	sp, r7
    7bac:	bd80      	pop	{r7, pc}
    7bae:	bf00      	nop
    7bb0:	00007d11 	.word	0x00007d11
    7bb4:	00013540 	.word	0x00013540
    7bb8:	00002dc9 	.word	0x00002dc9
    7bbc:	20000110 	.word	0x20000110
    7bc0:	00003bf9 	.word	0x00003bf9

00007bc4 <tc_interrupt_handler>:
 * \internal TC interrupt handler for Timer
 *
 * \param[in] instance TC instance number
 */
static void tc_interrupt_handler(struct _timer_device *device)
{
    7bc4:	b580      	push	{r7, lr}
    7bc6:	b084      	sub	sp, #16
    7bc8:	af00      	add	r7, sp, #0
    7bca:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    7bcc:	687b      	ldr	r3, [r7, #4]
    7bce:	68db      	ldr	r3, [r3, #12]
    7bd0:	60fb      	str	r3, [r7, #12]

	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    7bd2:	68f8      	ldr	r0, [r7, #12]
    7bd4:	4b07      	ldr	r3, [pc, #28]	; (7bf4 <tc_interrupt_handler+0x30>)
    7bd6:	4798      	blx	r3
    7bd8:	4603      	mov	r3, r0
    7bda:	2b00      	cmp	r3, #0
    7bdc:	d006      	beq.n	7bec <tc_interrupt_handler+0x28>
		hri_tc_clear_interrupt_OVF_bit(hw);
    7bde:	68f8      	ldr	r0, [r7, #12]
    7be0:	4b05      	ldr	r3, [pc, #20]	; (7bf8 <tc_interrupt_handler+0x34>)
    7be2:	4798      	blx	r3
		device->timer_cb.period_expired(device);
    7be4:	687b      	ldr	r3, [r7, #4]
    7be6:	681b      	ldr	r3, [r3, #0]
    7be8:	6878      	ldr	r0, [r7, #4]
    7bea:	4798      	blx	r3
	}
}
    7bec:	bf00      	nop
    7bee:	3710      	adds	r7, #16
    7bf0:	46bd      	mov	sp, r7
    7bf2:	bd80      	pop	{r7, pc}
    7bf4:	0000715d 	.word	0x0000715d
    7bf8:	00007185 	.word	0x00007185

00007bfc <tc_pwm_interrupt_handler>:
 * \internal TC interrupt handler for PWM
 *
 * \param[in] instance TC instance number
 */
static void tc_pwm_interrupt_handler(struct _pwm_device *device)
{
    7bfc:	b580      	push	{r7, lr}
    7bfe:	b084      	sub	sp, #16
    7c00:	af00      	add	r7, sp, #0
    7c02:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    7c04:	687b      	ldr	r3, [r7, #4]
    7c06:	691b      	ldr	r3, [r3, #16]
    7c08:	60fb      	str	r3, [r7, #12]

	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    7c0a:	68f8      	ldr	r0, [r7, #12]
    7c0c:	4b12      	ldr	r3, [pc, #72]	; (7c58 <tc_pwm_interrupt_handler+0x5c>)
    7c0e:	4798      	blx	r3
    7c10:	4603      	mov	r3, r0
    7c12:	2b00      	cmp	r3, #0
    7c14:	d00a      	beq.n	7c2c <tc_pwm_interrupt_handler+0x30>
		hri_tc_clear_interrupt_OVF_bit(hw);
    7c16:	68f8      	ldr	r0, [r7, #12]
    7c18:	4b10      	ldr	r3, [pc, #64]	; (7c5c <tc_pwm_interrupt_handler+0x60>)
    7c1a:	4798      	blx	r3
		if (NULL != device->callback.pwm_period_cb) {
    7c1c:	687b      	ldr	r3, [r7, #4]
    7c1e:	681b      	ldr	r3, [r3, #0]
    7c20:	2b00      	cmp	r3, #0
    7c22:	d003      	beq.n	7c2c <tc_pwm_interrupt_handler+0x30>
			device->callback.pwm_period_cb(device);
    7c24:	687b      	ldr	r3, [r7, #4]
    7c26:	681b      	ldr	r3, [r3, #0]
    7c28:	6878      	ldr	r0, [r7, #4]
    7c2a:	4798      	blx	r3
		}
	}
	if (hri_tc_get_INTEN_ERR_bit(hw)) {
    7c2c:	68f8      	ldr	r0, [r7, #12]
    7c2e:	4b0c      	ldr	r3, [pc, #48]	; (7c60 <tc_pwm_interrupt_handler+0x64>)
    7c30:	4798      	blx	r3
    7c32:	4603      	mov	r3, r0
    7c34:	2b00      	cmp	r3, #0
    7c36:	d00a      	beq.n	7c4e <tc_pwm_interrupt_handler+0x52>
		hri_tc_clear_interrupt_ERR_bit(hw);
    7c38:	68f8      	ldr	r0, [r7, #12]
    7c3a:	4b0a      	ldr	r3, [pc, #40]	; (7c64 <tc_pwm_interrupt_handler+0x68>)
    7c3c:	4798      	blx	r3
		if (NULL != device->callback.pwm_error_cb) {
    7c3e:	687b      	ldr	r3, [r7, #4]
    7c40:	685b      	ldr	r3, [r3, #4]
    7c42:	2b00      	cmp	r3, #0
    7c44:	d003      	beq.n	7c4e <tc_pwm_interrupt_handler+0x52>
			device->callback.pwm_error_cb(device);
    7c46:	687b      	ldr	r3, [r7, #4]
    7c48:	685b      	ldr	r3, [r3, #4]
    7c4a:	6878      	ldr	r0, [r7, #4]
    7c4c:	4798      	blx	r3
		}
	}
}
    7c4e:	bf00      	nop
    7c50:	3710      	adds	r7, #16
    7c52:	46bd      	mov	sp, r7
    7c54:	bd80      	pop	{r7, pc}
    7c56:	bf00      	nop
    7c58:	0000715d 	.word	0x0000715d
    7c5c:	00007185 	.word	0x00007185
    7c60:	000071d3 	.word	0x000071d3
    7c64:	0000719f 	.word	0x0000719f

00007c68 <TC0_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC0_Handler(void)
{
    7c68:	b580      	push	{r7, lr}
    7c6a:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc0_dev);
    7c6c:	4b03      	ldr	r3, [pc, #12]	; (7c7c <TC0_Handler+0x14>)
    7c6e:	681b      	ldr	r3, [r3, #0]
    7c70:	4618      	mov	r0, r3
    7c72:	4b03      	ldr	r3, [pc, #12]	; (7c80 <TC0_Handler+0x18>)
    7c74:	4798      	blx	r3
}
    7c76:	bf00      	nop
    7c78:	bd80      	pop	{r7, pc}
    7c7a:	bf00      	nop
    7c7c:	20000d44 	.word	0x20000d44
    7c80:	00007bc5 	.word	0x00007bc5

00007c84 <TC2_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC2_Handler(void)
{
    7c84:	b580      	push	{r7, lr}
    7c86:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc2_dev);
    7c88:	4b03      	ldr	r3, [pc, #12]	; (7c98 <TC2_Handler+0x14>)
    7c8a:	681b      	ldr	r3, [r3, #0]
    7c8c:	4618      	mov	r0, r3
    7c8e:	4b03      	ldr	r3, [pc, #12]	; (7c9c <TC2_Handler+0x18>)
    7c90:	4798      	blx	r3
}
    7c92:	bf00      	nop
    7c94:	bd80      	pop	{r7, pc}
    7c96:	bf00      	nop
    7c98:	20000d48 	.word	0x20000d48
    7c9c:	00007bc5 	.word	0x00007bc5

00007ca0 <TC4_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC4_Handler(void)
{
    7ca0:	b580      	push	{r7, lr}
    7ca2:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc4_dev);
    7ca4:	4b03      	ldr	r3, [pc, #12]	; (7cb4 <TC4_Handler+0x14>)
    7ca6:	681b      	ldr	r3, [r3, #0]
    7ca8:	4618      	mov	r0, r3
    7caa:	4b03      	ldr	r3, [pc, #12]	; (7cb8 <TC4_Handler+0x18>)
    7cac:	4798      	blx	r3
}
    7cae:	bf00      	nop
    7cb0:	bd80      	pop	{r7, pc}
    7cb2:	bf00      	nop
    7cb4:	20000d4c 	.word	0x20000d4c
    7cb8:	00007bc5 	.word	0x00007bc5

00007cbc <TC5_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC5_Handler(void)
{
    7cbc:	b580      	push	{r7, lr}
    7cbe:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc5_dev);
    7cc0:	4b03      	ldr	r3, [pc, #12]	; (7cd0 <TC5_Handler+0x14>)
    7cc2:	681b      	ldr	r3, [r3, #0]
    7cc4:	4618      	mov	r0, r3
    7cc6:	4b03      	ldr	r3, [pc, #12]	; (7cd4 <TC5_Handler+0x18>)
    7cc8:	4798      	blx	r3
}
    7cca:	bf00      	nop
    7ccc:	bd80      	pop	{r7, pc}
    7cce:	bf00      	nop
    7cd0:	20000d50 	.word	0x20000d50
    7cd4:	00007bc5 	.word	0x00007bc5

00007cd8 <TC6_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC6_Handler(void)
{
    7cd8:	b580      	push	{r7, lr}
    7cda:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc6_dev);
    7cdc:	4b03      	ldr	r3, [pc, #12]	; (7cec <TC6_Handler+0x14>)
    7cde:	681b      	ldr	r3, [r3, #0]
    7ce0:	4618      	mov	r0, r3
    7ce2:	4b03      	ldr	r3, [pc, #12]	; (7cf0 <TC6_Handler+0x18>)
    7ce4:	4798      	blx	r3
}
    7ce6:	bf00      	nop
    7ce8:	bd80      	pop	{r7, pc}
    7cea:	bf00      	nop
    7cec:	20000d54 	.word	0x20000d54
    7cf0:	00007bc5 	.word	0x00007bc5

00007cf4 <TC7_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC7_Handler(void)
{
    7cf4:	b580      	push	{r7, lr}
    7cf6:	af00      	add	r7, sp, #0
	tc_pwm_interrupt_handler(_tc7_dev);
    7cf8:	4b03      	ldr	r3, [pc, #12]	; (7d08 <TC7_Handler+0x14>)
    7cfa:	681b      	ldr	r3, [r3, #0]
    7cfc:	4618      	mov	r0, r3
    7cfe:	4b03      	ldr	r3, [pc, #12]	; (7d0c <TC7_Handler+0x18>)
    7d00:	4798      	blx	r3
}
    7d02:	bf00      	nop
    7d04:	bd80      	pop	{r7, pc}
    7d06:	bf00      	nop
    7d08:	20000d58 	.word	0x20000d58
    7d0c:	00007bfd 	.word	0x00007bfd

00007d10 <get_tc_index>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The index of TC configuration
 */
static int8_t get_tc_index(const void *const hw)
{
    7d10:	b580      	push	{r7, lr}
    7d12:	b084      	sub	sp, #16
    7d14:	af00      	add	r7, sp, #0
    7d16:	6078      	str	r0, [r7, #4]
	uint8_t index = _get_hardware_offset(hw);
    7d18:	6878      	ldr	r0, [r7, #4]
    7d1a:	4b13      	ldr	r3, [pc, #76]	; (7d68 <get_tc_index+0x58>)
    7d1c:	4798      	blx	r3
    7d1e:	4603      	mov	r3, r0
    7d20:	73bb      	strb	r3, [r7, #14]
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    7d22:	2300      	movs	r3, #0
    7d24:	73fb      	strb	r3, [r7, #15]
    7d26:	e010      	b.n	7d4a <get_tc_index+0x3a>
		if (_tcs[i].number == index) {
    7d28:	7bfa      	ldrb	r2, [r7, #15]
    7d2a:	4910      	ldr	r1, [pc, #64]	; (7d6c <get_tc_index+0x5c>)
    7d2c:	4613      	mov	r3, r2
    7d2e:	009b      	lsls	r3, r3, #2
    7d30:	4413      	add	r3, r2
    7d32:	009b      	lsls	r3, r3, #2
    7d34:	440b      	add	r3, r1
    7d36:	781b      	ldrb	r3, [r3, #0]
    7d38:	7bba      	ldrb	r2, [r7, #14]
    7d3a:	429a      	cmp	r2, r3
    7d3c:	d102      	bne.n	7d44 <get_tc_index+0x34>
			return i;
    7d3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
    7d42:	e00d      	b.n	7d60 <get_tc_index+0x50>
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    7d44:	7bfb      	ldrb	r3, [r7, #15]
    7d46:	3301      	adds	r3, #1
    7d48:	73fb      	strb	r3, [r7, #15]
    7d4a:	7bfb      	ldrb	r3, [r7, #15]
    7d4c:	2b05      	cmp	r3, #5
    7d4e:	d9eb      	bls.n	7d28 <get_tc_index+0x18>
		}
	}

	ASSERT(false);
    7d50:	f240 221d 	movw	r2, #541	; 0x21d
    7d54:	4906      	ldr	r1, [pc, #24]	; (7d70 <get_tc_index+0x60>)
    7d56:	2000      	movs	r0, #0
    7d58:	4b06      	ldr	r3, [pc, #24]	; (7d74 <get_tc_index+0x64>)
    7d5a:	4798      	blx	r3
	return -1;
    7d5c:	f04f 33ff 	mov.w	r3, #4294967295
}
    7d60:	4618      	mov	r0, r3
    7d62:	3710      	adds	r7, #16
    7d64:	46bd      	mov	sp, r7
    7d66:	bd80      	pop	{r7, pc}
    7d68:	00007e15 	.word	0x00007e15
    7d6c:	20000110 	.word	0x20000110
    7d70:	00013540 	.word	0x00013540
    7d74:	00002dc9 	.word	0x00002dc9

00007d78 <_tc_init_irq_param>:

/**
 * \brief Init irq param with the given tc hardware instance
 */
static void _tc_init_irq_param(const void *const hw, void *dev)
{
    7d78:	b480      	push	{r7}
    7d7a:	b083      	sub	sp, #12
    7d7c:	af00      	add	r7, sp, #0
    7d7e:	6078      	str	r0, [r7, #4]
    7d80:	6039      	str	r1, [r7, #0]
	if (hw == TC0) {
    7d82:	687b      	ldr	r3, [r7, #4]
    7d84:	4a17      	ldr	r2, [pc, #92]	; (7de4 <_tc_init_irq_param+0x6c>)
    7d86:	4293      	cmp	r3, r2
    7d88:	d102      	bne.n	7d90 <_tc_init_irq_param+0x18>
		_tc0_dev = (struct _timer_device *)dev;
    7d8a:	4a17      	ldr	r2, [pc, #92]	; (7de8 <_tc_init_irq_param+0x70>)
    7d8c:	683b      	ldr	r3, [r7, #0]
    7d8e:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC2) {
    7d90:	687b      	ldr	r3, [r7, #4]
    7d92:	4a16      	ldr	r2, [pc, #88]	; (7dec <_tc_init_irq_param+0x74>)
    7d94:	4293      	cmp	r3, r2
    7d96:	d102      	bne.n	7d9e <_tc_init_irq_param+0x26>
		_tc2_dev = (struct _timer_device *)dev;
    7d98:	4a15      	ldr	r2, [pc, #84]	; (7df0 <_tc_init_irq_param+0x78>)
    7d9a:	683b      	ldr	r3, [r7, #0]
    7d9c:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC4) {
    7d9e:	687b      	ldr	r3, [r7, #4]
    7da0:	4a14      	ldr	r2, [pc, #80]	; (7df4 <_tc_init_irq_param+0x7c>)
    7da2:	4293      	cmp	r3, r2
    7da4:	d102      	bne.n	7dac <_tc_init_irq_param+0x34>
		_tc4_dev = (struct _timer_device *)dev;
    7da6:	4a14      	ldr	r2, [pc, #80]	; (7df8 <_tc_init_irq_param+0x80>)
    7da8:	683b      	ldr	r3, [r7, #0]
    7daa:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC5) {
    7dac:	687b      	ldr	r3, [r7, #4]
    7dae:	4a13      	ldr	r2, [pc, #76]	; (7dfc <_tc_init_irq_param+0x84>)
    7db0:	4293      	cmp	r3, r2
    7db2:	d102      	bne.n	7dba <_tc_init_irq_param+0x42>
		_tc5_dev = (struct _timer_device *)dev;
    7db4:	4a12      	ldr	r2, [pc, #72]	; (7e00 <_tc_init_irq_param+0x88>)
    7db6:	683b      	ldr	r3, [r7, #0]
    7db8:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC6) {
    7dba:	687b      	ldr	r3, [r7, #4]
    7dbc:	4a11      	ldr	r2, [pc, #68]	; (7e04 <_tc_init_irq_param+0x8c>)
    7dbe:	4293      	cmp	r3, r2
    7dc0:	d102      	bne.n	7dc8 <_tc_init_irq_param+0x50>
		_tc6_dev = (struct _timer_device *)dev;
    7dc2:	4a11      	ldr	r2, [pc, #68]	; (7e08 <_tc_init_irq_param+0x90>)
    7dc4:	683b      	ldr	r3, [r7, #0]
    7dc6:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC7) {
    7dc8:	687b      	ldr	r3, [r7, #4]
    7dca:	4a10      	ldr	r2, [pc, #64]	; (7e0c <_tc_init_irq_param+0x94>)
    7dcc:	4293      	cmp	r3, r2
    7dce:	d102      	bne.n	7dd6 <_tc_init_irq_param+0x5e>
		_tc7_dev = (struct _pwm_device *)dev;
    7dd0:	4a0f      	ldr	r2, [pc, #60]	; (7e10 <_tc_init_irq_param+0x98>)
    7dd2:	683b      	ldr	r3, [r7, #0]
    7dd4:	6013      	str	r3, [r2, #0]
	}
}
    7dd6:	bf00      	nop
    7dd8:	370c      	adds	r7, #12
    7dda:	46bd      	mov	sp, r7
    7ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
    7de0:	4770      	bx	lr
    7de2:	bf00      	nop
    7de4:	40003800 	.word	0x40003800
    7de8:	20000d44 	.word	0x20000d44
    7dec:	4101a000 	.word	0x4101a000
    7df0:	20000d48 	.word	0x20000d48
    7df4:	42001400 	.word	0x42001400
    7df8:	20000d4c 	.word	0x20000d4c
    7dfc:	42001800 	.word	0x42001800
    7e00:	20000d50 	.word	0x20000d50
    7e04:	43001400 	.word	0x43001400
    7e08:	20000d54 	.word	0x20000d54
    7e0c:	43001800 	.word	0x43001800
    7e10:	20000d58 	.word	0x20000d58

00007e14 <_get_hardware_offset>:
 * \internal Retrieve TC hardware index
 *
 * \param[in] hw The pointer to hardware instance
 */
static inline uint8_t _get_hardware_offset(const void *const hw)
{
    7e14:	b4b0      	push	{r4, r5, r7}
    7e16:	b08d      	sub	sp, #52	; 0x34
    7e18:	af00      	add	r7, sp, #0
    7e1a:	6078      	str	r0, [r7, #4]
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
    7e1c:	4b13      	ldr	r3, [pc, #76]	; (7e6c <_get_hardware_offset+0x58>)
    7e1e:	f107 040c 	add.w	r4, r7, #12
    7e22:	461d      	mov	r5, r3
    7e24:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    7e26:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    7e28:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    7e2c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    7e30:	2300      	movs	r3, #0
    7e32:	62fb      	str	r3, [r7, #44]	; 0x2c
    7e34:	e010      	b.n	7e58 <_get_hardware_offset+0x44>
		if ((uint32_t)hw == (uint32_t)tc_modules[i]) {
    7e36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    7e38:	009b      	lsls	r3, r3, #2
    7e3a:	f107 0230 	add.w	r2, r7, #48	; 0x30
    7e3e:	4413      	add	r3, r2
    7e40:	f853 3c24 	ldr.w	r3, [r3, #-36]
    7e44:	461a      	mov	r2, r3
    7e46:	687b      	ldr	r3, [r7, #4]
    7e48:	429a      	cmp	r2, r3
    7e4a:	d102      	bne.n	7e52 <_get_hardware_offset+0x3e>
			return i;
    7e4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    7e4e:	b2db      	uxtb	r3, r3
    7e50:	e006      	b.n	7e60 <_get_hardware_offset+0x4c>
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    7e52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    7e54:	3301      	adds	r3, #1
    7e56:	62fb      	str	r3, [r7, #44]	; 0x2c
    7e58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    7e5a:	2b07      	cmp	r3, #7
    7e5c:	d9eb      	bls.n	7e36 <_get_hardware_offset+0x22>
		}
	}
	return 0;
    7e5e:	2300      	movs	r3, #0
}
    7e60:	4618      	mov	r0, r3
    7e62:	3734      	adds	r7, #52	; 0x34
    7e64:	46bd      	mov	sp, r7
    7e66:	bcb0      	pop	{r4, r5, r7}
    7e68:	4770      	bx	lr
    7e6a:	bf00      	nop
    7e6c:	00013554 	.word	0x00013554

00007e70 <__NVIC_EnableIRQ>:
{
    7e70:	b480      	push	{r7}
    7e72:	b083      	sub	sp, #12
    7e74:	af00      	add	r7, sp, #0
    7e76:	4603      	mov	r3, r0
    7e78:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    7e7a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    7e7e:	2b00      	cmp	r3, #0
    7e80:	db0b      	blt.n	7e9a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    7e82:	4909      	ldr	r1, [pc, #36]	; (7ea8 <__NVIC_EnableIRQ+0x38>)
    7e84:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    7e88:	095b      	lsrs	r3, r3, #5
    7e8a:	88fa      	ldrh	r2, [r7, #6]
    7e8c:	f002 021f 	and.w	r2, r2, #31
    7e90:	2001      	movs	r0, #1
    7e92:	fa00 f202 	lsl.w	r2, r0, r2
    7e96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    7e9a:	bf00      	nop
    7e9c:	370c      	adds	r7, #12
    7e9e:	46bd      	mov	sp, r7
    7ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
    7ea4:	4770      	bx	lr
    7ea6:	bf00      	nop
    7ea8:	e000e100 	.word	0xe000e100

00007eac <hri_oscctrl_get_DPLLSTATUS_reg>:
{
    7eac:	b480      	push	{r7}
    7eae:	b087      	sub	sp, #28
    7eb0:	af00      	add	r7, sp, #0
    7eb2:	60f8      	str	r0, [r7, #12]
    7eb4:	460b      	mov	r3, r1
    7eb6:	607a      	str	r2, [r7, #4]
    7eb8:	72fb      	strb	r3, [r7, #11]
	tmp = ((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg;
    7eba:	7afa      	ldrb	r2, [r7, #11]
    7ebc:	68f9      	ldr	r1, [r7, #12]
    7ebe:	4613      	mov	r3, r2
    7ec0:	009b      	lsls	r3, r3, #2
    7ec2:	4413      	add	r3, r2
    7ec4:	009b      	lsls	r3, r3, #2
    7ec6:	440b      	add	r3, r1
    7ec8:	3340      	adds	r3, #64	; 0x40
    7eca:	681b      	ldr	r3, [r3, #0]
    7ecc:	617b      	str	r3, [r7, #20]
	tmp &= mask;
    7ece:	697a      	ldr	r2, [r7, #20]
    7ed0:	687b      	ldr	r3, [r7, #4]
    7ed2:	4013      	ands	r3, r2
    7ed4:	617b      	str	r3, [r7, #20]
	return tmp;
    7ed6:	697b      	ldr	r3, [r7, #20]
}
    7ed8:	4618      	mov	r0, r3
    7eda:	371c      	adds	r7, #28
    7edc:	46bd      	mov	sp, r7
    7ede:	f85d 7b04 	ldr.w	r7, [sp], #4
    7ee2:	4770      	bx	lr

00007ee4 <hri_oscctrl_get_STATUS_reg>:
{
    7ee4:	b480      	push	{r7}
    7ee6:	b085      	sub	sp, #20
    7ee8:	af00      	add	r7, sp, #0
    7eea:	6078      	str	r0, [r7, #4]
    7eec:	6039      	str	r1, [r7, #0]
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    7eee:	687b      	ldr	r3, [r7, #4]
    7ef0:	691b      	ldr	r3, [r3, #16]
    7ef2:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    7ef4:	68fa      	ldr	r2, [r7, #12]
    7ef6:	683b      	ldr	r3, [r7, #0]
    7ef8:	4013      	ands	r3, r2
    7efa:	60fb      	str	r3, [r7, #12]
	return tmp;
    7efc:	68fb      	ldr	r3, [r7, #12]
}
    7efe:	4618      	mov	r0, r3
    7f00:	3714      	adds	r7, #20
    7f02:	46bd      	mov	sp, r7
    7f04:	f85d 7b04 	ldr.w	r7, [sp], #4
    7f08:	4770      	bx	lr

00007f0a <hri_oscctrl_get_DFLLCTRLB_MODE_bit>:
{
    7f0a:	b480      	push	{r7}
    7f0c:	b085      	sub	sp, #20
    7f0e:	af00      	add	r7, sp, #0
    7f10:	6078      	str	r0, [r7, #4]
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
    7f12:	687b      	ldr	r3, [r7, #4]
    7f14:	f893 3020 	ldrb.w	r3, [r3, #32]
    7f18:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLCTRLB_MODE) >> OSCCTRL_DFLLCTRLB_MODE_Pos;
    7f1a:	7bfb      	ldrb	r3, [r7, #15]
    7f1c:	f003 0301 	and.w	r3, r3, #1
    7f20:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    7f22:	7bfb      	ldrb	r3, [r7, #15]
    7f24:	2b00      	cmp	r3, #0
    7f26:	bf14      	ite	ne
    7f28:	2301      	movne	r3, #1
    7f2a:	2300      	moveq	r3, #0
    7f2c:	b2db      	uxtb	r3, r3
}
    7f2e:	4618      	mov	r0, r3
    7f30:	3714      	adds	r7, #20
    7f32:	46bd      	mov	sp, r7
    7f34:	f85d 7b04 	ldr.w	r7, [sp], #4
    7f38:	4770      	bx	lr

00007f3a <hri_usb_wait_for_sync>:
typedef uint8_t  hri_usbpipe_pintenset_reg_t;
typedef uint8_t  hri_usbpipe_pintflag_reg_t;
typedef uint8_t  hri_usbpipe_pstatus_reg_t;

static inline void hri_usb_wait_for_sync(const void *const hw, hri_usb_syncbusy_reg_t reg)
{
    7f3a:	b480      	push	{r7}
    7f3c:	b083      	sub	sp, #12
    7f3e:	af00      	add	r7, sp, #0
    7f40:	6078      	str	r0, [r7, #4]
    7f42:	460b      	mov	r3, r1
    7f44:	70fb      	strb	r3, [r7, #3]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    7f46:	bf00      	nop
    7f48:	687b      	ldr	r3, [r7, #4]
    7f4a:	789b      	ldrb	r3, [r3, #2]
    7f4c:	b2da      	uxtb	r2, r3
    7f4e:	78fb      	ldrb	r3, [r7, #3]
    7f50:	4013      	ands	r3, r2
    7f52:	b2db      	uxtb	r3, r3
    7f54:	2b00      	cmp	r3, #0
    7f56:	d1f7      	bne.n	7f48 <hri_usb_wait_for_sync+0xe>
	};
}
    7f58:	bf00      	nop
    7f5a:	370c      	adds	r7, #12
    7f5c:	46bd      	mov	sp, r7
    7f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
    7f62:	4770      	bx	lr

00007f64 <hri_usb_is_syncing>:

static inline bool hri_usb_is_syncing(const void *const hw, hri_usb_syncbusy_reg_t reg)
{
    7f64:	b480      	push	{r7}
    7f66:	b083      	sub	sp, #12
    7f68:	af00      	add	r7, sp, #0
    7f6a:	6078      	str	r0, [r7, #4]
    7f6c:	460b      	mov	r3, r1
    7f6e:	70fb      	strb	r3, [r7, #3]
	return ((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg;
    7f70:	687b      	ldr	r3, [r7, #4]
    7f72:	789b      	ldrb	r3, [r3, #2]
    7f74:	b2da      	uxtb	r2, r3
    7f76:	78fb      	ldrb	r3, [r7, #3]
    7f78:	4013      	ands	r3, r2
    7f7a:	b2db      	uxtb	r3, r3
    7f7c:	2b00      	cmp	r3, #0
    7f7e:	bf14      	ite	ne
    7f80:	2301      	movne	r3, #1
    7f82:	2300      	moveq	r3, #0
    7f84:	b2db      	uxtb	r3, r3
}
    7f86:	4618      	mov	r0, r3
    7f88:	370c      	adds	r7, #12
    7f8a:	46bd      	mov	sp, r7
    7f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
    7f90:	4770      	bx	lr

00007f92 <hri_usbendpoint_get_EPINTFLAG_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL1;
}

static inline hri_usbendpoint_epintflag_reg_t
hri_usbendpoint_get_EPINTFLAG_reg(const void *const hw, uint8_t submodule_index, hri_usbendpoint_epintflag_reg_t mask)
{
    7f92:	b480      	push	{r7}
    7f94:	b085      	sub	sp, #20
    7f96:	af00      	add	r7, sp, #0
    7f98:	6078      	str	r0, [r7, #4]
    7f9a:	460b      	mov	r3, r1
    7f9c:	70fb      	strb	r3, [r7, #3]
    7f9e:	4613      	mov	r3, r2
    7fa0:	70bb      	strb	r3, [r7, #2]
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    7fa2:	78fb      	ldrb	r3, [r7, #3]
    7fa4:	687a      	ldr	r2, [r7, #4]
    7fa6:	3308      	adds	r3, #8
    7fa8:	015b      	lsls	r3, r3, #5
    7faa:	4413      	add	r3, r2
    7fac:	3307      	adds	r3, #7
    7fae:	781b      	ldrb	r3, [r3, #0]
    7fb0:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    7fb2:	7bfa      	ldrb	r2, [r7, #15]
    7fb4:	78bb      	ldrb	r3, [r7, #2]
    7fb6:	4013      	ands	r3, r2
    7fb8:	73fb      	strb	r3, [r7, #15]
	return tmp;
    7fba:	7bfb      	ldrb	r3, [r7, #15]
}
    7fbc:	4618      	mov	r0, r3
    7fbe:	3714      	adds	r7, #20
    7fc0:	46bd      	mov	sp, r7
    7fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
    7fc6:	4770      	bx	lr

00007fc8 <hri_usbendpoint_read_EPINTFLAG_reg>:

static inline hri_usbendpoint_epintflag_reg_t hri_usbendpoint_read_EPINTFLAG_reg(const void *const hw,
                                                                                 uint8_t           submodule_index)
{
    7fc8:	b480      	push	{r7}
    7fca:	b083      	sub	sp, #12
    7fcc:	af00      	add	r7, sp, #0
    7fce:	6078      	str	r0, [r7, #4]
    7fd0:	460b      	mov	r3, r1
    7fd2:	70fb      	strb	r3, [r7, #3]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    7fd4:	78fb      	ldrb	r3, [r7, #3]
    7fd6:	687a      	ldr	r2, [r7, #4]
    7fd8:	3308      	adds	r3, #8
    7fda:	015b      	lsls	r3, r3, #5
    7fdc:	4413      	add	r3, r2
    7fde:	3307      	adds	r3, #7
    7fe0:	781b      	ldrb	r3, [r3, #0]
    7fe2:	b2db      	uxtb	r3, r3
}
    7fe4:	4618      	mov	r0, r3
    7fe6:	370c      	adds	r7, #12
    7fe8:	46bd      	mov	sp, r7
    7fea:	f85d 7b04 	ldr.w	r7, [sp], #4
    7fee:	4770      	bx	lr

00007ff0 <hri_usbendpoint_clear_EPINTFLAG_reg>:

static inline void hri_usbendpoint_clear_EPINTFLAG_reg(const void *const hw, uint8_t submodule_index,
                                                       hri_usbendpoint_epintflag_reg_t mask)
{
    7ff0:	b480      	push	{r7}
    7ff2:	b083      	sub	sp, #12
    7ff4:	af00      	add	r7, sp, #0
    7ff6:	6078      	str	r0, [r7, #4]
    7ff8:	460b      	mov	r3, r1
    7ffa:	70fb      	strb	r3, [r7, #3]
    7ffc:	4613      	mov	r3, r2
    7ffe:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    8000:	78fb      	ldrb	r3, [r7, #3]
    8002:	687a      	ldr	r2, [r7, #4]
    8004:	3308      	adds	r3, #8
    8006:	015b      	lsls	r3, r3, #5
    8008:	4413      	add	r3, r2
    800a:	3307      	adds	r3, #7
    800c:	78ba      	ldrb	r2, [r7, #2]
    800e:	701a      	strb	r2, [r3, #0]
}
    8010:	bf00      	nop
    8012:	370c      	adds	r7, #12
    8014:	46bd      	mov	sp, r7
    8016:	f85d 7b04 	ldr.w	r7, [sp], #4
    801a:	4770      	bx	lr

0000801c <hri_usbendpoint_set_EPSTATUS_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUS_BK1RDY;
}

static inline void hri_usbendpoint_set_EPSTATUS_reg(const void *const hw, uint8_t submodule_index,
                                                    hri_usbendpoint_epstatus_reg_t mask)
{
    801c:	b480      	push	{r7}
    801e:	b083      	sub	sp, #12
    8020:	af00      	add	r7, sp, #0
    8022:	6078      	str	r0, [r7, #4]
    8024:	460b      	mov	r3, r1
    8026:	70fb      	strb	r3, [r7, #3]
    8028:	4613      	mov	r3, r2
    802a:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    802c:	78fb      	ldrb	r3, [r7, #3]
    802e:	687a      	ldr	r2, [r7, #4]
    8030:	3308      	adds	r3, #8
    8032:	015b      	lsls	r3, r3, #5
    8034:	4413      	add	r3, r2
    8036:	3305      	adds	r3, #5
    8038:	78ba      	ldrb	r2, [r7, #2]
    803a:	701a      	strb	r2, [r3, #0]
}
    803c:	bf00      	nop
    803e:	370c      	adds	r7, #12
    8040:	46bd      	mov	sp, r7
    8042:	f85d 7b04 	ldr.w	r7, [sp], #4
    8046:	4770      	bx	lr

00008048 <hri_usbendpoint_read_EPSTATUS_reg>:
	return tmp;
}

static inline hri_usbendpoint_epstatus_reg_t hri_usbendpoint_read_EPSTATUS_reg(const void *const hw,
                                                                               uint8_t           submodule_index)
{
    8048:	b480      	push	{r7}
    804a:	b083      	sub	sp, #12
    804c:	af00      	add	r7, sp, #0
    804e:	6078      	str	r0, [r7, #4]
    8050:	460b      	mov	r3, r1
    8052:	70fb      	strb	r3, [r7, #3]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    8054:	78fb      	ldrb	r3, [r7, #3]
    8056:	687a      	ldr	r2, [r7, #4]
    8058:	3308      	adds	r3, #8
    805a:	015b      	lsls	r3, r3, #5
    805c:	4413      	add	r3, r2
    805e:	3306      	adds	r3, #6
    8060:	781b      	ldrb	r3, [r3, #0]
    8062:	b2db      	uxtb	r3, r3
}
    8064:	4618      	mov	r0, r3
    8066:	370c      	adds	r7, #12
    8068:	46bd      	mov	sp, r7
    806a:	f85d 7b04 	ldr.w	r7, [sp], #4
    806e:	4770      	bx	lr

00008070 <hri_usbendpoint_clear_EPSTATUS_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = ~data;
}

static inline void hri_usbendpoint_clear_EPSTATUS_reg(const void *const hw, uint8_t submodule_index,
                                                      hri_usbendpoint_epstatus_reg_t mask)
{
    8070:	b480      	push	{r7}
    8072:	b083      	sub	sp, #12
    8074:	af00      	add	r7, sp, #0
    8076:	6078      	str	r0, [r7, #4]
    8078:	460b      	mov	r3, r1
    807a:	70fb      	strb	r3, [r7, #3]
    807c:	4613      	mov	r3, r2
    807e:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    8080:	78fb      	ldrb	r3, [r7, #3]
    8082:	687a      	ldr	r2, [r7, #4]
    8084:	3308      	adds	r3, #8
    8086:	015b      	lsls	r3, r3, #5
    8088:	4413      	add	r3, r2
    808a:	3304      	adds	r3, #4
    808c:	78ba      	ldrb	r2, [r7, #2]
    808e:	701a      	strb	r2, [r3, #0]
}
    8090:	bf00      	nop
    8092:	370c      	adds	r7, #12
    8094:	46bd      	mov	sp, r7
    8096:	f85d 7b04 	ldr.w	r7, [sp], #4
    809a:	4770      	bx	lr

0000809c <hri_usbendpoint_clear_EPINTEN_RXSTP_bit>:
		((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = USB_DEVICE_EPINTENSET_RXSTP;
	}
}

static inline void hri_usbendpoint_clear_EPINTEN_RXSTP_bit(const void *const hw, uint8_t submodule_index)
{
    809c:	b480      	push	{r7}
    809e:	b083      	sub	sp, #12
    80a0:	af00      	add	r7, sp, #0
    80a2:	6078      	str	r0, [r7, #4]
    80a4:	460b      	mov	r3, r1
    80a6:	70fb      	strb	r3, [r7, #3]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = USB_DEVICE_EPINTENSET_RXSTP;
    80a8:	78fb      	ldrb	r3, [r7, #3]
    80aa:	687a      	ldr	r2, [r7, #4]
    80ac:	015b      	lsls	r3, r3, #5
    80ae:	4413      	add	r3, r2
    80b0:	f503 7384 	add.w	r3, r3, #264	; 0x108
    80b4:	2210      	movs	r2, #16
    80b6:	701a      	strb	r2, [r3, #0]
}
    80b8:	bf00      	nop
    80ba:	370c      	adds	r7, #12
    80bc:	46bd      	mov	sp, r7
    80be:	f85d 7b04 	ldr.w	r7, [sp], #4
    80c2:	4770      	bx	lr

000080c4 <hri_usbendpoint_set_EPINTEN_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = USB_DEVICE_EPINTENSET_STALL1;
}

static inline void hri_usbendpoint_set_EPINTEN_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_usbendpoint_epintenset_reg_t mask)
{
    80c4:	b480      	push	{r7}
    80c6:	b083      	sub	sp, #12
    80c8:	af00      	add	r7, sp, #0
    80ca:	6078      	str	r0, [r7, #4]
    80cc:	460b      	mov	r3, r1
    80ce:	70fb      	strb	r3, [r7, #3]
    80d0:	4613      	mov	r3, r2
    80d2:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    80d4:	78fb      	ldrb	r3, [r7, #3]
    80d6:	687a      	ldr	r2, [r7, #4]
    80d8:	015b      	lsls	r3, r3, #5
    80da:	4413      	add	r3, r2
    80dc:	f203 1309 	addw	r3, r3, #265	; 0x109
    80e0:	78ba      	ldrb	r2, [r7, #2]
    80e2:	701a      	strb	r2, [r3, #0]
}
    80e4:	bf00      	nop
    80e6:	370c      	adds	r7, #12
    80e8:	46bd      	mov	sp, r7
    80ea:	f85d 7b04 	ldr.w	r7, [sp], #4
    80ee:	4770      	bx	lr

000080f0 <hri_usbendpoint_clear_EPINTEN_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = ~data;
}

static inline void hri_usbendpoint_clear_EPINTEN_reg(const void *const hw, uint8_t submodule_index,
                                                     hri_usbendpoint_epintenset_reg_t mask)
{
    80f0:	b480      	push	{r7}
    80f2:	b083      	sub	sp, #12
    80f4:	af00      	add	r7, sp, #0
    80f6:	6078      	str	r0, [r7, #4]
    80f8:	460b      	mov	r3, r1
    80fa:	70fb      	strb	r3, [r7, #3]
    80fc:	4613      	mov	r3, r2
    80fe:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    8100:	78fb      	ldrb	r3, [r7, #3]
    8102:	687a      	ldr	r2, [r7, #4]
    8104:	015b      	lsls	r3, r3, #5
    8106:	4413      	add	r3, r2
    8108:	f503 7384 	add.w	r3, r3, #264	; 0x108
    810c:	78ba      	ldrb	r2, [r7, #2]
    810e:	701a      	strb	r2, [r3, #0]
}
    8110:	bf00      	nop
    8112:	370c      	adds	r7, #12
    8114:	46bd      	mov	sp, r7
    8116:	f85d 7b04 	ldr.w	r7, [sp], #4
    811a:	4770      	bx	lr

0000811c <hri_usbendpoint_read_EPCFG_EPTYPE0_bf>:
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_EPTYPE0_bf(const void *const hw,
                                                                                uint8_t           submodule_index)
{
    811c:	b480      	push	{r7}
    811e:	b085      	sub	sp, #20
    8120:	af00      	add	r7, sp, #0
    8122:	6078      	str	r0, [r7, #4]
    8124:	460b      	mov	r3, r1
    8126:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    8128:	78fb      	ldrb	r3, [r7, #3]
    812a:	687a      	ldr	r2, [r7, #4]
    812c:	3308      	adds	r3, #8
    812e:	015b      	lsls	r3, r3, #5
    8130:	4413      	add	r3, r2
    8132:	781b      	ldrb	r3, [r3, #0]
    8134:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE0_Msk) >> USB_DEVICE_EPCFG_EPTYPE0_Pos;
    8136:	7bfb      	ldrb	r3, [r7, #15]
    8138:	f003 0307 	and.w	r3, r3, #7
    813c:	73fb      	strb	r3, [r7, #15]
	return tmp;
    813e:	7bfb      	ldrb	r3, [r7, #15]
}
    8140:	4618      	mov	r0, r3
    8142:	3714      	adds	r7, #20
    8144:	46bd      	mov	sp, r7
    8146:	f85d 7b04 	ldr.w	r7, [sp], #4
    814a:	4770      	bx	lr

0000814c <hri_usbendpoint_read_EPCFG_EPTYPE1_bf>:
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_EPTYPE1_bf(const void *const hw,
                                                                                uint8_t           submodule_index)
{
    814c:	b480      	push	{r7}
    814e:	b085      	sub	sp, #20
    8150:	af00      	add	r7, sp, #0
    8152:	6078      	str	r0, [r7, #4]
    8154:	460b      	mov	r3, r1
    8156:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    8158:	78fb      	ldrb	r3, [r7, #3]
    815a:	687a      	ldr	r2, [r7, #4]
    815c:	3308      	adds	r3, #8
    815e:	015b      	lsls	r3, r3, #5
    8160:	4413      	add	r3, r2
    8162:	781b      	ldrb	r3, [r3, #0]
    8164:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE1_Msk) >> USB_DEVICE_EPCFG_EPTYPE1_Pos;
    8166:	7bfb      	ldrb	r3, [r7, #15]
    8168:	091b      	lsrs	r3, r3, #4
    816a:	b2db      	uxtb	r3, r3
    816c:	f003 0307 	and.w	r3, r3, #7
    8170:	73fb      	strb	r3, [r7, #15]
	return tmp;
    8172:	7bfb      	ldrb	r3, [r7, #15]
}
    8174:	4618      	mov	r0, r3
    8176:	3714      	adds	r7, #20
    8178:	46bd      	mov	sp, r7
    817a:	f85d 7b04 	ldr.w	r7, [sp], #4
    817e:	4770      	bx	lr

00008180 <hri_usbendpoint_write_EPCFG_reg>:
	return tmp;
}

static inline void hri_usbendpoint_write_EPCFG_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_usbendpoint_epcfg_reg_t data)
{
    8180:	b480      	push	{r7}
    8182:	b083      	sub	sp, #12
    8184:	af00      	add	r7, sp, #0
    8186:	6078      	str	r0, [r7, #4]
    8188:	460b      	mov	r3, r1
    818a:	70fb      	strb	r3, [r7, #3]
    818c:	4613      	mov	r3, r2
    818e:	70bb      	strb	r3, [r7, #2]
	USB_CRITICAL_SECTION_ENTER();
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    8190:	78fb      	ldrb	r3, [r7, #3]
    8192:	687a      	ldr	r2, [r7, #4]
    8194:	3308      	adds	r3, #8
    8196:	015b      	lsls	r3, r3, #5
    8198:	4413      	add	r3, r2
    819a:	78ba      	ldrb	r2, [r7, #2]
    819c:	701a      	strb	r2, [r3, #0]
	USB_CRITICAL_SECTION_LEAVE();
}
    819e:	bf00      	nop
    81a0:	370c      	adds	r7, #12
    81a2:	46bd      	mov	sp, r7
    81a4:	f85d 7b04 	ldr.w	r7, [sp], #4
    81a8:	4770      	bx	lr

000081aa <hri_usbendpoint_read_EPCFG_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg ^= mask;
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_reg(const void *const hw, uint8_t submodule_index)
{
    81aa:	b480      	push	{r7}
    81ac:	b083      	sub	sp, #12
    81ae:	af00      	add	r7, sp, #0
    81b0:	6078      	str	r0, [r7, #4]
    81b2:	460b      	mov	r3, r1
    81b4:	70fb      	strb	r3, [r7, #3]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    81b6:	78fb      	ldrb	r3, [r7, #3]
    81b8:	687a      	ldr	r2, [r7, #4]
    81ba:	3308      	adds	r3, #8
    81bc:	015b      	lsls	r3, r3, #5
    81be:	4413      	add	r3, r2
    81c0:	781b      	ldrb	r3, [r3, #0]
    81c2:	b2db      	uxtb	r3, r3
}
    81c4:	4618      	mov	r0, r3
    81c6:	370c      	adds	r7, #12
    81c8:	46bd      	mov	sp, r7
    81ca:	f85d 7b04 	ldr.w	r7, [sp], #4
    81ce:	4770      	bx	lr

000081d0 <hri_usbdevice_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_usbdevice_intflag_reg_t hri_usbdevice_read_INTFLAG_reg(const void *const hw)
{
    81d0:	b480      	push	{r7}
    81d2:	b083      	sub	sp, #12
    81d4:	af00      	add	r7, sp, #0
    81d6:	6078      	str	r0, [r7, #4]
	return ((Usb *)hw)->DEVICE.INTFLAG.reg;
    81d8:	687b      	ldr	r3, [r7, #4]
    81da:	8b9b      	ldrh	r3, [r3, #28]
    81dc:	b29b      	uxth	r3, r3
}
    81de:	4618      	mov	r0, r3
    81e0:	370c      	adds	r7, #12
    81e2:	46bd      	mov	sp, r7
    81e4:	f85d 7b04 	ldr.w	r7, [sp], #4
    81e8:	4770      	bx	lr

000081ea <hri_usbdevice_clear_INTFLAG_reg>:

static inline void hri_usbdevice_clear_INTFLAG_reg(const void *const hw, hri_usbdevice_intflag_reg_t mask)
{
    81ea:	b480      	push	{r7}
    81ec:	b083      	sub	sp, #12
    81ee:	af00      	add	r7, sp, #0
    81f0:	6078      	str	r0, [r7, #4]
    81f2:	460b      	mov	r3, r1
    81f4:	807b      	strh	r3, [r7, #2]
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    81f6:	687b      	ldr	r3, [r7, #4]
    81f8:	887a      	ldrh	r2, [r7, #2]
    81fa:	839a      	strh	r2, [r3, #28]
}
    81fc:	bf00      	nop
    81fe:	370c      	adds	r7, #12
    8200:	46bd      	mov	sp, r7
    8202:	f85d 7b04 	ldr.w	r7, [sp], #4
    8206:	4770      	bx	lr

00008208 <hri_usbdevice_set_INTEN_reg>:
{
	((Usb *)hw)->DEVICE.INTENCLR.reg = USB_DEVICE_INTENSET_LPMSUSP;
}

static inline void hri_usbdevice_set_INTEN_reg(const void *const hw, hri_usbdevice_intenset_reg_t mask)
{
    8208:	b480      	push	{r7}
    820a:	b083      	sub	sp, #12
    820c:	af00      	add	r7, sp, #0
    820e:	6078      	str	r0, [r7, #4]
    8210:	460b      	mov	r3, r1
    8212:	807b      	strh	r3, [r7, #2]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    8214:	687b      	ldr	r3, [r7, #4]
    8216:	887a      	ldrh	r2, [r7, #2]
    8218:	831a      	strh	r2, [r3, #24]
}
    821a:	bf00      	nop
    821c:	370c      	adds	r7, #12
    821e:	46bd      	mov	sp, r7
    8220:	f85d 7b04 	ldr.w	r7, [sp], #4
    8224:	4770      	bx	lr

00008226 <hri_usbdevice_read_INTEN_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_usbdevice_intenset_reg_t hri_usbdevice_read_INTEN_reg(const void *const hw)
{
    8226:	b480      	push	{r7}
    8228:	b083      	sub	sp, #12
    822a:	af00      	add	r7, sp, #0
    822c:	6078      	str	r0, [r7, #4]
	return ((Usb *)hw)->DEVICE.INTENSET.reg;
    822e:	687b      	ldr	r3, [r7, #4]
    8230:	8b1b      	ldrh	r3, [r3, #24]
    8232:	b29b      	uxth	r3, r3
}
    8234:	4618      	mov	r0, r3
    8236:	370c      	adds	r7, #12
    8238:	46bd      	mov	sp, r7
    823a:	f85d 7b04 	ldr.w	r7, [sp], #4
    823e:	4770      	bx	lr

00008240 <hri_usbdevice_clear_INTEN_reg>:
	((Usb *)hw)->DEVICE.INTENSET.reg = data;
	((Usb *)hw)->DEVICE.INTENCLR.reg = ~data;
}

static inline void hri_usbdevice_clear_INTEN_reg(const void *const hw, hri_usbdevice_intenset_reg_t mask)
{
    8240:	b480      	push	{r7}
    8242:	b083      	sub	sp, #12
    8244:	af00      	add	r7, sp, #0
    8246:	6078      	str	r0, [r7, #4]
    8248:	460b      	mov	r3, r1
    824a:	807b      	strh	r3, [r7, #2]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    824c:	687b      	ldr	r3, [r7, #4]
    824e:	887a      	ldrh	r2, [r7, #2]
    8250:	829a      	strh	r2, [r3, #20]
}
    8252:	bf00      	nop
    8254:	370c      	adds	r7, #12
    8256:	46bd      	mov	sp, r7
    8258:	f85d 7b04 	ldr.w	r7, [sp], #4
    825c:	4770      	bx	lr

0000825e <hri_usb_get_SYNCBUSY_reg>:
{
	return (((Usb *)hw)->HOST.SYNCBUSY.reg & USB_SYNCBUSY_ENABLE) >> USB_SYNCBUSY_ENABLE_Pos;
}

static inline hri_usb_syncbusy_reg_t hri_usb_get_SYNCBUSY_reg(const void *const hw, hri_usb_syncbusy_reg_t mask)
{
    825e:	b480      	push	{r7}
    8260:	b085      	sub	sp, #20
    8262:	af00      	add	r7, sp, #0
    8264:	6078      	str	r0, [r7, #4]
    8266:	460b      	mov	r3, r1
    8268:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	tmp = ((Usb *)hw)->HOST.SYNCBUSY.reg;
    826a:	687b      	ldr	r3, [r7, #4]
    826c:	789b      	ldrb	r3, [r3, #2]
    826e:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    8270:	7bfa      	ldrb	r2, [r7, #15]
    8272:	78fb      	ldrb	r3, [r7, #3]
    8274:	4013      	ands	r3, r2
    8276:	73fb      	strb	r3, [r7, #15]
	return tmp;
    8278:	7bfb      	ldrb	r3, [r7, #15]
}
    827a:	4618      	mov	r0, r3
    827c:	3714      	adds	r7, #20
    827e:	46bd      	mov	sp, r7
    8280:	f85d 7b04 	ldr.w	r7, [sp], #4
    8284:	4770      	bx	lr
	...

00008288 <hri_usb_clear_CTRLA_ENABLE_bit>:
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_SWRST | USB_SYNCBUSY_ENABLE);
	USB_CRITICAL_SECTION_LEAVE();
}

static inline void hri_usb_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    8288:	b580      	push	{r7, lr}
    828a:	b082      	sub	sp, #8
    828c:	af00      	add	r7, sp, #0
    828e:	6078      	str	r0, [r7, #4]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.CTRLA.reg &= ~USB_CTRLA_ENABLE;
    8290:	687b      	ldr	r3, [r7, #4]
    8292:	781b      	ldrb	r3, [r3, #0]
    8294:	b2db      	uxtb	r3, r3
    8296:	f023 0302 	bic.w	r3, r3, #2
    829a:	b2da      	uxtb	r2, r3
    829c:	687b      	ldr	r3, [r7, #4]
    829e:	701a      	strb	r2, [r3, #0]
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_SWRST | USB_SYNCBUSY_ENABLE);
    82a0:	2103      	movs	r1, #3
    82a2:	6878      	ldr	r0, [r7, #4]
    82a4:	4b02      	ldr	r3, [pc, #8]	; (82b0 <hri_usb_clear_CTRLA_ENABLE_bit+0x28>)
    82a6:	4798      	blx	r3
	USB_CRITICAL_SECTION_LEAVE();
}
    82a8:	bf00      	nop
    82aa:	3708      	adds	r7, #8
    82ac:	46bd      	mov	sp, r7
    82ae:	bd80      	pop	{r7, pc}
    82b0:	00007f3b 	.word	0x00007f3b

000082b4 <hri_usb_get_CTRLA_reg>:
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usb_ctrla_reg_t hri_usb_get_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t mask)
{
    82b4:	b580      	push	{r7, lr}
    82b6:	b084      	sub	sp, #16
    82b8:	af00      	add	r7, sp, #0
    82ba:	6078      	str	r0, [r7, #4]
    82bc:	460b      	mov	r3, r1
    82be:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
    82c0:	2103      	movs	r1, #3
    82c2:	6878      	ldr	r0, [r7, #4]
    82c4:	4b06      	ldr	r3, [pc, #24]	; (82e0 <hri_usb_get_CTRLA_reg+0x2c>)
    82c6:	4798      	blx	r3
	tmp = ((Usb *)hw)->HOST.CTRLA.reg;
    82c8:	687b      	ldr	r3, [r7, #4]
    82ca:	781b      	ldrb	r3, [r3, #0]
    82cc:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    82ce:	7bfa      	ldrb	r2, [r7, #15]
    82d0:	78fb      	ldrb	r3, [r7, #3]
    82d2:	4013      	ands	r3, r2
    82d4:	73fb      	strb	r3, [r7, #15]
	return tmp;
    82d6:	7bfb      	ldrb	r3, [r7, #15]
}
    82d8:	4618      	mov	r0, r3
    82da:	3710      	adds	r7, #16
    82dc:	46bd      	mov	sp, r7
    82de:	bd80      	pop	{r7, pc}
    82e0:	00007f3b 	.word	0x00007f3b

000082e4 <hri_usb_write_CTRLA_reg>:

static inline void hri_usb_write_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t data)
{
    82e4:	b580      	push	{r7, lr}
    82e6:	b082      	sub	sp, #8
    82e8:	af00      	add	r7, sp, #0
    82ea:	6078      	str	r0, [r7, #4]
    82ec:	460b      	mov	r3, r1
    82ee:	70fb      	strb	r3, [r7, #3]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.CTRLA.reg = data;
    82f0:	687b      	ldr	r3, [r7, #4]
    82f2:	78fa      	ldrb	r2, [r7, #3]
    82f4:	701a      	strb	r2, [r3, #0]
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
    82f6:	2103      	movs	r1, #3
    82f8:	6878      	ldr	r0, [r7, #4]
    82fa:	4b03      	ldr	r3, [pc, #12]	; (8308 <hri_usb_write_CTRLA_reg+0x24>)
    82fc:	4798      	blx	r3
	USB_CRITICAL_SECTION_LEAVE();
}
    82fe:	bf00      	nop
    8300:	3708      	adds	r7, #8
    8302:	46bd      	mov	sp, r7
    8304:	bd80      	pop	{r7, pc}
    8306:	bf00      	nop
    8308:	00007f3b 	.word	0x00007f3b

0000830c <hri_usb_read_CTRLA_reg>:
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usb_ctrla_reg_t hri_usb_read_CTRLA_reg(const void *const hw)
{
    830c:	b580      	push	{r7, lr}
    830e:	b082      	sub	sp, #8
    8310:	af00      	add	r7, sp, #0
    8312:	6078      	str	r0, [r7, #4]
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
    8314:	2103      	movs	r1, #3
    8316:	6878      	ldr	r0, [r7, #4]
    8318:	4b04      	ldr	r3, [pc, #16]	; (832c <hri_usb_read_CTRLA_reg+0x20>)
    831a:	4798      	blx	r3
	return ((Usb *)hw)->HOST.CTRLA.reg;
    831c:	687b      	ldr	r3, [r7, #4]
    831e:	781b      	ldrb	r3, [r3, #0]
    8320:	b2db      	uxtb	r3, r3
}
    8322:	4618      	mov	r0, r3
    8324:	3708      	adds	r7, #8
    8326:	46bd      	mov	sp, r7
    8328:	bd80      	pop	{r7, pc}
    832a:	bf00      	nop
    832c:	00007f3b 	.word	0x00007f3b

00008330 <hri_usbdevice_clear_CTRLB_DETACH_bit>:
	((Usb *)hw)->DEVICE.CTRLB.reg = tmp;
	USB_CRITICAL_SECTION_LEAVE();
}

static inline void hri_usbdevice_clear_CTRLB_DETACH_bit(const void *const hw)
{
    8330:	b480      	push	{r7}
    8332:	b083      	sub	sp, #12
    8334:	af00      	add	r7, sp, #0
    8336:	6078      	str	r0, [r7, #4]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->DEVICE.CTRLB.reg &= ~USB_DEVICE_CTRLB_DETACH;
    8338:	687b      	ldr	r3, [r7, #4]
    833a:	891b      	ldrh	r3, [r3, #8]
    833c:	b29b      	uxth	r3, r3
    833e:	f023 0301 	bic.w	r3, r3, #1
    8342:	b29a      	uxth	r2, r3
    8344:	687b      	ldr	r3, [r7, #4]
    8346:	811a      	strh	r2, [r3, #8]
	USB_CRITICAL_SECTION_LEAVE();
}
    8348:	bf00      	nop
    834a:	370c      	adds	r7, #12
    834c:	46bd      	mov	sp, r7
    834e:	f85d 7b04 	ldr.w	r7, [sp], #4
    8352:	4770      	bx	lr

00008354 <hri_usbdevice_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_usbdevice_write_CTRLB_reg(const void *const hw, hri_usbdevice_ctrlb_reg_t data)
{
    8354:	b480      	push	{r7}
    8356:	b083      	sub	sp, #12
    8358:	af00      	add	r7, sp, #0
    835a:	6078      	str	r0, [r7, #4]
    835c:	460b      	mov	r3, r1
    835e:	807b      	strh	r3, [r7, #2]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->DEVICE.CTRLB.reg = data;
    8360:	687b      	ldr	r3, [r7, #4]
    8362:	887a      	ldrh	r2, [r7, #2]
    8364:	811a      	strh	r2, [r3, #8]
	USB_CRITICAL_SECTION_LEAVE();
}
    8366:	bf00      	nop
    8368:	370c      	adds	r7, #12
    836a:	46bd      	mov	sp, r7
    836c:	f85d 7b04 	ldr.w	r7, [sp], #4
    8370:	4770      	bx	lr

00008372 <hri_usbdevice_write_DADD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_usbdevice_write_DADD_reg(const void *const hw, hri_usbdevice_dadd_reg_t data)
{
    8372:	b480      	push	{r7}
    8374:	b083      	sub	sp, #12
    8376:	af00      	add	r7, sp, #0
    8378:	6078      	str	r0, [r7, #4]
    837a:	460b      	mov	r3, r1
    837c:	70fb      	strb	r3, [r7, #3]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->DEVICE.DADD.reg = data;
    837e:	687b      	ldr	r3, [r7, #4]
    8380:	78fa      	ldrb	r2, [r7, #3]
    8382:	729a      	strb	r2, [r3, #10]
	USB_CRITICAL_SECTION_LEAVE();
}
    8384:	bf00      	nop
    8386:	370c      	adds	r7, #12
    8388:	46bd      	mov	sp, r7
    838a:	f85d 7b04 	ldr.w	r7, [sp], #4
    838e:	4770      	bx	lr

00008390 <hri_usb_write_DESCADD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_usb_write_DESCADD_reg(const void *const hw, hri_usb_descadd_reg_t data)
{
    8390:	b480      	push	{r7}
    8392:	b083      	sub	sp, #12
    8394:	af00      	add	r7, sp, #0
    8396:	6078      	str	r0, [r7, #4]
    8398:	6039      	str	r1, [r7, #0]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.DESCADD.reg = data;
    839a:	687b      	ldr	r3, [r7, #4]
    839c:	683a      	ldr	r2, [r7, #0]
    839e:	625a      	str	r2, [r3, #36]	; 0x24
	USB_CRITICAL_SECTION_LEAVE();
}
    83a0:	bf00      	nop
    83a2:	370c      	adds	r7, #12
    83a4:	46bd      	mov	sp, r7
    83a6:	f85d 7b04 	ldr.w	r7, [sp], #4
    83aa:	4770      	bx	lr

000083ac <_dummy_func_no_return>:
/**
 * \brief Dummy callback function
 * \return Always false.
 */
static bool _dummy_func_no_return(uint32_t unused0, uint32_t unused1)
{
    83ac:	b480      	push	{r7}
    83ae:	b083      	sub	sp, #12
    83b0:	af00      	add	r7, sp, #0
    83b2:	6078      	str	r0, [r7, #4]
    83b4:	6039      	str	r1, [r7, #0]
	(void)unused0;
	(void)unused1;
	return false;
    83b6:	2300      	movs	r3, #0
}
    83b8:	4618      	mov	r0, r3
    83ba:	370c      	adds	r7, #12
    83bc:	46bd      	mov	sp, r7
    83be:	f85d 7b04 	ldr.w	r7, [sp], #4
    83c2:	4770      	bx	lr

000083c4 <_usb_load_calib>:

/**
 * \brief Load USB calibration value from NVM
 */
static void _usb_load_calib(void)
{
    83c4:	b480      	push	{r7}
    83c6:	b085      	sub	sp, #20
    83c8:	af00      	add	r7, sp, #0
#define NVM_USB_PAD_TRANSN_SIZE 5
#define NVM_USB_PAD_TRANSP_POS 37
#define NVM_USB_PAD_TRANSP_SIZE 5
#define NVM_USB_PAD_TRIM_POS 42
#define NVM_USB_PAD_TRIM_SIZE 3
	Usb *    hw = USB;
    83ca:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    83ce:	603b      	str	r3, [r7, #0]
	uint32_t pad_transn
	    = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRANSN_POS / 32)) >> (NVM_USB_PAD_TRANSN_POS % 32))
    83d0:	4b28      	ldr	r3, [pc, #160]	; (8474 <_usb_load_calib+0xb0>)
    83d2:	681b      	ldr	r3, [r3, #0]
	uint32_t pad_transn
    83d4:	f003 031f 	and.w	r3, r3, #31
    83d8:	60fb      	str	r3, [r7, #12]
	      & ((1 << NVM_USB_PAD_TRANSN_SIZE) - 1);
	uint32_t pad_transp
	    = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRANSP_POS / 32)) >> (NVM_USB_PAD_TRANSP_POS % 32))
    83da:	4b26      	ldr	r3, [pc, #152]	; (8474 <_usb_load_calib+0xb0>)
    83dc:	681b      	ldr	r3, [r3, #0]
    83de:	095b      	lsrs	r3, r3, #5
	uint32_t pad_transp
    83e0:	f003 031f 	and.w	r3, r3, #31
    83e4:	60bb      	str	r3, [r7, #8]
	      & ((1 << NVM_USB_PAD_TRANSP_SIZE) - 1);
	uint32_t pad_trim = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRIM_POS / 32)) >> (NVM_USB_PAD_TRIM_POS % 32))
    83e6:	4b23      	ldr	r3, [pc, #140]	; (8474 <_usb_load_calib+0xb0>)
    83e8:	681b      	ldr	r3, [r3, #0]
    83ea:	0a9b      	lsrs	r3, r3, #10
    83ec:	f003 0307 	and.w	r3, r3, #7
    83f0:	607b      	str	r3, [r7, #4]
	                    & ((1 << NVM_USB_PAD_TRIM_SIZE) - 1);
	if (pad_transn == 0 || pad_transn == 0x1F) {
    83f2:	68fb      	ldr	r3, [r7, #12]
    83f4:	2b00      	cmp	r3, #0
    83f6:	d002      	beq.n	83fe <_usb_load_calib+0x3a>
    83f8:	68fb      	ldr	r3, [r7, #12]
    83fa:	2b1f      	cmp	r3, #31
    83fc:	d101      	bne.n	8402 <_usb_load_calib+0x3e>
		pad_transn = 9;
    83fe:	2309      	movs	r3, #9
    8400:	60fb      	str	r3, [r7, #12]
	}
	if (pad_transp == 0 || pad_transp == 0x1F) {
    8402:	68bb      	ldr	r3, [r7, #8]
    8404:	2b00      	cmp	r3, #0
    8406:	d002      	beq.n	840e <_usb_load_calib+0x4a>
    8408:	68bb      	ldr	r3, [r7, #8]
    840a:	2b1f      	cmp	r3, #31
    840c:	d101      	bne.n	8412 <_usb_load_calib+0x4e>
		pad_transp = 25;
    840e:	2319      	movs	r3, #25
    8410:	60bb      	str	r3, [r7, #8]
	}
	if (pad_trim == 0 || pad_trim == 0x7) {
    8412:	687b      	ldr	r3, [r7, #4]
    8414:	2b00      	cmp	r3, #0
    8416:	d002      	beq.n	841e <_usb_load_calib+0x5a>
    8418:	687b      	ldr	r3, [r7, #4]
    841a:	2b07      	cmp	r3, #7
    841c:	d101      	bne.n	8422 <_usb_load_calib+0x5e>
		pad_trim = 6;
    841e:	2306      	movs	r3, #6
    8420:	607b      	str	r3, [r7, #4]
	}

	hw->DEVICE.PADCAL.reg = USB_PADCAL_TRANSN(pad_transn) | USB_PADCAL_TRANSP(pad_transp) | USB_PADCAL_TRIM(pad_trim);
    8422:	68fb      	ldr	r3, [r7, #12]
    8424:	b29b      	uxth	r3, r3
    8426:	019b      	lsls	r3, r3, #6
    8428:	b29b      	uxth	r3, r3
    842a:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
    842e:	b29a      	uxth	r2, r3
    8430:	68bb      	ldr	r3, [r7, #8]
    8432:	b29b      	uxth	r3, r3
    8434:	f003 031f 	and.w	r3, r3, #31
    8438:	b29b      	uxth	r3, r3
    843a:	4313      	orrs	r3, r2
    843c:	b29a      	uxth	r2, r3
    843e:	687b      	ldr	r3, [r7, #4]
    8440:	b29b      	uxth	r3, r3
    8442:	031b      	lsls	r3, r3, #12
    8444:	b29b      	uxth	r3, r3
    8446:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
    844a:	b29b      	uxth	r3, r3
    844c:	4313      	orrs	r3, r2
    844e:	b29a      	uxth	r2, r3
    8450:	683b      	ldr	r3, [r7, #0]
    8452:	851a      	strh	r2, [r3, #40]	; 0x28

	hw->DEVICE.QOSCTRL.bit.CQOS = 3;
    8454:	683a      	ldr	r2, [r7, #0]
    8456:	78d3      	ldrb	r3, [r2, #3]
    8458:	f043 0303 	orr.w	r3, r3, #3
    845c:	70d3      	strb	r3, [r2, #3]
	hw->DEVICE.QOSCTRL.bit.DQOS = 3;
    845e:	683a      	ldr	r2, [r7, #0]
    8460:	78d3      	ldrb	r3, [r2, #3]
    8462:	f043 030c 	orr.w	r3, r3, #12
    8466:	70d3      	strb	r3, [r2, #3]
}
    8468:	bf00      	nop
    846a:	3714      	adds	r7, #20
    846c:	46bd      	mov	sp, r7
    846e:	f85d 7b04 	ldr.w	r7, [sp], #4
    8472:	4770      	bx	lr
    8474:	00800084 	.word	0x00800084

00008478 <_usb_d_dev_wait_dpll_rdy>:

/**
 * \brief Wait DPLL clock to be ready
 */
static inline void _usb_d_dev_wait_dpll_rdy(void)
{
    8478:	b580      	push	{r7, lr}
    847a:	af00      	add	r7, sp, #0
#define DPLL_READY_FLAG (OSCCTRL_DPLLSTATUS_CLKRDY | OSCCTRL_DPLLSTATUS_LOCK)
	while (hri_oscctrl_get_DPLLSTATUS_reg(OSCCTRL, 0, DPLL_READY_FLAG) != DPLL_READY_FLAG)
    847c:	bf00      	nop
    847e:	2203      	movs	r2, #3
    8480:	2100      	movs	r1, #0
    8482:	4804      	ldr	r0, [pc, #16]	; (8494 <_usb_d_dev_wait_dpll_rdy+0x1c>)
    8484:	4b04      	ldr	r3, [pc, #16]	; (8498 <_usb_d_dev_wait_dpll_rdy+0x20>)
    8486:	4798      	blx	r3
    8488:	4603      	mov	r3, r0
    848a:	2b03      	cmp	r3, #3
    848c:	d1f7      	bne.n	847e <_usb_d_dev_wait_dpll_rdy+0x6>
		;
}
    848e:	bf00      	nop
    8490:	bd80      	pop	{r7, pc}
    8492:	bf00      	nop
    8494:	40001000 	.word	0x40001000
    8498:	00007ead 	.word	0x00007ead

0000849c <_usb_d_dev_wait_dfll_rdy>:

/**
 * \brief Wait DFLL clock to be ready
 */
static inline void _usb_d_dev_wait_dfll_rdy(void)
{
    849c:	b580      	push	{r7, lr}
    849e:	af00      	add	r7, sp, #0
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(OSCCTRL)) {
    84a0:	480e      	ldr	r0, [pc, #56]	; (84dc <_usb_d_dev_wait_dfll_rdy+0x40>)
    84a2:	4b0f      	ldr	r3, [pc, #60]	; (84e0 <_usb_d_dev_wait_dfll_rdy+0x44>)
    84a4:	4798      	blx	r3
    84a6:	4603      	mov	r3, r0
    84a8:	2b00      	cmp	r3, #0
    84aa:	d00a      	beq.n	84c2 <_usb_d_dev_wait_dfll_rdy+0x26>
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, (OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC))
    84ac:	bf00      	nop
    84ae:	f44f 6110 	mov.w	r1, #2304	; 0x900
    84b2:	480a      	ldr	r0, [pc, #40]	; (84dc <_usb_d_dev_wait_dfll_rdy+0x40>)
    84b4:	4b0b      	ldr	r3, [pc, #44]	; (84e4 <_usb_d_dev_wait_dfll_rdy+0x48>)
    84b6:	4798      	blx	r3
    84b8:	4603      	mov	r3, r0
    84ba:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
    84be:	d1f6      	bne.n	84ae <_usb_d_dev_wait_dfll_rdy+0x12>
			;
	} else {
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, OSCCTRL_STATUS_DFLLRDY) != OSCCTRL_STATUS_DFLLRDY)
			;
	}
}
    84c0:	e009      	b.n	84d6 <_usb_d_dev_wait_dfll_rdy+0x3a>
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, OSCCTRL_STATUS_DFLLRDY) != OSCCTRL_STATUS_DFLLRDY)
    84c2:	bf00      	nop
    84c4:	f44f 7180 	mov.w	r1, #256	; 0x100
    84c8:	4804      	ldr	r0, [pc, #16]	; (84dc <_usb_d_dev_wait_dfll_rdy+0x40>)
    84ca:	4b06      	ldr	r3, [pc, #24]	; (84e4 <_usb_d_dev_wait_dfll_rdy+0x48>)
    84cc:	4798      	blx	r3
    84ce:	4603      	mov	r3, r0
    84d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    84d4:	d1f6      	bne.n	84c4 <_usb_d_dev_wait_dfll_rdy+0x28>
}
    84d6:	bf00      	nop
    84d8:	bd80      	pop	{r7, pc}
    84da:	bf00      	nop
    84dc:	40001000 	.word	0x40001000
    84e0:	00007f0b 	.word	0x00007f0b
    84e4:	00007ee5 	.word	0x00007ee5

000084e8 <_usb_d_dev_wait_clk_rdy>:
 * \brief Wait USB source clock to be ready
 * \param[in] clk_src Clock source, could be \ref USB_CLK_SRC_DFLL or
 *                    \ref USB_CLK_SRC_DPLL.
 */
static inline void _usb_d_dev_wait_clk_rdy(const uint8_t clk_src)
{
    84e8:	b580      	push	{r7, lr}
    84ea:	b082      	sub	sp, #8
    84ec:	af00      	add	r7, sp, #0
    84ee:	4603      	mov	r3, r0
    84f0:	71fb      	strb	r3, [r7, #7]
	if (clk_src == USB_CLK_SRC_DFLL) {
    84f2:	79fb      	ldrb	r3, [r7, #7]
    84f4:	2b00      	cmp	r3, #0
    84f6:	d102      	bne.n	84fe <_usb_d_dev_wait_clk_rdy+0x16>
		_usb_d_dev_wait_dfll_rdy();
    84f8:	4b05      	ldr	r3, [pc, #20]	; (8510 <_usb_d_dev_wait_clk_rdy+0x28>)
    84fa:	4798      	blx	r3
	} else if (clk_src == USB_CLK_SRC_DPLL) {
		_usb_d_dev_wait_dpll_rdy();
	}
}
    84fc:	e004      	b.n	8508 <_usb_d_dev_wait_clk_rdy+0x20>
	} else if (clk_src == USB_CLK_SRC_DPLL) {
    84fe:	79fb      	ldrb	r3, [r7, #7]
    8500:	2b01      	cmp	r3, #1
    8502:	d101      	bne.n	8508 <_usb_d_dev_wait_clk_rdy+0x20>
		_usb_d_dev_wait_dpll_rdy();
    8504:	4b03      	ldr	r3, [pc, #12]	; (8514 <_usb_d_dev_wait_clk_rdy+0x2c>)
    8506:	4798      	blx	r3
}
    8508:	bf00      	nop
    850a:	3708      	adds	r7, #8
    850c:	46bd      	mov	sp, r7
    850e:	bd80      	pop	{r7, pc}
    8510:	0000849d 	.word	0x0000849d
    8514:	00008479 	.word	0x00008479

00008518 <_usbd_ep_int_ack>:
/** \brief ACK the endpoint interrupt
 * \param[in] epn Endpoint number.
 * \param[in] flags Interrupt flags.
 */
static inline void _usbd_ep_int_ack(uint8_t epn, uint32_t flags)
{
    8518:	b580      	push	{r7, lr}
    851a:	b082      	sub	sp, #8
    851c:	af00      	add	r7, sp, #0
    851e:	4603      	mov	r3, r0
    8520:	6039      	str	r1, [r7, #0]
    8522:	71fb      	strb	r3, [r7, #7]
	hri_usbendpoint_clear_EPINTFLAG_reg(USB, epn, flags);
    8524:	683b      	ldr	r3, [r7, #0]
    8526:	b2da      	uxtb	r2, r3
    8528:	79fb      	ldrb	r3, [r7, #7]
    852a:	4619      	mov	r1, r3
    852c:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8530:	4b02      	ldr	r3, [pc, #8]	; (853c <_usbd_ep_int_ack+0x24>)
    8532:	4798      	blx	r3
}
    8534:	bf00      	nop
    8536:	3708      	adds	r7, #8
    8538:	46bd      	mov	sp, r7
    853a:	bd80      	pop	{r7, pc}
    853c:	00007ff1 	.word	0x00007ff1

00008540 <_usbd_ep_int_en>:
/** \brief Enable the endpoint interrupt
 * \param[in] epn Endpoint number.
 * \param[in] flags Interrupt flags.
 */
static inline void _usbd_ep_int_en(uint8_t epn, uint32_t flags)
{
    8540:	b580      	push	{r7, lr}
    8542:	b082      	sub	sp, #8
    8544:	af00      	add	r7, sp, #0
    8546:	4603      	mov	r3, r0
    8548:	6039      	str	r1, [r7, #0]
    854a:	71fb      	strb	r3, [r7, #7]
	hri_usbendpoint_set_EPINTEN_reg(USB, epn, flags);
    854c:	683b      	ldr	r3, [r7, #0]
    854e:	b2da      	uxtb	r2, r3
    8550:	79fb      	ldrb	r3, [r7, #7]
    8552:	4619      	mov	r1, r3
    8554:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8558:	4b02      	ldr	r3, [pc, #8]	; (8564 <_usbd_ep_int_en+0x24>)
    855a:	4798      	blx	r3
}
    855c:	bf00      	nop
    855e:	3708      	adds	r7, #8
    8560:	46bd      	mov	sp, r7
    8562:	bd80      	pop	{r7, pc}
    8564:	000080c5 	.word	0x000080c5

00008568 <_usbd_ep_int_dis>:
/** \brief Disable the endpoint interrupt
 * \param[in] epn Endpoint number.
 * \param[in] flags Interrupt flags.
 */
static inline void _usbd_ep_int_dis(uint8_t epn, uint32_t flags)
{
    8568:	b580      	push	{r7, lr}
    856a:	b082      	sub	sp, #8
    856c:	af00      	add	r7, sp, #0
    856e:	4603      	mov	r3, r0
    8570:	6039      	str	r1, [r7, #0]
    8572:	71fb      	strb	r3, [r7, #7]
	hri_usbendpoint_clear_EPINTEN_reg(USB, epn, flags);
    8574:	683b      	ldr	r3, [r7, #0]
    8576:	b2da      	uxtb	r2, r3
    8578:	79fb      	ldrb	r3, [r7, #7]
    857a:	4619      	mov	r1, r3
    857c:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8580:	4b02      	ldr	r3, [pc, #8]	; (858c <_usbd_ep_int_dis+0x24>)
    8582:	4798      	blx	r3
}
    8584:	bf00      	nop
    8586:	3708      	adds	r7, #8
    8588:	46bd      	mov	sp, r7
    858a:	bd80      	pop	{r7, pc}
    858c:	000080f1 	.word	0x000080f1

00008590 <_usbd_ep_is_ctrl>:

/** \brief Check if endpoint is control endpoint
 * \param[in] epn Endpoint number.
 */
static inline bool _usbd_ep_is_ctrl(uint8_t epn)
{
    8590:	b580      	push	{r7, lr}
    8592:	b082      	sub	sp, #8
    8594:	af00      	add	r7, sp, #0
    8596:	4603      	mov	r3, r0
    8598:	71fb      	strb	r3, [r7, #7]
	return (hri_usbendpoint_read_EPCFG_reg(USB, epn) == USB_D_EPCFG_CTRL);
    859a:	79fb      	ldrb	r3, [r7, #7]
    859c:	4619      	mov	r1, r3
    859e:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    85a2:	4b06      	ldr	r3, [pc, #24]	; (85bc <_usbd_ep_is_ctrl+0x2c>)
    85a4:	4798      	blx	r3
    85a6:	4603      	mov	r3, r0
    85a8:	2b11      	cmp	r3, #17
    85aa:	bf0c      	ite	eq
    85ac:	2301      	moveq	r3, #1
    85ae:	2300      	movne	r3, #0
    85b0:	b2db      	uxtb	r3, r3
}
    85b2:	4618      	mov	r0, r3
    85b4:	3708      	adds	r7, #8
    85b6:	46bd      	mov	sp, r7
    85b8:	bd80      	pop	{r7, pc}
    85ba:	bf00      	nop
    85bc:	000081ab 	.word	0x000081ab

000085c0 <_usbd_ep_set_stall>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] st Stall status.
 */
static inline void _usbd_ep_set_stall(uint8_t epn, uint8_t bank_n, bool st)
{
    85c0:	b580      	push	{r7, lr}
    85c2:	b082      	sub	sp, #8
    85c4:	af00      	add	r7, sp, #0
    85c6:	4603      	mov	r3, r0
    85c8:	71fb      	strb	r3, [r7, #7]
    85ca:	460b      	mov	r3, r1
    85cc:	71bb      	strb	r3, [r7, #6]
    85ce:	4613      	mov	r3, r2
    85d0:	717b      	strb	r3, [r7, #5]
	if (st) {
    85d2:	797b      	ldrb	r3, [r7, #5]
    85d4:	2b00      	cmp	r3, #0
    85d6:	d00b      	beq.n	85f0 <_usbd_ep_set_stall+0x30>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    85d8:	79bb      	ldrb	r3, [r7, #6]
    85da:	2210      	movs	r2, #16
    85dc:	fa02 f303 	lsl.w	r3, r2, r3
    85e0:	b2da      	uxtb	r2, r3
    85e2:	79fb      	ldrb	r3, [r7, #7]
    85e4:	4619      	mov	r1, r3
    85e6:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    85ea:	4b09      	ldr	r3, [pc, #36]	; (8610 <_usbd_ep_set_stall+0x50>)
    85ec:	4798      	blx	r3
	} else {
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
	}
}
    85ee:	e00a      	b.n	8606 <_usbd_ep_set_stall+0x46>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    85f0:	79bb      	ldrb	r3, [r7, #6]
    85f2:	2210      	movs	r2, #16
    85f4:	fa02 f303 	lsl.w	r3, r2, r3
    85f8:	b2da      	uxtb	r2, r3
    85fa:	79fb      	ldrb	r3, [r7, #7]
    85fc:	4619      	mov	r1, r3
    85fe:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8602:	4b04      	ldr	r3, [pc, #16]	; (8614 <_usbd_ep_set_stall+0x54>)
    8604:	4798      	blx	r3
}
    8606:	bf00      	nop
    8608:	3708      	adds	r7, #8
    860a:	46bd      	mov	sp, r7
    860c:	bd80      	pop	{r7, pc}
    860e:	bf00      	nop
    8610:	0000801d 	.word	0x0000801d
    8614:	00008071 	.word	0x00008071

00008618 <_usbd_ep_is_stalled>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \return \c true if it's stalled.
 */
static inline bool _usbd_ep_is_stalled(uint8_t epn, uint8_t bank_n)
{
    8618:	b580      	push	{r7, lr}
    861a:	b084      	sub	sp, #16
    861c:	af00      	add	r7, sp, #0
    861e:	4603      	mov	r3, r0
    8620:	460a      	mov	r2, r1
    8622:	71fb      	strb	r3, [r7, #7]
    8624:	4613      	mov	r3, r2
    8626:	71bb      	strb	r3, [r7, #6]
	Usb *hw = USB;
    8628:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    862c:	60fb      	str	r3, [r7, #12]
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    862e:	79fb      	ldrb	r3, [r7, #7]
    8630:	4619      	mov	r1, r3
    8632:	68f8      	ldr	r0, [r7, #12]
    8634:	4b08      	ldr	r3, [pc, #32]	; (8658 <_usbd_ep_is_stalled+0x40>)
    8636:	4798      	blx	r3
    8638:	4603      	mov	r3, r0
    863a:	4619      	mov	r1, r3
    863c:	79bb      	ldrb	r3, [r7, #6]
    863e:	2210      	movs	r2, #16
    8640:	fa02 f303 	lsl.w	r3, r2, r3
    8644:	400b      	ands	r3, r1
    8646:	2b00      	cmp	r3, #0
    8648:	bf14      	ite	ne
    864a:	2301      	movne	r3, #1
    864c:	2300      	moveq	r3, #0
    864e:	b2db      	uxtb	r3, r3
}
    8650:	4618      	mov	r0, r3
    8652:	3710      	adds	r7, #16
    8654:	46bd      	mov	sp, r7
    8656:	bd80      	pop	{r7, pc}
    8658:	00008049 	.word	0x00008049

0000865c <_usbd_ep_is_stall_sent>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \return \c true if it's sent.
 */
static inline bool _usbd_ep_is_stall_sent(uint8_t epn, uint8_t bank_n)
{
    865c:	b580      	push	{r7, lr}
    865e:	b084      	sub	sp, #16
    8660:	af00      	add	r7, sp, #0
    8662:	4603      	mov	r3, r0
    8664:	460a      	mov	r2, r1
    8666:	71fb      	strb	r3, [r7, #7]
    8668:	4613      	mov	r3, r2
    866a:	71bb      	strb	r3, [r7, #6]
	Usb *hw = USB;
    866c:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    8670:	60fb      	str	r3, [r7, #12]
	return (hri_usbendpoint_read_EPINTFLAG_reg(hw, epn) & (USB_DEVICE_EPINTFLAG_STALL0 << bank_n));
    8672:	79fb      	ldrb	r3, [r7, #7]
    8674:	4619      	mov	r1, r3
    8676:	68f8      	ldr	r0, [r7, #12]
    8678:	4b08      	ldr	r3, [pc, #32]	; (869c <_usbd_ep_is_stall_sent+0x40>)
    867a:	4798      	blx	r3
    867c:	4603      	mov	r3, r0
    867e:	4619      	mov	r1, r3
    8680:	79bb      	ldrb	r3, [r7, #6]
    8682:	2220      	movs	r2, #32
    8684:	fa02 f303 	lsl.w	r3, r2, r3
    8688:	400b      	ands	r3, r1
    868a:	2b00      	cmp	r3, #0
    868c:	bf14      	ite	ne
    868e:	2301      	movne	r3, #1
    8690:	2300      	moveq	r3, #0
    8692:	b2db      	uxtb	r3, r3
}
    8694:	4618      	mov	r0, r3
    8696:	3710      	adds	r7, #16
    8698:	46bd      	mov	sp, r7
    869a:	bd80      	pop	{r7, pc}
    869c:	00007fc9 	.word	0x00007fc9

000086a0 <_usbd_ep_ack_stall>:
/** \brief ACK endpoint STALL interrupt
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 */
static inline void _usbd_ep_ack_stall(uint8_t epn, uint8_t bank_n)
{
    86a0:	b580      	push	{r7, lr}
    86a2:	b082      	sub	sp, #8
    86a4:	af00      	add	r7, sp, #0
    86a6:	4603      	mov	r3, r0
    86a8:	460a      	mov	r2, r1
    86aa:	71fb      	strb	r3, [r7, #7]
    86ac:	4613      	mov	r3, r2
    86ae:	71bb      	strb	r3, [r7, #6]
	_usbd_ep_int_ack(epn, (USB_DEVICE_EPINTFLAG_STALL0 << bank_n));
    86b0:	79bb      	ldrb	r3, [r7, #6]
    86b2:	2220      	movs	r2, #32
    86b4:	409a      	lsls	r2, r3
    86b6:	79fb      	ldrb	r3, [r7, #7]
    86b8:	4611      	mov	r1, r2
    86ba:	4618      	mov	r0, r3
    86bc:	4b02      	ldr	r3, [pc, #8]	; (86c8 <_usbd_ep_ack_stall+0x28>)
    86be:	4798      	blx	r3
}
    86c0:	bf00      	nop
    86c2:	3708      	adds	r7, #8
    86c4:	46bd      	mov	sp, r7
    86c6:	bd80      	pop	{r7, pc}
    86c8:	00008519 	.word	0x00008519

000086cc <_usbd_ep_int_stall_en>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] en \c true to enable, \c false to disable.
 */
static inline void _usbd_ep_int_stall_en(uint8_t epn, uint8_t bank_n, const bool en)
{
    86cc:	b580      	push	{r7, lr}
    86ce:	b082      	sub	sp, #8
    86d0:	af00      	add	r7, sp, #0
    86d2:	4603      	mov	r3, r0
    86d4:	71fb      	strb	r3, [r7, #7]
    86d6:	460b      	mov	r3, r1
    86d8:	71bb      	strb	r3, [r7, #6]
    86da:	4613      	mov	r3, r2
    86dc:	717b      	strb	r3, [r7, #5]
	if (en) {
    86de:	797b      	ldrb	r3, [r7, #5]
    86e0:	2b00      	cmp	r3, #0
    86e2:	d008      	beq.n	86f6 <_usbd_ep_int_stall_en+0x2a>
		_usbd_ep_int_en(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
    86e4:	79bb      	ldrb	r3, [r7, #6]
    86e6:	2220      	movs	r2, #32
    86e8:	409a      	lsls	r2, r3
    86ea:	79fb      	ldrb	r3, [r7, #7]
    86ec:	4611      	mov	r1, r2
    86ee:	4618      	mov	r0, r3
    86f0:	4b07      	ldr	r3, [pc, #28]	; (8710 <_usbd_ep_int_stall_en+0x44>)
    86f2:	4798      	blx	r3
	} else {
		_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
	}
}
    86f4:	e007      	b.n	8706 <_usbd_ep_int_stall_en+0x3a>
		_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
    86f6:	79bb      	ldrb	r3, [r7, #6]
    86f8:	2220      	movs	r2, #32
    86fa:	409a      	lsls	r2, r3
    86fc:	79fb      	ldrb	r3, [r7, #7]
    86fe:	4611      	mov	r1, r2
    8700:	4618      	mov	r0, r3
    8702:	4b04      	ldr	r3, [pc, #16]	; (8714 <_usbd_ep_int_stall_en+0x48>)
    8704:	4798      	blx	r3
}
    8706:	bf00      	nop
    8708:	3708      	adds	r7, #8
    870a:	46bd      	mov	sp, r7
    870c:	bd80      	pop	{r7, pc}
    870e:	bf00      	nop
    8710:	00008541 	.word	0x00008541
    8714:	00008569 	.word	0x00008569

00008718 <_usbd_ep_stop_setup>:

/** \brief Stop SETUP transactions
 * \param[in] epn Endpoint number.
 */
static inline void _usbd_ep_stop_setup(uint8_t epn)
{
    8718:	b580      	push	{r7, lr}
    871a:	b082      	sub	sp, #8
    871c:	af00      	add	r7, sp, #0
    871e:	4603      	mov	r3, r0
    8720:	71fb      	strb	r3, [r7, #7]
	hri_usbendpoint_clear_EPINTEN_RXSTP_bit(USB, epn);
    8722:	79fb      	ldrb	r3, [r7, #7]
    8724:	4619      	mov	r1, r3
    8726:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    872a:	4b03      	ldr	r3, [pc, #12]	; (8738 <_usbd_ep_stop_setup+0x20>)
    872c:	4798      	blx	r3
}
    872e:	bf00      	nop
    8730:	3708      	adds	r7, #8
    8732:	46bd      	mov	sp, r7
    8734:	bd80      	pop	{r7, pc}
    8736:	bf00      	nop
    8738:	0000809d 	.word	0x0000809d

0000873c <_usbd_ep_is_setup>:

/** \brief Check if SETUP packet is ready in cache
 * \param[in] epn Endpoint number.
 */
static inline bool _usbd_ep_is_setup(uint8_t epn)
{
    873c:	b580      	push	{r7, lr}
    873e:	b082      	sub	sp, #8
    8740:	af00      	add	r7, sp, #0
    8742:	4603      	mov	r3, r0
    8744:	71fb      	strb	r3, [r7, #7]
	return hri_usbendpoint_get_EPINTFLAG_reg(USB, epn, USB_DEVICE_EPINTFLAG_RXSTP);
    8746:	79fb      	ldrb	r3, [r7, #7]
    8748:	2210      	movs	r2, #16
    874a:	4619      	mov	r1, r3
    874c:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8750:	4b05      	ldr	r3, [pc, #20]	; (8768 <_usbd_ep_is_setup+0x2c>)
    8752:	4798      	blx	r3
    8754:	4603      	mov	r3, r0
    8756:	2b00      	cmp	r3, #0
    8758:	bf14      	ite	ne
    875a:	2301      	movne	r3, #1
    875c:	2300      	moveq	r3, #0
    875e:	b2db      	uxtb	r3, r3
}
    8760:	4618      	mov	r0, r3
    8762:	3708      	adds	r7, #8
    8764:	46bd      	mov	sp, r7
    8766:	bd80      	pop	{r7, pc}
    8768:	00007f93 	.word	0x00007f93

0000876c <_usbd_ep_ack_setup>:

/** \brief ACK endpoint SETUP interrupt
 * \param[in] epn Endpoint number.
 */
static inline void _usbd_ep_ack_setup(uint8_t epn)
{
    876c:	b580      	push	{r7, lr}
    876e:	b082      	sub	sp, #8
    8770:	af00      	add	r7, sp, #0
    8772:	4603      	mov	r3, r0
    8774:	71fb      	strb	r3, [r7, #7]
	_usbd_ep_int_ack(epn, USB_DEVICE_EPINTFLAG_RXSTP);
    8776:	79fb      	ldrb	r3, [r7, #7]
    8778:	2110      	movs	r1, #16
    877a:	4618      	mov	r0, r3
    877c:	4b02      	ldr	r3, [pc, #8]	; (8788 <_usbd_ep_ack_setup+0x1c>)
    877e:	4798      	blx	r3
}
    8780:	bf00      	nop
    8782:	3708      	adds	r7, #8
    8784:	46bd      	mov	sp, r7
    8786:	bd80      	pop	{r7, pc}
    8788:	00008519 	.word	0x00008519

0000878c <_usbd_ep_set_toggle>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] tgl Toggle value.
 */
static inline void _usbd_ep_set_toggle(uint8_t epn, uint8_t bank_n, uint8_t tgl)
{
    878c:	b580      	push	{r7, lr}
    878e:	b082      	sub	sp, #8
    8790:	af00      	add	r7, sp, #0
    8792:	4603      	mov	r3, r0
    8794:	71fb      	strb	r3, [r7, #7]
    8796:	460b      	mov	r3, r1
    8798:	71bb      	strb	r3, [r7, #6]
    879a:	4613      	mov	r3, r2
    879c:	717b      	strb	r3, [r7, #5]
	if (tgl) {
    879e:	797b      	ldrb	r3, [r7, #5]
    87a0:	2b00      	cmp	r3, #0
    87a2:	d00b      	beq.n	87bc <_usbd_ep_set_toggle+0x30>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
    87a4:	79bb      	ldrb	r3, [r7, #6]
    87a6:	2201      	movs	r2, #1
    87a8:	fa02 f303 	lsl.w	r3, r2, r3
    87ac:	b2da      	uxtb	r2, r3
    87ae:	79fb      	ldrb	r3, [r7, #7]
    87b0:	4619      	mov	r1, r3
    87b2:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    87b6:	4b09      	ldr	r3, [pc, #36]	; (87dc <_usbd_ep_set_toggle+0x50>)
    87b8:	4798      	blx	r3
	} else {
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
	}
}
    87ba:	e00a      	b.n	87d2 <_usbd_ep_set_toggle+0x46>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
    87bc:	79bb      	ldrb	r3, [r7, #6]
    87be:	2201      	movs	r2, #1
    87c0:	fa02 f303 	lsl.w	r3, r2, r3
    87c4:	b2da      	uxtb	r2, r3
    87c6:	79fb      	ldrb	r3, [r7, #7]
    87c8:	4619      	mov	r1, r3
    87ca:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    87ce:	4b04      	ldr	r3, [pc, #16]	; (87e0 <_usbd_ep_set_toggle+0x54>)
    87d0:	4798      	blx	r3
}
    87d2:	bf00      	nop
    87d4:	3708      	adds	r7, #8
    87d6:	46bd      	mov	sp, r7
    87d8:	bd80      	pop	{r7, pc}
    87da:	bf00      	nop
    87dc:	0000801d 	.word	0x0000801d
    87e0:	00008071 	.word	0x00008071

000087e4 <_usbd_ep_ack_io_cpt>:
/** \brief ACK IN/OUT complete interrupt
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 */
static inline void _usbd_ep_ack_io_cpt(uint8_t epn, uint8_t bank_n)
{
    87e4:	b580      	push	{r7, lr}
    87e6:	b082      	sub	sp, #8
    87e8:	af00      	add	r7, sp, #0
    87ea:	4603      	mov	r3, r0
    87ec:	460a      	mov	r2, r1
    87ee:	71fb      	strb	r3, [r7, #7]
    87f0:	4613      	mov	r3, r2
    87f2:	71bb      	strb	r3, [r7, #6]
	_usbd_ep_int_ack(epn, USB_DEVICE_EPINTFLAG_TRCPT0 << bank_n);
    87f4:	79bb      	ldrb	r3, [r7, #6]
    87f6:	2201      	movs	r2, #1
    87f8:	409a      	lsls	r2, r3
    87fa:	79fb      	ldrb	r3, [r7, #7]
    87fc:	4611      	mov	r1, r2
    87fe:	4618      	mov	r0, r3
    8800:	4b02      	ldr	r3, [pc, #8]	; (880c <_usbd_ep_ack_io_cpt+0x28>)
    8802:	4798      	blx	r3
}
    8804:	bf00      	nop
    8806:	3708      	adds	r7, #8
    8808:	46bd      	mov	sp, r7
    880a:	bd80      	pop	{r7, pc}
    880c:	00008519 	.word	0x00008519

00008810 <_usbd_ep_set_buf>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] addr DMA buffer address to set.
 */
static inline void _usbd_ep_set_buf(uint8_t epn, uint8_t bank_n, uint32_t addr)
{
    8810:	b480      	push	{r7}
    8812:	b085      	sub	sp, #20
    8814:	af00      	add	r7, sp, #0
    8816:	4603      	mov	r3, r0
    8818:	603a      	str	r2, [r7, #0]
    881a:	71fb      	strb	r3, [r7, #7]
    881c:	460b      	mov	r3, r1
    881e:	71bb      	strb	r3, [r7, #6]
	UsbDeviceDescBank *bank = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    8820:	79fa      	ldrb	r2, [r7, #7]
    8822:	79bb      	ldrb	r3, [r7, #6]
    8824:	0052      	lsls	r2, r2, #1
    8826:	4413      	add	r3, r2
    8828:	011b      	lsls	r3, r3, #4
    882a:	4a06      	ldr	r2, [pc, #24]	; (8844 <_usbd_ep_set_buf+0x34>)
    882c:	4413      	add	r3, r2
    882e:	60fb      	str	r3, [r7, #12]
	bank->ADDR.reg          = addr;
    8830:	68fb      	ldr	r3, [r7, #12]
    8832:	683a      	ldr	r2, [r7, #0]
    8834:	601a      	str	r2, [r3, #0]
}
    8836:	bf00      	nop
    8838:	3714      	adds	r7, #20
    883a:	46bd      	mov	sp, r7
    883c:	f85d 7b04 	ldr.w	r7, [sp], #4
    8840:	4770      	bx	lr
    8842:	bf00      	nop
    8844:	20001064 	.word	0x20001064

00008848 <_usbd_ep_set_in_count>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] count Data count for IN.
 */
static inline void _usbd_ep_set_in_count(uint8_t epn, uint8_t bank_n, uint16_t count)
{
    8848:	b480      	push	{r7}
    884a:	b085      	sub	sp, #20
    884c:	af00      	add	r7, sp, #0
    884e:	4603      	mov	r3, r0
    8850:	71fb      	strb	r3, [r7, #7]
    8852:	460b      	mov	r3, r1
    8854:	71bb      	strb	r3, [r7, #6]
    8856:	4613      	mov	r3, r2
    8858:	80bb      	strh	r3, [r7, #4]
	UsbDeviceDescBank *bank             = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    885a:	79fa      	ldrb	r2, [r7, #7]
    885c:	79bb      	ldrb	r3, [r7, #6]
    885e:	0052      	lsls	r2, r2, #1
    8860:	4413      	add	r3, r2
    8862:	011b      	lsls	r3, r3, #4
    8864:	4a08      	ldr	r2, [pc, #32]	; (8888 <_usbd_ep_set_in_count+0x40>)
    8866:	4413      	add	r3, r2
    8868:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
    886a:	88bb      	ldrh	r3, [r7, #4]
    886c:	f3c3 030d 	ubfx	r3, r3, #0, #14
    8870:	b299      	uxth	r1, r3
    8872:	68fa      	ldr	r2, [r7, #12]
    8874:	6853      	ldr	r3, [r2, #4]
    8876:	f361 339b 	bfi	r3, r1, #14, #14
    887a:	6053      	str	r3, [r2, #4]
}
    887c:	bf00      	nop
    887e:	3714      	adds	r7, #20
    8880:	46bd      	mov	sp, r7
    8882:	f85d 7b04 	ldr.w	r7, [sp], #4
    8886:	4770      	bx	lr
    8888:	20001064 	.word	0x20001064

0000888c <_usbd_ep_set_in_size>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size for IN.
 */
static inline void _usbd_ep_set_in_size(uint8_t epn, uint8_t bank_n, uint16_t size)
{
    888c:	b480      	push	{r7}
    888e:	b085      	sub	sp, #20
    8890:	af00      	add	r7, sp, #0
    8892:	4603      	mov	r3, r0
    8894:	71fb      	strb	r3, [r7, #7]
    8896:	460b      	mov	r3, r1
    8898:	71bb      	strb	r3, [r7, #6]
    889a:	4613      	mov	r3, r2
    889c:	80bb      	strh	r3, [r7, #4]
	UsbDeviceDescBank *bank      = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    889e:	79fa      	ldrb	r2, [r7, #7]
    88a0:	79bb      	ldrb	r3, [r7, #6]
    88a2:	0052      	lsls	r2, r2, #1
    88a4:	4413      	add	r3, r2
    88a6:	011b      	lsls	r3, r3, #4
    88a8:	4a08      	ldr	r2, [pc, #32]	; (88cc <_usbd_ep_set_in_size+0x40>)
    88aa:	4413      	add	r3, r2
    88ac:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
    88ae:	88bb      	ldrh	r3, [r7, #4]
    88b0:	f3c3 030d 	ubfx	r3, r3, #0, #14
    88b4:	b299      	uxth	r1, r3
    88b6:	68fa      	ldr	r2, [r7, #12]
    88b8:	6853      	ldr	r3, [r2, #4]
    88ba:	f361 030d 	bfi	r3, r1, #0, #14
    88be:	6053      	str	r3, [r2, #4]
}
    88c0:	bf00      	nop
    88c2:	3714      	adds	r7, #20
    88c4:	46bd      	mov	sp, r7
    88c6:	f85d 7b04 	ldr.w	r7, [sp], #4
    88ca:	4770      	bx	lr
    88cc:	20001064 	.word	0x20001064

000088d0 <_usbd_ep_set_out_count>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] count Data count for OUT.
 */
static inline void _usbd_ep_set_out_count(uint8_t epn, uint8_t bank_n, uint16_t count)
{
    88d0:	b480      	push	{r7}
    88d2:	b085      	sub	sp, #20
    88d4:	af00      	add	r7, sp, #0
    88d6:	4603      	mov	r3, r0
    88d8:	71fb      	strb	r3, [r7, #7]
    88da:	460b      	mov	r3, r1
    88dc:	71bb      	strb	r3, [r7, #6]
    88de:	4613      	mov	r3, r2
    88e0:	80bb      	strh	r3, [r7, #4]
	UsbDeviceDescBank *bank      = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    88e2:	79fa      	ldrb	r2, [r7, #7]
    88e4:	79bb      	ldrb	r3, [r7, #6]
    88e6:	0052      	lsls	r2, r2, #1
    88e8:	4413      	add	r3, r2
    88ea:	011b      	lsls	r3, r3, #4
    88ec:	4a08      	ldr	r2, [pc, #32]	; (8910 <_usbd_ep_set_out_count+0x40>)
    88ee:	4413      	add	r3, r2
    88f0:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    88f2:	88bb      	ldrh	r3, [r7, #4]
    88f4:	f3c3 030d 	ubfx	r3, r3, #0, #14
    88f8:	b299      	uxth	r1, r3
    88fa:	68fa      	ldr	r2, [r7, #12]
    88fc:	6853      	ldr	r3, [r2, #4]
    88fe:	f361 030d 	bfi	r3, r1, #0, #14
    8902:	6053      	str	r3, [r2, #4]
}
    8904:	bf00      	nop
    8906:	3714      	adds	r7, #20
    8908:	46bd      	mov	sp, r7
    890a:	f85d 7b04 	ldr.w	r7, [sp], #4
    890e:	4770      	bx	lr
    8910:	20001064 	.word	0x20001064

00008914 <_usbd_ep_set_out_size>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size for OUT.
 */
static inline void _usbd_ep_set_out_size(uint8_t epn, uint8_t bank_n, uint16_t size)
{
    8914:	b480      	push	{r7}
    8916:	b085      	sub	sp, #20
    8918:	af00      	add	r7, sp, #0
    891a:	4603      	mov	r3, r0
    891c:	71fb      	strb	r3, [r7, #7]
    891e:	460b      	mov	r3, r1
    8920:	71bb      	strb	r3, [r7, #6]
    8922:	4613      	mov	r3, r2
    8924:	80bb      	strh	r3, [r7, #4]
	UsbDeviceDescBank *bank             = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    8926:	79fa      	ldrb	r2, [r7, #7]
    8928:	79bb      	ldrb	r3, [r7, #6]
    892a:	0052      	lsls	r2, r2, #1
    892c:	4413      	add	r3, r2
    892e:	011b      	lsls	r3, r3, #4
    8930:	4a08      	ldr	r2, [pc, #32]	; (8954 <_usbd_ep_set_out_size+0x40>)
    8932:	4413      	add	r3, r2
    8934:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    8936:	88bb      	ldrh	r3, [r7, #4]
    8938:	f3c3 030d 	ubfx	r3, r3, #0, #14
    893c:	b299      	uxth	r1, r3
    893e:	68fa      	ldr	r2, [r7, #12]
    8940:	6853      	ldr	r3, [r2, #4]
    8942:	f361 339b 	bfi	r3, r1, #14, #14
    8946:	6053      	str	r3, [r2, #4]
}
    8948:	bf00      	nop
    894a:	3714      	adds	r7, #20
    894c:	46bd      	mov	sp, r7
    894e:	f85d 7b04 	ldr.w	r7, [sp], #4
    8952:	4770      	bx	lr
    8954:	20001064 	.word	0x20001064

00008958 <_usbd_ep_set_in_trans>:
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size.
 * \param[in] count Initial data count.
 */
static inline void _usbd_ep_set_in_trans(uint8_t epn, uint8_t bank_n, uint32_t size, uint32_t count)
{
    8958:	b580      	push	{r7, lr}
    895a:	b084      	sub	sp, #16
    895c:	af00      	add	r7, sp, #0
    895e:	60ba      	str	r2, [r7, #8]
    8960:	607b      	str	r3, [r7, #4]
    8962:	4603      	mov	r3, r0
    8964:	73fb      	strb	r3, [r7, #15]
    8966:	460b      	mov	r3, r1
    8968:	73bb      	strb	r3, [r7, #14]
	_usbd_ep_set_in_size(epn, bank_n, size);
    896a:	68bb      	ldr	r3, [r7, #8]
    896c:	b29a      	uxth	r2, r3
    896e:	7bb9      	ldrb	r1, [r7, #14]
    8970:	7bfb      	ldrb	r3, [r7, #15]
    8972:	4618      	mov	r0, r3
    8974:	4b06      	ldr	r3, [pc, #24]	; (8990 <_usbd_ep_set_in_trans+0x38>)
    8976:	4798      	blx	r3
	_usbd_ep_set_in_count(epn, bank_n, count);
    8978:	687b      	ldr	r3, [r7, #4]
    897a:	b29a      	uxth	r2, r3
    897c:	7bb9      	ldrb	r1, [r7, #14]
    897e:	7bfb      	ldrb	r3, [r7, #15]
    8980:	4618      	mov	r0, r3
    8982:	4b04      	ldr	r3, [pc, #16]	; (8994 <_usbd_ep_set_in_trans+0x3c>)
    8984:	4798      	blx	r3
}
    8986:	bf00      	nop
    8988:	3710      	adds	r7, #16
    898a:	46bd      	mov	sp, r7
    898c:	bd80      	pop	{r7, pc}
    898e:	bf00      	nop
    8990:	0000888d 	.word	0x0000888d
    8994:	00008849 	.word	0x00008849

00008998 <_usbd_ep_set_out_trans>:
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size.
 * \param[in] count Initial data count.
 */
static inline void _usbd_ep_set_out_trans(uint8_t epn, uint8_t bank_n, uint32_t size, uint32_t count)
{
    8998:	b580      	push	{r7, lr}
    899a:	b084      	sub	sp, #16
    899c:	af00      	add	r7, sp, #0
    899e:	60ba      	str	r2, [r7, #8]
    89a0:	607b      	str	r3, [r7, #4]
    89a2:	4603      	mov	r3, r0
    89a4:	73fb      	strb	r3, [r7, #15]
    89a6:	460b      	mov	r3, r1
    89a8:	73bb      	strb	r3, [r7, #14]
	_usbd_ep_set_out_size(epn, bank_n, size);
    89aa:	68bb      	ldr	r3, [r7, #8]
    89ac:	b29a      	uxth	r2, r3
    89ae:	7bb9      	ldrb	r1, [r7, #14]
    89b0:	7bfb      	ldrb	r3, [r7, #15]
    89b2:	4618      	mov	r0, r3
    89b4:	4b06      	ldr	r3, [pc, #24]	; (89d0 <_usbd_ep_set_out_trans+0x38>)
    89b6:	4798      	blx	r3
	_usbd_ep_set_out_count(epn, bank_n, count);
    89b8:	687b      	ldr	r3, [r7, #4]
    89ba:	b29a      	uxth	r2, r3
    89bc:	7bb9      	ldrb	r1, [r7, #14]
    89be:	7bfb      	ldrb	r3, [r7, #15]
    89c0:	4618      	mov	r0, r3
    89c2:	4b04      	ldr	r3, [pc, #16]	; (89d4 <_usbd_ep_set_out_trans+0x3c>)
    89c4:	4798      	blx	r3
}
    89c6:	bf00      	nop
    89c8:	3710      	adds	r7, #16
    89ca:	46bd      	mov	sp, r7
    89cc:	bd80      	pop	{r7, pc}
    89ce:	bf00      	nop
    89d0:	00008915 	.word	0x00008915
    89d4:	000088d1 	.word	0x000088d1

000089d8 <_usbd_ep_clear_bank_status>:
/** \brief Clear bank status
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 */
static inline void _usbd_ep_clear_bank_status(uint8_t epn, uint8_t bank_n)
{
    89d8:	b480      	push	{r7}
    89da:	b085      	sub	sp, #20
    89dc:	af00      	add	r7, sp, #0
    89de:	4603      	mov	r3, r0
    89e0:	460a      	mov	r2, r1
    89e2:	71fb      	strb	r3, [r7, #7]
    89e4:	4613      	mov	r3, r2
    89e6:	71bb      	strb	r3, [r7, #6]
	UsbDeviceDescBank *bank = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    89e8:	79fa      	ldrb	r2, [r7, #7]
    89ea:	79bb      	ldrb	r3, [r7, #6]
    89ec:	0052      	lsls	r2, r2, #1
    89ee:	4413      	add	r3, r2
    89f0:	011b      	lsls	r3, r3, #4
    89f2:	4a06      	ldr	r2, [pc, #24]	; (8a0c <_usbd_ep_clear_bank_status+0x34>)
    89f4:	4413      	add	r3, r2
    89f6:	60fb      	str	r3, [r7, #12]
	bank->STATUS_BK.reg     = 0;
    89f8:	68fb      	ldr	r3, [r7, #12]
    89fa:	2200      	movs	r2, #0
    89fc:	729a      	strb	r2, [r3, #10]
}
    89fe:	bf00      	nop
    8a00:	3714      	adds	r7, #20
    8a02:	46bd      	mov	sp, r7
    8a04:	f85d 7b04 	ldr.w	r7, [sp], #4
    8a08:	4770      	bx	lr
    8a0a:	bf00      	nop
    8a0c:	20001064 	.word	0x20001064

00008a10 <_usbd_ep_set_in_rdy>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] rdy Set to \c true to indicate IN packet ready to TX.
 */
static inline void _usbd_ep_set_in_rdy(uint8_t epn, uint8_t bank_n, const bool rdy)
{
    8a10:	b580      	push	{r7, lr}
    8a12:	b082      	sub	sp, #8
    8a14:	af00      	add	r7, sp, #0
    8a16:	4603      	mov	r3, r0
    8a18:	71fb      	strb	r3, [r7, #7]
    8a1a:	460b      	mov	r3, r1
    8a1c:	71bb      	strb	r3, [r7, #6]
    8a1e:	4613      	mov	r3, r2
    8a20:	717b      	strb	r3, [r7, #5]
	if (rdy) {
    8a22:	797b      	ldrb	r3, [r7, #5]
    8a24:	2b00      	cmp	r3, #0
    8a26:	d00b      	beq.n	8a40 <_usbd_ep_set_in_rdy+0x30>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    8a28:	79bb      	ldrb	r3, [r7, #6]
    8a2a:	2240      	movs	r2, #64	; 0x40
    8a2c:	fa02 f303 	lsl.w	r3, r2, r3
    8a30:	b2da      	uxtb	r2, r3
    8a32:	79fb      	ldrb	r3, [r7, #7]
    8a34:	4619      	mov	r1, r3
    8a36:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8a3a:	4b09      	ldr	r3, [pc, #36]	; (8a60 <_usbd_ep_set_in_rdy+0x50>)
    8a3c:	4798      	blx	r3
	} else {
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
	}
}
    8a3e:	e00a      	b.n	8a56 <_usbd_ep_set_in_rdy+0x46>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    8a40:	79bb      	ldrb	r3, [r7, #6]
    8a42:	2240      	movs	r2, #64	; 0x40
    8a44:	fa02 f303 	lsl.w	r3, r2, r3
    8a48:	b2da      	uxtb	r2, r3
    8a4a:	79fb      	ldrb	r3, [r7, #7]
    8a4c:	4619      	mov	r1, r3
    8a4e:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8a52:	4b04      	ldr	r3, [pc, #16]	; (8a64 <_usbd_ep_set_in_rdy+0x54>)
    8a54:	4798      	blx	r3
}
    8a56:	bf00      	nop
    8a58:	3708      	adds	r7, #8
    8a5a:	46bd      	mov	sp, r7
    8a5c:	bd80      	pop	{r7, pc}
    8a5e:	bf00      	nop
    8a60:	0000801d 	.word	0x0000801d
    8a64:	00008071 	.word	0x00008071

00008a68 <_usbd_ep_set_out_rdy>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] rdy Set to \c true to indicate OUT bank ready to RX.
 */
static inline void _usbd_ep_set_out_rdy(uint8_t epn, uint8_t bank_n, const bool rdy)
{
    8a68:	b580      	push	{r7, lr}
    8a6a:	b082      	sub	sp, #8
    8a6c:	af00      	add	r7, sp, #0
    8a6e:	4603      	mov	r3, r0
    8a70:	71fb      	strb	r3, [r7, #7]
    8a72:	460b      	mov	r3, r1
    8a74:	71bb      	strb	r3, [r7, #6]
    8a76:	4613      	mov	r3, r2
    8a78:	717b      	strb	r3, [r7, #5]
	if (rdy) {
    8a7a:	797b      	ldrb	r3, [r7, #5]
    8a7c:	2b00      	cmp	r3, #0
    8a7e:	d00b      	beq.n	8a98 <_usbd_ep_set_out_rdy+0x30>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    8a80:	79bb      	ldrb	r3, [r7, #6]
    8a82:	2240      	movs	r2, #64	; 0x40
    8a84:	fa02 f303 	lsl.w	r3, r2, r3
    8a88:	b2da      	uxtb	r2, r3
    8a8a:	79fb      	ldrb	r3, [r7, #7]
    8a8c:	4619      	mov	r1, r3
    8a8e:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8a92:	4b09      	ldr	r3, [pc, #36]	; (8ab8 <_usbd_ep_set_out_rdy+0x50>)
    8a94:	4798      	blx	r3
	} else {
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
	}
}
    8a96:	e00a      	b.n	8aae <_usbd_ep_set_out_rdy+0x46>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    8a98:	79bb      	ldrb	r3, [r7, #6]
    8a9a:	2240      	movs	r2, #64	; 0x40
    8a9c:	fa02 f303 	lsl.w	r3, r2, r3
    8aa0:	b2da      	uxtb	r2, r3
    8aa2:	79fb      	ldrb	r3, [r7, #7]
    8aa4:	4619      	mov	r1, r3
    8aa6:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8aaa:	4b04      	ldr	r3, [pc, #16]	; (8abc <_usbd_ep_set_out_rdy+0x54>)
    8aac:	4798      	blx	r3
}
    8aae:	bf00      	nop
    8ab0:	3708      	adds	r7, #8
    8ab2:	46bd      	mov	sp, r7
    8ab4:	bd80      	pop	{r7, pc}
    8ab6:	bf00      	nop
    8ab8:	00008071 	.word	0x00008071
    8abc:	0000801d 	.word	0x0000801d

00008ac0 <_usbd_ep_pcksize_size>:
/**
 *  \brief Convert USB endpoint size to HW PCKSIZE.SIZE
 * \param[in] n Number of bytes of endpoint size.
 */
static inline uint8_t _usbd_ep_pcksize_size(uint16_t n)
{
    8ac0:	b480      	push	{r7}
    8ac2:	b083      	sub	sp, #12
    8ac4:	af00      	add	r7, sp, #0
    8ac6:	4603      	mov	r3, r0
    8ac8:	80fb      	strh	r3, [r7, #6]
	return (
	    (n > 512)
	        ? 7
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    8aca:	88fb      	ldrh	r3, [r7, #6]
    8acc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    8ad0:	d820      	bhi.n	8b14 <_usbd_ep_pcksize_size+0x54>
    8ad2:	88fb      	ldrh	r3, [r7, #6]
    8ad4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    8ad8:	d81a      	bhi.n	8b10 <_usbd_ep_pcksize_size+0x50>
    8ada:	88fb      	ldrh	r3, [r7, #6]
    8adc:	2b80      	cmp	r3, #128	; 0x80
    8ade:	d815      	bhi.n	8b0c <_usbd_ep_pcksize_size+0x4c>
    8ae0:	88fb      	ldrh	r3, [r7, #6]
    8ae2:	2b40      	cmp	r3, #64	; 0x40
    8ae4:	d810      	bhi.n	8b08 <_usbd_ep_pcksize_size+0x48>
    8ae6:	88fb      	ldrh	r3, [r7, #6]
    8ae8:	2b20      	cmp	r3, #32
    8aea:	d80b      	bhi.n	8b04 <_usbd_ep_pcksize_size+0x44>
    8aec:	88fb      	ldrh	r3, [r7, #6]
    8aee:	2b10      	cmp	r3, #16
    8af0:	d806      	bhi.n	8b00 <_usbd_ep_pcksize_size+0x40>
    8af2:	88fb      	ldrh	r3, [r7, #6]
    8af4:	2b08      	cmp	r3, #8
    8af6:	bf8c      	ite	hi
    8af8:	2301      	movhi	r3, #1
    8afa:	2300      	movls	r3, #0
    8afc:	b2db      	uxtb	r3, r3
    8afe:	e00a      	b.n	8b16 <_usbd_ep_pcksize_size+0x56>
    8b00:	2302      	movs	r3, #2
    8b02:	e008      	b.n	8b16 <_usbd_ep_pcksize_size+0x56>
    8b04:	2303      	movs	r3, #3
    8b06:	e006      	b.n	8b16 <_usbd_ep_pcksize_size+0x56>
    8b08:	2304      	movs	r3, #4
    8b0a:	e004      	b.n	8b16 <_usbd_ep_pcksize_size+0x56>
    8b0c:	2305      	movs	r3, #5
    8b0e:	e002      	b.n	8b16 <_usbd_ep_pcksize_size+0x56>
    8b10:	2306      	movs	r3, #6
    8b12:	e000      	b.n	8b16 <_usbd_ep_pcksize_size+0x56>
    8b14:	2307      	movs	r3, #7
}
    8b16:	4618      	mov	r0, r3
    8b18:	370c      	adds	r7, #12
    8b1a:	46bd      	mov	sp, r7
    8b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
    8b20:	4770      	bx	lr
	...

00008b24 <_usb_d_dev_ept>:
 *  \brief Obtain endpoint descriptor pointer
 * \param[in] epn Endpoint number.
 * \param[in] dir Endpoint direction.
 */
static inline struct _usb_d_dev_ep *_usb_d_dev_ept(uint8_t epn, bool dir)
{
    8b24:	b480      	push	{r7}
    8b26:	b085      	sub	sp, #20
    8b28:	af00      	add	r7, sp, #0
    8b2a:	4603      	mov	r3, r0
    8b2c:	460a      	mov	r2, r1
    8b2e:	71fb      	strb	r3, [r7, #7]
    8b30:	4613      	mov	r3, r2
    8b32:	71bb      	strb	r3, [r7, #6]
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    8b34:	79fb      	ldrb	r3, [r7, #7]
    8b36:	2b00      	cmp	r3, #0
    8b38:	d008      	beq.n	8b4c <_usb_d_dev_ept+0x28>
    8b3a:	79bb      	ldrb	r3, [r7, #6]
    8b3c:	2b00      	cmp	r3, #0
    8b3e:	d003      	beq.n	8b48 <_usb_d_dev_ept+0x24>
    8b40:	79fb      	ldrb	r3, [r7, #7]
    8b42:	3304      	adds	r3, #4
    8b44:	b2db      	uxtb	r3, r3
    8b46:	e002      	b.n	8b4e <_usb_d_dev_ept+0x2a>
    8b48:	79fb      	ldrb	r3, [r7, #7]
    8b4a:	e000      	b.n	8b4e <_usb_d_dev_ept+0x2a>
    8b4c:	2300      	movs	r3, #0
    8b4e:	73fb      	strb	r3, [r7, #15]
	return &dev_inst.ep[ep_index];
    8b50:	7bfa      	ldrb	r2, [r7, #15]
    8b52:	4613      	mov	r3, r2
    8b54:	009b      	lsls	r3, r3, #2
    8b56:	4413      	add	r3, r2
    8b58:	009b      	lsls	r3, r3, #2
    8b5a:	3310      	adds	r3, #16
    8b5c:	4a04      	ldr	r2, [pc, #16]	; (8b70 <_usb_d_dev_ept+0x4c>)
    8b5e:	4413      	add	r3, r2
    8b60:	3304      	adds	r3, #4
}
    8b62:	4618      	mov	r0, r3
    8b64:	3714      	adds	r7, #20
    8b66:	46bd      	mov	sp, r7
    8b68:	f85d 7b04 	ldr.w	r7, [sp], #4
    8b6c:	4770      	bx	lr
    8b6e:	bf00      	nop
    8b70:	20000f9c 	.word	0x20000f9c

00008b74 <_usb_d_dev_sof>:

/**
 * \brief Handles USB SOF interrupt
 */
static inline void _usb_d_dev_sof(void)
{
    8b74:	b580      	push	{r7, lr}
    8b76:	af00      	add	r7, sp, #0
	/* ACK SOF interrupt. */
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_DEVICE_INTFLAG_SOF);
    8b78:	2104      	movs	r1, #4
    8b7a:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8b7e:	4b03      	ldr	r3, [pc, #12]	; (8b8c <_usb_d_dev_sof+0x18>)
    8b80:	4798      	blx	r3
	dev_inst.callbacks.sof();
    8b82:	4b03      	ldr	r3, [pc, #12]	; (8b90 <_usb_d_dev_sof+0x1c>)
    8b84:	681b      	ldr	r3, [r3, #0]
    8b86:	4798      	blx	r3
}
    8b88:	bf00      	nop
    8b8a:	bd80      	pop	{r7, pc}
    8b8c:	000081eb 	.word	0x000081eb
    8b90:	20000f9c 	.word	0x20000f9c

00008b94 <_usb_d_dev_lpmsusp>:

/**
 * \brief Handles USB LPM Suspend interrupt
 */
static inline void _usb_d_dev_lpmsusp(void)
{
    8b94:	b580      	push	{r7, lr}
    8b96:	b084      	sub	sp, #16
    8b98:	af00      	add	r7, sp, #0
	uint8_t  i;
	uint32_t lpm_variable = 0;
    8b9a:	2300      	movs	r3, #0
    8b9c:	60bb      	str	r3, [r7, #8]

	/* ACK LPMSUSP interrupt. */
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    8b9e:	f240 2101 	movw	r1, #513	; 0x201
    8ba2:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8ba6:	4b1a      	ldr	r3, [pc, #104]	; (8c10 <_usb_d_dev_lpmsusp+0x7c>)
    8ba8:	4798      	blx	r3
	/* Change interrupt masks */
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    8baa:	f240 2101 	movw	r1, #513	; 0x201
    8bae:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8bb2:	4b18      	ldr	r3, [pc, #96]	; (8c14 <_usb_d_dev_lpmsusp+0x80>)
    8bb4:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    8bb6:	2170      	movs	r1, #112	; 0x70
    8bb8:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8bbc:	4b16      	ldr	r3, [pc, #88]	; (8c18 <_usb_d_dev_lpmsusp+0x84>)
    8bbe:	4798      	blx	r3

	/* Find LPM data */
	for (i = 0; i < CONF_USB_D_MAX_EP_N; i++) {
    8bc0:	2300      	movs	r3, #0
    8bc2:	73fb      	strb	r3, [r7, #15]
    8bc4:	e018      	b.n	8bf8 <_usb_d_dev_lpmsusp+0x64>
		UsbDeviceDescBank *bank = &prvt_inst.desc_table[i].DeviceDescBank[0];
    8bc6:	7bfb      	ldrb	r3, [r7, #15]
    8bc8:	015b      	lsls	r3, r3, #5
    8bca:	4a14      	ldr	r2, [pc, #80]	; (8c1c <_usb_d_dev_lpmsusp+0x88>)
    8bcc:	4413      	add	r3, r2
    8bce:	607b      	str	r3, [r7, #4]
		if (bank->EXTREG.bit.SUBPID == 0x3) {
    8bd0:	687b      	ldr	r3, [r7, #4]
    8bd2:	891b      	ldrh	r3, [r3, #8]
    8bd4:	f3c3 0303 	ubfx	r3, r3, #0, #4
    8bd8:	b2db      	uxtb	r3, r3
    8bda:	2b03      	cmp	r3, #3
    8bdc:	d109      	bne.n	8bf2 <_usb_d_dev_lpmsusp+0x5e>
			/* Save LPM variable */
			lpm_variable = bank->EXTREG.bit.VARIABLE;
    8bde:	687b      	ldr	r3, [r7, #4]
    8be0:	891b      	ldrh	r3, [r3, #8]
    8be2:	f3c3 130a 	ubfx	r3, r3, #4, #11
    8be6:	b29b      	uxth	r3, r3
    8be8:	60bb      	str	r3, [r7, #8]
			/* Clear */
			bank->EXTREG.reg = 0;
    8bea:	687b      	ldr	r3, [r7, #4]
    8bec:	2200      	movs	r2, #0
    8bee:	811a      	strh	r2, [r3, #8]
			break;
    8bf0:	e005      	b.n	8bfe <_usb_d_dev_lpmsusp+0x6a>
	for (i = 0; i < CONF_USB_D_MAX_EP_N; i++) {
    8bf2:	7bfb      	ldrb	r3, [r7, #15]
    8bf4:	3301      	adds	r3, #1
    8bf6:	73fb      	strb	r3, [r7, #15]
    8bf8:	7bfb      	ldrb	r3, [r7, #15]
    8bfa:	2b03      	cmp	r3, #3
    8bfc:	d9e3      	bls.n	8bc6 <_usb_d_dev_lpmsusp+0x32>
		}
	}
	dev_inst.callbacks.event(USB_EV_LPM_SUSPEND, lpm_variable);
    8bfe:	4b08      	ldr	r3, [pc, #32]	; (8c20 <_usb_d_dev_lpmsusp+0x8c>)
    8c00:	685b      	ldr	r3, [r3, #4]
    8c02:	68b9      	ldr	r1, [r7, #8]
    8c04:	2003      	movs	r0, #3
    8c06:	4798      	blx	r3
}
    8c08:	bf00      	nop
    8c0a:	3710      	adds	r7, #16
    8c0c:	46bd      	mov	sp, r7
    8c0e:	bd80      	pop	{r7, pc}
    8c10:	000081eb 	.word	0x000081eb
    8c14:	00008241 	.word	0x00008241
    8c18:	00008209 	.word	0x00008209
    8c1c:	20001064 	.word	0x20001064
    8c20:	20000f9c 	.word	0x20000f9c

00008c24 <_usb_d_dev_ramerr>:

/**
 * \brief Handles USB RAM Error interrupt
 */
static inline void _usb_d_dev_ramerr(void)
{
    8c24:	b580      	push	{r7, lr}
    8c26:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_DEVICE_INTFLAG_RAMACER);
    8c28:	2180      	movs	r1, #128	; 0x80
    8c2a:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8c2e:	4b04      	ldr	r3, [pc, #16]	; (8c40 <_usb_d_dev_ramerr+0x1c>)
    8c30:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_ERROR, 0);
    8c32:	4b04      	ldr	r3, [pc, #16]	; (8c44 <_usb_d_dev_ramerr+0x20>)
    8c34:	685b      	ldr	r3, [r3, #4]
    8c36:	2100      	movs	r1, #0
    8c38:	2005      	movs	r0, #5
    8c3a:	4798      	blx	r3
}
    8c3c:	bf00      	nop
    8c3e:	bd80      	pop	{r7, pc}
    8c40:	000081eb 	.word	0x000081eb
    8c44:	20000f9c 	.word	0x20000f9c

00008c48 <_usb_d_dev_wakeup>:

/**
 * \brief Handles USB resume/wakeup interrupts
 */
static inline void _usb_d_dev_wakeup(void)
{
    8c48:	b580      	push	{r7, lr}
    8c4a:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    8c4c:	2170      	movs	r1, #112	; 0x70
    8c4e:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8c52:	4b0b      	ldr	r3, [pc, #44]	; (8c80 <_usb_d_dev_wakeup+0x38>)
    8c54:	4798      	blx	r3
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    8c56:	2170      	movs	r1, #112	; 0x70
    8c58:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8c5c:	4b09      	ldr	r3, [pc, #36]	; (8c84 <_usb_d_dev_wakeup+0x3c>)
    8c5e:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    8c60:	f240 2101 	movw	r1, #513	; 0x201
    8c64:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8c68:	4b07      	ldr	r3, [pc, #28]	; (8c88 <_usb_d_dev_wakeup+0x40>)
    8c6a:	4798      	blx	r3

	_usb_d_dev_wait_clk_rdy(CONF_USB_D_CLK_SRC);
    8c6c:	2000      	movs	r0, #0
    8c6e:	4b07      	ldr	r3, [pc, #28]	; (8c8c <_usb_d_dev_wakeup+0x44>)
    8c70:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_WAKEUP, 0);
    8c72:	4b07      	ldr	r3, [pc, #28]	; (8c90 <_usb_d_dev_wakeup+0x48>)
    8c74:	685b      	ldr	r3, [r3, #4]
    8c76:	2100      	movs	r1, #0
    8c78:	2002      	movs	r0, #2
    8c7a:	4798      	blx	r3
}
    8c7c:	bf00      	nop
    8c7e:	bd80      	pop	{r7, pc}
    8c80:	000081eb 	.word	0x000081eb
    8c84:	00008241 	.word	0x00008241
    8c88:	00008209 	.word	0x00008209
    8c8c:	000084e9 	.word	0x000084e9
    8c90:	20000f9c 	.word	0x20000f9c

00008c94 <_usb_d_dev_reset>:

/**
 * \brief Handles USB signal reset interrupt
 */
static inline void _usb_d_dev_reset(void)
{
    8c94:	b580      	push	{r7, lr}
    8c96:	af00      	add	r7, sp, #0
	/* EP0 will not be reseted by USB RESET, disable manually. */
	hri_usbendpoint_write_EPCFG_reg(USB, 0, 0);
    8c98:	2200      	movs	r2, #0
    8c9a:	2100      	movs	r1, #0
    8c9c:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8ca0:	4b0d      	ldr	r3, [pc, #52]	; (8cd8 <_usb_d_dev_reset+0x44>)
    8ca2:	4798      	blx	r3

	hri_usbdevice_clear_INTFLAG_reg(USB, USB_DEVICE_INTFLAG_EORST);
    8ca4:	2108      	movs	r1, #8
    8ca6:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8caa:	4b0c      	ldr	r3, [pc, #48]	; (8cdc <_usb_d_dev_reset+0x48>)
    8cac:	4798      	blx	r3
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    8cae:	2170      	movs	r1, #112	; 0x70
    8cb0:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8cb4:	4b0a      	ldr	r3, [pc, #40]	; (8ce0 <_usb_d_dev_reset+0x4c>)
    8cb6:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    8cb8:	f240 2101 	movw	r1, #513	; 0x201
    8cbc:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8cc0:	4b08      	ldr	r3, [pc, #32]	; (8ce4 <_usb_d_dev_reset+0x50>)
    8cc2:	4798      	blx	r3

	_usb_d_dev_reset_epts();
    8cc4:	4b08      	ldr	r3, [pc, #32]	; (8ce8 <_usb_d_dev_reset+0x54>)
    8cc6:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_RESET, 0);
    8cc8:	4b08      	ldr	r3, [pc, #32]	; (8cec <_usb_d_dev_reset+0x58>)
    8cca:	685b      	ldr	r3, [r3, #4]
    8ccc:	2100      	movs	r1, #0
    8cce:	2001      	movs	r0, #1
    8cd0:	4798      	blx	r3
}
    8cd2:	bf00      	nop
    8cd4:	bd80      	pop	{r7, pc}
    8cd6:	bf00      	nop
    8cd8:	00008181 	.word	0x00008181
    8cdc:	000081eb 	.word	0x000081eb
    8ce0:	00008241 	.word	0x00008241
    8ce4:	00008209 	.word	0x00008209
    8ce8:	00009851 	.word	0x00009851
    8cec:	20000f9c 	.word	0x20000f9c

00008cf0 <_usb_d_dev_suspend>:

static inline void _usb_d_dev_suspend(void)
{
    8cf0:	b580      	push	{r7, lr}
    8cf2:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    8cf4:	f240 2101 	movw	r1, #513	; 0x201
    8cf8:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8cfc:	4b09      	ldr	r3, [pc, #36]	; (8d24 <_usb_d_dev_suspend+0x34>)
    8cfe:	4798      	blx	r3
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    8d00:	f240 2101 	movw	r1, #513	; 0x201
    8d04:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8d08:	4b07      	ldr	r3, [pc, #28]	; (8d28 <_usb_d_dev_suspend+0x38>)
    8d0a:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    8d0c:	2170      	movs	r1, #112	; 0x70
    8d0e:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8d12:	4b06      	ldr	r3, [pc, #24]	; (8d2c <_usb_d_dev_suspend+0x3c>)
    8d14:	4798      	blx	r3

	dev_inst.callbacks.event(USB_EV_SUSPEND, 0);
    8d16:	4b06      	ldr	r3, [pc, #24]	; (8d30 <_usb_d_dev_suspend+0x40>)
    8d18:	685b      	ldr	r3, [r3, #4]
    8d1a:	2100      	movs	r1, #0
    8d1c:	2004      	movs	r0, #4
    8d1e:	4798      	blx	r3
}
    8d20:	bf00      	nop
    8d22:	bd80      	pop	{r7, pc}
    8d24:	000081eb 	.word	0x000081eb
    8d28:	00008241 	.word	0x00008241
    8d2c:	00008209 	.word	0x00008209
    8d30:	20000f9c 	.word	0x20000f9c

00008d34 <_usb_d_dev_handle_nep>:

/**
 * \brief Handles USB non-endpoint interrupt
 */
static inline bool _usb_d_dev_handle_nep(void)
{
    8d34:	b580      	push	{r7, lr}
    8d36:	b082      	sub	sp, #8
    8d38:	af00      	add	r7, sp, #0
	bool     rc    = true;
    8d3a:	2301      	movs	r3, #1
    8d3c:	71fb      	strb	r3, [r7, #7]
	uint16_t flags = hri_usbdevice_read_INTFLAG_reg(USB);
    8d3e:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8d42:	4b22      	ldr	r3, [pc, #136]	; (8dcc <_usb_d_dev_handle_nep+0x98>)
    8d44:	4798      	blx	r3
    8d46:	4603      	mov	r3, r0
    8d48:	80bb      	strh	r3, [r7, #4]
	flags &= hri_usbdevice_read_INTEN_reg(USB);
    8d4a:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8d4e:	4b20      	ldr	r3, [pc, #128]	; (8dd0 <_usb_d_dev_handle_nep+0x9c>)
    8d50:	4798      	blx	r3
    8d52:	4603      	mov	r3, r0
    8d54:	461a      	mov	r2, r3
    8d56:	88bb      	ldrh	r3, [r7, #4]
    8d58:	4013      	ands	r3, r2
    8d5a:	80bb      	strh	r3, [r7, #4]

	if (flags & USB_DEVICE_INTFLAG_SOF) {
    8d5c:	88bb      	ldrh	r3, [r7, #4]
    8d5e:	f003 0304 	and.w	r3, r3, #4
    8d62:	2b00      	cmp	r3, #0
    8d64:	d003      	beq.n	8d6e <_usb_d_dev_handle_nep+0x3a>
		_usb_d_dev_sof();
    8d66:	4b1b      	ldr	r3, [pc, #108]	; (8dd4 <_usb_d_dev_handle_nep+0xa0>)
    8d68:	4798      	blx	r3
		return true;
    8d6a:	2301      	movs	r3, #1
    8d6c:	e02a      	b.n	8dc4 <_usb_d_dev_handle_nep+0x90>
	}
	if (flags & USB_DEVICE_INTFLAG_LPMSUSP) {
    8d6e:	88bb      	ldrh	r3, [r7, #4]
    8d70:	f403 7300 	and.w	r3, r3, #512	; 0x200
    8d74:	2b00      	cmp	r3, #0
    8d76:	d002      	beq.n	8d7e <_usb_d_dev_handle_nep+0x4a>
		_usb_d_dev_lpmsusp();
    8d78:	4b17      	ldr	r3, [pc, #92]	; (8dd8 <_usb_d_dev_handle_nep+0xa4>)
    8d7a:	4798      	blx	r3
    8d7c:	e021      	b.n	8dc2 <_usb_d_dev_handle_nep+0x8e>
	} else if (flags & USB_DEVICE_INTFLAG_RAMACER) {
    8d7e:	88bb      	ldrh	r3, [r7, #4]
    8d80:	f003 0380 	and.w	r3, r3, #128	; 0x80
    8d84:	2b00      	cmp	r3, #0
    8d86:	d002      	beq.n	8d8e <_usb_d_dev_handle_nep+0x5a>
		_usb_d_dev_ramerr();
    8d88:	4b14      	ldr	r3, [pc, #80]	; (8ddc <_usb_d_dev_handle_nep+0xa8>)
    8d8a:	4798      	blx	r3
    8d8c:	e019      	b.n	8dc2 <_usb_d_dev_handle_nep+0x8e>
	} else if (flags & USB_D_WAKEUP_INT_FLAGS) {
    8d8e:	88bb      	ldrh	r3, [r7, #4]
    8d90:	f003 0370 	and.w	r3, r3, #112	; 0x70
    8d94:	2b00      	cmp	r3, #0
    8d96:	d002      	beq.n	8d9e <_usb_d_dev_handle_nep+0x6a>
		_usb_d_dev_wakeup();
    8d98:	4b11      	ldr	r3, [pc, #68]	; (8de0 <_usb_d_dev_handle_nep+0xac>)
    8d9a:	4798      	blx	r3
    8d9c:	e011      	b.n	8dc2 <_usb_d_dev_handle_nep+0x8e>
	} else if (flags & USB_DEVICE_INTFLAG_EORST) {
    8d9e:	88bb      	ldrh	r3, [r7, #4]
    8da0:	f003 0308 	and.w	r3, r3, #8
    8da4:	2b00      	cmp	r3, #0
    8da6:	d002      	beq.n	8dae <_usb_d_dev_handle_nep+0x7a>
		_usb_d_dev_reset();
    8da8:	4b0e      	ldr	r3, [pc, #56]	; (8de4 <_usb_d_dev_handle_nep+0xb0>)
    8daa:	4798      	blx	r3
    8dac:	e009      	b.n	8dc2 <_usb_d_dev_handle_nep+0x8e>
	} else if (flags & USB_DEVICE_INTFLAG_SUSPEND) {
    8dae:	88bb      	ldrh	r3, [r7, #4]
    8db0:	f003 0301 	and.w	r3, r3, #1
    8db4:	2b00      	cmp	r3, #0
    8db6:	d002      	beq.n	8dbe <_usb_d_dev_handle_nep+0x8a>
		_usb_d_dev_suspend();
    8db8:	4b0b      	ldr	r3, [pc, #44]	; (8de8 <_usb_d_dev_handle_nep+0xb4>)
    8dba:	4798      	blx	r3
    8dbc:	e001      	b.n	8dc2 <_usb_d_dev_handle_nep+0x8e>
	} else {
		rc = false;
    8dbe:	2300      	movs	r3, #0
    8dc0:	71fb      	strb	r3, [r7, #7]
	}
	return rc;
    8dc2:	79fb      	ldrb	r3, [r7, #7]
}
    8dc4:	4618      	mov	r0, r3
    8dc6:	3708      	adds	r7, #8
    8dc8:	46bd      	mov	sp, r7
    8dca:	bd80      	pop	{r7, pc}
    8dcc:	000081d1 	.word	0x000081d1
    8dd0:	00008227 	.word	0x00008227
    8dd4:	00008b75 	.word	0x00008b75
    8dd8:	00008b95 	.word	0x00008b95
    8ddc:	00008c25 	.word	0x00008c25
    8de0:	00008c49 	.word	0x00008c49
    8de4:	00008c95 	.word	0x00008c95
    8de8:	00008cf1 	.word	0x00008cf1

00008dec <_usb_d_dev_in_next>:
 * \brief Prepare next IN transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] isr Invoked from ISR.
 */
static void _usb_d_dev_in_next(struct _usb_d_dev_ep *ept, bool isr)
{
    8dec:	b590      	push	{r4, r7, lr}
    8dee:	b089      	sub	sp, #36	; 0x24
    8df0:	af00      	add	r7, sp, #0
    8df2:	6078      	str	r0, [r7, #4]
    8df4:	460b      	mov	r3, r1
    8df6:	70fb      	strb	r3, [r7, #3]
	Usb *              hw          = USB;
    8df8:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    8dfc:	61bb      	str	r3, [r7, #24]
	uint8_t            epn         = USB_EP_GET_N(ept->ep);
    8dfe:	687b      	ldr	r3, [r7, #4]
    8e00:	7c9b      	ldrb	r3, [r3, #18]
    8e02:	f003 030f 	and.w	r3, r3, #15
    8e06:	75fb      	strb	r3, [r7, #23]
	UsbDeviceDescBank *bank        = &prvt_inst.desc_table[epn].DeviceDescBank[0];
    8e08:	7dfb      	ldrb	r3, [r7, #23]
    8e0a:	015b      	lsls	r3, r3, #5
    8e0c:	4a73      	ldr	r2, [pc, #460]	; (8fdc <_usb_d_dev_in_next+0x1f0>)
    8e0e:	4413      	add	r3, r2
    8e10:	613b      	str	r3, [r7, #16]
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
    8e12:	78fb      	ldrb	r3, [r7, #3]
    8e14:	2b00      	cmp	r3, #0
    8e16:	d006      	beq.n	8e26 <_usb_d_dev_in_next+0x3a>
    8e18:	693b      	ldr	r3, [r7, #16]
    8e1a:	3310      	adds	r3, #16
    8e1c:	685b      	ldr	r3, [r3, #4]
    8e1e:	f3c3 030d 	ubfx	r3, r3, #0, #14
    8e22:	b29b      	uxth	r3, r3
    8e24:	e000      	b.n	8e28 <_usb_d_dev_in_next+0x3c>
    8e26:	2300      	movs	r3, #0
    8e28:	81fb      	strh	r3, [r7, #14]
	uint16_t           trans_next;
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    8e2a:	687b      	ldr	r3, [r7, #4]
    8e2c:	8a1b      	ldrh	r3, [r3, #16]
    8e2e:	f240 32ff 	movw	r2, #1023	; 0x3ff
    8e32:	4293      	cmp	r3, r2
    8e34:	d103      	bne.n	8e3e <_usb_d_dev_in_next+0x52>
    8e36:	687b      	ldr	r3, [r7, #4]
    8e38:	8a1b      	ldrh	r3, [r3, #16]
    8e3a:	b21b      	sxth	r3, r3
    8e3c:	e004      	b.n	8e48 <_usb_d_dev_in_next+0x5c>
    8e3e:	687b      	ldr	r3, [r7, #4]
    8e40:	8a1b      	ldrh	r3, [r3, #16]
    8e42:	3b01      	subs	r3, #1
    8e44:	b29b      	uxth	r3, r3
    8e46:	b21b      	sxth	r3, r3
    8e48:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
    8e4c:	4013      	ands	r3, r2
    8e4e:	b21b      	sxth	r3, r3
    8e50:	81bb      	strh	r3, [r7, #12]
	uint8_t            inten    = 0;
    8e52:	2300      	movs	r3, #0
    8e54:	777b      	strb	r3, [r7, #29]
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    8e56:	687b      	ldr	r3, [r7, #4]
    8e58:	7cdb      	ldrb	r3, [r3, #19]
    8e5a:	f003 0307 	and.w	r3, r3, #7
    8e5e:	b2db      	uxtb	r3, r3
    8e60:	2b01      	cmp	r3, #1
    8e62:	bf0c      	ite	eq
    8e64:	2301      	moveq	r3, #1
    8e66:	2300      	movne	r3, #0
    8e68:	72fb      	strb	r3, [r7, #11]

	if (isr) {
    8e6a:	78fb      	ldrb	r3, [r7, #3]
    8e6c:	2b00      	cmp	r3, #0
    8e6e:	d004      	beq.n	8e7a <_usb_d_dev_in_next+0x8e>
		_usbd_ep_ack_io_cpt(epn, 1);
    8e70:	7dfb      	ldrb	r3, [r7, #23]
    8e72:	2101      	movs	r1, #1
    8e74:	4618      	mov	r0, r3
    8e76:	4b5a      	ldr	r3, [pc, #360]	; (8fe0 <_usb_d_dev_in_next+0x1f4>)
    8e78:	4798      	blx	r3
	}

	ept->trans_count += trans_count;
    8e7a:	687b      	ldr	r3, [r7, #4]
    8e7c:	689a      	ldr	r2, [r3, #8]
    8e7e:	89fb      	ldrh	r3, [r7, #14]
    8e80:	441a      	add	r2, r3
    8e82:	687b      	ldr	r3, [r7, #4]
    8e84:	609a      	str	r2, [r3, #8]
	/* Send more data. */
	if (ept->trans_count < ept->trans_size) {
    8e86:	687b      	ldr	r3, [r7, #4]
    8e88:	689a      	ldr	r2, [r3, #8]
    8e8a:	687b      	ldr	r3, [r7, #4]
    8e8c:	685b      	ldr	r3, [r3, #4]
    8e8e:	429a      	cmp	r2, r3
    8e90:	d243      	bcs.n	8f1a <_usb_d_dev_in_next+0x12e>
		trans_next = ept->trans_size - ept->trans_count;
    8e92:	687b      	ldr	r3, [r7, #4]
    8e94:	685b      	ldr	r3, [r3, #4]
    8e96:	b29a      	uxth	r2, r3
    8e98:	687b      	ldr	r3, [r7, #4]
    8e9a:	689b      	ldr	r3, [r3, #8]
    8e9c:	b29b      	uxth	r3, r3
    8e9e:	1ad3      	subs	r3, r2, r3
    8ea0:	83fb      	strh	r3, [r7, #30]
		if (ept->flags.bits.use_cache) {
    8ea2:	687b      	ldr	r3, [r7, #4]
    8ea4:	7cdb      	ldrb	r3, [r3, #19]
    8ea6:	f003 0320 	and.w	r3, r3, #32
    8eaa:	b2db      	uxtb	r3, r3
    8eac:	2b00      	cmp	r3, #0
    8eae:	d01b      	beq.n	8ee8 <_usb_d_dev_in_next+0xfc>
			if (trans_next > ept->size) {
    8eb0:	687b      	ldr	r3, [r7, #4]
    8eb2:	8a1b      	ldrh	r3, [r3, #16]
    8eb4:	8bfa      	ldrh	r2, [r7, #30]
    8eb6:	429a      	cmp	r2, r3
    8eb8:	d902      	bls.n	8ec0 <_usb_d_dev_in_next+0xd4>
				trans_next = ept->size;
    8eba:	687b      	ldr	r3, [r7, #4]
    8ebc:	8a1b      	ldrh	r3, [r3, #16]
    8ebe:	83fb      	strh	r3, [r7, #30]
			}
			memcpy(ept->cache, &ept->trans_buf[ept->trans_count], trans_next);
    8ec0:	687b      	ldr	r3, [r7, #4]
    8ec2:	68d8      	ldr	r0, [r3, #12]
    8ec4:	687b      	ldr	r3, [r7, #4]
    8ec6:	681a      	ldr	r2, [r3, #0]
    8ec8:	687b      	ldr	r3, [r7, #4]
    8eca:	689b      	ldr	r3, [r3, #8]
    8ecc:	4413      	add	r3, r2
    8ece:	8bfa      	ldrh	r2, [r7, #30]
    8ed0:	4619      	mov	r1, r3
    8ed2:	4b44      	ldr	r3, [pc, #272]	; (8fe4 <_usb_d_dev_in_next+0x1f8>)
    8ed4:	4798      	blx	r3
			_usbd_ep_set_buf(epn, 1, (uint32_t)ept->cache);
    8ed6:	687b      	ldr	r3, [r7, #4]
    8ed8:	68db      	ldr	r3, [r3, #12]
    8eda:	461a      	mov	r2, r3
    8edc:	7dfb      	ldrb	r3, [r7, #23]
    8ede:	2101      	movs	r1, #1
    8ee0:	4618      	mov	r0, r3
    8ee2:	4b41      	ldr	r3, [pc, #260]	; (8fe8 <_usb_d_dev_in_next+0x1fc>)
    8ee4:	4798      	blx	r3
    8ee6:	e011      	b.n	8f0c <_usb_d_dev_in_next+0x120>
		} else {
			if (trans_next > USB_D_DEV_TRANS_MAX) {
    8ee8:	8bfb      	ldrh	r3, [r7, #30]
    8eea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
    8eee:	d902      	bls.n	8ef6 <_usb_d_dev_in_next+0x10a>
				trans_next = USB_D_DEV_TRANS_MAX;
    8ef0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    8ef4:	83fb      	strh	r3, [r7, #30]
			}
			_usbd_ep_set_buf(epn, 1, (uint32_t)&ept->trans_buf[ept->trans_count]);
    8ef6:	687b      	ldr	r3, [r7, #4]
    8ef8:	681a      	ldr	r2, [r3, #0]
    8efa:	687b      	ldr	r3, [r7, #4]
    8efc:	689b      	ldr	r3, [r3, #8]
    8efe:	4413      	add	r3, r2
    8f00:	461a      	mov	r2, r3
    8f02:	7dfb      	ldrb	r3, [r7, #23]
    8f04:	2101      	movs	r1, #1
    8f06:	4618      	mov	r0, r3
    8f08:	4b37      	ldr	r3, [pc, #220]	; (8fe8 <_usb_d_dev_in_next+0x1fc>)
    8f0a:	4798      	blx	r3
		}
		_usbd_ep_set_in_trans(epn, 1, trans_next, 0);
    8f0c:	8bfa      	ldrh	r2, [r7, #30]
    8f0e:	7df8      	ldrb	r0, [r7, #23]
    8f10:	2300      	movs	r3, #0
    8f12:	2101      	movs	r1, #1
    8f14:	4c35      	ldr	r4, [pc, #212]	; (8fec <_usb_d_dev_in_next+0x200>)
    8f16:	47a0      	blx	r4
		goto _in_tx_exec;
    8f18:	e041      	b.n	8f9e <_usb_d_dev_in_next+0x1b2>
	} else if (ept->flags.bits.need_zlp) {
    8f1a:	687b      	ldr	r3, [r7, #4]
    8f1c:	7cdb      	ldrb	r3, [r3, #19]
    8f1e:	f003 0310 	and.w	r3, r3, #16
    8f22:	b2db      	uxtb	r3, r3
    8f24:	2b00      	cmp	r3, #0
    8f26:	d00b      	beq.n	8f40 <_usb_d_dev_in_next+0x154>
		ept->flags.bits.need_zlp = 0;
    8f28:	687a      	ldr	r2, [r7, #4]
    8f2a:	7cd3      	ldrb	r3, [r2, #19]
    8f2c:	f36f 1304 	bfc	r3, #4, #1
    8f30:	74d3      	strb	r3, [r2, #19]
		_usbd_ep_set_in_trans(epn, 1, 0, 0);
    8f32:	7df8      	ldrb	r0, [r7, #23]
    8f34:	2300      	movs	r3, #0
    8f36:	2200      	movs	r2, #0
    8f38:	2101      	movs	r1, #1
    8f3a:	4c2c      	ldr	r4, [pc, #176]	; (8fec <_usb_d_dev_in_next+0x200>)
    8f3c:	47a0      	blx	r4
		goto _in_tx_exec;
    8f3e:	e02e      	b.n	8f9e <_usb_d_dev_in_next+0x1b2>
	}
	/* Complete. */
	if (is_ctrl) {
    8f40:	7afb      	ldrb	r3, [r7, #11]
    8f42:	2b00      	cmp	r3, #0
    8f44:	d006      	beq.n	8f54 <_usb_d_dev_in_next+0x168>
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK1_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRCPT0);
    8f46:	7dfb      	ldrb	r3, [r7, #23]
    8f48:	224b      	movs	r2, #75	; 0x4b
    8f4a:	4619      	mov	r1, r3
    8f4c:	69b8      	ldr	r0, [r7, #24]
    8f4e:	4b28      	ldr	r3, [pc, #160]	; (8ff0 <_usb_d_dev_in_next+0x204>)
    8f50:	4798      	blx	r3
    8f52:	e005      	b.n	8f60 <_usb_d_dev_in_next+0x174>
	} else {
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK1_INT_FLAGS);
    8f54:	7dfb      	ldrb	r3, [r7, #23]
    8f56:	224a      	movs	r2, #74	; 0x4a
    8f58:	4619      	mov	r1, r3
    8f5a:	69b8      	ldr	r0, [r7, #24]
    8f5c:	4b24      	ldr	r3, [pc, #144]	; (8ff0 <_usb_d_dev_in_next+0x204>)
    8f5e:	4798      	blx	r3
	}

	/* No ping-pong, so ask more data without background transfer. */
	if (last_pkt == ept->size) {
    8f60:	687b      	ldr	r3, [r7, #4]
    8f62:	8a1b      	ldrh	r3, [r3, #16]
    8f64:	89ba      	ldrh	r2, [r7, #12]
    8f66:	429a      	cmp	r2, r3
    8f68:	d114      	bne.n	8f94 <_usb_d_dev_in_next+0x1a8>
		ept->flags.bits.is_busy = 0;
    8f6a:	687a      	ldr	r2, [r7, #4]
    8f6c:	7cd3      	ldrb	r3, [r2, #19]
    8f6e:	f36f 1386 	bfc	r3, #6, #1
    8f72:	74d3      	strb	r3, [r2, #19]
		if (dev_inst.ep_callbacks.more(ept->ep, ept->trans_count)) {
    8f74:	4b1f      	ldr	r3, [pc, #124]	; (8ff4 <_usb_d_dev_in_next+0x208>)
    8f76:	68db      	ldr	r3, [r3, #12]
    8f78:	687a      	ldr	r2, [r7, #4]
    8f7a:	7c90      	ldrb	r0, [r2, #18]
    8f7c:	687a      	ldr	r2, [r7, #4]
    8f7e:	6892      	ldr	r2, [r2, #8]
    8f80:	4611      	mov	r1, r2
    8f82:	4798      	blx	r3
    8f84:	4603      	mov	r3, r0
    8f86:	2b00      	cmp	r3, #0
    8f88:	d124      	bne.n	8fd4 <_usb_d_dev_in_next+0x1e8>
			/* More data added. */
			return;
		}
		ept->flags.bits.is_busy = 1;
    8f8a:	687a      	ldr	r2, [r7, #4]
    8f8c:	7cd3      	ldrb	r3, [r2, #19]
    8f8e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    8f92:	74d3      	strb	r3, [r2, #19]
	}
	/* Finish normally. */
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    8f94:	2100      	movs	r1, #0
    8f96:	6878      	ldr	r0, [r7, #4]
    8f98:	4b17      	ldr	r3, [pc, #92]	; (8ff8 <_usb_d_dev_in_next+0x20c>)
    8f9a:	4798      	blx	r3
	return;
    8f9c:	e01b      	b.n	8fd6 <_usb_d_dev_in_next+0x1ea>

_in_tx_exec:
	if (!isr) {
    8f9e:	78fb      	ldrb	r3, [r7, #3]
    8fa0:	f083 0301 	eor.w	r3, r3, #1
    8fa4:	b2db      	uxtb	r3, r3
    8fa6:	2b00      	cmp	r3, #0
    8fa8:	d00d      	beq.n	8fc6 <_usb_d_dev_in_next+0x1da>
		if (is_ctrl) {
    8faa:	7afb      	ldrb	r3, [r7, #11]
    8fac:	2b00      	cmp	r3, #0
    8fae:	d002      	beq.n	8fb6 <_usb_d_dev_in_next+0x1ca>
			/* Control endpoint: SETUP or OUT will abort IN transaction.
			 * SETUP: terminate the IN without any notification. Trigger
			 *        SETUP callback.
			 * OUT NAK: terminate IN.
			 */
			inten = USB_D_BANK1_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL0;
    8fb0:	234e      	movs	r3, #78	; 0x4e
    8fb2:	777b      	strb	r3, [r7, #29]
    8fb4:	e001      	b.n	8fba <_usb_d_dev_in_next+0x1ce>
		} else {
			/* Initialize normal IN transaction. */
			inten = USB_D_BANK1_INT_FLAGS;
    8fb6:	234a      	movs	r3, #74	; 0x4a
    8fb8:	777b      	strb	r3, [r7, #29]
		}
		hri_usbendpoint_set_EPINTEN_reg(hw, epn, inten);
    8fba:	7f7a      	ldrb	r2, [r7, #29]
    8fbc:	7dfb      	ldrb	r3, [r7, #23]
    8fbe:	4619      	mov	r1, r3
    8fc0:	69b8      	ldr	r0, [r7, #24]
    8fc2:	4b0e      	ldr	r3, [pc, #56]	; (8ffc <_usb_d_dev_in_next+0x210>)
    8fc4:	4798      	blx	r3
	}
	_usbd_ep_set_in_rdy(epn, 1, true);
    8fc6:	7dfb      	ldrb	r3, [r7, #23]
    8fc8:	2201      	movs	r2, #1
    8fca:	2101      	movs	r1, #1
    8fcc:	4618      	mov	r0, r3
    8fce:	4b0c      	ldr	r3, [pc, #48]	; (9000 <_usb_d_dev_in_next+0x214>)
    8fd0:	4798      	blx	r3
    8fd2:	e000      	b.n	8fd6 <_usb_d_dev_in_next+0x1ea>
			return;
    8fd4:	bf00      	nop
}
    8fd6:	3724      	adds	r7, #36	; 0x24
    8fd8:	46bd      	mov	sp, r7
    8fda:	bd90      	pop	{r4, r7, pc}
    8fdc:	20001064 	.word	0x20001064
    8fe0:	000087e5 	.word	0x000087e5
    8fe4:	00012f1d 	.word	0x00012f1d
    8fe8:	00008811 	.word	0x00008811
    8fec:	00008959 	.word	0x00008959
    8ff0:	000080f1 	.word	0x000080f1
    8ff4:	20000f9c 	.word	0x20000f9c
    8ff8:	0000a115 	.word	0x0000a115
    8ffc:	000080c5 	.word	0x000080c5
    9000:	00008a11 	.word	0x00008a11

00009004 <_usb_d_dev_out_next>:
 * \brief Prepare next OUT transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] isr Invoked from ISR.
 */
static void _usb_d_dev_out_next(struct _usb_d_dev_ep *ept, bool isr)
{
    9004:	b590      	push	{r4, r7, lr}
    9006:	b08b      	sub	sp, #44	; 0x2c
    9008:	af00      	add	r7, sp, #0
    900a:	6078      	str	r0, [r7, #4]
    900c:	460b      	mov	r3, r1
    900e:	70fb      	strb	r3, [r7, #3]
	Usb *              hw         = USB;
    9010:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    9014:	623b      	str	r3, [r7, #32]
	uint8_t            epn        = USB_EP_GET_N(ept->ep);
    9016:	687b      	ldr	r3, [r7, #4]
    9018:	7c9b      	ldrb	r3, [r3, #18]
    901a:	f003 030f 	and.w	r3, r3, #15
    901e:	77fb      	strb	r3, [r7, #31]
	UsbDeviceDescBank *bank       = &prvt_inst.desc_table[epn].DeviceDescBank[0];
    9020:	7ffb      	ldrb	r3, [r7, #31]
    9022:	015b      	lsls	r3, r3, #5
    9024:	4a94      	ldr	r2, [pc, #592]	; (9278 <_usb_d_dev_out_next+0x274>)
    9026:	4413      	add	r3, r2
    9028:	61bb      	str	r3, [r7, #24]
	uint16_t           trans_size = isr ? bank->PCKSIZE.bit.MULTI_PACKET_SIZE : 0;
    902a:	78fb      	ldrb	r3, [r7, #3]
    902c:	2b00      	cmp	r3, #0
    902e:	d005      	beq.n	903c <_usb_d_dev_out_next+0x38>
    9030:	69bb      	ldr	r3, [r7, #24]
    9032:	685b      	ldr	r3, [r3, #4]
    9034:	f3c3 338d 	ubfx	r3, r3, #14, #14
    9038:	b29b      	uxth	r3, r3
    903a:	e000      	b.n	903e <_usb_d_dev_out_next+0x3a>
    903c:	2300      	movs	r3, #0
    903e:	82fb      	strh	r3, [r7, #22]
	uint16_t           last_trans = isr ? bank->PCKSIZE.bit.BYTE_COUNT : 0;
    9040:	78fb      	ldrb	r3, [r7, #3]
    9042:	2b00      	cmp	r3, #0
    9044:	d005      	beq.n	9052 <_usb_d_dev_out_next+0x4e>
    9046:	69bb      	ldr	r3, [r7, #24]
    9048:	685b      	ldr	r3, [r3, #4]
    904a:	f3c3 030d 	ubfx	r3, r3, #0, #14
    904e:	b29b      	uxth	r3, r3
    9050:	e000      	b.n	9054 <_usb_d_dev_out_next+0x50>
    9052:	2300      	movs	r3, #0
    9054:	82bb      	strh	r3, [r7, #20]
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
    9056:	687b      	ldr	r3, [r7, #4]
    9058:	8a1b      	ldrh	r3, [r3, #16]
    905a:	f240 32ff 	movw	r2, #1023	; 0x3ff
    905e:	4293      	cmp	r3, r2
    9060:	d004      	beq.n	906c <_usb_d_dev_out_next+0x68>
    9062:	687b      	ldr	r3, [r7, #4]
    9064:	8a1b      	ldrh	r3, [r3, #16]
    9066:	3b01      	subs	r3, #1
    9068:	b29b      	uxth	r3, r3
    906a:	e001      	b.n	9070 <_usb_d_dev_out_next+0x6c>
    906c:	f240 33ff 	movw	r3, #1023	; 0x3ff
    9070:	827b      	strh	r3, [r7, #18]
	uint16_t           last_pkt   = last_trans & size_mask;
    9072:	8aba      	ldrh	r2, [r7, #20]
    9074:	8a7b      	ldrh	r3, [r7, #18]
    9076:	4013      	ands	r3, r2
    9078:	823b      	strh	r3, [r7, #16]
	uint16_t           trans_next;
	uint8_t            inten;
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    907a:	687b      	ldr	r3, [r7, #4]
    907c:	7cdb      	ldrb	r3, [r3, #19]
    907e:	f003 0307 	and.w	r3, r3, #7
    9082:	b2db      	uxtb	r3, r3
    9084:	2b01      	cmp	r3, #1
    9086:	bf0c      	ite	eq
    9088:	2301      	moveq	r3, #1
    908a:	2300      	movne	r3, #0
    908c:	73fb      	strb	r3, [r7, #15]

	if (isr) {
    908e:	78fb      	ldrb	r3, [r7, #3]
    9090:	2b00      	cmp	r3, #0
    9092:	d004      	beq.n	909e <_usb_d_dev_out_next+0x9a>
		_usbd_ep_ack_io_cpt(epn, 0);
    9094:	7ffb      	ldrb	r3, [r7, #31]
    9096:	2100      	movs	r1, #0
    9098:	4618      	mov	r0, r3
    909a:	4b78      	ldr	r3, [pc, #480]	; (927c <_usb_d_dev_out_next+0x278>)
    909c:	4798      	blx	r3
	}

	/* If cache is used, copy data to buffer. */
	if (ept->flags.bits.use_cache && ept->trans_size) {
    909e:	687b      	ldr	r3, [r7, #4]
    90a0:	7cdb      	ldrb	r3, [r3, #19]
    90a2:	f003 0320 	and.w	r3, r3, #32
    90a6:	b2db      	uxtb	r3, r3
    90a8:	2b00      	cmp	r3, #0
    90aa:	d01c      	beq.n	90e6 <_usb_d_dev_out_next+0xe2>
    90ac:	687b      	ldr	r3, [r7, #4]
    90ae:	685b      	ldr	r3, [r3, #4]
    90b0:	2b00      	cmp	r3, #0
    90b2:	d018      	beq.n	90e6 <_usb_d_dev_out_next+0xe2>
		uint16_t buf_remain = ept->trans_size - ept->trans_count;
    90b4:	687b      	ldr	r3, [r7, #4]
    90b6:	685b      	ldr	r3, [r3, #4]
    90b8:	b29a      	uxth	r2, r3
    90ba:	687b      	ldr	r3, [r7, #4]
    90bc:	689b      	ldr	r3, [r3, #8]
    90be:	b29b      	uxth	r3, r3
    90c0:	1ad3      	subs	r3, r2, r3
    90c2:	81bb      	strh	r3, [r7, #12]
		memcpy(&ept->trans_buf[ept->trans_count], ept->cache, (buf_remain > last_pkt) ? last_pkt : buf_remain);
    90c4:	687b      	ldr	r3, [r7, #4]
    90c6:	681a      	ldr	r2, [r3, #0]
    90c8:	687b      	ldr	r3, [r7, #4]
    90ca:	689b      	ldr	r3, [r3, #8]
    90cc:	18d0      	adds	r0, r2, r3
    90ce:	687b      	ldr	r3, [r7, #4]
    90d0:	68d9      	ldr	r1, [r3, #12]
    90d2:	89ba      	ldrh	r2, [r7, #12]
    90d4:	8a3b      	ldrh	r3, [r7, #16]
    90d6:	429a      	cmp	r2, r3
    90d8:	d901      	bls.n	90de <_usb_d_dev_out_next+0xda>
    90da:	8a3b      	ldrh	r3, [r7, #16]
    90dc:	e000      	b.n	90e0 <_usb_d_dev_out_next+0xdc>
    90de:	89bb      	ldrh	r3, [r7, #12]
    90e0:	461a      	mov	r2, r3
    90e2:	4b67      	ldr	r3, [pc, #412]	; (9280 <_usb_d_dev_out_next+0x27c>)
    90e4:	4798      	blx	r3
	}

	/* Force wait ZLP */
	if (ept->trans_size == 0 && ept->flags.bits.need_zlp) {
    90e6:	687b      	ldr	r3, [r7, #4]
    90e8:	685b      	ldr	r3, [r3, #4]
    90ea:	2b00      	cmp	r3, #0
    90ec:	d121      	bne.n	9132 <_usb_d_dev_out_next+0x12e>
    90ee:	687b      	ldr	r3, [r7, #4]
    90f0:	7cdb      	ldrb	r3, [r3, #19]
    90f2:	f003 0310 	and.w	r3, r3, #16
    90f6:	b2db      	uxtb	r3, r3
    90f8:	2b00      	cmp	r3, #0
    90fa:	d01a      	beq.n	9132 <_usb_d_dev_out_next+0x12e>
		ept->flags.bits.need_zlp  = 0;
    90fc:	687a      	ldr	r2, [r7, #4]
    90fe:	7cd3      	ldrb	r3, [r2, #19]
    9100:	f36f 1304 	bfc	r3, #4, #1
    9104:	74d3      	strb	r3, [r2, #19]
		ept->flags.bits.use_cache = 1;
    9106:	687a      	ldr	r2, [r7, #4]
    9108:	7cd3      	ldrb	r3, [r2, #19]
    910a:	f043 0320 	orr.w	r3, r3, #32
    910e:	74d3      	strb	r3, [r2, #19]
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    9110:	687b      	ldr	r3, [r7, #4]
    9112:	68db      	ldr	r3, [r3, #12]
    9114:	461a      	mov	r2, r3
    9116:	7ffb      	ldrb	r3, [r7, #31]
    9118:	2100      	movs	r1, #0
    911a:	4618      	mov	r0, r3
    911c:	4b59      	ldr	r3, [pc, #356]	; (9284 <_usb_d_dev_out_next+0x280>)
    911e:	4798      	blx	r3
		_usbd_ep_set_out_trans(epn, 0, ept->size, 0);
    9120:	687b      	ldr	r3, [r7, #4]
    9122:	8a1b      	ldrh	r3, [r3, #16]
    9124:	461a      	mov	r2, r3
    9126:	7ff8      	ldrb	r0, [r7, #31]
    9128:	2300      	movs	r3, #0
    912a:	2100      	movs	r1, #0
    912c:	4c56      	ldr	r4, [pc, #344]	; (9288 <_usb_d_dev_out_next+0x284>)
    912e:	47a0      	blx	r4
		goto _out_rx_exec;
    9130:	e090      	b.n	9254 <_usb_d_dev_out_next+0x250>
	} else if (isr && last_pkt < ept->size) {
    9132:	78fb      	ldrb	r3, [r7, #3]
    9134:	2b00      	cmp	r3, #0
    9136:	d010      	beq.n	915a <_usb_d_dev_out_next+0x156>
    9138:	687b      	ldr	r3, [r7, #4]
    913a:	8a1b      	ldrh	r3, [r3, #16]
    913c:	8a3a      	ldrh	r2, [r7, #16]
    913e:	429a      	cmp	r2, r3
    9140:	d20b      	bcs.n	915a <_usb_d_dev_out_next+0x156>
		/* Short packet. */
		ept->flags.bits.need_zlp = 0;
    9142:	687a      	ldr	r2, [r7, #4]
    9144:	7cd3      	ldrb	r3, [r2, #19]
    9146:	f36f 1304 	bfc	r3, #4, #1
    914a:	74d3      	strb	r3, [r2, #19]
		ept->trans_count += last_trans;
    914c:	687b      	ldr	r3, [r7, #4]
    914e:	689a      	ldr	r2, [r3, #8]
    9150:	8abb      	ldrh	r3, [r7, #20]
    9152:	441a      	add	r2, r3
    9154:	687b      	ldr	r3, [r7, #4]
    9156:	609a      	str	r2, [r3, #8]
    9158:	e05c      	b.n	9214 <_usb_d_dev_out_next+0x210>
	} else {
		/* Full packets. */
		ept->trans_count += trans_size;
    915a:	687b      	ldr	r3, [r7, #4]
    915c:	689a      	ldr	r2, [r3, #8]
    915e:	8afb      	ldrh	r3, [r7, #22]
    9160:	441a      	add	r2, r3
    9162:	687b      	ldr	r3, [r7, #4]
    9164:	609a      	str	r2, [r3, #8]

		/* Wait more data */
		if (ept->trans_count < ept->trans_size) {
    9166:	687b      	ldr	r3, [r7, #4]
    9168:	689a      	ldr	r2, [r3, #8]
    916a:	687b      	ldr	r3, [r7, #4]
    916c:	685b      	ldr	r3, [r3, #4]
    916e:	429a      	cmp	r2, r3
    9170:	d250      	bcs.n	9214 <_usb_d_dev_out_next+0x210>
			/* Continue OUT */
			trans_next = ept->trans_size - ept->trans_count;
    9172:	687b      	ldr	r3, [r7, #4]
    9174:	685b      	ldr	r3, [r3, #4]
    9176:	b29a      	uxth	r2, r3
    9178:	687b      	ldr	r3, [r7, #4]
    917a:	689b      	ldr	r3, [r3, #8]
    917c:	b29b      	uxth	r3, r3
    917e:	1ad3      	subs	r3, r2, r3
    9180:	84fb      	strh	r3, [r7, #38]	; 0x26
			if (ept->flags.bits.use_cache) {
    9182:	687b      	ldr	r3, [r7, #4]
    9184:	7cdb      	ldrb	r3, [r3, #19]
    9186:	f003 0320 	and.w	r3, r3, #32
    918a:	b2db      	uxtb	r3, r3
    918c:	2b00      	cmp	r3, #0
    918e:	d010      	beq.n	91b2 <_usb_d_dev_out_next+0x1ae>
				/* Expect single packet each time. */
				if (trans_next > ept->size) {
    9190:	687b      	ldr	r3, [r7, #4]
    9192:	8a1b      	ldrh	r3, [r3, #16]
    9194:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    9196:	429a      	cmp	r2, r3
    9198:	d902      	bls.n	91a0 <_usb_d_dev_out_next+0x19c>
					trans_next = ept->size;
    919a:	687b      	ldr	r3, [r7, #4]
    919c:	8a1b      	ldrh	r3, [r3, #16]
    919e:	84fb      	strh	r3, [r7, #38]	; 0x26
				}
				_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    91a0:	687b      	ldr	r3, [r7, #4]
    91a2:	68db      	ldr	r3, [r3, #12]
    91a4:	461a      	mov	r2, r3
    91a6:	7ffb      	ldrb	r3, [r7, #31]
    91a8:	2100      	movs	r1, #0
    91aa:	4618      	mov	r0, r3
    91ac:	4b35      	ldr	r3, [pc, #212]	; (9284 <_usb_d_dev_out_next+0x280>)
    91ae:	4798      	blx	r3
    91b0:	e029      	b.n	9206 <_usb_d_dev_out_next+0x202>
			} else {
				/* Multiple packets each time. */
				if (trans_next > ept->size) {
    91b2:	687b      	ldr	r3, [r7, #4]
    91b4:	8a1b      	ldrh	r3, [r3, #16]
    91b6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    91b8:	429a      	cmp	r2, r3
    91ba:	d90f      	bls.n	91dc <_usb_d_dev_out_next+0x1d8>
					if (trans_next > USB_D_DEV_TRANS_MAX) {
    91bc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
    91be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
    91c2:	d903      	bls.n	91cc <_usb_d_dev_out_next+0x1c8>
						trans_next = USB_D_DEV_TRANS_MAX;
    91c4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    91c8:	84fb      	strh	r3, [r7, #38]	; 0x26
    91ca:	e011      	b.n	91f0 <_usb_d_dev_out_next+0x1ec>
					} else {
						/* Must expect multiple of ep size. */
						trans_next -= trans_next & size_mask;
    91cc:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    91ce:	8a7b      	ldrh	r3, [r7, #18]
    91d0:	4013      	ands	r3, r2
    91d2:	b29b      	uxth	r3, r3
    91d4:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    91d6:	1ad3      	subs	r3, r2, r3
    91d8:	84fb      	strh	r3, [r7, #38]	; 0x26
    91da:	e009      	b.n	91f0 <_usb_d_dev_out_next+0x1ec>
					}
				} else if (trans_next < ept->size) {
    91dc:	687b      	ldr	r3, [r7, #4]
    91de:	8a1b      	ldrh	r3, [r3, #16]
    91e0:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    91e2:	429a      	cmp	r2, r3
    91e4:	d204      	bcs.n	91f0 <_usb_d_dev_out_next+0x1ec>
					/* Last un-aligned packet should be cached. */
					ept->flags.bits.use_cache = 1;
    91e6:	687a      	ldr	r2, [r7, #4]
    91e8:	7cd3      	ldrb	r3, [r2, #19]
    91ea:	f043 0320 	orr.w	r3, r3, #32
    91ee:	74d3      	strb	r3, [r2, #19]
				}
				_usbd_ep_set_buf(epn, 0, (uint32_t)&ept->trans_buf[ept->trans_count]);
    91f0:	687b      	ldr	r3, [r7, #4]
    91f2:	681a      	ldr	r2, [r3, #0]
    91f4:	687b      	ldr	r3, [r7, #4]
    91f6:	689b      	ldr	r3, [r3, #8]
    91f8:	4413      	add	r3, r2
    91fa:	461a      	mov	r2, r3
    91fc:	7ffb      	ldrb	r3, [r7, #31]
    91fe:	2100      	movs	r1, #0
    9200:	4618      	mov	r0, r3
    9202:	4b20      	ldr	r3, [pc, #128]	; (9284 <_usb_d_dev_out_next+0x280>)
    9204:	4798      	blx	r3
			}
			_usbd_ep_set_out_trans(epn, 0, trans_next, 0);
    9206:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    9208:	7ff8      	ldrb	r0, [r7, #31]
    920a:	2300      	movs	r3, #0
    920c:	2100      	movs	r1, #0
    920e:	4c1e      	ldr	r4, [pc, #120]	; (9288 <_usb_d_dev_out_next+0x284>)
    9210:	47a0      	blx	r4
			goto _out_rx_exec;
    9212:	e01f      	b.n	9254 <_usb_d_dev_out_next+0x250>
		}
	}
	/* Finish normally. */
	if (is_ctrl) {
    9214:	7bfb      	ldrb	r3, [r7, #15]
    9216:	2b00      	cmp	r3, #0
    9218:	d006      	beq.n	9228 <_usb_d_dev_out_next+0x224>
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK0_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL1);
    921a:	7ffb      	ldrb	r3, [r7, #31]
    921c:	222d      	movs	r2, #45	; 0x2d
    921e:	4619      	mov	r1, r3
    9220:	6a38      	ldr	r0, [r7, #32]
    9222:	4b1a      	ldr	r3, [pc, #104]	; (928c <_usb_d_dev_out_next+0x288>)
    9224:	4798      	blx	r3
    9226:	e005      	b.n	9234 <_usb_d_dev_out_next+0x230>
	} else {
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK0_INT_FLAGS);
    9228:	7ffb      	ldrb	r3, [r7, #31]
    922a:	2225      	movs	r2, #37	; 0x25
    922c:	4619      	mov	r1, r3
    922e:	6a38      	ldr	r0, [r7, #32]
    9230:	4b16      	ldr	r3, [pc, #88]	; (928c <_usb_d_dev_out_next+0x288>)
    9232:	4798      	blx	r3
	}
	/* Use ep0 out cache for next setup packets */
	if (0 == epn) {
    9234:	7ffb      	ldrb	r3, [r7, #31]
    9236:	2b00      	cmp	r3, #0
    9238:	d107      	bne.n	924a <_usb_d_dev_out_next+0x246>
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    923a:	687b      	ldr	r3, [r7, #4]
    923c:	68db      	ldr	r3, [r3, #12]
    923e:	461a      	mov	r2, r3
    9240:	7ffb      	ldrb	r3, [r7, #31]
    9242:	2100      	movs	r1, #0
    9244:	4618      	mov	r0, r3
    9246:	4b0f      	ldr	r3, [pc, #60]	; (9284 <_usb_d_dev_out_next+0x280>)
    9248:	4798      	blx	r3
	}
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    924a:	2100      	movs	r1, #0
    924c:	6878      	ldr	r0, [r7, #4]
    924e:	4b10      	ldr	r3, [pc, #64]	; (9290 <_usb_d_dev_out_next+0x28c>)
    9250:	4798      	blx	r3
	return;
    9252:	e031      	b.n	92b8 <_usb_d_dev_out_next+0x2b4>

_out_rx_exec:
	if (!isr) {
    9254:	78fb      	ldrb	r3, [r7, #3]
    9256:	f083 0301 	eor.w	r3, r3, #1
    925a:	b2db      	uxtb	r3, r3
    925c:	2b00      	cmp	r3, #0
    925e:	d025      	beq.n	92ac <_usb_d_dev_out_next+0x2a8>
		if (is_ctrl) {
    9260:	7bfb      	ldrb	r3, [r7, #15]
    9262:	2b00      	cmp	r3, #0
    9264:	d018      	beq.n	9298 <_usb_d_dev_out_next+0x294>
			 *                   OUT transactions.
			 * SETUP: terminate OUT without any notification.
			 *        Trigger SETUP notification.
			 * IN NAK: finish OUT normally. Notify data done.
			 */
			_usbd_ep_clear_bank_status(epn, 1);
    9266:	7ffb      	ldrb	r3, [r7, #31]
    9268:	2101      	movs	r1, #1
    926a:	4618      	mov	r0, r3
    926c:	4b09      	ldr	r3, [pc, #36]	; (9294 <_usb_d_dev_out_next+0x290>)
    926e:	4798      	blx	r3
			/* Detect OUT, SETUP, NAK IN */
			inten = USB_D_BANK0_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL1;
    9270:	232d      	movs	r3, #45	; 0x2d
    9272:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    9276:	e012      	b.n	929e <_usb_d_dev_out_next+0x29a>
    9278:	20001064 	.word	0x20001064
    927c:	000087e5 	.word	0x000087e5
    9280:	00012f1d 	.word	0x00012f1d
    9284:	00008811 	.word	0x00008811
    9288:	00008999 	.word	0x00008999
    928c:	000080f1 	.word	0x000080f1
    9290:	0000a115 	.word	0x0000a115
    9294:	000089d9 	.word	0x000089d9
		} else {
			/* Initialize normal OUT transaction. */
			inten = USB_D_BANK0_INT_FLAGS;
    9298:	2325      	movs	r3, #37	; 0x25
    929a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
		}
		hri_usbendpoint_set_EPINTEN_reg(hw, epn, inten);
    929e:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
    92a2:	7ffb      	ldrb	r3, [r7, #31]
    92a4:	4619      	mov	r1, r3
    92a6:	6a38      	ldr	r0, [r7, #32]
    92a8:	4b05      	ldr	r3, [pc, #20]	; (92c0 <_usb_d_dev_out_next+0x2bc>)
    92aa:	4798      	blx	r3
	}
	_usbd_ep_set_out_rdy(epn, 0, true);
    92ac:	7ffb      	ldrb	r3, [r7, #31]
    92ae:	2201      	movs	r2, #1
    92b0:	2100      	movs	r1, #0
    92b2:	4618      	mov	r0, r3
    92b4:	4b03      	ldr	r3, [pc, #12]	; (92c4 <_usb_d_dev_out_next+0x2c0>)
    92b6:	4798      	blx	r3
}
    92b8:	372c      	adds	r7, #44	; 0x2c
    92ba:	46bd      	mov	sp, r7
    92bc:	bd90      	pop	{r4, r7, pc}
    92be:	bf00      	nop
    92c0:	000080c5 	.word	0x000080c5
    92c4:	00008a69 	.word	0x00008a69

000092c8 <_usb_d_dev_handle_setup>:
/**
 * \brief Handles setup received interrupt
 * \param[in] ept Pointer to endpoint information.
 */
static void _usb_d_dev_handle_setup(struct _usb_d_dev_ep *ept)
{
    92c8:	b580      	push	{r7, lr}
    92ca:	b084      	sub	sp, #16
    92cc:	af00      	add	r7, sp, #0
    92ce:	6078      	str	r0, [r7, #4]
	uint8_t epn     = USB_EP_GET_N(ept->ep);
    92d0:	687b      	ldr	r3, [r7, #4]
    92d2:	7c9b      	ldrb	r3, [r3, #18]
    92d4:	f003 030f 	and.w	r3, r3, #15
    92d8:	73fb      	strb	r3, [r7, #15]
	bool    is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    92da:	687b      	ldr	r3, [r7, #4]
    92dc:	7cdb      	ldrb	r3, [r3, #19]
    92de:	f003 0307 	and.w	r3, r3, #7
    92e2:	b2db      	uxtb	r3, r3
    92e4:	2b01      	cmp	r3, #1
    92e6:	bf0c      	ite	eq
    92e8:	2301      	moveq	r3, #1
    92ea:	2300      	movne	r3, #0
    92ec:	73bb      	strb	r3, [r7, #14]

	if (!is_ctrl) {
    92ee:	7bbb      	ldrb	r3, [r7, #14]
    92f0:	f083 0301 	eor.w	r3, r3, #1
    92f4:	b2db      	uxtb	r3, r3
    92f6:	2b00      	cmp	r3, #0
    92f8:	d008      	beq.n	930c <_usb_d_dev_handle_setup+0x44>
		/* Should never be here! */
		_usbd_ep_ack_setup(epn);
    92fa:	7bfb      	ldrb	r3, [r7, #15]
    92fc:	4618      	mov	r0, r3
    92fe:	4b20      	ldr	r3, [pc, #128]	; (9380 <_usb_d_dev_handle_setup+0xb8>)
    9300:	4798      	blx	r3
		_usbd_ep_stop_setup(epn);
    9302:	7bfb      	ldrb	r3, [r7, #15]
    9304:	4618      	mov	r0, r3
    9306:	4b1f      	ldr	r3, [pc, #124]	; (9384 <_usb_d_dev_handle_setup+0xbc>)
    9308:	4798      	blx	r3
		return;
    930a:	e036      	b.n	937a <_usb_d_dev_handle_setup+0xb2>
	}
	/* Control transfer:
	 * SETUP transaction will terminate IN/OUT transaction,
	 * and start new transaction with received SETUP packet.
	 */
	if (_usb_d_dev_ep_is_busy(ept)) {
    930c:	687b      	ldr	r3, [r7, #4]
    930e:	7cdb      	ldrb	r3, [r3, #19]
    9310:	f003 0340 	and.w	r3, r3, #64	; 0x40
    9314:	b2db      	uxtb	r3, r3
    9316:	2b00      	cmp	r3, #0
    9318:	d010      	beq.n	933c <_usb_d_dev_handle_setup+0x74>
		ept->flags.bits.is_busy = 0;
    931a:	687a      	ldr	r2, [r7, #4]
    931c:	7cd3      	ldrb	r3, [r2, #19]
    931e:	f36f 1386 	bfc	r3, #6, #1
    9322:	74d3      	strb	r3, [r2, #19]

		/* Stop transfer on either direction. */
		_usbd_ep_set_in_rdy(epn, 1, false);
    9324:	7bfb      	ldrb	r3, [r7, #15]
    9326:	2200      	movs	r2, #0
    9328:	2101      	movs	r1, #1
    932a:	4618      	mov	r0, r3
    932c:	4b16      	ldr	r3, [pc, #88]	; (9388 <_usb_d_dev_handle_setup+0xc0>)
    932e:	4798      	blx	r3
		_usbd_ep_set_out_rdy(epn, 0, false);
    9330:	7bfb      	ldrb	r3, [r7, #15]
    9332:	2200      	movs	r2, #0
    9334:	2100      	movs	r1, #0
    9336:	4618      	mov	r0, r3
    9338:	4b14      	ldr	r3, [pc, #80]	; (938c <_usb_d_dev_handle_setup+0xc4>)
    933a:	4798      	blx	r3
	}
	ept->flags.bits.is_stalled = 0;
    933c:	687a      	ldr	r2, [r7, #4]
    933e:	7cd3      	ldrb	r3, [r2, #19]
    9340:	f36f 03c3 	bfc	r3, #3, #1
    9344:	74d3      	strb	r3, [r2, #19]

	/* Clear status and notify SETUP */
	_usbd_ep_clear_bank_status(epn, 0);
    9346:	7bfb      	ldrb	r3, [r7, #15]
    9348:	2100      	movs	r1, #0
    934a:	4618      	mov	r0, r3
    934c:	4b10      	ldr	r3, [pc, #64]	; (9390 <_usb_d_dev_handle_setup+0xc8>)
    934e:	4798      	blx	r3
	_usbd_ep_clear_bank_status(epn, 1);
    9350:	7bfb      	ldrb	r3, [r7, #15]
    9352:	2101      	movs	r1, #1
    9354:	4618      	mov	r0, r3
    9356:	4b0e      	ldr	r3, [pc, #56]	; (9390 <_usb_d_dev_handle_setup+0xc8>)
    9358:	4798      	blx	r3
	_usbd_ep_int_ack(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
    935a:	7bfb      	ldrb	r3, [r7, #15]
    935c:	216f      	movs	r1, #111	; 0x6f
    935e:	4618      	mov	r0, r3
    9360:	4b0c      	ldr	r3, [pc, #48]	; (9394 <_usb_d_dev_handle_setup+0xcc>)
    9362:	4798      	blx	r3
	_usbd_ep_int_dis(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
    9364:	7bfb      	ldrb	r3, [r7, #15]
    9366:	216f      	movs	r1, #111	; 0x6f
    9368:	4618      	mov	r0, r3
    936a:	4b0b      	ldr	r3, [pc, #44]	; (9398 <_usb_d_dev_handle_setup+0xd0>)
    936c:	4798      	blx	r3
	/* Invoke callback. */
	dev_inst.ep_callbacks.setup(ept->ep);
    936e:	4b0b      	ldr	r3, [pc, #44]	; (939c <_usb_d_dev_handle_setup+0xd4>)
    9370:	689b      	ldr	r3, [r3, #8]
    9372:	687a      	ldr	r2, [r7, #4]
    9374:	7c92      	ldrb	r2, [r2, #18]
    9376:	4610      	mov	r0, r2
    9378:	4798      	blx	r3
}
    937a:	3710      	adds	r7, #16
    937c:	46bd      	mov	sp, r7
    937e:	bd80      	pop	{r7, pc}
    9380:	0000876d 	.word	0x0000876d
    9384:	00008719 	.word	0x00008719
    9388:	00008a11 	.word	0x00008a11
    938c:	00008a69 	.word	0x00008a69
    9390:	000089d9 	.word	0x000089d9
    9394:	00008519 	.word	0x00008519
    9398:	00008569 	.word	0x00008569
    939c:	20000f9c 	.word	0x20000f9c

000093a0 <_usb_d_dev_handle_stall>:
 * \brief Handles stall sent interrupt
 * \param[in] ept Pointer to endpoint information.
 * \param[in] bank_n Bank number.
 */
static void _usb_d_dev_handle_stall(struct _usb_d_dev_ep *ept, const uint8_t bank_n)
{
    93a0:	b580      	push	{r7, lr}
    93a2:	b084      	sub	sp, #16
    93a4:	af00      	add	r7, sp, #0
    93a6:	6078      	str	r0, [r7, #4]
    93a8:	460b      	mov	r3, r1
    93aa:	70fb      	strb	r3, [r7, #3]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    93ac:	687b      	ldr	r3, [r7, #4]
    93ae:	7c9b      	ldrb	r3, [r3, #18]
    93b0:	f003 030f 	and.w	r3, r3, #15
    93b4:	73fb      	strb	r3, [r7, #15]
	/* Clear interrupt enable. Leave status there for status check. */
	_usbd_ep_int_stall_en(epn, bank_n, false);
    93b6:	78f9      	ldrb	r1, [r7, #3]
    93b8:	7bfb      	ldrb	r3, [r7, #15]
    93ba:	2200      	movs	r2, #0
    93bc:	4618      	mov	r0, r3
    93be:	4b07      	ldr	r3, [pc, #28]	; (93dc <_usb_d_dev_handle_stall+0x3c>)
    93c0:	4798      	blx	r3
	dev_inst.ep_callbacks.done(ept->ep, USB_TRANS_STALL, ept->trans_count);
    93c2:	4b07      	ldr	r3, [pc, #28]	; (93e0 <_usb_d_dev_handle_stall+0x40>)
    93c4:	691b      	ldr	r3, [r3, #16]
    93c6:	687a      	ldr	r2, [r7, #4]
    93c8:	7c90      	ldrb	r0, [r2, #18]
    93ca:	687a      	ldr	r2, [r7, #4]
    93cc:	6892      	ldr	r2, [r2, #8]
    93ce:	2101      	movs	r1, #1
    93d0:	4798      	blx	r3
}
    93d2:	bf00      	nop
    93d4:	3710      	adds	r7, #16
    93d6:	46bd      	mov	sp, r7
    93d8:	bd80      	pop	{r7, pc}
    93da:	bf00      	nop
    93dc:	000086cd 	.word	0x000086cd
    93e0:	20000f9c 	.word	0x20000f9c

000093e4 <_usb_d_dev_handle_trfail>:
 * \brief Handles transaction fail interrupt
 * \param[in] ept Pointer to endpoint information.
 * \param[in] bank_n Bank number.
 */
static void _usb_d_dev_handle_trfail(struct _usb_d_dev_ep *ept, const uint8_t bank_n)
{
    93e4:	b580      	push	{r7, lr}
    93e6:	b088      	sub	sp, #32
    93e8:	af00      	add	r7, sp, #0
    93ea:	6078      	str	r0, [r7, #4]
    93ec:	460b      	mov	r3, r1
    93ee:	70fb      	strb	r3, [r7, #3]
	Usb *              hw      = USB;
    93f0:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    93f4:	61fb      	str	r3, [r7, #28]
	uint8_t            epn     = USB_EP_GET_N(ept->ep);
    93f6:	687b      	ldr	r3, [r7, #4]
    93f8:	7c9b      	ldrb	r3, [r3, #18]
    93fa:	f003 030f 	and.w	r3, r3, #15
    93fe:	76fb      	strb	r3, [r7, #27]
	const uint8_t      fail[2] = {USB_DEVICE_EPINTFLAG_TRFAIL0, USB_DEVICE_EPINTFLAG_TRFAIL1};
    9400:	4b61      	ldr	r3, [pc, #388]	; (9588 <_usb_d_dev_handle_trfail+0x1a4>)
    9402:	881b      	ldrh	r3, [r3, #0]
    9404:	823b      	strh	r3, [r7, #16]
	UsbDeviceDescBank *bank    = prvt_inst.desc_table[epn].DeviceDescBank;
    9406:	7efb      	ldrb	r3, [r7, #27]
    9408:	015b      	lsls	r3, r3, #5
    940a:	4a60      	ldr	r2, [pc, #384]	; (958c <_usb_d_dev_handle_trfail+0x1a8>)
    940c:	4413      	add	r3, r2
    940e:	617b      	str	r3, [r7, #20]
	uint8_t            eptype
    9410:	78fb      	ldrb	r3, [r7, #3]
    9412:	2b00      	cmp	r3, #0
    9414:	d006      	beq.n	9424 <_usb_d_dev_handle_trfail+0x40>
    9416:	7efb      	ldrb	r3, [r7, #27]
    9418:	4619      	mov	r1, r3
    941a:	69f8      	ldr	r0, [r7, #28]
    941c:	4b5c      	ldr	r3, [pc, #368]	; (9590 <_usb_d_dev_handle_trfail+0x1ac>)
    941e:	4798      	blx	r3
    9420:	4603      	mov	r3, r0
    9422:	e005      	b.n	9430 <_usb_d_dev_handle_trfail+0x4c>
    9424:	7efb      	ldrb	r3, [r7, #27]
    9426:	4619      	mov	r1, r3
    9428:	69f8      	ldr	r0, [r7, #28]
    942a:	4b5a      	ldr	r3, [pc, #360]	; (9594 <_usb_d_dev_handle_trfail+0x1b0>)
    942c:	4798      	blx	r3
    942e:	4603      	mov	r3, r0
    9430:	74fb      	strb	r3, [r7, #19]
	    = bank_n ? hri_usbendpoint_read_EPCFG_EPTYPE1_bf(hw, epn) : hri_usbendpoint_read_EPCFG_EPTYPE0_bf(hw, epn);
	bool                      is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    9432:	687b      	ldr	r3, [r7, #4]
    9434:	7cdb      	ldrb	r3, [r3, #19]
    9436:	f003 0307 	and.w	r3, r3, #7
    943a:	b2db      	uxtb	r3, r3
    943c:	2b01      	cmp	r3, #1
    943e:	bf0c      	ite	eq
    9440:	2301      	moveq	r3, #1
    9442:	2300      	movne	r3, #0
    9444:	74bb      	strb	r3, [r7, #18]
	USB_DEVICE_STATUS_BK_Type st;
	st.reg = bank[bank_n].STATUS_BK.reg;
    9446:	78fb      	ldrb	r3, [r7, #3]
    9448:	011b      	lsls	r3, r3, #4
    944a:	697a      	ldr	r2, [r7, #20]
    944c:	4413      	add	r3, r2
    944e:	7a9b      	ldrb	r3, [r3, #10]
    9450:	b2db      	uxtb	r3, r3
    9452:	733b      	strb	r3, [r7, #12]

	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
    9454:	7cfb      	ldrb	r3, [r7, #19]
    9456:	2b02      	cmp	r3, #2
    9458:	d12f      	bne.n	94ba <_usb_d_dev_handle_trfail+0xd6>
    945a:	7b3b      	ldrb	r3, [r7, #12]
    945c:	f003 0301 	and.w	r3, r3, #1
    9460:	b2db      	uxtb	r3, r3
    9462:	2b00      	cmp	r3, #0
    9464:	d029      	beq.n	94ba <_usb_d_dev_handle_trfail+0xd6>
		bank[bank_n].STATUS_BK.bit.CRCERR = 0;
    9466:	78fb      	ldrb	r3, [r7, #3]
    9468:	011b      	lsls	r3, r3, #4
    946a:	697a      	ldr	r2, [r7, #20]
    946c:	441a      	add	r2, r3
    946e:	7a93      	ldrb	r3, [r2, #10]
    9470:	f36f 0300 	bfc	r3, #0, #1
    9474:	7293      	strb	r3, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    9476:	78fb      	ldrb	r3, [r7, #3]
    9478:	f107 0220 	add.w	r2, r7, #32
    947c:	4413      	add	r3, r2
    947e:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    9482:	7efb      	ldrb	r3, [r7, #27]
    9484:	4619      	mov	r1, r3
    9486:	69f8      	ldr	r0, [r7, #28]
    9488:	4b43      	ldr	r3, [pc, #268]	; (9598 <_usb_d_dev_handle_trfail+0x1b4>)
    948a:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
    948c:	78fb      	ldrb	r3, [r7, #3]
    948e:	f107 0220 	add.w	r2, r7, #32
    9492:	4413      	add	r3, r2
    9494:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    9498:	7efb      	ldrb	r3, [r7, #27]
    949a:	4619      	mov	r1, r3
    949c:	69f8      	ldr	r0, [r7, #28]
    949e:	4b3f      	ldr	r3, [pc, #252]	; (959c <_usb_d_dev_handle_trfail+0x1b8>)
    94a0:	4798      	blx	r3
		_usb_d_dev_trans_stop(ept, bank_n, USB_TRANS_ERROR);
    94a2:	78fb      	ldrb	r3, [r7, #3]
    94a4:	2b00      	cmp	r3, #0
    94a6:	bf14      	ite	ne
    94a8:	2301      	movne	r3, #1
    94aa:	2300      	moveq	r3, #0
    94ac:	b2db      	uxtb	r3, r3
    94ae:	2204      	movs	r2, #4
    94b0:	4619      	mov	r1, r3
    94b2:	6878      	ldr	r0, [r7, #4]
    94b4:	4b3a      	ldr	r3, [pc, #232]	; (95a0 <_usb_d_dev_handle_trfail+0x1bc>)
    94b6:	4798      	blx	r3
	} else {
		_usbd_ep_clear_bank_status(epn, bank_n);
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
	}
}
    94b8:	e062      	b.n	9580 <_usb_d_dev_handle_trfail+0x19c>
	} else if (st.bit.ERRORFLOW) {
    94ba:	7b3b      	ldrb	r3, [r7, #12]
    94bc:	f003 0302 	and.w	r3, r3, #2
    94c0:	b2db      	uxtb	r3, r3
    94c2:	2b00      	cmp	r3, #0
    94c4:	d040      	beq.n	9548 <_usb_d_dev_handle_trfail+0x164>
		bank[bank_n].STATUS_BK.bit.ERRORFLOW = 0;
    94c6:	78fb      	ldrb	r3, [r7, #3]
    94c8:	011b      	lsls	r3, r3, #4
    94ca:	697a      	ldr	r2, [r7, #20]
    94cc:	441a      	add	r2, r3
    94ce:	7a93      	ldrb	r3, [r2, #10]
    94d0:	f36f 0341 	bfc	r3, #1, #1
    94d4:	7293      	strb	r3, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    94d6:	78fb      	ldrb	r3, [r7, #3]
    94d8:	f107 0220 	add.w	r2, r7, #32
    94dc:	4413      	add	r3, r2
    94de:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    94e2:	7efb      	ldrb	r3, [r7, #27]
    94e4:	4619      	mov	r1, r3
    94e6:	69f8      	ldr	r0, [r7, #28]
    94e8:	4b2b      	ldr	r3, [pc, #172]	; (9598 <_usb_d_dev_handle_trfail+0x1b4>)
    94ea:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
    94ec:	78fb      	ldrb	r3, [r7, #3]
    94ee:	f107 0220 	add.w	r2, r7, #32
    94f2:	4413      	add	r3, r2
    94f4:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    94f8:	7efb      	ldrb	r3, [r7, #27]
    94fa:	4619      	mov	r1, r3
    94fc:	69f8      	ldr	r0, [r7, #28]
    94fe:	4b27      	ldr	r3, [pc, #156]	; (959c <_usb_d_dev_handle_trfail+0x1b8>)
    9500:	4798      	blx	r3
		if (is_ctrl && _usb_d_dev_ep_is_busy(ept)) {
    9502:	7cbb      	ldrb	r3, [r7, #18]
    9504:	2b00      	cmp	r3, #0
    9506:	d03b      	beq.n	9580 <_usb_d_dev_handle_trfail+0x19c>
    9508:	687b      	ldr	r3, [r7, #4]
    950a:	7cdb      	ldrb	r3, [r3, #19]
    950c:	f003 0340 	and.w	r3, r3, #64	; 0x40
    9510:	b2db      	uxtb	r3, r3
    9512:	2b00      	cmp	r3, #0
    9514:	d034      	beq.n	9580 <_usb_d_dev_handle_trfail+0x19c>
			if (bank_n != _usb_d_dev_ep_is_in(ept)) {
    9516:	687b      	ldr	r3, [r7, #4]
    9518:	7cdb      	ldrb	r3, [r3, #19]
    951a:	f3c3 13c0 	ubfx	r3, r3, #7, #1
    951e:	b2db      	uxtb	r3, r3
    9520:	461a      	mov	r2, r3
    9522:	78fb      	ldrb	r3, [r7, #3]
    9524:	4293      	cmp	r3, r2
    9526:	d02b      	beq.n	9580 <_usb_d_dev_handle_trfail+0x19c>
				_usb_d_dev_trans_stop(ept, _usb_d_dev_ep_is_in(ept), USB_TRANS_DONE);
    9528:	687b      	ldr	r3, [r7, #4]
    952a:	7cdb      	ldrb	r3, [r3, #19]
    952c:	f3c3 13c0 	ubfx	r3, r3, #7, #1
    9530:	b2db      	uxtb	r3, r3
    9532:	2b00      	cmp	r3, #0
    9534:	bf14      	ite	ne
    9536:	2301      	movne	r3, #1
    9538:	2300      	moveq	r3, #0
    953a:	b2db      	uxtb	r3, r3
    953c:	2200      	movs	r2, #0
    953e:	4619      	mov	r1, r3
    9540:	6878      	ldr	r0, [r7, #4]
    9542:	4b17      	ldr	r3, [pc, #92]	; (95a0 <_usb_d_dev_handle_trfail+0x1bc>)
    9544:	4798      	blx	r3
}
    9546:	e01b      	b.n	9580 <_usb_d_dev_handle_trfail+0x19c>
		_usbd_ep_clear_bank_status(epn, bank_n);
    9548:	78fa      	ldrb	r2, [r7, #3]
    954a:	7efb      	ldrb	r3, [r7, #27]
    954c:	4611      	mov	r1, r2
    954e:	4618      	mov	r0, r3
    9550:	4b14      	ldr	r3, [pc, #80]	; (95a4 <_usb_d_dev_handle_trfail+0x1c0>)
    9552:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    9554:	78fb      	ldrb	r3, [r7, #3]
    9556:	f107 0220 	add.w	r2, r7, #32
    955a:	4413      	add	r3, r2
    955c:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    9560:	7efb      	ldrb	r3, [r7, #27]
    9562:	4619      	mov	r1, r3
    9564:	69f8      	ldr	r0, [r7, #28]
    9566:	4b0c      	ldr	r3, [pc, #48]	; (9598 <_usb_d_dev_handle_trfail+0x1b4>)
    9568:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
    956a:	78fb      	ldrb	r3, [r7, #3]
    956c:	f107 0220 	add.w	r2, r7, #32
    9570:	4413      	add	r3, r2
    9572:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    9576:	7efb      	ldrb	r3, [r7, #27]
    9578:	4619      	mov	r1, r3
    957a:	69f8      	ldr	r0, [r7, #28]
    957c:	4b07      	ldr	r3, [pc, #28]	; (959c <_usb_d_dev_handle_trfail+0x1b8>)
    957e:	4798      	blx	r3
}
    9580:	bf00      	nop
    9582:	3720      	adds	r7, #32
    9584:	46bd      	mov	sp, r7
    9586:	bd80      	pop	{r7, pc}
    9588:	000135b0 	.word	0x000135b0
    958c:	20001064 	.word	0x20001064
    9590:	0000814d 	.word	0x0000814d
    9594:	0000811d 	.word	0x0000811d
    9598:	00007ff1 	.word	0x00007ff1
    959c:	000080f1 	.word	0x000080f1
    95a0:	0000a15d 	.word	0x0000a15d
    95a4:	000089d9 	.word	0x000089d9

000095a8 <_usb_d_dev_trans_setup_isr>:
 * \brief Analyze flags for setup transaction
 * \param[in] ept Pointer to endpoint information.
 * \param[in] flags Endpoint interrupt flags.
 */
static inline void _usb_d_dev_trans_setup_isr(struct _usb_d_dev_ep *ept, const uint8_t flags)
{
    95a8:	b580      	push	{r7, lr}
    95aa:	b082      	sub	sp, #8
    95ac:	af00      	add	r7, sp, #0
    95ae:	6078      	str	r0, [r7, #4]
    95b0:	460b      	mov	r3, r1
    95b2:	70fb      	strb	r3, [r7, #3]
	/*
	 * SETPU is automatically ACKed by hardware
	 * OUT & IN should be set to NAK when checking SETUP
	 * No need to check OUT & IN status.
	 */
	if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    95b4:	78fb      	ldrb	r3, [r7, #3]
    95b6:	f003 0310 	and.w	r3, r3, #16
    95ba:	2b00      	cmp	r3, #0
    95bc:	d003      	beq.n	95c6 <_usb_d_dev_trans_setup_isr+0x1e>
		_usb_d_dev_handle_setup(ept);
    95be:	6878      	ldr	r0, [r7, #4]
    95c0:	4b0c      	ldr	r3, [pc, #48]	; (95f4 <_usb_d_dev_trans_setup_isr+0x4c>)
    95c2:	4798      	blx	r3
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
		_usb_d_dev_handle_stall(ept, 1);
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
		_usb_d_dev_handle_stall(ept, 0);
	}
}
    95c4:	e012      	b.n	95ec <_usb_d_dev_trans_setup_isr+0x44>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    95c6:	78fb      	ldrb	r3, [r7, #3]
    95c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
    95cc:	2b00      	cmp	r3, #0
    95ce:	d004      	beq.n	95da <_usb_d_dev_trans_setup_isr+0x32>
		_usb_d_dev_handle_stall(ept, 1);
    95d0:	2101      	movs	r1, #1
    95d2:	6878      	ldr	r0, [r7, #4]
    95d4:	4b08      	ldr	r3, [pc, #32]	; (95f8 <_usb_d_dev_trans_setup_isr+0x50>)
    95d6:	4798      	blx	r3
}
    95d8:	e008      	b.n	95ec <_usb_d_dev_trans_setup_isr+0x44>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    95da:	78fb      	ldrb	r3, [r7, #3]
    95dc:	f003 0320 	and.w	r3, r3, #32
    95e0:	2b00      	cmp	r3, #0
    95e2:	d003      	beq.n	95ec <_usb_d_dev_trans_setup_isr+0x44>
		_usb_d_dev_handle_stall(ept, 0);
    95e4:	2100      	movs	r1, #0
    95e6:	6878      	ldr	r0, [r7, #4]
    95e8:	4b03      	ldr	r3, [pc, #12]	; (95f8 <_usb_d_dev_trans_setup_isr+0x50>)
    95ea:	4798      	blx	r3
}
    95ec:	bf00      	nop
    95ee:	3708      	adds	r7, #8
    95f0:	46bd      	mov	sp, r7
    95f2:	bd80      	pop	{r7, pc}
    95f4:	000092c9 	.word	0x000092c9
    95f8:	000093a1 	.word	0x000093a1

000095fc <_usb_d_dev_trans_in_isr>:
 * \brief Analyze flags for IN transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] flags Endpoint interrupt flags.
 */
static inline void _usb_d_dev_trans_in_isr(struct _usb_d_dev_ep *ept, const uint8_t flags)
{
    95fc:	b580      	push	{r7, lr}
    95fe:	b082      	sub	sp, #8
    9600:	af00      	add	r7, sp, #0
    9602:	6078      	str	r0, [r7, #4]
    9604:	460b      	mov	r3, r1
    9606:	70fb      	strb	r3, [r7, #3]
	/*
	 * Check IN flags
	 * If control endpoint, SETUP & OUT is checked to see if abort
	 */
	if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    9608:	78fb      	ldrb	r3, [r7, #3]
    960a:	f003 0340 	and.w	r3, r3, #64	; 0x40
    960e:	2b00      	cmp	r3, #0
    9610:	d004      	beq.n	961c <_usb_d_dev_trans_in_isr+0x20>
		_usb_d_dev_handle_stall(ept, 1);
    9612:	2101      	movs	r1, #1
    9614:	6878      	ldr	r0, [r7, #4]
    9616:	4b1a      	ldr	r3, [pc, #104]	; (9680 <_usb_d_dev_trans_in_isr+0x84>)
    9618:	4798      	blx	r3
			_usb_d_dev_handle_trfail(ept, 0);
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
			_usb_d_dev_handle_setup(ept);
		}
	}
}
    961a:	e02c      	b.n	9676 <_usb_d_dev_trans_in_isr+0x7a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    961c:	78fb      	ldrb	r3, [r7, #3]
    961e:	f003 0308 	and.w	r3, r3, #8
    9622:	2b00      	cmp	r3, #0
    9624:	d004      	beq.n	9630 <_usb_d_dev_trans_in_isr+0x34>
		_usb_d_dev_handle_trfail(ept, 1);
    9626:	2101      	movs	r1, #1
    9628:	6878      	ldr	r0, [r7, #4]
    962a:	4b16      	ldr	r3, [pc, #88]	; (9684 <_usb_d_dev_trans_in_isr+0x88>)
    962c:	4798      	blx	r3
}
    962e:	e022      	b.n	9676 <_usb_d_dev_trans_in_isr+0x7a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT1) {
    9630:	78fb      	ldrb	r3, [r7, #3]
    9632:	f003 0302 	and.w	r3, r3, #2
    9636:	2b00      	cmp	r3, #0
    9638:	d004      	beq.n	9644 <_usb_d_dev_trans_in_isr+0x48>
		_usb_d_dev_in_next(ept, true);
    963a:	2101      	movs	r1, #1
    963c:	6878      	ldr	r0, [r7, #4]
    963e:	4b12      	ldr	r3, [pc, #72]	; (9688 <_usb_d_dev_trans_in_isr+0x8c>)
    9640:	4798      	blx	r3
}
    9642:	e018      	b.n	9676 <_usb_d_dev_trans_in_isr+0x7a>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    9644:	687b      	ldr	r3, [r7, #4]
    9646:	7cdb      	ldrb	r3, [r3, #19]
    9648:	f003 0307 	and.w	r3, r3, #7
    964c:	b2db      	uxtb	r3, r3
    964e:	2b01      	cmp	r3, #1
    9650:	d111      	bne.n	9676 <_usb_d_dev_trans_in_isr+0x7a>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    9652:	78fb      	ldrb	r3, [r7, #3]
    9654:	f003 0304 	and.w	r3, r3, #4
    9658:	2b00      	cmp	r3, #0
    965a:	d004      	beq.n	9666 <_usb_d_dev_trans_in_isr+0x6a>
			_usb_d_dev_handle_trfail(ept, 0);
    965c:	2100      	movs	r1, #0
    965e:	6878      	ldr	r0, [r7, #4]
    9660:	4b08      	ldr	r3, [pc, #32]	; (9684 <_usb_d_dev_trans_in_isr+0x88>)
    9662:	4798      	blx	r3
}
    9664:	e007      	b.n	9676 <_usb_d_dev_trans_in_isr+0x7a>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    9666:	78fb      	ldrb	r3, [r7, #3]
    9668:	f003 0310 	and.w	r3, r3, #16
    966c:	2b00      	cmp	r3, #0
    966e:	d002      	beq.n	9676 <_usb_d_dev_trans_in_isr+0x7a>
			_usb_d_dev_handle_setup(ept);
    9670:	6878      	ldr	r0, [r7, #4]
    9672:	4b06      	ldr	r3, [pc, #24]	; (968c <_usb_d_dev_trans_in_isr+0x90>)
    9674:	4798      	blx	r3
}
    9676:	bf00      	nop
    9678:	3708      	adds	r7, #8
    967a:	46bd      	mov	sp, r7
    967c:	bd80      	pop	{r7, pc}
    967e:	bf00      	nop
    9680:	000093a1 	.word	0x000093a1
    9684:	000093e5 	.word	0x000093e5
    9688:	00008ded 	.word	0x00008ded
    968c:	000092c9 	.word	0x000092c9

00009690 <_usb_d_dev_trans_out_isr>:
 * \brief Analyze flags for OUT transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] flags Endpoint interrupt flags.
 */
static inline void _usb_d_dev_trans_out_isr(struct _usb_d_dev_ep *ept, const uint8_t flags)
{
    9690:	b580      	push	{r7, lr}
    9692:	b082      	sub	sp, #8
    9694:	af00      	add	r7, sp, #0
    9696:	6078      	str	r0, [r7, #4]
    9698:	460b      	mov	r3, r1
    969a:	70fb      	strb	r3, [r7, #3]
	/*
	 * Check OUT flags.
	 * If control endpoint, SETUP & IN NAK is checked to see if abort
	 */
	if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    969c:	78fb      	ldrb	r3, [r7, #3]
    969e:	f003 0320 	and.w	r3, r3, #32
    96a2:	2b00      	cmp	r3, #0
    96a4:	d004      	beq.n	96b0 <_usb_d_dev_trans_out_isr+0x20>
		_usb_d_dev_handle_stall(ept, 0);
    96a6:	2100      	movs	r1, #0
    96a8:	6878      	ldr	r0, [r7, #4]
    96aa:	4b1a      	ldr	r3, [pc, #104]	; (9714 <_usb_d_dev_trans_out_isr+0x84>)
    96ac:	4798      	blx	r3
			_usb_d_dev_handle_trfail(ept, 1);
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
			_usb_d_dev_handle_setup(ept);
		}
	}
}
    96ae:	e02c      	b.n	970a <_usb_d_dev_trans_out_isr+0x7a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    96b0:	78fb      	ldrb	r3, [r7, #3]
    96b2:	f003 0304 	and.w	r3, r3, #4
    96b6:	2b00      	cmp	r3, #0
    96b8:	d004      	beq.n	96c4 <_usb_d_dev_trans_out_isr+0x34>
		_usb_d_dev_handle_trfail(ept, 0);
    96ba:	2100      	movs	r1, #0
    96bc:	6878      	ldr	r0, [r7, #4]
    96be:	4b16      	ldr	r3, [pc, #88]	; (9718 <_usb_d_dev_trans_out_isr+0x88>)
    96c0:	4798      	blx	r3
}
    96c2:	e022      	b.n	970a <_usb_d_dev_trans_out_isr+0x7a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT0) {
    96c4:	78fb      	ldrb	r3, [r7, #3]
    96c6:	f003 0301 	and.w	r3, r3, #1
    96ca:	2b00      	cmp	r3, #0
    96cc:	d004      	beq.n	96d8 <_usb_d_dev_trans_out_isr+0x48>
		_usb_d_dev_out_next(ept, true);
    96ce:	2101      	movs	r1, #1
    96d0:	6878      	ldr	r0, [r7, #4]
    96d2:	4b12      	ldr	r3, [pc, #72]	; (971c <_usb_d_dev_trans_out_isr+0x8c>)
    96d4:	4798      	blx	r3
}
    96d6:	e018      	b.n	970a <_usb_d_dev_trans_out_isr+0x7a>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    96d8:	687b      	ldr	r3, [r7, #4]
    96da:	7cdb      	ldrb	r3, [r3, #19]
    96dc:	f003 0307 	and.w	r3, r3, #7
    96e0:	b2db      	uxtb	r3, r3
    96e2:	2b01      	cmp	r3, #1
    96e4:	d111      	bne.n	970a <_usb_d_dev_trans_out_isr+0x7a>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    96e6:	78fb      	ldrb	r3, [r7, #3]
    96e8:	f003 0308 	and.w	r3, r3, #8
    96ec:	2b00      	cmp	r3, #0
    96ee:	d004      	beq.n	96fa <_usb_d_dev_trans_out_isr+0x6a>
			_usb_d_dev_handle_trfail(ept, 1);
    96f0:	2101      	movs	r1, #1
    96f2:	6878      	ldr	r0, [r7, #4]
    96f4:	4b08      	ldr	r3, [pc, #32]	; (9718 <_usb_d_dev_trans_out_isr+0x88>)
    96f6:	4798      	blx	r3
}
    96f8:	e007      	b.n	970a <_usb_d_dev_trans_out_isr+0x7a>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    96fa:	78fb      	ldrb	r3, [r7, #3]
    96fc:	f003 0310 	and.w	r3, r3, #16
    9700:	2b00      	cmp	r3, #0
    9702:	d002      	beq.n	970a <_usb_d_dev_trans_out_isr+0x7a>
			_usb_d_dev_handle_setup(ept);
    9704:	6878      	ldr	r0, [r7, #4]
    9706:	4b06      	ldr	r3, [pc, #24]	; (9720 <_usb_d_dev_trans_out_isr+0x90>)
    9708:	4798      	blx	r3
}
    970a:	bf00      	nop
    970c:	3708      	adds	r7, #8
    970e:	46bd      	mov	sp, r7
    9710:	bd80      	pop	{r7, pc}
    9712:	bf00      	nop
    9714:	000093a1 	.word	0x000093a1
    9718:	000093e5 	.word	0x000093e5
    971c:	00009005 	.word	0x00009005
    9720:	000092c9 	.word	0x000092c9

00009724 <_usb_d_dev_handle_eps>:
 * \brief Handles the endpoint interrupts.
 * \param[in] epint Endpoint interrupt summary (by bits).
 * \param[in] ept Pointer to endpoint information.
 */
static inline void _usb_d_dev_handle_eps(uint32_t epint, struct _usb_d_dev_ep *ept)
{
    9724:	b580      	push	{r7, lr}
    9726:	b084      	sub	sp, #16
    9728:	af00      	add	r7, sp, #0
    972a:	6078      	str	r0, [r7, #4]
    972c:	6039      	str	r1, [r7, #0]
	Usb *hw = USB;
    972e:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    9732:	60fb      	str	r3, [r7, #12]

	uint8_t flags, mask;
	uint8_t epn = USB_EP_GET_N(ept->ep);
    9734:	683b      	ldr	r3, [r7, #0]
    9736:	7c9b      	ldrb	r3, [r3, #18]
    9738:	f003 030f 	and.w	r3, r3, #15
    973c:	72fb      	strb	r3, [r7, #11]

	if (!(epint & (1u << epn))) {
    973e:	7afb      	ldrb	r3, [r7, #11]
    9740:	2201      	movs	r2, #1
    9742:	409a      	lsls	r2, r3
    9744:	687b      	ldr	r3, [r7, #4]
    9746:	4013      	ands	r3, r2
    9748:	2b00      	cmp	r3, #0
    974a:	d03d      	beq.n	97c8 <_usb_d_dev_handle_eps+0xa4>
		return;
	}
	flags = hw->DEVICE.DeviceEndpoint[epn].EPINTFLAG.reg;
    974c:	7afb      	ldrb	r3, [r7, #11]
    974e:	68fa      	ldr	r2, [r7, #12]
    9750:	3308      	adds	r3, #8
    9752:	015b      	lsls	r3, r3, #5
    9754:	4413      	add	r3, r2
    9756:	3307      	adds	r3, #7
    9758:	781b      	ldrb	r3, [r3, #0]
    975a:	72bb      	strb	r3, [r7, #10]
	mask  = hw->DEVICE.DeviceEndpoint[epn].EPINTENSET.reg;
    975c:	7afb      	ldrb	r3, [r7, #11]
    975e:	68fa      	ldr	r2, [r7, #12]
    9760:	015b      	lsls	r3, r3, #5
    9762:	4413      	add	r3, r2
    9764:	f203 1309 	addw	r3, r3, #265	; 0x109
    9768:	781b      	ldrb	r3, [r3, #0]
    976a:	727b      	strb	r3, [r7, #9]
	flags &= mask;
    976c:	7aba      	ldrb	r2, [r7, #10]
    976e:	7a7b      	ldrb	r3, [r7, #9]
    9770:	4013      	ands	r3, r2
    9772:	72bb      	strb	r3, [r7, #10]
	if (flags) {
    9774:	7abb      	ldrb	r3, [r7, #10]
    9776:	2b00      	cmp	r3, #0
    9778:	d027      	beq.n	97ca <_usb_d_dev_handle_eps+0xa6>
		if ((ept->flags.bits.eptype == 0x1) && !_usb_d_dev_ep_is_busy(ept)) {
    977a:	683b      	ldr	r3, [r7, #0]
    977c:	7cdb      	ldrb	r3, [r3, #19]
    977e:	f003 0307 	and.w	r3, r3, #7
    9782:	b2db      	uxtb	r3, r3
    9784:	2b01      	cmp	r3, #1
    9786:	d10c      	bne.n	97a2 <_usb_d_dev_handle_eps+0x7e>
    9788:	683b      	ldr	r3, [r7, #0]
    978a:	7cdb      	ldrb	r3, [r3, #19]
    978c:	f003 0340 	and.w	r3, r3, #64	; 0x40
    9790:	b2db      	uxtb	r3, r3
    9792:	2b00      	cmp	r3, #0
    9794:	d105      	bne.n	97a2 <_usb_d_dev_handle_eps+0x7e>
			_usb_d_dev_trans_setup_isr(ept, flags);
    9796:	7abb      	ldrb	r3, [r7, #10]
    9798:	4619      	mov	r1, r3
    979a:	6838      	ldr	r0, [r7, #0]
    979c:	4b0c      	ldr	r3, [pc, #48]	; (97d0 <_usb_d_dev_handle_eps+0xac>)
    979e:	4798      	blx	r3
    97a0:	e013      	b.n	97ca <_usb_d_dev_handle_eps+0xa6>
		} else if (_usb_d_dev_ep_is_in(ept)) {
    97a2:	683b      	ldr	r3, [r7, #0]
    97a4:	7cdb      	ldrb	r3, [r3, #19]
    97a6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    97aa:	b2db      	uxtb	r3, r3
    97ac:	2b00      	cmp	r3, #0
    97ae:	d005      	beq.n	97bc <_usb_d_dev_handle_eps+0x98>
			_usb_d_dev_trans_in_isr(ept, flags);
    97b0:	7abb      	ldrb	r3, [r7, #10]
    97b2:	4619      	mov	r1, r3
    97b4:	6838      	ldr	r0, [r7, #0]
    97b6:	4b07      	ldr	r3, [pc, #28]	; (97d4 <_usb_d_dev_handle_eps+0xb0>)
    97b8:	4798      	blx	r3
    97ba:	e006      	b.n	97ca <_usb_d_dev_handle_eps+0xa6>
		} else {
			_usb_d_dev_trans_out_isr(ept, flags);
    97bc:	7abb      	ldrb	r3, [r7, #10]
    97be:	4619      	mov	r1, r3
    97c0:	6838      	ldr	r0, [r7, #0]
    97c2:	4b05      	ldr	r3, [pc, #20]	; (97d8 <_usb_d_dev_handle_eps+0xb4>)
    97c4:	4798      	blx	r3
    97c6:	e000      	b.n	97ca <_usb_d_dev_handle_eps+0xa6>
		return;
    97c8:	bf00      	nop
		}
	}
}
    97ca:	3710      	adds	r7, #16
    97cc:	46bd      	mov	sp, r7
    97ce:	bd80      	pop	{r7, pc}
    97d0:	000095a9 	.word	0x000095a9
    97d4:	000095fd 	.word	0x000095fd
    97d8:	00009691 	.word	0x00009691

000097dc <_usb_d_dev_handler>:
/**
 * \brief USB device interrupt handler
 * \param[in] unused The parameter is not used
 */
static void _usb_d_dev_handler(void)
{
    97dc:	b580      	push	{r7, lr}
    97de:	b084      	sub	sp, #16
    97e0:	af00      	add	r7, sp, #0
	Usb *   hw = USB;
    97e2:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    97e6:	60bb      	str	r3, [r7, #8]
	uint8_t i;

	uint16_t epint = hw->DEVICE.EPINTSMRY.reg;
    97e8:	68bb      	ldr	r3, [r7, #8]
    97ea:	8c1b      	ldrh	r3, [r3, #32]
    97ec:	80fb      	strh	r3, [r7, #6]
	if (0 == epint) {
    97ee:	88fb      	ldrh	r3, [r7, #6]
    97f0:	2b00      	cmp	r3, #0
    97f2:	d104      	bne.n	97fe <_usb_d_dev_handler+0x22>
		if (_usb_d_dev_handle_nep()) {
    97f4:	4b13      	ldr	r3, [pc, #76]	; (9844 <_usb_d_dev_handler+0x68>)
    97f6:	4798      	blx	r3
    97f8:	4603      	mov	r3, r0
    97fa:	2b00      	cmp	r3, #0
    97fc:	d11e      	bne.n	983c <_usb_d_dev_handler+0x60>
			return;
		}
	}
	/* Handle endpoints */
	for (i = 0; i < USB_D_N_EP; i++) {
    97fe:	2300      	movs	r3, #0
    9800:	73fb      	strb	r3, [r7, #15]
    9802:	e017      	b.n	9834 <_usb_d_dev_handler+0x58>
		struct _usb_d_dev_ep *ept = &dev_inst.ep[i];
    9804:	7bfa      	ldrb	r2, [r7, #15]
    9806:	4613      	mov	r3, r2
    9808:	009b      	lsls	r3, r3, #2
    980a:	4413      	add	r3, r2
    980c:	009b      	lsls	r3, r3, #2
    980e:	3310      	adds	r3, #16
    9810:	4a0d      	ldr	r2, [pc, #52]	; (9848 <_usb_d_dev_handler+0x6c>)
    9812:	4413      	add	r3, r2
    9814:	3304      	adds	r3, #4
    9816:	603b      	str	r3, [r7, #0]
		if (ept->ep == 0xFF) {
    9818:	683b      	ldr	r3, [r7, #0]
    981a:	7c9b      	ldrb	r3, [r3, #18]
    981c:	2bff      	cmp	r3, #255	; 0xff
    981e:	d005      	beq.n	982c <_usb_d_dev_handler+0x50>
			continue;
		}
		_usb_d_dev_handle_eps(epint, ept);
    9820:	88fb      	ldrh	r3, [r7, #6]
    9822:	6839      	ldr	r1, [r7, #0]
    9824:	4618      	mov	r0, r3
    9826:	4b09      	ldr	r3, [pc, #36]	; (984c <_usb_d_dev_handler+0x70>)
    9828:	4798      	blx	r3
    982a:	e000      	b.n	982e <_usb_d_dev_handler+0x52>
			continue;
    982c:	bf00      	nop
	for (i = 0; i < USB_D_N_EP; i++) {
    982e:	7bfb      	ldrb	r3, [r7, #15]
    9830:	3301      	adds	r3, #1
    9832:	73fb      	strb	r3, [r7, #15]
    9834:	7bfb      	ldrb	r3, [r7, #15]
    9836:	2b08      	cmp	r3, #8
    9838:	d9e4      	bls.n	9804 <_usb_d_dev_handler+0x28>
    983a:	e000      	b.n	983e <_usb_d_dev_handler+0x62>
			return;
    983c:	bf00      	nop
	}
}
    983e:	3710      	adds	r7, #16
    9840:	46bd      	mov	sp, r7
    9842:	bd80      	pop	{r7, pc}
    9844:	00008d35 	.word	0x00008d35
    9848:	20000f9c 	.word	0x20000f9c
    984c:	00009725 	.word	0x00009725

00009850 <_usb_d_dev_reset_epts>:

/**
 * \brief Reset all endpoint software instances
 */
static void _usb_d_dev_reset_epts(void)
{
    9850:	b580      	push	{r7, lr}
    9852:	b082      	sub	sp, #8
    9854:	af00      	add	r7, sp, #0
	uint8_t i;
	for (i = 0; i < USB_D_N_EP; i++) {
    9856:	2300      	movs	r3, #0
    9858:	71fb      	strb	r3, [r7, #7]
    985a:	e023      	b.n	98a4 <_usb_d_dev_reset_epts+0x54>
		_usb_d_dev_trans_done(&dev_inst.ep[i], USB_TRANS_RESET);
    985c:	79fa      	ldrb	r2, [r7, #7]
    985e:	4613      	mov	r3, r2
    9860:	009b      	lsls	r3, r3, #2
    9862:	4413      	add	r3, r2
    9864:	009b      	lsls	r3, r3, #2
    9866:	3310      	adds	r3, #16
    9868:	4a14      	ldr	r2, [pc, #80]	; (98bc <_usb_d_dev_reset_epts+0x6c>)
    986a:	4413      	add	r3, r2
    986c:	3304      	adds	r3, #4
    986e:	2103      	movs	r1, #3
    9870:	4618      	mov	r0, r3
    9872:	4b13      	ldr	r3, [pc, #76]	; (98c0 <_usb_d_dev_reset_epts+0x70>)
    9874:	4798      	blx	r3
		dev_inst.ep[i].ep       = 0xFF;
    9876:	79fa      	ldrb	r2, [r7, #7]
    9878:	4910      	ldr	r1, [pc, #64]	; (98bc <_usb_d_dev_reset_epts+0x6c>)
    987a:	4613      	mov	r3, r2
    987c:	009b      	lsls	r3, r3, #2
    987e:	4413      	add	r3, r2
    9880:	009b      	lsls	r3, r3, #2
    9882:	440b      	add	r3, r1
    9884:	3326      	adds	r3, #38	; 0x26
    9886:	22ff      	movs	r2, #255	; 0xff
    9888:	701a      	strb	r2, [r3, #0]
		dev_inst.ep[i].flags.u8 = 0;
    988a:	79fa      	ldrb	r2, [r7, #7]
    988c:	490b      	ldr	r1, [pc, #44]	; (98bc <_usb_d_dev_reset_epts+0x6c>)
    988e:	4613      	mov	r3, r2
    9890:	009b      	lsls	r3, r3, #2
    9892:	4413      	add	r3, r2
    9894:	009b      	lsls	r3, r3, #2
    9896:	440b      	add	r3, r1
    9898:	3327      	adds	r3, #39	; 0x27
    989a:	2200      	movs	r2, #0
    989c:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < USB_D_N_EP; i++) {
    989e:	79fb      	ldrb	r3, [r7, #7]
    98a0:	3301      	adds	r3, #1
    98a2:	71fb      	strb	r3, [r7, #7]
    98a4:	79fb      	ldrb	r3, [r7, #7]
    98a6:	2b08      	cmp	r3, #8
    98a8:	d9d8      	bls.n	985c <_usb_d_dev_reset_epts+0xc>
	}
	memset(prvt_inst.desc_table, 0, sizeof(UsbDeviceDescriptor) * (CONF_USB_D_MAX_EP_N + 1));
    98aa:	22a0      	movs	r2, #160	; 0xa0
    98ac:	2100      	movs	r1, #0
    98ae:	4805      	ldr	r0, [pc, #20]	; (98c4 <_usb_d_dev_reset_epts+0x74>)
    98b0:	4b05      	ldr	r3, [pc, #20]	; (98c8 <_usb_d_dev_reset_epts+0x78>)
    98b2:	4798      	blx	r3
}
    98b4:	bf00      	nop
    98b6:	3708      	adds	r7, #8
    98b8:	46bd      	mov	sp, r7
    98ba:	bd80      	pop	{r7, pc}
    98bc:	20000f9c 	.word	0x20000f9c
    98c0:	0000a115 	.word	0x0000a115
    98c4:	20001064 	.word	0x20001064
    98c8:	00013051 	.word	0x00013051

000098cc <_usb_d_dev_init>:

int32_t _usb_d_dev_init(void)
{
    98cc:	b580      	push	{r7, lr}
    98ce:	b084      	sub	sp, #16
    98d0:	af00      	add	r7, sp, #0
	Usb *         hw         = USB;
    98d2:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    98d6:	60fb      	str	r3, [r7, #12]
	uint8_t       speed      = CONF_USB_D_SPEED;
    98d8:	2301      	movs	r3, #1
    98da:	72fb      	strb	r3, [r7, #11]
	const uint8_t spdconf[4] = {
    98dc:	2304      	movs	r3, #4
    98de:	713b      	strb	r3, [r7, #4]
    98e0:	2300      	movs	r3, #0
    98e2:	717b      	strb	r3, [r7, #5]
    98e4:	2300      	movs	r3, #0
    98e6:	71bb      	strb	r3, [r7, #6]
    98e8:	2300      	movs	r3, #0
    98ea:	71fb      	strb	r3, [r7, #7]
	    USB_DEVICE_CTRLB_SPDCONF(0), /* FS */
	    0,
	    0 /* Reserved */
	};

	if (!hri_usbdevice_is_syncing(hw, USB_SYNCBUSY_SWRST)) {
    98ec:	2101      	movs	r1, #1
    98ee:	68f8      	ldr	r0, [r7, #12]
    98f0:	4b26      	ldr	r3, [pc, #152]	; (998c <_usb_d_dev_init+0xc0>)
    98f2:	4798      	blx	r3
    98f4:	4603      	mov	r3, r0
    98f6:	f083 0301 	eor.w	r3, r3, #1
    98fa:	b2db      	uxtb	r3, r3
    98fc:	2b00      	cmp	r3, #0
    98fe:	d011      	beq.n	9924 <_usb_d_dev_init+0x58>
		if (hri_usbdevice_get_CTRLA_reg(hw, USB_CTRLA_ENABLE)) {
    9900:	2102      	movs	r1, #2
    9902:	68f8      	ldr	r0, [r7, #12]
    9904:	4b22      	ldr	r3, [pc, #136]	; (9990 <_usb_d_dev_init+0xc4>)
    9906:	4798      	blx	r3
    9908:	4603      	mov	r3, r0
    990a:	2b00      	cmp	r3, #0
    990c:	d006      	beq.n	991c <_usb_d_dev_init+0x50>
			hri_usbdevice_clear_CTRLA_ENABLE_bit(hw);
    990e:	68f8      	ldr	r0, [r7, #12]
    9910:	4b20      	ldr	r3, [pc, #128]	; (9994 <_usb_d_dev_init+0xc8>)
    9912:	4798      	blx	r3
			hri_usbdevice_wait_for_sync(hw, USB_SYNCBUSY_ENABLE);
    9914:	2102      	movs	r1, #2
    9916:	68f8      	ldr	r0, [r7, #12]
    9918:	4b1f      	ldr	r3, [pc, #124]	; (9998 <_usb_d_dev_init+0xcc>)
    991a:	4798      	blx	r3
		}
		hri_usbdevice_write_CTRLA_reg(hw, USB_CTRLA_SWRST);
    991c:	2101      	movs	r1, #1
    991e:	68f8      	ldr	r0, [r7, #12]
    9920:	4b1e      	ldr	r3, [pc, #120]	; (999c <_usb_d_dev_init+0xd0>)
    9922:	4798      	blx	r3
	}
	hri_usbdevice_wait_for_sync(hw, USB_SYNCBUSY_SWRST);
    9924:	2101      	movs	r1, #1
    9926:	68f8      	ldr	r0, [r7, #12]
    9928:	4b1b      	ldr	r3, [pc, #108]	; (9998 <_usb_d_dev_init+0xcc>)
    992a:	4798      	blx	r3

	dev_inst.callbacks.sof   = (_usb_d_dev_sof_cb_t)_dummy_func_no_return;
    992c:	4b1c      	ldr	r3, [pc, #112]	; (99a0 <_usb_d_dev_init+0xd4>)
    992e:	4a1d      	ldr	r2, [pc, #116]	; (99a4 <_usb_d_dev_init+0xd8>)
    9930:	601a      	str	r2, [r3, #0]
	dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)_dummy_func_no_return;
    9932:	4b1b      	ldr	r3, [pc, #108]	; (99a0 <_usb_d_dev_init+0xd4>)
    9934:	4a1b      	ldr	r2, [pc, #108]	; (99a4 <_usb_d_dev_init+0xd8>)
    9936:	605a      	str	r2, [r3, #4]

	dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)_dummy_func_no_return;
    9938:	4b19      	ldr	r3, [pc, #100]	; (99a0 <_usb_d_dev_init+0xd4>)
    993a:	4a1a      	ldr	r2, [pc, #104]	; (99a4 <_usb_d_dev_init+0xd8>)
    993c:	609a      	str	r2, [r3, #8]
	dev_inst.ep_callbacks.more  = (_usb_d_dev_ep_cb_more_t)_dummy_func_no_return;
    993e:	4b18      	ldr	r3, [pc, #96]	; (99a0 <_usb_d_dev_init+0xd4>)
    9940:	4a18      	ldr	r2, [pc, #96]	; (99a4 <_usb_d_dev_init+0xd8>)
    9942:	60da      	str	r2, [r3, #12]
	dev_inst.ep_callbacks.done  = (_usb_d_dev_ep_cb_done_t)_dummy_func_no_return;
    9944:	4b16      	ldr	r3, [pc, #88]	; (99a0 <_usb_d_dev_init+0xd4>)
    9946:	4a17      	ldr	r2, [pc, #92]	; (99a4 <_usb_d_dev_init+0xd8>)
    9948:	611a      	str	r2, [r3, #16]

	_usb_d_dev_reset_epts();
    994a:	4b17      	ldr	r3, [pc, #92]	; (99a8 <_usb_d_dev_init+0xdc>)
    994c:	4798      	blx	r3

	_usb_load_calib();
    994e:	4b17      	ldr	r3, [pc, #92]	; (99ac <_usb_d_dev_init+0xe0>)
    9950:	4798      	blx	r3

	hri_usbdevice_write_CTRLA_reg(hw, USB_CTRLA_RUNSTDBY);
    9952:	2104      	movs	r1, #4
    9954:	68f8      	ldr	r0, [r7, #12]
    9956:	4b11      	ldr	r3, [pc, #68]	; (999c <_usb_d_dev_init+0xd0>)
    9958:	4798      	blx	r3
	hri_usbdevice_write_DESCADD_reg(hw, (uint32_t)prvt_inst.desc_table);
    995a:	4b15      	ldr	r3, [pc, #84]	; (99b0 <_usb_d_dev_init+0xe4>)
    995c:	4619      	mov	r1, r3
    995e:	68f8      	ldr	r0, [r7, #12]
    9960:	4b14      	ldr	r3, [pc, #80]	; (99b4 <_usb_d_dev_init+0xe8>)
    9962:	4798      	blx	r3
	hri_usbdevice_write_CTRLB_reg(hw, spdconf[speed] | USB_DEVICE_CTRLB_DETACH);
    9964:	7afb      	ldrb	r3, [r7, #11]
    9966:	f107 0210 	add.w	r2, r7, #16
    996a:	4413      	add	r3, r2
    996c:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
    9970:	f043 0301 	orr.w	r3, r3, #1
    9974:	b2db      	uxtb	r3, r3
    9976:	b29b      	uxth	r3, r3
    9978:	4619      	mov	r1, r3
    997a:	68f8      	ldr	r0, [r7, #12]
    997c:	4b0e      	ldr	r3, [pc, #56]	; (99b8 <_usb_d_dev_init+0xec>)
    997e:	4798      	blx	r3

	return ERR_NONE;
    9980:	2300      	movs	r3, #0
}
    9982:	4618      	mov	r0, r3
    9984:	3710      	adds	r7, #16
    9986:	46bd      	mov	sp, r7
    9988:	bd80      	pop	{r7, pc}
    998a:	bf00      	nop
    998c:	00007f65 	.word	0x00007f65
    9990:	000082b5 	.word	0x000082b5
    9994:	00008289 	.word	0x00008289
    9998:	00007f3b 	.word	0x00007f3b
    999c:	000082e5 	.word	0x000082e5
    99a0:	20000f9c 	.word	0x20000f9c
    99a4:	000083ad 	.word	0x000083ad
    99a8:	00009851 	.word	0x00009851
    99ac:	000083c5 	.word	0x000083c5
    99b0:	20001064 	.word	0x20001064
    99b4:	00008391 	.word	0x00008391
    99b8:	00008355 	.word	0x00008355

000099bc <_usb_d_dev_enable>:
	NVIC_DisableIRQ(USB_3_IRQn);
	NVIC_ClearPendingIRQ(USB_3_IRQn);
}

int32_t _usb_d_dev_enable(void)
{
    99bc:	b580      	push	{r7, lr}
    99be:	b082      	sub	sp, #8
    99c0:	af00      	add	r7, sp, #0
	Usb *   hw = USB;
    99c2:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    99c6:	607b      	str	r3, [r7, #4]
	uint8_t ctrla;

	if (hri_usbdevice_get_SYNCBUSY_reg(hw, (USB_SYNCBUSY_ENABLE | USB_SYNCBUSY_SWRST))) {
    99c8:	2103      	movs	r1, #3
    99ca:	6878      	ldr	r0, [r7, #4]
    99cc:	4b17      	ldr	r3, [pc, #92]	; (9a2c <_usb_d_dev_enable+0x70>)
    99ce:	4798      	blx	r3
    99d0:	4603      	mov	r3, r0
    99d2:	2b00      	cmp	r3, #0
    99d4:	d002      	beq.n	99dc <_usb_d_dev_enable+0x20>
		return -USB_ERR_DENIED;
    99d6:	f06f 0310 	mvn.w	r3, #16
    99da:	e023      	b.n	9a24 <_usb_d_dev_enable+0x68>
	}
	ctrla = hri_usbdevice_read_CTRLA_reg(hw);
    99dc:	6878      	ldr	r0, [r7, #4]
    99de:	4b14      	ldr	r3, [pc, #80]	; (9a30 <_usb_d_dev_enable+0x74>)
    99e0:	4798      	blx	r3
    99e2:	4603      	mov	r3, r0
    99e4:	70fb      	strb	r3, [r7, #3]
	if ((ctrla & USB_CTRLA_ENABLE) == 0) {
    99e6:	78fb      	ldrb	r3, [r7, #3]
    99e8:	f003 0302 	and.w	r3, r3, #2
    99ec:	2b00      	cmp	r3, #0
    99ee:	d107      	bne.n	9a00 <_usb_d_dev_enable+0x44>
		hri_usbdevice_write_CTRLA_reg(hw, ctrla | USB_CTRLA_ENABLE);
    99f0:	78fb      	ldrb	r3, [r7, #3]
    99f2:	f043 0302 	orr.w	r3, r3, #2
    99f6:	b2db      	uxtb	r3, r3
    99f8:	4619      	mov	r1, r3
    99fa:	6878      	ldr	r0, [r7, #4]
    99fc:	4b0d      	ldr	r3, [pc, #52]	; (9a34 <_usb_d_dev_enable+0x78>)
    99fe:	4798      	blx	r3
	}

	NVIC_EnableIRQ(USB_0_IRQn);
    9a00:	2050      	movs	r0, #80	; 0x50
    9a02:	4b0d      	ldr	r3, [pc, #52]	; (9a38 <_usb_d_dev_enable+0x7c>)
    9a04:	4798      	blx	r3
	NVIC_EnableIRQ(USB_1_IRQn);
    9a06:	2051      	movs	r0, #81	; 0x51
    9a08:	4b0b      	ldr	r3, [pc, #44]	; (9a38 <_usb_d_dev_enable+0x7c>)
    9a0a:	4798      	blx	r3
	NVIC_EnableIRQ(USB_2_IRQn);
    9a0c:	2052      	movs	r0, #82	; 0x52
    9a0e:	4b0a      	ldr	r3, [pc, #40]	; (9a38 <_usb_d_dev_enable+0x7c>)
    9a10:	4798      	blx	r3
	NVIC_EnableIRQ(USB_3_IRQn);
    9a12:	2053      	movs	r0, #83	; 0x53
    9a14:	4b08      	ldr	r3, [pc, #32]	; (9a38 <_usb_d_dev_enable+0x7c>)
    9a16:	4798      	blx	r3

	hri_usbdevice_set_INTEN_reg(hw,
    9a18:	f240 218d 	movw	r1, #653	; 0x28d
    9a1c:	6878      	ldr	r0, [r7, #4]
    9a1e:	4b07      	ldr	r3, [pc, #28]	; (9a3c <_usb_d_dev_enable+0x80>)
    9a20:	4798      	blx	r3
	                            USB_DEVICE_INTENSET_SOF | USB_DEVICE_INTENSET_EORST | USB_DEVICE_INTENSET_RAMACER
	                                | USB_D_SUSPEND_INT_FLAGS);

	return ERR_NONE;
    9a22:	2300      	movs	r3, #0
}
    9a24:	4618      	mov	r0, r3
    9a26:	3708      	adds	r7, #8
    9a28:	46bd      	mov	sp, r7
    9a2a:	bd80      	pop	{r7, pc}
    9a2c:	0000825f 	.word	0x0000825f
    9a30:	0000830d 	.word	0x0000830d
    9a34:	000082e5 	.word	0x000082e5
    9a38:	00007e71 	.word	0x00007e71
    9a3c:	00008209 	.word	0x00008209

00009a40 <_usb_d_dev_attach>:

	return ERR_NONE;
}

void _usb_d_dev_attach(void)
{
    9a40:	b580      	push	{r7, lr}
    9a42:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_CTRLB_DETACH_bit(USB);
    9a44:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9a48:	4b01      	ldr	r3, [pc, #4]	; (9a50 <_usb_d_dev_attach+0x10>)
    9a4a:	4798      	blx	r3
}
    9a4c:	bf00      	nop
    9a4e:	bd80      	pop	{r7, pc}
    9a50:	00008331 	.word	0x00008331

00009a54 <_usb_d_dev_set_address>:

	return speed[sp];
}

void _usb_d_dev_set_address(uint8_t addr)
{
    9a54:	b580      	push	{r7, lr}
    9a56:	b082      	sub	sp, #8
    9a58:	af00      	add	r7, sp, #0
    9a5a:	4603      	mov	r3, r0
    9a5c:	71fb      	strb	r3, [r7, #7]
	hri_usbdevice_write_DADD_reg(USB, USB_DEVICE_DADD_ADDEN | USB_DEVICE_DADD_DADD(addr));
    9a5e:	79fb      	ldrb	r3, [r7, #7]
    9a60:	f063 037f 	orn	r3, r3, #127	; 0x7f
    9a64:	b2db      	uxtb	r3, r3
    9a66:	4619      	mov	r1, r3
    9a68:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9a6c:	4b02      	ldr	r3, [pc, #8]	; (9a78 <_usb_d_dev_set_address+0x24>)
    9a6e:	4798      	blx	r3
}
    9a70:	bf00      	nop
    9a72:	3708      	adds	r7, #8
    9a74:	46bd      	mov	sp, r7
    9a76:	bd80      	pop	{r7, pc}
    9a78:	00008373 	.word	0x00008373

00009a7c <_usb_d_dev_trans_setup>:
/**
 *  \brief Start a setup transaction
 *  \param[in] ept Endpoint information.
 */
static inline void _usb_d_dev_trans_setup(struct _usb_d_dev_ep *ept)
{
    9a7c:	b590      	push	{r4, r7, lr}
    9a7e:	b085      	sub	sp, #20
    9a80:	af00      	add	r7, sp, #0
    9a82:	6078      	str	r0, [r7, #4]
	Usb *   hw  = USB;
    9a84:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    9a88:	60fb      	str	r3, [r7, #12]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    9a8a:	687b      	ldr	r3, [r7, #4]
    9a8c:	7c9b      	ldrb	r3, [r3, #18]
    9a8e:	f003 030f 	and.w	r3, r3, #15
    9a92:	72fb      	strb	r3, [r7, #11]

	_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    9a94:	687b      	ldr	r3, [r7, #4]
    9a96:	68db      	ldr	r3, [r3, #12]
    9a98:	461a      	mov	r2, r3
    9a9a:	7afb      	ldrb	r3, [r7, #11]
    9a9c:	2100      	movs	r1, #0
    9a9e:	4618      	mov	r0, r3
    9aa0:	4b0f      	ldr	r3, [pc, #60]	; (9ae0 <_usb_d_dev_trans_setup+0x64>)
    9aa2:	4798      	blx	r3
	_usbd_ep_set_out_trans(epn, 0, ept->size, 0);
    9aa4:	687b      	ldr	r3, [r7, #4]
    9aa6:	8a1b      	ldrh	r3, [r3, #16]
    9aa8:	461a      	mov	r2, r3
    9aaa:	7af8      	ldrb	r0, [r7, #11]
    9aac:	2300      	movs	r3, #0
    9aae:	2100      	movs	r1, #0
    9ab0:	4c0c      	ldr	r4, [pc, #48]	; (9ae4 <_usb_d_dev_trans_setup+0x68>)
    9ab2:	47a0      	blx	r4

	hri_usbendpoint_clear_EPSTATUS_reg(hw, epn, USB_DEVICE_EPSTATUS_STALLRQ(0x3) | USB_DEVICE_EPSTATUS_BK1RDY);
    9ab4:	7afb      	ldrb	r3, [r7, #11]
    9ab6:	22b0      	movs	r2, #176	; 0xb0
    9ab8:	4619      	mov	r1, r3
    9aba:	68f8      	ldr	r0, [r7, #12]
    9abc:	4b0a      	ldr	r3, [pc, #40]	; (9ae8 <_usb_d_dev_trans_setup+0x6c>)
    9abe:	4798      	blx	r3
	_usbd_ep_set_out_rdy(epn, 0, false);
    9ac0:	7afb      	ldrb	r3, [r7, #11]
    9ac2:	2200      	movs	r2, #0
    9ac4:	2100      	movs	r1, #0
    9ac6:	4618      	mov	r0, r3
    9ac8:	4b08      	ldr	r3, [pc, #32]	; (9aec <_usb_d_dev_trans_setup+0x70>)
    9aca:	4798      	blx	r3

	hri_usbendpoint_set_EPINTEN_reg(hw, epn, USB_D_SETUP_INT_FLAGS);
    9acc:	7afb      	ldrb	r3, [r7, #11]
    9ace:	2210      	movs	r2, #16
    9ad0:	4619      	mov	r1, r3
    9ad2:	68f8      	ldr	r0, [r7, #12]
    9ad4:	4b06      	ldr	r3, [pc, #24]	; (9af0 <_usb_d_dev_trans_setup+0x74>)
    9ad6:	4798      	blx	r3
}
    9ad8:	bf00      	nop
    9ada:	3714      	adds	r7, #20
    9adc:	46bd      	mov	sp, r7
    9ade:	bd90      	pop	{r4, r7, pc}
    9ae0:	00008811 	.word	0x00008811
    9ae4:	00008999 	.word	0x00008999
    9ae8:	00008071 	.word	0x00008071
    9aec:	00008a69 	.word	0x00008a69
    9af0:	000080c5 	.word	0x000080c5

00009af4 <_usb_d_dev_ep_init>:
{
	return _usb_d_dev_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_siz);
}

int32_t _usb_d_dev_ep_init(const uint8_t ep, const uint8_t attr, const uint16_t max_pkt_siz)
{
    9af4:	b580      	push	{r7, lr}
    9af6:	b088      	sub	sp, #32
    9af8:	af00      	add	r7, sp, #0
    9afa:	4603      	mov	r3, r0
    9afc:	71fb      	strb	r3, [r7, #7]
    9afe:	460b      	mov	r3, r1
    9b00:	71bb      	strb	r3, [r7, #6]
    9b02:	4613      	mov	r3, r2
    9b04:	80bb      	strh	r3, [r7, #4]
	uint8_t               epn = USB_EP_GET_N(ep);
    9b06:	79fb      	ldrb	r3, [r7, #7]
    9b08:	f003 030f 	and.w	r3, r3, #15
    9b0c:	77fb      	strb	r3, [r7, #31]
	bool                  dir = USB_EP_GET_DIR(ep);
    9b0e:	79fb      	ldrb	r3, [r7, #7]
    9b10:	f003 0380 	and.w	r3, r3, #128	; 0x80
    9b14:	2b00      	cmp	r3, #0
    9b16:	bf14      	ite	ne
    9b18:	2301      	movne	r3, #1
    9b1a:	2300      	moveq	r3, #0
    9b1c:	77bb      	strb	r3, [r7, #30]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    9b1e:	7fba      	ldrb	r2, [r7, #30]
    9b20:	7ffb      	ldrb	r3, [r7, #31]
    9b22:	4611      	mov	r1, r2
    9b24:	4618      	mov	r0, r3
    9b26:	4b3e      	ldr	r3, [pc, #248]	; (9c20 <_usb_d_dev_ep_init+0x12c>)
    9b28:	4798      	blx	r3
    9b2a:	61b8      	str	r0, [r7, #24]

	uint8_t                        ep_type = attr & USB_EP_XTYPE_MASK;
    9b2c:	79bb      	ldrb	r3, [r7, #6]
    9b2e:	f003 0303 	and.w	r3, r3, #3
    9b32:	75fb      	strb	r3, [r7, #23]
	const struct _usb_ep_cfg_item *pcfg    = &_usb_ep_cfgs[epn];
    9b34:	7ffa      	ldrb	r2, [r7, #31]
    9b36:	4613      	mov	r3, r2
    9b38:	005b      	lsls	r3, r3, #1
    9b3a:	4413      	add	r3, r2
    9b3c:	009b      	lsls	r3, r3, #2
    9b3e:	4a39      	ldr	r2, [pc, #228]	; (9c24 <_usb_d_dev_ep_init+0x130>)
    9b40:	4413      	add	r3, r2
    9b42:	613b      	str	r3, [r7, #16]

	if (epn > CONF_USB_D_MAX_EP_N) {
    9b44:	7ffb      	ldrb	r3, [r7, #31]
    9b46:	2b04      	cmp	r3, #4
    9b48:	d902      	bls.n	9b50 <_usb_d_dev_ep_init+0x5c>
		return -USB_ERR_PARAM;
    9b4a:	f06f 0311 	mvn.w	r3, #17
    9b4e:	e063      	b.n	9c18 <_usb_d_dev_ep_init+0x124>
	}
	if (ept->ep != 0xFF) {
    9b50:	69bb      	ldr	r3, [r7, #24]
    9b52:	7c9b      	ldrb	r3, [r3, #18]
    9b54:	2bff      	cmp	r3, #255	; 0xff
    9b56:	d002      	beq.n	9b5e <_usb_d_dev_ep_init+0x6a>
		return -USB_ERR_REDO;
    9b58:	f06f 0313 	mvn.w	r3, #19
    9b5c:	e05c      	b.n	9c18 <_usb_d_dev_ep_init+0x124>
	}
	if (ep_type == USB_EP_XTYPE_CTRL) {
    9b5e:	7dfb      	ldrb	r3, [r7, #23]
    9b60:	2b00      	cmp	r3, #0
    9b62:	d11f      	bne.n	9ba4 <_usb_d_dev_ep_init+0xb0>
		struct _usb_d_dev_ep *ept_in = _usb_d_dev_ept(epn, !dir);
    9b64:	7fbb      	ldrb	r3, [r7, #30]
    9b66:	2b00      	cmp	r3, #0
    9b68:	bf14      	ite	ne
    9b6a:	2301      	movne	r3, #1
    9b6c:	2300      	moveq	r3, #0
    9b6e:	b2db      	uxtb	r3, r3
    9b70:	f083 0301 	eor.w	r3, r3, #1
    9b74:	b2db      	uxtb	r3, r3
    9b76:	f003 0301 	and.w	r3, r3, #1
    9b7a:	b2da      	uxtb	r2, r3
    9b7c:	7ffb      	ldrb	r3, [r7, #31]
    9b7e:	4611      	mov	r1, r2
    9b80:	4618      	mov	r0, r3
    9b82:	4b27      	ldr	r3, [pc, #156]	; (9c20 <_usb_d_dev_ep_init+0x12c>)
    9b84:	4798      	blx	r3
    9b86:	60f8      	str	r0, [r7, #12]
		if (ept_in->ep != 0xFF) {
    9b88:	68fb      	ldr	r3, [r7, #12]
    9b8a:	7c9b      	ldrb	r3, [r3, #18]
    9b8c:	2bff      	cmp	r3, #255	; 0xff
    9b8e:	d002      	beq.n	9b96 <_usb_d_dev_ep_init+0xa2>
			return -USB_ERR_REDO;
    9b90:	f06f 0313 	mvn.w	r3, #19
    9b94:	e040      	b.n	9c18 <_usb_d_dev_ep_init+0x124>
		}
		if (pcfg->cache == NULL) {
    9b96:	693b      	ldr	r3, [r7, #16]
    9b98:	681b      	ldr	r3, [r3, #0]
    9b9a:	2b00      	cmp	r3, #0
    9b9c:	d102      	bne.n	9ba4 <_usb_d_dev_ep_init+0xb0>
			return -USB_ERR_FUNC;
    9b9e:	f06f 0312 	mvn.w	r3, #18
    9ba2:	e039      	b.n	9c18 <_usb_d_dev_ep_init+0x124>
		}
	}
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    9ba4:	7fbb      	ldrb	r3, [r7, #30]
    9ba6:	2b00      	cmp	r3, #0
    9ba8:	d007      	beq.n	9bba <_usb_d_dev_ep_init+0xc6>
    9baa:	693b      	ldr	r3, [r7, #16]
    9bac:	685b      	ldr	r3, [r3, #4]
    9bae:	2b00      	cmp	r3, #0
    9bb0:	bf14      	ite	ne
    9bb2:	2301      	movne	r3, #1
    9bb4:	2300      	moveq	r3, #0
    9bb6:	b2db      	uxtb	r3, r3
    9bb8:	e006      	b.n	9bc8 <_usb_d_dev_ep_init+0xd4>
    9bba:	693b      	ldr	r3, [r7, #16]
    9bbc:	681b      	ldr	r3, [r3, #0]
    9bbe:	2b00      	cmp	r3, #0
    9bc0:	bf14      	ite	ne
    9bc2:	2301      	movne	r3, #1
    9bc4:	2300      	moveq	r3, #0
    9bc6:	b2db      	uxtb	r3, r3
    9bc8:	2b00      	cmp	r3, #0
    9bca:	d00f      	beq.n	9bec <_usb_d_dev_ep_init+0xf8>
    9bcc:	7fbb      	ldrb	r3, [r7, #30]
    9bce:	2b00      	cmp	r3, #0
    9bd0:	d003      	beq.n	9bda <_usb_d_dev_ep_init+0xe6>
    9bd2:	693b      	ldr	r3, [r7, #16]
    9bd4:	895b      	ldrh	r3, [r3, #10]
    9bd6:	461a      	mov	r2, r3
    9bd8:	e002      	b.n	9be0 <_usb_d_dev_ep_init+0xec>
    9bda:	693b      	ldr	r3, [r7, #16]
    9bdc:	891b      	ldrh	r3, [r3, #8]
    9bde:	461a      	mov	r2, r3
    9be0:	88bb      	ldrh	r3, [r7, #4]
    9be2:	429a      	cmp	r2, r3
    9be4:	da02      	bge.n	9bec <_usb_d_dev_ep_init+0xf8>
		return -USB_ERR_FUNC;
    9be6:	f06f 0312 	mvn.w	r3, #18
    9bea:	e015      	b.n	9c18 <_usb_d_dev_ep_init+0x124>
	}

	/* Initialize EP n settings */
	ept->cache    = (uint8_t *)(dir ? pcfg->i_cache : pcfg->cache);
    9bec:	7fbb      	ldrb	r3, [r7, #30]
    9bee:	2b00      	cmp	r3, #0
    9bf0:	d002      	beq.n	9bf8 <_usb_d_dev_ep_init+0x104>
    9bf2:	693b      	ldr	r3, [r7, #16]
    9bf4:	685b      	ldr	r3, [r3, #4]
    9bf6:	e001      	b.n	9bfc <_usb_d_dev_ep_init+0x108>
    9bf8:	693b      	ldr	r3, [r7, #16]
    9bfa:	681b      	ldr	r3, [r3, #0]
    9bfc:	69ba      	ldr	r2, [r7, #24]
    9bfe:	60d3      	str	r3, [r2, #12]
	ept->size     = max_pkt_siz;
    9c00:	69bb      	ldr	r3, [r7, #24]
    9c02:	88ba      	ldrh	r2, [r7, #4]
    9c04:	821a      	strh	r2, [r3, #16]
	ept->flags.u8 = (ep_type + 1);
    9c06:	7dfb      	ldrb	r3, [r7, #23]
    9c08:	3301      	adds	r3, #1
    9c0a:	b2da      	uxtb	r2, r3
    9c0c:	69bb      	ldr	r3, [r7, #24]
    9c0e:	74da      	strb	r2, [r3, #19]
	ept->ep       = ep;
    9c10:	69bb      	ldr	r3, [r7, #24]
    9c12:	79fa      	ldrb	r2, [r7, #7]
    9c14:	749a      	strb	r2, [r3, #18]

	return USB_OK;
    9c16:	2300      	movs	r3, #0
}
    9c18:	4618      	mov	r0, r3
    9c1a:	3720      	adds	r7, #32
    9c1c:	46bd      	mov	sp, r7
    9c1e:	bd80      	pop	{r7, pc}
    9c20:	00008b25 	.word	0x00008b25
    9c24:	00013574 	.word	0x00013574

00009c28 <_usb_d_dev_ep_deinit>:

void _usb_d_dev_ep_deinit(uint8_t ep)
{
    9c28:	b580      	push	{r7, lr}
    9c2a:	b086      	sub	sp, #24
    9c2c:	af00      	add	r7, sp, #0
    9c2e:	4603      	mov	r3, r0
    9c30:	71fb      	strb	r3, [r7, #7]
	Usb *                 hw  = USB;
    9c32:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    9c36:	617b      	str	r3, [r7, #20]
	uint8_t               epn = USB_EP_GET_N(ep);
    9c38:	79fb      	ldrb	r3, [r7, #7]
    9c3a:	f003 030f 	and.w	r3, r3, #15
    9c3e:	74fb      	strb	r3, [r7, #19]
	bool                  dir = USB_EP_GET_DIR(ep);
    9c40:	79fb      	ldrb	r3, [r7, #7]
    9c42:	f003 0380 	and.w	r3, r3, #128	; 0x80
    9c46:	2b00      	cmp	r3, #0
    9c48:	bf14      	ite	ne
    9c4a:	2301      	movne	r3, #1
    9c4c:	2300      	moveq	r3, #0
    9c4e:	74bb      	strb	r3, [r7, #18]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    9c50:	7cba      	ldrb	r2, [r7, #18]
    9c52:	7cfb      	ldrb	r3, [r7, #19]
    9c54:	4611      	mov	r1, r2
    9c56:	4618      	mov	r0, r3
    9c58:	4b2a      	ldr	r3, [pc, #168]	; (9d04 <_usb_d_dev_ep_deinit+0xdc>)
    9c5a:	4798      	blx	r3
    9c5c:	60f8      	str	r0, [r7, #12]

	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    9c5e:	7cfb      	ldrb	r3, [r7, #19]
    9c60:	2b04      	cmp	r3, #4
    9c62:	d84a      	bhi.n	9cfa <_usb_d_dev_ep_deinit+0xd2>
    9c64:	68fb      	ldr	r3, [r7, #12]
    9c66:	7c9b      	ldrb	r3, [r3, #18]
    9c68:	2bff      	cmp	r3, #255	; 0xff
    9c6a:	d046      	beq.n	9cfa <_usb_d_dev_ep_deinit+0xd2>
		return;
	}

	/* Finish pending transactions. */
	_usb_d_dev_trans_stop(ept, dir, USB_TRANS_RESET);
    9c6c:	7cbb      	ldrb	r3, [r7, #18]
    9c6e:	2203      	movs	r2, #3
    9c70:	4619      	mov	r1, r3
    9c72:	68f8      	ldr	r0, [r7, #12]
    9c74:	4b24      	ldr	r3, [pc, #144]	; (9d08 <_usb_d_dev_ep_deinit+0xe0>)
    9c76:	4798      	blx	r3

	/* Disable the endpoint. */
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    9c78:	68fb      	ldr	r3, [r7, #12]
    9c7a:	7cdb      	ldrb	r3, [r3, #19]
    9c7c:	f003 0307 	and.w	r3, r3, #7
    9c80:	b2db      	uxtb	r3, r3
    9c82:	2b01      	cmp	r3, #1
    9c84:	d107      	bne.n	9c96 <_usb_d_dev_ep_deinit+0x6e>
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg = 0;
    9c86:	79fb      	ldrb	r3, [r7, #7]
    9c88:	697a      	ldr	r2, [r7, #20]
    9c8a:	3308      	adds	r3, #8
    9c8c:	015b      	lsls	r3, r3, #5
    9c8e:	4413      	add	r3, r2
    9c90:	2200      	movs	r2, #0
    9c92:	701a      	strb	r2, [r3, #0]
    9c94:	e02a      	b.n	9cec <_usb_d_dev_ep_deinit+0xc4>
	} else if (USB_EP_GET_DIR(ep)) {
    9c96:	f997 3007 	ldrsb.w	r3, [r7, #7]
    9c9a:	2b00      	cmp	r3, #0
    9c9c:	da15      	bge.n	9cca <_usb_d_dev_ep_deinit+0xa2>
		hw->DEVICE.DeviceEndpoint[USB_EP_GET_N(ep)].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE1_Msk;
    9c9e:	79fb      	ldrb	r3, [r7, #7]
    9ca0:	f003 030f 	and.w	r3, r3, #15
    9ca4:	79fa      	ldrb	r2, [r7, #7]
    9ca6:	f002 020f 	and.w	r2, r2, #15
    9caa:	6979      	ldr	r1, [r7, #20]
    9cac:	3208      	adds	r2, #8
    9cae:	0152      	lsls	r2, r2, #5
    9cb0:	440a      	add	r2, r1
    9cb2:	7812      	ldrb	r2, [r2, #0]
    9cb4:	b2d2      	uxtb	r2, r2
    9cb6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
    9cba:	b2d1      	uxtb	r1, r2
    9cbc:	697a      	ldr	r2, [r7, #20]
    9cbe:	3308      	adds	r3, #8
    9cc0:	015b      	lsls	r3, r3, #5
    9cc2:	4413      	add	r3, r2
    9cc4:	460a      	mov	r2, r1
    9cc6:	701a      	strb	r2, [r3, #0]
    9cc8:	e010      	b.n	9cec <_usb_d_dev_ep_deinit+0xc4>
	} else {
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE0_Msk;
    9cca:	79fb      	ldrb	r3, [r7, #7]
    9ccc:	79fa      	ldrb	r2, [r7, #7]
    9cce:	6979      	ldr	r1, [r7, #20]
    9cd0:	3208      	adds	r2, #8
    9cd2:	0152      	lsls	r2, r2, #5
    9cd4:	440a      	add	r2, r1
    9cd6:	7812      	ldrb	r2, [r2, #0]
    9cd8:	b2d2      	uxtb	r2, r2
    9cda:	f022 0207 	bic.w	r2, r2, #7
    9cde:	b2d1      	uxtb	r1, r2
    9ce0:	697a      	ldr	r2, [r7, #20]
    9ce2:	3308      	adds	r3, #8
    9ce4:	015b      	lsls	r3, r3, #5
    9ce6:	4413      	add	r3, r2
    9ce8:	460a      	mov	r2, r1
    9cea:	701a      	strb	r2, [r3, #0]
	}
	ept->flags.u8 = 0;
    9cec:	68fb      	ldr	r3, [r7, #12]
    9cee:	2200      	movs	r2, #0
    9cf0:	74da      	strb	r2, [r3, #19]
	ept->ep       = 0xFF;
    9cf2:	68fb      	ldr	r3, [r7, #12]
    9cf4:	22ff      	movs	r2, #255	; 0xff
    9cf6:	749a      	strb	r2, [r3, #18]
    9cf8:	e000      	b.n	9cfc <_usb_d_dev_ep_deinit+0xd4>
		return;
    9cfa:	bf00      	nop
}
    9cfc:	3718      	adds	r7, #24
    9cfe:	46bd      	mov	sp, r7
    9d00:	bd80      	pop	{r7, pc}
    9d02:	bf00      	nop
    9d04:	00008b25 	.word	0x00008b25
    9d08:	0000a15d 	.word	0x0000a15d

00009d0c <_usb_d_dev_ep_enable>:

int32_t _usb_d_dev_ep_enable(const uint8_t ep)
{
    9d0c:	b5b0      	push	{r4, r5, r7, lr}
    9d0e:	b088      	sub	sp, #32
    9d10:	af00      	add	r7, sp, #0
    9d12:	4603      	mov	r3, r0
    9d14:	71fb      	strb	r3, [r7, #7]
	Usb *                 hw    = USB;
    9d16:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    9d1a:	61fb      	str	r3, [r7, #28]
	uint8_t               epn   = USB_EP_GET_N(ep);
    9d1c:	79fb      	ldrb	r3, [r7, #7]
    9d1e:	f003 030f 	and.w	r3, r3, #15
    9d22:	76fb      	strb	r3, [r7, #27]
	bool                  dir   = USB_EP_GET_DIR(ep);
    9d24:	79fb      	ldrb	r3, [r7, #7]
    9d26:	f003 0380 	and.w	r3, r3, #128	; 0x80
    9d2a:	2b00      	cmp	r3, #0
    9d2c:	bf14      	ite	ne
    9d2e:	2301      	movne	r3, #1
    9d30:	2300      	moveq	r3, #0
    9d32:	76bb      	strb	r3, [r7, #26]
	struct _usb_d_dev_ep *ept   = _usb_d_dev_ept(epn, dir);
    9d34:	7eba      	ldrb	r2, [r7, #26]
    9d36:	7efb      	ldrb	r3, [r7, #27]
    9d38:	4611      	mov	r1, r2
    9d3a:	4618      	mov	r0, r3
    9d3c:	4b70      	ldr	r3, [pc, #448]	; (9f00 <_usb_d_dev_ep_enable+0x1f4>)
    9d3e:	4798      	blx	r3
    9d40:	6178      	str	r0, [r7, #20]
	uint8_t               epcfg = hri_usbendpoint_read_EPCFG_reg(hw, epn);
    9d42:	7efb      	ldrb	r3, [r7, #27]
    9d44:	4619      	mov	r1, r3
    9d46:	69f8      	ldr	r0, [r7, #28]
    9d48:	4b6e      	ldr	r3, [pc, #440]	; (9f04 <_usb_d_dev_ep_enable+0x1f8>)
    9d4a:	4798      	blx	r3
    9d4c:	4603      	mov	r3, r0
    9d4e:	74fb      	strb	r3, [r7, #19]
	UsbDeviceDescBank *   bank;

	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    9d50:	7efb      	ldrb	r3, [r7, #27]
    9d52:	2b04      	cmp	r3, #4
    9d54:	d803      	bhi.n	9d5e <_usb_d_dev_ep_enable+0x52>
    9d56:	697b      	ldr	r3, [r7, #20]
    9d58:	7c9b      	ldrb	r3, [r3, #18]
    9d5a:	2bff      	cmp	r3, #255	; 0xff
    9d5c:	d102      	bne.n	9d64 <_usb_d_dev_ep_enable+0x58>
		return -USB_ERR_PARAM;
    9d5e:	f06f 0311 	mvn.w	r3, #17
    9d62:	e0c8      	b.n	9ef6 <_usb_d_dev_ep_enable+0x1ea>
	}

	bank = prvt_inst.desc_table[epn].DeviceDescBank;
    9d64:	7efb      	ldrb	r3, [r7, #27]
    9d66:	015b      	lsls	r3, r3, #5
    9d68:	4a67      	ldr	r2, [pc, #412]	; (9f08 <_usb_d_dev_ep_enable+0x1fc>)
    9d6a:	4413      	add	r3, r2
    9d6c:	60fb      	str	r3, [r7, #12]
	if (ept->flags.bits.eptype == USB_D_EPTYPE_CTRL) {
    9d6e:	697b      	ldr	r3, [r7, #20]
    9d70:	7cdb      	ldrb	r3, [r3, #19]
    9d72:	f003 0307 	and.w	r3, r3, #7
    9d76:	b2db      	uxtb	r3, r3
    9d78:	2b01      	cmp	r3, #1
    9d7a:	d14b      	bne.n	9e14 <_usb_d_dev_ep_enable+0x108>
		if (epcfg & (USB_DEVICE_EPCFG_EPTYPE1_Msk | USB_DEVICE_EPCFG_EPTYPE0_Msk)) {
    9d7c:	7cfb      	ldrb	r3, [r7, #19]
    9d7e:	f003 0377 	and.w	r3, r3, #119	; 0x77
    9d82:	2b00      	cmp	r3, #0
    9d84:	d002      	beq.n	9d8c <_usb_d_dev_ep_enable+0x80>
			return -USB_ERR_REDO;
    9d86:	f06f 0313 	mvn.w	r3, #19
    9d8a:	e0b4      	b.n	9ef6 <_usb_d_dev_ep_enable+0x1ea>
		}
		hri_usbendpoint_write_EPCFG_reg(hw, epn, USB_D_EPCFG_CTRL);
    9d8c:	7efb      	ldrb	r3, [r7, #27]
    9d8e:	2211      	movs	r2, #17
    9d90:	4619      	mov	r1, r3
    9d92:	69f8      	ldr	r0, [r7, #28]
    9d94:	4b5d      	ldr	r3, [pc, #372]	; (9f0c <_usb_d_dev_ep_enable+0x200>)
    9d96:	4798      	blx	r3
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    9d98:	697b      	ldr	r3, [r7, #20]
    9d9a:	8a1b      	ldrh	r3, [r3, #16]
    9d9c:	039b      	lsls	r3, r3, #14
    9d9e:	4c5c      	ldr	r4, [pc, #368]	; (9f10 <_usb_d_dev_ep_enable+0x204>)
    9da0:	401c      	ands	r4, r3
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    9da2:	697b      	ldr	r3, [r7, #20]
    9da4:	8a1b      	ldrh	r3, [r3, #16]
    9da6:	4618      	mov	r0, r3
    9da8:	4b5a      	ldr	r3, [pc, #360]	; (9f14 <_usb_d_dev_ep_enable+0x208>)
    9daa:	4798      	blx	r3
    9dac:	4603      	mov	r3, r0
    9dae:	071b      	lsls	r3, r3, #28
    9db0:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    9db4:	ea44 0203 	orr.w	r2, r4, r3
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    9db8:	68fb      	ldr	r3, [r7, #12]
    9dba:	605a      	str	r2, [r3, #4]
		bank[1].PCKSIZE.reg
    9dbc:	68fb      	ldr	r3, [r7, #12]
    9dbe:	f103 0410 	add.w	r4, r3, #16
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    9dc2:	697b      	ldr	r3, [r7, #20]
    9dc4:	8a1b      	ldrh	r3, [r3, #16]
    9dc6:	f3c3 050d 	ubfx	r5, r3, #0, #14
    9dca:	697b      	ldr	r3, [r7, #20]
    9dcc:	8a1b      	ldrh	r3, [r3, #16]
    9dce:	4618      	mov	r0, r3
    9dd0:	4b50      	ldr	r3, [pc, #320]	; (9f14 <_usb_d_dev_ep_enable+0x208>)
    9dd2:	4798      	blx	r3
    9dd4:	4603      	mov	r3, r0
    9dd6:	071b      	lsls	r3, r3, #28
    9dd8:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    9ddc:	432b      	orrs	r3, r5
    9dde:	6063      	str	r3, [r4, #4]
		/* By default, control endpoint accept SETUP and NAK all other token. */
		_usbd_ep_set_out_rdy(epn, 0, false);
    9de0:	7efb      	ldrb	r3, [r7, #27]
    9de2:	2200      	movs	r2, #0
    9de4:	2100      	movs	r1, #0
    9de6:	4618      	mov	r0, r3
    9de8:	4b4b      	ldr	r3, [pc, #300]	; (9f18 <_usb_d_dev_ep_enable+0x20c>)
    9dea:	4798      	blx	r3
		_usbd_ep_set_in_rdy(epn, 1, false);
    9dec:	7efb      	ldrb	r3, [r7, #27]
    9dee:	2200      	movs	r2, #0
    9df0:	2101      	movs	r1, #1
    9df2:	4618      	mov	r0, r3
    9df4:	4b49      	ldr	r3, [pc, #292]	; (9f1c <_usb_d_dev_ep_enable+0x210>)
    9df6:	4798      	blx	r3

		_usbd_ep_clear_bank_status(epn, 0);
    9df8:	7efb      	ldrb	r3, [r7, #27]
    9dfa:	2100      	movs	r1, #0
    9dfc:	4618      	mov	r0, r3
    9dfe:	4b48      	ldr	r3, [pc, #288]	; (9f20 <_usb_d_dev_ep_enable+0x214>)
    9e00:	4798      	blx	r3
		_usbd_ep_clear_bank_status(epn, 1);
    9e02:	7efb      	ldrb	r3, [r7, #27]
    9e04:	2101      	movs	r1, #1
    9e06:	4618      	mov	r0, r3
    9e08:	4b45      	ldr	r3, [pc, #276]	; (9f20 <_usb_d_dev_ep_enable+0x214>)
    9e0a:	4798      	blx	r3

		/* Enable SETUP reception for control endpoint. */
		_usb_d_dev_trans_setup(ept);
    9e0c:	6978      	ldr	r0, [r7, #20]
    9e0e:	4b45      	ldr	r3, [pc, #276]	; (9f24 <_usb_d_dev_ep_enable+0x218>)
    9e10:	4798      	blx	r3
    9e12:	e06f      	b.n	9ef4 <_usb_d_dev_ep_enable+0x1e8>

	} else if (dir) {
    9e14:	7ebb      	ldrb	r3, [r7, #26]
    9e16:	2b00      	cmp	r3, #0
    9e18:	d038      	beq.n	9e8c <_usb_d_dev_ep_enable+0x180>
		if (epcfg & USB_DEVICE_EPCFG_EPTYPE1_Msk) {
    9e1a:	7cfb      	ldrb	r3, [r7, #19]
    9e1c:	f003 0370 	and.w	r3, r3, #112	; 0x70
    9e20:	2b00      	cmp	r3, #0
    9e22:	d002      	beq.n	9e2a <_usb_d_dev_ep_enable+0x11e>
			return -USB_ERR_REDO;
    9e24:	f06f 0313 	mvn.w	r3, #19
    9e28:	e065      	b.n	9ef6 <_usb_d_dev_ep_enable+0x1ea>
		}
		epcfg |= USB_DEVICE_EPCFG_EPTYPE1(ept->flags.bits.eptype);
    9e2a:	697b      	ldr	r3, [r7, #20]
    9e2c:	7cdb      	ldrb	r3, [r3, #19]
    9e2e:	f3c3 0302 	ubfx	r3, r3, #0, #3
    9e32:	b2db      	uxtb	r3, r3
    9e34:	011b      	lsls	r3, r3, #4
    9e36:	b2db      	uxtb	r3, r3
    9e38:	f003 0370 	and.w	r3, r3, #112	; 0x70
    9e3c:	b2da      	uxtb	r2, r3
    9e3e:	7cfb      	ldrb	r3, [r7, #19]
    9e40:	4313      	orrs	r3, r2
    9e42:	74fb      	strb	r3, [r7, #19]
		hri_usbendpoint_write_EPCFG_reg(hw, epn, epcfg);
    9e44:	7cfa      	ldrb	r2, [r7, #19]
    9e46:	7efb      	ldrb	r3, [r7, #27]
    9e48:	4619      	mov	r1, r3
    9e4a:	69f8      	ldr	r0, [r7, #28]
    9e4c:	4b2f      	ldr	r3, [pc, #188]	; (9f0c <_usb_d_dev_ep_enable+0x200>)
    9e4e:	4798      	blx	r3

		bank[1].PCKSIZE.reg
    9e50:	68fb      	ldr	r3, [r7, #12]
    9e52:	f103 0410 	add.w	r4, r3, #16
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    9e56:	697b      	ldr	r3, [r7, #20]
    9e58:	8a1b      	ldrh	r3, [r3, #16]
    9e5a:	f3c3 050d 	ubfx	r5, r3, #0, #14
    9e5e:	697b      	ldr	r3, [r7, #20]
    9e60:	8a1b      	ldrh	r3, [r3, #16]
    9e62:	4618      	mov	r0, r3
    9e64:	4b2b      	ldr	r3, [pc, #172]	; (9f14 <_usb_d_dev_ep_enable+0x208>)
    9e66:	4798      	blx	r3
    9e68:	4603      	mov	r3, r0
    9e6a:	071b      	lsls	r3, r3, #28
    9e6c:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    9e70:	432b      	orrs	r3, r5
    9e72:	6063      	str	r3, [r4, #4]

		/* By default, IN endpoint will NAK all token. */
		_usbd_ep_set_in_rdy(epn, 1, false);
    9e74:	7efb      	ldrb	r3, [r7, #27]
    9e76:	2200      	movs	r2, #0
    9e78:	2101      	movs	r1, #1
    9e7a:	4618      	mov	r0, r3
    9e7c:	4b27      	ldr	r3, [pc, #156]	; (9f1c <_usb_d_dev_ep_enable+0x210>)
    9e7e:	4798      	blx	r3
		_usbd_ep_clear_bank_status(epn, 1);
    9e80:	7efb      	ldrb	r3, [r7, #27]
    9e82:	2101      	movs	r1, #1
    9e84:	4618      	mov	r0, r3
    9e86:	4b26      	ldr	r3, [pc, #152]	; (9f20 <_usb_d_dev_ep_enable+0x214>)
    9e88:	4798      	blx	r3
    9e8a:	e033      	b.n	9ef4 <_usb_d_dev_ep_enable+0x1e8>

	} else {

		if (epcfg & USB_DEVICE_EPCFG_EPTYPE0_Msk) {
    9e8c:	7cfb      	ldrb	r3, [r7, #19]
    9e8e:	f003 0307 	and.w	r3, r3, #7
    9e92:	2b00      	cmp	r3, #0
    9e94:	d002      	beq.n	9e9c <_usb_d_dev_ep_enable+0x190>
			return -USB_ERR_REDO;
    9e96:	f06f 0313 	mvn.w	r3, #19
    9e9a:	e02c      	b.n	9ef6 <_usb_d_dev_ep_enable+0x1ea>
		}
		epcfg |= USB_DEVICE_EPCFG_EPTYPE0(ept->flags.bits.eptype);
    9e9c:	697b      	ldr	r3, [r7, #20]
    9e9e:	7cdb      	ldrb	r3, [r3, #19]
    9ea0:	f3c3 0302 	ubfx	r3, r3, #0, #3
    9ea4:	b2db      	uxtb	r3, r3
    9ea6:	461a      	mov	r2, r3
    9ea8:	7cfb      	ldrb	r3, [r7, #19]
    9eaa:	4313      	orrs	r3, r2
    9eac:	74fb      	strb	r3, [r7, #19]
		hri_usbendpoint_write_EPCFG_reg(hw, epn, epcfg);
    9eae:	7cfa      	ldrb	r2, [r7, #19]
    9eb0:	7efb      	ldrb	r3, [r7, #27]
    9eb2:	4619      	mov	r1, r3
    9eb4:	69f8      	ldr	r0, [r7, #28]
    9eb6:	4b15      	ldr	r3, [pc, #84]	; (9f0c <_usb_d_dev_ep_enable+0x200>)
    9eb8:	4798      	blx	r3

		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    9eba:	697b      	ldr	r3, [r7, #20]
    9ebc:	8a1b      	ldrh	r3, [r3, #16]
    9ebe:	039b      	lsls	r3, r3, #14
    9ec0:	4c13      	ldr	r4, [pc, #76]	; (9f10 <_usb_d_dev_ep_enable+0x204>)
    9ec2:	401c      	ands	r4, r3
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    9ec4:	697b      	ldr	r3, [r7, #20]
    9ec6:	8a1b      	ldrh	r3, [r3, #16]
    9ec8:	4618      	mov	r0, r3
    9eca:	4b12      	ldr	r3, [pc, #72]	; (9f14 <_usb_d_dev_ep_enable+0x208>)
    9ecc:	4798      	blx	r3
    9ece:	4603      	mov	r3, r0
    9ed0:	071b      	lsls	r3, r3, #28
    9ed2:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    9ed6:	ea44 0203 	orr.w	r2, r4, r3
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    9eda:	68fb      	ldr	r3, [r7, #12]
    9edc:	605a      	str	r2, [r3, #4]

		/* By default, OUT endpoint will NAK all token. */
		_usbd_ep_set_out_rdy(epn, 0, false);
    9ede:	7efb      	ldrb	r3, [r7, #27]
    9ee0:	2200      	movs	r2, #0
    9ee2:	2100      	movs	r1, #0
    9ee4:	4618      	mov	r0, r3
    9ee6:	4b0c      	ldr	r3, [pc, #48]	; (9f18 <_usb_d_dev_ep_enable+0x20c>)
    9ee8:	4798      	blx	r3
		_usbd_ep_clear_bank_status(epn, 0);
    9eea:	7efb      	ldrb	r3, [r7, #27]
    9eec:	2100      	movs	r1, #0
    9eee:	4618      	mov	r0, r3
    9ef0:	4b0b      	ldr	r3, [pc, #44]	; (9f20 <_usb_d_dev_ep_enable+0x214>)
    9ef2:	4798      	blx	r3
	}

	return USB_OK;
    9ef4:	2300      	movs	r3, #0
}
    9ef6:	4618      	mov	r0, r3
    9ef8:	3720      	adds	r7, #32
    9efa:	46bd      	mov	sp, r7
    9efc:	bdb0      	pop	{r4, r5, r7, pc}
    9efe:	bf00      	nop
    9f00:	00008b25 	.word	0x00008b25
    9f04:	000081ab 	.word	0x000081ab
    9f08:	20001064 	.word	0x20001064
    9f0c:	00008181 	.word	0x00008181
    9f10:	0fffc000 	.word	0x0fffc000
    9f14:	00008ac1 	.word	0x00008ac1
    9f18:	00008a69 	.word	0x00008a69
    9f1c:	00008a11 	.word	0x00008a11
    9f20:	000089d9 	.word	0x000089d9
    9f24:	00009a7d 	.word	0x00009a7d

00009f28 <_usb_d_dev_ep_stall_get>:
 * \return Stall status.
 * \retval \c true Endpoint is stalled.
 * \retval \c false Endpoint is not stalled.
 */
static inline int32_t _usb_d_dev_ep_stall_get(struct _usb_d_dev_ep *ept, bool dir)
{
    9f28:	b580      	push	{r7, lr}
    9f2a:	b084      	sub	sp, #16
    9f2c:	af00      	add	r7, sp, #0
    9f2e:	6078      	str	r0, [r7, #4]
    9f30:	460b      	mov	r3, r1
    9f32:	70fb      	strb	r3, [r7, #3]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    9f34:	687b      	ldr	r3, [r7, #4]
    9f36:	7c9b      	ldrb	r3, [r3, #18]
    9f38:	f003 030f 	and.w	r3, r3, #15
    9f3c:	73fb      	strb	r3, [r7, #15]
	return _usbd_ep_is_stalled(epn, dir);
    9f3e:	78fa      	ldrb	r2, [r7, #3]
    9f40:	7bfb      	ldrb	r3, [r7, #15]
    9f42:	4611      	mov	r1, r2
    9f44:	4618      	mov	r0, r3
    9f46:	4b03      	ldr	r3, [pc, #12]	; (9f54 <_usb_d_dev_ep_stall_get+0x2c>)
    9f48:	4798      	blx	r3
    9f4a:	4603      	mov	r3, r0
}
    9f4c:	4618      	mov	r0, r3
    9f4e:	3710      	adds	r7, #16
    9f50:	46bd      	mov	sp, r7
    9f52:	bd80      	pop	{r7, pc}
    9f54:	00008619 	.word	0x00008619

00009f58 <_usb_d_dev_ep_stall_set>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \return Always 0, success.
 */
static inline int32_t _usb_d_dev_ep_stall_set(struct _usb_d_dev_ep *ept, bool dir)
{
    9f58:	b580      	push	{r7, lr}
    9f5a:	b084      	sub	sp, #16
    9f5c:	af00      	add	r7, sp, #0
    9f5e:	6078      	str	r0, [r7, #4]
    9f60:	460b      	mov	r3, r1
    9f62:	70fb      	strb	r3, [r7, #3]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    9f64:	687b      	ldr	r3, [r7, #4]
    9f66:	7c9b      	ldrb	r3, [r3, #18]
    9f68:	f003 030f 	and.w	r3, r3, #15
    9f6c:	73fb      	strb	r3, [r7, #15]
	_usbd_ep_set_stall(epn, dir, true);
    9f6e:	78f9      	ldrb	r1, [r7, #3]
    9f70:	7bfb      	ldrb	r3, [r7, #15]
    9f72:	2201      	movs	r2, #1
    9f74:	4618      	mov	r0, r3
    9f76:	4b0a      	ldr	r3, [pc, #40]	; (9fa0 <_usb_d_dev_ep_stall_set+0x48>)
    9f78:	4798      	blx	r3
	_usbd_ep_int_en(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    9f7a:	78fb      	ldrb	r3, [r7, #3]
    9f7c:	2220      	movs	r2, #32
    9f7e:	409a      	lsls	r2, r3
    9f80:	7bfb      	ldrb	r3, [r7, #15]
    9f82:	4611      	mov	r1, r2
    9f84:	4618      	mov	r0, r3
    9f86:	4b07      	ldr	r3, [pc, #28]	; (9fa4 <_usb_d_dev_ep_stall_set+0x4c>)
    9f88:	4798      	blx	r3
	ept->flags.bits.is_stalled = 1;
    9f8a:	687a      	ldr	r2, [r7, #4]
    9f8c:	7cd3      	ldrb	r3, [r2, #19]
    9f8e:	f043 0308 	orr.w	r3, r3, #8
    9f92:	74d3      	strb	r3, [r2, #19]
	/* In stall interrupt abort the transfer. */
	return ERR_NONE;
    9f94:	2300      	movs	r3, #0
}
    9f96:	4618      	mov	r0, r3
    9f98:	3710      	adds	r7, #16
    9f9a:	46bd      	mov	sp, r7
    9f9c:	bd80      	pop	{r7, pc}
    9f9e:	bf00      	nop
    9fa0:	000085c1 	.word	0x000085c1
    9fa4:	00008541 	.word	0x00008541

00009fa8 <_usb_d_dev_ep_stall_clr>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \return Always 0, success.
 */
static inline int32_t _usb_d_dev_ep_stall_clr(struct _usb_d_dev_ep *ept, bool dir)
{
    9fa8:	b580      	push	{r7, lr}
    9faa:	b084      	sub	sp, #16
    9fac:	af00      	add	r7, sp, #0
    9fae:	6078      	str	r0, [r7, #4]
    9fb0:	460b      	mov	r3, r1
    9fb2:	70fb      	strb	r3, [r7, #3]
	uint8_t epn        = USB_EP_GET_N(ept->ep);
    9fb4:	687b      	ldr	r3, [r7, #4]
    9fb6:	7c9b      	ldrb	r3, [r3, #18]
    9fb8:	f003 030f 	and.w	r3, r3, #15
    9fbc:	73fb      	strb	r3, [r7, #15]
	bool    is_stalled = _usbd_ep_is_stalled(epn, dir);
    9fbe:	78fa      	ldrb	r2, [r7, #3]
    9fc0:	7bfb      	ldrb	r3, [r7, #15]
    9fc2:	4611      	mov	r1, r2
    9fc4:	4618      	mov	r0, r3
    9fc6:	4b28      	ldr	r3, [pc, #160]	; (a068 <_usb_d_dev_ep_stall_clr+0xc0>)
    9fc8:	4798      	blx	r3
    9fca:	4603      	mov	r3, r0
    9fcc:	73bb      	strb	r3, [r7, #14]
	if (!is_stalled) {
    9fce:	7bbb      	ldrb	r3, [r7, #14]
    9fd0:	f083 0301 	eor.w	r3, r3, #1
    9fd4:	b2db      	uxtb	r3, r3
    9fd6:	2b00      	cmp	r3, #0
    9fd8:	d001      	beq.n	9fde <_usb_d_dev_ep_stall_clr+0x36>
		return ERR_NONE;
    9fda:	2300      	movs	r3, #0
    9fdc:	e040      	b.n	a060 <_usb_d_dev_ep_stall_clr+0xb8>
	}
	_usbd_ep_set_stall(epn, dir, false);
    9fde:	78f9      	ldrb	r1, [r7, #3]
    9fe0:	7bfb      	ldrb	r3, [r7, #15]
    9fe2:	2200      	movs	r2, #0
    9fe4:	4618      	mov	r0, r3
    9fe6:	4b21      	ldr	r3, [pc, #132]	; (a06c <_usb_d_dev_ep_stall_clr+0xc4>)
    9fe8:	4798      	blx	r3
	_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    9fea:	78fb      	ldrb	r3, [r7, #3]
    9fec:	2220      	movs	r2, #32
    9fee:	409a      	lsls	r2, r3
    9ff0:	7bfb      	ldrb	r3, [r7, #15]
    9ff2:	4611      	mov	r1, r2
    9ff4:	4618      	mov	r0, r3
    9ff6:	4b1e      	ldr	r3, [pc, #120]	; (a070 <_usb_d_dev_ep_stall_clr+0xc8>)
    9ff8:	4798      	blx	r3
	if (_usbd_ep_is_stall_sent(epn, dir)) {
    9ffa:	78fa      	ldrb	r2, [r7, #3]
    9ffc:	7bfb      	ldrb	r3, [r7, #15]
    9ffe:	4611      	mov	r1, r2
    a000:	4618      	mov	r0, r3
    a002:	4b1c      	ldr	r3, [pc, #112]	; (a074 <_usb_d_dev_ep_stall_clr+0xcc>)
    a004:	4798      	blx	r3
    a006:	4603      	mov	r3, r0
    a008:	2b00      	cmp	r3, #0
    a00a:	d00b      	beq.n	a024 <_usb_d_dev_ep_stall_clr+0x7c>
		_usbd_ep_ack_stall(epn, dir);
    a00c:	78fa      	ldrb	r2, [r7, #3]
    a00e:	7bfb      	ldrb	r3, [r7, #15]
    a010:	4611      	mov	r1, r2
    a012:	4618      	mov	r0, r3
    a014:	4b18      	ldr	r3, [pc, #96]	; (a078 <_usb_d_dev_ep_stall_clr+0xd0>)
    a016:	4798      	blx	r3
		_usbd_ep_set_toggle(epn, dir, 0);
    a018:	78f9      	ldrb	r1, [r7, #3]
    a01a:	7bfb      	ldrb	r3, [r7, #15]
    a01c:	2200      	movs	r2, #0
    a01e:	4618      	mov	r0, r3
    a020:	4b16      	ldr	r3, [pc, #88]	; (a07c <_usb_d_dev_ep_stall_clr+0xd4>)
    a022:	4798      	blx	r3
	}
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    a024:	687b      	ldr	r3, [r7, #4]
    a026:	7cdb      	ldrb	r3, [r3, #19]
    a028:	f003 0307 	and.w	r3, r3, #7
    a02c:	b2db      	uxtb	r3, r3
    a02e:	2b01      	cmp	r3, #1
    a030:	d110      	bne.n	a054 <_usb_d_dev_ep_stall_clr+0xac>
		if ((hri_usbendpoint_read_EPSTATUS_reg(USB, epn) & USB_DEVICE_EPSTATUS_STALLRQ_Msk) == 0) {
    a032:	7bfb      	ldrb	r3, [r7, #15]
    a034:	4619      	mov	r1, r3
    a036:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    a03a:	4b11      	ldr	r3, [pc, #68]	; (a080 <_usb_d_dev_ep_stall_clr+0xd8>)
    a03c:	4798      	blx	r3
    a03e:	4603      	mov	r3, r0
    a040:	f003 0330 	and.w	r3, r3, #48	; 0x30
    a044:	2b00      	cmp	r3, #0
    a046:	d10a      	bne.n	a05e <_usb_d_dev_ep_stall_clr+0xb6>
			ept->flags.bits.is_stalled = 0;
    a048:	687a      	ldr	r2, [r7, #4]
    a04a:	7cd3      	ldrb	r3, [r2, #19]
    a04c:	f36f 03c3 	bfc	r3, #3, #1
    a050:	74d3      	strb	r3, [r2, #19]
    a052:	e004      	b.n	a05e <_usb_d_dev_ep_stall_clr+0xb6>
		}
	} else {
		ept->flags.bits.is_stalled = 0;
    a054:	687a      	ldr	r2, [r7, #4]
    a056:	7cd3      	ldrb	r3, [r2, #19]
    a058:	f36f 03c3 	bfc	r3, #3, #1
    a05c:	74d3      	strb	r3, [r2, #19]
	}
	return ERR_NONE;
    a05e:	2300      	movs	r3, #0
}
    a060:	4618      	mov	r0, r3
    a062:	3710      	adds	r7, #16
    a064:	46bd      	mov	sp, r7
    a066:	bd80      	pop	{r7, pc}
    a068:	00008619 	.word	0x00008619
    a06c:	000085c1 	.word	0x000085c1
    a070:	00008569 	.word	0x00008569
    a074:	0000865d 	.word	0x0000865d
    a078:	000086a1 	.word	0x000086a1
    a07c:	0000878d 	.word	0x0000878d
    a080:	00008049 	.word	0x00008049

0000a084 <_usb_d_dev_ep_stall>:

int32_t _usb_d_dev_ep_stall(const uint8_t ep, const enum usb_ep_stall_ctrl ctrl)
{
    a084:	b580      	push	{r7, lr}
    a086:	b086      	sub	sp, #24
    a088:	af00      	add	r7, sp, #0
    a08a:	4603      	mov	r3, r0
    a08c:	460a      	mov	r2, r1
    a08e:	71fb      	strb	r3, [r7, #7]
    a090:	4613      	mov	r3, r2
    a092:	71bb      	strb	r3, [r7, #6]
	uint8_t               epn = USB_EP_GET_N(ep);
    a094:	79fb      	ldrb	r3, [r7, #7]
    a096:	f003 030f 	and.w	r3, r3, #15
    a09a:	74fb      	strb	r3, [r7, #19]
	bool                  dir = USB_EP_GET_DIR(ep);
    a09c:	79fb      	ldrb	r3, [r7, #7]
    a09e:	f003 0380 	and.w	r3, r3, #128	; 0x80
    a0a2:	2b00      	cmp	r3, #0
    a0a4:	bf14      	ite	ne
    a0a6:	2301      	movne	r3, #1
    a0a8:	2300      	moveq	r3, #0
    a0aa:	74bb      	strb	r3, [r7, #18]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    a0ac:	7cba      	ldrb	r2, [r7, #18]
    a0ae:	7cfb      	ldrb	r3, [r7, #19]
    a0b0:	4611      	mov	r1, r2
    a0b2:	4618      	mov	r0, r3
    a0b4:	4b13      	ldr	r3, [pc, #76]	; (a104 <_usb_d_dev_ep_stall+0x80>)
    a0b6:	4798      	blx	r3
    a0b8:	60f8      	str	r0, [r7, #12]
	int32_t               rc;

	if (epn > CONF_USB_D_MAX_EP_N) {
    a0ba:	7cfb      	ldrb	r3, [r7, #19]
    a0bc:	2b04      	cmp	r3, #4
    a0be:	d902      	bls.n	a0c6 <_usb_d_dev_ep_stall+0x42>
		return -USB_ERR_PARAM;
    a0c0:	f06f 0311 	mvn.w	r3, #17
    a0c4:	e01a      	b.n	a0fc <_usb_d_dev_ep_stall+0x78>
	}

	if (USB_EP_STALL_SET == ctrl) {
    a0c6:	79bb      	ldrb	r3, [r7, #6]
    a0c8:	2b01      	cmp	r3, #1
    a0ca:	d106      	bne.n	a0da <_usb_d_dev_ep_stall+0x56>
		rc = _usb_d_dev_ep_stall_set(ept, dir);
    a0cc:	7cbb      	ldrb	r3, [r7, #18]
    a0ce:	4619      	mov	r1, r3
    a0d0:	68f8      	ldr	r0, [r7, #12]
    a0d2:	4b0d      	ldr	r3, [pc, #52]	; (a108 <_usb_d_dev_ep_stall+0x84>)
    a0d4:	4798      	blx	r3
    a0d6:	6178      	str	r0, [r7, #20]
    a0d8:	e00f      	b.n	a0fa <_usb_d_dev_ep_stall+0x76>
	} else if (USB_EP_STALL_CLR == ctrl) {
    a0da:	79bb      	ldrb	r3, [r7, #6]
    a0dc:	2b00      	cmp	r3, #0
    a0de:	d106      	bne.n	a0ee <_usb_d_dev_ep_stall+0x6a>
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
    a0e0:	7cbb      	ldrb	r3, [r7, #18]
    a0e2:	4619      	mov	r1, r3
    a0e4:	68f8      	ldr	r0, [r7, #12]
    a0e6:	4b09      	ldr	r3, [pc, #36]	; (a10c <_usb_d_dev_ep_stall+0x88>)
    a0e8:	4798      	blx	r3
    a0ea:	6178      	str	r0, [r7, #20]
    a0ec:	e005      	b.n	a0fa <_usb_d_dev_ep_stall+0x76>
	} else {
		rc = _usb_d_dev_ep_stall_get(ept, dir);
    a0ee:	7cbb      	ldrb	r3, [r7, #18]
    a0f0:	4619      	mov	r1, r3
    a0f2:	68f8      	ldr	r0, [r7, #12]
    a0f4:	4b06      	ldr	r3, [pc, #24]	; (a110 <_usb_d_dev_ep_stall+0x8c>)
    a0f6:	4798      	blx	r3
    a0f8:	6178      	str	r0, [r7, #20]
	}
	return rc;
    a0fa:	697b      	ldr	r3, [r7, #20]
}
    a0fc:	4618      	mov	r0, r3
    a0fe:	3718      	adds	r7, #24
    a100:	46bd      	mov	sp, r7
    a102:	bd80      	pop	{r7, pc}
    a104:	00008b25 	.word	0x00008b25
    a108:	00009f59 	.word	0x00009f59
    a10c:	00009fa9 	.word	0x00009fa9
    a110:	00009f29 	.word	0x00009f29

0000a114 <_usb_d_dev_trans_done>:
 *  \brief Finish the transaction and invoke callback
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_done(struct _usb_d_dev_ep *ept, const int32_t code)
{
    a114:	b580      	push	{r7, lr}
    a116:	b082      	sub	sp, #8
    a118:	af00      	add	r7, sp, #0
    a11a:	6078      	str	r0, [r7, #4]
    a11c:	6039      	str	r1, [r7, #0]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    a11e:	687b      	ldr	r3, [r7, #4]
    a120:	7c9b      	ldrb	r3, [r3, #18]
    a122:	2bff      	cmp	r3, #255	; 0xff
    a124:	d014      	beq.n	a150 <_usb_d_dev_trans_done+0x3c>
    a126:	687b      	ldr	r3, [r7, #4]
    a128:	7cdb      	ldrb	r3, [r3, #19]
    a12a:	f003 0340 	and.w	r3, r3, #64	; 0x40
    a12e:	b2db      	uxtb	r3, r3
    a130:	2b00      	cmp	r3, #0
    a132:	d00d      	beq.n	a150 <_usb_d_dev_trans_done+0x3c>
		return;
	}
	ept->flags.bits.is_busy = 0;
    a134:	687a      	ldr	r2, [r7, #4]
    a136:	7cd3      	ldrb	r3, [r2, #19]
    a138:	f36f 1386 	bfc	r3, #6, #1
    a13c:	74d3      	strb	r3, [r2, #19]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
    a13e:	4b06      	ldr	r3, [pc, #24]	; (a158 <_usb_d_dev_trans_done+0x44>)
    a140:	691b      	ldr	r3, [r3, #16]
    a142:	687a      	ldr	r2, [r7, #4]
    a144:	7c90      	ldrb	r0, [r2, #18]
    a146:	687a      	ldr	r2, [r7, #4]
    a148:	6892      	ldr	r2, [r2, #8]
    a14a:	6839      	ldr	r1, [r7, #0]
    a14c:	4798      	blx	r3
    a14e:	e000      	b.n	a152 <_usb_d_dev_trans_done+0x3e>
		return;
    a150:	bf00      	nop
}
    a152:	3708      	adds	r7, #8
    a154:	46bd      	mov	sp, r7
    a156:	bd80      	pop	{r7, pc}
    a158:	20000f9c 	.word	0x20000f9c

0000a15c <_usb_d_dev_trans_stop>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_stop(struct _usb_d_dev_ep *ept, bool dir, const int32_t code)
{
    a15c:	b580      	push	{r7, lr}
    a15e:	b086      	sub	sp, #24
    a160:	af00      	add	r7, sp, #0
    a162:	60f8      	str	r0, [r7, #12]
    a164:	460b      	mov	r3, r1
    a166:	607a      	str	r2, [r7, #4]
    a168:	72fb      	strb	r3, [r7, #11]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    a16a:	68fb      	ldr	r3, [r7, #12]
    a16c:	7c9b      	ldrb	r3, [r3, #18]
    a16e:	f003 030f 	and.w	r3, r3, #15
    a172:	75fb      	strb	r3, [r7, #23]
	;
	const uint8_t intflags[2] = {USB_D_BANK0_INT_FLAGS, USB_D_BANK1_INT_FLAGS};
    a174:	4b1f      	ldr	r3, [pc, #124]	; (a1f4 <_usb_d_dev_trans_stop+0x98>)
    a176:	881b      	ldrh	r3, [r3, #0]
    a178:	82bb      	strh	r3, [r7, #20]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    a17a:	68fb      	ldr	r3, [r7, #12]
    a17c:	7c9b      	ldrb	r3, [r3, #18]
    a17e:	2bff      	cmp	r3, #255	; 0xff
    a180:	d033      	beq.n	a1ea <_usb_d_dev_trans_stop+0x8e>
    a182:	68fb      	ldr	r3, [r7, #12]
    a184:	7cdb      	ldrb	r3, [r3, #19]
    a186:	f003 0340 	and.w	r3, r3, #64	; 0x40
    a18a:	b2db      	uxtb	r3, r3
    a18c:	2b00      	cmp	r3, #0
    a18e:	d02c      	beq.n	a1ea <_usb_d_dev_trans_stop+0x8e>
		return;
	}
	/* Stop transfer */
	if (dir) {
    a190:	7afb      	ldrb	r3, [r7, #11]
    a192:	2b00      	cmp	r3, #0
    a194:	d006      	beq.n	a1a4 <_usb_d_dev_trans_stop+0x48>
		/* NAK IN */
		_usbd_ep_set_in_rdy(epn, 1, false);
    a196:	7dfb      	ldrb	r3, [r7, #23]
    a198:	2200      	movs	r2, #0
    a19a:	2101      	movs	r1, #1
    a19c:	4618      	mov	r0, r3
    a19e:	4b16      	ldr	r3, [pc, #88]	; (a1f8 <_usb_d_dev_trans_stop+0x9c>)
    a1a0:	4798      	blx	r3
    a1a2:	e005      	b.n	a1b0 <_usb_d_dev_trans_stop+0x54>
	} else {
		/* NAK OUT */
		_usbd_ep_set_out_rdy(epn, 0, false);
    a1a4:	7dfb      	ldrb	r3, [r7, #23]
    a1a6:	2200      	movs	r2, #0
    a1a8:	2100      	movs	r1, #0
    a1aa:	4618      	mov	r0, r3
    a1ac:	4b13      	ldr	r3, [pc, #76]	; (a1fc <_usb_d_dev_trans_stop+0xa0>)
    a1ae:	4798      	blx	r3
	}
	_usbd_ep_int_ack(epn, intflags[dir]);
    a1b0:	7afb      	ldrb	r3, [r7, #11]
    a1b2:	f107 0218 	add.w	r2, r7, #24
    a1b6:	4413      	add	r3, r2
    a1b8:	f813 3c04 	ldrb.w	r3, [r3, #-4]
    a1bc:	461a      	mov	r2, r3
    a1be:	7dfb      	ldrb	r3, [r7, #23]
    a1c0:	4611      	mov	r1, r2
    a1c2:	4618      	mov	r0, r3
    a1c4:	4b0e      	ldr	r3, [pc, #56]	; (a200 <_usb_d_dev_trans_stop+0xa4>)
    a1c6:	4798      	blx	r3
	_usbd_ep_int_dis(epn, intflags[dir]);
    a1c8:	7afb      	ldrb	r3, [r7, #11]
    a1ca:	f107 0218 	add.w	r2, r7, #24
    a1ce:	4413      	add	r3, r2
    a1d0:	f813 3c04 	ldrb.w	r3, [r3, #-4]
    a1d4:	461a      	mov	r2, r3
    a1d6:	7dfb      	ldrb	r3, [r7, #23]
    a1d8:	4611      	mov	r1, r2
    a1da:	4618      	mov	r0, r3
    a1dc:	4b09      	ldr	r3, [pc, #36]	; (a204 <_usb_d_dev_trans_stop+0xa8>)
    a1de:	4798      	blx	r3
	_usb_d_dev_trans_done(ept, code);
    a1e0:	6879      	ldr	r1, [r7, #4]
    a1e2:	68f8      	ldr	r0, [r7, #12]
    a1e4:	4b08      	ldr	r3, [pc, #32]	; (a208 <_usb_d_dev_trans_stop+0xac>)
    a1e6:	4798      	blx	r3
    a1e8:	e000      	b.n	a1ec <_usb_d_dev_trans_stop+0x90>
		return;
    a1ea:	bf00      	nop
}
    a1ec:	3718      	adds	r7, #24
    a1ee:	46bd      	mov	sp, r7
    a1f0:	bd80      	pop	{r7, pc}
    a1f2:	bf00      	nop
    a1f4:	000135b4 	.word	0x000135b4
    a1f8:	00008a11 	.word	0x00008a11
    a1fc:	00008a69 	.word	0x00008a69
    a200:	00008519 	.word	0x00008519
    a204:	00008569 	.word	0x00008569
    a208:	0000a115 	.word	0x0000a115

0000a20c <_usb_d_dev_ep_read_req>:

int32_t _usb_d_dev_ep_read_req(const uint8_t ep, uint8_t *req_buf)
{
    a20c:	b580      	push	{r7, lr}
    a20e:	b086      	sub	sp, #24
    a210:	af00      	add	r7, sp, #0
    a212:	4603      	mov	r3, r0
    a214:	6039      	str	r1, [r7, #0]
    a216:	71fb      	strb	r3, [r7, #7]
	uint8_t            epn   = USB_EP_GET_N(ep);
    a218:	79fb      	ldrb	r3, [r7, #7]
    a21a:	f003 030f 	and.w	r3, r3, #15
    a21e:	75fb      	strb	r3, [r7, #23]
	UsbDeviceDescBank *bank  = prvt_inst.desc_table[epn].DeviceDescBank;
    a220:	7dfb      	ldrb	r3, [r7, #23]
    a222:	015b      	lsls	r3, r3, #5
    a224:	4a1e      	ldr	r2, [pc, #120]	; (a2a0 <_usb_d_dev_ep_read_req+0x94>)
    a226:	4413      	add	r3, r2
    a228:	613b      	str	r3, [r7, #16]
	uint32_t           addr  = bank[0].ADDR.reg;
    a22a:	693b      	ldr	r3, [r7, #16]
    a22c:	681b      	ldr	r3, [r3, #0]
    a22e:	60fb      	str	r3, [r7, #12]
	uint16_t           bytes = bank[0].PCKSIZE.bit.BYTE_COUNT;
    a230:	693b      	ldr	r3, [r7, #16]
    a232:	685b      	ldr	r3, [r3, #4]
    a234:	f3c3 030d 	ubfx	r3, r3, #0, #14
    a238:	b29b      	uxth	r3, r3
    a23a:	817b      	strh	r3, [r7, #10]

	if (epn > CONF_USB_D_MAX_EP_N || !req_buf) {
    a23c:	7dfb      	ldrb	r3, [r7, #23]
    a23e:	2b04      	cmp	r3, #4
    a240:	d802      	bhi.n	a248 <_usb_d_dev_ep_read_req+0x3c>
    a242:	683b      	ldr	r3, [r7, #0]
    a244:	2b00      	cmp	r3, #0
    a246:	d102      	bne.n	a24e <_usb_d_dev_ep_read_req+0x42>
		return -USB_ERR_PARAM;
    a248:	f06f 0311 	mvn.w	r3, #17
    a24c:	e023      	b.n	a296 <_usb_d_dev_ep_read_req+0x8a>
	}
	if (!_usbd_ep_is_ctrl(epn)) {
    a24e:	7dfb      	ldrb	r3, [r7, #23]
    a250:	4618      	mov	r0, r3
    a252:	4b14      	ldr	r3, [pc, #80]	; (a2a4 <_usb_d_dev_ep_read_req+0x98>)
    a254:	4798      	blx	r3
    a256:	4603      	mov	r3, r0
    a258:	f083 0301 	eor.w	r3, r3, #1
    a25c:	b2db      	uxtb	r3, r3
    a25e:	2b00      	cmp	r3, #0
    a260:	d002      	beq.n	a268 <_usb_d_dev_ep_read_req+0x5c>
		return -USB_ERR_FUNC;
    a262:	f06f 0312 	mvn.w	r3, #18
    a266:	e016      	b.n	a296 <_usb_d_dev_ep_read_req+0x8a>
	}
	if (!_usbd_ep_is_setup(epn)) {
    a268:	7dfb      	ldrb	r3, [r7, #23]
    a26a:	4618      	mov	r0, r3
    a26c:	4b0e      	ldr	r3, [pc, #56]	; (a2a8 <_usb_d_dev_ep_read_req+0x9c>)
    a26e:	4798      	blx	r3
    a270:	4603      	mov	r3, r0
    a272:	f083 0301 	eor.w	r3, r3, #1
    a276:	b2db      	uxtb	r3, r3
    a278:	2b00      	cmp	r3, #0
    a27a:	d001      	beq.n	a280 <_usb_d_dev_ep_read_req+0x74>
		return ERR_NONE;
    a27c:	2300      	movs	r3, #0
    a27e:	e00a      	b.n	a296 <_usb_d_dev_ep_read_req+0x8a>
	}
	memcpy(req_buf, (void *)addr, 8);
    a280:	68fb      	ldr	r3, [r7, #12]
    a282:	2208      	movs	r2, #8
    a284:	4619      	mov	r1, r3
    a286:	6838      	ldr	r0, [r7, #0]
    a288:	4b08      	ldr	r3, [pc, #32]	; (a2ac <_usb_d_dev_ep_read_req+0xa0>)
    a28a:	4798      	blx	r3
	_usbd_ep_ack_setup(epn);
    a28c:	7dfb      	ldrb	r3, [r7, #23]
    a28e:	4618      	mov	r0, r3
    a290:	4b07      	ldr	r3, [pc, #28]	; (a2b0 <_usb_d_dev_ep_read_req+0xa4>)
    a292:	4798      	blx	r3

	return bytes;
    a294:	897b      	ldrh	r3, [r7, #10]
}
    a296:	4618      	mov	r0, r3
    a298:	3718      	adds	r7, #24
    a29a:	46bd      	mov	sp, r7
    a29c:	bd80      	pop	{r7, pc}
    a29e:	bf00      	nop
    a2a0:	20001064 	.word	0x20001064
    a2a4:	00008591 	.word	0x00008591
    a2a8:	0000873d 	.word	0x0000873d
    a2ac:	00012f1d 	.word	0x00012f1d
    a2b0:	0000876d 	.word	0x0000876d

0000a2b4 <_usb_d_dev_ep_trans>:

int32_t _usb_d_dev_ep_trans(const struct usb_d_transfer *trans)
{
    a2b4:	b580      	push	{r7, lr}
    a2b6:	b086      	sub	sp, #24
    a2b8:	af00      	add	r7, sp, #0
    a2ba:	6078      	str	r0, [r7, #4]
	uint8_t               epn = USB_EP_GET_N(trans->ep);
    a2bc:	687b      	ldr	r3, [r7, #4]
    a2be:	7a1b      	ldrb	r3, [r3, #8]
    a2c0:	f003 030f 	and.w	r3, r3, #15
    a2c4:	75bb      	strb	r3, [r7, #22]
	bool                  dir = USB_EP_GET_DIR(trans->ep);
    a2c6:	687b      	ldr	r3, [r7, #4]
    a2c8:	7a1b      	ldrb	r3, [r3, #8]
    a2ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
    a2ce:	2b00      	cmp	r3, #0
    a2d0:	bf14      	ite	ne
    a2d2:	2301      	movne	r3, #1
    a2d4:	2300      	moveq	r3, #0
    a2d6:	757b      	strb	r3, [r7, #21]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    a2d8:	7d7a      	ldrb	r2, [r7, #21]
    a2da:	7dbb      	ldrb	r3, [r7, #22]
    a2dc:	4611      	mov	r1, r2
    a2de:	4618      	mov	r0, r3
    a2e0:	4b5f      	ldr	r3, [pc, #380]	; (a460 <_usb_d_dev_ep_trans+0x1ac>)
    a2e2:	4798      	blx	r3
    a2e4:	6138      	str	r0, [r7, #16]

	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    a2e6:	693b      	ldr	r3, [r7, #16]
    a2e8:	8a1b      	ldrh	r3, [r3, #16]
    a2ea:	f240 32ff 	movw	r2, #1023	; 0x3ff
    a2ee:	4293      	cmp	r3, r2
    a2f0:	d004      	beq.n	a2fc <_usb_d_dev_ep_trans+0x48>
    a2f2:	693b      	ldr	r3, [r7, #16]
    a2f4:	8a1b      	ldrh	r3, [r3, #16]
    a2f6:	3b01      	subs	r3, #1
    a2f8:	b29b      	uxth	r3, r3
    a2fa:	e001      	b.n	a300 <_usb_d_dev_ep_trans+0x4c>
    a2fc:	f240 33ff 	movw	r3, #1023	; 0x3ff
    a300:	81fb      	strh	r3, [r7, #14]
	bool     size_n_aligned = (trans->size & size_mask);
    a302:	687b      	ldr	r3, [r7, #4]
    a304:	685a      	ldr	r2, [r3, #4]
    a306:	89fb      	ldrh	r3, [r7, #14]
    a308:	4013      	ands	r3, r2
    a30a:	2b00      	cmp	r3, #0
    a30c:	bf14      	ite	ne
    a30e:	2301      	movne	r3, #1
    a310:	2300      	moveq	r3, #0
    a312:	737b      	strb	r3, [r7, #13]

	bool use_cache = false;
    a314:	2300      	movs	r3, #0
    a316:	75fb      	strb	r3, [r7, #23]

	volatile hal_atomic_t flags;

	if (epn > CONF_USB_D_MAX_EP_N) {
    a318:	7dbb      	ldrb	r3, [r7, #22]
    a31a:	2b04      	cmp	r3, #4
    a31c:	d902      	bls.n	a324 <_usb_d_dev_ep_trans+0x70>
		return -USB_ERR_PARAM;
    a31e:	f06f 0311 	mvn.w	r3, #17
    a322:	e098      	b.n	a456 <_usb_d_dev_ep_trans+0x1a2>
	 * 1. Buffer not in RAM (cache all).
	 * 2. IN/OUT with unaligned buffer (cache all).
	 * 3. OUT with unaligned packet size (cache last packet).
	 * 4. OUT size < 8 (sub-case for 3).
	 */
	if (!_usb_is_addr4dma(trans->buf, trans->size) || (!_usb_is_aligned(trans->buf))
    a324:	687b      	ldr	r3, [r7, #4]
    a326:	681b      	ldr	r3, [r3, #0]
    a328:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
    a32c:	d31a      	bcc.n	a364 <_usb_d_dev_ep_trans+0xb0>
    a32e:	687b      	ldr	r3, [r7, #4]
    a330:	681b      	ldr	r3, [r3, #0]
    a332:	461a      	mov	r2, r3
    a334:	687b      	ldr	r3, [r7, #4]
    a336:	685b      	ldr	r3, [r3, #4]
    a338:	4413      	add	r3, r2
    a33a:	4a4a      	ldr	r2, [pc, #296]	; (a464 <_usb_d_dev_ep_trans+0x1b0>)
    a33c:	4293      	cmp	r3, r2
    a33e:	d811      	bhi.n	a364 <_usb_d_dev_ep_trans+0xb0>
    a340:	687b      	ldr	r3, [r7, #4]
    a342:	681b      	ldr	r3, [r3, #0]
    a344:	f003 0303 	and.w	r3, r3, #3
    a348:	2b00      	cmp	r3, #0
    a34a:	d10b      	bne.n	a364 <_usb_d_dev_ep_trans+0xb0>
	    || (!dir && (trans->size < ept->size))) {
    a34c:	7d7b      	ldrb	r3, [r7, #21]
    a34e:	f083 0301 	eor.w	r3, r3, #1
    a352:	b2db      	uxtb	r3, r3
    a354:	2b00      	cmp	r3, #0
    a356:	d00e      	beq.n	a376 <_usb_d_dev_ep_trans+0xc2>
    a358:	687b      	ldr	r3, [r7, #4]
    a35a:	685b      	ldr	r3, [r3, #4]
    a35c:	693a      	ldr	r2, [r7, #16]
    a35e:	8a12      	ldrh	r2, [r2, #16]
    a360:	4293      	cmp	r3, r2
    a362:	d208      	bcs.n	a376 <_usb_d_dev_ep_trans+0xc2>
		if (!ept->cache) {
    a364:	693b      	ldr	r3, [r7, #16]
    a366:	68db      	ldr	r3, [r3, #12]
    a368:	2b00      	cmp	r3, #0
    a36a:	d102      	bne.n	a372 <_usb_d_dev_ep_trans+0xbe>
			return -USB_ERR_FUNC;
    a36c:	f06f 0312 	mvn.w	r3, #18
    a370:	e071      	b.n	a456 <_usb_d_dev_ep_trans+0x1a2>
		}
		/* Use cache all the time. */
		use_cache = true;
    a372:	2301      	movs	r3, #1
    a374:	75fb      	strb	r3, [r7, #23]
	}
	if (!dir && size_n_aligned) {
    a376:	7d7b      	ldrb	r3, [r7, #21]
    a378:	f083 0301 	eor.w	r3, r3, #1
    a37c:	b2db      	uxtb	r3, r3
    a37e:	2b00      	cmp	r3, #0
    a380:	d009      	beq.n	a396 <_usb_d_dev_ep_trans+0xe2>
    a382:	7b7b      	ldrb	r3, [r7, #13]
    a384:	2b00      	cmp	r3, #0
    a386:	d006      	beq.n	a396 <_usb_d_dev_ep_trans+0xe2>
		if (!ept->cache) {
    a388:	693b      	ldr	r3, [r7, #16]
    a38a:	68db      	ldr	r3, [r3, #12]
    a38c:	2b00      	cmp	r3, #0
    a38e:	d102      	bne.n	a396 <_usb_d_dev_ep_trans+0xe2>
			return -USB_ERR_PARAM;
    a390:	f06f 0311 	mvn.w	r3, #17
    a394:	e05f      	b.n	a456 <_usb_d_dev_ep_trans+0x1a2>
		}
		/* Set 'use_cache' on last packet. */
	}

	/* Check halt */
	if (ept->flags.bits.is_stalled) {
    a396:	693b      	ldr	r3, [r7, #16]
    a398:	7cdb      	ldrb	r3, [r3, #19]
    a39a:	f003 0308 	and.w	r3, r3, #8
    a39e:	b2db      	uxtb	r3, r3
    a3a0:	2b00      	cmp	r3, #0
    a3a2:	d001      	beq.n	a3a8 <_usb_d_dev_ep_trans+0xf4>
		return USB_HALTED;
    a3a4:	2302      	movs	r3, #2
    a3a6:	e056      	b.n	a456 <_usb_d_dev_ep_trans+0x1a2>
	}

	/* Try to start transactions. */

	atomic_enter_critical(&flags);
    a3a8:	f107 0308 	add.w	r3, r7, #8
    a3ac:	4618      	mov	r0, r3
    a3ae:	4b2e      	ldr	r3, [pc, #184]	; (a468 <_usb_d_dev_ep_trans+0x1b4>)
    a3b0:	4798      	blx	r3
	if (_usb_d_dev_ep_is_busy(ept)) {
    a3b2:	693b      	ldr	r3, [r7, #16]
    a3b4:	7cdb      	ldrb	r3, [r3, #19]
    a3b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
    a3ba:	b2db      	uxtb	r3, r3
    a3bc:	2b00      	cmp	r3, #0
    a3be:	d006      	beq.n	a3ce <_usb_d_dev_ep_trans+0x11a>
		atomic_leave_critical(&flags);
    a3c0:	f107 0308 	add.w	r3, r7, #8
    a3c4:	4618      	mov	r0, r3
    a3c6:	4b29      	ldr	r3, [pc, #164]	; (a46c <_usb_d_dev_ep_trans+0x1b8>)
    a3c8:	4798      	blx	r3
		return USB_BUSY;
    a3ca:	2301      	movs	r3, #1
    a3cc:	e043      	b.n	a456 <_usb_d_dev_ep_trans+0x1a2>
	}
	ept->flags.bits.is_busy = 1;
    a3ce:	693a      	ldr	r2, [r7, #16]
    a3d0:	7cd3      	ldrb	r3, [r2, #19]
    a3d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    a3d6:	74d3      	strb	r3, [r2, #19]
	atomic_leave_critical(&flags);
    a3d8:	f107 0308 	add.w	r3, r7, #8
    a3dc:	4618      	mov	r0, r3
    a3de:	4b23      	ldr	r3, [pc, #140]	; (a46c <_usb_d_dev_ep_trans+0x1b8>)
    a3e0:	4798      	blx	r3

	/* Copy transaction information. */
	ept->trans_buf   = trans->buf;
    a3e2:	687b      	ldr	r3, [r7, #4]
    a3e4:	681a      	ldr	r2, [r3, #0]
    a3e6:	693b      	ldr	r3, [r7, #16]
    a3e8:	601a      	str	r2, [r3, #0]
	ept->trans_size  = trans->size;
    a3ea:	687b      	ldr	r3, [r7, #4]
    a3ec:	685a      	ldr	r2, [r3, #4]
    a3ee:	693b      	ldr	r3, [r7, #16]
    a3f0:	605a      	str	r2, [r3, #4]
	ept->trans_count = 0;
    a3f2:	693b      	ldr	r3, [r7, #16]
    a3f4:	2200      	movs	r2, #0
    a3f6:	609a      	str	r2, [r3, #8]

	ept->flags.bits.dir       = dir;
    a3f8:	693a      	ldr	r2, [r7, #16]
    a3fa:	7cd3      	ldrb	r3, [r2, #19]
    a3fc:	7d79      	ldrb	r1, [r7, #21]
    a3fe:	f361 13c7 	bfi	r3, r1, #7, #1
    a402:	74d3      	strb	r3, [r2, #19]
	ept->flags.bits.use_cache = use_cache;
    a404:	693a      	ldr	r2, [r7, #16]
    a406:	7cd3      	ldrb	r3, [r2, #19]
    a408:	7df9      	ldrb	r1, [r7, #23]
    a40a:	f361 1345 	bfi	r3, r1, #5, #1
    a40e:	74d3      	strb	r3, [r2, #19]
	ept->flags.bits.need_zlp  = (trans->zlp && (!size_n_aligned));
    a410:	687b      	ldr	r3, [r7, #4]
    a412:	7a5b      	ldrb	r3, [r3, #9]
    a414:	2b00      	cmp	r3, #0
    a416:	d007      	beq.n	a428 <_usb_d_dev_ep_trans+0x174>
    a418:	7b7b      	ldrb	r3, [r7, #13]
    a41a:	f083 0301 	eor.w	r3, r3, #1
    a41e:	b2db      	uxtb	r3, r3
    a420:	2b00      	cmp	r3, #0
    a422:	d001      	beq.n	a428 <_usb_d_dev_ep_trans+0x174>
    a424:	2301      	movs	r3, #1
    a426:	e000      	b.n	a42a <_usb_d_dev_ep_trans+0x176>
    a428:	2300      	movs	r3, #0
    a42a:	b2db      	uxtb	r3, r3
    a42c:	f003 0301 	and.w	r3, r3, #1
    a430:	b2d9      	uxtb	r1, r3
    a432:	693a      	ldr	r2, [r7, #16]
    a434:	7cd3      	ldrb	r3, [r2, #19]
    a436:	f361 1304 	bfi	r3, r1, #4, #1
    a43a:	74d3      	strb	r3, [r2, #19]

	if (dir) {
    a43c:	7d7b      	ldrb	r3, [r7, #21]
    a43e:	2b00      	cmp	r3, #0
    a440:	d004      	beq.n	a44c <_usb_d_dev_ep_trans+0x198>
		_usb_d_dev_in_next(ept, false);
    a442:	2100      	movs	r1, #0
    a444:	6938      	ldr	r0, [r7, #16]
    a446:	4b0a      	ldr	r3, [pc, #40]	; (a470 <_usb_d_dev_ep_trans+0x1bc>)
    a448:	4798      	blx	r3
    a44a:	e003      	b.n	a454 <_usb_d_dev_ep_trans+0x1a0>
	} else {
		_usb_d_dev_out_next(ept, false);
    a44c:	2100      	movs	r1, #0
    a44e:	6938      	ldr	r0, [r7, #16]
    a450:	4b08      	ldr	r3, [pc, #32]	; (a474 <_usb_d_dev_ep_trans+0x1c0>)
    a452:	4798      	blx	r3
	}

	return ERR_NONE;
    a454:	2300      	movs	r3, #0
}
    a456:	4618      	mov	r0, r3
    a458:	3718      	adds	r7, #24
    a45a:	46bd      	mov	sp, r7
    a45c:	bd80      	pop	{r7, pc}
    a45e:	bf00      	nop
    a460:	00008b25 	.word	0x00008b25
    a464:	20041fff 	.word	0x20041fff
    a468:	0000ac2d 	.word	0x0000ac2d
    a46c:	0000ac53 	.word	0x0000ac53
    a470:	00008ded 	.word	0x00008ded
    a474:	00009005 	.word	0x00009005

0000a478 <_usb_d_dev_register_callback>:
	}
	return USB_OK;
}

void _usb_d_dev_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
    a478:	b480      	push	{r7}
    a47a:	b085      	sub	sp, #20
    a47c:	af00      	add	r7, sp, #0
    a47e:	4603      	mov	r3, r0
    a480:	6039      	str	r1, [r7, #0]
    a482:	71fb      	strb	r3, [r7, #7]
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    a484:	683b      	ldr	r3, [r7, #0]
    a486:	2b00      	cmp	r3, #0
    a488:	d001      	beq.n	a48e <_usb_d_dev_register_callback+0x16>
    a48a:	683b      	ldr	r3, [r7, #0]
    a48c:	e000      	b.n	a490 <_usb_d_dev_register_callback+0x18>
    a48e:	4b0a      	ldr	r3, [pc, #40]	; (a4b8 <_usb_d_dev_register_callback+0x40>)
    a490:	60fb      	str	r3, [r7, #12]
	if (type == USB_D_CB_EVENT) {
    a492:	79fb      	ldrb	r3, [r7, #7]
    a494:	2b01      	cmp	r3, #1
    a496:	d103      	bne.n	a4a0 <_usb_d_dev_register_callback+0x28>
		dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)f;
    a498:	4a08      	ldr	r2, [pc, #32]	; (a4bc <_usb_d_dev_register_callback+0x44>)
    a49a:	68fb      	ldr	r3, [r7, #12]
    a49c:	6053      	str	r3, [r2, #4]
	} else if (type == USB_D_CB_SOF) {
		dev_inst.callbacks.sof = (_usb_d_dev_sof_cb_t)f;
	}
}
    a49e:	e005      	b.n	a4ac <_usb_d_dev_register_callback+0x34>
	} else if (type == USB_D_CB_SOF) {
    a4a0:	79fb      	ldrb	r3, [r7, #7]
    a4a2:	2b00      	cmp	r3, #0
    a4a4:	d102      	bne.n	a4ac <_usb_d_dev_register_callback+0x34>
		dev_inst.callbacks.sof = (_usb_d_dev_sof_cb_t)f;
    a4a6:	4a05      	ldr	r2, [pc, #20]	; (a4bc <_usb_d_dev_register_callback+0x44>)
    a4a8:	68fb      	ldr	r3, [r7, #12]
    a4aa:	6013      	str	r3, [r2, #0]
}
    a4ac:	bf00      	nop
    a4ae:	3714      	adds	r7, #20
    a4b0:	46bd      	mov	sp, r7
    a4b2:	f85d 7b04 	ldr.w	r7, [sp], #4
    a4b6:	4770      	bx	lr
    a4b8:	000083ad 	.word	0x000083ad
    a4bc:	20000f9c 	.word	0x20000f9c

0000a4c0 <_usb_d_dev_register_ep_callback>:

void _usb_d_dev_register_ep_callback(const enum usb_d_dev_ep_cb_type type, const FUNC_PTR func)
{
    a4c0:	b480      	push	{r7}
    a4c2:	b085      	sub	sp, #20
    a4c4:	af00      	add	r7, sp, #0
    a4c6:	4603      	mov	r3, r0
    a4c8:	6039      	str	r1, [r7, #0]
    a4ca:	71fb      	strb	r3, [r7, #7]
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    a4cc:	683b      	ldr	r3, [r7, #0]
    a4ce:	2b00      	cmp	r3, #0
    a4d0:	d001      	beq.n	a4d6 <_usb_d_dev_register_ep_callback+0x16>
    a4d2:	683b      	ldr	r3, [r7, #0]
    a4d4:	e000      	b.n	a4d8 <_usb_d_dev_register_ep_callback+0x18>
    a4d6:	4b0e      	ldr	r3, [pc, #56]	; (a510 <_usb_d_dev_register_ep_callback+0x50>)
    a4d8:	60fb      	str	r3, [r7, #12]
	if (type == USB_D_DEV_EP_CB_SETUP) {
    a4da:	79fb      	ldrb	r3, [r7, #7]
    a4dc:	2b00      	cmp	r3, #0
    a4de:	d103      	bne.n	a4e8 <_usb_d_dev_register_ep_callback+0x28>
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
    a4e0:	4a0c      	ldr	r2, [pc, #48]	; (a514 <_usb_d_dev_register_ep_callback+0x54>)
    a4e2:	68fb      	ldr	r3, [r7, #12]
    a4e4:	6093      	str	r3, [r2, #8]
	} else if (type == USB_D_DEV_EP_CB_MORE) {
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
	} else if (type == USB_D_DEV_EP_CB_DONE) {
		dev_inst.ep_callbacks.done = (_usb_d_dev_ep_cb_done_t)f;
	}
}
    a4e6:	e00c      	b.n	a502 <_usb_d_dev_register_ep_callback+0x42>
	} else if (type == USB_D_DEV_EP_CB_MORE) {
    a4e8:	79fb      	ldrb	r3, [r7, #7]
    a4ea:	2b01      	cmp	r3, #1
    a4ec:	d103      	bne.n	a4f6 <_usb_d_dev_register_ep_callback+0x36>
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
    a4ee:	4a09      	ldr	r2, [pc, #36]	; (a514 <_usb_d_dev_register_ep_callback+0x54>)
    a4f0:	68fb      	ldr	r3, [r7, #12]
    a4f2:	60d3      	str	r3, [r2, #12]
}
    a4f4:	e005      	b.n	a502 <_usb_d_dev_register_ep_callback+0x42>
	} else if (type == USB_D_DEV_EP_CB_DONE) {
    a4f6:	79fb      	ldrb	r3, [r7, #7]
    a4f8:	2b02      	cmp	r3, #2
    a4fa:	d102      	bne.n	a502 <_usb_d_dev_register_ep_callback+0x42>
		dev_inst.ep_callbacks.done = (_usb_d_dev_ep_cb_done_t)f;
    a4fc:	4a05      	ldr	r2, [pc, #20]	; (a514 <_usb_d_dev_register_ep_callback+0x54>)
    a4fe:	68fb      	ldr	r3, [r7, #12]
    a500:	6113      	str	r3, [r2, #16]
}
    a502:	bf00      	nop
    a504:	3714      	adds	r7, #20
    a506:	46bd      	mov	sp, r7
    a508:	f85d 7b04 	ldr.w	r7, [sp], #4
    a50c:	4770      	bx	lr
    a50e:	bf00      	nop
    a510:	000083ad 	.word	0x000083ad
    a514:	20000f9c 	.word	0x20000f9c

0000a518 <USB_0_Handler>:

/**
 * \brief USB interrupt handler
 */
void USB_0_Handler(void)
{
    a518:	b580      	push	{r7, lr}
    a51a:	af00      	add	r7, sp, #0

	_usb_d_dev_handler();
    a51c:	4b01      	ldr	r3, [pc, #4]	; (a524 <USB_0_Handler+0xc>)
    a51e:	4798      	blx	r3
}
    a520:	bf00      	nop
    a522:	bd80      	pop	{r7, pc}
    a524:	000097dd 	.word	0x000097dd

0000a528 <USB_1_Handler>:
/**
 * \brief USB interrupt handler
 */
void USB_1_Handler(void)
{
    a528:	b580      	push	{r7, lr}
    a52a:	af00      	add	r7, sp, #0

	_usb_d_dev_handler();
    a52c:	4b01      	ldr	r3, [pc, #4]	; (a534 <USB_1_Handler+0xc>)
    a52e:	4798      	blx	r3
}
    a530:	bf00      	nop
    a532:	bd80      	pop	{r7, pc}
    a534:	000097dd 	.word	0x000097dd

0000a538 <USB_2_Handler>:
/**
 * \brief USB interrupt handler
 */
void USB_2_Handler(void)
{
    a538:	b580      	push	{r7, lr}
    a53a:	af00      	add	r7, sp, #0

	_usb_d_dev_handler();
    a53c:	4b01      	ldr	r3, [pc, #4]	; (a544 <USB_2_Handler+0xc>)
    a53e:	4798      	blx	r3
}
    a540:	bf00      	nop
    a542:	bd80      	pop	{r7, pc}
    a544:	000097dd 	.word	0x000097dd

0000a548 <USB_3_Handler>:
/**
 * \brief USB interrupt handler
 */
void USB_3_Handler(void)
{
    a548:	b580      	push	{r7, lr}
    a54a:	af00      	add	r7, sp, #0

	_usb_d_dev_handler();
    a54c:	4b01      	ldr	r3, [pc, #4]	; (a554 <USB_3_Handler+0xc>)
    a54e:	4798      	blx	r3
}
    a550:	bf00      	nop
    a552:	bd80      	pop	{r7, pc}
    a554:	000097dd 	.word	0x000097dd

0000a558 <hri_wdt_wait_for_sync>:
typedef uint8_t  hri_wdt_ewctrl_reg_t;
typedef uint8_t  hri_wdt_intenset_reg_t;
typedef uint8_t  hri_wdt_intflag_reg_t;

static inline void hri_wdt_wait_for_sync(const void *const hw, hri_wdt_syncbusy_reg_t reg)
{
    a558:	b480      	push	{r7}
    a55a:	b083      	sub	sp, #12
    a55c:	af00      	add	r7, sp, #0
    a55e:	6078      	str	r0, [r7, #4]
    a560:	6039      	str	r1, [r7, #0]
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    a562:	bf00      	nop
    a564:	687b      	ldr	r3, [r7, #4]
    a566:	689a      	ldr	r2, [r3, #8]
    a568:	683b      	ldr	r3, [r7, #0]
    a56a:	4013      	ands	r3, r2
    a56c:	2b00      	cmp	r3, #0
    a56e:	d1f9      	bne.n	a564 <hri_wdt_wait_for_sync+0xc>
	};
}
    a570:	bf00      	nop
    a572:	370c      	adds	r7, #12
    a574:	46bd      	mov	sp, r7
    a576:	f85d 7b04 	ldr.w	r7, [sp], #4
    a57a:	4770      	bx	lr

0000a57c <hri_wdt_get_CTRLA_ENABLE_bit>:
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
	WDT_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_wdt_get_CTRLA_ENABLE_bit(const void *const hw)
{
    a57c:	b580      	push	{r7, lr}
    a57e:	b084      	sub	sp, #16
    a580:	af00      	add	r7, sp, #0
    a582:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
    a584:	210e      	movs	r1, #14
    a586:	6878      	ldr	r0, [r7, #4]
    a588:	4b0a      	ldr	r3, [pc, #40]	; (a5b4 <hri_wdt_get_CTRLA_ENABLE_bit+0x38>)
    a58a:	4798      	blx	r3
	tmp = ((Wdt *)hw)->CTRLA.reg;
    a58c:	687b      	ldr	r3, [r7, #4]
    a58e:	781b      	ldrb	r3, [r3, #0]
    a590:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & WDT_CTRLA_ENABLE) >> WDT_CTRLA_ENABLE_Pos;
    a592:	7bfb      	ldrb	r3, [r7, #15]
    a594:	085b      	lsrs	r3, r3, #1
    a596:	b2db      	uxtb	r3, r3
    a598:	f003 0301 	and.w	r3, r3, #1
    a59c:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    a59e:	7bfb      	ldrb	r3, [r7, #15]
    a5a0:	2b00      	cmp	r3, #0
    a5a2:	bf14      	ite	ne
    a5a4:	2301      	movne	r3, #1
    a5a6:	2300      	moveq	r3, #0
    a5a8:	b2db      	uxtb	r3, r3
}
    a5aa:	4618      	mov	r0, r3
    a5ac:	3710      	adds	r7, #16
    a5ae:	46bd      	mov	sp, r7
    a5b0:	bd80      	pop	{r7, pc}
    a5b2:	bf00      	nop
    a5b4:	0000a559 	.word	0x0000a559

0000a5b8 <hri_wdt_clear_CTRLA_WEN_bit>:
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
	WDT_CRITICAL_SECTION_LEAVE();
}

static inline void hri_wdt_clear_CTRLA_WEN_bit(const void *const hw)
{
    a5b8:	b580      	push	{r7, lr}
    a5ba:	b082      	sub	sp, #8
    a5bc:	af00      	add	r7, sp, #0
    a5be:	6078      	str	r0, [r7, #4]
	WDT_CRITICAL_SECTION_ENTER();
	((Wdt *)hw)->CTRLA.reg &= ~WDT_CTRLA_WEN;
    a5c0:	687b      	ldr	r3, [r7, #4]
    a5c2:	781b      	ldrb	r3, [r3, #0]
    a5c4:	b2db      	uxtb	r3, r3
    a5c6:	f023 0304 	bic.w	r3, r3, #4
    a5ca:	b2da      	uxtb	r2, r3
    a5cc:	687b      	ldr	r3, [r7, #4]
    a5ce:	701a      	strb	r2, [r3, #0]
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
    a5d0:	210e      	movs	r1, #14
    a5d2:	6878      	ldr	r0, [r7, #4]
    a5d4:	4b02      	ldr	r3, [pc, #8]	; (a5e0 <hri_wdt_clear_CTRLA_WEN_bit+0x28>)
    a5d6:	4798      	blx	r3
	WDT_CRITICAL_SECTION_LEAVE();
}
    a5d8:	bf00      	nop
    a5da:	3708      	adds	r7, #8
    a5dc:	46bd      	mov	sp, r7
    a5de:	bd80      	pop	{r7, pc}
    a5e0:	0000a559 	.word	0x0000a559

0000a5e4 <hri_wdt_get_CTRLA_ALWAYSON_bit>:
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
	WDT_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_wdt_get_CTRLA_ALWAYSON_bit(const void *const hw)
{
    a5e4:	b580      	push	{r7, lr}
    a5e6:	b084      	sub	sp, #16
    a5e8:	af00      	add	r7, sp, #0
    a5ea:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
    a5ec:	210e      	movs	r1, #14
    a5ee:	6878      	ldr	r0, [r7, #4]
    a5f0:	4b08      	ldr	r3, [pc, #32]	; (a614 <hri_wdt_get_CTRLA_ALWAYSON_bit+0x30>)
    a5f2:	4798      	blx	r3
	tmp = ((Wdt *)hw)->CTRLA.reg;
    a5f4:	687b      	ldr	r3, [r7, #4]
    a5f6:	781b      	ldrb	r3, [r3, #0]
    a5f8:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & WDT_CTRLA_ALWAYSON) >> WDT_CTRLA_ALWAYSON_Pos;
    a5fa:	7bfb      	ldrb	r3, [r7, #15]
    a5fc:	09db      	lsrs	r3, r3, #7
    a5fe:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    a600:	7bfb      	ldrb	r3, [r7, #15]
    a602:	2b00      	cmp	r3, #0
    a604:	bf14      	ite	ne
    a606:	2301      	movne	r3, #1
    a608:	2300      	moveq	r3, #0
    a60a:	b2db      	uxtb	r3, r3
}
    a60c:	4618      	mov	r0, r3
    a60e:	3710      	adds	r7, #16
    a610:	46bd      	mov	sp, r7
    a612:	bd80      	pop	{r7, pc}
    a614:	0000a559 	.word	0x0000a559

0000a618 <hri_wdt_write_CONFIG_PER_bf>:
	tmp = (tmp & WDT_CONFIG_PER(mask)) >> WDT_CONFIG_PER_Pos;
	return tmp;
}

static inline void hri_wdt_write_CONFIG_PER_bf(const void *const hw, hri_wdt_config_reg_t data)
{
    a618:	b480      	push	{r7}
    a61a:	b085      	sub	sp, #20
    a61c:	af00      	add	r7, sp, #0
    a61e:	6078      	str	r0, [r7, #4]
    a620:	460b      	mov	r3, r1
    a622:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	WDT_CRITICAL_SECTION_ENTER();
	tmp = ((Wdt *)hw)->CONFIG.reg;
    a624:	687b      	ldr	r3, [r7, #4]
    a626:	785b      	ldrb	r3, [r3, #1]
    a628:	73fb      	strb	r3, [r7, #15]
	tmp &= ~WDT_CONFIG_PER_Msk;
    a62a:	7bfb      	ldrb	r3, [r7, #15]
    a62c:	f023 030f 	bic.w	r3, r3, #15
    a630:	73fb      	strb	r3, [r7, #15]
	tmp |= WDT_CONFIG_PER(data);
    a632:	78fb      	ldrb	r3, [r7, #3]
    a634:	f003 030f 	and.w	r3, r3, #15
    a638:	b2da      	uxtb	r2, r3
    a63a:	7bfb      	ldrb	r3, [r7, #15]
    a63c:	4313      	orrs	r3, r2
    a63e:	73fb      	strb	r3, [r7, #15]
	((Wdt *)hw)->CONFIG.reg = tmp;
    a640:	687b      	ldr	r3, [r7, #4]
    a642:	7bfa      	ldrb	r2, [r7, #15]
    a644:	705a      	strb	r2, [r3, #1]
	WDT_CRITICAL_SECTION_LEAVE();
}
    a646:	bf00      	nop
    a648:	3714      	adds	r7, #20
    a64a:	46bd      	mov	sp, r7
    a64c:	f85d 7b04 	ldr.w	r7, [sp], #4
    a650:	4770      	bx	lr
	...

0000a654 <_wdt_init>:

/**
 * \brief WDT initialization function
 */
int32_t _wdt_init(struct wdt_dev *const dev)
{
    a654:	b580      	push	{r7, lr}
    a656:	b082      	sub	sp, #8
    a658:	af00      	add	r7, sp, #0
    a65a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	ASSERT(dev && dev->hw);
    a65c:	687b      	ldr	r3, [r7, #4]
    a65e:	2b00      	cmp	r3, #0
    a660:	d005      	beq.n	a66e <_wdt_init+0x1a>
    a662:	687b      	ldr	r3, [r7, #4]
    a664:	681b      	ldr	r3, [r3, #0]
    a666:	2b00      	cmp	r3, #0
    a668:	d001      	beq.n	a66e <_wdt_init+0x1a>
    a66a:	2301      	movs	r3, #1
    a66c:	e000      	b.n	a670 <_wdt_init+0x1c>
    a66e:	2300      	movs	r3, #0
    a670:	f003 0301 	and.w	r3, r3, #1
    a674:	b2db      	uxtb	r3, r3
    a676:	2250      	movs	r2, #80	; 0x50
    a678:	4913      	ldr	r1, [pc, #76]	; (a6c8 <_wdt_init+0x74>)
    a67a:	4618      	mov	r0, r3
    a67c:	4b13      	ldr	r3, [pc, #76]	; (a6cc <_wdt_init+0x78>)
    a67e:	4798      	blx	r3

	if (hri_wdt_get_CTRLA_ALWAYSON_bit(dev->hw) || hri_wdt_get_CTRLA_ENABLE_bit(dev->hw)) {
    a680:	687b      	ldr	r3, [r7, #4]
    a682:	681b      	ldr	r3, [r3, #0]
    a684:	4618      	mov	r0, r3
    a686:	4b12      	ldr	r3, [pc, #72]	; (a6d0 <_wdt_init+0x7c>)
    a688:	4798      	blx	r3
    a68a:	4603      	mov	r3, r0
    a68c:	2b00      	cmp	r3, #0
    a68e:	d107      	bne.n	a6a0 <_wdt_init+0x4c>
    a690:	687b      	ldr	r3, [r7, #4]
    a692:	681b      	ldr	r3, [r3, #0]
    a694:	4618      	mov	r0, r3
    a696:	4b0f      	ldr	r3, [pc, #60]	; (a6d4 <_wdt_init+0x80>)
    a698:	4798      	blx	r3
    a69a:	4603      	mov	r3, r0
    a69c:	2b00      	cmp	r3, #0
    a69e:	d002      	beq.n	a6a6 <_wdt_init+0x52>
		return ERR_DENIED;
    a6a0:	f06f 0310 	mvn.w	r3, #16
    a6a4:	e00b      	b.n	a6be <_wdt_init+0x6a>
	} else {
		if (CONF_WDT_WINDOW_EN) {
			hri_wdt_write_CONFIG_WINDOW_bf(dev->hw, CONF_WDT_WINDOW);
		} else {
			hri_wdt_clear_CTRLA_WEN_bit(dev->hw);
    a6a6:	687b      	ldr	r3, [r7, #4]
    a6a8:	681b      	ldr	r3, [r3, #0]
    a6aa:	4618      	mov	r0, r3
    a6ac:	4b0a      	ldr	r3, [pc, #40]	; (a6d8 <_wdt_init+0x84>)
    a6ae:	4798      	blx	r3
		}

		hri_wdt_write_CONFIG_PER_bf(dev->hw, CONF_WDT_PER);
    a6b0:	687b      	ldr	r3, [r7, #4]
    a6b2:	681b      	ldr	r3, [r3, #0]
    a6b4:	210b      	movs	r1, #11
    a6b6:	4618      	mov	r0, r3
    a6b8:	4b08      	ldr	r3, [pc, #32]	; (a6dc <_wdt_init+0x88>)
    a6ba:	4798      	blx	r3
	}

	return ERR_NONE;
    a6bc:	2300      	movs	r3, #0
}
    a6be:	4618      	mov	r0, r3
    a6c0:	3708      	adds	r7, #8
    a6c2:	46bd      	mov	sp, r7
    a6c4:	bd80      	pop	{r7, pc}
    a6c6:	bf00      	nop
    a6c8:	000135b8 	.word	0x000135b8
    a6cc:	00002dc9 	.word	0x00002dc9
    a6d0:	0000a5e5 	.word	0x0000a5e5
    a6d4:	0000a57d 	.word	0x0000a57d
    a6d8:	0000a5b9 	.word	0x0000a5b9
    a6dc:	0000a619 	.word	0x0000a619

0000a6e0 <hri_port_set_DIR_reg>:
{
    a6e0:	b480      	push	{r7}
    a6e2:	b085      	sub	sp, #20
    a6e4:	af00      	add	r7, sp, #0
    a6e6:	60f8      	str	r0, [r7, #12]
    a6e8:	460b      	mov	r3, r1
    a6ea:	607a      	str	r2, [r7, #4]
    a6ec:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    a6ee:	7afb      	ldrb	r3, [r7, #11]
    a6f0:	68fa      	ldr	r2, [r7, #12]
    a6f2:	01db      	lsls	r3, r3, #7
    a6f4:	4413      	add	r3, r2
    a6f6:	3308      	adds	r3, #8
    a6f8:	687a      	ldr	r2, [r7, #4]
    a6fa:	601a      	str	r2, [r3, #0]
}
    a6fc:	bf00      	nop
    a6fe:	3714      	adds	r7, #20
    a700:	46bd      	mov	sp, r7
    a702:	f85d 7b04 	ldr.w	r7, [sp], #4
    a706:	4770      	bx	lr

0000a708 <hri_port_clear_DIR_reg>:
{
    a708:	b480      	push	{r7}
    a70a:	b085      	sub	sp, #20
    a70c:	af00      	add	r7, sp, #0
    a70e:	60f8      	str	r0, [r7, #12]
    a710:	460b      	mov	r3, r1
    a712:	607a      	str	r2, [r7, #4]
    a714:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    a716:	7afb      	ldrb	r3, [r7, #11]
    a718:	68fa      	ldr	r2, [r7, #12]
    a71a:	01db      	lsls	r3, r3, #7
    a71c:	4413      	add	r3, r2
    a71e:	3304      	adds	r3, #4
    a720:	687a      	ldr	r2, [r7, #4]
    a722:	601a      	str	r2, [r3, #0]
}
    a724:	bf00      	nop
    a726:	3714      	adds	r7, #20
    a728:	46bd      	mov	sp, r7
    a72a:	f85d 7b04 	ldr.w	r7, [sp], #4
    a72e:	4770      	bx	lr

0000a730 <hri_port_set_OUT_reg>:
{
    a730:	b480      	push	{r7}
    a732:	b085      	sub	sp, #20
    a734:	af00      	add	r7, sp, #0
    a736:	60f8      	str	r0, [r7, #12]
    a738:	460b      	mov	r3, r1
    a73a:	607a      	str	r2, [r7, #4]
    a73c:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    a73e:	7afb      	ldrb	r3, [r7, #11]
    a740:	68fa      	ldr	r2, [r7, #12]
    a742:	01db      	lsls	r3, r3, #7
    a744:	4413      	add	r3, r2
    a746:	3318      	adds	r3, #24
    a748:	687a      	ldr	r2, [r7, #4]
    a74a:	601a      	str	r2, [r3, #0]
}
    a74c:	bf00      	nop
    a74e:	3714      	adds	r7, #20
    a750:	46bd      	mov	sp, r7
    a752:	f85d 7b04 	ldr.w	r7, [sp], #4
    a756:	4770      	bx	lr

0000a758 <hri_port_clear_OUT_reg>:
{
    a758:	b480      	push	{r7}
    a75a:	b085      	sub	sp, #20
    a75c:	af00      	add	r7, sp, #0
    a75e:	60f8      	str	r0, [r7, #12]
    a760:	460b      	mov	r3, r1
    a762:	607a      	str	r2, [r7, #4]
    a764:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    a766:	7afb      	ldrb	r3, [r7, #11]
    a768:	68fa      	ldr	r2, [r7, #12]
    a76a:	01db      	lsls	r3, r3, #7
    a76c:	4413      	add	r3, r2
    a76e:	3314      	adds	r3, #20
    a770:	687a      	ldr	r2, [r7, #4]
    a772:	601a      	str	r2, [r3, #0]
}
    a774:	bf00      	nop
    a776:	3714      	adds	r7, #20
    a778:	46bd      	mov	sp, r7
    a77a:	f85d 7b04 	ldr.w	r7, [sp], #4
    a77e:	4770      	bx	lr

0000a780 <hri_port_write_PMUX_PMUXE_bf>:
{
    a780:	b480      	push	{r7}
    a782:	b085      	sub	sp, #20
    a784:	af00      	add	r7, sp, #0
    a786:	6078      	str	r0, [r7, #4]
    a788:	4608      	mov	r0, r1
    a78a:	4611      	mov	r1, r2
    a78c:	461a      	mov	r2, r3
    a78e:	4603      	mov	r3, r0
    a790:	70fb      	strb	r3, [r7, #3]
    a792:	460b      	mov	r3, r1
    a794:	70bb      	strb	r3, [r7, #2]
    a796:	4613      	mov	r3, r2
    a798:	707b      	strb	r3, [r7, #1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    a79a:	78fa      	ldrb	r2, [r7, #3]
    a79c:	78bb      	ldrb	r3, [r7, #2]
    a79e:	6879      	ldr	r1, [r7, #4]
    a7a0:	01d2      	lsls	r2, r2, #7
    a7a2:	440a      	add	r2, r1
    a7a4:	4413      	add	r3, r2
    a7a6:	3330      	adds	r3, #48	; 0x30
    a7a8:	781b      	ldrb	r3, [r3, #0]
    a7aa:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    a7ac:	7bfb      	ldrb	r3, [r7, #15]
    a7ae:	f023 030f 	bic.w	r3, r3, #15
    a7b2:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXE(data);
    a7b4:	787b      	ldrb	r3, [r7, #1]
    a7b6:	f003 030f 	and.w	r3, r3, #15
    a7ba:	b2da      	uxtb	r2, r3
    a7bc:	7bfb      	ldrb	r3, [r7, #15]
    a7be:	4313      	orrs	r3, r2
    a7c0:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    a7c2:	78fa      	ldrb	r2, [r7, #3]
    a7c4:	78bb      	ldrb	r3, [r7, #2]
    a7c6:	6879      	ldr	r1, [r7, #4]
    a7c8:	01d2      	lsls	r2, r2, #7
    a7ca:	440a      	add	r2, r1
    a7cc:	4413      	add	r3, r2
    a7ce:	3330      	adds	r3, #48	; 0x30
    a7d0:	7bfa      	ldrb	r2, [r7, #15]
    a7d2:	701a      	strb	r2, [r3, #0]
}
    a7d4:	bf00      	nop
    a7d6:	3714      	adds	r7, #20
    a7d8:	46bd      	mov	sp, r7
    a7da:	f85d 7b04 	ldr.w	r7, [sp], #4
    a7de:	4770      	bx	lr

0000a7e0 <hri_port_write_PMUX_PMUXO_bf>:
{
    a7e0:	b480      	push	{r7}
    a7e2:	b085      	sub	sp, #20
    a7e4:	af00      	add	r7, sp, #0
    a7e6:	6078      	str	r0, [r7, #4]
    a7e8:	4608      	mov	r0, r1
    a7ea:	4611      	mov	r1, r2
    a7ec:	461a      	mov	r2, r3
    a7ee:	4603      	mov	r3, r0
    a7f0:	70fb      	strb	r3, [r7, #3]
    a7f2:	460b      	mov	r3, r1
    a7f4:	70bb      	strb	r3, [r7, #2]
    a7f6:	4613      	mov	r3, r2
    a7f8:	707b      	strb	r3, [r7, #1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    a7fa:	78fa      	ldrb	r2, [r7, #3]
    a7fc:	78bb      	ldrb	r3, [r7, #2]
    a7fe:	6879      	ldr	r1, [r7, #4]
    a800:	01d2      	lsls	r2, r2, #7
    a802:	440a      	add	r2, r1
    a804:	4413      	add	r3, r2
    a806:	3330      	adds	r3, #48	; 0x30
    a808:	781b      	ldrb	r3, [r3, #0]
    a80a:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    a80c:	7bfb      	ldrb	r3, [r7, #15]
    a80e:	f003 030f 	and.w	r3, r3, #15
    a812:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXO(data);
    a814:	787b      	ldrb	r3, [r7, #1]
    a816:	011b      	lsls	r3, r3, #4
    a818:	b2da      	uxtb	r2, r3
    a81a:	7bfb      	ldrb	r3, [r7, #15]
    a81c:	4313      	orrs	r3, r2
    a81e:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    a820:	78fa      	ldrb	r2, [r7, #3]
    a822:	78bb      	ldrb	r3, [r7, #2]
    a824:	6879      	ldr	r1, [r7, #4]
    a826:	01d2      	lsls	r2, r2, #7
    a828:	440a      	add	r2, r1
    a82a:	4413      	add	r3, r2
    a82c:	3330      	adds	r3, #48	; 0x30
    a82e:	7bfa      	ldrb	r2, [r7, #15]
    a830:	701a      	strb	r2, [r3, #0]
}
    a832:	bf00      	nop
    a834:	3714      	adds	r7, #20
    a836:	46bd      	mov	sp, r7
    a838:	f85d 7b04 	ldr.w	r7, [sp], #4
    a83c:	4770      	bx	lr

0000a83e <hri_port_write_PINCFG_PMUXEN_bit>:
{
    a83e:	b480      	push	{r7}
    a840:	b085      	sub	sp, #20
    a842:	af00      	add	r7, sp, #0
    a844:	6078      	str	r0, [r7, #4]
    a846:	4608      	mov	r0, r1
    a848:	4611      	mov	r1, r2
    a84a:	461a      	mov	r2, r3
    a84c:	4603      	mov	r3, r0
    a84e:	70fb      	strb	r3, [r7, #3]
    a850:	460b      	mov	r3, r1
    a852:	70bb      	strb	r3, [r7, #2]
    a854:	4613      	mov	r3, r2
    a856:	707b      	strb	r3, [r7, #1]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    a858:	78fa      	ldrb	r2, [r7, #3]
    a85a:	78bb      	ldrb	r3, [r7, #2]
    a85c:	6879      	ldr	r1, [r7, #4]
    a85e:	01d2      	lsls	r2, r2, #7
    a860:	440a      	add	r2, r1
    a862:	4413      	add	r3, r2
    a864:	3340      	adds	r3, #64	; 0x40
    a866:	781b      	ldrb	r3, [r3, #0]
    a868:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PINCFG_PMUXEN;
    a86a:	7bfb      	ldrb	r3, [r7, #15]
    a86c:	f023 0301 	bic.w	r3, r3, #1
    a870:	73fb      	strb	r3, [r7, #15]
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    a872:	787a      	ldrb	r2, [r7, #1]
    a874:	7bfb      	ldrb	r3, [r7, #15]
    a876:	4313      	orrs	r3, r2
    a878:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    a87a:	78fa      	ldrb	r2, [r7, #3]
    a87c:	78bb      	ldrb	r3, [r7, #2]
    a87e:	6879      	ldr	r1, [r7, #4]
    a880:	01d2      	lsls	r2, r2, #7
    a882:	440a      	add	r2, r1
    a884:	4413      	add	r3, r2
    a886:	3340      	adds	r3, #64	; 0x40
    a888:	7bfa      	ldrb	r2, [r7, #15]
    a88a:	701a      	strb	r2, [r3, #0]
}
    a88c:	bf00      	nop
    a88e:	3714      	adds	r7, #20
    a890:	46bd      	mov	sp, r7
    a892:	f85d 7b04 	ldr.w	r7, [sp], #4
    a896:	4770      	bx	lr

0000a898 <hri_port_write_WRCONFIG_reg>:
{
    a898:	b480      	push	{r7}
    a89a:	b085      	sub	sp, #20
    a89c:	af00      	add	r7, sp, #0
    a89e:	60f8      	str	r0, [r7, #12]
    a8a0:	460b      	mov	r3, r1
    a8a2:	607a      	str	r2, [r7, #4]
    a8a4:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    a8a6:	7afb      	ldrb	r3, [r7, #11]
    a8a8:	68fa      	ldr	r2, [r7, #12]
    a8aa:	01db      	lsls	r3, r3, #7
    a8ac:	4413      	add	r3, r2
    a8ae:	3328      	adds	r3, #40	; 0x28
    a8b0:	687a      	ldr	r2, [r7, #4]
    a8b2:	601a      	str	r2, [r3, #0]
}
    a8b4:	bf00      	nop
    a8b6:	3714      	adds	r7, #20
    a8b8:	46bd      	mov	sp, r7
    a8ba:	f85d 7b04 	ldr.w	r7, [sp], #4
    a8be:	4770      	bx	lr

0000a8c0 <_gpio_set_direction>:
{
    a8c0:	b580      	push	{r7, lr}
    a8c2:	b082      	sub	sp, #8
    a8c4:	af00      	add	r7, sp, #0
    a8c6:	4603      	mov	r3, r0
    a8c8:	6039      	str	r1, [r7, #0]
    a8ca:	71fb      	strb	r3, [r7, #7]
    a8cc:	4613      	mov	r3, r2
    a8ce:	71bb      	strb	r3, [r7, #6]
	switch (direction) {
    a8d0:	79bb      	ldrb	r3, [r7, #6]
    a8d2:	2b01      	cmp	r3, #1
    a8d4:	d01c      	beq.n	a910 <_gpio_set_direction+0x50>
    a8d6:	2b02      	cmp	r3, #2
    a8d8:	d037      	beq.n	a94a <_gpio_set_direction+0x8a>
    a8da:	2b00      	cmp	r3, #0
    a8dc:	d14e      	bne.n	a97c <_gpio_set_direction+0xbc>
		hri_port_clear_DIR_reg(PORT, port, mask);
    a8de:	79fb      	ldrb	r3, [r7, #7]
    a8e0:	683a      	ldr	r2, [r7, #0]
    a8e2:	4619      	mov	r1, r3
    a8e4:	482a      	ldr	r0, [pc, #168]	; (a990 <_gpio_set_direction+0xd0>)
    a8e6:	4b2b      	ldr	r3, [pc, #172]	; (a994 <_gpio_set_direction+0xd4>)
    a8e8:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    a8ea:	683b      	ldr	r3, [r7, #0]
    a8ec:	b29b      	uxth	r3, r3
    a8ee:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
    a8f2:	79fb      	ldrb	r3, [r7, #7]
    a8f4:	4619      	mov	r1, r3
    a8f6:	4826      	ldr	r0, [pc, #152]	; (a990 <_gpio_set_direction+0xd0>)
    a8f8:	4b27      	ldr	r3, [pc, #156]	; (a998 <_gpio_set_direction+0xd8>)
    a8fa:	4798      	blx	r3
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    a8fc:	683b      	ldr	r3, [r7, #0]
    a8fe:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
    a900:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
    a904:	79fb      	ldrb	r3, [r7, #7]
    a906:	4619      	mov	r1, r3
    a908:	4821      	ldr	r0, [pc, #132]	; (a990 <_gpio_set_direction+0xd0>)
    a90a:	4b23      	ldr	r3, [pc, #140]	; (a998 <_gpio_set_direction+0xd8>)
    a90c:	4798      	blx	r3
		break;
    a90e:	e03a      	b.n	a986 <_gpio_set_direction+0xc6>
		hri_port_clear_DIR_reg(PORT, port, mask);
    a910:	79fb      	ldrb	r3, [r7, #7]
    a912:	683a      	ldr	r2, [r7, #0]
    a914:	4619      	mov	r1, r3
    a916:	481e      	ldr	r0, [pc, #120]	; (a990 <_gpio_set_direction+0xd0>)
    a918:	4b1e      	ldr	r3, [pc, #120]	; (a994 <_gpio_set_direction+0xd4>)
    a91a:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN | (mask & 0xffff));
    a91c:	683b      	ldr	r3, [r7, #0]
    a91e:	b29b      	uxth	r3, r3
    a920:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
    a924:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    a928:	79f9      	ldrb	r1, [r7, #7]
    a92a:	461a      	mov	r2, r3
    a92c:	4818      	ldr	r0, [pc, #96]	; (a990 <_gpio_set_direction+0xd0>)
    a92e:	4b1a      	ldr	r3, [pc, #104]	; (a998 <_gpio_set_direction+0xd8>)
    a930:	4798      	blx	r3
		                                | ((mask & 0xffff0000) >> 16));
    a932:	683b      	ldr	r3, [r7, #0]
    a934:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(PORT,
    a936:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
    a93a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    a93e:	79f9      	ldrb	r1, [r7, #7]
    a940:	461a      	mov	r2, r3
    a942:	4813      	ldr	r0, [pc, #76]	; (a990 <_gpio_set_direction+0xd0>)
    a944:	4b14      	ldr	r3, [pc, #80]	; (a998 <_gpio_set_direction+0xd8>)
    a946:	4798      	blx	r3
		break;
    a948:	e01d      	b.n	a986 <_gpio_set_direction+0xc6>
		hri_port_set_DIR_reg(PORT, port, mask);
    a94a:	79fb      	ldrb	r3, [r7, #7]
    a94c:	683a      	ldr	r2, [r7, #0]
    a94e:	4619      	mov	r1, r3
    a950:	480f      	ldr	r0, [pc, #60]	; (a990 <_gpio_set_direction+0xd0>)
    a952:	4b12      	ldr	r3, [pc, #72]	; (a99c <_gpio_set_direction+0xdc>)
    a954:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    a956:	683b      	ldr	r3, [r7, #0]
    a958:	b29b      	uxth	r3, r3
    a95a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
    a95e:	79fb      	ldrb	r3, [r7, #7]
    a960:	4619      	mov	r1, r3
    a962:	480b      	ldr	r0, [pc, #44]	; (a990 <_gpio_set_direction+0xd0>)
    a964:	4b0c      	ldr	r3, [pc, #48]	; (a998 <_gpio_set_direction+0xd8>)
    a966:	4798      	blx	r3
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    a968:	683b      	ldr	r3, [r7, #0]
    a96a:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
    a96c:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
    a970:	79fb      	ldrb	r3, [r7, #7]
    a972:	4619      	mov	r1, r3
    a974:	4806      	ldr	r0, [pc, #24]	; (a990 <_gpio_set_direction+0xd0>)
    a976:	4b08      	ldr	r3, [pc, #32]	; (a998 <_gpio_set_direction+0xd8>)
    a978:	4798      	blx	r3
		break;
    a97a:	e004      	b.n	a986 <_gpio_set_direction+0xc6>
		ASSERT(false);
    a97c:	2246      	movs	r2, #70	; 0x46
    a97e:	4908      	ldr	r1, [pc, #32]	; (a9a0 <_gpio_set_direction+0xe0>)
    a980:	2000      	movs	r0, #0
    a982:	4b08      	ldr	r3, [pc, #32]	; (a9a4 <_gpio_set_direction+0xe4>)
    a984:	4798      	blx	r3
}
    a986:	bf00      	nop
    a988:	3708      	adds	r7, #8
    a98a:	46bd      	mov	sp, r7
    a98c:	bd80      	pop	{r7, pc}
    a98e:	bf00      	nop
    a990:	41008000 	.word	0x41008000
    a994:	0000a709 	.word	0x0000a709
    a998:	0000a899 	.word	0x0000a899
    a99c:	0000a6e1 	.word	0x0000a6e1
    a9a0:	000135d0 	.word	0x000135d0
    a9a4:	00002dc9 	.word	0x00002dc9

0000a9a8 <_gpio_set_level>:
{
    a9a8:	b580      	push	{r7, lr}
    a9aa:	b082      	sub	sp, #8
    a9ac:	af00      	add	r7, sp, #0
    a9ae:	4603      	mov	r3, r0
    a9b0:	6039      	str	r1, [r7, #0]
    a9b2:	71fb      	strb	r3, [r7, #7]
    a9b4:	4613      	mov	r3, r2
    a9b6:	71bb      	strb	r3, [r7, #6]
	if (level) {
    a9b8:	79bb      	ldrb	r3, [r7, #6]
    a9ba:	2b00      	cmp	r3, #0
    a9bc:	d006      	beq.n	a9cc <_gpio_set_level+0x24>
		hri_port_set_OUT_reg(PORT, port, mask);
    a9be:	79fb      	ldrb	r3, [r7, #7]
    a9c0:	683a      	ldr	r2, [r7, #0]
    a9c2:	4619      	mov	r1, r3
    a9c4:	4806      	ldr	r0, [pc, #24]	; (a9e0 <_gpio_set_level+0x38>)
    a9c6:	4b07      	ldr	r3, [pc, #28]	; (a9e4 <_gpio_set_level+0x3c>)
    a9c8:	4798      	blx	r3
}
    a9ca:	e005      	b.n	a9d8 <_gpio_set_level+0x30>
		hri_port_clear_OUT_reg(PORT, port, mask);
    a9cc:	79fb      	ldrb	r3, [r7, #7]
    a9ce:	683a      	ldr	r2, [r7, #0]
    a9d0:	4619      	mov	r1, r3
    a9d2:	4803      	ldr	r0, [pc, #12]	; (a9e0 <_gpio_set_level+0x38>)
    a9d4:	4b04      	ldr	r3, [pc, #16]	; (a9e8 <_gpio_set_level+0x40>)
    a9d6:	4798      	blx	r3
}
    a9d8:	bf00      	nop
    a9da:	3708      	adds	r7, #8
    a9dc:	46bd      	mov	sp, r7
    a9de:	bd80      	pop	{r7, pc}
    a9e0:	41008000 	.word	0x41008000
    a9e4:	0000a731 	.word	0x0000a731
    a9e8:	0000a759 	.word	0x0000a759

0000a9ec <_gpio_set_pin_function>:
{
    a9ec:	b590      	push	{r4, r7, lr}
    a9ee:	b085      	sub	sp, #20
    a9f0:	af00      	add	r7, sp, #0
    a9f2:	6078      	str	r0, [r7, #4]
    a9f4:	6039      	str	r1, [r7, #0]
	uint8_t port = GPIO_PORT(gpio);
    a9f6:	687b      	ldr	r3, [r7, #4]
    a9f8:	095b      	lsrs	r3, r3, #5
    a9fa:	73fb      	strb	r3, [r7, #15]
	uint8_t pin  = GPIO_PIN(gpio);
    a9fc:	687b      	ldr	r3, [r7, #4]
    a9fe:	b2db      	uxtb	r3, r3
    aa00:	f003 031f 	and.w	r3, r3, #31
    aa04:	73bb      	strb	r3, [r7, #14]
	if (function == GPIO_PIN_FUNCTION_OFF) {
    aa06:	683b      	ldr	r3, [r7, #0]
    aa08:	f1b3 3fff 	cmp.w	r3, #4294967295
    aa0c:	d106      	bne.n	aa1c <_gpio_set_pin_function+0x30>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, false);
    aa0e:	7bba      	ldrb	r2, [r7, #14]
    aa10:	7bf9      	ldrb	r1, [r7, #15]
    aa12:	2300      	movs	r3, #0
    aa14:	4812      	ldr	r0, [pc, #72]	; (aa60 <_gpio_set_pin_function+0x74>)
    aa16:	4c13      	ldr	r4, [pc, #76]	; (aa64 <_gpio_set_pin_function+0x78>)
    aa18:	47a0      	blx	r4
}
    aa1a:	e01d      	b.n	aa58 <_gpio_set_pin_function+0x6c>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, true);
    aa1c:	7bba      	ldrb	r2, [r7, #14]
    aa1e:	7bf9      	ldrb	r1, [r7, #15]
    aa20:	2301      	movs	r3, #1
    aa22:	480f      	ldr	r0, [pc, #60]	; (aa60 <_gpio_set_pin_function+0x74>)
    aa24:	4c0f      	ldr	r4, [pc, #60]	; (aa64 <_gpio_set_pin_function+0x78>)
    aa26:	47a0      	blx	r4
		if (pin & 1) {
    aa28:	7bbb      	ldrb	r3, [r7, #14]
    aa2a:	f003 0301 	and.w	r3, r3, #1
    aa2e:	2b00      	cmp	r3, #0
    aa30:	d009      	beq.n	aa46 <_gpio_set_pin_function+0x5a>
			hri_port_write_PMUX_PMUXO_bf(PORT, port, pin >> 1, function & 0xffff);
    aa32:	7bbb      	ldrb	r3, [r7, #14]
    aa34:	085b      	lsrs	r3, r3, #1
    aa36:	b2da      	uxtb	r2, r3
    aa38:	683b      	ldr	r3, [r7, #0]
    aa3a:	b2db      	uxtb	r3, r3
    aa3c:	7bf9      	ldrb	r1, [r7, #15]
    aa3e:	4808      	ldr	r0, [pc, #32]	; (aa60 <_gpio_set_pin_function+0x74>)
    aa40:	4c09      	ldr	r4, [pc, #36]	; (aa68 <_gpio_set_pin_function+0x7c>)
    aa42:	47a0      	blx	r4
}
    aa44:	e008      	b.n	aa58 <_gpio_set_pin_function+0x6c>
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
    aa46:	7bbb      	ldrb	r3, [r7, #14]
    aa48:	085b      	lsrs	r3, r3, #1
    aa4a:	b2da      	uxtb	r2, r3
    aa4c:	683b      	ldr	r3, [r7, #0]
    aa4e:	b2db      	uxtb	r3, r3
    aa50:	7bf9      	ldrb	r1, [r7, #15]
    aa52:	4803      	ldr	r0, [pc, #12]	; (aa60 <_gpio_set_pin_function+0x74>)
    aa54:	4c05      	ldr	r4, [pc, #20]	; (aa6c <_gpio_set_pin_function+0x80>)
    aa56:	47a0      	blx	r4
}
    aa58:	bf00      	nop
    aa5a:	3714      	adds	r7, #20
    aa5c:	46bd      	mov	sp, r7
    aa5e:	bd90      	pop	{r4, r7, pc}
    aa60:	41008000 	.word	0x41008000
    aa64:	0000a83f 	.word	0x0000a83f
    aa68:	0000a7e1 	.word	0x0000a7e1
    aa6c:	0000a781 	.word	0x0000a781

0000aa70 <gpio_set_pin_function>:
{
    aa70:	b580      	push	{r7, lr}
    aa72:	b082      	sub	sp, #8
    aa74:	af00      	add	r7, sp, #0
    aa76:	6078      	str	r0, [r7, #4]
    aa78:	6039      	str	r1, [r7, #0]
	_gpio_set_pin_function(pin, function);
    aa7a:	6839      	ldr	r1, [r7, #0]
    aa7c:	6878      	ldr	r0, [r7, #4]
    aa7e:	4b03      	ldr	r3, [pc, #12]	; (aa8c <gpio_set_pin_function+0x1c>)
    aa80:	4798      	blx	r3
}
    aa82:	bf00      	nop
    aa84:	3708      	adds	r7, #8
    aa86:	46bd      	mov	sp, r7
    aa88:	bd80      	pop	{r7, pc}
    aa8a:	bf00      	nop
    aa8c:	0000a9ed 	.word	0x0000a9ed

0000aa90 <gpio_set_pin_direction>:
{
    aa90:	b580      	push	{r7, lr}
    aa92:	b082      	sub	sp, #8
    aa94:	af00      	add	r7, sp, #0
    aa96:	4603      	mov	r3, r0
    aa98:	460a      	mov	r2, r1
    aa9a:	71fb      	strb	r3, [r7, #7]
    aa9c:	4613      	mov	r3, r2
    aa9e:	71bb      	strb	r3, [r7, #6]
	_gpio_set_direction((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), direction);
    aaa0:	79fb      	ldrb	r3, [r7, #7]
    aaa2:	095b      	lsrs	r3, r3, #5
    aaa4:	b2d8      	uxtb	r0, r3
    aaa6:	79fb      	ldrb	r3, [r7, #7]
    aaa8:	f003 031f 	and.w	r3, r3, #31
    aaac:	2201      	movs	r2, #1
    aaae:	fa02 f303 	lsl.w	r3, r2, r3
    aab2:	79ba      	ldrb	r2, [r7, #6]
    aab4:	4619      	mov	r1, r3
    aab6:	4b03      	ldr	r3, [pc, #12]	; (aac4 <gpio_set_pin_direction+0x34>)
    aab8:	4798      	blx	r3
}
    aaba:	bf00      	nop
    aabc:	3708      	adds	r7, #8
    aabe:	46bd      	mov	sp, r7
    aac0:	bd80      	pop	{r7, pc}
    aac2:	bf00      	nop
    aac4:	0000a8c1 	.word	0x0000a8c1

0000aac8 <gpio_set_pin_level>:
{
    aac8:	b580      	push	{r7, lr}
    aaca:	b082      	sub	sp, #8
    aacc:	af00      	add	r7, sp, #0
    aace:	4603      	mov	r3, r0
    aad0:	460a      	mov	r2, r1
    aad2:	71fb      	strb	r3, [r7, #7]
    aad4:	4613      	mov	r3, r2
    aad6:	71bb      	strb	r3, [r7, #6]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
    aad8:	79fb      	ldrb	r3, [r7, #7]
    aada:	095b      	lsrs	r3, r3, #5
    aadc:	b2d8      	uxtb	r0, r3
    aade:	79fb      	ldrb	r3, [r7, #7]
    aae0:	f003 031f 	and.w	r3, r3, #31
    aae4:	2201      	movs	r2, #1
    aae6:	fa02 f303 	lsl.w	r3, r2, r3
    aaea:	79ba      	ldrb	r2, [r7, #6]
    aaec:	4619      	mov	r1, r3
    aaee:	4b03      	ldr	r3, [pc, #12]	; (aafc <gpio_set_pin_level+0x34>)
    aaf0:	4798      	blx	r3
}
    aaf2:	bf00      	nop
    aaf4:	3708      	adds	r7, #8
    aaf6:	46bd      	mov	sp, r7
    aaf8:	bd80      	pop	{r7, pc}
    aafa:	bf00      	nop
    aafc:	0000a9a9 	.word	0x0000a9a9

0000ab00 <QSPI_N25Q256_exit_xip>:
static struct n25q256a SPI_NOR_FLASH_0_descr;

struct spi_nor_flash *SPI_NOR_FLASH_0;

void QSPI_N25Q256_exit_xip(void)
{
    ab00:	b580      	push	{r7, lr}
    ab02:	b082      	sub	sp, #8
    ab04:	af00      	add	r7, sp, #0
	gpio_set_pin_function(FLASH_IO0, 0);
    ab06:	2100      	movs	r1, #0
    ab08:	2008      	movs	r0, #8
    ab0a:	4b24      	ldr	r3, [pc, #144]	; (ab9c <QSPI_N25Q256_exit_xip+0x9c>)
    ab0c:	4798      	blx	r3
	gpio_set_pin_function(FLASH_CS, 0);
    ab0e:	2100      	movs	r1, #0
    ab10:	202b      	movs	r0, #43	; 0x2b
    ab12:	4b22      	ldr	r3, [pc, #136]	; (ab9c <QSPI_N25Q256_exit_xip+0x9c>)
    ab14:	4798      	blx	r3
	gpio_set_pin_function(FLASH_CLK, 0);
    ab16:	2100      	movs	r1, #0
    ab18:	202a      	movs	r0, #42	; 0x2a
    ab1a:	4b20      	ldr	r3, [pc, #128]	; (ab9c <QSPI_N25Q256_exit_xip+0x9c>)
    ab1c:	4798      	blx	r3

	gpio_set_pin_direction(FLASH_IO0, GPIO_DIRECTION_OUT);
    ab1e:	2102      	movs	r1, #2
    ab20:	2008      	movs	r0, #8
    ab22:	4b1f      	ldr	r3, [pc, #124]	; (aba0 <QSPI_N25Q256_exit_xip+0xa0>)
    ab24:	4798      	blx	r3
	gpio_set_pin_direction(FLASH_CS, GPIO_DIRECTION_OUT);
    ab26:	2102      	movs	r1, #2
    ab28:	202b      	movs	r0, #43	; 0x2b
    ab2a:	4b1d      	ldr	r3, [pc, #116]	; (aba0 <QSPI_N25Q256_exit_xip+0xa0>)
    ab2c:	4798      	blx	r3
	gpio_set_pin_direction(FLASH_CLK, GPIO_DIRECTION_OUT);
    ab2e:	2102      	movs	r1, #2
    ab30:	202a      	movs	r0, #42	; 0x2a
    ab32:	4b1b      	ldr	r3, [pc, #108]	; (aba0 <QSPI_N25Q256_exit_xip+0xa0>)
    ab34:	4798      	blx	r3

	gpio_set_pin_level(FLASH_IO0, true);
    ab36:	2101      	movs	r1, #1
    ab38:	2008      	movs	r0, #8
    ab3a:	4b1a      	ldr	r3, [pc, #104]	; (aba4 <QSPI_N25Q256_exit_xip+0xa4>)
    ab3c:	4798      	blx	r3
	gpio_set_pin_level(FLASH_CS, false);
    ab3e:	2100      	movs	r1, #0
    ab40:	202b      	movs	r0, #43	; 0x2b
    ab42:	4b18      	ldr	r3, [pc, #96]	; (aba4 <QSPI_N25Q256_exit_xip+0xa4>)
    ab44:	4798      	blx	r3
	gpio_set_pin_level(FLASH_CLK, false);
    ab46:	2100      	movs	r1, #0
    ab48:	202a      	movs	r0, #42	; 0x2a
    ab4a:	4b16      	ldr	r3, [pc, #88]	; (aba4 <QSPI_N25Q256_exit_xip+0xa4>)
    ab4c:	4798      	blx	r3

	delay_us(1);
    ab4e:	2001      	movs	r0, #1
    ab50:	4b15      	ldr	r3, [pc, #84]	; (aba8 <QSPI_N25Q256_exit_xip+0xa8>)
    ab52:	4798      	blx	r3

	for (int i = 0; i < 7; i++) {
    ab54:	2300      	movs	r3, #0
    ab56:	607b      	str	r3, [r7, #4]
    ab58:	e010      	b.n	ab7c <QSPI_N25Q256_exit_xip+0x7c>
		gpio_set_pin_level(FLASH_CLK, true);
    ab5a:	2101      	movs	r1, #1
    ab5c:	202a      	movs	r0, #42	; 0x2a
    ab5e:	4b11      	ldr	r3, [pc, #68]	; (aba4 <QSPI_N25Q256_exit_xip+0xa4>)
    ab60:	4798      	blx	r3
		delay_us(1);
    ab62:	2001      	movs	r0, #1
    ab64:	4b10      	ldr	r3, [pc, #64]	; (aba8 <QSPI_N25Q256_exit_xip+0xa8>)
    ab66:	4798      	blx	r3
		gpio_set_pin_level(FLASH_CLK, false);
    ab68:	2100      	movs	r1, #0
    ab6a:	202a      	movs	r0, #42	; 0x2a
    ab6c:	4b0d      	ldr	r3, [pc, #52]	; (aba4 <QSPI_N25Q256_exit_xip+0xa4>)
    ab6e:	4798      	blx	r3
		delay_us(1);
    ab70:	2001      	movs	r0, #1
    ab72:	4b0d      	ldr	r3, [pc, #52]	; (aba8 <QSPI_N25Q256_exit_xip+0xa8>)
    ab74:	4798      	blx	r3
	for (int i = 0; i < 7; i++) {
    ab76:	687b      	ldr	r3, [r7, #4]
    ab78:	3301      	adds	r3, #1
    ab7a:	607b      	str	r3, [r7, #4]
    ab7c:	687b      	ldr	r3, [r7, #4]
    ab7e:	2b06      	cmp	r3, #6
    ab80:	ddeb      	ble.n	ab5a <QSPI_N25Q256_exit_xip+0x5a>
	}

	gpio_set_pin_level(FLASH_CS, true);
    ab82:	2101      	movs	r1, #1
    ab84:	202b      	movs	r0, #43	; 0x2b
    ab86:	4b07      	ldr	r3, [pc, #28]	; (aba4 <QSPI_N25Q256_exit_xip+0xa4>)
    ab88:	4798      	blx	r3
	delay_us(1);
    ab8a:	2001      	movs	r0, #1
    ab8c:	4b06      	ldr	r3, [pc, #24]	; (aba8 <QSPI_N25Q256_exit_xip+0xa8>)
    ab8e:	4798      	blx	r3
	QSPI_N25Q256_PORT_init();
    ab90:	4b06      	ldr	r3, [pc, #24]	; (abac <QSPI_N25Q256_exit_xip+0xac>)
    ab92:	4798      	blx	r3
}
    ab94:	bf00      	nop
    ab96:	3708      	adds	r7, #8
    ab98:	46bd      	mov	sp, r7
    ab9a:	bd80      	pop	{r7, pc}
    ab9c:	0000aa71 	.word	0x0000aa71
    aba0:	0000aa91 	.word	0x0000aa91
    aba4:	0000aac9 	.word	0x0000aac9
    aba8:	00001d15 	.word	0x00001d15
    abac:	00000ed5 	.word	0x00000ed5

0000abb0 <spi_nor_flash_init>:

/**
 * \brief Initialize Temperature Sensors
 */
void spi_nor_flash_init(void)
{
    abb0:	b598      	push	{r3, r4, r7, lr}
    abb2:	af00      	add	r7, sp, #0

	qspi_sync_enable(&QSPI_N25Q256);
    abb4:	4806      	ldr	r0, [pc, #24]	; (abd0 <spi_nor_flash_init+0x20>)
    abb6:	4b07      	ldr	r3, [pc, #28]	; (abd4 <spi_nor_flash_init+0x24>)
    abb8:	4798      	blx	r3
	SPI_NOR_FLASH_0 = n25q256a_construct(
    abba:	2300      	movs	r3, #0
    abbc:	4a06      	ldr	r2, [pc, #24]	; (abd8 <spi_nor_flash_init+0x28>)
    abbe:	4904      	ldr	r1, [pc, #16]	; (abd0 <spi_nor_flash_init+0x20>)
    abc0:	4806      	ldr	r0, [pc, #24]	; (abdc <spi_nor_flash_init+0x2c>)
    abc2:	4c07      	ldr	r4, [pc, #28]	; (abe0 <spi_nor_flash_init+0x30>)
    abc4:	47a0      	blx	r4
    abc6:	4602      	mov	r2, r0
    abc8:	4b06      	ldr	r3, [pc, #24]	; (abe4 <spi_nor_flash_init+0x34>)
    abca:	601a      	str	r2, [r3, #0]
	    &SPI_NOR_FLASH_0_descr.parent, &QSPI_N25Q256, QSPI_N25Q256_exit_xip, CONF_SPI_NOR_FLASH_0_QUAD_MODE);
}
    abcc:	bf00      	nop
    abce:	bd98      	pop	{r3, r4, r7, pc}
    abd0:	20001ba0 	.word	0x20001ba0
    abd4:	00002059 	.word	0x00002059
    abd8:	0000ab01 	.word	0x0000ab01
    abdc:	20001104 	.word	0x20001104
    abe0:	0000b01d 	.word	0x0000b01d
    abe4:	20001da0 	.word	0x20001da0

0000abe8 <cdc_device_acm_init>:

/**
 * \brief CDC ACM Init
 */
void cdc_device_acm_init(void)
{
    abe8:	b580      	push	{r7, lr}
    abea:	af00      	add	r7, sp, #0
	/* usb stack init */
	usbdc_init(ctrl_buffer);
    abec:	4805      	ldr	r0, [pc, #20]	; (ac04 <cdc_device_acm_init+0x1c>)
    abee:	4b06      	ldr	r3, [pc, #24]	; (ac08 <cdc_device_acm_init+0x20>)
    abf0:	4798      	blx	r3

	/* usbdc_register_funcion inside */
	cdcdf_acm_init();
    abf2:	4b06      	ldr	r3, [pc, #24]	; (ac0c <cdc_device_acm_init+0x24>)
    abf4:	4798      	blx	r3

	usbdc_start(single_desc);
    abf6:	4806      	ldr	r0, [pc, #24]	; (ac10 <cdc_device_acm_init+0x28>)
    abf8:	4b06      	ldr	r3, [pc, #24]	; (ac14 <cdc_device_acm_init+0x2c>)
    abfa:	4798      	blx	r3
	usbdc_attach();
    abfc:	4b06      	ldr	r3, [pc, #24]	; (ac18 <cdc_device_acm_init+0x30>)
    abfe:	4798      	blx	r3
}
    ac00:	bf00      	nop
    ac02:	bd80      	pop	{r7, pc}
    ac04:	20001154 	.word	0x20001154
    ac08:	0000c609 	.word	0x0000c609
    ac0c:	0000b9bd 	.word	0x0000b9bd
    ac10:	20000200 	.word	0x20000200
    ac14:	0000c6a5 	.word	0x0000c6a5
    ac18:	0000c6f5 	.word	0x0000c6f5

0000ac1c <usb_init>:
	while (1) {
	}
}

void usb_init(void)
{
    ac1c:	b580      	push	{r7, lr}
    ac1e:	af00      	add	r7, sp, #0

	cdc_device_acm_init();
    ac20:	4b01      	ldr	r3, [pc, #4]	; (ac28 <usb_init+0xc>)
    ac22:	4798      	blx	r3
}
    ac24:	bf00      	nop
    ac26:	bd80      	pop	{r7, pc}
    ac28:	0000abe9 	.word	0x0000abe9

0000ac2c <atomic_enter_critical>:

/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
    ac2c:	b480      	push	{r7}
    ac2e:	b085      	sub	sp, #20
    ac30:	af00      	add	r7, sp, #0
    ac32:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    ac34:	f3ef 8310 	mrs	r3, PRIMASK
    ac38:	60fb      	str	r3, [r7, #12]
  return(result);
    ac3a:	68fa      	ldr	r2, [r7, #12]
	*atomic = __get_PRIMASK();
    ac3c:	687b      	ldr	r3, [r7, #4]
    ac3e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
    ac40:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    ac42:	f3bf 8f5f 	dmb	sy
	__disable_irq();
	__DMB();
}
    ac46:	bf00      	nop
    ac48:	3714      	adds	r7, #20
    ac4a:	46bd      	mov	sp, r7
    ac4c:	f85d 7b04 	ldr.w	r7, [sp], #4
    ac50:	4770      	bx	lr

0000ac52 <atomic_leave_critical>:

/**
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
    ac52:	b480      	push	{r7}
    ac54:	b085      	sub	sp, #20
    ac56:	af00      	add	r7, sp, #0
    ac58:	6078      	str	r0, [r7, #4]
    ac5a:	f3bf 8f5f 	dmb	sy
	__DMB();
	__set_PRIMASK(*atomic);
    ac5e:	687b      	ldr	r3, [r7, #4]
    ac60:	681b      	ldr	r3, [r3, #0]
    ac62:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    ac64:	68fb      	ldr	r3, [r7, #12]
    ac66:	f383 8810 	msr	PRIMASK, r3
}
    ac6a:	bf00      	nop
    ac6c:	3714      	adds	r7, #20
    ac6e:	46bd      	mov	sp, r7
    ac70:	f85d 7b04 	ldr.w	r7, [sp], #4
    ac74:	4770      	bx	lr
	...

0000ac78 <n25q256a_xip_confirm>:
    n25q256a_enable_xip,
    n25q256a_disable_xip,
};

int32_t n25q256a_xip_confirm(const struct spi_nor_flash *const me, const bool on_off)
{
    ac78:	b580      	push	{r7, lr}
    ac7a:	b08c      	sub	sp, #48	; 0x30
    ac7c:	af00      	add	r7, sp, #0
    ac7e:	6078      	str	r0, [r7, #4]
    ac80:	460b      	mov	r3, r1
    ac82:	70fb      	strb	r3, [r7, #3]
	uint8_t                      dummy;
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    ac84:	687b      	ldr	r3, [r7, #4]
    ac86:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    ac88:	687b      	ldr	r3, [r7, #4]
    ac8a:	681b      	ldr	r3, [r3, #0]
    ac8c:	62bb      	str	r3, [r7, #40]	; 0x28
	struct _qspi_command         cmd
    ac8e:	f107 030c 	add.w	r3, r7, #12
    ac92:	2200      	movs	r2, #0
    ac94:	601a      	str	r2, [r3, #0]
    ac96:	605a      	str	r2, [r3, #4]
    ac98:	609a      	str	r2, [r3, #8]
    ac9a:	60da      	str	r2, [r3, #12]
    ac9c:	611a      	str	r2, [r3, #16]
    ac9e:	615a      	str	r2, [r3, #20]
	    = {.inst_frame.bits.width        = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1,
    aca0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    aca2:	7b1b      	ldrb	r3, [r3, #12]
    aca4:	2b00      	cmp	r3, #0
    aca6:	d001      	beq.n	acac <n25q256a_xip_confirm+0x34>
    aca8:	2206      	movs	r2, #6
    acaa:	e000      	b.n	acae <n25q256a_xip_confirm+0x36>
    acac:	2200      	movs	r2, #0
	struct _qspi_command         cmd
    acae:	7b3b      	ldrb	r3, [r7, #12]
    acb0:	f362 0302 	bfi	r3, r2, #0, #3
    acb4:	733b      	strb	r3, [r7, #12]
    acb6:	7b3b      	ldrb	r3, [r7, #12]
    acb8:	f043 0310 	orr.w	r3, r3, #16
    acbc:	733b      	strb	r3, [r7, #12]
    acbe:	7b3b      	ldrb	r3, [r7, #12]
    acc0:	f043 0320 	orr.w	r3, r3, #32
    acc4:	733b      	strb	r3, [r7, #12]
    acc6:	7b3b      	ldrb	r3, [r7, #12]
    acc8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    accc:	733b      	strb	r3, [r7, #12]
    acce:	7b3b      	ldrb	r3, [r7, #12]
    acd0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    acd4:	733b      	strb	r3, [r7, #12]
    acd6:	7b7b      	ldrb	r3, [r7, #13]
    acd8:	f043 0303 	orr.w	r3, r3, #3
    acdc:	737b      	strb	r3, [r7, #13]
    acde:	7b7b      	ldrb	r3, [r7, #13]
    ace0:	2201      	movs	r2, #1
    ace2:	f362 1305 	bfi	r3, r2, #4, #2
    ace6:	737b      	strb	r3, [r7, #13]
	       .inst_frame.bits.inst_en      = 1,
	       .inst_frame.bits.data_en      = 1,
	       .inst_frame.bits.addr_en      = 1,
	       .inst_frame.bits.opt_en       = 1,
	       .inst_frame.bits.opt_len      = QSPI_OPT_8BIT,
	       .inst_frame.bits.dummy_cycles = n25q->quad_mode ? 8 : 0,
    ace8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    acea:	7b1b      	ldrb	r3, [r3, #12]
    acec:	2b00      	cmp	r3, #0
    acee:	d001      	beq.n	acf4 <n25q256a_xip_confirm+0x7c>
    acf0:	2208      	movs	r2, #8
    acf2:	e000      	b.n	acf6 <n25q256a_xip_confirm+0x7e>
    acf4:	2200      	movs	r2, #0
	struct _qspi_command         cmd
    acf6:	7bbb      	ldrb	r3, [r7, #14]
    acf8:	f362 0304 	bfi	r3, r2, #0, #5
    acfc:	73bb      	strb	r3, [r7, #14]
    acfe:	230b      	movs	r3, #11
    ad00:	743b      	strb	r3, [r7, #16]
    ad02:	78fb      	ldrb	r3, [r7, #3]
    ad04:	2b00      	cmp	r3, #0
    ad06:	d001      	beq.n	ad0c <n25q256a_xip_confirm+0x94>
    ad08:	2300      	movs	r3, #0
    ad0a:	e000      	b.n	ad0e <n25q256a_xip_confirm+0x96>
    ad0c:	23ff      	movs	r3, #255	; 0xff
    ad0e:	747b      	strb	r3, [r7, #17]
    ad10:	2301      	movs	r3, #1
    ad12:	61bb      	str	r3, [r7, #24]
    ad14:	f107 0327 	add.w	r3, r7, #39	; 0x27
    ad18:	623b      	str	r3, [r7, #32]
	       .instruction                  = N25Q_FAST_READ,
	       .option                       = on_off ? 0x00 : 0xFF,
	       .address                      = 0,
	       .buf_len                      = 1,
	       .rx_buf                       = &dummy};
	qspi_sync_serial_run_command(descr, &cmd);
    ad1a:	f107 030c 	add.w	r3, r7, #12
    ad1e:	4619      	mov	r1, r3
    ad20:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    ad22:	4b07      	ldr	r3, [pc, #28]	; (ad40 <n25q256a_xip_confirm+0xc8>)
    ad24:	4798      	blx	r3
	n25q->xip_mode = on_off ? 2 : 1;
    ad26:	78fb      	ldrb	r3, [r7, #3]
    ad28:	2b00      	cmp	r3, #0
    ad2a:	d001      	beq.n	ad30 <n25q256a_xip_confirm+0xb8>
    ad2c:	2202      	movs	r2, #2
    ad2e:	e000      	b.n	ad32 <n25q256a_xip_confirm+0xba>
    ad30:	2201      	movs	r2, #1
    ad32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    ad34:	735a      	strb	r2, [r3, #13]
	return ERR_NONE;
    ad36:	2300      	movs	r3, #0
}
    ad38:	4618      	mov	r0, r3
    ad3a:	3730      	adds	r7, #48	; 0x30
    ad3c:	46bd      	mov	sp, r7
    ad3e:	bd80      	pop	{r7, pc}
    ad40:	000020d1 	.word	0x000020d1

0000ad44 <n25q256a_read_reg>:

uint32_t n25q256a_read_reg(const struct spi_nor_flash *const me, uint8_t width, uint8_t inst)
{
    ad44:	b580      	push	{r7, lr}
    ad46:	b08c      	sub	sp, #48	; 0x30
    ad48:	af00      	add	r7, sp, #0
    ad4a:	6078      	str	r0, [r7, #4]
    ad4c:	460b      	mov	r3, r1
    ad4e:	70fb      	strb	r3, [r7, #3]
    ad50:	4613      	mov	r3, r2
    ad52:	70bb      	strb	r3, [r7, #2]
	uint32_t                     status = 0;
    ad54:	2300      	movs	r3, #0
    ad56:	627b      	str	r3, [r7, #36]	; 0x24
	struct n25q256a *            n25q   = (struct n25q256a *)me;
    ad58:	687b      	ldr	r3, [r7, #4]
    ad5a:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr  = (struct qspi_sync_descriptor *)(me->io);
    ad5c:	687b      	ldr	r3, [r7, #4]
    ad5e:	681b      	ldr	r3, [r3, #0]
    ad60:	62bb      	str	r3, [r7, #40]	; 0x28
	struct _qspi_command         cmd    = {.inst_frame.bits.width    = width,
    ad62:	f107 030c 	add.w	r3, r7, #12
    ad66:	2200      	movs	r2, #0
    ad68:	601a      	str	r2, [r3, #0]
    ad6a:	605a      	str	r2, [r3, #4]
    ad6c:	609a      	str	r2, [r3, #8]
    ad6e:	60da      	str	r2, [r3, #12]
    ad70:	611a      	str	r2, [r3, #16]
    ad72:	615a      	str	r2, [r3, #20]
    ad74:	78fb      	ldrb	r3, [r7, #3]
    ad76:	f003 0307 	and.w	r3, r3, #7
    ad7a:	b2da      	uxtb	r2, r3
    ad7c:	7b3b      	ldrb	r3, [r7, #12]
    ad7e:	f362 0302 	bfi	r3, r2, #0, #3
    ad82:	733b      	strb	r3, [r7, #12]
    ad84:	7b3b      	ldrb	r3, [r7, #12]
    ad86:	f043 0310 	orr.w	r3, r3, #16
    ad8a:	733b      	strb	r3, [r7, #12]
    ad8c:	7b3b      	ldrb	r3, [r7, #12]
    ad8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    ad92:	733b      	strb	r3, [r7, #12]
    ad94:	78bb      	ldrb	r3, [r7, #2]
    ad96:	743b      	strb	r3, [r7, #16]
    ad98:	2301      	movs	r3, #1
    ad9a:	61bb      	str	r3, [r7, #24]
    ad9c:	f107 0324 	add.w	r3, r7, #36	; 0x24
    ada0:	623b      	str	r3, [r7, #32]
                                .inst_frame.bits.data_en  = 1,
                                .inst_frame.bits.tfr_type = QSPI_READ_ACCESS,
                                .instruction              = inst,
                                .buf_len                  = N25Q_RD_REG_SIZE(inst),
                                .rx_buf                   = &status};
	if (n25q->xip_mode) {
    ada2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    ada4:	7b5b      	ldrb	r3, [r3, #13]
    ada6:	2b00      	cmp	r3, #0
    ada8:	d003      	beq.n	adb2 <n25q256a_read_reg+0x6e>
		n25q256a_xip_confirm(me, false);
    adaa:	2100      	movs	r1, #0
    adac:	6878      	ldr	r0, [r7, #4]
    adae:	4b0a      	ldr	r3, [pc, #40]	; (add8 <n25q256a_read_reg+0x94>)
    adb0:	4798      	blx	r3
	}
	qspi_sync_serial_run_command(descr, &cmd);
    adb2:	f107 030c 	add.w	r3, r7, #12
    adb6:	4619      	mov	r1, r3
    adb8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    adba:	4b08      	ldr	r3, [pc, #32]	; (addc <n25q256a_read_reg+0x98>)
    adbc:	4798      	blx	r3
	if (n25q->xip_mode) {
    adbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    adc0:	7b5b      	ldrb	r3, [r3, #13]
    adc2:	2b00      	cmp	r3, #0
    adc4:	d003      	beq.n	adce <n25q256a_read_reg+0x8a>
		n25q256a_xip_confirm(me, true);
    adc6:	2101      	movs	r1, #1
    adc8:	6878      	ldr	r0, [r7, #4]
    adca:	4b03      	ldr	r3, [pc, #12]	; (add8 <n25q256a_read_reg+0x94>)
    adcc:	4798      	blx	r3
	}
	return status;
    adce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
    add0:	4618      	mov	r0, r3
    add2:	3730      	adds	r7, #48	; 0x30
    add4:	46bd      	mov	sp, r7
    add6:	bd80      	pop	{r7, pc}
    add8:	0000ac79 	.word	0x0000ac79
    addc:	000020d1 	.word	0x000020d1

0000ade0 <n25q256a_write_reg>:
void n25q256a_write_reg(const struct spi_nor_flash *const me, uint8_t width, uint8_t inst, uint32_t data)
{
    ade0:	b580      	push	{r7, lr}
    ade2:	b08c      	sub	sp, #48	; 0x30
    ade4:	af00      	add	r7, sp, #0
    ade6:	60f8      	str	r0, [r7, #12]
    ade8:	607b      	str	r3, [r7, #4]
    adea:	460b      	mov	r3, r1
    adec:	72fb      	strb	r3, [r7, #11]
    adee:	4613      	mov	r3, r2
    adf0:	72bb      	strb	r3, [r7, #10]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    adf2:	68fb      	ldr	r3, [r7, #12]
    adf4:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    adf6:	68fb      	ldr	r3, [r7, #12]
    adf8:	681b      	ldr	r3, [r3, #0]
    adfa:	62bb      	str	r3, [r7, #40]	; 0x28
	struct _qspi_command         cmd   = {.inst_frame.bits.width    = width,
    adfc:	f107 0310 	add.w	r3, r7, #16
    ae00:	2200      	movs	r2, #0
    ae02:	601a      	str	r2, [r3, #0]
    ae04:	605a      	str	r2, [r3, #4]
    ae06:	609a      	str	r2, [r3, #8]
    ae08:	60da      	str	r2, [r3, #12]
    ae0a:	611a      	str	r2, [r3, #16]
    ae0c:	615a      	str	r2, [r3, #20]
    ae0e:	7afb      	ldrb	r3, [r7, #11]
    ae10:	f003 0307 	and.w	r3, r3, #7
    ae14:	b2da      	uxtb	r2, r3
    ae16:	7c3b      	ldrb	r3, [r7, #16]
    ae18:	f362 0302 	bfi	r3, r2, #0, #3
    ae1c:	743b      	strb	r3, [r7, #16]
    ae1e:	7c3b      	ldrb	r3, [r7, #16]
    ae20:	f043 0310 	orr.w	r3, r3, #16
    ae24:	743b      	strb	r3, [r7, #16]
    ae26:	7c3b      	ldrb	r3, [r7, #16]
    ae28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    ae2c:	743b      	strb	r3, [r7, #16]
    ae2e:	7c7b      	ldrb	r3, [r7, #17]
    ae30:	2202      	movs	r2, #2
    ae32:	f362 1305 	bfi	r3, r2, #4, #2
    ae36:	747b      	strb	r3, [r7, #17]
    ae38:	7abb      	ldrb	r3, [r7, #10]
    ae3a:	753b      	strb	r3, [r7, #20]
    ae3c:	2301      	movs	r3, #1
    ae3e:	61fb      	str	r3, [r7, #28]
    ae40:	1d3b      	adds	r3, r7, #4
    ae42:	623b      	str	r3, [r7, #32]
                                .inst_frame.bits.data_en  = 1,
                                .inst_frame.bits.tfr_type = QSPI_WRITE_ACCESS,
                                .instruction              = inst,
                                .buf_len                  = N25Q_WR_REG_SIZE(inst),
                                .tx_buf                   = &data};
	if (n25q->xip_mode) {
    ae44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    ae46:	7b5b      	ldrb	r3, [r3, #13]
    ae48:	2b00      	cmp	r3, #0
    ae4a:	d003      	beq.n	ae54 <n25q256a_write_reg+0x74>
		n25q256a_xip_confirm(me, false);
    ae4c:	2100      	movs	r1, #0
    ae4e:	68f8      	ldr	r0, [r7, #12]
    ae50:	4b09      	ldr	r3, [pc, #36]	; (ae78 <n25q256a_write_reg+0x98>)
    ae52:	4798      	blx	r3
	}
	qspi_sync_serial_run_command(descr, &cmd);
    ae54:	f107 0310 	add.w	r3, r7, #16
    ae58:	4619      	mov	r1, r3
    ae5a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    ae5c:	4b07      	ldr	r3, [pc, #28]	; (ae7c <n25q256a_write_reg+0x9c>)
    ae5e:	4798      	blx	r3
	if (n25q->xip_mode) {
    ae60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    ae62:	7b5b      	ldrb	r3, [r3, #13]
    ae64:	2b00      	cmp	r3, #0
    ae66:	d003      	beq.n	ae70 <n25q256a_write_reg+0x90>
		n25q256a_xip_confirm(me, true);
    ae68:	2101      	movs	r1, #1
    ae6a:	68f8      	ldr	r0, [r7, #12]
    ae6c:	4b02      	ldr	r3, [pc, #8]	; (ae78 <n25q256a_write_reg+0x98>)
    ae6e:	4798      	blx	r3
	}
}
    ae70:	bf00      	nop
    ae72:	3730      	adds	r7, #48	; 0x30
    ae74:	46bd      	mov	sp, r7
    ae76:	bd80      	pop	{r7, pc}
    ae78:	0000ac79 	.word	0x0000ac79
    ae7c:	000020d1 	.word	0x000020d1

0000ae80 <n25q256a_write_enable>:

void n25q256a_write_enable(const struct spi_nor_flash *const me, uint8_t width, bool en)
{
    ae80:	b580      	push	{r7, lr}
    ae82:	b090      	sub	sp, #64	; 0x40
    ae84:	af00      	add	r7, sp, #0
    ae86:	6078      	str	r0, [r7, #4]
    ae88:	460b      	mov	r3, r1
    ae8a:	70fb      	strb	r3, [r7, #3]
    ae8c:	4613      	mov	r3, r2
    ae8e:	70bb      	strb	r3, [r7, #2]
	uint8_t                      status;
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    ae90:	687b      	ldr	r3, [r7, #4]
    ae92:	681b      	ldr	r3, [r3, #0]
    ae94:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint8_t                      inst  = (en == true ? N25Q_WRITE_ENABLE : N25Q_WRITE_DISABLE);
    ae96:	78bb      	ldrb	r3, [r7, #2]
    ae98:	2b00      	cmp	r3, #0
    ae9a:	d001      	beq.n	aea0 <n25q256a_write_enable+0x20>
    ae9c:	2306      	movs	r3, #6
    ae9e:	e000      	b.n	aea2 <n25q256a_write_enable+0x22>
    aea0:	2304      	movs	r3, #4
    aea2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	struct _qspi_command cmd_en = {.inst_frame.bits.width = width, .inst_frame.bits.inst_en = 1, .instruction = inst};
    aea6:	f107 0320 	add.w	r3, r7, #32
    aeaa:	2200      	movs	r2, #0
    aeac:	601a      	str	r2, [r3, #0]
    aeae:	605a      	str	r2, [r3, #4]
    aeb0:	609a      	str	r2, [r3, #8]
    aeb2:	60da      	str	r2, [r3, #12]
    aeb4:	611a      	str	r2, [r3, #16]
    aeb6:	615a      	str	r2, [r3, #20]
    aeb8:	78fb      	ldrb	r3, [r7, #3]
    aeba:	f003 0307 	and.w	r3, r3, #7
    aebe:	b2da      	uxtb	r2, r3
    aec0:	f897 3020 	ldrb.w	r3, [r7, #32]
    aec4:	f362 0302 	bfi	r3, r2, #0, #3
    aec8:	f887 3020 	strb.w	r3, [r7, #32]
    aecc:	f897 3020 	ldrb.w	r3, [r7, #32]
    aed0:	f043 0310 	orr.w	r3, r3, #16
    aed4:	f887 3020 	strb.w	r3, [r7, #32]
    aed8:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
    aedc:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	struct _qspi_command cmd_st = {.inst_frame.bits.width    = width,
    aee0:	f107 0308 	add.w	r3, r7, #8
    aee4:	2200      	movs	r2, #0
    aee6:	601a      	str	r2, [r3, #0]
    aee8:	605a      	str	r2, [r3, #4]
    aeea:	609a      	str	r2, [r3, #8]
    aeec:	60da      	str	r2, [r3, #12]
    aeee:	611a      	str	r2, [r3, #16]
    aef0:	615a      	str	r2, [r3, #20]
    aef2:	78fb      	ldrb	r3, [r7, #3]
    aef4:	f003 0307 	and.w	r3, r3, #7
    aef8:	b2da      	uxtb	r2, r3
    aefa:	7a3b      	ldrb	r3, [r7, #8]
    aefc:	f362 0302 	bfi	r3, r2, #0, #3
    af00:	723b      	strb	r3, [r7, #8]
    af02:	7a3b      	ldrb	r3, [r7, #8]
    af04:	f043 0310 	orr.w	r3, r3, #16
    af08:	723b      	strb	r3, [r7, #8]
    af0a:	7a3b      	ldrb	r3, [r7, #8]
    af0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    af10:	723b      	strb	r3, [r7, #8]
    af12:	2305      	movs	r3, #5
    af14:	733b      	strb	r3, [r7, #12]
    af16:	2301      	movs	r3, #1
    af18:	617b      	str	r3, [r7, #20]
    af1a:	f107 033a 	add.w	r3, r7, #58	; 0x3a
    af1e:	61fb      	str	r3, [r7, #28]
	                               .inst_frame.bits.tfr_type = QSPI_READ_ACCESS,
	                               .instruction              = N25Q_READ_STATUS_REGISTER,
	                               .buf_len                  = 1,
	                               .rx_buf                   = &status};
	do {
		qspi_sync_serial_run_command(descr, &cmd_en);
    af20:	f107 0320 	add.w	r3, r7, #32
    af24:	4619      	mov	r1, r3
    af26:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
    af28:	4b08      	ldr	r3, [pc, #32]	; (af4c <n25q256a_write_enable+0xcc>)
    af2a:	4798      	blx	r3
		qspi_sync_serial_run_command(descr, &cmd_st);
    af2c:	f107 0308 	add.w	r3, r7, #8
    af30:	4619      	mov	r1, r3
    af32:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
    af34:	4b05      	ldr	r3, [pc, #20]	; (af4c <n25q256a_write_enable+0xcc>)
    af36:	4798      	blx	r3
	} while ((status & (1 << 1)) == 0);
    af38:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
    af3c:	f003 0302 	and.w	r3, r3, #2
    af40:	2b00      	cmp	r3, #0
    af42:	d0ed      	beq.n	af20 <n25q256a_write_enable+0xa0>
}
    af44:	bf00      	nop
    af46:	3740      	adds	r7, #64	; 0x40
    af48:	46bd      	mov	sp, r7
    af4a:	bd80      	pop	{r7, pc}
    af4c:	000020d1 	.word	0x000020d1

0000af50 <n25q256a_switch_mode>:

void n25q256a_switch_mode(const struct spi_nor_flash *const me, uint8_t mode)
{
    af50:	b590      	push	{r4, r7, lr}
    af52:	b087      	sub	sp, #28
    af54:	af00      	add	r7, sp, #0
    af56:	6078      	str	r0, [r7, #4]
    af58:	460b      	mov	r3, r1
    af5a:	70fb      	strb	r3, [r7, #3]
	struct n25q256a *n25q   = (struct n25q256a *)me;
    af5c:	687b      	ldr	r3, [r7, #4]
    af5e:	60fb      	str	r3, [r7, #12]
	uint8_t          width  = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    af60:	68fb      	ldr	r3, [r7, #12]
    af62:	7b1b      	ldrb	r3, [r3, #12]
    af64:	2b00      	cmp	r3, #0
    af66:	d001      	beq.n	af6c <n25q256a_switch_mode+0x1c>
    af68:	2306      	movs	r3, #6
    af6a:	e000      	b.n	af6e <n25q256a_switch_mode+0x1e>
    af6c:	2300      	movs	r3, #0
    af6e:	72fb      	strb	r3, [r7, #11]
	uint32_t         evcfg  = n25q256a_read_reg(me, width, N25Q_READ_ENHANCED_VOLATILE_CONFIG_REGISTER);
    af70:	7afb      	ldrb	r3, [r7, #11]
    af72:	2265      	movs	r2, #101	; 0x65
    af74:	4619      	mov	r1, r3
    af76:	6878      	ldr	r0, [r7, #4]
    af78:	4b25      	ldr	r3, [pc, #148]	; (b010 <n25q256a_switch_mode+0xc0>)
    af7a:	4798      	blx	r3
    af7c:	6178      	str	r0, [r7, #20]
	uint8_t          modify = 0;
    af7e:	2300      	movs	r3, #0
    af80:	74fb      	strb	r3, [r7, #19]
	if (n25q->quad_mode == mode) {
    af82:	68fb      	ldr	r3, [r7, #12]
    af84:	7b1b      	ldrb	r3, [r3, #12]
    af86:	78fa      	ldrb	r2, [r7, #3]
    af88:	429a      	cmp	r2, r3
    af8a:	d03d      	beq.n	b008 <n25q256a_switch_mode+0xb8>
		return;
	}
	if (mode) {
    af8c:	78fb      	ldrb	r3, [r7, #3]
    af8e:	2b00      	cmp	r3, #0
    af90:	d00b      	beq.n	afaa <n25q256a_switch_mode+0x5a>
		if (evcfg & 0x80) {
    af92:	697b      	ldr	r3, [r7, #20]
    af94:	f003 0380 	and.w	r3, r3, #128	; 0x80
    af98:	2b00      	cmp	r3, #0
    af9a:	d011      	beq.n	afc0 <n25q256a_switch_mode+0x70>
			evcfg &= 0x1F;
    af9c:	697b      	ldr	r3, [r7, #20]
    af9e:	f003 031f 	and.w	r3, r3, #31
    afa2:	617b      	str	r3, [r7, #20]
			modify = 1;
    afa4:	2301      	movs	r3, #1
    afa6:	74fb      	strb	r3, [r7, #19]
    afa8:	e00a      	b.n	afc0 <n25q256a_switch_mode+0x70>
		}
	} else {
		if (!(evcfg & 0x80)) {
    afaa:	697b      	ldr	r3, [r7, #20]
    afac:	f003 0380 	and.w	r3, r3, #128	; 0x80
    afb0:	2b00      	cmp	r3, #0
    afb2:	d105      	bne.n	afc0 <n25q256a_switch_mode+0x70>
			evcfg |= 0xC0;
    afb4:	697b      	ldr	r3, [r7, #20]
    afb6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
    afba:	617b      	str	r3, [r7, #20]
			modify = 1;
    afbc:	2301      	movs	r3, #1
    afbe:	74fb      	strb	r3, [r7, #19]
		}
	}
	if (modify) {
    afc0:	7cfb      	ldrb	r3, [r7, #19]
    afc2:	2b00      	cmp	r3, #0
    afc4:	d021      	beq.n	b00a <n25q256a_switch_mode+0xba>
		n25q->quad_mode = mode;
    afc6:	68fb      	ldr	r3, [r7, #12]
    afc8:	78fa      	ldrb	r2, [r7, #3]
    afca:	731a      	strb	r2, [r3, #12]
		n25q256a_write_enable(me, width, true);
    afcc:	7afb      	ldrb	r3, [r7, #11]
    afce:	2201      	movs	r2, #1
    afd0:	4619      	mov	r1, r3
    afd2:	6878      	ldr	r0, [r7, #4]
    afd4:	4b0f      	ldr	r3, [pc, #60]	; (b014 <n25q256a_switch_mode+0xc4>)
    afd6:	4798      	blx	r3
		n25q256a_write_reg(me, width, N25Q_WRITE_ENHANCED_VOLATILE_CONFIG_REGISTER, evcfg);
    afd8:	7af9      	ldrb	r1, [r7, #11]
    afda:	697b      	ldr	r3, [r7, #20]
    afdc:	2261      	movs	r2, #97	; 0x61
    afde:	6878      	ldr	r0, [r7, #4]
    afe0:	4c0d      	ldr	r4, [pc, #52]	; (b018 <n25q256a_switch_mode+0xc8>)
    afe2:	47a0      	blx	r4
		width           = mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    afe4:	78fb      	ldrb	r3, [r7, #3]
    afe6:	2b00      	cmp	r3, #0
    afe8:	d001      	beq.n	afee <n25q256a_switch_mode+0x9e>
    afea:	2306      	movs	r3, #6
    afec:	e000      	b.n	aff0 <n25q256a_switch_mode+0xa0>
    afee:	2300      	movs	r3, #0
    aff0:	72fb      	strb	r3, [r7, #11]
		evcfg           = n25q256a_read_reg(me, width, N25Q_READ_ENHANCED_VOLATILE_CONFIG_REGISTER);
    aff2:	7afb      	ldrb	r3, [r7, #11]
    aff4:	2265      	movs	r2, #101	; 0x65
    aff6:	4619      	mov	r1, r3
    aff8:	6878      	ldr	r0, [r7, #4]
    affa:	4b05      	ldr	r3, [pc, #20]	; (b010 <n25q256a_switch_mode+0xc0>)
    affc:	4798      	blx	r3
    affe:	6178      	str	r0, [r7, #20]
		n25q->quad_mode = mode;
    b000:	68fb      	ldr	r3, [r7, #12]
    b002:	78fa      	ldrb	r2, [r7, #3]
    b004:	731a      	strb	r2, [r3, #12]
    b006:	e000      	b.n	b00a <n25q256a_switch_mode+0xba>
		return;
    b008:	bf00      	nop
	}
}
    b00a:	371c      	adds	r7, #28
    b00c:	46bd      	mov	sp, r7
    b00e:	bd90      	pop	{r4, r7, pc}
    b010:	0000ad45 	.word	0x0000ad45
    b014:	0000ae81 	.word	0x0000ae81
    b018:	0000ade1 	.word	0x0000ade1

0000b01c <n25q256a_construct>:
/**
 * \brief Construct n25q256a spi nor flash
 */
struct spi_nor_flash *n25q256a_construct(struct spi_nor_flash *const me, void *const io, func pin_exit_xip,
                                         const uint8_t quad_mode)
{
    b01c:	b580      	push	{r7, lr}
    b01e:	b086      	sub	sp, #24
    b020:	af00      	add	r7, sp, #0
    b022:	60f8      	str	r0, [r7, #12]
    b024:	60b9      	str	r1, [r7, #8]
    b026:	607a      	str	r2, [r7, #4]
    b028:	70fb      	strb	r3, [r7, #3]
	struct n25q256a *n25q = (struct n25q256a *)me;
    b02a:	68fb      	ldr	r3, [r7, #12]
    b02c:	617b      	str	r3, [r7, #20]
	spi_nor_flash_construct(me, io, &n25q256a_interface);
    b02e:	4a0c      	ldr	r2, [pc, #48]	; (b060 <n25q256a_construct+0x44>)
    b030:	68b9      	ldr	r1, [r7, #8]
    b032:	68f8      	ldr	r0, [r7, #12]
    b034:	4b0b      	ldr	r3, [pc, #44]	; (b064 <n25q256a_construct+0x48>)
    b036:	4798      	blx	r3
	n25q->quad_mode    = 0;
    b038:	697b      	ldr	r3, [r7, #20]
    b03a:	2200      	movs	r2, #0
    b03c:	731a      	strb	r2, [r3, #12]
	n25q->xip_mode     = false;
    b03e:	697b      	ldr	r3, [r7, #20]
    b040:	2200      	movs	r2, #0
    b042:	735a      	strb	r2, [r3, #13]
	n25q->pin_exit_xip = pin_exit_xip;
    b044:	697b      	ldr	r3, [r7, #20]
    b046:	687a      	ldr	r2, [r7, #4]
    b048:	609a      	str	r2, [r3, #8]
	n25q256a_switch_mode(me, quad_mode);
    b04a:	78fb      	ldrb	r3, [r7, #3]
    b04c:	4619      	mov	r1, r3
    b04e:	68f8      	ldr	r0, [r7, #12]
    b050:	4b05      	ldr	r3, [pc, #20]	; (b068 <n25q256a_construct+0x4c>)
    b052:	4798      	blx	r3
	return me;
    b054:	68fb      	ldr	r3, [r7, #12]
}
    b056:	4618      	mov	r0, r3
    b058:	3718      	adds	r7, #24
    b05a:	46bd      	mov	sp, r7
    b05c:	bd80      	pop	{r7, pc}
    b05e:	bf00      	nop
    b060:	000135ec 	.word	0x000135ec
    b064:	0000b4f9 	.word	0x0000b4f9
    b068:	0000af51 	.word	0x0000af51

0000b06c <n25q256a_read>:

int32_t n25q256a_read(const struct spi_nor_flash *const me, uint8_t *buf, uint32_t address, uint32_t length)
{
    b06c:	b580      	push	{r7, lr}
    b06e:	b08c      	sub	sp, #48	; 0x30
    b070:	af00      	add	r7, sp, #0
    b072:	60f8      	str	r0, [r7, #12]
    b074:	60b9      	str	r1, [r7, #8]
    b076:	607a      	str	r2, [r7, #4]
    b078:	603b      	str	r3, [r7, #0]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    b07a:	68fb      	ldr	r3, [r7, #12]
    b07c:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    b07e:	68fb      	ldr	r3, [r7, #12]
    b080:	681b      	ldr	r3, [r3, #0]
    b082:	62bb      	str	r3, [r7, #40]	; 0x28

	struct _qspi_command cmd = {
    b084:	f107 0310 	add.w	r3, r7, #16
    b088:	2200      	movs	r2, #0
    b08a:	601a      	str	r2, [r3, #0]
    b08c:	605a      	str	r2, [r3, #4]
    b08e:	609a      	str	r2, [r3, #8]
    b090:	60da      	str	r2, [r3, #12]
    b092:	611a      	str	r2, [r3, #16]
    b094:	615a      	str	r2, [r3, #20]
	    .inst_frame.bits.width        = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1,
    b096:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b098:	7b1b      	ldrb	r3, [r3, #12]
    b09a:	2b00      	cmp	r3, #0
    b09c:	d001      	beq.n	b0a2 <n25q256a_read+0x36>
    b09e:	2206      	movs	r2, #6
    b0a0:	e000      	b.n	b0a4 <n25q256a_read+0x38>
    b0a2:	2200      	movs	r2, #0
	struct _qspi_command cmd = {
    b0a4:	7c3b      	ldrb	r3, [r7, #16]
    b0a6:	f362 0302 	bfi	r3, r2, #0, #3
    b0aa:	743b      	strb	r3, [r7, #16]
    b0ac:	7c3b      	ldrb	r3, [r7, #16]
    b0ae:	f043 0310 	orr.w	r3, r3, #16
    b0b2:	743b      	strb	r3, [r7, #16]
    b0b4:	7c3b      	ldrb	r3, [r7, #16]
    b0b6:	f043 0320 	orr.w	r3, r3, #32
    b0ba:	743b      	strb	r3, [r7, #16]
    b0bc:	7c3b      	ldrb	r3, [r7, #16]
    b0be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    b0c2:	743b      	strb	r3, [r7, #16]
    b0c4:	7c7b      	ldrb	r3, [r7, #17]
    b0c6:	2201      	movs	r2, #1
    b0c8:	f362 1305 	bfi	r3, r2, #4, #2
    b0cc:	747b      	strb	r3, [r7, #17]
	    .inst_frame.bits.inst_en      = 1,
	    .inst_frame.bits.data_en      = 1,
	    .inst_frame.bits.addr_en      = 1,
	    .inst_frame.bits.dummy_cycles = n25q->quad_mode ? 10 : 8,
    b0ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b0d0:	7b1b      	ldrb	r3, [r3, #12]
    b0d2:	2b00      	cmp	r3, #0
    b0d4:	d001      	beq.n	b0da <n25q256a_read+0x6e>
    b0d6:	220a      	movs	r2, #10
    b0d8:	e000      	b.n	b0dc <n25q256a_read+0x70>
    b0da:	2208      	movs	r2, #8
	struct _qspi_command cmd = {
    b0dc:	7cbb      	ldrb	r3, [r7, #18]
    b0de:	f362 0304 	bfi	r3, r2, #0, #5
    b0e2:	74bb      	strb	r3, [r7, #18]
    b0e4:	230b      	movs	r3, #11
    b0e6:	753b      	strb	r3, [r7, #20]
    b0e8:	687b      	ldr	r3, [r7, #4]
    b0ea:	61bb      	str	r3, [r7, #24]
    b0ec:	683b      	ldr	r3, [r7, #0]
    b0ee:	61fb      	str	r3, [r7, #28]
    b0f0:	68bb      	ldr	r3, [r7, #8]
    b0f2:	627b      	str	r3, [r7, #36]	; 0x24
	//	.instruction                  = N25Q_READ_ARRAY_LF,
	    .address                      = address,
	    .buf_len                      = length,
	    .rx_buf                       = buf,
	};
	qspi_sync_serial_run_command(descr, &cmd);
    b0f4:	f107 0310 	add.w	r3, r7, #16
    b0f8:	4619      	mov	r1, r3
    b0fa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    b0fc:	4b03      	ldr	r3, [pc, #12]	; (b10c <n25q256a_read+0xa0>)
    b0fe:	4798      	blx	r3
	return ERR_NONE;
    b100:	2300      	movs	r3, #0
}
    b102:	4618      	mov	r0, r3
    b104:	3730      	adds	r7, #48	; 0x30
    b106:	46bd      	mov	sp, r7
    b108:	bd80      	pop	{r7, pc}
    b10a:	bf00      	nop
    b10c:	000020d1 	.word	0x000020d1

0000b110 <n25q256a_write>:

int32_t n25q256a_write(const struct spi_nor_flash *const me, uint8_t *buf, uint32_t address, uint32_t length)
{
    b110:	b580      	push	{r7, lr}
    b112:	b08c      	sub	sp, #48	; 0x30
    b114:	af00      	add	r7, sp, #0
    b116:	60f8      	str	r0, [r7, #12]
    b118:	60b9      	str	r1, [r7, #8]
    b11a:	607a      	str	r2, [r7, #4]
    b11c:	603b      	str	r3, [r7, #0]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    b11e:	68fb      	ldr	r3, [r7, #12]
    b120:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    b122:	68fb      	ldr	r3, [r7, #12]
    b124:	681b      	ldr	r3, [r3, #0]
    b126:	62bb      	str	r3, [r7, #40]	; 0x28
	struct _qspi_command         cmd   = {
    b128:	f107 0310 	add.w	r3, r7, #16
    b12c:	2200      	movs	r2, #0
    b12e:	601a      	str	r2, [r3, #0]
    b130:	605a      	str	r2, [r3, #4]
    b132:	609a      	str	r2, [r3, #8]
    b134:	60da      	str	r2, [r3, #12]
    b136:	611a      	str	r2, [r3, #16]
    b138:	615a      	str	r2, [r3, #20]
    b13a:	7c3b      	ldrb	r3, [r7, #16]
    b13c:	f043 0310 	orr.w	r3, r3, #16
    b140:	743b      	strb	r3, [r7, #16]
    b142:	7c3b      	ldrb	r3, [r7, #16]
    b144:	f043 0320 	orr.w	r3, r3, #32
    b148:	743b      	strb	r3, [r7, #16]
    b14a:	7c3b      	ldrb	r3, [r7, #16]
    b14c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    b150:	743b      	strb	r3, [r7, #16]
    b152:	7c7b      	ldrb	r3, [r7, #17]
    b154:	f043 0330 	orr.w	r3, r3, #48	; 0x30
    b158:	747b      	strb	r3, [r7, #17]
    b15a:	2302      	movs	r3, #2
    b15c:	753b      	strb	r3, [r7, #20]
    b15e:	687b      	ldr	r3, [r7, #4]
    b160:	61bb      	str	r3, [r7, #24]
    b162:	683b      	ldr	r3, [r7, #0]
    b164:	61fb      	str	r3, [r7, #28]
    b166:	68bb      	ldr	r3, [r7, #8]
    b168:	623b      	str	r3, [r7, #32]
        .address                  = address,
        .buf_len                  = length,
        .tx_buf                   = buf,
    };
	/* Command, address, data width are different for different modes */
	cmd.inst_frame.bits.width = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    b16a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b16c:	7b1b      	ldrb	r3, [r3, #12]
    b16e:	2b00      	cmp	r3, #0
    b170:	d001      	beq.n	b176 <n25q256a_write+0x66>
    b172:	2206      	movs	r2, #6
    b174:	e000      	b.n	b178 <n25q256a_write+0x68>
    b176:	2200      	movs	r2, #0
    b178:	7c3b      	ldrb	r3, [r7, #16]
    b17a:	f362 0302 	bfi	r3, r2, #0, #3
    b17e:	743b      	strb	r3, [r7, #16]
	while (length) {
    b180:	e035      	b.n	b1ee <n25q256a_write+0xde>
		cmd.address = address;
    b182:	687b      	ldr	r3, [r7, #4]
    b184:	61bb      	str	r3, [r7, #24]
		if (length <= N25Q_PAGE_SIZE) {
    b186:	683b      	ldr	r3, [r7, #0]
    b188:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    b18c:	d802      	bhi.n	b194 <n25q256a_write+0x84>
			cmd.buf_len = length;
    b18e:	683b      	ldr	r3, [r7, #0]
    b190:	61fb      	str	r3, [r7, #28]
    b192:	e002      	b.n	b19a <n25q256a_write+0x8a>
		} else {
			cmd.buf_len = N25Q_PAGE_SIZE;
    b194:	f44f 7380 	mov.w	r3, #256	; 0x100
    b198:	61fb      	str	r3, [r7, #28]
		}
		/* PROGRAM commands are initiated by first executing the
		 * WRITE ENABLE command to set the write enable latch bit to 1.
		 */
		n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
    b19a:	7c3b      	ldrb	r3, [r7, #16]
    b19c:	f3c3 0302 	ubfx	r3, r3, #0, #3
    b1a0:	b2db      	uxtb	r3, r3
    b1a2:	2201      	movs	r2, #1
    b1a4:	4619      	mov	r1, r3
    b1a6:	68f8      	ldr	r0, [r7, #12]
    b1a8:	4b19      	ldr	r3, [pc, #100]	; (b210 <n25q256a_write+0x100>)
    b1aa:	4798      	blx	r3
		/* Send PROGRAM command */
		qspi_sync_serial_run_command(descr, &cmd);
    b1ac:	f107 0310 	add.w	r3, r7, #16
    b1b0:	4619      	mov	r1, r3
    b1b2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    b1b4:	4b17      	ldr	r3, [pc, #92]	; (b214 <n25q256a_write+0x104>)
    b1b6:	4798      	blx	r3
		/* When the operation is in progress, the write in progress bit is set.
		 * The write enable latch bit is cleared.
		 * The flag status register is polled for the operation status.
		 */
		while (!(n25q256a_read_reg(me, cmd.inst_frame.bits.width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
    b1b8:	bf00      	nop
    b1ba:	7c3b      	ldrb	r3, [r7, #16]
    b1bc:	f3c3 0302 	ubfx	r3, r3, #0, #3
    b1c0:	b2db      	uxtb	r3, r3
    b1c2:	2270      	movs	r2, #112	; 0x70
    b1c4:	4619      	mov	r1, r3
    b1c6:	68f8      	ldr	r0, [r7, #12]
    b1c8:	4b13      	ldr	r3, [pc, #76]	; (b218 <n25q256a_write+0x108>)
    b1ca:	4798      	blx	r3
    b1cc:	4603      	mov	r3, r0
    b1ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
    b1d2:	2b00      	cmp	r3, #0
    b1d4:	d0f1      	beq.n	b1ba <n25q256a_write+0xaa>
			;
		cmd.tx_buf += cmd.buf_len;
    b1d6:	6a3a      	ldr	r2, [r7, #32]
    b1d8:	69fb      	ldr	r3, [r7, #28]
    b1da:	4413      	add	r3, r2
    b1dc:	623b      	str	r3, [r7, #32]
		length -= cmd.buf_len;
    b1de:	69fb      	ldr	r3, [r7, #28]
    b1e0:	683a      	ldr	r2, [r7, #0]
    b1e2:	1ad3      	subs	r3, r2, r3
    b1e4:	603b      	str	r3, [r7, #0]
		address += cmd.buf_len;
    b1e6:	69fb      	ldr	r3, [r7, #28]
    b1e8:	687a      	ldr	r2, [r7, #4]
    b1ea:	4413      	add	r3, r2
    b1ec:	607b      	str	r3, [r7, #4]
	while (length) {
    b1ee:	683b      	ldr	r3, [r7, #0]
    b1f0:	2b00      	cmp	r3, #0
    b1f2:	d1c6      	bne.n	b182 <n25q256a_write+0x72>
	}
	if (n25q->xip_mode) {
    b1f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b1f6:	7b5b      	ldrb	r3, [r3, #13]
    b1f8:	2b00      	cmp	r3, #0
    b1fa:	d003      	beq.n	b204 <n25q256a_write+0xf4>
		n25q256a_xip_confirm(me, true);
    b1fc:	2101      	movs	r1, #1
    b1fe:	68f8      	ldr	r0, [r7, #12]
    b200:	4b06      	ldr	r3, [pc, #24]	; (b21c <n25q256a_write+0x10c>)
    b202:	4798      	blx	r3
	}
	return ERR_NONE;
    b204:	2300      	movs	r3, #0
}
    b206:	4618      	mov	r0, r3
    b208:	3730      	adds	r7, #48	; 0x30
    b20a:	46bd      	mov	sp, r7
    b20c:	bd80      	pop	{r7, pc}
    b20e:	bf00      	nop
    b210:	0000ae81 	.word	0x0000ae81
    b214:	000020d1 	.word	0x000020d1
    b218:	0000ad45 	.word	0x0000ad45
    b21c:	0000ac79 	.word	0x0000ac79

0000b220 <n25q256a_erase>:

int32_t n25q256a_erase(const struct spi_nor_flash *const me, uint32_t address, uint32_t length)
{
    b220:	b580      	push	{r7, lr}
    b222:	b090      	sub	sp, #64	; 0x40
    b224:	af00      	add	r7, sp, #0
    b226:	60f8      	str	r0, [r7, #12]
    b228:	60b9      	str	r1, [r7, #8]
    b22a:	607a      	str	r2, [r7, #4]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    b22c:	68fb      	ldr	r3, [r7, #12]
    b22e:	633b      	str	r3, [r7, #48]	; 0x30
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    b230:	68fb      	ldr	r3, [r7, #12]
    b232:	681b      	ldr	r3, [r3, #0]
    b234:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct _qspi_command         cmd   = {
    b236:	f107 0314 	add.w	r3, r7, #20
    b23a:	2200      	movs	r2, #0
    b23c:	601a      	str	r2, [r3, #0]
    b23e:	605a      	str	r2, [r3, #4]
    b240:	609a      	str	r2, [r3, #8]
    b242:	60da      	str	r2, [r3, #12]
    b244:	611a      	str	r2, [r3, #16]
    b246:	615a      	str	r2, [r3, #20]
        .inst_frame.bits.width    = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1,
    b248:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    b24a:	7b1b      	ldrb	r3, [r3, #12]
    b24c:	2b00      	cmp	r3, #0
    b24e:	d001      	beq.n	b254 <n25q256a_erase+0x34>
    b250:	2206      	movs	r2, #6
    b252:	e000      	b.n	b256 <n25q256a_erase+0x36>
    b254:	2200      	movs	r2, #0
	struct _qspi_command         cmd   = {
    b256:	7d3b      	ldrb	r3, [r7, #20]
    b258:	f362 0302 	bfi	r3, r2, #0, #3
    b25c:	753b      	strb	r3, [r7, #20]
    b25e:	7d3b      	ldrb	r3, [r7, #20]
    b260:	f043 0310 	orr.w	r3, r3, #16
    b264:	753b      	strb	r3, [r7, #20]
        .inst_frame.bits.inst_en  = 1,
        .inst_frame.bits.addr_en  = (length < N25Q_FLASH_SIZE) ? 1 : 0,
    b266:	687b      	ldr	r3, [r7, #4]
    b268:	4a56      	ldr	r2, [pc, #344]	; (b3c4 <n25q256a_erase+0x1a4>)
    b26a:	4293      	cmp	r3, r2
    b26c:	bf94      	ite	ls
    b26e:	2301      	movls	r3, #1
    b270:	2300      	movhi	r3, #0
    b272:	b2da      	uxtb	r2, r3
	struct _qspi_command         cmd   = {
    b274:	7d3b      	ldrb	r3, [r7, #20]
    b276:	f362 1345 	bfi	r3, r2, #5, #1
    b27a:	753b      	strb	r3, [r7, #20]
    b27c:	7d7b      	ldrb	r3, [r7, #21]
    b27e:	2202      	movs	r2, #2
    b280:	f362 1305 	bfi	r3, r2, #4, #2
    b284:	757b      	strb	r3, [r7, #21]
        .inst_frame.bits.tfr_type = QSPI_WRITE_ACCESS,
    };
	uint32_t temp_addr = address;
    b286:	68bb      	ldr	r3, [r7, #8]
    b288:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t temp_len  = length;
    b28a:	687b      	ldr	r3, [r7, #4]
    b28c:	63bb      	str	r3, [r7, #56]	; 0x38
	int32_t  rc        = ERR_NONE;
    b28e:	2300      	movs	r3, #0
    b290:	637b      	str	r3, [r7, #52]	; 0x34

	if ((length % N25Q_SECTOR_SIZE) || (address % N25Q_SECTOR_SIZE)) {
    b292:	687b      	ldr	r3, [r7, #4]
    b294:	f3c3 030b 	ubfx	r3, r3, #0, #12
    b298:	2b00      	cmp	r3, #0
    b29a:	d104      	bne.n	b2a6 <n25q256a_erase+0x86>
    b29c:	68bb      	ldr	r3, [r7, #8]
    b29e:	f3c3 030b 	ubfx	r3, r3, #0, #12
    b2a2:	2b00      	cmp	r3, #0
    b2a4:	d002      	beq.n	b2ac <n25q256a_erase+0x8c>
		return ERR_INVALID_ARG;
    b2a6:	f06f 030c 	mvn.w	r3, #12
    b2aa:	e087      	b.n	b3bc <n25q256a_erase+0x19c>
	}

	if (length >= N25Q_FLASH_SIZE) {
    b2ac:	687b      	ldr	r3, [r7, #4]
    b2ae:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
    b2b2:	d368      	bcc.n	b386 <n25q256a_erase+0x166>
		cmd.instruction = N25Q_BULK_ERASE;
    b2b4:	23c7      	movs	r3, #199	; 0xc7
    b2b6:	763b      	strb	r3, [r7, #24]
		/* WRITE ENABLE command must be issued to
		 * set the write enable latch bit to 1 */
		n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
    b2b8:	7d3b      	ldrb	r3, [r7, #20]
    b2ba:	f3c3 0302 	ubfx	r3, r3, #0, #3
    b2be:	b2db      	uxtb	r3, r3
    b2c0:	2201      	movs	r2, #1
    b2c2:	4619      	mov	r1, r3
    b2c4:	68f8      	ldr	r0, [r7, #12]
    b2c6:	4b40      	ldr	r3, [pc, #256]	; (b3c8 <n25q256a_erase+0x1a8>)
    b2c8:	4798      	blx	r3
		/* Send specific erase command */
		qspi_sync_serial_run_command(descr, &cmd);
    b2ca:	f107 0314 	add.w	r3, r7, #20
    b2ce:	4619      	mov	r1, r3
    b2d0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    b2d2:	4b3e      	ldr	r3, [pc, #248]	; (b3cc <n25q256a_erase+0x1ac>)
    b2d4:	4798      	blx	r3
    b2d6:	e059      	b.n	b38c <n25q256a_erase+0x16c>
	} else {
		while (temp_len > 0) {
			if (((temp_addr % N25Q_BLOCK_SIZE) == 0) && (temp_len >= N25Q_BLOCK_SIZE)) {
    b2d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    b2da:	b29b      	uxth	r3, r3
    b2dc:	2b00      	cmp	r3, #0
    b2de:	d11f      	bne.n	b320 <n25q256a_erase+0x100>
    b2e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    b2e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    b2e6:	d31b      	bcc.n	b320 <n25q256a_erase+0x100>
				cmd.address     = temp_addr;
    b2e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    b2ea:	61fb      	str	r3, [r7, #28]
				cmd.instruction = N25Q_BLOCK_ERASE_64K;
    b2ec:	23d8      	movs	r3, #216	; 0xd8
    b2ee:	763b      	strb	r3, [r7, #24]
				/* WRITE ENABLE command must be issued to
				 * set the write enable latch bit to 1 */
				n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
    b2f0:	7d3b      	ldrb	r3, [r7, #20]
    b2f2:	f3c3 0302 	ubfx	r3, r3, #0, #3
    b2f6:	b2db      	uxtb	r3, r3
    b2f8:	2201      	movs	r2, #1
    b2fa:	4619      	mov	r1, r3
    b2fc:	68f8      	ldr	r0, [r7, #12]
    b2fe:	4b32      	ldr	r3, [pc, #200]	; (b3c8 <n25q256a_erase+0x1a8>)
    b300:	4798      	blx	r3
				/* Send specific erase command */
				qspi_sync_serial_run_command(descr, &cmd);
    b302:	f107 0314 	add.w	r3, r7, #20
    b306:	4619      	mov	r1, r3
    b308:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    b30a:	4b30      	ldr	r3, [pc, #192]	; (b3cc <n25q256a_erase+0x1ac>)
    b30c:	4798      	blx	r3
				temp_addr += N25Q_BLOCK_SIZE;
    b30e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    b310:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
    b314:	63fb      	str	r3, [r7, #60]	; 0x3c
				temp_len -= N25Q_BLOCK_SIZE;
    b316:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    b318:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
    b31c:	63bb      	str	r3, [r7, #56]	; 0x38
    b31e:	e023      	b.n	b368 <n25q256a_erase+0x148>
			} else if (temp_len >= N25Q_SECTOR_SIZE) {
    b320:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    b322:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    b326:	d31b      	bcc.n	b360 <n25q256a_erase+0x140>
				cmd.address     = temp_addr;
    b328:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    b32a:	61fb      	str	r3, [r7, #28]
				cmd.instruction = N25Q_BLOCK_ERASE_4K;
    b32c:	2320      	movs	r3, #32
    b32e:	763b      	strb	r3, [r7, #24]
				/* WRITE ENABLE command must be issued to
				 * set the write enable latch bit to 1 */
				n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
    b330:	7d3b      	ldrb	r3, [r7, #20]
    b332:	f3c3 0302 	ubfx	r3, r3, #0, #3
    b336:	b2db      	uxtb	r3, r3
    b338:	2201      	movs	r2, #1
    b33a:	4619      	mov	r1, r3
    b33c:	68f8      	ldr	r0, [r7, #12]
    b33e:	4b22      	ldr	r3, [pc, #136]	; (b3c8 <n25q256a_erase+0x1a8>)
    b340:	4798      	blx	r3
				/* Send specific erase command */
				qspi_sync_serial_run_command(descr, &cmd);
    b342:	f107 0314 	add.w	r3, r7, #20
    b346:	4619      	mov	r1, r3
    b348:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    b34a:	4b20      	ldr	r3, [pc, #128]	; (b3cc <n25q256a_erase+0x1ac>)
    b34c:	4798      	blx	r3
				temp_addr += N25Q_SECTOR_SIZE;
    b34e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    b350:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
    b354:	63fb      	str	r3, [r7, #60]	; 0x3c
				temp_len -= N25Q_SECTOR_SIZE;
    b356:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    b358:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
    b35c:	63bb      	str	r3, [r7, #56]	; 0x38
    b35e:	e003      	b.n	b368 <n25q256a_erase+0x148>
			} else {
				rc = ERR_INVALID_ARG;
    b360:	f06f 030c 	mvn.w	r3, #12
    b364:	637b      	str	r3, [r7, #52]	; 0x34
				break;
    b366:	e011      	b.n	b38c <n25q256a_erase+0x16c>
			/* When the operation is in progress,
			 * the write in progress bit is set.
			 * The write enable latch bit is cleared.
			 * The flag status register is polled for the operation status.
			 */
			while (!(n25q256a_read_reg(me, cmd.inst_frame.bits.width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
    b368:	bf00      	nop
    b36a:	7d3b      	ldrb	r3, [r7, #20]
    b36c:	f3c3 0302 	ubfx	r3, r3, #0, #3
    b370:	b2db      	uxtb	r3, r3
    b372:	2270      	movs	r2, #112	; 0x70
    b374:	4619      	mov	r1, r3
    b376:	68f8      	ldr	r0, [r7, #12]
    b378:	4b15      	ldr	r3, [pc, #84]	; (b3d0 <n25q256a_erase+0x1b0>)
    b37a:	4798      	blx	r3
    b37c:	4603      	mov	r3, r0
    b37e:	f003 0380 	and.w	r3, r3, #128	; 0x80
    b382:	2b00      	cmp	r3, #0
    b384:	d0f1      	beq.n	b36a <n25q256a_erase+0x14a>
		while (temp_len > 0) {
    b386:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    b388:	2b00      	cmp	r3, #0
    b38a:	d1a5      	bne.n	b2d8 <n25q256a_erase+0xb8>
				;
		}
	}
	/* The flag status register is polled for the final operation status. */
	while (!(n25q256a_read_reg(me, cmd.inst_frame.bits.width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
    b38c:	bf00      	nop
    b38e:	7d3b      	ldrb	r3, [r7, #20]
    b390:	f3c3 0302 	ubfx	r3, r3, #0, #3
    b394:	b2db      	uxtb	r3, r3
    b396:	2270      	movs	r2, #112	; 0x70
    b398:	4619      	mov	r1, r3
    b39a:	68f8      	ldr	r0, [r7, #12]
    b39c:	4b0c      	ldr	r3, [pc, #48]	; (b3d0 <n25q256a_erase+0x1b0>)
    b39e:	4798      	blx	r3
    b3a0:	4603      	mov	r3, r0
    b3a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
    b3a6:	2b00      	cmp	r3, #0
    b3a8:	d0f1      	beq.n	b38e <n25q256a_erase+0x16e>
		;
	if (n25q->xip_mode) {
    b3aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    b3ac:	7b5b      	ldrb	r3, [r3, #13]
    b3ae:	2b00      	cmp	r3, #0
    b3b0:	d003      	beq.n	b3ba <n25q256a_erase+0x19a>
		n25q256a_xip_confirm(me, true);
    b3b2:	2101      	movs	r1, #1
    b3b4:	68f8      	ldr	r0, [r7, #12]
    b3b6:	4b07      	ldr	r3, [pc, #28]	; (b3d4 <n25q256a_erase+0x1b4>)
    b3b8:	4798      	blx	r3
	}
	return rc;
    b3ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
    b3bc:	4618      	mov	r0, r3
    b3be:	3740      	adds	r7, #64	; 0x40
    b3c0:	46bd      	mov	sp, r7
    b3c2:	bd80      	pop	{r7, pc}
    b3c4:	001fffff 	.word	0x001fffff
    b3c8:	0000ae81 	.word	0x0000ae81
    b3cc:	000020d1 	.word	0x000020d1
    b3d0:	0000ad45 	.word	0x0000ad45
    b3d4:	0000ac79 	.word	0x0000ac79

0000b3d8 <n25q256a_enable_xip>:

int32_t n25q256a_enable_xip(const struct spi_nor_flash *const me)
{
    b3d8:	b590      	push	{r4, r7, lr}
    b3da:	b085      	sub	sp, #20
    b3dc:	af00      	add	r7, sp, #0
    b3de:	6078      	str	r0, [r7, #4]
	struct n25q256a *n25q  = (struct n25q256a *)me;
    b3e0:	687b      	ldr	r3, [r7, #4]
    b3e2:	60fb      	str	r3, [r7, #12]
	uint8_t          width = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    b3e4:	68fb      	ldr	r3, [r7, #12]
    b3e6:	7b1b      	ldrb	r3, [r3, #12]
    b3e8:	2b00      	cmp	r3, #0
    b3ea:	d001      	beq.n	b3f0 <n25q256a_enable_xip+0x18>
    b3ec:	2306      	movs	r3, #6
    b3ee:	e000      	b.n	b3f2 <n25q256a_enable_xip+0x1a>
    b3f0:	2300      	movs	r3, #0
    b3f2:	72fb      	strb	r3, [r7, #11]
	if (!n25q->xip_mode) {
    b3f4:	68fb      	ldr	r3, [r7, #12]
    b3f6:	7b5b      	ldrb	r3, [r3, #13]
    b3f8:	2b00      	cmp	r3, #0
    b3fa:	d129      	bne.n	b450 <n25q256a_enable_xip+0x78>
		uint8_t vcfg = n25q256a_read_reg(me, width, N25Q_READ_VOLATILE_CONFIG_REGISTER);
    b3fc:	7afb      	ldrb	r3, [r7, #11]
    b3fe:	2285      	movs	r2, #133	; 0x85
    b400:	4619      	mov	r1, r3
    b402:	6878      	ldr	r0, [r7, #4]
    b404:	4b15      	ldr	r3, [pc, #84]	; (b45c <n25q256a_enable_xip+0x84>)
    b406:	4798      	blx	r3
    b408:	4603      	mov	r3, r0
    b40a:	72bb      	strb	r3, [r7, #10]
		if (vcfg & (1u << 3)) {
    b40c:	7abb      	ldrb	r3, [r7, #10]
    b40e:	f003 0308 	and.w	r3, r3, #8
    b412:	2b00      	cmp	r3, #0
    b414:	d015      	beq.n	b442 <n25q256a_enable_xip+0x6a>
			vcfg &= ~(1u << 3);
    b416:	7abb      	ldrb	r3, [r7, #10]
    b418:	f023 0308 	bic.w	r3, r3, #8
    b41c:	72bb      	strb	r3, [r7, #10]
			n25q256a_write_reg(me, width, N25Q_WRITE_VOLATILE_CONFIG_REGISTER, vcfg);
    b41e:	7abb      	ldrb	r3, [r7, #10]
    b420:	7af9      	ldrb	r1, [r7, #11]
    b422:	2281      	movs	r2, #129	; 0x81
    b424:	6878      	ldr	r0, [r7, #4]
    b426:	4c0e      	ldr	r4, [pc, #56]	; (b460 <n25q256a_enable_xip+0x88>)
    b428:	47a0      	blx	r4
			while (!(n25q256a_read_reg(me, width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
    b42a:	bf00      	nop
    b42c:	7afb      	ldrb	r3, [r7, #11]
    b42e:	2270      	movs	r2, #112	; 0x70
    b430:	4619      	mov	r1, r3
    b432:	6878      	ldr	r0, [r7, #4]
    b434:	4b09      	ldr	r3, [pc, #36]	; (b45c <n25q256a_enable_xip+0x84>)
    b436:	4798      	blx	r3
    b438:	4603      	mov	r3, r0
    b43a:	f003 0380 	and.w	r3, r3, #128	; 0x80
    b43e:	2b00      	cmp	r3, #0
    b440:	d0f4      	beq.n	b42c <n25q256a_enable_xip+0x54>
				;
		}
		n25q->xip_mode = 1;
    b442:	68fb      	ldr	r3, [r7, #12]
    b444:	2201      	movs	r2, #1
    b446:	735a      	strb	r2, [r3, #13]
		n25q256a_xip_confirm(me, true);
    b448:	2101      	movs	r1, #1
    b44a:	6878      	ldr	r0, [r7, #4]
    b44c:	4b05      	ldr	r3, [pc, #20]	; (b464 <n25q256a_enable_xip+0x8c>)
    b44e:	4798      	blx	r3
	}
	return ERR_NONE;
    b450:	2300      	movs	r3, #0
}
    b452:	4618      	mov	r0, r3
    b454:	3714      	adds	r7, #20
    b456:	46bd      	mov	sp, r7
    b458:	bd90      	pop	{r4, r7, pc}
    b45a:	bf00      	nop
    b45c:	0000ad45 	.word	0x0000ad45
    b460:	0000ade1 	.word	0x0000ade1
    b464:	0000ac79 	.word	0x0000ac79

0000b468 <n25q256a_disable_xip>:

int32_t n25q256a_disable_xip(const struct spi_nor_flash *const me)
{
    b468:	b580      	push	{r7, lr}
    b46a:	b086      	sub	sp, #24
    b46c:	af00      	add	r7, sp, #0
    b46e:	6078      	str	r0, [r7, #4]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    b470:	687b      	ldr	r3, [r7, #4]
    b472:	617b      	str	r3, [r7, #20]
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    b474:	687b      	ldr	r3, [r7, #4]
    b476:	681b      	ldr	r3, [r3, #0]
    b478:	613b      	str	r3, [r7, #16]
	uint8_t                      width = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    b47a:	697b      	ldr	r3, [r7, #20]
    b47c:	7b1b      	ldrb	r3, [r3, #12]
    b47e:	2b00      	cmp	r3, #0
    b480:	d001      	beq.n	b486 <n25q256a_disable_xip+0x1e>
    b482:	2306      	movs	r3, #6
    b484:	e000      	b.n	b488 <n25q256a_disable_xip+0x20>
    b486:	2300      	movs	r3, #0
    b488:	73fb      	strb	r3, [r7, #15]
	uint8_t                      vcfg;
	/* XIP is terminated by driving the XIP confirmation bit to 1.
	 * The device automatically resets volatile configuration register bit 3 to 1.
	 */
	n25q256a_xip_confirm(me, false);
    b48a:	2100      	movs	r1, #0
    b48c:	6878      	ldr	r0, [r7, #4]
    b48e:	4b15      	ldr	r3, [pc, #84]	; (b4e4 <n25q256a_disable_xip+0x7c>)
    b490:	4798      	blx	r3
	vcfg = n25q256a_read_reg(me, width, N25Q_READ_VOLATILE_CONFIG_REGISTER);
    b492:	7bfb      	ldrb	r3, [r7, #15]
    b494:	2285      	movs	r2, #133	; 0x85
    b496:	4619      	mov	r1, r3
    b498:	6878      	ldr	r0, [r7, #4]
    b49a:	4b13      	ldr	r3, [pc, #76]	; (b4e8 <n25q256a_disable_xip+0x80>)
    b49c:	4798      	blx	r3
    b49e:	4603      	mov	r3, r0
    b4a0:	73bb      	strb	r3, [r7, #14]
	if (!(vcfg & (1u << 3))) {
    b4a2:	7bbb      	ldrb	r3, [r7, #14]
    b4a4:	f003 0308 	and.w	r3, r3, #8
    b4a8:	2b00      	cmp	r3, #0
    b4aa:	d113      	bne.n	b4d4 <n25q256a_disable_xip+0x6c>
		if (n25q->pin_exit_xip) {
    b4ac:	697b      	ldr	r3, [r7, #20]
    b4ae:	689b      	ldr	r3, [r3, #8]
    b4b0:	2b00      	cmp	r3, #0
    b4b2:	d00f      	beq.n	b4d4 <n25q256a_disable_xip+0x6c>
			/* Quad    : drive DQ0 = 1 with S# held LOW for  7 clock cycles
			 * Dual    : drive DQ0 = 1 with S# held LOW for 13 clock cycles
			 * Extended: drive DQ0 = 1 with S# held LOW for 25 clock cycles
			 */
			void *hw = descr->dev.prvt;
    b4b4:	693b      	ldr	r3, [r7, #16]
    b4b6:	681b      	ldr	r3, [r3, #0]
    b4b8:	60bb      	str	r3, [r7, #8]
			qspi_sync_disable(descr);
    b4ba:	6938      	ldr	r0, [r7, #16]
    b4bc:	4b0b      	ldr	r3, [pc, #44]	; (b4ec <n25q256a_disable_xip+0x84>)
    b4be:	4798      	blx	r3
			n25q->pin_exit_xip();
    b4c0:	697b      	ldr	r3, [r7, #20]
    b4c2:	689b      	ldr	r3, [r3, #8]
    b4c4:	4798      	blx	r3

			qspi_sync_init(descr, hw);
    b4c6:	68b9      	ldr	r1, [r7, #8]
    b4c8:	6938      	ldr	r0, [r7, #16]
    b4ca:	4b09      	ldr	r3, [pc, #36]	; (b4f0 <n25q256a_disable_xip+0x88>)
    b4cc:	4798      	blx	r3
			qspi_sync_enable(descr);
    b4ce:	6938      	ldr	r0, [r7, #16]
    b4d0:	4b08      	ldr	r3, [pc, #32]	; (b4f4 <n25q256a_disable_xip+0x8c>)
    b4d2:	4798      	blx	r3
		}
	}
	n25q->xip_mode = 0;
    b4d4:	697b      	ldr	r3, [r7, #20]
    b4d6:	2200      	movs	r2, #0
    b4d8:	735a      	strb	r2, [r3, #13]
	return ERR_NONE;
    b4da:	2300      	movs	r3, #0
}
    b4dc:	4618      	mov	r0, r3
    b4de:	3718      	adds	r7, #24
    b4e0:	46bd      	mov	sp, r7
    b4e2:	bd80      	pop	{r7, pc}
    b4e4:	0000ac79 	.word	0x0000ac79
    b4e8:	0000ad45 	.word	0x0000ad45
    b4ec:	00002095 	.word	0x00002095
    b4f0:	0000200d 	.word	0x0000200d
    b4f4:	00002059 	.word	0x00002059

0000b4f8 <spi_nor_flash_construct>:

#include <spi_nor_flash.h>

struct spi_nor_flash *spi_nor_flash_construct(struct spi_nor_flash *const me, void *const io,
                                              const struct spi_nor_flash_interface *const interface)
{
    b4f8:	b480      	push	{r7}
    b4fa:	b085      	sub	sp, #20
    b4fc:	af00      	add	r7, sp, #0
    b4fe:	60f8      	str	r0, [r7, #12]
    b500:	60b9      	str	r1, [r7, #8]
    b502:	607a      	str	r2, [r7, #4]
	me->io        = io;
    b504:	68fb      	ldr	r3, [r7, #12]
    b506:	68ba      	ldr	r2, [r7, #8]
    b508:	601a      	str	r2, [r3, #0]
	me->interface = interface;
    b50a:	68fb      	ldr	r3, [r7, #12]
    b50c:	687a      	ldr	r2, [r7, #4]
    b50e:	605a      	str	r2, [r3, #4]

	return me;
    b510:	68fb      	ldr	r3, [r7, #12]
}
    b512:	4618      	mov	r0, r3
    b514:	3714      	adds	r7, #20
    b516:	46bd      	mov	sp, r7
    b518:	f85d 7b04 	ldr.w	r7, [sp], #4
    b51c:	4770      	bx	lr

0000b51e <usb_get_u16>:
/** \brief Get a word (calculate by little endian 16-bit data)
 *  \param[in] ptr Byte pointer to the address to get data
 *  \return a 16-bit word
 */
static inline uint16_t usb_get_u16(const uint8_t *ptr)
{
    b51e:	b480      	push	{r7}
    b520:	b083      	sub	sp, #12
    b522:	af00      	add	r7, sp, #0
    b524:	6078      	str	r0, [r7, #4]
	return (ptr[0] + (ptr[1] << 8));
    b526:	687b      	ldr	r3, [r7, #4]
    b528:	781b      	ldrb	r3, [r3, #0]
    b52a:	b29a      	uxth	r2, r3
    b52c:	687b      	ldr	r3, [r7, #4]
    b52e:	3301      	adds	r3, #1
    b530:	781b      	ldrb	r3, [r3, #0]
    b532:	b29b      	uxth	r3, r3
    b534:	021b      	lsls	r3, r3, #8
    b536:	b29b      	uxth	r3, r3
    b538:	4413      	add	r3, r2
    b53a:	b29b      	uxth	r3, r3
}
    b53c:	4618      	mov	r0, r3
    b53e:	370c      	adds	r7, #12
    b540:	46bd      	mov	sp, r7
    b542:	f85d 7b04 	ldr.w	r7, [sp], #4
    b546:	4770      	bx	lr

0000b548 <usb_desc_len>:
/** \brief Get descriptor length
 *  \param[in] desc Byte pointer to the descriptor start address
 *  \return descriptor length
 */
static inline uint8_t usb_desc_len(const uint8_t *desc)
{
    b548:	b480      	push	{r7}
    b54a:	b083      	sub	sp, #12
    b54c:	af00      	add	r7, sp, #0
    b54e:	6078      	str	r0, [r7, #4]
	return desc[0];
    b550:	687b      	ldr	r3, [r7, #4]
    b552:	781b      	ldrb	r3, [r3, #0]
}
    b554:	4618      	mov	r0, r3
    b556:	370c      	adds	r7, #12
    b558:	46bd      	mov	sp, r7
    b55a:	f85d 7b04 	ldr.w	r7, [sp], #4
    b55e:	4770      	bx	lr

0000b560 <usb_desc_next>:
/** \brief Get next USB descriptor
 *  \param[in] desc Byte pointer to the descriptor start address
 *  \return Byte pointer to the next descriptor
 */
static inline uint8_t *usb_desc_next(uint8_t *desc)
{
    b560:	b580      	push	{r7, lr}
    b562:	b082      	sub	sp, #8
    b564:	af00      	add	r7, sp, #0
    b566:	6078      	str	r0, [r7, #4]
	return (desc + usb_desc_len(desc));
    b568:	6878      	ldr	r0, [r7, #4]
    b56a:	4b05      	ldr	r3, [pc, #20]	; (b580 <usb_desc_next+0x20>)
    b56c:	4798      	blx	r3
    b56e:	4603      	mov	r3, r0
    b570:	461a      	mov	r2, r3
    b572:	687b      	ldr	r3, [r7, #4]
    b574:	4413      	add	r3, r2
}
    b576:	4618      	mov	r0, r3
    b578:	3708      	adds	r7, #8
    b57a:	46bd      	mov	sp, r7
    b57c:	bd80      	pop	{r7, pc}
    b57e:	bf00      	nop
    b580:	0000b549 	.word	0x0000b549

0000b584 <cdcdf_acm_enable>:
 * \param[in] drv Pointer to USB device function driver
 * \param[in] desc Pointer to USB interface descriptor
 * \return Operation status.
 */
static int32_t cdcdf_acm_enable(struct usbdf_driver *drv, struct usbd_descriptors *desc)
{
    b584:	b580      	push	{r7, lr}
    b586:	b08c      	sub	sp, #48	; 0x30
    b588:	af00      	add	r7, sp, #0
    b58a:	6078      	str	r0, [r7, #4]
    b58c:	6039      	str	r1, [r7, #0]
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
    b58e:	687b      	ldr	r3, [r7, #4]
    b590:	689b      	ldr	r3, [r3, #8]
    b592:	623b      	str	r3, [r7, #32]
	usb_ep_desc_t    ep_desc;
	usb_iface_desc_t ifc_desc;
	uint8_t *        ifc, *ep;
	uint8_t          i;

	ifc = desc->sod;
    b594:	683b      	ldr	r3, [r7, #0]
    b596:	681b      	ldr	r3, [r3, #0]
    b598:	62fb      	str	r3, [r7, #44]	; 0x2c
	for (i = 0; i < 2; i++) {
    b59a:	2300      	movs	r3, #0
    b59c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    b5a0:	e08f      	b.n	b6c2 <cdcdf_acm_enable+0x13e>
		if (NULL == ifc) {
    b5a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b5a4:	2b00      	cmp	r3, #0
    b5a6:	d102      	bne.n	b5ae <cdcdf_acm_enable+0x2a>
			return ERR_NOT_FOUND;
    b5a8:	f06f 0309 	mvn.w	r3, #9
    b5ac:	e092      	b.n	b6d4 <cdcdf_acm_enable+0x150>
		}

		ifc_desc.bInterfaceNumber = ifc[2];
    b5ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b5b0:	789b      	ldrb	r3, [r3, #2]
    b5b2:	73bb      	strb	r3, [r7, #14]
		ifc_desc.bInterfaceClass  = ifc[5];
    b5b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b5b6:	795b      	ldrb	r3, [r3, #5]
    b5b8:	747b      	strb	r3, [r7, #17]

		if ((CDC_CLASS_COMM == ifc_desc.bInterfaceClass) || (CDC_CLASS_DATA == ifc_desc.bInterfaceClass)) {
    b5ba:	7c7b      	ldrb	r3, [r7, #17]
    b5bc:	2b02      	cmp	r3, #2
    b5be:	d002      	beq.n	b5c6 <cdcdf_acm_enable+0x42>
    b5c0:	7c7b      	ldrb	r3, [r7, #17]
    b5c2:	2b0a      	cmp	r3, #10
    b5c4:	d121      	bne.n	b60a <cdcdf_acm_enable+0x86>
			if (func_data->func_iface[i] == ifc_desc.bInterfaceNumber) { // Initialized
    b5c6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    b5ca:	6a3a      	ldr	r2, [r7, #32]
    b5cc:	5cd2      	ldrb	r2, [r2, r3]
    b5ce:	7bbb      	ldrb	r3, [r7, #14]
    b5d0:	429a      	cmp	r2, r3
    b5d2:	d102      	bne.n	b5da <cdcdf_acm_enable+0x56>
				return ERR_ALREADY_INITIALIZED;
    b5d4:	f06f 0311 	mvn.w	r3, #17
    b5d8:	e07c      	b.n	b6d4 <cdcdf_acm_enable+0x150>
			} else if (func_data->func_iface[i] != 0xFF) { // Occupied
    b5da:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    b5de:	6a3a      	ldr	r2, [r7, #32]
    b5e0:	5cd3      	ldrb	r3, [r2, r3]
    b5e2:	2bff      	cmp	r3, #255	; 0xff
    b5e4:	d002      	beq.n	b5ec <cdcdf_acm_enable+0x68>
				return ERR_NO_RESOURCE;
    b5e6:	f06f 031b 	mvn.w	r3, #27
    b5ea:	e073      	b.n	b6d4 <cdcdf_acm_enable+0x150>
			} else {
				func_data->func_iface[i] = ifc_desc.bInterfaceNumber;
    b5ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    b5f0:	7bb9      	ldrb	r1, [r7, #14]
    b5f2:	6a3a      	ldr	r2, [r7, #32]
    b5f4:	54d1      	strb	r1, [r2, r3]
			if (func_data->func_iface[i] == ifc_desc.bInterfaceNumber) { // Initialized
    b5f6:	bf00      	nop
		} else { // Not supported by this function driver
			return ERR_NOT_FOUND;
		}

		// Install endpoints
		ep = usb_find_desc(ifc, desc->eod, USB_DT_ENDPOINT);
    b5f8:	683b      	ldr	r3, [r7, #0]
    b5fa:	685b      	ldr	r3, [r3, #4]
    b5fc:	2205      	movs	r2, #5
    b5fe:	4619      	mov	r1, r3
    b600:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    b602:	4b36      	ldr	r3, [pc, #216]	; (b6dc <cdcdf_acm_enable+0x158>)
    b604:	4798      	blx	r3
    b606:	62b8      	str	r0, [r7, #40]	; 0x28
		while (NULL != ep) {
    b608:	e047      	b.n	b69a <cdcdf_acm_enable+0x116>
			return ERR_NOT_FOUND;
    b60a:	f06f 0309 	mvn.w	r3, #9
    b60e:	e061      	b.n	b6d4 <cdcdf_acm_enable+0x150>
			ep_desc.bEndpointAddress = ep[2];
    b610:	6abb      	ldr	r3, [r7, #40]	; 0x28
    b612:	789b      	ldrb	r3, [r3, #2]
    b614:	76bb      	strb	r3, [r7, #26]
			ep_desc.bmAttributes     = ep[3];
    b616:	6abb      	ldr	r3, [r7, #40]	; 0x28
    b618:	78db      	ldrb	r3, [r3, #3]
    b61a:	76fb      	strb	r3, [r7, #27]
			ep_desc.wMaxPacketSize   = usb_get_u16(ep + 4);
    b61c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    b61e:	3304      	adds	r3, #4
    b620:	4618      	mov	r0, r3
    b622:	4b2f      	ldr	r3, [pc, #188]	; (b6e0 <cdcdf_acm_enable+0x15c>)
    b624:	4798      	blx	r3
    b626:	4603      	mov	r3, r0
    b628:	83bb      	strh	r3, [r7, #28]
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    b62a:	7ebb      	ldrb	r3, [r7, #26]
    b62c:	7ef9      	ldrb	r1, [r7, #27]
    b62e:	8bba      	ldrh	r2, [r7, #28]
    b630:	4618      	mov	r0, r3
    b632:	4b2c      	ldr	r3, [pc, #176]	; (b6e4 <cdcdf_acm_enable+0x160>)
    b634:	4798      	blx	r3
    b636:	4603      	mov	r3, r0
    b638:	2b00      	cmp	r3, #0
    b63a:	d002      	beq.n	b642 <cdcdf_acm_enable+0xbe>
				return ERR_NOT_INITIALIZED;
    b63c:	f06f 0313 	mvn.w	r3, #19
    b640:	e048      	b.n	b6d4 <cdcdf_acm_enable+0x150>
			}
			if (ep_desc.bEndpointAddress & USB_EP_DIR_IN) {
    b642:	7ebb      	ldrb	r3, [r7, #26]
    b644:	b25b      	sxtb	r3, r3
    b646:	2b00      	cmp	r3, #0
    b648:	da0f      	bge.n	b66a <cdcdf_acm_enable+0xe6>
				func_data->func_ep_in[i] = ep_desc.bEndpointAddress;
    b64a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    b64e:	7eb9      	ldrb	r1, [r7, #26]
    b650:	6a3a      	ldr	r2, [r7, #32]
    b652:	4413      	add	r3, r2
    b654:	460a      	mov	r2, r1
    b656:	709a      	strb	r2, [r3, #2]
				usb_d_ep_enable(func_data->func_ep_in[i]);
    b658:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    b65c:	6a3a      	ldr	r2, [r7, #32]
    b65e:	4413      	add	r3, r2
    b660:	789b      	ldrb	r3, [r3, #2]
    b662:	4618      	mov	r0, r3
    b664:	4b20      	ldr	r3, [pc, #128]	; (b6e8 <cdcdf_acm_enable+0x164>)
    b666:	4798      	blx	r3
    b668:	e007      	b.n	b67a <cdcdf_acm_enable+0xf6>
			} else {
				func_data->func_ep_out = ep_desc.bEndpointAddress;
    b66a:	7eba      	ldrb	r2, [r7, #26]
    b66c:	6a3b      	ldr	r3, [r7, #32]
    b66e:	711a      	strb	r2, [r3, #4]
				usb_d_ep_enable(func_data->func_ep_out);
    b670:	6a3b      	ldr	r3, [r7, #32]
    b672:	791b      	ldrb	r3, [r3, #4]
    b674:	4618      	mov	r0, r3
    b676:	4b1c      	ldr	r3, [pc, #112]	; (b6e8 <cdcdf_acm_enable+0x164>)
    b678:	4798      	blx	r3
			}
			desc->sod = ep;
    b67a:	683b      	ldr	r3, [r7, #0]
    b67c:	6aba      	ldr	r2, [r7, #40]	; 0x28
    b67e:	601a      	str	r2, [r3, #0]
			ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    b680:	683b      	ldr	r3, [r7, #0]
    b682:	681b      	ldr	r3, [r3, #0]
    b684:	4618      	mov	r0, r3
    b686:	4b19      	ldr	r3, [pc, #100]	; (b6ec <cdcdf_acm_enable+0x168>)
    b688:	4798      	blx	r3
    b68a:	4602      	mov	r2, r0
    b68c:	683b      	ldr	r3, [r7, #0]
    b68e:	685b      	ldr	r3, [r3, #4]
    b690:	4619      	mov	r1, r3
    b692:	4610      	mov	r0, r2
    b694:	4b16      	ldr	r3, [pc, #88]	; (b6f0 <cdcdf_acm_enable+0x16c>)
    b696:	4798      	blx	r3
    b698:	62b8      	str	r0, [r7, #40]	; 0x28
		while (NULL != ep) {
    b69a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    b69c:	2b00      	cmp	r3, #0
    b69e:	d1b7      	bne.n	b610 <cdcdf_acm_enable+0x8c>
		}
		ifc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_INTERFACE);
    b6a0:	683b      	ldr	r3, [r7, #0]
    b6a2:	681b      	ldr	r3, [r3, #0]
    b6a4:	4618      	mov	r0, r3
    b6a6:	4b11      	ldr	r3, [pc, #68]	; (b6ec <cdcdf_acm_enable+0x168>)
    b6a8:	4798      	blx	r3
    b6aa:	683b      	ldr	r3, [r7, #0]
    b6ac:	685b      	ldr	r3, [r3, #4]
    b6ae:	2204      	movs	r2, #4
    b6b0:	4619      	mov	r1, r3
    b6b2:	4b0a      	ldr	r3, [pc, #40]	; (b6dc <cdcdf_acm_enable+0x158>)
    b6b4:	4798      	blx	r3
    b6b6:	62f8      	str	r0, [r7, #44]	; 0x2c
	for (i = 0; i < 2; i++) {
    b6b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    b6bc:	3301      	adds	r3, #1
    b6be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    b6c2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    b6c6:	2b01      	cmp	r3, #1
    b6c8:	f67f af6b 	bls.w	b5a2 <cdcdf_acm_enable+0x1e>
	}
	// Installed
	_cdcdf_acm_funcd.enabled = true;
    b6cc:	4b09      	ldr	r3, [pc, #36]	; (b6f4 <cdcdf_acm_enable+0x170>)
    b6ce:	2201      	movs	r2, #1
    b6d0:	715a      	strb	r2, [r3, #5]
	return ERR_NONE;
    b6d2:	2300      	movs	r3, #0
}
    b6d4:	4618      	mov	r0, r3
    b6d6:	3730      	adds	r7, #48	; 0x30
    b6d8:	46bd      	mov	sp, r7
    b6da:	bd80      	pop	{r7, pc}
    b6dc:	0000c809 	.word	0x0000c809
    b6e0:	0000b51f 	.word	0x0000b51f
    b6e4:	000029b1 	.word	0x000029b1
    b6e8:	00002a9d 	.word	0x00002a9d
    b6ec:	0000b561 	.word	0x0000b561
    b6f0:	0000c865 	.word	0x0000c865
    b6f4:	200011a0 	.word	0x200011a0

0000b6f8 <cdcdf_acm_disable>:
 * \param[in] drv Pointer to USB device function driver
 * \param[in] desc Pointer to USB device descriptor
 * \return Operation status.
 */
static int32_t cdcdf_acm_disable(struct usbdf_driver *drv, struct usbd_descriptors *desc)
{
    b6f8:	b580      	push	{r7, lr}
    b6fa:	b088      	sub	sp, #32
    b6fc:	af00      	add	r7, sp, #0
    b6fe:	6078      	str	r0, [r7, #4]
    b700:	6039      	str	r1, [r7, #0]
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
    b702:	687b      	ldr	r3, [r7, #4]
    b704:	689b      	ldr	r3, [r3, #8]
    b706:	61bb      	str	r3, [r7, #24]

	usb_iface_desc_t ifc_desc;
	uint8_t          i;

	if (desc) {
    b708:	683b      	ldr	r3, [r7, #0]
    b70a:	2b00      	cmp	r3, #0
    b70c:	d00c      	beq.n	b728 <cdcdf_acm_disable+0x30>
		ifc_desc.bInterfaceClass = desc->sod[5];
    b70e:	683b      	ldr	r3, [r7, #0]
    b710:	681b      	ldr	r3, [r3, #0]
    b712:	795b      	ldrb	r3, [r3, #5]
    b714:	747b      	strb	r3, [r7, #17]
		// Check interface
		if ((ifc_desc.bInterfaceClass != CDC_CLASS_COMM) && (ifc_desc.bInterfaceClass != CDC_CLASS_DATA)) {
    b716:	7c7b      	ldrb	r3, [r7, #17]
    b718:	2b02      	cmp	r3, #2
    b71a:	d005      	beq.n	b728 <cdcdf_acm_disable+0x30>
    b71c:	7c7b      	ldrb	r3, [r7, #17]
    b71e:	2b0a      	cmp	r3, #10
    b720:	d002      	beq.n	b728 <cdcdf_acm_disable+0x30>
			return ERR_NOT_FOUND;
    b722:	f06f 0309 	mvn.w	r3, #9
    b726:	e035      	b.n	b794 <cdcdf_acm_disable+0x9c>
		}
	}

	for (i = 0; i < 2; i++) {
    b728:	2300      	movs	r3, #0
    b72a:	77fb      	strb	r3, [r7, #31]
    b72c:	e01f      	b.n	b76e <cdcdf_acm_disable+0x76>
		if (func_data->func_iface[i] == 0xFF) {
    b72e:	7ffb      	ldrb	r3, [r7, #31]
    b730:	69ba      	ldr	r2, [r7, #24]
    b732:	5cd3      	ldrb	r3, [r2, r3]
    b734:	2bff      	cmp	r3, #255	; 0xff
    b736:	d016      	beq.n	b766 <cdcdf_acm_disable+0x6e>
			continue;
		} else {
			func_data->func_iface[i] = 0xFF;
    b738:	7ffb      	ldrb	r3, [r7, #31]
    b73a:	69ba      	ldr	r2, [r7, #24]
    b73c:	21ff      	movs	r1, #255	; 0xff
    b73e:	54d1      	strb	r1, [r2, r3]
			if (func_data->func_ep_in[i] != 0xFF) {
    b740:	7ffb      	ldrb	r3, [r7, #31]
    b742:	69ba      	ldr	r2, [r7, #24]
    b744:	4413      	add	r3, r2
    b746:	789b      	ldrb	r3, [r3, #2]
    b748:	2bff      	cmp	r3, #255	; 0xff
    b74a:	d00d      	beq.n	b768 <cdcdf_acm_disable+0x70>
				usb_d_ep_deinit(func_data->func_ep_in[i]);
    b74c:	7ffb      	ldrb	r3, [r7, #31]
    b74e:	69ba      	ldr	r2, [r7, #24]
    b750:	4413      	add	r3, r2
    b752:	789b      	ldrb	r3, [r3, #2]
    b754:	4618      	mov	r0, r3
    b756:	4b11      	ldr	r3, [pc, #68]	; (b79c <cdcdf_acm_disable+0xa4>)
    b758:	4798      	blx	r3
				func_data->func_ep_in[i] = 0xFF;
    b75a:	7ffb      	ldrb	r3, [r7, #31]
    b75c:	69ba      	ldr	r2, [r7, #24]
    b75e:	4413      	add	r3, r2
    b760:	22ff      	movs	r2, #255	; 0xff
    b762:	709a      	strb	r2, [r3, #2]
    b764:	e000      	b.n	b768 <cdcdf_acm_disable+0x70>
			continue;
    b766:	bf00      	nop
	for (i = 0; i < 2; i++) {
    b768:	7ffb      	ldrb	r3, [r7, #31]
    b76a:	3301      	adds	r3, #1
    b76c:	77fb      	strb	r3, [r7, #31]
    b76e:	7ffb      	ldrb	r3, [r7, #31]
    b770:	2b01      	cmp	r3, #1
    b772:	d9dc      	bls.n	b72e <cdcdf_acm_disable+0x36>
			}
		}
	}

	if (func_data->func_ep_out != 0xFF) {
    b774:	69bb      	ldr	r3, [r7, #24]
    b776:	791b      	ldrb	r3, [r3, #4]
    b778:	2bff      	cmp	r3, #255	; 0xff
    b77a:	d007      	beq.n	b78c <cdcdf_acm_disable+0x94>
		usb_d_ep_deinit(func_data->func_ep_out);
    b77c:	69bb      	ldr	r3, [r7, #24]
    b77e:	791b      	ldrb	r3, [r3, #4]
    b780:	4618      	mov	r0, r3
    b782:	4b06      	ldr	r3, [pc, #24]	; (b79c <cdcdf_acm_disable+0xa4>)
    b784:	4798      	blx	r3
		func_data->func_ep_out = 0xFF;
    b786:	69bb      	ldr	r3, [r7, #24]
    b788:	22ff      	movs	r2, #255	; 0xff
    b78a:	711a      	strb	r2, [r3, #4]
	}

	_cdcdf_acm_funcd.enabled = false;
    b78c:	4b04      	ldr	r3, [pc, #16]	; (b7a0 <cdcdf_acm_disable+0xa8>)
    b78e:	2200      	movs	r2, #0
    b790:	715a      	strb	r2, [r3, #5]
	return ERR_NONE;
    b792:	2300      	movs	r3, #0
}
    b794:	4618      	mov	r0, r3
    b796:	3720      	adds	r7, #32
    b798:	46bd      	mov	sp, r7
    b79a:	bd80      	pop	{r7, pc}
    b79c:	00002a4d 	.word	0x00002a4d
    b7a0:	200011a0 	.word	0x200011a0

0000b7a4 <cdcdf_acm_ctrl>:
 * \param[in] ctrl USB device general function control type
 * \param[in] param Parameter pointer
 * \return Operation status.
 */
static int32_t cdcdf_acm_ctrl(struct usbdf_driver *drv, enum usbdf_control ctrl, void *param)
{
    b7a4:	b580      	push	{r7, lr}
    b7a6:	b084      	sub	sp, #16
    b7a8:	af00      	add	r7, sp, #0
    b7aa:	60f8      	str	r0, [r7, #12]
    b7ac:	460b      	mov	r3, r1
    b7ae:	607a      	str	r2, [r7, #4]
    b7b0:	72fb      	strb	r3, [r7, #11]
	switch (ctrl) {
    b7b2:	7afb      	ldrb	r3, [r7, #11]
    b7b4:	2b01      	cmp	r3, #1
    b7b6:	d009      	beq.n	b7cc <cdcdf_acm_ctrl+0x28>
    b7b8:	2b02      	cmp	r3, #2
    b7ba:	d00d      	beq.n	b7d8 <cdcdf_acm_ctrl+0x34>
    b7bc:	2b00      	cmp	r3, #0
    b7be:	d10e      	bne.n	b7de <cdcdf_acm_ctrl+0x3a>
	case USBDF_ENABLE:
		return cdcdf_acm_enable(drv, (struct usbd_descriptors *)param);
    b7c0:	6879      	ldr	r1, [r7, #4]
    b7c2:	68f8      	ldr	r0, [r7, #12]
    b7c4:	4b09      	ldr	r3, [pc, #36]	; (b7ec <cdcdf_acm_ctrl+0x48>)
    b7c6:	4798      	blx	r3
    b7c8:	4603      	mov	r3, r0
    b7ca:	e00a      	b.n	b7e2 <cdcdf_acm_ctrl+0x3e>

	case USBDF_DISABLE:
		return cdcdf_acm_disable(drv, (struct usbd_descriptors *)param);
    b7cc:	6879      	ldr	r1, [r7, #4]
    b7ce:	68f8      	ldr	r0, [r7, #12]
    b7d0:	4b07      	ldr	r3, [pc, #28]	; (b7f0 <cdcdf_acm_ctrl+0x4c>)
    b7d2:	4798      	blx	r3
    b7d4:	4603      	mov	r3, r0
    b7d6:	e004      	b.n	b7e2 <cdcdf_acm_ctrl+0x3e>

	case USBDF_GET_IFACE:
		return ERR_UNSUPPORTED_OP;
    b7d8:	f06f 031a 	mvn.w	r3, #26
    b7dc:	e001      	b.n	b7e2 <cdcdf_acm_ctrl+0x3e>

	default:
		return ERR_INVALID_ARG;
    b7de:	f06f 030c 	mvn.w	r3, #12
	}
}
    b7e2:	4618      	mov	r0, r3
    b7e4:	3710      	adds	r7, #16
    b7e6:	46bd      	mov	sp, r7
    b7e8:	bd80      	pop	{r7, pc}
    b7ea:	bf00      	nop
    b7ec:	0000b585 	.word	0x0000b585
    b7f0:	0000b6f9 	.word	0x0000b6f9

0000b7f4 <cdcdf_acm_set_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_set_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    b7f4:	b590      	push	{r4, r7, lr}
    b7f6:	b087      	sub	sp, #28
    b7f8:	af00      	add	r7, sp, #0
    b7fa:	4603      	mov	r3, r0
    b7fc:	6039      	str	r1, [r7, #0]
    b7fe:	71fb      	strb	r3, [r7, #7]
    b800:	4613      	mov	r3, r2
    b802:	71bb      	strb	r3, [r7, #6]
	struct usb_cdc_line_coding line_coding_tmp;
	uint16_t                   len      = req->wLength;
    b804:	683b      	ldr	r3, [r7, #0]
    b806:	799a      	ldrb	r2, [r3, #6]
    b808:	79db      	ldrb	r3, [r3, #7]
    b80a:	021b      	lsls	r3, r3, #8
    b80c:	4313      	orrs	r3, r2
    b80e:	82fb      	strh	r3, [r7, #22]
	uint8_t *                  ctrl_buf = usbdc_get_ctrl_buffer();
    b810:	4b2b      	ldr	r3, [pc, #172]	; (b8c0 <cdcdf_acm_set_req+0xcc>)
    b812:	4798      	blx	r3
    b814:	6138      	str	r0, [r7, #16]

	switch (req->bRequest) {
    b816:	683b      	ldr	r3, [r7, #0]
    b818:	785b      	ldrb	r3, [r3, #1]
    b81a:	2b20      	cmp	r3, #32
    b81c:	d002      	beq.n	b824 <cdcdf_acm_set_req+0x30>
    b81e:	2b22      	cmp	r3, #34	; 0x22
    b820:	d034      	beq.n	b88c <cdcdf_acm_set_req+0x98>
    b822:	e046      	b.n	b8b2 <cdcdf_acm_set_req+0xbe>
	case USB_REQ_CDC_SET_LINE_CODING:
		if (sizeof(struct usb_cdc_line_coding) != len) {
    b824:	8afb      	ldrh	r3, [r7, #22]
    b826:	2b07      	cmp	r3, #7
    b828:	d002      	beq.n	b830 <cdcdf_acm_set_req+0x3c>
			return ERR_INVALID_DATA;
    b82a:	f04f 33ff 	mov.w	r3, #4294967295
    b82e:	e042      	b.n	b8b6 <cdcdf_acm_set_req+0xc2>
		}
		if (USB_SETUP_STAGE == stage) {
    b830:	79bb      	ldrb	r3, [r7, #6]
    b832:	2b00      	cmp	r3, #0
    b834:	d107      	bne.n	b846 <cdcdf_acm_set_req+0x52>
			return usbdc_xfer(ep, ctrl_buf, len, false);
    b836:	8afa      	ldrh	r2, [r7, #22]
    b838:	79f8      	ldrb	r0, [r7, #7]
    b83a:	2300      	movs	r3, #0
    b83c:	6939      	ldr	r1, [r7, #16]
    b83e:	4c21      	ldr	r4, [pc, #132]	; (b8c4 <cdcdf_acm_set_req+0xd0>)
    b840:	47a0      	blx	r4
    b842:	4603      	mov	r3, r0
    b844:	e037      	b.n	b8b6 <cdcdf_acm_set_req+0xc2>
		} else {
			memcpy(&line_coding_tmp, ctrl_buf, sizeof(struct usb_cdc_line_coding));
    b846:	693a      	ldr	r2, [r7, #16]
    b848:	f107 0308 	add.w	r3, r7, #8
    b84c:	6810      	ldr	r0, [r2, #0]
    b84e:	6018      	str	r0, [r3, #0]
    b850:	8891      	ldrh	r1, [r2, #4]
    b852:	7992      	ldrb	r2, [r2, #6]
    b854:	8099      	strh	r1, [r3, #4]
    b856:	719a      	strb	r2, [r3, #6]
			if ((NULL == cdcdf_acm_set_line_coding) || (true == cdcdf_acm_set_line_coding(&line_coding_tmp))) {
    b858:	4b1b      	ldr	r3, [pc, #108]	; (b8c8 <cdcdf_acm_set_req+0xd4>)
    b85a:	681b      	ldr	r3, [r3, #0]
    b85c:	2b00      	cmp	r3, #0
    b85e:	d008      	beq.n	b872 <cdcdf_acm_set_req+0x7e>
    b860:	4b19      	ldr	r3, [pc, #100]	; (b8c8 <cdcdf_acm_set_req+0xd4>)
    b862:	681b      	ldr	r3, [r3, #0]
    b864:	f107 0208 	add.w	r2, r7, #8
    b868:	4610      	mov	r0, r2
    b86a:	4798      	blx	r3
    b86c:	4603      	mov	r3, r0
    b86e:	2b00      	cmp	r3, #0
    b870:	d00a      	beq.n	b888 <cdcdf_acm_set_req+0x94>
				usbd_cdc_line_coding = line_coding_tmp;
    b872:	4b16      	ldr	r3, [pc, #88]	; (b8cc <cdcdf_acm_set_req+0xd8>)
    b874:	f107 0208 	add.w	r2, r7, #8
    b878:	e892 0003 	ldmia.w	r2, {r0, r1}
    b87c:	6018      	str	r0, [r3, #0]
    b87e:	3304      	adds	r3, #4
    b880:	8019      	strh	r1, [r3, #0]
    b882:	3302      	adds	r3, #2
    b884:	0c0a      	lsrs	r2, r1, #16
    b886:	701a      	strb	r2, [r3, #0]
			}
			return ERR_NONE;
    b888:	2300      	movs	r3, #0
    b88a:	e014      	b.n	b8b6 <cdcdf_acm_set_req+0xc2>
		}
	case USB_REQ_CDC_SET_CONTROL_LINE_STATE:
		usbdc_xfer(0, NULL, 0, 0);
    b88c:	2300      	movs	r3, #0
    b88e:	2200      	movs	r2, #0
    b890:	2100      	movs	r1, #0
    b892:	2000      	movs	r0, #0
    b894:	4c0b      	ldr	r4, [pc, #44]	; (b8c4 <cdcdf_acm_set_req+0xd0>)
    b896:	47a0      	blx	r4
		if (NULL != cdcdf_acm_notify_state) {
    b898:	4b0d      	ldr	r3, [pc, #52]	; (b8d0 <cdcdf_acm_set_req+0xdc>)
    b89a:	681b      	ldr	r3, [r3, #0]
    b89c:	2b00      	cmp	r3, #0
    b89e:	d006      	beq.n	b8ae <cdcdf_acm_set_req+0xba>
			cdcdf_acm_notify_state(req->wValue);
    b8a0:	4b0b      	ldr	r3, [pc, #44]	; (b8d0 <cdcdf_acm_set_req+0xdc>)
    b8a2:	681b      	ldr	r3, [r3, #0]
    b8a4:	683a      	ldr	r2, [r7, #0]
    b8a6:	8852      	ldrh	r2, [r2, #2]
    b8a8:	b292      	uxth	r2, r2
    b8aa:	4610      	mov	r0, r2
    b8ac:	4798      	blx	r3
		}
		return ERR_NONE;
    b8ae:	2300      	movs	r3, #0
    b8b0:	e001      	b.n	b8b6 <cdcdf_acm_set_req+0xc2>
	default:
		return ERR_INVALID_ARG;
    b8b2:	f06f 030c 	mvn.w	r3, #12
	}
}
    b8b6:	4618      	mov	r0, r3
    b8b8:	371c      	adds	r7, #28
    b8ba:	46bd      	mov	sp, r7
    b8bc:	bd90      	pop	{r4, r7, pc}
    b8be:	bf00      	nop
    b8c0:	0000c705 	.word	0x0000c705
    b8c4:	0000c579 	.word	0x0000c579
    b8c8:	200011b4 	.word	0x200011b4
    b8cc:	200011a8 	.word	0x200011a8
    b8d0:	200011b0 	.word	0x200011b0

0000b8d4 <cdcdf_acm_get_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_get_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    b8d4:	b590      	push	{r4, r7, lr}
    b8d6:	b085      	sub	sp, #20
    b8d8:	af00      	add	r7, sp, #0
    b8da:	4603      	mov	r3, r0
    b8dc:	6039      	str	r1, [r7, #0]
    b8de:	71fb      	strb	r3, [r7, #7]
    b8e0:	4613      	mov	r3, r2
    b8e2:	71bb      	strb	r3, [r7, #6]
	uint16_t len = req->wLength;
    b8e4:	683b      	ldr	r3, [r7, #0]
    b8e6:	799a      	ldrb	r2, [r3, #6]
    b8e8:	79db      	ldrb	r3, [r3, #7]
    b8ea:	021b      	lsls	r3, r3, #8
    b8ec:	4313      	orrs	r3, r2
    b8ee:	81fb      	strh	r3, [r7, #14]

	if (USB_DATA_STAGE == stage) {
    b8f0:	79bb      	ldrb	r3, [r7, #6]
    b8f2:	2b01      	cmp	r3, #1
    b8f4:	d101      	bne.n	b8fa <cdcdf_acm_get_req+0x26>
		return ERR_NONE;
    b8f6:	2300      	movs	r3, #0
    b8f8:	e013      	b.n	b922 <cdcdf_acm_get_req+0x4e>
	}

	switch (req->bRequest) {
    b8fa:	683b      	ldr	r3, [r7, #0]
    b8fc:	785b      	ldrb	r3, [r3, #1]
    b8fe:	2b21      	cmp	r3, #33	; 0x21
    b900:	d10d      	bne.n	b91e <cdcdf_acm_get_req+0x4a>
	case USB_REQ_CDC_GET_LINE_CODING:
		if (sizeof(struct usb_cdc_line_coding) != len) {
    b902:	89fb      	ldrh	r3, [r7, #14]
    b904:	2b07      	cmp	r3, #7
    b906:	d002      	beq.n	b90e <cdcdf_acm_get_req+0x3a>
			return ERR_INVALID_DATA;
    b908:	f04f 33ff 	mov.w	r3, #4294967295
    b90c:	e009      	b.n	b922 <cdcdf_acm_get_req+0x4e>
		}
		return usbdc_xfer(ep, (uint8_t *)&usbd_cdc_line_coding, len, false);
    b90e:	89fa      	ldrh	r2, [r7, #14]
    b910:	79f8      	ldrb	r0, [r7, #7]
    b912:	2300      	movs	r3, #0
    b914:	4905      	ldr	r1, [pc, #20]	; (b92c <cdcdf_acm_get_req+0x58>)
    b916:	4c06      	ldr	r4, [pc, #24]	; (b930 <cdcdf_acm_get_req+0x5c>)
    b918:	47a0      	blx	r4
    b91a:	4603      	mov	r3, r0
    b91c:	e001      	b.n	b922 <cdcdf_acm_get_req+0x4e>
	default:
		return ERR_INVALID_ARG;
    b91e:	f06f 030c 	mvn.w	r3, #12
	}
}
    b922:	4618      	mov	r0, r3
    b924:	3714      	adds	r7, #20
    b926:	46bd      	mov	sp, r7
    b928:	bd90      	pop	{r4, r7, pc}
    b92a:	bf00      	nop
    b92c:	200011a8 	.word	0x200011a8
    b930:	0000c579 	.word	0x0000c579

0000b934 <cdcdf_acm_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    b934:	b580      	push	{r7, lr}
    b936:	b082      	sub	sp, #8
    b938:	af00      	add	r7, sp, #0
    b93a:	4603      	mov	r3, r0
    b93c:	6039      	str	r1, [r7, #0]
    b93e:	71fb      	strb	r3, [r7, #7]
    b940:	4613      	mov	r3, r2
    b942:	71bb      	strb	r3, [r7, #6]
	if (0x01 != ((req->bmRequestType >> 5) & 0x03)) { // class request
    b944:	683b      	ldr	r3, [r7, #0]
    b946:	781b      	ldrb	r3, [r3, #0]
    b948:	095b      	lsrs	r3, r3, #5
    b94a:	b2db      	uxtb	r3, r3
    b94c:	f003 0303 	and.w	r3, r3, #3
    b950:	2b01      	cmp	r3, #1
    b952:	d002      	beq.n	b95a <cdcdf_acm_req+0x26>
		return ERR_NOT_FOUND;
    b954:	f06f 0309 	mvn.w	r3, #9
    b958:	e026      	b.n	b9a8 <cdcdf_acm_req+0x74>
	}
	if ((req->wIndex == _cdcdf_acm_funcd.func_iface[0]) || (req->wIndex == _cdcdf_acm_funcd.func_iface[1])) {
    b95a:	683b      	ldr	r3, [r7, #0]
    b95c:	889b      	ldrh	r3, [r3, #4]
    b95e:	b29a      	uxth	r2, r3
    b960:	4b13      	ldr	r3, [pc, #76]	; (b9b0 <cdcdf_acm_req+0x7c>)
    b962:	781b      	ldrb	r3, [r3, #0]
    b964:	b29b      	uxth	r3, r3
    b966:	429a      	cmp	r2, r3
    b968:	d007      	beq.n	b97a <cdcdf_acm_req+0x46>
    b96a:	683b      	ldr	r3, [r7, #0]
    b96c:	889b      	ldrh	r3, [r3, #4]
    b96e:	b29a      	uxth	r2, r3
    b970:	4b0f      	ldr	r3, [pc, #60]	; (b9b0 <cdcdf_acm_req+0x7c>)
    b972:	785b      	ldrb	r3, [r3, #1]
    b974:	b29b      	uxth	r3, r3
    b976:	429a      	cmp	r2, r3
    b978:	d114      	bne.n	b9a4 <cdcdf_acm_req+0x70>
		if (req->bmRequestType & USB_EP_DIR_IN) {
    b97a:	683b      	ldr	r3, [r7, #0]
    b97c:	781b      	ldrb	r3, [r3, #0]
    b97e:	b25b      	sxtb	r3, r3
    b980:	2b00      	cmp	r3, #0
    b982:	da07      	bge.n	b994 <cdcdf_acm_req+0x60>
			return cdcdf_acm_get_req(ep, req, stage);
    b984:	79ba      	ldrb	r2, [r7, #6]
    b986:	79fb      	ldrb	r3, [r7, #7]
    b988:	6839      	ldr	r1, [r7, #0]
    b98a:	4618      	mov	r0, r3
    b98c:	4b09      	ldr	r3, [pc, #36]	; (b9b4 <cdcdf_acm_req+0x80>)
    b98e:	4798      	blx	r3
    b990:	4603      	mov	r3, r0
    b992:	e009      	b.n	b9a8 <cdcdf_acm_req+0x74>
		} else {
			return cdcdf_acm_set_req(ep, req, stage);
    b994:	79ba      	ldrb	r2, [r7, #6]
    b996:	79fb      	ldrb	r3, [r7, #7]
    b998:	6839      	ldr	r1, [r7, #0]
    b99a:	4618      	mov	r0, r3
    b99c:	4b06      	ldr	r3, [pc, #24]	; (b9b8 <cdcdf_acm_req+0x84>)
    b99e:	4798      	blx	r3
    b9a0:	4603      	mov	r3, r0
    b9a2:	e001      	b.n	b9a8 <cdcdf_acm_req+0x74>
		}
	} else {
		return ERR_NOT_FOUND;
    b9a4:	f06f 0309 	mvn.w	r3, #9
	}
}
    b9a8:	4618      	mov	r0, r3
    b9aa:	3708      	adds	r7, #8
    b9ac:	46bd      	mov	sp, r7
    b9ae:	bd80      	pop	{r7, pc}
    b9b0:	200011a0 	.word	0x200011a0
    b9b4:	0000b8d5 	.word	0x0000b8d5
    b9b8:	0000b7f5 	.word	0x0000b7f5

0000b9bc <cdcdf_acm_init>:

/**
 * \brief Initialize the USB CDC ACM Function Driver
 */
int32_t cdcdf_acm_init(void)
{
    b9bc:	b580      	push	{r7, lr}
    b9be:	af00      	add	r7, sp, #0
	if (usbdc_get_state() > USBD_S_POWER) {
    b9c0:	4b0b      	ldr	r3, [pc, #44]	; (b9f0 <cdcdf_acm_init+0x34>)
    b9c2:	4798      	blx	r3
    b9c4:	4603      	mov	r3, r0
    b9c6:	2b01      	cmp	r3, #1
    b9c8:	d902      	bls.n	b9d0 <cdcdf_acm_init+0x14>
		return ERR_DENIED;
    b9ca:	f06f 0310 	mvn.w	r3, #16
    b9ce:	e00d      	b.n	b9ec <cdcdf_acm_init+0x30>
	}

	_cdcdf_acm.ctrl      = cdcdf_acm_ctrl;
    b9d0:	4b08      	ldr	r3, [pc, #32]	; (b9f4 <cdcdf_acm_init+0x38>)
    b9d2:	4a09      	ldr	r2, [pc, #36]	; (b9f8 <cdcdf_acm_init+0x3c>)
    b9d4:	605a      	str	r2, [r3, #4]
	_cdcdf_acm.func_data = &_cdcdf_acm_funcd;
    b9d6:	4b07      	ldr	r3, [pc, #28]	; (b9f4 <cdcdf_acm_init+0x38>)
    b9d8:	4a08      	ldr	r2, [pc, #32]	; (b9fc <cdcdf_acm_init+0x40>)
    b9da:	609a      	str	r2, [r3, #8]

	usbdc_register_function(&_cdcdf_acm);
    b9dc:	4805      	ldr	r0, [pc, #20]	; (b9f4 <cdcdf_acm_init+0x38>)
    b9de:	4b08      	ldr	r3, [pc, #32]	; (ba00 <cdcdf_acm_init+0x44>)
    b9e0:	4798      	blx	r3
	usbdc_register_handler(USBDC_HDL_REQ, &cdcdf_acm_req_h);
    b9e2:	4908      	ldr	r1, [pc, #32]	; (ba04 <cdcdf_acm_init+0x48>)
    b9e4:	2001      	movs	r0, #1
    b9e6:	4b08      	ldr	r3, [pc, #32]	; (ba08 <cdcdf_acm_init+0x4c>)
    b9e8:	4798      	blx	r3
	return ERR_NONE;
    b9ea:	2300      	movs	r3, #0
}
    b9ec:	4618      	mov	r0, r3
    b9ee:	bd80      	pop	{r7, pc}
    b9f0:	0000c71d 	.word	0x0000c71d
    b9f4:	20001194 	.word	0x20001194
    b9f8:	0000b7a5 	.word	0x0000b7a5
    b9fc:	200011a0 	.word	0x200011a0
    ba00:	0000c685 	.word	0x0000c685
    ba04:	20000208 	.word	0x20000208
    ba08:	0000c5b5 	.word	0x0000c5b5

0000ba0c <usb_get_u16>:
{
    ba0c:	b480      	push	{r7}
    ba0e:	b083      	sub	sp, #12
    ba10:	af00      	add	r7, sp, #0
    ba12:	6078      	str	r0, [r7, #4]
	return (ptr[0] + (ptr[1] << 8));
    ba14:	687b      	ldr	r3, [r7, #4]
    ba16:	781b      	ldrb	r3, [r3, #0]
    ba18:	b29a      	uxth	r2, r3
    ba1a:	687b      	ldr	r3, [r7, #4]
    ba1c:	3301      	adds	r3, #1
    ba1e:	781b      	ldrb	r3, [r3, #0]
    ba20:	b29b      	uxth	r3, r3
    ba22:	021b      	lsls	r3, r3, #8
    ba24:	b29b      	uxth	r3, r3
    ba26:	4413      	add	r3, r2
    ba28:	b29b      	uxth	r3, r3
}
    ba2a:	4618      	mov	r0, r3
    ba2c:	370c      	adds	r7, #12
    ba2e:	46bd      	mov	sp, r7
    ba30:	f85d 7b04 	ldr.w	r7, [sp], #4
    ba34:	4770      	bx	lr

0000ba36 <usb_desc_len>:
{
    ba36:	b480      	push	{r7}
    ba38:	b083      	sub	sp, #12
    ba3a:	af00      	add	r7, sp, #0
    ba3c:	6078      	str	r0, [r7, #4]
	return desc[0];
    ba3e:	687b      	ldr	r3, [r7, #4]
    ba40:	781b      	ldrb	r3, [r3, #0]
}
    ba42:	4618      	mov	r0, r3
    ba44:	370c      	adds	r7, #12
    ba46:	46bd      	mov	sp, r7
    ba48:	f85d 7b04 	ldr.w	r7, [sp], #4
    ba4c:	4770      	bx	lr
	...

0000ba50 <usb_desc_next>:
{
    ba50:	b580      	push	{r7, lr}
    ba52:	b082      	sub	sp, #8
    ba54:	af00      	add	r7, sp, #0
    ba56:	6078      	str	r0, [r7, #4]
	return (desc + usb_desc_len(desc));
    ba58:	6878      	ldr	r0, [r7, #4]
    ba5a:	4b05      	ldr	r3, [pc, #20]	; (ba70 <usb_desc_next+0x20>)
    ba5c:	4798      	blx	r3
    ba5e:	4603      	mov	r3, r0
    ba60:	461a      	mov	r2, r3
    ba62:	687b      	ldr	r3, [r7, #4]
    ba64:	4413      	add	r3, r2
}
    ba66:	4618      	mov	r0, r3
    ba68:	3708      	adds	r7, #8
    ba6a:	46bd      	mov	sp, r7
    ba6c:	bd80      	pop	{r7, pc}
    ba6e:	bf00      	nop
    ba70:	0000ba37 	.word	0x0000ba37

0000ba74 <usb_cfg_desc_total_len>:
/** \brief Get wTotalLength of USB Configuration Descriptor
 *  \param[in] cfg_desc Byte pointer to the descriptor start address
 *  \return 16-bit total length of configuration list
 */
static inline uint16_t usb_cfg_desc_total_len(const uint8_t *cfg_desc)
{
    ba74:	b580      	push	{r7, lr}
    ba76:	b082      	sub	sp, #8
    ba78:	af00      	add	r7, sp, #0
    ba7a:	6078      	str	r0, [r7, #4]
	return usb_get_u16(cfg_desc + 2);
    ba7c:	687b      	ldr	r3, [r7, #4]
    ba7e:	3302      	adds	r3, #2
    ba80:	4618      	mov	r0, r3
    ba82:	4b03      	ldr	r3, [pc, #12]	; (ba90 <usb_cfg_desc_total_len+0x1c>)
    ba84:	4798      	blx	r3
    ba86:	4603      	mov	r3, r0
}
    ba88:	4618      	mov	r0, r3
    ba8a:	3708      	adds	r7, #8
    ba8c:	46bd      	mov	sp, r7
    ba8e:	bd80      	pop	{r7, pc}
    ba90:	0000ba0d 	.word	0x0000ba0d

0000ba94 <usbdc_get_dev_desc>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_dev_desc(const uint8_t ep, struct usb_req *req)
{
    ba94:	b590      	push	{r4, r7, lr}
    ba96:	b085      	sub	sp, #20
    ba98:	af00      	add	r7, sp, #0
    ba9a:	4603      	mov	r3, r0
    ba9c:	6039      	str	r1, [r7, #0]
    ba9e:	71fb      	strb	r3, [r7, #7]
	uint8_t *dev_desc = NULL;
    baa0:	2300      	movs	r3, #0
    baa2:	60fb      	str	r3, [r7, #12]
	uint16_t length   = req->wLength;
    baa4:	683b      	ldr	r3, [r7, #0]
    baa6:	799a      	ldrb	r2, [r3, #6]
    baa8:	79db      	ldrb	r3, [r3, #7]
    baaa:	021b      	lsls	r3, r3, #8
    baac:	4313      	orrs	r3, r2
    baae:	817b      	strh	r3, [r7, #10]
	if (length > 0x12) {
    bab0:	897b      	ldrh	r3, [r7, #10]
    bab2:	2b12      	cmp	r3, #18
    bab4:	d901      	bls.n	baba <usbdc_get_dev_desc+0x26>
		length = 0x12;
    bab6:	2312      	movs	r3, #18
    bab8:	817b      	strh	r3, [r7, #10]
		dev_desc = usb_find_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, USB_DT_DEVICE);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!dev_desc) {
    baba:	68fb      	ldr	r3, [r7, #12]
    babc:	2b00      	cmp	r3, #0
    babe:	d10a      	bne.n	bad6 <usbdc_get_dev_desc+0x42>
		dev_desc = usb_find_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, USB_DT_DEVICE);
    bac0:	4b0f      	ldr	r3, [pc, #60]	; (bb00 <usbdc_get_dev_desc+0x6c>)
    bac2:	681b      	ldr	r3, [r3, #0]
    bac4:	6818      	ldr	r0, [r3, #0]
    bac6:	4b0e      	ldr	r3, [pc, #56]	; (bb00 <usbdc_get_dev_desc+0x6c>)
    bac8:	681b      	ldr	r3, [r3, #0]
    baca:	685b      	ldr	r3, [r3, #4]
    bacc:	2201      	movs	r2, #1
    bace:	4619      	mov	r1, r3
    bad0:	4b0c      	ldr	r3, [pc, #48]	; (bb04 <usbdc_get_dev_desc+0x70>)
    bad2:	4798      	blx	r3
    bad4:	60f8      	str	r0, [r7, #12]
	}
	if (!dev_desc) {
    bad6:	68fb      	ldr	r3, [r7, #12]
    bad8:	2b00      	cmp	r3, #0
    bada:	d101      	bne.n	bae0 <usbdc_get_dev_desc+0x4c>
		return false;
    badc:	2300      	movs	r3, #0
    bade:	e00b      	b.n	baf8 <usbdc_get_dev_desc+0x64>
	}
	if (ERR_NONE != usbdc_xfer(ep, dev_desc, length, false)) {
    bae0:	897a      	ldrh	r2, [r7, #10]
    bae2:	79f8      	ldrb	r0, [r7, #7]
    bae4:	2300      	movs	r3, #0
    bae6:	68f9      	ldr	r1, [r7, #12]
    bae8:	4c07      	ldr	r4, [pc, #28]	; (bb08 <usbdc_get_dev_desc+0x74>)
    baea:	47a0      	blx	r4
    baec:	4603      	mov	r3, r0
    baee:	2b00      	cmp	r3, #0
    baf0:	d001      	beq.n	baf6 <usbdc_get_dev_desc+0x62>
		return false;
    baf2:	2300      	movs	r3, #0
    baf4:	e000      	b.n	baf8 <usbdc_get_dev_desc+0x64>
	}
	return true;
    baf6:	2301      	movs	r3, #1
}
    baf8:	4618      	mov	r0, r3
    bafa:	3714      	adds	r7, #20
    bafc:	46bd      	mov	sp, r7
    bafe:	bd90      	pop	{r4, r7, pc}
    bb00:	200011b8 	.word	0x200011b8
    bb04:	0000c809 	.word	0x0000c809
    bb08:	0000c579 	.word	0x0000c579

0000bb0c <usbdc_get_cfg_desc>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_cfg_desc(const uint8_t ep, struct usb_req *req)
{
    bb0c:	b590      	push	{r4, r7, lr}
    bb0e:	b087      	sub	sp, #28
    bb10:	af00      	add	r7, sp, #0
    bb12:	4603      	mov	r3, r0
    bb14:	6039      	str	r1, [r7, #0]
    bb16:	71fb      	strb	r3, [r7, #7]
	uint8_t *cfg_desc = NULL;
    bb18:	2300      	movs	r3, #0
    bb1a:	617b      	str	r3, [r7, #20]
	uint16_t total_len;
	uint16_t length   = req->wLength;
    bb1c:	683b      	ldr	r3, [r7, #0]
    bb1e:	799a      	ldrb	r2, [r3, #6]
    bb20:	79db      	ldrb	r3, [r3, #7]
    bb22:	021b      	lsls	r3, r3, #8
    bb24:	4313      	orrs	r3, r2
    bb26:	827b      	strh	r3, [r7, #18]
	uint8_t  index    = req->wValue & 0x00FF;
    bb28:	683b      	ldr	r3, [r7, #0]
    bb2a:	885b      	ldrh	r3, [r3, #2]
    bb2c:	b29b      	uxth	r3, r3
    bb2e:	743b      	strb	r3, [r7, #16]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    bb30:	8a7a      	ldrh	r2, [r7, #18]
    bb32:	4b1e      	ldr	r3, [pc, #120]	; (bbac <usbdc_get_cfg_desc+0xa0>)
    bb34:	7f1b      	ldrb	r3, [r3, #28]
    bb36:	3b01      	subs	r3, #1
    bb38:	4013      	ands	r3, r2
    bb3a:	2b00      	cmp	r3, #0
    bb3c:	bf0c      	ite	eq
    bb3e:	2301      	moveq	r3, #1
    bb40:	2300      	movne	r3, #0
    bb42:	747b      	strb	r3, [r7, #17]
		cfg_desc = usb_find_cfg_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, index + 1);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!cfg_desc) {
    bb44:	697b      	ldr	r3, [r7, #20]
    bb46:	2b00      	cmp	r3, #0
    bb48:	d10c      	bne.n	bb64 <usbdc_get_cfg_desc+0x58>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index + 1);
    bb4a:	4b18      	ldr	r3, [pc, #96]	; (bbac <usbdc_get_cfg_desc+0xa0>)
    bb4c:	681b      	ldr	r3, [r3, #0]
    bb4e:	6818      	ldr	r0, [r3, #0]
    bb50:	4b16      	ldr	r3, [pc, #88]	; (bbac <usbdc_get_cfg_desc+0xa0>)
    bb52:	681b      	ldr	r3, [r3, #0]
    bb54:	6859      	ldr	r1, [r3, #4]
    bb56:	7c3b      	ldrb	r3, [r7, #16]
    bb58:	3301      	adds	r3, #1
    bb5a:	b2db      	uxtb	r3, r3
    bb5c:	461a      	mov	r2, r3
    bb5e:	4b14      	ldr	r3, [pc, #80]	; (bbb0 <usbdc_get_cfg_desc+0xa4>)
    bb60:	4798      	blx	r3
    bb62:	6178      	str	r0, [r7, #20]
	}
	if (NULL == cfg_desc) {
    bb64:	697b      	ldr	r3, [r7, #20]
    bb66:	2b00      	cmp	r3, #0
    bb68:	d101      	bne.n	bb6e <usbdc_get_cfg_desc+0x62>
		return false;
    bb6a:	2300      	movs	r3, #0
    bb6c:	e019      	b.n	bba2 <usbdc_get_cfg_desc+0x96>
	}
	total_len = usb_cfg_desc_total_len(cfg_desc);
    bb6e:	6978      	ldr	r0, [r7, #20]
    bb70:	4b10      	ldr	r3, [pc, #64]	; (bbb4 <usbdc_get_cfg_desc+0xa8>)
    bb72:	4798      	blx	r3
    bb74:	4603      	mov	r3, r0
    bb76:	81fb      	strh	r3, [r7, #14]
	if (length <= total_len) {
    bb78:	8a7a      	ldrh	r2, [r7, #18]
    bb7a:	89fb      	ldrh	r3, [r7, #14]
    bb7c:	429a      	cmp	r2, r3
    bb7e:	d802      	bhi.n	bb86 <usbdc_get_cfg_desc+0x7a>
		need_zlp = false;
    bb80:	2300      	movs	r3, #0
    bb82:	747b      	strb	r3, [r7, #17]
    bb84:	e001      	b.n	bb8a <usbdc_get_cfg_desc+0x7e>
	} else {
		length = total_len;
    bb86:	89fb      	ldrh	r3, [r7, #14]
    bb88:	827b      	strh	r3, [r7, #18]
	}
	if (ERR_NONE != usbdc_xfer(ep, cfg_desc, length, need_zlp)) {
    bb8a:	8a7a      	ldrh	r2, [r7, #18]
    bb8c:	7c7b      	ldrb	r3, [r7, #17]
    bb8e:	79f8      	ldrb	r0, [r7, #7]
    bb90:	6979      	ldr	r1, [r7, #20]
    bb92:	4c09      	ldr	r4, [pc, #36]	; (bbb8 <usbdc_get_cfg_desc+0xac>)
    bb94:	47a0      	blx	r4
    bb96:	4603      	mov	r3, r0
    bb98:	2b00      	cmp	r3, #0
    bb9a:	d001      	beq.n	bba0 <usbdc_get_cfg_desc+0x94>
		return false;
    bb9c:	2300      	movs	r3, #0
    bb9e:	e000      	b.n	bba2 <usbdc_get_cfg_desc+0x96>
	}
	return true;
    bba0:	2301      	movs	r3, #1
}
    bba2:	4618      	mov	r0, r3
    bba4:	371c      	adds	r7, #28
    bba6:	46bd      	mov	sp, r7
    bba8:	bd90      	pop	{r4, r7, pc}
    bbaa:	bf00      	nop
    bbac:	200011b8 	.word	0x200011b8
    bbb0:	0000c8c9 	.word	0x0000c8c9
    bbb4:	0000ba75 	.word	0x0000ba75
    bbb8:	0000c579 	.word	0x0000c579

0000bbbc <usbdc_get_str_desc>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_str_desc(const uint8_t ep, struct usb_req *req)
{
    bbbc:	b590      	push	{r4, r7, lr}
    bbbe:	b085      	sub	sp, #20
    bbc0:	af00      	add	r7, sp, #0
    bbc2:	4603      	mov	r3, r0
    bbc4:	6039      	str	r1, [r7, #0]
    bbc6:	71fb      	strb	r3, [r7, #7]
	uint8_t *str_desc;
	uint16_t length   = req->wLength;
    bbc8:	683b      	ldr	r3, [r7, #0]
    bbca:	799a      	ldrb	r2, [r3, #6]
    bbcc:	79db      	ldrb	r3, [r3, #7]
    bbce:	021b      	lsls	r3, r3, #8
    bbd0:	4313      	orrs	r3, r2
    bbd2:	81fb      	strh	r3, [r7, #14]
	uint8_t  index    = req->wValue & 0x00FF;
    bbd4:	683b      	ldr	r3, [r7, #0]
    bbd6:	885b      	ldrh	r3, [r3, #2]
    bbd8:	b29b      	uxth	r3, r3
    bbda:	733b      	strb	r3, [r7, #12]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    bbdc:	89fa      	ldrh	r2, [r7, #14]
    bbde:	4b1a      	ldr	r3, [pc, #104]	; (bc48 <usbdc_get_str_desc+0x8c>)
    bbe0:	7f1b      	ldrb	r3, [r3, #28]
    bbe2:	3b01      	subs	r3, #1
    bbe4:	4013      	ands	r3, r2
    bbe6:	2b00      	cmp	r3, #0
    bbe8:	bf0c      	ite	eq
    bbea:	2301      	moveq	r3, #1
    bbec:	2300      	movne	r3, #0
    bbee:	737b      	strb	r3, [r7, #13]
	/* All string are in default descriptors block: FS/LS */
	str_desc = usb_find_str_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index);
    bbf0:	4b15      	ldr	r3, [pc, #84]	; (bc48 <usbdc_get_str_desc+0x8c>)
    bbf2:	681b      	ldr	r3, [r3, #0]
    bbf4:	6818      	ldr	r0, [r3, #0]
    bbf6:	4b14      	ldr	r3, [pc, #80]	; (bc48 <usbdc_get_str_desc+0x8c>)
    bbf8:	681b      	ldr	r3, [r3, #0]
    bbfa:	685b      	ldr	r3, [r3, #4]
    bbfc:	7b3a      	ldrb	r2, [r7, #12]
    bbfe:	4619      	mov	r1, r3
    bc00:	4b12      	ldr	r3, [pc, #72]	; (bc4c <usbdc_get_str_desc+0x90>)
    bc02:	4798      	blx	r3
    bc04:	60b8      	str	r0, [r7, #8]
	if (NULL == str_desc) {
    bc06:	68bb      	ldr	r3, [r7, #8]
    bc08:	2b00      	cmp	r3, #0
    bc0a:	d101      	bne.n	bc10 <usbdc_get_str_desc+0x54>
		return false;
    bc0c:	2300      	movs	r3, #0
    bc0e:	e017      	b.n	bc40 <usbdc_get_str_desc+0x84>
	}
	if (length <= str_desc[0]) {
    bc10:	68bb      	ldr	r3, [r7, #8]
    bc12:	781b      	ldrb	r3, [r3, #0]
    bc14:	b29b      	uxth	r3, r3
    bc16:	89fa      	ldrh	r2, [r7, #14]
    bc18:	429a      	cmp	r2, r3
    bc1a:	d802      	bhi.n	bc22 <usbdc_get_str_desc+0x66>
		need_zlp = false;
    bc1c:	2300      	movs	r3, #0
    bc1e:	737b      	strb	r3, [r7, #13]
    bc20:	e002      	b.n	bc28 <usbdc_get_str_desc+0x6c>
	} else {
		length = str_desc[0];
    bc22:	68bb      	ldr	r3, [r7, #8]
    bc24:	781b      	ldrb	r3, [r3, #0]
    bc26:	81fb      	strh	r3, [r7, #14]
	}
	if (ERR_NONE != usbdc_xfer(ep, str_desc, length, need_zlp)) {
    bc28:	89fa      	ldrh	r2, [r7, #14]
    bc2a:	7b7b      	ldrb	r3, [r7, #13]
    bc2c:	79f8      	ldrb	r0, [r7, #7]
    bc2e:	68b9      	ldr	r1, [r7, #8]
    bc30:	4c07      	ldr	r4, [pc, #28]	; (bc50 <usbdc_get_str_desc+0x94>)
    bc32:	47a0      	blx	r4
    bc34:	4603      	mov	r3, r0
    bc36:	2b00      	cmp	r3, #0
    bc38:	d001      	beq.n	bc3e <usbdc_get_str_desc+0x82>
		return false;
    bc3a:	2300      	movs	r3, #0
    bc3c:	e000      	b.n	bc40 <usbdc_get_str_desc+0x84>
	}
	return true;
    bc3e:	2301      	movs	r3, #1
}
    bc40:	4618      	mov	r0, r3
    bc42:	3714      	adds	r7, #20
    bc44:	46bd      	mov	sp, r7
    bc46:	bd90      	pop	{r4, r7, pc}
    bc48:	200011b8 	.word	0x200011b8
    bc4c:	0000c941 	.word	0x0000c941
    bc50:	0000c579 	.word	0x0000c579

0000bc54 <usbdc_get_desc_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_desc_req(const uint8_t ep, struct usb_req *req)
{
    bc54:	b580      	push	{r7, lr}
    bc56:	b084      	sub	sp, #16
    bc58:	af00      	add	r7, sp, #0
    bc5a:	4603      	mov	r3, r0
    bc5c:	6039      	str	r1, [r7, #0]
    bc5e:	71fb      	strb	r3, [r7, #7]
	uint8_t type = (uint8_t)(req->wValue >> 8);
    bc60:	683b      	ldr	r3, [r7, #0]
    bc62:	885b      	ldrh	r3, [r3, #2]
    bc64:	b29b      	uxth	r3, r3
    bc66:	0a1b      	lsrs	r3, r3, #8
    bc68:	b29b      	uxth	r3, r3
    bc6a:	73fb      	strb	r3, [r7, #15]
	switch (type) {
    bc6c:	7bfb      	ldrb	r3, [r7, #15]
    bc6e:	2b02      	cmp	r3, #2
    bc70:	d00d      	beq.n	bc8e <usbdc_get_desc_req+0x3a>
    bc72:	2b03      	cmp	r3, #3
    bc74:	d012      	beq.n	bc9c <usbdc_get_desc_req+0x48>
    bc76:	2b01      	cmp	r3, #1
    bc78:	d002      	beq.n	bc80 <usbdc_get_desc_req+0x2c>
		return usbdc_get_othspdcfg_desc(ep, req);
#endif
	case USB_DT_STRING:
		return usbdc_get_str_desc(ep, req);
	default:
		break;
    bc7a:	bf00      	nop
	}
	return false;
    bc7c:	2300      	movs	r3, #0
    bc7e:	e013      	b.n	bca8 <usbdc_get_desc_req+0x54>
		return usbdc_get_dev_desc(ep, req);
    bc80:	79fb      	ldrb	r3, [r7, #7]
    bc82:	6839      	ldr	r1, [r7, #0]
    bc84:	4618      	mov	r0, r3
    bc86:	4b0a      	ldr	r3, [pc, #40]	; (bcb0 <usbdc_get_desc_req+0x5c>)
    bc88:	4798      	blx	r3
    bc8a:	4603      	mov	r3, r0
    bc8c:	e00c      	b.n	bca8 <usbdc_get_desc_req+0x54>
		return usbdc_get_cfg_desc(ep, req);
    bc8e:	79fb      	ldrb	r3, [r7, #7]
    bc90:	6839      	ldr	r1, [r7, #0]
    bc92:	4618      	mov	r0, r3
    bc94:	4b07      	ldr	r3, [pc, #28]	; (bcb4 <usbdc_get_desc_req+0x60>)
    bc96:	4798      	blx	r3
    bc98:	4603      	mov	r3, r0
    bc9a:	e005      	b.n	bca8 <usbdc_get_desc_req+0x54>
		return usbdc_get_str_desc(ep, req);
    bc9c:	79fb      	ldrb	r3, [r7, #7]
    bc9e:	6839      	ldr	r1, [r7, #0]
    bca0:	4618      	mov	r0, r3
    bca2:	4b05      	ldr	r3, [pc, #20]	; (bcb8 <usbdc_get_desc_req+0x64>)
    bca4:	4798      	blx	r3
    bca6:	4603      	mov	r3, r0
}
    bca8:	4618      	mov	r0, r3
    bcaa:	3710      	adds	r7, #16
    bcac:	46bd      	mov	sp, r7
    bcae:	bd80      	pop	{r7, pc}
    bcb0:	0000ba95 	.word	0x0000ba95
    bcb4:	0000bb0d 	.word	0x0000bb0d
    bcb8:	0000bbbd 	.word	0x0000bbbd

0000bcbc <usbdc_get_status_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_status_req(const uint8_t ep, const struct usb_req *req)
{
    bcbc:	b590      	push	{r4, r7, lr}
    bcbe:	b085      	sub	sp, #20
    bcc0:	af00      	add	r7, sp, #0
    bcc2:	4603      	mov	r3, r0
    bcc4:	6039      	str	r1, [r7, #0]
    bcc6:	71fb      	strb	r3, [r7, #7]
	int32_t st;
	(void)ep;

	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    bcc8:	683b      	ldr	r3, [r7, #0]
    bcca:	781b      	ldrb	r3, [r3, #0]
    bccc:	f003 031f 	and.w	r3, r3, #31
    bcd0:	2b00      	cmp	r3, #0
    bcd2:	db1b      	blt.n	bd0c <usbdc_get_status_req+0x50>
    bcd4:	2b01      	cmp	r3, #1
    bcd6:	dd02      	ble.n	bcde <usbdc_get_status_req+0x22>
    bcd8:	2b02      	cmp	r3, #2
    bcda:	d003      	beq.n	bce4 <usbdc_get_status_req+0x28>
    bcdc:	e016      	b.n	bd0c <usbdc_get_status_req+0x50>
	case USB_REQT_RECIP_DEVICE:
	case USB_REQT_RECIP_INTERFACE:
		st = 0;
    bcde:	2300      	movs	r3, #0
    bce0:	60fb      	str	r3, [r7, #12]
		break;
    bce2:	e015      	b.n	bd10 <usbdc_get_status_req+0x54>
	case USB_REQT_RECIP_ENDPOINT:
		st = usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_GET);
    bce4:	683b      	ldr	r3, [r7, #0]
    bce6:	889b      	ldrh	r3, [r3, #4]
    bce8:	b29b      	uxth	r3, r3
    bcea:	b2db      	uxtb	r3, r3
    bcec:	2102      	movs	r1, #2
    bcee:	4618      	mov	r0, r3
    bcf0:	4b0f      	ldr	r3, [pc, #60]	; (bd30 <usbdc_get_status_req+0x74>)
    bcf2:	4798      	blx	r3
    bcf4:	4603      	mov	r3, r0
    bcf6:	60fb      	str	r3, [r7, #12]
		if (st < 0) {
    bcf8:	68fb      	ldr	r3, [r7, #12]
    bcfa:	2b00      	cmp	r3, #0
    bcfc:	da01      	bge.n	bd02 <usbdc_get_status_req+0x46>
			return false;
    bcfe:	2300      	movs	r3, #0
    bd00:	e012      	b.n	bd28 <usbdc_get_status_req+0x6c>
		}
		st = st & 0x1;
    bd02:	68fb      	ldr	r3, [r7, #12]
    bd04:	f003 0301 	and.w	r3, r3, #1
    bd08:	60fb      	str	r3, [r7, #12]
		break;
    bd0a:	e001      	b.n	bd10 <usbdc_get_status_req+0x54>
	default:
		return false;
    bd0c:	2300      	movs	r3, #0
    bd0e:	e00b      	b.n	bd28 <usbdc_get_status_req+0x6c>
	}
	memcpy(usbdc.ctrl_buf, &st, 2);
    bd10:	4b08      	ldr	r3, [pc, #32]	; (bd34 <usbdc_get_status_req+0x78>)
    bd12:	695b      	ldr	r3, [r3, #20]
    bd14:	89ba      	ldrh	r2, [r7, #12]
    bd16:	801a      	strh	r2, [r3, #0]
	usbdc_xfer(ep, usbdc.ctrl_buf, 2, false);
    bd18:	4b06      	ldr	r3, [pc, #24]	; (bd34 <usbdc_get_status_req+0x78>)
    bd1a:	6959      	ldr	r1, [r3, #20]
    bd1c:	79f8      	ldrb	r0, [r7, #7]
    bd1e:	2300      	movs	r3, #0
    bd20:	2202      	movs	r2, #2
    bd22:	4c05      	ldr	r4, [pc, #20]	; (bd38 <usbdc_get_status_req+0x7c>)
    bd24:	47a0      	blx	r4
	return true;
    bd26:	2301      	movs	r3, #1
}
    bd28:	4618      	mov	r0, r3
    bd2a:	3714      	adds	r7, #20
    bd2c:	46bd      	mov	sp, r7
    bd2e:	bd90      	pop	{r4, r7, pc}
    bd30:	00002cf9 	.word	0x00002cf9
    bd34:	200011b8 	.word	0x200011b8
    bd38:	0000c579 	.word	0x0000c579

0000bd3c <usbdc_get_interface>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_interface(struct usb_req *req)
{
    bd3c:	b590      	push	{r4, r7, lr}
    bd3e:	b085      	sub	sp, #20
    bd40:	af00      	add	r7, sp, #0
    bd42:	6078      	str	r0, [r7, #4]
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    bd44:	4b1f      	ldr	r3, [pc, #124]	; (bdc4 <usbdc_get_interface+0x88>)
    bd46:	691b      	ldr	r3, [r3, #16]
    bd48:	60fb      	str	r3, [r7, #12]
	int32_t              rc;

	if (!(usbdc.ifc_alt_map & (1 << req->wIndex))) {
    bd4a:	4b1e      	ldr	r3, [pc, #120]	; (bdc4 <usbdc_get_interface+0x88>)
    bd4c:	7f5b      	ldrb	r3, [r3, #29]
    bd4e:	461a      	mov	r2, r3
    bd50:	687b      	ldr	r3, [r7, #4]
    bd52:	889b      	ldrh	r3, [r3, #4]
    bd54:	b29b      	uxth	r3, r3
    bd56:	fa42 f303 	asr.w	r3, r2, r3
    bd5a:	f003 0301 	and.w	r3, r3, #1
    bd5e:	2b00      	cmp	r3, #0
    bd60:	d128      	bne.n	bdb4 <usbdc_get_interface+0x78>
		/* Return 0 if alternate is not used */
		usbdc.ctrl_buf[0] = 0;
    bd62:	4b18      	ldr	r3, [pc, #96]	; (bdc4 <usbdc_get_interface+0x88>)
    bd64:	695b      	ldr	r3, [r3, #20]
    bd66:	2200      	movs	r2, #0
    bd68:	701a      	strb	r2, [r3, #0]
		usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    bd6a:	4b16      	ldr	r3, [pc, #88]	; (bdc4 <usbdc_get_interface+0x88>)
    bd6c:	6959      	ldr	r1, [r3, #20]
    bd6e:	2300      	movs	r3, #0
    bd70:	2201      	movs	r2, #1
    bd72:	2000      	movs	r0, #0
    bd74:	4c14      	ldr	r4, [pc, #80]	; (bdc8 <usbdc_get_interface+0x8c>)
    bd76:	47a0      	blx	r4
		return true;
    bd78:	2301      	movs	r3, #1
    bd7a:	e01f      	b.n	bdbc <usbdc_get_interface+0x80>
	}
	/* Check function drivers only if alternate is used */
	while (NULL != func) {
		if (0 > (rc = func->ctrl(func, USBDF_GET_IFACE, req))) {
    bd7c:	68fb      	ldr	r3, [r7, #12]
    bd7e:	685b      	ldr	r3, [r3, #4]
    bd80:	687a      	ldr	r2, [r7, #4]
    bd82:	2102      	movs	r1, #2
    bd84:	68f8      	ldr	r0, [r7, #12]
    bd86:	4798      	blx	r3
    bd88:	60b8      	str	r0, [r7, #8]
    bd8a:	68bb      	ldr	r3, [r7, #8]
    bd8c:	2b00      	cmp	r3, #0
    bd8e:	da03      	bge.n	bd98 <usbdc_get_interface+0x5c>
			func = func->next;
    bd90:	68fb      	ldr	r3, [r7, #12]
    bd92:	681b      	ldr	r3, [r3, #0]
    bd94:	60fb      	str	r3, [r7, #12]
    bd96:	e00d      	b.n	bdb4 <usbdc_get_interface+0x78>
		} else {
			usbdc.ctrl_buf[0] = (uint8_t)rc;
    bd98:	4b0a      	ldr	r3, [pc, #40]	; (bdc4 <usbdc_get_interface+0x88>)
    bd9a:	695b      	ldr	r3, [r3, #20]
    bd9c:	68ba      	ldr	r2, [r7, #8]
    bd9e:	b2d2      	uxtb	r2, r2
    bda0:	701a      	strb	r2, [r3, #0]
			usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    bda2:	4b08      	ldr	r3, [pc, #32]	; (bdc4 <usbdc_get_interface+0x88>)
    bda4:	6959      	ldr	r1, [r3, #20]
    bda6:	2300      	movs	r3, #0
    bda8:	2201      	movs	r2, #1
    bdaa:	2000      	movs	r0, #0
    bdac:	4c06      	ldr	r4, [pc, #24]	; (bdc8 <usbdc_get_interface+0x8c>)
    bdae:	47a0      	blx	r4
			return true;
    bdb0:	2301      	movs	r3, #1
    bdb2:	e003      	b.n	bdbc <usbdc_get_interface+0x80>
	while (NULL != func) {
    bdb4:	68fb      	ldr	r3, [r7, #12]
    bdb6:	2b00      	cmp	r3, #0
    bdb8:	d1e0      	bne.n	bd7c <usbdc_get_interface+0x40>
		}
	}
	return false;
    bdba:	2300      	movs	r3, #0
}
    bdbc:	4618      	mov	r0, r3
    bdbe:	3714      	adds	r7, #20
    bdc0:	46bd      	mov	sp, r7
    bdc2:	bd90      	pop	{r4, r7, pc}
    bdc4:	200011b8 	.word	0x200011b8
    bdc8:	0000c579 	.word	0x0000c579

0000bdcc <usbdc_get_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_req(const uint8_t ep, struct usb_req *req)
{
    bdcc:	b590      	push	{r4, r7, lr}
    bdce:	b083      	sub	sp, #12
    bdd0:	af00      	add	r7, sp, #0
    bdd2:	4603      	mov	r3, r0
    bdd4:	6039      	str	r1, [r7, #0]
    bdd6:	71fb      	strb	r3, [r7, #7]
	switch (req->bRequest) {
    bdd8:	683b      	ldr	r3, [r7, #0]
    bdda:	785b      	ldrb	r3, [r3, #1]
    bddc:	2b0a      	cmp	r3, #10
    bdde:	d83a      	bhi.n	be56 <usbdc_get_req+0x8a>
    bde0:	a201      	add	r2, pc, #4	; (adr r2, bde8 <usbdc_get_req+0x1c>)
    bde2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    bde6:	bf00      	nop
    bde8:	0000be3f 	.word	0x0000be3f
    bdec:	0000be57 	.word	0x0000be57
    bdf0:	0000be57 	.word	0x0000be57
    bdf4:	0000be57 	.word	0x0000be57
    bdf8:	0000be57 	.word	0x0000be57
    bdfc:	0000be57 	.word	0x0000be57
    be00:	0000be15 	.word	0x0000be15
    be04:	0000be57 	.word	0x0000be57
    be08:	0000be23 	.word	0x0000be23
    be0c:	0000be57 	.word	0x0000be57
    be10:	0000be4d 	.word	0x0000be4d
	case USB_REQ_GET_DESC:
		return usbdc_get_desc_req(ep, req);
    be14:	79fb      	ldrb	r3, [r7, #7]
    be16:	6839      	ldr	r1, [r7, #0]
    be18:	4618      	mov	r0, r3
    be1a:	4b11      	ldr	r3, [pc, #68]	; (be60 <usbdc_get_req+0x94>)
    be1c:	4798      	blx	r3
    be1e:	4603      	mov	r3, r0
    be20:	e01a      	b.n	be58 <usbdc_get_req+0x8c>
	case USB_REQ_GET_CONFIG:
		*(uint8_t *)usbdc.ctrl_buf = usbdc.cfg_value;
    be22:	4b10      	ldr	r3, [pc, #64]	; (be64 <usbdc_get_req+0x98>)
    be24:	695b      	ldr	r3, [r3, #20]
    be26:	4a0f      	ldr	r2, [pc, #60]	; (be64 <usbdc_get_req+0x98>)
    be28:	7ed2      	ldrb	r2, [r2, #27]
    be2a:	701a      	strb	r2, [r3, #0]
		usbdc_xfer(ep, usbdc.ctrl_buf, 1, false);
    be2c:	4b0d      	ldr	r3, [pc, #52]	; (be64 <usbdc_get_req+0x98>)
    be2e:	6959      	ldr	r1, [r3, #20]
    be30:	79f8      	ldrb	r0, [r7, #7]
    be32:	2300      	movs	r3, #0
    be34:	2201      	movs	r2, #1
    be36:	4c0c      	ldr	r4, [pc, #48]	; (be68 <usbdc_get_req+0x9c>)
    be38:	47a0      	blx	r4
		return true;
    be3a:	2301      	movs	r3, #1
    be3c:	e00c      	b.n	be58 <usbdc_get_req+0x8c>
	case USB_REQ_GET_STATUS:
		return usbdc_get_status_req(ep, req);
    be3e:	79fb      	ldrb	r3, [r7, #7]
    be40:	6839      	ldr	r1, [r7, #0]
    be42:	4618      	mov	r0, r3
    be44:	4b09      	ldr	r3, [pc, #36]	; (be6c <usbdc_get_req+0xa0>)
    be46:	4798      	blx	r3
    be48:	4603      	mov	r3, r0
    be4a:	e005      	b.n	be58 <usbdc_get_req+0x8c>
	case USB_REQ_GET_INTERFACE:
		return usbdc_get_interface(req);
    be4c:	6838      	ldr	r0, [r7, #0]
    be4e:	4b08      	ldr	r3, [pc, #32]	; (be70 <usbdc_get_req+0xa4>)
    be50:	4798      	blx	r3
    be52:	4603      	mov	r3, r0
    be54:	e000      	b.n	be58 <usbdc_get_req+0x8c>
	default:
		return false;
    be56:	2300      	movs	r3, #0
	}
}
    be58:	4618      	mov	r0, r3
    be5a:	370c      	adds	r7, #12
    be5c:	46bd      	mov	sp, r7
    be5e:	bd90      	pop	{r4, r7, pc}
    be60:	0000bc55 	.word	0x0000bc55
    be64:	200011b8 	.word	0x200011b8
    be68:	0000c579 	.word	0x0000c579
    be6c:	0000bcbd 	.word	0x0000bcbd
    be70:	0000bd3d 	.word	0x0000bd3d

0000be74 <usbdc_clear_ftr_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_clear_ftr_req(const uint8_t ep, const struct usb_req *req)
{
    be74:	b590      	push	{r4, r7, lr}
    be76:	b083      	sub	sp, #12
    be78:	af00      	add	r7, sp, #0
    be7a:	4603      	mov	r3, r0
    be7c:	6039      	str	r1, [r7, #0]
    be7e:	71fb      	strb	r3, [r7, #7]
	(void)ep;
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    be80:	683b      	ldr	r3, [r7, #0]
    be82:	781b      	ldrb	r3, [r3, #0]
    be84:	f003 031f 	and.w	r3, r3, #31
    be88:	2b02      	cmp	r3, #2
    be8a:	d116      	bne.n	beba <usbdc_clear_ftr_req+0x46>
	case USB_REQT_RECIP_ENDPOINT:
		if (req->wLength != 0) {
    be8c:	683b      	ldr	r3, [r7, #0]
    be8e:	88db      	ldrh	r3, [r3, #6]
    be90:	b29b      	uxth	r3, r3
    be92:	2b00      	cmp	r3, #0
    be94:	d001      	beq.n	be9a <usbdc_clear_ftr_req+0x26>
			return false;
    be96:	2300      	movs	r3, #0
    be98:	e010      	b.n	bebc <usbdc_clear_ftr_req+0x48>
		}
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_CLR);
    be9a:	683b      	ldr	r3, [r7, #0]
    be9c:	889b      	ldrh	r3, [r3, #4]
    be9e:	b29b      	uxth	r3, r3
    bea0:	b2db      	uxtb	r3, r3
    bea2:	2100      	movs	r1, #0
    bea4:	4618      	mov	r0, r3
    bea6:	4b07      	ldr	r3, [pc, #28]	; (bec4 <usbdc_clear_ftr_req+0x50>)
    bea8:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
    beaa:	79f8      	ldrb	r0, [r7, #7]
    beac:	2301      	movs	r3, #1
    beae:	2200      	movs	r2, #0
    beb0:	2100      	movs	r1, #0
    beb2:	4c05      	ldr	r4, [pc, #20]	; (bec8 <usbdc_clear_ftr_req+0x54>)
    beb4:	47a0      	blx	r4
		return true;
    beb6:	2301      	movs	r3, #1
    beb8:	e000      	b.n	bebc <usbdc_clear_ftr_req+0x48>
	default:
		return false;
    beba:	2300      	movs	r3, #0
	}
}
    bebc:	4618      	mov	r0, r3
    bebe:	370c      	adds	r7, #12
    bec0:	46bd      	mov	sp, r7
    bec2:	bd90      	pop	{r4, r7, pc}
    bec4:	00002cf9 	.word	0x00002cf9
    bec8:	0000c579 	.word	0x0000c579

0000becc <usbdc_set_ftr_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_set_ftr_req(const uint8_t ep, const struct usb_req *req)
{
    becc:	b590      	push	{r4, r7, lr}
    bece:	b083      	sub	sp, #12
    bed0:	af00      	add	r7, sp, #0
    bed2:	4603      	mov	r3, r0
    bed4:	6039      	str	r1, [r7, #0]
    bed6:	71fb      	strb	r3, [r7, #7]
	(void)ep;
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    bed8:	683b      	ldr	r3, [r7, #0]
    beda:	781b      	ldrb	r3, [r3, #0]
    bedc:	f003 031f 	and.w	r3, r3, #31
    bee0:	2b02      	cmp	r3, #2
    bee2:	d116      	bne.n	bf12 <usbdc_set_ftr_req+0x46>
	case USB_REQT_RECIP_ENDPOINT:
		if (req->wLength != 0) {
    bee4:	683b      	ldr	r3, [r7, #0]
    bee6:	88db      	ldrh	r3, [r3, #6]
    bee8:	b29b      	uxth	r3, r3
    beea:	2b00      	cmp	r3, #0
    beec:	d001      	beq.n	bef2 <usbdc_set_ftr_req+0x26>
			return false;
    beee:	2300      	movs	r3, #0
    bef0:	e010      	b.n	bf14 <usbdc_set_ftr_req+0x48>
		}
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_SET);
    bef2:	683b      	ldr	r3, [r7, #0]
    bef4:	889b      	ldrh	r3, [r3, #4]
    bef6:	b29b      	uxth	r3, r3
    bef8:	b2db      	uxtb	r3, r3
    befa:	2101      	movs	r1, #1
    befc:	4618      	mov	r0, r3
    befe:	4b07      	ldr	r3, [pc, #28]	; (bf1c <usbdc_set_ftr_req+0x50>)
    bf00:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
    bf02:	79f8      	ldrb	r0, [r7, #7]
    bf04:	2301      	movs	r3, #1
    bf06:	2200      	movs	r2, #0
    bf08:	2100      	movs	r1, #0
    bf0a:	4c05      	ldr	r4, [pc, #20]	; (bf20 <usbdc_set_ftr_req+0x54>)
    bf0c:	47a0      	blx	r4
		return true;
    bf0e:	2301      	movs	r3, #1
    bf10:	e000      	b.n	bf14 <usbdc_set_ftr_req+0x48>
	default:
		return false;
    bf12:	2300      	movs	r3, #0
	}
}
    bf14:	4618      	mov	r0, r3
    bf16:	370c      	adds	r7, #12
    bf18:	46bd      	mov	sp, r7
    bf1a:	bd90      	pop	{r4, r7, pc}
    bf1c:	00002cf9 	.word	0x00002cf9
    bf20:	0000c579 	.word	0x0000c579

0000bf24 <usbdc_unconfig>:

/**
 * \brief Unconfig, close all interfaces
 */
static void usbdc_unconfig(void)
{
    bf24:	b580      	push	{r7, lr}
    bf26:	b082      	sub	sp, #8
    bf28:	af00      	add	r7, sp, #0
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    bf2a:	4b0a      	ldr	r3, [pc, #40]	; (bf54 <usbdc_unconfig+0x30>)
    bf2c:	691b      	ldr	r3, [r3, #16]
    bf2e:	607b      	str	r3, [r7, #4]
	while (NULL != func) {
    bf30:	e008      	b.n	bf44 <usbdc_unconfig+0x20>
		func->ctrl(func, USBDF_DISABLE, NULL);
    bf32:	687b      	ldr	r3, [r7, #4]
    bf34:	685b      	ldr	r3, [r3, #4]
    bf36:	2200      	movs	r2, #0
    bf38:	2101      	movs	r1, #1
    bf3a:	6878      	ldr	r0, [r7, #4]
    bf3c:	4798      	blx	r3
		func = func->next;
    bf3e:	687b      	ldr	r3, [r7, #4]
    bf40:	681b      	ldr	r3, [r3, #0]
    bf42:	607b      	str	r3, [r7, #4]
	while (NULL != func) {
    bf44:	687b      	ldr	r3, [r7, #4]
    bf46:	2b00      	cmp	r3, #0
    bf48:	d1f3      	bne.n	bf32 <usbdc_unconfig+0xe>
	}
}
    bf4a:	bf00      	nop
    bf4c:	3708      	adds	r7, #8
    bf4e:	46bd      	mov	sp, r7
    bf50:	bd80      	pop	{r7, pc}
    bf52:	bf00      	nop
    bf54:	200011b8 	.word	0x200011b8

0000bf58 <usbdc_set_config>:
 * \param[in] cfg_value Configuration Value
 * \retval true Set configuration OK.
 * \retval false Request error.
 */
static bool usbdc_set_config(uint8_t cfg_value)
{
    bf58:	b580      	push	{r7, lr}
    bf5a:	b088      	sub	sp, #32
    bf5c:	af00      	add	r7, sp, #0
    bf5e:	4603      	mov	r3, r0
    bf60:	71fb      	strb	r3, [r7, #7]
	struct usbd_descriptors desc;
	struct usbdf_driver *   func;
	uint8_t *               cfg_desc = NULL;
    bf62:	2300      	movs	r3, #0
    bf64:	61bb      	str	r3, [r7, #24]
	uint16_t                total_len;
	uint8_t                 last_iface = 0xFF;
    bf66:	23ff      	movs	r3, #255	; 0xff
    bf68:	75fb      	strb	r3, [r7, #23]

	if (cfg_value == 0) {
    bf6a:	79fb      	ldrb	r3, [r7, #7]
    bf6c:	2b00      	cmp	r3, #0
    bf6e:	d103      	bne.n	bf78 <usbdc_set_config+0x20>
		usbdc_unconfig();
    bf70:	4b2e      	ldr	r3, [pc, #184]	; (c02c <usbdc_set_config+0xd4>)
    bf72:	4798      	blx	r3
		return true;
    bf74:	2301      	movs	r3, #1
    bf76:	e055      	b.n	c024 <usbdc_set_config+0xcc>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, cfg_value);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!cfg_desc) {
    bf78:	69bb      	ldr	r3, [r7, #24]
    bf7a:	2b00      	cmp	r3, #0
    bf7c:	d10a      	bne.n	bf94 <usbdc_set_config+0x3c>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, cfg_value);
    bf7e:	4b2c      	ldr	r3, [pc, #176]	; (c030 <usbdc_set_config+0xd8>)
    bf80:	681b      	ldr	r3, [r3, #0]
    bf82:	6818      	ldr	r0, [r3, #0]
    bf84:	4b2a      	ldr	r3, [pc, #168]	; (c030 <usbdc_set_config+0xd8>)
    bf86:	681b      	ldr	r3, [r3, #0]
    bf88:	685b      	ldr	r3, [r3, #4]
    bf8a:	79fa      	ldrb	r2, [r7, #7]
    bf8c:	4619      	mov	r1, r3
    bf8e:	4b29      	ldr	r3, [pc, #164]	; (c034 <usbdc_set_config+0xdc>)
    bf90:	4798      	blx	r3
    bf92:	61b8      	str	r0, [r7, #24]
	}
	if (NULL == cfg_desc) {
    bf94:	69bb      	ldr	r3, [r7, #24]
    bf96:	2b00      	cmp	r3, #0
    bf98:	d101      	bne.n	bf9e <usbdc_set_config+0x46>
		return false;
    bf9a:	2300      	movs	r3, #0
    bf9c:	e042      	b.n	c024 <usbdc_set_config+0xcc>
	}

	total_len = usb_cfg_desc_total_len(cfg_desc);
    bf9e:	69b8      	ldr	r0, [r7, #24]
    bfa0:	4b25      	ldr	r3, [pc, #148]	; (c038 <usbdc_set_config+0xe0>)
    bfa2:	4798      	blx	r3
    bfa4:	4603      	mov	r3, r0
    bfa6:	82bb      	strh	r3, [r7, #20]
	desc.eod  = cfg_desc + total_len;
    bfa8:	8abb      	ldrh	r3, [r7, #20]
    bfaa:	69ba      	ldr	r2, [r7, #24]
    bfac:	4413      	add	r3, r2
    bfae:	613b      	str	r3, [r7, #16]
	desc.sod  = usb_find_desc(cfg_desc, desc.eod, USB_DT_INTERFACE);
    bfb0:	693b      	ldr	r3, [r7, #16]
    bfb2:	2204      	movs	r2, #4
    bfb4:	4619      	mov	r1, r3
    bfb6:	69b8      	ldr	r0, [r7, #24]
    bfb8:	4b20      	ldr	r3, [pc, #128]	; (c03c <usbdc_set_config+0xe4>)
    bfba:	4798      	blx	r3
    bfbc:	4603      	mov	r3, r0
    bfbe:	60fb      	str	r3, [r7, #12]

	while (NULL != desc.sod) {
    bfc0:	e02c      	b.n	c01c <usbdc_set_config+0xc4>
		/* Apply very first alternate setting (must be 0) of the interface */
		if (last_iface != desc.sod[2] /* bInterfaceNumber */) {
    bfc2:	68fb      	ldr	r3, [r7, #12]
    bfc4:	3302      	adds	r3, #2
    bfc6:	781b      	ldrb	r3, [r3, #0]
    bfc8:	7dfa      	ldrb	r2, [r7, #23]
    bfca:	429a      	cmp	r2, r3
    bfcc:	d018      	beq.n	c000 <usbdc_set_config+0xa8>
			last_iface = desc.sod[2];
    bfce:	68fb      	ldr	r3, [r7, #12]
    bfd0:	789b      	ldrb	r3, [r3, #2]
    bfd2:	75fb      	strb	r3, [r7, #23]
			func       = (struct usbdf_driver *)usbdc.func_list.head;
    bfd4:	4b16      	ldr	r3, [pc, #88]	; (c030 <usbdc_set_config+0xd8>)
    bfd6:	691b      	ldr	r3, [r3, #16]
    bfd8:	61fb      	str	r3, [r7, #28]
			while (NULL != func) {
    bfda:	e00c      	b.n	bff6 <usbdc_set_config+0x9e>
				if (func->ctrl(func, USBDF_ENABLE, &desc)) {
    bfdc:	69fb      	ldr	r3, [r7, #28]
    bfde:	685b      	ldr	r3, [r3, #4]
    bfe0:	f107 020c 	add.w	r2, r7, #12
    bfe4:	2100      	movs	r1, #0
    bfe6:	69f8      	ldr	r0, [r7, #28]
    bfe8:	4798      	blx	r3
    bfea:	4603      	mov	r3, r0
    bfec:	2b00      	cmp	r3, #0
    bfee:	d006      	beq.n	bffe <usbdc_set_config+0xa6>
					func = func->next;
    bff0:	69fb      	ldr	r3, [r7, #28]
    bff2:	681b      	ldr	r3, [r3, #0]
    bff4:	61fb      	str	r3, [r7, #28]
			while (NULL != func) {
    bff6:	69fb      	ldr	r3, [r7, #28]
    bff8:	2b00      	cmp	r3, #0
    bffa:	d1ef      	bne.n	bfdc <usbdc_set_config+0x84>
    bffc:	e000      	b.n	c000 <usbdc_set_config+0xa8>
				} else {
					break;
    bffe:	bf00      	nop
				}
			}
		}
		desc.sod = usb_desc_next(desc.sod);
    c000:	68fb      	ldr	r3, [r7, #12]
    c002:	4618      	mov	r0, r3
    c004:	4b0e      	ldr	r3, [pc, #56]	; (c040 <usbdc_set_config+0xe8>)
    c006:	4798      	blx	r3
    c008:	4603      	mov	r3, r0
    c00a:	60fb      	str	r3, [r7, #12]
		desc.sod = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    c00c:	68fb      	ldr	r3, [r7, #12]
    c00e:	6939      	ldr	r1, [r7, #16]
    c010:	2204      	movs	r2, #4
    c012:	4618      	mov	r0, r3
    c014:	4b09      	ldr	r3, [pc, #36]	; (c03c <usbdc_set_config+0xe4>)
    c016:	4798      	blx	r3
    c018:	4603      	mov	r3, r0
    c01a:	60fb      	str	r3, [r7, #12]
	while (NULL != desc.sod) {
    c01c:	68fb      	ldr	r3, [r7, #12]
    c01e:	2b00      	cmp	r3, #0
    c020:	d1cf      	bne.n	bfc2 <usbdc_set_config+0x6a>
	}
	return true;
    c022:	2301      	movs	r3, #1
}
    c024:	4618      	mov	r0, r3
    c026:	3720      	adds	r7, #32
    c028:	46bd      	mov	sp, r7
    c02a:	bd80      	pop	{r7, pc}
    c02c:	0000bf25 	.word	0x0000bf25
    c030:	200011b8 	.word	0x200011b8
    c034:	0000c8c9 	.word	0x0000c8c9
    c038:	0000ba75 	.word	0x0000ba75
    c03c:	0000c809 	.word	0x0000c809
    c040:	0000ba51 	.word	0x0000ba51

0000c044 <usbdc_set_address>:
/**
 * \brief Apply the USB device address
 * \param[in] addr address to be set.
 */
static void usbdc_set_address(uint8_t addr)
{
    c044:	b580      	push	{r7, lr}
    c046:	b082      	sub	sp, #8
    c048:	af00      	add	r7, sp, #0
    c04a:	4603      	mov	r3, r0
    c04c:	71fb      	strb	r3, [r7, #7]
	usb_d_set_address(addr);
    c04e:	79fb      	ldrb	r3, [r7, #7]
    c050:	4618      	mov	r0, r3
    c052:	4b03      	ldr	r3, [pc, #12]	; (c060 <usbdc_set_address+0x1c>)
    c054:	4798      	blx	r3
}
    c056:	bf00      	nop
    c058:	3708      	adds	r7, #8
    c05a:	46bd      	mov	sp, r7
    c05c:	bd80      	pop	{r7, pc}
    c05e:	bf00      	nop
    c060:	00002969 	.word	0x00002969

0000c064 <usbdc_set_interface>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_set_interface(uint16_t alt_set, uint16_t ifc_id)
{
    c064:	b590      	push	{r4, r7, lr}
    c066:	b087      	sub	sp, #28
    c068:	af00      	add	r7, sp, #0
    c06a:	4603      	mov	r3, r0
    c06c:	460a      	mov	r2, r1
    c06e:	80fb      	strh	r3, [r7, #6]
    c070:	4613      	mov	r3, r2
    c072:	80bb      	strh	r3, [r7, #4]
	struct usbd_descriptors desc;
	struct usbdf_driver *   func;
	uint8_t *               ifc = NULL;
    c074:	2300      	movs	r3, #0
    c076:	613b      	str	r3, [r7, #16]
		ifc = usb_find_cfg_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, usbdc.cfg_value);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!ifc) {
    c078:	693b      	ldr	r3, [r7, #16]
    c07a:	2b00      	cmp	r3, #0
    c07c:	d10b      	bne.n	c096 <usbdc_set_interface+0x32>
		ifc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, usbdc.cfg_value);
    c07e:	4b43      	ldr	r3, [pc, #268]	; (c18c <usbdc_set_interface+0x128>)
    c080:	681b      	ldr	r3, [r3, #0]
    c082:	6818      	ldr	r0, [r3, #0]
    c084:	4b41      	ldr	r3, [pc, #260]	; (c18c <usbdc_set_interface+0x128>)
    c086:	681b      	ldr	r3, [r3, #0]
    c088:	6859      	ldr	r1, [r3, #4]
    c08a:	4b40      	ldr	r3, [pc, #256]	; (c18c <usbdc_set_interface+0x128>)
    c08c:	7edb      	ldrb	r3, [r3, #27]
    c08e:	461a      	mov	r2, r3
    c090:	4b3f      	ldr	r3, [pc, #252]	; (c190 <usbdc_set_interface+0x12c>)
    c092:	4798      	blx	r3
    c094:	6138      	str	r0, [r7, #16]
	}
	if (NULL == ifc) {
    c096:	693b      	ldr	r3, [r7, #16]
    c098:	2b00      	cmp	r3, #0
    c09a:	d101      	bne.n	c0a0 <usbdc_set_interface+0x3c>
		return false;
    c09c:	2300      	movs	r3, #0
    c09e:	e071      	b.n	c184 <usbdc_set_interface+0x120>
	}
	desc.sod = ifc;
    c0a0:	693b      	ldr	r3, [r7, #16]
    c0a2:	60bb      	str	r3, [r7, #8]
	desc.eod = ifc + usb_cfg_desc_total_len(ifc);
    c0a4:	6938      	ldr	r0, [r7, #16]
    c0a6:	4b3b      	ldr	r3, [pc, #236]	; (c194 <usbdc_set_interface+0x130>)
    c0a8:	4798      	blx	r3
    c0aa:	4603      	mov	r3, r0
    c0ac:	461a      	mov	r2, r3
    c0ae:	693b      	ldr	r3, [r7, #16]
    c0b0:	4413      	add	r3, r2
    c0b2:	60fb      	str	r3, [r7, #12]

	if (NULL == (ifc = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE))) {
    c0b4:	68bb      	ldr	r3, [r7, #8]
    c0b6:	68f9      	ldr	r1, [r7, #12]
    c0b8:	2204      	movs	r2, #4
    c0ba:	4618      	mov	r0, r3
    c0bc:	4b36      	ldr	r3, [pc, #216]	; (c198 <usbdc_set_interface+0x134>)
    c0be:	4798      	blx	r3
    c0c0:	6138      	str	r0, [r7, #16]
    c0c2:	693b      	ldr	r3, [r7, #16]
    c0c4:	2b00      	cmp	r3, #0
    c0c6:	d113      	bne.n	c0f0 <usbdc_set_interface+0x8c>
		return false;
    c0c8:	2300      	movs	r3, #0
    c0ca:	e05b      	b.n	c184 <usbdc_set_interface+0x120>
	}

	while (ifc[2] != ifc_id || ifc[3] != alt_set) {
		desc.sod = usb_desc_next(desc.sod);
    c0cc:	68bb      	ldr	r3, [r7, #8]
    c0ce:	4618      	mov	r0, r3
    c0d0:	4b32      	ldr	r3, [pc, #200]	; (c19c <usbdc_set_interface+0x138>)
    c0d2:	4798      	blx	r3
    c0d4:	4603      	mov	r3, r0
    c0d6:	60bb      	str	r3, [r7, #8]
		ifc      = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    c0d8:	68bb      	ldr	r3, [r7, #8]
    c0da:	68f9      	ldr	r1, [r7, #12]
    c0dc:	2204      	movs	r2, #4
    c0de:	4618      	mov	r0, r3
    c0e0:	4b2d      	ldr	r3, [pc, #180]	; (c198 <usbdc_set_interface+0x134>)
    c0e2:	4798      	blx	r3
    c0e4:	6138      	str	r0, [r7, #16]
		if (NULL == ifc) {
    c0e6:	693b      	ldr	r3, [r7, #16]
    c0e8:	2b00      	cmp	r3, #0
    c0ea:	d101      	bne.n	c0f0 <usbdc_set_interface+0x8c>
			return false;
    c0ec:	2300      	movs	r3, #0
    c0ee:	e049      	b.n	c184 <usbdc_set_interface+0x120>
	while (ifc[2] != ifc_id || ifc[3] != alt_set) {
    c0f0:	693b      	ldr	r3, [r7, #16]
    c0f2:	3302      	adds	r3, #2
    c0f4:	781b      	ldrb	r3, [r3, #0]
    c0f6:	b29b      	uxth	r3, r3
    c0f8:	88ba      	ldrh	r2, [r7, #4]
    c0fa:	429a      	cmp	r2, r3
    c0fc:	d1e6      	bne.n	c0cc <usbdc_set_interface+0x68>
    c0fe:	693b      	ldr	r3, [r7, #16]
    c100:	3303      	adds	r3, #3
    c102:	781b      	ldrb	r3, [r3, #0]
    c104:	b29b      	uxth	r3, r3
    c106:	88fa      	ldrh	r2, [r7, #6]
    c108:	429a      	cmp	r2, r3
    c10a:	d1df      	bne.n	c0cc <usbdc_set_interface+0x68>
		}
	}

	desc.sod = ifc;
    c10c:	693b      	ldr	r3, [r7, #16]
    c10e:	60bb      	str	r3, [r7, #8]
	func     = (struct usbdf_driver *)usbdc.func_list.head;
    c110:	4b1e      	ldr	r3, [pc, #120]	; (c18c <usbdc_set_interface+0x128>)
    c112:	691b      	ldr	r3, [r3, #16]
    c114:	617b      	str	r3, [r7, #20]

	while (NULL != func) {
    c116:	e031      	b.n	c17c <usbdc_set_interface+0x118>
		if (func->ctrl(func, USBDF_DISABLE, &desc)) {
    c118:	697b      	ldr	r3, [r7, #20]
    c11a:	685b      	ldr	r3, [r3, #4]
    c11c:	f107 0208 	add.w	r2, r7, #8
    c120:	2101      	movs	r1, #1
    c122:	6978      	ldr	r0, [r7, #20]
    c124:	4798      	blx	r3
    c126:	4603      	mov	r3, r0
    c128:	2b00      	cmp	r3, #0
    c12a:	d003      	beq.n	c134 <usbdc_set_interface+0xd0>
			func = func->next;
    c12c:	697b      	ldr	r3, [r7, #20]
    c12e:	681b      	ldr	r3, [r3, #0]
    c130:	617b      	str	r3, [r7, #20]
    c132:	e023      	b.n	c17c <usbdc_set_interface+0x118>
		} else if (ERR_NONE == func->ctrl(func, USBDF_ENABLE, &desc)) {
    c134:	697b      	ldr	r3, [r7, #20]
    c136:	685b      	ldr	r3, [r3, #4]
    c138:	f107 0208 	add.w	r2, r7, #8
    c13c:	2100      	movs	r1, #0
    c13e:	6978      	ldr	r0, [r7, #20]
    c140:	4798      	blx	r3
    c142:	4603      	mov	r3, r0
    c144:	2b00      	cmp	r3, #0
    c146:	d117      	bne.n	c178 <usbdc_set_interface+0x114>
			if (alt_set) {
    c148:	88fb      	ldrh	r3, [r7, #6]
    c14a:	2b00      	cmp	r3, #0
    c14c:	d00c      	beq.n	c168 <usbdc_set_interface+0x104>
				/* Alternate settings are used from now on */
				usbdc.ifc_alt_map |= 1 << ifc_id;
    c14e:	4b0f      	ldr	r3, [pc, #60]	; (c18c <usbdc_set_interface+0x128>)
    c150:	7f5b      	ldrb	r3, [r3, #29]
    c152:	b25a      	sxtb	r2, r3
    c154:	88bb      	ldrh	r3, [r7, #4]
    c156:	2101      	movs	r1, #1
    c158:	fa01 f303 	lsl.w	r3, r1, r3
    c15c:	b25b      	sxtb	r3, r3
    c15e:	4313      	orrs	r3, r2
    c160:	b25b      	sxtb	r3, r3
    c162:	b2da      	uxtb	r2, r3
    c164:	4b09      	ldr	r3, [pc, #36]	; (c18c <usbdc_set_interface+0x128>)
    c166:	775a      	strb	r2, [r3, #29]
			}
			usbdc_xfer(0, NULL, 0, 0);
    c168:	2300      	movs	r3, #0
    c16a:	2200      	movs	r2, #0
    c16c:	2100      	movs	r1, #0
    c16e:	2000      	movs	r0, #0
    c170:	4c0b      	ldr	r4, [pc, #44]	; (c1a0 <usbdc_set_interface+0x13c>)
    c172:	47a0      	blx	r4
			return true;
    c174:	2301      	movs	r3, #1
    c176:	e005      	b.n	c184 <usbdc_set_interface+0x120>
		} else {
			return false;
    c178:	2300      	movs	r3, #0
    c17a:	e003      	b.n	c184 <usbdc_set_interface+0x120>
	while (NULL != func) {
    c17c:	697b      	ldr	r3, [r7, #20]
    c17e:	2b00      	cmp	r3, #0
    c180:	d1ca      	bne.n	c118 <usbdc_set_interface+0xb4>
		}
	}

	return false;
    c182:	2300      	movs	r3, #0
}
    c184:	4618      	mov	r0, r3
    c186:	371c      	adds	r7, #28
    c188:	46bd      	mov	sp, r7
    c18a:	bd90      	pop	{r4, r7, pc}
    c18c:	200011b8 	.word	0x200011b8
    c190:	0000c8c9 	.word	0x0000c8c9
    c194:	0000ba75 	.word	0x0000ba75
    c198:	0000c809 	.word	0x0000c809
    c19c:	0000ba51 	.word	0x0000ba51
    c1a0:	0000c579 	.word	0x0000c579

0000c1a4 <usbdc_set_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_set_req(const uint8_t ep, struct usb_req *req)
{
    c1a4:	b590      	push	{r4, r7, lr}
    c1a6:	b083      	sub	sp, #12
    c1a8:	af00      	add	r7, sp, #0
    c1aa:	4603      	mov	r3, r0
    c1ac:	6039      	str	r1, [r7, #0]
    c1ae:	71fb      	strb	r3, [r7, #7]
	switch (req->bRequest) {
    c1b0:	683b      	ldr	r3, [r7, #0]
    c1b2:	785b      	ldrb	r3, [r3, #1]
    c1b4:	3b01      	subs	r3, #1
    c1b6:	2b0a      	cmp	r3, #10
    c1b8:	d85b      	bhi.n	c272 <usbdc_set_req+0xce>
    c1ba:	a201      	add	r2, pc, #4	; (adr r2, c1c0 <usbdc_set_req+0x1c>)
    c1bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    c1c0:	0000c23f 	.word	0x0000c23f
    c1c4:	0000c273 	.word	0x0000c273
    c1c8:	0000c24d 	.word	0x0000c24d
    c1cc:	0000c273 	.word	0x0000c273
    c1d0:	0000c1ed 	.word	0x0000c1ed
    c1d4:	0000c273 	.word	0x0000c273
    c1d8:	0000c273 	.word	0x0000c273
    c1dc:	0000c273 	.word	0x0000c273
    c1e0:	0000c207 	.word	0x0000c207
    c1e4:	0000c273 	.word	0x0000c273
    c1e8:	0000c25b 	.word	0x0000c25b
	case USB_REQ_SET_ADDRESS:
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    c1ec:	79f8      	ldrb	r0, [r7, #7]
    c1ee:	2301      	movs	r3, #1
    c1f0:	2200      	movs	r2, #0
    c1f2:	2100      	movs	r1, #0
    c1f4:	4c21      	ldr	r4, [pc, #132]	; (c27c <usbdc_set_req+0xd8>)
    c1f6:	47a0      	blx	r4
    c1f8:	4603      	mov	r3, r0
    c1fa:	2b00      	cmp	r3, #0
    c1fc:	bf0c      	ite	eq
    c1fe:	2301      	moveq	r3, #1
    c200:	2300      	movne	r3, #0
    c202:	b2db      	uxtb	r3, r3
    c204:	e036      	b.n	c274 <usbdc_set_req+0xd0>
	case USB_REQ_SET_CONFIG:
		if (!usbdc_set_config(req->wValue)) {
    c206:	683b      	ldr	r3, [r7, #0]
    c208:	885b      	ldrh	r3, [r3, #2]
    c20a:	b29b      	uxth	r3, r3
    c20c:	b2db      	uxtb	r3, r3
    c20e:	4618      	mov	r0, r3
    c210:	4b1b      	ldr	r3, [pc, #108]	; (c280 <usbdc_set_req+0xdc>)
    c212:	4798      	blx	r3
    c214:	4603      	mov	r3, r0
    c216:	f083 0301 	eor.w	r3, r3, #1
    c21a:	b2db      	uxtb	r3, r3
    c21c:	2b00      	cmp	r3, #0
    c21e:	d001      	beq.n	c224 <usbdc_set_req+0x80>
			return false;
    c220:	2300      	movs	r3, #0
    c222:	e027      	b.n	c274 <usbdc_set_req+0xd0>
		}
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    c224:	79f8      	ldrb	r0, [r7, #7]
    c226:	2301      	movs	r3, #1
    c228:	2200      	movs	r2, #0
    c22a:	2100      	movs	r1, #0
    c22c:	4c13      	ldr	r4, [pc, #76]	; (c27c <usbdc_set_req+0xd8>)
    c22e:	47a0      	blx	r4
    c230:	4603      	mov	r3, r0
    c232:	2b00      	cmp	r3, #0
    c234:	bf0c      	ite	eq
    c236:	2301      	moveq	r3, #1
    c238:	2300      	movne	r3, #0
    c23a:	b2db      	uxtb	r3, r3
    c23c:	e01a      	b.n	c274 <usbdc_set_req+0xd0>
	case USB_REQ_CLEAR_FTR:
		return usbdc_clear_ftr_req(ep, req);
    c23e:	79fb      	ldrb	r3, [r7, #7]
    c240:	6839      	ldr	r1, [r7, #0]
    c242:	4618      	mov	r0, r3
    c244:	4b0f      	ldr	r3, [pc, #60]	; (c284 <usbdc_set_req+0xe0>)
    c246:	4798      	blx	r3
    c248:	4603      	mov	r3, r0
    c24a:	e013      	b.n	c274 <usbdc_set_req+0xd0>
	case USB_REQ_SET_FTR:
		return usbdc_set_ftr_req(ep, req);
    c24c:	79fb      	ldrb	r3, [r7, #7]
    c24e:	6839      	ldr	r1, [r7, #0]
    c250:	4618      	mov	r0, r3
    c252:	4b0d      	ldr	r3, [pc, #52]	; (c288 <usbdc_set_req+0xe4>)
    c254:	4798      	blx	r3
    c256:	4603      	mov	r3, r0
    c258:	e00c      	b.n	c274 <usbdc_set_req+0xd0>
	case USB_REQ_SET_INTERFACE:
		return usbdc_set_interface(req->wValue, req->wIndex);
    c25a:	683b      	ldr	r3, [r7, #0]
    c25c:	885b      	ldrh	r3, [r3, #2]
    c25e:	b29a      	uxth	r2, r3
    c260:	683b      	ldr	r3, [r7, #0]
    c262:	889b      	ldrh	r3, [r3, #4]
    c264:	b29b      	uxth	r3, r3
    c266:	4619      	mov	r1, r3
    c268:	4610      	mov	r0, r2
    c26a:	4b08      	ldr	r3, [pc, #32]	; (c28c <usbdc_set_req+0xe8>)
    c26c:	4798      	blx	r3
    c26e:	4603      	mov	r3, r0
    c270:	e000      	b.n	c274 <usbdc_set_req+0xd0>
	default:
		return false;
    c272:	2300      	movs	r3, #0
	}
}
    c274:	4618      	mov	r0, r3
    c276:	370c      	adds	r7, #12
    c278:	46bd      	mov	sp, r7
    c27a:	bd90      	pop	{r4, r7, pc}
    c27c:	0000c579 	.word	0x0000c579
    c280:	0000bf59 	.word	0x0000bf59
    c284:	0000be75 	.word	0x0000be75
    c288:	0000becd 	.word	0x0000becd
    c28c:	0000c065 	.word	0x0000c065

0000c290 <usbdc_sof_notify>:

/** Invoke all registered SOF callbacks. */
static void usbdc_sof_notify(void)
{
    c290:	b580      	push	{r7, lr}
    c292:	b082      	sub	sp, #8
    c294:	af00      	add	r7, sp, #0
	struct usbdc_sof_handler *sof = (struct usbdc_sof_handler *)usbdc.handlers.sof_list.head;
    c296:	4b0a      	ldr	r3, [pc, #40]	; (c2c0 <usbdc_sof_notify+0x30>)
    c298:	685b      	ldr	r3, [r3, #4]
    c29a:	607b      	str	r3, [r7, #4]

	while (sof != NULL) {
    c29c:	e009      	b.n	c2b2 <usbdc_sof_notify+0x22>
		if (NULL != sof->cb) {
    c29e:	687b      	ldr	r3, [r7, #4]
    c2a0:	685b      	ldr	r3, [r3, #4]
    c2a2:	2b00      	cmp	r3, #0
    c2a4:	d002      	beq.n	c2ac <usbdc_sof_notify+0x1c>
			sof->cb();
    c2a6:	687b      	ldr	r3, [r7, #4]
    c2a8:	685b      	ldr	r3, [r3, #4]
    c2aa:	4798      	blx	r3
		}
		sof = sof->next;
    c2ac:	687b      	ldr	r3, [r7, #4]
    c2ae:	681b      	ldr	r3, [r3, #0]
    c2b0:	607b      	str	r3, [r7, #4]
	while (sof != NULL) {
    c2b2:	687b      	ldr	r3, [r7, #4]
    c2b4:	2b00      	cmp	r3, #0
    c2b6:	d1f2      	bne.n	c29e <usbdc_sof_notify+0xe>
	}
}
    c2b8:	bf00      	nop
    c2ba:	3708      	adds	r7, #8
    c2bc:	46bd      	mov	sp, r7
    c2be:	bd80      	pop	{r7, pc}
    c2c0:	200011b8 	.word	0x200011b8

0000c2c4 <usbdc_change_notify>:

/** Invoke all registered Change notification callbacks. */
static void usbdc_change_notify(enum usbdc_change_type change, uint32_t value)
{
    c2c4:	b580      	push	{r7, lr}
    c2c6:	b084      	sub	sp, #16
    c2c8:	af00      	add	r7, sp, #0
    c2ca:	4603      	mov	r3, r0
    c2cc:	6039      	str	r1, [r7, #0]
    c2ce:	71fb      	strb	r3, [r7, #7]
	struct usbdc_change_handler *cg = (struct usbdc_change_handler *)usbdc.handlers.change_list.head;
    c2d0:	4b0b      	ldr	r3, [pc, #44]	; (c300 <usbdc_change_notify+0x3c>)
    c2d2:	68db      	ldr	r3, [r3, #12]
    c2d4:	60fb      	str	r3, [r7, #12]

	while (cg != NULL) {
    c2d6:	e00c      	b.n	c2f2 <usbdc_change_notify+0x2e>
		if (NULL != cg->cb) {
    c2d8:	68fb      	ldr	r3, [r7, #12]
    c2da:	685b      	ldr	r3, [r3, #4]
    c2dc:	2b00      	cmp	r3, #0
    c2de:	d005      	beq.n	c2ec <usbdc_change_notify+0x28>
			cg->cb(change, value);
    c2e0:	68fb      	ldr	r3, [r7, #12]
    c2e2:	685b      	ldr	r3, [r3, #4]
    c2e4:	79fa      	ldrb	r2, [r7, #7]
    c2e6:	6839      	ldr	r1, [r7, #0]
    c2e8:	4610      	mov	r0, r2
    c2ea:	4798      	blx	r3
		}
		cg = cg->next;
    c2ec:	68fb      	ldr	r3, [r7, #12]
    c2ee:	681b      	ldr	r3, [r3, #0]
    c2f0:	60fb      	str	r3, [r7, #12]
	while (cg != NULL) {
    c2f2:	68fb      	ldr	r3, [r7, #12]
    c2f4:	2b00      	cmp	r3, #0
    c2f6:	d1ef      	bne.n	c2d8 <usbdc_change_notify+0x14>
	}
}
    c2f8:	bf00      	nop
    c2fa:	3710      	adds	r7, #16
    c2fc:	46bd      	mov	sp, r7
    c2fe:	bd80      	pop	{r7, pc}
    c300:	200011b8 	.word	0x200011b8

0000c304 <usbdc_request_handler>:

/** Invoke all registered request callbacks until request handled. */
static int32_t usbdc_request_handler(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    c304:	b580      	push	{r7, lr}
    c306:	b084      	sub	sp, #16
    c308:	af00      	add	r7, sp, #0
    c30a:	4603      	mov	r3, r0
    c30c:	6039      	str	r1, [r7, #0]
    c30e:	71fb      	strb	r3, [r7, #7]
    c310:	4613      	mov	r3, r2
    c312:	71bb      	strb	r3, [r7, #6]
	struct usbdc_req_handler *h = (struct usbdc_req_handler *)usbdc.handlers.req_list.head;
    c314:	4b12      	ldr	r3, [pc, #72]	; (c360 <usbdc_request_handler+0x5c>)
    c316:	689b      	ldr	r3, [r3, #8]
    c318:	60fb      	str	r3, [r7, #12]
	int32_t                   rc;

	while (h != NULL) {
    c31a:	e019      	b.n	c350 <usbdc_request_handler+0x4c>
		if (NULL != h->cb) {
    c31c:	68fb      	ldr	r3, [r7, #12]
    c31e:	685b      	ldr	r3, [r3, #4]
    c320:	2b00      	cmp	r3, #0
    c322:	d012      	beq.n	c34a <usbdc_request_handler+0x46>
			rc = h->cb(ep, req, stage);
    c324:	68fb      	ldr	r3, [r7, #12]
    c326:	685b      	ldr	r3, [r3, #4]
    c328:	79ba      	ldrb	r2, [r7, #6]
    c32a:	79f8      	ldrb	r0, [r7, #7]
    c32c:	6839      	ldr	r1, [r7, #0]
    c32e:	4798      	blx	r3
    c330:	60b8      	str	r0, [r7, #8]
			if (0 == rc) {
    c332:	68bb      	ldr	r3, [r7, #8]
    c334:	2b00      	cmp	r3, #0
    c336:	d101      	bne.n	c33c <usbdc_request_handler+0x38>
				return true;
    c338:	2301      	movs	r3, #1
    c33a:	e00d      	b.n	c358 <usbdc_request_handler+0x54>
			} else if (ERR_NOT_FOUND != rc) {
    c33c:	68bb      	ldr	r3, [r7, #8]
    c33e:	f113 0f0a 	cmn.w	r3, #10
    c342:	d002      	beq.n	c34a <usbdc_request_handler+0x46>
				return -1;
    c344:	f04f 33ff 	mov.w	r3, #4294967295
    c348:	e006      	b.n	c358 <usbdc_request_handler+0x54>
			}
		}
		h = h->next;
    c34a:	68fb      	ldr	r3, [r7, #12]
    c34c:	681b      	ldr	r3, [r3, #0]
    c34e:	60fb      	str	r3, [r7, #12]
	while (h != NULL) {
    c350:	68fb      	ldr	r3, [r7, #12]
    c352:	2b00      	cmp	r3, #0
    c354:	d1e2      	bne.n	c31c <usbdc_request_handler+0x18>
	}
	return false;
    c356:	2300      	movs	r3, #0
}
    c358:	4618      	mov	r0, r3
    c35a:	3710      	adds	r7, #16
    c35c:	46bd      	mov	sp, r7
    c35e:	bd80      	pop	{r7, pc}
    c360:	200011b8 	.word	0x200011b8

0000c364 <usbd_sof_cb>:

/**
 * \brief Callback invoked on USB device SOF
 */
static void usbd_sof_cb(void)
{
    c364:	b580      	push	{r7, lr}
    c366:	af00      	add	r7, sp, #0
	usbdc_sof_notify();
    c368:	4b01      	ldr	r3, [pc, #4]	; (c370 <usbd_sof_cb+0xc>)
    c36a:	4798      	blx	r3
}
    c36c:	bf00      	nop
    c36e:	bd80      	pop	{r7, pc}
    c370:	0000c291 	.word	0x0000c291

0000c374 <usbdc_cb_ctl_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_cb_ctl_req(const uint8_t ep, struct usb_req *req)
{
    c374:	b580      	push	{r7, lr}
    c376:	b082      	sub	sp, #8
    c378:	af00      	add	r7, sp, #0
    c37a:	4603      	mov	r3, r0
    c37c:	6039      	str	r1, [r7, #0]
    c37e:	71fb      	strb	r3, [r7, #7]
	switch (usbdc_request_handler(ep, req, USB_SETUP_STAGE)) {
    c380:	79fb      	ldrb	r3, [r7, #7]
    c382:	2200      	movs	r2, #0
    c384:	6839      	ldr	r1, [r7, #0]
    c386:	4618      	mov	r0, r3
    c388:	4b14      	ldr	r3, [pc, #80]	; (c3dc <usbdc_cb_ctl_req+0x68>)
    c38a:	4798      	blx	r3
    c38c:	4603      	mov	r3, r0
    c38e:	f1b3 3fff 	cmp.w	r3, #4294967295
    c392:	d00b      	beq.n	c3ac <usbdc_cb_ctl_req+0x38>
    c394:	2b01      	cmp	r3, #1
    c396:	d007      	beq.n	c3a8 <usbdc_cb_ctl_req+0x34>
	case true:
		return true;
	case -1:
		return false;
	default:
		break;
    c398:	bf00      	nop
	}

	// STD request handling
	switch (req->bmRequestType & (USB_REQT_TYPE_MASK | USB_REQT_DIR_IN)) {
    c39a:	683b      	ldr	r3, [r7, #0]
    c39c:	781b      	ldrb	r3, [r3, #0]
    c39e:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
    c3a2:	2b00      	cmp	r3, #0
    c3a4:	d007      	beq.n	c3b6 <usbdc_cb_ctl_req+0x42>
    c3a6:	e003      	b.n	c3b0 <usbdc_cb_ctl_req+0x3c>
		return true;
    c3a8:	2301      	movs	r3, #1
    c3aa:	e013      	b.n	c3d4 <usbdc_cb_ctl_req+0x60>
		return false;
    c3ac:	2300      	movs	r3, #0
    c3ae:	e011      	b.n	c3d4 <usbdc_cb_ctl_req+0x60>
	switch (req->bmRequestType & (USB_REQT_TYPE_MASK | USB_REQT_DIR_IN)) {
    c3b0:	2b80      	cmp	r3, #128	; 0x80
    c3b2:	d007      	beq.n	c3c4 <usbdc_cb_ctl_req+0x50>
    c3b4:	e00d      	b.n	c3d2 <usbdc_cb_ctl_req+0x5e>
	case USB_REQT_TYPE_STANDARD:
		return usbdc_set_req(ep, req);
    c3b6:	79fb      	ldrb	r3, [r7, #7]
    c3b8:	6839      	ldr	r1, [r7, #0]
    c3ba:	4618      	mov	r0, r3
    c3bc:	4b08      	ldr	r3, [pc, #32]	; (c3e0 <usbdc_cb_ctl_req+0x6c>)
    c3be:	4798      	blx	r3
    c3c0:	4603      	mov	r3, r0
    c3c2:	e007      	b.n	c3d4 <usbdc_cb_ctl_req+0x60>
	case (USB_REQT_TYPE_STANDARD | USB_REQT_DIR_IN):
		return usbdc_get_req(ep, req);
    c3c4:	79fb      	ldrb	r3, [r7, #7]
    c3c6:	6839      	ldr	r1, [r7, #0]
    c3c8:	4618      	mov	r0, r3
    c3ca:	4b06      	ldr	r3, [pc, #24]	; (c3e4 <usbdc_cb_ctl_req+0x70>)
    c3cc:	4798      	blx	r3
    c3ce:	4603      	mov	r3, r0
    c3d0:	e000      	b.n	c3d4 <usbdc_cb_ctl_req+0x60>
	default:
		return false;
    c3d2:	2300      	movs	r3, #0
	}
}
    c3d4:	4618      	mov	r0, r3
    c3d6:	3708      	adds	r7, #8
    c3d8:	46bd      	mov	sp, r7
    c3da:	bd80      	pop	{r7, pc}
    c3dc:	0000c305 	.word	0x0000c305
    c3e0:	0000c1a5 	.word	0x0000c1a5
    c3e4:	0000bdcd 	.word	0x0000bdcd

0000c3e8 <usbdc_ctrl_status_end>:
/**
 * \brief When control status stage is end
 * \param[in] req Pointer to the request.
 */
static void usbdc_ctrl_status_end(const struct usb_req *req)
{
    c3e8:	b580      	push	{r7, lr}
    c3ea:	b082      	sub	sp, #8
    c3ec:	af00      	add	r7, sp, #0
    c3ee:	6078      	str	r0, [r7, #4]
	if (req->bmRequestType != USB_REQT_TYPE_STANDARD) {
    c3f0:	687b      	ldr	r3, [r7, #4]
    c3f2:	781b      	ldrb	r3, [r3, #0]
    c3f4:	2b00      	cmp	r3, #0
    c3f6:	d135      	bne.n	c464 <usbdc_ctrl_status_end+0x7c>
		return;
	}
	switch (req->bRequest) {
    c3f8:	687b      	ldr	r3, [r7, #4]
    c3fa:	785b      	ldrb	r3, [r3, #1]
    c3fc:	2b05      	cmp	r3, #5
    c3fe:	d019      	beq.n	c434 <usbdc_ctrl_status_end+0x4c>
    c400:	2b09      	cmp	r3, #9
    c402:	d000      	beq.n	c406 <usbdc_ctrl_status_end+0x1e>
		usbdc_set_address(req->wValue);
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
		break;
	default:
		break;
    c404:	e02f      	b.n	c466 <usbdc_ctrl_status_end+0x7e>
		usbdc.cfg_value = req->wValue;
    c406:	687b      	ldr	r3, [r7, #4]
    c408:	885b      	ldrh	r3, [r3, #2]
    c40a:	b29b      	uxth	r3, r3
    c40c:	b2da      	uxtb	r2, r3
    c40e:	4b17      	ldr	r3, [pc, #92]	; (c46c <usbdc_ctrl_status_end+0x84>)
    c410:	76da      	strb	r2, [r3, #27]
		usbdc.state     = req->wValue ? USBD_S_CONFIG : USBD_S_ADDRESS;
    c412:	687b      	ldr	r3, [r7, #4]
    c414:	885b      	ldrh	r3, [r3, #2]
    c416:	b29b      	uxth	r3, r3
    c418:	2b00      	cmp	r3, #0
    c41a:	d001      	beq.n	c420 <usbdc_ctrl_status_end+0x38>
    c41c:	2204      	movs	r2, #4
    c41e:	e000      	b.n	c422 <usbdc_ctrl_status_end+0x3a>
    c420:	2203      	movs	r2, #3
    c422:	4b12      	ldr	r3, [pc, #72]	; (c46c <usbdc_ctrl_status_end+0x84>)
    c424:	769a      	strb	r2, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
    c426:	4b11      	ldr	r3, [pc, #68]	; (c46c <usbdc_ctrl_status_end+0x84>)
    c428:	7e9b      	ldrb	r3, [r3, #26]
    c42a:	4619      	mov	r1, r3
    c42c:	2001      	movs	r0, #1
    c42e:	4b10      	ldr	r3, [pc, #64]	; (c470 <usbdc_ctrl_status_end+0x88>)
    c430:	4798      	blx	r3
		break;
    c432:	e018      	b.n	c466 <usbdc_ctrl_status_end+0x7e>
		usbdc_set_address(req->wValue);
    c434:	687b      	ldr	r3, [r7, #4]
    c436:	885b      	ldrh	r3, [r3, #2]
    c438:	b29b      	uxth	r3, r3
    c43a:	b2db      	uxtb	r3, r3
    c43c:	4618      	mov	r0, r3
    c43e:	4b0d      	ldr	r3, [pc, #52]	; (c474 <usbdc_ctrl_status_end+0x8c>)
    c440:	4798      	blx	r3
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
    c442:	687b      	ldr	r3, [r7, #4]
    c444:	885b      	ldrh	r3, [r3, #2]
    c446:	b29b      	uxth	r3, r3
    c448:	2b00      	cmp	r3, #0
    c44a:	d001      	beq.n	c450 <usbdc_ctrl_status_end+0x68>
    c44c:	2203      	movs	r2, #3
    c44e:	e000      	b.n	c452 <usbdc_ctrl_status_end+0x6a>
    c450:	2202      	movs	r2, #2
    c452:	4b06      	ldr	r3, [pc, #24]	; (c46c <usbdc_ctrl_status_end+0x84>)
    c454:	769a      	strb	r2, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
    c456:	4b05      	ldr	r3, [pc, #20]	; (c46c <usbdc_ctrl_status_end+0x84>)
    c458:	7e9b      	ldrb	r3, [r3, #26]
    c45a:	4619      	mov	r1, r3
    c45c:	2001      	movs	r0, #1
    c45e:	4b04      	ldr	r3, [pc, #16]	; (c470 <usbdc_ctrl_status_end+0x88>)
    c460:	4798      	blx	r3
		break;
    c462:	e000      	b.n	c466 <usbdc_ctrl_status_end+0x7e>
		return;
    c464:	bf00      	nop
	}
}
    c466:	3708      	adds	r7, #8
    c468:	46bd      	mov	sp, r7
    c46a:	bd80      	pop	{r7, pc}
    c46c:	200011b8 	.word	0x200011b8
    c470:	0000c2c5 	.word	0x0000c2c5
    c474:	0000c045 	.word	0x0000c045

0000c478 <usbdc_ctrl_data_end>:
/**
 * \brief When control data stage is end
 * \param[in] req Pointer to the request.
 */
static bool usbdc_ctrl_data_end(struct usb_req *req)
{
    c478:	b580      	push	{r7, lr}
    c47a:	b082      	sub	sp, #8
    c47c:	af00      	add	r7, sp, #0
    c47e:	6078      	str	r0, [r7, #4]
	usbdc_request_handler(0, req, USB_DATA_STAGE);
    c480:	2201      	movs	r2, #1
    c482:	6879      	ldr	r1, [r7, #4]
    c484:	2000      	movs	r0, #0
    c486:	4b03      	ldr	r3, [pc, #12]	; (c494 <usbdc_ctrl_data_end+0x1c>)
    c488:	4798      	blx	r3
	return false;
    c48a:	2300      	movs	r3, #0
}
    c48c:	4618      	mov	r0, r3
    c48e:	3708      	adds	r7, #8
    c490:	46bd      	mov	sp, r7
    c492:	bd80      	pop	{r7, pc}
    c494:	0000c305 	.word	0x0000c305

0000c498 <usbdc_cb_ctl_done>:
 * \return Data has error or not.
 * \retval true There is data error, protocol error.
 * \retval false There is no data error.
 */
static bool usbdc_cb_ctl_done(const uint8_t ep, const enum usb_xfer_code code, struct usb_req *req)
{
    c498:	b580      	push	{r7, lr}
    c49a:	b082      	sub	sp, #8
    c49c:	af00      	add	r7, sp, #0
    c49e:	4603      	mov	r3, r0
    c4a0:	603a      	str	r2, [r7, #0]
    c4a2:	71fb      	strb	r3, [r7, #7]
    c4a4:	460b      	mov	r3, r1
    c4a6:	71bb      	strb	r3, [r7, #6]
	(void)ep;

	switch (code) {
    c4a8:	79bb      	ldrb	r3, [r7, #6]
    c4aa:	2b00      	cmp	r3, #0
    c4ac:	d002      	beq.n	c4b4 <usbdc_cb_ctl_done+0x1c>
    c4ae:	2b01      	cmp	r3, #1
    c4b0:	d004      	beq.n	c4bc <usbdc_cb_ctl_done+0x24>
		usbdc_ctrl_status_end(req);
		break;
	case USB_XFER_DATA:
		return usbdc_ctrl_data_end(req);
	default:
		break;
    c4b2:	e008      	b.n	c4c6 <usbdc_cb_ctl_done+0x2e>
		usbdc_ctrl_status_end(req);
    c4b4:	6838      	ldr	r0, [r7, #0]
    c4b6:	4b06      	ldr	r3, [pc, #24]	; (c4d0 <usbdc_cb_ctl_done+0x38>)
    c4b8:	4798      	blx	r3
		break;
    c4ba:	e004      	b.n	c4c6 <usbdc_cb_ctl_done+0x2e>
		return usbdc_ctrl_data_end(req);
    c4bc:	6838      	ldr	r0, [r7, #0]
    c4be:	4b05      	ldr	r3, [pc, #20]	; (c4d4 <usbdc_cb_ctl_done+0x3c>)
    c4c0:	4798      	blx	r3
    c4c2:	4603      	mov	r3, r0
    c4c4:	e000      	b.n	c4c8 <usbdc_cb_ctl_done+0x30>
	}
	return false;
    c4c6:	2300      	movs	r3, #0
}
    c4c8:	4618      	mov	r0, r3
    c4ca:	3708      	adds	r7, #8
    c4cc:	46bd      	mov	sp, r7
    c4ce:	bd80      	pop	{r7, pc}
    c4d0:	0000c3e9 	.word	0x0000c3e9
    c4d4:	0000c479 	.word	0x0000c479

0000c4d8 <usbdc_reset>:

/**
 * \brief USB Device Core Reset
 */
void usbdc_reset(void)
{
    c4d8:	b580      	push	{r7, lr}
    c4da:	af00      	add	r7, sp, #0
	usbdc_unconfig();
    c4dc:	4b10      	ldr	r3, [pc, #64]	; (c520 <usbdc_reset+0x48>)
    c4de:	4798      	blx	r3

	usbdc.state       = USBD_S_DEFAULT;
    c4e0:	4b10      	ldr	r3, [pc, #64]	; (c524 <usbdc_reset+0x4c>)
    c4e2:	2202      	movs	r2, #2
    c4e4:	769a      	strb	r2, [r3, #26]
	usbdc.cfg_value   = 0;
    c4e6:	4b0f      	ldr	r3, [pc, #60]	; (c524 <usbdc_reset+0x4c>)
    c4e8:	2200      	movs	r2, #0
    c4ea:	76da      	strb	r2, [r3, #27]
	usbdc.ifc_alt_map = 0;
    c4ec:	4b0d      	ldr	r3, [pc, #52]	; (c524 <usbdc_reset+0x4c>)
    c4ee:	2200      	movs	r2, #0
    c4f0:	775a      	strb	r2, [r3, #29]

	// Setup EP0
	usb_d_ep_deinit(0);
    c4f2:	2000      	movs	r0, #0
    c4f4:	4b0c      	ldr	r3, [pc, #48]	; (c528 <usbdc_reset+0x50>)
    c4f6:	4798      	blx	r3
	usb_d_ep0_init(usbdc.ctrl_size);
    c4f8:	4b0a      	ldr	r3, [pc, #40]	; (c524 <usbdc_reset+0x4c>)
    c4fa:	7f1b      	ldrb	r3, [r3, #28]
    c4fc:	4618      	mov	r0, r3
    c4fe:	4b0b      	ldr	r3, [pc, #44]	; (c52c <usbdc_reset+0x54>)
    c500:	4798      	blx	r3
	usb_d_ep_register_callback(0, USB_D_EP_CB_SETUP, (FUNC_PTR)usbdc_cb_ctl_req);
    c502:	4a0b      	ldr	r2, [pc, #44]	; (c530 <usbdc_reset+0x58>)
    c504:	2100      	movs	r1, #0
    c506:	2000      	movs	r0, #0
    c508:	4b0a      	ldr	r3, [pc, #40]	; (c534 <usbdc_reset+0x5c>)
    c50a:	4798      	blx	r3
	usb_d_ep_register_callback(0, USB_D_EP_CB_XFER, (FUNC_PTR)usbdc_cb_ctl_done);
    c50c:	4a0a      	ldr	r2, [pc, #40]	; (c538 <usbdc_reset+0x60>)
    c50e:	2102      	movs	r1, #2
    c510:	2000      	movs	r0, #0
    c512:	4b08      	ldr	r3, [pc, #32]	; (c534 <usbdc_reset+0x5c>)
    c514:	4798      	blx	r3
	usb_d_ep_enable(0);
    c516:	2000      	movs	r0, #0
    c518:	4b08      	ldr	r3, [pc, #32]	; (c53c <usbdc_reset+0x64>)
    c51a:	4798      	blx	r3
}
    c51c:	bf00      	nop
    c51e:	bd80      	pop	{r7, pc}
    c520:	0000bf25 	.word	0x0000bf25
    c524:	200011b8 	.word	0x200011b8
    c528:	00002a4d 	.word	0x00002a4d
    c52c:	00002989 	.word	0x00002989
    c530:	0000c375 	.word	0x0000c375
    c534:	00002d4d 	.word	0x00002d4d
    c538:	0000c499 	.word	0x0000c499
    c53c:	00002a9d 	.word	0x00002a9d

0000c540 <usbd_event_cb>:
 * \brief Callback invoked on USB device events
 * \param[in] ev Event code.
 * \param[in] param Event parameter for event handling.
 */
static void usbd_event_cb(const enum usb_event ev, const uint32_t param)
{
    c540:	b580      	push	{r7, lr}
    c542:	b082      	sub	sp, #8
    c544:	af00      	add	r7, sp, #0
    c546:	4603      	mov	r3, r0
    c548:	6039      	str	r1, [r7, #0]
    c54a:	71fb      	strb	r3, [r7, #7]
	(void)param;

	switch (ev) {
    c54c:	79fb      	ldrb	r3, [r7, #7]
    c54e:	2b00      	cmp	r3, #0
    c550:	d002      	beq.n	c558 <usbd_event_cb+0x18>
    c552:	2b01      	cmp	r3, #1
    c554:	d005      	beq.n	c562 <usbd_event_cb+0x22>
	case USB_EV_RESET:
		usbdc_reset();
		break;

	default:
		break;
    c556:	e007      	b.n	c568 <usbd_event_cb+0x28>
		usbdc_change_notify(USBDC_C_CONN, param);
    c558:	6839      	ldr	r1, [r7, #0]
    c55a:	2000      	movs	r0, #0
    c55c:	4b04      	ldr	r3, [pc, #16]	; (c570 <usbd_event_cb+0x30>)
    c55e:	4798      	blx	r3
		break;
    c560:	e002      	b.n	c568 <usbd_event_cb+0x28>
		usbdc_reset();
    c562:	4b04      	ldr	r3, [pc, #16]	; (c574 <usbd_event_cb+0x34>)
    c564:	4798      	blx	r3
		break;
    c566:	bf00      	nop
	}
}
    c568:	bf00      	nop
    c56a:	3708      	adds	r7, #8
    c56c:	46bd      	mov	sp, r7
    c56e:	bd80      	pop	{r7, pc}
    c570:	0000c2c5 	.word	0x0000c2c5
    c574:	0000c4d9 	.word	0x0000c4d9

0000c578 <usbdc_xfer>:

/**
 * \brief Issue USB device transfer
 */
int32_t usbdc_xfer(uint8_t ep, uint8_t *buf, uint32_t size, bool zlp)
{
    c578:	b580      	push	{r7, lr}
    c57a:	b088      	sub	sp, #32
    c57c:	af00      	add	r7, sp, #0
    c57e:	60b9      	str	r1, [r7, #8]
    c580:	607a      	str	r2, [r7, #4]
    c582:	461a      	mov	r2, r3
    c584:	4603      	mov	r3, r0
    c586:	73fb      	strb	r3, [r7, #15]
    c588:	4613      	mov	r3, r2
    c58a:	73bb      	strb	r3, [r7, #14]
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    c58c:	68bb      	ldr	r3, [r7, #8]
    c58e:	617b      	str	r3, [r7, #20]
    c590:	687b      	ldr	r3, [r7, #4]
    c592:	61bb      	str	r3, [r7, #24]
    c594:	7bfb      	ldrb	r3, [r7, #15]
    c596:	773b      	strb	r3, [r7, #28]
    c598:	7bbb      	ldrb	r3, [r7, #14]
    c59a:	777b      	strb	r3, [r7, #29]
	return usb_d_ep_transfer(&xfer);
    c59c:	f107 0314 	add.w	r3, r7, #20
    c5a0:	4618      	mov	r0, r3
    c5a2:	4b03      	ldr	r3, [pc, #12]	; (c5b0 <usbdc_xfer+0x38>)
    c5a4:	4798      	blx	r3
    c5a6:	4603      	mov	r3, r0
}
    c5a8:	4618      	mov	r0, r3
    c5aa:	3720      	adds	r7, #32
    c5ac:	46bd      	mov	sp, r7
    c5ae:	bd80      	pop	{r7, pc}
    c5b0:	00002b0d 	.word	0x00002b0d

0000c5b4 <usbdc_register_handler>:

/**
 * \brief Register the handler
 */
void usbdc_register_handler(enum usbdc_handler_type type, const struct usbdc_handler *h)
{
    c5b4:	b580      	push	{r7, lr}
    c5b6:	b082      	sub	sp, #8
    c5b8:	af00      	add	r7, sp, #0
    c5ba:	4603      	mov	r3, r0
    c5bc:	6039      	str	r1, [r7, #0]
    c5be:	71fb      	strb	r3, [r7, #7]
	switch (type) {
    c5c0:	79fb      	ldrb	r3, [r7, #7]
    c5c2:	2b01      	cmp	r3, #1
    c5c4:	d009      	beq.n	c5da <usbdc_register_handler+0x26>
    c5c6:	2b02      	cmp	r3, #2
    c5c8:	d00c      	beq.n	c5e4 <usbdc_register_handler+0x30>
    c5ca:	2b00      	cmp	r3, #0
    c5cc:	d000      	beq.n	c5d0 <usbdc_register_handler+0x1c>
		break;
	case USBDC_HDL_CHANGE:
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
		break;
	default:
		break;
    c5ce:	e00e      	b.n	c5ee <usbdc_register_handler+0x3a>
		list_insert_at_end(&usbdc.handlers.sof_list, (void *)h);
    c5d0:	6839      	ldr	r1, [r7, #0]
    c5d2:	4809      	ldr	r0, [pc, #36]	; (c5f8 <usbdc_register_handler+0x44>)
    c5d4:	4b09      	ldr	r3, [pc, #36]	; (c5fc <usbdc_register_handler+0x48>)
    c5d6:	4798      	blx	r3
		break;
    c5d8:	e009      	b.n	c5ee <usbdc_register_handler+0x3a>
		list_insert_at_end(&usbdc.handlers.req_list, (void *)h);
    c5da:	6839      	ldr	r1, [r7, #0]
    c5dc:	4808      	ldr	r0, [pc, #32]	; (c600 <usbdc_register_handler+0x4c>)
    c5de:	4b07      	ldr	r3, [pc, #28]	; (c5fc <usbdc_register_handler+0x48>)
    c5e0:	4798      	blx	r3
		break;
    c5e2:	e004      	b.n	c5ee <usbdc_register_handler+0x3a>
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
    c5e4:	6839      	ldr	r1, [r7, #0]
    c5e6:	4807      	ldr	r0, [pc, #28]	; (c604 <usbdc_register_handler+0x50>)
    c5e8:	4b04      	ldr	r3, [pc, #16]	; (c5fc <usbdc_register_handler+0x48>)
    c5ea:	4798      	blx	r3
		break;
    c5ec:	bf00      	nop
	}
}
    c5ee:	bf00      	nop
    c5f0:	3708      	adds	r7, #8
    c5f2:	46bd      	mov	sp, r7
    c5f4:	bd80      	pop	{r7, pc}
    c5f6:	bf00      	nop
    c5f8:	200011bc 	.word	0x200011bc
    c5fc:	00002ea5 	.word	0x00002ea5
    c600:	200011c0 	.word	0x200011c0
    c604:	200011c4 	.word	0x200011c4

0000c608 <usbdc_init>:

/**
 * \brief Initialize the USB device core driver
 */
int32_t usbdc_init(uint8_t *ctrl_buf)
{
    c608:	b580      	push	{r7, lr}
    c60a:	b084      	sub	sp, #16
    c60c:	af00      	add	r7, sp, #0
    c60e:	6078      	str	r0, [r7, #4]
	ASSERT(ctrl_buf);
    c610:	687b      	ldr	r3, [r7, #4]
    c612:	2b00      	cmp	r3, #0
    c614:	bf14      	ite	ne
    c616:	2301      	movne	r3, #1
    c618:	2300      	moveq	r3, #0
    c61a:	b2db      	uxtb	r3, r3
    c61c:	f240 3255 	movw	r2, #853	; 0x355
    c620:	4910      	ldr	r1, [pc, #64]	; (c664 <usbdc_init+0x5c>)
    c622:	4618      	mov	r0, r3
    c624:	4b10      	ldr	r3, [pc, #64]	; (c668 <usbdc_init+0x60>)
    c626:	4798      	blx	r3

	int32_t rc;

	rc = usb_d_init();
    c628:	4b10      	ldr	r3, [pc, #64]	; (c66c <usbdc_init+0x64>)
    c62a:	4798      	blx	r3
    c62c:	60f8      	str	r0, [r7, #12]
	if (rc < 0) {
    c62e:	68fb      	ldr	r3, [r7, #12]
    c630:	2b00      	cmp	r3, #0
    c632:	da01      	bge.n	c638 <usbdc_init+0x30>
		return rc;
    c634:	68fb      	ldr	r3, [r7, #12]
    c636:	e010      	b.n	c65a <usbdc_init+0x52>
	}

	memset(&usbdc, 0, sizeof(usbdc));
    c638:	2220      	movs	r2, #32
    c63a:	2100      	movs	r1, #0
    c63c:	480c      	ldr	r0, [pc, #48]	; (c670 <usbdc_init+0x68>)
    c63e:	4b0d      	ldr	r3, [pc, #52]	; (c674 <usbdc_init+0x6c>)
    c640:	4798      	blx	r3
	usbdc.ctrl_buf = ctrl_buf;
    c642:	4a0b      	ldr	r2, [pc, #44]	; (c670 <usbdc_init+0x68>)
    c644:	687b      	ldr	r3, [r7, #4]
    c646:	6153      	str	r3, [r2, #20]
	usb_d_register_callback(USB_D_CB_SOF, (FUNC_PTR)usbd_sof_cb);
    c648:	490b      	ldr	r1, [pc, #44]	; (c678 <usbdc_init+0x70>)
    c64a:	2000      	movs	r0, #0
    c64c:	4b0b      	ldr	r3, [pc, #44]	; (c67c <usbdc_init+0x74>)
    c64e:	4798      	blx	r3
	usb_d_register_callback(USB_D_CB_EVENT, (FUNC_PTR)usbd_event_cb);
    c650:	490b      	ldr	r1, [pc, #44]	; (c680 <usbdc_init+0x78>)
    c652:	2001      	movs	r0, #1
    c654:	4b09      	ldr	r3, [pc, #36]	; (c67c <usbdc_init+0x74>)
    c656:	4798      	blx	r3

	return 0;
    c658:	2300      	movs	r3, #0
}
    c65a:	4618      	mov	r0, r3
    c65c:	3710      	adds	r7, #16
    c65e:	46bd      	mov	sp, r7
    c660:	bd80      	pop	{r7, pc}
    c662:	bf00      	nop
    c664:	00013600 	.word	0x00013600
    c668:	00002dc9 	.word	0x00002dc9
    c66c:	00002875 	.word	0x00002875
    c670:	200011b8 	.word	0x200011b8
    c674:	00013051 	.word	0x00013051
    c678:	0000c365 	.word	0x0000c365
    c67c:	00002921 	.word	0x00002921
    c680:	0000c541 	.word	0x0000c541

0000c684 <usbdc_register_function>:
 * \brief Register/unregister function support of a USB device function
 *
 * Must be invoked when USB device is stopped.
 */
void usbdc_register_function(struct usbdf_driver *func)
{
    c684:	b580      	push	{r7, lr}
    c686:	b082      	sub	sp, #8
    c688:	af00      	add	r7, sp, #0
    c68a:	6078      	str	r0, [r7, #4]
	list_insert_at_end(&usbdc.func_list, func);
    c68c:	6879      	ldr	r1, [r7, #4]
    c68e:	4803      	ldr	r0, [pc, #12]	; (c69c <usbdc_register_function+0x18>)
    c690:	4b03      	ldr	r3, [pc, #12]	; (c6a0 <usbdc_register_function+0x1c>)
    c692:	4798      	blx	r3
}
    c694:	bf00      	nop
    c696:	3708      	adds	r7, #8
    c698:	46bd      	mov	sp, r7
    c69a:	bd80      	pop	{r7, pc}
    c69c:	200011c8 	.word	0x200011c8
    c6a0:	00002ea5 	.word	0x00002ea5

0000c6a4 <usbdc_start>:

/**
 * \brief Start the USB device driver with specific descriptors set
 */
int32_t usbdc_start(struct usbd_descriptors *desces)
{
    c6a4:	b580      	push	{r7, lr}
    c6a6:	b082      	sub	sp, #8
    c6a8:	af00      	add	r7, sp, #0
    c6aa:	6078      	str	r0, [r7, #4]
	if (usbdc.state >= USBD_S_POWER) {
    c6ac:	4b0f      	ldr	r3, [pc, #60]	; (c6ec <usbdc_start+0x48>)
    c6ae:	7e9b      	ldrb	r3, [r3, #26]
    c6b0:	2b00      	cmp	r3, #0
    c6b2:	d002      	beq.n	c6ba <usbdc_start+0x16>
		return ERR_BUSY;
    c6b4:	f06f 0303 	mvn.w	r3, #3
    c6b8:	e013      	b.n	c6e2 <usbdc_start+0x3e>
	}

	if (desces) {
    c6ba:	687b      	ldr	r3, [r7, #4]
    c6bc:	2b00      	cmp	r3, #0
    c6be:	d00e      	beq.n	c6de <usbdc_start+0x3a>
		usbdc.desces.ls_fs = desces;
    c6c0:	4a0a      	ldr	r2, [pc, #40]	; (c6ec <usbdc_start+0x48>)
    c6c2:	687b      	ldr	r3, [r7, #4]
    c6c4:	6013      	str	r3, [r2, #0]
#endif
	} else {
		return ERR_BAD_DATA;
	}

	usbdc.ctrl_size = desces->sod[7];
    c6c6:	687b      	ldr	r3, [r7, #4]
    c6c8:	681b      	ldr	r3, [r3, #0]
    c6ca:	79da      	ldrb	r2, [r3, #7]
    c6cc:	4b07      	ldr	r3, [pc, #28]	; (c6ec <usbdc_start+0x48>)
    c6ce:	771a      	strb	r2, [r3, #28]
	usbdc.state     = USBD_S_POWER;
    c6d0:	4b06      	ldr	r3, [pc, #24]	; (c6ec <usbdc_start+0x48>)
    c6d2:	2201      	movs	r2, #1
    c6d4:	769a      	strb	r2, [r3, #26]
	usb_d_enable();
    c6d6:	4b06      	ldr	r3, [pc, #24]	; (c6f0 <usbdc_start+0x4c>)
    c6d8:	4798      	blx	r3
	return ERR_NONE;
    c6da:	2300      	movs	r3, #0
    c6dc:	e001      	b.n	c6e2 <usbdc_start+0x3e>
		return ERR_BAD_DATA;
    c6de:	f06f 0308 	mvn.w	r3, #8
}
    c6e2:	4618      	mov	r0, r3
    c6e4:	3708      	adds	r7, #8
    c6e6:	46bd      	mov	sp, r7
    c6e8:	bd80      	pop	{r7, pc}
    c6ea:	bf00      	nop
    c6ec:	200011b8 	.word	0x200011b8
    c6f0:	00002945 	.word	0x00002945

0000c6f4 <usbdc_attach>:

/**
 * \brief Attach the USB device to host
 */
void usbdc_attach(void)
{
    c6f4:	b580      	push	{r7, lr}
    c6f6:	af00      	add	r7, sp, #0
	usb_d_attach();
    c6f8:	4b01      	ldr	r3, [pc, #4]	; (c700 <usbdc_attach+0xc>)
    c6fa:	4798      	blx	r3
}
    c6fc:	bf00      	nop
    c6fe:	bd80      	pop	{r7, pc}
    c700:	00002959 	.word	0x00002959

0000c704 <usbdc_get_ctrl_buffer>:

/**
 * \brief Return USB Device endpoint0 buffer
 */
uint8_t *usbdc_get_ctrl_buffer(void)
{
    c704:	b480      	push	{r7}
    c706:	af00      	add	r7, sp, #0
	return usbdc.ctrl_buf;
    c708:	4b03      	ldr	r3, [pc, #12]	; (c718 <usbdc_get_ctrl_buffer+0x14>)
    c70a:	695b      	ldr	r3, [r3, #20]
}
    c70c:	4618      	mov	r0, r3
    c70e:	46bd      	mov	sp, r7
    c710:	f85d 7b04 	ldr.w	r7, [sp], #4
    c714:	4770      	bx	lr
    c716:	bf00      	nop
    c718:	200011b8 	.word	0x200011b8

0000c71c <usbdc_get_state>:

/**
 * \brief Return current USB state
 */
uint8_t usbdc_get_state(void)
{
    c71c:	b480      	push	{r7}
    c71e:	af00      	add	r7, sp, #0
	if (usbdc.state & USBD_S_SUSPEND) {
    c720:	4b07      	ldr	r3, [pc, #28]	; (c740 <usbdc_get_state+0x24>)
    c722:	7e9b      	ldrb	r3, [r3, #26]
    c724:	f003 0310 	and.w	r3, r3, #16
    c728:	2b00      	cmp	r3, #0
    c72a:	d001      	beq.n	c730 <usbdc_get_state+0x14>
		return USBD_S_SUSPEND;
    c72c:	2310      	movs	r3, #16
    c72e:	e001      	b.n	c734 <usbdc_get_state+0x18>
	}
	return usbdc.state;
    c730:	4b03      	ldr	r3, [pc, #12]	; (c740 <usbdc_get_state+0x24>)
    c732:	7e9b      	ldrb	r3, [r3, #26]
}
    c734:	4618      	mov	r0, r3
    c736:	46bd      	mov	sp, r7
    c738:	f85d 7b04 	ldr.w	r7, [sp], #4
    c73c:	4770      	bx	lr
    c73e:	bf00      	nop
    c740:	200011b8 	.word	0x200011b8

0000c744 <usb_get_u16>:
{
    c744:	b480      	push	{r7}
    c746:	b083      	sub	sp, #12
    c748:	af00      	add	r7, sp, #0
    c74a:	6078      	str	r0, [r7, #4]
	return (ptr[0] + (ptr[1] << 8));
    c74c:	687b      	ldr	r3, [r7, #4]
    c74e:	781b      	ldrb	r3, [r3, #0]
    c750:	b29a      	uxth	r2, r3
    c752:	687b      	ldr	r3, [r7, #4]
    c754:	3301      	adds	r3, #1
    c756:	781b      	ldrb	r3, [r3, #0]
    c758:	b29b      	uxth	r3, r3
    c75a:	021b      	lsls	r3, r3, #8
    c75c:	b29b      	uxth	r3, r3
    c75e:	4413      	add	r3, r2
    c760:	b29b      	uxth	r3, r3
}
    c762:	4618      	mov	r0, r3
    c764:	370c      	adds	r7, #12
    c766:	46bd      	mov	sp, r7
    c768:	f85d 7b04 	ldr.w	r7, [sp], #4
    c76c:	4770      	bx	lr

0000c76e <usb_desc_len>:
{
    c76e:	b480      	push	{r7}
    c770:	b083      	sub	sp, #12
    c772:	af00      	add	r7, sp, #0
    c774:	6078      	str	r0, [r7, #4]
	return desc[0];
    c776:	687b      	ldr	r3, [r7, #4]
    c778:	781b      	ldrb	r3, [r3, #0]
}
    c77a:	4618      	mov	r0, r3
    c77c:	370c      	adds	r7, #12
    c77e:	46bd      	mov	sp, r7
    c780:	f85d 7b04 	ldr.w	r7, [sp], #4
    c784:	4770      	bx	lr

0000c786 <usb_desc_type>:
{
    c786:	b480      	push	{r7}
    c788:	b083      	sub	sp, #12
    c78a:	af00      	add	r7, sp, #0
    c78c:	6078      	str	r0, [r7, #4]
	return desc[1];
    c78e:	687b      	ldr	r3, [r7, #4]
    c790:	3301      	adds	r3, #1
    c792:	781b      	ldrb	r3, [r3, #0]
}
    c794:	4618      	mov	r0, r3
    c796:	370c      	adds	r7, #12
    c798:	46bd      	mov	sp, r7
    c79a:	f85d 7b04 	ldr.w	r7, [sp], #4
    c79e:	4770      	bx	lr

0000c7a0 <usb_desc_next>:
{
    c7a0:	b580      	push	{r7, lr}
    c7a2:	b082      	sub	sp, #8
    c7a4:	af00      	add	r7, sp, #0
    c7a6:	6078      	str	r0, [r7, #4]
	return (desc + usb_desc_len(desc));
    c7a8:	6878      	ldr	r0, [r7, #4]
    c7aa:	4b05      	ldr	r3, [pc, #20]	; (c7c0 <usb_desc_next+0x20>)
    c7ac:	4798      	blx	r3
    c7ae:	4603      	mov	r3, r0
    c7b0:	461a      	mov	r2, r3
    c7b2:	687b      	ldr	r3, [r7, #4]
    c7b4:	4413      	add	r3, r2
}
    c7b6:	4618      	mov	r0, r3
    c7b8:	3708      	adds	r7, #8
    c7ba:	46bd      	mov	sp, r7
    c7bc:	bd80      	pop	{r7, pc}
    c7be:	bf00      	nop
    c7c0:	0000c76f 	.word	0x0000c76f

0000c7c4 <usb_cfg_desc_total_len>:
{
    c7c4:	b580      	push	{r7, lr}
    c7c6:	b082      	sub	sp, #8
    c7c8:	af00      	add	r7, sp, #0
    c7ca:	6078      	str	r0, [r7, #4]
	return usb_get_u16(cfg_desc + 2);
    c7cc:	687b      	ldr	r3, [r7, #4]
    c7ce:	3302      	adds	r3, #2
    c7d0:	4618      	mov	r0, r3
    c7d2:	4b03      	ldr	r3, [pc, #12]	; (c7e0 <usb_cfg_desc_total_len+0x1c>)
    c7d4:	4798      	blx	r3
    c7d6:	4603      	mov	r3, r0
}
    c7d8:	4618      	mov	r0, r3
    c7da:	3708      	adds	r7, #8
    c7dc:	46bd      	mov	sp, r7
    c7de:	bd80      	pop	{r7, pc}
    c7e0:	0000c745 	.word	0x0000c745

0000c7e4 <usb_cfg_desc_next>:
/** \brief Get Next USB Descriptor After the Configuration Descriptors list
 *  \param[in] cfg_desc Byte pointer to the descriptor start address
 *  \return Byte pointer to descriptor after configuration end
 */
static inline uint8_t *usb_cfg_desc_next(uint8_t *cfg_desc)
{
    c7e4:	b580      	push	{r7, lr}
    c7e6:	b082      	sub	sp, #8
    c7e8:	af00      	add	r7, sp, #0
    c7ea:	6078      	str	r0, [r7, #4]
	return (cfg_desc + usb_cfg_desc_total_len(cfg_desc));
    c7ec:	6878      	ldr	r0, [r7, #4]
    c7ee:	4b05      	ldr	r3, [pc, #20]	; (c804 <usb_cfg_desc_next+0x20>)
    c7f0:	4798      	blx	r3
    c7f2:	4603      	mov	r3, r0
    c7f4:	461a      	mov	r2, r3
    c7f6:	687b      	ldr	r3, [r7, #4]
    c7f8:	4413      	add	r3, r2
}
    c7fa:	4618      	mov	r0, r3
    c7fc:	3708      	adds	r7, #8
    c7fe:	46bd      	mov	sp, r7
    c800:	bd80      	pop	{r7, pc}
    c802:	bf00      	nop
    c804:	0000c7c5 	.word	0x0000c7c5

0000c808 <usb_find_desc>:
#define _param_error_check(cond) ASSERT(cond)
#define _desc_len_check() ASSERT(usb_desc_len(desc) >= 2)
#endif

uint8_t *usb_find_desc(uint8_t *desc, uint8_t *eof, uint8_t type)
{
    c808:	b580      	push	{r7, lr}
    c80a:	b084      	sub	sp, #16
    c80c:	af00      	add	r7, sp, #0
    c80e:	60f8      	str	r0, [r7, #12]
    c810:	60b9      	str	r1, [r7, #8]
    c812:	4613      	mov	r3, r2
    c814:	71fb      	strb	r3, [r7, #7]
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    c816:	e015      	b.n	c844 <usb_find_desc+0x3c>
		_desc_len_check();
    c818:	68f8      	ldr	r0, [r7, #12]
    c81a:	4b0f      	ldr	r3, [pc, #60]	; (c858 <usb_find_desc+0x50>)
    c81c:	4798      	blx	r3
    c81e:	4603      	mov	r3, r0
    c820:	2b01      	cmp	r3, #1
    c822:	d801      	bhi.n	c828 <usb_find_desc+0x20>
    c824:	2300      	movs	r3, #0
    c826:	e012      	b.n	c84e <usb_find_desc+0x46>
		if (type == usb_desc_type(desc)) {
    c828:	68f8      	ldr	r0, [r7, #12]
    c82a:	4b0c      	ldr	r3, [pc, #48]	; (c85c <usb_find_desc+0x54>)
    c82c:	4798      	blx	r3
    c82e:	4603      	mov	r3, r0
    c830:	461a      	mov	r2, r3
    c832:	79fb      	ldrb	r3, [r7, #7]
    c834:	4293      	cmp	r3, r2
    c836:	d101      	bne.n	c83c <usb_find_desc+0x34>
			return desc;
    c838:	68fb      	ldr	r3, [r7, #12]
    c83a:	e008      	b.n	c84e <usb_find_desc+0x46>
		}
		desc = usb_desc_next(desc);
    c83c:	68f8      	ldr	r0, [r7, #12]
    c83e:	4b08      	ldr	r3, [pc, #32]	; (c860 <usb_find_desc+0x58>)
    c840:	4798      	blx	r3
    c842:	60f8      	str	r0, [r7, #12]
	while (desc < eof) {
    c844:	68fa      	ldr	r2, [r7, #12]
    c846:	68bb      	ldr	r3, [r7, #8]
    c848:	429a      	cmp	r2, r3
    c84a:	d3e5      	bcc.n	c818 <usb_find_desc+0x10>
	}
	return NULL;
    c84c:	2300      	movs	r3, #0
}
    c84e:	4618      	mov	r0, r3
    c850:	3710      	adds	r7, #16
    c852:	46bd      	mov	sp, r7
    c854:	bd80      	pop	{r7, pc}
    c856:	bf00      	nop
    c858:	0000c76f 	.word	0x0000c76f
    c85c:	0000c787 	.word	0x0000c787
    c860:	0000c7a1 	.word	0x0000c7a1

0000c864 <usb_find_ep_desc>:
	}
	return eof;
}

uint8_t *usb_find_ep_desc(uint8_t *desc, uint8_t *eof)
{
    c864:	b580      	push	{r7, lr}
    c866:	b082      	sub	sp, #8
    c868:	af00      	add	r7, sp, #0
    c86a:	6078      	str	r0, [r7, #4]
    c86c:	6039      	str	r1, [r7, #0]
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    c86e:	e019      	b.n	c8a4 <usb_find_ep_desc+0x40>
		_desc_len_check();
    c870:	6878      	ldr	r0, [r7, #4]
    c872:	4b12      	ldr	r3, [pc, #72]	; (c8bc <usb_find_ep_desc+0x58>)
    c874:	4798      	blx	r3
    c876:	4603      	mov	r3, r0
    c878:	2b01      	cmp	r3, #1
    c87a:	d801      	bhi.n	c880 <usb_find_ep_desc+0x1c>
    c87c:	2300      	movs	r3, #0
    c87e:	e018      	b.n	c8b2 <usb_find_ep_desc+0x4e>
		if (USB_DT_INTERFACE == usb_desc_type(desc)) {
    c880:	6878      	ldr	r0, [r7, #4]
    c882:	4b0f      	ldr	r3, [pc, #60]	; (c8c0 <usb_find_ep_desc+0x5c>)
    c884:	4798      	blx	r3
    c886:	4603      	mov	r3, r0
    c888:	2b04      	cmp	r3, #4
    c88a:	d010      	beq.n	c8ae <usb_find_ep_desc+0x4a>
			break;
		}
		if (USB_DT_ENDPOINT == usb_desc_type(desc)) {
    c88c:	6878      	ldr	r0, [r7, #4]
    c88e:	4b0c      	ldr	r3, [pc, #48]	; (c8c0 <usb_find_ep_desc+0x5c>)
    c890:	4798      	blx	r3
    c892:	4603      	mov	r3, r0
    c894:	2b05      	cmp	r3, #5
    c896:	d101      	bne.n	c89c <usb_find_ep_desc+0x38>
			return desc;
    c898:	687b      	ldr	r3, [r7, #4]
    c89a:	e00a      	b.n	c8b2 <usb_find_ep_desc+0x4e>
		}
		desc = usb_desc_next(desc);
    c89c:	6878      	ldr	r0, [r7, #4]
    c89e:	4b09      	ldr	r3, [pc, #36]	; (c8c4 <usb_find_ep_desc+0x60>)
    c8a0:	4798      	blx	r3
    c8a2:	6078      	str	r0, [r7, #4]
	while (desc < eof) {
    c8a4:	687a      	ldr	r2, [r7, #4]
    c8a6:	683b      	ldr	r3, [r7, #0]
    c8a8:	429a      	cmp	r2, r3
    c8aa:	d3e1      	bcc.n	c870 <usb_find_ep_desc+0xc>
    c8ac:	e000      	b.n	c8b0 <usb_find_ep_desc+0x4c>
			break;
    c8ae:	bf00      	nop
	}
	return NULL;
    c8b0:	2300      	movs	r3, #0
}
    c8b2:	4618      	mov	r0, r3
    c8b4:	3708      	adds	r7, #8
    c8b6:	46bd      	mov	sp, r7
    c8b8:	bd80      	pop	{r7, pc}
    c8ba:	bf00      	nop
    c8bc:	0000c76f 	.word	0x0000c76f
    c8c0:	0000c787 	.word	0x0000c787
    c8c4:	0000c7a1 	.word	0x0000c7a1

0000c8c8 <usb_find_cfg_desc>:

uint8_t *usb_find_cfg_desc(uint8_t *desc, uint8_t *eof, uint8_t cfg_value)
{
    c8c8:	b580      	push	{r7, lr}
    c8ca:	b084      	sub	sp, #16
    c8cc:	af00      	add	r7, sp, #0
    c8ce:	60f8      	str	r0, [r7, #12]
    c8d0:	60b9      	str	r1, [r7, #8]
    c8d2:	4613      	mov	r3, r2
    c8d4:	71fb      	strb	r3, [r7, #7]
	_param_error_check(desc && eof && (desc < eof));

	desc = usb_find_desc(desc, eof, USB_DT_CONFIG);
    c8d6:	2202      	movs	r2, #2
    c8d8:	68b9      	ldr	r1, [r7, #8]
    c8da:	68f8      	ldr	r0, [r7, #12]
    c8dc:	4b15      	ldr	r3, [pc, #84]	; (c934 <usb_find_cfg_desc+0x6c>)
    c8de:	4798      	blx	r3
    c8e0:	60f8      	str	r0, [r7, #12]
	if (!desc) {
    c8e2:	68fb      	ldr	r3, [r7, #12]
    c8e4:	2b00      	cmp	r3, #0
    c8e6:	d11a      	bne.n	c91e <usb_find_cfg_desc+0x56>
		return NULL;
    c8e8:	2300      	movs	r3, #0
    c8ea:	e01f      	b.n	c92c <usb_find_cfg_desc+0x64>
	}
	while (desc < eof) {
		_desc_len_check();
    c8ec:	68f8      	ldr	r0, [r7, #12]
    c8ee:	4b12      	ldr	r3, [pc, #72]	; (c938 <usb_find_cfg_desc+0x70>)
    c8f0:	4798      	blx	r3
    c8f2:	4603      	mov	r3, r0
    c8f4:	2b01      	cmp	r3, #1
    c8f6:	d801      	bhi.n	c8fc <usb_find_cfg_desc+0x34>
    c8f8:	2300      	movs	r3, #0
    c8fa:	e017      	b.n	c92c <usb_find_cfg_desc+0x64>
		if (desc[1] != USB_DT_CONFIG) {
    c8fc:	68fb      	ldr	r3, [r7, #12]
    c8fe:	3301      	adds	r3, #1
    c900:	781b      	ldrb	r3, [r3, #0]
    c902:	2b02      	cmp	r3, #2
    c904:	d110      	bne.n	c928 <usb_find_cfg_desc+0x60>
			break;
		}
		if (desc[5] == cfg_value) {
    c906:	68fb      	ldr	r3, [r7, #12]
    c908:	3305      	adds	r3, #5
    c90a:	781b      	ldrb	r3, [r3, #0]
    c90c:	79fa      	ldrb	r2, [r7, #7]
    c90e:	429a      	cmp	r2, r3
    c910:	d101      	bne.n	c916 <usb_find_cfg_desc+0x4e>
			return desc;
    c912:	68fb      	ldr	r3, [r7, #12]
    c914:	e00a      	b.n	c92c <usb_find_cfg_desc+0x64>
		}
		desc = usb_cfg_desc_next(desc);
    c916:	68f8      	ldr	r0, [r7, #12]
    c918:	4b08      	ldr	r3, [pc, #32]	; (c93c <usb_find_cfg_desc+0x74>)
    c91a:	4798      	blx	r3
    c91c:	60f8      	str	r0, [r7, #12]
	while (desc < eof) {
    c91e:	68fa      	ldr	r2, [r7, #12]
    c920:	68bb      	ldr	r3, [r7, #8]
    c922:	429a      	cmp	r2, r3
    c924:	d3e2      	bcc.n	c8ec <usb_find_cfg_desc+0x24>
    c926:	e000      	b.n	c92a <usb_find_cfg_desc+0x62>
			break;
    c928:	bf00      	nop
	}
	return NULL;
    c92a:	2300      	movs	r3, #0
}
    c92c:	4618      	mov	r0, r3
    c92e:	3710      	adds	r7, #16
    c930:	46bd      	mov	sp, r7
    c932:	bd80      	pop	{r7, pc}
    c934:	0000c809 	.word	0x0000c809
    c938:	0000c76f 	.word	0x0000c76f
    c93c:	0000c7e5 	.word	0x0000c7e5

0000c940 <usb_find_str_desc>:
	}
	return NULL;
}

uint8_t *usb_find_str_desc(uint8_t *desc, uint8_t *eof, uint8_t str_index)
{
    c940:	b580      	push	{r7, lr}
    c942:	b086      	sub	sp, #24
    c944:	af00      	add	r7, sp, #0
    c946:	60f8      	str	r0, [r7, #12]
    c948:	60b9      	str	r1, [r7, #8]
    c94a:	4613      	mov	r3, r2
    c94c:	71fb      	strb	r3, [r7, #7]
	uint8_t i;

	_param_error_check(desc && eof && (desc < eof));

	for (i = 0; desc < eof;) {
    c94e:	2300      	movs	r3, #0
    c950:	75fb      	strb	r3, [r7, #23]
    c952:	e020      	b.n	c996 <usb_find_str_desc+0x56>
		desc = usb_find_desc(desc, eof, USB_DT_STRING);
    c954:	2203      	movs	r2, #3
    c956:	68b9      	ldr	r1, [r7, #8]
    c958:	68f8      	ldr	r0, [r7, #12]
    c95a:	4b13      	ldr	r3, [pc, #76]	; (c9a8 <usb_find_str_desc+0x68>)
    c95c:	4798      	blx	r3
    c95e:	60f8      	str	r0, [r7, #12]
		if (desc) {
    c960:	68fb      	ldr	r3, [r7, #12]
    c962:	2b00      	cmp	r3, #0
    c964:	d015      	beq.n	c992 <usb_find_str_desc+0x52>
			_desc_len_check();
    c966:	68f8      	ldr	r0, [r7, #12]
    c968:	4b10      	ldr	r3, [pc, #64]	; (c9ac <usb_find_str_desc+0x6c>)
    c96a:	4798      	blx	r3
    c96c:	4603      	mov	r3, r0
    c96e:	2b01      	cmp	r3, #1
    c970:	d801      	bhi.n	c976 <usb_find_str_desc+0x36>
    c972:	2300      	movs	r3, #0
    c974:	e014      	b.n	c9a0 <usb_find_str_desc+0x60>
			if (i == str_index) {
    c976:	7dfa      	ldrb	r2, [r7, #23]
    c978:	79fb      	ldrb	r3, [r7, #7]
    c97a:	429a      	cmp	r2, r3
    c97c:	d101      	bne.n	c982 <usb_find_str_desc+0x42>
				return desc;
    c97e:	68fb      	ldr	r3, [r7, #12]
    c980:	e00e      	b.n	c9a0 <usb_find_str_desc+0x60>
			}
			i++;
    c982:	7dfb      	ldrb	r3, [r7, #23]
    c984:	3301      	adds	r3, #1
    c986:	75fb      	strb	r3, [r7, #23]
			desc = usb_desc_next(desc);
    c988:	68f8      	ldr	r0, [r7, #12]
    c98a:	4b09      	ldr	r3, [pc, #36]	; (c9b0 <usb_find_str_desc+0x70>)
    c98c:	4798      	blx	r3
    c98e:	60f8      	str	r0, [r7, #12]
    c990:	e001      	b.n	c996 <usb_find_str_desc+0x56>
		} else {
			return NULL;
    c992:	2300      	movs	r3, #0
    c994:	e004      	b.n	c9a0 <usb_find_str_desc+0x60>
	for (i = 0; desc < eof;) {
    c996:	68fa      	ldr	r2, [r7, #12]
    c998:	68bb      	ldr	r3, [r7, #8]
    c99a:	429a      	cmp	r2, r3
    c99c:	d3da      	bcc.n	c954 <usb_find_str_desc+0x14>
		}
	}
	return NULL;
    c99e:	2300      	movs	r3, #0
}
    c9a0:	4618      	mov	r0, r3
    c9a2:	3718      	adds	r7, #24
    c9a4:	46bd      	mov	sp, r7
    c9a6:	bd80      	pop	{r7, pc}
    c9a8:	0000c809 	.word	0x0000c809
    c9ac:	0000c76f 	.word	0x0000c76f
    c9b0:	0000c7a1 	.word	0x0000c7a1

0000c9b4 <_ZN13CANOpen_ClassC1EP20can_async_descriptor>:
CANOpen_Class::CANOpen_Class()
{
	ptrCANOpenClass=this;
} //CANOpen_Class

CANOpen_Class::CANOpen_Class(can_async_descriptor  *descr)
    c9b4:	b580      	push	{r7, lr}
    c9b6:	b082      	sub	sp, #8
    c9b8:	af00      	add	r7, sp, #0
    c9ba:	6078      	str	r0, [r7, #4]
    c9bc:	6039      	str	r1, [r7, #0]
    c9be:	687b      	ldr	r3, [r7, #4]
    c9c0:	4618      	mov	r0, r3
    c9c2:	4b08      	ldr	r3, [pc, #32]	; (c9e4 <_ZN13CANOpen_ClassC1EP20can_async_descriptor+0x30>)
    c9c4:	4798      	blx	r3
    c9c6:	4a08      	ldr	r2, [pc, #32]	; (c9e8 <_ZN13CANOpen_ClassC1EP20can_async_descriptor+0x34>)
    c9c8:	687b      	ldr	r3, [r7, #4]
    c9ca:	601a      	str	r2, [r3, #0]
{
	ptrCANOpenClass=this;
    c9cc:	4a07      	ldr	r2, [pc, #28]	; (c9ec <_ZN13CANOpen_ClassC1EP20can_async_descriptor+0x38>)
    c9ce:	687b      	ldr	r3, [r7, #4]
    c9d0:	6013      	str	r3, [r2, #0]
	canDescr=descr;
    c9d2:	687b      	ldr	r3, [r7, #4]
    c9d4:	683a      	ldr	r2, [r7, #0]
    c9d6:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
} //CANOpen_Class
    c9da:	687b      	ldr	r3, [r7, #4]
    c9dc:	4618      	mov	r0, r3
    c9de:	3708      	adds	r7, #8
    c9e0:	46bd      	mov	sp, r7
    c9e2:	bd80      	pop	{r7, pc}
    c9e4:	0000cb49 	.word	0x0000cb49
    c9e8:	00013620 	.word	0x00013620
    c9ec:	200011d8 	.word	0x200011d8

0000c9f0 <_ZN13CANOpen_ClassD1Ev>:

// default destructor
CANOpen_Class::~CANOpen_Class()
    c9f0:	b580      	push	{r7, lr}
    c9f2:	b082      	sub	sp, #8
    c9f4:	af00      	add	r7, sp, #0
    c9f6:	6078      	str	r0, [r7, #4]
    c9f8:	4a05      	ldr	r2, [pc, #20]	; (ca10 <_ZN13CANOpen_ClassD1Ev+0x20>)
    c9fa:	687b      	ldr	r3, [r7, #4]
    c9fc:	601a      	str	r2, [r3, #0]
    c9fe:	687b      	ldr	r3, [r7, #4]
    ca00:	4618      	mov	r0, r3
    ca02:	4b04      	ldr	r3, [pc, #16]	; (ca14 <_ZN13CANOpen_ClassD1Ev+0x24>)
    ca04:	4798      	blx	r3
{
} //~CANOpen_Class
    ca06:	687b      	ldr	r3, [r7, #4]
    ca08:	4618      	mov	r0, r3
    ca0a:	3708      	adds	r7, #8
    ca0c:	46bd      	mov	sp, r7
    ca0e:	bd80      	pop	{r7, pc}
    ca10:	00013620 	.word	0x00013620
    ca14:	0000cba9 	.word	0x0000cba9

0000ca18 <_ZN13CANOpen_Class4InitEh>:

int	CANOpen_Class::Init(uint8_t node){
    ca18:	b590      	push	{r4, r7, lr}
    ca1a:	b083      	sub	sp, #12
    ca1c:	af00      	add	r7, sp, #0
    ca1e:	6078      	str	r0, [r7, #4]
    ca20:	460b      	mov	r3, r1
    ca22:	70fb      	strb	r3, [r7, #3]
	coNode=node;
    ca24:	687b      	ldr	r3, [r7, #4]
    ca26:	78fa      	ldrb	r2, [r7, #3]
    ca28:	f883 216f 	strb.w	r2, [r3, #367]	; 0x16f
	if (node==1)
	{
			//RedefineMacros();
	}
	//can.SetDescriptor(canDescr);
	err=CO_init(canDescr,node,1000);
    ca2c:	6878      	ldr	r0, [r7, #4]
    ca2e:	687b      	ldr	r3, [r7, #4]
    ca30:	f8d3 1168 	ldr.w	r1, [r3, #360]	; 0x168
    ca34:	78fa      	ldrb	r2, [r7, #3]
    ca36:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    ca3a:	4c17      	ldr	r4, [pc, #92]	; (ca98 <_ZN13CANOpen_Class4InitEh+0x80>)
    ca3c:	47a0      	blx	r4
    ca3e:	4603      	mov	r3, r0
    ca40:	461a      	mov	r2, r3
    ca42:	687b      	ldr	r3, [r7, #4]
    ca44:	f883 216d 	strb.w	r2, [r3, #365]	; 0x16d
	
	if (err==0)
    ca48:	687b      	ldr	r3, [r7, #4]
    ca4a:	f993 316d 	ldrsb.w	r3, [r3, #365]	; 0x16d
    ca4e:	2b00      	cmp	r3, #0
    ca50:	d116      	bne.n	ca80 <_ZN13CANOpen_Class4InitEh+0x68>
	{
		canopen_driver->canopen_ready=true;
    ca52:	4b12      	ldr	r3, [pc, #72]	; (ca9c <_ZN13CANOpen_Class4InitEh+0x84>)
    ca54:	681b      	ldr	r3, [r3, #0]
    ca56:	2201      	movs	r2, #1
    ca58:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		err=(CO_ReturnError_t)SetInitialMode();
    ca5c:	6878      	ldr	r0, [r7, #4]
    ca5e:	4b10      	ldr	r3, [pc, #64]	; (caa0 <_ZN13CANOpen_Class4InitEh+0x88>)
    ca60:	4798      	blx	r3
    ca62:	4603      	mov	r3, r0
    ca64:	b25a      	sxtb	r2, r3
    ca66:	687b      	ldr	r3, [r7, #4]
    ca68:	f883 216d 	strb.w	r2, [r3, #365]	; 0x16d
		if (node==1)
    ca6c:	78fb      	ldrb	r3, [r7, #3]
    ca6e:	2b01      	cmp	r3, #1
    ca70:	d10a      	bne.n	ca88 <_ZN13CANOpen_Class4InitEh+0x70>
		{
			CO_sendNMTcommand(1,0);
    ca72:	687b      	ldr	r3, [r7, #4]
    ca74:	2200      	movs	r2, #0
    ca76:	2101      	movs	r1, #1
    ca78:	4618      	mov	r0, r3
    ca7a:	4b0a      	ldr	r3, [pc, #40]	; (caa4 <_ZN13CANOpen_Class4InitEh+0x8c>)
    ca7c:	4798      	blx	r3
    ca7e:	e003      	b.n	ca88 <_ZN13CANOpen_Class4InitEh+0x70>
		}
			

		
	}else{
		return	(int)err;
    ca80:	687b      	ldr	r3, [r7, #4]
    ca82:	f993 316d 	ldrsb.w	r3, [r3, #365]	; 0x16d
    ca86:	e002      	b.n	ca8e <_ZN13CANOpen_Class4InitEh+0x76>
	}
	return	(int)err;
    ca88:	687b      	ldr	r3, [r7, #4]
    ca8a:	f993 316d 	ldrsb.w	r3, [r3, #365]	; 0x16d
}
    ca8e:	4618      	mov	r0, r3
    ca90:	370c      	adds	r7, #12
    ca92:	46bd      	mov	sp, r7
    ca94:	bd90      	pop	{r4, r7, pc}
    ca96:	bf00      	nop
    ca98:	0000ccb9 	.word	0x0000ccb9
    ca9c:	20001abc 	.word	0x20001abc
    caa0:	0000caa9 	.word	0x0000caa9
    caa4:	0000cbe1 	.word	0x0000cbe1

0000caa8 <_ZN13CANOpen_Class14SetInitialModeEv>:

int	CANOpen_Class::SetInitialMode(void){
    caa8:	b580      	push	{r7, lr}
    caaa:	b082      	sub	sp, #8
    caac:	af00      	add	r7, sp, #0
    caae:	6078      	str	r0, [r7, #4]
	/* CAN module address, NodeID, Bitrate */
	/* We do not use CAN registers directly, so address here is a pointer to the CAN_HandleTypeDef object. */
	
	
	/* start CAN */
	err=CO_CANsetNormalMode();
    cab0:	687b      	ldr	r3, [r7, #4]
    cab2:	4618      	mov	r0, r3
    cab4:	4b08      	ldr	r3, [pc, #32]	; (cad8 <_ZN13CANOpen_Class14SetInitialModeEv+0x30>)
    cab6:	4798      	blx	r3
    cab8:	4603      	mov	r3, r0
    caba:	461a      	mov	r2, r3
    cabc:	687b      	ldr	r3, [r7, #4]
    cabe:	f883 216d 	strb.w	r2, [r3, #365]	; 0x16d
	//err=CO_CANsetNormalMode(CO->CANmodule[0]);

	reset = CO_RESET_NOT;
    cac2:	687b      	ldr	r3, [r7, #4]
    cac4:	2200      	movs	r2, #0
    cac6:	f883 216c 	strb.w	r2, [r3, #364]	; 0x16c
	return	(int)err;
    caca:	687b      	ldr	r3, [r7, #4]
    cacc:	f993 316d 	ldrsb.w	r3, [r3, #365]	; 0x16d
}
    cad0:	4618      	mov	r0, r3
    cad2:	3708      	adds	r7, #8
    cad4:	46bd      	mov	sp, r7
    cad6:	bd80      	pop	{r7, pc}
    cad8:	0000d8f5 	.word	0x0000d8f5

0000cadc <_ZN13CANOpen_Class16Periodic_ProcessEm>:

int	CANOpen_Class::Periodic_Process(uint32_t timeDifference){
    cadc:	b580      	push	{r7, lr}
    cade:	b082      	sub	sp, #8
    cae0:	af00      	add	r7, sp, #0
    cae2:	6078      	str	r0, [r7, #4]
    cae4:	6039      	str	r1, [r7, #0]
	if (ptrCO->CANmodule[0]->CANnormal)
    cae6:	687b      	ldr	r3, [r7, #4]
    cae8:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
    caec:	681b      	ldr	r3, [r3, #0]
    caee:	7d1b      	ldrb	r3, [r3, #20]
    caf0:	b2db      	uxtb	r3, r3
    caf2:	2b00      	cmp	r3, #0
    caf4:	bf14      	ite	ne
    caf6:	2301      	movne	r3, #1
    caf8:	2300      	moveq	r3, #0
    cafa:	b2db      	uxtb	r3, r3
    cafc:	2b00      	cmp	r3, #0
    cafe:	d015      	beq.n	cb2c <_ZN13CANOpen_Class16Periodic_ProcessEm+0x50>
	{
		syncWas=CO_process_SYNC_RPDO(timeDifference);
    cb00:	687b      	ldr	r3, [r7, #4]
    cb02:	6839      	ldr	r1, [r7, #0]
    cb04:	4618      	mov	r0, r3
    cb06:	4b0d      	ldr	r3, [pc, #52]	; (cb3c <_ZN13CANOpen_Class16Periodic_ProcessEm+0x60>)
    cb08:	4798      	blx	r3
    cb0a:	4603      	mov	r3, r0
    cb0c:	461a      	mov	r2, r3
    cb0e:	687b      	ldr	r3, [r7, #4]
    cb10:	f883 216e 	strb.w	r2, [r3, #366]	; 0x16e
		CO_process_TPDO(syncWas,timeDifference);
    cb14:	6878      	ldr	r0, [r7, #4]
    cb16:	687b      	ldr	r3, [r7, #4]
    cb18:	f893 316e 	ldrb.w	r3, [r3, #366]	; 0x16e
    cb1c:	683a      	ldr	r2, [r7, #0]
    cb1e:	4619      	mov	r1, r3
    cb20:	4b07      	ldr	r3, [pc, #28]	; (cb40 <_ZN13CANOpen_Class16Periodic_ProcessEm+0x64>)
    cb22:	4798      	blx	r3
		CAN_Polling_Tx();
    cb24:	687b      	ldr	r3, [r7, #4]
    cb26:	4618      	mov	r0, r3
    cb28:	4b06      	ldr	r3, [pc, #24]	; (cb44 <_ZN13CANOpen_Class16Periodic_ProcessEm+0x68>)
    cb2a:	4798      	blx	r3
		
	}
	
	return	int(syncWas);
    cb2c:	687b      	ldr	r3, [r7, #4]
    cb2e:	f893 316e 	ldrb.w	r3, [r3, #366]	; 0x16e
}
    cb32:	4618      	mov	r0, r3
    cb34:	3708      	adds	r7, #8
    cb36:	46bd      	mov	sp, r7
    cb38:	bd80      	pop	{r7, pc}
    cb3a:	bf00      	nop
    cb3c:	0000d565 	.word	0x0000d565
    cb40:	0000d5f1 	.word	0x0000d5f1
    cb44:	0000e139 	.word	0x0000e139

0000cb48 <_ZN8CO_ClassC1Ev>:
		static	int32_t             *CO_traceValueBuffers[CO_NO_TRACE];
	#endif
#endif

// default constructor
CO_Class::CO_Class()
    cb48:	b580      	push	{r7, lr}
    cb4a:	b082      	sub	sp, #8
    cb4c:	af00      	add	r7, sp, #0
    cb4e:	6078      	str	r0, [r7, #4]
    cb50:	687b      	ldr	r3, [r7, #4]
    cb52:	4618      	mov	r0, r3
    cb54:	4b10      	ldr	r3, [pc, #64]	; (cb98 <_ZN8CO_ClassC1Ev+0x50>)
    cb56:	4798      	blx	r3
    cb58:	687b      	ldr	r3, [r7, #4]
    cb5a:	f503 739a 	add.w	r3, r3, #308	; 0x134
    cb5e:	4618      	mov	r0, r3
    cb60:	4b0e      	ldr	r3, [pc, #56]	; (cb9c <_ZN8CO_ClassC1Ev+0x54>)
    cb62:	4798      	blx	r3
    cb64:	4a0e      	ldr	r2, [pc, #56]	; (cba0 <_ZN8CO_ClassC1Ev+0x58>)
    cb66:	687b      	ldr	r3, [r7, #4]
    cb68:	601a      	str	r2, [r3, #0]
{
	ptrCO = CO;
    cb6a:	4b0e      	ldr	r3, [pc, #56]	; (cba4 <_ZN8CO_ClassC1Ev+0x5c>)
    cb6c:	681a      	ldr	r2, [r3, #0]
    cb6e:	687b      	ldr	r3, [r7, #4]
    cb70:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
	coCanDescr=NULL;
    cb74:	687b      	ldr	r3, [r7, #4]
    cb76:	2200      	movs	r2, #0
    cb78:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
	CO_memoryUsed=sizeof(COO);
    cb7c:	687b      	ldr	r3, [r7, #4]
    cb7e:	223c      	movs	r2, #60	; 0x3c
    cb80:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
	timer_next=NULL;
    cb84:	687b      	ldr	r3, [r7, #4]
    cb86:	2200      	movs	r2, #0
    cb88:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160
} //CO_Class
    cb8c:	687b      	ldr	r3, [r7, #4]
    cb8e:	4618      	mov	r0, r3
    cb90:	3708      	adds	r7, #8
    cb92:	46bd      	mov	sp, r7
    cb94:	bd80      	pop	{r7, pc}
    cb96:	bf00      	nop
    cb98:	0000d76d 	.word	0x0000d76d
    cb9c:	0000f43d 	.word	0x0000f43d
    cba0:	0001362c 	.word	0x0001362c
    cba4:	20001218 	.word	0x20001218

0000cba8 <_ZN8CO_ClassD1Ev>:

// default destructor
CO_Class::~CO_Class()
    cba8:	b580      	push	{r7, lr}
    cbaa:	b082      	sub	sp, #8
    cbac:	af00      	add	r7, sp, #0
    cbae:	6078      	str	r0, [r7, #4]
    cbb0:	4a08      	ldr	r2, [pc, #32]	; (cbd4 <_ZN8CO_ClassD1Ev+0x2c>)
    cbb2:	687b      	ldr	r3, [r7, #4]
    cbb4:	601a      	str	r2, [r3, #0]
    cbb6:	687b      	ldr	r3, [r7, #4]
    cbb8:	f503 739a 	add.w	r3, r3, #308	; 0x134
    cbbc:	4618      	mov	r0, r3
    cbbe:	4b06      	ldr	r3, [pc, #24]	; (cbd8 <_ZN8CO_ClassD1Ev+0x30>)
    cbc0:	4798      	blx	r3
    cbc2:	687b      	ldr	r3, [r7, #4]
    cbc4:	4618      	mov	r0, r3
    cbc6:	4b05      	ldr	r3, [pc, #20]	; (cbdc <_ZN8CO_ClassD1Ev+0x34>)
    cbc8:	4798      	blx	r3
{
} //~CO_Class
    cbca:	687b      	ldr	r3, [r7, #4]
    cbcc:	4618      	mov	r0, r3
    cbce:	3708      	adds	r7, #8
    cbd0:	46bd      	mov	sp, r7
    cbd2:	bd80      	pop	{r7, pc}
    cbd4:	0001362c 	.word	0x0001362c
    cbd8:	0000f451 	.word	0x0000f451
    cbdc:	0000d7e5 	.word	0x0000d7e5

0000cbe0 <_ZN8CO_Class17CO_sendNMTcommandEhh>:



uint8_t CO_Class::CO_sendNMTcommand( uint8_t command, uint8_t nodeID){
    cbe0:	b580      	push	{r7, lr}
    cbe2:	b082      	sub	sp, #8
    cbe4:	af00      	add	r7, sp, #0
    cbe6:	6078      	str	r0, [r7, #4]
    cbe8:	460b      	mov	r3, r1
    cbea:	70fb      	strb	r3, [r7, #3]
    cbec:	4613      	mov	r3, r2
    cbee:	70bb      	strb	r3, [r7, #2]
	if(NMTM_txBuff == 0){
    cbf0:	687b      	ldr	r3, [r7, #4]
    cbf2:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
    cbf6:	2b00      	cmp	r3, #0
    cbf8:	d101      	bne.n	cbfe <_ZN8CO_Class17CO_sendNMTcommandEhh+0x1e>
		/* error, CO_CANtxBufferInit() was not called for this buffer. */
		return CO_ERROR_TX_UNCONFIGURED; /* -11 */
    cbfa:	23f5      	movs	r3, #245	; 0xf5
    cbfc:	e053      	b.n	cca6 <_ZN8CO_Class17CO_sendNMTcommandEhh+0xc6>
	}
	NMTM_txBuff->data[0] = command;
    cbfe:	687b      	ldr	r3, [r7, #4]
    cc00:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
    cc04:	78fa      	ldrb	r2, [r7, #3]
    cc06:	715a      	strb	r2, [r3, #5]
	NMTM_txBuff->data[1] = nodeID;
    cc08:	687b      	ldr	r3, [r7, #4]
    cc0a:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
    cc0e:	78ba      	ldrb	r2, [r7, #2]
    cc10:	719a      	strb	r2, [r3, #6]

	/* Apply NMT command also to this node, if set so. */
	if(nodeID == 0 || nodeID == CO->NMT->nodeId){
    cc12:	78bb      	ldrb	r3, [r7, #2]
    cc14:	2b00      	cmp	r3, #0
    cc16:	d006      	beq.n	cc26 <_ZN8CO_Class17CO_sendNMTcommandEhh+0x46>
    cc18:	4b25      	ldr	r3, [pc, #148]	; (ccb0 <_ZN8CO_Class17CO_sendNMTcommandEhh+0xd0>)
    cc1a:	681b      	ldr	r3, [r3, #0]
    cc1c:	691b      	ldr	r3, [r3, #16]
    cc1e:	7a9b      	ldrb	r3, [r3, #10]
    cc20:	78ba      	ldrb	r2, [r7, #2]
    cc22:	429a      	cmp	r2, r3
    cc24:	d135      	bne.n	cc92 <_ZN8CO_Class17CO_sendNMTcommandEhh+0xb2>
		switch(command){
    cc26:	78fb      	ldrb	r3, [r7, #3]
    cc28:	2b80      	cmp	r3, #128	; 0x80
    cc2a:	d01f      	beq.n	cc6c <_ZN8CO_Class17CO_sendNMTcommandEhh+0x8c>
    cc2c:	2b80      	cmp	r3, #128	; 0x80
    cc2e:	dc04      	bgt.n	cc3a <_ZN8CO_Class17CO_sendNMTcommandEhh+0x5a>
    cc30:	2b01      	cmp	r3, #1
    cc32:	d007      	beq.n	cc44 <_ZN8CO_Class17CO_sendNMTcommandEhh+0x64>
    cc34:	2b02      	cmp	r3, #2
    cc36:	d013      	beq.n	cc60 <_ZN8CO_Class17CO_sendNMTcommandEhh+0x80>
    cc38:	e02b      	b.n	cc92 <_ZN8CO_Class17CO_sendNMTcommandEhh+0xb2>
    cc3a:	2b81      	cmp	r3, #129	; 0x81
    cc3c:	d01c      	beq.n	cc78 <_ZN8CO_Class17CO_sendNMTcommandEhh+0x98>
    cc3e:	2b82      	cmp	r3, #130	; 0x82
    cc40:	d020      	beq.n	cc84 <_ZN8CO_Class17CO_sendNMTcommandEhh+0xa4>
    cc42:	e026      	b.n	cc92 <_ZN8CO_Class17CO_sendNMTcommandEhh+0xb2>
			case CO_NMT_ENTER_OPERATIONAL:
			if((*CO->NMT->emPr->errorRegister) == 0) {
    cc44:	4b1a      	ldr	r3, [pc, #104]	; (ccb0 <_ZN8CO_Class17CO_sendNMTcommandEhh+0xd0>)
    cc46:	681b      	ldr	r3, [r3, #0]
    cc48:	691b      	ldr	r3, [r3, #16]
    cc4a:	695b      	ldr	r3, [r3, #20]
    cc4c:	681b      	ldr	r3, [r3, #0]
    cc4e:	781b      	ldrb	r3, [r3, #0]
    cc50:	2b00      	cmp	r3, #0
    cc52:	d11d      	bne.n	cc90 <_ZN8CO_Class17CO_sendNMTcommandEhh+0xb0>
				CO->NMT->operatingState = CO_NMT_OPERATIONAL;
    cc54:	4b16      	ldr	r3, [pc, #88]	; (ccb0 <_ZN8CO_Class17CO_sendNMTcommandEhh+0xd0>)
    cc56:	681b      	ldr	r3, [r3, #0]
    cc58:	691b      	ldr	r3, [r3, #16]
    cc5a:	2205      	movs	r2, #5
    cc5c:	701a      	strb	r2, [r3, #0]
			}
			break;
    cc5e:	e017      	b.n	cc90 <_ZN8CO_Class17CO_sendNMTcommandEhh+0xb0>
			case CO_NMT_ENTER_STOPPED:
			CO->NMT->operatingState = CO_NMT_STOPPED;
    cc60:	4b13      	ldr	r3, [pc, #76]	; (ccb0 <_ZN8CO_Class17CO_sendNMTcommandEhh+0xd0>)
    cc62:	681b      	ldr	r3, [r3, #0]
    cc64:	691b      	ldr	r3, [r3, #16]
    cc66:	2204      	movs	r2, #4
    cc68:	701a      	strb	r2, [r3, #0]
			break;
    cc6a:	e012      	b.n	cc92 <_ZN8CO_Class17CO_sendNMTcommandEhh+0xb2>
			case CO_NMT_ENTER_PRE_OPERATIONAL:
			CO->NMT->operatingState = CO_NMT_PRE_OPERATIONAL;
    cc6c:	4b10      	ldr	r3, [pc, #64]	; (ccb0 <_ZN8CO_Class17CO_sendNMTcommandEhh+0xd0>)
    cc6e:	681b      	ldr	r3, [r3, #0]
    cc70:	691b      	ldr	r3, [r3, #16]
    cc72:	227f      	movs	r2, #127	; 0x7f
    cc74:	701a      	strb	r2, [r3, #0]
			break;
    cc76:	e00c      	b.n	cc92 <_ZN8CO_Class17CO_sendNMTcommandEhh+0xb2>
			case CO_NMT_RESET_NODE:
			CO->NMT->resetCommand = CO_RESET_APP;
    cc78:	4b0d      	ldr	r3, [pc, #52]	; (ccb0 <_ZN8CO_Class17CO_sendNMTcommandEhh+0xd0>)
    cc7a:	681b      	ldr	r3, [r3, #0]
    cc7c:	691b      	ldr	r3, [r3, #16]
    cc7e:	2202      	movs	r2, #2
    cc80:	725a      	strb	r2, [r3, #9]
			break;
    cc82:	e006      	b.n	cc92 <_ZN8CO_Class17CO_sendNMTcommandEhh+0xb2>
			case CO_NMT_RESET_COMMUNICATION:
			CO->NMT->resetCommand = CO_RESET_COMM;
    cc84:	4b0a      	ldr	r3, [pc, #40]	; (ccb0 <_ZN8CO_Class17CO_sendNMTcommandEhh+0xd0>)
    cc86:	681b      	ldr	r3, [r3, #0]
    cc88:	691b      	ldr	r3, [r3, #16]
    cc8a:	2201      	movs	r2, #1
    cc8c:	725a      	strb	r2, [r3, #9]
			break;
    cc8e:	e000      	b.n	cc92 <_ZN8CO_Class17CO_sendNMTcommandEhh+0xb2>
			break;
    cc90:	bf00      	nop
		}
	}

	return CAN_Send( NMTM_txBuff); /* 0 = success */
    cc92:	687a      	ldr	r2, [r7, #4]
    cc94:	687b      	ldr	r3, [r7, #4]
    cc96:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
    cc9a:	4619      	mov	r1, r3
    cc9c:	4610      	mov	r0, r2
    cc9e:	4b05      	ldr	r3, [pc, #20]	; (ccb4 <_ZN8CO_Class17CO_sendNMTcommandEhh+0xd4>)
    cca0:	4798      	blx	r3
    cca2:	4603      	mov	r3, r0
    cca4:	b2db      	uxtb	r3, r3
}
    cca6:	4618      	mov	r0, r3
    cca8:	3708      	adds	r7, #8
    ccaa:	46bd      	mov	sp, r7
    ccac:	bd80      	pop	{r7, pc}
    ccae:	bf00      	nop
    ccb0:	20001218 	.word	0x20001218
    ccb4:	0000dc55 	.word	0x0000dc55

0000ccb8 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm>:
/******************************************************************************/
CO_ReturnError_t CO_Class::CO_init(
can_async_descriptor   *CANbaseAddress,
uint8_t                 nodeId,
uint32_t                bitRate)
{
    ccb8:	b5f0      	push	{r4, r5, r6, r7, lr}
    ccba:	b099      	sub	sp, #100	; 0x64
    ccbc:	af0c      	add	r7, sp, #48	; 0x30
    ccbe:	61f8      	str	r0, [r7, #28]
    ccc0:	61b9      	str	r1, [r7, #24]
    ccc2:	613b      	str	r3, [r7, #16]
    ccc4:	4613      	mov	r3, r2
    ccc6:	75fb      	strb	r3, [r7, #23]
	coCanDescr=CANbaseAddress;
    ccc8:	69fb      	ldr	r3, [r7, #28]
    ccca:	69ba      	ldr	r2, [r7, #24]
    cccc:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
	coNode=nodeId;
    ccd0:	69fb      	ldr	r3, [r7, #28]
    ccd2:	7dfa      	ldrb	r2, [r7, #23]
    ccd4:	f883 215c 	strb.w	r2, [r3, #348]	; 0x15c
	#endif


	/* Initialize CANopen object */
	#ifdef CO_USE_GLOBALS
		CO = &COO;
    ccd8:	4ba3      	ldr	r3, [pc, #652]	; (cf68 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2b0>)
    ccda:	4aa4      	ldr	r2, [pc, #656]	; (cf6c <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2b4>)
    ccdc:	601a      	str	r2, [r3, #0]

		CO->CANmodule[0]                    = &COO_CANmodule;
    ccde:	4ba2      	ldr	r3, [pc, #648]	; (cf68 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2b0>)
    cce0:	681b      	ldr	r3, [r3, #0]
    cce2:	4aa3      	ldr	r2, [pc, #652]	; (cf70 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2b8>)
    cce4:	601a      	str	r2, [r3, #0]
		CO_CANmodule_rxArray0               = &COO_CANmodule_rxArray0[0];
    cce6:	4ba3      	ldr	r3, [pc, #652]	; (cf74 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2bc>)
    cce8:	4aa3      	ldr	r2, [pc, #652]	; (cf78 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2c0>)
    ccea:	601a      	str	r2, [r3, #0]
		CO_CANmodule_txArray0               = &COO_CANmodule_txArray0[0];
    ccec:	4ba3      	ldr	r3, [pc, #652]	; (cf7c <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2c4>)
    ccee:	4aa4      	ldr	r2, [pc, #656]	; (cf80 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2c8>)
    ccf0:	601a      	str	r2, [r3, #0]
		for(i=0; i<CO_NO_SDO_SERVER; i++){
    ccf2:	69fb      	ldr	r3, [r7, #28]
    ccf4:	2200      	movs	r2, #0
    ccf6:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
    ccfa:	69fb      	ldr	r3, [r7, #28]
    ccfc:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
    cd00:	2b00      	cmp	r3, #0
    cd02:	d118      	bne.n	cd36 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x7e>
			CO->SDO[i]                      = &COO_SDO[i];
    cd04:	4b98      	ldr	r3, [pc, #608]	; (cf68 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2b0>)
    cd06:	6819      	ldr	r1, [r3, #0]
    cd08:	69fb      	ldr	r3, [r7, #28]
    cd0a:	f8d3 0150 	ldr.w	r0, [r3, #336]	; 0x150
    cd0e:	69fb      	ldr	r3, [r7, #28]
    cd10:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
    cd14:	4613      	mov	r3, r2
    cd16:	011b      	lsls	r3, r3, #4
    cd18:	4413      	add	r3, r2
    cd1a:	00db      	lsls	r3, r3, #3
    cd1c:	4a99      	ldr	r2, [pc, #612]	; (cf84 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2cc>)
    cd1e:	441a      	add	r2, r3
    cd20:	0083      	lsls	r3, r0, #2
    cd22:	440b      	add	r3, r1
    cd24:	605a      	str	r2, [r3, #4]
		for(i=0; i<CO_NO_SDO_SERVER; i++){
    cd26:	69fb      	ldr	r3, [r7, #28]
    cd28:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
    cd2c:	1c5a      	adds	r2, r3, #1
    cd2e:	69fb      	ldr	r3, [r7, #28]
    cd30:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
    cd34:	e7e1      	b.n	ccfa <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x42>
		}

		CO_SDO_ODExtensions                 = &COO_SDO_ODExtensions[0];
    cd36:	4b94      	ldr	r3, [pc, #592]	; (cf88 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2d0>)
    cd38:	4a94      	ldr	r2, [pc, #592]	; (cf8c <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2d4>)
    cd3a:	601a      	str	r2, [r3, #0]
		CO->em                              = &COO_EM;
    cd3c:	4b8a      	ldr	r3, [pc, #552]	; (cf68 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2b0>)
    cd3e:	681b      	ldr	r3, [r3, #0]
    cd40:	4a93      	ldr	r2, [pc, #588]	; (cf90 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2d8>)
    cd42:	609a      	str	r2, [r3, #8]
		CO->emPr                            = &COO_EMpr;
    cd44:	4b88      	ldr	r3, [pc, #544]	; (cf68 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2b0>)
    cd46:	681b      	ldr	r3, [r3, #0]
    cd48:	4a92      	ldr	r2, [pc, #584]	; (cf94 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2dc>)
    cd4a:	60da      	str	r2, [r3, #12]
		CO->NMT                             = &COO_NMT;
    cd4c:	4b86      	ldr	r3, [pc, #536]	; (cf68 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2b0>)
    cd4e:	681b      	ldr	r3, [r3, #0]
    cd50:	4a91      	ldr	r2, [pc, #580]	; (cf98 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2e0>)
    cd52:	611a      	str	r2, [r3, #16]
		CO->SYNC                            = &COO_SYNC;
    cd54:	4b84      	ldr	r3, [pc, #528]	; (cf68 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2b0>)
    cd56:	681b      	ldr	r3, [r3, #0]
    cd58:	4a90      	ldr	r2, [pc, #576]	; (cf9c <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2e4>)
    cd5a:	615a      	str	r2, [r3, #20]
		for(i=0; i<CO_NO_RPDO; i++){
    cd5c:	69fb      	ldr	r3, [r7, #28]
    cd5e:	2200      	movs	r2, #0
    cd60:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
    cd64:	69fb      	ldr	r3, [r7, #28]
    cd66:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
    cd6a:	2b03      	cmp	r3, #3
    cd6c:	d818      	bhi.n	cda0 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0xe8>
			CO->RPDO[i]                     = &COO_RPDO[i];
    cd6e:	4b7e      	ldr	r3, [pc, #504]	; (cf68 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2b0>)
    cd70:	6819      	ldr	r1, [r3, #0]
    cd72:	69fb      	ldr	r3, [r7, #28]
    cd74:	f8d3 0150 	ldr.w	r0, [r3, #336]	; 0x150
    cd78:	69fb      	ldr	r3, [r7, #28]
    cd7a:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
    cd7e:	4613      	mov	r3, r2
    cd80:	005b      	lsls	r3, r3, #1
    cd82:	4413      	add	r3, r2
    cd84:	015b      	lsls	r3, r3, #5
    cd86:	4a86      	ldr	r2, [pc, #536]	; (cfa0 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2e8>)
    cd88:	441a      	add	r2, r3
    cd8a:	1d83      	adds	r3, r0, #6
    cd8c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for(i=0; i<CO_NO_RPDO; i++){
    cd90:	69fb      	ldr	r3, [r7, #28]
    cd92:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
    cd96:	1c5a      	adds	r2, r3, #1
    cd98:	69fb      	ldr	r3, [r7, #28]
    cd9a:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
    cd9e:	e7e1      	b.n	cd64 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0xac>
		}
		for(i=0; i<CO_NO_TPDO; i++){
    cda0:	69fb      	ldr	r3, [r7, #28]
    cda2:	2200      	movs	r2, #0
    cda4:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
    cda8:	69fb      	ldr	r3, [r7, #28]
    cdaa:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
    cdae:	2b03      	cmp	r3, #3
    cdb0:	d817      	bhi.n	cde2 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x12a>
			CO->TPDO[i]                     = &COO_TPDO[i];
    cdb2:	4b6d      	ldr	r3, [pc, #436]	; (cf68 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2b0>)
    cdb4:	681b      	ldr	r3, [r3, #0]
    cdb6:	69fa      	ldr	r2, [r7, #28]
    cdb8:	f8d2 2150 	ldr.w	r2, [r2, #336]	; 0x150
    cdbc:	69f9      	ldr	r1, [r7, #28]
    cdbe:	f8d1 1150 	ldr.w	r1, [r1, #336]	; 0x150
    cdc2:	2058      	movs	r0, #88	; 0x58
    cdc4:	fb00 f101 	mul.w	r1, r0, r1
    cdc8:	4876      	ldr	r0, [pc, #472]	; (cfa4 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2ec>)
    cdca:	4401      	add	r1, r0
    cdcc:	320a      	adds	r2, #10
    cdce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		for(i=0; i<CO_NO_TPDO; i++){
    cdd2:	69fb      	ldr	r3, [r7, #28]
    cdd4:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
    cdd8:	1c5a      	adds	r2, r3, #1
    cdda:	69fb      	ldr	r3, [r7, #28]
    cddc:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
    cde0:	e7e2      	b.n	cda8 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0xf0>
		}
		
		CO->HBcons                          = &COO_HBcons;
    cde2:	4b61      	ldr	r3, [pc, #388]	; (cf68 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2b0>)
    cde4:	681b      	ldr	r3, [r3, #0]
    cde6:	4a70      	ldr	r2, [pc, #448]	; (cfa8 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2f0>)
    cde8:	639a      	str	r2, [r3, #56]	; 0x38
		CO_HBcons_monitoredNodes            = &COO_HBcons_monitoredNodes[0];
    cdea:	4b70      	ldr	r3, [pc, #448]	; (cfac <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2f4>)
    cdec:	4a70      	ldr	r2, [pc, #448]	; (cfb0 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2f8>)
    cdee:	601a      	str	r2, [r3, #0]

	if(errCnt != 0) return CO_ERROR_OUT_OF_MEMORY;
	#endif


	CO->CANmodule[0]->CANnormal = false;
    cdf0:	4b5d      	ldr	r3, [pc, #372]	; (cf68 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2b0>)
    cdf2:	681b      	ldr	r3, [r3, #0]
    cdf4:	681b      	ldr	r3, [r3, #0]
    cdf6:	2200      	movs	r2, #0
    cdf8:	751a      	strb	r2, [r3, #20]
	CO_CANsetConfigurationMode(coCanDescr);
    cdfa:	69fa      	ldr	r2, [r7, #28]
    cdfc:	69fb      	ldr	r3, [r7, #28]
    cdfe:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
    ce02:	4619      	mov	r1, r3
    ce04:	4610      	mov	r0, r2
    ce06:	4b6b      	ldr	r3, [pc, #428]	; (cfb4 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2fc>)
    ce08:	4798      	blx	r3

	/* Verify CANopen Node-ID */
	if(nodeId<1 || nodeId>127)
    ce0a:	7dfb      	ldrb	r3, [r7, #23]
    ce0c:	2b00      	cmp	r3, #0
    ce0e:	dd02      	ble.n	ce16 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x15e>
    ce10:	7dfb      	ldrb	r3, [r7, #23]
    ce12:	2b7f      	cmp	r3, #127	; 0x7f
    ce14:	dd05      	ble.n	ce22 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x16a>
	{
		CO_delete();
    ce16:	69f8      	ldr	r0, [r7, #28]
    ce18:	4b67      	ldr	r3, [pc, #412]	; (cfb8 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x300>)
    ce1a:	4798      	blx	r3
		return CO_ERROR_PARAMETERS;
    ce1c:	f06f 030b 	mvn.w	r3, #11
    ce20:	e2fc      	b.n	d41c <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x764>
	}


	err = CANmodule_init(
    ce22:	69f8      	ldr	r0, [r7, #28]
    ce24:	4b50      	ldr	r3, [pc, #320]	; (cf68 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2b0>)
    ce26:	681b      	ldr	r3, [r3, #0]
    ce28:	6819      	ldr	r1, [r3, #0]
    ce2a:	69fb      	ldr	r3, [r7, #28]
    ce2c:	f8d3 4144 	ldr.w	r4, [r3, #324]	; 0x144
    ce30:	4b50      	ldr	r3, [pc, #320]	; (cf74 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2bc>)
    ce32:	681d      	ldr	r5, [r3, #0]
    ce34:	4b51      	ldr	r3, [pc, #324]	; (cf7c <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2c4>)
    ce36:	681b      	ldr	r3, [r3, #0]
    ce38:	693a      	ldr	r2, [r7, #16]
    ce3a:	9203      	str	r2, [sp, #12]
    ce3c:	2208      	movs	r2, #8
    ce3e:	9202      	str	r2, [sp, #8]
    ce40:	9301      	str	r3, [sp, #4]
    ce42:	230b      	movs	r3, #11
    ce44:	9300      	str	r3, [sp, #0]
    ce46:	462b      	mov	r3, r5
    ce48:	4622      	mov	r2, r4
    ce4a:	4c5c      	ldr	r4, [pc, #368]	; (cfbc <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x304>)
    ce4c:	47a0      	blx	r4
    ce4e:	4603      	mov	r3, r0
    ce50:	461a      	mov	r2, r3
    ce52:	69fb      	ldr	r3, [r7, #28]
    ce54:	f883 2154 	strb.w	r2, [r3, #340]	; 0x154
	CO_RXCAN_NO_MSGS,
	CO_CANmodule_txArray0,
	CO_TXCAN_NO_MSGS,
	bitRate);

	if(err){CO_delete(); return err;}
    ce58:	69fb      	ldr	r3, [r7, #28]
    ce5a:	f993 3154 	ldrsb.w	r3, [r3, #340]	; 0x154
    ce5e:	2b00      	cmp	r3, #0
    ce60:	d006      	beq.n	ce70 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x1b8>
    ce62:	69f8      	ldr	r0, [r7, #28]
    ce64:	4b54      	ldr	r3, [pc, #336]	; (cfb8 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x300>)
    ce66:	4798      	blx	r3
    ce68:	69fb      	ldr	r3, [r7, #28]
    ce6a:	f993 3154 	ldrsb.w	r3, [r3, #340]	; 0x154
    ce6e:	e2d5      	b.n	d41c <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x764>

	for (i=0; i<CO_NO_SDO_SERVER; i++)
    ce70:	69fb      	ldr	r3, [r7, #28]
    ce72:	2200      	movs	r2, #0
    ce74:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
    ce78:	69fb      	ldr	r3, [r7, #28]
    ce7a:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
    ce7e:	2b00      	cmp	r3, #0
    ce80:	f040 80a4 	bne.w	cfcc <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x314>
	{
		uint32_t COB_IDClientToServer;
		uint32_t COB_IDServerToClient;
		if(i==0){
    ce84:	69fb      	ldr	r3, [r7, #28]
    ce86:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
    ce8a:	2b00      	cmp	r3, #0
    ce8c:	d108      	bne.n	cea0 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x1e8>
			/*Default SDO server must be located at first index*/
			COB_IDClientToServer = CO_CAN_ID_RSDO + nodeId;
    ce8e:	7dfb      	ldrb	r3, [r7, #23]
    ce90:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
    ce94:	62fb      	str	r3, [r7, #44]	; 0x2c
			COB_IDServerToClient = CO_CAN_ID_TSDO + nodeId;
    ce96:	7dfb      	ldrb	r3, [r7, #23]
    ce98:	f503 63b0 	add.w	r3, r3, #1408	; 0x580
    ce9c:	62bb      	str	r3, [r7, #40]	; 0x28
    ce9e:	e017      	b.n	ced0 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x218>
			}else{
			COB_IDClientToServer = OD_SDOServerParameter[i].COB_IDClientToServer;
    cea0:	69fb      	ldr	r3, [r7, #28]
    cea2:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
    cea6:	4946      	ldr	r1, [pc, #280]	; (cfc0 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x308>)
    cea8:	4613      	mov	r3, r2
    ceaa:	005b      	lsls	r3, r3, #1
    ceac:	4413      	add	r3, r2
    ceae:	009b      	lsls	r3, r3, #2
    ceb0:	440b      	add	r3, r1
    ceb2:	3364      	adds	r3, #100	; 0x64
    ceb4:	681b      	ldr	r3, [r3, #0]
    ceb6:	62fb      	str	r3, [r7, #44]	; 0x2c
			COB_IDServerToClient = OD_SDOServerParameter[i].COB_IDServerToClient;
    ceb8:	69fb      	ldr	r3, [r7, #28]
    ceba:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
    cebe:	4940      	ldr	r1, [pc, #256]	; (cfc0 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x308>)
    cec0:	4613      	mov	r3, r2
    cec2:	005b      	lsls	r3, r3, #1
    cec4:	4413      	add	r3, r2
    cec6:	009b      	lsls	r3, r3, #2
    cec8:	440b      	add	r3, r1
    ceca:	3368      	adds	r3, #104	; 0x68
    cecc:	681b      	ldr	r3, [r3, #0]
    cece:	62bb      	str	r3, [r7, #40]	; 0x28
		}

		err = CO_SDO_init(
    ced0:	69fb      	ldr	r3, [r7, #28]
    ced2:	f103 0e04 	add.w	lr, r3, #4
    ced6:	4b24      	ldr	r3, [pc, #144]	; (cf68 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2b0>)
    ced8:	681a      	ldr	r2, [r3, #0]
			CO->SDO[i],
    ceda:	69fb      	ldr	r3, [r7, #28]
    cedc:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
		err = CO_SDO_init(
    cee0:	009b      	lsls	r3, r3, #2
    cee2:	4413      	add	r3, r2
    cee4:	685b      	ldr	r3, [r3, #4]
    cee6:	60fb      	str	r3, [r7, #12]
			COB_IDClientToServer,
			COB_IDServerToClient,
			OD_H1200_SDO_SERVER_PARAM+i,
    cee8:	69fb      	ldr	r3, [r7, #28]
    ceea:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
		err = CO_SDO_init(
    ceee:	f503 5290 	add.w	r2, r3, #4608	; 0x1200
			i==0 ? 0 : CO->SDO[0],
    cef2:	69fb      	ldr	r3, [r7, #28]
    cef4:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
		err = CO_SDO_init(
    cef8:	2b00      	cmp	r3, #0
    cefa:	d003      	beq.n	cf04 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x24c>
			i==0 ? 0 : CO->SDO[0],
    cefc:	4b1a      	ldr	r3, [pc, #104]	; (cf68 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2b0>)
    cefe:	681b      	ldr	r3, [r3, #0]
		err = CO_SDO_init(
    cf00:	685b      	ldr	r3, [r3, #4]
    cf02:	e000      	b.n	cf06 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x24e>
    cf04:	2300      	movs	r3, #0
    cf06:	4920      	ldr	r1, [pc, #128]	; (cf88 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2d0>)
    cf08:	6809      	ldr	r1, [r1, #0]
    cf0a:	4817      	ldr	r0, [pc, #92]	; (cf68 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2b0>)
    cf0c:	6800      	ldr	r0, [r0, #0]
    cf0e:	6800      	ldr	r0, [r0, #0]
			&CO_ObjDict[0],
			CO_OD_NoOfElements,
			CO_SDO_ODExtensions,
			nodeId,
			CO->CANmodule[0],
			CO_RXCAN_SDO_SRV+i,
    cf10:	69fc      	ldr	r4, [r7, #28]
    cf12:	f8d4 4150 	ldr.w	r4, [r4, #336]	; 0x150
		err = CO_SDO_init(
    cf16:	3406      	adds	r4, #6
    cf18:	4d13      	ldr	r5, [pc, #76]	; (cf68 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2b0>)
    cf1a:	682d      	ldr	r5, [r5, #0]
    cf1c:	682d      	ldr	r5, [r5, #0]
			CO->CANmodule[0],
			CO_TXCAN_SDO_SRV+i);
    cf1e:	69fe      	ldr	r6, [r7, #28]
    cf20:	f8d6 6150 	ldr.w	r6, [r6, #336]	; 0x150
		err = CO_SDO_init(
    cf24:	3606      	adds	r6, #6
    cf26:	9609      	str	r6, [sp, #36]	; 0x24
    cf28:	9508      	str	r5, [sp, #32]
    cf2a:	9407      	str	r4, [sp, #28]
    cf2c:	9006      	str	r0, [sp, #24]
    cf2e:	7df8      	ldrb	r0, [r7, #23]
    cf30:	9005      	str	r0, [sp, #20]
    cf32:	9104      	str	r1, [sp, #16]
    cf34:	2137      	movs	r1, #55	; 0x37
    cf36:	9103      	str	r1, [sp, #12]
    cf38:	4922      	ldr	r1, [pc, #136]	; (cfc4 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x30c>)
    cf3a:	9102      	str	r1, [sp, #8]
    cf3c:	9301      	str	r3, [sp, #4]
    cf3e:	9200      	str	r2, [sp, #0]
    cf40:	6abb      	ldr	r3, [r7, #40]	; 0x28
    cf42:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    cf44:	68f9      	ldr	r1, [r7, #12]
    cf46:	4670      	mov	r0, lr
    cf48:	4c1f      	ldr	r4, [pc, #124]	; (cfc8 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x310>)
    cf4a:	47a0      	blx	r4
    cf4c:	4603      	mov	r3, r0
    cf4e:	461a      	mov	r2, r3
    cf50:	69fb      	ldr	r3, [r7, #28]
    cf52:	f883 2154 	strb.w	r2, [r3, #340]	; 0x154
	for (i=0; i<CO_NO_SDO_SERVER; i++)
    cf56:	69fb      	ldr	r3, [r7, #28]
    cf58:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
    cf5c:	1c5a      	adds	r2, r3, #1
    cf5e:	69fb      	ldr	r3, [r7, #28]
    cf60:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
    cf64:	e788      	b.n	ce78 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x1c0>
    cf66:	bf00      	nop
    cf68:	20001218 	.word	0x20001218
    cf6c:	200011dc 	.word	0x200011dc
    cf70:	2000122c 	.word	0x2000122c
    cf74:	2000121c 	.word	0x2000121c
    cf78:	20001250 	.word	0x20001250
    cf7c:	20001220 	.word	0x20001220
    cf80:	20001300 	.word	0x20001300
    cf84:	20001380 	.word	0x20001380
    cf88:	20001224 	.word	0x20001224
    cf8c:	20001408 	.word	0x20001408
    cf90:	2000169c 	.word	0x2000169c
    cf94:	20001708 	.word	0x20001708
    cf98:	20001724 	.word	0x20001724
    cf9c:	20001748 	.word	0x20001748
    cfa0:	20001784 	.word	0x20001784
    cfa4:	20001904 	.word	0x20001904
    cfa8:	20001a64 	.word	0x20001a64
    cfac:	20001228 	.word	0x20001228
    cfb0:	20001a7c 	.word	0x20001a7c
    cfb4:	0000d8d9 	.word	0x0000d8d9
    cfb8:	0000d449 	.word	0x0000d449
    cfbc:	0000d93d 	.word	0x0000d93d
    cfc0:	2000038c 	.word	0x2000038c
    cfc4:	00013c54 	.word	0x00013c54
    cfc8:	00010ac5 	.word	0x00010ac5
	}

	if(err){CO_delete(); return err;}
    cfcc:	69fb      	ldr	r3, [r7, #28]
    cfce:	f993 3154 	ldrsb.w	r3, [r3, #340]	; 0x154
    cfd2:	2b00      	cmp	r3, #0
    cfd4:	d006      	beq.n	cfe4 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x32c>
    cfd6:	69f8      	ldr	r0, [r7, #28]
    cfd8:	4b7c      	ldr	r3, [pc, #496]	; (d1cc <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x514>)
    cfda:	4798      	blx	r3
    cfdc:	69fb      	ldr	r3, [r7, #28]
    cfde:	f993 3154 	ldrsb.w	r3, [r3, #340]	; 0x154
    cfe2:	e21b      	b.n	d41c <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x764>


	err = EM_Init(
    cfe4:	69fb      	ldr	r3, [r7, #28]
    cfe6:	1d18      	adds	r0, r3, #4
    cfe8:	4b79      	ldr	r3, [pc, #484]	; (d1d0 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x518>)
    cfea:	681b      	ldr	r3, [r3, #0]
    cfec:	6899      	ldr	r1, [r3, #8]
    cfee:	4b78      	ldr	r3, [pc, #480]	; (d1d0 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x518>)
    cff0:	681b      	ldr	r3, [r3, #0]
    cff2:	68dc      	ldr	r4, [r3, #12]
    cff4:	4b76      	ldr	r3, [pc, #472]	; (d1d0 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x518>)
    cff6:	681b      	ldr	r3, [r3, #0]
    cff8:	685d      	ldr	r5, [r3, #4]
    cffa:	4b75      	ldr	r3, [pc, #468]	; (d1d0 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x518>)
    cffc:	681b      	ldr	r3, [r3, #0]
    cffe:	681b      	ldr	r3, [r3, #0]
			&OD_errorRegister,
			&OD_preDefinedErrorField[0],
			ODL_preDefinedErrorField_arrayLength,
			CO->CANmodule[0],
			CO_TXCAN_EMERG,
			CO_CAN_ID_EMERGENCY + (uint32_t)nodeId);
    d000:	7dfa      	ldrb	r2, [r7, #23]
	err = EM_Init(
    d002:	3280      	adds	r2, #128	; 0x80
    d004:	9207      	str	r2, [sp, #28]
    d006:	2201      	movs	r2, #1
    d008:	9206      	str	r2, [sp, #24]
    d00a:	9305      	str	r3, [sp, #20]
    d00c:	2308      	movs	r3, #8
    d00e:	9304      	str	r3, [sp, #16]
    d010:	4b70      	ldr	r3, [pc, #448]	; (d1d4 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x51c>)
    d012:	9303      	str	r3, [sp, #12]
    d014:	4b70      	ldr	r3, [pc, #448]	; (d1d8 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x520>)
    d016:	9302      	str	r3, [sp, #8]
    d018:	230a      	movs	r3, #10
    d01a:	9301      	str	r3, [sp, #4]
    d01c:	4b6f      	ldr	r3, [pc, #444]	; (d1dc <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x524>)
    d01e:	9300      	str	r3, [sp, #0]
    d020:	462b      	mov	r3, r5
    d022:	4622      	mov	r2, r4
    d024:	4c6e      	ldr	r4, [pc, #440]	; (d1e0 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x528>)
    d026:	47a0      	blx	r4
    d028:	4603      	mov	r3, r0
    d02a:	461a      	mov	r2, r3
    d02c:	69fb      	ldr	r3, [r7, #28]
    d02e:	f883 2154 	strb.w	r2, [r3, #340]	; 0x154

	if(err){CO_delete(); return err;}
    d032:	69fb      	ldr	r3, [r7, #28]
    d034:	f993 3154 	ldrsb.w	r3, [r3, #340]	; 0x154
    d038:	2b00      	cmp	r3, #0
    d03a:	d006      	beq.n	d04a <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x392>
    d03c:	69f8      	ldr	r0, [r7, #28]
    d03e:	4b63      	ldr	r3, [pc, #396]	; (d1cc <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x514>)
    d040:	4798      	blx	r3
    d042:	69fb      	ldr	r3, [r7, #28]
    d044:	f993 3154 	ldrsb.w	r3, [r3, #340]	; 0x154
    d048:	e1e8      	b.n	d41c <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x764>


	err = NMT_Init(
    d04a:	4b61      	ldr	r3, [pc, #388]	; (d1d0 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x518>)
    d04c:	681b      	ldr	r3, [r3, #0]
    d04e:	6918      	ldr	r0, [r3, #16]
    d050:	4b5f      	ldr	r3, [pc, #380]	; (d1d0 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x518>)
    d052:	681b      	ldr	r3, [r3, #0]
    d054:	68dc      	ldr	r4, [r3, #12]
    d056:	4b5e      	ldr	r3, [pc, #376]	; (d1d0 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x518>)
    d058:	681b      	ldr	r3, [r3, #0]
    d05a:	681b      	ldr	r3, [r3, #0]
    d05c:	4a5c      	ldr	r2, [pc, #368]	; (d1d0 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x518>)
    d05e:	6812      	ldr	r2, [r2, #0]
    d060:	6812      	ldr	r2, [r2, #0]
	CO->CANmodule[0],
	CO_RXCAN_NMT,
	CO_CAN_ID_NMT_SERVICE,
	CO->CANmodule[0],
	CO_TXCAN_HB,
	CO_CAN_ID_HEARTBEAT + nodeId);
    d062:	7df9      	ldrb	r1, [r7, #23]
    d064:	f501 61e0 	add.w	r1, r1, #1792	; 0x700
	err = NMT_Init(
    d068:	7dfd      	ldrb	r5, [r7, #23]
    d06a:	9106      	str	r1, [sp, #24]
    d06c:	2107      	movs	r1, #7
    d06e:	9105      	str	r1, [sp, #20]
    d070:	9204      	str	r2, [sp, #16]
    d072:	2200      	movs	r2, #0
    d074:	9203      	str	r2, [sp, #12]
    d076:	2200      	movs	r2, #0
    d078:	9202      	str	r2, [sp, #8]
    d07a:	9301      	str	r3, [sp, #4]
    d07c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
    d080:	9300      	str	r3, [sp, #0]
    d082:	462b      	mov	r3, r5
    d084:	4622      	mov	r2, r4
    d086:	4601      	mov	r1, r0
    d088:	69f8      	ldr	r0, [r7, #28]
    d08a:	4c56      	ldr	r4, [pc, #344]	; (d1e4 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x52c>)
    d08c:	47a0      	blx	r4
    d08e:	4603      	mov	r3, r0
    d090:	461a      	mov	r2, r3
    d092:	69fb      	ldr	r3, [r7, #28]
    d094:	f883 2154 	strb.w	r2, [r3, #340]	; 0x154

	if(err){CO_delete(); return err;}
    d098:	69fb      	ldr	r3, [r7, #28]
    d09a:	f993 3154 	ldrsb.w	r3, [r3, #340]	; 0x154
    d09e:	2b00      	cmp	r3, #0
    d0a0:	d006      	beq.n	d0b0 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x3f8>
    d0a2:	69f8      	ldr	r0, [r7, #28]
    d0a4:	4b49      	ldr	r3, [pc, #292]	; (d1cc <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x514>)
    d0a6:	4798      	blx	r3
    d0a8:	69fb      	ldr	r3, [r7, #28]
    d0aa:	f993 3154 	ldrsb.w	r3, [r3, #340]	; 0x154
    d0ae:	e1b5      	b.n	d41c <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x764>


	if (nodeId==1)
    d0b0:	7dfb      	ldrb	r3, [r7, #23]
    d0b2:	2b01      	cmp	r3, #1
    d0b4:	d10d      	bne.n	d0d2 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x41a>
	{
			NMTM_txBuff = CAN_Tx_BufferInit(/* return pointer to 8-byte CAN data buffer, which should be populated */
    d0b6:	69f8      	ldr	r0, [r7, #28]
    d0b8:	2300      	movs	r3, #0
    d0ba:	9301      	str	r3, [sp, #4]
    d0bc:	2302      	movs	r3, #2
    d0be:	9300      	str	r3, [sp, #0]
    d0c0:	2300      	movs	r3, #0
    d0c2:	2200      	movs	r2, #0
    d0c4:	2100      	movs	r1, #0
    d0c6:	4c48      	ldr	r4, [pc, #288]	; (d1e8 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x530>)
    d0c8:	47a0      	blx	r4
    d0ca:	4602      	mov	r2, r0
    d0cc:	69fb      	ldr	r3, [r7, #28]
    d0ce:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

	}else{

	}
       
	err = SYNC_Init(
    d0d2:	69fb      	ldr	r3, [r7, #28]
    d0d4:	f103 060c 	add.w	r6, r3, #12
    d0d8:	4b3d      	ldr	r3, [pc, #244]	; (d1d0 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x518>)
    d0da:	681b      	ldr	r3, [r3, #0]
    d0dc:	695b      	ldr	r3, [r3, #20]
    d0de:	60fb      	str	r3, [r7, #12]
    d0e0:	4b3b      	ldr	r3, [pc, #236]	; (d1d0 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x518>)
    d0e2:	681b      	ldr	r3, [r3, #0]
    d0e4:	689a      	ldr	r2, [r3, #8]
    d0e6:	60ba      	str	r2, [r7, #8]
    d0e8:	4b39      	ldr	r3, [pc, #228]	; (d1d0 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x518>)
    d0ea:	681b      	ldr	r3, [r3, #0]
    d0ec:	6858      	ldr	r0, [r3, #4]
    d0ee:	6078      	str	r0, [r7, #4]
	CO->SYNC,
	CO->em,
	CO->SDO[0],
	&CO->NMT->operatingState,
    d0f0:	4b37      	ldr	r3, [pc, #220]	; (d1d0 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x518>)
    d0f2:	681b      	ldr	r3, [r3, #0]
    d0f4:	691b      	ldr	r3, [r3, #16]
	err = SYNC_Init(
    d0f6:	603b      	str	r3, [r7, #0]
    d0f8:	4b3c      	ldr	r3, [pc, #240]	; (d1ec <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x534>)
    d0fa:	689b      	ldr	r3, [r3, #8]
    d0fc:	4a3b      	ldr	r2, [pc, #236]	; (d1ec <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x534>)
    d0fe:	68d2      	ldr	r2, [r2, #12]
    d100:	493a      	ldr	r1, [pc, #232]	; (d1ec <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x534>)
    d102:	f891 1058 	ldrb.w	r1, [r1, #88]	; 0x58
    d106:	4832      	ldr	r0, [pc, #200]	; (d1d0 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x518>)
    d108:	6800      	ldr	r0, [r0, #0]
    d10a:	6800      	ldr	r0, [r0, #0]
    d10c:	4c30      	ldr	r4, [pc, #192]	; (d1d0 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x518>)
    d10e:	6824      	ldr	r4, [r4, #0]
    d110:	6824      	ldr	r4, [r4, #0]
    d112:	2500      	movs	r5, #0
    d114:	9507      	str	r5, [sp, #28]
    d116:	9406      	str	r4, [sp, #24]
    d118:	2401      	movs	r4, #1
    d11a:	9405      	str	r4, [sp, #20]
    d11c:	9004      	str	r0, [sp, #16]
    d11e:	9103      	str	r1, [sp, #12]
    d120:	9202      	str	r2, [sp, #8]
    d122:	9301      	str	r3, [sp, #4]
    d124:	683c      	ldr	r4, [r7, #0]
    d126:	9400      	str	r4, [sp, #0]
    d128:	687b      	ldr	r3, [r7, #4]
    d12a:	68ba      	ldr	r2, [r7, #8]
    d12c:	68f9      	ldr	r1, [r7, #12]
    d12e:	4630      	mov	r0, r6
    d130:	4c2f      	ldr	r4, [pc, #188]	; (d1f0 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x538>)
    d132:	47a0      	blx	r4
    d134:	4603      	mov	r3, r0
    d136:	461a      	mov	r2, r3
    d138:	69fb      	ldr	r3, [r7, #28]
    d13a:	f883 2154 	strb.w	r2, [r3, #340]	; 0x154
	CO->CANmodule[0],
	CO_RXCAN_SYNC,
	CO->CANmodule[0],
	CO_TXCAN_SYNC);

	if(err){CO_delete(); return err;}
    d13e:	69fb      	ldr	r3, [r7, #28]
    d140:	f993 3154 	ldrsb.w	r3, [r3, #340]	; 0x154
    d144:	2b00      	cmp	r3, #0
    d146:	d006      	beq.n	d156 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x49e>
    d148:	69f8      	ldr	r0, [r7, #28]
    d14a:	4b20      	ldr	r3, [pc, #128]	; (d1cc <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x514>)
    d14c:	4798      	blx	r3
    d14e:	69fb      	ldr	r3, [r7, #28]
    d150:	f993 3154 	ldrsb.w	r3, [r3, #340]	; 0x154
    d154:	e162      	b.n	d41c <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x764>





	for(i=0; i<CO_NO_RPDO; i++){
    d156:	69fb      	ldr	r3, [r7, #28]
    d158:	2200      	movs	r2, #0
    d15a:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
    d15e:	69fb      	ldr	r3, [r7, #28]
    d160:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
    d164:	2b03      	cmp	r3, #3
    d166:	f200 8097 	bhi.w	d298 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x5e0>
		CO_CANmodule_t *CANdevRx = CO->CANmodule[0];
    d16a:	4b19      	ldr	r3, [pc, #100]	; (d1d0 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x518>)
    d16c:	681b      	ldr	r3, [r3, #0]
    d16e:	681b      	ldr	r3, [r3, #0]
    d170:	627b      	str	r3, [r7, #36]	; 0x24
		CANdevRxIdx = CO_RXCAN_RPDO + i;
    d172:	69fb      	ldr	r3, [r7, #28]
    d174:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
    d178:	1c9a      	adds	r2, r3, #2
    d17a:	69fb      	ldr	r3, [r7, #28]
    d17c:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148

		err = CO_RPDO_init(
    d180:	69fb      	ldr	r3, [r7, #28]
    d182:	f103 0e14 	add.w	lr, r3, #20
    d186:	4b12      	ldr	r3, [pc, #72]	; (d1d0 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x518>)
    d188:	681b      	ldr	r3, [r3, #0]
		CO->RPDO[i],
    d18a:	69fa      	ldr	r2, [r7, #28]
    d18c:	f8d2 2150 	ldr.w	r2, [r2, #336]	; 0x150
		err = CO_RPDO_init(
    d190:	3206      	adds	r2, #6
    d192:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    d196:	60fb      	str	r3, [r7, #12]
    d198:	4b0d      	ldr	r3, [pc, #52]	; (d1d0 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x518>)
    d19a:	681b      	ldr	r3, [r3, #0]
    d19c:	689b      	ldr	r3, [r3, #8]
    d19e:	60bb      	str	r3, [r7, #8]
    d1a0:	4b0b      	ldr	r3, [pc, #44]	; (d1d0 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x518>)
    d1a2:	681b      	ldr	r3, [r3, #0]
    d1a4:	685b      	ldr	r3, [r3, #4]
    d1a6:	607b      	str	r3, [r7, #4]
    d1a8:	4b09      	ldr	r3, [pc, #36]	; (d1d0 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x518>)
    d1aa:	681b      	ldr	r3, [r3, #0]
    d1ac:	6958      	ldr	r0, [r3, #20]
		CO->em,
		CO->SDO[0],
		CO->SYNC,
		&CO->NMT->operatingState,
    d1ae:	4b08      	ldr	r3, [pc, #32]	; (d1d0 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x518>)
    d1b0:	681b      	ldr	r3, [r3, #0]
    d1b2:	691b      	ldr	r3, [r3, #16]
		err = CO_RPDO_init(
    d1b4:	603b      	str	r3, [r7, #0]
		nodeId,
		((i<4) ? (CO_CAN_ID_RPDO_1+i*0x100) : 0),
    d1b6:	69fb      	ldr	r3, [r7, #28]
    d1b8:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
		err = CO_RPDO_init(
    d1bc:	2b03      	cmp	r3, #3
    d1be:	d819      	bhi.n	d1f4 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x53c>
		((i<4) ? (CO_CAN_ID_RPDO_1+i*0x100) : 0),
    d1c0:	69fb      	ldr	r3, [r7, #28]
    d1c2:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
		err = CO_RPDO_init(
    d1c6:	3302      	adds	r3, #2
    d1c8:	021a      	lsls	r2, r3, #8
    d1ca:	e014      	b.n	d1f6 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x53e>
    d1cc:	0000d449 	.word	0x0000d449
    d1d0:	20001218 	.word	0x20001218
    d1d4:	2000021c 	.word	0x2000021c
    d1d8:	20000214 	.word	0x20000214
    d1dc:	20000244 	.word	0x20000244
    d1e0:	0000e3a1 	.word	0x0000e3a1
    d1e4:	0000eea9 	.word	0x0000eea9
    d1e8:	0000dba9 	.word	0x0000dba9
    d1ec:	2000038c 	.word	0x2000038c
    d1f0:	00012aed 	.word	0x00012aed
    d1f4:	2200      	movs	r2, #0
		0,
		(CO_RPDOCommPar_t*) &OD_RPDOCommunicationParameter[i],
    d1f6:	69fb      	ldr	r3, [r7, #28]
    d1f8:	f8d3 1150 	ldr.w	r1, [r3, #336]	; 0x150
    d1fc:	460b      	mov	r3, r1
    d1fe:	005b      	lsls	r3, r3, #1
    d200:	440b      	add	r3, r1
    d202:	009b      	lsls	r3, r3, #2
    d204:	3368      	adds	r3, #104	; 0x68
    d206:	4987      	ldr	r1, [pc, #540]	; (d424 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x76c>)
    d208:	440b      	add	r3, r1
    d20a:	1d1c      	adds	r4, r3, #4
		(CO_RPDOMapPar_t*) &OD_RPDOMappingParameter[i],
    d20c:	69fb      	ldr	r3, [r7, #28]
    d20e:	f8d3 1150 	ldr.w	r1, [r3, #336]	; 0x150
    d212:	460b      	mov	r3, r1
    d214:	00db      	lsls	r3, r3, #3
    d216:	440b      	add	r3, r1
    d218:	009b      	lsls	r3, r3, #2
    d21a:	3398      	adds	r3, #152	; 0x98
    d21c:	4981      	ldr	r1, [pc, #516]	; (d424 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x76c>)
    d21e:	440b      	add	r3, r1
    d220:	3304      	adds	r3, #4
		OD_H1400_RXPDO_1_PARAM+i,
    d222:	69f9      	ldr	r1, [r7, #28]
    d224:	f8d1 1150 	ldr.w	r1, [r1, #336]	; 0x150
		err = CO_RPDO_init(
    d228:	f501 51a0 	add.w	r1, r1, #5120	; 0x1400
		OD_H1600_RXPDO_1_MAPPING+i,
    d22c:	69fd      	ldr	r5, [r7, #28]
    d22e:	f8d5 5150 	ldr.w	r5, [r5, #336]	; 0x150
		err = CO_RPDO_init(
    d232:	f505 55b0 	add.w	r5, r5, #5632	; 0x1600
    d236:	69fe      	ldr	r6, [r7, #28]
    d238:	f8d6 6148 	ldr.w	r6, [r6, #328]	; 0x148
    d23c:	960a      	str	r6, [sp, #40]	; 0x28
    d23e:	6a7e      	ldr	r6, [r7, #36]	; 0x24
    d240:	9609      	str	r6, [sp, #36]	; 0x24
    d242:	9508      	str	r5, [sp, #32]
    d244:	9107      	str	r1, [sp, #28]
    d246:	9306      	str	r3, [sp, #24]
    d248:	9405      	str	r4, [sp, #20]
    d24a:	2300      	movs	r3, #0
    d24c:	9304      	str	r3, [sp, #16]
    d24e:	9203      	str	r2, [sp, #12]
    d250:	7dfb      	ldrb	r3, [r7, #23]
    d252:	9302      	str	r3, [sp, #8]
    d254:	683b      	ldr	r3, [r7, #0]
    d256:	9301      	str	r3, [sp, #4]
    d258:	9000      	str	r0, [sp, #0]
    d25a:	687b      	ldr	r3, [r7, #4]
    d25c:	68ba      	ldr	r2, [r7, #8]
    d25e:	68f9      	ldr	r1, [r7, #12]
    d260:	4670      	mov	r0, lr
    d262:	4c71      	ldr	r4, [pc, #452]	; (d428 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x770>)
    d264:	47a0      	blx	r4
    d266:	4603      	mov	r3, r0
    d268:	461a      	mov	r2, r3
    d26a:	69fb      	ldr	r3, [r7, #28]
    d26c:	f883 2154 	strb.w	r2, [r3, #340]	; 0x154
		CANdevRx,
		CANdevRxIdx);

		if(err){CO_delete(); return err;}
    d270:	69fb      	ldr	r3, [r7, #28]
    d272:	f993 3154 	ldrsb.w	r3, [r3, #340]	; 0x154
    d276:	2b00      	cmp	r3, #0
    d278:	d006      	beq.n	d288 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x5d0>
    d27a:	69f8      	ldr	r0, [r7, #28]
    d27c:	4b6b      	ldr	r3, [pc, #428]	; (d42c <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x774>)
    d27e:	4798      	blx	r3
    d280:	69fb      	ldr	r3, [r7, #28]
    d282:	f993 3154 	ldrsb.w	r3, [r3, #340]	; 0x154
    d286:	e0c9      	b.n	d41c <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x764>
	for(i=0; i<CO_NO_RPDO; i++){
    d288:	69fb      	ldr	r3, [r7, #28]
    d28a:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
    d28e:	1c5a      	adds	r2, r3, #1
    d290:	69fb      	ldr	r3, [r7, #28]
    d292:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
    d296:	e762      	b.n	d15e <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x4a6>
	}


	for(i=0; i<CO_NO_TPDO; i++){
    d298:	69fb      	ldr	r3, [r7, #28]
    d29a:	2200      	movs	r2, #0
    d29c:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
    d2a0:	69fb      	ldr	r3, [r7, #28]
    d2a2:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
    d2a6:	2b03      	cmp	r3, #3
    d2a8:	d879      	bhi.n	d39e <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x6e6>
		err = CO_TPDO_init(
    d2aa:	69fb      	ldr	r3, [r7, #28]
    d2ac:	f103 0e14 	add.w	lr, r3, #20
    d2b0:	4b5f      	ldr	r3, [pc, #380]	; (d430 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x778>)
    d2b2:	681b      	ldr	r3, [r3, #0]
		CO->TPDO[i],
    d2b4:	69fa      	ldr	r2, [r7, #28]
    d2b6:	f8d2 2150 	ldr.w	r2, [r2, #336]	; 0x150
		err = CO_TPDO_init(
    d2ba:	320a      	adds	r2, #10
    d2bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    d2c0:	60fb      	str	r3, [r7, #12]
    d2c2:	4b5b      	ldr	r3, [pc, #364]	; (d430 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x778>)
    d2c4:	681b      	ldr	r3, [r3, #0]
    d2c6:	689b      	ldr	r3, [r3, #8]
    d2c8:	60bb      	str	r3, [r7, #8]
    d2ca:	4b59      	ldr	r3, [pc, #356]	; (d430 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x778>)
    d2cc:	681b      	ldr	r3, [r3, #0]
    d2ce:	685b      	ldr	r3, [r3, #4]
    d2d0:	607b      	str	r3, [r7, #4]
		CO->em,
		CO->SDO[0],
		&CO->NMT->operatingState,
    d2d2:	4b57      	ldr	r3, [pc, #348]	; (d430 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x778>)
    d2d4:	681b      	ldr	r3, [r3, #0]
    d2d6:	691b      	ldr	r3, [r3, #16]
		err = CO_TPDO_init(
    d2d8:	603b      	str	r3, [r7, #0]
		nodeId,
		((i<4) ? (CO_CAN_ID_TPDO_1+i*0x100) : 0),
    d2da:	69fb      	ldr	r3, [r7, #28]
    d2dc:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
		err = CO_TPDO_init(
    d2e0:	2b03      	cmp	r3, #3
    d2e2:	d806      	bhi.n	d2f2 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x63a>
		((i<4) ? (CO_CAN_ID_TPDO_1+i*0x100) : 0),
    d2e4:	69fb      	ldr	r3, [r7, #28]
    d2e6:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
    d2ea:	021b      	lsls	r3, r3, #8
		err = CO_TPDO_init(
    d2ec:	f503 72c0 	add.w	r2, r3, #384	; 0x180
    d2f0:	e000      	b.n	d2f4 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x63c>
    d2f2:	2200      	movs	r2, #0
		0,
		(CO_TPDOCommPar_t*) &OD_TPDOCommunicationParameter[i],
    d2f4:	69fb      	ldr	r3, [r7, #28]
    d2f6:	f8d3 1150 	ldr.w	r1, [r3, #336]	; 0x150
    d2fa:	460b      	mov	r3, r1
    d2fc:	00db      	lsls	r3, r3, #3
    d2fe:	1a5b      	subs	r3, r3, r1
    d300:	009b      	lsls	r3, r3, #2
    d302:	f503 7394 	add.w	r3, r3, #296	; 0x128
    d306:	4947      	ldr	r1, [pc, #284]	; (d424 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x76c>)
    d308:	440b      	add	r3, r1
    d30a:	1d18      	adds	r0, r3, #4
		(CO_TPDOMapPar_t*) &OD_TPDOMappingParameter[i],
    d30c:	69fb      	ldr	r3, [r7, #28]
    d30e:	f8d3 1150 	ldr.w	r1, [r3, #336]	; 0x150
    d312:	460b      	mov	r3, r1
    d314:	00db      	lsls	r3, r3, #3
    d316:	440b      	add	r3, r1
    d318:	009b      	lsls	r3, r3, #2
    d31a:	f503 73cc 	add.w	r3, r3, #408	; 0x198
    d31e:	4941      	ldr	r1, [pc, #260]	; (d424 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x76c>)
    d320:	440b      	add	r3, r1
    d322:	3304      	adds	r3, #4
		OD_H1800_TXPDO_1_PARAM+i,
    d324:	69f9      	ldr	r1, [r7, #28]
    d326:	f8d1 1150 	ldr.w	r1, [r1, #336]	; 0x150
		err = CO_TPDO_init(
    d32a:	f501 51c0 	add.w	r1, r1, #6144	; 0x1800
		OD_H1A00_TXPDO_1_MAPPING+i,
    d32e:	69fc      	ldr	r4, [r7, #28]
    d330:	f8d4 4150 	ldr.w	r4, [r4, #336]	; 0x150
		err = CO_TPDO_init(
    d334:	f504 54d0 	add.w	r4, r4, #6656	; 0x1a00
    d338:	4d3d      	ldr	r5, [pc, #244]	; (d430 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x778>)
    d33a:	682d      	ldr	r5, [r5, #0]
    d33c:	682d      	ldr	r5, [r5, #0]
		CO->CANmodule[0],
		CO_TXCAN_TPDO+i);
    d33e:	69fe      	ldr	r6, [r7, #28]
    d340:	f8d6 6150 	ldr.w	r6, [r6, #336]	; 0x150
		err = CO_TPDO_init(
    d344:	3602      	adds	r6, #2
    d346:	9609      	str	r6, [sp, #36]	; 0x24
    d348:	9508      	str	r5, [sp, #32]
    d34a:	9407      	str	r4, [sp, #28]
    d34c:	9106      	str	r1, [sp, #24]
    d34e:	9305      	str	r3, [sp, #20]
    d350:	9004      	str	r0, [sp, #16]
    d352:	2300      	movs	r3, #0
    d354:	9303      	str	r3, [sp, #12]
    d356:	9202      	str	r2, [sp, #8]
    d358:	7dfb      	ldrb	r3, [r7, #23]
    d35a:	9301      	str	r3, [sp, #4]
    d35c:	683b      	ldr	r3, [r7, #0]
    d35e:	9300      	str	r3, [sp, #0]
    d360:	687b      	ldr	r3, [r7, #4]
    d362:	68ba      	ldr	r2, [r7, #8]
    d364:	68f9      	ldr	r1, [r7, #12]
    d366:	4670      	mov	r0, lr
    d368:	4c32      	ldr	r4, [pc, #200]	; (d434 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x77c>)
    d36a:	47a0      	blx	r4
    d36c:	4603      	mov	r3, r0
    d36e:	461a      	mov	r2, r3
    d370:	69fb      	ldr	r3, [r7, #28]
    d372:	f883 2154 	strb.w	r2, [r3, #340]	; 0x154
		if(err){CO_delete(); return err;}
    d376:	69fb      	ldr	r3, [r7, #28]
    d378:	f993 3154 	ldrsb.w	r3, [r3, #340]	; 0x154
    d37c:	2b00      	cmp	r3, #0
    d37e:	d006      	beq.n	d38e <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x6d6>
    d380:	69f8      	ldr	r0, [r7, #28]
    d382:	4b2a      	ldr	r3, [pc, #168]	; (d42c <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x774>)
    d384:	4798      	blx	r3
    d386:	69fb      	ldr	r3, [r7, #28]
    d388:	f993 3154 	ldrsb.w	r3, [r3, #340]	; 0x154
    d38c:	e046      	b.n	d41c <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x764>
	for(i=0; i<CO_NO_TPDO; i++){
    d38e:	69fb      	ldr	r3, [r7, #28]
    d390:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
    d394:	1c5a      	adds	r2, r3, #1
    d396:	69fb      	ldr	r3, [r7, #28]
    d398:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
    d39c:	e780      	b.n	d2a0 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x5e8>
	}

	HB_SetNode(coNode);
    d39e:	69fb      	ldr	r3, [r7, #28]
    d3a0:	f103 0220 	add.w	r2, r3, #32
    d3a4:	69fb      	ldr	r3, [r7, #28]
    d3a6:	f893 315c 	ldrb.w	r3, [r3, #348]	; 0x15c
    d3aa:	4619      	mov	r1, r3
    d3ac:	4610      	mov	r0, r2
    d3ae:	4b22      	ldr	r3, [pc, #136]	; (d438 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x780>)
    d3b0:	4798      	blx	r3
	err = CO_HBconsumer_init(
    d3b2:	69fb      	ldr	r3, [r7, #28]
    d3b4:	f103 0020 	add.w	r0, r3, #32
    d3b8:	4b1d      	ldr	r3, [pc, #116]	; (d430 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x778>)
    d3ba:	681b      	ldr	r3, [r3, #0]
    d3bc:	6b9c      	ldr	r4, [r3, #56]	; 0x38
    d3be:	4b1c      	ldr	r3, [pc, #112]	; (d430 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x778>)
    d3c0:	681b      	ldr	r3, [r3, #0]
    d3c2:	689d      	ldr	r5, [r3, #8]
    d3c4:	4b1a      	ldr	r3, [pc, #104]	; (d430 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x778>)
    d3c6:	681b      	ldr	r3, [r3, #0]
    d3c8:	685e      	ldr	r6, [r3, #4]
    d3ca:	4b1c      	ldr	r3, [pc, #112]	; (d43c <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x784>)
    d3cc:	681b      	ldr	r3, [r3, #0]
    d3ce:	4a18      	ldr	r2, [pc, #96]	; (d430 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x778>)
    d3d0:	6812      	ldr	r2, [r2, #0]
    d3d2:	6812      	ldr	r2, [r2, #0]
    d3d4:	2107      	movs	r1, #7
    d3d6:	9104      	str	r1, [sp, #16]
    d3d8:	9203      	str	r2, [sp, #12]
    d3da:	2204      	movs	r2, #4
    d3dc:	9202      	str	r2, [sp, #8]
    d3de:	9301      	str	r3, [sp, #4]
    d3e0:	4b17      	ldr	r3, [pc, #92]	; (d440 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x788>)
    d3e2:	9300      	str	r3, [sp, #0]
    d3e4:	4633      	mov	r3, r6
    d3e6:	462a      	mov	r2, r5
    d3e8:	4621      	mov	r1, r4
    d3ea:	4c16      	ldr	r4, [pc, #88]	; (d444 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x78c>)
    d3ec:	47a0      	blx	r4
    d3ee:	4603      	mov	r3, r0
    d3f0:	461a      	mov	r2, r3
    d3f2:	69fb      	ldr	r3, [r7, #28]
    d3f4:	f883 2154 	strb.w	r2, [r3, #340]	; 0x154
	CO_HBcons_monitoredNodes,
	CO_NO_HB_CONS,
	CO->CANmodule[0],
	CO_RXCAN_CONS_HB);

	if(err){CO_delete(); return err;}
    d3f8:	69fb      	ldr	r3, [r7, #28]
    d3fa:	f993 3154 	ldrsb.w	r3, [r3, #340]	; 0x154
    d3fe:	2b00      	cmp	r3, #0
    d400:	d006      	beq.n	d410 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x758>
    d402:	69f8      	ldr	r0, [r7, #28]
    d404:	4b09      	ldr	r3, [pc, #36]	; (d42c <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x774>)
    d406:	4798      	blx	r3
    d408:	69fb      	ldr	r3, [r7, #28]
    d40a:	f993 3154 	ldrsb.w	r3, [r3, #340]	; 0x154
    d40e:	e005      	b.n	d41c <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x764>
		OD_INDEX_TRACE_CONFIG + i,
		OD_INDEX_TRACE + i);
	}
	#endif

	ptrCO=CO;
    d410:	4b07      	ldr	r3, [pc, #28]	; (d430 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x778>)
    d412:	681a      	ldr	r2, [r3, #0]
    d414:	69fb      	ldr	r3, [r7, #28]
    d416:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
	return CO_ERROR_NO;
    d41a:	2300      	movs	r3, #0
}
    d41c:	4618      	mov	r0, r3
    d41e:	3734      	adds	r7, #52	; 0x34
    d420:	46bd      	mov	sp, r7
    d422:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d424:	2000038c 	.word	0x2000038c
    d428:	00010035 	.word	0x00010035
    d42c:	0000d449 	.word	0x0000d449
    d430:	20001218 	.word	0x20001218
    d434:	0001013d 	.word	0x0001013d
    d438:	0000edb1 	.word	0x0000edb1
    d43c:	20001228 	.word	0x20001228
    d440:	200003bc 	.word	0x200003bc
    d444:	0000ebb5 	.word	0x0000ebb5

0000d448 <_ZN8CO_Class9CO_deleteEv>:


/******************************************************************************/
void CO_Class::CO_delete(void){
    d448:	b580      	push	{r7, lr}
    d44a:	b082      	sub	sp, #8
    d44c:	af00      	add	r7, sp, #0
    d44e:	6078      	str	r0, [r7, #4]
	#ifndef CO_USE_GLOBALS
	uint32_t i;
	#endif

	CO_CANsetConfigurationMode(coCanDescr);
    d450:	687a      	ldr	r2, [r7, #4]
    d452:	687b      	ldr	r3, [r7, #4]
    d454:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
    d458:	4619      	mov	r1, r3
    d45a:	4610      	mov	r0, r2
    d45c:	4b04      	ldr	r3, [pc, #16]	; (d470 <_ZN8CO_Class9CO_deleteEv+0x28>)
    d45e:	4798      	blx	r3
	CANmodule_Disable();
    d460:	687b      	ldr	r3, [r7, #4]
    d462:	4618      	mov	r0, r3
    d464:	4b03      	ldr	r3, [pc, #12]	; (d474 <_ZN8CO_Class9CO_deleteEv+0x2c>)
    d466:	4798      	blx	r3
		free(CO_CANmodule_txArray0);
		free(CO_CANmodule_rxArray0);
		free(CO->CANmodule[0]);
		CO = NULL;
	#endif
}
    d468:	bf00      	nop
    d46a:	3708      	adds	r7, #8
    d46c:	46bd      	mov	sp, r7
    d46e:	bd80      	pop	{r7, pc}
    d470:	0000d8d9 	.word	0x0000d8d9
    d474:	0000da95 	.word	0x0000da95

0000d478 <_ZN8CO_Class7ProcessEmPm>:


/******************************************************************************/
CO_NMT_reset_cmd_t CO_Class::Process(uint32_t                timeDifference_ms,
uint32_t               *timerNext_ms)
{
    d478:	b590      	push	{r4, r7, lr}
    d47a:	b08b      	sub	sp, #44	; 0x2c
    d47c:	af04      	add	r7, sp, #16
    d47e:	60f8      	str	r0, [r7, #12]
    d480:	60b9      	str	r1, [r7, #8]
    d482:	607a      	str	r2, [r7, #4]
	uint8_t i;
	bool_t NMTisPreOrOperational = false;
    d484:	2300      	movs	r3, #0
    d486:	75bb      	strb	r3, [r7, #22]
	CO_NMT_reset_cmd_t reset = CO_RESET_NOT;
    d488:	2300      	movs	r3, #0
    d48a:	757b      	strb	r3, [r7, #21]
	ms50 = 0;
    d48c:	68fb      	ldr	r3, [r7, #12]
    d48e:	2200      	movs	r2, #0
    d490:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
	if(CO->NMT->operatingState == CO_NMT_PRE_OPERATIONAL || CO->NMT->operatingState == CO_NMT_OPERATIONAL){
    d494:	4b2b      	ldr	r3, [pc, #172]	; (d544 <_ZN8CO_Class7ProcessEmPm+0xcc>)
    d496:	681b      	ldr	r3, [r3, #0]
    d498:	691b      	ldr	r3, [r3, #16]
    d49a:	781b      	ldrb	r3, [r3, #0]
    d49c:	2b7f      	cmp	r3, #127	; 0x7f
    d49e:	d005      	beq.n	d4ac <_ZN8CO_Class7ProcessEmPm+0x34>
    d4a0:	4b28      	ldr	r3, [pc, #160]	; (d544 <_ZN8CO_Class7ProcessEmPm+0xcc>)
    d4a2:	681b      	ldr	r3, [r3, #0]
    d4a4:	691b      	ldr	r3, [r3, #16]
    d4a6:	781b      	ldrb	r3, [r3, #0]
    d4a8:	2b05      	cmp	r3, #5
    d4aa:	d101      	bne.n	d4b0 <_ZN8CO_Class7ProcessEmPm+0x38>
		
		NMTisPreOrOperational = true;
    d4ac:	2301      	movs	r3, #1
    d4ae:	75bb      	strb	r3, [r7, #22]

	



	for(i=0; i<CO_NO_SDO_SERVER; i++){
    d4b0:	2300      	movs	r3, #0
    d4b2:	75fb      	strb	r3, [r7, #23]
    d4b4:	7dfb      	ldrb	r3, [r7, #23]
    d4b6:	2b00      	cmp	r3, #0
    d4b8:	dc0d      	bgt.n	d4d6 <_ZN8CO_Class7ProcessEmPm+0x5e>
		CO_SDO_process(
    d4ba:	68fb      	ldr	r3, [r7, #12]
    d4bc:	1d18      	adds	r0, r3, #4
	
		NMTisPreOrOperational,
		timeDifference_ms,
		1000,
		timerNext_ms);
    d4be:	7db9      	ldrb	r1, [r7, #22]
    d4c0:	687b      	ldr	r3, [r7, #4]
    d4c2:	9300      	str	r3, [sp, #0]
    d4c4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    d4c8:	68ba      	ldr	r2, [r7, #8]
    d4ca:	4c1f      	ldr	r4, [pc, #124]	; (d548 <_ZN8CO_Class7ProcessEmPm+0xd0>)
    d4cc:	47a0      	blx	r4
	for(i=0; i<CO_NO_SDO_SERVER; i++){
    d4ce:	7dfb      	ldrb	r3, [r7, #23]
    d4d0:	3301      	adds	r3, #1
    d4d2:	75fb      	strb	r3, [r7, #23]
    d4d4:	e7ee      	b.n	d4b4 <_ZN8CO_Class7ProcessEmPm+0x3c>
	}

	EM_process(
    d4d6:	68fb      	ldr	r3, [r7, #12]
    d4d8:	1d18      	adds	r0, r3, #4
    d4da:	4b1a      	ldr	r3, [pc, #104]	; (d544 <_ZN8CO_Class7ProcessEmPm+0xcc>)
    d4dc:	681b      	ldr	r3, [r3, #0]
    d4de:	68d9      	ldr	r1, [r3, #12]
    d4e0:	68ba      	ldr	r2, [r7, #8]
    d4e2:	4613      	mov	r3, r2
    d4e4:	009b      	lsls	r3, r3, #2
    d4e6:	4413      	add	r3, r2
    d4e8:	005b      	lsls	r3, r3, #1
    d4ea:	461c      	mov	r4, r3
	CO->emPr,
	NMTisPreOrOperational,
	timeDifference_ms * 10,
	OD_inhibitTimeEMCY);
    d4ec:	4b17      	ldr	r3, [pc, #92]	; (d54c <_ZN8CO_Class7ProcessEmPm+0xd4>)
    d4ee:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    d4f0:	7dba      	ldrb	r2, [r7, #22]
    d4f2:	9300      	str	r3, [sp, #0]
    d4f4:	4623      	mov	r3, r4
    d4f6:	4c16      	ldr	r4, [pc, #88]	; (d550 <_ZN8CO_Class7ProcessEmPm+0xd8>)
    d4f8:	47a0      	blx	r4


	reset = NMT_Process(
	timeDifference_ms,
	OD_producerHeartbeatTime,
    d4fa:	4b14      	ldr	r3, [pc, #80]	; (d54c <_ZN8CO_Class7ProcessEmPm+0xd4>)
    d4fc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
	reset = NMT_Process(
    d500:	4618      	mov	r0, r3
    d502:	4b12      	ldr	r3, [pc, #72]	; (d54c <_ZN8CO_Class7ProcessEmPm+0xd4>)
    d504:	f8d3 122c 	ldr.w	r1, [r3, #556]	; 0x22c
    d508:	4b12      	ldr	r3, [pc, #72]	; (d554 <_ZN8CO_Class7ProcessEmPm+0xdc>)
    d50a:	791b      	ldrb	r3, [r3, #4]
	OD_NMTStartup,
	OD_errorRegister,
	OD_errorBehavior,
	timerNext_ms);
    d50c:	687a      	ldr	r2, [r7, #4]
    d50e:	9202      	str	r2, [sp, #8]
    d510:	4a11      	ldr	r2, [pc, #68]	; (d558 <_ZN8CO_Class7ProcessEmPm+0xe0>)
    d512:	9201      	str	r2, [sp, #4]
    d514:	9300      	str	r3, [sp, #0]
    d516:	460b      	mov	r3, r1
    d518:	4602      	mov	r2, r0
    d51a:	68b9      	ldr	r1, [r7, #8]
    d51c:	68f8      	ldr	r0, [r7, #12]
    d51e:	4c0f      	ldr	r4, [pc, #60]	; (d55c <_ZN8CO_Class7ProcessEmPm+0xe4>)
    d520:	47a0      	blx	r4
    d522:	4603      	mov	r3, r0
    d524:	757b      	strb	r3, [r7, #21]

	CO_HBconsumer_process(
    d526:	68fb      	ldr	r3, [r7, #12]
    d528:	f103 0020 	add.w	r0, r3, #32
    d52c:	4b05      	ldr	r3, [pc, #20]	; (d544 <_ZN8CO_Class7ProcessEmPm+0xcc>)
    d52e:	681b      	ldr	r3, [r3, #0]
    d530:	6b99      	ldr	r1, [r3, #56]	; 0x38
	CO->HBcons,
	NMTisPreOrOperational,
	timeDifference_ms);
    d532:	7dba      	ldrb	r2, [r7, #22]
    d534:	68bb      	ldr	r3, [r7, #8]
    d536:	4c0a      	ldr	r4, [pc, #40]	; (d560 <_ZN8CO_Class7ProcessEmPm+0xe8>)
    d538:	47a0      	blx	r4

	return reset;
    d53a:	7d7b      	ldrb	r3, [r7, #21]
}
    d53c:	4618      	mov	r0, r3
    d53e:	371c      	adds	r7, #28
    d540:	46bd      	mov	sp, r7
    d542:	bd90      	pop	{r4, r7, pc}
    d544:	20001218 	.word	0x20001218
    d548:	00011489 	.word	0x00011489
    d54c:	2000038c 	.word	0x2000038c
    d550:	0000e4e9 	.word	0x0000e4e9
    d554:	20000210 	.word	0x20000210
    d558:	200003e5 	.word	0x200003e5
    d55c:	0000efb9 	.word	0x0000efb9
    d560:	0000ec85 	.word	0x0000ec85

0000d564 <_ZN8CO_Class20CO_process_SYNC_RPDOEm>:
// }


/******************************************************************************/
bool_t CO_Class::CO_process_SYNC_RPDO(uint32_t                timeDifference_us)
{
    d564:	b590      	push	{r4, r7, lr}
    d566:	b085      	sub	sp, #20
    d568:	af00      	add	r7, sp, #0
    d56a:	6078      	str	r0, [r7, #4]
    d56c:	6039      	str	r1, [r7, #0]
	uint32_t i;
	bool_t syncWas = false;
    d56e:	2300      	movs	r3, #0
    d570:	72fb      	strb	r3, [r7, #11]

	switch(CO_SYNC_process(CO->SYNC, timeDifference_us, OD_synchronousWindowLength)){
    d572:	687b      	ldr	r3, [r7, #4]
    d574:	f103 000c 	add.w	r0, r3, #12
    d578:	4b18      	ldr	r3, [pc, #96]	; (d5dc <_ZN8CO_Class20CO_process_SYNC_RPDOEm+0x78>)
    d57a:	681b      	ldr	r3, [r3, #0]
    d57c:	6959      	ldr	r1, [r3, #20]
    d57e:	4b18      	ldr	r3, [pc, #96]	; (d5e0 <_ZN8CO_Class20CO_process_SYNC_RPDOEm+0x7c>)
    d580:	691b      	ldr	r3, [r3, #16]
    d582:	683a      	ldr	r2, [r7, #0]
    d584:	4c17      	ldr	r4, [pc, #92]	; (d5e4 <_ZN8CO_Class20CO_process_SYNC_RPDOEm+0x80>)
    d586:	47a0      	blx	r4
    d588:	4603      	mov	r3, r0
    d58a:	2b01      	cmp	r3, #1
    d58c:	d002      	beq.n	d594 <_ZN8CO_Class20CO_process_SYNC_RPDOEm+0x30>
    d58e:	2b02      	cmp	r3, #2
    d590:	d003      	beq.n	d59a <_ZN8CO_Class20CO_process_SYNC_RPDOEm+0x36>
    d592:	e007      	b.n	d5a4 <_ZN8CO_Class20CO_process_SYNC_RPDOEm+0x40>
		case 1:     //immediately after the SYNC message
		syncWas = true;
    d594:	2301      	movs	r3, #1
    d596:	72fb      	strb	r3, [r7, #11]
		break;
    d598:	e004      	b.n	d5a4 <_ZN8CO_Class20CO_process_SYNC_RPDOEm+0x40>
		case 2:     //outside SYNC window
		CANClearPendingSyncPDOs();
    d59a:	687b      	ldr	r3, [r7, #4]
    d59c:	4618      	mov	r0, r3
    d59e:	4b12      	ldr	r3, [pc, #72]	; (d5e8 <_ZN8CO_Class20CO_process_SYNC_RPDOEm+0x84>)
    d5a0:	4798      	blx	r3
		break;
    d5a2:	bf00      	nop
	}

	for(i=0; i<CO_NO_RPDO; i++){
    d5a4:	2300      	movs	r3, #0
    d5a6:	60fb      	str	r3, [r7, #12]
    d5a8:	68fb      	ldr	r3, [r7, #12]
    d5aa:	2b03      	cmp	r3, #3
    d5ac:	d810      	bhi.n	d5d0 <_ZN8CO_Class20CO_process_SYNC_RPDOEm+0x6c>
		CO_RPDO_process(CO->RPDO[i], syncWas);
    d5ae:	687b      	ldr	r3, [r7, #4]
    d5b0:	f103 0014 	add.w	r0, r3, #20
    d5b4:	4b09      	ldr	r3, [pc, #36]	; (d5dc <_ZN8CO_Class20CO_process_SYNC_RPDOEm+0x78>)
    d5b6:	681b      	ldr	r3, [r3, #0]
    d5b8:	68fa      	ldr	r2, [r7, #12]
    d5ba:	3206      	adds	r2, #6
    d5bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    d5c0:	7afa      	ldrb	r2, [r7, #11]
    d5c2:	4619      	mov	r1, r3
    d5c4:	4b09      	ldr	r3, [pc, #36]	; (d5ec <_ZN8CO_Class20CO_process_SYNC_RPDOEm+0x88>)
    d5c6:	4798      	blx	r3
	for(i=0; i<CO_NO_RPDO; i++){
    d5c8:	68fb      	ldr	r3, [r7, #12]
    d5ca:	3301      	adds	r3, #1
    d5cc:	60fb      	str	r3, [r7, #12]
    d5ce:	e7eb      	b.n	d5a8 <_ZN8CO_Class20CO_process_SYNC_RPDOEm+0x44>
	}

	return syncWas;
    d5d0:	7afb      	ldrb	r3, [r7, #11]
}
    d5d2:	4618      	mov	r0, r3
    d5d4:	3714      	adds	r7, #20
    d5d6:	46bd      	mov	sp, r7
    d5d8:	bd90      	pop	{r4, r7, pc}
    d5da:	bf00      	nop
    d5dc:	20001218 	.word	0x20001218
    d5e0:	2000038c 	.word	0x2000038c
    d5e4:	00012c89 	.word	0x00012c89
    d5e8:	0000dd99 	.word	0x0000dd99
    d5ec:	0001051d 	.word	0x0001051d

0000d5f0 <_ZN8CO_Class15CO_process_TPDOEhm>:


/******************************************************************************/
void CO_Class::CO_process_TPDO(bool_t                  syncWas,
uint32_t                timeDifference_us)
{
    d5f0:	b590      	push	{r4, r7, lr}
    d5f2:	b089      	sub	sp, #36	; 0x24
    d5f4:	af02      	add	r7, sp, #8
    d5f6:	60f8      	str	r0, [r7, #12]
    d5f8:	460b      	mov	r3, r1
    d5fa:	607a      	str	r2, [r7, #4]
    d5fc:	72fb      	strb	r3, [r7, #11]
	uint32_t i;

	/* Verify PDO Change Of State and process PDOs */
	for(i=0; i<CO_NO_TPDO; i++){
    d5fe:	2300      	movs	r3, #0
    d600:	617b      	str	r3, [r7, #20]
    d602:	697b      	ldr	r3, [r7, #20]
    d604:	2b03      	cmp	r3, #3
    d606:	d835      	bhi.n	d674 <_ZN8CO_Class15CO_process_TPDOEhm+0x84>
		if(!CO->TPDO[i]->sendRequest){ 
    d608:	4b1c      	ldr	r3, [pc, #112]	; (d67c <_ZN8CO_Class15CO_process_TPDOEhm+0x8c>)
    d60a:	681b      	ldr	r3, [r3, #0]
    d60c:	697a      	ldr	r2, [r7, #20]
    d60e:	320a      	adds	r2, #10
    d610:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    d614:	7fdb      	ldrb	r3, [r3, #31]
    d616:	2b00      	cmp	r3, #0
    d618:	d113      	bne.n	d642 <_ZN8CO_Class15CO_process_TPDOEhm+0x52>
			CO->TPDO[i]->sendRequest = CO_TPDOisCOS(CO->TPDO[i]);
    d61a:	4b18      	ldr	r3, [pc, #96]	; (d67c <_ZN8CO_Class15CO_process_TPDOEhm+0x8c>)
    d61c:	681b      	ldr	r3, [r3, #0]
    d61e:	697a      	ldr	r2, [r7, #20]
    d620:	320a      	adds	r2, #10
    d622:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
    d626:	68fb      	ldr	r3, [r7, #12]
    d628:	f103 0014 	add.w	r0, r3, #20
    d62c:	4b13      	ldr	r3, [pc, #76]	; (d67c <_ZN8CO_Class15CO_process_TPDOEhm+0x8c>)
    d62e:	681b      	ldr	r3, [r3, #0]
    d630:	697a      	ldr	r2, [r7, #20]
    d632:	320a      	adds	r2, #10
    d634:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    d638:	4619      	mov	r1, r3
    d63a:	4b11      	ldr	r3, [pc, #68]	; (d680 <_ZN8CO_Class15CO_process_TPDOEhm+0x90>)
    d63c:	4798      	blx	r3
    d63e:	4603      	mov	r3, r0
    d640:	77e3      	strb	r3, [r4, #31]
		}
		#ifdef  MASTER
			CO_TPDO_process(CO->TPDO[i], CO->SYNC, syncWas, timeDifference_us);
		#else
		if (syncWas)
    d642:	7afb      	ldrb	r3, [r7, #11]
    d644:	2b00      	cmp	r3, #0
    d646:	d011      	beq.n	d66c <_ZN8CO_Class15CO_process_TPDOEhm+0x7c>
		{
			CO_TPDO_process(CO->TPDO[i], CO->SYNC, syncWas, timeDifference_us);
    d648:	68fb      	ldr	r3, [r7, #12]
    d64a:	f103 0014 	add.w	r0, r3, #20
    d64e:	4b0b      	ldr	r3, [pc, #44]	; (d67c <_ZN8CO_Class15CO_process_TPDOEhm+0x8c>)
    d650:	681b      	ldr	r3, [r3, #0]
    d652:	697a      	ldr	r2, [r7, #20]
    d654:	320a      	adds	r2, #10
    d656:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    d65a:	4b08      	ldr	r3, [pc, #32]	; (d67c <_ZN8CO_Class15CO_process_TPDOEhm+0x8c>)
    d65c:	681b      	ldr	r3, [r3, #0]
    d65e:	695a      	ldr	r2, [r3, #20]
    d660:	7afc      	ldrb	r4, [r7, #11]
    d662:	687b      	ldr	r3, [r7, #4]
    d664:	9300      	str	r3, [sp, #0]
    d666:	4623      	mov	r3, r4
    d668:	4c06      	ldr	r4, [pc, #24]	; (d684 <_ZN8CO_Class15CO_process_TPDOEhm+0x94>)
    d66a:	47a0      	blx	r4
	for(i=0; i<CO_NO_TPDO; i++){
    d66c:	697b      	ldr	r3, [r7, #20]
    d66e:	3301      	adds	r3, #1
    d670:	617b      	str	r3, [r7, #20]
    d672:	e7c6      	b.n	d602 <_ZN8CO_Class15CO_process_TPDOEhm+0x12>
			
		
#endif
		
	}
}
    d674:	bf00      	nop
    d676:	371c      	adds	r7, #28
    d678:	46bd      	mov	sp, r7
    d67a:	bd90      	pop	{r4, r7, pc}
    d67c:	20001218 	.word	0x20001218
    d680:	000102a1 	.word	0x000102a1
    d684:	000105ed 	.word	0x000105ed

0000d688 <hri_can_read_TXFQS_TFFL_bf>:
{
	return (((Can *)hw)->TXFQS.reg & CAN_TXFQS_TFFL(mask)) >> CAN_TXFQS_TFFL_Pos;
}

static inline hri_can_txfqs_reg_t hri_can_read_TXFQS_TFFL_bf(const void *const hw)
{
    d688:	b480      	push	{r7}
    d68a:	b083      	sub	sp, #12
    d68c:	af00      	add	r7, sp, #0
    d68e:	6078      	str	r0, [r7, #4]
	return (((Can *)hw)->TXFQS.reg & CAN_TXFQS_TFFL_Msk) >> CAN_TXFQS_TFFL_Pos;
    d690:	687b      	ldr	r3, [r7, #4]
    d692:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
    d696:	f003 033f 	and.w	r3, r3, #63	; 0x3f
}
    d69a:	4618      	mov	r0, r3
    d69c:	370c      	adds	r7, #12
    d69e:	46bd      	mov	sp, r7
    d6a0:	bc80      	pop	{r7}
    d6a2:	4770      	bx	lr

0000d6a4 <hri_can_read_IR_reg>:
	((Can *)hw)->IR.reg ^= mask;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline hri_can_ir_reg_t hri_can_read_IR_reg(const void *const hw)
{
    d6a4:	b480      	push	{r7}
    d6a6:	b083      	sub	sp, #12
    d6a8:	af00      	add	r7, sp, #0
    d6aa:	6078      	str	r0, [r7, #4]
	return ((Can *)hw)->IR.reg;
    d6ac:	687b      	ldr	r3, [r7, #4]
    d6ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
}
    d6b0:	4618      	mov	r0, r3
    d6b2:	370c      	adds	r7, #12
    d6b4:	46bd      	mov	sp, r7
    d6b6:	bc80      	pop	{r7}
    d6b8:	4770      	bx	lr
	...

0000d6bc <_ZL14CO_rx_callbackP20can_async_descriptor>:

CO_Driver_Class		*canopen_driver;


static void CO_rx_callback(struct can_async_descriptor *const descr)
{
    d6bc:	b580      	push	{r7, lr}
    d6be:	b082      	sub	sp, #8
    d6c0:	af00      	add	r7, sp, #0
    d6c2:	6078      	str	r0, [r7, #4]
	canopen_driver->receivedCOMsg.data=canopen_driver->co_rx_buffer_64;
    d6c4:	4b12      	ldr	r3, [pc, #72]	; (d710 <_ZL14CO_rx_callbackP20can_async_descriptor+0x54>)
    d6c6:	681b      	ldr	r3, [r3, #0]
    d6c8:	4a11      	ldr	r2, [pc, #68]	; (d710 <_ZL14CO_rx_callbackP20can_async_descriptor+0x54>)
    d6ca:	6812      	ldr	r2, [r2, #0]
    d6cc:	3230      	adds	r2, #48	; 0x30
    d6ce:	679a      	str	r2, [r3, #120]	; 0x78
	can_async_read(descr, &(canopen_driver->receivedCOMsg));
    d6d0:	4b0f      	ldr	r3, [pc, #60]	; (d710 <_ZL14CO_rx_callbackP20can_async_descriptor+0x54>)
    d6d2:	681b      	ldr	r3, [r3, #0]
    d6d4:	3370      	adds	r3, #112	; 0x70
    d6d6:	4619      	mov	r1, r3
    d6d8:	6878      	ldr	r0, [r7, #4]
    d6da:	4b0e      	ldr	r3, [pc, #56]	; (d714 <_ZL14CO_rx_callbackP20can_async_descriptor+0x58>)
    d6dc:	4798      	blx	r3
	if (canopen_driver->canopen_ready)
    d6de:	4b0c      	ldr	r3, [pc, #48]	; (d710 <_ZL14CO_rx_callbackP20can_async_descriptor+0x54>)
    d6e0:	681b      	ldr	r3, [r3, #0]
    d6e2:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
    d6e6:	b2db      	uxtb	r3, r3
    d6e8:	2b00      	cmp	r3, #0
    d6ea:	d007      	beq.n	d6fc <_ZL14CO_rx_callbackP20can_async_descriptor+0x40>
	{
		canopen_driver->ProcessInterrupt_Rx();
    d6ec:	4b08      	ldr	r3, [pc, #32]	; (d710 <_ZL14CO_rx_callbackP20can_async_descriptor+0x54>)
    d6ee:	681b      	ldr	r3, [r3, #0]
    d6f0:	681b      	ldr	r3, [r3, #0]
    d6f2:	681b      	ldr	r3, [r3, #0]
    d6f4:	4a06      	ldr	r2, [pc, #24]	; (d710 <_ZL14CO_rx_callbackP20can_async_descriptor+0x54>)
    d6f6:	6812      	ldr	r2, [r2, #0]
    d6f8:	4610      	mov	r0, r2
    d6fa:	4798      	blx	r3
	}
	
	canopen_driver->receivedRxCOCallback=true;
    d6fc:	4b04      	ldr	r3, [pc, #16]	; (d710 <_ZL14CO_rx_callbackP20can_async_descriptor+0x54>)
    d6fe:	681b      	ldr	r3, [r3, #0]
    d700:	2201      	movs	r2, #1
    d702:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
// 	if(ptrCODriver->RxFifo_Callback_CanModule_p != NULL)
// 	{
// 		ProcessInterrupt_Rx();
// 	
}
    d706:	bf00      	nop
    d708:	3708      	adds	r7, #8
    d70a:	46bd      	mov	sp, r7
    d70c:	bd80      	pop	{r7, pc}
    d70e:	bf00      	nop
    d710:	20001abc 	.word	0x20001abc
    d714:	00001af5 	.word	0x00001af5

0000d718 <_ZL21CO_IRQ_Error_CallbackP20can_async_descriptor>:

static void CO_IRQ_Error_Callback(struct can_async_descriptor *const descr)
{
    d718:	b590      	push	{r4, r7, lr}
    d71a:	b083      	sub	sp, #12
    d71c:	af00      	add	r7, sp, #0
    d71e:	6078      	str	r0, [r7, #4]

	canopen_driver->HalCanErrorCode= hri_can_read_IR_reg(descr->dev.hw);
    d720:	4b08      	ldr	r3, [pc, #32]	; (d744 <_ZL21CO_IRQ_Error_CallbackP20can_async_descriptor+0x2c>)
    d722:	681c      	ldr	r4, [r3, #0]
    d724:	687b      	ldr	r3, [r7, #4]
    d726:	681b      	ldr	r3, [r3, #0]
    d728:	4618      	mov	r0, r3
    d72a:	4b07      	ldr	r3, [pc, #28]	; (d748 <_ZL21CO_IRQ_Error_CallbackP20can_async_descriptor+0x30>)
    d72c:	4798      	blx	r3
    d72e:	4603      	mov	r3, r0
    d730:	62a3      	str	r3, [r4, #40]	; 0x28
	canopen_driver->receivedIntCOCallback=true;
    d732:	4b04      	ldr	r3, [pc, #16]	; (d744 <_ZL21CO_IRQ_Error_CallbackP20can_async_descriptor+0x2c>)
    d734:	681b      	ldr	r3, [r3, #0]
    d736:	2201      	movs	r2, #1
    d738:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
}
    d73c:	bf00      	nop
    d73e:	370c      	adds	r7, #12
    d740:	46bd      	mov	sp, r7
    d742:	bd90      	pop	{r4, r7, pc}
    d744:	20001abc 	.word	0x20001abc
    d748:	0000d6a5 	.word	0x0000d6a5

0000d74c <_ZL14CO_tx_callbackP20can_async_descriptor>:


static void CO_tx_callback(struct can_async_descriptor *const descr)
{
    d74c:	b480      	push	{r7}
    d74e:	b083      	sub	sp, #12
    d750:	af00      	add	r7, sp, #0
    d752:	6078      	str	r0, [r7, #4]
	(void)descr;
	canopen_driver->receivedtxCOCallback=true;
    d754:	4b04      	ldr	r3, [pc, #16]	; (d768 <_ZL14CO_tx_callbackP20can_async_descriptor+0x1c>)
    d756:	681b      	ldr	r3, [r3, #0]
    d758:	2201      	movs	r2, #1
    d75a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
	
}
    d75e:	bf00      	nop
    d760:	370c      	adds	r7, #12
    d762:	46bd      	mov	sp, r7
    d764:	bc80      	pop	{r7}
    d766:	4770      	bx	lr
    d768:	20001abc 	.word	0x20001abc

0000d76c <_ZN15CO_Driver_ClassC1Ev>:

// default constructor
CO_Driver_Class::CO_Driver_Class()
    d76c:	b580      	push	{r7, lr}
    d76e:	b082      	sub	sp, #8
    d770:	af00      	add	r7, sp, #0
    d772:	6078      	str	r0, [r7, #4]
    d774:	687b      	ldr	r3, [r7, #4]
    d776:	3304      	adds	r3, #4
    d778:	4618      	mov	r0, r3
    d77a:	4b13      	ldr	r3, [pc, #76]	; (d7c8 <_ZN15CO_Driver_ClassC1Ev+0x5c>)
    d77c:	4798      	blx	r3
    d77e:	6878      	ldr	r0, [r7, #4]
    d780:	4b12      	ldr	r3, [pc, #72]	; (d7cc <_ZN15CO_Driver_ClassC1Ev+0x60>)
    d782:	4798      	blx	r3
    d784:	687b      	ldr	r3, [r7, #4]
    d786:	330c      	adds	r3, #12
    d788:	4618      	mov	r0, r3
    d78a:	4b11      	ldr	r3, [pc, #68]	; (d7d0 <_ZN15CO_Driver_ClassC1Ev+0x64>)
    d78c:	4798      	blx	r3
    d78e:	687b      	ldr	r3, [r7, #4]
    d790:	3314      	adds	r3, #20
    d792:	4618      	mov	r0, r3
    d794:	4b0f      	ldr	r3, [pc, #60]	; (d7d4 <_ZN15CO_Driver_ClassC1Ev+0x68>)
    d796:	4798      	blx	r3
    d798:	687b      	ldr	r3, [r7, #4]
    d79a:	3320      	adds	r3, #32
    d79c:	4618      	mov	r0, r3
    d79e:	4b0e      	ldr	r3, [pc, #56]	; (d7d8 <_ZN15CO_Driver_ClassC1Ev+0x6c>)
    d7a0:	4798      	blx	r3
    d7a2:	4a0e      	ldr	r2, [pc, #56]	; (d7dc <_ZN15CO_Driver_ClassC1Ev+0x70>)
    d7a4:	687b      	ldr	r3, [r7, #4]
    d7a6:	601a      	str	r2, [r3, #0]
{
	RxFifo_Callback_CanModule_p = NULL;
    d7a8:	687b      	ldr	r3, [r7, #4]
    d7aa:	2200      	movs	r2, #0
    d7ac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	canopen_driver=this;
    d7b0:	4a0b      	ldr	r2, [pc, #44]	; (d7e0 <_ZN15CO_Driver_ClassC1Ev+0x74>)
    d7b2:	687b      	ldr	r3, [r7, #4]
    d7b4:	6013      	str	r3, [r2, #0]
	canopen_ready=false;
    d7b6:	687b      	ldr	r3, [r7, #4]
    d7b8:	2200      	movs	r2, #0
    d7ba:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
} //CO_Driver_Class
    d7be:	687b      	ldr	r3, [r7, #4]
    d7c0:	4618      	mov	r0, r3
    d7c2:	3708      	adds	r7, #8
    d7c4:	46bd      	mov	sp, r7
    d7c6:	bd80      	pop	{r7, pc}
    d7c8:	0000e275 	.word	0x0000e275
    d7cc:	0000ee7f 	.word	0x0000ee7f
    d7d0:	00012815 	.word	0x00012815
    d7d4:	0000f489 	.word	0x0000f489
    d7d8:	0000eb81 	.word	0x0000eb81
    d7dc:	00013638 	.word	0x00013638
    d7e0:	20001abc 	.word	0x20001abc

0000d7e4 <_ZN15CO_Driver_ClassD1Ev>:

CO_Driver_Class::~CO_Driver_Class()
    d7e4:	b580      	push	{r7, lr}
    d7e6:	b082      	sub	sp, #8
    d7e8:	af00      	add	r7, sp, #0
    d7ea:	6078      	str	r0, [r7, #4]
    d7ec:	4a0f      	ldr	r2, [pc, #60]	; (d82c <_ZN15CO_Driver_ClassD1Ev+0x48>)
    d7ee:	687b      	ldr	r3, [r7, #4]
    d7f0:	601a      	str	r2, [r3, #0]
    d7f2:	687b      	ldr	r3, [r7, #4]
    d7f4:	3320      	adds	r3, #32
    d7f6:	4618      	mov	r0, r3
    d7f8:	4b0d      	ldr	r3, [pc, #52]	; (d830 <_ZN15CO_Driver_ClassD1Ev+0x4c>)
    d7fa:	4798      	blx	r3
    d7fc:	687b      	ldr	r3, [r7, #4]
    d7fe:	3314      	adds	r3, #20
    d800:	4618      	mov	r0, r3
    d802:	4b0c      	ldr	r3, [pc, #48]	; (d834 <_ZN15CO_Driver_ClassD1Ev+0x50>)
    d804:	4798      	blx	r3
    d806:	687b      	ldr	r3, [r7, #4]
    d808:	330c      	adds	r3, #12
    d80a:	4618      	mov	r0, r3
    d80c:	4b0a      	ldr	r3, [pc, #40]	; (d838 <_ZN15CO_Driver_ClassD1Ev+0x54>)
    d80e:	4798      	blx	r3
    d810:	6878      	ldr	r0, [r7, #4]
    d812:	4b0a      	ldr	r3, [pc, #40]	; (d83c <_ZN15CO_Driver_ClassD1Ev+0x58>)
    d814:	4798      	blx	r3
    d816:	687b      	ldr	r3, [r7, #4]
    d818:	3304      	adds	r3, #4
    d81a:	4618      	mov	r0, r3
    d81c:	4b08      	ldr	r3, [pc, #32]	; (d840 <_ZN15CO_Driver_ClassD1Ev+0x5c>)
    d81e:	4798      	blx	r3
{
// default destructor
} //~CO_Driver_Class
    d820:	687b      	ldr	r3, [r7, #4]
    d822:	4618      	mov	r0, r3
    d824:	3708      	adds	r7, #8
    d826:	46bd      	mov	sp, r7
    d828:	bd80      	pop	{r7, pc}
    d82a:	bf00      	nop
    d82c:	00013638 	.word	0x00013638
    d830:	0000eba1 	.word	0x0000eba1
    d834:	0000f49d 	.word	0x0000f49d
    d838:	00012829 	.word	0x00012829
    d83c:	0000ee93 	.word	0x0000ee93
    d840:	0000e29d 	.word	0x0000e29d

0000d844 <_ZN15CO_Driver_Class16PrepareTxMessageEP11can_messageP10CO_CANtx_t>:
 * \param [in]	buffer ponyer to CO_CANtx_t with CANopen configuration data
 *
 * \ingroup CO_driver
 ******************************************************************************/
void CO_Driver_Class::PrepareTxMessage(struct can_message *msgHeader, CO_CANtx_t *buffer)
{
    d844:	b480      	push	{r7}
    d846:	b085      	sub	sp, #20
    d848:	af00      	add	r7, sp, #0
    d84a:	60f8      	str	r0, [r7, #12]
    d84c:	60b9      	str	r1, [r7, #8]
    d84e:	607a      	str	r2, [r7, #4]
	/* Map buffer data to the HAL CAN tx header data*/
	//TxHeader->ExtId = 0u;
	msgHeader->id=0;
    d850:	68bb      	ldr	r3, [r7, #8]
    d852:	2200      	movs	r2, #0
    d854:	601a      	str	r2, [r3, #0]
	//TxHeader->IDE = 0;
	msgHeader->fmt=CAN_FMT_STDID;
    d856:	68bb      	ldr	r3, [r7, #8]
    d858:	2200      	movs	r2, #0
    d85a:	735a      	strb	r2, [r3, #13]
	
	//TxHeader->DLC = buffer->DLC;
	msgHeader->len=buffer->DLC;
    d85c:	687b      	ldr	r3, [r7, #4]
    d85e:	791a      	ldrb	r2, [r3, #4]
    d860:	68bb      	ldr	r3, [r7, #8]
    d862:	731a      	strb	r2, [r3, #12]
	
	//TxHeader->StdId = ( buffer->ident >> 2 );
	msgHeader->id=( buffer->ident >> 2 );
    d864:	687b      	ldr	r3, [r7, #4]
    d866:	681b      	ldr	r3, [r3, #0]
    d868:	089a      	lsrs	r2, r3, #2
    d86a:	68bb      	ldr	r3, [r7, #8]
    d86c:	601a      	str	r2, [r3, #0]
	
	//TxHeader->RTR = ( buffer->ident & 0x2 );
	msgHeader->type=(can_type)( buffer->ident & 0x2 );
    d86e:	687b      	ldr	r3, [r7, #4]
    d870:	681b      	ldr	r3, [r3, #0]
    d872:	b2db      	uxtb	r3, r3
    d874:	f003 0302 	and.w	r3, r3, #2
    d878:	b2da      	uxtb	r2, r3
    d87a:	68bb      	ldr	r3, [r7, #8]
    d87c:	711a      	strb	r2, [r3, #4]
	msgHeader->data=buffer->data;
    d87e:	687b      	ldr	r3, [r7, #4]
    d880:	1d5a      	adds	r2, r3, #5
    d882:	68bb      	ldr	r3, [r7, #8]
    d884:	609a      	str	r2, [r3, #8]
}
    d886:	bf00      	nop
    d888:	3714      	adds	r7, #20
    d88a:	46bd      	mov	sp, r7
    d88c:	bc80      	pop	{r7}
    d88e:	4770      	bx	lr

0000d890 <_ZN15CO_Driver_Class21ConvertCANMsg2CORxMsgER11can_messageP13CO_CANrxMsg_t>:

void CO_Driver_Class::ConvertCANMsg2CORxMsg(can_message& msgHeader, CO_CANrxMsg_t *rxMsg)
{
    d890:	b590      	push	{r4, r7, lr}
    d892:	b085      	sub	sp, #20
    d894:	af00      	add	r7, sp, #0
    d896:	60f8      	str	r0, [r7, #12]
    d898:	60b9      	str	r1, [r7, #8]
    d89a:	607a      	str	r2, [r7, #4]
	rxMsg->RxHeader=msgHeader;
    d89c:	687a      	ldr	r2, [r7, #4]
    d89e:	68bb      	ldr	r3, [r7, #8]
    d8a0:	4614      	mov	r4, r2
    d8a2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    d8a4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	rxMsg->DLC=msgHeader.len;
    d8a8:	68bb      	ldr	r3, [r7, #8]
    d8aa:	7b1a      	ldrb	r2, [r3, #12]
    d8ac:	687b      	ldr	r3, [r7, #4]
    d8ae:	751a      	strb	r2, [r3, #20]
	rxMsg->ident=msgHeader.id;
    d8b0:	68bb      	ldr	r3, [r7, #8]
    d8b2:	681a      	ldr	r2, [r3, #0]
    d8b4:	687b      	ldr	r3, [r7, #4]
    d8b6:	611a      	str	r2, [r3, #16]
	memcpy(&rxMsg->data[0],msgHeader.data,msgHeader.len);
    d8b8:	687b      	ldr	r3, [r7, #4]
    d8ba:	f103 0015 	add.w	r0, r3, #21
    d8be:	68bb      	ldr	r3, [r7, #8]
    d8c0:	6899      	ldr	r1, [r3, #8]
    d8c2:	68bb      	ldr	r3, [r7, #8]
    d8c4:	7b1b      	ldrb	r3, [r3, #12]
    d8c6:	461a      	mov	r2, r3
    d8c8:	4b02      	ldr	r3, [pc, #8]	; (d8d4 <_ZN15CO_Driver_Class21ConvertCANMsg2CORxMsgER11can_messageP13CO_CANrxMsg_t+0x44>)
    d8ca:	4798      	blx	r3

	/* Map buffer data to the HAL CAN tx header data*/
	//TxHeader->ExtId = 0u;

}
    d8cc:	bf00      	nop
    d8ce:	3714      	adds	r7, #20
    d8d0:	46bd      	mov	sp, r7
    d8d2:	bd90      	pop	{r4, r7, pc}
    d8d4:	00012f1d 	.word	0x00012f1d

0000d8d8 <_ZN15CO_Driver_Class26CO_CANsetConfigurationModeEP20can_async_descriptor>:
	{
		;//TODO add assert here
	}
}

void CO_Driver_Class::CO_CANsetConfigurationMode(can_async_descriptor *descr){
    d8d8:	b480      	push	{r7}
    d8da:	b083      	sub	sp, #12
    d8dc:	af00      	add	r7, sp, #0
    d8de:	6078      	str	r0, [r7, #4]
    d8e0:	6039      	str	r1, [r7, #0]
	
	canDescr=descr;
    d8e2:	687b      	ldr	r3, [r7, #4]
    d8e4:	683a      	ldr	r2, [r7, #0]
    d8e6:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	/* Put CAN module in configuration mode */
	/* HAL is responsible for that */
}
    d8ea:	bf00      	nop
    d8ec:	370c      	adds	r7, #12
    d8ee:	46bd      	mov	sp, r7
    d8f0:	bc80      	pop	{r7}
    d8f2:	4770      	bx	lr

0000d8f4 <_ZN15CO_Driver_Class19CO_CANsetNormalModeEv>:

/******************************************************************************/
CO_ReturnError_t CO_Driver_Class::CO_CANsetNormalMode(void){
    d8f4:	b580      	push	{r7, lr}
    d8f6:	b084      	sub	sp, #16
    d8f8:	af00      	add	r7, sp, #0
    d8fa:	6078      	str	r0, [r7, #4]
	/* Put CAN module in normal mode */
	int32_t		error_CAN_hal;
	Error = CO_ERROR_NO;
    d8fc:	687b      	ldr	r3, [r7, #4]
    d8fe:	2200      	movs	r2, #0
    d900:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
	error_CAN_hal=can_async_enable(CAN_Module->CANBaseDescriptor);
    d904:	687b      	ldr	r3, [r7, #4]
    d906:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
    d90a:	681b      	ldr	r3, [r3, #0]
    d90c:	4618      	mov	r0, r3
    d90e:	4b0a      	ldr	r3, [pc, #40]	; (d938 <_ZN15CO_Driver_Class19CO_CANsetNormalModeEv+0x44>)
    d910:	4798      	blx	r3
    d912:	60f8      	str	r0, [r7, #12]
	//    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 1, 0);
	//    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
	//    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 1, 0);
	//    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);

	if (error_CAN_hal != CO_ERROR_NO)
    d914:	68fb      	ldr	r3, [r7, #12]
    d916:	2b00      	cmp	r3, #0
    d918:	d002      	beq.n	d920 <_ZN15CO_Driver_Class19CO_CANsetNormalModeEv+0x2c>
	{
		//_Error_Handler(__FILE__, __LINE__);
		return CO_ERROR_HAL;
    d91a:	f06f 030e 	mvn.w	r3, #14
    d91e:	e007      	b.n	d930 <_ZN15CO_Driver_Class19CO_CANsetNormalModeEv+0x3c>
	}
	CAN_Module->CANnormal = true;
    d920:	687b      	ldr	r3, [r7, #4]
    d922:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
    d926:	2201      	movs	r2, #1
    d928:	751a      	strb	r2, [r3, #20]
	return Error;
    d92a:	687b      	ldr	r3, [r7, #4]
    d92c:	f993 30a8 	ldrsb.w	r3, [r3, #168]	; 0xa8
}
    d930:	4618      	mov	r0, r3
    d932:	3710      	adds	r7, #16
    d934:	46bd      	mov	sp, r7
    d936:	bd80      	pop	{r7, pc}
    d938:	00001ab9 	.word	0x00001ab9

0000d93c <_ZN15CO_Driver_Class14CANmodule_initEP14CO_CANmodule_tP20can_async_descriptorP10CO_CANrx_tmP10CO_CANtx_tmm>:
		CO_CANrx_t              rxArray[],
		uint32_t                rxSize,
		CO_CANtx_t              txArray[],
		uint32_t                txSize,
		uint32_t                CANbitRate)
{
    d93c:	b580      	push	{r7, lr}
    d93e:	b086      	sub	sp, #24
    d940:	af00      	add	r7, sp, #0
    d942:	60f8      	str	r0, [r7, #12]
    d944:	60b9      	str	r1, [r7, #8]
    d946:	607a      	str	r2, [r7, #4]
    d948:	603b      	str	r3, [r7, #0]
	canDescr=HALCanObject;
    d94a:	68fb      	ldr	r3, [r7, #12]
    d94c:	687a      	ldr	r2, [r7, #4]
    d94e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	
	int32_t		error_CAN_hal;

	/* verify arguments */
	if(CANmodule==NULL || rxArray==NULL || txArray==NULL)
    d952:	68bb      	ldr	r3, [r7, #8]
    d954:	2b00      	cmp	r3, #0
    d956:	d005      	beq.n	d964 <_ZN15CO_Driver_Class14CANmodule_initEP14CO_CANmodule_tP20can_async_descriptorP10CO_CANrx_tmP10CO_CANtx_tmm+0x28>
    d958:	683b      	ldr	r3, [r7, #0]
    d95a:	2b00      	cmp	r3, #0
    d95c:	d002      	beq.n	d964 <_ZN15CO_Driver_Class14CANmodule_initEP14CO_CANmodule_tP20can_async_descriptorP10CO_CANrx_tmP10CO_CANtx_tmm+0x28>
    d95e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    d960:	2b00      	cmp	r3, #0
    d962:	d102      	bne.n	d96a <_ZN15CO_Driver_Class14CANmodule_initEP14CO_CANmodule_tP20can_async_descriptorP10CO_CANrx_tmP10CO_CANtx_tmm+0x2e>
	{
		return CO_ERROR_ILLEGAL_ARGUMENT;
    d964:	f04f 33ff 	mov.w	r3, #4294967295
    d968:	e085      	b.n	da76 <_ZN15CO_Driver_Class14CANmodule_initEP14CO_CANmodule_tP20can_async_descriptorP10CO_CANrx_tmP10CO_CANtx_tmm+0x13a>
	else
	{
		;//do nothing
	}

	RxFifo_Callback_CanModule_p = CANmodule;
    d96a:	68fb      	ldr	r3, [r7, #12]
    d96c:	68ba      	ldr	r2, [r7, #8]
    d96e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

	/* Configure object variables */
	CANmodule->CANBaseDescriptor = (can_async_descriptor*)HALCanObject;
    d972:	68bb      	ldr	r3, [r7, #8]
    d974:	687a      	ldr	r2, [r7, #4]
    d976:	601a      	str	r2, [r3, #0]
	CANmodule->rxArray = rxArray;
    d978:	68bb      	ldr	r3, [r7, #8]
    d97a:	683a      	ldr	r2, [r7, #0]
    d97c:	605a      	str	r2, [r3, #4]
	CANmodule->rxSize = rxSize;
    d97e:	68bb      	ldr	r3, [r7, #8]
    d980:	6a3a      	ldr	r2, [r7, #32]
    d982:	609a      	str	r2, [r3, #8]
	CANmodule->txArray = txArray;
    d984:	68bb      	ldr	r3, [r7, #8]
    d986:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    d988:	60da      	str	r2, [r3, #12]
	CANmodule->txSize = txSize;
    d98a:	68bb      	ldr	r3, [r7, #8]
    d98c:	6aba      	ldr	r2, [r7, #40]	; 0x28
    d98e:	611a      	str	r2, [r3, #16]
	CANmodule->CANnormal = false;
    d990:	68bb      	ldr	r3, [r7, #8]
    d992:	2200      	movs	r2, #0
    d994:	751a      	strb	r2, [r3, #20]
	CANmodule->useCANrxFilters = false;
    d996:	68bb      	ldr	r3, [r7, #8]
    d998:	2200      	movs	r2, #0
    d99a:	755a      	strb	r2, [r3, #21]
	CANmodule->bufferInhibitFlag = false;
    d99c:	68bb      	ldr	r3, [r7, #8]
    d99e:	2200      	movs	r2, #0
    d9a0:	759a      	strb	r2, [r3, #22]
	CANmodule->firstCANtxMessage = true;
    d9a2:	68bb      	ldr	r3, [r7, #8]
    d9a4:	2201      	movs	r2, #1
    d9a6:	75da      	strb	r2, [r3, #23]
	CANmodule->CANtxCount = 0U;
    d9a8:	68bb      	ldr	r3, [r7, #8]
    d9aa:	2200      	movs	r2, #0
    d9ac:	619a      	str	r2, [r3, #24]
	CANmodule->errOld = 0U;
    d9ae:	68bb      	ldr	r3, [r7, #8]
    d9b0:	2200      	movs	r2, #0
    d9b2:	61da      	str	r2, [r3, #28]
	CANmodule->em = NULL;
    d9b4:	68bb      	ldr	r3, [r7, #8]
    d9b6:	2200      	movs	r2, #0
    d9b8:	621a      	str	r2, [r3, #32]

	for(i=0U; i<rxSize; i++)
    d9ba:	68fb      	ldr	r3, [r7, #12]
    d9bc:	2200      	movs	r2, #0
    d9be:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
    d9c2:	68fb      	ldr	r3, [r7, #12]
    d9c4:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    d9c8:	6a3b      	ldr	r3, [r7, #32]
    d9ca:	429a      	cmp	r2, r3
    d9cc:	d217      	bcs.n	d9fe <_ZN15CO_Driver_Class14CANmodule_initEP14CO_CANmodule_tP20can_async_descriptorP10CO_CANrx_tmP10CO_CANtx_tmm+0xc2>
	{
		rxArray[i].ident = 0U;
    d9ce:	68fb      	ldr	r3, [r7, #12]
    d9d0:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
    d9d4:	011b      	lsls	r3, r3, #4
    d9d6:	683a      	ldr	r2, [r7, #0]
    d9d8:	4413      	add	r3, r2
    d9da:	2200      	movs	r2, #0
    d9dc:	601a      	str	r2, [r3, #0]
		rxArray[i].pFunct = NULL;
    d9de:	68fb      	ldr	r3, [r7, #12]
    d9e0:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
    d9e4:	011b      	lsls	r3, r3, #4
    d9e6:	683a      	ldr	r2, [r7, #0]
    d9e8:	4413      	add	r3, r2
    d9ea:	2200      	movs	r2, #0
    d9ec:	60da      	str	r2, [r3, #12]
	for(i=0U; i<rxSize; i++)
    d9ee:	68fb      	ldr	r3, [r7, #12]
    d9f0:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
    d9f4:	1c5a      	adds	r2, r3, #1
    d9f6:	68fb      	ldr	r3, [r7, #12]
    d9f8:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
    d9fc:	e7e1      	b.n	d9c2 <_ZN15CO_Driver_Class14CANmodule_initEP14CO_CANmodule_tP20can_async_descriptorP10CO_CANrx_tmP10CO_CANtx_tmm+0x86>
	}

	for(i=0U; i<txSize; i++)
    d9fe:	68fb      	ldr	r3, [r7, #12]
    da00:	2200      	movs	r2, #0
    da02:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
    da06:	68fb      	ldr	r3, [r7, #12]
    da08:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    da0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    da0e:	429a      	cmp	r2, r3
    da10:	d20f      	bcs.n	da32 <_ZN15CO_Driver_Class14CANmodule_initEP14CO_CANmodule_tP20can_async_descriptorP10CO_CANrx_tmP10CO_CANtx_tmm+0xf6>
	{
		txArray[i].bufferFull = false;
    da12:	68fb      	ldr	r3, [r7, #12]
    da14:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
    da18:	011b      	lsls	r3, r3, #4
    da1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    da1c:	4413      	add	r3, r2
    da1e:	2200      	movs	r2, #0
    da20:	735a      	strb	r2, [r3, #13]
	for(i=0U; i<txSize; i++)
    da22:	68fb      	ldr	r3, [r7, #12]
    da24:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
    da28:	1c5a      	adds	r2, r3, #1
    da2a:	68fb      	ldr	r3, [r7, #12]
    da2c:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
    da30:	e7e9      	b.n	da06 <_ZN15CO_Driver_Class14CANmodule_initEP14CO_CANmodule_tP20can_async_descriptorP10CO_CANrx_tmP10CO_CANtx_tmm+0xca>
	}


	CANmodule_Disable();
    da32:	68f8      	ldr	r0, [r7, #12]
    da34:	4b12      	ldr	r3, [pc, #72]	; (da80 <_ZN15CO_Driver_Class14CANmodule_initEP14CO_CANmodule_tP20can_async_descriptorP10CO_CANrx_tmP10CO_CANtx_tmm+0x144>)
    da36:	4798      	blx	r3
	
	can_async_register_callback(canDescr, CAN_ASYNC_RX_CB, (FUNC_PTR)CO_rx_callback);
    da38:	68fb      	ldr	r3, [r7, #12]
    da3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
    da3e:	4a11      	ldr	r2, [pc, #68]	; (da84 <_ZN15CO_Driver_Class14CANmodule_initEP14CO_CANmodule_tP20can_async_descriptorP10CO_CANrx_tmP10CO_CANtx_tmm+0x148>)
    da40:	2100      	movs	r1, #0
    da42:	4618      	mov	r0, r3
    da44:	4b10      	ldr	r3, [pc, #64]	; (da88 <_ZN15CO_Driver_Class14CANmodule_initEP14CO_CANmodule_tP20can_async_descriptorP10CO_CANrx_tmP10CO_CANtx_tmm+0x14c>)
    da46:	4798      	blx	r3
	can_async_register_callback(canDescr, CAN_ASYNC_IRQ_CB, (FUNC_PTR)CO_IRQ_Error_Callback);
    da48:	68fb      	ldr	r3, [r7, #12]
    da4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
    da4e:	4a0f      	ldr	r2, [pc, #60]	; (da8c <_ZN15CO_Driver_Class14CANmodule_initEP14CO_CANmodule_tP20can_async_descriptorP10CO_CANrx_tmP10CO_CANtx_tmm+0x150>)
    da50:	2102      	movs	r1, #2
    da52:	4618      	mov	r0, r3
    da54:	4b0c      	ldr	r3, [pc, #48]	; (da88 <_ZN15CO_Driver_Class14CANmodule_initEP14CO_CANmodule_tP20can_async_descriptorP10CO_CANrx_tmP10CO_CANtx_tmm+0x14c>)
    da56:	4798      	blx	r3
	error_CAN_hal=can_async_enable(HALCanObject);
    da58:	6878      	ldr	r0, [r7, #4]
    da5a:	4b0d      	ldr	r3, [pc, #52]	; (da90 <_ZN15CO_Driver_Class14CANmodule_initEP14CO_CANmodule_tP20can_async_descriptorP10CO_CANrx_tmP10CO_CANtx_tmm+0x154>)
    da5c:	4798      	blx	r3
    da5e:	6178      	str	r0, [r7, #20]
	if (error_CAN_hal != CO_ERROR_NO)
    da60:	697b      	ldr	r3, [r7, #20]
    da62:	2b00      	cmp	r3, #0
    da64:	d002      	beq.n	da6c <_ZN15CO_Driver_Class14CANmodule_initEP14CO_CANmodule_tP20can_async_descriptorP10CO_CANrx_tmP10CO_CANtx_tmm+0x130>
	{
		//_Error_Handler(__FILE__, __LINE__);
		return CO_ERROR_HAL;
    da66:	f06f 030e 	mvn.w	r3, #14
    da6a:	e004      	b.n	da76 <_ZN15CO_Driver_Class14CANmodule_initEP14CO_CANmodule_tP20can_async_descriptorP10CO_CANrx_tmP10CO_CANtx_tmm+0x13a>
	}
	CAN_Module=CANmodule;
    da6c:	68fb      	ldr	r3, [r7, #12]
    da6e:	68ba      	ldr	r2, [r7, #8]
    da70:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
	return CO_ERROR_NO;
    da74:	2300      	movs	r3, #0
}
    da76:	4618      	mov	r0, r3
    da78:	3718      	adds	r7, #24
    da7a:	46bd      	mov	sp, r7
    da7c:	bd80      	pop	{r7, pc}
    da7e:	bf00      	nop
    da80:	0000da95 	.word	0x0000da95
    da84:	0000d6bd 	.word	0x0000d6bd
    da88:	00001b8d 	.word	0x00001b8d
    da8c:	0000d719 	.word	0x0000d719
    da90:	00001ab9 	.word	0x00001ab9

0000da94 <_ZN15CO_Driver_Class17CANmodule_DisableEv>:


/******************************************************************************/
void CO_Driver_Class::CANmodule_Disable(void){
    da94:	b480      	push	{r7}
    da96:	b083      	sub	sp, #12
    da98:	af00      	add	r7, sp, #0
    da9a:	6078      	str	r0, [r7, #4]
	HAL_CAN_Stop(CANmodule->CANbaseAddress);
	*/
	//can_async_register_callback(canDescr, CAN_ASYNC_RX_CB, (FUNC_PTR)CO_rx_callback);
	//can_async_register_callback(canDescr, CAN_ASYNC_IRQ_CB, (FUNC_PTR)CO_IRQ_Error_Callback);
	//can_async_disable(CAN_Module->CANBaseDescriptor);
}
    da9c:	bf00      	nop
    da9e:	370c      	adds	r7, #12
    daa0:	46bd      	mov	sp, r7
    daa2:	bc80      	pop	{r7}
    daa4:	4770      	bx	lr
	...

0000daa8 <_ZN15CO_Driver_Class17CAN_Rx_BufferInitEmmmhPvPFvS0_PK13CO_CANrxMsg_tE>:
		uint32_t                ident,
		uint32_t                mask,
		bool_t                  rtr,
		void                   *object,
		void                  (*pFunct)(void *object, const CO_CANrxMsg_t *message))
{
    daa8:	b590      	push	{r4, r7, lr}
    daaa:	b087      	sub	sp, #28
    daac:	af00      	add	r7, sp, #0
    daae:	60f8      	str	r0, [r7, #12]
    dab0:	60b9      	str	r1, [r7, #8]
    dab2:	607a      	str	r2, [r7, #4]
    dab4:	603b      	str	r3, [r7, #0]
	ret = CO_ERROR_NO;
    dab6:	68fb      	ldr	r3, [r7, #12]
    dab8:	2200      	movs	r2, #0
    daba:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9

	if((CAN_Module!=NULL) && (object!=NULL) && (pFunct!=NULL) && (index < CAN_Module->rxSize)){
    dabe:	68fb      	ldr	r3, [r7, #12]
    dac0:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
    dac4:	2b00      	cmp	r3, #0
    dac6:	d060      	beq.n	db8a <_ZN15CO_Driver_Class17CAN_Rx_BufferInitEmmmhPvPFvS0_PK13CO_CANrxMsg_tE+0xe2>
    dac8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    daca:	2b00      	cmp	r3, #0
    dacc:	d05d      	beq.n	db8a <_ZN15CO_Driver_Class17CAN_Rx_BufferInitEmmmhPvPFvS0_PK13CO_CANrxMsg_tE+0xe2>
    dace:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    dad0:	2b00      	cmp	r3, #0
    dad2:	d05a      	beq.n	db8a <_ZN15CO_Driver_Class17CAN_Rx_BufferInitEmmmhPvPFvS0_PK13CO_CANrxMsg_tE+0xe2>
    dad4:	68fb      	ldr	r3, [r7, #12]
    dad6:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
    dada:	689a      	ldr	r2, [r3, #8]
    dadc:	68bb      	ldr	r3, [r7, #8]
    dade:	429a      	cmp	r2, r3
    dae0:	d953      	bls.n	db8a <_ZN15CO_Driver_Class17CAN_Rx_BufferInitEmmmhPvPFvS0_PK13CO_CANrxMsg_tE+0xe2>
		/* buffer, which will be configured */
		CO_CANrx_t *buffer = &CAN_Module->rxArray[index];
    dae2:	68fb      	ldr	r3, [r7, #12]
    dae4:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
    dae8:	685a      	ldr	r2, [r3, #4]
    daea:	68bb      	ldr	r3, [r7, #8]
    daec:	011b      	lsls	r3, r3, #4
    daee:	4413      	add	r3, r2
    daf0:	617b      	str	r3, [r7, #20]

		/* Configure object variables */
		buffer->object = object;
    daf2:	697b      	ldr	r3, [r7, #20]
    daf4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    daf6:	609a      	str	r2, [r3, #8]
		buffer->pFunct = pFunct;
    daf8:	697b      	ldr	r3, [r7, #20]
    dafa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    dafc:	60da      	str	r2, [r3, #12]

		/* CAN identifier and CAN mask, bit aligned with CAN module. Different on different microcontrollers. */
		buffer->ident = (ident & 0x07FF) << 2;
    dafe:	687b      	ldr	r3, [r7, #4]
    db00:	009a      	lsls	r2, r3, #2
    db02:	f641 73fc 	movw	r3, #8188	; 0x1ffc
    db06:	4013      	ands	r3, r2
    db08:	697a      	ldr	r2, [r7, #20]
    db0a:	6013      	str	r3, [r2, #0]
		if (rtr)
    db0c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
    db10:	2b00      	cmp	r3, #0
    db12:	d005      	beq.n	db20 <_ZN15CO_Driver_Class17CAN_Rx_BufferInitEmmmhPvPFvS0_PK13CO_CANrxMsg_tE+0x78>
		{
			buffer->ident |= 0x02;
    db14:	697b      	ldr	r3, [r7, #20]
    db16:	681b      	ldr	r3, [r3, #0]
    db18:	f043 0202 	orr.w	r2, r3, #2
    db1c:	697b      	ldr	r3, [r7, #20]
    db1e:	601a      	str	r2, [r3, #0]
		}
		buffer->mask = (mask & 0x07FF) << 2;
    db20:	683b      	ldr	r3, [r7, #0]
    db22:	009a      	lsls	r2, r3, #2
    db24:	f641 73fc 	movw	r3, #8188	; 0x1ffc
    db28:	4013      	ands	r3, r2
    db2a:	697a      	ldr	r2, [r7, #20]
    db2c:	6053      	str	r3, [r2, #4]
		buffer->mask |= 0x02;
    db2e:	697b      	ldr	r3, [r7, #20]
    db30:	685b      	ldr	r3, [r3, #4]
    db32:	f043 0202 	orr.w	r2, r3, #2
    db36:	697b      	ldr	r3, [r7, #20]
    db38:	605a      	str	r2, [r3, #4]

		/* Set CAN hardware module filter and mask. */
		if(CAN_Module->useCANrxFilters)
    db3a:	68fb      	ldr	r3, [r7, #12]
    db3c:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
    db40:	7d5b      	ldrb	r3, [r3, #21]
    db42:	b2db      	uxtb	r3, r3
    db44:	2b00      	cmp	r3, #0
    db46:	bf14      	ite	ne
    db48:	2301      	movne	r3, #1
    db4a:	2300      	moveq	r3, #0
    db4c:	b2db      	uxtb	r3, r3
    db4e:	2b00      	cmp	r3, #0
    db50:	d120      	bne.n	db94 <_ZN15CO_Driver_Class17CAN_Rx_BufferInitEmmmhPvPFvS0_PK13CO_CANrxMsg_tE+0xec>
		else
		{
			/*no hardware filters*/
			//CAN_FilterTypeDef FilterConfig;
		
			CO_Filter.id   = buffer->ident;
    db52:	697b      	ldr	r3, [r7, #20]
    db54:	681a      	ldr	r2, [r3, #0]
    db56:	68fb      	ldr	r3, [r7, #12]
    db58:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
			CO_Filter.mask = buffer->mask;
    db5c:	697b      	ldr	r3, [r7, #20]
    db5e:	685a      	ldr	r2, [r3, #4]
    db60:	68fb      	ldr	r3, [r7, #12]
    db62:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
			ret= (CO_ReturnError_t)can_async_set_filter(CAN_Module->CANBaseDescriptor,(uint8_t)index, CAN_FMT_STDID, &CO_Filter);
    db66:	68fb      	ldr	r3, [r7, #12]
    db68:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
    db6c:	6818      	ldr	r0, [r3, #0]
    db6e:	68bb      	ldr	r3, [r7, #8]
    db70:	b2d9      	uxtb	r1, r3
    db72:	68fb      	ldr	r3, [r7, #12]
    db74:	f503 7396 	add.w	r3, r3, #300	; 0x12c
    db78:	2200      	movs	r2, #0
    db7a:	4c0a      	ldr	r4, [pc, #40]	; (dba4 <_ZN15CO_Driver_Class17CAN_Rx_BufferInitEmmmhPvPFvS0_PK13CO_CANrxMsg_tE+0xfc>)
    db7c:	47a0      	blx	r4
    db7e:	4603      	mov	r3, r0
    db80:	b25a      	sxtb	r2, r3
    db82:	68fb      	ldr	r3, [r7, #12]
    db84:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9
		}
    db88:	e004      	b.n	db94 <_ZN15CO_Driver_Class17CAN_Rx_BufferInitEmmmhPvPFvS0_PK13CO_CANrxMsg_tE+0xec>
	}
	else
	{
		ret = CO_ERROR_ILLEGAL_ARGUMENT;
    db8a:	68fb      	ldr	r3, [r7, #12]
    db8c:	22ff      	movs	r2, #255	; 0xff
    db8e:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9
    db92:	e000      	b.n	db96 <_ZN15CO_Driver_Class17CAN_Rx_BufferInitEmmmhPvPFvS0_PK13CO_CANrxMsg_tE+0xee>
		}
    db94:	bf00      	nop
	}
	return ret;
    db96:	68fb      	ldr	r3, [r7, #12]
    db98:	f993 30a9 	ldrsb.w	r3, [r3, #169]	; 0xa9
}
    db9c:	4618      	mov	r0, r3
    db9e:	371c      	adds	r7, #28
    dba0:	46bd      	mov	sp, r7
    dba2:	bd90      	pop	{r4, r7, pc}
    dba4:	00001c09 	.word	0x00001c09

0000dba8 <_ZN15CO_Driver_Class17CAN_Tx_BufferInitEmmhhh>:
		uint32_t                index,
		uint32_t                ident,
		bool_t                  rtr,
		uint8_t                 noOfBytes,
		bool_t                  syncFlag)
{
    dba8:	b480      	push	{r7}
    dbaa:	b085      	sub	sp, #20
    dbac:	af00      	add	r7, sp, #0
    dbae:	60f8      	str	r0, [r7, #12]
    dbb0:	60b9      	str	r1, [r7, #8]
    dbb2:	607a      	str	r2, [r7, #4]
    dbb4:	70fb      	strb	r3, [r7, #3]
	buffer = NULL;
    dbb6:	68fb      	ldr	r3, [r7, #12]
    dbb8:	2200      	movs	r2, #0
    dbba:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac

	if((CAN_Module != NULL) && (index < CAN_Module->txSize)){
    dbbe:	68fb      	ldr	r3, [r7, #12]
    dbc0:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
    dbc4:	2b00      	cmp	r3, #0
    dbc6:	d03c      	beq.n	dc42 <_ZN15CO_Driver_Class17CAN_Tx_BufferInitEmmhhh+0x9a>
    dbc8:	68fb      	ldr	r3, [r7, #12]
    dbca:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
    dbce:	691a      	ldr	r2, [r3, #16]
    dbd0:	68bb      	ldr	r3, [r7, #8]
    dbd2:	429a      	cmp	r2, r3
    dbd4:	d935      	bls.n	dc42 <_ZN15CO_Driver_Class17CAN_Tx_BufferInitEmmhhh+0x9a>
		/* get specific buffer */
		buffer = &CAN_Module->txArray[index];
    dbd6:	68fb      	ldr	r3, [r7, #12]
    dbd8:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
    dbdc:	68da      	ldr	r2, [r3, #12]
    dbde:	68bb      	ldr	r3, [r7, #8]
    dbe0:	011b      	lsls	r3, r3, #4
    dbe2:	441a      	add	r2, r3
    dbe4:	68fb      	ldr	r3, [r7, #12]
    dbe6:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac

		/* CAN identifier, DLC and rtr, bit aligned with CAN module transmit buffer.*/

		buffer->ident &= 0x7FF;
    dbea:	68fb      	ldr	r3, [r7, #12]
    dbec:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
    dbf0:	68fa      	ldr	r2, [r7, #12]
    dbf2:	f8d2 20ac 	ldr.w	r2, [r2, #172]	; 0xac
    dbf6:	6812      	ldr	r2, [r2, #0]
    dbf8:	f3c2 020a 	ubfx	r2, r2, #0, #11
    dbfc:	601a      	str	r2, [r3, #0]
		buffer->ident = ident << 2;
    dbfe:	68fb      	ldr	r3, [r7, #12]
    dc00:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
    dc04:	687a      	ldr	r2, [r7, #4]
    dc06:	0092      	lsls	r2, r2, #2
    dc08:	601a      	str	r2, [r3, #0]
		if (rtr) buffer->ident |= 0x02;
    dc0a:	78fb      	ldrb	r3, [r7, #3]
    dc0c:	2b00      	cmp	r3, #0
    dc0e:	d009      	beq.n	dc24 <_ZN15CO_Driver_Class17CAN_Tx_BufferInitEmmhhh+0x7c>
    dc10:	68fb      	ldr	r3, [r7, #12]
    dc12:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
    dc16:	68fa      	ldr	r2, [r7, #12]
    dc18:	f8d2 20ac 	ldr.w	r2, [r2, #172]	; 0xac
    dc1c:	6812      	ldr	r2, [r2, #0]
    dc1e:	f042 0202 	orr.w	r2, r2, #2
    dc22:	601a      	str	r2, [r3, #0]

		buffer->DLC = noOfBytes;
    dc24:	68fb      	ldr	r3, [r7, #12]
    dc26:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
    dc2a:	7e3a      	ldrb	r2, [r7, #24]
    dc2c:	711a      	strb	r2, [r3, #4]
		buffer->bufferFull = false;
    dc2e:	68fb      	ldr	r3, [r7, #12]
    dc30:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
    dc34:	2200      	movs	r2, #0
    dc36:	735a      	strb	r2, [r3, #13]
		buffer->syncFlag = syncFlag;
    dc38:	68fb      	ldr	r3, [r7, #12]
    dc3a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
    dc3e:	7f3a      	ldrb	r2, [r7, #28]
    dc40:	739a      	strb	r2, [r3, #14]
	}

	return buffer;
    dc42:	68fb      	ldr	r3, [r7, #12]
    dc44:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
}
    dc48:	4618      	mov	r0, r3
    dc4a:	3714      	adds	r7, #20
    dc4c:	46bd      	mov	sp, r7
    dc4e:	bc80      	pop	{r7}
    dc50:	4770      	bx	lr
	...

0000dc54 <_ZN15CO_Driver_Class8CAN_SendEP10CO_CANtx_t>:

/******************************************************************************/
CO_ReturnError_t CO_Driver_Class::CAN_Send(CO_CANtx_t *buffer)
{
    dc54:	b590      	push	{r4, r7, lr}
    dc56:	b089      	sub	sp, #36	; 0x24
    dc58:	af02      	add	r7, sp, #8
    dc5a:	6078      	str	r0, [r7, #4]
    dc5c:	6039      	str	r1, [r7, #0]
	err = CO_ERROR_NO;
    dc5e:	687b      	ldr	r3, [r7, #4]
    dc60:	2200      	movs	r2, #0
    dc62:	f883 20aa 	strb.w	r2, [r3, #170]	; 0xaa

	if(buffer->bufferFull){
    dc66:	683b      	ldr	r3, [r7, #0]
    dc68:	7b5b      	ldrb	r3, [r3, #13]
    dc6a:	b2db      	uxtb	r3, r3
    dc6c:	2b00      	cmp	r3, #0
    dc6e:	bf14      	ite	ne
    dc70:	2301      	movne	r3, #1
    dc72:	2300      	moveq	r3, #0
    dc74:	b2db      	uxtb	r3, r3
    dc76:	2b00      	cmp	r3, #0
    dc78:	d01d      	beq.n	dcb6 <_ZN15CO_Driver_Class8CAN_SendEP10CO_CANtx_t+0x62>
		if(!CAN_Module->firstCANtxMessage){
    dc7a:	687b      	ldr	r3, [r7, #4]
    dc7c:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
    dc80:	7ddb      	ldrb	r3, [r3, #23]
    dc82:	b2db      	uxtb	r3, r3
    dc84:	2b00      	cmp	r3, #0
    dc86:	bf0c      	ite	eq
    dc88:	2301      	moveq	r3, #1
    dc8a:	2300      	movne	r3, #0
    dc8c:	b2db      	uxtb	r3, r3
    dc8e:	2b00      	cmp	r3, #0
    dc90:	d00d      	beq.n	dcae <_ZN15CO_Driver_Class8CAN_SendEP10CO_CANtx_t+0x5a>
			/* don't set error, if bootup message is still on buffers */
			EM_ErrorReport((CO_EM_t*)CAN_Module->em, CO_EM_CAN_TX_OVERFLOW, CO_EMC_CAN_OVERRUN, buffer->ident);
    dc92:	687b      	ldr	r3, [r7, #4]
    dc94:	1d18      	adds	r0, r3, #4
    dc96:	687b      	ldr	r3, [r7, #4]
    dc98:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
    dc9c:	6a19      	ldr	r1, [r3, #32]
    dc9e:	683b      	ldr	r3, [r7, #0]
    dca0:	681b      	ldr	r3, [r3, #0]
    dca2:	9300      	str	r3, [sp, #0]
    dca4:	f248 1310 	movw	r3, #33040	; 0x8110
    dca8:	2214      	movs	r2, #20
    dcaa:	4c35      	ldr	r4, [pc, #212]	; (dd80 <_ZN15CO_Driver_Class8CAN_SendEP10CO_CANtx_t+0x12c>)
    dcac:	47a0      	blx	r4
		}
		err = CO_ERROR_TX_OVERFLOW;
    dcae:	687b      	ldr	r3, [r7, #4]
    dcb0:	22f7      	movs	r2, #247	; 0xf7
    dcb2:	f883 20aa 	strb.w	r2, [r3, #170]	; 0xaa
	}

	

	PrepareTxMessage(&msgHeader, buffer);
    dcb6:	687b      	ldr	r3, [r7, #4]
    dcb8:	3384      	adds	r3, #132	; 0x84
    dcba:	683a      	ldr	r2, [r7, #0]
    dcbc:	4619      	mov	r1, r3
    dcbe:	6878      	ldr	r0, [r7, #4]
    dcc0:	4b30      	ldr	r3, [pc, #192]	; (dd84 <_ZN15CO_Driver_Class8CAN_SendEP10CO_CANtx_t+0x130>)
    dcc2:	4798      	blx	r3

	if ((CAN_Module->CANtxCount == 0) ) {
    dcc4:	687b      	ldr	r3, [r7, #4]
    dcc6:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
    dcca:	699b      	ldr	r3, [r3, #24]
    dccc:	2b00      	cmp	r3, #0
    dcce:	bf0c      	ite	eq
    dcd0:	2301      	moveq	r3, #1
    dcd2:	2300      	movne	r3, #0
    dcd4:	b2db      	uxtb	r3, r3
    dcd6:	2b00      	cmp	r3, #0
    dcd8:	d041      	beq.n	dd5e <_ZN15CO_Driver_Class8CAN_SendEP10CO_CANtx_t+0x10a>
	//	((uint32_t)hri_can_read_TXFQS_TFFL_bf(canHandler->dev.hw) > 0 )) {
		CAN_Module->bufferInhibitFlag = buffer->syncFlag;
    dcda:	687b      	ldr	r3, [r7, #4]
    dcdc:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
    dce0:	683a      	ldr	r2, [r7, #0]
    dce2:	7b92      	ldrb	r2, [r2, #14]
    dce4:	b2d2      	uxtb	r2, r2
    dce6:	759a      	strb	r2, [r3, #22]
		
		can_async_register_callback(CAN_Module->CANBaseDescriptor, CAN_ASYNC_TX_CB, (FUNC_PTR)CO_tx_callback);
    dce8:	687b      	ldr	r3, [r7, #4]
    dcea:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
    dcee:	681b      	ldr	r3, [r3, #0]
    dcf0:	4a25      	ldr	r2, [pc, #148]	; (dd88 <_ZN15CO_Driver_Class8CAN_SendEP10CO_CANtx_t+0x134>)
    dcf2:	2101      	movs	r1, #1
    dcf4:	4618      	mov	r0, r3
    dcf6:	4b25      	ldr	r3, [pc, #148]	; (dd8c <_ZN15CO_Driver_Class8CAN_SendEP10CO_CANtx_t+0x138>)
    dcf8:	4798      	blx	r3
		can_async_enable(CAN_Module->CANBaseDescriptor);
    dcfa:	687b      	ldr	r3, [r7, #4]
    dcfc:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
    dd00:	681b      	ldr	r3, [r3, #0]
    dd02:	4618      	mov	r0, r3
    dd04:	4b22      	ldr	r3, [pc, #136]	; (dd90 <_ZN15CO_Driver_Class8CAN_SendEP10CO_CANtx_t+0x13c>)
    dd06:	4798      	blx	r3
		receivedtxCOCallback=false;
    dd08:	687b      	ldr	r3, [r7, #4]
    dd0a:	2200      	movs	r2, #0
    dd0c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    dd10:	f3ef 8310 	mrs	r3, PRIMASK
    dd14:	60fb      	str	r3, [r7, #12]
  return(result);
    dd16:	68fb      	ldr	r3, [r7, #12]
		CO_LOCK_CAN_SEND();
    dd18:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
    dd1a:	b672      	cpsid	i
		HalCanErrorCode=can_async_write(CAN_Module->CANBaseDescriptor, &msgHeader);
    dd1c:	687b      	ldr	r3, [r7, #4]
    dd1e:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
    dd22:	681a      	ldr	r2, [r3, #0]
    dd24:	687b      	ldr	r3, [r7, #4]
    dd26:	3384      	adds	r3, #132	; 0x84
    dd28:	4619      	mov	r1, r3
    dd2a:	4610      	mov	r0, r2
    dd2c:	4b19      	ldr	r3, [pc, #100]	; (dd94 <_ZN15CO_Driver_Class8CAN_SendEP10CO_CANtx_t+0x140>)
    dd2e:	4798      	blx	r3
    dd30:	4603      	mov	r3, r0
    dd32:	461a      	mov	r2, r3
    dd34:	687b      	ldr	r3, [r7, #4]
    dd36:	629a      	str	r2, [r3, #40]	; 0x28
    dd38:	697b      	ldr	r3, [r7, #20]
    dd3a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    dd3c:	693b      	ldr	r3, [r7, #16]
    dd3e:	f383 8810 	msr	PRIMASK, r3
		CO_UNLOCK_CAN_SEND();
		if(HalCanErrorCode != CO_ERROR_NO)
    dd42:	687b      	ldr	r3, [r7, #4]
    dd44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    dd46:	2b00      	cmp	r3, #0
    dd48:	bf14      	ite	ne
    dd4a:	2301      	movne	r3, #1
    dd4c:	2300      	moveq	r3, #0
    dd4e:	b2db      	uxtb	r3, r3
    dd50:	2b00      	cmp	r3, #0
    dd52:	d00d      	beq.n	dd70 <_ZN15CO_Driver_Class8CAN_SendEP10CO_CANtx_t+0x11c>
		{
			err = CO_ERROR_HAL;
    dd54:	687b      	ldr	r3, [r7, #4]
    dd56:	22f1      	movs	r2, #241	; 0xf1
    dd58:	f883 20aa 	strb.w	r2, [r3, #170]	; 0xaa
    dd5c:	e008      	b.n	dd70 <_ZN15CO_Driver_Class8CAN_SendEP10CO_CANtx_t+0x11c>
			//CANmodule->CANtxCount++;
		}
	}	/* if no buffer is free, message will be sent in the task */
	else
	{
		buffer->bufferFull = true;
    dd5e:	683b      	ldr	r3, [r7, #0]
    dd60:	2201      	movs	r2, #1
    dd62:	735a      	strb	r2, [r3, #13]
		CAN_Module->CANtxCount++;
    dd64:	687b      	ldr	r3, [r7, #4]
    dd66:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
    dd6a:	699a      	ldr	r2, [r3, #24]
    dd6c:	3201      	adds	r2, #1
    dd6e:	619a      	str	r2, [r3, #24]
	}
	

	return err;
    dd70:	687b      	ldr	r3, [r7, #4]
    dd72:	f993 30aa 	ldrsb.w	r3, [r3, #170]	; 0xaa
}
    dd76:	4618      	mov	r0, r3
    dd78:	371c      	adds	r7, #28
    dd7a:	46bd      	mov	sp, r7
    dd7c:	bd90      	pop	{r4, r7, pc}
    dd7e:	bf00      	nop
    dd80:	0000e6cd 	.word	0x0000e6cd
    dd84:	0000d845 	.word	0x0000d845
    dd88:	0000d74d 	.word	0x0000d74d
    dd8c:	00001b8d 	.word	0x00001b8d
    dd90:	00001ab9 	.word	0x00001ab9
    dd94:	00001b41 	.word	0x00001b41

0000dd98 <_ZN15CO_Driver_Class23CANClearPendingSyncPDOsEv>:


/******************************************************************************/
void CO_Driver_Class::CANClearPendingSyncPDOs(void)
{
    dd98:	b590      	push	{r4, r7, lr}
    dd9a:	b089      	sub	sp, #36	; 0x24
    dd9c:	af02      	add	r7, sp, #8
    dd9e:	6078      	str	r0, [r7, #4]
	tpdoDeleted = 0U;
    dda0:	687b      	ldr	r3, [r7, #4]
    dda2:	2200      	movs	r2, #0
    dda4:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    dda8:	f3ef 8310 	mrs	r3, PRIMASK
    ddac:	60bb      	str	r3, [r7, #8]
  return(result);
    ddae:	68bb      	ldr	r3, [r7, #8]

	CO_LOCK_CAN_SEND();
    ddb0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
    ddb2:	b672      	cpsid	i
      {
    	HAL_CAN_AbortTxRequest(CANmodule->);
      }
	 */

	if(/*messageIsOnCanBuffer && */CAN_Module->bufferInhibitFlag){
    ddb4:	687b      	ldr	r3, [r7, #4]
    ddb6:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
    ddba:	7d9b      	ldrb	r3, [r3, #22]
    ddbc:	b2db      	uxtb	r3, r3
    ddbe:	2b00      	cmp	r3, #0
    ddc0:	bf14      	ite	ne
    ddc2:	2301      	movne	r3, #1
    ddc4:	2300      	moveq	r3, #0
    ddc6:	b2db      	uxtb	r3, r3
    ddc8:	2b00      	cmp	r3, #0
    ddca:	d008      	beq.n	ddde <_ZN15CO_Driver_Class23CANClearPendingSyncPDOsEv+0x46>
		/* clear TXREQ */
		CAN_Module->bufferInhibitFlag = false;
    ddcc:	687b      	ldr	r3, [r7, #4]
    ddce:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
    ddd2:	2200      	movs	r2, #0
    ddd4:	759a      	strb	r2, [r3, #22]
		tpdoDeleted = 1U;
    ddd6:	687b      	ldr	r3, [r7, #4]
    ddd8:	2201      	movs	r2, #1
    ddda:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
	}
	/* delete also pending synchronous TPDOs in TX buffers */
	if(CAN_Module->CANtxCount != 0U){
    ddde:	687b      	ldr	r3, [r7, #4]
    dde0:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
    dde4:	699b      	ldr	r3, [r3, #24]
    dde6:	2b00      	cmp	r3, #0
    dde8:	bf14      	ite	ne
    ddea:	2301      	movne	r3, #1
    ddec:	2300      	moveq	r3, #0
    ddee:	b2db      	uxtb	r3, r3
    ddf0:	2b00      	cmp	r3, #0
    ddf2:	d03c      	beq.n	de6e <_ZN15CO_Driver_Class23CANClearPendingSyncPDOsEv+0xd6>
	
		CO_CANtx_t *buffer = &CAN_Module->txArray[0];
    ddf4:	687b      	ldr	r3, [r7, #4]
    ddf6:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
    ddfa:	68db      	ldr	r3, [r3, #12]
    ddfc:	617b      	str	r3, [r7, #20]
		for(i = CAN_Module->txSize; i > 0U; i--){
    ddfe:	687b      	ldr	r3, [r7, #4]
    de00:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
    de04:	691a      	ldr	r2, [r3, #16]
    de06:	687b      	ldr	r3, [r7, #4]
    de08:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
    de0c:	687b      	ldr	r3, [r7, #4]
    de0e:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
    de12:	2b00      	cmp	r3, #0
    de14:	d02b      	beq.n	de6e <_ZN15CO_Driver_Class23CANClearPendingSyncPDOsEv+0xd6>
			if(buffer->bufferFull){
    de16:	697b      	ldr	r3, [r7, #20]
    de18:	7b5b      	ldrb	r3, [r3, #13]
    de1a:	b2db      	uxtb	r3, r3
    de1c:	2b00      	cmp	r3, #0
    de1e:	bf14      	ite	ne
    de20:	2301      	movne	r3, #1
    de22:	2300      	moveq	r3, #0
    de24:	b2db      	uxtb	r3, r3
    de26:	2b00      	cmp	r3, #0
    de28:	d016      	beq.n	de58 <_ZN15CO_Driver_Class23CANClearPendingSyncPDOsEv+0xc0>
				if(buffer->syncFlag){
    de2a:	697b      	ldr	r3, [r7, #20]
    de2c:	7b9b      	ldrb	r3, [r3, #14]
    de2e:	b2db      	uxtb	r3, r3
    de30:	2b00      	cmp	r3, #0
    de32:	bf14      	ite	ne
    de34:	2301      	movne	r3, #1
    de36:	2300      	moveq	r3, #0
    de38:	b2db      	uxtb	r3, r3
    de3a:	2b00      	cmp	r3, #0
    de3c:	d00c      	beq.n	de58 <_ZN15CO_Driver_Class23CANClearPendingSyncPDOsEv+0xc0>
					buffer->bufferFull = false;
    de3e:	697b      	ldr	r3, [r7, #20]
    de40:	2200      	movs	r2, #0
    de42:	735a      	strb	r2, [r3, #13]
					CAN_Module->CANtxCount--;
    de44:	687b      	ldr	r3, [r7, #4]
    de46:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
    de4a:	699a      	ldr	r2, [r3, #24]
    de4c:	3a01      	subs	r2, #1
    de4e:	619a      	str	r2, [r3, #24]
					tpdoDeleted = 2U;
    de50:	687b      	ldr	r3, [r7, #4]
    de52:	2202      	movs	r2, #2
    de54:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
				}
			}
			buffer++;
    de58:	697b      	ldr	r3, [r7, #20]
    de5a:	3310      	adds	r3, #16
    de5c:	617b      	str	r3, [r7, #20]
		for(i = CAN_Module->txSize; i > 0U; i--){
    de5e:	687b      	ldr	r3, [r7, #4]
    de60:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
    de64:	1e5a      	subs	r2, r3, #1
    de66:	687b      	ldr	r3, [r7, #4]
    de68:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
    de6c:	e7ce      	b.n	de0c <_ZN15CO_Driver_Class23CANClearPendingSyncPDOsEv+0x74>
    de6e:	693b      	ldr	r3, [r7, #16]
    de70:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    de72:	68fb      	ldr	r3, [r7, #12]
    de74:	f383 8810 	msr	PRIMASK, r3
		}
	}
	CO_UNLOCK_CAN_SEND();


	if(tpdoDeleted != 0U){
    de78:	687b      	ldr	r3, [r7, #4]
    de7a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
    de7e:	2b00      	cmp	r3, #0
    de80:	d00e      	beq.n	dea0 <_ZN15CO_Driver_Class23CANClearPendingSyncPDOsEv+0x108>
		EM_ErrorReport((CO_EM_t*)CAN_Module->em, CO_EM_TPDO_OUTSIDE_WINDOW, CO_EMC_COMMUNICATION, tpdoDeleted);
    de82:	687b      	ldr	r3, [r7, #4]
    de84:	1d18      	adds	r0, r3, #4
    de86:	687b      	ldr	r3, [r7, #4]
    de88:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
    de8c:	6a19      	ldr	r1, [r3, #32]
    de8e:	687b      	ldr	r3, [r7, #4]
    de90:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
    de94:	9300      	str	r3, [sp, #0]
    de96:	f44f 4301 	mov.w	r3, #33024	; 0x8100
    de9a:	2215      	movs	r2, #21
    de9c:	4c02      	ldr	r4, [pc, #8]	; (dea8 <_ZN15CO_Driver_Class23CANClearPendingSyncPDOsEv+0x110>)
    de9e:	47a0      	blx	r4
	}
}
    dea0:	bf00      	nop
    dea2:	371c      	adds	r7, #28
    dea4:	46bd      	mov	sp, r7
    dea6:	bd90      	pop	{r4, r7, pc}
    dea8:	0000e6cd 	.word	0x0000e6cd

0000deac <_ZN15CO_Driver_Class16CAN_VerifyErrorsEv>:


/******************************************************************************/
void CO_Driver_Class::CAN_VerifyErrors(void){
    deac:	b590      	push	{r4, r7, lr}
    deae:	b087      	sub	sp, #28
    deb0:	af02      	add	r7, sp, #8
    deb2:	6078      	str	r0, [r7, #4]
	em = (CO_EM_t*)CAN_Module->em;
    deb4:	687b      	ldr	r3, [r7, #4]
    deb6:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
    deba:	6a1a      	ldr	r2, [r3, #32]
    debc:	687b      	ldr	r3, [r7, #4]
    debe:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
	//uint32_t HalCanErrorCode = canHandler->dev.cb->irq_handler();

	if(CAN_Module->errOld != HalCanErrorCode)
    dec2:	687b      	ldr	r3, [r7, #4]
    dec4:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
    dec8:	69da      	ldr	r2, [r3, #28]
    deca:	687b      	ldr	r3, [r7, #4]
    decc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    dece:	429a      	cmp	r2, r3
    ded0:	bf14      	ite	ne
    ded2:	2301      	movne	r3, #1
    ded4:	2300      	moveq	r3, #0
    ded6:	b2db      	uxtb	r3, r3
    ded8:	2b00      	cmp	r3, #0
    deda:	f000 80ae 	beq.w	e03a <_ZN15CO_Driver_Class16CAN_VerifyErrorsEv+0x18e>
	{
		CAN_Module->errOld = HalCanErrorCode;
    dede:	687b      	ldr	r3, [r7, #4]
    dee0:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
    dee4:	687a      	ldr	r2, [r7, #4]
    dee6:	6a92      	ldr	r2, [r2, #40]	; 0x28
    dee8:	61da      	str	r2, [r3, #28]
		if(HalCanErrorCode & CAN_IRQ_BO)
    deea:	687b      	ldr	r3, [r7, #4]
    deec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    deee:	f003 0303 	and.w	r3, r3, #3
    def2:	2b00      	cmp	r3, #0
    def4:	bf14      	ite	ne
    def6:	2301      	movne	r3, #1
    def8:	2300      	moveq	r3, #0
    defa:	b2db      	uxtb	r3, r3
    defc:	2b00      	cmp	r3, #0
    defe:	d00d      	beq.n	df1c <_ZN15CO_Driver_Class16CAN_VerifyErrorsEv+0x70>
		{                               /* bus off */
			EM_ErrorReport(em, CO_EM_CAN_TX_BUS_OFF, CO_EMC_BUS_OFF_RECOVERED, HalCanErrorCode);
    df00:	687b      	ldr	r3, [r7, #4]
    df02:	1d18      	adds	r0, r3, #4
    df04:	687b      	ldr	r3, [r7, #4]
    df06:	f8d3 10b4 	ldr.w	r1, [r3, #180]	; 0xb4
    df0a:	687b      	ldr	r3, [r7, #4]
    df0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    df0e:	9300      	str	r3, [sp, #0]
    df10:	f248 1340 	movw	r3, #33088	; 0x8140
    df14:	2212      	movs	r2, #18
    df16:	4c4d      	ldr	r4, [pc, #308]	; (e04c <_ZN15CO_Driver_Class16CAN_VerifyErrorsEv+0x1a0>)
    df18:	47a0      	blx	r4
    df1a:	e076      	b.n	e00a <_ZN15CO_Driver_Class16CAN_VerifyErrorsEv+0x15e>
		}
		else{                                               /* not bus off */
			EM_ErrorReset(em, CO_EM_CAN_TX_BUS_OFF, HalCanErrorCode);
    df1c:	687b      	ldr	r3, [r7, #4]
    df1e:	1d18      	adds	r0, r3, #4
    df20:	687b      	ldr	r3, [r7, #4]
    df22:	f8d3 10b4 	ldr.w	r1, [r3, #180]	; 0xb4
    df26:	687b      	ldr	r3, [r7, #4]
    df28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    df2a:	2212      	movs	r2, #18
    df2c:	4c48      	ldr	r4, [pc, #288]	; (e050 <_ZN15CO_Driver_Class16CAN_VerifyErrorsEv+0x1a4>)
    df2e:	47a0      	blx	r4

			if(HalCanErrorCode & CAN_IRQ_EW)
    df30:	687b      	ldr	r3, [r7, #4]
    df32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    df34:	2300      	movs	r3, #0
    df36:	2b00      	cmp	r3, #0
    df38:	d00b      	beq.n	df52 <_ZN15CO_Driver_Class16CAN_VerifyErrorsEv+0xa6>
			{     											/* bus warning */
				EM_ErrorReport(em, CO_EM_CAN_BUS_WARNING, CO_EMC_NO_ERROR, HalCanErrorCode);
    df3a:	687b      	ldr	r3, [r7, #4]
    df3c:	1d18      	adds	r0, r3, #4
    df3e:	687b      	ldr	r3, [r7, #4]
    df40:	f8d3 10b4 	ldr.w	r1, [r3, #180]	; 0xb4
    df44:	687b      	ldr	r3, [r7, #4]
    df46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    df48:	9300      	str	r3, [sp, #0]
    df4a:	2300      	movs	r3, #0
    df4c:	2201      	movs	r2, #1
    df4e:	4c3f      	ldr	r4, [pc, #252]	; (e04c <_ZN15CO_Driver_Class16CAN_VerifyErrorsEv+0x1a0>)
    df50:	47a0      	blx	r4
			}
			else
			{
				//do nothing
			}
			if(HalCanErrorCode & CAN_IRQ_EP)
    df52:	687b      	ldr	r3, [r7, #4]
    df54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    df56:	f003 0302 	and.w	r3, r3, #2
    df5a:	2b00      	cmp	r3, #0
    df5c:	bf14      	ite	ne
    df5e:	2301      	movne	r3, #1
    df60:	2300      	moveq	r3, #0
    df62:	b2db      	uxtb	r3, r3
    df64:	2b00      	cmp	r3, #0
    df66:	d019      	beq.n	df9c <_ZN15CO_Driver_Class16CAN_VerifyErrorsEv+0xf0>
			{      											/* TX/RX bus passive */
				if(!CAN_Module->firstCANtxMessage)
    df68:	687b      	ldr	r3, [r7, #4]
    df6a:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
    df6e:	7ddb      	ldrb	r3, [r3, #23]
    df70:	b2db      	uxtb	r3, r3
    df72:	2b00      	cmp	r3, #0
    df74:	bf0c      	ite	eq
    df76:	2301      	moveq	r3, #1
    df78:	2300      	movne	r3, #0
    df7a:	b2db      	uxtb	r3, r3
    df7c:	2b00      	cmp	r3, #0
    df7e:	d02f      	beq.n	dfe0 <_ZN15CO_Driver_Class16CAN_VerifyErrorsEv+0x134>
				{
					EM_ErrorReport(em, CO_EM_CAN_TX_BUS_PASSIVE, CO_EMC_CAN_PASSIVE, HalCanErrorCode);
    df80:	687b      	ldr	r3, [r7, #4]
    df82:	1d18      	adds	r0, r3, #4
    df84:	687b      	ldr	r3, [r7, #4]
    df86:	f8d3 10b4 	ldr.w	r1, [r3, #180]	; 0xb4
    df8a:	687b      	ldr	r3, [r7, #4]
    df8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    df8e:	9300      	str	r3, [sp, #0]
    df90:	f248 1320 	movw	r3, #33056	; 0x8120
    df94:	2207      	movs	r2, #7
    df96:	4c2d      	ldr	r4, [pc, #180]	; (e04c <_ZN15CO_Driver_Class16CAN_VerifyErrorsEv+0x1a0>)
    df98:	47a0      	blx	r4
    df9a:	e021      	b.n	dfe0 <_ZN15CO_Driver_Class16CAN_VerifyErrorsEv+0x134>
				{
					//do nothing
				}
			}
			else{
				bool_t isError = EM_IsError(em, CO_EM_CAN_TX_BUS_PASSIVE);
    df9c:	687b      	ldr	r3, [r7, #4]
    df9e:	1d18      	adds	r0, r3, #4
    dfa0:	687b      	ldr	r3, [r7, #4]
    dfa2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
    dfa6:	2207      	movs	r2, #7
    dfa8:	4619      	mov	r1, r3
    dfaa:	4b2a      	ldr	r3, [pc, #168]	; (e054 <_ZN15CO_Driver_Class16CAN_VerifyErrorsEv+0x1a8>)
    dfac:	4798      	blx	r3
    dfae:	4603      	mov	r3, r0
    dfb0:	73fb      	strb	r3, [r7, #15]
				if(isError)
    dfb2:	7bfb      	ldrb	r3, [r7, #15]
    dfb4:	2b00      	cmp	r3, #0
    dfb6:	d013      	beq.n	dfe0 <_ZN15CO_Driver_Class16CAN_VerifyErrorsEv+0x134>
				{
					EM_ErrorReset(em, CO_EM_CAN_TX_BUS_PASSIVE, HalCanErrorCode);
    dfb8:	687b      	ldr	r3, [r7, #4]
    dfba:	1d18      	adds	r0, r3, #4
    dfbc:	687b      	ldr	r3, [r7, #4]
    dfbe:	f8d3 10b4 	ldr.w	r1, [r3, #180]	; 0xb4
    dfc2:	687b      	ldr	r3, [r7, #4]
    dfc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    dfc6:	2207      	movs	r2, #7
    dfc8:	4c21      	ldr	r4, [pc, #132]	; (e050 <_ZN15CO_Driver_Class16CAN_VerifyErrorsEv+0x1a4>)
    dfca:	47a0      	blx	r4
					EM_ErrorReset(em, CO_EM_CAN_TX_OVERFLOW, HalCanErrorCode);
    dfcc:	687b      	ldr	r3, [r7, #4]
    dfce:	1d18      	adds	r0, r3, #4
    dfd0:	687b      	ldr	r3, [r7, #4]
    dfd2:	f8d3 10b4 	ldr.w	r1, [r3, #180]	; 0xb4
    dfd6:	687b      	ldr	r3, [r7, #4]
    dfd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    dfda:	2214      	movs	r2, #20
    dfdc:	4c1c      	ldr	r4, [pc, #112]	; (e050 <_ZN15CO_Driver_Class16CAN_VerifyErrorsEv+0x1a4>)
    dfde:	47a0      	blx	r4
				{
					//do nothing
				}
			}

			if(HalCanErrorCode & CAN_IRQ_EA)
    dfe0:	687b      	ldr	r3, [r7, #4]
    dfe2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    dfe4:	f003 0301 	and.w	r3, r3, #1
    dfe8:	2b00      	cmp	r3, #0
    dfea:	bf14      	ite	ne
    dfec:	2301      	movne	r3, #1
    dfee:	2300      	moveq	r3, #0
    dff0:	b2db      	uxtb	r3, r3
    dff2:	2b00      	cmp	r3, #0
    dff4:	d009      	beq.n	e00a <_ZN15CO_Driver_Class16CAN_VerifyErrorsEv+0x15e>
			{      											 /* no error */
				EM_ErrorReset(em, CO_EM_CAN_BUS_WARNING, HalCanErrorCode);
    dff6:	687b      	ldr	r3, [r7, #4]
    dff8:	1d18      	adds	r0, r3, #4
    dffa:	687b      	ldr	r3, [r7, #4]
    dffc:	f8d3 10b4 	ldr.w	r1, [r3, #180]	; 0xb4
    e000:	687b      	ldr	r3, [r7, #4]
    e002:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    e004:	2201      	movs	r2, #1
    e006:	4c12      	ldr	r4, [pc, #72]	; (e050 <_ZN15CO_Driver_Class16CAN_VerifyErrorsEv+0x1a4>)
    e008:	47a0      	blx	r4
				//do nothing
			}

		}

		if((HalCanErrorCode & CAN_IRQ_DO) )
    e00a:	687b      	ldr	r3, [r7, #4]
    e00c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    e00e:	f003 0304 	and.w	r3, r3, #4
    e012:	2b00      	cmp	r3, #0
    e014:	bf14      	ite	ne
    e016:	2301      	movne	r3, #1
    e018:	2300      	moveq	r3, #0
    e01a:	b2db      	uxtb	r3, r3
    e01c:	2b00      	cmp	r3, #0
    e01e:	d00c      	beq.n	e03a <_ZN15CO_Driver_Class16CAN_VerifyErrorsEv+0x18e>
		{                                 					/* CAN RX bus overflow */
			EM_ErrorReport(em, CO_EM_CAN_RXB_OVERFLOW, CO_EMC_CAN_OVERRUN, HalCanErrorCode);
    e020:	687b      	ldr	r3, [r7, #4]
    e022:	1d18      	adds	r0, r3, #4
    e024:	687b      	ldr	r3, [r7, #4]
    e026:	f8d3 10b4 	ldr.w	r1, [r3, #180]	; 0xb4
    e02a:	687b      	ldr	r3, [r7, #4]
    e02c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    e02e:	9300      	str	r3, [sp, #0]
    e030:	f248 1310 	movw	r3, #33040	; 0x8110
    e034:	2213      	movs	r2, #19
    e036:	4c05      	ldr	r4, [pc, #20]	; (e04c <_ZN15CO_Driver_Class16CAN_VerifyErrorsEv+0x1a0>)
    e038:	47a0      	blx	r4
		else
		{
			//do nothing
		}
	}
		receivedIntCOCallback=false;
    e03a:	687b      	ldr	r3, [r7, #4]
    e03c:	2200      	movs	r2, #0
    e03e:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
}
    e042:	bf00      	nop
    e044:	3714      	adds	r7, #20
    e046:	46bd      	mov	sp, r7
    e048:	bd90      	pop	{r4, r7, pc}
    e04a:	bf00      	nop
    e04c:	0000e6cd 	.word	0x0000e6cd
    e050:	0000e821 	.word	0x0000e821
    e054:	0000e96d 	.word	0x0000e96d

0000e058 <_ZN15CO_Driver_Class19ProcessInterrupt_RxEv>:

/*Interrupt handlers*/
/******************************************************************************/
void CO_Driver_Class::ProcessInterrupt_Rx(void)
{
    e058:	b580      	push	{r7, lr}
    e05a:	b084      	sub	sp, #16
    e05c:	af00      	add	r7, sp, #0
    e05e:	6078      	str	r0, [r7, #4]

	

	ConvertCANMsg2CORxMsg(receivedCOMsg,&CANmessage);
    e060:	687b      	ldr	r3, [r7, #4]
    e062:	f103 0170 	add.w	r1, r3, #112	; 0x70
    e066:	687b      	ldr	r3, [r7, #4]
    e068:	f503 7380 	add.w	r3, r3, #256	; 0x100
    e06c:	461a      	mov	r2, r3
    e06e:	6878      	ldr	r0, [r7, #4]
    e070:	4b30      	ldr	r3, [pc, #192]	; (e134 <_ZN15CO_Driver_Class19ProcessInterrupt_RxEv+0xdc>)
    e072:	4798      	blx	r3
	MsgBuff=CAN_Module->rxArray;
    e074:	687b      	ldr	r3, [r7, #4]
    e076:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
    e07a:	685a      	ldr	r2, [r3, #4]
    e07c:	687b      	ldr	r3, [r7, #4]
    e07e:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
	/* Search rxArray form CANmodule for the same CAN-ID. */
	uint32_t msgCO = (((uint32_t)(CANmessage.ident << 2)) | (uint32_t)(msg.type));
    e082:	687b      	ldr	r3, [r7, #4]
    e084:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
    e088:	009b      	lsls	r3, r3, #2
    e08a:	687a      	ldr	r2, [r7, #4]
    e08c:	f892 209c 	ldrb.w	r2, [r2, #156]	; 0x9c
    e090:	4313      	orrs	r3, r2
    e092:	60fb      	str	r3, [r7, #12]
	for (index = 0; index < RxFifo_Callback_CanModule_p->rxSize; index++)
    e094:	687b      	ldr	r3, [r7, #4]
    e096:	2200      	movs	r2, #0
    e098:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    e09c:	687b      	ldr	r3, [r7, #4]
    e09e:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
    e0a2:	687b      	ldr	r3, [r7, #4]
    e0a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    e0a8:	689b      	ldr	r3, [r3, #8]
    e0aa:	429a      	cmp	r2, r3
    e0ac:	d221      	bcs.n	e0f2 <_ZN15CO_Driver_Class19ProcessInterrupt_RxEv+0x9a>
	{
		
		if (((msgCO ^ MsgBuff->ident) & MsgBuff->mask) == 0)
    e0ae:	687b      	ldr	r3, [r7, #4]
    e0b0:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
    e0b4:	681a      	ldr	r2, [r3, #0]
    e0b6:	68fb      	ldr	r3, [r7, #12]
    e0b8:	405a      	eors	r2, r3
    e0ba:	687b      	ldr	r3, [r7, #4]
    e0bc:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
    e0c0:	685b      	ldr	r3, [r3, #4]
    e0c2:	4013      	ands	r3, r2
    e0c4:	2b00      	cmp	r3, #0
    e0c6:	d104      	bne.n	e0d2 <_ZN15CO_Driver_Class19ProcessInterrupt_RxEv+0x7a>
		{
			msgMatched = true;
    e0c8:	687b      	ldr	r3, [r7, #4]
    e0ca:	2201      	movs	r2, #1
    e0cc:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
			break;
    e0d0:	e00f      	b.n	e0f2 <_ZN15CO_Driver_Class19ProcessInterrupt_RxEv+0x9a>
		}
		MsgBuff++;
    e0d2:	687b      	ldr	r3, [r7, #4]
    e0d4:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
    e0d8:	f103 0210 	add.w	r2, r3, #16
    e0dc:	687b      	ldr	r3, [r7, #4]
    e0de:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
	for (index = 0; index < RxFifo_Callback_CanModule_p->rxSize; index++)
    e0e2:	687b      	ldr	r3, [r7, #4]
    e0e4:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
    e0e8:	1c5a      	adds	r2, r3, #1
    e0ea:	687b      	ldr	r3, [r7, #4]
    e0ec:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    e0f0:	e7d4      	b.n	e09c <_ZN15CO_Driver_Class19ProcessInterrupt_RxEv+0x44>
	}

	/* Call specific function, which will process the message */
	if(msgMatched && (MsgBuff != NULL) && (MsgBuff->pFunct != NULL))
    e0f2:	687b      	ldr	r3, [r7, #4]
    e0f4:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
    e0f8:	2b00      	cmp	r3, #0
    e0fa:	d017      	beq.n	e12c <_ZN15CO_Driver_Class19ProcessInterrupt_RxEv+0xd4>
    e0fc:	687b      	ldr	r3, [r7, #4]
    e0fe:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
    e102:	2b00      	cmp	r3, #0
    e104:	d012      	beq.n	e12c <_ZN15CO_Driver_Class19ProcessInterrupt_RxEv+0xd4>
    e106:	687b      	ldr	r3, [r7, #4]
    e108:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
    e10c:	68db      	ldr	r3, [r3, #12]
    e10e:	2b00      	cmp	r3, #0
    e110:	d00c      	beq.n	e12c <_ZN15CO_Driver_Class19ProcessInterrupt_RxEv+0xd4>
	{
			//printf("  %X", CANmessage.ident);
			MsgBuff->pFunct(MsgBuff->object, &CANmessage);
    e112:	687b      	ldr	r3, [r7, #4]
    e114:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
    e118:	68db      	ldr	r3, [r3, #12]
    e11a:	687a      	ldr	r2, [r7, #4]
    e11c:	f8d2 20bc 	ldr.w	r2, [r2, #188]	; 0xbc
    e120:	6890      	ldr	r0, [r2, #8]
    e122:	687a      	ldr	r2, [r7, #4]
    e124:	f502 7280 	add.w	r2, r2, #256	; 0x100
    e128:	4611      	mov	r1, r2
    e12a:	4798      	blx	r3
	//                buffer++;
	//            }
	//        }

	/*CubeMx HAL is responsible for clearing interrupt flags and all the dirty work. */
}
    e12c:	bf00      	nop
    e12e:	3710      	adds	r7, #16
    e130:	46bd      	mov	sp, r7
    e132:	bd80      	pop	{r7, pc}
    e134:	0000d891 	.word	0x0000d891

0000e138 <_ZN15CO_Driver_Class14CAN_Polling_TxEv>:


void CO_Driver_Class::CAN_Polling_Tx(void)
{
    e138:	b580      	push	{r7, lr}
    e13a:	b084      	sub	sp, #16
    e13c:	af00      	add	r7, sp, #0
    e13e:	6078      	str	r0, [r7, #4]
	
	//struct can_async_descriptor canStruct= (* struct can_async_descriptor )canHandler;
	if (hri_can_read_TXFQS_TFFL_bf(CAN1) > 0)
    e140:	4845      	ldr	r0, [pc, #276]	; (e258 <_ZN15CO_Driver_Class14CAN_Polling_TxEv+0x120>)
    e142:	4b46      	ldr	r3, [pc, #280]	; (e25c <_ZN15CO_Driver_Class14CAN_Polling_TxEv+0x124>)
    e144:	4798      	blx	r3
    e146:	4603      	mov	r3, r0
    e148:	2b00      	cmp	r3, #0
    e14a:	bf14      	ite	ne
    e14c:	2301      	movne	r3, #1
    e14e:	2300      	moveq	r3, #0
    e150:	b2db      	uxtb	r3, r3
    e152:	2b00      	cmp	r3, #0
    e154:	d07b      	beq.n	e24e <_ZN15CO_Driver_Class14CAN_Polling_TxEv+0x116>
	{
		/* First CAN message (bootup) was sent successfully */
		CAN_Module->firstCANtxMessage = false;
    e156:	687b      	ldr	r3, [r7, #4]
    e158:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
    e15c:	2200      	movs	r2, #0
    e15e:	75da      	strb	r2, [r3, #23]
		/* Clear flag from previous message */
		CAN_Module->bufferInhibitFlag = false;
    e160:	687b      	ldr	r3, [r7, #4]
    e162:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
    e166:	2200      	movs	r2, #0
    e168:	759a      	strb	r2, [r3, #22]
		/* Are there any new messages waiting to be send */
		if(CAN_Module->CANtxCount > 0U)
    e16a:	687b      	ldr	r3, [r7, #4]
    e16c:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
    e170:	699b      	ldr	r3, [r3, #24]
    e172:	2b00      	cmp	r3, #0
    e174:	bf14      	ite	ne
    e176:	2301      	movne	r3, #1
    e178:	2300      	moveq	r3, #0
    e17a:	b2db      	uxtb	r3, r3
    e17c:	2b00      	cmp	r3, #0
    e17e:	d066      	beq.n	e24e <_ZN15CO_Driver_Class14CAN_Polling_TxEv+0x116>
		{
			uint32_t i;             /* index of transmitting message */

			/* first buffer */
			CO_CANtx_t *buffer = &CAN_Module->txArray[0];
    e180:	687b      	ldr	r3, [r7, #4]
    e182:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
    e186:	68db      	ldr	r3, [r3, #12]
    e188:	60bb      	str	r3, [r7, #8]
			/* search through whole array of pointers to transmit message buffers. */
			for(i = CAN_Module->txSize; i > 0U; i--)
    e18a:	687b      	ldr	r3, [r7, #4]
    e18c:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
    e190:	691b      	ldr	r3, [r3, #16]
    e192:	60fb      	str	r3, [r7, #12]
    e194:	68fb      	ldr	r3, [r7, #12]
    e196:	2b00      	cmp	r3, #0
    e198:	d051      	beq.n	e23e <_ZN15CO_Driver_Class14CAN_Polling_TxEv+0x106>
			{
				/* if message buffer is full, send it. */
				if(buffer->bufferFull)
    e19a:	68bb      	ldr	r3, [r7, #8]
    e19c:	7b5b      	ldrb	r3, [r3, #13]
    e19e:	b2db      	uxtb	r3, r3
    e1a0:	2b00      	cmp	r3, #0
    e1a2:	bf14      	ite	ne
    e1a4:	2301      	movne	r3, #1
    e1a6:	2300      	moveq	r3, #0
    e1a8:	b2db      	uxtb	r3, r3
    e1aa:	2b00      	cmp	r3, #0
    e1ac:	d03f      	beq.n	e22e <_ZN15CO_Driver_Class14CAN_Polling_TxEv+0xf6>
				{

					/* Copy message to CAN buffer */
					CAN_Module->bufferInhibitFlag = buffer->syncFlag;
    e1ae:	687b      	ldr	r3, [r7, #4]
    e1b0:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
    e1b4:	68ba      	ldr	r2, [r7, #8]
    e1b6:	7b92      	ldrb	r2, [r2, #14]
    e1b8:	b2d2      	uxtb	r2, r2
    e1ba:	759a      	strb	r2, [r3, #22]

					

					PrepareTxMessage(&msgHeader, buffer);
    e1bc:	687b      	ldr	r3, [r7, #4]
    e1be:	3384      	adds	r3, #132	; 0x84
    e1c0:	68ba      	ldr	r2, [r7, #8]
    e1c2:	4619      	mov	r1, r3
    e1c4:	6878      	ldr	r0, [r7, #4]
    e1c6:	4b26      	ldr	r3, [pc, #152]	; (e260 <_ZN15CO_Driver_Class14CAN_Polling_TxEv+0x128>)
    e1c8:	4798      	blx	r3
					can_async_register_callback(canDescr, CAN_ASYNC_TX_CB, (FUNC_PTR)CO_tx_callback);
    e1ca:	687b      	ldr	r3, [r7, #4]
    e1cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
    e1d0:	4a24      	ldr	r2, [pc, #144]	; (e264 <_ZN15CO_Driver_Class14CAN_Polling_TxEv+0x12c>)
    e1d2:	2101      	movs	r1, #1
    e1d4:	4618      	mov	r0, r3
    e1d6:	4b24      	ldr	r3, [pc, #144]	; (e268 <_ZN15CO_Driver_Class14CAN_Polling_TxEv+0x130>)
    e1d8:	4798      	blx	r3
					can_async_enable(canDescr);
    e1da:	687b      	ldr	r3, [r7, #4]
    e1dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
    e1e0:	4618      	mov	r0, r3
    e1e2:	4b22      	ldr	r3, [pc, #136]	; (e26c <_ZN15CO_Driver_Class14CAN_Polling_TxEv+0x134>)
    e1e4:	4798      	blx	r3
					receivedtxCOCallback=false;
    e1e6:	687b      	ldr	r3, [r7, #4]
    e1e8:	2200      	movs	r2, #0
    e1ea:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
					HalCanErrorCode=can_async_write(canDescr, &msgHeader);
    e1ee:	687b      	ldr	r3, [r7, #4]
    e1f0:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
    e1f4:	687b      	ldr	r3, [r7, #4]
    e1f6:	3384      	adds	r3, #132	; 0x84
    e1f8:	4619      	mov	r1, r3
    e1fa:	4610      	mov	r0, r2
    e1fc:	4b1c      	ldr	r3, [pc, #112]	; (e270 <_ZN15CO_Driver_Class14CAN_Polling_TxEv+0x138>)
    e1fe:	4798      	blx	r3
    e200:	4603      	mov	r3, r0
    e202:	461a      	mov	r2, r3
    e204:	687b      	ldr	r3, [r7, #4]
    e206:	629a      	str	r2, [r3, #40]	; 0x28
					if( HalCanErrorCode != CO_ERROR_NO)
    e208:	687b      	ldr	r3, [r7, #4]
    e20a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    e20c:	2b00      	cmp	r3, #0
    e20e:	bf14      	ite	ne
    e210:	2301      	movne	r3, #1
    e212:	2300      	moveq	r3, #0
    e214:	b2db      	uxtb	r3, r3
    e216:	2b00      	cmp	r3, #0
    e218:	d110      	bne.n	e23c <_ZN15CO_Driver_Class14CAN_Polling_TxEv+0x104>
					{
						;//do nothing
					}
					else
					{
						buffer->bufferFull = false;
    e21a:	68bb      	ldr	r3, [r7, #8]
    e21c:	2200      	movs	r2, #0
    e21e:	735a      	strb	r2, [r3, #13]
						CAN_Module->CANtxCount--;
    e220:	687b      	ldr	r3, [r7, #4]
    e222:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
    e226:	699a      	ldr	r2, [r3, #24]
    e228:	3a01      	subs	r2, #1
    e22a:	619a      	str	r2, [r3, #24]
					}

					break;                      /* exit for loop */
    e22c:	e006      	b.n	e23c <_ZN15CO_Driver_Class14CAN_Polling_TxEv+0x104>
				}
				else
				{
					/*do nothing*/;
				}
				buffer++;
    e22e:	68bb      	ldr	r3, [r7, #8]
    e230:	3310      	adds	r3, #16
    e232:	60bb      	str	r3, [r7, #8]
			for(i = CAN_Module->txSize; i > 0U; i--)
    e234:	68fb      	ldr	r3, [r7, #12]
    e236:	3b01      	subs	r3, #1
    e238:	60fb      	str	r3, [r7, #12]
    e23a:	e7ab      	b.n	e194 <_ZN15CO_Driver_Class14CAN_Polling_TxEv+0x5c>
					break;                      /* exit for loop */
    e23c:	bf00      	nop
			}/* end of for loop */

			/* Clear counter if no more messages */
			if(i == 0U)
    e23e:	68fb      	ldr	r3, [r7, #12]
    e240:	2b00      	cmp	r3, #0
    e242:	d104      	bne.n	e24e <_ZN15CO_Driver_Class14CAN_Polling_TxEv+0x116>
			{
				CAN_Module->CANtxCount = 0U;
    e244:	687b      	ldr	r3, [r7, #4]
    e246:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
    e24a:	2200      	movs	r2, #0
    e24c:	619a      	str	r2, [r3, #24]
			{
				/*do nothing*/;
			}
		}
	}
}
    e24e:	bf00      	nop
    e250:	3710      	adds	r7, #16
    e252:	46bd      	mov	sp, r7
    e254:	bd80      	pop	{r7, pc}
    e256:	bf00      	nop
    e258:	42000400 	.word	0x42000400
    e25c:	0000d689 	.word	0x0000d689
    e260:	0000d845 	.word	0x0000d845
    e264:	0000d74d 	.word	0x0000d74d
    e268:	00001b8d 	.word	0x00001b8d
    e26c:	00001ab9 	.word	0x00001ab9
    e270:	00001b41 	.word	0x00001b41

0000e274 <_ZN18CO_Emergency_ClassC1Ev>:
#include "CO_Driver_Class.h"

CO_Emergency_Class	*ptrCOEMClass;

// default constructor
CO_Emergency_Class::CO_Emergency_Class()
    e274:	b580      	push	{r7, lr}
    e276:	b082      	sub	sp, #8
    e278:	af00      	add	r7, sp, #0
    e27a:	6078      	str	r0, [r7, #4]
    e27c:	6878      	ldr	r0, [r7, #4]
    e27e:	4b05      	ldr	r3, [pc, #20]	; (e294 <_ZN18CO_Emergency_ClassC1Ev+0x20>)
    e280:	4798      	blx	r3
{
	ptrCOEMClass=this;
    e282:	4a05      	ldr	r2, [pc, #20]	; (e298 <_ZN18CO_Emergency_ClassC1Ev+0x24>)
    e284:	687b      	ldr	r3, [r7, #4]
    e286:	6013      	str	r3, [r2, #0]
} //CO_Emergency_Class
    e288:	687b      	ldr	r3, [r7, #4]
    e28a:	4618      	mov	r0, r3
    e28c:	3708      	adds	r7, #8
    e28e:	46bd      	mov	sp, r7
    e290:	bd80      	pop	{r7, pc}
    e292:	bf00      	nop
    e294:	00010795 	.word	0x00010795
    e298:	20001ac0 	.word	0x20001ac0

0000e29c <_ZN18CO_Emergency_ClassD1Ev>:

// default destructor
CO_Emergency_Class::~CO_Emergency_Class()
    e29c:	b580      	push	{r7, lr}
    e29e:	b082      	sub	sp, #8
    e2a0:	af00      	add	r7, sp, #0
    e2a2:	6078      	str	r0, [r7, #4]
    e2a4:	6878      	ldr	r0, [r7, #4]
    e2a6:	4b03      	ldr	r3, [pc, #12]	; (e2b4 <_ZN18CO_Emergency_ClassD1Ev+0x18>)
    e2a8:	4798      	blx	r3
{
} //~CO_Emergency_Class
    e2aa:	687b      	ldr	r3, [r7, #4]
    e2ac:	4618      	mov	r0, r3
    e2ae:	3708      	adds	r7, #8
    e2b0:	46bd      	mov	sp, r7
    e2b2:	bd80      	pop	{r7, pc}
    e2b4:	000107bd 	.word	0x000107bd

0000e2b8 <_ZL11CO_ODF_1003P12CO_ODF_arg_t>:
 * Function for accessing _Pre-Defined Error Field_ (index 0x1003) from SDO server.
 *
 * For more information see file CO_SDO.h.
 */

static   CO_SDO_abortCode_t CO_ODF_1003(CO_ODF_arg_t *ODF_arg){
    e2b8:	b480      	push	{r7}
    e2ba:	b087      	sub	sp, #28
    e2bc:	af00      	add	r7, sp, #0
    e2be:	6078      	str	r0, [r7, #4]
    
    uint8_t value;
	CO_SDO_abortCode_t ret = CO_SDO_AB_NONE;
    e2c0:	2300      	movs	r3, #0
    e2c2:	617b      	str	r3, [r7, #20]

    CO_EMpr_t *emPr = (CO_EMpr_t*) ODF_arg->object;
    e2c4:	687b      	ldr	r3, [r7, #4]
    e2c6:	681b      	ldr	r3, [r3, #0]
    e2c8:	613b      	str	r3, [r7, #16]
    value = ODF_arg->data[0];
    e2ca:	687b      	ldr	r3, [r7, #4]
    e2cc:	685b      	ldr	r3, [r3, #4]
    e2ce:	781b      	ldrb	r3, [r3, #0]
    e2d0:	73fb      	strb	r3, [r7, #15]

    if(ODF_arg->reading){
    e2d2:	687b      	ldr	r3, [r7, #4]
    e2d4:	7f5b      	ldrb	r3, [r3, #29]
    e2d6:	2b00      	cmp	r3, #0
    e2d8:	d017      	beq.n	e30a <_ZL11CO_ODF_1003P12CO_ODF_arg_t+0x52>
        uint8_t noOfErrors;
        noOfErrors = emPr->preDefErrNoOfErrors;
    e2da:	693b      	ldr	r3, [r7, #16]
    e2dc:	7a5b      	ldrb	r3, [r3, #9]
    e2de:	73bb      	strb	r3, [r7, #14]

        if(ODF_arg->subIndex == 0U){
    e2e0:	687b      	ldr	r3, [r7, #4]
    e2e2:	7f1b      	ldrb	r3, [r3, #28]
    e2e4:	2b00      	cmp	r3, #0
    e2e6:	d104      	bne.n	e2f2 <_ZL11CO_ODF_1003P12CO_ODF_arg_t+0x3a>
            ODF_arg->data[0] = noOfErrors;
    e2e8:	687b      	ldr	r3, [r7, #4]
    e2ea:	685b      	ldr	r3, [r3, #4]
    e2ec:	7bba      	ldrb	r2, [r7, #14]
    e2ee:	701a      	strb	r2, [r3, #0]
    e2f0:	e01b      	b.n	e32a <_ZL11CO_ODF_1003P12CO_ODF_arg_t+0x72>
        }
        else if(ODF_arg->subIndex > noOfErrors){
    e2f2:	687b      	ldr	r3, [r7, #4]
    e2f4:	7f1b      	ldrb	r3, [r3, #28]
    e2f6:	461a      	mov	r2, r3
    e2f8:	7bbb      	ldrb	r3, [r7, #14]
    e2fa:	429a      	cmp	r2, r3
    e2fc:	dd02      	ble.n	e304 <_ZL11CO_ODF_1003P12CO_ODF_arg_t+0x4c>
            ret = CO_SDO_AB_NO_DATA;
    e2fe:	4b0e      	ldr	r3, [pc, #56]	; (e338 <_ZL11CO_ODF_1003P12CO_ODF_arg_t+0x80>)
    e300:	617b      	str	r3, [r7, #20]
    e302:	e012      	b.n	e32a <_ZL11CO_ODF_1003P12CO_ODF_arg_t+0x72>
        }
        else{
            ret = CO_SDO_AB_NONE;
    e304:	2300      	movs	r3, #0
    e306:	617b      	str	r3, [r7, #20]
    e308:	e00f      	b.n	e32a <_ZL11CO_ODF_1003P12CO_ODF_arg_t+0x72>
        }
    }
    else{
        /* only '0' may be written to subIndex 0 */
        if(ODF_arg->subIndex == 0U){
    e30a:	687b      	ldr	r3, [r7, #4]
    e30c:	7f1b      	ldrb	r3, [r3, #28]
    e30e:	2b00      	cmp	r3, #0
    e310:	d109      	bne.n	e326 <_ZL11CO_ODF_1003P12CO_ODF_arg_t+0x6e>
            if(value == 0U){
    e312:	7bfb      	ldrb	r3, [r7, #15]
    e314:	2b00      	cmp	r3, #0
    e316:	d103      	bne.n	e320 <_ZL11CO_ODF_1003P12CO_ODF_arg_t+0x68>
                emPr->preDefErrNoOfErrors = 0U;
    e318:	693b      	ldr	r3, [r7, #16]
    e31a:	2200      	movs	r2, #0
    e31c:	725a      	strb	r2, [r3, #9]
    e31e:	e004      	b.n	e32a <_ZL11CO_ODF_1003P12CO_ODF_arg_t+0x72>
            }
            else{
                ret = CO_SDO_AB_INVALID_VALUE;
    e320:	4b06      	ldr	r3, [pc, #24]	; (e33c <_ZL11CO_ODF_1003P12CO_ODF_arg_t+0x84>)
    e322:	617b      	str	r3, [r7, #20]
    e324:	e001      	b.n	e32a <_ZL11CO_ODF_1003P12CO_ODF_arg_t+0x72>
            }
        }
        else{
            ret = CO_SDO_AB_READONLY;
    e326:	4b06      	ldr	r3, [pc, #24]	; (e340 <_ZL11CO_ODF_1003P12CO_ODF_arg_t+0x88>)
    e328:	617b      	str	r3, [r7, #20]
        }
    }

    return ret;
    e32a:	697b      	ldr	r3, [r7, #20]
}
    e32c:	4618      	mov	r0, r3
    e32e:	371c      	adds	r7, #28
    e330:	46bd      	mov	sp, r7
    e332:	bc80      	pop	{r7}
    e334:	4770      	bx	lr
    e336:	bf00      	nop
    e338:	08000024 	.word	0x08000024
    e33c:	06090030 	.word	0x06090030
    e340:	06010002 	.word	0x06010002

0000e344 <_ZL11CO_ODF_1014P12CO_ODF_arg_t>:
 * Function for accessing _COB ID EMCY_ (index 0x1014) from SDO server.
 *
 * For more information see file CO_SDO.h.
 */

static  CO_SDO_abortCode_t CO_ODF_1014(CO_ODF_arg_t *ODF_arg){
    e344:	b580      	push	{r7, lr}
    e346:	b086      	sub	sp, #24
    e348:	af00      	add	r7, sp, #0
    e34a:	6078      	str	r0, [r7, #4]
    uint8_t *nodeId;
    uint32_t value;
    CO_SDO_abortCode_t ret = CO_SDO_AB_NONE;
    e34c:	2300      	movs	r3, #0
    e34e:	617b      	str	r3, [r7, #20]
    nodeId = (uint8_t*) ODF_arg->object;
    e350:	687b      	ldr	r3, [r7, #4]
    e352:	681b      	ldr	r3, [r3, #0]
    e354:	613b      	str	r3, [r7, #16]
    value =ptrCOEMClass->CO_getUint32(ODF_arg->data);
    e356:	4b0f      	ldr	r3, [pc, #60]	; (e394 <_ZL11CO_ODF_1014P12CO_ODF_arg_t+0x50>)
    e358:	681a      	ldr	r2, [r3, #0]
    e35a:	687b      	ldr	r3, [r7, #4]
    e35c:	685b      	ldr	r3, [r3, #4]
    e35e:	4619      	mov	r1, r3
    e360:	4610      	mov	r0, r2
    e362:	4b0d      	ldr	r3, [pc, #52]	; (e398 <_ZL11CO_ODF_1014P12CO_ODF_arg_t+0x54>)
    e364:	4798      	blx	r3
    e366:	60f8      	str	r0, [r7, #12]

    /* add nodeId to the value */
    if(ODF_arg->reading){
    e368:	687b      	ldr	r3, [r7, #4]
    e36a:	7f5b      	ldrb	r3, [r3, #29]
    e36c:	2b00      	cmp	r3, #0
    e36e:	d00b      	beq.n	e388 <_ZL11CO_ODF_1014P12CO_ODF_arg_t+0x44>
        ptrCOEMClass->CO_setUint32(ODF_arg->data, value + *nodeId);
    e370:	4b08      	ldr	r3, [pc, #32]	; (e394 <_ZL11CO_ODF_1014P12CO_ODF_arg_t+0x50>)
    e372:	6818      	ldr	r0, [r3, #0]
    e374:	687b      	ldr	r3, [r7, #4]
    e376:	6859      	ldr	r1, [r3, #4]
    e378:	693b      	ldr	r3, [r7, #16]
    e37a:	781b      	ldrb	r3, [r3, #0]
    e37c:	461a      	mov	r2, r3
    e37e:	68fb      	ldr	r3, [r7, #12]
    e380:	4413      	add	r3, r2
    e382:	461a      	mov	r2, r3
    e384:	4b05      	ldr	r3, [pc, #20]	; (e39c <_ZL11CO_ODF_1014P12CO_ODF_arg_t+0x58>)
    e386:	4798      	blx	r3
    }

    return ret;
    e388:	697b      	ldr	r3, [r7, #20]
}
    e38a:	4618      	mov	r0, r3
    e38c:	3718      	adds	r7, #24
    e38e:	46bd      	mov	sp, r7
    e390:	bd80      	pop	{r7, pc}
    e392:	bf00      	nop
    e394:	20001ac0 	.word	0x20001ac0
    e398:	00010815 	.word	0x00010815
    e39c:	00010849 	.word	0x00010849

0000e3a0 <_ZN18CO_Emergency_Class7EM_InitEP7CO_EM_tP9CO_EMpr_tP8CO_SDO_tPhhS6_PmhP14CO_CANmodule_tmm>:
        uint32_t               *preDefErr,
        uint8_t                 preDefErrSize,
        CO_CANmodule_t         *CANdev,
        uint32_t                CANdevTxIdx,
        uint32_t                CANidTxEM)
{
    e3a0:	b590      	push	{r4, r7, lr}
    e3a2:	b089      	sub	sp, #36	; 0x24
    e3a4:	af02      	add	r7, sp, #8
    e3a6:	60f8      	str	r0, [r7, #12]
    e3a8:	60b9      	str	r1, [r7, #8]
    e3aa:	607a      	str	r2, [r7, #4]
    e3ac:	603b      	str	r3, [r7, #0]
    uint8_t i;

    /* verify arguments */
    if(em==NULL || emPr==NULL || SDO==NULL || errorStatusBits==NULL ||
    e3ae:	68bb      	ldr	r3, [r7, #8]
    e3b0:	2b00      	cmp	r3, #0
    e3b2:	d015      	beq.n	e3e0 <_ZN18CO_Emergency_Class7EM_InitEP7CO_EM_tP9CO_EMpr_tP8CO_SDO_tPhhS6_PmhP14CO_CANmodule_tmm+0x40>
    e3b4:	687b      	ldr	r3, [r7, #4]
    e3b6:	2b00      	cmp	r3, #0
    e3b8:	d012      	beq.n	e3e0 <_ZN18CO_Emergency_Class7EM_InitEP7CO_EM_tP9CO_EMpr_tP8CO_SDO_tPhhS6_PmhP14CO_CANmodule_tmm+0x40>
    e3ba:	683b      	ldr	r3, [r7, #0]
    e3bc:	2b00      	cmp	r3, #0
    e3be:	d00f      	beq.n	e3e0 <_ZN18CO_Emergency_Class7EM_InitEP7CO_EM_tP9CO_EMpr_tP8CO_SDO_tPhhS6_PmhP14CO_CANmodule_tmm+0x40>
    e3c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
    e3c2:	2b00      	cmp	r3, #0
    e3c4:	d00c      	beq.n	e3e0 <_ZN18CO_Emergency_Class7EM_InitEP7CO_EM_tP9CO_EMpr_tP8CO_SDO_tPhhS6_PmhP14CO_CANmodule_tmm+0x40>
    e3c6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
    e3ca:	2b05      	cmp	r3, #5
    e3cc:	d908      	bls.n	e3e0 <_ZN18CO_Emergency_Class7EM_InitEP7CO_EM_tP9CO_EMpr_tP8CO_SDO_tPhhS6_PmhP14CO_CANmodule_tmm+0x40>
        errorStatusBitsSize<6U || errorRegister==NULL || preDefErr==NULL || CANdev==NULL){
    e3ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    e3d0:	2b00      	cmp	r3, #0
    e3d2:	d005      	beq.n	e3e0 <_ZN18CO_Emergency_Class7EM_InitEP7CO_EM_tP9CO_EMpr_tP8CO_SDO_tPhhS6_PmhP14CO_CANmodule_tmm+0x40>
    e3d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    e3d6:	2b00      	cmp	r3, #0
    e3d8:	d002      	beq.n	e3e0 <_ZN18CO_Emergency_Class7EM_InitEP7CO_EM_tP9CO_EMpr_tP8CO_SDO_tPhhS6_PmhP14CO_CANmodule_tmm+0x40>
    e3da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    e3dc:	2b00      	cmp	r3, #0
    e3de:	d102      	bne.n	e3e6 <_ZN18CO_Emergency_Class7EM_InitEP7CO_EM_tP9CO_EMpr_tP8CO_SDO_tPhhS6_PmhP14CO_CANmodule_tmm+0x46>
        return CO_ERROR_ILLEGAL_ARGUMENT;
    e3e0:	f04f 33ff 	mov.w	r3, #4294967295
    e3e4:	e072      	b.n	e4cc <_ZN18CO_Emergency_Class7EM_InitEP7CO_EM_tP9CO_EMpr_tP8CO_SDO_tPhhS6_PmhP14CO_CANmodule_tmm+0x12c>
    }

    /* Configure object variables */
    em->errorStatusBits         = errorStatusBits;
    e3e6:	68bb      	ldr	r3, [r7, #8]
    e3e8:	6aba      	ldr	r2, [r7, #40]	; 0x28
    e3ea:	601a      	str	r2, [r3, #0]
    em->errorStatusBitsSize     = errorStatusBitsSize;
    e3ec:	68bb      	ldr	r3, [r7, #8]
    e3ee:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
    e3f2:	711a      	strb	r2, [r3, #4]
    em->bufEnd                  = em->buf + (CO_EM_INTERNAL_BUFFER_SIZE * 8);
    e3f4:	68bb      	ldr	r3, [r7, #8]
    e3f6:	3305      	adds	r3, #5
    e3f8:	f103 0250 	add.w	r2, r3, #80	; 0x50
    e3fc:	68bb      	ldr	r3, [r7, #8]
    e3fe:	659a      	str	r2, [r3, #88]	; 0x58
    em->bufWritePtr             = em->buf;
    e400:	68bb      	ldr	r3, [r7, #8]
    e402:	1d5a      	adds	r2, r3, #5
    e404:	68bb      	ldr	r3, [r7, #8]
    e406:	65da      	str	r2, [r3, #92]	; 0x5c
    em->bufReadPtr              = em->buf;
    e408:	68bb      	ldr	r3, [r7, #8]
    e40a:	1d5a      	adds	r2, r3, #5
    e40c:	68bb      	ldr	r3, [r7, #8]
    e40e:	661a      	str	r2, [r3, #96]	; 0x60
    em->bufFull                 = 0U;
    e410:	68bb      	ldr	r3, [r7, #8]
    e412:	2200      	movs	r2, #0
    e414:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
    em->wrongErrorReport        = 0U;
    e418:	68bb      	ldr	r3, [r7, #8]
    e41a:	2200      	movs	r2, #0
    e41c:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
    em->handler            = NULL;
    e420:	68bb      	ldr	r3, [r7, #8]
    e422:	2200      	movs	r2, #0
    e424:	669a      	str	r2, [r3, #104]	; 0x68
    emPr->em                    = em;
    e426:	687b      	ldr	r3, [r7, #4]
    e428:	68ba      	ldr	r2, [r7, #8]
    e42a:	611a      	str	r2, [r3, #16]
    emPr->errorRegister         = errorRegister;
    e42c:	687b      	ldr	r3, [r7, #4]
    e42e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    e430:	601a      	str	r2, [r3, #0]
    emPr->preDefErr             = preDefErr;
    e432:	687b      	ldr	r3, [r7, #4]
    e434:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    e436:	605a      	str	r2, [r3, #4]
    emPr->preDefErrSize         = preDefErrSize;
    e438:	687b      	ldr	r3, [r7, #4]
    e43a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
    e43e:	721a      	strb	r2, [r3, #8]
    emPr->preDefErrNoOfErrors   = 0U;
    e440:	687b      	ldr	r3, [r7, #4]
    e442:	2200      	movs	r2, #0
    e444:	725a      	strb	r2, [r3, #9]
    emPr->inhibitEmTimer        = 0U;
    e446:	687b      	ldr	r3, [r7, #4]
    e448:	2200      	movs	r2, #0
    e44a:	60da      	str	r2, [r3, #12]
 
    /* clear error status bits */
    for(i=0U; i<errorStatusBitsSize; i++){
    e44c:	2300      	movs	r3, #0
    e44e:	75fb      	strb	r3, [r7, #23]
    e450:	7dfa      	ldrb	r2, [r7, #23]
    e452:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
    e456:	429a      	cmp	r2, r3
    e458:	da09      	bge.n	e46e <_ZN18CO_Emergency_Class7EM_InitEP7CO_EM_tP9CO_EMpr_tP8CO_SDO_tPhhS6_PmhP14CO_CANmodule_tmm+0xce>
        em->errorStatusBits[i] = 0U;
    e45a:	68bb      	ldr	r3, [r7, #8]
    e45c:	681a      	ldr	r2, [r3, #0]
    e45e:	7dfb      	ldrb	r3, [r7, #23]
    e460:	4413      	add	r3, r2
    e462:	2200      	movs	r2, #0
    e464:	701a      	strb	r2, [r3, #0]
    for(i=0U; i<errorStatusBitsSize; i++){
    e466:	7dfb      	ldrb	r3, [r7, #23]
    e468:	3301      	adds	r3, #1
    e46a:	75fb      	strb	r3, [r7, #23]
    e46c:	e7f0      	b.n	e450 <_ZN18CO_Emergency_Class7EM_InitEP7CO_EM_tP9CO_EMpr_tP8CO_SDO_tPhhS6_PmhP14CO_CANmodule_tmm+0xb0>
    }

    /* Configure Object dictionary entry at index 0x1003 and 0x1014 */
    CO_OD_configure( OD_H1003_PREDEF_ERR_FIELD,CO_ODF_1003, (void*)emPr, 0, 0U);
    e46e:	2300      	movs	r3, #0
    e470:	9301      	str	r3, [sp, #4]
    e472:	2300      	movs	r3, #0
    e474:	9300      	str	r3, [sp, #0]
    e476:	687b      	ldr	r3, [r7, #4]
    e478:	4a16      	ldr	r2, [pc, #88]	; (e4d4 <_ZN18CO_Emergency_Class7EM_InitEP7CO_EM_tP9CO_EMpr_tP8CO_SDO_tPhhS6_PmhP14CO_CANmodule_tmm+0x134>)
    e47a:	f241 0103 	movw	r1, #4099	; 0x1003
    e47e:	68f8      	ldr	r0, [r7, #12]
    e480:	4c15      	ldr	r4, [pc, #84]	; (e4d8 <_ZN18CO_Emergency_Class7EM_InitEP7CO_EM_tP9CO_EMpr_tP8CO_SDO_tPhhS6_PmhP14CO_CANmodule_tmm+0x138>)
    e482:	47a0      	blx	r4
    CO_OD_configure( OD_H1014_COBID_EMERGENCY,CO_ODF_1014, (void*)&SDO->nodeId, 0, 0U);
    e484:	683b      	ldr	r3, [r7, #0]
    e486:	f103 0268 	add.w	r2, r3, #104	; 0x68
    e48a:	2300      	movs	r3, #0
    e48c:	9301      	str	r3, [sp, #4]
    e48e:	2300      	movs	r3, #0
    e490:	9300      	str	r3, [sp, #0]
    e492:	4613      	mov	r3, r2
    e494:	4a11      	ldr	r2, [pc, #68]	; (e4dc <_ZN18CO_Emergency_Class7EM_InitEP7CO_EM_tP9CO_EMpr_tP8CO_SDO_tPhhS6_PmhP14CO_CANmodule_tmm+0x13c>)
    e496:	f241 0114 	movw	r1, #4116	; 0x1014
    e49a:	68f8      	ldr	r0, [r7, #12]
    e49c:	4c0e      	ldr	r4, [pc, #56]	; (e4d8 <_ZN18CO_Emergency_Class7EM_InitEP7CO_EM_tP9CO_EMpr_tP8CO_SDO_tPhhS6_PmhP14CO_CANmodule_tmm+0x138>)
    e49e:	47a0      	blx	r4

    /* configure emergency message CAN transmission */
    emPr->CANdev = CANdev;
    e4a0:	687b      	ldr	r3, [r7, #4]
    e4a2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    e4a4:	615a      	str	r2, [r3, #20]
    emPr->CANdev->em = (void*)em; /* update pointer inside CAN device. */
    e4a6:	687b      	ldr	r3, [r7, #4]
    e4a8:	695b      	ldr	r3, [r3, #20]
    e4aa:	68ba      	ldr	r2, [r7, #8]
    e4ac:	621a      	str	r2, [r3, #32]
    emPr->CANtxBuff =canopen_driver->CAN_Tx_BufferInit(
    e4ae:	4b0c      	ldr	r3, [pc, #48]	; (e4e0 <_ZN18CO_Emergency_Class7EM_InitEP7CO_EM_tP9CO_EMpr_tP8CO_SDO_tPhhS6_PmhP14CO_CANmodule_tmm+0x140>)
    e4b0:	6818      	ldr	r0, [r3, #0]
    e4b2:	2300      	movs	r3, #0
    e4b4:	9301      	str	r3, [sp, #4]
    e4b6:	2308      	movs	r3, #8
    e4b8:	9300      	str	r3, [sp, #0]
    e4ba:	2300      	movs	r3, #0
    e4bc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    e4be:	6c39      	ldr	r1, [r7, #64]	; 0x40
    e4c0:	4c08      	ldr	r4, [pc, #32]	; (e4e4 <_ZN18CO_Emergency_Class7EM_InitEP7CO_EM_tP9CO_EMpr_tP8CO_SDO_tPhhS6_PmhP14CO_CANmodule_tmm+0x144>)
    e4c2:	47a0      	blx	r4
    e4c4:	4602      	mov	r2, r0
    e4c6:	687b      	ldr	r3, [r7, #4]
    e4c8:	619a      	str	r2, [r3, #24]
            CANidTxEM,          /* CAN identifier */
            0,                  /* rtr */
            8U,                  /* number of data bytes */
            0);                 /* synchronous message flag bit */

    return CO_ERROR_NO;
    e4ca:	2300      	movs	r3, #0
}
    e4cc:	4618      	mov	r0, r3
    e4ce:	371c      	adds	r7, #28
    e4d0:	46bd      	mov	sp, r7
    e4d2:	bd90      	pop	{r4, r7, pc}
    e4d4:	0000e2b9 	.word	0x0000e2b9
    e4d8:	00010c69 	.word	0x00010c69
    e4dc:	0000e345 	.word	0x0000e345
    e4e0:	20001abc 	.word	0x20001abc
    e4e4:	0000dba9 	.word	0x0000dba9

0000e4e8 <_ZN18CO_Emergency_Class10EM_processEP9CO_EMpr_thmm>:
void CO_Emergency_Class::EM_process(
        CO_EMpr_t              *emPr,
        bool_t                  NMTisPreOrOperational,
        uint32_t                timeDifference_100us,
        uint32_t                emInhTime)
{
    e4e8:	b590      	push	{r4, r7, lr}
    e4ea:	b08b      	sub	sp, #44	; 0x2c
    e4ec:	af02      	add	r7, sp, #8
    e4ee:	60f8      	str	r0, [r7, #12]
    e4f0:	60b9      	str	r1, [r7, #8]
    e4f2:	603b      	str	r3, [r7, #0]
    e4f4:	4613      	mov	r3, r2
    e4f6:	71fb      	strb	r3, [r7, #7]

    CO_EM_t *em = emPr->em;
    e4f8:	68bb      	ldr	r3, [r7, #8]
    e4fa:	691b      	ldr	r3, [r3, #16]
    e4fc:	61bb      	str	r3, [r7, #24]
    uint8_t errorRegister;

    /* verify errors from driver and other */
   canopen_driver->CAN_VerifyErrors();
    e4fe:	4b6e      	ldr	r3, [pc, #440]	; (e6b8 <_ZN18CO_Emergency_Class10EM_processEP9CO_EMpr_thmm+0x1d0>)
    e500:	681b      	ldr	r3, [r3, #0]
    e502:	4618      	mov	r0, r3
    e504:	4b6d      	ldr	r3, [pc, #436]	; (e6bc <_ZN18CO_Emergency_Class10EM_processEP9CO_EMpr_thmm+0x1d4>)
    e506:	4798      	blx	r3
    if(em->wrongErrorReport != 0U){
    e508:	69bb      	ldr	r3, [r7, #24]
    e50a:	f893 3065 	ldrb.w	r3, [r3, #101]	; 0x65
    e50e:	2b00      	cmp	r3, #0
    e510:	d00e      	beq.n	e530 <_ZN18CO_Emergency_Class10EM_processEP9CO_EMpr_thmm+0x48>
        EM_ErrorReport(em, CO_EM_WRONG_ERROR_REPORT, CO_EMC_SOFTWARE_INTERNAL, (uint32_t)em->wrongErrorReport);
    e512:	69bb      	ldr	r3, [r7, #24]
    e514:	f893 3065 	ldrb.w	r3, [r3, #101]	; 0x65
    e518:	9300      	str	r3, [sp, #0]
    e51a:	f44f 43c2 	mov.w	r3, #24832	; 0x6100
    e51e:	2228      	movs	r2, #40	; 0x28
    e520:	69b9      	ldr	r1, [r7, #24]
    e522:	68f8      	ldr	r0, [r7, #12]
    e524:	4c66      	ldr	r4, [pc, #408]	; (e6c0 <_ZN18CO_Emergency_Class10EM_processEP9CO_EMpr_thmm+0x1d8>)
    e526:	47a0      	blx	r4
        em->wrongErrorReport = 0U;
    e528:	69bb      	ldr	r3, [r7, #24]
    e52a:	2200      	movs	r2, #0
    e52c:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
    }


    /* calculate Error register */
    errorRegister = 0U;
    e530:	2300      	movs	r3, #0
    e532:	77fb      	strb	r3, [r7, #31]
    /* generic error */
    if(em->errorStatusBits[5]){
    e534:	69bb      	ldr	r3, [r7, #24]
    e536:	681b      	ldr	r3, [r3, #0]
    e538:	3305      	adds	r3, #5
    e53a:	781b      	ldrb	r3, [r3, #0]
    e53c:	2b00      	cmp	r3, #0
    e53e:	d003      	beq.n	e548 <_ZN18CO_Emergency_Class10EM_processEP9CO_EMpr_thmm+0x60>
        errorRegister |= CO_ERR_REG_GENERIC_ERR;
    e540:	7ffb      	ldrb	r3, [r7, #31]
    e542:	f043 0301 	orr.w	r3, r3, #1
    e546:	77fb      	strb	r3, [r7, #31]
    }
    /* communication error (overrun, error state) */
    if(em->errorStatusBits[2] || em->errorStatusBits[3]){
    e548:	69bb      	ldr	r3, [r7, #24]
    e54a:	681b      	ldr	r3, [r3, #0]
    e54c:	3302      	adds	r3, #2
    e54e:	781b      	ldrb	r3, [r3, #0]
    e550:	2b00      	cmp	r3, #0
      //  errorRegister |= CO_ERR_REG_COMM_ERR;
    }
    *emPr->errorRegister = (*emPr->errorRegister & 0xEEU) | errorRegister;
    e552:	68bb      	ldr	r3, [r7, #8]
    e554:	681b      	ldr	r3, [r3, #0]
    e556:	68ba      	ldr	r2, [r7, #8]
    e558:	6812      	ldr	r2, [r2, #0]
    e55a:	7812      	ldrb	r2, [r2, #0]
    e55c:	f022 0211 	bic.w	r2, r2, #17
    e560:	b2d1      	uxtb	r1, r2
    e562:	7ffa      	ldrb	r2, [r7, #31]
    e564:	430a      	orrs	r2, r1
    e566:	b2d2      	uxtb	r2, r2
    e568:	701a      	strb	r2, [r3, #0]

    /* inhibit time */
    if(emPr->inhibitEmTimer < emInhTime){
    e56a:	68bb      	ldr	r3, [r7, #8]
    e56c:	68da      	ldr	r2, [r3, #12]
    e56e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    e570:	429a      	cmp	r2, r3
    e572:	d205      	bcs.n	e580 <_ZN18CO_Emergency_Class10EM_processEP9CO_EMpr_thmm+0x98>
        emPr->inhibitEmTimer += timeDifference_100us;
    e574:	68bb      	ldr	r3, [r7, #8]
    e576:	68da      	ldr	r2, [r3, #12]
    e578:	683b      	ldr	r3, [r7, #0]
    e57a:	441a      	add	r2, r3
    e57c:	68bb      	ldr	r3, [r7, #8]
    e57e:	60da      	str	r2, [r3, #12]
    }

    /* send Emergency message. */
    if(     NMTisPreOrOperational &&
            !emPr->CANtxBuff->bufferFull &&
            emPr->inhibitEmTimer >= emInhTime &&
    e580:	79fb      	ldrb	r3, [r7, #7]
    e582:	2b00      	cmp	r3, #0
    e584:	d017      	beq.n	e5b6 <_ZN18CO_Emergency_Class10EM_processEP9CO_EMpr_thmm+0xce>
            !emPr->CANtxBuff->bufferFull &&
    e586:	68bb      	ldr	r3, [r7, #8]
    e588:	699b      	ldr	r3, [r3, #24]
    e58a:	7b5b      	ldrb	r3, [r3, #13]
    e58c:	b2db      	uxtb	r3, r3
    if(     NMTisPreOrOperational &&
    e58e:	2b00      	cmp	r3, #0
    e590:	d111      	bne.n	e5b6 <_ZN18CO_Emergency_Class10EM_processEP9CO_EMpr_thmm+0xce>
            emPr->inhibitEmTimer >= emInhTime &&
    e592:	68bb      	ldr	r3, [r7, #8]
    e594:	68da      	ldr	r2, [r3, #12]
            !emPr->CANtxBuff->bufferFull &&
    e596:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    e598:	429a      	cmp	r2, r3
    e59a:	d30c      	bcc.n	e5b6 <_ZN18CO_Emergency_Class10EM_processEP9CO_EMpr_thmm+0xce>
            (em->bufReadPtr != em->bufWritePtr || em->bufFull))
    e59c:	69bb      	ldr	r3, [r7, #24]
    e59e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
    e5a0:	69bb      	ldr	r3, [r7, #24]
    e5a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
            emPr->inhibitEmTimer >= emInhTime &&
    e5a4:	429a      	cmp	r2, r3
    e5a6:	d104      	bne.n	e5b2 <_ZN18CO_Emergency_Class10EM_processEP9CO_EMpr_thmm+0xca>
            (em->bufReadPtr != em->bufWritePtr || em->bufFull))
    e5a8:	69bb      	ldr	r3, [r7, #24]
    e5aa:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
    e5ae:	2b00      	cmp	r3, #0
    e5b0:	d001      	beq.n	e5b6 <_ZN18CO_Emergency_Class10EM_processEP9CO_EMpr_thmm+0xce>
            emPr->inhibitEmTimer >= emInhTime &&
    e5b2:	2301      	movs	r3, #1
    e5b4:	e000      	b.n	e5b8 <_ZN18CO_Emergency_Class10EM_processEP9CO_EMpr_thmm+0xd0>
    e5b6:	2300      	movs	r3, #0
    if(     NMTisPreOrOperational &&
    e5b8:	2b00      	cmp	r3, #0
    e5ba:	d079      	beq.n	e6b0 <_ZN18CO_Emergency_Class10EM_processEP9CO_EMpr_thmm+0x1c8>
    {
        uint32_t preDEF;    /* preDefinedErrorField */
        
        /* add error register */
        em->bufReadPtr[2] = *emPr->errorRegister;
    e5bc:	69bb      	ldr	r3, [r7, #24]
    e5be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    e5c0:	3302      	adds	r3, #2
    e5c2:	68ba      	ldr	r2, [r7, #8]
    e5c4:	6812      	ldr	r2, [r2, #0]
    e5c6:	7812      	ldrb	r2, [r2, #0]
    e5c8:	701a      	strb	r2, [r3, #0]

        /* copy data to CAN emergency message */
        CO_memcpy(emPr->CANtxBuff->data, em->bufReadPtr, 8U);
    e5ca:	68bb      	ldr	r3, [r7, #8]
    e5cc:	699b      	ldr	r3, [r3, #24]
    e5ce:	1d59      	adds	r1, r3, #5
    e5d0:	69bb      	ldr	r3, [r7, #24]
    e5d2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
    e5d4:	2308      	movs	r3, #8
    e5d6:	68f8      	ldr	r0, [r7, #12]
    e5d8:	4c3a      	ldr	r4, [pc, #232]	; (e6c4 <_ZN18CO_Emergency_Class10EM_processEP9CO_EMpr_thmm+0x1dc>)
    e5da:	47a0      	blx	r4
        CO_memcpy((uint8_t*)&preDEF, em->bufReadPtr, 4U);
    e5dc:	69bb      	ldr	r3, [r7, #24]
    e5de:	6e1a      	ldr	r2, [r3, #96]	; 0x60
    e5e0:	f107 0114 	add.w	r1, r7, #20
    e5e4:	2304      	movs	r3, #4
    e5e6:	68f8      	ldr	r0, [r7, #12]
    e5e8:	4c36      	ldr	r4, [pc, #216]	; (e6c4 <_ZN18CO_Emergency_Class10EM_processEP9CO_EMpr_thmm+0x1dc>)
    e5ea:	47a0      	blx	r4
        em->bufReadPtr += 8;
    e5ec:	69bb      	ldr	r3, [r7, #24]
    e5ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    e5f0:	f103 0208 	add.w	r2, r3, #8
    e5f4:	69bb      	ldr	r3, [r7, #24]
    e5f6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Update read buffer pointer and reset inhibit timer */
        if(em->bufReadPtr == em->bufEnd){
    e5f8:	69bb      	ldr	r3, [r7, #24]
    e5fa:	6e1a      	ldr	r2, [r3, #96]	; 0x60
    e5fc:	69bb      	ldr	r3, [r7, #24]
    e5fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    e600:	429a      	cmp	r2, r3
    e602:	d103      	bne.n	e60c <_ZN18CO_Emergency_Class10EM_processEP9CO_EMpr_thmm+0x124>
            em->bufReadPtr = em->buf;
    e604:	69bb      	ldr	r3, [r7, #24]
    e606:	1d5a      	adds	r2, r3, #5
    e608:	69bb      	ldr	r3, [r7, #24]
    e60a:	661a      	str	r2, [r3, #96]	; 0x60
        }
        emPr->inhibitEmTimer = 0U;
    e60c:	68bb      	ldr	r3, [r7, #8]
    e60e:	2200      	movs	r2, #0
    e610:	60da      	str	r2, [r3, #12]

        /* verify message buffer overflow, then clear full flag */
        if(em->bufFull == 2U){
    e612:	69bb      	ldr	r3, [r7, #24]
    e614:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
    e618:	2b02      	cmp	r3, #2
    e61a:	d10d      	bne.n	e638 <_ZN18CO_Emergency_Class10EM_processEP9CO_EMpr_thmm+0x150>
            em->bufFull = 0U;    /* will be updated below */
    e61c:	69bb      	ldr	r3, [r7, #24]
    e61e:	2200      	movs	r2, #0
    e620:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
            EM_ErrorReport(em, CO_EM_EMERGENCY_BUFFER_FULL, CO_EMC_GENERIC, 0U);
    e624:	2300      	movs	r3, #0
    e626:	9300      	str	r3, [sp, #0]
    e628:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    e62c:	2220      	movs	r2, #32
    e62e:	69b9      	ldr	r1, [r7, #24]
    e630:	68f8      	ldr	r0, [r7, #12]
    e632:	4c23      	ldr	r4, [pc, #140]	; (e6c0 <_ZN18CO_Emergency_Class10EM_processEP9CO_EMpr_thmm+0x1d8>)
    e634:	47a0      	blx	r4
    e636:	e003      	b.n	e640 <_ZN18CO_Emergency_Class10EM_processEP9CO_EMpr_thmm+0x158>
        }
        else{
            em->bufFull = 0;
    e638:	69bb      	ldr	r3, [r7, #24]
    e63a:	2200      	movs	r2, #0
    e63c:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
        }

        /* write to 'pre-defined error field' (object dictionary, index 0x1003) */
        if(emPr->preDefErr){
    e640:	68bb      	ldr	r3, [r7, #8]
    e642:	685b      	ldr	r3, [r3, #4]
    e644:	2b00      	cmp	r3, #0
    e646:	d02a      	beq.n	e69e <_ZN18CO_Emergency_Class10EM_processEP9CO_EMpr_thmm+0x1b6>
            uint8_t i;

            if(emPr->preDefErrNoOfErrors < emPr->preDefErrSize)
    e648:	68bb      	ldr	r3, [r7, #8]
    e64a:	7a5b      	ldrb	r3, [r3, #9]
    e64c:	461a      	mov	r2, r3
    e64e:	68bb      	ldr	r3, [r7, #8]
    e650:	7a1b      	ldrb	r3, [r3, #8]
    e652:	429a      	cmp	r2, r3
    e654:	da05      	bge.n	e662 <_ZN18CO_Emergency_Class10EM_processEP9CO_EMpr_thmm+0x17a>
                emPr->preDefErrNoOfErrors++;
    e656:	68bb      	ldr	r3, [r7, #8]
    e658:	7a5b      	ldrb	r3, [r3, #9]
    e65a:	3301      	adds	r3, #1
    e65c:	b2da      	uxtb	r2, r3
    e65e:	68bb      	ldr	r3, [r7, #8]
    e660:	725a      	strb	r2, [r3, #9]
            for(i=emPr->preDefErrNoOfErrors-1; i>0; i--)
    e662:	68bb      	ldr	r3, [r7, #8]
    e664:	7a5b      	ldrb	r3, [r3, #9]
    e666:	3b01      	subs	r3, #1
    e668:	77bb      	strb	r3, [r7, #30]
    e66a:	7fbb      	ldrb	r3, [r7, #30]
    e66c:	2b00      	cmp	r3, #0
    e66e:	dd12      	ble.n	e696 <_ZN18CO_Emergency_Class10EM_processEP9CO_EMpr_thmm+0x1ae>
                emPr->preDefErr[i] = emPr->preDefErr[i-1];
    e670:	68bb      	ldr	r3, [r7, #8]
    e672:	685a      	ldr	r2, [r3, #4]
    e674:	7fbb      	ldrb	r3, [r7, #30]
    e676:	009b      	lsls	r3, r3, #2
    e678:	441a      	add	r2, r3
    e67a:	68bb      	ldr	r3, [r7, #8]
    e67c:	6859      	ldr	r1, [r3, #4]
    e67e:	7fbb      	ldrb	r3, [r7, #30]
    e680:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    e684:	3b01      	subs	r3, #1
    e686:	009b      	lsls	r3, r3, #2
    e688:	440b      	add	r3, r1
    e68a:	681b      	ldr	r3, [r3, #0]
    e68c:	6013      	str	r3, [r2, #0]
            for(i=emPr->preDefErrNoOfErrors-1; i>0; i--)
    e68e:	7fbb      	ldrb	r3, [r7, #30]
    e690:	3b01      	subs	r3, #1
    e692:	77bb      	strb	r3, [r7, #30]
    e694:	e7e9      	b.n	e66a <_ZN18CO_Emergency_Class10EM_processEP9CO_EMpr_thmm+0x182>
            emPr->preDefErr[0] = preDEF;
    e696:	68bb      	ldr	r3, [r7, #8]
    e698:	685b      	ldr	r3, [r3, #4]
    e69a:	697a      	ldr	r2, [r7, #20]
    e69c:	601a      	str	r2, [r3, #0]
        }

        /* send CAN message */
        canopen_driver->CAN_Send(emPr->CANtxBuff);
    e69e:	4b06      	ldr	r3, [pc, #24]	; (e6b8 <_ZN18CO_Emergency_Class10EM_processEP9CO_EMpr_thmm+0x1d0>)
    e6a0:	681a      	ldr	r2, [r3, #0]
    e6a2:	68bb      	ldr	r3, [r7, #8]
    e6a4:	699b      	ldr	r3, [r3, #24]
    e6a6:	4619      	mov	r1, r3
    e6a8:	4610      	mov	r0, r2
    e6aa:	4b07      	ldr	r3, [pc, #28]	; (e6c8 <_ZN18CO_Emergency_Class10EM_processEP9CO_EMpr_thmm+0x1e0>)
    e6ac:	4798      	blx	r3
    }

    return;
    e6ae:	bf00      	nop
    e6b0:	bf00      	nop
}
    e6b2:	3724      	adds	r7, #36	; 0x24
    e6b4:	46bd      	mov	sp, r7
    e6b6:	bd90      	pop	{r4, r7, pc}
    e6b8:	20001abc 	.word	0x20001abc
    e6bc:	0000dead 	.word	0x0000dead
    e6c0:	0000e6cd 	.word	0x0000e6cd
    e6c4:	000107d9 	.word	0x000107d9
    e6c8:	0000dc55 	.word	0x0000dc55

0000e6cc <_ZN18CO_Emergency_Class14EM_ErrorReportEP7CO_EM_thmm>:


/******************************************************************************/
void CO_Emergency_Class::EM_ErrorReport(CO_EM_t *em, const uint8_t errorBit, const uint32_t errorCode, const uint32_t infoCode){
    e6cc:	b590      	push	{r4, r7, lr}
    e6ce:	b08d      	sub	sp, #52	; 0x34
    e6d0:	af00      	add	r7, sp, #0
    e6d2:	60f8      	str	r0, [r7, #12]
    e6d4:	60b9      	str	r1, [r7, #8]
    e6d6:	603b      	str	r3, [r7, #0]
    e6d8:	4613      	mov	r3, r2
    e6da:	71fb      	strb	r3, [r7, #7]
    uint8_t index = errorBit >> 3;
    e6dc:	79fb      	ldrb	r3, [r7, #7]
    e6de:	10db      	asrs	r3, r3, #3
    e6e0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    uint8_t bitmask = 1 << (errorBit & 0x7);
    e6e4:	79fb      	ldrb	r3, [r7, #7]
    e6e6:	f003 0307 	and.w	r3, r3, #7
    e6ea:	2201      	movs	r2, #1
    e6ec:	fa02 f303 	lsl.w	r3, r2, r3
    e6f0:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
    uint8_t *errorStatusBits = 0;
    e6f4:	2300      	movs	r3, #0
    e6f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    bool_t sendEmergency = true;
    e6f8:	2301      	movs	r3, #1
    e6fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

    if(em == NULL){
    e6fe:	68bb      	ldr	r3, [r7, #8]
    e700:	2b00      	cmp	r3, #0
    e702:	d103      	bne.n	e70c <_ZN18CO_Emergency_Class14EM_ErrorReportEP7CO_EM_thmm+0x40>
        sendEmergency = false;
    e704:	2300      	movs	r3, #0
    e706:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    e70a:	e01e      	b.n	e74a <_ZN18CO_Emergency_Class14EM_ErrorReportEP7CO_EM_thmm+0x7e>
    }
    else if(index >= em->errorStatusBitsSize){
    e70c:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
    e710:	68ba      	ldr	r2, [r7, #8]
    e712:	7912      	ldrb	r2, [r2, #4]
    e714:	4293      	cmp	r3, r2
    e716:	db07      	blt.n	e728 <_ZN18CO_Emergency_Class14EM_ErrorReportEP7CO_EM_thmm+0x5c>
        /* if errorBit value not supported, send emergency 'CO_EM_WRONG_ERROR_REPORT' */
        em->wrongErrorReport = errorBit;
    e718:	68bb      	ldr	r3, [r7, #8]
    e71a:	79fa      	ldrb	r2, [r7, #7]
    e71c:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
        sendEmergency = false;
    e720:	2300      	movs	r3, #0
    e722:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    e726:	e010      	b.n	e74a <_ZN18CO_Emergency_Class14EM_ErrorReportEP7CO_EM_thmm+0x7e>
    }
    else{
        errorStatusBits = &em->errorStatusBits[index];
    e728:	68bb      	ldr	r3, [r7, #8]
    e72a:	681a      	ldr	r2, [r3, #0]
    e72c:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
    e730:	4413      	add	r3, r2
    e732:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* if error was already reported, do nothing */
        if((*errorStatusBits & bitmask) != 0){
    e734:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    e736:	781a      	ldrb	r2, [r3, #0]
    e738:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
    e73c:	4013      	ands	r3, r2
    e73e:	b2db      	uxtb	r3, r3
    e740:	2b00      	cmp	r3, #0
    e742:	d002      	beq.n	e74a <_ZN18CO_Emergency_Class14EM_ErrorReportEP7CO_EM_thmm+0x7e>
            sendEmergency = false;
    e744:	2300      	movs	r3, #0
    e746:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        }
    }

    if(sendEmergency){
    e74a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
    e74e:	2b00      	cmp	r3, #0
    e750:	d05c      	beq.n	e80c <_ZN18CO_Emergency_Class14EM_ErrorReportEP7CO_EM_thmm+0x140>
        /* set error bit */
        if(errorBit){
    e752:	79fb      	ldrb	r3, [r7, #7]
    e754:	2b00      	cmp	r3, #0
    e756:	d007      	beq.n	e768 <_ZN18CO_Emergency_Class14EM_ErrorReportEP7CO_EM_thmm+0x9c>
            /* any error except NO_ERROR */
            *errorStatusBits |= bitmask;
    e758:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    e75a:	781a      	ldrb	r2, [r3, #0]
    e75c:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
    e760:	4313      	orrs	r3, r2
    e762:	b2da      	uxtb	r2, r3
    e764:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    e766:	701a      	strb	r2, [r3, #0]
        }

        /* verify buffer full, set overflow */
        if(em->bufFull){
    e768:	68bb      	ldr	r3, [r7, #8]
    e76a:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
    e76e:	2b00      	cmp	r3, #0
    e770:	d004      	beq.n	e77c <_ZN18CO_Emergency_Class14EM_ErrorReportEP7CO_EM_thmm+0xb0>
            em->bufFull = 2;
    e772:	68bb      	ldr	r3, [r7, #8]
    e774:	2202      	movs	r2, #2
    e776:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
            if(em->handler != NULL) {
                em->handler();
            }
        }
    }
}
    e77a:	e047      	b.n	e80c <_ZN18CO_Emergency_Class14EM_ErrorReportEP7CO_EM_thmm+0x140>
            CO_memcpySwap2(&bufCopy[0], &errorCode);
    e77c:	463a      	mov	r2, r7
    e77e:	f107 0318 	add.w	r3, r7, #24
    e782:	4619      	mov	r1, r3
    e784:	68f8      	ldr	r0, [r7, #12]
    e786:	4b23      	ldr	r3, [pc, #140]	; (e814 <_ZN18CO_Emergency_Class14EM_ErrorReportEP7CO_EM_thmm+0x148>)
    e788:	4798      	blx	r3
            bufCopy[2] = 0; /* error register will be set later */
    e78a:	2300      	movs	r3, #0
    e78c:	76bb      	strb	r3, [r7, #26]
            bufCopy[3] = errorBit;
    e78e:	79fb      	ldrb	r3, [r7, #7]
    e790:	76fb      	strb	r3, [r7, #27]
            CO_memcpySwap4(&bufCopy[4], &infoCode);
    e792:	f107 0318 	add.w	r3, r7, #24
    e796:	3304      	adds	r3, #4
    e798:	f107 0240 	add.w	r2, r7, #64	; 0x40
    e79c:	4619      	mov	r1, r3
    e79e:	68f8      	ldr	r0, [r7, #12]
    e7a0:	4b1d      	ldr	r3, [pc, #116]	; (e818 <_ZN18CO_Emergency_Class14EM_ErrorReportEP7CO_EM_thmm+0x14c>)
    e7a2:	4798      	blx	r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    e7a4:	f3ef 8310 	mrs	r3, PRIMASK
    e7a8:	617b      	str	r3, [r7, #20]
  return(result);
    e7aa:	697b      	ldr	r3, [r7, #20]
            CO_LOCK_EMCY();
    e7ac:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
    e7ae:	b672      	cpsid	i
            CO_memcpy(em->bufWritePtr, &bufCopy[0], 8);
    e7b0:	68bb      	ldr	r3, [r7, #8]
    e7b2:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
    e7b4:	f107 0218 	add.w	r2, r7, #24
    e7b8:	2308      	movs	r3, #8
    e7ba:	68f8      	ldr	r0, [r7, #12]
    e7bc:	4c17      	ldr	r4, [pc, #92]	; (e81c <_ZN18CO_Emergency_Class14EM_ErrorReportEP7CO_EM_thmm+0x150>)
    e7be:	47a0      	blx	r4
            em->bufWritePtr += 8;
    e7c0:	68bb      	ldr	r3, [r7, #8]
    e7c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
    e7c4:	f103 0208 	add.w	r2, r3, #8
    e7c8:	68bb      	ldr	r3, [r7, #8]
    e7ca:	65da      	str	r2, [r3, #92]	; 0x5c
            if(em->bufWritePtr == em->bufEnd) em->bufWritePtr = em->buf;
    e7cc:	68bb      	ldr	r3, [r7, #8]
    e7ce:	6dda      	ldr	r2, [r3, #92]	; 0x5c
    e7d0:	68bb      	ldr	r3, [r7, #8]
    e7d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    e7d4:	429a      	cmp	r2, r3
    e7d6:	d103      	bne.n	e7e0 <_ZN18CO_Emergency_Class14EM_ErrorReportEP7CO_EM_thmm+0x114>
    e7d8:	68bb      	ldr	r3, [r7, #8]
    e7da:	1d5a      	adds	r2, r3, #5
    e7dc:	68bb      	ldr	r3, [r7, #8]
    e7de:	65da      	str	r2, [r3, #92]	; 0x5c
            if(em->bufWritePtr == em->bufReadPtr) em->bufFull = 1;
    e7e0:	68bb      	ldr	r3, [r7, #8]
    e7e2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
    e7e4:	68bb      	ldr	r3, [r7, #8]
    e7e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    e7e8:	429a      	cmp	r2, r3
    e7ea:	d103      	bne.n	e7f4 <_ZN18CO_Emergency_Class14EM_ErrorReportEP7CO_EM_thmm+0x128>
    e7ec:	68bb      	ldr	r3, [r7, #8]
    e7ee:	2201      	movs	r2, #1
    e7f0:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
    e7f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    e7f6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    e7f8:	6a3b      	ldr	r3, [r7, #32]
    e7fa:	f383 8810 	msr	PRIMASK, r3
            if(em->handler != NULL) {
    e7fe:	68bb      	ldr	r3, [r7, #8]
    e800:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    e802:	2b00      	cmp	r3, #0
    e804:	d002      	beq.n	e80c <_ZN18CO_Emergency_Class14EM_ErrorReportEP7CO_EM_thmm+0x140>
                em->handler();
    e806:	68bb      	ldr	r3, [r7, #8]
    e808:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    e80a:	4798      	blx	r3
}
    e80c:	bf00      	nop
    e80e:	3734      	adds	r7, #52	; 0x34
    e810:	46bd      	mov	sp, r7
    e812:	bd90      	pop	{r4, r7, pc}
    e814:	00010881 	.word	0x00010881
    e818:	000108b1 	.word	0x000108b1
    e81c:	000107d9 	.word	0x000107d9

0000e820 <_ZN18CO_Emergency_Class13EM_ErrorResetEP7CO_EM_thm>:


/******************************************************************************/
void CO_Emergency_Class::EM_ErrorReset(CO_EM_t *em, const uint8_t errorBit, const uint32_t infoCode){
    e820:	b590      	push	{r4, r7, lr}
    e822:	b08d      	sub	sp, #52	; 0x34
    e824:	af00      	add	r7, sp, #0
    e826:	60f8      	str	r0, [r7, #12]
    e828:	60b9      	str	r1, [r7, #8]
    e82a:	603b      	str	r3, [r7, #0]
    e82c:	4613      	mov	r3, r2
    e82e:	71fb      	strb	r3, [r7, #7]
    uint8_t index = errorBit >> 3;
    e830:	79fb      	ldrb	r3, [r7, #7]
    e832:	10db      	asrs	r3, r3, #3
    e834:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    uint8_t bitmask = 1 << (errorBit & 0x7);
    e838:	79fb      	ldrb	r3, [r7, #7]
    e83a:	f003 0307 	and.w	r3, r3, #7
    e83e:	2201      	movs	r2, #1
    e840:	fa02 f303 	lsl.w	r3, r2, r3
    e844:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
    uint8_t *errorStatusBits = 0;
    e848:	2300      	movs	r3, #0
    e84a:	62fb      	str	r3, [r7, #44]	; 0x2c
    bool_t sendEmergency = true;
    e84c:	2301      	movs	r3, #1
    e84e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

    if(em == NULL){
    e852:	68bb      	ldr	r3, [r7, #8]
    e854:	2b00      	cmp	r3, #0
    e856:	d103      	bne.n	e860 <_ZN18CO_Emergency_Class13EM_ErrorResetEP7CO_EM_thm+0x40>
        sendEmergency = false;
    e858:	2300      	movs	r3, #0
    e85a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    e85e:	e01e      	b.n	e89e <_ZN18CO_Emergency_Class13EM_ErrorResetEP7CO_EM_thm+0x7e>
    }
    else if(index >= em->errorStatusBitsSize){
    e860:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
    e864:	68ba      	ldr	r2, [r7, #8]
    e866:	7912      	ldrb	r2, [r2, #4]
    e868:	4293      	cmp	r3, r2
    e86a:	db07      	blt.n	e87c <_ZN18CO_Emergency_Class13EM_ErrorResetEP7CO_EM_thm+0x5c>
        /* if errorBit value not supported, send emergency 'CO_EM_WRONG_ERROR_REPORT' */
        em->wrongErrorReport = errorBit;
    e86c:	68bb      	ldr	r3, [r7, #8]
    e86e:	79fa      	ldrb	r2, [r7, #7]
    e870:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
        sendEmergency = false;
    e874:	2300      	movs	r3, #0
    e876:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    e87a:	e010      	b.n	e89e <_ZN18CO_Emergency_Class13EM_ErrorResetEP7CO_EM_thm+0x7e>
    }
    else{
        errorStatusBits = &em->errorStatusBits[index];
    e87c:	68bb      	ldr	r3, [r7, #8]
    e87e:	681a      	ldr	r2, [r3, #0]
    e880:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
    e884:	4413      	add	r3, r2
    e886:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* if error was allready cleared, do nothing */
        if((*errorStatusBits & bitmask) == 0){
    e888:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    e88a:	781a      	ldrb	r2, [r3, #0]
    e88c:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
    e890:	4013      	ands	r3, r2
    e892:	b2db      	uxtb	r3, r3
    e894:	2b00      	cmp	r3, #0
    e896:	d102      	bne.n	e89e <_ZN18CO_Emergency_Class13EM_ErrorResetEP7CO_EM_thm+0x7e>
            sendEmergency = false;
    e898:	2300      	movs	r3, #0
    e89a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        }
    }

    if(sendEmergency){
    e89e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
    e8a2:	2b00      	cmp	r3, #0
    e8a4:	d059      	beq.n	e95a <_ZN18CO_Emergency_Class13EM_ErrorResetEP7CO_EM_thm+0x13a>
        /* erase error bit */
        *errorStatusBits &= ~bitmask;
    e8a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    e8a8:	781b      	ldrb	r3, [r3, #0]
    e8aa:	b25a      	sxtb	r2, r3
    e8ac:	f997 3029 	ldrsb.w	r3, [r7, #41]	; 0x29
    e8b0:	43db      	mvns	r3, r3
    e8b2:	b25b      	sxtb	r3, r3
    e8b4:	4013      	ands	r3, r2
    e8b6:	b25b      	sxtb	r3, r3
    e8b8:	b2da      	uxtb	r2, r3
    e8ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    e8bc:	701a      	strb	r2, [r3, #0]

        /* verify buffer full */
        if(em->bufFull){
    e8be:	68bb      	ldr	r3, [r7, #8]
    e8c0:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
    e8c4:	2b00      	cmp	r3, #0
    e8c6:	d004      	beq.n	e8d2 <_ZN18CO_Emergency_Class13EM_ErrorResetEP7CO_EM_thm+0xb2>
            em->bufFull = 2;
    e8c8:	68bb      	ldr	r3, [r7, #8]
    e8ca:	2202      	movs	r2, #2
    e8cc:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
            if(em->handler != NULL) {
                em->handler();
            }
        }
    }
}
    e8d0:	e043      	b.n	e95a <_ZN18CO_Emergency_Class13EM_ErrorResetEP7CO_EM_thm+0x13a>
            bufCopy[0] = 0;
    e8d2:	2300      	movs	r3, #0
    e8d4:	763b      	strb	r3, [r7, #24]
            bufCopy[1] = 0;
    e8d6:	2300      	movs	r3, #0
    e8d8:	767b      	strb	r3, [r7, #25]
            bufCopy[2] = 0; /* error register will be set later */
    e8da:	2300      	movs	r3, #0
    e8dc:	76bb      	strb	r3, [r7, #26]
            bufCopy[3] = errorBit;
    e8de:	79fb      	ldrb	r3, [r7, #7]
    e8e0:	76fb      	strb	r3, [r7, #27]
            CO_memcpySwap4(&bufCopy[4], &infoCode);
    e8e2:	463a      	mov	r2, r7
    e8e4:	f107 0318 	add.w	r3, r7, #24
    e8e8:	3304      	adds	r3, #4
    e8ea:	4619      	mov	r1, r3
    e8ec:	68f8      	ldr	r0, [r7, #12]
    e8ee:	4b1d      	ldr	r3, [pc, #116]	; (e964 <_ZN18CO_Emergency_Class13EM_ErrorResetEP7CO_EM_thm+0x144>)
    e8f0:	4798      	blx	r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    e8f2:	f3ef 8310 	mrs	r3, PRIMASK
    e8f6:	617b      	str	r3, [r7, #20]
  return(result);
    e8f8:	697b      	ldr	r3, [r7, #20]
            CO_LOCK_EMCY();
    e8fa:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
    e8fc:	b672      	cpsid	i
            CO_memcpy(em->bufWritePtr, &bufCopy[0], 8);
    e8fe:	68bb      	ldr	r3, [r7, #8]
    e900:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
    e902:	f107 0218 	add.w	r2, r7, #24
    e906:	2308      	movs	r3, #8
    e908:	68f8      	ldr	r0, [r7, #12]
    e90a:	4c17      	ldr	r4, [pc, #92]	; (e968 <_ZN18CO_Emergency_Class13EM_ErrorResetEP7CO_EM_thm+0x148>)
    e90c:	47a0      	blx	r4
            em->bufWritePtr += 8;
    e90e:	68bb      	ldr	r3, [r7, #8]
    e910:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
    e912:	f103 0208 	add.w	r2, r3, #8
    e916:	68bb      	ldr	r3, [r7, #8]
    e918:	65da      	str	r2, [r3, #92]	; 0x5c
            if(em->bufWritePtr == em->bufEnd) em->bufWritePtr = em->buf;
    e91a:	68bb      	ldr	r3, [r7, #8]
    e91c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
    e91e:	68bb      	ldr	r3, [r7, #8]
    e920:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    e922:	429a      	cmp	r2, r3
    e924:	d103      	bne.n	e92e <_ZN18CO_Emergency_Class13EM_ErrorResetEP7CO_EM_thm+0x10e>
    e926:	68bb      	ldr	r3, [r7, #8]
    e928:	1d5a      	adds	r2, r3, #5
    e92a:	68bb      	ldr	r3, [r7, #8]
    e92c:	65da      	str	r2, [r3, #92]	; 0x5c
            if(em->bufWritePtr == em->bufReadPtr) em->bufFull = 1;
    e92e:	68bb      	ldr	r3, [r7, #8]
    e930:	6dda      	ldr	r2, [r3, #92]	; 0x5c
    e932:	68bb      	ldr	r3, [r7, #8]
    e934:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    e936:	429a      	cmp	r2, r3
    e938:	d103      	bne.n	e942 <_ZN18CO_Emergency_Class13EM_ErrorResetEP7CO_EM_thm+0x122>
    e93a:	68bb      	ldr	r3, [r7, #8]
    e93c:	2201      	movs	r2, #1
    e93e:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
    e942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    e944:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    e946:	6a3b      	ldr	r3, [r7, #32]
    e948:	f383 8810 	msr	PRIMASK, r3
            if(em->handler != NULL) {
    e94c:	68bb      	ldr	r3, [r7, #8]
    e94e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    e950:	2b00      	cmp	r3, #0
    e952:	d002      	beq.n	e95a <_ZN18CO_Emergency_Class13EM_ErrorResetEP7CO_EM_thm+0x13a>
                em->handler();
    e954:	68bb      	ldr	r3, [r7, #8]
    e956:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    e958:	4798      	blx	r3
}
    e95a:	bf00      	nop
    e95c:	3734      	adds	r7, #52	; 0x34
    e95e:	46bd      	mov	sp, r7
    e960:	bd90      	pop	{r4, r7, pc}
    e962:	bf00      	nop
    e964:	000108b1 	.word	0x000108b1
    e968:	000107d9 	.word	0x000107d9

0000e96c <_ZN18CO_Emergency_Class10EM_IsErrorEP7CO_EM_th>:


/******************************************************************************/
bool_t CO_Emergency_Class::EM_IsError(CO_EM_t *em, const uint8_t errorBit){
    e96c:	b480      	push	{r7}
    e96e:	b087      	sub	sp, #28
    e970:	af00      	add	r7, sp, #0
    e972:	60f8      	str	r0, [r7, #12]
    e974:	60b9      	str	r1, [r7, #8]
    e976:	4613      	mov	r3, r2
    e978:	71fb      	strb	r3, [r7, #7]
    uint8_t index = errorBit >> 3;
    e97a:	79fb      	ldrb	r3, [r7, #7]
    e97c:	10db      	asrs	r3, r3, #3
    e97e:	75bb      	strb	r3, [r7, #22]
    uint8_t bitmask = 1 << (errorBit & 0x7);
    e980:	79fb      	ldrb	r3, [r7, #7]
    e982:	f003 0307 	and.w	r3, r3, #7
    e986:	2201      	movs	r2, #1
    e988:	fa02 f303 	lsl.w	r3, r2, r3
    e98c:	757b      	strb	r3, [r7, #21]
    bool_t ret = false;
    e98e:	2300      	movs	r3, #0
    e990:	75fb      	strb	r3, [r7, #23]

    if(em != NULL && index < em->errorStatusBitsSize){
    e992:	68bb      	ldr	r3, [r7, #8]
    e994:	2b00      	cmp	r3, #0
    e996:	d010      	beq.n	e9ba <_ZN18CO_Emergency_Class10EM_IsErrorEP7CO_EM_th+0x4e>
    e998:	7dbb      	ldrb	r3, [r7, #22]
    e99a:	68ba      	ldr	r2, [r7, #8]
    e99c:	7912      	ldrb	r2, [r2, #4]
    e99e:	4293      	cmp	r3, r2
    e9a0:	da0b      	bge.n	e9ba <_ZN18CO_Emergency_Class10EM_IsErrorEP7CO_EM_th+0x4e>
        if((em->errorStatusBits[index] & bitmask) != 0){
    e9a2:	68bb      	ldr	r3, [r7, #8]
    e9a4:	681a      	ldr	r2, [r3, #0]
    e9a6:	7dbb      	ldrb	r3, [r7, #22]
    e9a8:	4413      	add	r3, r2
    e9aa:	781a      	ldrb	r2, [r3, #0]
    e9ac:	7d7b      	ldrb	r3, [r7, #21]
    e9ae:	4013      	ands	r3, r2
    e9b0:	b2db      	uxtb	r3, r3
    e9b2:	2b00      	cmp	r3, #0
    e9b4:	d001      	beq.n	e9ba <_ZN18CO_Emergency_Class10EM_IsErrorEP7CO_EM_th+0x4e>
            ret = true;
    e9b6:	2301      	movs	r3, #1
    e9b8:	75fb      	strb	r3, [r7, #23]
        }
    }

    return ret;
    e9ba:	7dfb      	ldrb	r3, [r7, #23]
    e9bc:	4618      	mov	r0, r3
    e9be:	371c      	adds	r7, #28
    e9c0:	46bd      	mov	sp, r7
    e9c2:	bc80      	pop	{r7}
    e9c4:	4770      	bx	lr

0000e9c6 <_ZL17CO_HBcons_receivePvPK13CO_CANrxMsg_t>:
#include "CO_Emergency_Class.h"

CO_HB_Consumer_Class	*ptrHBConsumerClass;
CO_HBconsNode_t         *ptrMonitoredNodes;

static void CO_HBcons_receive(void *object,const CO_CANrxMsg_t *msg){
    e9c6:	b480      	push	{r7}
    e9c8:	b085      	sub	sp, #20
    e9ca:	af00      	add	r7, sp, #0
    e9cc:	6078      	str	r0, [r7, #4]
    e9ce:	6039      	str	r1, [r7, #0]
	CO_HBconsNode_t *HBconsNode;

	HBconsNode = (CO_HBconsNode_t*) object; /* this is the correct pointer type of the first argument */
    e9d0:	687b      	ldr	r3, [r7, #4]
    e9d2:	60fb      	str	r3, [r7, #12]

	/* verify message length */
	if(msg->DLC == 1){
    e9d4:	683b      	ldr	r3, [r7, #0]
    e9d6:	7d1b      	ldrb	r3, [r3, #20]
    e9d8:	2b01      	cmp	r3, #1
    e9da:	d106      	bne.n	e9ea <_ZL17CO_HBcons_receivePvPK13CO_CANrxMsg_t+0x24>
		/* copy data and set 'new message' flag. */
		HBconsNode->NMTstate = msg->data[0];
    e9dc:	683b      	ldr	r3, [r7, #0]
    e9de:	7d5a      	ldrb	r2, [r3, #21]
    e9e0:	68fb      	ldr	r3, [r7, #12]
    e9e2:	701a      	strb	r2, [r3, #0]
		HBconsNode->CANrxNew = true;
    e9e4:	68fb      	ldr	r3, [r7, #12]
    e9e6:	2201      	movs	r2, #1
    e9e8:	731a      	strb	r2, [r3, #12]
	}
	
	
}
    e9ea:	bf00      	nop
    e9ec:	3714      	adds	r7, #20
    e9ee:	46bd      	mov	sp, r7
    e9f0:	bc80      	pop	{r7}
    e9f2:	4770      	bx	lr

0000e9f4 <_ZL29CO_HBcons_monitoredNodeConfigP15CO_HBconsumer_thm>:
static void CO_HBcons_monitoredNodeConfig(
CO_HBconsumer_t        *HBcons,
uint8_t                 idx,
uint32_t                HBconsTime)
{
    e9f4:	b590      	push	{r4, r7, lr}
    e9f6:	b08d      	sub	sp, #52	; 0x34
    e9f8:	af04      	add	r7, sp, #16
    e9fa:	60f8      	str	r0, [r7, #12]
    e9fc:	460b      	mov	r3, r1
    e9fe:	607a      	str	r2, [r7, #4]
    ea00:	72fb      	strb	r3, [r7, #11]
	uint32_t COB_ID;
	uint32_t NodeID;
	CO_HBconsNode_t *monitoredNode;

	if(idx >= HBcons->numberOfMonitoredNodes) return;
    ea02:	7afb      	ldrb	r3, [r7, #11]
    ea04:	461a      	mov	r2, r3
    ea06:	68fb      	ldr	r3, [r7, #12]
    ea08:	7b1b      	ldrb	r3, [r3, #12]
    ea0a:	429a      	cmp	r2, r3
    ea0c:	da37      	bge.n	ea7e <_ZL29CO_HBcons_monitoredNodeConfigP15CO_HBconsumer_thm+0x8a>

//	NodeID = (uint32_t)((HBconsTime>>16)&0xFF);
	NodeID = (uint32_t)(idx);
    ea0e:	7afb      	ldrb	r3, [r7, #11]
    ea10:	61bb      	str	r3, [r7, #24]
	monitoredNode = &HBcons->monitoredNodes[idx];
    ea12:	68fb      	ldr	r3, [r7, #12]
    ea14:	689a      	ldr	r2, [r3, #8]
    ea16:	7afb      	ldrb	r3, [r7, #11]
    ea18:	011b      	lsls	r3, r3, #4
    ea1a:	4413      	add	r3, r2
    ea1c:	617b      	str	r3, [r7, #20]
	monitoredNode->time = (uint32_t)HBconsTime;
    ea1e:	697b      	ldr	r3, [r7, #20]
    ea20:	687a      	ldr	r2, [r7, #4]
    ea22:	609a      	str	r2, [r3, #8]
	monitoredNode->NMTstate = 0;
    ea24:	697b      	ldr	r3, [r7, #20]
    ea26:	2200      	movs	r2, #0
    ea28:	701a      	strb	r2, [r3, #0]
	monitoredNode->monStarted = false;
    ea2a:	697b      	ldr	r3, [r7, #20]
    ea2c:	2200      	movs	r2, #0
    ea2e:	705a      	strb	r2, [r3, #1]
//	COB_ID = (uint32_t)idx + 0x700;
	// 	/* is channel used */
	if(NodeID && monitoredNode->time){
    ea30:	69bb      	ldr	r3, [r7, #24]
    ea32:	2b00      	cmp	r3, #0
    ea34:	d008      	beq.n	ea48 <_ZL29CO_HBcons_monitoredNodeConfigP15CO_HBconsumer_thm+0x54>
    ea36:	697b      	ldr	r3, [r7, #20]
    ea38:	689b      	ldr	r3, [r3, #8]
    ea3a:	2b00      	cmp	r3, #0
    ea3c:	d004      	beq.n	ea48 <_ZL29CO_HBcons_monitoredNodeConfigP15CO_HBconsumer_thm+0x54>
		COB_ID = NodeID + 0x700;
    ea3e:	69bb      	ldr	r3, [r7, #24]
    ea40:	f503 63e0 	add.w	r3, r3, #1792	; 0x700
    ea44:	61fb      	str	r3, [r7, #28]
    ea46:	e004      	b.n	ea52 <_ZL29CO_HBcons_monitoredNodeConfigP15CO_HBconsumer_thm+0x5e>
	}
	else{
		COB_ID = 0;
    ea48:	2300      	movs	r3, #0
    ea4a:	61fb      	str	r3, [r7, #28]
		monitoredNode->time = 0;
    ea4c:	697b      	ldr	r3, [r7, #20]
    ea4e:	2200      	movs	r2, #0
    ea50:	609a      	str	r2, [r3, #8]
	}

	/* configure Heartbeat consumer CAN reception */
	canopen_driver->CAN_Rx_BufferInit(
    ea52:	4b0d      	ldr	r3, [pc, #52]	; (ea88 <_ZL29CO_HBcons_monitoredNodeConfigP15CO_HBconsumer_thm+0x94>)
    ea54:	6818      	ldr	r0, [r3, #0]
	HBcons->CANdevRxIdxStart + idx,
    ea56:	68fb      	ldr	r3, [r7, #12]
    ea58:	695b      	ldr	r3, [r3, #20]
	canopen_driver->CAN_Rx_BufferInit(
    ea5a:	7afa      	ldrb	r2, [r7, #11]
    ea5c:	1899      	adds	r1, r3, r2
	COB_ID,
	0x7FF,
	0,
	(void*)&HBcons->monitoredNodes[idx],
    ea5e:	68fb      	ldr	r3, [r7, #12]
    ea60:	689a      	ldr	r2, [r3, #8]
    ea62:	7afb      	ldrb	r3, [r7, #11]
    ea64:	011b      	lsls	r3, r3, #4
    ea66:	4413      	add	r3, r2
	CO_HBcons_receive);
    ea68:	4a08      	ldr	r2, [pc, #32]	; (ea8c <_ZL29CO_HBcons_monitoredNodeConfigP15CO_HBconsumer_thm+0x98>)
    ea6a:	9202      	str	r2, [sp, #8]
    ea6c:	9301      	str	r3, [sp, #4]
    ea6e:	2300      	movs	r3, #0
    ea70:	9300      	str	r3, [sp, #0]
    ea72:	f240 73ff 	movw	r3, #2047	; 0x7ff
    ea76:	69fa      	ldr	r2, [r7, #28]
    ea78:	4c05      	ldr	r4, [pc, #20]	; (ea90 <_ZL29CO_HBcons_monitoredNodeConfigP15CO_HBconsumer_thm+0x9c>)
    ea7a:	47a0      	blx	r4
    ea7c:	e000      	b.n	ea80 <_ZL29CO_HBcons_monitoredNodeConfigP15CO_HBconsumer_thm+0x8c>
	if(idx >= HBcons->numberOfMonitoredNodes) return;
    ea7e:	bf00      	nop
}
    ea80:	3724      	adds	r7, #36	; 0x24
    ea82:	46bd      	mov	sp, r7
    ea84:	bd90      	pop	{r4, r7, pc}
    ea86:	bf00      	nop
    ea88:	20001abc 	.word	0x20001abc
    ea8c:	0000e9c7 	.word	0x0000e9c7
    ea90:	0000daa9 	.word	0x0000daa9

0000ea94 <_ZL11CO_ODF_1016P12CO_ODF_arg_t>:
static CO_SDO_abortCode_t CO_ODF_1016(CO_ODF_arg_t *ODF_arg){
    ea94:	b580      	push	{r7, lr}
    ea96:	b08c      	sub	sp, #48	; 0x30
    ea98:	af00      	add	r7, sp, #0
    ea9a:	6078      	str	r0, [r7, #4]
	CO_HBconsumer_t *HBcons;
	uint32_t value;
	CO_SDO_abortCode_t ret = CO_SDO_AB_NONE;
    ea9c:	2300      	movs	r3, #0
    ea9e:	62fb      	str	r3, [r7, #44]	; 0x2c

	HBcons = (CO_HBconsumer_t*) ODF_arg->object;
    eaa0:	687b      	ldr	r3, [r7, #4]
    eaa2:	681b      	ldr	r3, [r3, #0]
    eaa4:	627b      	str	r3, [r7, #36]	; 0x24
	value =canopen_driver->CO_getUint32(ODF_arg->data);
    eaa6:	4b32      	ldr	r3, [pc, #200]	; (eb70 <_ZL11CO_ODF_1016P12CO_ODF_arg_t+0xdc>)
    eaa8:	681b      	ldr	r3, [r3, #0]
    eaaa:	1d1a      	adds	r2, r3, #4
    eaac:	687b      	ldr	r3, [r7, #4]
    eaae:	685b      	ldr	r3, [r3, #4]
    eab0:	4619      	mov	r1, r3
    eab2:	4610      	mov	r0, r2
    eab4:	4b2f      	ldr	r3, [pc, #188]	; (eb74 <_ZL11CO_ODF_1016P12CO_ODF_arg_t+0xe0>)
    eab6:	4798      	blx	r3
    eab8:	6238      	str	r0, [r7, #32]

	if(!ODF_arg->reading){
    eaba:	687b      	ldr	r3, [r7, #4]
    eabc:	7f5b      	ldrb	r3, [r3, #29]
    eabe:	2b00      	cmp	r3, #0
    eac0:	d150      	bne.n	eb64 <_ZL11CO_ODF_1016P12CO_ODF_arg_t+0xd0>
		uint8_t NodeID;
		uint32_t HBconsTime;

		NodeID = (value >> 16U) & 0xFFU;
    eac2:	6a3b      	ldr	r3, [r7, #32]
    eac4:	0c1b      	lsrs	r3, r3, #16
    eac6:	77fb      	strb	r3, [r7, #31]
		HBconsTime = value & 0xFFFFU;
    eac8:	6a3b      	ldr	r3, [r7, #32]
    eaca:	b29b      	uxth	r3, r3
    eacc:	61bb      	str	r3, [r7, #24]

		if((value & 0xFF800000U) != 0){
    eace:	6a3b      	ldr	r3, [r7, #32]
    ead0:	0ddb      	lsrs	r3, r3, #23
    ead2:	05db      	lsls	r3, r3, #23
    ead4:	2b00      	cmp	r3, #0
    ead6:	d002      	beq.n	eade <_ZL11CO_ODF_1016P12CO_ODF_arg_t+0x4a>
			ret = CO_SDO_AB_PRAM_INCOMPAT;
    ead8:	4b27      	ldr	r3, [pc, #156]	; (eb78 <_ZL11CO_ODF_1016P12CO_ODF_arg_t+0xe4>)
    eada:	62fb      	str	r3, [r7, #44]	; 0x2c
    eadc:	e036      	b.n	eb4c <_ZL11CO_ODF_1016P12CO_ODF_arg_t+0xb8>
		}
		else if((HBconsTime != 0) && (NodeID != 0)){
    eade:	69bb      	ldr	r3, [r7, #24]
    eae0:	2b00      	cmp	r3, #0
    eae2:	d02f      	beq.n	eb44 <_ZL11CO_ODF_1016P12CO_ODF_arg_t+0xb0>
    eae4:	7ffb      	ldrb	r3, [r7, #31]
    eae6:	2b00      	cmp	r3, #0
    eae8:	d02c      	beq.n	eb44 <_ZL11CO_ODF_1016P12CO_ODF_arg_t+0xb0>
			uint8_t i;
			/* there must not be more entries with same index and time different than zero */
			for(i = 0U; i<HBcons->numberOfMonitoredNodes; i++){
    eaea:	2300      	movs	r3, #0
    eaec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    eaf0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
    eaf4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    eaf6:	7b12      	ldrb	r2, [r2, #12]
    eaf8:	4293      	cmp	r3, r2
    eafa:	da26      	bge.n	eb4a <_ZL11CO_ODF_1016P12CO_ODF_arg_t+0xb6>
				uint32_t objectCopy = HBcons->HBconsTime[i];
    eafc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    eafe:	685a      	ldr	r2, [r3, #4]
    eb00:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
    eb04:	009b      	lsls	r3, r3, #2
    eb06:	4413      	add	r3, r2
    eb08:	681b      	ldr	r3, [r3, #0]
    eb0a:	617b      	str	r3, [r7, #20]
				uint8_t NodeIDObj = (objectCopy >> 16U) & 0xFFU;
    eb0c:	697b      	ldr	r3, [r7, #20]
    eb0e:	0c1b      	lsrs	r3, r3, #16
    eb10:	74fb      	strb	r3, [r7, #19]
				uint32_t HBconsTimeObj = objectCopy & 0xFFFFU;
    eb12:	697b      	ldr	r3, [r7, #20]
    eb14:	b29b      	uxth	r3, r3
    eb16:	60fb      	str	r3, [r7, #12]
				if(((ODF_arg->subIndex-1U) != i) && (HBconsTimeObj != 0) && (NodeID == NodeIDObj)){
    eb18:	687b      	ldr	r3, [r7, #4]
    eb1a:	7f1b      	ldrb	r3, [r3, #28]
    eb1c:	1e5a      	subs	r2, r3, #1
    eb1e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
    eb22:	429a      	cmp	r2, r3
    eb24:	d008      	beq.n	eb38 <_ZL11CO_ODF_1016P12CO_ODF_arg_t+0xa4>
    eb26:	68fb      	ldr	r3, [r7, #12]
    eb28:	2b00      	cmp	r3, #0
    eb2a:	d005      	beq.n	eb38 <_ZL11CO_ODF_1016P12CO_ODF_arg_t+0xa4>
    eb2c:	7ffa      	ldrb	r2, [r7, #31]
    eb2e:	7cfb      	ldrb	r3, [r7, #19]
    eb30:	429a      	cmp	r2, r3
    eb32:	d101      	bne.n	eb38 <_ZL11CO_ODF_1016P12CO_ODF_arg_t+0xa4>
					ret = CO_SDO_AB_PRAM_INCOMPAT;
    eb34:	4b10      	ldr	r3, [pc, #64]	; (eb78 <_ZL11CO_ODF_1016P12CO_ODF_arg_t+0xe4>)
    eb36:	62fb      	str	r3, [r7, #44]	; 0x2c
			for(i = 0U; i<HBcons->numberOfMonitoredNodes; i++){
    eb38:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
    eb3c:	3301      	adds	r3, #1
    eb3e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    eb42:	e7d5      	b.n	eaf0 <_ZL11CO_ODF_1016P12CO_ODF_arg_t+0x5c>
				}
			}
		}
		else{
			ret = CO_SDO_AB_NONE;
    eb44:	2300      	movs	r3, #0
    eb46:	62fb      	str	r3, [r7, #44]	; 0x2c
    eb48:	e000      	b.n	eb4c <_ZL11CO_ODF_1016P12CO_ODF_arg_t+0xb8>
			}
    eb4a:	bf00      	nop
		}

		/* Configure */
		if(ret == CO_SDO_AB_NONE){
    eb4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    eb4e:	2b00      	cmp	r3, #0
    eb50:	d108      	bne.n	eb64 <_ZL11CO_ODF_1016P12CO_ODF_arg_t+0xd0>
			CO_HBcons_monitoredNodeConfig(HBcons, ODF_arg->subIndex-1U, value);
    eb52:	687b      	ldr	r3, [r7, #4]
    eb54:	7f1b      	ldrb	r3, [r3, #28]
    eb56:	3b01      	subs	r3, #1
    eb58:	b2db      	uxtb	r3, r3
    eb5a:	6a3a      	ldr	r2, [r7, #32]
    eb5c:	4619      	mov	r1, r3
    eb5e:	6a78      	ldr	r0, [r7, #36]	; 0x24
    eb60:	4b06      	ldr	r3, [pc, #24]	; (eb7c <_ZL11CO_ODF_1016P12CO_ODF_arg_t+0xe8>)
    eb62:	4798      	blx	r3
		}
	}

	return ret;
    eb64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
    eb66:	4618      	mov	r0, r3
    eb68:	3730      	adds	r7, #48	; 0x30
    eb6a:	46bd      	mov	sp, r7
    eb6c:	bd80      	pop	{r7, pc}
    eb6e:	bf00      	nop
    eb70:	20001abc 	.word	0x20001abc
    eb74:	00010815 	.word	0x00010815
    eb78:	06040043 	.word	0x06040043
    eb7c:	0000e9f5 	.word	0x0000e9f5

0000eb80 <_ZN20CO_HB_Consumer_ClassC1Ev>:


// default constructor
CO_HB_Consumer_Class::CO_HB_Consumer_Class()
    eb80:	b480      	push	{r7}
    eb82:	b083      	sub	sp, #12
    eb84:	af00      	add	r7, sp, #0
    eb86:	6078      	str	r0, [r7, #4]
{
	ptrHBConsumerClass=this;
    eb88:	4a04      	ldr	r2, [pc, #16]	; (eb9c <_ZN20CO_HB_Consumer_ClassC1Ev+0x1c>)
    eb8a:	687b      	ldr	r3, [r7, #4]
    eb8c:	6013      	str	r3, [r2, #0]
} //CO_HB_Consumer_Class
    eb8e:	687b      	ldr	r3, [r7, #4]
    eb90:	4618      	mov	r0, r3
    eb92:	370c      	adds	r7, #12
    eb94:	46bd      	mov	sp, r7
    eb96:	bc80      	pop	{r7}
    eb98:	4770      	bx	lr
    eb9a:	bf00      	nop
    eb9c:	20001ac4 	.word	0x20001ac4

0000eba0 <_ZN20CO_HB_Consumer_ClassD1Ev>:

// default destructor
CO_HB_Consumer_Class::~CO_HB_Consumer_Class()
    eba0:	b480      	push	{r7}
    eba2:	b083      	sub	sp, #12
    eba4:	af00      	add	r7, sp, #0
    eba6:	6078      	str	r0, [r7, #4]
{
} //~CO_HB_Consumer_Class
    eba8:	687b      	ldr	r3, [r7, #4]
    ebaa:	4618      	mov	r0, r3
    ebac:	370c      	adds	r7, #12
    ebae:	46bd      	mov	sp, r7
    ebb0:	bc80      	pop	{r7}
    ebb2:	4770      	bx	lr

0000ebb4 <_ZN20CO_HB_Consumer_Class18CO_HBconsumer_initEP15CO_HBconsumer_tP7CO_EM_tP8CO_SDO_tPKmP15CO_HBconsNode_thP14CO_CANmodule_tm>:
const uint32_t          HBconsTime[],
CO_HBconsNode_t         monitoredNodes[],
uint8_t                 numberOfMonitoredNodes,
CO_CANmodule_t         *CANdevRx,
uint32_t                CANdevRxIdxStart)
{
    ebb4:	b590      	push	{r4, r7, lr}
    ebb6:	b089      	sub	sp, #36	; 0x24
    ebb8:	af02      	add	r7, sp, #8
    ebba:	60f8      	str	r0, [r7, #12]
    ebbc:	60b9      	str	r1, [r7, #8]
    ebbe:	607a      	str	r2, [r7, #4]
    ebc0:	603b      	str	r3, [r7, #0]
	uint8_t i;
	ptrMonitoredNodes=monitoredNodes;
    ebc2:	4a2b      	ldr	r2, [pc, #172]	; (ec70 <_ZN20CO_HB_Consumer_Class18CO_HBconsumer_initEP15CO_HBconsumer_tP7CO_EM_tP8CO_SDO_tPKmP15CO_HBconsNode_thP14CO_CANmodule_tm+0xbc>)
    ebc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    ebc6:	6013      	str	r3, [r2, #0]
	/* verify arguments */
	if(HBcons==NULL || em==NULL || SDO==NULL || HBconsTime==NULL ||
    ebc8:	68bb      	ldr	r3, [r7, #8]
    ebca:	2b00      	cmp	r3, #0
    ebcc:	d00e      	beq.n	ebec <_ZN20CO_HB_Consumer_Class18CO_HBconsumer_initEP15CO_HBconsumer_tP7CO_EM_tP8CO_SDO_tPKmP15CO_HBconsNode_thP14CO_CANmodule_tm+0x38>
    ebce:	687b      	ldr	r3, [r7, #4]
    ebd0:	2b00      	cmp	r3, #0
    ebd2:	d00b      	beq.n	ebec <_ZN20CO_HB_Consumer_Class18CO_HBconsumer_initEP15CO_HBconsumer_tP7CO_EM_tP8CO_SDO_tPKmP15CO_HBconsNode_thP14CO_CANmodule_tm+0x38>
    ebd4:	683b      	ldr	r3, [r7, #0]
    ebd6:	2b00      	cmp	r3, #0
    ebd8:	d008      	beq.n	ebec <_ZN20CO_HB_Consumer_Class18CO_HBconsumer_initEP15CO_HBconsumer_tP7CO_EM_tP8CO_SDO_tPKmP15CO_HBconsNode_thP14CO_CANmodule_tm+0x38>
    ebda:	6abb      	ldr	r3, [r7, #40]	; 0x28
    ebdc:	2b00      	cmp	r3, #0
    ebde:	d005      	beq.n	ebec <_ZN20CO_HB_Consumer_Class18CO_HBconsumer_initEP15CO_HBconsumer_tP7CO_EM_tP8CO_SDO_tPKmP15CO_HBconsNode_thP14CO_CANmodule_tm+0x38>
    ebe0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    ebe2:	2b00      	cmp	r3, #0
    ebe4:	d002      	beq.n	ebec <_ZN20CO_HB_Consumer_Class18CO_HBconsumer_initEP15CO_HBconsumer_tP7CO_EM_tP8CO_SDO_tPKmP15CO_HBconsNode_thP14CO_CANmodule_tm+0x38>
	monitoredNodes==NULL || CANdevRx==NULL){
    ebe6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    ebe8:	2b00      	cmp	r3, #0
    ebea:	d102      	bne.n	ebf2 <_ZN20CO_HB_Consumer_Class18CO_HBconsumer_initEP15CO_HBconsumer_tP7CO_EM_tP8CO_SDO_tPKmP15CO_HBconsNode_thP14CO_CANmodule_tm+0x3e>
		return CO_ERROR_ILLEGAL_ARGUMENT;
    ebec:	f04f 33ff 	mov.w	r3, #4294967295
    ebf0:	e039      	b.n	ec66 <_ZN20CO_HB_Consumer_Class18CO_HBconsumer_initEP15CO_HBconsumer_tP7CO_EM_tP8CO_SDO_tPKmP15CO_HBconsNode_thP14CO_CANmodule_tm+0xb2>
	}

	/* Configure object variables */
	HBcons->em = em;
    ebf2:	68bb      	ldr	r3, [r7, #8]
    ebf4:	687a      	ldr	r2, [r7, #4]
    ebf6:	601a      	str	r2, [r3, #0]
	HBcons->HBconsTime = HBconsTime;
    ebf8:	68bb      	ldr	r3, [r7, #8]
    ebfa:	6aba      	ldr	r2, [r7, #40]	; 0x28
    ebfc:	605a      	str	r2, [r3, #4]
	HBcons->monitoredNodes = monitoredNodes;
    ebfe:	68bb      	ldr	r3, [r7, #8]
    ec00:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    ec02:	609a      	str	r2, [r3, #8]
	HBcons->numberOfMonitoredNodes = numberOfMonitoredNodes;
    ec04:	68bb      	ldr	r3, [r7, #8]
    ec06:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
    ec0a:	731a      	strb	r2, [r3, #12]
	HBcons->allMonitoredOperational = 0;
    ec0c:	68bb      	ldr	r3, [r7, #8]
    ec0e:	2200      	movs	r2, #0
    ec10:	735a      	strb	r2, [r3, #13]
	HBcons->CANdevRx = CANdevRx;
    ec12:	68bb      	ldr	r3, [r7, #8]
    ec14:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    ec16:	611a      	str	r2, [r3, #16]
	HBcons->CANdevRxIdxStart = CANdevRxIdxStart;
    ec18:	68bb      	ldr	r3, [r7, #8]
    ec1a:	6bba      	ldr	r2, [r7, #56]	; 0x38
    ec1c:	615a      	str	r2, [r3, #20]

	for(i=0; i<HBcons->numberOfMonitoredNodes; i++){
    ec1e:	2300      	movs	r3, #0
    ec20:	75fb      	strb	r3, [r7, #23]
    ec22:	7dfb      	ldrb	r3, [r7, #23]
    ec24:	68ba      	ldr	r2, [r7, #8]
    ec26:	7b12      	ldrb	r2, [r2, #12]
    ec28:	4293      	cmp	r3, r2
    ec2a:	da0e      	bge.n	ec4a <_ZN20CO_HB_Consumer_Class18CO_HBconsumer_initEP15CO_HBconsumer_tP7CO_EM_tP8CO_SDO_tPKmP15CO_HBconsNode_thP14CO_CANmodule_tm+0x96>

			CO_HBcons_monitoredNodeConfig(HBcons, i, HBcons->HBconsTime[i]);
    ec2c:	68bb      	ldr	r3, [r7, #8]
    ec2e:	685a      	ldr	r2, [r3, #4]
    ec30:	7dfb      	ldrb	r3, [r7, #23]
    ec32:	009b      	lsls	r3, r3, #2
    ec34:	4413      	add	r3, r2
    ec36:	681a      	ldr	r2, [r3, #0]
    ec38:	7dfb      	ldrb	r3, [r7, #23]
    ec3a:	4619      	mov	r1, r3
    ec3c:	68b8      	ldr	r0, [r7, #8]
    ec3e:	4b0d      	ldr	r3, [pc, #52]	; (ec74 <_ZN20CO_HB_Consumer_Class18CO_HBconsumer_initEP15CO_HBconsumer_tP7CO_EM_tP8CO_SDO_tPKmP15CO_HBconsNode_thP14CO_CANmodule_tm+0xc0>)
    ec40:	4798      	blx	r3
	for(i=0; i<HBcons->numberOfMonitoredNodes; i++){
    ec42:	7dfb      	ldrb	r3, [r7, #23]
    ec44:	3301      	adds	r3, #1
    ec46:	75fb      	strb	r3, [r7, #23]
    ec48:	e7eb      	b.n	ec22 <_ZN20CO_HB_Consumer_Class18CO_HBconsumer_initEP15CO_HBconsumer_tP7CO_EM_tP8CO_SDO_tPKmP15CO_HBconsNode_thP14CO_CANmodule_tm+0x6e>
		
	}
	

	/* Configure Object dictionary entry at index 0x1016 */
	canopen_driver->CO_OD_configure( OD_H1016_CONSUMER_HB_TIME, CO_ODF_1016, (void*)HBcons, 0, 0);
    ec4a:	4b0b      	ldr	r3, [pc, #44]	; (ec78 <_ZN20CO_HB_Consumer_Class18CO_HBconsumer_initEP15CO_HBconsumer_tP7CO_EM_tP8CO_SDO_tPKmP15CO_HBconsNode_thP14CO_CANmodule_tm+0xc4>)
    ec4c:	681b      	ldr	r3, [r3, #0]
    ec4e:	1d18      	adds	r0, r3, #4
    ec50:	2300      	movs	r3, #0
    ec52:	9301      	str	r3, [sp, #4]
    ec54:	2300      	movs	r3, #0
    ec56:	9300      	str	r3, [sp, #0]
    ec58:	68bb      	ldr	r3, [r7, #8]
    ec5a:	4a08      	ldr	r2, [pc, #32]	; (ec7c <_ZN20CO_HB_Consumer_Class18CO_HBconsumer_initEP15CO_HBconsumer_tP7CO_EM_tP8CO_SDO_tPKmP15CO_HBconsNode_thP14CO_CANmodule_tm+0xc8>)
    ec5c:	f241 0116 	movw	r1, #4118	; 0x1016
    ec60:	4c07      	ldr	r4, [pc, #28]	; (ec80 <_ZN20CO_HB_Consumer_Class18CO_HBconsumer_initEP15CO_HBconsumer_tP7CO_EM_tP8CO_SDO_tPKmP15CO_HBconsNode_thP14CO_CANmodule_tm+0xcc>)
    ec62:	47a0      	blx	r4

	return CO_ERROR_NO;
    ec64:	2300      	movs	r3, #0
}
    ec66:	4618      	mov	r0, r3
    ec68:	371c      	adds	r7, #28
    ec6a:	46bd      	mov	sp, r7
    ec6c:	bd90      	pop	{r4, r7, pc}
    ec6e:	bf00      	nop
    ec70:	20001ac8 	.word	0x20001ac8
    ec74:	0000e9f5 	.word	0x0000e9f5
    ec78:	20001abc 	.word	0x20001abc
    ec7c:	0000ea95 	.word	0x0000ea95
    ec80:	00010c69 	.word	0x00010c69

0000ec84 <_ZN20CO_HB_Consumer_Class21CO_HBconsumer_processEP15CO_HBconsumer_thm>:
/******************************************************************************/
void CO_HB_Consumer_Class::CO_HBconsumer_process(
CO_HBconsumer_t        *HBcons,
bool_t                  NMTisPreOrOperational,
uint32_t                timeDifference_ms)
{
    ec84:	b590      	push	{r4, r7, lr}
    ec86:	b089      	sub	sp, #36	; 0x24
    ec88:	af02      	add	r7, sp, #8
    ec8a:	60f8      	str	r0, [r7, #12]
    ec8c:	60b9      	str	r1, [r7, #8]
    ec8e:	603b      	str	r3, [r7, #0]
    ec90:	4613      	mov	r3, r2
    ec92:	71fb      	strb	r3, [r7, #7]
	uint8_t i;
	uint8_t AllMonitoredOperationalCopy;
	CO_HBconsNode_t *monitoredNode;

	AllMonitoredOperationalCopy = 5;
    ec94:	2305      	movs	r3, #5
    ec96:	75bb      	strb	r3, [r7, #22]
	monitoredNode = &HBcons->monitoredNodes[0];
    ec98:	68bb      	ldr	r3, [r7, #8]
    ec9a:	689b      	ldr	r3, [r3, #8]
    ec9c:	613b      	str	r3, [r7, #16]

	if(NMTisPreOrOperational){
    ec9e:	79fb      	ldrb	r3, [r7, #7]
    eca0:	2b00      	cmp	r3, #0
    eca2:	d060      	beq.n	ed66 <_ZN20CO_HB_Consumer_Class21CO_HBconsumer_processEP15CO_HBconsumer_thm+0xe2>
		for(i=0; i<HBcons->numberOfMonitoredNodes; i++){
    eca4:	2300      	movs	r3, #0
    eca6:	75fb      	strb	r3, [r7, #23]
    eca8:	7dfb      	ldrb	r3, [r7, #23]
    ecaa:	68ba      	ldr	r2, [r7, #8]
    ecac:	7b12      	ldrb	r2, [r2, #12]
    ecae:	4293      	cmp	r3, r2
    ecb0:	da72      	bge.n	ed98 <_ZN20CO_HB_Consumer_Class21CO_HBconsumer_processEP15CO_HBconsumer_thm+0x114>
			if(monitoredNode->time){/* is node monitored */
    ecb2:	693b      	ldr	r3, [r7, #16]
    ecb4:	689b      	ldr	r3, [r3, #8]
    ecb6:	2b00      	cmp	r3, #0
    ecb8:	d04e      	beq.n	ed58 <_ZN20CO_HB_Consumer_Class21CO_HBconsumer_processEP15CO_HBconsumer_thm+0xd4>
				/* Verify if new Consumer Heartbeat message received */
				if(monitoredNode->CANrxNew){
    ecba:	693b      	ldr	r3, [r7, #16]
    ecbc:	7b1b      	ldrb	r3, [r3, #12]
    ecbe:	2b00      	cmp	r3, #0
    ecc0:	d00e      	beq.n	ece0 <_ZN20CO_HB_Consumer_Class21CO_HBconsumer_processEP15CO_HBconsumer_thm+0x5c>
					if(monitoredNode->NMTstate){
    ecc2:	693b      	ldr	r3, [r7, #16]
    ecc4:	781b      	ldrb	r3, [r3, #0]
    ecc6:	2b00      	cmp	r3, #0
    ecc8:	d007      	beq.n	ecda <_ZN20CO_HB_Consumer_Class21CO_HBconsumer_processEP15CO_HBconsumer_thm+0x56>
						/* not a bootup message */
						monitoredNode->monStarted = true;
    ecca:	693b      	ldr	r3, [r7, #16]
    eccc:	2201      	movs	r2, #1
    ecce:	705a      	strb	r2, [r3, #1]
						monitoredNode->timeoutTimer = 0;  /* reset timer */
    ecd0:	693b      	ldr	r3, [r7, #16]
    ecd2:	2200      	movs	r2, #0
    ecd4:	605a      	str	r2, [r3, #4]
						timeDifference_ms = 0;
    ecd6:	2300      	movs	r3, #0
    ecd8:	603b      	str	r3, [r7, #0]
					}
					monitoredNode->CANrxNew = false;
    ecda:	693b      	ldr	r3, [r7, #16]
    ecdc:	2200      	movs	r2, #0
    ecde:	731a      	strb	r2, [r3, #12]
				}
				/* Verify timeout */
				if(monitoredNode->timeoutTimer < monitoredNode->time) monitoredNode->timeoutTimer += timeDifference_ms;
    ece0:	693b      	ldr	r3, [r7, #16]
    ece2:	685a      	ldr	r2, [r3, #4]
    ece4:	693b      	ldr	r3, [r7, #16]
    ece6:	689b      	ldr	r3, [r3, #8]
    ece8:	429a      	cmp	r2, r3
    ecea:	d205      	bcs.n	ecf8 <_ZN20CO_HB_Consumer_Class21CO_HBconsumer_processEP15CO_HBconsumer_thm+0x74>
    ecec:	693b      	ldr	r3, [r7, #16]
    ecee:	685a      	ldr	r2, [r3, #4]
    ecf0:	683b      	ldr	r3, [r7, #0]
    ecf2:	441a      	add	r2, r3
    ecf4:	693b      	ldr	r3, [r7, #16]
    ecf6:	605a      	str	r2, [r3, #4]

				if(monitoredNode->monStarted){
    ecf8:	693b      	ldr	r3, [r7, #16]
    ecfa:	785b      	ldrb	r3, [r3, #1]
    ecfc:	2b00      	cmp	r3, #0
    ecfe:	d025      	beq.n	ed4c <_ZN20CO_HB_Consumer_Class21CO_HBconsumer_processEP15CO_HBconsumer_thm+0xc8>
					if(monitoredNode->timeoutTimer >= monitoredNode->time){
    ed00:	693b      	ldr	r3, [r7, #16]
    ed02:	685a      	ldr	r2, [r3, #4]
    ed04:	693b      	ldr	r3, [r7, #16]
    ed06:	689b      	ldr	r3, [r3, #8]
    ed08:	429a      	cmp	r2, r3
    ed0a:	d30f      	bcc.n	ed2c <_ZN20CO_HB_Consumer_Class21CO_HBconsumer_processEP15CO_HBconsumer_thm+0xa8>
						canopen_driver->EM_ErrorReport(HBcons->em, CO_EM_HEARTBEAT_CONSUMER, CO_EMC_HEARTBEAT, i);
    ed0c:	4b26      	ldr	r3, [pc, #152]	; (eda8 <_ZN20CO_HB_Consumer_Class21CO_HBconsumer_processEP15CO_HBconsumer_thm+0x124>)
    ed0e:	681b      	ldr	r3, [r3, #0]
    ed10:	1d18      	adds	r0, r3, #4
    ed12:	68bb      	ldr	r3, [r7, #8]
    ed14:	6819      	ldr	r1, [r3, #0]
    ed16:	7dfb      	ldrb	r3, [r7, #23]
    ed18:	9300      	str	r3, [sp, #0]
    ed1a:	f248 1330 	movw	r3, #33072	; 0x8130
    ed1e:	221b      	movs	r2, #27
    ed20:	4c22      	ldr	r4, [pc, #136]	; (edac <_ZN20CO_HB_Consumer_Class21CO_HBconsumer_processEP15CO_HBconsumer_thm+0x128>)
    ed22:	47a0      	blx	r4
						monitoredNode->NMTstate = 0;
    ed24:	693b      	ldr	r3, [r7, #16]
    ed26:	2200      	movs	r2, #0
    ed28:	701a      	strb	r2, [r3, #0]
    ed2a:	e00f      	b.n	ed4c <_ZN20CO_HB_Consumer_Class21CO_HBconsumer_processEP15CO_HBconsumer_thm+0xc8>
					}
					else if(monitoredNode->NMTstate == 0){
    ed2c:	693b      	ldr	r3, [r7, #16]
    ed2e:	781b      	ldrb	r3, [r3, #0]
    ed30:	2b00      	cmp	r3, #0
    ed32:	d10b      	bne.n	ed4c <_ZN20CO_HB_Consumer_Class21CO_HBconsumer_processEP15CO_HBconsumer_thm+0xc8>
						/* there was a bootup message */
						canopen_driver->EM_ErrorReport(HBcons->em, CO_EM_HB_CONSUMER_REMOTE_RESET, CO_EMC_HEARTBEAT, i);
    ed34:	4b1c      	ldr	r3, [pc, #112]	; (eda8 <_ZN20CO_HB_Consumer_Class21CO_HBconsumer_processEP15CO_HBconsumer_thm+0x124>)
    ed36:	681b      	ldr	r3, [r3, #0]
    ed38:	1d18      	adds	r0, r3, #4
    ed3a:	68bb      	ldr	r3, [r7, #8]
    ed3c:	6819      	ldr	r1, [r3, #0]
    ed3e:	7dfb      	ldrb	r3, [r7, #23]
    ed40:	9300      	str	r3, [sp, #0]
    ed42:	f248 1330 	movw	r3, #33072	; 0x8130
    ed46:	221c      	movs	r2, #28
    ed48:	4c18      	ldr	r4, [pc, #96]	; (edac <_ZN20CO_HB_Consumer_Class21CO_HBconsumer_processEP15CO_HBconsumer_thm+0x128>)
    ed4a:	47a0      	blx	r4
					}
				}
				if(monitoredNode->NMTstate != CO_NMT_OPERATIONAL)
    ed4c:	693b      	ldr	r3, [r7, #16]
    ed4e:	781b      	ldrb	r3, [r3, #0]
    ed50:	2b05      	cmp	r3, #5
    ed52:	d001      	beq.n	ed58 <_ZN20CO_HB_Consumer_Class21CO_HBconsumer_processEP15CO_HBconsumer_thm+0xd4>
				AllMonitoredOperationalCopy = 0;
    ed54:	2300      	movs	r3, #0
    ed56:	75bb      	strb	r3, [r7, #22]
			}
			monitoredNode++;
    ed58:	693b      	ldr	r3, [r7, #16]
    ed5a:	3310      	adds	r3, #16
    ed5c:	613b      	str	r3, [r7, #16]
		for(i=0; i<HBcons->numberOfMonitoredNodes; i++){
    ed5e:	7dfb      	ldrb	r3, [r7, #23]
    ed60:	3301      	adds	r3, #1
    ed62:	75fb      	strb	r3, [r7, #23]
    ed64:	e7a0      	b.n	eca8 <_ZN20CO_HB_Consumer_Class21CO_HBconsumer_processEP15CO_HBconsumer_thm+0x24>
		}
	}
	else{ /* not in (pre)operational state */
		for(i=0; i<HBcons->numberOfMonitoredNodes; i++){
    ed66:	2300      	movs	r3, #0
    ed68:	75fb      	strb	r3, [r7, #23]
    ed6a:	7dfb      	ldrb	r3, [r7, #23]
    ed6c:	68ba      	ldr	r2, [r7, #8]
    ed6e:	7b12      	ldrb	r2, [r2, #12]
    ed70:	4293      	cmp	r3, r2
    ed72:	da0f      	bge.n	ed94 <_ZN20CO_HB_Consumer_Class21CO_HBconsumer_processEP15CO_HBconsumer_thm+0x110>
			monitoredNode->NMTstate = 0;
    ed74:	693b      	ldr	r3, [r7, #16]
    ed76:	2200      	movs	r2, #0
    ed78:	701a      	strb	r2, [r3, #0]
			monitoredNode->CANrxNew = false;
    ed7a:	693b      	ldr	r3, [r7, #16]
    ed7c:	2200      	movs	r2, #0
    ed7e:	731a      	strb	r2, [r3, #12]
			monitoredNode->monStarted = false;
    ed80:	693b      	ldr	r3, [r7, #16]
    ed82:	2200      	movs	r2, #0
    ed84:	705a      	strb	r2, [r3, #1]
			monitoredNode++;
    ed86:	693b      	ldr	r3, [r7, #16]
    ed88:	3310      	adds	r3, #16
    ed8a:	613b      	str	r3, [r7, #16]
		for(i=0; i<HBcons->numberOfMonitoredNodes; i++){
    ed8c:	7dfb      	ldrb	r3, [r7, #23]
    ed8e:	3301      	adds	r3, #1
    ed90:	75fb      	strb	r3, [r7, #23]
    ed92:	e7ea      	b.n	ed6a <_ZN20CO_HB_Consumer_Class21CO_HBconsumer_processEP15CO_HBconsumer_thm+0xe6>
		}
		AllMonitoredOperationalCopy = 0;
    ed94:	2300      	movs	r3, #0
    ed96:	75bb      	strb	r3, [r7, #22]
	}
	HBcons->allMonitoredOperational = AllMonitoredOperationalCopy;
    ed98:	68bb      	ldr	r3, [r7, #8]
    ed9a:	7dba      	ldrb	r2, [r7, #22]
    ed9c:	735a      	strb	r2, [r3, #13]
}
    ed9e:	bf00      	nop
    eda0:	371c      	adds	r7, #28
    eda2:	46bd      	mov	sp, r7
    eda4:	bd90      	pop	{r4, r7, pc}
    eda6:	bf00      	nop
    eda8:	20001abc 	.word	0x20001abc
    edac:	0000e6cd 	.word	0x0000e6cd

0000edb0 <_ZN20CO_HB_Consumer_Class10HB_SetNodeEh>:

void	CO_HB_Consumer_Class::HB_SetNode(uint8_t nd){
    edb0:	b480      	push	{r7}
    edb2:	b083      	sub	sp, #12
    edb4:	af00      	add	r7, sp, #0
    edb6:	6078      	str	r0, [r7, #4]
    edb8:	460b      	mov	r3, r1
    edba:	70fb      	strb	r3, [r7, #3]
	coNode=nd;
    edbc:	687b      	ldr	r3, [r7, #4]
    edbe:	78fa      	ldrb	r2, [r7, #3]
    edc0:	711a      	strb	r2, [r3, #4]
}
    edc2:	bf00      	nop
    edc4:	370c      	adds	r7, #12
    edc6:	46bd      	mov	sp, r7
    edc8:	bc80      	pop	{r7}
    edca:	4770      	bx	lr

0000edcc <_ZL14CO_NMT_receivePvPK13CO_CANrxMsg_t>:
#include "CO_Driver_Class.h"

 CO_NMT_t               *NMT;


static void CO_NMT_receive(void *object, const CO_CANrxMsg_t *msg){
    edcc:	b580      	push	{r7, lr}
    edce:	b084      	sub	sp, #16
    edd0:	af00      	add	r7, sp, #0
    edd2:	6078      	str	r0, [r7, #4]
    edd4:	6039      	str	r1, [r7, #0]
    CO_NMT_t *NMT;
    uint8_t nodeId;

    NMT = (CO_NMT_t*)object;   /* this is the correct pointer type of the first argument */
    edd6:	687b      	ldr	r3, [r7, #4]
    edd8:	60fb      	str	r3, [r7, #12]

    nodeId = msg->data[1];
    edda:	683b      	ldr	r3, [r7, #0]
    eddc:	7d9b      	ldrb	r3, [r3, #22]
    edde:	72fb      	strb	r3, [r7, #11]

    if((msg->DLC == 2) && ((nodeId == 0) || (nodeId == NMT->nodeId))){
    ede0:	683b      	ldr	r3, [r7, #0]
    ede2:	7d1b      	ldrb	r3, [r3, #20]
    ede4:	2b02      	cmp	r3, #2
    ede6:	d146      	bne.n	ee76 <_ZL14CO_NMT_receivePvPK13CO_CANrxMsg_t+0xaa>
    ede8:	7afb      	ldrb	r3, [r7, #11]
    edea:	2b00      	cmp	r3, #0
    edec:	d004      	beq.n	edf8 <_ZL14CO_NMT_receivePvPK13CO_CANrxMsg_t+0x2c>
    edee:	68fb      	ldr	r3, [r7, #12]
    edf0:	7a9b      	ldrb	r3, [r3, #10]
    edf2:	7afa      	ldrb	r2, [r7, #11]
    edf4:	429a      	cmp	r2, r3
    edf6:	d13e      	bne.n	ee76 <_ZL14CO_NMT_receivePvPK13CO_CANrxMsg_t+0xaa>
        uint8_t command = msg->data[0];
    edf8:	683b      	ldr	r3, [r7, #0]
    edfa:	7d5b      	ldrb	r3, [r3, #21]
    edfc:	72bb      	strb	r3, [r7, #10]
        uint8_t currentOperatingState = NMT->operatingState;
    edfe:	68fb      	ldr	r3, [r7, #12]
    ee00:	781b      	ldrb	r3, [r3, #0]
    ee02:	727b      	strb	r3, [r7, #9]

        switch(command){
    ee04:	7abb      	ldrb	r3, [r7, #10]
    ee06:	2b80      	cmp	r3, #128	; 0x80
    ee08:	d019      	beq.n	ee3e <_ZL14CO_NMT_receivePvPK13CO_CANrxMsg_t+0x72>
    ee0a:	2b80      	cmp	r3, #128	; 0x80
    ee0c:	dc04      	bgt.n	ee18 <_ZL14CO_NMT_receivePvPK13CO_CANrxMsg_t+0x4c>
    ee0e:	2b01      	cmp	r3, #1
    ee10:	d007      	beq.n	ee22 <_ZL14CO_NMT_receivePvPK13CO_CANrxMsg_t+0x56>
    ee12:	2b02      	cmp	r3, #2
    ee14:	d00f      	beq.n	ee36 <_ZL14CO_NMT_receivePvPK13CO_CANrxMsg_t+0x6a>
    ee16:	e01f      	b.n	ee58 <_ZL14CO_NMT_receivePvPK13CO_CANrxMsg_t+0x8c>
    ee18:	2b81      	cmp	r3, #129	; 0x81
    ee1a:	d014      	beq.n	ee46 <_ZL14CO_NMT_receivePvPK13CO_CANrxMsg_t+0x7a>
    ee1c:	2b82      	cmp	r3, #130	; 0x82
    ee1e:	d016      	beq.n	ee4e <_ZL14CO_NMT_receivePvPK13CO_CANrxMsg_t+0x82>
    ee20:	e01a      	b.n	ee58 <_ZL14CO_NMT_receivePvPK13CO_CANrxMsg_t+0x8c>
            case CO_NMT_ENTER_OPERATIONAL:
                if((*NMT->emPr->errorRegister) == 0U){
    ee22:	68fb      	ldr	r3, [r7, #12]
    ee24:	695b      	ldr	r3, [r3, #20]
    ee26:	681b      	ldr	r3, [r3, #0]
    ee28:	781b      	ldrb	r3, [r3, #0]
    ee2a:	2b00      	cmp	r3, #0
    ee2c:	d113      	bne.n	ee56 <_ZL14CO_NMT_receivePvPK13CO_CANrxMsg_t+0x8a>
                    NMT->operatingState = CO_NMT_OPERATIONAL;
    ee2e:	68fb      	ldr	r3, [r7, #12]
    ee30:	2205      	movs	r2, #5
    ee32:	701a      	strb	r2, [r3, #0]
                }
                break;
    ee34:	e00f      	b.n	ee56 <_ZL14CO_NMT_receivePvPK13CO_CANrxMsg_t+0x8a>
            case CO_NMT_ENTER_STOPPED:
                NMT->operatingState = CO_NMT_STOPPED;
    ee36:	68fb      	ldr	r3, [r7, #12]
    ee38:	2204      	movs	r2, #4
    ee3a:	701a      	strb	r2, [r3, #0]
                break;
    ee3c:	e00c      	b.n	ee58 <_ZL14CO_NMT_receivePvPK13CO_CANrxMsg_t+0x8c>
            case CO_NMT_ENTER_PRE_OPERATIONAL:
                NMT->operatingState = CO_NMT_PRE_OPERATIONAL;
    ee3e:	68fb      	ldr	r3, [r7, #12]
    ee40:	227f      	movs	r2, #127	; 0x7f
    ee42:	701a      	strb	r2, [r3, #0]
                break;
    ee44:	e008      	b.n	ee58 <_ZL14CO_NMT_receivePvPK13CO_CANrxMsg_t+0x8c>
            case CO_NMT_RESET_NODE:
                NMT->resetCommand = CO_RESET_APP;
    ee46:	68fb      	ldr	r3, [r7, #12]
    ee48:	2202      	movs	r2, #2
    ee4a:	725a      	strb	r2, [r3, #9]
                break;
    ee4c:	e004      	b.n	ee58 <_ZL14CO_NMT_receivePvPK13CO_CANrxMsg_t+0x8c>
            case CO_NMT_RESET_COMMUNICATION:
                NMT->resetCommand = CO_RESET_COMM;
    ee4e:	68fb      	ldr	r3, [r7, #12]
    ee50:	2201      	movs	r2, #1
    ee52:	725a      	strb	r2, [r3, #9]
                break;
    ee54:	e000      	b.n	ee58 <_ZL14CO_NMT_receivePvPK13CO_CANrxMsg_t+0x8c>
                break;
    ee56:	bf00      	nop
        }

        if(NMT->ptrState!=NULL && currentOperatingState!=NMT->operatingState){
    ee58:	68fb      	ldr	r3, [r7, #12]
    ee5a:	69db      	ldr	r3, [r3, #28]
    ee5c:	2b00      	cmp	r3, #0
    ee5e:	d00a      	beq.n	ee76 <_ZL14CO_NMT_receivePvPK13CO_CANrxMsg_t+0xaa>
    ee60:	68fb      	ldr	r3, [r7, #12]
    ee62:	781b      	ldrb	r3, [r3, #0]
    ee64:	7a7a      	ldrb	r2, [r7, #9]
    ee66:	429a      	cmp	r2, r3
    ee68:	d005      	beq.n	ee76 <_ZL14CO_NMT_receivePvPK13CO_CANrxMsg_t+0xaa>
            NMT->ptrState((CO_NMT_internalState_t)NMT->operatingState);
    ee6a:	68fb      	ldr	r3, [r7, #12]
    ee6c:	69db      	ldr	r3, [r3, #28]
    ee6e:	68fa      	ldr	r2, [r7, #12]
    ee70:	7812      	ldrb	r2, [r2, #0]
    ee72:	4610      	mov	r0, r2
    ee74:	4798      	blx	r3
        }
    }
}
    ee76:	bf00      	nop
    ee78:	3710      	adds	r7, #16
    ee7a:	46bd      	mov	sp, r7
    ee7c:	bd80      	pop	{r7, pc}

0000ee7e <_ZN22CO_NMT_Heartbeat_ClassC1Ev>:
// default constructor
CO_NMT_Heartbeat_Class::CO_NMT_Heartbeat_Class()
    ee7e:	b480      	push	{r7}
    ee80:	b083      	sub	sp, #12
    ee82:	af00      	add	r7, sp, #0
    ee84:	6078      	str	r0, [r7, #4]
{
} //CO_NMT_Heartbeat
    ee86:	687b      	ldr	r3, [r7, #4]
    ee88:	4618      	mov	r0, r3
    ee8a:	370c      	adds	r7, #12
    ee8c:	46bd      	mov	sp, r7
    ee8e:	bc80      	pop	{r7}
    ee90:	4770      	bx	lr

0000ee92 <_ZN22CO_NMT_Heartbeat_ClassD1Ev>:

// default destructor
CO_NMT_Heartbeat_Class::~CO_NMT_Heartbeat_Class()
    ee92:	b480      	push	{r7}
    ee94:	b083      	sub	sp, #12
    ee96:	af00      	add	r7, sp, #0
    ee98:	6078      	str	r0, [r7, #4]
{
} //~CO_NMT_Heartbeat
    ee9a:	687b      	ldr	r3, [r7, #4]
    ee9c:	4618      	mov	r0, r3
    ee9e:	370c      	adds	r7, #12
    eea0:	46bd      	mov	sp, r7
    eea2:	bc80      	pop	{r7}
    eea4:	4770      	bx	lr
	...

0000eea8 <_ZN22CO_NMT_Heartbeat_Class8NMT_InitEP8CO_NMT_tP9CO_EMpr_thmP14CO_CANmodule_tmmS5_mm>:
        uint32_t                NMT_rxIdx,
        uint32_t                CANidRxNMT,
        CO_CANmodule_t         *HB_CANdev,
        uint32_t                HB_txIdx,
        uint32_t                CANidTxHB)
{
    eea8:	b5b0      	push	{r4, r5, r7, lr}
    eeaa:	b088      	sub	sp, #32
    eeac:	af04      	add	r7, sp, #16
    eeae:	60f8      	str	r0, [r7, #12]
    eeb0:	60b9      	str	r1, [r7, #8]
    eeb2:	607a      	str	r2, [r7, #4]
    eeb4:	70fb      	strb	r3, [r7, #3]
    /* verify arguments */
    if(NMT_Init==NULL || emPr==NULL || NMT_CANdev==NULL || HB_CANdev==NULL){
    eeb6:	68bb      	ldr	r3, [r7, #8]
    eeb8:	2b00      	cmp	r3, #0
    eeba:	d008      	beq.n	eece <_ZN22CO_NMT_Heartbeat_Class8NMT_InitEP8CO_NMT_tP9CO_EMpr_thmP14CO_CANmodule_tmmS5_mm+0x26>
    eebc:	687b      	ldr	r3, [r7, #4]
    eebe:	2b00      	cmp	r3, #0
    eec0:	d005      	beq.n	eece <_ZN22CO_NMT_Heartbeat_Class8NMT_InitEP8CO_NMT_tP9CO_EMpr_thmP14CO_CANmodule_tmmS5_mm+0x26>
    eec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    eec4:	2b00      	cmp	r3, #0
    eec6:	d002      	beq.n	eece <_ZN22CO_NMT_Heartbeat_Class8NMT_InitEP8CO_NMT_tP9CO_EMpr_thmP14CO_CANmodule_tmmS5_mm+0x26>
    eec8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    eeca:	2b00      	cmp	r3, #0
    eecc:	d102      	bne.n	eed4 <_ZN22CO_NMT_Heartbeat_Class8NMT_InitEP8CO_NMT_tP9CO_EMpr_thmP14CO_CANmodule_tmmS5_mm+0x2c>
        return CO_ERROR_ILLEGAL_ARGUMENT;
    eece:	f04f 33ff 	mov.w	r3, #4294967295
    eed2:	e062      	b.n	ef9a <_ZN22CO_NMT_Heartbeat_Class8NMT_InitEP8CO_NMT_tP9CO_EMpr_thmP14CO_CANmodule_tmmS5_mm+0xf2>
    }else{
		NMT=NMT_Init;
    eed4:	4a33      	ldr	r2, [pc, #204]	; (efa4 <_ZN22CO_NMT_Heartbeat_Class8NMT_InitEP8CO_NMT_tP9CO_EMpr_thmP14CO_CANmodule_tmmS5_mm+0xfc>)
    eed6:	68bb      	ldr	r3, [r7, #8]
    eed8:	6013      	str	r3, [r2, #0]
	}

    /* blinking bytes */
    NMT->LEDflickering          = 0;
    eeda:	4b32      	ldr	r3, [pc, #200]	; (efa4 <_ZN22CO_NMT_Heartbeat_Class8NMT_InitEP8CO_NMT_tP9CO_EMpr_thmP14CO_CANmodule_tmmS5_mm+0xfc>)
    eedc:	681b      	ldr	r3, [r3, #0]
    eede:	2200      	movs	r2, #0
    eee0:	705a      	strb	r2, [r3, #1]
    NMT->LEDblinking            = 0;
    eee2:	4b30      	ldr	r3, [pc, #192]	; (efa4 <_ZN22CO_NMT_Heartbeat_Class8NMT_InitEP8CO_NMT_tP9CO_EMpr_thmP14CO_CANmodule_tmmS5_mm+0xfc>)
    eee4:	681b      	ldr	r3, [r3, #0]
    eee6:	2200      	movs	r2, #0
    eee8:	709a      	strb	r2, [r3, #2]
    NMT->LEDsingleFlash         = 0;
    eeea:	4b2e      	ldr	r3, [pc, #184]	; (efa4 <_ZN22CO_NMT_Heartbeat_Class8NMT_InitEP8CO_NMT_tP9CO_EMpr_thmP14CO_CANmodule_tmmS5_mm+0xfc>)
    eeec:	681b      	ldr	r3, [r3, #0]
    eeee:	2200      	movs	r2, #0
    eef0:	70da      	strb	r2, [r3, #3]
    NMT->LEDdoubleFlash         = 0;
    eef2:	4b2c      	ldr	r3, [pc, #176]	; (efa4 <_ZN22CO_NMT_Heartbeat_Class8NMT_InitEP8CO_NMT_tP9CO_EMpr_thmP14CO_CANmodule_tmmS5_mm+0xfc>)
    eef4:	681b      	ldr	r3, [r3, #0]
    eef6:	2200      	movs	r2, #0
    eef8:	711a      	strb	r2, [r3, #4]
    NMT->LEDtripleFlash         = 0;
    eefa:	4b2a      	ldr	r3, [pc, #168]	; (efa4 <_ZN22CO_NMT_Heartbeat_Class8NMT_InitEP8CO_NMT_tP9CO_EMpr_thmP14CO_CANmodule_tmmS5_mm+0xfc>)
    eefc:	681b      	ldr	r3, [r3, #0]
    eefe:	2200      	movs	r2, #0
    ef00:	715a      	strb	r2, [r3, #5]
    NMT->LEDquadrupleFlash      = 0;
    ef02:	4b28      	ldr	r3, [pc, #160]	; (efa4 <_ZN22CO_NMT_Heartbeat_Class8NMT_InitEP8CO_NMT_tP9CO_EMpr_thmP14CO_CANmodule_tmmS5_mm+0xfc>)
    ef04:	681b      	ldr	r3, [r3, #0]
    ef06:	2200      	movs	r2, #0
    ef08:	719a      	strb	r2, [r3, #6]

    /* Configure object variables */
    NMT->operatingState         = CO_NMT_INITIALIZING;
    ef0a:	4b26      	ldr	r3, [pc, #152]	; (efa4 <_ZN22CO_NMT_Heartbeat_Class8NMT_InitEP8CO_NMT_tP9CO_EMpr_thmP14CO_CANmodule_tmmS5_mm+0xfc>)
    ef0c:	681b      	ldr	r3, [r3, #0]
    ef0e:	2200      	movs	r2, #0
    ef10:	701a      	strb	r2, [r3, #0]
    NMT->LEDgreenRun            = -1;
    ef12:	4b24      	ldr	r3, [pc, #144]	; (efa4 <_ZN22CO_NMT_Heartbeat_Class8NMT_InitEP8CO_NMT_tP9CO_EMpr_thmP14CO_CANmodule_tmmS5_mm+0xfc>)
    ef14:	681b      	ldr	r3, [r3, #0]
    ef16:	22ff      	movs	r2, #255	; 0xff
    ef18:	71da      	strb	r2, [r3, #7]
    NMT->LEDredError            = 1;
    ef1a:	4b22      	ldr	r3, [pc, #136]	; (efa4 <_ZN22CO_NMT_Heartbeat_Class8NMT_InitEP8CO_NMT_tP9CO_EMpr_thmP14CO_CANmodule_tmmS5_mm+0xfc>)
    ef1c:	681b      	ldr	r3, [r3, #0]
    ef1e:	2201      	movs	r2, #1
    ef20:	721a      	strb	r2, [r3, #8]
    NMT->nodeId                 = nodeId;
    ef22:	4b20      	ldr	r3, [pc, #128]	; (efa4 <_ZN22CO_NMT_Heartbeat_Class8NMT_InitEP8CO_NMT_tP9CO_EMpr_thmP14CO_CANmodule_tmmS5_mm+0xfc>)
    ef24:	681b      	ldr	r3, [r3, #0]
    ef26:	78fa      	ldrb	r2, [r7, #3]
    ef28:	729a      	strb	r2, [r3, #10]
    NMT->firstHBTime            = firstHBTime;
    ef2a:	4b1e      	ldr	r3, [pc, #120]	; (efa4 <_ZN22CO_NMT_Heartbeat_Class8NMT_InitEP8CO_NMT_tP9CO_EMpr_thmP14CO_CANmodule_tmmS5_mm+0xfc>)
    ef2c:	681b      	ldr	r3, [r3, #0]
    ef2e:	6a3a      	ldr	r2, [r7, #32]
    ef30:	611a      	str	r2, [r3, #16]
    NMT->resetCommand           = 0;
    ef32:	4b1c      	ldr	r3, [pc, #112]	; (efa4 <_ZN22CO_NMT_Heartbeat_Class8NMT_InitEP8CO_NMT_tP9CO_EMpr_thmP14CO_CANmodule_tmmS5_mm+0xfc>)
    ef34:	681b      	ldr	r3, [r3, #0]
    ef36:	2200      	movs	r2, #0
    ef38:	725a      	strb	r2, [r3, #9]
    NMT->HBproducerTimer        = 0xFFFF;
    ef3a:	4b1a      	ldr	r3, [pc, #104]	; (efa4 <_ZN22CO_NMT_Heartbeat_Class8NMT_InitEP8CO_NMT_tP9CO_EMpr_thmP14CO_CANmodule_tmmS5_mm+0xfc>)
    ef3c:	681b      	ldr	r3, [r3, #0]
    ef3e:	f64f 72ff 	movw	r2, #65535	; 0xffff
    ef42:	60da      	str	r2, [r3, #12]
    NMT->emPr                   = emPr;
    ef44:	4b17      	ldr	r3, [pc, #92]	; (efa4 <_ZN22CO_NMT_Heartbeat_Class8NMT_InitEP8CO_NMT_tP9CO_EMpr_thmP14CO_CANmodule_tmmS5_mm+0xfc>)
    ef46:	681b      	ldr	r3, [r3, #0]
    ef48:	687a      	ldr	r2, [r7, #4]
    ef4a:	615a      	str	r2, [r3, #20]
    NMT->ptrState             = NULL;
    ef4c:	4b15      	ldr	r3, [pc, #84]	; (efa4 <_ZN22CO_NMT_Heartbeat_Class8NMT_InitEP8CO_NMT_tP9CO_EMpr_thmP14CO_CANmodule_tmmS5_mm+0xfc>)
    ef4e:	681b      	ldr	r3, [r3, #0]
    ef50:	2200      	movs	r2, #0
    ef52:	61da      	str	r2, [r3, #28]

    /* configure NMT CAN reception */
   canopen_driver->CAN_Rx_BufferInit(
    ef54:	4b14      	ldr	r3, [pc, #80]	; (efa8 <_ZN22CO_NMT_Heartbeat_Class8NMT_InitEP8CO_NMT_tP9CO_EMpr_thmP14CO_CANmodule_tmmS5_mm+0x100>)
    ef56:	6818      	ldr	r0, [r3, #0]
    ef58:	4b12      	ldr	r3, [pc, #72]	; (efa4 <_ZN22CO_NMT_Heartbeat_Class8NMT_InitEP8CO_NMT_tP9CO_EMpr_thmP14CO_CANmodule_tmmS5_mm+0xfc>)
    ef5a:	681b      	ldr	r3, [r3, #0]
            NMT_rxIdx,          /* rx buffer index */
            CANidRxNMT,         /* CAN identifier */
            0x7FF,              /* mask */
            0,                  /* rtr */
            (void*)NMT,         /* object passed to receive function */
            CO_NMT_receive);    /* this function will process received message */
    ef5c:	4a13      	ldr	r2, [pc, #76]	; (efac <_ZN22CO_NMT_Heartbeat_Class8NMT_InitEP8CO_NMT_tP9CO_EMpr_thmP14CO_CANmodule_tmmS5_mm+0x104>)
    ef5e:	9202      	str	r2, [sp, #8]
    ef60:	9301      	str	r3, [sp, #4]
    ef62:	2300      	movs	r3, #0
    ef64:	9300      	str	r3, [sp, #0]
    ef66:	f240 73ff 	movw	r3, #2047	; 0x7ff
    ef6a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    ef6c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
    ef6e:	4c10      	ldr	r4, [pc, #64]	; (efb0 <_ZN22CO_NMT_Heartbeat_Class8NMT_InitEP8CO_NMT_tP9CO_EMpr_thmP14CO_CANmodule_tmmS5_mm+0x108>)
    ef70:	47a0      	blx	r4

    /* configure HB CAN transmission */
    NMT->HB_CANdev = HB_CANdev;
    ef72:	4b0c      	ldr	r3, [pc, #48]	; (efa4 <_ZN22CO_NMT_Heartbeat_Class8NMT_InitEP8CO_NMT_tP9CO_EMpr_thmP14CO_CANmodule_tmmS5_mm+0xfc>)
    ef74:	681b      	ldr	r3, [r3, #0]
    ef76:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    ef78:	619a      	str	r2, [r3, #24]
    NMT->HB_TXbuff =canopen_driver->CAN_Tx_BufferInit(
    ef7a:	4b0a      	ldr	r3, [pc, #40]	; (efa4 <_ZN22CO_NMT_Heartbeat_Class8NMT_InitEP8CO_NMT_tP9CO_EMpr_thmP14CO_CANmodule_tmmS5_mm+0xfc>)
    ef7c:	681c      	ldr	r4, [r3, #0]
    ef7e:	4b0a      	ldr	r3, [pc, #40]	; (efa8 <_ZN22CO_NMT_Heartbeat_Class8NMT_InitEP8CO_NMT_tP9CO_EMpr_thmP14CO_CANmodule_tmmS5_mm+0x100>)
    ef80:	6818      	ldr	r0, [r3, #0]
    ef82:	2300      	movs	r3, #0
    ef84:	9301      	str	r3, [sp, #4]
    ef86:	2301      	movs	r3, #1
    ef88:	9300      	str	r3, [sp, #0]
    ef8a:	2300      	movs	r3, #0
    ef8c:	6bba      	ldr	r2, [r7, #56]	; 0x38
    ef8e:	6b79      	ldr	r1, [r7, #52]	; 0x34
    ef90:	4d08      	ldr	r5, [pc, #32]	; (efb4 <_ZN22CO_NMT_Heartbeat_Class8NMT_InitEP8CO_NMT_tP9CO_EMpr_thmP14CO_CANmodule_tmmS5_mm+0x10c>)
    ef92:	47a8      	blx	r5
    ef94:	4603      	mov	r3, r0
    ef96:	6223      	str	r3, [r4, #32]
            CANidTxHB,          /* CAN identifier */
            0,                  /* rtr */
            1,                  /* number of data bytes */
            0);                 /* synchronous message flag bit */

    return CO_ERROR_NO;
    ef98:	2300      	movs	r3, #0
}
    ef9a:	4618      	mov	r0, r3
    ef9c:	3710      	adds	r7, #16
    ef9e:	46bd      	mov	sp, r7
    efa0:	bdb0      	pop	{r4, r5, r7, pc}
    efa2:	bf00      	nop
    efa4:	20001acc 	.word	0x20001acc
    efa8:	20001abc 	.word	0x20001abc
    efac:	0000edcd 	.word	0x0000edcd
    efb0:	0000daa9 	.word	0x0000daa9
    efb4:	0000dba9 	.word	0x0000dba9

0000efb8 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm>:
        uint32_t                HBtime,
        uint32_t                NMTstartup,
        uint8_t                 errorRegister,
        const uint8_t           errorBehavior[],
        uint32_t               *timerNext_ms)
{
    efb8:	b580      	push	{r7, lr}
    efba:	b086      	sub	sp, #24
    efbc:	af00      	add	r7, sp, #0
    efbe:	60f8      	str	r0, [r7, #12]
    efc0:	60b9      	str	r1, [r7, #8]
    efc2:	607a      	str	r2, [r7, #4]
    efc4:	603b      	str	r3, [r7, #0]
    uint8_t CANpassive;

    uint8_t currentOperatingState = NMT->operatingState;
    efc6:	4b97      	ldr	r3, [pc, #604]	; (f224 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x26c>)
    efc8:	681b      	ldr	r3, [r3, #0]
    efca:	781b      	ldrb	r3, [r3, #0]
    efcc:	75bb      	strb	r3, [r7, #22]

    NMT->HBproducerTimer += timeDifference_ms;
    efce:	4b95      	ldr	r3, [pc, #596]	; (f224 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x26c>)
    efd0:	681b      	ldr	r3, [r3, #0]
    efd2:	4a94      	ldr	r2, [pc, #592]	; (f224 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x26c>)
    efd4:	6812      	ldr	r2, [r2, #0]
    efd6:	68d1      	ldr	r1, [r2, #12]
    efd8:	68ba      	ldr	r2, [r7, #8]
    efda:	440a      	add	r2, r1
    efdc:	60da      	str	r2, [r3, #12]

    /* Heartbeat producer message & Bootup message */
    if((HBtime != 0 && NMT->HBproducerTimer >= HBtime) || NMT->operatingState == CO_NMT_INITIALIZING){
    efde:	687b      	ldr	r3, [r7, #4]
    efe0:	2b00      	cmp	r3, #0
    efe2:	d005      	beq.n	eff0 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x38>
    efe4:	4b8f      	ldr	r3, [pc, #572]	; (f224 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x26c>)
    efe6:	681b      	ldr	r3, [r3, #0]
    efe8:	68da      	ldr	r2, [r3, #12]
    efea:	687b      	ldr	r3, [r7, #4]
    efec:	429a      	cmp	r2, r3
    efee:	d204      	bcs.n	effa <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x42>
    eff0:	4b8c      	ldr	r3, [pc, #560]	; (f224 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x26c>)
    eff2:	681b      	ldr	r3, [r3, #0]
    eff4:	781b      	ldrb	r3, [r3, #0]
    eff6:	2b00      	cmp	r3, #0
    eff8:	d139      	bne.n	f06e <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0xb6>

        /* Start from the beginning. If OS is slow, time sliding may occur. However, heartbeat is
         * not for synchronization, it is for health report. */
        NMT->HBproducerTimer = 0;
    effa:	4b8a      	ldr	r3, [pc, #552]	; (f224 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x26c>)
    effc:	681b      	ldr	r3, [r3, #0]
    effe:	2200      	movs	r2, #0
    f000:	60da      	str	r2, [r3, #12]

        NMT->HB_TXbuff->data[0] = NMT->operatingState;
    f002:	4b88      	ldr	r3, [pc, #544]	; (f224 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x26c>)
    f004:	681b      	ldr	r3, [r3, #0]
    f006:	6a1b      	ldr	r3, [r3, #32]
    f008:	4a86      	ldr	r2, [pc, #536]	; (f224 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x26c>)
    f00a:	6812      	ldr	r2, [r2, #0]
    f00c:	7812      	ldrb	r2, [r2, #0]
    f00e:	715a      	strb	r2, [r3, #5]
        canopen_driver->CAN_Send(NMT->HB_TXbuff);
    f010:	4b85      	ldr	r3, [pc, #532]	; (f228 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x270>)
    f012:	681a      	ldr	r2, [r3, #0]
    f014:	4b83      	ldr	r3, [pc, #524]	; (f224 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x26c>)
    f016:	681b      	ldr	r3, [r3, #0]
    f018:	6a1b      	ldr	r3, [r3, #32]
    f01a:	4619      	mov	r1, r3
    f01c:	4610      	mov	r0, r2
    f01e:	4b83      	ldr	r3, [pc, #524]	; (f22c <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x274>)
    f020:	4798      	blx	r3

        if(NMT->operatingState == CO_NMT_INITIALIZING){
    f022:	4b80      	ldr	r3, [pc, #512]	; (f224 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x26c>)
    f024:	681b      	ldr	r3, [r3, #0]
    f026:	781b      	ldrb	r3, [r3, #0]
    f028:	2b00      	cmp	r3, #0
    f02a:	d120      	bne.n	f06e <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0xb6>
            if(HBtime > NMT->firstHBTime) NMT->HBproducerTimer = HBtime - NMT->firstHBTime;
    f02c:	4b7d      	ldr	r3, [pc, #500]	; (f224 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x26c>)
    f02e:	681b      	ldr	r3, [r3, #0]
    f030:	691a      	ldr	r2, [r3, #16]
    f032:	687b      	ldr	r3, [r7, #4]
    f034:	429a      	cmp	r2, r3
    f036:	d208      	bcs.n	f04a <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x92>
    f038:	4b7a      	ldr	r3, [pc, #488]	; (f224 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x26c>)
    f03a:	681b      	ldr	r3, [r3, #0]
    f03c:	4a79      	ldr	r2, [pc, #484]	; (f224 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x26c>)
    f03e:	6812      	ldr	r2, [r2, #0]
    f040:	6912      	ldr	r2, [r2, #16]
    f042:	6879      	ldr	r1, [r7, #4]
    f044:	1a8a      	subs	r2, r1, r2
    f046:	60da      	str	r2, [r3, #12]
    f048:	e003      	b.n	f052 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x9a>
            else                          NMT->HBproducerTimer = 0;
    f04a:	4b76      	ldr	r3, [pc, #472]	; (f224 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x26c>)
    f04c:	681b      	ldr	r3, [r3, #0]
    f04e:	2200      	movs	r2, #0
    f050:	60da      	str	r2, [r3, #12]

            if((NMTstartup & 0x04) == 0) NMT->operatingState = CO_NMT_OPERATIONAL;
    f052:	683b      	ldr	r3, [r7, #0]
    f054:	f003 0304 	and.w	r3, r3, #4
    f058:	2b00      	cmp	r3, #0
    f05a:	d104      	bne.n	f066 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0xae>
    f05c:	4b71      	ldr	r3, [pc, #452]	; (f224 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x26c>)
    f05e:	681b      	ldr	r3, [r3, #0]
    f060:	2205      	movs	r2, #5
    f062:	701a      	strb	r2, [r3, #0]
    f064:	e003      	b.n	f06e <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0xb6>
            else                         NMT->operatingState = CO_NMT_PRE_OPERATIONAL;
    f066:	4b6f      	ldr	r3, [pc, #444]	; (f224 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x26c>)
    f068:	681b      	ldr	r3, [r3, #0]
    f06a:	227f      	movs	r2, #127	; 0x7f
    f06c:	701a      	strb	r2, [r3, #0]
        }
    }


    /* Calculate, when next Heartbeat needs to be send and lower timerNext_ms if necessary. */
    if(HBtime != 0 && timerNext_ms != NULL){
    f06e:	687b      	ldr	r3, [r7, #4]
    f070:	2b00      	cmp	r3, #0
    f072:	d01a      	beq.n	f0aa <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0xf2>
    f074:	6abb      	ldr	r3, [r7, #40]	; 0x28
    f076:	2b00      	cmp	r3, #0
    f078:	d017      	beq.n	f0aa <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0xf2>
        if(NMT->HBproducerTimer < HBtime){
    f07a:	4b6a      	ldr	r3, [pc, #424]	; (f224 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x26c>)
    f07c:	681b      	ldr	r3, [r3, #0]
    f07e:	68da      	ldr	r2, [r3, #12]
    f080:	687b      	ldr	r3, [r7, #4]
    f082:	429a      	cmp	r2, r3
    f084:	d20e      	bcs.n	f0a4 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0xec>
            uint32_t diff = HBtime - NMT->HBproducerTimer;
    f086:	4b67      	ldr	r3, [pc, #412]	; (f224 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x26c>)
    f088:	681b      	ldr	r3, [r3, #0]
    f08a:	68db      	ldr	r3, [r3, #12]
    f08c:	687a      	ldr	r2, [r7, #4]
    f08e:	1ad3      	subs	r3, r2, r3
    f090:	613b      	str	r3, [r7, #16]
            if(*timerNext_ms > diff){
    f092:	6abb      	ldr	r3, [r7, #40]	; 0x28
    f094:	681a      	ldr	r2, [r3, #0]
    f096:	693b      	ldr	r3, [r7, #16]
    f098:	429a      	cmp	r2, r3
    f09a:	d906      	bls.n	f0aa <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0xf2>
                *timerNext_ms = diff;
    f09c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    f09e:	693a      	ldr	r2, [r7, #16]
    f0a0:	601a      	str	r2, [r3, #0]
    f0a2:	e002      	b.n	f0aa <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0xf2>
            }
        }else{
            *timerNext_ms = 0;
    f0a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
    f0a6:	2200      	movs	r2, #0
    f0a8:	601a      	str	r2, [r3, #0]
        }
    }


    /* CAN passive flag */
    CANpassive = 0;
    f0aa:	2300      	movs	r3, #0
    f0ac:	75fb      	strb	r3, [r7, #23]
    if(canopen_driver->EM_IsError(NMT->emPr->em, CO_EM_CAN_TX_BUS_PASSIVE) || canopen_driver->EM_IsError(NMT->emPr->em, CO_EM_CAN_RX_BUS_PASSIVE))
    f0ae:	4b5e      	ldr	r3, [pc, #376]	; (f228 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x270>)
    f0b0:	681b      	ldr	r3, [r3, #0]
    f0b2:	1d18      	adds	r0, r3, #4
    f0b4:	4b5b      	ldr	r3, [pc, #364]	; (f224 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x26c>)
    f0b6:	681b      	ldr	r3, [r3, #0]
    f0b8:	695b      	ldr	r3, [r3, #20]
    f0ba:	691b      	ldr	r3, [r3, #16]
    f0bc:	2207      	movs	r2, #7
    f0be:	4619      	mov	r1, r3
    f0c0:	4b5b      	ldr	r3, [pc, #364]	; (f230 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x278>)
    f0c2:	4798      	blx	r3
    f0c4:	4603      	mov	r3, r0
    f0c6:	2b00      	cmp	r3, #0
    f0c8:	d10d      	bne.n	f0e6 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x12e>
    f0ca:	4b57      	ldr	r3, [pc, #348]	; (f228 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x270>)
    f0cc:	681b      	ldr	r3, [r3, #0]
    f0ce:	1d18      	adds	r0, r3, #4
    f0d0:	4b54      	ldr	r3, [pc, #336]	; (f224 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x26c>)
    f0d2:	681b      	ldr	r3, [r3, #0]
    f0d4:	695b      	ldr	r3, [r3, #20]
    f0d6:	691b      	ldr	r3, [r3, #16]
    f0d8:	2206      	movs	r2, #6
    f0da:	4619      	mov	r1, r3
    f0dc:	4b54      	ldr	r3, [pc, #336]	; (f230 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x278>)
    f0de:	4798      	blx	r3
    f0e0:	4603      	mov	r3, r0
    f0e2:	2b00      	cmp	r3, #0
    f0e4:	d001      	beq.n	f0ea <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x132>
    f0e6:	2301      	movs	r3, #1
    f0e8:	e000      	b.n	f0ec <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x134>
    f0ea:	2300      	movs	r3, #0
    f0ec:	2b00      	cmp	r3, #0
    f0ee:	d001      	beq.n	f0f4 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x13c>
        CANpassive = 1;
    f0f0:	2301      	movs	r3, #1
    f0f2:	75fb      	strb	r3, [r7, #23]


    /* CANopen green RUN LED (DR 303-3) */
    switch(NMT->operatingState){
    f0f4:	4b4b      	ldr	r3, [pc, #300]	; (f224 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x26c>)
    f0f6:	681b      	ldr	r3, [r3, #0]
    f0f8:	781b      	ldrb	r3, [r3, #0]
    f0fa:	2b05      	cmp	r3, #5
    f0fc:	d013      	beq.n	f126 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x16e>
    f0fe:	2b7f      	cmp	r3, #127	; 0x7f
    f100:	d009      	beq.n	f116 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x15e>
    f102:	2b04      	cmp	r3, #4
    f104:	d114      	bne.n	f130 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x178>
        case CO_NMT_STOPPED:          NMT->LEDgreenRun = NMT->LEDsingleFlash;   break;
    f106:	4b47      	ldr	r3, [pc, #284]	; (f224 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x26c>)
    f108:	681b      	ldr	r3, [r3, #0]
    f10a:	4a46      	ldr	r2, [pc, #280]	; (f224 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x26c>)
    f10c:	6812      	ldr	r2, [r2, #0]
    f10e:	f992 2003 	ldrsb.w	r2, [r2, #3]
    f112:	71da      	strb	r2, [r3, #7]
    f114:	e00c      	b.n	f130 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x178>
        case CO_NMT_PRE_OPERATIONAL:  NMT->LEDgreenRun = NMT->LEDblinking;      break;
    f116:	4b43      	ldr	r3, [pc, #268]	; (f224 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x26c>)
    f118:	681b      	ldr	r3, [r3, #0]
    f11a:	4a42      	ldr	r2, [pc, #264]	; (f224 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x26c>)
    f11c:	6812      	ldr	r2, [r2, #0]
    f11e:	f992 2002 	ldrsb.w	r2, [r2, #2]
    f122:	71da      	strb	r2, [r3, #7]
    f124:	e004      	b.n	f130 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x178>
        case CO_NMT_OPERATIONAL:      NMT->LEDgreenRun = 1;                     break;
    f126:	4b3f      	ldr	r3, [pc, #252]	; (f224 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x26c>)
    f128:	681b      	ldr	r3, [r3, #0]
    f12a:	2201      	movs	r2, #1
    f12c:	71da      	strb	r2, [r3, #7]
    f12e:	bf00      	nop
    }


    /* CANopen red ERROR LED (DR 303-3) */
    if(canopen_driver->EM_IsError(NMT->emPr->em, CO_EM_CAN_TX_BUS_OFF))
    f130:	4b3d      	ldr	r3, [pc, #244]	; (f228 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x270>)
    f132:	681b      	ldr	r3, [r3, #0]
    f134:	1d18      	adds	r0, r3, #4
    f136:	4b3b      	ldr	r3, [pc, #236]	; (f224 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x26c>)
    f138:	681b      	ldr	r3, [r3, #0]
    f13a:	695b      	ldr	r3, [r3, #20]
    f13c:	691b      	ldr	r3, [r3, #16]
    f13e:	2212      	movs	r2, #18
    f140:	4619      	mov	r1, r3
    f142:	4b3b      	ldr	r3, [pc, #236]	; (f230 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x278>)
    f144:	4798      	blx	r3
    f146:	4603      	mov	r3, r0
    f148:	2b00      	cmp	r3, #0
    f14a:	bf14      	ite	ne
    f14c:	2301      	movne	r3, #1
    f14e:	2300      	moveq	r3, #0
    f150:	b2db      	uxtb	r3, r3
    f152:	2b00      	cmp	r3, #0
    f154:	d004      	beq.n	f160 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x1a8>
        NMT->LEDredError = 1;
    f156:	4b33      	ldr	r3, [pc, #204]	; (f224 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x26c>)
    f158:	681b      	ldr	r3, [r3, #0]
    f15a:	2201      	movs	r2, #1
    f15c:	721a      	strb	r2, [r3, #8]
    f15e:	e07f      	b.n	f260 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x2a8>

    else if(canopen_driver->EM_IsError(NMT->emPr->em, CO_EM_SYNC_TIME_OUT))
    f160:	4b31      	ldr	r3, [pc, #196]	; (f228 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x270>)
    f162:	681b      	ldr	r3, [r3, #0]
    f164:	1d18      	adds	r0, r3, #4
    f166:	4b2f      	ldr	r3, [pc, #188]	; (f224 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x26c>)
    f168:	681b      	ldr	r3, [r3, #0]
    f16a:	695b      	ldr	r3, [r3, #20]
    f16c:	691b      	ldr	r3, [r3, #16]
    f16e:	2218      	movs	r2, #24
    f170:	4619      	mov	r1, r3
    f172:	4b2f      	ldr	r3, [pc, #188]	; (f230 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x278>)
    f174:	4798      	blx	r3
    f176:	4603      	mov	r3, r0
    f178:	2b00      	cmp	r3, #0
    f17a:	bf14      	ite	ne
    f17c:	2301      	movne	r3, #1
    f17e:	2300      	moveq	r3, #0
    f180:	b2db      	uxtb	r3, r3
    f182:	2b00      	cmp	r3, #0
    f184:	d007      	beq.n	f196 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x1de>
        NMT->LEDredError = NMT->LEDtripleFlash;
    f186:	4b27      	ldr	r3, [pc, #156]	; (f224 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x26c>)
    f188:	681b      	ldr	r3, [r3, #0]
    f18a:	4a26      	ldr	r2, [pc, #152]	; (f224 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x26c>)
    f18c:	6812      	ldr	r2, [r2, #0]
    f18e:	f992 2005 	ldrsb.w	r2, [r2, #5]
    f192:	721a      	strb	r2, [r3, #8]
    f194:	e064      	b.n	f260 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x2a8>

    else if(canopen_driver->EM_IsError(NMT->emPr->em, CO_EM_HEARTBEAT_CONSUMER) || canopen_driver->EM_IsError(NMT->emPr->em, CO_EM_HB_CONSUMER_REMOTE_RESET))
    f196:	4b24      	ldr	r3, [pc, #144]	; (f228 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x270>)
    f198:	681b      	ldr	r3, [r3, #0]
    f19a:	1d18      	adds	r0, r3, #4
    f19c:	4b21      	ldr	r3, [pc, #132]	; (f224 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x26c>)
    f19e:	681b      	ldr	r3, [r3, #0]
    f1a0:	695b      	ldr	r3, [r3, #20]
    f1a2:	691b      	ldr	r3, [r3, #16]
    f1a4:	221b      	movs	r2, #27
    f1a6:	4619      	mov	r1, r3
    f1a8:	4b21      	ldr	r3, [pc, #132]	; (f230 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x278>)
    f1aa:	4798      	blx	r3
    f1ac:	4603      	mov	r3, r0
    f1ae:	2b00      	cmp	r3, #0
    f1b0:	d10d      	bne.n	f1ce <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x216>
    f1b2:	4b1d      	ldr	r3, [pc, #116]	; (f228 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x270>)
    f1b4:	681b      	ldr	r3, [r3, #0]
    f1b6:	1d18      	adds	r0, r3, #4
    f1b8:	4b1a      	ldr	r3, [pc, #104]	; (f224 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x26c>)
    f1ba:	681b      	ldr	r3, [r3, #0]
    f1bc:	695b      	ldr	r3, [r3, #20]
    f1be:	691b      	ldr	r3, [r3, #16]
    f1c0:	221c      	movs	r2, #28
    f1c2:	4619      	mov	r1, r3
    f1c4:	4b1a      	ldr	r3, [pc, #104]	; (f230 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x278>)
    f1c6:	4798      	blx	r3
    f1c8:	4603      	mov	r3, r0
    f1ca:	2b00      	cmp	r3, #0
    f1cc:	d001      	beq.n	f1d2 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x21a>
    f1ce:	2301      	movs	r3, #1
    f1d0:	e000      	b.n	f1d4 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x21c>
    f1d2:	2300      	movs	r3, #0
    f1d4:	2b00      	cmp	r3, #0
    f1d6:	d007      	beq.n	f1e8 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x230>
        NMT->LEDredError = NMT->LEDdoubleFlash;
    f1d8:	4b12      	ldr	r3, [pc, #72]	; (f224 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x26c>)
    f1da:	681b      	ldr	r3, [r3, #0]
    f1dc:	4a11      	ldr	r2, [pc, #68]	; (f224 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x26c>)
    f1de:	6812      	ldr	r2, [r2, #0]
    f1e0:	f992 2004 	ldrsb.w	r2, [r2, #4]
    f1e4:	721a      	strb	r2, [r3, #8]
    f1e6:	e03b      	b.n	f260 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x2a8>

    else if(CANpassive ||  canopen_driver->EM_IsError(NMT->emPr->em, CO_EM_CAN_BUS_WARNING))
    f1e8:	7dfb      	ldrb	r3, [r7, #23]
    f1ea:	2b00      	cmp	r3, #0
    f1ec:	d10d      	bne.n	f20a <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x252>
    f1ee:	4b0e      	ldr	r3, [pc, #56]	; (f228 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x270>)
    f1f0:	681b      	ldr	r3, [r3, #0]
    f1f2:	1d18      	adds	r0, r3, #4
    f1f4:	4b0b      	ldr	r3, [pc, #44]	; (f224 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x26c>)
    f1f6:	681b      	ldr	r3, [r3, #0]
    f1f8:	695b      	ldr	r3, [r3, #20]
    f1fa:	691b      	ldr	r3, [r3, #16]
    f1fc:	2201      	movs	r2, #1
    f1fe:	4619      	mov	r1, r3
    f200:	4b0b      	ldr	r3, [pc, #44]	; (f230 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x278>)
    f202:	4798      	blx	r3
    f204:	4603      	mov	r3, r0
    f206:	2b00      	cmp	r3, #0
    f208:	d001      	beq.n	f20e <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x256>
    f20a:	2301      	movs	r3, #1
    f20c:	e000      	b.n	f210 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x258>
    f20e:	2300      	movs	r3, #0
    f210:	2b00      	cmp	r3, #0
    f212:	d00f      	beq.n	f234 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x27c>
        NMT->LEDredError = NMT->LEDsingleFlash;
    f214:	4b03      	ldr	r3, [pc, #12]	; (f224 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x26c>)
    f216:	681b      	ldr	r3, [r3, #0]
    f218:	4a02      	ldr	r2, [pc, #8]	; (f224 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x26c>)
    f21a:	6812      	ldr	r2, [r2, #0]
    f21c:	f992 2003 	ldrsb.w	r2, [r2, #3]
    f220:	721a      	strb	r2, [r3, #8]
    f222:	e01d      	b.n	f260 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x2a8>
    f224:	20001acc 	.word	0x20001acc
    f228:	20001abc 	.word	0x20001abc
    f22c:	0000dc55 	.word	0x0000dc55
    f230:	0000e96d 	.word	0x0000e96d

    else if(errorRegister)
    f234:	f897 3020 	ldrb.w	r3, [r7, #32]
    f238:	2b00      	cmp	r3, #0
    f23a:	d00d      	beq.n	f258 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x2a0>
        NMT->LEDredError = (NMT->LEDblinking>=0)?-1:1;
    f23c:	4b7c      	ldr	r3, [pc, #496]	; (f430 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x478>)
    f23e:	681b      	ldr	r3, [r3, #0]
    f240:	4a7b      	ldr	r2, [pc, #492]	; (f430 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x478>)
    f242:	6812      	ldr	r2, [r2, #0]
    f244:	f992 2002 	ldrsb.w	r2, [r2, #2]
    f248:	2a00      	cmp	r2, #0
    f24a:	db02      	blt.n	f252 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x29a>
    f24c:	f04f 32ff 	mov.w	r2, #4294967295
    f250:	e000      	b.n	f254 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x29c>
    f252:	2201      	movs	r2, #1
    f254:	721a      	strb	r2, [r3, #8]
    f256:	e003      	b.n	f260 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x2a8>

    else
        NMT->LEDredError = -1;
    f258:	4b75      	ldr	r3, [pc, #468]	; (f430 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x478>)
    f25a:	681b      	ldr	r3, [r3, #0]
    f25c:	22ff      	movs	r2, #255	; 0xff
    f25e:	721a      	strb	r2, [r3, #8]


    /* in case of error enter pre-operational state */
    if(errorBehavior && (NMT->operatingState == CO_NMT_OPERATIONAL)){
    f260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    f262:	2b00      	cmp	r3, #0
    f264:	f000 80ca 	beq.w	f3fc <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x444>
    f268:	4b71      	ldr	r3, [pc, #452]	; (f430 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x478>)
    f26a:	681b      	ldr	r3, [r3, #0]
    f26c:	781b      	ldrb	r3, [r3, #0]
    f26e:	2b05      	cmp	r3, #5
    f270:	f040 80c4 	bne.w	f3fc <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x444>
        if(CANpassive && (errorBehavior[2] == 0 || errorBehavior[2] == 2)) errorRegister |= 0x10;
    f274:	7dfb      	ldrb	r3, [r7, #23]
    f276:	2b00      	cmp	r3, #0
    f278:	d00f      	beq.n	f29a <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x2e2>
    f27a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    f27c:	3302      	adds	r3, #2
    f27e:	781b      	ldrb	r3, [r3, #0]
    f280:	2b00      	cmp	r3, #0
    f282:	d004      	beq.n	f28e <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x2d6>
    f284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    f286:	3302      	adds	r3, #2
    f288:	781b      	ldrb	r3, [r3, #0]
    f28a:	2b02      	cmp	r3, #2
    f28c:	d105      	bne.n	f29a <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x2e2>
    f28e:	f897 3020 	ldrb.w	r3, [r7, #32]
    f292:	f043 0310 	orr.w	r3, r3, #16
    f296:	f887 3020 	strb.w	r3, [r7, #32]

        if(errorRegister){
    f29a:	f897 3020 	ldrb.w	r3, [r7, #32]
    f29e:	2b00      	cmp	r3, #0
    f2a0:	f000 80ac 	beq.w	f3fc <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x444>
            /* Communication error */
            if(errorRegister & CO_ERR_REG_COMM_ERR){
    f2a4:	f897 3020 	ldrb.w	r3, [r7, #32]
    f2a8:	f003 0310 	and.w	r3, r3, #16
    f2ac:	2b00      	cmp	r3, #0
    f2ae:	d053      	beq.n	f358 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x3a0>
                if(errorBehavior[1] == 0){
    f2b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    f2b2:	3301      	adds	r3, #1
    f2b4:	781b      	ldrb	r3, [r3, #0]
    f2b6:	2b00      	cmp	r3, #0
    f2b8:	d104      	bne.n	f2c4 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x30c>
                    NMT->operatingState = CO_NMT_PRE_OPERATIONAL;
    f2ba:	4b5d      	ldr	r3, [pc, #372]	; (f430 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x478>)
    f2bc:	681b      	ldr	r3, [r3, #0]
    f2be:	227f      	movs	r2, #127	; 0x7f
    f2c0:	701a      	strb	r2, [r3, #0]
    f2c2:	e049      	b.n	f358 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x3a0>
                }
                else if(errorBehavior[1] == 2){
    f2c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    f2c6:	3301      	adds	r3, #1
    f2c8:	781b      	ldrb	r3, [r3, #0]
    f2ca:	2b02      	cmp	r3, #2
    f2cc:	d104      	bne.n	f2d8 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x320>
                    NMT->operatingState = CO_NMT_STOPPED;
    f2ce:	4b58      	ldr	r3, [pc, #352]	; (f430 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x478>)
    f2d0:	681b      	ldr	r3, [r3, #0]
    f2d2:	2204      	movs	r2, #4
    f2d4:	701a      	strb	r2, [r3, #0]
    f2d6:	e03f      	b.n	f358 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x3a0>
                }
                else if( canopen_driver->EM_IsError(NMT->emPr->em, CO_EM_CAN_TX_BUS_OFF)
    f2d8:	4b56      	ldr	r3, [pc, #344]	; (f434 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x47c>)
    f2da:	681b      	ldr	r3, [r3, #0]
    f2dc:	1d18      	adds	r0, r3, #4
    f2de:	4b54      	ldr	r3, [pc, #336]	; (f430 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x478>)
    f2e0:	681b      	ldr	r3, [r3, #0]
    f2e2:	695b      	ldr	r3, [r3, #20]
    f2e4:	691b      	ldr	r3, [r3, #16]
    f2e6:	2212      	movs	r2, #18
    f2e8:	4619      	mov	r1, r3
    f2ea:	4b53      	ldr	r3, [pc, #332]	; (f438 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x480>)
    f2ec:	4798      	blx	r3
    f2ee:	4603      	mov	r3, r0
                     ||  canopen_driver->EM_IsError(NMT->emPr->em, CO_EM_HEARTBEAT_CONSUMER)
                     ||  canopen_driver->EM_IsError(NMT->emPr->em, CO_EM_HB_CONSUMER_REMOTE_RESET))
    f2f0:	2b00      	cmp	r3, #0
    f2f2:	d11b      	bne.n	f32c <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x374>
                     ||  canopen_driver->EM_IsError(NMT->emPr->em, CO_EM_HEARTBEAT_CONSUMER)
    f2f4:	4b4f      	ldr	r3, [pc, #316]	; (f434 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x47c>)
    f2f6:	681b      	ldr	r3, [r3, #0]
    f2f8:	1d18      	adds	r0, r3, #4
    f2fa:	4b4d      	ldr	r3, [pc, #308]	; (f430 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x478>)
    f2fc:	681b      	ldr	r3, [r3, #0]
    f2fe:	695b      	ldr	r3, [r3, #20]
    f300:	691b      	ldr	r3, [r3, #16]
    f302:	221b      	movs	r2, #27
    f304:	4619      	mov	r1, r3
    f306:	4b4c      	ldr	r3, [pc, #304]	; (f438 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x480>)
    f308:	4798      	blx	r3
    f30a:	4603      	mov	r3, r0
    f30c:	2b00      	cmp	r3, #0
    f30e:	d10d      	bne.n	f32c <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x374>
                     ||  canopen_driver->EM_IsError(NMT->emPr->em, CO_EM_HB_CONSUMER_REMOTE_RESET))
    f310:	4b48      	ldr	r3, [pc, #288]	; (f434 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x47c>)
    f312:	681b      	ldr	r3, [r3, #0]
    f314:	1d18      	adds	r0, r3, #4
    f316:	4b46      	ldr	r3, [pc, #280]	; (f430 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x478>)
    f318:	681b      	ldr	r3, [r3, #0]
    f31a:	695b      	ldr	r3, [r3, #20]
    f31c:	691b      	ldr	r3, [r3, #16]
    f31e:	221c      	movs	r2, #28
    f320:	4619      	mov	r1, r3
    f322:	4b45      	ldr	r3, [pc, #276]	; (f438 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x480>)
    f324:	4798      	blx	r3
    f326:	4603      	mov	r3, r0
    f328:	2b00      	cmp	r3, #0
    f32a:	d001      	beq.n	f330 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x378>
    f32c:	2301      	movs	r3, #1
    f32e:	e000      	b.n	f332 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x37a>
    f330:	2300      	movs	r3, #0
                else if( canopen_driver->EM_IsError(NMT->emPr->em, CO_EM_CAN_TX_BUS_OFF)
    f332:	2b00      	cmp	r3, #0
    f334:	d010      	beq.n	f358 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x3a0>
                {
                    if(errorBehavior[0] == 0){
    f336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    f338:	781b      	ldrb	r3, [r3, #0]
    f33a:	2b00      	cmp	r3, #0
    f33c:	d104      	bne.n	f348 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x390>
                        NMT->operatingState = CO_NMT_PRE_OPERATIONAL;
    f33e:	4b3c      	ldr	r3, [pc, #240]	; (f430 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x478>)
    f340:	681b      	ldr	r3, [r3, #0]
    f342:	227f      	movs	r2, #127	; 0x7f
    f344:	701a      	strb	r2, [r3, #0]
    f346:	e007      	b.n	f358 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x3a0>
                    }
                    else if(errorBehavior[0] == 2){
    f348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    f34a:	781b      	ldrb	r3, [r3, #0]
    f34c:	2b02      	cmp	r3, #2
    f34e:	d103      	bne.n	f358 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x3a0>
                        NMT->operatingState = CO_NMT_STOPPED;
    f350:	4b37      	ldr	r3, [pc, #220]	; (f430 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x478>)
    f352:	681b      	ldr	r3, [r3, #0]
    f354:	2204      	movs	r2, #4
    f356:	701a      	strb	r2, [r3, #0]
                    }
                }
            }

            /* Generic error */
            if(errorRegister & CO_ERR_REG_GENERIC_ERR){
    f358:	f897 3020 	ldrb.w	r3, [r7, #32]
    f35c:	f003 0301 	and.w	r3, r3, #1
    f360:	2b00      	cmp	r3, #0
    f362:	d012      	beq.n	f38a <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x3d2>
                if      (errorBehavior[3] == 0) NMT->operatingState = CO_NMT_PRE_OPERATIONAL;
    f364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    f366:	3303      	adds	r3, #3
    f368:	781b      	ldrb	r3, [r3, #0]
    f36a:	2b00      	cmp	r3, #0
    f36c:	d104      	bne.n	f378 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x3c0>
    f36e:	4b30      	ldr	r3, [pc, #192]	; (f430 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x478>)
    f370:	681b      	ldr	r3, [r3, #0]
    f372:	227f      	movs	r2, #127	; 0x7f
    f374:	701a      	strb	r2, [r3, #0]
    f376:	e008      	b.n	f38a <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x3d2>
                else if (errorBehavior[3] == 2) NMT->operatingState = CO_NMT_STOPPED;
    f378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    f37a:	3303      	adds	r3, #3
    f37c:	781b      	ldrb	r3, [r3, #0]
    f37e:	2b02      	cmp	r3, #2
    f380:	d103      	bne.n	f38a <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x3d2>
    f382:	4b2b      	ldr	r3, [pc, #172]	; (f430 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x478>)
    f384:	681b      	ldr	r3, [r3, #0]
    f386:	2204      	movs	r2, #4
    f388:	701a      	strb	r2, [r3, #0]
            }

            /* Device profile error */
            if(errorRegister & CO_ERR_REG_DEV_PROFILE){
    f38a:	f897 3020 	ldrb.w	r3, [r7, #32]
    f38e:	f003 0320 	and.w	r3, r3, #32
    f392:	2b00      	cmp	r3, #0
    f394:	d012      	beq.n	f3bc <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x404>
                if      (errorBehavior[4] == 0) NMT->operatingState = CO_NMT_PRE_OPERATIONAL;
    f396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    f398:	3304      	adds	r3, #4
    f39a:	781b      	ldrb	r3, [r3, #0]
    f39c:	2b00      	cmp	r3, #0
    f39e:	d104      	bne.n	f3aa <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x3f2>
    f3a0:	4b23      	ldr	r3, [pc, #140]	; (f430 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x478>)
    f3a2:	681b      	ldr	r3, [r3, #0]
    f3a4:	227f      	movs	r2, #127	; 0x7f
    f3a6:	701a      	strb	r2, [r3, #0]
    f3a8:	e008      	b.n	f3bc <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x404>
                else if (errorBehavior[4] == 2) NMT->operatingState = CO_NMT_STOPPED;
    f3aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    f3ac:	3304      	adds	r3, #4
    f3ae:	781b      	ldrb	r3, [r3, #0]
    f3b0:	2b02      	cmp	r3, #2
    f3b2:	d103      	bne.n	f3bc <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x404>
    f3b4:	4b1e      	ldr	r3, [pc, #120]	; (f430 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x478>)
    f3b6:	681b      	ldr	r3, [r3, #0]
    f3b8:	2204      	movs	r2, #4
    f3ba:	701a      	strb	r2, [r3, #0]
            }

            /* Manufacturer specific error */
            if(errorRegister & CO_ERR_REG_MANUFACTURER){
    f3bc:	f997 3020 	ldrsb.w	r3, [r7, #32]
    f3c0:	2b00      	cmp	r3, #0
    f3c2:	da12      	bge.n	f3ea <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x432>
                if      (errorBehavior[5] == 0) NMT->operatingState = CO_NMT_PRE_OPERATIONAL;
    f3c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    f3c6:	3305      	adds	r3, #5
    f3c8:	781b      	ldrb	r3, [r3, #0]
    f3ca:	2b00      	cmp	r3, #0
    f3cc:	d104      	bne.n	f3d8 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x420>
    f3ce:	4b18      	ldr	r3, [pc, #96]	; (f430 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x478>)
    f3d0:	681b      	ldr	r3, [r3, #0]
    f3d2:	227f      	movs	r2, #127	; 0x7f
    f3d4:	701a      	strb	r2, [r3, #0]
    f3d6:	e008      	b.n	f3ea <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x432>
                else if (errorBehavior[5] == 2) NMT->operatingState = CO_NMT_STOPPED;
    f3d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    f3da:	3305      	adds	r3, #5
    f3dc:	781b      	ldrb	r3, [r3, #0]
    f3de:	2b02      	cmp	r3, #2
    f3e0:	d103      	bne.n	f3ea <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x432>
    f3e2:	4b13      	ldr	r3, [pc, #76]	; (f430 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x478>)
    f3e4:	681b      	ldr	r3, [r3, #0]
    f3e6:	2204      	movs	r2, #4
    f3e8:	701a      	strb	r2, [r3, #0]
            }

            /* if operational state is lost, send HB immediately. */
            if(NMT->operatingState != CO_NMT_OPERATIONAL)
    f3ea:	4b11      	ldr	r3, [pc, #68]	; (f430 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x478>)
    f3ec:	681b      	ldr	r3, [r3, #0]
    f3ee:	781b      	ldrb	r3, [r3, #0]
    f3f0:	2b05      	cmp	r3, #5
    f3f2:	d003      	beq.n	f3fc <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x444>
                NMT->HBproducerTimer = HBtime;
    f3f4:	4b0e      	ldr	r3, [pc, #56]	; (f430 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x478>)
    f3f6:	681b      	ldr	r3, [r3, #0]
    f3f8:	687a      	ldr	r2, [r7, #4]
    f3fa:	60da      	str	r2, [r3, #12]
        }
    }

    if(NMT->ptrState!=NULL && currentOperatingState!=NMT->operatingState){
    f3fc:	4b0c      	ldr	r3, [pc, #48]	; (f430 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x478>)
    f3fe:	681b      	ldr	r3, [r3, #0]
    f400:	69db      	ldr	r3, [r3, #28]
    f402:	2b00      	cmp	r3, #0
    f404:	d00d      	beq.n	f422 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x46a>
    f406:	4b0a      	ldr	r3, [pc, #40]	; (f430 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x478>)
    f408:	681b      	ldr	r3, [r3, #0]
    f40a:	781b      	ldrb	r3, [r3, #0]
    f40c:	7dba      	ldrb	r2, [r7, #22]
    f40e:	429a      	cmp	r2, r3
    f410:	d007      	beq.n	f422 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x46a>
        NMT->ptrState((CO_NMT_internalState_t)NMT->operatingState);
    f412:	4b07      	ldr	r3, [pc, #28]	; (f430 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x478>)
    f414:	681b      	ldr	r3, [r3, #0]
    f416:	69db      	ldr	r3, [r3, #28]
    f418:	4a05      	ldr	r2, [pc, #20]	; (f430 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x478>)
    f41a:	6812      	ldr	r2, [r2, #0]
    f41c:	7812      	ldrb	r2, [r2, #0]
    f41e:	4610      	mov	r0, r2
    f420:	4798      	blx	r3
    }

    return (CO_NMT_reset_cmd_t)NMT->resetCommand;
    f422:	4b03      	ldr	r3, [pc, #12]	; (f430 <_ZN22CO_NMT_Heartbeat_Class11NMT_ProcessEmmmhPKhPm+0x478>)
    f424:	681b      	ldr	r3, [r3, #0]
    f426:	7a5b      	ldrb	r3, [r3, #9]
}
    f428:	4618      	mov	r0, r3
    f42a:	3718      	adds	r7, #24
    f42c:	46bd      	mov	sp, r7
    f42e:	bd80      	pop	{r7, pc}
    f430:	20001acc 	.word	0x20001acc
    f434:	20001abc 	.word	0x20001abc
    f438:	0000e96d 	.word	0x0000e96d

0000f43c <_ZN11CO_OD_ClassC1Ev>:
{0x6401, 0x0C, 0xB6,  2, (void*)&CO_OD_RAM.readAnalogueInput16Bit[0]},
{0x6411, 0x08, 0xBE,  2, (void*)&CO_OD_RAM.writeAnalogueOutput16Bit[0]},
};

// default constructor
CO_OD_Class::CO_OD_Class()
    f43c:	b480      	push	{r7}
    f43e:	b083      	sub	sp, #12
    f440:	af00      	add	r7, sp, #0
    f442:	6078      	str	r0, [r7, #4]
{
} //CO_OD
    f444:	687b      	ldr	r3, [r7, #4]
    f446:	4618      	mov	r0, r3
    f448:	370c      	adds	r7, #12
    f44a:	46bd      	mov	sp, r7
    f44c:	bc80      	pop	{r7}
    f44e:	4770      	bx	lr

0000f450 <_ZN11CO_OD_ClassD1Ev>:

// default destructor
CO_OD_Class::~CO_OD_Class()
    f450:	b480      	push	{r7}
    f452:	b083      	sub	sp, #12
    f454:	af00      	add	r7, sp, #0
    f456:	6078      	str	r0, [r7, #4]
{
} //~CO_OD
    f458:	687b      	ldr	r3, [r7, #4]
    f45a:	4618      	mov	r0, r3
    f45c:	370c      	adds	r7, #12
    f45e:	46bd      	mov	sp, r7
    f460:	bc80      	pop	{r7}
    f462:	4770      	bx	lr

0000f464 <_ZN11CO_OD_Class27Pass_Temperature_To_voltageEv>:

void CO_OD_Class::Pass_Temperature_To_voltage(void){
    f464:	b480      	push	{r7}
    f466:	b083      	sub	sp, #12
    f468:	af00      	add	r7, sp, #0
    f46a:	6078      	str	r0, [r7, #4]
	memcpy((void*)CO_OD_RAM.voltage,(void*)CO_OD_RAM.temperature,2);
    f46c:	4b05      	ldr	r3, [pc, #20]	; (f484 <_ZN11CO_OD_Class27Pass_Temperature_To_voltageEv+0x20>)
    f46e:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
    f472:	4b04      	ldr	r3, [pc, #16]	; (f484 <_ZN11CO_OD_Class27Pass_Temperature_To_voltageEv+0x20>)
    f474:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
	
	// entry_No = canopen_driver->CO_OD_find(0x2108);
	 
}
    f478:	bf00      	nop
    f47a:	370c      	adds	r7, #12
    f47c:	46bd      	mov	sp, r7
    f47e:	bc80      	pop	{r7}
    f480:	4770      	bx	lr
    f482:	bf00      	nop
    f484:	20000210 	.word	0x20000210

0000f488 <_ZN12CO_PDO_ClassC1Ev>:
#include "string.h"

static CO_CANtx_t local_tx_buffer;
static CO_CANtx_t local_rx_buffer;
// default constructor
CO_PDO_Class::CO_PDO_Class()
    f488:	b480      	push	{r7}
    f48a:	b083      	sub	sp, #12
    f48c:	af00      	add	r7, sp, #0
    f48e:	6078      	str	r0, [r7, #4]
{
} //CO_PDO_Class
    f490:	687b      	ldr	r3, [r7, #4]
    f492:	4618      	mov	r0, r3
    f494:	370c      	adds	r7, #12
    f496:	46bd      	mov	sp, r7
    f498:	bc80      	pop	{r7}
    f49a:	4770      	bx	lr

0000f49c <_ZN12CO_PDO_ClassD1Ev>:

// default destructor
CO_PDO_Class::~CO_PDO_Class()
    f49c:	b480      	push	{r7}
    f49e:	b083      	sub	sp, #12
    f4a0:	af00      	add	r7, sp, #0
    f4a2:	6078      	str	r0, [r7, #4]
{
} //~CO_PDO_Class
    f4a4:	687b      	ldr	r3, [r7, #4]
    f4a6:	4618      	mov	r0, r3
    f4a8:	370c      	adds	r7, #12
    f4aa:	46bd      	mov	sp, r7
    f4ac:	bc80      	pop	{r7}
    f4ae:	4770      	bx	lr

0000f4b0 <_ZL14CO_PDO_receivePvPK13CO_CANrxMsg_t>:
 * message with correct identifier will be received. For more information and
 * description of parameters see file CO_driver.h.
 * If new message arrives and previous message wasn't processed yet, then
 * previous message will be lost and overwritten by new message. That's OK with PDOs.
 */
static void CO_PDO_receive(void *object, const CO_CANrxMsg_t *msg){
    f4b0:	b580      	push	{r7, lr}
    f4b2:	b084      	sub	sp, #16
    f4b4:	af00      	add	r7, sp, #0
    f4b6:	6078      	str	r0, [r7, #4]
    f4b8:	6039      	str	r1, [r7, #0]
    CO_RPDO_t *RPDO;

    RPDO = (CO_RPDO_t*)object;   /* this is the correct pointer type of the first argument */
    f4ba:	687b      	ldr	r3, [r7, #4]
    f4bc:	60fb      	str	r3, [r7, #12]

    if( (RPDO->valid) &&
    f4be:	68fb      	ldr	r3, [r7, #12]
    f4c0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
    f4c4:	2b00      	cmp	r3, #0
    f4c6:	d076      	beq.n	f5b6 <_ZL14CO_PDO_receivePvPK13CO_CANrxMsg_t+0x106>
        (*RPDO->operatingState == CO_NMT_OPERATIONAL) &&
    f4c8:	68fb      	ldr	r3, [r7, #12]
    f4ca:	695b      	ldr	r3, [r3, #20]
    f4cc:	781b      	ldrb	r3, [r3, #0]
    if( (RPDO->valid) &&
    f4ce:	2b05      	cmp	r3, #5
    f4d0:	d171      	bne.n	f5b6 <_ZL14CO_PDO_receivePvPK13CO_CANrxMsg_t+0x106>
        (msg->DLC >= RPDO->dataLength))
    f4d2:	683b      	ldr	r3, [r7, #0]
    f4d4:	7d1b      	ldrb	r3, [r3, #20]
    f4d6:	461a      	mov	r2, r3
    f4d8:	68fb      	ldr	r3, [r7, #12]
    f4da:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
        (*RPDO->operatingState == CO_NMT_OPERATIONAL) &&
    f4de:	429a      	cmp	r2, r3
    f4e0:	db69      	blt.n	f5b6 <_ZL14CO_PDO_receivePvPK13CO_CANrxMsg_t+0x106>
    {
        if(RPDO->synchronous && RPDO->SYNC->CANrxToggle) {
    f4e2:	68fb      	ldr	r3, [r7, #12]
    f4e4:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
    f4e8:	2b00      	cmp	r3, #0
    f4ea:	d031      	beq.n	f550 <_ZL14CO_PDO_receivePvPK13CO_CANrxMsg_t+0xa0>
    f4ec:	68fb      	ldr	r3, [r7, #12]
    f4ee:	689b      	ldr	r3, [r3, #8]
    f4f0:	7edb      	ldrb	r3, [r3, #27]
    f4f2:	2b00      	cmp	r3, #0
    f4f4:	d02c      	beq.n	f550 <_ZL14CO_PDO_receivePvPK13CO_CANrxMsg_t+0xa0>
            /* copy data into second buffer and set 'new message' flag */
            RPDO->CANrxData[1][0] = msg->data[0];
    f4f6:	683b      	ldr	r3, [r7, #0]
    f4f8:	7d5a      	ldrb	r2, [r3, #21]
    f4fa:	68fb      	ldr	r3, [r7, #12]
    f4fc:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
            RPDO->CANrxData[1][1] = msg->data[1];
    f500:	683b      	ldr	r3, [r7, #0]
    f502:	7d9a      	ldrb	r2, [r3, #22]
    f504:	68fb      	ldr	r3, [r7, #12]
    f506:	f883 204f 	strb.w	r2, [r3, #79]	; 0x4f
            RPDO->CANrxData[1][2] = msg->data[2];
    f50a:	683b      	ldr	r3, [r7, #0]
    f50c:	7dda      	ldrb	r2, [r3, #23]
    f50e:	68fb      	ldr	r3, [r7, #12]
    f510:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            RPDO->CANrxData[1][3] = msg->data[3];
    f514:	683b      	ldr	r3, [r7, #0]
    f516:	7e1a      	ldrb	r2, [r3, #24]
    f518:	68fb      	ldr	r3, [r7, #12]
    f51a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
            RPDO->CANrxData[1][4] = msg->data[4];
    f51e:	683b      	ldr	r3, [r7, #0]
    f520:	7e5a      	ldrb	r2, [r3, #25]
    f522:	68fb      	ldr	r3, [r7, #12]
    f524:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
            RPDO->CANrxData[1][5] = msg->data[5];
    f528:	683b      	ldr	r3, [r7, #0]
    f52a:	7e9a      	ldrb	r2, [r3, #26]
    f52c:	68fb      	ldr	r3, [r7, #12]
    f52e:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            RPDO->CANrxData[1][6] = msg->data[6];
    f532:	683b      	ldr	r3, [r7, #0]
    f534:	7eda      	ldrb	r2, [r3, #27]
    f536:	68fb      	ldr	r3, [r7, #12]
    f538:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
            RPDO->CANrxData[1][7] = msg->data[7];
    f53c:	683b      	ldr	r3, [r7, #0]
    f53e:	7f1a      	ldrb	r2, [r3, #28]
    f540:	68fb      	ldr	r3, [r7, #12]
    f542:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

            RPDO->CANrxNew[1] = true;
    f546:	68fb      	ldr	r3, [r7, #12]
    f548:	2201      	movs	r2, #1
    f54a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    f54e:	e02b      	b.n	f5a8 <_ZL14CO_PDO_receivePvPK13CO_CANrxMsg_t+0xf8>
        }
        else {
            /* copy data into default buffer and set 'new message' flag */
            RPDO->CANrxData[0][0] = msg->data[0];
    f550:	683b      	ldr	r3, [r7, #0]
    f552:	7d5a      	ldrb	r2, [r3, #21]
    f554:	68fb      	ldr	r3, [r7, #12]
    f556:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
            RPDO->CANrxData[0][1] = msg->data[1];
    f55a:	683b      	ldr	r3, [r7, #0]
    f55c:	7d9a      	ldrb	r2, [r3, #22]
    f55e:	68fb      	ldr	r3, [r7, #12]
    f560:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
            RPDO->CANrxData[0][2] = msg->data[2];
    f564:	683b      	ldr	r3, [r7, #0]
    f566:	7dda      	ldrb	r2, [r3, #23]
    f568:	68fb      	ldr	r3, [r7, #12]
    f56a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
            RPDO->CANrxData[0][3] = msg->data[3];
    f56e:	683b      	ldr	r3, [r7, #0]
    f570:	7e1a      	ldrb	r2, [r3, #24]
    f572:	68fb      	ldr	r3, [r7, #12]
    f574:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
            RPDO->CANrxData[0][4] = msg->data[4];
    f578:	683b      	ldr	r3, [r7, #0]
    f57a:	7e5a      	ldrb	r2, [r3, #25]
    f57c:	68fb      	ldr	r3, [r7, #12]
    f57e:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
            RPDO->CANrxData[0][5] = msg->data[5];
    f582:	683b      	ldr	r3, [r7, #0]
    f584:	7e9a      	ldrb	r2, [r3, #26]
    f586:	68fb      	ldr	r3, [r7, #12]
    f588:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
            RPDO->CANrxData[0][6] = msg->data[6];
    f58c:	683b      	ldr	r3, [r7, #0]
    f58e:	7eda      	ldrb	r2, [r3, #27]
    f590:	68fb      	ldr	r3, [r7, #12]
    f592:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            RPDO->CANrxData[0][7] = msg->data[7];
    f596:	683b      	ldr	r3, [r7, #0]
    f598:	7f1a      	ldrb	r2, [r3, #28]
    f59a:	68fb      	ldr	r3, [r7, #12]
    f59c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

            RPDO->CANrxNew[0] = true;
    f5a0:	68fb      	ldr	r3, [r7, #12]
    f5a2:	2201      	movs	r2, #1
    f5a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        }
		memcpy(&local_rx_buffer.data[0],(void *)(&msg->data[0]),8);
    f5a8:	683b      	ldr	r3, [r7, #0]
    f5aa:	3315      	adds	r3, #21
    f5ac:	2208      	movs	r2, #8
    f5ae:	4619      	mov	r1, r3
    f5b0:	4803      	ldr	r0, [pc, #12]	; (f5c0 <_ZL14CO_PDO_receivePvPK13CO_CANrxMsg_t+0x110>)
    f5b2:	4b04      	ldr	r3, [pc, #16]	; (f5c4 <_ZL14CO_PDO_receivePvPK13CO_CANrxMsg_t+0x114>)
    f5b4:	4798      	blx	r3
    }
}
    f5b6:	bf00      	nop
    f5b8:	3710      	adds	r7, #16
    f5ba:	46bd      	mov	sp, r7
    f5bc:	bd80      	pop	{r7, pc}
    f5be:	bf00      	nop
    f5c0:	20001ae5 	.word	0x20001ae5
    f5c4:	00012f1d 	.word	0x00012f1d

0000f5c8 <_ZL16CO_RPDOconfigComP9CO_RPDO_tm>:
 *
 * @param RPDO RPDO object.
 * @param COB_IDUsedByRPDO _RPDO communication parameter_, _COB-ID for PDO_ variable
 * from Object dictionary (index 0x1400+, subindex 1).
 */
static void CO_RPDOconfigCom(CO_RPDO_t* RPDO, uint32_t COB_IDUsedByRPDO){
    f5c8:	b590      	push	{r4, r7, lr}
    f5ca:	b089      	sub	sp, #36	; 0x24
    f5cc:	af04      	add	r7, sp, #16
    f5ce:	6078      	str	r0, [r7, #4]
    f5d0:	6039      	str	r1, [r7, #0]
    uint32_t ID;
    CO_ReturnError_t r;

    ID = (uint32_t)COB_IDUsedByRPDO;
    f5d2:	683b      	ldr	r3, [r7, #0]
    f5d4:	60fb      	str	r3, [r7, #12]

    /* is RPDO used? */
    if((COB_IDUsedByRPDO & 0xBFFFF800L) == 0 && RPDO->dataLength && ID){
    f5d6:	683a      	ldr	r2, [r7, #0]
    f5d8:	4b2d      	ldr	r3, [pc, #180]	; (f690 <_ZL16CO_RPDOconfigComP9CO_RPDO_tm+0xc8>)
    f5da:	4013      	ands	r3, r2
    f5dc:	2b00      	cmp	r3, #0
    f5de:	d123      	bne.n	f628 <_ZL16CO_RPDOconfigComP9CO_RPDO_tm+0x60>
    f5e0:	687b      	ldr	r3, [r7, #4]
    f5e2:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
    f5e6:	2b00      	cmp	r3, #0
    f5e8:	d01e      	beq.n	f628 <_ZL16CO_RPDOconfigComP9CO_RPDO_tm+0x60>
    f5ea:	68fb      	ldr	r3, [r7, #12]
    f5ec:	2b00      	cmp	r3, #0
    f5ee:	d01b      	beq.n	f628 <_ZL16CO_RPDOconfigComP9CO_RPDO_tm+0x60>
        /* is used default COB-ID? */
        if(ID == RPDO->defaultCOB_ID) ID += RPDO->nodeId;
    f5f0:	687b      	ldr	r3, [r7, #4]
    f5f2:	69da      	ldr	r2, [r3, #28]
    f5f4:	68fb      	ldr	r3, [r7, #12]
    f5f6:	429a      	cmp	r2, r3
    f5f8:	d105      	bne.n	f606 <_ZL16CO_RPDOconfigComP9CO_RPDO_tm+0x3e>
    f5fa:	687b      	ldr	r3, [r7, #4]
    f5fc:	7e1b      	ldrb	r3, [r3, #24]
    f5fe:	461a      	mov	r2, r3
    f600:	68fb      	ldr	r3, [r7, #12]
    f602:	4413      	add	r3, r2
    f604:	60fb      	str	r3, [r7, #12]
        RPDO->valid = true;
    f606:	687b      	ldr	r3, [r7, #4]
    f608:	2201      	movs	r2, #1
    f60a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        RPDO->synchronous = (RPDO->RPDOCommPar->transmissionType <= 240) ? true : false;
    f60e:	687b      	ldr	r3, [r7, #4]
    f610:	68db      	ldr	r3, [r3, #12]
    f612:	7a1b      	ldrb	r3, [r3, #8]
    f614:	2bf0      	cmp	r3, #240	; 0xf0
    f616:	bfd4      	ite	le
    f618:	2301      	movle	r3, #1
    f61a:	2300      	movgt	r3, #0
    f61c:	b2db      	uxtb	r3, r3
    f61e:	461a      	mov	r2, r3
    f620:	687b      	ldr	r3, [r7, #4]
    f622:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
    f626:	e00d      	b.n	f644 <_ZL16CO_RPDOconfigComP9CO_RPDO_tm+0x7c>
    }
    else{
        ID = 0;
    f628:	2300      	movs	r3, #0
    f62a:	60fb      	str	r3, [r7, #12]
        RPDO->valid = false;
    f62c:	687b      	ldr	r3, [r7, #4]
    f62e:	2200      	movs	r2, #0
    f630:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        RPDO->CANrxNew[0] = RPDO->CANrxNew[1] = false;
    f634:	687b      	ldr	r3, [r7, #4]
    f636:	2200      	movs	r2, #0
    f638:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    f63c:	687b      	ldr	r3, [r7, #4]
    f63e:	2200      	movs	r2, #0
    f640:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    r = canopen_driver->CAN_Rx_BufferInit(
    f644:	4b13      	ldr	r3, [pc, #76]	; (f694 <_ZL16CO_RPDOconfigComP9CO_RPDO_tm+0xcc>)
    f646:	6818      	ldr	r0, [r3, #0]
    f648:	687b      	ldr	r3, [r7, #4]
    f64a:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
            RPDO->CANdevRxIdx,      /* rx buffer index */
            ID,                     /* CAN identifier */
            0x7FF,                  /* mask */
            0,                      /* rtr */
            (void*)RPDO,            /* object passed to receive function */
            CO_PDO_receive);        /* this function will process received message */
    f64c:	4b12      	ldr	r3, [pc, #72]	; (f698 <_ZL16CO_RPDOconfigComP9CO_RPDO_tm+0xd0>)
    f64e:	9302      	str	r3, [sp, #8]
    f650:	687b      	ldr	r3, [r7, #4]
    f652:	9301      	str	r3, [sp, #4]
    f654:	2300      	movs	r3, #0
    f656:	9300      	str	r3, [sp, #0]
    f658:	f240 73ff 	movw	r3, #2047	; 0x7ff
    f65c:	68fa      	ldr	r2, [r7, #12]
    f65e:	4c0f      	ldr	r4, [pc, #60]	; (f69c <_ZL16CO_RPDOconfigComP9CO_RPDO_tm+0xd4>)
    f660:	47a0      	blx	r4
    f662:	4603      	mov	r3, r0
    f664:	72fb      	strb	r3, [r7, #11]
    if(r != CO_ERROR_NO){
    f666:	f997 300b 	ldrsb.w	r3, [r7, #11]
    f66a:	2b00      	cmp	r3, #0
    f66c:	d00b      	beq.n	f686 <_ZL16CO_RPDOconfigComP9CO_RPDO_tm+0xbe>
        RPDO->valid = false;
    f66e:	687b      	ldr	r3, [r7, #4]
    f670:	2200      	movs	r2, #0
    f672:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        RPDO->CANrxNew[0] = RPDO->CANrxNew[1] = false;
    f676:	687b      	ldr	r3, [r7, #4]
    f678:	2200      	movs	r2, #0
    f67a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    f67e:	687b      	ldr	r3, [r7, #4]
    f680:	2200      	movs	r2, #0
    f682:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
}
    f686:	bf00      	nop
    f688:	3714      	adds	r7, #20
    f68a:	46bd      	mov	sp, r7
    f68c:	bd90      	pop	{r4, r7, pc}
    f68e:	bf00      	nop
    f690:	bffff800 	.word	0xbffff800
    f694:	20001abc 	.word	0x20001abc
    f698:	0000f4b1 	.word	0x0000f4b1
    f69c:	0000daa9 	.word	0x0000daa9

0000f6a0 <_ZL16CO_TPDOconfigComP9CO_TPDO_tmh>:
 * @param TPDO TPDO object.
 * @param COB_IDUsedByTPDO _TPDO communication parameter_, _COB-ID for PDO_ variable
 * from Object dictionary (index 0x1400+, subindex 1).
 * @param syncFlag Indicate, if TPDO is synchronous.
 */
static void CO_TPDOconfigCom(CO_TPDO_t* TPDO, uint32_t COB_IDUsedByTPDO, uint8_t syncFlag){
    f6a0:	b590      	push	{r4, r7, lr}
    f6a2:	b089      	sub	sp, #36	; 0x24
    f6a4:	af02      	add	r7, sp, #8
    f6a6:	60f8      	str	r0, [r7, #12]
    f6a8:	60b9      	str	r1, [r7, #8]
    f6aa:	4613      	mov	r3, r2
    f6ac:	71fb      	strb	r3, [r7, #7]
    uint32_t ID;

    ID = (uint32_t)COB_IDUsedByTPDO;
    f6ae:	68bb      	ldr	r3, [r7, #8]
    f6b0:	617b      	str	r3, [r7, #20]

    /* is TPDO used? */
    if((COB_IDUsedByTPDO & 0xBFFFF800L) == 0 && TPDO->dataLength && ID){
    f6b2:	68ba      	ldr	r2, [r7, #8]
    f6b4:	4b1c      	ldr	r3, [pc, #112]	; (f728 <_ZL16CO_TPDOconfigComP9CO_TPDO_tmh+0x88>)
    f6b6:	4013      	ands	r3, r2
    f6b8:	2b00      	cmp	r3, #0
    f6ba:	d115      	bne.n	f6e8 <_ZL16CO_TPDOconfigComP9CO_TPDO_tmh+0x48>
    f6bc:	68fb      	ldr	r3, [r7, #12]
    f6be:	7f9b      	ldrb	r3, [r3, #30]
    f6c0:	2b00      	cmp	r3, #0
    f6c2:	d011      	beq.n	f6e8 <_ZL16CO_TPDOconfigComP9CO_TPDO_tmh+0x48>
    f6c4:	697b      	ldr	r3, [r7, #20]
    f6c6:	2b00      	cmp	r3, #0
    f6c8:	d00e      	beq.n	f6e8 <_ZL16CO_TPDOconfigComP9CO_TPDO_tmh+0x48>
        /* is used default COB-ID? */
        if(ID == TPDO->defaultCOB_ID) ID += TPDO->nodeId;
    f6ca:	68fb      	ldr	r3, [r7, #12]
    f6cc:	699a      	ldr	r2, [r3, #24]
    f6ce:	697b      	ldr	r3, [r7, #20]
    f6d0:	429a      	cmp	r2, r3
    f6d2:	d105      	bne.n	f6e0 <_ZL16CO_TPDOconfigComP9CO_TPDO_tmh+0x40>
    f6d4:	68fb      	ldr	r3, [r7, #12]
    f6d6:	7d1b      	ldrb	r3, [r3, #20]
    f6d8:	461a      	mov	r2, r3
    f6da:	697b      	ldr	r3, [r7, #20]
    f6dc:	4413      	add	r3, r2
    f6de:	617b      	str	r3, [r7, #20]
        TPDO->valid = true;
    f6e0:	68fb      	ldr	r3, [r7, #12]
    f6e2:	2201      	movs	r2, #1
    f6e4:	775a      	strb	r2, [r3, #29]
    f6e6:	e004      	b.n	f6f2 <_ZL16CO_TPDOconfigComP9CO_TPDO_tmh+0x52>
    }
    else{
        ID = 0;
    f6e8:	2300      	movs	r3, #0
    f6ea:	617b      	str	r3, [r7, #20]
        TPDO->valid = false;
    f6ec:	68fb      	ldr	r3, [r7, #12]
    f6ee:	2200      	movs	r2, #0
    f6f0:	775a      	strb	r2, [r3, #29]
    }

    TPDO->CANtxBuff = canopen_driver->CAN_Tx_BufferInit(
    f6f2:	4b0e      	ldr	r3, [pc, #56]	; (f72c <_ZL16CO_TPDOconfigComP9CO_TPDO_tmh+0x8c>)
    f6f4:	6818      	ldr	r0, [r3, #0]
    f6f6:	68fb      	ldr	r3, [r7, #12]
    f6f8:	6d59      	ldr	r1, [r3, #84]	; 0x54
    f6fa:	68fb      	ldr	r3, [r7, #12]
    f6fc:	7f9b      	ldrb	r3, [r3, #30]
    f6fe:	79fa      	ldrb	r2, [r7, #7]
    f700:	9201      	str	r2, [sp, #4]
    f702:	9300      	str	r3, [sp, #0]
    f704:	2300      	movs	r3, #0
    f706:	697a      	ldr	r2, [r7, #20]
    f708:	4c09      	ldr	r4, [pc, #36]	; (f730 <_ZL16CO_TPDOconfigComP9CO_TPDO_tmh+0x90>)
    f70a:	47a0      	blx	r4
    f70c:	4602      	mov	r2, r0
    f70e:	68fb      	ldr	r3, [r7, #12]
    f710:	651a      	str	r2, [r3, #80]	; 0x50
            ID,                        /* CAN identifier */
            0,                         /* rtr */
            TPDO->dataLength,          /* number of data bytes */
            syncFlag);                 /* synchronous message flag bit */

    if(TPDO->CANtxBuff == 0){
    f712:	68fb      	ldr	r3, [r7, #12]
    f714:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    f716:	2b00      	cmp	r3, #0
    f718:	d102      	bne.n	f720 <_ZL16CO_TPDOconfigComP9CO_TPDO_tmh+0x80>
        TPDO->valid = false;
    f71a:	68fb      	ldr	r3, [r7, #12]
    f71c:	2200      	movs	r2, #0
    f71e:	775a      	strb	r2, [r3, #29]
    }
}
    f720:	bf00      	nop
    f722:	371c      	adds	r7, #28
    f724:	46bd      	mov	sp, r7
    f726:	bd90      	pop	{r4, r7, pc}
    f728:	bffff800 	.word	0xbffff800
    f72c:	20001abc 	.word	0x20001abc
    f730:	0000dba9 	.word	0x0000dba9

0000f734 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_>:
        uint8_t                 R_T,
        uint8_t               **ppData,
        uint8_t                *pLength,
        uint8_t                *pSendIfCOSFlags,
        uint8_t                *pIsMultibyteVar)
{
    f734:	b580      	push	{r7, lr}
    f736:	b08a      	sub	sp, #40	; 0x28
    f738:	af00      	add	r7, sp, #0
    f73a:	60f8      	str	r0, [r7, #12]
    f73c:	60b9      	str	r1, [r7, #8]
    f73e:	603b      	str	r3, [r7, #0]
    f740:	4613      	mov	r3, r2
    f742:	71fb      	strb	r3, [r7, #7]
    uint8_t subIndex;
    uint8_t dataLen;
    uint8_t objectLen;
    uint8_t attr;

    index = (uint32_t)(map>>16);
    f744:	68bb      	ldr	r3, [r7, #8]
    f746:	0c1b      	lsrs	r3, r3, #16
    f748:	61fb      	str	r3, [r7, #28]
    subIndex = (uint8_t)(map>>8);
    f74a:	68bb      	ldr	r3, [r7, #8]
    f74c:	0a1b      	lsrs	r3, r3, #8
    f74e:	76fb      	strb	r3, [r7, #27]
    dataLen = (uint8_t) map;   /* data length in bits */
    f750:	68bb      	ldr	r3, [r7, #8]
    f752:	76bb      	strb	r3, [r7, #26]

    /* data length must be byte aligned */
    if(dataLen&0x07) return CO_SDO_AB_NO_MAP;   /* Object cannot be mapped to the PDO. */
    f754:	7ebb      	ldrb	r3, [r7, #26]
    f756:	f003 0307 	and.w	r3, r3, #7
    f75a:	2b00      	cmp	r3, #0
    f75c:	d001      	beq.n	f762 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x2e>
    f75e:	4b6b      	ldr	r3, [pc, #428]	; (f90c <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1d8>)
    f760:	e0cf      	b.n	f902 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1ce>

    dataLen >>= 3;    /* new data length is in bytes */
    f762:	7ebb      	ldrb	r3, [r7, #26]
    f764:	10db      	asrs	r3, r3, #3
    f766:	76bb      	strb	r3, [r7, #26]
    *pLength += dataLen;
    f768:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    f76a:	781a      	ldrb	r2, [r3, #0]
    f76c:	7ebb      	ldrb	r3, [r7, #26]
    f76e:	4413      	add	r3, r2
    f770:	b2da      	uxtb	r2, r3
    f772:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    f774:	701a      	strb	r2, [r3, #0]

    /* total PDO length can not be more than 8 bytes */
    if(*pLength > 8) return CO_SDO_AB_MAP_LEN;  /* The number and length of the objects to be mapped would exceed PDO length. */
    f776:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    f778:	781b      	ldrb	r3, [r3, #0]
    f77a:	2b08      	cmp	r3, #8
    f77c:	dd01      	ble.n	f782 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x4e>
    f77e:	4b64      	ldr	r3, [pc, #400]	; (f910 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1dc>)
    f780:	e0bf      	b.n	f902 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1ce>

    /* is there a reference to dummy entries */
    if(index <=7 && subIndex == 0){
    f782:	69fb      	ldr	r3, [r7, #28]
    f784:	2b07      	cmp	r3, #7
    f786:	d832      	bhi.n	f7ee <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0xba>
    f788:	7efb      	ldrb	r3, [r7, #27]
    f78a:	2b00      	cmp	r3, #0
    f78c:	d12f      	bne.n	f7ee <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0xba>
        static uint32_t dummyTX = 0;
        static uint32_t dummyRX;
        uint8_t dummySize = 4;
    f78e:	2304      	movs	r3, #4
    f790:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

        if(index<2) dummySize = 0;
    f794:	69fb      	ldr	r3, [r7, #28]
    f796:	2b01      	cmp	r3, #1
    f798:	d803      	bhi.n	f7a2 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x6e>
    f79a:	2300      	movs	r3, #0
    f79c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    f7a0:	e012      	b.n	f7c8 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x94>
        else if(index==2 || index==5) dummySize = 1;
    f7a2:	69fb      	ldr	r3, [r7, #28]
    f7a4:	2b02      	cmp	r3, #2
    f7a6:	d002      	beq.n	f7ae <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x7a>
    f7a8:	69fb      	ldr	r3, [r7, #28]
    f7aa:	2b05      	cmp	r3, #5
    f7ac:	d103      	bne.n	f7b6 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x82>
    f7ae:	2301      	movs	r3, #1
    f7b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    f7b4:	e008      	b.n	f7c8 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x94>
        else if(index==3 || index==6) dummySize = 2;
    f7b6:	69fb      	ldr	r3, [r7, #28]
    f7b8:	2b03      	cmp	r3, #3
    f7ba:	d002      	beq.n	f7c2 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x8e>
    f7bc:	69fb      	ldr	r3, [r7, #28]
    f7be:	2b06      	cmp	r3, #6
    f7c0:	d102      	bne.n	f7c8 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x94>
    f7c2:	2302      	movs	r3, #2
    f7c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

        /* is size of variable big enough for map */
        if(dummySize < dataLen) return CO_SDO_AB_NO_MAP;   /* Object cannot be mapped to the PDO. */
    f7c8:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
    f7cc:	7ebb      	ldrb	r3, [r7, #26]
    f7ce:	429a      	cmp	r2, r3
    f7d0:	da01      	bge.n	f7d6 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0xa2>
    f7d2:	4b4e      	ldr	r3, [pc, #312]	; (f90c <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1d8>)
    f7d4:	e095      	b.n	f902 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1ce>

        /* Data and ODE pointer */
        if(R_T == 0) *ppData = (uint8_t*) &dummyRX;
    f7d6:	79fb      	ldrb	r3, [r7, #7]
    f7d8:	2b00      	cmp	r3, #0
    f7da:	d103      	bne.n	f7e4 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0xb0>
    f7dc:	683b      	ldr	r3, [r7, #0]
    f7de:	4a4d      	ldr	r2, [pc, #308]	; (f914 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1e0>)
    f7e0:	601a      	str	r2, [r3, #0]
    f7e2:	e002      	b.n	f7ea <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0xb6>
        else         *ppData = (uint8_t*) &dummyTX;
    f7e4:	683b      	ldr	r3, [r7, #0]
    f7e6:	4a4c      	ldr	r2, [pc, #304]	; (f918 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1e4>)
    f7e8:	601a      	str	r2, [r3, #0]

        return 0;
    f7ea:	2300      	movs	r3, #0
    f7ec:	e089      	b.n	f902 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1ce>
    }

    /* find object in Object Dictionary */
    entryNo = canopen_driver->CO_OD_find( index);
    f7ee:	4b4b      	ldr	r3, [pc, #300]	; (f91c <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1e8>)
    f7f0:	681b      	ldr	r3, [r3, #0]
    f7f2:	3304      	adds	r3, #4
    f7f4:	69f9      	ldr	r1, [r7, #28]
    f7f6:	4618      	mov	r0, r3
    f7f8:	4b49      	ldr	r3, [pc, #292]	; (f920 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1ec>)
    f7fa:	4798      	blx	r3
    f7fc:	6178      	str	r0, [r7, #20]

    /* Does object exist in OD? */
    if(entryNo == 0xFFFF || subIndex > SDO->OD[entryNo].maxSubIndex)
    f7fe:	697b      	ldr	r3, [r7, #20]
    f800:	f64f 72ff 	movw	r2, #65535	; 0xffff
    f804:	4293      	cmp	r3, r2
    f806:	d00b      	beq.n	f820 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0xec>
    f808:	7ef9      	ldrb	r1, [r7, #27]
    f80a:	68fb      	ldr	r3, [r7, #12]
    f80c:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
    f80e:	697a      	ldr	r2, [r7, #20]
    f810:	4613      	mov	r3, r2
    f812:	009b      	lsls	r3, r3, #2
    f814:	4413      	add	r3, r2
    f816:	009b      	lsls	r3, r3, #2
    f818:	4403      	add	r3, r0
    f81a:	791b      	ldrb	r3, [r3, #4]
    f81c:	4299      	cmp	r1, r3
    f81e:	dd01      	ble.n	f824 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0xf0>
        return CO_SDO_AB_NOT_EXIST;   /* Object does not exist in the object dictionary. */
    f820:	4b40      	ldr	r3, [pc, #256]	; (f924 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1f0>)
    f822:	e06e      	b.n	f902 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1ce>

    attr = canopen_driver->CO_OD_getAttribute( entryNo, subIndex);
    f824:	4b3d      	ldr	r3, [pc, #244]	; (f91c <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1e8>)
    f826:	681b      	ldr	r3, [r3, #0]
    f828:	3304      	adds	r3, #4
    f82a:	7efa      	ldrb	r2, [r7, #27]
    f82c:	6979      	ldr	r1, [r7, #20]
    f82e:	4618      	mov	r0, r3
    f830:	4b3d      	ldr	r3, [pc, #244]	; (f928 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1f4>)
    f832:	4798      	blx	r3
    f834:	4603      	mov	r3, r0
    f836:	74fb      	strb	r3, [r7, #19]
    /* Is object Mappable for RPDO? */
    if(R_T==0 && !((attr&CO_ODA_RPDO_MAPABLE) && (attr&CO_ODA_WRITEABLE))) return CO_SDO_AB_NO_MAP;   /* Object cannot be mapped to the PDO. */
    f838:	79fb      	ldrb	r3, [r7, #7]
    f83a:	2b00      	cmp	r3, #0
    f83c:	d10b      	bne.n	f856 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x122>
    f83e:	7cfb      	ldrb	r3, [r7, #19]
    f840:	f003 0310 	and.w	r3, r3, #16
    f844:	2b00      	cmp	r3, #0
    f846:	d004      	beq.n	f852 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x11e>
    f848:	7cfb      	ldrb	r3, [r7, #19]
    f84a:	f003 0308 	and.w	r3, r3, #8
    f84e:	2b00      	cmp	r3, #0
    f850:	d101      	bne.n	f856 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x122>
    f852:	4b2e      	ldr	r3, [pc, #184]	; (f90c <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1d8>)
    f854:	e055      	b.n	f902 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1ce>
    /* Is object Mappable for TPDO? */
    if(R_T!=0 && !((attr&CO_ODA_TPDO_MAPABLE) && (attr&CO_ODA_READABLE))) return CO_SDO_AB_NO_MAP;   /* Object cannot be mapped to the PDO. */
    f856:	79fb      	ldrb	r3, [r7, #7]
    f858:	2b00      	cmp	r3, #0
    f85a:	d00b      	beq.n	f874 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x140>
    f85c:	7cfb      	ldrb	r3, [r7, #19]
    f85e:	f003 0320 	and.w	r3, r3, #32
    f862:	2b00      	cmp	r3, #0
    f864:	d004      	beq.n	f870 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x13c>
    f866:	7cfb      	ldrb	r3, [r7, #19]
    f868:	f003 0304 	and.w	r3, r3, #4
    f86c:	2b00      	cmp	r3, #0
    f86e:	d101      	bne.n	f874 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x140>
    f870:	4b26      	ldr	r3, [pc, #152]	; (f90c <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1d8>)
    f872:	e046      	b.n	f902 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1ce>

    /* is size of variable big enough for map */
    objectLen = canopen_driver->CO_OD_getLength( entryNo, subIndex);
    f874:	4b29      	ldr	r3, [pc, #164]	; (f91c <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1e8>)
    f876:	681b      	ldr	r3, [r3, #0]
    f878:	3304      	adds	r3, #4
    f87a:	7efa      	ldrb	r2, [r7, #27]
    f87c:	6979      	ldr	r1, [r7, #20]
    f87e:	4618      	mov	r0, r3
    f880:	4b2a      	ldr	r3, [pc, #168]	; (f92c <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1f8>)
    f882:	4798      	blx	r3
    f884:	4603      	mov	r3, r0
    f886:	74bb      	strb	r3, [r7, #18]
    if(objectLen < dataLen) return CO_SDO_AB_NO_MAP;   /* Object cannot be mapped to the PDO. */
    f888:	7cba      	ldrb	r2, [r7, #18]
    f88a:	7ebb      	ldrb	r3, [r7, #26]
    f88c:	429a      	cmp	r2, r3
    f88e:	da01      	bge.n	f894 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x160>
    f890:	4b1e      	ldr	r3, [pc, #120]	; (f90c <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1d8>)
    f892:	e036      	b.n	f902 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1ce>

    /* mark multibyte variable */
    *pIsMultibyteVar = (attr&CO_ODA_MB_VALUE) ? 1 : 0;
    f894:	f997 3013 	ldrsb.w	r3, [r7, #19]
    f898:	2b00      	cmp	r3, #0
    f89a:	da01      	bge.n	f8a0 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x16c>
    f89c:	2201      	movs	r2, #1
    f89e:	e000      	b.n	f8a2 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x16e>
    f8a0:	2200      	movs	r2, #0
    f8a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    f8a4:	701a      	strb	r2, [r3, #0]

    /* pointer to data */
    *ppData = (uint8_t*) (canopen_driver->CO_OD_getDataPointer( entryNo, subIndex));
    f8a6:	4b1d      	ldr	r3, [pc, #116]	; (f91c <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1e8>)
    f8a8:	681b      	ldr	r3, [r3, #0]
    f8aa:	3304      	adds	r3, #4
    f8ac:	7efa      	ldrb	r2, [r7, #27]
    f8ae:	6979      	ldr	r1, [r7, #20]
    f8b0:	4618      	mov	r0, r3
    f8b2:	4b1f      	ldr	r3, [pc, #124]	; (f930 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1fc>)
    f8b4:	4798      	blx	r3
    f8b6:	4602      	mov	r2, r0
    f8b8:	683b      	ldr	r3, [r7, #0]
    f8ba:	601a      	str	r2, [r3, #0]
        *ppData += objectLen - dataLen;
    }
#endif

    /* setup change of state flags */
    if(attr&CO_ODA_TPDO_DETECT_COS){
    f8bc:	7cfb      	ldrb	r3, [r7, #19]
    f8be:	f003 0340 	and.w	r3, r3, #64	; 0x40
    f8c2:	2b00      	cmp	r3, #0
    f8c4:	d01c      	beq.n	f900 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1cc>
        uint32_t i;
        for(i=*pLength-dataLen; i<*pLength; i++){
    f8c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    f8c8:	781b      	ldrb	r3, [r3, #0]
    f8ca:	461a      	mov	r2, r3
    f8cc:	7ebb      	ldrb	r3, [r7, #26]
    f8ce:	1ad3      	subs	r3, r2, r3
    f8d0:	623b      	str	r3, [r7, #32]
    f8d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    f8d4:	781b      	ldrb	r3, [r3, #0]
    f8d6:	461a      	mov	r2, r3
    f8d8:	6a3b      	ldr	r3, [r7, #32]
    f8da:	429a      	cmp	r2, r3
    f8dc:	d910      	bls.n	f900 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1cc>
            *pSendIfCOSFlags |= 1<<i;
    f8de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    f8e0:	781b      	ldrb	r3, [r3, #0]
    f8e2:	b25a      	sxtb	r2, r3
    f8e4:	2101      	movs	r1, #1
    f8e6:	6a3b      	ldr	r3, [r7, #32]
    f8e8:	fa01 f303 	lsl.w	r3, r1, r3
    f8ec:	b25b      	sxtb	r3, r3
    f8ee:	4313      	orrs	r3, r2
    f8f0:	b25b      	sxtb	r3, r3
    f8f2:	b2da      	uxtb	r2, r3
    f8f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    f8f6:	701a      	strb	r2, [r3, #0]
        for(i=*pLength-dataLen; i<*pLength; i++){
    f8f8:	6a3b      	ldr	r3, [r7, #32]
    f8fa:	3301      	adds	r3, #1
    f8fc:	623b      	str	r3, [r7, #32]
    f8fe:	e7e8      	b.n	f8d2 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x19e>
        }
    }

    return 0;
    f900:	2300      	movs	r3, #0
}
    f902:	4618      	mov	r0, r3
    f904:	3728      	adds	r7, #40	; 0x28
    f906:	46bd      	mov	sp, r7
    f908:	bd80      	pop	{r7, pc}
    f90a:	bf00      	nop
    f90c:	06040041 	.word	0x06040041
    f910:	06040042 	.word	0x06040042
    f914:	20001af4 	.word	0x20001af4
    f918:	20001af0 	.word	0x20001af0
    f91c:	20001abc 	.word	0x20001abc
    f920:	00010d25 	.word	0x00010d25
    f924:	06020000 	.word	0x06020000
    f928:	00010e79 	.word	0x00010e79
    f92c:	00010dd1 	.word	0x00010dd1
    f930:	00010f29 	.word	0x00010f29

0000f934 <_ZL16CO_RPDOconfigMapP9CO_RPDO_th>:
 * @param RPDO RPDO object.
 * @param noOfMappedObjects Number of mapped object (from OD).
 *
 * @return 0 on success, otherwise SDO abort code.
 */
static uint32_t CO_RPDOconfigMap(CO_RPDO_t* RPDO, uint8_t noOfMappedObjects){
    f934:	b590      	push	{r4, r7, lr}
    f936:	b091      	sub	sp, #68	; 0x44
    f938:	af04      	add	r7, sp, #16
    f93a:	6078      	str	r0, [r7, #4]
    f93c:	460b      	mov	r3, r1
    f93e:	70fb      	strb	r3, [r7, #3]
    uint32_t i;
    uint8_t length = 0;
    f940:	2300      	movs	r3, #0
    f942:	75fb      	strb	r3, [r7, #23]
    uint32_t ret = 0;
    f944:	2300      	movs	r3, #0
    f946:	62bb      	str	r3, [r7, #40]	; 0x28
    const uint32_t* pMap = &RPDO->RPDOMapPar->mappedObject1;
    f948:	687b      	ldr	r3, [r7, #4]
    f94a:	691b      	ldr	r3, [r3, #16]
    f94c:	3304      	adds	r3, #4
    f94e:	627b      	str	r3, [r7, #36]	; 0x24

    for(i=noOfMappedObjects; i>0; i--){
    f950:	78fb      	ldrb	r3, [r7, #3]
    f952:	62fb      	str	r3, [r7, #44]	; 0x2c
    f954:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    f956:	2b00      	cmp	r3, #0
    f958:	d045      	beq.n	f9e6 <_ZL16CO_RPDOconfigMapP9CO_RPDO_th+0xb2>
        uint32_t j;
        uint8_t* pData;
        uint8_t dummy = 0;
    f95a:	2300      	movs	r3, #0
    f95c:	73fb      	strb	r3, [r7, #15]
        uint8_t prevLength = length;
    f95e:	7dfb      	ldrb	r3, [r7, #23]
    f960:	77fb      	strb	r3, [r7, #31]
        uint8_t MBvar;
        uint32_t map = *(pMap++);
    f962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    f964:	1d1a      	adds	r2, r3, #4
    f966:	627a      	str	r2, [r7, #36]	; 0x24
    f968:	681b      	ldr	r3, [r3, #0]
    f96a:	61bb      	str	r3, [r7, #24]

        /* function do much checking of errors in map */
        ret = CO_PDOfindMap(
    f96c:	687b      	ldr	r3, [r7, #4]
    f96e:	6858      	ldr	r0, [r3, #4]
                map,
                0,
                &pData,
                &length,
                &dummy,
                &MBvar);
    f970:	f107 0210 	add.w	r2, r7, #16
    f974:	f107 030e 	add.w	r3, r7, #14
    f978:	9302      	str	r3, [sp, #8]
    f97a:	f107 030f 	add.w	r3, r7, #15
    f97e:	9301      	str	r3, [sp, #4]
    f980:	f107 0317 	add.w	r3, r7, #23
    f984:	9300      	str	r3, [sp, #0]
    f986:	4613      	mov	r3, r2
    f988:	2200      	movs	r2, #0
    f98a:	69b9      	ldr	r1, [r7, #24]
    f98c:	4c1a      	ldr	r4, [pc, #104]	; (f9f8 <_ZL16CO_RPDOconfigMapP9CO_RPDO_th+0xc4>)
    f98e:	47a0      	blx	r4
    f990:	62b8      	str	r0, [r7, #40]	; 0x28
        if(ret){
    f992:	6abb      	ldr	r3, [r7, #40]	; 0x28
    f994:	2b00      	cmp	r3, #0
    f996:	d00e      	beq.n	f9b6 <_ZL16CO_RPDOconfigMapP9CO_RPDO_th+0x82>
            length = 0;
    f998:	2300      	movs	r3, #0
    f99a:	75fb      	strb	r3, [r7, #23]
           canopen_driver->EM_ErrorReport(RPDO->em, CO_EM_PDO_WRONG_MAPPING, CO_EMC_PROTOCOL_ERROR, map);
    f99c:	4b17      	ldr	r3, [pc, #92]	; (f9fc <_ZL16CO_RPDOconfigMapP9CO_RPDO_th+0xc8>)
    f99e:	681b      	ldr	r3, [r3, #0]
    f9a0:	1d18      	adds	r0, r3, #4
    f9a2:	687b      	ldr	r3, [r7, #4]
    f9a4:	6819      	ldr	r1, [r3, #0]
    f9a6:	69bb      	ldr	r3, [r7, #24]
    f9a8:	9300      	str	r3, [sp, #0]
    f9aa:	f44f 4302 	mov.w	r3, #33280	; 0x8200
    f9ae:	221a      	movs	r2, #26
    f9b0:	4c13      	ldr	r4, [pc, #76]	; (fa00 <_ZL16CO_RPDOconfigMapP9CO_RPDO_th+0xcc>)
    f9b2:	47a0      	blx	r4
    f9b4:	e017      	b.n	f9e6 <_ZL16CO_RPDOconfigMapP9CO_RPDO_th+0xb2>
        else{
            for(j=prevLength; j<length; j++)
                RPDO->mapPointer[j] = pData++;
        }
#else
        for(j=prevLength; j<length; j++){
    f9b6:	7ffb      	ldrb	r3, [r7, #31]
    f9b8:	623b      	str	r3, [r7, #32]
    f9ba:	7dfb      	ldrb	r3, [r7, #23]
    f9bc:	461a      	mov	r2, r3
    f9be:	6a3b      	ldr	r3, [r7, #32]
    f9c0:	429a      	cmp	r2, r3
    f9c2:	d90c      	bls.n	f9de <_ZL16CO_RPDOconfigMapP9CO_RPDO_th+0xaa>
            RPDO->mapPointer[j] = pData++;
    f9c4:	693a      	ldr	r2, [r7, #16]
    f9c6:	1c53      	adds	r3, r2, #1
    f9c8:	613b      	str	r3, [r7, #16]
    f9ca:	6879      	ldr	r1, [r7, #4]
    f9cc:	6a3b      	ldr	r3, [r7, #32]
    f9ce:	3308      	adds	r3, #8
    f9d0:	009b      	lsls	r3, r3, #2
    f9d2:	440b      	add	r3, r1
    f9d4:	605a      	str	r2, [r3, #4]
        for(j=prevLength; j<length; j++){
    f9d6:	6a3b      	ldr	r3, [r7, #32]
    f9d8:	3301      	adds	r3, #1
    f9da:	623b      	str	r3, [r7, #32]
    f9dc:	e7ed      	b.n	f9ba <_ZL16CO_RPDOconfigMapP9CO_RPDO_th+0x86>
    for(i=noOfMappedObjects; i>0; i--){
    f9de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    f9e0:	3b01      	subs	r3, #1
    f9e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    f9e4:	e7b6      	b.n	f954 <_ZL16CO_RPDOconfigMapP9CO_RPDO_th+0x20>
        }
#endif

    }

    RPDO->dataLength = length;
    f9e6:	7dfa      	ldrb	r2, [r7, #23]
    f9e8:	687b      	ldr	r3, [r7, #4]
    f9ea:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

    return ret;
    f9ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
    f9f0:	4618      	mov	r0, r3
    f9f2:	3734      	adds	r7, #52	; 0x34
    f9f4:	46bd      	mov	sp, r7
    f9f6:	bd90      	pop	{r4, r7, pc}
    f9f8:	0000f735 	.word	0x0000f735
    f9fc:	20001abc 	.word	0x20001abc
    fa00:	0000e6cd 	.word	0x0000e6cd

0000fa04 <_ZL16CO_TPDOconfigMapP9CO_TPDO_th>:
 * @param TPDO TPDO object.
 * @param noOfMappedObjects Number of mapped object (from OD).
 *
 * @return 0 on success, otherwise SDO abort code.
 */
static uint32_t CO_TPDOconfigMap(CO_TPDO_t* TPDO, uint8_t noOfMappedObjects){
    fa04:	b590      	push	{r4, r7, lr}
    fa06:	b091      	sub	sp, #68	; 0x44
    fa08:	af04      	add	r7, sp, #16
    fa0a:	6078      	str	r0, [r7, #4]
    fa0c:	460b      	mov	r3, r1
    fa0e:	70fb      	strb	r3, [r7, #3]
    uint32_t i;
    uint8_t length = 0;
    fa10:	2300      	movs	r3, #0
    fa12:	75fb      	strb	r3, [r7, #23]
    uint32_t ret = 0;
    fa14:	2300      	movs	r3, #0
    fa16:	62bb      	str	r3, [r7, #40]	; 0x28
    const uint32_t* pMap = &TPDO->TPDOMapPar->mappedObject1;
    fa18:	687b      	ldr	r3, [r7, #4]
    fa1a:	68db      	ldr	r3, [r3, #12]
    fa1c:	3304      	adds	r3, #4
    fa1e:	627b      	str	r3, [r7, #36]	; 0x24

    TPDO->sendIfCOSFlags = 0;
    fa20:	687b      	ldr	r3, [r7, #4]
    fa22:	2200      	movs	r2, #0
    fa24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    for(i=noOfMappedObjects; i>0; i--){
    fa28:	78fb      	ldrb	r3, [r7, #3]
    fa2a:	62fb      	str	r3, [r7, #44]	; 0x2c
    fa2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    fa2e:	2b00      	cmp	r3, #0
    fa30:	d042      	beq.n	fab8 <_ZL16CO_TPDOconfigMapP9CO_TPDO_th+0xb4>
        uint32_t j;
        uint8_t* pData;
        uint8_t prevLength = length;
    fa32:	7dfb      	ldrb	r3, [r7, #23]
    fa34:	77fb      	strb	r3, [r7, #31]
        uint8_t MBvar;
        uint32_t map = *(pMap++);
    fa36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    fa38:	1d1a      	adds	r2, r3, #4
    fa3a:	627a      	str	r2, [r7, #36]	; 0x24
    fa3c:	681b      	ldr	r3, [r3, #0]
    fa3e:	61bb      	str	r3, [r7, #24]

        /* function do much checking of errors in map */
        ret = CO_PDOfindMap(
    fa40:	687b      	ldr	r3, [r7, #4]
    fa42:	6858      	ldr	r0, [r3, #4]
    fa44:	687b      	ldr	r3, [r7, #4]
    fa46:	3340      	adds	r3, #64	; 0x40
                map,
                1,
                &pData,
                &length,
                &TPDO->sendIfCOSFlags,
                &MBvar);
    fa48:	f107 0110 	add.w	r1, r7, #16
    fa4c:	f107 020f 	add.w	r2, r7, #15
    fa50:	9202      	str	r2, [sp, #8]
    fa52:	9301      	str	r3, [sp, #4]
    fa54:	f107 0317 	add.w	r3, r7, #23
    fa58:	9300      	str	r3, [sp, #0]
    fa5a:	460b      	mov	r3, r1
    fa5c:	2201      	movs	r2, #1
    fa5e:	69b9      	ldr	r1, [r7, #24]
    fa60:	4c19      	ldr	r4, [pc, #100]	; (fac8 <_ZL16CO_TPDOconfigMapP9CO_TPDO_th+0xc4>)
    fa62:	47a0      	blx	r4
    fa64:	62b8      	str	r0, [r7, #40]	; 0x28
        if(ret){
    fa66:	6abb      	ldr	r3, [r7, #40]	; 0x28
    fa68:	2b00      	cmp	r3, #0
    fa6a:	d00e      	beq.n	fa8a <_ZL16CO_TPDOconfigMapP9CO_TPDO_th+0x86>
            length = 0;
    fa6c:	2300      	movs	r3, #0
    fa6e:	75fb      	strb	r3, [r7, #23]
            canopen_driver->EM_ErrorReport(TPDO->em, CO_EM_PDO_WRONG_MAPPING, CO_EMC_PROTOCOL_ERROR, map);
    fa70:	4b16      	ldr	r3, [pc, #88]	; (facc <_ZL16CO_TPDOconfigMapP9CO_TPDO_th+0xc8>)
    fa72:	681b      	ldr	r3, [r3, #0]
    fa74:	1d18      	adds	r0, r3, #4
    fa76:	687b      	ldr	r3, [r7, #4]
    fa78:	6819      	ldr	r1, [r3, #0]
    fa7a:	69bb      	ldr	r3, [r7, #24]
    fa7c:	9300      	str	r3, [sp, #0]
    fa7e:	f44f 4302 	mov.w	r3, #33280	; 0x8200
    fa82:	221a      	movs	r2, #26
    fa84:	4c12      	ldr	r4, [pc, #72]	; (fad0 <_ZL16CO_TPDOconfigMapP9CO_TPDO_th+0xcc>)
    fa86:	47a0      	blx	r4
    fa88:	e016      	b.n	fab8 <_ZL16CO_TPDOconfigMapP9CO_TPDO_th+0xb4>
        else{
            for(j=prevLength; j<length; j++)
                TPDO->mapPointer[j] = pData++;
        }
#else
        for(j=prevLength; j<length; j++){
    fa8a:	7ffb      	ldrb	r3, [r7, #31]
    fa8c:	623b      	str	r3, [r7, #32]
    fa8e:	7dfb      	ldrb	r3, [r7, #23]
    fa90:	461a      	mov	r2, r3
    fa92:	6a3b      	ldr	r3, [r7, #32]
    fa94:	429a      	cmp	r2, r3
    fa96:	d90b      	bls.n	fab0 <_ZL16CO_TPDOconfigMapP9CO_TPDO_th+0xac>
            TPDO->mapPointer[j] = pData++;
    fa98:	693b      	ldr	r3, [r7, #16]
    fa9a:	1c5a      	adds	r2, r3, #1
    fa9c:	613a      	str	r2, [r7, #16]
    fa9e:	687a      	ldr	r2, [r7, #4]
    faa0:	6a39      	ldr	r1, [r7, #32]
    faa2:	3108      	adds	r1, #8
    faa4:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
        for(j=prevLength; j<length; j++){
    faa8:	6a3b      	ldr	r3, [r7, #32]
    faaa:	3301      	adds	r3, #1
    faac:	623b      	str	r3, [r7, #32]
    faae:	e7ee      	b.n	fa8e <_ZL16CO_TPDOconfigMapP9CO_TPDO_th+0x8a>
    for(i=noOfMappedObjects; i>0; i--){
    fab0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    fab2:	3b01      	subs	r3, #1
    fab4:	62fb      	str	r3, [r7, #44]	; 0x2c
    fab6:	e7b9      	b.n	fa2c <_ZL16CO_TPDOconfigMapP9CO_TPDO_th+0x28>
        }
#endif

    }

    TPDO->dataLength = length;
    fab8:	7dfa      	ldrb	r2, [r7, #23]
    faba:	687b      	ldr	r3, [r7, #4]
    fabc:	779a      	strb	r2, [r3, #30]

    return ret;
    fabe:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
    fac0:	4618      	mov	r0, r3
    fac2:	3734      	adds	r7, #52	; 0x34
    fac4:	46bd      	mov	sp, r7
    fac6:	bd90      	pop	{r4, r7, pc}
    fac8:	0000f735 	.word	0x0000f735
    facc:	20001abc 	.word	0x20001abc
    fad0:	0000e6cd 	.word	0x0000e6cd

0000fad4 <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t>:
/*
 * Function for accessing _RPDO communication parameter_ (index 0x1400+) from SDO server.
 *
 * For more information see file CO_SDO.h.
 */
static CO_SDO_abortCode_t CO_ODF_RPDOcom(CO_ODF_arg_t *ODF_arg){
    fad4:	b580      	push	{r7, lr}
    fad6:	b088      	sub	sp, #32
    fad8:	af00      	add	r7, sp, #0
    fada:	6078      	str	r0, [r7, #4]
    CO_RPDO_t *RPDO;

    RPDO = (CO_RPDO_t*) ODF_arg->object;
    fadc:	687b      	ldr	r3, [r7, #4]
    fade:	681b      	ldr	r3, [r3, #0]
    fae0:	61fb      	str	r3, [r7, #28]

    /* Reading Object Dictionary variable */
    if(ODF_arg->reading){
    fae2:	687b      	ldr	r3, [r7, #4]
    fae4:	7f5b      	ldrb	r3, [r3, #29]
    fae6:	2b00      	cmp	r3, #0
    fae8:	d025      	beq.n	fb36 <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x62>
        if(ODF_arg->subIndex == 1){
    faea:	687b      	ldr	r3, [r7, #4]
    faec:	7f1b      	ldrb	r3, [r3, #28]
    faee:	2b01      	cmp	r3, #1
    faf0:	d11f      	bne.n	fb32 <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x5e>
            uint32_t *value = (uint32_t*) ODF_arg->data;
    faf2:	687b      	ldr	r3, [r7, #4]
    faf4:	685b      	ldr	r3, [r3, #4]
    faf6:	61bb      	str	r3, [r7, #24]

            /* if default COB ID is used, write default value here */
            if(((*value)&0xFFFF) == RPDO->defaultCOB_ID && RPDO->defaultCOB_ID)
    faf8:	69bb      	ldr	r3, [r7, #24]
    fafa:	681b      	ldr	r3, [r3, #0]
    fafc:	b29a      	uxth	r2, r3
    fafe:	69fb      	ldr	r3, [r7, #28]
    fb00:	69db      	ldr	r3, [r3, #28]
    fb02:	429a      	cmp	r2, r3
    fb04:	d10a      	bne.n	fb1c <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x48>
    fb06:	69fb      	ldr	r3, [r7, #28]
    fb08:	69db      	ldr	r3, [r3, #28]
    fb0a:	2b00      	cmp	r3, #0
    fb0c:	d006      	beq.n	fb1c <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x48>
                *value += RPDO->nodeId;
    fb0e:	69bb      	ldr	r3, [r7, #24]
    fb10:	681b      	ldr	r3, [r3, #0]
    fb12:	69fa      	ldr	r2, [r7, #28]
    fb14:	7e12      	ldrb	r2, [r2, #24]
    fb16:	441a      	add	r2, r3
    fb18:	69bb      	ldr	r3, [r7, #24]
    fb1a:	601a      	str	r2, [r3, #0]

            /* If PDO is not valid, set bit 31 */
            if(!RPDO->valid) *value |= 0x80000000L;
    fb1c:	69fb      	ldr	r3, [r7, #28]
    fb1e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
    fb22:	2b00      	cmp	r3, #0
    fb24:	d105      	bne.n	fb32 <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x5e>
    fb26:	69bb      	ldr	r3, [r7, #24]
    fb28:	681b      	ldr	r3, [r3, #0]
    fb2a:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
    fb2e:	69bb      	ldr	r3, [r7, #24]
    fb30:	601a      	str	r2, [r3, #0]
        }
        return CO_SDO_AB_NONE;
    fb32:	2300      	movs	r3, #0
    fb34:	e07f      	b.n	fc36 <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x162>
    }

    /* Writing Object Dictionary variable */
    if(RPDO->restrictionFlags & 0x04)
    fb36:	69fb      	ldr	r3, [r7, #28]
    fb38:	f893 3020 	ldrb.w	r3, [r3, #32]
    fb3c:	f003 0304 	and.w	r3, r3, #4
    fb40:	2b00      	cmp	r3, #0
    fb42:	d001      	beq.n	fb48 <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x74>
        return CO_SDO_AB_READONLY;  /* Attempt to write a read only object. */
    fb44:	4b3e      	ldr	r3, [pc, #248]	; (fc40 <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x16c>)
    fb46:	e076      	b.n	fc36 <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x162>
    if(*RPDO->operatingState == CO_NMT_OPERATIONAL && (RPDO->restrictionFlags & 0x01))
    fb48:	69fb      	ldr	r3, [r7, #28]
    fb4a:	695b      	ldr	r3, [r3, #20]
    fb4c:	781b      	ldrb	r3, [r3, #0]
    fb4e:	2b05      	cmp	r3, #5
    fb50:	d108      	bne.n	fb64 <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x90>
    fb52:	69fb      	ldr	r3, [r7, #28]
    fb54:	f893 3020 	ldrb.w	r3, [r3, #32]
    fb58:	f003 0301 	and.w	r3, r3, #1
    fb5c:	2b00      	cmp	r3, #0
    fb5e:	d001      	beq.n	fb64 <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x90>
        return CO_SDO_AB_DATA_DEV_STATE;   /* Data cannot be transferred or stored to the application because of the present device state. */
    fb60:	4b38      	ldr	r3, [pc, #224]	; (fc44 <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x170>)
    fb62:	e068      	b.n	fc36 <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x162>

    if(ODF_arg->subIndex == 1){   /* COB_ID */
    fb64:	687b      	ldr	r3, [r7, #4]
    fb66:	7f1b      	ldrb	r3, [r3, #28]
    fb68:	2b01      	cmp	r3, #1
    fb6a:	d139      	bne.n	fbe0 <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x10c>
        uint32_t *value = (uint32_t*) ODF_arg->data;
    fb6c:	687b      	ldr	r3, [r7, #4]
    fb6e:	685b      	ldr	r3, [r3, #4]
    fb70:	617b      	str	r3, [r7, #20]

        /* bits 11...29 must be zero */
        if(*value & 0x3FFF8000L)
    fb72:	697b      	ldr	r3, [r7, #20]
    fb74:	681a      	ldr	r2, [r3, #0]
    fb76:	4b34      	ldr	r3, [pc, #208]	; (fc48 <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x174>)
    fb78:	4013      	ands	r3, r2
    fb7a:	2b00      	cmp	r3, #0
    fb7c:	d001      	beq.n	fb82 <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0xae>
            return CO_SDO_AB_INVALID_VALUE;  /* Invalid value for parameter (download only). */
    fb7e:	4b33      	ldr	r3, [pc, #204]	; (fc4c <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x178>)
    fb80:	e059      	b.n	fc36 <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x162>

        /* if default COB-ID is being written, write defaultCOB_ID without nodeId */
        if(((*value)&0xFFFF) == (RPDO->defaultCOB_ID + RPDO->nodeId)){
    fb82:	697b      	ldr	r3, [r7, #20]
    fb84:	681b      	ldr	r3, [r3, #0]
    fb86:	b29a      	uxth	r2, r3
    fb88:	69fb      	ldr	r3, [r7, #28]
    fb8a:	69db      	ldr	r3, [r3, #28]
    fb8c:	69f9      	ldr	r1, [r7, #28]
    fb8e:	7e09      	ldrb	r1, [r1, #24]
    fb90:	440b      	add	r3, r1
    fb92:	429a      	cmp	r2, r3
    fb94:	d10c      	bne.n	fbb0 <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0xdc>
            *value &= 0xC0000000L;
    fb96:	697b      	ldr	r3, [r7, #20]
    fb98:	681b      	ldr	r3, [r3, #0]
    fb9a:	f003 4240 	and.w	r2, r3, #3221225472	; 0xc0000000
    fb9e:	697b      	ldr	r3, [r7, #20]
    fba0:	601a      	str	r2, [r3, #0]
            *value += RPDO->defaultCOB_ID;
    fba2:	697b      	ldr	r3, [r7, #20]
    fba4:	681a      	ldr	r2, [r3, #0]
    fba6:	69fb      	ldr	r3, [r7, #28]
    fba8:	69db      	ldr	r3, [r3, #28]
    fbaa:	441a      	add	r2, r3
    fbac:	697b      	ldr	r3, [r7, #20]
    fbae:	601a      	str	r2, [r3, #0]
        }

        /* if PDO is valid, bits 0..29 can not be changed */
        if(RPDO->valid && ((*value ^ RPDO->RPDOCommPar->COB_IDUsedByRPDO) & 0x3FFFFFFFL))
    fbb0:	69fb      	ldr	r3, [r7, #28]
    fbb2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
    fbb6:	2b00      	cmp	r3, #0
    fbb8:	d00b      	beq.n	fbd2 <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0xfe>
    fbba:	697b      	ldr	r3, [r7, #20]
    fbbc:	681a      	ldr	r2, [r3, #0]
    fbbe:	69fb      	ldr	r3, [r7, #28]
    fbc0:	68db      	ldr	r3, [r3, #12]
    fbc2:	685b      	ldr	r3, [r3, #4]
    fbc4:	4053      	eors	r3, r2
    fbc6:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
    fbca:	2b00      	cmp	r3, #0
    fbcc:	d001      	beq.n	fbd2 <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0xfe>
            return CO_SDO_AB_INVALID_VALUE;  /* Invalid value for parameter (download only). */
    fbce:	4b1f      	ldr	r3, [pc, #124]	; (fc4c <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x178>)
    fbd0:	e031      	b.n	fc36 <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x162>

        /* configure RPDO */
       CO_RPDOconfigCom(RPDO, *value);
    fbd2:	697b      	ldr	r3, [r7, #20]
    fbd4:	681b      	ldr	r3, [r3, #0]
    fbd6:	4619      	mov	r1, r3
    fbd8:	69f8      	ldr	r0, [r7, #28]
    fbda:	4b1d      	ldr	r3, [pc, #116]	; (fc50 <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x17c>)
    fbdc:	4798      	blx	r3
    fbde:	e029      	b.n	fc34 <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x160>
    }
    else if(ODF_arg->subIndex == 2){   /* Transmission_type */
    fbe0:	687b      	ldr	r3, [r7, #4]
    fbe2:	7f1b      	ldrb	r3, [r3, #28]
    fbe4:	2b02      	cmp	r3, #2
    fbe6:	d125      	bne.n	fc34 <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x160>
        uint8_t *value = (uint8_t*) ODF_arg->data;
    fbe8:	687b      	ldr	r3, [r7, #4]
    fbea:	685b      	ldr	r3, [r3, #4]
    fbec:	613b      	str	r3, [r7, #16]
        bool_t synchronousPrev = RPDO->synchronous;
    fbee:	69fb      	ldr	r3, [r7, #28]
    fbf0:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
    fbf4:	73fb      	strb	r3, [r7, #15]

        /* values from 241...253 are not valid */
        if(*value >= 241 && *value <= 253)
    fbf6:	693b      	ldr	r3, [r7, #16]
    fbf8:	781b      	ldrb	r3, [r3, #0]
    fbfa:	2bf0      	cmp	r3, #240	; 0xf0
    fbfc:	dd05      	ble.n	fc0a <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x136>
    fbfe:	693b      	ldr	r3, [r7, #16]
    fc00:	781b      	ldrb	r3, [r3, #0]
    fc02:	2bfd      	cmp	r3, #253	; 0xfd
    fc04:	dc01      	bgt.n	fc0a <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x136>
            return CO_SDO_AB_INVALID_VALUE;  /* Invalid value for parameter (download only). */
    fc06:	4b11      	ldr	r3, [pc, #68]	; (fc4c <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x178>)
    fc08:	e015      	b.n	fc36 <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x162>

        RPDO->synchronous = (*value <= 240) ? true : false;
    fc0a:	693b      	ldr	r3, [r7, #16]
    fc0c:	781b      	ldrb	r3, [r3, #0]
    fc0e:	2bf0      	cmp	r3, #240	; 0xf0
    fc10:	bfd4      	ite	le
    fc12:	2301      	movle	r3, #1
    fc14:	2300      	movgt	r3, #0
    fc16:	b2db      	uxtb	r3, r3
    fc18:	461a      	mov	r2, r3
    fc1a:	69fb      	ldr	r3, [r7, #28]
    fc1c:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

        /* Remove old message from second buffer. */
        if(RPDO->synchronous != synchronousPrev) {
    fc20:	69fb      	ldr	r3, [r7, #28]
    fc22:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
    fc26:	7bfa      	ldrb	r2, [r7, #15]
    fc28:	429a      	cmp	r2, r3
    fc2a:	d003      	beq.n	fc34 <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x160>
            RPDO->CANrxNew[1] = false;
    fc2c:	69fb      	ldr	r3, [r7, #28]
    fc2e:	2200      	movs	r2, #0
    fc30:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
        }
    }

    return CO_SDO_AB_NONE;
    fc34:	2300      	movs	r3, #0
}
    fc36:	4618      	mov	r0, r3
    fc38:	3720      	adds	r7, #32
    fc3a:	46bd      	mov	sp, r7
    fc3c:	bd80      	pop	{r7, pc}
    fc3e:	bf00      	nop
    fc40:	06010002 	.word	0x06010002
    fc44:	08000022 	.word	0x08000022
    fc48:	3fff8000 	.word	0x3fff8000
    fc4c:	06090030 	.word	0x06090030
    fc50:	0000f5c9 	.word	0x0000f5c9

0000fc54 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t>:
/*
 * Function for accessing _TPDO communication parameter_ (index 0x1800+) from SDO server.
 *
 * For more information see file CO_SDO.h.
 */
static CO_SDO_abortCode_t CO_ODF_TPDOcom(CO_ODF_arg_t *ODF_arg){
    fc54:	b580      	push	{r7, lr}
    fc56:	b088      	sub	sp, #32
    fc58:	af00      	add	r7, sp, #0
    fc5a:	6078      	str	r0, [r7, #4]
    CO_TPDO_t *TPDO;

    TPDO = (CO_TPDO_t*) ODF_arg->object;
    fc5c:	687b      	ldr	r3, [r7, #4]
    fc5e:	681b      	ldr	r3, [r3, #0]
    fc60:	61fb      	str	r3, [r7, #28]

    if(ODF_arg->subIndex == 4) return CO_SDO_AB_SUB_UNKNOWN;  /* Sub-index does not exist. */
    fc62:	687b      	ldr	r3, [r7, #4]
    fc64:	7f1b      	ldrb	r3, [r3, #28]
    fc66:	2b04      	cmp	r3, #4
    fc68:	d101      	bne.n	fc6e <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1a>
    fc6a:	4b6d      	ldr	r3, [pc, #436]	; (fe20 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1cc>)
    fc6c:	e0d4      	b.n	fe18 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1c4>

    /* Reading Object Dictionary variable */
    if(ODF_arg->reading){
    fc6e:	687b      	ldr	r3, [r7, #4]
    fc70:	7f5b      	ldrb	r3, [r3, #29]
    fc72:	2b00      	cmp	r3, #0
    fc74:	d024      	beq.n	fcc0 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x6c>
        if(ODF_arg->subIndex == 1){   /* COB_ID */
    fc76:	687b      	ldr	r3, [r7, #4]
    fc78:	7f1b      	ldrb	r3, [r3, #28]
    fc7a:	2b01      	cmp	r3, #1
    fc7c:	d11e      	bne.n	fcbc <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x68>
            uint32_t *value = (uint32_t*) ODF_arg->data;
    fc7e:	687b      	ldr	r3, [r7, #4]
    fc80:	685b      	ldr	r3, [r3, #4]
    fc82:	61bb      	str	r3, [r7, #24]

            /* if default COB ID is used, write default value here */
            if(((*value)&0xFFFF) == TPDO->defaultCOB_ID && TPDO->defaultCOB_ID)
    fc84:	69bb      	ldr	r3, [r7, #24]
    fc86:	681b      	ldr	r3, [r3, #0]
    fc88:	b29a      	uxth	r2, r3
    fc8a:	69fb      	ldr	r3, [r7, #28]
    fc8c:	699b      	ldr	r3, [r3, #24]
    fc8e:	429a      	cmp	r2, r3
    fc90:	d10a      	bne.n	fca8 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x54>
    fc92:	69fb      	ldr	r3, [r7, #28]
    fc94:	699b      	ldr	r3, [r3, #24]
    fc96:	2b00      	cmp	r3, #0
    fc98:	d006      	beq.n	fca8 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x54>
                *value += TPDO->nodeId;
    fc9a:	69bb      	ldr	r3, [r7, #24]
    fc9c:	681b      	ldr	r3, [r3, #0]
    fc9e:	69fa      	ldr	r2, [r7, #28]
    fca0:	7d12      	ldrb	r2, [r2, #20]
    fca2:	441a      	add	r2, r3
    fca4:	69bb      	ldr	r3, [r7, #24]
    fca6:	601a      	str	r2, [r3, #0]

            /* If PDO is not valid, set bit 31 */
            if(!TPDO->valid) *value |= 0x80000000L;
    fca8:	69fb      	ldr	r3, [r7, #28]
    fcaa:	7f5b      	ldrb	r3, [r3, #29]
    fcac:	2b00      	cmp	r3, #0
    fcae:	d105      	bne.n	fcbc <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x68>
    fcb0:	69bb      	ldr	r3, [r7, #24]
    fcb2:	681b      	ldr	r3, [r3, #0]
    fcb4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
    fcb8:	69bb      	ldr	r3, [r7, #24]
    fcba:	601a      	str	r2, [r3, #0]
        }
        return CO_SDO_AB_NONE;
    fcbc:	2300      	movs	r3, #0
    fcbe:	e0ab      	b.n	fe18 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1c4>
    }

    /* Writing Object Dictionary variable */
    if(TPDO->restrictionFlags & 0x04)
    fcc0:	69fb      	ldr	r3, [r7, #28]
    fcc2:	7f1b      	ldrb	r3, [r3, #28]
    fcc4:	f003 0304 	and.w	r3, r3, #4
    fcc8:	2b00      	cmp	r3, #0
    fcca:	d001      	beq.n	fcd0 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x7c>
        return CO_SDO_AB_READONLY;  /* Attempt to write a read only object. */
    fccc:	4b55      	ldr	r3, [pc, #340]	; (fe24 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1d0>)
    fcce:	e0a3      	b.n	fe18 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1c4>
    if(*TPDO->operatingState == CO_NMT_OPERATIONAL && (TPDO->restrictionFlags & 0x01))
    fcd0:	69fb      	ldr	r3, [r7, #28]
    fcd2:	691b      	ldr	r3, [r3, #16]
    fcd4:	781b      	ldrb	r3, [r3, #0]
    fcd6:	2b05      	cmp	r3, #5
    fcd8:	d107      	bne.n	fcea <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x96>
    fcda:	69fb      	ldr	r3, [r7, #28]
    fcdc:	7f1b      	ldrb	r3, [r3, #28]
    fcde:	f003 0301 	and.w	r3, r3, #1
    fce2:	2b00      	cmp	r3, #0
    fce4:	d001      	beq.n	fcea <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x96>
        return CO_SDO_AB_DATA_DEV_STATE;   /* Data cannot be transferred or stored to the application because of the present device state. */
    fce6:	4b50      	ldr	r3, [pc, #320]	; (fe28 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1d4>)
    fce8:	e096      	b.n	fe18 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1c4>

    if(ODF_arg->subIndex == 1){   /* COB_ID */
    fcea:	687b      	ldr	r3, [r7, #4]
    fcec:	7f1b      	ldrb	r3, [r3, #28]
    fcee:	2b01      	cmp	r3, #1
    fcf0:	d140      	bne.n	fd74 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x120>
        uint32_t *value = (uint32_t*) ODF_arg->data;
    fcf2:	687b      	ldr	r3, [r7, #4]
    fcf4:	685b      	ldr	r3, [r3, #4]
    fcf6:	617b      	str	r3, [r7, #20]

        /* bits 11...29 must be zero */
        if(*value & 0x3FFF8000L)
    fcf8:	697b      	ldr	r3, [r7, #20]
    fcfa:	681a      	ldr	r2, [r3, #0]
    fcfc:	4b4b      	ldr	r3, [pc, #300]	; (fe2c <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1d8>)
    fcfe:	4013      	ands	r3, r2
    fd00:	2b00      	cmp	r3, #0
    fd02:	d001      	beq.n	fd08 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0xb4>
            return CO_SDO_AB_INVALID_VALUE;  /* Invalid value for parameter (download only). */
    fd04:	4b4a      	ldr	r3, [pc, #296]	; (fe30 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1dc>)
    fd06:	e087      	b.n	fe18 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1c4>

        /* if default COB-ID is being written, write defaultCOB_ID without nodeId */
        if(((*value)&0xFFFF) == (TPDO->defaultCOB_ID + TPDO->nodeId)){
    fd08:	697b      	ldr	r3, [r7, #20]
    fd0a:	681b      	ldr	r3, [r3, #0]
    fd0c:	b29a      	uxth	r2, r3
    fd0e:	69fb      	ldr	r3, [r7, #28]
    fd10:	699b      	ldr	r3, [r3, #24]
    fd12:	69f9      	ldr	r1, [r7, #28]
    fd14:	7d09      	ldrb	r1, [r1, #20]
    fd16:	440b      	add	r3, r1
    fd18:	429a      	cmp	r2, r3
    fd1a:	d10c      	bne.n	fd36 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0xe2>
            *value &= 0xC0000000L;
    fd1c:	697b      	ldr	r3, [r7, #20]
    fd1e:	681b      	ldr	r3, [r3, #0]
    fd20:	f003 4240 	and.w	r2, r3, #3221225472	; 0xc0000000
    fd24:	697b      	ldr	r3, [r7, #20]
    fd26:	601a      	str	r2, [r3, #0]
            *value += TPDO->defaultCOB_ID;
    fd28:	697b      	ldr	r3, [r7, #20]
    fd2a:	681a      	ldr	r2, [r3, #0]
    fd2c:	69fb      	ldr	r3, [r7, #28]
    fd2e:	699b      	ldr	r3, [r3, #24]
    fd30:	441a      	add	r2, r3
    fd32:	697b      	ldr	r3, [r7, #20]
    fd34:	601a      	str	r2, [r3, #0]
        }

        /* if PDO is valid, bits 0..29 can not be changed */
        if(TPDO->valid && ((*value ^ TPDO->TPDOCommPar->COB_IDUsedByTPDO) & 0x3FFFFFFFL))
    fd36:	69fb      	ldr	r3, [r7, #28]
    fd38:	7f5b      	ldrb	r3, [r3, #29]
    fd3a:	2b00      	cmp	r3, #0
    fd3c:	d00b      	beq.n	fd56 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x102>
    fd3e:	697b      	ldr	r3, [r7, #20]
    fd40:	681a      	ldr	r2, [r3, #0]
    fd42:	69fb      	ldr	r3, [r7, #28]
    fd44:	689b      	ldr	r3, [r3, #8]
    fd46:	685b      	ldr	r3, [r3, #4]
    fd48:	4053      	eors	r3, r2
    fd4a:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
    fd4e:	2b00      	cmp	r3, #0
    fd50:	d001      	beq.n	fd56 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x102>
            return CO_SDO_AB_INVALID_VALUE;  /* Invalid value for parameter (download only). */
    fd52:	4b37      	ldr	r3, [pc, #220]	; (fe30 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1dc>)
    fd54:	e060      	b.n	fe18 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1c4>

        /* configure TPDO */
        CO_TPDOconfigCom(TPDO, *value, TPDO->CANtxBuff->syncFlag);
    fd56:	697b      	ldr	r3, [r7, #20]
    fd58:	6819      	ldr	r1, [r3, #0]
    fd5a:	69fb      	ldr	r3, [r7, #28]
    fd5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    fd5e:	7b9b      	ldrb	r3, [r3, #14]
    fd60:	b2db      	uxtb	r3, r3
    fd62:	461a      	mov	r2, r3
    fd64:	69f8      	ldr	r0, [r7, #28]
    fd66:	4b33      	ldr	r3, [pc, #204]	; (fe34 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1e0>)
    fd68:	4798      	blx	r3
        TPDO->syncCounter = 255;
    fd6a:	69fb      	ldr	r3, [r7, #28]
    fd6c:	22ff      	movs	r2, #255	; 0xff
    fd6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    fd72:	e050      	b.n	fe16 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1c2>
    }
    else if(ODF_arg->subIndex == 2){   /* Transmission_type */
    fd74:	687b      	ldr	r3, [r7, #4]
    fd76:	7f1b      	ldrb	r3, [r3, #28]
    fd78:	2b02      	cmp	r3, #2
    fd7a:	d11b      	bne.n	fdb4 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x160>
        uint8_t *value = (uint8_t*) ODF_arg->data;
    fd7c:	687b      	ldr	r3, [r7, #4]
    fd7e:	685b      	ldr	r3, [r3, #4]
    fd80:	613b      	str	r3, [r7, #16]

        /* values from 241...253 are not valid */
        if(*value >= 241 && *value <= 253)
    fd82:	693b      	ldr	r3, [r7, #16]
    fd84:	781b      	ldrb	r3, [r3, #0]
    fd86:	2bf0      	cmp	r3, #240	; 0xf0
    fd88:	dd05      	ble.n	fd96 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x142>
    fd8a:	693b      	ldr	r3, [r7, #16]
    fd8c:	781b      	ldrb	r3, [r3, #0]
    fd8e:	2bfd      	cmp	r3, #253	; 0xfd
    fd90:	dc01      	bgt.n	fd96 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x142>
            return CO_SDO_AB_INVALID_VALUE;  /* Invalid value for parameter (download only). */
    fd92:	4b27      	ldr	r3, [pc, #156]	; (fe30 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1dc>)
    fd94:	e040      	b.n	fe18 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1c4>
        TPDO->CANtxBuff->syncFlag = (*value <= 240) ? 1 : 0;
    fd96:	69fb      	ldr	r3, [r7, #28]
    fd98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    fd9a:	693a      	ldr	r2, [r7, #16]
    fd9c:	7812      	ldrb	r2, [r2, #0]
    fd9e:	2af0      	cmp	r2, #240	; 0xf0
    fda0:	dc01      	bgt.n	fda6 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x152>
    fda2:	2201      	movs	r2, #1
    fda4:	e000      	b.n	fda8 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x154>
    fda6:	2200      	movs	r2, #0
    fda8:	739a      	strb	r2, [r3, #14]
        TPDO->syncCounter = 255;
    fdaa:	69fb      	ldr	r3, [r7, #28]
    fdac:	22ff      	movs	r2, #255	; 0xff
    fdae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    fdb2:	e030      	b.n	fe16 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1c2>
    }
    else if(ODF_arg->subIndex == 3){   /* Inhibit_Time */
    fdb4:	687b      	ldr	r3, [r7, #4]
    fdb6:	7f1b      	ldrb	r3, [r3, #28]
    fdb8:	2b03      	cmp	r3, #3
    fdba:	d109      	bne.n	fdd0 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x17c>
        /* if PDO is valid, value can not be changed */
        if(TPDO->valid)
    fdbc:	69fb      	ldr	r3, [r7, #28]
    fdbe:	7f5b      	ldrb	r3, [r3, #29]
    fdc0:	2b00      	cmp	r3, #0
    fdc2:	d001      	beq.n	fdc8 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x174>
            return CO_SDO_AB_INVALID_VALUE;  /* Invalid value for parameter (download only). */
    fdc4:	4b1a      	ldr	r3, [pc, #104]	; (fe30 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1dc>)
    fdc6:	e027      	b.n	fe18 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1c4>

        TPDO->inhibitTimer = 0;
    fdc8:	69fb      	ldr	r3, [r7, #28]
    fdca:	2200      	movs	r2, #0
    fdcc:	645a      	str	r2, [r3, #68]	; 0x44
    fdce:	e022      	b.n	fe16 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1c2>
    }
    else if(ODF_arg->subIndex == 5){   /* Event_Timer */
    fdd0:	687b      	ldr	r3, [r7, #4]
    fdd2:	7f1b      	ldrb	r3, [r3, #28]
    fdd4:	2b05      	cmp	r3, #5
    fdd6:	d10b      	bne.n	fdf0 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x19c>
        uint32_t *value = (uint32_t*) ODF_arg->data;
    fdd8:	687b      	ldr	r3, [r7, #4]
    fdda:	685b      	ldr	r3, [r3, #4]
    fddc:	60bb      	str	r3, [r7, #8]

        TPDO->eventTimer = ((uint32_t) *value) * 1000;
    fdde:	68bb      	ldr	r3, [r7, #8]
    fde0:	681b      	ldr	r3, [r3, #0]
    fde2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    fde6:	fb02 f203 	mul.w	r2, r2, r3
    fdea:	69fb      	ldr	r3, [r7, #28]
    fdec:	649a      	str	r2, [r3, #72]	; 0x48
    fdee:	e012      	b.n	fe16 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1c2>
    }
    else if(ODF_arg->subIndex == 6){   /* SYNC start value */
    fdf0:	687b      	ldr	r3, [r7, #4]
    fdf2:	7f1b      	ldrb	r3, [r3, #28]
    fdf4:	2b06      	cmp	r3, #6
    fdf6:	d10e      	bne.n	fe16 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1c2>
        uint8_t *value = (uint8_t*) ODF_arg->data;
    fdf8:	687b      	ldr	r3, [r7, #4]
    fdfa:	685b      	ldr	r3, [r3, #4]
    fdfc:	60fb      	str	r3, [r7, #12]

        /* if PDO is valid, value can not be changed */
        if(TPDO->valid)
    fdfe:	69fb      	ldr	r3, [r7, #28]
    fe00:	7f5b      	ldrb	r3, [r3, #29]
    fe02:	2b00      	cmp	r3, #0
    fe04:	d001      	beq.n	fe0a <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1b6>
            return CO_SDO_AB_INVALID_VALUE;  /* Invalid value for parameter (download only). */
    fe06:	4b0a      	ldr	r3, [pc, #40]	; (fe30 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1dc>)
    fe08:	e006      	b.n	fe18 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1c4>

        /* values from 240...255 are not valid */
        if(*value > 240)
    fe0a:	68fb      	ldr	r3, [r7, #12]
    fe0c:	781b      	ldrb	r3, [r3, #0]
    fe0e:	2bf0      	cmp	r3, #240	; 0xf0
    fe10:	dd01      	ble.n	fe16 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1c2>
            return CO_SDO_AB_INVALID_VALUE;  /* Invalid value for parameter (download only). */
    fe12:	4b07      	ldr	r3, [pc, #28]	; (fe30 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1dc>)
    fe14:	e000      	b.n	fe18 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1c4>
    }

    return CO_SDO_AB_NONE;
    fe16:	2300      	movs	r3, #0
}
    fe18:	4618      	mov	r0, r3
    fe1a:	3720      	adds	r7, #32
    fe1c:	46bd      	mov	sp, r7
    fe1e:	bd80      	pop	{r7, pc}
    fe20:	06090011 	.word	0x06090011
    fe24:	06010002 	.word	0x06010002
    fe28:	08000022 	.word	0x08000022
    fe2c:	3fff8000 	.word	0x3fff8000
    fe30:	06090030 	.word	0x06090030
    fe34:	0000f6a1 	.word	0x0000f6a1

0000fe38 <_ZL14CO_ODF_RPDOmapP12CO_ODF_arg_t>:
/*
 * Function for accessing _RPDO mapping parameter_ (index 0x1600+) from SDO server.
 *
 * For more information see file CO_SDO.h.
 */
static CO_SDO_abortCode_t CO_ODF_RPDOmap(CO_ODF_arg_t *ODF_arg){
    fe38:	b590      	push	{r4, r7, lr}
    fe3a:	b08d      	sub	sp, #52	; 0x34
    fe3c:	af04      	add	r7, sp, #16
    fe3e:	6078      	str	r0, [r7, #4]
    CO_RPDO_t *RPDO;

    RPDO = (CO_RPDO_t*) ODF_arg->object;
    fe40:	687b      	ldr	r3, [r7, #4]
    fe42:	681b      	ldr	r3, [r3, #0]
    fe44:	61fb      	str	r3, [r7, #28]

    /* Reading Object Dictionary variable */
    if(ODF_arg->reading){
    fe46:	687b      	ldr	r3, [r7, #4]
    fe48:	7f5b      	ldrb	r3, [r3, #29]
    fe4a:	2b00      	cmp	r3, #0
    fe4c:	d010      	beq.n	fe70 <_ZL14CO_ODF_RPDOmapP12CO_ODF_arg_t+0x38>
        uint8_t *value = (uint8_t*) ODF_arg->data;
    fe4e:	687b      	ldr	r3, [r7, #4]
    fe50:	685b      	ldr	r3, [r3, #4]
    fe52:	61bb      	str	r3, [r7, #24]

        if(ODF_arg->subIndex == 0){
    fe54:	687b      	ldr	r3, [r7, #4]
    fe56:	7f1b      	ldrb	r3, [r3, #28]
    fe58:	2b00      	cmp	r3, #0
    fe5a:	d107      	bne.n	fe6c <_ZL14CO_ODF_RPDOmapP12CO_ODF_arg_t+0x34>
            /* If there is error in mapping, dataLength is 0, so numberOfMappedObjects is 0. */
            if(!RPDO->dataLength) *value = 0;
    fe5c:	69fb      	ldr	r3, [r7, #28]
    fe5e:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
    fe62:	2b00      	cmp	r3, #0
    fe64:	d102      	bne.n	fe6c <_ZL14CO_ODF_RPDOmapP12CO_ODF_arg_t+0x34>
    fe66:	69bb      	ldr	r3, [r7, #24]
    fe68:	2200      	movs	r2, #0
    fe6a:	701a      	strb	r2, [r3, #0]
        }
        return CO_SDO_AB_NONE;
    fe6c:	2300      	movs	r3, #0
    fe6e:	e054      	b.n	ff1a <_ZL14CO_ODF_RPDOmapP12CO_ODF_arg_t+0xe2>
    }

    /* Writing Object Dictionary variable */
    if(RPDO->restrictionFlags & 0x08)
    fe70:	69fb      	ldr	r3, [r7, #28]
    fe72:	f893 3020 	ldrb.w	r3, [r3, #32]
    fe76:	f003 0308 	and.w	r3, r3, #8
    fe7a:	2b00      	cmp	r3, #0
    fe7c:	d001      	beq.n	fe82 <_ZL14CO_ODF_RPDOmapP12CO_ODF_arg_t+0x4a>
        return CO_SDO_AB_READONLY;  /* Attempt to write a read only object. */
    fe7e:	4b29      	ldr	r3, [pc, #164]	; (ff24 <_ZL14CO_ODF_RPDOmapP12CO_ODF_arg_t+0xec>)
    fe80:	e04b      	b.n	ff1a <_ZL14CO_ODF_RPDOmapP12CO_ODF_arg_t+0xe2>
    if(*RPDO->operatingState == CO_NMT_OPERATIONAL && (RPDO->restrictionFlags & 0x02))
    fe82:	69fb      	ldr	r3, [r7, #28]
    fe84:	695b      	ldr	r3, [r3, #20]
    fe86:	781b      	ldrb	r3, [r3, #0]
    fe88:	2b05      	cmp	r3, #5
    fe8a:	d108      	bne.n	fe9e <_ZL14CO_ODF_RPDOmapP12CO_ODF_arg_t+0x66>
    fe8c:	69fb      	ldr	r3, [r7, #28]
    fe8e:	f893 3020 	ldrb.w	r3, [r3, #32]
    fe92:	f003 0302 	and.w	r3, r3, #2
    fe96:	2b00      	cmp	r3, #0
    fe98:	d001      	beq.n	fe9e <_ZL14CO_ODF_RPDOmapP12CO_ODF_arg_t+0x66>
        return CO_SDO_AB_DATA_DEV_STATE;   /* Data cannot be transferred or stored to the application because of the present device state. */
    fe9a:	4b23      	ldr	r3, [pc, #140]	; (ff28 <_ZL14CO_ODF_RPDOmapP12CO_ODF_arg_t+0xf0>)
    fe9c:	e03d      	b.n	ff1a <_ZL14CO_ODF_RPDOmapP12CO_ODF_arg_t+0xe2>
    if(RPDO->valid)
    fe9e:	69fb      	ldr	r3, [r7, #28]
    fea0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
    fea4:	2b00      	cmp	r3, #0
    fea6:	d001      	beq.n	feac <_ZL14CO_ODF_RPDOmapP12CO_ODF_arg_t+0x74>
        return CO_SDO_AB_UNSUPPORTED_ACCESS;  /* Unsupported access to an object. */
    fea8:	4b20      	ldr	r3, [pc, #128]	; (ff2c <_ZL14CO_ODF_RPDOmapP12CO_ODF_arg_t+0xf4>)
    feaa:	e036      	b.n	ff1a <_ZL14CO_ODF_RPDOmapP12CO_ODF_arg_t+0xe2>

    /* numberOfMappedObjects */
    if(ODF_arg->subIndex == 0){
    feac:	687b      	ldr	r3, [r7, #4]
    feae:	7f1b      	ldrb	r3, [r3, #28]
    feb0:	2b00      	cmp	r3, #0
    feb2:	d110      	bne.n	fed6 <_ZL14CO_ODF_RPDOmapP12CO_ODF_arg_t+0x9e>
        uint8_t *value = (uint8_t*) ODF_arg->data;
    feb4:	687b      	ldr	r3, [r7, #4]
    feb6:	685b      	ldr	r3, [r3, #4]
    feb8:	617b      	str	r3, [r7, #20]

        if(*value > 8)
    feba:	697b      	ldr	r3, [r7, #20]
    febc:	781b      	ldrb	r3, [r3, #0]
    febe:	2b08      	cmp	r3, #8
    fec0:	dd01      	ble.n	fec6 <_ZL14CO_ODF_RPDOmapP12CO_ODF_arg_t+0x8e>
            return CO_SDO_AB_MAP_LEN;  /* Number and length of object to be mapped exceeds PDO length. */
    fec2:	4b1b      	ldr	r3, [pc, #108]	; (ff30 <_ZL14CO_ODF_RPDOmapP12CO_ODF_arg_t+0xf8>)
    fec4:	e029      	b.n	ff1a <_ZL14CO_ODF_RPDOmapP12CO_ODF_arg_t+0xe2>

        /* configure mapping */
        return (CO_SDO_abortCode_t)CO_RPDOconfigMap(RPDO, *value);
    fec6:	697b      	ldr	r3, [r7, #20]
    fec8:	781b      	ldrb	r3, [r3, #0]
    feca:	4619      	mov	r1, r3
    fecc:	69f8      	ldr	r0, [r7, #28]
    fece:	4b19      	ldr	r3, [pc, #100]	; (ff34 <_ZL14CO_ODF_RPDOmapP12CO_ODF_arg_t+0xfc>)
    fed0:	4798      	blx	r3
    fed2:	4603      	mov	r3, r0
    fed4:	e021      	b.n	ff1a <_ZL14CO_ODF_RPDOmapP12CO_ODF_arg_t+0xe2>
    }

    /* mappedObject */
    else{
        uint32_t *value = (uint32_t*) ODF_arg->data;
    fed6:	687b      	ldr	r3, [r7, #4]
    fed8:	685b      	ldr	r3, [r3, #4]
    feda:	613b      	str	r3, [r7, #16]
        uint8_t* pData;
        uint8_t length = 0;
    fedc:	2300      	movs	r3, #0
    fede:	72fb      	strb	r3, [r7, #11]
        uint8_t dummy = 0;
    fee0:	2300      	movs	r3, #0
    fee2:	72bb      	strb	r3, [r7, #10]
        uint8_t MBvar;

        if(RPDO->dataLength)
    fee4:	69fb      	ldr	r3, [r7, #28]
    fee6:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
    feea:	2b00      	cmp	r3, #0
    feec:	d001      	beq.n	fef2 <_ZL14CO_ODF_RPDOmapP12CO_ODF_arg_t+0xba>
            return CO_SDO_AB_UNSUPPORTED_ACCESS;  /* Unsupported access to an object. */
    feee:	4b0f      	ldr	r3, [pc, #60]	; (ff2c <_ZL14CO_ODF_RPDOmapP12CO_ODF_arg_t+0xf4>)
    fef0:	e013      	b.n	ff1a <_ZL14CO_ODF_RPDOmapP12CO_ODF_arg_t+0xe2>

        /* verify if mapping is correct */
        return  (CO_SDO_abortCode_t)CO_PDOfindMap(
    fef2:	69fb      	ldr	r3, [r7, #28]
    fef4:	6858      	ldr	r0, [r3, #4]
    fef6:	693b      	ldr	r3, [r7, #16]
    fef8:	6819      	ldr	r1, [r3, #0]
               *value,
                0,
               &pData,
               &length,
               &dummy,
               &MBvar);
    fefa:	f107 020c 	add.w	r2, r7, #12
    fefe:	f107 0309 	add.w	r3, r7, #9
    ff02:	9302      	str	r3, [sp, #8]
    ff04:	f107 030a 	add.w	r3, r7, #10
    ff08:	9301      	str	r3, [sp, #4]
    ff0a:	f107 030b 	add.w	r3, r7, #11
    ff0e:	9300      	str	r3, [sp, #0]
    ff10:	4613      	mov	r3, r2
    ff12:	2200      	movs	r2, #0
    ff14:	4c08      	ldr	r4, [pc, #32]	; (ff38 <_ZL14CO_ODF_RPDOmapP12CO_ODF_arg_t+0x100>)
    ff16:	47a0      	blx	r4
    ff18:	4603      	mov	r3, r0
    }

    return CO_SDO_AB_NONE;
}
    ff1a:	4618      	mov	r0, r3
    ff1c:	3724      	adds	r7, #36	; 0x24
    ff1e:	46bd      	mov	sp, r7
    ff20:	bd90      	pop	{r4, r7, pc}
    ff22:	bf00      	nop
    ff24:	06010002 	.word	0x06010002
    ff28:	08000022 	.word	0x08000022
    ff2c:	06010000 	.word	0x06010000
    ff30:	06040042 	.word	0x06040042
    ff34:	0000f935 	.word	0x0000f935
    ff38:	0000f735 	.word	0x0000f735

0000ff3c <_ZL14CO_ODF_TPDOmapP12CO_ODF_arg_t>:
/*
 * Function for accessing _TPDO mapping parameter_ (index 0x1A00+) from SDO server.
 *
 * For more information see file CO_SDO.h.
 */
static CO_SDO_abortCode_t CO_ODF_TPDOmap(CO_ODF_arg_t *ODF_arg){
    ff3c:	b590      	push	{r4, r7, lr}
    ff3e:	b08d      	sub	sp, #52	; 0x34
    ff40:	af04      	add	r7, sp, #16
    ff42:	6078      	str	r0, [r7, #4]
    CO_TPDO_t *TPDO;

    TPDO = (CO_TPDO_t*) ODF_arg->object;
    ff44:	687b      	ldr	r3, [r7, #4]
    ff46:	681b      	ldr	r3, [r3, #0]
    ff48:	61fb      	str	r3, [r7, #28]

    /* Reading Object Dictionary variable */
    if(ODF_arg->reading){
    ff4a:	687b      	ldr	r3, [r7, #4]
    ff4c:	7f5b      	ldrb	r3, [r3, #29]
    ff4e:	2b00      	cmp	r3, #0
    ff50:	d00f      	beq.n	ff72 <_ZL14CO_ODF_TPDOmapP12CO_ODF_arg_t+0x36>
        uint8_t *value = (uint8_t*) ODF_arg->data;
    ff52:	687b      	ldr	r3, [r7, #4]
    ff54:	685b      	ldr	r3, [r3, #4]
    ff56:	61bb      	str	r3, [r7, #24]

        if(ODF_arg->subIndex == 0){
    ff58:	687b      	ldr	r3, [r7, #4]
    ff5a:	7f1b      	ldrb	r3, [r3, #28]
    ff5c:	2b00      	cmp	r3, #0
    ff5e:	d106      	bne.n	ff6e <_ZL14CO_ODF_TPDOmapP12CO_ODF_arg_t+0x32>
            /* If there is error in mapping, dataLength is 0, so numberOfMappedObjects is 0. */
            if(!TPDO->dataLength) *value = 0;
    ff60:	69fb      	ldr	r3, [r7, #28]
    ff62:	7f9b      	ldrb	r3, [r3, #30]
    ff64:	2b00      	cmp	r3, #0
    ff66:	d102      	bne.n	ff6e <_ZL14CO_ODF_TPDOmapP12CO_ODF_arg_t+0x32>
    ff68:	69bb      	ldr	r3, [r7, #24]
    ff6a:	2200      	movs	r2, #0
    ff6c:	701a      	strb	r2, [r3, #0]
        }
        return CO_SDO_AB_NONE;
    ff6e:	2300      	movs	r3, #0
    ff70:	e050      	b.n	10014 <STACK_SIZE+0x14>
    }

    /* Writing Object Dictionary variable */
    if(TPDO->restrictionFlags & 0x08)
    ff72:	69fb      	ldr	r3, [r7, #28]
    ff74:	7f1b      	ldrb	r3, [r3, #28]
    ff76:	f003 0308 	and.w	r3, r3, #8
    ff7a:	2b00      	cmp	r3, #0
    ff7c:	d001      	beq.n	ff82 <_ZL14CO_ODF_TPDOmapP12CO_ODF_arg_t+0x46>
        return CO_SDO_AB_READONLY;  /* Attempt to write a read only object. */
    ff7e:	4b27      	ldr	r3, [pc, #156]	; (1001c <STACK_SIZE+0x1c>)
    ff80:	e048      	b.n	10014 <STACK_SIZE+0x14>
    if(*TPDO->operatingState == CO_NMT_OPERATIONAL && (TPDO->restrictionFlags & 0x02))
    ff82:	69fb      	ldr	r3, [r7, #28]
    ff84:	691b      	ldr	r3, [r3, #16]
    ff86:	781b      	ldrb	r3, [r3, #0]
    ff88:	2b05      	cmp	r3, #5
    ff8a:	d107      	bne.n	ff9c <_ZL14CO_ODF_TPDOmapP12CO_ODF_arg_t+0x60>
    ff8c:	69fb      	ldr	r3, [r7, #28]
    ff8e:	7f1b      	ldrb	r3, [r3, #28]
    ff90:	f003 0302 	and.w	r3, r3, #2
    ff94:	2b00      	cmp	r3, #0
    ff96:	d001      	beq.n	ff9c <_ZL14CO_ODF_TPDOmapP12CO_ODF_arg_t+0x60>
        return CO_SDO_AB_DATA_DEV_STATE;   /* Data cannot be transferred or stored to the application because of the present device state. */
    ff98:	4b21      	ldr	r3, [pc, #132]	; (10020 <STACK_SIZE+0x20>)
    ff9a:	e03b      	b.n	10014 <STACK_SIZE+0x14>
    if(TPDO->valid)
    ff9c:	69fb      	ldr	r3, [r7, #28]
    ff9e:	7f5b      	ldrb	r3, [r3, #29]
    ffa0:	2b00      	cmp	r3, #0
    ffa2:	d001      	beq.n	ffa8 <_ZL14CO_ODF_TPDOmapP12CO_ODF_arg_t+0x6c>
        return CO_SDO_AB_UNSUPPORTED_ACCESS;  /* Unsupported access to an object. */
    ffa4:	4b1f      	ldr	r3, [pc, #124]	; (10024 <STACK_SIZE+0x24>)
    ffa6:	e035      	b.n	10014 <STACK_SIZE+0x14>

    /* numberOfMappedObjects */
    if(ODF_arg->subIndex == 0){
    ffa8:	687b      	ldr	r3, [r7, #4]
    ffaa:	7f1b      	ldrb	r3, [r3, #28]
    ffac:	2b00      	cmp	r3, #0
    ffae:	d110      	bne.n	ffd2 <_ZL14CO_ODF_TPDOmapP12CO_ODF_arg_t+0x96>
        uint8_t *value = (uint8_t*) ODF_arg->data;
    ffb0:	687b      	ldr	r3, [r7, #4]
    ffb2:	685b      	ldr	r3, [r3, #4]
    ffb4:	617b      	str	r3, [r7, #20]

        if(*value > 8)
    ffb6:	697b      	ldr	r3, [r7, #20]
    ffb8:	781b      	ldrb	r3, [r3, #0]
    ffba:	2b08      	cmp	r3, #8
    ffbc:	dd01      	ble.n	ffc2 <_ZL14CO_ODF_TPDOmapP12CO_ODF_arg_t+0x86>
            return CO_SDO_AB_MAP_LEN;  /* Number and length of object to be mapped exceeds PDO length. */
    ffbe:	4b1a      	ldr	r3, [pc, #104]	; (10028 <STACK_SIZE+0x28>)
    ffc0:	e028      	b.n	10014 <STACK_SIZE+0x14>

        /* configure mapping */
        return (CO_SDO_abortCode_t)CO_TPDOconfigMap(TPDO, *value);
    ffc2:	697b      	ldr	r3, [r7, #20]
    ffc4:	781b      	ldrb	r3, [r3, #0]
    ffc6:	4619      	mov	r1, r3
    ffc8:	69f8      	ldr	r0, [r7, #28]
    ffca:	4b18      	ldr	r3, [pc, #96]	; (1002c <STACK_SIZE+0x2c>)
    ffcc:	4798      	blx	r3
    ffce:	4603      	mov	r3, r0
    ffd0:	e020      	b.n	10014 <STACK_SIZE+0x14>
    }

    /* mappedObject */
    else{
        uint32_t *value = (uint32_t*) ODF_arg->data;
    ffd2:	687b      	ldr	r3, [r7, #4]
    ffd4:	685b      	ldr	r3, [r3, #4]
    ffd6:	613b      	str	r3, [r7, #16]
        uint8_t* pData;
        uint8_t length = 0;
    ffd8:	2300      	movs	r3, #0
    ffda:	72fb      	strb	r3, [r7, #11]
        uint8_t dummy = 0;
    ffdc:	2300      	movs	r3, #0
    ffde:	72bb      	strb	r3, [r7, #10]
        uint8_t MBvar;

        if(TPDO->dataLength)
    ffe0:	69fb      	ldr	r3, [r7, #28]
    ffe2:	7f9b      	ldrb	r3, [r3, #30]
    ffe4:	2b00      	cmp	r3, #0
    ffe6:	d001      	beq.n	ffec <_ZL14CO_ODF_TPDOmapP12CO_ODF_arg_t+0xb0>
            return CO_SDO_AB_UNSUPPORTED_ACCESS;  /* Unsupported access to an object. */
    ffe8:	4b0e      	ldr	r3, [pc, #56]	; (10024 <STACK_SIZE+0x24>)
    ffea:	e013      	b.n	10014 <STACK_SIZE+0x14>

        /* verify if mapping is correct */
        return (CO_SDO_abortCode_t)CO_PDOfindMap(
    ffec:	69fb      	ldr	r3, [r7, #28]
    ffee:	6858      	ldr	r0, [r3, #4]
    fff0:	693b      	ldr	r3, [r7, #16]
    fff2:	6819      	ldr	r1, [r3, #0]
               *value,
                1,
               &pData,
               &length,
               &dummy,
               &MBvar);
    fff4:	f107 020c 	add.w	r2, r7, #12
    fff8:	f107 0309 	add.w	r3, r7, #9
    fffc:	9302      	str	r3, [sp, #8]
    fffe:	f107 030a 	add.w	r3, r7, #10
   10002:	9301      	str	r3, [sp, #4]
   10004:	f107 030b 	add.w	r3, r7, #11
   10008:	9300      	str	r3, [sp, #0]
   1000a:	4613      	mov	r3, r2
   1000c:	2201      	movs	r2, #1
   1000e:	4c08      	ldr	r4, [pc, #32]	; (10030 <STACK_SIZE+0x30>)
   10010:	47a0      	blx	r4
   10012:	4603      	mov	r3, r0
    }

    return CO_SDO_AB_NONE;
}
   10014:	4618      	mov	r0, r3
   10016:	3724      	adds	r7, #36	; 0x24
   10018:	46bd      	mov	sp, r7
   1001a:	bd90      	pop	{r4, r7, pc}
   1001c:	06010002 	.word	0x06010002
   10020:	08000022 	.word	0x08000022
   10024:	06010000 	.word	0x06010000
   10028:	06040042 	.word	0x06040042
   1002c:	0000fa05 	.word	0x0000fa05
   10030:	0000f735 	.word	0x0000f735

00010034 <_ZN12CO_PDO_Class12CO_RPDO_initEP9CO_RPDO_tP7CO_EM_tP8CO_SDO_tP9CO_SYNC_tPhhmhPK16CO_RPDOCommPar_tPK15CO_RPDOMapPar_tmmP14CO_CANmodule_tm>:
        const CO_RPDOMapPar_t  *RPDOMapPar,
        uint32_t                idx_RPDOCommPar,
        uint32_t                idx_RPDOMapPar,
        CO_CANmodule_t         *CANdevRx,
        uint32_t                CANdevRxIdx)
{
   10034:	b590      	push	{r4, r7, lr}
   10036:	b087      	sub	sp, #28
   10038:	af02      	add	r7, sp, #8
   1003a:	60f8      	str	r0, [r7, #12]
   1003c:	60b9      	str	r1, [r7, #8]
   1003e:	607a      	str	r2, [r7, #4]
   10040:	603b      	str	r3, [r7, #0]
    /* verify arguments */
    if(RPDO==NULL || em==NULL || SDO==NULL || SYNC==NULL || operatingState==NULL ||
   10042:	68bb      	ldr	r3, [r7, #8]
   10044:	2b00      	cmp	r3, #0
   10046:	d014      	beq.n	10072 <_ZN12CO_PDO_Class12CO_RPDO_initEP9CO_RPDO_tP7CO_EM_tP8CO_SDO_tP9CO_SYNC_tPhhmhPK16CO_RPDOCommPar_tPK15CO_RPDOMapPar_tmmP14CO_CANmodule_tm+0x3e>
   10048:	687b      	ldr	r3, [r7, #4]
   1004a:	2b00      	cmp	r3, #0
   1004c:	d011      	beq.n	10072 <_ZN12CO_PDO_Class12CO_RPDO_initEP9CO_RPDO_tP7CO_EM_tP8CO_SDO_tP9CO_SYNC_tPhhmhPK16CO_RPDOCommPar_tPK15CO_RPDOMapPar_tmmP14CO_CANmodule_tm+0x3e>
   1004e:	683b      	ldr	r3, [r7, #0]
   10050:	2b00      	cmp	r3, #0
   10052:	d00e      	beq.n	10072 <_ZN12CO_PDO_Class12CO_RPDO_initEP9CO_RPDO_tP7CO_EM_tP8CO_SDO_tP9CO_SYNC_tPhhmhPK16CO_RPDOCommPar_tPK15CO_RPDOMapPar_tmmP14CO_CANmodule_tm+0x3e>
   10054:	6a3b      	ldr	r3, [r7, #32]
   10056:	2b00      	cmp	r3, #0
   10058:	d00b      	beq.n	10072 <_ZN12CO_PDO_Class12CO_RPDO_initEP9CO_RPDO_tP7CO_EM_tP8CO_SDO_tP9CO_SYNC_tPhhmhPK16CO_RPDOCommPar_tPK15CO_RPDOMapPar_tmmP14CO_CANmodule_tm+0x3e>
   1005a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1005c:	2b00      	cmp	r3, #0
   1005e:	d008      	beq.n	10072 <_ZN12CO_PDO_Class12CO_RPDO_initEP9CO_RPDO_tP7CO_EM_tP8CO_SDO_tP9CO_SYNC_tPhhmhPK16CO_RPDOCommPar_tPK15CO_RPDOMapPar_tmmP14CO_CANmodule_tm+0x3e>
   10060:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   10062:	2b00      	cmp	r3, #0
   10064:	d005      	beq.n	10072 <_ZN12CO_PDO_Class12CO_RPDO_initEP9CO_RPDO_tP7CO_EM_tP8CO_SDO_tP9CO_SYNC_tPhhmhPK16CO_RPDOCommPar_tPK15CO_RPDOMapPar_tmmP14CO_CANmodule_tm+0x3e>
        RPDOCommPar==NULL || RPDOMapPar==NULL || CANdevRx==NULL){
   10066:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   10068:	2b00      	cmp	r3, #0
   1006a:	d002      	beq.n	10072 <_ZN12CO_PDO_Class12CO_RPDO_initEP9CO_RPDO_tP7CO_EM_tP8CO_SDO_tP9CO_SYNC_tPhhmhPK16CO_RPDOCommPar_tPK15CO_RPDOMapPar_tmmP14CO_CANmodule_tm+0x3e>
   1006c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   1006e:	2b00      	cmp	r3, #0
   10070:	d102      	bne.n	10078 <_ZN12CO_PDO_Class12CO_RPDO_initEP9CO_RPDO_tP7CO_EM_tP8CO_SDO_tP9CO_SYNC_tPhhmhPK16CO_RPDOCommPar_tPK15CO_RPDOMapPar_tmmP14CO_CANmodule_tm+0x44>
        return CO_ERROR_ILLEGAL_ARGUMENT;
   10072:	f04f 33ff 	mov.w	r3, #4294967295
   10076:	e050      	b.n	1011a <_ZN12CO_PDO_Class12CO_RPDO_initEP9CO_RPDO_tP7CO_EM_tP8CO_SDO_tP9CO_SYNC_tPhhmhPK16CO_RPDOCommPar_tPK15CO_RPDOMapPar_tmmP14CO_CANmodule_tm+0xe6>
    }

    /* Configure object variables */
    RPDO->em = em;
   10078:	68bb      	ldr	r3, [r7, #8]
   1007a:	687a      	ldr	r2, [r7, #4]
   1007c:	601a      	str	r2, [r3, #0]
    RPDO->SDO = SDO;
   1007e:	68bb      	ldr	r3, [r7, #8]
   10080:	683a      	ldr	r2, [r7, #0]
   10082:	605a      	str	r2, [r3, #4]
    RPDO->SYNC = SYNC;
   10084:	68bb      	ldr	r3, [r7, #8]
   10086:	6a3a      	ldr	r2, [r7, #32]
   10088:	609a      	str	r2, [r3, #8]
    RPDO->RPDOCommPar = RPDOCommPar;
   1008a:	68bb      	ldr	r3, [r7, #8]
   1008c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   1008e:	60da      	str	r2, [r3, #12]
    RPDO->RPDOMapPar = RPDOMapPar;
   10090:	68bb      	ldr	r3, [r7, #8]
   10092:	6bba      	ldr	r2, [r7, #56]	; 0x38
   10094:	611a      	str	r2, [r3, #16]
    RPDO->operatingState = operatingState;
   10096:	68bb      	ldr	r3, [r7, #8]
   10098:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   1009a:	615a      	str	r2, [r3, #20]
    RPDO->nodeId = nodeId;
   1009c:	68bb      	ldr	r3, [r7, #8]
   1009e:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
   100a2:	761a      	strb	r2, [r3, #24]
    RPDO->defaultCOB_ID = defaultCOB_ID;
   100a4:	68bb      	ldr	r3, [r7, #8]
   100a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   100a8:	61da      	str	r2, [r3, #28]
    RPDO->restrictionFlags = restrictionFlags;
   100aa:	68bb      	ldr	r3, [r7, #8]
   100ac:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
   100b0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Configure Object dictionary entry at index 0x1400+ and 0x1600+ */
    canopen_driver->CO_OD_configure( idx_RPDOCommPar, CO_ODF_RPDOcom, (void*)RPDO, 0, 0);
   100b4:	4b1b      	ldr	r3, [pc, #108]	; (10124 <_ZN12CO_PDO_Class12CO_RPDO_initEP9CO_RPDO_tP7CO_EM_tP8CO_SDO_tP9CO_SYNC_tPhhmhPK16CO_RPDOCommPar_tPK15CO_RPDOMapPar_tmmP14CO_CANmodule_tm+0xf0>)
   100b6:	681b      	ldr	r3, [r3, #0]
   100b8:	1d18      	adds	r0, r3, #4
   100ba:	2300      	movs	r3, #0
   100bc:	9301      	str	r3, [sp, #4]
   100be:	2300      	movs	r3, #0
   100c0:	9300      	str	r3, [sp, #0]
   100c2:	68bb      	ldr	r3, [r7, #8]
   100c4:	4a18      	ldr	r2, [pc, #96]	; (10128 <_ZN12CO_PDO_Class12CO_RPDO_initEP9CO_RPDO_tP7CO_EM_tP8CO_SDO_tP9CO_SYNC_tPhhmhPK16CO_RPDOCommPar_tPK15CO_RPDOMapPar_tmmP14CO_CANmodule_tm+0xf4>)
   100c6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
   100c8:	4c18      	ldr	r4, [pc, #96]	; (1012c <_ZN12CO_PDO_Class12CO_RPDO_initEP9CO_RPDO_tP7CO_EM_tP8CO_SDO_tP9CO_SYNC_tPhhmhPK16CO_RPDOCommPar_tPK15CO_RPDOMapPar_tmmP14CO_CANmodule_tm+0xf8>)
   100ca:	47a0      	blx	r4
    canopen_driver->CO_OD_configure( idx_RPDOMapPar, CO_ODF_RPDOmap, (void*)RPDO, 0, 0);
   100cc:	4b15      	ldr	r3, [pc, #84]	; (10124 <_ZN12CO_PDO_Class12CO_RPDO_initEP9CO_RPDO_tP7CO_EM_tP8CO_SDO_tP9CO_SYNC_tPhhmhPK16CO_RPDOCommPar_tPK15CO_RPDOMapPar_tmmP14CO_CANmodule_tm+0xf0>)
   100ce:	681b      	ldr	r3, [r3, #0]
   100d0:	1d18      	adds	r0, r3, #4
   100d2:	2300      	movs	r3, #0
   100d4:	9301      	str	r3, [sp, #4]
   100d6:	2300      	movs	r3, #0
   100d8:	9300      	str	r3, [sp, #0]
   100da:	68bb      	ldr	r3, [r7, #8]
   100dc:	4a14      	ldr	r2, [pc, #80]	; (10130 <_ZN12CO_PDO_Class12CO_RPDO_initEP9CO_RPDO_tP7CO_EM_tP8CO_SDO_tP9CO_SYNC_tPhhmhPK16CO_RPDOCommPar_tPK15CO_RPDOMapPar_tmmP14CO_CANmodule_tm+0xfc>)
   100de:	6c39      	ldr	r1, [r7, #64]	; 0x40
   100e0:	4c12      	ldr	r4, [pc, #72]	; (1012c <_ZN12CO_PDO_Class12CO_RPDO_initEP9CO_RPDO_tP7CO_EM_tP8CO_SDO_tP9CO_SYNC_tPhhmhPK16CO_RPDOCommPar_tPK15CO_RPDOMapPar_tmmP14CO_CANmodule_tm+0xf8>)
   100e2:	47a0      	blx	r4

    /* configure communication and mapping */
    RPDO->CANrxNew[0] = RPDO->CANrxNew[1] = false;
   100e4:	68bb      	ldr	r3, [r7, #8]
   100e6:	2200      	movs	r2, #0
   100e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
   100ec:	68bb      	ldr	r3, [r7, #8]
   100ee:	2200      	movs	r2, #0
   100f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    RPDO->CANdevRx = CANdevRx;
   100f4:	68bb      	ldr	r3, [r7, #8]
   100f6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
   100f8:	659a      	str	r2, [r3, #88]	; 0x58
    RPDO->CANdevRxIdx = CANdevRxIdx;
   100fa:	68bb      	ldr	r3, [r7, #8]
   100fc:	6cba      	ldr	r2, [r7, #72]	; 0x48
   100fe:	65da      	str	r2, [r3, #92]	; 0x5c

    CO_RPDOconfigMap(RPDO, RPDOMapPar->numberOfMappedObjects);
   10100:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   10102:	781b      	ldrb	r3, [r3, #0]
   10104:	4619      	mov	r1, r3
   10106:	68b8      	ldr	r0, [r7, #8]
   10108:	4b0a      	ldr	r3, [pc, #40]	; (10134 <_ZN12CO_PDO_Class12CO_RPDO_initEP9CO_RPDO_tP7CO_EM_tP8CO_SDO_tP9CO_SYNC_tPhhmhPK16CO_RPDOCommPar_tPK15CO_RPDOMapPar_tmmP14CO_CANmodule_tm+0x100>)
   1010a:	4798      	blx	r3
   CO_RPDOconfigCom(RPDO, RPDOCommPar->COB_IDUsedByRPDO);
   1010c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1010e:	685b      	ldr	r3, [r3, #4]
   10110:	4619      	mov	r1, r3
   10112:	68b8      	ldr	r0, [r7, #8]
   10114:	4b08      	ldr	r3, [pc, #32]	; (10138 <_ZN12CO_PDO_Class12CO_RPDO_initEP9CO_RPDO_tP7CO_EM_tP8CO_SDO_tP9CO_SYNC_tPhhmhPK16CO_RPDOCommPar_tPK15CO_RPDOMapPar_tmmP14CO_CANmodule_tm+0x104>)
   10116:	4798      	blx	r3

    return CO_ERROR_NO;
   10118:	2300      	movs	r3, #0
}
   1011a:	4618      	mov	r0, r3
   1011c:	3714      	adds	r7, #20
   1011e:	46bd      	mov	sp, r7
   10120:	bd90      	pop	{r4, r7, pc}
   10122:	bf00      	nop
   10124:	20001abc 	.word	0x20001abc
   10128:	0000fad5 	.word	0x0000fad5
   1012c:	00010c69 	.word	0x00010c69
   10130:	0000fe39 	.word	0x0000fe39
   10134:	0000f935 	.word	0x0000f935
   10138:	0000f5c9 	.word	0x0000f5c9

0001013c <_ZN12CO_PDO_Class12CO_TPDO_initEP9CO_TPDO_tP7CO_EM_tP8CO_SDO_tPhhmhPK16CO_TPDOCommPar_tPK15CO_TPDOMapPar_tmmP14CO_CANmodule_tm>:
        const CO_TPDOMapPar_t  *TPDOMapPar,
        uint32_t                idx_TPDOCommPar,
        uint32_t                idx_TPDOMapPar,
        CO_CANmodule_t         *CANdevTx,
        uint32_t                CANdevTxIdx)
{
   1013c:	b590      	push	{r4, r7, lr}
   1013e:	b087      	sub	sp, #28
   10140:	af02      	add	r7, sp, #8
   10142:	60f8      	str	r0, [r7, #12]
   10144:	60b9      	str	r1, [r7, #8]
   10146:	607a      	str	r2, [r7, #4]
   10148:	603b      	str	r3, [r7, #0]
    /* verify arguments */
    if(TPDO==NULL || em==NULL || SDO==NULL || operatingState==NULL ||
   1014a:	68bb      	ldr	r3, [r7, #8]
   1014c:	2b00      	cmp	r3, #0
   1014e:	d011      	beq.n	10174 <_ZN12CO_PDO_Class12CO_TPDO_initEP9CO_TPDO_tP7CO_EM_tP8CO_SDO_tPhhmhPK16CO_TPDOCommPar_tPK15CO_TPDOMapPar_tmmP14CO_CANmodule_tm+0x38>
   10150:	687b      	ldr	r3, [r7, #4]
   10152:	2b00      	cmp	r3, #0
   10154:	d00e      	beq.n	10174 <_ZN12CO_PDO_Class12CO_TPDO_initEP9CO_TPDO_tP7CO_EM_tP8CO_SDO_tPhhmhPK16CO_TPDOCommPar_tPK15CO_TPDOMapPar_tmmP14CO_CANmodule_tm+0x38>
   10156:	683b      	ldr	r3, [r7, #0]
   10158:	2b00      	cmp	r3, #0
   1015a:	d00b      	beq.n	10174 <_ZN12CO_PDO_Class12CO_TPDO_initEP9CO_TPDO_tP7CO_EM_tP8CO_SDO_tPhhmhPK16CO_TPDOCommPar_tPK15CO_TPDOMapPar_tmmP14CO_CANmodule_tm+0x38>
   1015c:	6a3b      	ldr	r3, [r7, #32]
   1015e:	2b00      	cmp	r3, #0
   10160:	d008      	beq.n	10174 <_ZN12CO_PDO_Class12CO_TPDO_initEP9CO_TPDO_tP7CO_EM_tP8CO_SDO_tPhhmhPK16CO_TPDOCommPar_tPK15CO_TPDOMapPar_tmmP14CO_CANmodule_tm+0x38>
   10162:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   10164:	2b00      	cmp	r3, #0
   10166:	d005      	beq.n	10174 <_ZN12CO_PDO_Class12CO_TPDO_initEP9CO_TPDO_tP7CO_EM_tP8CO_SDO_tPhhmhPK16CO_TPDOCommPar_tPK15CO_TPDOMapPar_tmmP14CO_CANmodule_tm+0x38>
        TPDOCommPar==NULL || TPDOMapPar==NULL || CANdevTx==NULL){
   10168:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1016a:	2b00      	cmp	r3, #0
   1016c:	d002      	beq.n	10174 <_ZN12CO_PDO_Class12CO_TPDO_initEP9CO_TPDO_tP7CO_EM_tP8CO_SDO_tPhhmhPK16CO_TPDOCommPar_tPK15CO_TPDOMapPar_tmmP14CO_CANmodule_tm+0x38>
   1016e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   10170:	2b00      	cmp	r3, #0
   10172:	d102      	bne.n	1017a <_ZN12CO_PDO_Class12CO_TPDO_initEP9CO_TPDO_tP7CO_EM_tP8CO_SDO_tPhhmhPK16CO_TPDOCommPar_tPK15CO_TPDOMapPar_tmmP14CO_CANmodule_tm+0x3e>
        return CO_ERROR_ILLEGAL_ARGUMENT;
   10174:	f04f 33ff 	mov.w	r3, #4294967295
   10178:	e07e      	b.n	10278 <_ZN12CO_PDO_Class12CO_TPDO_initEP9CO_TPDO_tP7CO_EM_tP8CO_SDO_tPhhmhPK16CO_TPDOCommPar_tPK15CO_TPDOMapPar_tmmP14CO_CANmodule_tm+0x13c>
    }

    /* Configure object variables */
    TPDO->em = em;
   1017a:	68bb      	ldr	r3, [r7, #8]
   1017c:	687a      	ldr	r2, [r7, #4]
   1017e:	601a      	str	r2, [r3, #0]
    TPDO->SDO = SDO;
   10180:	68bb      	ldr	r3, [r7, #8]
   10182:	683a      	ldr	r2, [r7, #0]
   10184:	605a      	str	r2, [r3, #4]
    TPDO->TPDOCommPar = TPDOCommPar;
   10186:	68bb      	ldr	r3, [r7, #8]
   10188:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   1018a:	609a      	str	r2, [r3, #8]
    TPDO->TPDOMapPar = TPDOMapPar;
   1018c:	68bb      	ldr	r3, [r7, #8]
   1018e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   10190:	60da      	str	r2, [r3, #12]
    TPDO->operatingState = operatingState;
   10192:	68bb      	ldr	r3, [r7, #8]
   10194:	6a3a      	ldr	r2, [r7, #32]
   10196:	611a      	str	r2, [r3, #16]
    TPDO->nodeId = nodeId;
   10198:	68bb      	ldr	r3, [r7, #8]
   1019a:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
   1019e:	751a      	strb	r2, [r3, #20]
    TPDO->defaultCOB_ID = defaultCOB_ID;
   101a0:	68bb      	ldr	r3, [r7, #8]
   101a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
   101a4:	619a      	str	r2, [r3, #24]
    TPDO->restrictionFlags = restrictionFlags;
   101a6:	68bb      	ldr	r3, [r7, #8]
   101a8:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
   101ac:	771a      	strb	r2, [r3, #28]

    /* Configure Object dictionary entry at index 0x1800+ and 0x1A00+ */
    canopen_driver->CO_OD_configure( idx_TPDOCommPar, CO_ODF_TPDOcom, (void*)TPDO, 0, 0);
   101ae:	4b34      	ldr	r3, [pc, #208]	; (10280 <_ZN12CO_PDO_Class12CO_TPDO_initEP9CO_TPDO_tP7CO_EM_tP8CO_SDO_tPhhmhPK16CO_TPDOCommPar_tPK15CO_TPDOMapPar_tmmP14CO_CANmodule_tm+0x144>)
   101b0:	681b      	ldr	r3, [r3, #0]
   101b2:	1d18      	adds	r0, r3, #4
   101b4:	2300      	movs	r3, #0
   101b6:	9301      	str	r3, [sp, #4]
   101b8:	2300      	movs	r3, #0
   101ba:	9300      	str	r3, [sp, #0]
   101bc:	68bb      	ldr	r3, [r7, #8]
   101be:	4a31      	ldr	r2, [pc, #196]	; (10284 <_ZN12CO_PDO_Class12CO_TPDO_initEP9CO_TPDO_tP7CO_EM_tP8CO_SDO_tPhhmhPK16CO_TPDOCommPar_tPK15CO_TPDOMapPar_tmmP14CO_CANmodule_tm+0x148>)
   101c0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
   101c2:	4c31      	ldr	r4, [pc, #196]	; (10288 <_ZN12CO_PDO_Class12CO_TPDO_initEP9CO_TPDO_tP7CO_EM_tP8CO_SDO_tPhhmhPK16CO_TPDOCommPar_tPK15CO_TPDOMapPar_tmmP14CO_CANmodule_tm+0x14c>)
   101c4:	47a0      	blx	r4
    canopen_driver->CO_OD_configure( idx_TPDOMapPar, CO_ODF_TPDOmap, (void*)TPDO, 0, 0);
   101c6:	4b2e      	ldr	r3, [pc, #184]	; (10280 <_ZN12CO_PDO_Class12CO_TPDO_initEP9CO_TPDO_tP7CO_EM_tP8CO_SDO_tPhhmhPK16CO_TPDOCommPar_tPK15CO_TPDOMapPar_tmmP14CO_CANmodule_tm+0x144>)
   101c8:	681b      	ldr	r3, [r3, #0]
   101ca:	1d18      	adds	r0, r3, #4
   101cc:	2300      	movs	r3, #0
   101ce:	9301      	str	r3, [sp, #4]
   101d0:	2300      	movs	r3, #0
   101d2:	9300      	str	r3, [sp, #0]
   101d4:	68bb      	ldr	r3, [r7, #8]
   101d6:	4a2d      	ldr	r2, [pc, #180]	; (1028c <_ZN12CO_PDO_Class12CO_TPDO_initEP9CO_TPDO_tP7CO_EM_tP8CO_SDO_tPhhmhPK16CO_TPDOCommPar_tPK15CO_TPDOMapPar_tmmP14CO_CANmodule_tm+0x150>)
   101d8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
   101da:	4c2b      	ldr	r4, [pc, #172]	; (10288 <_ZN12CO_PDO_Class12CO_TPDO_initEP9CO_TPDO_tP7CO_EM_tP8CO_SDO_tPhhmhPK16CO_TPDOCommPar_tPK15CO_TPDOMapPar_tmmP14CO_CANmodule_tm+0x14c>)
   101dc:	47a0      	blx	r4

    /* configure communication and mapping */
    TPDO->CANdevTx = CANdevTx;
   101de:	68bb      	ldr	r3, [r7, #8]
   101e0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   101e2:	64da      	str	r2, [r3, #76]	; 0x4c
    TPDO->CANdevTxIdx = CANdevTxIdx;
   101e4:	68bb      	ldr	r3, [r7, #8]
   101e6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
   101e8:	655a      	str	r2, [r3, #84]	; 0x54
    TPDO->syncCounter = 255;
   101ea:	68bb      	ldr	r3, [r7, #8]
   101ec:	22ff      	movs	r2, #255	; 0xff
   101ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    TPDO->inhibitTimer = 0;
   101f2:	68bb      	ldr	r3, [r7, #8]
   101f4:	2200      	movs	r2, #0
   101f6:	645a      	str	r2, [r3, #68]	; 0x44
    TPDO->eventTimer = ((uint32_t) TPDOCommPar->eventTimer) * 1000;
   101f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   101fa:	695b      	ldr	r3, [r3, #20]
   101fc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   10200:	fb02 f203 	mul.w	r2, r2, r3
   10204:	68bb      	ldr	r3, [r7, #8]
   10206:	649a      	str	r2, [r3, #72]	; 0x48
    if(TPDOCommPar->transmissionType>=254) TPDO->sendRequest = 1;
   10208:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1020a:	7a1b      	ldrb	r3, [r3, #8]
   1020c:	2bfd      	cmp	r3, #253	; 0xfd
   1020e:	dd02      	ble.n	10216 <_ZN12CO_PDO_Class12CO_TPDO_initEP9CO_TPDO_tP7CO_EM_tP8CO_SDO_tPhhmhPK16CO_TPDOCommPar_tPK15CO_TPDOMapPar_tmmP14CO_CANmodule_tm+0xda>
   10210:	68bb      	ldr	r3, [r7, #8]
   10212:	2201      	movs	r2, #1
   10214:	77da      	strb	r2, [r3, #31]

    CO_TPDOconfigMap(TPDO, TPDOMapPar->numberOfMappedObjects);
   10216:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   10218:	781b      	ldrb	r3, [r3, #0]
   1021a:	4619      	mov	r1, r3
   1021c:	68b8      	ldr	r0, [r7, #8]
   1021e:	4b1c      	ldr	r3, [pc, #112]	; (10290 <_ZN12CO_PDO_Class12CO_TPDO_initEP9CO_TPDO_tP7CO_EM_tP8CO_SDO_tPhhmhPK16CO_TPDOCommPar_tPK15CO_TPDOMapPar_tmmP14CO_CANmodule_tm+0x154>)
   10220:	4798      	blx	r3
    CO_TPDOconfigCom(TPDO, TPDOCommPar->COB_IDUsedByTPDO, ((TPDOCommPar->transmissionType<=240) ? 1 : 0));
   10222:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   10224:	6859      	ldr	r1, [r3, #4]
   10226:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   10228:	7a1b      	ldrb	r3, [r3, #8]
   1022a:	2bf0      	cmp	r3, #240	; 0xf0
   1022c:	dc01      	bgt.n	10232 <_ZN12CO_PDO_Class12CO_TPDO_initEP9CO_TPDO_tP7CO_EM_tP8CO_SDO_tPhhmhPK16CO_TPDOCommPar_tPK15CO_TPDOMapPar_tmmP14CO_CANmodule_tm+0xf6>
   1022e:	2301      	movs	r3, #1
   10230:	e000      	b.n	10234 <_ZN12CO_PDO_Class12CO_TPDO_initEP9CO_TPDO_tP7CO_EM_tP8CO_SDO_tPhhmhPK16CO_TPDOCommPar_tPK15CO_TPDOMapPar_tmmP14CO_CANmodule_tm+0xf8>
   10232:	2300      	movs	r3, #0
   10234:	461a      	mov	r2, r3
   10236:	68b8      	ldr	r0, [r7, #8]
   10238:	4b16      	ldr	r3, [pc, #88]	; (10294 <_ZN12CO_PDO_Class12CO_TPDO_initEP9CO_TPDO_tP7CO_EM_tP8CO_SDO_tPhhmhPK16CO_TPDOCommPar_tPK15CO_TPDOMapPar_tmmP14CO_CANmodule_tm+0x158>)
   1023a:	4798      	blx	r3

    if((TPDOCommPar->transmissionType>240 &&
   1023c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1023e:	7a1b      	ldrb	r3, [r3, #8]
   10240:	2bf0      	cmp	r3, #240	; 0xf0
   10242:	dd03      	ble.n	1024c <_ZN12CO_PDO_Class12CO_TPDO_initEP9CO_TPDO_tP7CO_EM_tP8CO_SDO_tPhhmhPK16CO_TPDOCommPar_tPK15CO_TPDOMapPar_tmmP14CO_CANmodule_tm+0x110>
         TPDOCommPar->transmissionType<254) ||
   10244:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   10246:	7a1b      	ldrb	r3, [r3, #8]
    if((TPDOCommPar->transmissionType>240 &&
   10248:	2bfd      	cmp	r3, #253	; 0xfd
   1024a:	dd03      	ble.n	10254 <_ZN12CO_PDO_Class12CO_TPDO_initEP9CO_TPDO_tP7CO_EM_tP8CO_SDO_tPhhmhPK16CO_TPDOCommPar_tPK15CO_TPDOMapPar_tmmP14CO_CANmodule_tm+0x118>
         TPDOCommPar->SYNCStartValue>240){
   1024c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1024e:	7e1b      	ldrb	r3, [r3, #24]
         TPDOCommPar->transmissionType<254) ||
   10250:	2bf0      	cmp	r3, #240	; 0xf0
   10252:	dd02      	ble.n	1025a <_ZN12CO_PDO_Class12CO_TPDO_initEP9CO_TPDO_tP7CO_EM_tP8CO_SDO_tPhhmhPK16CO_TPDOCommPar_tPK15CO_TPDOMapPar_tmmP14CO_CANmodule_tm+0x11e>
            TPDO->valid = false;
   10254:	68bb      	ldr	r3, [r7, #8]
   10256:	2200      	movs	r2, #0
   10258:	775a      	strb	r2, [r3, #29]
    }
	node_ID=nodeId; 
   1025a:	68fb      	ldr	r3, [r7, #12]
   1025c:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
   10260:	721a      	strb	r2, [r3, #8]
	memcpy(&local_tx_buffer,TPDO->CANtxBuff,sizeof(CO_CANtx_t));
   10262:	68bb      	ldr	r3, [r7, #8]
   10264:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   10266:	2210      	movs	r2, #16
   10268:	4619      	mov	r1, r3
   1026a:	480b      	ldr	r0, [pc, #44]	; (10298 <_ZN12CO_PDO_Class12CO_TPDO_initEP9CO_TPDO_tP7CO_EM_tP8CO_SDO_tPhhmhPK16CO_TPDOCommPar_tPK15CO_TPDOMapPar_tmmP14CO_CANmodule_tm+0x15c>)
   1026c:	4b0b      	ldr	r3, [pc, #44]	; (1029c <_ZN12CO_PDO_Class12CO_TPDO_initEP9CO_TPDO_tP7CO_EM_tP8CO_SDO_tPhhmhPK16CO_TPDOCommPar_tPK15CO_TPDOMapPar_tmmP14CO_CANmodule_tm+0x160>)
   1026e:	4798      	blx	r3
	tx_buffer=&local_tx_buffer;
   10270:	68fb      	ldr	r3, [r7, #12]
   10272:	4a09      	ldr	r2, [pc, #36]	; (10298 <_ZN12CO_PDO_Class12CO_TPDO_initEP9CO_TPDO_tP7CO_EM_tP8CO_SDO_tPhhmhPK16CO_TPDOCommPar_tPK15CO_TPDOMapPar_tmmP14CO_CANmodule_tm+0x15c>)
   10274:	601a      	str	r2, [r3, #0]
    return CO_ERROR_NO;
   10276:	2300      	movs	r3, #0
}
   10278:	4618      	mov	r0, r3
   1027a:	3714      	adds	r7, #20
   1027c:	46bd      	mov	sp, r7
   1027e:	bd90      	pop	{r4, r7, pc}
   10280:	20001abc 	.word	0x20001abc
   10284:	0000fc55 	.word	0x0000fc55
   10288:	00010c69 	.word	0x00010c69
   1028c:	0000ff3d 	.word	0x0000ff3d
   10290:	0000fa05 	.word	0x0000fa05
   10294:	0000f6a1 	.word	0x0000f6a1
   10298:	20001ad0 	.word	0x20001ad0
   1029c:	00012f1d 	.word	0x00012f1d

000102a0 <_ZN12CO_PDO_Class12CO_TPDOisCOSEP9CO_TPDO_t>:


/******************************************************************************/
uint8_t CO_PDO_Class::CO_TPDOisCOS(CO_TPDO_t *TPDO){
   102a0:	b480      	push	{r7}
   102a2:	b085      	sub	sp, #20
   102a4:	af00      	add	r7, sp, #0
   102a6:	6078      	str	r0, [r7, #4]
   102a8:	6039      	str	r1, [r7, #0]

    /* Prepare TPDO data automatically from Object Dictionary variables */
    uint8_t* pPDOdataByte;
    uint8_t** ppODdataByte;

    pPDOdataByte = &TPDO->CANtxBuff->data[TPDO->dataLength];
   102aa:	683b      	ldr	r3, [r7, #0]
   102ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   102ae:	683a      	ldr	r2, [r7, #0]
   102b0:	7f92      	ldrb	r2, [r2, #30]
   102b2:	4413      	add	r3, r2
   102b4:	3305      	adds	r3, #5
   102b6:	60fb      	str	r3, [r7, #12]
    ppODdataByte = &TPDO->mapPointer[TPDO->dataLength];
   102b8:	683b      	ldr	r3, [r7, #0]
   102ba:	7f9b      	ldrb	r3, [r3, #30]
   102bc:	3308      	adds	r3, #8
   102be:	009b      	lsls	r3, r3, #2
   102c0:	683a      	ldr	r2, [r7, #0]
   102c2:	4413      	add	r3, r2
   102c4:	60bb      	str	r3, [r7, #8]

    switch(TPDO->dataLength){
   102c6:	683b      	ldr	r3, [r7, #0]
   102c8:	7f9b      	ldrb	r3, [r3, #30]
   102ca:	3b01      	subs	r3, #1
   102cc:	2b07      	cmp	r3, #7
   102ce:	f200 80ea 	bhi.w	104a6 <_ZN12CO_PDO_Class12CO_TPDOisCOSEP9CO_TPDO_t+0x206>
   102d2:	a201      	add	r2, pc, #4	; (adr r2, 102d8 <_ZN12CO_PDO_Class12CO_TPDOisCOSEP9CO_TPDO_t+0x38>)
   102d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   102d8:	00010471 	.word	0x00010471
   102dc:	0001043b 	.word	0x0001043b
   102e0:	00010405 	.word	0x00010405
   102e4:	000103cf 	.word	0x000103cf
   102e8:	00010399 	.word	0x00010399
   102ec:	00010363 	.word	0x00010363
   102f0:	0001032d 	.word	0x0001032d
   102f4:	000102f9 	.word	0x000102f9
        case 8: if(*(--pPDOdataByte) != **(--ppODdataByte) && (TPDO->sendIfCOSFlags&0x80)) return 1;
   102f8:	68fb      	ldr	r3, [r7, #12]
   102fa:	3b01      	subs	r3, #1
   102fc:	60fb      	str	r3, [r7, #12]
   102fe:	68fb      	ldr	r3, [r7, #12]
   10300:	781a      	ldrb	r2, [r3, #0]
   10302:	68bb      	ldr	r3, [r7, #8]
   10304:	3b04      	subs	r3, #4
   10306:	60bb      	str	r3, [r7, #8]
   10308:	68bb      	ldr	r3, [r7, #8]
   1030a:	681b      	ldr	r3, [r3, #0]
   1030c:	781b      	ldrb	r3, [r3, #0]
   1030e:	429a      	cmp	r2, r3
   10310:	d007      	beq.n	10322 <_ZN12CO_PDO_Class12CO_TPDOisCOSEP9CO_TPDO_t+0x82>
   10312:	683b      	ldr	r3, [r7, #0]
   10314:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
   10318:	b25b      	sxtb	r3, r3
   1031a:	2b00      	cmp	r3, #0
   1031c:	da01      	bge.n	10322 <_ZN12CO_PDO_Class12CO_TPDOisCOSEP9CO_TPDO_t+0x82>
   1031e:	2301      	movs	r3, #1
   10320:	e000      	b.n	10324 <_ZN12CO_PDO_Class12CO_TPDOisCOSEP9CO_TPDO_t+0x84>
   10322:	2300      	movs	r3, #0
   10324:	2b00      	cmp	r3, #0
   10326:	d001      	beq.n	1032c <_ZN12CO_PDO_Class12CO_TPDOisCOSEP9CO_TPDO_t+0x8c>
   10328:	2301      	movs	r3, #1
   1032a:	e0bd      	b.n	104a8 <_ZN12CO_PDO_Class12CO_TPDOisCOSEP9CO_TPDO_t+0x208>
        case 7: if(*(--pPDOdataByte) != **(--ppODdataByte) && (TPDO->sendIfCOSFlags&0x40)) return 1;
   1032c:	68fb      	ldr	r3, [r7, #12]
   1032e:	3b01      	subs	r3, #1
   10330:	60fb      	str	r3, [r7, #12]
   10332:	68fb      	ldr	r3, [r7, #12]
   10334:	781a      	ldrb	r2, [r3, #0]
   10336:	68bb      	ldr	r3, [r7, #8]
   10338:	3b04      	subs	r3, #4
   1033a:	60bb      	str	r3, [r7, #8]
   1033c:	68bb      	ldr	r3, [r7, #8]
   1033e:	681b      	ldr	r3, [r3, #0]
   10340:	781b      	ldrb	r3, [r3, #0]
   10342:	429a      	cmp	r2, r3
   10344:	d008      	beq.n	10358 <_ZN12CO_PDO_Class12CO_TPDOisCOSEP9CO_TPDO_t+0xb8>
   10346:	683b      	ldr	r3, [r7, #0]
   10348:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
   1034c:	f003 0340 	and.w	r3, r3, #64	; 0x40
   10350:	2b00      	cmp	r3, #0
   10352:	d001      	beq.n	10358 <_ZN12CO_PDO_Class12CO_TPDOisCOSEP9CO_TPDO_t+0xb8>
   10354:	2301      	movs	r3, #1
   10356:	e000      	b.n	1035a <_ZN12CO_PDO_Class12CO_TPDOisCOSEP9CO_TPDO_t+0xba>
   10358:	2300      	movs	r3, #0
   1035a:	2b00      	cmp	r3, #0
   1035c:	d001      	beq.n	10362 <_ZN12CO_PDO_Class12CO_TPDOisCOSEP9CO_TPDO_t+0xc2>
   1035e:	2301      	movs	r3, #1
   10360:	e0a2      	b.n	104a8 <_ZN12CO_PDO_Class12CO_TPDOisCOSEP9CO_TPDO_t+0x208>
        case 6: if(*(--pPDOdataByte) != **(--ppODdataByte) && (TPDO->sendIfCOSFlags&0x20)) return 1;
   10362:	68fb      	ldr	r3, [r7, #12]
   10364:	3b01      	subs	r3, #1
   10366:	60fb      	str	r3, [r7, #12]
   10368:	68fb      	ldr	r3, [r7, #12]
   1036a:	781a      	ldrb	r2, [r3, #0]
   1036c:	68bb      	ldr	r3, [r7, #8]
   1036e:	3b04      	subs	r3, #4
   10370:	60bb      	str	r3, [r7, #8]
   10372:	68bb      	ldr	r3, [r7, #8]
   10374:	681b      	ldr	r3, [r3, #0]
   10376:	781b      	ldrb	r3, [r3, #0]
   10378:	429a      	cmp	r2, r3
   1037a:	d008      	beq.n	1038e <_ZN12CO_PDO_Class12CO_TPDOisCOSEP9CO_TPDO_t+0xee>
   1037c:	683b      	ldr	r3, [r7, #0]
   1037e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
   10382:	f003 0320 	and.w	r3, r3, #32
   10386:	2b00      	cmp	r3, #0
   10388:	d001      	beq.n	1038e <_ZN12CO_PDO_Class12CO_TPDOisCOSEP9CO_TPDO_t+0xee>
   1038a:	2301      	movs	r3, #1
   1038c:	e000      	b.n	10390 <_ZN12CO_PDO_Class12CO_TPDOisCOSEP9CO_TPDO_t+0xf0>
   1038e:	2300      	movs	r3, #0
   10390:	2b00      	cmp	r3, #0
   10392:	d001      	beq.n	10398 <_ZN12CO_PDO_Class12CO_TPDOisCOSEP9CO_TPDO_t+0xf8>
   10394:	2301      	movs	r3, #1
   10396:	e087      	b.n	104a8 <_ZN12CO_PDO_Class12CO_TPDOisCOSEP9CO_TPDO_t+0x208>
        case 5: if(*(--pPDOdataByte) != **(--ppODdataByte) && (TPDO->sendIfCOSFlags&0x10)) return 1;
   10398:	68fb      	ldr	r3, [r7, #12]
   1039a:	3b01      	subs	r3, #1
   1039c:	60fb      	str	r3, [r7, #12]
   1039e:	68fb      	ldr	r3, [r7, #12]
   103a0:	781a      	ldrb	r2, [r3, #0]
   103a2:	68bb      	ldr	r3, [r7, #8]
   103a4:	3b04      	subs	r3, #4
   103a6:	60bb      	str	r3, [r7, #8]
   103a8:	68bb      	ldr	r3, [r7, #8]
   103aa:	681b      	ldr	r3, [r3, #0]
   103ac:	781b      	ldrb	r3, [r3, #0]
   103ae:	429a      	cmp	r2, r3
   103b0:	d008      	beq.n	103c4 <_ZN12CO_PDO_Class12CO_TPDOisCOSEP9CO_TPDO_t+0x124>
   103b2:	683b      	ldr	r3, [r7, #0]
   103b4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
   103b8:	f003 0310 	and.w	r3, r3, #16
   103bc:	2b00      	cmp	r3, #0
   103be:	d001      	beq.n	103c4 <_ZN12CO_PDO_Class12CO_TPDOisCOSEP9CO_TPDO_t+0x124>
   103c0:	2301      	movs	r3, #1
   103c2:	e000      	b.n	103c6 <_ZN12CO_PDO_Class12CO_TPDOisCOSEP9CO_TPDO_t+0x126>
   103c4:	2300      	movs	r3, #0
   103c6:	2b00      	cmp	r3, #0
   103c8:	d001      	beq.n	103ce <_ZN12CO_PDO_Class12CO_TPDOisCOSEP9CO_TPDO_t+0x12e>
   103ca:	2301      	movs	r3, #1
   103cc:	e06c      	b.n	104a8 <_ZN12CO_PDO_Class12CO_TPDOisCOSEP9CO_TPDO_t+0x208>
        case 4: if(*(--pPDOdataByte) != **(--ppODdataByte) && (TPDO->sendIfCOSFlags&0x08)) return 1;
   103ce:	68fb      	ldr	r3, [r7, #12]
   103d0:	3b01      	subs	r3, #1
   103d2:	60fb      	str	r3, [r7, #12]
   103d4:	68fb      	ldr	r3, [r7, #12]
   103d6:	781a      	ldrb	r2, [r3, #0]
   103d8:	68bb      	ldr	r3, [r7, #8]
   103da:	3b04      	subs	r3, #4
   103dc:	60bb      	str	r3, [r7, #8]
   103de:	68bb      	ldr	r3, [r7, #8]
   103e0:	681b      	ldr	r3, [r3, #0]
   103e2:	781b      	ldrb	r3, [r3, #0]
   103e4:	429a      	cmp	r2, r3
   103e6:	d008      	beq.n	103fa <_ZN12CO_PDO_Class12CO_TPDOisCOSEP9CO_TPDO_t+0x15a>
   103e8:	683b      	ldr	r3, [r7, #0]
   103ea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
   103ee:	f003 0308 	and.w	r3, r3, #8
   103f2:	2b00      	cmp	r3, #0
   103f4:	d001      	beq.n	103fa <_ZN12CO_PDO_Class12CO_TPDOisCOSEP9CO_TPDO_t+0x15a>
   103f6:	2301      	movs	r3, #1
   103f8:	e000      	b.n	103fc <_ZN12CO_PDO_Class12CO_TPDOisCOSEP9CO_TPDO_t+0x15c>
   103fa:	2300      	movs	r3, #0
   103fc:	2b00      	cmp	r3, #0
   103fe:	d001      	beq.n	10404 <_ZN12CO_PDO_Class12CO_TPDOisCOSEP9CO_TPDO_t+0x164>
   10400:	2301      	movs	r3, #1
   10402:	e051      	b.n	104a8 <_ZN12CO_PDO_Class12CO_TPDOisCOSEP9CO_TPDO_t+0x208>
        case 3: if(*(--pPDOdataByte) != **(--ppODdataByte) && (TPDO->sendIfCOSFlags&0x04)) return 1;
   10404:	68fb      	ldr	r3, [r7, #12]
   10406:	3b01      	subs	r3, #1
   10408:	60fb      	str	r3, [r7, #12]
   1040a:	68fb      	ldr	r3, [r7, #12]
   1040c:	781a      	ldrb	r2, [r3, #0]
   1040e:	68bb      	ldr	r3, [r7, #8]
   10410:	3b04      	subs	r3, #4
   10412:	60bb      	str	r3, [r7, #8]
   10414:	68bb      	ldr	r3, [r7, #8]
   10416:	681b      	ldr	r3, [r3, #0]
   10418:	781b      	ldrb	r3, [r3, #0]
   1041a:	429a      	cmp	r2, r3
   1041c:	d008      	beq.n	10430 <_ZN12CO_PDO_Class12CO_TPDOisCOSEP9CO_TPDO_t+0x190>
   1041e:	683b      	ldr	r3, [r7, #0]
   10420:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
   10424:	f003 0304 	and.w	r3, r3, #4
   10428:	2b00      	cmp	r3, #0
   1042a:	d001      	beq.n	10430 <_ZN12CO_PDO_Class12CO_TPDOisCOSEP9CO_TPDO_t+0x190>
   1042c:	2301      	movs	r3, #1
   1042e:	e000      	b.n	10432 <_ZN12CO_PDO_Class12CO_TPDOisCOSEP9CO_TPDO_t+0x192>
   10430:	2300      	movs	r3, #0
   10432:	2b00      	cmp	r3, #0
   10434:	d001      	beq.n	1043a <_ZN12CO_PDO_Class12CO_TPDOisCOSEP9CO_TPDO_t+0x19a>
   10436:	2301      	movs	r3, #1
   10438:	e036      	b.n	104a8 <_ZN12CO_PDO_Class12CO_TPDOisCOSEP9CO_TPDO_t+0x208>
        case 2: if(*(--pPDOdataByte) != **(--ppODdataByte) && (TPDO->sendIfCOSFlags&0x02)) return 1;
   1043a:	68fb      	ldr	r3, [r7, #12]
   1043c:	3b01      	subs	r3, #1
   1043e:	60fb      	str	r3, [r7, #12]
   10440:	68fb      	ldr	r3, [r7, #12]
   10442:	781a      	ldrb	r2, [r3, #0]
   10444:	68bb      	ldr	r3, [r7, #8]
   10446:	3b04      	subs	r3, #4
   10448:	60bb      	str	r3, [r7, #8]
   1044a:	68bb      	ldr	r3, [r7, #8]
   1044c:	681b      	ldr	r3, [r3, #0]
   1044e:	781b      	ldrb	r3, [r3, #0]
   10450:	429a      	cmp	r2, r3
   10452:	d008      	beq.n	10466 <_ZN12CO_PDO_Class12CO_TPDOisCOSEP9CO_TPDO_t+0x1c6>
   10454:	683b      	ldr	r3, [r7, #0]
   10456:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
   1045a:	f003 0302 	and.w	r3, r3, #2
   1045e:	2b00      	cmp	r3, #0
   10460:	d001      	beq.n	10466 <_ZN12CO_PDO_Class12CO_TPDOisCOSEP9CO_TPDO_t+0x1c6>
   10462:	2301      	movs	r3, #1
   10464:	e000      	b.n	10468 <_ZN12CO_PDO_Class12CO_TPDOisCOSEP9CO_TPDO_t+0x1c8>
   10466:	2300      	movs	r3, #0
   10468:	2b00      	cmp	r3, #0
   1046a:	d001      	beq.n	10470 <_ZN12CO_PDO_Class12CO_TPDOisCOSEP9CO_TPDO_t+0x1d0>
   1046c:	2301      	movs	r3, #1
   1046e:	e01b      	b.n	104a8 <_ZN12CO_PDO_Class12CO_TPDOisCOSEP9CO_TPDO_t+0x208>
        case 1: if(*(--pPDOdataByte) != **(--ppODdataByte) && (TPDO->sendIfCOSFlags&0x01)) return 1;
   10470:	68fb      	ldr	r3, [r7, #12]
   10472:	3b01      	subs	r3, #1
   10474:	60fb      	str	r3, [r7, #12]
   10476:	68fb      	ldr	r3, [r7, #12]
   10478:	781a      	ldrb	r2, [r3, #0]
   1047a:	68bb      	ldr	r3, [r7, #8]
   1047c:	3b04      	subs	r3, #4
   1047e:	60bb      	str	r3, [r7, #8]
   10480:	68bb      	ldr	r3, [r7, #8]
   10482:	681b      	ldr	r3, [r3, #0]
   10484:	781b      	ldrb	r3, [r3, #0]
   10486:	429a      	cmp	r2, r3
   10488:	d008      	beq.n	1049c <_ZN12CO_PDO_Class12CO_TPDOisCOSEP9CO_TPDO_t+0x1fc>
   1048a:	683b      	ldr	r3, [r7, #0]
   1048c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
   10490:	f003 0301 	and.w	r3, r3, #1
   10494:	2b00      	cmp	r3, #0
   10496:	d001      	beq.n	1049c <_ZN12CO_PDO_Class12CO_TPDOisCOSEP9CO_TPDO_t+0x1fc>
   10498:	2301      	movs	r3, #1
   1049a:	e000      	b.n	1049e <_ZN12CO_PDO_Class12CO_TPDOisCOSEP9CO_TPDO_t+0x1fe>
   1049c:	2300      	movs	r3, #0
   1049e:	2b00      	cmp	r3, #0
   104a0:	d001      	beq.n	104a6 <_ZN12CO_PDO_Class12CO_TPDOisCOSEP9CO_TPDO_t+0x206>
   104a2:	2301      	movs	r3, #1
   104a4:	e000      	b.n	104a8 <_ZN12CO_PDO_Class12CO_TPDOisCOSEP9CO_TPDO_t+0x208>
    }

    return 0;
   104a6:	2300      	movs	r3, #0
}
   104a8:	4618      	mov	r0, r3
   104aa:	3714      	adds	r7, #20
   104ac:	46bd      	mov	sp, r7
   104ae:	bc80      	pop	{r7}
   104b0:	4770      	bx	lr
   104b2:	bf00      	nop

000104b4 <_ZN12CO_PDO_Class11CO_TPDOsendEP9CO_TPDO_t>:

//#define TPDO_CALLS_EXTENSION
/******************************************************************************/
uint32_t CO_PDO_Class::CO_TPDOsend(CO_TPDO_t *TPDO){
   104b4:	b580      	push	{r7, lr}
   104b6:	b086      	sub	sp, #24
   104b8:	af00      	add	r7, sp, #0
   104ba:	6078      	str	r0, [r7, #4]
   104bc:	6039      	str	r1, [r7, #0]
        }
    }
#endif


    i = TPDO->dataLength;
   104be:	683b      	ldr	r3, [r7, #0]
   104c0:	7f9b      	ldrb	r3, [r3, #30]
   104c2:	617b      	str	r3, [r7, #20]
    pPDOdataByte = &TPDO->CANtxBuff->data[0];
   104c4:	683b      	ldr	r3, [r7, #0]
   104c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   104c8:	3305      	adds	r3, #5
   104ca:	613b      	str	r3, [r7, #16]
    ppODdataByte = &TPDO->mapPointer[0];
   104cc:	683b      	ldr	r3, [r7, #0]
   104ce:	3320      	adds	r3, #32
   104d0:	60fb      	str	r3, [r7, #12]

    /* Copy data from Object dictionary. */
    for(; i>0; i--) {
   104d2:	697b      	ldr	r3, [r7, #20]
   104d4:	2b00      	cmp	r3, #0
   104d6:	d00c      	beq.n	104f2 <_ZN12CO_PDO_Class11CO_TPDOsendEP9CO_TPDO_t+0x3e>
		
	    *(pPDOdataByte++) = **(ppODdataByte++);
   104d8:	693b      	ldr	r3, [r7, #16]
   104da:	1c5a      	adds	r2, r3, #1
   104dc:	613a      	str	r2, [r7, #16]
   104de:	68fa      	ldr	r2, [r7, #12]
   104e0:	1d11      	adds	r1, r2, #4
   104e2:	60f9      	str	r1, [r7, #12]
   104e4:	6812      	ldr	r2, [r2, #0]
   104e6:	7812      	ldrb	r2, [r2, #0]
   104e8:	701a      	strb	r2, [r3, #0]
    for(; i>0; i--) {
   104ea:	697b      	ldr	r3, [r7, #20]
   104ec:	3b01      	subs	r3, #1
   104ee:	617b      	str	r3, [r7, #20]
   104f0:	e7ef      	b.n	104d2 <_ZN12CO_PDO_Class11CO_TPDOsendEP9CO_TPDO_t+0x1e>
		
    }

    TPDO->sendRequest = 0;
   104f2:	683b      	ldr	r3, [r7, #0]
   104f4:	2200      	movs	r2, #0
   104f6:	77da      	strb	r2, [r3, #31]



    return   canopen_driver->CAN_Send( TPDO->CANtxBuff);
   104f8:	4b06      	ldr	r3, [pc, #24]	; (10514 <_ZN12CO_PDO_Class11CO_TPDOsendEP9CO_TPDO_t+0x60>)
   104fa:	681a      	ldr	r2, [r3, #0]
   104fc:	683b      	ldr	r3, [r7, #0]
   104fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   10500:	4619      	mov	r1, r3
   10502:	4610      	mov	r0, r2
   10504:	4b04      	ldr	r3, [pc, #16]	; (10518 <_ZN12CO_PDO_Class11CO_TPDOsendEP9CO_TPDO_t+0x64>)
   10506:	4798      	blx	r3
   10508:	4603      	mov	r3, r0
}
   1050a:	4618      	mov	r0, r3
   1050c:	3718      	adds	r7, #24
   1050e:	46bd      	mov	sp, r7
   10510:	bd80      	pop	{r7, pc}
   10512:	bf00      	nop
   10514:	20001abc 	.word	0x20001abc
   10518:	0000dc55 	.word	0x0000dc55

0001051c <_ZN12CO_PDO_Class15CO_RPDO_processEP9CO_RPDO_th>:
	 return   canopen_driver->CAN_Send(tx_buffer);
}

//#define RPDO_CALLS_EXTENSION
/******************************************************************************/
void CO_PDO_Class::CO_RPDO_process(CO_RPDO_t *RPDO, bool_t syncWas){
   1051c:	b480      	push	{r7}
   1051e:	b089      	sub	sp, #36	; 0x24
   10520:	af00      	add	r7, sp, #0
   10522:	60f8      	str	r0, [r7, #12]
   10524:	60b9      	str	r1, [r7, #8]
   10526:	4613      	mov	r3, r2
   10528:	71fb      	strb	r3, [r7, #7]

    if(!RPDO->valid || !(*RPDO->operatingState == CO_NMT_OPERATIONAL))
   1052a:	68bb      	ldr	r3, [r7, #8]
   1052c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
   10530:	2b00      	cmp	r3, #0
   10532:	d004      	beq.n	1053e <_ZN12CO_PDO_Class15CO_RPDO_processEP9CO_RPDO_th+0x22>
   10534:	68bb      	ldr	r3, [r7, #8]
   10536:	695b      	ldr	r3, [r3, #20]
   10538:	781b      	ldrb	r3, [r3, #0]
   1053a:	2b05      	cmp	r3, #5
   1053c:	d009      	beq.n	10552 <_ZN12CO_PDO_Class15CO_RPDO_processEP9CO_RPDO_th+0x36>
    {
        RPDO->CANrxNew[0] = RPDO->CANrxNew[1] = false;
   1053e:	68bb      	ldr	r3, [r7, #8]
   10540:	2200      	movs	r2, #0
   10542:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
   10546:	68bb      	ldr	r3, [r7, #8]
   10548:	2200      	movs	r2, #0
   1054a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
   1054e:	bf00      	nop
                }
            }
#endif
        }
    }
}
   10550:	e046      	b.n	105e0 <_ZN12CO_PDO_Class15CO_RPDO_processEP9CO_RPDO_th+0xc4>
    else if(!RPDO->synchronous || syncWas)
   10552:	68bb      	ldr	r3, [r7, #8]
   10554:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
   10558:	2b00      	cmp	r3, #0
   1055a:	d002      	beq.n	10562 <_ZN12CO_PDO_Class15CO_RPDO_processEP9CO_RPDO_th+0x46>
   1055c:	79fb      	ldrb	r3, [r7, #7]
   1055e:	2b00      	cmp	r3, #0
   10560:	d03e      	beq.n	105e0 <_ZN12CO_PDO_Class15CO_RPDO_processEP9CO_RPDO_th+0xc4>
        uint8_t bufNo = 0;
   10562:	2300      	movs	r3, #0
   10564:	77fb      	strb	r3, [r7, #31]
        if(RPDO->synchronous && !RPDO->SYNC->CANrxToggle) {
   10566:	68bb      	ldr	r3, [r7, #8]
   10568:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
   1056c:	2b00      	cmp	r3, #0
   1056e:	d006      	beq.n	1057e <_ZN12CO_PDO_Class15CO_RPDO_processEP9CO_RPDO_th+0x62>
   10570:	68bb      	ldr	r3, [r7, #8]
   10572:	689b      	ldr	r3, [r3, #8]
   10574:	7edb      	ldrb	r3, [r3, #27]
   10576:	2b00      	cmp	r3, #0
   10578:	d101      	bne.n	1057e <_ZN12CO_PDO_Class15CO_RPDO_processEP9CO_RPDO_th+0x62>
            bufNo = 1;
   1057a:	2301      	movs	r3, #1
   1057c:	77fb      	strb	r3, [r7, #31]
        while(RPDO->CANrxNew[bufNo]){
   1057e:	7ffb      	ldrb	r3, [r7, #31]
   10580:	68ba      	ldr	r2, [r7, #8]
   10582:	4413      	add	r3, r2
   10584:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
   10588:	b2db      	uxtb	r3, r3
   1058a:	2b00      	cmp	r3, #0
   1058c:	bf14      	ite	ne
   1058e:	2301      	movne	r3, #1
   10590:	2300      	moveq	r3, #0
   10592:	b2db      	uxtb	r3, r3
   10594:	2b00      	cmp	r3, #0
   10596:	d023      	beq.n	105e0 <_ZN12CO_PDO_Class15CO_RPDO_processEP9CO_RPDO_th+0xc4>
            i = RPDO->dataLength;
   10598:	68bb      	ldr	r3, [r7, #8]
   1059a:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
   1059e:	61bb      	str	r3, [r7, #24]
            pPDOdataByte = &RPDO->CANrxData[bufNo][0];
   105a0:	7ffb      	ldrb	r3, [r7, #31]
   105a2:	3308      	adds	r3, #8
   105a4:	00db      	lsls	r3, r3, #3
   105a6:	68ba      	ldr	r2, [r7, #8]
   105a8:	4413      	add	r3, r2
   105aa:	3306      	adds	r3, #6
   105ac:	617b      	str	r3, [r7, #20]
            ppODdataByte = &RPDO->mapPointer[0];
   105ae:	68bb      	ldr	r3, [r7, #8]
   105b0:	3324      	adds	r3, #36	; 0x24
   105b2:	613b      	str	r3, [r7, #16]
            RPDO->CANrxNew[bufNo] = false;
   105b4:	7ffb      	ldrb	r3, [r7, #31]
   105b6:	68ba      	ldr	r2, [r7, #8]
   105b8:	4413      	add	r3, r2
   105ba:	2200      	movs	r2, #0
   105bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            for(; i>0; i--) {
   105c0:	69bb      	ldr	r3, [r7, #24]
   105c2:	2b00      	cmp	r3, #0
   105c4:	d0db      	beq.n	1057e <_ZN12CO_PDO_Class15CO_RPDO_processEP9CO_RPDO_th+0x62>
                **(ppODdataByte++) = *(pPDOdataByte++);
   105c6:	693b      	ldr	r3, [r7, #16]
   105c8:	1d1a      	adds	r2, r3, #4
   105ca:	613a      	str	r2, [r7, #16]
   105cc:	681a      	ldr	r2, [r3, #0]
   105ce:	697b      	ldr	r3, [r7, #20]
   105d0:	1c59      	adds	r1, r3, #1
   105d2:	6179      	str	r1, [r7, #20]
   105d4:	781b      	ldrb	r3, [r3, #0]
   105d6:	7013      	strb	r3, [r2, #0]
            for(; i>0; i--) {
   105d8:	69bb      	ldr	r3, [r7, #24]
   105da:	3b01      	subs	r3, #1
   105dc:	61bb      	str	r3, [r7, #24]
   105de:	e7ef      	b.n	105c0 <_ZN12CO_PDO_Class15CO_RPDO_processEP9CO_RPDO_th+0xa4>
}
   105e0:	bf00      	nop
   105e2:	3724      	adds	r7, #36	; 0x24
   105e4:	46bd      	mov	sp, r7
   105e6:	bc80      	pop	{r7}
   105e8:	4770      	bx	lr
	...

000105ec <_ZN12CO_PDO_Class15CO_TPDO_processEP9CO_TPDO_tP9CO_SYNC_thm>:
void CO_PDO_Class::CO_TPDO_process(
        CO_TPDO_t              *TPDO,
        CO_SYNC_t              *SYNC,
        bool_t                  syncWas,
        uint32_t                timeDifference_us)
{
   105ec:	b580      	push	{r7, lr}
   105ee:	b084      	sub	sp, #16
   105f0:	af00      	add	r7, sp, #0
   105f2:	60f8      	str	r0, [r7, #12]
   105f4:	60b9      	str	r1, [r7, #8]
   105f6:	607a      	str	r2, [r7, #4]
   105f8:	70fb      	strb	r3, [r7, #3]
    if(TPDO->valid && *TPDO->operatingState == CO_NMT_OPERATIONAL){
   105fa:	68bb      	ldr	r3, [r7, #8]
   105fc:	7f5b      	ldrb	r3, [r3, #29]
   105fe:	2b00      	cmp	r3, #0
   10600:	f000 809a 	beq.w	10738 <_ZN12CO_PDO_Class15CO_TPDO_processEP9CO_TPDO_tP9CO_SYNC_thm+0x14c>
   10604:	68bb      	ldr	r3, [r7, #8]
   10606:	691b      	ldr	r3, [r3, #16]
   10608:	781b      	ldrb	r3, [r3, #0]
   1060a:	2b05      	cmp	r3, #5
   1060c:	f040 8094 	bne.w	10738 <_ZN12CO_PDO_Class15CO_TPDO_processEP9CO_TPDO_tP9CO_SYNC_thm+0x14c>

        /* Send PDO by application request or by Event timer */
        if(TPDO->TPDOCommPar->transmissionType >= 253){
   10610:	68bb      	ldr	r3, [r7, #8]
   10612:	689b      	ldr	r3, [r3, #8]
   10614:	7a1b      	ldrb	r3, [r3, #8]
   10616:	2bfc      	cmp	r3, #252	; 0xfc
   10618:	dd31      	ble.n	1067e <_ZN12CO_PDO_Class15CO_TPDO_processEP9CO_TPDO_tP9CO_SYNC_thm+0x92>
            if(TPDO->inhibitTimer == 0 && (TPDO->sendRequest || (TPDO->TPDOCommPar->eventTimer && TPDO->eventTimer == 0))){
   1061a:	68bb      	ldr	r3, [r7, #8]
   1061c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1061e:	2b00      	cmp	r3, #0
   10620:	f040 8097 	bne.w	10752 <_ZN12CO_PDO_Class15CO_TPDO_processEP9CO_TPDO_tP9CO_SYNC_thm+0x166>
   10624:	68bb      	ldr	r3, [r7, #8]
   10626:	7fdb      	ldrb	r3, [r3, #31]
   10628:	2b00      	cmp	r3, #0
   1062a:	d10a      	bne.n	10642 <_ZN12CO_PDO_Class15CO_TPDO_processEP9CO_TPDO_tP9CO_SYNC_thm+0x56>
   1062c:	68bb      	ldr	r3, [r7, #8]
   1062e:	689b      	ldr	r3, [r3, #8]
   10630:	695b      	ldr	r3, [r3, #20]
   10632:	2b00      	cmp	r3, #0
   10634:	f000 808d 	beq.w	10752 <_ZN12CO_PDO_Class15CO_TPDO_processEP9CO_TPDO_tP9CO_SYNC_thm+0x166>
   10638:	68bb      	ldr	r3, [r7, #8]
   1063a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1063c:	2b00      	cmp	r3, #0
   1063e:	f040 8088 	bne.w	10752 <_ZN12CO_PDO_Class15CO_TPDO_processEP9CO_TPDO_tP9CO_SYNC_thm+0x166>
                if(CO_TPDOsend(TPDO) == CO_ERROR_NO){
   10642:	68b9      	ldr	r1, [r7, #8]
   10644:	68f8      	ldr	r0, [r7, #12]
   10646:	4b52      	ldr	r3, [pc, #328]	; (10790 <_ZN12CO_PDO_Class15CO_TPDO_processEP9CO_TPDO_tP9CO_SYNC_thm+0x1a4>)
   10648:	4798      	blx	r3
   1064a:	4603      	mov	r3, r0
   1064c:	2b00      	cmp	r3, #0
   1064e:	bf0c      	ite	eq
   10650:	2301      	moveq	r3, #1
   10652:	2300      	movne	r3, #0
   10654:	b2db      	uxtb	r3, r3
   10656:	2b00      	cmp	r3, #0
   10658:	d07b      	beq.n	10752 <_ZN12CO_PDO_Class15CO_TPDO_processEP9CO_TPDO_tP9CO_SYNC_thm+0x166>
                    /* successfully sent */
                    TPDO->inhibitTimer = ((uint32_t) TPDO->TPDOCommPar->inhibitTime) * 100;
   1065a:	68bb      	ldr	r3, [r7, #8]
   1065c:	689b      	ldr	r3, [r3, #8]
   1065e:	68db      	ldr	r3, [r3, #12]
   10660:	2264      	movs	r2, #100	; 0x64
   10662:	fb02 f203 	mul.w	r2, r2, r3
   10666:	68bb      	ldr	r3, [r7, #8]
   10668:	645a      	str	r2, [r3, #68]	; 0x44
                    TPDO->eventTimer = ((uint32_t) TPDO->TPDOCommPar->eventTimer) * 1000;
   1066a:	68bb      	ldr	r3, [r7, #8]
   1066c:	689b      	ldr	r3, [r3, #8]
   1066e:	695b      	ldr	r3, [r3, #20]
   10670:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   10674:	fb02 f203 	mul.w	r2, r2, r3
   10678:	68bb      	ldr	r3, [r7, #8]
   1067a:	649a      	str	r2, [r3, #72]	; 0x48
        if(TPDO->TPDOCommPar->transmissionType >= 253){
   1067c:	e069      	b.n	10752 <_ZN12CO_PDO_Class15CO_TPDO_processEP9CO_TPDO_tP9CO_SYNC_thm+0x166>
                }
            }
        }

        /* Synchronous PDOs */
        else if(SYNC && syncWas){
   1067e:	687b      	ldr	r3, [r7, #4]
   10680:	2b00      	cmp	r3, #0
   10682:	d066      	beq.n	10752 <_ZN12CO_PDO_Class15CO_TPDO_processEP9CO_TPDO_tP9CO_SYNC_thm+0x166>
   10684:	78fb      	ldrb	r3, [r7, #3]
   10686:	2b00      	cmp	r3, #0
   10688:	d063      	beq.n	10752 <_ZN12CO_PDO_Class15CO_TPDO_processEP9CO_TPDO_tP9CO_SYNC_thm+0x166>
            /* send synchronous acyclic PDO */
            if(TPDO->TPDOCommPar->transmissionType == 0){
   1068a:	68bb      	ldr	r3, [r7, #8]
   1068c:	689b      	ldr	r3, [r3, #8]
   1068e:	7a1b      	ldrb	r3, [r3, #8]
   10690:	2b00      	cmp	r3, #0
   10692:	d104      	bne.n	1069e <_ZN12CO_PDO_Class15CO_TPDO_processEP9CO_TPDO_tP9CO_SYNC_thm+0xb2>
				#ifdef MASTER
				 if(TPDO->sendRequest) CO_TPDOsend(TPDO);
				 #else
				  CO_TPDOsend(TPDO);
   10694:	68b9      	ldr	r1, [r7, #8]
   10696:	68f8      	ldr	r0, [r7, #12]
   10698:	4b3d      	ldr	r3, [pc, #244]	; (10790 <_ZN12CO_PDO_Class15CO_TPDO_processEP9CO_TPDO_tP9CO_SYNC_thm+0x1a4>)
   1069a:	4798      	blx	r3
        if(TPDO->TPDOCommPar->transmissionType >= 253){
   1069c:	e059      	b.n	10752 <_ZN12CO_PDO_Class15CO_TPDO_processEP9CO_TPDO_tP9CO_SYNC_thm+0x166>
			//	
            }
            /* send synchronous cyclic PDO */
            else{
                /* is the start of synchronous TPDO transmission */
                if(TPDO->syncCounter == 255){
   1069e:	68bb      	ldr	r3, [r7, #8]
   106a0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
   106a4:	2bff      	cmp	r3, #255	; 0xff
   106a6:	d113      	bne.n	106d0 <_ZN12CO_PDO_Class15CO_TPDO_processEP9CO_TPDO_tP9CO_SYNC_thm+0xe4>
                    if(SYNC->counterOverflowValue && TPDO->TPDOCommPar->SYNCStartValue)
   106a8:	687b      	ldr	r3, [r7, #4]
   106aa:	7e1b      	ldrb	r3, [r3, #24]
   106ac:	2b00      	cmp	r3, #0
   106ae:	d009      	beq.n	106c4 <_ZN12CO_PDO_Class15CO_TPDO_processEP9CO_TPDO_tP9CO_SYNC_thm+0xd8>
   106b0:	68bb      	ldr	r3, [r7, #8]
   106b2:	689b      	ldr	r3, [r3, #8]
   106b4:	7e1b      	ldrb	r3, [r3, #24]
   106b6:	2b00      	cmp	r3, #0
   106b8:	d004      	beq.n	106c4 <_ZN12CO_PDO_Class15CO_TPDO_processEP9CO_TPDO_tP9CO_SYNC_thm+0xd8>
                        TPDO->syncCounter = 254;   /* SYNCStartValue is in use */
   106ba:	68bb      	ldr	r3, [r7, #8]
   106bc:	22fe      	movs	r2, #254	; 0xfe
   106be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
   106c2:	e005      	b.n	106d0 <_ZN12CO_PDO_Class15CO_TPDO_processEP9CO_TPDO_tP9CO_SYNC_thm+0xe4>
                    else
                        TPDO->syncCounter = TPDO->TPDOCommPar->transmissionType;
   106c4:	68bb      	ldr	r3, [r7, #8]
   106c6:	689b      	ldr	r3, [r3, #8]
   106c8:	7a1a      	ldrb	r2, [r3, #8]
   106ca:	68bb      	ldr	r3, [r7, #8]
   106cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
                }
                /* if the SYNCStartValue is in use, start first TPDO after SYNC with matched SYNCStartValue. */
                if(TPDO->syncCounter == 254){
   106d0:	68bb      	ldr	r3, [r7, #8]
   106d2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
   106d6:	2bfe      	cmp	r3, #254	; 0xfe
   106d8:	d111      	bne.n	106fe <_ZN12CO_PDO_Class15CO_TPDO_processEP9CO_TPDO_tP9CO_SYNC_thm+0x112>
                    if(SYNC->counter == TPDO->TPDOCommPar->SYNCStartValue){
   106da:	687b      	ldr	r3, [r7, #4]
   106dc:	7f1a      	ldrb	r2, [r3, #28]
   106de:	68bb      	ldr	r3, [r7, #8]
   106e0:	689b      	ldr	r3, [r3, #8]
   106e2:	7e1b      	ldrb	r3, [r3, #24]
   106e4:	429a      	cmp	r2, r3
   106e6:	d134      	bne.n	10752 <_ZN12CO_PDO_Class15CO_TPDO_processEP9CO_TPDO_tP9CO_SYNC_thm+0x166>
                        TPDO->syncCounter = TPDO->TPDOCommPar->transmissionType;
   106e8:	68bb      	ldr	r3, [r7, #8]
   106ea:	689b      	ldr	r3, [r3, #8]
   106ec:	7a1a      	ldrb	r2, [r3, #8]
   106ee:	68bb      	ldr	r3, [r7, #8]
   106f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
                        CO_TPDOsend(TPDO);
   106f4:	68b9      	ldr	r1, [r7, #8]
   106f6:	68f8      	ldr	r0, [r7, #12]
   106f8:	4b25      	ldr	r3, [pc, #148]	; (10790 <_ZN12CO_PDO_Class15CO_TPDO_processEP9CO_TPDO_tP9CO_SYNC_thm+0x1a4>)
   106fa:	4798      	blx	r3
        if(TPDO->TPDOCommPar->transmissionType >= 253){
   106fc:	e029      	b.n	10752 <_ZN12CO_PDO_Class15CO_TPDO_processEP9CO_TPDO_tP9CO_SYNC_thm+0x166>
                    }
                }
                /* Send PDO after every N-th Sync */
                else if(--TPDO->syncCounter == 0){
   106fe:	68bb      	ldr	r3, [r7, #8]
   10700:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
   10704:	3b01      	subs	r3, #1
   10706:	b2da      	uxtb	r2, r3
   10708:	68bb      	ldr	r3, [r7, #8]
   1070a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
   1070e:	68bb      	ldr	r3, [r7, #8]
   10710:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
   10714:	2b00      	cmp	r3, #0
   10716:	bf0c      	ite	eq
   10718:	2301      	moveq	r3, #1
   1071a:	2300      	movne	r3, #0
   1071c:	b2db      	uxtb	r3, r3
   1071e:	2b00      	cmp	r3, #0
   10720:	d017      	beq.n	10752 <_ZN12CO_PDO_Class15CO_TPDO_processEP9CO_TPDO_tP9CO_SYNC_thm+0x166>
                    TPDO->syncCounter = TPDO->TPDOCommPar->transmissionType;
   10722:	68bb      	ldr	r3, [r7, #8]
   10724:	689b      	ldr	r3, [r3, #8]
   10726:	7a1a      	ldrb	r2, [r3, #8]
   10728:	68bb      	ldr	r3, [r7, #8]
   1072a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
                    CO_TPDOsend(TPDO);
   1072e:	68b9      	ldr	r1, [r7, #8]
   10730:	68f8      	ldr	r0, [r7, #12]
   10732:	4b17      	ldr	r3, [pc, #92]	; (10790 <_ZN12CO_PDO_Class15CO_TPDO_processEP9CO_TPDO_tP9CO_SYNC_thm+0x1a4>)
   10734:	4798      	blx	r3
        if(TPDO->TPDOCommPar->transmissionType >= 253){
   10736:	e00c      	b.n	10752 <_ZN12CO_PDO_Class15CO_TPDO_processEP9CO_TPDO_tP9CO_SYNC_thm+0x166>
        }

    }
    else{
        /* Not operational or valid. Force TPDO first send after operational or valid. */
        if(TPDO->TPDOCommPar->transmissionType>=254) TPDO->sendRequest = 1;
   10738:	68bb      	ldr	r3, [r7, #8]
   1073a:	689b      	ldr	r3, [r3, #8]
   1073c:	7a1b      	ldrb	r3, [r3, #8]
   1073e:	2bfd      	cmp	r3, #253	; 0xfd
   10740:	dd03      	ble.n	1074a <_ZN12CO_PDO_Class15CO_TPDO_processEP9CO_TPDO_tP9CO_SYNC_thm+0x15e>
   10742:	68bb      	ldr	r3, [r7, #8]
   10744:	2201      	movs	r2, #1
   10746:	77da      	strb	r2, [r3, #31]
   10748:	e004      	b.n	10754 <_ZN12CO_PDO_Class15CO_TPDO_processEP9CO_TPDO_tP9CO_SYNC_thm+0x168>
        else                                         TPDO->sendRequest = 0;
   1074a:	68bb      	ldr	r3, [r7, #8]
   1074c:	2200      	movs	r2, #0
   1074e:	77da      	strb	r2, [r3, #31]
   10750:	e000      	b.n	10754 <_ZN12CO_PDO_Class15CO_TPDO_processEP9CO_TPDO_tP9CO_SYNC_thm+0x168>
        if(TPDO->TPDOCommPar->transmissionType >= 253){
   10752:	bf00      	nop
    }

    /* update timers */
    TPDO->inhibitTimer = (TPDO->inhibitTimer > timeDifference_us) ? (TPDO->inhibitTimer - timeDifference_us) : 0;
   10754:	68bb      	ldr	r3, [r7, #8]
   10756:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   10758:	69bb      	ldr	r3, [r7, #24]
   1075a:	429a      	cmp	r2, r3
   1075c:	d904      	bls.n	10768 <_ZN12CO_PDO_Class15CO_TPDO_processEP9CO_TPDO_tP9CO_SYNC_thm+0x17c>
   1075e:	68bb      	ldr	r3, [r7, #8]
   10760:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   10762:	69bb      	ldr	r3, [r7, #24]
   10764:	1ad3      	subs	r3, r2, r3
   10766:	e000      	b.n	1076a <_ZN12CO_PDO_Class15CO_TPDO_processEP9CO_TPDO_tP9CO_SYNC_thm+0x17e>
   10768:	2300      	movs	r3, #0
   1076a:	68ba      	ldr	r2, [r7, #8]
   1076c:	6453      	str	r3, [r2, #68]	; 0x44
    TPDO->eventTimer = (TPDO->eventTimer > timeDifference_us) ? (TPDO->eventTimer - timeDifference_us) : 0;
   1076e:	68bb      	ldr	r3, [r7, #8]
   10770:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   10772:	69bb      	ldr	r3, [r7, #24]
   10774:	429a      	cmp	r2, r3
   10776:	d904      	bls.n	10782 <_ZN12CO_PDO_Class15CO_TPDO_processEP9CO_TPDO_tP9CO_SYNC_thm+0x196>
   10778:	68bb      	ldr	r3, [r7, #8]
   1077a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   1077c:	69bb      	ldr	r3, [r7, #24]
   1077e:	1ad3      	subs	r3, r2, r3
   10780:	e000      	b.n	10784 <_ZN12CO_PDO_Class15CO_TPDO_processEP9CO_TPDO_tP9CO_SYNC_thm+0x198>
   10782:	2300      	movs	r3, #0
   10784:	68ba      	ldr	r2, [r7, #8]
   10786:	6493      	str	r3, [r2, #72]	; 0x48
}
   10788:	bf00      	nop
   1078a:	3710      	adds	r7, #16
   1078c:	46bd      	mov	sp, r7
   1078e:	bd80      	pop	{r7, pc}
   10790:	000104b5 	.word	0x000104b5

00010794 <_ZN12CO_SDO_ClassC1Ev>:

CO_SDO_Class	*ptrCOSDOClass;
CO_SDO_t *SDO;

// default constructor
CO_SDO_Class::CO_SDO_Class()
   10794:	b580      	push	{r7, lr}
   10796:	b082      	sub	sp, #8
   10798:	af00      	add	r7, sp, #0
   1079a:	6078      	str	r0, [r7, #4]
   1079c:	6878      	ldr	r0, [r7, #4]
   1079e:	4b05      	ldr	r3, [pc, #20]	; (107b4 <_ZN12CO_SDO_ClassC1Ev+0x20>)
   107a0:	4798      	blx	r3
{
	ptrCOSDOClass=this;
   107a2:	4a05      	ldr	r2, [pc, #20]	; (107b8 <_ZN12CO_SDO_ClassC1Ev+0x24>)
   107a4:	687b      	ldr	r3, [r7, #4]
   107a6:	6013      	str	r3, [r2, #0]
} //CO_SDO_Class
   107a8:	687b      	ldr	r3, [r7, #4]
   107aa:	4618      	mov	r0, r3
   107ac:	3708      	adds	r7, #8
   107ae:	46bd      	mov	sp, r7
   107b0:	bd80      	pop	{r7, pc}
   107b2:	bf00      	nop
   107b4:	00012e15 	.word	0x00012e15
   107b8:	20001af8 	.word	0x20001af8

000107bc <_ZN12CO_SDO_ClassD1Ev>:

// default destructor
CO_SDO_Class::~CO_SDO_Class()
   107bc:	b580      	push	{r7, lr}
   107be:	b082      	sub	sp, #8
   107c0:	af00      	add	r7, sp, #0
   107c2:	6078      	str	r0, [r7, #4]
   107c4:	6878      	ldr	r0, [r7, #4]
   107c6:	4b03      	ldr	r3, [pc, #12]	; (107d4 <_ZN12CO_SDO_ClassD1Ev+0x18>)
   107c8:	4798      	blx	r3
{
} //~CO_SDO_Class
   107ca:	687b      	ldr	r3, [r7, #4]
   107cc:	4618      	mov	r0, r3
   107ce:	3708      	adds	r7, #8
   107d0:	46bd      	mov	sp, r7
   107d2:	bd80      	pop	{r7, pc}
   107d4:	00012e29 	.word	0x00012e29

000107d8 <_ZN12CO_SDO_Class9CO_memcpyEPhPKhm>:

void CO_SDO_Class::CO_memcpy(uint8_t dest[], const uint8_t src[], const uint32_t size){
   107d8:	b480      	push	{r7}
   107da:	b087      	sub	sp, #28
   107dc:	af00      	add	r7, sp, #0
   107de:	60f8      	str	r0, [r7, #12]
   107e0:	60b9      	str	r1, [r7, #8]
   107e2:	607a      	str	r2, [r7, #4]
   107e4:	603b      	str	r3, [r7, #0]
    uint32_t i;
    for(i = 0; i < size; i++){
   107e6:	2300      	movs	r3, #0
   107e8:	617b      	str	r3, [r7, #20]
   107ea:	697a      	ldr	r2, [r7, #20]
   107ec:	683b      	ldr	r3, [r7, #0]
   107ee:	429a      	cmp	r2, r3
   107f0:	d20b      	bcs.n	1080a <_ZN12CO_SDO_Class9CO_memcpyEPhPKhm+0x32>
        dest[i] = src[i];
   107f2:	68ba      	ldr	r2, [r7, #8]
   107f4:	697b      	ldr	r3, [r7, #20]
   107f6:	4413      	add	r3, r2
   107f8:	6879      	ldr	r1, [r7, #4]
   107fa:	697a      	ldr	r2, [r7, #20]
   107fc:	440a      	add	r2, r1
   107fe:	7812      	ldrb	r2, [r2, #0]
   10800:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < size; i++){
   10802:	697b      	ldr	r3, [r7, #20]
   10804:	3301      	adds	r3, #1
   10806:	617b      	str	r3, [r7, #20]
   10808:	e7ef      	b.n	107ea <_ZN12CO_SDO_Class9CO_memcpyEPhPKhm+0x12>
    }
}
   1080a:	bf00      	nop
   1080c:	371c      	adds	r7, #28
   1080e:	46bd      	mov	sp, r7
   10810:	bc80      	pop	{r7}
   10812:	4770      	bx	lr

00010814 <_ZN12CO_SDO_Class12CO_getUint32EPKh>:
    b.u8[0] = data[0];
    b.u8[1] = data[1];
    return b.u16[0];
}

uint32_t CO_SDO_Class::CO_getUint32(const uint8_t data[]){
   10814:	b480      	push	{r7}
   10816:	b087      	sub	sp, #28
   10818:	af00      	add	r7, sp, #0
   1081a:	6078      	str	r0, [r7, #4]
   1081c:	6039      	str	r1, [r7, #0]
    CO_bytes_t b;
    b.u8[0] = data[0];
   1081e:	683b      	ldr	r3, [r7, #0]
   10820:	781b      	ldrb	r3, [r3, #0]
   10822:	723b      	strb	r3, [r7, #8]
    b.u8[1] = data[1];
   10824:	683b      	ldr	r3, [r7, #0]
   10826:	3301      	adds	r3, #1
   10828:	781b      	ldrb	r3, [r3, #0]
   1082a:	727b      	strb	r3, [r7, #9]
    b.u8[2] = data[2];
   1082c:	683b      	ldr	r3, [r7, #0]
   1082e:	3302      	adds	r3, #2
   10830:	781b      	ldrb	r3, [r3, #0]
   10832:	72bb      	strb	r3, [r7, #10]
    b.u8[3] = data[3];
   10834:	683b      	ldr	r3, [r7, #0]
   10836:	3303      	adds	r3, #3
   10838:	781b      	ldrb	r3, [r3, #0]
   1083a:	72fb      	strb	r3, [r7, #11]
    return b.u32[0];
   1083c:	68bb      	ldr	r3, [r7, #8]
}
   1083e:	4618      	mov	r0, r3
   10840:	371c      	adds	r7, #28
   10842:	46bd      	mov	sp, r7
   10844:	bc80      	pop	{r7}
   10846:	4770      	bx	lr

00010848 <_ZN12CO_SDO_Class12CO_setUint32EPhm>:
    b.u16[0] = value;
    data[0] = b.u8[0];
    data[1] = b.u8[1];
}

void CO_SDO_Class::CO_setUint32(uint8_t data[], const uint32_t value){
   10848:	b480      	push	{r7}
   1084a:	b089      	sub	sp, #36	; 0x24
   1084c:	af00      	add	r7, sp, #0
   1084e:	60f8      	str	r0, [r7, #12]
   10850:	60b9      	str	r1, [r7, #8]
   10852:	607a      	str	r2, [r7, #4]
    CO_bytes_t b;
    b.u32[0] = value;
   10854:	687b      	ldr	r3, [r7, #4]
   10856:	613b      	str	r3, [r7, #16]
    data[0] = b.u8[0];
   10858:	7c3a      	ldrb	r2, [r7, #16]
   1085a:	68bb      	ldr	r3, [r7, #8]
   1085c:	701a      	strb	r2, [r3, #0]
    data[1] = b.u8[1];
   1085e:	68bb      	ldr	r3, [r7, #8]
   10860:	3301      	adds	r3, #1
   10862:	7c7a      	ldrb	r2, [r7, #17]
   10864:	701a      	strb	r2, [r3, #0]
    data[2] = b.u8[2];
   10866:	68bb      	ldr	r3, [r7, #8]
   10868:	3302      	adds	r3, #2
   1086a:	7cba      	ldrb	r2, [r7, #18]
   1086c:	701a      	strb	r2, [r3, #0]
    data[3] = b.u8[3];
   1086e:	68bb      	ldr	r3, [r7, #8]
   10870:	3303      	adds	r3, #3
   10872:	7cfa      	ldrb	r2, [r7, #19]
   10874:	701a      	strb	r2, [r3, #0]
}
   10876:	bf00      	nop
   10878:	3724      	adds	r7, #36	; 0x24
   1087a:	46bd      	mov	sp, r7
   1087c:	bc80      	pop	{r7}
   1087e:	4770      	bx	lr

00010880 <_ZN12CO_SDO_Class14CO_memcpySwap2EPvPKv>:

#ifdef CO_LITTLE_ENDIAN
void CO_SDO_Class::CO_memcpySwap2(void* dest, const void* src){
   10880:	b480      	push	{r7}
   10882:	b087      	sub	sp, #28
   10884:	af00      	add	r7, sp, #0
   10886:	60f8      	str	r0, [r7, #12]
   10888:	60b9      	str	r1, [r7, #8]
   1088a:	607a      	str	r2, [r7, #4]
    char *cdest;
    char *csrc;
    cdest = (char *) dest;
   1088c:	68bb      	ldr	r3, [r7, #8]
   1088e:	617b      	str	r3, [r7, #20]
    csrc = (char *) src;
   10890:	687b      	ldr	r3, [r7, #4]
   10892:	613b      	str	r3, [r7, #16]
    cdest[0] = csrc[0];
   10894:	693b      	ldr	r3, [r7, #16]
   10896:	781a      	ldrb	r2, [r3, #0]
   10898:	697b      	ldr	r3, [r7, #20]
   1089a:	701a      	strb	r2, [r3, #0]
    cdest[1] = csrc[1];
   1089c:	697b      	ldr	r3, [r7, #20]
   1089e:	3301      	adds	r3, #1
   108a0:	693a      	ldr	r2, [r7, #16]
   108a2:	7852      	ldrb	r2, [r2, #1]
   108a4:	701a      	strb	r2, [r3, #0]
}
   108a6:	bf00      	nop
   108a8:	371c      	adds	r7, #28
   108aa:	46bd      	mov	sp, r7
   108ac:	bc80      	pop	{r7}
   108ae:	4770      	bx	lr

000108b0 <_ZN12CO_SDO_Class14CO_memcpySwap4EPvPKv>:
void CO_SDO_Class::CO_memcpySwap4(void* dest, const void* src){
   108b0:	b480      	push	{r7}
   108b2:	b087      	sub	sp, #28
   108b4:	af00      	add	r7, sp, #0
   108b6:	60f8      	str	r0, [r7, #12]
   108b8:	60b9      	str	r1, [r7, #8]
   108ba:	607a      	str	r2, [r7, #4]
    char *cdest;
    char *csrc;
    cdest = (char *) dest;
   108bc:	68bb      	ldr	r3, [r7, #8]
   108be:	617b      	str	r3, [r7, #20]
    csrc = (char *) src;
   108c0:	687b      	ldr	r3, [r7, #4]
   108c2:	613b      	str	r3, [r7, #16]
    cdest[0] = csrc[0];
   108c4:	693b      	ldr	r3, [r7, #16]
   108c6:	781a      	ldrb	r2, [r3, #0]
   108c8:	697b      	ldr	r3, [r7, #20]
   108ca:	701a      	strb	r2, [r3, #0]
    cdest[1] = csrc[1];
   108cc:	697b      	ldr	r3, [r7, #20]
   108ce:	3301      	adds	r3, #1
   108d0:	693a      	ldr	r2, [r7, #16]
   108d2:	7852      	ldrb	r2, [r2, #1]
   108d4:	701a      	strb	r2, [r3, #0]
    cdest[2] = csrc[2];
   108d6:	697b      	ldr	r3, [r7, #20]
   108d8:	3302      	adds	r3, #2
   108da:	693a      	ldr	r2, [r7, #16]
   108dc:	7892      	ldrb	r2, [r2, #2]
   108de:	701a      	strb	r2, [r3, #0]
    cdest[3] = csrc[3];
   108e0:	697b      	ldr	r3, [r7, #20]
   108e2:	3303      	adds	r3, #3
   108e4:	693a      	ldr	r2, [r7, #16]
   108e6:	78d2      	ldrb	r2, [r2, #3]
   108e8:	701a      	strb	r2, [r3, #0]
}
   108ea:	bf00      	nop
   108ec:	371c      	adds	r7, #28
   108ee:	46bd      	mov	sp, r7
   108f0:	bc80      	pop	{r7}
   108f2:	4770      	bx	lr

000108f4 <_ZL14CO_SDO_receivePvPK13CO_CANrxMsg_t>:
 * Function will be called (by CAN receive interrupt) every time, when CAN
 * message with correct identifier will be received. For more information and
 * description of parameters see file CO_driver.h.
 */

static void CO_SDO_receive(void *object, const CO_CANrxMsg_t *msg){
   108f4:	b580      	push	{r7, lr}
   108f6:	b086      	sub	sp, #24
   108f8:	af00      	add	r7, sp, #0
   108fa:	6078      	str	r0, [r7, #4]
   108fc:	6039      	str	r1, [r7, #0]
    CO_SDO_t *SDO;
	
    SDO = (CO_SDO_t*)object;   /* this is the correct pointer type of the first argument */
   108fe:	687b      	ldr	r3, [r7, #4]
   10900:	613b      	str	r3, [r7, #16]
     * starting another SDO request, this request is dropped. Especially if
     * processing function has slow response.
     * See: https://github.com/CANopenNode/CANopenNode/issues/39 */

    /* verify message length and message overflow (previous message was not processed yet) */
    if((msg->DLC == 8U) && (!SDO->CANrxNew)){
   10902:	683b      	ldr	r3, [r7, #0]
   10904:	7d1b      	ldrb	r3, [r3, #20]
   10906:	2b08      	cmp	r3, #8
   10908:	f040 80a4 	bne.w	10a54 <_ZL14CO_SDO_receivePvPK13CO_CANrxMsg_t+0x160>
   1090c:	693b      	ldr	r3, [r7, #16]
   1090e:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
   10912:	2b00      	cmp	r3, #0
   10914:	f040 809e 	bne.w	10a54 <_ZL14CO_SDO_receivePvPK13CO_CANrxMsg_t+0x160>
        if(SDO->state != CO_SDO_ST_DOWNLOAD_BL_SUBBLOCK) {
   10918:	693b      	ldr	r3, [r7, #16]
   1091a:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
   1091e:	2b15      	cmp	r3, #21
   10920:	d024      	beq.n	1096c <_ZL14CO_SDO_receivePvPK13CO_CANrxMsg_t+0x78>
            /* copy data and set 'new message' flag */
            SDO->CANrxData[0] = msg->data[0];
   10922:	683b      	ldr	r3, [r7, #0]
   10924:	7d5a      	ldrb	r2, [r3, #21]
   10926:	693b      	ldr	r3, [r7, #16]
   10928:	701a      	strb	r2, [r3, #0]
            SDO->CANrxData[1] = msg->data[1];
   1092a:	683b      	ldr	r3, [r7, #0]
   1092c:	7d9a      	ldrb	r2, [r3, #22]
   1092e:	693b      	ldr	r3, [r7, #16]
   10930:	705a      	strb	r2, [r3, #1]
            SDO->CANrxData[2] = msg->data[2];
   10932:	683b      	ldr	r3, [r7, #0]
   10934:	7dda      	ldrb	r2, [r3, #23]
   10936:	693b      	ldr	r3, [r7, #16]
   10938:	709a      	strb	r2, [r3, #2]
            SDO->CANrxData[3] = msg->data[3];
   1093a:	683b      	ldr	r3, [r7, #0]
   1093c:	7e1a      	ldrb	r2, [r3, #24]
   1093e:	693b      	ldr	r3, [r7, #16]
   10940:	70da      	strb	r2, [r3, #3]
            SDO->CANrxData[4] = msg->data[4];
   10942:	683b      	ldr	r3, [r7, #0]
   10944:	7e5a      	ldrb	r2, [r3, #25]
   10946:	693b      	ldr	r3, [r7, #16]
   10948:	711a      	strb	r2, [r3, #4]
            SDO->CANrxData[5] = msg->data[5];
   1094a:	683b      	ldr	r3, [r7, #0]
   1094c:	7e9a      	ldrb	r2, [r3, #26]
   1094e:	693b      	ldr	r3, [r7, #16]
   10950:	715a      	strb	r2, [r3, #5]
            SDO->CANrxData[6] = msg->data[6];
   10952:	683b      	ldr	r3, [r7, #0]
   10954:	7eda      	ldrb	r2, [r3, #27]
   10956:	693b      	ldr	r3, [r7, #16]
   10958:	719a      	strb	r2, [r3, #6]
            SDO->CANrxData[7] = msg->data[7];
   1095a:	683b      	ldr	r3, [r7, #0]
   1095c:	7f1a      	ldrb	r2, [r3, #28]
   1095e:	693b      	ldr	r3, [r7, #16]
   10960:	71da      	strb	r2, [r3, #7]

            SDO->CANrxNew = true;
   10962:	693b      	ldr	r3, [r7, #16]
   10964:	2201      	movs	r2, #1
   10966:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
   1096a:	e067      	b.n	10a3c <_ZL14CO_SDO_receivePvPK13CO_CANrxMsg_t+0x148>
        }
        else {
            /* block download, copy data directly */
            uint8_t seqno;

            SDO->CANrxData[0] = msg->data[0];
   1096c:	683b      	ldr	r3, [r7, #0]
   1096e:	7d5a      	ldrb	r2, [r3, #21]
   10970:	693b      	ldr	r3, [r7, #16]
   10972:	701a      	strb	r2, [r3, #0]
            seqno = SDO->CANrxData[0] & 0x7fU;
   10974:	693b      	ldr	r3, [r7, #16]
   10976:	781b      	ldrb	r3, [r3, #0]
   10978:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1097c:	73fb      	strb	r3, [r7, #15]
            SDO->timeoutTimer = 0;
   1097e:	693b      	ldr	r3, [r7, #16]
   10980:	2200      	movs	r2, #0
   10982:	66da      	str	r2, [r3, #108]	; 0x6c

            /* check correct sequence number. */
            if(seqno == (SDO->sequence + 1U)) {
   10984:	7bfa      	ldrb	r2, [r7, #15]
   10986:	693b      	ldr	r3, [r7, #16]
   10988:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
   1098c:	3301      	adds	r3, #1
   1098e:	429a      	cmp	r2, r3
   10990:	d141      	bne.n	10a16 <_ZL14CO_SDO_receivePvPK13CO_CANrxMsg_t+0x122>
                /* sequence is correct */
                uint8_t i;

                SDO->sequence++;
   10992:	693b      	ldr	r3, [r7, #16]
   10994:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
   10998:	3301      	adds	r3, #1
   1099a:	b2da      	uxtb	r2, r3
   1099c:	693b      	ldr	r3, [r7, #16]
   1099e:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

                /* copy data */
                for(i=1; i<8; i++) {
   109a2:	2301      	movs	r3, #1
   109a4:	75fb      	strb	r3, [r7, #23]
   109a6:	7dfb      	ldrb	r3, [r7, #23]
   109a8:	2b07      	cmp	r3, #7
   109aa:	dc1d      	bgt.n	109e8 <_ZL14CO_SDO_receivePvPK13CO_CANrxMsg_t+0xf4>
                    SDO->ODF_arg.data[SDO->bufferOffset++] = msg->data[i]; //SDO->ODF_arg.data is equal as SDO->databuffer
   109ac:	693b      	ldr	r3, [r7, #16]
   109ae:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   109b0:	693b      	ldr	r3, [r7, #16]
   109b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   109b4:	1c58      	adds	r0, r3, #1
   109b6:	6939      	ldr	r1, [r7, #16]
   109b8:	6388      	str	r0, [r1, #56]	; 0x38
   109ba:	4413      	add	r3, r2
   109bc:	7dfa      	ldrb	r2, [r7, #23]
   109be:	6839      	ldr	r1, [r7, #0]
   109c0:	440a      	add	r2, r1
   109c2:	7d52      	ldrb	r2, [r2, #21]
   109c4:	701a      	strb	r2, [r3, #0]
                    if(SDO->bufferOffset >= CO_SDO_BUFFER_SIZE) {
   109c6:	693b      	ldr	r3, [r7, #16]
   109c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   109ca:	2b1f      	cmp	r3, #31
   109cc:	d908      	bls.n	109e0 <_ZL14CO_SDO_receivePvPK13CO_CANrxMsg_t+0xec>
                        /* buffer full, break reception */
                        SDO->state = CO_SDO_ST_DOWNLOAD_BL_SUB_RESP;
   109ce:	693b      	ldr	r3, [r7, #16]
   109d0:	2216      	movs	r2, #22
   109d2:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
                        SDO->CANrxNew = true;
   109d6:	693b      	ldr	r3, [r7, #16]
   109d8:	2201      	movs	r2, #1
   109da:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
                        break;
   109de:	e003      	b.n	109e8 <_ZL14CO_SDO_receivePvPK13CO_CANrxMsg_t+0xf4>
                for(i=1; i<8; i++) {
   109e0:	7dfb      	ldrb	r3, [r7, #23]
   109e2:	3301      	adds	r3, #1
   109e4:	75fb      	strb	r3, [r7, #23]
   109e6:	e7de      	b.n	109a6 <_ZL14CO_SDO_receivePvPK13CO_CANrxMsg_t+0xb2>
                    }
                }

                /* break reception if last segment or block sequence is too large */
                if(((SDO->CANrxData[0] & 0x80U) == 0x80U) || (SDO->sequence >= SDO->blksize)) {
   109e8:	693b      	ldr	r3, [r7, #16]
   109ea:	781b      	ldrb	r3, [r3, #0]
   109ec:	b25b      	sxtb	r3, r3
   109ee:	2b00      	cmp	r3, #0
   109f0:	db08      	blt.n	10a04 <_ZL14CO_SDO_receivePvPK13CO_CANrxMsg_t+0x110>
   109f2:	693b      	ldr	r3, [r7, #16]
   109f4:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
   109f8:	461a      	mov	r2, r3
   109fa:	693b      	ldr	r3, [r7, #16]
   109fc:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
   10a00:	429a      	cmp	r2, r3
   10a02:	db1b      	blt.n	10a3c <_ZL14CO_SDO_receivePvPK13CO_CANrxMsg_t+0x148>
                    SDO->state = CO_SDO_ST_DOWNLOAD_BL_SUB_RESP;
   10a04:	693b      	ldr	r3, [r7, #16]
   10a06:	2216      	movs	r2, #22
   10a08:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
                    SDO->CANrxNew = true;
   10a0c:	693b      	ldr	r3, [r7, #16]
   10a0e:	2201      	movs	r2, #1
   10a10:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
   10a14:	e012      	b.n	10a3c <_ZL14CO_SDO_receivePvPK13CO_CANrxMsg_t+0x148>
                }
            }
            else if((seqno == SDO->sequence) || (SDO->sequence == 0U)){
   10a16:	693b      	ldr	r3, [r7, #16]
   10a18:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
   10a1c:	7bfa      	ldrb	r2, [r7, #15]
   10a1e:	429a      	cmp	r2, r3
   10a20:	d00c      	beq.n	10a3c <_ZL14CO_SDO_receivePvPK13CO_CANrxMsg_t+0x148>
   10a22:	693b      	ldr	r3, [r7, #16]
   10a24:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
   10a28:	2b00      	cmp	r3, #0
   10a2a:	d007      	beq.n	10a3c <_ZL14CO_SDO_receivePvPK13CO_CANrxMsg_t+0x148>
                /* Ignore message, if it is duplicate or if sequence didn't started yet. */
            }
            else {
                /* seqno is totally wrong, break reception. */
                SDO->state = CO_SDO_ST_DOWNLOAD_BL_SUB_RESP;
   10a2c:	693b      	ldr	r3, [r7, #16]
   10a2e:	2216      	movs	r2, #22
   10a30:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
                SDO->CANrxNew = true;
   10a34:	693b      	ldr	r3, [r7, #16]
   10a36:	2201      	movs	r2, #1
   10a38:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
            }
        }

        /* Optional signal to RTOS, which can resume task, which handles SDO server. */
        if(SDO->CANrxNew && SDO->ptrFunctSignal != NULL) {
   10a3c:	693b      	ldr	r3, [r7, #16]
   10a3e:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
   10a42:	2b00      	cmp	r3, #0
   10a44:	d006      	beq.n	10a54 <_ZL14CO_SDO_receivePvPK13CO_CANrxMsg_t+0x160>
   10a46:	693b      	ldr	r3, [r7, #16]
   10a48:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   10a4a:	2b00      	cmp	r3, #0
   10a4c:	d002      	beq.n	10a54 <_ZL14CO_SDO_receivePvPK13CO_CANrxMsg_t+0x160>
            SDO->ptrFunctSignal();
   10a4e:	693b      	ldr	r3, [r7, #16]
   10a50:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   10a52:	4798      	blx	r3
        }
    }
}
   10a54:	bf00      	nop
   10a56:	3718      	adds	r7, #24
   10a58:	46bd      	mov	sp, r7
   10a5a:	bd80      	pop	{r7, pc}

00010a5c <_ZL11CO_ODF_1200P12CO_ODF_arg_t>:
 * Function for accessing _SDO server parameter_ for default SDO (index 0x1200)
 * from SDO server.
 *
 * For more information see file CO_SDO.h.
 */
 static CO_SDO_abortCode_t  CO_ODF_1200(CO_ODF_arg_t *ODF_arg){
   10a5c:	b580      	push	{r7, lr}
   10a5e:	b086      	sub	sp, #24
   10a60:	af00      	add	r7, sp, #0
   10a62:	6078      	str	r0, [r7, #4]
    uint8_t *nodeId;
    uint32_t value;
    CO_SDO_abortCode_t ret = CO_SDO_AB_NONE;
   10a64:	2300      	movs	r3, #0
   10a66:	617b      	str	r3, [r7, #20]

    nodeId = (uint8_t*) ODF_arg->object;
   10a68:	687b      	ldr	r3, [r7, #4]
   10a6a:	681b      	ldr	r3, [r3, #0]
   10a6c:	613b      	str	r3, [r7, #16]
    value = canopen_driver->CO_getUint32(ODF_arg->data);
   10a6e:	4b12      	ldr	r3, [pc, #72]	; (10ab8 <_ZL11CO_ODF_1200P12CO_ODF_arg_t+0x5c>)
   10a70:	681b      	ldr	r3, [r3, #0]
   10a72:	1d1a      	adds	r2, r3, #4
   10a74:	687b      	ldr	r3, [r7, #4]
   10a76:	685b      	ldr	r3, [r3, #4]
   10a78:	4619      	mov	r1, r3
   10a7a:	4610      	mov	r0, r2
   10a7c:	4b0f      	ldr	r3, [pc, #60]	; (10abc <_ZL11CO_ODF_1200P12CO_ODF_arg_t+0x60>)
   10a7e:	4798      	blx	r3
   10a80:	60f8      	str	r0, [r7, #12]

    /* if SDO reading Object dictionary 0x1200, add nodeId to the value */
    if((ODF_arg->reading) && (ODF_arg->subIndex > 0U)){
   10a82:	687b      	ldr	r3, [r7, #4]
   10a84:	7f5b      	ldrb	r3, [r3, #29]
   10a86:	2b00      	cmp	r3, #0
   10a88:	d010      	beq.n	10aac <_ZL11CO_ODF_1200P12CO_ODF_arg_t+0x50>
   10a8a:	687b      	ldr	r3, [r7, #4]
   10a8c:	7f1b      	ldrb	r3, [r3, #28]
   10a8e:	2b00      	cmp	r3, #0
   10a90:	d00c      	beq.n	10aac <_ZL11CO_ODF_1200P12CO_ODF_arg_t+0x50>
        canopen_driver->CO_setUint32(ODF_arg->data, value + *nodeId);
   10a92:	4b09      	ldr	r3, [pc, #36]	; (10ab8 <_ZL11CO_ODF_1200P12CO_ODF_arg_t+0x5c>)
   10a94:	681b      	ldr	r3, [r3, #0]
   10a96:	1d18      	adds	r0, r3, #4
   10a98:	687b      	ldr	r3, [r7, #4]
   10a9a:	6859      	ldr	r1, [r3, #4]
   10a9c:	693b      	ldr	r3, [r7, #16]
   10a9e:	781b      	ldrb	r3, [r3, #0]
   10aa0:	461a      	mov	r2, r3
   10aa2:	68fb      	ldr	r3, [r7, #12]
   10aa4:	4413      	add	r3, r2
   10aa6:	461a      	mov	r2, r3
   10aa8:	4b05      	ldr	r3, [pc, #20]	; (10ac0 <_ZL11CO_ODF_1200P12CO_ODF_arg_t+0x64>)
   10aaa:	4798      	blx	r3
    }

    return ret;
   10aac:	697b      	ldr	r3, [r7, #20]
}
   10aae:	4618      	mov	r0, r3
   10ab0:	3718      	adds	r7, #24
   10ab2:	46bd      	mov	sp, r7
   10ab4:	bd80      	pop	{r7, pc}
   10ab6:	bf00      	nop
   10ab8:	20001abc 	.word	0x20001abc
   10abc:	00010815 	.word	0x00010815
   10ac0:	00010849 	.word	0x00010849

00010ac4 <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m>:
        uint8_t                 nodeId,
        CO_CANmodule_t         *CANdevRx,
        uint32_t                CANdevRxIdx,
        CO_CANmodule_t         *CANdevTx,
        uint32_t                CANdevTxIdx)
{
   10ac4:	b5b0      	push	{r4, r5, r7, lr}
   10ac6:	b08a      	sub	sp, #40	; 0x28
   10ac8:	af04      	add	r7, sp, #16
   10aca:	60f8      	str	r0, [r7, #12]
   10acc:	60b9      	str	r1, [r7, #8]
   10ace:	607a      	str	r2, [r7, #4]
   10ad0:	603b      	str	r3, [r7, #0]
    /* verify arguments */
    if(SDO_init==NULL || CANdevRx==NULL || CANdevTx==NULL){
   10ad2:	68bb      	ldr	r3, [r7, #8]
   10ad4:	2b00      	cmp	r3, #0
   10ad6:	d005      	beq.n	10ae4 <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x20>
   10ad8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   10ada:	2b00      	cmp	r3, #0
   10adc:	d002      	beq.n	10ae4 <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x20>
   10ade:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   10ae0:	2b00      	cmp	r3, #0
   10ae2:	d102      	bne.n	10aea <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x26>
        return CO_ERROR_ILLEGAL_ARGUMENT;
   10ae4:	f04f 33ff 	mov.w	r3, #4294967295
   10ae8:	e0ac      	b.n	10c44 <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x180>
    }else{
		SDO=SDO_init;
   10aea:	4a58      	ldr	r2, [pc, #352]	; (10c4c <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x188>)
   10aec:	68bb      	ldr	r3, [r7, #8]
   10aee:	6013      	str	r3, [r2, #0]
	}
	
    /* configure own object dictionary */
    if(parentSDO == NULL){
   10af0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   10af2:	2b00      	cmp	r3, #0
   10af4:	d13b      	bne.n	10b6e <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0xaa>
        uint32_t i;

        SDO->ownOD = true;
   10af6:	4b55      	ldr	r3, [pc, #340]	; (10c4c <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x188>)
   10af8:	681b      	ldr	r3, [r3, #0]
   10afa:	2201      	movs	r2, #1
   10afc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        SDO->OD = OD;
   10b00:	4b52      	ldr	r3, [pc, #328]	; (10c4c <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x188>)
   10b02:	681b      	ldr	r3, [r3, #0]
   10b04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   10b06:	62da      	str	r2, [r3, #44]	; 0x2c
        SDO->ODSize = ODSize;
   10b08:	4b50      	ldr	r3, [pc, #320]	; (10c4c <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x188>)
   10b0a:	681b      	ldr	r3, [r3, #0]
   10b0c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   10b0e:	631a      	str	r2, [r3, #48]	; 0x30
        SDO->ODExtensions = ODExtensions;
   10b10:	4b4e      	ldr	r3, [pc, #312]	; (10c4c <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x188>)
   10b12:	681b      	ldr	r3, [r3, #0]
   10b14:	6bba      	ldr	r2, [r7, #56]	; 0x38
   10b16:	635a      	str	r2, [r3, #52]	; 0x34

        /* clear pointers in ODExtensions */
        for(i=0U; i<ODSize; i++){
   10b18:	2300      	movs	r3, #0
   10b1a:	617b      	str	r3, [r7, #20]
   10b1c:	697a      	ldr	r2, [r7, #20]
   10b1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   10b20:	429a      	cmp	r2, r3
   10b22:	d238      	bcs.n	10b96 <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0xd2>
            SDO->ODExtensions[i].pODFunc = NULL;
   10b24:	4b49      	ldr	r3, [pc, #292]	; (10c4c <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x188>)
   10b26:	681b      	ldr	r3, [r3, #0]
   10b28:	6b59      	ldr	r1, [r3, #52]	; 0x34
   10b2a:	697a      	ldr	r2, [r7, #20]
   10b2c:	4613      	mov	r3, r2
   10b2e:	005b      	lsls	r3, r3, #1
   10b30:	4413      	add	r3, r2
   10b32:	009b      	lsls	r3, r3, #2
   10b34:	440b      	add	r3, r1
   10b36:	2200      	movs	r2, #0
   10b38:	601a      	str	r2, [r3, #0]
            SDO->ODExtensions[i].object = NULL;
   10b3a:	4b44      	ldr	r3, [pc, #272]	; (10c4c <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x188>)
   10b3c:	681b      	ldr	r3, [r3, #0]
   10b3e:	6b59      	ldr	r1, [r3, #52]	; 0x34
   10b40:	697a      	ldr	r2, [r7, #20]
   10b42:	4613      	mov	r3, r2
   10b44:	005b      	lsls	r3, r3, #1
   10b46:	4413      	add	r3, r2
   10b48:	009b      	lsls	r3, r3, #2
   10b4a:	440b      	add	r3, r1
   10b4c:	2200      	movs	r2, #0
   10b4e:	605a      	str	r2, [r3, #4]
            SDO->ODExtensions[i].flags = NULL;
   10b50:	4b3e      	ldr	r3, [pc, #248]	; (10c4c <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x188>)
   10b52:	681b      	ldr	r3, [r3, #0]
   10b54:	6b59      	ldr	r1, [r3, #52]	; 0x34
   10b56:	697a      	ldr	r2, [r7, #20]
   10b58:	4613      	mov	r3, r2
   10b5a:	005b      	lsls	r3, r3, #1
   10b5c:	4413      	add	r3, r2
   10b5e:	009b      	lsls	r3, r3, #2
   10b60:	440b      	add	r3, r1
   10b62:	2200      	movs	r2, #0
   10b64:	609a      	str	r2, [r3, #8]
        for(i=0U; i<ODSize; i++){
   10b66:	697b      	ldr	r3, [r7, #20]
   10b68:	3301      	adds	r3, #1
   10b6a:	617b      	str	r3, [r7, #20]
   10b6c:	e7d6      	b.n	10b1c <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x58>
        }
    }
    /* copy object dictionary from parent */
    else{
        SDO->ownOD = false;
   10b6e:	4b37      	ldr	r3, [pc, #220]	; (10c4c <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x188>)
   10b70:	681b      	ldr	r3, [r3, #0]
   10b72:	2200      	movs	r2, #0
   10b74:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        SDO->OD = parentSDO->OD;
   10b78:	4b34      	ldr	r3, [pc, #208]	; (10c4c <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x188>)
   10b7a:	681b      	ldr	r3, [r3, #0]
   10b7c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   10b7e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
   10b80:	62da      	str	r2, [r3, #44]	; 0x2c
        SDO->ODSize = parentSDO->ODSize;
   10b82:	4b32      	ldr	r3, [pc, #200]	; (10c4c <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x188>)
   10b84:	681b      	ldr	r3, [r3, #0]
   10b86:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   10b88:	6b12      	ldr	r2, [r2, #48]	; 0x30
   10b8a:	631a      	str	r2, [r3, #48]	; 0x30
        SDO->ODExtensions = parentSDO->ODExtensions;
   10b8c:	4b2f      	ldr	r3, [pc, #188]	; (10c4c <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x188>)
   10b8e:	681b      	ldr	r3, [r3, #0]
   10b90:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   10b92:	6b52      	ldr	r2, [r2, #52]	; 0x34
   10b94:	635a      	str	r2, [r3, #52]	; 0x34
    }

    /* Configure object variables */
    SDO->nodeId = nodeId;
   10b96:	4b2d      	ldr	r3, [pc, #180]	; (10c4c <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x188>)
   10b98:	681b      	ldr	r3, [r3, #0]
   10b9a:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
   10b9e:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    SDO->state = CO_SDO_ST_IDLE;
   10ba2:	4b2a      	ldr	r3, [pc, #168]	; (10c4c <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x188>)
   10ba4:	681b      	ldr	r3, [r3, #0]
   10ba6:	2200      	movs	r2, #0
   10ba8:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
    SDO->CANrxNew = false;
   10bac:	4b27      	ldr	r3, [pc, #156]	; (10c4c <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x188>)
   10bae:	681b      	ldr	r3, [r3, #0]
   10bb0:	2200      	movs	r2, #0
   10bb2:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
    SDO->ptrFunctSignal = NULL;
   10bb6:	4b25      	ldr	r3, [pc, #148]	; (10c4c <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x188>)
   10bb8:	681b      	ldr	r3, [r3, #0]
   10bba:	2200      	movs	r2, #0
   10bbc:	67da      	str	r2, [r3, #124]	; 0x7c


    /* Configure Object dictionary entry at index 0x1200 */
    if(ObjDictIndex_SDOServerParameter == OD_H1200_SDO_SERVER_PARAM){
   10bbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
   10bc0:	f5b3 5f90 	cmp.w	r3, #4608	; 0x1200
   10bc4:	d10f      	bne.n	10be6 <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x122>
        canopen_driver->CO_OD_configure( ObjDictIndex_SDOServerParameter, CO_ODF_1200, (void*)&SDO->nodeId, 0U, 0U);
   10bc6:	4b22      	ldr	r3, [pc, #136]	; (10c50 <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x18c>)
   10bc8:	681b      	ldr	r3, [r3, #0]
   10bca:	1d18      	adds	r0, r3, #4
   10bcc:	4b1f      	ldr	r3, [pc, #124]	; (10c4c <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x188>)
   10bce:	681b      	ldr	r3, [r3, #0]
   10bd0:	f103 0268 	add.w	r2, r3, #104	; 0x68
   10bd4:	2300      	movs	r3, #0
   10bd6:	9301      	str	r3, [sp, #4]
   10bd8:	2300      	movs	r3, #0
   10bda:	9300      	str	r3, [sp, #0]
   10bdc:	4613      	mov	r3, r2
   10bde:	4a1d      	ldr	r2, [pc, #116]	; (10c54 <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x190>)
   10be0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   10be2:	4c1d      	ldr	r4, [pc, #116]	; (10c58 <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x194>)
   10be4:	47a0      	blx	r4
    }

    if((COB_IDClientToServer & 0x80000000) != 0 || (COB_IDServerToClient & 0x80000000) != 0 ){
   10be6:	687b      	ldr	r3, [r7, #4]
   10be8:	2b00      	cmp	r3, #0
   10bea:	db02      	blt.n	10bf2 <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x12e>
   10bec:	683b      	ldr	r3, [r7, #0]
   10bee:	2b00      	cmp	r3, #0
   10bf0:	da03      	bge.n	10bfa <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x136>
        // SDO is invalid
        COB_IDClientToServer = 0;
   10bf2:	2300      	movs	r3, #0
   10bf4:	607b      	str	r3, [r7, #4]
        COB_IDServerToClient = 0;
   10bf6:	2300      	movs	r3, #0
   10bf8:	603b      	str	r3, [r7, #0]
    }
    /* configure SDO server CAN reception */
  canopen_driver->CAN_Rx_BufferInit(
   10bfa:	4b15      	ldr	r3, [pc, #84]	; (10c50 <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x18c>)
   10bfc:	6818      	ldr	r0, [r3, #0]
   10bfe:	4b13      	ldr	r3, [pc, #76]	; (10c4c <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x188>)
   10c00:	681b      	ldr	r3, [r3, #0]
            CANdevRxIdx,            /* rx buffer index */
            COB_IDClientToServer,   /* CAN identifier */
            0x7FF,                  /* mask */
            0,                      /* rtr */
            (void*)SDO,             /* object passed to receive function */
            CO_SDO_receive);        /* this function will process received message */
   10c02:	4a16      	ldr	r2, [pc, #88]	; (10c5c <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x198>)
   10c04:	9202      	str	r2, [sp, #8]
   10c06:	9301      	str	r3, [sp, #4]
   10c08:	2300      	movs	r3, #0
   10c0a:	9300      	str	r3, [sp, #0]
   10c0c:	f240 73ff 	movw	r3, #2047	; 0x7ff
   10c10:	687a      	ldr	r2, [r7, #4]
   10c12:	6c79      	ldr	r1, [r7, #68]	; 0x44
   10c14:	4c12      	ldr	r4, [pc, #72]	; (10c60 <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x19c>)
   10c16:	47a0      	blx	r4
	//printf("Config_SDO_recieve");
    /* configure SDO server CAN transmission */
    SDO->CANdevTx = CANdevTx;
   10c18:	4b0c      	ldr	r3, [pc, #48]	; (10c4c <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x188>)
   10c1a:	681b      	ldr	r3, [r3, #0]
   10c1c:	6cba      	ldr	r2, [r7, #72]	; 0x48
   10c1e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    SDO->CANtxBuff = canopen_driver->CAN_Tx_BufferInit(
   10c22:	4b0a      	ldr	r3, [pc, #40]	; (10c4c <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x188>)
   10c24:	681c      	ldr	r4, [r3, #0]
   10c26:	4b0a      	ldr	r3, [pc, #40]	; (10c50 <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x18c>)
   10c28:	6818      	ldr	r0, [r3, #0]
   10c2a:	2300      	movs	r3, #0
   10c2c:	9301      	str	r3, [sp, #4]
   10c2e:	2308      	movs	r3, #8
   10c30:	9300      	str	r3, [sp, #0]
   10c32:	2300      	movs	r3, #0
   10c34:	683a      	ldr	r2, [r7, #0]
   10c36:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
   10c38:	4d0a      	ldr	r5, [pc, #40]	; (10c64 <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x1a0>)
   10c3a:	47a8      	blx	r5
   10c3c:	4603      	mov	r3, r0
   10c3e:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
            COB_IDServerToClient,   /* CAN identifier */
            0,                      /* rtr */
            8,                      /* number of data bytes */
            0);                     /* synchronous message flag bit */
	
    return CO_ERROR_NO;
   10c42:	2300      	movs	r3, #0
}
   10c44:	4618      	mov	r0, r3
   10c46:	3718      	adds	r7, #24
   10c48:	46bd      	mov	sp, r7
   10c4a:	bdb0      	pop	{r4, r5, r7, pc}
   10c4c:	20001afc 	.word	0x20001afc
   10c50:	20001abc 	.word	0x20001abc
   10c54:	00010a5d 	.word	0x00010a5d
   10c58:	00010c69 	.word	0x00010c69
   10c5c:	000108f5 	.word	0x000108f5
   10c60:	0000daa9 	.word	0x0000daa9
   10c64:	0000dba9 	.word	0x0000dba9

00010c68 <_ZN12CO_SDO_Class15CO_OD_configureEmPF18CO_SDO_abortCode_tP12CO_ODF_arg_tEPvPhh>:
        uint32_t                index,
        CO_SDO_abortCode_t    (*pODFunc)(CO_ODF_arg_t *ODF_arg),
        void                   *object,
        uint8_t                *flags,
        uint8_t                 flagsSize)
{
   10c68:	b580      	push	{r7, lr}
   10c6a:	b088      	sub	sp, #32
   10c6c:	af00      	add	r7, sp, #0
   10c6e:	60f8      	str	r0, [r7, #12]
   10c70:	60b9      	str	r1, [r7, #8]
   10c72:	607a      	str	r2, [r7, #4]
   10c74:	603b      	str	r3, [r7, #0]
    uint32_t entryNo;

    entryNo = canopen_driver->CO_OD_find(index);
   10c76:	4b28      	ldr	r3, [pc, #160]	; (10d18 <_ZN12CO_SDO_Class15CO_OD_configureEmPF18CO_SDO_abortCode_tP12CO_ODF_arg_tEPvPhh+0xb0>)
   10c78:	681b      	ldr	r3, [r3, #0]
   10c7a:	3304      	adds	r3, #4
   10c7c:	68b9      	ldr	r1, [r7, #8]
   10c7e:	4618      	mov	r0, r3
   10c80:	4b26      	ldr	r3, [pc, #152]	; (10d1c <_ZN12CO_SDO_Class15CO_OD_configureEmPF18CO_SDO_abortCode_tP12CO_ODF_arg_tEPvPhh+0xb4>)
   10c82:	4798      	blx	r3
   10c84:	61b8      	str	r0, [r7, #24]
    if(entryNo < 0xFFFFU){
   10c86:	69bb      	ldr	r3, [r7, #24]
   10c88:	f64f 72fe 	movw	r2, #65534	; 0xfffe
   10c8c:	4293      	cmp	r3, r2
   10c8e:	d83e      	bhi.n	10d0e <_ZN12CO_SDO_Class15CO_OD_configureEmPF18CO_SDO_abortCode_tP12CO_ODF_arg_tEPvPhh+0xa6>
        CO_OD_extension_t *ext = &SDO->ODExtensions[entryNo];
   10c90:	4b23      	ldr	r3, [pc, #140]	; (10d20 <_ZN12CO_SDO_Class15CO_OD_configureEmPF18CO_SDO_abortCode_tP12CO_ODF_arg_tEPvPhh+0xb8>)
   10c92:	681b      	ldr	r3, [r3, #0]
   10c94:	6b59      	ldr	r1, [r3, #52]	; 0x34
   10c96:	69ba      	ldr	r2, [r7, #24]
   10c98:	4613      	mov	r3, r2
   10c9a:	005b      	lsls	r3, r3, #1
   10c9c:	4413      	add	r3, r2
   10c9e:	009b      	lsls	r3, r3, #2
   10ca0:	440b      	add	r3, r1
   10ca2:	617b      	str	r3, [r7, #20]
        uint8_t maxSubIndex = SDO->OD[entryNo].maxSubIndex;
   10ca4:	4b1e      	ldr	r3, [pc, #120]	; (10d20 <_ZN12CO_SDO_Class15CO_OD_configureEmPF18CO_SDO_abortCode_tP12CO_ODF_arg_tEPvPhh+0xb8>)
   10ca6:	681b      	ldr	r3, [r3, #0]
   10ca8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
   10caa:	69ba      	ldr	r2, [r7, #24]
   10cac:	4613      	mov	r3, r2
   10cae:	009b      	lsls	r3, r3, #2
   10cb0:	4413      	add	r3, r2
   10cb2:	009b      	lsls	r3, r3, #2
   10cb4:	440b      	add	r3, r1
   10cb6:	791b      	ldrb	r3, [r3, #4]
   10cb8:	74fb      	strb	r3, [r7, #19]

        ext->pODFunc = pODFunc;
   10cba:	697b      	ldr	r3, [r7, #20]
   10cbc:	687a      	ldr	r2, [r7, #4]
   10cbe:	601a      	str	r2, [r3, #0]
        ext->object = object;
   10cc0:	697b      	ldr	r3, [r7, #20]
   10cc2:	683a      	ldr	r2, [r7, #0]
   10cc4:	605a      	str	r2, [r3, #4]
        if((flags != NULL) && (flagsSize != 0U) && (flagsSize == maxSubIndex)){
   10cc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
   10cc8:	2b00      	cmp	r3, #0
   10cca:	d01b      	beq.n	10d04 <_ZN12CO_SDO_Class15CO_OD_configureEmPF18CO_SDO_abortCode_tP12CO_ODF_arg_tEPvPhh+0x9c>
   10ccc:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
   10cd0:	2b00      	cmp	r3, #0
   10cd2:	d017      	beq.n	10d04 <_ZN12CO_SDO_Class15CO_OD_configureEmPF18CO_SDO_abortCode_tP12CO_ODF_arg_tEPvPhh+0x9c>
   10cd4:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
   10cd8:	7cfb      	ldrb	r3, [r7, #19]
   10cda:	429a      	cmp	r2, r3
   10cdc:	d112      	bne.n	10d04 <_ZN12CO_SDO_Class15CO_OD_configureEmPF18CO_SDO_abortCode_tP12CO_ODF_arg_tEPvPhh+0x9c>
            uint32_t i;
            ext->flags = flags;
   10cde:	697b      	ldr	r3, [r7, #20]
   10ce0:	6aba      	ldr	r2, [r7, #40]	; 0x28
   10ce2:	609a      	str	r2, [r3, #8]
            for(i=0U; i<=maxSubIndex; i++){
   10ce4:	2300      	movs	r3, #0
   10ce6:	61fb      	str	r3, [r7, #28]
   10ce8:	7cfa      	ldrb	r2, [r7, #19]
   10cea:	69fb      	ldr	r3, [r7, #28]
   10cec:	429a      	cmp	r2, r3
   10cee:	d30d      	bcc.n	10d0c <_ZN12CO_SDO_Class15CO_OD_configureEmPF18CO_SDO_abortCode_tP12CO_ODF_arg_tEPvPhh+0xa4>
                ext->flags[i] = 0U;
   10cf0:	697b      	ldr	r3, [r7, #20]
   10cf2:	689a      	ldr	r2, [r3, #8]
   10cf4:	69fb      	ldr	r3, [r7, #28]
   10cf6:	4413      	add	r3, r2
   10cf8:	2200      	movs	r2, #0
   10cfa:	701a      	strb	r2, [r3, #0]
            for(i=0U; i<=maxSubIndex; i++){
   10cfc:	69fb      	ldr	r3, [r7, #28]
   10cfe:	3301      	adds	r3, #1
   10d00:	61fb      	str	r3, [r7, #28]
   10d02:	e7f1      	b.n	10ce8 <_ZN12CO_SDO_Class15CO_OD_configureEmPF18CO_SDO_abortCode_tP12CO_ODF_arg_tEPvPhh+0x80>
            }
        }
        else{
            ext->flags = NULL;
   10d04:	697b      	ldr	r3, [r7, #20]
   10d06:	2200      	movs	r2, #0
   10d08:	609a      	str	r2, [r3, #8]
        }
    }
}
   10d0a:	e000      	b.n	10d0e <_ZN12CO_SDO_Class15CO_OD_configureEmPF18CO_SDO_abortCode_tP12CO_ODF_arg_tEPvPhh+0xa6>
            }
   10d0c:	bf00      	nop
}
   10d0e:	bf00      	nop
   10d10:	3720      	adds	r7, #32
   10d12:	46bd      	mov	sp, r7
   10d14:	bd80      	pop	{r7, pc}
   10d16:	bf00      	nop
   10d18:	20001abc 	.word	0x20001abc
   10d1c:	00010d25 	.word	0x00010d25
   10d20:	20001afc 	.word	0x20001afc

00010d24 <_ZN12CO_SDO_Class10CO_OD_findEm>:


/******************************************************************************/
uint32_t CO_SDO_Class::CO_OD_find( uint32_t index){
   10d24:	b480      	push	{r7}
   10d26:	b087      	sub	sp, #28
   10d28:	af00      	add	r7, sp, #0
   10d2a:	6078      	str	r0, [r7, #4]
   10d2c:	6039      	str	r1, [r7, #0]
    /* Fast search in ordered Object Dictionary. If indexes are mixed, this won't work. */
    /* If Object Dictionary has up to 2^N entries, then N is max number of loop passes. */
    uint32_t cur, min, max;
    const CO_OD_entry_t* object;

    min = 0U;
   10d2e:	2300      	movs	r3, #0
   10d30:	617b      	str	r3, [r7, #20]
    max = SDO->ODSize - 1U;
   10d32:	4b26      	ldr	r3, [pc, #152]	; (10dcc <_ZN12CO_SDO_Class10CO_OD_findEm+0xa8>)
   10d34:	681b      	ldr	r3, [r3, #0]
   10d36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   10d38:	3b01      	subs	r3, #1
   10d3a:	613b      	str	r3, [r7, #16]
    while(min < max){
   10d3c:	697a      	ldr	r2, [r7, #20]
   10d3e:	693b      	ldr	r3, [r7, #16]
   10d40:	429a      	cmp	r2, r3
   10d42:	d227      	bcs.n	10d94 <_ZN12CO_SDO_Class10CO_OD_findEm+0x70>
        cur = (min + max) / 2;
   10d44:	697a      	ldr	r2, [r7, #20]
   10d46:	693b      	ldr	r3, [r7, #16]
   10d48:	4413      	add	r3, r2
   10d4a:	085b      	lsrs	r3, r3, #1
   10d4c:	60fb      	str	r3, [r7, #12]
        object = &SDO->OD[cur];
   10d4e:	4b1f      	ldr	r3, [pc, #124]	; (10dcc <_ZN12CO_SDO_Class10CO_OD_findEm+0xa8>)
   10d50:	681b      	ldr	r3, [r3, #0]
   10d52:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
   10d54:	68fa      	ldr	r2, [r7, #12]
   10d56:	4613      	mov	r3, r2
   10d58:	009b      	lsls	r3, r3, #2
   10d5a:	4413      	add	r3, r2
   10d5c:	009b      	lsls	r3, r3, #2
   10d5e:	440b      	add	r3, r1
   10d60:	60bb      	str	r3, [r7, #8]
        /* Is object matched */
        if(index == object->index){
   10d62:	68bb      	ldr	r3, [r7, #8]
   10d64:	681a      	ldr	r2, [r3, #0]
   10d66:	683b      	ldr	r3, [r7, #0]
   10d68:	429a      	cmp	r2, r3
   10d6a:	d101      	bne.n	10d70 <_ZN12CO_SDO_Class10CO_OD_findEm+0x4c>
            return cur;
   10d6c:	68fb      	ldr	r3, [r7, #12]
   10d6e:	e028      	b.n	10dc2 <_ZN12CO_SDO_Class10CO_OD_findEm+0x9e>
        }
        if(index < object->index){
   10d70:	68bb      	ldr	r3, [r7, #8]
   10d72:	681a      	ldr	r2, [r3, #0]
   10d74:	683b      	ldr	r3, [r7, #0]
   10d76:	429a      	cmp	r2, r3
   10d78:	d908      	bls.n	10d8c <_ZN12CO_SDO_Class10CO_OD_findEm+0x68>
            max = cur;
   10d7a:	68fb      	ldr	r3, [r7, #12]
   10d7c:	613b      	str	r3, [r7, #16]
            if(max) max--;
   10d7e:	693b      	ldr	r3, [r7, #16]
   10d80:	2b00      	cmp	r3, #0
   10d82:	d0db      	beq.n	10d3c <_ZN12CO_SDO_Class10CO_OD_findEm+0x18>
   10d84:	693b      	ldr	r3, [r7, #16]
   10d86:	3b01      	subs	r3, #1
   10d88:	613b      	str	r3, [r7, #16]
   10d8a:	e7d7      	b.n	10d3c <_ZN12CO_SDO_Class10CO_OD_findEm+0x18>
        }
        else
            min = cur + 1U;
   10d8c:	68fb      	ldr	r3, [r7, #12]
   10d8e:	3301      	adds	r3, #1
   10d90:	617b      	str	r3, [r7, #20]
    while(min < max){
   10d92:	e7d3      	b.n	10d3c <_ZN12CO_SDO_Class10CO_OD_findEm+0x18>
    }

    if(min == max){
   10d94:	697a      	ldr	r2, [r7, #20]
   10d96:	693b      	ldr	r3, [r7, #16]
   10d98:	429a      	cmp	r2, r3
   10d9a:	d110      	bne.n	10dbe <_ZN12CO_SDO_Class10CO_OD_findEm+0x9a>
        object = &SDO->OD[min];
   10d9c:	4b0b      	ldr	r3, [pc, #44]	; (10dcc <_ZN12CO_SDO_Class10CO_OD_findEm+0xa8>)
   10d9e:	681b      	ldr	r3, [r3, #0]
   10da0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
   10da2:	697a      	ldr	r2, [r7, #20]
   10da4:	4613      	mov	r3, r2
   10da6:	009b      	lsls	r3, r3, #2
   10da8:	4413      	add	r3, r2
   10daa:	009b      	lsls	r3, r3, #2
   10dac:	440b      	add	r3, r1
   10dae:	60bb      	str	r3, [r7, #8]
        /* Is object matched */
        if(index == object->index){
   10db0:	68bb      	ldr	r3, [r7, #8]
   10db2:	681a      	ldr	r2, [r3, #0]
   10db4:	683b      	ldr	r3, [r7, #0]
   10db6:	429a      	cmp	r2, r3
   10db8:	d101      	bne.n	10dbe <_ZN12CO_SDO_Class10CO_OD_findEm+0x9a>
            return min;
   10dba:	697b      	ldr	r3, [r7, #20]
   10dbc:	e001      	b.n	10dc2 <_ZN12CO_SDO_Class10CO_OD_findEm+0x9e>
        }
    }

    return 0xFFFFU;  /* object does not exist in OD */
   10dbe:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
   10dc2:	4618      	mov	r0, r3
   10dc4:	371c      	adds	r7, #28
   10dc6:	46bd      	mov	sp, r7
   10dc8:	bc80      	pop	{r7}
   10dca:	4770      	bx	lr
   10dcc:	20001afc 	.word	0x20001afc

00010dd0 <_ZN12CO_SDO_Class15CO_OD_getLengthEmh>:


/******************************************************************************/
uint32_t CO_SDO_Class::CO_OD_getLength(uint32_t entryNo, uint8_t subIndex){
   10dd0:	b480      	push	{r7}
   10dd2:	b087      	sub	sp, #28
   10dd4:	af00      	add	r7, sp, #0
   10dd6:	60f8      	str	r0, [r7, #12]
   10dd8:	60b9      	str	r1, [r7, #8]
   10dda:	4613      	mov	r3, r2
   10ddc:	71fb      	strb	r3, [r7, #7]
    const CO_OD_entry_t* object = &SDO->OD[entryNo];
   10dde:	4b25      	ldr	r3, [pc, #148]	; (10e74 <_ZN12CO_SDO_Class15CO_OD_getLengthEmh+0xa4>)
   10de0:	681b      	ldr	r3, [r3, #0]
   10de2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
   10de4:	68ba      	ldr	r2, [r7, #8]
   10de6:	4613      	mov	r3, r2
   10de8:	009b      	lsls	r3, r3, #2
   10dea:	4413      	add	r3, r2
   10dec:	009b      	lsls	r3, r3, #2
   10dee:	440b      	add	r3, r1
   10df0:	617b      	str	r3, [r7, #20]

    if(entryNo == 0xFFFFU){
   10df2:	68bb      	ldr	r3, [r7, #8]
   10df4:	f64f 72ff 	movw	r2, #65535	; 0xffff
   10df8:	4293      	cmp	r3, r2
   10dfa:	d101      	bne.n	10e00 <_ZN12CO_SDO_Class15CO_OD_getLengthEmh+0x30>
        return 0U;
   10dfc:	2300      	movs	r3, #0
   10dfe:	e034      	b.n	10e6a <_ZN12CO_SDO_Class15CO_OD_getLengthEmh+0x9a>
    }

    if(object->maxSubIndex == 0U){    /* Object type is Var */
   10e00:	697b      	ldr	r3, [r7, #20]
   10e02:	791b      	ldrb	r3, [r3, #4]
   10e04:	2b00      	cmp	r3, #0
   10e06:	d108      	bne.n	10e1a <_ZN12CO_SDO_Class15CO_OD_getLengthEmh+0x4a>
        if(object->pData == 0){ /* data type is domain */
   10e08:	697b      	ldr	r3, [r7, #20]
   10e0a:	691b      	ldr	r3, [r3, #16]
   10e0c:	2b00      	cmp	r3, #0
   10e0e:	d101      	bne.n	10e14 <_ZN12CO_SDO_Class15CO_OD_getLengthEmh+0x44>
            return CO_SDO_BUFFER_SIZE;
   10e10:	2320      	movs	r3, #32
   10e12:	e02a      	b.n	10e6a <_ZN12CO_SDO_Class15CO_OD_getLengthEmh+0x9a>
        }
        else{
            return object->length;
   10e14:	697b      	ldr	r3, [r7, #20]
   10e16:	68db      	ldr	r3, [r3, #12]
   10e18:	e027      	b.n	10e6a <_ZN12CO_SDO_Class15CO_OD_getLengthEmh+0x9a>
        }
    }
    else if(object->attribute != 0U){ /* Object type is Array */
   10e1a:	697b      	ldr	r3, [r7, #20]
   10e1c:	689b      	ldr	r3, [r3, #8]
   10e1e:	2b00      	cmp	r3, #0
   10e20:	d00d      	beq.n	10e3e <_ZN12CO_SDO_Class15CO_OD_getLengthEmh+0x6e>
        if(subIndex == 0U){
   10e22:	79fb      	ldrb	r3, [r7, #7]
   10e24:	2b00      	cmp	r3, #0
   10e26:	d101      	bne.n	10e2c <_ZN12CO_SDO_Class15CO_OD_getLengthEmh+0x5c>
            return 1U;
   10e28:	2301      	movs	r3, #1
   10e2a:	e01e      	b.n	10e6a <_ZN12CO_SDO_Class15CO_OD_getLengthEmh+0x9a>
        }
        else if(object->pData == 0){
   10e2c:	697b      	ldr	r3, [r7, #20]
   10e2e:	691b      	ldr	r3, [r3, #16]
   10e30:	2b00      	cmp	r3, #0
   10e32:	d101      	bne.n	10e38 <_ZN12CO_SDO_Class15CO_OD_getLengthEmh+0x68>
            /* data type is domain */
            return CO_SDO_BUFFER_SIZE;
   10e34:	2320      	movs	r3, #32
   10e36:	e018      	b.n	10e6a <_ZN12CO_SDO_Class15CO_OD_getLengthEmh+0x9a>
        }
        else{
            return object->length;
   10e38:	697b      	ldr	r3, [r7, #20]
   10e3a:	68db      	ldr	r3, [r3, #12]
   10e3c:	e015      	b.n	10e6a <_ZN12CO_SDO_Class15CO_OD_getLengthEmh+0x9a>
        }
    }
    else{                            /* Object type is Record */
        if(((const CO_OD_entryRecord_t*)(object->pData))[subIndex].pData == 0){
   10e3e:	697b      	ldr	r3, [r7, #20]
   10e40:	6919      	ldr	r1, [r3, #16]
   10e42:	79fa      	ldrb	r2, [r7, #7]
   10e44:	4613      	mov	r3, r2
   10e46:	005b      	lsls	r3, r3, #1
   10e48:	4413      	add	r3, r2
   10e4a:	009b      	lsls	r3, r3, #2
   10e4c:	440b      	add	r3, r1
   10e4e:	681b      	ldr	r3, [r3, #0]
   10e50:	2b00      	cmp	r3, #0
   10e52:	d101      	bne.n	10e58 <_ZN12CO_SDO_Class15CO_OD_getLengthEmh+0x88>
            /* data type is domain */
            return CO_SDO_BUFFER_SIZE;
   10e54:	2320      	movs	r3, #32
   10e56:	e008      	b.n	10e6a <_ZN12CO_SDO_Class15CO_OD_getLengthEmh+0x9a>
        }
        else{
            return ((const CO_OD_entryRecord_t*)(object->pData))[subIndex].length;
   10e58:	697b      	ldr	r3, [r7, #20]
   10e5a:	6919      	ldr	r1, [r3, #16]
   10e5c:	79fa      	ldrb	r2, [r7, #7]
   10e5e:	4613      	mov	r3, r2
   10e60:	005b      	lsls	r3, r3, #1
   10e62:	4413      	add	r3, r2
   10e64:	009b      	lsls	r3, r3, #2
   10e66:	440b      	add	r3, r1
   10e68:	689b      	ldr	r3, [r3, #8]
        }
    }
}
   10e6a:	4618      	mov	r0, r3
   10e6c:	371c      	adds	r7, #28
   10e6e:	46bd      	mov	sp, r7
   10e70:	bc80      	pop	{r7}
   10e72:	4770      	bx	lr
   10e74:	20001afc 	.word	0x20001afc

00010e78 <_ZN12CO_SDO_Class18CO_OD_getAttributeEmh>:


/******************************************************************************/
uint32_t CO_SDO_Class::CO_OD_getAttribute(uint32_t entryNo, uint8_t subIndex){
   10e78:	b480      	push	{r7}
   10e7a:	b089      	sub	sp, #36	; 0x24
   10e7c:	af00      	add	r7, sp, #0
   10e7e:	60f8      	str	r0, [r7, #12]
   10e80:	60b9      	str	r1, [r7, #8]
   10e82:	4613      	mov	r3, r2
   10e84:	71fb      	strb	r3, [r7, #7]
    const CO_OD_entry_t* object = &SDO->OD[entryNo];
   10e86:	4b27      	ldr	r3, [pc, #156]	; (10f24 <_ZN12CO_SDO_Class18CO_OD_getAttributeEmh+0xac>)
   10e88:	681b      	ldr	r3, [r3, #0]
   10e8a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
   10e8c:	68ba      	ldr	r2, [r7, #8]
   10e8e:	4613      	mov	r3, r2
   10e90:	009b      	lsls	r3, r3, #2
   10e92:	4413      	add	r3, r2
   10e94:	009b      	lsls	r3, r3, #2
   10e96:	440b      	add	r3, r1
   10e98:	617b      	str	r3, [r7, #20]

    if(entryNo == 0xFFFFU){
   10e9a:	68bb      	ldr	r3, [r7, #8]
   10e9c:	f64f 72ff 	movw	r2, #65535	; 0xffff
   10ea0:	4293      	cmp	r3, r2
   10ea2:	d101      	bne.n	10ea8 <_ZN12CO_SDO_Class18CO_OD_getAttributeEmh+0x30>
        return 0U;
   10ea4:	2300      	movs	r3, #0
   10ea6:	e037      	b.n	10f18 <_ZN12CO_SDO_Class18CO_OD_getAttributeEmh+0xa0>
    }

    if(object->maxSubIndex == 0U){   /* Object type is Var */
   10ea8:	697b      	ldr	r3, [r7, #20]
   10eaa:	791b      	ldrb	r3, [r3, #4]
   10eac:	2b00      	cmp	r3, #0
   10eae:	d102      	bne.n	10eb6 <_ZN12CO_SDO_Class18CO_OD_getAttributeEmh+0x3e>
        return object->attribute;
   10eb0:	697b      	ldr	r3, [r7, #20]
   10eb2:	689b      	ldr	r3, [r3, #8]
   10eb4:	e030      	b.n	10f18 <_ZN12CO_SDO_Class18CO_OD_getAttributeEmh+0xa0>
    }
    else if(object->attribute != 0U){/* Object type is Array */
   10eb6:	697b      	ldr	r3, [r7, #20]
   10eb8:	689b      	ldr	r3, [r3, #8]
   10eba:	2b00      	cmp	r3, #0
   10ebc:	d023      	beq.n	10f06 <_ZN12CO_SDO_Class18CO_OD_getAttributeEmh+0x8e>
        bool_t exception_1003 = false;
   10ebe:	2300      	movs	r3, #0
   10ec0:	77fb      	strb	r3, [r7, #31]
        uint32_t attr = object->attribute;
   10ec2:	697b      	ldr	r3, [r7, #20]
   10ec4:	689b      	ldr	r3, [r3, #8]
   10ec6:	61bb      	str	r3, [r7, #24]

        /* Special exception: Object 1003,00 should be writable */
        if(object->index == 0x1003 && subIndex == 0) {
   10ec8:	697b      	ldr	r3, [r7, #20]
   10eca:	681b      	ldr	r3, [r3, #0]
   10ecc:	f241 0203 	movw	r2, #4099	; 0x1003
   10ed0:	4293      	cmp	r3, r2
   10ed2:	d108      	bne.n	10ee6 <_ZN12CO_SDO_Class18CO_OD_getAttributeEmh+0x6e>
   10ed4:	79fb      	ldrb	r3, [r7, #7]
   10ed6:	2b00      	cmp	r3, #0
   10ed8:	d105      	bne.n	10ee6 <_ZN12CO_SDO_Class18CO_OD_getAttributeEmh+0x6e>
            exception_1003 = true;
   10eda:	2301      	movs	r3, #1
   10edc:	77fb      	strb	r3, [r7, #31]
            attr |= CO_ODA_WRITEABLE;
   10ede:	69bb      	ldr	r3, [r7, #24]
   10ee0:	f043 0308 	orr.w	r3, r3, #8
   10ee4:	61bb      	str	r3, [r7, #24]
        }

        if(subIndex == 0U  && exception_1003 == false){
   10ee6:	79fb      	ldrb	r3, [r7, #7]
   10ee8:	2b00      	cmp	r3, #0
   10eea:	d10a      	bne.n	10f02 <_ZN12CO_SDO_Class18CO_OD_getAttributeEmh+0x8a>
   10eec:	7ffb      	ldrb	r3, [r7, #31]
   10eee:	2b00      	cmp	r3, #0
   10ef0:	d107      	bne.n	10f02 <_ZN12CO_SDO_Class18CO_OD_getAttributeEmh+0x8a>
            /* First subIndex is readonly */
            attr &= ~(CO_ODA_WRITEABLE | CO_ODA_RPDO_MAPABLE);
   10ef2:	69bb      	ldr	r3, [r7, #24]
   10ef4:	f023 0318 	bic.w	r3, r3, #24
   10ef8:	61bb      	str	r3, [r7, #24]
            attr |= CO_ODA_READABLE;
   10efa:	69bb      	ldr	r3, [r7, #24]
   10efc:	f043 0304 	orr.w	r3, r3, #4
   10f00:	61bb      	str	r3, [r7, #24]
        }
        return attr;
   10f02:	69bb      	ldr	r3, [r7, #24]
   10f04:	e008      	b.n	10f18 <_ZN12CO_SDO_Class18CO_OD_getAttributeEmh+0xa0>
    }
    else{                            /* Object type is Record */
        return ((const CO_OD_entryRecord_t*)(object->pData))[subIndex].attribute;
   10f06:	697b      	ldr	r3, [r7, #20]
   10f08:	6919      	ldr	r1, [r3, #16]
   10f0a:	79fa      	ldrb	r2, [r7, #7]
   10f0c:	4613      	mov	r3, r2
   10f0e:	005b      	lsls	r3, r3, #1
   10f10:	4413      	add	r3, r2
   10f12:	009b      	lsls	r3, r3, #2
   10f14:	440b      	add	r3, r1
   10f16:	685b      	ldr	r3, [r3, #4]
    }
}
   10f18:	4618      	mov	r0, r3
   10f1a:	3724      	adds	r7, #36	; 0x24
   10f1c:	46bd      	mov	sp, r7
   10f1e:	bc80      	pop	{r7}
   10f20:	4770      	bx	lr
   10f22:	bf00      	nop
   10f24:	20001afc 	.word	0x20001afc

00010f28 <_ZN12CO_SDO_Class20CO_OD_getDataPointerEmh>:


/******************************************************************************/
void* CO_SDO_Class::CO_OD_getDataPointer( uint32_t entryNo, uint8_t subIndex){
   10f28:	b480      	push	{r7}
   10f2a:	b087      	sub	sp, #28
   10f2c:	af00      	add	r7, sp, #0
   10f2e:	60f8      	str	r0, [r7, #12]
   10f30:	60b9      	str	r1, [r7, #8]
   10f32:	4613      	mov	r3, r2
   10f34:	71fb      	strb	r3, [r7, #7]
    const CO_OD_entry_t* object = &SDO->OD[entryNo];
   10f36:	4b20      	ldr	r3, [pc, #128]	; (10fb8 <_ZN12CO_SDO_Class20CO_OD_getDataPointerEmh+0x90>)
   10f38:	681b      	ldr	r3, [r3, #0]
   10f3a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
   10f3c:	68ba      	ldr	r2, [r7, #8]
   10f3e:	4613      	mov	r3, r2
   10f40:	009b      	lsls	r3, r3, #2
   10f42:	4413      	add	r3, r2
   10f44:	009b      	lsls	r3, r3, #2
   10f46:	440b      	add	r3, r1
   10f48:	617b      	str	r3, [r7, #20]

    if(entryNo == 0xFFFFU){
   10f4a:	68bb      	ldr	r3, [r7, #8]
   10f4c:	f64f 72ff 	movw	r2, #65535	; 0xffff
   10f50:	4293      	cmp	r3, r2
   10f52:	d101      	bne.n	10f58 <_ZN12CO_SDO_Class20CO_OD_getDataPointerEmh+0x30>
        return 0;
   10f54:	2300      	movs	r3, #0
   10f56:	e02a      	b.n	10fae <_ZN12CO_SDO_Class20CO_OD_getDataPointerEmh+0x86>
    }

    if(object->maxSubIndex == 0U){   /* Object type is Var */
   10f58:	697b      	ldr	r3, [r7, #20]
   10f5a:	791b      	ldrb	r3, [r3, #4]
   10f5c:	2b00      	cmp	r3, #0
   10f5e:	d102      	bne.n	10f66 <_ZN12CO_SDO_Class20CO_OD_getDataPointerEmh+0x3e>
        return object->pData;
   10f60:	697b      	ldr	r3, [r7, #20]
   10f62:	691b      	ldr	r3, [r3, #16]
   10f64:	e023      	b.n	10fae <_ZN12CO_SDO_Class20CO_OD_getDataPointerEmh+0x86>
    }
    else if(object->attribute != 0U){/* Object type is Array */
   10f66:	697b      	ldr	r3, [r7, #20]
   10f68:	689b      	ldr	r3, [r3, #8]
   10f6a:	2b00      	cmp	r3, #0
   10f6c:	d016      	beq.n	10f9c <_ZN12CO_SDO_Class20CO_OD_getDataPointerEmh+0x74>
        if(subIndex==0){
   10f6e:	79fb      	ldrb	r3, [r7, #7]
   10f70:	2b00      	cmp	r3, #0
   10f72:	d102      	bne.n	10f7a <_ZN12CO_SDO_Class20CO_OD_getDataPointerEmh+0x52>
            /* this is the data, for the subIndex 0 in the array */
            return (void*) &object->maxSubIndex;
   10f74:	697b      	ldr	r3, [r7, #20]
   10f76:	3304      	adds	r3, #4
   10f78:	e019      	b.n	10fae <_ZN12CO_SDO_Class20CO_OD_getDataPointerEmh+0x86>
        }
        else if(object->pData == 0){
   10f7a:	697b      	ldr	r3, [r7, #20]
   10f7c:	691b      	ldr	r3, [r3, #16]
   10f7e:	2b00      	cmp	r3, #0
   10f80:	d101      	bne.n	10f86 <_ZN12CO_SDO_Class20CO_OD_getDataPointerEmh+0x5e>
            /* data type is domain */
            return 0;
   10f82:	2300      	movs	r3, #0
   10f84:	e013      	b.n	10fae <_ZN12CO_SDO_Class20CO_OD_getDataPointerEmh+0x86>
        }
        else{
            return (void*)(((int8_t*)object->pData) + ((subIndex-1) * object->length));
   10f86:	697b      	ldr	r3, [r7, #20]
   10f88:	691a      	ldr	r2, [r3, #16]
   10f8a:	79fb      	ldrb	r3, [r7, #7]
   10f8c:	3b01      	subs	r3, #1
   10f8e:	4619      	mov	r1, r3
   10f90:	697b      	ldr	r3, [r7, #20]
   10f92:	68db      	ldr	r3, [r3, #12]
   10f94:	fb03 f301 	mul.w	r3, r3, r1
   10f98:	4413      	add	r3, r2
   10f9a:	e008      	b.n	10fae <_ZN12CO_SDO_Class20CO_OD_getDataPointerEmh+0x86>
        }
    }
    else{                            /* Object Type is Record */
        return ((const CO_OD_entryRecord_t*)(object->pData))[subIndex].pData;
   10f9c:	697b      	ldr	r3, [r7, #20]
   10f9e:	6919      	ldr	r1, [r3, #16]
   10fa0:	79fa      	ldrb	r2, [r7, #7]
   10fa2:	4613      	mov	r3, r2
   10fa4:	005b      	lsls	r3, r3, #1
   10fa6:	4413      	add	r3, r2
   10fa8:	009b      	lsls	r3, r3, #2
   10faa:	440b      	add	r3, r1
   10fac:	681b      	ldr	r3, [r3, #0]
    }
}
   10fae:	4618      	mov	r0, r3
   10fb0:	371c      	adds	r7, #28
   10fb2:	46bd      	mov	sp, r7
   10fb4:	bc80      	pop	{r7}
   10fb6:	4770      	bx	lr
   10fb8:	20001afc 	.word	0x20001afc

00010fbc <_ZN12CO_SDO_Class21CO_OD_getFlagsPointerEmh>:


/******************************************************************************/
uint8_t* CO_SDO_Class::CO_OD_getFlagsPointer( uint32_t entryNo, uint8_t subIndex){
   10fbc:	b480      	push	{r7}
   10fbe:	b087      	sub	sp, #28
   10fc0:	af00      	add	r7, sp, #0
   10fc2:	60f8      	str	r0, [r7, #12]
   10fc4:	60b9      	str	r1, [r7, #8]
   10fc6:	4613      	mov	r3, r2
   10fc8:	71fb      	strb	r3, [r7, #7]
    CO_OD_extension_t* ext;

    if((entryNo == 0xFFFFU) || (SDO->ODExtensions == 0)){
   10fca:	68bb      	ldr	r3, [r7, #8]
   10fcc:	f64f 72ff 	movw	r2, #65535	; 0xffff
   10fd0:	4293      	cmp	r3, r2
   10fd2:	d004      	beq.n	10fde <_ZN12CO_SDO_Class21CO_OD_getFlagsPointerEmh+0x22>
   10fd4:	4b0c      	ldr	r3, [pc, #48]	; (11008 <_ZN12CO_SDO_Class21CO_OD_getFlagsPointerEmh+0x4c>)
   10fd6:	681b      	ldr	r3, [r3, #0]
   10fd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   10fda:	2b00      	cmp	r3, #0
   10fdc:	d101      	bne.n	10fe2 <_ZN12CO_SDO_Class21CO_OD_getFlagsPointerEmh+0x26>
        return 0;
   10fde:	2300      	movs	r3, #0
   10fe0:	e00d      	b.n	10ffe <_ZN12CO_SDO_Class21CO_OD_getFlagsPointerEmh+0x42>
    }

    ext = &SDO->ODExtensions[entryNo];
   10fe2:	4b09      	ldr	r3, [pc, #36]	; (11008 <_ZN12CO_SDO_Class21CO_OD_getFlagsPointerEmh+0x4c>)
   10fe4:	681b      	ldr	r3, [r3, #0]
   10fe6:	6b59      	ldr	r1, [r3, #52]	; 0x34
   10fe8:	68ba      	ldr	r2, [r7, #8]
   10fea:	4613      	mov	r3, r2
   10fec:	005b      	lsls	r3, r3, #1
   10fee:	4413      	add	r3, r2
   10ff0:	009b      	lsls	r3, r3, #2
   10ff2:	440b      	add	r3, r1
   10ff4:	617b      	str	r3, [r7, #20]

    return &ext->flags[subIndex];
   10ff6:	697b      	ldr	r3, [r7, #20]
   10ff8:	689a      	ldr	r2, [r3, #8]
   10ffa:	79fb      	ldrb	r3, [r7, #7]
   10ffc:	4413      	add	r3, r2
}
   10ffe:	4618      	mov	r0, r3
   11000:	371c      	adds	r7, #28
   11002:	46bd      	mov	sp, r7
   11004:	bc80      	pop	{r7}
   11006:	4770      	bx	lr
   11008:	20001afc 	.word	0x20001afc

0001100c <_ZN12CO_SDO_Class19CO_SDO_initTransferEmh>:


/******************************************************************************/
uint32_t CO_SDO_Class::CO_SDO_initTransfer( uint32_t index, uint8_t subIndex){
   1100c:	b590      	push	{r4, r7, lr}
   1100e:	b087      	sub	sp, #28
   11010:	af00      	add	r7, sp, #0
   11012:	60f8      	str	r0, [r7, #12]
   11014:	60b9      	str	r1, [r7, #8]
   11016:	4613      	mov	r3, r2
   11018:	71fb      	strb	r3, [r7, #7]

    SDO->ODF_arg.index = index;
   1101a:	4b58      	ldr	r3, [pc, #352]	; (1117c <_ZN12CO_SDO_Class19CO_SDO_initTransferEmh+0x170>)
   1101c:	681b      	ldr	r3, [r3, #0]
   1101e:	68ba      	ldr	r2, [r7, #8]
   11020:	659a      	str	r2, [r3, #88]	; 0x58
    SDO->ODF_arg.subIndex = subIndex;
   11022:	4b56      	ldr	r3, [pc, #344]	; (1117c <_ZN12CO_SDO_Class19CO_SDO_initTransferEmh+0x170>)
   11024:	681b      	ldr	r3, [r3, #0]
   11026:	79fa      	ldrb	r2, [r7, #7]
   11028:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* find object in Object Dictionary */
    SDO->entryNo = CO_OD_find( index);
   1102c:	4b53      	ldr	r3, [pc, #332]	; (1117c <_ZN12CO_SDO_Class19CO_SDO_initTransferEmh+0x170>)
   1102e:	681c      	ldr	r4, [r3, #0]
   11030:	68b9      	ldr	r1, [r7, #8]
   11032:	68f8      	ldr	r0, [r7, #12]
   11034:	4b52      	ldr	r3, [pc, #328]	; (11180 <_ZN12CO_SDO_Class19CO_SDO_initTransferEmh+0x174>)
   11036:	4798      	blx	r3
   11038:	4603      	mov	r3, r0
   1103a:	63e3      	str	r3, [r4, #60]	; 0x3c
    if(SDO->entryNo == 0xFFFFU){
   1103c:	4b4f      	ldr	r3, [pc, #316]	; (1117c <_ZN12CO_SDO_Class19CO_SDO_initTransferEmh+0x170>)
   1103e:	681b      	ldr	r3, [r3, #0]
   11040:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   11042:	f64f 72ff 	movw	r2, #65535	; 0xffff
   11046:	4293      	cmp	r3, r2
   11048:	d101      	bne.n	1104e <_ZN12CO_SDO_Class19CO_SDO_initTransferEmh+0x42>
        return CO_SDO_AB_NOT_EXIST ;     /* object does not exist in OD */
   1104a:	4b4e      	ldr	r3, [pc, #312]	; (11184 <_ZN12CO_SDO_Class19CO_SDO_initTransferEmh+0x178>)
   1104c:	e091      	b.n	11172 <_ZN12CO_SDO_Class19CO_SDO_initTransferEmh+0x166>
    }

    /* verify existance of subIndex */
    if(subIndex > SDO->OD[SDO->entryNo].maxSubIndex &&
   1104e:	79f9      	ldrb	r1, [r7, #7]
   11050:	4b4a      	ldr	r3, [pc, #296]	; (1117c <_ZN12CO_SDO_Class19CO_SDO_initTransferEmh+0x170>)
   11052:	681b      	ldr	r3, [r3, #0]
   11054:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
   11056:	4b49      	ldr	r3, [pc, #292]	; (1117c <_ZN12CO_SDO_Class19CO_SDO_initTransferEmh+0x170>)
   11058:	681b      	ldr	r3, [r3, #0]
   1105a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
   1105c:	4613      	mov	r3, r2
   1105e:	009b      	lsls	r3, r3, #2
   11060:	4413      	add	r3, r2
   11062:	009b      	lsls	r3, r3, #2
   11064:	4403      	add	r3, r0
   11066:	791b      	ldrb	r3, [r3, #4]
   11068:	4299      	cmp	r1, r3
   1106a:	dd0f      	ble.n	1108c <_ZN12CO_SDO_Class19CO_SDO_initTransferEmh+0x80>
            SDO->OD[SDO->entryNo].pData != NULL)
   1106c:	4b43      	ldr	r3, [pc, #268]	; (1117c <_ZN12CO_SDO_Class19CO_SDO_initTransferEmh+0x170>)
   1106e:	681b      	ldr	r3, [r3, #0]
   11070:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
   11072:	4b42      	ldr	r3, [pc, #264]	; (1117c <_ZN12CO_SDO_Class19CO_SDO_initTransferEmh+0x170>)
   11074:	681b      	ldr	r3, [r3, #0]
   11076:	6bda      	ldr	r2, [r3, #60]	; 0x3c
   11078:	4613      	mov	r3, r2
   1107a:	009b      	lsls	r3, r3, #2
   1107c:	4413      	add	r3, r2
   1107e:	009b      	lsls	r3, r3, #2
   11080:	440b      	add	r3, r1
   11082:	691b      	ldr	r3, [r3, #16]
    if(subIndex > SDO->OD[SDO->entryNo].maxSubIndex &&
   11084:	2b00      	cmp	r3, #0
   11086:	d001      	beq.n	1108c <_ZN12CO_SDO_Class19CO_SDO_initTransferEmh+0x80>
    {
        return CO_SDO_AB_SUB_UNKNOWN;     /* Sub-index does not exist. */
   11088:	4b3f      	ldr	r3, [pc, #252]	; (11188 <_ZN12CO_SDO_Class19CO_SDO_initTransferEmh+0x17c>)
   1108a:	e072      	b.n	11172 <_ZN12CO_SDO_Class19CO_SDO_initTransferEmh+0x166>
    }

    /* pointer to data in Object dictionary */
    SDO->ODF_arg.ODdataStorage = CO_OD_getDataPointer(SDO->entryNo, subIndex);
   1108c:	4b3b      	ldr	r3, [pc, #236]	; (1117c <_ZN12CO_SDO_Class19CO_SDO_initTransferEmh+0x170>)
   1108e:	681c      	ldr	r4, [r3, #0]
   11090:	4b3a      	ldr	r3, [pc, #232]	; (1117c <_ZN12CO_SDO_Class19CO_SDO_initTransferEmh+0x170>)
   11092:	681b      	ldr	r3, [r3, #0]
   11094:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   11096:	79fa      	ldrb	r2, [r7, #7]
   11098:	4619      	mov	r1, r3
   1109a:	68f8      	ldr	r0, [r7, #12]
   1109c:	4b3b      	ldr	r3, [pc, #236]	; (1118c <_ZN12CO_SDO_Class19CO_SDO_initTransferEmh+0x180>)
   1109e:	4798      	blx	r3
   110a0:	4603      	mov	r3, r0
   110a2:	64a3      	str	r3, [r4, #72]	; 0x48

    /* fill ODF_arg */
    SDO->ODF_arg.object = NULL;
   110a4:	4b35      	ldr	r3, [pc, #212]	; (1117c <_ZN12CO_SDO_Class19CO_SDO_initTransferEmh+0x170>)
   110a6:	681b      	ldr	r3, [r3, #0]
   110a8:	2200      	movs	r2, #0
   110aa:	641a      	str	r2, [r3, #64]	; 0x40
    if(SDO->ODExtensions){
   110ac:	4b33      	ldr	r3, [pc, #204]	; (1117c <_ZN12CO_SDO_Class19CO_SDO_initTransferEmh+0x170>)
   110ae:	681b      	ldr	r3, [r3, #0]
   110b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   110b2:	2b00      	cmp	r3, #0
   110b4:	d010      	beq.n	110d8 <_ZN12CO_SDO_Class19CO_SDO_initTransferEmh+0xcc>
        CO_OD_extension_t *ext = &SDO->ODExtensions[SDO->entryNo];
   110b6:	4b31      	ldr	r3, [pc, #196]	; (1117c <_ZN12CO_SDO_Class19CO_SDO_initTransferEmh+0x170>)
   110b8:	681b      	ldr	r3, [r3, #0]
   110ba:	6b59      	ldr	r1, [r3, #52]	; 0x34
   110bc:	4b2f      	ldr	r3, [pc, #188]	; (1117c <_ZN12CO_SDO_Class19CO_SDO_initTransferEmh+0x170>)
   110be:	681b      	ldr	r3, [r3, #0]
   110c0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
   110c2:	4613      	mov	r3, r2
   110c4:	005b      	lsls	r3, r3, #1
   110c6:	4413      	add	r3, r2
   110c8:	009b      	lsls	r3, r3, #2
   110ca:	440b      	add	r3, r1
   110cc:	617b      	str	r3, [r7, #20]
        SDO->ODF_arg.object = ext->object;
   110ce:	4b2b      	ldr	r3, [pc, #172]	; (1117c <_ZN12CO_SDO_Class19CO_SDO_initTransferEmh+0x170>)
   110d0:	681b      	ldr	r3, [r3, #0]
   110d2:	697a      	ldr	r2, [r7, #20]
   110d4:	6852      	ldr	r2, [r2, #4]
   110d6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    SDO->ODF_arg.data = SDO->databuffer;
   110d8:	4b28      	ldr	r3, [pc, #160]	; (1117c <_ZN12CO_SDO_Class19CO_SDO_initTransferEmh+0x170>)
   110da:	681b      	ldr	r3, [r3, #0]
   110dc:	4a27      	ldr	r2, [pc, #156]	; (1117c <_ZN12CO_SDO_Class19CO_SDO_initTransferEmh+0x170>)
   110de:	6812      	ldr	r2, [r2, #0]
   110e0:	3208      	adds	r2, #8
   110e2:	645a      	str	r2, [r3, #68]	; 0x44
    SDO->ODF_arg.dataLength = CO_OD_getLength(SDO->entryNo, subIndex);
   110e4:	4b25      	ldr	r3, [pc, #148]	; (1117c <_ZN12CO_SDO_Class19CO_SDO_initTransferEmh+0x170>)
   110e6:	681c      	ldr	r4, [r3, #0]
   110e8:	4b24      	ldr	r3, [pc, #144]	; (1117c <_ZN12CO_SDO_Class19CO_SDO_initTransferEmh+0x170>)
   110ea:	681b      	ldr	r3, [r3, #0]
   110ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   110ee:	79fa      	ldrb	r2, [r7, #7]
   110f0:	4619      	mov	r1, r3
   110f2:	68f8      	ldr	r0, [r7, #12]
   110f4:	4b26      	ldr	r3, [pc, #152]	; (11190 <_ZN12CO_SDO_Class19CO_SDO_initTransferEmh+0x184>)
   110f6:	4798      	blx	r3
   110f8:	4603      	mov	r3, r0
   110fa:	64e3      	str	r3, [r4, #76]	; 0x4c
    SDO->ODF_arg.attribute = CO_OD_getAttribute(SDO->entryNo, subIndex);
   110fc:	4b1f      	ldr	r3, [pc, #124]	; (1117c <_ZN12CO_SDO_Class19CO_SDO_initTransferEmh+0x170>)
   110fe:	681c      	ldr	r4, [r3, #0]
   11100:	4b1e      	ldr	r3, [pc, #120]	; (1117c <_ZN12CO_SDO_Class19CO_SDO_initTransferEmh+0x170>)
   11102:	681b      	ldr	r3, [r3, #0]
   11104:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   11106:	79fa      	ldrb	r2, [r7, #7]
   11108:	4619      	mov	r1, r3
   1110a:	68f8      	ldr	r0, [r7, #12]
   1110c:	4b21      	ldr	r3, [pc, #132]	; (11194 <_ZN12CO_SDO_Class19CO_SDO_initTransferEmh+0x188>)
   1110e:	4798      	blx	r3
   11110:	4603      	mov	r3, r0
   11112:	6523      	str	r3, [r4, #80]	; 0x50
    SDO->ODF_arg.pFlags = CO_OD_getFlagsPointer( SDO->entryNo, subIndex);
   11114:	4b19      	ldr	r3, [pc, #100]	; (1117c <_ZN12CO_SDO_Class19CO_SDO_initTransferEmh+0x170>)
   11116:	681c      	ldr	r4, [r3, #0]
   11118:	4b18      	ldr	r3, [pc, #96]	; (1117c <_ZN12CO_SDO_Class19CO_SDO_initTransferEmh+0x170>)
   1111a:	681b      	ldr	r3, [r3, #0]
   1111c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1111e:	79fa      	ldrb	r2, [r7, #7]
   11120:	4619      	mov	r1, r3
   11122:	68f8      	ldr	r0, [r7, #12]
   11124:	4b1c      	ldr	r3, [pc, #112]	; (11198 <_ZN12CO_SDO_Class19CO_SDO_initTransferEmh+0x18c>)
   11126:	4798      	blx	r3
   11128:	4603      	mov	r3, r0
   1112a:	6563      	str	r3, [r4, #84]	; 0x54

    SDO->ODF_arg.firstSegment = true;
   1112c:	4b13      	ldr	r3, [pc, #76]	; (1117c <_ZN12CO_SDO_Class19CO_SDO_initTransferEmh+0x170>)
   1112e:	681b      	ldr	r3, [r3, #0]
   11130:	2201      	movs	r2, #1
   11132:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
    SDO->ODF_arg.lastSegment = true;
   11136:	4b11      	ldr	r3, [pc, #68]	; (1117c <_ZN12CO_SDO_Class19CO_SDO_initTransferEmh+0x170>)
   11138:	681b      	ldr	r3, [r3, #0]
   1113a:	2201      	movs	r2, #1
   1113c:	f883 205f 	strb.w	r2, [r3, #95]	; 0x5f

    /* indicate total data length, if not domain */
    SDO->ODF_arg.dataLengthTotal = (SDO->ODF_arg.ODdataStorage) ? SDO->ODF_arg.dataLength : 0U;
   11140:	4b0e      	ldr	r3, [pc, #56]	; (1117c <_ZN12CO_SDO_Class19CO_SDO_initTransferEmh+0x170>)
   11142:	681a      	ldr	r2, [r3, #0]
   11144:	4b0d      	ldr	r3, [pc, #52]	; (1117c <_ZN12CO_SDO_Class19CO_SDO_initTransferEmh+0x170>)
   11146:	681b      	ldr	r3, [r3, #0]
   11148:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1114a:	2b00      	cmp	r3, #0
   1114c:	d003      	beq.n	11156 <_ZN12CO_SDO_Class19CO_SDO_initTransferEmh+0x14a>
   1114e:	4b0b      	ldr	r3, [pc, #44]	; (1117c <_ZN12CO_SDO_Class19CO_SDO_initTransferEmh+0x170>)
   11150:	681b      	ldr	r3, [r3, #0]
   11152:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   11154:	e000      	b.n	11158 <_ZN12CO_SDO_Class19CO_SDO_initTransferEmh+0x14c>
   11156:	2300      	movs	r3, #0
   11158:	6613      	str	r3, [r2, #96]	; 0x60

    SDO->ODF_arg.offset = 0U;
   1115a:	4b08      	ldr	r3, [pc, #32]	; (1117c <_ZN12CO_SDO_Class19CO_SDO_initTransferEmh+0x170>)
   1115c:	681b      	ldr	r3, [r3, #0]
   1115e:	2200      	movs	r2, #0
   11160:	665a      	str	r2, [r3, #100]	; 0x64

    /* verify length */
    if(SDO->ODF_arg.dataLength > CO_SDO_BUFFER_SIZE){
   11162:	4b06      	ldr	r3, [pc, #24]	; (1117c <_ZN12CO_SDO_Class19CO_SDO_initTransferEmh+0x170>)
   11164:	681b      	ldr	r3, [r3, #0]
   11166:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   11168:	2b20      	cmp	r3, #32
   1116a:	d901      	bls.n	11170 <_ZN12CO_SDO_Class19CO_SDO_initTransferEmh+0x164>
        return CO_SDO_AB_DEVICE_INCOMPAT;     /* general internal incompatibility in the device */
   1116c:	4b0b      	ldr	r3, [pc, #44]	; (1119c <_ZN12CO_SDO_Class19CO_SDO_initTransferEmh+0x190>)
   1116e:	e000      	b.n	11172 <_ZN12CO_SDO_Class19CO_SDO_initTransferEmh+0x166>
    }

    return 0U;
   11170:	2300      	movs	r3, #0
}
   11172:	4618      	mov	r0, r3
   11174:	371c      	adds	r7, #28
   11176:	46bd      	mov	sp, r7
   11178:	bd90      	pop	{r4, r7, pc}
   1117a:	bf00      	nop
   1117c:	20001afc 	.word	0x20001afc
   11180:	00010d25 	.word	0x00010d25
   11184:	06020000 	.word	0x06020000
   11188:	06090011 	.word	0x06090011
   1118c:	00010f29 	.word	0x00010f29
   11190:	00010dd1 	.word	0x00010dd1
   11194:	00010e79 	.word	0x00010e79
   11198:	00010fbd 	.word	0x00010fbd
   1119c:	06040047 	.word	0x06040047

000111a0 <_ZN12CO_SDO_Class13CO_SDO_readODEm>:


/******************************************************************************/
uint32_t CO_SDO_Class::CO_SDO_readOD(uint32_t SDOBufferSize){
   111a0:	b580      	push	{r7, lr}
   111a2:	b08a      	sub	sp, #40	; 0x28
   111a4:	af00      	add	r7, sp, #0
   111a6:	6078      	str	r0, [r7, #4]
   111a8:	6039      	str	r1, [r7, #0]
    uint8_t *SDObuffer = SDO->ODF_arg.data;
   111aa:	4b43      	ldr	r3, [pc, #268]	; (112b8 <_ZN12CO_SDO_Class13CO_SDO_readODEm+0x118>)
   111ac:	681b      	ldr	r3, [r3, #0]
   111ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   111b0:	627b      	str	r3, [r7, #36]	; 0x24
    uint8_t *ODdata = (uint8_t*)SDO->ODF_arg.ODdataStorage;
   111b2:	4b41      	ldr	r3, [pc, #260]	; (112b8 <_ZN12CO_SDO_Class13CO_SDO_readODEm+0x118>)
   111b4:	681b      	ldr	r3, [r3, #0]
   111b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   111b8:	623b      	str	r3, [r7, #32]
    uint32_t length = SDO->ODF_arg.dataLength;
   111ba:	4b3f      	ldr	r3, [pc, #252]	; (112b8 <_ZN12CO_SDO_Class13CO_SDO_readODEm+0x118>)
   111bc:	681b      	ldr	r3, [r3, #0]
   111be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   111c0:	61fb      	str	r3, [r7, #28]
    CO_OD_extension_t *ext = 0;
   111c2:	2300      	movs	r3, #0
   111c4:	61bb      	str	r3, [r7, #24]

    /* is object readable? */
    if((SDO->ODF_arg.attribute & CO_ODA_READABLE) == 0)
   111c6:	4b3c      	ldr	r3, [pc, #240]	; (112b8 <_ZN12CO_SDO_Class13CO_SDO_readODEm+0x118>)
   111c8:	681b      	ldr	r3, [r3, #0]
   111ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   111cc:	f003 0304 	and.w	r3, r3, #4
   111d0:	2b00      	cmp	r3, #0
   111d2:	d101      	bne.n	111d8 <_ZN12CO_SDO_Class13CO_SDO_readODEm+0x38>
        return CO_SDO_AB_WRITEONLY;     /* attempt to read a write-only object */
   111d4:	4b39      	ldr	r3, [pc, #228]	; (112bc <_ZN12CO_SDO_Class13CO_SDO_readODEm+0x11c>)
   111d6:	e06b      	b.n	112b0 <_ZN12CO_SDO_Class13CO_SDO_readODEm+0x110>

    /* find extension */
    if(SDO->ODExtensions != NULL){
   111d8:	4b37      	ldr	r3, [pc, #220]	; (112b8 <_ZN12CO_SDO_Class13CO_SDO_readODEm+0x118>)
   111da:	681b      	ldr	r3, [r3, #0]
   111dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   111de:	2b00      	cmp	r3, #0
   111e0:	d00b      	beq.n	111fa <_ZN12CO_SDO_Class13CO_SDO_readODEm+0x5a>
        ext = &SDO->ODExtensions[SDO->entryNo];
   111e2:	4b35      	ldr	r3, [pc, #212]	; (112b8 <_ZN12CO_SDO_Class13CO_SDO_readODEm+0x118>)
   111e4:	681b      	ldr	r3, [r3, #0]
   111e6:	6b59      	ldr	r1, [r3, #52]	; 0x34
   111e8:	4b33      	ldr	r3, [pc, #204]	; (112b8 <_ZN12CO_SDO_Class13CO_SDO_readODEm+0x118>)
   111ea:	681b      	ldr	r3, [r3, #0]
   111ec:	6bda      	ldr	r2, [r3, #60]	; 0x3c
   111ee:	4613      	mov	r3, r2
   111f0:	005b      	lsls	r3, r3, #1
   111f2:	4413      	add	r3, r2
   111f4:	009b      	lsls	r3, r3, #2
   111f6:	440b      	add	r3, r1
   111f8:	61bb      	str	r3, [r7, #24]
    }

    /* copy data from OD to SDO buffer if not domain */
    if(ODdata != NULL){
   111fa:	6a3b      	ldr	r3, [r7, #32]
   111fc:	2b00      	cmp	r3, #0
   111fe:	d01e      	beq.n	1123e <_ZN12CO_SDO_Class13CO_SDO_readODEm+0x9e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   11200:	f3ef 8310 	mrs	r3, PRIMASK
   11204:	60bb      	str	r3, [r7, #8]
  return(result);
   11206:	68bb      	ldr	r3, [r7, #8]
        CO_LOCK_OD();
   11208:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
   1120a:	b672      	cpsid	i
        while(length--) *(SDObuffer++) = *(ODdata++);
   1120c:	69fb      	ldr	r3, [r7, #28]
   1120e:	1e5a      	subs	r2, r3, #1
   11210:	61fa      	str	r2, [r7, #28]
   11212:	2b00      	cmp	r3, #0
   11214:	bf14      	ite	ne
   11216:	2301      	movne	r3, #1
   11218:	2300      	moveq	r3, #0
   1121a:	b2db      	uxtb	r3, r3
   1121c:	2b00      	cmp	r3, #0
   1121e:	d008      	beq.n	11232 <_ZN12CO_SDO_Class13CO_SDO_readODEm+0x92>
   11220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   11222:	1c5a      	adds	r2, r3, #1
   11224:	627a      	str	r2, [r7, #36]	; 0x24
   11226:	6a3a      	ldr	r2, [r7, #32]
   11228:	1c51      	adds	r1, r2, #1
   1122a:	6239      	str	r1, [r7, #32]
   1122c:	7812      	ldrb	r2, [r2, #0]
   1122e:	701a      	strb	r2, [r3, #0]
   11230:	e7ec      	b.n	1120c <_ZN12CO_SDO_Class13CO_SDO_readODEm+0x6c>
   11232:	697b      	ldr	r3, [r7, #20]
   11234:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   11236:	68fb      	ldr	r3, [r7, #12]
   11238:	f383 8810 	msr	PRIMASK, r3
   1123c:	e005      	b.n	1124a <_ZN12CO_SDO_Class13CO_SDO_readODEm+0xaa>
        CO_UNLOCK_OD();
    }
    /* if domain, Object dictionary function MUST exist */
    else{
        if(ext->pODFunc == NULL){
   1123e:	69bb      	ldr	r3, [r7, #24]
   11240:	681b      	ldr	r3, [r3, #0]
   11242:	2b00      	cmp	r3, #0
   11244:	d101      	bne.n	1124a <_ZN12CO_SDO_Class13CO_SDO_readODEm+0xaa>
            return CO_SDO_AB_DEVICE_INCOMPAT;     /* general internal incompatibility in the device */
   11246:	4b1e      	ldr	r3, [pc, #120]	; (112c0 <_ZN12CO_SDO_Class13CO_SDO_readODEm+0x120>)
   11248:	e032      	b.n	112b0 <_ZN12CO_SDO_Class13CO_SDO_readODEm+0x110>
        }
    }

    /* call Object dictionary function if registered */
    SDO->ODF_arg.reading = true;
   1124a:	4b1b      	ldr	r3, [pc, #108]	; (112b8 <_ZN12CO_SDO_Class13CO_SDO_readODEm+0x118>)
   1124c:	681b      	ldr	r3, [r3, #0]
   1124e:	2201      	movs	r2, #1
   11250:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    if(ext->pODFunc != NULL){
   11254:	69bb      	ldr	r3, [r7, #24]
   11256:	681b      	ldr	r3, [r3, #0]
   11258:	2b00      	cmp	r3, #0
   1125a:	d019      	beq.n	11290 <_ZN12CO_SDO_Class13CO_SDO_readODEm+0xf0>
        uint32_t abortCode = ext->pODFunc(&SDO->ODF_arg);
   1125c:	69bb      	ldr	r3, [r7, #24]
   1125e:	681b      	ldr	r3, [r3, #0]
   11260:	4a15      	ldr	r2, [pc, #84]	; (112b8 <_ZN12CO_SDO_Class13CO_SDO_readODEm+0x118>)
   11262:	6812      	ldr	r2, [r2, #0]
   11264:	3240      	adds	r2, #64	; 0x40
   11266:	4610      	mov	r0, r2
   11268:	4798      	blx	r3
   1126a:	6138      	str	r0, [r7, #16]
        if(abortCode != 0U){
   1126c:	693b      	ldr	r3, [r7, #16]
   1126e:	2b00      	cmp	r3, #0
   11270:	d001      	beq.n	11276 <_ZN12CO_SDO_Class13CO_SDO_readODEm+0xd6>
            return abortCode;
   11272:	693b      	ldr	r3, [r7, #16]
   11274:	e01c      	b.n	112b0 <_ZN12CO_SDO_Class13CO_SDO_readODEm+0x110>
        }

        /* dataLength (upadted by pODFunc) must be inside limits */
        if((SDO->ODF_arg.dataLength == 0U) || (SDO->ODF_arg.dataLength > SDOBufferSize)){
   11276:	4b10      	ldr	r3, [pc, #64]	; (112b8 <_ZN12CO_SDO_Class13CO_SDO_readODEm+0x118>)
   11278:	681b      	ldr	r3, [r3, #0]
   1127a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   1127c:	2b00      	cmp	r3, #0
   1127e:	d005      	beq.n	1128c <_ZN12CO_SDO_Class13CO_SDO_readODEm+0xec>
   11280:	4b0d      	ldr	r3, [pc, #52]	; (112b8 <_ZN12CO_SDO_Class13CO_SDO_readODEm+0x118>)
   11282:	681b      	ldr	r3, [r3, #0]
   11284:	6cda      	ldr	r2, [r3, #76]	; 0x4c
   11286:	683b      	ldr	r3, [r7, #0]
   11288:	429a      	cmp	r2, r3
   1128a:	d901      	bls.n	11290 <_ZN12CO_SDO_Class13CO_SDO_readODEm+0xf0>
            return CO_SDO_AB_DEVICE_INCOMPAT;     /* general internal incompatibility in the device */
   1128c:	4b0c      	ldr	r3, [pc, #48]	; (112c0 <_ZN12CO_SDO_Class13CO_SDO_readODEm+0x120>)
   1128e:	e00f      	b.n	112b0 <_ZN12CO_SDO_Class13CO_SDO_readODEm+0x110>
        }
    }
    SDO->ODF_arg.offset += SDO->ODF_arg.dataLength;
   11290:	4b09      	ldr	r3, [pc, #36]	; (112b8 <_ZN12CO_SDO_Class13CO_SDO_readODEm+0x118>)
   11292:	681b      	ldr	r3, [r3, #0]
   11294:	4a08      	ldr	r2, [pc, #32]	; (112b8 <_ZN12CO_SDO_Class13CO_SDO_readODEm+0x118>)
   11296:	6812      	ldr	r2, [r2, #0]
   11298:	6e51      	ldr	r1, [r2, #100]	; 0x64
   1129a:	4a07      	ldr	r2, [pc, #28]	; (112b8 <_ZN12CO_SDO_Class13CO_SDO_readODEm+0x118>)
   1129c:	6812      	ldr	r2, [r2, #0]
   1129e:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
   112a0:	440a      	add	r2, r1
   112a2:	665a      	str	r2, [r3, #100]	; 0x64
    SDO->ODF_arg.firstSegment = false;
   112a4:	4b04      	ldr	r3, [pc, #16]	; (112b8 <_ZN12CO_SDO_Class13CO_SDO_readODEm+0x118>)
   112a6:	681b      	ldr	r3, [r3, #0]
   112a8:	2200      	movs	r2, #0
   112aa:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
            *(buf2--) = b;
        }
    }
#endif

    return 0U;
   112ae:	2300      	movs	r3, #0
}
   112b0:	4618      	mov	r0, r3
   112b2:	3728      	adds	r7, #40	; 0x28
   112b4:	46bd      	mov	sp, r7
   112b6:	bd80      	pop	{r7, pc}
   112b8:	20001afc 	.word	0x20001afc
   112bc:	06010001 	.word	0x06010001
   112c0:	06040047 	.word	0x06040047

000112c4 <_ZN12CO_SDO_Class14CO_SDO_writeODEm>:


/******************************************************************************/
uint32_t CO_SDO_Class::CO_SDO_writeOD(uint32_t length){
   112c4:	b580      	push	{r7, lr}
   112c6:	b08a      	sub	sp, #40	; 0x28
   112c8:	af00      	add	r7, sp, #0
   112ca:	6078      	str	r0, [r7, #4]
   112cc:	6039      	str	r1, [r7, #0]
    uint8_t *SDObuffer = SDO->ODF_arg.data;
   112ce:	4b48      	ldr	r3, [pc, #288]	; (113f0 <_ZN12CO_SDO_Class14CO_SDO_writeODEm+0x12c>)
   112d0:	681b      	ldr	r3, [r3, #0]
   112d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   112d4:	627b      	str	r3, [r7, #36]	; 0x24
    uint8_t *ODdata = (uint8_t*)SDO->ODF_arg.ODdataStorage;
   112d6:	4b46      	ldr	r3, [pc, #280]	; (113f0 <_ZN12CO_SDO_Class14CO_SDO_writeODEm+0x12c>)
   112d8:	681b      	ldr	r3, [r3, #0]
   112da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   112dc:	623b      	str	r3, [r7, #32]
    bool_t exception_1003 = false;
   112de:	2300      	movs	r3, #0
   112e0:	77fb      	strb	r3, [r7, #31]

    /* is object writeable? */
    if((SDO->ODF_arg.attribute & CO_ODA_WRITEABLE) == 0){
   112e2:	4b43      	ldr	r3, [pc, #268]	; (113f0 <_ZN12CO_SDO_Class14CO_SDO_writeODEm+0x12c>)
   112e4:	681b      	ldr	r3, [r3, #0]
   112e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   112e8:	f003 0308 	and.w	r3, r3, #8
   112ec:	2b00      	cmp	r3, #0
   112ee:	d101      	bne.n	112f4 <_ZN12CO_SDO_Class14CO_SDO_writeODEm+0x30>
        return CO_SDO_AB_READONLY;     /* attempt to write a read-only object */
   112f0:	4b40      	ldr	r3, [pc, #256]	; (113f4 <_ZN12CO_SDO_Class14CO_SDO_writeODEm+0x130>)
   112f2:	e079      	b.n	113e8 <_ZN12CO_SDO_Class14CO_SDO_writeODEm+0x124>
    }

    /* length of domain data is application specific and not verified */
    if(ODdata == 0){
   112f4:	6a3b      	ldr	r3, [r7, #32]
   112f6:	2b00      	cmp	r3, #0
   112f8:	d104      	bne.n	11304 <_ZN12CO_SDO_Class14CO_SDO_writeODEm+0x40>
        SDO->ODF_arg.dataLength = length;
   112fa:	4b3d      	ldr	r3, [pc, #244]	; (113f0 <_ZN12CO_SDO_Class14CO_SDO_writeODEm+0x12c>)
   112fc:	681b      	ldr	r3, [r3, #0]
   112fe:	683a      	ldr	r2, [r7, #0]
   11300:	64da      	str	r2, [r3, #76]	; 0x4c
   11302:	e007      	b.n	11314 <_ZN12CO_SDO_Class14CO_SDO_writeODEm+0x50>
    }

    /* verify length except for domain data type */
    else if(SDO->ODF_arg.dataLength != length){
   11304:	4b3a      	ldr	r3, [pc, #232]	; (113f0 <_ZN12CO_SDO_Class14CO_SDO_writeODEm+0x12c>)
   11306:	681b      	ldr	r3, [r3, #0]
   11308:	6cda      	ldr	r2, [r3, #76]	; 0x4c
   1130a:	683b      	ldr	r3, [r7, #0]
   1130c:	429a      	cmp	r2, r3
   1130e:	d001      	beq.n	11314 <_ZN12CO_SDO_Class14CO_SDO_writeODEm+0x50>
        return CO_SDO_AB_TYPE_MISMATCH;     /* Length of service parameter does not match */
   11310:	4b39      	ldr	r3, [pc, #228]	; (113f8 <_ZN12CO_SDO_Class14CO_SDO_writeODEm+0x134>)
   11312:	e069      	b.n	113e8 <_ZN12CO_SDO_Class14CO_SDO_writeODEm+0x124>
        }
    }
#endif

    /* call Object dictionary function if registered */
    SDO->ODF_arg.reading = false;
   11314:	4b36      	ldr	r3, [pc, #216]	; (113f0 <_ZN12CO_SDO_Class14CO_SDO_writeODEm+0x12c>)
   11316:	681b      	ldr	r3, [r3, #0]
   11318:	2200      	movs	r2, #0
   1131a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    if(SDO->ODExtensions != NULL){
   1131e:	4b34      	ldr	r3, [pc, #208]	; (113f0 <_ZN12CO_SDO_Class14CO_SDO_writeODEm+0x12c>)
   11320:	681b      	ldr	r3, [r3, #0]
   11322:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   11324:	2b00      	cmp	r3, #0
   11326:	d01c      	beq.n	11362 <_ZN12CO_SDO_Class14CO_SDO_writeODEm+0x9e>
        CO_OD_extension_t *ext = &SDO->ODExtensions[SDO->entryNo];
   11328:	4b31      	ldr	r3, [pc, #196]	; (113f0 <_ZN12CO_SDO_Class14CO_SDO_writeODEm+0x12c>)
   1132a:	681b      	ldr	r3, [r3, #0]
   1132c:	6b59      	ldr	r1, [r3, #52]	; 0x34
   1132e:	4b30      	ldr	r3, [pc, #192]	; (113f0 <_ZN12CO_SDO_Class14CO_SDO_writeODEm+0x12c>)
   11330:	681b      	ldr	r3, [r3, #0]
   11332:	6bda      	ldr	r2, [r3, #60]	; 0x3c
   11334:	4613      	mov	r3, r2
   11336:	005b      	lsls	r3, r3, #1
   11338:	4413      	add	r3, r2
   1133a:	009b      	lsls	r3, r3, #2
   1133c:	440b      	add	r3, r1
   1133e:	61bb      	str	r3, [r7, #24]

        if(ext->pODFunc != NULL){
   11340:	69bb      	ldr	r3, [r7, #24]
   11342:	681b      	ldr	r3, [r3, #0]
   11344:	2b00      	cmp	r3, #0
   11346:	d00c      	beq.n	11362 <_ZN12CO_SDO_Class14CO_SDO_writeODEm+0x9e>
            uint32_t abortCode = ext->pODFunc(&SDO->ODF_arg);
   11348:	69bb      	ldr	r3, [r7, #24]
   1134a:	681b      	ldr	r3, [r3, #0]
   1134c:	4a28      	ldr	r2, [pc, #160]	; (113f0 <_ZN12CO_SDO_Class14CO_SDO_writeODEm+0x12c>)
   1134e:	6812      	ldr	r2, [r2, #0]
   11350:	3240      	adds	r2, #64	; 0x40
   11352:	4610      	mov	r0, r2
   11354:	4798      	blx	r3
   11356:	6178      	str	r0, [r7, #20]
            if(abortCode != 0U){
   11358:	697b      	ldr	r3, [r7, #20]
   1135a:	2b00      	cmp	r3, #0
   1135c:	d001      	beq.n	11362 <_ZN12CO_SDO_Class14CO_SDO_writeODEm+0x9e>
                return abortCode;
   1135e:	697b      	ldr	r3, [r7, #20]
   11360:	e042      	b.n	113e8 <_ZN12CO_SDO_Class14CO_SDO_writeODEm+0x124>
            }
        }
    }
    SDO->ODF_arg.offset += SDO->ODF_arg.dataLength;
   11362:	4b23      	ldr	r3, [pc, #140]	; (113f0 <_ZN12CO_SDO_Class14CO_SDO_writeODEm+0x12c>)
   11364:	681b      	ldr	r3, [r3, #0]
   11366:	4a22      	ldr	r2, [pc, #136]	; (113f0 <_ZN12CO_SDO_Class14CO_SDO_writeODEm+0x12c>)
   11368:	6812      	ldr	r2, [r2, #0]
   1136a:	6e51      	ldr	r1, [r2, #100]	; 0x64
   1136c:	4a20      	ldr	r2, [pc, #128]	; (113f0 <_ZN12CO_SDO_Class14CO_SDO_writeODEm+0x12c>)
   1136e:	6812      	ldr	r2, [r2, #0]
   11370:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
   11372:	440a      	add	r2, r1
   11374:	665a      	str	r2, [r3, #100]	; 0x64
    SDO->ODF_arg.firstSegment = false;
   11376:	4b1e      	ldr	r3, [pc, #120]	; (113f0 <_ZN12CO_SDO_Class14CO_SDO_writeODEm+0x12c>)
   11378:	681b      	ldr	r3, [r3, #0]
   1137a:	2200      	movs	r2, #0
   1137c:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e

    /* Special exception: 1003,00 is writable from network, but not in OD  */
    if(SDO->ODF_arg.index == 0x1003 && SDO->ODF_arg.subIndex == 0) {
   11380:	4b1b      	ldr	r3, [pc, #108]	; (113f0 <_ZN12CO_SDO_Class14CO_SDO_writeODEm+0x12c>)
   11382:	681b      	ldr	r3, [r3, #0]
   11384:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   11386:	f241 0203 	movw	r2, #4099	; 0x1003
   1138a:	4293      	cmp	r3, r2
   1138c:	d107      	bne.n	1139e <_ZN12CO_SDO_Class14CO_SDO_writeODEm+0xda>
   1138e:	4b18      	ldr	r3, [pc, #96]	; (113f0 <_ZN12CO_SDO_Class14CO_SDO_writeODEm+0x12c>)
   11390:	681b      	ldr	r3, [r3, #0]
   11392:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
   11396:	2b00      	cmp	r3, #0
   11398:	d101      	bne.n	1139e <_ZN12CO_SDO_Class14CO_SDO_writeODEm+0xda>
        exception_1003 = true;
   1139a:	2301      	movs	r3, #1
   1139c:	77fb      	strb	r3, [r7, #31]
    }

    /* copy data from SDO buffer to OD if not domain */
    if(ODdata != NULL && exception_1003 == false){
   1139e:	6a3b      	ldr	r3, [r7, #32]
   113a0:	2b00      	cmp	r3, #0
   113a2:	d020      	beq.n	113e6 <_ZN12CO_SDO_Class14CO_SDO_writeODEm+0x122>
   113a4:	7ffb      	ldrb	r3, [r7, #31]
   113a6:	2b00      	cmp	r3, #0
   113a8:	d11d      	bne.n	113e6 <_ZN12CO_SDO_Class14CO_SDO_writeODEm+0x122>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   113aa:	f3ef 8310 	mrs	r3, PRIMASK
   113ae:	60bb      	str	r3, [r7, #8]
  return(result);
   113b0:	68bb      	ldr	r3, [r7, #8]
        CO_LOCK_OD();
   113b2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
   113b4:	b672      	cpsid	i
        while(length--){
   113b6:	683b      	ldr	r3, [r7, #0]
   113b8:	1e5a      	subs	r2, r3, #1
   113ba:	603a      	str	r2, [r7, #0]
   113bc:	2b00      	cmp	r3, #0
   113be:	bf14      	ite	ne
   113c0:	2301      	movne	r3, #1
   113c2:	2300      	moveq	r3, #0
   113c4:	b2db      	uxtb	r3, r3
   113c6:	2b00      	cmp	r3, #0
   113c8:	d008      	beq.n	113dc <_ZN12CO_SDO_Class14CO_SDO_writeODEm+0x118>
            *(ODdata++) = *(SDObuffer++);
   113ca:	6a3b      	ldr	r3, [r7, #32]
   113cc:	1c5a      	adds	r2, r3, #1
   113ce:	623a      	str	r2, [r7, #32]
   113d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   113d2:	1c51      	adds	r1, r2, #1
   113d4:	6279      	str	r1, [r7, #36]	; 0x24
   113d6:	7812      	ldrb	r2, [r2, #0]
   113d8:	701a      	strb	r2, [r3, #0]
        while(length--){
   113da:	e7ec      	b.n	113b6 <_ZN12CO_SDO_Class14CO_SDO_writeODEm+0xf2>
   113dc:	693b      	ldr	r3, [r7, #16]
   113de:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   113e0:	68fb      	ldr	r3, [r7, #12]
   113e2:	f383 8810 	msr	PRIMASK, r3
        }
        CO_UNLOCK_OD();
    }

    return 0;
   113e6:	2300      	movs	r3, #0
}
   113e8:	4618      	mov	r0, r3
   113ea:	3728      	adds	r7, #40	; 0x28
   113ec:	46bd      	mov	sp, r7
   113ee:	bd80      	pop	{r7, pc}
   113f0:	20001afc 	.word	0x20001afc
   113f4:	06010002 	.word	0x06010002
   113f8:	06070010 	.word	0x06070010

000113fc <_ZL12CO_SDO_abortP8CO_SDO_tm>:


/******************************************************************************/
static void CO_SDO_abort(CO_SDO_t *SDO,uint32_t code){
   113fc:	b580      	push	{r7, lr}
   113fe:	b082      	sub	sp, #8
   11400:	af00      	add	r7, sp, #0
   11402:	6078      	str	r0, [r7, #4]
   11404:	6039      	str	r1, [r7, #0]
    SDO->CANtxBuff->data[0] = 0x80;
   11406:	687b      	ldr	r3, [r7, #4]
   11408:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   1140c:	2280      	movs	r2, #128	; 0x80
   1140e:	715a      	strb	r2, [r3, #5]
    SDO->CANtxBuff->data[1] = SDO->ODF_arg.index & 0xFF;
   11410:	687b      	ldr	r3, [r7, #4]
   11412:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   11416:	687a      	ldr	r2, [r7, #4]
   11418:	6d92      	ldr	r2, [r2, #88]	; 0x58
   1141a:	b2d2      	uxtb	r2, r2
   1141c:	719a      	strb	r2, [r3, #6]
    SDO->CANtxBuff->data[2] = (SDO->ODF_arg.index>>8) & 0xFF;
   1141e:	687b      	ldr	r3, [r7, #4]
   11420:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   11424:	687a      	ldr	r2, [r7, #4]
   11426:	6d92      	ldr	r2, [r2, #88]	; 0x58
   11428:	0a12      	lsrs	r2, r2, #8
   1142a:	b2d2      	uxtb	r2, r2
   1142c:	71da      	strb	r2, [r3, #7]
    SDO->CANtxBuff->data[3] = SDO->ODF_arg.subIndex;
   1142e:	687b      	ldr	r3, [r7, #4]
   11430:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   11434:	687a      	ldr	r2, [r7, #4]
   11436:	f892 205c 	ldrb.w	r2, [r2, #92]	; 0x5c
   1143a:	721a      	strb	r2, [r3, #8]
   canopen_driver->CO_memcpySwap4(&SDO->CANtxBuff->data[4], &code);
   1143c:	4b0f      	ldr	r3, [pc, #60]	; (1147c <_ZL12CO_SDO_abortP8CO_SDO_tm+0x80>)
   1143e:	681b      	ldr	r3, [r3, #0]
   11440:	1d18      	adds	r0, r3, #4
   11442:	687b      	ldr	r3, [r7, #4]
   11444:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   11448:	3309      	adds	r3, #9
   1144a:	463a      	mov	r2, r7
   1144c:	4619      	mov	r1, r3
   1144e:	4b0c      	ldr	r3, [pc, #48]	; (11480 <_ZL12CO_SDO_abortP8CO_SDO_tm+0x84>)
   11450:	4798      	blx	r3
    SDO->state = CO_SDO_ST_IDLE;
   11452:	687b      	ldr	r3, [r7, #4]
   11454:	2200      	movs	r2, #0
   11456:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
    SDO->CANrxNew = false;
   1145a:	687b      	ldr	r3, [r7, #4]
   1145c:	2200      	movs	r2, #0
   1145e:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
    canopen_driver->CAN_Send(SDO->CANtxBuff);
   11462:	4b06      	ldr	r3, [pc, #24]	; (1147c <_ZL12CO_SDO_abortP8CO_SDO_tm+0x80>)
   11464:	681a      	ldr	r2, [r3, #0]
   11466:	687b      	ldr	r3, [r7, #4]
   11468:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   1146c:	4619      	mov	r1, r3
   1146e:	4610      	mov	r0, r2
   11470:	4b04      	ldr	r3, [pc, #16]	; (11484 <_ZL12CO_SDO_abortP8CO_SDO_tm+0x88>)
   11472:	4798      	blx	r3
}
   11474:	bf00      	nop
   11476:	3708      	adds	r7, #8
   11478:	46bd      	mov	sp, r7
   1147a:	bd80      	pop	{r7, pc}
   1147c:	20001abc 	.word	0x20001abc
   11480:	000108b1 	.word	0x000108b1
   11484:	0000dc55 	.word	0x0000dc55

00011488 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm>:
int8_t CO_SDO_Class::CO_SDO_process(
         bool_t                  NMTisPreOrOperational,
        uint32_t                timeDifference_ms,
        uint32_t                SDOtimeoutTime,
        uint32_t               *timerNext_ms)
{
   11488:	b5b0      	push	{r4, r5, r7, lr}
   1148a:	b092      	sub	sp, #72	; 0x48
   1148c:	af00      	add	r7, sp, #0
   1148e:	60f8      	str	r0, [r7, #12]
   11490:	607a      	str	r2, [r7, #4]
   11492:	603b      	str	r3, [r7, #0]
   11494:	460b      	mov	r3, r1
   11496:	72fb      	strb	r3, [r7, #11]
    CO_SDO_state_t state = CO_SDO_ST_IDLE;
   11498:	2300      	movs	r3, #0
   1149a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    bool_t timeoutSubblockDownolad = false;
   1149e:	2300      	movs	r3, #0
   114a0:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    bool_t sendResponse = false;
   114a4:	2300      	movs	r3, #0
   114a6:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
	
    /* return if idle */
    if((SDO->state == CO_SDO_ST_IDLE) && (!SDO->CANrxNew)){
   114aa:	4ba7      	ldr	r3, [pc, #668]	; (11748 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x2c0>)
   114ac:	681b      	ldr	r3, [r3, #0]
   114ae:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
   114b2:	2b00      	cmp	r3, #0
   114b4:	d108      	bne.n	114c8 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x40>
   114b6:	4ba4      	ldr	r3, [pc, #656]	; (11748 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x2c0>)
   114b8:	681b      	ldr	r3, [r3, #0]
   114ba:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
   114be:	2b00      	cmp	r3, #0
   114c0:	d102      	bne.n	114c8 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x40>
	//	printf("CO_SDO_ST_IDLE\n\r");
        return 0;
   114c2:	2300      	movs	r3, #0
   114c4:	f001 b995 	b.w	127f2 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x136a>
    }

    /* SDO is allowed to work only in operational or pre-operational NMT state */
    if(!NMTisPreOrOperational){
   114c8:	7afb      	ldrb	r3, [r7, #11]
   114ca:	2b00      	cmp	r3, #0
   114cc:	d10c      	bne.n	114e8 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x60>
        SDO->state = CO_SDO_ST_IDLE;
   114ce:	4b9e      	ldr	r3, [pc, #632]	; (11748 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x2c0>)
   114d0:	681b      	ldr	r3, [r3, #0]
   114d2:	2200      	movs	r2, #0
   114d4:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
        SDO->CANrxNew = false;
   114d8:	4b9b      	ldr	r3, [pc, #620]	; (11748 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x2c0>)
   114da:	681b      	ldr	r3, [r3, #0]
   114dc:	2200      	movs	r2, #0
   114de:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
	//	printf("!NMTisPreOrOperational\n\r");
        return 0;
   114e2:	2300      	movs	r3, #0
   114e4:	f001 b985 	b.w	127f2 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x136a>
    }

    /* Is something new to process? */
    if((!SDO->CANtxBuff->bufferFull) && ((SDO->CANrxNew) || (SDO->state == CO_SDO_ST_UPLOAD_BL_SUBBLOCK))){
   114e8:	4b97      	ldr	r3, [pc, #604]	; (11748 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x2c0>)
   114ea:	681b      	ldr	r3, [r3, #0]
   114ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   114f0:	7b5b      	ldrb	r3, [r3, #13]
   114f2:	b2db      	uxtb	r3, r3
   114f4:	2b00      	cmp	r3, #0
   114f6:	d10d      	bne.n	11514 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x8c>
   114f8:	4b93      	ldr	r3, [pc, #588]	; (11748 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x2c0>)
   114fa:	681b      	ldr	r3, [r3, #0]
   114fc:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
   11500:	2b00      	cmp	r3, #0
   11502:	d105      	bne.n	11510 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x88>
   11504:	4b90      	ldr	r3, [pc, #576]	; (11748 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x2c0>)
   11506:	681b      	ldr	r3, [r3, #0]
   11508:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
   1150c:	2b26      	cmp	r3, #38	; 0x26
   1150e:	d101      	bne.n	11514 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x8c>
   11510:	2301      	movs	r3, #1
   11512:	e000      	b.n	11516 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x8e>
   11514:	2300      	movs	r3, #0
   11516:	2b00      	cmp	r3, #0
   11518:	f000 80eb 	beq.w	116f2 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x26a>
        uint8_t CCS = SDO->CANrxData[0] >> 5;   /* Client command specifier */
   1151c:	4b8a      	ldr	r3, [pc, #552]	; (11748 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x2c0>)
   1151e:	681b      	ldr	r3, [r3, #0]
   11520:	781b      	ldrb	r3, [r3, #0]
   11522:	115b      	asrs	r3, r3, #5
   11524:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		//printf("Is something new to process\n\r");
        /* reset timeout */
        if(SDO->state != CO_SDO_ST_UPLOAD_BL_SUBBLOCK)
   11528:	4b87      	ldr	r3, [pc, #540]	; (11748 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x2c0>)
   1152a:	681b      	ldr	r3, [r3, #0]
   1152c:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
   11530:	2b26      	cmp	r3, #38	; 0x26
   11532:	d003      	beq.n	1153c <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xb4>
            SDO->timeoutTimer = 0;
   11534:	4b84      	ldr	r3, [pc, #528]	; (11748 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x2c0>)
   11536:	681b      	ldr	r3, [r3, #0]
   11538:	2200      	movs	r2, #0
   1153a:	66da      	str	r2, [r3, #108]	; 0x6c

        /* clear response buffer */
        SDO->CANtxBuff->data[0] = SDO->CANtxBuff->data[1] = SDO->CANtxBuff->data[2] = SDO->CANtxBuff->data[3] = 0;
   1153c:	4b82      	ldr	r3, [pc, #520]	; (11748 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x2c0>)
   1153e:	681b      	ldr	r3, [r3, #0]
   11540:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
   11544:	4b80      	ldr	r3, [pc, #512]	; (11748 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x2c0>)
   11546:	681b      	ldr	r3, [r3, #0]
   11548:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   1154c:	4a7e      	ldr	r2, [pc, #504]	; (11748 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x2c0>)
   1154e:	6812      	ldr	r2, [r2, #0]
   11550:	f8d2 2084 	ldr.w	r2, [r2, #132]	; 0x84
   11554:	497c      	ldr	r1, [pc, #496]	; (11748 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x2c0>)
   11556:	6809      	ldr	r1, [r1, #0]
   11558:	f8d1 1084 	ldr.w	r1, [r1, #132]	; 0x84
   1155c:	2400      	movs	r4, #0
   1155e:	720c      	strb	r4, [r1, #8]
   11560:	7a09      	ldrb	r1, [r1, #8]
   11562:	71d1      	strb	r1, [r2, #7]
   11564:	79d2      	ldrb	r2, [r2, #7]
   11566:	719a      	strb	r2, [r3, #6]
   11568:	799b      	ldrb	r3, [r3, #6]
   1156a:	7143      	strb	r3, [r0, #5]
        SDO->CANtxBuff->data[4] = SDO->CANtxBuff->data[5] = SDO->CANtxBuff->data[6] = SDO->CANtxBuff->data[7] = 0;
   1156c:	4b76      	ldr	r3, [pc, #472]	; (11748 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x2c0>)
   1156e:	681b      	ldr	r3, [r3, #0]
   11570:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
   11574:	4b74      	ldr	r3, [pc, #464]	; (11748 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x2c0>)
   11576:	681b      	ldr	r3, [r3, #0]
   11578:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   1157c:	4a72      	ldr	r2, [pc, #456]	; (11748 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x2c0>)
   1157e:	6812      	ldr	r2, [r2, #0]
   11580:	f8d2 2084 	ldr.w	r2, [r2, #132]	; 0x84
   11584:	4970      	ldr	r1, [pc, #448]	; (11748 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x2c0>)
   11586:	6809      	ldr	r1, [r1, #0]
   11588:	f8d1 1084 	ldr.w	r1, [r1, #132]	; 0x84
   1158c:	2400      	movs	r4, #0
   1158e:	730c      	strb	r4, [r1, #12]
   11590:	7b09      	ldrb	r1, [r1, #12]
   11592:	72d1      	strb	r1, [r2, #11]
   11594:	7ad2      	ldrb	r2, [r2, #11]
   11596:	729a      	strb	r2, [r3, #10]
   11598:	7a9b      	ldrb	r3, [r3, #10]
   1159a:	7243      	strb	r3, [r0, #9]

        /* Is abort from client? */
        if((SDO->CANrxNew) && (SDO->CANrxData[0] == CCS_ABORT)){
   1159c:	4b6a      	ldr	r3, [pc, #424]	; (11748 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x2c0>)
   1159e:	681b      	ldr	r3, [r3, #0]
   115a0:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
   115a4:	2b00      	cmp	r3, #0
   115a6:	d012      	beq.n	115ce <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x146>
   115a8:	4b67      	ldr	r3, [pc, #412]	; (11748 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x2c0>)
   115aa:	681b      	ldr	r3, [r3, #0]
   115ac:	781b      	ldrb	r3, [r3, #0]
   115ae:	2b80      	cmp	r3, #128	; 0x80
   115b0:	d10d      	bne.n	115ce <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x146>
            SDO->state = CO_SDO_ST_IDLE;
   115b2:	4b65      	ldr	r3, [pc, #404]	; (11748 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x2c0>)
   115b4:	681b      	ldr	r3, [r3, #0]
   115b6:	2200      	movs	r2, #0
   115b8:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
            SDO->CANrxNew = false;
   115bc:	4b62      	ldr	r3, [pc, #392]	; (11748 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x2c0>)
   115be:	681b      	ldr	r3, [r3, #0]
   115c0:	2200      	movs	r2, #0
   115c2:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
            return -1;
   115c6:	f04f 33ff 	mov.w	r3, #4294967295
   115ca:	f001 b912 	b.w	127f2 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x136a>
        }

        /* continue with previous SDO communication or start new */
        if(SDO->state != CO_SDO_ST_IDLE){
   115ce:	4b5e      	ldr	r3, [pc, #376]	; (11748 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x2c0>)
   115d0:	681b      	ldr	r3, [r3, #0]
   115d2:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
   115d6:	2b00      	cmp	r3, #0
   115d8:	d006      	beq.n	115e8 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x160>
            state = SDO->state;
   115da:	4b5b      	ldr	r3, [pc, #364]	; (11748 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x2c0>)
   115dc:	681b      	ldr	r3, [r3, #0]
   115de:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
   115e2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
   115e6:	e084      	b.n	116f2 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x26a>
        else{
            uint32_t abortCode;
            uint32_t index;
			
            /* Is client command specifier valid */
            if((CCS != CCS_DOWNLOAD_INITIATE) && (CCS != CCS_UPLOAD_INITIATE) &&
   115e8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
   115ec:	2b01      	cmp	r3, #1
   115ee:	d015      	beq.n	1161c <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x194>
   115f0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
   115f4:	2b02      	cmp	r3, #2
   115f6:	d011      	beq.n	1161c <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x194>
   115f8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
   115fc:	2b06      	cmp	r3, #6
   115fe:	d00d      	beq.n	1161c <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x194>
                (CCS != CCS_DOWNLOAD_BLOCK) && (CCS != CCS_UPLOAD_BLOCK)){
   11600:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
   11604:	2b05      	cmp	r3, #5
   11606:	d009      	beq.n	1161c <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x194>
                CO_SDO_abort(SDO, CO_SDO_AB_CMD);/* Client command specifier not valid or unknown. */
   11608:	4b4f      	ldr	r3, [pc, #316]	; (11748 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x2c0>)
   1160a:	681b      	ldr	r3, [r3, #0]
   1160c:	494f      	ldr	r1, [pc, #316]	; (1174c <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x2c4>)
   1160e:	4618      	mov	r0, r3
   11610:	4b4f      	ldr	r3, [pc, #316]	; (11750 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x2c8>)
   11612:	4798      	blx	r3
                return -1;
   11614:	f04f 33ff 	mov.w	r3, #4294967295
   11618:	f001 b8eb 	b.w	127f2 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x136a>
            }

            /* init ODF_arg */
            index = SDO->CANrxData[2];
   1161c:	4b4a      	ldr	r3, [pc, #296]	; (11748 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x2c0>)
   1161e:	681b      	ldr	r3, [r3, #0]
   11620:	789b      	ldrb	r3, [r3, #2]
   11622:	633b      	str	r3, [r7, #48]	; 0x30
            index = index << 8 | SDO->CANrxData[1];
   11624:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   11626:	021b      	lsls	r3, r3, #8
   11628:	4a47      	ldr	r2, [pc, #284]	; (11748 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x2c0>)
   1162a:	6812      	ldr	r2, [r2, #0]
   1162c:	7852      	ldrb	r2, [r2, #1]
   1162e:	4313      	orrs	r3, r2
   11630:	633b      	str	r3, [r7, #48]	; 0x30
            abortCode = CO_SDO_initTransfer( index, SDO->CANrxData[3]);
   11632:	4b45      	ldr	r3, [pc, #276]	; (11748 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x2c0>)
   11634:	681b      	ldr	r3, [r3, #0]
   11636:	78db      	ldrb	r3, [r3, #3]
   11638:	461a      	mov	r2, r3
   1163a:	6b39      	ldr	r1, [r7, #48]	; 0x30
   1163c:	68f8      	ldr	r0, [r7, #12]
   1163e:	4b45      	ldr	r3, [pc, #276]	; (11754 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x2cc>)
   11640:	4798      	blx	r3
   11642:	62f8      	str	r0, [r7, #44]	; 0x2c
            if(abortCode != 0U){
   11644:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   11646:	2b00      	cmp	r3, #0
   11648:	d009      	beq.n	1165e <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x1d6>
                CO_SDO_abort(SDO, abortCode);
   1164a:	4b3f      	ldr	r3, [pc, #252]	; (11748 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x2c0>)
   1164c:	681b      	ldr	r3, [r3, #0]
   1164e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
   11650:	4618      	mov	r0, r3
   11652:	4b3f      	ldr	r3, [pc, #252]	; (11750 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x2c8>)
   11654:	4798      	blx	r3
                return -1;
   11656:	f04f 33ff 	mov.w	r3, #4294967295
   1165a:	f001 b8ca 	b.w	127f2 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x136a>
            }

            /* download */
            if((CCS == CCS_DOWNLOAD_INITIATE) || (CCS == CCS_DOWNLOAD_BLOCK)){
   1165e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
   11662:	2b01      	cmp	r3, #1
   11664:	d003      	beq.n	1166e <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x1e6>
   11666:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
   1166a:	2b06      	cmp	r3, #6
   1166c:	d11c      	bne.n	116a8 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x220>
                if((SDO->ODF_arg.attribute & CO_ODA_WRITEABLE) == 0U){
   1166e:	4b36      	ldr	r3, [pc, #216]	; (11748 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x2c0>)
   11670:	681b      	ldr	r3, [r3, #0]
   11672:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   11674:	f003 0308 	and.w	r3, r3, #8
   11678:	2b00      	cmp	r3, #0
   1167a:	d109      	bne.n	11690 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x208>
                    CO_SDO_abort(SDO, CO_SDO_AB_READONLY); /* attempt to write a read-only object */
   1167c:	4b32      	ldr	r3, [pc, #200]	; (11748 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x2c0>)
   1167e:	681b      	ldr	r3, [r3, #0]
   11680:	4935      	ldr	r1, [pc, #212]	; (11758 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x2d0>)
   11682:	4618      	mov	r0, r3
   11684:	4b32      	ldr	r3, [pc, #200]	; (11750 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x2c8>)
   11686:	4798      	blx	r3
                    return -1;
   11688:	f04f 33ff 	mov.w	r3, #4294967295
   1168c:	f001 b8b1 	b.w	127f2 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x136a>
                }

                /* set state machine to normal or block download */
                if(CCS == CCS_DOWNLOAD_INITIATE){
   11690:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
   11694:	2b01      	cmp	r3, #1
   11696:	d103      	bne.n	116a0 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x218>
                    state = CO_SDO_ST_DOWNLOAD_INITIATE;
   11698:	2311      	movs	r3, #17
   1169a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
                if(CCS == CCS_DOWNLOAD_INITIATE){
   1169e:	e028      	b.n	116f2 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x26a>
                }
                else{
                    state = CO_SDO_ST_DOWNLOAD_BL_INITIATE;
   116a0:	2314      	movs	r3, #20
   116a2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
                if(CCS == CCS_DOWNLOAD_INITIATE){
   116a6:	e024      	b.n	116f2 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x26a>
                }
            }

            /* upload */
            else{
                abortCode = CO_SDO_readOD( CO_SDO_BUFFER_SIZE);
   116a8:	2120      	movs	r1, #32
   116aa:	68f8      	ldr	r0, [r7, #12]
   116ac:	4b2b      	ldr	r3, [pc, #172]	; (1175c <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x2d4>)
   116ae:	4798      	blx	r3
   116b0:	62f8      	str	r0, [r7, #44]	; 0x2c
                if(abortCode != 0U){
   116b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   116b4:	2b00      	cmp	r3, #0
   116b6:	d009      	beq.n	116cc <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x244>
                    CO_SDO_abort(SDO, abortCode);
   116b8:	4b23      	ldr	r3, [pc, #140]	; (11748 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x2c0>)
   116ba:	681b      	ldr	r3, [r3, #0]
   116bc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
   116be:	4618      	mov	r0, r3
   116c0:	4b23      	ldr	r3, [pc, #140]	; (11750 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x2c8>)
   116c2:	4798      	blx	r3
                    return -1;
   116c4:	f04f 33ff 	mov.w	r3, #4294967295
   116c8:	f001 b893 	b.w	127f2 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x136a>
                }

                /* if data size is large enough set state machine to block upload, otherwise set to normal transfer */
                if((CCS == CCS_UPLOAD_BLOCK) && (SDO->ODF_arg.dataLength > SDO->CANrxData[5])){
   116cc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
   116d0:	2b05      	cmp	r3, #5
   116d2:	d10b      	bne.n	116ec <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x264>
   116d4:	4b1c      	ldr	r3, [pc, #112]	; (11748 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x2c0>)
   116d6:	681b      	ldr	r3, [r3, #0]
   116d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   116da:	4a1b      	ldr	r2, [pc, #108]	; (11748 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x2c0>)
   116dc:	6812      	ldr	r2, [r2, #0]
   116de:	7952      	ldrb	r2, [r2, #5]
   116e0:	4293      	cmp	r3, r2
   116e2:	d903      	bls.n	116ec <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x264>
                    state = CO_SDO_ST_UPLOAD_BL_INITIATE;
   116e4:	2324      	movs	r3, #36	; 0x24
   116e6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
   116ea:	e002      	b.n	116f2 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x26a>
                }
                else{
                    state = CO_SDO_ST_UPLOAD_INITIATE;
   116ec:	2321      	movs	r3, #33	; 0x21
   116ee:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            }
        }
    }

    /* verify SDO timeout */
    if(SDO->timeoutTimer < SDOtimeoutTime){
   116f2:	4b15      	ldr	r3, [pc, #84]	; (11748 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x2c0>)
   116f4:	681b      	ldr	r3, [r3, #0]
   116f6:	6eda      	ldr	r2, [r3, #108]	; 0x6c
   116f8:	683b      	ldr	r3, [r7, #0]
   116fa:	429a      	cmp	r2, r3
   116fc:	d207      	bcs.n	1170e <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x286>
        SDO->timeoutTimer += timeDifference_ms;
   116fe:	4b12      	ldr	r3, [pc, #72]	; (11748 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x2c0>)
   11700:	681b      	ldr	r3, [r3, #0]
   11702:	4a11      	ldr	r2, [pc, #68]	; (11748 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x2c0>)
   11704:	6812      	ldr	r2, [r2, #0]
   11706:	6ed1      	ldr	r1, [r2, #108]	; 0x6c
   11708:	687a      	ldr	r2, [r7, #4]
   1170a:	440a      	add	r2, r1
   1170c:	66da      	str	r2, [r3, #108]	; 0x6c
    }
    if(SDO->timeoutTimer >= SDOtimeoutTime){
   1170e:	4b0e      	ldr	r3, [pc, #56]	; (11748 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x2c0>)
   11710:	681b      	ldr	r3, [r3, #0]
   11712:	6eda      	ldr	r2, [r3, #108]	; 0x6c
   11714:	683b      	ldr	r3, [r7, #0]
   11716:	429a      	cmp	r2, r3
   11718:	d336      	bcc.n	11788 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x300>
        if((SDO->state == CO_SDO_ST_DOWNLOAD_BL_SUBBLOCK) && (SDO->sequence != 0) && (!SDO->CANtxBuff->bufferFull)){
   1171a:	4b0b      	ldr	r3, [pc, #44]	; (11748 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x2c0>)
   1171c:	681b      	ldr	r3, [r3, #0]
   1171e:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
   11722:	2b15      	cmp	r3, #21
   11724:	d11c      	bne.n	11760 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x2d8>
   11726:	4b08      	ldr	r3, [pc, #32]	; (11748 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x2c0>)
   11728:	681b      	ldr	r3, [r3, #0]
   1172a:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
   1172e:	2b00      	cmp	r3, #0
   11730:	d016      	beq.n	11760 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x2d8>
   11732:	4b05      	ldr	r3, [pc, #20]	; (11748 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x2c0>)
   11734:	681b      	ldr	r3, [r3, #0]
   11736:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   1173a:	7b5b      	ldrb	r3, [r3, #13]
   1173c:	b2db      	uxtb	r3, r3
   1173e:	2b00      	cmp	r3, #0
   11740:	d10e      	bne.n	11760 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x2d8>
   11742:	2301      	movs	r3, #1
   11744:	e00d      	b.n	11762 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x2da>
   11746:	bf00      	nop
   11748:	20001afc 	.word	0x20001afc
   1174c:	05040001 	.word	0x05040001
   11750:	000113fd 	.word	0x000113fd
   11754:	0001100d 	.word	0x0001100d
   11758:	06010002 	.word	0x06010002
   1175c:	000111a1 	.word	0x000111a1
   11760:	2300      	movs	r3, #0
   11762:	2b00      	cmp	r3, #0
   11764:	d006      	beq.n	11774 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x2ec>
            timeoutSubblockDownolad = true;
   11766:	2301      	movs	r3, #1
   11768:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
            state = CO_SDO_ST_DOWNLOAD_BL_SUB_RESP;
   1176c:	2316      	movs	r3, #22
   1176e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
   11772:	e009      	b.n	11788 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x300>
        }
        else{
            CO_SDO_abort(SDO, CO_SDO_AB_TIMEOUT); /* SDO protocol timed out */
   11774:	4ba3      	ldr	r3, [pc, #652]	; (11a04 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x57c>)
   11776:	681b      	ldr	r3, [r3, #0]
   11778:	49a3      	ldr	r1, [pc, #652]	; (11a08 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x580>)
   1177a:	4618      	mov	r0, r3
   1177c:	4ba3      	ldr	r3, [pc, #652]	; (11a0c <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x584>)
   1177e:	4798      	blx	r3
            return -1;
   11780:	f04f 33ff 	mov.w	r3, #4294967295
   11784:	f001 b835 	b.w	127f2 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x136a>
        }
    }

    /* return immediately if still idle */
    if(state == CO_SDO_ST_IDLE){
   11788:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
   1178c:	2b00      	cmp	r3, #0
   1178e:	d102      	bne.n	11796 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x30e>
        return 0;
   11790:	2300      	movs	r3, #0
   11792:	f001 b82e 	b.w	127f2 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x136a>
    }

    /* state machine (buffer is freed (SDO->CANrxNew = 0;) at the end) */
    switch(state){
   11796:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
   1179a:	3b11      	subs	r3, #17
   1179c:	2b16      	cmp	r3, #22
   1179e:	f201 8002 	bhi.w	127a6 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x131e>
   117a2:	a201      	add	r2, pc, #4	; (adr r2, 117a8 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x320>)
   117a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   117a8:	00011805 	.word	0x00011805
   117ac:	00011967 	.word	0x00011967
   117b0:	000127a7 	.word	0x000127a7
   117b4:	00011b2b 	.word	0x00011b2b
   117b8:	000127b9 	.word	0x000127b9
   117bc:	00011c41 	.word	0x00011c41
   117c0:	00011db9 	.word	0x00011db9
   117c4:	000127a7 	.word	0x000127a7
   117c8:	000127a7 	.word	0x000127a7
   117cc:	000127a7 	.word	0x000127a7
   117d0:	000127a7 	.word	0x000127a7
   117d4:	000127a7 	.word	0x000127a7
   117d8:	000127a7 	.word	0x000127a7
   117dc:	000127a7 	.word	0x000127a7
   117e0:	000127a7 	.word	0x000127a7
   117e4:	000127a7 	.word	0x000127a7
   117e8:	00011ed1 	.word	0x00011ed1
   117ec:	00011fdd 	.word	0x00011fdd
   117f0:	000127a7 	.word	0x000127a7
   117f4:	00012215 	.word	0x00012215
   117f8:	00012361 	.word	0x00012361
   117fc:	000123c9 	.word	0x000123c9
   11800:	0001277b 	.word	0x0001277b
        uint32_t len, i;
        bool_t lastSegmentInSubblock;

        case CO_SDO_ST_DOWNLOAD_INITIATE:{
            /* default response */
            SDO->CANtxBuff->data[0] = 0x60;
   11804:	4b7f      	ldr	r3, [pc, #508]	; (11a04 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x57c>)
   11806:	681b      	ldr	r3, [r3, #0]
   11808:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   1180c:	2260      	movs	r2, #96	; 0x60
   1180e:	715a      	strb	r2, [r3, #5]
            SDO->CANtxBuff->data[1] = SDO->CANrxData[1];
   11810:	4b7c      	ldr	r3, [pc, #496]	; (11a04 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x57c>)
   11812:	681b      	ldr	r3, [r3, #0]
   11814:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   11818:	4a7a      	ldr	r2, [pc, #488]	; (11a04 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x57c>)
   1181a:	6812      	ldr	r2, [r2, #0]
   1181c:	7852      	ldrb	r2, [r2, #1]
   1181e:	719a      	strb	r2, [r3, #6]
            SDO->CANtxBuff->data[2] = SDO->CANrxData[2];
   11820:	4b78      	ldr	r3, [pc, #480]	; (11a04 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x57c>)
   11822:	681b      	ldr	r3, [r3, #0]
   11824:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   11828:	4a76      	ldr	r2, [pc, #472]	; (11a04 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x57c>)
   1182a:	6812      	ldr	r2, [r2, #0]
   1182c:	7892      	ldrb	r2, [r2, #2]
   1182e:	71da      	strb	r2, [r3, #7]
            SDO->CANtxBuff->data[3] = SDO->CANrxData[3];
   11830:	4b74      	ldr	r3, [pc, #464]	; (11a04 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x57c>)
   11832:	681b      	ldr	r3, [r3, #0]
   11834:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   11838:	4a72      	ldr	r2, [pc, #456]	; (11a04 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x57c>)
   1183a:	6812      	ldr	r2, [r2, #0]
   1183c:	78d2      	ldrb	r2, [r2, #3]
   1183e:	721a      	strb	r2, [r3, #8]

            /* Expedited transfer */
            if((SDO->CANrxData[0] & 0x02U) != 0U){
   11840:	4b70      	ldr	r3, [pc, #448]	; (11a04 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x57c>)
   11842:	681b      	ldr	r3, [r3, #0]
   11844:	781b      	ldrb	r3, [r3, #0]
   11846:	f003 0302 	and.w	r3, r3, #2
   1184a:	2b00      	cmp	r3, #0
   1184c:	d04f      	beq.n	118ee <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x466>
                /* is size indicated? Get message length */
                if((SDO->CANrxData[0] & 0x01U) != 0U){
   1184e:	4b6d      	ldr	r3, [pc, #436]	; (11a04 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x57c>)
   11850:	681b      	ldr	r3, [r3, #0]
   11852:	781b      	ldrb	r3, [r3, #0]
   11854:	f003 0301 	and.w	r3, r3, #1
   11858:	2b00      	cmp	r3, #0
   1185a:	d009      	beq.n	11870 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x3e8>
                    len = 4U - ((SDO->CANrxData[0] >> 2U) & 0x03U);
   1185c:	4b69      	ldr	r3, [pc, #420]	; (11a04 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x57c>)
   1185e:	681b      	ldr	r3, [r3, #0]
   11860:	781b      	ldrb	r3, [r3, #0]
   11862:	109b      	asrs	r3, r3, #2
   11864:	f003 0303 	and.w	r3, r3, #3
   11868:	f1c3 0304 	rsb	r3, r3, #4
   1186c:	643b      	str	r3, [r7, #64]	; 0x40
   1186e:	e003      	b.n	11878 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x3f0>
                }
                else{
                    len = SDO->ODF_arg.dataLength;
   11870:	4b64      	ldr	r3, [pc, #400]	; (11a04 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x57c>)
   11872:	681b      	ldr	r3, [r3, #0]
   11874:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   11876:	643b      	str	r3, [r7, #64]	; 0x40
                }

                /* copy data to SDO buffer */
                SDO->ODF_arg.data[0] = SDO->CANrxData[4];
   11878:	4b62      	ldr	r3, [pc, #392]	; (11a04 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x57c>)
   1187a:	681b      	ldr	r3, [r3, #0]
   1187c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1187e:	4a61      	ldr	r2, [pc, #388]	; (11a04 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x57c>)
   11880:	6812      	ldr	r2, [r2, #0]
   11882:	7912      	ldrb	r2, [r2, #4]
   11884:	701a      	strb	r2, [r3, #0]
                SDO->ODF_arg.data[1] = SDO->CANrxData[5];
   11886:	4b5f      	ldr	r3, [pc, #380]	; (11a04 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x57c>)
   11888:	681b      	ldr	r3, [r3, #0]
   1188a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1188c:	3301      	adds	r3, #1
   1188e:	4a5d      	ldr	r2, [pc, #372]	; (11a04 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x57c>)
   11890:	6812      	ldr	r2, [r2, #0]
   11892:	7952      	ldrb	r2, [r2, #5]
   11894:	701a      	strb	r2, [r3, #0]
                SDO->ODF_arg.data[2] = SDO->CANrxData[6];
   11896:	4b5b      	ldr	r3, [pc, #364]	; (11a04 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x57c>)
   11898:	681b      	ldr	r3, [r3, #0]
   1189a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1189c:	3302      	adds	r3, #2
   1189e:	4a59      	ldr	r2, [pc, #356]	; (11a04 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x57c>)
   118a0:	6812      	ldr	r2, [r2, #0]
   118a2:	7992      	ldrb	r2, [r2, #6]
   118a4:	701a      	strb	r2, [r3, #0]
                SDO->ODF_arg.data[3] = SDO->CANrxData[7];
   118a6:	4b57      	ldr	r3, [pc, #348]	; (11a04 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x57c>)
   118a8:	681b      	ldr	r3, [r3, #0]
   118aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   118ac:	3303      	adds	r3, #3
   118ae:	4a55      	ldr	r2, [pc, #340]	; (11a04 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x57c>)
   118b0:	6812      	ldr	r2, [r2, #0]
   118b2:	79d2      	ldrb	r2, [r2, #7]
   118b4:	701a      	strb	r2, [r3, #0]

                /* write data to the Object dictionary */
                abortCode = CO_SDO_writeOD( len);
   118b6:	6c39      	ldr	r1, [r7, #64]	; 0x40
   118b8:	68f8      	ldr	r0, [r7, #12]
   118ba:	4b55      	ldr	r3, [pc, #340]	; (11a10 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x588>)
   118bc:	4798      	blx	r3
   118be:	62b8      	str	r0, [r7, #40]	; 0x28
                if(abortCode != 0U){
   118c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
   118c2:	2b00      	cmp	r3, #0
   118c4:	d009      	beq.n	118da <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x452>
                    CO_SDO_abort(SDO, abortCode);
   118c6:	4b4f      	ldr	r3, [pc, #316]	; (11a04 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x57c>)
   118c8:	681b      	ldr	r3, [r3, #0]
   118ca:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   118cc:	4618      	mov	r0, r3
   118ce:	4b4f      	ldr	r3, [pc, #316]	; (11a0c <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x584>)
   118d0:	4798      	blx	r3
                    return -1;
   118d2:	f04f 33ff 	mov.w	r3, #4294967295
   118d6:	f000 bf8c 	b.w	127f2 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x136a>
                }

                /* finish the communication */
                SDO->state = CO_SDO_ST_IDLE;
   118da:	4b4a      	ldr	r3, [pc, #296]	; (11a04 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x57c>)
   118dc:	681b      	ldr	r3, [r3, #0]
   118de:	2200      	movs	r2, #0
   118e0:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
                sendResponse = true;
   118e4:	2301      	movs	r3, #1
   118e6:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
                SDO->bufferOffset = 0;
                SDO->sequence = 0;
                SDO->state = CO_SDO_ST_DOWNLOAD_SEGMENTED;
                sendResponse = true;
            }
            break;
   118ea:	f000 bf66 	b.w	127ba <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x1332>
                if((SDO->CANrxData[0]&0x01) != 0){
   118ee:	4b45      	ldr	r3, [pc, #276]	; (11a04 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x57c>)
   118f0:	681b      	ldr	r3, [r3, #0]
   118f2:	781b      	ldrb	r3, [r3, #0]
   118f4:	f003 0301 	and.w	r3, r3, #1
   118f8:	2b00      	cmp	r3, #0
   118fa:	d021      	beq.n	11940 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x4b8>
                    CO_memcpySwap4(&lenRx, &SDO->CANrxData[4]);
   118fc:	4b41      	ldr	r3, [pc, #260]	; (11a04 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x57c>)
   118fe:	681b      	ldr	r3, [r3, #0]
   11900:	1d1a      	adds	r2, r3, #4
   11902:	f107 0320 	add.w	r3, r7, #32
   11906:	4619      	mov	r1, r3
   11908:	68f8      	ldr	r0, [r7, #12]
   1190a:	4b42      	ldr	r3, [pc, #264]	; (11a14 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x58c>)
   1190c:	4798      	blx	r3
                    SDO->ODF_arg.dataLengthTotal = lenRx;
   1190e:	4b3d      	ldr	r3, [pc, #244]	; (11a04 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x57c>)
   11910:	681b      	ldr	r3, [r3, #0]
   11912:	6a3a      	ldr	r2, [r7, #32]
   11914:	661a      	str	r2, [r3, #96]	; 0x60
                    if((lenRx != SDO->ODF_arg.dataLength) && (SDO->ODF_arg.ODdataStorage != 0)){
   11916:	4b3b      	ldr	r3, [pc, #236]	; (11a04 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x57c>)
   11918:	681b      	ldr	r3, [r3, #0]
   1191a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
   1191c:	6a3b      	ldr	r3, [r7, #32]
   1191e:	429a      	cmp	r2, r3
   11920:	d00e      	beq.n	11940 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x4b8>
   11922:	4b38      	ldr	r3, [pc, #224]	; (11a04 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x57c>)
   11924:	681b      	ldr	r3, [r3, #0]
   11926:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   11928:	2b00      	cmp	r3, #0
   1192a:	d009      	beq.n	11940 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x4b8>
                        CO_SDO_abort(SDO, CO_SDO_AB_TYPE_MISMATCH);  /* Length of service parameter does not match */
   1192c:	4b35      	ldr	r3, [pc, #212]	; (11a04 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x57c>)
   1192e:	681b      	ldr	r3, [r3, #0]
   11930:	4939      	ldr	r1, [pc, #228]	; (11a18 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x590>)
   11932:	4618      	mov	r0, r3
   11934:	4b35      	ldr	r3, [pc, #212]	; (11a0c <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x584>)
   11936:	4798      	blx	r3
                        return -1;
   11938:	f04f 33ff 	mov.w	r3, #4294967295
   1193c:	f000 bf59 	b.w	127f2 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x136a>
                SDO->bufferOffset = 0;
   11940:	4b30      	ldr	r3, [pc, #192]	; (11a04 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x57c>)
   11942:	681b      	ldr	r3, [r3, #0]
   11944:	2200      	movs	r2, #0
   11946:	639a      	str	r2, [r3, #56]	; 0x38
                SDO->sequence = 0;
   11948:	4b2e      	ldr	r3, [pc, #184]	; (11a04 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x57c>)
   1194a:	681b      	ldr	r3, [r3, #0]
   1194c:	2200      	movs	r2, #0
   1194e:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
                SDO->state = CO_SDO_ST_DOWNLOAD_SEGMENTED;
   11952:	4b2c      	ldr	r3, [pc, #176]	; (11a04 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x57c>)
   11954:	681b      	ldr	r3, [r3, #0]
   11956:	2212      	movs	r2, #18
   11958:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
                sendResponse = true;
   1195c:	2301      	movs	r3, #1
   1195e:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
            break;
   11962:	f000 bf2a 	b.w	127ba <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x1332>
        }

        case CO_SDO_ST_DOWNLOAD_SEGMENTED:{
            /* verify client command specifier */
            if((SDO->CANrxData[0]&0xE0) != 0x00U){
   11966:	4b27      	ldr	r3, [pc, #156]	; (11a04 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x57c>)
   11968:	681b      	ldr	r3, [r3, #0]
   1196a:	781b      	ldrb	r3, [r3, #0]
   1196c:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
   11970:	2b00      	cmp	r3, #0
   11972:	d009      	beq.n	11988 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x500>
                CO_SDO_abort(SDO, CO_SDO_AB_CMD);/* Client command specifier not valid or unknown. */
   11974:	4b23      	ldr	r3, [pc, #140]	; (11a04 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x57c>)
   11976:	681b      	ldr	r3, [r3, #0]
   11978:	4928      	ldr	r1, [pc, #160]	; (11a1c <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x594>)
   1197a:	4618      	mov	r0, r3
   1197c:	4b23      	ldr	r3, [pc, #140]	; (11a0c <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x584>)
   1197e:	4798      	blx	r3
                return -1;
   11980:	f04f 33ff 	mov.w	r3, #4294967295
   11984:	f000 bf35 	b.w	127f2 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x136a>
            }

            /* verify toggle bit */
            i = (SDO->CANrxData[0]&0x10U) ? 1U : 0U;
   11988:	4b1e      	ldr	r3, [pc, #120]	; (11a04 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x57c>)
   1198a:	681b      	ldr	r3, [r3, #0]
   1198c:	781b      	ldrb	r3, [r3, #0]
   1198e:	f003 0310 	and.w	r3, r3, #16
   11992:	2b00      	cmp	r3, #0
   11994:	d001      	beq.n	1199a <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x512>
   11996:	2301      	movs	r3, #1
   11998:	e000      	b.n	1199c <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x514>
   1199a:	2300      	movs	r3, #0
   1199c:	63fb      	str	r3, [r7, #60]	; 0x3c
            if(i != SDO->sequence){
   1199e:	4b19      	ldr	r3, [pc, #100]	; (11a04 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x57c>)
   119a0:	681b      	ldr	r3, [r3, #0]
   119a2:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
   119a6:	461a      	mov	r2, r3
   119a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   119aa:	429a      	cmp	r2, r3
   119ac:	d009      	beq.n	119c2 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x53a>
                CO_SDO_abort(SDO, CO_SDO_AB_TOGGLE_BIT);/* toggle bit not alternated */
   119ae:	4b15      	ldr	r3, [pc, #84]	; (11a04 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x57c>)
   119b0:	681b      	ldr	r3, [r3, #0]
   119b2:	491b      	ldr	r1, [pc, #108]	; (11a20 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x598>)
   119b4:	4618      	mov	r0, r3
   119b6:	4b15      	ldr	r3, [pc, #84]	; (11a0c <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x584>)
   119b8:	4798      	blx	r3
                return -1;
   119ba:	f04f 33ff 	mov.w	r3, #4294967295
   119be:	f000 bf18 	b.w	127f2 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x136a>
            }

            /* get size of data in message */
            len = 7U - ((SDO->CANrxData[0] >> 1U) & 0x07U);
   119c2:	4b10      	ldr	r3, [pc, #64]	; (11a04 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x57c>)
   119c4:	681b      	ldr	r3, [r3, #0]
   119c6:	781b      	ldrb	r3, [r3, #0]
   119c8:	105b      	asrs	r3, r3, #1
   119ca:	43db      	mvns	r3, r3
   119cc:	f003 0307 	and.w	r3, r3, #7
   119d0:	643b      	str	r3, [r7, #64]	; 0x40

            /* verify length. Domain data type enables length larger than SDO buffer size */
            if((SDO->bufferOffset + len) > SDO->ODF_arg.dataLength){
   119d2:	4b0c      	ldr	r3, [pc, #48]	; (11a04 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x57c>)
   119d4:	681b      	ldr	r3, [r3, #0]
   119d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   119d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   119da:	441a      	add	r2, r3
   119dc:	4b09      	ldr	r3, [pc, #36]	; (11a04 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x57c>)
   119de:	681b      	ldr	r3, [r3, #0]
   119e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   119e2:	429a      	cmp	r2, r3
   119e4:	d942      	bls.n	11a6c <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x5e4>
                if(SDO->ODF_arg.ODdataStorage != 0){
   119e6:	4b07      	ldr	r3, [pc, #28]	; (11a04 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x57c>)
   119e8:	681b      	ldr	r3, [r3, #0]
   119ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   119ec:	2b00      	cmp	r3, #0
   119ee:	d01b      	beq.n	11a28 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x5a0>
                    CO_SDO_abort(SDO, CO_SDO_AB_DATA_LONG);  /* Length of service parameter too high */
   119f0:	4b04      	ldr	r3, [pc, #16]	; (11a04 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x57c>)
   119f2:	681b      	ldr	r3, [r3, #0]
   119f4:	490b      	ldr	r1, [pc, #44]	; (11a24 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x59c>)
   119f6:	4618      	mov	r0, r3
   119f8:	4b04      	ldr	r3, [pc, #16]	; (11a0c <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x584>)
   119fa:	4798      	blx	r3
                    return -1;
   119fc:	f04f 33ff 	mov.w	r3, #4294967295
   11a00:	f000 bef7 	b.w	127f2 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x136a>
   11a04:	20001afc 	.word	0x20001afc
   11a08:	05040000 	.word	0x05040000
   11a0c:	000113fd 	.word	0x000113fd
   11a10:	000112c5 	.word	0x000112c5
   11a14:	000108b1 	.word	0x000108b1
   11a18:	06070010 	.word	0x06070010
   11a1c:	05040001 	.word	0x05040001
   11a20:	05030000 	.word	0x05030000
   11a24:	06070012 	.word	0x06070012
                }
                else{
                    /* empty buffer in domain data type */
                    SDO->ODF_arg.lastSegment = false;
   11a28:	4b8b      	ldr	r3, [pc, #556]	; (11c58 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x7d0>)
   11a2a:	681b      	ldr	r3, [r3, #0]
   11a2c:	2200      	movs	r2, #0
   11a2e:	f883 205f 	strb.w	r2, [r3, #95]	; 0x5f
                    abortCode = CO_SDO_writeOD( SDO->bufferOffset);
   11a32:	4b89      	ldr	r3, [pc, #548]	; (11c58 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x7d0>)
   11a34:	681b      	ldr	r3, [r3, #0]
   11a36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   11a38:	4619      	mov	r1, r3
   11a3a:	68f8      	ldr	r0, [r7, #12]
   11a3c:	4b87      	ldr	r3, [pc, #540]	; (11c5c <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x7d4>)
   11a3e:	4798      	blx	r3
   11a40:	62b8      	str	r0, [r7, #40]	; 0x28
                    if(abortCode != 0U){
   11a42:	6abb      	ldr	r3, [r7, #40]	; 0x28
   11a44:	2b00      	cmp	r3, #0
   11a46:	d009      	beq.n	11a5c <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x5d4>
                        CO_SDO_abort(SDO, abortCode);
   11a48:	4b83      	ldr	r3, [pc, #524]	; (11c58 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x7d0>)
   11a4a:	681b      	ldr	r3, [r3, #0]
   11a4c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   11a4e:	4618      	mov	r0, r3
   11a50:	4b83      	ldr	r3, [pc, #524]	; (11c60 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x7d8>)
   11a52:	4798      	blx	r3
                        return -1;
   11a54:	f04f 33ff 	mov.w	r3, #4294967295
   11a58:	f000 becb 	b.w	127f2 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x136a>
                    }

                    SDO->ODF_arg.dataLength = CO_SDO_BUFFER_SIZE;
   11a5c:	4b7e      	ldr	r3, [pc, #504]	; (11c58 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x7d0>)
   11a5e:	681b      	ldr	r3, [r3, #0]
   11a60:	2220      	movs	r2, #32
   11a62:	64da      	str	r2, [r3, #76]	; 0x4c
                    SDO->bufferOffset = 0;
   11a64:	4b7c      	ldr	r3, [pc, #496]	; (11c58 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x7d0>)
   11a66:	681b      	ldr	r3, [r3, #0]
   11a68:	2200      	movs	r2, #0
   11a6a:	639a      	str	r2, [r3, #56]	; 0x38
                }
            }

            /* copy data to buffer */
            for(i=0U; i<len; i++)
   11a6c:	2300      	movs	r3, #0
   11a6e:	63fb      	str	r3, [r7, #60]	; 0x3c
   11a70:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   11a72:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   11a74:	429a      	cmp	r2, r3
   11a76:	d212      	bcs.n	11a9e <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x616>
                SDO->ODF_arg.data[SDO->bufferOffset++] = SDO->CANrxData[i+1];
   11a78:	4b77      	ldr	r3, [pc, #476]	; (11c58 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x7d0>)
   11a7a:	681b      	ldr	r3, [r3, #0]
   11a7c:	6c59      	ldr	r1, [r3, #68]	; 0x44
   11a7e:	4b76      	ldr	r3, [pc, #472]	; (11c58 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x7d0>)
   11a80:	681a      	ldr	r2, [r3, #0]
   11a82:	6b93      	ldr	r3, [r2, #56]	; 0x38
   11a84:	1c58      	adds	r0, r3, #1
   11a86:	6390      	str	r0, [r2, #56]	; 0x38
   11a88:	440b      	add	r3, r1
   11a8a:	4a73      	ldr	r2, [pc, #460]	; (11c58 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x7d0>)
   11a8c:	6811      	ldr	r1, [r2, #0]
   11a8e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   11a90:	3201      	adds	r2, #1
   11a92:	5c8a      	ldrb	r2, [r1, r2]
   11a94:	701a      	strb	r2, [r3, #0]
            for(i=0U; i<len; i++)
   11a96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   11a98:	3301      	adds	r3, #1
   11a9a:	63fb      	str	r3, [r7, #60]	; 0x3c
   11a9c:	e7e8      	b.n	11a70 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x5e8>

            /* If no more segments to be downloaded, write data to the Object dictionary */
            if((SDO->CANrxData[0] & 0x01U) != 0U){
   11a9e:	4b6e      	ldr	r3, [pc, #440]	; (11c58 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x7d0>)
   11aa0:	681b      	ldr	r3, [r3, #0]
   11aa2:	781b      	ldrb	r3, [r3, #0]
   11aa4:	f003 0301 	and.w	r3, r3, #1
   11aa8:	2b00      	cmp	r3, #0
   11aaa:	d01e      	beq.n	11aea <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x662>
                SDO->ODF_arg.lastSegment = true;
   11aac:	4b6a      	ldr	r3, [pc, #424]	; (11c58 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x7d0>)
   11aae:	681b      	ldr	r3, [r3, #0]
   11ab0:	2201      	movs	r2, #1
   11ab2:	f883 205f 	strb.w	r2, [r3, #95]	; 0x5f
                abortCode = CO_SDO_writeOD( SDO->bufferOffset);
   11ab6:	4b68      	ldr	r3, [pc, #416]	; (11c58 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x7d0>)
   11ab8:	681b      	ldr	r3, [r3, #0]
   11aba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   11abc:	4619      	mov	r1, r3
   11abe:	68f8      	ldr	r0, [r7, #12]
   11ac0:	4b66      	ldr	r3, [pc, #408]	; (11c5c <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x7d4>)
   11ac2:	4798      	blx	r3
   11ac4:	62b8      	str	r0, [r7, #40]	; 0x28
                if(abortCode != 0U){
   11ac6:	6abb      	ldr	r3, [r7, #40]	; 0x28
   11ac8:	2b00      	cmp	r3, #0
   11aca:	d009      	beq.n	11ae0 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x658>
                    CO_SDO_abort(SDO, abortCode);
   11acc:	4b62      	ldr	r3, [pc, #392]	; (11c58 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x7d0>)
   11ace:	681b      	ldr	r3, [r3, #0]
   11ad0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   11ad2:	4618      	mov	r0, r3
   11ad4:	4b62      	ldr	r3, [pc, #392]	; (11c60 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x7d8>)
   11ad6:	4798      	blx	r3
                    return -1;
   11ad8:	f04f 33ff 	mov.w	r3, #4294967295
   11adc:	f000 be89 	b.w	127f2 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x136a>
                }

                /* finish */
                SDO->state = CO_SDO_ST_IDLE;
   11ae0:	4b5d      	ldr	r3, [pc, #372]	; (11c58 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x7d0>)
   11ae2:	681b      	ldr	r3, [r3, #0]
   11ae4:	2200      	movs	r2, #0
   11ae6:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
            }

            /* download segment response and alternate toggle bit */
            SDO->CANtxBuff->data[0] = 0x20 | (SDO->sequence ? 0x10 : 0x00);
   11aea:	4b5b      	ldr	r3, [pc, #364]	; (11c58 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x7d0>)
   11aec:	681b      	ldr	r3, [r3, #0]
   11aee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   11af2:	4a59      	ldr	r2, [pc, #356]	; (11c58 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x7d0>)
   11af4:	6812      	ldr	r2, [r2, #0]
   11af6:	f892 206a 	ldrb.w	r2, [r2, #106]	; 0x6a
   11afa:	2a00      	cmp	r2, #0
   11afc:	d001      	beq.n	11b02 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x67a>
   11afe:	2230      	movs	r2, #48	; 0x30
   11b00:	e000      	b.n	11b04 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x67c>
   11b02:	2220      	movs	r2, #32
   11b04:	715a      	strb	r2, [r3, #5]
            SDO->sequence = (SDO->sequence) ? 0 : 1;
   11b06:	4b54      	ldr	r3, [pc, #336]	; (11c58 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x7d0>)
   11b08:	681b      	ldr	r3, [r3, #0]
   11b0a:	4a53      	ldr	r2, [pc, #332]	; (11c58 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x7d0>)
   11b0c:	6812      	ldr	r2, [r2, #0]
   11b0e:	f892 206a 	ldrb.w	r2, [r2, #106]	; 0x6a
   11b12:	2a00      	cmp	r2, #0
   11b14:	bf0c      	ite	eq
   11b16:	2201      	moveq	r2, #1
   11b18:	2200      	movne	r2, #0
   11b1a:	b2d2      	uxtb	r2, r2
   11b1c:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
            sendResponse = true;
   11b20:	2301      	movs	r3, #1
   11b22:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
            break;
   11b26:	f000 be48 	b.w	127ba <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x1332>
        }

        case CO_SDO_ST_DOWNLOAD_BL_INITIATE:{
            /* verify client command specifier and subcommand */
            if((SDO->CANrxData[0]&0xE1U) != 0xC0U){
   11b2a:	4b4b      	ldr	r3, [pc, #300]	; (11c58 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x7d0>)
   11b2c:	681b      	ldr	r3, [r3, #0]
   11b2e:	781b      	ldrb	r3, [r3, #0]
   11b30:	f003 03e1 	and.w	r3, r3, #225	; 0xe1
   11b34:	2bc0      	cmp	r3, #192	; 0xc0
   11b36:	d009      	beq.n	11b4c <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x6c4>
                CO_SDO_abort(SDO, CO_SDO_AB_CMD);/* Client command specifier not valid or unknown. */
   11b38:	4b47      	ldr	r3, [pc, #284]	; (11c58 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x7d0>)
   11b3a:	681b      	ldr	r3, [r3, #0]
   11b3c:	4949      	ldr	r1, [pc, #292]	; (11c64 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x7dc>)
   11b3e:	4618      	mov	r0, r3
   11b40:	4b47      	ldr	r3, [pc, #284]	; (11c60 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x7d8>)
   11b42:	4798      	blx	r3
                return -1;
   11b44:	f04f 33ff 	mov.w	r3, #4294967295
   11b48:	f000 be53 	b.w	127f2 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x136a>
            }

            /* prepare response */
            SDO->CANtxBuff->data[0] = 0xA4;
   11b4c:	4b42      	ldr	r3, [pc, #264]	; (11c58 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x7d0>)
   11b4e:	681b      	ldr	r3, [r3, #0]
   11b50:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   11b54:	22a4      	movs	r2, #164	; 0xa4
   11b56:	715a      	strb	r2, [r3, #5]
            SDO->CANtxBuff->data[1] = SDO->CANrxData[1];
   11b58:	4b3f      	ldr	r3, [pc, #252]	; (11c58 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x7d0>)
   11b5a:	681b      	ldr	r3, [r3, #0]
   11b5c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   11b60:	4a3d      	ldr	r2, [pc, #244]	; (11c58 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x7d0>)
   11b62:	6812      	ldr	r2, [r2, #0]
   11b64:	7852      	ldrb	r2, [r2, #1]
   11b66:	719a      	strb	r2, [r3, #6]
            SDO->CANtxBuff->data[2] = SDO->CANrxData[2];
   11b68:	4b3b      	ldr	r3, [pc, #236]	; (11c58 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x7d0>)
   11b6a:	681b      	ldr	r3, [r3, #0]
   11b6c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   11b70:	4a39      	ldr	r2, [pc, #228]	; (11c58 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x7d0>)
   11b72:	6812      	ldr	r2, [r2, #0]
   11b74:	7892      	ldrb	r2, [r2, #2]
   11b76:	71da      	strb	r2, [r3, #7]
            SDO->CANtxBuff->data[3] = SDO->CANrxData[3];
   11b78:	4b37      	ldr	r3, [pc, #220]	; (11c58 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x7d0>)
   11b7a:	681b      	ldr	r3, [r3, #0]
   11b7c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   11b80:	4a35      	ldr	r2, [pc, #212]	; (11c58 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x7d0>)
   11b82:	6812      	ldr	r2, [r2, #0]
   11b84:	78d2      	ldrb	r2, [r2, #3]
   11b86:	721a      	strb	r2, [r3, #8]

            /* blksize */
            SDO->blksize = (CO_SDO_BUFFER_SIZE > (7*127)) ? 127 : (CO_SDO_BUFFER_SIZE / 7);
   11b88:	4b33      	ldr	r3, [pc, #204]	; (11c58 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x7d0>)
   11b8a:	681b      	ldr	r3, [r3, #0]
   11b8c:	2204      	movs	r2, #4
   11b8e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
            SDO->CANtxBuff->data[4] = SDO->blksize;
   11b92:	4b31      	ldr	r3, [pc, #196]	; (11c58 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x7d0>)
   11b94:	681b      	ldr	r3, [r3, #0]
   11b96:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   11b9a:	4a2f      	ldr	r2, [pc, #188]	; (11c58 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x7d0>)
   11b9c:	6812      	ldr	r2, [r2, #0]
   11b9e:	f892 2070 	ldrb.w	r2, [r2, #112]	; 0x70
   11ba2:	725a      	strb	r2, [r3, #9]

            /* is CRC enabled */
            SDO->crcEnabled = (SDO->CANrxData[0] & 0x04) ? true : false;
   11ba4:	4b2c      	ldr	r3, [pc, #176]	; (11c58 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x7d0>)
   11ba6:	681b      	ldr	r3, [r3, #0]
   11ba8:	4a2b      	ldr	r2, [pc, #172]	; (11c58 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x7d0>)
   11baa:	6812      	ldr	r2, [r2, #0]
   11bac:	7812      	ldrb	r2, [r2, #0]
   11bae:	f002 0204 	and.w	r2, r2, #4
   11bb2:	2a00      	cmp	r2, #0
   11bb4:	bf14      	ite	ne
   11bb6:	2201      	movne	r2, #1
   11bb8:	2200      	moveq	r2, #0
   11bba:	b2d2      	uxtb	r2, r2
   11bbc:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
            SDO->crc = 0;
   11bc0:	4b25      	ldr	r3, [pc, #148]	; (11c58 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x7d0>)
   11bc2:	681b      	ldr	r3, [r3, #0]
   11bc4:	2200      	movs	r2, #0
   11bc6:	675a      	str	r2, [r3, #116]	; 0x74

            /* verify length if size is indicated */
            if((SDO->CANrxData[0]&0x02) != 0U){
   11bc8:	4b23      	ldr	r3, [pc, #140]	; (11c58 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x7d0>)
   11bca:	681b      	ldr	r3, [r3, #0]
   11bcc:	781b      	ldrb	r3, [r3, #0]
   11bce:	f003 0302 	and.w	r3, r3, #2
   11bd2:	2b00      	cmp	r3, #0
   11bd4:	d021      	beq.n	11c1a <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x792>
                uint32_t lenRx;
                CO_memcpySwap4(&lenRx, &SDO->CANrxData[4]);
   11bd6:	4b20      	ldr	r3, [pc, #128]	; (11c58 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x7d0>)
   11bd8:	681b      	ldr	r3, [r3, #0]
   11bda:	1d1a      	adds	r2, r3, #4
   11bdc:	f107 031c 	add.w	r3, r7, #28
   11be0:	4619      	mov	r1, r3
   11be2:	68f8      	ldr	r0, [r7, #12]
   11be4:	4b20      	ldr	r3, [pc, #128]	; (11c68 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x7e0>)
   11be6:	4798      	blx	r3
                SDO->ODF_arg.dataLengthTotal = lenRx;
   11be8:	4b1b      	ldr	r3, [pc, #108]	; (11c58 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x7d0>)
   11bea:	681b      	ldr	r3, [r3, #0]
   11bec:	69fa      	ldr	r2, [r7, #28]
   11bee:	661a      	str	r2, [r3, #96]	; 0x60

                /* verify length except for domain data type */
                if((lenRx != SDO->ODF_arg.dataLength) && (SDO->ODF_arg.ODdataStorage != 0)){
   11bf0:	4b19      	ldr	r3, [pc, #100]	; (11c58 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x7d0>)
   11bf2:	681b      	ldr	r3, [r3, #0]
   11bf4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
   11bf6:	69fb      	ldr	r3, [r7, #28]
   11bf8:	429a      	cmp	r2, r3
   11bfa:	d00e      	beq.n	11c1a <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x792>
   11bfc:	4b16      	ldr	r3, [pc, #88]	; (11c58 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x7d0>)
   11bfe:	681b      	ldr	r3, [r3, #0]
   11c00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   11c02:	2b00      	cmp	r3, #0
   11c04:	d009      	beq.n	11c1a <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x792>
                    CO_SDO_abort(SDO, CO_SDO_AB_TYPE_MISMATCH);  /* Length of service parameter does not match */
   11c06:	4b14      	ldr	r3, [pc, #80]	; (11c58 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x7d0>)
   11c08:	681b      	ldr	r3, [r3, #0]
   11c0a:	4918      	ldr	r1, [pc, #96]	; (11c6c <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x7e4>)
   11c0c:	4618      	mov	r0, r3
   11c0e:	4b14      	ldr	r3, [pc, #80]	; (11c60 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x7d8>)
   11c10:	4798      	blx	r3
                    return -1;
   11c12:	f04f 33ff 	mov.w	r3, #4294967295
   11c16:	f000 bdec 	b.w	127f2 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x136a>
                }
            }

            SDO->bufferOffset = 0;
   11c1a:	4b0f      	ldr	r3, [pc, #60]	; (11c58 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x7d0>)
   11c1c:	681b      	ldr	r3, [r3, #0]
   11c1e:	2200      	movs	r2, #0
   11c20:	639a      	str	r2, [r3, #56]	; 0x38
            SDO->sequence = 0;
   11c22:	4b0d      	ldr	r3, [pc, #52]	; (11c58 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x7d0>)
   11c24:	681b      	ldr	r3, [r3, #0]
   11c26:	2200      	movs	r2, #0
   11c28:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
            SDO->state = CO_SDO_ST_DOWNLOAD_BL_SUBBLOCK;
   11c2c:	4b0a      	ldr	r3, [pc, #40]	; (11c58 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x7d0>)
   11c2e:	681b      	ldr	r3, [r3, #0]
   11c30:	2215      	movs	r2, #21
   11c32:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69

            /* send response */
            sendResponse = true;
   11c36:	2301      	movs	r3, #1
   11c38:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
            break;
   11c3c:	f000 bdbd 	b.w	127ba <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x1332>
        }

        case CO_SDO_ST_DOWNLOAD_BL_SUB_RESP:{
            /* no new message received, SDO timeout occured, try to response */
            lastSegmentInSubblock = (!timeoutSubblockDownolad &&
                        ((SDO->CANrxData[0] & 0x80U) == 0x80U)) ? true : false;
   11c40:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
   11c44:	2b00      	cmp	r3, #0
   11c46:	d113      	bne.n	11c70 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x7e8>
   11c48:	4b03      	ldr	r3, [pc, #12]	; (11c58 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x7d0>)
   11c4a:	681b      	ldr	r3, [r3, #0]
   11c4c:	781b      	ldrb	r3, [r3, #0]
   11c4e:	b25b      	sxtb	r3, r3
   11c50:	2b00      	cmp	r3, #0
   11c52:	da0d      	bge.n	11c70 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x7e8>
   11c54:	2301      	movs	r3, #1
   11c56:	e00c      	b.n	11c72 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x7ea>
   11c58:	20001afc 	.word	0x20001afc
   11c5c:	000112c5 	.word	0x000112c5
   11c60:	000113fd 	.word	0x000113fd
   11c64:	05040001 	.word	0x05040001
   11c68:	000108b1 	.word	0x000108b1
   11c6c:	06070010 	.word	0x06070010
   11c70:	2300      	movs	r3, #0
            lastSegmentInSubblock = (!timeoutSubblockDownolad &&
   11c72:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

            /* prepare response */
            SDO->CANtxBuff->data[0] = 0xA2;
   11c76:	4b8d      	ldr	r3, [pc, #564]	; (11eac <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xa24>)
   11c78:	681b      	ldr	r3, [r3, #0]
   11c7a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   11c7e:	22a2      	movs	r2, #162	; 0xa2
   11c80:	715a      	strb	r2, [r3, #5]
            SDO->CANtxBuff->data[1] = SDO->sequence;
   11c82:	4b8a      	ldr	r3, [pc, #552]	; (11eac <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xa24>)
   11c84:	681b      	ldr	r3, [r3, #0]
   11c86:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   11c8a:	4a88      	ldr	r2, [pc, #544]	; (11eac <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xa24>)
   11c8c:	6812      	ldr	r2, [r2, #0]
   11c8e:	f892 206a 	ldrb.w	r2, [r2, #106]	; 0x6a
   11c92:	719a      	strb	r2, [r3, #6]
            SDO->sequence = 0;
   11c94:	4b85      	ldr	r3, [pc, #532]	; (11eac <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xa24>)
   11c96:	681b      	ldr	r3, [r3, #0]
   11c98:	2200      	movs	r2, #0
   11c9a:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

            /* empty buffer in domain data type if not last segment */
            if((SDO->ODF_arg.ODdataStorage == 0) && (SDO->bufferOffset != 0) && !lastSegmentInSubblock){
   11c9e:	4b83      	ldr	r3, [pc, #524]	; (11eac <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xa24>)
   11ca0:	681b      	ldr	r3, [r3, #0]
   11ca2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   11ca4:	2b00      	cmp	r3, #0
   11ca6:	d141      	bne.n	11d2c <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x8a4>
   11ca8:	4b80      	ldr	r3, [pc, #512]	; (11eac <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xa24>)
   11caa:	681b      	ldr	r3, [r3, #0]
   11cac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   11cae:	2b00      	cmp	r3, #0
   11cb0:	d03c      	beq.n	11d2c <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x8a4>
   11cb2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   11cb6:	2b00      	cmp	r3, #0
   11cb8:	d138      	bne.n	11d2c <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x8a4>
                /* calculate CRC on next bytes, if enabled */
                if(SDO->crcEnabled){
   11cba:	4b7c      	ldr	r3, [pc, #496]	; (11eac <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xa24>)
   11cbc:	681b      	ldr	r3, [r3, #0]
   11cbe:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
   11cc2:	2b00      	cmp	r3, #0
   11cc4:	d010      	beq.n	11ce8 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x860>
                    SDO->crc = crc16_ccitt(SDO->ODF_arg.data, SDO->bufferOffset, SDO->crc);
   11cc6:	4b79      	ldr	r3, [pc, #484]	; (11eac <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xa24>)
   11cc8:	681c      	ldr	r4, [r3, #0]
   11cca:	4b78      	ldr	r3, [pc, #480]	; (11eac <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xa24>)
   11ccc:	681b      	ldr	r3, [r3, #0]
   11cce:	6c59      	ldr	r1, [r3, #68]	; 0x44
   11cd0:	4b76      	ldr	r3, [pc, #472]	; (11eac <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xa24>)
   11cd2:	681b      	ldr	r3, [r3, #0]
   11cd4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   11cd6:	4b75      	ldr	r3, [pc, #468]	; (11eac <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xa24>)
   11cd8:	681b      	ldr	r3, [r3, #0]
   11cda:	6f5b      	ldr	r3, [r3, #116]	; 0x74
   11cdc:	b29b      	uxth	r3, r3
   11cde:	68f8      	ldr	r0, [r7, #12]
   11ce0:	4d73      	ldr	r5, [pc, #460]	; (11eb0 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xa28>)
   11ce2:	47a8      	blx	r5
   11ce4:	4603      	mov	r3, r0
   11ce6:	6763      	str	r3, [r4, #116]	; 0x74
                }

                /* write data to the Object dictionary */
                SDO->ODF_arg.lastSegment = false;
   11ce8:	4b70      	ldr	r3, [pc, #448]	; (11eac <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xa24>)
   11cea:	681b      	ldr	r3, [r3, #0]
   11cec:	2200      	movs	r2, #0
   11cee:	f883 205f 	strb.w	r2, [r3, #95]	; 0x5f
                abortCode = CO_SDO_writeOD(SDO->bufferOffset);
   11cf2:	4b6e      	ldr	r3, [pc, #440]	; (11eac <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xa24>)
   11cf4:	681b      	ldr	r3, [r3, #0]
   11cf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   11cf8:	4619      	mov	r1, r3
   11cfa:	68f8      	ldr	r0, [r7, #12]
   11cfc:	4b6d      	ldr	r3, [pc, #436]	; (11eb4 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xa2c>)
   11cfe:	4798      	blx	r3
   11d00:	62b8      	str	r0, [r7, #40]	; 0x28
                if(abortCode != 0U){
   11d02:	6abb      	ldr	r3, [r7, #40]	; 0x28
   11d04:	2b00      	cmp	r3, #0
   11d06:	d009      	beq.n	11d1c <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x894>
                    CO_SDO_abort(SDO, abortCode);
   11d08:	4b68      	ldr	r3, [pc, #416]	; (11eac <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xa24>)
   11d0a:	681b      	ldr	r3, [r3, #0]
   11d0c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   11d0e:	4618      	mov	r0, r3
   11d10:	4b69      	ldr	r3, [pc, #420]	; (11eb8 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xa30>)
   11d12:	4798      	blx	r3
                    return -1;
   11d14:	f04f 33ff 	mov.w	r3, #4294967295
   11d18:	f000 bd6b 	b.w	127f2 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x136a>
                }

                SDO->ODF_arg.dataLength = CO_SDO_BUFFER_SIZE;
   11d1c:	4b63      	ldr	r3, [pc, #396]	; (11eac <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xa24>)
   11d1e:	681b      	ldr	r3, [r3, #0]
   11d20:	2220      	movs	r2, #32
   11d22:	64da      	str	r2, [r3, #76]	; 0x4c
                SDO->bufferOffset = 0;
   11d24:	4b61      	ldr	r3, [pc, #388]	; (11eac <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xa24>)
   11d26:	681b      	ldr	r3, [r3, #0]
   11d28:	2200      	movs	r2, #0
   11d2a:	639a      	str	r2, [r3, #56]	; 0x38
            }

            /* blksize */
            len = CO_SDO_BUFFER_SIZE - SDO->bufferOffset;
   11d2c:	4b5f      	ldr	r3, [pc, #380]	; (11eac <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xa24>)
   11d2e:	681b      	ldr	r3, [r3, #0]
   11d30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   11d32:	f1c3 0320 	rsb	r3, r3, #32
   11d36:	643b      	str	r3, [r7, #64]	; 0x40
            SDO->blksize = (len > (7*127)) ? 127 : (len / 7);
   11d38:	4b5c      	ldr	r3, [pc, #368]	; (11eac <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xa24>)
   11d3a:	6819      	ldr	r1, [r3, #0]
   11d3c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   11d3e:	f240 3279 	movw	r2, #889	; 0x379
   11d42:	4293      	cmp	r3, r2
   11d44:	d809      	bhi.n	11d5a <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x8d2>
   11d46:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   11d48:	4b5c      	ldr	r3, [pc, #368]	; (11ebc <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xa34>)
   11d4a:	fba3 0302 	umull	r0, r3, r3, r2
   11d4e:	1ad2      	subs	r2, r2, r3
   11d50:	0852      	lsrs	r2, r2, #1
   11d52:	4413      	add	r3, r2
   11d54:	089b      	lsrs	r3, r3, #2
   11d56:	b2db      	uxtb	r3, r3
   11d58:	e000      	b.n	11d5c <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x8d4>
   11d5a:	237f      	movs	r3, #127	; 0x7f
   11d5c:	f881 3070 	strb.w	r3, [r1, #112]	; 0x70
            SDO->CANtxBuff->data[2] = SDO->blksize;
   11d60:	4b52      	ldr	r3, [pc, #328]	; (11eac <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xa24>)
   11d62:	681b      	ldr	r3, [r3, #0]
   11d64:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   11d68:	4a50      	ldr	r2, [pc, #320]	; (11eac <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xa24>)
   11d6a:	6812      	ldr	r2, [r2, #0]
   11d6c:	f892 2070 	ldrb.w	r2, [r2, #112]	; 0x70
   11d70:	71da      	strb	r2, [r3, #7]

            /* set next state */
            if(lastSegmentInSubblock) {
   11d72:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   11d76:	2b00      	cmp	r3, #0
   11d78:	d005      	beq.n	11d86 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x8fe>
                SDO->state = CO_SDO_ST_DOWNLOAD_BL_END;
   11d7a:	4b4c      	ldr	r3, [pc, #304]	; (11eac <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xa24>)
   11d7c:	681b      	ldr	r3, [r3, #0]
   11d7e:	2217      	movs	r2, #23
   11d80:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
   11d84:	e013      	b.n	11dae <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x926>
            }
            else if(SDO->bufferOffset >= CO_SDO_BUFFER_SIZE) {
   11d86:	4b49      	ldr	r3, [pc, #292]	; (11eac <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xa24>)
   11d88:	681b      	ldr	r3, [r3, #0]
   11d8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   11d8c:	2b1f      	cmp	r3, #31
   11d8e:	d909      	bls.n	11da4 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x91c>
                CO_SDO_abort(SDO, CO_SDO_AB_DEVICE_INCOMPAT);
   11d90:	4b46      	ldr	r3, [pc, #280]	; (11eac <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xa24>)
   11d92:	681b      	ldr	r3, [r3, #0]
   11d94:	494a      	ldr	r1, [pc, #296]	; (11ec0 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xa38>)
   11d96:	4618      	mov	r0, r3
   11d98:	4b47      	ldr	r3, [pc, #284]	; (11eb8 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xa30>)
   11d9a:	4798      	blx	r3
                return -1;
   11d9c:	f04f 33ff 	mov.w	r3, #4294967295
   11da0:	f000 bd27 	b.w	127f2 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x136a>
            }
            else {
                SDO->state = CO_SDO_ST_DOWNLOAD_BL_SUBBLOCK;
   11da4:	4b41      	ldr	r3, [pc, #260]	; (11eac <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xa24>)
   11da6:	681b      	ldr	r3, [r3, #0]
   11da8:	2215      	movs	r2, #21
   11daa:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
            }

            /* send response */
            sendResponse = true;
   11dae:	2301      	movs	r3, #1
   11db0:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45

            break;
   11db4:	f000 bd01 	b.w	127ba <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x1332>
        }

        case CO_SDO_ST_DOWNLOAD_BL_END:{
            /* verify client command specifier and subcommand */
            if((SDO->CANrxData[0]&0xE1U) != 0xC1U){
   11db8:	4b3c      	ldr	r3, [pc, #240]	; (11eac <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xa24>)
   11dba:	681b      	ldr	r3, [r3, #0]
   11dbc:	781b      	ldrb	r3, [r3, #0]
   11dbe:	f003 03e1 	and.w	r3, r3, #225	; 0xe1
   11dc2:	2bc1      	cmp	r3, #193	; 0xc1
   11dc4:	d009      	beq.n	11dda <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x952>
                CO_SDO_abort(SDO, CO_SDO_AB_CMD);/* Client command specifier not valid or unknown. */
   11dc6:	4b39      	ldr	r3, [pc, #228]	; (11eac <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xa24>)
   11dc8:	681b      	ldr	r3, [r3, #0]
   11dca:	493e      	ldr	r1, [pc, #248]	; (11ec4 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xa3c>)
   11dcc:	4618      	mov	r0, r3
   11dce:	4b3a      	ldr	r3, [pc, #232]	; (11eb8 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xa30>)
   11dd0:	4798      	blx	r3
                return -1;
   11dd2:	f04f 33ff 	mov.w	r3, #4294967295
   11dd6:	f000 bd0c 	b.w	127f2 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x136a>
            }

            /* number of bytes in the last segment of the last block that do not contain data. */
            len = (SDO->CANrxData[0]>>2U) & 0x07U;
   11dda:	4b34      	ldr	r3, [pc, #208]	; (11eac <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xa24>)
   11ddc:	681b      	ldr	r3, [r3, #0]
   11dde:	781b      	ldrb	r3, [r3, #0]
   11de0:	109b      	asrs	r3, r3, #2
   11de2:	f003 0307 	and.w	r3, r3, #7
   11de6:	643b      	str	r3, [r7, #64]	; 0x40
            SDO->bufferOffset -= len;
   11de8:	4b30      	ldr	r3, [pc, #192]	; (11eac <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xa24>)
   11dea:	681b      	ldr	r3, [r3, #0]
   11dec:	4a2f      	ldr	r2, [pc, #188]	; (11eac <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xa24>)
   11dee:	6812      	ldr	r2, [r2, #0]
   11df0:	6b91      	ldr	r1, [r2, #56]	; 0x38
   11df2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   11df4:	1a8a      	subs	r2, r1, r2
   11df6:	639a      	str	r2, [r3, #56]	; 0x38

            /* calculate and verify CRC, if enabled */
            if(SDO->crcEnabled){
   11df8:	4b2c      	ldr	r3, [pc, #176]	; (11eac <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xa24>)
   11dfa:	681b      	ldr	r3, [r3, #0]
   11dfc:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
   11e00:	2b00      	cmp	r3, #0
   11e02:	d029      	beq.n	11e58 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x9d0>
                uint32_t crc;
                SDO->crc = crc16_ccitt(SDO->ODF_arg.data, SDO->bufferOffset, SDO->crc);
   11e04:	4b29      	ldr	r3, [pc, #164]	; (11eac <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xa24>)
   11e06:	681c      	ldr	r4, [r3, #0]
   11e08:	4b28      	ldr	r3, [pc, #160]	; (11eac <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xa24>)
   11e0a:	681b      	ldr	r3, [r3, #0]
   11e0c:	6c59      	ldr	r1, [r3, #68]	; 0x44
   11e0e:	4b27      	ldr	r3, [pc, #156]	; (11eac <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xa24>)
   11e10:	681b      	ldr	r3, [r3, #0]
   11e12:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   11e14:	4b25      	ldr	r3, [pc, #148]	; (11eac <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xa24>)
   11e16:	681b      	ldr	r3, [r3, #0]
   11e18:	6f5b      	ldr	r3, [r3, #116]	; 0x74
   11e1a:	b29b      	uxth	r3, r3
   11e1c:	68f8      	ldr	r0, [r7, #12]
   11e1e:	4d24      	ldr	r5, [pc, #144]	; (11eb0 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xa28>)
   11e20:	47a8      	blx	r5
   11e22:	4603      	mov	r3, r0
   11e24:	6763      	str	r3, [r4, #116]	; 0x74

                CO_memcpySwap2(&crc, &SDO->CANrxData[1]);
   11e26:	4b21      	ldr	r3, [pc, #132]	; (11eac <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xa24>)
   11e28:	681b      	ldr	r3, [r3, #0]
   11e2a:	1c5a      	adds	r2, r3, #1
   11e2c:	f107 0318 	add.w	r3, r7, #24
   11e30:	4619      	mov	r1, r3
   11e32:	68f8      	ldr	r0, [r7, #12]
   11e34:	4b24      	ldr	r3, [pc, #144]	; (11ec8 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xa40>)
   11e36:	4798      	blx	r3

                if(SDO->crc != crc){
   11e38:	4b1c      	ldr	r3, [pc, #112]	; (11eac <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xa24>)
   11e3a:	681b      	ldr	r3, [r3, #0]
   11e3c:	6f5a      	ldr	r2, [r3, #116]	; 0x74
   11e3e:	69bb      	ldr	r3, [r7, #24]
   11e40:	429a      	cmp	r2, r3
   11e42:	d009      	beq.n	11e58 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x9d0>
                    CO_SDO_abort(SDO, CO_SDO_AB_CRC);   /* CRC error (block mode only). */
   11e44:	4b19      	ldr	r3, [pc, #100]	; (11eac <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xa24>)
   11e46:	681b      	ldr	r3, [r3, #0]
   11e48:	4920      	ldr	r1, [pc, #128]	; (11ecc <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xa44>)
   11e4a:	4618      	mov	r0, r3
   11e4c:	4b1a      	ldr	r3, [pc, #104]	; (11eb8 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xa30>)
   11e4e:	4798      	blx	r3
                    return -1;
   11e50:	f04f 33ff 	mov.w	r3, #4294967295
   11e54:	f000 bccd 	b.w	127f2 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x136a>
                }
            }

            /* write data to the Object dictionary */
            SDO->ODF_arg.lastSegment = true;
   11e58:	4b14      	ldr	r3, [pc, #80]	; (11eac <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xa24>)
   11e5a:	681b      	ldr	r3, [r3, #0]
   11e5c:	2201      	movs	r2, #1
   11e5e:	f883 205f 	strb.w	r2, [r3, #95]	; 0x5f
            abortCode = CO_SDO_writeOD( SDO->bufferOffset);
   11e62:	4b12      	ldr	r3, [pc, #72]	; (11eac <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xa24>)
   11e64:	681b      	ldr	r3, [r3, #0]
   11e66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   11e68:	4619      	mov	r1, r3
   11e6a:	68f8      	ldr	r0, [r7, #12]
   11e6c:	4b11      	ldr	r3, [pc, #68]	; (11eb4 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xa2c>)
   11e6e:	4798      	blx	r3
   11e70:	62b8      	str	r0, [r7, #40]	; 0x28
            if(abortCode != 0U){
   11e72:	6abb      	ldr	r3, [r7, #40]	; 0x28
   11e74:	2b00      	cmp	r3, #0
   11e76:	d009      	beq.n	11e8c <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xa04>
                CO_SDO_abort(SDO, abortCode);
   11e78:	4b0c      	ldr	r3, [pc, #48]	; (11eac <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xa24>)
   11e7a:	681b      	ldr	r3, [r3, #0]
   11e7c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   11e7e:	4618      	mov	r0, r3
   11e80:	4b0d      	ldr	r3, [pc, #52]	; (11eb8 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xa30>)
   11e82:	4798      	blx	r3
                return -1;
   11e84:	f04f 33ff 	mov.w	r3, #4294967295
   11e88:	f000 bcb3 	b.w	127f2 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x136a>
            }

            /* send response */
            SDO->CANtxBuff->data[0] = 0xA1;
   11e8c:	4b07      	ldr	r3, [pc, #28]	; (11eac <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xa24>)
   11e8e:	681b      	ldr	r3, [r3, #0]
   11e90:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   11e94:	22a1      	movs	r2, #161	; 0xa1
   11e96:	715a      	strb	r2, [r3, #5]
            SDO->state = CO_SDO_ST_IDLE;
   11e98:	4b04      	ldr	r3, [pc, #16]	; (11eac <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xa24>)
   11e9a:	681b      	ldr	r3, [r3, #0]
   11e9c:	2200      	movs	r2, #0
   11e9e:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
            sendResponse = true;
   11ea2:	2301      	movs	r3, #1
   11ea4:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
            break;
   11ea8:	f000 bc87 	b.w	127ba <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x1332>
   11eac:	20001afc 	.word	0x20001afc
   11eb0:	00012e3d 	.word	0x00012e3d
   11eb4:	000112c5 	.word	0x000112c5
   11eb8:	000113fd 	.word	0x000113fd
   11ebc:	24924925 	.word	0x24924925
   11ec0:	06040047 	.word	0x06040047
   11ec4:	05040001 	.word	0x05040001
   11ec8:	00010881 	.word	0x00010881
   11ecc:	05040004 	.word	0x05040004
        }

        case CO_SDO_ST_UPLOAD_INITIATE:{
            /* default response */
            SDO->CANtxBuff->data[1] = SDO->CANrxData[1];
   11ed0:	4b88      	ldr	r3, [pc, #544]	; (120f4 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xc6c>)
   11ed2:	681b      	ldr	r3, [r3, #0]
   11ed4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   11ed8:	4a86      	ldr	r2, [pc, #536]	; (120f4 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xc6c>)
   11eda:	6812      	ldr	r2, [r2, #0]
   11edc:	7852      	ldrb	r2, [r2, #1]
   11ede:	719a      	strb	r2, [r3, #6]
            SDO->CANtxBuff->data[2] = SDO->CANrxData[2];
   11ee0:	4b84      	ldr	r3, [pc, #528]	; (120f4 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xc6c>)
   11ee2:	681b      	ldr	r3, [r3, #0]
   11ee4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   11ee8:	4a82      	ldr	r2, [pc, #520]	; (120f4 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xc6c>)
   11eea:	6812      	ldr	r2, [r2, #0]
   11eec:	7892      	ldrb	r2, [r2, #2]
   11eee:	71da      	strb	r2, [r3, #7]
            SDO->CANtxBuff->data[3] = SDO->CANrxData[3];
   11ef0:	4b80      	ldr	r3, [pc, #512]	; (120f4 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xc6c>)
   11ef2:	681b      	ldr	r3, [r3, #0]
   11ef4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   11ef8:	4a7e      	ldr	r2, [pc, #504]	; (120f4 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xc6c>)
   11efa:	6812      	ldr	r2, [r2, #0]
   11efc:	78d2      	ldrb	r2, [r2, #3]
   11efe:	721a      	strb	r2, [r3, #8]

            /* Expedited transfer */
            if(SDO->ODF_arg.dataLength <= 4U){
   11f00:	4b7c      	ldr	r3, [pc, #496]	; (120f4 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xc6c>)
   11f02:	681b      	ldr	r3, [r3, #0]
   11f04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   11f06:	2b04      	cmp	r3, #4
   11f08:	d835      	bhi.n	11f76 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xaee>
                for(i=0U; i<SDO->ODF_arg.dataLength; i++)
   11f0a:	2300      	movs	r3, #0
   11f0c:	63fb      	str	r3, [r7, #60]	; 0x3c
   11f0e:	4b79      	ldr	r3, [pc, #484]	; (120f4 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xc6c>)
   11f10:	681b      	ldr	r3, [r3, #0]
   11f12:	6cda      	ldr	r2, [r3, #76]	; 0x4c
   11f14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   11f16:	429a      	cmp	r2, r3
   11f18:	d912      	bls.n	11f40 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xab8>
                    SDO->CANtxBuff->data[4U+i] = SDO->ODF_arg.data[i];
   11f1a:	4b76      	ldr	r3, [pc, #472]	; (120f4 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xc6c>)
   11f1c:	681b      	ldr	r3, [r3, #0]
   11f1e:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
   11f22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   11f24:	3304      	adds	r3, #4
   11f26:	4973      	ldr	r1, [pc, #460]	; (120f4 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xc6c>)
   11f28:	6809      	ldr	r1, [r1, #0]
   11f2a:	6c48      	ldr	r0, [r1, #68]	; 0x44
   11f2c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
   11f2e:	4401      	add	r1, r0
   11f30:	7809      	ldrb	r1, [r1, #0]
   11f32:	4413      	add	r3, r2
   11f34:	460a      	mov	r2, r1
   11f36:	715a      	strb	r2, [r3, #5]
                for(i=0U; i<SDO->ODF_arg.dataLength; i++)
   11f38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   11f3a:	3301      	adds	r3, #1
   11f3c:	63fb      	str	r3, [r7, #60]	; 0x3c
   11f3e:	e7e6      	b.n	11f0e <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xa86>

                SDO->CANtxBuff->data[0] = 0x43U | ((4U-SDO->ODF_arg.dataLength) << 2U);
   11f40:	4b6c      	ldr	r3, [pc, #432]	; (120f4 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xc6c>)
   11f42:	681b      	ldr	r3, [r3, #0]
   11f44:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   11f48:	4a6a      	ldr	r2, [pc, #424]	; (120f4 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xc6c>)
   11f4a:	6812      	ldr	r2, [r2, #0]
   11f4c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
   11f4e:	b2d2      	uxtb	r2, r2
   11f50:	f1c2 0204 	rsb	r2, r2, #4
   11f54:	b2d2      	uxtb	r2, r2
   11f56:	0092      	lsls	r2, r2, #2
   11f58:	b2d2      	uxtb	r2, r2
   11f5a:	f042 0243 	orr.w	r2, r2, #67	; 0x43
   11f5e:	b2d2      	uxtb	r2, r2
   11f60:	715a      	strb	r2, [r3, #5]
                SDO->state = CO_SDO_ST_IDLE;
   11f62:	4b64      	ldr	r3, [pc, #400]	; (120f4 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xc6c>)
   11f64:	681b      	ldr	r3, [r3, #0]
   11f66:	2200      	movs	r2, #0
   11f68:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69

                sendResponse = true;
   11f6c:	2301      	movs	r3, #1
   11f6e:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
                }

                /* send response */
                sendResponse = true;
            }
            break;
   11f72:	f000 bc22 	b.w	127ba <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x1332>
                SDO->bufferOffset = 0U;
   11f76:	4b5f      	ldr	r3, [pc, #380]	; (120f4 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xc6c>)
   11f78:	681b      	ldr	r3, [r3, #0]
   11f7a:	2200      	movs	r2, #0
   11f7c:	639a      	str	r2, [r3, #56]	; 0x38
                SDO->sequence = 0U;
   11f7e:	4b5d      	ldr	r3, [pc, #372]	; (120f4 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xc6c>)
   11f80:	681b      	ldr	r3, [r3, #0]
   11f82:	2200      	movs	r2, #0
   11f84:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
                SDO->state = CO_SDO_ST_UPLOAD_SEGMENTED;
   11f88:	4b5a      	ldr	r3, [pc, #360]	; (120f4 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xc6c>)
   11f8a:	681b      	ldr	r3, [r3, #0]
   11f8c:	2222      	movs	r2, #34	; 0x22
   11f8e:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
                if(SDO->ODF_arg.dataLengthTotal != 0U){
   11f92:	4b58      	ldr	r3, [pc, #352]	; (120f4 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xc6c>)
   11f94:	681b      	ldr	r3, [r3, #0]
   11f96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   11f98:	2b00      	cmp	r3, #0
   11f9a:	d015      	beq.n	11fc8 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xb40>
                    uint32_t len = SDO->ODF_arg.dataLengthTotal;
   11f9c:	4b55      	ldr	r3, [pc, #340]	; (120f4 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xc6c>)
   11f9e:	681b      	ldr	r3, [r3, #0]
   11fa0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   11fa2:	617b      	str	r3, [r7, #20]
                    CO_memcpySwap4(&SDO->CANtxBuff->data[4], &len);
   11fa4:	4b53      	ldr	r3, [pc, #332]	; (120f4 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xc6c>)
   11fa6:	681b      	ldr	r3, [r3, #0]
   11fa8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   11fac:	3309      	adds	r3, #9
   11fae:	f107 0214 	add.w	r2, r7, #20
   11fb2:	4619      	mov	r1, r3
   11fb4:	68f8      	ldr	r0, [r7, #12]
   11fb6:	4b50      	ldr	r3, [pc, #320]	; (120f8 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xc70>)
   11fb8:	4798      	blx	r3
                    SDO->CANtxBuff->data[0] = 0x41U;
   11fba:	4b4e      	ldr	r3, [pc, #312]	; (120f4 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xc6c>)
   11fbc:	681b      	ldr	r3, [r3, #0]
   11fbe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   11fc2:	2241      	movs	r2, #65	; 0x41
   11fc4:	715a      	strb	r2, [r3, #5]
   11fc6:	e005      	b.n	11fd4 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xb4c>
                    SDO->CANtxBuff->data[0] = 0x40U;
   11fc8:	4b4a      	ldr	r3, [pc, #296]	; (120f4 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xc6c>)
   11fca:	681b      	ldr	r3, [r3, #0]
   11fcc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   11fd0:	2240      	movs	r2, #64	; 0x40
   11fd2:	715a      	strb	r2, [r3, #5]
                sendResponse = true;
   11fd4:	2301      	movs	r3, #1
   11fd6:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
            break;
   11fda:	e3ee      	b.n	127ba <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x1332>
        }

        case CO_SDO_ST_UPLOAD_SEGMENTED:{
            /* verify client command specifier */
            if((SDO->CANrxData[0]&0xE0U) != 0x60U){
   11fdc:	4b45      	ldr	r3, [pc, #276]	; (120f4 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xc6c>)
   11fde:	681b      	ldr	r3, [r3, #0]
   11fe0:	781b      	ldrb	r3, [r3, #0]
   11fe2:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
   11fe6:	2b60      	cmp	r3, #96	; 0x60
   11fe8:	d008      	beq.n	11ffc <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xb74>
                CO_SDO_abort(SDO, CO_SDO_AB_CMD);/* Client command specifier not valid or unknown. */
   11fea:	4b42      	ldr	r3, [pc, #264]	; (120f4 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xc6c>)
   11fec:	681b      	ldr	r3, [r3, #0]
   11fee:	4943      	ldr	r1, [pc, #268]	; (120fc <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xc74>)
   11ff0:	4618      	mov	r0, r3
   11ff2:	4b43      	ldr	r3, [pc, #268]	; (12100 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xc78>)
   11ff4:	4798      	blx	r3
                return -1;
   11ff6:	f04f 33ff 	mov.w	r3, #4294967295
   11ffa:	e3fa      	b.n	127f2 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x136a>
            }

            /* verify toggle bit */
            i = ((SDO->CANrxData[0]&0x10U) != 0) ? 1U : 0U;
   11ffc:	4b3d      	ldr	r3, [pc, #244]	; (120f4 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xc6c>)
   11ffe:	681b      	ldr	r3, [r3, #0]
   12000:	781b      	ldrb	r3, [r3, #0]
   12002:	f003 0310 	and.w	r3, r3, #16
   12006:	2b00      	cmp	r3, #0
   12008:	d001      	beq.n	1200e <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xb86>
   1200a:	2301      	movs	r3, #1
   1200c:	e000      	b.n	12010 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xb88>
   1200e:	2300      	movs	r3, #0
   12010:	63fb      	str	r3, [r7, #60]	; 0x3c
            if(i != SDO->sequence){
   12012:	4b38      	ldr	r3, [pc, #224]	; (120f4 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xc6c>)
   12014:	681b      	ldr	r3, [r3, #0]
   12016:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
   1201a:	461a      	mov	r2, r3
   1201c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1201e:	429a      	cmp	r2, r3
   12020:	d008      	beq.n	12034 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xbac>
                CO_SDO_abort(SDO, CO_SDO_AB_TOGGLE_BIT);/* toggle bit not alternated */
   12022:	4b34      	ldr	r3, [pc, #208]	; (120f4 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xc6c>)
   12024:	681b      	ldr	r3, [r3, #0]
   12026:	4937      	ldr	r1, [pc, #220]	; (12104 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xc7c>)
   12028:	4618      	mov	r0, r3
   1202a:	4b35      	ldr	r3, [pc, #212]	; (12100 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xc78>)
   1202c:	4798      	blx	r3
                return -1;
   1202e:	f04f 33ff 	mov.w	r3, #4294967295
   12032:	e3de      	b.n	127f2 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x136a>
            }

            /* calculate length to be sent */
            len = SDO->ODF_arg.dataLength - SDO->bufferOffset;
   12034:	4b2f      	ldr	r3, [pc, #188]	; (120f4 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xc6c>)
   12036:	681b      	ldr	r3, [r3, #0]
   12038:	6cda      	ldr	r2, [r3, #76]	; 0x4c
   1203a:	4b2e      	ldr	r3, [pc, #184]	; (120f4 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xc6c>)
   1203c:	681b      	ldr	r3, [r3, #0]
   1203e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   12040:	1ad3      	subs	r3, r2, r3
   12042:	643b      	str	r3, [r7, #64]	; 0x40
            if(len > 7U) len = 7U;
   12044:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   12046:	2b07      	cmp	r3, #7
   12048:	d901      	bls.n	1204e <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xbc6>
   1204a:	2307      	movs	r3, #7
   1204c:	643b      	str	r3, [r7, #64]	; 0x40

            /* If data type is domain, re-fill the data buffer if neccessary and indicated so. */
            if((SDO->ODF_arg.ODdataStorage == 0) && (len < 7U) && (!SDO->ODF_arg.lastSegment)){
   1204e:	4b29      	ldr	r3, [pc, #164]	; (120f4 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xc6c>)
   12050:	681b      	ldr	r3, [r3, #0]
   12052:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   12054:	2b00      	cmp	r3, #0
   12056:	d179      	bne.n	1214c <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xcc4>
   12058:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1205a:	2b06      	cmp	r3, #6
   1205c:	d876      	bhi.n	1214c <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xcc4>
   1205e:	4b25      	ldr	r3, [pc, #148]	; (120f4 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xc6c>)
   12060:	681b      	ldr	r3, [r3, #0]
   12062:	f893 305f 	ldrb.w	r3, [r3, #95]	; 0x5f
   12066:	2b00      	cmp	r3, #0
   12068:	d170      	bne.n	1214c <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xcc4>
                /* copy previous data to the beginning */
                for(i=0U; i<len; i++){
   1206a:	2300      	movs	r3, #0
   1206c:	63fb      	str	r3, [r7, #60]	; 0x3c
   1206e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   12070:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   12072:	429a      	cmp	r2, r3
   12074:	d213      	bcs.n	1209e <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xc16>
                    SDO->ODF_arg.data[i] = SDO->ODF_arg.data[SDO->bufferOffset+i];
   12076:	4b1f      	ldr	r3, [pc, #124]	; (120f4 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xc6c>)
   12078:	681b      	ldr	r3, [r3, #0]
   1207a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   1207c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1207e:	4413      	add	r3, r2
   12080:	4a1c      	ldr	r2, [pc, #112]	; (120f4 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xc6c>)
   12082:	6812      	ldr	r2, [r2, #0]
   12084:	6c51      	ldr	r1, [r2, #68]	; 0x44
   12086:	4a1b      	ldr	r2, [pc, #108]	; (120f4 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xc6c>)
   12088:	6812      	ldr	r2, [r2, #0]
   1208a:	6b90      	ldr	r0, [r2, #56]	; 0x38
   1208c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   1208e:	4402      	add	r2, r0
   12090:	440a      	add	r2, r1
   12092:	7812      	ldrb	r2, [r2, #0]
   12094:	701a      	strb	r2, [r3, #0]
                for(i=0U; i<len; i++){
   12096:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   12098:	3301      	adds	r3, #1
   1209a:	63fb      	str	r3, [r7, #60]	; 0x3c
   1209c:	e7e7      	b.n	1206e <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xbe6>
                }

                /* move the beginning of the data buffer */
                SDO->ODF_arg.data += len;
   1209e:	4b15      	ldr	r3, [pc, #84]	; (120f4 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xc6c>)
   120a0:	681b      	ldr	r3, [r3, #0]
   120a2:	4a14      	ldr	r2, [pc, #80]	; (120f4 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xc6c>)
   120a4:	6812      	ldr	r2, [r2, #0]
   120a6:	6c51      	ldr	r1, [r2, #68]	; 0x44
   120a8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   120aa:	440a      	add	r2, r1
   120ac:	645a      	str	r2, [r3, #68]	; 0x44
                SDO->ODF_arg.dataLength = CO_OD_getLength( SDO->entryNo, SDO->ODF_arg.subIndex) - len;
   120ae:	4b11      	ldr	r3, [pc, #68]	; (120f4 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xc6c>)
   120b0:	681c      	ldr	r4, [r3, #0]
   120b2:	4b10      	ldr	r3, [pc, #64]	; (120f4 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xc6c>)
   120b4:	681b      	ldr	r3, [r3, #0]
   120b6:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
   120b8:	4b0e      	ldr	r3, [pc, #56]	; (120f4 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xc6c>)
   120ba:	681b      	ldr	r3, [r3, #0]
   120bc:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
   120c0:	461a      	mov	r2, r3
   120c2:	68f8      	ldr	r0, [r7, #12]
   120c4:	4b10      	ldr	r3, [pc, #64]	; (12108 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xc80>)
   120c6:	4798      	blx	r3
   120c8:	4602      	mov	r2, r0
   120ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   120cc:	1ad3      	subs	r3, r2, r3
   120ce:	64e3      	str	r3, [r4, #76]	; 0x4c

                /* read next data from Object dictionary function */
                abortCode = CO_SDO_readOD( CO_SDO_BUFFER_SIZE);
   120d0:	2120      	movs	r1, #32
   120d2:	68f8      	ldr	r0, [r7, #12]
   120d4:	4b0d      	ldr	r3, [pc, #52]	; (1210c <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xc84>)
   120d6:	4798      	blx	r3
   120d8:	62b8      	str	r0, [r7, #40]	; 0x28
                if(abortCode != 0U){
   120da:	6abb      	ldr	r3, [r7, #40]	; 0x28
   120dc:	2b00      	cmp	r3, #0
   120de:	d017      	beq.n	12110 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xc88>
                    CO_SDO_abort(SDO, abortCode);
   120e0:	4b04      	ldr	r3, [pc, #16]	; (120f4 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xc6c>)
   120e2:	681b      	ldr	r3, [r3, #0]
   120e4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   120e6:	4618      	mov	r0, r3
   120e8:	4b05      	ldr	r3, [pc, #20]	; (12100 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xc78>)
   120ea:	4798      	blx	r3
                    return -1;
   120ec:	f04f 33ff 	mov.w	r3, #4294967295
   120f0:	e37f      	b.n	127f2 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x136a>
   120f2:	bf00      	nop
   120f4:	20001afc 	.word	0x20001afc
   120f8:	000108b1 	.word	0x000108b1
   120fc:	05040001 	.word	0x05040001
   12100:	000113fd 	.word	0x000113fd
   12104:	05030000 	.word	0x05030000
   12108:	00010dd1 	.word	0x00010dd1
   1210c:	000111a1 	.word	0x000111a1
                }

                /* return to the original data buffer */
                SDO->ODF_arg.data -= len;
   12110:	4b9b      	ldr	r3, [pc, #620]	; (12380 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xef8>)
   12112:	681b      	ldr	r3, [r3, #0]
   12114:	4a9a      	ldr	r2, [pc, #616]	; (12380 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xef8>)
   12116:	6812      	ldr	r2, [r2, #0]
   12118:	6c51      	ldr	r1, [r2, #68]	; 0x44
   1211a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   1211c:	4252      	negs	r2, r2
   1211e:	440a      	add	r2, r1
   12120:	645a      	str	r2, [r3, #68]	; 0x44
                SDO->ODF_arg.dataLength +=  len;
   12122:	4b97      	ldr	r3, [pc, #604]	; (12380 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xef8>)
   12124:	681b      	ldr	r3, [r3, #0]
   12126:	4a96      	ldr	r2, [pc, #600]	; (12380 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xef8>)
   12128:	6812      	ldr	r2, [r2, #0]
   1212a:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
   1212c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   1212e:	440a      	add	r2, r1
   12130:	64da      	str	r2, [r3, #76]	; 0x4c
                SDO->bufferOffset = 0;
   12132:	4b93      	ldr	r3, [pc, #588]	; (12380 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xef8>)
   12134:	681b      	ldr	r3, [r3, #0]
   12136:	2200      	movs	r2, #0
   12138:	639a      	str	r2, [r3, #56]	; 0x38

                /* re-calculate the length */
                len = SDO->ODF_arg.dataLength;
   1213a:	4b91      	ldr	r3, [pc, #580]	; (12380 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xef8>)
   1213c:	681b      	ldr	r3, [r3, #0]
   1213e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   12140:	643b      	str	r3, [r7, #64]	; 0x40
                if(len > 7U) len = 7U;
   12142:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   12144:	2b07      	cmp	r3, #7
   12146:	d901      	bls.n	1214c <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xcc4>
   12148:	2307      	movs	r3, #7
   1214a:	643b      	str	r3, [r7, #64]	; 0x40
            }

            /* fill response data bytes */
            for(i=0U; i<len; i++)
   1214c:	2300      	movs	r3, #0
   1214e:	63fb      	str	r3, [r7, #60]	; 0x3c
   12150:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   12152:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   12154:	429a      	cmp	r2, r3
   12156:	d215      	bcs.n	12184 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xcfc>
                SDO->CANtxBuff->data[i+1] = SDO->ODF_arg.data[SDO->bufferOffset++];
   12158:	4b89      	ldr	r3, [pc, #548]	; (12380 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xef8>)
   1215a:	681b      	ldr	r3, [r3, #0]
   1215c:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
   12160:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   12162:	1c59      	adds	r1, r3, #1
   12164:	4b86      	ldr	r3, [pc, #536]	; (12380 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xef8>)
   12166:	681b      	ldr	r3, [r3, #0]
   12168:	6c5c      	ldr	r4, [r3, #68]	; 0x44
   1216a:	4b85      	ldr	r3, [pc, #532]	; (12380 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xef8>)
   1216c:	681a      	ldr	r2, [r3, #0]
   1216e:	6b93      	ldr	r3, [r2, #56]	; 0x38
   12170:	1c5d      	adds	r5, r3, #1
   12172:	6395      	str	r5, [r2, #56]	; 0x38
   12174:	4423      	add	r3, r4
   12176:	781a      	ldrb	r2, [r3, #0]
   12178:	1843      	adds	r3, r0, r1
   1217a:	715a      	strb	r2, [r3, #5]
            for(i=0U; i<len; i++)
   1217c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1217e:	3301      	adds	r3, #1
   12180:	63fb      	str	r3, [r7, #60]	; 0x3c
   12182:	e7e5      	b.n	12150 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xcc8>

            /* first response byte */
            SDO->CANtxBuff->data[0] = 0x00 | (SDO->sequence ? 0x10 : 0x00) | ((7-len)<<1);
   12184:	4b7e      	ldr	r3, [pc, #504]	; (12380 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xef8>)
   12186:	681b      	ldr	r3, [r3, #0]
   12188:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   1218c:	4a7c      	ldr	r2, [pc, #496]	; (12380 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xef8>)
   1218e:	6812      	ldr	r2, [r2, #0]
   12190:	f892 206a 	ldrb.w	r2, [r2, #106]	; 0x6a
   12194:	2a00      	cmp	r2, #0
   12196:	d001      	beq.n	1219c <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xd14>
   12198:	2110      	movs	r1, #16
   1219a:	e000      	b.n	1219e <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xd16>
   1219c:	2100      	movs	r1, #0
   1219e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   121a0:	b2d2      	uxtb	r2, r2
   121a2:	f1c2 0207 	rsb	r2, r2, #7
   121a6:	b2d2      	uxtb	r2, r2
   121a8:	0052      	lsls	r2, r2, #1
   121aa:	b2d2      	uxtb	r2, r2
   121ac:	430a      	orrs	r2, r1
   121ae:	b2d2      	uxtb	r2, r2
   121b0:	715a      	strb	r2, [r3, #5]
            SDO->sequence = (SDO->sequence) ? 0 : 1;
   121b2:	4b73      	ldr	r3, [pc, #460]	; (12380 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xef8>)
   121b4:	681b      	ldr	r3, [r3, #0]
   121b6:	4a72      	ldr	r2, [pc, #456]	; (12380 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xef8>)
   121b8:	6812      	ldr	r2, [r2, #0]
   121ba:	f892 206a 	ldrb.w	r2, [r2, #106]	; 0x6a
   121be:	2a00      	cmp	r2, #0
   121c0:	bf0c      	ite	eq
   121c2:	2201      	moveq	r2, #1
   121c4:	2200      	movne	r2, #0
   121c6:	b2d2      	uxtb	r2, r2
   121c8:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

            /* verify end of transfer */
            if((SDO->bufferOffset == SDO->ODF_arg.dataLength) && (SDO->ODF_arg.lastSegment)){
   121cc:	4b6c      	ldr	r3, [pc, #432]	; (12380 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xef8>)
   121ce:	681b      	ldr	r3, [r3, #0]
   121d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   121d2:	4b6b      	ldr	r3, [pc, #428]	; (12380 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xef8>)
   121d4:	681b      	ldr	r3, [r3, #0]
   121d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   121d8:	429a      	cmp	r2, r3
   121da:	d117      	bne.n	1220c <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xd84>
   121dc:	4b68      	ldr	r3, [pc, #416]	; (12380 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xef8>)
   121de:	681b      	ldr	r3, [r3, #0]
   121e0:	f893 305f 	ldrb.w	r3, [r3, #95]	; 0x5f
   121e4:	2b00      	cmp	r3, #0
   121e6:	d011      	beq.n	1220c <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xd84>
                SDO->CANtxBuff->data[0] |= 0x01;
   121e8:	4b65      	ldr	r3, [pc, #404]	; (12380 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xef8>)
   121ea:	681b      	ldr	r3, [r3, #0]
   121ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   121f0:	4a63      	ldr	r2, [pc, #396]	; (12380 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xef8>)
   121f2:	6812      	ldr	r2, [r2, #0]
   121f4:	f8d2 2084 	ldr.w	r2, [r2, #132]	; 0x84
   121f8:	7952      	ldrb	r2, [r2, #5]
   121fa:	f042 0201 	orr.w	r2, r2, #1
   121fe:	b2d2      	uxtb	r2, r2
   12200:	715a      	strb	r2, [r3, #5]
                SDO->state = CO_SDO_ST_IDLE;
   12202:	4b5f      	ldr	r3, [pc, #380]	; (12380 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xef8>)
   12204:	681b      	ldr	r3, [r3, #0]
   12206:	2200      	movs	r2, #0
   12208:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
            }

            /* send response */
            sendResponse = true;
   1220c:	2301      	movs	r3, #1
   1220e:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
            break;
   12212:	e2d2      	b.n	127ba <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x1332>
        }

        case CO_SDO_ST_UPLOAD_BL_INITIATE:{
            /* default response */
            SDO->CANtxBuff->data[1] = SDO->CANrxData[1];
   12214:	4b5a      	ldr	r3, [pc, #360]	; (12380 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xef8>)
   12216:	681b      	ldr	r3, [r3, #0]
   12218:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   1221c:	4a58      	ldr	r2, [pc, #352]	; (12380 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xef8>)
   1221e:	6812      	ldr	r2, [r2, #0]
   12220:	7852      	ldrb	r2, [r2, #1]
   12222:	719a      	strb	r2, [r3, #6]
            SDO->CANtxBuff->data[2] = SDO->CANrxData[2];
   12224:	4b56      	ldr	r3, [pc, #344]	; (12380 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xef8>)
   12226:	681b      	ldr	r3, [r3, #0]
   12228:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   1222c:	4a54      	ldr	r2, [pc, #336]	; (12380 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xef8>)
   1222e:	6812      	ldr	r2, [r2, #0]
   12230:	7892      	ldrb	r2, [r2, #2]
   12232:	71da      	strb	r2, [r3, #7]
            SDO->CANtxBuff->data[3] = SDO->CANrxData[3];
   12234:	4b52      	ldr	r3, [pc, #328]	; (12380 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xef8>)
   12236:	681b      	ldr	r3, [r3, #0]
   12238:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   1223c:	4a50      	ldr	r2, [pc, #320]	; (12380 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xef8>)
   1223e:	6812      	ldr	r2, [r2, #0]
   12240:	78d2      	ldrb	r2, [r2, #3]
   12242:	721a      	strb	r2, [r3, #8]

            /* calculate CRC, if enabled */
            if((SDO->CANrxData[0] & 0x04U) != 0U){
   12244:	4b4e      	ldr	r3, [pc, #312]	; (12380 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xef8>)
   12246:	681b      	ldr	r3, [r3, #0]
   12248:	781b      	ldrb	r3, [r3, #0]
   1224a:	f003 0304 	and.w	r3, r3, #4
   1224e:	2b00      	cmp	r3, #0
   12250:	d013      	beq.n	1227a <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xdf2>
                SDO->crcEnabled = true;
   12252:	4b4b      	ldr	r3, [pc, #300]	; (12380 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xef8>)
   12254:	681b      	ldr	r3, [r3, #0]
   12256:	2201      	movs	r2, #1
   12258:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                SDO->crc = crc16_ccitt(SDO->ODF_arg.data, SDO->ODF_arg.dataLength, 0);
   1225c:	4b48      	ldr	r3, [pc, #288]	; (12380 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xef8>)
   1225e:	681c      	ldr	r4, [r3, #0]
   12260:	4b47      	ldr	r3, [pc, #284]	; (12380 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xef8>)
   12262:	681b      	ldr	r3, [r3, #0]
   12264:	6c59      	ldr	r1, [r3, #68]	; 0x44
   12266:	4b46      	ldr	r3, [pc, #280]	; (12380 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xef8>)
   12268:	681b      	ldr	r3, [r3, #0]
   1226a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
   1226c:	2300      	movs	r3, #0
   1226e:	68f8      	ldr	r0, [r7, #12]
   12270:	4d44      	ldr	r5, [pc, #272]	; (12384 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xefc>)
   12272:	47a8      	blx	r5
   12274:	4603      	mov	r3, r0
   12276:	6763      	str	r3, [r4, #116]	; 0x74
   12278:	e008      	b.n	1228c <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xe04>
            }
            else{
                SDO->crcEnabled = false;
   1227a:	4b41      	ldr	r3, [pc, #260]	; (12380 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xef8>)
   1227c:	681b      	ldr	r3, [r3, #0]
   1227e:	2200      	movs	r2, #0
   12280:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                SDO->crc = 0;
   12284:	4b3e      	ldr	r3, [pc, #248]	; (12380 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xef8>)
   12286:	681b      	ldr	r3, [r3, #0]
   12288:	2200      	movs	r2, #0
   1228a:	675a      	str	r2, [r3, #116]	; 0x74
            }

            /* Number of segments per block */
            SDO->blksize = SDO->CANrxData[4];
   1228c:	4b3c      	ldr	r3, [pc, #240]	; (12380 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xef8>)
   1228e:	681b      	ldr	r3, [r3, #0]
   12290:	4a3b      	ldr	r2, [pc, #236]	; (12380 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xef8>)
   12292:	6812      	ldr	r2, [r2, #0]
   12294:	7912      	ldrb	r2, [r2, #4]
   12296:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

            /* verify client subcommand */
            if((SDO->CANrxData[0]&0x03U) != 0x00U){
   1229a:	4b39      	ldr	r3, [pc, #228]	; (12380 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xef8>)
   1229c:	681b      	ldr	r3, [r3, #0]
   1229e:	781b      	ldrb	r3, [r3, #0]
   122a0:	f003 0303 	and.w	r3, r3, #3
   122a4:	2b00      	cmp	r3, #0
   122a6:	d008      	beq.n	122ba <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xe32>
                CO_SDO_abort(SDO, CO_SDO_AB_CMD);/* Client command specifier not valid or unknown. */
   122a8:	4b35      	ldr	r3, [pc, #212]	; (12380 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xef8>)
   122aa:	681b      	ldr	r3, [r3, #0]
   122ac:	4936      	ldr	r1, [pc, #216]	; (12388 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xf00>)
   122ae:	4618      	mov	r0, r3
   122b0:	4b36      	ldr	r3, [pc, #216]	; (1238c <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xf04>)
   122b2:	4798      	blx	r3
                return -1;
   122b4:	f04f 33ff 	mov.w	r3, #4294967295
   122b8:	e29b      	b.n	127f2 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x136a>
            }

            /* verify blksize and if SDO data buffer is large enough */
            if((SDO->blksize < 1U) || (SDO->blksize > 127U) ||
   122ba:	4b31      	ldr	r3, [pc, #196]	; (12380 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xef8>)
   122bc:	681b      	ldr	r3, [r3, #0]
   122be:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
   122c2:	2b00      	cmp	r3, #0
   122c4:	d019      	beq.n	122fa <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xe72>
   122c6:	4b2e      	ldr	r3, [pc, #184]	; (12380 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xef8>)
   122c8:	681b      	ldr	r3, [r3, #0]
   122ca:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
   122ce:	b25b      	sxtb	r3, r3
   122d0:	2b00      	cmp	r3, #0
   122d2:	db12      	blt.n	122fa <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xe72>
               (((SDO->blksize*7U) > SDO->ODF_arg.dataLength) && (!SDO->ODF_arg.lastSegment))){
   122d4:	4b2a      	ldr	r3, [pc, #168]	; (12380 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xef8>)
   122d6:	681b      	ldr	r3, [r3, #0]
   122d8:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
   122dc:	461a      	mov	r2, r3
   122de:	4613      	mov	r3, r2
   122e0:	00db      	lsls	r3, r3, #3
   122e2:	1a9a      	subs	r2, r3, r2
   122e4:	4b26      	ldr	r3, [pc, #152]	; (12380 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xef8>)
   122e6:	681b      	ldr	r3, [r3, #0]
   122e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
            if((SDO->blksize < 1U) || (SDO->blksize > 127U) ||
   122ea:	429a      	cmp	r2, r3
   122ec:	d90e      	bls.n	1230c <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xe84>
               (((SDO->blksize*7U) > SDO->ODF_arg.dataLength) && (!SDO->ODF_arg.lastSegment))){
   122ee:	4b24      	ldr	r3, [pc, #144]	; (12380 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xef8>)
   122f0:	681b      	ldr	r3, [r3, #0]
   122f2:	f893 305f 	ldrb.w	r3, [r3, #95]	; 0x5f
   122f6:	2b00      	cmp	r3, #0
   122f8:	d108      	bne.n	1230c <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xe84>
                CO_SDO_abort(SDO, CO_SDO_AB_BLOCK_SIZE); /* Invalid block size (block mode only). */
   122fa:	4b21      	ldr	r3, [pc, #132]	; (12380 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xef8>)
   122fc:	681b      	ldr	r3, [r3, #0]
   122fe:	4924      	ldr	r1, [pc, #144]	; (12390 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xf08>)
   12300:	4618      	mov	r0, r3
   12302:	4b22      	ldr	r3, [pc, #136]	; (1238c <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xf04>)
   12304:	4798      	blx	r3
                return -1;
   12306:	f04f 33ff 	mov.w	r3, #4294967295
   1230a:	e272      	b.n	127f2 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x136a>
            }

            /* indicate data size, if known */
            if(SDO->ODF_arg.dataLengthTotal != 0U){
   1230c:	4b1c      	ldr	r3, [pc, #112]	; (12380 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xef8>)
   1230e:	681b      	ldr	r3, [r3, #0]
   12310:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   12312:	2b00      	cmp	r3, #0
   12314:	d015      	beq.n	12342 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xeba>
                uint32_t len = SDO->ODF_arg.dataLengthTotal;
   12316:	4b1a      	ldr	r3, [pc, #104]	; (12380 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xef8>)
   12318:	681b      	ldr	r3, [r3, #0]
   1231a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   1231c:	613b      	str	r3, [r7, #16]
                CO_memcpySwap4(&SDO->CANtxBuff->data[4], &len);
   1231e:	4b18      	ldr	r3, [pc, #96]	; (12380 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xef8>)
   12320:	681b      	ldr	r3, [r3, #0]
   12322:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   12326:	3309      	adds	r3, #9
   12328:	f107 0210 	add.w	r2, r7, #16
   1232c:	4619      	mov	r1, r3
   1232e:	68f8      	ldr	r0, [r7, #12]
   12330:	4b18      	ldr	r3, [pc, #96]	; (12394 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xf0c>)
   12332:	4798      	blx	r3
                SDO->CANtxBuff->data[0] = 0xC6U;
   12334:	4b12      	ldr	r3, [pc, #72]	; (12380 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xef8>)
   12336:	681b      	ldr	r3, [r3, #0]
   12338:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   1233c:	22c6      	movs	r2, #198	; 0xc6
   1233e:	715a      	strb	r2, [r3, #5]
   12340:	e005      	b.n	1234e <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xec6>
            }
            else{
                SDO->CANtxBuff->data[0] = 0xC4U;
   12342:	4b0f      	ldr	r3, [pc, #60]	; (12380 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xef8>)
   12344:	681b      	ldr	r3, [r3, #0]
   12346:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   1234a:	22c4      	movs	r2, #196	; 0xc4
   1234c:	715a      	strb	r2, [r3, #5]
            }

            /* send response */
            SDO->state = CO_SDO_ST_UPLOAD_BL_INITIATE_2;
   1234e:	4b0c      	ldr	r3, [pc, #48]	; (12380 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xef8>)
   12350:	681b      	ldr	r3, [r3, #0]
   12352:	2225      	movs	r2, #37	; 0x25
   12354:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
            sendResponse = true;
   12358:	2301      	movs	r3, #1
   1235a:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
            break;
   1235e:	e22c      	b.n	127ba <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x1332>
        }

        case CO_SDO_ST_UPLOAD_BL_INITIATE_2:{
            /* verify client command specifier and subcommand */
            if((SDO->CANrxData[0]&0xE3U) != 0xA3U){
   12360:	4b07      	ldr	r3, [pc, #28]	; (12380 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xef8>)
   12362:	681b      	ldr	r3, [r3, #0]
   12364:	781b      	ldrb	r3, [r3, #0]
   12366:	f003 03e3 	and.w	r3, r3, #227	; 0xe3
   1236a:	2ba3      	cmp	r3, #163	; 0xa3
   1236c:	d014      	beq.n	12398 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xf10>
                CO_SDO_abort(SDO, CO_SDO_AB_CMD);/* Client command specifier not valid or unknown. */
   1236e:	4b04      	ldr	r3, [pc, #16]	; (12380 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xef8>)
   12370:	681b      	ldr	r3, [r3, #0]
   12372:	4905      	ldr	r1, [pc, #20]	; (12388 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xf00>)
   12374:	4618      	mov	r0, r3
   12376:	4b05      	ldr	r3, [pc, #20]	; (1238c <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xf04>)
   12378:	4798      	blx	r3
                return -1;
   1237a:	f04f 33ff 	mov.w	r3, #4294967295
   1237e:	e238      	b.n	127f2 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x136a>
   12380:	20001afc 	.word	0x20001afc
   12384:	00012e3d 	.word	0x00012e3d
   12388:	05040001 	.word	0x05040001
   1238c:	000113fd 	.word	0x000113fd
   12390:	05040002 	.word	0x05040002
   12394:	000108b1 	.word	0x000108b1
            }

            SDO->bufferOffset = 0;
   12398:	4b9e      	ldr	r3, [pc, #632]	; (12614 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x118c>)
   1239a:	681b      	ldr	r3, [r3, #0]
   1239c:	2200      	movs	r2, #0
   1239e:	639a      	str	r2, [r3, #56]	; 0x38
            SDO->sequence = 0;
   123a0:	4b9c      	ldr	r3, [pc, #624]	; (12614 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x118c>)
   123a2:	681b      	ldr	r3, [r3, #0]
   123a4:	2200      	movs	r2, #0
   123a6:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
            SDO->endOfTransfer = false;
   123aa:	4b9a      	ldr	r3, [pc, #616]	; (12614 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x118c>)
   123ac:	681b      	ldr	r3, [r3, #0]
   123ae:	2200      	movs	r2, #0
   123b0:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
            SDO->CANrxNew = false;
   123b4:	4b97      	ldr	r3, [pc, #604]	; (12614 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x118c>)
   123b6:	681b      	ldr	r3, [r3, #0]
   123b8:	2200      	movs	r2, #0
   123ba:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
            SDO->state = CO_SDO_ST_UPLOAD_BL_SUBBLOCK;
   123be:	4b95      	ldr	r3, [pc, #596]	; (12614 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x118c>)
   123c0:	681b      	ldr	r3, [r3, #0]
   123c2:	2226      	movs	r2, #38	; 0x26
   123c4:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
            /* continue in next case */
        }

        case CO_SDO_ST_UPLOAD_BL_SUBBLOCK:{
            /* is block confirmation received */
            if(SDO->CANrxNew){
   123c8:	4b92      	ldr	r3, [pc, #584]	; (12614 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x118c>)
   123ca:	681b      	ldr	r3, [r3, #0]
   123cc:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
   123d0:	2b00      	cmp	r3, #0
   123d2:	f000 8144 	beq.w	1265e <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x11d6>
                uint8_t ackseq;
                uint32_t j;

                /* verify client command specifier and subcommand */
                if((SDO->CANrxData[0]&0xE3U) != 0xA2U){
   123d6:	4b8f      	ldr	r3, [pc, #572]	; (12614 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x118c>)
   123d8:	681b      	ldr	r3, [r3, #0]
   123da:	781b      	ldrb	r3, [r3, #0]
   123dc:	f003 03e3 	and.w	r3, r3, #227	; 0xe3
   123e0:	2ba2      	cmp	r3, #162	; 0xa2
   123e2:	d008      	beq.n	123f6 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xf6e>
                    CO_SDO_abort(SDO, CO_SDO_AB_CMD);/* Client command specifier not valid or unknown. */
   123e4:	4b8b      	ldr	r3, [pc, #556]	; (12614 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x118c>)
   123e6:	681b      	ldr	r3, [r3, #0]
   123e8:	498b      	ldr	r1, [pc, #556]	; (12618 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x1190>)
   123ea:	4618      	mov	r0, r3
   123ec:	4b8b      	ldr	r3, [pc, #556]	; (1261c <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x1194>)
   123ee:	4798      	blx	r3
                    return -1;
   123f0:	f04f 33ff 	mov.w	r3, #4294967295
   123f4:	e1fd      	b.n	127f2 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x136a>
                }

                ackseq = SDO->CANrxData[1];   /* sequence number of the last segment, that was received correctly. */
   123f6:	4b87      	ldr	r3, [pc, #540]	; (12614 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x118c>)
   123f8:	681b      	ldr	r3, [r3, #0]
   123fa:	785b      	ldrb	r3, [r3, #1]
   123fc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

                /* verify if response is too early */
                if(ackseq > SDO->sequence){
   12400:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
   12404:	4a83      	ldr	r2, [pc, #524]	; (12614 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x118c>)
   12406:	6812      	ldr	r2, [r2, #0]
   12408:	f892 206a 	ldrb.w	r2, [r2, #106]	; 0x6a
   1240c:	4293      	cmp	r3, r2
   1240e:	dd08      	ble.n	12422 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xf9a>
                    CO_SDO_abort(SDO, CO_SDO_AB_SEQ_NUM); /* Invalid sequence */
   12410:	4b80      	ldr	r3, [pc, #512]	; (12614 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x118c>)
   12412:	681b      	ldr	r3, [r3, #0]
   12414:	4982      	ldr	r1, [pc, #520]	; (12620 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x1198>)
   12416:	4618      	mov	r0, r3
   12418:	4b80      	ldr	r3, [pc, #512]	; (1261c <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x1194>)
   1241a:	4798      	blx	r3
                    return -1;
   1241c:	f04f 33ff 	mov.w	r3, #4294967295
   12420:	e1e7      	b.n	127f2 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x136a>
                }

                /* end of transfer */
                if((SDO->endOfTransfer) && (ackseq == SDO->blksize)){
   12422:	4b7c      	ldr	r3, [pc, #496]	; (12614 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x118c>)
   12424:	681b      	ldr	r3, [r3, #0]
   12426:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
   1242a:	2b00      	cmp	r3, #0
   1242c:	d033      	beq.n	12496 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x100e>
   1242e:	4b79      	ldr	r3, [pc, #484]	; (12614 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x118c>)
   12430:	681b      	ldr	r3, [r3, #0]
   12432:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
   12436:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
   1243a:	429a      	cmp	r2, r3
   1243c:	d12b      	bne.n	12496 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x100e>
                    /* first response byte */
                    SDO->CANtxBuff->data[0] = 0xC1 | ((7 - SDO->lastLen) << 2);
   1243e:	4b75      	ldr	r3, [pc, #468]	; (12614 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x118c>)
   12440:	681b      	ldr	r3, [r3, #0]
   12442:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   12446:	4a73      	ldr	r2, [pc, #460]	; (12614 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x118c>)
   12448:	6812      	ldr	r2, [r2, #0]
   1244a:	f892 2078 	ldrb.w	r2, [r2, #120]	; 0x78
   1244e:	f1c2 0207 	rsb	r2, r2, #7
   12452:	0092      	lsls	r2, r2, #2
   12454:	b252      	sxtb	r2, r2
   12456:	f062 023e 	orn	r2, r2, #62	; 0x3e
   1245a:	b252      	sxtb	r2, r2
   1245c:	b2d2      	uxtb	r2, r2
   1245e:	715a      	strb	r2, [r3, #5]

                    /* CRC */
                    if(SDO->crcEnabled)
   12460:	4b6c      	ldr	r3, [pc, #432]	; (12614 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x118c>)
   12462:	681b      	ldr	r3, [r3, #0]
   12464:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
   12468:	2b00      	cmp	r3, #0
   1246a:	d00b      	beq.n	12484 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0xffc>
                        CO_memcpySwap2(&SDO->CANtxBuff->data[1], &SDO->crc);
   1246c:	4b69      	ldr	r3, [pc, #420]	; (12614 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x118c>)
   1246e:	681b      	ldr	r3, [r3, #0]
   12470:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   12474:	1d99      	adds	r1, r3, #6
   12476:	4b67      	ldr	r3, [pc, #412]	; (12614 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x118c>)
   12478:	681b      	ldr	r3, [r3, #0]
   1247a:	3374      	adds	r3, #116	; 0x74
   1247c:	461a      	mov	r2, r3
   1247e:	68f8      	ldr	r0, [r7, #12]
   12480:	4b68      	ldr	r3, [pc, #416]	; (12624 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x119c>)
   12482:	4798      	blx	r3

                    SDO->state = CO_SDO_ST_UPLOAD_BL_END;
   12484:	4b63      	ldr	r3, [pc, #396]	; (12614 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x118c>)
   12486:	681b      	ldr	r3, [r3, #0]
   12488:	2227      	movs	r2, #39	; 0x27
   1248a:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69

                    /* send response */
                    sendResponse = true;
   1248e:	2301      	movs	r3, #1
   12490:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
                    break;
   12494:	e191      	b.n	127ba <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x1332>
                }

                /* move remaining data to the beginning */
                for(i=ackseq*7, j=0; i<SDO->ODF_arg.dataLength; i++, j++)
   12496:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
   1249a:	4613      	mov	r3, r2
   1249c:	00db      	lsls	r3, r3, #3
   1249e:	1a9b      	subs	r3, r3, r2
   124a0:	63fb      	str	r3, [r7, #60]	; 0x3c
   124a2:	2300      	movs	r3, #0
   124a4:	63bb      	str	r3, [r7, #56]	; 0x38
   124a6:	4b5b      	ldr	r3, [pc, #364]	; (12614 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x118c>)
   124a8:	681b      	ldr	r3, [r3, #0]
   124aa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
   124ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   124ae:	429a      	cmp	r2, r3
   124b0:	d912      	bls.n	124d8 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x1050>
                    SDO->ODF_arg.data[j] = SDO->ODF_arg.data[i];
   124b2:	4b58      	ldr	r3, [pc, #352]	; (12614 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x118c>)
   124b4:	681b      	ldr	r3, [r3, #0]
   124b6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   124b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   124ba:	4413      	add	r3, r2
   124bc:	4a55      	ldr	r2, [pc, #340]	; (12614 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x118c>)
   124be:	6812      	ldr	r2, [r2, #0]
   124c0:	6c51      	ldr	r1, [r2, #68]	; 0x44
   124c2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   124c4:	440a      	add	r2, r1
   124c6:	7812      	ldrb	r2, [r2, #0]
   124c8:	701a      	strb	r2, [r3, #0]
                for(i=ackseq*7, j=0; i<SDO->ODF_arg.dataLength; i++, j++)
   124ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   124cc:	3301      	adds	r3, #1
   124ce:	63fb      	str	r3, [r7, #60]	; 0x3c
   124d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   124d2:	3301      	adds	r3, #1
   124d4:	63bb      	str	r3, [r7, #56]	; 0x38
   124d6:	e7e6      	b.n	124a6 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x101e>

                /* set remaining data length in buffer */
                SDO->ODF_arg.dataLength -= ackseq * 7U;
   124d8:	4b4e      	ldr	r3, [pc, #312]	; (12614 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x118c>)
   124da:	6819      	ldr	r1, [r3, #0]
   124dc:	4b4d      	ldr	r3, [pc, #308]	; (12614 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x118c>)
   124de:	681b      	ldr	r3, [r3, #0]
   124e0:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
   124e2:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
   124e6:	4613      	mov	r3, r2
   124e8:	00db      	lsls	r3, r3, #3
   124ea:	1a9b      	subs	r3, r3, r2
   124ec:	1ac3      	subs	r3, r0, r3
   124ee:	64cb      	str	r3, [r1, #76]	; 0x4c

                /* new block size */
                SDO->blksize = SDO->CANrxData[2];
   124f0:	4b48      	ldr	r3, [pc, #288]	; (12614 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x118c>)
   124f2:	681b      	ldr	r3, [r3, #0]
   124f4:	4a47      	ldr	r2, [pc, #284]	; (12614 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x118c>)
   124f6:	6812      	ldr	r2, [r2, #0]
   124f8:	7892      	ldrb	r2, [r2, #2]
   124fa:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

                /* If data type is domain, re-fill the data buffer if necessary and indicated so. */
                if((SDO->ODF_arg.ODdataStorage == 0) && (SDO->ODF_arg.dataLength < (SDO->blksize*7U)) && (!SDO->ODF_arg.lastSegment)){
   124fe:	4b45      	ldr	r3, [pc, #276]	; (12614 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x118c>)
   12500:	681b      	ldr	r3, [r3, #0]
   12502:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   12504:	2b00      	cmp	r3, #0
   12506:	d168      	bne.n	125da <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x1152>
   12508:	4b42      	ldr	r3, [pc, #264]	; (12614 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x118c>)
   1250a:	681b      	ldr	r3, [r3, #0]
   1250c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
   1250e:	4b41      	ldr	r3, [pc, #260]	; (12614 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x118c>)
   12510:	681b      	ldr	r3, [r3, #0]
   12512:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
   12516:	4619      	mov	r1, r3
   12518:	460b      	mov	r3, r1
   1251a:	00db      	lsls	r3, r3, #3
   1251c:	1a5b      	subs	r3, r3, r1
   1251e:	429a      	cmp	r2, r3
   12520:	d25b      	bcs.n	125da <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x1152>
   12522:	4b3c      	ldr	r3, [pc, #240]	; (12614 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x118c>)
   12524:	681b      	ldr	r3, [r3, #0]
   12526:	f893 305f 	ldrb.w	r3, [r3, #95]	; 0x5f
   1252a:	2b00      	cmp	r3, #0
   1252c:	d155      	bne.n	125da <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x1152>
                    /* move the beginning of the data buffer */
                    len = SDO->ODF_arg.dataLength; /* length of valid data in buffer */
   1252e:	4b39      	ldr	r3, [pc, #228]	; (12614 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x118c>)
   12530:	681b      	ldr	r3, [r3, #0]
   12532:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   12534:	643b      	str	r3, [r7, #64]	; 0x40
                    SDO->ODF_arg.data += len;
   12536:	4b37      	ldr	r3, [pc, #220]	; (12614 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x118c>)
   12538:	681b      	ldr	r3, [r3, #0]
   1253a:	4a36      	ldr	r2, [pc, #216]	; (12614 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x118c>)
   1253c:	6812      	ldr	r2, [r2, #0]
   1253e:	6c51      	ldr	r1, [r2, #68]	; 0x44
   12540:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   12542:	440a      	add	r2, r1
   12544:	645a      	str	r2, [r3, #68]	; 0x44
                    SDO->ODF_arg.dataLength = CO_OD_getLength( SDO->entryNo, SDO->ODF_arg.subIndex) - len;
   12546:	4b33      	ldr	r3, [pc, #204]	; (12614 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x118c>)
   12548:	681c      	ldr	r4, [r3, #0]
   1254a:	4b32      	ldr	r3, [pc, #200]	; (12614 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x118c>)
   1254c:	681b      	ldr	r3, [r3, #0]
   1254e:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
   12550:	4b30      	ldr	r3, [pc, #192]	; (12614 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x118c>)
   12552:	681b      	ldr	r3, [r3, #0]
   12554:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
   12558:	461a      	mov	r2, r3
   1255a:	68f8      	ldr	r0, [r7, #12]
   1255c:	4b32      	ldr	r3, [pc, #200]	; (12628 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x11a0>)
   1255e:	4798      	blx	r3
   12560:	4602      	mov	r2, r0
   12562:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   12564:	1ad3      	subs	r3, r2, r3
   12566:	64e3      	str	r3, [r4, #76]	; 0x4c

                    /* read next data from Object dictionary function */
                    abortCode = CO_SDO_readOD( CO_SDO_BUFFER_SIZE);
   12568:	2120      	movs	r1, #32
   1256a:	68f8      	ldr	r0, [r7, #12]
   1256c:	4b2f      	ldr	r3, [pc, #188]	; (1262c <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x11a4>)
   1256e:	4798      	blx	r3
   12570:	62b8      	str	r0, [r7, #40]	; 0x28
                    if(abortCode != 0U){
   12572:	6abb      	ldr	r3, [r7, #40]	; 0x28
   12574:	2b00      	cmp	r3, #0
   12576:	d008      	beq.n	1258a <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x1102>
                        CO_SDO_abort(SDO, abortCode);
   12578:	4b26      	ldr	r3, [pc, #152]	; (12614 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x118c>)
   1257a:	681b      	ldr	r3, [r3, #0]
   1257c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   1257e:	4618      	mov	r0, r3
   12580:	4b26      	ldr	r3, [pc, #152]	; (1261c <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x1194>)
   12582:	4798      	blx	r3
                        return -1;
   12584:	f04f 33ff 	mov.w	r3, #4294967295
   12588:	e133      	b.n	127f2 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x136a>
                    }

                    /* calculate CRC on next bytes, if enabled */
                    if(SDO->crcEnabled){
   1258a:	4b22      	ldr	r3, [pc, #136]	; (12614 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x118c>)
   1258c:	681b      	ldr	r3, [r3, #0]
   1258e:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
   12592:	2b00      	cmp	r3, #0
   12594:	d010      	beq.n	125b8 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x1130>
                        SDO->crc = crc16_ccitt(SDO->ODF_arg.data, SDO->ODF_arg.dataLength, SDO->crc);
   12596:	4b1f      	ldr	r3, [pc, #124]	; (12614 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x118c>)
   12598:	681c      	ldr	r4, [r3, #0]
   1259a:	4b1e      	ldr	r3, [pc, #120]	; (12614 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x118c>)
   1259c:	681b      	ldr	r3, [r3, #0]
   1259e:	6c59      	ldr	r1, [r3, #68]	; 0x44
   125a0:	4b1c      	ldr	r3, [pc, #112]	; (12614 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x118c>)
   125a2:	681b      	ldr	r3, [r3, #0]
   125a4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
   125a6:	4b1b      	ldr	r3, [pc, #108]	; (12614 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x118c>)
   125a8:	681b      	ldr	r3, [r3, #0]
   125aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
   125ac:	b29b      	uxth	r3, r3
   125ae:	68f8      	ldr	r0, [r7, #12]
   125b0:	4d1f      	ldr	r5, [pc, #124]	; (12630 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x11a8>)
   125b2:	47a8      	blx	r5
   125b4:	4603      	mov	r3, r0
   125b6:	6763      	str	r3, [r4, #116]	; 0x74
                    }

                  /* return to the original data buffer */
                    SDO->ODF_arg.data -= len;
   125b8:	4b16      	ldr	r3, [pc, #88]	; (12614 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x118c>)
   125ba:	681b      	ldr	r3, [r3, #0]
   125bc:	4a15      	ldr	r2, [pc, #84]	; (12614 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x118c>)
   125be:	6812      	ldr	r2, [r2, #0]
   125c0:	6c51      	ldr	r1, [r2, #68]	; 0x44
   125c2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   125c4:	4252      	negs	r2, r2
   125c6:	440a      	add	r2, r1
   125c8:	645a      	str	r2, [r3, #68]	; 0x44
                    SDO->ODF_arg.dataLength +=  len;
   125ca:	4b12      	ldr	r3, [pc, #72]	; (12614 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x118c>)
   125cc:	681b      	ldr	r3, [r3, #0]
   125ce:	4a11      	ldr	r2, [pc, #68]	; (12614 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x118c>)
   125d0:	6812      	ldr	r2, [r2, #0]
   125d2:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
   125d4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   125d6:	440a      	add	r2, r1
   125d8:	64da      	str	r2, [r3, #76]	; 0x4c
                }

                /* verify if SDO data buffer is large enough */
                if(((SDO->blksize*7U) > SDO->ODF_arg.dataLength) && (!SDO->ODF_arg.lastSegment)){
   125da:	4b0e      	ldr	r3, [pc, #56]	; (12614 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x118c>)
   125dc:	681b      	ldr	r3, [r3, #0]
   125de:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
   125e2:	461a      	mov	r2, r3
   125e4:	4613      	mov	r3, r2
   125e6:	00db      	lsls	r3, r3, #3
   125e8:	1a9a      	subs	r2, r3, r2
   125ea:	4b0a      	ldr	r3, [pc, #40]	; (12614 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x118c>)
   125ec:	681b      	ldr	r3, [r3, #0]
   125ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   125f0:	429a      	cmp	r2, r3
   125f2:	d921      	bls.n	12638 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x11b0>
   125f4:	4b07      	ldr	r3, [pc, #28]	; (12614 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x118c>)
   125f6:	681b      	ldr	r3, [r3, #0]
   125f8:	f893 305f 	ldrb.w	r3, [r3, #95]	; 0x5f
   125fc:	2b00      	cmp	r3, #0
   125fe:	d11b      	bne.n	12638 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x11b0>
                    CO_SDO_abort(SDO, CO_SDO_AB_BLOCK_SIZE); /* Invalid block size (block mode only). */
   12600:	4b04      	ldr	r3, [pc, #16]	; (12614 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x118c>)
   12602:	681b      	ldr	r3, [r3, #0]
   12604:	490b      	ldr	r1, [pc, #44]	; (12634 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x11ac>)
   12606:	4618      	mov	r0, r3
   12608:	4b04      	ldr	r3, [pc, #16]	; (1261c <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x1194>)
   1260a:	4798      	blx	r3
                    return -1;
   1260c:	f04f 33ff 	mov.w	r3, #4294967295
   12610:	e0ef      	b.n	127f2 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x136a>
   12612:	bf00      	nop
   12614:	20001afc 	.word	0x20001afc
   12618:	05040001 	.word	0x05040001
   1261c:	000113fd 	.word	0x000113fd
   12620:	05040003 	.word	0x05040003
   12624:	00010881 	.word	0x00010881
   12628:	00010dd1 	.word	0x00010dd1
   1262c:	000111a1 	.word	0x000111a1
   12630:	00012e3d 	.word	0x00012e3d
   12634:	05040002 	.word	0x05040002
                }

                SDO->bufferOffset = 0U;
   12638:	4b70      	ldr	r3, [pc, #448]	; (127fc <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x1374>)
   1263a:	681b      	ldr	r3, [r3, #0]
   1263c:	2200      	movs	r2, #0
   1263e:	639a      	str	r2, [r3, #56]	; 0x38
                SDO->sequence = 0U;
   12640:	4b6e      	ldr	r3, [pc, #440]	; (127fc <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x1374>)
   12642:	681b      	ldr	r3, [r3, #0]
   12644:	2200      	movs	r2, #0
   12646:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
                SDO->endOfTransfer = false;
   1264a:	4b6c      	ldr	r3, [pc, #432]	; (127fc <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x1374>)
   1264c:	681b      	ldr	r3, [r3, #0]
   1264e:	2200      	movs	r2, #0
   12650:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79

                /* clear flag here */
                SDO->CANrxNew = false;
   12654:	4b69      	ldr	r3, [pc, #420]	; (127fc <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x1374>)
   12656:	681b      	ldr	r3, [r3, #0]
   12658:	2200      	movs	r2, #0
   1265a:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
            }

            /* return, if all segments was already transfered or on end of transfer */
            if((SDO->sequence == SDO->blksize) || (SDO->endOfTransfer)){
   1265e:	4b67      	ldr	r3, [pc, #412]	; (127fc <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x1374>)
   12660:	681b      	ldr	r3, [r3, #0]
   12662:	f893 206a 	ldrb.w	r2, [r3, #106]	; 0x6a
   12666:	4b65      	ldr	r3, [pc, #404]	; (127fc <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x1374>)
   12668:	681b      	ldr	r3, [r3, #0]
   1266a:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
   1266e:	429a      	cmp	r2, r3
   12670:	d005      	beq.n	1267e <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x11f6>
   12672:	4b62      	ldr	r3, [pc, #392]	; (127fc <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x1374>)
   12674:	681b      	ldr	r3, [r3, #0]
   12676:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
   1267a:	2b00      	cmp	r3, #0
   1267c:	d001      	beq.n	12682 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x11fa>
                return 1;/* don't clear the SDO->CANrxNew flag, so return directly */
   1267e:	2301      	movs	r3, #1
   12680:	e0b7      	b.n	127f2 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x136a>
            }

            /* reset timeout */
            SDO->timeoutTimer = 0;
   12682:	4b5e      	ldr	r3, [pc, #376]	; (127fc <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x1374>)
   12684:	681b      	ldr	r3, [r3, #0]
   12686:	2200      	movs	r2, #0
   12688:	66da      	str	r2, [r3, #108]	; 0x6c

            /* calculate length to be sent */
            len = SDO->ODF_arg.dataLength - SDO->bufferOffset;
   1268a:	4b5c      	ldr	r3, [pc, #368]	; (127fc <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x1374>)
   1268c:	681b      	ldr	r3, [r3, #0]
   1268e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
   12690:	4b5a      	ldr	r3, [pc, #360]	; (127fc <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x1374>)
   12692:	681b      	ldr	r3, [r3, #0]
   12694:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   12696:	1ad3      	subs	r3, r2, r3
   12698:	643b      	str	r3, [r7, #64]	; 0x40
            if(len > 7U){
   1269a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1269c:	2b07      	cmp	r3, #7
   1269e:	d901      	bls.n	126a4 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x121c>
                len = 7U;
   126a0:	2307      	movs	r3, #7
   126a2:	643b      	str	r3, [r7, #64]	; 0x40
            }

            /* fill response data bytes */
            for(i=0U; i<len; i++){
   126a4:	2300      	movs	r3, #0
   126a6:	63fb      	str	r3, [r7, #60]	; 0x3c
   126a8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   126aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   126ac:	429a      	cmp	r2, r3
   126ae:	d215      	bcs.n	126dc <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x1254>
                SDO->CANtxBuff->data[i+1] = SDO->ODF_arg.data[SDO->bufferOffset++];
   126b0:	4b52      	ldr	r3, [pc, #328]	; (127fc <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x1374>)
   126b2:	681b      	ldr	r3, [r3, #0]
   126b4:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
   126b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   126ba:	1c59      	adds	r1, r3, #1
   126bc:	4b4f      	ldr	r3, [pc, #316]	; (127fc <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x1374>)
   126be:	681b      	ldr	r3, [r3, #0]
   126c0:	6c5c      	ldr	r4, [r3, #68]	; 0x44
   126c2:	4b4e      	ldr	r3, [pc, #312]	; (127fc <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x1374>)
   126c4:	681a      	ldr	r2, [r3, #0]
   126c6:	6b93      	ldr	r3, [r2, #56]	; 0x38
   126c8:	1c5d      	adds	r5, r3, #1
   126ca:	6395      	str	r5, [r2, #56]	; 0x38
   126cc:	4423      	add	r3, r4
   126ce:	781a      	ldrb	r2, [r3, #0]
   126d0:	1843      	adds	r3, r0, r1
   126d2:	715a      	strb	r2, [r3, #5]
            for(i=0U; i<len; i++){
   126d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   126d6:	3301      	adds	r3, #1
   126d8:	63fb      	str	r3, [r7, #60]	; 0x3c
   126da:	e7e5      	b.n	126a8 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x1220>
            }

            /* first response byte */
            SDO->CANtxBuff->data[0] = ++SDO->sequence;
   126dc:	4b47      	ldr	r3, [pc, #284]	; (127fc <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x1374>)
   126de:	681b      	ldr	r3, [r3, #0]
   126e0:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
   126e4:	4b45      	ldr	r3, [pc, #276]	; (127fc <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x1374>)
   126e6:	681b      	ldr	r3, [r3, #0]
   126e8:	f893 106a 	ldrb.w	r1, [r3, #106]	; 0x6a
   126ec:	3101      	adds	r1, #1
   126ee:	b2c9      	uxtb	r1, r1
   126f0:	f883 106a 	strb.w	r1, [r3, #106]	; 0x6a
   126f4:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
   126f8:	7153      	strb	r3, [r2, #5]

            /* verify end of transfer */
            if((SDO->bufferOffset == SDO->ODF_arg.dataLength) && (SDO->ODF_arg.lastSegment)){
   126fa:	4b40      	ldr	r3, [pc, #256]	; (127fc <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x1374>)
   126fc:	681b      	ldr	r3, [r3, #0]
   126fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   12700:	4b3e      	ldr	r3, [pc, #248]	; (127fc <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x1374>)
   12702:	681b      	ldr	r3, [r3, #0]
   12704:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   12706:	429a      	cmp	r2, r3
   12708:	d125      	bne.n	12756 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x12ce>
   1270a:	4b3c      	ldr	r3, [pc, #240]	; (127fc <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x1374>)
   1270c:	681b      	ldr	r3, [r3, #0]
   1270e:	f893 305f 	ldrb.w	r3, [r3, #95]	; 0x5f
   12712:	2b00      	cmp	r3, #0
   12714:	d01f      	beq.n	12756 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x12ce>
                SDO->CANtxBuff->data[0] |= 0x80;
   12716:	4b39      	ldr	r3, [pc, #228]	; (127fc <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x1374>)
   12718:	681b      	ldr	r3, [r3, #0]
   1271a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   1271e:	4a37      	ldr	r2, [pc, #220]	; (127fc <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x1374>)
   12720:	6812      	ldr	r2, [r2, #0]
   12722:	f8d2 2084 	ldr.w	r2, [r2, #132]	; 0x84
   12726:	7952      	ldrb	r2, [r2, #5]
   12728:	f062 027f 	orn	r2, r2, #127	; 0x7f
   1272c:	b2d2      	uxtb	r2, r2
   1272e:	715a      	strb	r2, [r3, #5]
                SDO->lastLen = len;
   12730:	4b32      	ldr	r3, [pc, #200]	; (127fc <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x1374>)
   12732:	681b      	ldr	r3, [r3, #0]
   12734:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   12736:	b2d2      	uxtb	r2, r2
   12738:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
                SDO->blksize = SDO->sequence;
   1273c:	4b2f      	ldr	r3, [pc, #188]	; (127fc <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x1374>)
   1273e:	681b      	ldr	r3, [r3, #0]
   12740:	4a2e      	ldr	r2, [pc, #184]	; (127fc <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x1374>)
   12742:	6812      	ldr	r2, [r2, #0]
   12744:	f892 206a 	ldrb.w	r2, [r2, #106]	; 0x6a
   12748:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
                SDO->endOfTransfer = true;
   1274c:	4b2b      	ldr	r3, [pc, #172]	; (127fc <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x1374>)
   1274e:	681b      	ldr	r3, [r3, #0]
   12750:	2201      	movs	r2, #1
   12752:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
            }

            /* send response */
             canopen_driver->CAN_Send(SDO->CANtxBuff);
   12756:	4b2a      	ldr	r3, [pc, #168]	; (12800 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x1378>)
   12758:	681a      	ldr	r2, [r3, #0]
   1275a:	4b28      	ldr	r3, [pc, #160]	; (127fc <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x1374>)
   1275c:	681b      	ldr	r3, [r3, #0]
   1275e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   12762:	4619      	mov	r1, r3
   12764:	4610      	mov	r0, r2
   12766:	4b27      	ldr	r3, [pc, #156]	; (12804 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x137c>)
   12768:	4798      	blx	r3

            /* Set timerNext_ms to 0 to inform OS to call this function again without delay. */
            if(timerNext_ms != NULL){
   1276a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   1276c:	2b00      	cmp	r3, #0
   1276e:	d002      	beq.n	12776 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x12ee>
                *timerNext_ms = 0;
   12770:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   12772:	2200      	movs	r2, #0
   12774:	601a      	str	r2, [r3, #0]
            }

            /* don't clear the SDO->CANrxNew flag, so return directly */
            return 1;
   12776:	2301      	movs	r3, #1
   12778:	e03b      	b.n	127f2 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x136a>
        }

        case CO_SDO_ST_UPLOAD_BL_END:{
            /* verify client command specifier */
            if((SDO->CANrxData[0]&0xE1U) != 0xA1U){
   1277a:	4b20      	ldr	r3, [pc, #128]	; (127fc <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x1374>)
   1277c:	681b      	ldr	r3, [r3, #0]
   1277e:	781b      	ldrb	r3, [r3, #0]
   12780:	f003 03e1 	and.w	r3, r3, #225	; 0xe1
   12784:	2ba1      	cmp	r3, #161	; 0xa1
   12786:	d008      	beq.n	1279a <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x1312>
                CO_SDO_abort(SDO, CO_SDO_AB_CMD);/* Client command specifier not valid or unknown. */
   12788:	4b1c      	ldr	r3, [pc, #112]	; (127fc <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x1374>)
   1278a:	681b      	ldr	r3, [r3, #0]
   1278c:	491e      	ldr	r1, [pc, #120]	; (12808 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x1380>)
   1278e:	4618      	mov	r0, r3
   12790:	4b1e      	ldr	r3, [pc, #120]	; (1280c <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x1384>)
   12792:	4798      	blx	r3
                return -1;
   12794:	f04f 33ff 	mov.w	r3, #4294967295
   12798:	e02b      	b.n	127f2 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x136a>
            }

            SDO->state = CO_SDO_ST_IDLE;
   1279a:	4b18      	ldr	r3, [pc, #96]	; (127fc <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x1374>)
   1279c:	681b      	ldr	r3, [r3, #0]
   1279e:	2200      	movs	r2, #0
   127a0:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
            break;
   127a4:	e009      	b.n	127ba <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x1332>
        }

        default:{
            CO_SDO_abort(SDO, CO_SDO_AB_DEVICE_INCOMPAT);/* general internal incompatibility in the device */
   127a6:	4b15      	ldr	r3, [pc, #84]	; (127fc <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x1374>)
   127a8:	681b      	ldr	r3, [r3, #0]
   127aa:	4919      	ldr	r1, [pc, #100]	; (12810 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x1388>)
   127ac:	4618      	mov	r0, r3
   127ae:	4b17      	ldr	r3, [pc, #92]	; (1280c <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x1384>)
   127b0:	4798      	blx	r3
            return -1;
   127b2:	f04f 33ff 	mov.w	r3, #4294967295
   127b6:	e01c      	b.n	127f2 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x136a>
            break;
   127b8:	bf00      	nop
        }
    }

    /* free buffer and send message */
    SDO->CANrxNew = false;
   127ba:	4b10      	ldr	r3, [pc, #64]	; (127fc <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x1374>)
   127bc:	681b      	ldr	r3, [r3, #0]
   127be:	2200      	movs	r2, #0
   127c0:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
    if(sendResponse) {
   127c4:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
   127c8:	2b00      	cmp	r3, #0
   127ca:	d009      	beq.n	127e0 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x1358>
        canopen_driver->CAN_Send(SDO->CANtxBuff);
   127cc:	4b0c      	ldr	r3, [pc, #48]	; (12800 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x1378>)
   127ce:	681a      	ldr	r2, [r3, #0]
   127d0:	4b0a      	ldr	r3, [pc, #40]	; (127fc <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x1374>)
   127d2:	681b      	ldr	r3, [r3, #0]
   127d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   127d8:	4619      	mov	r1, r3
   127da:	4610      	mov	r0, r2
   127dc:	4b09      	ldr	r3, [pc, #36]	; (12804 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x137c>)
   127de:	4798      	blx	r3
    }

    if(SDO->state != CO_SDO_ST_IDLE){
   127e0:	4b06      	ldr	r3, [pc, #24]	; (127fc <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x1374>)
   127e2:	681b      	ldr	r3, [r3, #0]
   127e4:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
   127e8:	2b00      	cmp	r3, #0
   127ea:	d001      	beq.n	127f0 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x1368>
        return 1;
   127ec:	2301      	movs	r3, #1
   127ee:	e000      	b.n	127f2 <_ZN12CO_SDO_Class14CO_SDO_processEhmmPm+0x136a>
    }

    return 0;
   127f0:	2300      	movs	r3, #0
}
   127f2:	4618      	mov	r0, r3
   127f4:	3748      	adds	r7, #72	; 0x48
   127f6:	46bd      	mov	sp, r7
   127f8:	bdb0      	pop	{r4, r5, r7, pc}
   127fa:	bf00      	nop
   127fc:	20001afc 	.word	0x20001afc
   12800:	20001abc 	.word	0x20001abc
   12804:	0000dc55 	.word	0x0000dc55
   12808:	05040001 	.word	0x05040001
   1280c:	000113fd 	.word	0x000113fd
   12810:	06040047 	.word	0x06040047

00012814 <_ZN13CO_SYNC_ClassC1Ev>:
#include "string.h"

static CO_CANtx_t local_sync_tx_buffer;

// default constructor
CO_SYNC_Class::CO_SYNC_Class()
   12814:	b480      	push	{r7}
   12816:	b083      	sub	sp, #12
   12818:	af00      	add	r7, sp, #0
   1281a:	6078      	str	r0, [r7, #4]
{
} //CO_SYNC_Class
   1281c:	687b      	ldr	r3, [r7, #4]
   1281e:	4618      	mov	r0, r3
   12820:	370c      	adds	r7, #12
   12822:	46bd      	mov	sp, r7
   12824:	bc80      	pop	{r7}
   12826:	4770      	bx	lr

00012828 <_ZN13CO_SYNC_ClassD1Ev>:

// default destructor
CO_SYNC_Class::~CO_SYNC_Class()
   12828:	b480      	push	{r7}
   1282a:	b083      	sub	sp, #12
   1282c:	af00      	add	r7, sp, #0
   1282e:	6078      	str	r0, [r7, #4]
{
} //~CO_SYNC_Class
   12830:	687b      	ldr	r3, [r7, #4]
   12832:	4618      	mov	r0, r3
   12834:	370c      	adds	r7, #12
   12836:	46bd      	mov	sp, r7
   12838:	bc80      	pop	{r7}
   1283a:	4770      	bx	lr

0001283c <_ZL15CO_SYNC_receivePvPK13CO_CANrxMsg_t>:
 *
 * Function will be called (by CAN receive interrupt) every time, when CAN
 * message with correct identifier will be received. For more information and
 * description of parameters see file CO_driver.h.
 */
static void CO_SYNC_receive(void *object, const CO_CANrxMsg_t *msg){
   1283c:	b480      	push	{r7}
   1283e:	b085      	sub	sp, #20
   12840:	af00      	add	r7, sp, #0
   12842:	6078      	str	r0, [r7, #4]
   12844:	6039      	str	r1, [r7, #0]
	
    CO_SYNC_t *SYNC;
    uint8_t operState;

    SYNC = (CO_SYNC_t*)object;   /* this is the correct pointer type of the first argument */
   12846:	687b      	ldr	r3, [r7, #4]
   12848:	60fb      	str	r3, [r7, #12]
    operState = *SYNC->operatingState;
   1284a:	68fb      	ldr	r3, [r7, #12]
   1284c:	685b      	ldr	r3, [r3, #4]
   1284e:	781b      	ldrb	r3, [r3, #0]
   12850:	72fb      	strb	r3, [r7, #11]

    if((operState == CO_NMT_OPERATIONAL) || (operState == CO_NMT_PRE_OPERATIONAL)){
   12852:	7afb      	ldrb	r3, [r7, #11]
   12854:	2b05      	cmp	r3, #5
   12856:	d002      	beq.n	1285e <_ZL15CO_SYNC_receivePvPK13CO_CANrxMsg_t+0x22>
   12858:	7afb      	ldrb	r3, [r7, #11]
   1285a:	2b7f      	cmp	r3, #127	; 0x7f
   1285c:	d132      	bne.n	128c4 <_ZL15CO_SYNC_receivePvPK13CO_CANrxMsg_t+0x88>
        if(SYNC->counterOverflowValue == 0){
   1285e:	68fb      	ldr	r3, [r7, #12]
   12860:	7e1b      	ldrb	r3, [r3, #24]
   12862:	2b00      	cmp	r3, #0
   12864:	d10e      	bne.n	12884 <_ZL15CO_SYNC_receivePvPK13CO_CANrxMsg_t+0x48>
            if(msg->DLC == 0U){
   12866:	683b      	ldr	r3, [r7, #0]
   12868:	7d1b      	ldrb	r3, [r3, #20]
   1286a:	2b00      	cmp	r3, #0
   1286c:	d103      	bne.n	12876 <_ZL15CO_SYNC_receivePvPK13CO_CANrxMsg_t+0x3a>
                SYNC->CANrxNew = true;
   1286e:	68fb      	ldr	r3, [r7, #12]
   12870:	2201      	movs	r2, #1
   12872:	769a      	strb	r2, [r3, #26]
   12874:	e018      	b.n	128a8 <_ZL15CO_SYNC_receivePvPK13CO_CANrxMsg_t+0x6c>
            }
            else{
                SYNC->receiveError = (uint32_t)msg->DLC | 0x0100U;
   12876:	683b      	ldr	r3, [r7, #0]
   12878:	7d1b      	ldrb	r3, [r3, #20]
   1287a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
   1287e:	68fb      	ldr	r3, [r7, #12]
   12880:	625a      	str	r2, [r3, #36]	; 0x24
   12882:	e011      	b.n	128a8 <_ZL15CO_SYNC_receivePvPK13CO_CANrxMsg_t+0x6c>
            }
        }
        else{
            if(msg->DLC == 1U){
   12884:	683b      	ldr	r3, [r7, #0]
   12886:	7d1b      	ldrb	r3, [r3, #20]
   12888:	2b01      	cmp	r3, #1
   1288a:	d107      	bne.n	1289c <_ZL15CO_SYNC_receivePvPK13CO_CANrxMsg_t+0x60>
                SYNC->counter = msg->data[0];
   1288c:	683b      	ldr	r3, [r7, #0]
   1288e:	7d5a      	ldrb	r2, [r3, #21]
   12890:	68fb      	ldr	r3, [r7, #12]
   12892:	771a      	strb	r2, [r3, #28]
                SYNC->CANrxNew = true;
   12894:	68fb      	ldr	r3, [r7, #12]
   12896:	2201      	movs	r2, #1
   12898:	769a      	strb	r2, [r3, #26]
   1289a:	e005      	b.n	128a8 <_ZL15CO_SYNC_receivePvPK13CO_CANrxMsg_t+0x6c>
            }
            else{
                SYNC->receiveError = (uint32_t)msg->DLC | 0x0200U;
   1289c:	683b      	ldr	r3, [r7, #0]
   1289e:	7d1b      	ldrb	r3, [r3, #20]
   128a0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
   128a4:	68fb      	ldr	r3, [r7, #12]
   128a6:	625a      	str	r2, [r3, #36]	; 0x24
            }
        }
        if(SYNC->CANrxNew) {
   128a8:	68fb      	ldr	r3, [r7, #12]
   128aa:	7e9b      	ldrb	r3, [r3, #26]
   128ac:	2b00      	cmp	r3, #0
   128ae:	d009      	beq.n	128c4 <_ZL15CO_SYNC_receivePvPK13CO_CANrxMsg_t+0x88>
            SYNC->CANrxToggle = SYNC->CANrxToggle ? false : true;
   128b0:	68fb      	ldr	r3, [r7, #12]
   128b2:	7edb      	ldrb	r3, [r3, #27]
   128b4:	2b00      	cmp	r3, #0
   128b6:	bf0c      	ite	eq
   128b8:	2301      	moveq	r3, #1
   128ba:	2300      	movne	r3, #0
   128bc:	b2db      	uxtb	r3, r3
   128be:	461a      	mov	r2, r3
   128c0:	68fb      	ldr	r3, [r7, #12]
   128c2:	76da      	strb	r2, [r3, #27]
        }
    }
}
   128c4:	bf00      	nop
   128c6:	3714      	adds	r7, #20
   128c8:	46bd      	mov	sp, r7
   128ca:	bc80      	pop	{r7}
   128cc:	4770      	bx	lr
	...

000128d0 <_ZL11CO_ODF_1005P12CO_ODF_arg_t>:
/*
 * Function for accessing _COB ID SYNC Message_ (index 0x1005) from SDO server.
 *
 * For more information see file CO_SDO.h.
 */
static CO_SDO_abortCode_t CO_ODF_1005(CO_ODF_arg_t *ODF_arg){
   128d0:	b590      	push	{r4, r7, lr}
   128d2:	b08b      	sub	sp, #44	; 0x2c
   128d4:	af04      	add	r7, sp, #16
   128d6:	6078      	str	r0, [r7, #4]
    CO_SYNC_t *SYNC;
    uint32_t value;
    CO_SDO_abortCode_t ret = CO_SDO_AB_NONE;
   128d8:	2300      	movs	r3, #0
   128da:	617b      	str	r3, [r7, #20]

    SYNC = (CO_SYNC_t*) ODF_arg->object;
   128dc:	687b      	ldr	r3, [r7, #4]
   128de:	681b      	ldr	r3, [r3, #0]
   128e0:	60fb      	str	r3, [r7, #12]
    value =canopen_driver->CO_getUint32(ODF_arg->data);
   128e2:	4b35      	ldr	r3, [pc, #212]	; (129b8 <_ZL11CO_ODF_1005P12CO_ODF_arg_t+0xe8>)
   128e4:	681b      	ldr	r3, [r3, #0]
   128e6:	1d1a      	adds	r2, r3, #4
   128e8:	687b      	ldr	r3, [r7, #4]
   128ea:	685b      	ldr	r3, [r3, #4]
   128ec:	4619      	mov	r1, r3
   128ee:	4610      	mov	r0, r2
   128f0:	4b32      	ldr	r3, [pc, #200]	; (129bc <_ZL11CO_ODF_1005P12CO_ODF_arg_t+0xec>)
   128f2:	4798      	blx	r3
   128f4:	60b8      	str	r0, [r7, #8]

    if(!ODF_arg->reading){
   128f6:	687b      	ldr	r3, [r7, #4]
   128f8:	7f5b      	ldrb	r3, [r3, #29]
   128fa:	2b00      	cmp	r3, #0
   128fc:	d157      	bne.n	129ae <_ZL11CO_ODF_1005P12CO_ODF_arg_t+0xde>
        uint8_t configureSyncProducer = 0;
   128fe:	2300      	movs	r3, #0
   12900:	74fb      	strb	r3, [r7, #19]

        /* only 11-bit CAN identifier is supported */
        if(value & 0x20000000UL){
   12902:	68bb      	ldr	r3, [r7, #8]
   12904:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
   12908:	2b00      	cmp	r3, #0
   1290a:	d002      	beq.n	12912 <_ZL11CO_ODF_1005P12CO_ODF_arg_t+0x42>
            ret = CO_SDO_AB_INVALID_VALUE;
   1290c:	4b2c      	ldr	r3, [pc, #176]	; (129c0 <_ZL11CO_ODF_1005P12CO_ODF_arg_t+0xf0>)
   1290e:	617b      	str	r3, [r7, #20]
   12910:	e00d      	b.n	1292e <_ZL11CO_ODF_1005P12CO_ODF_arg_t+0x5e>
        }
        else{
            /* is 'generate Sync messge' bit set? */
            if(value & 0x40000000UL){
   12912:	68bb      	ldr	r3, [r7, #8]
   12914:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
   12918:	2b00      	cmp	r3, #0
   1291a:	d008      	beq.n	1292e <_ZL11CO_ODF_1005P12CO_ODF_arg_t+0x5e>
                /* if bit was set before, value can not be changed */
                if(SYNC->isProducer){
   1291c:	68fb      	ldr	r3, [r7, #12]
   1291e:	7a1b      	ldrb	r3, [r3, #8]
   12920:	2b00      	cmp	r3, #0
   12922:	d002      	beq.n	1292a <_ZL11CO_ODF_1005P12CO_ODF_arg_t+0x5a>
                    ret = CO_SDO_AB_DATA_DEV_STATE;
   12924:	4b27      	ldr	r3, [pc, #156]	; (129c4 <_ZL11CO_ODF_1005P12CO_ODF_arg_t+0xf4>)
   12926:	617b      	str	r3, [r7, #20]
   12928:	e001      	b.n	1292e <_ZL11CO_ODF_1005P12CO_ODF_arg_t+0x5e>
                }
                else{
                    configureSyncProducer = 1;
   1292a:	2301      	movs	r3, #1
   1292c:	74fb      	strb	r3, [r7, #19]
                }
            }
        }

        /* configure sync producer and consumer */
        if(ret == CO_SDO_AB_NONE){
   1292e:	697b      	ldr	r3, [r7, #20]
   12930:	2b00      	cmp	r3, #0
   12932:	d13c      	bne.n	129ae <_ZL11CO_ODF_1005P12CO_ODF_arg_t+0xde>
            SYNC->COB_ID = (uint32_t)(value & 0x7FFU);
   12934:	68bb      	ldr	r3, [r7, #8]
   12936:	f3c3 020a 	ubfx	r2, r3, #0, #11
   1293a:	68fb      	ldr	r3, [r7, #12]
   1293c:	60da      	str	r2, [r3, #12]

            if(configureSyncProducer){
   1293e:	7cfb      	ldrb	r3, [r7, #19]
   12940:	2b00      	cmp	r3, #0
   12942:	d021      	beq.n	12988 <_ZL11CO_ODF_1005P12CO_ODF_arg_t+0xb8>
                uint8_t len = 0U;
   12944:	2300      	movs	r3, #0
   12946:	74bb      	strb	r3, [r7, #18]
                if(SYNC->counterOverflowValue != 0U){
   12948:	68fb      	ldr	r3, [r7, #12]
   1294a:	7e1b      	ldrb	r3, [r3, #24]
   1294c:	2b00      	cmp	r3, #0
   1294e:	d007      	beq.n	12960 <_ZL11CO_ODF_1005P12CO_ODF_arg_t+0x90>
                    len = 1U;
   12950:	2301      	movs	r3, #1
   12952:	74bb      	strb	r3, [r7, #18]
                    SYNC->counter = 0U;
   12954:	68fb      	ldr	r3, [r7, #12]
   12956:	2200      	movs	r2, #0
   12958:	771a      	strb	r2, [r3, #28]
                    SYNC->timer = 0U;
   1295a:	68fb      	ldr	r3, [r7, #12]
   1295c:	2200      	movs	r2, #0
   1295e:	621a      	str	r2, [r3, #32]
                }
                SYNC->CANtxBuff = canopen_driver->CAN_Tx_BufferInit(
   12960:	4b15      	ldr	r3, [pc, #84]	; (129b8 <_ZL11CO_ODF_1005P12CO_ODF_arg_t+0xe8>)
   12962:	6818      	ldr	r0, [r3, #0]
   12964:	68fb      	ldr	r3, [r7, #12]
   12966:	6b99      	ldr	r1, [r3, #56]	; 0x38
   12968:	68fb      	ldr	r3, [r7, #12]
   1296a:	68da      	ldr	r2, [r3, #12]
   1296c:	2300      	movs	r3, #0
   1296e:	9301      	str	r3, [sp, #4]
   12970:	7cbb      	ldrb	r3, [r7, #18]
   12972:	9300      	str	r3, [sp, #0]
   12974:	2300      	movs	r3, #0
   12976:	4c14      	ldr	r4, [pc, #80]	; (129c8 <_ZL11CO_ODF_1005P12CO_ODF_arg_t+0xf8>)
   12978:	47a0      	blx	r4
   1297a:	4602      	mov	r2, r0
   1297c:	68fb      	ldr	r3, [r7, #12]
   1297e:	635a      	str	r2, [r3, #52]	; 0x34
                        SYNC->CANdevTxIdx,      /* index of specific buffer inside CAN module */
                        SYNC->COB_ID,           /* CAN identifier */
                        0,                      /* rtr */
                        len,                    /* number of data bytes */
                        0);                     /* synchronous message flag bit */
                SYNC->isProducer = true;
   12980:	68fb      	ldr	r3, [r7, #12]
   12982:	2201      	movs	r2, #1
   12984:	721a      	strb	r2, [r3, #8]
   12986:	e002      	b.n	1298e <_ZL11CO_ODF_1005P12CO_ODF_arg_t+0xbe>
            }
            else{
                SYNC->isProducer = false;
   12988:	68fb      	ldr	r3, [r7, #12]
   1298a:	2200      	movs	r2, #0
   1298c:	721a      	strb	r2, [r3, #8]
            }

            canopen_driver->CAN_Rx_BufferInit(
   1298e:	4b0a      	ldr	r3, [pc, #40]	; (129b8 <_ZL11CO_ODF_1005P12CO_ODF_arg_t+0xe8>)
   12990:	6818      	ldr	r0, [r3, #0]
   12992:	68fb      	ldr	r3, [r7, #12]
   12994:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
   12996:	68fb      	ldr	r3, [r7, #12]
   12998:	68da      	ldr	r2, [r3, #12]
                    SYNC->CANdevRxIdx,      /* rx buffer index */
                    SYNC->COB_ID,           /* CAN identifier */
                    0x7FF,                  /* mask */
                    0,                      /* rtr */
                    (void*)SYNC,            /* object passed to receive function */
                    CO_SYNC_receive);       /* this function will process received message */
   1299a:	4b0c      	ldr	r3, [pc, #48]	; (129cc <_ZL11CO_ODF_1005P12CO_ODF_arg_t+0xfc>)
   1299c:	9302      	str	r3, [sp, #8]
   1299e:	68fb      	ldr	r3, [r7, #12]
   129a0:	9301      	str	r3, [sp, #4]
   129a2:	2300      	movs	r3, #0
   129a4:	9300      	str	r3, [sp, #0]
   129a6:	f240 73ff 	movw	r3, #2047	; 0x7ff
   129aa:	4c09      	ldr	r4, [pc, #36]	; (129d0 <_ZL11CO_ODF_1005P12CO_ODF_arg_t+0x100>)
   129ac:	47a0      	blx	r4
        }
    }

    return ret;
   129ae:	697b      	ldr	r3, [r7, #20]
}
   129b0:	4618      	mov	r0, r3
   129b2:	371c      	adds	r7, #28
   129b4:	46bd      	mov	sp, r7
   129b6:	bd90      	pop	{r4, r7, pc}
   129b8:	20001abc 	.word	0x20001abc
   129bc:	00010815 	.word	0x00010815
   129c0:	06090030 	.word	0x06090030
   129c4:	08000022 	.word	0x08000022
   129c8:	0000dba9 	.word	0x0000dba9
   129cc:	0001283d 	.word	0x0001283d
   129d0:	0000daa9 	.word	0x0000daa9

000129d4 <_ZL11CO_ODF_1006P12CO_ODF_arg_t>:
/*
 * Function for accessing _Communication cycle period_ (index 0x1006) from SDO server.
 *
 * For more information see file CO_SDO.h.
 */
static CO_SDO_abortCode_t CO_ODF_1006(CO_ODF_arg_t *ODF_arg){
   129d4:	b580      	push	{r7, lr}
   129d6:	b086      	sub	sp, #24
   129d8:	af00      	add	r7, sp, #0
   129da:	6078      	str	r0, [r7, #4]
    CO_SYNC_t *SYNC;
    uint32_t value;
    CO_SDO_abortCode_t ret = CO_SDO_AB_NONE;
   129dc:	2300      	movs	r3, #0
   129de:	617b      	str	r3, [r7, #20]

    SYNC = (CO_SYNC_t*) ODF_arg->object;
   129e0:	687b      	ldr	r3, [r7, #4]
   129e2:	681b      	ldr	r3, [r3, #0]
   129e4:	613b      	str	r3, [r7, #16]
    value = canopen_driver->CO_getUint32(ODF_arg->data);
   129e6:	4b19      	ldr	r3, [pc, #100]	; (12a4c <_ZL11CO_ODF_1006P12CO_ODF_arg_t+0x78>)
   129e8:	681b      	ldr	r3, [r3, #0]
   129ea:	1d1a      	adds	r2, r3, #4
   129ec:	687b      	ldr	r3, [r7, #4]
   129ee:	685b      	ldr	r3, [r3, #4]
   129f0:	4619      	mov	r1, r3
   129f2:	4610      	mov	r0, r2
   129f4:	4b16      	ldr	r3, [pc, #88]	; (12a50 <_ZL11CO_ODF_1006P12CO_ODF_arg_t+0x7c>)
   129f6:	4798      	blx	r3
   129f8:	60f8      	str	r0, [r7, #12]

    if(!ODF_arg->reading){
   129fa:	687b      	ldr	r3, [r7, #4]
   129fc:	7f5b      	ldrb	r3, [r3, #29]
   129fe:	2b00      	cmp	r3, #0
   12a00:	d11f      	bne.n	12a42 <_ZL11CO_ODF_1006P12CO_ODF_arg_t+0x6e>
        /* period transition from 0 to something */
        if((SYNC->periodTime == 0) && (value != 0)){
   12a02:	693b      	ldr	r3, [r7, #16]
   12a04:	691b      	ldr	r3, [r3, #16]
   12a06:	2b00      	cmp	r3, #0
   12a08:	d105      	bne.n	12a16 <_ZL11CO_ODF_1006P12CO_ODF_arg_t+0x42>
   12a0a:	68fb      	ldr	r3, [r7, #12]
   12a0c:	2b00      	cmp	r3, #0
   12a0e:	d002      	beq.n	12a16 <_ZL11CO_ODF_1006P12CO_ODF_arg_t+0x42>
            SYNC->counter = 0;
   12a10:	693b      	ldr	r3, [r7, #16]
   12a12:	2200      	movs	r2, #0
   12a14:	771a      	strb	r2, [r3, #28]
        }

        SYNC->periodTime = value;
   12a16:	693b      	ldr	r3, [r7, #16]
   12a18:	68fa      	ldr	r2, [r7, #12]
   12a1a:	611a      	str	r2, [r3, #16]
        SYNC->periodTimeoutTime = (value / 2U) * 3U;
   12a1c:	68fb      	ldr	r3, [r7, #12]
   12a1e:	085a      	lsrs	r2, r3, #1
   12a20:	4613      	mov	r3, r2
   12a22:	005b      	lsls	r3, r3, #1
   12a24:	441a      	add	r2, r3
   12a26:	693b      	ldr	r3, [r7, #16]
   12a28:	615a      	str	r2, [r3, #20]
        /* overflow? */
        if(SYNC->periodTimeoutTime < value){
   12a2a:	693b      	ldr	r3, [r7, #16]
   12a2c:	695a      	ldr	r2, [r3, #20]
   12a2e:	68fb      	ldr	r3, [r7, #12]
   12a30:	429a      	cmp	r2, r3
   12a32:	d203      	bcs.n	12a3c <_ZL11CO_ODF_1006P12CO_ODF_arg_t+0x68>
            SYNC->periodTimeoutTime = 0xFFFFFFFFUL;
   12a34:	693b      	ldr	r3, [r7, #16]
   12a36:	f04f 32ff 	mov.w	r2, #4294967295
   12a3a:	615a      	str	r2, [r3, #20]
        }

        SYNC->timer = 0;
   12a3c:	693b      	ldr	r3, [r7, #16]
   12a3e:	2200      	movs	r2, #0
   12a40:	621a      	str	r2, [r3, #32]
    }

    return ret;
   12a42:	697b      	ldr	r3, [r7, #20]
}
   12a44:	4618      	mov	r0, r3
   12a46:	3718      	adds	r7, #24
   12a48:	46bd      	mov	sp, r7
   12a4a:	bd80      	pop	{r7, pc}
   12a4c:	20001abc 	.word	0x20001abc
   12a50:	00010815 	.word	0x00010815

00012a54 <_ZL11CO_ODF_1019P12CO_ODF_arg_t>:
/**
 * Function for accessing _Synchronous counter overflow value_ (index 0x1019) from SDO server.
 *
 * For more information see file CO_SDO.h.
 */
static CO_SDO_abortCode_t CO_ODF_1019(CO_ODF_arg_t *ODF_arg){
   12a54:	b590      	push	{r4, r7, lr}
   12a56:	b089      	sub	sp, #36	; 0x24
   12a58:	af02      	add	r7, sp, #8
   12a5a:	6078      	str	r0, [r7, #4]
    CO_SYNC_t *SYNC;
    uint8_t value;
    CO_SDO_abortCode_t ret = CO_SDO_AB_NONE;
   12a5c:	2300      	movs	r3, #0
   12a5e:	617b      	str	r3, [r7, #20]

    SYNC = (CO_SYNC_t*) ODF_arg->object;
   12a60:	687b      	ldr	r3, [r7, #4]
   12a62:	681b      	ldr	r3, [r3, #0]
   12a64:	60fb      	str	r3, [r7, #12]
    value = ODF_arg->data[0];
   12a66:	687b      	ldr	r3, [r7, #4]
   12a68:	685b      	ldr	r3, [r3, #4]
   12a6a:	781b      	ldrb	r3, [r3, #0]
   12a6c:	72fb      	strb	r3, [r7, #11]

    if(!ODF_arg->reading){
   12a6e:	687b      	ldr	r3, [r7, #4]
   12a70:	7f5b      	ldrb	r3, [r3, #29]
   12a72:	2b00      	cmp	r3, #0
   12a74:	d12c      	bne.n	12ad0 <_ZL11CO_ODF_1019P12CO_ODF_arg_t+0x7c>
        uint8_t len = 0U;
   12a76:	2300      	movs	r3, #0
   12a78:	74fb      	strb	r3, [r7, #19]

        if(SYNC->periodTime){
   12a7a:	68fb      	ldr	r3, [r7, #12]
   12a7c:	691b      	ldr	r3, [r3, #16]
   12a7e:	2b00      	cmp	r3, #0
   12a80:	d002      	beq.n	12a88 <_ZL11CO_ODF_1019P12CO_ODF_arg_t+0x34>
            ret = CO_SDO_AB_DATA_DEV_STATE;
   12a82:	4b16      	ldr	r3, [pc, #88]	; (12adc <_ZL11CO_ODF_1019P12CO_ODF_arg_t+0x88>)
   12a84:	617b      	str	r3, [r7, #20]
   12a86:	e023      	b.n	12ad0 <_ZL11CO_ODF_1019P12CO_ODF_arg_t+0x7c>
        }
        else if((value == 1) || (value > 240 && value <= 255)){
   12a88:	7afb      	ldrb	r3, [r7, #11]
   12a8a:	2b01      	cmp	r3, #1
   12a8c:	d005      	beq.n	12a9a <_ZL11CO_ODF_1019P12CO_ODF_arg_t+0x46>
   12a8e:	7afb      	ldrb	r3, [r7, #11]
   12a90:	2bf0      	cmp	r3, #240	; 0xf0
   12a92:	dd05      	ble.n	12aa0 <_ZL11CO_ODF_1019P12CO_ODF_arg_t+0x4c>
   12a94:	7afb      	ldrb	r3, [r7, #11]
   12a96:	2bff      	cmp	r3, #255	; 0xff
   12a98:	dc02      	bgt.n	12aa0 <_ZL11CO_ODF_1019P12CO_ODF_arg_t+0x4c>
            ret = CO_SDO_AB_INVALID_VALUE;
   12a9a:	4b11      	ldr	r3, [pc, #68]	; (12ae0 <_ZL11CO_ODF_1019P12CO_ODF_arg_t+0x8c>)
   12a9c:	617b      	str	r3, [r7, #20]
   12a9e:	e017      	b.n	12ad0 <_ZL11CO_ODF_1019P12CO_ODF_arg_t+0x7c>
        }
        else{
            SYNC->counterOverflowValue = value;
   12aa0:	68fb      	ldr	r3, [r7, #12]
   12aa2:	7afa      	ldrb	r2, [r7, #11]
   12aa4:	761a      	strb	r2, [r3, #24]
            if(value != 0){
   12aa6:	7afb      	ldrb	r3, [r7, #11]
   12aa8:	2b00      	cmp	r3, #0
   12aaa:	d001      	beq.n	12ab0 <_ZL11CO_ODF_1019P12CO_ODF_arg_t+0x5c>
                len = 1U;
   12aac:	2301      	movs	r3, #1
   12aae:	74fb      	strb	r3, [r7, #19]
            }

            SYNC->CANtxBuff =canopen_driver->CAN_Tx_BufferInit(
   12ab0:	4b0c      	ldr	r3, [pc, #48]	; (12ae4 <_ZL11CO_ODF_1019P12CO_ODF_arg_t+0x90>)
   12ab2:	6818      	ldr	r0, [r3, #0]
   12ab4:	68fb      	ldr	r3, [r7, #12]
   12ab6:	6b99      	ldr	r1, [r3, #56]	; 0x38
   12ab8:	68fb      	ldr	r3, [r7, #12]
   12aba:	68da      	ldr	r2, [r3, #12]
   12abc:	2300      	movs	r3, #0
   12abe:	9301      	str	r3, [sp, #4]
   12ac0:	7cfb      	ldrb	r3, [r7, #19]
   12ac2:	9300      	str	r3, [sp, #0]
   12ac4:	2300      	movs	r3, #0
   12ac6:	4c08      	ldr	r4, [pc, #32]	; (12ae8 <_ZL11CO_ODF_1019P12CO_ODF_arg_t+0x94>)
   12ac8:	47a0      	blx	r4
   12aca:	4602      	mov	r2, r0
   12acc:	68fb      	ldr	r3, [r7, #12]
   12ace:	635a      	str	r2, [r3, #52]	; 0x34
                    len,                    /* number of data bytes */
                    0);                     /* synchronous message flag bit */
        }
    }

    return ret;
   12ad0:	697b      	ldr	r3, [r7, #20]
}
   12ad2:	4618      	mov	r0, r3
   12ad4:	371c      	adds	r7, #28
   12ad6:	46bd      	mov	sp, r7
   12ad8:	bd90      	pop	{r4, r7, pc}
   12ada:	bf00      	nop
   12adc:	08000022 	.word	0x08000022
   12ae0:	06090030 	.word	0x06090030
   12ae4:	20001abc 	.word	0x20001abc
   12ae8:	0000dba9 	.word	0x0000dba9

00012aec <_ZN13CO_SYNC_Class9SYNC_InitEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m>:
        uint8_t                 synchronousCounterOverflowValue,
        CO_CANmodule_t         *CANdevRx,
        uint32_t                CANdevRxIdx,
        CO_CANmodule_t         *CANdevTx,
        uint32_t                CANdevTxIdx)
{
   12aec:	b590      	push	{r4, r7, lr}
   12aee:	b08b      	sub	sp, #44	; 0x2c
   12af0:	af04      	add	r7, sp, #16
   12af2:	60f8      	str	r0, [r7, #12]
   12af4:	60b9      	str	r1, [r7, #8]
   12af6:	607a      	str	r2, [r7, #4]
   12af8:	603b      	str	r3, [r7, #0]
    uint8_t len = 0;
   12afa:	2300      	movs	r3, #0
   12afc:	75fb      	strb	r3, [r7, #23]

    /* verify arguments */
    if(SYNC==NULL || em==NULL || SDO==NULL || operatingState==NULL ||
   12afe:	68bb      	ldr	r3, [r7, #8]
   12b00:	2b00      	cmp	r3, #0
   12b02:	d00e      	beq.n	12b22 <_ZN13CO_SYNC_Class9SYNC_InitEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m+0x36>
   12b04:	687b      	ldr	r3, [r7, #4]
   12b06:	2b00      	cmp	r3, #0
   12b08:	d00b      	beq.n	12b22 <_ZN13CO_SYNC_Class9SYNC_InitEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m+0x36>
   12b0a:	683b      	ldr	r3, [r7, #0]
   12b0c:	2b00      	cmp	r3, #0
   12b0e:	d008      	beq.n	12b22 <_ZN13CO_SYNC_Class9SYNC_InitEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m+0x36>
   12b10:	6abb      	ldr	r3, [r7, #40]	; 0x28
   12b12:	2b00      	cmp	r3, #0
   12b14:	d005      	beq.n	12b22 <_ZN13CO_SYNC_Class9SYNC_InitEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m+0x36>
   12b16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   12b18:	2b00      	cmp	r3, #0
   12b1a:	d002      	beq.n	12b22 <_ZN13CO_SYNC_Class9SYNC_InitEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m+0x36>
        CANdevRx==NULL || CANdevTx==NULL){
   12b1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   12b1e:	2b00      	cmp	r3, #0
   12b20:	d102      	bne.n	12b28 <_ZN13CO_SYNC_Class9SYNC_InitEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m+0x3c>
        return CO_ERROR_ILLEGAL_ARGUMENT;
   12b22:	f04f 33ff 	mov.w	r3, #4294967295
   12b26:	e097      	b.n	12c58 <_ZN13CO_SYNC_Class9SYNC_InitEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m+0x16c>

    /* Configure object variables */
	#ifdef MASTER
	 SYNC->isProducer =  true;
	#else
	 SYNC->isProducer =  false;
   12b28:	68bb      	ldr	r3, [r7, #8]
   12b2a:	2200      	movs	r2, #0
   12b2c:	721a      	strb	r2, [r3, #8]
	#endif
 
	// SYNC->isProducer = (COB_ID_SYNCMessage&0x40000000L) ? true : false;
    SYNC->COB_ID = COB_ID_SYNCMessage&0x7FF;
   12b2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   12b30:	f3c3 020a 	ubfx	r2, r3, #0, #11
   12b34:	68bb      	ldr	r3, [r7, #8]
   12b36:	60da      	str	r2, [r3, #12]

    SYNC->periodTime = communicationCyclePeriod;
   12b38:	68bb      	ldr	r3, [r7, #8]
   12b3a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   12b3c:	611a      	str	r2, [r3, #16]
  //  SYNC->periodTimeoutTime = communicationCyclePeriod / 2 * 3;
	  SYNC->periodTimeoutTime = communicationCyclePeriod / 1 * 3;
   12b3e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   12b40:	4613      	mov	r3, r2
   12b42:	005b      	lsls	r3, r3, #1
   12b44:	441a      	add	r2, r3
   12b46:	68bb      	ldr	r3, [r7, #8]
   12b48:	615a      	str	r2, [r3, #20]
    /* overflow? */
    if(SYNC->periodTimeoutTime < communicationCyclePeriod) SYNC->periodTimeoutTime = 0xFFFFFFFFL;
   12b4a:	68bb      	ldr	r3, [r7, #8]
   12b4c:	695a      	ldr	r2, [r3, #20]
   12b4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   12b50:	429a      	cmp	r2, r3
   12b52:	d203      	bcs.n	12b5c <_ZN13CO_SYNC_Class9SYNC_InitEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m+0x70>
   12b54:	68bb      	ldr	r3, [r7, #8]
   12b56:	f04f 32ff 	mov.w	r2, #4294967295
   12b5a:	615a      	str	r2, [r3, #20]

    SYNC->counterOverflowValue = synchronousCounterOverflowValue;
   12b5c:	68bb      	ldr	r3, [r7, #8]
   12b5e:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
   12b62:	761a      	strb	r2, [r3, #24]
    if(synchronousCounterOverflowValue) len = 1;
   12b64:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
   12b68:	2b00      	cmp	r3, #0
   12b6a:	d001      	beq.n	12b70 <_ZN13CO_SYNC_Class9SYNC_InitEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m+0x84>
   12b6c:	2301      	movs	r3, #1
   12b6e:	75fb      	strb	r3, [r7, #23]

    SYNC->curentSyncTimeIsInsideWindow = true;
   12b70:	68bb      	ldr	r3, [r7, #8]
   12b72:	2201      	movs	r2, #1
   12b74:	765a      	strb	r2, [r3, #25]

    SYNC->CANrxNew = false;
   12b76:	68bb      	ldr	r3, [r7, #8]
   12b78:	2200      	movs	r2, #0
   12b7a:	769a      	strb	r2, [r3, #26]
    SYNC->CANrxToggle = false;
   12b7c:	68bb      	ldr	r3, [r7, #8]
   12b7e:	2200      	movs	r2, #0
   12b80:	76da      	strb	r2, [r3, #27]
    SYNC->timer = 0;
   12b82:	68bb      	ldr	r3, [r7, #8]
   12b84:	2200      	movs	r2, #0
   12b86:	621a      	str	r2, [r3, #32]
    SYNC->counter = 0;
   12b88:	68bb      	ldr	r3, [r7, #8]
   12b8a:	2200      	movs	r2, #0
   12b8c:	771a      	strb	r2, [r3, #28]
    SYNC->receiveError = 0U;
   12b8e:	68bb      	ldr	r3, [r7, #8]
   12b90:	2200      	movs	r2, #0
   12b92:	625a      	str	r2, [r3, #36]	; 0x24

    SYNC->em = em;
   12b94:	68bb      	ldr	r3, [r7, #8]
   12b96:	687a      	ldr	r2, [r7, #4]
   12b98:	601a      	str	r2, [r3, #0]
    SYNC->operatingState = operatingState;
   12b9a:	68bb      	ldr	r3, [r7, #8]
   12b9c:	6aba      	ldr	r2, [r7, #40]	; 0x28
   12b9e:	605a      	str	r2, [r3, #4]

    SYNC->CANdevRx = CANdevRx;
   12ba0:	68bb      	ldr	r3, [r7, #8]
   12ba2:	6bba      	ldr	r2, [r7, #56]	; 0x38
   12ba4:	629a      	str	r2, [r3, #40]	; 0x28
    SYNC->CANdevRxIdx = CANdevRxIdx;
   12ba6:	68bb      	ldr	r3, [r7, #8]
   12ba8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   12baa:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Configure Object dictionary entry at index 0x1005, 0x1006 and 0x1019 */
    canopen_driver->CO_OD_configure( OD_H1005_COBID_SYNC,        CO_ODF_1005, (void*)SYNC, 0, 0);
   12bac:	4b2c      	ldr	r3, [pc, #176]	; (12c60 <_ZN13CO_SYNC_Class9SYNC_InitEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m+0x174>)
   12bae:	681b      	ldr	r3, [r3, #0]
   12bb0:	1d18      	adds	r0, r3, #4
   12bb2:	2300      	movs	r3, #0
   12bb4:	9301      	str	r3, [sp, #4]
   12bb6:	2300      	movs	r3, #0
   12bb8:	9300      	str	r3, [sp, #0]
   12bba:	68bb      	ldr	r3, [r7, #8]
   12bbc:	4a29      	ldr	r2, [pc, #164]	; (12c64 <_ZN13CO_SYNC_Class9SYNC_InitEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m+0x178>)
   12bbe:	f241 0105 	movw	r1, #4101	; 0x1005
   12bc2:	4c29      	ldr	r4, [pc, #164]	; (12c68 <_ZN13CO_SYNC_Class9SYNC_InitEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m+0x17c>)
   12bc4:	47a0      	blx	r4
    canopen_driver->CO_OD_configure( OD_H1006_COMM_CYCL_PERIOD,  CO_ODF_1006, (void*)SYNC, 0, 0);
   12bc6:	4b26      	ldr	r3, [pc, #152]	; (12c60 <_ZN13CO_SYNC_Class9SYNC_InitEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m+0x174>)
   12bc8:	681b      	ldr	r3, [r3, #0]
   12bca:	1d18      	adds	r0, r3, #4
   12bcc:	2300      	movs	r3, #0
   12bce:	9301      	str	r3, [sp, #4]
   12bd0:	2300      	movs	r3, #0
   12bd2:	9300      	str	r3, [sp, #0]
   12bd4:	68bb      	ldr	r3, [r7, #8]
   12bd6:	4a25      	ldr	r2, [pc, #148]	; (12c6c <_ZN13CO_SYNC_Class9SYNC_InitEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m+0x180>)
   12bd8:	f241 0106 	movw	r1, #4102	; 0x1006
   12bdc:	4c22      	ldr	r4, [pc, #136]	; (12c68 <_ZN13CO_SYNC_Class9SYNC_InitEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m+0x17c>)
   12bde:	47a0      	blx	r4
    canopen_driver->CO_OD_configure( OD_H1019_SYNC_CNT_OVERFLOW, CO_ODF_1019, (void*)SYNC, 0, 0);
   12be0:	4b1f      	ldr	r3, [pc, #124]	; (12c60 <_ZN13CO_SYNC_Class9SYNC_InitEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m+0x174>)
   12be2:	681b      	ldr	r3, [r3, #0]
   12be4:	1d18      	adds	r0, r3, #4
   12be6:	2300      	movs	r3, #0
   12be8:	9301      	str	r3, [sp, #4]
   12bea:	2300      	movs	r3, #0
   12bec:	9300      	str	r3, [sp, #0]
   12bee:	68bb      	ldr	r3, [r7, #8]
   12bf0:	4a1f      	ldr	r2, [pc, #124]	; (12c70 <_ZN13CO_SYNC_Class9SYNC_InitEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m+0x184>)
   12bf2:	f241 0119 	movw	r1, #4121	; 0x1019
   12bf6:	4c1c      	ldr	r4, [pc, #112]	; (12c68 <_ZN13CO_SYNC_Class9SYNC_InitEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m+0x17c>)
   12bf8:	47a0      	blx	r4

    /* configure SYNC CAN reception */
    canopen_driver->CAN_Rx_BufferInit(
   12bfa:	4b19      	ldr	r3, [pc, #100]	; (12c60 <_ZN13CO_SYNC_Class9SYNC_InitEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m+0x174>)
   12bfc:	6818      	ldr	r0, [r3, #0]
   12bfe:	68bb      	ldr	r3, [r7, #8]
   12c00:	68da      	ldr	r2, [r3, #12]
            CANdevRxIdx,            /* rx buffer index */
            SYNC->COB_ID,           /* CAN identifier */
            0x7FF,                  /* mask */
            0,                      /* rtr */
            (void*)SYNC,            /* object passed to receive function */
            CO_SYNC_receive);       /* this function will process received message */
   12c02:	4b1c      	ldr	r3, [pc, #112]	; (12c74 <_ZN13CO_SYNC_Class9SYNC_InitEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m+0x188>)
   12c04:	9302      	str	r3, [sp, #8]
   12c06:	68bb      	ldr	r3, [r7, #8]
   12c08:	9301      	str	r3, [sp, #4]
   12c0a:	2300      	movs	r3, #0
   12c0c:	9300      	str	r3, [sp, #0]
   12c0e:	f240 73ff 	movw	r3, #2047	; 0x7ff
   12c12:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
   12c14:	4c18      	ldr	r4, [pc, #96]	; (12c78 <_ZN13CO_SYNC_Class9SYNC_InitEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m+0x18c>)
   12c16:	47a0      	blx	r4

    /* configure SYNC CAN transmission */
    SYNC->CANdevTx = CANdevTx;
   12c18:	68bb      	ldr	r3, [r7, #8]
   12c1a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   12c1c:	631a      	str	r2, [r3, #48]	; 0x30
    SYNC->CANdevTxIdx = CANdevTxIdx;
   12c1e:	68bb      	ldr	r3, [r7, #8]
   12c20:	6c7a      	ldr	r2, [r7, #68]	; 0x44
   12c22:	639a      	str	r2, [r3, #56]	; 0x38
    SYNC->CANtxBuff =  canopen_driver->CAN_Tx_BufferInit(
   12c24:	4b0e      	ldr	r3, [pc, #56]	; (12c60 <_ZN13CO_SYNC_Class9SYNC_InitEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m+0x174>)
   12c26:	6818      	ldr	r0, [r3, #0]
   12c28:	68bb      	ldr	r3, [r7, #8]
   12c2a:	68da      	ldr	r2, [r3, #12]
   12c2c:	2300      	movs	r3, #0
   12c2e:	9301      	str	r3, [sp, #4]
   12c30:	7dfb      	ldrb	r3, [r7, #23]
   12c32:	9300      	str	r3, [sp, #0]
   12c34:	2300      	movs	r3, #0
   12c36:	6c79      	ldr	r1, [r7, #68]	; 0x44
   12c38:	4c10      	ldr	r4, [pc, #64]	; (12c7c <_ZN13CO_SYNC_Class9SYNC_InitEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m+0x190>)
   12c3a:	47a0      	blx	r4
   12c3c:	4602      	mov	r2, r0
   12c3e:	68bb      	ldr	r3, [r7, #8]
   12c40:	635a      	str	r2, [r3, #52]	; 0x34
            SYNC->COB_ID,           /* CAN identifier */
            0,                      /* rtr */
            len,                    /* number of data bytes */
            0);                     /* synchronous message flag bit */
			
	memcpy(&local_sync_tx_buffer,SYNC->CANtxBuff,sizeof(CO_CANtx_t));
   12c42:	68bb      	ldr	r3, [r7, #8]
   12c44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   12c46:	2210      	movs	r2, #16
   12c48:	4619      	mov	r1, r3
   12c4a:	480d      	ldr	r0, [pc, #52]	; (12c80 <_ZN13CO_SYNC_Class9SYNC_InitEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m+0x194>)
   12c4c:	4b0d      	ldr	r3, [pc, #52]	; (12c84 <_ZN13CO_SYNC_Class9SYNC_InitEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m+0x198>)
   12c4e:	4798      	blx	r3
		tx_buffer=&local_sync_tx_buffer;    
   12c50:	68fb      	ldr	r3, [r7, #12]
   12c52:	4a0b      	ldr	r2, [pc, #44]	; (12c80 <_ZN13CO_SYNC_Class9SYNC_InitEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m+0x194>)
   12c54:	601a      	str	r2, [r3, #0]
    return CO_ERROR_NO;
   12c56:	2300      	movs	r3, #0
}
   12c58:	4618      	mov	r0, r3
   12c5a:	371c      	adds	r7, #28
   12c5c:	46bd      	mov	sp, r7
   12c5e:	bd90      	pop	{r4, r7, pc}
   12c60:	20001abc 	.word	0x20001abc
   12c64:	000128d1 	.word	0x000128d1
   12c68:	00010c69 	.word	0x00010c69
   12c6c:	000129d5 	.word	0x000129d5
   12c70:	00012a55 	.word	0x00012a55
   12c74:	0001283d 	.word	0x0001283d
   12c78:	0000daa9 	.word	0x0000daa9
   12c7c:	0000dba9 	.word	0x0000dba9
   12c80:	20001b00 	.word	0x20001b00
   12c84:	00012f1d 	.word	0x00012f1d

00012c88 <_ZN13CO_SYNC_Class15CO_SYNC_processEP9CO_SYNC_tmm>:
/******************************************************************************/
uint8_t CO_SYNC_Class::CO_SYNC_process(
        CO_SYNC_t              *SYNC,
        uint32_t                timeDifference_us,
        uint32_t                ObjDict_synchronousWindowLength)
{
   12c88:	b590      	push	{r4, r7, lr}
   12c8a:	b089      	sub	sp, #36	; 0x24
   12c8c:	af02      	add	r7, sp, #8
   12c8e:	60f8      	str	r0, [r7, #12]
   12c90:	60b9      	str	r1, [r7, #8]
   12c92:	607a      	str	r2, [r7, #4]
   12c94:	603b      	str	r3, [r7, #0]
    uint8_t ret = 0;
   12c96:	2300      	movs	r3, #0
   12c98:	75fb      	strb	r3, [r7, #23]
    uint32_t timerNew;

    if(*SYNC->operatingState == CO_NMT_OPERATIONAL || *SYNC->operatingState == CO_NMT_PRE_OPERATIONAL){
   12c9a:	68bb      	ldr	r3, [r7, #8]
   12c9c:	685b      	ldr	r3, [r3, #4]
   12c9e:	781b      	ldrb	r3, [r3, #0]
   12ca0:	2b05      	cmp	r3, #5
   12ca2:	d005      	beq.n	12cb0 <_ZN13CO_SYNC_Class15CO_SYNC_processEP9CO_SYNC_tmm+0x28>
   12ca4:	68bb      	ldr	r3, [r7, #8]
   12ca6:	685b      	ldr	r3, [r3, #4]
   12ca8:	781b      	ldrb	r3, [r3, #0]
   12caa:	2b7f      	cmp	r3, #127	; 0x7f
   12cac:	f040 808e 	bne.w	12dcc <_ZN13CO_SYNC_Class15CO_SYNC_processEP9CO_SYNC_tmm+0x144>
        /* update sync timer, no overflow */
        timerNew = SYNC->timer + timeDifference_us;
   12cb0:	68bb      	ldr	r3, [r7, #8]
   12cb2:	6a1a      	ldr	r2, [r3, #32]
   12cb4:	687b      	ldr	r3, [r7, #4]
   12cb6:	4413      	add	r3, r2
   12cb8:	613b      	str	r3, [r7, #16]
        if(timerNew > SYNC->timer) SYNC->timer = timerNew;
   12cba:	68bb      	ldr	r3, [r7, #8]
   12cbc:	6a1a      	ldr	r2, [r3, #32]
   12cbe:	693b      	ldr	r3, [r7, #16]
   12cc0:	429a      	cmp	r2, r3
   12cc2:	d202      	bcs.n	12cca <_ZN13CO_SYNC_Class15CO_SYNC_processEP9CO_SYNC_tmm+0x42>
   12cc4:	68bb      	ldr	r3, [r7, #8]
   12cc6:	693a      	ldr	r2, [r7, #16]
   12cc8:	621a      	str	r2, [r3, #32]

        /* was SYNC just received */
        if(SYNC->CANrxNew){
   12cca:	68bb      	ldr	r3, [r7, #8]
   12ccc:	7e9b      	ldrb	r3, [r3, #26]
   12cce:	2b00      	cmp	r3, #0
   12cd0:	d007      	beq.n	12ce2 <_ZN13CO_SYNC_Class15CO_SYNC_processEP9CO_SYNC_tmm+0x5a>
            SYNC->timer = 0;
   12cd2:	68bb      	ldr	r3, [r7, #8]
   12cd4:	2200      	movs	r2, #0
   12cd6:	621a      	str	r2, [r3, #32]
            ret = 1;
   12cd8:	2301      	movs	r3, #1
   12cda:	75fb      	strb	r3, [r7, #23]
            SYNC->CANrxNew = false;
   12cdc:	68bb      	ldr	r3, [r7, #8]
   12cde:	2200      	movs	r2, #0
   12ce0:	769a      	strb	r2, [r3, #26]
        }

        /* SYNC producer */
        if(SYNC->isProducer && SYNC->periodTime){
   12ce2:	68bb      	ldr	r3, [r7, #8]
   12ce4:	7a1b      	ldrb	r3, [r3, #8]
   12ce6:	2b00      	cmp	r3, #0
   12ce8:	d03a      	beq.n	12d60 <_ZN13CO_SYNC_Class15CO_SYNC_processEP9CO_SYNC_tmm+0xd8>
   12cea:	68bb      	ldr	r3, [r7, #8]
   12cec:	691b      	ldr	r3, [r3, #16]
   12cee:	2b00      	cmp	r3, #0
   12cf0:	d036      	beq.n	12d60 <_ZN13CO_SYNC_Class15CO_SYNC_processEP9CO_SYNC_tmm+0xd8>
            if(SYNC->timer >= SYNC->periodTime){
   12cf2:	68bb      	ldr	r3, [r7, #8]
   12cf4:	6a1a      	ldr	r2, [r3, #32]
   12cf6:	68bb      	ldr	r3, [r7, #8]
   12cf8:	691b      	ldr	r3, [r3, #16]
   12cfa:	429a      	cmp	r2, r3
   12cfc:	d330      	bcc.n	12d60 <_ZN13CO_SYNC_Class15CO_SYNC_processEP9CO_SYNC_tmm+0xd8>
                if(++SYNC->counter > SYNC->counterOverflowValue) SYNC->counter = 1;
   12cfe:	68bb      	ldr	r3, [r7, #8]
   12d00:	7f1b      	ldrb	r3, [r3, #28]
   12d02:	3301      	adds	r3, #1
   12d04:	b2da      	uxtb	r2, r3
   12d06:	68bb      	ldr	r3, [r7, #8]
   12d08:	771a      	strb	r2, [r3, #28]
   12d0a:	68bb      	ldr	r3, [r7, #8]
   12d0c:	7f1b      	ldrb	r3, [r3, #28]
   12d0e:	461a      	mov	r2, r3
   12d10:	68bb      	ldr	r3, [r7, #8]
   12d12:	7e1b      	ldrb	r3, [r3, #24]
   12d14:	429a      	cmp	r2, r3
   12d16:	bfcc      	ite	gt
   12d18:	2301      	movgt	r3, #1
   12d1a:	2300      	movle	r3, #0
   12d1c:	b2db      	uxtb	r3, r3
   12d1e:	2b00      	cmp	r3, #0
   12d20:	d002      	beq.n	12d28 <_ZN13CO_SYNC_Class15CO_SYNC_processEP9CO_SYNC_tmm+0xa0>
   12d22:	68bb      	ldr	r3, [r7, #8]
   12d24:	2201      	movs	r2, #1
   12d26:	771a      	strb	r2, [r3, #28]
                SYNC->timer = 0;
   12d28:	68bb      	ldr	r3, [r7, #8]
   12d2a:	2200      	movs	r2, #0
   12d2c:	621a      	str	r2, [r3, #32]
                ret = 1;
   12d2e:	2301      	movs	r3, #1
   12d30:	75fb      	strb	r3, [r7, #23]
                SYNC->CANrxToggle = SYNC->CANrxToggle ? false : true;
   12d32:	68bb      	ldr	r3, [r7, #8]
   12d34:	7edb      	ldrb	r3, [r3, #27]
   12d36:	2b00      	cmp	r3, #0
   12d38:	bf0c      	ite	eq
   12d3a:	2301      	moveq	r3, #1
   12d3c:	2300      	movne	r3, #0
   12d3e:	b2db      	uxtb	r3, r3
   12d40:	461a      	mov	r2, r3
   12d42:	68bb      	ldr	r3, [r7, #8]
   12d44:	76da      	strb	r2, [r3, #27]
                SYNC->CANtxBuff->data[0] = SYNC->counter;
   12d46:	68bb      	ldr	r3, [r7, #8]
   12d48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   12d4a:	68ba      	ldr	r2, [r7, #8]
   12d4c:	7f12      	ldrb	r2, [r2, #28]
   12d4e:	715a      	strb	r2, [r3, #5]
                canopen_driver->CAN_Send(SYNC->CANtxBuff);
   12d50:	4b2d      	ldr	r3, [pc, #180]	; (12e08 <_ZN13CO_SYNC_Class15CO_SYNC_processEP9CO_SYNC_tmm+0x180>)
   12d52:	681a      	ldr	r2, [r3, #0]
   12d54:	68bb      	ldr	r3, [r7, #8]
   12d56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   12d58:	4619      	mov	r1, r3
   12d5a:	4610      	mov	r0, r2
   12d5c:	4b2b      	ldr	r3, [pc, #172]	; (12e0c <_ZN13CO_SYNC_Class15CO_SYNC_processEP9CO_SYNC_tmm+0x184>)
   12d5e:	4798      	blx	r3
            }
        }

        /* Synchronous PDOs are allowed only inside time window */
        if(ObjDict_synchronousWindowLength){
   12d60:	683b      	ldr	r3, [r7, #0]
   12d62:	2b00      	cmp	r3, #0
   12d64:	d012      	beq.n	12d8c <_ZN13CO_SYNC_Class15CO_SYNC_processEP9CO_SYNC_tmm+0x104>
            if(SYNC->timer > ObjDict_synchronousWindowLength){
   12d66:	68bb      	ldr	r3, [r7, #8]
   12d68:	6a1a      	ldr	r2, [r3, #32]
   12d6a:	683b      	ldr	r3, [r7, #0]
   12d6c:	429a      	cmp	r2, r3
   12d6e:	d909      	bls.n	12d84 <_ZN13CO_SYNC_Class15CO_SYNC_processEP9CO_SYNC_tmm+0xfc>
                if(SYNC->curentSyncTimeIsInsideWindow){
   12d70:	68bb      	ldr	r3, [r7, #8]
   12d72:	7e5b      	ldrb	r3, [r3, #25]
   12d74:	2b00      	cmp	r3, #0
   12d76:	d001      	beq.n	12d7c <_ZN13CO_SYNC_Class15CO_SYNC_processEP9CO_SYNC_tmm+0xf4>
                    ret = 2;
   12d78:	2302      	movs	r3, #2
   12d7a:	75fb      	strb	r3, [r7, #23]
                }
                SYNC->curentSyncTimeIsInsideWindow = false;
   12d7c:	68bb      	ldr	r3, [r7, #8]
   12d7e:	2200      	movs	r2, #0
   12d80:	765a      	strb	r2, [r3, #25]
   12d82:	e006      	b.n	12d92 <_ZN13CO_SYNC_Class15CO_SYNC_processEP9CO_SYNC_tmm+0x10a>
            }
            else{
                SYNC->curentSyncTimeIsInsideWindow = true;
   12d84:	68bb      	ldr	r3, [r7, #8]
   12d86:	2201      	movs	r2, #1
   12d88:	765a      	strb	r2, [r3, #25]
   12d8a:	e002      	b.n	12d92 <_ZN13CO_SYNC_Class15CO_SYNC_processEP9CO_SYNC_tmm+0x10a>
            }
        }
        else{
            SYNC->curentSyncTimeIsInsideWindow = true;
   12d8c:	68bb      	ldr	r3, [r7, #8]
   12d8e:	2201      	movs	r2, #1
   12d90:	765a      	strb	r2, [r3, #25]
        }

        /* Verify timeout of SYNC */
        if(SYNC->periodTime && SYNC->timer > SYNC->periodTimeoutTime && *SYNC->operatingState == CO_NMT_OPERATIONAL)
   12d92:	68bb      	ldr	r3, [r7, #8]
   12d94:	691b      	ldr	r3, [r3, #16]
   12d96:	2b00      	cmp	r3, #0
   12d98:	d01c      	beq.n	12dd4 <_ZN13CO_SYNC_Class15CO_SYNC_processEP9CO_SYNC_tmm+0x14c>
   12d9a:	68bb      	ldr	r3, [r7, #8]
   12d9c:	6a1a      	ldr	r2, [r3, #32]
   12d9e:	68bb      	ldr	r3, [r7, #8]
   12da0:	695b      	ldr	r3, [r3, #20]
   12da2:	429a      	cmp	r2, r3
   12da4:	d916      	bls.n	12dd4 <_ZN13CO_SYNC_Class15CO_SYNC_processEP9CO_SYNC_tmm+0x14c>
   12da6:	68bb      	ldr	r3, [r7, #8]
   12da8:	685b      	ldr	r3, [r3, #4]
   12daa:	781b      	ldrb	r3, [r3, #0]
   12dac:	2b05      	cmp	r3, #5
   12dae:	d111      	bne.n	12dd4 <_ZN13CO_SYNC_Class15CO_SYNC_processEP9CO_SYNC_tmm+0x14c>
             canopen_driver->EM_ErrorReport(SYNC->em, CO_EM_SYNC_TIME_OUT, CO_EMC_COMMUNICATION, SYNC->timer);
   12db0:	4b15      	ldr	r3, [pc, #84]	; (12e08 <_ZN13CO_SYNC_Class15CO_SYNC_processEP9CO_SYNC_tmm+0x180>)
   12db2:	681b      	ldr	r3, [r3, #0]
   12db4:	1d18      	adds	r0, r3, #4
   12db6:	68bb      	ldr	r3, [r7, #8]
   12db8:	6819      	ldr	r1, [r3, #0]
   12dba:	68bb      	ldr	r3, [r7, #8]
   12dbc:	6a1b      	ldr	r3, [r3, #32]
   12dbe:	9300      	str	r3, [sp, #0]
   12dc0:	f44f 4301 	mov.w	r3, #33024	; 0x8100
   12dc4:	2218      	movs	r2, #24
   12dc6:	4c12      	ldr	r4, [pc, #72]	; (12e10 <_ZN13CO_SYNC_Class15CO_SYNC_processEP9CO_SYNC_tmm+0x188>)
   12dc8:	47a0      	blx	r4
        if(SYNC->periodTime && SYNC->timer > SYNC->periodTimeoutTime && *SYNC->operatingState == CO_NMT_OPERATIONAL)
   12dca:	e003      	b.n	12dd4 <_ZN13CO_SYNC_Class15CO_SYNC_processEP9CO_SYNC_tmm+0x14c>
    }
    else {
        SYNC->CANrxNew = false;
   12dcc:	68bb      	ldr	r3, [r7, #8]
   12dce:	2200      	movs	r2, #0
   12dd0:	769a      	strb	r2, [r3, #26]
   12dd2:	e000      	b.n	12dd6 <_ZN13CO_SYNC_Class15CO_SYNC_processEP9CO_SYNC_tmm+0x14e>
        if(SYNC->periodTime && SYNC->timer > SYNC->periodTimeoutTime && *SYNC->operatingState == CO_NMT_OPERATIONAL)
   12dd4:	bf00      	nop
    }

    /* verify error from receive function */
    if(SYNC->receiveError != 0U){
   12dd6:	68bb      	ldr	r3, [r7, #8]
   12dd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   12dda:	2b00      	cmp	r3, #0
   12ddc:	d00f      	beq.n	12dfe <_ZN13CO_SYNC_Class15CO_SYNC_processEP9CO_SYNC_tmm+0x176>
        canopen_driver->EM_ErrorReport(SYNC->em, CO_EM_SYNC_LENGTH, CO_EMC_SYNC_DATA_LENGTH, (uint32_t)SYNC->receiveError);
   12dde:	4b0a      	ldr	r3, [pc, #40]	; (12e08 <_ZN13CO_SYNC_Class15CO_SYNC_processEP9CO_SYNC_tmm+0x180>)
   12de0:	681b      	ldr	r3, [r3, #0]
   12de2:	1d18      	adds	r0, r3, #4
   12de4:	68bb      	ldr	r3, [r7, #8]
   12de6:	6819      	ldr	r1, [r3, #0]
   12de8:	68bb      	ldr	r3, [r7, #8]
   12dea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   12dec:	9300      	str	r3, [sp, #0]
   12dee:	f248 2340 	movw	r3, #33344	; 0x8240
   12df2:	2219      	movs	r2, #25
   12df4:	4c06      	ldr	r4, [pc, #24]	; (12e10 <_ZN13CO_SYNC_Class15CO_SYNC_processEP9CO_SYNC_tmm+0x188>)
   12df6:	47a0      	blx	r4
        SYNC->receiveError = 0U;
   12df8:	68bb      	ldr	r3, [r7, #8]
   12dfa:	2200      	movs	r2, #0
   12dfc:	625a      	str	r2, [r3, #36]	; 0x24
    }

    return ret;
   12dfe:	7dfb      	ldrb	r3, [r7, #23]
}
   12e00:	4618      	mov	r0, r3
   12e02:	371c      	adds	r7, #28
   12e04:	46bd      	mov	sp, r7
   12e06:	bd90      	pop	{r4, r7, pc}
   12e08:	20001abc 	.word	0x20001abc
   12e0c:	0000dc55 	.word	0x0000dc55
   12e10:	0000e6cd 	.word	0x0000e6cd

00012e14 <_ZN14CO_CRC16_ClassC1Ev>:
	0x6E17U, 0x7E36U, 0x4E55U, 0x5E74U, 0x2E93U, 0x3EB2U, 0x0ED1U, 0x1EF0U
};


// default constructor
CO_CRC16_Class::CO_CRC16_Class()
   12e14:	b480      	push	{r7}
   12e16:	b083      	sub	sp, #12
   12e18:	af00      	add	r7, sp, #0
   12e1a:	6078      	str	r0, [r7, #4]
{
} //CO_CRC16_Class
   12e1c:	687b      	ldr	r3, [r7, #4]
   12e1e:	4618      	mov	r0, r3
   12e20:	370c      	adds	r7, #12
   12e22:	46bd      	mov	sp, r7
   12e24:	bc80      	pop	{r7}
   12e26:	4770      	bx	lr

00012e28 <_ZN14CO_CRC16_ClassD1Ev>:

// default destructor
CO_CRC16_Class::~CO_CRC16_Class()
   12e28:	b480      	push	{r7}
   12e2a:	b083      	sub	sp, #12
   12e2c:	af00      	add	r7, sp, #0
   12e2e:	6078      	str	r0, [r7, #4]
{
} //~CO_CRC16_Class
   12e30:	687b      	ldr	r3, [r7, #4]
   12e32:	4618      	mov	r0, r3
   12e34:	370c      	adds	r7, #12
   12e36:	46bd      	mov	sp, r7
   12e38:	bc80      	pop	{r7}
   12e3a:	4770      	bx	lr

00012e3c <_ZN14CO_CRC16_Class11crc16_ccittEPKhjt>:
/******************************************************************************/
unsigned short CO_CRC16_Class::crc16_ccitt(
const unsigned char     block[],
unsigned int            blockLength,
unsigned short          crc)
{
   12e3c:	b480      	push	{r7}
   12e3e:	b087      	sub	sp, #28
   12e40:	af00      	add	r7, sp, #0
   12e42:	60f8      	str	r0, [r7, #12]
   12e44:	60b9      	str	r1, [r7, #8]
   12e46:	607a      	str	r2, [r7, #4]
   12e48:	807b      	strh	r3, [r7, #2]
	unsigned int i;

	for(i=0U; i<blockLength; i++){
   12e4a:	2300      	movs	r3, #0
   12e4c:	617b      	str	r3, [r7, #20]
   12e4e:	697a      	ldr	r2, [r7, #20]
   12e50:	687b      	ldr	r3, [r7, #4]
   12e52:	429a      	cmp	r2, r3
   12e54:	d217      	bcs.n	12e86 <_ZN14CO_CRC16_Class11crc16_ccittEPKhjt+0x4a>
		unsigned short tmp = (crc >> 8) ^ (unsigned short) block[i];
   12e56:	887b      	ldrh	r3, [r7, #2]
   12e58:	121b      	asrs	r3, r3, #8
   12e5a:	b21a      	sxth	r2, r3
   12e5c:	68b9      	ldr	r1, [r7, #8]
   12e5e:	697b      	ldr	r3, [r7, #20]
   12e60:	440b      	add	r3, r1
   12e62:	781b      	ldrb	r3, [r3, #0]
   12e64:	b21b      	sxth	r3, r3
   12e66:	4053      	eors	r3, r2
   12e68:	b21b      	sxth	r3, r3
   12e6a:	827b      	strh	r3, [r7, #18]
		crc = ((unsigned short)(crc << 8U)) ^ crc16_ccitt_table[tmp];
   12e6c:	887b      	ldrh	r3, [r7, #2]
   12e6e:	021b      	lsls	r3, r3, #8
   12e70:	b29a      	uxth	r2, r3
   12e72:	8a7b      	ldrh	r3, [r7, #18]
   12e74:	4907      	ldr	r1, [pc, #28]	; (12e94 <_ZN14CO_CRC16_Class11crc16_ccittEPKhjt+0x58>)
   12e76:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
   12e7a:	4053      	eors	r3, r2
   12e7c:	807b      	strh	r3, [r7, #2]
	for(i=0U; i<blockLength; i++){
   12e7e:	697b      	ldr	r3, [r7, #20]
   12e80:	3301      	adds	r3, #1
   12e82:	617b      	str	r3, [r7, #20]
   12e84:	e7e3      	b.n	12e4e <_ZN14CO_CRC16_Class11crc16_ccittEPKhjt+0x12>
	}
	return crc;
   12e86:	887b      	ldrh	r3, [r7, #2]
   12e88:	4618      	mov	r0, r3
   12e8a:	371c      	adds	r7, #28
   12e8c:	46bd      	mov	sp, r7
   12e8e:	bc80      	pop	{r7}
   12e90:	4770      	bx	lr
   12e92:	bf00      	nop
   12e94:	000140a0 	.word	0x000140a0

00012e98 <__aeabi_atexit>:
   12e98:	460b      	mov	r3, r1
   12e9a:	4601      	mov	r1, r0
   12e9c:	4618      	mov	r0, r3
   12e9e:	f000 b801 	b.w	12ea4 <__cxa_atexit>
   12ea2:	bf00      	nop

00012ea4 <__cxa_atexit>:
   12ea4:	4613      	mov	r3, r2
   12ea6:	460a      	mov	r2, r1
   12ea8:	4601      	mov	r1, r0
   12eaa:	2002      	movs	r0, #2
   12eac:	f000 b91e 	b.w	130ec <__register_exitproc>

00012eb0 <ffs>:
   12eb0:	b140      	cbz	r0, 12ec4 <ffs+0x14>
   12eb2:	2300      	movs	r3, #0
   12eb4:	fa40 f103 	asr.w	r1, r0, r3
   12eb8:	1c5a      	adds	r2, r3, #1
   12eba:	07c9      	lsls	r1, r1, #31
   12ebc:	4613      	mov	r3, r2
   12ebe:	d5f9      	bpl.n	12eb4 <ffs+0x4>
   12ec0:	4610      	mov	r0, r2
   12ec2:	4770      	bx	lr
   12ec4:	4602      	mov	r2, r0
   12ec6:	4610      	mov	r0, r2
   12ec8:	4770      	bx	lr
   12eca:	bf00      	nop

00012ecc <__libc_init_array>:
   12ecc:	b570      	push	{r4, r5, r6, lr}
   12ece:	4e0f      	ldr	r6, [pc, #60]	; (12f0c <__libc_init_array+0x40>)
   12ed0:	4d0f      	ldr	r5, [pc, #60]	; (12f10 <__libc_init_array+0x44>)
   12ed2:	1b76      	subs	r6, r6, r5
   12ed4:	10b6      	asrs	r6, r6, #2
   12ed6:	bf18      	it	ne
   12ed8:	2400      	movne	r4, #0
   12eda:	d005      	beq.n	12ee8 <__libc_init_array+0x1c>
   12edc:	3401      	adds	r4, #1
   12ede:	f855 3b04 	ldr.w	r3, [r5], #4
   12ee2:	4798      	blx	r3
   12ee4:	42a6      	cmp	r6, r4
   12ee6:	d1f9      	bne.n	12edc <__libc_init_array+0x10>
   12ee8:	4e0a      	ldr	r6, [pc, #40]	; (12f14 <__libc_init_array+0x48>)
   12eea:	4d0b      	ldr	r5, [pc, #44]	; (12f18 <__libc_init_array+0x4c>)
   12eec:	1b76      	subs	r6, r6, r5
   12eee:	f001 f9d9 	bl	142a4 <_init>
   12ef2:	10b6      	asrs	r6, r6, #2
   12ef4:	bf18      	it	ne
   12ef6:	2400      	movne	r4, #0
   12ef8:	d006      	beq.n	12f08 <__libc_init_array+0x3c>
   12efa:	3401      	adds	r4, #1
   12efc:	f855 3b04 	ldr.w	r3, [r5], #4
   12f00:	4798      	blx	r3
   12f02:	42a6      	cmp	r6, r4
   12f04:	d1f9      	bne.n	12efa <__libc_init_array+0x2e>
   12f06:	bd70      	pop	{r4, r5, r6, pc}
   12f08:	bd70      	pop	{r4, r5, r6, pc}
   12f0a:	bf00      	nop
   12f0c:	000142b0 	.word	0x000142b0
   12f10:	000142b0 	.word	0x000142b0
   12f14:	000142bc 	.word	0x000142bc
   12f18:	000142b0 	.word	0x000142b0

00012f1c <memcpy>:
   12f1c:	4684      	mov	ip, r0
   12f1e:	ea41 0300 	orr.w	r3, r1, r0
   12f22:	f013 0303 	ands.w	r3, r3, #3
   12f26:	d16d      	bne.n	13004 <memcpy+0xe8>
   12f28:	3a40      	subs	r2, #64	; 0x40
   12f2a:	d341      	bcc.n	12fb0 <memcpy+0x94>
   12f2c:	f851 3b04 	ldr.w	r3, [r1], #4
   12f30:	f840 3b04 	str.w	r3, [r0], #4
   12f34:	f851 3b04 	ldr.w	r3, [r1], #4
   12f38:	f840 3b04 	str.w	r3, [r0], #4
   12f3c:	f851 3b04 	ldr.w	r3, [r1], #4
   12f40:	f840 3b04 	str.w	r3, [r0], #4
   12f44:	f851 3b04 	ldr.w	r3, [r1], #4
   12f48:	f840 3b04 	str.w	r3, [r0], #4
   12f4c:	f851 3b04 	ldr.w	r3, [r1], #4
   12f50:	f840 3b04 	str.w	r3, [r0], #4
   12f54:	f851 3b04 	ldr.w	r3, [r1], #4
   12f58:	f840 3b04 	str.w	r3, [r0], #4
   12f5c:	f851 3b04 	ldr.w	r3, [r1], #4
   12f60:	f840 3b04 	str.w	r3, [r0], #4
   12f64:	f851 3b04 	ldr.w	r3, [r1], #4
   12f68:	f840 3b04 	str.w	r3, [r0], #4
   12f6c:	f851 3b04 	ldr.w	r3, [r1], #4
   12f70:	f840 3b04 	str.w	r3, [r0], #4
   12f74:	f851 3b04 	ldr.w	r3, [r1], #4
   12f78:	f840 3b04 	str.w	r3, [r0], #4
   12f7c:	f851 3b04 	ldr.w	r3, [r1], #4
   12f80:	f840 3b04 	str.w	r3, [r0], #4
   12f84:	f851 3b04 	ldr.w	r3, [r1], #4
   12f88:	f840 3b04 	str.w	r3, [r0], #4
   12f8c:	f851 3b04 	ldr.w	r3, [r1], #4
   12f90:	f840 3b04 	str.w	r3, [r0], #4
   12f94:	f851 3b04 	ldr.w	r3, [r1], #4
   12f98:	f840 3b04 	str.w	r3, [r0], #4
   12f9c:	f851 3b04 	ldr.w	r3, [r1], #4
   12fa0:	f840 3b04 	str.w	r3, [r0], #4
   12fa4:	f851 3b04 	ldr.w	r3, [r1], #4
   12fa8:	f840 3b04 	str.w	r3, [r0], #4
   12fac:	3a40      	subs	r2, #64	; 0x40
   12fae:	d2bd      	bcs.n	12f2c <memcpy+0x10>
   12fb0:	3230      	adds	r2, #48	; 0x30
   12fb2:	d311      	bcc.n	12fd8 <memcpy+0xbc>
   12fb4:	f851 3b04 	ldr.w	r3, [r1], #4
   12fb8:	f840 3b04 	str.w	r3, [r0], #4
   12fbc:	f851 3b04 	ldr.w	r3, [r1], #4
   12fc0:	f840 3b04 	str.w	r3, [r0], #4
   12fc4:	f851 3b04 	ldr.w	r3, [r1], #4
   12fc8:	f840 3b04 	str.w	r3, [r0], #4
   12fcc:	f851 3b04 	ldr.w	r3, [r1], #4
   12fd0:	f840 3b04 	str.w	r3, [r0], #4
   12fd4:	3a10      	subs	r2, #16
   12fd6:	d2ed      	bcs.n	12fb4 <memcpy+0x98>
   12fd8:	320c      	adds	r2, #12
   12fda:	d305      	bcc.n	12fe8 <memcpy+0xcc>
   12fdc:	f851 3b04 	ldr.w	r3, [r1], #4
   12fe0:	f840 3b04 	str.w	r3, [r0], #4
   12fe4:	3a04      	subs	r2, #4
   12fe6:	d2f9      	bcs.n	12fdc <memcpy+0xc0>
   12fe8:	3204      	adds	r2, #4
   12fea:	d008      	beq.n	12ffe <memcpy+0xe2>
   12fec:	07d2      	lsls	r2, r2, #31
   12fee:	bf1c      	itt	ne
   12ff0:	f811 3b01 	ldrbne.w	r3, [r1], #1
   12ff4:	f800 3b01 	strbne.w	r3, [r0], #1
   12ff8:	d301      	bcc.n	12ffe <memcpy+0xe2>
   12ffa:	880b      	ldrh	r3, [r1, #0]
   12ffc:	8003      	strh	r3, [r0, #0]
   12ffe:	4660      	mov	r0, ip
   13000:	4770      	bx	lr
   13002:	bf00      	nop
   13004:	2a08      	cmp	r2, #8
   13006:	d313      	bcc.n	13030 <memcpy+0x114>
   13008:	078b      	lsls	r3, r1, #30
   1300a:	d08d      	beq.n	12f28 <memcpy+0xc>
   1300c:	f010 0303 	ands.w	r3, r0, #3
   13010:	d08a      	beq.n	12f28 <memcpy+0xc>
   13012:	f1c3 0304 	rsb	r3, r3, #4
   13016:	1ad2      	subs	r2, r2, r3
   13018:	07db      	lsls	r3, r3, #31
   1301a:	bf1c      	itt	ne
   1301c:	f811 3b01 	ldrbne.w	r3, [r1], #1
   13020:	f800 3b01 	strbne.w	r3, [r0], #1
   13024:	d380      	bcc.n	12f28 <memcpy+0xc>
   13026:	f831 3b02 	ldrh.w	r3, [r1], #2
   1302a:	f820 3b02 	strh.w	r3, [r0], #2
   1302e:	e77b      	b.n	12f28 <memcpy+0xc>
   13030:	3a04      	subs	r2, #4
   13032:	d3d9      	bcc.n	12fe8 <memcpy+0xcc>
   13034:	3a01      	subs	r2, #1
   13036:	f811 3b01 	ldrb.w	r3, [r1], #1
   1303a:	f800 3b01 	strb.w	r3, [r0], #1
   1303e:	d2f9      	bcs.n	13034 <memcpy+0x118>
   13040:	780b      	ldrb	r3, [r1, #0]
   13042:	7003      	strb	r3, [r0, #0]
   13044:	784b      	ldrb	r3, [r1, #1]
   13046:	7043      	strb	r3, [r0, #1]
   13048:	788b      	ldrb	r3, [r1, #2]
   1304a:	7083      	strb	r3, [r0, #2]
   1304c:	4660      	mov	r0, ip
   1304e:	4770      	bx	lr

00013050 <memset>:
   13050:	b470      	push	{r4, r5, r6}
   13052:	0786      	lsls	r6, r0, #30
   13054:	d046      	beq.n	130e4 <memset+0x94>
   13056:	1e54      	subs	r4, r2, #1
   13058:	2a00      	cmp	r2, #0
   1305a:	d041      	beq.n	130e0 <memset+0x90>
   1305c:	b2ca      	uxtb	r2, r1
   1305e:	4603      	mov	r3, r0
   13060:	e002      	b.n	13068 <memset+0x18>
   13062:	f114 34ff 	adds.w	r4, r4, #4294967295
   13066:	d33b      	bcc.n	130e0 <memset+0x90>
   13068:	f803 2b01 	strb.w	r2, [r3], #1
   1306c:	079d      	lsls	r5, r3, #30
   1306e:	d1f8      	bne.n	13062 <memset+0x12>
   13070:	2c03      	cmp	r4, #3
   13072:	d92e      	bls.n	130d2 <memset+0x82>
   13074:	b2cd      	uxtb	r5, r1
   13076:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   1307a:	2c0f      	cmp	r4, #15
   1307c:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   13080:	d919      	bls.n	130b6 <memset+0x66>
   13082:	f103 0210 	add.w	r2, r3, #16
   13086:	4626      	mov	r6, r4
   13088:	3e10      	subs	r6, #16
   1308a:	2e0f      	cmp	r6, #15
   1308c:	f842 5c10 	str.w	r5, [r2, #-16]
   13090:	f842 5c0c 	str.w	r5, [r2, #-12]
   13094:	f842 5c08 	str.w	r5, [r2, #-8]
   13098:	f842 5c04 	str.w	r5, [r2, #-4]
   1309c:	f102 0210 	add.w	r2, r2, #16
   130a0:	d8f2      	bhi.n	13088 <memset+0x38>
   130a2:	f1a4 0210 	sub.w	r2, r4, #16
   130a6:	f022 020f 	bic.w	r2, r2, #15
   130aa:	f004 040f 	and.w	r4, r4, #15
   130ae:	3210      	adds	r2, #16
   130b0:	2c03      	cmp	r4, #3
   130b2:	4413      	add	r3, r2
   130b4:	d90d      	bls.n	130d2 <memset+0x82>
   130b6:	461e      	mov	r6, r3
   130b8:	4622      	mov	r2, r4
   130ba:	3a04      	subs	r2, #4
   130bc:	2a03      	cmp	r2, #3
   130be:	f846 5b04 	str.w	r5, [r6], #4
   130c2:	d8fa      	bhi.n	130ba <memset+0x6a>
   130c4:	1f22      	subs	r2, r4, #4
   130c6:	f022 0203 	bic.w	r2, r2, #3
   130ca:	3204      	adds	r2, #4
   130cc:	4413      	add	r3, r2
   130ce:	f004 0403 	and.w	r4, r4, #3
   130d2:	b12c      	cbz	r4, 130e0 <memset+0x90>
   130d4:	b2c9      	uxtb	r1, r1
   130d6:	441c      	add	r4, r3
   130d8:	f803 1b01 	strb.w	r1, [r3], #1
   130dc:	429c      	cmp	r4, r3
   130de:	d1fb      	bne.n	130d8 <memset+0x88>
   130e0:	bc70      	pop	{r4, r5, r6}
   130e2:	4770      	bx	lr
   130e4:	4614      	mov	r4, r2
   130e6:	4603      	mov	r3, r0
   130e8:	e7c2      	b.n	13070 <memset+0x20>
   130ea:	bf00      	nop

000130ec <__register_exitproc>:
   130ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   130f0:	4d2c      	ldr	r5, [pc, #176]	; (131a4 <__register_exitproc+0xb8>)
   130f2:	4606      	mov	r6, r0
   130f4:	6828      	ldr	r0, [r5, #0]
   130f6:	4698      	mov	r8, r3
   130f8:	460f      	mov	r7, r1
   130fa:	4691      	mov	r9, r2
   130fc:	f000 f882 	bl	13204 <__retarget_lock_acquire_recursive>
   13100:	4b29      	ldr	r3, [pc, #164]	; (131a8 <__register_exitproc+0xbc>)
   13102:	681c      	ldr	r4, [r3, #0]
   13104:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
   13108:	2b00      	cmp	r3, #0
   1310a:	d03e      	beq.n	1318a <__register_exitproc+0x9e>
   1310c:	685a      	ldr	r2, [r3, #4]
   1310e:	2a1f      	cmp	r2, #31
   13110:	dc1c      	bgt.n	1314c <__register_exitproc+0x60>
   13112:	f102 0e01 	add.w	lr, r2, #1
   13116:	b176      	cbz	r6, 13136 <__register_exitproc+0x4a>
   13118:	eb03 0182 	add.w	r1, r3, r2, lsl #2
   1311c:	2401      	movs	r4, #1
   1311e:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
   13122:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
   13126:	4094      	lsls	r4, r2
   13128:	4320      	orrs	r0, r4
   1312a:	2e02      	cmp	r6, #2
   1312c:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   13130:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
   13134:	d023      	beq.n	1317e <__register_exitproc+0x92>
   13136:	3202      	adds	r2, #2
   13138:	f8c3 e004 	str.w	lr, [r3, #4]
   1313c:	6828      	ldr	r0, [r5, #0]
   1313e:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
   13142:	f000 f861 	bl	13208 <__retarget_lock_release_recursive>
   13146:	2000      	movs	r0, #0
   13148:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1314c:	4b17      	ldr	r3, [pc, #92]	; (131ac <__register_exitproc+0xc0>)
   1314e:	b30b      	cbz	r3, 13194 <__register_exitproc+0xa8>
   13150:	f44f 70c8 	mov.w	r0, #400	; 0x190
   13154:	f3af 8000 	nop.w
   13158:	4603      	mov	r3, r0
   1315a:	b1d8      	cbz	r0, 13194 <__register_exitproc+0xa8>
   1315c:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
   13160:	6002      	str	r2, [r0, #0]
   13162:	2100      	movs	r1, #0
   13164:	6041      	str	r1, [r0, #4]
   13166:	460a      	mov	r2, r1
   13168:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
   1316c:	f04f 0e01 	mov.w	lr, #1
   13170:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
   13174:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
   13178:	2e00      	cmp	r6, #0
   1317a:	d0dc      	beq.n	13136 <__register_exitproc+0x4a>
   1317c:	e7cc      	b.n	13118 <__register_exitproc+0x2c>
   1317e:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
   13182:	430c      	orrs	r4, r1
   13184:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
   13188:	e7d5      	b.n	13136 <__register_exitproc+0x4a>
   1318a:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
   1318e:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   13192:	e7bb      	b.n	1310c <__register_exitproc+0x20>
   13194:	6828      	ldr	r0, [r5, #0]
   13196:	f000 f837 	bl	13208 <__retarget_lock_release_recursive>
   1319a:	f04f 30ff 	mov.w	r0, #4294967295
   1319e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   131a2:	bf00      	nop
   131a4:	20000a30 	.word	0x20000a30
   131a8:	000142a0 	.word	0x000142a0
   131ac:	00000000 	.word	0x00000000

000131b0 <register_fini>:
   131b0:	4b02      	ldr	r3, [pc, #8]	; (131bc <register_fini+0xc>)
   131b2:	b113      	cbz	r3, 131ba <register_fini+0xa>
   131b4:	4802      	ldr	r0, [pc, #8]	; (131c0 <register_fini+0x10>)
   131b6:	f000 b805 	b.w	131c4 <atexit>
   131ba:	4770      	bx	lr
   131bc:	00000000 	.word	0x00000000
   131c0:	000131d1 	.word	0x000131d1

000131c4 <atexit>:
   131c4:	2300      	movs	r3, #0
   131c6:	4601      	mov	r1, r0
   131c8:	461a      	mov	r2, r3
   131ca:	4618      	mov	r0, r3
   131cc:	f7ff bf8e 	b.w	130ec <__register_exitproc>

000131d0 <__libc_fini_array>:
   131d0:	b538      	push	{r3, r4, r5, lr}
   131d2:	4c0a      	ldr	r4, [pc, #40]	; (131fc <__libc_fini_array+0x2c>)
   131d4:	4d0a      	ldr	r5, [pc, #40]	; (13200 <__libc_fini_array+0x30>)
   131d6:	1b64      	subs	r4, r4, r5
   131d8:	10a4      	asrs	r4, r4, #2
   131da:	d00a      	beq.n	131f2 <__libc_fini_array+0x22>
   131dc:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
   131e0:	3b01      	subs	r3, #1
   131e2:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   131e6:	3c01      	subs	r4, #1
   131e8:	f855 3904 	ldr.w	r3, [r5], #-4
   131ec:	4798      	blx	r3
   131ee:	2c00      	cmp	r4, #0
   131f0:	d1f9      	bne.n	131e6 <__libc_fini_array+0x16>
   131f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   131f6:	f001 b861 	b.w	142bc <_fini>
   131fa:	bf00      	nop
   131fc:	000142cc 	.word	0x000142cc
   13200:	000142c8 	.word	0x000142c8

00013204 <__retarget_lock_acquire_recursive>:
   13204:	4770      	bx	lr
   13206:	bf00      	nop

00013208 <__retarget_lock_release_recursive>:
   13208:	4770      	bx	lr
   1320a:	bf00      	nop
   1320c:	682f2e2e 	.word	0x682f2e2e
   13210:	702f6c70 	.word	0x702f6c70
   13214:	2f74726f 	.word	0x2f74726f
   13218:	5f6c7068 	.word	0x5f6c7068
   1321c:	6f697067 	.word	0x6f697067
   13220:	7361625f 	.word	0x7361625f
   13224:	00682e65 	.word	0x00682e65
   13228:	682f2e2e 	.word	0x682f2e2e
   1322c:	692f6c61 	.word	0x692f6c61
   13230:	756c636e 	.word	0x756c636e
   13234:	682f6564 	.word	0x682f6564
   13238:	775f6c61 	.word	0x775f6c61
   1323c:	682e7464 	.word	0x682e7464
   13240:	00000000 	.word	0x00000000
   13244:	682f2e2e 	.word	0x682f2e2e
   13248:	732f6c61 	.word	0x732f6c61
   1324c:	682f6372 	.word	0x682f6372
   13250:	635f6c61 	.word	0x635f6c61
   13254:	6e656c61 	.word	0x6e656c61
   13258:	2e726164 	.word	0x2e726164
   1325c:	00000063 	.word	0x00000063
   13260:	682f2e2e 	.word	0x682f2e2e
   13264:	732f6c61 	.word	0x732f6c61
   13268:	682f6372 	.word	0x682f6372
   1326c:	635f6c61 	.word	0x635f6c61
   13270:	615f6e61 	.word	0x615f6e61
   13274:	636e7973 	.word	0x636e7973
   13278:	0000632e 	.word	0x0000632e
   1327c:	682f2e2e 	.word	0x682f2e2e
   13280:	732f6c61 	.word	0x732f6c61
   13284:	682f6372 	.word	0x682f6372
   13288:	635f6c61 	.word	0x635f6c61
   1328c:	735f6372 	.word	0x735f6372
   13290:	2e636e79 	.word	0x2e636e79
   13294:	00000063 	.word	0x00000063
   13298:	682f2e2e 	.word	0x682f2e2e
   1329c:	732f6c61 	.word	0x732f6c61
   132a0:	682f6372 	.word	0x682f6372
   132a4:	695f6c61 	.word	0x695f6c61
   132a8:	6d5f6332 	.word	0x6d5f6332
   132ac:	6e79735f 	.word	0x6e79735f
   132b0:	00632e63 	.word	0x00632e63
   132b4:	682f2e2e 	.word	0x682f2e2e
   132b8:	732f6c61 	.word	0x732f6c61
   132bc:	682f6372 	.word	0x682f6372
   132c0:	705f6c61 	.word	0x705f6c61
   132c4:	632e6d77 	.word	0x632e6d77
   132c8:	00000000 	.word	0x00000000
   132cc:	682f2e2e 	.word	0x682f2e2e
   132d0:	732f6c61 	.word	0x732f6c61
   132d4:	682f6372 	.word	0x682f6372
   132d8:	715f6c61 	.word	0x715f6c61
   132dc:	5f697073 	.word	0x5f697073
   132e0:	636e7973 	.word	0x636e7973
   132e4:	0000632e 	.word	0x0000632e
   132e8:	682f2e2e 	.word	0x682f2e2e
   132ec:	732f6c61 	.word	0x732f6c61
   132f0:	682f6372 	.word	0x682f6372
   132f4:	735f6c61 	.word	0x735f6c61
   132f8:	6d5f6970 	.word	0x6d5f6970
   132fc:	6e79735f 	.word	0x6e79735f
   13300:	00632e63 	.word	0x00632e63
   13304:	682f2e2e 	.word	0x682f2e2e
   13308:	732f6c61 	.word	0x732f6c61
   1330c:	682f6372 	.word	0x682f6372
   13310:	745f6c61 	.word	0x745f6c61
   13314:	72656d69 	.word	0x72656d69
   13318:	0000632e 	.word	0x0000632e
   1331c:	682f2e2e 	.word	0x682f2e2e
   13320:	752f6c61 	.word	0x752f6c61
   13324:	736c6974 	.word	0x736c6974
   13328:	6372732f 	.word	0x6372732f
   1332c:	6974752f 	.word	0x6974752f
   13330:	6c5f736c 	.word	0x6c5f736c
   13334:	2e747369 	.word	0x2e747369
   13338:	00000063 	.word	0x00000063
   1333c:	03020100 	.word	0x03020100
   13340:	07060504 	.word	0x07060504
   13344:	14100c08 	.word	0x14100c08
   13348:	40302018 	.word	0x40302018

0001334c <_map>:
   1334c:	00000000 00000040 00000001 00000021     ....@.......!...
   1335c:	00000003 00000003 00000004 00000004     ................
   1336c:	00000005 00000005 00000006 00000056     ............V...
   1337c:	00000007 00000057 00000008 00000028     ....W.......(...
   1338c:	00000009 00000029 682f2e2e 652f6c70     ....)...../hpl/e
   1339c:	682f6369 655f6c70 632e6369 00000000     ic/hpl_eic.c....

000133ac <user_mux_confs>:
   133ac:	00020100 00000000 00000000 00000000     ................
	...

000133f0 <channel_confs>:
   133f0:	0660065f 00000000 00000000 00000000     _.`.............
	...

00013430 <interrupt_cfg>:
	...
   134b0:	682f2e2e 712f6c70 2f697073 5f6c7068     ../hpl/qspi/hpl_
   134c0:	69707371 0000632e 682f2e2e 722f6c70     qspi.c..../hpl/r
   134d0:	682f6374 725f6c70 632e6374 00000000     tc/hpl_rtc.c....
   134e0:	682f2e2e 732f6c70 6f637265 70682f6d     ../hpl/sercom/hp
   134f0:	65735f6c 6d6f6372 0000632e 40003000     l_sercom.c...0.@
   13500:	40003400 41012000 41014000 43000000     .4.@. .A.@.A...C
   13510:	43000400 43000800 43000c00              ...C...C...C

0001351c <sercomspi_regs>:
   1351c:	0020000c 00020000 00000000 01ff0001     .. .............
   1352c:	30000c04 02000000 00000000 ff001700     ...0............
   1353c:	00000601 682f2e2e 742f6c70 70682f63     ....../hpl/tc/hp
   1354c:	63745f6c 0000632e 40003800 40003c00     l_tc.c...8.@.<.@
   1355c:	4101a000 4101c000 42001400 42001800     ...A...A...B...B
   1356c:	43001400 43001800                       ...C...C

00013574 <_usb_ep_cfgs>:
   13574:	20000d5c 00000000 00000040 20000d9c     \.. ....@...... 
   13584:	20000ddc 00400040 20000e1c 20000e5c     ... @.@.... \.. 
   13594:	00400040 20000e9c 20000edc 00400040     @.@.... ... @.@.
   135a4:	20000f1c 20000f5c 00400040 00000804     ... \.. @.@.....
   135b4:	00004a25 682f2e2e 772f6c70 682f7464     %J..../hpl/wdt/h
   135c4:	775f6c70 632e7464 00000000 682f2e2e     pl_wdt.c....../h
   135d4:	702f6c70 2f74726f 5f6c7068 6f697067     pl/port/hpl_gpio
   135e4:	7361625f 00682e65                       _base.h.

000135ec <n25q256a_interface>:
   135ec:	0000b06d 0000b111 0000b221 0000b3d9     m.......!.......
   135fc:	0000b469 752f2e2e 642f6273 63697665     i...../usb/devic
   1360c:	73752f65 2e636462 00000063              e/usbdc.c...

00013618 <_ZTV13CANOpen_Class>:
	...
   13620:	0000e059                                Y...

00013624 <_ZTV8CO_Class>:
	...
   1362c:	0000e059                                Y...

00013630 <_ZTV15CO_Driver_Class>:
	...
   13638:	0000e059                                Y...

0001363c <_ZL13OD_record1018>:
   1363c:	200003d0 00000005 00000001 200003d4     ... ........... 
   1364c:	00000085 00000004 200003d8 00000085     ........... ....
   1365c:	00000004 200003dc 00000085 00000004     ....... ........
   1366c:	200003e0 00000085 00000004              ... ........

00013678 <_ZL13OD_record1200>:
   13678:	200003ec 00000005 00000001 200003f0     ... ........... 
   13688:	00000085 00000004 200003f4 00000085     ........... ....
   13698:	00000004                                ....

0001369c <_ZL13OD_record1400>:
   1369c:	200003f8 00000005 00000001 200003fc     ... ........... 
   136ac:	0000008d 00000004 20000400 0000000d     ........... ....
   136bc:	00000001                                ....

000136c0 <_ZL13OD_record1401>:
   136c0:	20000404 00000005 00000001 20000408     ... ........... 
   136d0:	0000008d 00000004 2000040c 0000000d     ........... ....
   136e0:	00000001                                ....

000136e4 <_ZL13OD_record1402>:
   136e4:	20000410 00000005 00000001 20000414     ... ........... 
   136f4:	0000008d 00000004 20000418 0000000d     ........... ....
   13704:	00000001                                ....

00013708 <_ZL13OD_record1403>:
   13708:	2000041c 00000005 00000001 20000420     ... ........ .. 
   13718:	0000008d 00000004 20000424 0000000d     ........$.. ....
   13728:	00000001                                ....

0001372c <_ZL13OD_record1600>:
   1372c:	20000428 0000000d 00000001 2000042c     (.. ........,.. 
   1373c:	0000008d 00000004 20000430 0000008d     ........0.. ....
   1374c:	00000004 20000434 0000008d 00000004     ....4.. ........
   1375c:	20000438 0000008d 00000004 2000043c     8.. ........<.. 
   1376c:	0000008d 00000004 20000440 0000008d     ........@.. ....
   1377c:	00000004 20000444 0000008d 00000004     ....D.. ........
   1378c:	20000448 0000008d 00000004              H.. ........

00013798 <_ZL13OD_record1601>:
   13798:	2000044c 0000000d 00000001 20000450     L.. ........P.. 
   137a8:	0000008d 00000004 20000454 0000008d     ........T.. ....
   137b8:	00000004 20000458 0000008d 00000004     ....X.. ........
   137c8:	2000045c 0000008d 00000004 20000460     \.. ........`.. 
   137d8:	0000008d 00000004 20000464 0000008d     ........d.. ....
   137e8:	00000004 20000468 0000008d 00000004     ....h.. ........
   137f8:	2000046c 0000008d 00000004              l.. ........

00013804 <_ZL13OD_record1602>:
   13804:	20000470 0000000d 00000001 20000474     p.. ........t.. 
   13814:	0000008d 00000004 20000478 0000008d     ........x.. ....
   13824:	00000004 2000047c 0000008d 00000004     ....|.. ........
   13834:	20000480 0000008d 00000004 20000484     ... ........... 
   13844:	0000008d 00000004 20000488 0000008d     ........... ....
   13854:	00000004 2000048c 0000008d 00000004     ....... ........
   13864:	20000490 0000008d 00000004              ... ........

00013870 <_ZL13OD_record1603>:
   13870:	20000494 0000000d 00000001 20000498     ... ........... 
   13880:	0000008d 00000004 2000049c 0000008d     ........... ....
   13890:	00000004 200004a0 0000008d 00000004     ....... ........
   138a0:	200004a4 0000008d 00000004 200004a8     ... ........... 
   138b0:	0000008d 00000004 200004ac 0000008d     ........... ....
   138c0:	00000004 200004b0 0000008d 00000004     ....... ........
   138d0:	200004b4 0000008d 00000004              ... ........

000138dc <_ZL13OD_record1800>:
   138dc:	200004b8 00000005 00000001 200004bc     ... ........... 
   138ec:	0000008d 00000004 200004c0 0000000d     ........... ....
   138fc:	00000001 200004c4 0000008d 00000002     ....... ........
   1390c:	200004c8 0000000d 00000001 200004cc     ... ........... 
   1391c:	0000008d 00000002 200004d0 0000000d     ........... ....
   1392c:	00000001                                ....

00013930 <_ZL13OD_record1801>:
   13930:	200004d4 00000005 00000001 200004d8     ... ........... 
   13940:	0000008d 00000004 200004dc 0000000d     ........... ....
   13950:	00000001 200004e0 0000008d 00000002     ....... ........
   13960:	200004e4 0000000d 00000001 200004e8     ... ........... 
   13970:	0000008d 00000002 200004ec 0000000d     ........... ....
   13980:	00000001                                ....

00013984 <_ZL13OD_record1802>:
   13984:	200004f0 00000005 00000001 200004f4     ... ........... 
   13994:	0000008d 00000004 200004f8 0000000d     ........... ....
   139a4:	00000001 200004fc 0000008d 00000002     ....... ........
   139b4:	20000500 0000000d 00000001 20000504     ... ........... 
   139c4:	0000008d 00000002 20000508 0000000d     ........... ....
   139d4:	00000001                                ....

000139d8 <_ZL13OD_record1803>:
   139d8:	2000050c 00000005 00000001 20000510     ... ........... 
   139e8:	0000008d 00000004 20000514 0000000d     ........... ....
   139f8:	00000001 20000518 0000008d 00000002     ....... ........
   13a08:	2000051c 0000000d 00000001 20000520     ... ........ .. 
   13a18:	0000008d 00000002 20000524 0000000d     ........$.. ....
   13a28:	00000001                                ....

00013a2c <_ZL13OD_record1A00>:
   13a2c:	20000528 0000000d 00000001 2000052c     (.. ........,.. 
   13a3c:	0000008d 00000004 20000530 0000008d     ........0.. ....
   13a4c:	00000004 20000534 0000008d 00000004     ....4.. ........
   13a5c:	20000538 0000008d 00000004 2000053c     8.. ........<.. 
   13a6c:	0000008d 00000004 20000540 0000008d     ........@.. ....
   13a7c:	00000004 20000544 0000008d 00000004     ....D.. ........
   13a8c:	20000548 0000008d 00000004              H.. ........

00013a98 <_ZL13OD_record1A01>:
   13a98:	2000054c 0000000d 00000001 20000550     L.. ........P.. 
   13aa8:	0000008d 00000004 20000554 0000008d     ........T.. ....
   13ab8:	00000004 20000558 0000008d 00000004     ....X.. ........
   13ac8:	2000055c 0000008d 00000004 20000560     \.. ........`.. 
   13ad8:	0000008d 00000004 20000564 0000008d     ........d.. ....
   13ae8:	00000004 20000568 0000008d 00000004     ....h.. ........
   13af8:	2000056c 0000008d 00000004              l.. ........

00013b04 <_ZL13OD_record1A02>:
   13b04:	20000570 0000000d 00000001 20000574     p.. ........t.. 
   13b14:	0000008d 00000004 20000578 0000008d     ........x.. ....
   13b24:	00000004 2000057c 0000008d 00000004     ....|.. ........
   13b34:	20000580 0000008d 00000004 20000584     ... ........... 
   13b44:	0000008d 00000004 20000588 0000008d     ........... ....
   13b54:	00000004 2000058c 0000008d 00000004     ....... ........
   13b64:	20000590 0000008d 00000004              ... ........

00013b70 <_ZL13OD_record1A03>:
   13b70:	20000594 0000000d 00000001 20000598     ... ........... 
   13b80:	0000008d 00000004 2000059c 0000008d     ........... ....
   13b90:	00000004 200005a0 0000008d 00000004     ....... ........
   13ba0:	200005a4 0000008d 00000004 200005a8     ... ........... 
   13bb0:	0000008d 00000004 200005ac 0000008d     ........... ....
   13bc0:	00000004 200005b0 0000008d 00000004     ....... ........
   13bd0:	200005b4 0000008d 00000004              ... ........

00013bdc <_ZL13OD_record2120>:
   13bdc:	200002a0 00000006 00000001 200002a8     ... ........... 
   13bec:	000000be 00000008 200002b0 000000be     ........... ....
   13bfc:	00000008 200002b8 000000be 00000004     ....... ........
   13c0c:	200002c0 000000be 00000008 00000000     ... ............
   13c1c:	0000000e 00000000                       ........

00013c24 <_ZL13OD_record2130>:
   13c24:	200002d0 00000006 00000001 200002d1     ... ........... 
   13c34:	00000006 0000001e 200002f0 0000008e     ........... ....
   13c44:	00000008 200002f8 000000be 00000004     ....... ........

00013c54 <CO_ObjDict>:
   13c54:	00001000 00000000 00000085 00000004     ................
   13c64:	20000390 00001001 00000000 00000036     ... ........6...
   13c74:	00000001 20000214 00001002 00000000     ....... ........
   13c84:	000000b6 00000004 20000218 00001003     ........... ....
   13c94:	00000008 0000008e 00000004 2000021c     ............... 
   13ca4:	00001005 00000000 0000008d 00000004     ................
   13cb4:	20000394 00001006 00000000 0000008d     ... ............
   13cc4:	00000004 20000398 00001007 00000000     ....... ........
   13cd4:	0000008d 00000004 2000039c 00001008     ........... ....
   13ce4:	00000000 00000005 0000000b 200003a0     ............... 
   13cf4:	00001009 00000000 00000005 00000004     ................
   13d04:	200003ab 0000100a 00000000 00000005     ... ............
   13d14:	00000004 200003af 00001010 00000001     ....... ........
   13d24:	0000008e 00000004 2000023c 00001011     ........<.. ....
   13d34:	00000001 0000008e 00000004 20000240     ............@.. 
   13d44:	00001014 00000000 00000085 00000004     ................
   13d54:	200003b4 00001015 00000000 0000008d     ... ............
   13d64:	00000002 200003b8 00001016 00000004     ....... ........
   13d74:	0000008d 00000004 200003bc 00001017     ........... ....
   13d84:	00000000 0000008d 00000002 200003cc     ............... 
   13d94:	00001018 00000004 00000000 00000000     ................
   13da4:	0001363c 00001019 00000000 0000000d     <6..............
   13db4:	00000001 200003e4 00001029 00000006     ....... ).......
   13dc4:	0000000d 00000001 200003e5 00001200     ........... ....
   13dd4:	00000002 00000000 00000000 00013678     ............x6..
   13de4:	00001400 00000002 00000000 00000000     ................
   13df4:	0001369c 00001401 00000002 00000000     .6..............
   13e04:	00000000 000136c0 00001402 00000002     .....6..........
	...
   13e1c:	000136e4 00001403 00000002 00000000     .6..............
   13e2c:	00000000 00013708 00001600 00000008     .....7..........
	...
   13e44:	0001372c 00001601 00000008 00000000     ,7..............
   13e54:	00000000 00013798 00001602 00000008     .....7..........
	...
   13e6c:	00013804 00001603 00000008 00000000     .8..............
   13e7c:	00000000 00013870 00001800 00000006     ....p8..........
	...
   13e94:	000138dc 00001801 00000006 00000000     .8..............
   13ea4:	00000000 00013930 00001802 00000006     ....09..........
	...
   13ebc:	00013984 00001803 00000006 00000000     .9..............
   13ecc:	00000000 000139d8 00001a00 00000008     .....9..........
	...
   13ee4:	00013a2c 00001a01 00000008 00000000     ,:..............
   13ef4:	00000000 00013a98 00001a02 00000008     .....:..........
	...
   13f0c:	00013b04 00001a03 00000008 00000000     .;..............
   13f1c:	00000000 00013b70 00001f80 00000000     ....p;..........
   13f2c:	0000008d 00000004 200005b8 00002100     ........... .!..
   13f3c:	00000000 00000036 0000000a 20000244     ....6.......D.. 
   13f4c:	00002101 00000000 0000000d 00000001     .!..............
   13f5c:	200005bc 00002102 00000000 0000008d     ... .!..........
   13f6c:	00000002 200005be 00002103 00000000     ....... .!......
   13f7c:	0000008e 00000002 2000024e 00002104     ........N.. .!..
   13f8c:	00000000 00000086 00000002 20000250     ............P.. 
   13f9c:	00002106 00000000 00000087 00000004     .!..............
   13fac:	20000344 00002107 00000005 000000be     D.. .!..........
   13fbc:	00000002 20000252 00002108 00000001     ....R.. .!......
   13fcc:	000000fd 00000008 2000025c 00002109     ........\.. .!..
   13fdc:	00000001 000000fd 00000008 2000025e     ............^.. 
   13fec:	00002110 00000010 000000fe 00000004     .!..............
   13ffc:	20000260 00002111 00000010 000000fd     `.. .!..........
   1400c:	00000004 200005c0 00002112 00000010     ....... .!......
   1401c:	000000ff 00000004 20000348 00002120     ........H..  !..
   1402c:	00000005 0000007d 00000008 00013bdc     ....}........;..
   1403c:	00002130 00000003 00000000 00000000     0!..............
   1404c:	00013c24 00006000 00000008 00000076     $<...`......v...
   1405c:	00000001 20000300 00006200 00000008     ....... .b......
   1406c:	0000003e 00000001 20000308 00006401     >.......... .d..
   1407c:	0000000c 000000b6 00000002 20000310     ............... 
   1408c:	00006411 00000008 000000be 00000002     .d..............
   1409c:	20000328                                (.. 

000140a0 <_ZL17crc16_ccitt_table>:
   140a0:	10210000 30632042 50a54084 70e760c6     ..!.B c0.@.P.`.p
   140b0:	91298108 b16ba14a d1adc18c f1efe1ce     ..).J.k.........
   140c0:	02101231 22523273 429452b5 62d672f7     1...s2R".R.B.r.b
   140d0:	83189339 a35ab37b c39cd3bd e3def3ff     9...{.Z.........
   140e0:	34432462 14010420 74c764e6 548544a4     b$C4 ....d.t.D.T
   140f0:	b54ba56a 95098528 f5cfe5ee d58dc5ac     j.K.(...........
   14100:	26723653 06301611 66f676d7 46b45695     S6r&..0..v.f.V.F
   14110:	a77ab75b 87389719 e7fef7df c7bcd79d     [.z...8.........
   14120:	58e548c4 78a76886 18610840 38232802     .H.X.h.x@.a..(#8
   14130:	d9edc9cc f9afe98e 99698948 b92ba90a     ........H.i...+.
   14140:	4ad45af5 6a967ab7 0a501a71 2a123a33     .Z.J.z.jq.P.3:.*
   14150:	cbdcdbfd eb9efbbf 8b589b79 ab1abb3b     ........y.X.;...
   14160:	7c876ca6 5cc54ce4 3c032c22 1c410c60     .l.|.L.\",.<`.A.
   14170:	fd8fedae ddcdcdec bd0bad2a 9d498d68     ........*...h.I.
   14180:	6eb67e97 4ef45ed5 2e323e13 0e701e51     .~.n.^.N.>2.Q.p.
   14190:	efbeff9f cffcdfdd af3abf1b 8f789f59     ..........:.Y.x.
   141a0:	81a99188 a1ebb1ca c12dd10c e16ff14e     ..........-.N.o.
   141b0:	00a11080 20e330c2 40255004 60677046     .....0. .P%@Fpg`
   141c0:	939883b9 b3daa3fb d31cc33d f35ee37f     ........=.....^.
   141d0:	129002b1 32d222f3 52144235 72566277     .....".25B.RwbVr
   141e0:	a5cbb5ea 858995a8 e54ff56e c50dd52c     ........n.O.,...
   141f0:	24c334e2 048114a0 64477466 44055424     .4.$....ftGd$T.D
   14200:	b7faa7db 97b88799 f77ee75f d73cc71d     ........_.~...<.
   14210:	36f226d3 16b00691 76766657 56344615     .&.6....Wfvv.F4V
   14220:	c96dd94c e92ff90e 89e999c8 a9abb98a     L.m.../.........
   14230:	48655844 68277806 08e118c0 28a33882     DXeH.x'h.....8.(
   14240:	db5ccb7d fb1eeb3f 9bd88bf9 bb9aabbb     }.\.?...........
   14250:	5a544a75 7a166a37 1ad00af1 3a922ab3     uJTZ7j.z.....*.:
   14260:	ed0ffd2e cd4ddd6c ad8bbdaa 8dc99de8     ....l.M.........
   14270:	6c077c26 4c455c64 2c833ca2 0cc11ce0     &|.ld\EL.<.,....
   14280:	ff3eef1f df7ccf5d bfbaaf9b 9ff88fd9     ..>.].|.........
   14290:	7e366e17 5e744e55 3eb22e93 1ef00ed1     .n6~UNt^...>....

000142a0 <_global_impure_ptr>:
   142a0:	20000608                                ... 

000142a4 <_init>:
   142a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   142a6:	bf00      	nop
   142a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
   142aa:	bc08      	pop	{r3}
   142ac:	469e      	mov	lr, r3
   142ae:	4770      	bx	lr

000142b0 <__init_array_start>:
   142b0:	000131b1 	.word	0x000131b1

000142b4 <__frame_dummy_init_array_entry>:
   142b4:	00000289 000003b1                       ........

000142bc <_fini>:
   142bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   142be:	bf00      	nop
   142c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
   142c2:	bc08      	pop	{r3}
   142c4:	469e      	mov	lr, r3
   142c6:	4770      	bx	lr

000142c8 <__fini_array_start>:
   142c8:	00000265 	.word	0x00000265
