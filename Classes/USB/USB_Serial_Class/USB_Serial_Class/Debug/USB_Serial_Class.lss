
USB_Serial_Class.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004184  00000000  00000000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000004f4  20000000  00004184  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bkupram      00000000  47000000  47000000  000204f4  2**0
                  CONTENTS
  3 .qspi         00000000  04000000  04000000  000204f4  2**0
                  CONTENTS
  4 .bss          000003f8  200004f4  00004678  000204f4  2**2
                  ALLOC
  5 .stack        00010004  200008ec  00004a70  000204f4  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  000204f4  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  00020522  2**0
                  CONTENTS, READONLY
  8 .debug_info   0002211e  00000000  00000000  0002057b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00004429  00000000  00000000  00042699  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000ab48  00000000  00000000  00046ac2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000910  00000000  00000000  0005160a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000c80  00000000  00000000  00051f1a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00039636  00000000  00000000  00052b9a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00014b84  00000000  00000000  0008c1d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0012035a  00000000  00000000  000a0d54  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00001a30  00000000  00000000  001c10b0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	f0 08 01 20 71 04 00 00 6d 04 00 00 6d 04 00 00     ... q...m...m...
      10:	6d 04 00 00 6d 04 00 00 6d 04 00 00 00 00 00 00     m...m...m.......
	...
      2c:	6d 04 00 00 6d 04 00 00 00 00 00 00 6d 04 00 00     m...m.......m...
      3c:	5d 04 00 00 6d 04 00 00 6d 04 00 00 6d 04 00 00     ]...m...m...m...
      4c:	6d 04 00 00 6d 04 00 00 6d 04 00 00 6d 04 00 00     m...m...m...m...
      5c:	6d 04 00 00 6d 04 00 00 6d 04 00 00 6d 04 00 00     m...m...m...m...
      6c:	6d 04 00 00 6d 04 00 00 6d 04 00 00 6d 04 00 00     m...m...m...m...
      7c:	6d 04 00 00 6d 04 00 00 6d 04 00 00 6d 04 00 00     m...m...m...m...
      8c:	6d 04 00 00 6d 04 00 00 6d 04 00 00 6d 04 00 00     m...m...m...m...
      9c:	6d 04 00 00 6d 04 00 00 6d 04 00 00 6d 04 00 00     m...m...m...m...
      ac:	6d 04 00 00 6d 04 00 00 6d 04 00 00 6d 04 00 00     m...m...m...m...
      bc:	6d 04 00 00 6d 04 00 00 6d 04 00 00 6d 04 00 00     m...m...m...m...
      cc:	6d 04 00 00 6d 04 00 00 6d 04 00 00 6d 04 00 00     m...m...m...m...
      dc:	6d 04 00 00 6d 04 00 00 6d 04 00 00 00 00 00 00     m...m...m.......
	...
      f4:	6d 04 00 00 6d 04 00 00 6d 04 00 00 6d 04 00 00     m...m...m...m...
     104:	6d 04 00 00 6d 04 00 00 6d 04 00 00 6d 04 00 00     m...m...m...m...
     114:	6d 04 00 00 6d 04 00 00 6d 04 00 00 6d 04 00 00     m...m...m...m...
     124:	6d 04 00 00 6d 04 00 00 6d 04 00 00 6d 04 00 00     m...m...m...m...
     134:	6d 04 00 00 6d 04 00 00 6d 04 00 00 6d 04 00 00     m...m...m...m...
     144:	6d 04 00 00 6d 04 00 00 6d 04 00 00 6d 04 00 00     m...m...m...m...
     154:	6d 04 00 00 6d 04 00 00 6d 04 00 00 6d 04 00 00     m...m...m...m...
     164:	6d 04 00 00 6d 04 00 00 6d 04 00 00 6d 04 00 00     m...m...m...m...
     174:	6d 04 00 00 6d 04 00 00 6d 04 00 00 e9 24 00 00     m...m...m....$..
     184:	f5 24 00 00 01 25 00 00 0d 25 00 00 6d 04 00 00     .$...%...%..m...
     194:	6d 04 00 00 6d 04 00 00 6d 04 00 00 6d 04 00 00     m...m...m...m...
     1a4:	6d 04 00 00 6d 04 00 00 6d 04 00 00 6d 04 00 00     m...m...m...m...
     1b4:	6d 04 00 00 6d 04 00 00 6d 04 00 00 6d 04 00 00     m...m...m...m...
     1c4:	6d 04 00 00 6d 04 00 00 6d 04 00 00 6d 04 00 00     m...m...m...m...
     1d4:	6d 04 00 00 6d 04 00 00 6d 04 00 00 6d 04 00 00     m...m...m...m...
     1e4:	6d 04 00 00 6d 04 00 00 6d 04 00 00 6d 04 00 00     m...m...m...m...
     1f4:	6d 04 00 00 6d 04 00 00 6d 04 00 00 6d 04 00 00     m...m...m...m...
     204:	6d 04 00 00 6d 04 00 00 6d 04 00 00 6d 04 00 00     m...m...m...m...
     214:	6d 04 00 00 6d 04 00 00 6d 04 00 00 6d 04 00 00     m...m...m...m...
     224:	6d 04 00 00 6d 04 00 00 6d 04 00 00 6d 04 00 00     m...m...m...m...
     234:	6d 04 00 00 6d 04 00 00 6d 04 00 00 6d 04 00 00     m...m...m...m...
     244:	6d 04 00 00 6d 04 00 00 6d 04 00 00 6d 04 00 00     m...m...m...m...
     254:	6d 04 00 00 6d 04 00 00 6d 04 00 00 6d 04 00 00     m...m...m...m...

00000264 <__do_global_dtors_aux>:
     264:	b510      	push	{r4, lr}
     266:	4c05      	ldr	r4, [pc, #20]	; (27c <__do_global_dtors_aux+0x18>)
     268:	7823      	ldrb	r3, [r4, #0]
     26a:	b933      	cbnz	r3, 27a <__do_global_dtors_aux+0x16>
     26c:	4b04      	ldr	r3, [pc, #16]	; (280 <__do_global_dtors_aux+0x1c>)
     26e:	b113      	cbz	r3, 276 <__do_global_dtors_aux+0x12>
     270:	4804      	ldr	r0, [pc, #16]	; (284 <__do_global_dtors_aux+0x20>)
     272:	f3af 8000 	nop.w
     276:	2301      	movs	r3, #1
     278:	7023      	strb	r3, [r4, #0]
     27a:	bd10      	pop	{r4, pc}
     27c:	200004f4 	.word	0x200004f4
     280:	00000000 	.word	0x00000000
     284:	00004184 	.word	0x00004184

00000288 <frame_dummy>:
     288:	4b0c      	ldr	r3, [pc, #48]	; (2bc <frame_dummy+0x34>)
     28a:	b143      	cbz	r3, 29e <frame_dummy+0x16>
     28c:	480c      	ldr	r0, [pc, #48]	; (2c0 <frame_dummy+0x38>)
     28e:	490d      	ldr	r1, [pc, #52]	; (2c4 <frame_dummy+0x3c>)
     290:	b510      	push	{r4, lr}
     292:	f3af 8000 	nop.w
     296:	480c      	ldr	r0, [pc, #48]	; (2c8 <frame_dummy+0x40>)
     298:	6803      	ldr	r3, [r0, #0]
     29a:	b923      	cbnz	r3, 2a6 <frame_dummy+0x1e>
     29c:	bd10      	pop	{r4, pc}
     29e:	480a      	ldr	r0, [pc, #40]	; (2c8 <frame_dummy+0x40>)
     2a0:	6803      	ldr	r3, [r0, #0]
     2a2:	b933      	cbnz	r3, 2b2 <frame_dummy+0x2a>
     2a4:	4770      	bx	lr
     2a6:	4b09      	ldr	r3, [pc, #36]	; (2cc <frame_dummy+0x44>)
     2a8:	2b00      	cmp	r3, #0
     2aa:	d0f7      	beq.n	29c <frame_dummy+0x14>
     2ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     2b0:	4718      	bx	r3
     2b2:	4b06      	ldr	r3, [pc, #24]	; (2cc <frame_dummy+0x44>)
     2b4:	2b00      	cmp	r3, #0
     2b6:	d0f5      	beq.n	2a4 <frame_dummy+0x1c>
     2b8:	4718      	bx	r3
     2ba:	bf00      	nop
     2bc:	00000000 	.word	0x00000000
     2c0:	00004184 	.word	0x00004184
     2c4:	200004f8 	.word	0x200004f8
     2c8:	00004184 	.word	0x00004184
     2cc:	00000000 	.word	0x00000000

000002d0 <_ZN5Print17availableForWriteEv>:
      return write((const uint8_t *)buffer, size);
    }

    // default to zero, meaning "a single write may block"
    // should be overriden by subclasses with buffering
    virtual int availableForWrite() { return 0; }
     2d0:	2000      	movs	r0, #0
     2d2:	4770      	bx	lr

000002d4 <_ZL12cb_bulk_readh13usb_xfer_codem>:
 */
static bool cb_bulk_read(const uint8_t ep, const enum usb_xfer_code rc, const uint32_t count)
{

	
	ptrClass->rxReady=true;
     2d4:	4b02      	ldr	r3, [pc, #8]	; (2e0 <_ZL12cb_bulk_readh13usb_xfer_codem+0xc>)
     2d6:	681b      	ldr	r3, [r3, #0]
     2d8:	2201      	movs	r2, #1
     2da:	745a      	strb	r2, [r3, #17]

	return false;
}
     2dc:	2000      	movs	r0, #0
     2de:	4770      	bx	lr
     2e0:	20000510 	.word	0x20000510

000002e4 <_ZL13cb_bulk_writeh13usb_xfer_codem>:
static bool cb_bulk_write(const uint8_t ep, const enum usb_xfer_code rc, const uint32_t count)
{
	/* Echo data. */

	
	ptrClass->txReady=true;
     2e4:	4b02      	ldr	r3, [pc, #8]	; (2f0 <_ZL13cb_bulk_writeh13usb_xfer_codem+0xc>)
     2e6:	681b      	ldr	r3, [r3, #0]
     2e8:	2201      	movs	r2, #1
     2ea:	741a      	strb	r2, [r3, #16]

	

	/* No error. */
	return false;
}
     2ec:	2000      	movs	r0, #0
     2ee:	4770      	bx	lr
     2f0:	20000510 	.word	0x20000510

000002f4 <_ZN9CDC_Class4peekEv>:
	
}

int CDC_Class::peek(void)
{
	if (_serialPeek != -1)
     2f4:	6943      	ldr	r3, [r0, #20]
     2f6:	f1b3 3fff 	cmp.w	r3, #4294967295
     2fa:	d001      	beq.n	300 <_ZN9CDC_Class4peekEv+0xc>
	return _serialPeek;
     2fc:	6940      	ldr	r0, [r0, #20]
     2fe:	4770      	bx	lr
{
     300:	b510      	push	{r4, lr}
     302:	4604      	mov	r4, r0
	_serialPeek = read();
     304:	6803      	ldr	r3, [r0, #0]
     306:	695b      	ldr	r3, [r3, #20]
     308:	4798      	blx	r3
     30a:	6160      	str	r0, [r4, #20]
	return _serialPeek;
     30c:	6960      	ldr	r0, [r4, #20]
}
     30e:	bd10      	pop	{r4, pc}

00000310 <_ZN9CDC_Class5writeEh>:
}

void	CDC_Class::clear(void){
	cdcdf_acm_stop_xfer();
}
size_t CDC_Class::write(uint8_t c) {
     310:	b510      	push	{r4, lr}
     312:	b082      	sub	sp, #8
     314:	ab02      	add	r3, sp, #8
     316:	f803 1d01 	strb.w	r1, [r3, #-1]!
	return write(&c, 1);
     31a:	6802      	ldr	r2, [r0, #0]
     31c:	6854      	ldr	r4, [r2, #4]
     31e:	2201      	movs	r2, #1
     320:	4619      	mov	r1, r3
     322:	47a0      	blx	r4
}
     324:	b002      	add	sp, #8
     326:	bd10      	pop	{r4, pc}

00000328 <_ZN9CDC_Class9availableEv>:
		return r;

}

int	CDC_Class::available(void){
	if (rxReady && txReady)
     328:	7c42      	ldrb	r2, [r0, #17]
     32a:	f002 03ff 	and.w	r3, r2, #255	; 0xff
     32e:	b10a      	cbz	r2, 334 <_ZN9CDC_Class9availableEv+0xc>
     330:	7c03      	ldrb	r3, [r0, #16]
     332:	b2db      	uxtb	r3, r3
	{
		
	return 0;
	}
	
}
     334:	4618      	mov	r0, r3
     336:	4770      	bx	lr

00000338 <_ZL10cb_state_c22usb_cdc_control_signal>:
{
     338:	b510      	push	{r4, lr}
     33a:	b082      	sub	sp, #8
     33c:	f8ad 0004 	strh.w	r0, [sp, #4]
	if (state.rs232.DTR) {
     340:	f010 0f01 	tst.w	r0, #1
     344:	d102      	bne.n	34c <_ZL10cb_state_c22usb_cdc_control_signal+0x14>
}
     346:	2000      	movs	r0, #0
     348:	b002      	add	sp, #8
     34a:	bd10      	pop	{r4, pc}
		cdcdf_acm_register_callback(CDCDF_ACM_CB_READ, (FUNC_PTR)cb_bulk_read);
     34c:	4905      	ldr	r1, [pc, #20]	; (364 <_ZL10cb_state_c22usb_cdc_control_signal+0x2c>)
     34e:	2000      	movs	r0, #0
     350:	4c05      	ldr	r4, [pc, #20]	; (368 <_ZL10cb_state_c22usb_cdc_control_signal+0x30>)
     352:	47a0      	blx	r4
		cdcdf_acm_register_callback(CDCDF_ACM_CB_WRITE, (FUNC_PTR)cb_bulk_write);
     354:	4905      	ldr	r1, [pc, #20]	; (36c <_ZL10cb_state_c22usb_cdc_control_signal+0x34>)
     356:	2001      	movs	r0, #1
     358:	47a0      	blx	r4
		ptrClass->txReady=true;
     35a:	4b05      	ldr	r3, [pc, #20]	; (370 <_ZL10cb_state_c22usb_cdc_control_signal+0x38>)
     35c:	681b      	ldr	r3, [r3, #0]
     35e:	2201      	movs	r2, #1
     360:	741a      	strb	r2, [r3, #16]
     362:	e7f0      	b.n	346 <_ZL10cb_state_c22usb_cdc_control_signal+0xe>
     364:	000002d5 	.word	0x000002d5
     368:	00002825 	.word	0x00002825
     36c:	000002e5 	.word	0x000002e5
     370:	20000510 	.word	0x20000510

00000374 <_ZN9CDC_Class4readEv>:
{
     374:	b510      	push	{r4, lr}
     376:	b082      	sub	sp, #8
     378:	4604      	mov	r4, r0
	rxReady=false;
     37a:	2300      	movs	r3, #0
     37c:	7443      	strb	r3, [r0, #17]
	cdcdf_acm_read(&r, 1);
     37e:	2101      	movs	r1, #1
     380:	f10d 0007 	add.w	r0, sp, #7
     384:	4b04      	ldr	r3, [pc, #16]	; (398 <_ZN9CDC_Class4readEv+0x24>)
     386:	4798      	blx	r3
	while(!rxReady);
     388:	7c63      	ldrb	r3, [r4, #17]
     38a:	2b00      	cmp	r3, #0
     38c:	d0fc      	beq.n	388 <_ZN9CDC_Class4readEv+0x14>
}
     38e:	f89d 0007 	ldrb.w	r0, [sp, #7]
     392:	b002      	add	sp, #8
     394:	bd10      	pop	{r4, pc}
     396:	bf00      	nop
     398:	000027bd 	.word	0x000027bd

0000039c <_ZN9CDC_Class5flushEv>:
void	CDC_Class::flush(void){
     39c:	b508      	push	{r3, lr}
	cdcdf_acm_write((uint8_t *)cdc_buffer, sizeof(cdc_buffer));
     39e:	2140      	movs	r1, #64	; 0x40
     3a0:	4801      	ldr	r0, [pc, #4]	; (3a8 <_ZN9CDC_Class5flushEv+0xc>)
     3a2:	4b02      	ldr	r3, [pc, #8]	; (3ac <_ZN9CDC_Class5flushEv+0x10>)
     3a4:	4798      	blx	r3
     3a6:	bd08      	pop	{r3, pc}
     3a8:	20000514 	.word	0x20000514
     3ac:	000027e5 	.word	0x000027e5

000003b0 <_ZN9CDC_Class5writeEPKhj>:
{
     3b0:	b508      	push	{r3, lr}
     3b2:	4608      	mov	r0, r1
	uint32_t r = (uint32_t)cdcdf_acm_write((uint8_t *)buffer,(uint32_t)size);
     3b4:	4611      	mov	r1, r2
     3b6:	4b01      	ldr	r3, [pc, #4]	; (3bc <_ZN9CDC_Class5writeEPKhj+0xc>)
     3b8:	4798      	blx	r3
}
     3ba:	bd08      	pop	{r3, pc}
     3bc:	000027e5 	.word	0x000027e5

000003c0 <_ZN9CDC_Class5clearEv>:
void	CDC_Class::clear(void){
     3c0:	b508      	push	{r3, lr}
	cdcdf_acm_stop_xfer();
     3c2:	4b01      	ldr	r3, [pc, #4]	; (3c8 <_ZN9CDC_Class5clearEv+0x8>)
     3c4:	4798      	blx	r3
     3c6:	bd08      	pop	{r3, pc}
     3c8:	0000280d 	.word	0x0000280d

000003cc <_ZN9CDC_ClassC1Ev>:
    Print() : write_error(0) {}
     3cc:	2200      	movs	r2, #0
     3ce:	6042      	str	r2, [r0, #4]
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
     3d0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
     3d4:	6082      	str	r2, [r0, #8]
CDC_Class::CDC_Class()
     3d6:	4a03      	ldr	r2, [pc, #12]	; (3e4 <_ZN9CDC_ClassC1Ev+0x18>)
     3d8:	6002      	str	r2, [r0, #0]
	_serialPeek=-1;
     3da:	f04f 32ff 	mov.w	r2, #4294967295
     3de:	6142      	str	r2, [r0, #20]
} //CDC_Class
     3e0:	4770      	bx	lr
     3e2:	bf00      	nop
     3e4:	000040c4 	.word	0x000040c4

000003e8 <_ZN9CDC_Class4initEv>:
void CDC_Class::init(void){
     3e8:	b538      	push	{r3, r4, r5, lr}
     3ea:	4605      	mov	r5, r0
	usbdc_init(cdc_ctrl_buffer);
     3ec:	480d      	ldr	r0, [pc, #52]	; (424 <_ZN9CDC_Class4initEv+0x3c>)
     3ee:	4b0e      	ldr	r3, [pc, #56]	; (428 <_ZN9CDC_Class4initEv+0x40>)
     3f0:	4798      	blx	r3
	cdcdf_acm_init();
     3f2:	4b0e      	ldr	r3, [pc, #56]	; (42c <_ZN9CDC_Class4initEv+0x44>)
     3f4:	4798      	blx	r3
	usbdc_start(cdc_desc);
     3f6:	480e      	ldr	r0, [pc, #56]	; (430 <_ZN9CDC_Class4initEv+0x48>)
     3f8:	4b0e      	ldr	r3, [pc, #56]	; (434 <_ZN9CDC_Class4initEv+0x4c>)
     3fa:	4798      	blx	r3
	usbdc_attach();
     3fc:	4b0e      	ldr	r3, [pc, #56]	; (438 <_ZN9CDC_Class4initEv+0x50>)
     3fe:	4798      	blx	r3
	cdcdf_acm_register_callback(CDCDF_ACM_CB_STATE_C, (FUNC_PTR)cb_state_c);
     400:	490e      	ldr	r1, [pc, #56]	; (43c <_ZN9CDC_Class4initEv+0x54>)
     402:	2003      	movs	r0, #3
     404:	4c0e      	ldr	r4, [pc, #56]	; (440 <_ZN9CDC_Class4initEv+0x58>)
     406:	47a0      	blx	r4
	cdcdf_acm_register_callback(CDCDF_ACM_CB_READ, (FUNC_PTR)cb_bulk_read);
     408:	490e      	ldr	r1, [pc, #56]	; (444 <_ZN9CDC_Class4initEv+0x5c>)
     40a:	2000      	movs	r0, #0
     40c:	47a0      	blx	r4
	cdcdf_acm_register_callback(CDCDF_ACM_CB_WRITE, (FUNC_PTR)cb_bulk_write);
     40e:	490e      	ldr	r1, [pc, #56]	; (448 <_ZN9CDC_Class4initEv+0x60>)
     410:	2001      	movs	r0, #1
     412:	47a0      	blx	r4
	txReady=true;
     414:	2301      	movs	r3, #1
     416:	742b      	strb	r3, [r5, #16]
	rxReady=true;
     418:	746b      	strb	r3, [r5, #17]
	return cdcdf_acm_is_enabled();
     41a:	4c0c      	ldr	r4, [pc, #48]	; (44c <_ZN9CDC_Class4initEv+0x64>)
     41c:	47a0      	blx	r4
	while (!is_enabled());
     41e:	2800      	cmp	r0, #0
     420:	d0fc      	beq.n	41c <_ZN9CDC_Class4initEv+0x34>
}
     422:	bd38      	pop	{r3, r4, r5, pc}
     424:	20000554 	.word	0x20000554
     428:	00002e89 	.word	0x00002e89
     42c:	00002779 	.word	0x00002779
     430:	20000000 	.word	0x20000000
     434:	00002ef9 	.word	0x00002ef9
     438:	00002f2d 	.word	0x00002f2d
     43c:	00000339 	.word	0x00000339
     440:	00002825 	.word	0x00002825
     444:	000002d5 	.word	0x000002d5
     448:	000002e5 	.word	0x000002e5
     44c:	00002871 	.word	0x00002871

00000450 <_ZN9CDC_Class10is_enabledEv>:
bool CDC_Class::is_enabled(void){
     450:	b508      	push	{r3, lr}
	return cdcdf_acm_is_enabled();
     452:	4b01      	ldr	r3, [pc, #4]	; (458 <_ZN9CDC_Class10is_enabledEv+0x8>)
     454:	4798      	blx	r3
}
     456:	bd08      	pop	{r3, pc}
     458:	00002871 	.word	0x00002871

0000045c <SysTick_Handler>:


void SysTick_Handler(void)
{
  // Increment tick count each ms
  _ulTickCount++;
     45c:	4a02      	ldr	r2, [pc, #8]	; (468 <SysTick_Handler+0xc>)
     45e:	6813      	ldr	r3, [r2, #0]
     460:	3301      	adds	r3, #1
     462:	6013      	str	r3, [r2, #0]
     464:	4770      	bx	lr
     466:	bf00      	nop
     468:	20000594 	.word	0x20000594

0000046c <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     46c:	e7fe      	b.n	46c <Dummy_Handler>
	...

00000470 <Reset_Handler>:
{
     470:	b508      	push	{r3, lr}
        if (pSrc != pDest) {
     472:	4b17      	ldr	r3, [pc, #92]	; (4d0 <Reset_Handler+0x60>)
     474:	4a17      	ldr	r2, [pc, #92]	; (4d4 <Reset_Handler+0x64>)
     476:	429a      	cmp	r2, r3
     478:	d010      	beq.n	49c <Reset_Handler+0x2c>
                for (; pDest < &_erelocate;) {
     47a:	4b17      	ldr	r3, [pc, #92]	; (4d8 <Reset_Handler+0x68>)
     47c:	4a14      	ldr	r2, [pc, #80]	; (4d0 <Reset_Handler+0x60>)
     47e:	429a      	cmp	r2, r3
     480:	d20c      	bcs.n	49c <Reset_Handler+0x2c>
     482:	3b01      	subs	r3, #1
     484:	1a9b      	subs	r3, r3, r2
     486:	f023 0303 	bic.w	r3, r3, #3
     48a:	3304      	adds	r3, #4
     48c:	4413      	add	r3, r2
     48e:	4911      	ldr	r1, [pc, #68]	; (4d4 <Reset_Handler+0x64>)
                        *pDest++ = *pSrc++;
     490:	f851 0b04 	ldr.w	r0, [r1], #4
     494:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
     498:	429a      	cmp	r2, r3
     49a:	d1f9      	bne.n	490 <Reset_Handler+0x20>
        for (pDest = &_szero; pDest < &_ezero;) {
     49c:	4b0f      	ldr	r3, [pc, #60]	; (4dc <Reset_Handler+0x6c>)
     49e:	4a10      	ldr	r2, [pc, #64]	; (4e0 <Reset_Handler+0x70>)
     4a0:	429a      	cmp	r2, r3
     4a2:	d20a      	bcs.n	4ba <Reset_Handler+0x4a>
     4a4:	3b01      	subs	r3, #1
     4a6:	1a9b      	subs	r3, r3, r2
     4a8:	f023 0303 	bic.w	r3, r3, #3
     4ac:	3304      	adds	r3, #4
     4ae:	4413      	add	r3, r2
                *pDest++ = 0;
     4b0:	2100      	movs	r1, #0
     4b2:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
     4b6:	4293      	cmp	r3, r2
     4b8:	d1fb      	bne.n	4b2 <Reset_Handler+0x42>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     4ba:	4a0a      	ldr	r2, [pc, #40]	; (4e4 <Reset_Handler+0x74>)
     4bc:	4b0a      	ldr	r3, [pc, #40]	; (4e8 <Reset_Handler+0x78>)
     4be:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
     4c2:	6093      	str	r3, [r2, #8]
        __libc_init_array();
     4c4:	4b09      	ldr	r3, [pc, #36]	; (4ec <Reset_Handler+0x7c>)
     4c6:	4798      	blx	r3
        main();
     4c8:	4b09      	ldr	r3, [pc, #36]	; (4f0 <Reset_Handler+0x80>)
     4ca:	4798      	blx	r3
     4cc:	e7fe      	b.n	4cc <Reset_Handler+0x5c>
     4ce:	bf00      	nop
     4d0:	20000000 	.word	0x20000000
     4d4:	00004184 	.word	0x00004184
     4d8:	200004f4 	.word	0x200004f4
     4dc:	200008ec 	.word	0x200008ec
     4e0:	200004f4 	.word	0x200004f4
     4e4:	e000ed00 	.word	0xe000ed00
     4e8:	00000000 	.word	0x00000000
     4ec:	00003c71 	.word	0x00003c71
     4f0:	000004f9 	.word	0x000004f9

000004f4 <malloc>:

//............................................................................
extern "C" void *malloc(size_t)
	{
    return (void *)0;
	}
     4f4:	2000      	movs	r0, #0
     4f6:	4770      	bx	lr

000004f8 <main>:

#include <atmel_start.h>
#include "CDC_Class.h"

int main(void)
{
     4f8:	b5f0      	push	{r4, r5, r6, r7, lr}
     4fa:	b08b      	sub	sp, #44	; 0x2c
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
     4fc:	4b19      	ldr	r3, [pc, #100]	; (564 <main+0x6c>)
     4fe:	4798      	blx	r3
	CDC_Class	usb;
     500:	a803      	add	r0, sp, #12
     502:	4b19      	ldr	r3, [pc, #100]	; (568 <main+0x70>)
     504:	4798      	blx	r3
	usb.init();
     506:	a803      	add	r0, sp, #12
     508:	4b18      	ldr	r3, [pc, #96]	; (56c <main+0x74>)
     50a:	4798      	blx	r3
	

	/* Replace with your application code */
	while (1) {
		if (usb.is_enabled())
     50c:	4d18      	ldr	r5, [pc, #96]	; (570 <main+0x78>)
		{
			int inByte=usb.read();
     50e:	4e19      	ldr	r6, [pc, #100]	; (574 <main+0x7c>)
			if (inByte>33)
			{
				usb.println(inByte);
     510:	4f19      	ldr	r7, [pc, #100]	; (578 <main+0x80>)
     512:	e002      	b.n	51a <main+0x22>
				usb.println((char)inByte);
				usb.println((float)(inByte/2));
				usb.println("it works");
			}
		}
		delay_ms(100);
     514:	2064      	movs	r0, #100	; 0x64
     516:	4b19      	ldr	r3, [pc, #100]	; (57c <main+0x84>)
     518:	4798      	blx	r3
		if (usb.is_enabled())
     51a:	a803      	add	r0, sp, #12
     51c:	47a8      	blx	r5
     51e:	2800      	cmp	r0, #0
     520:	d0f8      	beq.n	514 <main+0x1c>
			int inByte=usb.read();
     522:	a803      	add	r0, sp, #12
     524:	47b0      	blx	r6
     526:	4604      	mov	r4, r0
			if (inByte>33)
     528:	2821      	cmp	r0, #33	; 0x21
     52a:	ddf3      	ble.n	514 <main+0x1c>
				usb.println(inByte);
     52c:	220a      	movs	r2, #10
     52e:	4601      	mov	r1, r0
     530:	a803      	add	r0, sp, #12
     532:	47b8      	blx	r7
				usb.println((char)inByte);
     534:	b2e1      	uxtb	r1, r4
     536:	a803      	add	r0, sp, #12
     538:	4b11      	ldr	r3, [pc, #68]	; (580 <main+0x88>)
     53a:	4798      	blx	r3
				usb.println((float)(inByte/2));
     53c:	eb04 74d4 	add.w	r4, r4, r4, lsr #31
     540:	1060      	asrs	r0, r4, #1
     542:	4b10      	ldr	r3, [pc, #64]	; (584 <main+0x8c>)
     544:	4798      	blx	r3
     546:	4b10      	ldr	r3, [pc, #64]	; (588 <main+0x90>)
     548:	4798      	blx	r3
     54a:	2302      	movs	r3, #2
     54c:	9300      	str	r3, [sp, #0]
     54e:	4602      	mov	r2, r0
     550:	460b      	mov	r3, r1
     552:	a803      	add	r0, sp, #12
     554:	490d      	ldr	r1, [pc, #52]	; (58c <main+0x94>)
     556:	4788      	blx	r1
				usb.println("it works");
     558:	490d      	ldr	r1, [pc, #52]	; (590 <main+0x98>)
     55a:	a803      	add	r0, sp, #12
     55c:	4b0d      	ldr	r3, [pc, #52]	; (594 <main+0x9c>)
     55e:	4798      	blx	r3
     560:	e7d8      	b.n	514 <main+0x1c>
     562:	bf00      	nop
     564:	000008fd 	.word	0x000008fd
     568:	000003cd 	.word	0x000003cd
     56c:	000003e9 	.word	0x000003e9
     570:	00000451 	.word	0x00000451
     574:	00000375 	.word	0x00000375
     578:	000006b5 	.word	0x000006b5
     57c:	00000a1d 	.word	0x00000a1d
     580:	000005f9 	.word	0x000005f9
     584:	00003bc9 	.word	0x00003bc9
     588:	0000340d 	.word	0x0000340d
     58c:	000008d5 	.word	0x000008d5
     590:	000040e4 	.word	0x000040e4
     594:	000005dd 	.word	0x000005dd

00000598 <_ZN5Print5printEPKc>:
      if (str == NULL) return 0;
     598:	b161      	cbz	r1, 5b4 <_ZN5Print5printEPKc+0x1c>
{
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
     59a:	b538      	push	{r3, r4, r5, lr}
     59c:	460d      	mov	r5, r1
     59e:	4604      	mov	r4, r0
      return write((const uint8_t *)str, strlen(str));
     5a0:	4608      	mov	r0, r1
     5a2:	4b05      	ldr	r3, [pc, #20]	; (5b8 <_ZN5Print5printEPKc+0x20>)
     5a4:	4798      	blx	r3
     5a6:	6823      	ldr	r3, [r4, #0]
     5a8:	685b      	ldr	r3, [r3, #4]
     5aa:	4602      	mov	r2, r0
     5ac:	4629      	mov	r1, r5
     5ae:	4620      	mov	r0, r4
     5b0:	4798      	blx	r3
     5b2:	bd38      	pop	{r3, r4, r5, pc}
      if (str == NULL) return 0;
     5b4:	2000      	movs	r0, #0
  return write(str);
     5b6:	4770      	bx	lr
     5b8:	00003ec1 	.word	0x00003ec1

000005bc <_ZN5Print5printEc>:
}

size_t Print::print(char c)
{
     5bc:	b508      	push	{r3, lr}
  return write(c);
     5be:	6803      	ldr	r3, [r0, #0]
     5c0:	681b      	ldr	r3, [r3, #0]
     5c2:	4798      	blx	r3
}
     5c4:	bd08      	pop	{r3, pc}
	...

000005c8 <_ZN5Print7printlnEv>:
{
  return x.printTo(*this);
}

size_t Print::println(void)
{
     5c8:	b508      	push	{r3, lr}
      return write((const uint8_t *)str, strlen(str));
     5ca:	6803      	ldr	r3, [r0, #0]
     5cc:	685b      	ldr	r3, [r3, #4]
     5ce:	2202      	movs	r2, #2
     5d0:	4901      	ldr	r1, [pc, #4]	; (5d8 <_ZN5Print7printlnEv+0x10>)
     5d2:	4798      	blx	r3
  return write("\r\n");
}
     5d4:	bd08      	pop	{r3, pc}
     5d6:	bf00      	nop
     5d8:	000040f0 	.word	0x000040f0

000005dc <_ZN5Print7printlnEPKc>:
  n += println();
  return n;
}

size_t Print::println(const char c[])
{
     5dc:	b538      	push	{r3, r4, r5, lr}
     5de:	4605      	mov	r5, r0
  size_t n = print(c);
     5e0:	4b03      	ldr	r3, [pc, #12]	; (5f0 <_ZN5Print7printlnEPKc+0x14>)
     5e2:	4798      	blx	r3
     5e4:	4604      	mov	r4, r0
  n += println();
     5e6:	4628      	mov	r0, r5
     5e8:	4b02      	ldr	r3, [pc, #8]	; (5f4 <_ZN5Print7printlnEPKc+0x18>)
     5ea:	4798      	blx	r3
  return n;
}
     5ec:	4420      	add	r0, r4
     5ee:	bd38      	pop	{r3, r4, r5, pc}
     5f0:	00000599 	.word	0x00000599
     5f4:	000005c9 	.word	0x000005c9

000005f8 <_ZN5Print7printlnEc>:

size_t Print::println(char c)
{
     5f8:	b538      	push	{r3, r4, r5, lr}
     5fa:	4605      	mov	r5, r0
  size_t n = print(c);
     5fc:	4b03      	ldr	r3, [pc, #12]	; (60c <_ZN5Print7printlnEc+0x14>)
     5fe:	4798      	blx	r3
     600:	4604      	mov	r4, r0
  n += println();
     602:	4628      	mov	r0, r5
     604:	4b02      	ldr	r3, [pc, #8]	; (610 <_ZN5Print7printlnEc+0x18>)
     606:	4798      	blx	r3
  return n;
}
     608:	4420      	add	r0, r4
     60a:	bd38      	pop	{r3, r4, r5, pc}
     60c:	000005bd 	.word	0x000005bd
     610:	000005c9 	.word	0x000005c9

00000614 <_ZN5Print11printNumberEmh>:
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base)
{
     614:	b570      	push	{r4, r5, r6, lr}
     616:	b08a      	sub	sp, #40	; 0x28
     618:	4604      	mov	r4, r0
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
     61a:	2300      	movs	r3, #0
     61c:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
     620:	2a01      	cmp	r2, #1
     622:	bfd8      	it	le
     624:	220a      	movle	r2, #10
     626:	f10d 0623 	add.w	r6, sp, #35	; 0x23

  do {
    char c = n % base;
     62a:	fbb1 f0f2 	udiv	r0, r1, r2
     62e:	fb02 1110 	mls	r1, r2, r0, r1
     632:	b2cb      	uxtb	r3, r1
    n /= base;
     634:	4601      	mov	r1, r0

    *--str = c < 10 ? c + '0' : c + 'A' - 10;
     636:	4635      	mov	r5, r6
     638:	2b09      	cmp	r3, #9
     63a:	bfd4      	ite	le
     63c:	3330      	addle	r3, #48	; 0x30
     63e:	3337      	addgt	r3, #55	; 0x37
     640:	b2db      	uxtb	r3, r3
     642:	7033      	strb	r3, [r6, #0]
     644:	3e01      	subs	r6, #1
  } while(n);
     646:	2800      	cmp	r0, #0
     648:	d1ef      	bne.n	62a <_ZN5Print11printNumberEmh+0x16>
      if (str == NULL) return 0;
     64a:	b155      	cbz	r5, 662 <_ZN5Print11printNumberEmh+0x4e>
      return write((const uint8_t *)str, strlen(str));
     64c:	4628      	mov	r0, r5
     64e:	4b06      	ldr	r3, [pc, #24]	; (668 <_ZN5Print11printNumberEmh+0x54>)
     650:	4798      	blx	r3
     652:	6823      	ldr	r3, [r4, #0]
     654:	685b      	ldr	r3, [r3, #4]
     656:	4602      	mov	r2, r0
     658:	4629      	mov	r1, r5
     65a:	4620      	mov	r0, r4
     65c:	4798      	blx	r3

  return write(str);
}
     65e:	b00a      	add	sp, #40	; 0x28
     660:	bd70      	pop	{r4, r5, r6, pc}
      if (str == NULL) return 0;
     662:	2000      	movs	r0, #0
  return write(str);
     664:	e7fb      	b.n	65e <_ZN5Print11printNumberEmh+0x4a>
     666:	bf00      	nop
     668:	00003ec1 	.word	0x00003ec1

0000066c <_ZN5Print5printEli>:
{
     66c:	b570      	push	{r4, r5, r6, lr}
     66e:	4605      	mov	r5, r0
     670:	460c      	mov	r4, r1
  if (base == 0) {
     672:	b12a      	cbz	r2, 680 <_ZN5Print5printEli+0x14>
  } else if (base == 10) {
     674:	2a0a      	cmp	r2, #10
     676:	d008      	beq.n	68a <_ZN5Print5printEli+0x1e>
    return printNumber(n, base);
     678:	b2d2      	uxtb	r2, r2
     67a:	4b0c      	ldr	r3, [pc, #48]	; (6ac <_ZN5Print5printEli+0x40>)
     67c:	4798      	blx	r3
}
     67e:	bd70      	pop	{r4, r5, r6, pc}
    return write(n);
     680:	6803      	ldr	r3, [r0, #0]
     682:	681b      	ldr	r3, [r3, #0]
     684:	b2c9      	uxtb	r1, r1
     686:	4798      	blx	r3
     688:	bd70      	pop	{r4, r5, r6, pc}
    if (n < 0) {
     68a:	2900      	cmp	r1, #0
     68c:	db03      	blt.n	696 <_ZN5Print5printEli+0x2a>
    return printNumber(n, 10);
     68e:	220a      	movs	r2, #10
     690:	4b06      	ldr	r3, [pc, #24]	; (6ac <_ZN5Print5printEli+0x40>)
     692:	4798      	blx	r3
     694:	bd70      	pop	{r4, r5, r6, pc}
      int t = print('-');
     696:	212d      	movs	r1, #45	; 0x2d
     698:	4b05      	ldr	r3, [pc, #20]	; (6b0 <_ZN5Print5printEli+0x44>)
     69a:	4798      	blx	r3
     69c:	4606      	mov	r6, r0
      return printNumber(n, 10) + t;
     69e:	220a      	movs	r2, #10
     6a0:	4261      	negs	r1, r4
     6a2:	4628      	mov	r0, r5
     6a4:	4b01      	ldr	r3, [pc, #4]	; (6ac <_ZN5Print5printEli+0x40>)
     6a6:	4798      	blx	r3
     6a8:	4430      	add	r0, r6
     6aa:	bd70      	pop	{r4, r5, r6, pc}
     6ac:	00000615 	.word	0x00000615
     6b0:	000005bd 	.word	0x000005bd

000006b4 <_ZN5Print7printlnEii>:
{
     6b4:	b538      	push	{r3, r4, r5, lr}
     6b6:	4605      	mov	r5, r0
  return print((long) n, base);
     6b8:	4b03      	ldr	r3, [pc, #12]	; (6c8 <_ZN5Print7printlnEii+0x14>)
     6ba:	4798      	blx	r3
     6bc:	4604      	mov	r4, r0
  n += println();
     6be:	4628      	mov	r0, r5
     6c0:	4b02      	ldr	r3, [pc, #8]	; (6cc <_ZN5Print7printlnEii+0x18>)
     6c2:	4798      	blx	r3
}
     6c4:	4420      	add	r0, r4
     6c6:	bd38      	pop	{r3, r4, r5, pc}
     6c8:	0000066d 	.word	0x0000066d
     6cc:	000005c9 	.word	0x000005c9

000006d0 <_ZN5Print5printEmi>:
{
     6d0:	b508      	push	{r3, lr}
  if (base == 0) return write(n);
     6d2:	b11a      	cbz	r2, 6dc <_ZN5Print5printEmi+0xc>
  else return printNumber(n, base);
     6d4:	b2d2      	uxtb	r2, r2
     6d6:	4b04      	ldr	r3, [pc, #16]	; (6e8 <_ZN5Print5printEmi+0x18>)
     6d8:	4798      	blx	r3
}
     6da:	bd08      	pop	{r3, pc}
  if (base == 0) return write(n);
     6dc:	6803      	ldr	r3, [r0, #0]
     6de:	681b      	ldr	r3, [r3, #0]
     6e0:	b2c9      	uxtb	r1, r1
     6e2:	4798      	blx	r3
     6e4:	bd08      	pop	{r3, pc}
     6e6:	bf00      	nop
     6e8:	00000615 	.word	0x00000615

000006ec <_ZN5Print10printFloatEdh>:

size_t Print::printFloat(double number, uint8_t digits)
{
     6ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     6f0:	b083      	sub	sp, #12
     6f2:	9001      	str	r0, [sp, #4]
     6f4:	4692      	mov	sl, r2
     6f6:	4698      	mov	r8, r3
     6f8:	f89d 4030 	ldrb.w	r4, [sp, #48]	; 0x30
  size_t n = 0;

  if (isnan(number)) return print("nan");
     6fc:	4652      	mov	r2, sl
     6fe:	4643      	mov	r3, r8
     700:	4650      	mov	r0, sl
     702:	4641      	mov	r1, r8
     704:	4d5e      	ldr	r5, [pc, #376]	; (880 <_ZN5Print10printFloatEdh+0x194>)
     706:	47a8      	blx	r5
     708:	2800      	cmp	r0, #0
     70a:	f040 8089 	bne.w	820 <_ZN5Print10printFloatEdh+0x134>
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isinf;
#else
  constexpr bool
  isinf(double __x)
  { return __builtin_isinf(__x); }
     70e:	f028 4500 	bic.w	r5, r8, #2147483648	; 0x80000000
  if (isinf(number)) return print("inf");
     712:	f04f 32ff 	mov.w	r2, #4294967295
     716:	4b5b      	ldr	r3, [pc, #364]	; (884 <_ZN5Print10printFloatEdh+0x198>)
     718:	4650      	mov	r0, sl
     71a:	4629      	mov	r1, r5
     71c:	4e58      	ldr	r6, [pc, #352]	; (880 <_ZN5Print10printFloatEdh+0x194>)
     71e:	47b0      	blx	r6
     720:	b940      	cbnz	r0, 734 <_ZN5Print10printFloatEdh+0x48>
     722:	f04f 32ff 	mov.w	r2, #4294967295
     726:	4b57      	ldr	r3, [pc, #348]	; (884 <_ZN5Print10printFloatEdh+0x198>)
     728:	4650      	mov	r0, sl
     72a:	4629      	mov	r1, r5
     72c:	4d56      	ldr	r5, [pc, #344]	; (888 <_ZN5Print10printFloatEdh+0x19c>)
     72e:	47a8      	blx	r5
     730:	2800      	cmp	r0, #0
     732:	d07b      	beq.n	82c <_ZN5Print10printFloatEdh+0x140>
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
     734:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
     738:	4b54      	ldr	r3, [pc, #336]	; (88c <_ZN5Print10printFloatEdh+0x1a0>)
     73a:	4650      	mov	r0, sl
     73c:	4641      	mov	r1, r8
     73e:	4d54      	ldr	r5, [pc, #336]	; (890 <_ZN5Print10printFloatEdh+0x1a4>)
     740:	47a8      	blx	r5
     742:	2800      	cmp	r0, #0
     744:	d178      	bne.n	838 <_ZN5Print10printFloatEdh+0x14c>
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
     746:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
     74a:	4b52      	ldr	r3, [pc, #328]	; (894 <_ZN5Print10printFloatEdh+0x1a8>)
     74c:	4650      	mov	r0, sl
     74e:	4641      	mov	r1, r8
     750:	4d51      	ldr	r5, [pc, #324]	; (898 <_ZN5Print10printFloatEdh+0x1ac>)
     752:	47a8      	blx	r5
     754:	2800      	cmp	r0, #0
     756:	d175      	bne.n	844 <_ZN5Print10printFloatEdh+0x158>

  // Handle negative numbers
  if (number < 0.0)
     758:	2200      	movs	r2, #0
     75a:	2300      	movs	r3, #0
     75c:	4650      	mov	r0, sl
     75e:	4641      	mov	r1, r8
     760:	4d4d      	ldr	r5, [pc, #308]	; (898 <_ZN5Print10printFloatEdh+0x1ac>)
     762:	47a8      	blx	r5
     764:	2800      	cmp	r0, #0
     766:	d173      	bne.n	850 <_ZN5Print10printFloatEdh+0x164>
  size_t n = 0;
     768:	2500      	movs	r5, #0
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
     76a:	46a1      	mov	r9, r4
     76c:	2c00      	cmp	r4, #0
     76e:	d077      	beq.n	860 <_ZN5Print10printFloatEdh+0x174>
     770:	2600      	movs	r6, #0
     772:	2000      	movs	r0, #0
     774:	4949      	ldr	r1, [pc, #292]	; (89c <_ZN5Print10printFloatEdh+0x1b0>)
    rounding /= 10.0;
     776:	4f4a      	ldr	r7, [pc, #296]	; (8a0 <_ZN5Print10printFloatEdh+0x1b4>)
     778:	2200      	movs	r2, #0
     77a:	4b4a      	ldr	r3, [pc, #296]	; (8a4 <_ZN5Print10printFloatEdh+0x1b8>)
     77c:	47b8      	blx	r7
  for (uint8_t i=0; i<digits; ++i)
     77e:	3601      	adds	r6, #1
     780:	b2f6      	uxtb	r6, r6
     782:	454e      	cmp	r6, r9
     784:	dbf8      	blt.n	778 <_ZN5Print10printFloatEdh+0x8c>

  number += rounding;
     786:	4602      	mov	r2, r0
     788:	460b      	mov	r3, r1
     78a:	4650      	mov	r0, sl
     78c:	4641      	mov	r1, r8
     78e:	4e46      	ldr	r6, [pc, #280]	; (8a8 <_ZN5Print10printFloatEdh+0x1bc>)
     790:	47b0      	blx	r6
     792:	4606      	mov	r6, r0
     794:	460f      	mov	r7, r1

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
     796:	4b45      	ldr	r3, [pc, #276]	; (8ac <_ZN5Print10printFloatEdh+0x1c0>)
     798:	4798      	blx	r3
     79a:	4680      	mov	r8, r0
  double remainder = number - (double)int_part;
     79c:	4b44      	ldr	r3, [pc, #272]	; (8b0 <_ZN5Print10printFloatEdh+0x1c4>)
     79e:	4798      	blx	r3
     7a0:	4602      	mov	r2, r0
     7a2:	460b      	mov	r3, r1
     7a4:	4630      	mov	r0, r6
     7a6:	4639      	mov	r1, r7
     7a8:	4e42      	ldr	r6, [pc, #264]	; (8b4 <_ZN5Print10printFloatEdh+0x1c8>)
     7aa:	47b0      	blx	r6
     7ac:	4606      	mov	r6, r0
     7ae:	460f      	mov	r7, r1
  n += print(int_part);
     7b0:	220a      	movs	r2, #10
     7b2:	4641      	mov	r1, r8
     7b4:	f8dd 9004 	ldr.w	r9, [sp, #4]
     7b8:	4648      	mov	r0, r9
     7ba:	4b3f      	ldr	r3, [pc, #252]	; (8b8 <_ZN5Print10printFloatEdh+0x1cc>)
     7bc:	4798      	blx	r3
     7be:	4680      	mov	r8, r0

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print('.');
     7c0:	212e      	movs	r1, #46	; 0x2e
     7c2:	4648      	mov	r0, r9
     7c4:	4b3d      	ldr	r3, [pc, #244]	; (8bc <_ZN5Print10printFloatEdh+0x1d0>)
     7c6:	4798      	blx	r3
     7c8:	4440      	add	r0, r8
     7ca:	4405      	add	r5, r0
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
     7cc:	3c01      	subs	r4, #1
     7ce:	b2e4      	uxtb	r4, r4
  {
    remainder *= 10.0;
     7d0:	f8df 90fc 	ldr.w	r9, [pc, #252]	; 8d0 <_ZN5Print10printFloatEdh+0x1e4>
    unsigned int toPrint = (unsigned int)(remainder);
     7d4:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8ac <_ZN5Print10printFloatEdh+0x1c0>
    remainder *= 10.0;
     7d8:	2200      	movs	r2, #0
     7da:	4b32      	ldr	r3, [pc, #200]	; (8a4 <_ZN5Print10printFloatEdh+0x1b8>)
     7dc:	4630      	mov	r0, r6
     7de:	4639      	mov	r1, r7
     7e0:	47c8      	blx	r9
     7e2:	4606      	mov	r6, r0
     7e4:	460f      	mov	r7, r1
    unsigned int toPrint = (unsigned int)(remainder);
     7e6:	47d0      	blx	sl
     7e8:	4683      	mov	fp, r0
  return print((unsigned long) n, base);
     7ea:	220a      	movs	r2, #10
     7ec:	4601      	mov	r1, r0
     7ee:	9801      	ldr	r0, [sp, #4]
     7f0:	4b31      	ldr	r3, [pc, #196]	; (8b8 <_ZN5Print10printFloatEdh+0x1cc>)
     7f2:	4798      	blx	r3
    n += print(toPrint);
     7f4:	4405      	add	r5, r0
  while (digits-- > 0)
     7f6:	1e63      	subs	r3, r4, #1
     7f8:	46a0      	mov	r8, r4
     7fa:	b2dc      	uxtb	r4, r3
    remainder -= toPrint;
     7fc:	4658      	mov	r0, fp
     7fe:	4b2c      	ldr	r3, [pc, #176]	; (8b0 <_ZN5Print10printFloatEdh+0x1c4>)
     800:	4798      	blx	r3
     802:	4602      	mov	r2, r0
     804:	460b      	mov	r3, r1
     806:	4630      	mov	r0, r6
     808:	4639      	mov	r1, r7
     80a:	4e2a      	ldr	r6, [pc, #168]	; (8b4 <_ZN5Print10printFloatEdh+0x1c8>)
     80c:	47b0      	blx	r6
     80e:	4606      	mov	r6, r0
     810:	460f      	mov	r7, r1
  while (digits-- > 0)
     812:	f1b8 0f00 	cmp.w	r8, #0
     816:	d1df      	bne.n	7d8 <_ZN5Print10printFloatEdh+0xec>
  }

  return n;
}
     818:	4628      	mov	r0, r5
     81a:	b003      	add	sp, #12
     81c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (isnan(number)) return print("nan");
     820:	4927      	ldr	r1, [pc, #156]	; (8c0 <_ZN5Print10printFloatEdh+0x1d4>)
     822:	9801      	ldr	r0, [sp, #4]
     824:	4b27      	ldr	r3, [pc, #156]	; (8c4 <_ZN5Print10printFloatEdh+0x1d8>)
     826:	4798      	blx	r3
     828:	4605      	mov	r5, r0
     82a:	e7f5      	b.n	818 <_ZN5Print10printFloatEdh+0x12c>
  if (isinf(number)) return print("inf");
     82c:	4926      	ldr	r1, [pc, #152]	; (8c8 <_ZN5Print10printFloatEdh+0x1dc>)
     82e:	9801      	ldr	r0, [sp, #4]
     830:	4b24      	ldr	r3, [pc, #144]	; (8c4 <_ZN5Print10printFloatEdh+0x1d8>)
     832:	4798      	blx	r3
     834:	4605      	mov	r5, r0
     836:	e7ef      	b.n	818 <_ZN5Print10printFloatEdh+0x12c>
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
     838:	4924      	ldr	r1, [pc, #144]	; (8cc <_ZN5Print10printFloatEdh+0x1e0>)
     83a:	9801      	ldr	r0, [sp, #4]
     83c:	4b21      	ldr	r3, [pc, #132]	; (8c4 <_ZN5Print10printFloatEdh+0x1d8>)
     83e:	4798      	blx	r3
     840:	4605      	mov	r5, r0
     842:	e7e9      	b.n	818 <_ZN5Print10printFloatEdh+0x12c>
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
     844:	4921      	ldr	r1, [pc, #132]	; (8cc <_ZN5Print10printFloatEdh+0x1e0>)
     846:	9801      	ldr	r0, [sp, #4]
     848:	4b1e      	ldr	r3, [pc, #120]	; (8c4 <_ZN5Print10printFloatEdh+0x1d8>)
     84a:	4798      	blx	r3
     84c:	4605      	mov	r5, r0
     84e:	e7e3      	b.n	818 <_ZN5Print10printFloatEdh+0x12c>
     n += print('-');
     850:	212d      	movs	r1, #45	; 0x2d
     852:	9801      	ldr	r0, [sp, #4]
     854:	4b19      	ldr	r3, [pc, #100]	; (8bc <_ZN5Print10printFloatEdh+0x1d0>)
     856:	4798      	blx	r3
     858:	4605      	mov	r5, r0
     number = -number;
     85a:	f108 4800 	add.w	r8, r8, #2147483648	; 0x80000000
     85e:	e784      	b.n	76a <_ZN5Print10printFloatEdh+0x7e>
  number += rounding;
     860:	2200      	movs	r2, #0
     862:	4b0e      	ldr	r3, [pc, #56]	; (89c <_ZN5Print10printFloatEdh+0x1b0>)
     864:	4650      	mov	r0, sl
     866:	4641      	mov	r1, r8
     868:	4c0f      	ldr	r4, [pc, #60]	; (8a8 <_ZN5Print10printFloatEdh+0x1bc>)
     86a:	47a0      	blx	r4
  unsigned long int_part = (unsigned long)number;
     86c:	4b0f      	ldr	r3, [pc, #60]	; (8ac <_ZN5Print10printFloatEdh+0x1c0>)
     86e:	4798      	blx	r3
  n += print(int_part);
     870:	220a      	movs	r2, #10
     872:	4601      	mov	r1, r0
     874:	9801      	ldr	r0, [sp, #4]
     876:	4b10      	ldr	r3, [pc, #64]	; (8b8 <_ZN5Print10printFloatEdh+0x1cc>)
     878:	4798      	blx	r3
     87a:	4405      	add	r5, r0
     87c:	e7cc      	b.n	818 <_ZN5Print10printFloatEdh+0x12c>
     87e:	bf00      	nop
     880:	000039e9 	.word	0x000039e9
     884:	7fefffff 	.word	0x7fefffff
     888:	000039ad 	.word	0x000039ad
     88c:	41efffff 	.word	0x41efffff
     890:	000039d5 	.word	0x000039d5
     894:	c1efffff 	.word	0xc1efffff
     898:	00003999 	.word	0x00003999
     89c:	3fe00000 	.word	0x3fe00000
     8a0:	00003709 	.word	0x00003709
     8a4:	40240000 	.word	0x40240000
     8a8:	00003151 	.word	0x00003151
     8ac:	00003a15 	.word	0x00003a15
     8b0:	000033c9 	.word	0x000033c9
     8b4:	0000314d 	.word	0x0000314d
     8b8:	000006d1 	.word	0x000006d1
     8bc:	000005bd 	.word	0x000005bd
     8c0:	000040f4 	.word	0x000040f4
     8c4:	00000599 	.word	0x00000599
     8c8:	000040f8 	.word	0x000040f8
     8cc:	000040fc 	.word	0x000040fc
     8d0:	000034b5 	.word	0x000034b5

000008d4 <_ZN5Print7printlnEdi>:
{
     8d4:	b530      	push	{r4, r5, lr}
     8d6:	b083      	sub	sp, #12
     8d8:	4605      	mov	r5, r0
  return printFloat(n, digits);
     8da:	f89d 1018 	ldrb.w	r1, [sp, #24]
     8de:	9100      	str	r1, [sp, #0]
     8e0:	4904      	ldr	r1, [pc, #16]	; (8f4 <_ZN5Print7printlnEdi+0x20>)
     8e2:	4788      	blx	r1
     8e4:	4604      	mov	r4, r0
  n += println();
     8e6:	4628      	mov	r0, r5
     8e8:	4b03      	ldr	r3, [pc, #12]	; (8f8 <_ZN5Print7printlnEdi+0x24>)
     8ea:	4798      	blx	r3
}
     8ec:	4420      	add	r0, r4
     8ee:	b003      	add	sp, #12
     8f0:	bd30      	pop	{r4, r5, pc}
     8f2:	bf00      	nop
     8f4:	000006ed 	.word	0x000006ed
     8f8:	000005c9 	.word	0x000005c9

000008fc <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
     8fc:	b508      	push	{r3, lr}
	system_init();
     8fe:	4b02      	ldr	r3, [pc, #8]	; (908 <atmel_start_init+0xc>)
     900:	4798      	blx	r3
	usb_init();
     902:	4b02      	ldr	r3, [pc, #8]	; (90c <atmel_start_init+0x10>)
     904:	4798      	blx	r3
     906:	bd08      	pop	{r3, pc}
     908:	000009ed 	.word	0x000009ed
     90c:	000030b9 	.word	0x000030b9

00000910 <delay_driver_init>:
#include <peripheral_clk_config.h>
#include <utils.h>
#include <hal_init.h>

void delay_driver_init(void)
{
     910:	b508      	push	{r3, lr}
	delay_init(SysTick);
     912:	4802      	ldr	r0, [pc, #8]	; (91c <delay_driver_init+0xc>)
     914:	4b02      	ldr	r3, [pc, #8]	; (920 <delay_driver_init+0x10>)
     916:	4798      	blx	r3
     918:	bd08      	pop	{r3, pc}
     91a:	bf00      	nop
     91c:	e000e010 	.word	0xe000e010
     920:	00000a09 	.word	0x00000a09

00000924 <USB_0_PORT_init>:
	((Port *)hw)->Group[submodule_index].DIRTGL.reg = PORT_DIR_DIR(mask);
}

static inline void hri_port_set_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     924:	4b1e      	ldr	r3, [pc, #120]	; (9a0 <USB_0_PORT_init+0x7c>)
     926:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
     92a:	609a      	str	r2, [r3, #8]

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     92c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
     930:	6299      	str	r1, [r3, #40]	; 0x28
     932:	481c      	ldr	r0, [pc, #112]	; (9a4 <USB_0_PORT_init+0x80>)
     934:	6298      	str	r0, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     936:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     938:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
     93c:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     940:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     944:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
	tmp &= ~PORT_PINCFG_PMUXEN;
     948:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     94c:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     950:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     954:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     958:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     95c:	f042 0207 	orr.w	r2, r2, #7
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     960:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     964:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
     968:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     96a:	6299      	str	r1, [r3, #40]	; 0x28
     96c:	490e      	ldr	r1, [pc, #56]	; (9a8 <USB_0_PORT_init+0x84>)
     96e:	6299      	str	r1, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     970:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     972:	f893 2059 	ldrb.w	r2, [r3, #89]	; 0x59
     976:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     97a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     97e:	f893 2059 	ldrb.w	r2, [r3, #89]	; 0x59
	tmp &= ~PORT_PINCFG_PMUXEN;
     982:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     986:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     98a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     98e:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     992:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     996:	f042 0270 	orr.w	r2, r2, #112	; 0x70
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     99a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
     99e:	4770      	bx	lr
     9a0:	41008000 	.word	0x41008000
     9a4:	c0000100 	.word	0xc0000100
     9a8:	c0000200 	.word	0xc0000200

000009ac <USB_0_CLOCK_init>:
}

static inline void hri_gclk_write_PCHCTRL_reg(const void *const hw, uint8_t index, hri_gclk_pchctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->PCHCTRL[index].reg = data;
     9ac:	2244      	movs	r2, #68	; 0x44
     9ae:	4b07      	ldr	r3, [pc, #28]	; (9cc <USB_0_CLOCK_init+0x20>)
     9b0:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
}

static inline void hri_mclk_set_AHBMASK_USB_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_USB;
     9b4:	f5a3 53a0 	sub.w	r3, r3, #5120	; 0x1400
     9b8:	691a      	ldr	r2, [r3, #16]
     9ba:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
     9be:	611a      	str	r2, [r3, #16]
}

static inline void hri_mclk_set_APBBMASK_USB_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_USB;
     9c0:	699a      	ldr	r2, [r3, #24]
     9c2:	f042 0201 	orr.w	r2, r2, #1
     9c6:	619a      	str	r2, [r3, #24]
     9c8:	4770      	bx	lr
     9ca:	bf00      	nop
     9cc:	40001c00 	.word	0x40001c00

000009d0 <USB_0_init>:
	hri_mclk_set_AHBMASK_USB_bit(MCLK);
	hri_mclk_set_APBBMASK_USB_bit(MCLK);
}

void USB_0_init(void)
{
     9d0:	b508      	push	{r3, lr}
	USB_0_CLOCK_init();
     9d2:	4b03      	ldr	r3, [pc, #12]	; (9e0 <USB_0_init+0x10>)
     9d4:	4798      	blx	r3
	usb_d_init();
     9d6:	4b03      	ldr	r3, [pc, #12]	; (9e4 <USB_0_init+0x14>)
     9d8:	4798      	blx	r3
	USB_0_PORT_init();
     9da:	4b03      	ldr	r3, [pc, #12]	; (9e8 <USB_0_init+0x18>)
     9dc:	4798      	blx	r3
     9de:	bd08      	pop	{r3, pc}
     9e0:	000009ad 	.word	0x000009ad
     9e4:	00000c91 	.word	0x00000c91
     9e8:	00000925 	.word	0x00000925

000009ec <system_init>:
}

void system_init(void)
{
     9ec:	b508      	push	{r3, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
     9ee:	4b03      	ldr	r3, [pc, #12]	; (9fc <system_init+0x10>)
     9f0:	4798      	blx	r3
	init_mcu();

	delay_driver_init();
     9f2:	4b03      	ldr	r3, [pc, #12]	; (a00 <system_init+0x14>)
     9f4:	4798      	blx	r3

	USB_0_init();
     9f6:	4b03      	ldr	r3, [pc, #12]	; (a04 <system_init+0x18>)
     9f8:	4798      	blx	r3
     9fa:	bd08      	pop	{r3, pc}
     9fc:	00001019 	.word	0x00001019
     a00:	00000911 	.word	0x00000911
     a04:	000009d1 	.word	0x000009d1

00000a08 <delay_init>:

/**
 * \brief Initialize Delay driver
 */
void delay_init(void *const hw)
{
     a08:	b508      	push	{r3, lr}
	_delay_init(hardware = hw);
     a0a:	4b02      	ldr	r3, [pc, #8]	; (a14 <delay_init+0xc>)
     a0c:	6018      	str	r0, [r3, #0]
     a0e:	4b02      	ldr	r3, [pc, #8]	; (a18 <delay_init+0x10>)
     a10:	4798      	blx	r3
     a12:	bd08      	pop	{r3, pc}
     a14:	20000598 	.word	0x20000598
     a18:	000011e1 	.word	0x000011e1

00000a1c <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
     a1c:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
     a1e:	4b04      	ldr	r3, [pc, #16]	; (a30 <delay_ms+0x14>)
     a20:	681c      	ldr	r4, [r3, #0]
     a22:	4b04      	ldr	r3, [pc, #16]	; (a34 <delay_ms+0x18>)
     a24:	4798      	blx	r3
     a26:	4601      	mov	r1, r0
     a28:	4620      	mov	r0, r4
     a2a:	4b03      	ldr	r3, [pc, #12]	; (a38 <delay_ms+0x1c>)
     a2c:	4798      	blx	r3
     a2e:	bd10      	pop	{r4, pc}
     a30:	20000598 	.word	0x20000598
     a34:	0000100d 	.word	0x0000100d
     a38:	000011f5 	.word	0x000011f5

00000a3c <_usb_d_find_ep>:
 */
static int8_t _usb_d_find_ep(const uint8_t ep)
{
	int8_t i;
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
     a3c:	4b0f      	ldr	r3, [pc, #60]	; (a7c <_usb_d_find_ep+0x40>)
     a3e:	7859      	ldrb	r1, [r3, #1]
     a40:	4288      	cmp	r0, r1
     a42:	d018      	beq.n	a76 <_usb_d_find_ep+0x3a>
{
     a44:	b430      	push	{r4, r5}
     a46:	461a      	mov	r2, r3
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
     a48:	2300      	movs	r3, #0
			return i;
		}
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
     a4a:	f000 050f 	and.w	r5, r0, #15
     a4e:	e007      	b.n	a60 <_usb_d_find_ep+0x24>
     a50:	3301      	adds	r3, #1
     a52:	b25b      	sxtb	r3, r3
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
     a54:	2b04      	cmp	r3, #4
     a56:	d009      	beq.n	a6c <_usb_d_find_ep+0x30>
     a58:	3220      	adds	r2, #32
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
     a5a:	7851      	ldrb	r1, [r2, #1]
     a5c:	4281      	cmp	r1, r0
     a5e:	d007      	beq.n	a70 <_usb_d_find_ep+0x34>
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
     a60:	7814      	ldrb	r4, [r2, #0]
     a62:	2c00      	cmp	r4, #0
     a64:	d1f4      	bne.n	a50 <_usb_d_find_ep+0x14>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
     a66:	428d      	cmp	r5, r1
     a68:	d1f2      	bne.n	a50 <_usb_d_find_ep+0x14>
     a6a:	e001      	b.n	a70 <_usb_d_find_ep+0x34>
			return i;
		}
	}
	return -1;
     a6c:	f04f 33ff 	mov.w	r3, #4294967295
}
     a70:	4618      	mov	r0, r3
     a72:	bc30      	pop	{r4, r5}
     a74:	4770      	bx	lr
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
     a76:	2300      	movs	r3, #0
}
     a78:	4618      	mov	r0, r3
     a7a:	4770      	bx	lr
     a7c:	2000059c 	.word	0x2000059c

00000a80 <usb_d_dummy_cb_false>:
{
	(void)unused0;
	(void)unused1;
	(void)unused2;
	return false;
}
     a80:	2000      	movs	r0, #0
     a82:	4770      	bx	lr

00000a84 <usb_d_cb_trans_more>:
 * \brief Callback invoked when request more data
 * \param[in] ep Endpoint number with transfer direction on bit 8.
 * \param[in] transfered Number of bytes transfered.
 */
static bool usb_d_cb_trans_more(const uint8_t ep, const uint32_t transfered)
{
     a84:	b538      	push	{r3, r4, r5, lr}
     a86:	4604      	mov	r4, r0
     a88:	460d      	mov	r5, r1
	int8_t           ep_index = _usb_d_find_ep(ep);
     a8a:	4b09      	ldr	r3, [pc, #36]	; (ab0 <usb_d_cb_trans_more+0x2c>)
     a8c:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ept->xfer.hdr.state == USB_EP_S_X_DATA) {
     a8e:	4b09      	ldr	r3, [pc, #36]	; (ab4 <usb_d_cb_trans_more+0x30>)
     a90:	eb03 1340 	add.w	r3, r3, r0, lsl #5
     a94:	789b      	ldrb	r3, [r3, #2]
     a96:	2b03      	cmp	r3, #3
     a98:	d001      	beq.n	a9e <usb_d_cb_trans_more+0x1a>
		return ept->callbacks.more(ep, transfered);
	}
	return false;
     a9a:	2000      	movs	r0, #0
}
     a9c:	bd38      	pop	{r3, r4, r5, pc}
		return ept->callbacks.more(ep, transfered);
     a9e:	4b05      	ldr	r3, [pc, #20]	; (ab4 <usb_d_cb_trans_more+0x30>)
     aa0:	eb03 1040 	add.w	r0, r3, r0, lsl #5
     aa4:	6983      	ldr	r3, [r0, #24]
     aa6:	4629      	mov	r1, r5
     aa8:	4620      	mov	r0, r4
     aaa:	4798      	blx	r3
     aac:	bd38      	pop	{r3, r4, r5, pc}
     aae:	bf00      	nop
     ab0:	00000a3d 	.word	0x00000a3d
     ab4:	2000059c 	.word	0x2000059c

00000ab8 <_usb_d_cb_trans_done>:

/**
 * Callback when USB transactions are finished.
 */
static void _usb_d_cb_trans_done(const uint8_t ep, const int32_t code, const uint32_t transferred)
{
     ab8:	b5f0      	push	{r4, r5, r6, r7, lr}
     aba:	b085      	sub	sp, #20
     abc:	4606      	mov	r6, r0
     abe:	460d      	mov	r5, r1
     ac0:	4617      	mov	r7, r2
	int8_t           ep_index = _usb_d_find_ep(ep);
     ac2:	4b4d      	ldr	r3, [pc, #308]	; (bf8 <_usb_d_cb_trans_done+0x140>)
     ac4:	4798      	blx	r3
     ac6:	4604      	mov	r4, r0
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];

	if (code == USB_TRANS_DONE) {
     ac8:	2d00      	cmp	r5, #0
     aca:	d15b      	bne.n	b84 <_usb_d_cb_trans_done+0xcc>
		ept->xfer.hdr.status = USB_XFER_DONE;
     acc:	4a4b      	ldr	r2, [pc, #300]	; (bfc <_usb_d_cb_trans_done+0x144>)
     ace:	0143      	lsls	r3, r0, #5
     ad0:	18d1      	adds	r1, r2, r3
     ad2:	2000      	movs	r0, #0
     ad4:	70c8      	strb	r0, [r1, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
     ad6:	5cd3      	ldrb	r3, [r2, r3]
     ad8:	b173      	cbz	r3, af8 <_usb_d_cb_trans_done+0x40>
			usb_d_ctrl_trans_done(ept);
			return;
		}
		ept->xfer.hdr.state = USB_EP_S_IDLE;
     ada:	4b48      	ldr	r3, [pc, #288]	; (bfc <_usb_d_cb_trans_done+0x144>)
     adc:	eb03 1344 	add.w	r3, r3, r4, lsl #5
     ae0:	2201      	movs	r2, #1
     ae2:	709a      	strb	r2, [r3, #2]
	} else {
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
		ept->xfer.hdr.status = USB_XFER_ERROR;
	}

	ept->callbacks.xfer(ep, (enum usb_xfer_code)ept->xfer.hdr.status, (void *)transferred);
     ae4:	4845      	ldr	r0, [pc, #276]	; (bfc <_usb_d_cb_trans_done+0x144>)
     ae6:	eb00 1044 	add.w	r0, r0, r4, lsl #5
     aea:	69c3      	ldr	r3, [r0, #28]
     aec:	463a      	mov	r2, r7
     aee:	78c1      	ldrb	r1, [r0, #3]
     af0:	4630      	mov	r0, r6
     af2:	4798      	blx	r3
}
     af4:	b005      	add	sp, #20
     af6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (state == USB_EP_S_X_DATA) {
     af8:	788b      	ldrb	r3, [r1, #2]
     afa:	2b03      	cmp	r3, #3
     afc:	d00b      	beq.n	b16 <_usb_d_cb_trans_done+0x5e>
		ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DONE, ept->xfer.req);
     afe:	483f      	ldr	r0, [pc, #252]	; (bfc <_usb_d_cb_trans_done+0x144>)
     b00:	eb00 1244 	add.w	r2, r0, r4, lsl #5
     b04:	4614      	mov	r4, r2
     b06:	69d3      	ldr	r3, [r2, #28]
     b08:	320c      	adds	r2, #12
     b0a:	2100      	movs	r1, #0
     b0c:	7860      	ldrb	r0, [r4, #1]
     b0e:	4798      	blx	r3
		ept->xfer.hdr.state = USB_EP_S_X_SETUP;
     b10:	2302      	movs	r3, #2
     b12:	70a3      	strb	r3, [r4, #2]
     b14:	e7ee      	b.n	af4 <_usb_d_cb_trans_done+0x3c>
	bool    req_dir = USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN;
     b16:	460b      	mov	r3, r1
     b18:	f991 500c 	ldrsb.w	r5, [r1, #12]
		bool err = ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DATA, ept->xfer.req);
     b1c:	460a      	mov	r2, r1
     b1e:	69ce      	ldr	r6, [r1, #28]
     b20:	320c      	adds	r2, #12
     b22:	2101      	movs	r1, #1
     b24:	7858      	ldrb	r0, [r3, #1]
     b26:	47b0      	blx	r6
		if (err) {
     b28:	b1a0      	cbz	r0, b54 <_usb_d_cb_trans_done+0x9c>
			ept->xfer.hdr.state  = USB_EP_S_HALTED;
     b2a:	4b34      	ldr	r3, [pc, #208]	; (bfc <_usb_d_cb_trans_done+0x144>)
     b2c:	eb03 1344 	add.w	r3, r3, r4, lsl #5
     b30:	2205      	movs	r2, #5
     b32:	709a      	strb	r2, [r3, #2]
			ept->xfer.hdr.status = USB_XFER_HALT;
     b34:	2202      	movs	r2, #2
     b36:	70da      	strb	r2, [r3, #3]
			_usb_d_dev_ep_stall(req_dir ? ept->xfer.hdr.ep : (ept->xfer.hdr.ep | USB_EP_DIR), USB_EP_STALL_SET);
     b38:	2d00      	cmp	r5, #0
     b3a:	db09      	blt.n	b50 <_usb_d_cb_trans_done+0x98>
     b3c:	482f      	ldr	r0, [pc, #188]	; (bfc <_usb_d_cb_trans_done+0x144>)
     b3e:	eb00 1044 	add.w	r0, r0, r4, lsl #5
     b42:	7840      	ldrb	r0, [r0, #1]
     b44:	f040 0080 	orr.w	r0, r0, #128	; 0x80
     b48:	2101      	movs	r1, #1
     b4a:	4b2d      	ldr	r3, [pc, #180]	; (c00 <_usb_d_cb_trans_done+0x148>)
     b4c:	4798      	blx	r3
     b4e:	e7d1      	b.n	af4 <_usb_d_cb_trans_done+0x3c>
     b50:	7858      	ldrb	r0, [r3, #1]
     b52:	e7f9      	b.n	b48 <_usb_d_cb_trans_done+0x90>
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
     b54:	4829      	ldr	r0, [pc, #164]	; (bfc <_usb_d_cb_trans_done+0x144>)
     b56:	eb00 1044 	add.w	r0, r0, r4, lsl #5
     b5a:	2304      	movs	r3, #4
     b5c:	7083      	strb	r3, [r0, #2]
			_usb_d_trans(ept->xfer.hdr.ep, !req_dir, NULL, 0, 1);
     b5e:	7843      	ldrb	r3, [r0, #1]
	struct usb_d_transfer trans
     b60:	2200      	movs	r2, #0
     b62:	9201      	str	r2, [sp, #4]
     b64:	9202      	str	r2, [sp, #8]
     b66:	4295      	cmp	r5, r2
     b68:	bfac      	ite	ge
     b6a:	f043 0380 	orrge.w	r3, r3, #128	; 0x80
     b6e:	f003 030f 	andlt.w	r3, r3, #15
     b72:	f88d 300c 	strb.w	r3, [sp, #12]
     b76:	2301      	movs	r3, #1
     b78:	f88d 300d 	strb.w	r3, [sp, #13]
	return _usb_d_dev_ep_trans(&trans);
     b7c:	a801      	add	r0, sp, #4
     b7e:	4b21      	ldr	r3, [pc, #132]	; (c04 <_usb_d_cb_trans_done+0x14c>)
     b80:	4798      	blx	r3
     b82:	e7b7      	b.n	af4 <_usb_d_cb_trans_done+0x3c>
	} else if (code == USB_TRANS_STALL) {
     b84:	2d01      	cmp	r5, #1
     b86:	d00a      	beq.n	b9e <_usb_d_cb_trans_done+0xe6>
	} else if (code == USB_TRANS_ABORT) {
     b88:	2d02      	cmp	r5, #2
     b8a:	d01c      	beq.n	bc6 <_usb_d_cb_trans_done+0x10e>
	} else if (code == USB_TRANS_RESET) {
     b8c:	2d03      	cmp	r5, #3
     b8e:	d02a      	beq.n	be6 <_usb_d_cb_trans_done+0x12e>
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
     b90:	4b1a      	ldr	r3, [pc, #104]	; (bfc <_usb_d_cb_trans_done+0x144>)
     b92:	eb03 1340 	add.w	r3, r3, r0, lsl #5
     b96:	2206      	movs	r2, #6
     b98:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_ERROR;
     b9a:	70da      	strb	r2, [r3, #3]
     b9c:	e7a2      	b.n	ae4 <_usb_d_cb_trans_done+0x2c>
		ept->xfer.hdr.status = USB_XFER_HALT;
     b9e:	4a17      	ldr	r2, [pc, #92]	; (bfc <_usb_d_cb_trans_done+0x144>)
     ba0:	0143      	lsls	r3, r0, #5
     ba2:	18d1      	adds	r1, r2, r3
     ba4:	2002      	movs	r0, #2
     ba6:	70c8      	strb	r0, [r1, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
     ba8:	5cd3      	ldrb	r3, [r2, r3]
     baa:	b12b      	cbz	r3, bb8 <_usb_d_cb_trans_done+0x100>
			ept->xfer.hdr.state = USB_EP_S_HALTED;
     bac:	4b13      	ldr	r3, [pc, #76]	; (bfc <_usb_d_cb_trans_done+0x144>)
     bae:	eb03 1344 	add.w	r3, r3, r4, lsl #5
     bb2:	2205      	movs	r2, #5
     bb4:	709a      	strb	r2, [r3, #2]
     bb6:	e795      	b.n	ae4 <_usb_d_cb_trans_done+0x2c>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
     bb8:	460b      	mov	r3, r1
     bba:	7098      	strb	r0, [r3, #2]
			_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
     bbc:	2100      	movs	r1, #0
     bbe:	4630      	mov	r0, r6
     bc0:	4b0f      	ldr	r3, [pc, #60]	; (c00 <_usb_d_cb_trans_done+0x148>)
     bc2:	4798      	blx	r3
     bc4:	e78e      	b.n	ae4 <_usb_d_cb_trans_done+0x2c>
		ept->xfer.hdr.status = USB_XFER_ABORT;
     bc6:	4a0d      	ldr	r2, [pc, #52]	; (bfc <_usb_d_cb_trans_done+0x144>)
     bc8:	0143      	lsls	r3, r0, #5
     bca:	18d1      	adds	r1, r2, r3
     bcc:	2004      	movs	r0, #4
     bce:	70c8      	strb	r0, [r1, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
     bd0:	5cd3      	ldrb	r3, [r2, r3]
     bd2:	b12b      	cbz	r3, be0 <_usb_d_cb_trans_done+0x128>
		ept->xfer.hdr.state = USB_EP_S_IDLE;
     bd4:	4b09      	ldr	r3, [pc, #36]	; (bfc <_usb_d_cb_trans_done+0x144>)
     bd6:	eb03 1344 	add.w	r3, r3, r4, lsl #5
     bda:	2201      	movs	r2, #1
     bdc:	709a      	strb	r2, [r3, #2]
     bde:	e781      	b.n	ae4 <_usb_d_cb_trans_done+0x2c>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
     be0:	2302      	movs	r3, #2
     be2:	708b      	strb	r3, [r1, #2]
			return;
     be4:	e786      	b.n	af4 <_usb_d_cb_trans_done+0x3c>
		ept->xfer.hdr.state  = USB_EP_S_DISABLED;
     be6:	4b05      	ldr	r3, [pc, #20]	; (bfc <_usb_d_cb_trans_done+0x144>)
     be8:	eb03 1340 	add.w	r3, r3, r0, lsl #5
     bec:	2200      	movs	r2, #0
     bee:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_RESET;
     bf0:	2205      	movs	r2, #5
     bf2:	70da      	strb	r2, [r3, #3]
     bf4:	e776      	b.n	ae4 <_usb_d_cb_trans_done+0x2c>
     bf6:	bf00      	nop
     bf8:	00000a3d 	.word	0x00000a3d
     bfc:	2000059c 	.word	0x2000059c
     c00:	000020d1 	.word	0x000020d1
     c04:	00002279 	.word	0x00002279

00000c08 <usb_d_cb_trans_setup>:
{
     c08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     c0c:	4605      	mov	r5, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
     c0e:	4b1c      	ldr	r3, [pc, #112]	; (c80 <usb_d_cb_trans_setup+0x78>)
     c10:	4798      	blx	r3
     c12:	4606      	mov	r6, r0
	uint8_t *        req      = ept->xfer.req;
     c14:	4c1b      	ldr	r4, [pc, #108]	; (c84 <usb_d_cb_trans_setup+0x7c>)
     c16:	eb04 1440 	add.w	r4, r4, r0, lsl #5
     c1a:	340c      	adds	r4, #12
	uint8_t n = _usb_d_dev_ep_read_req(ep, req);
     c1c:	4621      	mov	r1, r4
     c1e:	4628      	mov	r0, r5
     c20:	4b19      	ldr	r3, [pc, #100]	; (c88 <usb_d_cb_trans_setup+0x80>)
     c22:	4798      	blx	r3
	if (n != 8) {
     c24:	b2c0      	uxtb	r0, r0
     c26:	2808      	cmp	r0, #8
     c28:	d009      	beq.n	c3e <usb_d_cb_trans_setup+0x36>
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
     c2a:	2101      	movs	r1, #1
     c2c:	4628      	mov	r0, r5
     c2e:	4c17      	ldr	r4, [pc, #92]	; (c8c <usb_d_cb_trans_setup+0x84>)
     c30:	47a0      	blx	r4
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
     c32:	2101      	movs	r1, #1
     c34:	f045 0080 	orr.w	r0, r5, #128	; 0x80
     c38:	47a0      	blx	r4
		return;
     c3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
     c3e:	2100      	movs	r1, #0
     c40:	4628      	mov	r0, r5
     c42:	4f12      	ldr	r7, [pc, #72]	; (c8c <usb_d_cb_trans_setup+0x84>)
     c44:	47b8      	blx	r7
	_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_CLR);
     c46:	f045 0880 	orr.w	r8, r5, #128	; 0x80
     c4a:	2100      	movs	r1, #0
     c4c:	4640      	mov	r0, r8
     c4e:	47b8      	blx	r7
	ept->xfer.hdr.state = USB_EP_S_IDLE;
     c50:	4b0c      	ldr	r3, [pc, #48]	; (c84 <usb_d_cb_trans_setup+0x7c>)
     c52:	eb03 1346 	add.w	r3, r3, r6, lsl #5
     c56:	2201      	movs	r2, #1
     c58:	709a      	strb	r2, [r3, #2]
	if (!ept->callbacks.req(ep, req)) {
     c5a:	695b      	ldr	r3, [r3, #20]
     c5c:	4621      	mov	r1, r4
     c5e:	4628      	mov	r0, r5
     c60:	4798      	blx	r3
     c62:	b108      	cbz	r0, c68 <usb_d_cb_trans_setup+0x60>
     c64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ept->xfer.hdr.state = USB_EP_S_HALTED;
     c68:	4b06      	ldr	r3, [pc, #24]	; (c84 <usb_d_cb_trans_setup+0x7c>)
     c6a:	eb03 1646 	add.w	r6, r3, r6, lsl #5
     c6e:	2305      	movs	r3, #5
     c70:	70b3      	strb	r3, [r6, #2]
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
     c72:	2101      	movs	r1, #1
     c74:	4628      	mov	r0, r5
     c76:	47b8      	blx	r7
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
     c78:	2101      	movs	r1, #1
     c7a:	4640      	mov	r0, r8
     c7c:	47b8      	blx	r7
     c7e:	e7f1      	b.n	c64 <usb_d_cb_trans_setup+0x5c>
     c80:	00000a3d 	.word	0x00000a3d
     c84:	2000059c 	.word	0x2000059c
     c88:	00002219 	.word	0x00002219
     c8c:	000020d1 	.word	0x000020d1

00000c90 <usb_d_init>:

int32_t usb_d_init(void)
{
     c90:	b510      	push	{r4, lr}
	int32_t rc = _usb_d_dev_init();
     c92:	4b11      	ldr	r3, [pc, #68]	; (cd8 <usb_d_init+0x48>)
     c94:	4798      	blx	r3
	uint8_t i;
	if (rc < 0) {
     c96:	2800      	cmp	r0, #0
     c98:	db1c      	blt.n	cd4 <usb_d_init+0x44>
		return rc;
	}
	memset(usb_d_inst.ep, 0x00, sizeof(struct usb_d_ep) * CONF_USB_D_NUM_EP_SP);
     c9a:	4c10      	ldr	r4, [pc, #64]	; (cdc <usb_d_init+0x4c>)
     c9c:	2280      	movs	r2, #128	; 0x80
     c9e:	2100      	movs	r1, #0
     ca0:	4620      	mov	r0, r4
     ca2:	4b0f      	ldr	r3, [pc, #60]	; (ce0 <usb_d_init+0x50>)
     ca4:	4798      	blx	r3
     ca6:	4623      	mov	r3, r4
     ca8:	f104 0080 	add.w	r0, r4, #128	; 0x80
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
     cac:	21ff      	movs	r1, #255	; 0xff
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
     cae:	4a0d      	ldr	r2, [pc, #52]	; (ce4 <usb_d_init+0x54>)
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
     cb0:	7059      	strb	r1, [r3, #1]
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
     cb2:	615a      	str	r2, [r3, #20]
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
     cb4:	619a      	str	r2, [r3, #24]
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
     cb6:	61da      	str	r2, [r3, #28]
     cb8:	3320      	adds	r3, #32
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
     cba:	4283      	cmp	r3, r0
     cbc:	d1f8      	bne.n	cb0 <usb_d_init+0x20>
	}
	/* Handles device driver endpoint callbacks to build transfer. */
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_SETUP, (FUNC_PTR)usb_d_cb_trans_setup);
     cbe:	490a      	ldr	r1, [pc, #40]	; (ce8 <usb_d_init+0x58>)
     cc0:	2000      	movs	r0, #0
     cc2:	4c0a      	ldr	r4, [pc, #40]	; (cec <usb_d_init+0x5c>)
     cc4:	47a0      	blx	r4
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_MORE, (FUNC_PTR)usb_d_cb_trans_more);
     cc6:	490a      	ldr	r1, [pc, #40]	; (cf0 <usb_d_init+0x60>)
     cc8:	2001      	movs	r0, #1
     cca:	47a0      	blx	r4
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_DONE, (FUNC_PTR)_usb_d_cb_trans_done);
     ccc:	4909      	ldr	r1, [pc, #36]	; (cf4 <usb_d_init+0x64>)
     cce:	2002      	movs	r0, #2
     cd0:	47a0      	blx	r4
	return ERR_NONE;
     cd2:	2000      	movs	r0, #0
}
     cd4:	bd10      	pop	{r4, pc}
     cd6:	bf00      	nop
     cd8:	00001ac5 	.word	0x00001ac5
     cdc:	2000059c 	.word	0x2000059c
     ce0:	00003df5 	.word	0x00003df5
     ce4:	00000a81 	.word	0x00000a81
     ce8:	00000c09 	.word	0x00000c09
     cec:	000024b9 	.word	0x000024b9
     cf0:	00000a85 	.word	0x00000a85
     cf4:	00000ab9 	.word	0x00000ab9

00000cf8 <usb_d_register_callback>:
{
	_usb_d_dev_deinit();
}

void usb_d_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
     cf8:	b508      	push	{r3, lr}
	/* Directly uses device driver callback. */
	_usb_d_dev_register_callback(type, func);
     cfa:	4b01      	ldr	r3, [pc, #4]	; (d00 <usb_d_register_callback+0x8>)
     cfc:	4798      	blx	r3
     cfe:	bd08      	pop	{r3, pc}
     d00:	00002495 	.word	0x00002495

00000d04 <usb_d_enable>:
}

int32_t usb_d_enable(void)
{
     d04:	b508      	push	{r3, lr}
	return _usb_d_dev_enable();
     d06:	4b01      	ldr	r3, [pc, #4]	; (d0c <usb_d_enable+0x8>)
     d08:	4798      	blx	r3
}
     d0a:	bd08      	pop	{r3, pc}
     d0c:	00001bc1 	.word	0x00001bc1

00000d10 <usb_d_attach>:
{
	_usb_d_dev_disable();
}

void usb_d_attach(void)
{
     d10:	b508      	push	{r3, lr}
	_usb_d_dev_attach();
     d12:	4b01      	ldr	r3, [pc, #4]	; (d18 <usb_d_attach+0x8>)
     d14:	4798      	blx	r3
     d16:	bd08      	pop	{r3, pc}
     d18:	00001c2d 	.word	0x00001c2d

00000d1c <usb_d_set_address>:
{
	return _usb_d_dev_get_uframe_n();
}

void usb_d_set_address(const uint8_t addr)
{
     d1c:	b508      	push	{r3, lr}
	_usb_d_dev_set_address(addr);
     d1e:	4b01      	ldr	r3, [pc, #4]	; (d24 <usb_d_set_address+0x8>)
     d20:	4798      	blx	r3
     d22:	bd08      	pop	{r3, pc}
     d24:	00001c3f 	.word	0x00001c3f

00000d28 <usb_d_ep_init>:
{
	return usb_d_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_size);
}

int32_t usb_d_ep_init(const uint8_t ep, const uint8_t attr, const uint16_t max_pkt_size)
{
     d28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     d2a:	4606      	mov	r6, r0
     d2c:	460c      	mov	r4, r1
     d2e:	4617      	mov	r7, r2
	int32_t          rc;
	int8_t           ep_index = _usb_d_find_ep(ep);
     d30:	4b0f      	ldr	r3, [pc, #60]	; (d70 <usb_d_ep_init+0x48>)
     d32:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ep_index >= 0) {
     d34:	2800      	cmp	r0, #0
     d36:	da14      	bge.n	d62 <usb_d_ep_init+0x3a>
		return -USB_ERR_REDO;
	} else {
		ep_index = _usb_d_find_ep(0xFF);
     d38:	20ff      	movs	r0, #255	; 0xff
     d3a:	4b0d      	ldr	r3, [pc, #52]	; (d70 <usb_d_ep_init+0x48>)
     d3c:	4798      	blx	r3
		if (ep_index < 0) {
     d3e:	1e05      	subs	r5, r0, #0
     d40:	db12      	blt.n	d68 <usb_d_ep_init+0x40>
			return -USB_ERR_ALLOC_FAIL;
		}
		ept = &usb_d_inst.ep[ep_index];
	}
	rc = _usb_d_dev_ep_init(ep, attr, max_pkt_size);
     d42:	463a      	mov	r2, r7
     d44:	4621      	mov	r1, r4
     d46:	4630      	mov	r0, r6
     d48:	4b0a      	ldr	r3, [pc, #40]	; (d74 <usb_d_ep_init+0x4c>)
     d4a:	4798      	blx	r3
	if (rc < 0) {
     d4c:	2800      	cmp	r0, #0
     d4e:	db0d      	blt.n	d6c <usb_d_ep_init+0x44>
		return rc;
	}
	ept->xfer.hdr.ep   = ep;
     d50:	4b09      	ldr	r3, [pc, #36]	; (d78 <usb_d_ep_init+0x50>)
     d52:	0168      	lsls	r0, r5, #5
     d54:	181a      	adds	r2, r3, r0
     d56:	7056      	strb	r6, [r2, #1]
	ept->xfer.hdr.type = attr & USB_EP_XTYPE_MASK;
     d58:	f004 0403 	and.w	r4, r4, #3
     d5c:	541c      	strb	r4, [r3, r0]
	return ERR_NONE;
     d5e:	2000      	movs	r0, #0
     d60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -USB_ERR_REDO;
     d62:	f06f 0013 	mvn.w	r0, #19
     d66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return -USB_ERR_ALLOC_FAIL;
     d68:	f06f 0014 	mvn.w	r0, #20
}
     d6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     d6e:	bf00      	nop
     d70:	00000a3d 	.word	0x00000a3d
     d74:	00001c4d 	.word	0x00001c4d
     d78:	2000059c 	.word	0x2000059c

00000d7c <usb_d_ep0_init>:
{
     d7c:	b508      	push	{r3, lr}
	return usb_d_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_size);
     d7e:	4602      	mov	r2, r0
     d80:	2100      	movs	r1, #0
     d82:	4608      	mov	r0, r1
     d84:	4b01      	ldr	r3, [pc, #4]	; (d8c <usb_d_ep0_init+0x10>)
     d86:	4798      	blx	r3
}
     d88:	bd08      	pop	{r3, pc}
     d8a:	bf00      	nop
     d8c:	00000d29 	.word	0x00000d29

00000d90 <usb_d_ep_deinit>:

void usb_d_ep_deinit(const uint8_t ep)
{
     d90:	b538      	push	{r3, r4, r5, lr}
     d92:	4605      	mov	r5, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
     d94:	4b06      	ldr	r3, [pc, #24]	; (db0 <usb_d_ep_deinit+0x20>)
     d96:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ep_index < 0) {
     d98:	1e04      	subs	r4, r0, #0
     d9a:	db07      	blt.n	dac <usb_d_ep_deinit+0x1c>
		return;
	}
	_usb_d_dev_ep_deinit(ep);
     d9c:	4628      	mov	r0, r5
     d9e:	4b05      	ldr	r3, [pc, #20]	; (db4 <usb_d_ep_deinit+0x24>)
     da0:	4798      	blx	r3
	ept->xfer.hdr.ep = 0xFF;
     da2:	4805      	ldr	r0, [pc, #20]	; (db8 <usb_d_ep_deinit+0x28>)
     da4:	eb00 1044 	add.w	r0, r0, r4, lsl #5
     da8:	23ff      	movs	r3, #255	; 0xff
     daa:	7043      	strb	r3, [r0, #1]
     dac:	bd38      	pop	{r3, r4, r5, pc}
     dae:	bf00      	nop
     db0:	00000a3d 	.word	0x00000a3d
     db4:	00001d65 	.word	0x00001d65
     db8:	2000059c 	.word	0x2000059c

00000dbc <usb_d_ep_enable>:
}

int32_t usb_d_ep_enable(const uint8_t ep)
{
     dbc:	b538      	push	{r3, r4, r5, lr}
     dbe:	4605      	mov	r5, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
     dc0:	4b0e      	ldr	r3, [pc, #56]	; (dfc <usb_d_ep_enable+0x40>)
     dc2:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	int32_t          rc;
	if (ep_index < 0) {
     dc4:	1e04      	subs	r4, r0, #0
     dc6:	db16      	blt.n	df6 <usb_d_ep_enable+0x3a>
		return -USB_ERR_PARAM;
	}
	ept->xfer.hdr.state = (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) ? USB_EP_S_X_SETUP : USB_EP_S_IDLE;
     dc8:	0163      	lsls	r3, r4, #5
     dca:	4a0d      	ldr	r2, [pc, #52]	; (e00 <usb_d_ep_enable+0x44>)
     dcc:	5cd3      	ldrb	r3, [r2, r3]
     dce:	2b00      	cmp	r3, #0
     dd0:	bf0c      	ite	eq
     dd2:	2202      	moveq	r2, #2
     dd4:	2201      	movne	r2, #1
     dd6:	4b0a      	ldr	r3, [pc, #40]	; (e00 <usb_d_ep_enable+0x44>)
     dd8:	eb03 1344 	add.w	r3, r3, r4, lsl #5
     ddc:	709a      	strb	r2, [r3, #2]
	rc                  = _usb_d_dev_ep_enable(ep);
     dde:	4628      	mov	r0, r5
     de0:	4b08      	ldr	r3, [pc, #32]	; (e04 <usb_d_ep_enable+0x48>)
     de2:	4798      	blx	r3
	if (rc < 0) {
     de4:	2800      	cmp	r0, #0
     de6:	db00      	blt.n	dea <usb_d_ep_enable+0x2e>
		ept->xfer.hdr.state = USB_EP_S_DISABLED;
	}
	return rc;
}
     de8:	bd38      	pop	{r3, r4, r5, pc}
		ept->xfer.hdr.state = USB_EP_S_DISABLED;
     dea:	4b05      	ldr	r3, [pc, #20]	; (e00 <usb_d_ep_enable+0x44>)
     dec:	eb03 1444 	add.w	r4, r3, r4, lsl #5
     df0:	2300      	movs	r3, #0
     df2:	70a3      	strb	r3, [r4, #2]
     df4:	bd38      	pop	{r3, r4, r5, pc}
		return -USB_ERR_PARAM;
     df6:	f06f 0011 	mvn.w	r0, #17
     dfa:	e7f5      	b.n	de8 <usb_d_ep_enable+0x2c>
     dfc:	00000a3d 	.word	0x00000a3d
     e00:	2000059c 	.word	0x2000059c
     e04:	00001e29 	.word	0x00001e29

00000e08 <usb_d_ep_transfer>:
	}
	return usb_d_inst.ep[ep_index].xfer.req;
}

int32_t usb_d_ep_transfer(const struct usb_d_transfer *xfer)
{
     e08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     e0c:	b086      	sub	sp, #24
     e0e:	4604      	mov	r4, r0
	int8_t                ep_index = _usb_d_find_ep(xfer->ep);
     e10:	7a07      	ldrb	r7, [r0, #8]
     e12:	4638      	mov	r0, r7
     e14:	4b3f      	ldr	r3, [pc, #252]	; (f14 <usb_d_ep_transfer+0x10c>)
     e16:	4798      	blx	r3
	struct usb_d_ep *     ept      = &usb_d_inst.ep[ep_index];
	bool                  dir = USB_EP_GET_DIR(xfer->ep), zlp = xfer->zlp;
     e18:	7a65      	ldrb	r5, [r4, #9]
	uint32_t              len = xfer->size;
     e1a:	f8d4 8004 	ldr.w	r8, [r4, #4]
	int32_t               rc;
	volatile uint8_t      state;
	volatile hal_atomic_t flags;

	if (ep_index < 0) {
     e1e:	1e06      	subs	r6, r0, #0
     e20:	db72      	blt.n	f08 <usb_d_ep_transfer+0x100>
		return -USB_ERR_PARAM;
	}

	atomic_enter_critical(&flags);
     e22:	a804      	add	r0, sp, #16
     e24:	4b3c      	ldr	r3, [pc, #240]	; (f18 <usb_d_ep_transfer+0x110>)
     e26:	4798      	blx	r3
	state = ept->xfer.hdr.state;
     e28:	4b3c      	ldr	r3, [pc, #240]	; (f1c <usb_d_ep_transfer+0x114>)
     e2a:	eb03 1346 	add.w	r3, r3, r6, lsl #5
     e2e:	789b      	ldrb	r3, [r3, #2]
     e30:	f88d 3017 	strb.w	r3, [sp, #23]
	if (state == USB_EP_S_IDLE) {
     e34:	f89d 3017 	ldrb.w	r3, [sp, #23]
     e38:	b2db      	uxtb	r3, r3
     e3a:	2b01      	cmp	r3, #1
     e3c:	d011      	beq.n	e62 <usb_d_ep_transfer+0x5a>
		ept->xfer.hdr.state = USB_EP_S_X_DATA;
		atomic_leave_critical(&flags);
	} else {
		atomic_leave_critical(&flags);
     e3e:	a804      	add	r0, sp, #16
     e40:	4b37      	ldr	r3, [pc, #220]	; (f20 <usb_d_ep_transfer+0x118>)
     e42:	4798      	blx	r3
		switch (state) {
     e44:	f89d 3017 	ldrb.w	r3, [sp, #23]
     e48:	b2db      	uxtb	r3, r3
     e4a:	2b05      	cmp	r3, #5
     e4c:	d05f      	beq.n	f0e <usb_d_ep_transfer+0x106>
     e4e:	2b06      	cmp	r3, #6
     e50:	d023      	beq.n	e9a <usb_d_ep_transfer+0x92>
		case USB_EP_S_ERROR:
			return -USB_ERROR;
		case USB_EP_S_DISABLED:
			return -USB_ERR_FUNC;
		default: /* USB_EP_S_X_xxxx  */
			return USB_BUSY;
     e52:	2b00      	cmp	r3, #0
     e54:	bf0c      	ite	eq
     e56:	f06f 0012 	mvneq.w	r0, #18
     e5a:	2001      	movne	r0, #1
		}
	}

	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
	return rc;
}
     e5c:	b006      	add	sp, #24
     e5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		ept->xfer.hdr.state = USB_EP_S_X_DATA;
     e62:	f8df a0b8 	ldr.w	sl, [pc, #184]	; f1c <usb_d_ep_transfer+0x114>
     e66:	ea4f 1946 	mov.w	r9, r6, lsl #5
     e6a:	eb0a 0309 	add.w	r3, sl, r9
     e6e:	2203      	movs	r2, #3
     e70:	709a      	strb	r2, [r3, #2]
		atomic_leave_critical(&flags);
     e72:	a804      	add	r0, sp, #16
     e74:	4b2a      	ldr	r3, [pc, #168]	; (f20 <usb_d_ep_transfer+0x118>)
     e76:	4798      	blx	r3
	if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
     e78:	f81a 3009 	ldrb.w	r3, [sl, r9]
     e7c:	b183      	cbz	r3, ea0 <usb_d_ep_transfer+0x98>
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
     e7e:	7a22      	ldrb	r2, [r4, #8]
     e80:	3500      	adds	r5, #0
     e82:	bf18      	it	ne
     e84:	2501      	movne	r5, #1
	struct usb_d_transfer trans
     e86:	6823      	ldr	r3, [r4, #0]
     e88:	9301      	str	r3, [sp, #4]
     e8a:	f8cd 8008 	str.w	r8, [sp, #8]
     e8e:	f017 0f80 	tst.w	r7, #128	; 0x80
     e92:	d119      	bne.n	ec8 <usb_d_ep_transfer+0xc0>
     e94:	f002 030f 	and.w	r3, r2, #15
     e98:	e018      	b.n	ecc <usb_d_ep_transfer+0xc4>
			return -USB_ERROR;
     e9a:	f06f 000f 	mvn.w	r0, #15
     e9e:	e7dd      	b.n	e5c <usb_d_ep_transfer+0x54>
		uint16_t req_len = USB_GET_wLength(ept->xfer.req);
     ea0:	4b1e      	ldr	r3, [pc, #120]	; (f1c <usb_d_ep_transfer+0x114>)
     ea2:	eb03 1346 	add.w	r3, r3, r6, lsl #5
     ea6:	7cda      	ldrb	r2, [r3, #19]
     ea8:	7c9d      	ldrb	r5, [r3, #18]
     eaa:	eb05 2502 	add.w	r5, r5, r2, lsl #8
     eae:	b2ad      	uxth	r5, r5
		if (req_len == 0) {
     eb0:	b9a5      	cbnz	r5, edc <usb_d_ep_transfer+0xd4>
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
     eb2:	4b1a      	ldr	r3, [pc, #104]	; (f1c <usb_d_ep_transfer+0x114>)
     eb4:	eb03 1646 	add.w	r6, r3, r6, lsl #5
     eb8:	2304      	movs	r3, #4
     eba:	70b3      	strb	r3, [r6, #2]
			len                 = 0;
     ebc:	2300      	movs	r3, #0
			zlp                 = true;
     ebe:	2501      	movs	r5, #1
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
     ec0:	7a22      	ldrb	r2, [r4, #8]
	struct usb_d_transfer trans
     ec2:	6821      	ldr	r1, [r4, #0]
     ec4:	9101      	str	r1, [sp, #4]
     ec6:	9302      	str	r3, [sp, #8]
     ec8:	f042 0380 	orr.w	r3, r2, #128	; 0x80
     ecc:	f88d 300c 	strb.w	r3, [sp, #12]
     ed0:	f88d 500d 	strb.w	r5, [sp, #13]
	return _usb_d_dev_ep_trans(&trans);
     ed4:	a801      	add	r0, sp, #4
     ed6:	4b13      	ldr	r3, [pc, #76]	; (f24 <usb_d_ep_transfer+0x11c>)
     ed8:	4798      	blx	r3
	return rc;
     eda:	e7bf      	b.n	e5c <usb_d_ep_transfer+0x54>
     edc:	4643      	mov	r3, r8
     ede:	45a8      	cmp	r8, r5
     ee0:	bf28      	it	cs
     ee2:	462b      	movcs	r3, r5
			dir = (USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN);
     ee4:	4a0d      	ldr	r2, [pc, #52]	; (f1c <usb_d_ep_transfer+0x114>)
     ee6:	eb02 1646 	add.w	r6, r2, r6, lsl #5
			if (dir) {
     eea:	f996 200c 	ldrsb.w	r2, [r6, #12]
     eee:	2a00      	cmp	r2, #0
     ef0:	db05      	blt.n	efe <usb_d_ep_transfer+0xf6>
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
     ef2:	7a22      	ldrb	r2, [r4, #8]
	struct usb_d_transfer trans
     ef4:	6821      	ldr	r1, [r4, #0]
     ef6:	9101      	str	r1, [sp, #4]
     ef8:	9302      	str	r3, [sp, #8]
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
     efa:	2500      	movs	r5, #0
     efc:	e7ca      	b.n	e94 <usb_d_ep_transfer+0x8c>
				zlp = (req_len > len);
     efe:	429d      	cmp	r5, r3
     f00:	bf94      	ite	ls
     f02:	2500      	movls	r5, #0
     f04:	2501      	movhi	r5, #1
     f06:	e7db      	b.n	ec0 <usb_d_ep_transfer+0xb8>
		return -USB_ERR_PARAM;
     f08:	f06f 0011 	mvn.w	r0, #17
     f0c:	e7a6      	b.n	e5c <usb_d_ep_transfer+0x54>
			return USB_HALTED;
     f0e:	2002      	movs	r0, #2
     f10:	e7a4      	b.n	e5c <usb_d_ep_transfer+0x54>
     f12:	bf00      	nop
     f14:	00000a3d 	.word	0x00000a3d
     f18:	000030c5 	.word	0x000030c5
     f1c:	2000059c 	.word	0x2000059c
     f20:	000030d3 	.word	0x000030d3
     f24:	00002279 	.word	0x00002279

00000f28 <usb_d_ep_abort>:

void usb_d_ep_abort(const uint8_t ep)
{
     f28:	b538      	push	{r3, r4, r5, lr}
     f2a:	4605      	mov	r5, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
     f2c:	4b07      	ldr	r3, [pc, #28]	; (f4c <usb_d_ep_abort+0x24>)
     f2e:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ep_index < 0) {
     f30:	1e04      	subs	r4, r0, #0
     f32:	db09      	blt.n	f48 <usb_d_ep_abort+0x20>
		return;
	}
	_usb_d_dev_ep_abort(ep);
     f34:	4628      	mov	r0, r5
     f36:	4b06      	ldr	r3, [pc, #24]	; (f50 <usb_d_ep_abort+0x28>)
     f38:	4798      	blx	r3
	ept->xfer.hdr.state  = USB_EP_S_IDLE;
     f3a:	4806      	ldr	r0, [pc, #24]	; (f54 <usb_d_ep_abort+0x2c>)
     f3c:	eb00 1044 	add.w	r0, r0, r4, lsl #5
     f40:	2301      	movs	r3, #1
     f42:	7083      	strb	r3, [r0, #2]
	ept->xfer.hdr.status = USB_XFER_ABORT;
     f44:	2304      	movs	r3, #4
     f46:	70c3      	strb	r3, [r0, #3]
     f48:	bd38      	pop	{r3, r4, r5, pc}
     f4a:	bf00      	nop
     f4c:	00000a3d 	.word	0x00000a3d
     f50:	00002459 	.word	0x00002459
     f54:	2000059c 	.word	0x2000059c

00000f58 <usb_d_ep_halt>:
	}
	return ERR_NONE;
}

int32_t usb_d_ep_halt(const uint8_t ep, const enum usb_ep_halt_ctrl ctrl)
{
     f58:	b538      	push	{r3, r4, r5, lr}
     f5a:	4604      	mov	r4, r0
	if (ctrl == USB_EP_HALT_CLR) {
     f5c:	b141      	cbz	r1, f70 <usb_d_ep_halt+0x18>
		return _usb_d_ep_halt_clr(ep);
	} else if (ctrl == USB_EP_HALT_SET) {
     f5e:	2901      	cmp	r1, #1
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
     f60:	bf0c      	ite	eq
     f62:	2101      	moveq	r1, #1
	} else {
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_GET);
     f64:	2102      	movne	r1, #2
     f66:	4b13      	ldr	r3, [pc, #76]	; (fb4 <usb_d_ep_halt+0x5c>)
     f68:	4798      	blx	r3
     f6a:	4603      	mov	r3, r0
	}
}
     f6c:	4618      	mov	r0, r3
     f6e:	bd38      	pop	{r3, r4, r5, pc}
	int8_t           ep_index = _usb_d_find_ep(ep);
     f70:	4b11      	ldr	r3, [pc, #68]	; (fb8 <usb_d_ep_halt+0x60>)
     f72:	4798      	blx	r3
	if (ep_index < 0) {
     f74:	1e05      	subs	r5, r0, #0
     f76:	db19      	blt.n	fac <usb_d_ep_halt+0x54>
	if (_usb_d_dev_ep_stall(ep, USB_EP_STALL_GET)) {
     f78:	2102      	movs	r1, #2
     f7a:	4620      	mov	r0, r4
     f7c:	4b0d      	ldr	r3, [pc, #52]	; (fb4 <usb_d_ep_halt+0x5c>)
     f7e:	4798      	blx	r3
     f80:	4603      	mov	r3, r0
     f82:	2800      	cmp	r0, #0
     f84:	d0f2      	beq.n	f6c <usb_d_ep_halt+0x14>
		rc = _usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
     f86:	2100      	movs	r1, #0
     f88:	4620      	mov	r0, r4
     f8a:	4b0a      	ldr	r3, [pc, #40]	; (fb4 <usb_d_ep_halt+0x5c>)
     f8c:	4798      	blx	r3
		if (rc < 0) {
     f8e:	1e03      	subs	r3, r0, #0
     f90:	dbec      	blt.n	f6c <usb_d_ep_halt+0x14>
		ept->xfer.hdr.state  = USB_EP_S_IDLE;
     f92:	4b0a      	ldr	r3, [pc, #40]	; (fbc <usb_d_ep_halt+0x64>)
     f94:	eb03 1345 	add.w	r3, r3, r5, lsl #5
     f98:	2201      	movs	r2, #1
     f9a:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_UNHALT;
     f9c:	2103      	movs	r1, #3
     f9e:	70d9      	strb	r1, [r3, #3]
		ept->callbacks.xfer(ep, USB_XFER_UNHALT, NULL);
     fa0:	69db      	ldr	r3, [r3, #28]
     fa2:	2200      	movs	r2, #0
     fa4:	4620      	mov	r0, r4
     fa6:	4798      	blx	r3
	return ERR_NONE;
     fa8:	2300      	movs	r3, #0
     faa:	e7df      	b.n	f6c <usb_d_ep_halt+0x14>
		return -USB_ERR_PARAM;
     fac:	f06f 0311 	mvn.w	r3, #17
     fb0:	e7dc      	b.n	f6c <usb_d_ep_halt+0x14>
     fb2:	bf00      	nop
     fb4:	000020d1 	.word	0x000020d1
     fb8:	00000a3d 	.word	0x00000a3d
     fbc:	2000059c 	.word	0x2000059c

00000fc0 <usb_d_ep_register_callback>:

void usb_d_ep_register_callback(const uint8_t ep, const enum usb_d_ep_cb_type type, const FUNC_PTR func)
{
     fc0:	b538      	push	{r3, r4, r5, lr}
     fc2:	460d      	mov	r5, r1
     fc4:	4614      	mov	r4, r2
	int8_t           ep_index = _usb_d_find_ep(ep);
     fc6:	4b0e      	ldr	r3, [pc, #56]	; (1000 <usb_d_ep_register_callback+0x40>)
     fc8:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	FUNC_PTR         f        = func ? (FUNC_PTR)func : (FUNC_PTR)usb_d_dummy_cb_false;
     fca:	4b0e      	ldr	r3, [pc, #56]	; (1004 <usb_d_ep_register_callback+0x44>)
     fcc:	2c00      	cmp	r4, #0
     fce:	bf08      	it	eq
     fd0:	461c      	moveq	r4, r3
	if (ep_index < 0) {
     fd2:	2800      	cmp	r0, #0
     fd4:	db13      	blt.n	ffe <usb_d_ep_register_callback+0x3e>
		return;
	}
	switch (type) {
     fd6:	2d01      	cmp	r5, #1
     fd8:	d008      	beq.n	fec <usb_d_ep_register_callback+0x2c>
     fda:	b115      	cbz	r5, fe2 <usb_d_ep_register_callback+0x22>
     fdc:	2d02      	cmp	r5, #2
     fde:	d00a      	beq.n	ff6 <usb_d_ep_register_callback+0x36>
     fe0:	bd38      	pop	{r3, r4, r5, pc}
	case USB_D_EP_CB_SETUP:
		ept->callbacks.req = (usb_d_ep_cb_setup_t)f;
     fe2:	4b09      	ldr	r3, [pc, #36]	; (1008 <usb_d_ep_register_callback+0x48>)
     fe4:	eb03 1040 	add.w	r0, r3, r0, lsl #5
     fe8:	6144      	str	r4, [r0, #20]
		break;
     fea:	bd38      	pop	{r3, r4, r5, pc}
	case USB_D_EP_CB_MORE:
		ept->callbacks.more = (usb_d_ep_cb_more_t)f;
     fec:	4b06      	ldr	r3, [pc, #24]	; (1008 <usb_d_ep_register_callback+0x48>)
     fee:	eb03 1040 	add.w	r0, r3, r0, lsl #5
     ff2:	6184      	str	r4, [r0, #24]
		break;
     ff4:	bd38      	pop	{r3, r4, r5, pc}
	case USB_D_EP_CB_XFER:
		ept->callbacks.xfer = (usb_d_ep_cb_xfer_t)f;
     ff6:	4b04      	ldr	r3, [pc, #16]	; (1008 <usb_d_ep_register_callback+0x48>)
     ff8:	eb03 1040 	add.w	r0, r3, r0, lsl #5
     ffc:	61c4      	str	r4, [r0, #28]
     ffe:	bd38      	pop	{r3, r4, r5, pc}
    1000:	00000a3d 	.word	0x00000a3d
    1004:	00000a81 	.word	0x00000a81
    1008:	2000059c 	.word	0x2000059c

0000100c <_get_cycles_for_ms>:
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
	return _get_cycles_for_ms_internal(ms, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
}
    100c:	f642 63e0 	movw	r3, #12000	; 0x2ee0
    1010:	fb03 f000 	mul.w	r0, r3, r0
    1014:	4770      	bx	lr
	...

00001018 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
    1018:	b508      	push	{r3, lr}
}

static inline void hri_nvmctrl_set_CTRLA_RWS_bf(const void *const hw, hri_nvmctrl_ctrla_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLA.reg |= NVMCTRL_CTRLA_RWS(mask);
    101a:	4a08      	ldr	r2, [pc, #32]	; (103c <_init_chip+0x24>)
    101c:	8813      	ldrh	r3, [r2, #0]
    101e:	b29b      	uxth	r3, r3
    1020:	8013      	strh	r3, [r2, #0]
	hri_nvmctrl_set_CTRLA_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);

	_osc32kctrl_init_sources();
    1022:	4b07      	ldr	r3, [pc, #28]	; (1040 <_init_chip+0x28>)
    1024:	4798      	blx	r3
	_oscctrl_init_sources();
    1026:	4b07      	ldr	r3, [pc, #28]	; (1044 <_init_chip+0x2c>)
    1028:	4798      	blx	r3
	_mclk_init();
    102a:	4b07      	ldr	r3, [pc, #28]	; (1048 <_init_chip+0x30>)
    102c:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
#endif
	_oscctrl_init_referenced_generators();
    102e:	4b07      	ldr	r3, [pc, #28]	; (104c <_init_chip+0x34>)
    1030:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
    1032:	f640 70ff 	movw	r0, #4095	; 0xfff
    1036:	4b06      	ldr	r3, [pc, #24]	; (1050 <_init_chip+0x38>)
    1038:	4798      	blx	r3
    103a:	bd08      	pop	{r3, pc}
    103c:	41004000 	.word	0x41004000
    1040:	000010bd 	.word	0x000010bd
    1044:	000010dd 	.word	0x000010dd
    1048:	000010b1 	.word	0x000010b1
    104c:	000010f9 	.word	0x000010f9
    1050:	00001055 	.word	0x00001055

00001054 <_gclk_init_generators_by_fref>:

void _gclk_init_generators_by_fref(uint32_t bm)
{

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
    1054:	f010 0f01 	tst.w	r0, #1
    1058:	d008      	beq.n	106c <_gclk_init_generators_by_fref+0x18>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    105a:	4a11      	ldr	r2, [pc, #68]	; (10a0 <_gclk_init_generators_by_fref+0x4c>)
    105c:	4b11      	ldr	r3, [pc, #68]	; (10a4 <_gclk_init_generators_by_fref+0x50>)
    105e:	621a      	str	r2, [r3, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    1060:	4619      	mov	r1, r3
    1062:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    1066:	684b      	ldr	r3, [r1, #4]
    1068:	4213      	tst	r3, r2
    106a:	d1fc      	bne.n	1066 <_gclk_init_generators_by_fref+0x12>
		        | (CONF_GCLK_GENERATOR_2_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_2_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_3_CONFIG == 1
	if (bm & (1ul << 3)) {
    106c:	f010 0f08 	tst.w	r0, #8
    1070:	d008      	beq.n	1084 <_gclk_init_generators_by_fref+0x30>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    1072:	4a0d      	ldr	r2, [pc, #52]	; (10a8 <_gclk_init_generators_by_fref+0x54>)
    1074:	4b0b      	ldr	r3, [pc, #44]	; (10a4 <_gclk_init_generators_by_fref+0x50>)
    1076:	62da      	str	r2, [r3, #44]	; 0x2c
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    1078:	4619      	mov	r1, r3
    107a:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    107e:	684b      	ldr	r3, [r1, #4]
    1080:	4213      	tst	r3, r2
    1082:	d1fc      	bne.n	107e <_gclk_init_generators_by_fref+0x2a>
		        | (CONF_GCLK_GENERATOR_3_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_3_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_4_CONFIG == 1
	if (bm & (1ul << 4)) {
    1084:	f010 0f10 	tst.w	r0, #16
    1088:	d008      	beq.n	109c <_gclk_init_generators_by_fref+0x48>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    108a:	4a08      	ldr	r2, [pc, #32]	; (10ac <_gclk_init_generators_by_fref+0x58>)
    108c:	4b05      	ldr	r3, [pc, #20]	; (10a4 <_gclk_init_generators_by_fref+0x50>)
    108e:	631a      	str	r2, [r3, #48]	; 0x30
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    1090:	4619      	mov	r1, r3
    1092:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    1096:	684b      	ldr	r3, [r1, #4]
    1098:	4213      	tst	r3, r2
    109a:	d1fc      	bne.n	1096 <_gclk_init_generators_by_fref+0x42>
    109c:	4770      	bx	lr
    109e:	bf00      	nop
    10a0:	00010101 	.word	0x00010101
    10a4:	40001c00 	.word	0x40001c00
    10a8:	00010105 	.word	0x00010105
    10ac:	00010106 	.word	0x00010106

000010b0 <_mclk_init>:
	((Mclk *)hw)->CPUDIV.reg = data;
    10b0:	2201      	movs	r2, #1
    10b2:	4b01      	ldr	r3, [pc, #4]	; (10b8 <_mclk_init+0x8>)
    10b4:	715a      	strb	r2, [r3, #5]
    10b6:	4770      	bx	lr
    10b8:	40000800 	.word	0x40000800

000010bc <_osc32kctrl_init_sources>:
}

static inline void hri_osc32kctrl_write_XOSC32K_reg(const void *const hw, hri_osc32kctrl_xosc32k_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->XOSC32K.reg = data;
    10bc:	4b06      	ldr	r3, [pc, #24]	; (10d8 <_osc32kctrl_init_sources+0x1c>)
    10be:	f242 028e 	movw	r2, #8334	; 0x208e
    10c2:	829a      	strh	r2, [r3, #20]
}

static inline void hri_osc32kctrl_write_CFDCTRL_reg(const void *const hw, hri_osc32kctrl_cfdctrl_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->CFDCTRL.reg = data;
    10c4:	2200      	movs	r2, #0
    10c6:	759a      	strb	r2, [r3, #22]
}

static inline void hri_osc32kctrl_write_EVCTRL_reg(const void *const hw, hri_osc32kctrl_evctrl_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->EVCTRL.reg = data;
    10c8:	75da      	strb	r2, [r3, #23]
}

static inline hri_osc32kctrl_osculp32k_reg_t hri_osc32kctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Osc32kctrl *)hw)->OSCULP32K.reg;
    10ca:	69da      	ldr	r2, [r3, #28]
	calib = hri_osc32kctrl_read_OSCULP32K_CALIB_bf(hw);
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
#if CONF_OSCULP32K_CALIB_ENABLE == 1
	                                   OSC32KCTRL_OSCULP32K_CALIB(CONF_OSCULP32K_CALIB)
#else
	                                   OSC32KCTRL_OSCULP32K_CALIB(calib)
    10cc:	f402 527c 	and.w	r2, r2, #16128	; 0x3f00
}

static inline void hri_osc32kctrl_write_OSCULP32K_reg(const void *const hw, hri_osc32kctrl_osculp32k_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->OSCULP32K.reg = data;
    10d0:	61da      	str	r2, [r3, #28]
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
    10d2:	2201      	movs	r2, #1
    10d4:	741a      	strb	r2, [r3, #16]
    10d6:	4770      	bx	lr
    10d8:	40001400 	.word	0x40001400

000010dc <_oscctrl_init_sources>:
}

static inline void hri_oscctrl_write_XOSCCTRL_reg(const void *const hw, uint8_t index, hri_oscctrl_xoscctrl_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->XOSCCTRL[index].reg = data;
    10dc:	4a04      	ldr	r2, [pc, #16]	; (10f0 <_oscctrl_init_sources+0x14>)
    10de:	4b05      	ldr	r3, [pc, #20]	; (10f4 <_oscctrl_init_sources+0x18>)
    10e0:	619a      	str	r2, [r3, #24]
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCRDY1) >> OSCCTRL_STATUS_XOSCRDY1_Pos;
    10e2:	461a      	mov	r2, r3
    10e4:	6913      	ldr	r3, [r2, #16]
	        | (CONF_XOSC1_XTALEN << OSCCTRL_XOSCCTRL_XTALEN_Pos) | (CONF_XOSC1_ENABLE << OSCCTRL_XOSCCTRL_ENABLE_Pos));
#endif

#if CONF_XOSC1_CONFIG == 1
#if CONF_XOSC1_ENABLE == 1
	while (!hri_oscctrl_get_STATUS_XOSCRDY1_bit(hw))
    10e6:	f013 0f02 	tst.w	r3, #2
    10ea:	d0fb      	beq.n	10e4 <_oscctrl_init_sources+0x8>
	hri_oscctrl_set_XOSCCTRL_ONDEMAND_bit(hw, 1);
#endif
#endif

	(void)hw;
}
    10ec:	4770      	bx	lr
    10ee:	bf00      	nop
    10f0:	03002606 	.word	0x03002606
    10f4:	40001000 	.word	0x40001000

000010f8 <_oscctrl_init_referenced_generators>:
	tmp = ((Gclk *)hw)->GENCTRL[index].reg;
    10f8:	4a36      	ldr	r2, [pc, #216]	; (11d4 <_oscctrl_init_referenced_generators+0xdc>)
    10fa:	6a13      	ldr	r3, [r2, #32]
	tmp &= ~GCLK_GENCTRL_SRC_Msk;
    10fc:	f023 030f 	bic.w	r3, r3, #15
	tmp |= GCLK_GENCTRL_SRC(data);
    1100:	f043 0304 	orr.w	r3, r3, #4
	((Gclk *)hw)->GENCTRL[index].reg = tmp;
    1104:	6213      	str	r3, [r2, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    1106:	4611      	mov	r1, r2
    1108:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    110c:	684b      	ldr	r3, [r1, #4]
    110e:	4213      	tst	r3, r2
    1110:	d1fc      	bne.n	110c <_oscctrl_init_referenced_generators+0x14>
	return (((Gclk *)hw)->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL0) >> GCLK_SYNCBUSY_GENCTRL0_Pos;
    1112:	4a30      	ldr	r2, [pc, #192]	; (11d4 <_oscctrl_init_referenced_generators+0xdc>)
    1114:	6853      	ldr	r3, [r2, #4]
{
	void *hw = (void *)OSCCTRL;

#if CONF_DFLL_CONFIG == 1
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, GCLK_GENCTRL_SRC_OSCULP32K);
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
    1116:	f013 0f04 	tst.w	r3, #4
    111a:	d1fb      	bne.n	1114 <_oscctrl_init_referenced_generators+0x1c>
}

static inline void hri_oscctrl_write_DFLLCTRLA_reg(const void *const hw, hri_oscctrl_dfllctrla_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLCTRLA.reg = data;
    111c:	4b2e      	ldr	r3, [pc, #184]	; (11d8 <_oscctrl_init_referenced_generators+0xe0>)
    111e:	2200      	movs	r2, #0
    1120:	771a      	strb	r2, [r3, #28]
}

static inline void hri_oscctrl_write_DFLLMUL_reg(const void *const hw, hri_oscctrl_dfllmul_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLMUL.reg = data;
    1122:	4a2e      	ldr	r2, [pc, #184]	; (11dc <_oscctrl_init_referenced_generators+0xe4>)
    1124:	629a      	str	r2, [r3, #40]	; 0x28
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(const void *const hw)
{
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    1126:	461a      	mov	r2, r3
    1128:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
#endif

	hri_oscctrl_write_DFLLMUL_reg(hw,
	                              OSCCTRL_DFLLMUL_CSTEP(CONF_DFLL_CSTEP) | OSCCTRL_DFLLMUL_FSTEP(CONF_DFLL_FSTEP)
	                                  | OSCCTRL_DFLLMUL_MUL(CONF_DFLL_MUL));
	while (hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(hw))
    112c:	f013 0f10 	tst.w	r3, #16
    1130:	d1fa      	bne.n	1128 <_oscctrl_init_referenced_generators+0x30>
	((Oscctrl *)hw)->DFLLCTRLB.reg = data;
    1132:	2200      	movs	r2, #0
    1134:	4b28      	ldr	r3, [pc, #160]	; (11d8 <_oscctrl_init_referenced_generators+0xe0>)
    1136:	f883 2020 	strb.w	r2, [r3, #32]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    113a:	461a      	mov	r2, r3
    113c:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
		;

	hri_oscctrl_write_DFLLCTRLB_reg(hw, 0);
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    1140:	f013 0f04 	tst.w	r3, #4
    1144:	d1fa      	bne.n	113c <_oscctrl_init_referenced_generators+0x44>
	((Oscctrl *)hw)->DFLLCTRLA.reg = data;
    1146:	2202      	movs	r2, #2
    1148:	4b23      	ldr	r3, [pc, #140]	; (11d8 <_oscctrl_init_referenced_generators+0xe0>)
    114a:	771a      	strb	r2, [r3, #28]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    114c:	461a      	mov	r2, r3
    114e:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
		;

	tmp = (CONF_DFLL_RUNSTDBY << OSCCTRL_DFLLCTRLA_RUNSTDBY_Pos) | OSCCTRL_DFLLCTRLA_ENABLE;
	hri_oscctrl_write_DFLLCTRLA_reg(hw, tmp);
	while (hri_oscctrl_get_DFLLSYNC_ENABLE_bit(hw))
    1152:	f013 0f02 	tst.w	r3, #2
    1156:	d1fa      	bne.n	114e <_oscctrl_init_referenced_generators+0x56>
	return ((Oscctrl *)hw)->DFLLVAL.reg;
    1158:	4b1f      	ldr	r3, [pc, #124]	; (11d8 <_oscctrl_init_referenced_generators+0xe0>)
    115a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	((Oscctrl *)hw)->DFLLVAL.reg = data;
    115c:	625a      	str	r2, [r3, #36]	; 0x24
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    115e:	461a      	mov	r2, r3
    1160:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c

#if CONF_DFLL_OVERWRITE_CALIBRATION == 1
	hri_oscctrl_write_DFLLVAL_reg(hw, OSCCTRL_DFLLVAL_COARSE(CONF_DFLL_COARSE) | OSCCTRL_DFLLVAL_FINE(CONF_DFLL_FINE));
#endif
	hri_oscctrl_write_DFLLVAL_reg(hw, hri_oscctrl_read_DFLLVAL_reg(hw));
	while (hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit(hw))
    1164:	f013 0f08 	tst.w	r3, #8
    1168:	d1fa      	bne.n	1160 <_oscctrl_init_referenced_generators+0x68>
	((Oscctrl *)hw)->DFLLCTRLB.reg = data;
    116a:	2218      	movs	r2, #24
    116c:	4b1a      	ldr	r3, [pc, #104]	; (11d8 <_oscctrl_init_referenced_generators+0xe0>)
    116e:	f883 2020 	strb.w	r2, [r3, #32]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    1172:	461a      	mov	r2, r3
    1174:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
	tmp = (CONF_DFLL_WAITLOCK << OSCCTRL_DFLLCTRLB_WAITLOCK_Pos) | (CONF_DFLL_BPLCKC << OSCCTRL_DFLLCTRLB_BPLCKC_Pos)
	      | (CONF_DFLL_QLDIS << OSCCTRL_DFLLCTRLB_QLDIS_Pos) | (CONF_DFLL_CCDIS << OSCCTRL_DFLLCTRLB_CCDIS_Pos)
	      | (CONF_DFLL_USBCRM << OSCCTRL_DFLLCTRLB_USBCRM_Pos) | (CONF_DFLL_LLAW << OSCCTRL_DFLLCTRLB_LLAW_Pos)
	      | (CONF_DFLL_STABLE << OSCCTRL_DFLLCTRLB_STABLE_Pos) | (CONF_DFLL_MODE << OSCCTRL_DFLLCTRLB_MODE_Pos) | 0;
	hri_oscctrl_write_DFLLCTRLB_reg(hw, tmp);
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    1178:	f013 0f04 	tst.w	r3, #4
    117c:	d1fa      	bne.n	1174 <_oscctrl_init_referenced_generators+0x7c>
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
    117e:	4b16      	ldr	r3, [pc, #88]	; (11d8 <_oscctrl_init_referenced_generators+0xe0>)
    1180:	f893 3020 	ldrb.w	r3, [r3, #32]
	                                (CONF_FDPLL1_RUNSTDBY << OSCCTRL_DPLLCTRLA_RUNSTDBY_Pos)
	                                    | (CONF_FDPLL1_ENABLE << OSCCTRL_DPLLCTRLA_ENABLE_Pos));
#endif

#if CONF_DFLL_CONFIG == 1
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(hw)) {
    1184:	f013 0f01 	tst.w	r3, #1
    1188:	d01d      	beq.n	11c6 <_oscctrl_init_referenced_generators+0xce>
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    118a:	4a13      	ldr	r2, [pc, #76]	; (11d8 <_oscctrl_init_referenced_generators+0xe0>)
    118c:	6913      	ldr	r3, [r2, #16]
	tmp &= mask;
    118e:	f403 6310 	and.w	r3, r3, #2304	; 0x900
		hri_oscctrl_status_reg_t status_mask = OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC;

		while (hri_oscctrl_get_STATUS_reg(hw, status_mask) != status_mask)
    1192:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
    1196:	d1f9      	bne.n	118c <_oscctrl_init_referenced_generators+0x94>
	return ((Gclk *)hw)->SYNCBUSY.reg;
    1198:	4a0e      	ldr	r2, [pc, #56]	; (11d4 <_oscctrl_init_referenced_generators+0xdc>)
    119a:	6853      	ldr	r3, [r2, #4]
	hri_oscctrl_set_DPLLCTRLA_ONDEMAND_bit(hw, 1);
#endif
#endif

#if CONF_DFLL_CONFIG == 1
	while (hri_gclk_read_SYNCBUSY_reg(GCLK))
    119c:	2b00      	cmp	r3, #0
    119e:	d1fc      	bne.n	119a <_oscctrl_init_referenced_generators+0xa2>
	tmp = ((Gclk *)hw)->GENCTRL[index].reg;
    11a0:	4a0c      	ldr	r2, [pc, #48]	; (11d4 <_oscctrl_init_referenced_generators+0xdc>)
    11a2:	6a13      	ldr	r3, [r2, #32]
	tmp &= ~GCLK_GENCTRL_SRC_Msk;
    11a4:	f023 030f 	bic.w	r3, r3, #15
	tmp |= GCLK_GENCTRL_SRC(data);
    11a8:	f043 0301 	orr.w	r3, r3, #1
	((Gclk *)hw)->GENCTRL[index].reg = tmp;
    11ac:	6213      	str	r3, [r2, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    11ae:	4611      	mov	r1, r2
    11b0:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    11b4:	684b      	ldr	r3, [r1, #4]
    11b6:	4213      	tst	r3, r2
    11b8:	d1fc      	bne.n	11b4 <_oscctrl_init_referenced_generators+0xbc>
	return (((Gclk *)hw)->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL0) >> GCLK_SYNCBUSY_GENCTRL0_Pos;
    11ba:	4a06      	ldr	r2, [pc, #24]	; (11d4 <_oscctrl_init_referenced_generators+0xdc>)
    11bc:	6853      	ldr	r3, [r2, #4]
		;
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, CONF_GCLK_GEN_0_SOURCE);
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
    11be:	f013 0f04 	tst.w	r3, #4
    11c2:	d1fb      	bne.n	11bc <_oscctrl_init_referenced_generators+0xc4>
		;
#endif
	(void)hw;
}
    11c4:	4770      	bx	lr
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_DFLLRDY) >> OSCCTRL_STATUS_DFLLRDY_Pos;
    11c6:	4a04      	ldr	r2, [pc, #16]	; (11d8 <_oscctrl_init_referenced_generators+0xe0>)
    11c8:	6913      	ldr	r3, [r2, #16]
		while (!hri_oscctrl_get_STATUS_DFLLRDY_bit(hw))
    11ca:	f413 7f80 	tst.w	r3, #256	; 0x100
    11ce:	d0fb      	beq.n	11c8 <_oscctrl_init_referenced_generators+0xd0>
    11d0:	e7e2      	b.n	1198 <_oscctrl_init_referenced_generators+0xa0>
    11d2:	bf00      	nop
    11d4:	40001c00 	.word	0x40001c00
    11d8:	40001000 	.word	0x40001000
    11dc:	0401bb80 	.word	0x0401bb80

000011e0 <_delay_init>:
 * \brief Initialize system time module
 */
void _system_time_init(void *const hw)
{
	(void)hw;
	SysTick->LOAD = (0xFFFFFF << SysTick_LOAD_RELOAD_Pos);
    11e0:	4b03      	ldr	r3, [pc, #12]	; (11f0 <_delay_init+0x10>)
    11e2:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
    11e6:	605a      	str	r2, [r3, #4]
	SysTick->CTRL = (1 << SysTick_CTRL_ENABLE_Pos) | (CONF_SYSTICK_TICKINT << SysTick_CTRL_TICKINT_Pos)
    11e8:	2205      	movs	r2, #5
    11ea:	601a      	str	r2, [r3, #0]
    11ec:	4770      	bx	lr
    11ee:	bf00      	nop
    11f0:	e000e010 	.word	0xe000e010

000011f4 <_delay_cycles>:
 * \brief Delay loop to delay n number of cycles
 */
void _delay_cycles(void *const hw, uint32_t cycles)
{
	(void)hw;
	uint8_t  n   = cycles >> 24;
    11f4:	0e0b      	lsrs	r3, r1, #24
	uint32_t buf = cycles;

	while (n--) {
    11f6:	b303      	cbz	r3, 123a <_delay_cycles+0x46>
{
    11f8:	b430      	push	{r4, r5}
    11fa:	1e5d      	subs	r5, r3, #1
    11fc:	b2ed      	uxtb	r5, r5
	while (n--) {
    11fe:	4628      	mov	r0, r5
		SysTick->LOAD = 0xFFFFFF;
    1200:	4a12      	ldr	r2, [pc, #72]	; (124c <_delay_cycles+0x58>)
    1202:	f06f 447f 	mvn.w	r4, #4278190080	; 0xff000000
    1206:	6054      	str	r4, [r2, #4]
		SysTick->VAL  = 0xFFFFFF;
    1208:	6094      	str	r4, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    120a:	6813      	ldr	r3, [r2, #0]
    120c:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    1210:	d0fb      	beq.n	120a <_delay_cycles+0x16>
	while (n--) {
    1212:	3801      	subs	r0, #1
    1214:	b2c0      	uxtb	r0, r0
    1216:	28ff      	cmp	r0, #255	; 0xff
    1218:	d1f5      	bne.n	1206 <_delay_cycles+0x12>
    121a:	eba5 6505 	sub.w	r5, r5, r5, lsl #24
    121e:	f101 417f 	add.w	r1, r1, #4278190080	; 0xff000000
    1222:	3101      	adds	r1, #1
    1224:	4429      	add	r1, r5
			;
		buf -= 0xFFFFFF;
	}

	SysTick->LOAD = buf;
    1226:	4b09      	ldr	r3, [pc, #36]	; (124c <_delay_cycles+0x58>)
    1228:	6059      	str	r1, [r3, #4]
	SysTick->VAL  = buf;
    122a:	6099      	str	r1, [r3, #8]
	while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    122c:	461a      	mov	r2, r3
    122e:	6813      	ldr	r3, [r2, #0]
    1230:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    1234:	d0fb      	beq.n	122e <_delay_cycles+0x3a>
		;
}
    1236:	bc30      	pop	{r4, r5}
    1238:	4770      	bx	lr
	SysTick->LOAD = buf;
    123a:	4b04      	ldr	r3, [pc, #16]	; (124c <_delay_cycles+0x58>)
    123c:	6059      	str	r1, [r3, #4]
	SysTick->VAL  = buf;
    123e:	6099      	str	r1, [r3, #8]
	while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    1240:	461a      	mov	r2, r3
    1242:	6813      	ldr	r3, [r2, #0]
    1244:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    1248:	d0fb      	beq.n	1242 <_delay_cycles+0x4e>
    124a:	4770      	bx	lr
    124c:	e000e010 	.word	0xe000e010

00001250 <_dummy_func_no_return>:
static bool _dummy_func_no_return(uint32_t unused0, uint32_t unused1)
{
	(void)unused0;
	(void)unused1;
	return false;
}
    1250:	2000      	movs	r0, #0
    1252:	4770      	bx	lr

00001254 <_usb_d_dev_handle_setup>:
/**
 * \brief Handles setup received interrupt
 * \param[in] ept Pointer to endpoint information.
 */
static void _usb_d_dev_handle_setup(struct _usb_d_dev_ep *ept)
{
    1254:	b538      	push	{r3, r4, r5, lr}
	uint8_t epn     = USB_EP_GET_N(ept->ep);
    1256:	7c83      	ldrb	r3, [r0, #18]
    1258:	f003 030f 	and.w	r3, r3, #15
	bool    is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    125c:	7cc2      	ldrb	r2, [r0, #19]

	if (!is_ctrl) {
    125e:	f002 0107 	and.w	r1, r2, #7
    1262:	2901      	cmp	r1, #1
    1264:	d00b      	beq.n	127e <_usb_d_dev_handle_setup+0x2a>
}

static inline void hri_usbendpoint_clear_EPINTFLAG_reg(const void *const hw, uint8_t submodule_index,
                                                       hri_usbendpoint_epintflag_reg_t mask)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    1266:	015a      	lsls	r2, r3, #5
    1268:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    126c:	2110      	movs	r1, #16
    126e:	f882 1107 	strb.w	r1, [r2, #263]	; 0x107
	}
}

static inline void hri_usbendpoint_clear_EPINTEN_RXSTP_bit(const void *const hw, uint8_t submodule_index)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = USB_DEVICE_EPINTENSET_RXSTP;
    1272:	015b      	lsls	r3, r3, #5
    1274:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    1278:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
    127c:	bd38      	pop	{r3, r4, r5, pc}
	}
	/* Control transfer:
	 * SETUP transaction will terminate IN/OUT transaction,
	 * and start new transaction with received SETUP packet.
	 */
	if (_usb_d_dev_ep_is_busy(ept)) {
    127e:	f012 0f40 	tst.w	r2, #64	; 0x40
    1282:	d00c      	beq.n	129e <_usb_d_dev_handle_setup+0x4a>
		ept->flags.bits.is_busy = 0;
    1284:	7cc2      	ldrb	r2, [r0, #19]
    1286:	f36f 1286 	bfc	r2, #6, #1
    128a:	74c2      	strb	r2, [r0, #19]
    128c:	015a      	lsls	r2, r3, #5
    128e:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    1292:	2180      	movs	r1, #128	; 0x80
    1294:	f882 1104 	strb.w	r1, [r2, #260]	; 0x104
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    1298:	2140      	movs	r1, #64	; 0x40
    129a:	f882 1105 	strb.w	r1, [r2, #261]	; 0x105

		/* Stop transfer on either direction. */
		_usbd_ep_set_in_rdy(epn, 1, false);
		_usbd_ep_set_out_rdy(epn, 0, false);
	}
	ept->flags.bits.is_stalled = 0;
    129e:	7cc2      	ldrb	r2, [r0, #19]
    12a0:	f36f 02c3 	bfc	r2, #3, #1
    12a4:	74c2      	strb	r2, [r0, #19]
	bank->STATUS_BK.reg     = 0;
    12a6:	4909      	ldr	r1, [pc, #36]	; (12cc <_usb_d_dev_handle_setup+0x78>)
    12a8:	015a      	lsls	r2, r3, #5
    12aa:	188c      	adds	r4, r1, r2
    12ac:	2500      	movs	r5, #0
    12ae:	72a5      	strb	r5, [r4, #10]
    12b0:	76a5      	strb	r5, [r4, #26]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    12b2:	f102 4382 	add.w	r3, r2, #1090519040	; 0x41000000
    12b6:	246f      	movs	r4, #111	; 0x6f
    12b8:	f883 4107 	strb.w	r4, [r3, #263]	; 0x107
}

static inline void hri_usbendpoint_clear_EPINTEN_reg(const void *const hw, uint8_t submodule_index,
                                                     hri_usbendpoint_epintenset_reg_t mask)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    12bc:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    12c0:	f882 4108 	strb.w	r4, [r2, #264]	; 0x108
	_usbd_ep_clear_bank_status(epn, 0);
	_usbd_ep_clear_bank_status(epn, 1);
	_usbd_ep_int_ack(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
	_usbd_ep_int_dis(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
	/* Invoke callback. */
	dev_inst.ep_callbacks.setup(ept->ep);
    12c4:	6e8b      	ldr	r3, [r1, #104]	; 0x68
    12c6:	7c80      	ldrb	r0, [r0, #18]
    12c8:	4798      	blx	r3
    12ca:	bd38      	pop	{r3, r4, r5, pc}
    12cc:	2000061c 	.word	0x2000061c

000012d0 <_usb_d_dev_handle_stall>:
 * \brief Handles stall sent interrupt
 * \param[in] ept Pointer to endpoint information.
 * \param[in] bank_n Bank number.
 */
static void _usb_d_dev_handle_stall(struct _usb_d_dev_ep *ept, const uint8_t bank_n)
{
    12d0:	b508      	push	{r3, lr}
		_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
    12d2:	2320      	movs	r3, #32
    12d4:	fa03 f101 	lsl.w	r1, r3, r1
	hri_usbendpoint_clear_EPINTEN_reg(USB, epn, flags);
    12d8:	b2c9      	uxtb	r1, r1
	uint8_t epn = USB_EP_GET_N(ept->ep);
    12da:	7c83      	ldrb	r3, [r0, #18]
    12dc:	f003 030f 	and.w	r3, r3, #15
    12e0:	015b      	lsls	r3, r3, #5
    12e2:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    12e6:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
	/* Clear interrupt enable. Leave status there for status check. */
	_usbd_ep_int_stall_en(epn, bank_n, false);
	dev_inst.ep_callbacks.done(ept->ep, USB_TRANS_STALL, ept->trans_count);
    12ea:	4b03      	ldr	r3, [pc, #12]	; (12f8 <_usb_d_dev_handle_stall+0x28>)
    12ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    12ee:	6882      	ldr	r2, [r0, #8]
    12f0:	2101      	movs	r1, #1
    12f2:	7c80      	ldrb	r0, [r0, #18]
    12f4:	4798      	blx	r3
    12f6:	bd08      	pop	{r3, pc}
    12f8:	2000061c 	.word	0x2000061c

000012fc <_usb_d_dev_trans_done>:
 *  \brief Finish the transaction and invoke callback
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_done(struct _usb_d_dev_ep *ept, const int32_t code)
{
    12fc:	b538      	push	{r3, r4, r5, lr}
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    12fe:	7c84      	ldrb	r4, [r0, #18]
    1300:	2cff      	cmp	r4, #255	; 0xff
    1302:	d003      	beq.n	130c <_usb_d_dev_trans_done+0x10>
    1304:	7cc3      	ldrb	r3, [r0, #19]
    1306:	f013 0f40 	tst.w	r3, #64	; 0x40
    130a:	d100      	bne.n	130e <_usb_d_dev_trans_done+0x12>
    130c:	bd38      	pop	{r3, r4, r5, pc}
		return;
	}
	ept->flags.bits.is_busy = 0;
    130e:	7cc2      	ldrb	r2, [r0, #19]
    1310:	f36f 1286 	bfc	r2, #6, #1
    1314:	74c2      	strb	r2, [r0, #19]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
    1316:	4a03      	ldr	r2, [pc, #12]	; (1324 <_usb_d_dev_trans_done+0x28>)
    1318:	6f15      	ldr	r5, [r2, #112]	; 0x70
    131a:	6882      	ldr	r2, [r0, #8]
    131c:	4620      	mov	r0, r4
    131e:	47a8      	blx	r5
    1320:	e7f4      	b.n	130c <_usb_d_dev_trans_done+0x10>
    1322:	bf00      	nop
    1324:	2000061c 	.word	0x2000061c

00001328 <_usb_d_dev_trans_stop>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_stop(struct _usb_d_dev_ep *ept, bool dir, const int32_t code)
{
    1328:	b530      	push	{r4, r5, lr}
    132a:	b083      	sub	sp, #12
	uint8_t epn = USB_EP_GET_N(ept->ep);
    132c:	7c83      	ldrb	r3, [r0, #18]
	;
	const uint8_t intflags[2] = {USB_D_BANK0_INT_FLAGS, USB_D_BANK1_INT_FLAGS};
    132e:	2425      	movs	r4, #37	; 0x25
    1330:	f88d 4004 	strb.w	r4, [sp, #4]
    1334:	244a      	movs	r4, #74	; 0x4a
    1336:	f88d 4005 	strb.w	r4, [sp, #5]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    133a:	2bff      	cmp	r3, #255	; 0xff
    133c:	d01e      	beq.n	137c <_usb_d_dev_trans_stop+0x54>
    133e:	7cc4      	ldrb	r4, [r0, #19]
    1340:	f014 0f40 	tst.w	r4, #64	; 0x40
    1344:	d01a      	beq.n	137c <_usb_d_dev_trans_stop+0x54>
	uint8_t epn = USB_EP_GET_N(ept->ep);
    1346:	f003 040f 	and.w	r4, r3, #15
		return;
	}
	/* Stop transfer */
	if (dir) {
    134a:	b1c9      	cbz	r1, 1380 <_usb_d_dev_trans_stop+0x58>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    134c:	0163      	lsls	r3, r4, #5
    134e:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    1352:	2580      	movs	r5, #128	; 0x80
    1354:	f883 5104 	strb.w	r5, [r3, #260]	; 0x104
    1358:	460b      	mov	r3, r1
		_usbd_ep_set_in_rdy(epn, 1, false);
	} else {
		/* NAK OUT */
		_usbd_ep_set_out_rdy(epn, 0, false);
	}
	_usbd_ep_int_ack(epn, intflags[dir]);
    135a:	a902      	add	r1, sp, #8
    135c:	440b      	add	r3, r1
    135e:	f813 1c04 	ldrb.w	r1, [r3, #-4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    1362:	0163      	lsls	r3, r4, #5
    1364:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    1368:	f883 1107 	strb.w	r1, [r3, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    136c:	0163      	lsls	r3, r4, #5
    136e:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    1372:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
	_usbd_ep_int_dis(epn, intflags[dir]);
	_usb_d_dev_trans_done(ept, code);
    1376:	4611      	mov	r1, r2
    1378:	4b05      	ldr	r3, [pc, #20]	; (1390 <_usb_d_dev_trans_stop+0x68>)
    137a:	4798      	blx	r3
}
    137c:	b003      	add	sp, #12
    137e:	bd30      	pop	{r4, r5, pc}
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    1380:	0163      	lsls	r3, r4, #5
    1382:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    1386:	2540      	movs	r5, #64	; 0x40
    1388:	f883 5105 	strb.w	r5, [r3, #261]	; 0x105
    138c:	e7e4      	b.n	1358 <_usb_d_dev_trans_stop+0x30>
    138e:	bf00      	nop
    1390:	000012fd 	.word	0x000012fd

00001394 <_usb_d_dev_handle_trfail>:
{
    1394:	b530      	push	{r4, r5, lr}
    1396:	b083      	sub	sp, #12
	uint8_t            epn     = USB_EP_GET_N(ept->ep);
    1398:	7c83      	ldrb	r3, [r0, #18]
    139a:	f003 030f 	and.w	r3, r3, #15
	const uint8_t      fail[2] = {USB_DEVICE_EPINTFLAG_TRFAIL0, USB_DEVICE_EPINTFLAG_TRFAIL1};
    139e:	2204      	movs	r2, #4
    13a0:	f88d 2004 	strb.w	r2, [sp, #4]
    13a4:	2208      	movs	r2, #8
    13a6:	f88d 2005 	strb.w	r2, [sp, #5]
    13aa:	015a      	lsls	r2, r3, #5
	uint8_t            eptype
    13ac:	460c      	mov	r4, r1
    13ae:	b391      	cbz	r1, 1416 <_usb_d_dev_handle_trfail+0x82>

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_EPTYPE1_bf(const void *const hw,
                                                                                uint8_t           submodule_index)
{
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    13b0:	f102 4182 	add.w	r1, r2, #1090519040	; 0x41000000
    13b4:	f891 5100 	ldrb.w	r5, [r1, #256]	; 0x100
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE1_Msk) >> USB_DEVICE_EPCFG_EPTYPE1_Pos;
    13b8:	f3c5 1502 	ubfx	r5, r5, #4, #3
	st.reg = bank[bank_n].STATUS_BK.reg;
    13bc:	eb02 1104 	add.w	r1, r2, r4, lsl #4
    13c0:	4a32      	ldr	r2, [pc, #200]	; (148c <_usb_d_dev_handle_trfail+0xf8>)
    13c2:	440a      	add	r2, r1
    13c4:	7a91      	ldrb	r1, [r2, #10]
    13c6:	b2c9      	uxtb	r1, r1
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
    13c8:	2d02      	cmp	r5, #2
    13ca:	d02c      	beq.n	1426 <_usb_d_dev_handle_trfail+0x92>
	} else if (st.bit.ERRORFLOW) {
    13cc:	f011 0f02 	tst.w	r1, #2
    13d0:	d045      	beq.n	145e <_usb_d_dev_handle_trfail+0xca>
	bool                      is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    13d2:	7cc5      	ldrb	r5, [r0, #19]
		bank[bank_n].STATUS_BK.bit.ERRORFLOW = 0;
    13d4:	7a91      	ldrb	r1, [r2, #10]
    13d6:	f36f 0141 	bfc	r1, #1, #1
    13da:	7291      	strb	r1, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    13dc:	aa02      	add	r2, sp, #8
    13de:	4422      	add	r2, r4
    13e0:	f812 1c04 	ldrb.w	r1, [r2, #-4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    13e4:	015a      	lsls	r2, r3, #5
    13e6:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    13ea:	f882 1107 	strb.w	r1, [r2, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    13ee:	015b      	lsls	r3, r3, #5
    13f0:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    13f4:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
		if (is_ctrl && _usb_d_dev_ep_is_busy(ept)) {
    13f8:	f005 0307 	and.w	r3, r5, #7
    13fc:	2b01      	cmp	r3, #1
    13fe:	d143      	bne.n	1488 <_usb_d_dev_handle_trfail+0xf4>
    1400:	7cc3      	ldrb	r3, [r0, #19]
    1402:	f013 0f40 	tst.w	r3, #64	; 0x40
    1406:	d03f      	beq.n	1488 <_usb_d_dev_handle_trfail+0xf4>
			if (bank_n != _usb_d_dev_ep_is_in(ept)) {
    1408:	09d9      	lsrs	r1, r3, #7
    140a:	428c      	cmp	r4, r1
    140c:	d03c      	beq.n	1488 <_usb_d_dev_handle_trfail+0xf4>
				_usb_d_dev_trans_stop(ept, _usb_d_dev_ep_is_in(ept), USB_TRANS_DONE);
    140e:	2200      	movs	r2, #0
    1410:	4b1f      	ldr	r3, [pc, #124]	; (1490 <_usb_d_dev_handle_trfail+0xfc>)
    1412:	4798      	blx	r3
    1414:	e038      	b.n	1488 <_usb_d_dev_handle_trfail+0xf4>
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    1416:	0159      	lsls	r1, r3, #5
    1418:	f101 4182 	add.w	r1, r1, #1090519040	; 0x41000000
    141c:	f891 5100 	ldrb.w	r5, [r1, #256]	; 0x100
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE0_Msk) >> USB_DEVICE_EPCFG_EPTYPE0_Pos;
    1420:	f005 0507 	and.w	r5, r5, #7
    1424:	e7ca      	b.n	13bc <_usb_d_dev_handle_trfail+0x28>
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
    1426:	f011 0f01 	tst.w	r1, #1
    142a:	d0cf      	beq.n	13cc <_usb_d_dev_handle_trfail+0x38>
		bank[bank_n].STATUS_BK.bit.CRCERR = 0;
    142c:	7a91      	ldrb	r1, [r2, #10]
    142e:	f36f 0100 	bfc	r1, #0, #1
    1432:	7291      	strb	r1, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    1434:	aa02      	add	r2, sp, #8
    1436:	4422      	add	r2, r4
    1438:	f812 1c04 	ldrb.w	r1, [r2, #-4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    143c:	015a      	lsls	r2, r3, #5
    143e:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    1442:	f882 1107 	strb.w	r1, [r2, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    1446:	015b      	lsls	r3, r3, #5
    1448:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    144c:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
		_usb_d_dev_trans_stop(ept, bank_n, USB_TRANS_ERROR);
    1450:	2204      	movs	r2, #4
    1452:	1c21      	adds	r1, r4, #0
    1454:	bf18      	it	ne
    1456:	2101      	movne	r1, #1
    1458:	4b0d      	ldr	r3, [pc, #52]	; (1490 <_usb_d_dev_handle_trfail+0xfc>)
    145a:	4798      	blx	r3
    145c:	e014      	b.n	1488 <_usb_d_dev_handle_trfail+0xf4>
	bank->STATUS_BK.reg     = 0;
    145e:	eb04 0143 	add.w	r1, r4, r3, lsl #1
    1462:	4a0a      	ldr	r2, [pc, #40]	; (148c <_usb_d_dev_handle_trfail+0xf8>)
    1464:	eb02 1201 	add.w	r2, r2, r1, lsl #4
    1468:	2100      	movs	r1, #0
    146a:	7291      	strb	r1, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    146c:	aa02      	add	r2, sp, #8
    146e:	4414      	add	r4, r2
    1470:	f814 1c04 	ldrb.w	r1, [r4, #-4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    1474:	015a      	lsls	r2, r3, #5
    1476:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    147a:	f882 1107 	strb.w	r1, [r2, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    147e:	015b      	lsls	r3, r3, #5
    1480:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    1484:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
}
    1488:	b003      	add	sp, #12
    148a:	bd30      	pop	{r4, r5, pc}
    148c:	2000061c 	.word	0x2000061c
    1490:	00001329 	.word	0x00001329

00001494 <_usb_d_dev_reset_epts>:
{
    1494:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1498:	4d0c      	ldr	r5, [pc, #48]	; (14cc <_usb_d_dev_reset_epts+0x38>)
    149a:	f105 0474 	add.w	r4, r5, #116	; 0x74
    149e:	f505 7594 	add.w	r5, r5, #296	; 0x128
		_usb_d_dev_trans_done(&dev_inst.ep[i], USB_TRANS_RESET);
    14a2:	f04f 0803 	mov.w	r8, #3
    14a6:	4f0a      	ldr	r7, [pc, #40]	; (14d0 <_usb_d_dev_reset_epts+0x3c>)
		dev_inst.ep[i].ep       = 0xFF;
    14a8:	26ff      	movs	r6, #255	; 0xff
		_usb_d_dev_trans_done(&dev_inst.ep[i], USB_TRANS_RESET);
    14aa:	4641      	mov	r1, r8
    14ac:	4620      	mov	r0, r4
    14ae:	47b8      	blx	r7
		dev_inst.ep[i].ep       = 0xFF;
    14b0:	74a6      	strb	r6, [r4, #18]
		dev_inst.ep[i].flags.u8 = 0;
    14b2:	2300      	movs	r3, #0
    14b4:	74e3      	strb	r3, [r4, #19]
    14b6:	3414      	adds	r4, #20
	for (i = 0; i < USB_D_N_EP; i++) {
    14b8:	42ac      	cmp	r4, r5
    14ba:	d1f6      	bne.n	14aa <_usb_d_dev_reset_epts+0x16>
	memset(prvt_inst.desc_table, 0, sizeof(UsbDeviceDescriptor) * (CONF_USB_D_MAX_EP_N + 1));
    14bc:	2260      	movs	r2, #96	; 0x60
    14be:	4619      	mov	r1, r3
    14c0:	4802      	ldr	r0, [pc, #8]	; (14cc <_usb_d_dev_reset_epts+0x38>)
    14c2:	4b04      	ldr	r3, [pc, #16]	; (14d4 <_usb_d_dev_reset_epts+0x40>)
    14c4:	4798      	blx	r3
    14c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    14ca:	bf00      	nop
    14cc:	2000061c 	.word	0x2000061c
    14d0:	000012fd 	.word	0x000012fd
    14d4:	00003df5 	.word	0x00003df5

000014d8 <_usb_d_dev_in_next>:
{
    14d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    14dc:	4605      	mov	r5, r0
	uint8_t            epn         = USB_EP_GET_N(ept->ep);
    14de:	7c84      	ldrb	r4, [r0, #18]
    14e0:	f004 040f 	and.w	r4, r4, #15
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
    14e4:	4688      	mov	r8, r1
    14e6:	2900      	cmp	r1, #0
    14e8:	f000 809f 	beq.w	162a <_usb_d_dev_in_next+0x152>
	UsbDeviceDescBank *bank        = &prvt_inst.desc_table[epn].DeviceDescBank[0];
    14ec:	4b58      	ldr	r3, [pc, #352]	; (1650 <_usb_d_dev_in_next+0x178>)
    14ee:	eb03 1344 	add.w	r3, r3, r4, lsl #5
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
    14f2:	6958      	ldr	r0, [r3, #20]
    14f4:	f3c0 0e0d 	ubfx	lr, r0, #0, #14
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    14f8:	8a2b      	ldrh	r3, [r5, #16]
    14fa:	f240 32ff 	movw	r2, #1023	; 0x3ff
    14fe:	4293      	cmp	r3, r2
    1500:	f000 808d 	beq.w	161e <_usb_d_dev_in_next+0x146>
    1504:	3b01      	subs	r3, #1
    1506:	b298      	uxth	r0, r3
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    1508:	7cef      	ldrb	r7, [r5, #19]
    150a:	f007 0707 	and.w	r7, r7, #7
	if (isr) {
    150e:	f1b8 0f00 	cmp.w	r8, #0
    1512:	d005      	beq.n	1520 <_usb_d_dev_in_next+0x48>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    1514:	0162      	lsls	r2, r4, #5
    1516:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    151a:	2302      	movs	r3, #2
    151c:	f882 3107 	strb.w	r3, [r2, #263]	; 0x107
	ept->trans_count += trans_count;
    1520:	68a9      	ldr	r1, [r5, #8]
    1522:	eb0e 0301 	add.w	r3, lr, r1
    1526:	60ab      	str	r3, [r5, #8]
	if (ept->trans_count < ept->trans_size) {
    1528:	686e      	ldr	r6, [r5, #4]
    152a:	42b3      	cmp	r3, r6
    152c:	d23f      	bcs.n	15ae <_usb_d_dev_in_next+0xd6>
		trans_next = ept->trans_size - ept->trans_count;
    152e:	1af6      	subs	r6, r6, r3
    1530:	b2b6      	uxth	r6, r6
		if (ept->flags.bits.use_cache) {
    1532:	7cea      	ldrb	r2, [r5, #19]
    1534:	f012 0f20 	tst.w	r2, #32
    1538:	d02d      	beq.n	1596 <_usb_d_dev_in_next+0xbe>
    153a:	8a2a      	ldrh	r2, [r5, #16]
    153c:	4296      	cmp	r6, r2
    153e:	bf28      	it	cs
    1540:	4616      	movcs	r6, r2
			memcpy(ept->cache, &ept->trans_buf[ept->trans_count], trans_next);
    1542:	6829      	ldr	r1, [r5, #0]
    1544:	4632      	mov	r2, r6
    1546:	4419      	add	r1, r3
    1548:	68e8      	ldr	r0, [r5, #12]
    154a:	4b42      	ldr	r3, [pc, #264]	; (1654 <_usb_d_dev_in_next+0x17c>)
    154c:	4798      	blx	r3
			_usbd_ep_set_buf(epn, 1, (uint32_t)ept->cache);
    154e:	68ea      	ldr	r2, [r5, #12]
	bank->ADDR.reg          = addr;
    1550:	4b3f      	ldr	r3, [pc, #252]	; (1650 <_usb_d_dev_in_next+0x178>)
    1552:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    1556:	611a      	str	r2, [r3, #16]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
    1558:	4b3d      	ldr	r3, [pc, #244]	; (1650 <_usb_d_dev_in_next+0x178>)
    155a:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    155e:	695a      	ldr	r2, [r3, #20]
    1560:	f366 020d 	bfi	r2, r6, #0, #14
    1564:	615a      	str	r2, [r3, #20]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
    1566:	695a      	ldr	r2, [r3, #20]
    1568:	f36f 329b 	bfc	r2, #14, #14
    156c:	615a      	str	r2, [r3, #20]
	if (!isr) {
    156e:	f1b8 0f00 	cmp.w	r8, #0
    1572:	d108      	bne.n	1586 <_usb_d_dev_in_next+0xae>
			inten = USB_D_BANK1_INT_FLAGS;
    1574:	2f01      	cmp	r7, #1
    1576:	bf0c      	ite	eq
    1578:	224e      	moveq	r2, #78	; 0x4e
    157a:	224a      	movne	r2, #74	; 0x4a
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    157c:	0163      	lsls	r3, r4, #5
    157e:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    1582:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    1586:	0164      	lsls	r4, r4, #5
    1588:	f104 4482 	add.w	r4, r4, #1090519040	; 0x41000000
    158c:	2380      	movs	r3, #128	; 0x80
    158e:	f884 3105 	strb.w	r3, [r4, #261]	; 0x105
    1592:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1596:	f5b6 5f00 	cmp.w	r6, #8192	; 0x2000
    159a:	bf28      	it	cs
    159c:	f44f 5600 	movcs.w	r6, #8192	; 0x2000
			_usbd_ep_set_buf(epn, 1, (uint32_t)&ept->trans_buf[ept->trans_count]);
    15a0:	6829      	ldr	r1, [r5, #0]
    15a2:	440b      	add	r3, r1
	bank->ADDR.reg          = addr;
    15a4:	4a2a      	ldr	r2, [pc, #168]	; (1650 <_usb_d_dev_in_next+0x178>)
    15a6:	eb02 1244 	add.w	r2, r2, r4, lsl #5
    15aa:	6113      	str	r3, [r2, #16]
    15ac:	e7d4      	b.n	1558 <_usb_d_dev_in_next+0x80>
	} else if (ept->flags.bits.need_zlp) {
    15ae:	7ceb      	ldrb	r3, [r5, #19]
    15b0:	f013 0f10 	tst.w	r3, #16
    15b4:	d00f      	beq.n	15d6 <_usb_d_dev_in_next+0xfe>
		ept->flags.bits.need_zlp = 0;
    15b6:	7ceb      	ldrb	r3, [r5, #19]
    15b8:	f36f 1304 	bfc	r3, #4, #1
    15bc:	74eb      	strb	r3, [r5, #19]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
    15be:	4b24      	ldr	r3, [pc, #144]	; (1650 <_usb_d_dev_in_next+0x178>)
    15c0:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    15c4:	695a      	ldr	r2, [r3, #20]
    15c6:	f36f 020d 	bfc	r2, #0, #14
    15ca:	615a      	str	r2, [r3, #20]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
    15cc:	695a      	ldr	r2, [r3, #20]
    15ce:	f36f 329b 	bfc	r2, #14, #14
    15d2:	615a      	str	r2, [r3, #20]
    15d4:	e7cb      	b.n	156e <_usb_d_dev_in_next+0x96>
	if (is_ctrl) {
    15d6:	2f01      	cmp	r7, #1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    15d8:	ea4f 1444 	mov.w	r4, r4, lsl #5
    15dc:	f104 4482 	add.w	r4, r4, #1090519040	; 0x41000000
    15e0:	bf0c      	ite	eq
    15e2:	234b      	moveq	r3, #75	; 0x4b
    15e4:	234a      	movne	r3, #74	; 0x4a
    15e6:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
	if (last_pkt == ept->size) {
    15ea:	8a2a      	ldrh	r2, [r5, #16]
    15ec:	ea00 030e 	and.w	r3, r0, lr
    15f0:	429a      	cmp	r2, r3
    15f2:	d005      	beq.n	1600 <_usb_d_dev_in_next+0x128>
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    15f4:	2100      	movs	r1, #0
    15f6:	4628      	mov	r0, r5
    15f8:	4b17      	ldr	r3, [pc, #92]	; (1658 <_usb_d_dev_in_next+0x180>)
    15fa:	4798      	blx	r3
	return;
    15fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ept->flags.bits.is_busy = 0;
    1600:	7ceb      	ldrb	r3, [r5, #19]
    1602:	f36f 1386 	bfc	r3, #6, #1
    1606:	74eb      	strb	r3, [r5, #19]
		if (dev_inst.ep_callbacks.more(ept->ep, ept->trans_count)) {
    1608:	4b11      	ldr	r3, [pc, #68]	; (1650 <_usb_d_dev_in_next+0x178>)
    160a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
    160c:	68a9      	ldr	r1, [r5, #8]
    160e:	7ca8      	ldrb	r0, [r5, #18]
    1610:	4798      	blx	r3
    1612:	b9d0      	cbnz	r0, 164a <_usb_d_dev_in_next+0x172>
		ept->flags.bits.is_busy = 1;
    1614:	7ceb      	ldrb	r3, [r5, #19]
    1616:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    161a:	74eb      	strb	r3, [r5, #19]
    161c:	e7ea      	b.n	15f4 <_usb_d_dev_in_next+0x11c>
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    161e:	7cef      	ldrb	r7, [r5, #19]
    1620:	f007 0707 	and.w	r7, r7, #7
    1624:	f240 30ff 	movw	r0, #1023	; 0x3ff
    1628:	e774      	b.n	1514 <_usb_d_dev_in_next+0x3c>
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    162a:	8a03      	ldrh	r3, [r0, #16]
    162c:	f240 32ff 	movw	r2, #1023	; 0x3ff
    1630:	4293      	cmp	r3, r2
    1632:	d107      	bne.n	1644 <_usb_d_dev_in_next+0x16c>
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    1634:	7cef      	ldrb	r7, [r5, #19]
    1636:	f007 0707 	and.w	r7, r7, #7
    163a:	f04f 0e00 	mov.w	lr, #0
    163e:	f240 30ff 	movw	r0, #1023	; 0x3ff
    1642:	e76d      	b.n	1520 <_usb_d_dev_in_next+0x48>
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    1644:	f04f 0e00 	mov.w	lr, #0
    1648:	e75c      	b.n	1504 <_usb_d_dev_in_next+0x2c>
    164a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    164e:	bf00      	nop
    1650:	2000061c 	.word	0x2000061c
    1654:	00003cc1 	.word	0x00003cc1
    1658:	000012fd 	.word	0x000012fd

0000165c <_usb_d_dev_out_next>:
{
    165c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1660:	4604      	mov	r4, r0
	uint8_t            epn        = USB_EP_GET_N(ept->ep);
    1662:	7c85      	ldrb	r5, [r0, #18]
    1664:	f005 050f 	and.w	r5, r5, #15
	uint16_t           trans_size = isr ? bank->PCKSIZE.bit.MULTI_PACKET_SIZE : 0;
    1668:	4689      	mov	r9, r1
    166a:	2900      	cmp	r1, #0
    166c:	d056      	beq.n	171c <_usb_d_dev_out_next+0xc0>
    166e:	4b74      	ldr	r3, [pc, #464]	; (1840 <_usb_d_dev_out_next+0x1e4>)
    1670:	eb03 1345 	add.w	r3, r3, r5, lsl #5
    1674:	685a      	ldr	r2, [r3, #4]
    1676:	f3c2 3a8d 	ubfx	sl, r2, #14, #14
	uint16_t           last_trans = isr ? bank->PCKSIZE.bit.BYTE_COUNT : 0;
    167a:	685f      	ldr	r7, [r3, #4]
    167c:	f3c7 070d 	ubfx	r7, r7, #0, #14
    1680:	46bb      	mov	fp, r7
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
    1682:	8a06      	ldrh	r6, [r0, #16]
    1684:	f240 33ff 	movw	r3, #1023	; 0x3ff
    1688:	429e      	cmp	r6, r3
    168a:	f000 80ba 	beq.w	1802 <_usb_d_dev_out_next+0x1a6>
    168e:	3e01      	subs	r6, #1
    1690:	b2b6      	uxth	r6, r6
	uint16_t           last_pkt   = last_trans & size_mask;
    1692:	ea06 070b 	and.w	r7, r6, fp
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    1696:	f894 8013 	ldrb.w	r8, [r4, #19]
    169a:	f008 0807 	and.w	r8, r8, #7
	if (isr) {
    169e:	f1b9 0f00 	cmp.w	r9, #0
    16a2:	d005      	beq.n	16b0 <_usb_d_dev_out_next+0x54>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    16a4:	016b      	lsls	r3, r5, #5
    16a6:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    16aa:	2201      	movs	r2, #1
    16ac:	f883 2107 	strb.w	r2, [r3, #263]	; 0x107
	if (ept->flags.bits.use_cache && ept->trans_size) {
    16b0:	7ce3      	ldrb	r3, [r4, #19]
    16b2:	f013 0f20 	tst.w	r3, #32
    16b6:	d00d      	beq.n	16d4 <_usb_d_dev_out_next+0x78>
    16b8:	6862      	ldr	r2, [r4, #4]
    16ba:	2a00      	cmp	r2, #0
    16bc:	d037      	beq.n	172e <_usb_d_dev_out_next+0xd2>
		uint16_t buf_remain = ept->trans_size - ept->trans_count;
    16be:	68a0      	ldr	r0, [r4, #8]
    16c0:	1a12      	subs	r2, r2, r0
    16c2:	b292      	uxth	r2, r2
		memcpy(&ept->trans_buf[ept->trans_count], ept->cache, (buf_remain > last_pkt) ? last_pkt : buf_remain);
    16c4:	6823      	ldr	r3, [r4, #0]
    16c6:	42ba      	cmp	r2, r7
    16c8:	bf28      	it	cs
    16ca:	463a      	movcs	r2, r7
    16cc:	68e1      	ldr	r1, [r4, #12]
    16ce:	4418      	add	r0, r3
    16d0:	4b5c      	ldr	r3, [pc, #368]	; (1844 <_usb_d_dev_out_next+0x1e8>)
    16d2:	4798      	blx	r3
	if (ept->trans_size == 0 && ept->flags.bits.need_zlp) {
    16d4:	6863      	ldr	r3, [r4, #4]
    16d6:	b353      	cbz	r3, 172e <_usb_d_dev_out_next+0xd2>
	} else if (isr && last_pkt < ept->size) {
    16d8:	f1b9 0f00 	cmp.w	r9, #0
    16dc:	d040      	beq.n	1760 <_usb_d_dev_out_next+0x104>
    16de:	8a22      	ldrh	r2, [r4, #16]
    16e0:	42ba      	cmp	r2, r7
    16e2:	d93d      	bls.n	1760 <_usb_d_dev_out_next+0x104>
		ept->flags.bits.need_zlp = 0;
    16e4:	7ce3      	ldrb	r3, [r4, #19]
    16e6:	f36f 1304 	bfc	r3, #4, #1
    16ea:	74e3      	strb	r3, [r4, #19]
		ept->trans_count += last_trans;
    16ec:	68a3      	ldr	r3, [r4, #8]
    16ee:	445b      	add	r3, fp
    16f0:	60a3      	str	r3, [r4, #8]
	if (is_ctrl) {
    16f2:	f1b8 0f01 	cmp.w	r8, #1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    16f6:	ea4f 1345 	mov.w	r3, r5, lsl #5
    16fa:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    16fe:	bf0c      	ite	eq
    1700:	222d      	moveq	r2, #45	; 0x2d
    1702:	2225      	movne	r2, #37	; 0x25
    1704:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
	if (0 == epn) {
    1708:	b915      	cbnz	r5, 1710 <_usb_d_dev_out_next+0xb4>
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    170a:	68e2      	ldr	r2, [r4, #12]
	bank->ADDR.reg          = addr;
    170c:	4b4c      	ldr	r3, [pc, #304]	; (1840 <_usb_d_dev_out_next+0x1e4>)
    170e:	601a      	str	r2, [r3, #0]
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    1710:	2100      	movs	r1, #0
    1712:	4620      	mov	r0, r4
    1714:	4b4c      	ldr	r3, [pc, #304]	; (1848 <_usb_d_dev_out_next+0x1ec>)
    1716:	4798      	blx	r3
	return;
    1718:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
    171c:	8a06      	ldrh	r6, [r0, #16]
    171e:	f240 33ff 	movw	r3, #1023	; 0x3ff
    1722:	429e      	cmp	r6, r3
    1724:	d07b      	beq.n	181e <_usb_d_dev_out_next+0x1c2>
    1726:	f04f 0b00 	mov.w	fp, #0
    172a:	46da      	mov	sl, fp
    172c:	e7af      	b.n	168e <_usb_d_dev_out_next+0x32>
	if (ept->trans_size == 0 && ept->flags.bits.need_zlp) {
    172e:	7ce3      	ldrb	r3, [r4, #19]
    1730:	f013 0f10 	tst.w	r3, #16
    1734:	d06c      	beq.n	1810 <_usb_d_dev_out_next+0x1b4>
		ept->flags.bits.need_zlp  = 0;
    1736:	7ce3      	ldrb	r3, [r4, #19]
		ept->flags.bits.use_cache = 1;
    1738:	f003 03ef 	and.w	r3, r3, #239	; 0xef
    173c:	f043 0320 	orr.w	r3, r3, #32
    1740:	74e3      	strb	r3, [r4, #19]
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    1742:	68e0      	ldr	r0, [r4, #12]
	bank->ADDR.reg          = addr;
    1744:	493e      	ldr	r1, [pc, #248]	; (1840 <_usb_d_dev_out_next+0x1e4>)
    1746:	016a      	lsls	r2, r5, #5
    1748:	188b      	adds	r3, r1, r2
    174a:	5088      	str	r0, [r1, r2]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    174c:	8a21      	ldrh	r1, [r4, #16]
    174e:	685a      	ldr	r2, [r3, #4]
    1750:	f361 329b 	bfi	r2, r1, #14, #14
    1754:	605a      	str	r2, [r3, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    1756:	685a      	ldr	r2, [r3, #4]
    1758:	f36f 020d 	bfc	r2, #0, #14
    175c:	605a      	str	r2, [r3, #4]
    175e:	e01d      	b.n	179c <_usb_d_dev_out_next+0x140>
		ept->trans_count += trans_size;
    1760:	68a2      	ldr	r2, [r4, #8]
    1762:	4452      	add	r2, sl
    1764:	60a2      	str	r2, [r4, #8]
		if (ept->trans_count < ept->trans_size) {
    1766:	4293      	cmp	r3, r2
    1768:	d9c3      	bls.n	16f2 <_usb_d_dev_out_next+0x96>
			trans_next = ept->trans_size - ept->trans_count;
    176a:	1a9b      	subs	r3, r3, r2
    176c:	b29b      	uxth	r3, r3
			if (ept->flags.bits.use_cache) {
    176e:	7ce1      	ldrb	r1, [r4, #19]
    1770:	f011 0f20 	tst.w	r1, #32
    1774:	d026      	beq.n	17c4 <_usb_d_dev_out_next+0x168>
    1776:	8a22      	ldrh	r2, [r4, #16]
    1778:	4293      	cmp	r3, r2
    177a:	bf28      	it	cs
    177c:	4613      	movcs	r3, r2
				_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    177e:	68e0      	ldr	r0, [r4, #12]
	bank->ADDR.reg          = addr;
    1780:	016a      	lsls	r2, r5, #5
    1782:	492f      	ldr	r1, [pc, #188]	; (1840 <_usb_d_dev_out_next+0x1e4>)
    1784:	5088      	str	r0, [r1, r2]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    1786:	4a2e      	ldr	r2, [pc, #184]	; (1840 <_usb_d_dev_out_next+0x1e4>)
    1788:	eb02 1245 	add.w	r2, r2, r5, lsl #5
    178c:	6851      	ldr	r1, [r2, #4]
    178e:	f363 319b 	bfi	r1, r3, #14, #14
    1792:	6051      	str	r1, [r2, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    1794:	6853      	ldr	r3, [r2, #4]
    1796:	f36f 030d 	bfc	r3, #0, #14
    179a:	6053      	str	r3, [r2, #4]
	if (!isr) {
    179c:	f1b9 0f00 	cmp.w	r9, #0
    17a0:	d108      	bne.n	17b4 <_usb_d_dev_out_next+0x158>
		if (is_ctrl) {
    17a2:	f1b8 0f01 	cmp.w	r8, #1
    17a6:	d025      	beq.n	17f4 <_usb_d_dev_out_next+0x198>
			inten = USB_D_BANK0_INT_FLAGS;
    17a8:	2225      	movs	r2, #37	; 0x25
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    17aa:	016b      	lsls	r3, r5, #5
    17ac:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    17b0:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    17b4:	016d      	lsls	r5, r5, #5
    17b6:	f105 4582 	add.w	r5, r5, #1090519040	; 0x41000000
    17ba:	2340      	movs	r3, #64	; 0x40
    17bc:	f885 3104 	strb.w	r3, [r5, #260]	; 0x104
    17c0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if (trans_next > ept->size) {
    17c4:	8a21      	ldrh	r1, [r4, #16]
    17c6:	428b      	cmp	r3, r1
    17c8:	d90a      	bls.n	17e0 <_usb_d_dev_out_next+0x184>
					if (trans_next > USB_D_DEV_TRANS_MAX) {
    17ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
    17ce:	d80e      	bhi.n	17ee <_usb_d_dev_out_next+0x192>
    17d0:	ea23 0306 	bic.w	r3, r3, r6
				_usbd_ep_set_buf(epn, 0, (uint32_t)&ept->trans_buf[ept->trans_count]);
    17d4:	6821      	ldr	r1, [r4, #0]
    17d6:	440a      	add	r2, r1
	bank->ADDR.reg          = addr;
    17d8:	0169      	lsls	r1, r5, #5
    17da:	4819      	ldr	r0, [pc, #100]	; (1840 <_usb_d_dev_out_next+0x1e4>)
    17dc:	5042      	str	r2, [r0, r1]
    17de:	e7d2      	b.n	1786 <_usb_d_dev_out_next+0x12a>
				} else if (trans_next < ept->size) {
    17e0:	428b      	cmp	r3, r1
    17e2:	d2f7      	bcs.n	17d4 <_usb_d_dev_out_next+0x178>
					ept->flags.bits.use_cache = 1;
    17e4:	7ce1      	ldrb	r1, [r4, #19]
    17e6:	f041 0120 	orr.w	r1, r1, #32
    17ea:	74e1      	strb	r1, [r4, #19]
    17ec:	e7f2      	b.n	17d4 <_usb_d_dev_out_next+0x178>
						trans_next = USB_D_DEV_TRANS_MAX;
    17ee:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    17f2:	e7ef      	b.n	17d4 <_usb_d_dev_out_next+0x178>
	bank->STATUS_BK.reg     = 0;
    17f4:	4b12      	ldr	r3, [pc, #72]	; (1840 <_usb_d_dev_out_next+0x1e4>)
    17f6:	eb03 1345 	add.w	r3, r3, r5, lsl #5
    17fa:	2200      	movs	r2, #0
    17fc:	769a      	strb	r2, [r3, #26]
			inten = USB_D_BANK0_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL1;
    17fe:	222d      	movs	r2, #45	; 0x2d
    1800:	e7d3      	b.n	17aa <_usb_d_dev_out_next+0x14e>
	uint16_t           last_pkt   = last_trans & size_mask;
    1802:	f3c7 0709 	ubfx	r7, r7, #0, #10
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    1806:	f890 8013 	ldrb.w	r8, [r0, #19]
    180a:	f008 0807 	and.w	r8, r8, #7
    180e:	e749      	b.n	16a4 <_usb_d_dev_out_next+0x48>
	} else if (isr && last_pkt < ept->size) {
    1810:	f1b9 0f00 	cmp.w	r9, #0
    1814:	d10b      	bne.n	182e <_usb_d_dev_out_next+0x1d2>
		ept->trans_count += trans_size;
    1816:	68a3      	ldr	r3, [r4, #8]
    1818:	4453      	add	r3, sl
    181a:	60a3      	str	r3, [r4, #8]
    181c:	e769      	b.n	16f2 <_usb_d_dev_out_next+0x96>
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    181e:	f890 8013 	ldrb.w	r8, [r0, #19]
    1822:	f008 0807 	and.w	r8, r8, #7
	uint16_t           last_pkt   = last_trans & size_mask;
    1826:	2700      	movs	r7, #0
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    1828:	46bb      	mov	fp, r7
    182a:	46ba      	mov	sl, r7
    182c:	e740      	b.n	16b0 <_usb_d_dev_out_next+0x54>
	} else if (isr && last_pkt < ept->size) {
    182e:	8a23      	ldrh	r3, [r4, #16]
    1830:	42bb      	cmp	r3, r7
    1832:	f63f af57 	bhi.w	16e4 <_usb_d_dev_out_next+0x88>
		ept->trans_count += trans_size;
    1836:	68a3      	ldr	r3, [r4, #8]
    1838:	4453      	add	r3, sl
    183a:	60a3      	str	r3, [r4, #8]
    183c:	e759      	b.n	16f2 <_usb_d_dev_out_next+0x96>
    183e:	bf00      	nop
    1840:	2000061c 	.word	0x2000061c
    1844:	00003cc1 	.word	0x00003cc1
    1848:	000012fd 	.word	0x000012fd

0000184c <_usb_d_dev_handler>:
{
    184c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	uint16_t epint = hw->DEVICE.EPINTSMRY.reg;
    1850:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    1854:	8c1e      	ldrh	r6, [r3, #32]
    1856:	b2b6      	uxth	r6, r6
	if (0 == epint) {
    1858:	b146      	cbz	r6, 186c <_usb_d_dev_handler+0x20>
    185a:	4d91      	ldr	r5, [pc, #580]	; (1aa0 <_usb_d_dev_handler+0x254>)
	uint32_t lpm_variable = 0;
    185c:	2400      	movs	r4, #0
		if ((ept->flags.bits.eptype == 0x1) && !_usb_d_dev_ep_is_busy(ept)) {
    185e:	f1a5 0774 	sub.w	r7, r5, #116	; 0x74
			_usb_d_dev_handle_setup(ept);
    1862:	f8df 9258 	ldr.w	r9, [pc, #600]	; 1abc <_usb_d_dev_handler+0x270>
			_usb_d_dev_handle_trfail(ept, 1);
    1866:	f8df 8258 	ldr.w	r8, [pc, #600]	; 1ac0 <_usb_d_dev_handler+0x274>
    186a:	e0d3      	b.n	1a14 <_usb_d_dev_handler+0x1c8>
	return tmp;
}

static inline hri_usbdevice_intflag_reg_t hri_usbdevice_read_INTFLAG_reg(const void *const hw)
{
	return ((Usb *)hw)->DEVICE.INTFLAG.reg;
    186c:	8b99      	ldrh	r1, [r3, #28]
	return tmp;
}

static inline hri_usbdevice_intenset_reg_t hri_usbdevice_read_INTEN_reg(const void *const hw)
{
	return ((Usb *)hw)->DEVICE.INTENSET.reg;
    186e:	8b1b      	ldrh	r3, [r3, #24]
    1870:	b29b      	uxth	r3, r3
	flags &= hri_usbdevice_read_INTEN_reg(USB);
    1872:	400b      	ands	r3, r1
	if (flags & USB_DEVICE_INTFLAG_SOF) {
    1874:	f013 0f04 	tst.w	r3, #4
    1878:	d11d      	bne.n	18b6 <_usb_d_dev_handler+0x6a>
	if (flags & USB_DEVICE_INTFLAG_LPMSUSP) {
    187a:	f413 7f00 	tst.w	r3, #512	; 0x200
    187e:	d123      	bne.n	18c8 <_usb_d_dev_handler+0x7c>
	} else if (flags & USB_DEVICE_INTFLAG_RAMACER) {
    1880:	f013 0f80 	tst.w	r3, #128	; 0x80
    1884:	d147      	bne.n	1916 <_usb_d_dev_handler+0xca>
	} else if (flags & USB_D_WAKEUP_INT_FLAGS) {
    1886:	f013 0f70 	tst.w	r3, #112	; 0x70
    188a:	d14f      	bne.n	192c <_usb_d_dev_handler+0xe0>
	} else if (flags & USB_DEVICE_INTFLAG_EORST) {
    188c:	f013 0f08 	tst.w	r3, #8
    1890:	d16e      	bne.n	1970 <_usb_d_dev_handler+0x124>
	} else if (flags & USB_DEVICE_INTFLAG_SUSPEND) {
    1892:	f013 0f01 	tst.w	r3, #1
    1896:	d0e0      	beq.n	185a <_usb_d_dev_handler+0xe>
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    1898:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    189c:	f240 2201 	movw	r2, #513	; 0x201
    18a0:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = ~data;
}

static inline void hri_usbdevice_clear_INTEN_reg(const void *const hw, hri_usbdevice_intenset_reg_t mask)
{
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    18a2:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    18a4:	2270      	movs	r2, #112	; 0x70
    18a6:	831a      	strh	r2, [r3, #24]
	dev_inst.callbacks.event(USB_EV_SUSPEND, 0);
    18a8:	4b7e      	ldr	r3, [pc, #504]	; (1aa4 <_usb_d_dev_handler+0x258>)
    18aa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    18ac:	2100      	movs	r1, #0
    18ae:	2004      	movs	r0, #4
    18b0:	4798      	blx	r3
    18b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    18b6:	2204      	movs	r2, #4
    18b8:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    18bc:	839a      	strh	r2, [r3, #28]
	dev_inst.callbacks.sof();
    18be:	4b79      	ldr	r3, [pc, #484]	; (1aa4 <_usb_d_dev_handler+0x258>)
    18c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    18c2:	4798      	blx	r3
    18c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    18c8:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    18cc:	f240 2201 	movw	r2, #513	; 0x201
    18d0:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    18d2:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    18d4:	2270      	movs	r2, #112	; 0x70
    18d6:	831a      	strh	r2, [r3, #24]
		if (bank->EXTREG.bit.SUBPID == 0x3) {
    18d8:	4b72      	ldr	r3, [pc, #456]	; (1aa4 <_usb_d_dev_handler+0x258>)
    18da:	891b      	ldrh	r3, [r3, #8]
    18dc:	f003 030f 	and.w	r3, r3, #15
    18e0:	2b03      	cmp	r3, #3
    18e2:	d00e      	beq.n	1902 <_usb_d_dev_handler+0xb6>
    18e4:	4b6f      	ldr	r3, [pc, #444]	; (1aa4 <_usb_d_dev_handler+0x258>)
    18e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    18e8:	f003 030f 	and.w	r3, r3, #15
    18ec:	2b03      	cmp	r3, #3
		UsbDeviceDescBank *bank = &prvt_inst.desc_table[i].DeviceDescBank[0];
    18ee:	bf08      	it	eq
    18f0:	2201      	moveq	r2, #1
		if (bank->EXTREG.bit.SUBPID == 0x3) {
    18f2:	d007      	beq.n	1904 <_usb_d_dev_handler+0xb8>
	uint32_t lpm_variable = 0;
    18f4:	2100      	movs	r1, #0
	dev_inst.callbacks.event(USB_EV_LPM_SUSPEND, lpm_variable);
    18f6:	4b6b      	ldr	r3, [pc, #428]	; (1aa4 <_usb_d_dev_handler+0x258>)
    18f8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    18fa:	2003      	movs	r0, #3
    18fc:	4798      	blx	r3
    18fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		UsbDeviceDescBank *bank = &prvt_inst.desc_table[i].DeviceDescBank[0];
    1902:	2200      	movs	r2, #0
			lpm_variable = bank->EXTREG.bit.VARIABLE;
    1904:	4b67      	ldr	r3, [pc, #412]	; (1aa4 <_usb_d_dev_handler+0x258>)
    1906:	eb03 1342 	add.w	r3, r3, r2, lsl #5
    190a:	8919      	ldrh	r1, [r3, #8]
    190c:	f3c1 110a 	ubfx	r1, r1, #4, #11
			bank->EXTREG.reg = 0;
    1910:	2200      	movs	r2, #0
    1912:	811a      	strh	r2, [r3, #8]
    1914:	e7ef      	b.n	18f6 <_usb_d_dev_handler+0xaa>
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    1916:	2280      	movs	r2, #128	; 0x80
    1918:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    191c:	839a      	strh	r2, [r3, #28]
	dev_inst.callbacks.event(USB_EV_ERROR, 0);
    191e:	4b61      	ldr	r3, [pc, #388]	; (1aa4 <_usb_d_dev_handler+0x258>)
    1920:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    1922:	2100      	movs	r1, #0
    1924:	2005      	movs	r0, #5
    1926:	4798      	blx	r3
    1928:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    192c:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    1930:	2270      	movs	r2, #112	; 0x70
    1932:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    1934:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    1936:	f240 2201 	movw	r2, #513	; 0x201
    193a:	831a      	strh	r2, [r3, #24]
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
    193c:	4b5a      	ldr	r3, [pc, #360]	; (1aa8 <_usb_d_dev_handler+0x25c>)
    193e:	f893 3020 	ldrb.w	r3, [r3, #32]
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(OSCCTRL)) {
    1942:	f013 0f01 	tst.w	r3, #1
    1946:	d00d      	beq.n	1964 <_usb_d_dev_handler+0x118>
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    1948:	4a57      	ldr	r2, [pc, #348]	; (1aa8 <_usb_d_dev_handler+0x25c>)
    194a:	6913      	ldr	r3, [r2, #16]
	tmp &= mask;
    194c:	f403 6310 	and.w	r3, r3, #2304	; 0x900
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, (OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC))
    1950:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
    1954:	d1f9      	bne.n	194a <_usb_d_dev_handler+0xfe>
	dev_inst.callbacks.event(USB_EV_WAKEUP, 0);
    1956:	4b53      	ldr	r3, [pc, #332]	; (1aa4 <_usb_d_dev_handler+0x258>)
    1958:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    195a:	2100      	movs	r1, #0
    195c:	2002      	movs	r0, #2
    195e:	4798      	blx	r3
    1960:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    1964:	4a50      	ldr	r2, [pc, #320]	; (1aa8 <_usb_d_dev_handler+0x25c>)
    1966:	6913      	ldr	r3, [r2, #16]
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, OSCCTRL_STATUS_DFLLRDY) != OSCCTRL_STATUS_DFLLRDY)
    1968:	f413 7f80 	tst.w	r3, #256	; 0x100
    196c:	d0fb      	beq.n	1966 <_usb_d_dev_handler+0x11a>
    196e:	e7f2      	b.n	1956 <_usb_d_dev_handler+0x10a>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    1970:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    1974:	2400      	movs	r4, #0
    1976:	f883 4100 	strb.w	r4, [r3, #256]	; 0x100
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    197a:	2208      	movs	r2, #8
    197c:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    197e:	2270      	movs	r2, #112	; 0x70
    1980:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    1982:	f240 2201 	movw	r2, #513	; 0x201
    1986:	831a      	strh	r2, [r3, #24]
	_usb_d_dev_reset_epts();
    1988:	4b48      	ldr	r3, [pc, #288]	; (1aac <_usb_d_dev_handler+0x260>)
    198a:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_RESET, 0);
    198c:	4b45      	ldr	r3, [pc, #276]	; (1aa4 <_usb_d_dev_handler+0x258>)
    198e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    1990:	4621      	mov	r1, r4
    1992:	2001      	movs	r0, #1
    1994:	4798      	blx	r3
    1996:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    199a:	f011 0f10 	tst.w	r1, #16
    199e:	d109      	bne.n	19b4 <_usb_d_dev_handler+0x168>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    19a0:	f011 0f40 	tst.w	r1, #64	; 0x40
    19a4:	d108      	bne.n	19b8 <_usb_d_dev_handler+0x16c>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    19a6:	f011 0f20 	tst.w	r1, #32
    19aa:	d02f      	beq.n	1a0c <_usb_d_dev_handler+0x1c0>
		_usb_d_dev_handle_stall(ept, 0);
    19ac:	2100      	movs	r1, #0
    19ae:	4b40      	ldr	r3, [pc, #256]	; (1ab0 <_usb_d_dev_handler+0x264>)
    19b0:	4798      	blx	r3
    19b2:	e02b      	b.n	1a0c <_usb_d_dev_handler+0x1c0>
		_usb_d_dev_handle_setup(ept);
    19b4:	47c8      	blx	r9
    19b6:	e029      	b.n	1a0c <_usb_d_dev_handler+0x1c0>
		_usb_d_dev_handle_stall(ept, 1);
    19b8:	2101      	movs	r1, #1
    19ba:	4b3d      	ldr	r3, [pc, #244]	; (1ab0 <_usb_d_dev_handler+0x264>)
    19bc:	4798      	blx	r3
    19be:	e025      	b.n	1a0c <_usb_d_dev_handler+0x1c0>
	if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    19c0:	f011 0f40 	tst.w	r1, #64	; 0x40
    19c4:	d111      	bne.n	19ea <_usb_d_dev_handler+0x19e>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    19c6:	f011 0f08 	tst.w	r1, #8
    19ca:	d112      	bne.n	19f2 <_usb_d_dev_handler+0x1a6>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT1) {
    19cc:	f011 0f02 	tst.w	r1, #2
    19d0:	d112      	bne.n	19f8 <_usb_d_dev_handler+0x1ac>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    19d2:	f003 0307 	and.w	r3, r3, #7
    19d6:	2b01      	cmp	r3, #1
    19d8:	d118      	bne.n	1a0c <_usb_d_dev_handler+0x1c0>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    19da:	f011 0f04 	tst.w	r1, #4
    19de:	d10f      	bne.n	1a00 <_usb_d_dev_handler+0x1b4>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    19e0:	f011 0f10 	tst.w	r1, #16
    19e4:	d012      	beq.n	1a0c <_usb_d_dev_handler+0x1c0>
			_usb_d_dev_handle_setup(ept);
    19e6:	47c8      	blx	r9
    19e8:	e010      	b.n	1a0c <_usb_d_dev_handler+0x1c0>
		_usb_d_dev_handle_stall(ept, 1);
    19ea:	2101      	movs	r1, #1
    19ec:	4b30      	ldr	r3, [pc, #192]	; (1ab0 <_usb_d_dev_handler+0x264>)
    19ee:	4798      	blx	r3
    19f0:	e00c      	b.n	1a0c <_usb_d_dev_handler+0x1c0>
		_usb_d_dev_handle_trfail(ept, 1);
    19f2:	2101      	movs	r1, #1
    19f4:	47c0      	blx	r8
    19f6:	e009      	b.n	1a0c <_usb_d_dev_handler+0x1c0>
		_usb_d_dev_in_next(ept, true);
    19f8:	2101      	movs	r1, #1
    19fa:	4b2e      	ldr	r3, [pc, #184]	; (1ab4 <_usb_d_dev_handler+0x268>)
    19fc:	4798      	blx	r3
    19fe:	e005      	b.n	1a0c <_usb_d_dev_handler+0x1c0>
			_usb_d_dev_handle_trfail(ept, 0);
    1a00:	2100      	movs	r1, #0
    1a02:	47c0      	blx	r8
    1a04:	e002      	b.n	1a0c <_usb_d_dev_handler+0x1c0>
		_usb_d_dev_handle_stall(ept, 0);
    1a06:	2100      	movs	r1, #0
    1a08:	4b29      	ldr	r3, [pc, #164]	; (1ab0 <_usb_d_dev_handler+0x264>)
    1a0a:	4798      	blx	r3
    1a0c:	3401      	adds	r4, #1
    1a0e:	3514      	adds	r5, #20
	for (i = 0; i < USB_D_N_EP; i++) {
    1a10:	2c09      	cmp	r4, #9
    1a12:	d042      	beq.n	1a9a <_usb_d_dev_handler+0x24e>
    1a14:	4628      	mov	r0, r5
		if (ept->ep == 0xFF) {
    1a16:	7cab      	ldrb	r3, [r5, #18]
    1a18:	2bff      	cmp	r3, #255	; 0xff
    1a1a:	d0f7      	beq.n	1a0c <_usb_d_dev_handler+0x1c0>
	if (!(epint & (1u << epn))) {
    1a1c:	f003 030f 	and.w	r3, r3, #15
    1a20:	2101      	movs	r1, #1
    1a22:	4099      	lsls	r1, r3
    1a24:	4231      	tst	r1, r6
    1a26:	d0f1      	beq.n	1a0c <_usb_d_dev_handler+0x1c0>
	flags = hw->DEVICE.DeviceEndpoint[epn].EPINTFLAG.reg;
    1a28:	0159      	lsls	r1, r3, #5
    1a2a:	f101 4182 	add.w	r1, r1, #1090519040	; 0x41000000
    1a2e:	f501 7180 	add.w	r1, r1, #256	; 0x100
    1a32:	79c9      	ldrb	r1, [r1, #7]
	mask  = hw->DEVICE.DeviceEndpoint[epn].EPINTENSET.reg;
    1a34:	015b      	lsls	r3, r3, #5
    1a36:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    1a3a:	f893 3109 	ldrb.w	r3, [r3, #265]	; 0x109
	if (flags) {
    1a3e:	4019      	ands	r1, r3
    1a40:	d0e4      	beq.n	1a0c <_usb_d_dev_handler+0x1c0>
		if ((ept->flags.bits.eptype == 0x1) && !_usb_d_dev_ep_is_busy(ept)) {
    1a42:	eb04 0284 	add.w	r2, r4, r4, lsl #2
    1a46:	eb07 0282 	add.w	r2, r7, r2, lsl #2
    1a4a:	f892 3087 	ldrb.w	r3, [r2, #135]	; 0x87
    1a4e:	f003 0247 	and.w	r2, r3, #71	; 0x47
    1a52:	2a01      	cmp	r2, #1
    1a54:	d0a1      	beq.n	199a <_usb_d_dev_handler+0x14e>
		} else if (_usb_d_dev_ep_is_in(ept)) {
    1a56:	f013 0f80 	tst.w	r3, #128	; 0x80
    1a5a:	d1b1      	bne.n	19c0 <_usb_d_dev_handler+0x174>
	if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    1a5c:	f011 0f20 	tst.w	r1, #32
    1a60:	d1d1      	bne.n	1a06 <_usb_d_dev_handler+0x1ba>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    1a62:	f011 0f04 	tst.w	r1, #4
    1a66:	d10e      	bne.n	1a86 <_usb_d_dev_handler+0x23a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT0) {
    1a68:	f011 0f01 	tst.w	r1, #1
    1a6c:	d10e      	bne.n	1a8c <_usb_d_dev_handler+0x240>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    1a6e:	f003 0307 	and.w	r3, r3, #7
    1a72:	2b01      	cmp	r3, #1
    1a74:	d1ca      	bne.n	1a0c <_usb_d_dev_handler+0x1c0>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    1a76:	f011 0f08 	tst.w	r1, #8
    1a7a:	d10b      	bne.n	1a94 <_usb_d_dev_handler+0x248>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    1a7c:	f011 0f10 	tst.w	r1, #16
    1a80:	d0c4      	beq.n	1a0c <_usb_d_dev_handler+0x1c0>
			_usb_d_dev_handle_setup(ept);
    1a82:	47c8      	blx	r9
    1a84:	e7c2      	b.n	1a0c <_usb_d_dev_handler+0x1c0>
		_usb_d_dev_handle_trfail(ept, 0);
    1a86:	2100      	movs	r1, #0
    1a88:	47c0      	blx	r8
    1a8a:	e7bf      	b.n	1a0c <_usb_d_dev_handler+0x1c0>
		_usb_d_dev_out_next(ept, true);
    1a8c:	2101      	movs	r1, #1
    1a8e:	4b0a      	ldr	r3, [pc, #40]	; (1ab8 <_usb_d_dev_handler+0x26c>)
    1a90:	4798      	blx	r3
    1a92:	e7bb      	b.n	1a0c <_usb_d_dev_handler+0x1c0>
			_usb_d_dev_handle_trfail(ept, 1);
    1a94:	2101      	movs	r1, #1
    1a96:	47c0      	blx	r8
    1a98:	e7b8      	b.n	1a0c <_usb_d_dev_handler+0x1c0>
    1a9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    1a9e:	bf00      	nop
    1aa0:	20000690 	.word	0x20000690
    1aa4:	2000061c 	.word	0x2000061c
    1aa8:	40001000 	.word	0x40001000
    1aac:	00001495 	.word	0x00001495
    1ab0:	000012d1 	.word	0x000012d1
    1ab4:	000014d9 	.word	0x000014d9
    1ab8:	0000165d 	.word	0x0000165d
    1abc:	00001255 	.word	0x00001255
    1ac0:	00001395 	.word	0x00001395

00001ac4 <_usb_d_dev_init>:
{
    1ac4:	b508      	push	{r3, lr}
	return ((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg;
    1ac6:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    1aca:	789b      	ldrb	r3, [r3, #2]
	if (!hri_usbdevice_is_syncing(hw, USB_SYNCBUSY_SWRST)) {
    1acc:	f013 0f01 	tst.w	r3, #1
    1ad0:	d124      	bne.n	1b1c <_usb_d_dev_init+0x58>
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    1ad2:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    1ad6:	7893      	ldrb	r3, [r2, #2]
    1ad8:	f013 0f03 	tst.w	r3, #3
    1adc:	d1fb      	bne.n	1ad6 <_usb_d_dev_init+0x12>

static inline hri_usb_ctrla_reg_t hri_usb_get_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t mask)
{
	uint8_t tmp;
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
	tmp = ((Usb *)hw)->HOST.CTRLA.reg;
    1ade:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    1ae2:	781b      	ldrb	r3, [r3, #0]
		if (hri_usbdevice_get_CTRLA_reg(hw, USB_CTRLA_ENABLE)) {
    1ae4:	f013 0f02 	tst.w	r3, #2
    1ae8:	d00f      	beq.n	1b0a <_usb_d_dev_init+0x46>
	((Usb *)hw)->HOST.CTRLA.reg &= ~USB_CTRLA_ENABLE;
    1aea:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    1aee:	7813      	ldrb	r3, [r2, #0]
    1af0:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    1af4:	7013      	strb	r3, [r2, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    1af6:	7893      	ldrb	r3, [r2, #2]
    1af8:	f013 0f03 	tst.w	r3, #3
    1afc:	d1fb      	bne.n	1af6 <_usb_d_dev_init+0x32>
    1afe:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    1b02:	7893      	ldrb	r3, [r2, #2]
    1b04:	f013 0f02 	tst.w	r3, #2
    1b08:	d1fb      	bne.n	1b02 <_usb_d_dev_init+0x3e>
}

static inline void hri_usb_write_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t data)
{
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.CTRLA.reg = data;
    1b0a:	2201      	movs	r2, #1
    1b0c:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    1b10:	701a      	strb	r2, [r3, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    1b12:	461a      	mov	r2, r3
    1b14:	7893      	ldrb	r3, [r2, #2]
    1b16:	f013 0f03 	tst.w	r3, #3
    1b1a:	d1fb      	bne.n	1b14 <_usb_d_dev_init+0x50>
    1b1c:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    1b20:	7893      	ldrb	r3, [r2, #2]
    1b22:	f013 0f01 	tst.w	r3, #1
    1b26:	d1fb      	bne.n	1b20 <_usb_d_dev_init+0x5c>
	dev_inst.callbacks.sof   = (_usb_d_dev_sof_cb_t)_dummy_func_no_return;
    1b28:	4b21      	ldr	r3, [pc, #132]	; (1bb0 <_usb_d_dev_init+0xec>)
    1b2a:	4a22      	ldr	r2, [pc, #136]	; (1bb4 <_usb_d_dev_init+0xf0>)
    1b2c:	661a      	str	r2, [r3, #96]	; 0x60
	dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)_dummy_func_no_return;
    1b2e:	665a      	str	r2, [r3, #100]	; 0x64
	dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)_dummy_func_no_return;
    1b30:	669a      	str	r2, [r3, #104]	; 0x68
	dev_inst.ep_callbacks.more  = (_usb_d_dev_ep_cb_more_t)_dummy_func_no_return;
    1b32:	66da      	str	r2, [r3, #108]	; 0x6c
	dev_inst.ep_callbacks.done  = (_usb_d_dev_ep_cb_done_t)_dummy_func_no_return;
    1b34:	671a      	str	r2, [r3, #112]	; 0x70
	_usb_d_dev_reset_epts();
    1b36:	4b20      	ldr	r3, [pc, #128]	; (1bb8 <_usb_d_dev_init+0xf4>)
    1b38:	4798      	blx	r3
	    = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRANSN_POS / 32)) >> (NVM_USB_PAD_TRANSN_POS % 32))
    1b3a:	4b20      	ldr	r3, [pc, #128]	; (1bbc <_usb_d_dev_init+0xf8>)
    1b3c:	6819      	ldr	r1, [r3, #0]
	uint32_t pad_transp
    1b3e:	f3c1 1344 	ubfx	r3, r1, #5, #5
	uint32_t pad_trim = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRIM_POS / 32)) >> (NVM_USB_PAD_TRIM_POS % 32))
    1b42:	f3c1 2282 	ubfx	r2, r1, #10, #3
	if (pad_transn == 0 || pad_transn == 0x1F) {
    1b46:	f011 011f 	ands.w	r1, r1, #31
    1b4a:	d02b      	beq.n	1ba4 <_usb_d_dev_init+0xe0>
		pad_transn = 9;
    1b4c:	291f      	cmp	r1, #31
    1b4e:	bf08      	it	eq
    1b50:	2109      	moveq	r1, #9
	if (pad_transp == 0 || pad_transp == 0x1F) {
    1b52:	b34b      	cbz	r3, 1ba8 <_usb_d_dev_init+0xe4>
		pad_transp = 25;
    1b54:	2b1f      	cmp	r3, #31
    1b56:	bf08      	it	eq
    1b58:	2319      	moveq	r3, #25
	if (pad_trim == 0 || pad_trim == 0x7) {
    1b5a:	b33a      	cbz	r2, 1bac <_usb_d_dev_init+0xe8>
		pad_trim = 6;
    1b5c:	2a07      	cmp	r2, #7
    1b5e:	bf08      	it	eq
    1b60:	2206      	moveq	r2, #6
	hw->DEVICE.PADCAL.reg = USB_PADCAL_TRANSN(pad_transn) | USB_PADCAL_TRANSP(pad_transp) | USB_PADCAL_TRIM(pad_trim);
    1b62:	f003 031f 	and.w	r3, r3, #31
    1b66:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
    1b6a:	0312      	lsls	r2, r2, #12
    1b6c:	f402 42e0 	and.w	r2, r2, #28672	; 0x7000
    1b70:	4313      	orrs	r3, r2
    1b72:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    1b76:	8513      	strh	r3, [r2, #40]	; 0x28
	hw->DEVICE.QOSCTRL.bit.CQOS = 3;
    1b78:	78d3      	ldrb	r3, [r2, #3]
    1b7a:	f043 0303 	orr.w	r3, r3, #3
    1b7e:	70d3      	strb	r3, [r2, #3]
	hw->DEVICE.QOSCTRL.bit.DQOS = 3;
    1b80:	78d3      	ldrb	r3, [r2, #3]
    1b82:	f043 030c 	orr.w	r3, r3, #12
    1b86:	70d3      	strb	r3, [r2, #3]
	((Usb *)hw)->HOST.CTRLA.reg = data;
    1b88:	2304      	movs	r3, #4
    1b8a:	7013      	strb	r3, [r2, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    1b8c:	7893      	ldrb	r3, [r2, #2]
    1b8e:	f013 0f03 	tst.w	r3, #3
    1b92:	d1fb      	bne.n	1b8c <_usb_d_dev_init+0xc8>
}

static inline void hri_usb_write_DESCADD_reg(const void *const hw, hri_usb_descadd_reg_t data)
{
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.DESCADD.reg = data;
    1b94:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    1b98:	4a05      	ldr	r2, [pc, #20]	; (1bb0 <_usb_d_dev_init+0xec>)
    1b9a:	625a      	str	r2, [r3, #36]	; 0x24
	((Usb *)hw)->DEVICE.CTRLB.reg = data;
    1b9c:	2201      	movs	r2, #1
    1b9e:	811a      	strh	r2, [r3, #8]
}
    1ba0:	2000      	movs	r0, #0
    1ba2:	bd08      	pop	{r3, pc}
		pad_transn = 9;
    1ba4:	2109      	movs	r1, #9
    1ba6:	e7d4      	b.n	1b52 <_usb_d_dev_init+0x8e>
		pad_transp = 25;
    1ba8:	2319      	movs	r3, #25
    1baa:	e7d6      	b.n	1b5a <_usb_d_dev_init+0x96>
		pad_trim = 6;
    1bac:	2206      	movs	r2, #6
    1bae:	e7d8      	b.n	1b62 <_usb_d_dev_init+0x9e>
    1bb0:	2000061c 	.word	0x2000061c
    1bb4:	00001251 	.word	0x00001251
    1bb8:	00001495 	.word	0x00001495
    1bbc:	00800084 	.word	0x00800084

00001bc0 <_usb_d_dev_enable>:
	tmp = ((Usb *)hw)->HOST.SYNCBUSY.reg;
    1bc0:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    1bc4:	789b      	ldrb	r3, [r3, #2]
	if (hri_usbdevice_get_SYNCBUSY_reg(hw, (USB_SYNCBUSY_ENABLE | USB_SYNCBUSY_SWRST))) {
    1bc6:	f013 0f03 	tst.w	r3, #3
    1bca:	d129      	bne.n	1c20 <_usb_d_dev_enable+0x60>
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    1bcc:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    1bd0:	7893      	ldrb	r3, [r2, #2]
    1bd2:	f013 0f03 	tst.w	r3, #3
    1bd6:	d1fb      	bne.n	1bd0 <_usb_d_dev_enable+0x10>
	return ((Usb *)hw)->HOST.CTRLA.reg;
    1bd8:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    1bdc:	781b      	ldrb	r3, [r3, #0]
    1bde:	b2db      	uxtb	r3, r3
	if ((ctrla & USB_CTRLA_ENABLE) == 0) {
    1be0:	f013 0f02 	tst.w	r3, #2
    1be4:	d108      	bne.n	1bf8 <_usb_d_dev_enable+0x38>
		hri_usbdevice_write_CTRLA_reg(hw, ctrla | USB_CTRLA_ENABLE);
    1be6:	f043 0302 	orr.w	r3, r3, #2
	((Usb *)hw)->HOST.CTRLA.reg = data;
    1bea:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    1bee:	7013      	strb	r3, [r2, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    1bf0:	7893      	ldrb	r3, [r2, #2]
    1bf2:	f013 0f03 	tst.w	r3, #3
    1bf6:	d1fb      	bne.n	1bf0 <_usb_d_dev_enable+0x30>
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1bf8:	4b0b      	ldr	r3, [pc, #44]	; (1c28 <_usb_d_dev_enable+0x68>)
    1bfa:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    1bfe:	609a      	str	r2, [r3, #8]
    1c00:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    1c04:	609a      	str	r2, [r3, #8]
    1c06:	f44f 2280 	mov.w	r2, #262144	; 0x40000
    1c0a:	609a      	str	r2, [r3, #8]
    1c0c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
    1c10:	609a      	str	r2, [r3, #8]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    1c12:	f240 228d 	movw	r2, #653	; 0x28d
    1c16:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    1c1a:	831a      	strh	r2, [r3, #24]
	return ERR_NONE;
    1c1c:	2000      	movs	r0, #0
    1c1e:	4770      	bx	lr
		return -USB_ERR_DENIED;
    1c20:	f06f 0010 	mvn.w	r0, #16
}
    1c24:	4770      	bx	lr
    1c26:	bf00      	nop
    1c28:	e000e100 	.word	0xe000e100

00001c2c <_usb_d_dev_attach>:
	((Usb *)hw)->DEVICE.CTRLB.reg &= ~USB_DEVICE_CTRLB_DETACH;
    1c2c:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    1c30:	8913      	ldrh	r3, [r2, #8]
    1c32:	f023 0301 	bic.w	r3, r3, #1
    1c36:	041b      	lsls	r3, r3, #16
    1c38:	0c1b      	lsrs	r3, r3, #16
    1c3a:	8113      	strh	r3, [r2, #8]
    1c3c:	4770      	bx	lr

00001c3e <_usb_d_dev_set_address>:
	hri_usbdevice_write_DADD_reg(USB, USB_DEVICE_DADD_ADDEN | USB_DEVICE_DADD_DADD(addr));
    1c3e:	f040 0080 	orr.w	r0, r0, #128	; 0x80
	((Usb *)hw)->DEVICE.DADD.reg = data;
    1c42:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    1c46:	7298      	strb	r0, [r3, #10]
    1c48:	4770      	bx	lr
	...

00001c4c <_usb_d_dev_ep_init>:
{
    1c4c:	b5f0      	push	{r4, r5, r6, r7, lr}
    1c4e:	fa4f fe80 	sxtb.w	lr, r0
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    1c52:	f010 050f 	ands.w	r5, r0, #15
    1c56:	d04d      	beq.n	1cf4 <_usb_d_dev_ep_init+0xa8>
    1c58:	f1be 0f00 	cmp.w	lr, #0
    1c5c:	bfb4      	ite	lt
    1c5e:	1cac      	addlt	r4, r5, #2
    1c60:	462c      	movge	r4, r5
	uint8_t                        ep_type = attr & USB_EP_XTYPE_MASK;
    1c62:	f001 0103 	and.w	r1, r1, #3
	const struct _usb_ep_cfg_item *pcfg    = &_usb_ep_cfgs[epn];
    1c66:	462b      	mov	r3, r5
	if (epn > CONF_USB_D_MAX_EP_N) {
    1c68:	2d02      	cmp	r5, #2
    1c6a:	d947      	bls.n	1cfc <_usb_d_dev_ep_init+0xb0>
		return -USB_ERR_PARAM;
    1c6c:	f06f 0011 	mvn.w	r0, #17
    1c70:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    1c72:	f1be 0f00 	cmp.w	lr, #0
    1c76:	db1b      	blt.n	1cb0 <_usb_d_dev_ep_init+0x64>
    1c78:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    1c7c:	4e37      	ldr	r6, [pc, #220]	; (1d5c <_usb_d_dev_ep_init+0x110>)
    1c7e:	f856 5025 	ldr.w	r5, [r6, r5, lsl #2]
    1c82:	2d00      	cmp	r5, #0
    1c84:	d15e      	bne.n	1d44 <_usb_d_dev_ep_init+0xf8>
	ept->cache    = (uint8_t *)(dir ? pcfg->i_cache : pcfg->cache);
    1c86:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    1c8a:	4d34      	ldr	r5, [pc, #208]	; (1d5c <_usb_d_dev_ep_init+0x110>)
    1c8c:	f855 7023 	ldr.w	r7, [r5, r3, lsl #2]
    1c90:	4d33      	ldr	r5, [pc, #204]	; (1d60 <_usb_d_dev_ep_init+0x114>)
    1c92:	00a6      	lsls	r6, r4, #2
    1c94:	1933      	adds	r3, r6, r4
    1c96:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    1c9a:	f8c3 7080 	str.w	r7, [r3, #128]	; 0x80
	ept->size     = max_pkt_siz;
    1c9e:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
	ept->flags.u8 = (ep_type + 1);
    1ca2:	3101      	adds	r1, #1
    1ca4:	f883 1087 	strb.w	r1, [r3, #135]	; 0x87
	ept->ep       = ep;
    1ca8:	f883 0086 	strb.w	r0, [r3, #134]	; 0x86
	return USB_OK;
    1cac:	2000      	movs	r0, #0
    1cae:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    1cb0:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    1cb4:	4e29      	ldr	r6, [pc, #164]	; (1d5c <_usb_d_dev_ep_init+0x110>)
    1cb6:	eb06 0585 	add.w	r5, r6, r5, lsl #2
    1cba:	686d      	ldr	r5, [r5, #4]
    1cbc:	b935      	cbnz	r5, 1ccc <_usb_d_dev_ep_init+0x80>
	ept->cache    = (uint8_t *)(dir ? pcfg->i_cache : pcfg->cache);
    1cbe:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    1cc2:	4d26      	ldr	r5, [pc, #152]	; (1d5c <_usb_d_dev_ep_init+0x110>)
    1cc4:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    1cc8:	685f      	ldr	r7, [r3, #4]
    1cca:	e7e1      	b.n	1c90 <_usb_d_dev_ep_init+0x44>
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    1ccc:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    1cd0:	4e22      	ldr	r6, [pc, #136]	; (1d5c <_usb_d_dev_ep_init+0x110>)
    1cd2:	eb06 0585 	add.w	r5, r6, r5, lsl #2
    1cd6:	896d      	ldrh	r5, [r5, #10]
    1cd8:	4295      	cmp	r5, r2
    1cda:	daf0      	bge.n	1cbe <_usb_d_dev_ep_init+0x72>
		return -USB_ERR_FUNC;
    1cdc:	f06f 0012 	mvn.w	r0, #18
    1ce0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -USB_ERR_REDO;
    1ce2:	f06f 0013 	mvn.w	r0, #19
    1ce6:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return -USB_ERR_REDO;
    1ce8:	f06f 0013 	mvn.w	r0, #19
    1cec:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return -USB_ERR_FUNC;
    1cee:	f06f 0012 	mvn.w	r0, #18
    1cf2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint8_t                        ep_type = attr & USB_EP_XTYPE_MASK;
    1cf4:	f001 0103 	and.w	r1, r1, #3
	return &dev_inst.ep[ep_index];
    1cf8:	2400      	movs	r4, #0
	const struct _usb_ep_cfg_item *pcfg    = &_usb_ep_cfgs[epn];
    1cfa:	4623      	mov	r3, r4
	if (ept->ep != 0xFF) {
    1cfc:	eb04 0684 	add.w	r6, r4, r4, lsl #2
    1d00:	4f17      	ldr	r7, [pc, #92]	; (1d60 <_usb_d_dev_ep_init+0x114>)
    1d02:	eb07 0686 	add.w	r6, r7, r6, lsl #2
    1d06:	f896 6086 	ldrb.w	r6, [r6, #134]	; 0x86
    1d0a:	2eff      	cmp	r6, #255	; 0xff
    1d0c:	d1e9      	bne.n	1ce2 <_usb_d_dev_ep_init+0x96>
	if (ep_type == USB_EP_XTYPE_CTRL) {
    1d0e:	2900      	cmp	r1, #0
    1d10:	d1af      	bne.n	1c72 <_usb_d_dev_ep_init+0x26>
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    1d12:	b125      	cbz	r5, 1d1e <_usb_d_dev_ep_init+0xd2>
    1d14:	f1be 0f00 	cmp.w	lr, #0
    1d18:	bfa4      	itt	ge
    1d1a:	3502      	addge	r5, #2
    1d1c:	b2ed      	uxtbge	r5, r5
		if (ept_in->ep != 0xFF) {
    1d1e:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    1d22:	4e0f      	ldr	r6, [pc, #60]	; (1d60 <_usb_d_dev_ep_init+0x114>)
    1d24:	eb06 0585 	add.w	r5, r6, r5, lsl #2
    1d28:	f895 5086 	ldrb.w	r5, [r5, #134]	; 0x86
    1d2c:	2dff      	cmp	r5, #255	; 0xff
    1d2e:	d1db      	bne.n	1ce8 <_usb_d_dev_ep_init+0x9c>
		if (pcfg->cache == NULL) {
    1d30:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    1d34:	4e09      	ldr	r6, [pc, #36]	; (1d5c <_usb_d_dev_ep_init+0x110>)
    1d36:	f856 5025 	ldr.w	r5, [r6, r5, lsl #2]
    1d3a:	2d00      	cmp	r5, #0
    1d3c:	d0d7      	beq.n	1cee <_usb_d_dev_ep_init+0xa2>
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    1d3e:	f1be 0f00 	cmp.w	lr, #0
    1d42:	dbb5      	blt.n	1cb0 <_usb_d_dev_ep_init+0x64>
    1d44:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    1d48:	4e04      	ldr	r6, [pc, #16]	; (1d5c <_usb_d_dev_ep_init+0x110>)
    1d4a:	eb06 0585 	add.w	r5, r6, r5, lsl #2
    1d4e:	892d      	ldrh	r5, [r5, #8]
    1d50:	4295      	cmp	r5, r2
    1d52:	da98      	bge.n	1c86 <_usb_d_dev_ep_init+0x3a>
		return -USB_ERR_FUNC;
    1d54:	f06f 0012 	mvn.w	r0, #18
    1d58:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1d5a:	bf00      	nop
    1d5c:	00004100 	.word	0x00004100
    1d60:	2000061c 	.word	0x2000061c

00001d64 <_usb_d_dev_ep_deinit>:
{
    1d64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1d66:	b247      	sxtb	r7, r0
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    1d68:	f010 060f 	ands.w	r6, r0, #15
    1d6c:	d00e      	beq.n	1d8c <_usb_d_dev_ep_deinit+0x28>
    1d6e:	2f00      	cmp	r7, #0
    1d70:	bfb4      	ite	lt
    1d72:	1cb3      	addlt	r3, r6, #2
    1d74:	4633      	movge	r3, r6
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    1d76:	2e02      	cmp	r6, #2
    1d78:	d900      	bls.n	1d7c <_usb_d_dev_ep_deinit+0x18>
    1d7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return &dev_inst.ep[ep_index];
    1d7c:	461d      	mov	r5, r3
    1d7e:	3301      	adds	r3, #1
    1d80:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    1d84:	4a24      	ldr	r2, [pc, #144]	; (1e18 <_usb_d_dev_ep_deinit+0xb4>)
    1d86:	eb02 0e83 	add.w	lr, r2, r3, lsl #2
    1d8a:	e002      	b.n	1d92 <_usb_d_dev_ep_deinit+0x2e>
    1d8c:	f8df e094 	ldr.w	lr, [pc, #148]	; 1e24 <_usb_d_dev_ep_deinit+0xc0>
    1d90:	2500      	movs	r5, #0
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    1d92:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    1d96:	4a21      	ldr	r2, [pc, #132]	; (1e1c <_usb_d_dev_ep_deinit+0xb8>)
    1d98:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    1d9c:	f893 2086 	ldrb.w	r2, [r3, #134]	; 0x86
    1da0:	2aff      	cmp	r2, #255	; 0xff
    1da2:	d0ea      	beq.n	1d7a <_usb_d_dev_ep_deinit+0x16>
    1da4:	4604      	mov	r4, r0
	_usb_d_dev_trans_stop(ept, dir, USB_TRANS_RESET);
    1da6:	2203      	movs	r2, #3
    1da8:	0ff9      	lsrs	r1, r7, #31
    1daa:	4670      	mov	r0, lr
    1dac:	4b1c      	ldr	r3, [pc, #112]	; (1e20 <_usb_d_dev_ep_deinit+0xbc>)
    1dae:	4798      	blx	r3
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    1db0:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    1db4:	4a19      	ldr	r2, [pc, #100]	; (1e1c <_usb_d_dev_ep_deinit+0xb8>)
    1db6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    1dba:	f893 3087 	ldrb.w	r3, [r3, #135]	; 0x87
    1dbe:	f003 0307 	and.w	r3, r3, #7
    1dc2:	2b01      	cmp	r3, #1
    1dc4:	d016      	beq.n	1df4 <_usb_d_dev_ep_deinit+0x90>
	} else if (USB_EP_GET_DIR(ep)) {
    1dc6:	2f00      	cmp	r7, #0
    1dc8:	db1b      	blt.n	1e02 <_usb_d_dev_ep_deinit+0x9e>
    1dca:	0160      	lsls	r0, r4, #5
    1dcc:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE0_Msk;
    1dd0:	f890 3100 	ldrb.w	r3, [r0, #256]	; 0x100
    1dd4:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
    1dd8:	f880 3100 	strb.w	r3, [r0, #256]	; 0x100
	ept->flags.u8 = 0;
    1ddc:	4b0f      	ldr	r3, [pc, #60]	; (1e1c <_usb_d_dev_ep_deinit+0xb8>)
    1dde:	00aa      	lsls	r2, r5, #2
    1de0:	1951      	adds	r1, r2, r5
    1de2:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    1de6:	2000      	movs	r0, #0
    1de8:	f881 0087 	strb.w	r0, [r1, #135]	; 0x87
	ept->ep       = 0xFF;
    1dec:	22ff      	movs	r2, #255	; 0xff
    1dee:	f881 2086 	strb.w	r2, [r1, #134]	; 0x86
    1df2:	e7c2      	b.n	1d7a <_usb_d_dev_ep_deinit+0x16>
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg = 0;
    1df4:	0160      	lsls	r0, r4, #5
    1df6:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
    1dfa:	2300      	movs	r3, #0
    1dfc:	f880 3100 	strb.w	r3, [r0, #256]	; 0x100
    1e00:	e7ec      	b.n	1ddc <_usb_d_dev_ep_deinit+0x78>
    1e02:	0176      	lsls	r6, r6, #5
    1e04:	f106 4682 	add.w	r6, r6, #1090519040	; 0x41000000
		hw->DEVICE.DeviceEndpoint[USB_EP_GET_N(ep)].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE1_Msk;
    1e08:	f896 3100 	ldrb.w	r3, [r6, #256]	; 0x100
    1e0c:	f003 038f 	and.w	r3, r3, #143	; 0x8f
    1e10:	f886 3100 	strb.w	r3, [r6, #256]	; 0x100
    1e14:	e7e2      	b.n	1ddc <_usb_d_dev_ep_deinit+0x78>
    1e16:	bf00      	nop
    1e18:	2000067c 	.word	0x2000067c
    1e1c:	2000061c 	.word	0x2000061c
    1e20:	00001329 	.word	0x00001329
    1e24:	20000690 	.word	0x20000690

00001e28 <_usb_d_dev_ep_enable>:
{
    1e28:	b5f0      	push	{r4, r5, r6, r7, lr}
    1e2a:	b247      	sxtb	r7, r0
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    1e2c:	f010 000f 	ands.w	r0, r0, #15
    1e30:	f000 80a6 	beq.w	1f80 <_usb_d_dev_ep_enable+0x158>
    1e34:	2f00      	cmp	r7, #0
    1e36:	bfb4      	ite	lt
    1e38:	1c83      	addlt	r3, r0, #2
    1e3a:	4603      	movge	r3, r0
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    1e3c:	4606      	mov	r6, r0
    1e3e:	0142      	lsls	r2, r0, #5
    1e40:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    1e44:	f892 4100 	ldrb.w	r4, [r2, #256]	; 0x100
    1e48:	b2e4      	uxtb	r4, r4
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    1e4a:	2802      	cmp	r0, #2
    1e4c:	f240 809f 	bls.w	1f8e <_usb_d_dev_ep_enable+0x166>
		return -USB_ERR_PARAM;
    1e50:	f06f 0011 	mvn.w	r0, #17
    1e54:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (epcfg & (USB_DEVICE_EPCFG_EPTYPE1_Msk | USB_DEVICE_EPCFG_EPTYPE0_Msk)) {
    1e56:	f014 0f77 	tst.w	r4, #119	; 0x77
    1e5a:	f040 8088 	bne.w	1f6e <_usb_d_dev_ep_enable+0x146>
    1e5e:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    1e62:	2111      	movs	r1, #17
    1e64:	f882 1100 	strb.w	r1, [r2, #256]	; 0x100
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    1e68:	4c97      	ldr	r4, [pc, #604]	; (20c8 <_usb_d_dev_ep_enable+0x2a0>)
    1e6a:	eb04 018e 	add.w	r1, r4, lr, lsl #2
    1e6e:	f8b1 4084 	ldrh.w	r4, [r1, #132]	; 0x84
    1e72:	4996      	ldr	r1, [pc, #600]	; (20cc <_usb_d_dev_ep_enable+0x2a4>)
    1e74:	ea01 3184 	and.w	r1, r1, r4, lsl #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    1e78:	f5b4 7f00 	cmp.w	r4, #512	; 0x200
    1e7c:	f200 80cc 	bhi.w	2018 <_usb_d_dev_ep_enable+0x1f0>
    1e80:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
    1e84:	f200 810a 	bhi.w	209c <_usb_d_dev_ep_enable+0x274>
    1e88:	2c80      	cmp	r4, #128	; 0x80
    1e8a:	f200 80f9 	bhi.w	2080 <_usb_d_dev_ep_enable+0x258>
    1e8e:	2c40      	cmp	r4, #64	; 0x40
    1e90:	f200 810b 	bhi.w	20aa <_usb_d_dev_ep_enable+0x282>
    1e94:	2c20      	cmp	r4, #32
    1e96:	f200 80fa 	bhi.w	208e <_usb_d_dev_ep_enable+0x266>
    1e9a:	2c10      	cmp	r4, #16
    1e9c:	f200 810c 	bhi.w	20b8 <_usb_d_dev_ep_enable+0x290>
    1ea0:	2c08      	cmp	r4, #8
    1ea2:	bf94      	ite	ls
    1ea4:	2700      	movls	r7, #0
    1ea6:	2701      	movhi	r7, #1
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    1ea8:	ea41 7107 	orr.w	r1, r1, r7, lsl #28
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    1eac:	6041      	str	r1, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    1eae:	f3c4 010d 	ubfx	r1, r4, #0, #14
    1eb2:	e0b7      	b.n	2024 <_usb_d_dev_ep_enable+0x1fc>
		if (epcfg & USB_DEVICE_EPCFG_EPTYPE1_Msk) {
    1eb4:	f014 0f70 	tst.w	r4, #112	; 0x70
    1eb8:	d15c      	bne.n	1f74 <_usb_d_dev_ep_enable+0x14c>
		epcfg |= USB_DEVICE_EPCFG_EPTYPE1(ept->flags.bits.eptype);
    1eba:	4d83      	ldr	r5, [pc, #524]	; (20c8 <_usb_d_dev_ep_enable+0x2a0>)
    1ebc:	009f      	lsls	r7, r3, #2
    1ebe:	18f9      	adds	r1, r7, r3
    1ec0:	eb05 0181 	add.w	r1, r5, r1, lsl #2
    1ec4:	f891 1087 	ldrb.w	r1, [r1, #135]	; 0x87
    1ec8:	0109      	lsls	r1, r1, #4
    1eca:	f001 0170 	and.w	r1, r1, #112	; 0x70
    1ece:	430c      	orrs	r4, r1
    1ed0:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    1ed4:	f882 4100 	strb.w	r4, [r2, #256]	; 0x100
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    1ed8:	443b      	add	r3, r7
    1eda:	eb05 0583 	add.w	r5, r5, r3, lsl #2
    1ede:	f8b5 3084 	ldrh.w	r3, [r5, #132]	; 0x84
    1ee2:	f3c3 010d 	ubfx	r1, r3, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    1ee6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    1eea:	d80f      	bhi.n	1f0c <_usb_d_dev_ep_enable+0xe4>
    1eec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    1ef0:	d819      	bhi.n	1f26 <_usb_d_dev_ep_enable+0xfe>
    1ef2:	2b80      	cmp	r3, #128	; 0x80
    1ef4:	d819      	bhi.n	1f2a <_usb_d_dev_ep_enable+0x102>
    1ef6:	2b40      	cmp	r3, #64	; 0x40
    1ef8:	d819      	bhi.n	1f2e <_usb_d_dev_ep_enable+0x106>
    1efa:	2b20      	cmp	r3, #32
    1efc:	d819      	bhi.n	1f32 <_usb_d_dev_ep_enable+0x10a>
    1efe:	2b10      	cmp	r3, #16
    1f00:	d819      	bhi.n	1f36 <_usb_d_dev_ep_enable+0x10e>
    1f02:	2b08      	cmp	r3, #8
    1f04:	bf94      	ite	ls
    1f06:	2300      	movls	r3, #0
    1f08:	2301      	movhi	r3, #1
    1f0a:	e000      	b.n	1f0e <_usb_d_dev_ep_enable+0xe6>
    1f0c:	2307      	movs	r3, #7
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    1f0e:	ea41 7303 	orr.w	r3, r1, r3, lsl #28
    1f12:	6143      	str	r3, [r0, #20]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    1f14:	2380      	movs	r3, #128	; 0x80
    1f16:	f882 3104 	strb.w	r3, [r2, #260]	; 0x104
	bank->STATUS_BK.reg     = 0;
    1f1a:	4b6b      	ldr	r3, [pc, #428]	; (20c8 <_usb_d_dev_ep_enable+0x2a0>)
    1f1c:	eb03 1646 	add.w	r6, r3, r6, lsl #5
    1f20:	2000      	movs	r0, #0
    1f22:	76b0      	strb	r0, [r6, #26]
    1f24:	bdf0      	pop	{r4, r5, r6, r7, pc}
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    1f26:	2306      	movs	r3, #6
    1f28:	e7f1      	b.n	1f0e <_usb_d_dev_ep_enable+0xe6>
    1f2a:	2305      	movs	r3, #5
    1f2c:	e7ef      	b.n	1f0e <_usb_d_dev_ep_enable+0xe6>
    1f2e:	2304      	movs	r3, #4
    1f30:	e7ed      	b.n	1f0e <_usb_d_dev_ep_enable+0xe6>
    1f32:	2303      	movs	r3, #3
    1f34:	e7eb      	b.n	1f0e <_usb_d_dev_ep_enable+0xe6>
    1f36:	2302      	movs	r3, #2
    1f38:	e7e9      	b.n	1f0e <_usb_d_dev_ep_enable+0xe6>
    1f3a:	2107      	movs	r1, #7
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    1f3c:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    1f40:	6043      	str	r3, [r0, #4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    1f42:	2340      	movs	r3, #64	; 0x40
    1f44:	f882 3105 	strb.w	r3, [r2, #261]	; 0x105
	bank->STATUS_BK.reg     = 0;
    1f48:	4b5f      	ldr	r3, [pc, #380]	; (20c8 <_usb_d_dev_ep_enable+0x2a0>)
    1f4a:	eb03 1646 	add.w	r6, r3, r6, lsl #5
    1f4e:	2000      	movs	r0, #0
    1f50:	72b0      	strb	r0, [r6, #10]
    1f52:	bdf0      	pop	{r4, r5, r6, r7, pc}
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    1f54:	2106      	movs	r1, #6
    1f56:	e7f1      	b.n	1f3c <_usb_d_dev_ep_enable+0x114>
    1f58:	2105      	movs	r1, #5
    1f5a:	e7ef      	b.n	1f3c <_usb_d_dev_ep_enable+0x114>
    1f5c:	2104      	movs	r1, #4
    1f5e:	e7ed      	b.n	1f3c <_usb_d_dev_ep_enable+0x114>
    1f60:	2103      	movs	r1, #3
    1f62:	e7eb      	b.n	1f3c <_usb_d_dev_ep_enable+0x114>
    1f64:	2102      	movs	r1, #2
    1f66:	e7e9      	b.n	1f3c <_usb_d_dev_ep_enable+0x114>
		return -USB_ERR_PARAM;
    1f68:	f06f 0011 	mvn.w	r0, #17
    1f6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return -USB_ERR_REDO;
    1f6e:	f06f 0013 	mvn.w	r0, #19
    1f72:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return -USB_ERR_REDO;
    1f74:	f06f 0013 	mvn.w	r0, #19
    1f78:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return -USB_ERR_REDO;
    1f7a:	f06f 0013 	mvn.w	r0, #19
    1f7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    1f80:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    1f84:	f893 4100 	ldrb.w	r4, [r3, #256]	; 0x100
    1f88:	b2e4      	uxtb	r4, r4
    1f8a:	2600      	movs	r6, #0
	return &dev_inst.ep[ep_index];
    1f8c:	4633      	mov	r3, r6
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    1f8e:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    1f92:	494d      	ldr	r1, [pc, #308]	; (20c8 <_usb_d_dev_ep_enable+0x2a0>)
    1f94:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    1f98:	f892 5086 	ldrb.w	r5, [r2, #134]	; 0x86
    1f9c:	2dff      	cmp	r5, #255	; 0xff
    1f9e:	d0e3      	beq.n	1f68 <_usb_d_dev_ep_enable+0x140>
    1fa0:	0172      	lsls	r2, r6, #5
	bank = prvt_inst.desc_table[epn].DeviceDescBank;
    1fa2:	1888      	adds	r0, r1, r2
	if (ept->flags.bits.eptype == USB_D_EPTYPE_CTRL) {
    1fa4:	eb03 0e83 	add.w	lr, r3, r3, lsl #2
    1fa8:	eb01 018e 	add.w	r1, r1, lr, lsl #2
    1fac:	f891 1087 	ldrb.w	r1, [r1, #135]	; 0x87
    1fb0:	f001 0107 	and.w	r1, r1, #7
    1fb4:	2901      	cmp	r1, #1
    1fb6:	f43f af4e 	beq.w	1e56 <_usb_d_dev_ep_enable+0x2e>
	} else if (dir) {
    1fba:	2f00      	cmp	r7, #0
    1fbc:	f6ff af7a 	blt.w	1eb4 <_usb_d_dev_ep_enable+0x8c>
		if (epcfg & USB_DEVICE_EPCFG_EPTYPE0_Msk) {
    1fc0:	f014 0f07 	tst.w	r4, #7
    1fc4:	d1d9      	bne.n	1f7a <_usb_d_dev_ep_enable+0x152>
		epcfg |= USB_DEVICE_EPCFG_EPTYPE0(ept->flags.bits.eptype);
    1fc6:	4d40      	ldr	r5, [pc, #256]	; (20c8 <_usb_d_dev_ep_enable+0x2a0>)
    1fc8:	009f      	lsls	r7, r3, #2
    1fca:	18f9      	adds	r1, r7, r3
    1fcc:	eb05 0181 	add.w	r1, r5, r1, lsl #2
    1fd0:	f891 1087 	ldrb.w	r1, [r1, #135]	; 0x87
    1fd4:	f001 0107 	and.w	r1, r1, #7
    1fd8:	430c      	orrs	r4, r1
    1fda:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    1fde:	f882 4100 	strb.w	r4, [r2, #256]	; 0x100
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    1fe2:	443b      	add	r3, r7
    1fe4:	eb05 0583 	add.w	r5, r5, r3, lsl #2
    1fe8:	f8b5 1084 	ldrh.w	r1, [r5, #132]	; 0x84
    1fec:	4b37      	ldr	r3, [pc, #220]	; (20cc <_usb_d_dev_ep_enable+0x2a4>)
    1fee:	ea03 3381 	and.w	r3, r3, r1, lsl #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    1ff2:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    1ff6:	d8a0      	bhi.n	1f3a <_usb_d_dev_ep_enable+0x112>
    1ff8:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
    1ffc:	d8aa      	bhi.n	1f54 <_usb_d_dev_ep_enable+0x12c>
    1ffe:	2980      	cmp	r1, #128	; 0x80
    2000:	d8aa      	bhi.n	1f58 <_usb_d_dev_ep_enable+0x130>
    2002:	2940      	cmp	r1, #64	; 0x40
    2004:	d8aa      	bhi.n	1f5c <_usb_d_dev_ep_enable+0x134>
    2006:	2920      	cmp	r1, #32
    2008:	d8aa      	bhi.n	1f60 <_usb_d_dev_ep_enable+0x138>
    200a:	2910      	cmp	r1, #16
    200c:	d8aa      	bhi.n	1f64 <_usb_d_dev_ep_enable+0x13c>
    200e:	2908      	cmp	r1, #8
    2010:	bf94      	ite	ls
    2012:	2100      	movls	r1, #0
    2014:	2101      	movhi	r1, #1
    2016:	e791      	b.n	1f3c <_usb_d_dev_ep_enable+0x114>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    2018:	f041 41e0 	orr.w	r1, r1, #1879048192	; 0x70000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    201c:	6041      	str	r1, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    201e:	f3c4 010d 	ubfx	r1, r4, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    2022:	2707      	movs	r7, #7
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    2024:	ea41 7107 	orr.w	r1, r1, r7, lsl #28
    2028:	6141      	str	r1, [r0, #20]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    202a:	2140      	movs	r1, #64	; 0x40
    202c:	f882 1105 	strb.w	r1, [r2, #261]	; 0x105
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    2030:	2080      	movs	r0, #128	; 0x80
    2032:	f882 0104 	strb.w	r0, [r2, #260]	; 0x104
	bank->STATUS_BK.reg     = 0;
    2036:	4a24      	ldr	r2, [pc, #144]	; (20c8 <_usb_d_dev_ep_enable+0x2a0>)
    2038:	eb02 1646 	add.w	r6, r2, r6, lsl #5
    203c:	2000      	movs	r0, #0
    203e:	72b0      	strb	r0, [r6, #10]
    2040:	76b0      	strb	r0, [r6, #26]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    2042:	f005 050f 	and.w	r5, r5, #15
	_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    2046:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    204a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    204e:	f8d3 6080 	ldr.w	r6, [r3, #128]	; 0x80
	bank->ADDR.reg          = addr;
    2052:	016d      	lsls	r5, r5, #5
    2054:	1953      	adds	r3, r2, r5
    2056:	5156      	str	r6, [r2, r5]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    2058:	685a      	ldr	r2, [r3, #4]
    205a:	f364 329b 	bfi	r2, r4, #14, #14
    205e:	605a      	str	r2, [r3, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    2060:	685a      	ldr	r2, [r3, #4]
    2062:	f360 020d 	bfi	r2, r0, #0, #14
    2066:	605a      	str	r2, [r3, #4]
    2068:	f105 4382 	add.w	r3, r5, #1090519040	; 0x41000000
    206c:	22b0      	movs	r2, #176	; 0xb0
    206e:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    2072:	f883 1105 	strb.w	r1, [r3, #261]	; 0x105
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    2076:	461d      	mov	r5, r3
    2078:	2310      	movs	r3, #16
    207a:	f885 3109 	strb.w	r3, [r5, #265]	; 0x109
    207e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    2080:	f041 41a0 	orr.w	r1, r1, #1342177280	; 0x50000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    2084:	6041      	str	r1, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    2086:	f3c4 010d 	ubfx	r1, r4, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    208a:	2705      	movs	r7, #5
    208c:	e7ca      	b.n	2024 <_usb_d_dev_ep_enable+0x1fc>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    208e:	f041 5140 	orr.w	r1, r1, #805306368	; 0x30000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    2092:	6041      	str	r1, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    2094:	f3c4 010d 	ubfx	r1, r4, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    2098:	2703      	movs	r7, #3
    209a:	e7c3      	b.n	2024 <_usb_d_dev_ep_enable+0x1fc>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    209c:	f041 41c0 	orr.w	r1, r1, #1610612736	; 0x60000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    20a0:	6041      	str	r1, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    20a2:	f3c4 010d 	ubfx	r1, r4, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    20a6:	2706      	movs	r7, #6
    20a8:	e7bc      	b.n	2024 <_usb_d_dev_ep_enable+0x1fc>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    20aa:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    20ae:	6041      	str	r1, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    20b0:	f3c4 010d 	ubfx	r1, r4, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    20b4:	2704      	movs	r7, #4
    20b6:	e7b5      	b.n	2024 <_usb_d_dev_ep_enable+0x1fc>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    20b8:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    20bc:	6041      	str	r1, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    20be:	f3c4 010d 	ubfx	r1, r4, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    20c2:	2702      	movs	r7, #2
    20c4:	e7ae      	b.n	2024 <_usb_d_dev_ep_enable+0x1fc>
    20c6:	bf00      	nop
    20c8:	2000061c 	.word	0x2000061c
    20cc:	0fffc000 	.word	0x0fffc000

000020d0 <_usb_d_dev_ep_stall>:
{
    20d0:	b470      	push	{r4, r5, r6}
    20d2:	b243      	sxtb	r3, r0
	bool                  dir = USB_EP_GET_DIR(ep);
    20d4:	0fdc      	lsrs	r4, r3, #31
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    20d6:	f010 000f 	ands.w	r0, r0, #15
    20da:	d008      	beq.n	20ee <_usb_d_dev_ep_stall+0x1e>
    20dc:	2b00      	cmp	r3, #0
    20de:	bfb4      	ite	lt
    20e0:	1c83      	addlt	r3, r0, #2
    20e2:	4603      	movge	r3, r0
	if (epn > CONF_USB_D_MAX_EP_N) {
    20e4:	2802      	cmp	r0, #2
    20e6:	d903      	bls.n	20f0 <_usb_d_dev_ep_stall+0x20>
		return -USB_ERR_PARAM;
    20e8:	f06f 0011 	mvn.w	r0, #17
    20ec:	e018      	b.n	2120 <_usb_d_dev_ep_stall+0x50>
	return &dev_inst.ep[ep_index];
    20ee:	2300      	movs	r3, #0
	if (USB_EP_STALL_SET == ctrl) {
    20f0:	2901      	cmp	r1, #1
    20f2:	d017      	beq.n	2124 <_usb_d_dev_ep_stall+0x54>
	} else if (USB_EP_STALL_CLR == ctrl) {
    20f4:	2900      	cmp	r1, #0
    20f6:	d03a      	beq.n	216e <_usb_d_dev_ep_stall+0x9e>
	uint8_t epn = USB_EP_GET_N(ept->ep);
    20f8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    20fc:	4a45      	ldr	r2, [pc, #276]	; (2214 <_usb_d_dev_ep_stall+0x144>)
    20fe:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    2102:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    2106:	f003 030f 	and.w	r3, r3, #15
    210a:	015b      	lsls	r3, r3, #5
    210c:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    2110:	f893 2106 	ldrb.w	r2, [r3, #262]	; 0x106
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    2114:	2310      	movs	r3, #16
    2116:	40a3      	lsls	r3, r4
    2118:	421a      	tst	r2, r3
    211a:	bf14      	ite	ne
    211c:	2001      	movne	r0, #1
    211e:	2000      	moveq	r0, #0
}
    2120:	bc70      	pop	{r4, r5, r6}
    2122:	4770      	bx	lr
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    2124:	2510      	movs	r5, #16
    2126:	40a5      	lsls	r5, r4
    2128:	b2ed      	uxtb	r5, r5
	uint8_t epn = USB_EP_GET_N(ept->ep);
    212a:	493a      	ldr	r1, [pc, #232]	; (2214 <_usb_d_dev_ep_stall+0x144>)
    212c:	009e      	lsls	r6, r3, #2
    212e:	18f2      	adds	r2, r6, r3
    2130:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    2134:	f892 2086 	ldrb.w	r2, [r2, #134]	; 0x86
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    2138:	f002 020f 	and.w	r2, r2, #15
    213c:	0150      	lsls	r0, r2, #5
    213e:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
    2142:	f880 5105 	strb.w	r5, [r0, #261]	; 0x105
	_usbd_ep_int_en(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    2146:	2020      	movs	r0, #32
    2148:	fa00 f404 	lsl.w	r4, r0, r4
	hri_usbendpoint_set_EPINTEN_reg(USB, epn, flags);
    214c:	b2e4      	uxtb	r4, r4
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    214e:	0152      	lsls	r2, r2, #5
    2150:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    2154:	f882 4109 	strb.w	r4, [r2, #265]	; 0x109
	ept->flags.bits.is_stalled = 1;
    2158:	4433      	add	r3, r6
    215a:	eb01 0383 	add.w	r3, r1, r3, lsl #2
    215e:	f893 2087 	ldrb.w	r2, [r3, #135]	; 0x87
    2162:	f042 0208 	orr.w	r2, r2, #8
    2166:	f883 2087 	strb.w	r2, [r3, #135]	; 0x87
		rc = _usb_d_dev_ep_stall_set(ept, dir);
    216a:	2000      	movs	r0, #0
    216c:	e7d8      	b.n	2120 <_usb_d_dev_ep_stall+0x50>
	uint8_t epn        = USB_EP_GET_N(ept->ep);
    216e:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    2172:	4928      	ldr	r1, [pc, #160]	; (2214 <_usb_d_dev_ep_stall+0x144>)
    2174:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    2178:	f892 2086 	ldrb.w	r2, [r2, #134]	; 0x86
    217c:	f002 020f 	and.w	r2, r2, #15
    2180:	0151      	lsls	r1, r2, #5
    2182:	f101 4182 	add.w	r1, r1, #1090519040	; 0x41000000
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    2186:	f891 5106 	ldrb.w	r5, [r1, #262]	; 0x106
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    218a:	2010      	movs	r0, #16
    218c:	40a0      	lsls	r0, r4
	if (!is_stalled) {
    218e:	4205      	tst	r5, r0
    2190:	d03c      	beq.n	220c <_usb_d_dev_ep_stall+0x13c>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    2192:	b2c0      	uxtb	r0, r0
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    2194:	f881 0104 	strb.w	r0, [r1, #260]	; 0x104
	_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    2198:	2020      	movs	r0, #32
    219a:	40a0      	lsls	r0, r4
	hri_usbendpoint_clear_EPINTEN_reg(USB, epn, flags);
    219c:	b2c5      	uxtb	r5, r0
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    219e:	f881 5108 	strb.w	r5, [r1, #264]	; 0x108
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    21a2:	f891 2107 	ldrb.w	r2, [r1, #263]	; 0x107
	if (_usbd_ep_is_stall_sent(epn, dir)) {
    21a6:	4202      	tst	r2, r0
    21a8:	d007      	beq.n	21ba <_usb_d_dev_ep_stall+0xea>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    21aa:	f881 5107 	strb.w	r5, [r1, #263]	; 0x107
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
    21ae:	2201      	movs	r2, #1
    21b0:	fa02 f404 	lsl.w	r4, r2, r4
    21b4:	b2e4      	uxtb	r4, r4
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    21b6:	f881 4104 	strb.w	r4, [r1, #260]	; 0x104
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    21ba:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    21be:	4815      	ldr	r0, [pc, #84]	; (2214 <_usb_d_dev_ep_stall+0x144>)
    21c0:	eb00 0282 	add.w	r2, r0, r2, lsl #2
    21c4:	f892 2087 	ldrb.w	r2, [r2, #135]	; 0x87
    21c8:	f002 0207 	and.w	r2, r2, #7
    21cc:	2a01      	cmp	r2, #1
    21ce:	d00c      	beq.n	21ea <_usb_d_dev_ep_stall+0x11a>
		ept->flags.bits.is_stalled = 0;
    21d0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    21d4:	4a0f      	ldr	r2, [pc, #60]	; (2214 <_usb_d_dev_ep_stall+0x144>)
    21d6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    21da:	f893 2087 	ldrb.w	r2, [r3, #135]	; 0x87
    21de:	f36f 02c3 	bfc	r2, #3, #1
    21e2:	f883 2087 	strb.w	r2, [r3, #135]	; 0x87
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
    21e6:	2000      	movs	r0, #0
    21e8:	e79a      	b.n	2120 <_usb_d_dev_ep_stall+0x50>
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    21ea:	f891 2106 	ldrb.w	r2, [r1, #262]	; 0x106
		if ((hri_usbendpoint_read_EPSTATUS_reg(USB, epn) & USB_DEVICE_EPSTATUS_STALLRQ_Msk) == 0) {
    21ee:	f012 0f30 	tst.w	r2, #48	; 0x30
    21f2:	d10d      	bne.n	2210 <_usb_d_dev_ep_stall+0x140>
			ept->flags.bits.is_stalled = 0;
    21f4:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    21f8:	eb00 0382 	add.w	r3, r0, r2, lsl #2
    21fc:	f893 2087 	ldrb.w	r2, [r3, #135]	; 0x87
    2200:	f36f 02c3 	bfc	r2, #3, #1
    2204:	f883 2087 	strb.w	r2, [r3, #135]	; 0x87
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
    2208:	2000      	movs	r0, #0
    220a:	e789      	b.n	2120 <_usb_d_dev_ep_stall+0x50>
    220c:	2000      	movs	r0, #0
    220e:	e787      	b.n	2120 <_usb_d_dev_ep_stall+0x50>
    2210:	2000      	movs	r0, #0
    2212:	e785      	b.n	2120 <_usb_d_dev_ep_stall+0x50>
    2214:	2000061c 	.word	0x2000061c

00002218 <_usb_d_dev_ep_read_req>:

int32_t _usb_d_dev_ep_read_req(const uint8_t ep, uint8_t *req_buf)
{
    2218:	b430      	push	{r4, r5}
	uint8_t            epn   = USB_EP_GET_N(ep);
    221a:	f000 040f 	and.w	r4, r0, #15
    221e:	0163      	lsls	r3, r4, #5
	UsbDeviceDescBank *bank  = prvt_inst.desc_table[epn].DeviceDescBank;
    2220:	4a14      	ldr	r2, [pc, #80]	; (2274 <_usb_d_dev_ep_read_req+0x5c>)
    2222:	18d0      	adds	r0, r2, r3
	uint32_t           addr  = bank[0].ADDR.reg;
    2224:	58d5      	ldr	r5, [r2, r3]
	uint16_t           bytes = bank[0].PCKSIZE.bit.BYTE_COUNT;
    2226:	6840      	ldr	r0, [r0, #4]
    2228:	f3c0 000d 	ubfx	r0, r0, #0, #14

	if (epn > CONF_USB_D_MAX_EP_N || !req_buf) {
    222c:	2c02      	cmp	r4, #2
    222e:	d817      	bhi.n	2260 <_usb_d_dev_ep_read_req+0x48>
    2230:	b1c9      	cbz	r1, 2266 <_usb_d_dev_ep_read_req+0x4e>
    2232:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    2236:	f893 2100 	ldrb.w	r2, [r3, #256]	; 0x100
    223a:	b2d2      	uxtb	r2, r2
		return -USB_ERR_PARAM;
	}
	if (!_usbd_ep_is_ctrl(epn)) {
    223c:	2a11      	cmp	r2, #17
    223e:	d115      	bne.n	226c <_usb_d_dev_ep_read_req+0x54>
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    2240:	f893 2107 	ldrb.w	r2, [r3, #263]	; 0x107
		return -USB_ERR_FUNC;
	}
	if (!_usbd_ep_is_setup(epn)) {
    2244:	f012 0f10 	tst.w	r2, #16
    2248:	d102      	bne.n	2250 <_usb_d_dev_ep_read_req+0x38>
		return ERR_NONE;
    224a:	2000      	movs	r0, #0
	}
	memcpy(req_buf, (void *)addr, 8);
	_usbd_ep_ack_setup(epn);

	return bytes;
}
    224c:	bc30      	pop	{r4, r5}
    224e:	4770      	bx	lr
	memcpy(req_buf, (void *)addr, 8);
    2250:	682c      	ldr	r4, [r5, #0]
    2252:	686a      	ldr	r2, [r5, #4]
    2254:	600c      	str	r4, [r1, #0]
    2256:	604a      	str	r2, [r1, #4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    2258:	2210      	movs	r2, #16
    225a:	f883 2107 	strb.w	r2, [r3, #263]	; 0x107
	return bytes;
    225e:	e7f5      	b.n	224c <_usb_d_dev_ep_read_req+0x34>
		return -USB_ERR_PARAM;
    2260:	f06f 0011 	mvn.w	r0, #17
    2264:	e7f2      	b.n	224c <_usb_d_dev_ep_read_req+0x34>
    2266:	f06f 0011 	mvn.w	r0, #17
    226a:	e7ef      	b.n	224c <_usb_d_dev_ep_read_req+0x34>
		return -USB_ERR_FUNC;
    226c:	f06f 0012 	mvn.w	r0, #18
    2270:	e7ec      	b.n	224c <_usb_d_dev_ep_read_req+0x34>
    2272:	bf00      	nop
    2274:	2000061c 	.word	0x2000061c

00002278 <_usb_d_dev_ep_trans>:

int32_t _usb_d_dev_ep_trans(const struct usb_d_transfer *trans)
{
    2278:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    227c:	b083      	sub	sp, #12
	uint8_t               epn = USB_EP_GET_N(trans->ep);
    227e:	7a03      	ldrb	r3, [r0, #8]
    2280:	b25e      	sxtb	r6, r3
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    2282:	f013 030f 	ands.w	r3, r3, #15
    2286:	f000 80c2 	beq.w	240e <_usb_d_dev_ep_trans+0x196>
    228a:	2e00      	cmp	r6, #0
    228c:	bfb4      	ite	lt
    228e:	1c9a      	addlt	r2, r3, #2
    2290:	461a      	movge	r2, r3
	return &dev_inst.ep[ep_index];
    2292:	4614      	mov	r4, r2
    2294:	4969      	ldr	r1, [pc, #420]	; (243c <_usb_d_dev_ep_trans+0x1c4>)
    2296:	f101 0760 	add.w	r7, r1, #96	; 0x60
    229a:	1c55      	adds	r5, r2, #1
    229c:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    22a0:	eb07 0785 	add.w	r7, r7, r5, lsl #2
	bool                  dir = USB_EP_GET_DIR(trans->ep);
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);

	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    22a4:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    22a8:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    22ac:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
    22b0:	f240 31ff 	movw	r1, #1023	; 0x3ff
    22b4:	428a      	cmp	r2, r1
    22b6:	d025      	beq.n	2304 <_usb_d_dev_ep_trans+0x8c>
    22b8:	1e55      	subs	r5, r2, #1
    22ba:	b2ad      	uxth	r5, r5
	bool     size_n_aligned = (trans->size & size_mask);
    22bc:	6841      	ldr	r1, [r0, #4]
    22be:	400d      	ands	r5, r1

	bool use_cache = false;

	volatile hal_atomic_t flags;

	if (epn > CONF_USB_D_MAX_EP_N) {
    22c0:	2b02      	cmp	r3, #2
    22c2:	f200 8092 	bhi.w	23ea <_usb_d_dev_ep_trans+0x172>
	 * 1. Buffer not in RAM (cache all).
	 * 2. IN/OUT with unaligned buffer (cache all).
	 * 3. OUT with unaligned packet size (cache last packet).
	 * 4. OUT size < 8 (sub-case for 3).
	 */
	if (!_usb_is_addr4dma(trans->buf, trans->size) || (!_usb_is_aligned(trans->buf))
    22c6:	6803      	ldr	r3, [r0, #0]
    22c8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
    22cc:	d31c      	bcc.n	2308 <_usb_d_dev_ep_trans+0x90>
    22ce:	eb03 0c01 	add.w	ip, r3, r1
    22d2:	f8df e180 	ldr.w	lr, [pc, #384]	; 2454 <_usb_d_dev_ep_trans+0x1dc>
    22d6:	45f4      	cmp	ip, lr
    22d8:	d816      	bhi.n	2308 <_usb_d_dev_ep_trans+0x90>
    22da:	f013 0f03 	tst.w	r3, #3
    22de:	d113      	bne.n	2308 <_usb_d_dev_ep_trans+0x90>
	    || (!dir && (trans->size < ept->size))) {
    22e0:	2e00      	cmp	r6, #0
    22e2:	db2a      	blt.n	233a <_usb_d_dev_ep_trans+0xc2>
    22e4:	428a      	cmp	r2, r1
    22e6:	f200 809c 	bhi.w	2422 <_usb_d_dev_ep_trans+0x1aa>
			return -USB_ERR_FUNC;
		}
		/* Use cache all the time. */
		use_cache = true;
	}
	if (!dir && size_n_aligned) {
    22ea:	b34d      	cbz	r5, 2340 <_usb_d_dev_ep_trans+0xc8>
		if (!ept->cache) {
    22ec:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    22f0:	4a52      	ldr	r2, [pc, #328]	; (243c <_usb_d_dev_ep_trans+0x1c4>)
    22f2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    22f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    22fa:	2b00      	cmp	r3, #0
    22fc:	d07b      	beq.n	23f6 <_usb_d_dev_ep_trans+0x17e>
	bool use_cache = false;
    22fe:	f04f 0800 	mov.w	r8, #0
    2302:	e00c      	b.n	231e <_usb_d_dev_ep_trans+0xa6>
	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    2304:	4615      	mov	r5, r2
    2306:	e7d9      	b.n	22bc <_usb_d_dev_ep_trans+0x44>
		if (!ept->cache) {
    2308:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    230c:	4a4b      	ldr	r2, [pc, #300]	; (243c <_usb_d_dev_ep_trans+0x1c4>)
    230e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    2312:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    2316:	2b00      	cmp	r3, #0
    2318:	d06a      	beq.n	23f0 <_usb_d_dev_ep_trans+0x178>
		use_cache = true;
    231a:	f04f 0801 	mov.w	r8, #1
		}
		/* Set 'use_cache' on last packet. */
	}

	/* Check halt */
	if (ept->flags.bits.is_stalled) {
    231e:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    2322:	4a46      	ldr	r2, [pc, #280]	; (243c <_usb_d_dev_ep_trans+0x1c4>)
    2324:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    2328:	f893 3087 	ldrb.w	r3, [r3, #135]	; 0x87
    232c:	f013 0f08 	tst.w	r3, #8
    2330:	d009      	beq.n	2346 <_usb_d_dev_ep_trans+0xce>
		return USB_HALTED;
    2332:	2002      	movs	r0, #2
	} else {
		_usb_d_dev_out_next(ept, false);
	}

	return ERR_NONE;
}
    2334:	b003      	add	sp, #12
    2336:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	bool use_cache = false;
    233a:	f04f 0800 	mov.w	r8, #0
    233e:	e7ee      	b.n	231e <_usb_d_dev_ep_trans+0xa6>
    2340:	f04f 0800 	mov.w	r8, #0
    2344:	e7eb      	b.n	231e <_usb_d_dev_ep_trans+0xa6>
    2346:	4682      	mov	sl, r0
	atomic_enter_critical(&flags);
    2348:	a801      	add	r0, sp, #4
    234a:	4b3d      	ldr	r3, [pc, #244]	; (2440 <_usb_d_dev_ep_trans+0x1c8>)
    234c:	4798      	blx	r3
	if (_usb_d_dev_ep_is_busy(ept)) {
    234e:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    2352:	4a3a      	ldr	r2, [pc, #232]	; (243c <_usb_d_dev_ep_trans+0x1c4>)
    2354:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    2358:	f893 3087 	ldrb.w	r3, [r3, #135]	; 0x87
    235c:	f013 0f40 	tst.w	r3, #64	; 0x40
    2360:	d13c      	bne.n	23dc <_usb_d_dev_ep_trans+0x164>
	ept->flags.bits.is_busy = 1;
    2362:	eb04 0984 	add.w	r9, r4, r4, lsl #2
    2366:	4b35      	ldr	r3, [pc, #212]	; (243c <_usb_d_dev_ep_trans+0x1c4>)
    2368:	eb03 0989 	add.w	r9, r3, r9, lsl #2
    236c:	f899 3087 	ldrb.w	r3, [r9, #135]	; 0x87
    2370:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    2374:	f889 3087 	strb.w	r3, [r9, #135]	; 0x87
	atomic_leave_critical(&flags);
    2378:	a801      	add	r0, sp, #4
    237a:	4b32      	ldr	r3, [pc, #200]	; (2444 <_usb_d_dev_ep_trans+0x1cc>)
    237c:	4798      	blx	r3
	ept->trans_buf   = trans->buf;
    237e:	f8da 3000 	ldr.w	r3, [sl]
    2382:	f8c9 3074 	str.w	r3, [r9, #116]	; 0x74
	ept->trans_size  = trans->size;
    2386:	f8da 3004 	ldr.w	r3, [sl, #4]
    238a:	f8c9 3078 	str.w	r3, [r9, #120]	; 0x78
	ept->trans_count = 0;
    238e:	2300      	movs	r3, #0
    2390:	f8c9 307c 	str.w	r3, [r9, #124]	; 0x7c
	bool                  dir = USB_EP_GET_DIR(trans->ep);
    2394:	0ff2      	lsrs	r2, r6, #31
	ept->flags.bits.dir       = dir;
    2396:	f899 3087 	ldrb.w	r3, [r9, #135]	; 0x87
    239a:	f362 13c7 	bfi	r3, r2, #7, #1
	ept->flags.bits.use_cache = use_cache;
    239e:	f368 1345 	bfi	r3, r8, #5, #1
    23a2:	f889 3087 	strb.w	r3, [r9, #135]	; 0x87
	ept->flags.bits.need_zlp  = (trans->zlp && (!size_n_aligned));
    23a6:	f89a 3009 	ldrb.w	r3, [sl, #9]
    23aa:	b1e3      	cbz	r3, 23e6 <_usb_d_dev_ep_trans+0x16e>
    23ac:	fab5 f585 	clz	r5, r5
    23b0:	096d      	lsrs	r5, r5, #5
    23b2:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    23b6:	4b21      	ldr	r3, [pc, #132]	; (243c <_usb_d_dev_ep_trans+0x1c4>)
    23b8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
    23bc:	f894 3087 	ldrb.w	r3, [r4, #135]	; 0x87
    23c0:	f365 1304 	bfi	r3, r5, #4, #1
    23c4:	f884 3087 	strb.w	r3, [r4, #135]	; 0x87
	if (dir) {
    23c8:	2e00      	cmp	r6, #0
		_usb_d_dev_in_next(ept, false);
    23ca:	f04f 0100 	mov.w	r1, #0
    23ce:	4638      	mov	r0, r7
    23d0:	bfb4      	ite	lt
    23d2:	4b1d      	ldrlt	r3, [pc, #116]	; (2448 <_usb_d_dev_ep_trans+0x1d0>)
		_usb_d_dev_out_next(ept, false);
    23d4:	4b1d      	ldrge	r3, [pc, #116]	; (244c <_usb_d_dev_ep_trans+0x1d4>)
    23d6:	4798      	blx	r3
	return ERR_NONE;
    23d8:	2000      	movs	r0, #0
    23da:	e7ab      	b.n	2334 <_usb_d_dev_ep_trans+0xbc>
		atomic_leave_critical(&flags);
    23dc:	a801      	add	r0, sp, #4
    23de:	4b19      	ldr	r3, [pc, #100]	; (2444 <_usb_d_dev_ep_trans+0x1cc>)
    23e0:	4798      	blx	r3
		return USB_BUSY;
    23e2:	2001      	movs	r0, #1
    23e4:	e7a6      	b.n	2334 <_usb_d_dev_ep_trans+0xbc>
    23e6:	2500      	movs	r5, #0
    23e8:	e7e3      	b.n	23b2 <_usb_d_dev_ep_trans+0x13a>
		return -USB_ERR_PARAM;
    23ea:	f06f 0011 	mvn.w	r0, #17
    23ee:	e7a1      	b.n	2334 <_usb_d_dev_ep_trans+0xbc>
			return -USB_ERR_FUNC;
    23f0:	f06f 0012 	mvn.w	r0, #18
    23f4:	e79e      	b.n	2334 <_usb_d_dev_ep_trans+0xbc>
			return -USB_ERR_PARAM;
    23f6:	f06f 0011 	mvn.w	r0, #17
    23fa:	e79b      	b.n	2334 <_usb_d_dev_ep_trans+0xbc>
			return -USB_ERR_FUNC;
    23fc:	f06f 0012 	mvn.w	r0, #18
    2400:	e798      	b.n	2334 <_usb_d_dev_ep_trans+0xbc>
	bool     size_n_aligned = (trans->size & size_mask);
    2402:	6841      	ldr	r1, [r0, #4]
    2404:	f3c1 0509 	ubfx	r5, r1, #0, #10
	return &dev_inst.ep[ep_index];
    2408:	4f11      	ldr	r7, [pc, #68]	; (2450 <_usb_d_dev_ep_trans+0x1d8>)
    240a:	2400      	movs	r4, #0
    240c:	e75b      	b.n	22c6 <_usb_d_dev_ep_trans+0x4e>
	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    240e:	4a0b      	ldr	r2, [pc, #44]	; (243c <_usb_d_dev_ep_trans+0x1c4>)
    2410:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
    2414:	f240 31ff 	movw	r1, #1023	; 0x3ff
    2418:	428a      	cmp	r2, r1
    241a:	d0f2      	beq.n	2402 <_usb_d_dev_ep_trans+0x18a>
	return &dev_inst.ep[ep_index];
    241c:	4f0c      	ldr	r7, [pc, #48]	; (2450 <_usb_d_dev_ep_trans+0x1d8>)
    241e:	2400      	movs	r4, #0
    2420:	e74a      	b.n	22b8 <_usb_d_dev_ep_trans+0x40>
		if (!ept->cache) {
    2422:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    2426:	4a05      	ldr	r2, [pc, #20]	; (243c <_usb_d_dev_ep_trans+0x1c4>)
    2428:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    242c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    2430:	2b00      	cmp	r3, #0
    2432:	d0e3      	beq.n	23fc <_usb_d_dev_ep_trans+0x184>
    2434:	f04f 0801 	mov.w	r8, #1
    2438:	e771      	b.n	231e <_usb_d_dev_ep_trans+0xa6>
    243a:	bf00      	nop
    243c:	2000061c 	.word	0x2000061c
    2440:	000030c5 	.word	0x000030c5
    2444:	000030d3 	.word	0x000030d3
    2448:	000014d9 	.word	0x000014d9
    244c:	0000165d 	.word	0x0000165d
    2450:	20000690 	.word	0x20000690
    2454:	20041fff 	.word	0x20041fff

00002458 <_usb_d_dev_ep_abort>:

void _usb_d_dev_ep_abort(const uint8_t ep)
{
    2458:	b508      	push	{r3, lr}
    245a:	b241      	sxtb	r1, r0
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    245c:	f010 000f 	ands.w	r0, r0, #15
    2460:	d00c      	beq.n	247c <_usb_d_dev_ep_abort+0x24>
    2462:	2900      	cmp	r1, #0
    2464:	bfb4      	ite	lt
    2466:	1c83      	addlt	r3, r0, #2
    2468:	4603      	movge	r3, r0
	uint8_t               epn = USB_EP_GET_N(ep);
	bool                  dir = USB_EP_GET_DIR(ep);
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
	if (epn > CONF_USB_D_MAX_EP_N) {
    246a:	2802      	cmp	r0, #2
    246c:	d900      	bls.n	2470 <_usb_d_dev_ep_abort+0x18>
    246e:	bd08      	pop	{r3, pc}
	return &dev_inst.ep[ep_index];
    2470:	2014      	movs	r0, #20
    2472:	fb03 0300 	mla	r3, r3, r0, r0
    2476:	4804      	ldr	r0, [pc, #16]	; (2488 <_usb_d_dev_ep_abort+0x30>)
    2478:	4418      	add	r0, r3
    247a:	e000      	b.n	247e <_usb_d_dev_ep_abort+0x26>
    247c:	4803      	ldr	r0, [pc, #12]	; (248c <_usb_d_dev_ep_abort+0x34>)
		return;
	}
	_usb_d_dev_trans_stop(ept, dir, USB_TRANS_ABORT);
    247e:	2202      	movs	r2, #2
    2480:	0fc9      	lsrs	r1, r1, #31
    2482:	4b03      	ldr	r3, [pc, #12]	; (2490 <_usb_d_dev_ep_abort+0x38>)
    2484:	4798      	blx	r3
    2486:	e7f2      	b.n	246e <_usb_d_dev_ep_abort+0x16>
    2488:	2000067c 	.word	0x2000067c
    248c:	20000690 	.word	0x20000690
    2490:	00001329 	.word	0x00001329

00002494 <_usb_d_dev_register_callback>:
	return USB_OK;
}

void _usb_d_dev_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    2494:	4b06      	ldr	r3, [pc, #24]	; (24b0 <_usb_d_dev_register_callback+0x1c>)
    2496:	2900      	cmp	r1, #0
    2498:	bf08      	it	eq
    249a:	4619      	moveq	r1, r3
	if (type == USB_D_CB_EVENT) {
    249c:	2801      	cmp	r0, #1
    249e:	d003      	beq.n	24a8 <_usb_d_dev_register_callback+0x14>
		dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)f;
	} else if (type == USB_D_CB_SOF) {
    24a0:	b908      	cbnz	r0, 24a6 <_usb_d_dev_register_callback+0x12>
		dev_inst.callbacks.sof = (_usb_d_dev_sof_cb_t)f;
    24a2:	4b04      	ldr	r3, [pc, #16]	; (24b4 <_usb_d_dev_register_callback+0x20>)
    24a4:	6619      	str	r1, [r3, #96]	; 0x60
    24a6:	4770      	bx	lr
		dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)f;
    24a8:	4b02      	ldr	r3, [pc, #8]	; (24b4 <_usb_d_dev_register_callback+0x20>)
    24aa:	6659      	str	r1, [r3, #100]	; 0x64
    24ac:	4770      	bx	lr
    24ae:	bf00      	nop
    24b0:	00001251 	.word	0x00001251
    24b4:	2000061c 	.word	0x2000061c

000024b8 <_usb_d_dev_register_ep_callback>:
	}
}

void _usb_d_dev_register_ep_callback(const enum usb_d_dev_ep_cb_type type, const FUNC_PTR func)
{
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    24b8:	4b09      	ldr	r3, [pc, #36]	; (24e0 <_usb_d_dev_register_ep_callback+0x28>)
    24ba:	2900      	cmp	r1, #0
    24bc:	bf08      	it	eq
    24be:	4619      	moveq	r1, r3
	if (type == USB_D_DEV_EP_CB_SETUP) {
    24c0:	4603      	mov	r3, r0
    24c2:	b130      	cbz	r0, 24d2 <_usb_d_dev_register_ep_callback+0x1a>
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
	} else if (type == USB_D_DEV_EP_CB_MORE) {
    24c4:	2801      	cmp	r0, #1
    24c6:	d007      	beq.n	24d8 <_usb_d_dev_register_ep_callback+0x20>
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
	} else if (type == USB_D_DEV_EP_CB_DONE) {
    24c8:	2802      	cmp	r0, #2
		dev_inst.ep_callbacks.done = (_usb_d_dev_ep_cb_done_t)f;
    24ca:	bf04      	itt	eq
    24cc:	4b05      	ldreq	r3, [pc, #20]	; (24e4 <_usb_d_dev_register_ep_callback+0x2c>)
    24ce:	6719      	streq	r1, [r3, #112]	; 0x70
    24d0:	4770      	bx	lr
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
    24d2:	4b04      	ldr	r3, [pc, #16]	; (24e4 <_usb_d_dev_register_ep_callback+0x2c>)
    24d4:	6699      	str	r1, [r3, #104]	; 0x68
    24d6:	4770      	bx	lr
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
    24d8:	4b02      	ldr	r3, [pc, #8]	; (24e4 <_usb_d_dev_register_ep_callback+0x2c>)
    24da:	66d9      	str	r1, [r3, #108]	; 0x6c
    24dc:	4770      	bx	lr
    24de:	bf00      	nop
    24e0:	00001251 	.word	0x00001251
    24e4:	2000061c 	.word	0x2000061c

000024e8 <USB_0_Handler>:

/**
 * \brief USB interrupt handler
 */
void USB_0_Handler(void)
{
    24e8:	b508      	push	{r3, lr}

	_usb_d_dev_handler();
    24ea:	4b01      	ldr	r3, [pc, #4]	; (24f0 <USB_0_Handler+0x8>)
    24ec:	4798      	blx	r3
    24ee:	bd08      	pop	{r3, pc}
    24f0:	0000184d 	.word	0x0000184d

000024f4 <USB_1_Handler>:
}
/**
 * \brief USB interrupt handler
 */
void USB_1_Handler(void)
{
    24f4:	b508      	push	{r3, lr}

	_usb_d_dev_handler();
    24f6:	4b01      	ldr	r3, [pc, #4]	; (24fc <USB_1_Handler+0x8>)
    24f8:	4798      	blx	r3
    24fa:	bd08      	pop	{r3, pc}
    24fc:	0000184d 	.word	0x0000184d

00002500 <USB_2_Handler>:
}
/**
 * \brief USB interrupt handler
 */
void USB_2_Handler(void)
{
    2500:	b508      	push	{r3, lr}

	_usb_d_dev_handler();
    2502:	4b01      	ldr	r3, [pc, #4]	; (2508 <USB_2_Handler+0x8>)
    2504:	4798      	blx	r3
    2506:	bd08      	pop	{r3, pc}
    2508:	0000184d 	.word	0x0000184d

0000250c <USB_3_Handler>:
}
/**
 * \brief USB interrupt handler
 */
void USB_3_Handler(void)
{
    250c:	b508      	push	{r3, lr}

	_usb_d_dev_handler();
    250e:	4b01      	ldr	r3, [pc, #4]	; (2514 <USB_3_Handler+0x8>)
    2510:	4798      	blx	r3
    2512:	bd08      	pop	{r3, pc}
    2514:	0000184d 	.word	0x0000184d

00002518 <cdcdf_acm_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    2518:	b5f0      	push	{r4, r5, r6, r7, lr}
    251a:	b083      	sub	sp, #12
	if (0x01 != ((req->bmRequestType >> 5) & 0x03)) { // class request
    251c:	780b      	ldrb	r3, [r1, #0]
    251e:	f3c3 1441 	ubfx	r4, r3, #5, #2
    2522:	2c01      	cmp	r4, #1
    2524:	d15e      	bne.n	25e4 <cdcdf_acm_req+0xcc>
		return ERR_NOT_FOUND;
	}
	if ((req->wIndex == _cdcdf_acm_funcd.func_iface[0]) || (req->wIndex == _cdcdf_acm_funcd.func_iface[1])) {
    2526:	888c      	ldrh	r4, [r1, #4]
    2528:	4d35      	ldr	r5, [pc, #212]	; (2600 <cdcdf_acm_req+0xe8>)
    252a:	782d      	ldrb	r5, [r5, #0]
    252c:	42a5      	cmp	r5, r4
    252e:	d003      	beq.n	2538 <cdcdf_acm_req+0x20>
    2530:	4d33      	ldr	r5, [pc, #204]	; (2600 <cdcdf_acm_req+0xe8>)
    2532:	786d      	ldrb	r5, [r5, #1]
    2534:	42a5      	cmp	r5, r4
    2536:	d158      	bne.n	25ea <cdcdf_acm_req+0xd2>
    2538:	4616      	mov	r6, r2
    253a:	460c      	mov	r4, r1
    253c:	4605      	mov	r5, r0
		if (req->bmRequestType & USB_EP_DIR_IN) {
    253e:	f013 0f80 	tst.w	r3, #128	; 0x80
    2542:	d10c      	bne.n	255e <cdcdf_acm_req+0x46>
	uint16_t                   len      = req->wLength;
    2544:	88cf      	ldrh	r7, [r1, #6]
	uint8_t *                  ctrl_buf = usbdc_get_ctrl_buffer();
    2546:	4b2f      	ldr	r3, [pc, #188]	; (2604 <cdcdf_acm_req+0xec>)
    2548:	4798      	blx	r3
    254a:	4601      	mov	r1, r0
	switch (req->bRequest) {
    254c:	7863      	ldrb	r3, [r4, #1]
    254e:	2b20      	cmp	r3, #32
    2550:	d013      	beq.n	257a <cdcdf_acm_req+0x62>
    2552:	2b22      	cmp	r3, #34	; 0x22
    2554:	d032      	beq.n	25bc <cdcdf_acm_req+0xa4>
		return ERR_INVALID_ARG;
    2556:	f06f 000c 	mvn.w	r0, #12
			return cdcdf_acm_set_req(ep, req, stage);
		}
	} else {
		return ERR_NOT_FOUND;
	}
}
    255a:	b003      	add	sp, #12
    255c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (USB_DATA_STAGE == stage) {
    255e:	2a01      	cmp	r2, #1
    2560:	d046      	beq.n	25f0 <cdcdf_acm_req+0xd8>
	switch (req->bRequest) {
    2562:	784b      	ldrb	r3, [r1, #1]
    2564:	2b21      	cmp	r3, #33	; 0x21
    2566:	d145      	bne.n	25f4 <cdcdf_acm_req+0xdc>
		if (sizeof(struct usb_cdc_line_coding) != len) {
    2568:	88cb      	ldrh	r3, [r1, #6]
    256a:	2b07      	cmp	r3, #7
    256c:	d145      	bne.n	25fa <cdcdf_acm_req+0xe2>
		return usbdc_xfer(ep, (uint8_t *)&usbd_cdc_line_coding, len, false);
    256e:	2300      	movs	r3, #0
    2570:	2207      	movs	r2, #7
    2572:	4925      	ldr	r1, [pc, #148]	; (2608 <cdcdf_acm_req+0xf0>)
    2574:	4c25      	ldr	r4, [pc, #148]	; (260c <cdcdf_acm_req+0xf4>)
    2576:	47a0      	blx	r4
    2578:	e7ef      	b.n	255a <cdcdf_acm_req+0x42>
		if (sizeof(struct usb_cdc_line_coding) != len) {
    257a:	2f07      	cmp	r7, #7
    257c:	d12b      	bne.n	25d6 <cdcdf_acm_req+0xbe>
		if (USB_SETUP_STAGE == stage) {
    257e:	b1be      	cbz	r6, 25b0 <cdcdf_acm_req+0x98>
			memcpy(&line_coding_tmp, ctrl_buf, sizeof(struct usb_cdc_line_coding));
    2580:	6800      	ldr	r0, [r0, #0]
    2582:	9000      	str	r0, [sp, #0]
    2584:	888a      	ldrh	r2, [r1, #4]
    2586:	798b      	ldrb	r3, [r1, #6]
    2588:	f8ad 2004 	strh.w	r2, [sp, #4]
    258c:	f88d 3006 	strb.w	r3, [sp, #6]
			if ((NULL == cdcdf_acm_set_line_coding) || (true == cdcdf_acm_set_line_coding(&line_coding_tmp))) {
    2590:	4b1b      	ldr	r3, [pc, #108]	; (2600 <cdcdf_acm_req+0xe8>)
    2592:	691b      	ldr	r3, [r3, #16]
    2594:	b113      	cbz	r3, 259c <cdcdf_acm_req+0x84>
    2596:	4668      	mov	r0, sp
    2598:	4798      	blx	r3
    259a:	b1f8      	cbz	r0, 25dc <cdcdf_acm_req+0xc4>
				usbd_cdc_line_coding = line_coding_tmp;
    259c:	4b18      	ldr	r3, [pc, #96]	; (2600 <cdcdf_acm_req+0xe8>)
    259e:	aa02      	add	r2, sp, #8
    25a0:	e912 0003 	ldmdb	r2, {r0, r1}
    25a4:	6098      	str	r0, [r3, #8]
    25a6:	8199      	strh	r1, [r3, #12]
    25a8:	0c09      	lsrs	r1, r1, #16
    25aa:	7399      	strb	r1, [r3, #14]
			return ERR_NONE;
    25ac:	2000      	movs	r0, #0
    25ae:	e7d4      	b.n	255a <cdcdf_acm_req+0x42>
			return usbdc_xfer(ep, ctrl_buf, len, false);
    25b0:	2300      	movs	r3, #0
    25b2:	2207      	movs	r2, #7
    25b4:	4628      	mov	r0, r5
    25b6:	4c15      	ldr	r4, [pc, #84]	; (260c <cdcdf_acm_req+0xf4>)
    25b8:	47a0      	blx	r4
    25ba:	e7ce      	b.n	255a <cdcdf_acm_req+0x42>
		usbdc_xfer(0, NULL, 0, 0);
    25bc:	2300      	movs	r3, #0
    25be:	461a      	mov	r2, r3
    25c0:	4619      	mov	r1, r3
    25c2:	4618      	mov	r0, r3
    25c4:	4d11      	ldr	r5, [pc, #68]	; (260c <cdcdf_acm_req+0xf4>)
    25c6:	47a8      	blx	r5
		if (NULL != cdcdf_acm_notify_state) {
    25c8:	4b0d      	ldr	r3, [pc, #52]	; (2600 <cdcdf_acm_req+0xe8>)
    25ca:	695b      	ldr	r3, [r3, #20]
    25cc:	b143      	cbz	r3, 25e0 <cdcdf_acm_req+0xc8>
			cdcdf_acm_notify_state(req->wValue);
    25ce:	8860      	ldrh	r0, [r4, #2]
    25d0:	4798      	blx	r3
		return ERR_NONE;
    25d2:	2000      	movs	r0, #0
    25d4:	e7c1      	b.n	255a <cdcdf_acm_req+0x42>
			return ERR_INVALID_DATA;
    25d6:	f04f 30ff 	mov.w	r0, #4294967295
    25da:	e7be      	b.n	255a <cdcdf_acm_req+0x42>
			return ERR_NONE;
    25dc:	2000      	movs	r0, #0
    25de:	e7bc      	b.n	255a <cdcdf_acm_req+0x42>
		return ERR_NONE;
    25e0:	2000      	movs	r0, #0
			return cdcdf_acm_set_req(ep, req, stage);
    25e2:	e7ba      	b.n	255a <cdcdf_acm_req+0x42>
		return ERR_NOT_FOUND;
    25e4:	f06f 0009 	mvn.w	r0, #9
    25e8:	e7b7      	b.n	255a <cdcdf_acm_req+0x42>
		return ERR_NOT_FOUND;
    25ea:	f06f 0009 	mvn.w	r0, #9
    25ee:	e7b4      	b.n	255a <cdcdf_acm_req+0x42>
		return ERR_NONE;
    25f0:	2000      	movs	r0, #0
    25f2:	e7b2      	b.n	255a <cdcdf_acm_req+0x42>
		return ERR_INVALID_ARG;
    25f4:	f06f 000c 	mvn.w	r0, #12
    25f8:	e7af      	b.n	255a <cdcdf_acm_req+0x42>
			return ERR_INVALID_DATA;
    25fa:	f04f 30ff 	mov.w	r0, #4294967295
    25fe:	e7ac      	b.n	255a <cdcdf_acm_req+0x42>
    2600:	20000804 	.word	0x20000804
    2604:	00002f39 	.word	0x00002f39
    2608:	2000080c 	.word	0x2000080c
    260c:	00002a15 	.word	0x00002a15

00002610 <cdcdf_acm_ctrl>:
{
    2610:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2614:	b083      	sub	sp, #12
    2616:	4616      	mov	r6, r2
	switch (ctrl) {
    2618:	2901      	cmp	r1, #1
    261a:	d066      	beq.n	26ea <cdcdf_acm_ctrl+0xda>
    261c:	b141      	cbz	r1, 2630 <cdcdf_acm_ctrl+0x20>
		return ERR_INVALID_ARG;
    261e:	2902      	cmp	r1, #2
    2620:	bf0c      	ite	eq
    2622:	f06f 001a 	mvneq.w	r0, #26
    2626:	f06f 000c 	mvnne.w	r0, #12
}
    262a:	b003      	add	sp, #12
    262c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
    2630:	f8d0 a008 	ldr.w	sl, [r0, #8]
	ifc = desc->sod;
    2634:	6810      	ldr	r0, [r2, #0]
		if (NULL == ifc) {
    2636:	2800      	cmp	r0, #0
    2638:	f000 8085 	beq.w	2746 <cdcdf_acm_ctrl+0x136>
    263c:	f10a 3bff 	add.w	fp, sl, #4294967295
    2640:	f10a 0301 	add.w	r3, sl, #1
    2644:	9300      	str	r3, [sp, #0]
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    2646:	4f46      	ldr	r7, [pc, #280]	; (2760 <cdcdf_acm_ctrl+0x150>)
				usb_d_ep_enable(func_data->func_ep_out);
    2648:	f8df 9124 	ldr.w	r9, [pc, #292]	; 2770 <cdcdf_acm_ctrl+0x160>
			ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    264c:	f8df 8124 	ldr.w	r8, [pc, #292]	; 2774 <cdcdf_acm_ctrl+0x164>
		ifc_desc.bInterfaceNumber = ifc[2];
    2650:	7882      	ldrb	r2, [r0, #2]
		if ((CDC_CLASS_COMM == ifc_desc.bInterfaceClass) || (CDC_CLASS_DATA == ifc_desc.bInterfaceClass)) {
    2652:	7943      	ldrb	r3, [r0, #5]
    2654:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
    2658:	2b02      	cmp	r3, #2
    265a:	d002      	beq.n	2662 <cdcdf_acm_ctrl+0x52>
			return ERR_NOT_FOUND;
    265c:	f06f 0009 	mvn.w	r0, #9
    2660:	e7e3      	b.n	262a <cdcdf_acm_ctrl+0x1a>
    2662:	f10b 0b01 	add.w	fp, fp, #1
			if (func_data->func_iface[i] == ifc_desc.bInterfaceNumber) { // Initialized
    2666:	f89b 3000 	ldrb.w	r3, [fp]
    266a:	429a      	cmp	r2, r3
    266c:	d06e      	beq.n	274c <cdcdf_acm_ctrl+0x13c>
			} else if (func_data->func_iface[i] != 0xFF) { // Occupied
    266e:	2bff      	cmp	r3, #255	; 0xff
    2670:	d16f      	bne.n	2752 <cdcdf_acm_ctrl+0x142>
				func_data->func_iface[i] = ifc_desc.bInterfaceNumber;
    2672:	f88b 2000 	strb.w	r2, [fp]
		ep = usb_find_desc(ifc, desc->eod, USB_DT_ENDPOINT);
    2676:	2205      	movs	r2, #5
    2678:	6871      	ldr	r1, [r6, #4]
    267a:	4b3a      	ldr	r3, [pc, #232]	; (2764 <cdcdf_acm_ctrl+0x154>)
    267c:	4798      	blx	r3
		while (NULL != ep) {
    267e:	4604      	mov	r4, r0
    2680:	b1f8      	cbz	r0, 26c2 <cdcdf_acm_ctrl+0xb2>
    2682:	f8cd b004 	str.w	fp, [sp, #4]
			ep_desc.bEndpointAddress = ep[2];
    2686:	78a5      	ldrb	r5, [r4, #2]
 *  \param[in] ptr Byte pointer to the address to get data
 *  \return a 16-bit word
 */
static inline uint16_t usb_get_u16(const uint8_t *ptr)
{
	return (ptr[0] + (ptr[1] << 8));
    2688:	7963      	ldrb	r3, [r4, #5]
    268a:	7922      	ldrb	r2, [r4, #4]
    268c:	eb02 2203 	add.w	r2, r2, r3, lsl #8
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    2690:	b292      	uxth	r2, r2
    2692:	78e1      	ldrb	r1, [r4, #3]
    2694:	4628      	mov	r0, r5
    2696:	47b8      	blx	r7
    2698:	2800      	cmp	r0, #0
    269a:	d15d      	bne.n	2758 <cdcdf_acm_ctrl+0x148>
			if (ep_desc.bEndpointAddress & USB_EP_DIR_IN) {
    269c:	f015 0f80 	tst.w	r5, #128	; 0x80
				func_data->func_ep_in[i] = ep_desc.bEndpointAddress;
    26a0:	bf14      	ite	ne
    26a2:	f88b 5002 	strbne.w	r5, [fp, #2]
				func_data->func_ep_out = ep_desc.bEndpointAddress;
    26a6:	f88a 5004 	strbeq.w	r5, [sl, #4]
				usb_d_ep_enable(func_data->func_ep_out);
    26aa:	4628      	mov	r0, r5
    26ac:	47c8      	blx	r9
			desc->sod = ep;
    26ae:	6034      	str	r4, [r6, #0]
 *  \param[in] desc Byte pointer to the descriptor start address
 *  \return Byte pointer to the next descriptor
 */
static inline uint8_t *usb_desc_next(uint8_t *desc)
{
	return (desc + usb_desc_len(desc));
    26b0:	7820      	ldrb	r0, [r4, #0]
			ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    26b2:	6871      	ldr	r1, [r6, #4]
    26b4:	4420      	add	r0, r4
    26b6:	47c0      	blx	r8
		while (NULL != ep) {
    26b8:	4604      	mov	r4, r0
    26ba:	2800      	cmp	r0, #0
    26bc:	d1e3      	bne.n	2686 <cdcdf_acm_ctrl+0x76>
    26be:	f8dd b004 	ldr.w	fp, [sp, #4]
		ifc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_INTERFACE);
    26c2:	6833      	ldr	r3, [r6, #0]
    26c4:	7818      	ldrb	r0, [r3, #0]
    26c6:	2204      	movs	r2, #4
    26c8:	6871      	ldr	r1, [r6, #4]
    26ca:	4418      	add	r0, r3
    26cc:	4b25      	ldr	r3, [pc, #148]	; (2764 <cdcdf_acm_ctrl+0x154>)
    26ce:	4798      	blx	r3
	for (i = 0; i < 2; i++) {
    26d0:	9b00      	ldr	r3, [sp, #0]
    26d2:	459b      	cmp	fp, r3
    26d4:	d004      	beq.n	26e0 <cdcdf_acm_ctrl+0xd0>
		if (NULL == ifc) {
    26d6:	2800      	cmp	r0, #0
    26d8:	d1ba      	bne.n	2650 <cdcdf_acm_ctrl+0x40>
			return ERR_NOT_FOUND;
    26da:	f06f 0009 	mvn.w	r0, #9
    26de:	e7a4      	b.n	262a <cdcdf_acm_ctrl+0x1a>
	_cdcdf_acm_funcd.enabled = true;
    26e0:	2201      	movs	r2, #1
    26e2:	4b21      	ldr	r3, [pc, #132]	; (2768 <cdcdf_acm_ctrl+0x158>)
    26e4:	715a      	strb	r2, [r3, #5]
	return ERR_NONE;
    26e6:	2000      	movs	r0, #0
    26e8:	e79f      	b.n	262a <cdcdf_acm_ctrl+0x1a>
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
    26ea:	6884      	ldr	r4, [r0, #8]
	if (desc) {
    26ec:	b142      	cbz	r2, 2700 <cdcdf_acm_ctrl+0xf0>
		ifc_desc.bInterfaceClass = desc->sod[5];
    26ee:	6813      	ldr	r3, [r2, #0]
		if ((ifc_desc.bInterfaceClass != CDC_CLASS_COMM) && (ifc_desc.bInterfaceClass != CDC_CLASS_DATA)) {
    26f0:	795b      	ldrb	r3, [r3, #5]
    26f2:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
    26f6:	2b02      	cmp	r3, #2
    26f8:	d002      	beq.n	2700 <cdcdf_acm_ctrl+0xf0>
			return ERR_NOT_FOUND;
    26fa:	f06f 0009 	mvn.w	r0, #9
    26fe:	e794      	b.n	262a <cdcdf_acm_ctrl+0x1a>
		if (func_data->func_iface[i] == 0xFF) {
    2700:	7823      	ldrb	r3, [r4, #0]
    2702:	2bff      	cmp	r3, #255	; 0xff
    2704:	d008      	beq.n	2718 <cdcdf_acm_ctrl+0x108>
			func_data->func_iface[i] = 0xFF;
    2706:	23ff      	movs	r3, #255	; 0xff
    2708:	7023      	strb	r3, [r4, #0]
			if (func_data->func_ep_in[i] != 0xFF) {
    270a:	78a0      	ldrb	r0, [r4, #2]
    270c:	4298      	cmp	r0, r3
    270e:	d003      	beq.n	2718 <cdcdf_acm_ctrl+0x108>
				usb_d_ep_deinit(func_data->func_ep_in[i]);
    2710:	4b16      	ldr	r3, [pc, #88]	; (276c <cdcdf_acm_ctrl+0x15c>)
    2712:	4798      	blx	r3
				func_data->func_ep_in[i] = 0xFF;
    2714:	23ff      	movs	r3, #255	; 0xff
    2716:	70a3      	strb	r3, [r4, #2]
		if (func_data->func_iface[i] == 0xFF) {
    2718:	7863      	ldrb	r3, [r4, #1]
    271a:	2bff      	cmp	r3, #255	; 0xff
    271c:	d008      	beq.n	2730 <cdcdf_acm_ctrl+0x120>
			func_data->func_iface[i] = 0xFF;
    271e:	23ff      	movs	r3, #255	; 0xff
    2720:	7063      	strb	r3, [r4, #1]
			if (func_data->func_ep_in[i] != 0xFF) {
    2722:	78e0      	ldrb	r0, [r4, #3]
    2724:	4298      	cmp	r0, r3
    2726:	d003      	beq.n	2730 <cdcdf_acm_ctrl+0x120>
				usb_d_ep_deinit(func_data->func_ep_in[i]);
    2728:	4b10      	ldr	r3, [pc, #64]	; (276c <cdcdf_acm_ctrl+0x15c>)
    272a:	4798      	blx	r3
				func_data->func_ep_in[i] = 0xFF;
    272c:	23ff      	movs	r3, #255	; 0xff
    272e:	70e3      	strb	r3, [r4, #3]
	if (func_data->func_ep_out != 0xFF) {
    2730:	7920      	ldrb	r0, [r4, #4]
    2732:	28ff      	cmp	r0, #255	; 0xff
    2734:	d003      	beq.n	273e <cdcdf_acm_ctrl+0x12e>
		usb_d_ep_deinit(func_data->func_ep_out);
    2736:	4b0d      	ldr	r3, [pc, #52]	; (276c <cdcdf_acm_ctrl+0x15c>)
    2738:	4798      	blx	r3
		func_data->func_ep_out = 0xFF;
    273a:	23ff      	movs	r3, #255	; 0xff
    273c:	7123      	strb	r3, [r4, #4]
	_cdcdf_acm_funcd.enabled = false;
    273e:	2000      	movs	r0, #0
    2740:	4b09      	ldr	r3, [pc, #36]	; (2768 <cdcdf_acm_ctrl+0x158>)
    2742:	7158      	strb	r0, [r3, #5]
    2744:	e771      	b.n	262a <cdcdf_acm_ctrl+0x1a>
			return ERR_NOT_FOUND;
    2746:	f06f 0009 	mvn.w	r0, #9
    274a:	e76e      	b.n	262a <cdcdf_acm_ctrl+0x1a>
				return ERR_ALREADY_INITIALIZED;
    274c:	f06f 0011 	mvn.w	r0, #17
    2750:	e76b      	b.n	262a <cdcdf_acm_ctrl+0x1a>
				return ERR_NO_RESOURCE;
    2752:	f06f 001b 	mvn.w	r0, #27
    2756:	e768      	b.n	262a <cdcdf_acm_ctrl+0x1a>
				return ERR_NOT_INITIALIZED;
    2758:	f06f 0013 	mvn.w	r0, #19
    275c:	e765      	b.n	262a <cdcdf_acm_ctrl+0x1a>
    275e:	bf00      	nop
    2760:	00000d29 	.word	0x00000d29
    2764:	00002f59 	.word	0x00002f59
    2768:	20000804 	.word	0x20000804
    276c:	00000d91 	.word	0x00000d91
    2770:	00000dbd 	.word	0x00000dbd
    2774:	00002f93 	.word	0x00002f93

00002778 <cdcdf_acm_init>:

/**
 * \brief Initialize the USB CDC ACM Function Driver
 */
int32_t cdcdf_acm_init(void)
{
    2778:	b508      	push	{r3, lr}
	if (usbdc_get_state() > USBD_S_POWER) {
    277a:	4b0a      	ldr	r3, [pc, #40]	; (27a4 <cdcdf_acm_init+0x2c>)
    277c:	4798      	blx	r3
    277e:	2801      	cmp	r0, #1
    2780:	d80c      	bhi.n	279c <cdcdf_acm_init+0x24>
		return ERR_DENIED;
	}

	_cdcdf_acm.ctrl      = cdcdf_acm_ctrl;
    2782:	4809      	ldr	r0, [pc, #36]	; (27a8 <cdcdf_acm_init+0x30>)
    2784:	4b09      	ldr	r3, [pc, #36]	; (27ac <cdcdf_acm_init+0x34>)
    2786:	61c3      	str	r3, [r0, #28]
	_cdcdf_acm.func_data = &_cdcdf_acm_funcd;
    2788:	6200      	str	r0, [r0, #32]

	usbdc_register_function(&_cdcdf_acm);
    278a:	3018      	adds	r0, #24
    278c:	4b08      	ldr	r3, [pc, #32]	; (27b0 <cdcdf_acm_init+0x38>)
    278e:	4798      	blx	r3
	usbdc_register_handler(USBDC_HDL_REQ, &cdcdf_acm_req_h);
    2790:	4908      	ldr	r1, [pc, #32]	; (27b4 <cdcdf_acm_init+0x3c>)
    2792:	2001      	movs	r0, #1
    2794:	4b08      	ldr	r3, [pc, #32]	; (27b8 <cdcdf_acm_init+0x40>)
    2796:	4798      	blx	r3
	return ERR_NONE;
    2798:	2000      	movs	r0, #0
    279a:	bd08      	pop	{r3, pc}
		return ERR_DENIED;
    279c:	f06f 0010 	mvn.w	r0, #16
}
    27a0:	bd08      	pop	{r3, pc}
    27a2:	bf00      	nop
    27a4:	00002f45 	.word	0x00002f45
    27a8:	20000804 	.word	0x20000804
    27ac:	00002611 	.word	0x00002611
    27b0:	00002ee5 	.word	0x00002ee5
    27b4:	20000060 	.word	0x20000060
    27b8:	00002e51 	.word	0x00002e51

000027bc <cdcdf_acm_read>:
/**
 * \brief Check whether CDC ACM Function is enabled
 */
bool cdcdf_acm_is_enabled(void)
{
	return _cdcdf_acm_funcd.enabled;
    27bc:	4b07      	ldr	r3, [pc, #28]	; (27dc <cdcdf_acm_read+0x20>)
	if (!cdcdf_acm_is_enabled()) {
    27be:	795b      	ldrb	r3, [r3, #5]
    27c0:	b143      	cbz	r3, 27d4 <cdcdf_acm_read+0x18>
{
    27c2:	b510      	push	{r4, lr}
    27c4:	460a      	mov	r2, r1
    27c6:	4601      	mov	r1, r0
	return usbdc_xfer(_cdcdf_acm_funcd.func_ep_out, buf, size, false);
    27c8:	2300      	movs	r3, #0
    27ca:	4804      	ldr	r0, [pc, #16]	; (27dc <cdcdf_acm_read+0x20>)
    27cc:	7900      	ldrb	r0, [r0, #4]
    27ce:	4c04      	ldr	r4, [pc, #16]	; (27e0 <cdcdf_acm_read+0x24>)
    27d0:	47a0      	blx	r4
    27d2:	bd10      	pop	{r4, pc}
		return ERR_DENIED;
    27d4:	f06f 0010 	mvn.w	r0, #16
    27d8:	4770      	bx	lr
    27da:	bf00      	nop
    27dc:	20000804 	.word	0x20000804
    27e0:	00002a15 	.word	0x00002a15

000027e4 <cdcdf_acm_write>:
	return _cdcdf_acm_funcd.enabled;
    27e4:	4b07      	ldr	r3, [pc, #28]	; (2804 <cdcdf_acm_write+0x20>)
	if (!cdcdf_acm_is_enabled()) {
    27e6:	795b      	ldrb	r3, [r3, #5]
    27e8:	b143      	cbz	r3, 27fc <cdcdf_acm_write+0x18>
{
    27ea:	b510      	push	{r4, lr}
    27ec:	460a      	mov	r2, r1
    27ee:	4601      	mov	r1, r0
	return usbdc_xfer(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX], buf, size, true);
    27f0:	2301      	movs	r3, #1
    27f2:	4804      	ldr	r0, [pc, #16]	; (2804 <cdcdf_acm_write+0x20>)
    27f4:	78c0      	ldrb	r0, [r0, #3]
    27f6:	4c04      	ldr	r4, [pc, #16]	; (2808 <cdcdf_acm_write+0x24>)
    27f8:	47a0      	blx	r4
    27fa:	bd10      	pop	{r4, pc}
		return ERR_DENIED;
    27fc:	f06f 0010 	mvn.w	r0, #16
    2800:	4770      	bx	lr
    2802:	bf00      	nop
    2804:	20000804 	.word	0x20000804
    2808:	00002a15 	.word	0x00002a15

0000280c <cdcdf_acm_stop_xfer>:
{
    280c:	b538      	push	{r3, r4, r5, lr}
	usb_d_ep_abort(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX]);
    280e:	4d03      	ldr	r5, [pc, #12]	; (281c <cdcdf_acm_stop_xfer+0x10>)
    2810:	78e8      	ldrb	r0, [r5, #3]
    2812:	4c03      	ldr	r4, [pc, #12]	; (2820 <cdcdf_acm_stop_xfer+0x14>)
    2814:	47a0      	blx	r4
	usb_d_ep_abort(_cdcdf_acm_funcd.func_ep_out);
    2816:	7928      	ldrb	r0, [r5, #4]
    2818:	47a0      	blx	r4
    281a:	bd38      	pop	{r3, r4, r5, pc}
    281c:	20000804 	.word	0x20000804
    2820:	00000f29 	.word	0x00000f29

00002824 <cdcdf_acm_register_callback>:
{
    2824:	b508      	push	{r3, lr}
	switch (cb_type) {
    2826:	2803      	cmp	r0, #3
    2828:	d81b      	bhi.n	2862 <cdcdf_acm_register_callback+0x3e>
    282a:	e8df f000 	tbb	[pc, r0]
    282e:	0a02      	.short	0x0a02
    2830:	1612      	.short	0x1612
		usb_d_ep_register_callback(_cdcdf_acm_funcd.func_ep_out, USB_D_EP_CB_XFER, func);
    2832:	460a      	mov	r2, r1
    2834:	2102      	movs	r1, #2
    2836:	4b0c      	ldr	r3, [pc, #48]	; (2868 <cdcdf_acm_register_callback+0x44>)
    2838:	7918      	ldrb	r0, [r3, #4]
    283a:	4b0c      	ldr	r3, [pc, #48]	; (286c <cdcdf_acm_register_callback+0x48>)
    283c:	4798      	blx	r3
	return ERR_NONE;
    283e:	2000      	movs	r0, #0
		break;
    2840:	bd08      	pop	{r3, pc}
		usb_d_ep_register_callback(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX], USB_D_EP_CB_XFER, func);
    2842:	460a      	mov	r2, r1
    2844:	2102      	movs	r1, #2
    2846:	4b08      	ldr	r3, [pc, #32]	; (2868 <cdcdf_acm_register_callback+0x44>)
    2848:	78d8      	ldrb	r0, [r3, #3]
    284a:	4b08      	ldr	r3, [pc, #32]	; (286c <cdcdf_acm_register_callback+0x48>)
    284c:	4798      	blx	r3
	return ERR_NONE;
    284e:	2000      	movs	r0, #0
		break;
    2850:	bd08      	pop	{r3, pc}
		cdcdf_acm_set_line_coding = (cdcdf_acm_set_line_coding_t)func;
    2852:	4b05      	ldr	r3, [pc, #20]	; (2868 <cdcdf_acm_register_callback+0x44>)
    2854:	6119      	str	r1, [r3, #16]
	return ERR_NONE;
    2856:	2000      	movs	r0, #0
		break;
    2858:	bd08      	pop	{r3, pc}
		cdcdf_acm_notify_state = (cdcdf_acm_notify_state_t)func;
    285a:	4b03      	ldr	r3, [pc, #12]	; (2868 <cdcdf_acm_register_callback+0x44>)
    285c:	6159      	str	r1, [r3, #20]
	return ERR_NONE;
    285e:	2000      	movs	r0, #0
		break;
    2860:	bd08      	pop	{r3, pc}
		return ERR_INVALID_ARG;
    2862:	f06f 000c 	mvn.w	r0, #12
}
    2866:	bd08      	pop	{r3, pc}
    2868:	20000804 	.word	0x20000804
    286c:	00000fc1 	.word	0x00000fc1

00002870 <cdcdf_acm_is_enabled>:
}
    2870:	4b01      	ldr	r3, [pc, #4]	; (2878 <cdcdf_acm_is_enabled+0x8>)
    2872:	7958      	ldrb	r0, [r3, #5]
    2874:	4770      	bx	lr
    2876:	bf00      	nop
    2878:	20000804 	.word	0x20000804

0000287c <usbdc_unconfig>:

/**
 * \brief Unconfig, close all interfaces
 */
static void usbdc_unconfig(void)
{
    287c:	b570      	push	{r4, r5, r6, lr}
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    287e:	4b07      	ldr	r3, [pc, #28]	; (289c <usbdc_unconfig+0x20>)
    2880:	691c      	ldr	r4, [r3, #16]
	while (NULL != func) {
    2882:	b14c      	cbz	r4, 2898 <usbdc_unconfig+0x1c>
		func->ctrl(func, USBDF_DISABLE, NULL);
    2884:	2600      	movs	r6, #0
    2886:	2501      	movs	r5, #1
    2888:	6863      	ldr	r3, [r4, #4]
    288a:	4632      	mov	r2, r6
    288c:	4629      	mov	r1, r5
    288e:	4620      	mov	r0, r4
    2890:	4798      	blx	r3
		func = func->next;
    2892:	6824      	ldr	r4, [r4, #0]
	while (NULL != func) {
    2894:	2c00      	cmp	r4, #0
    2896:	d1f7      	bne.n	2888 <usbdc_unconfig+0xc>
    2898:	bd70      	pop	{r4, r5, r6, pc}
    289a:	bf00      	nop
    289c:	20000828 	.word	0x20000828

000028a0 <usbdc_change_notify>:
	}
}

/** Invoke all registered Change notification callbacks. */
static void usbdc_change_notify(enum usbdc_change_type change, uint32_t value)
{
    28a0:	b570      	push	{r4, r5, r6, lr}
    28a2:	4606      	mov	r6, r0
    28a4:	460d      	mov	r5, r1
	struct usbdc_change_handler *cg = (struct usbdc_change_handler *)usbdc.handlers.change_list.head;
    28a6:	4b07      	ldr	r3, [pc, #28]	; (28c4 <usbdc_change_notify+0x24>)
    28a8:	68dc      	ldr	r4, [r3, #12]

	while (cg != NULL) {
    28aa:	b91c      	cbnz	r4, 28b4 <usbdc_change_notify+0x14>
    28ac:	bd70      	pop	{r4, r5, r6, pc}
		if (NULL != cg->cb) {
			cg->cb(change, value);
		}
		cg = cg->next;
    28ae:	6824      	ldr	r4, [r4, #0]
	while (cg != NULL) {
    28b0:	2c00      	cmp	r4, #0
    28b2:	d0fb      	beq.n	28ac <usbdc_change_notify+0xc>
		if (NULL != cg->cb) {
    28b4:	6863      	ldr	r3, [r4, #4]
    28b6:	2b00      	cmp	r3, #0
    28b8:	d0f9      	beq.n	28ae <usbdc_change_notify+0xe>
			cg->cb(change, value);
    28ba:	4629      	mov	r1, r5
    28bc:	4630      	mov	r0, r6
    28be:	4798      	blx	r3
    28c0:	e7f5      	b.n	28ae <usbdc_change_notify+0xe>
    28c2:	bf00      	nop
    28c4:	20000828 	.word	0x20000828

000028c8 <usbdc_request_handler>:
	}
}

/** Invoke all registered request callbacks until request handled. */
static int32_t usbdc_request_handler(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    28c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    28ca:	4607      	mov	r7, r0
    28cc:	460e      	mov	r6, r1
    28ce:	4615      	mov	r5, r2
	struct usbdc_req_handler *h = (struct usbdc_req_handler *)usbdc.handlers.req_list.head;
    28d0:	4b0c      	ldr	r3, [pc, #48]	; (2904 <usbdc_request_handler+0x3c>)
    28d2:	689c      	ldr	r4, [r3, #8]
	int32_t                   rc;

	while (h != NULL) {
    28d4:	b91c      	cbnz	r4, 28de <usbdc_request_handler+0x16>
				return -1;
			}
		}
		h = h->next;
	}
	return false;
    28d6:	2000      	movs	r0, #0
    28d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		h = h->next;
    28da:	6824      	ldr	r4, [r4, #0]
	while (h != NULL) {
    28dc:	b16c      	cbz	r4, 28fa <usbdc_request_handler+0x32>
		if (NULL != h->cb) {
    28de:	6863      	ldr	r3, [r4, #4]
    28e0:	2b00      	cmp	r3, #0
    28e2:	d0fa      	beq.n	28da <usbdc_request_handler+0x12>
			rc = h->cb(ep, req, stage);
    28e4:	462a      	mov	r2, r5
    28e6:	4631      	mov	r1, r6
    28e8:	4638      	mov	r0, r7
    28ea:	4798      	blx	r3
			if (0 == rc) {
    28ec:	b138      	cbz	r0, 28fe <usbdc_request_handler+0x36>
			} else if (ERR_NOT_FOUND != rc) {
    28ee:	f110 0f0a 	cmn.w	r0, #10
    28f2:	d0f2      	beq.n	28da <usbdc_request_handler+0x12>
				return -1;
    28f4:	f04f 30ff 	mov.w	r0, #4294967295
}
    28f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return false;
    28fa:	2000      	movs	r0, #0
    28fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				return true;
    28fe:	2001      	movs	r0, #1
    2900:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2902:	bf00      	nop
    2904:	20000828 	.word	0x20000828

00002908 <usbd_sof_cb>:

/**
 * \brief Callback invoked on USB device SOF
 */
static void usbd_sof_cb(void)
{
    2908:	b510      	push	{r4, lr}
	struct usbdc_sof_handler *sof = (struct usbdc_sof_handler *)usbdc.handlers.sof_list.head;
    290a:	4b06      	ldr	r3, [pc, #24]	; (2924 <usbd_sof_cb+0x1c>)
    290c:	685c      	ldr	r4, [r3, #4]
	while (sof != NULL) {
    290e:	b91c      	cbnz	r4, 2918 <usbd_sof_cb+0x10>
    2910:	bd10      	pop	{r4, pc}
		sof = sof->next;
    2912:	6824      	ldr	r4, [r4, #0]
	while (sof != NULL) {
    2914:	2c00      	cmp	r4, #0
    2916:	d0fb      	beq.n	2910 <usbd_sof_cb+0x8>
		if (NULL != sof->cb) {
    2918:	6863      	ldr	r3, [r4, #4]
    291a:	2b00      	cmp	r3, #0
    291c:	d0f9      	beq.n	2912 <usbd_sof_cb+0xa>
			sof->cb();
    291e:	4798      	blx	r3
    2920:	e7f7      	b.n	2912 <usbd_sof_cb+0xa>
    2922:	bf00      	nop
    2924:	20000828 	.word	0x20000828

00002928 <usbdc_cb_ctl_done>:
 * \return Data has error or not.
 * \retval true There is data error, protocol error.
 * \retval false There is no data error.
 */
static bool usbdc_cb_ctl_done(const uint8_t ep, const enum usb_xfer_code code, struct usb_req *req)
{
    2928:	b510      	push	{r4, lr}
    292a:	4614      	mov	r4, r2
	(void)ep;

	switch (code) {
    292c:	b119      	cbz	r1, 2936 <usbdc_cb_ctl_done+0xe>
    292e:	2901      	cmp	r1, #1
    2930:	d026      	beq.n	2980 <usbdc_cb_ctl_done+0x58>
		return usbdc_ctrl_data_end(req);
	default:
		break;
	}
	return false;
}
    2932:	2000      	movs	r0, #0
    2934:	bd10      	pop	{r4, pc}
	if (req->bmRequestType != USB_REQT_TYPE_STANDARD) {
    2936:	7813      	ldrb	r3, [r2, #0]
    2938:	2b00      	cmp	r3, #0
    293a:	d1fa      	bne.n	2932 <usbdc_cb_ctl_done+0xa>
	switch (req->bRequest) {
    293c:	7853      	ldrb	r3, [r2, #1]
    293e:	2b05      	cmp	r3, #5
    2940:	d00f      	beq.n	2962 <usbdc_cb_ctl_done+0x3a>
    2942:	2b09      	cmp	r3, #9
    2944:	d1f5      	bne.n	2932 <usbdc_cb_ctl_done+0xa>
		usbdc.cfg_value = req->wValue;
    2946:	8852      	ldrh	r2, [r2, #2]
    2948:	4b10      	ldr	r3, [pc, #64]	; (298c <usbdc_cb_ctl_done+0x64>)
    294a:	76da      	strb	r2, [r3, #27]
		usbdc.state     = req->wValue ? USBD_S_CONFIG : USBD_S_ADDRESS;
    294c:	8863      	ldrh	r3, [r4, #2]
    294e:	2b00      	cmp	r3, #0
    2950:	bf14      	ite	ne
    2952:	2104      	movne	r1, #4
    2954:	2103      	moveq	r1, #3
    2956:	4b0d      	ldr	r3, [pc, #52]	; (298c <usbdc_cb_ctl_done+0x64>)
    2958:	7699      	strb	r1, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
    295a:	2001      	movs	r0, #1
    295c:	4b0c      	ldr	r3, [pc, #48]	; (2990 <usbdc_cb_ctl_done+0x68>)
    295e:	4798      	blx	r3
    2960:	e7e7      	b.n	2932 <usbdc_cb_ctl_done+0xa>
		usbdc_set_address(req->wValue);
    2962:	8850      	ldrh	r0, [r2, #2]
	usb_d_set_address(addr);
    2964:	b2c0      	uxtb	r0, r0
    2966:	4b0b      	ldr	r3, [pc, #44]	; (2994 <usbdc_cb_ctl_done+0x6c>)
    2968:	4798      	blx	r3
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
    296a:	8863      	ldrh	r3, [r4, #2]
    296c:	2b00      	cmp	r3, #0
    296e:	bf14      	ite	ne
    2970:	2103      	movne	r1, #3
    2972:	2102      	moveq	r1, #2
    2974:	4b05      	ldr	r3, [pc, #20]	; (298c <usbdc_cb_ctl_done+0x64>)
    2976:	7699      	strb	r1, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
    2978:	2001      	movs	r0, #1
    297a:	4b05      	ldr	r3, [pc, #20]	; (2990 <usbdc_cb_ctl_done+0x68>)
    297c:	4798      	blx	r3
    297e:	e7d8      	b.n	2932 <usbdc_cb_ctl_done+0xa>
	usbdc_request_handler(0, req, USB_DATA_STAGE);
    2980:	2201      	movs	r2, #1
    2982:	4621      	mov	r1, r4
    2984:	2000      	movs	r0, #0
    2986:	4b04      	ldr	r3, [pc, #16]	; (2998 <usbdc_cb_ctl_done+0x70>)
    2988:	4798      	blx	r3
		return usbdc_ctrl_data_end(req);
    298a:	e7d2      	b.n	2932 <usbdc_cb_ctl_done+0xa>
    298c:	20000828 	.word	0x20000828
    2990:	000028a1 	.word	0x000028a1
    2994:	00000d1d 	.word	0x00000d1d
    2998:	000028c9 	.word	0x000028c9

0000299c <usbdc_reset>:

/**
 * \brief USB Device Core Reset
 */
void usbdc_reset(void)
{
    299c:	b570      	push	{r4, r5, r6, lr}
	usbdc_unconfig();
    299e:	4b0d      	ldr	r3, [pc, #52]	; (29d4 <usbdc_reset+0x38>)
    29a0:	4798      	blx	r3

	usbdc.state       = USBD_S_DEFAULT;
    29a2:	4d0d      	ldr	r5, [pc, #52]	; (29d8 <usbdc_reset+0x3c>)
    29a4:	2602      	movs	r6, #2
    29a6:	76ae      	strb	r6, [r5, #26]
	usbdc.cfg_value   = 0;
    29a8:	2400      	movs	r4, #0
    29aa:	76ec      	strb	r4, [r5, #27]
	usbdc.ifc_alt_map = 0;
    29ac:	776c      	strb	r4, [r5, #29]

	// Setup EP0
	usb_d_ep_deinit(0);
    29ae:	4620      	mov	r0, r4
    29b0:	4b0a      	ldr	r3, [pc, #40]	; (29dc <usbdc_reset+0x40>)
    29b2:	4798      	blx	r3
	usb_d_ep0_init(usbdc.ctrl_size);
    29b4:	7f28      	ldrb	r0, [r5, #28]
    29b6:	4b0a      	ldr	r3, [pc, #40]	; (29e0 <usbdc_reset+0x44>)
    29b8:	4798      	blx	r3
	usb_d_ep_register_callback(0, USB_D_EP_CB_SETUP, (FUNC_PTR)usbdc_cb_ctl_req);
    29ba:	4a0a      	ldr	r2, [pc, #40]	; (29e4 <usbdc_reset+0x48>)
    29bc:	4621      	mov	r1, r4
    29be:	4620      	mov	r0, r4
    29c0:	4d09      	ldr	r5, [pc, #36]	; (29e8 <usbdc_reset+0x4c>)
    29c2:	47a8      	blx	r5
	usb_d_ep_register_callback(0, USB_D_EP_CB_XFER, (FUNC_PTR)usbdc_cb_ctl_done);
    29c4:	4a09      	ldr	r2, [pc, #36]	; (29ec <usbdc_reset+0x50>)
    29c6:	4631      	mov	r1, r6
    29c8:	4620      	mov	r0, r4
    29ca:	47a8      	blx	r5
	usb_d_ep_enable(0);
    29cc:	4620      	mov	r0, r4
    29ce:	4b08      	ldr	r3, [pc, #32]	; (29f0 <usbdc_reset+0x54>)
    29d0:	4798      	blx	r3
    29d2:	bd70      	pop	{r4, r5, r6, pc}
    29d4:	0000287d 	.word	0x0000287d
    29d8:	20000828 	.word	0x20000828
    29dc:	00000d91 	.word	0x00000d91
    29e0:	00000d7d 	.word	0x00000d7d
    29e4:	00002a35 	.word	0x00002a35
    29e8:	00000fc1 	.word	0x00000fc1
    29ec:	00002929 	.word	0x00002929
    29f0:	00000dbd 	.word	0x00000dbd

000029f4 <usbd_event_cb>:
 * \brief Callback invoked on USB device events
 * \param[in] ev Event code.
 * \param[in] param Event parameter for event handling.
 */
static void usbd_event_cb(const enum usb_event ev, const uint32_t param)
{
    29f4:	b508      	push	{r3, lr}
	(void)param;

	switch (ev) {
    29f6:	b110      	cbz	r0, 29fe <usbd_event_cb+0xa>
    29f8:	2801      	cmp	r0, #1
    29fa:	d004      	beq.n	2a06 <usbd_event_cb+0x12>
    29fc:	bd08      	pop	{r3, pc}
	case USB_EV_VBUS:
		usbdc_change_notify(USBDC_C_CONN, param);
    29fe:	2000      	movs	r0, #0
    2a00:	4b02      	ldr	r3, [pc, #8]	; (2a0c <usbd_event_cb+0x18>)
    2a02:	4798      	blx	r3
		break;
    2a04:	bd08      	pop	{r3, pc}

	case USB_EV_RESET:
		usbdc_reset();
    2a06:	4b02      	ldr	r3, [pc, #8]	; (2a10 <usbd_event_cb+0x1c>)
    2a08:	4798      	blx	r3
    2a0a:	bd08      	pop	{r3, pc}
    2a0c:	000028a1 	.word	0x000028a1
    2a10:	0000299d 	.word	0x0000299d

00002a14 <usbdc_xfer>:

/**
 * \brief Issue USB device transfer
 */
int32_t usbdc_xfer(uint8_t ep, uint8_t *buf, uint32_t size, bool zlp)
{
    2a14:	b500      	push	{lr}
    2a16:	b085      	sub	sp, #20
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    2a18:	9101      	str	r1, [sp, #4]
    2a1a:	9202      	str	r2, [sp, #8]
    2a1c:	f88d 000c 	strb.w	r0, [sp, #12]
    2a20:	f88d 300d 	strb.w	r3, [sp, #13]
	return usb_d_ep_transfer(&xfer);
    2a24:	a801      	add	r0, sp, #4
    2a26:	4b02      	ldr	r3, [pc, #8]	; (2a30 <usbdc_xfer+0x1c>)
    2a28:	4798      	blx	r3
}
    2a2a:	b005      	add	sp, #20
    2a2c:	f85d fb04 	ldr.w	pc, [sp], #4
    2a30:	00000e09 	.word	0x00000e09

00002a34 <usbdc_cb_ctl_req>:
{
    2a34:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    2a38:	b083      	sub	sp, #12
    2a3a:	4605      	mov	r5, r0
    2a3c:	460c      	mov	r4, r1
	switch (usbdc_request_handler(ep, req, USB_SETUP_STAGE)) {
    2a3e:	2200      	movs	r2, #0
    2a40:	4b9b      	ldr	r3, [pc, #620]	; (2cb0 <usbdc_cb_ctl_req+0x27c>)
    2a42:	4798      	blx	r3
    2a44:	f1b0 3fff 	cmp.w	r0, #4294967295
    2a48:	d00b      	beq.n	2a62 <usbdc_cb_ctl_req+0x2e>
    2a4a:	2801      	cmp	r0, #1
    2a4c:	f000 81e3 	beq.w	2e16 <usbdc_cb_ctl_req+0x3e2>
	switch (req->bmRequestType & (USB_REQT_TYPE_MASK | USB_REQT_DIR_IN)) {
    2a50:	7823      	ldrb	r3, [r4, #0]
    2a52:	f013 02e0 	ands.w	r2, r3, #224	; 0xe0
    2a56:	d008      	beq.n	2a6a <usbdc_cb_ctl_req+0x36>
    2a58:	2a80      	cmp	r2, #128	; 0x80
    2a5a:	f000 80f4 	beq.w	2c46 <usbdc_cb_ctl_req+0x212>
		return false;
    2a5e:	2000      	movs	r0, #0
    2a60:	e000      	b.n	2a64 <usbdc_cb_ctl_req+0x30>
		return false;
    2a62:	2000      	movs	r0, #0
}
    2a64:	b003      	add	sp, #12
    2a66:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	switch (req->bRequest) {
    2a6a:	7862      	ldrb	r2, [r4, #1]
    2a6c:	3a01      	subs	r2, #1
    2a6e:	2a0a      	cmp	r2, #10
    2a70:	f200 81d3 	bhi.w	2e1a <usbdc_cb_ctl_req+0x3e6>
    2a74:	e8df f012 	tbh	[pc, r2, lsl #1]
    2a78:	01d10060 	.word	0x01d10060
    2a7c:	01d10076 	.word	0x01d10076
    2a80:	01d1000b 	.word	0x01d1000b
    2a84:	01d101d1 	.word	0x01d101d1
    2a88:	01d10015 	.word	0x01d10015
    2a8c:	008c      	.short	0x008c
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    2a8e:	2301      	movs	r3, #1
    2a90:	2200      	movs	r2, #0
    2a92:	4611      	mov	r1, r2
    2a94:	4628      	mov	r0, r5
    2a96:	4c87      	ldr	r4, [pc, #540]	; (2cb4 <usbdc_cb_ctl_req+0x280>)
    2a98:	47a0      	blx	r4
    2a9a:	fab0 f080 	clz	r0, r0
    2a9e:	0940      	lsrs	r0, r0, #5
    2aa0:	e7e0      	b.n	2a64 <usbdc_cb_ctl_req+0x30>
		if (!usbdc_set_config(req->wValue)) {
    2aa2:	8862      	ldrh	r2, [r4, #2]
    2aa4:	b2d2      	uxtb	r2, r2
	if (cfg_value == 0) {
    2aa6:	b1ca      	cbz	r2, 2adc <usbdc_cb_ctl_req+0xa8>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, cfg_value);
    2aa8:	4b83      	ldr	r3, [pc, #524]	; (2cb8 <usbdc_cb_ctl_req+0x284>)
    2aaa:	681b      	ldr	r3, [r3, #0]
    2aac:	6859      	ldr	r1, [r3, #4]
    2aae:	6818      	ldr	r0, [r3, #0]
    2ab0:	4b82      	ldr	r3, [pc, #520]	; (2cbc <usbdc_cb_ctl_req+0x288>)
    2ab2:	4798      	blx	r3
	if (NULL == cfg_desc) {
    2ab4:	2800      	cmp	r0, #0
    2ab6:	f000 81be 	beq.w	2e36 <usbdc_cb_ctl_req+0x402>
	return (ptr[0] + (ptr[1] << 8));
    2aba:	78c2      	ldrb	r2, [r0, #3]
    2abc:	7881      	ldrb	r1, [r0, #2]
    2abe:	eb01 2102 	add.w	r1, r1, r2, lsl #8
	desc.eod  = cfg_desc + total_len;
    2ac2:	fa10 f181 	uxtah	r1, r0, r1
    2ac6:	9101      	str	r1, [sp, #4]
	desc.sod  = usb_find_desc(cfg_desc, desc.eod, USB_DT_INTERFACE);
    2ac8:	2204      	movs	r2, #4
    2aca:	4b7d      	ldr	r3, [pc, #500]	; (2cc0 <usbdc_cb_ctl_req+0x28c>)
    2acc:	4798      	blx	r3
    2ace:	9000      	str	r0, [sp, #0]
	while (NULL != desc.sod) {
    2ad0:	b130      	cbz	r0, 2ae0 <usbdc_cb_ctl_req+0xac>
    2ad2:	24ff      	movs	r4, #255	; 0xff
			func       = (struct usbdf_driver *)usbdc.func_list.head;
    2ad4:	f8df 81e0 	ldr.w	r8, [pc, #480]	; 2cb8 <usbdc_cb_ctl_req+0x284>
		desc.sod = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    2ad8:	4f79      	ldr	r7, [pc, #484]	; (2cc0 <usbdc_cb_ctl_req+0x28c>)
    2ada:	e018      	b.n	2b0e <usbdc_cb_ctl_req+0xda>
		usbdc_unconfig();
    2adc:	4b79      	ldr	r3, [pc, #484]	; (2cc4 <usbdc_cb_ctl_req+0x290>)
    2ade:	4798      	blx	r3
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    2ae0:	2301      	movs	r3, #1
    2ae2:	2200      	movs	r2, #0
    2ae4:	4611      	mov	r1, r2
    2ae6:	4628      	mov	r0, r5
    2ae8:	4c72      	ldr	r4, [pc, #456]	; (2cb4 <usbdc_cb_ctl_req+0x280>)
    2aea:	47a0      	blx	r4
    2aec:	fab0 f080 	clz	r0, r0
    2af0:	0940      	lsrs	r0, r0, #5
    2af2:	e7b7      	b.n	2a64 <usbdc_cb_ctl_req+0x30>
			last_iface = desc.sod[2];
    2af4:	464c      	mov	r4, r9
    2af6:	e000      	b.n	2afa <usbdc_cb_ctl_req+0xc6>
    2af8:	464c      	mov	r4, r9
		desc.sod = usb_desc_next(desc.sod);
    2afa:	9800      	ldr	r0, [sp, #0]
	return (desc + usb_desc_len(desc));
    2afc:	7803      	ldrb	r3, [r0, #0]
    2afe:	4418      	add	r0, r3
    2b00:	9000      	str	r0, [sp, #0]
		desc.sod = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    2b02:	2204      	movs	r2, #4
    2b04:	9901      	ldr	r1, [sp, #4]
    2b06:	47b8      	blx	r7
    2b08:	9000      	str	r0, [sp, #0]
	while (NULL != desc.sod) {
    2b0a:	2800      	cmp	r0, #0
    2b0c:	d0e8      	beq.n	2ae0 <usbdc_cb_ctl_req+0xac>
		if (last_iface != desc.sod[2] /* bInterfaceNumber */) {
    2b0e:	f890 9002 	ldrb.w	r9, [r0, #2]
    2b12:	45a1      	cmp	r9, r4
    2b14:	d0f1      	beq.n	2afa <usbdc_cb_ctl_req+0xc6>
			func       = (struct usbdf_driver *)usbdc.func_list.head;
    2b16:	f8d8 4010 	ldr.w	r4, [r8, #16]
			while (NULL != func) {
    2b1a:	2c00      	cmp	r4, #0
    2b1c:	d0ea      	beq.n	2af4 <usbdc_cb_ctl_req+0xc0>
				if (func->ctrl(func, USBDF_ENABLE, &desc)) {
    2b1e:	2600      	movs	r6, #0
    2b20:	6863      	ldr	r3, [r4, #4]
    2b22:	466a      	mov	r2, sp
    2b24:	4631      	mov	r1, r6
    2b26:	4620      	mov	r0, r4
    2b28:	4798      	blx	r3
    2b2a:	2800      	cmp	r0, #0
    2b2c:	d0e4      	beq.n	2af8 <usbdc_cb_ctl_req+0xc4>
					func = func->next;
    2b2e:	6824      	ldr	r4, [r4, #0]
			while (NULL != func) {
    2b30:	2c00      	cmp	r4, #0
    2b32:	d1f5      	bne.n	2b20 <usbdc_cb_ctl_req+0xec>
			last_iface = desc.sod[2];
    2b34:	464c      	mov	r4, r9
    2b36:	e7e0      	b.n	2afa <usbdc_cb_ctl_req+0xc6>
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    2b38:	f003 031f 	and.w	r3, r3, #31
    2b3c:	2b02      	cmp	r3, #2
    2b3e:	f040 816e 	bne.w	2e1e <usbdc_cb_ctl_req+0x3ea>
		if (req->wLength != 0) {
    2b42:	88e3      	ldrh	r3, [r4, #6]
    2b44:	b10b      	cbz	r3, 2b4a <usbdc_cb_ctl_req+0x116>
			return false;
    2b46:	2000      	movs	r0, #0
    2b48:	e78c      	b.n	2a64 <usbdc_cb_ctl_req+0x30>
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_CLR);
    2b4a:	88a0      	ldrh	r0, [r4, #4]
    2b4c:	2100      	movs	r1, #0
    2b4e:	b2c0      	uxtb	r0, r0
    2b50:	4b5d      	ldr	r3, [pc, #372]	; (2cc8 <usbdc_cb_ctl_req+0x294>)
    2b52:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
    2b54:	2301      	movs	r3, #1
    2b56:	2200      	movs	r2, #0
    2b58:	4611      	mov	r1, r2
    2b5a:	4628      	mov	r0, r5
    2b5c:	4c55      	ldr	r4, [pc, #340]	; (2cb4 <usbdc_cb_ctl_req+0x280>)
    2b5e:	47a0      	blx	r4
		return true;
    2b60:	2001      	movs	r0, #1
    2b62:	e77f      	b.n	2a64 <usbdc_cb_ctl_req+0x30>
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    2b64:	f003 031f 	and.w	r3, r3, #31
    2b68:	2b02      	cmp	r3, #2
    2b6a:	f040 815a 	bne.w	2e22 <usbdc_cb_ctl_req+0x3ee>
		if (req->wLength != 0) {
    2b6e:	88e3      	ldrh	r3, [r4, #6]
    2b70:	b10b      	cbz	r3, 2b76 <usbdc_cb_ctl_req+0x142>
			return false;
    2b72:	2000      	movs	r0, #0
    2b74:	e776      	b.n	2a64 <usbdc_cb_ctl_req+0x30>
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_SET);
    2b76:	88a0      	ldrh	r0, [r4, #4]
    2b78:	2101      	movs	r1, #1
    2b7a:	b2c0      	uxtb	r0, r0
    2b7c:	4b52      	ldr	r3, [pc, #328]	; (2cc8 <usbdc_cb_ctl_req+0x294>)
    2b7e:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
    2b80:	2301      	movs	r3, #1
    2b82:	2200      	movs	r2, #0
    2b84:	4611      	mov	r1, r2
    2b86:	4628      	mov	r0, r5
    2b88:	4c4a      	ldr	r4, [pc, #296]	; (2cb4 <usbdc_cb_ctl_req+0x280>)
    2b8a:	47a0      	blx	r4
		return true;
    2b8c:	2001      	movs	r0, #1
    2b8e:	e769      	b.n	2a64 <usbdc_cb_ctl_req+0x30>
		return usbdc_set_interface(req->wValue, req->wIndex);
    2b90:	8866      	ldrh	r6, [r4, #2]
    2b92:	88a4      	ldrh	r4, [r4, #4]
		ifc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, usbdc.cfg_value);
    2b94:	4a48      	ldr	r2, [pc, #288]	; (2cb8 <usbdc_cb_ctl_req+0x284>)
    2b96:	6813      	ldr	r3, [r2, #0]
    2b98:	7ed2      	ldrb	r2, [r2, #27]
    2b9a:	6859      	ldr	r1, [r3, #4]
    2b9c:	6818      	ldr	r0, [r3, #0]
    2b9e:	4b47      	ldr	r3, [pc, #284]	; (2cbc <usbdc_cb_ctl_req+0x288>)
    2ba0:	4798      	blx	r3
	if (NULL == ifc) {
    2ba2:	2800      	cmp	r0, #0
    2ba4:	d045      	beq.n	2c32 <usbdc_cb_ctl_req+0x1fe>
	desc.sod = ifc;
    2ba6:	9000      	str	r0, [sp, #0]
	return (ptr[0] + (ptr[1] << 8));
    2ba8:	78c2      	ldrb	r2, [r0, #3]
    2baa:	7881      	ldrb	r1, [r0, #2]
    2bac:	eb01 2102 	add.w	r1, r1, r2, lsl #8
	desc.eod = ifc + usb_cfg_desc_total_len(ifc);
    2bb0:	fa10 f181 	uxtah	r1, r0, r1
    2bb4:	9101      	str	r1, [sp, #4]
	if (NULL == (ifc = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE))) {
    2bb6:	2204      	movs	r2, #4
    2bb8:	4b41      	ldr	r3, [pc, #260]	; (2cc0 <usbdc_cb_ctl_req+0x28c>)
    2bba:	4798      	blx	r3
    2bbc:	4603      	mov	r3, r0
    2bbe:	2800      	cmp	r0, #0
    2bc0:	d039      	beq.n	2c36 <usbdc_cb_ctl_req+0x202>
		ifc      = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    2bc2:	2704      	movs	r7, #4
    2bc4:	4d3e      	ldr	r5, [pc, #248]	; (2cc0 <usbdc_cb_ctl_req+0x28c>)
    2bc6:	e008      	b.n	2bda <usbdc_cb_ctl_req+0x1a6>
		desc.sod = usb_desc_next(desc.sod);
    2bc8:	9800      	ldr	r0, [sp, #0]
	return (desc + usb_desc_len(desc));
    2bca:	7803      	ldrb	r3, [r0, #0]
    2bcc:	4418      	add	r0, r3
    2bce:	9000      	str	r0, [sp, #0]
		ifc      = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    2bd0:	463a      	mov	r2, r7
    2bd2:	9901      	ldr	r1, [sp, #4]
    2bd4:	47a8      	blx	r5
		if (NULL == ifc) {
    2bd6:	4603      	mov	r3, r0
    2bd8:	b378      	cbz	r0, 2c3a <usbdc_cb_ctl_req+0x206>
	while (ifc[2] != ifc_id || ifc[3] != alt_set) {
    2bda:	789a      	ldrb	r2, [r3, #2]
    2bdc:	42a2      	cmp	r2, r4
    2bde:	d1f3      	bne.n	2bc8 <usbdc_cb_ctl_req+0x194>
    2be0:	78da      	ldrb	r2, [r3, #3]
    2be2:	42b2      	cmp	r2, r6
    2be4:	d1f0      	bne.n	2bc8 <usbdc_cb_ctl_req+0x194>
	desc.sod = ifc;
    2be6:	9300      	str	r3, [sp, #0]
	func     = (struct usbdf_driver *)usbdc.func_list.head;
    2be8:	4b33      	ldr	r3, [pc, #204]	; (2cb8 <usbdc_cb_ctl_req+0x284>)
    2bea:	691d      	ldr	r5, [r3, #16]
	while (NULL != func) {
    2bec:	b33d      	cbz	r5, 2c3e <usbdc_cb_ctl_req+0x20a>
		if (func->ctrl(func, USBDF_DISABLE, &desc)) {
    2bee:	2701      	movs	r7, #1
    2bf0:	686b      	ldr	r3, [r5, #4]
    2bf2:	466a      	mov	r2, sp
    2bf4:	4639      	mov	r1, r7
    2bf6:	4628      	mov	r0, r5
    2bf8:	4798      	blx	r3
    2bfa:	b120      	cbz	r0, 2c06 <usbdc_cb_ctl_req+0x1d2>
			func = func->next;
    2bfc:	682d      	ldr	r5, [r5, #0]
	while (NULL != func) {
    2bfe:	2d00      	cmp	r5, #0
    2c00:	d1f6      	bne.n	2bf0 <usbdc_cb_ctl_req+0x1bc>
	return false;
    2c02:	2000      	movs	r0, #0
    2c04:	e72e      	b.n	2a64 <usbdc_cb_ctl_req+0x30>
		} else if (ERR_NONE == func->ctrl(func, USBDF_ENABLE, &desc)) {
    2c06:	686b      	ldr	r3, [r5, #4]
    2c08:	466a      	mov	r2, sp
    2c0a:	2100      	movs	r1, #0
    2c0c:	4628      	mov	r0, r5
    2c0e:	4798      	blx	r3
    2c10:	b9b8      	cbnz	r0, 2c42 <usbdc_cb_ctl_req+0x20e>
			if (alt_set) {
    2c12:	b136      	cbz	r6, 2c22 <usbdc_cb_ctl_req+0x1ee>
				usbdc.ifc_alt_map |= 1 << ifc_id;
    2c14:	4a28      	ldr	r2, [pc, #160]	; (2cb8 <usbdc_cb_ctl_req+0x284>)
    2c16:	2301      	movs	r3, #1
    2c18:	fa03 f404 	lsl.w	r4, r3, r4
    2c1c:	7f53      	ldrb	r3, [r2, #29]
    2c1e:	4323      	orrs	r3, r4
    2c20:	7753      	strb	r3, [r2, #29]
			usbdc_xfer(0, NULL, 0, 0);
    2c22:	2300      	movs	r3, #0
    2c24:	461a      	mov	r2, r3
    2c26:	4619      	mov	r1, r3
    2c28:	4618      	mov	r0, r3
    2c2a:	4c22      	ldr	r4, [pc, #136]	; (2cb4 <usbdc_cb_ctl_req+0x280>)
    2c2c:	47a0      	blx	r4
			return true;
    2c2e:	2001      	movs	r0, #1
    2c30:	e718      	b.n	2a64 <usbdc_cb_ctl_req+0x30>
		return false;
    2c32:	2000      	movs	r0, #0
    2c34:	e716      	b.n	2a64 <usbdc_cb_ctl_req+0x30>
		return false;
    2c36:	2000      	movs	r0, #0
    2c38:	e714      	b.n	2a64 <usbdc_cb_ctl_req+0x30>
			return false;
    2c3a:	2000      	movs	r0, #0
    2c3c:	e712      	b.n	2a64 <usbdc_cb_ctl_req+0x30>
	return false;
    2c3e:	2000      	movs	r0, #0
    2c40:	e710      	b.n	2a64 <usbdc_cb_ctl_req+0x30>
			return false;
    2c42:	2000      	movs	r0, #0
    2c44:	e70e      	b.n	2a64 <usbdc_cb_ctl_req+0x30>
	switch (req->bRequest) {
    2c46:	7862      	ldrb	r2, [r4, #1]
    2c48:	2a0a      	cmp	r2, #10
    2c4a:	f200 80ec 	bhi.w	2e26 <usbdc_cb_ctl_req+0x3f2>
    2c4e:	e8df f012 	tbh	[pc, r2, lsl #1]
    2c52:	008e      	.short	0x008e
    2c54:	00ea00ea 	.word	0x00ea00ea
    2c58:	00ea00ea 	.word	0x00ea00ea
    2c5c:	000b00ea 	.word	0x000b00ea
    2c60:	008200ea 	.word	0x008200ea
    2c64:	00b200ea 	.word	0x00b200ea
	uint8_t type = (uint8_t)(req->wValue >> 8);
    2c68:	8862      	ldrh	r2, [r4, #2]
	switch (type) {
    2c6a:	0a13      	lsrs	r3, r2, #8
    2c6c:	2b02      	cmp	r3, #2
    2c6e:	d02d      	beq.n	2ccc <usbdc_cb_ctl_req+0x298>
    2c70:	2b03      	cmp	r3, #3
    2c72:	d050      	beq.n	2d16 <usbdc_cb_ctl_req+0x2e2>
    2c74:	2b01      	cmp	r3, #1
    2c76:	d001      	beq.n	2c7c <usbdc_cb_ctl_req+0x248>
	return false;
    2c78:	2000      	movs	r0, #0
    2c7a:	e6f3      	b.n	2a64 <usbdc_cb_ctl_req+0x30>
	uint16_t length   = req->wLength;
    2c7c:	88e2      	ldrh	r2, [r4, #6]
    2c7e:	2a12      	cmp	r2, #18
    2c80:	bf28      	it	cs
    2c82:	2212      	movcs	r2, #18
    2c84:	4614      	mov	r4, r2
		dev_desc = usb_find_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, USB_DT_DEVICE);
    2c86:	4b0c      	ldr	r3, [pc, #48]	; (2cb8 <usbdc_cb_ctl_req+0x284>)
    2c88:	681b      	ldr	r3, [r3, #0]
    2c8a:	2201      	movs	r2, #1
    2c8c:	6859      	ldr	r1, [r3, #4]
    2c8e:	6818      	ldr	r0, [r3, #0]
    2c90:	4b0b      	ldr	r3, [pc, #44]	; (2cc0 <usbdc_cb_ctl_req+0x28c>)
    2c92:	4798      	blx	r3
	if (!dev_desc) {
    2c94:	4601      	mov	r1, r0
    2c96:	2800      	cmp	r0, #0
    2c98:	f000 80c7 	beq.w	2e2a <usbdc_cb_ctl_req+0x3f6>
	if (ERR_NONE != usbdc_xfer(ep, dev_desc, length, false)) {
    2c9c:	2300      	movs	r3, #0
    2c9e:	4622      	mov	r2, r4
    2ca0:	4628      	mov	r0, r5
    2ca2:	4c04      	ldr	r4, [pc, #16]	; (2cb4 <usbdc_cb_ctl_req+0x280>)
    2ca4:	47a0      	blx	r4
    2ca6:	fab0 f080 	clz	r0, r0
    2caa:	0940      	lsrs	r0, r0, #5
    2cac:	e6da      	b.n	2a64 <usbdc_cb_ctl_req+0x30>
    2cae:	bf00      	nop
    2cb0:	000028c9 	.word	0x000028c9
    2cb4:	00002a15 	.word	0x00002a15
    2cb8:	20000828 	.word	0x20000828
    2cbc:	00002fd9 	.word	0x00002fd9
    2cc0:	00002f59 	.word	0x00002f59
    2cc4:	0000287d 	.word	0x0000287d
    2cc8:	00000f59 	.word	0x00000f59
	uint16_t length   = req->wLength;
    2ccc:	88e4      	ldrh	r4, [r4, #6]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    2cce:	4b5b      	ldr	r3, [pc, #364]	; (2e3c <usbdc_cb_ctl_req+0x408>)
    2cd0:	7f1e      	ldrb	r6, [r3, #28]
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index + 1);
    2cd2:	681b      	ldr	r3, [r3, #0]
    2cd4:	3201      	adds	r2, #1
    2cd6:	b2d2      	uxtb	r2, r2
    2cd8:	6859      	ldr	r1, [r3, #4]
    2cda:	6818      	ldr	r0, [r3, #0]
    2cdc:	4b58      	ldr	r3, [pc, #352]	; (2e40 <usbdc_cb_ctl_req+0x40c>)
    2cde:	4798      	blx	r3
	if (NULL == cfg_desc) {
    2ce0:	4601      	mov	r1, r0
    2ce2:	2800      	cmp	r0, #0
    2ce4:	f000 80a3 	beq.w	2e2e <usbdc_cb_ctl_req+0x3fa>
	return (ptr[0] + (ptr[1] << 8));
    2ce8:	78c3      	ldrb	r3, [r0, #3]
    2cea:	7882      	ldrb	r2, [r0, #2]
    2cec:	eb02 2203 	add.w	r2, r2, r3, lsl #8
    2cf0:	b292      	uxth	r2, r2
	if (length <= total_len) {
    2cf2:	4294      	cmp	r4, r2
    2cf4:	d90d      	bls.n	2d12 <usbdc_cb_ctl_req+0x2de>
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    2cf6:	3e01      	subs	r6, #1
    2cf8:	4226      	tst	r6, r4
    2cfa:	bf0c      	ite	eq
    2cfc:	2301      	moveq	r3, #1
    2cfe:	2300      	movne	r3, #0
		length = total_len;
    2d00:	4614      	mov	r4, r2
	if (ERR_NONE != usbdc_xfer(ep, cfg_desc, length, need_zlp)) {
    2d02:	4622      	mov	r2, r4
    2d04:	4628      	mov	r0, r5
    2d06:	4c4f      	ldr	r4, [pc, #316]	; (2e44 <usbdc_cb_ctl_req+0x410>)
    2d08:	47a0      	blx	r4
    2d0a:	fab0 f080 	clz	r0, r0
    2d0e:	0940      	lsrs	r0, r0, #5
    2d10:	e6a8      	b.n	2a64 <usbdc_cb_ctl_req+0x30>
		need_zlp = false;
    2d12:	2300      	movs	r3, #0
    2d14:	e7f5      	b.n	2d02 <usbdc_cb_ctl_req+0x2ce>
	uint16_t length   = req->wLength;
    2d16:	88e4      	ldrh	r4, [r4, #6]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    2d18:	4b48      	ldr	r3, [pc, #288]	; (2e3c <usbdc_cb_ctl_req+0x408>)
    2d1a:	7f1e      	ldrb	r6, [r3, #28]
	str_desc = usb_find_str_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index);
    2d1c:	681b      	ldr	r3, [r3, #0]
    2d1e:	b2d2      	uxtb	r2, r2
    2d20:	6859      	ldr	r1, [r3, #4]
    2d22:	6818      	ldr	r0, [r3, #0]
    2d24:	4b48      	ldr	r3, [pc, #288]	; (2e48 <usbdc_cb_ctl_req+0x414>)
    2d26:	4798      	blx	r3
	if (NULL == str_desc) {
    2d28:	4601      	mov	r1, r0
    2d2a:	2800      	cmp	r0, #0
    2d2c:	f000 8081 	beq.w	2e32 <usbdc_cb_ctl_req+0x3fe>
	if (length <= str_desc[0]) {
    2d30:	7802      	ldrb	r2, [r0, #0]
    2d32:	4294      	cmp	r4, r2
    2d34:	d90d      	bls.n	2d52 <usbdc_cb_ctl_req+0x31e>
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    2d36:	3e01      	subs	r6, #1
    2d38:	4226      	tst	r6, r4
    2d3a:	bf0c      	ite	eq
    2d3c:	2301      	moveq	r3, #1
    2d3e:	2300      	movne	r3, #0
		length = str_desc[0];
    2d40:	4614      	mov	r4, r2
	if (ERR_NONE != usbdc_xfer(ep, str_desc, length, need_zlp)) {
    2d42:	4622      	mov	r2, r4
    2d44:	4628      	mov	r0, r5
    2d46:	4c3f      	ldr	r4, [pc, #252]	; (2e44 <usbdc_cb_ctl_req+0x410>)
    2d48:	47a0      	blx	r4
    2d4a:	fab0 f080 	clz	r0, r0
    2d4e:	0940      	lsrs	r0, r0, #5
    2d50:	e688      	b.n	2a64 <usbdc_cb_ctl_req+0x30>
		need_zlp = false;
    2d52:	2300      	movs	r3, #0
    2d54:	e7f5      	b.n	2d42 <usbdc_cb_ctl_req+0x30e>
		*(uint8_t *)usbdc.ctrl_buf = usbdc.cfg_value;
    2d56:	4939      	ldr	r1, [pc, #228]	; (2e3c <usbdc_cb_ctl_req+0x408>)
    2d58:	694b      	ldr	r3, [r1, #20]
    2d5a:	7eca      	ldrb	r2, [r1, #27]
    2d5c:	701a      	strb	r2, [r3, #0]
		usbdc_xfer(ep, usbdc.ctrl_buf, 1, false);
    2d5e:	2300      	movs	r3, #0
    2d60:	2201      	movs	r2, #1
    2d62:	6949      	ldr	r1, [r1, #20]
    2d64:	4628      	mov	r0, r5
    2d66:	4c37      	ldr	r4, [pc, #220]	; (2e44 <usbdc_cb_ctl_req+0x410>)
    2d68:	47a0      	blx	r4
		return true;
    2d6a:	2001      	movs	r0, #1
    2d6c:	e67a      	b.n	2a64 <usbdc_cb_ctl_req+0x30>
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    2d6e:	f003 031f 	and.w	r3, r3, #31
    2d72:	2b01      	cmp	r3, #1
    2d74:	d903      	bls.n	2d7e <usbdc_cb_ctl_req+0x34a>
    2d76:	2b02      	cmp	r3, #2
    2d78:	d010      	beq.n	2d9c <usbdc_cb_ctl_req+0x368>
		return false;
    2d7a:	2000      	movs	r0, #0
    2d7c:	e672      	b.n	2a64 <usbdc_cb_ctl_req+0x30>
		st = 0;
    2d7e:	2300      	movs	r3, #0
    2d80:	9300      	str	r3, [sp, #0]
	memcpy(usbdc.ctrl_buf, &st, 2);
    2d82:	492e      	ldr	r1, [pc, #184]	; (2e3c <usbdc_cb_ctl_req+0x408>)
    2d84:	694b      	ldr	r3, [r1, #20]
    2d86:	f8bd 2000 	ldrh.w	r2, [sp]
    2d8a:	801a      	strh	r2, [r3, #0]
	usbdc_xfer(ep, usbdc.ctrl_buf, 2, false);
    2d8c:	2300      	movs	r3, #0
    2d8e:	2202      	movs	r2, #2
    2d90:	6949      	ldr	r1, [r1, #20]
    2d92:	4628      	mov	r0, r5
    2d94:	4c2b      	ldr	r4, [pc, #172]	; (2e44 <usbdc_cb_ctl_req+0x410>)
    2d96:	47a0      	blx	r4
	return true;
    2d98:	2001      	movs	r0, #1
    2d9a:	e663      	b.n	2a64 <usbdc_cb_ctl_req+0x30>
		st = usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_GET);
    2d9c:	88a0      	ldrh	r0, [r4, #4]
    2d9e:	2102      	movs	r1, #2
    2da0:	b2c0      	uxtb	r0, r0
    2da2:	4b2a      	ldr	r3, [pc, #168]	; (2e4c <usbdc_cb_ctl_req+0x418>)
    2da4:	4798      	blx	r3
		if (st < 0) {
    2da6:	2800      	cmp	r0, #0
    2da8:	db03      	blt.n	2db2 <usbdc_cb_ctl_req+0x37e>
		st = st & 0x1;
    2daa:	f000 0001 	and.w	r0, r0, #1
    2dae:	9000      	str	r0, [sp, #0]
    2db0:	e7e7      	b.n	2d82 <usbdc_cb_ctl_req+0x34e>
			return false;
    2db2:	2000      	movs	r0, #0
    2db4:	e656      	b.n	2a64 <usbdc_cb_ctl_req+0x30>
	if (!(usbdc.ifc_alt_map & (1 << req->wIndex))) {
    2db6:	4b21      	ldr	r3, [pc, #132]	; (2e3c <usbdc_cb_ctl_req+0x408>)
    2db8:	7f5b      	ldrb	r3, [r3, #29]
    2dba:	88a2      	ldrh	r2, [r4, #4]
    2dbc:	4113      	asrs	r3, r2
    2dbe:	f013 0f01 	tst.w	r3, #1
    2dc2:	d012      	beq.n	2dea <usbdc_cb_ctl_req+0x3b6>
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    2dc4:	4b1d      	ldr	r3, [pc, #116]	; (2e3c <usbdc_cb_ctl_req+0x408>)
    2dc6:	691d      	ldr	r5, [r3, #16]
	return false;
    2dc8:	2000      	movs	r0, #0
	while (NULL != func) {
    2dca:	2d00      	cmp	r5, #0
    2dcc:	f43f ae4a 	beq.w	2a64 <usbdc_cb_ctl_req+0x30>
		if (0 > (rc = func->ctrl(func, USBDF_GET_IFACE, req))) {
    2dd0:	2602      	movs	r6, #2
    2dd2:	686b      	ldr	r3, [r5, #4]
    2dd4:	4622      	mov	r2, r4
    2dd6:	4631      	mov	r1, r6
    2dd8:	4628      	mov	r0, r5
    2dda:	4798      	blx	r3
    2ddc:	2800      	cmp	r0, #0
    2dde:	da0f      	bge.n	2e00 <usbdc_cb_ctl_req+0x3cc>
			func = func->next;
    2de0:	682d      	ldr	r5, [r5, #0]
	while (NULL != func) {
    2de2:	2d00      	cmp	r5, #0
    2de4:	d1f5      	bne.n	2dd2 <usbdc_cb_ctl_req+0x39e>
	return false;
    2de6:	2000      	movs	r0, #0
    2de8:	e63c      	b.n	2a64 <usbdc_cb_ctl_req+0x30>
		usbdc.ctrl_buf[0] = 0;
    2dea:	4914      	ldr	r1, [pc, #80]	; (2e3c <usbdc_cb_ctl_req+0x408>)
    2dec:	694b      	ldr	r3, [r1, #20]
    2dee:	2000      	movs	r0, #0
    2df0:	7018      	strb	r0, [r3, #0]
		usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    2df2:	4603      	mov	r3, r0
    2df4:	2201      	movs	r2, #1
    2df6:	6949      	ldr	r1, [r1, #20]
    2df8:	4c12      	ldr	r4, [pc, #72]	; (2e44 <usbdc_cb_ctl_req+0x410>)
    2dfa:	47a0      	blx	r4
		return true;
    2dfc:	2001      	movs	r0, #1
    2dfe:	e631      	b.n	2a64 <usbdc_cb_ctl_req+0x30>
			usbdc.ctrl_buf[0] = (uint8_t)rc;
    2e00:	490e      	ldr	r1, [pc, #56]	; (2e3c <usbdc_cb_ctl_req+0x408>)
    2e02:	694b      	ldr	r3, [r1, #20]
    2e04:	7018      	strb	r0, [r3, #0]
			usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    2e06:	2300      	movs	r3, #0
    2e08:	2201      	movs	r2, #1
    2e0a:	6949      	ldr	r1, [r1, #20]
    2e0c:	4618      	mov	r0, r3
    2e0e:	4c0d      	ldr	r4, [pc, #52]	; (2e44 <usbdc_cb_ctl_req+0x410>)
    2e10:	47a0      	blx	r4
			return true;
    2e12:	2001      	movs	r0, #1
    2e14:	e626      	b.n	2a64 <usbdc_cb_ctl_req+0x30>
		return true;
    2e16:	2001      	movs	r0, #1
    2e18:	e624      	b.n	2a64 <usbdc_cb_ctl_req+0x30>
		return false;
    2e1a:	2000      	movs	r0, #0
    2e1c:	e622      	b.n	2a64 <usbdc_cb_ctl_req+0x30>
		return false;
    2e1e:	2000      	movs	r0, #0
    2e20:	e620      	b.n	2a64 <usbdc_cb_ctl_req+0x30>
		return false;
    2e22:	2000      	movs	r0, #0
    2e24:	e61e      	b.n	2a64 <usbdc_cb_ctl_req+0x30>
		return false;
    2e26:	2000      	movs	r0, #0
    2e28:	e61c      	b.n	2a64 <usbdc_cb_ctl_req+0x30>
		return false;
    2e2a:	2000      	movs	r0, #0
    2e2c:	e61a      	b.n	2a64 <usbdc_cb_ctl_req+0x30>
		return false;
    2e2e:	2000      	movs	r0, #0
    2e30:	e618      	b.n	2a64 <usbdc_cb_ctl_req+0x30>
		return false;
    2e32:	2000      	movs	r0, #0
    2e34:	e616      	b.n	2a64 <usbdc_cb_ctl_req+0x30>
			return false;
    2e36:	2000      	movs	r0, #0
    2e38:	e614      	b.n	2a64 <usbdc_cb_ctl_req+0x30>
    2e3a:	bf00      	nop
    2e3c:	20000828 	.word	0x20000828
    2e40:	00002fd9 	.word	0x00002fd9
    2e44:	00002a15 	.word	0x00002a15
    2e48:	00003041 	.word	0x00003041
    2e4c:	00000f59 	.word	0x00000f59

00002e50 <usbdc_register_handler>:

/**
 * \brief Register the handler
 */
void usbdc_register_handler(enum usbdc_handler_type type, const struct usbdc_handler *h)
{
    2e50:	b508      	push	{r3, lr}
	switch (type) {
    2e52:	2801      	cmp	r0, #1
    2e54:	d007      	beq.n	2e66 <usbdc_register_handler+0x16>
    2e56:	b110      	cbz	r0, 2e5e <usbdc_register_handler+0xe>
    2e58:	2802      	cmp	r0, #2
    2e5a:	d008      	beq.n	2e6e <usbdc_register_handler+0x1e>
    2e5c:	bd08      	pop	{r3, pc}
	case USBDC_HDL_SOF:
		list_insert_at_end(&usbdc.handlers.sof_list, (void *)h);
    2e5e:	4806      	ldr	r0, [pc, #24]	; (2e78 <usbdc_register_handler+0x28>)
    2e60:	4b06      	ldr	r3, [pc, #24]	; (2e7c <usbdc_register_handler+0x2c>)
    2e62:	4798      	blx	r3
		break;
    2e64:	bd08      	pop	{r3, pc}
	case USBDC_HDL_REQ:
		list_insert_at_end(&usbdc.handlers.req_list, (void *)h);
    2e66:	4806      	ldr	r0, [pc, #24]	; (2e80 <usbdc_register_handler+0x30>)
    2e68:	4b04      	ldr	r3, [pc, #16]	; (2e7c <usbdc_register_handler+0x2c>)
    2e6a:	4798      	blx	r3
		break;
    2e6c:	bd08      	pop	{r3, pc}
	case USBDC_HDL_CHANGE:
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
    2e6e:	4805      	ldr	r0, [pc, #20]	; (2e84 <usbdc_register_handler+0x34>)
    2e70:	4b02      	ldr	r3, [pc, #8]	; (2e7c <usbdc_register_handler+0x2c>)
    2e72:	4798      	blx	r3
    2e74:	bd08      	pop	{r3, pc}
    2e76:	bf00      	nop
    2e78:	2000082c 	.word	0x2000082c
    2e7c:	00003105 	.word	0x00003105
    2e80:	20000830 	.word	0x20000830
    2e84:	20000834 	.word	0x20000834

00002e88 <usbdc_init>:

/**
 * \brief Initialize the USB device core driver
 */
int32_t usbdc_init(uint8_t *ctrl_buf)
{
    2e88:	b538      	push	{r3, r4, r5, lr}
	ASSERT(ctrl_buf);
    2e8a:	4605      	mov	r5, r0
    2e8c:	f240 3255 	movw	r2, #853	; 0x355
    2e90:	490c      	ldr	r1, [pc, #48]	; (2ec4 <usbdc_init+0x3c>)
    2e92:	3000      	adds	r0, #0
    2e94:	bf18      	it	ne
    2e96:	2001      	movne	r0, #1
    2e98:	4b0b      	ldr	r3, [pc, #44]	; (2ec8 <usbdc_init+0x40>)
    2e9a:	4798      	blx	r3

	int32_t rc;

	rc = usb_d_init();
    2e9c:	4b0b      	ldr	r3, [pc, #44]	; (2ecc <usbdc_init+0x44>)
    2e9e:	4798      	blx	r3
	if (rc < 0) {
    2ea0:	2800      	cmp	r0, #0
    2ea2:	db0e      	blt.n	2ec2 <usbdc_init+0x3a>
		return rc;
	}

	memset(&usbdc, 0, sizeof(usbdc));
    2ea4:	4c0a      	ldr	r4, [pc, #40]	; (2ed0 <usbdc_init+0x48>)
    2ea6:	2220      	movs	r2, #32
    2ea8:	2100      	movs	r1, #0
    2eaa:	4620      	mov	r0, r4
    2eac:	4b09      	ldr	r3, [pc, #36]	; (2ed4 <usbdc_init+0x4c>)
    2eae:	4798      	blx	r3
	usbdc.ctrl_buf = ctrl_buf;
    2eb0:	6165      	str	r5, [r4, #20]
	usb_d_register_callback(USB_D_CB_SOF, (FUNC_PTR)usbd_sof_cb);
    2eb2:	4909      	ldr	r1, [pc, #36]	; (2ed8 <usbdc_init+0x50>)
    2eb4:	2000      	movs	r0, #0
    2eb6:	4c09      	ldr	r4, [pc, #36]	; (2edc <usbdc_init+0x54>)
    2eb8:	47a0      	blx	r4
	usb_d_register_callback(USB_D_CB_EVENT, (FUNC_PTR)usbd_event_cb);
    2eba:	4909      	ldr	r1, [pc, #36]	; (2ee0 <usbdc_init+0x58>)
    2ebc:	2001      	movs	r0, #1
    2ebe:	47a0      	blx	r4

	return 0;
    2ec0:	2000      	movs	r0, #0
}
    2ec2:	bd38      	pop	{r3, r4, r5, pc}
    2ec4:	00004124 	.word	0x00004124
    2ec8:	000030df 	.word	0x000030df
    2ecc:	00000c91 	.word	0x00000c91
    2ed0:	20000828 	.word	0x20000828
    2ed4:	00003df5 	.word	0x00003df5
    2ed8:	00002909 	.word	0x00002909
    2edc:	00000cf9 	.word	0x00000cf9
    2ee0:	000029f5 	.word	0x000029f5

00002ee4 <usbdc_register_function>:
 * \brief Register/unregister function support of a USB device function
 *
 * Must be invoked when USB device is stopped.
 */
void usbdc_register_function(struct usbdf_driver *func)
{
    2ee4:	b508      	push	{r3, lr}
	list_insert_at_end(&usbdc.func_list, func);
    2ee6:	4601      	mov	r1, r0
    2ee8:	4801      	ldr	r0, [pc, #4]	; (2ef0 <usbdc_register_function+0xc>)
    2eea:	4b02      	ldr	r3, [pc, #8]	; (2ef4 <usbdc_register_function+0x10>)
    2eec:	4798      	blx	r3
    2eee:	bd08      	pop	{r3, pc}
    2ef0:	20000838 	.word	0x20000838
    2ef4:	00003105 	.word	0x00003105

00002ef8 <usbdc_start>:

/**
 * \brief Start the USB device driver with specific descriptors set
 */
int32_t usbdc_start(struct usbd_descriptors *desces)
{
    2ef8:	b508      	push	{r3, lr}
	if (usbdc.state >= USBD_S_POWER) {
    2efa:	4b0a      	ldr	r3, [pc, #40]	; (2f24 <usbdc_start+0x2c>)
    2efc:	7e9b      	ldrb	r3, [r3, #26]
    2efe:	b95b      	cbnz	r3, 2f18 <usbdc_start+0x20>
		return ERR_BUSY;
	}

	if (desces) {
    2f00:	b168      	cbz	r0, 2f1e <usbdc_start+0x26>
		usbdc.desces.ls_fs = desces;
    2f02:	4b08      	ldr	r3, [pc, #32]	; (2f24 <usbdc_start+0x2c>)
    2f04:	6018      	str	r0, [r3, #0]
#endif
	} else {
		return ERR_BAD_DATA;
	}

	usbdc.ctrl_size = desces->sod[7];
    2f06:	6802      	ldr	r2, [r0, #0]
    2f08:	79d2      	ldrb	r2, [r2, #7]
    2f0a:	771a      	strb	r2, [r3, #28]
	usbdc.state     = USBD_S_POWER;
    2f0c:	2201      	movs	r2, #1
    2f0e:	769a      	strb	r2, [r3, #26]
	usb_d_enable();
    2f10:	4b05      	ldr	r3, [pc, #20]	; (2f28 <usbdc_start+0x30>)
    2f12:	4798      	blx	r3
	return ERR_NONE;
    2f14:	2000      	movs	r0, #0
    2f16:	bd08      	pop	{r3, pc}
		return ERR_BUSY;
    2f18:	f06f 0003 	mvn.w	r0, #3
    2f1c:	bd08      	pop	{r3, pc}
		return ERR_BAD_DATA;
    2f1e:	f06f 0008 	mvn.w	r0, #8
}
    2f22:	bd08      	pop	{r3, pc}
    2f24:	20000828 	.word	0x20000828
    2f28:	00000d05 	.word	0x00000d05

00002f2c <usbdc_attach>:

/**
 * \brief Attach the USB device to host
 */
void usbdc_attach(void)
{
    2f2c:	b508      	push	{r3, lr}
	usb_d_attach();
    2f2e:	4b01      	ldr	r3, [pc, #4]	; (2f34 <usbdc_attach+0x8>)
    2f30:	4798      	blx	r3
    2f32:	bd08      	pop	{r3, pc}
    2f34:	00000d11 	.word	0x00000d11

00002f38 <usbdc_get_ctrl_buffer>:
 * \brief Return USB Device endpoint0 buffer
 */
uint8_t *usbdc_get_ctrl_buffer(void)
{
	return usbdc.ctrl_buf;
}
    2f38:	4b01      	ldr	r3, [pc, #4]	; (2f40 <usbdc_get_ctrl_buffer+0x8>)
    2f3a:	6958      	ldr	r0, [r3, #20]
    2f3c:	4770      	bx	lr
    2f3e:	bf00      	nop
    2f40:	20000828 	.word	0x20000828

00002f44 <usbdc_get_state>:
/**
 * \brief Return current USB state
 */
uint8_t usbdc_get_state(void)
{
	if (usbdc.state & USBD_S_SUSPEND) {
    2f44:	4b03      	ldr	r3, [pc, #12]	; (2f54 <usbdc_get_state+0x10>)
    2f46:	7e98      	ldrb	r0, [r3, #26]
    2f48:	f000 0310 	and.w	r3, r0, #16
		return USBD_S_SUSPEND;
    2f4c:	2b00      	cmp	r3, #0
	}
	return usbdc.state;
}
    2f4e:	bf18      	it	ne
    2f50:	2010      	movne	r0, #16
    2f52:	4770      	bx	lr
    2f54:	20000828 	.word	0x20000828

00002f58 <usb_find_desc>:

uint8_t *usb_find_desc(uint8_t *desc, uint8_t *eof, uint8_t type)
{
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    2f58:	4288      	cmp	r0, r1
    2f5a:	d214      	bcs.n	2f86 <usb_find_desc+0x2e>
	return desc[0];
    2f5c:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    2f5e:	2b01      	cmp	r3, #1
    2f60:	d913      	bls.n	2f8a <usb_find_desc+0x32>
{
    2f62:	b410      	push	{r4}
		if (type == usb_desc_type(desc)) {
    2f64:	7844      	ldrb	r4, [r0, #1]
    2f66:	4294      	cmp	r4, r2
    2f68:	d00a      	beq.n	2f80 <usb_find_desc+0x28>
	return (desc + usb_desc_len(desc));
    2f6a:	4418      	add	r0, r3
	while (desc < eof) {
    2f6c:	4281      	cmp	r1, r0
    2f6e:	d906      	bls.n	2f7e <usb_find_desc+0x26>
	return desc[0];
    2f70:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    2f72:	2b01      	cmp	r3, #1
    2f74:	d90b      	bls.n	2f8e <usb_find_desc+0x36>
	return desc[1];
    2f76:	7844      	ldrb	r4, [r0, #1]
		if (type == usb_desc_type(desc)) {
    2f78:	4294      	cmp	r4, r2
    2f7a:	d1f6      	bne.n	2f6a <usb_find_desc+0x12>
    2f7c:	e000      	b.n	2f80 <usb_find_desc+0x28>
			return desc;
		}
		desc = usb_desc_next(desc);
	}
	return NULL;
    2f7e:	2000      	movs	r0, #0
}
    2f80:	f85d 4b04 	ldr.w	r4, [sp], #4
    2f84:	4770      	bx	lr
	return NULL;
    2f86:	2000      	movs	r0, #0
    2f88:	4770      	bx	lr
		_desc_len_check();
    2f8a:	2000      	movs	r0, #0
    2f8c:	4770      	bx	lr
    2f8e:	2000      	movs	r0, #0
    2f90:	e7f6      	b.n	2f80 <usb_find_desc+0x28>

00002f92 <usb_find_ep_desc>:

uint8_t *usb_find_ep_desc(uint8_t *desc, uint8_t *eof)
{
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    2f92:	4288      	cmp	r0, r1
    2f94:	d216      	bcs.n	2fc4 <usb_find_ep_desc+0x32>
	return desc[0];
    2f96:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    2f98:	2b01      	cmp	r3, #1
    2f9a:	d915      	bls.n	2fc8 <usb_find_ep_desc+0x36>
	return desc[1];
    2f9c:	7842      	ldrb	r2, [r0, #1]
		if (USB_DT_INTERFACE == usb_desc_type(desc)) {
    2f9e:	2a04      	cmp	r2, #4
    2fa0:	d014      	beq.n	2fcc <usb_find_ep_desc+0x3a>
			break;
		}
		if (USB_DT_ENDPOINT == usb_desc_type(desc)) {
    2fa2:	2a05      	cmp	r2, #5
    2fa4:	d00b      	beq.n	2fbe <usb_find_ep_desc+0x2c>
	return (desc + usb_desc_len(desc));
    2fa6:	4418      	add	r0, r3
	while (desc < eof) {
    2fa8:	4281      	cmp	r1, r0
    2faa:	d909      	bls.n	2fc0 <usb_find_ep_desc+0x2e>
	return desc[0];
    2fac:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    2fae:	2b01      	cmp	r3, #1
    2fb0:	d90e      	bls.n	2fd0 <usb_find_ep_desc+0x3e>
	return desc[1];
    2fb2:	7842      	ldrb	r2, [r0, #1]
		if (USB_DT_INTERFACE == usb_desc_type(desc)) {
    2fb4:	2a04      	cmp	r2, #4
    2fb6:	d00d      	beq.n	2fd4 <usb_find_ep_desc+0x42>
		if (USB_DT_ENDPOINT == usb_desc_type(desc)) {
    2fb8:	2a05      	cmp	r2, #5
    2fba:	d1f4      	bne.n	2fa6 <usb_find_ep_desc+0x14>
    2fbc:	e00b      	b.n	2fd6 <usb_find_ep_desc+0x44>
    2fbe:	4770      	bx	lr
			return desc;
		}
		desc = usb_desc_next(desc);
	}
	return NULL;
    2fc0:	2000      	movs	r0, #0
    2fc2:	4770      	bx	lr
    2fc4:	2000      	movs	r0, #0
    2fc6:	4770      	bx	lr
		_desc_len_check();
    2fc8:	2000      	movs	r0, #0
    2fca:	4770      	bx	lr
	return NULL;
    2fcc:	2000      	movs	r0, #0
    2fce:	4770      	bx	lr
		_desc_len_check();
    2fd0:	2000      	movs	r0, #0
    2fd2:	4770      	bx	lr
	return NULL;
    2fd4:	2000      	movs	r0, #0
}
    2fd6:	4770      	bx	lr

00002fd8 <usb_find_cfg_desc>:

uint8_t *usb_find_cfg_desc(uint8_t *desc, uint8_t *eof, uint8_t cfg_value)
{
    2fd8:	b538      	push	{r3, r4, r5, lr}
    2fda:	460c      	mov	r4, r1
    2fdc:	4615      	mov	r5, r2
	_param_error_check(desc && eof && (desc < eof));

	desc = usb_find_desc(desc, eof, USB_DT_CONFIG);
    2fde:	2202      	movs	r2, #2
    2fe0:	4b16      	ldr	r3, [pc, #88]	; (303c <usb_find_cfg_desc+0x64>)
    2fe2:	4798      	blx	r3
	if (!desc) {
    2fe4:	4603      	mov	r3, r0
    2fe6:	b1e8      	cbz	r0, 3024 <usb_find_cfg_desc+0x4c>
		return NULL;
	}
	while (desc < eof) {
    2fe8:	4284      	cmp	r4, r0
    2fea:	d91d      	bls.n	3028 <usb_find_cfg_desc+0x50>
		_desc_len_check();
    2fec:	7802      	ldrb	r2, [r0, #0]
    2fee:	2a01      	cmp	r2, #1
    2ff0:	d91c      	bls.n	302c <usb_find_cfg_desc+0x54>
		if (desc[1] != USB_DT_CONFIG) {
    2ff2:	7842      	ldrb	r2, [r0, #1]
    2ff4:	2a02      	cmp	r2, #2
    2ff6:	d11b      	bne.n	3030 <usb_find_cfg_desc+0x58>
			break;
		}
		if (desc[5] == cfg_value) {
    2ff8:	7942      	ldrb	r2, [r0, #5]
    2ffa:	42aa      	cmp	r2, r5
    2ffc:	d012      	beq.n	3024 <usb_find_cfg_desc+0x4c>
	return (ptr[0] + (ptr[1] << 8));
    2ffe:	78d9      	ldrb	r1, [r3, #3]
    3000:	789a      	ldrb	r2, [r3, #2]
    3002:	eb02 2201 	add.w	r2, r2, r1, lsl #8
 *  \param[in] cfg_desc Byte pointer to the descriptor start address
 *  \return Byte pointer to descriptor after configuration end
 */
static inline uint8_t *usb_cfg_desc_next(uint8_t *cfg_desc)
{
	return (cfg_desc + usb_cfg_desc_total_len(cfg_desc));
    3006:	fa13 f382 	uxtah	r3, r3, r2
	while (desc < eof) {
    300a:	429c      	cmp	r4, r3
    300c:	d909      	bls.n	3022 <usb_find_cfg_desc+0x4a>
		_desc_len_check();
    300e:	781a      	ldrb	r2, [r3, #0]
    3010:	2a01      	cmp	r2, #1
    3012:	d90f      	bls.n	3034 <usb_find_cfg_desc+0x5c>
		if (desc[1] != USB_DT_CONFIG) {
    3014:	785a      	ldrb	r2, [r3, #1]
    3016:	2a02      	cmp	r2, #2
    3018:	d10e      	bne.n	3038 <usb_find_cfg_desc+0x60>
		if (desc[5] == cfg_value) {
    301a:	795a      	ldrb	r2, [r3, #5]
    301c:	42aa      	cmp	r2, r5
    301e:	d1ee      	bne.n	2ffe <usb_find_cfg_desc+0x26>
    3020:	e000      	b.n	3024 <usb_find_cfg_desc+0x4c>
			return desc;
		}
		desc = usb_cfg_desc_next(desc);
	}
	return NULL;
    3022:	2300      	movs	r3, #0
}
    3024:	4618      	mov	r0, r3
    3026:	bd38      	pop	{r3, r4, r5, pc}
	return NULL;
    3028:	2300      	movs	r3, #0
    302a:	e7fb      	b.n	3024 <usb_find_cfg_desc+0x4c>
		_desc_len_check();
    302c:	2300      	movs	r3, #0
    302e:	e7f9      	b.n	3024 <usb_find_cfg_desc+0x4c>
	return NULL;
    3030:	2300      	movs	r3, #0
    3032:	e7f7      	b.n	3024 <usb_find_cfg_desc+0x4c>
		_desc_len_check();
    3034:	2300      	movs	r3, #0
    3036:	e7f5      	b.n	3024 <usb_find_cfg_desc+0x4c>
	return NULL;
    3038:	2300      	movs	r3, #0
    303a:	e7f3      	b.n	3024 <usb_find_cfg_desc+0x4c>
    303c:	00002f59 	.word	0x00002f59

00003040 <usb_find_str_desc>:
{
	uint8_t i;

	_param_error_check(desc && eof && (desc < eof));

	for (i = 0; desc < eof;) {
    3040:	4288      	cmp	r0, r1
    3042:	d217      	bcs.n	3074 <usb_find_str_desc+0x34>
{
    3044:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3048:	460d      	mov	r5, r1
    304a:	4616      	mov	r6, r2
	for (i = 0; desc < eof;) {
    304c:	2400      	movs	r4, #0
		desc = usb_find_desc(desc, eof, USB_DT_STRING);
    304e:	f04f 0803 	mov.w	r8, #3
    3052:	4f0c      	ldr	r7, [pc, #48]	; (3084 <usb_find_str_desc+0x44>)
    3054:	4642      	mov	r2, r8
    3056:	4629      	mov	r1, r5
    3058:	47b8      	blx	r7
		if (desc) {
    305a:	4603      	mov	r3, r0
    305c:	b170      	cbz	r0, 307c <usb_find_str_desc+0x3c>
	return desc[0];
    305e:	7800      	ldrb	r0, [r0, #0]
			_desc_len_check();
    3060:	2801      	cmp	r0, #1
    3062:	d90a      	bls.n	307a <usb_find_str_desc+0x3a>
			if (i == str_index) {
    3064:	42a6      	cmp	r6, r4
    3066:	d009      	beq.n	307c <usb_find_str_desc+0x3c>
	return (desc + usb_desc_len(desc));
    3068:	4418      	add	r0, r3
    306a:	3401      	adds	r4, #1
	for (i = 0; desc < eof;) {
    306c:	4285      	cmp	r5, r0
    306e:	d8f1      	bhi.n	3054 <usb_find_str_desc+0x14>
			desc = usb_desc_next(desc);
		} else {
			return NULL;
		}
	}
	return NULL;
    3070:	2300      	movs	r3, #0
    3072:	e003      	b.n	307c <usb_find_str_desc+0x3c>
    3074:	2300      	movs	r3, #0
}
    3076:	4618      	mov	r0, r3
    3078:	4770      	bx	lr
			_desc_len_check();
    307a:	2300      	movs	r3, #0
}
    307c:	4618      	mov	r0, r3
    307e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3082:	bf00      	nop
    3084:	00002f59 	.word	0x00002f59

00003088 <cdc_device_acm_init>:

/**
 * \brief CDC ACM Init
 */
void cdc_device_acm_init(void)
{
    3088:	b508      	push	{r3, lr}
	/* usb stack init */
	usbdc_init(ctrl_buffer);
    308a:	4805      	ldr	r0, [pc, #20]	; (30a0 <cdc_device_acm_init+0x18>)
    308c:	4b05      	ldr	r3, [pc, #20]	; (30a4 <cdc_device_acm_init+0x1c>)
    308e:	4798      	blx	r3

	/* usbdc_register_funcion inside */
	cdcdf_acm_init();
    3090:	4b05      	ldr	r3, [pc, #20]	; (30a8 <cdc_device_acm_init+0x20>)
    3092:	4798      	blx	r3

	usbdc_start(single_desc);
    3094:	4805      	ldr	r0, [pc, #20]	; (30ac <cdc_device_acm_init+0x24>)
    3096:	4b06      	ldr	r3, [pc, #24]	; (30b0 <cdc_device_acm_init+0x28>)
    3098:	4798      	blx	r3
	usbdc_attach();
    309a:	4b06      	ldr	r3, [pc, #24]	; (30b4 <cdc_device_acm_init+0x2c>)
    309c:	4798      	blx	r3
    309e:	bd08      	pop	{r3, pc}
    30a0:	20000888 	.word	0x20000888
    30a4:	00002e89 	.word	0x00002e89
    30a8:	00002779 	.word	0x00002779
    30ac:	20000068 	.word	0x20000068
    30b0:	00002ef9 	.word	0x00002ef9
    30b4:	00002f2d 	.word	0x00002f2d

000030b8 <usb_init>:
	while (1) {
	}
}

void usb_init(void)
{
    30b8:	b508      	push	{r3, lr}

	cdc_device_acm_init();
    30ba:	4b01      	ldr	r3, [pc, #4]	; (30c0 <usb_init+0x8>)
    30bc:	4798      	blx	r3
    30be:	bd08      	pop	{r3, pc}
    30c0:	00003089 	.word	0x00003089

000030c4 <atomic_enter_critical>:
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    30c4:	f3ef 8310 	mrs	r3, PRIMASK
/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
	*atomic = __get_PRIMASK();
    30c8:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
    30ca:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    30cc:	f3bf 8f5f 	dmb	sy
    30d0:	4770      	bx	lr

000030d2 <atomic_leave_critical>:
    30d2:	f3bf 8f5f 	dmb	sy
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
	__DMB();
	__set_PRIMASK(*atomic);
    30d6:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    30d8:	f383 8810 	msr	PRIMASK, r3
    30dc:	4770      	bx	lr

000030de <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
    30de:	b900      	cbnz	r0, 30e2 <assert+0x4>
		__asm("BKPT #0");
    30e0:	be00      	bkpt	0x0000
    30e2:	4770      	bx	lr

000030e4 <is_list_element>:
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
    30e4:	6803      	ldr	r3, [r0, #0]
    30e6:	b14b      	cbz	r3, 30fc <is_list_element+0x18>
		if (it == element) {
    30e8:	428b      	cmp	r3, r1
    30ea:	d009      	beq.n	3100 <is_list_element+0x1c>
	for (it = list->head; it; it = it->next) {
    30ec:	681b      	ldr	r3, [r3, #0]
    30ee:	b11b      	cbz	r3, 30f8 <is_list_element+0x14>
		if (it == element) {
    30f0:	4299      	cmp	r1, r3
    30f2:	d1fb      	bne.n	30ec <is_list_element+0x8>
			return true;
    30f4:	2001      	movs	r0, #1
		}
	}

	return false;
}
    30f6:	4770      	bx	lr
	return false;
    30f8:	2000      	movs	r0, #0
    30fa:	4770      	bx	lr
    30fc:	2000      	movs	r0, #0
    30fe:	4770      	bx	lr
			return true;
    3100:	2001      	movs	r0, #1
    3102:	4770      	bx	lr

00003104 <list_insert_at_end>:

/**
 * \brief Insert an element at list end
 */
void list_insert_at_end(struct list_descriptor *const list, void *const element)
{
    3104:	b570      	push	{r4, r5, r6, lr}
    3106:	4605      	mov	r5, r0
    3108:	460e      	mov	r6, r1
	struct list_element *it = list->head;
    310a:	6804      	ldr	r4, [r0, #0]

	ASSERT(!is_list_element(list, element));
    310c:	4b0a      	ldr	r3, [pc, #40]	; (3138 <list_insert_at_end+0x34>)
    310e:	4798      	blx	r3
    3110:	f080 0001 	eor.w	r0, r0, #1
    3114:	224f      	movs	r2, #79	; 0x4f
    3116:	4909      	ldr	r1, [pc, #36]	; (313c <list_insert_at_end+0x38>)
    3118:	b2c0      	uxtb	r0, r0
    311a:	4b09      	ldr	r3, [pc, #36]	; (3140 <list_insert_at_end+0x3c>)
    311c:	4798      	blx	r3

	if (!list->head) {
    311e:	682b      	ldr	r3, [r5, #0]
    3120:	b91b      	cbnz	r3, 312a <list_insert_at_end+0x26>
		list->head                             = (struct list_element *)element;
    3122:	602e      	str	r6, [r5, #0]
		((struct list_element *)element)->next = NULL;
    3124:	6033      	str	r3, [r6, #0]
		return;
    3126:	bd70      	pop	{r4, r5, r6, pc}
	}

	while (it->next) {
		it = it->next;
    3128:	461c      	mov	r4, r3
	while (it->next) {
    312a:	6823      	ldr	r3, [r4, #0]
    312c:	2b00      	cmp	r3, #0
    312e:	d1fb      	bne.n	3128 <list_insert_at_end+0x24>
	}
	it->next                               = (struct list_element *)element;
    3130:	6026      	str	r6, [r4, #0]
	((struct list_element *)element)->next = NULL;
    3132:	6033      	str	r3, [r6, #0]
    3134:	bd70      	pop	{r4, r5, r6, pc}
    3136:	bf00      	nop
    3138:	000030e5 	.word	0x000030e5
    313c:	0000413c 	.word	0x0000413c
    3140:	000030df 	.word	0x000030df

00003144 <__aeabi_drsub>:
    3144:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
    3148:	e002      	b.n	3150 <__adddf3>
    314a:	bf00      	nop

0000314c <__aeabi_dsub>:
    314c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00003150 <__adddf3>:
    3150:	b530      	push	{r4, r5, lr}
    3152:	ea4f 0441 	mov.w	r4, r1, lsl #1
    3156:	ea4f 0543 	mov.w	r5, r3, lsl #1
    315a:	ea94 0f05 	teq	r4, r5
    315e:	bf08      	it	eq
    3160:	ea90 0f02 	teqeq	r0, r2
    3164:	bf1f      	itttt	ne
    3166:	ea54 0c00 	orrsne.w	ip, r4, r0
    316a:	ea55 0c02 	orrsne.w	ip, r5, r2
    316e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
    3172:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    3176:	f000 80e2 	beq.w	333e <__adddf3+0x1ee>
    317a:	ea4f 5454 	mov.w	r4, r4, lsr #21
    317e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
    3182:	bfb8      	it	lt
    3184:	426d      	neglt	r5, r5
    3186:	dd0c      	ble.n	31a2 <__adddf3+0x52>
    3188:	442c      	add	r4, r5
    318a:	ea80 0202 	eor.w	r2, r0, r2
    318e:	ea81 0303 	eor.w	r3, r1, r3
    3192:	ea82 0000 	eor.w	r0, r2, r0
    3196:	ea83 0101 	eor.w	r1, r3, r1
    319a:	ea80 0202 	eor.w	r2, r0, r2
    319e:	ea81 0303 	eor.w	r3, r1, r3
    31a2:	2d36      	cmp	r5, #54	; 0x36
    31a4:	bf88      	it	hi
    31a6:	bd30      	pophi	{r4, r5, pc}
    31a8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    31ac:	ea4f 3101 	mov.w	r1, r1, lsl #12
    31b0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
    31b4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
    31b8:	d002      	beq.n	31c0 <__adddf3+0x70>
    31ba:	4240      	negs	r0, r0
    31bc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    31c0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
    31c4:	ea4f 3303 	mov.w	r3, r3, lsl #12
    31c8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
    31cc:	d002      	beq.n	31d4 <__adddf3+0x84>
    31ce:	4252      	negs	r2, r2
    31d0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    31d4:	ea94 0f05 	teq	r4, r5
    31d8:	f000 80a7 	beq.w	332a <__adddf3+0x1da>
    31dc:	f1a4 0401 	sub.w	r4, r4, #1
    31e0:	f1d5 0e20 	rsbs	lr, r5, #32
    31e4:	db0d      	blt.n	3202 <__adddf3+0xb2>
    31e6:	fa02 fc0e 	lsl.w	ip, r2, lr
    31ea:	fa22 f205 	lsr.w	r2, r2, r5
    31ee:	1880      	adds	r0, r0, r2
    31f0:	f141 0100 	adc.w	r1, r1, #0
    31f4:	fa03 f20e 	lsl.w	r2, r3, lr
    31f8:	1880      	adds	r0, r0, r2
    31fa:	fa43 f305 	asr.w	r3, r3, r5
    31fe:	4159      	adcs	r1, r3
    3200:	e00e      	b.n	3220 <__adddf3+0xd0>
    3202:	f1a5 0520 	sub.w	r5, r5, #32
    3206:	f10e 0e20 	add.w	lr, lr, #32
    320a:	2a01      	cmp	r2, #1
    320c:	fa03 fc0e 	lsl.w	ip, r3, lr
    3210:	bf28      	it	cs
    3212:	f04c 0c02 	orrcs.w	ip, ip, #2
    3216:	fa43 f305 	asr.w	r3, r3, r5
    321a:	18c0      	adds	r0, r0, r3
    321c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
    3220:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    3224:	d507      	bpl.n	3236 <__adddf3+0xe6>
    3226:	f04f 0e00 	mov.w	lr, #0
    322a:	f1dc 0c00 	rsbs	ip, ip, #0
    322e:	eb7e 0000 	sbcs.w	r0, lr, r0
    3232:	eb6e 0101 	sbc.w	r1, lr, r1
    3236:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
    323a:	d31b      	bcc.n	3274 <__adddf3+0x124>
    323c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
    3240:	d30c      	bcc.n	325c <__adddf3+0x10c>
    3242:	0849      	lsrs	r1, r1, #1
    3244:	ea5f 0030 	movs.w	r0, r0, rrx
    3248:	ea4f 0c3c 	mov.w	ip, ip, rrx
    324c:	f104 0401 	add.w	r4, r4, #1
    3250:	ea4f 5244 	mov.w	r2, r4, lsl #21
    3254:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
    3258:	f080 809a 	bcs.w	3390 <__adddf3+0x240>
    325c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
    3260:	bf08      	it	eq
    3262:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    3266:	f150 0000 	adcs.w	r0, r0, #0
    326a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    326e:	ea41 0105 	orr.w	r1, r1, r5
    3272:	bd30      	pop	{r4, r5, pc}
    3274:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
    3278:	4140      	adcs	r0, r0
    327a:	eb41 0101 	adc.w	r1, r1, r1
    327e:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    3282:	f1a4 0401 	sub.w	r4, r4, #1
    3286:	d1e9      	bne.n	325c <__adddf3+0x10c>
    3288:	f091 0f00 	teq	r1, #0
    328c:	bf04      	itt	eq
    328e:	4601      	moveq	r1, r0
    3290:	2000      	moveq	r0, #0
    3292:	fab1 f381 	clz	r3, r1
    3296:	bf08      	it	eq
    3298:	3320      	addeq	r3, #32
    329a:	f1a3 030b 	sub.w	r3, r3, #11
    329e:	f1b3 0220 	subs.w	r2, r3, #32
    32a2:	da0c      	bge.n	32be <__adddf3+0x16e>
    32a4:	320c      	adds	r2, #12
    32a6:	dd08      	ble.n	32ba <__adddf3+0x16a>
    32a8:	f102 0c14 	add.w	ip, r2, #20
    32ac:	f1c2 020c 	rsb	r2, r2, #12
    32b0:	fa01 f00c 	lsl.w	r0, r1, ip
    32b4:	fa21 f102 	lsr.w	r1, r1, r2
    32b8:	e00c      	b.n	32d4 <__adddf3+0x184>
    32ba:	f102 0214 	add.w	r2, r2, #20
    32be:	bfd8      	it	le
    32c0:	f1c2 0c20 	rsble	ip, r2, #32
    32c4:	fa01 f102 	lsl.w	r1, r1, r2
    32c8:	fa20 fc0c 	lsr.w	ip, r0, ip
    32cc:	bfdc      	itt	le
    32ce:	ea41 010c 	orrle.w	r1, r1, ip
    32d2:	4090      	lslle	r0, r2
    32d4:	1ae4      	subs	r4, r4, r3
    32d6:	bfa2      	ittt	ge
    32d8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
    32dc:	4329      	orrge	r1, r5
    32de:	bd30      	popge	{r4, r5, pc}
    32e0:	ea6f 0404 	mvn.w	r4, r4
    32e4:	3c1f      	subs	r4, #31
    32e6:	da1c      	bge.n	3322 <__adddf3+0x1d2>
    32e8:	340c      	adds	r4, #12
    32ea:	dc0e      	bgt.n	330a <__adddf3+0x1ba>
    32ec:	f104 0414 	add.w	r4, r4, #20
    32f0:	f1c4 0220 	rsb	r2, r4, #32
    32f4:	fa20 f004 	lsr.w	r0, r0, r4
    32f8:	fa01 f302 	lsl.w	r3, r1, r2
    32fc:	ea40 0003 	orr.w	r0, r0, r3
    3300:	fa21 f304 	lsr.w	r3, r1, r4
    3304:	ea45 0103 	orr.w	r1, r5, r3
    3308:	bd30      	pop	{r4, r5, pc}
    330a:	f1c4 040c 	rsb	r4, r4, #12
    330e:	f1c4 0220 	rsb	r2, r4, #32
    3312:	fa20 f002 	lsr.w	r0, r0, r2
    3316:	fa01 f304 	lsl.w	r3, r1, r4
    331a:	ea40 0003 	orr.w	r0, r0, r3
    331e:	4629      	mov	r1, r5
    3320:	bd30      	pop	{r4, r5, pc}
    3322:	fa21 f004 	lsr.w	r0, r1, r4
    3326:	4629      	mov	r1, r5
    3328:	bd30      	pop	{r4, r5, pc}
    332a:	f094 0f00 	teq	r4, #0
    332e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
    3332:	bf06      	itte	eq
    3334:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
    3338:	3401      	addeq	r4, #1
    333a:	3d01      	subne	r5, #1
    333c:	e74e      	b.n	31dc <__adddf3+0x8c>
    333e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    3342:	bf18      	it	ne
    3344:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    3348:	d029      	beq.n	339e <__adddf3+0x24e>
    334a:	ea94 0f05 	teq	r4, r5
    334e:	bf08      	it	eq
    3350:	ea90 0f02 	teqeq	r0, r2
    3354:	d005      	beq.n	3362 <__adddf3+0x212>
    3356:	ea54 0c00 	orrs.w	ip, r4, r0
    335a:	bf04      	itt	eq
    335c:	4619      	moveq	r1, r3
    335e:	4610      	moveq	r0, r2
    3360:	bd30      	pop	{r4, r5, pc}
    3362:	ea91 0f03 	teq	r1, r3
    3366:	bf1e      	ittt	ne
    3368:	2100      	movne	r1, #0
    336a:	2000      	movne	r0, #0
    336c:	bd30      	popne	{r4, r5, pc}
    336e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
    3372:	d105      	bne.n	3380 <__adddf3+0x230>
    3374:	0040      	lsls	r0, r0, #1
    3376:	4149      	adcs	r1, r1
    3378:	bf28      	it	cs
    337a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
    337e:	bd30      	pop	{r4, r5, pc}
    3380:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
    3384:	bf3c      	itt	cc
    3386:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
    338a:	bd30      	popcc	{r4, r5, pc}
    338c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    3390:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
    3394:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    3398:	f04f 0000 	mov.w	r0, #0
    339c:	bd30      	pop	{r4, r5, pc}
    339e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    33a2:	bf1a      	itte	ne
    33a4:	4619      	movne	r1, r3
    33a6:	4610      	movne	r0, r2
    33a8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
    33ac:	bf1c      	itt	ne
    33ae:	460b      	movne	r3, r1
    33b0:	4602      	movne	r2, r0
    33b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    33b6:	bf06      	itte	eq
    33b8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
    33bc:	ea91 0f03 	teqeq	r1, r3
    33c0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
    33c4:	bd30      	pop	{r4, r5, pc}
    33c6:	bf00      	nop

000033c8 <__aeabi_ui2d>:
    33c8:	f090 0f00 	teq	r0, #0
    33cc:	bf04      	itt	eq
    33ce:	2100      	moveq	r1, #0
    33d0:	4770      	bxeq	lr
    33d2:	b530      	push	{r4, r5, lr}
    33d4:	f44f 6480 	mov.w	r4, #1024	; 0x400
    33d8:	f104 0432 	add.w	r4, r4, #50	; 0x32
    33dc:	f04f 0500 	mov.w	r5, #0
    33e0:	f04f 0100 	mov.w	r1, #0
    33e4:	e750      	b.n	3288 <__adddf3+0x138>
    33e6:	bf00      	nop

000033e8 <__aeabi_i2d>:
    33e8:	f090 0f00 	teq	r0, #0
    33ec:	bf04      	itt	eq
    33ee:	2100      	moveq	r1, #0
    33f0:	4770      	bxeq	lr
    33f2:	b530      	push	{r4, r5, lr}
    33f4:	f44f 6480 	mov.w	r4, #1024	; 0x400
    33f8:	f104 0432 	add.w	r4, r4, #50	; 0x32
    33fc:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
    3400:	bf48      	it	mi
    3402:	4240      	negmi	r0, r0
    3404:	f04f 0100 	mov.w	r1, #0
    3408:	e73e      	b.n	3288 <__adddf3+0x138>
    340a:	bf00      	nop

0000340c <__aeabi_f2d>:
    340c:	0042      	lsls	r2, r0, #1
    340e:	ea4f 01e2 	mov.w	r1, r2, asr #3
    3412:	ea4f 0131 	mov.w	r1, r1, rrx
    3416:	ea4f 7002 	mov.w	r0, r2, lsl #28
    341a:	bf1f      	itttt	ne
    341c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
    3420:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
    3424:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
    3428:	4770      	bxne	lr
    342a:	f092 0f00 	teq	r2, #0
    342e:	bf14      	ite	ne
    3430:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
    3434:	4770      	bxeq	lr
    3436:	b530      	push	{r4, r5, lr}
    3438:	f44f 7460 	mov.w	r4, #896	; 0x380
    343c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    3440:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    3444:	e720      	b.n	3288 <__adddf3+0x138>
    3446:	bf00      	nop

00003448 <__aeabi_ul2d>:
    3448:	ea50 0201 	orrs.w	r2, r0, r1
    344c:	bf08      	it	eq
    344e:	4770      	bxeq	lr
    3450:	b530      	push	{r4, r5, lr}
    3452:	f04f 0500 	mov.w	r5, #0
    3456:	e00a      	b.n	346e <__aeabi_l2d+0x16>

00003458 <__aeabi_l2d>:
    3458:	ea50 0201 	orrs.w	r2, r0, r1
    345c:	bf08      	it	eq
    345e:	4770      	bxeq	lr
    3460:	b530      	push	{r4, r5, lr}
    3462:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
    3466:	d502      	bpl.n	346e <__aeabi_l2d+0x16>
    3468:	4240      	negs	r0, r0
    346a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    346e:	f44f 6480 	mov.w	r4, #1024	; 0x400
    3472:	f104 0432 	add.w	r4, r4, #50	; 0x32
    3476:	ea5f 5c91 	movs.w	ip, r1, lsr #22
    347a:	f43f aedc 	beq.w	3236 <__adddf3+0xe6>
    347e:	f04f 0203 	mov.w	r2, #3
    3482:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    3486:	bf18      	it	ne
    3488:	3203      	addne	r2, #3
    348a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    348e:	bf18      	it	ne
    3490:	3203      	addne	r2, #3
    3492:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
    3496:	f1c2 0320 	rsb	r3, r2, #32
    349a:	fa00 fc03 	lsl.w	ip, r0, r3
    349e:	fa20 f002 	lsr.w	r0, r0, r2
    34a2:	fa01 fe03 	lsl.w	lr, r1, r3
    34a6:	ea40 000e 	orr.w	r0, r0, lr
    34aa:	fa21 f102 	lsr.w	r1, r1, r2
    34ae:	4414      	add	r4, r2
    34b0:	e6c1      	b.n	3236 <__adddf3+0xe6>
    34b2:	bf00      	nop

000034b4 <__aeabi_dmul>:
    34b4:	b570      	push	{r4, r5, r6, lr}
    34b6:	f04f 0cff 	mov.w	ip, #255	; 0xff
    34ba:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    34be:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    34c2:	bf1d      	ittte	ne
    34c4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    34c8:	ea94 0f0c 	teqne	r4, ip
    34cc:	ea95 0f0c 	teqne	r5, ip
    34d0:	f000 f8de 	bleq	3690 <__aeabi_dmul+0x1dc>
    34d4:	442c      	add	r4, r5
    34d6:	ea81 0603 	eor.w	r6, r1, r3
    34da:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
    34de:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
    34e2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
    34e6:	bf18      	it	ne
    34e8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
    34ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    34f0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    34f4:	d038      	beq.n	3568 <__aeabi_dmul+0xb4>
    34f6:	fba0 ce02 	umull	ip, lr, r0, r2
    34fa:	f04f 0500 	mov.w	r5, #0
    34fe:	fbe1 e502 	umlal	lr, r5, r1, r2
    3502:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
    3506:	fbe0 e503 	umlal	lr, r5, r0, r3
    350a:	f04f 0600 	mov.w	r6, #0
    350e:	fbe1 5603 	umlal	r5, r6, r1, r3
    3512:	f09c 0f00 	teq	ip, #0
    3516:	bf18      	it	ne
    3518:	f04e 0e01 	orrne.w	lr, lr, #1
    351c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
    3520:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
    3524:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
    3528:	d204      	bcs.n	3534 <__aeabi_dmul+0x80>
    352a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
    352e:	416d      	adcs	r5, r5
    3530:	eb46 0606 	adc.w	r6, r6, r6
    3534:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
    3538:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
    353c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
    3540:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
    3544:	ea4f 2ece 	mov.w	lr, lr, lsl #11
    3548:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    354c:	bf88      	it	hi
    354e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    3552:	d81e      	bhi.n	3592 <__aeabi_dmul+0xde>
    3554:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
    3558:	bf08      	it	eq
    355a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
    355e:	f150 0000 	adcs.w	r0, r0, #0
    3562:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    3566:	bd70      	pop	{r4, r5, r6, pc}
    3568:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
    356c:	ea46 0101 	orr.w	r1, r6, r1
    3570:	ea40 0002 	orr.w	r0, r0, r2
    3574:	ea81 0103 	eor.w	r1, r1, r3
    3578:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
    357c:	bfc2      	ittt	gt
    357e:	ebd4 050c 	rsbsgt	r5, r4, ip
    3582:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    3586:	bd70      	popgt	{r4, r5, r6, pc}
    3588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    358c:	f04f 0e00 	mov.w	lr, #0
    3590:	3c01      	subs	r4, #1
    3592:	f300 80ab 	bgt.w	36ec <__aeabi_dmul+0x238>
    3596:	f114 0f36 	cmn.w	r4, #54	; 0x36
    359a:	bfde      	ittt	le
    359c:	2000      	movle	r0, #0
    359e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
    35a2:	bd70      	pople	{r4, r5, r6, pc}
    35a4:	f1c4 0400 	rsb	r4, r4, #0
    35a8:	3c20      	subs	r4, #32
    35aa:	da35      	bge.n	3618 <__aeabi_dmul+0x164>
    35ac:	340c      	adds	r4, #12
    35ae:	dc1b      	bgt.n	35e8 <__aeabi_dmul+0x134>
    35b0:	f104 0414 	add.w	r4, r4, #20
    35b4:	f1c4 0520 	rsb	r5, r4, #32
    35b8:	fa00 f305 	lsl.w	r3, r0, r5
    35bc:	fa20 f004 	lsr.w	r0, r0, r4
    35c0:	fa01 f205 	lsl.w	r2, r1, r5
    35c4:	ea40 0002 	orr.w	r0, r0, r2
    35c8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
    35cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    35d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    35d4:	fa21 f604 	lsr.w	r6, r1, r4
    35d8:	eb42 0106 	adc.w	r1, r2, r6
    35dc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    35e0:	bf08      	it	eq
    35e2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    35e6:	bd70      	pop	{r4, r5, r6, pc}
    35e8:	f1c4 040c 	rsb	r4, r4, #12
    35ec:	f1c4 0520 	rsb	r5, r4, #32
    35f0:	fa00 f304 	lsl.w	r3, r0, r4
    35f4:	fa20 f005 	lsr.w	r0, r0, r5
    35f8:	fa01 f204 	lsl.w	r2, r1, r4
    35fc:	ea40 0002 	orr.w	r0, r0, r2
    3600:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    3604:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    3608:	f141 0100 	adc.w	r1, r1, #0
    360c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    3610:	bf08      	it	eq
    3612:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    3616:	bd70      	pop	{r4, r5, r6, pc}
    3618:	f1c4 0520 	rsb	r5, r4, #32
    361c:	fa00 f205 	lsl.w	r2, r0, r5
    3620:	ea4e 0e02 	orr.w	lr, lr, r2
    3624:	fa20 f304 	lsr.w	r3, r0, r4
    3628:	fa01 f205 	lsl.w	r2, r1, r5
    362c:	ea43 0302 	orr.w	r3, r3, r2
    3630:	fa21 f004 	lsr.w	r0, r1, r4
    3634:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    3638:	fa21 f204 	lsr.w	r2, r1, r4
    363c:	ea20 0002 	bic.w	r0, r0, r2
    3640:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
    3644:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    3648:	bf08      	it	eq
    364a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    364e:	bd70      	pop	{r4, r5, r6, pc}
    3650:	f094 0f00 	teq	r4, #0
    3654:	d10f      	bne.n	3676 <__aeabi_dmul+0x1c2>
    3656:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
    365a:	0040      	lsls	r0, r0, #1
    365c:	eb41 0101 	adc.w	r1, r1, r1
    3660:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    3664:	bf08      	it	eq
    3666:	3c01      	subeq	r4, #1
    3668:	d0f7      	beq.n	365a <__aeabi_dmul+0x1a6>
    366a:	ea41 0106 	orr.w	r1, r1, r6
    366e:	f095 0f00 	teq	r5, #0
    3672:	bf18      	it	ne
    3674:	4770      	bxne	lr
    3676:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
    367a:	0052      	lsls	r2, r2, #1
    367c:	eb43 0303 	adc.w	r3, r3, r3
    3680:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
    3684:	bf08      	it	eq
    3686:	3d01      	subeq	r5, #1
    3688:	d0f7      	beq.n	367a <__aeabi_dmul+0x1c6>
    368a:	ea43 0306 	orr.w	r3, r3, r6
    368e:	4770      	bx	lr
    3690:	ea94 0f0c 	teq	r4, ip
    3694:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    3698:	bf18      	it	ne
    369a:	ea95 0f0c 	teqne	r5, ip
    369e:	d00c      	beq.n	36ba <__aeabi_dmul+0x206>
    36a0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    36a4:	bf18      	it	ne
    36a6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    36aa:	d1d1      	bne.n	3650 <__aeabi_dmul+0x19c>
    36ac:	ea81 0103 	eor.w	r1, r1, r3
    36b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    36b4:	f04f 0000 	mov.w	r0, #0
    36b8:	bd70      	pop	{r4, r5, r6, pc}
    36ba:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    36be:	bf06      	itte	eq
    36c0:	4610      	moveq	r0, r2
    36c2:	4619      	moveq	r1, r3
    36c4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    36c8:	d019      	beq.n	36fe <__aeabi_dmul+0x24a>
    36ca:	ea94 0f0c 	teq	r4, ip
    36ce:	d102      	bne.n	36d6 <__aeabi_dmul+0x222>
    36d0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
    36d4:	d113      	bne.n	36fe <__aeabi_dmul+0x24a>
    36d6:	ea95 0f0c 	teq	r5, ip
    36da:	d105      	bne.n	36e8 <__aeabi_dmul+0x234>
    36dc:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
    36e0:	bf1c      	itt	ne
    36e2:	4610      	movne	r0, r2
    36e4:	4619      	movne	r1, r3
    36e6:	d10a      	bne.n	36fe <__aeabi_dmul+0x24a>
    36e8:	ea81 0103 	eor.w	r1, r1, r3
    36ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    36f0:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    36f4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    36f8:	f04f 0000 	mov.w	r0, #0
    36fc:	bd70      	pop	{r4, r5, r6, pc}
    36fe:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    3702:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
    3706:	bd70      	pop	{r4, r5, r6, pc}

00003708 <__aeabi_ddiv>:
    3708:	b570      	push	{r4, r5, r6, lr}
    370a:	f04f 0cff 	mov.w	ip, #255	; 0xff
    370e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    3712:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    3716:	bf1d      	ittte	ne
    3718:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    371c:	ea94 0f0c 	teqne	r4, ip
    3720:	ea95 0f0c 	teqne	r5, ip
    3724:	f000 f8a7 	bleq	3876 <__aeabi_ddiv+0x16e>
    3728:	eba4 0405 	sub.w	r4, r4, r5
    372c:	ea81 0e03 	eor.w	lr, r1, r3
    3730:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    3734:	ea4f 3101 	mov.w	r1, r1, lsl #12
    3738:	f000 8088 	beq.w	384c <__aeabi_ddiv+0x144>
    373c:	ea4f 3303 	mov.w	r3, r3, lsl #12
    3740:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
    3744:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
    3748:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    374c:	ea4f 2202 	mov.w	r2, r2, lsl #8
    3750:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
    3754:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
    3758:	ea4f 2600 	mov.w	r6, r0, lsl #8
    375c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
    3760:	429d      	cmp	r5, r3
    3762:	bf08      	it	eq
    3764:	4296      	cmpeq	r6, r2
    3766:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
    376a:	f504 7440 	add.w	r4, r4, #768	; 0x300
    376e:	d202      	bcs.n	3776 <__aeabi_ddiv+0x6e>
    3770:	085b      	lsrs	r3, r3, #1
    3772:	ea4f 0232 	mov.w	r2, r2, rrx
    3776:	1ab6      	subs	r6, r6, r2
    3778:	eb65 0503 	sbc.w	r5, r5, r3
    377c:	085b      	lsrs	r3, r3, #1
    377e:	ea4f 0232 	mov.w	r2, r2, rrx
    3782:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    3786:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
    378a:	ebb6 0e02 	subs.w	lr, r6, r2
    378e:	eb75 0e03 	sbcs.w	lr, r5, r3
    3792:	bf22      	ittt	cs
    3794:	1ab6      	subcs	r6, r6, r2
    3796:	4675      	movcs	r5, lr
    3798:	ea40 000c 	orrcs.w	r0, r0, ip
    379c:	085b      	lsrs	r3, r3, #1
    379e:	ea4f 0232 	mov.w	r2, r2, rrx
    37a2:	ebb6 0e02 	subs.w	lr, r6, r2
    37a6:	eb75 0e03 	sbcs.w	lr, r5, r3
    37aa:	bf22      	ittt	cs
    37ac:	1ab6      	subcs	r6, r6, r2
    37ae:	4675      	movcs	r5, lr
    37b0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
    37b4:	085b      	lsrs	r3, r3, #1
    37b6:	ea4f 0232 	mov.w	r2, r2, rrx
    37ba:	ebb6 0e02 	subs.w	lr, r6, r2
    37be:	eb75 0e03 	sbcs.w	lr, r5, r3
    37c2:	bf22      	ittt	cs
    37c4:	1ab6      	subcs	r6, r6, r2
    37c6:	4675      	movcs	r5, lr
    37c8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
    37cc:	085b      	lsrs	r3, r3, #1
    37ce:	ea4f 0232 	mov.w	r2, r2, rrx
    37d2:	ebb6 0e02 	subs.w	lr, r6, r2
    37d6:	eb75 0e03 	sbcs.w	lr, r5, r3
    37da:	bf22      	ittt	cs
    37dc:	1ab6      	subcs	r6, r6, r2
    37de:	4675      	movcs	r5, lr
    37e0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
    37e4:	ea55 0e06 	orrs.w	lr, r5, r6
    37e8:	d018      	beq.n	381c <__aeabi_ddiv+0x114>
    37ea:	ea4f 1505 	mov.w	r5, r5, lsl #4
    37ee:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
    37f2:	ea4f 1606 	mov.w	r6, r6, lsl #4
    37f6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    37fa:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
    37fe:	ea4f 02c2 	mov.w	r2, r2, lsl #3
    3802:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
    3806:	d1c0      	bne.n	378a <__aeabi_ddiv+0x82>
    3808:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    380c:	d10b      	bne.n	3826 <__aeabi_ddiv+0x11e>
    380e:	ea41 0100 	orr.w	r1, r1, r0
    3812:	f04f 0000 	mov.w	r0, #0
    3816:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
    381a:	e7b6      	b.n	378a <__aeabi_ddiv+0x82>
    381c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    3820:	bf04      	itt	eq
    3822:	4301      	orreq	r1, r0
    3824:	2000      	moveq	r0, #0
    3826:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    382a:	bf88      	it	hi
    382c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    3830:	f63f aeaf 	bhi.w	3592 <__aeabi_dmul+0xde>
    3834:	ebb5 0c03 	subs.w	ip, r5, r3
    3838:	bf04      	itt	eq
    383a:	ebb6 0c02 	subseq.w	ip, r6, r2
    383e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    3842:	f150 0000 	adcs.w	r0, r0, #0
    3846:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    384a:	bd70      	pop	{r4, r5, r6, pc}
    384c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
    3850:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
    3854:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
    3858:	bfc2      	ittt	gt
    385a:	ebd4 050c 	rsbsgt	r5, r4, ip
    385e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    3862:	bd70      	popgt	{r4, r5, r6, pc}
    3864:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    3868:	f04f 0e00 	mov.w	lr, #0
    386c:	3c01      	subs	r4, #1
    386e:	e690      	b.n	3592 <__aeabi_dmul+0xde>
    3870:	ea45 0e06 	orr.w	lr, r5, r6
    3874:	e68d      	b.n	3592 <__aeabi_dmul+0xde>
    3876:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    387a:	ea94 0f0c 	teq	r4, ip
    387e:	bf08      	it	eq
    3880:	ea95 0f0c 	teqeq	r5, ip
    3884:	f43f af3b 	beq.w	36fe <__aeabi_dmul+0x24a>
    3888:	ea94 0f0c 	teq	r4, ip
    388c:	d10a      	bne.n	38a4 <__aeabi_ddiv+0x19c>
    388e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    3892:	f47f af34 	bne.w	36fe <__aeabi_dmul+0x24a>
    3896:	ea95 0f0c 	teq	r5, ip
    389a:	f47f af25 	bne.w	36e8 <__aeabi_dmul+0x234>
    389e:	4610      	mov	r0, r2
    38a0:	4619      	mov	r1, r3
    38a2:	e72c      	b.n	36fe <__aeabi_dmul+0x24a>
    38a4:	ea95 0f0c 	teq	r5, ip
    38a8:	d106      	bne.n	38b8 <__aeabi_ddiv+0x1b0>
    38aa:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    38ae:	f43f aefd 	beq.w	36ac <__aeabi_dmul+0x1f8>
    38b2:	4610      	mov	r0, r2
    38b4:	4619      	mov	r1, r3
    38b6:	e722      	b.n	36fe <__aeabi_dmul+0x24a>
    38b8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    38bc:	bf18      	it	ne
    38be:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    38c2:	f47f aec5 	bne.w	3650 <__aeabi_dmul+0x19c>
    38c6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
    38ca:	f47f af0d 	bne.w	36e8 <__aeabi_dmul+0x234>
    38ce:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
    38d2:	f47f aeeb 	bne.w	36ac <__aeabi_dmul+0x1f8>
    38d6:	e712      	b.n	36fe <__aeabi_dmul+0x24a>

000038d8 <__gedf2>:
    38d8:	f04f 3cff 	mov.w	ip, #4294967295
    38dc:	e006      	b.n	38ec <__cmpdf2+0x4>
    38de:	bf00      	nop

000038e0 <__ledf2>:
    38e0:	f04f 0c01 	mov.w	ip, #1
    38e4:	e002      	b.n	38ec <__cmpdf2+0x4>
    38e6:	bf00      	nop

000038e8 <__cmpdf2>:
    38e8:	f04f 0c01 	mov.w	ip, #1
    38ec:	f84d cd04 	str.w	ip, [sp, #-4]!
    38f0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    38f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    38f8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    38fc:	bf18      	it	ne
    38fe:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
    3902:	d01b      	beq.n	393c <__cmpdf2+0x54>
    3904:	b001      	add	sp, #4
    3906:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
    390a:	bf0c      	ite	eq
    390c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
    3910:	ea91 0f03 	teqne	r1, r3
    3914:	bf02      	ittt	eq
    3916:	ea90 0f02 	teqeq	r0, r2
    391a:	2000      	moveq	r0, #0
    391c:	4770      	bxeq	lr
    391e:	f110 0f00 	cmn.w	r0, #0
    3922:	ea91 0f03 	teq	r1, r3
    3926:	bf58      	it	pl
    3928:	4299      	cmppl	r1, r3
    392a:	bf08      	it	eq
    392c:	4290      	cmpeq	r0, r2
    392e:	bf2c      	ite	cs
    3930:	17d8      	asrcs	r0, r3, #31
    3932:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
    3936:	f040 0001 	orr.w	r0, r0, #1
    393a:	4770      	bx	lr
    393c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    3940:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    3944:	d102      	bne.n	394c <__cmpdf2+0x64>
    3946:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
    394a:	d107      	bne.n	395c <__cmpdf2+0x74>
    394c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    3950:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    3954:	d1d6      	bne.n	3904 <__cmpdf2+0x1c>
    3956:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
    395a:	d0d3      	beq.n	3904 <__cmpdf2+0x1c>
    395c:	f85d 0b04 	ldr.w	r0, [sp], #4
    3960:	4770      	bx	lr
    3962:	bf00      	nop

00003964 <__aeabi_cdrcmple>:
    3964:	4684      	mov	ip, r0
    3966:	4610      	mov	r0, r2
    3968:	4662      	mov	r2, ip
    396a:	468c      	mov	ip, r1
    396c:	4619      	mov	r1, r3
    396e:	4663      	mov	r3, ip
    3970:	e000      	b.n	3974 <__aeabi_cdcmpeq>
    3972:	bf00      	nop

00003974 <__aeabi_cdcmpeq>:
    3974:	b501      	push	{r0, lr}
    3976:	f7ff ffb7 	bl	38e8 <__cmpdf2>
    397a:	2800      	cmp	r0, #0
    397c:	bf48      	it	mi
    397e:	f110 0f00 	cmnmi.w	r0, #0
    3982:	bd01      	pop	{r0, pc}

00003984 <__aeabi_dcmpeq>:
    3984:	f84d ed08 	str.w	lr, [sp, #-8]!
    3988:	f7ff fff4 	bl	3974 <__aeabi_cdcmpeq>
    398c:	bf0c      	ite	eq
    398e:	2001      	moveq	r0, #1
    3990:	2000      	movne	r0, #0
    3992:	f85d fb08 	ldr.w	pc, [sp], #8
    3996:	bf00      	nop

00003998 <__aeabi_dcmplt>:
    3998:	f84d ed08 	str.w	lr, [sp, #-8]!
    399c:	f7ff ffea 	bl	3974 <__aeabi_cdcmpeq>
    39a0:	bf34      	ite	cc
    39a2:	2001      	movcc	r0, #1
    39a4:	2000      	movcs	r0, #0
    39a6:	f85d fb08 	ldr.w	pc, [sp], #8
    39aa:	bf00      	nop

000039ac <__aeabi_dcmple>:
    39ac:	f84d ed08 	str.w	lr, [sp, #-8]!
    39b0:	f7ff ffe0 	bl	3974 <__aeabi_cdcmpeq>
    39b4:	bf94      	ite	ls
    39b6:	2001      	movls	r0, #1
    39b8:	2000      	movhi	r0, #0
    39ba:	f85d fb08 	ldr.w	pc, [sp], #8
    39be:	bf00      	nop

000039c0 <__aeabi_dcmpge>:
    39c0:	f84d ed08 	str.w	lr, [sp, #-8]!
    39c4:	f7ff ffce 	bl	3964 <__aeabi_cdrcmple>
    39c8:	bf94      	ite	ls
    39ca:	2001      	movls	r0, #1
    39cc:	2000      	movhi	r0, #0
    39ce:	f85d fb08 	ldr.w	pc, [sp], #8
    39d2:	bf00      	nop

000039d4 <__aeabi_dcmpgt>:
    39d4:	f84d ed08 	str.w	lr, [sp, #-8]!
    39d8:	f7ff ffc4 	bl	3964 <__aeabi_cdrcmple>
    39dc:	bf34      	ite	cc
    39de:	2001      	movcc	r0, #1
    39e0:	2000      	movcs	r0, #0
    39e2:	f85d fb08 	ldr.w	pc, [sp], #8
    39e6:	bf00      	nop

000039e8 <__aeabi_dcmpun>:
    39e8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    39ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    39f0:	d102      	bne.n	39f8 <__aeabi_dcmpun+0x10>
    39f2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
    39f6:	d10a      	bne.n	3a0e <__aeabi_dcmpun+0x26>
    39f8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    39fc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    3a00:	d102      	bne.n	3a08 <__aeabi_dcmpun+0x20>
    3a02:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
    3a06:	d102      	bne.n	3a0e <__aeabi_dcmpun+0x26>
    3a08:	f04f 0000 	mov.w	r0, #0
    3a0c:	4770      	bx	lr
    3a0e:	f04f 0001 	mov.w	r0, #1
    3a12:	4770      	bx	lr

00003a14 <__aeabi_d2uiz>:
    3a14:	004a      	lsls	r2, r1, #1
    3a16:	d211      	bcs.n	3a3c <__aeabi_d2uiz+0x28>
    3a18:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
    3a1c:	d211      	bcs.n	3a42 <__aeabi_d2uiz+0x2e>
    3a1e:	d50d      	bpl.n	3a3c <__aeabi_d2uiz+0x28>
    3a20:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
    3a24:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
    3a28:	d40e      	bmi.n	3a48 <__aeabi_d2uiz+0x34>
    3a2a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    3a2e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    3a32:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
    3a36:	fa23 f002 	lsr.w	r0, r3, r2
    3a3a:	4770      	bx	lr
    3a3c:	f04f 0000 	mov.w	r0, #0
    3a40:	4770      	bx	lr
    3a42:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
    3a46:	d102      	bne.n	3a4e <__aeabi_d2uiz+0x3a>
    3a48:	f04f 30ff 	mov.w	r0, #4294967295
    3a4c:	4770      	bx	lr
    3a4e:	f04f 0000 	mov.w	r0, #0
    3a52:	4770      	bx	lr

00003a54 <__aeabi_frsub>:
    3a54:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
    3a58:	e002      	b.n	3a60 <__addsf3>
    3a5a:	bf00      	nop

00003a5c <__aeabi_fsub>:
    3a5c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

00003a60 <__addsf3>:
    3a60:	0042      	lsls	r2, r0, #1
    3a62:	bf1f      	itttt	ne
    3a64:	ea5f 0341 	movsne.w	r3, r1, lsl #1
    3a68:	ea92 0f03 	teqne	r2, r3
    3a6c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
    3a70:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
    3a74:	d06a      	beq.n	3b4c <__addsf3+0xec>
    3a76:	ea4f 6212 	mov.w	r2, r2, lsr #24
    3a7a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
    3a7e:	bfc1      	itttt	gt
    3a80:	18d2      	addgt	r2, r2, r3
    3a82:	4041      	eorgt	r1, r0
    3a84:	4048      	eorgt	r0, r1
    3a86:	4041      	eorgt	r1, r0
    3a88:	bfb8      	it	lt
    3a8a:	425b      	neglt	r3, r3
    3a8c:	2b19      	cmp	r3, #25
    3a8e:	bf88      	it	hi
    3a90:	4770      	bxhi	lr
    3a92:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
    3a96:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    3a9a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    3a9e:	bf18      	it	ne
    3aa0:	4240      	negne	r0, r0
    3aa2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    3aa6:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
    3aaa:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    3aae:	bf18      	it	ne
    3ab0:	4249      	negne	r1, r1
    3ab2:	ea92 0f03 	teq	r2, r3
    3ab6:	d03f      	beq.n	3b38 <__addsf3+0xd8>
    3ab8:	f1a2 0201 	sub.w	r2, r2, #1
    3abc:	fa41 fc03 	asr.w	ip, r1, r3
    3ac0:	eb10 000c 	adds.w	r0, r0, ip
    3ac4:	f1c3 0320 	rsb	r3, r3, #32
    3ac8:	fa01 f103 	lsl.w	r1, r1, r3
    3acc:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
    3ad0:	d502      	bpl.n	3ad8 <__addsf3+0x78>
    3ad2:	4249      	negs	r1, r1
    3ad4:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
    3ad8:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    3adc:	d313      	bcc.n	3b06 <__addsf3+0xa6>
    3ade:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
    3ae2:	d306      	bcc.n	3af2 <__addsf3+0x92>
    3ae4:	0840      	lsrs	r0, r0, #1
    3ae6:	ea4f 0131 	mov.w	r1, r1, rrx
    3aea:	f102 0201 	add.w	r2, r2, #1
    3aee:	2afe      	cmp	r2, #254	; 0xfe
    3af0:	d251      	bcs.n	3b96 <__addsf3+0x136>
    3af2:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
    3af6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
    3afa:	bf08      	it	eq
    3afc:	f020 0001 	biceq.w	r0, r0, #1
    3b00:	ea40 0003 	orr.w	r0, r0, r3
    3b04:	4770      	bx	lr
    3b06:	0049      	lsls	r1, r1, #1
    3b08:	eb40 0000 	adc.w	r0, r0, r0
    3b0c:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
    3b10:	f1a2 0201 	sub.w	r2, r2, #1
    3b14:	d1ed      	bne.n	3af2 <__addsf3+0x92>
    3b16:	fab0 fc80 	clz	ip, r0
    3b1a:	f1ac 0c08 	sub.w	ip, ip, #8
    3b1e:	ebb2 020c 	subs.w	r2, r2, ip
    3b22:	fa00 f00c 	lsl.w	r0, r0, ip
    3b26:	bfaa      	itet	ge
    3b28:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
    3b2c:	4252      	neglt	r2, r2
    3b2e:	4318      	orrge	r0, r3
    3b30:	bfbc      	itt	lt
    3b32:	40d0      	lsrlt	r0, r2
    3b34:	4318      	orrlt	r0, r3
    3b36:	4770      	bx	lr
    3b38:	f092 0f00 	teq	r2, #0
    3b3c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
    3b40:	bf06      	itte	eq
    3b42:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
    3b46:	3201      	addeq	r2, #1
    3b48:	3b01      	subne	r3, #1
    3b4a:	e7b5      	b.n	3ab8 <__addsf3+0x58>
    3b4c:	ea4f 0341 	mov.w	r3, r1, lsl #1
    3b50:	ea7f 6c22 	mvns.w	ip, r2, asr #24
    3b54:	bf18      	it	ne
    3b56:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
    3b5a:	d021      	beq.n	3ba0 <__addsf3+0x140>
    3b5c:	ea92 0f03 	teq	r2, r3
    3b60:	d004      	beq.n	3b6c <__addsf3+0x10c>
    3b62:	f092 0f00 	teq	r2, #0
    3b66:	bf08      	it	eq
    3b68:	4608      	moveq	r0, r1
    3b6a:	4770      	bx	lr
    3b6c:	ea90 0f01 	teq	r0, r1
    3b70:	bf1c      	itt	ne
    3b72:	2000      	movne	r0, #0
    3b74:	4770      	bxne	lr
    3b76:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
    3b7a:	d104      	bne.n	3b86 <__addsf3+0x126>
    3b7c:	0040      	lsls	r0, r0, #1
    3b7e:	bf28      	it	cs
    3b80:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
    3b84:	4770      	bx	lr
    3b86:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
    3b8a:	bf3c      	itt	cc
    3b8c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
    3b90:	4770      	bxcc	lr
    3b92:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
    3b96:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
    3b9a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    3b9e:	4770      	bx	lr
    3ba0:	ea7f 6222 	mvns.w	r2, r2, asr #24
    3ba4:	bf16      	itet	ne
    3ba6:	4608      	movne	r0, r1
    3ba8:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
    3bac:	4601      	movne	r1, r0
    3bae:	0242      	lsls	r2, r0, #9
    3bb0:	bf06      	itte	eq
    3bb2:	ea5f 2341 	movseq.w	r3, r1, lsl #9
    3bb6:	ea90 0f01 	teqeq	r0, r1
    3bba:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
    3bbe:	4770      	bx	lr

00003bc0 <__aeabi_ui2f>:
    3bc0:	f04f 0300 	mov.w	r3, #0
    3bc4:	e004      	b.n	3bd0 <__aeabi_i2f+0x8>
    3bc6:	bf00      	nop

00003bc8 <__aeabi_i2f>:
    3bc8:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
    3bcc:	bf48      	it	mi
    3bce:	4240      	negmi	r0, r0
    3bd0:	ea5f 0c00 	movs.w	ip, r0
    3bd4:	bf08      	it	eq
    3bd6:	4770      	bxeq	lr
    3bd8:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
    3bdc:	4601      	mov	r1, r0
    3bde:	f04f 0000 	mov.w	r0, #0
    3be2:	e01c      	b.n	3c1e <__aeabi_l2f+0x2a>

00003be4 <__aeabi_ul2f>:
    3be4:	ea50 0201 	orrs.w	r2, r0, r1
    3be8:	bf08      	it	eq
    3bea:	4770      	bxeq	lr
    3bec:	f04f 0300 	mov.w	r3, #0
    3bf0:	e00a      	b.n	3c08 <__aeabi_l2f+0x14>
    3bf2:	bf00      	nop

00003bf4 <__aeabi_l2f>:
    3bf4:	ea50 0201 	orrs.w	r2, r0, r1
    3bf8:	bf08      	it	eq
    3bfa:	4770      	bxeq	lr
    3bfc:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
    3c00:	d502      	bpl.n	3c08 <__aeabi_l2f+0x14>
    3c02:	4240      	negs	r0, r0
    3c04:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    3c08:	ea5f 0c01 	movs.w	ip, r1
    3c0c:	bf02      	ittt	eq
    3c0e:	4684      	moveq	ip, r0
    3c10:	4601      	moveq	r1, r0
    3c12:	2000      	moveq	r0, #0
    3c14:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
    3c18:	bf08      	it	eq
    3c1a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
    3c1e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
    3c22:	fabc f28c 	clz	r2, ip
    3c26:	3a08      	subs	r2, #8
    3c28:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
    3c2c:	db10      	blt.n	3c50 <__aeabi_l2f+0x5c>
    3c2e:	fa01 fc02 	lsl.w	ip, r1, r2
    3c32:	4463      	add	r3, ip
    3c34:	fa00 fc02 	lsl.w	ip, r0, r2
    3c38:	f1c2 0220 	rsb	r2, r2, #32
    3c3c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
    3c40:	fa20 f202 	lsr.w	r2, r0, r2
    3c44:	eb43 0002 	adc.w	r0, r3, r2
    3c48:	bf08      	it	eq
    3c4a:	f020 0001 	biceq.w	r0, r0, #1
    3c4e:	4770      	bx	lr
    3c50:	f102 0220 	add.w	r2, r2, #32
    3c54:	fa01 fc02 	lsl.w	ip, r1, r2
    3c58:	f1c2 0220 	rsb	r2, r2, #32
    3c5c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
    3c60:	fa21 f202 	lsr.w	r2, r1, r2
    3c64:	eb43 0002 	adc.w	r0, r3, r2
    3c68:	bf08      	it	eq
    3c6a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
    3c6e:	4770      	bx	lr

00003c70 <__libc_init_array>:
    3c70:	b570      	push	{r4, r5, r6, lr}
    3c72:	4e0f      	ldr	r6, [pc, #60]	; (3cb0 <__libc_init_array+0x40>)
    3c74:	4d0f      	ldr	r5, [pc, #60]	; (3cb4 <__libc_init_array+0x44>)
    3c76:	1b76      	subs	r6, r6, r5
    3c78:	10b6      	asrs	r6, r6, #2
    3c7a:	bf18      	it	ne
    3c7c:	2400      	movne	r4, #0
    3c7e:	d005      	beq.n	3c8c <__libc_init_array+0x1c>
    3c80:	3401      	adds	r4, #1
    3c82:	f855 3b04 	ldr.w	r3, [r5], #4
    3c86:	4798      	blx	r3
    3c88:	42a6      	cmp	r6, r4
    3c8a:	d1f9      	bne.n	3c80 <__libc_init_array+0x10>
    3c8c:	4e0a      	ldr	r6, [pc, #40]	; (3cb8 <__libc_init_array+0x48>)
    3c8e:	4d0b      	ldr	r5, [pc, #44]	; (3cbc <__libc_init_array+0x4c>)
    3c90:	1b76      	subs	r6, r6, r5
    3c92:	f000 fa65 	bl	4160 <_init>
    3c96:	10b6      	asrs	r6, r6, #2
    3c98:	bf18      	it	ne
    3c9a:	2400      	movne	r4, #0
    3c9c:	d006      	beq.n	3cac <__libc_init_array+0x3c>
    3c9e:	3401      	adds	r4, #1
    3ca0:	f855 3b04 	ldr.w	r3, [r5], #4
    3ca4:	4798      	blx	r3
    3ca6:	42a6      	cmp	r6, r4
    3ca8:	d1f9      	bne.n	3c9e <__libc_init_array+0x2e>
    3caa:	bd70      	pop	{r4, r5, r6, pc}
    3cac:	bd70      	pop	{r4, r5, r6, pc}
    3cae:	bf00      	nop
    3cb0:	0000416c 	.word	0x0000416c
    3cb4:	0000416c 	.word	0x0000416c
    3cb8:	00004174 	.word	0x00004174
    3cbc:	0000416c 	.word	0x0000416c

00003cc0 <memcpy>:
    3cc0:	4684      	mov	ip, r0
    3cc2:	ea41 0300 	orr.w	r3, r1, r0
    3cc6:	f013 0303 	ands.w	r3, r3, #3
    3cca:	d16d      	bne.n	3da8 <memcpy+0xe8>
    3ccc:	3a40      	subs	r2, #64	; 0x40
    3cce:	d341      	bcc.n	3d54 <memcpy+0x94>
    3cd0:	f851 3b04 	ldr.w	r3, [r1], #4
    3cd4:	f840 3b04 	str.w	r3, [r0], #4
    3cd8:	f851 3b04 	ldr.w	r3, [r1], #4
    3cdc:	f840 3b04 	str.w	r3, [r0], #4
    3ce0:	f851 3b04 	ldr.w	r3, [r1], #4
    3ce4:	f840 3b04 	str.w	r3, [r0], #4
    3ce8:	f851 3b04 	ldr.w	r3, [r1], #4
    3cec:	f840 3b04 	str.w	r3, [r0], #4
    3cf0:	f851 3b04 	ldr.w	r3, [r1], #4
    3cf4:	f840 3b04 	str.w	r3, [r0], #4
    3cf8:	f851 3b04 	ldr.w	r3, [r1], #4
    3cfc:	f840 3b04 	str.w	r3, [r0], #4
    3d00:	f851 3b04 	ldr.w	r3, [r1], #4
    3d04:	f840 3b04 	str.w	r3, [r0], #4
    3d08:	f851 3b04 	ldr.w	r3, [r1], #4
    3d0c:	f840 3b04 	str.w	r3, [r0], #4
    3d10:	f851 3b04 	ldr.w	r3, [r1], #4
    3d14:	f840 3b04 	str.w	r3, [r0], #4
    3d18:	f851 3b04 	ldr.w	r3, [r1], #4
    3d1c:	f840 3b04 	str.w	r3, [r0], #4
    3d20:	f851 3b04 	ldr.w	r3, [r1], #4
    3d24:	f840 3b04 	str.w	r3, [r0], #4
    3d28:	f851 3b04 	ldr.w	r3, [r1], #4
    3d2c:	f840 3b04 	str.w	r3, [r0], #4
    3d30:	f851 3b04 	ldr.w	r3, [r1], #4
    3d34:	f840 3b04 	str.w	r3, [r0], #4
    3d38:	f851 3b04 	ldr.w	r3, [r1], #4
    3d3c:	f840 3b04 	str.w	r3, [r0], #4
    3d40:	f851 3b04 	ldr.w	r3, [r1], #4
    3d44:	f840 3b04 	str.w	r3, [r0], #4
    3d48:	f851 3b04 	ldr.w	r3, [r1], #4
    3d4c:	f840 3b04 	str.w	r3, [r0], #4
    3d50:	3a40      	subs	r2, #64	; 0x40
    3d52:	d2bd      	bcs.n	3cd0 <memcpy+0x10>
    3d54:	3230      	adds	r2, #48	; 0x30
    3d56:	d311      	bcc.n	3d7c <memcpy+0xbc>
    3d58:	f851 3b04 	ldr.w	r3, [r1], #4
    3d5c:	f840 3b04 	str.w	r3, [r0], #4
    3d60:	f851 3b04 	ldr.w	r3, [r1], #4
    3d64:	f840 3b04 	str.w	r3, [r0], #4
    3d68:	f851 3b04 	ldr.w	r3, [r1], #4
    3d6c:	f840 3b04 	str.w	r3, [r0], #4
    3d70:	f851 3b04 	ldr.w	r3, [r1], #4
    3d74:	f840 3b04 	str.w	r3, [r0], #4
    3d78:	3a10      	subs	r2, #16
    3d7a:	d2ed      	bcs.n	3d58 <memcpy+0x98>
    3d7c:	320c      	adds	r2, #12
    3d7e:	d305      	bcc.n	3d8c <memcpy+0xcc>
    3d80:	f851 3b04 	ldr.w	r3, [r1], #4
    3d84:	f840 3b04 	str.w	r3, [r0], #4
    3d88:	3a04      	subs	r2, #4
    3d8a:	d2f9      	bcs.n	3d80 <memcpy+0xc0>
    3d8c:	3204      	adds	r2, #4
    3d8e:	d008      	beq.n	3da2 <memcpy+0xe2>
    3d90:	07d2      	lsls	r2, r2, #31
    3d92:	bf1c      	itt	ne
    3d94:	f811 3b01 	ldrbne.w	r3, [r1], #1
    3d98:	f800 3b01 	strbne.w	r3, [r0], #1
    3d9c:	d301      	bcc.n	3da2 <memcpy+0xe2>
    3d9e:	880b      	ldrh	r3, [r1, #0]
    3da0:	8003      	strh	r3, [r0, #0]
    3da2:	4660      	mov	r0, ip
    3da4:	4770      	bx	lr
    3da6:	bf00      	nop
    3da8:	2a08      	cmp	r2, #8
    3daa:	d313      	bcc.n	3dd4 <memcpy+0x114>
    3dac:	078b      	lsls	r3, r1, #30
    3dae:	d08d      	beq.n	3ccc <memcpy+0xc>
    3db0:	f010 0303 	ands.w	r3, r0, #3
    3db4:	d08a      	beq.n	3ccc <memcpy+0xc>
    3db6:	f1c3 0304 	rsb	r3, r3, #4
    3dba:	1ad2      	subs	r2, r2, r3
    3dbc:	07db      	lsls	r3, r3, #31
    3dbe:	bf1c      	itt	ne
    3dc0:	f811 3b01 	ldrbne.w	r3, [r1], #1
    3dc4:	f800 3b01 	strbne.w	r3, [r0], #1
    3dc8:	d380      	bcc.n	3ccc <memcpy+0xc>
    3dca:	f831 3b02 	ldrh.w	r3, [r1], #2
    3dce:	f820 3b02 	strh.w	r3, [r0], #2
    3dd2:	e77b      	b.n	3ccc <memcpy+0xc>
    3dd4:	3a04      	subs	r2, #4
    3dd6:	d3d9      	bcc.n	3d8c <memcpy+0xcc>
    3dd8:	3a01      	subs	r2, #1
    3dda:	f811 3b01 	ldrb.w	r3, [r1], #1
    3dde:	f800 3b01 	strb.w	r3, [r0], #1
    3de2:	d2f9      	bcs.n	3dd8 <memcpy+0x118>
    3de4:	780b      	ldrb	r3, [r1, #0]
    3de6:	7003      	strb	r3, [r0, #0]
    3de8:	784b      	ldrb	r3, [r1, #1]
    3dea:	7043      	strb	r3, [r0, #1]
    3dec:	788b      	ldrb	r3, [r1, #2]
    3dee:	7083      	strb	r3, [r0, #2]
    3df0:	4660      	mov	r0, ip
    3df2:	4770      	bx	lr

00003df4 <memset>:
    3df4:	b470      	push	{r4, r5, r6}
    3df6:	0786      	lsls	r6, r0, #30
    3df8:	d046      	beq.n	3e88 <memset+0x94>
    3dfa:	1e54      	subs	r4, r2, #1
    3dfc:	2a00      	cmp	r2, #0
    3dfe:	d041      	beq.n	3e84 <memset+0x90>
    3e00:	b2ca      	uxtb	r2, r1
    3e02:	4603      	mov	r3, r0
    3e04:	e002      	b.n	3e0c <memset+0x18>
    3e06:	f114 34ff 	adds.w	r4, r4, #4294967295
    3e0a:	d33b      	bcc.n	3e84 <memset+0x90>
    3e0c:	f803 2b01 	strb.w	r2, [r3], #1
    3e10:	079d      	lsls	r5, r3, #30
    3e12:	d1f8      	bne.n	3e06 <memset+0x12>
    3e14:	2c03      	cmp	r4, #3
    3e16:	d92e      	bls.n	3e76 <memset+0x82>
    3e18:	b2cd      	uxtb	r5, r1
    3e1a:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
    3e1e:	2c0f      	cmp	r4, #15
    3e20:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
    3e24:	d919      	bls.n	3e5a <memset+0x66>
    3e26:	f103 0210 	add.w	r2, r3, #16
    3e2a:	4626      	mov	r6, r4
    3e2c:	3e10      	subs	r6, #16
    3e2e:	2e0f      	cmp	r6, #15
    3e30:	f842 5c10 	str.w	r5, [r2, #-16]
    3e34:	f842 5c0c 	str.w	r5, [r2, #-12]
    3e38:	f842 5c08 	str.w	r5, [r2, #-8]
    3e3c:	f842 5c04 	str.w	r5, [r2, #-4]
    3e40:	f102 0210 	add.w	r2, r2, #16
    3e44:	d8f2      	bhi.n	3e2c <memset+0x38>
    3e46:	f1a4 0210 	sub.w	r2, r4, #16
    3e4a:	f022 020f 	bic.w	r2, r2, #15
    3e4e:	f004 040f 	and.w	r4, r4, #15
    3e52:	3210      	adds	r2, #16
    3e54:	2c03      	cmp	r4, #3
    3e56:	4413      	add	r3, r2
    3e58:	d90d      	bls.n	3e76 <memset+0x82>
    3e5a:	461e      	mov	r6, r3
    3e5c:	4622      	mov	r2, r4
    3e5e:	3a04      	subs	r2, #4
    3e60:	2a03      	cmp	r2, #3
    3e62:	f846 5b04 	str.w	r5, [r6], #4
    3e66:	d8fa      	bhi.n	3e5e <memset+0x6a>
    3e68:	1f22      	subs	r2, r4, #4
    3e6a:	f022 0203 	bic.w	r2, r2, #3
    3e6e:	3204      	adds	r2, #4
    3e70:	4413      	add	r3, r2
    3e72:	f004 0403 	and.w	r4, r4, #3
    3e76:	b12c      	cbz	r4, 3e84 <memset+0x90>
    3e78:	b2c9      	uxtb	r1, r1
    3e7a:	441c      	add	r4, r3
    3e7c:	f803 1b01 	strb.w	r1, [r3], #1
    3e80:	429c      	cmp	r4, r3
    3e82:	d1fb      	bne.n	3e7c <memset+0x88>
    3e84:	bc70      	pop	{r4, r5, r6}
    3e86:	4770      	bx	lr
    3e88:	4614      	mov	r4, r2
    3e8a:	4603      	mov	r3, r0
    3e8c:	e7c2      	b.n	3e14 <memset+0x20>
    3e8e:	bf00      	nop
	...

00003ec0 <strlen>:
    3ec0:	f890 f000 	pld	[r0]
    3ec4:	e96d 4502 	strd	r4, r5, [sp, #-8]!
    3ec8:	f020 0107 	bic.w	r1, r0, #7
    3ecc:	f06f 0c00 	mvn.w	ip, #0
    3ed0:	f010 0407 	ands.w	r4, r0, #7
    3ed4:	f891 f020 	pld	[r1, #32]
    3ed8:	f040 8049 	bne.w	3f6e <strlen+0xae>
    3edc:	f04f 0400 	mov.w	r4, #0
    3ee0:	f06f 0007 	mvn.w	r0, #7
    3ee4:	e9d1 2300 	ldrd	r2, r3, [r1]
    3ee8:	f891 f040 	pld	[r1, #64]	; 0x40
    3eec:	f100 0008 	add.w	r0, r0, #8
    3ef0:	fa82 f24c 	uadd8	r2, r2, ip
    3ef4:	faa4 f28c 	sel	r2, r4, ip
    3ef8:	fa83 f34c 	uadd8	r3, r3, ip
    3efc:	faa2 f38c 	sel	r3, r2, ip
    3f00:	bb4b      	cbnz	r3, 3f56 <strlen+0x96>
    3f02:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
    3f06:	fa82 f24c 	uadd8	r2, r2, ip
    3f0a:	f100 0008 	add.w	r0, r0, #8
    3f0e:	faa4 f28c 	sel	r2, r4, ip
    3f12:	fa83 f34c 	uadd8	r3, r3, ip
    3f16:	faa2 f38c 	sel	r3, r2, ip
    3f1a:	b9e3      	cbnz	r3, 3f56 <strlen+0x96>
    3f1c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
    3f20:	fa82 f24c 	uadd8	r2, r2, ip
    3f24:	f100 0008 	add.w	r0, r0, #8
    3f28:	faa4 f28c 	sel	r2, r4, ip
    3f2c:	fa83 f34c 	uadd8	r3, r3, ip
    3f30:	faa2 f38c 	sel	r3, r2, ip
    3f34:	b97b      	cbnz	r3, 3f56 <strlen+0x96>
    3f36:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
    3f3a:	f101 0120 	add.w	r1, r1, #32
    3f3e:	fa82 f24c 	uadd8	r2, r2, ip
    3f42:	f100 0008 	add.w	r0, r0, #8
    3f46:	faa4 f28c 	sel	r2, r4, ip
    3f4a:	fa83 f34c 	uadd8	r3, r3, ip
    3f4e:	faa2 f38c 	sel	r3, r2, ip
    3f52:	2b00      	cmp	r3, #0
    3f54:	d0c6      	beq.n	3ee4 <strlen+0x24>
    3f56:	2a00      	cmp	r2, #0
    3f58:	bf04      	itt	eq
    3f5a:	3004      	addeq	r0, #4
    3f5c:	461a      	moveq	r2, r3
    3f5e:	ba12      	rev	r2, r2
    3f60:	fab2 f282 	clz	r2, r2
    3f64:	e8fd 4502 	ldrd	r4, r5, [sp], #8
    3f68:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
    3f6c:	4770      	bx	lr
    3f6e:	e9d1 2300 	ldrd	r2, r3, [r1]
    3f72:	f004 0503 	and.w	r5, r4, #3
    3f76:	f1c4 0000 	rsb	r0, r4, #0
    3f7a:	ea4f 05c5 	mov.w	r5, r5, lsl #3
    3f7e:	f014 0f04 	tst.w	r4, #4
    3f82:	f891 f040 	pld	[r1, #64]	; 0x40
    3f86:	fa0c f505 	lsl.w	r5, ip, r5
    3f8a:	ea62 0205 	orn	r2, r2, r5
    3f8e:	bf1c      	itt	ne
    3f90:	ea63 0305 	ornne	r3, r3, r5
    3f94:	4662      	movne	r2, ip
    3f96:	f04f 0400 	mov.w	r4, #0
    3f9a:	e7a9      	b.n	3ef0 <strlen+0x30>

00003f9c <register_fini>:
    3f9c:	4b02      	ldr	r3, [pc, #8]	; (3fa8 <register_fini+0xc>)
    3f9e:	b113      	cbz	r3, 3fa6 <register_fini+0xa>
    3fa0:	4802      	ldr	r0, [pc, #8]	; (3fac <register_fini+0x10>)
    3fa2:	f000 b805 	b.w	3fb0 <atexit>
    3fa6:	4770      	bx	lr
    3fa8:	00000000 	.word	0x00000000
    3fac:	00003fbd 	.word	0x00003fbd

00003fb0 <atexit>:
    3fb0:	2300      	movs	r3, #0
    3fb2:	4601      	mov	r1, r0
    3fb4:	461a      	mov	r2, r3
    3fb6:	4618      	mov	r0, r3
    3fb8:	f000 b81e 	b.w	3ff8 <__register_exitproc>

00003fbc <__libc_fini_array>:
    3fbc:	b538      	push	{r3, r4, r5, lr}
    3fbe:	4c0a      	ldr	r4, [pc, #40]	; (3fe8 <__libc_fini_array+0x2c>)
    3fc0:	4d0a      	ldr	r5, [pc, #40]	; (3fec <__libc_fini_array+0x30>)
    3fc2:	1b64      	subs	r4, r4, r5
    3fc4:	10a4      	asrs	r4, r4, #2
    3fc6:	d00a      	beq.n	3fde <__libc_fini_array+0x22>
    3fc8:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
    3fcc:	3b01      	subs	r3, #1
    3fce:	eb05 0583 	add.w	r5, r5, r3, lsl #2
    3fd2:	3c01      	subs	r4, #1
    3fd4:	f855 3904 	ldr.w	r3, [r5], #-4
    3fd8:	4798      	blx	r3
    3fda:	2c00      	cmp	r4, #0
    3fdc:	d1f9      	bne.n	3fd2 <__libc_fini_array+0x16>
    3fde:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    3fe2:	f000 b8c7 	b.w	4174 <_fini>
    3fe6:	bf00      	nop
    3fe8:	00004184 	.word	0x00004184
    3fec:	00004180 	.word	0x00004180

00003ff0 <__retarget_lock_acquire_recursive>:
    3ff0:	4770      	bx	lr
    3ff2:	bf00      	nop

00003ff4 <__retarget_lock_release_recursive>:
    3ff4:	4770      	bx	lr
    3ff6:	bf00      	nop

00003ff8 <__register_exitproc>:
    3ff8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    3ffc:	4d2c      	ldr	r5, [pc, #176]	; (40b0 <__register_exitproc+0xb8>)
    3ffe:	4606      	mov	r6, r0
    4000:	6828      	ldr	r0, [r5, #0]
    4002:	4698      	mov	r8, r3
    4004:	460f      	mov	r7, r1
    4006:	4691      	mov	r9, r2
    4008:	f7ff fff2 	bl	3ff0 <__retarget_lock_acquire_recursive>
    400c:	4b29      	ldr	r3, [pc, #164]	; (40b4 <__register_exitproc+0xbc>)
    400e:	681c      	ldr	r4, [r3, #0]
    4010:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
    4014:	2b00      	cmp	r3, #0
    4016:	d03e      	beq.n	4096 <__register_exitproc+0x9e>
    4018:	685a      	ldr	r2, [r3, #4]
    401a:	2a1f      	cmp	r2, #31
    401c:	dc1c      	bgt.n	4058 <__register_exitproc+0x60>
    401e:	f102 0e01 	add.w	lr, r2, #1
    4022:	b176      	cbz	r6, 4042 <__register_exitproc+0x4a>
    4024:	eb03 0182 	add.w	r1, r3, r2, lsl #2
    4028:	2401      	movs	r4, #1
    402a:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
    402e:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
    4032:	4094      	lsls	r4, r2
    4034:	4320      	orrs	r0, r4
    4036:	2e02      	cmp	r6, #2
    4038:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
    403c:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
    4040:	d023      	beq.n	408a <__register_exitproc+0x92>
    4042:	3202      	adds	r2, #2
    4044:	f8c3 e004 	str.w	lr, [r3, #4]
    4048:	6828      	ldr	r0, [r5, #0]
    404a:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
    404e:	f7ff ffd1 	bl	3ff4 <__retarget_lock_release_recursive>
    4052:	2000      	movs	r0, #0
    4054:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    4058:	4b17      	ldr	r3, [pc, #92]	; (40b8 <__register_exitproc+0xc0>)
    405a:	b30b      	cbz	r3, 40a0 <__register_exitproc+0xa8>
    405c:	f44f 70c8 	mov.w	r0, #400	; 0x190
    4060:	f7fc fa48 	bl	4f4 <malloc>
    4064:	4603      	mov	r3, r0
    4066:	b1d8      	cbz	r0, 40a0 <__register_exitproc+0xa8>
    4068:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
    406c:	6002      	str	r2, [r0, #0]
    406e:	2100      	movs	r1, #0
    4070:	6041      	str	r1, [r0, #4]
    4072:	460a      	mov	r2, r1
    4074:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
    4078:	f04f 0e01 	mov.w	lr, #1
    407c:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
    4080:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
    4084:	2e00      	cmp	r6, #0
    4086:	d0dc      	beq.n	4042 <__register_exitproc+0x4a>
    4088:	e7cc      	b.n	4024 <__register_exitproc+0x2c>
    408a:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
    408e:	430c      	orrs	r4, r1
    4090:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
    4094:	e7d5      	b.n	4042 <__register_exitproc+0x4a>
    4096:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
    409a:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
    409e:	e7bb      	b.n	4018 <__register_exitproc+0x20>
    40a0:	6828      	ldr	r0, [r5, #0]
    40a2:	f7ff ffa7 	bl	3ff4 <__retarget_lock_release_recursive>
    40a6:	f04f 30ff 	mov.w	r0, #4294967295
    40aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    40ae:	bf00      	nop
    40b0:	200004f0 	.word	0x200004f0
    40b4:	0000415c 	.word	0x0000415c
    40b8:	000004f5 	.word	0x000004f5

000040bc <_ZTV9CDC_Class>:
	...
    40c4:	00000311 000003b1 000002d1 0000039d     ................
    40d4:	00000329 00000375 000002f5 000003c1     )...u...........
    40e4:	77207469 736b726f 00000000 00000a0d     it works........
    40f4:	006e616e 00666e69 0066766f              nan.inf.ovf.

00004100 <_usb_ep_cfgs>:
    4100:	200007c4 00000000 00000040 20000784     ... ....@...... 
    4110:	00000000 00000040 20000744 00000000     ....@...D.. ....
    4120:	00000040 752f2e2e 642f6273 63697665     @...../usb/devic
    4130:	73752f65 2e636462 00000063 682f2e2e     e/usbdc.c...../h
    4140:	752f6c61 736c6974 6372732f 6974752f     al/utils/src/uti
    4150:	6c5f736c 2e747369 00000063              ls_list.c...

0000415c <_global_impure_ptr>:
    415c:	200000c8                                ... 

00004160 <_init>:
    4160:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4162:	bf00      	nop
    4164:	bcf8      	pop	{r3, r4, r5, r6, r7}
    4166:	bc08      	pop	{r3}
    4168:	469e      	mov	lr, r3
    416a:	4770      	bx	lr

0000416c <__init_array_start>:
    416c:	00003f9d 	.word	0x00003f9d

00004170 <__frame_dummy_init_array_entry>:
    4170:	00000289                                ....

00004174 <_fini>:
    4174:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4176:	bf00      	nop
    4178:	bcf8      	pop	{r3, r4, r5, r6, r7}
    417a:	bc08      	pop	{r3}
    417c:	469e      	mov	lr, r3
    417e:	4770      	bx	lr

00004180 <__fini_array_start>:
    4180:	00000265 	.word	0x00000265
