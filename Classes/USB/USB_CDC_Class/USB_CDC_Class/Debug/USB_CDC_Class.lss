
USB_CDC_Class.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000038dc  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     0000050c  20000000  000038dc  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bkupram      00000000  47000000  47000000  0002050c  2**0
                  CONTENTS
  3 .qspi         00000000  04000000  04000000  0002050c  2**0
                  CONTENTS
  4 .bss          000003c0  2000050c  00003de8  0002050c  2**2
                  ALLOC
  5 .stack        00010004  200008cc  000041a8  0002050c  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  0002050c  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  0002053a  2**0
                  CONTENTS, READONLY
  8 .debug_info   00031137  00000000  00000000  00020593  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00004672  00000000  00000000  000516ca  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000142f6  00000000  00000000  00055d3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000fd0  00000000  00000000  0006a032  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00001788  00000000  00000000  0006b002  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0003a03a  00000000  00000000  0006c78a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00019003  00000000  00000000  000a67c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00125811  00000000  00000000  000bf7c7  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00002af8  00000000  00000000  001e4fd8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	d0 08 01 20 d5 02 00 00 d1 02 00 00 d1 02 00 00     ... ............
      10:	d1 02 00 00 d1 02 00 00 d1 02 00 00 00 00 00 00     ................
	...
      2c:	d1 02 00 00 d1 02 00 00 00 00 00 00 d1 02 00 00     ................
      3c:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      4c:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      5c:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      6c:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      7c:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      8c:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      9c:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      ac:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      bc:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      cc:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      dc:	d1 02 00 00 d1 02 00 00 d1 02 00 00 00 00 00 00     ................
	...
      f4:	d1 02 00 00 d1 12 00 00 e5 12 00 00 f9 12 00 00     ................
     104:	0d 13 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     114:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     124:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     134:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     144:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     154:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     164:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     174:	d1 02 00 00 d1 02 00 00 d1 02 00 00 8d 28 00 00     .............(..
     184:	99 28 00 00 a5 28 00 00 b1 28 00 00 d1 02 00 00     .(...(...(......
     194:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     1a4:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     1b4:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     1c4:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     1d4:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     1e4:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     1f4:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     204:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     214:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     224:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     234:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     244:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     254:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................

00000264 <__do_global_dtors_aux>:
     264:	b510      	push	{r4, lr}
     266:	4c05      	ldr	r4, [pc, #20]	; (27c <__do_global_dtors_aux+0x18>)
     268:	7823      	ldrb	r3, [r4, #0]
     26a:	b933      	cbnz	r3, 27a <__do_global_dtors_aux+0x16>
     26c:	4b04      	ldr	r3, [pc, #16]	; (280 <__do_global_dtors_aux+0x1c>)
     26e:	b113      	cbz	r3, 276 <__do_global_dtors_aux+0x12>
     270:	4804      	ldr	r0, [pc, #16]	; (284 <__do_global_dtors_aux+0x20>)
     272:	f3af 8000 	nop.w
     276:	2301      	movs	r3, #1
     278:	7023      	strb	r3, [r4, #0]
     27a:	bd10      	pop	{r4, pc}
     27c:	2000050c 	.word	0x2000050c
     280:	00000000 	.word	0x00000000
     284:	000038dc 	.word	0x000038dc

00000288 <frame_dummy>:
     288:	4b0c      	ldr	r3, [pc, #48]	; (2bc <frame_dummy+0x34>)
     28a:	b143      	cbz	r3, 29e <frame_dummy+0x16>
     28c:	480c      	ldr	r0, [pc, #48]	; (2c0 <frame_dummy+0x38>)
     28e:	490d      	ldr	r1, [pc, #52]	; (2c4 <frame_dummy+0x3c>)
     290:	b510      	push	{r4, lr}
     292:	f3af 8000 	nop.w
     296:	480c      	ldr	r0, [pc, #48]	; (2c8 <frame_dummy+0x40>)
     298:	6803      	ldr	r3, [r0, #0]
     29a:	b923      	cbnz	r3, 2a6 <frame_dummy+0x1e>
     29c:	bd10      	pop	{r4, pc}
     29e:	480a      	ldr	r0, [pc, #40]	; (2c8 <frame_dummy+0x40>)
     2a0:	6803      	ldr	r3, [r0, #0]
     2a2:	b933      	cbnz	r3, 2b2 <frame_dummy+0x2a>
     2a4:	4770      	bx	lr
     2a6:	4b09      	ldr	r3, [pc, #36]	; (2cc <frame_dummy+0x44>)
     2a8:	2b00      	cmp	r3, #0
     2aa:	d0f7      	beq.n	29c <frame_dummy+0x14>
     2ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     2b0:	4718      	bx	r3
     2b2:	4b06      	ldr	r3, [pc, #24]	; (2cc <frame_dummy+0x44>)
     2b4:	2b00      	cmp	r3, #0
     2b6:	d0f5      	beq.n	2a4 <frame_dummy+0x1c>
     2b8:	4718      	bx	r3
     2ba:	bf00      	nop
     2bc:	00000000 	.word	0x00000000
     2c0:	000038dc 	.word	0x000038dc
     2c4:	20000510 	.word	0x20000510
     2c8:	000038dc 	.word	0x000038dc
     2cc:	00000000 	.word	0x00000000

000002d0 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     2d0:	e7fe      	b.n	2d0 <Dummy_Handler>
	...

000002d4 <Reset_Handler>:
{
     2d4:	b508      	push	{r3, lr}
        if (pSrc != pDest) {
     2d6:	4b17      	ldr	r3, [pc, #92]	; (334 <Reset_Handler+0x60>)
     2d8:	4a17      	ldr	r2, [pc, #92]	; (338 <Reset_Handler+0x64>)
     2da:	429a      	cmp	r2, r3
     2dc:	d010      	beq.n	300 <Reset_Handler+0x2c>
                for (; pDest < &_erelocate;) {
     2de:	4b17      	ldr	r3, [pc, #92]	; (33c <Reset_Handler+0x68>)
     2e0:	4a14      	ldr	r2, [pc, #80]	; (334 <Reset_Handler+0x60>)
     2e2:	429a      	cmp	r2, r3
     2e4:	d20c      	bcs.n	300 <Reset_Handler+0x2c>
     2e6:	3b01      	subs	r3, #1
     2e8:	1a9b      	subs	r3, r3, r2
     2ea:	f023 0303 	bic.w	r3, r3, #3
     2ee:	3304      	adds	r3, #4
     2f0:	4413      	add	r3, r2
     2f2:	4911      	ldr	r1, [pc, #68]	; (338 <Reset_Handler+0x64>)
                        *pDest++ = *pSrc++;
     2f4:	f851 0b04 	ldr.w	r0, [r1], #4
     2f8:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
     2fc:	429a      	cmp	r2, r3
     2fe:	d1f9      	bne.n	2f4 <Reset_Handler+0x20>
        for (pDest = &_szero; pDest < &_ezero;) {
     300:	4b0f      	ldr	r3, [pc, #60]	; (340 <Reset_Handler+0x6c>)
     302:	4a10      	ldr	r2, [pc, #64]	; (344 <Reset_Handler+0x70>)
     304:	429a      	cmp	r2, r3
     306:	d20a      	bcs.n	31e <Reset_Handler+0x4a>
     308:	3b01      	subs	r3, #1
     30a:	1a9b      	subs	r3, r3, r2
     30c:	f023 0303 	bic.w	r3, r3, #3
     310:	3304      	adds	r3, #4
     312:	4413      	add	r3, r2
                *pDest++ = 0;
     314:	2100      	movs	r1, #0
     316:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
     31a:	4293      	cmp	r3, r2
     31c:	d1fb      	bne.n	316 <Reset_Handler+0x42>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     31e:	4a0a      	ldr	r2, [pc, #40]	; (348 <Reset_Handler+0x74>)
     320:	4b0a      	ldr	r3, [pc, #40]	; (34c <Reset_Handler+0x78>)
     322:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
     326:	6093      	str	r3, [r2, #8]
        __libc_init_array();
     328:	4b09      	ldr	r3, [pc, #36]	; (350 <Reset_Handler+0x7c>)
     32a:	4798      	blx	r3
        main();
     32c:	4b09      	ldr	r3, [pc, #36]	; (354 <Reset_Handler+0x80>)
     32e:	4798      	blx	r3
     330:	e7fe      	b.n	330 <Reset_Handler+0x5c>
     332:	bf00      	nop
     334:	20000000 	.word	0x20000000
     338:	000038dc 	.word	0x000038dc
     33c:	2000050c 	.word	0x2000050c
     340:	200008cc 	.word	0x200008cc
     344:	2000050c 	.word	0x2000050c
     348:	e000ed00 	.word	0xe000ed00
     34c:	00000000 	.word	0x00000000
     350:	00003459 	.word	0x00003459
     354:	00000359 	.word	0x00000359

00000358 <main>:


static uint8_t p[]="   Usb port Test\n\r";

int main(void)
{
     358:	b570      	push	{r4, r5, r6, lr}
     35a:	b098      	sub	sp, #96	; 0x60
	atmel_start_init();
     35c:	4b09      	ldr	r3, [pc, #36]	; (384 <main+0x2c>)
     35e:	4798      	blx	r3
	USB_CDC_Class	usb0;
     360:	a801      	add	r0, sp, #4
     362:	4b09      	ldr	r3, [pc, #36]	; (388 <main+0x30>)
     364:	4798      	blx	r3
	usb0.init();
     366:	a801      	add	r0, sp, #4
     368:	4b08      	ldr	r3, [pc, #32]	; (38c <main+0x34>)
     36a:	4798      	blx	r3
    /* Replace with your application code */
    while (1) 
    {
	
		//usb0.write((uint8_t *)t,10);
		usb0.write(ptr,sizeof(p));
     36c:	4e08      	ldr	r6, [pc, #32]	; (390 <main+0x38>)
     36e:	4d09      	ldr	r5, [pc, #36]	; (394 <main+0x3c>)
		delay_ms(1000);
     370:	4c09      	ldr	r4, [pc, #36]	; (398 <main+0x40>)
		usb0.write(ptr,sizeof(p));
     372:	2213      	movs	r2, #19
     374:	4631      	mov	r1, r6
     376:	a801      	add	r0, sp, #4
     378:	47a8      	blx	r5
		delay_ms(1000);
     37a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
     37e:	47a0      	blx	r4
     380:	e7f7      	b.n	372 <main+0x1a>
     382:	bf00      	nop
     384:	000003f5 	.word	0x000003f5
     388:	0000039d 	.word	0x0000039d
     38c:	000003a1 	.word	0x000003a1
     390:	20000000 	.word	0x20000000
     394:	000003d5 	.word	0x000003d5
     398:	000006bd 	.word	0x000006bd

0000039c <_ZN13USB_CDC_ClassC1Ev>:
{
	//portNumber=0;
	//usb_desc=&single_desc;
	//USBbuffer=usbd_cdc_buffer;

} //USB_CDC_Class
     39c:	4770      	bx	lr
	...

000003a0 <_ZN13USB_CDC_Class4initEv>:
} //USB_CDC_Class

// default destructor


void USB_CDC_Class::init(){
     3a0:	b508      	push	{r3, lr}
	usbdc_init(ctrl_buffer);
     3a2:	3014      	adds	r0, #20
     3a4:	4b05      	ldr	r3, [pc, #20]	; (3bc <_ZN13USB_CDC_Class4initEv+0x1c>)
     3a6:	4798      	blx	r3

	/* usbdc_register_funcion inside */
	cdcdf_acm_init();
     3a8:	4b05      	ldr	r3, [pc, #20]	; (3c0 <_ZN13USB_CDC_Class4initEv+0x20>)
     3aa:	4798      	blx	r3

	usbdc_start(single_desc);
     3ac:	4805      	ldr	r0, [pc, #20]	; (3c4 <_ZN13USB_CDC_Class4initEv+0x24>)
     3ae:	4b06      	ldr	r3, [pc, #24]	; (3c8 <_ZN13USB_CDC_Class4initEv+0x28>)
     3b0:	4798      	blx	r3
	usbdc_attach();
     3b2:	4b06      	ldr	r3, [pc, #24]	; (3cc <_ZN13USB_CDC_Class4initEv+0x2c>)
     3b4:	4798      	blx	r3


bool USB_CDC_Class::isUSBEnabled(void){
	

		return cdcdf_acm_is_enabled();
     3b6:	4b06      	ldr	r3, [pc, #24]	; (3d0 <_ZN13USB_CDC_Class4initEv+0x30>)
     3b8:	4798      	blx	r3
     3ba:	bd08      	pop	{r3, pc}
     3bc:	000031a1 	.word	0x000031a1
     3c0:	00002b1d 	.word	0x00002b1d
     3c4:	20000014 	.word	0x20000014
     3c8:	00003211 	.word	0x00003211
     3cc:	00003245 	.word	0x00003245
     3d0:	00002b89 	.word	0x00002b89

000003d4 <_ZN13USB_CDC_Class5writeEPhm>:
int32_t  USB_CDC_Class::write( uint8_t *p, uint32_t n){
     3d4:	b570      	push	{r4, r5, r6, lr}
     3d6:	460d      	mov	r5, r1
     3d8:	4616      	mov	r6, r2
		return cdcdf_acm_is_enabled();
     3da:	4c04      	ldr	r4, [pc, #16]	; (3ec <_ZN13USB_CDC_Class5writeEPhm+0x18>)
     3dc:	47a0      	blx	r4
	while(!isUSBEnabled());
     3de:	2800      	cmp	r0, #0
     3e0:	d0fc      	beq.n	3dc <_ZN13USB_CDC_Class5writeEPhm+0x8>
	w=cdcdf_acm_write(p,n);
     3e2:	4631      	mov	r1, r6
     3e4:	4628      	mov	r0, r5
     3e6:	4b02      	ldr	r3, [pc, #8]	; (3f0 <_ZN13USB_CDC_Class5writeEPhm+0x1c>)
     3e8:	4798      	blx	r3
}
     3ea:	bd70      	pop	{r4, r5, r6, pc}
     3ec:	00002b89 	.word	0x00002b89
     3f0:	00002b61 	.word	0x00002b61

000003f4 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
     3f4:	b508      	push	{r3, lr}
	system_init();
     3f6:	4b02      	ldr	r3, [pc, #8]	; (400 <atmel_start_init+0xc>)
     3f8:	4798      	blx	r3
	usb_init();
     3fa:	4b02      	ldr	r3, [pc, #8]	; (404 <atmel_start_init+0x10>)
     3fc:	4798      	blx	r3
     3fe:	bd08      	pop	{r3, pc}
     400:	0000061d 	.word	0x0000061d
     404:	000033d1 	.word	0x000033d1

00000408 <ADC_0_CLOCK_init>:
}

static inline void hri_mclk_set_APBDMASK_ADC0_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_ADC0;
     408:	4a04      	ldr	r2, [pc, #16]	; (41c <ADC_0_CLOCK_init+0x14>)
     40a:	6a13      	ldr	r3, [r2, #32]
     40c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
     410:	6213      	str	r3, [r2, #32]
}

static inline void hri_gclk_write_PCHCTRL_reg(const void *const hw, uint8_t index, hri_gclk_pchctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->PCHCTRL[index].reg = data;
     412:	2240      	movs	r2, #64	; 0x40
     414:	4b02      	ldr	r3, [pc, #8]	; (420 <ADC_0_CLOCK_init+0x18>)
     416:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
     41a:	4770      	bx	lr
     41c:	40000800 	.word	0x40000800
     420:	40001c00 	.word	0x40001c00

00000424 <ADC_0_init>:
	hri_mclk_set_APBDMASK_ADC0_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, ADC0_GCLK_ID, CONF_GCLK_ADC0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
}

void ADC_0_init(void)
{
     424:	b508      	push	{r3, lr}
	ADC_0_CLOCK_init();
     426:	4b04      	ldr	r3, [pc, #16]	; (438 <ADC_0_init+0x14>)
     428:	4798      	blx	r3
	ADC_0_PORT_init();
	adc_sync_init(&ADC_0, ADC0, (void *)NULL);
     42a:	2200      	movs	r2, #0
     42c:	4903      	ldr	r1, [pc, #12]	; (43c <ADC_0_init+0x18>)
     42e:	4804      	ldr	r0, [pc, #16]	; (440 <ADC_0_init+0x1c>)
     430:	4b04      	ldr	r3, [pc, #16]	; (444 <ADC_0_init+0x20>)
     432:	4798      	blx	r3
     434:	bd08      	pop	{r3, pc}
     436:	bf00      	nop
     438:	00000409 	.word	0x00000409
     43c:	43001c00 	.word	0x43001c00
     440:	2000085c 	.word	0x2000085c
     444:	00000679 	.word	0x00000679

00000448 <SPI_0_PORT_init>:
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = ~data;
}

static inline void hri_port_clear_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     448:	4b28      	ldr	r3, [pc, #160]	; (4ec <SPI_0_PORT_init+0xa4>)
     44a:	2210      	movs	r2, #16
     44c:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     44e:	609a      	str	r2, [r3, #8]

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     450:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     454:	629a      	str	r2, [r3, #40]	; 0x28
     456:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
     45a:	6299      	str	r1, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     45c:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
	tmp &= ~PORT_PINCFG_PMUXEN;
     460:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     464:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     468:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     46c:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     470:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     474:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     478:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     47c:	2220      	movs	r2, #32
     47e:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     480:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     482:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     486:	629a      	str	r2, [r3, #40]	; 0x28
     488:	6299      	str	r1, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     48a:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
	tmp &= ~PORT_PINCFG_PMUXEN;
     48e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     492:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     496:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     49a:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     49e:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     4a2:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     4a6:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     4aa:	2240      	movs	r2, #64	; 0x40
     4ac:	605a      	str	r2, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     4ae:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     4b2:	f502 3200 	add.w	r2, r2, #131072	; 0x20000
     4b6:	629a      	str	r2, [r3, #40]	; 0x28
     4b8:	4a0d      	ldr	r2, [pc, #52]	; (4f0 <SPI_0_PORT_init+0xa8>)
     4ba:	629a      	str	r2, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     4bc:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
     4c0:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     4c4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     4c8:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
	tmp &= ~PORT_PINCFG_PMUXEN;
     4cc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     4d0:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     4d4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     4d8:	f893 2033 	ldrb.w	r2, [r3, #51]	; 0x33
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     4dc:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     4e0:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     4e4:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
     4e8:	4770      	bx	lr
     4ea:	bf00      	nop
     4ec:	41008000 	.word	0x41008000
     4f0:	c0020000 	.word	0xc0020000

000004f4 <SPI_0_CLOCK_init>:
     4f4:	4b06      	ldr	r3, [pc, #24]	; (510 <SPI_0_CLOCK_init+0x1c>)
     4f6:	2240      	movs	r2, #64	; 0x40
     4f8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
     4fc:	2243      	movs	r2, #67	; 0x43
     4fe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_SERCOM0;
     502:	4a04      	ldr	r2, [pc, #16]	; (514 <SPI_0_CLOCK_init+0x20>)
     504:	6953      	ldr	r3, [r2, #20]
     506:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
     50a:	6153      	str	r3, [r2, #20]
     50c:	4770      	bx	lr
     50e:	bf00      	nop
     510:	40001c00 	.word	0x40001c00
     514:	40000800 	.word	0x40000800

00000518 <SPI_0_init>:

	hri_mclk_set_APBAMASK_SERCOM0_bit(MCLK);
}

void SPI_0_init(void)
{
     518:	b508      	push	{r3, lr}
	SPI_0_CLOCK_init();
     51a:	4b04      	ldr	r3, [pc, #16]	; (52c <SPI_0_init+0x14>)
     51c:	4798      	blx	r3
	spi_m_async_init(&SPI_0, SERCOM0);
     51e:	4904      	ldr	r1, [pc, #16]	; (530 <SPI_0_init+0x18>)
     520:	4804      	ldr	r0, [pc, #16]	; (534 <SPI_0_init+0x1c>)
     522:	4b05      	ldr	r3, [pc, #20]	; (538 <SPI_0_init+0x20>)
     524:	4798      	blx	r3
	SPI_0_PORT_init();
     526:	4b05      	ldr	r3, [pc, #20]	; (53c <SPI_0_init+0x24>)
     528:	4798      	blx	r3
     52a:	bd08      	pop	{r3, pc}
     52c:	000004f5 	.word	0x000004f5
     530:	40003000 	.word	0x40003000
     534:	20000860 	.word	0x20000860
     538:	0000089d 	.word	0x0000089d
     53c:	00000449 	.word	0x00000449

00000540 <delay_driver_init>:
}

void delay_driver_init(void)
{
     540:	b508      	push	{r3, lr}
	delay_init(SysTick);
     542:	4802      	ldr	r0, [pc, #8]	; (54c <delay_driver_init+0xc>)
     544:	4b02      	ldr	r3, [pc, #8]	; (550 <delay_driver_init+0x10>)
     546:	4798      	blx	r3
     548:	bd08      	pop	{r3, pc}
     54a:	bf00      	nop
     54c:	e000e010 	.word	0xe000e010
     550:	000006a9 	.word	0x000006a9

00000554 <USB_0_PORT_init>:
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     554:	4b1e      	ldr	r3, [pc, #120]	; (5d0 <USB_0_PORT_init+0x7c>)
     556:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
     55a:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     55c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
     560:	6299      	str	r1, [r3, #40]	; 0x28
     562:	481c      	ldr	r0, [pc, #112]	; (5d4 <USB_0_PORT_init+0x80>)
     564:	6298      	str	r0, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     566:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     568:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
     56c:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     570:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     574:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
	tmp &= ~PORT_PINCFG_PMUXEN;
     578:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     57c:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     580:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     584:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     588:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     58c:	f042 0207 	orr.w	r2, r2, #7
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     590:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     594:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
     598:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     59a:	6299      	str	r1, [r3, #40]	; 0x28
     59c:	490e      	ldr	r1, [pc, #56]	; (5d8 <USB_0_PORT_init+0x84>)
     59e:	6299      	str	r1, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     5a0:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     5a2:	f893 2059 	ldrb.w	r2, [r3, #89]	; 0x59
     5a6:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     5aa:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     5ae:	f893 2059 	ldrb.w	r2, [r3, #89]	; 0x59
	tmp &= ~PORT_PINCFG_PMUXEN;
     5b2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     5b6:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     5ba:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     5be:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     5c2:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     5c6:	f042 0270 	orr.w	r2, r2, #112	; 0x70
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     5ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
     5ce:	4770      	bx	lr
     5d0:	41008000 	.word	0x41008000
     5d4:	c0000100 	.word	0xc0000100
     5d8:	c0000200 	.word	0xc0000200

000005dc <USB_0_CLOCK_init>:
     5dc:	2244      	movs	r2, #68	; 0x44
     5de:	4b07      	ldr	r3, [pc, #28]	; (5fc <USB_0_CLOCK_init+0x20>)
     5e0:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_USB;
     5e4:	f5a3 53a0 	sub.w	r3, r3, #5120	; 0x1400
     5e8:	691a      	ldr	r2, [r3, #16]
     5ea:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
     5ee:	611a      	str	r2, [r3, #16]
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_USB;
     5f0:	699a      	ldr	r2, [r3, #24]
     5f2:	f042 0201 	orr.w	r2, r2, #1
     5f6:	619a      	str	r2, [r3, #24]
     5f8:	4770      	bx	lr
     5fa:	bf00      	nop
     5fc:	40001c00 	.word	0x40001c00

00000600 <USB_0_init>:
	hri_mclk_set_AHBMASK_USB_bit(MCLK);
	hri_mclk_set_APBBMASK_USB_bit(MCLK);
}

void USB_0_init(void)
{
     600:	b508      	push	{r3, lr}
	USB_0_CLOCK_init();
     602:	4b03      	ldr	r3, [pc, #12]	; (610 <USB_0_init+0x10>)
     604:	4798      	blx	r3
	usb_d_init();
     606:	4b03      	ldr	r3, [pc, #12]	; (614 <USB_0_init+0x14>)
     608:	4798      	blx	r3
	USB_0_PORT_init();
     60a:	4b03      	ldr	r3, [pc, #12]	; (618 <USB_0_init+0x18>)
     60c:	4798      	blx	r3
     60e:	bd08      	pop	{r3, pc}
     610:	000005dd 	.word	0x000005dd
     614:	00000b75 	.word	0x00000b75
     618:	00000555 	.word	0x00000555

0000061c <system_init>:
}

void system_init(void)
{
     61c:	b508      	push	{r3, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
     61e:	4b0f      	ldr	r3, [pc, #60]	; (65c <system_init+0x40>)
     620:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     622:	4b0f      	ldr	r3, [pc, #60]	; (660 <system_init+0x44>)
     624:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
     628:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     62c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     630:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
     634:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
     638:	4a0a      	ldr	r2, [pc, #40]	; (664 <system_init+0x48>)
     63a:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     63e:	f893 20dc 	ldrb.w	r2, [r3, #220]	; 0xdc
	tmp &= ~PORT_PINCFG_PMUXEN;
     642:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     646:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
	// Set pin direction to output
	gpio_set_pin_direction(SPI0_CS, GPIO_DIRECTION_OUT);

	gpio_set_pin_function(SPI0_CS, GPIO_PIN_FUNCTION_OFF);

	ADC_0_init();
     64a:	4b07      	ldr	r3, [pc, #28]	; (668 <system_init+0x4c>)
     64c:	4798      	blx	r3

	SPI_0_init();
     64e:	4b07      	ldr	r3, [pc, #28]	; (66c <system_init+0x50>)
     650:	4798      	blx	r3

	delay_driver_init();
     652:	4b07      	ldr	r3, [pc, #28]	; (670 <system_init+0x54>)
     654:	4798      	blx	r3

	USB_0_init();
     656:	4b07      	ldr	r3, [pc, #28]	; (674 <system_init+0x58>)
     658:	4798      	blx	r3
     65a:	bd08      	pop	{r3, pc}
     65c:	00001065 	.word	0x00001065
     660:	41008000 	.word	0x41008000
     664:	c0001000 	.word	0xc0001000
     668:	00000425 	.word	0x00000425
     66c:	00000519 	.word	0x00000519
     670:	00000541 	.word	0x00000541
     674:	00000601 	.word	0x00000601

00000678 <adc_sync_init>:

/**
 * \brief Initialize ADC
 */
int32_t adc_sync_init(struct adc_sync_descriptor *const descr, void *const hw, void *const func)
{
     678:	b538      	push	{r3, r4, r5, lr}
     67a:	460c      	mov	r4, r1
	ASSERT(descr && hw);
     67c:	4605      	mov	r5, r0
     67e:	b158      	cbz	r0, 698 <adc_sync_init+0x20>
     680:	1c08      	adds	r0, r1, #0
     682:	bf18      	it	ne
     684:	2001      	movne	r0, #1
     686:	2239      	movs	r2, #57	; 0x39
     688:	4904      	ldr	r1, [pc, #16]	; (69c <adc_sync_init+0x24>)
     68a:	4b05      	ldr	r3, [pc, #20]	; (6a0 <adc_sync_init+0x28>)
     68c:	4798      	blx	r3

	return _adc_sync_init(&descr->device, hw);
     68e:	4621      	mov	r1, r4
     690:	4628      	mov	r0, r5
     692:	4b04      	ldr	r3, [pc, #16]	; (6a4 <adc_sync_init+0x2c>)
     694:	4798      	blx	r3
}
     696:	bd38      	pop	{r3, r4, r5, pc}
     698:	2000      	movs	r0, #0
     69a:	e7f4      	b.n	686 <adc_sync_init+0xe>
     69c:	00003798 	.word	0x00003798
     6a0:	00000ec1 	.word	0x00000ec1
     6a4:	00001021 	.word	0x00001021

000006a8 <delay_init>:

/**
 * \brief Initialize Delay driver
 */
void delay_init(void *const hw)
{
     6a8:	b508      	push	{r3, lr}
	_delay_init(hardware = hw);
     6aa:	4b02      	ldr	r3, [pc, #8]	; (6b4 <delay_init+0xc>)
     6ac:	6018      	str	r0, [r3, #0]
     6ae:	4b02      	ldr	r3, [pc, #8]	; (6b8 <delay_init+0x10>)
     6b0:	4798      	blx	r3
     6b2:	bd08      	pop	{r3, pc}
     6b4:	20000528 	.word	0x20000528
     6b8:	000015c1 	.word	0x000015c1

000006bc <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
     6bc:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
     6be:	4b04      	ldr	r3, [pc, #16]	; (6d0 <delay_ms+0x14>)
     6c0:	681c      	ldr	r4, [r3, #0]
     6c2:	4b04      	ldr	r3, [pc, #16]	; (6d4 <delay_ms+0x18>)
     6c4:	4798      	blx	r3
     6c6:	4601      	mov	r1, r0
     6c8:	4620      	mov	r0, r4
     6ca:	4b03      	ldr	r3, [pc, #12]	; (6d8 <delay_ms+0x1c>)
     6cc:	4798      	blx	r3
     6ce:	bd10      	pop	{r4, pc}
     6d0:	20000528 	.word	0x20000528
     6d4:	00001059 	.word	0x00001059
     6d8:	000015d5 	.word	0x000015d5

000006dc <_spi_m_async_io_write>:
 *  \return ERR_NONE on success, or an error code on failure.
 *  \retval ERR_NONE Success, transfer started.
 *  \retval ERR_BUSY Busy.
 */
static int32_t _spi_m_async_io_write(struct io_descriptor *io, const uint8_t *const buf, const uint16_t length)
{
     6dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     6de:	460f      	mov	r7, r1
     6e0:	4616      	mov	r6, r2
	ASSERT(io);
     6e2:	4604      	mov	r4, r0
     6e4:	f240 1227 	movw	r2, #295	; 0x127
     6e8:	4909      	ldr	r1, [pc, #36]	; (710 <_spi_m_async_io_write+0x34>)
     6ea:	3000      	adds	r0, #0
     6ec:	bf18      	it	ne
     6ee:	2001      	movne	r0, #1
     6f0:	4b08      	ldr	r3, [pc, #32]	; (714 <_spi_m_async_io_write+0x38>)
     6f2:	4798      	blx	r3
	struct spi_m_async_descriptor *spi = CONTAINER_OF(io, struct spi_m_async_descriptor, io);

	spi->xfer.rxbuf = NULL;
     6f4:	2500      	movs	r5, #0
     6f6:	61a5      	str	r5, [r4, #24]
	spi->xfer.txbuf = (uint8_t *)buf;
     6f8:	6167      	str	r7, [r4, #20]
	spi->xfer.size  = length;
     6fa:	61e6      	str	r6, [r4, #28]
	spi->xfercnt    = 0;
     6fc:	6225      	str	r5, [r4, #32]

	spi->stat = SPI_M_ASYNC_STATUS_BUSY;
     6fe:	2310      	movs	r3, #16
     700:	7223      	strb	r3, [r4, #8]
	_spi_m_async_enable_tx(&spi->dev, true);
     702:	2101      	movs	r1, #1
     704:	f1a4 0020 	sub.w	r0, r4, #32
     708:	4b03      	ldr	r3, [pc, #12]	; (718 <_spi_m_async_io_write+0x3c>)
     70a:	4798      	blx	r3

	return ERR_NONE;
}
     70c:	4628      	mov	r0, r5
     70e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     710:	000037b4 	.word	0x000037b4
     714:	00000ec1 	.word	0x00000ec1
     718:	00001481 	.word	0x00001481

0000071c <_spi_m_async_io_read>:
{
     71c:	b570      	push	{r4, r5, r6, lr}
     71e:	460d      	mov	r5, r1
     720:	4616      	mov	r6, r2
	ASSERT(io);
     722:	4604      	mov	r4, r0
     724:	f240 1205 	movw	r2, #261	; 0x105
     728:	490c      	ldr	r1, [pc, #48]	; (75c <_spi_m_async_io_read+0x40>)
     72a:	3000      	adds	r0, #0
     72c:	bf18      	it	ne
     72e:	2001      	movne	r0, #1
     730:	4b0b      	ldr	r3, [pc, #44]	; (760 <_spi_m_async_io_read+0x44>)
     732:	4798      	blx	r3
	spi->xfer.rxbuf = buf;
     734:	61a5      	str	r5, [r4, #24]
	spi->xfer.txbuf = NULL;
     736:	2500      	movs	r5, #0
     738:	6165      	str	r5, [r4, #20]
	spi->xfer.size  = length;
     73a:	61e6      	str	r6, [r4, #28]
	spi->xfercnt    = 0;
     73c:	6225      	str	r5, [r4, #32]
	spi->stat = SPI_M_ASYNC_STATUS_BUSY;
     73e:	2310      	movs	r3, #16
     740:	7223      	strb	r3, [r4, #8]
	_spi_m_async_enable_rx(&spi->dev, true);
     742:	3c20      	subs	r4, #32
     744:	2101      	movs	r1, #1
     746:	4620      	mov	r0, r4
     748:	4b06      	ldr	r3, [pc, #24]	; (764 <_spi_m_async_io_read+0x48>)
     74a:	4798      	blx	r3
	_spi_m_async_write_one(&spi->dev, SPI_DUMMY_CHAR);
     74c:	f240 11ff 	movw	r1, #511	; 0x1ff
     750:	4620      	mov	r0, r4
     752:	4b05      	ldr	r3, [pc, #20]	; (768 <_spi_m_async_io_read+0x4c>)
     754:	4798      	blx	r3
}
     756:	4628      	mov	r0, r5
     758:	bd70      	pop	{r4, r5, r6, pc}
     75a:	bf00      	nop
     75c:	000037b4 	.word	0x000037b4
     760:	00000ec1 	.word	0x00000ec1
     764:	000014b5 	.word	0x000014b5
     768:	00001531 	.word	0x00001531

0000076c <_spi_dev_error>:
{
     76c:	b570      	push	{r4, r5, r6, lr}
     76e:	4604      	mov	r4, r0
     770:	460e      	mov	r6, r1
	struct spi_m_async_descriptor *spi = CONTAINER_OF(dev, struct spi_m_async_descriptor, dev);
     772:	1f05      	subs	r5, r0, #4
	_spi_m_async_enable_tx(dev, false);
     774:	2100      	movs	r1, #0
     776:	4b09      	ldr	r3, [pc, #36]	; (79c <_spi_dev_error+0x30>)
     778:	4798      	blx	r3
	_spi_m_async_enable_rx(dev, false);
     77a:	2100      	movs	r1, #0
     77c:	4620      	mov	r0, r4
     77e:	4b08      	ldr	r3, [pc, #32]	; (7a0 <_spi_dev_error+0x34>)
     780:	4798      	blx	r3
	_spi_m_async_enable_tx_complete(dev, false);
     782:	2100      	movs	r1, #0
     784:	4620      	mov	r0, r4
     786:	4b07      	ldr	r3, [pc, #28]	; (7a4 <_spi_dev_error+0x38>)
     788:	4798      	blx	r3
	spi->stat = 0;
     78a:	2300      	movs	r3, #0
     78c:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
	if (spi->callbacks.cb_error) {
     790:	6b23      	ldr	r3, [r4, #48]	; 0x30
     792:	b113      	cbz	r3, 79a <_spi_dev_error+0x2e>
		spi->callbacks.cb_error(spi, status);
     794:	4631      	mov	r1, r6
     796:	4628      	mov	r0, r5
     798:	4798      	blx	r3
     79a:	bd70      	pop	{r4, r5, r6, pc}
     79c:	00001481 	.word	0x00001481
     7a0:	000014b5 	.word	0x000014b5
     7a4:	000014f5 	.word	0x000014f5

000007a8 <_spi_dev_complete>:
	if (spi->xfercnt >= spi->xfer.size) {
     7a8:	6c02      	ldr	r2, [r0, #64]	; 0x40
     7aa:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
     7ac:	429a      	cmp	r2, r3
     7ae:	d200      	bcs.n	7b2 <_spi_dev_complete+0xa>
     7b0:	4770      	bx	lr
{
     7b2:	b510      	push	{r4, lr}
     7b4:	4604      	mov	r4, r0
		_spi_m_async_enable_tx_complete(dev, false);
     7b6:	2100      	movs	r1, #0
     7b8:	4b04      	ldr	r3, [pc, #16]	; (7cc <_spi_dev_complete+0x24>)
     7ba:	4798      	blx	r3
		spi->stat = 0;
     7bc:	2300      	movs	r3, #0
     7be:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
		if (spi->callbacks.cb_xfer) {
     7c2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
     7c4:	b10b      	cbz	r3, 7ca <_spi_dev_complete+0x22>
			spi->callbacks.cb_xfer(spi);
     7c6:	1f20      	subs	r0, r4, #4
     7c8:	4798      	blx	r3
     7ca:	bd10      	pop	{r4, pc}
     7cc:	000014f5 	.word	0x000014f5

000007d0 <_spi_dev_tx>:
{
     7d0:	b510      	push	{r4, lr}
     7d2:	4604      	mov	r4, r0
	if (!(dev->char_size > 1)) {
     7d4:	7903      	ldrb	r3, [r0, #4]
     7d6:	2b01      	cmp	r3, #1
		_spi_m_async_write_one(dev, spi->xfer.txbuf[spi->xfercnt++]);
     7d8:	6b42      	ldr	r2, [r0, #52]	; 0x34
     7da:	6c03      	ldr	r3, [r0, #64]	; 0x40
     7dc:	f103 0101 	add.w	r1, r3, #1
     7e0:	6401      	str	r1, [r0, #64]	; 0x40
     7e2:	bf94      	ite	ls
     7e4:	5cd1      	ldrbls	r1, [r2, r3]
		_spi_m_async_write_one(dev, ((uint16_t *)spi->xfer.txbuf)[spi->xfercnt++]);
     7e6:	f832 1013 	ldrhhi.w	r1, [r2, r3, lsl #1]
     7ea:	4b08      	ldr	r3, [pc, #32]	; (80c <_spi_dev_tx+0x3c>)
     7ec:	4798      	blx	r3
	if (spi->xfercnt == spi->xfer.size) {
     7ee:	6c22      	ldr	r2, [r4, #64]	; 0x40
     7f0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
     7f2:	429a      	cmp	r2, r3
     7f4:	d000      	beq.n	7f8 <_spi_dev_tx+0x28>
     7f6:	bd10      	pop	{r4, pc}
		_spi_m_async_enable_tx(dev, false);
     7f8:	2100      	movs	r1, #0
     7fa:	4620      	mov	r0, r4
     7fc:	4b04      	ldr	r3, [pc, #16]	; (810 <_spi_dev_tx+0x40>)
     7fe:	4798      	blx	r3
		_spi_m_async_enable_tx_complete(dev, true);
     800:	2101      	movs	r1, #1
     802:	4620      	mov	r0, r4
     804:	4b03      	ldr	r3, [pc, #12]	; (814 <_spi_dev_tx+0x44>)
     806:	4798      	blx	r3
}
     808:	e7f5      	b.n	7f6 <_spi_dev_tx+0x26>
     80a:	bf00      	nop
     80c:	00001531 	.word	0x00001531
     810:	00001481 	.word	0x00001481
     814:	000014f5 	.word	0x000014f5

00000818 <_spi_dev_rx>:
{
     818:	b570      	push	{r4, r5, r6, lr}
     81a:	4604      	mov	r4, r0
	if (spi->xfer.rxbuf) {
     81c:	6b85      	ldr	r5, [r0, #56]	; 0x38
     81e:	b305      	cbz	r5, 862 <_spi_dev_rx+0x4a>
		if (!(dev->char_size > 1)) {
     820:	7903      	ldrb	r3, [r0, #4]
     822:	2b01      	cmp	r3, #1
     824:	d916      	bls.n	854 <_spi_dev_rx+0x3c>
			((uint16_t *)spi->xfer.rxbuf)[spi->xfercnt++] = (uint16_t)_spi_m_async_read_one(dev);
     826:	6c06      	ldr	r6, [r0, #64]	; 0x40
     828:	1c73      	adds	r3, r6, #1
     82a:	6403      	str	r3, [r0, #64]	; 0x40
     82c:	4b18      	ldr	r3, [pc, #96]	; (890 <_spi_dev_rx+0x78>)
     82e:	4798      	blx	r3
     830:	f825 0016 	strh.w	r0, [r5, r6, lsl #1]
	if (spi->xfercnt < spi->xfer.size) {
     834:	6c23      	ldr	r3, [r4, #64]	; 0x40
     836:	6be2      	ldr	r2, [r4, #60]	; 0x3c
     838:	4293      	cmp	r3, r2
     83a:	d21d      	bcs.n	878 <_spi_dev_rx+0x60>
		if (spi->xfer.txbuf) {
     83c:	6b62      	ldr	r2, [r4, #52]	; 0x34
     83e:	b1b2      	cbz	r2, 86e <_spi_dev_rx+0x56>
			if (!(dev->char_size > 1)) {
     840:	7921      	ldrb	r1, [r4, #4]
     842:	2901      	cmp	r1, #1
				_spi_m_async_write_one(dev, spi->xfer.txbuf[spi->xfercnt]);
     844:	bf94      	ite	ls
     846:	5cd1      	ldrbls	r1, [r2, r3]
				_spi_m_async_write_one(dev, ((uint16_t *)spi->xfer.txbuf)[spi->xfercnt]);
     848:	f832 1013 	ldrhhi.w	r1, [r2, r3, lsl #1]
     84c:	4620      	mov	r0, r4
     84e:	4b11      	ldr	r3, [pc, #68]	; (894 <_spi_dev_rx+0x7c>)
     850:	4798      	blx	r3
     852:	bd70      	pop	{r4, r5, r6, pc}
			spi->xfer.rxbuf[spi->xfercnt++] = (uint8_t)_spi_m_async_read_one(dev);
     854:	6c06      	ldr	r6, [r0, #64]	; 0x40
     856:	1c73      	adds	r3, r6, #1
     858:	6403      	str	r3, [r0, #64]	; 0x40
     85a:	4b0d      	ldr	r3, [pc, #52]	; (890 <_spi_dev_rx+0x78>)
     85c:	4798      	blx	r3
     85e:	55a8      	strb	r0, [r5, r6]
     860:	e7e8      	b.n	834 <_spi_dev_rx+0x1c>
		_spi_m_async_read_one(dev);
     862:	4b0b      	ldr	r3, [pc, #44]	; (890 <_spi_dev_rx+0x78>)
     864:	4798      	blx	r3
		spi->xfercnt++;
     866:	6c23      	ldr	r3, [r4, #64]	; 0x40
     868:	3301      	adds	r3, #1
     86a:	6423      	str	r3, [r4, #64]	; 0x40
     86c:	e7e2      	b.n	834 <_spi_dev_rx+0x1c>
			_spi_m_async_write_one(dev, dev->dummy_byte);
     86e:	88e1      	ldrh	r1, [r4, #6]
     870:	4620      	mov	r0, r4
     872:	4b08      	ldr	r3, [pc, #32]	; (894 <_spi_dev_rx+0x7c>)
     874:	4798      	blx	r3
     876:	bd70      	pop	{r4, r5, r6, pc}
		_spi_m_async_enable_rx(dev, false);
     878:	2100      	movs	r1, #0
     87a:	4620      	mov	r0, r4
     87c:	4b06      	ldr	r3, [pc, #24]	; (898 <_spi_dev_rx+0x80>)
     87e:	4798      	blx	r3
		spi->stat = 0;
     880:	2300      	movs	r3, #0
     882:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
		if (spi->callbacks.cb_xfer) {
     886:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
     888:	b10b      	cbz	r3, 88e <_spi_dev_rx+0x76>
			spi->callbacks.cb_xfer(spi);
     88a:	1f20      	subs	r0, r4, #4
     88c:	4798      	blx	r3
     88e:	bd70      	pop	{r4, r5, r6, pc}
     890:	00001561 	.word	0x00001561
     894:	00001531 	.word	0x00001531
     898:	000014b5 	.word	0x000014b5

0000089c <spi_m_async_init>:
{
     89c:	b570      	push	{r4, r5, r6, lr}
     89e:	460d      	mov	r5, r1
	ASSERT(spi && hw);
     8a0:	4606      	mov	r6, r0
     8a2:	b330      	cbz	r0, 8f2 <spi_m_async_init+0x56>
     8a4:	1c08      	adds	r0, r1, #0
     8a6:	bf18      	it	ne
     8a8:	2001      	movne	r0, #1
     8aa:	22a5      	movs	r2, #165	; 0xa5
     8ac:	4912      	ldr	r1, [pc, #72]	; (8f8 <spi_m_async_init+0x5c>)
     8ae:	4b13      	ldr	r3, [pc, #76]	; (8fc <spi_m_async_init+0x60>)
     8b0:	4798      	blx	r3
	spi->dev.prvt = (void *)hw;
     8b2:	4634      	mov	r4, r6
     8b4:	f844 5f04 	str.w	r5, [r4, #4]!
	rc            = _spi_m_async_init(&spi->dev, hw);
     8b8:	4629      	mov	r1, r5
     8ba:	4620      	mov	r0, r4
     8bc:	4b10      	ldr	r3, [pc, #64]	; (900 <spi_m_async_init+0x64>)
     8be:	4798      	blx	r3
	if (rc >= 0) {
     8c0:	2800      	cmp	r0, #0
     8c2:	db15      	blt.n	8f0 <spi_m_async_init+0x54>
		_spi_m_async_register_callback(&spi->dev, SPI_DEV_CB_TX, (FUNC_PTR)_spi_dev_tx);
     8c4:	4a0f      	ldr	r2, [pc, #60]	; (904 <spi_m_async_init+0x68>)
     8c6:	2100      	movs	r1, #0
     8c8:	4620      	mov	r0, r4
     8ca:	4d0f      	ldr	r5, [pc, #60]	; (908 <spi_m_async_init+0x6c>)
     8cc:	47a8      	blx	r5
		_spi_m_async_register_callback(&spi->dev, SPI_DEV_CB_RX, (FUNC_PTR)_spi_dev_rx);
     8ce:	4a0f      	ldr	r2, [pc, #60]	; (90c <spi_m_async_init+0x70>)
     8d0:	2101      	movs	r1, #1
     8d2:	4620      	mov	r0, r4
     8d4:	47a8      	blx	r5
		_spi_m_async_register_callback(&spi->dev, SPI_DEV_CB_COMPLETE, (FUNC_PTR)_spi_dev_complete);
     8d6:	4a0e      	ldr	r2, [pc, #56]	; (910 <spi_m_async_init+0x74>)
     8d8:	2102      	movs	r1, #2
     8da:	4620      	mov	r0, r4
     8dc:	47a8      	blx	r5
		_spi_m_async_register_callback(&spi->dev, SPI_DEV_CB_ERROR, (FUNC_PTR)_spi_dev_error);
     8de:	4a0d      	ldr	r2, [pc, #52]	; (914 <spi_m_async_init+0x78>)
     8e0:	2103      	movs	r1, #3
     8e2:	4620      	mov	r0, r4
     8e4:	47a8      	blx	r5
	spi->io.read  = _spi_m_async_io_read;
     8e6:	4b0c      	ldr	r3, [pc, #48]	; (918 <spi_m_async_init+0x7c>)
     8e8:	62b3      	str	r3, [r6, #40]	; 0x28
	spi->io.write = _spi_m_async_io_write;
     8ea:	4b0c      	ldr	r3, [pc, #48]	; (91c <spi_m_async_init+0x80>)
     8ec:	6273      	str	r3, [r6, #36]	; 0x24
	return ERR_NONE;
     8ee:	2000      	movs	r0, #0
}
     8f0:	bd70      	pop	{r4, r5, r6, pc}
     8f2:	2000      	movs	r0, #0
     8f4:	e7d9      	b.n	8aa <spi_m_async_init+0xe>
     8f6:	bf00      	nop
     8f8:	000037b4 	.word	0x000037b4
     8fc:	00000ec1 	.word	0x00000ec1
     900:	00001415 	.word	0x00001415
     904:	000007d1 	.word	0x000007d1
     908:	0000158d 	.word	0x0000158d
     90c:	00000819 	.word	0x00000819
     910:	000007a9 	.word	0x000007a9
     914:	0000076d 	.word	0x0000076d
     918:	0000071d 	.word	0x0000071d
     91c:	000006dd 	.word	0x000006dd

00000920 <_usb_d_find_ep>:
 */
static int8_t _usb_d_find_ep(const uint8_t ep)
{
	int8_t i;
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
     920:	4b0f      	ldr	r3, [pc, #60]	; (960 <_usb_d_find_ep+0x40>)
     922:	7859      	ldrb	r1, [r3, #1]
     924:	4288      	cmp	r0, r1
     926:	d018      	beq.n	95a <_usb_d_find_ep+0x3a>
{
     928:	b430      	push	{r4, r5}
     92a:	461a      	mov	r2, r3
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
     92c:	2300      	movs	r3, #0
			return i;
		}
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
     92e:	f000 050f 	and.w	r5, r0, #15
     932:	e007      	b.n	944 <_usb_d_find_ep+0x24>
     934:	3301      	adds	r3, #1
     936:	b25b      	sxtb	r3, r3
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
     938:	2b04      	cmp	r3, #4
     93a:	d009      	beq.n	950 <_usb_d_find_ep+0x30>
     93c:	3220      	adds	r2, #32
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
     93e:	7851      	ldrb	r1, [r2, #1]
     940:	4281      	cmp	r1, r0
     942:	d007      	beq.n	954 <_usb_d_find_ep+0x34>
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
     944:	7814      	ldrb	r4, [r2, #0]
     946:	2c00      	cmp	r4, #0
     948:	d1f4      	bne.n	934 <_usb_d_find_ep+0x14>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
     94a:	428d      	cmp	r5, r1
     94c:	d1f2      	bne.n	934 <_usb_d_find_ep+0x14>
     94e:	e001      	b.n	954 <_usb_d_find_ep+0x34>
			return i;
		}
	}
	return -1;
     950:	f04f 33ff 	mov.w	r3, #4294967295
}
     954:	4618      	mov	r0, r3
     956:	bc30      	pop	{r4, r5}
     958:	4770      	bx	lr
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
     95a:	2300      	movs	r3, #0
}
     95c:	4618      	mov	r0, r3
     95e:	4770      	bx	lr
     960:	2000052c 	.word	0x2000052c

00000964 <usb_d_dummy_cb_false>:
{
	(void)unused0;
	(void)unused1;
	(void)unused2;
	return false;
}
     964:	2000      	movs	r0, #0
     966:	4770      	bx	lr

00000968 <usb_d_cb_trans_more>:
 * \brief Callback invoked when request more data
 * \param[in] ep Endpoint number with transfer direction on bit 8.
 * \param[in] transfered Number of bytes transfered.
 */
static bool usb_d_cb_trans_more(const uint8_t ep, const uint32_t transfered)
{
     968:	b538      	push	{r3, r4, r5, lr}
     96a:	4604      	mov	r4, r0
     96c:	460d      	mov	r5, r1
	int8_t           ep_index = _usb_d_find_ep(ep);
     96e:	4b09      	ldr	r3, [pc, #36]	; (994 <usb_d_cb_trans_more+0x2c>)
     970:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ept->xfer.hdr.state == USB_EP_S_X_DATA) {
     972:	4b09      	ldr	r3, [pc, #36]	; (998 <usb_d_cb_trans_more+0x30>)
     974:	eb03 1340 	add.w	r3, r3, r0, lsl #5
     978:	789b      	ldrb	r3, [r3, #2]
     97a:	2b03      	cmp	r3, #3
     97c:	d001      	beq.n	982 <usb_d_cb_trans_more+0x1a>
		return ept->callbacks.more(ep, transfered);
	}
	return false;
     97e:	2000      	movs	r0, #0
}
     980:	bd38      	pop	{r3, r4, r5, pc}
		return ept->callbacks.more(ep, transfered);
     982:	4b05      	ldr	r3, [pc, #20]	; (998 <usb_d_cb_trans_more+0x30>)
     984:	eb03 1040 	add.w	r0, r3, r0, lsl #5
     988:	6983      	ldr	r3, [r0, #24]
     98a:	4629      	mov	r1, r5
     98c:	4620      	mov	r0, r4
     98e:	4798      	blx	r3
     990:	bd38      	pop	{r3, r4, r5, pc}
     992:	bf00      	nop
     994:	00000921 	.word	0x00000921
     998:	2000052c 	.word	0x2000052c

0000099c <_usb_d_cb_trans_done>:

/**
 * Callback when USB transactions are finished.
 */
static void _usb_d_cb_trans_done(const uint8_t ep, const int32_t code, const uint32_t transferred)
{
     99c:	b5f0      	push	{r4, r5, r6, r7, lr}
     99e:	b085      	sub	sp, #20
     9a0:	4606      	mov	r6, r0
     9a2:	460d      	mov	r5, r1
     9a4:	4617      	mov	r7, r2
	int8_t           ep_index = _usb_d_find_ep(ep);
     9a6:	4b4d      	ldr	r3, [pc, #308]	; (adc <_usb_d_cb_trans_done+0x140>)
     9a8:	4798      	blx	r3
     9aa:	4604      	mov	r4, r0
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];

	if (code == USB_TRANS_DONE) {
     9ac:	2d00      	cmp	r5, #0
     9ae:	d15b      	bne.n	a68 <_usb_d_cb_trans_done+0xcc>
		ept->xfer.hdr.status = USB_XFER_DONE;
     9b0:	4a4b      	ldr	r2, [pc, #300]	; (ae0 <_usb_d_cb_trans_done+0x144>)
     9b2:	0143      	lsls	r3, r0, #5
     9b4:	18d1      	adds	r1, r2, r3
     9b6:	2000      	movs	r0, #0
     9b8:	70c8      	strb	r0, [r1, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
     9ba:	5cd3      	ldrb	r3, [r2, r3]
     9bc:	b173      	cbz	r3, 9dc <_usb_d_cb_trans_done+0x40>
			usb_d_ctrl_trans_done(ept);
			return;
		}
		ept->xfer.hdr.state = USB_EP_S_IDLE;
     9be:	4b48      	ldr	r3, [pc, #288]	; (ae0 <_usb_d_cb_trans_done+0x144>)
     9c0:	eb03 1344 	add.w	r3, r3, r4, lsl #5
     9c4:	2201      	movs	r2, #1
     9c6:	709a      	strb	r2, [r3, #2]
	} else {
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
		ept->xfer.hdr.status = USB_XFER_ERROR;
	}

	ept->callbacks.xfer(ep, (enum usb_xfer_code)ept->xfer.hdr.status, (void *)transferred);
     9c8:	4845      	ldr	r0, [pc, #276]	; (ae0 <_usb_d_cb_trans_done+0x144>)
     9ca:	eb00 1044 	add.w	r0, r0, r4, lsl #5
     9ce:	69c3      	ldr	r3, [r0, #28]
     9d0:	463a      	mov	r2, r7
     9d2:	78c1      	ldrb	r1, [r0, #3]
     9d4:	4630      	mov	r0, r6
     9d6:	4798      	blx	r3
}
     9d8:	b005      	add	sp, #20
     9da:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (state == USB_EP_S_X_DATA) {
     9dc:	788b      	ldrb	r3, [r1, #2]
     9de:	2b03      	cmp	r3, #3
     9e0:	d00b      	beq.n	9fa <_usb_d_cb_trans_done+0x5e>
		ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DONE, ept->xfer.req);
     9e2:	483f      	ldr	r0, [pc, #252]	; (ae0 <_usb_d_cb_trans_done+0x144>)
     9e4:	eb00 1244 	add.w	r2, r0, r4, lsl #5
     9e8:	4614      	mov	r4, r2
     9ea:	69d3      	ldr	r3, [r2, #28]
     9ec:	320c      	adds	r2, #12
     9ee:	2100      	movs	r1, #0
     9f0:	7860      	ldrb	r0, [r4, #1]
     9f2:	4798      	blx	r3
		ept->xfer.hdr.state = USB_EP_S_X_SETUP;
     9f4:	2302      	movs	r3, #2
     9f6:	70a3      	strb	r3, [r4, #2]
     9f8:	e7ee      	b.n	9d8 <_usb_d_cb_trans_done+0x3c>
	bool    req_dir = USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN;
     9fa:	460b      	mov	r3, r1
     9fc:	f991 500c 	ldrsb.w	r5, [r1, #12]
		bool err = ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DATA, ept->xfer.req);
     a00:	460a      	mov	r2, r1
     a02:	69ce      	ldr	r6, [r1, #28]
     a04:	320c      	adds	r2, #12
     a06:	2101      	movs	r1, #1
     a08:	7858      	ldrb	r0, [r3, #1]
     a0a:	47b0      	blx	r6
		if (err) {
     a0c:	b1a0      	cbz	r0, a38 <_usb_d_cb_trans_done+0x9c>
			ept->xfer.hdr.state  = USB_EP_S_HALTED;
     a0e:	4b34      	ldr	r3, [pc, #208]	; (ae0 <_usb_d_cb_trans_done+0x144>)
     a10:	eb03 1344 	add.w	r3, r3, r4, lsl #5
     a14:	2205      	movs	r2, #5
     a16:	709a      	strb	r2, [r3, #2]
			ept->xfer.hdr.status = USB_XFER_HALT;
     a18:	2202      	movs	r2, #2
     a1a:	70da      	strb	r2, [r3, #3]
			_usb_d_dev_ep_stall(req_dir ? ept->xfer.hdr.ep : (ept->xfer.hdr.ep | USB_EP_DIR), USB_EP_STALL_SET);
     a1c:	2d00      	cmp	r5, #0
     a1e:	db09      	blt.n	a34 <_usb_d_cb_trans_done+0x98>
     a20:	482f      	ldr	r0, [pc, #188]	; (ae0 <_usb_d_cb_trans_done+0x144>)
     a22:	eb00 1044 	add.w	r0, r0, r4, lsl #5
     a26:	7840      	ldrb	r0, [r0, #1]
     a28:	f040 0080 	orr.w	r0, r0, #128	; 0x80
     a2c:	2101      	movs	r1, #1
     a2e:	4b2d      	ldr	r3, [pc, #180]	; (ae4 <_usb_d_cb_trans_done+0x148>)
     a30:	4798      	blx	r3
     a32:	e7d1      	b.n	9d8 <_usb_d_cb_trans_done+0x3c>
     a34:	7858      	ldrb	r0, [r3, #1]
     a36:	e7f9      	b.n	a2c <_usb_d_cb_trans_done+0x90>
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
     a38:	4829      	ldr	r0, [pc, #164]	; (ae0 <_usb_d_cb_trans_done+0x144>)
     a3a:	eb00 1044 	add.w	r0, r0, r4, lsl #5
     a3e:	2304      	movs	r3, #4
     a40:	7083      	strb	r3, [r0, #2]
			_usb_d_trans(ept->xfer.hdr.ep, !req_dir, NULL, 0, 1);
     a42:	7843      	ldrb	r3, [r0, #1]
	struct usb_d_transfer trans
     a44:	2200      	movs	r2, #0
     a46:	9201      	str	r2, [sp, #4]
     a48:	9202      	str	r2, [sp, #8]
     a4a:	4295      	cmp	r5, r2
     a4c:	bfac      	ite	ge
     a4e:	f043 0380 	orrge.w	r3, r3, #128	; 0x80
     a52:	f003 030f 	andlt.w	r3, r3, #15
     a56:	f88d 300c 	strb.w	r3, [sp, #12]
     a5a:	2301      	movs	r3, #1
     a5c:	f88d 300d 	strb.w	r3, [sp, #13]
	return _usb_d_dev_ep_trans(&trans);
     a60:	a801      	add	r0, sp, #4
     a62:	4b21      	ldr	r3, [pc, #132]	; (ae8 <_usb_d_cb_trans_done+0x14c>)
     a64:	4798      	blx	r3
     a66:	e7b7      	b.n	9d8 <_usb_d_cb_trans_done+0x3c>
	} else if (code == USB_TRANS_STALL) {
     a68:	2d01      	cmp	r5, #1
     a6a:	d00a      	beq.n	a82 <_usb_d_cb_trans_done+0xe6>
	} else if (code == USB_TRANS_ABORT) {
     a6c:	2d02      	cmp	r5, #2
     a6e:	d01c      	beq.n	aaa <_usb_d_cb_trans_done+0x10e>
	} else if (code == USB_TRANS_RESET) {
     a70:	2d03      	cmp	r5, #3
     a72:	d02a      	beq.n	aca <_usb_d_cb_trans_done+0x12e>
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
     a74:	4b1a      	ldr	r3, [pc, #104]	; (ae0 <_usb_d_cb_trans_done+0x144>)
     a76:	eb03 1340 	add.w	r3, r3, r0, lsl #5
     a7a:	2206      	movs	r2, #6
     a7c:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_ERROR;
     a7e:	70da      	strb	r2, [r3, #3]
     a80:	e7a2      	b.n	9c8 <_usb_d_cb_trans_done+0x2c>
		ept->xfer.hdr.status = USB_XFER_HALT;
     a82:	4a17      	ldr	r2, [pc, #92]	; (ae0 <_usb_d_cb_trans_done+0x144>)
     a84:	0143      	lsls	r3, r0, #5
     a86:	18d1      	adds	r1, r2, r3
     a88:	2002      	movs	r0, #2
     a8a:	70c8      	strb	r0, [r1, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
     a8c:	5cd3      	ldrb	r3, [r2, r3]
     a8e:	b12b      	cbz	r3, a9c <_usb_d_cb_trans_done+0x100>
			ept->xfer.hdr.state = USB_EP_S_HALTED;
     a90:	4b13      	ldr	r3, [pc, #76]	; (ae0 <_usb_d_cb_trans_done+0x144>)
     a92:	eb03 1344 	add.w	r3, r3, r4, lsl #5
     a96:	2205      	movs	r2, #5
     a98:	709a      	strb	r2, [r3, #2]
     a9a:	e795      	b.n	9c8 <_usb_d_cb_trans_done+0x2c>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
     a9c:	460b      	mov	r3, r1
     a9e:	7098      	strb	r0, [r3, #2]
			_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
     aa0:	2100      	movs	r1, #0
     aa2:	4630      	mov	r0, r6
     aa4:	4b0f      	ldr	r3, [pc, #60]	; (ae4 <_usb_d_cb_trans_done+0x148>)
     aa6:	4798      	blx	r3
     aa8:	e78e      	b.n	9c8 <_usb_d_cb_trans_done+0x2c>
		ept->xfer.hdr.status = USB_XFER_ABORT;
     aaa:	4a0d      	ldr	r2, [pc, #52]	; (ae0 <_usb_d_cb_trans_done+0x144>)
     aac:	0143      	lsls	r3, r0, #5
     aae:	18d1      	adds	r1, r2, r3
     ab0:	2004      	movs	r0, #4
     ab2:	70c8      	strb	r0, [r1, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
     ab4:	5cd3      	ldrb	r3, [r2, r3]
     ab6:	b12b      	cbz	r3, ac4 <_usb_d_cb_trans_done+0x128>
		ept->xfer.hdr.state = USB_EP_S_IDLE;
     ab8:	4b09      	ldr	r3, [pc, #36]	; (ae0 <_usb_d_cb_trans_done+0x144>)
     aba:	eb03 1344 	add.w	r3, r3, r4, lsl #5
     abe:	2201      	movs	r2, #1
     ac0:	709a      	strb	r2, [r3, #2]
     ac2:	e781      	b.n	9c8 <_usb_d_cb_trans_done+0x2c>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
     ac4:	2302      	movs	r3, #2
     ac6:	708b      	strb	r3, [r1, #2]
			return;
     ac8:	e786      	b.n	9d8 <_usb_d_cb_trans_done+0x3c>
		ept->xfer.hdr.state  = USB_EP_S_DISABLED;
     aca:	4b05      	ldr	r3, [pc, #20]	; (ae0 <_usb_d_cb_trans_done+0x144>)
     acc:	eb03 1340 	add.w	r3, r3, r0, lsl #5
     ad0:	2200      	movs	r2, #0
     ad2:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_RESET;
     ad4:	2205      	movs	r2, #5
     ad6:	70da      	strb	r2, [r3, #3]
     ad8:	e776      	b.n	9c8 <_usb_d_cb_trans_done+0x2c>
     ada:	bf00      	nop
     adc:	00000921 	.word	0x00000921
     ae0:	2000052c 	.word	0x2000052c
     ae4:	000024b1 	.word	0x000024b1
     ae8:	00002659 	.word	0x00002659

00000aec <usb_d_cb_trans_setup>:
{
     aec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     af0:	4605      	mov	r5, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
     af2:	4b1c      	ldr	r3, [pc, #112]	; (b64 <usb_d_cb_trans_setup+0x78>)
     af4:	4798      	blx	r3
     af6:	4606      	mov	r6, r0
	uint8_t *        req      = ept->xfer.req;
     af8:	4c1b      	ldr	r4, [pc, #108]	; (b68 <usb_d_cb_trans_setup+0x7c>)
     afa:	eb04 1440 	add.w	r4, r4, r0, lsl #5
     afe:	340c      	adds	r4, #12
	uint8_t n = _usb_d_dev_ep_read_req(ep, req);
     b00:	4621      	mov	r1, r4
     b02:	4628      	mov	r0, r5
     b04:	4b19      	ldr	r3, [pc, #100]	; (b6c <usb_d_cb_trans_setup+0x80>)
     b06:	4798      	blx	r3
	if (n != 8) {
     b08:	b2c0      	uxtb	r0, r0
     b0a:	2808      	cmp	r0, #8
     b0c:	d009      	beq.n	b22 <usb_d_cb_trans_setup+0x36>
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
     b0e:	2101      	movs	r1, #1
     b10:	4628      	mov	r0, r5
     b12:	4c17      	ldr	r4, [pc, #92]	; (b70 <usb_d_cb_trans_setup+0x84>)
     b14:	47a0      	blx	r4
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
     b16:	2101      	movs	r1, #1
     b18:	f045 0080 	orr.w	r0, r5, #128	; 0x80
     b1c:	47a0      	blx	r4
		return;
     b1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
     b22:	2100      	movs	r1, #0
     b24:	4628      	mov	r0, r5
     b26:	4f12      	ldr	r7, [pc, #72]	; (b70 <usb_d_cb_trans_setup+0x84>)
     b28:	47b8      	blx	r7
	_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_CLR);
     b2a:	f045 0880 	orr.w	r8, r5, #128	; 0x80
     b2e:	2100      	movs	r1, #0
     b30:	4640      	mov	r0, r8
     b32:	47b8      	blx	r7
	ept->xfer.hdr.state = USB_EP_S_IDLE;
     b34:	4b0c      	ldr	r3, [pc, #48]	; (b68 <usb_d_cb_trans_setup+0x7c>)
     b36:	eb03 1346 	add.w	r3, r3, r6, lsl #5
     b3a:	2201      	movs	r2, #1
     b3c:	709a      	strb	r2, [r3, #2]
	if (!ept->callbacks.req(ep, req)) {
     b3e:	695b      	ldr	r3, [r3, #20]
     b40:	4621      	mov	r1, r4
     b42:	4628      	mov	r0, r5
     b44:	4798      	blx	r3
     b46:	b108      	cbz	r0, b4c <usb_d_cb_trans_setup+0x60>
     b48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ept->xfer.hdr.state = USB_EP_S_HALTED;
     b4c:	4b06      	ldr	r3, [pc, #24]	; (b68 <usb_d_cb_trans_setup+0x7c>)
     b4e:	eb03 1646 	add.w	r6, r3, r6, lsl #5
     b52:	2305      	movs	r3, #5
     b54:	70b3      	strb	r3, [r6, #2]
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
     b56:	2101      	movs	r1, #1
     b58:	4628      	mov	r0, r5
     b5a:	47b8      	blx	r7
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
     b5c:	2101      	movs	r1, #1
     b5e:	4640      	mov	r0, r8
     b60:	47b8      	blx	r7
     b62:	e7f1      	b.n	b48 <usb_d_cb_trans_setup+0x5c>
     b64:	00000921 	.word	0x00000921
     b68:	2000052c 	.word	0x2000052c
     b6c:	000025f9 	.word	0x000025f9
     b70:	000024b1 	.word	0x000024b1

00000b74 <usb_d_init>:

int32_t usb_d_init(void)
{
     b74:	b510      	push	{r4, lr}
	int32_t rc = _usb_d_dev_init();
     b76:	4b11      	ldr	r3, [pc, #68]	; (bbc <usb_d_init+0x48>)
     b78:	4798      	blx	r3
	uint8_t i;
	if (rc < 0) {
     b7a:	2800      	cmp	r0, #0
     b7c:	db1c      	blt.n	bb8 <usb_d_init+0x44>
		return rc;
	}
	memset(usb_d_inst.ep, 0x00, sizeof(struct usb_d_ep) * CONF_USB_D_NUM_EP_SP);
     b7e:	4c10      	ldr	r4, [pc, #64]	; (bc0 <usb_d_init+0x4c>)
     b80:	2280      	movs	r2, #128	; 0x80
     b82:	2100      	movs	r1, #0
     b84:	4620      	mov	r0, r4
     b86:	4b0f      	ldr	r3, [pc, #60]	; (bc4 <usb_d_init+0x50>)
     b88:	4798      	blx	r3
     b8a:	4623      	mov	r3, r4
     b8c:	f104 0080 	add.w	r0, r4, #128	; 0x80
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
     b90:	21ff      	movs	r1, #255	; 0xff
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
     b92:	4a0d      	ldr	r2, [pc, #52]	; (bc8 <usb_d_init+0x54>)
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
     b94:	7059      	strb	r1, [r3, #1]
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
     b96:	615a      	str	r2, [r3, #20]
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
     b98:	619a      	str	r2, [r3, #24]
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
     b9a:	61da      	str	r2, [r3, #28]
     b9c:	3320      	adds	r3, #32
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
     b9e:	4283      	cmp	r3, r0
     ba0:	d1f8      	bne.n	b94 <usb_d_init+0x20>
	}
	/* Handles device driver endpoint callbacks to build transfer. */
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_SETUP, (FUNC_PTR)usb_d_cb_trans_setup);
     ba2:	490a      	ldr	r1, [pc, #40]	; (bcc <usb_d_init+0x58>)
     ba4:	2000      	movs	r0, #0
     ba6:	4c0a      	ldr	r4, [pc, #40]	; (bd0 <usb_d_init+0x5c>)
     ba8:	47a0      	blx	r4
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_MORE, (FUNC_PTR)usb_d_cb_trans_more);
     baa:	490a      	ldr	r1, [pc, #40]	; (bd4 <usb_d_init+0x60>)
     bac:	2001      	movs	r0, #1
     bae:	47a0      	blx	r4
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_DONE, (FUNC_PTR)_usb_d_cb_trans_done);
     bb0:	4909      	ldr	r1, [pc, #36]	; (bd8 <usb_d_init+0x64>)
     bb2:	2002      	movs	r0, #2
     bb4:	47a0      	blx	r4
	return ERR_NONE;
     bb6:	2000      	movs	r0, #0
}
     bb8:	bd10      	pop	{r4, pc}
     bba:	bf00      	nop
     bbc:	00001ea5 	.word	0x00001ea5
     bc0:	2000052c 	.word	0x2000052c
     bc4:	000035dd 	.word	0x000035dd
     bc8:	00000965 	.word	0x00000965
     bcc:	00000aed 	.word	0x00000aed
     bd0:	0000285d 	.word	0x0000285d
     bd4:	00000969 	.word	0x00000969
     bd8:	0000099d 	.word	0x0000099d

00000bdc <usb_d_register_callback>:
{
	_usb_d_dev_deinit();
}

void usb_d_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
     bdc:	b508      	push	{r3, lr}
	/* Directly uses device driver callback. */
	_usb_d_dev_register_callback(type, func);
     bde:	4b01      	ldr	r3, [pc, #4]	; (be4 <usb_d_register_callback+0x8>)
     be0:	4798      	blx	r3
     be2:	bd08      	pop	{r3, pc}
     be4:	00002839 	.word	0x00002839

00000be8 <usb_d_enable>:
}

int32_t usb_d_enable(void)
{
     be8:	b508      	push	{r3, lr}
	return _usb_d_dev_enable();
     bea:	4b01      	ldr	r3, [pc, #4]	; (bf0 <usb_d_enable+0x8>)
     bec:	4798      	blx	r3
}
     bee:	bd08      	pop	{r3, pc}
     bf0:	00001fa1 	.word	0x00001fa1

00000bf4 <usb_d_attach>:
{
	_usb_d_dev_disable();
}

void usb_d_attach(void)
{
     bf4:	b508      	push	{r3, lr}
	_usb_d_dev_attach();
     bf6:	4b01      	ldr	r3, [pc, #4]	; (bfc <usb_d_attach+0x8>)
     bf8:	4798      	blx	r3
     bfa:	bd08      	pop	{r3, pc}
     bfc:	0000200d 	.word	0x0000200d

00000c00 <usb_d_set_address>:
{
	return _usb_d_dev_get_uframe_n();
}

void usb_d_set_address(const uint8_t addr)
{
     c00:	b508      	push	{r3, lr}
	_usb_d_dev_set_address(addr);
     c02:	4b01      	ldr	r3, [pc, #4]	; (c08 <usb_d_set_address+0x8>)
     c04:	4798      	blx	r3
     c06:	bd08      	pop	{r3, pc}
     c08:	0000201f 	.word	0x0000201f

00000c0c <usb_d_ep_init>:
{
	return usb_d_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_size);
}

int32_t usb_d_ep_init(const uint8_t ep, const uint8_t attr, const uint16_t max_pkt_size)
{
     c0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     c0e:	4606      	mov	r6, r0
     c10:	460c      	mov	r4, r1
     c12:	4617      	mov	r7, r2
	int32_t          rc;
	int8_t           ep_index = _usb_d_find_ep(ep);
     c14:	4b0f      	ldr	r3, [pc, #60]	; (c54 <usb_d_ep_init+0x48>)
     c16:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ep_index >= 0) {
     c18:	2800      	cmp	r0, #0
     c1a:	da14      	bge.n	c46 <usb_d_ep_init+0x3a>
		return -USB_ERR_REDO;
	} else {
		ep_index = _usb_d_find_ep(0xFF);
     c1c:	20ff      	movs	r0, #255	; 0xff
     c1e:	4b0d      	ldr	r3, [pc, #52]	; (c54 <usb_d_ep_init+0x48>)
     c20:	4798      	blx	r3
		if (ep_index < 0) {
     c22:	1e05      	subs	r5, r0, #0
     c24:	db12      	blt.n	c4c <usb_d_ep_init+0x40>
			return -USB_ERR_ALLOC_FAIL;
		}
		ept = &usb_d_inst.ep[ep_index];
	}
	rc = _usb_d_dev_ep_init(ep, attr, max_pkt_size);
     c26:	463a      	mov	r2, r7
     c28:	4621      	mov	r1, r4
     c2a:	4630      	mov	r0, r6
     c2c:	4b0a      	ldr	r3, [pc, #40]	; (c58 <usb_d_ep_init+0x4c>)
     c2e:	4798      	blx	r3
	if (rc < 0) {
     c30:	2800      	cmp	r0, #0
     c32:	db0d      	blt.n	c50 <usb_d_ep_init+0x44>
		return rc;
	}
	ept->xfer.hdr.ep   = ep;
     c34:	4b09      	ldr	r3, [pc, #36]	; (c5c <usb_d_ep_init+0x50>)
     c36:	0168      	lsls	r0, r5, #5
     c38:	181a      	adds	r2, r3, r0
     c3a:	7056      	strb	r6, [r2, #1]
	ept->xfer.hdr.type = attr & USB_EP_XTYPE_MASK;
     c3c:	f004 0403 	and.w	r4, r4, #3
     c40:	541c      	strb	r4, [r3, r0]
	return ERR_NONE;
     c42:	2000      	movs	r0, #0
     c44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -USB_ERR_REDO;
     c46:	f06f 0013 	mvn.w	r0, #19
     c4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return -USB_ERR_ALLOC_FAIL;
     c4c:	f06f 0014 	mvn.w	r0, #20
}
     c50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     c52:	bf00      	nop
     c54:	00000921 	.word	0x00000921
     c58:	0000202d 	.word	0x0000202d
     c5c:	2000052c 	.word	0x2000052c

00000c60 <usb_d_ep0_init>:
{
     c60:	b508      	push	{r3, lr}
	return usb_d_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_size);
     c62:	4602      	mov	r2, r0
     c64:	2100      	movs	r1, #0
     c66:	4608      	mov	r0, r1
     c68:	4b01      	ldr	r3, [pc, #4]	; (c70 <usb_d_ep0_init+0x10>)
     c6a:	4798      	blx	r3
}
     c6c:	bd08      	pop	{r3, pc}
     c6e:	bf00      	nop
     c70:	00000c0d 	.word	0x00000c0d

00000c74 <usb_d_ep_deinit>:

void usb_d_ep_deinit(const uint8_t ep)
{
     c74:	b538      	push	{r3, r4, r5, lr}
     c76:	4605      	mov	r5, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
     c78:	4b06      	ldr	r3, [pc, #24]	; (c94 <usb_d_ep_deinit+0x20>)
     c7a:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ep_index < 0) {
     c7c:	1e04      	subs	r4, r0, #0
     c7e:	db07      	blt.n	c90 <usb_d_ep_deinit+0x1c>
		return;
	}
	_usb_d_dev_ep_deinit(ep);
     c80:	4628      	mov	r0, r5
     c82:	4b05      	ldr	r3, [pc, #20]	; (c98 <usb_d_ep_deinit+0x24>)
     c84:	4798      	blx	r3
	ept->xfer.hdr.ep = 0xFF;
     c86:	4805      	ldr	r0, [pc, #20]	; (c9c <usb_d_ep_deinit+0x28>)
     c88:	eb00 1044 	add.w	r0, r0, r4, lsl #5
     c8c:	23ff      	movs	r3, #255	; 0xff
     c8e:	7043      	strb	r3, [r0, #1]
     c90:	bd38      	pop	{r3, r4, r5, pc}
     c92:	bf00      	nop
     c94:	00000921 	.word	0x00000921
     c98:	00002145 	.word	0x00002145
     c9c:	2000052c 	.word	0x2000052c

00000ca0 <usb_d_ep_enable>:
}

int32_t usb_d_ep_enable(const uint8_t ep)
{
     ca0:	b538      	push	{r3, r4, r5, lr}
     ca2:	4605      	mov	r5, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
     ca4:	4b0e      	ldr	r3, [pc, #56]	; (ce0 <usb_d_ep_enable+0x40>)
     ca6:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	int32_t          rc;
	if (ep_index < 0) {
     ca8:	1e04      	subs	r4, r0, #0
     caa:	db16      	blt.n	cda <usb_d_ep_enable+0x3a>
		return -USB_ERR_PARAM;
	}
	ept->xfer.hdr.state = (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) ? USB_EP_S_X_SETUP : USB_EP_S_IDLE;
     cac:	0163      	lsls	r3, r4, #5
     cae:	4a0d      	ldr	r2, [pc, #52]	; (ce4 <usb_d_ep_enable+0x44>)
     cb0:	5cd3      	ldrb	r3, [r2, r3]
     cb2:	2b00      	cmp	r3, #0
     cb4:	bf0c      	ite	eq
     cb6:	2202      	moveq	r2, #2
     cb8:	2201      	movne	r2, #1
     cba:	4b0a      	ldr	r3, [pc, #40]	; (ce4 <usb_d_ep_enable+0x44>)
     cbc:	eb03 1344 	add.w	r3, r3, r4, lsl #5
     cc0:	709a      	strb	r2, [r3, #2]
	rc                  = _usb_d_dev_ep_enable(ep);
     cc2:	4628      	mov	r0, r5
     cc4:	4b08      	ldr	r3, [pc, #32]	; (ce8 <usb_d_ep_enable+0x48>)
     cc6:	4798      	blx	r3
	if (rc < 0) {
     cc8:	2800      	cmp	r0, #0
     cca:	db00      	blt.n	cce <usb_d_ep_enable+0x2e>
		ept->xfer.hdr.state = USB_EP_S_DISABLED;
	}
	return rc;
}
     ccc:	bd38      	pop	{r3, r4, r5, pc}
		ept->xfer.hdr.state = USB_EP_S_DISABLED;
     cce:	4b05      	ldr	r3, [pc, #20]	; (ce4 <usb_d_ep_enable+0x44>)
     cd0:	eb03 1444 	add.w	r4, r3, r4, lsl #5
     cd4:	2300      	movs	r3, #0
     cd6:	70a3      	strb	r3, [r4, #2]
     cd8:	bd38      	pop	{r3, r4, r5, pc}
		return -USB_ERR_PARAM;
     cda:	f06f 0011 	mvn.w	r0, #17
     cde:	e7f5      	b.n	ccc <usb_d_ep_enable+0x2c>
     ce0:	00000921 	.word	0x00000921
     ce4:	2000052c 	.word	0x2000052c
     ce8:	00002209 	.word	0x00002209

00000cec <usb_d_ep_transfer>:
	}
	return usb_d_inst.ep[ep_index].xfer.req;
}

int32_t usb_d_ep_transfer(const struct usb_d_transfer *xfer)
{
     cec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     cf0:	b086      	sub	sp, #24
     cf2:	4604      	mov	r4, r0
	int8_t                ep_index = _usb_d_find_ep(xfer->ep);
     cf4:	7a07      	ldrb	r7, [r0, #8]
     cf6:	4638      	mov	r0, r7
     cf8:	4b3f      	ldr	r3, [pc, #252]	; (df8 <usb_d_ep_transfer+0x10c>)
     cfa:	4798      	blx	r3
	struct usb_d_ep *     ept      = &usb_d_inst.ep[ep_index];
	bool                  dir = USB_EP_GET_DIR(xfer->ep), zlp = xfer->zlp;
     cfc:	7a65      	ldrb	r5, [r4, #9]
	uint32_t              len = xfer->size;
     cfe:	f8d4 8004 	ldr.w	r8, [r4, #4]
	int32_t               rc;
	volatile uint8_t      state;
	volatile hal_atomic_t flags;

	if (ep_index < 0) {
     d02:	1e06      	subs	r6, r0, #0
     d04:	db72      	blt.n	dec <usb_d_ep_transfer+0x100>
		return -USB_ERR_PARAM;
	}

	atomic_enter_critical(&flags);
     d06:	a804      	add	r0, sp, #16
     d08:	4b3c      	ldr	r3, [pc, #240]	; (dfc <usb_d_ep_transfer+0x110>)
     d0a:	4798      	blx	r3
	state = ept->xfer.hdr.state;
     d0c:	4b3c      	ldr	r3, [pc, #240]	; (e00 <usb_d_ep_transfer+0x114>)
     d0e:	eb03 1346 	add.w	r3, r3, r6, lsl #5
     d12:	789b      	ldrb	r3, [r3, #2]
     d14:	f88d 3017 	strb.w	r3, [sp, #23]
	if (state == USB_EP_S_IDLE) {
     d18:	f89d 3017 	ldrb.w	r3, [sp, #23]
     d1c:	b2db      	uxtb	r3, r3
     d1e:	2b01      	cmp	r3, #1
     d20:	d011      	beq.n	d46 <usb_d_ep_transfer+0x5a>
		ept->xfer.hdr.state = USB_EP_S_X_DATA;
		atomic_leave_critical(&flags);
	} else {
		atomic_leave_critical(&flags);
     d22:	a804      	add	r0, sp, #16
     d24:	4b37      	ldr	r3, [pc, #220]	; (e04 <usb_d_ep_transfer+0x118>)
     d26:	4798      	blx	r3
		switch (state) {
     d28:	f89d 3017 	ldrb.w	r3, [sp, #23]
     d2c:	b2db      	uxtb	r3, r3
     d2e:	2b05      	cmp	r3, #5
     d30:	d05f      	beq.n	df2 <usb_d_ep_transfer+0x106>
     d32:	2b06      	cmp	r3, #6
     d34:	d023      	beq.n	d7e <usb_d_ep_transfer+0x92>
		case USB_EP_S_ERROR:
			return -USB_ERROR;
		case USB_EP_S_DISABLED:
			return -USB_ERR_FUNC;
		default: /* USB_EP_S_X_xxxx  */
			return USB_BUSY;
     d36:	2b00      	cmp	r3, #0
     d38:	bf0c      	ite	eq
     d3a:	f06f 0012 	mvneq.w	r0, #18
     d3e:	2001      	movne	r0, #1
		}
	}

	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
	return rc;
}
     d40:	b006      	add	sp, #24
     d42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		ept->xfer.hdr.state = USB_EP_S_X_DATA;
     d46:	f8df a0b8 	ldr.w	sl, [pc, #184]	; e00 <usb_d_ep_transfer+0x114>
     d4a:	ea4f 1946 	mov.w	r9, r6, lsl #5
     d4e:	eb0a 0309 	add.w	r3, sl, r9
     d52:	2203      	movs	r2, #3
     d54:	709a      	strb	r2, [r3, #2]
		atomic_leave_critical(&flags);
     d56:	a804      	add	r0, sp, #16
     d58:	4b2a      	ldr	r3, [pc, #168]	; (e04 <usb_d_ep_transfer+0x118>)
     d5a:	4798      	blx	r3
	if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
     d5c:	f81a 3009 	ldrb.w	r3, [sl, r9]
     d60:	b183      	cbz	r3, d84 <usb_d_ep_transfer+0x98>
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
     d62:	7a22      	ldrb	r2, [r4, #8]
     d64:	3500      	adds	r5, #0
     d66:	bf18      	it	ne
     d68:	2501      	movne	r5, #1
	struct usb_d_transfer trans
     d6a:	6823      	ldr	r3, [r4, #0]
     d6c:	9301      	str	r3, [sp, #4]
     d6e:	f8cd 8008 	str.w	r8, [sp, #8]
     d72:	f017 0f80 	tst.w	r7, #128	; 0x80
     d76:	d119      	bne.n	dac <usb_d_ep_transfer+0xc0>
     d78:	f002 030f 	and.w	r3, r2, #15
     d7c:	e018      	b.n	db0 <usb_d_ep_transfer+0xc4>
			return -USB_ERROR;
     d7e:	f06f 000f 	mvn.w	r0, #15
     d82:	e7dd      	b.n	d40 <usb_d_ep_transfer+0x54>
		uint16_t req_len = USB_GET_wLength(ept->xfer.req);
     d84:	4b1e      	ldr	r3, [pc, #120]	; (e00 <usb_d_ep_transfer+0x114>)
     d86:	eb03 1346 	add.w	r3, r3, r6, lsl #5
     d8a:	7cda      	ldrb	r2, [r3, #19]
     d8c:	7c9d      	ldrb	r5, [r3, #18]
     d8e:	eb05 2502 	add.w	r5, r5, r2, lsl #8
     d92:	b2ad      	uxth	r5, r5
		if (req_len == 0) {
     d94:	b9a5      	cbnz	r5, dc0 <usb_d_ep_transfer+0xd4>
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
     d96:	4b1a      	ldr	r3, [pc, #104]	; (e00 <usb_d_ep_transfer+0x114>)
     d98:	eb03 1646 	add.w	r6, r3, r6, lsl #5
     d9c:	2304      	movs	r3, #4
     d9e:	70b3      	strb	r3, [r6, #2]
			len                 = 0;
     da0:	2300      	movs	r3, #0
			zlp                 = true;
     da2:	2501      	movs	r5, #1
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
     da4:	7a22      	ldrb	r2, [r4, #8]
	struct usb_d_transfer trans
     da6:	6821      	ldr	r1, [r4, #0]
     da8:	9101      	str	r1, [sp, #4]
     daa:	9302      	str	r3, [sp, #8]
     dac:	f042 0380 	orr.w	r3, r2, #128	; 0x80
     db0:	f88d 300c 	strb.w	r3, [sp, #12]
     db4:	f88d 500d 	strb.w	r5, [sp, #13]
	return _usb_d_dev_ep_trans(&trans);
     db8:	a801      	add	r0, sp, #4
     dba:	4b13      	ldr	r3, [pc, #76]	; (e08 <usb_d_ep_transfer+0x11c>)
     dbc:	4798      	blx	r3
	return rc;
     dbe:	e7bf      	b.n	d40 <usb_d_ep_transfer+0x54>
     dc0:	4643      	mov	r3, r8
     dc2:	45a8      	cmp	r8, r5
     dc4:	bf28      	it	cs
     dc6:	462b      	movcs	r3, r5
			dir = (USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN);
     dc8:	4a0d      	ldr	r2, [pc, #52]	; (e00 <usb_d_ep_transfer+0x114>)
     dca:	eb02 1646 	add.w	r6, r2, r6, lsl #5
			if (dir) {
     dce:	f996 200c 	ldrsb.w	r2, [r6, #12]
     dd2:	2a00      	cmp	r2, #0
     dd4:	db05      	blt.n	de2 <usb_d_ep_transfer+0xf6>
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
     dd6:	7a22      	ldrb	r2, [r4, #8]
	struct usb_d_transfer trans
     dd8:	6821      	ldr	r1, [r4, #0]
     dda:	9101      	str	r1, [sp, #4]
     ddc:	9302      	str	r3, [sp, #8]
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
     dde:	2500      	movs	r5, #0
     de0:	e7ca      	b.n	d78 <usb_d_ep_transfer+0x8c>
				zlp = (req_len > len);
     de2:	429d      	cmp	r5, r3
     de4:	bf94      	ite	ls
     de6:	2500      	movls	r5, #0
     de8:	2501      	movhi	r5, #1
     dea:	e7db      	b.n	da4 <usb_d_ep_transfer+0xb8>
		return -USB_ERR_PARAM;
     dec:	f06f 0011 	mvn.w	r0, #17
     df0:	e7a6      	b.n	d40 <usb_d_ep_transfer+0x54>
			return USB_HALTED;
     df2:	2002      	movs	r0, #2
     df4:	e7a4      	b.n	d40 <usb_d_ep_transfer+0x54>
     df6:	bf00      	nop
     df8:	00000921 	.word	0x00000921
     dfc:	000033dd 	.word	0x000033dd
     e00:	2000052c 	.word	0x2000052c
     e04:	000033eb 	.word	0x000033eb
     e08:	00002659 	.word	0x00002659

00000e0c <usb_d_ep_halt>:
	}
	return ERR_NONE;
}

int32_t usb_d_ep_halt(const uint8_t ep, const enum usb_ep_halt_ctrl ctrl)
{
     e0c:	b538      	push	{r3, r4, r5, lr}
     e0e:	4604      	mov	r4, r0
	if (ctrl == USB_EP_HALT_CLR) {
     e10:	b141      	cbz	r1, e24 <usb_d_ep_halt+0x18>
		return _usb_d_ep_halt_clr(ep);
	} else if (ctrl == USB_EP_HALT_SET) {
     e12:	2901      	cmp	r1, #1
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
     e14:	bf0c      	ite	eq
     e16:	2101      	moveq	r1, #1
	} else {
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_GET);
     e18:	2102      	movne	r1, #2
     e1a:	4b13      	ldr	r3, [pc, #76]	; (e68 <usb_d_ep_halt+0x5c>)
     e1c:	4798      	blx	r3
     e1e:	4603      	mov	r3, r0
	}
}
     e20:	4618      	mov	r0, r3
     e22:	bd38      	pop	{r3, r4, r5, pc}
	int8_t           ep_index = _usb_d_find_ep(ep);
     e24:	4b11      	ldr	r3, [pc, #68]	; (e6c <usb_d_ep_halt+0x60>)
     e26:	4798      	blx	r3
	if (ep_index < 0) {
     e28:	1e05      	subs	r5, r0, #0
     e2a:	db19      	blt.n	e60 <usb_d_ep_halt+0x54>
	if (_usb_d_dev_ep_stall(ep, USB_EP_STALL_GET)) {
     e2c:	2102      	movs	r1, #2
     e2e:	4620      	mov	r0, r4
     e30:	4b0d      	ldr	r3, [pc, #52]	; (e68 <usb_d_ep_halt+0x5c>)
     e32:	4798      	blx	r3
     e34:	4603      	mov	r3, r0
     e36:	2800      	cmp	r0, #0
     e38:	d0f2      	beq.n	e20 <usb_d_ep_halt+0x14>
		rc = _usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
     e3a:	2100      	movs	r1, #0
     e3c:	4620      	mov	r0, r4
     e3e:	4b0a      	ldr	r3, [pc, #40]	; (e68 <usb_d_ep_halt+0x5c>)
     e40:	4798      	blx	r3
		if (rc < 0) {
     e42:	1e03      	subs	r3, r0, #0
     e44:	dbec      	blt.n	e20 <usb_d_ep_halt+0x14>
		ept->xfer.hdr.state  = USB_EP_S_IDLE;
     e46:	4b0a      	ldr	r3, [pc, #40]	; (e70 <usb_d_ep_halt+0x64>)
     e48:	eb03 1345 	add.w	r3, r3, r5, lsl #5
     e4c:	2201      	movs	r2, #1
     e4e:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_UNHALT;
     e50:	2103      	movs	r1, #3
     e52:	70d9      	strb	r1, [r3, #3]
		ept->callbacks.xfer(ep, USB_XFER_UNHALT, NULL);
     e54:	69db      	ldr	r3, [r3, #28]
     e56:	2200      	movs	r2, #0
     e58:	4620      	mov	r0, r4
     e5a:	4798      	blx	r3
	return ERR_NONE;
     e5c:	2300      	movs	r3, #0
     e5e:	e7df      	b.n	e20 <usb_d_ep_halt+0x14>
		return -USB_ERR_PARAM;
     e60:	f06f 0311 	mvn.w	r3, #17
     e64:	e7dc      	b.n	e20 <usb_d_ep_halt+0x14>
     e66:	bf00      	nop
     e68:	000024b1 	.word	0x000024b1
     e6c:	00000921 	.word	0x00000921
     e70:	2000052c 	.word	0x2000052c

00000e74 <usb_d_ep_register_callback>:

void usb_d_ep_register_callback(const uint8_t ep, const enum usb_d_ep_cb_type type, const FUNC_PTR func)
{
     e74:	b538      	push	{r3, r4, r5, lr}
     e76:	460d      	mov	r5, r1
     e78:	4614      	mov	r4, r2
	int8_t           ep_index = _usb_d_find_ep(ep);
     e7a:	4b0e      	ldr	r3, [pc, #56]	; (eb4 <usb_d_ep_register_callback+0x40>)
     e7c:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	FUNC_PTR         f        = func ? (FUNC_PTR)func : (FUNC_PTR)usb_d_dummy_cb_false;
     e7e:	4b0e      	ldr	r3, [pc, #56]	; (eb8 <usb_d_ep_register_callback+0x44>)
     e80:	2c00      	cmp	r4, #0
     e82:	bf08      	it	eq
     e84:	461c      	moveq	r4, r3
	if (ep_index < 0) {
     e86:	2800      	cmp	r0, #0
     e88:	db13      	blt.n	eb2 <usb_d_ep_register_callback+0x3e>
		return;
	}
	switch (type) {
     e8a:	2d01      	cmp	r5, #1
     e8c:	d008      	beq.n	ea0 <usb_d_ep_register_callback+0x2c>
     e8e:	b115      	cbz	r5, e96 <usb_d_ep_register_callback+0x22>
     e90:	2d02      	cmp	r5, #2
     e92:	d00a      	beq.n	eaa <usb_d_ep_register_callback+0x36>
     e94:	bd38      	pop	{r3, r4, r5, pc}
	case USB_D_EP_CB_SETUP:
		ept->callbacks.req = (usb_d_ep_cb_setup_t)f;
     e96:	4b09      	ldr	r3, [pc, #36]	; (ebc <usb_d_ep_register_callback+0x48>)
     e98:	eb03 1040 	add.w	r0, r3, r0, lsl #5
     e9c:	6144      	str	r4, [r0, #20]
		break;
     e9e:	bd38      	pop	{r3, r4, r5, pc}
	case USB_D_EP_CB_MORE:
		ept->callbacks.more = (usb_d_ep_cb_more_t)f;
     ea0:	4b06      	ldr	r3, [pc, #24]	; (ebc <usb_d_ep_register_callback+0x48>)
     ea2:	eb03 1040 	add.w	r0, r3, r0, lsl #5
     ea6:	6184      	str	r4, [r0, #24]
		break;
     ea8:	bd38      	pop	{r3, r4, r5, pc}
	case USB_D_EP_CB_XFER:
		ept->callbacks.xfer = (usb_d_ep_cb_xfer_t)f;
     eaa:	4b04      	ldr	r3, [pc, #16]	; (ebc <usb_d_ep_register_callback+0x48>)
     eac:	eb03 1040 	add.w	r0, r3, r0, lsl #5
     eb0:	61c4      	str	r4, [r0, #28]
     eb2:	bd38      	pop	{r3, r4, r5, pc}
     eb4:	00000921 	.word	0x00000921
     eb8:	00000965 	.word	0x00000965
     ebc:	2000052c 	.word	0x2000052c

00000ec0 <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
     ec0:	b900      	cbnz	r0, ec4 <assert+0x4>
		__asm("BKPT #0");
     ec2:	be00      	bkpt	0x0000
     ec4:	4770      	bx	lr
	...

00000ec8 <_adc_init>:
	};
}

static inline bool hri_adc_is_syncing(const void *const hw, hri_adc_syncbusy_reg_t reg)
{
	return ((Adc *)hw)->SYNCBUSY.reg & reg;
     ec8:	6b03      	ldr	r3, [r0, #48]	; 0x30
 * \param[in] i The number of hardware instance
 */
static int32_t _adc_init(void *const hw, const uint8_t i)
{

	if (!hri_adc_is_syncing(hw, ADC_SYNCBUSY_SWRST)) {
     eca:	f013 0f01 	tst.w	r3, #1
     ece:	d11b      	bne.n	f08 <_adc_init+0x40>
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
     ed0:	6b03      	ldr	r3, [r0, #48]	; 0x30
     ed2:	f013 0f03 	tst.w	r3, #3
     ed6:	d1fb      	bne.n	ed0 <_adc_init+0x8>

static inline hri_adc_ctrla_reg_t hri_adc_get_CTRLA_reg(const void *const hw, hri_adc_ctrla_reg_t mask)
{
	uint16_t tmp;
	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_SWRST | ADC_SYNCBUSY_ENABLE);
	tmp = ((Adc *)hw)->CTRLA.reg;
     ed8:	8803      	ldrh	r3, [r0, #0]
		if (hri_adc_get_CTRLA_reg(hw, ADC_CTRLA_ENABLE)) {
     eda:	f013 0f02 	tst.w	r3, #2
     ede:	d00d      	beq.n	efc <_adc_init+0x34>
	((Adc *)hw)->CTRLA.reg &= ~ADC_CTRLA_ENABLE;
     ee0:	8803      	ldrh	r3, [r0, #0]
     ee2:	f023 0302 	bic.w	r3, r3, #2
     ee6:	041b      	lsls	r3, r3, #16
     ee8:	0c1b      	lsrs	r3, r3, #16
     eea:	8003      	strh	r3, [r0, #0]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
     eec:	6b03      	ldr	r3, [r0, #48]	; 0x30
     eee:	f013 0f03 	tst.w	r3, #3
     ef2:	d1fb      	bne.n	eec <_adc_init+0x24>
     ef4:	6b03      	ldr	r3, [r0, #48]	; 0x30
     ef6:	f013 0f02 	tst.w	r3, #2
     efa:	d1fb      	bne.n	ef4 <_adc_init+0x2c>
}

static inline void hri_adc_write_CTRLA_reg(const void *const hw, hri_adc_ctrla_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->CTRLA.reg = data;
     efc:	2301      	movs	r3, #1
     efe:	8003      	strh	r3, [r0, #0]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
     f00:	6b03      	ldr	r3, [r0, #48]	; 0x30
     f02:	f013 0f03 	tst.w	r3, #3
     f06:	d1fb      	bne.n	f00 <_adc_init+0x38>
     f08:	6b03      	ldr	r3, [r0, #48]	; 0x30
     f0a:	f013 0f01 	tst.w	r3, #1
     f0e:	d1fb      	bne.n	f08 <_adc_init+0x40>
		}
		hri_adc_write_CTRLA_reg(hw, ADC_CTRLA_SWRST);
	}
	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_SWRST);

	hri_adc_write_CTRLB_reg(hw, _adcs[i].ctrl_b);
     f10:	2316      	movs	r3, #22
     f12:	4a37      	ldr	r2, [pc, #220]	; (ff0 <_adc_init+0x128>)
     f14:	fb03 2301 	mla	r3, r3, r1, r2
     f18:	889b      	ldrh	r3, [r3, #4]
}

static inline void hri_adc_write_CTRLB_reg(const void *const hw, hri_adc_ctrlb_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->CTRLB.reg = data;
     f1a:	80c3      	strh	r3, [r0, #6]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
     f1c:	6b03      	ldr	r3, [r0, #48]	; 0x30
     f1e:	f3c3 030b 	ubfx	r3, r3, #0, #12
     f22:	2b00      	cmp	r3, #0
     f24:	d1fa      	bne.n	f1c <_adc_init+0x54>
	hri_adc_write_REFCTRL_reg(hw, _adcs[i].ref_ctrl);
     f26:	2316      	movs	r3, #22
     f28:	4a31      	ldr	r2, [pc, #196]	; (ff0 <_adc_init+0x128>)
     f2a:	fb03 2301 	mla	r3, r3, r1, r2
     f2e:	799b      	ldrb	r3, [r3, #6]
}

static inline void hri_adc_write_REFCTRL_reg(const void *const hw, hri_adc_refctrl_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->REFCTRL.reg = data;
     f30:	7203      	strb	r3, [r0, #8]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
     f32:	6b03      	ldr	r3, [r0, #48]	; 0x30
     f34:	f3c3 030b 	ubfx	r3, r3, #0, #12
     f38:	2b00      	cmp	r3, #0
     f3a:	d1fa      	bne.n	f32 <_adc_init+0x6a>
	hri_adc_write_EVCTRL_reg(hw, _adcs[i].ev_ctrl);
     f3c:	2316      	movs	r3, #22
     f3e:	4a2c      	ldr	r2, [pc, #176]	; (ff0 <_adc_init+0x128>)
     f40:	fb03 2301 	mla	r3, r3, r1, r2
     f44:	79da      	ldrb	r2, [r3, #7]
	((Adc *)hw)->EVCTRL.reg = data;
     f46:	7082      	strb	r2, [r0, #2]
	hri_adc_write_INPUTCTRL_reg(hw, _adcs[i].input_ctrl);
     f48:	891b      	ldrh	r3, [r3, #8]
	((Adc *)hw)->INPUTCTRL.reg = data;
     f4a:	8083      	strh	r3, [r0, #4]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
     f4c:	6b03      	ldr	r3, [r0, #48]	; 0x30
     f4e:	f3c3 030b 	ubfx	r3, r3, #0, #12
     f52:	2b00      	cmp	r3, #0
     f54:	d1fa      	bne.n	f4c <_adc_init+0x84>
	hri_adc_write_AVGCTRL_reg(hw, _adcs[i].avg_ctrl);
     f56:	2316      	movs	r3, #22
     f58:	4a25      	ldr	r2, [pc, #148]	; (ff0 <_adc_init+0x128>)
     f5a:	fb03 2301 	mla	r3, r3, r1, r2
     f5e:	7a9b      	ldrb	r3, [r3, #10]
}

static inline void hri_adc_write_AVGCTRL_reg(const void *const hw, hri_adc_avgctrl_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->AVGCTRL.reg = data;
     f60:	7283      	strb	r3, [r0, #10]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
     f62:	6b03      	ldr	r3, [r0, #48]	; 0x30
     f64:	f3c3 030b 	ubfx	r3, r3, #0, #12
     f68:	2b00      	cmp	r3, #0
     f6a:	d1fa      	bne.n	f62 <_adc_init+0x9a>
	hri_adc_write_SAMPCTRL_reg(hw, _adcs[i].samp_ctrl);
     f6c:	2316      	movs	r3, #22
     f6e:	4a20      	ldr	r2, [pc, #128]	; (ff0 <_adc_init+0x128>)
     f70:	fb03 2301 	mla	r3, r3, r1, r2
     f74:	7adb      	ldrb	r3, [r3, #11]
}

static inline void hri_adc_write_SAMPCTRL_reg(const void *const hw, hri_adc_sampctrl_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->SAMPCTRL.reg = data;
     f76:	72c3      	strb	r3, [r0, #11]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
     f78:	6b03      	ldr	r3, [r0, #48]	; 0x30
     f7a:	f3c3 030b 	ubfx	r3, r3, #0, #12
     f7e:	2b00      	cmp	r3, #0
     f80:	d1fa      	bne.n	f78 <_adc_init+0xb0>
	hri_adc_write_WINLT_reg(hw, _adcs[i].win_lt);
     f82:	2316      	movs	r3, #22
     f84:	4a1a      	ldr	r2, [pc, #104]	; (ff0 <_adc_init+0x128>)
     f86:	fb03 2301 	mla	r3, r3, r1, r2
     f8a:	899b      	ldrh	r3, [r3, #12]
}

static inline void hri_adc_write_WINLT_reg(const void *const hw, hri_adc_winlt_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->WINLT.reg = data;
     f8c:	8183      	strh	r3, [r0, #12]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
     f8e:	6b03      	ldr	r3, [r0, #48]	; 0x30
     f90:	f013 0f80 	tst.w	r3, #128	; 0x80
     f94:	d1fb      	bne.n	f8e <_adc_init+0xc6>
	hri_adc_write_WINUT_reg(hw, _adcs[i].win_ut);
     f96:	2316      	movs	r3, #22
     f98:	4a15      	ldr	r2, [pc, #84]	; (ff0 <_adc_init+0x128>)
     f9a:	fb03 2301 	mla	r3, r3, r1, r2
     f9e:	89db      	ldrh	r3, [r3, #14]
}

static inline void hri_adc_write_WINUT_reg(const void *const hw, hri_adc_winut_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->WINUT.reg = data;
     fa0:	81c3      	strh	r3, [r0, #14]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
     fa2:	6b03      	ldr	r3, [r0, #48]	; 0x30
     fa4:	f413 7f80 	tst.w	r3, #256	; 0x100
     fa8:	d1fb      	bne.n	fa2 <_adc_init+0xda>
	hri_adc_write_GAINCORR_reg(hw, _adcs[i].gain_corr);
     faa:	2316      	movs	r3, #22
     fac:	4a10      	ldr	r2, [pc, #64]	; (ff0 <_adc_init+0x128>)
     fae:	fb03 2301 	mla	r3, r3, r1, r2
     fb2:	8a1b      	ldrh	r3, [r3, #16]
}

static inline void hri_adc_write_GAINCORR_reg(const void *const hw, hri_adc_gaincorr_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->GAINCORR.reg = data;
     fb4:	8203      	strh	r3, [r0, #16]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
     fb6:	6b03      	ldr	r3, [r0, #48]	; 0x30
     fb8:	f413 7f00 	tst.w	r3, #512	; 0x200
     fbc:	d1fb      	bne.n	fb6 <_adc_init+0xee>
	hri_adc_write_OFFSETCORR_reg(hw, _adcs[i].offset_corr);
     fbe:	2316      	movs	r3, #22
     fc0:	4a0b      	ldr	r2, [pc, #44]	; (ff0 <_adc_init+0x128>)
     fc2:	fb03 2301 	mla	r3, r3, r1, r2
     fc6:	8a5b      	ldrh	r3, [r3, #18]
}

static inline void hri_adc_write_OFFSETCORR_reg(const void *const hw, hri_adc_offsetcorr_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->OFFSETCORR.reg = data;
     fc8:	8243      	strh	r3, [r0, #18]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
     fca:	6b03      	ldr	r3, [r0, #48]	; 0x30
     fcc:	f413 6f80 	tst.w	r3, #1024	; 0x400
     fd0:	d1fb      	bne.n	fca <_adc_init+0x102>
	hri_adc_write_DBGCTRL_reg(hw, _adcs[i].dbg_ctrl);
     fd2:	2216      	movs	r2, #22
     fd4:	4b06      	ldr	r3, [pc, #24]	; (ff0 <_adc_init+0x128>)
     fd6:	fb02 3101 	mla	r1, r2, r1, r3
     fda:	7d0b      	ldrb	r3, [r1, #20]
	((Adc *)hw)->DBGCTRL.reg = data;
     fdc:	70c3      	strb	r3, [r0, #3]
	hri_adc_write_CTRLA_reg(hw, _adcs[i].ctrl_a);
     fde:	884b      	ldrh	r3, [r1, #2]
	((Adc *)hw)->CTRLA.reg = data;
     fe0:	8003      	strh	r3, [r0, #0]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
     fe2:	6b03      	ldr	r3, [r0, #48]	; 0x30
     fe4:	f013 0f03 	tst.w	r3, #3
     fe8:	d1fb      	bne.n	fe2 <_adc_init+0x11a>

	return ERR_NONE;
}
     fea:	2000      	movs	r0, #0
     fec:	4770      	bx	lr
     fee:	bf00      	nop
     ff0:	000037d4 	.word	0x000037d4

00000ff4 <_adc_get_regs>:
	return ((uint32_t)hw - (uint32_t)ADC0) >> 10;
     ff4:	f100 403d 	add.w	r0, r0, #3170893824	; 0xbd000000
     ff8:	f5a0 50e0 	sub.w	r0, r0, #7168	; 0x1c00
		if (_adcs[i].number == n) {
     ffc:	f3c0 2087 	ubfx	r0, r0, #10, #8
    1000:	b138      	cbz	r0, 1012 <_adc_get_regs+0x1e>
{
    1002:	b508      	push	{r3, lr}
	ASSERT(false);
    1004:	2288      	movs	r2, #136	; 0x88
    1006:	4904      	ldr	r1, [pc, #16]	; (1018 <_adc_get_regs+0x24>)
    1008:	2000      	movs	r0, #0
    100a:	4b04      	ldr	r3, [pc, #16]	; (101c <_adc_get_regs+0x28>)
    100c:	4798      	blx	r3
}
    100e:	2000      	movs	r0, #0
    1010:	bd08      	pop	{r3, pc}
    1012:	2000      	movs	r0, #0
    1014:	4770      	bx	lr
    1016:	bf00      	nop
    1018:	000037ec 	.word	0x000037ec
    101c:	00000ec1 	.word	0x00000ec1

00001020 <_adc_sync_init>:

/**
 * \brief Initialize ADC
 */
int32_t _adc_sync_init(struct _adc_sync_device *const device, void *const hw)
{
    1020:	b538      	push	{r3, r4, r5, lr}
    1022:	460c      	mov	r4, r1
	ASSERT(device);
    1024:	4605      	mov	r5, r0
    1026:	22ce      	movs	r2, #206	; 0xce
    1028:	4907      	ldr	r1, [pc, #28]	; (1048 <_adc_sync_init+0x28>)
    102a:	3000      	adds	r0, #0
    102c:	bf18      	it	ne
    102e:	2001      	movne	r0, #1
    1030:	4b06      	ldr	r3, [pc, #24]	; (104c <_adc_sync_init+0x2c>)
    1032:	4798      	blx	r3

	device->hw = hw;
    1034:	602c      	str	r4, [r5, #0]

	return _adc_init(hw, _adc_get_regs((uint32_t)hw));
    1036:	4620      	mov	r0, r4
    1038:	4b05      	ldr	r3, [pc, #20]	; (1050 <_adc_sync_init+0x30>)
    103a:	4798      	blx	r3
    103c:	4601      	mov	r1, r0
    103e:	4620      	mov	r0, r4
    1040:	4b04      	ldr	r3, [pc, #16]	; (1054 <_adc_sync_init+0x34>)
    1042:	4798      	blx	r3
}
    1044:	bd38      	pop	{r3, r4, r5, pc}
    1046:	bf00      	nop
    1048:	000037ec 	.word	0x000037ec
    104c:	00000ec1 	.word	0x00000ec1
    1050:	00000ff5 	.word	0x00000ff5
    1054:	00000ec9 	.word	0x00000ec9

00001058 <_get_cycles_for_ms>:
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
	return _get_cycles_for_ms_internal(ms, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
}
    1058:	f642 63e0 	movw	r3, #12000	; 0x2ee0
    105c:	fb03 f000 	mul.w	r0, r3, r0
    1060:	4770      	bx	lr
	...

00001064 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
    1064:	b508      	push	{r3, lr}
}

static inline void hri_nvmctrl_set_CTRLA_RWS_bf(const void *const hw, hri_nvmctrl_ctrla_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLA.reg |= NVMCTRL_CTRLA_RWS(mask);
    1066:	4a08      	ldr	r2, [pc, #32]	; (1088 <_init_chip+0x24>)
    1068:	8813      	ldrh	r3, [r2, #0]
    106a:	b29b      	uxth	r3, r3
    106c:	8013      	strh	r3, [r2, #0]
	hri_nvmctrl_set_CTRLA_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);

	_osc32kctrl_init_sources();
    106e:	4b07      	ldr	r3, [pc, #28]	; (108c <_init_chip+0x28>)
    1070:	4798      	blx	r3
	_oscctrl_init_sources();
    1072:	4b07      	ldr	r3, [pc, #28]	; (1090 <_init_chip+0x2c>)
    1074:	4798      	blx	r3
	_mclk_init();
    1076:	4b07      	ldr	r3, [pc, #28]	; (1094 <_init_chip+0x30>)
    1078:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
#endif
	_oscctrl_init_referenced_generators();
    107a:	4b07      	ldr	r3, [pc, #28]	; (1098 <_init_chip+0x34>)
    107c:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
    107e:	f640 70ff 	movw	r0, #4095	; 0xfff
    1082:	4b06      	ldr	r3, [pc, #24]	; (109c <_init_chip+0x38>)
    1084:	4798      	blx	r3
    1086:	bd08      	pop	{r3, pc}
    1088:	41004000 	.word	0x41004000
    108c:	00001109 	.word	0x00001109
    1090:	00001129 	.word	0x00001129
    1094:	000010fd 	.word	0x000010fd
    1098:	00001145 	.word	0x00001145
    109c:	000010a1 	.word	0x000010a1

000010a0 <_gclk_init_generators_by_fref>:

void _gclk_init_generators_by_fref(uint32_t bm)
{

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
    10a0:	f010 0f01 	tst.w	r0, #1
    10a4:	d008      	beq.n	10b8 <_gclk_init_generators_by_fref+0x18>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    10a6:	4a11      	ldr	r2, [pc, #68]	; (10ec <_gclk_init_generators_by_fref+0x4c>)
    10a8:	4b11      	ldr	r3, [pc, #68]	; (10f0 <_gclk_init_generators_by_fref+0x50>)
    10aa:	621a      	str	r2, [r3, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    10ac:	4619      	mov	r1, r3
    10ae:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    10b2:	684b      	ldr	r3, [r1, #4]
    10b4:	4213      	tst	r3, r2
    10b6:	d1fc      	bne.n	10b2 <_gclk_init_generators_by_fref+0x12>
		        | (CONF_GCLK_GENERATOR_2_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_2_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_3_CONFIG == 1
	if (bm & (1ul << 3)) {
    10b8:	f010 0f08 	tst.w	r0, #8
    10bc:	d008      	beq.n	10d0 <_gclk_init_generators_by_fref+0x30>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    10be:	4a0d      	ldr	r2, [pc, #52]	; (10f4 <_gclk_init_generators_by_fref+0x54>)
    10c0:	4b0b      	ldr	r3, [pc, #44]	; (10f0 <_gclk_init_generators_by_fref+0x50>)
    10c2:	62da      	str	r2, [r3, #44]	; 0x2c
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    10c4:	4619      	mov	r1, r3
    10c6:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    10ca:	684b      	ldr	r3, [r1, #4]
    10cc:	4213      	tst	r3, r2
    10ce:	d1fc      	bne.n	10ca <_gclk_init_generators_by_fref+0x2a>
		        | (CONF_GCLK_GENERATOR_3_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_3_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_4_CONFIG == 1
	if (bm & (1ul << 4)) {
    10d0:	f010 0f10 	tst.w	r0, #16
    10d4:	d008      	beq.n	10e8 <_gclk_init_generators_by_fref+0x48>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    10d6:	4a08      	ldr	r2, [pc, #32]	; (10f8 <_gclk_init_generators_by_fref+0x58>)
    10d8:	4b05      	ldr	r3, [pc, #20]	; (10f0 <_gclk_init_generators_by_fref+0x50>)
    10da:	631a      	str	r2, [r3, #48]	; 0x30
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    10dc:	4619      	mov	r1, r3
    10de:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    10e2:	684b      	ldr	r3, [r1, #4]
    10e4:	4213      	tst	r3, r2
    10e6:	d1fc      	bne.n	10e2 <_gclk_init_generators_by_fref+0x42>
    10e8:	4770      	bx	lr
    10ea:	bf00      	nop
    10ec:	00010101 	.word	0x00010101
    10f0:	40001c00 	.word	0x40001c00
    10f4:	00010105 	.word	0x00010105
    10f8:	00010106 	.word	0x00010106

000010fc <_mclk_init>:
	((Mclk *)hw)->CPUDIV.reg = data;
    10fc:	2201      	movs	r2, #1
    10fe:	4b01      	ldr	r3, [pc, #4]	; (1104 <_mclk_init+0x8>)
    1100:	715a      	strb	r2, [r3, #5]
    1102:	4770      	bx	lr
    1104:	40000800 	.word	0x40000800

00001108 <_osc32kctrl_init_sources>:
}

static inline void hri_osc32kctrl_write_XOSC32K_reg(const void *const hw, hri_osc32kctrl_xosc32k_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->XOSC32K.reg = data;
    1108:	4b06      	ldr	r3, [pc, #24]	; (1124 <_osc32kctrl_init_sources+0x1c>)
    110a:	f242 028e 	movw	r2, #8334	; 0x208e
    110e:	829a      	strh	r2, [r3, #20]
}

static inline void hri_osc32kctrl_write_CFDCTRL_reg(const void *const hw, hri_osc32kctrl_cfdctrl_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->CFDCTRL.reg = data;
    1110:	2200      	movs	r2, #0
    1112:	759a      	strb	r2, [r3, #22]
}

static inline void hri_osc32kctrl_write_EVCTRL_reg(const void *const hw, hri_osc32kctrl_evctrl_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->EVCTRL.reg = data;
    1114:	75da      	strb	r2, [r3, #23]
}

static inline hri_osc32kctrl_osculp32k_reg_t hri_osc32kctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Osc32kctrl *)hw)->OSCULP32K.reg;
    1116:	69da      	ldr	r2, [r3, #28]
	calib = hri_osc32kctrl_read_OSCULP32K_CALIB_bf(hw);
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
#if CONF_OSCULP32K_CALIB_ENABLE == 1
	                                   OSC32KCTRL_OSCULP32K_CALIB(CONF_OSCULP32K_CALIB)
#else
	                                   OSC32KCTRL_OSCULP32K_CALIB(calib)
    1118:	f402 527c 	and.w	r2, r2, #16128	; 0x3f00
}

static inline void hri_osc32kctrl_write_OSCULP32K_reg(const void *const hw, hri_osc32kctrl_osculp32k_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->OSCULP32K.reg = data;
    111c:	61da      	str	r2, [r3, #28]
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
    111e:	2201      	movs	r2, #1
    1120:	741a      	strb	r2, [r3, #16]
    1122:	4770      	bx	lr
    1124:	40001400 	.word	0x40001400

00001128 <_oscctrl_init_sources>:
}

static inline void hri_oscctrl_write_XOSCCTRL_reg(const void *const hw, uint8_t index, hri_oscctrl_xoscctrl_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->XOSCCTRL[index].reg = data;
    1128:	4a04      	ldr	r2, [pc, #16]	; (113c <_oscctrl_init_sources+0x14>)
    112a:	4b05      	ldr	r3, [pc, #20]	; (1140 <_oscctrl_init_sources+0x18>)
    112c:	619a      	str	r2, [r3, #24]
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCRDY1) >> OSCCTRL_STATUS_XOSCRDY1_Pos;
    112e:	461a      	mov	r2, r3
    1130:	6913      	ldr	r3, [r2, #16]
	        | (CONF_XOSC1_XTALEN << OSCCTRL_XOSCCTRL_XTALEN_Pos) | (CONF_XOSC1_ENABLE << OSCCTRL_XOSCCTRL_ENABLE_Pos));
#endif

#if CONF_XOSC1_CONFIG == 1
#if CONF_XOSC1_ENABLE == 1
	while (!hri_oscctrl_get_STATUS_XOSCRDY1_bit(hw))
    1132:	f013 0f02 	tst.w	r3, #2
    1136:	d0fb      	beq.n	1130 <_oscctrl_init_sources+0x8>
	hri_oscctrl_set_XOSCCTRL_ONDEMAND_bit(hw, 1);
#endif
#endif

	(void)hw;
}
    1138:	4770      	bx	lr
    113a:	bf00      	nop
    113c:	03002606 	.word	0x03002606
    1140:	40001000 	.word	0x40001000

00001144 <_oscctrl_init_referenced_generators>:
	tmp = ((Gclk *)hw)->GENCTRL[index].reg;
    1144:	4a36      	ldr	r2, [pc, #216]	; (1220 <_oscctrl_init_referenced_generators+0xdc>)
    1146:	6a13      	ldr	r3, [r2, #32]
	tmp &= ~GCLK_GENCTRL_SRC_Msk;
    1148:	f023 030f 	bic.w	r3, r3, #15
	tmp |= GCLK_GENCTRL_SRC(data);
    114c:	f043 0304 	orr.w	r3, r3, #4
	((Gclk *)hw)->GENCTRL[index].reg = tmp;
    1150:	6213      	str	r3, [r2, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    1152:	4611      	mov	r1, r2
    1154:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    1158:	684b      	ldr	r3, [r1, #4]
    115a:	4213      	tst	r3, r2
    115c:	d1fc      	bne.n	1158 <_oscctrl_init_referenced_generators+0x14>
	return (((Gclk *)hw)->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL0) >> GCLK_SYNCBUSY_GENCTRL0_Pos;
    115e:	4a30      	ldr	r2, [pc, #192]	; (1220 <_oscctrl_init_referenced_generators+0xdc>)
    1160:	6853      	ldr	r3, [r2, #4]
{
	void *hw = (void *)OSCCTRL;

#if CONF_DFLL_CONFIG == 1
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, GCLK_GENCTRL_SRC_OSCULP32K);
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
    1162:	f013 0f04 	tst.w	r3, #4
    1166:	d1fb      	bne.n	1160 <_oscctrl_init_referenced_generators+0x1c>
}

static inline void hri_oscctrl_write_DFLLCTRLA_reg(const void *const hw, hri_oscctrl_dfllctrla_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLCTRLA.reg = data;
    1168:	4b2e      	ldr	r3, [pc, #184]	; (1224 <_oscctrl_init_referenced_generators+0xe0>)
    116a:	2200      	movs	r2, #0
    116c:	771a      	strb	r2, [r3, #28]
}

static inline void hri_oscctrl_write_DFLLMUL_reg(const void *const hw, hri_oscctrl_dfllmul_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLMUL.reg = data;
    116e:	4a2e      	ldr	r2, [pc, #184]	; (1228 <_oscctrl_init_referenced_generators+0xe4>)
    1170:	629a      	str	r2, [r3, #40]	; 0x28
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(const void *const hw)
{
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    1172:	461a      	mov	r2, r3
    1174:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
#endif

	hri_oscctrl_write_DFLLMUL_reg(hw,
	                              OSCCTRL_DFLLMUL_CSTEP(CONF_DFLL_CSTEP) | OSCCTRL_DFLLMUL_FSTEP(CONF_DFLL_FSTEP)
	                                  | OSCCTRL_DFLLMUL_MUL(CONF_DFLL_MUL));
	while (hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(hw))
    1178:	f013 0f10 	tst.w	r3, #16
    117c:	d1fa      	bne.n	1174 <_oscctrl_init_referenced_generators+0x30>
	((Oscctrl *)hw)->DFLLCTRLB.reg = data;
    117e:	2200      	movs	r2, #0
    1180:	4b28      	ldr	r3, [pc, #160]	; (1224 <_oscctrl_init_referenced_generators+0xe0>)
    1182:	f883 2020 	strb.w	r2, [r3, #32]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    1186:	461a      	mov	r2, r3
    1188:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
		;

	hri_oscctrl_write_DFLLCTRLB_reg(hw, 0);
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    118c:	f013 0f04 	tst.w	r3, #4
    1190:	d1fa      	bne.n	1188 <_oscctrl_init_referenced_generators+0x44>
	((Oscctrl *)hw)->DFLLCTRLA.reg = data;
    1192:	2202      	movs	r2, #2
    1194:	4b23      	ldr	r3, [pc, #140]	; (1224 <_oscctrl_init_referenced_generators+0xe0>)
    1196:	771a      	strb	r2, [r3, #28]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    1198:	461a      	mov	r2, r3
    119a:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
		;

	tmp = (CONF_DFLL_RUNSTDBY << OSCCTRL_DFLLCTRLA_RUNSTDBY_Pos) | OSCCTRL_DFLLCTRLA_ENABLE;
	hri_oscctrl_write_DFLLCTRLA_reg(hw, tmp);
	while (hri_oscctrl_get_DFLLSYNC_ENABLE_bit(hw))
    119e:	f013 0f02 	tst.w	r3, #2
    11a2:	d1fa      	bne.n	119a <_oscctrl_init_referenced_generators+0x56>
	return ((Oscctrl *)hw)->DFLLVAL.reg;
    11a4:	4b1f      	ldr	r3, [pc, #124]	; (1224 <_oscctrl_init_referenced_generators+0xe0>)
    11a6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	((Oscctrl *)hw)->DFLLVAL.reg = data;
    11a8:	625a      	str	r2, [r3, #36]	; 0x24
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    11aa:	461a      	mov	r2, r3
    11ac:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c

#if CONF_DFLL_OVERWRITE_CALIBRATION == 1
	hri_oscctrl_write_DFLLVAL_reg(hw, OSCCTRL_DFLLVAL_COARSE(CONF_DFLL_COARSE) | OSCCTRL_DFLLVAL_FINE(CONF_DFLL_FINE));
#endif
	hri_oscctrl_write_DFLLVAL_reg(hw, hri_oscctrl_read_DFLLVAL_reg(hw));
	while (hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit(hw))
    11b0:	f013 0f08 	tst.w	r3, #8
    11b4:	d1fa      	bne.n	11ac <_oscctrl_init_referenced_generators+0x68>
	((Oscctrl *)hw)->DFLLCTRLB.reg = data;
    11b6:	2219      	movs	r2, #25
    11b8:	4b1a      	ldr	r3, [pc, #104]	; (1224 <_oscctrl_init_referenced_generators+0xe0>)
    11ba:	f883 2020 	strb.w	r2, [r3, #32]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    11be:	461a      	mov	r2, r3
    11c0:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
	tmp = (CONF_DFLL_WAITLOCK << OSCCTRL_DFLLCTRLB_WAITLOCK_Pos) | (CONF_DFLL_BPLCKC << OSCCTRL_DFLLCTRLB_BPLCKC_Pos)
	      | (CONF_DFLL_QLDIS << OSCCTRL_DFLLCTRLB_QLDIS_Pos) | (CONF_DFLL_CCDIS << OSCCTRL_DFLLCTRLB_CCDIS_Pos)
	      | (CONF_DFLL_USBCRM << OSCCTRL_DFLLCTRLB_USBCRM_Pos) | (CONF_DFLL_LLAW << OSCCTRL_DFLLCTRLB_LLAW_Pos)
	      | (CONF_DFLL_STABLE << OSCCTRL_DFLLCTRLB_STABLE_Pos) | (CONF_DFLL_MODE << OSCCTRL_DFLLCTRLB_MODE_Pos) | 0;
	hri_oscctrl_write_DFLLCTRLB_reg(hw, tmp);
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    11c4:	f013 0f04 	tst.w	r3, #4
    11c8:	d1fa      	bne.n	11c0 <_oscctrl_init_referenced_generators+0x7c>
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
    11ca:	4b16      	ldr	r3, [pc, #88]	; (1224 <_oscctrl_init_referenced_generators+0xe0>)
    11cc:	f893 3020 	ldrb.w	r3, [r3, #32]
	                                (CONF_FDPLL1_RUNSTDBY << OSCCTRL_DPLLCTRLA_RUNSTDBY_Pos)
	                                    | (CONF_FDPLL1_ENABLE << OSCCTRL_DPLLCTRLA_ENABLE_Pos));
#endif

#if CONF_DFLL_CONFIG == 1
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(hw)) {
    11d0:	f013 0f01 	tst.w	r3, #1
    11d4:	d01d      	beq.n	1212 <_oscctrl_init_referenced_generators+0xce>
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    11d6:	4a13      	ldr	r2, [pc, #76]	; (1224 <_oscctrl_init_referenced_generators+0xe0>)
    11d8:	6913      	ldr	r3, [r2, #16]
	tmp &= mask;
    11da:	f403 6310 	and.w	r3, r3, #2304	; 0x900
		hri_oscctrl_status_reg_t status_mask = OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC;

		while (hri_oscctrl_get_STATUS_reg(hw, status_mask) != status_mask)
    11de:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
    11e2:	d1f9      	bne.n	11d8 <_oscctrl_init_referenced_generators+0x94>
	return ((Gclk *)hw)->SYNCBUSY.reg;
    11e4:	4a0e      	ldr	r2, [pc, #56]	; (1220 <_oscctrl_init_referenced_generators+0xdc>)
    11e6:	6853      	ldr	r3, [r2, #4]
	hri_oscctrl_set_DPLLCTRLA_ONDEMAND_bit(hw, 1);
#endif
#endif

#if CONF_DFLL_CONFIG == 1
	while (hri_gclk_read_SYNCBUSY_reg(GCLK))
    11e8:	2b00      	cmp	r3, #0
    11ea:	d1fc      	bne.n	11e6 <_oscctrl_init_referenced_generators+0xa2>
	tmp = ((Gclk *)hw)->GENCTRL[index].reg;
    11ec:	4a0c      	ldr	r2, [pc, #48]	; (1220 <_oscctrl_init_referenced_generators+0xdc>)
    11ee:	6a13      	ldr	r3, [r2, #32]
	tmp &= ~GCLK_GENCTRL_SRC_Msk;
    11f0:	f023 030f 	bic.w	r3, r3, #15
	tmp |= GCLK_GENCTRL_SRC(data);
    11f4:	f043 0301 	orr.w	r3, r3, #1
	((Gclk *)hw)->GENCTRL[index].reg = tmp;
    11f8:	6213      	str	r3, [r2, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    11fa:	4611      	mov	r1, r2
    11fc:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    1200:	684b      	ldr	r3, [r1, #4]
    1202:	4213      	tst	r3, r2
    1204:	d1fc      	bne.n	1200 <_oscctrl_init_referenced_generators+0xbc>
	return (((Gclk *)hw)->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL0) >> GCLK_SYNCBUSY_GENCTRL0_Pos;
    1206:	4a06      	ldr	r2, [pc, #24]	; (1220 <_oscctrl_init_referenced_generators+0xdc>)
    1208:	6853      	ldr	r3, [r2, #4]
		;
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, CONF_GCLK_GEN_0_SOURCE);
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
    120a:	f013 0f04 	tst.w	r3, #4
    120e:	d1fb      	bne.n	1208 <_oscctrl_init_referenced_generators+0xc4>
		;
#endif
	(void)hw;
}
    1210:	4770      	bx	lr
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_DFLLRDY) >> OSCCTRL_STATUS_DFLLRDY_Pos;
    1212:	4a04      	ldr	r2, [pc, #16]	; (1224 <_oscctrl_init_referenced_generators+0xe0>)
    1214:	6913      	ldr	r3, [r2, #16]
		while (!hri_oscctrl_get_STATUS_DFLLRDY_bit(hw))
    1216:	f413 7f80 	tst.w	r3, #256	; 0x100
    121a:	d0fb      	beq.n	1214 <_oscctrl_init_referenced_generators+0xd0>
    121c:	e7e2      	b.n	11e4 <_oscctrl_init_referenced_generators+0xa0>
    121e:	bf00      	nop
    1220:	40001c00 	.word	0x40001c00
    1224:	40001000 	.word	0x40001000
    1228:	0401bb80 	.word	0x0401bb80

0000122c <_sercom_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given sercom hardware instance
 */
static uint8_t _sercom_get_hardware_index(const void *const hw)
{
    122c:	b470      	push	{r4, r5, r6}
    122e:	b089      	sub	sp, #36	; 0x24
    1230:	4606      	mov	r6, r0
	Sercom *const sercom_modules[] = SERCOM_INSTS;
    1232:	466c      	mov	r4, sp
    1234:	4d0d      	ldr	r5, [pc, #52]	; (126c <_sercom_get_hardware_index+0x40>)
    1236:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    1238:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    123a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    123e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	/* Find index for SERCOM instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
    1242:	9b00      	ldr	r3, [sp, #0]
    1244:	42b3      	cmp	r3, r6
    1246:	d00d      	beq.n	1264 <_sercom_get_hardware_index+0x38>
    1248:	4631      	mov	r1, r6
    124a:	ab01      	add	r3, sp, #4
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    124c:	2001      	movs	r0, #1
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
    124e:	f853 2b04 	ldr.w	r2, [r3], #4
    1252:	428a      	cmp	r2, r1
    1254:	d007      	beq.n	1266 <_sercom_get_hardware_index+0x3a>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    1256:	3001      	adds	r0, #1
    1258:	2808      	cmp	r0, #8
    125a:	d1f8      	bne.n	124e <_sercom_get_hardware_index+0x22>
			return i;
		}
	}
	return 0;
    125c:	2000      	movs	r0, #0
}
    125e:	b009      	add	sp, #36	; 0x24
    1260:	bc70      	pop	{r4, r5, r6}
    1262:	4770      	bx	lr
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    1264:	2000      	movs	r0, #0
			return i;
    1266:	b2c0      	uxtb	r0, r0
    1268:	e7f9      	b.n	125e <_sercom_get_hardware_index+0x32>
    126a:	bf00      	nop
    126c:	00003804 	.word	0x00003804

00001270 <_sercom_get_irq_num>:

/**
 * \brief Retrieve IRQ number for the given hardware instance
 */
static uint8_t _sercom_get_irq_num(const void *const hw)
{
    1270:	b508      	push	{r3, lr}
	return SERCOM0_0_IRQn + (_sercom_get_hardware_index(hw) << 2);
    1272:	4b03      	ldr	r3, [pc, #12]	; (1280 <_sercom_get_irq_num+0x10>)
    1274:	4798      	blx	r3
    1276:	0080      	lsls	r0, r0, #2
    1278:	302e      	adds	r0, #46	; 0x2e
}
    127a:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
    127e:	bd08      	pop	{r3, pc}
    1280:	0000122d 	.word	0x0000122d

00001284 <_spi_handler>:
/**
 *  \brief IRQ handler used
 *  \param[in, out] p Pointer to SPI device instance.
 */
static void _spi_handler(struct _spi_async_dev *dev)
{
    1284:	b508      	push	{r3, lr}
	void *                      hw = dev->prvt;
    1286:	6802      	ldr	r2, [r0, #0]
	return tmp;
}

static inline hri_sercomspi_intflag_reg_t hri_sercomspi_read_INTFLAG_reg(const void *const hw)
{
	return ((Sercom *)hw)->SPI.INTFLAG.reg;
    1288:	7e11      	ldrb	r1, [r2, #24]
	return tmp;
}

static inline hri_sercomspi_intenset_reg_t hri_sercomspi_read_INTEN_reg(const void *const hw)
{
	return ((Sercom *)hw)->SPI.INTENSET.reg;
    128a:	7d93      	ldrb	r3, [r2, #22]
	hri_sercomspi_intflag_reg_t st;

	st = hri_sercomspi_read_INTFLAG_reg(hw);
	st &= hri_sercomspi_read_INTEN_reg(hw);
    128c:	400b      	ands	r3, r1

	if (st & SERCOM_SPI_INTFLAG_DRE) {
    128e:	f013 0f01 	tst.w	r3, #1
    1292:	d109      	bne.n	12a8 <_spi_handler+0x24>
		dev->callbacks.tx(dev);
	} else if (st & SERCOM_SPI_INTFLAG_RXC) {
    1294:	f013 0f04 	tst.w	r3, #4
    1298:	d109      	bne.n	12ae <_spi_handler+0x2a>
		dev->callbacks.rx(dev);
	} else if (st & SERCOM_SPI_INTFLAG_TXC) {
    129a:	f013 0f02 	tst.w	r3, #2
    129e:	d109      	bne.n	12b4 <_spi_handler+0x30>
		hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC);
		dev->callbacks.complete(dev);
	} else if (st & SERCOM_SPI_INTFLAG_ERROR) {
    12a0:	f013 0f80 	tst.w	r3, #128	; 0x80
    12a4:	d10b      	bne.n	12be <_spi_handler+0x3a>
    12a6:	bd08      	pop	{r3, pc}
		dev->callbacks.tx(dev);
    12a8:	6883      	ldr	r3, [r0, #8]
    12aa:	4798      	blx	r3
    12ac:	bd08      	pop	{r3, pc}
		dev->callbacks.rx(dev);
    12ae:	68c3      	ldr	r3, [r0, #12]
    12b0:	4798      	blx	r3
    12b2:	bd08      	pop	{r3, pc}
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    12b4:	2302      	movs	r3, #2
    12b6:	7613      	strb	r3, [r2, #24]
		dev->callbacks.complete(dev);
    12b8:	6903      	ldr	r3, [r0, #16]
    12ba:	4798      	blx	r3
    12bc:	bd08      	pop	{r3, pc}
}

static inline void hri_sercomspi_clear_STATUS_reg(const void *const hw, hri_sercomspi_status_reg_t mask)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.STATUS.reg = mask;
    12be:	2304      	movs	r3, #4
    12c0:	8353      	strh	r3, [r2, #26]
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    12c2:	2380      	movs	r3, #128	; 0x80
    12c4:	7613      	strb	r3, [r2, #24]
		hri_sercomspi_clear_STATUS_reg(hw, SERCOM_SPI_STATUS_BUFOVF);
		hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_ERROR);
		dev->callbacks.err(dev, ERR_OVERFLOW);
    12c6:	6943      	ldr	r3, [r0, #20]
    12c8:	f06f 0112 	mvn.w	r1, #18
    12cc:	4798      	blx	r3
	}
}
    12ce:	e7ea      	b.n	12a6 <_spi_handler+0x22>

000012d0 <SERCOM0_0_Handler>:

/**
 * \internal Sercom interrupt handler
 */
void SERCOM0_0_Handler(void)
{
    12d0:	b508      	push	{r3, lr}
	_spi_handler(_sercom0_dev);
    12d2:	4b02      	ldr	r3, [pc, #8]	; (12dc <SERCOM0_0_Handler+0xc>)
    12d4:	6818      	ldr	r0, [r3, #0]
    12d6:	4b02      	ldr	r3, [pc, #8]	; (12e0 <SERCOM0_0_Handler+0x10>)
    12d8:	4798      	blx	r3
    12da:	bd08      	pop	{r3, pc}
    12dc:	200005ac 	.word	0x200005ac
    12e0:	00001285 	.word	0x00001285

000012e4 <SERCOM0_1_Handler>:
}
/**
 * \internal Sercom interrupt handler
 */
void SERCOM0_1_Handler(void)
{
    12e4:	b508      	push	{r3, lr}
	_spi_handler(_sercom0_dev);
    12e6:	4b02      	ldr	r3, [pc, #8]	; (12f0 <SERCOM0_1_Handler+0xc>)
    12e8:	6818      	ldr	r0, [r3, #0]
    12ea:	4b02      	ldr	r3, [pc, #8]	; (12f4 <SERCOM0_1_Handler+0x10>)
    12ec:	4798      	blx	r3
    12ee:	bd08      	pop	{r3, pc}
    12f0:	200005ac 	.word	0x200005ac
    12f4:	00001285 	.word	0x00001285

000012f8 <SERCOM0_2_Handler>:
}
/**
 * \internal Sercom interrupt handler
 */
void SERCOM0_2_Handler(void)
{
    12f8:	b508      	push	{r3, lr}
	_spi_handler(_sercom0_dev);
    12fa:	4b02      	ldr	r3, [pc, #8]	; (1304 <SERCOM0_2_Handler+0xc>)
    12fc:	6818      	ldr	r0, [r3, #0]
    12fe:	4b02      	ldr	r3, [pc, #8]	; (1308 <SERCOM0_2_Handler+0x10>)
    1300:	4798      	blx	r3
    1302:	bd08      	pop	{r3, pc}
    1304:	200005ac 	.word	0x200005ac
    1308:	00001285 	.word	0x00001285

0000130c <SERCOM0_3_Handler>:
}
/**
 * \internal Sercom interrupt handler
 */
void SERCOM0_3_Handler(void)
{
    130c:	b508      	push	{r3, lr}
	_spi_handler(_sercom0_dev);
    130e:	4b02      	ldr	r3, [pc, #8]	; (1318 <SERCOM0_3_Handler+0xc>)
    1310:	6818      	ldr	r0, [r3, #0]
    1312:	4b02      	ldr	r3, [pc, #8]	; (131c <SERCOM0_3_Handler+0x10>)
    1314:	4798      	blx	r3
    1316:	bd08      	pop	{r3, pc}
    1318:	200005ac 	.word	0x200005ac
    131c:	00001285 	.word	0x00001285

00001320 <_spi_m_sync_init>:
}

int32_t _spi_m_sync_init(struct _spi_m_sync_dev *dev, void *const hw)
{
    1320:	b538      	push	{r3, r4, r5, lr}
    1322:	4605      	mov	r5, r0
    1324:	460c      	mov	r4, r1
	uint8_t n = _sercom_get_hardware_index((const void *)hw_addr);
    1326:	4608      	mov	r0, r1
    1328:	4b36      	ldr	r3, [pc, #216]	; (1404 <_spi_m_sync_init+0xe4>)
    132a:	4798      	blx	r3
		if (sercomspi_regs[i].n == n) {
    132c:	b160      	cbz	r0, 1348 <_spi_m_sync_init+0x28>
	const struct sercomspi_regs_cfg *regs = _spi_get_regs((uint32_t)hw);

	ASSERT(dev && hw);
    132e:	2d00      	cmp	r5, #0
    1330:	d055      	beq.n	13de <_spi_m_sync_init+0xbe>
    1332:	f640 1273 	movw	r2, #2419	; 0x973
    1336:	4934      	ldr	r1, [pc, #208]	; (1408 <_spi_m_sync_init+0xe8>)
    1338:	1c20      	adds	r0, r4, #0
    133a:	bf18      	it	ne
    133c:	2001      	movne	r0, #1
    133e:	4b33      	ldr	r3, [pc, #204]	; (140c <_spi_m_sync_init+0xec>)
    1340:	4798      	blx	r3

	if (regs == NULL) {
		return ERR_INVALID_ARG;
    1342:	f06f 000c 	mvn.w	r0, #12
    1346:	bd38      	pop	{r3, r4, r5, pc}
	ASSERT(dev && hw);
    1348:	2d00      	cmp	r5, #0
    134a:	d151      	bne.n	13f0 <_spi_m_sync_init+0xd0>
    134c:	f640 1273 	movw	r2, #2419	; 0x973
    1350:	492d      	ldr	r1, [pc, #180]	; (1408 <_spi_m_sync_init+0xe8>)
    1352:	2000      	movs	r0, #0
    1354:	4b2d      	ldr	r3, [pc, #180]	; (140c <_spi_m_sync_init+0xec>)
    1356:	4798      	blx	r3
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    1358:	69e3      	ldr	r3, [r4, #28]
	}

	if (!hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    135a:	f013 0f01 	tst.w	r3, #1
    135e:	d119      	bne.n	1394 <_spi_m_sync_init+0x74>
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    1360:	69e3      	ldr	r3, [r4, #28]
    1362:	f013 0f03 	tst.w	r3, #3
    1366:	d1fb      	bne.n	1360 <_spi_m_sync_init+0x40>
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    1368:	6823      	ldr	r3, [r4, #0]
		uint32_t mode = regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk;
		if (hri_sercomspi_get_CTRLA_reg(hw, SERCOM_SPI_CTRLA_ENABLE)) {
    136a:	f013 0f02 	tst.w	r3, #2
    136e:	d00b      	beq.n	1388 <_spi_m_sync_init+0x68>
	((Sercom *)hw)->SPI.CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    1370:	6823      	ldr	r3, [r4, #0]
    1372:	f023 0302 	bic.w	r3, r3, #2
    1376:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    1378:	69e3      	ldr	r3, [r4, #28]
    137a:	f013 0f03 	tst.w	r3, #3
    137e:	d1fb      	bne.n	1378 <_spi_m_sync_init+0x58>
    1380:	69e3      	ldr	r3, [r4, #28]
    1382:	f013 0f02 	tst.w	r3, #2
    1386:	d1fb      	bne.n	1380 <_spi_m_sync_init+0x60>
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    1388:	230d      	movs	r3, #13
    138a:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    138c:	69e3      	ldr	r3, [r4, #28]
    138e:	f013 0f03 	tst.w	r3, #3
    1392:	d1fb      	bne.n	138c <_spi_m_sync_init+0x6c>
    1394:	69e3      	ldr	r3, [r4, #28]
    1396:	f013 0f01 	tst.w	r3, #1
    139a:	d1fb      	bne.n	1394 <_spi_m_sync_init+0x74>
		}
		hri_sercomspi_write_CTRLA_reg(hw, SERCOM_SPI_CTRLA_SWRST | mode);
	}
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST);

	dev->prvt = hw;
    139c:	602c      	str	r4, [r5, #0]
	ASSERT(hw && regs);
    139e:	f640 1206 	movw	r2, #2310	; 0x906
    13a2:	4919      	ldr	r1, [pc, #100]	; (1408 <_spi_m_sync_init+0xe8>)
    13a4:	1c20      	adds	r0, r4, #0
    13a6:	bf18      	it	ne
    13a8:	2001      	movne	r0, #1
    13aa:	4b18      	ldr	r3, [pc, #96]	; (140c <_spi_m_sync_init+0xec>)
    13ac:	4798      	blx	r3
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    13ae:	4b18      	ldr	r3, [pc, #96]	; (1410 <_spi_m_sync_init+0xf0>)
    13b0:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    13b2:	69e3      	ldr	r3, [r4, #28]
    13b4:	f013 0f03 	tst.w	r3, #3
    13b8:	d1fb      	bne.n	13b2 <_spi_m_sync_init+0x92>
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    13ba:	f44f 3300 	mov.w	r3, #131072	; 0x20000
    13be:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    13c0:	69e3      	ldr	r3, [r4, #28]
    13c2:	f013 0f17 	tst.w	r3, #23
    13c6:	d1fb      	bne.n	13c0 <_spi_m_sync_init+0xa0>
	((Sercom *)hw)->SPI.BAUD.reg = data;
    13c8:	2377      	movs	r3, #119	; 0x77
    13ca:	7323      	strb	r3, [r4, #12]
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    13cc:	2000      	movs	r0, #0
    13ce:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
	} else {
		_spi_load_regs_master(hw, regs);
	}

	/* Load character size from default hardware configuration */
	dev->char_size = ((regs->ctrlb & SERCOM_SPI_CTRLB_CHSIZE_Msk) == 0) ? 1 : 2;
    13d2:	2301      	movs	r3, #1
    13d4:	712b      	strb	r3, [r5, #4]

	dev->dummy_byte = regs->dummy_byte;
    13d6:	f240 13ff 	movw	r3, #511	; 0x1ff
    13da:	80eb      	strh	r3, [r5, #6]

	return ERR_NONE;
    13dc:	bd38      	pop	{r3, r4, r5, pc}
	ASSERT(dev && hw);
    13de:	f640 1273 	movw	r2, #2419	; 0x973
    13e2:	4909      	ldr	r1, [pc, #36]	; (1408 <_spi_m_sync_init+0xe8>)
    13e4:	2000      	movs	r0, #0
    13e6:	4b09      	ldr	r3, [pc, #36]	; (140c <_spi_m_sync_init+0xec>)
    13e8:	4798      	blx	r3
		return ERR_INVALID_ARG;
    13ea:	f06f 000c 	mvn.w	r0, #12
    13ee:	bd38      	pop	{r3, r4, r5, pc}
	ASSERT(dev && hw);
    13f0:	f640 1273 	movw	r2, #2419	; 0x973
    13f4:	4904      	ldr	r1, [pc, #16]	; (1408 <_spi_m_sync_init+0xe8>)
    13f6:	1c20      	adds	r0, r4, #0
    13f8:	bf18      	it	ne
    13fa:	2001      	movne	r0, #1
    13fc:	4b03      	ldr	r3, [pc, #12]	; (140c <_spi_m_sync_init+0xec>)
    13fe:	4798      	blx	r3
    1400:	e7aa      	b.n	1358 <_spi_m_sync_init+0x38>
    1402:	bf00      	nop
    1404:	0000122d 	.word	0x0000122d
    1408:	0000383c 	.word	0x0000383c
    140c:	00000ec1 	.word	0x00000ec1
    1410:	0020000c 	.word	0x0020000c

00001414 <_spi_m_async_init>:
{
	return _spi_m_sync_init(dev, hw);
}

int32_t _spi_m_async_init(struct _spi_async_dev *dev, void *const hw)
{
    1414:	b538      	push	{r3, r4, r5, lr}
    1416:	4604      	mov	r4, r0
    1418:	460d      	mov	r5, r1
	struct _spi_async_dev *spid = dev;
	/* Do hardware initialize. */
	int32_t rc = _spi_m_sync_init((struct _spi_m_sync_dev *)dev, hw);
    141a:	4b15      	ldr	r3, [pc, #84]	; (1470 <_spi_m_async_init+0x5c>)
    141c:	4798      	blx	r3

	if (rc < 0) {
    141e:	2800      	cmp	r0, #0
    1420:	db25      	blt.n	146e <_spi_m_async_init+0x5a>
	if (hw == SERCOM0) {
    1422:	4b14      	ldr	r3, [pc, #80]	; (1474 <_spi_m_async_init+0x60>)
    1424:	429d      	cmp	r5, r3
		_sercom0_dev = (struct _spi_async_dev *)dev;
    1426:	bf04      	itt	eq
    1428:	4b13      	ldreq	r3, [pc, #76]	; (1478 <_spi_m_async_init+0x64>)
    142a:	601c      	streq	r4, [r3, #0]
		return rc;
	}

	_sercom_init_irq_param(hw, (void *)dev);
	/* Initialize callbacks: must use them */
	spid->callbacks.complete = NULL;
    142c:	2300      	movs	r3, #0
    142e:	6123      	str	r3, [r4, #16]
	spid->callbacks.rx       = NULL;
    1430:	60e3      	str	r3, [r4, #12]
	spid->callbacks.tx       = NULL;
    1432:	60a3      	str	r3, [r4, #8]
	uint8_t irq              = _sercom_get_irq_num(hw);
    1434:	4628      	mov	r0, r5
    1436:	4b11      	ldr	r3, [pc, #68]	; (147c <_spi_m_async_init+0x68>)
    1438:	4798      	blx	r3
    143a:	1d01      	adds	r1, r0, #4
    143c:	b2c9      	uxtb	r1, r1
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    143e:	2401      	movs	r4, #1
    1440:	f000 021f 	and.w	r2, r0, #31
    1444:	fa04 f202 	lsl.w	r2, r4, r2
    1448:	0943      	lsrs	r3, r0, #5
    144a:	009b      	lsls	r3, r3, #2
    144c:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    1450:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    1454:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    1458:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    145c:	f3bf 8f6f 	isb	sy
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1460:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	for (uint32_t i = 0; i < 4; i++) {
		NVIC_DisableIRQ((IRQn_Type)irq);
		NVIC_ClearPendingIRQ((IRQn_Type)irq);
		irq++;
    1464:	3001      	adds	r0, #1
    1466:	b2c0      	uxtb	r0, r0
	for (uint32_t i = 0; i < 4; i++) {
    1468:	4281      	cmp	r1, r0
    146a:	d1e9      	bne.n	1440 <_spi_m_async_init+0x2c>
	}

	return ERR_NONE;
    146c:	2000      	movs	r0, #0
}
    146e:	bd38      	pop	{r3, r4, r5, pc}
    1470:	00001321 	.word	0x00001321
    1474:	40003000 	.word	0x40003000
    1478:	200005ac 	.word	0x200005ac
    147c:	00001271 	.word	0x00001271

00001480 <_spi_m_async_enable_tx>:

	return rc;
}

int32_t _spi_m_async_enable_tx(struct _spi_async_dev *dev, bool state)
{
    1480:	b538      	push	{r3, r4, r5, lr}
    1482:	460d      	mov	r5, r1
	void *hw = dev->prvt;
    1484:	6804      	ldr	r4, [r0, #0]

	ASSERT(dev && hw);
    1486:	b160      	cbz	r0, 14a2 <_spi_m_async_enable_tx+0x22>
    1488:	1c20      	adds	r0, r4, #0
    148a:	bf18      	it	ne
    148c:	2001      	movne	r0, #1
    148e:	f640 3203 	movw	r2, #2819	; 0xb03
    1492:	4906      	ldr	r1, [pc, #24]	; (14ac <_spi_m_async_enable_tx+0x2c>)
    1494:	4b06      	ldr	r3, [pc, #24]	; (14b0 <_spi_m_async_enable_tx+0x30>)
    1496:	4798      	blx	r3

	if (state) {
    1498:	b92d      	cbnz	r5, 14a6 <_spi_m_async_enable_tx+0x26>
	((Sercom *)hw)->SPI.INTENCLR.reg = SERCOM_SPI_INTENSET_DRE;
    149a:	2301      	movs	r3, #1
    149c:	7523      	strb	r3, [r4, #20]
	} else {
		hri_sercomspi_clear_INTEN_DRE_bit(hw);
	}

	return ERR_NONE;
}
    149e:	2000      	movs	r0, #0
    14a0:	bd38      	pop	{r3, r4, r5, pc}
    14a2:	2000      	movs	r0, #0
    14a4:	e7f3      	b.n	148e <_spi_m_async_enable_tx+0xe>
	((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_DRE;
    14a6:	2301      	movs	r3, #1
    14a8:	75a3      	strb	r3, [r4, #22]
    14aa:	e7f8      	b.n	149e <_spi_m_async_enable_tx+0x1e>
    14ac:	0000383c 	.word	0x0000383c
    14b0:	00000ec1 	.word	0x00000ec1

000014b4 <_spi_m_async_enable_rx>:
{
	return _spi_m_async_enable_tx(dev, state);
}

int32_t _spi_m_async_enable_rx(struct _spi_async_dev *dev, bool state)
{
    14b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    14b6:	460f      	mov	r7, r1
	void *hw = dev->prvt;
    14b8:	6804      	ldr	r4, [r0, #0]

	ASSERT(dev);
    14ba:	4e0c      	ldr	r6, [pc, #48]	; (14ec <_spi_m_async_enable_rx+0x38>)
    14bc:	f640 3217 	movw	r2, #2839	; 0xb17
    14c0:	4631      	mov	r1, r6
    14c2:	3000      	adds	r0, #0
    14c4:	bf18      	it	ne
    14c6:	2001      	movne	r0, #1
    14c8:	4d09      	ldr	r5, [pc, #36]	; (14f0 <_spi_m_async_enable_rx+0x3c>)
    14ca:	47a8      	blx	r5
	ASSERT(hw);
    14cc:	f640 3218 	movw	r2, #2840	; 0xb18
    14d0:	4631      	mov	r1, r6
    14d2:	1c20      	adds	r0, r4, #0
    14d4:	bf18      	it	ne
    14d6:	2001      	movne	r0, #1
    14d8:	47a8      	blx	r5

	if (state) {
    14da:	b91f      	cbnz	r7, 14e4 <_spi_m_async_enable_rx+0x30>
	((Sercom *)hw)->SPI.INTENCLR.reg = SERCOM_SPI_INTENSET_RXC;
    14dc:	2304      	movs	r3, #4
    14de:	7523      	strb	r3, [r4, #20]
	} else {
		hri_sercomspi_clear_INTEN_RXC_bit(hw);
	}

	return ERR_NONE;
}
    14e0:	2000      	movs	r0, #0
    14e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_RXC;
    14e4:	2304      	movs	r3, #4
    14e6:	75a3      	strb	r3, [r4, #22]
    14e8:	e7fa      	b.n	14e0 <_spi_m_async_enable_rx+0x2c>
    14ea:	bf00      	nop
    14ec:	0000383c 	.word	0x0000383c
    14f0:	00000ec1 	.word	0x00000ec1

000014f4 <_spi_m_async_enable_tx_complete>:
{
	return _spi_m_async_enable_rx(dev, state);
}

int32_t _spi_m_async_enable_tx_complete(struct _spi_async_dev *dev, bool state)
{
    14f4:	b538      	push	{r3, r4, r5, lr}
    14f6:	460d      	mov	r5, r1
	ASSERT(dev && dev->prvt);
    14f8:	4604      	mov	r4, r0
    14fa:	b170      	cbz	r0, 151a <_spi_m_async_enable_tx_complete+0x26>
    14fc:	6800      	ldr	r0, [r0, #0]
    14fe:	3000      	adds	r0, #0
    1500:	bf18      	it	ne
    1502:	2001      	movne	r0, #1
    1504:	f640 322a 	movw	r2, #2858	; 0xb2a
    1508:	4907      	ldr	r1, [pc, #28]	; (1528 <_spi_m_async_enable_tx_complete+0x34>)
    150a:	4b08      	ldr	r3, [pc, #32]	; (152c <_spi_m_async_enable_tx_complete+0x38>)
    150c:	4798      	blx	r3

	if (state) {
    150e:	b935      	cbnz	r5, 151e <_spi_m_async_enable_tx_complete+0x2a>
		hri_sercomspi_set_INTEN_TXC_bit(dev->prvt);
	} else {
		hri_sercomspi_clear_INTEN_TXC_bit(dev->prvt);
    1510:	6823      	ldr	r3, [r4, #0]
	((Sercom *)hw)->SPI.INTENCLR.reg = SERCOM_SPI_INTENSET_TXC;
    1512:	2202      	movs	r2, #2
    1514:	751a      	strb	r2, [r3, #20]
	}

	return ERR_NONE;
}
    1516:	2000      	movs	r0, #0
    1518:	bd38      	pop	{r3, r4, r5, pc}
    151a:	2000      	movs	r0, #0
    151c:	e7f2      	b.n	1504 <_spi_m_async_enable_tx_complete+0x10>
		hri_sercomspi_set_INTEN_TXC_bit(dev->prvt);
    151e:	6823      	ldr	r3, [r4, #0]
	((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_TXC;
    1520:	2202      	movs	r2, #2
    1522:	759a      	strb	r2, [r3, #22]
    1524:	e7f7      	b.n	1516 <_spi_m_async_enable_tx_complete+0x22>
    1526:	bf00      	nop
    1528:	0000383c 	.word	0x0000383c
    152c:	00000ec1 	.word	0x00000ec1

00001530 <_spi_m_async_write_one>:
{
	return _spi_m_async_enable_tx_complete(dev, state);
}

int32_t _spi_m_async_write_one(struct _spi_async_dev *dev, uint16_t data)
{
    1530:	b538      	push	{r3, r4, r5, lr}
    1532:	460d      	mov	r5, r1
	ASSERT(dev && dev->prvt);
    1534:	4604      	mov	r4, r0
    1536:	b160      	cbz	r0, 1552 <_spi_m_async_write_one+0x22>
    1538:	6800      	ldr	r0, [r0, #0]
    153a:	3000      	adds	r0, #0
    153c:	bf18      	it	ne
    153e:	2001      	movne	r0, #1
    1540:	f640 323c 	movw	r2, #2876	; 0xb3c
    1544:	4904      	ldr	r1, [pc, #16]	; (1558 <_spi_m_async_write_one+0x28>)
    1546:	4b05      	ldr	r3, [pc, #20]	; (155c <_spi_m_async_write_one+0x2c>)
    1548:	4798      	blx	r3

	hri_sercomspi_write_DATA_reg(dev->prvt, data);
    154a:	6823      	ldr	r3, [r4, #0]
	((Sercom *)hw)->SPI.DATA.reg = data;
    154c:	629d      	str	r5, [r3, #40]	; 0x28

	return ERR_NONE;
}
    154e:	2000      	movs	r0, #0
    1550:	bd38      	pop	{r3, r4, r5, pc}
    1552:	2000      	movs	r0, #0
    1554:	e7f4      	b.n	1540 <_spi_m_async_write_one+0x10>
    1556:	bf00      	nop
    1558:	0000383c 	.word	0x0000383c
    155c:	00000ec1 	.word	0x00000ec1

00001560 <_spi_m_async_read_one>:

	return ERR_NONE;
}

uint16_t _spi_m_async_read_one(struct _spi_async_dev *dev)
{
    1560:	b510      	push	{r4, lr}
	ASSERT(dev && dev->prvt);
    1562:	4604      	mov	r4, r0
    1564:	b160      	cbz	r0, 1580 <_spi_m_async_read_one+0x20>
    1566:	6800      	ldr	r0, [r0, #0]
    1568:	3000      	adds	r0, #0
    156a:	bf18      	it	ne
    156c:	2001      	movne	r0, #1
    156e:	f640 3257 	movw	r2, #2903	; 0xb57
    1572:	4904      	ldr	r1, [pc, #16]	; (1584 <_spi_m_async_read_one+0x24>)
    1574:	4b04      	ldr	r3, [pc, #16]	; (1588 <_spi_m_async_read_one+0x28>)
    1576:	4798      	blx	r3

	return hri_sercomspi_read_DATA_reg(dev->prvt);
    1578:	6823      	ldr	r3, [r4, #0]
	return ((Sercom *)hw)->SPI.DATA.reg;
    157a:	6a98      	ldr	r0, [r3, #40]	; 0x28
}
    157c:	b280      	uxth	r0, r0
    157e:	bd10      	pop	{r4, pc}
    1580:	2000      	movs	r0, #0
    1582:	e7f4      	b.n	156e <_spi_m_async_read_one+0xe>
    1584:	0000383c 	.word	0x0000383c
    1588:	00000ec1 	.word	0x00000ec1

0000158c <_spi_m_async_register_callback>:
	return hri_sercomspi_read_DATA_reg(dev->prvt);
}

int32_t _spi_m_async_register_callback(struct _spi_async_dev *dev, const enum _spi_async_dev_cb_type cb_type,
                                       const FUNC_PTR func)
{
    158c:	b570      	push	{r4, r5, r6, lr}
    158e:	460d      	mov	r5, r1
    1590:	4616      	mov	r6, r2
	typedef void (*func_t)(void);
	struct _spi_async_dev *spid = dev;

	ASSERT(dev && (cb_type < SPI_DEV_CB_N));
    1592:	4604      	mov	r4, r0
    1594:	b168      	cbz	r0, 15b2 <_spi_m_async_register_callback+0x26>
    1596:	2903      	cmp	r1, #3
    1598:	bf8c      	ite	hi
    159a:	2000      	movhi	r0, #0
    159c:	2001      	movls	r0, #1
    159e:	f44f 6237 	mov.w	r2, #2928	; 0xb70
    15a2:	4905      	ldr	r1, [pc, #20]	; (15b8 <_spi_m_async_register_callback+0x2c>)
    15a4:	4b05      	ldr	r3, [pc, #20]	; (15bc <_spi_m_async_register_callback+0x30>)
    15a6:	4798      	blx	r3

	func_t *p_ls  = (func_t *)&spid->callbacks;
	p_ls[cb_type] = (func_t)func;
    15a8:	eb04 0485 	add.w	r4, r4, r5, lsl #2
    15ac:	60a6      	str	r6, [r4, #8]

	return ERR_NONE;
}
    15ae:	2000      	movs	r0, #0
    15b0:	bd70      	pop	{r4, r5, r6, pc}
    15b2:	2000      	movs	r0, #0
    15b4:	e7f3      	b.n	159e <_spi_m_async_register_callback+0x12>
    15b6:	bf00      	nop
    15b8:	0000383c 	.word	0x0000383c
    15bc:	00000ec1 	.word	0x00000ec1

000015c0 <_delay_init>:
 * \brief Initialize system time module
 */
void _system_time_init(void *const hw)
{
	(void)hw;
	SysTick->LOAD = (0xFFFFFF << SysTick_LOAD_RELOAD_Pos);
    15c0:	4b03      	ldr	r3, [pc, #12]	; (15d0 <_delay_init+0x10>)
    15c2:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
    15c6:	605a      	str	r2, [r3, #4]
	SysTick->CTRL = (1 << SysTick_CTRL_ENABLE_Pos) | (CONF_SYSTICK_TICKINT << SysTick_CTRL_TICKINT_Pos)
    15c8:	2205      	movs	r2, #5
    15ca:	601a      	str	r2, [r3, #0]
    15cc:	4770      	bx	lr
    15ce:	bf00      	nop
    15d0:	e000e010 	.word	0xe000e010

000015d4 <_delay_cycles>:
 * \brief Delay loop to delay n number of cycles
 */
void _delay_cycles(void *const hw, uint32_t cycles)
{
	(void)hw;
	uint8_t  n   = cycles >> 24;
    15d4:	0e0b      	lsrs	r3, r1, #24
	uint32_t buf = cycles;

	while (n--) {
    15d6:	b303      	cbz	r3, 161a <_delay_cycles+0x46>
{
    15d8:	b430      	push	{r4, r5}
    15da:	1e5d      	subs	r5, r3, #1
    15dc:	b2ed      	uxtb	r5, r5
	while (n--) {
    15de:	4628      	mov	r0, r5
		SysTick->LOAD = 0xFFFFFF;
    15e0:	4a12      	ldr	r2, [pc, #72]	; (162c <_delay_cycles+0x58>)
    15e2:	f06f 447f 	mvn.w	r4, #4278190080	; 0xff000000
    15e6:	6054      	str	r4, [r2, #4]
		SysTick->VAL  = 0xFFFFFF;
    15e8:	6094      	str	r4, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    15ea:	6813      	ldr	r3, [r2, #0]
    15ec:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    15f0:	d0fb      	beq.n	15ea <_delay_cycles+0x16>
	while (n--) {
    15f2:	3801      	subs	r0, #1
    15f4:	b2c0      	uxtb	r0, r0
    15f6:	28ff      	cmp	r0, #255	; 0xff
    15f8:	d1f5      	bne.n	15e6 <_delay_cycles+0x12>
    15fa:	eba5 6505 	sub.w	r5, r5, r5, lsl #24
    15fe:	f101 417f 	add.w	r1, r1, #4278190080	; 0xff000000
    1602:	3101      	adds	r1, #1
    1604:	4429      	add	r1, r5
			;
		buf -= 0xFFFFFF;
	}

	SysTick->LOAD = buf;
    1606:	4b09      	ldr	r3, [pc, #36]	; (162c <_delay_cycles+0x58>)
    1608:	6059      	str	r1, [r3, #4]
	SysTick->VAL  = buf;
    160a:	6099      	str	r1, [r3, #8]
	while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    160c:	461a      	mov	r2, r3
    160e:	6813      	ldr	r3, [r2, #0]
    1610:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    1614:	d0fb      	beq.n	160e <_delay_cycles+0x3a>
		;
}
    1616:	bc30      	pop	{r4, r5}
    1618:	4770      	bx	lr
	SysTick->LOAD = buf;
    161a:	4b04      	ldr	r3, [pc, #16]	; (162c <_delay_cycles+0x58>)
    161c:	6059      	str	r1, [r3, #4]
	SysTick->VAL  = buf;
    161e:	6099      	str	r1, [r3, #8]
	while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    1620:	461a      	mov	r2, r3
    1622:	6813      	ldr	r3, [r2, #0]
    1624:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    1628:	d0fb      	beq.n	1622 <_delay_cycles+0x4e>
    162a:	4770      	bx	lr
    162c:	e000e010 	.word	0xe000e010

00001630 <_dummy_func_no_return>:
static bool _dummy_func_no_return(uint32_t unused0, uint32_t unused1)
{
	(void)unused0;
	(void)unused1;
	return false;
}
    1630:	2000      	movs	r0, #0
    1632:	4770      	bx	lr

00001634 <_usb_d_dev_handle_setup>:
/**
 * \brief Handles setup received interrupt
 * \param[in] ept Pointer to endpoint information.
 */
static void _usb_d_dev_handle_setup(struct _usb_d_dev_ep *ept)
{
    1634:	b538      	push	{r3, r4, r5, lr}
	uint8_t epn     = USB_EP_GET_N(ept->ep);
    1636:	7c83      	ldrb	r3, [r0, #18]
    1638:	f003 030f 	and.w	r3, r3, #15
	bool    is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    163c:	7cc2      	ldrb	r2, [r0, #19]

	if (!is_ctrl) {
    163e:	f002 0107 	and.w	r1, r2, #7
    1642:	2901      	cmp	r1, #1
    1644:	d00b      	beq.n	165e <_usb_d_dev_handle_setup+0x2a>
}

static inline void hri_usbendpoint_clear_EPINTFLAG_reg(const void *const hw, uint8_t submodule_index,
                                                       hri_usbendpoint_epintflag_reg_t mask)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    1646:	015a      	lsls	r2, r3, #5
    1648:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    164c:	2110      	movs	r1, #16
    164e:	f882 1107 	strb.w	r1, [r2, #263]	; 0x107
	}
}

static inline void hri_usbendpoint_clear_EPINTEN_RXSTP_bit(const void *const hw, uint8_t submodule_index)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = USB_DEVICE_EPINTENSET_RXSTP;
    1652:	015b      	lsls	r3, r3, #5
    1654:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    1658:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
    165c:	bd38      	pop	{r3, r4, r5, pc}
	}
	/* Control transfer:
	 * SETUP transaction will terminate IN/OUT transaction,
	 * and start new transaction with received SETUP packet.
	 */
	if (_usb_d_dev_ep_is_busy(ept)) {
    165e:	f012 0f40 	tst.w	r2, #64	; 0x40
    1662:	d00c      	beq.n	167e <_usb_d_dev_handle_setup+0x4a>
		ept->flags.bits.is_busy = 0;
    1664:	7cc2      	ldrb	r2, [r0, #19]
    1666:	f36f 1286 	bfc	r2, #6, #1
    166a:	74c2      	strb	r2, [r0, #19]
    166c:	015a      	lsls	r2, r3, #5
    166e:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    1672:	2180      	movs	r1, #128	; 0x80
    1674:	f882 1104 	strb.w	r1, [r2, #260]	; 0x104
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    1678:	2140      	movs	r1, #64	; 0x40
    167a:	f882 1105 	strb.w	r1, [r2, #261]	; 0x105

		/* Stop transfer on either direction. */
		_usbd_ep_set_in_rdy(epn, 1, false);
		_usbd_ep_set_out_rdy(epn, 0, false);
	}
	ept->flags.bits.is_stalled = 0;
    167e:	7cc2      	ldrb	r2, [r0, #19]
    1680:	f36f 02c3 	bfc	r2, #3, #1
    1684:	74c2      	strb	r2, [r0, #19]
	bank->STATUS_BK.reg     = 0;
    1686:	4909      	ldr	r1, [pc, #36]	; (16ac <_usb_d_dev_handle_setup+0x78>)
    1688:	015a      	lsls	r2, r3, #5
    168a:	188c      	adds	r4, r1, r2
    168c:	2500      	movs	r5, #0
    168e:	72a5      	strb	r5, [r4, #10]
    1690:	76a5      	strb	r5, [r4, #26]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    1692:	f102 4382 	add.w	r3, r2, #1090519040	; 0x41000000
    1696:	246f      	movs	r4, #111	; 0x6f
    1698:	f883 4107 	strb.w	r4, [r3, #263]	; 0x107
}

static inline void hri_usbendpoint_clear_EPINTEN_reg(const void *const hw, uint8_t submodule_index,
                                                     hri_usbendpoint_epintenset_reg_t mask)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    169c:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    16a0:	f882 4108 	strb.w	r4, [r2, #264]	; 0x108
	_usbd_ep_clear_bank_status(epn, 0);
	_usbd_ep_clear_bank_status(epn, 1);
	_usbd_ep_int_ack(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
	_usbd_ep_int_dis(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
	/* Invoke callback. */
	dev_inst.ep_callbacks.setup(ept->ep);
    16a4:	6e8b      	ldr	r3, [r1, #104]	; 0x68
    16a6:	7c80      	ldrb	r0, [r0, #18]
    16a8:	4798      	blx	r3
    16aa:	bd38      	pop	{r3, r4, r5, pc}
    16ac:	200005b0 	.word	0x200005b0

000016b0 <_usb_d_dev_handle_stall>:
 * \brief Handles stall sent interrupt
 * \param[in] ept Pointer to endpoint information.
 * \param[in] bank_n Bank number.
 */
static void _usb_d_dev_handle_stall(struct _usb_d_dev_ep *ept, const uint8_t bank_n)
{
    16b0:	b508      	push	{r3, lr}
		_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
    16b2:	2320      	movs	r3, #32
    16b4:	fa03 f101 	lsl.w	r1, r3, r1
	hri_usbendpoint_clear_EPINTEN_reg(USB, epn, flags);
    16b8:	b2c9      	uxtb	r1, r1
	uint8_t epn = USB_EP_GET_N(ept->ep);
    16ba:	7c83      	ldrb	r3, [r0, #18]
    16bc:	f003 030f 	and.w	r3, r3, #15
    16c0:	015b      	lsls	r3, r3, #5
    16c2:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    16c6:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
	/* Clear interrupt enable. Leave status there for status check. */
	_usbd_ep_int_stall_en(epn, bank_n, false);
	dev_inst.ep_callbacks.done(ept->ep, USB_TRANS_STALL, ept->trans_count);
    16ca:	4b03      	ldr	r3, [pc, #12]	; (16d8 <_usb_d_dev_handle_stall+0x28>)
    16cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    16ce:	6882      	ldr	r2, [r0, #8]
    16d0:	2101      	movs	r1, #1
    16d2:	7c80      	ldrb	r0, [r0, #18]
    16d4:	4798      	blx	r3
    16d6:	bd08      	pop	{r3, pc}
    16d8:	200005b0 	.word	0x200005b0

000016dc <_usb_d_dev_trans_done>:
 *  \brief Finish the transaction and invoke callback
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_done(struct _usb_d_dev_ep *ept, const int32_t code)
{
    16dc:	b538      	push	{r3, r4, r5, lr}
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    16de:	7c84      	ldrb	r4, [r0, #18]
    16e0:	2cff      	cmp	r4, #255	; 0xff
    16e2:	d003      	beq.n	16ec <_usb_d_dev_trans_done+0x10>
    16e4:	7cc3      	ldrb	r3, [r0, #19]
    16e6:	f013 0f40 	tst.w	r3, #64	; 0x40
    16ea:	d100      	bne.n	16ee <_usb_d_dev_trans_done+0x12>
    16ec:	bd38      	pop	{r3, r4, r5, pc}
		return;
	}
	ept->flags.bits.is_busy = 0;
    16ee:	7cc2      	ldrb	r2, [r0, #19]
    16f0:	f36f 1286 	bfc	r2, #6, #1
    16f4:	74c2      	strb	r2, [r0, #19]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
    16f6:	4a03      	ldr	r2, [pc, #12]	; (1704 <_usb_d_dev_trans_done+0x28>)
    16f8:	6f15      	ldr	r5, [r2, #112]	; 0x70
    16fa:	6882      	ldr	r2, [r0, #8]
    16fc:	4620      	mov	r0, r4
    16fe:	47a8      	blx	r5
    1700:	e7f4      	b.n	16ec <_usb_d_dev_trans_done+0x10>
    1702:	bf00      	nop
    1704:	200005b0 	.word	0x200005b0

00001708 <_usb_d_dev_trans_stop>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_stop(struct _usb_d_dev_ep *ept, bool dir, const int32_t code)
{
    1708:	b530      	push	{r4, r5, lr}
    170a:	b083      	sub	sp, #12
	uint8_t epn = USB_EP_GET_N(ept->ep);
    170c:	7c83      	ldrb	r3, [r0, #18]
	;
	const uint8_t intflags[2] = {USB_D_BANK0_INT_FLAGS, USB_D_BANK1_INT_FLAGS};
    170e:	2425      	movs	r4, #37	; 0x25
    1710:	f88d 4004 	strb.w	r4, [sp, #4]
    1714:	244a      	movs	r4, #74	; 0x4a
    1716:	f88d 4005 	strb.w	r4, [sp, #5]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    171a:	2bff      	cmp	r3, #255	; 0xff
    171c:	d01e      	beq.n	175c <_usb_d_dev_trans_stop+0x54>
    171e:	7cc4      	ldrb	r4, [r0, #19]
    1720:	f014 0f40 	tst.w	r4, #64	; 0x40
    1724:	d01a      	beq.n	175c <_usb_d_dev_trans_stop+0x54>
	uint8_t epn = USB_EP_GET_N(ept->ep);
    1726:	f003 040f 	and.w	r4, r3, #15
		return;
	}
	/* Stop transfer */
	if (dir) {
    172a:	b1c9      	cbz	r1, 1760 <_usb_d_dev_trans_stop+0x58>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    172c:	0163      	lsls	r3, r4, #5
    172e:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    1732:	2580      	movs	r5, #128	; 0x80
    1734:	f883 5104 	strb.w	r5, [r3, #260]	; 0x104
    1738:	460b      	mov	r3, r1
		_usbd_ep_set_in_rdy(epn, 1, false);
	} else {
		/* NAK OUT */
		_usbd_ep_set_out_rdy(epn, 0, false);
	}
	_usbd_ep_int_ack(epn, intflags[dir]);
    173a:	a902      	add	r1, sp, #8
    173c:	440b      	add	r3, r1
    173e:	f813 1c04 	ldrb.w	r1, [r3, #-4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    1742:	0163      	lsls	r3, r4, #5
    1744:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    1748:	f883 1107 	strb.w	r1, [r3, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    174c:	0163      	lsls	r3, r4, #5
    174e:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    1752:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
	_usbd_ep_int_dis(epn, intflags[dir]);
	_usb_d_dev_trans_done(ept, code);
    1756:	4611      	mov	r1, r2
    1758:	4b05      	ldr	r3, [pc, #20]	; (1770 <_usb_d_dev_trans_stop+0x68>)
    175a:	4798      	blx	r3
}
    175c:	b003      	add	sp, #12
    175e:	bd30      	pop	{r4, r5, pc}
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    1760:	0163      	lsls	r3, r4, #5
    1762:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    1766:	2540      	movs	r5, #64	; 0x40
    1768:	f883 5105 	strb.w	r5, [r3, #261]	; 0x105
    176c:	e7e4      	b.n	1738 <_usb_d_dev_trans_stop+0x30>
    176e:	bf00      	nop
    1770:	000016dd 	.word	0x000016dd

00001774 <_usb_d_dev_handle_trfail>:
{
    1774:	b530      	push	{r4, r5, lr}
    1776:	b083      	sub	sp, #12
	uint8_t            epn     = USB_EP_GET_N(ept->ep);
    1778:	7c83      	ldrb	r3, [r0, #18]
    177a:	f003 030f 	and.w	r3, r3, #15
	const uint8_t      fail[2] = {USB_DEVICE_EPINTFLAG_TRFAIL0, USB_DEVICE_EPINTFLAG_TRFAIL1};
    177e:	2204      	movs	r2, #4
    1780:	f88d 2004 	strb.w	r2, [sp, #4]
    1784:	2208      	movs	r2, #8
    1786:	f88d 2005 	strb.w	r2, [sp, #5]
    178a:	015a      	lsls	r2, r3, #5
	uint8_t            eptype
    178c:	460c      	mov	r4, r1
    178e:	b391      	cbz	r1, 17f6 <_usb_d_dev_handle_trfail+0x82>

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_EPTYPE1_bf(const void *const hw,
                                                                                uint8_t           submodule_index)
{
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    1790:	f102 4182 	add.w	r1, r2, #1090519040	; 0x41000000
    1794:	f891 5100 	ldrb.w	r5, [r1, #256]	; 0x100
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE1_Msk) >> USB_DEVICE_EPCFG_EPTYPE1_Pos;
    1798:	f3c5 1502 	ubfx	r5, r5, #4, #3
	st.reg = bank[bank_n].STATUS_BK.reg;
    179c:	eb02 1104 	add.w	r1, r2, r4, lsl #4
    17a0:	4a32      	ldr	r2, [pc, #200]	; (186c <_usb_d_dev_handle_trfail+0xf8>)
    17a2:	440a      	add	r2, r1
    17a4:	7a91      	ldrb	r1, [r2, #10]
    17a6:	b2c9      	uxtb	r1, r1
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
    17a8:	2d02      	cmp	r5, #2
    17aa:	d02c      	beq.n	1806 <_usb_d_dev_handle_trfail+0x92>
	} else if (st.bit.ERRORFLOW) {
    17ac:	f011 0f02 	tst.w	r1, #2
    17b0:	d045      	beq.n	183e <_usb_d_dev_handle_trfail+0xca>
	bool                      is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    17b2:	7cc5      	ldrb	r5, [r0, #19]
		bank[bank_n].STATUS_BK.bit.ERRORFLOW = 0;
    17b4:	7a91      	ldrb	r1, [r2, #10]
    17b6:	f36f 0141 	bfc	r1, #1, #1
    17ba:	7291      	strb	r1, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    17bc:	aa02      	add	r2, sp, #8
    17be:	4422      	add	r2, r4
    17c0:	f812 1c04 	ldrb.w	r1, [r2, #-4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    17c4:	015a      	lsls	r2, r3, #5
    17c6:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    17ca:	f882 1107 	strb.w	r1, [r2, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    17ce:	015b      	lsls	r3, r3, #5
    17d0:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    17d4:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
		if (is_ctrl && _usb_d_dev_ep_is_busy(ept)) {
    17d8:	f005 0307 	and.w	r3, r5, #7
    17dc:	2b01      	cmp	r3, #1
    17de:	d143      	bne.n	1868 <_usb_d_dev_handle_trfail+0xf4>
    17e0:	7cc3      	ldrb	r3, [r0, #19]
    17e2:	f013 0f40 	tst.w	r3, #64	; 0x40
    17e6:	d03f      	beq.n	1868 <_usb_d_dev_handle_trfail+0xf4>
			if (bank_n != _usb_d_dev_ep_is_in(ept)) {
    17e8:	09d9      	lsrs	r1, r3, #7
    17ea:	428c      	cmp	r4, r1
    17ec:	d03c      	beq.n	1868 <_usb_d_dev_handle_trfail+0xf4>
				_usb_d_dev_trans_stop(ept, _usb_d_dev_ep_is_in(ept), USB_TRANS_DONE);
    17ee:	2200      	movs	r2, #0
    17f0:	4b1f      	ldr	r3, [pc, #124]	; (1870 <_usb_d_dev_handle_trfail+0xfc>)
    17f2:	4798      	blx	r3
    17f4:	e038      	b.n	1868 <_usb_d_dev_handle_trfail+0xf4>
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    17f6:	0159      	lsls	r1, r3, #5
    17f8:	f101 4182 	add.w	r1, r1, #1090519040	; 0x41000000
    17fc:	f891 5100 	ldrb.w	r5, [r1, #256]	; 0x100
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE0_Msk) >> USB_DEVICE_EPCFG_EPTYPE0_Pos;
    1800:	f005 0507 	and.w	r5, r5, #7
    1804:	e7ca      	b.n	179c <_usb_d_dev_handle_trfail+0x28>
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
    1806:	f011 0f01 	tst.w	r1, #1
    180a:	d0cf      	beq.n	17ac <_usb_d_dev_handle_trfail+0x38>
		bank[bank_n].STATUS_BK.bit.CRCERR = 0;
    180c:	7a91      	ldrb	r1, [r2, #10]
    180e:	f36f 0100 	bfc	r1, #0, #1
    1812:	7291      	strb	r1, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    1814:	aa02      	add	r2, sp, #8
    1816:	4422      	add	r2, r4
    1818:	f812 1c04 	ldrb.w	r1, [r2, #-4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    181c:	015a      	lsls	r2, r3, #5
    181e:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    1822:	f882 1107 	strb.w	r1, [r2, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    1826:	015b      	lsls	r3, r3, #5
    1828:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    182c:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
		_usb_d_dev_trans_stop(ept, bank_n, USB_TRANS_ERROR);
    1830:	2204      	movs	r2, #4
    1832:	1c21      	adds	r1, r4, #0
    1834:	bf18      	it	ne
    1836:	2101      	movne	r1, #1
    1838:	4b0d      	ldr	r3, [pc, #52]	; (1870 <_usb_d_dev_handle_trfail+0xfc>)
    183a:	4798      	blx	r3
    183c:	e014      	b.n	1868 <_usb_d_dev_handle_trfail+0xf4>
	bank->STATUS_BK.reg     = 0;
    183e:	eb04 0143 	add.w	r1, r4, r3, lsl #1
    1842:	4a0a      	ldr	r2, [pc, #40]	; (186c <_usb_d_dev_handle_trfail+0xf8>)
    1844:	eb02 1201 	add.w	r2, r2, r1, lsl #4
    1848:	2100      	movs	r1, #0
    184a:	7291      	strb	r1, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    184c:	aa02      	add	r2, sp, #8
    184e:	4414      	add	r4, r2
    1850:	f814 1c04 	ldrb.w	r1, [r4, #-4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    1854:	015a      	lsls	r2, r3, #5
    1856:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    185a:	f882 1107 	strb.w	r1, [r2, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    185e:	015b      	lsls	r3, r3, #5
    1860:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    1864:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
}
    1868:	b003      	add	sp, #12
    186a:	bd30      	pop	{r4, r5, pc}
    186c:	200005b0 	.word	0x200005b0
    1870:	00001709 	.word	0x00001709

00001874 <_usb_d_dev_reset_epts>:
{
    1874:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1878:	4d0c      	ldr	r5, [pc, #48]	; (18ac <_usb_d_dev_reset_epts+0x38>)
    187a:	f105 0474 	add.w	r4, r5, #116	; 0x74
    187e:	f505 7594 	add.w	r5, r5, #296	; 0x128
		_usb_d_dev_trans_done(&dev_inst.ep[i], USB_TRANS_RESET);
    1882:	f04f 0803 	mov.w	r8, #3
    1886:	4f0a      	ldr	r7, [pc, #40]	; (18b0 <_usb_d_dev_reset_epts+0x3c>)
		dev_inst.ep[i].ep       = 0xFF;
    1888:	26ff      	movs	r6, #255	; 0xff
		_usb_d_dev_trans_done(&dev_inst.ep[i], USB_TRANS_RESET);
    188a:	4641      	mov	r1, r8
    188c:	4620      	mov	r0, r4
    188e:	47b8      	blx	r7
		dev_inst.ep[i].ep       = 0xFF;
    1890:	74a6      	strb	r6, [r4, #18]
		dev_inst.ep[i].flags.u8 = 0;
    1892:	2300      	movs	r3, #0
    1894:	74e3      	strb	r3, [r4, #19]
    1896:	3414      	adds	r4, #20
	for (i = 0; i < USB_D_N_EP; i++) {
    1898:	42ac      	cmp	r4, r5
    189a:	d1f6      	bne.n	188a <_usb_d_dev_reset_epts+0x16>
	memset(prvt_inst.desc_table, 0, sizeof(UsbDeviceDescriptor) * (CONF_USB_D_MAX_EP_N + 1));
    189c:	2260      	movs	r2, #96	; 0x60
    189e:	4619      	mov	r1, r3
    18a0:	4802      	ldr	r0, [pc, #8]	; (18ac <_usb_d_dev_reset_epts+0x38>)
    18a2:	4b04      	ldr	r3, [pc, #16]	; (18b4 <_usb_d_dev_reset_epts+0x40>)
    18a4:	4798      	blx	r3
    18a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    18aa:	bf00      	nop
    18ac:	200005b0 	.word	0x200005b0
    18b0:	000016dd 	.word	0x000016dd
    18b4:	000035dd 	.word	0x000035dd

000018b8 <_usb_d_dev_in_next>:
{
    18b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    18bc:	4605      	mov	r5, r0
	uint8_t            epn         = USB_EP_GET_N(ept->ep);
    18be:	7c84      	ldrb	r4, [r0, #18]
    18c0:	f004 040f 	and.w	r4, r4, #15
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
    18c4:	4688      	mov	r8, r1
    18c6:	2900      	cmp	r1, #0
    18c8:	f000 809f 	beq.w	1a0a <_usb_d_dev_in_next+0x152>
	UsbDeviceDescBank *bank        = &prvt_inst.desc_table[epn].DeviceDescBank[0];
    18cc:	4b58      	ldr	r3, [pc, #352]	; (1a30 <_usb_d_dev_in_next+0x178>)
    18ce:	eb03 1344 	add.w	r3, r3, r4, lsl #5
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
    18d2:	6958      	ldr	r0, [r3, #20]
    18d4:	f3c0 0e0d 	ubfx	lr, r0, #0, #14
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    18d8:	8a2b      	ldrh	r3, [r5, #16]
    18da:	f240 32ff 	movw	r2, #1023	; 0x3ff
    18de:	4293      	cmp	r3, r2
    18e0:	f000 808d 	beq.w	19fe <_usb_d_dev_in_next+0x146>
    18e4:	3b01      	subs	r3, #1
    18e6:	b298      	uxth	r0, r3
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    18e8:	7cef      	ldrb	r7, [r5, #19]
    18ea:	f007 0707 	and.w	r7, r7, #7
	if (isr) {
    18ee:	f1b8 0f00 	cmp.w	r8, #0
    18f2:	d005      	beq.n	1900 <_usb_d_dev_in_next+0x48>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    18f4:	0162      	lsls	r2, r4, #5
    18f6:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    18fa:	2302      	movs	r3, #2
    18fc:	f882 3107 	strb.w	r3, [r2, #263]	; 0x107
	ept->trans_count += trans_count;
    1900:	68a9      	ldr	r1, [r5, #8]
    1902:	eb0e 0301 	add.w	r3, lr, r1
    1906:	60ab      	str	r3, [r5, #8]
	if (ept->trans_count < ept->trans_size) {
    1908:	686e      	ldr	r6, [r5, #4]
    190a:	42b3      	cmp	r3, r6
    190c:	d23f      	bcs.n	198e <_usb_d_dev_in_next+0xd6>
		trans_next = ept->trans_size - ept->trans_count;
    190e:	1af6      	subs	r6, r6, r3
    1910:	b2b6      	uxth	r6, r6
		if (ept->flags.bits.use_cache) {
    1912:	7cea      	ldrb	r2, [r5, #19]
    1914:	f012 0f20 	tst.w	r2, #32
    1918:	d02d      	beq.n	1976 <_usb_d_dev_in_next+0xbe>
    191a:	8a2a      	ldrh	r2, [r5, #16]
    191c:	4296      	cmp	r6, r2
    191e:	bf28      	it	cs
    1920:	4616      	movcs	r6, r2
			memcpy(ept->cache, &ept->trans_buf[ept->trans_count], trans_next);
    1922:	6829      	ldr	r1, [r5, #0]
    1924:	4632      	mov	r2, r6
    1926:	4419      	add	r1, r3
    1928:	68e8      	ldr	r0, [r5, #12]
    192a:	4b42      	ldr	r3, [pc, #264]	; (1a34 <_usb_d_dev_in_next+0x17c>)
    192c:	4798      	blx	r3
			_usbd_ep_set_buf(epn, 1, (uint32_t)ept->cache);
    192e:	68ea      	ldr	r2, [r5, #12]
	bank->ADDR.reg          = addr;
    1930:	4b3f      	ldr	r3, [pc, #252]	; (1a30 <_usb_d_dev_in_next+0x178>)
    1932:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    1936:	611a      	str	r2, [r3, #16]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
    1938:	4b3d      	ldr	r3, [pc, #244]	; (1a30 <_usb_d_dev_in_next+0x178>)
    193a:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    193e:	695a      	ldr	r2, [r3, #20]
    1940:	f366 020d 	bfi	r2, r6, #0, #14
    1944:	615a      	str	r2, [r3, #20]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
    1946:	695a      	ldr	r2, [r3, #20]
    1948:	f36f 329b 	bfc	r2, #14, #14
    194c:	615a      	str	r2, [r3, #20]
	if (!isr) {
    194e:	f1b8 0f00 	cmp.w	r8, #0
    1952:	d108      	bne.n	1966 <_usb_d_dev_in_next+0xae>
			inten = USB_D_BANK1_INT_FLAGS;
    1954:	2f01      	cmp	r7, #1
    1956:	bf0c      	ite	eq
    1958:	224e      	moveq	r2, #78	; 0x4e
    195a:	224a      	movne	r2, #74	; 0x4a
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    195c:	0163      	lsls	r3, r4, #5
    195e:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    1962:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    1966:	0164      	lsls	r4, r4, #5
    1968:	f104 4482 	add.w	r4, r4, #1090519040	; 0x41000000
    196c:	2380      	movs	r3, #128	; 0x80
    196e:	f884 3105 	strb.w	r3, [r4, #261]	; 0x105
    1972:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1976:	f5b6 5f00 	cmp.w	r6, #8192	; 0x2000
    197a:	bf28      	it	cs
    197c:	f44f 5600 	movcs.w	r6, #8192	; 0x2000
			_usbd_ep_set_buf(epn, 1, (uint32_t)&ept->trans_buf[ept->trans_count]);
    1980:	6829      	ldr	r1, [r5, #0]
    1982:	440b      	add	r3, r1
	bank->ADDR.reg          = addr;
    1984:	4a2a      	ldr	r2, [pc, #168]	; (1a30 <_usb_d_dev_in_next+0x178>)
    1986:	eb02 1244 	add.w	r2, r2, r4, lsl #5
    198a:	6113      	str	r3, [r2, #16]
    198c:	e7d4      	b.n	1938 <_usb_d_dev_in_next+0x80>
	} else if (ept->flags.bits.need_zlp) {
    198e:	7ceb      	ldrb	r3, [r5, #19]
    1990:	f013 0f10 	tst.w	r3, #16
    1994:	d00f      	beq.n	19b6 <_usb_d_dev_in_next+0xfe>
		ept->flags.bits.need_zlp = 0;
    1996:	7ceb      	ldrb	r3, [r5, #19]
    1998:	f36f 1304 	bfc	r3, #4, #1
    199c:	74eb      	strb	r3, [r5, #19]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
    199e:	4b24      	ldr	r3, [pc, #144]	; (1a30 <_usb_d_dev_in_next+0x178>)
    19a0:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    19a4:	695a      	ldr	r2, [r3, #20]
    19a6:	f36f 020d 	bfc	r2, #0, #14
    19aa:	615a      	str	r2, [r3, #20]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
    19ac:	695a      	ldr	r2, [r3, #20]
    19ae:	f36f 329b 	bfc	r2, #14, #14
    19b2:	615a      	str	r2, [r3, #20]
    19b4:	e7cb      	b.n	194e <_usb_d_dev_in_next+0x96>
	if (is_ctrl) {
    19b6:	2f01      	cmp	r7, #1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    19b8:	ea4f 1444 	mov.w	r4, r4, lsl #5
    19bc:	f104 4482 	add.w	r4, r4, #1090519040	; 0x41000000
    19c0:	bf0c      	ite	eq
    19c2:	234b      	moveq	r3, #75	; 0x4b
    19c4:	234a      	movne	r3, #74	; 0x4a
    19c6:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
	if (last_pkt == ept->size) {
    19ca:	8a2a      	ldrh	r2, [r5, #16]
    19cc:	ea00 030e 	and.w	r3, r0, lr
    19d0:	429a      	cmp	r2, r3
    19d2:	d005      	beq.n	19e0 <_usb_d_dev_in_next+0x128>
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    19d4:	2100      	movs	r1, #0
    19d6:	4628      	mov	r0, r5
    19d8:	4b17      	ldr	r3, [pc, #92]	; (1a38 <_usb_d_dev_in_next+0x180>)
    19da:	4798      	blx	r3
	return;
    19dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ept->flags.bits.is_busy = 0;
    19e0:	7ceb      	ldrb	r3, [r5, #19]
    19e2:	f36f 1386 	bfc	r3, #6, #1
    19e6:	74eb      	strb	r3, [r5, #19]
		if (dev_inst.ep_callbacks.more(ept->ep, ept->trans_count)) {
    19e8:	4b11      	ldr	r3, [pc, #68]	; (1a30 <_usb_d_dev_in_next+0x178>)
    19ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
    19ec:	68a9      	ldr	r1, [r5, #8]
    19ee:	7ca8      	ldrb	r0, [r5, #18]
    19f0:	4798      	blx	r3
    19f2:	b9d0      	cbnz	r0, 1a2a <_usb_d_dev_in_next+0x172>
		ept->flags.bits.is_busy = 1;
    19f4:	7ceb      	ldrb	r3, [r5, #19]
    19f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    19fa:	74eb      	strb	r3, [r5, #19]
    19fc:	e7ea      	b.n	19d4 <_usb_d_dev_in_next+0x11c>
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    19fe:	7cef      	ldrb	r7, [r5, #19]
    1a00:	f007 0707 	and.w	r7, r7, #7
    1a04:	f240 30ff 	movw	r0, #1023	; 0x3ff
    1a08:	e774      	b.n	18f4 <_usb_d_dev_in_next+0x3c>
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    1a0a:	8a03      	ldrh	r3, [r0, #16]
    1a0c:	f240 32ff 	movw	r2, #1023	; 0x3ff
    1a10:	4293      	cmp	r3, r2
    1a12:	d107      	bne.n	1a24 <_usb_d_dev_in_next+0x16c>
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    1a14:	7cef      	ldrb	r7, [r5, #19]
    1a16:	f007 0707 	and.w	r7, r7, #7
    1a1a:	f04f 0e00 	mov.w	lr, #0
    1a1e:	f240 30ff 	movw	r0, #1023	; 0x3ff
    1a22:	e76d      	b.n	1900 <_usb_d_dev_in_next+0x48>
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    1a24:	f04f 0e00 	mov.w	lr, #0
    1a28:	e75c      	b.n	18e4 <_usb_d_dev_in_next+0x2c>
    1a2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1a2e:	bf00      	nop
    1a30:	200005b0 	.word	0x200005b0
    1a34:	000034a9 	.word	0x000034a9
    1a38:	000016dd 	.word	0x000016dd

00001a3c <_usb_d_dev_out_next>:
{
    1a3c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1a40:	4604      	mov	r4, r0
	uint8_t            epn        = USB_EP_GET_N(ept->ep);
    1a42:	7c85      	ldrb	r5, [r0, #18]
    1a44:	f005 050f 	and.w	r5, r5, #15
	uint16_t           trans_size = isr ? bank->PCKSIZE.bit.MULTI_PACKET_SIZE : 0;
    1a48:	4689      	mov	r9, r1
    1a4a:	2900      	cmp	r1, #0
    1a4c:	d056      	beq.n	1afc <_usb_d_dev_out_next+0xc0>
    1a4e:	4b74      	ldr	r3, [pc, #464]	; (1c20 <_usb_d_dev_out_next+0x1e4>)
    1a50:	eb03 1345 	add.w	r3, r3, r5, lsl #5
    1a54:	685a      	ldr	r2, [r3, #4]
    1a56:	f3c2 3a8d 	ubfx	sl, r2, #14, #14
	uint16_t           last_trans = isr ? bank->PCKSIZE.bit.BYTE_COUNT : 0;
    1a5a:	685f      	ldr	r7, [r3, #4]
    1a5c:	f3c7 070d 	ubfx	r7, r7, #0, #14
    1a60:	46bb      	mov	fp, r7
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
    1a62:	8a06      	ldrh	r6, [r0, #16]
    1a64:	f240 33ff 	movw	r3, #1023	; 0x3ff
    1a68:	429e      	cmp	r6, r3
    1a6a:	f000 80ba 	beq.w	1be2 <_usb_d_dev_out_next+0x1a6>
    1a6e:	3e01      	subs	r6, #1
    1a70:	b2b6      	uxth	r6, r6
	uint16_t           last_pkt   = last_trans & size_mask;
    1a72:	ea06 070b 	and.w	r7, r6, fp
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    1a76:	f894 8013 	ldrb.w	r8, [r4, #19]
    1a7a:	f008 0807 	and.w	r8, r8, #7
	if (isr) {
    1a7e:	f1b9 0f00 	cmp.w	r9, #0
    1a82:	d005      	beq.n	1a90 <_usb_d_dev_out_next+0x54>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    1a84:	016b      	lsls	r3, r5, #5
    1a86:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    1a8a:	2201      	movs	r2, #1
    1a8c:	f883 2107 	strb.w	r2, [r3, #263]	; 0x107
	if (ept->flags.bits.use_cache && ept->trans_size) {
    1a90:	7ce3      	ldrb	r3, [r4, #19]
    1a92:	f013 0f20 	tst.w	r3, #32
    1a96:	d00d      	beq.n	1ab4 <_usb_d_dev_out_next+0x78>
    1a98:	6862      	ldr	r2, [r4, #4]
    1a9a:	2a00      	cmp	r2, #0
    1a9c:	d037      	beq.n	1b0e <_usb_d_dev_out_next+0xd2>
		uint16_t buf_remain = ept->trans_size - ept->trans_count;
    1a9e:	68a0      	ldr	r0, [r4, #8]
    1aa0:	1a12      	subs	r2, r2, r0
    1aa2:	b292      	uxth	r2, r2
		memcpy(&ept->trans_buf[ept->trans_count], ept->cache, (buf_remain > last_pkt) ? last_pkt : buf_remain);
    1aa4:	6823      	ldr	r3, [r4, #0]
    1aa6:	42ba      	cmp	r2, r7
    1aa8:	bf28      	it	cs
    1aaa:	463a      	movcs	r2, r7
    1aac:	68e1      	ldr	r1, [r4, #12]
    1aae:	4418      	add	r0, r3
    1ab0:	4b5c      	ldr	r3, [pc, #368]	; (1c24 <_usb_d_dev_out_next+0x1e8>)
    1ab2:	4798      	blx	r3
	if (ept->trans_size == 0 && ept->flags.bits.need_zlp) {
    1ab4:	6863      	ldr	r3, [r4, #4]
    1ab6:	b353      	cbz	r3, 1b0e <_usb_d_dev_out_next+0xd2>
	} else if (isr && last_pkt < ept->size) {
    1ab8:	f1b9 0f00 	cmp.w	r9, #0
    1abc:	d040      	beq.n	1b40 <_usb_d_dev_out_next+0x104>
    1abe:	8a22      	ldrh	r2, [r4, #16]
    1ac0:	42ba      	cmp	r2, r7
    1ac2:	d93d      	bls.n	1b40 <_usb_d_dev_out_next+0x104>
		ept->flags.bits.need_zlp = 0;
    1ac4:	7ce3      	ldrb	r3, [r4, #19]
    1ac6:	f36f 1304 	bfc	r3, #4, #1
    1aca:	74e3      	strb	r3, [r4, #19]
		ept->trans_count += last_trans;
    1acc:	68a3      	ldr	r3, [r4, #8]
    1ace:	445b      	add	r3, fp
    1ad0:	60a3      	str	r3, [r4, #8]
	if (is_ctrl) {
    1ad2:	f1b8 0f01 	cmp.w	r8, #1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    1ad6:	ea4f 1345 	mov.w	r3, r5, lsl #5
    1ada:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    1ade:	bf0c      	ite	eq
    1ae0:	222d      	moveq	r2, #45	; 0x2d
    1ae2:	2225      	movne	r2, #37	; 0x25
    1ae4:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
	if (0 == epn) {
    1ae8:	b915      	cbnz	r5, 1af0 <_usb_d_dev_out_next+0xb4>
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    1aea:	68e2      	ldr	r2, [r4, #12]
	bank->ADDR.reg          = addr;
    1aec:	4b4c      	ldr	r3, [pc, #304]	; (1c20 <_usb_d_dev_out_next+0x1e4>)
    1aee:	601a      	str	r2, [r3, #0]
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    1af0:	2100      	movs	r1, #0
    1af2:	4620      	mov	r0, r4
    1af4:	4b4c      	ldr	r3, [pc, #304]	; (1c28 <_usb_d_dev_out_next+0x1ec>)
    1af6:	4798      	blx	r3
	return;
    1af8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
    1afc:	8a06      	ldrh	r6, [r0, #16]
    1afe:	f240 33ff 	movw	r3, #1023	; 0x3ff
    1b02:	429e      	cmp	r6, r3
    1b04:	d07b      	beq.n	1bfe <_usb_d_dev_out_next+0x1c2>
    1b06:	f04f 0b00 	mov.w	fp, #0
    1b0a:	46da      	mov	sl, fp
    1b0c:	e7af      	b.n	1a6e <_usb_d_dev_out_next+0x32>
	if (ept->trans_size == 0 && ept->flags.bits.need_zlp) {
    1b0e:	7ce3      	ldrb	r3, [r4, #19]
    1b10:	f013 0f10 	tst.w	r3, #16
    1b14:	d06c      	beq.n	1bf0 <_usb_d_dev_out_next+0x1b4>
		ept->flags.bits.need_zlp  = 0;
    1b16:	7ce3      	ldrb	r3, [r4, #19]
		ept->flags.bits.use_cache = 1;
    1b18:	f003 03ef 	and.w	r3, r3, #239	; 0xef
    1b1c:	f043 0320 	orr.w	r3, r3, #32
    1b20:	74e3      	strb	r3, [r4, #19]
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    1b22:	68e0      	ldr	r0, [r4, #12]
	bank->ADDR.reg          = addr;
    1b24:	493e      	ldr	r1, [pc, #248]	; (1c20 <_usb_d_dev_out_next+0x1e4>)
    1b26:	016a      	lsls	r2, r5, #5
    1b28:	188b      	adds	r3, r1, r2
    1b2a:	5088      	str	r0, [r1, r2]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    1b2c:	8a21      	ldrh	r1, [r4, #16]
    1b2e:	685a      	ldr	r2, [r3, #4]
    1b30:	f361 329b 	bfi	r2, r1, #14, #14
    1b34:	605a      	str	r2, [r3, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    1b36:	685a      	ldr	r2, [r3, #4]
    1b38:	f36f 020d 	bfc	r2, #0, #14
    1b3c:	605a      	str	r2, [r3, #4]
    1b3e:	e01d      	b.n	1b7c <_usb_d_dev_out_next+0x140>
		ept->trans_count += trans_size;
    1b40:	68a2      	ldr	r2, [r4, #8]
    1b42:	4452      	add	r2, sl
    1b44:	60a2      	str	r2, [r4, #8]
		if (ept->trans_count < ept->trans_size) {
    1b46:	4293      	cmp	r3, r2
    1b48:	d9c3      	bls.n	1ad2 <_usb_d_dev_out_next+0x96>
			trans_next = ept->trans_size - ept->trans_count;
    1b4a:	1a9b      	subs	r3, r3, r2
    1b4c:	b29b      	uxth	r3, r3
			if (ept->flags.bits.use_cache) {
    1b4e:	7ce1      	ldrb	r1, [r4, #19]
    1b50:	f011 0f20 	tst.w	r1, #32
    1b54:	d026      	beq.n	1ba4 <_usb_d_dev_out_next+0x168>
    1b56:	8a22      	ldrh	r2, [r4, #16]
    1b58:	4293      	cmp	r3, r2
    1b5a:	bf28      	it	cs
    1b5c:	4613      	movcs	r3, r2
				_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    1b5e:	68e0      	ldr	r0, [r4, #12]
	bank->ADDR.reg          = addr;
    1b60:	016a      	lsls	r2, r5, #5
    1b62:	492f      	ldr	r1, [pc, #188]	; (1c20 <_usb_d_dev_out_next+0x1e4>)
    1b64:	5088      	str	r0, [r1, r2]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    1b66:	4a2e      	ldr	r2, [pc, #184]	; (1c20 <_usb_d_dev_out_next+0x1e4>)
    1b68:	eb02 1245 	add.w	r2, r2, r5, lsl #5
    1b6c:	6851      	ldr	r1, [r2, #4]
    1b6e:	f363 319b 	bfi	r1, r3, #14, #14
    1b72:	6051      	str	r1, [r2, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    1b74:	6853      	ldr	r3, [r2, #4]
    1b76:	f36f 030d 	bfc	r3, #0, #14
    1b7a:	6053      	str	r3, [r2, #4]
	if (!isr) {
    1b7c:	f1b9 0f00 	cmp.w	r9, #0
    1b80:	d108      	bne.n	1b94 <_usb_d_dev_out_next+0x158>
		if (is_ctrl) {
    1b82:	f1b8 0f01 	cmp.w	r8, #1
    1b86:	d025      	beq.n	1bd4 <_usb_d_dev_out_next+0x198>
			inten = USB_D_BANK0_INT_FLAGS;
    1b88:	2225      	movs	r2, #37	; 0x25
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    1b8a:	016b      	lsls	r3, r5, #5
    1b8c:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    1b90:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    1b94:	016d      	lsls	r5, r5, #5
    1b96:	f105 4582 	add.w	r5, r5, #1090519040	; 0x41000000
    1b9a:	2340      	movs	r3, #64	; 0x40
    1b9c:	f885 3104 	strb.w	r3, [r5, #260]	; 0x104
    1ba0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if (trans_next > ept->size) {
    1ba4:	8a21      	ldrh	r1, [r4, #16]
    1ba6:	428b      	cmp	r3, r1
    1ba8:	d90a      	bls.n	1bc0 <_usb_d_dev_out_next+0x184>
					if (trans_next > USB_D_DEV_TRANS_MAX) {
    1baa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
    1bae:	d80e      	bhi.n	1bce <_usb_d_dev_out_next+0x192>
    1bb0:	ea23 0306 	bic.w	r3, r3, r6
				_usbd_ep_set_buf(epn, 0, (uint32_t)&ept->trans_buf[ept->trans_count]);
    1bb4:	6821      	ldr	r1, [r4, #0]
    1bb6:	440a      	add	r2, r1
	bank->ADDR.reg          = addr;
    1bb8:	0169      	lsls	r1, r5, #5
    1bba:	4819      	ldr	r0, [pc, #100]	; (1c20 <_usb_d_dev_out_next+0x1e4>)
    1bbc:	5042      	str	r2, [r0, r1]
    1bbe:	e7d2      	b.n	1b66 <_usb_d_dev_out_next+0x12a>
				} else if (trans_next < ept->size) {
    1bc0:	428b      	cmp	r3, r1
    1bc2:	d2f7      	bcs.n	1bb4 <_usb_d_dev_out_next+0x178>
					ept->flags.bits.use_cache = 1;
    1bc4:	7ce1      	ldrb	r1, [r4, #19]
    1bc6:	f041 0120 	orr.w	r1, r1, #32
    1bca:	74e1      	strb	r1, [r4, #19]
    1bcc:	e7f2      	b.n	1bb4 <_usb_d_dev_out_next+0x178>
						trans_next = USB_D_DEV_TRANS_MAX;
    1bce:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    1bd2:	e7ef      	b.n	1bb4 <_usb_d_dev_out_next+0x178>
	bank->STATUS_BK.reg     = 0;
    1bd4:	4b12      	ldr	r3, [pc, #72]	; (1c20 <_usb_d_dev_out_next+0x1e4>)
    1bd6:	eb03 1345 	add.w	r3, r3, r5, lsl #5
    1bda:	2200      	movs	r2, #0
    1bdc:	769a      	strb	r2, [r3, #26]
			inten = USB_D_BANK0_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL1;
    1bde:	222d      	movs	r2, #45	; 0x2d
    1be0:	e7d3      	b.n	1b8a <_usb_d_dev_out_next+0x14e>
	uint16_t           last_pkt   = last_trans & size_mask;
    1be2:	f3c7 0709 	ubfx	r7, r7, #0, #10
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    1be6:	f890 8013 	ldrb.w	r8, [r0, #19]
    1bea:	f008 0807 	and.w	r8, r8, #7
    1bee:	e749      	b.n	1a84 <_usb_d_dev_out_next+0x48>
	} else if (isr && last_pkt < ept->size) {
    1bf0:	f1b9 0f00 	cmp.w	r9, #0
    1bf4:	d10b      	bne.n	1c0e <_usb_d_dev_out_next+0x1d2>
		ept->trans_count += trans_size;
    1bf6:	68a3      	ldr	r3, [r4, #8]
    1bf8:	4453      	add	r3, sl
    1bfa:	60a3      	str	r3, [r4, #8]
    1bfc:	e769      	b.n	1ad2 <_usb_d_dev_out_next+0x96>
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    1bfe:	f890 8013 	ldrb.w	r8, [r0, #19]
    1c02:	f008 0807 	and.w	r8, r8, #7
	uint16_t           last_pkt   = last_trans & size_mask;
    1c06:	2700      	movs	r7, #0
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    1c08:	46bb      	mov	fp, r7
    1c0a:	46ba      	mov	sl, r7
    1c0c:	e740      	b.n	1a90 <_usb_d_dev_out_next+0x54>
	} else if (isr && last_pkt < ept->size) {
    1c0e:	8a23      	ldrh	r3, [r4, #16]
    1c10:	42bb      	cmp	r3, r7
    1c12:	f63f af57 	bhi.w	1ac4 <_usb_d_dev_out_next+0x88>
		ept->trans_count += trans_size;
    1c16:	68a3      	ldr	r3, [r4, #8]
    1c18:	4453      	add	r3, sl
    1c1a:	60a3      	str	r3, [r4, #8]
    1c1c:	e759      	b.n	1ad2 <_usb_d_dev_out_next+0x96>
    1c1e:	bf00      	nop
    1c20:	200005b0 	.word	0x200005b0
    1c24:	000034a9 	.word	0x000034a9
    1c28:	000016dd 	.word	0x000016dd

00001c2c <_usb_d_dev_handler>:
{
    1c2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	uint16_t epint = hw->DEVICE.EPINTSMRY.reg;
    1c30:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    1c34:	8c1e      	ldrh	r6, [r3, #32]
    1c36:	b2b6      	uxth	r6, r6
	if (0 == epint) {
    1c38:	b146      	cbz	r6, 1c4c <_usb_d_dev_handler+0x20>
    1c3a:	4d91      	ldr	r5, [pc, #580]	; (1e80 <_usb_d_dev_handler+0x254>)
	uint32_t lpm_variable = 0;
    1c3c:	2400      	movs	r4, #0
		if ((ept->flags.bits.eptype == 0x1) && !_usb_d_dev_ep_is_busy(ept)) {
    1c3e:	f1a5 0774 	sub.w	r7, r5, #116	; 0x74
			_usb_d_dev_handle_setup(ept);
    1c42:	f8df 9258 	ldr.w	r9, [pc, #600]	; 1e9c <_usb_d_dev_handler+0x270>
			_usb_d_dev_handle_trfail(ept, 1);
    1c46:	f8df 8258 	ldr.w	r8, [pc, #600]	; 1ea0 <_usb_d_dev_handler+0x274>
    1c4a:	e0d3      	b.n	1df4 <_usb_d_dev_handler+0x1c8>
	return tmp;
}

static inline hri_usbdevice_intflag_reg_t hri_usbdevice_read_INTFLAG_reg(const void *const hw)
{
	return ((Usb *)hw)->DEVICE.INTFLAG.reg;
    1c4c:	8b99      	ldrh	r1, [r3, #28]
	return tmp;
}

static inline hri_usbdevice_intenset_reg_t hri_usbdevice_read_INTEN_reg(const void *const hw)
{
	return ((Usb *)hw)->DEVICE.INTENSET.reg;
    1c4e:	8b1b      	ldrh	r3, [r3, #24]
    1c50:	b29b      	uxth	r3, r3
	flags &= hri_usbdevice_read_INTEN_reg(USB);
    1c52:	400b      	ands	r3, r1
	if (flags & USB_DEVICE_INTFLAG_SOF) {
    1c54:	f013 0f04 	tst.w	r3, #4
    1c58:	d11d      	bne.n	1c96 <_usb_d_dev_handler+0x6a>
	if (flags & USB_DEVICE_INTFLAG_LPMSUSP) {
    1c5a:	f413 7f00 	tst.w	r3, #512	; 0x200
    1c5e:	d123      	bne.n	1ca8 <_usb_d_dev_handler+0x7c>
	} else if (flags & USB_DEVICE_INTFLAG_RAMACER) {
    1c60:	f013 0f80 	tst.w	r3, #128	; 0x80
    1c64:	d147      	bne.n	1cf6 <_usb_d_dev_handler+0xca>
	} else if (flags & USB_D_WAKEUP_INT_FLAGS) {
    1c66:	f013 0f70 	tst.w	r3, #112	; 0x70
    1c6a:	d14f      	bne.n	1d0c <_usb_d_dev_handler+0xe0>
	} else if (flags & USB_DEVICE_INTFLAG_EORST) {
    1c6c:	f013 0f08 	tst.w	r3, #8
    1c70:	d16e      	bne.n	1d50 <_usb_d_dev_handler+0x124>
	} else if (flags & USB_DEVICE_INTFLAG_SUSPEND) {
    1c72:	f013 0f01 	tst.w	r3, #1
    1c76:	d0e0      	beq.n	1c3a <_usb_d_dev_handler+0xe>
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    1c78:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    1c7c:	f240 2201 	movw	r2, #513	; 0x201
    1c80:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = ~data;
}

static inline void hri_usbdevice_clear_INTEN_reg(const void *const hw, hri_usbdevice_intenset_reg_t mask)
{
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    1c82:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    1c84:	2270      	movs	r2, #112	; 0x70
    1c86:	831a      	strh	r2, [r3, #24]
	dev_inst.callbacks.event(USB_EV_SUSPEND, 0);
    1c88:	4b7e      	ldr	r3, [pc, #504]	; (1e84 <_usb_d_dev_handler+0x258>)
    1c8a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    1c8c:	2100      	movs	r1, #0
    1c8e:	2004      	movs	r0, #4
    1c90:	4798      	blx	r3
    1c92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    1c96:	2204      	movs	r2, #4
    1c98:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    1c9c:	839a      	strh	r2, [r3, #28]
	dev_inst.callbacks.sof();
    1c9e:	4b79      	ldr	r3, [pc, #484]	; (1e84 <_usb_d_dev_handler+0x258>)
    1ca0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    1ca2:	4798      	blx	r3
    1ca4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    1ca8:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    1cac:	f240 2201 	movw	r2, #513	; 0x201
    1cb0:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    1cb2:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    1cb4:	2270      	movs	r2, #112	; 0x70
    1cb6:	831a      	strh	r2, [r3, #24]
		if (bank->EXTREG.bit.SUBPID == 0x3) {
    1cb8:	4b72      	ldr	r3, [pc, #456]	; (1e84 <_usb_d_dev_handler+0x258>)
    1cba:	891b      	ldrh	r3, [r3, #8]
    1cbc:	f003 030f 	and.w	r3, r3, #15
    1cc0:	2b03      	cmp	r3, #3
    1cc2:	d00e      	beq.n	1ce2 <_usb_d_dev_handler+0xb6>
    1cc4:	4b6f      	ldr	r3, [pc, #444]	; (1e84 <_usb_d_dev_handler+0x258>)
    1cc6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    1cc8:	f003 030f 	and.w	r3, r3, #15
    1ccc:	2b03      	cmp	r3, #3
		UsbDeviceDescBank *bank = &prvt_inst.desc_table[i].DeviceDescBank[0];
    1cce:	bf08      	it	eq
    1cd0:	2201      	moveq	r2, #1
		if (bank->EXTREG.bit.SUBPID == 0x3) {
    1cd2:	d007      	beq.n	1ce4 <_usb_d_dev_handler+0xb8>
	uint32_t lpm_variable = 0;
    1cd4:	2100      	movs	r1, #0
	dev_inst.callbacks.event(USB_EV_LPM_SUSPEND, lpm_variable);
    1cd6:	4b6b      	ldr	r3, [pc, #428]	; (1e84 <_usb_d_dev_handler+0x258>)
    1cd8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    1cda:	2003      	movs	r0, #3
    1cdc:	4798      	blx	r3
    1cde:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		UsbDeviceDescBank *bank = &prvt_inst.desc_table[i].DeviceDescBank[0];
    1ce2:	2200      	movs	r2, #0
			lpm_variable = bank->EXTREG.bit.VARIABLE;
    1ce4:	4b67      	ldr	r3, [pc, #412]	; (1e84 <_usb_d_dev_handler+0x258>)
    1ce6:	eb03 1342 	add.w	r3, r3, r2, lsl #5
    1cea:	8919      	ldrh	r1, [r3, #8]
    1cec:	f3c1 110a 	ubfx	r1, r1, #4, #11
			bank->EXTREG.reg = 0;
    1cf0:	2200      	movs	r2, #0
    1cf2:	811a      	strh	r2, [r3, #8]
    1cf4:	e7ef      	b.n	1cd6 <_usb_d_dev_handler+0xaa>
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    1cf6:	2280      	movs	r2, #128	; 0x80
    1cf8:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    1cfc:	839a      	strh	r2, [r3, #28]
	dev_inst.callbacks.event(USB_EV_ERROR, 0);
    1cfe:	4b61      	ldr	r3, [pc, #388]	; (1e84 <_usb_d_dev_handler+0x258>)
    1d00:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    1d02:	2100      	movs	r1, #0
    1d04:	2005      	movs	r0, #5
    1d06:	4798      	blx	r3
    1d08:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    1d0c:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    1d10:	2270      	movs	r2, #112	; 0x70
    1d12:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    1d14:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    1d16:	f240 2201 	movw	r2, #513	; 0x201
    1d1a:	831a      	strh	r2, [r3, #24]
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
    1d1c:	4b5a      	ldr	r3, [pc, #360]	; (1e88 <_usb_d_dev_handler+0x25c>)
    1d1e:	f893 3020 	ldrb.w	r3, [r3, #32]
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(OSCCTRL)) {
    1d22:	f013 0f01 	tst.w	r3, #1
    1d26:	d00d      	beq.n	1d44 <_usb_d_dev_handler+0x118>
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    1d28:	4a57      	ldr	r2, [pc, #348]	; (1e88 <_usb_d_dev_handler+0x25c>)
    1d2a:	6913      	ldr	r3, [r2, #16]
	tmp &= mask;
    1d2c:	f403 6310 	and.w	r3, r3, #2304	; 0x900
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, (OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC))
    1d30:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
    1d34:	d1f9      	bne.n	1d2a <_usb_d_dev_handler+0xfe>
	dev_inst.callbacks.event(USB_EV_WAKEUP, 0);
    1d36:	4b53      	ldr	r3, [pc, #332]	; (1e84 <_usb_d_dev_handler+0x258>)
    1d38:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    1d3a:	2100      	movs	r1, #0
    1d3c:	2002      	movs	r0, #2
    1d3e:	4798      	blx	r3
    1d40:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    1d44:	4a50      	ldr	r2, [pc, #320]	; (1e88 <_usb_d_dev_handler+0x25c>)
    1d46:	6913      	ldr	r3, [r2, #16]
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, OSCCTRL_STATUS_DFLLRDY) != OSCCTRL_STATUS_DFLLRDY)
    1d48:	f413 7f80 	tst.w	r3, #256	; 0x100
    1d4c:	d0fb      	beq.n	1d46 <_usb_d_dev_handler+0x11a>
    1d4e:	e7f2      	b.n	1d36 <_usb_d_dev_handler+0x10a>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    1d50:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    1d54:	2400      	movs	r4, #0
    1d56:	f883 4100 	strb.w	r4, [r3, #256]	; 0x100
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    1d5a:	2208      	movs	r2, #8
    1d5c:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    1d5e:	2270      	movs	r2, #112	; 0x70
    1d60:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    1d62:	f240 2201 	movw	r2, #513	; 0x201
    1d66:	831a      	strh	r2, [r3, #24]
	_usb_d_dev_reset_epts();
    1d68:	4b48      	ldr	r3, [pc, #288]	; (1e8c <_usb_d_dev_handler+0x260>)
    1d6a:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_RESET, 0);
    1d6c:	4b45      	ldr	r3, [pc, #276]	; (1e84 <_usb_d_dev_handler+0x258>)
    1d6e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    1d70:	4621      	mov	r1, r4
    1d72:	2001      	movs	r0, #1
    1d74:	4798      	blx	r3
    1d76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    1d7a:	f011 0f10 	tst.w	r1, #16
    1d7e:	d109      	bne.n	1d94 <_usb_d_dev_handler+0x168>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    1d80:	f011 0f40 	tst.w	r1, #64	; 0x40
    1d84:	d108      	bne.n	1d98 <_usb_d_dev_handler+0x16c>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    1d86:	f011 0f20 	tst.w	r1, #32
    1d8a:	d02f      	beq.n	1dec <_usb_d_dev_handler+0x1c0>
		_usb_d_dev_handle_stall(ept, 0);
    1d8c:	2100      	movs	r1, #0
    1d8e:	4b40      	ldr	r3, [pc, #256]	; (1e90 <_usb_d_dev_handler+0x264>)
    1d90:	4798      	blx	r3
    1d92:	e02b      	b.n	1dec <_usb_d_dev_handler+0x1c0>
		_usb_d_dev_handle_setup(ept);
    1d94:	47c8      	blx	r9
    1d96:	e029      	b.n	1dec <_usb_d_dev_handler+0x1c0>
		_usb_d_dev_handle_stall(ept, 1);
    1d98:	2101      	movs	r1, #1
    1d9a:	4b3d      	ldr	r3, [pc, #244]	; (1e90 <_usb_d_dev_handler+0x264>)
    1d9c:	4798      	blx	r3
    1d9e:	e025      	b.n	1dec <_usb_d_dev_handler+0x1c0>
	if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    1da0:	f011 0f40 	tst.w	r1, #64	; 0x40
    1da4:	d111      	bne.n	1dca <_usb_d_dev_handler+0x19e>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    1da6:	f011 0f08 	tst.w	r1, #8
    1daa:	d112      	bne.n	1dd2 <_usb_d_dev_handler+0x1a6>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT1) {
    1dac:	f011 0f02 	tst.w	r1, #2
    1db0:	d112      	bne.n	1dd8 <_usb_d_dev_handler+0x1ac>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    1db2:	f003 0307 	and.w	r3, r3, #7
    1db6:	2b01      	cmp	r3, #1
    1db8:	d118      	bne.n	1dec <_usb_d_dev_handler+0x1c0>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    1dba:	f011 0f04 	tst.w	r1, #4
    1dbe:	d10f      	bne.n	1de0 <_usb_d_dev_handler+0x1b4>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    1dc0:	f011 0f10 	tst.w	r1, #16
    1dc4:	d012      	beq.n	1dec <_usb_d_dev_handler+0x1c0>
			_usb_d_dev_handle_setup(ept);
    1dc6:	47c8      	blx	r9
    1dc8:	e010      	b.n	1dec <_usb_d_dev_handler+0x1c0>
		_usb_d_dev_handle_stall(ept, 1);
    1dca:	2101      	movs	r1, #1
    1dcc:	4b30      	ldr	r3, [pc, #192]	; (1e90 <_usb_d_dev_handler+0x264>)
    1dce:	4798      	blx	r3
    1dd0:	e00c      	b.n	1dec <_usb_d_dev_handler+0x1c0>
		_usb_d_dev_handle_trfail(ept, 1);
    1dd2:	2101      	movs	r1, #1
    1dd4:	47c0      	blx	r8
    1dd6:	e009      	b.n	1dec <_usb_d_dev_handler+0x1c0>
		_usb_d_dev_in_next(ept, true);
    1dd8:	2101      	movs	r1, #1
    1dda:	4b2e      	ldr	r3, [pc, #184]	; (1e94 <_usb_d_dev_handler+0x268>)
    1ddc:	4798      	blx	r3
    1dde:	e005      	b.n	1dec <_usb_d_dev_handler+0x1c0>
			_usb_d_dev_handle_trfail(ept, 0);
    1de0:	2100      	movs	r1, #0
    1de2:	47c0      	blx	r8
    1de4:	e002      	b.n	1dec <_usb_d_dev_handler+0x1c0>
		_usb_d_dev_handle_stall(ept, 0);
    1de6:	2100      	movs	r1, #0
    1de8:	4b29      	ldr	r3, [pc, #164]	; (1e90 <_usb_d_dev_handler+0x264>)
    1dea:	4798      	blx	r3
    1dec:	3401      	adds	r4, #1
    1dee:	3514      	adds	r5, #20
	for (i = 0; i < USB_D_N_EP; i++) {
    1df0:	2c09      	cmp	r4, #9
    1df2:	d042      	beq.n	1e7a <_usb_d_dev_handler+0x24e>
    1df4:	4628      	mov	r0, r5
		if (ept->ep == 0xFF) {
    1df6:	7cab      	ldrb	r3, [r5, #18]
    1df8:	2bff      	cmp	r3, #255	; 0xff
    1dfa:	d0f7      	beq.n	1dec <_usb_d_dev_handler+0x1c0>
	if (!(epint & (1u << epn))) {
    1dfc:	f003 030f 	and.w	r3, r3, #15
    1e00:	2101      	movs	r1, #1
    1e02:	4099      	lsls	r1, r3
    1e04:	4231      	tst	r1, r6
    1e06:	d0f1      	beq.n	1dec <_usb_d_dev_handler+0x1c0>
	flags = hw->DEVICE.DeviceEndpoint[epn].EPINTFLAG.reg;
    1e08:	0159      	lsls	r1, r3, #5
    1e0a:	f101 4182 	add.w	r1, r1, #1090519040	; 0x41000000
    1e0e:	f501 7180 	add.w	r1, r1, #256	; 0x100
    1e12:	79c9      	ldrb	r1, [r1, #7]
	mask  = hw->DEVICE.DeviceEndpoint[epn].EPINTENSET.reg;
    1e14:	015b      	lsls	r3, r3, #5
    1e16:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    1e1a:	f893 3109 	ldrb.w	r3, [r3, #265]	; 0x109
	if (flags) {
    1e1e:	4019      	ands	r1, r3
    1e20:	d0e4      	beq.n	1dec <_usb_d_dev_handler+0x1c0>
		if ((ept->flags.bits.eptype == 0x1) && !_usb_d_dev_ep_is_busy(ept)) {
    1e22:	eb04 0284 	add.w	r2, r4, r4, lsl #2
    1e26:	eb07 0282 	add.w	r2, r7, r2, lsl #2
    1e2a:	f892 3087 	ldrb.w	r3, [r2, #135]	; 0x87
    1e2e:	f003 0247 	and.w	r2, r3, #71	; 0x47
    1e32:	2a01      	cmp	r2, #1
    1e34:	d0a1      	beq.n	1d7a <_usb_d_dev_handler+0x14e>
		} else if (_usb_d_dev_ep_is_in(ept)) {
    1e36:	f013 0f80 	tst.w	r3, #128	; 0x80
    1e3a:	d1b1      	bne.n	1da0 <_usb_d_dev_handler+0x174>
	if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    1e3c:	f011 0f20 	tst.w	r1, #32
    1e40:	d1d1      	bne.n	1de6 <_usb_d_dev_handler+0x1ba>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    1e42:	f011 0f04 	tst.w	r1, #4
    1e46:	d10e      	bne.n	1e66 <_usb_d_dev_handler+0x23a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT0) {
    1e48:	f011 0f01 	tst.w	r1, #1
    1e4c:	d10e      	bne.n	1e6c <_usb_d_dev_handler+0x240>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    1e4e:	f003 0307 	and.w	r3, r3, #7
    1e52:	2b01      	cmp	r3, #1
    1e54:	d1ca      	bne.n	1dec <_usb_d_dev_handler+0x1c0>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    1e56:	f011 0f08 	tst.w	r1, #8
    1e5a:	d10b      	bne.n	1e74 <_usb_d_dev_handler+0x248>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    1e5c:	f011 0f10 	tst.w	r1, #16
    1e60:	d0c4      	beq.n	1dec <_usb_d_dev_handler+0x1c0>
			_usb_d_dev_handle_setup(ept);
    1e62:	47c8      	blx	r9
    1e64:	e7c2      	b.n	1dec <_usb_d_dev_handler+0x1c0>
		_usb_d_dev_handle_trfail(ept, 0);
    1e66:	2100      	movs	r1, #0
    1e68:	47c0      	blx	r8
    1e6a:	e7bf      	b.n	1dec <_usb_d_dev_handler+0x1c0>
		_usb_d_dev_out_next(ept, true);
    1e6c:	2101      	movs	r1, #1
    1e6e:	4b0a      	ldr	r3, [pc, #40]	; (1e98 <_usb_d_dev_handler+0x26c>)
    1e70:	4798      	blx	r3
    1e72:	e7bb      	b.n	1dec <_usb_d_dev_handler+0x1c0>
			_usb_d_dev_handle_trfail(ept, 1);
    1e74:	2101      	movs	r1, #1
    1e76:	47c0      	blx	r8
    1e78:	e7b8      	b.n	1dec <_usb_d_dev_handler+0x1c0>
    1e7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    1e7e:	bf00      	nop
    1e80:	20000624 	.word	0x20000624
    1e84:	200005b0 	.word	0x200005b0
    1e88:	40001000 	.word	0x40001000
    1e8c:	00001875 	.word	0x00001875
    1e90:	000016b1 	.word	0x000016b1
    1e94:	000018b9 	.word	0x000018b9
    1e98:	00001a3d 	.word	0x00001a3d
    1e9c:	00001635 	.word	0x00001635
    1ea0:	00001775 	.word	0x00001775

00001ea4 <_usb_d_dev_init>:
{
    1ea4:	b508      	push	{r3, lr}
	return ((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg;
    1ea6:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    1eaa:	789b      	ldrb	r3, [r3, #2]
	if (!hri_usbdevice_is_syncing(hw, USB_SYNCBUSY_SWRST)) {
    1eac:	f013 0f01 	tst.w	r3, #1
    1eb0:	d124      	bne.n	1efc <_usb_d_dev_init+0x58>
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    1eb2:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    1eb6:	7893      	ldrb	r3, [r2, #2]
    1eb8:	f013 0f03 	tst.w	r3, #3
    1ebc:	d1fb      	bne.n	1eb6 <_usb_d_dev_init+0x12>

static inline hri_usb_ctrla_reg_t hri_usb_get_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t mask)
{
	uint8_t tmp;
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
	tmp = ((Usb *)hw)->HOST.CTRLA.reg;
    1ebe:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    1ec2:	781b      	ldrb	r3, [r3, #0]
		if (hri_usbdevice_get_CTRLA_reg(hw, USB_CTRLA_ENABLE)) {
    1ec4:	f013 0f02 	tst.w	r3, #2
    1ec8:	d00f      	beq.n	1eea <_usb_d_dev_init+0x46>
	((Usb *)hw)->HOST.CTRLA.reg &= ~USB_CTRLA_ENABLE;
    1eca:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    1ece:	7813      	ldrb	r3, [r2, #0]
    1ed0:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    1ed4:	7013      	strb	r3, [r2, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    1ed6:	7893      	ldrb	r3, [r2, #2]
    1ed8:	f013 0f03 	tst.w	r3, #3
    1edc:	d1fb      	bne.n	1ed6 <_usb_d_dev_init+0x32>
    1ede:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    1ee2:	7893      	ldrb	r3, [r2, #2]
    1ee4:	f013 0f02 	tst.w	r3, #2
    1ee8:	d1fb      	bne.n	1ee2 <_usb_d_dev_init+0x3e>
}

static inline void hri_usb_write_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t data)
{
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.CTRLA.reg = data;
    1eea:	2201      	movs	r2, #1
    1eec:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    1ef0:	701a      	strb	r2, [r3, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    1ef2:	461a      	mov	r2, r3
    1ef4:	7893      	ldrb	r3, [r2, #2]
    1ef6:	f013 0f03 	tst.w	r3, #3
    1efa:	d1fb      	bne.n	1ef4 <_usb_d_dev_init+0x50>
    1efc:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    1f00:	7893      	ldrb	r3, [r2, #2]
    1f02:	f013 0f01 	tst.w	r3, #1
    1f06:	d1fb      	bne.n	1f00 <_usb_d_dev_init+0x5c>
	dev_inst.callbacks.sof   = (_usb_d_dev_sof_cb_t)_dummy_func_no_return;
    1f08:	4b21      	ldr	r3, [pc, #132]	; (1f90 <_usb_d_dev_init+0xec>)
    1f0a:	4a22      	ldr	r2, [pc, #136]	; (1f94 <_usb_d_dev_init+0xf0>)
    1f0c:	661a      	str	r2, [r3, #96]	; 0x60
	dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)_dummy_func_no_return;
    1f0e:	665a      	str	r2, [r3, #100]	; 0x64
	dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)_dummy_func_no_return;
    1f10:	669a      	str	r2, [r3, #104]	; 0x68
	dev_inst.ep_callbacks.more  = (_usb_d_dev_ep_cb_more_t)_dummy_func_no_return;
    1f12:	66da      	str	r2, [r3, #108]	; 0x6c
	dev_inst.ep_callbacks.done  = (_usb_d_dev_ep_cb_done_t)_dummy_func_no_return;
    1f14:	671a      	str	r2, [r3, #112]	; 0x70
	_usb_d_dev_reset_epts();
    1f16:	4b20      	ldr	r3, [pc, #128]	; (1f98 <_usb_d_dev_init+0xf4>)
    1f18:	4798      	blx	r3
	    = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRANSN_POS / 32)) >> (NVM_USB_PAD_TRANSN_POS % 32))
    1f1a:	4b20      	ldr	r3, [pc, #128]	; (1f9c <_usb_d_dev_init+0xf8>)
    1f1c:	6819      	ldr	r1, [r3, #0]
	uint32_t pad_transp
    1f1e:	f3c1 1344 	ubfx	r3, r1, #5, #5
	uint32_t pad_trim = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRIM_POS / 32)) >> (NVM_USB_PAD_TRIM_POS % 32))
    1f22:	f3c1 2282 	ubfx	r2, r1, #10, #3
	if (pad_transn == 0 || pad_transn == 0x1F) {
    1f26:	f011 011f 	ands.w	r1, r1, #31
    1f2a:	d02b      	beq.n	1f84 <_usb_d_dev_init+0xe0>
		pad_transn = 9;
    1f2c:	291f      	cmp	r1, #31
    1f2e:	bf08      	it	eq
    1f30:	2109      	moveq	r1, #9
	if (pad_transp == 0 || pad_transp == 0x1F) {
    1f32:	b34b      	cbz	r3, 1f88 <_usb_d_dev_init+0xe4>
		pad_transp = 25;
    1f34:	2b1f      	cmp	r3, #31
    1f36:	bf08      	it	eq
    1f38:	2319      	moveq	r3, #25
	if (pad_trim == 0 || pad_trim == 0x7) {
    1f3a:	b33a      	cbz	r2, 1f8c <_usb_d_dev_init+0xe8>
		pad_trim = 6;
    1f3c:	2a07      	cmp	r2, #7
    1f3e:	bf08      	it	eq
    1f40:	2206      	moveq	r2, #6
	hw->DEVICE.PADCAL.reg = USB_PADCAL_TRANSN(pad_transn) | USB_PADCAL_TRANSP(pad_transp) | USB_PADCAL_TRIM(pad_trim);
    1f42:	f003 031f 	and.w	r3, r3, #31
    1f46:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
    1f4a:	0312      	lsls	r2, r2, #12
    1f4c:	f402 42e0 	and.w	r2, r2, #28672	; 0x7000
    1f50:	4313      	orrs	r3, r2
    1f52:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    1f56:	8513      	strh	r3, [r2, #40]	; 0x28
	hw->DEVICE.QOSCTRL.bit.CQOS = 3;
    1f58:	78d3      	ldrb	r3, [r2, #3]
    1f5a:	f043 0303 	orr.w	r3, r3, #3
    1f5e:	70d3      	strb	r3, [r2, #3]
	hw->DEVICE.QOSCTRL.bit.DQOS = 3;
    1f60:	78d3      	ldrb	r3, [r2, #3]
    1f62:	f043 030c 	orr.w	r3, r3, #12
    1f66:	70d3      	strb	r3, [r2, #3]
	((Usb *)hw)->HOST.CTRLA.reg = data;
    1f68:	2304      	movs	r3, #4
    1f6a:	7013      	strb	r3, [r2, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    1f6c:	7893      	ldrb	r3, [r2, #2]
    1f6e:	f013 0f03 	tst.w	r3, #3
    1f72:	d1fb      	bne.n	1f6c <_usb_d_dev_init+0xc8>
}

static inline void hri_usb_write_DESCADD_reg(const void *const hw, hri_usb_descadd_reg_t data)
{
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.DESCADD.reg = data;
    1f74:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    1f78:	4a05      	ldr	r2, [pc, #20]	; (1f90 <_usb_d_dev_init+0xec>)
    1f7a:	625a      	str	r2, [r3, #36]	; 0x24
	((Usb *)hw)->DEVICE.CTRLB.reg = data;
    1f7c:	2201      	movs	r2, #1
    1f7e:	811a      	strh	r2, [r3, #8]
}
    1f80:	2000      	movs	r0, #0
    1f82:	bd08      	pop	{r3, pc}
		pad_transn = 9;
    1f84:	2109      	movs	r1, #9
    1f86:	e7d4      	b.n	1f32 <_usb_d_dev_init+0x8e>
		pad_transp = 25;
    1f88:	2319      	movs	r3, #25
    1f8a:	e7d6      	b.n	1f3a <_usb_d_dev_init+0x96>
		pad_trim = 6;
    1f8c:	2206      	movs	r2, #6
    1f8e:	e7d8      	b.n	1f42 <_usb_d_dev_init+0x9e>
    1f90:	200005b0 	.word	0x200005b0
    1f94:	00001631 	.word	0x00001631
    1f98:	00001875 	.word	0x00001875
    1f9c:	00800084 	.word	0x00800084

00001fa0 <_usb_d_dev_enable>:
	tmp = ((Usb *)hw)->HOST.SYNCBUSY.reg;
    1fa0:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    1fa4:	789b      	ldrb	r3, [r3, #2]
	if (hri_usbdevice_get_SYNCBUSY_reg(hw, (USB_SYNCBUSY_ENABLE | USB_SYNCBUSY_SWRST))) {
    1fa6:	f013 0f03 	tst.w	r3, #3
    1faa:	d129      	bne.n	2000 <_usb_d_dev_enable+0x60>
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    1fac:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    1fb0:	7893      	ldrb	r3, [r2, #2]
    1fb2:	f013 0f03 	tst.w	r3, #3
    1fb6:	d1fb      	bne.n	1fb0 <_usb_d_dev_enable+0x10>
	return ((Usb *)hw)->HOST.CTRLA.reg;
    1fb8:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    1fbc:	781b      	ldrb	r3, [r3, #0]
    1fbe:	b2db      	uxtb	r3, r3
	if ((ctrla & USB_CTRLA_ENABLE) == 0) {
    1fc0:	f013 0f02 	tst.w	r3, #2
    1fc4:	d108      	bne.n	1fd8 <_usb_d_dev_enable+0x38>
		hri_usbdevice_write_CTRLA_reg(hw, ctrla | USB_CTRLA_ENABLE);
    1fc6:	f043 0302 	orr.w	r3, r3, #2
	((Usb *)hw)->HOST.CTRLA.reg = data;
    1fca:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    1fce:	7013      	strb	r3, [r2, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    1fd0:	7893      	ldrb	r3, [r2, #2]
    1fd2:	f013 0f03 	tst.w	r3, #3
    1fd6:	d1fb      	bne.n	1fd0 <_usb_d_dev_enable+0x30>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1fd8:	4b0b      	ldr	r3, [pc, #44]	; (2008 <_usb_d_dev_enable+0x68>)
    1fda:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    1fde:	609a      	str	r2, [r3, #8]
    1fe0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    1fe4:	609a      	str	r2, [r3, #8]
    1fe6:	f44f 2280 	mov.w	r2, #262144	; 0x40000
    1fea:	609a      	str	r2, [r3, #8]
    1fec:	f44f 2200 	mov.w	r2, #524288	; 0x80000
    1ff0:	609a      	str	r2, [r3, #8]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    1ff2:	f240 228d 	movw	r2, #653	; 0x28d
    1ff6:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    1ffa:	831a      	strh	r2, [r3, #24]
	return ERR_NONE;
    1ffc:	2000      	movs	r0, #0
    1ffe:	4770      	bx	lr
		return -USB_ERR_DENIED;
    2000:	f06f 0010 	mvn.w	r0, #16
}
    2004:	4770      	bx	lr
    2006:	bf00      	nop
    2008:	e000e100 	.word	0xe000e100

0000200c <_usb_d_dev_attach>:
	((Usb *)hw)->DEVICE.CTRLB.reg &= ~USB_DEVICE_CTRLB_DETACH;
    200c:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    2010:	8913      	ldrh	r3, [r2, #8]
    2012:	f023 0301 	bic.w	r3, r3, #1
    2016:	041b      	lsls	r3, r3, #16
    2018:	0c1b      	lsrs	r3, r3, #16
    201a:	8113      	strh	r3, [r2, #8]
    201c:	4770      	bx	lr

0000201e <_usb_d_dev_set_address>:
	hri_usbdevice_write_DADD_reg(USB, USB_DEVICE_DADD_ADDEN | USB_DEVICE_DADD_DADD(addr));
    201e:	f040 0080 	orr.w	r0, r0, #128	; 0x80
	((Usb *)hw)->DEVICE.DADD.reg = data;
    2022:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    2026:	7298      	strb	r0, [r3, #10]
    2028:	4770      	bx	lr
	...

0000202c <_usb_d_dev_ep_init>:
{
    202c:	b5f0      	push	{r4, r5, r6, r7, lr}
    202e:	fa4f fe80 	sxtb.w	lr, r0
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    2032:	f010 050f 	ands.w	r5, r0, #15
    2036:	d04d      	beq.n	20d4 <_usb_d_dev_ep_init+0xa8>
    2038:	f1be 0f00 	cmp.w	lr, #0
    203c:	bfb4      	ite	lt
    203e:	1cac      	addlt	r4, r5, #2
    2040:	462c      	movge	r4, r5
	uint8_t                        ep_type = attr & USB_EP_XTYPE_MASK;
    2042:	f001 0103 	and.w	r1, r1, #3
	const struct _usb_ep_cfg_item *pcfg    = &_usb_ep_cfgs[epn];
    2046:	462b      	mov	r3, r5
	if (epn > CONF_USB_D_MAX_EP_N) {
    2048:	2d02      	cmp	r5, #2
    204a:	d947      	bls.n	20dc <_usb_d_dev_ep_init+0xb0>
		return -USB_ERR_PARAM;
    204c:	f06f 0011 	mvn.w	r0, #17
    2050:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    2052:	f1be 0f00 	cmp.w	lr, #0
    2056:	db1b      	blt.n	2090 <_usb_d_dev_ep_init+0x64>
    2058:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    205c:	4e37      	ldr	r6, [pc, #220]	; (213c <_usb_d_dev_ep_init+0x110>)
    205e:	f856 5025 	ldr.w	r5, [r6, r5, lsl #2]
    2062:	2d00      	cmp	r5, #0
    2064:	d15e      	bne.n	2124 <_usb_d_dev_ep_init+0xf8>
	ept->cache    = (uint8_t *)(dir ? pcfg->i_cache : pcfg->cache);
    2066:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    206a:	4d34      	ldr	r5, [pc, #208]	; (213c <_usb_d_dev_ep_init+0x110>)
    206c:	f855 7023 	ldr.w	r7, [r5, r3, lsl #2]
    2070:	4d33      	ldr	r5, [pc, #204]	; (2140 <_usb_d_dev_ep_init+0x114>)
    2072:	00a6      	lsls	r6, r4, #2
    2074:	1933      	adds	r3, r6, r4
    2076:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    207a:	f8c3 7080 	str.w	r7, [r3, #128]	; 0x80
	ept->size     = max_pkt_siz;
    207e:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
	ept->flags.u8 = (ep_type + 1);
    2082:	3101      	adds	r1, #1
    2084:	f883 1087 	strb.w	r1, [r3, #135]	; 0x87
	ept->ep       = ep;
    2088:	f883 0086 	strb.w	r0, [r3, #134]	; 0x86
	return USB_OK;
    208c:	2000      	movs	r0, #0
    208e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    2090:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    2094:	4e29      	ldr	r6, [pc, #164]	; (213c <_usb_d_dev_ep_init+0x110>)
    2096:	eb06 0585 	add.w	r5, r6, r5, lsl #2
    209a:	686d      	ldr	r5, [r5, #4]
    209c:	b935      	cbnz	r5, 20ac <_usb_d_dev_ep_init+0x80>
	ept->cache    = (uint8_t *)(dir ? pcfg->i_cache : pcfg->cache);
    209e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    20a2:	4d26      	ldr	r5, [pc, #152]	; (213c <_usb_d_dev_ep_init+0x110>)
    20a4:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    20a8:	685f      	ldr	r7, [r3, #4]
    20aa:	e7e1      	b.n	2070 <_usb_d_dev_ep_init+0x44>
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    20ac:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    20b0:	4e22      	ldr	r6, [pc, #136]	; (213c <_usb_d_dev_ep_init+0x110>)
    20b2:	eb06 0585 	add.w	r5, r6, r5, lsl #2
    20b6:	896d      	ldrh	r5, [r5, #10]
    20b8:	4295      	cmp	r5, r2
    20ba:	daf0      	bge.n	209e <_usb_d_dev_ep_init+0x72>
		return -USB_ERR_FUNC;
    20bc:	f06f 0012 	mvn.w	r0, #18
    20c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -USB_ERR_REDO;
    20c2:	f06f 0013 	mvn.w	r0, #19
    20c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return -USB_ERR_REDO;
    20c8:	f06f 0013 	mvn.w	r0, #19
    20cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return -USB_ERR_FUNC;
    20ce:	f06f 0012 	mvn.w	r0, #18
    20d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint8_t                        ep_type = attr & USB_EP_XTYPE_MASK;
    20d4:	f001 0103 	and.w	r1, r1, #3
	return &dev_inst.ep[ep_index];
    20d8:	2400      	movs	r4, #0
	const struct _usb_ep_cfg_item *pcfg    = &_usb_ep_cfgs[epn];
    20da:	4623      	mov	r3, r4
	if (ept->ep != 0xFF) {
    20dc:	eb04 0684 	add.w	r6, r4, r4, lsl #2
    20e0:	4f17      	ldr	r7, [pc, #92]	; (2140 <_usb_d_dev_ep_init+0x114>)
    20e2:	eb07 0686 	add.w	r6, r7, r6, lsl #2
    20e6:	f896 6086 	ldrb.w	r6, [r6, #134]	; 0x86
    20ea:	2eff      	cmp	r6, #255	; 0xff
    20ec:	d1e9      	bne.n	20c2 <_usb_d_dev_ep_init+0x96>
	if (ep_type == USB_EP_XTYPE_CTRL) {
    20ee:	2900      	cmp	r1, #0
    20f0:	d1af      	bne.n	2052 <_usb_d_dev_ep_init+0x26>
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    20f2:	b125      	cbz	r5, 20fe <_usb_d_dev_ep_init+0xd2>
    20f4:	f1be 0f00 	cmp.w	lr, #0
    20f8:	bfa4      	itt	ge
    20fa:	3502      	addge	r5, #2
    20fc:	b2ed      	uxtbge	r5, r5
		if (ept_in->ep != 0xFF) {
    20fe:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    2102:	4e0f      	ldr	r6, [pc, #60]	; (2140 <_usb_d_dev_ep_init+0x114>)
    2104:	eb06 0585 	add.w	r5, r6, r5, lsl #2
    2108:	f895 5086 	ldrb.w	r5, [r5, #134]	; 0x86
    210c:	2dff      	cmp	r5, #255	; 0xff
    210e:	d1db      	bne.n	20c8 <_usb_d_dev_ep_init+0x9c>
		if (pcfg->cache == NULL) {
    2110:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    2114:	4e09      	ldr	r6, [pc, #36]	; (213c <_usb_d_dev_ep_init+0x110>)
    2116:	f856 5025 	ldr.w	r5, [r6, r5, lsl #2]
    211a:	2d00      	cmp	r5, #0
    211c:	d0d7      	beq.n	20ce <_usb_d_dev_ep_init+0xa2>
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    211e:	f1be 0f00 	cmp.w	lr, #0
    2122:	dbb5      	blt.n	2090 <_usb_d_dev_ep_init+0x64>
    2124:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    2128:	4e04      	ldr	r6, [pc, #16]	; (213c <_usb_d_dev_ep_init+0x110>)
    212a:	eb06 0585 	add.w	r5, r6, r5, lsl #2
    212e:	892d      	ldrh	r5, [r5, #8]
    2130:	4295      	cmp	r5, r2
    2132:	da98      	bge.n	2066 <_usb_d_dev_ep_init+0x3a>
		return -USB_ERR_FUNC;
    2134:	f06f 0012 	mvn.w	r0, #18
    2138:	bdf0      	pop	{r4, r5, r6, r7, pc}
    213a:	bf00      	nop
    213c:	00003858 	.word	0x00003858
    2140:	200005b0 	.word	0x200005b0

00002144 <_usb_d_dev_ep_deinit>:
{
    2144:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2146:	b247      	sxtb	r7, r0
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    2148:	f010 060f 	ands.w	r6, r0, #15
    214c:	d00e      	beq.n	216c <_usb_d_dev_ep_deinit+0x28>
    214e:	2f00      	cmp	r7, #0
    2150:	bfb4      	ite	lt
    2152:	1cb3      	addlt	r3, r6, #2
    2154:	4633      	movge	r3, r6
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    2156:	2e02      	cmp	r6, #2
    2158:	d900      	bls.n	215c <_usb_d_dev_ep_deinit+0x18>
    215a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return &dev_inst.ep[ep_index];
    215c:	461d      	mov	r5, r3
    215e:	3301      	adds	r3, #1
    2160:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    2164:	4a24      	ldr	r2, [pc, #144]	; (21f8 <_usb_d_dev_ep_deinit+0xb4>)
    2166:	eb02 0e83 	add.w	lr, r2, r3, lsl #2
    216a:	e002      	b.n	2172 <_usb_d_dev_ep_deinit+0x2e>
    216c:	f8df e094 	ldr.w	lr, [pc, #148]	; 2204 <_usb_d_dev_ep_deinit+0xc0>
    2170:	2500      	movs	r5, #0
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    2172:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    2176:	4a21      	ldr	r2, [pc, #132]	; (21fc <_usb_d_dev_ep_deinit+0xb8>)
    2178:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    217c:	f893 2086 	ldrb.w	r2, [r3, #134]	; 0x86
    2180:	2aff      	cmp	r2, #255	; 0xff
    2182:	d0ea      	beq.n	215a <_usb_d_dev_ep_deinit+0x16>
    2184:	4604      	mov	r4, r0
	_usb_d_dev_trans_stop(ept, dir, USB_TRANS_RESET);
    2186:	2203      	movs	r2, #3
    2188:	0ff9      	lsrs	r1, r7, #31
    218a:	4670      	mov	r0, lr
    218c:	4b1c      	ldr	r3, [pc, #112]	; (2200 <_usb_d_dev_ep_deinit+0xbc>)
    218e:	4798      	blx	r3
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    2190:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    2194:	4a19      	ldr	r2, [pc, #100]	; (21fc <_usb_d_dev_ep_deinit+0xb8>)
    2196:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    219a:	f893 3087 	ldrb.w	r3, [r3, #135]	; 0x87
    219e:	f003 0307 	and.w	r3, r3, #7
    21a2:	2b01      	cmp	r3, #1
    21a4:	d016      	beq.n	21d4 <_usb_d_dev_ep_deinit+0x90>
	} else if (USB_EP_GET_DIR(ep)) {
    21a6:	2f00      	cmp	r7, #0
    21a8:	db1b      	blt.n	21e2 <_usb_d_dev_ep_deinit+0x9e>
    21aa:	0160      	lsls	r0, r4, #5
    21ac:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE0_Msk;
    21b0:	f890 3100 	ldrb.w	r3, [r0, #256]	; 0x100
    21b4:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
    21b8:	f880 3100 	strb.w	r3, [r0, #256]	; 0x100
	ept->flags.u8 = 0;
    21bc:	4b0f      	ldr	r3, [pc, #60]	; (21fc <_usb_d_dev_ep_deinit+0xb8>)
    21be:	00aa      	lsls	r2, r5, #2
    21c0:	1951      	adds	r1, r2, r5
    21c2:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    21c6:	2000      	movs	r0, #0
    21c8:	f881 0087 	strb.w	r0, [r1, #135]	; 0x87
	ept->ep       = 0xFF;
    21cc:	22ff      	movs	r2, #255	; 0xff
    21ce:	f881 2086 	strb.w	r2, [r1, #134]	; 0x86
    21d2:	e7c2      	b.n	215a <_usb_d_dev_ep_deinit+0x16>
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg = 0;
    21d4:	0160      	lsls	r0, r4, #5
    21d6:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
    21da:	2300      	movs	r3, #0
    21dc:	f880 3100 	strb.w	r3, [r0, #256]	; 0x100
    21e0:	e7ec      	b.n	21bc <_usb_d_dev_ep_deinit+0x78>
    21e2:	0176      	lsls	r6, r6, #5
    21e4:	f106 4682 	add.w	r6, r6, #1090519040	; 0x41000000
		hw->DEVICE.DeviceEndpoint[USB_EP_GET_N(ep)].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE1_Msk;
    21e8:	f896 3100 	ldrb.w	r3, [r6, #256]	; 0x100
    21ec:	f003 038f 	and.w	r3, r3, #143	; 0x8f
    21f0:	f886 3100 	strb.w	r3, [r6, #256]	; 0x100
    21f4:	e7e2      	b.n	21bc <_usb_d_dev_ep_deinit+0x78>
    21f6:	bf00      	nop
    21f8:	20000610 	.word	0x20000610
    21fc:	200005b0 	.word	0x200005b0
    2200:	00001709 	.word	0x00001709
    2204:	20000624 	.word	0x20000624

00002208 <_usb_d_dev_ep_enable>:
{
    2208:	b5f0      	push	{r4, r5, r6, r7, lr}
    220a:	b247      	sxtb	r7, r0
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    220c:	f010 000f 	ands.w	r0, r0, #15
    2210:	f000 80a6 	beq.w	2360 <_usb_d_dev_ep_enable+0x158>
    2214:	2f00      	cmp	r7, #0
    2216:	bfb4      	ite	lt
    2218:	1c83      	addlt	r3, r0, #2
    221a:	4603      	movge	r3, r0
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    221c:	4606      	mov	r6, r0
    221e:	0142      	lsls	r2, r0, #5
    2220:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    2224:	f892 4100 	ldrb.w	r4, [r2, #256]	; 0x100
    2228:	b2e4      	uxtb	r4, r4
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    222a:	2802      	cmp	r0, #2
    222c:	f240 809f 	bls.w	236e <_usb_d_dev_ep_enable+0x166>
		return -USB_ERR_PARAM;
    2230:	f06f 0011 	mvn.w	r0, #17
    2234:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (epcfg & (USB_DEVICE_EPCFG_EPTYPE1_Msk | USB_DEVICE_EPCFG_EPTYPE0_Msk)) {
    2236:	f014 0f77 	tst.w	r4, #119	; 0x77
    223a:	f040 8088 	bne.w	234e <_usb_d_dev_ep_enable+0x146>
    223e:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    2242:	2111      	movs	r1, #17
    2244:	f882 1100 	strb.w	r1, [r2, #256]	; 0x100
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    2248:	4c97      	ldr	r4, [pc, #604]	; (24a8 <_usb_d_dev_ep_enable+0x2a0>)
    224a:	eb04 018e 	add.w	r1, r4, lr, lsl #2
    224e:	f8b1 4084 	ldrh.w	r4, [r1, #132]	; 0x84
    2252:	4996      	ldr	r1, [pc, #600]	; (24ac <_usb_d_dev_ep_enable+0x2a4>)
    2254:	ea01 3184 	and.w	r1, r1, r4, lsl #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    2258:	f5b4 7f00 	cmp.w	r4, #512	; 0x200
    225c:	f200 80cc 	bhi.w	23f8 <_usb_d_dev_ep_enable+0x1f0>
    2260:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
    2264:	f200 810a 	bhi.w	247c <_usb_d_dev_ep_enable+0x274>
    2268:	2c80      	cmp	r4, #128	; 0x80
    226a:	f200 80f9 	bhi.w	2460 <_usb_d_dev_ep_enable+0x258>
    226e:	2c40      	cmp	r4, #64	; 0x40
    2270:	f200 810b 	bhi.w	248a <_usb_d_dev_ep_enable+0x282>
    2274:	2c20      	cmp	r4, #32
    2276:	f200 80fa 	bhi.w	246e <_usb_d_dev_ep_enable+0x266>
    227a:	2c10      	cmp	r4, #16
    227c:	f200 810c 	bhi.w	2498 <_usb_d_dev_ep_enable+0x290>
    2280:	2c08      	cmp	r4, #8
    2282:	bf94      	ite	ls
    2284:	2700      	movls	r7, #0
    2286:	2701      	movhi	r7, #1
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    2288:	ea41 7107 	orr.w	r1, r1, r7, lsl #28
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    228c:	6041      	str	r1, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    228e:	f3c4 010d 	ubfx	r1, r4, #0, #14
    2292:	e0b7      	b.n	2404 <_usb_d_dev_ep_enable+0x1fc>
		if (epcfg & USB_DEVICE_EPCFG_EPTYPE1_Msk) {
    2294:	f014 0f70 	tst.w	r4, #112	; 0x70
    2298:	d15c      	bne.n	2354 <_usb_d_dev_ep_enable+0x14c>
		epcfg |= USB_DEVICE_EPCFG_EPTYPE1(ept->flags.bits.eptype);
    229a:	4d83      	ldr	r5, [pc, #524]	; (24a8 <_usb_d_dev_ep_enable+0x2a0>)
    229c:	009f      	lsls	r7, r3, #2
    229e:	18f9      	adds	r1, r7, r3
    22a0:	eb05 0181 	add.w	r1, r5, r1, lsl #2
    22a4:	f891 1087 	ldrb.w	r1, [r1, #135]	; 0x87
    22a8:	0109      	lsls	r1, r1, #4
    22aa:	f001 0170 	and.w	r1, r1, #112	; 0x70
    22ae:	430c      	orrs	r4, r1
    22b0:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    22b4:	f882 4100 	strb.w	r4, [r2, #256]	; 0x100
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    22b8:	443b      	add	r3, r7
    22ba:	eb05 0583 	add.w	r5, r5, r3, lsl #2
    22be:	f8b5 3084 	ldrh.w	r3, [r5, #132]	; 0x84
    22c2:	f3c3 010d 	ubfx	r1, r3, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    22c6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    22ca:	d80f      	bhi.n	22ec <_usb_d_dev_ep_enable+0xe4>
    22cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    22d0:	d819      	bhi.n	2306 <_usb_d_dev_ep_enable+0xfe>
    22d2:	2b80      	cmp	r3, #128	; 0x80
    22d4:	d819      	bhi.n	230a <_usb_d_dev_ep_enable+0x102>
    22d6:	2b40      	cmp	r3, #64	; 0x40
    22d8:	d819      	bhi.n	230e <_usb_d_dev_ep_enable+0x106>
    22da:	2b20      	cmp	r3, #32
    22dc:	d819      	bhi.n	2312 <_usb_d_dev_ep_enable+0x10a>
    22de:	2b10      	cmp	r3, #16
    22e0:	d819      	bhi.n	2316 <_usb_d_dev_ep_enable+0x10e>
    22e2:	2b08      	cmp	r3, #8
    22e4:	bf94      	ite	ls
    22e6:	2300      	movls	r3, #0
    22e8:	2301      	movhi	r3, #1
    22ea:	e000      	b.n	22ee <_usb_d_dev_ep_enable+0xe6>
    22ec:	2307      	movs	r3, #7
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    22ee:	ea41 7303 	orr.w	r3, r1, r3, lsl #28
    22f2:	6143      	str	r3, [r0, #20]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    22f4:	2380      	movs	r3, #128	; 0x80
    22f6:	f882 3104 	strb.w	r3, [r2, #260]	; 0x104
	bank->STATUS_BK.reg     = 0;
    22fa:	4b6b      	ldr	r3, [pc, #428]	; (24a8 <_usb_d_dev_ep_enable+0x2a0>)
    22fc:	eb03 1646 	add.w	r6, r3, r6, lsl #5
    2300:	2000      	movs	r0, #0
    2302:	76b0      	strb	r0, [r6, #26]
    2304:	bdf0      	pop	{r4, r5, r6, r7, pc}
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    2306:	2306      	movs	r3, #6
    2308:	e7f1      	b.n	22ee <_usb_d_dev_ep_enable+0xe6>
    230a:	2305      	movs	r3, #5
    230c:	e7ef      	b.n	22ee <_usb_d_dev_ep_enable+0xe6>
    230e:	2304      	movs	r3, #4
    2310:	e7ed      	b.n	22ee <_usb_d_dev_ep_enable+0xe6>
    2312:	2303      	movs	r3, #3
    2314:	e7eb      	b.n	22ee <_usb_d_dev_ep_enable+0xe6>
    2316:	2302      	movs	r3, #2
    2318:	e7e9      	b.n	22ee <_usb_d_dev_ep_enable+0xe6>
    231a:	2107      	movs	r1, #7
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    231c:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    2320:	6043      	str	r3, [r0, #4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    2322:	2340      	movs	r3, #64	; 0x40
    2324:	f882 3105 	strb.w	r3, [r2, #261]	; 0x105
	bank->STATUS_BK.reg     = 0;
    2328:	4b5f      	ldr	r3, [pc, #380]	; (24a8 <_usb_d_dev_ep_enable+0x2a0>)
    232a:	eb03 1646 	add.w	r6, r3, r6, lsl #5
    232e:	2000      	movs	r0, #0
    2330:	72b0      	strb	r0, [r6, #10]
    2332:	bdf0      	pop	{r4, r5, r6, r7, pc}
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    2334:	2106      	movs	r1, #6
    2336:	e7f1      	b.n	231c <_usb_d_dev_ep_enable+0x114>
    2338:	2105      	movs	r1, #5
    233a:	e7ef      	b.n	231c <_usb_d_dev_ep_enable+0x114>
    233c:	2104      	movs	r1, #4
    233e:	e7ed      	b.n	231c <_usb_d_dev_ep_enable+0x114>
    2340:	2103      	movs	r1, #3
    2342:	e7eb      	b.n	231c <_usb_d_dev_ep_enable+0x114>
    2344:	2102      	movs	r1, #2
    2346:	e7e9      	b.n	231c <_usb_d_dev_ep_enable+0x114>
		return -USB_ERR_PARAM;
    2348:	f06f 0011 	mvn.w	r0, #17
    234c:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return -USB_ERR_REDO;
    234e:	f06f 0013 	mvn.w	r0, #19
    2352:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return -USB_ERR_REDO;
    2354:	f06f 0013 	mvn.w	r0, #19
    2358:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return -USB_ERR_REDO;
    235a:	f06f 0013 	mvn.w	r0, #19
    235e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    2360:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    2364:	f893 4100 	ldrb.w	r4, [r3, #256]	; 0x100
    2368:	b2e4      	uxtb	r4, r4
    236a:	2600      	movs	r6, #0
	return &dev_inst.ep[ep_index];
    236c:	4633      	mov	r3, r6
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    236e:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    2372:	494d      	ldr	r1, [pc, #308]	; (24a8 <_usb_d_dev_ep_enable+0x2a0>)
    2374:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    2378:	f892 5086 	ldrb.w	r5, [r2, #134]	; 0x86
    237c:	2dff      	cmp	r5, #255	; 0xff
    237e:	d0e3      	beq.n	2348 <_usb_d_dev_ep_enable+0x140>
    2380:	0172      	lsls	r2, r6, #5
	bank = prvt_inst.desc_table[epn].DeviceDescBank;
    2382:	1888      	adds	r0, r1, r2
	if (ept->flags.bits.eptype == USB_D_EPTYPE_CTRL) {
    2384:	eb03 0e83 	add.w	lr, r3, r3, lsl #2
    2388:	eb01 018e 	add.w	r1, r1, lr, lsl #2
    238c:	f891 1087 	ldrb.w	r1, [r1, #135]	; 0x87
    2390:	f001 0107 	and.w	r1, r1, #7
    2394:	2901      	cmp	r1, #1
    2396:	f43f af4e 	beq.w	2236 <_usb_d_dev_ep_enable+0x2e>
	} else if (dir) {
    239a:	2f00      	cmp	r7, #0
    239c:	f6ff af7a 	blt.w	2294 <_usb_d_dev_ep_enable+0x8c>
		if (epcfg & USB_DEVICE_EPCFG_EPTYPE0_Msk) {
    23a0:	f014 0f07 	tst.w	r4, #7
    23a4:	d1d9      	bne.n	235a <_usb_d_dev_ep_enable+0x152>
		epcfg |= USB_DEVICE_EPCFG_EPTYPE0(ept->flags.bits.eptype);
    23a6:	4d40      	ldr	r5, [pc, #256]	; (24a8 <_usb_d_dev_ep_enable+0x2a0>)
    23a8:	009f      	lsls	r7, r3, #2
    23aa:	18f9      	adds	r1, r7, r3
    23ac:	eb05 0181 	add.w	r1, r5, r1, lsl #2
    23b0:	f891 1087 	ldrb.w	r1, [r1, #135]	; 0x87
    23b4:	f001 0107 	and.w	r1, r1, #7
    23b8:	430c      	orrs	r4, r1
    23ba:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    23be:	f882 4100 	strb.w	r4, [r2, #256]	; 0x100
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    23c2:	443b      	add	r3, r7
    23c4:	eb05 0583 	add.w	r5, r5, r3, lsl #2
    23c8:	f8b5 1084 	ldrh.w	r1, [r5, #132]	; 0x84
    23cc:	4b37      	ldr	r3, [pc, #220]	; (24ac <_usb_d_dev_ep_enable+0x2a4>)
    23ce:	ea03 3381 	and.w	r3, r3, r1, lsl #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    23d2:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    23d6:	d8a0      	bhi.n	231a <_usb_d_dev_ep_enable+0x112>
    23d8:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
    23dc:	d8aa      	bhi.n	2334 <_usb_d_dev_ep_enable+0x12c>
    23de:	2980      	cmp	r1, #128	; 0x80
    23e0:	d8aa      	bhi.n	2338 <_usb_d_dev_ep_enable+0x130>
    23e2:	2940      	cmp	r1, #64	; 0x40
    23e4:	d8aa      	bhi.n	233c <_usb_d_dev_ep_enable+0x134>
    23e6:	2920      	cmp	r1, #32
    23e8:	d8aa      	bhi.n	2340 <_usb_d_dev_ep_enable+0x138>
    23ea:	2910      	cmp	r1, #16
    23ec:	d8aa      	bhi.n	2344 <_usb_d_dev_ep_enable+0x13c>
    23ee:	2908      	cmp	r1, #8
    23f0:	bf94      	ite	ls
    23f2:	2100      	movls	r1, #0
    23f4:	2101      	movhi	r1, #1
    23f6:	e791      	b.n	231c <_usb_d_dev_ep_enable+0x114>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    23f8:	f041 41e0 	orr.w	r1, r1, #1879048192	; 0x70000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    23fc:	6041      	str	r1, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    23fe:	f3c4 010d 	ubfx	r1, r4, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    2402:	2707      	movs	r7, #7
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    2404:	ea41 7107 	orr.w	r1, r1, r7, lsl #28
    2408:	6141      	str	r1, [r0, #20]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    240a:	2140      	movs	r1, #64	; 0x40
    240c:	f882 1105 	strb.w	r1, [r2, #261]	; 0x105
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    2410:	2080      	movs	r0, #128	; 0x80
    2412:	f882 0104 	strb.w	r0, [r2, #260]	; 0x104
	bank->STATUS_BK.reg     = 0;
    2416:	4a24      	ldr	r2, [pc, #144]	; (24a8 <_usb_d_dev_ep_enable+0x2a0>)
    2418:	eb02 1646 	add.w	r6, r2, r6, lsl #5
    241c:	2000      	movs	r0, #0
    241e:	72b0      	strb	r0, [r6, #10]
    2420:	76b0      	strb	r0, [r6, #26]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    2422:	f005 050f 	and.w	r5, r5, #15
	_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    2426:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    242a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    242e:	f8d3 6080 	ldr.w	r6, [r3, #128]	; 0x80
	bank->ADDR.reg          = addr;
    2432:	016d      	lsls	r5, r5, #5
    2434:	1953      	adds	r3, r2, r5
    2436:	5156      	str	r6, [r2, r5]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    2438:	685a      	ldr	r2, [r3, #4]
    243a:	f364 329b 	bfi	r2, r4, #14, #14
    243e:	605a      	str	r2, [r3, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    2440:	685a      	ldr	r2, [r3, #4]
    2442:	f360 020d 	bfi	r2, r0, #0, #14
    2446:	605a      	str	r2, [r3, #4]
    2448:	f105 4382 	add.w	r3, r5, #1090519040	; 0x41000000
    244c:	22b0      	movs	r2, #176	; 0xb0
    244e:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    2452:	f883 1105 	strb.w	r1, [r3, #261]	; 0x105
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    2456:	461d      	mov	r5, r3
    2458:	2310      	movs	r3, #16
    245a:	f885 3109 	strb.w	r3, [r5, #265]	; 0x109
    245e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    2460:	f041 41a0 	orr.w	r1, r1, #1342177280	; 0x50000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    2464:	6041      	str	r1, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    2466:	f3c4 010d 	ubfx	r1, r4, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    246a:	2705      	movs	r7, #5
    246c:	e7ca      	b.n	2404 <_usb_d_dev_ep_enable+0x1fc>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    246e:	f041 5140 	orr.w	r1, r1, #805306368	; 0x30000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    2472:	6041      	str	r1, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    2474:	f3c4 010d 	ubfx	r1, r4, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    2478:	2703      	movs	r7, #3
    247a:	e7c3      	b.n	2404 <_usb_d_dev_ep_enable+0x1fc>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    247c:	f041 41c0 	orr.w	r1, r1, #1610612736	; 0x60000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    2480:	6041      	str	r1, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    2482:	f3c4 010d 	ubfx	r1, r4, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    2486:	2706      	movs	r7, #6
    2488:	e7bc      	b.n	2404 <_usb_d_dev_ep_enable+0x1fc>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    248a:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    248e:	6041      	str	r1, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    2490:	f3c4 010d 	ubfx	r1, r4, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    2494:	2704      	movs	r7, #4
    2496:	e7b5      	b.n	2404 <_usb_d_dev_ep_enable+0x1fc>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    2498:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    249c:	6041      	str	r1, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    249e:	f3c4 010d 	ubfx	r1, r4, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    24a2:	2702      	movs	r7, #2
    24a4:	e7ae      	b.n	2404 <_usb_d_dev_ep_enable+0x1fc>
    24a6:	bf00      	nop
    24a8:	200005b0 	.word	0x200005b0
    24ac:	0fffc000 	.word	0x0fffc000

000024b0 <_usb_d_dev_ep_stall>:
{
    24b0:	b470      	push	{r4, r5, r6}
    24b2:	b243      	sxtb	r3, r0
	bool                  dir = USB_EP_GET_DIR(ep);
    24b4:	0fdc      	lsrs	r4, r3, #31
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    24b6:	f010 000f 	ands.w	r0, r0, #15
    24ba:	d008      	beq.n	24ce <_usb_d_dev_ep_stall+0x1e>
    24bc:	2b00      	cmp	r3, #0
    24be:	bfb4      	ite	lt
    24c0:	1c83      	addlt	r3, r0, #2
    24c2:	4603      	movge	r3, r0
	if (epn > CONF_USB_D_MAX_EP_N) {
    24c4:	2802      	cmp	r0, #2
    24c6:	d903      	bls.n	24d0 <_usb_d_dev_ep_stall+0x20>
		return -USB_ERR_PARAM;
    24c8:	f06f 0011 	mvn.w	r0, #17
    24cc:	e018      	b.n	2500 <_usb_d_dev_ep_stall+0x50>
	return &dev_inst.ep[ep_index];
    24ce:	2300      	movs	r3, #0
	if (USB_EP_STALL_SET == ctrl) {
    24d0:	2901      	cmp	r1, #1
    24d2:	d017      	beq.n	2504 <_usb_d_dev_ep_stall+0x54>
	} else if (USB_EP_STALL_CLR == ctrl) {
    24d4:	2900      	cmp	r1, #0
    24d6:	d03a      	beq.n	254e <_usb_d_dev_ep_stall+0x9e>
	uint8_t epn = USB_EP_GET_N(ept->ep);
    24d8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    24dc:	4a45      	ldr	r2, [pc, #276]	; (25f4 <_usb_d_dev_ep_stall+0x144>)
    24de:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    24e2:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    24e6:	f003 030f 	and.w	r3, r3, #15
    24ea:	015b      	lsls	r3, r3, #5
    24ec:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    24f0:	f893 2106 	ldrb.w	r2, [r3, #262]	; 0x106
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    24f4:	2310      	movs	r3, #16
    24f6:	40a3      	lsls	r3, r4
    24f8:	421a      	tst	r2, r3
    24fa:	bf14      	ite	ne
    24fc:	2001      	movne	r0, #1
    24fe:	2000      	moveq	r0, #0
}
    2500:	bc70      	pop	{r4, r5, r6}
    2502:	4770      	bx	lr
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    2504:	2510      	movs	r5, #16
    2506:	40a5      	lsls	r5, r4
    2508:	b2ed      	uxtb	r5, r5
	uint8_t epn = USB_EP_GET_N(ept->ep);
    250a:	493a      	ldr	r1, [pc, #232]	; (25f4 <_usb_d_dev_ep_stall+0x144>)
    250c:	009e      	lsls	r6, r3, #2
    250e:	18f2      	adds	r2, r6, r3
    2510:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    2514:	f892 2086 	ldrb.w	r2, [r2, #134]	; 0x86
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    2518:	f002 020f 	and.w	r2, r2, #15
    251c:	0150      	lsls	r0, r2, #5
    251e:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
    2522:	f880 5105 	strb.w	r5, [r0, #261]	; 0x105
	_usbd_ep_int_en(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    2526:	2020      	movs	r0, #32
    2528:	fa00 f404 	lsl.w	r4, r0, r4
	hri_usbendpoint_set_EPINTEN_reg(USB, epn, flags);
    252c:	b2e4      	uxtb	r4, r4
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    252e:	0152      	lsls	r2, r2, #5
    2530:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    2534:	f882 4109 	strb.w	r4, [r2, #265]	; 0x109
	ept->flags.bits.is_stalled = 1;
    2538:	4433      	add	r3, r6
    253a:	eb01 0383 	add.w	r3, r1, r3, lsl #2
    253e:	f893 2087 	ldrb.w	r2, [r3, #135]	; 0x87
    2542:	f042 0208 	orr.w	r2, r2, #8
    2546:	f883 2087 	strb.w	r2, [r3, #135]	; 0x87
		rc = _usb_d_dev_ep_stall_set(ept, dir);
    254a:	2000      	movs	r0, #0
    254c:	e7d8      	b.n	2500 <_usb_d_dev_ep_stall+0x50>
	uint8_t epn        = USB_EP_GET_N(ept->ep);
    254e:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    2552:	4928      	ldr	r1, [pc, #160]	; (25f4 <_usb_d_dev_ep_stall+0x144>)
    2554:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    2558:	f892 2086 	ldrb.w	r2, [r2, #134]	; 0x86
    255c:	f002 020f 	and.w	r2, r2, #15
    2560:	0151      	lsls	r1, r2, #5
    2562:	f101 4182 	add.w	r1, r1, #1090519040	; 0x41000000
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    2566:	f891 5106 	ldrb.w	r5, [r1, #262]	; 0x106
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    256a:	2010      	movs	r0, #16
    256c:	40a0      	lsls	r0, r4
	if (!is_stalled) {
    256e:	4205      	tst	r5, r0
    2570:	d03c      	beq.n	25ec <_usb_d_dev_ep_stall+0x13c>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    2572:	b2c0      	uxtb	r0, r0
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    2574:	f881 0104 	strb.w	r0, [r1, #260]	; 0x104
	_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    2578:	2020      	movs	r0, #32
    257a:	40a0      	lsls	r0, r4
	hri_usbendpoint_clear_EPINTEN_reg(USB, epn, flags);
    257c:	b2c5      	uxtb	r5, r0
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    257e:	f881 5108 	strb.w	r5, [r1, #264]	; 0x108
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    2582:	f891 2107 	ldrb.w	r2, [r1, #263]	; 0x107
	if (_usbd_ep_is_stall_sent(epn, dir)) {
    2586:	4202      	tst	r2, r0
    2588:	d007      	beq.n	259a <_usb_d_dev_ep_stall+0xea>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    258a:	f881 5107 	strb.w	r5, [r1, #263]	; 0x107
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
    258e:	2201      	movs	r2, #1
    2590:	fa02 f404 	lsl.w	r4, r2, r4
    2594:	b2e4      	uxtb	r4, r4
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    2596:	f881 4104 	strb.w	r4, [r1, #260]	; 0x104
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    259a:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    259e:	4815      	ldr	r0, [pc, #84]	; (25f4 <_usb_d_dev_ep_stall+0x144>)
    25a0:	eb00 0282 	add.w	r2, r0, r2, lsl #2
    25a4:	f892 2087 	ldrb.w	r2, [r2, #135]	; 0x87
    25a8:	f002 0207 	and.w	r2, r2, #7
    25ac:	2a01      	cmp	r2, #1
    25ae:	d00c      	beq.n	25ca <_usb_d_dev_ep_stall+0x11a>
		ept->flags.bits.is_stalled = 0;
    25b0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    25b4:	4a0f      	ldr	r2, [pc, #60]	; (25f4 <_usb_d_dev_ep_stall+0x144>)
    25b6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    25ba:	f893 2087 	ldrb.w	r2, [r3, #135]	; 0x87
    25be:	f36f 02c3 	bfc	r2, #3, #1
    25c2:	f883 2087 	strb.w	r2, [r3, #135]	; 0x87
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
    25c6:	2000      	movs	r0, #0
    25c8:	e79a      	b.n	2500 <_usb_d_dev_ep_stall+0x50>
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    25ca:	f891 2106 	ldrb.w	r2, [r1, #262]	; 0x106
		if ((hri_usbendpoint_read_EPSTATUS_reg(USB, epn) & USB_DEVICE_EPSTATUS_STALLRQ_Msk) == 0) {
    25ce:	f012 0f30 	tst.w	r2, #48	; 0x30
    25d2:	d10d      	bne.n	25f0 <_usb_d_dev_ep_stall+0x140>
			ept->flags.bits.is_stalled = 0;
    25d4:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    25d8:	eb00 0382 	add.w	r3, r0, r2, lsl #2
    25dc:	f893 2087 	ldrb.w	r2, [r3, #135]	; 0x87
    25e0:	f36f 02c3 	bfc	r2, #3, #1
    25e4:	f883 2087 	strb.w	r2, [r3, #135]	; 0x87
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
    25e8:	2000      	movs	r0, #0
    25ea:	e789      	b.n	2500 <_usb_d_dev_ep_stall+0x50>
    25ec:	2000      	movs	r0, #0
    25ee:	e787      	b.n	2500 <_usb_d_dev_ep_stall+0x50>
    25f0:	2000      	movs	r0, #0
    25f2:	e785      	b.n	2500 <_usb_d_dev_ep_stall+0x50>
    25f4:	200005b0 	.word	0x200005b0

000025f8 <_usb_d_dev_ep_read_req>:

int32_t _usb_d_dev_ep_read_req(const uint8_t ep, uint8_t *req_buf)
{
    25f8:	b430      	push	{r4, r5}
	uint8_t            epn   = USB_EP_GET_N(ep);
    25fa:	f000 040f 	and.w	r4, r0, #15
    25fe:	0163      	lsls	r3, r4, #5
	UsbDeviceDescBank *bank  = prvt_inst.desc_table[epn].DeviceDescBank;
    2600:	4a14      	ldr	r2, [pc, #80]	; (2654 <_usb_d_dev_ep_read_req+0x5c>)
    2602:	18d0      	adds	r0, r2, r3
	uint32_t           addr  = bank[0].ADDR.reg;
    2604:	58d5      	ldr	r5, [r2, r3]
	uint16_t           bytes = bank[0].PCKSIZE.bit.BYTE_COUNT;
    2606:	6840      	ldr	r0, [r0, #4]
    2608:	f3c0 000d 	ubfx	r0, r0, #0, #14

	if (epn > CONF_USB_D_MAX_EP_N || !req_buf) {
    260c:	2c02      	cmp	r4, #2
    260e:	d817      	bhi.n	2640 <_usb_d_dev_ep_read_req+0x48>
    2610:	b1c9      	cbz	r1, 2646 <_usb_d_dev_ep_read_req+0x4e>
    2612:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    2616:	f893 2100 	ldrb.w	r2, [r3, #256]	; 0x100
    261a:	b2d2      	uxtb	r2, r2
		return -USB_ERR_PARAM;
	}
	if (!_usbd_ep_is_ctrl(epn)) {
    261c:	2a11      	cmp	r2, #17
    261e:	d115      	bne.n	264c <_usb_d_dev_ep_read_req+0x54>
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    2620:	f893 2107 	ldrb.w	r2, [r3, #263]	; 0x107
		return -USB_ERR_FUNC;
	}
	if (!_usbd_ep_is_setup(epn)) {
    2624:	f012 0f10 	tst.w	r2, #16
    2628:	d102      	bne.n	2630 <_usb_d_dev_ep_read_req+0x38>
		return ERR_NONE;
    262a:	2000      	movs	r0, #0
	}
	memcpy(req_buf, (void *)addr, 8);
	_usbd_ep_ack_setup(epn);

	return bytes;
}
    262c:	bc30      	pop	{r4, r5}
    262e:	4770      	bx	lr
	memcpy(req_buf, (void *)addr, 8);
    2630:	682c      	ldr	r4, [r5, #0]
    2632:	686a      	ldr	r2, [r5, #4]
    2634:	600c      	str	r4, [r1, #0]
    2636:	604a      	str	r2, [r1, #4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    2638:	2210      	movs	r2, #16
    263a:	f883 2107 	strb.w	r2, [r3, #263]	; 0x107
	return bytes;
    263e:	e7f5      	b.n	262c <_usb_d_dev_ep_read_req+0x34>
		return -USB_ERR_PARAM;
    2640:	f06f 0011 	mvn.w	r0, #17
    2644:	e7f2      	b.n	262c <_usb_d_dev_ep_read_req+0x34>
    2646:	f06f 0011 	mvn.w	r0, #17
    264a:	e7ef      	b.n	262c <_usb_d_dev_ep_read_req+0x34>
		return -USB_ERR_FUNC;
    264c:	f06f 0012 	mvn.w	r0, #18
    2650:	e7ec      	b.n	262c <_usb_d_dev_ep_read_req+0x34>
    2652:	bf00      	nop
    2654:	200005b0 	.word	0x200005b0

00002658 <_usb_d_dev_ep_trans>:

int32_t _usb_d_dev_ep_trans(const struct usb_d_transfer *trans)
{
    2658:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    265c:	b083      	sub	sp, #12
	uint8_t               epn = USB_EP_GET_N(trans->ep);
    265e:	7a03      	ldrb	r3, [r0, #8]
    2660:	b25e      	sxtb	r6, r3
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    2662:	f013 030f 	ands.w	r3, r3, #15
    2666:	f000 80c2 	beq.w	27ee <_usb_d_dev_ep_trans+0x196>
    266a:	2e00      	cmp	r6, #0
    266c:	bfb4      	ite	lt
    266e:	1c9a      	addlt	r2, r3, #2
    2670:	461a      	movge	r2, r3
	return &dev_inst.ep[ep_index];
    2672:	4614      	mov	r4, r2
    2674:	4969      	ldr	r1, [pc, #420]	; (281c <_usb_d_dev_ep_trans+0x1c4>)
    2676:	f101 0760 	add.w	r7, r1, #96	; 0x60
    267a:	1c55      	adds	r5, r2, #1
    267c:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    2680:	eb07 0785 	add.w	r7, r7, r5, lsl #2
	bool                  dir = USB_EP_GET_DIR(trans->ep);
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);

	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    2684:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    2688:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    268c:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
    2690:	f240 31ff 	movw	r1, #1023	; 0x3ff
    2694:	428a      	cmp	r2, r1
    2696:	d025      	beq.n	26e4 <_usb_d_dev_ep_trans+0x8c>
    2698:	1e55      	subs	r5, r2, #1
    269a:	b2ad      	uxth	r5, r5
	bool     size_n_aligned = (trans->size & size_mask);
    269c:	6841      	ldr	r1, [r0, #4]
    269e:	400d      	ands	r5, r1

	bool use_cache = false;

	volatile hal_atomic_t flags;

	if (epn > CONF_USB_D_MAX_EP_N) {
    26a0:	2b02      	cmp	r3, #2
    26a2:	f200 8092 	bhi.w	27ca <_usb_d_dev_ep_trans+0x172>
	 * 1. Buffer not in RAM (cache all).
	 * 2. IN/OUT with unaligned buffer (cache all).
	 * 3. OUT with unaligned packet size (cache last packet).
	 * 4. OUT size < 8 (sub-case for 3).
	 */
	if (!_usb_is_addr4dma(trans->buf, trans->size) || (!_usb_is_aligned(trans->buf))
    26a6:	6803      	ldr	r3, [r0, #0]
    26a8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
    26ac:	d31c      	bcc.n	26e8 <_usb_d_dev_ep_trans+0x90>
    26ae:	eb03 0c01 	add.w	ip, r3, r1
    26b2:	f8df e180 	ldr.w	lr, [pc, #384]	; 2834 <_usb_d_dev_ep_trans+0x1dc>
    26b6:	45f4      	cmp	ip, lr
    26b8:	d816      	bhi.n	26e8 <_usb_d_dev_ep_trans+0x90>
    26ba:	f013 0f03 	tst.w	r3, #3
    26be:	d113      	bne.n	26e8 <_usb_d_dev_ep_trans+0x90>
	    || (!dir && (trans->size < ept->size))) {
    26c0:	2e00      	cmp	r6, #0
    26c2:	db2a      	blt.n	271a <_usb_d_dev_ep_trans+0xc2>
    26c4:	428a      	cmp	r2, r1
    26c6:	f200 809c 	bhi.w	2802 <_usb_d_dev_ep_trans+0x1aa>
			return -USB_ERR_FUNC;
		}
		/* Use cache all the time. */
		use_cache = true;
	}
	if (!dir && size_n_aligned) {
    26ca:	b34d      	cbz	r5, 2720 <_usb_d_dev_ep_trans+0xc8>
		if (!ept->cache) {
    26cc:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    26d0:	4a52      	ldr	r2, [pc, #328]	; (281c <_usb_d_dev_ep_trans+0x1c4>)
    26d2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    26d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    26da:	2b00      	cmp	r3, #0
    26dc:	d07b      	beq.n	27d6 <_usb_d_dev_ep_trans+0x17e>
	bool use_cache = false;
    26de:	f04f 0800 	mov.w	r8, #0
    26e2:	e00c      	b.n	26fe <_usb_d_dev_ep_trans+0xa6>
	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    26e4:	4615      	mov	r5, r2
    26e6:	e7d9      	b.n	269c <_usb_d_dev_ep_trans+0x44>
		if (!ept->cache) {
    26e8:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    26ec:	4a4b      	ldr	r2, [pc, #300]	; (281c <_usb_d_dev_ep_trans+0x1c4>)
    26ee:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    26f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    26f6:	2b00      	cmp	r3, #0
    26f8:	d06a      	beq.n	27d0 <_usb_d_dev_ep_trans+0x178>
		use_cache = true;
    26fa:	f04f 0801 	mov.w	r8, #1
		}
		/* Set 'use_cache' on last packet. */
	}

	/* Check halt */
	if (ept->flags.bits.is_stalled) {
    26fe:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    2702:	4a46      	ldr	r2, [pc, #280]	; (281c <_usb_d_dev_ep_trans+0x1c4>)
    2704:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    2708:	f893 3087 	ldrb.w	r3, [r3, #135]	; 0x87
    270c:	f013 0f08 	tst.w	r3, #8
    2710:	d009      	beq.n	2726 <_usb_d_dev_ep_trans+0xce>
		return USB_HALTED;
    2712:	2002      	movs	r0, #2
	} else {
		_usb_d_dev_out_next(ept, false);
	}

	return ERR_NONE;
}
    2714:	b003      	add	sp, #12
    2716:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	bool use_cache = false;
    271a:	f04f 0800 	mov.w	r8, #0
    271e:	e7ee      	b.n	26fe <_usb_d_dev_ep_trans+0xa6>
    2720:	f04f 0800 	mov.w	r8, #0
    2724:	e7eb      	b.n	26fe <_usb_d_dev_ep_trans+0xa6>
    2726:	4682      	mov	sl, r0
	atomic_enter_critical(&flags);
    2728:	a801      	add	r0, sp, #4
    272a:	4b3d      	ldr	r3, [pc, #244]	; (2820 <_usb_d_dev_ep_trans+0x1c8>)
    272c:	4798      	blx	r3
	if (_usb_d_dev_ep_is_busy(ept)) {
    272e:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    2732:	4a3a      	ldr	r2, [pc, #232]	; (281c <_usb_d_dev_ep_trans+0x1c4>)
    2734:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    2738:	f893 3087 	ldrb.w	r3, [r3, #135]	; 0x87
    273c:	f013 0f40 	tst.w	r3, #64	; 0x40
    2740:	d13c      	bne.n	27bc <_usb_d_dev_ep_trans+0x164>
	ept->flags.bits.is_busy = 1;
    2742:	eb04 0984 	add.w	r9, r4, r4, lsl #2
    2746:	4b35      	ldr	r3, [pc, #212]	; (281c <_usb_d_dev_ep_trans+0x1c4>)
    2748:	eb03 0989 	add.w	r9, r3, r9, lsl #2
    274c:	f899 3087 	ldrb.w	r3, [r9, #135]	; 0x87
    2750:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    2754:	f889 3087 	strb.w	r3, [r9, #135]	; 0x87
	atomic_leave_critical(&flags);
    2758:	a801      	add	r0, sp, #4
    275a:	4b32      	ldr	r3, [pc, #200]	; (2824 <_usb_d_dev_ep_trans+0x1cc>)
    275c:	4798      	blx	r3
	ept->trans_buf   = trans->buf;
    275e:	f8da 3000 	ldr.w	r3, [sl]
    2762:	f8c9 3074 	str.w	r3, [r9, #116]	; 0x74
	ept->trans_size  = trans->size;
    2766:	f8da 3004 	ldr.w	r3, [sl, #4]
    276a:	f8c9 3078 	str.w	r3, [r9, #120]	; 0x78
	ept->trans_count = 0;
    276e:	2300      	movs	r3, #0
    2770:	f8c9 307c 	str.w	r3, [r9, #124]	; 0x7c
	bool                  dir = USB_EP_GET_DIR(trans->ep);
    2774:	0ff2      	lsrs	r2, r6, #31
	ept->flags.bits.dir       = dir;
    2776:	f899 3087 	ldrb.w	r3, [r9, #135]	; 0x87
    277a:	f362 13c7 	bfi	r3, r2, #7, #1
	ept->flags.bits.use_cache = use_cache;
    277e:	f368 1345 	bfi	r3, r8, #5, #1
    2782:	f889 3087 	strb.w	r3, [r9, #135]	; 0x87
	ept->flags.bits.need_zlp  = (trans->zlp && (!size_n_aligned));
    2786:	f89a 3009 	ldrb.w	r3, [sl, #9]
    278a:	b1e3      	cbz	r3, 27c6 <_usb_d_dev_ep_trans+0x16e>
    278c:	fab5 f585 	clz	r5, r5
    2790:	096d      	lsrs	r5, r5, #5
    2792:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    2796:	4b21      	ldr	r3, [pc, #132]	; (281c <_usb_d_dev_ep_trans+0x1c4>)
    2798:	eb03 0484 	add.w	r4, r3, r4, lsl #2
    279c:	f894 3087 	ldrb.w	r3, [r4, #135]	; 0x87
    27a0:	f365 1304 	bfi	r3, r5, #4, #1
    27a4:	f884 3087 	strb.w	r3, [r4, #135]	; 0x87
	if (dir) {
    27a8:	2e00      	cmp	r6, #0
		_usb_d_dev_in_next(ept, false);
    27aa:	f04f 0100 	mov.w	r1, #0
    27ae:	4638      	mov	r0, r7
    27b0:	bfb4      	ite	lt
    27b2:	4b1d      	ldrlt	r3, [pc, #116]	; (2828 <_usb_d_dev_ep_trans+0x1d0>)
		_usb_d_dev_out_next(ept, false);
    27b4:	4b1d      	ldrge	r3, [pc, #116]	; (282c <_usb_d_dev_ep_trans+0x1d4>)
    27b6:	4798      	blx	r3
	return ERR_NONE;
    27b8:	2000      	movs	r0, #0
    27ba:	e7ab      	b.n	2714 <_usb_d_dev_ep_trans+0xbc>
		atomic_leave_critical(&flags);
    27bc:	a801      	add	r0, sp, #4
    27be:	4b19      	ldr	r3, [pc, #100]	; (2824 <_usb_d_dev_ep_trans+0x1cc>)
    27c0:	4798      	blx	r3
		return USB_BUSY;
    27c2:	2001      	movs	r0, #1
    27c4:	e7a6      	b.n	2714 <_usb_d_dev_ep_trans+0xbc>
    27c6:	2500      	movs	r5, #0
    27c8:	e7e3      	b.n	2792 <_usb_d_dev_ep_trans+0x13a>
		return -USB_ERR_PARAM;
    27ca:	f06f 0011 	mvn.w	r0, #17
    27ce:	e7a1      	b.n	2714 <_usb_d_dev_ep_trans+0xbc>
			return -USB_ERR_FUNC;
    27d0:	f06f 0012 	mvn.w	r0, #18
    27d4:	e79e      	b.n	2714 <_usb_d_dev_ep_trans+0xbc>
			return -USB_ERR_PARAM;
    27d6:	f06f 0011 	mvn.w	r0, #17
    27da:	e79b      	b.n	2714 <_usb_d_dev_ep_trans+0xbc>
			return -USB_ERR_FUNC;
    27dc:	f06f 0012 	mvn.w	r0, #18
    27e0:	e798      	b.n	2714 <_usb_d_dev_ep_trans+0xbc>
	bool     size_n_aligned = (trans->size & size_mask);
    27e2:	6841      	ldr	r1, [r0, #4]
    27e4:	f3c1 0509 	ubfx	r5, r1, #0, #10
	return &dev_inst.ep[ep_index];
    27e8:	4f11      	ldr	r7, [pc, #68]	; (2830 <_usb_d_dev_ep_trans+0x1d8>)
    27ea:	2400      	movs	r4, #0
    27ec:	e75b      	b.n	26a6 <_usb_d_dev_ep_trans+0x4e>
	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    27ee:	4a0b      	ldr	r2, [pc, #44]	; (281c <_usb_d_dev_ep_trans+0x1c4>)
    27f0:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
    27f4:	f240 31ff 	movw	r1, #1023	; 0x3ff
    27f8:	428a      	cmp	r2, r1
    27fa:	d0f2      	beq.n	27e2 <_usb_d_dev_ep_trans+0x18a>
	return &dev_inst.ep[ep_index];
    27fc:	4f0c      	ldr	r7, [pc, #48]	; (2830 <_usb_d_dev_ep_trans+0x1d8>)
    27fe:	2400      	movs	r4, #0
    2800:	e74a      	b.n	2698 <_usb_d_dev_ep_trans+0x40>
		if (!ept->cache) {
    2802:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    2806:	4a05      	ldr	r2, [pc, #20]	; (281c <_usb_d_dev_ep_trans+0x1c4>)
    2808:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    280c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    2810:	2b00      	cmp	r3, #0
    2812:	d0e3      	beq.n	27dc <_usb_d_dev_ep_trans+0x184>
    2814:	f04f 0801 	mov.w	r8, #1
    2818:	e771      	b.n	26fe <_usb_d_dev_ep_trans+0xa6>
    281a:	bf00      	nop
    281c:	200005b0 	.word	0x200005b0
    2820:	000033dd 	.word	0x000033dd
    2824:	000033eb 	.word	0x000033eb
    2828:	000018b9 	.word	0x000018b9
    282c:	00001a3d 	.word	0x00001a3d
    2830:	20000624 	.word	0x20000624
    2834:	20041fff 	.word	0x20041fff

00002838 <_usb_d_dev_register_callback>:
	return USB_OK;
}

void _usb_d_dev_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    2838:	4b06      	ldr	r3, [pc, #24]	; (2854 <_usb_d_dev_register_callback+0x1c>)
    283a:	2900      	cmp	r1, #0
    283c:	bf08      	it	eq
    283e:	4619      	moveq	r1, r3
	if (type == USB_D_CB_EVENT) {
    2840:	2801      	cmp	r0, #1
    2842:	d003      	beq.n	284c <_usb_d_dev_register_callback+0x14>
		dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)f;
	} else if (type == USB_D_CB_SOF) {
    2844:	b908      	cbnz	r0, 284a <_usb_d_dev_register_callback+0x12>
		dev_inst.callbacks.sof = (_usb_d_dev_sof_cb_t)f;
    2846:	4b04      	ldr	r3, [pc, #16]	; (2858 <_usb_d_dev_register_callback+0x20>)
    2848:	6619      	str	r1, [r3, #96]	; 0x60
    284a:	4770      	bx	lr
		dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)f;
    284c:	4b02      	ldr	r3, [pc, #8]	; (2858 <_usb_d_dev_register_callback+0x20>)
    284e:	6659      	str	r1, [r3, #100]	; 0x64
    2850:	4770      	bx	lr
    2852:	bf00      	nop
    2854:	00001631 	.word	0x00001631
    2858:	200005b0 	.word	0x200005b0

0000285c <_usb_d_dev_register_ep_callback>:
	}
}

void _usb_d_dev_register_ep_callback(const enum usb_d_dev_ep_cb_type type, const FUNC_PTR func)
{
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    285c:	4b09      	ldr	r3, [pc, #36]	; (2884 <_usb_d_dev_register_ep_callback+0x28>)
    285e:	2900      	cmp	r1, #0
    2860:	bf08      	it	eq
    2862:	4619      	moveq	r1, r3
	if (type == USB_D_DEV_EP_CB_SETUP) {
    2864:	4603      	mov	r3, r0
    2866:	b130      	cbz	r0, 2876 <_usb_d_dev_register_ep_callback+0x1a>
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
	} else if (type == USB_D_DEV_EP_CB_MORE) {
    2868:	2801      	cmp	r0, #1
    286a:	d007      	beq.n	287c <_usb_d_dev_register_ep_callback+0x20>
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
	} else if (type == USB_D_DEV_EP_CB_DONE) {
    286c:	2802      	cmp	r0, #2
		dev_inst.ep_callbacks.done = (_usb_d_dev_ep_cb_done_t)f;
    286e:	bf04      	itt	eq
    2870:	4b05      	ldreq	r3, [pc, #20]	; (2888 <_usb_d_dev_register_ep_callback+0x2c>)
    2872:	6719      	streq	r1, [r3, #112]	; 0x70
    2874:	4770      	bx	lr
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
    2876:	4b04      	ldr	r3, [pc, #16]	; (2888 <_usb_d_dev_register_ep_callback+0x2c>)
    2878:	6699      	str	r1, [r3, #104]	; 0x68
    287a:	4770      	bx	lr
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
    287c:	4b02      	ldr	r3, [pc, #8]	; (2888 <_usb_d_dev_register_ep_callback+0x2c>)
    287e:	66d9      	str	r1, [r3, #108]	; 0x6c
    2880:	4770      	bx	lr
    2882:	bf00      	nop
    2884:	00001631 	.word	0x00001631
    2888:	200005b0 	.word	0x200005b0

0000288c <USB_0_Handler>:

/**
 * \brief USB interrupt handler
 */
void USB_0_Handler(void)
{
    288c:	b508      	push	{r3, lr}

	_usb_d_dev_handler();
    288e:	4b01      	ldr	r3, [pc, #4]	; (2894 <USB_0_Handler+0x8>)
    2890:	4798      	blx	r3
    2892:	bd08      	pop	{r3, pc}
    2894:	00001c2d 	.word	0x00001c2d

00002898 <USB_1_Handler>:
}
/**
 * \brief USB interrupt handler
 */
void USB_1_Handler(void)
{
    2898:	b508      	push	{r3, lr}

	_usb_d_dev_handler();
    289a:	4b01      	ldr	r3, [pc, #4]	; (28a0 <USB_1_Handler+0x8>)
    289c:	4798      	blx	r3
    289e:	bd08      	pop	{r3, pc}
    28a0:	00001c2d 	.word	0x00001c2d

000028a4 <USB_2_Handler>:
}
/**
 * \brief USB interrupt handler
 */
void USB_2_Handler(void)
{
    28a4:	b508      	push	{r3, lr}

	_usb_d_dev_handler();
    28a6:	4b01      	ldr	r3, [pc, #4]	; (28ac <USB_2_Handler+0x8>)
    28a8:	4798      	blx	r3
    28aa:	bd08      	pop	{r3, pc}
    28ac:	00001c2d 	.word	0x00001c2d

000028b0 <USB_3_Handler>:
}
/**
 * \brief USB interrupt handler
 */
void USB_3_Handler(void)
{
    28b0:	b508      	push	{r3, lr}

	_usb_d_dev_handler();
    28b2:	4b01      	ldr	r3, [pc, #4]	; (28b8 <USB_3_Handler+0x8>)
    28b4:	4798      	blx	r3
    28b6:	bd08      	pop	{r3, pc}
    28b8:	00001c2d 	.word	0x00001c2d

000028bc <cdcdf_acm_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    28bc:	b5f0      	push	{r4, r5, r6, r7, lr}
    28be:	b083      	sub	sp, #12
	if (0x01 != ((req->bmRequestType >> 5) & 0x03)) { // class request
    28c0:	780b      	ldrb	r3, [r1, #0]
    28c2:	f3c3 1441 	ubfx	r4, r3, #5, #2
    28c6:	2c01      	cmp	r4, #1
    28c8:	d15e      	bne.n	2988 <cdcdf_acm_req+0xcc>
		return ERR_NOT_FOUND;
	}
	if ((req->wIndex == _cdcdf_acm_funcd.func_iface[0]) || (req->wIndex == _cdcdf_acm_funcd.func_iface[1])) {
    28ca:	888c      	ldrh	r4, [r1, #4]
    28cc:	4d35      	ldr	r5, [pc, #212]	; (29a4 <cdcdf_acm_req+0xe8>)
    28ce:	782d      	ldrb	r5, [r5, #0]
    28d0:	42a5      	cmp	r5, r4
    28d2:	d003      	beq.n	28dc <cdcdf_acm_req+0x20>
    28d4:	4d33      	ldr	r5, [pc, #204]	; (29a4 <cdcdf_acm_req+0xe8>)
    28d6:	786d      	ldrb	r5, [r5, #1]
    28d8:	42a5      	cmp	r5, r4
    28da:	d158      	bne.n	298e <cdcdf_acm_req+0xd2>
    28dc:	4616      	mov	r6, r2
    28de:	460c      	mov	r4, r1
    28e0:	4605      	mov	r5, r0
		if (req->bmRequestType & USB_EP_DIR_IN) {
    28e2:	f013 0f80 	tst.w	r3, #128	; 0x80
    28e6:	d10c      	bne.n	2902 <cdcdf_acm_req+0x46>
	uint16_t                   len      = req->wLength;
    28e8:	88cf      	ldrh	r7, [r1, #6]
	uint8_t *                  ctrl_buf = usbdc_get_ctrl_buffer();
    28ea:	4b2f      	ldr	r3, [pc, #188]	; (29a8 <cdcdf_acm_req+0xec>)
    28ec:	4798      	blx	r3
    28ee:	4601      	mov	r1, r0
	switch (req->bRequest) {
    28f0:	7863      	ldrb	r3, [r4, #1]
    28f2:	2b20      	cmp	r3, #32
    28f4:	d013      	beq.n	291e <cdcdf_acm_req+0x62>
    28f6:	2b22      	cmp	r3, #34	; 0x22
    28f8:	d032      	beq.n	2960 <cdcdf_acm_req+0xa4>
		return ERR_INVALID_ARG;
    28fa:	f06f 000c 	mvn.w	r0, #12
			return cdcdf_acm_set_req(ep, req, stage);
		}
	} else {
		return ERR_NOT_FOUND;
	}
}
    28fe:	b003      	add	sp, #12
    2900:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (USB_DATA_STAGE == stage) {
    2902:	2a01      	cmp	r2, #1
    2904:	d046      	beq.n	2994 <cdcdf_acm_req+0xd8>
	switch (req->bRequest) {
    2906:	784b      	ldrb	r3, [r1, #1]
    2908:	2b21      	cmp	r3, #33	; 0x21
    290a:	d145      	bne.n	2998 <cdcdf_acm_req+0xdc>
		if (sizeof(struct usb_cdc_line_coding) != len) {
    290c:	88cb      	ldrh	r3, [r1, #6]
    290e:	2b07      	cmp	r3, #7
    2910:	d145      	bne.n	299e <cdcdf_acm_req+0xe2>
		return usbdc_xfer(ep, (uint8_t *)&usbd_cdc_line_coding, len, false);
    2912:	2300      	movs	r3, #0
    2914:	2207      	movs	r2, #7
    2916:	4925      	ldr	r1, [pc, #148]	; (29ac <cdcdf_acm_req+0xf0>)
    2918:	4c25      	ldr	r4, [pc, #148]	; (29b0 <cdcdf_acm_req+0xf4>)
    291a:	47a0      	blx	r4
    291c:	e7ef      	b.n	28fe <cdcdf_acm_req+0x42>
		if (sizeof(struct usb_cdc_line_coding) != len) {
    291e:	2f07      	cmp	r7, #7
    2920:	d12b      	bne.n	297a <cdcdf_acm_req+0xbe>
		if (USB_SETUP_STAGE == stage) {
    2922:	b1be      	cbz	r6, 2954 <cdcdf_acm_req+0x98>
			memcpy(&line_coding_tmp, ctrl_buf, sizeof(struct usb_cdc_line_coding));
    2924:	6800      	ldr	r0, [r0, #0]
    2926:	9000      	str	r0, [sp, #0]
    2928:	888a      	ldrh	r2, [r1, #4]
    292a:	798b      	ldrb	r3, [r1, #6]
    292c:	f8ad 2004 	strh.w	r2, [sp, #4]
    2930:	f88d 3006 	strb.w	r3, [sp, #6]
			if ((NULL == cdcdf_acm_set_line_coding) || (true == cdcdf_acm_set_line_coding(&line_coding_tmp))) {
    2934:	4b1b      	ldr	r3, [pc, #108]	; (29a4 <cdcdf_acm_req+0xe8>)
    2936:	691b      	ldr	r3, [r3, #16]
    2938:	b113      	cbz	r3, 2940 <cdcdf_acm_req+0x84>
    293a:	4668      	mov	r0, sp
    293c:	4798      	blx	r3
    293e:	b1f8      	cbz	r0, 2980 <cdcdf_acm_req+0xc4>
				usbd_cdc_line_coding = line_coding_tmp;
    2940:	4b18      	ldr	r3, [pc, #96]	; (29a4 <cdcdf_acm_req+0xe8>)
    2942:	aa02      	add	r2, sp, #8
    2944:	e912 0003 	ldmdb	r2, {r0, r1}
    2948:	6098      	str	r0, [r3, #8]
    294a:	8199      	strh	r1, [r3, #12]
    294c:	0c09      	lsrs	r1, r1, #16
    294e:	7399      	strb	r1, [r3, #14]
			return ERR_NONE;
    2950:	2000      	movs	r0, #0
    2952:	e7d4      	b.n	28fe <cdcdf_acm_req+0x42>
			return usbdc_xfer(ep, ctrl_buf, len, false);
    2954:	2300      	movs	r3, #0
    2956:	2207      	movs	r2, #7
    2958:	4628      	mov	r0, r5
    295a:	4c15      	ldr	r4, [pc, #84]	; (29b0 <cdcdf_acm_req+0xf4>)
    295c:	47a0      	blx	r4
    295e:	e7ce      	b.n	28fe <cdcdf_acm_req+0x42>
		usbdc_xfer(0, NULL, 0, 0);
    2960:	2300      	movs	r3, #0
    2962:	461a      	mov	r2, r3
    2964:	4619      	mov	r1, r3
    2966:	4618      	mov	r0, r3
    2968:	4d11      	ldr	r5, [pc, #68]	; (29b0 <cdcdf_acm_req+0xf4>)
    296a:	47a8      	blx	r5
		if (NULL != cdcdf_acm_notify_state) {
    296c:	4b0d      	ldr	r3, [pc, #52]	; (29a4 <cdcdf_acm_req+0xe8>)
    296e:	695b      	ldr	r3, [r3, #20]
    2970:	b143      	cbz	r3, 2984 <cdcdf_acm_req+0xc8>
			cdcdf_acm_notify_state(req->wValue);
    2972:	8860      	ldrh	r0, [r4, #2]
    2974:	4798      	blx	r3
		return ERR_NONE;
    2976:	2000      	movs	r0, #0
    2978:	e7c1      	b.n	28fe <cdcdf_acm_req+0x42>
			return ERR_INVALID_DATA;
    297a:	f04f 30ff 	mov.w	r0, #4294967295
    297e:	e7be      	b.n	28fe <cdcdf_acm_req+0x42>
			return ERR_NONE;
    2980:	2000      	movs	r0, #0
    2982:	e7bc      	b.n	28fe <cdcdf_acm_req+0x42>
		return ERR_NONE;
    2984:	2000      	movs	r0, #0
			return cdcdf_acm_set_req(ep, req, stage);
    2986:	e7ba      	b.n	28fe <cdcdf_acm_req+0x42>
		return ERR_NOT_FOUND;
    2988:	f06f 0009 	mvn.w	r0, #9
    298c:	e7b7      	b.n	28fe <cdcdf_acm_req+0x42>
		return ERR_NOT_FOUND;
    298e:	f06f 0009 	mvn.w	r0, #9
    2992:	e7b4      	b.n	28fe <cdcdf_acm_req+0x42>
		return ERR_NONE;
    2994:	2000      	movs	r0, #0
    2996:	e7b2      	b.n	28fe <cdcdf_acm_req+0x42>
		return ERR_INVALID_ARG;
    2998:	f06f 000c 	mvn.w	r0, #12
    299c:	e7af      	b.n	28fe <cdcdf_acm_req+0x42>
			return ERR_INVALID_DATA;
    299e:	f04f 30ff 	mov.w	r0, #4294967295
    29a2:	e7ac      	b.n	28fe <cdcdf_acm_req+0x42>
    29a4:	20000798 	.word	0x20000798
    29a8:	00003251 	.word	0x00003251
    29ac:	200007a0 	.word	0x200007a0
    29b0:	00002d2d 	.word	0x00002d2d

000029b4 <cdcdf_acm_ctrl>:
{
    29b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    29b8:	b083      	sub	sp, #12
    29ba:	4616      	mov	r6, r2
	switch (ctrl) {
    29bc:	2901      	cmp	r1, #1
    29be:	d066      	beq.n	2a8e <cdcdf_acm_ctrl+0xda>
    29c0:	b141      	cbz	r1, 29d4 <cdcdf_acm_ctrl+0x20>
		return ERR_INVALID_ARG;
    29c2:	2902      	cmp	r1, #2
    29c4:	bf0c      	ite	eq
    29c6:	f06f 001a 	mvneq.w	r0, #26
    29ca:	f06f 000c 	mvnne.w	r0, #12
}
    29ce:	b003      	add	sp, #12
    29d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
    29d4:	f8d0 a008 	ldr.w	sl, [r0, #8]
	ifc = desc->sod;
    29d8:	6810      	ldr	r0, [r2, #0]
		if (NULL == ifc) {
    29da:	2800      	cmp	r0, #0
    29dc:	f000 8085 	beq.w	2aea <cdcdf_acm_ctrl+0x136>
    29e0:	f10a 3bff 	add.w	fp, sl, #4294967295
    29e4:	f10a 0301 	add.w	r3, sl, #1
    29e8:	9300      	str	r3, [sp, #0]
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    29ea:	4f46      	ldr	r7, [pc, #280]	; (2b04 <cdcdf_acm_ctrl+0x150>)
				usb_d_ep_enable(func_data->func_ep_out);
    29ec:	f8df 9124 	ldr.w	r9, [pc, #292]	; 2b14 <cdcdf_acm_ctrl+0x160>
			ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    29f0:	f8df 8124 	ldr.w	r8, [pc, #292]	; 2b18 <cdcdf_acm_ctrl+0x164>
		ifc_desc.bInterfaceNumber = ifc[2];
    29f4:	7882      	ldrb	r2, [r0, #2]
		if ((CDC_CLASS_COMM == ifc_desc.bInterfaceClass) || (CDC_CLASS_DATA == ifc_desc.bInterfaceClass)) {
    29f6:	7943      	ldrb	r3, [r0, #5]
    29f8:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
    29fc:	2b02      	cmp	r3, #2
    29fe:	d002      	beq.n	2a06 <cdcdf_acm_ctrl+0x52>
			return ERR_NOT_FOUND;
    2a00:	f06f 0009 	mvn.w	r0, #9
    2a04:	e7e3      	b.n	29ce <cdcdf_acm_ctrl+0x1a>
    2a06:	f10b 0b01 	add.w	fp, fp, #1
			if (func_data->func_iface[i] == ifc_desc.bInterfaceNumber) { // Initialized
    2a0a:	f89b 3000 	ldrb.w	r3, [fp]
    2a0e:	429a      	cmp	r2, r3
    2a10:	d06e      	beq.n	2af0 <cdcdf_acm_ctrl+0x13c>
			} else if (func_data->func_iface[i] != 0xFF) { // Occupied
    2a12:	2bff      	cmp	r3, #255	; 0xff
    2a14:	d16f      	bne.n	2af6 <cdcdf_acm_ctrl+0x142>
				func_data->func_iface[i] = ifc_desc.bInterfaceNumber;
    2a16:	f88b 2000 	strb.w	r2, [fp]
		ep = usb_find_desc(ifc, desc->eod, USB_DT_ENDPOINT);
    2a1a:	2205      	movs	r2, #5
    2a1c:	6871      	ldr	r1, [r6, #4]
    2a1e:	4b3a      	ldr	r3, [pc, #232]	; (2b08 <cdcdf_acm_ctrl+0x154>)
    2a20:	4798      	blx	r3
		while (NULL != ep) {
    2a22:	4604      	mov	r4, r0
    2a24:	b1f8      	cbz	r0, 2a66 <cdcdf_acm_ctrl+0xb2>
    2a26:	f8cd b004 	str.w	fp, [sp, #4]
			ep_desc.bEndpointAddress = ep[2];
    2a2a:	78a5      	ldrb	r5, [r4, #2]
 *  \param[in] ptr Byte pointer to the address to get data
 *  \return a 16-bit word
 */
static inline uint16_t usb_get_u16(const uint8_t *ptr)
{
	return (ptr[0] + (ptr[1] << 8));
    2a2c:	7963      	ldrb	r3, [r4, #5]
    2a2e:	7922      	ldrb	r2, [r4, #4]
    2a30:	eb02 2203 	add.w	r2, r2, r3, lsl #8
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    2a34:	b292      	uxth	r2, r2
    2a36:	78e1      	ldrb	r1, [r4, #3]
    2a38:	4628      	mov	r0, r5
    2a3a:	47b8      	blx	r7
    2a3c:	2800      	cmp	r0, #0
    2a3e:	d15d      	bne.n	2afc <cdcdf_acm_ctrl+0x148>
			if (ep_desc.bEndpointAddress & USB_EP_DIR_IN) {
    2a40:	f015 0f80 	tst.w	r5, #128	; 0x80
				func_data->func_ep_in[i] = ep_desc.bEndpointAddress;
    2a44:	bf14      	ite	ne
    2a46:	f88b 5002 	strbne.w	r5, [fp, #2]
				func_data->func_ep_out = ep_desc.bEndpointAddress;
    2a4a:	f88a 5004 	strbeq.w	r5, [sl, #4]
				usb_d_ep_enable(func_data->func_ep_out);
    2a4e:	4628      	mov	r0, r5
    2a50:	47c8      	blx	r9
			desc->sod = ep;
    2a52:	6034      	str	r4, [r6, #0]
 *  \param[in] desc Byte pointer to the descriptor start address
 *  \return Byte pointer to the next descriptor
 */
static inline uint8_t *usb_desc_next(uint8_t *desc)
{
	return (desc + usb_desc_len(desc));
    2a54:	7820      	ldrb	r0, [r4, #0]
			ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    2a56:	6871      	ldr	r1, [r6, #4]
    2a58:	4420      	add	r0, r4
    2a5a:	47c0      	blx	r8
		while (NULL != ep) {
    2a5c:	4604      	mov	r4, r0
    2a5e:	2800      	cmp	r0, #0
    2a60:	d1e3      	bne.n	2a2a <cdcdf_acm_ctrl+0x76>
    2a62:	f8dd b004 	ldr.w	fp, [sp, #4]
		ifc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_INTERFACE);
    2a66:	6833      	ldr	r3, [r6, #0]
    2a68:	7818      	ldrb	r0, [r3, #0]
    2a6a:	2204      	movs	r2, #4
    2a6c:	6871      	ldr	r1, [r6, #4]
    2a6e:	4418      	add	r0, r3
    2a70:	4b25      	ldr	r3, [pc, #148]	; (2b08 <cdcdf_acm_ctrl+0x154>)
    2a72:	4798      	blx	r3
	for (i = 0; i < 2; i++) {
    2a74:	9b00      	ldr	r3, [sp, #0]
    2a76:	459b      	cmp	fp, r3
    2a78:	d004      	beq.n	2a84 <cdcdf_acm_ctrl+0xd0>
		if (NULL == ifc) {
    2a7a:	2800      	cmp	r0, #0
    2a7c:	d1ba      	bne.n	29f4 <cdcdf_acm_ctrl+0x40>
			return ERR_NOT_FOUND;
    2a7e:	f06f 0009 	mvn.w	r0, #9
    2a82:	e7a4      	b.n	29ce <cdcdf_acm_ctrl+0x1a>
	_cdcdf_acm_funcd.enabled = true;
    2a84:	2201      	movs	r2, #1
    2a86:	4b21      	ldr	r3, [pc, #132]	; (2b0c <cdcdf_acm_ctrl+0x158>)
    2a88:	715a      	strb	r2, [r3, #5]
	return ERR_NONE;
    2a8a:	2000      	movs	r0, #0
    2a8c:	e79f      	b.n	29ce <cdcdf_acm_ctrl+0x1a>
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
    2a8e:	6884      	ldr	r4, [r0, #8]
	if (desc) {
    2a90:	b142      	cbz	r2, 2aa4 <cdcdf_acm_ctrl+0xf0>
		ifc_desc.bInterfaceClass = desc->sod[5];
    2a92:	6813      	ldr	r3, [r2, #0]
		if ((ifc_desc.bInterfaceClass != CDC_CLASS_COMM) && (ifc_desc.bInterfaceClass != CDC_CLASS_DATA)) {
    2a94:	795b      	ldrb	r3, [r3, #5]
    2a96:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
    2a9a:	2b02      	cmp	r3, #2
    2a9c:	d002      	beq.n	2aa4 <cdcdf_acm_ctrl+0xf0>
			return ERR_NOT_FOUND;
    2a9e:	f06f 0009 	mvn.w	r0, #9
    2aa2:	e794      	b.n	29ce <cdcdf_acm_ctrl+0x1a>
		if (func_data->func_iface[i] == 0xFF) {
    2aa4:	7823      	ldrb	r3, [r4, #0]
    2aa6:	2bff      	cmp	r3, #255	; 0xff
    2aa8:	d008      	beq.n	2abc <cdcdf_acm_ctrl+0x108>
			func_data->func_iface[i] = 0xFF;
    2aaa:	23ff      	movs	r3, #255	; 0xff
    2aac:	7023      	strb	r3, [r4, #0]
			if (func_data->func_ep_in[i] != 0xFF) {
    2aae:	78a0      	ldrb	r0, [r4, #2]
    2ab0:	4298      	cmp	r0, r3
    2ab2:	d003      	beq.n	2abc <cdcdf_acm_ctrl+0x108>
				usb_d_ep_deinit(func_data->func_ep_in[i]);
    2ab4:	4b16      	ldr	r3, [pc, #88]	; (2b10 <cdcdf_acm_ctrl+0x15c>)
    2ab6:	4798      	blx	r3
				func_data->func_ep_in[i] = 0xFF;
    2ab8:	23ff      	movs	r3, #255	; 0xff
    2aba:	70a3      	strb	r3, [r4, #2]
		if (func_data->func_iface[i] == 0xFF) {
    2abc:	7863      	ldrb	r3, [r4, #1]
    2abe:	2bff      	cmp	r3, #255	; 0xff
    2ac0:	d008      	beq.n	2ad4 <cdcdf_acm_ctrl+0x120>
			func_data->func_iface[i] = 0xFF;
    2ac2:	23ff      	movs	r3, #255	; 0xff
    2ac4:	7063      	strb	r3, [r4, #1]
			if (func_data->func_ep_in[i] != 0xFF) {
    2ac6:	78e0      	ldrb	r0, [r4, #3]
    2ac8:	4298      	cmp	r0, r3
    2aca:	d003      	beq.n	2ad4 <cdcdf_acm_ctrl+0x120>
				usb_d_ep_deinit(func_data->func_ep_in[i]);
    2acc:	4b10      	ldr	r3, [pc, #64]	; (2b10 <cdcdf_acm_ctrl+0x15c>)
    2ace:	4798      	blx	r3
				func_data->func_ep_in[i] = 0xFF;
    2ad0:	23ff      	movs	r3, #255	; 0xff
    2ad2:	70e3      	strb	r3, [r4, #3]
	if (func_data->func_ep_out != 0xFF) {
    2ad4:	7920      	ldrb	r0, [r4, #4]
    2ad6:	28ff      	cmp	r0, #255	; 0xff
    2ad8:	d003      	beq.n	2ae2 <cdcdf_acm_ctrl+0x12e>
		usb_d_ep_deinit(func_data->func_ep_out);
    2ada:	4b0d      	ldr	r3, [pc, #52]	; (2b10 <cdcdf_acm_ctrl+0x15c>)
    2adc:	4798      	blx	r3
		func_data->func_ep_out = 0xFF;
    2ade:	23ff      	movs	r3, #255	; 0xff
    2ae0:	7123      	strb	r3, [r4, #4]
	_cdcdf_acm_funcd.enabled = false;
    2ae2:	2000      	movs	r0, #0
    2ae4:	4b09      	ldr	r3, [pc, #36]	; (2b0c <cdcdf_acm_ctrl+0x158>)
    2ae6:	7158      	strb	r0, [r3, #5]
    2ae8:	e771      	b.n	29ce <cdcdf_acm_ctrl+0x1a>
			return ERR_NOT_FOUND;
    2aea:	f06f 0009 	mvn.w	r0, #9
    2aee:	e76e      	b.n	29ce <cdcdf_acm_ctrl+0x1a>
				return ERR_ALREADY_INITIALIZED;
    2af0:	f06f 0011 	mvn.w	r0, #17
    2af4:	e76b      	b.n	29ce <cdcdf_acm_ctrl+0x1a>
				return ERR_NO_RESOURCE;
    2af6:	f06f 001b 	mvn.w	r0, #27
    2afa:	e768      	b.n	29ce <cdcdf_acm_ctrl+0x1a>
				return ERR_NOT_INITIALIZED;
    2afc:	f06f 0013 	mvn.w	r0, #19
    2b00:	e765      	b.n	29ce <cdcdf_acm_ctrl+0x1a>
    2b02:	bf00      	nop
    2b04:	00000c0d 	.word	0x00000c0d
    2b08:	00003271 	.word	0x00003271
    2b0c:	20000798 	.word	0x20000798
    2b10:	00000c75 	.word	0x00000c75
    2b14:	00000ca1 	.word	0x00000ca1
    2b18:	000032ab 	.word	0x000032ab

00002b1c <cdcdf_acm_init>:

/**
 * \brief Initialize the USB CDC ACM Function Driver
 */
int32_t cdcdf_acm_init(void)
{
    2b1c:	b508      	push	{r3, lr}
	if (usbdc_get_state() > USBD_S_POWER) {
    2b1e:	4b0a      	ldr	r3, [pc, #40]	; (2b48 <cdcdf_acm_init+0x2c>)
    2b20:	4798      	blx	r3
    2b22:	2801      	cmp	r0, #1
    2b24:	d80c      	bhi.n	2b40 <cdcdf_acm_init+0x24>
		return ERR_DENIED;
	}

	_cdcdf_acm.ctrl      = cdcdf_acm_ctrl;
    2b26:	4809      	ldr	r0, [pc, #36]	; (2b4c <cdcdf_acm_init+0x30>)
    2b28:	4b09      	ldr	r3, [pc, #36]	; (2b50 <cdcdf_acm_init+0x34>)
    2b2a:	61c3      	str	r3, [r0, #28]
	_cdcdf_acm.func_data = &_cdcdf_acm_funcd;
    2b2c:	6200      	str	r0, [r0, #32]

	usbdc_register_function(&_cdcdf_acm);
    2b2e:	3018      	adds	r0, #24
    2b30:	4b08      	ldr	r3, [pc, #32]	; (2b54 <cdcdf_acm_init+0x38>)
    2b32:	4798      	blx	r3
	usbdc_register_handler(USBDC_HDL_REQ, &cdcdf_acm_req_h);
    2b34:	4908      	ldr	r1, [pc, #32]	; (2b58 <cdcdf_acm_init+0x3c>)
    2b36:	2001      	movs	r0, #1
    2b38:	4b08      	ldr	r3, [pc, #32]	; (2b5c <cdcdf_acm_init+0x40>)
    2b3a:	4798      	blx	r3
	return ERR_NONE;
    2b3c:	2000      	movs	r0, #0
    2b3e:	bd08      	pop	{r3, pc}
		return ERR_DENIED;
    2b40:	f06f 0010 	mvn.w	r0, #16
}
    2b44:	bd08      	pop	{r3, pc}
    2b46:	bf00      	nop
    2b48:	0000325d 	.word	0x0000325d
    2b4c:	20000798 	.word	0x20000798
    2b50:	000029b5 	.word	0x000029b5
    2b54:	000031fd 	.word	0x000031fd
    2b58:	20000074 	.word	0x20000074
    2b5c:	00003169 	.word	0x00003169

00002b60 <cdcdf_acm_write>:
/**
 * \brief Check whether CDC ACM Function is enabled
 */
bool cdcdf_acm_is_enabled(void)
{
	return _cdcdf_acm_funcd.enabled;
    2b60:	4b07      	ldr	r3, [pc, #28]	; (2b80 <cdcdf_acm_write+0x20>)
	if (!cdcdf_acm_is_enabled()) {
    2b62:	795b      	ldrb	r3, [r3, #5]
    2b64:	b143      	cbz	r3, 2b78 <cdcdf_acm_write+0x18>
{
    2b66:	b510      	push	{r4, lr}
    2b68:	460a      	mov	r2, r1
    2b6a:	4601      	mov	r1, r0
	return usbdc_xfer(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX], buf, size, true);
    2b6c:	2301      	movs	r3, #1
    2b6e:	4804      	ldr	r0, [pc, #16]	; (2b80 <cdcdf_acm_write+0x20>)
    2b70:	78c0      	ldrb	r0, [r0, #3]
    2b72:	4c04      	ldr	r4, [pc, #16]	; (2b84 <cdcdf_acm_write+0x24>)
    2b74:	47a0      	blx	r4
    2b76:	bd10      	pop	{r4, pc}
		return ERR_DENIED;
    2b78:	f06f 0010 	mvn.w	r0, #16
    2b7c:	4770      	bx	lr
    2b7e:	bf00      	nop
    2b80:	20000798 	.word	0x20000798
    2b84:	00002d2d 	.word	0x00002d2d

00002b88 <cdcdf_acm_is_enabled>:
}
    2b88:	4b01      	ldr	r3, [pc, #4]	; (2b90 <cdcdf_acm_is_enabled+0x8>)
    2b8a:	7958      	ldrb	r0, [r3, #5]
    2b8c:	4770      	bx	lr
    2b8e:	bf00      	nop
    2b90:	20000798 	.word	0x20000798

00002b94 <usbdc_unconfig>:

/**
 * \brief Unconfig, close all interfaces
 */
static void usbdc_unconfig(void)
{
    2b94:	b570      	push	{r4, r5, r6, lr}
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    2b96:	4b07      	ldr	r3, [pc, #28]	; (2bb4 <usbdc_unconfig+0x20>)
    2b98:	691c      	ldr	r4, [r3, #16]
	while (NULL != func) {
    2b9a:	b14c      	cbz	r4, 2bb0 <usbdc_unconfig+0x1c>
		func->ctrl(func, USBDF_DISABLE, NULL);
    2b9c:	2600      	movs	r6, #0
    2b9e:	2501      	movs	r5, #1
    2ba0:	6863      	ldr	r3, [r4, #4]
    2ba2:	4632      	mov	r2, r6
    2ba4:	4629      	mov	r1, r5
    2ba6:	4620      	mov	r0, r4
    2ba8:	4798      	blx	r3
		func = func->next;
    2baa:	6824      	ldr	r4, [r4, #0]
	while (NULL != func) {
    2bac:	2c00      	cmp	r4, #0
    2bae:	d1f7      	bne.n	2ba0 <usbdc_unconfig+0xc>
    2bb0:	bd70      	pop	{r4, r5, r6, pc}
    2bb2:	bf00      	nop
    2bb4:	200007bc 	.word	0x200007bc

00002bb8 <usbdc_change_notify>:
	}
}

/** Invoke all registered Change notification callbacks. */
static void usbdc_change_notify(enum usbdc_change_type change, uint32_t value)
{
    2bb8:	b570      	push	{r4, r5, r6, lr}
    2bba:	4606      	mov	r6, r0
    2bbc:	460d      	mov	r5, r1
	struct usbdc_change_handler *cg = (struct usbdc_change_handler *)usbdc.handlers.change_list.head;
    2bbe:	4b07      	ldr	r3, [pc, #28]	; (2bdc <usbdc_change_notify+0x24>)
    2bc0:	68dc      	ldr	r4, [r3, #12]

	while (cg != NULL) {
    2bc2:	b91c      	cbnz	r4, 2bcc <usbdc_change_notify+0x14>
    2bc4:	bd70      	pop	{r4, r5, r6, pc}
		if (NULL != cg->cb) {
			cg->cb(change, value);
		}
		cg = cg->next;
    2bc6:	6824      	ldr	r4, [r4, #0]
	while (cg != NULL) {
    2bc8:	2c00      	cmp	r4, #0
    2bca:	d0fb      	beq.n	2bc4 <usbdc_change_notify+0xc>
		if (NULL != cg->cb) {
    2bcc:	6863      	ldr	r3, [r4, #4]
    2bce:	2b00      	cmp	r3, #0
    2bd0:	d0f9      	beq.n	2bc6 <usbdc_change_notify+0xe>
			cg->cb(change, value);
    2bd2:	4629      	mov	r1, r5
    2bd4:	4630      	mov	r0, r6
    2bd6:	4798      	blx	r3
    2bd8:	e7f5      	b.n	2bc6 <usbdc_change_notify+0xe>
    2bda:	bf00      	nop
    2bdc:	200007bc 	.word	0x200007bc

00002be0 <usbdc_request_handler>:
	}
}

/** Invoke all registered request callbacks until request handled. */
static int32_t usbdc_request_handler(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    2be0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2be2:	4607      	mov	r7, r0
    2be4:	460e      	mov	r6, r1
    2be6:	4615      	mov	r5, r2
	struct usbdc_req_handler *h = (struct usbdc_req_handler *)usbdc.handlers.req_list.head;
    2be8:	4b0c      	ldr	r3, [pc, #48]	; (2c1c <usbdc_request_handler+0x3c>)
    2bea:	689c      	ldr	r4, [r3, #8]
	int32_t                   rc;

	while (h != NULL) {
    2bec:	b91c      	cbnz	r4, 2bf6 <usbdc_request_handler+0x16>
				return -1;
			}
		}
		h = h->next;
	}
	return false;
    2bee:	2000      	movs	r0, #0
    2bf0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		h = h->next;
    2bf2:	6824      	ldr	r4, [r4, #0]
	while (h != NULL) {
    2bf4:	b16c      	cbz	r4, 2c12 <usbdc_request_handler+0x32>
		if (NULL != h->cb) {
    2bf6:	6863      	ldr	r3, [r4, #4]
    2bf8:	2b00      	cmp	r3, #0
    2bfa:	d0fa      	beq.n	2bf2 <usbdc_request_handler+0x12>
			rc = h->cb(ep, req, stage);
    2bfc:	462a      	mov	r2, r5
    2bfe:	4631      	mov	r1, r6
    2c00:	4638      	mov	r0, r7
    2c02:	4798      	blx	r3
			if (0 == rc) {
    2c04:	b138      	cbz	r0, 2c16 <usbdc_request_handler+0x36>
			} else if (ERR_NOT_FOUND != rc) {
    2c06:	f110 0f0a 	cmn.w	r0, #10
    2c0a:	d0f2      	beq.n	2bf2 <usbdc_request_handler+0x12>
				return -1;
    2c0c:	f04f 30ff 	mov.w	r0, #4294967295
}
    2c10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return false;
    2c12:	2000      	movs	r0, #0
    2c14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				return true;
    2c16:	2001      	movs	r0, #1
    2c18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2c1a:	bf00      	nop
    2c1c:	200007bc 	.word	0x200007bc

00002c20 <usbd_sof_cb>:

/**
 * \brief Callback invoked on USB device SOF
 */
static void usbd_sof_cb(void)
{
    2c20:	b510      	push	{r4, lr}
	struct usbdc_sof_handler *sof = (struct usbdc_sof_handler *)usbdc.handlers.sof_list.head;
    2c22:	4b06      	ldr	r3, [pc, #24]	; (2c3c <usbd_sof_cb+0x1c>)
    2c24:	685c      	ldr	r4, [r3, #4]
	while (sof != NULL) {
    2c26:	b91c      	cbnz	r4, 2c30 <usbd_sof_cb+0x10>
    2c28:	bd10      	pop	{r4, pc}
		sof = sof->next;
    2c2a:	6824      	ldr	r4, [r4, #0]
	while (sof != NULL) {
    2c2c:	2c00      	cmp	r4, #0
    2c2e:	d0fb      	beq.n	2c28 <usbd_sof_cb+0x8>
		if (NULL != sof->cb) {
    2c30:	6863      	ldr	r3, [r4, #4]
    2c32:	2b00      	cmp	r3, #0
    2c34:	d0f9      	beq.n	2c2a <usbd_sof_cb+0xa>
			sof->cb();
    2c36:	4798      	blx	r3
    2c38:	e7f7      	b.n	2c2a <usbd_sof_cb+0xa>
    2c3a:	bf00      	nop
    2c3c:	200007bc 	.word	0x200007bc

00002c40 <usbdc_cb_ctl_done>:
 * \return Data has error or not.
 * \retval true There is data error, protocol error.
 * \retval false There is no data error.
 */
static bool usbdc_cb_ctl_done(const uint8_t ep, const enum usb_xfer_code code, struct usb_req *req)
{
    2c40:	b510      	push	{r4, lr}
    2c42:	4614      	mov	r4, r2
	(void)ep;

	switch (code) {
    2c44:	b119      	cbz	r1, 2c4e <usbdc_cb_ctl_done+0xe>
    2c46:	2901      	cmp	r1, #1
    2c48:	d026      	beq.n	2c98 <usbdc_cb_ctl_done+0x58>
		return usbdc_ctrl_data_end(req);
	default:
		break;
	}
	return false;
}
    2c4a:	2000      	movs	r0, #0
    2c4c:	bd10      	pop	{r4, pc}
	if (req->bmRequestType != USB_REQT_TYPE_STANDARD) {
    2c4e:	7813      	ldrb	r3, [r2, #0]
    2c50:	2b00      	cmp	r3, #0
    2c52:	d1fa      	bne.n	2c4a <usbdc_cb_ctl_done+0xa>
	switch (req->bRequest) {
    2c54:	7853      	ldrb	r3, [r2, #1]
    2c56:	2b05      	cmp	r3, #5
    2c58:	d00f      	beq.n	2c7a <usbdc_cb_ctl_done+0x3a>
    2c5a:	2b09      	cmp	r3, #9
    2c5c:	d1f5      	bne.n	2c4a <usbdc_cb_ctl_done+0xa>
		usbdc.cfg_value = req->wValue;
    2c5e:	8852      	ldrh	r2, [r2, #2]
    2c60:	4b10      	ldr	r3, [pc, #64]	; (2ca4 <usbdc_cb_ctl_done+0x64>)
    2c62:	76da      	strb	r2, [r3, #27]
		usbdc.state     = req->wValue ? USBD_S_CONFIG : USBD_S_ADDRESS;
    2c64:	8863      	ldrh	r3, [r4, #2]
    2c66:	2b00      	cmp	r3, #0
    2c68:	bf14      	ite	ne
    2c6a:	2104      	movne	r1, #4
    2c6c:	2103      	moveq	r1, #3
    2c6e:	4b0d      	ldr	r3, [pc, #52]	; (2ca4 <usbdc_cb_ctl_done+0x64>)
    2c70:	7699      	strb	r1, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
    2c72:	2001      	movs	r0, #1
    2c74:	4b0c      	ldr	r3, [pc, #48]	; (2ca8 <usbdc_cb_ctl_done+0x68>)
    2c76:	4798      	blx	r3
    2c78:	e7e7      	b.n	2c4a <usbdc_cb_ctl_done+0xa>
		usbdc_set_address(req->wValue);
    2c7a:	8850      	ldrh	r0, [r2, #2]
	usb_d_set_address(addr);
    2c7c:	b2c0      	uxtb	r0, r0
    2c7e:	4b0b      	ldr	r3, [pc, #44]	; (2cac <usbdc_cb_ctl_done+0x6c>)
    2c80:	4798      	blx	r3
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
    2c82:	8863      	ldrh	r3, [r4, #2]
    2c84:	2b00      	cmp	r3, #0
    2c86:	bf14      	ite	ne
    2c88:	2103      	movne	r1, #3
    2c8a:	2102      	moveq	r1, #2
    2c8c:	4b05      	ldr	r3, [pc, #20]	; (2ca4 <usbdc_cb_ctl_done+0x64>)
    2c8e:	7699      	strb	r1, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
    2c90:	2001      	movs	r0, #1
    2c92:	4b05      	ldr	r3, [pc, #20]	; (2ca8 <usbdc_cb_ctl_done+0x68>)
    2c94:	4798      	blx	r3
    2c96:	e7d8      	b.n	2c4a <usbdc_cb_ctl_done+0xa>
	usbdc_request_handler(0, req, USB_DATA_STAGE);
    2c98:	2201      	movs	r2, #1
    2c9a:	4621      	mov	r1, r4
    2c9c:	2000      	movs	r0, #0
    2c9e:	4b04      	ldr	r3, [pc, #16]	; (2cb0 <usbdc_cb_ctl_done+0x70>)
    2ca0:	4798      	blx	r3
		return usbdc_ctrl_data_end(req);
    2ca2:	e7d2      	b.n	2c4a <usbdc_cb_ctl_done+0xa>
    2ca4:	200007bc 	.word	0x200007bc
    2ca8:	00002bb9 	.word	0x00002bb9
    2cac:	00000c01 	.word	0x00000c01
    2cb0:	00002be1 	.word	0x00002be1

00002cb4 <usbdc_reset>:

/**
 * \brief USB Device Core Reset
 */
void usbdc_reset(void)
{
    2cb4:	b570      	push	{r4, r5, r6, lr}
	usbdc_unconfig();
    2cb6:	4b0d      	ldr	r3, [pc, #52]	; (2cec <usbdc_reset+0x38>)
    2cb8:	4798      	blx	r3

	usbdc.state       = USBD_S_DEFAULT;
    2cba:	4d0d      	ldr	r5, [pc, #52]	; (2cf0 <usbdc_reset+0x3c>)
    2cbc:	2602      	movs	r6, #2
    2cbe:	76ae      	strb	r6, [r5, #26]
	usbdc.cfg_value   = 0;
    2cc0:	2400      	movs	r4, #0
    2cc2:	76ec      	strb	r4, [r5, #27]
	usbdc.ifc_alt_map = 0;
    2cc4:	776c      	strb	r4, [r5, #29]

	// Setup EP0
	usb_d_ep_deinit(0);
    2cc6:	4620      	mov	r0, r4
    2cc8:	4b0a      	ldr	r3, [pc, #40]	; (2cf4 <usbdc_reset+0x40>)
    2cca:	4798      	blx	r3
	usb_d_ep0_init(usbdc.ctrl_size);
    2ccc:	7f28      	ldrb	r0, [r5, #28]
    2cce:	4b0a      	ldr	r3, [pc, #40]	; (2cf8 <usbdc_reset+0x44>)
    2cd0:	4798      	blx	r3
	usb_d_ep_register_callback(0, USB_D_EP_CB_SETUP, (FUNC_PTR)usbdc_cb_ctl_req);
    2cd2:	4a0a      	ldr	r2, [pc, #40]	; (2cfc <usbdc_reset+0x48>)
    2cd4:	4621      	mov	r1, r4
    2cd6:	4620      	mov	r0, r4
    2cd8:	4d09      	ldr	r5, [pc, #36]	; (2d00 <usbdc_reset+0x4c>)
    2cda:	47a8      	blx	r5
	usb_d_ep_register_callback(0, USB_D_EP_CB_XFER, (FUNC_PTR)usbdc_cb_ctl_done);
    2cdc:	4a09      	ldr	r2, [pc, #36]	; (2d04 <usbdc_reset+0x50>)
    2cde:	4631      	mov	r1, r6
    2ce0:	4620      	mov	r0, r4
    2ce2:	47a8      	blx	r5
	usb_d_ep_enable(0);
    2ce4:	4620      	mov	r0, r4
    2ce6:	4b08      	ldr	r3, [pc, #32]	; (2d08 <usbdc_reset+0x54>)
    2ce8:	4798      	blx	r3
    2cea:	bd70      	pop	{r4, r5, r6, pc}
    2cec:	00002b95 	.word	0x00002b95
    2cf0:	200007bc 	.word	0x200007bc
    2cf4:	00000c75 	.word	0x00000c75
    2cf8:	00000c61 	.word	0x00000c61
    2cfc:	00002d4d 	.word	0x00002d4d
    2d00:	00000e75 	.word	0x00000e75
    2d04:	00002c41 	.word	0x00002c41
    2d08:	00000ca1 	.word	0x00000ca1

00002d0c <usbd_event_cb>:
 * \brief Callback invoked on USB device events
 * \param[in] ev Event code.
 * \param[in] param Event parameter for event handling.
 */
static void usbd_event_cb(const enum usb_event ev, const uint32_t param)
{
    2d0c:	b508      	push	{r3, lr}
	(void)param;

	switch (ev) {
    2d0e:	b110      	cbz	r0, 2d16 <usbd_event_cb+0xa>
    2d10:	2801      	cmp	r0, #1
    2d12:	d004      	beq.n	2d1e <usbd_event_cb+0x12>
    2d14:	bd08      	pop	{r3, pc}
	case USB_EV_VBUS:
		usbdc_change_notify(USBDC_C_CONN, param);
    2d16:	2000      	movs	r0, #0
    2d18:	4b02      	ldr	r3, [pc, #8]	; (2d24 <usbd_event_cb+0x18>)
    2d1a:	4798      	blx	r3
		break;
    2d1c:	bd08      	pop	{r3, pc}

	case USB_EV_RESET:
		usbdc_reset();
    2d1e:	4b02      	ldr	r3, [pc, #8]	; (2d28 <usbd_event_cb+0x1c>)
    2d20:	4798      	blx	r3
    2d22:	bd08      	pop	{r3, pc}
    2d24:	00002bb9 	.word	0x00002bb9
    2d28:	00002cb5 	.word	0x00002cb5

00002d2c <usbdc_xfer>:

/**
 * \brief Issue USB device transfer
 */
int32_t usbdc_xfer(uint8_t ep, uint8_t *buf, uint32_t size, bool zlp)
{
    2d2c:	b500      	push	{lr}
    2d2e:	b085      	sub	sp, #20
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    2d30:	9101      	str	r1, [sp, #4]
    2d32:	9202      	str	r2, [sp, #8]
    2d34:	f88d 000c 	strb.w	r0, [sp, #12]
    2d38:	f88d 300d 	strb.w	r3, [sp, #13]
	return usb_d_ep_transfer(&xfer);
    2d3c:	a801      	add	r0, sp, #4
    2d3e:	4b02      	ldr	r3, [pc, #8]	; (2d48 <usbdc_xfer+0x1c>)
    2d40:	4798      	blx	r3
}
    2d42:	b005      	add	sp, #20
    2d44:	f85d fb04 	ldr.w	pc, [sp], #4
    2d48:	00000ced 	.word	0x00000ced

00002d4c <usbdc_cb_ctl_req>:
{
    2d4c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    2d50:	b083      	sub	sp, #12
    2d52:	4605      	mov	r5, r0
    2d54:	460c      	mov	r4, r1
	switch (usbdc_request_handler(ep, req, USB_SETUP_STAGE)) {
    2d56:	2200      	movs	r2, #0
    2d58:	4b9b      	ldr	r3, [pc, #620]	; (2fc8 <usbdc_cb_ctl_req+0x27c>)
    2d5a:	4798      	blx	r3
    2d5c:	f1b0 3fff 	cmp.w	r0, #4294967295
    2d60:	d00b      	beq.n	2d7a <usbdc_cb_ctl_req+0x2e>
    2d62:	2801      	cmp	r0, #1
    2d64:	f000 81e3 	beq.w	312e <usbdc_cb_ctl_req+0x3e2>
	switch (req->bmRequestType & (USB_REQT_TYPE_MASK | USB_REQT_DIR_IN)) {
    2d68:	7823      	ldrb	r3, [r4, #0]
    2d6a:	f013 02e0 	ands.w	r2, r3, #224	; 0xe0
    2d6e:	d008      	beq.n	2d82 <usbdc_cb_ctl_req+0x36>
    2d70:	2a80      	cmp	r2, #128	; 0x80
    2d72:	f000 80f4 	beq.w	2f5e <usbdc_cb_ctl_req+0x212>
		return false;
    2d76:	2000      	movs	r0, #0
    2d78:	e000      	b.n	2d7c <usbdc_cb_ctl_req+0x30>
		return false;
    2d7a:	2000      	movs	r0, #0
}
    2d7c:	b003      	add	sp, #12
    2d7e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	switch (req->bRequest) {
    2d82:	7862      	ldrb	r2, [r4, #1]
    2d84:	3a01      	subs	r2, #1
    2d86:	2a0a      	cmp	r2, #10
    2d88:	f200 81d3 	bhi.w	3132 <usbdc_cb_ctl_req+0x3e6>
    2d8c:	e8df f012 	tbh	[pc, r2, lsl #1]
    2d90:	01d10060 	.word	0x01d10060
    2d94:	01d10076 	.word	0x01d10076
    2d98:	01d1000b 	.word	0x01d1000b
    2d9c:	01d101d1 	.word	0x01d101d1
    2da0:	01d10015 	.word	0x01d10015
    2da4:	008c      	.short	0x008c
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    2da6:	2301      	movs	r3, #1
    2da8:	2200      	movs	r2, #0
    2daa:	4611      	mov	r1, r2
    2dac:	4628      	mov	r0, r5
    2dae:	4c87      	ldr	r4, [pc, #540]	; (2fcc <usbdc_cb_ctl_req+0x280>)
    2db0:	47a0      	blx	r4
    2db2:	fab0 f080 	clz	r0, r0
    2db6:	0940      	lsrs	r0, r0, #5
    2db8:	e7e0      	b.n	2d7c <usbdc_cb_ctl_req+0x30>
		if (!usbdc_set_config(req->wValue)) {
    2dba:	8862      	ldrh	r2, [r4, #2]
    2dbc:	b2d2      	uxtb	r2, r2
	if (cfg_value == 0) {
    2dbe:	b1ca      	cbz	r2, 2df4 <usbdc_cb_ctl_req+0xa8>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, cfg_value);
    2dc0:	4b83      	ldr	r3, [pc, #524]	; (2fd0 <usbdc_cb_ctl_req+0x284>)
    2dc2:	681b      	ldr	r3, [r3, #0]
    2dc4:	6859      	ldr	r1, [r3, #4]
    2dc6:	6818      	ldr	r0, [r3, #0]
    2dc8:	4b82      	ldr	r3, [pc, #520]	; (2fd4 <usbdc_cb_ctl_req+0x288>)
    2dca:	4798      	blx	r3
	if (NULL == cfg_desc) {
    2dcc:	2800      	cmp	r0, #0
    2dce:	f000 81be 	beq.w	314e <usbdc_cb_ctl_req+0x402>
	return (ptr[0] + (ptr[1] << 8));
    2dd2:	78c2      	ldrb	r2, [r0, #3]
    2dd4:	7881      	ldrb	r1, [r0, #2]
    2dd6:	eb01 2102 	add.w	r1, r1, r2, lsl #8
	desc.eod  = cfg_desc + total_len;
    2dda:	fa10 f181 	uxtah	r1, r0, r1
    2dde:	9101      	str	r1, [sp, #4]
	desc.sod  = usb_find_desc(cfg_desc, desc.eod, USB_DT_INTERFACE);
    2de0:	2204      	movs	r2, #4
    2de2:	4b7d      	ldr	r3, [pc, #500]	; (2fd8 <usbdc_cb_ctl_req+0x28c>)
    2de4:	4798      	blx	r3
    2de6:	9000      	str	r0, [sp, #0]
	while (NULL != desc.sod) {
    2de8:	b130      	cbz	r0, 2df8 <usbdc_cb_ctl_req+0xac>
    2dea:	24ff      	movs	r4, #255	; 0xff
			func       = (struct usbdf_driver *)usbdc.func_list.head;
    2dec:	f8df 81e0 	ldr.w	r8, [pc, #480]	; 2fd0 <usbdc_cb_ctl_req+0x284>
		desc.sod = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    2df0:	4f79      	ldr	r7, [pc, #484]	; (2fd8 <usbdc_cb_ctl_req+0x28c>)
    2df2:	e018      	b.n	2e26 <usbdc_cb_ctl_req+0xda>
		usbdc_unconfig();
    2df4:	4b79      	ldr	r3, [pc, #484]	; (2fdc <usbdc_cb_ctl_req+0x290>)
    2df6:	4798      	blx	r3
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    2df8:	2301      	movs	r3, #1
    2dfa:	2200      	movs	r2, #0
    2dfc:	4611      	mov	r1, r2
    2dfe:	4628      	mov	r0, r5
    2e00:	4c72      	ldr	r4, [pc, #456]	; (2fcc <usbdc_cb_ctl_req+0x280>)
    2e02:	47a0      	blx	r4
    2e04:	fab0 f080 	clz	r0, r0
    2e08:	0940      	lsrs	r0, r0, #5
    2e0a:	e7b7      	b.n	2d7c <usbdc_cb_ctl_req+0x30>
			last_iface = desc.sod[2];
    2e0c:	464c      	mov	r4, r9
    2e0e:	e000      	b.n	2e12 <usbdc_cb_ctl_req+0xc6>
    2e10:	464c      	mov	r4, r9
		desc.sod = usb_desc_next(desc.sod);
    2e12:	9800      	ldr	r0, [sp, #0]
	return (desc + usb_desc_len(desc));
    2e14:	7803      	ldrb	r3, [r0, #0]
    2e16:	4418      	add	r0, r3
    2e18:	9000      	str	r0, [sp, #0]
		desc.sod = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    2e1a:	2204      	movs	r2, #4
    2e1c:	9901      	ldr	r1, [sp, #4]
    2e1e:	47b8      	blx	r7
    2e20:	9000      	str	r0, [sp, #0]
	while (NULL != desc.sod) {
    2e22:	2800      	cmp	r0, #0
    2e24:	d0e8      	beq.n	2df8 <usbdc_cb_ctl_req+0xac>
		if (last_iface != desc.sod[2] /* bInterfaceNumber */) {
    2e26:	f890 9002 	ldrb.w	r9, [r0, #2]
    2e2a:	45a1      	cmp	r9, r4
    2e2c:	d0f1      	beq.n	2e12 <usbdc_cb_ctl_req+0xc6>
			func       = (struct usbdf_driver *)usbdc.func_list.head;
    2e2e:	f8d8 4010 	ldr.w	r4, [r8, #16]
			while (NULL != func) {
    2e32:	2c00      	cmp	r4, #0
    2e34:	d0ea      	beq.n	2e0c <usbdc_cb_ctl_req+0xc0>
				if (func->ctrl(func, USBDF_ENABLE, &desc)) {
    2e36:	2600      	movs	r6, #0
    2e38:	6863      	ldr	r3, [r4, #4]
    2e3a:	466a      	mov	r2, sp
    2e3c:	4631      	mov	r1, r6
    2e3e:	4620      	mov	r0, r4
    2e40:	4798      	blx	r3
    2e42:	2800      	cmp	r0, #0
    2e44:	d0e4      	beq.n	2e10 <usbdc_cb_ctl_req+0xc4>
					func = func->next;
    2e46:	6824      	ldr	r4, [r4, #0]
			while (NULL != func) {
    2e48:	2c00      	cmp	r4, #0
    2e4a:	d1f5      	bne.n	2e38 <usbdc_cb_ctl_req+0xec>
			last_iface = desc.sod[2];
    2e4c:	464c      	mov	r4, r9
    2e4e:	e7e0      	b.n	2e12 <usbdc_cb_ctl_req+0xc6>
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    2e50:	f003 031f 	and.w	r3, r3, #31
    2e54:	2b02      	cmp	r3, #2
    2e56:	f040 816e 	bne.w	3136 <usbdc_cb_ctl_req+0x3ea>
		if (req->wLength != 0) {
    2e5a:	88e3      	ldrh	r3, [r4, #6]
    2e5c:	b10b      	cbz	r3, 2e62 <usbdc_cb_ctl_req+0x116>
			return false;
    2e5e:	2000      	movs	r0, #0
    2e60:	e78c      	b.n	2d7c <usbdc_cb_ctl_req+0x30>
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_CLR);
    2e62:	88a0      	ldrh	r0, [r4, #4]
    2e64:	2100      	movs	r1, #0
    2e66:	b2c0      	uxtb	r0, r0
    2e68:	4b5d      	ldr	r3, [pc, #372]	; (2fe0 <usbdc_cb_ctl_req+0x294>)
    2e6a:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
    2e6c:	2301      	movs	r3, #1
    2e6e:	2200      	movs	r2, #0
    2e70:	4611      	mov	r1, r2
    2e72:	4628      	mov	r0, r5
    2e74:	4c55      	ldr	r4, [pc, #340]	; (2fcc <usbdc_cb_ctl_req+0x280>)
    2e76:	47a0      	blx	r4
		return true;
    2e78:	2001      	movs	r0, #1
    2e7a:	e77f      	b.n	2d7c <usbdc_cb_ctl_req+0x30>
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    2e7c:	f003 031f 	and.w	r3, r3, #31
    2e80:	2b02      	cmp	r3, #2
    2e82:	f040 815a 	bne.w	313a <usbdc_cb_ctl_req+0x3ee>
		if (req->wLength != 0) {
    2e86:	88e3      	ldrh	r3, [r4, #6]
    2e88:	b10b      	cbz	r3, 2e8e <usbdc_cb_ctl_req+0x142>
			return false;
    2e8a:	2000      	movs	r0, #0
    2e8c:	e776      	b.n	2d7c <usbdc_cb_ctl_req+0x30>
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_SET);
    2e8e:	88a0      	ldrh	r0, [r4, #4]
    2e90:	2101      	movs	r1, #1
    2e92:	b2c0      	uxtb	r0, r0
    2e94:	4b52      	ldr	r3, [pc, #328]	; (2fe0 <usbdc_cb_ctl_req+0x294>)
    2e96:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
    2e98:	2301      	movs	r3, #1
    2e9a:	2200      	movs	r2, #0
    2e9c:	4611      	mov	r1, r2
    2e9e:	4628      	mov	r0, r5
    2ea0:	4c4a      	ldr	r4, [pc, #296]	; (2fcc <usbdc_cb_ctl_req+0x280>)
    2ea2:	47a0      	blx	r4
		return true;
    2ea4:	2001      	movs	r0, #1
    2ea6:	e769      	b.n	2d7c <usbdc_cb_ctl_req+0x30>
		return usbdc_set_interface(req->wValue, req->wIndex);
    2ea8:	8866      	ldrh	r6, [r4, #2]
    2eaa:	88a4      	ldrh	r4, [r4, #4]
		ifc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, usbdc.cfg_value);
    2eac:	4a48      	ldr	r2, [pc, #288]	; (2fd0 <usbdc_cb_ctl_req+0x284>)
    2eae:	6813      	ldr	r3, [r2, #0]
    2eb0:	7ed2      	ldrb	r2, [r2, #27]
    2eb2:	6859      	ldr	r1, [r3, #4]
    2eb4:	6818      	ldr	r0, [r3, #0]
    2eb6:	4b47      	ldr	r3, [pc, #284]	; (2fd4 <usbdc_cb_ctl_req+0x288>)
    2eb8:	4798      	blx	r3
	if (NULL == ifc) {
    2eba:	2800      	cmp	r0, #0
    2ebc:	d045      	beq.n	2f4a <usbdc_cb_ctl_req+0x1fe>
	desc.sod = ifc;
    2ebe:	9000      	str	r0, [sp, #0]
	return (ptr[0] + (ptr[1] << 8));
    2ec0:	78c2      	ldrb	r2, [r0, #3]
    2ec2:	7881      	ldrb	r1, [r0, #2]
    2ec4:	eb01 2102 	add.w	r1, r1, r2, lsl #8
	desc.eod = ifc + usb_cfg_desc_total_len(ifc);
    2ec8:	fa10 f181 	uxtah	r1, r0, r1
    2ecc:	9101      	str	r1, [sp, #4]
	if (NULL == (ifc = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE))) {
    2ece:	2204      	movs	r2, #4
    2ed0:	4b41      	ldr	r3, [pc, #260]	; (2fd8 <usbdc_cb_ctl_req+0x28c>)
    2ed2:	4798      	blx	r3
    2ed4:	4603      	mov	r3, r0
    2ed6:	2800      	cmp	r0, #0
    2ed8:	d039      	beq.n	2f4e <usbdc_cb_ctl_req+0x202>
		ifc      = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    2eda:	2704      	movs	r7, #4
    2edc:	4d3e      	ldr	r5, [pc, #248]	; (2fd8 <usbdc_cb_ctl_req+0x28c>)
    2ede:	e008      	b.n	2ef2 <usbdc_cb_ctl_req+0x1a6>
		desc.sod = usb_desc_next(desc.sod);
    2ee0:	9800      	ldr	r0, [sp, #0]
	return (desc + usb_desc_len(desc));
    2ee2:	7803      	ldrb	r3, [r0, #0]
    2ee4:	4418      	add	r0, r3
    2ee6:	9000      	str	r0, [sp, #0]
		ifc      = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    2ee8:	463a      	mov	r2, r7
    2eea:	9901      	ldr	r1, [sp, #4]
    2eec:	47a8      	blx	r5
		if (NULL == ifc) {
    2eee:	4603      	mov	r3, r0
    2ef0:	b378      	cbz	r0, 2f52 <usbdc_cb_ctl_req+0x206>
	while (ifc[2] != ifc_id || ifc[3] != alt_set) {
    2ef2:	789a      	ldrb	r2, [r3, #2]
    2ef4:	42a2      	cmp	r2, r4
    2ef6:	d1f3      	bne.n	2ee0 <usbdc_cb_ctl_req+0x194>
    2ef8:	78da      	ldrb	r2, [r3, #3]
    2efa:	42b2      	cmp	r2, r6
    2efc:	d1f0      	bne.n	2ee0 <usbdc_cb_ctl_req+0x194>
	desc.sod = ifc;
    2efe:	9300      	str	r3, [sp, #0]
	func     = (struct usbdf_driver *)usbdc.func_list.head;
    2f00:	4b33      	ldr	r3, [pc, #204]	; (2fd0 <usbdc_cb_ctl_req+0x284>)
    2f02:	691d      	ldr	r5, [r3, #16]
	while (NULL != func) {
    2f04:	b33d      	cbz	r5, 2f56 <usbdc_cb_ctl_req+0x20a>
		if (func->ctrl(func, USBDF_DISABLE, &desc)) {
    2f06:	2701      	movs	r7, #1
    2f08:	686b      	ldr	r3, [r5, #4]
    2f0a:	466a      	mov	r2, sp
    2f0c:	4639      	mov	r1, r7
    2f0e:	4628      	mov	r0, r5
    2f10:	4798      	blx	r3
    2f12:	b120      	cbz	r0, 2f1e <usbdc_cb_ctl_req+0x1d2>
			func = func->next;
    2f14:	682d      	ldr	r5, [r5, #0]
	while (NULL != func) {
    2f16:	2d00      	cmp	r5, #0
    2f18:	d1f6      	bne.n	2f08 <usbdc_cb_ctl_req+0x1bc>
	return false;
    2f1a:	2000      	movs	r0, #0
    2f1c:	e72e      	b.n	2d7c <usbdc_cb_ctl_req+0x30>
		} else if (ERR_NONE == func->ctrl(func, USBDF_ENABLE, &desc)) {
    2f1e:	686b      	ldr	r3, [r5, #4]
    2f20:	466a      	mov	r2, sp
    2f22:	2100      	movs	r1, #0
    2f24:	4628      	mov	r0, r5
    2f26:	4798      	blx	r3
    2f28:	b9b8      	cbnz	r0, 2f5a <usbdc_cb_ctl_req+0x20e>
			if (alt_set) {
    2f2a:	b136      	cbz	r6, 2f3a <usbdc_cb_ctl_req+0x1ee>
				usbdc.ifc_alt_map |= 1 << ifc_id;
    2f2c:	4a28      	ldr	r2, [pc, #160]	; (2fd0 <usbdc_cb_ctl_req+0x284>)
    2f2e:	2301      	movs	r3, #1
    2f30:	fa03 f404 	lsl.w	r4, r3, r4
    2f34:	7f53      	ldrb	r3, [r2, #29]
    2f36:	4323      	orrs	r3, r4
    2f38:	7753      	strb	r3, [r2, #29]
			usbdc_xfer(0, NULL, 0, 0);
    2f3a:	2300      	movs	r3, #0
    2f3c:	461a      	mov	r2, r3
    2f3e:	4619      	mov	r1, r3
    2f40:	4618      	mov	r0, r3
    2f42:	4c22      	ldr	r4, [pc, #136]	; (2fcc <usbdc_cb_ctl_req+0x280>)
    2f44:	47a0      	blx	r4
			return true;
    2f46:	2001      	movs	r0, #1
    2f48:	e718      	b.n	2d7c <usbdc_cb_ctl_req+0x30>
		return false;
    2f4a:	2000      	movs	r0, #0
    2f4c:	e716      	b.n	2d7c <usbdc_cb_ctl_req+0x30>
		return false;
    2f4e:	2000      	movs	r0, #0
    2f50:	e714      	b.n	2d7c <usbdc_cb_ctl_req+0x30>
			return false;
    2f52:	2000      	movs	r0, #0
    2f54:	e712      	b.n	2d7c <usbdc_cb_ctl_req+0x30>
	return false;
    2f56:	2000      	movs	r0, #0
    2f58:	e710      	b.n	2d7c <usbdc_cb_ctl_req+0x30>
			return false;
    2f5a:	2000      	movs	r0, #0
    2f5c:	e70e      	b.n	2d7c <usbdc_cb_ctl_req+0x30>
	switch (req->bRequest) {
    2f5e:	7862      	ldrb	r2, [r4, #1]
    2f60:	2a0a      	cmp	r2, #10
    2f62:	f200 80ec 	bhi.w	313e <usbdc_cb_ctl_req+0x3f2>
    2f66:	e8df f012 	tbh	[pc, r2, lsl #1]
    2f6a:	008e      	.short	0x008e
    2f6c:	00ea00ea 	.word	0x00ea00ea
    2f70:	00ea00ea 	.word	0x00ea00ea
    2f74:	000b00ea 	.word	0x000b00ea
    2f78:	008200ea 	.word	0x008200ea
    2f7c:	00b200ea 	.word	0x00b200ea
	uint8_t type = (uint8_t)(req->wValue >> 8);
    2f80:	8862      	ldrh	r2, [r4, #2]
	switch (type) {
    2f82:	0a13      	lsrs	r3, r2, #8
    2f84:	2b02      	cmp	r3, #2
    2f86:	d02d      	beq.n	2fe4 <usbdc_cb_ctl_req+0x298>
    2f88:	2b03      	cmp	r3, #3
    2f8a:	d050      	beq.n	302e <usbdc_cb_ctl_req+0x2e2>
    2f8c:	2b01      	cmp	r3, #1
    2f8e:	d001      	beq.n	2f94 <usbdc_cb_ctl_req+0x248>
	return false;
    2f90:	2000      	movs	r0, #0
    2f92:	e6f3      	b.n	2d7c <usbdc_cb_ctl_req+0x30>
	uint16_t length   = req->wLength;
    2f94:	88e2      	ldrh	r2, [r4, #6]
    2f96:	2a12      	cmp	r2, #18
    2f98:	bf28      	it	cs
    2f9a:	2212      	movcs	r2, #18
    2f9c:	4614      	mov	r4, r2
		dev_desc = usb_find_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, USB_DT_DEVICE);
    2f9e:	4b0c      	ldr	r3, [pc, #48]	; (2fd0 <usbdc_cb_ctl_req+0x284>)
    2fa0:	681b      	ldr	r3, [r3, #0]
    2fa2:	2201      	movs	r2, #1
    2fa4:	6859      	ldr	r1, [r3, #4]
    2fa6:	6818      	ldr	r0, [r3, #0]
    2fa8:	4b0b      	ldr	r3, [pc, #44]	; (2fd8 <usbdc_cb_ctl_req+0x28c>)
    2faa:	4798      	blx	r3
	if (!dev_desc) {
    2fac:	4601      	mov	r1, r0
    2fae:	2800      	cmp	r0, #0
    2fb0:	f000 80c7 	beq.w	3142 <usbdc_cb_ctl_req+0x3f6>
	if (ERR_NONE != usbdc_xfer(ep, dev_desc, length, false)) {
    2fb4:	2300      	movs	r3, #0
    2fb6:	4622      	mov	r2, r4
    2fb8:	4628      	mov	r0, r5
    2fba:	4c04      	ldr	r4, [pc, #16]	; (2fcc <usbdc_cb_ctl_req+0x280>)
    2fbc:	47a0      	blx	r4
    2fbe:	fab0 f080 	clz	r0, r0
    2fc2:	0940      	lsrs	r0, r0, #5
    2fc4:	e6da      	b.n	2d7c <usbdc_cb_ctl_req+0x30>
    2fc6:	bf00      	nop
    2fc8:	00002be1 	.word	0x00002be1
    2fcc:	00002d2d 	.word	0x00002d2d
    2fd0:	200007bc 	.word	0x200007bc
    2fd4:	000032f1 	.word	0x000032f1
    2fd8:	00003271 	.word	0x00003271
    2fdc:	00002b95 	.word	0x00002b95
    2fe0:	00000e0d 	.word	0x00000e0d
	uint16_t length   = req->wLength;
    2fe4:	88e4      	ldrh	r4, [r4, #6]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    2fe6:	4b5b      	ldr	r3, [pc, #364]	; (3154 <usbdc_cb_ctl_req+0x408>)
    2fe8:	7f1e      	ldrb	r6, [r3, #28]
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index + 1);
    2fea:	681b      	ldr	r3, [r3, #0]
    2fec:	3201      	adds	r2, #1
    2fee:	b2d2      	uxtb	r2, r2
    2ff0:	6859      	ldr	r1, [r3, #4]
    2ff2:	6818      	ldr	r0, [r3, #0]
    2ff4:	4b58      	ldr	r3, [pc, #352]	; (3158 <usbdc_cb_ctl_req+0x40c>)
    2ff6:	4798      	blx	r3
	if (NULL == cfg_desc) {
    2ff8:	4601      	mov	r1, r0
    2ffa:	2800      	cmp	r0, #0
    2ffc:	f000 80a3 	beq.w	3146 <usbdc_cb_ctl_req+0x3fa>
	return (ptr[0] + (ptr[1] << 8));
    3000:	78c3      	ldrb	r3, [r0, #3]
    3002:	7882      	ldrb	r2, [r0, #2]
    3004:	eb02 2203 	add.w	r2, r2, r3, lsl #8
    3008:	b292      	uxth	r2, r2
	if (length <= total_len) {
    300a:	4294      	cmp	r4, r2
    300c:	d90d      	bls.n	302a <usbdc_cb_ctl_req+0x2de>
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    300e:	3e01      	subs	r6, #1
    3010:	4226      	tst	r6, r4
    3012:	bf0c      	ite	eq
    3014:	2301      	moveq	r3, #1
    3016:	2300      	movne	r3, #0
		length = total_len;
    3018:	4614      	mov	r4, r2
	if (ERR_NONE != usbdc_xfer(ep, cfg_desc, length, need_zlp)) {
    301a:	4622      	mov	r2, r4
    301c:	4628      	mov	r0, r5
    301e:	4c4f      	ldr	r4, [pc, #316]	; (315c <usbdc_cb_ctl_req+0x410>)
    3020:	47a0      	blx	r4
    3022:	fab0 f080 	clz	r0, r0
    3026:	0940      	lsrs	r0, r0, #5
    3028:	e6a8      	b.n	2d7c <usbdc_cb_ctl_req+0x30>
		need_zlp = false;
    302a:	2300      	movs	r3, #0
    302c:	e7f5      	b.n	301a <usbdc_cb_ctl_req+0x2ce>
	uint16_t length   = req->wLength;
    302e:	88e4      	ldrh	r4, [r4, #6]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    3030:	4b48      	ldr	r3, [pc, #288]	; (3154 <usbdc_cb_ctl_req+0x408>)
    3032:	7f1e      	ldrb	r6, [r3, #28]
	str_desc = usb_find_str_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index);
    3034:	681b      	ldr	r3, [r3, #0]
    3036:	b2d2      	uxtb	r2, r2
    3038:	6859      	ldr	r1, [r3, #4]
    303a:	6818      	ldr	r0, [r3, #0]
    303c:	4b48      	ldr	r3, [pc, #288]	; (3160 <usbdc_cb_ctl_req+0x414>)
    303e:	4798      	blx	r3
	if (NULL == str_desc) {
    3040:	4601      	mov	r1, r0
    3042:	2800      	cmp	r0, #0
    3044:	f000 8081 	beq.w	314a <usbdc_cb_ctl_req+0x3fe>
	if (length <= str_desc[0]) {
    3048:	7802      	ldrb	r2, [r0, #0]
    304a:	4294      	cmp	r4, r2
    304c:	d90d      	bls.n	306a <usbdc_cb_ctl_req+0x31e>
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    304e:	3e01      	subs	r6, #1
    3050:	4226      	tst	r6, r4
    3052:	bf0c      	ite	eq
    3054:	2301      	moveq	r3, #1
    3056:	2300      	movne	r3, #0
		length = str_desc[0];
    3058:	4614      	mov	r4, r2
	if (ERR_NONE != usbdc_xfer(ep, str_desc, length, need_zlp)) {
    305a:	4622      	mov	r2, r4
    305c:	4628      	mov	r0, r5
    305e:	4c3f      	ldr	r4, [pc, #252]	; (315c <usbdc_cb_ctl_req+0x410>)
    3060:	47a0      	blx	r4
    3062:	fab0 f080 	clz	r0, r0
    3066:	0940      	lsrs	r0, r0, #5
    3068:	e688      	b.n	2d7c <usbdc_cb_ctl_req+0x30>
		need_zlp = false;
    306a:	2300      	movs	r3, #0
    306c:	e7f5      	b.n	305a <usbdc_cb_ctl_req+0x30e>
		*(uint8_t *)usbdc.ctrl_buf = usbdc.cfg_value;
    306e:	4939      	ldr	r1, [pc, #228]	; (3154 <usbdc_cb_ctl_req+0x408>)
    3070:	694b      	ldr	r3, [r1, #20]
    3072:	7eca      	ldrb	r2, [r1, #27]
    3074:	701a      	strb	r2, [r3, #0]
		usbdc_xfer(ep, usbdc.ctrl_buf, 1, false);
    3076:	2300      	movs	r3, #0
    3078:	2201      	movs	r2, #1
    307a:	6949      	ldr	r1, [r1, #20]
    307c:	4628      	mov	r0, r5
    307e:	4c37      	ldr	r4, [pc, #220]	; (315c <usbdc_cb_ctl_req+0x410>)
    3080:	47a0      	blx	r4
		return true;
    3082:	2001      	movs	r0, #1
    3084:	e67a      	b.n	2d7c <usbdc_cb_ctl_req+0x30>
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    3086:	f003 031f 	and.w	r3, r3, #31
    308a:	2b01      	cmp	r3, #1
    308c:	d903      	bls.n	3096 <usbdc_cb_ctl_req+0x34a>
    308e:	2b02      	cmp	r3, #2
    3090:	d010      	beq.n	30b4 <usbdc_cb_ctl_req+0x368>
		return false;
    3092:	2000      	movs	r0, #0
    3094:	e672      	b.n	2d7c <usbdc_cb_ctl_req+0x30>
		st = 0;
    3096:	2300      	movs	r3, #0
    3098:	9300      	str	r3, [sp, #0]
	memcpy(usbdc.ctrl_buf, &st, 2);
    309a:	492e      	ldr	r1, [pc, #184]	; (3154 <usbdc_cb_ctl_req+0x408>)
    309c:	694b      	ldr	r3, [r1, #20]
    309e:	f8bd 2000 	ldrh.w	r2, [sp]
    30a2:	801a      	strh	r2, [r3, #0]
	usbdc_xfer(ep, usbdc.ctrl_buf, 2, false);
    30a4:	2300      	movs	r3, #0
    30a6:	2202      	movs	r2, #2
    30a8:	6949      	ldr	r1, [r1, #20]
    30aa:	4628      	mov	r0, r5
    30ac:	4c2b      	ldr	r4, [pc, #172]	; (315c <usbdc_cb_ctl_req+0x410>)
    30ae:	47a0      	blx	r4
	return true;
    30b0:	2001      	movs	r0, #1
    30b2:	e663      	b.n	2d7c <usbdc_cb_ctl_req+0x30>
		st = usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_GET);
    30b4:	88a0      	ldrh	r0, [r4, #4]
    30b6:	2102      	movs	r1, #2
    30b8:	b2c0      	uxtb	r0, r0
    30ba:	4b2a      	ldr	r3, [pc, #168]	; (3164 <usbdc_cb_ctl_req+0x418>)
    30bc:	4798      	blx	r3
		if (st < 0) {
    30be:	2800      	cmp	r0, #0
    30c0:	db03      	blt.n	30ca <usbdc_cb_ctl_req+0x37e>
		st = st & 0x1;
    30c2:	f000 0001 	and.w	r0, r0, #1
    30c6:	9000      	str	r0, [sp, #0]
    30c8:	e7e7      	b.n	309a <usbdc_cb_ctl_req+0x34e>
			return false;
    30ca:	2000      	movs	r0, #0
    30cc:	e656      	b.n	2d7c <usbdc_cb_ctl_req+0x30>
	if (!(usbdc.ifc_alt_map & (1 << req->wIndex))) {
    30ce:	4b21      	ldr	r3, [pc, #132]	; (3154 <usbdc_cb_ctl_req+0x408>)
    30d0:	7f5b      	ldrb	r3, [r3, #29]
    30d2:	88a2      	ldrh	r2, [r4, #4]
    30d4:	4113      	asrs	r3, r2
    30d6:	f013 0f01 	tst.w	r3, #1
    30da:	d012      	beq.n	3102 <usbdc_cb_ctl_req+0x3b6>
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    30dc:	4b1d      	ldr	r3, [pc, #116]	; (3154 <usbdc_cb_ctl_req+0x408>)
    30de:	691d      	ldr	r5, [r3, #16]
	return false;
    30e0:	2000      	movs	r0, #0
	while (NULL != func) {
    30e2:	2d00      	cmp	r5, #0
    30e4:	f43f ae4a 	beq.w	2d7c <usbdc_cb_ctl_req+0x30>
		if (0 > (rc = func->ctrl(func, USBDF_GET_IFACE, req))) {
    30e8:	2602      	movs	r6, #2
    30ea:	686b      	ldr	r3, [r5, #4]
    30ec:	4622      	mov	r2, r4
    30ee:	4631      	mov	r1, r6
    30f0:	4628      	mov	r0, r5
    30f2:	4798      	blx	r3
    30f4:	2800      	cmp	r0, #0
    30f6:	da0f      	bge.n	3118 <usbdc_cb_ctl_req+0x3cc>
			func = func->next;
    30f8:	682d      	ldr	r5, [r5, #0]
	while (NULL != func) {
    30fa:	2d00      	cmp	r5, #0
    30fc:	d1f5      	bne.n	30ea <usbdc_cb_ctl_req+0x39e>
	return false;
    30fe:	2000      	movs	r0, #0
    3100:	e63c      	b.n	2d7c <usbdc_cb_ctl_req+0x30>
		usbdc.ctrl_buf[0] = 0;
    3102:	4914      	ldr	r1, [pc, #80]	; (3154 <usbdc_cb_ctl_req+0x408>)
    3104:	694b      	ldr	r3, [r1, #20]
    3106:	2000      	movs	r0, #0
    3108:	7018      	strb	r0, [r3, #0]
		usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    310a:	4603      	mov	r3, r0
    310c:	2201      	movs	r2, #1
    310e:	6949      	ldr	r1, [r1, #20]
    3110:	4c12      	ldr	r4, [pc, #72]	; (315c <usbdc_cb_ctl_req+0x410>)
    3112:	47a0      	blx	r4
		return true;
    3114:	2001      	movs	r0, #1
    3116:	e631      	b.n	2d7c <usbdc_cb_ctl_req+0x30>
			usbdc.ctrl_buf[0] = (uint8_t)rc;
    3118:	490e      	ldr	r1, [pc, #56]	; (3154 <usbdc_cb_ctl_req+0x408>)
    311a:	694b      	ldr	r3, [r1, #20]
    311c:	7018      	strb	r0, [r3, #0]
			usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    311e:	2300      	movs	r3, #0
    3120:	2201      	movs	r2, #1
    3122:	6949      	ldr	r1, [r1, #20]
    3124:	4618      	mov	r0, r3
    3126:	4c0d      	ldr	r4, [pc, #52]	; (315c <usbdc_cb_ctl_req+0x410>)
    3128:	47a0      	blx	r4
			return true;
    312a:	2001      	movs	r0, #1
    312c:	e626      	b.n	2d7c <usbdc_cb_ctl_req+0x30>
		return true;
    312e:	2001      	movs	r0, #1
    3130:	e624      	b.n	2d7c <usbdc_cb_ctl_req+0x30>
		return false;
    3132:	2000      	movs	r0, #0
    3134:	e622      	b.n	2d7c <usbdc_cb_ctl_req+0x30>
		return false;
    3136:	2000      	movs	r0, #0
    3138:	e620      	b.n	2d7c <usbdc_cb_ctl_req+0x30>
		return false;
    313a:	2000      	movs	r0, #0
    313c:	e61e      	b.n	2d7c <usbdc_cb_ctl_req+0x30>
		return false;
    313e:	2000      	movs	r0, #0
    3140:	e61c      	b.n	2d7c <usbdc_cb_ctl_req+0x30>
		return false;
    3142:	2000      	movs	r0, #0
    3144:	e61a      	b.n	2d7c <usbdc_cb_ctl_req+0x30>
		return false;
    3146:	2000      	movs	r0, #0
    3148:	e618      	b.n	2d7c <usbdc_cb_ctl_req+0x30>
		return false;
    314a:	2000      	movs	r0, #0
    314c:	e616      	b.n	2d7c <usbdc_cb_ctl_req+0x30>
			return false;
    314e:	2000      	movs	r0, #0
    3150:	e614      	b.n	2d7c <usbdc_cb_ctl_req+0x30>
    3152:	bf00      	nop
    3154:	200007bc 	.word	0x200007bc
    3158:	000032f1 	.word	0x000032f1
    315c:	00002d2d 	.word	0x00002d2d
    3160:	00003359 	.word	0x00003359
    3164:	00000e0d 	.word	0x00000e0d

00003168 <usbdc_register_handler>:

/**
 * \brief Register the handler
 */
void usbdc_register_handler(enum usbdc_handler_type type, const struct usbdc_handler *h)
{
    3168:	b508      	push	{r3, lr}
	switch (type) {
    316a:	2801      	cmp	r0, #1
    316c:	d007      	beq.n	317e <usbdc_register_handler+0x16>
    316e:	b110      	cbz	r0, 3176 <usbdc_register_handler+0xe>
    3170:	2802      	cmp	r0, #2
    3172:	d008      	beq.n	3186 <usbdc_register_handler+0x1e>
    3174:	bd08      	pop	{r3, pc}
	case USBDC_HDL_SOF:
		list_insert_at_end(&usbdc.handlers.sof_list, (void *)h);
    3176:	4806      	ldr	r0, [pc, #24]	; (3190 <usbdc_register_handler+0x28>)
    3178:	4b06      	ldr	r3, [pc, #24]	; (3194 <usbdc_register_handler+0x2c>)
    317a:	4798      	blx	r3
		break;
    317c:	bd08      	pop	{r3, pc}
	case USBDC_HDL_REQ:
		list_insert_at_end(&usbdc.handlers.req_list, (void *)h);
    317e:	4806      	ldr	r0, [pc, #24]	; (3198 <usbdc_register_handler+0x30>)
    3180:	4b04      	ldr	r3, [pc, #16]	; (3194 <usbdc_register_handler+0x2c>)
    3182:	4798      	blx	r3
		break;
    3184:	bd08      	pop	{r3, pc}
	case USBDC_HDL_CHANGE:
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
    3186:	4805      	ldr	r0, [pc, #20]	; (319c <usbdc_register_handler+0x34>)
    3188:	4b02      	ldr	r3, [pc, #8]	; (3194 <usbdc_register_handler+0x2c>)
    318a:	4798      	blx	r3
    318c:	bd08      	pop	{r3, pc}
    318e:	bf00      	nop
    3190:	200007c0 	.word	0x200007c0
    3194:	00003419 	.word	0x00003419
    3198:	200007c4 	.word	0x200007c4
    319c:	200007c8 	.word	0x200007c8

000031a0 <usbdc_init>:

/**
 * \brief Initialize the USB device core driver
 */
int32_t usbdc_init(uint8_t *ctrl_buf)
{
    31a0:	b538      	push	{r3, r4, r5, lr}
	ASSERT(ctrl_buf);
    31a2:	4605      	mov	r5, r0
    31a4:	f240 3255 	movw	r2, #853	; 0x355
    31a8:	490c      	ldr	r1, [pc, #48]	; (31dc <usbdc_init+0x3c>)
    31aa:	3000      	adds	r0, #0
    31ac:	bf18      	it	ne
    31ae:	2001      	movne	r0, #1
    31b0:	4b0b      	ldr	r3, [pc, #44]	; (31e0 <usbdc_init+0x40>)
    31b2:	4798      	blx	r3

	int32_t rc;

	rc = usb_d_init();
    31b4:	4b0b      	ldr	r3, [pc, #44]	; (31e4 <usbdc_init+0x44>)
    31b6:	4798      	blx	r3
	if (rc < 0) {
    31b8:	2800      	cmp	r0, #0
    31ba:	db0e      	blt.n	31da <usbdc_init+0x3a>
		return rc;
	}

	memset(&usbdc, 0, sizeof(usbdc));
    31bc:	4c0a      	ldr	r4, [pc, #40]	; (31e8 <usbdc_init+0x48>)
    31be:	2220      	movs	r2, #32
    31c0:	2100      	movs	r1, #0
    31c2:	4620      	mov	r0, r4
    31c4:	4b09      	ldr	r3, [pc, #36]	; (31ec <usbdc_init+0x4c>)
    31c6:	4798      	blx	r3
	usbdc.ctrl_buf = ctrl_buf;
    31c8:	6165      	str	r5, [r4, #20]
	usb_d_register_callback(USB_D_CB_SOF, (FUNC_PTR)usbd_sof_cb);
    31ca:	4909      	ldr	r1, [pc, #36]	; (31f0 <usbdc_init+0x50>)
    31cc:	2000      	movs	r0, #0
    31ce:	4c09      	ldr	r4, [pc, #36]	; (31f4 <usbdc_init+0x54>)
    31d0:	47a0      	blx	r4
	usb_d_register_callback(USB_D_CB_EVENT, (FUNC_PTR)usbd_event_cb);
    31d2:	4909      	ldr	r1, [pc, #36]	; (31f8 <usbdc_init+0x58>)
    31d4:	2001      	movs	r0, #1
    31d6:	47a0      	blx	r4

	return 0;
    31d8:	2000      	movs	r0, #0
}
    31da:	bd38      	pop	{r3, r4, r5, pc}
    31dc:	0000387c 	.word	0x0000387c
    31e0:	00000ec1 	.word	0x00000ec1
    31e4:	00000b75 	.word	0x00000b75
    31e8:	200007bc 	.word	0x200007bc
    31ec:	000035dd 	.word	0x000035dd
    31f0:	00002c21 	.word	0x00002c21
    31f4:	00000bdd 	.word	0x00000bdd
    31f8:	00002d0d 	.word	0x00002d0d

000031fc <usbdc_register_function>:
 * \brief Register/unregister function support of a USB device function
 *
 * Must be invoked when USB device is stopped.
 */
void usbdc_register_function(struct usbdf_driver *func)
{
    31fc:	b508      	push	{r3, lr}
	list_insert_at_end(&usbdc.func_list, func);
    31fe:	4601      	mov	r1, r0
    3200:	4801      	ldr	r0, [pc, #4]	; (3208 <usbdc_register_function+0xc>)
    3202:	4b02      	ldr	r3, [pc, #8]	; (320c <usbdc_register_function+0x10>)
    3204:	4798      	blx	r3
    3206:	bd08      	pop	{r3, pc}
    3208:	200007cc 	.word	0x200007cc
    320c:	00003419 	.word	0x00003419

00003210 <usbdc_start>:

/**
 * \brief Start the USB device driver with specific descriptors set
 */
int32_t usbdc_start(struct usbd_descriptors *desces)
{
    3210:	b508      	push	{r3, lr}
	if (usbdc.state >= USBD_S_POWER) {
    3212:	4b0a      	ldr	r3, [pc, #40]	; (323c <usbdc_start+0x2c>)
    3214:	7e9b      	ldrb	r3, [r3, #26]
    3216:	b95b      	cbnz	r3, 3230 <usbdc_start+0x20>
		return ERR_BUSY;
	}

	if (desces) {
    3218:	b168      	cbz	r0, 3236 <usbdc_start+0x26>
		usbdc.desces.ls_fs = desces;
    321a:	4b08      	ldr	r3, [pc, #32]	; (323c <usbdc_start+0x2c>)
    321c:	6018      	str	r0, [r3, #0]
#endif
	} else {
		return ERR_BAD_DATA;
	}

	usbdc.ctrl_size = desces->sod[7];
    321e:	6802      	ldr	r2, [r0, #0]
    3220:	79d2      	ldrb	r2, [r2, #7]
    3222:	771a      	strb	r2, [r3, #28]
	usbdc.state     = USBD_S_POWER;
    3224:	2201      	movs	r2, #1
    3226:	769a      	strb	r2, [r3, #26]
	usb_d_enable();
    3228:	4b05      	ldr	r3, [pc, #20]	; (3240 <usbdc_start+0x30>)
    322a:	4798      	blx	r3
	return ERR_NONE;
    322c:	2000      	movs	r0, #0
    322e:	bd08      	pop	{r3, pc}
		return ERR_BUSY;
    3230:	f06f 0003 	mvn.w	r0, #3
    3234:	bd08      	pop	{r3, pc}
		return ERR_BAD_DATA;
    3236:	f06f 0008 	mvn.w	r0, #8
}
    323a:	bd08      	pop	{r3, pc}
    323c:	200007bc 	.word	0x200007bc
    3240:	00000be9 	.word	0x00000be9

00003244 <usbdc_attach>:

/**
 * \brief Attach the USB device to host
 */
void usbdc_attach(void)
{
    3244:	b508      	push	{r3, lr}
	usb_d_attach();
    3246:	4b01      	ldr	r3, [pc, #4]	; (324c <usbdc_attach+0x8>)
    3248:	4798      	blx	r3
    324a:	bd08      	pop	{r3, pc}
    324c:	00000bf5 	.word	0x00000bf5

00003250 <usbdc_get_ctrl_buffer>:
 * \brief Return USB Device endpoint0 buffer
 */
uint8_t *usbdc_get_ctrl_buffer(void)
{
	return usbdc.ctrl_buf;
}
    3250:	4b01      	ldr	r3, [pc, #4]	; (3258 <usbdc_get_ctrl_buffer+0x8>)
    3252:	6958      	ldr	r0, [r3, #20]
    3254:	4770      	bx	lr
    3256:	bf00      	nop
    3258:	200007bc 	.word	0x200007bc

0000325c <usbdc_get_state>:
/**
 * \brief Return current USB state
 */
uint8_t usbdc_get_state(void)
{
	if (usbdc.state & USBD_S_SUSPEND) {
    325c:	4b03      	ldr	r3, [pc, #12]	; (326c <usbdc_get_state+0x10>)
    325e:	7e98      	ldrb	r0, [r3, #26]
    3260:	f000 0310 	and.w	r3, r0, #16
		return USBD_S_SUSPEND;
    3264:	2b00      	cmp	r3, #0
	}
	return usbdc.state;
}
    3266:	bf18      	it	ne
    3268:	2010      	movne	r0, #16
    326a:	4770      	bx	lr
    326c:	200007bc 	.word	0x200007bc

00003270 <usb_find_desc>:

uint8_t *usb_find_desc(uint8_t *desc, uint8_t *eof, uint8_t type)
{
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    3270:	4288      	cmp	r0, r1
    3272:	d214      	bcs.n	329e <usb_find_desc+0x2e>
	return desc[0];
    3274:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    3276:	2b01      	cmp	r3, #1
    3278:	d913      	bls.n	32a2 <usb_find_desc+0x32>
{
    327a:	b410      	push	{r4}
		if (type == usb_desc_type(desc)) {
    327c:	7844      	ldrb	r4, [r0, #1]
    327e:	4294      	cmp	r4, r2
    3280:	d00a      	beq.n	3298 <usb_find_desc+0x28>
	return (desc + usb_desc_len(desc));
    3282:	4418      	add	r0, r3
	while (desc < eof) {
    3284:	4281      	cmp	r1, r0
    3286:	d906      	bls.n	3296 <usb_find_desc+0x26>
	return desc[0];
    3288:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    328a:	2b01      	cmp	r3, #1
    328c:	d90b      	bls.n	32a6 <usb_find_desc+0x36>
	return desc[1];
    328e:	7844      	ldrb	r4, [r0, #1]
		if (type == usb_desc_type(desc)) {
    3290:	4294      	cmp	r4, r2
    3292:	d1f6      	bne.n	3282 <usb_find_desc+0x12>
    3294:	e000      	b.n	3298 <usb_find_desc+0x28>
			return desc;
		}
		desc = usb_desc_next(desc);
	}
	return NULL;
    3296:	2000      	movs	r0, #0
}
    3298:	f85d 4b04 	ldr.w	r4, [sp], #4
    329c:	4770      	bx	lr
	return NULL;
    329e:	2000      	movs	r0, #0
    32a0:	4770      	bx	lr
		_desc_len_check();
    32a2:	2000      	movs	r0, #0
    32a4:	4770      	bx	lr
    32a6:	2000      	movs	r0, #0
    32a8:	e7f6      	b.n	3298 <usb_find_desc+0x28>

000032aa <usb_find_ep_desc>:

uint8_t *usb_find_ep_desc(uint8_t *desc, uint8_t *eof)
{
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    32aa:	4288      	cmp	r0, r1
    32ac:	d216      	bcs.n	32dc <usb_find_ep_desc+0x32>
	return desc[0];
    32ae:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    32b0:	2b01      	cmp	r3, #1
    32b2:	d915      	bls.n	32e0 <usb_find_ep_desc+0x36>
	return desc[1];
    32b4:	7842      	ldrb	r2, [r0, #1]
		if (USB_DT_INTERFACE == usb_desc_type(desc)) {
    32b6:	2a04      	cmp	r2, #4
    32b8:	d014      	beq.n	32e4 <usb_find_ep_desc+0x3a>
			break;
		}
		if (USB_DT_ENDPOINT == usb_desc_type(desc)) {
    32ba:	2a05      	cmp	r2, #5
    32bc:	d00b      	beq.n	32d6 <usb_find_ep_desc+0x2c>
	return (desc + usb_desc_len(desc));
    32be:	4418      	add	r0, r3
	while (desc < eof) {
    32c0:	4281      	cmp	r1, r0
    32c2:	d909      	bls.n	32d8 <usb_find_ep_desc+0x2e>
	return desc[0];
    32c4:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    32c6:	2b01      	cmp	r3, #1
    32c8:	d90e      	bls.n	32e8 <usb_find_ep_desc+0x3e>
	return desc[1];
    32ca:	7842      	ldrb	r2, [r0, #1]
		if (USB_DT_INTERFACE == usb_desc_type(desc)) {
    32cc:	2a04      	cmp	r2, #4
    32ce:	d00d      	beq.n	32ec <usb_find_ep_desc+0x42>
		if (USB_DT_ENDPOINT == usb_desc_type(desc)) {
    32d0:	2a05      	cmp	r2, #5
    32d2:	d1f4      	bne.n	32be <usb_find_ep_desc+0x14>
    32d4:	e00b      	b.n	32ee <usb_find_ep_desc+0x44>
    32d6:	4770      	bx	lr
			return desc;
		}
		desc = usb_desc_next(desc);
	}
	return NULL;
    32d8:	2000      	movs	r0, #0
    32da:	4770      	bx	lr
    32dc:	2000      	movs	r0, #0
    32de:	4770      	bx	lr
		_desc_len_check();
    32e0:	2000      	movs	r0, #0
    32e2:	4770      	bx	lr
	return NULL;
    32e4:	2000      	movs	r0, #0
    32e6:	4770      	bx	lr
		_desc_len_check();
    32e8:	2000      	movs	r0, #0
    32ea:	4770      	bx	lr
	return NULL;
    32ec:	2000      	movs	r0, #0
}
    32ee:	4770      	bx	lr

000032f0 <usb_find_cfg_desc>:

uint8_t *usb_find_cfg_desc(uint8_t *desc, uint8_t *eof, uint8_t cfg_value)
{
    32f0:	b538      	push	{r3, r4, r5, lr}
    32f2:	460c      	mov	r4, r1
    32f4:	4615      	mov	r5, r2
	_param_error_check(desc && eof && (desc < eof));

	desc = usb_find_desc(desc, eof, USB_DT_CONFIG);
    32f6:	2202      	movs	r2, #2
    32f8:	4b16      	ldr	r3, [pc, #88]	; (3354 <usb_find_cfg_desc+0x64>)
    32fa:	4798      	blx	r3
	if (!desc) {
    32fc:	4603      	mov	r3, r0
    32fe:	b1e8      	cbz	r0, 333c <usb_find_cfg_desc+0x4c>
		return NULL;
	}
	while (desc < eof) {
    3300:	4284      	cmp	r4, r0
    3302:	d91d      	bls.n	3340 <usb_find_cfg_desc+0x50>
		_desc_len_check();
    3304:	7802      	ldrb	r2, [r0, #0]
    3306:	2a01      	cmp	r2, #1
    3308:	d91c      	bls.n	3344 <usb_find_cfg_desc+0x54>
		if (desc[1] != USB_DT_CONFIG) {
    330a:	7842      	ldrb	r2, [r0, #1]
    330c:	2a02      	cmp	r2, #2
    330e:	d11b      	bne.n	3348 <usb_find_cfg_desc+0x58>
			break;
		}
		if (desc[5] == cfg_value) {
    3310:	7942      	ldrb	r2, [r0, #5]
    3312:	42aa      	cmp	r2, r5
    3314:	d012      	beq.n	333c <usb_find_cfg_desc+0x4c>
	return (ptr[0] + (ptr[1] << 8));
    3316:	78d9      	ldrb	r1, [r3, #3]
    3318:	789a      	ldrb	r2, [r3, #2]
    331a:	eb02 2201 	add.w	r2, r2, r1, lsl #8
 *  \param[in] cfg_desc Byte pointer to the descriptor start address
 *  \return Byte pointer to descriptor after configuration end
 */
static inline uint8_t *usb_cfg_desc_next(uint8_t *cfg_desc)
{
	return (cfg_desc + usb_cfg_desc_total_len(cfg_desc));
    331e:	fa13 f382 	uxtah	r3, r3, r2
	while (desc < eof) {
    3322:	429c      	cmp	r4, r3
    3324:	d909      	bls.n	333a <usb_find_cfg_desc+0x4a>
		_desc_len_check();
    3326:	781a      	ldrb	r2, [r3, #0]
    3328:	2a01      	cmp	r2, #1
    332a:	d90f      	bls.n	334c <usb_find_cfg_desc+0x5c>
		if (desc[1] != USB_DT_CONFIG) {
    332c:	785a      	ldrb	r2, [r3, #1]
    332e:	2a02      	cmp	r2, #2
    3330:	d10e      	bne.n	3350 <usb_find_cfg_desc+0x60>
		if (desc[5] == cfg_value) {
    3332:	795a      	ldrb	r2, [r3, #5]
    3334:	42aa      	cmp	r2, r5
    3336:	d1ee      	bne.n	3316 <usb_find_cfg_desc+0x26>
    3338:	e000      	b.n	333c <usb_find_cfg_desc+0x4c>
			return desc;
		}
		desc = usb_cfg_desc_next(desc);
	}
	return NULL;
    333a:	2300      	movs	r3, #0
}
    333c:	4618      	mov	r0, r3
    333e:	bd38      	pop	{r3, r4, r5, pc}
	return NULL;
    3340:	2300      	movs	r3, #0
    3342:	e7fb      	b.n	333c <usb_find_cfg_desc+0x4c>
		_desc_len_check();
    3344:	2300      	movs	r3, #0
    3346:	e7f9      	b.n	333c <usb_find_cfg_desc+0x4c>
	return NULL;
    3348:	2300      	movs	r3, #0
    334a:	e7f7      	b.n	333c <usb_find_cfg_desc+0x4c>
		_desc_len_check();
    334c:	2300      	movs	r3, #0
    334e:	e7f5      	b.n	333c <usb_find_cfg_desc+0x4c>
	return NULL;
    3350:	2300      	movs	r3, #0
    3352:	e7f3      	b.n	333c <usb_find_cfg_desc+0x4c>
    3354:	00003271 	.word	0x00003271

00003358 <usb_find_str_desc>:
{
	uint8_t i;

	_param_error_check(desc && eof && (desc < eof));

	for (i = 0; desc < eof;) {
    3358:	4288      	cmp	r0, r1
    335a:	d217      	bcs.n	338c <usb_find_str_desc+0x34>
{
    335c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3360:	460d      	mov	r5, r1
    3362:	4616      	mov	r6, r2
	for (i = 0; desc < eof;) {
    3364:	2400      	movs	r4, #0
		desc = usb_find_desc(desc, eof, USB_DT_STRING);
    3366:	f04f 0803 	mov.w	r8, #3
    336a:	4f0c      	ldr	r7, [pc, #48]	; (339c <usb_find_str_desc+0x44>)
    336c:	4642      	mov	r2, r8
    336e:	4629      	mov	r1, r5
    3370:	47b8      	blx	r7
		if (desc) {
    3372:	4603      	mov	r3, r0
    3374:	b170      	cbz	r0, 3394 <usb_find_str_desc+0x3c>
	return desc[0];
    3376:	7800      	ldrb	r0, [r0, #0]
			_desc_len_check();
    3378:	2801      	cmp	r0, #1
    337a:	d90a      	bls.n	3392 <usb_find_str_desc+0x3a>
			if (i == str_index) {
    337c:	42a6      	cmp	r6, r4
    337e:	d009      	beq.n	3394 <usb_find_str_desc+0x3c>
	return (desc + usb_desc_len(desc));
    3380:	4418      	add	r0, r3
    3382:	3401      	adds	r4, #1
	for (i = 0; desc < eof;) {
    3384:	4285      	cmp	r5, r0
    3386:	d8f1      	bhi.n	336c <usb_find_str_desc+0x14>
			desc = usb_desc_next(desc);
		} else {
			return NULL;
		}
	}
	return NULL;
    3388:	2300      	movs	r3, #0
    338a:	e003      	b.n	3394 <usb_find_str_desc+0x3c>
    338c:	2300      	movs	r3, #0
}
    338e:	4618      	mov	r0, r3
    3390:	4770      	bx	lr
			_desc_len_check();
    3392:	2300      	movs	r3, #0
}
    3394:	4618      	mov	r0, r3
    3396:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    339a:	bf00      	nop
    339c:	00003271 	.word	0x00003271

000033a0 <cdc_device_acm_init>:

/**
 * \brief CDC ACM Init
 */
void cdc_device_acm_init(void)
{
    33a0:	b508      	push	{r3, lr}
	/* usb stack init */
	usbdc_init(ctrl_buffer);
    33a2:	4805      	ldr	r0, [pc, #20]	; (33b8 <cdc_device_acm_init+0x18>)
    33a4:	4b05      	ldr	r3, [pc, #20]	; (33bc <cdc_device_acm_init+0x1c>)
    33a6:	4798      	blx	r3

	/* usbdc_register_funcion inside */
	cdcdf_acm_init();
    33a8:	4b05      	ldr	r3, [pc, #20]	; (33c0 <cdc_device_acm_init+0x20>)
    33aa:	4798      	blx	r3

	usbdc_start(single_desc);
    33ac:	4805      	ldr	r0, [pc, #20]	; (33c4 <cdc_device_acm_init+0x24>)
    33ae:	4b06      	ldr	r3, [pc, #24]	; (33c8 <cdc_device_acm_init+0x28>)
    33b0:	4798      	blx	r3
	usbdc_attach();
    33b2:	4b06      	ldr	r3, [pc, #24]	; (33cc <cdc_device_acm_init+0x2c>)
    33b4:	4798      	blx	r3
    33b6:	bd08      	pop	{r3, pc}
    33b8:	2000081c 	.word	0x2000081c
    33bc:	000031a1 	.word	0x000031a1
    33c0:	00002b1d 	.word	0x00002b1d
    33c4:	2000007c 	.word	0x2000007c
    33c8:	00003211 	.word	0x00003211
    33cc:	00003245 	.word	0x00003245

000033d0 <usb_init>:
	while (1) {
	}
}

void usb_init(void)
{
    33d0:	b508      	push	{r3, lr}

	cdc_device_acm_init();
    33d2:	4b01      	ldr	r3, [pc, #4]	; (33d8 <usb_init+0x8>)
    33d4:	4798      	blx	r3
    33d6:	bd08      	pop	{r3, pc}
    33d8:	000033a1 	.word	0x000033a1

000033dc <atomic_enter_critical>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    33dc:	f3ef 8310 	mrs	r3, PRIMASK
/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
	*atomic = __get_PRIMASK();
    33e0:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
    33e2:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    33e4:	f3bf 8f5f 	dmb	sy
    33e8:	4770      	bx	lr

000033ea <atomic_leave_critical>:
    33ea:	f3bf 8f5f 	dmb	sy
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
	__DMB();
	__set_PRIMASK(*atomic);
    33ee:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    33f0:	f383 8810 	msr	PRIMASK, r3
    33f4:	4770      	bx	lr

000033f6 <is_list_element>:
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
    33f6:	6803      	ldr	r3, [r0, #0]
    33f8:	b14b      	cbz	r3, 340e <is_list_element+0x18>
		if (it == element) {
    33fa:	428b      	cmp	r3, r1
    33fc:	d009      	beq.n	3412 <is_list_element+0x1c>
	for (it = list->head; it; it = it->next) {
    33fe:	681b      	ldr	r3, [r3, #0]
    3400:	b11b      	cbz	r3, 340a <is_list_element+0x14>
		if (it == element) {
    3402:	4299      	cmp	r1, r3
    3404:	d1fb      	bne.n	33fe <is_list_element+0x8>
			return true;
    3406:	2001      	movs	r0, #1
		}
	}

	return false;
}
    3408:	4770      	bx	lr
	return false;
    340a:	2000      	movs	r0, #0
    340c:	4770      	bx	lr
    340e:	2000      	movs	r0, #0
    3410:	4770      	bx	lr
			return true;
    3412:	2001      	movs	r0, #1
    3414:	4770      	bx	lr
	...

00003418 <list_insert_at_end>:

/**
 * \brief Insert an element at list end
 */
void list_insert_at_end(struct list_descriptor *const list, void *const element)
{
    3418:	b570      	push	{r4, r5, r6, lr}
    341a:	4605      	mov	r5, r0
    341c:	460e      	mov	r6, r1
	struct list_element *it = list->head;
    341e:	6804      	ldr	r4, [r0, #0]

	ASSERT(!is_list_element(list, element));
    3420:	4b0a      	ldr	r3, [pc, #40]	; (344c <list_insert_at_end+0x34>)
    3422:	4798      	blx	r3
    3424:	f080 0001 	eor.w	r0, r0, #1
    3428:	224f      	movs	r2, #79	; 0x4f
    342a:	4909      	ldr	r1, [pc, #36]	; (3450 <list_insert_at_end+0x38>)
    342c:	b2c0      	uxtb	r0, r0
    342e:	4b09      	ldr	r3, [pc, #36]	; (3454 <list_insert_at_end+0x3c>)
    3430:	4798      	blx	r3

	if (!list->head) {
    3432:	682b      	ldr	r3, [r5, #0]
    3434:	b91b      	cbnz	r3, 343e <list_insert_at_end+0x26>
		list->head                             = (struct list_element *)element;
    3436:	602e      	str	r6, [r5, #0]
		((struct list_element *)element)->next = NULL;
    3438:	6033      	str	r3, [r6, #0]
		return;
    343a:	bd70      	pop	{r4, r5, r6, pc}
	}

	while (it->next) {
		it = it->next;
    343c:	461c      	mov	r4, r3
	while (it->next) {
    343e:	6823      	ldr	r3, [r4, #0]
    3440:	2b00      	cmp	r3, #0
    3442:	d1fb      	bne.n	343c <list_insert_at_end+0x24>
	}
	it->next                               = (struct list_element *)element;
    3444:	6026      	str	r6, [r4, #0]
	((struct list_element *)element)->next = NULL;
    3446:	6033      	str	r3, [r6, #0]
    3448:	bd70      	pop	{r4, r5, r6, pc}
    344a:	bf00      	nop
    344c:	000033f7 	.word	0x000033f7
    3450:	00003894 	.word	0x00003894
    3454:	00000ec1 	.word	0x00000ec1

00003458 <__libc_init_array>:
    3458:	b570      	push	{r4, r5, r6, lr}
    345a:	4e0f      	ldr	r6, [pc, #60]	; (3498 <__libc_init_array+0x40>)
    345c:	4d0f      	ldr	r5, [pc, #60]	; (349c <__libc_init_array+0x44>)
    345e:	1b76      	subs	r6, r6, r5
    3460:	10b6      	asrs	r6, r6, #2
    3462:	bf18      	it	ne
    3464:	2400      	movne	r4, #0
    3466:	d005      	beq.n	3474 <__libc_init_array+0x1c>
    3468:	3401      	adds	r4, #1
    346a:	f855 3b04 	ldr.w	r3, [r5], #4
    346e:	4798      	blx	r3
    3470:	42a6      	cmp	r6, r4
    3472:	d1f9      	bne.n	3468 <__libc_init_array+0x10>
    3474:	4e0a      	ldr	r6, [pc, #40]	; (34a0 <__libc_init_array+0x48>)
    3476:	4d0b      	ldr	r5, [pc, #44]	; (34a4 <__libc_init_array+0x4c>)
    3478:	1b76      	subs	r6, r6, r5
    347a:	f000 fa1d 	bl	38b8 <_init>
    347e:	10b6      	asrs	r6, r6, #2
    3480:	bf18      	it	ne
    3482:	2400      	movne	r4, #0
    3484:	d006      	beq.n	3494 <__libc_init_array+0x3c>
    3486:	3401      	adds	r4, #1
    3488:	f855 3b04 	ldr.w	r3, [r5], #4
    348c:	4798      	blx	r3
    348e:	42a6      	cmp	r6, r4
    3490:	d1f9      	bne.n	3486 <__libc_init_array+0x2e>
    3492:	bd70      	pop	{r4, r5, r6, pc}
    3494:	bd70      	pop	{r4, r5, r6, pc}
    3496:	bf00      	nop
    3498:	000038c4 	.word	0x000038c4
    349c:	000038c4 	.word	0x000038c4
    34a0:	000038cc 	.word	0x000038cc
    34a4:	000038c4 	.word	0x000038c4

000034a8 <memcpy>:
    34a8:	4684      	mov	ip, r0
    34aa:	ea41 0300 	orr.w	r3, r1, r0
    34ae:	f013 0303 	ands.w	r3, r3, #3
    34b2:	d16d      	bne.n	3590 <memcpy+0xe8>
    34b4:	3a40      	subs	r2, #64	; 0x40
    34b6:	d341      	bcc.n	353c <memcpy+0x94>
    34b8:	f851 3b04 	ldr.w	r3, [r1], #4
    34bc:	f840 3b04 	str.w	r3, [r0], #4
    34c0:	f851 3b04 	ldr.w	r3, [r1], #4
    34c4:	f840 3b04 	str.w	r3, [r0], #4
    34c8:	f851 3b04 	ldr.w	r3, [r1], #4
    34cc:	f840 3b04 	str.w	r3, [r0], #4
    34d0:	f851 3b04 	ldr.w	r3, [r1], #4
    34d4:	f840 3b04 	str.w	r3, [r0], #4
    34d8:	f851 3b04 	ldr.w	r3, [r1], #4
    34dc:	f840 3b04 	str.w	r3, [r0], #4
    34e0:	f851 3b04 	ldr.w	r3, [r1], #4
    34e4:	f840 3b04 	str.w	r3, [r0], #4
    34e8:	f851 3b04 	ldr.w	r3, [r1], #4
    34ec:	f840 3b04 	str.w	r3, [r0], #4
    34f0:	f851 3b04 	ldr.w	r3, [r1], #4
    34f4:	f840 3b04 	str.w	r3, [r0], #4
    34f8:	f851 3b04 	ldr.w	r3, [r1], #4
    34fc:	f840 3b04 	str.w	r3, [r0], #4
    3500:	f851 3b04 	ldr.w	r3, [r1], #4
    3504:	f840 3b04 	str.w	r3, [r0], #4
    3508:	f851 3b04 	ldr.w	r3, [r1], #4
    350c:	f840 3b04 	str.w	r3, [r0], #4
    3510:	f851 3b04 	ldr.w	r3, [r1], #4
    3514:	f840 3b04 	str.w	r3, [r0], #4
    3518:	f851 3b04 	ldr.w	r3, [r1], #4
    351c:	f840 3b04 	str.w	r3, [r0], #4
    3520:	f851 3b04 	ldr.w	r3, [r1], #4
    3524:	f840 3b04 	str.w	r3, [r0], #4
    3528:	f851 3b04 	ldr.w	r3, [r1], #4
    352c:	f840 3b04 	str.w	r3, [r0], #4
    3530:	f851 3b04 	ldr.w	r3, [r1], #4
    3534:	f840 3b04 	str.w	r3, [r0], #4
    3538:	3a40      	subs	r2, #64	; 0x40
    353a:	d2bd      	bcs.n	34b8 <memcpy+0x10>
    353c:	3230      	adds	r2, #48	; 0x30
    353e:	d311      	bcc.n	3564 <memcpy+0xbc>
    3540:	f851 3b04 	ldr.w	r3, [r1], #4
    3544:	f840 3b04 	str.w	r3, [r0], #4
    3548:	f851 3b04 	ldr.w	r3, [r1], #4
    354c:	f840 3b04 	str.w	r3, [r0], #4
    3550:	f851 3b04 	ldr.w	r3, [r1], #4
    3554:	f840 3b04 	str.w	r3, [r0], #4
    3558:	f851 3b04 	ldr.w	r3, [r1], #4
    355c:	f840 3b04 	str.w	r3, [r0], #4
    3560:	3a10      	subs	r2, #16
    3562:	d2ed      	bcs.n	3540 <memcpy+0x98>
    3564:	320c      	adds	r2, #12
    3566:	d305      	bcc.n	3574 <memcpy+0xcc>
    3568:	f851 3b04 	ldr.w	r3, [r1], #4
    356c:	f840 3b04 	str.w	r3, [r0], #4
    3570:	3a04      	subs	r2, #4
    3572:	d2f9      	bcs.n	3568 <memcpy+0xc0>
    3574:	3204      	adds	r2, #4
    3576:	d008      	beq.n	358a <memcpy+0xe2>
    3578:	07d2      	lsls	r2, r2, #31
    357a:	bf1c      	itt	ne
    357c:	f811 3b01 	ldrbne.w	r3, [r1], #1
    3580:	f800 3b01 	strbne.w	r3, [r0], #1
    3584:	d301      	bcc.n	358a <memcpy+0xe2>
    3586:	880b      	ldrh	r3, [r1, #0]
    3588:	8003      	strh	r3, [r0, #0]
    358a:	4660      	mov	r0, ip
    358c:	4770      	bx	lr
    358e:	bf00      	nop
    3590:	2a08      	cmp	r2, #8
    3592:	d313      	bcc.n	35bc <memcpy+0x114>
    3594:	078b      	lsls	r3, r1, #30
    3596:	d08d      	beq.n	34b4 <memcpy+0xc>
    3598:	f010 0303 	ands.w	r3, r0, #3
    359c:	d08a      	beq.n	34b4 <memcpy+0xc>
    359e:	f1c3 0304 	rsb	r3, r3, #4
    35a2:	1ad2      	subs	r2, r2, r3
    35a4:	07db      	lsls	r3, r3, #31
    35a6:	bf1c      	itt	ne
    35a8:	f811 3b01 	ldrbne.w	r3, [r1], #1
    35ac:	f800 3b01 	strbne.w	r3, [r0], #1
    35b0:	d380      	bcc.n	34b4 <memcpy+0xc>
    35b2:	f831 3b02 	ldrh.w	r3, [r1], #2
    35b6:	f820 3b02 	strh.w	r3, [r0], #2
    35ba:	e77b      	b.n	34b4 <memcpy+0xc>
    35bc:	3a04      	subs	r2, #4
    35be:	d3d9      	bcc.n	3574 <memcpy+0xcc>
    35c0:	3a01      	subs	r2, #1
    35c2:	f811 3b01 	ldrb.w	r3, [r1], #1
    35c6:	f800 3b01 	strb.w	r3, [r0], #1
    35ca:	d2f9      	bcs.n	35c0 <memcpy+0x118>
    35cc:	780b      	ldrb	r3, [r1, #0]
    35ce:	7003      	strb	r3, [r0, #0]
    35d0:	784b      	ldrb	r3, [r1, #1]
    35d2:	7043      	strb	r3, [r0, #1]
    35d4:	788b      	ldrb	r3, [r1, #2]
    35d6:	7083      	strb	r3, [r0, #2]
    35d8:	4660      	mov	r0, ip
    35da:	4770      	bx	lr

000035dc <memset>:
    35dc:	b470      	push	{r4, r5, r6}
    35de:	0786      	lsls	r6, r0, #30
    35e0:	d046      	beq.n	3670 <memset+0x94>
    35e2:	1e54      	subs	r4, r2, #1
    35e4:	2a00      	cmp	r2, #0
    35e6:	d041      	beq.n	366c <memset+0x90>
    35e8:	b2ca      	uxtb	r2, r1
    35ea:	4603      	mov	r3, r0
    35ec:	e002      	b.n	35f4 <memset+0x18>
    35ee:	f114 34ff 	adds.w	r4, r4, #4294967295
    35f2:	d33b      	bcc.n	366c <memset+0x90>
    35f4:	f803 2b01 	strb.w	r2, [r3], #1
    35f8:	079d      	lsls	r5, r3, #30
    35fa:	d1f8      	bne.n	35ee <memset+0x12>
    35fc:	2c03      	cmp	r4, #3
    35fe:	d92e      	bls.n	365e <memset+0x82>
    3600:	b2cd      	uxtb	r5, r1
    3602:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
    3606:	2c0f      	cmp	r4, #15
    3608:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
    360c:	d919      	bls.n	3642 <memset+0x66>
    360e:	f103 0210 	add.w	r2, r3, #16
    3612:	4626      	mov	r6, r4
    3614:	3e10      	subs	r6, #16
    3616:	2e0f      	cmp	r6, #15
    3618:	f842 5c10 	str.w	r5, [r2, #-16]
    361c:	f842 5c0c 	str.w	r5, [r2, #-12]
    3620:	f842 5c08 	str.w	r5, [r2, #-8]
    3624:	f842 5c04 	str.w	r5, [r2, #-4]
    3628:	f102 0210 	add.w	r2, r2, #16
    362c:	d8f2      	bhi.n	3614 <memset+0x38>
    362e:	f1a4 0210 	sub.w	r2, r4, #16
    3632:	f022 020f 	bic.w	r2, r2, #15
    3636:	f004 040f 	and.w	r4, r4, #15
    363a:	3210      	adds	r2, #16
    363c:	2c03      	cmp	r4, #3
    363e:	4413      	add	r3, r2
    3640:	d90d      	bls.n	365e <memset+0x82>
    3642:	461e      	mov	r6, r3
    3644:	4622      	mov	r2, r4
    3646:	3a04      	subs	r2, #4
    3648:	2a03      	cmp	r2, #3
    364a:	f846 5b04 	str.w	r5, [r6], #4
    364e:	d8fa      	bhi.n	3646 <memset+0x6a>
    3650:	1f22      	subs	r2, r4, #4
    3652:	f022 0203 	bic.w	r2, r2, #3
    3656:	3204      	adds	r2, #4
    3658:	4413      	add	r3, r2
    365a:	f004 0403 	and.w	r4, r4, #3
    365e:	b12c      	cbz	r4, 366c <memset+0x90>
    3660:	b2c9      	uxtb	r1, r1
    3662:	441c      	add	r4, r3
    3664:	f803 1b01 	strb.w	r1, [r3], #1
    3668:	429c      	cmp	r4, r3
    366a:	d1fb      	bne.n	3664 <memset+0x88>
    366c:	bc70      	pop	{r4, r5, r6}
    366e:	4770      	bx	lr
    3670:	4614      	mov	r4, r2
    3672:	4603      	mov	r3, r0
    3674:	e7c2      	b.n	35fc <memset+0x20>
    3676:	bf00      	nop

00003678 <register_fini>:
    3678:	4b02      	ldr	r3, [pc, #8]	; (3684 <register_fini+0xc>)
    367a:	b113      	cbz	r3, 3682 <register_fini+0xa>
    367c:	4802      	ldr	r0, [pc, #8]	; (3688 <register_fini+0x10>)
    367e:	f000 b805 	b.w	368c <atexit>
    3682:	4770      	bx	lr
    3684:	00000000 	.word	0x00000000
    3688:	00003699 	.word	0x00003699

0000368c <atexit>:
    368c:	2300      	movs	r3, #0
    368e:	4601      	mov	r1, r0
    3690:	461a      	mov	r2, r3
    3692:	4618      	mov	r0, r3
    3694:	f000 b81e 	b.w	36d4 <__register_exitproc>

00003698 <__libc_fini_array>:
    3698:	b538      	push	{r3, r4, r5, lr}
    369a:	4c0a      	ldr	r4, [pc, #40]	; (36c4 <__libc_fini_array+0x2c>)
    369c:	4d0a      	ldr	r5, [pc, #40]	; (36c8 <__libc_fini_array+0x30>)
    369e:	1b64      	subs	r4, r4, r5
    36a0:	10a4      	asrs	r4, r4, #2
    36a2:	d00a      	beq.n	36ba <__libc_fini_array+0x22>
    36a4:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
    36a8:	3b01      	subs	r3, #1
    36aa:	eb05 0583 	add.w	r5, r5, r3, lsl #2
    36ae:	3c01      	subs	r4, #1
    36b0:	f855 3904 	ldr.w	r3, [r5], #-4
    36b4:	4798      	blx	r3
    36b6:	2c00      	cmp	r4, #0
    36b8:	d1f9      	bne.n	36ae <__libc_fini_array+0x16>
    36ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    36be:	f000 b905 	b.w	38cc <_fini>
    36c2:	bf00      	nop
    36c4:	000038dc 	.word	0x000038dc
    36c8:	000038d8 	.word	0x000038d8

000036cc <__retarget_lock_acquire_recursive>:
    36cc:	4770      	bx	lr
    36ce:	bf00      	nop

000036d0 <__retarget_lock_release_recursive>:
    36d0:	4770      	bx	lr
    36d2:	bf00      	nop

000036d4 <__register_exitproc>:
    36d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    36d8:	4d2c      	ldr	r5, [pc, #176]	; (378c <__register_exitproc+0xb8>)
    36da:	4606      	mov	r6, r0
    36dc:	6828      	ldr	r0, [r5, #0]
    36de:	4698      	mov	r8, r3
    36e0:	460f      	mov	r7, r1
    36e2:	4691      	mov	r9, r2
    36e4:	f7ff fff2 	bl	36cc <__retarget_lock_acquire_recursive>
    36e8:	4b29      	ldr	r3, [pc, #164]	; (3790 <__register_exitproc+0xbc>)
    36ea:	681c      	ldr	r4, [r3, #0]
    36ec:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
    36f0:	2b00      	cmp	r3, #0
    36f2:	d03e      	beq.n	3772 <__register_exitproc+0x9e>
    36f4:	685a      	ldr	r2, [r3, #4]
    36f6:	2a1f      	cmp	r2, #31
    36f8:	dc1c      	bgt.n	3734 <__register_exitproc+0x60>
    36fa:	f102 0e01 	add.w	lr, r2, #1
    36fe:	b176      	cbz	r6, 371e <__register_exitproc+0x4a>
    3700:	eb03 0182 	add.w	r1, r3, r2, lsl #2
    3704:	2401      	movs	r4, #1
    3706:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
    370a:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
    370e:	4094      	lsls	r4, r2
    3710:	4320      	orrs	r0, r4
    3712:	2e02      	cmp	r6, #2
    3714:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
    3718:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
    371c:	d023      	beq.n	3766 <__register_exitproc+0x92>
    371e:	3202      	adds	r2, #2
    3720:	f8c3 e004 	str.w	lr, [r3, #4]
    3724:	6828      	ldr	r0, [r5, #0]
    3726:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
    372a:	f7ff ffd1 	bl	36d0 <__retarget_lock_release_recursive>
    372e:	2000      	movs	r0, #0
    3730:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    3734:	4b17      	ldr	r3, [pc, #92]	; (3794 <__register_exitproc+0xc0>)
    3736:	b30b      	cbz	r3, 377c <__register_exitproc+0xa8>
    3738:	f44f 70c8 	mov.w	r0, #400	; 0x190
    373c:	f3af 8000 	nop.w
    3740:	4603      	mov	r3, r0
    3742:	b1d8      	cbz	r0, 377c <__register_exitproc+0xa8>
    3744:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
    3748:	6002      	str	r2, [r0, #0]
    374a:	2100      	movs	r1, #0
    374c:	6041      	str	r1, [r0, #4]
    374e:	460a      	mov	r2, r1
    3750:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
    3754:	f04f 0e01 	mov.w	lr, #1
    3758:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
    375c:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
    3760:	2e00      	cmp	r6, #0
    3762:	d0dc      	beq.n	371e <__register_exitproc+0x4a>
    3764:	e7cc      	b.n	3700 <__register_exitproc+0x2c>
    3766:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
    376a:	430c      	orrs	r4, r1
    376c:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
    3770:	e7d5      	b.n	371e <__register_exitproc+0x4a>
    3772:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
    3776:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
    377a:	e7bb      	b.n	36f4 <__register_exitproc+0x20>
    377c:	6828      	ldr	r0, [r5, #0]
    377e:	f7ff ffa7 	bl	36d0 <__retarget_lock_release_recursive>
    3782:	f04f 30ff 	mov.w	r0, #4294967295
    3786:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    378a:	bf00      	nop
    378c:	20000508 	.word	0x20000508
    3790:	000038b4 	.word	0x000038b4
    3794:	00000000 	.word	0x00000000
    3798:	682f2e2e 	.word	0x682f2e2e
    379c:	732f6c61 	.word	0x732f6c61
    37a0:	682f6372 	.word	0x682f6372
    37a4:	615f6c61 	.word	0x615f6c61
    37a8:	735f6364 	.word	0x735f6364
    37ac:	2e636e79 	.word	0x2e636e79
    37b0:	00000063 	.word	0x00000063
    37b4:	682f2e2e 	.word	0x682f2e2e
    37b8:	732f6c61 	.word	0x732f6c61
    37bc:	682f6372 	.word	0x682f6372
    37c0:	735f6c61 	.word	0x735f6c61
    37c4:	6d5f6970 	.word	0x6d5f6970
    37c8:	7973615f 	.word	0x7973615f
    37cc:	632e636e 	.word	0x632e636e
    37d0:	00000000 	.word	0x00000000

000037d4 <_adcs>:
    37d4:	01000000 00800000 0000181d 00000000     ................
	...
    37ec:	682f2e2e 612f6c70 682f6364 615f6c70     ../hpl/adc/hpl_a
    37fc:	632e6364 00000000 40003000 40003400     dc.c.....0.@.4.@
    380c:	41012000 41014000 43000000 43000400     . .A.@.A...C...C
    381c:	43000800 43000c00                       ...C...C

00003824 <_i2cms>:
	...
    383c:	682f2e2e 732f6c70 6f637265 70682f6d     ../hpl/sercom/hp
    384c:	65735f6c 6d6f6372 0000632e              l_sercom.c..

00003858 <_usb_ep_cfgs>:
    3858:	20000758 00000000 00000040 20000718     X.. ....@...... 
    3868:	00000000 00000040 200006d8 00000000     ....@...... ....
    3878:	00000040 752f2e2e 642f6273 63697665     @...../usb/devic
    3888:	73752f65 2e636462 00000063 682f2e2e     e/usbdc.c...../h
    3898:	752f6c61 736c6974 6372732f 6974752f     al/utils/src/uti
    38a8:	6c5f736c 2e747369 00000063              ls_list.c...

000038b4 <_global_impure_ptr>:
    38b4:	200000e0                                ... 

000038b8 <_init>:
    38b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    38ba:	bf00      	nop
    38bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
    38be:	bc08      	pop	{r3}
    38c0:	469e      	mov	lr, r3
    38c2:	4770      	bx	lr

000038c4 <__init_array_start>:
    38c4:	00003679 	.word	0x00003679

000038c8 <__frame_dummy_init_array_entry>:
    38c8:	00000289                                ....

000038cc <_fini>:
    38cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    38ce:	bf00      	nop
    38d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
    38d2:	bc08      	pop	{r3}
    38d4:	469e      	mov	lr, r3
    38d6:	4770      	bx	lr

000038d8 <__fini_array_start>:
    38d8:	00000265 	.word	0x00000265
