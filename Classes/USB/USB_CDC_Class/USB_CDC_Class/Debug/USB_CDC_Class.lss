
USB_CDC_Class.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000052f4  00000000  00000000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  000052f4  000052f4  000152f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     0000053c  20000000  000052fc  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bkupram      00000000  47000000  47000000  0002053c  2**0
                  CONTENTS
  4 .qspi         00000000  04000000  04000000  0002053c  2**0
                  CONTENTS
  5 .bss          000005c8  2000053c  00005838  0002053c  2**2
                  ALLOC
  6 .stack        00010004  20000b04  00005e00  0002053c  2**0
                  ALLOC
  7 .ARM.attributes 0000002e  00000000  00000000  0002053c  2**0
                  CONTENTS, READONLY
  8 .comment      00000059  00000000  00000000  0002056a  2**0
                  CONTENTS, READONLY
  9 .debug_info   00042eb6  00000000  00000000  000205c3  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000054ea  00000000  00000000  00063479  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000176fa  00000000  00000000  00068963  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00001140  00000000  00000000  0008005d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00001970  00000000  00000000  0008119d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  0003d955  00000000  00000000  00082b0d  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0001d8d1  00000000  00000000  000c0462  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    0012c38f  00000000  00000000  000ddd33  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  00003128  00000000  00000000  0020a0c4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	08 0b 01 20 d1 02 00 00 55 03 00 00 55 03 00 00     ... ....U...U...
      10:	55 03 00 00 55 03 00 00 55 03 00 00 00 00 00 00     U...U...U.......
	...
      2c:	55 03 00 00 55 03 00 00 00 00 00 00 55 03 00 00     U...U.......U...
      3c:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...
      4c:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...
      5c:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...
      6c:	e5 20 00 00 55 03 00 00 55 03 00 00 55 03 00 00     . ..U...U...U...
      7c:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...
      8c:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...
      9c:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...
      ac:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...
      bc:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...
      cc:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...
      dc:	55 03 00 00 55 03 00 00 55 03 00 00 00 00 00 00     U...U...U.......
	...
      f4:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...
     104:	55 03 00 00 b1 26 00 00 c5 26 00 00 d9 26 00 00     U....&...&...&..
     114:	ed 26 00 00 55 03 00 00 55 03 00 00 55 03 00 00     .&..U...U...U...
     124:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...
     134:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...
     144:	55 03 00 00 01 27 00 00 15 27 00 00 29 27 00 00     U....'...'..)'..
     154:	3d 27 00 00 55 03 00 00 55 03 00 00 55 03 00 00     ='..U...U...U...
     164:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...
     174:	55 03 00 00 55 03 00 00 25 1d 00 00 8d 3c 00 00     U...U...%....<..
     184:	99 3c 00 00 a5 3c 00 00 b1 3c 00 00 55 03 00 00     .<...<...<..U...
     194:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...
     1a4:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...
     1b4:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...
     1c4:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...
     1d4:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...
     1e4:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...
     1f4:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...
     204:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...
     214:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...
     224:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...
     234:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...
     244:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...
     254:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...

00000264 <__do_global_dtors_aux>:
     264:	b510      	push	{r4, lr}
     266:	4c05      	ldr	r4, [pc, #20]	; (27c <__do_global_dtors_aux+0x18>)
     268:	7823      	ldrb	r3, [r4, #0]
     26a:	b933      	cbnz	r3, 27a <__do_global_dtors_aux+0x16>
     26c:	4b04      	ldr	r3, [pc, #16]	; (280 <__do_global_dtors_aux+0x1c>)
     26e:	b113      	cbz	r3, 276 <__do_global_dtors_aux+0x12>
     270:	4804      	ldr	r0, [pc, #16]	; (284 <__do_global_dtors_aux+0x20>)
     272:	f3af 8000 	nop.w
     276:	2301      	movs	r3, #1
     278:	7023      	strb	r3, [r4, #0]
     27a:	bd10      	pop	{r4, pc}
     27c:	2000053c 	.word	0x2000053c
     280:	00000000 	.word	0x00000000
     284:	000052fc 	.word	0x000052fc

00000288 <frame_dummy>:
     288:	4b0c      	ldr	r3, [pc, #48]	; (2bc <frame_dummy+0x34>)
     28a:	b143      	cbz	r3, 29e <frame_dummy+0x16>
     28c:	480c      	ldr	r0, [pc, #48]	; (2c0 <frame_dummy+0x38>)
     28e:	490d      	ldr	r1, [pc, #52]	; (2c4 <frame_dummy+0x3c>)
     290:	b510      	push	{r4, lr}
     292:	f3af 8000 	nop.w
     296:	480c      	ldr	r0, [pc, #48]	; (2c8 <frame_dummy+0x40>)
     298:	6803      	ldr	r3, [r0, #0]
     29a:	b923      	cbnz	r3, 2a6 <frame_dummy+0x1e>
     29c:	bd10      	pop	{r4, pc}
     29e:	480a      	ldr	r0, [pc, #40]	; (2c8 <frame_dummy+0x40>)
     2a0:	6803      	ldr	r3, [r0, #0]
     2a2:	b933      	cbnz	r3, 2b2 <frame_dummy+0x2a>
     2a4:	4770      	bx	lr
     2a6:	4b09      	ldr	r3, [pc, #36]	; (2cc <frame_dummy+0x44>)
     2a8:	2b00      	cmp	r3, #0
     2aa:	d0f7      	beq.n	29c <frame_dummy+0x14>
     2ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     2b0:	4718      	bx	r3
     2b2:	4b06      	ldr	r3, [pc, #24]	; (2cc <frame_dummy+0x44>)
     2b4:	2b00      	cmp	r3, #0
     2b6:	d0f5      	beq.n	2a4 <frame_dummy+0x1c>
     2b8:	4718      	bx	r3
     2ba:	bf00      	nop
     2bc:	00000000 	.word	0x00000000
     2c0:	000052fc 	.word	0x000052fc
     2c4:	20000540 	.word	0x20000540
     2c8:	000052fc 	.word	0x000052fc
     2cc:	00000000 	.word	0x00000000

000002d0 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
     2d0:	b580      	push	{r7, lr}
     2d2:	b082      	sub	sp, #8
     2d4:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
     2d6:	4b16      	ldr	r3, [pc, #88]	; (330 <Reset_Handler+0x60>)
     2d8:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
     2da:	4b16      	ldr	r3, [pc, #88]	; (334 <Reset_Handler+0x64>)
     2dc:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
     2de:	687a      	ldr	r2, [r7, #4]
     2e0:	683b      	ldr	r3, [r7, #0]
     2e2:	429a      	cmp	r2, r3
     2e4:	d00c      	beq.n	300 <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
     2e6:	e007      	b.n	2f8 <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
     2e8:	683b      	ldr	r3, [r7, #0]
     2ea:	1d1a      	adds	r2, r3, #4
     2ec:	603a      	str	r2, [r7, #0]
     2ee:	687a      	ldr	r2, [r7, #4]
     2f0:	1d11      	adds	r1, r2, #4
     2f2:	6079      	str	r1, [r7, #4]
     2f4:	6812      	ldr	r2, [r2, #0]
     2f6:	601a      	str	r2, [r3, #0]
                for (; pDest < &_erelocate;) {
     2f8:	683b      	ldr	r3, [r7, #0]
     2fa:	4a0f      	ldr	r2, [pc, #60]	; (338 <Reset_Handler+0x68>)
     2fc:	4293      	cmp	r3, r2
     2fe:	d3f3      	bcc.n	2e8 <Reset_Handler+0x18>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
     300:	4b0e      	ldr	r3, [pc, #56]	; (33c <Reset_Handler+0x6c>)
     302:	603b      	str	r3, [r7, #0]
     304:	e004      	b.n	310 <Reset_Handler+0x40>
                *pDest++ = 0;
     306:	683b      	ldr	r3, [r7, #0]
     308:	1d1a      	adds	r2, r3, #4
     30a:	603a      	str	r2, [r7, #0]
     30c:	2200      	movs	r2, #0
     30e:	601a      	str	r2, [r3, #0]
        for (pDest = &_szero; pDest < &_ezero;) {
     310:	683b      	ldr	r3, [r7, #0]
     312:	4a0b      	ldr	r2, [pc, #44]	; (340 <Reset_Handler+0x70>)
     314:	4293      	cmp	r3, r2
     316:	d3f6      	bcc.n	306 <Reset_Handler+0x36>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
     318:	4b0a      	ldr	r3, [pc, #40]	; (344 <Reset_Handler+0x74>)
     31a:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     31c:	4a0a      	ldr	r2, [pc, #40]	; (348 <Reset_Handler+0x78>)
     31e:	687b      	ldr	r3, [r7, #4]
     320:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
     324:	6093      	str	r3, [r2, #8]
        __DSB();
        __ISB();
#endif

        /* Initialize the C library */
        __libc_init_array();
     326:	4b09      	ldr	r3, [pc, #36]	; (34c <Reset_Handler+0x7c>)
     328:	4798      	blx	r3

        /* Branch to main function */
        main();
     32a:	4b09      	ldr	r3, [pc, #36]	; (350 <Reset_Handler+0x80>)
     32c:	4798      	blx	r3

        /* Infinite loop */
        while (1);
     32e:	e7fe      	b.n	32e <Reset_Handler+0x5e>
     330:	000052fc 	.word	0x000052fc
     334:	20000000 	.word	0x20000000
     338:	2000053c 	.word	0x2000053c
     33c:	2000053c 	.word	0x2000053c
     340:	20000b04 	.word	0x20000b04
     344:	00000000 	.word	0x00000000
     348:	e000ed00 	.word	0xe000ed00
     34c:	000048a1 	.word	0x000048a1
     350:	000003d9 	.word	0x000003d9

00000354 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     354:	b480      	push	{r7}
     356:	af00      	add	r7, sp, #0
        while (1) {
     358:	e7fe      	b.n	358 <Dummy_Handler+0x4>

0000035a <hri_port_toggle_OUT_reg>:
{
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
}

static inline void hri_port_toggle_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
     35a:	b480      	push	{r7}
     35c:	b085      	sub	sp, #20
     35e:	af00      	add	r7, sp, #0
     360:	60f8      	str	r0, [r7, #12]
     362:	460b      	mov	r3, r1
     364:	607a      	str	r2, [r7, #4]
     366:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = mask;
     368:	7afb      	ldrb	r3, [r7, #11]
     36a:	68fa      	ldr	r2, [r7, #12]
     36c:	01db      	lsls	r3, r3, #7
     36e:	4413      	add	r3, r2
     370:	331c      	adds	r3, #28
     372:	687a      	ldr	r2, [r7, #4]
     374:	601a      	str	r2, [r3, #0]
}
     376:	bf00      	nop
     378:	3714      	adds	r7, #20
     37a:	46bd      	mov	sp, r7
     37c:	bc80      	pop	{r7}
     37e:	4770      	bx	lr

00000380 <_gpio_toggle_level>:

/**
 * \brief Change output level to the opposite with mask
 */
static inline void _gpio_toggle_level(const enum gpio_port port, const uint32_t mask)
{
     380:	b580      	push	{r7, lr}
     382:	b082      	sub	sp, #8
     384:	af00      	add	r7, sp, #0
     386:	4603      	mov	r3, r0
     388:	6039      	str	r1, [r7, #0]
     38a:	71fb      	strb	r3, [r7, #7]
	hri_port_toggle_OUT_reg(PORT, port, mask);
     38c:	79fb      	ldrb	r3, [r7, #7]
     38e:	683a      	ldr	r2, [r7, #0]
     390:	4619      	mov	r1, r3
     392:	4803      	ldr	r0, [pc, #12]	; (3a0 <_gpio_toggle_level+0x20>)
     394:	4b03      	ldr	r3, [pc, #12]	; (3a4 <_gpio_toggle_level+0x24>)
     396:	4798      	blx	r3
}
     398:	bf00      	nop
     39a:	3708      	adds	r7, #8
     39c:	46bd      	mov	sp, r7
     39e:	bd80      	pop	{r7, pc}
     3a0:	41008000 	.word	0x41008000
     3a4:	0000035b 	.word	0x0000035b

000003a8 <gpio_toggle_pin_level>:
 * Toggle the pin levels on pins defined by bit mask
 *
 * \param[in] pin       The pin number for device
 */
static inline void gpio_toggle_pin_level(const uint8_t pin)
{
     3a8:	b580      	push	{r7, lr}
     3aa:	b082      	sub	sp, #8
     3ac:	af00      	add	r7, sp, #0
     3ae:	4603      	mov	r3, r0
     3b0:	71fb      	strb	r3, [r7, #7]
	_gpio_toggle_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin));
     3b2:	79fb      	ldrb	r3, [r7, #7]
     3b4:	115b      	asrs	r3, r3, #5
     3b6:	b2d8      	uxtb	r0, r3
     3b8:	79fb      	ldrb	r3, [r7, #7]
     3ba:	f003 031f 	and.w	r3, r3, #31
     3be:	2201      	movs	r2, #1
     3c0:	fa02 f303 	lsl.w	r3, r2, r3
     3c4:	4619      	mov	r1, r3
     3c6:	4b03      	ldr	r3, [pc, #12]	; (3d4 <gpio_toggle_pin_level+0x2c>)
     3c8:	4798      	blx	r3
}
     3ca:	bf00      	nop
     3cc:	3708      	adds	r7, #8
     3ce:	46bd      	mov	sp, r7
     3d0:	bd80      	pop	{r7, pc}
     3d2:	bf00      	nop
     3d4:	00000381 	.word	0x00000381

000003d8 <main>:
void display_menu(void);

static uint8_t p[]=" ---Usb port Test ----\n\r";
static uint8_t q[]=",123,456,678 \n\r";
int main(void)
{
     3d8:	b580      	push	{r7, lr}
     3da:	b0d6      	sub	sp, #344	; 0x158
     3dc:	af00      	add	r7, sp, #0
	atmel_start_init();
     3de:	4ba5      	ldr	r3, [pc, #660]	; (674 <main+0x29c>)
     3e0:	4798      	blx	r3

	usb0.init();
     3e2:	48a5      	ldr	r0, [pc, #660]	; (678 <main+0x2a0>)
     3e4:	4ba5      	ldr	r3, [pc, #660]	; (67c <main+0x2a4>)
     3e6:	4798      	blx	r3
	uint8_t *ptr;
	uint8_t  r;
	uint8_t	n,m,l,l2,ind,ind2;

	const char	*test ="123";
     3e8:	4ba5      	ldr	r3, [pc, #660]	; (680 <main+0x2a8>)
     3ea:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
	uint8_t	text0[]="Values,";
     3ee:	4aa5      	ldr	r2, [pc, #660]	; (684 <main+0x2ac>)
     3f0:	f507 738e 	add.w	r3, r7, #284	; 0x11c
     3f4:	e892 0003 	ldmia.w	r2, {r0, r1}
     3f8:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t	text1[]=",";
     3fc:	232c      	movs	r3, #44	; 0x2c
     3fe:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
	uint8_t	text2[]="123\n\r";
     402:	4aa1      	ldr	r2, [pc, #644]	; (688 <main+0x2b0>)
     404:	f507 7388 	add.w	r3, r7, #272	; 0x110
     408:	e892 0003 	ldmia.w	r2, {r0, r1}
     40c:	6018      	str	r0, [r3, #0]
     40e:	3304      	adds	r3, #4
     410:	8019      	strh	r1, [r3, #0]
	char	array[16];
	uint8_t	palabra[128],finalText[128];
	uint32_t	counter=1;
     412:	2301      	movs	r3, #1
     414:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
	delay_ms(100);
     418:	2064      	movs	r0, #100	; 0x64
     41a:	4b9c      	ldr	r3, [pc, #624]	; (68c <main+0x2b4>)
     41c:	4798      	blx	r3
	display_menu();
     41e:	4b9c      	ldr	r3, [pc, #624]	; (690 <main+0x2b8>)
     420:	4798      	blx	r3
	usb0.write(&p[0],sizeof(p));
     422:	2219      	movs	r2, #25
     424:	499b      	ldr	r1, [pc, #620]	; (694 <main+0x2bc>)
     426:	4894      	ldr	r0, [pc, #592]	; (678 <main+0x2a0>)
     428:	4b9b      	ldr	r3, [pc, #620]	; (698 <main+0x2c0>)
     42a:	4798      	blx	r3
		delay_ms(200);
     42c:	20c8      	movs	r0, #200	; 0xc8
     42e:	4b97      	ldr	r3, [pc, #604]	; (68c <main+0x2b4>)
     430:	4798      	blx	r3
	ind=0;
     432:	2300      	movs	r3, #0
     434:	f887 3153 	strb.w	r3, [r7, #339]	; 0x153
    /* Replace with your application code */
    while (1) 
    {
		ind=0;
     438:	2300      	movs	r3, #0
     43a:	f887 3153 	strb.w	r3, [r7, #339]	; 0x153
		
		l=sizeof(text0);
     43e:	2308      	movs	r3, #8
     440:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
		for (int k=0;k<l;k++)
     444:	2300      	movs	r3, #0
     446:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
     44a:	f897 212f 	ldrb.w	r2, [r7, #303]	; 0x12f
     44e:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
     452:	429a      	cmp	r2, r3
     454:	dd12      	ble.n	47c <main+0xa4>
		{

			palabra[k]=text0[k];
     456:	f507 728e 	add.w	r2, r7, #284	; 0x11c
     45a:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
     45e:	4413      	add	r3, r2
     460:	7819      	ldrb	r1, [r3, #0]
     462:	f107 0280 	add.w	r2, r7, #128	; 0x80
     466:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
     46a:	4413      	add	r3, r2
     46c:	460a      	mov	r2, r1
     46e:	701a      	strb	r2, [r3, #0]
		for (int k=0;k<l;k++)
     470:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
     474:	3301      	adds	r3, #1
     476:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
     47a:	e7e6      	b.n	44a <main+0x72>
		}
		ind=l;
     47c:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
     480:	f887 3153 	strb.w	r3, [r7, #339]	; 0x153
		
		for (int ij=0;ij<4;ij++)
     484:	2300      	movs	r3, #0
     486:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
     48a:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
     48e:	2b03      	cmp	r3, #3
     490:	dc72      	bgt.n	578 <main+0x1a0>
		{
			
			char *c=utoa(counter,array,10);;
     492:	f507 7380 	add.w	r3, r7, #256	; 0x100
     496:	220a      	movs	r2, #10
     498:	4619      	mov	r1, r3
     49a:	f8d7 014c 	ldr.w	r0, [r7, #332]	; 0x14c
     49e:	4b7f      	ldr	r3, [pc, #508]	; (69c <main+0x2c4>)
     4a0:	4798      	blx	r3
     4a2:	f8c7 0128 	str.w	r0, [r7, #296]	; 0x128
						
			//usb0.write((uint8_t *)t,10);
			n=sizeof(c);
     4a6:	2304      	movs	r3, #4
     4a8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
			ptr=(uint8_t*)c;
     4ac:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
     4b0:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
			for (int i=ind;i<n+ind;i++)
     4b4:	f897 3153 	ldrb.w	r3, [r7, #339]	; 0x153
     4b8:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
     4bc:	f897 2127 	ldrb.w	r2, [r7, #295]	; 0x127
     4c0:	f897 3153 	ldrb.w	r3, [r7, #339]	; 0x153
     4c4:	441a      	add	r2, r3
     4c6:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
     4ca:	429a      	cmp	r2, r3
     4cc:	dd14      	ble.n	4f8 <main+0x120>
			{
				palabra[i]=*ptr;
     4ce:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
     4d2:	7819      	ldrb	r1, [r3, #0]
     4d4:	f107 0280 	add.w	r2, r7, #128	; 0x80
     4d8:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
     4dc:	4413      	add	r3, r2
     4de:	460a      	mov	r2, r1
     4e0:	701a      	strb	r2, [r3, #0]
				ptr++;
     4e2:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
     4e6:	3301      	adds	r3, #1
     4e8:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
			for (int i=ind;i<n+ind;i++)
     4ec:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
     4f0:	3301      	adds	r3, #1
     4f2:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
     4f6:	e7e1      	b.n	4bc <main+0xe4>
				
			}
			ind=ind+n;
     4f8:	f897 2153 	ldrb.w	r2, [r7, #339]	; 0x153
     4fc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
     500:	4413      	add	r3, r2
     502:	f887 3153 	strb.w	r3, [r7, #339]	; 0x153
			m=sizeof(text1);
     506:	2302      	movs	r3, #2
     508:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
			for (int j=ind;j<m+ind;j++)
     50c:	f897 3153 	ldrb.w	r3, [r7, #339]	; 0x153
     510:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
     514:	f897 2126 	ldrb.w	r2, [r7, #294]	; 0x126
     518:	f897 3153 	ldrb.w	r3, [r7, #339]	; 0x153
     51c:	441a      	add	r2, r3
     51e:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
     522:	429a      	cmp	r2, r3
     524:	dd16      	ble.n	554 <main+0x17c>
			{
				palabra[j]=text1[j-ind];
     526:	f897 3153 	ldrb.w	r3, [r7, #339]	; 0x153
     52a:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
     52e:	1ad3      	subs	r3, r2, r3
     530:	f507 72ac 	add.w	r2, r7, #344	; 0x158
     534:	4413      	add	r3, r2
     536:	f813 1c40 	ldrb.w	r1, [r3, #-64]
     53a:	f107 0280 	add.w	r2, r7, #128	; 0x80
     53e:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
     542:	4413      	add	r3, r2
     544:	460a      	mov	r2, r1
     546:	701a      	strb	r2, [r3, #0]
			for (int j=ind;j<m+ind;j++)
     548:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
     54c:	3301      	adds	r3, #1
     54e:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
     552:	e7df      	b.n	514 <main+0x13c>
			}
			ind=ind+m;
     554:	f897 2153 	ldrb.w	r2, [r7, #339]	; 0x153
     558:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
     55c:	4413      	add	r3, r2
     55e:	f887 3153 	strb.w	r3, [r7, #339]	; 0x153
			
		
			
			//usb0.write(&text1[0],sizeof(text1));
			counter++;
     562:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
     566:	3301      	adds	r3, #1
     568:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
		for (int ij=0;ij<4;ij++)
     56c:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
     570:	3301      	adds	r3, #1
     572:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
     576:	e788      	b.n	48a <main+0xb2>
		}
		
		l2=sizeof(text2);
     578:	2306      	movs	r3, #6
     57a:	f887 3125 	strb.w	r3, [r7, #293]	; 0x125
		for (int kk=ind;kk<l2+ind;kk++)
     57e:	f897 3153 	ldrb.w	r3, [r7, #339]	; 0x153
     582:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
     586:	f897 2125 	ldrb.w	r2, [r7, #293]	; 0x125
     58a:	f897 3153 	ldrb.w	r3, [r7, #339]	; 0x153
     58e:	441a      	add	r2, r3
     590:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
     594:	429a      	cmp	r2, r3
     596:	dd16      	ble.n	5c6 <main+0x1ee>
		{
			palabra[kk]=text2[kk-ind];
     598:	f897 3153 	ldrb.w	r3, [r7, #339]	; 0x153
     59c:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
     5a0:	1ad3      	subs	r3, r2, r3
     5a2:	f507 72ac 	add.w	r2, r7, #344	; 0x158
     5a6:	4413      	add	r3, r2
     5a8:	f813 1c48 	ldrb.w	r1, [r3, #-72]
     5ac:	f107 0280 	add.w	r2, r7, #128	; 0x80
     5b0:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
     5b4:	4413      	add	r3, r2
     5b6:	460a      	mov	r2, r1
     5b8:	701a      	strb	r2, [r3, #0]
		for (int kk=ind;kk<l2+ind;kk++)
     5ba:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
     5be:	3301      	adds	r3, #1
     5c0:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
     5c4:	e7df      	b.n	586 <main+0x1ae>
		}
		ind=ind+l2;
     5c6:	f897 2153 	ldrb.w	r2, [r7, #339]	; 0x153
     5ca:	f897 3125 	ldrb.w	r3, [r7, #293]	; 0x125
     5ce:	4413      	add	r3, r2
     5d0:	f887 3153 	strb.w	r3, [r7, #339]	; 0x153
		ind2=0;
     5d4:	2300      	movs	r3, #0
     5d6:	f887 3152 	strb.w	r3, [r7, #338]	; 0x152
		for (int i=0;i<ind;i++)
     5da:	2300      	movs	r3, #0
     5dc:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
     5e0:	f897 2153 	ldrb.w	r2, [r7, #339]	; 0x153
     5e4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
     5e8:	429a      	cmp	r2, r3
     5ea:	dd1c      	ble.n	626 <main+0x24e>
		{
			if (palabra[i]>9)
     5ec:	f107 0280 	add.w	r2, r7, #128	; 0x80
     5f0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
     5f4:	4413      	add	r3, r2
     5f6:	781b      	ldrb	r3, [r3, #0]
     5f8:	2b09      	cmp	r3, #9
     5fa:	dd0e      	ble.n	61a <main+0x242>
			{
					finalText[ind2]=palabra[i];
     5fc:	f897 3152 	ldrb.w	r3, [r7, #338]	; 0x152
     600:	f107 0180 	add.w	r1, r7, #128	; 0x80
     604:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
     608:	440a      	add	r2, r1
     60a:	7811      	ldrb	r1, [r2, #0]
     60c:	463a      	mov	r2, r7
     60e:	54d1      	strb	r1, [r2, r3]
					ind2++;			
     610:	f897 3152 	ldrb.w	r3, [r7, #338]	; 0x152
     614:	3301      	adds	r3, #1
     616:	f887 3152 	strb.w	r3, [r7, #338]	; 0x152
		for (int i=0;i<ind;i++)
     61a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
     61e:	3301      	adds	r3, #1
     620:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
     624:	e7dc      	b.n	5e0 <main+0x208>
			}
		}
		usb0.write(&finalText[0],ind2);
     626:	f897 2152 	ldrb.w	r2, [r7, #338]	; 0x152
     62a:	463b      	mov	r3, r7
     62c:	4619      	mov	r1, r3
     62e:	4812      	ldr	r0, [pc, #72]	; (678 <main+0x2a0>)
     630:	4b19      	ldr	r3, [pc, #100]	; (698 <main+0x2c0>)
     632:	4798      	blx	r3
		delay_ms(500);
     634:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
     638:	4b14      	ldr	r3, [pc, #80]	; (68c <main+0x2b4>)
     63a:	4798      	blx	r3
		//usb0.write(&q[0],sizeof(q));
		//delay_ms(500);
		usb0.read(&r,1);
     63c:	f507 7392 	add.w	r3, r7, #292	; 0x124
     640:	2201      	movs	r2, #1
     642:	4619      	mov	r1, r3
     644:	480c      	ldr	r0, [pc, #48]	; (678 <main+0x2a0>)
     646:	4b16      	ldr	r3, [pc, #88]	; (6a0 <main+0x2c8>)
     648:	4798      	blx	r3
		delay_ms(200);
     64a:	20c8      	movs	r0, #200	; 0xc8
     64c:	4b0f      	ldr	r3, [pc, #60]	; (68c <main+0x2b4>)
     64e:	4798      	blx	r3
		
		
		if (r>33)
     650:	f897 3124 	ldrb.w	r3, [r7, #292]	; 0x124
     654:	2b21      	cmp	r3, #33	; 0x21
     656:	dd08      	ble.n	66a <main+0x292>
		{
		//	text1[0]=r;
		//	usb0.write(&text1[0],sizeof(text1));
			gpio_toggle_pin_level(LED0);
     658:	2052      	movs	r0, #82	; 0x52
     65a:	4b12      	ldr	r3, [pc, #72]	; (6a4 <main+0x2cc>)
     65c:	4798      	blx	r3
			delay_ms(100);
     65e:	2064      	movs	r0, #100	; 0x64
     660:	4b0a      	ldr	r3, [pc, #40]	; (68c <main+0x2b4>)
     662:	4798      	blx	r3
			r=0x00;
     664:	2300      	movs	r3, #0
     666:	f887 3124 	strb.w	r3, [r7, #292]	; 0x124
		}
		
		
		delay_ms(500);
     66a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
     66e:	4b07      	ldr	r3, [pc, #28]	; (68c <main+0x2b4>)
     670:	4798      	blx	r3
    }
     672:	e6e1      	b.n	438 <main+0x60>
     674:	00000ae5 	.word	0x00000ae5
     678:	20000558 	.word	0x20000558
     67c:	00000891 	.word	0x00000891
     680:	00004d40 	.word	0x00004d40
     684:	00004d44 	.word	0x00004d44
     688:	00004d4c 	.word	0x00004d4c
     68c:	00001281 	.word	0x00001281
     690:	000006a9 	.word	0x000006a9
     694:	20000004 	.word	0x20000004
     698:	0000091d 	.word	0x0000091d
     69c:	00004c1d 	.word	0x00004c1d
     6a0:	0000096d 	.word	0x0000096d
     6a4:	000003a9 	.word	0x000003a9

000006a8 <_Z12display_menuv>:
}

 void display_menu(void)
 {
     6a8:	b580      	push	{r7, lr}
     6aa:	af00      	add	r7, sp, #0
	 usb0.xprint("Menu :\r\n");
     6ac:	4918      	ldr	r1, [pc, #96]	; (710 <_Z12display_menuv+0x68>)
     6ae:	4819      	ldr	r0, [pc, #100]	; (714 <_Z12display_menuv+0x6c>)
     6b0:	4b19      	ldr	r3, [pc, #100]	; (718 <_Z12display_menuv+0x70>)
     6b2:	4798      	blx	r3
	usb0.xprint( "  -- Select the action:\r\n");
     6b4:	4919      	ldr	r1, [pc, #100]	; (71c <_Z12display_menuv+0x74>)
     6b6:	4817      	ldr	r0, [pc, #92]	; (714 <_Z12display_menuv+0x6c>)
     6b8:	4b17      	ldr	r3, [pc, #92]	; (718 <_Z12display_menuv+0x70>)
     6ba:	4798      	blx	r3
	usb0.xprint( "  0: Set standard filter ID 0: 0x45A, store into Rx buffer. \r\n");
     6bc:	4918      	ldr	r1, [pc, #96]	; (720 <_Z12display_menuv+0x78>)
     6be:	4815      	ldr	r0, [pc, #84]	; (714 <_Z12display_menuv+0x6c>)
     6c0:	4b15      	ldr	r3, [pc, #84]	; (718 <_Z12display_menuv+0x70>)
     6c2:	4798      	blx	r3
	usb0.xprint( "  1: Set standard filter ID 1: 0x469, store into Rx FIFO 0. \r\n");
     6c4:	4917      	ldr	r1, [pc, #92]	; (724 <_Z12display_menuv+0x7c>)
     6c6:	4813      	ldr	r0, [pc, #76]	; (714 <_Z12display_menuv+0x6c>)
     6c8:	4b13      	ldr	r3, [pc, #76]	; (718 <_Z12display_menuv+0x70>)
     6ca:	4798      	blx	r3
	usb0.xprint( "  2: Send FD standard message with ID: 0x45A and 64 byte data 0 to 63. \r\n");
     6cc:	4916      	ldr	r1, [pc, #88]	; (728 <_Z12display_menuv+0x80>)
     6ce:	4811      	ldr	r0, [pc, #68]	; (714 <_Z12display_menuv+0x6c>)
     6d0:	4b11      	ldr	r3, [pc, #68]	; (718 <_Z12display_menuv+0x70>)
     6d2:	4798      	blx	r3
	usb0.xprint( "  3: Send FD standard message with ID: 0x469 and 64 byte data 128 to 191. \r\n");
     6d4:	4915      	ldr	r1, [pc, #84]	; (72c <_Z12display_menuv+0x84>)
     6d6:	480f      	ldr	r0, [pc, #60]	; (714 <_Z12display_menuv+0x6c>)
     6d8:	4b0f      	ldr	r3, [pc, #60]	; (718 <_Z12display_menuv+0x70>)
     6da:	4798      	blx	r3
	usb0.xprint( "  4: Set extended filter ID 0: 0x100000A5, store into Rx buffer. \r\n");
     6dc:	4914      	ldr	r1, [pc, #80]	; (730 <_Z12display_menuv+0x88>)
     6de:	480d      	ldr	r0, [pc, #52]	; (714 <_Z12display_menuv+0x6c>)
     6e0:	4b0d      	ldr	r3, [pc, #52]	; (718 <_Z12display_menuv+0x70>)
     6e2:	4798      	blx	r3
	usb0.xprint( "  5: Set extended filter ID 1: 0x10000096, store into Rx FIFO 1. \r\n");
     6e4:	4913      	ldr	r1, [pc, #76]	; (734 <_Z12display_menuv+0x8c>)
     6e6:	480b      	ldr	r0, [pc, #44]	; (714 <_Z12display_menuv+0x6c>)
     6e8:	4b0b      	ldr	r3, [pc, #44]	; (718 <_Z12display_menuv+0x70>)
     6ea:	4798      	blx	r3
	usb0.xprint( "  6: Send FD extended message with ID: 0x100000A5 and 64 byte data 0 to 63. \r\n");
     6ec:	4912      	ldr	r1, [pc, #72]	; (738 <_Z12display_menuv+0x90>)
     6ee:	4809      	ldr	r0, [pc, #36]	; (714 <_Z12display_menuv+0x6c>)
     6f0:	4b09      	ldr	r3, [pc, #36]	; (718 <_Z12display_menuv+0x70>)
     6f2:	4798      	blx	r3
	usb0.xprint( "  7: Send FD extended message with ID: 0x10000096 and 64 byte data 128 to 191. \r\n");
     6f4:	4911      	ldr	r1, [pc, #68]	; (73c <_Z12display_menuv+0x94>)
     6f6:	4807      	ldr	r0, [pc, #28]	; (714 <_Z12display_menuv+0x6c>)
     6f8:	4b07      	ldr	r3, [pc, #28]	; (718 <_Z12display_menuv+0x70>)
     6fa:	4798      	blx	r3
	usb0.xprint( "  a: Send normal standard message with ID: 0x469 and 8 byte data 0 to 7. \r\n");
     6fc:	4910      	ldr	r1, [pc, #64]	; (740 <_Z12display_menuv+0x98>)
     6fe:	4805      	ldr	r0, [pc, #20]	; (714 <_Z12display_menuv+0x6c>)
     700:	4b05      	ldr	r3, [pc, #20]	; (718 <_Z12display_menuv+0x70>)
     702:	4798      	blx	r3
	usb0.xprint( "  h: Display menu \r\n\r\n");
     704:	490f      	ldr	r1, [pc, #60]	; (744 <_Z12display_menuv+0x9c>)
     706:	4803      	ldr	r0, [pc, #12]	; (714 <_Z12display_menuv+0x6c>)
     708:	4b03      	ldr	r3, [pc, #12]	; (718 <_Z12display_menuv+0x70>)
     70a:	4798      	blx	r3
     70c:	bf00      	nop
     70e:	bd80      	pop	{r7, pc}
     710:	00004d54 	.word	0x00004d54
     714:	20000558 	.word	0x20000558
     718:	00000a61 	.word	0x00000a61
     71c:	00004d60 	.word	0x00004d60
     720:	00004d7c 	.word	0x00004d7c
     724:	00004dbc 	.word	0x00004dbc
     728:	00004dfc 	.word	0x00004dfc
     72c:	00004e48 	.word	0x00004e48
     730:	00004e98 	.word	0x00004e98
     734:	00004edc 	.word	0x00004edc
     738:	00004f20 	.word	0x00004f20
     73c:	00004f70 	.word	0x00004f70
     740:	00004fc4 	.word	0x00004fc4
     744:	00005010 	.word	0x00005010

00000748 <_Z41__static_initialization_and_destruction_0ii>:
     748:	b580      	push	{r7, lr}
     74a:	b082      	sub	sp, #8
     74c:	af00      	add	r7, sp, #0
     74e:	6078      	str	r0, [r7, #4]
     750:	6039      	str	r1, [r7, #0]
     752:	687b      	ldr	r3, [r7, #4]
     754:	2b01      	cmp	r3, #1
     756:	d10c      	bne.n	772 <_Z41__static_initialization_and_destruction_0ii+0x2a>
     758:	683b      	ldr	r3, [r7, #0]
     75a:	f64f 72ff 	movw	r2, #65535	; 0xffff
     75e:	4293      	cmp	r3, r2
     760:	d107      	bne.n	772 <_Z41__static_initialization_and_destruction_0ii+0x2a>
	USB_CDC_Class	usb0;
     762:	4806      	ldr	r0, [pc, #24]	; (77c <_Z41__static_initialization_and_destruction_0ii+0x34>)
     764:	4b06      	ldr	r3, [pc, #24]	; (780 <_Z41__static_initialization_and_destruction_0ii+0x38>)
     766:	4798      	blx	r3
     768:	4a06      	ldr	r2, [pc, #24]	; (784 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
     76a:	4907      	ldr	r1, [pc, #28]	; (788 <_Z41__static_initialization_and_destruction_0ii+0x40>)
     76c:	4803      	ldr	r0, [pc, #12]	; (77c <_Z41__static_initialization_and_destruction_0ii+0x34>)
     76e:	4b07      	ldr	r3, [pc, #28]	; (78c <_Z41__static_initialization_and_destruction_0ii+0x44>)
     770:	4798      	blx	r3
     772:	bf00      	nop
     774:	3708      	adds	r7, #8
     776:	46bd      	mov	sp, r7
     778:	bd80      	pop	{r7, pc}
     77a:	bf00      	nop
     77c:	20000558 	.word	0x20000558
     780:	00000859 	.word	0x00000859
     784:	20000000 	.word	0x20000000
     788:	00000a45 	.word	0x00000a45
     78c:	00004889 	.word	0x00004889

00000790 <_GLOBAL__sub_I_usb0>:
     790:	b580      	push	{r7, lr}
     792:	af00      	add	r7, sp, #0
     794:	f64f 71ff 	movw	r1, #65535	; 0xffff
     798:	2001      	movs	r0, #1
     79a:	4b01      	ldr	r3, [pc, #4]	; (7a0 <_GLOBAL__sub_I_usb0+0x10>)
     79c:	4798      	blx	r3
     79e:	bd80      	pop	{r7, pc}
     7a0:	00000749 	.word	0x00000749

000007a4 <_ZL12cb_bulk_readh13usb_xfer_codem>:

/**
 * \brief Callback invoked when bulk OUT data received
 */
static bool cb_bulk_read(const uint8_t ep, const enum usb_xfer_code rc, const uint32_t count)
{
     7a4:	b580      	push	{r7, lr}
     7a6:	b082      	sub	sp, #8
     7a8:	af00      	add	r7, sp, #0
     7aa:	4603      	mov	r3, r0
     7ac:	603a      	str	r2, [r7, #0]
     7ae:	71fb      	strb	r3, [r7, #7]
     7b0:	460b      	mov	r3, r1
     7b2:	71bb      	strb	r3, [r7, #6]
	//cdcdf_acm_write((uint8_t *)usbd_cdc_buffer, count);
	//ptrUSBClass->write_buffer(count);
	//ptrUSBClass->GetLastChar();
	//bool done=true;
	ptrUSBClass->setLastChar();
     7b4:	4b07      	ldr	r3, [pc, #28]	; (7d4 <_ZL12cb_bulk_readh13usb_xfer_codem+0x30>)
     7b6:	681b      	ldr	r3, [r3, #0]
     7b8:	4618      	mov	r0, r3
     7ba:	4b07      	ldr	r3, [pc, #28]	; (7d8 <_ZL12cb_bulk_readh13usb_xfer_codem+0x34>)
     7bc:	4798      	blx	r3
	ptrUSBClass->setRxDone();
     7be:	4b05      	ldr	r3, [pc, #20]	; (7d4 <_ZL12cb_bulk_readh13usb_xfer_codem+0x30>)
     7c0:	681b      	ldr	r3, [r3, #0]
     7c2:	4618      	mov	r0, r3
     7c4:	4b05      	ldr	r3, [pc, #20]	; (7dc <_ZL12cb_bulk_readh13usb_xfer_codem+0x38>)
     7c6:	4798      	blx	r3
	//ptrUSBClass->rxDone=done;
	/* No error. */
	return false;
     7c8:	2300      	movs	r3, #0
}
     7ca:	4618      	mov	r0, r3
     7cc:	3708      	adds	r7, #8
     7ce:	46bd      	mov	sp, r7
     7d0:	bd80      	pop	{r7, pc}
     7d2:	bf00      	nop
     7d4:	20000640 	.word	0x20000640
     7d8:	00000a25 	.word	0x00000a25
     7dc:	000009fd 	.word	0x000009fd

000007e0 <_ZL13cb_bulk_writeh13usb_xfer_codem>:

/**
 * \brief Callback invoked when bulk IN data received
 */
static bool cb_bulk_write(const uint8_t ep, const enum usb_xfer_code rc, const uint32_t count)
{
     7e0:	b580      	push	{r7, lr}
     7e2:	b082      	sub	sp, #8
     7e4:	af00      	add	r7, sp, #0
     7e6:	4603      	mov	r3, r0
     7e8:	603a      	str	r2, [r7, #0]
     7ea:	71fb      	strb	r3, [r7, #7]
     7ec:	460b      	mov	r3, r1
     7ee:	71bb      	strb	r3, [r7, #6]
	/* Echo data. */
	//cdcdf_acm_read((uint8_t *)usbd_cdc_buffer, sizeof(usbd_cdc_buffer));
	//volatile bool *done=ptrUSBClass->pTx;
	//*done=true;
	
	ptrUSBClass->setTxDone();
     7f0:	4b04      	ldr	r3, [pc, #16]	; (804 <_ZL13cb_bulk_writeh13usb_xfer_codem+0x24>)
     7f2:	681b      	ldr	r3, [r3, #0]
     7f4:	4618      	mov	r0, r3
     7f6:	4b04      	ldr	r3, [pc, #16]	; (808 <_ZL13cb_bulk_writeh13usb_xfer_codem+0x28>)
     7f8:	4798      	blx	r3
	//ptrUSBClass->GetLastChar();
	//ptrUSBClass->txDone=done;
	

	/* No error. */
	return false;
     7fa:	2300      	movs	r3, #0
}
     7fc:	4618      	mov	r0, r3
     7fe:	3708      	adds	r7, #8
     800:	46bd      	mov	sp, r7
     802:	bd80      	pop	{r7, pc}
     804:	20000640 	.word	0x20000640
     808:	000009d5 	.word	0x000009d5

0000080c <_ZL10cb_state_c22usb_cdc_control_signal>:

static bool cb_state_c(usb_cdc_control_signal_t state)
{
     80c:	b580      	push	{r7, lr}
     80e:	b082      	sub	sp, #8
     810:	af00      	add	r7, sp, #0
     812:	80b8      	strh	r0, [r7, #4]
	if (state.rs232.DTR) {
     814:	793b      	ldrb	r3, [r7, #4]
     816:	f003 0301 	and.w	r3, r3, #1
     81a:	b2db      	uxtb	r3, r3
     81c:	2b00      	cmp	r3, #0
     81e:	d00c      	beq.n	83a <_ZL10cb_state_c22usb_cdc_control_signal+0x2e>
		/* Callbacks must be registered after endpoint allocation */
		cdcdf_acm_register_callback(CDCDF_ACM_CB_READ, (FUNC_PTR)cb_bulk_read);
     820:	4908      	ldr	r1, [pc, #32]	; (844 <_ZL10cb_state_c22usb_cdc_control_signal+0x38>)
     822:	2000      	movs	r0, #0
     824:	4b08      	ldr	r3, [pc, #32]	; (848 <_ZL10cb_state_c22usb_cdc_control_signal+0x3c>)
     826:	4798      	blx	r3
		cdcdf_acm_register_callback(CDCDF_ACM_CB_WRITE, (FUNC_PTR)cb_bulk_write);
     828:	4908      	ldr	r1, [pc, #32]	; (84c <_ZL10cb_state_c22usb_cdc_control_signal+0x40>)
     82a:	2001      	movs	r0, #1
     82c:	4b06      	ldr	r3, [pc, #24]	; (848 <_ZL10cb_state_c22usb_cdc_control_signal+0x3c>)
     82e:	4798      	blx	r3
		/* Start Rx */
		//ptrUSBClass->read_char(1);
		ptrUSBClass->setTxDone();
     830:	4b07      	ldr	r3, [pc, #28]	; (850 <_ZL10cb_state_c22usb_cdc_control_signal+0x44>)
     832:	681b      	ldr	r3, [r3, #0]
     834:	4618      	mov	r0, r3
     836:	4b07      	ldr	r3, [pc, #28]	; (854 <_ZL10cb_state_c22usb_cdc_control_signal+0x48>)
     838:	4798      	blx	r3
		//ptrUSBClass->setTxDone();
		//ptrUSBClass->txDone=done;
	}

	/* No error. */
	return false;
     83a:	2300      	movs	r3, #0
}
     83c:	4618      	mov	r0, r3
     83e:	3708      	adds	r7, #8
     840:	46bd      	mov	sp, r7
     842:	bd80      	pop	{r7, pc}
     844:	000007a5 	.word	0x000007a5
     848:	00003fcd 	.word	0x00003fcd
     84c:	000007e1 	.word	0x000007e1
     850:	20000640 	.word	0x20000640
     854:	000009d5 	.word	0x000009d5

00000858 <_ZN13USB_CDC_ClassC1Ev>:

// default constructor
USB_CDC_Class::USB_CDC_Class()
     858:	b480      	push	{r7}
     85a:	b083      	sub	sp, #12
     85c:	af00      	add	r7, sp, #0
     85e:	6078      	str	r0, [r7, #4]
{
	descUSB=desc;
     860:	687b      	ldr	r3, [r7, #4]
     862:	4a08      	ldr	r2, [pc, #32]	; (884 <_ZN13USB_CDC_ClassC1Ev+0x2c>)
     864:	605a      	str	r2, [r3, #4]
	ptr_cdc_buffer=usbd_cdc_buffer;
     866:	687b      	ldr	r3, [r7, #4]
     868:	4a07      	ldr	r2, [pc, #28]	; (888 <_ZN13USB_CDC_ClassC1Ev+0x30>)
     86a:	609a      	str	r2, [r3, #8]
	ptrUSBClass=this;
     86c:	4a07      	ldr	r2, [pc, #28]	; (88c <_ZN13USB_CDC_ClassC1Ev+0x34>)
     86e:	687b      	ldr	r3, [r7, #4]
     870:	6013      	str	r3, [r2, #0]
	pUSBClass=this;
     872:	687b      	ldr	r3, [r7, #4]
     874:	687a      	ldr	r2, [r7, #4]
     876:	665a      	str	r2, [r3, #100]	; 0x64



} //USB_CDC_Class
     878:	687b      	ldr	r3, [r7, #4]
     87a:	4618      	mov	r0, r3
     87c:	370c      	adds	r7, #12
     87e:	46bd      	mov	sp, r7
     880:	bc80      	pop	{r7}
     882:	4770      	bx	lr
     884:	20000088 	.word	0x20000088
     888:	200005c0 	.word	0x200005c0
     88c:	20000640 	.word	0x20000640

00000890 <_ZN13USB_CDC_Class4initEv>:
} //USB_CDC_Class

// default destructor


void USB_CDC_Class::init(){
     890:	b580      	push	{r7, lr}
     892:	b082      	sub	sp, #8
     894:	af00      	add	r7, sp, #0
     896:	6078      	str	r0, [r7, #4]
	usbdc_init(usb_ctrl_buffer);
     898:	4815      	ldr	r0, [pc, #84]	; (8f0 <_ZN13USB_CDC_Class4initEv+0x60>)
     89a:	4b16      	ldr	r3, [pc, #88]	; (8f4 <_ZN13USB_CDC_Class4initEv+0x64>)
     89c:	4798      	blx	r3

	/* usbdc_register_funcion inside */
	cdcdf_acm_init();
     89e:	4b16      	ldr	r3, [pc, #88]	; (8f8 <_ZN13USB_CDC_Class4initEv+0x68>)
     8a0:	4798      	blx	r3

	usbdc_start(desc);
     8a2:	4816      	ldr	r0, [pc, #88]	; (8fc <_ZN13USB_CDC_Class4initEv+0x6c>)
     8a4:	4b16      	ldr	r3, [pc, #88]	; (900 <_ZN13USB_CDC_Class4initEv+0x70>)
     8a6:	4798      	blx	r3
	usbdc_attach();
     8a8:	4b16      	ldr	r3, [pc, #88]	; (904 <_ZN13USB_CDC_Class4initEv+0x74>)
     8aa:	4798      	blx	r3
	while (!isUSBEnabled()){};
     8ac:	6878      	ldr	r0, [r7, #4]
     8ae:	4b16      	ldr	r3, [pc, #88]	; (908 <_ZN13USB_CDC_Class4initEv+0x78>)
     8b0:	4798      	blx	r3
     8b2:	4603      	mov	r3, r0
     8b4:	f083 0301 	eor.w	r3, r3, #1
     8b8:	b2db      	uxtb	r3, r3
     8ba:	2b00      	cmp	r3, #0
     8bc:	d000      	beq.n	8c0 <_ZN13USB_CDC_Class4initEv+0x30>
     8be:	e7f5      	b.n	8ac <_ZN13USB_CDC_Class4initEv+0x1c>
	cdcdf_acm_register_callback(CDCDF_ACM_CB_STATE_C, (FUNC_PTR)cb_state_c);
     8c0:	4912      	ldr	r1, [pc, #72]	; (90c <_ZN13USB_CDC_Class4initEv+0x7c>)
     8c2:	2003      	movs	r0, #3
     8c4:	4b12      	ldr	r3, [pc, #72]	; (910 <_ZN13USB_CDC_Class4initEv+0x80>)
     8c6:	4798      	blx	r3
	cdcdf_acm_register_callback(CDCDF_ACM_CB_READ, (FUNC_PTR)cb_bulk_read);
     8c8:	4912      	ldr	r1, [pc, #72]	; (914 <_ZN13USB_CDC_Class4initEv+0x84>)
     8ca:	2000      	movs	r0, #0
     8cc:	4b10      	ldr	r3, [pc, #64]	; (910 <_ZN13USB_CDC_Class4initEv+0x80>)
     8ce:	4798      	blx	r3
	cdcdf_acm_register_callback(CDCDF_ACM_CB_WRITE, (FUNC_PTR)cb_bulk_write);
     8d0:	4911      	ldr	r1, [pc, #68]	; (918 <_ZN13USB_CDC_Class4initEv+0x88>)
     8d2:	2001      	movs	r0, #1
     8d4:	4b0e      	ldr	r3, [pc, #56]	; (910 <_ZN13USB_CDC_Class4initEv+0x80>)
     8d6:	4798      	blx	r3
	txDone=true;
     8d8:	687b      	ldr	r3, [r7, #4]
     8da:	2201      	movs	r2, #1
     8dc:	f883 2020 	strb.w	r2, [r3, #32]
	rxDone=true;
     8e0:	687b      	ldr	r3, [r7, #4]
     8e2:	2201      	movs	r2, #1
     8e4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	
	
}
     8e8:	bf00      	nop
     8ea:	3708      	adds	r7, #8
     8ec:	46bd      	mov	sp, r7
     8ee:	bd80      	pop	{r7, pc}
     8f0:	20000600 	.word	0x20000600
     8f4:	00004631 	.word	0x00004631
     8f8:	00003f1d 	.word	0x00003f1d
     8fc:	20000088 	.word	0x20000088
     900:	000046a1 	.word	0x000046a1
     904:	000046d5 	.word	0x000046d5
     908:	000009b9 	.word	0x000009b9
     90c:	0000080d 	.word	0x0000080d
     910:	00003fcd 	.word	0x00003fcd
     914:	000007a5 	.word	0x000007a5
     918:	000007e1 	.word	0x000007e1

0000091c <_ZN13USB_CDC_Class5writeEPhm>:
int32_t USB_CDC_Class::enable(){
	cdcdf_acm_init();
	return 0;
}

int32_t  USB_CDC_Class::write( uint8_t *p, uint32_t n){
     91c:	b580      	push	{r7, lr}
     91e:	b086      	sub	sp, #24
     920:	af00      	add	r7, sp, #0
     922:	60f8      	str	r0, [r7, #12]
     924:	60b9      	str	r1, [r7, #8]
     926:	607a      	str	r2, [r7, #4]
	int32_t w;

	while(!isUSBEnabled());
     928:	68f8      	ldr	r0, [r7, #12]
     92a:	4b0e      	ldr	r3, [pc, #56]	; (964 <_ZN13USB_CDC_Class5writeEPhm+0x48>)
     92c:	4798      	blx	r3
     92e:	4603      	mov	r3, r0
     930:	f083 0301 	eor.w	r3, r3, #1
     934:	b2db      	uxtb	r3, r3
     936:	2b00      	cmp	r3, #0
     938:	d000      	beq.n	93c <_ZN13USB_CDC_Class5writeEPhm+0x20>
     93a:	e7f5      	b.n	928 <_ZN13USB_CDC_Class5writeEPhm+0xc>
	while(!txDone);
     93c:	68fb      	ldr	r3, [r7, #12]
     93e:	f893 3020 	ldrb.w	r3, [r3, #32]
     942:	2b00      	cmp	r3, #0
     944:	d100      	bne.n	948 <_ZN13USB_CDC_Class5writeEPhm+0x2c>
     946:	e7f9      	b.n	93c <_ZN13USB_CDC_Class5writeEPhm+0x20>
	txDone=false;
     948:	68fb      	ldr	r3, [r7, #12]
     94a:	2200      	movs	r2, #0
     94c:	f883 2020 	strb.w	r2, [r3, #32]
	w=cdcdf_acm_write(p,n);
     950:	6879      	ldr	r1, [r7, #4]
     952:	68b8      	ldr	r0, [r7, #8]
     954:	4b04      	ldr	r3, [pc, #16]	; (968 <_ZN13USB_CDC_Class5writeEPhm+0x4c>)
     956:	4798      	blx	r3
     958:	6178      	str	r0, [r7, #20]
	
	return w;
     95a:	697b      	ldr	r3, [r7, #20]
	
}
     95c:	4618      	mov	r0, r3
     95e:	3718      	adds	r7, #24
     960:	46bd      	mov	sp, r7
     962:	bd80      	pop	{r7, pc}
     964:	000009b9 	.word	0x000009b9
     968:	00003fa5 	.word	0x00003fa5

0000096c <_ZN13USB_CDC_Class4readEPhm>:
	{
		while(!rxDone);
	}
	return  r;
}
int32_t  USB_CDC_Class::read(uint8_t * p, uint32_t n){
     96c:	b580      	push	{r7, lr}
     96e:	b086      	sub	sp, #24
     970:	af00      	add	r7, sp, #0
     972:	60f8      	str	r0, [r7, #12]
     974:	60b9      	str	r1, [r7, #8]
     976:	607a      	str	r2, [r7, #4]
	int32_t r;
	char_buffer=p;
     978:	68fb      	ldr	r3, [r7, #12]
     97a:	68ba      	ldr	r2, [r7, #8]
     97c:	60da      	str	r2, [r3, #12]
	while(!isUSBEnabled());
     97e:	68f8      	ldr	r0, [r7, #12]
     980:	4b0b      	ldr	r3, [pc, #44]	; (9b0 <_ZN13USB_CDC_Class4readEPhm+0x44>)
     982:	4798      	blx	r3
     984:	4603      	mov	r3, r0
     986:	f083 0301 	eor.w	r3, r3, #1
     98a:	b2db      	uxtb	r3, r3
     98c:	2b00      	cmp	r3, #0
     98e:	d000      	beq.n	992 <_ZN13USB_CDC_Class4readEPhm+0x26>
     990:	e7f5      	b.n	97e <_ZN13USB_CDC_Class4readEPhm+0x12>
	//while(!rxDone);
	rxDone=false;
     992:	68fb      	ldr	r3, [r7, #12]
     994:	2200      	movs	r2, #0
     996:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	r=cdcdf_acm_read(p, n);
     99a:	6879      	ldr	r1, [r7, #4]
     99c:	68b8      	ldr	r0, [r7, #8]
     99e:	4b05      	ldr	r3, [pc, #20]	; (9b4 <_ZN13USB_CDC_Class4readEPhm+0x48>)
     9a0:	4798      	blx	r3
     9a2:	6178      	str	r0, [r7, #20]
	

	return  r;
     9a4:	697b      	ldr	r3, [r7, #20]
}
     9a6:	4618      	mov	r0, r3
     9a8:	3718      	adds	r7, #24
     9aa:	46bd      	mov	sp, r7
     9ac:	bd80      	pop	{r7, pc}
     9ae:	bf00      	nop
     9b0:	000009b9 	.word	0x000009b9
     9b4:	00003f7d 	.word	0x00003f7d

000009b8 <_ZN13USB_CDC_Class12isUSBEnabledEv>:
}
void USB_CDC_Class::disable(void){
cdcdf_acm_deinit();
	
}
bool USB_CDC_Class::isUSBEnabled(void){
     9b8:	b580      	push	{r7, lr}
     9ba:	b082      	sub	sp, #8
     9bc:	af00      	add	r7, sp, #0
     9be:	6078      	str	r0, [r7, #4]
	

	return cdcdf_acm_is_enabled();
     9c0:	4b03      	ldr	r3, [pc, #12]	; (9d0 <_ZN13USB_CDC_Class12isUSBEnabledEv+0x18>)
     9c2:	4798      	blx	r3
     9c4:	4603      	mov	r3, r0
	
}
     9c6:	4618      	mov	r0, r3
     9c8:	3708      	adds	r7, #8
     9ca:	46bd      	mov	sp, r7
     9cc:	bd80      	pop	{r7, pc}
     9ce:	bf00      	nop
     9d0:	00004019 	.word	0x00004019

000009d4 <_ZN13USB_CDC_Class9setTxDoneEv>:
bool  USB_CDC_Class::setTxDone(void){
     9d4:	b480      	push	{r7}
     9d6:	b083      	sub	sp, #12
     9d8:	af00      	add	r7, sp, #0
     9da:	6078      	str	r0, [r7, #4]
	txDone=true;
     9dc:	687b      	ldr	r3, [r7, #4]
     9de:	2201      	movs	r2, #1
     9e0:	f883 2020 	strb.w	r2, [r3, #32]
	txDone=true;
     9e4:	687b      	ldr	r3, [r7, #4]
     9e6:	2201      	movs	r2, #1
     9e8:	f883 2020 	strb.w	r2, [r3, #32]
	return txDone;
     9ec:	687b      	ldr	r3, [r7, #4]
     9ee:	f893 3020 	ldrb.w	r3, [r3, #32]
}
     9f2:	4618      	mov	r0, r3
     9f4:	370c      	adds	r7, #12
     9f6:	46bd      	mov	sp, r7
     9f8:	bc80      	pop	{r7}
     9fa:	4770      	bx	lr

000009fc <_ZN13USB_CDC_Class9setRxDoneEv>:
bool  USB_CDC_Class::setRxDone(void){
     9fc:	b480      	push	{r7}
     9fe:	b083      	sub	sp, #12
     a00:	af00      	add	r7, sp, #0
     a02:	6078      	str	r0, [r7, #4]
	rxDone=true;
     a04:	687b      	ldr	r3, [r7, #4]
     a06:	2201      	movs	r2, #1
     a08:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	rxDone=true;
     a0c:	687b      	ldr	r3, [r7, #4]
     a0e:	2201      	movs	r2, #1
     a10:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	return rxDone;
     a14:	687b      	ldr	r3, [r7, #4]
     a16:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
}
     a1a:	4618      	mov	r0, r3
     a1c:	370c      	adds	r7, #12
     a1e:	46bd      	mov	sp, r7
     a20:	bc80      	pop	{r7}
     a22:	4770      	bx	lr

00000a24 <_ZN13USB_CDC_Class11setLastCharEv>:
char USB_CDC_Class::getLastChar(){
	
	return (char)byte;
	
}
uint8_t USB_CDC_Class::setLastChar(){
     a24:	b480      	push	{r7}
     a26:	b083      	sub	sp, #12
     a28:	af00      	add	r7, sp, #0
     a2a:	6078      	str	r0, [r7, #4]
	byte=*char_buffer;
     a2c:	687b      	ldr	r3, [r7, #4]
     a2e:	68db      	ldr	r3, [r3, #12]
     a30:	781a      	ldrb	r2, [r3, #0]
     a32:	687b      	ldr	r3, [r7, #4]
     a34:	741a      	strb	r2, [r3, #16]

	return byte;
     a36:	687b      	ldr	r3, [r7, #4]
     a38:	7c1b      	ldrb	r3, [r3, #16]
	
}
     a3a:	4618      	mov	r0, r3
     a3c:	370c      	adds	r7, #12
     a3e:	46bd      	mov	sp, r7
     a40:	bc80      	pop	{r7}
     a42:	4770      	bx	lr

00000a44 <_ZN13USB_CDC_ClassD1Ev>:


// default destructor
USB_CDC_Class::~USB_CDC_Class()
     a44:	b580      	push	{r7, lr}
     a46:	b082      	sub	sp, #8
     a48:	af00      	add	r7, sp, #0
     a4a:	6078      	str	r0, [r7, #4]
{
	cdcdf_acm_deinit();
     a4c:	4b03      	ldr	r3, [pc, #12]	; (a5c <_ZN13USB_CDC_ClassD1Ev+0x18>)
     a4e:	4798      	blx	r3
} //~USB_CDC_Class
     a50:	687b      	ldr	r3, [r7, #4]
     a52:	4618      	mov	r0, r3
     a54:	3708      	adds	r7, #8
     a56:	46bd      	mov	sp, r7
     a58:	bd80      	pop	{r7, pc}
     a5a:	bf00      	nop
     a5c:	00003f61 	.word	0x00003f61

00000a60 <_ZN13USB_CDC_Class6xprintEPKc>:
void USB_CDC_Class::xprint(const char *message){
     a60:	b580      	push	{r7, lr}
     a62:	b0c6      	sub	sp, #280	; 0x118
     a64:	af00      	add	r7, sp, #0
     a66:	1d3b      	adds	r3, r7, #4
     a68:	6018      	str	r0, [r3, #0]
     a6a:	463b      	mov	r3, r7
     a6c:	6019      	str	r1, [r3, #0]

	uint32_t s;
	char *p=(char *)message;
     a6e:	463b      	mov	r3, r7
     a70:	681b      	ldr	r3, [r3, #0]
     a72:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
	s=strlen(p);
     a76:	f8d7 0114 	ldr.w	r0, [r7, #276]	; 0x114
     a7a:	4b18      	ldr	r3, [pc, #96]	; (adc <_ZN13USB_CDC_Class6xprintEPKc+0x7c>)
     a7c:	4798      	blx	r3
     a7e:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
	uint8_t	chain[256];

	
	for (uint8_t i=0;i<s;i++){
     a82:	2300      	movs	r3, #0
     a84:	f887 3113 	strb.w	r3, [r7, #275]	; 0x113
     a88:	f897 2113 	ldrb.w	r2, [r7, #275]	; 0x113
     a8c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
     a90:	429a      	cmp	r2, r3
     a92:	d212      	bcs.n	aba <_ZN13USB_CDC_Class6xprintEPKc+0x5a>
		chain[i]=*p;
     a94:	f897 3113 	ldrb.w	r3, [r7, #275]	; 0x113
     a98:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
     a9c:	7811      	ldrb	r1, [r2, #0]
     a9e:	f107 0208 	add.w	r2, r7, #8
     aa2:	54d1      	strb	r1, [r2, r3]
		p++;
     aa4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
     aa8:	3301      	adds	r3, #1
     aaa:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
	for (uint8_t i=0;i<s;i++){
     aae:	f897 3113 	ldrb.w	r3, [r7, #275]	; 0x113
     ab2:	3301      	adds	r3, #1
     ab4:	f887 3113 	strb.w	r3, [r7, #275]	; 0x113
     ab8:	e7e6      	b.n	a88 <_ZN13USB_CDC_Class6xprintEPKc+0x28>
	}

	//uint8_t	pArray[s]=*string;
	uint8_t *ptr=(uint8_t*)chain;
     aba:	f107 0308 	add.w	r3, r7, #8
     abe:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
	
	write(ptr,s);
     ac2:	1d3b      	adds	r3, r7, #4
     ac4:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
     ac8:	f8d7 1108 	ldr.w	r1, [r7, #264]	; 0x108
     acc:	6818      	ldr	r0, [r3, #0]
     ace:	4b04      	ldr	r3, [pc, #16]	; (ae0 <_ZN13USB_CDC_Class6xprintEPKc+0x80>)
     ad0:	4798      	blx	r3
}
     ad2:	bf00      	nop
     ad4:	f507 778c 	add.w	r7, r7, #280	; 0x118
     ad8:	46bd      	mov	sp, r7
     ada:	bd80      	pop	{r7, pc}
     adc:	00004ac1 	.word	0x00004ac1
     ae0:	0000091d 	.word	0x0000091d

00000ae4 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
     ae4:	b508      	push	{r3, lr}
	system_init();
     ae6:	4b02      	ldr	r3, [pc, #8]	; (af0 <atmel_start_init+0xc>)
     ae8:	4798      	blx	r3
	usb_init();
     aea:	4b02      	ldr	r3, [pc, #8]	; (af4 <atmel_start_init+0x10>)
     aec:	4798      	blx	r3
     aee:	bd08      	pop	{r3, pc}
     af0:	00000fdd 	.word	0x00000fdd
     af4:	00004861 	.word	0x00004861

00000af8 <EVENT_SYSTEM_0_init>:
struct i2c_m_async_desc I2C_1;

struct i2c_m_async_desc I2C_EEPROM;

void EVENT_SYSTEM_0_init(void)
{
     af8:	b508      	push	{r3, lr}
}

static inline void hri_gclk_write_PCHCTRL_reg(const void *const hw, uint8_t index, hri_gclk_pchctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->PCHCTRL[index].reg = data;
     afa:	2240      	movs	r2, #64	; 0x40
     afc:	4b05      	ldr	r3, [pc, #20]	; (b14 <EVENT_SYSTEM_0_init+0x1c>)
     afe:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
}

static inline void hri_mclk_set_APBBMASK_EVSYS_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_EVSYS;
     b02:	4a05      	ldr	r2, [pc, #20]	; (b18 <EVENT_SYSTEM_0_init+0x20>)
     b04:	6993      	ldr	r3, [r2, #24]
     b06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
     b0a:	6193      	str	r3, [r2, #24]
	hri_gclk_write_PCHCTRL_reg(GCLK, EVSYS_GCLK_ID_0, CONF_GCLK_EVSYS_CHANNEL_0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));

	hri_mclk_set_APBBMASK_EVSYS_bit(MCLK);

	event_system_init();
     b0c:	4b03      	ldr	r3, [pc, #12]	; (b1c <EVENT_SYSTEM_0_init+0x24>)
     b0e:	4798      	blx	r3
     b10:	bd08      	pop	{r3, pc}
     b12:	bf00      	nop
     b14:	40001c00 	.word	0x40001c00
     b18:	40000800 	.word	0x40000800
     b1c:	000012a1 	.word	0x000012a1

00000b20 <SPI_LTC2983_PORT_init>:
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = ~data;
}

static inline void hri_port_clear_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     b20:	4b28      	ldr	r3, [pc, #160]	; (bc4 <SPI_LTC2983_PORT_init+0xa4>)
     b22:	2210      	movs	r2, #16
     b24:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     b26:	609a      	str	r2, [r3, #8]

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     b28:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     b2c:	629a      	str	r2, [r3, #40]	; 0x28
     b2e:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
     b32:	6299      	str	r1, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     b34:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
	tmp &= ~PORT_PINCFG_PMUXEN;
     b38:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     b3c:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     b40:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     b44:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     b48:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     b4c:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     b50:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     b54:	2220      	movs	r2, #32
     b56:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     b58:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     b5a:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     b5e:	629a      	str	r2, [r3, #40]	; 0x28
     b60:	6299      	str	r1, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     b62:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
	tmp &= ~PORT_PINCFG_PMUXEN;
     b66:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     b6a:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     b6e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     b72:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     b76:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     b7a:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     b7e:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     b82:	2240      	movs	r2, #64	; 0x40
     b84:	605a      	str	r2, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     b86:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     b8a:	f502 3200 	add.w	r2, r2, #131072	; 0x20000
     b8e:	629a      	str	r2, [r3, #40]	; 0x28
     b90:	4a0d      	ldr	r2, [pc, #52]	; (bc8 <SPI_LTC2983_PORT_init+0xa8>)
     b92:	629a      	str	r2, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     b94:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
     b98:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     b9c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     ba0:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
	tmp &= ~PORT_PINCFG_PMUXEN;
     ba4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     ba8:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     bac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     bb0:	f893 2033 	ldrb.w	r2, [r3, #51]	; 0x33
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     bb4:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     bb8:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     bbc:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
     bc0:	4770      	bx	lr
     bc2:	bf00      	nop
     bc4:	41008000 	.word	0x41008000
     bc8:	c0020000 	.word	0xc0020000

00000bcc <SPI_LTC2983_CLOCK_init>:
     bcc:	4b06      	ldr	r3, [pc, #24]	; (be8 <SPI_LTC2983_CLOCK_init+0x1c>)
     bce:	2240      	movs	r2, #64	; 0x40
     bd0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
     bd4:	2243      	movs	r2, #67	; 0x43
     bd6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_SERCOM0;
     bda:	4a04      	ldr	r2, [pc, #16]	; (bec <SPI_LTC2983_CLOCK_init+0x20>)
     bdc:	6953      	ldr	r3, [r2, #20]
     bde:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
     be2:	6153      	str	r3, [r2, #20]
     be4:	4770      	bx	lr
     be6:	bf00      	nop
     be8:	40001c00 	.word	0x40001c00
     bec:	40000800 	.word	0x40000800

00000bf0 <SPI_LTC2983_init>:

	hri_mclk_set_APBAMASK_SERCOM0_bit(MCLK);
}

void SPI_LTC2983_init(void)
{
     bf0:	b508      	push	{r3, lr}
	SPI_LTC2983_CLOCK_init();
     bf2:	4b04      	ldr	r3, [pc, #16]	; (c04 <SPI_LTC2983_init+0x14>)
     bf4:	4798      	blx	r3
	spi_m_sync_init(&SPI_LTC2983, SERCOM0);
     bf6:	4904      	ldr	r1, [pc, #16]	; (c08 <SPI_LTC2983_init+0x18>)
     bf8:	4804      	ldr	r0, [pc, #16]	; (c0c <SPI_LTC2983_init+0x1c>)
     bfa:	4b05      	ldr	r3, [pc, #20]	; (c10 <SPI_LTC2983_init+0x20>)
     bfc:	4798      	blx	r3
	SPI_LTC2983_PORT_init();
     bfe:	4b05      	ldr	r3, [pc, #20]	; (c14 <SPI_LTC2983_init+0x24>)
     c00:	4798      	blx	r3
     c02:	bd08      	pop	{r3, pc}
     c04:	00000bcd 	.word	0x00000bcd
     c08:	40003000 	.word	0x40003000
     c0c:	20000a14 	.word	0x20000a14
     c10:	000013b1 	.word	0x000013b1
     c14:	00000b21 	.word	0x00000b21

00000c18 <I2C_1_PORT_init>:
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     c18:	4b16      	ldr	r3, [pc, #88]	; (c74 <I2C_1_PORT_init+0x5c>)
     c1a:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
     c1e:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     c22:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     c26:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
	tmp &= ~PORT_PINCFG_PMUXEN;
     c2a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     c2e:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     c32:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     c36:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     c3a:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     c3e:	f042 0202 	orr.w	r2, r2, #2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     c42:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     c46:	f893 2051 	ldrb.w	r2, [r3, #81]	; 0x51
     c4a:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     c4e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     c52:	f893 2051 	ldrb.w	r2, [r3, #81]	; 0x51
	tmp &= ~PORT_PINCFG_PMUXEN;
     c56:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     c5a:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     c5e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     c62:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     c66:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     c6a:	f042 0220 	orr.w	r2, r2, #32
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     c6e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
     c72:	4770      	bx	lr
     c74:	41008000 	.word	0x41008000

00000c78 <I2C_1_CLOCK_init>:
     c78:	4b06      	ldr	r3, [pc, #24]	; (c94 <I2C_1_CLOCK_init+0x1c>)
     c7a:	2240      	movs	r2, #64	; 0x40
     c7c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
     c80:	2243      	movs	r2, #67	; 0x43
     c82:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_SERCOM1;
     c86:	4a04      	ldr	r2, [pc, #16]	; (c98 <I2C_1_CLOCK_init+0x20>)
     c88:	6953      	ldr	r3, [r2, #20]
     c8a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
     c8e:	6153      	str	r3, [r2, #20]
     c90:	4770      	bx	lr
     c92:	bf00      	nop
     c94:	40001c00 	.word	0x40001c00
     c98:	40000800 	.word	0x40000800

00000c9c <I2C_1_init>:

	hri_mclk_set_APBAMASK_SERCOM1_bit(MCLK);
}

void I2C_1_init(void)
{
     c9c:	b508      	push	{r3, lr}
	I2C_1_CLOCK_init();
     c9e:	4b04      	ldr	r3, [pc, #16]	; (cb0 <I2C_1_init+0x14>)
     ca0:	4798      	blx	r3
	i2c_m_async_init(&I2C_1, SERCOM1);
     ca2:	4904      	ldr	r1, [pc, #16]	; (cb4 <I2C_1_init+0x18>)
     ca4:	4804      	ldr	r0, [pc, #16]	; (cb8 <I2C_1_init+0x1c>)
     ca6:	4b05      	ldr	r3, [pc, #20]	; (cbc <I2C_1_init+0x20>)
     ca8:	4798      	blx	r3
	I2C_1_PORT_init();
     caa:	4b05      	ldr	r3, [pc, #20]	; (cc0 <I2C_1_init+0x24>)
     cac:	4798      	blx	r3
     cae:	bd08      	pop	{r3, pc}
     cb0:	00000c79 	.word	0x00000c79
     cb4:	40003400 	.word	0x40003400
     cb8:	200009d4 	.word	0x200009d4
     cbc:	00001345 	.word	0x00001345
     cc0:	00000c19 	.word	0x00000c19

00000cc4 <I2C_EEPROM_PORT_init>:
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     cc4:	4b16      	ldr	r3, [pc, #88]	; (d20 <I2C_EEPROM_PORT_init+0x5c>)
     cc6:	f893 2057 	ldrb.w	r2, [r3, #87]	; 0x57
     cca:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     cce:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     cd2:	f893 2057 	ldrb.w	r2, [r3, #87]	; 0x57
	tmp &= ~PORT_PINCFG_PMUXEN;
     cd6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     cda:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     cde:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     ce2:	f893 203b 	ldrb.w	r2, [r3, #59]	; 0x3b
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     ce6:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     cea:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     cee:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     cf2:	f893 2056 	ldrb.w	r2, [r3, #86]	; 0x56
     cf6:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     cfa:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     cfe:	f893 2056 	ldrb.w	r2, [r3, #86]	; 0x56
	tmp &= ~PORT_PINCFG_PMUXEN;
     d02:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     d06:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     d0a:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     d0e:	f893 203b 	ldrb.w	r2, [r3, #59]	; 0x3b
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     d12:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     d16:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     d1a:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
     d1e:	4770      	bx	lr
     d20:	41008000 	.word	0x41008000

00000d24 <I2C_EEPROM_CLOCK_init>:
     d24:	4b06      	ldr	r3, [pc, #24]	; (d40 <I2C_EEPROM_CLOCK_init+0x1c>)
     d26:	2240      	movs	r2, #64	; 0x40
     d28:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
     d2c:	2243      	movs	r2, #67	; 0x43
     d2e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}

static inline void hri_mclk_set_APBDMASK_SERCOM5_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM5;
     d32:	4a04      	ldr	r2, [pc, #16]	; (d44 <I2C_EEPROM_CLOCK_init+0x20>)
     d34:	6a13      	ldr	r3, [r2, #32]
     d36:	f043 0302 	orr.w	r3, r3, #2
     d3a:	6213      	str	r3, [r2, #32]
     d3c:	4770      	bx	lr
     d3e:	bf00      	nop
     d40:	40001c00 	.word	0x40001c00
     d44:	40000800 	.word	0x40000800

00000d48 <I2C_EEPROM_init>:

	hri_mclk_set_APBDMASK_SERCOM5_bit(MCLK);
}

void I2C_EEPROM_init(void)
{
     d48:	b508      	push	{r3, lr}
	I2C_EEPROM_CLOCK_init();
     d4a:	4b04      	ldr	r3, [pc, #16]	; (d5c <I2C_EEPROM_init+0x14>)
     d4c:	4798      	blx	r3
	i2c_m_async_init(&I2C_EEPROM, SERCOM5);
     d4e:	4904      	ldr	r1, [pc, #16]	; (d60 <I2C_EEPROM_init+0x18>)
     d50:	4804      	ldr	r0, [pc, #16]	; (d64 <I2C_EEPROM_init+0x1c>)
     d52:	4b05      	ldr	r3, [pc, #20]	; (d68 <I2C_EEPROM_init+0x20>)
     d54:	4798      	blx	r3
	I2C_EEPROM_PORT_init();
     d56:	4b05      	ldr	r3, [pc, #20]	; (d6c <I2C_EEPROM_init+0x24>)
     d58:	4798      	blx	r3
     d5a:	bd08      	pop	{r3, pc}
     d5c:	00000d25 	.word	0x00000d25
     d60:	43000400 	.word	0x43000400
     d64:	20000a44 	.word	0x20000a44
     d68:	00001345 	.word	0x00001345
     d6c:	00000cc5 	.word	0x00000cc5

00000d70 <SPI_Holt_PORT_init>:
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     d70:	4b2d      	ldr	r3, [pc, #180]	; (e28 <SPI_Holt_PORT_init+0xb8>)
     d72:	2210      	movs	r2, #16
     d74:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     d78:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     d7c:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     d80:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
     d84:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
     d88:	f8c3 1128 	str.w	r1, [r3, #296]	; 0x128
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     d8c:	f893 2144 	ldrb.w	r2, [r3, #324]	; 0x144
	tmp &= ~PORT_PINCFG_PMUXEN;
     d90:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     d94:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     d98:	f883 2144 	strb.w	r2, [r3, #324]	; 0x144
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     d9c:	f893 2132 	ldrb.w	r2, [r3, #306]	; 0x132
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     da0:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     da4:	f042 0202 	orr.w	r2, r2, #2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     da8:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     dac:	2220      	movs	r2, #32
     dae:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     db2:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     db6:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     dba:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
     dbe:	f8c3 1128 	str.w	r1, [r3, #296]	; 0x128
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     dc2:	f893 2145 	ldrb.w	r2, [r3, #325]	; 0x145
	tmp &= ~PORT_PINCFG_PMUXEN;
     dc6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     dca:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     dce:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     dd2:	f893 2132 	ldrb.w	r2, [r3, #306]	; 0x132
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     dd6:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     dda:	f042 0220 	orr.w	r2, r2, #32
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     dde:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     de2:	2240      	movs	r2, #64	; 0x40
     de4:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     de8:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     dec:	f502 3200 	add.w	r2, r2, #131072	; 0x20000
     df0:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
     df4:	4a0d      	ldr	r2, [pc, #52]	; (e2c <SPI_Holt_PORT_init+0xbc>)
     df6:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     dfa:	f893 2146 	ldrb.w	r2, [r3, #326]	; 0x146
     dfe:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     e02:	f883 2146 	strb.w	r2, [r3, #326]	; 0x146
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     e06:	f893 2146 	ldrb.w	r2, [r3, #326]	; 0x146
	tmp &= ~PORT_PINCFG_PMUXEN;
     e0a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     e0e:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     e12:	f883 2146 	strb.w	r2, [r3, #326]	; 0x146
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     e16:	f893 2133 	ldrb.w	r2, [r3, #307]	; 0x133
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     e1a:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     e1e:	f042 0202 	orr.w	r2, r2, #2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     e22:	f883 2133 	strb.w	r2, [r3, #307]	; 0x133
     e26:	4770      	bx	lr
     e28:	41008000 	.word	0x41008000
     e2c:	c0020000 	.word	0xc0020000

00000e30 <SPI_Holt_CLOCK_init>:
     e30:	4b06      	ldr	r3, [pc, #24]	; (e4c <SPI_Holt_CLOCK_init+0x1c>)
     e32:	2240      	movs	r2, #64	; 0x40
     e34:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
     e38:	2243      	movs	r2, #67	; 0x43
     e3a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}

static inline void hri_mclk_set_APBDMASK_SERCOM6_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM6;
     e3e:	4a04      	ldr	r2, [pc, #16]	; (e50 <SPI_Holt_CLOCK_init+0x20>)
     e40:	6a13      	ldr	r3, [r2, #32]
     e42:	f043 0304 	orr.w	r3, r3, #4
     e46:	6213      	str	r3, [r2, #32]
     e48:	4770      	bx	lr
     e4a:	bf00      	nop
     e4c:	40001c00 	.word	0x40001c00
     e50:	40000800 	.word	0x40000800

00000e54 <SPI_Holt_init>:

	hri_mclk_set_APBDMASK_SERCOM6_bit(MCLK);
}

void SPI_Holt_init(void)
{
     e54:	b508      	push	{r3, lr}
	SPI_Holt_CLOCK_init();
     e56:	4b04      	ldr	r3, [pc, #16]	; (e68 <SPI_Holt_init+0x14>)
     e58:	4798      	blx	r3
	spi_m_sync_init(&SPI_Holt, SERCOM6);
     e5a:	4904      	ldr	r1, [pc, #16]	; (e6c <SPI_Holt_init+0x18>)
     e5c:	4804      	ldr	r0, [pc, #16]	; (e70 <SPI_Holt_init+0x1c>)
     e5e:	4b05      	ldr	r3, [pc, #20]	; (e74 <SPI_Holt_init+0x20>)
     e60:	4798      	blx	r3
	SPI_Holt_PORT_init();
     e62:	4b05      	ldr	r3, [pc, #20]	; (e78 <SPI_Holt_init+0x24>)
     e64:	4798      	blx	r3
     e66:	bd08      	pop	{r3, pc}
     e68:	00000e31 	.word	0x00000e31
     e6c:	43000800 	.word	0x43000800
     e70:	20000a2c 	.word	0x20000a2c
     e74:	000013b1 	.word	0x000013b1
     e78:	00000d71 	.word	0x00000d71

00000e7c <delay_driver_init>:
}

void delay_driver_init(void)
{
     e7c:	b508      	push	{r3, lr}
	delay_init(SysTick);
     e7e:	4802      	ldr	r0, [pc, #8]	; (e88 <delay_driver_init+0xc>)
     e80:	4b02      	ldr	r3, [pc, #8]	; (e8c <delay_driver_init+0x10>)
     e82:	4798      	blx	r3
     e84:	bd08      	pop	{r3, pc}
     e86:	bf00      	nop
     e88:	e000e010 	.word	0xe000e010
     e8c:	0000126d 	.word	0x0000126d

00000e90 <USB_DEVICE_INSTANCE_PORT_init>:
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     e90:	4b1e      	ldr	r3, [pc, #120]	; (f0c <USB_DEVICE_INSTANCE_PORT_init+0x7c>)
     e92:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
     e96:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     e98:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
     e9c:	6299      	str	r1, [r3, #40]	; 0x28
     e9e:	481c      	ldr	r0, [pc, #112]	; (f10 <USB_DEVICE_INSTANCE_PORT_init+0x80>)
     ea0:	6298      	str	r0, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     ea2:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     ea4:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
     ea8:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     eac:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     eb0:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
	tmp &= ~PORT_PINCFG_PMUXEN;
     eb4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     eb8:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     ebc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     ec0:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     ec4:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     ec8:	f042 0207 	orr.w	r2, r2, #7
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     ecc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     ed0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
     ed4:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     ed6:	6299      	str	r1, [r3, #40]	; 0x28
     ed8:	490e      	ldr	r1, [pc, #56]	; (f14 <USB_DEVICE_INSTANCE_PORT_init+0x84>)
     eda:	6299      	str	r1, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     edc:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     ede:	f893 2059 	ldrb.w	r2, [r3, #89]	; 0x59
     ee2:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     ee6:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     eea:	f893 2059 	ldrb.w	r2, [r3, #89]	; 0x59
	tmp &= ~PORT_PINCFG_PMUXEN;
     eee:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     ef2:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     ef6:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     efa:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     efe:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     f02:	f042 0270 	orr.w	r2, r2, #112	; 0x70
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     f06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
     f0a:	4770      	bx	lr
     f0c:	41008000 	.word	0x41008000
     f10:	c0000100 	.word	0xc0000100
     f14:	c0000200 	.word	0xc0000200

00000f18 <USB_DEVICE_INSTANCE_CLOCK_init>:
     f18:	2244      	movs	r2, #68	; 0x44
     f1a:	4b07      	ldr	r3, [pc, #28]	; (f38 <USB_DEVICE_INSTANCE_CLOCK_init+0x20>)
     f1c:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_USB;
     f20:	f5a3 53a0 	sub.w	r3, r3, #5120	; 0x1400
     f24:	691a      	ldr	r2, [r3, #16]
     f26:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
     f2a:	611a      	str	r2, [r3, #16]
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_USB;
     f2c:	699a      	ldr	r2, [r3, #24]
     f2e:	f042 0201 	orr.w	r2, r2, #1
     f32:	619a      	str	r2, [r3, #24]
     f34:	4770      	bx	lr
     f36:	bf00      	nop
     f38:	40001c00 	.word	0x40001c00

00000f3c <USB_DEVICE_INSTANCE_init>:
	hri_mclk_set_AHBMASK_USB_bit(MCLK);
	hri_mclk_set_APBBMASK_USB_bit(MCLK);
}

void USB_DEVICE_INSTANCE_init(void)
{
     f3c:	b508      	push	{r3, lr}
	USB_DEVICE_INSTANCE_CLOCK_init();
     f3e:	4b03      	ldr	r3, [pc, #12]	; (f4c <USB_DEVICE_INSTANCE_init+0x10>)
     f40:	4798      	blx	r3
	usb_d_init();
     f42:	4b03      	ldr	r3, [pc, #12]	; (f50 <USB_DEVICE_INSTANCE_init+0x14>)
     f44:	4798      	blx	r3
	USB_DEVICE_INSTANCE_PORT_init();
     f46:	4b03      	ldr	r3, [pc, #12]	; (f54 <USB_DEVICE_INSTANCE_init+0x18>)
     f48:	4798      	blx	r3
     f4a:	bd08      	pop	{r3, pc}
     f4c:	00000f19 	.word	0x00000f19
     f50:	00001821 	.word	0x00001821
     f54:	00000e91 	.word	0x00000e91

00000f58 <CAN_0_PORT_init>:
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     f58:	4b10      	ldr	r3, [pc, #64]	; (f9c <CAN_0_PORT_init+0x44>)
     f5a:	f893 20cd 	ldrb.w	r2, [r3, #205]	; 0xcd
	tmp &= ~PORT_PINCFG_PMUXEN;
     f5e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     f62:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     f66:	f883 20cd 	strb.w	r2, [r3, #205]	; 0xcd
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     f6a:	f893 20b6 	ldrb.w	r2, [r3, #182]	; 0xb6
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     f6e:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     f72:	f042 0270 	orr.w	r2, r2, #112	; 0x70
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     f76:	f883 20b6 	strb.w	r2, [r3, #182]	; 0xb6
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     f7a:	f893 20cc 	ldrb.w	r2, [r3, #204]	; 0xcc
	tmp &= ~PORT_PINCFG_PMUXEN;
     f7e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     f82:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     f86:	f883 20cc 	strb.w	r2, [r3, #204]	; 0xcc
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     f8a:	f893 20b6 	ldrb.w	r2, [r3, #182]	; 0xb6
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     f8e:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     f92:	f042 0207 	orr.w	r2, r2, #7
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     f96:	f883 20b6 	strb.w	r2, [r3, #182]	; 0xb6
     f9a:	4770      	bx	lr
     f9c:	41008000 	.word	0x41008000

00000fa0 <CAN_0_init>:
 * \brief CAN initialization function
 *
 * Enables CAN peripheral, clocks and initializes CAN driver
 */
void CAN_0_init(void)
{
     fa0:	b508      	push	{r3, lr}
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_CAN1;
     fa2:	4a08      	ldr	r2, [pc, #32]	; (fc4 <CAN_0_init+0x24>)
     fa4:	6913      	ldr	r3, [r2, #16]
     fa6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
     faa:	6113      	str	r3, [r2, #16]
     fac:	2242      	movs	r2, #66	; 0x42
     fae:	4b06      	ldr	r3, [pc, #24]	; (fc8 <CAN_0_init+0x28>)
     fb0:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
	hri_mclk_set_AHBMASK_CAN1_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, CAN1_GCLK_ID, CONF_GCLK_CAN1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
	can_async_init(&CAN_0, CAN1);
     fb4:	4905      	ldr	r1, [pc, #20]	; (fcc <CAN_0_init+0x2c>)
     fb6:	4806      	ldr	r0, [pc, #24]	; (fd0 <CAN_0_init+0x30>)
     fb8:	4b06      	ldr	r3, [pc, #24]	; (fd4 <CAN_0_init+0x34>)
     fba:	4798      	blx	r3
	CAN_0_PORT_init();
     fbc:	4b06      	ldr	r3, [pc, #24]	; (fd8 <CAN_0_init+0x38>)
     fbe:	4798      	blx	r3
     fc0:	bd08      	pop	{r3, pc}
     fc2:	bf00      	nop
     fc4:	40000800 	.word	0x40000800
     fc8:	40001c00 	.word	0x40001c00
     fcc:	42000400 	.word	0x42000400
     fd0:	200009ac 	.word	0x200009ac
     fd4:	0000121d 	.word	0x0000121d
     fd8:	00000f59 	.word	0x00000f59

00000fdc <system_init>:
}

void system_init(void)
{
     fdc:	b538      	push	{r3, r4, r5, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
     fde:	4b70      	ldr	r3, [pc, #448]	; (11a0 <system_init+0x1c4>)
     fe0:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     fe2:	4b70      	ldr	r3, [pc, #448]	; (11a4 <system_init+0x1c8>)
     fe4:	2280      	movs	r2, #128	; 0x80
     fe6:	619a      	str	r2, [r3, #24]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     fe8:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     fea:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     fee:	629a      	str	r2, [r3, #40]	; 0x28
     ff0:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
     ff4:	6299      	str	r1, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     ff6:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
	tmp &= ~PORT_PINCFG_PMUXEN;
     ffa:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     ffe:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    1002:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    1006:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    100a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    100e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    1012:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
    1016:	4864      	ldr	r0, [pc, #400]	; (11a8 <system_init+0x1cc>)
    1018:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    101c:	f893 00dc 	ldrb.w	r0, [r3, #220]	; 0xdc
	tmp &= ~PORT_PINCFG_PMUXEN;
    1020:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1024:	f883 00dc 	strb.w	r0, [r3, #220]	; 0xdc
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    1028:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
    102c:	f8c3 0094 	str.w	r0, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    1030:	f8c3 0088 	str.w	r0, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    1034:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
    1038:	485c      	ldr	r0, [pc, #368]	; (11ac <system_init+0x1d0>)
    103a:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    103e:	f893 00dd 	ldrb.w	r0, [r3, #221]	; 0xdd
	tmp &= ~PORT_PINCFG_PMUXEN;
    1042:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1046:	f883 00dd 	strb.w	r0, [r3, #221]	; 0xdd
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    104a:	2004      	movs	r0, #4
    104c:	f8c3 0104 	str.w	r0, [r3, #260]	; 0x104
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    1050:	4c57      	ldr	r4, [pc, #348]	; (11b0 <system_init+0x1d4>)
    1052:	f8c3 4128 	str.w	r4, [r3, #296]	; 0x128
    1056:	4d57      	ldr	r5, [pc, #348]	; (11b4 <system_init+0x1d8>)
    1058:	f8c3 5128 	str.w	r5, [r3, #296]	; 0x128
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    105c:	f8c3 0104 	str.w	r0, [r3, #260]	; 0x104
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
    1060:	f893 4142 	ldrb.w	r4, [r3, #322]	; 0x142
    1064:	4304      	orrs	r4, r0
    1066:	f883 4142 	strb.w	r4, [r3, #322]	; 0x142
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    106a:	f8c3 0118 	str.w	r0, [r3, #280]	; 0x118
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    106e:	f893 0142 	ldrb.w	r0, [r3, #322]	; 0x142
	tmp &= ~PORT_PINCFG_PMUXEN;
    1072:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1076:	f883 0142 	strb.w	r0, [r3, #322]	; 0x142
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    107a:	2008      	movs	r0, #8
    107c:	f8c3 0104 	str.w	r0, [r3, #260]	; 0x104
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    1080:	4c4d      	ldr	r4, [pc, #308]	; (11b8 <system_init+0x1dc>)
    1082:	f8c3 4128 	str.w	r4, [r3, #296]	; 0x128
    1086:	f8c3 5128 	str.w	r5, [r3, #296]	; 0x128
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    108a:	f8c3 0104 	str.w	r0, [r3, #260]	; 0x104
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
    108e:	f893 4143 	ldrb.w	r4, [r3, #323]	; 0x143
    1092:	f044 0404 	orr.w	r4, r4, #4
    1096:	f883 4143 	strb.w	r4, [r3, #323]	; 0x143
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    109a:	f8c3 0118 	str.w	r0, [r3, #280]	; 0x118
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    109e:	f893 0143 	ldrb.w	r0, [r3, #323]	; 0x143
	tmp &= ~PORT_PINCFG_PMUXEN;
    10a2:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    10a6:	f883 0143 	strb.w	r0, [r3, #323]	; 0x143
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    10aa:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    10ae:	f8c3 0114 	str.w	r0, [r3, #276]	; 0x114
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    10b2:	f8c3 0108 	str.w	r0, [r3, #264]	; 0x108
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    10b6:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
    10ba:	f8c3 0128 	str.w	r0, [r3, #296]	; 0x128
    10be:	f8c3 1128 	str.w	r1, [r3, #296]	; 0x128
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    10c2:	f893 014f 	ldrb.w	r0, [r3, #335]	; 0x14f
	tmp &= ~PORT_PINCFG_PMUXEN;
    10c6:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    10ca:	f883 014f 	strb.w	r0, [r3, #335]	; 0x14f
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    10ce:	f44f 2080 	mov.w	r0, #262144	; 0x40000
    10d2:	f8c3 0114 	str.w	r0, [r3, #276]	; 0x114
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    10d6:	f8c3 0108 	str.w	r0, [r3, #264]	; 0x108
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    10da:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
    10de:	4837      	ldr	r0, [pc, #220]	; (11bc <system_init+0x1e0>)
    10e0:	f8c3 0128 	str.w	r0, [r3, #296]	; 0x128
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    10e4:	f893 0152 	ldrb.w	r0, [r3, #338]	; 0x152
	tmp &= ~PORT_PINCFG_PMUXEN;
    10e8:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    10ec:	f883 0152 	strb.w	r0, [r3, #338]	; 0x152
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    10f0:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    10f4:	4832      	ldr	r0, [pc, #200]	; (11c0 <system_init+0x1e4>)
    10f6:	f8c3 0128 	str.w	r0, [r3, #296]	; 0x128
    10fa:	4832      	ldr	r0, [pc, #200]	; (11c4 <system_init+0x1e8>)
    10fc:	f8c3 0128 	str.w	r0, [r3, #296]	; 0x128
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    1100:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
    1104:	f893 015e 	ldrb.w	r0, [r3, #350]	; 0x15e
    1108:	f040 0004 	orr.w	r0, r0, #4
    110c:	f883 015e 	strb.w	r0, [r3, #350]	; 0x15e
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    1110:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1114:	f893 215e 	ldrb.w	r2, [r3, #350]	; 0x15e
	tmp &= ~PORT_PINCFG_PMUXEN;
    1118:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    111c:	f883 215e 	strb.w	r2, [r3, #350]	; 0x15e
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    1120:	f44f 6280 	mov.w	r2, #1024	; 0x400
    1124:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    1128:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    112c:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    1130:	f8c3 21a8 	str.w	r2, [r3, #424]	; 0x1a8
    1134:	f8c3 11a8 	str.w	r1, [r3, #424]	; 0x1a8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1138:	f893 21ca 	ldrb.w	r2, [r3, #458]	; 0x1ca
	tmp &= ~PORT_PINCFG_PMUXEN;
    113c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1140:	f883 21ca 	strb.w	r2, [r3, #458]	; 0x1ca
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    1144:	f44f 6200 	mov.w	r2, #2048	; 0x800
    1148:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    114c:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    1150:	4c1d      	ldr	r4, [pc, #116]	; (11c8 <system_init+0x1ec>)
    1152:	f8c3 41a8 	str.w	r4, [r3, #424]	; 0x1a8
    1156:	f8c3 11a8 	str.w	r1, [r3, #424]	; 0x1a8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    115a:	f893 21cb 	ldrb.w	r2, [r3, #459]	; 0x1cb
	tmp &= ~PORT_PINCFG_PMUXEN;
    115e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1162:	f883 21cb 	strb.w	r2, [r3, #459]	; 0x1cb
	// Set pin direction to output
	gpio_set_pin_direction(OLED_LED3, GPIO_DIRECTION_OUT);

	gpio_set_pin_function(OLED_LED3, GPIO_PIN_FUNCTION_OFF);

	EVENT_SYSTEM_0_init();
    1166:	4b19      	ldr	r3, [pc, #100]	; (11cc <system_init+0x1f0>)
    1168:	4798      	blx	r3
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_RTC;
    116a:	6963      	ldr	r3, [r4, #20]
    116c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    1170:	6163      	str	r3, [r4, #20]
	timer_init(&TIMER_0, RTC, _rtc_get_timer());
    1172:	4b17      	ldr	r3, [pc, #92]	; (11d0 <system_init+0x1f4>)
    1174:	4798      	blx	r3
    1176:	4602      	mov	r2, r0
    1178:	4916      	ldr	r1, [pc, #88]	; (11d4 <system_init+0x1f8>)
    117a:	4817      	ldr	r0, [pc, #92]	; (11d8 <system_init+0x1fc>)
    117c:	4b17      	ldr	r3, [pc, #92]	; (11dc <system_init+0x200>)
    117e:	4798      	blx	r3

	TIMER_0_init();

	SPI_LTC2983_init();
    1180:	4b17      	ldr	r3, [pc, #92]	; (11e0 <system_init+0x204>)
    1182:	4798      	blx	r3

	I2C_1_init();
    1184:	4b17      	ldr	r3, [pc, #92]	; (11e4 <system_init+0x208>)
    1186:	4798      	blx	r3

	I2C_EEPROM_init();
    1188:	4b17      	ldr	r3, [pc, #92]	; (11e8 <system_init+0x20c>)
    118a:	4798      	blx	r3

	SPI_Holt_init();
    118c:	4b17      	ldr	r3, [pc, #92]	; (11ec <system_init+0x210>)
    118e:	4798      	blx	r3

	delay_driver_init();
    1190:	4b17      	ldr	r3, [pc, #92]	; (11f0 <system_init+0x214>)
    1192:	4798      	blx	r3

	USB_DEVICE_INSTANCE_init();
    1194:	4b17      	ldr	r3, [pc, #92]	; (11f4 <system_init+0x218>)
    1196:	4798      	blx	r3
	CAN_0_init();
    1198:	4b17      	ldr	r3, [pc, #92]	; (11f8 <system_init+0x21c>)
    119a:	4798      	blx	r3
    119c:	bd38      	pop	{r3, r4, r5, pc}
    119e:	bf00      	nop
    11a0:	00001dad 	.word	0x00001dad
    11a4:	41008000 	.word	0x41008000
    11a8:	c0001000 	.word	0xc0001000
    11ac:	c0002000 	.word	0xc0002000
    11b0:	40020004 	.word	0x40020004
    11b4:	c0020000 	.word	0xc0020000
    11b8:	40020008 	.word	0x40020008
    11bc:	c0000004 	.word	0xc0000004
    11c0:	40020000 	.word	0x40020000
    11c4:	c0024000 	.word	0xc0024000
    11c8:	40000800 	.word	0x40000800
    11cc:	00000af9 	.word	0x00000af9
    11d0:	000020e1 	.word	0x000020e1
    11d4:	40002400 	.word	0x40002400
    11d8:	20000a84 	.word	0x20000a84
    11dc:	00001591 	.word	0x00001591
    11e0:	00000bf1 	.word	0x00000bf1
    11e4:	00000c9d 	.word	0x00000c9d
    11e8:	00000d49 	.word	0x00000d49
    11ec:	00000e55 	.word	0x00000e55
    11f0:	00000e7d 	.word	0x00000e7d
    11f4:	00000f3d 	.word	0x00000f3d
    11f8:	00000fa1 	.word	0x00000fa1

000011fc <can_tx_done>:

/**
 * \internal Callback of CAN Message Write finished
 */
static void can_tx_done(struct _can_async_device *dev)
{
    11fc:	b508      	push	{r3, lr}
	struct can_async_descriptor *const descr = CONTAINER_OF(dev, struct can_async_descriptor, dev);

	if (descr->cb.tx_done) {
    11fe:	69c3      	ldr	r3, [r0, #28]
    1200:	b103      	cbz	r3, 1204 <can_tx_done+0x8>
		descr->cb.tx_done(descr);
    1202:	4798      	blx	r3
    1204:	bd08      	pop	{r3, pc}

00001206 <can_rx_done>:

/**
 * \internal Callback of CAN Message Read finished
 */
static void can_rx_done(struct _can_async_device *dev)
{
    1206:	b508      	push	{r3, lr}
	struct can_async_descriptor *const descr = CONTAINER_OF(dev, struct can_async_descriptor, dev);

	if (descr->cb.rx_done) {
    1208:	6a03      	ldr	r3, [r0, #32]
    120a:	b103      	cbz	r3, 120e <can_rx_done+0x8>
		descr->cb.rx_done(descr);
    120c:	4798      	blx	r3
    120e:	bd08      	pop	{r3, pc}

00001210 <can_irq_handler>:

/**
 * \internal Callback of CAN Interrupt
 */
static void can_irq_handler(struct _can_async_device *dev, enum can_async_interrupt_type type)
{
    1210:	b508      	push	{r3, lr}
	struct can_async_descriptor *const descr = CONTAINER_OF(dev, struct can_async_descriptor, dev);

	if (descr->cb.irq_handler) {
    1212:	6a43      	ldr	r3, [r0, #36]	; 0x24
    1214:	b103      	cbz	r3, 1218 <can_irq_handler+0x8>
		descr->cb.irq_handler(descr, type);
    1216:	4798      	blx	r3
    1218:	bd08      	pop	{r3, pc}
	...

0000121c <can_async_init>:
{
    121c:	b538      	push	{r3, r4, r5, lr}
    121e:	460d      	mov	r5, r1
	ASSERT(descr && hw);
    1220:	4604      	mov	r4, r0
    1222:	b1a0      	cbz	r0, 124e <can_async_init+0x32>
    1224:	1c08      	adds	r0, r1, #0
    1226:	bf18      	it	ne
    1228:	2001      	movne	r0, #1
    122a:	2241      	movs	r2, #65	; 0x41
    122c:	4909      	ldr	r1, [pc, #36]	; (1254 <can_async_init+0x38>)
    122e:	4b0a      	ldr	r3, [pc, #40]	; (1258 <can_async_init+0x3c>)
    1230:	4798      	blx	r3
	rc = _can_async_init(&descr->dev, hw);
    1232:	4629      	mov	r1, r5
    1234:	4620      	mov	r0, r4
    1236:	4b09      	ldr	r3, [pc, #36]	; (125c <can_async_init+0x40>)
    1238:	4798      	blx	r3
	if (rc) {
    123a:	4603      	mov	r3, r0
    123c:	b928      	cbnz	r0, 124a <can_async_init+0x2e>
	descr->dev.cb.tx_done     = can_tx_done;
    123e:	4a08      	ldr	r2, [pc, #32]	; (1260 <can_async_init+0x44>)
    1240:	6062      	str	r2, [r4, #4]
	descr->dev.cb.rx_done     = can_rx_done;
    1242:	4a08      	ldr	r2, [pc, #32]	; (1264 <can_async_init+0x48>)
    1244:	60a2      	str	r2, [r4, #8]
	descr->dev.cb.irq_handler = can_irq_handler;
    1246:	4a08      	ldr	r2, [pc, #32]	; (1268 <can_async_init+0x4c>)
    1248:	60e2      	str	r2, [r4, #12]
}
    124a:	4618      	mov	r0, r3
    124c:	bd38      	pop	{r3, r4, r5, pc}
    124e:	2000      	movs	r0, #0
    1250:	e7eb      	b.n	122a <can_async_init+0xe>
    1252:	bf00      	nop
    1254:	00005028 	.word	0x00005028
    1258:	00001b6d 	.word	0x00001b6d
    125c:	00001c15 	.word	0x00001c15
    1260:	000011fd 	.word	0x000011fd
    1264:	00001207 	.word	0x00001207
    1268:	00001211 	.word	0x00001211

0000126c <delay_init>:

/**
 * \brief Initialize Delay driver
 */
void delay_init(void *const hw)
{
    126c:	b508      	push	{r3, lr}
	_delay_init(hardware = hw);
    126e:	4b02      	ldr	r3, [pc, #8]	; (1278 <delay_init+0xc>)
    1270:	6018      	str	r0, [r3, #0]
    1272:	4b02      	ldr	r3, [pc, #8]	; (127c <delay_init+0x10>)
    1274:	4798      	blx	r3
    1276:	bd08      	pop	{r3, pc}
    1278:	20000644 	.word	0x20000644
    127c:	000029c1 	.word	0x000029c1

00001280 <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
    1280:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
    1282:	4b04      	ldr	r3, [pc, #16]	; (1294 <delay_ms+0x14>)
    1284:	681c      	ldr	r4, [r3, #0]
    1286:	4b04      	ldr	r3, [pc, #16]	; (1298 <delay_ms+0x18>)
    1288:	4798      	blx	r3
    128a:	4601      	mov	r1, r0
    128c:	4620      	mov	r0, r4
    128e:	4b03      	ldr	r3, [pc, #12]	; (129c <delay_ms+0x1c>)
    1290:	4798      	blx	r3
    1292:	bd10      	pop	{r4, pc}
    1294:	20000644 	.word	0x20000644
    1298:	00001da1 	.word	0x00001da1
    129c:	000029d5 	.word	0x000029d5

000012a0 <event_system_init>:

/**
 * \brief Initialize event system.
 */
int32_t event_system_init(void)
{
    12a0:	b508      	push	{r3, lr}
	return _event_system_init();
    12a2:	4b01      	ldr	r3, [pc, #4]	; (12a8 <event_system_init+0x8>)
    12a4:	4798      	blx	r3
}
    12a6:	bd08      	pop	{r3, pc}
    12a8:	00001e15 	.word	0x00001e15

000012ac <i2c_tx_complete>:

/**
 * \brief Callback function for tx complete
 */
static void i2c_tx_complete(struct _i2c_m_async_device *const i2c_dev)
{
    12ac:	b508      	push	{r3, lr}
	struct i2c_m_async_desc *i2c = CONTAINER_OF(i2c_dev, struct i2c_m_async_desc, device);

	if (!(i2c_dev->service.msg.flags & I2C_M_BUSY)) {
    12ae:	8843      	ldrh	r3, [r0, #2]
    12b0:	f413 7f80 	tst.w	r3, #256	; 0x100
    12b4:	d102      	bne.n	12bc <i2c_tx_complete+0x10>
		if (i2c->i2c_cb.tx_complete) {
    12b6:	6b43      	ldr	r3, [r0, #52]	; 0x34
    12b8:	b103      	cbz	r3, 12bc <i2c_tx_complete+0x10>
			i2c->i2c_cb.tx_complete(i2c);
    12ba:	4798      	blx	r3
    12bc:	bd08      	pop	{r3, pc}

000012be <i2c_rx_complete>:

/**
 * \brief Callback function for rx complete
 */
static void i2c_rx_complete(struct _i2c_m_async_device *const i2c_dev)
{
    12be:	b508      	push	{r3, lr}
	struct i2c_m_async_desc *i2c = CONTAINER_OF(i2c_dev, struct i2c_m_async_desc, device);

	if (!(i2c_dev->service.msg.flags & I2C_M_BUSY)) {
    12c0:	8843      	ldrh	r3, [r0, #2]
    12c2:	f413 7f80 	tst.w	r3, #256	; 0x100
    12c6:	d102      	bne.n	12ce <i2c_rx_complete+0x10>
		if (i2c->i2c_cb.rx_complete) {
    12c8:	6b83      	ldr	r3, [r0, #56]	; 0x38
    12ca:	b103      	cbz	r3, 12ce <i2c_rx_complete+0x10>
			i2c->i2c_cb.rx_complete(i2c);
    12cc:	4798      	blx	r3
    12ce:	bd08      	pop	{r3, pc}

000012d0 <i2c_error>:
		}
	}
}

static void i2c_error(struct _i2c_m_async_device *const i2c_dev, int32_t error)
{
    12d0:	b508      	push	{r3, lr}
	struct i2c_m_async_desc *i2c = CONTAINER_OF(i2c_dev, struct i2c_m_async_desc, device);

	if (!(i2c_dev->service.msg.flags & I2C_M_BUSY)) {
    12d2:	8843      	ldrh	r3, [r0, #2]
    12d4:	f413 7f80 	tst.w	r3, #256	; 0x100
    12d8:	d102      	bne.n	12e0 <i2c_error+0x10>
		if (i2c->i2c_cb.error) {
    12da:	6b03      	ldr	r3, [r0, #48]	; 0x30
    12dc:	b103      	cbz	r3, 12e0 <i2c_error+0x10>
			i2c->i2c_cb.error(i2c, error);
    12de:	4798      	blx	r3
    12e0:	bd08      	pop	{r3, pc}
	...

000012e4 <i2c_m_async_write>:

/**
 * \brief Async version of I2C I/O write
 */
static int32_t i2c_m_async_write(struct io_descriptor *const io, const uint8_t *buf, const uint16_t n)
{
    12e4:	b510      	push	{r4, lr}
    12e6:	b084      	sub	sp, #16
    12e8:	4614      	mov	r4, r2
	struct i2c_m_async_desc *i2c = CONTAINER_OF(io, struct i2c_m_async_desc, io);
	struct _i2c_m_msg        msg;
	int32_t                  ret;

	msg.addr   = i2c->slave_addr;
    12ea:	8a83      	ldrh	r3, [r0, #20]
    12ec:	f8ad 3004 	strh.w	r3, [sp, #4]
	msg.len    = n;
    12f0:	9202      	str	r2, [sp, #8]
	msg.flags  = I2C_M_STOP;
    12f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    12f6:	f8ad 3006 	strh.w	r3, [sp, #6]
	msg.buffer = (uint8_t *)buf;
    12fa:	9103      	str	r1, [sp, #12]

	/* start transfer then return */
	ret = _i2c_m_async_transfer(&i2c->device, &msg);
    12fc:	a901      	add	r1, sp, #4
    12fe:	3828      	subs	r0, #40	; 0x28
    1300:	4b03      	ldr	r3, [pc, #12]	; (1310 <i2c_m_async_write+0x2c>)
    1302:	4798      	blx	r3
		/* error occurred */
		return ret;
	}

	return (int32_t)n;
}
    1304:	2800      	cmp	r0, #0
    1306:	bf08      	it	eq
    1308:	4620      	moveq	r0, r4
    130a:	b004      	add	sp, #16
    130c:	bd10      	pop	{r4, pc}
    130e:	bf00      	nop
    1310:	00002565 	.word	0x00002565

00001314 <i2c_m_async_read>:
{
    1314:	b510      	push	{r4, lr}
    1316:	b084      	sub	sp, #16
    1318:	4614      	mov	r4, r2
	msg.addr   = i2c->slave_addr;
    131a:	8a83      	ldrh	r3, [r0, #20]
    131c:	f8ad 3004 	strh.w	r3, [sp, #4]
	msg.len    = n;
    1320:	9202      	str	r2, [sp, #8]
	msg.flags  = I2C_M_STOP | I2C_M_RD;
    1322:	f248 0301 	movw	r3, #32769	; 0x8001
    1326:	f8ad 3006 	strh.w	r3, [sp, #6]
	msg.buffer = buf;
    132a:	9103      	str	r1, [sp, #12]
	ret = _i2c_m_async_transfer(&i2c->device, &msg);
    132c:	a901      	add	r1, sp, #4
    132e:	3828      	subs	r0, #40	; 0x28
    1330:	4b03      	ldr	r3, [pc, #12]	; (1340 <i2c_m_async_read+0x2c>)
    1332:	4798      	blx	r3
}
    1334:	2800      	cmp	r0, #0
    1336:	bf08      	it	eq
    1338:	4620      	moveq	r0, r4
    133a:	b004      	add	sp, #16
    133c:	bd10      	pop	{r4, pc}
    133e:	bf00      	nop
    1340:	00002565 	.word	0x00002565

00001344 <i2c_m_async_init>:

/**
 * \brief Async version of i2c initialize
 */
int32_t i2c_m_async_init(struct i2c_m_async_desc *const i2c, void *const hw)
{
    1344:	b570      	push	{r4, r5, r6, lr}
    1346:	460d      	mov	r5, r1
	int32_t init_status;
	ASSERT(i2c);
    1348:	4604      	mov	r4, r0
    134a:	2289      	movs	r2, #137	; 0x89
    134c:	490f      	ldr	r1, [pc, #60]	; (138c <i2c_m_async_init+0x48>)
    134e:	3000      	adds	r0, #0
    1350:	bf18      	it	ne
    1352:	2001      	movne	r0, #1
    1354:	4b0e      	ldr	r3, [pc, #56]	; (1390 <i2c_m_async_init+0x4c>)
    1356:	4798      	blx	r3

	init_status = _i2c_m_async_init(&i2c->device, hw);
    1358:	4629      	mov	r1, r5
    135a:	4620      	mov	r0, r4
    135c:	4b0d      	ldr	r3, [pc, #52]	; (1394 <i2c_m_async_init+0x50>)
    135e:	4798      	blx	r3
	if (init_status) {
    1360:	4605      	mov	r5, r0
    1362:	b108      	cbz	r0, 1368 <i2c_m_async_init+0x24>
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_TX_COMPLETE, (FUNC_PTR)i2c_tx_complete);
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_RX_COMPLETE, (FUNC_PTR)i2c_rx_complete);
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_ERROR, (FUNC_PTR)i2c_error);

	return ERR_NONE;
}
    1364:	4628      	mov	r0, r5
    1366:	bd70      	pop	{r4, r5, r6, pc}
	i2c->io.read  = i2c_m_async_read;
    1368:	4b0b      	ldr	r3, [pc, #44]	; (1398 <i2c_m_async_init+0x54>)
    136a:	62e3      	str	r3, [r4, #44]	; 0x2c
	i2c->io.write = i2c_m_async_write;
    136c:	4b0b      	ldr	r3, [pc, #44]	; (139c <i2c_m_async_init+0x58>)
    136e:	62a3      	str	r3, [r4, #40]	; 0x28
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_TX_COMPLETE, (FUNC_PTR)i2c_tx_complete);
    1370:	4a0b      	ldr	r2, [pc, #44]	; (13a0 <i2c_m_async_init+0x5c>)
    1372:	2101      	movs	r1, #1
    1374:	4620      	mov	r0, r4
    1376:	4e0b      	ldr	r6, [pc, #44]	; (13a4 <i2c_m_async_init+0x60>)
    1378:	47b0      	blx	r6
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_RX_COMPLETE, (FUNC_PTR)i2c_rx_complete);
    137a:	4a0b      	ldr	r2, [pc, #44]	; (13a8 <i2c_m_async_init+0x64>)
    137c:	2102      	movs	r1, #2
    137e:	4620      	mov	r0, r4
    1380:	47b0      	blx	r6
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_ERROR, (FUNC_PTR)i2c_error);
    1382:	4a0a      	ldr	r2, [pc, #40]	; (13ac <i2c_m_async_init+0x68>)
    1384:	2100      	movs	r1, #0
    1386:	4620      	mov	r0, r4
    1388:	47b0      	blx	r6
	return ERR_NONE;
    138a:	e7eb      	b.n	1364 <i2c_m_async_init+0x20>
    138c:	00005044 	.word	0x00005044
    1390:	00001b6d 	.word	0x00001b6d
    1394:	000024e5 	.word	0x000024e5
    1398:	00001315 	.word	0x00001315
    139c:	000012e5 	.word	0x000012e5
    13a0:	000012ad 	.word	0x000012ad
    13a4:	00002695 	.word	0x00002695
    13a8:	000012bf 	.word	0x000012bf
    13ac:	000012d1 	.word	0x000012d1

000013b0 <spi_m_sync_init>:
	ASSERT(spi);
	spi->func = (struct _spi_m_sync_hpl_interface *)func;
}

int32_t spi_m_sync_init(struct spi_m_sync_descriptor *spi, void *const hw)
{
    13b0:	b538      	push	{r3, r4, r5, lr}
    13b2:	460d      	mov	r5, r1
	int32_t rc = 0;
	ASSERT(spi && hw);
    13b4:	4604      	mov	r4, r0
    13b6:	b1b8      	cbz	r0, 13e8 <spi_m_sync_init+0x38>
    13b8:	1c08      	adds	r0, r1, #0
    13ba:	bf18      	it	ne
    13bc:	2001      	movne	r0, #1
    13be:	2240      	movs	r2, #64	; 0x40
    13c0:	490a      	ldr	r1, [pc, #40]	; (13ec <spi_m_sync_init+0x3c>)
    13c2:	4b0b      	ldr	r3, [pc, #44]	; (13f0 <spi_m_sync_init+0x40>)
    13c4:	4798      	blx	r3
	spi->dev.prvt = (void *)hw;
    13c6:	4620      	mov	r0, r4
    13c8:	f840 5f04 	str.w	r5, [r0, #4]!
	rc            = _spi_m_sync_init(&spi->dev, hw);
    13cc:	4629      	mov	r1, r5
    13ce:	4b09      	ldr	r3, [pc, #36]	; (13f4 <spi_m_sync_init+0x44>)
    13d0:	4798      	blx	r3

	if (rc < 0) {
    13d2:	2800      	cmp	r0, #0
    13d4:	db07      	blt.n	13e6 <spi_m_sync_init+0x36>
		return rc;
	}

	spi->flags    = SPI_DEACTIVATE_NEXT;
    13d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    13da:	82a3      	strh	r3, [r4, #20]
	spi->io.read  = _spi_m_sync_io_read;
    13dc:	4b06      	ldr	r3, [pc, #24]	; (13f8 <spi_m_sync_init+0x48>)
    13de:	6123      	str	r3, [r4, #16]
	spi->io.write = _spi_m_sync_io_write;
    13e0:	4b06      	ldr	r3, [pc, #24]	; (13fc <spi_m_sync_init+0x4c>)
    13e2:	60e3      	str	r3, [r4, #12]

	return ERR_NONE;
    13e4:	2000      	movs	r0, #0
}
    13e6:	bd38      	pop	{r3, r4, r5, pc}
    13e8:	2000      	movs	r0, #0
    13ea:	e7e8      	b.n	13be <spi_m_sync_init+0xe>
    13ec:	00005064 	.word	0x00005064
    13f0:	00001b6d 	.word	0x00001b6d
    13f4:	00002751 	.word	0x00002751
    13f8:	0000147d 	.word	0x0000147d
    13fc:	00001441 	.word	0x00001441

00001400 <spi_m_sync_transfer>:

	return spi_m_sync_transfer(spi, &xfer);
}

int32_t spi_m_sync_transfer(struct spi_m_sync_descriptor *spi, const struct spi_xfer *p_xfer)
{
    1400:	b530      	push	{r4, r5, lr}
    1402:	b085      	sub	sp, #20
    1404:	460c      	mov	r4, r1
	struct spi_msg msg;

	ASSERT(spi && p_xfer);
    1406:	4605      	mov	r5, r0
    1408:	b190      	cbz	r0, 1430 <spi_m_sync_transfer+0x30>
    140a:	1c08      	adds	r0, r1, #0
    140c:	bf18      	it	ne
    140e:	2001      	movne	r0, #1
    1410:	22b3      	movs	r2, #179	; 0xb3
    1412:	4908      	ldr	r1, [pc, #32]	; (1434 <spi_m_sync_transfer+0x34>)
    1414:	4b08      	ldr	r3, [pc, #32]	; (1438 <spi_m_sync_transfer+0x38>)
    1416:	4798      	blx	r3

	msg.txbuf = p_xfer->txbuf;
    1418:	6823      	ldr	r3, [r4, #0]
    141a:	9301      	str	r3, [sp, #4]
	msg.rxbuf = p_xfer->rxbuf;
    141c:	6863      	ldr	r3, [r4, #4]
    141e:	9302      	str	r3, [sp, #8]
	msg.size  = p_xfer->size;
    1420:	68a3      	ldr	r3, [r4, #8]
    1422:	9303      	str	r3, [sp, #12]
	return _spi_m_sync_trans(&spi->dev, &msg);
    1424:	a901      	add	r1, sp, #4
    1426:	1d28      	adds	r0, r5, #4
    1428:	4b04      	ldr	r3, [pc, #16]	; (143c <spi_m_sync_transfer+0x3c>)
    142a:	4798      	blx	r3
}
    142c:	b005      	add	sp, #20
    142e:	bd30      	pop	{r4, r5, pc}
    1430:	2000      	movs	r0, #0
    1432:	e7ed      	b.n	1410 <spi_m_sync_transfer+0x10>
    1434:	00005064 	.word	0x00005064
    1438:	00001b6d 	.word	0x00001b6d
    143c:	000028e1 	.word	0x000028e1

00001440 <_spi_m_sync_io_write>:
{
    1440:	b570      	push	{r4, r5, r6, lr}
    1442:	b084      	sub	sp, #16
    1444:	460e      	mov	r6, r1
    1446:	4615      	mov	r5, r2
	ASSERT(io);
    1448:	4604      	mov	r4, r0
    144a:	22a3      	movs	r2, #163	; 0xa3
    144c:	4908      	ldr	r1, [pc, #32]	; (1470 <_spi_m_sync_io_write+0x30>)
    144e:	3000      	adds	r0, #0
    1450:	bf18      	it	ne
    1452:	2001      	movne	r0, #1
    1454:	4b07      	ldr	r3, [pc, #28]	; (1474 <_spi_m_sync_io_write+0x34>)
    1456:	4798      	blx	r3
	xfer.rxbuf = 0;
    1458:	2300      	movs	r3, #0
    145a:	9302      	str	r3, [sp, #8]
	xfer.txbuf = (uint8_t *)buf;
    145c:	9601      	str	r6, [sp, #4]
	xfer.size  = length;
    145e:	9503      	str	r5, [sp, #12]
	return spi_m_sync_transfer(spi, &xfer);
    1460:	a901      	add	r1, sp, #4
    1462:	f1a4 000c 	sub.w	r0, r4, #12
    1466:	4b04      	ldr	r3, [pc, #16]	; (1478 <_spi_m_sync_io_write+0x38>)
    1468:	4798      	blx	r3
}
    146a:	b004      	add	sp, #16
    146c:	bd70      	pop	{r4, r5, r6, pc}
    146e:	bf00      	nop
    1470:	00005064 	.word	0x00005064
    1474:	00001b6d 	.word	0x00001b6d
    1478:	00001401 	.word	0x00001401

0000147c <_spi_m_sync_io_read>:
{
    147c:	b570      	push	{r4, r5, r6, lr}
    147e:	b084      	sub	sp, #16
    1480:	460e      	mov	r6, r1
    1482:	4615      	mov	r5, r2
	ASSERT(io);
    1484:	4604      	mov	r4, r0
    1486:	2287      	movs	r2, #135	; 0x87
    1488:	4908      	ldr	r1, [pc, #32]	; (14ac <_spi_m_sync_io_read+0x30>)
    148a:	3000      	adds	r0, #0
    148c:	bf18      	it	ne
    148e:	2001      	movne	r0, #1
    1490:	4b07      	ldr	r3, [pc, #28]	; (14b0 <_spi_m_sync_io_read+0x34>)
    1492:	4798      	blx	r3
	xfer.rxbuf = buf;
    1494:	9602      	str	r6, [sp, #8]
	xfer.txbuf = 0;
    1496:	2300      	movs	r3, #0
    1498:	9301      	str	r3, [sp, #4]
	xfer.size  = length;
    149a:	9503      	str	r5, [sp, #12]
	return spi_m_sync_transfer(spi, &xfer);
    149c:	a901      	add	r1, sp, #4
    149e:	f1a4 000c 	sub.w	r0, r4, #12
    14a2:	4b04      	ldr	r3, [pc, #16]	; (14b4 <_spi_m_sync_io_read+0x38>)
    14a4:	4798      	blx	r3
}
    14a6:	b004      	add	sp, #16
    14a8:	bd70      	pop	{r4, r5, r6, pc}
    14aa:	bf00      	nop
    14ac:	00005064 	.word	0x00005064
    14b0:	00001b6d 	.word	0x00001b6d
    14b4:	00001401 	.word	0x00001401

000014b8 <timer_add_timer_task>:
 * \param[in] head The pointer to the head of timer task list
 * \param[in] task The pointer to task to add
 * \param[in] time Current timer time
 */
static void timer_add_timer_task(struct list_descriptor *list, struct timer_task *const new_task, const uint32_t time)
{
    14b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    14ba:	4684      	mov	ip, r0
 * \return A pointer to the head of the given list or NULL if the list is
 * empty
 */
static inline void *list_get_head(const struct list_descriptor *const list)
{
	return (void *)list->head;
    14bc:	6807      	ldr	r7, [r0, #0]
	struct timer_task *it, *prev = NULL, *head = (struct timer_task *)list_get_head(list);

	if (!head) {
    14be:	b12f      	cbz	r7, 14cc <timer_add_timer_task+0x14>
		if (it->time_label <= time) {
			time_left = it->interval - (time - it->time_label);
		} else {
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
		}
		if (time_left >= new_task->interval)
    14c0:	688d      	ldr	r5, [r1, #8]
    14c2:	463c      	mov	r4, r7
    14c4:	2600      	movs	r6, #0
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
    14c6:	f1c2 0e01 	rsb	lr, r2, #1
    14ca:	e00b      	b.n	14e4 <timer_add_timer_task+0x2c>
		list_insert_as_head(list, new_task);
    14cc:	4b0e      	ldr	r3, [pc, #56]	; (1508 <timer_add_timer_task+0x50>)
    14ce:	4798      	blx	r3
		return;
    14d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
    14d2:	4473      	add	r3, lr
    14d4:	68a0      	ldr	r0, [r4, #8]
    14d6:	4403      	add	r3, r0
		if (time_left >= new_task->interval)
    14d8:	42ab      	cmp	r3, r5
    14da:	d20a      	bcs.n	14f2 <timer_add_timer_task+0x3a>
 * \return A pointer to the next list element or NULL if there is not next
 * element
 */
static inline void *list_get_next_element(const void *const element)
{
	return element ? ((struct list_element *)element)->next : NULL;
    14dc:	6823      	ldr	r3, [r4, #0]
    14de:	4626      	mov	r6, r4
	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
    14e0:	b153      	cbz	r3, 14f8 <timer_add_timer_task+0x40>
    14e2:	461c      	mov	r4, r3
		if (it->time_label <= time) {
    14e4:	6863      	ldr	r3, [r4, #4]
    14e6:	4293      	cmp	r3, r2
    14e8:	d8f3      	bhi.n	14d2 <timer_add_timer_task+0x1a>
			time_left = it->interval - (time - it->time_label);
    14ea:	68a0      	ldr	r0, [r4, #8]
    14ec:	4403      	add	r3, r0
    14ee:	1a9b      	subs	r3, r3, r2
    14f0:	e7f2      	b.n	14d8 <timer_add_timer_task+0x20>
			break;
		prev = it;
	}

	if (it == head) {
    14f2:	42a7      	cmp	r7, r4
    14f4:	d004      	beq.n	1500 <timer_add_timer_task+0x48>
    14f6:	4634      	mov	r4, r6
		list_insert_as_head(list, new_task);
	} else {
		list_insert_after(prev, new_task);
    14f8:	4620      	mov	r0, r4
    14fa:	4b04      	ldr	r3, [pc, #16]	; (150c <timer_add_timer_task+0x54>)
    14fc:	4798      	blx	r3
    14fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		list_insert_as_head(list, new_task);
    1500:	4660      	mov	r0, ip
    1502:	4b01      	ldr	r3, [pc, #4]	; (1508 <timer_add_timer_task+0x50>)
    1504:	4798      	blx	r3
    1506:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1508:	00001b95 	.word	0x00001b95
    150c:	00001bc1 	.word	0x00001bc1

00001510 <timer_process_counted>:

/**
 * \internal Process interrupts
 */
static void timer_process_counted(struct _timer_device *device)
{
    1510:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return (void *)list->head;
    1514:	6944      	ldr	r4, [r0, #20]
	struct timer_descriptor *timer = CONTAINER_OF(device, struct timer_descriptor, device);
	struct timer_task *      it    = (struct timer_task *)list_get_head(&timer->tasks);
	uint32_t                 time  = ++timer->time;
    1516:	6907      	ldr	r7, [r0, #16]
    1518:	3701      	adds	r7, #1
    151a:	6107      	str	r7, [r0, #16]

	if ((timer->flags & TIMER_FLAG_QUEUE_IS_TAKEN) || (timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED)) {
    151c:	7e03      	ldrb	r3, [r0, #24]
    151e:	f013 0f01 	tst.w	r3, #1
    1522:	d113      	bne.n	154c <timer_process_counted+0x3c>
    1524:	7e03      	ldrb	r3, [r0, #24]
    1526:	f013 0f02 	tst.w	r3, #2
    152a:	d10f      	bne.n	154c <timer_process_counted+0x3c>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
		return;
	}

	while (it && ((time - it->time_label) >= it->interval)) {
    152c:	b354      	cbz	r4, 1584 <timer_process_counted+0x74>
    152e:	6863      	ldr	r3, [r4, #4]
    1530:	1afb      	subs	r3, r7, r3
    1532:	68a2      	ldr	r2, [r4, #8]
    1534:	4293      	cmp	r3, r2
    1536:	d307      	bcc.n	1548 <timer_process_counted+0x38>
    1538:	4606      	mov	r6, r0
		struct timer_task *tmp = it;

		list_remove_head(&timer->tasks);
    153a:	f100 0814 	add.w	r8, r0, #20
    153e:	f8df 9048 	ldr.w	r9, [pc, #72]	; 1588 <timer_process_counted+0x78>
		if (TIMER_TASK_REPEAT == tmp->mode) {
			tmp->time_label = time;
			timer_add_timer_task(&timer->tasks, tmp, time);
    1542:	f8df a048 	ldr.w	sl, [pc, #72]	; 158c <timer_process_counted+0x7c>
    1546:	e012      	b.n	156e <timer_process_counted+0x5e>
    1548:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
    154c:	7e03      	ldrb	r3, [r0, #24]
    154e:	f043 0302 	orr.w	r3, r3, #2
    1552:	7603      	strb	r3, [r0, #24]
		return;
    1554:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    1558:	6975      	ldr	r5, [r6, #20]
		}
		it = (struct timer_task *)list_get_head(&timer->tasks);

		tmp->cb(tmp);
    155a:	68e3      	ldr	r3, [r4, #12]
    155c:	4620      	mov	r0, r4
    155e:	4798      	blx	r3
	while (it && ((time - it->time_label) >= it->interval)) {
    1560:	b185      	cbz	r5, 1584 <timer_process_counted+0x74>
		it = (struct timer_task *)list_get_head(&timer->tasks);
    1562:	462c      	mov	r4, r5
	while (it && ((time - it->time_label) >= it->interval)) {
    1564:	686b      	ldr	r3, [r5, #4]
    1566:	1afb      	subs	r3, r7, r3
    1568:	68aa      	ldr	r2, [r5, #8]
    156a:	4293      	cmp	r3, r2
    156c:	d30a      	bcc.n	1584 <timer_process_counted+0x74>
		list_remove_head(&timer->tasks);
    156e:	4640      	mov	r0, r8
    1570:	47c8      	blx	r9
		if (TIMER_TASK_REPEAT == tmp->mode) {
    1572:	7c23      	ldrb	r3, [r4, #16]
    1574:	2b01      	cmp	r3, #1
    1576:	d1ef      	bne.n	1558 <timer_process_counted+0x48>
			tmp->time_label = time;
    1578:	6067      	str	r7, [r4, #4]
			timer_add_timer_task(&timer->tasks, tmp, time);
    157a:	463a      	mov	r2, r7
    157c:	4621      	mov	r1, r4
    157e:	4640      	mov	r0, r8
    1580:	47d0      	blx	sl
    1582:	e7e9      	b.n	1558 <timer_process_counted+0x48>
    1584:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    1588:	00001c09 	.word	0x00001c09
    158c:	000014b9 	.word	0x000014b9

00001590 <timer_init>:
{
    1590:	b538      	push	{r3, r4, r5, lr}
    1592:	460d      	mov	r5, r1
	ASSERT(descr && hw);
    1594:	4604      	mov	r4, r0
    1596:	b178      	cbz	r0, 15b8 <timer_init+0x28>
    1598:	1c08      	adds	r0, r1, #0
    159a:	bf18      	it	ne
    159c:	2001      	movne	r0, #1
    159e:	223b      	movs	r2, #59	; 0x3b
    15a0:	4906      	ldr	r1, [pc, #24]	; (15bc <timer_init+0x2c>)
    15a2:	4b07      	ldr	r3, [pc, #28]	; (15c0 <timer_init+0x30>)
    15a4:	4798      	blx	r3
	_timer_init(&descr->device, hw);
    15a6:	4629      	mov	r1, r5
    15a8:	4620      	mov	r0, r4
    15aa:	4b06      	ldr	r3, [pc, #24]	; (15c4 <timer_init+0x34>)
    15ac:	4798      	blx	r3
	descr->time                           = 0;
    15ae:	2000      	movs	r0, #0
    15b0:	6120      	str	r0, [r4, #16]
	descr->device.timer_cb.period_expired = timer_process_counted;
    15b2:	4b05      	ldr	r3, [pc, #20]	; (15c8 <timer_init+0x38>)
    15b4:	6023      	str	r3, [r4, #0]
}
    15b6:	bd38      	pop	{r3, r4, r5, pc}
    15b8:	2000      	movs	r0, #0
    15ba:	e7f0      	b.n	159e <timer_init+0xe>
    15bc:	00005080 	.word	0x00005080
    15c0:	00001b6d 	.word	0x00001b6d
    15c4:	0000206d 	.word	0x0000206d
    15c8:	00001511 	.word	0x00001511

000015cc <_usb_d_find_ep>:
 */
static int8_t _usb_d_find_ep(const uint8_t ep)
{
	int8_t i;
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    15cc:	4b0f      	ldr	r3, [pc, #60]	; (160c <_usb_d_find_ep+0x40>)
    15ce:	7859      	ldrb	r1, [r3, #1]
    15d0:	4288      	cmp	r0, r1
    15d2:	d018      	beq.n	1606 <_usb_d_find_ep+0x3a>
{
    15d4:	b430      	push	{r4, r5}
    15d6:	461a      	mov	r2, r3
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    15d8:	2300      	movs	r3, #0
			return i;
		}
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    15da:	f000 050f 	and.w	r5, r0, #15
    15de:	e007      	b.n	15f0 <_usb_d_find_ep+0x24>
    15e0:	3301      	adds	r3, #1
    15e2:	b25b      	sxtb	r3, r3
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    15e4:	2b04      	cmp	r3, #4
    15e6:	d009      	beq.n	15fc <_usb_d_find_ep+0x30>
    15e8:	3220      	adds	r2, #32
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    15ea:	7851      	ldrb	r1, [r2, #1]
    15ec:	4281      	cmp	r1, r0
    15ee:	d007      	beq.n	1600 <_usb_d_find_ep+0x34>
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
    15f0:	7814      	ldrb	r4, [r2, #0]
    15f2:	2c00      	cmp	r4, #0
    15f4:	d1f4      	bne.n	15e0 <_usb_d_find_ep+0x14>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    15f6:	428d      	cmp	r5, r1
    15f8:	d1f2      	bne.n	15e0 <_usb_d_find_ep+0x14>
    15fa:	e001      	b.n	1600 <_usb_d_find_ep+0x34>
			return i;
		}
	}
	return -1;
    15fc:	f04f 33ff 	mov.w	r3, #4294967295
}
    1600:	4618      	mov	r0, r3
    1602:	bc30      	pop	{r4, r5}
    1604:	4770      	bx	lr
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    1606:	2300      	movs	r3, #0
}
    1608:	4618      	mov	r0, r3
    160a:	4770      	bx	lr
    160c:	20000648 	.word	0x20000648

00001610 <usb_d_dummy_cb_false>:
{
	(void)unused0;
	(void)unused1;
	(void)unused2;
	return false;
}
    1610:	2000      	movs	r0, #0
    1612:	4770      	bx	lr

00001614 <usb_d_cb_trans_more>:
 * \brief Callback invoked when request more data
 * \param[in] ep Endpoint number with transfer direction on bit 8.
 * \param[in] transfered Number of bytes transfered.
 */
static bool usb_d_cb_trans_more(const uint8_t ep, const uint32_t transfered)
{
    1614:	b538      	push	{r3, r4, r5, lr}
    1616:	4604      	mov	r4, r0
    1618:	460d      	mov	r5, r1
	int8_t           ep_index = _usb_d_find_ep(ep);
    161a:	4b09      	ldr	r3, [pc, #36]	; (1640 <usb_d_cb_trans_more+0x2c>)
    161c:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ept->xfer.hdr.state == USB_EP_S_X_DATA) {
    161e:	4b09      	ldr	r3, [pc, #36]	; (1644 <usb_d_cb_trans_more+0x30>)
    1620:	eb03 1340 	add.w	r3, r3, r0, lsl #5
    1624:	789b      	ldrb	r3, [r3, #2]
    1626:	2b03      	cmp	r3, #3
    1628:	d001      	beq.n	162e <usb_d_cb_trans_more+0x1a>
		return ept->callbacks.more(ep, transfered);
	}
	return false;
    162a:	2000      	movs	r0, #0
}
    162c:	bd38      	pop	{r3, r4, r5, pc}
		return ept->callbacks.more(ep, transfered);
    162e:	4b05      	ldr	r3, [pc, #20]	; (1644 <usb_d_cb_trans_more+0x30>)
    1630:	eb03 1040 	add.w	r0, r3, r0, lsl #5
    1634:	6983      	ldr	r3, [r0, #24]
    1636:	4629      	mov	r1, r5
    1638:	4620      	mov	r0, r4
    163a:	4798      	blx	r3
    163c:	bd38      	pop	{r3, r4, r5, pc}
    163e:	bf00      	nop
    1640:	000015cd 	.word	0x000015cd
    1644:	20000648 	.word	0x20000648

00001648 <_usb_d_cb_trans_done>:

/**
 * Callback when USB transactions are finished.
 */
static void _usb_d_cb_trans_done(const uint8_t ep, const int32_t code, const uint32_t transferred)
{
    1648:	b5f0      	push	{r4, r5, r6, r7, lr}
    164a:	b085      	sub	sp, #20
    164c:	4606      	mov	r6, r0
    164e:	460d      	mov	r5, r1
    1650:	4617      	mov	r7, r2
	int8_t           ep_index = _usb_d_find_ep(ep);
    1652:	4b4d      	ldr	r3, [pc, #308]	; (1788 <_usb_d_cb_trans_done+0x140>)
    1654:	4798      	blx	r3
    1656:	4604      	mov	r4, r0
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];

	if (code == USB_TRANS_DONE) {
    1658:	2d00      	cmp	r5, #0
    165a:	d15b      	bne.n	1714 <_usb_d_cb_trans_done+0xcc>
		ept->xfer.hdr.status = USB_XFER_DONE;
    165c:	4a4b      	ldr	r2, [pc, #300]	; (178c <_usb_d_cb_trans_done+0x144>)
    165e:	0143      	lsls	r3, r0, #5
    1660:	18d1      	adds	r1, r2, r3
    1662:	2000      	movs	r0, #0
    1664:	70c8      	strb	r0, [r1, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    1666:	5cd3      	ldrb	r3, [r2, r3]
    1668:	b173      	cbz	r3, 1688 <_usb_d_cb_trans_done+0x40>
			usb_d_ctrl_trans_done(ept);
			return;
		}
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    166a:	4b48      	ldr	r3, [pc, #288]	; (178c <_usb_d_cb_trans_done+0x144>)
    166c:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    1670:	2201      	movs	r2, #1
    1672:	709a      	strb	r2, [r3, #2]
	} else {
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
		ept->xfer.hdr.status = USB_XFER_ERROR;
	}

	ept->callbacks.xfer(ep, (enum usb_xfer_code)ept->xfer.hdr.status, (void *)transferred);
    1674:	4845      	ldr	r0, [pc, #276]	; (178c <_usb_d_cb_trans_done+0x144>)
    1676:	eb00 1044 	add.w	r0, r0, r4, lsl #5
    167a:	69c3      	ldr	r3, [r0, #28]
    167c:	463a      	mov	r2, r7
    167e:	78c1      	ldrb	r1, [r0, #3]
    1680:	4630      	mov	r0, r6
    1682:	4798      	blx	r3
}
    1684:	b005      	add	sp, #20
    1686:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (state == USB_EP_S_X_DATA) {
    1688:	788b      	ldrb	r3, [r1, #2]
    168a:	2b03      	cmp	r3, #3
    168c:	d00b      	beq.n	16a6 <_usb_d_cb_trans_done+0x5e>
		ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DONE, ept->xfer.req);
    168e:	483f      	ldr	r0, [pc, #252]	; (178c <_usb_d_cb_trans_done+0x144>)
    1690:	eb00 1244 	add.w	r2, r0, r4, lsl #5
    1694:	4614      	mov	r4, r2
    1696:	69d3      	ldr	r3, [r2, #28]
    1698:	320c      	adds	r2, #12
    169a:	2100      	movs	r1, #0
    169c:	7860      	ldrb	r0, [r4, #1]
    169e:	4798      	blx	r3
		ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    16a0:	2302      	movs	r3, #2
    16a2:	70a3      	strb	r3, [r4, #2]
    16a4:	e7ee      	b.n	1684 <_usb_d_cb_trans_done+0x3c>
	bool    req_dir = USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN;
    16a6:	460b      	mov	r3, r1
    16a8:	f991 500c 	ldrsb.w	r5, [r1, #12]
		bool err = ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DATA, ept->xfer.req);
    16ac:	460a      	mov	r2, r1
    16ae:	69ce      	ldr	r6, [r1, #28]
    16b0:	320c      	adds	r2, #12
    16b2:	2101      	movs	r1, #1
    16b4:	7858      	ldrb	r0, [r3, #1]
    16b6:	47b0      	blx	r6
		if (err) {
    16b8:	b1a0      	cbz	r0, 16e4 <_usb_d_cb_trans_done+0x9c>
			ept->xfer.hdr.state  = USB_EP_S_HALTED;
    16ba:	4b34      	ldr	r3, [pc, #208]	; (178c <_usb_d_cb_trans_done+0x144>)
    16bc:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    16c0:	2205      	movs	r2, #5
    16c2:	709a      	strb	r2, [r3, #2]
			ept->xfer.hdr.status = USB_XFER_HALT;
    16c4:	2202      	movs	r2, #2
    16c6:	70da      	strb	r2, [r3, #3]
			_usb_d_dev_ep_stall(req_dir ? ept->xfer.hdr.ep : (ept->xfer.hdr.ep | USB_EP_DIR), USB_EP_STALL_SET);
    16c8:	2d00      	cmp	r5, #0
    16ca:	db09      	blt.n	16e0 <_usb_d_cb_trans_done+0x98>
    16cc:	482f      	ldr	r0, [pc, #188]	; (178c <_usb_d_cb_trans_done+0x144>)
    16ce:	eb00 1044 	add.w	r0, r0, r4, lsl #5
    16d2:	7840      	ldrb	r0, [r0, #1]
    16d4:	f040 0080 	orr.w	r0, r0, #128	; 0x80
    16d8:	2101      	movs	r1, #1
    16da:	4b2d      	ldr	r3, [pc, #180]	; (1790 <_usb_d_cb_trans_done+0x148>)
    16dc:	4798      	blx	r3
    16de:	e7d1      	b.n	1684 <_usb_d_cb_trans_done+0x3c>
    16e0:	7858      	ldrb	r0, [r3, #1]
    16e2:	e7f9      	b.n	16d8 <_usb_d_cb_trans_done+0x90>
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    16e4:	4829      	ldr	r0, [pc, #164]	; (178c <_usb_d_cb_trans_done+0x144>)
    16e6:	eb00 1044 	add.w	r0, r0, r4, lsl #5
    16ea:	2304      	movs	r3, #4
    16ec:	7083      	strb	r3, [r0, #2]
			_usb_d_trans(ept->xfer.hdr.ep, !req_dir, NULL, 0, 1);
    16ee:	7843      	ldrb	r3, [r0, #1]
	struct usb_d_transfer trans
    16f0:	2200      	movs	r2, #0
    16f2:	9201      	str	r2, [sp, #4]
    16f4:	9202      	str	r2, [sp, #8]
    16f6:	4295      	cmp	r5, r2
    16f8:	bfac      	ite	ge
    16fa:	f043 0380 	orrge.w	r3, r3, #128	; 0x80
    16fe:	f003 030f 	andlt.w	r3, r3, #15
    1702:	f88d 300c 	strb.w	r3, [sp, #12]
    1706:	2301      	movs	r3, #1
    1708:	f88d 300d 	strb.w	r3, [sp, #13]
	return _usb_d_dev_ep_trans(&trans);
    170c:	a801      	add	r0, sp, #4
    170e:	4b21      	ldr	r3, [pc, #132]	; (1794 <_usb_d_cb_trans_done+0x14c>)
    1710:	4798      	blx	r3
    1712:	e7b7      	b.n	1684 <_usb_d_cb_trans_done+0x3c>
	} else if (code == USB_TRANS_STALL) {
    1714:	2d01      	cmp	r5, #1
    1716:	d00a      	beq.n	172e <_usb_d_cb_trans_done+0xe6>
	} else if (code == USB_TRANS_ABORT) {
    1718:	2d02      	cmp	r5, #2
    171a:	d01c      	beq.n	1756 <_usb_d_cb_trans_done+0x10e>
	} else if (code == USB_TRANS_RESET) {
    171c:	2d03      	cmp	r5, #3
    171e:	d02a      	beq.n	1776 <_usb_d_cb_trans_done+0x12e>
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
    1720:	4b1a      	ldr	r3, [pc, #104]	; (178c <_usb_d_cb_trans_done+0x144>)
    1722:	eb03 1340 	add.w	r3, r3, r0, lsl #5
    1726:	2206      	movs	r2, #6
    1728:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_ERROR;
    172a:	70da      	strb	r2, [r3, #3]
    172c:	e7a2      	b.n	1674 <_usb_d_cb_trans_done+0x2c>
		ept->xfer.hdr.status = USB_XFER_HALT;
    172e:	4a17      	ldr	r2, [pc, #92]	; (178c <_usb_d_cb_trans_done+0x144>)
    1730:	0143      	lsls	r3, r0, #5
    1732:	18d1      	adds	r1, r2, r3
    1734:	2002      	movs	r0, #2
    1736:	70c8      	strb	r0, [r1, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    1738:	5cd3      	ldrb	r3, [r2, r3]
    173a:	b12b      	cbz	r3, 1748 <_usb_d_cb_trans_done+0x100>
			ept->xfer.hdr.state = USB_EP_S_HALTED;
    173c:	4b13      	ldr	r3, [pc, #76]	; (178c <_usb_d_cb_trans_done+0x144>)
    173e:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    1742:	2205      	movs	r2, #5
    1744:	709a      	strb	r2, [r3, #2]
    1746:	e795      	b.n	1674 <_usb_d_cb_trans_done+0x2c>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    1748:	460b      	mov	r3, r1
    174a:	7098      	strb	r0, [r3, #2]
			_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    174c:	2100      	movs	r1, #0
    174e:	4630      	mov	r0, r6
    1750:	4b0f      	ldr	r3, [pc, #60]	; (1790 <_usb_d_cb_trans_done+0x148>)
    1752:	4798      	blx	r3
    1754:	e78e      	b.n	1674 <_usb_d_cb_trans_done+0x2c>
		ept->xfer.hdr.status = USB_XFER_ABORT;
    1756:	4a0d      	ldr	r2, [pc, #52]	; (178c <_usb_d_cb_trans_done+0x144>)
    1758:	0143      	lsls	r3, r0, #5
    175a:	18d1      	adds	r1, r2, r3
    175c:	2004      	movs	r0, #4
    175e:	70c8      	strb	r0, [r1, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    1760:	5cd3      	ldrb	r3, [r2, r3]
    1762:	b12b      	cbz	r3, 1770 <_usb_d_cb_trans_done+0x128>
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    1764:	4b09      	ldr	r3, [pc, #36]	; (178c <_usb_d_cb_trans_done+0x144>)
    1766:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    176a:	2201      	movs	r2, #1
    176c:	709a      	strb	r2, [r3, #2]
    176e:	e781      	b.n	1674 <_usb_d_cb_trans_done+0x2c>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    1770:	2302      	movs	r3, #2
    1772:	708b      	strb	r3, [r1, #2]
			return;
    1774:	e786      	b.n	1684 <_usb_d_cb_trans_done+0x3c>
		ept->xfer.hdr.state  = USB_EP_S_DISABLED;
    1776:	4b05      	ldr	r3, [pc, #20]	; (178c <_usb_d_cb_trans_done+0x144>)
    1778:	eb03 1340 	add.w	r3, r3, r0, lsl #5
    177c:	2200      	movs	r2, #0
    177e:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_RESET;
    1780:	2205      	movs	r2, #5
    1782:	70da      	strb	r2, [r3, #3]
    1784:	e776      	b.n	1674 <_usb_d_cb_trans_done+0x2c>
    1786:	bf00      	nop
    1788:	000015cd 	.word	0x000015cd
    178c:	20000648 	.word	0x20000648
    1790:	000038b1 	.word	0x000038b1
    1794:	00003a59 	.word	0x00003a59

00001798 <usb_d_cb_trans_setup>:
{
    1798:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    179c:	4605      	mov	r5, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
    179e:	4b1c      	ldr	r3, [pc, #112]	; (1810 <usb_d_cb_trans_setup+0x78>)
    17a0:	4798      	blx	r3
    17a2:	4606      	mov	r6, r0
	uint8_t *        req      = ept->xfer.req;
    17a4:	4c1b      	ldr	r4, [pc, #108]	; (1814 <usb_d_cb_trans_setup+0x7c>)
    17a6:	eb04 1440 	add.w	r4, r4, r0, lsl #5
    17aa:	340c      	adds	r4, #12
	uint8_t n = _usb_d_dev_ep_read_req(ep, req);
    17ac:	4621      	mov	r1, r4
    17ae:	4628      	mov	r0, r5
    17b0:	4b19      	ldr	r3, [pc, #100]	; (1818 <usb_d_cb_trans_setup+0x80>)
    17b2:	4798      	blx	r3
	if (n != 8) {
    17b4:	b2c0      	uxtb	r0, r0
    17b6:	2808      	cmp	r0, #8
    17b8:	d009      	beq.n	17ce <usb_d_cb_trans_setup+0x36>
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    17ba:	2101      	movs	r1, #1
    17bc:	4628      	mov	r0, r5
    17be:	4c17      	ldr	r4, [pc, #92]	; (181c <usb_d_cb_trans_setup+0x84>)
    17c0:	47a0      	blx	r4
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    17c2:	2101      	movs	r1, #1
    17c4:	f045 0080 	orr.w	r0, r5, #128	; 0x80
    17c8:	47a0      	blx	r4
		return;
    17ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    17ce:	2100      	movs	r1, #0
    17d0:	4628      	mov	r0, r5
    17d2:	4f12      	ldr	r7, [pc, #72]	; (181c <usb_d_cb_trans_setup+0x84>)
    17d4:	47b8      	blx	r7
	_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_CLR);
    17d6:	f045 0880 	orr.w	r8, r5, #128	; 0x80
    17da:	2100      	movs	r1, #0
    17dc:	4640      	mov	r0, r8
    17de:	47b8      	blx	r7
	ept->xfer.hdr.state = USB_EP_S_IDLE;
    17e0:	4b0c      	ldr	r3, [pc, #48]	; (1814 <usb_d_cb_trans_setup+0x7c>)
    17e2:	eb03 1346 	add.w	r3, r3, r6, lsl #5
    17e6:	2201      	movs	r2, #1
    17e8:	709a      	strb	r2, [r3, #2]
	if (!ept->callbacks.req(ep, req)) {
    17ea:	695b      	ldr	r3, [r3, #20]
    17ec:	4621      	mov	r1, r4
    17ee:	4628      	mov	r0, r5
    17f0:	4798      	blx	r3
    17f2:	b108      	cbz	r0, 17f8 <usb_d_cb_trans_setup+0x60>
    17f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ept->xfer.hdr.state = USB_EP_S_HALTED;
    17f8:	4b06      	ldr	r3, [pc, #24]	; (1814 <usb_d_cb_trans_setup+0x7c>)
    17fa:	eb03 1646 	add.w	r6, r3, r6, lsl #5
    17fe:	2305      	movs	r3, #5
    1800:	70b3      	strb	r3, [r6, #2]
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    1802:	2101      	movs	r1, #1
    1804:	4628      	mov	r0, r5
    1806:	47b8      	blx	r7
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    1808:	2101      	movs	r1, #1
    180a:	4640      	mov	r0, r8
    180c:	47b8      	blx	r7
    180e:	e7f1      	b.n	17f4 <usb_d_cb_trans_setup+0x5c>
    1810:	000015cd 	.word	0x000015cd
    1814:	20000648 	.word	0x20000648
    1818:	000039f9 	.word	0x000039f9
    181c:	000038b1 	.word	0x000038b1

00001820 <usb_d_init>:

int32_t usb_d_init(void)
{
    1820:	b510      	push	{r4, lr}
	int32_t rc = _usb_d_dev_init();
    1822:	4b11      	ldr	r3, [pc, #68]	; (1868 <usb_d_init+0x48>)
    1824:	4798      	blx	r3
	uint8_t i;
	if (rc < 0) {
    1826:	2800      	cmp	r0, #0
    1828:	db1c      	blt.n	1864 <usb_d_init+0x44>
		return rc;
	}
	memset(usb_d_inst.ep, 0x00, sizeof(struct usb_d_ep) * CONF_USB_D_NUM_EP_SP);
    182a:	4c10      	ldr	r4, [pc, #64]	; (186c <usb_d_init+0x4c>)
    182c:	2280      	movs	r2, #128	; 0x80
    182e:	2100      	movs	r1, #0
    1830:	4620      	mov	r0, r4
    1832:	4b0f      	ldr	r3, [pc, #60]	; (1870 <usb_d_init+0x50>)
    1834:	4798      	blx	r3
    1836:	4623      	mov	r3, r4
    1838:	f104 0080 	add.w	r0, r4, #128	; 0x80
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
    183c:	21ff      	movs	r1, #255	; 0xff
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    183e:	4a0d      	ldr	r2, [pc, #52]	; (1874 <usb_d_init+0x54>)
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
    1840:	7059      	strb	r1, [r3, #1]
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    1842:	615a      	str	r2, [r3, #20]
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
    1844:	619a      	str	r2, [r3, #24]
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
    1846:	61da      	str	r2, [r3, #28]
    1848:	3320      	adds	r3, #32
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    184a:	4283      	cmp	r3, r0
    184c:	d1f8      	bne.n	1840 <usb_d_init+0x20>
	}
	/* Handles device driver endpoint callbacks to build transfer. */
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_SETUP, (FUNC_PTR)usb_d_cb_trans_setup);
    184e:	490a      	ldr	r1, [pc, #40]	; (1878 <usb_d_init+0x58>)
    1850:	2000      	movs	r0, #0
    1852:	4c0a      	ldr	r4, [pc, #40]	; (187c <usb_d_init+0x5c>)
    1854:	47a0      	blx	r4
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_MORE, (FUNC_PTR)usb_d_cb_trans_more);
    1856:	490a      	ldr	r1, [pc, #40]	; (1880 <usb_d_init+0x60>)
    1858:	2001      	movs	r0, #1
    185a:	47a0      	blx	r4
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_DONE, (FUNC_PTR)_usb_d_cb_trans_done);
    185c:	4909      	ldr	r1, [pc, #36]	; (1884 <usb_d_init+0x64>)
    185e:	2002      	movs	r0, #2
    1860:	47a0      	blx	r4
	return ERR_NONE;
    1862:	2000      	movs	r0, #0
}
    1864:	bd10      	pop	{r4, pc}
    1866:	bf00      	nop
    1868:	000032a5 	.word	0x000032a5
    186c:	20000648 	.word	0x20000648
    1870:	00004a25 	.word	0x00004a25
    1874:	00001611 	.word	0x00001611
    1878:	00001799 	.word	0x00001799
    187c:	00003c5d 	.word	0x00003c5d
    1880:	00001615 	.word	0x00001615
    1884:	00001649 	.word	0x00001649

00001888 <usb_d_register_callback>:
{
	_usb_d_dev_deinit();
}

void usb_d_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
    1888:	b508      	push	{r3, lr}
	/* Directly uses device driver callback. */
	_usb_d_dev_register_callback(type, func);
    188a:	4b01      	ldr	r3, [pc, #4]	; (1890 <usb_d_register_callback+0x8>)
    188c:	4798      	blx	r3
    188e:	bd08      	pop	{r3, pc}
    1890:	00003c39 	.word	0x00003c39

00001894 <usb_d_enable>:
}

int32_t usb_d_enable(void)
{
    1894:	b508      	push	{r3, lr}
	return _usb_d_dev_enable();
    1896:	4b01      	ldr	r3, [pc, #4]	; (189c <usb_d_enable+0x8>)
    1898:	4798      	blx	r3
}
    189a:	bd08      	pop	{r3, pc}
    189c:	000033a1 	.word	0x000033a1

000018a0 <usb_d_attach>:
{
	_usb_d_dev_disable();
}

void usb_d_attach(void)
{
    18a0:	b508      	push	{r3, lr}
	_usb_d_dev_attach();
    18a2:	4b01      	ldr	r3, [pc, #4]	; (18a8 <usb_d_attach+0x8>)
    18a4:	4798      	blx	r3
    18a6:	bd08      	pop	{r3, pc}
    18a8:	0000340d 	.word	0x0000340d

000018ac <usb_d_set_address>:
{
	return _usb_d_dev_get_uframe_n();
}

void usb_d_set_address(const uint8_t addr)
{
    18ac:	b508      	push	{r3, lr}
	_usb_d_dev_set_address(addr);
    18ae:	4b01      	ldr	r3, [pc, #4]	; (18b4 <usb_d_set_address+0x8>)
    18b0:	4798      	blx	r3
    18b2:	bd08      	pop	{r3, pc}
    18b4:	0000341f 	.word	0x0000341f

000018b8 <usb_d_ep_init>:
{
	return usb_d_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_size);
}

int32_t usb_d_ep_init(const uint8_t ep, const uint8_t attr, const uint16_t max_pkt_size)
{
    18b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    18ba:	4606      	mov	r6, r0
    18bc:	460c      	mov	r4, r1
    18be:	4617      	mov	r7, r2
	int32_t          rc;
	int8_t           ep_index = _usb_d_find_ep(ep);
    18c0:	4b0f      	ldr	r3, [pc, #60]	; (1900 <usb_d_ep_init+0x48>)
    18c2:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ep_index >= 0) {
    18c4:	2800      	cmp	r0, #0
    18c6:	da14      	bge.n	18f2 <usb_d_ep_init+0x3a>
		return -USB_ERR_REDO;
	} else {
		ep_index = _usb_d_find_ep(0xFF);
    18c8:	20ff      	movs	r0, #255	; 0xff
    18ca:	4b0d      	ldr	r3, [pc, #52]	; (1900 <usb_d_ep_init+0x48>)
    18cc:	4798      	blx	r3
		if (ep_index < 0) {
    18ce:	1e05      	subs	r5, r0, #0
    18d0:	db12      	blt.n	18f8 <usb_d_ep_init+0x40>
			return -USB_ERR_ALLOC_FAIL;
		}
		ept = &usb_d_inst.ep[ep_index];
	}
	rc = _usb_d_dev_ep_init(ep, attr, max_pkt_size);
    18d2:	463a      	mov	r2, r7
    18d4:	4621      	mov	r1, r4
    18d6:	4630      	mov	r0, r6
    18d8:	4b0a      	ldr	r3, [pc, #40]	; (1904 <usb_d_ep_init+0x4c>)
    18da:	4798      	blx	r3
	if (rc < 0) {
    18dc:	2800      	cmp	r0, #0
    18de:	db0d      	blt.n	18fc <usb_d_ep_init+0x44>
		return rc;
	}
	ept->xfer.hdr.ep   = ep;
    18e0:	4b09      	ldr	r3, [pc, #36]	; (1908 <usb_d_ep_init+0x50>)
    18e2:	0168      	lsls	r0, r5, #5
    18e4:	181a      	adds	r2, r3, r0
    18e6:	7056      	strb	r6, [r2, #1]
	ept->xfer.hdr.type = attr & USB_EP_XTYPE_MASK;
    18e8:	f004 0403 	and.w	r4, r4, #3
    18ec:	541c      	strb	r4, [r3, r0]
	return ERR_NONE;
    18ee:	2000      	movs	r0, #0
    18f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -USB_ERR_REDO;
    18f2:	f06f 0013 	mvn.w	r0, #19
    18f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return -USB_ERR_ALLOC_FAIL;
    18f8:	f06f 0014 	mvn.w	r0, #20
}
    18fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    18fe:	bf00      	nop
    1900:	000015cd 	.word	0x000015cd
    1904:	0000342d 	.word	0x0000342d
    1908:	20000648 	.word	0x20000648

0000190c <usb_d_ep0_init>:
{
    190c:	b508      	push	{r3, lr}
	return usb_d_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_size);
    190e:	4602      	mov	r2, r0
    1910:	2100      	movs	r1, #0
    1912:	4608      	mov	r0, r1
    1914:	4b01      	ldr	r3, [pc, #4]	; (191c <usb_d_ep0_init+0x10>)
    1916:	4798      	blx	r3
}
    1918:	bd08      	pop	{r3, pc}
    191a:	bf00      	nop
    191c:	000018b9 	.word	0x000018b9

00001920 <usb_d_ep_deinit>:

void usb_d_ep_deinit(const uint8_t ep)
{
    1920:	b538      	push	{r3, r4, r5, lr}
    1922:	4605      	mov	r5, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
    1924:	4b06      	ldr	r3, [pc, #24]	; (1940 <usb_d_ep_deinit+0x20>)
    1926:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ep_index < 0) {
    1928:	1e04      	subs	r4, r0, #0
    192a:	db07      	blt.n	193c <usb_d_ep_deinit+0x1c>
		return;
	}
	_usb_d_dev_ep_deinit(ep);
    192c:	4628      	mov	r0, r5
    192e:	4b05      	ldr	r3, [pc, #20]	; (1944 <usb_d_ep_deinit+0x24>)
    1930:	4798      	blx	r3
	ept->xfer.hdr.ep = 0xFF;
    1932:	4805      	ldr	r0, [pc, #20]	; (1948 <usb_d_ep_deinit+0x28>)
    1934:	eb00 1044 	add.w	r0, r0, r4, lsl #5
    1938:	23ff      	movs	r3, #255	; 0xff
    193a:	7043      	strb	r3, [r0, #1]
    193c:	bd38      	pop	{r3, r4, r5, pc}
    193e:	bf00      	nop
    1940:	000015cd 	.word	0x000015cd
    1944:	00003545 	.word	0x00003545
    1948:	20000648 	.word	0x20000648

0000194c <usb_d_ep_enable>:
}

int32_t usb_d_ep_enable(const uint8_t ep)
{
    194c:	b538      	push	{r3, r4, r5, lr}
    194e:	4605      	mov	r5, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
    1950:	4b0e      	ldr	r3, [pc, #56]	; (198c <usb_d_ep_enable+0x40>)
    1952:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	int32_t          rc;
	if (ep_index < 0) {
    1954:	1e04      	subs	r4, r0, #0
    1956:	db16      	blt.n	1986 <usb_d_ep_enable+0x3a>
		return -USB_ERR_PARAM;
	}
	ept->xfer.hdr.state = (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) ? USB_EP_S_X_SETUP : USB_EP_S_IDLE;
    1958:	0163      	lsls	r3, r4, #5
    195a:	4a0d      	ldr	r2, [pc, #52]	; (1990 <usb_d_ep_enable+0x44>)
    195c:	5cd3      	ldrb	r3, [r2, r3]
    195e:	2b00      	cmp	r3, #0
    1960:	bf0c      	ite	eq
    1962:	2202      	moveq	r2, #2
    1964:	2201      	movne	r2, #1
    1966:	4b0a      	ldr	r3, [pc, #40]	; (1990 <usb_d_ep_enable+0x44>)
    1968:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    196c:	709a      	strb	r2, [r3, #2]
	rc                  = _usb_d_dev_ep_enable(ep);
    196e:	4628      	mov	r0, r5
    1970:	4b08      	ldr	r3, [pc, #32]	; (1994 <usb_d_ep_enable+0x48>)
    1972:	4798      	blx	r3
	if (rc < 0) {
    1974:	2800      	cmp	r0, #0
    1976:	db00      	blt.n	197a <usb_d_ep_enable+0x2e>
		ept->xfer.hdr.state = USB_EP_S_DISABLED;
	}
	return rc;
}
    1978:	bd38      	pop	{r3, r4, r5, pc}
		ept->xfer.hdr.state = USB_EP_S_DISABLED;
    197a:	4b05      	ldr	r3, [pc, #20]	; (1990 <usb_d_ep_enable+0x44>)
    197c:	eb03 1444 	add.w	r4, r3, r4, lsl #5
    1980:	2300      	movs	r3, #0
    1982:	70a3      	strb	r3, [r4, #2]
    1984:	bd38      	pop	{r3, r4, r5, pc}
		return -USB_ERR_PARAM;
    1986:	f06f 0011 	mvn.w	r0, #17
    198a:	e7f5      	b.n	1978 <usb_d_ep_enable+0x2c>
    198c:	000015cd 	.word	0x000015cd
    1990:	20000648 	.word	0x20000648
    1994:	00003609 	.word	0x00003609

00001998 <usb_d_ep_transfer>:
	}
	return usb_d_inst.ep[ep_index].xfer.req;
}

int32_t usb_d_ep_transfer(const struct usb_d_transfer *xfer)
{
    1998:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    199c:	b086      	sub	sp, #24
    199e:	4604      	mov	r4, r0
	int8_t                ep_index = _usb_d_find_ep(xfer->ep);
    19a0:	7a07      	ldrb	r7, [r0, #8]
    19a2:	4638      	mov	r0, r7
    19a4:	4b3f      	ldr	r3, [pc, #252]	; (1aa4 <usb_d_ep_transfer+0x10c>)
    19a6:	4798      	blx	r3
	struct usb_d_ep *     ept      = &usb_d_inst.ep[ep_index];
	bool                  dir = USB_EP_GET_DIR(xfer->ep), zlp = xfer->zlp;
    19a8:	7a65      	ldrb	r5, [r4, #9]
	uint32_t              len = xfer->size;
    19aa:	f8d4 8004 	ldr.w	r8, [r4, #4]
	int32_t               rc;
	volatile uint8_t      state;
	volatile hal_atomic_t flags;

	if (ep_index < 0) {
    19ae:	1e06      	subs	r6, r0, #0
    19b0:	db72      	blt.n	1a98 <usb_d_ep_transfer+0x100>
		return -USB_ERR_PARAM;
	}

	atomic_enter_critical(&flags);
    19b2:	a804      	add	r0, sp, #16
    19b4:	4b3c      	ldr	r3, [pc, #240]	; (1aa8 <usb_d_ep_transfer+0x110>)
    19b6:	4798      	blx	r3
	state = ept->xfer.hdr.state;
    19b8:	4b3c      	ldr	r3, [pc, #240]	; (1aac <usb_d_ep_transfer+0x114>)
    19ba:	eb03 1346 	add.w	r3, r3, r6, lsl #5
    19be:	789b      	ldrb	r3, [r3, #2]
    19c0:	f88d 3017 	strb.w	r3, [sp, #23]
	if (state == USB_EP_S_IDLE) {
    19c4:	f89d 3017 	ldrb.w	r3, [sp, #23]
    19c8:	b2db      	uxtb	r3, r3
    19ca:	2b01      	cmp	r3, #1
    19cc:	d011      	beq.n	19f2 <usb_d_ep_transfer+0x5a>
		ept->xfer.hdr.state = USB_EP_S_X_DATA;
		atomic_leave_critical(&flags);
	} else {
		atomic_leave_critical(&flags);
    19ce:	a804      	add	r0, sp, #16
    19d0:	4b37      	ldr	r3, [pc, #220]	; (1ab0 <usb_d_ep_transfer+0x118>)
    19d2:	4798      	blx	r3
		switch (state) {
    19d4:	f89d 3017 	ldrb.w	r3, [sp, #23]
    19d8:	b2db      	uxtb	r3, r3
    19da:	2b05      	cmp	r3, #5
    19dc:	d05f      	beq.n	1a9e <usb_d_ep_transfer+0x106>
    19de:	2b06      	cmp	r3, #6
    19e0:	d023      	beq.n	1a2a <usb_d_ep_transfer+0x92>
		case USB_EP_S_ERROR:
			return -USB_ERROR;
		case USB_EP_S_DISABLED:
			return -USB_ERR_FUNC;
		default: /* USB_EP_S_X_xxxx  */
			return USB_BUSY;
    19e2:	2b00      	cmp	r3, #0
    19e4:	bf0c      	ite	eq
    19e6:	f06f 0012 	mvneq.w	r0, #18
    19ea:	2001      	movne	r0, #1
		}
	}

	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
	return rc;
}
    19ec:	b006      	add	sp, #24
    19ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		ept->xfer.hdr.state = USB_EP_S_X_DATA;
    19f2:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 1aac <usb_d_ep_transfer+0x114>
    19f6:	ea4f 1946 	mov.w	r9, r6, lsl #5
    19fa:	eb0a 0309 	add.w	r3, sl, r9
    19fe:	2203      	movs	r2, #3
    1a00:	709a      	strb	r2, [r3, #2]
		atomic_leave_critical(&flags);
    1a02:	a804      	add	r0, sp, #16
    1a04:	4b2a      	ldr	r3, [pc, #168]	; (1ab0 <usb_d_ep_transfer+0x118>)
    1a06:	4798      	blx	r3
	if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    1a08:	f81a 3009 	ldrb.w	r3, [sl, r9]
    1a0c:	b183      	cbz	r3, 1a30 <usb_d_ep_transfer+0x98>
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    1a0e:	7a22      	ldrb	r2, [r4, #8]
    1a10:	3500      	adds	r5, #0
    1a12:	bf18      	it	ne
    1a14:	2501      	movne	r5, #1
	struct usb_d_transfer trans
    1a16:	6823      	ldr	r3, [r4, #0]
    1a18:	9301      	str	r3, [sp, #4]
    1a1a:	f8cd 8008 	str.w	r8, [sp, #8]
    1a1e:	f017 0f80 	tst.w	r7, #128	; 0x80
    1a22:	d119      	bne.n	1a58 <usb_d_ep_transfer+0xc0>
    1a24:	f002 030f 	and.w	r3, r2, #15
    1a28:	e018      	b.n	1a5c <usb_d_ep_transfer+0xc4>
			return -USB_ERROR;
    1a2a:	f06f 000f 	mvn.w	r0, #15
    1a2e:	e7dd      	b.n	19ec <usb_d_ep_transfer+0x54>
		uint16_t req_len = USB_GET_wLength(ept->xfer.req);
    1a30:	4b1e      	ldr	r3, [pc, #120]	; (1aac <usb_d_ep_transfer+0x114>)
    1a32:	eb03 1346 	add.w	r3, r3, r6, lsl #5
    1a36:	7cda      	ldrb	r2, [r3, #19]
    1a38:	7c9d      	ldrb	r5, [r3, #18]
    1a3a:	eb05 2502 	add.w	r5, r5, r2, lsl #8
    1a3e:	b2ad      	uxth	r5, r5
		if (req_len == 0) {
    1a40:	b9a5      	cbnz	r5, 1a6c <usb_d_ep_transfer+0xd4>
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    1a42:	4b1a      	ldr	r3, [pc, #104]	; (1aac <usb_d_ep_transfer+0x114>)
    1a44:	eb03 1646 	add.w	r6, r3, r6, lsl #5
    1a48:	2304      	movs	r3, #4
    1a4a:	70b3      	strb	r3, [r6, #2]
			len                 = 0;
    1a4c:	2300      	movs	r3, #0
			zlp                 = true;
    1a4e:	2501      	movs	r5, #1
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    1a50:	7a22      	ldrb	r2, [r4, #8]
	struct usb_d_transfer trans
    1a52:	6821      	ldr	r1, [r4, #0]
    1a54:	9101      	str	r1, [sp, #4]
    1a56:	9302      	str	r3, [sp, #8]
    1a58:	f042 0380 	orr.w	r3, r2, #128	; 0x80
    1a5c:	f88d 300c 	strb.w	r3, [sp, #12]
    1a60:	f88d 500d 	strb.w	r5, [sp, #13]
	return _usb_d_dev_ep_trans(&trans);
    1a64:	a801      	add	r0, sp, #4
    1a66:	4b13      	ldr	r3, [pc, #76]	; (1ab4 <usb_d_ep_transfer+0x11c>)
    1a68:	4798      	blx	r3
	return rc;
    1a6a:	e7bf      	b.n	19ec <usb_d_ep_transfer+0x54>
    1a6c:	4643      	mov	r3, r8
    1a6e:	45a8      	cmp	r8, r5
    1a70:	bf28      	it	cs
    1a72:	462b      	movcs	r3, r5
			dir = (USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN);
    1a74:	4a0d      	ldr	r2, [pc, #52]	; (1aac <usb_d_ep_transfer+0x114>)
    1a76:	eb02 1646 	add.w	r6, r2, r6, lsl #5
			if (dir) {
    1a7a:	f996 200c 	ldrsb.w	r2, [r6, #12]
    1a7e:	2a00      	cmp	r2, #0
    1a80:	db05      	blt.n	1a8e <usb_d_ep_transfer+0xf6>
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    1a82:	7a22      	ldrb	r2, [r4, #8]
	struct usb_d_transfer trans
    1a84:	6821      	ldr	r1, [r4, #0]
    1a86:	9101      	str	r1, [sp, #4]
    1a88:	9302      	str	r3, [sp, #8]
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    1a8a:	2500      	movs	r5, #0
    1a8c:	e7ca      	b.n	1a24 <usb_d_ep_transfer+0x8c>
				zlp = (req_len > len);
    1a8e:	429d      	cmp	r5, r3
    1a90:	bf94      	ite	ls
    1a92:	2500      	movls	r5, #0
    1a94:	2501      	movhi	r5, #1
    1a96:	e7db      	b.n	1a50 <usb_d_ep_transfer+0xb8>
		return -USB_ERR_PARAM;
    1a98:	f06f 0011 	mvn.w	r0, #17
    1a9c:	e7a6      	b.n	19ec <usb_d_ep_transfer+0x54>
			return USB_HALTED;
    1a9e:	2002      	movs	r0, #2
    1aa0:	e7a4      	b.n	19ec <usb_d_ep_transfer+0x54>
    1aa2:	bf00      	nop
    1aa4:	000015cd 	.word	0x000015cd
    1aa8:	0000486d 	.word	0x0000486d
    1aac:	20000648 	.word	0x20000648
    1ab0:	0000487b 	.word	0x0000487b
    1ab4:	00003a59 	.word	0x00003a59

00001ab8 <usb_d_ep_halt>:
	}
	return ERR_NONE;
}

int32_t usb_d_ep_halt(const uint8_t ep, const enum usb_ep_halt_ctrl ctrl)
{
    1ab8:	b538      	push	{r3, r4, r5, lr}
    1aba:	4604      	mov	r4, r0
	if (ctrl == USB_EP_HALT_CLR) {
    1abc:	b141      	cbz	r1, 1ad0 <usb_d_ep_halt+0x18>
		return _usb_d_ep_halt_clr(ep);
	} else if (ctrl == USB_EP_HALT_SET) {
    1abe:	2901      	cmp	r1, #1
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    1ac0:	bf0c      	ite	eq
    1ac2:	2101      	moveq	r1, #1
	} else {
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_GET);
    1ac4:	2102      	movne	r1, #2
    1ac6:	4b13      	ldr	r3, [pc, #76]	; (1b14 <usb_d_ep_halt+0x5c>)
    1ac8:	4798      	blx	r3
    1aca:	4603      	mov	r3, r0
	}
}
    1acc:	4618      	mov	r0, r3
    1ace:	bd38      	pop	{r3, r4, r5, pc}
	int8_t           ep_index = _usb_d_find_ep(ep);
    1ad0:	4b11      	ldr	r3, [pc, #68]	; (1b18 <usb_d_ep_halt+0x60>)
    1ad2:	4798      	blx	r3
	if (ep_index < 0) {
    1ad4:	1e05      	subs	r5, r0, #0
    1ad6:	db19      	blt.n	1b0c <usb_d_ep_halt+0x54>
	if (_usb_d_dev_ep_stall(ep, USB_EP_STALL_GET)) {
    1ad8:	2102      	movs	r1, #2
    1ada:	4620      	mov	r0, r4
    1adc:	4b0d      	ldr	r3, [pc, #52]	; (1b14 <usb_d_ep_halt+0x5c>)
    1ade:	4798      	blx	r3
    1ae0:	4603      	mov	r3, r0
    1ae2:	2800      	cmp	r0, #0
    1ae4:	d0f2      	beq.n	1acc <usb_d_ep_halt+0x14>
		rc = _usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    1ae6:	2100      	movs	r1, #0
    1ae8:	4620      	mov	r0, r4
    1aea:	4b0a      	ldr	r3, [pc, #40]	; (1b14 <usb_d_ep_halt+0x5c>)
    1aec:	4798      	blx	r3
		if (rc < 0) {
    1aee:	1e03      	subs	r3, r0, #0
    1af0:	dbec      	blt.n	1acc <usb_d_ep_halt+0x14>
		ept->xfer.hdr.state  = USB_EP_S_IDLE;
    1af2:	4b0a      	ldr	r3, [pc, #40]	; (1b1c <usb_d_ep_halt+0x64>)
    1af4:	eb03 1345 	add.w	r3, r3, r5, lsl #5
    1af8:	2201      	movs	r2, #1
    1afa:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_UNHALT;
    1afc:	2103      	movs	r1, #3
    1afe:	70d9      	strb	r1, [r3, #3]
		ept->callbacks.xfer(ep, USB_XFER_UNHALT, NULL);
    1b00:	69db      	ldr	r3, [r3, #28]
    1b02:	2200      	movs	r2, #0
    1b04:	4620      	mov	r0, r4
    1b06:	4798      	blx	r3
	return ERR_NONE;
    1b08:	2300      	movs	r3, #0
    1b0a:	e7df      	b.n	1acc <usb_d_ep_halt+0x14>
		return -USB_ERR_PARAM;
    1b0c:	f06f 0311 	mvn.w	r3, #17
    1b10:	e7dc      	b.n	1acc <usb_d_ep_halt+0x14>
    1b12:	bf00      	nop
    1b14:	000038b1 	.word	0x000038b1
    1b18:	000015cd 	.word	0x000015cd
    1b1c:	20000648 	.word	0x20000648

00001b20 <usb_d_ep_register_callback>:

void usb_d_ep_register_callback(const uint8_t ep, const enum usb_d_ep_cb_type type, const FUNC_PTR func)
{
    1b20:	b538      	push	{r3, r4, r5, lr}
    1b22:	460d      	mov	r5, r1
    1b24:	4614      	mov	r4, r2
	int8_t           ep_index = _usb_d_find_ep(ep);
    1b26:	4b0e      	ldr	r3, [pc, #56]	; (1b60 <usb_d_ep_register_callback+0x40>)
    1b28:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	FUNC_PTR         f        = func ? (FUNC_PTR)func : (FUNC_PTR)usb_d_dummy_cb_false;
    1b2a:	4b0e      	ldr	r3, [pc, #56]	; (1b64 <usb_d_ep_register_callback+0x44>)
    1b2c:	2c00      	cmp	r4, #0
    1b2e:	bf08      	it	eq
    1b30:	461c      	moveq	r4, r3
	if (ep_index < 0) {
    1b32:	2800      	cmp	r0, #0
    1b34:	db13      	blt.n	1b5e <usb_d_ep_register_callback+0x3e>
		return;
	}
	switch (type) {
    1b36:	2d01      	cmp	r5, #1
    1b38:	d008      	beq.n	1b4c <usb_d_ep_register_callback+0x2c>
    1b3a:	b115      	cbz	r5, 1b42 <usb_d_ep_register_callback+0x22>
    1b3c:	2d02      	cmp	r5, #2
    1b3e:	d00a      	beq.n	1b56 <usb_d_ep_register_callback+0x36>
    1b40:	bd38      	pop	{r3, r4, r5, pc}
	case USB_D_EP_CB_SETUP:
		ept->callbacks.req = (usb_d_ep_cb_setup_t)f;
    1b42:	4b09      	ldr	r3, [pc, #36]	; (1b68 <usb_d_ep_register_callback+0x48>)
    1b44:	eb03 1040 	add.w	r0, r3, r0, lsl #5
    1b48:	6144      	str	r4, [r0, #20]
		break;
    1b4a:	bd38      	pop	{r3, r4, r5, pc}
	case USB_D_EP_CB_MORE:
		ept->callbacks.more = (usb_d_ep_cb_more_t)f;
    1b4c:	4b06      	ldr	r3, [pc, #24]	; (1b68 <usb_d_ep_register_callback+0x48>)
    1b4e:	eb03 1040 	add.w	r0, r3, r0, lsl #5
    1b52:	6184      	str	r4, [r0, #24]
		break;
    1b54:	bd38      	pop	{r3, r4, r5, pc}
	case USB_D_EP_CB_XFER:
		ept->callbacks.xfer = (usb_d_ep_cb_xfer_t)f;
    1b56:	4b04      	ldr	r3, [pc, #16]	; (1b68 <usb_d_ep_register_callback+0x48>)
    1b58:	eb03 1040 	add.w	r0, r3, r0, lsl #5
    1b5c:	61c4      	str	r4, [r0, #28]
    1b5e:	bd38      	pop	{r3, r4, r5, pc}
    1b60:	000015cd 	.word	0x000015cd
    1b64:	00001611 	.word	0x00001611
    1b68:	20000648 	.word	0x20000648

00001b6c <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
    1b6c:	b900      	cbnz	r0, 1b70 <assert+0x4>
		__asm("BKPT #0");
    1b6e:	be00      	bkpt	0x0000
    1b70:	4770      	bx	lr

00001b72 <is_list_element>:
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
    1b72:	6803      	ldr	r3, [r0, #0]
    1b74:	b14b      	cbz	r3, 1b8a <is_list_element+0x18>
		if (it == element) {
    1b76:	428b      	cmp	r3, r1
    1b78:	d009      	beq.n	1b8e <is_list_element+0x1c>
	for (it = list->head; it; it = it->next) {
    1b7a:	681b      	ldr	r3, [r3, #0]
    1b7c:	b11b      	cbz	r3, 1b86 <is_list_element+0x14>
		if (it == element) {
    1b7e:	4299      	cmp	r1, r3
    1b80:	d1fb      	bne.n	1b7a <is_list_element+0x8>
			return true;
    1b82:	2001      	movs	r0, #1
		}
	}

	return false;
}
    1b84:	4770      	bx	lr
	return false;
    1b86:	2000      	movs	r0, #0
    1b88:	4770      	bx	lr
    1b8a:	2000      	movs	r0, #0
    1b8c:	4770      	bx	lr
			return true;
    1b8e:	2001      	movs	r0, #1
    1b90:	4770      	bx	lr
	...

00001b94 <list_insert_as_head>:

/**
 * \brief Insert an element as list head
 */
void list_insert_as_head(struct list_descriptor *const list, void *const element)
{
    1b94:	b538      	push	{r3, r4, r5, lr}
    1b96:	4604      	mov	r4, r0
    1b98:	460d      	mov	r5, r1
	ASSERT(!is_list_element(list, element));
    1b9a:	4b06      	ldr	r3, [pc, #24]	; (1bb4 <list_insert_as_head+0x20>)
    1b9c:	4798      	blx	r3
    1b9e:	f080 0001 	eor.w	r0, r0, #1
    1ba2:	2239      	movs	r2, #57	; 0x39
    1ba4:	4904      	ldr	r1, [pc, #16]	; (1bb8 <list_insert_as_head+0x24>)
    1ba6:	b2c0      	uxtb	r0, r0
    1ba8:	4b04      	ldr	r3, [pc, #16]	; (1bbc <list_insert_as_head+0x28>)
    1baa:	4798      	blx	r3

	((struct list_element *)element)->next = list->head;
    1bac:	6823      	ldr	r3, [r4, #0]
    1bae:	602b      	str	r3, [r5, #0]
	list->head                             = (struct list_element *)element;
    1bb0:	6025      	str	r5, [r4, #0]
    1bb2:	bd38      	pop	{r3, r4, r5, pc}
    1bb4:	00001b73 	.word	0x00001b73
    1bb8:	00005098 	.word	0x00005098
    1bbc:	00001b6d 	.word	0x00001b6d

00001bc0 <list_insert_after>:
/**
 * \brief Insert an element after the given list element
 */
void list_insert_after(void *const after, void *const element)
{
	((struct list_element *)element)->next = ((struct list_element *)after)->next;
    1bc0:	6803      	ldr	r3, [r0, #0]
    1bc2:	600b      	str	r3, [r1, #0]
	((struct list_element *)after)->next   = (struct list_element *)element;
    1bc4:	6001      	str	r1, [r0, #0]
    1bc6:	4770      	bx	lr

00001bc8 <list_insert_at_end>:

/**
 * \brief Insert an element at list end
 */
void list_insert_at_end(struct list_descriptor *const list, void *const element)
{
    1bc8:	b570      	push	{r4, r5, r6, lr}
    1bca:	4605      	mov	r5, r0
    1bcc:	460e      	mov	r6, r1
	struct list_element *it = list->head;
    1bce:	6804      	ldr	r4, [r0, #0]

	ASSERT(!is_list_element(list, element));
    1bd0:	4b0a      	ldr	r3, [pc, #40]	; (1bfc <list_insert_at_end+0x34>)
    1bd2:	4798      	blx	r3
    1bd4:	f080 0001 	eor.w	r0, r0, #1
    1bd8:	224f      	movs	r2, #79	; 0x4f
    1bda:	4909      	ldr	r1, [pc, #36]	; (1c00 <list_insert_at_end+0x38>)
    1bdc:	b2c0      	uxtb	r0, r0
    1bde:	4b09      	ldr	r3, [pc, #36]	; (1c04 <list_insert_at_end+0x3c>)
    1be0:	4798      	blx	r3

	if (!list->head) {
    1be2:	682b      	ldr	r3, [r5, #0]
    1be4:	b91b      	cbnz	r3, 1bee <list_insert_at_end+0x26>
		list->head                             = (struct list_element *)element;
    1be6:	602e      	str	r6, [r5, #0]
		((struct list_element *)element)->next = NULL;
    1be8:	6033      	str	r3, [r6, #0]
		return;
    1bea:	bd70      	pop	{r4, r5, r6, pc}
	}

	while (it->next) {
		it = it->next;
    1bec:	461c      	mov	r4, r3
	while (it->next) {
    1bee:	6823      	ldr	r3, [r4, #0]
    1bf0:	2b00      	cmp	r3, #0
    1bf2:	d1fb      	bne.n	1bec <list_insert_at_end+0x24>
	}
	it->next                               = (struct list_element *)element;
    1bf4:	6026      	str	r6, [r4, #0]
	((struct list_element *)element)->next = NULL;
    1bf6:	6033      	str	r3, [r6, #0]
    1bf8:	bd70      	pop	{r4, r5, r6, pc}
    1bfa:	bf00      	nop
    1bfc:	00001b73 	.word	0x00001b73
    1c00:	00005098 	.word	0x00005098
    1c04:	00001b6d 	.word	0x00001b6d

00001c08 <list_remove_head>:
/**
 * \brief Removes list head
 */
void *list_remove_head(struct list_descriptor *const list)
{
	if (list->head) {
    1c08:	6803      	ldr	r3, [r0, #0]
    1c0a:	b10b      	cbz	r3, 1c10 <list_remove_head+0x8>
		struct list_element *tmp = list->head;

		list->head = list->head->next;
    1c0c:	681a      	ldr	r2, [r3, #0]
    1c0e:	6002      	str	r2, [r0, #0]
		return (void *)tmp;
	}

	return NULL;
}
    1c10:	4618      	mov	r0, r3
    1c12:	4770      	bx	lr

00001c14 <_can_async_init>:

/**
 * \brief Initialize CAN.
 */
int32_t _can_async_init(struct _can_async_device *const dev, void *const hw)
{
    1c14:	b430      	push	{r4, r5}
	dev->hw = hw;
    1c16:	6001      	str	r1, [r0, #0]
}

static inline void hri_can_set_CCCR_INIT_bit(const void *const hw)
{
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg |= CAN_CCCR_INIT;
    1c18:	698b      	ldr	r3, [r1, #24]
    1c1a:	f043 0301 	orr.w	r3, r3, #1
    1c1e:	618b      	str	r3, [r1, #24]
	hri_can_set_CCCR_INIT_bit(dev->hw);
	while (hri_can_get_CCCR_INIT_bit(dev->hw) == 0)
    1c20:	6802      	ldr	r2, [r0, #0]
}

static inline bool hri_can_get_CCCR_INIT_bit(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Can *)hw)->CCCR.reg;
    1c22:	6993      	ldr	r3, [r2, #24]
    1c24:	f013 0f01 	tst.w	r3, #1
    1c28:	d0fb      	beq.n	1c22 <_can_async_init+0xe>
}

static inline void hri_can_set_CCCR_CCE_bit(const void *const hw)
{
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg |= CAN_CCCR_CCE;
    1c2a:	6993      	ldr	r3, [r2, #24]
    1c2c:	f043 0302 	orr.w	r3, r3, #2
    1c30:	6193      	str	r3, [r2, #24]
		hri_can_write_ILE_reg(dev->hw, CAN_ILE_EINT0);
	}
#endif

#ifdef CONF_CAN1_ENABLED
	if (hw == CAN1) {
    1c32:	4b35      	ldr	r3, [pc, #212]	; (1d08 <_can_async_init+0xf4>)
    1c34:	4299      	cmp	r1, r3
    1c36:	d011      	beq.n	1c5c <_can_async_init+0x48>
		hri_can_write_ILE_reg(dev->hw, CAN_ILE_EINT0);
	}
#endif

	/* Disable CCE to prevent Configuration Change */
	hri_can_clear_CCCR_CCE_bit(dev->hw);
    1c38:	6802      	ldr	r2, [r0, #0]
}

static inline void hri_can_clear_CCCR_CCE_bit(const void *const hw)
{
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg &= ~CAN_CCCR_CCE;
    1c3a:	6993      	ldr	r3, [r2, #24]
    1c3c:	f023 0302 	bic.w	r3, r3, #2
    1c40:	6193      	str	r3, [r2, #24]
	hri_can_clear_CCCR_INIT_bit(dev->hw);
    1c42:	6802      	ldr	r2, [r0, #0]
	((Can *)hw)->CCCR.reg &= ~CAN_CCCR_INIT;
    1c44:	6993      	ldr	r3, [r2, #24]
    1c46:	f023 0301 	bic.w	r3, r3, #1
    1c4a:	6193      	str	r3, [r2, #24]
	while (hri_can_get_CCCR_INIT_bit(dev->hw)) {
    1c4c:	6802      	ldr	r2, [r0, #0]
	tmp = ((Can *)hw)->CCCR.reg;
    1c4e:	6993      	ldr	r3, [r2, #24]
    1c50:	f013 0f01 	tst.w	r3, #1
    1c54:	d1fb      	bne.n	1c4e <_can_async_init+0x3a>
	};

	return ERR_NONE;
}
    1c56:	2000      	movs	r0, #0
    1c58:	bc30      	pop	{r4, r5}
    1c5a:	4770      	bx	lr
		_can1_dev    = dev;
    1c5c:	4b2b      	ldr	r3, [pc, #172]	; (1d0c <_can_async_init+0xf8>)
    1c5e:	461a      	mov	r2, r3
    1c60:	f842 0b04 	str.w	r0, [r2], #4
		dev->context = (void *)&_can1_context;
    1c64:	492a      	ldr	r1, [pc, #168]	; (1d10 <_can_async_init+0xfc>)
    1c66:	6181      	str	r1, [r0, #24]
		hri_can_set_CCCR_reg(dev->hw, CONF_CAN1_CCCR_REG);
    1c68:	6801      	ldr	r1, [r0, #0]
}

static inline void hri_can_set_CCCR_reg(const void *const hw, hri_can_cccr_reg_t mask)
{
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg |= mask;
    1c6a:	698c      	ldr	r4, [r1, #24]
    1c6c:	618c      	str	r4, [r1, #24]
		hri_can_write_MRCFG_reg(dev->hw, CONF_CAN1_MRCFG_REG);
    1c6e:	6801      	ldr	r1, [r0, #0]
	((Can *)hw)->MRCFG.reg = data;
    1c70:	2402      	movs	r4, #2
    1c72:	608c      	str	r4, [r1, #8]
		hri_can_write_NBTP_reg(dev->hw, CONF_CAN1_BTP_REG);
    1c74:	6801      	ldr	r1, [r0, #0]
}

static inline void hri_can_write_NBTP_reg(const void *const hw, hri_can_nbtp_reg_t data)
{
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->NBTP.reg = data;
    1c76:	4c27      	ldr	r4, [pc, #156]	; (1d14 <_can_async_init+0x100>)
    1c78:	61cc      	str	r4, [r1, #28]
		hri_can_write_DBTP_reg(dev->hw, CONF_CAN1_DBTP_REG);
    1c7a:	6801      	ldr	r1, [r0, #0]
	((Can *)hw)->DBTP.reg = data;
    1c7c:	f640 2433 	movw	r4, #2611	; 0xa33
    1c80:	60cc      	str	r4, [r1, #12]
		hri_can_write_RXF0C_reg(dev->hw, CONF_CAN1_RXF0C_REG | CAN_RXF0C_F0SA((uint32_t)can1_rx_fifo));
    1c82:	6804      	ldr	r4, [r0, #0]
    1c84:	4924      	ldr	r1, [pc, #144]	; (1d18 <_can_async_init+0x104>)
    1c86:	b289      	uxth	r1, r1
    1c88:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
    1c8c:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
}

static inline void hri_can_write_RXF0C_reg(const void *const hw, hri_can_rxf0c_reg_t data)
{
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->RXF0C.reg = data;
    1c90:	f8c4 10a0 	str.w	r1, [r4, #160]	; 0xa0
		hri_can_write_RXESC_reg(dev->hw, CONF_CAN1_RXESC_REG);
    1c94:	6801      	ldr	r1, [r0, #0]
}

static inline void hri_can_write_RXESC_reg(const void *const hw, hri_can_rxesc_reg_t data)
{
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->RXESC.reg = data;
    1c96:	2400      	movs	r4, #0
    1c98:	f8c1 40bc 	str.w	r4, [r1, #188]	; 0xbc
		hri_can_write_TXESC_reg(dev->hw, CONF_CAN1_TXESC_REG);
    1c9c:	6801      	ldr	r1, [r0, #0]
}

static inline void hri_can_write_TXESC_reg(const void *const hw, hri_can_txesc_reg_t data)
{
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->TXESC.reg = data;
    1c9e:	f8c1 40c8 	str.w	r4, [r1, #200]	; 0xc8
		hri_can_write_TXBC_reg(dev->hw, CONF_CAN1_TXBC_REG | CAN_TXBC_TBSA((uint32_t)can1_tx_fifo));
    1ca2:	6805      	ldr	r5, [r0, #0]
    1ca4:	491d      	ldr	r1, [pc, #116]	; (1d1c <_can_async_init+0x108>)
    1ca6:	b289      	uxth	r1, r1
    1ca8:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
	((Can *)hw)->TXBC.reg = data;
    1cac:	f8c5 10c0 	str.w	r1, [r5, #192]	; 0xc0
		hri_can_write_TXEFC_reg(dev->hw, CONF_CAN1_TXEFC_REG | CAN_TXEFC_EFSA((uint32_t)can1_tx_event_fifo));
    1cb0:	6801      	ldr	r1, [r0, #0]
    1cb2:	b292      	uxth	r2, r2
    1cb4:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
}

static inline void hri_can_write_TXEFC_reg(const void *const hw, hri_can_txefc_reg_t data)
{
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->TXEFC.reg = data;
    1cb8:	f8c1 20f0 	str.w	r2, [r1, #240]	; 0xf0
		hri_can_write_GFC_reg(dev->hw, CONF_CAN1_GFC_REG);
    1cbc:	6802      	ldr	r2, [r0, #0]
	((Can *)hw)->GFC.reg = data;
    1cbe:	2128      	movs	r1, #40	; 0x28
    1cc0:	f8c2 1080 	str.w	r1, [r2, #128]	; 0x80
		hri_can_write_SIDFC_reg(dev->hw, CONF_CAN1_SIDFC_REG | CAN_SIDFC_FLSSA((uint32_t)can1_rx_std_filter));
    1cc4:	6801      	ldr	r1, [r0, #0]
    1cc6:	f103 0214 	add.w	r2, r3, #20
    1cca:	b292      	uxth	r2, r2
    1ccc:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
	((Can *)hw)->SIDFC.reg = data;
    1cd0:	f8c1 2084 	str.w	r2, [r1, #132]	; 0x84
		hri_can_write_XIDFC_reg(dev->hw, CONF_CAN1_XIDFC_REG | CAN_XIDFC_FLESA((uint32_t)can1_rx_ext_filter));
    1cd4:	6802      	ldr	r2, [r0, #0]
    1cd6:	331c      	adds	r3, #28
    1cd8:	b29b      	uxth	r3, r3
    1cda:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
	((Can *)hw)->XIDFC.reg = data;
    1cde:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
		hri_can_write_XIDAM_reg(dev->hw, CONF_CAN1_XIDAM_REG);
    1ce2:	6803      	ldr	r3, [r0, #0]
	((Can *)hw)->XIDAM.reg = data;
    1ce4:	f8c3 4090 	str.w	r4, [r3, #144]	; 0x90
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1ce8:	4b0d      	ldr	r3, [pc, #52]	; (1d20 <_can_async_init+0x10c>)
    1cea:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    1cee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    1cf2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1cf6:	f3bf 8f6f 	isb	sy
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1cfa:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1cfe:	609a      	str	r2, [r3, #8]
		hri_can_write_ILE_reg(dev->hw, CAN_ILE_EINT0);
    1d00:	6803      	ldr	r3, [r0, #0]
	((Can *)hw)->ILE.reg = data;
    1d02:	2201      	movs	r2, #1
    1d04:	65da      	str	r2, [r3, #92]	; 0x5c
    1d06:	e797      	b.n	1c38 <_can_async_init+0x24>
    1d08:	42000400 	.word	0x42000400
    1d0c:	200006c8 	.word	0x200006c8
    1d10:	20000090 	.word	0x20000090
    1d14:	06020a07 	.word	0x06020a07
    1d18:	20000ac0 	.word	0x20000ac0
    1d1c:	20000aa0 	.word	0x20000aa0
    1d20:	e000e100 	.word	0xe000e100

00001d24 <CAN1_Handler>:

/*
 * \brief CAN interrupt handler
 */
void CAN1_Handler(void)
{
    1d24:	b538      	push	{r3, r4, r5, lr}
	struct _can_async_device *dev = _can1_dev;
    1d26:	4b1d      	ldr	r3, [pc, #116]	; (1d9c <CAN1_Handler+0x78>)
    1d28:	681d      	ldr	r5, [r3, #0]
	uint32_t                  ir;
	ir = hri_can_read_IR_reg(dev->hw);
    1d2a:	682b      	ldr	r3, [r5, #0]
	return ((Can *)hw)->IR.reg;
    1d2c:	6d1c      	ldr	r4, [r3, #80]	; 0x50

	if (ir & CAN_IR_RF0N) {
    1d2e:	f014 0f01 	tst.w	r4, #1
    1d32:	d11c      	bne.n	1d6e <CAN1_Handler+0x4a>
		dev->cb.rx_done(dev);
	}

	if (ir & CAN_IR_TC) {
    1d34:	f414 7f00 	tst.w	r4, #512	; 0x200
    1d38:	d11d      	bne.n	1d76 <CAN1_Handler+0x52>
		dev->cb.tx_done(dev);
	}

	if (ir & CAN_IR_BO) {
    1d3a:	f014 7f00 	tst.w	r4, #33554432	; 0x2000000
    1d3e:	d11e      	bne.n	1d7e <CAN1_Handler+0x5a>
		dev->cb.irq_handler(dev, CAN_IRQ_BO);
	}

	if (ir & CAN_IR_EW) {
    1d40:	f014 7f80 	tst.w	r4, #16777216	; 0x1000000
    1d44:	d120      	bne.n	1d88 <CAN1_Handler+0x64>
		dev->cb.irq_handler(dev, CAN_IRQ_EW);
	}

	if (ir & CAN_IR_EP) {
    1d46:	f414 0f00 	tst.w	r4, #8388608	; 0x800000
    1d4a:	d00a      	beq.n	1d62 <CAN1_Handler+0x3e>
		dev->cb.irq_handler(dev, hri_can_get_PSR_EP_bit(dev->hw) ? CAN_IRQ_EP : CAN_IRQ_EA);
    1d4c:	68ea      	ldr	r2, [r5, #12]
    1d4e:	682b      	ldr	r3, [r5, #0]
	return (((Can *)hw)->PSR.reg & CAN_PSR_EP) >> CAN_PSR_EP_Pos;
    1d50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    1d52:	f3c3 1340 	ubfx	r3, r3, #5, #1
    1d56:	2b00      	cmp	r3, #0
    1d58:	bf14      	ite	ne
    1d5a:	2102      	movne	r1, #2
    1d5c:	2101      	moveq	r1, #1
    1d5e:	4628      	mov	r0, r5
    1d60:	4790      	blx	r2
	}

	if (ir & CAN_IR_RF0L) {
    1d62:	f014 0f08 	tst.w	r4, #8
    1d66:	d114      	bne.n	1d92 <CAN1_Handler+0x6e>
		dev->cb.irq_handler(dev, CAN_IRQ_DO);
	}

	hri_can_write_IR_reg(dev->hw, ir);
    1d68:	682b      	ldr	r3, [r5, #0]
	((Can *)hw)->IR.reg = data;
    1d6a:	651c      	str	r4, [r3, #80]	; 0x50
    1d6c:	bd38      	pop	{r3, r4, r5, pc}
		dev->cb.rx_done(dev);
    1d6e:	68ab      	ldr	r3, [r5, #8]
    1d70:	4628      	mov	r0, r5
    1d72:	4798      	blx	r3
    1d74:	e7de      	b.n	1d34 <CAN1_Handler+0x10>
		dev->cb.tx_done(dev);
    1d76:	686b      	ldr	r3, [r5, #4]
    1d78:	4628      	mov	r0, r5
    1d7a:	4798      	blx	r3
    1d7c:	e7dd      	b.n	1d3a <CAN1_Handler+0x16>
		dev->cb.irq_handler(dev, CAN_IRQ_BO);
    1d7e:	68eb      	ldr	r3, [r5, #12]
    1d80:	2103      	movs	r1, #3
    1d82:	4628      	mov	r0, r5
    1d84:	4798      	blx	r3
    1d86:	e7db      	b.n	1d40 <CAN1_Handler+0x1c>
		dev->cb.irq_handler(dev, CAN_IRQ_EW);
    1d88:	68eb      	ldr	r3, [r5, #12]
    1d8a:	2100      	movs	r1, #0
    1d8c:	4628      	mov	r0, r5
    1d8e:	4798      	blx	r3
    1d90:	e7d9      	b.n	1d46 <CAN1_Handler+0x22>
		dev->cb.irq_handler(dev, CAN_IRQ_DO);
    1d92:	68eb      	ldr	r3, [r5, #12]
    1d94:	2104      	movs	r1, #4
    1d96:	4628      	mov	r0, r5
    1d98:	4798      	blx	r3
    1d9a:	e7e5      	b.n	1d68 <CAN1_Handler+0x44>
    1d9c:	200006c8 	.word	0x200006c8

00001da0 <_get_cycles_for_ms>:
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
	return _get_cycles_for_ms_internal(ms, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
}
    1da0:	f642 63e0 	movw	r3, #12000	; 0x2ee0
    1da4:	fb03 f000 	mul.w	r0, r3, r0
    1da8:	4770      	bx	lr
	...

00001dac <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
    1dac:	b510      	push	{r4, lr}
}

static inline void hri_nvmctrl_set_CTRLA_RWS_bf(const void *const hw, hri_nvmctrl_ctrla_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLA.reg |= NVMCTRL_CTRLA_RWS(mask);
    1dae:	4a12      	ldr	r2, [pc, #72]	; (1df8 <_init_chip+0x4c>)
    1db0:	8813      	ldrh	r3, [r2, #0]
    1db2:	b29b      	uxth	r3, r3
    1db4:	8013      	strh	r3, [r2, #0]
	hri_nvmctrl_set_CTRLA_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);

	_osc32kctrl_init_sources();
    1db6:	4b11      	ldr	r3, [pc, #68]	; (1dfc <_init_chip+0x50>)
    1db8:	4798      	blx	r3
	_oscctrl_init_sources();
    1dba:	4b11      	ldr	r3, [pc, #68]	; (1e00 <_init_chip+0x54>)
    1dbc:	4798      	blx	r3
	_mclk_init();
    1dbe:	4b11      	ldr	r3, [pc, #68]	; (1e04 <_init_chip+0x58>)
    1dc0:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
    1dc2:	2008      	movs	r0, #8
    1dc4:	4c10      	ldr	r4, [pc, #64]	; (1e08 <_init_chip+0x5c>)
    1dc6:	47a0      	blx	r4
#endif
	_oscctrl_init_referenced_generators();
    1dc8:	4b10      	ldr	r3, [pc, #64]	; (1e0c <_init_chip+0x60>)
    1dca:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
    1dcc:	f640 70f7 	movw	r0, #4087	; 0xff7
    1dd0:	47a0      	blx	r4
	((Port *)hw)->Group[submodule_index].EVCTRL.reg |= mask;
    1dd2:	4b0f      	ldr	r3, [pc, #60]	; (1e10 <_init_chip+0x64>)
    1dd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    1dd6:	62da      	str	r2, [r3, #44]	; 0x2c
    1dd8:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
    1ddc:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
    1de0:	f8d3 212c 	ldr.w	r2, [r3, #300]	; 0x12c
    1de4:	f042 02ef 	orr.w	r2, r2, #239	; 0xef
    1de8:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
    1dec:	f8d3 21ac 	ldr.w	r2, [r3, #428]	; 0x1ac
    1df0:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
    1df4:	bd10      	pop	{r4, pc}
    1df6:	bf00      	nop
    1df8:	41004000 	.word	0x41004000
    1dfc:	00001f0d 	.word	0x00001f0d
    1e00:	00001f21 	.word	0x00001f21
    1e04:	00001f01 	.word	0x00001f01
    1e08:	00001e71 	.word	0x00001e71
    1e0c:	00001f3d 	.word	0x00001f3d
    1e10:	41008000 	.word	0x41008000

00001e14 <_event_system_init>:

/**
 * \brief Initialize event system
 */
int32_t _event_system_init(void)
{
    1e14:	b430      	push	{r4, r5}
    1e16:	4814      	ldr	r0, [pc, #80]	; (1e68 <_event_system_init+0x54>)
    1e18:	f100 0543 	add.w	r5, r0, #67	; 0x43
    1e1c:	4603      	mov	r3, r0
}

static inline void hri_evsys_write_USER_reg(const void *const hw, uint8_t index, hri_evsys_user_reg_t data)
{
	EVSYS_CRITICAL_SECTION_ENTER();
	((Evsys *)hw)->USER[index].reg = data;
    1e1e:	4c13      	ldr	r4, [pc, #76]	; (1e6c <_event_system_init+0x58>)
    1e20:	1a1a      	subs	r2, r3, r0
	uint8_t i;
	/* configure user multiplexers */
	for (i = 0; i < EVSYS_USERS; i++) {
		hri_evsys_write_USER_reg(EVSYS, i, user_mux_confs[i]);
    1e22:	f813 1b01 	ldrb.w	r1, [r3], #1
    1e26:	3248      	adds	r2, #72	; 0x48
    1e28:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
	for (i = 0; i < EVSYS_USERS; i++) {
    1e2c:	42ab      	cmp	r3, r5
    1e2e:	d1f7      	bne.n	1e20 <_event_system_init+0xc>
    1e30:	480d      	ldr	r0, [pc, #52]	; (1e68 <_event_system_init+0x54>)
    1e32:	f100 0442 	add.w	r4, r0, #66	; 0x42
    1e36:	3080      	adds	r0, #128	; 0x80
    1e38:	2100      	movs	r1, #0
	}

	/* configure channels */
	for (i = 0; i < EVSYS_CHANNELS; i++) {
		hri_evsys_write_CHANNEL_reg(EVSYS, i, channel_confs[i]);
    1e3a:	f834 3f02 	ldrh.w	r3, [r4, #2]!
    1e3e:	00ca      	lsls	r2, r1, #3
    1e40:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    1e44:	f502 4260 	add.w	r2, r2, #57344	; 0xe000

static inline void hri_evsys_write_CHANNEL_reg(const void *const hw, uint8_t submodule_index,
                                               hri_evsys_channel_reg_t data)
{
	EVSYS_CRITICAL_SECTION_ENTER();
	((Evsys *)hw)->Channel[submodule_index].CHANNEL.reg = data;
    1e48:	6213      	str	r3, [r2, #32]
		hri_evsys_write_CHINTEN_reg(EVSYS, i, interrupt_cfg[i]);
    1e4a:	f850 3f04 	ldr.w	r3, [r0, #4]!
    1e4e:	b2db      	uxtb	r3, r3
	((Evsys *)hw)->Channel[submodule_index].CHINTENSET.reg = data;
    1e50:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
	((Evsys *)hw)->Channel[submodule_index].CHINTENCLR.reg = ~data;
    1e54:	43db      	mvns	r3, r3
    1e56:	b2db      	uxtb	r3, r3
    1e58:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
    1e5c:	3101      	adds	r1, #1
	for (i = 0; i < EVSYS_CHANNELS; i++) {
    1e5e:	2920      	cmp	r1, #32
    1e60:	d1eb      	bne.n	1e3a <_event_system_init+0x26>
	}

	return ERR_NONE;
}
    1e62:	2000      	movs	r0, #0
    1e64:	bc30      	pop	{r4, r5}
    1e66:	4770      	bx	lr
    1e68:	000050b8 	.word	0x000050b8
    1e6c:	4100e000 	.word	0x4100e000

00001e70 <_gclk_init_generators_by_fref>:

void _gclk_init_generators_by_fref(uint32_t bm)
{

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
    1e70:	f010 0f01 	tst.w	r0, #1
    1e74:	d008      	beq.n	1e88 <_gclk_init_generators_by_fref+0x18>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    1e76:	4a1d      	ldr	r2, [pc, #116]	; (1eec <_gclk_init_generators_by_fref+0x7c>)
    1e78:	4b1d      	ldr	r3, [pc, #116]	; (1ef0 <_gclk_init_generators_by_fref+0x80>)
    1e7a:	621a      	str	r2, [r3, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    1e7c:	4619      	mov	r1, r3
    1e7e:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    1e82:	684b      	ldr	r3, [r1, #4]
    1e84:	4213      	tst	r3, r2
    1e86:	d1fc      	bne.n	1e82 <_gclk_init_generators_by_fref+0x12>
		        | (CONF_GCLK_GENERATOR_1_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_1_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_2_CONFIG == 1
	if (bm & (1ul << 2)) {
    1e88:	f010 0f04 	tst.w	r0, #4
    1e8c:	d008      	beq.n	1ea0 <_gclk_init_generators_by_fref+0x30>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    1e8e:	4a19      	ldr	r2, [pc, #100]	; (1ef4 <_gclk_init_generators_by_fref+0x84>)
    1e90:	4b17      	ldr	r3, [pc, #92]	; (1ef0 <_gclk_init_generators_by_fref+0x80>)
    1e92:	629a      	str	r2, [r3, #40]	; 0x28
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    1e94:	4619      	mov	r1, r3
    1e96:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    1e9a:	684b      	ldr	r3, [r1, #4]
    1e9c:	4213      	tst	r3, r2
    1e9e:	d1fc      	bne.n	1e9a <_gclk_init_generators_by_fref+0x2a>
		        | (CONF_GCLK_GENERATOR_2_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_2_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_3_CONFIG == 1
	if (bm & (1ul << 3)) {
    1ea0:	f010 0f08 	tst.w	r0, #8
    1ea4:	d008      	beq.n	1eb8 <_gclk_init_generators_by_fref+0x48>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    1ea6:	4a14      	ldr	r2, [pc, #80]	; (1ef8 <_gclk_init_generators_by_fref+0x88>)
    1ea8:	4b11      	ldr	r3, [pc, #68]	; (1ef0 <_gclk_init_generators_by_fref+0x80>)
    1eaa:	62da      	str	r2, [r3, #44]	; 0x2c
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    1eac:	4619      	mov	r1, r3
    1eae:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    1eb2:	684b      	ldr	r3, [r1, #4]
    1eb4:	4213      	tst	r3, r2
    1eb6:	d1fc      	bne.n	1eb2 <_gclk_init_generators_by_fref+0x42>
		        | (CONF_GCLK_GENERATOR_3_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_3_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_4_CONFIG == 1
	if (bm & (1ul << 4)) {
    1eb8:	f010 0f10 	tst.w	r0, #16
    1ebc:	d008      	beq.n	1ed0 <_gclk_init_generators_by_fref+0x60>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    1ebe:	4a0f      	ldr	r2, [pc, #60]	; (1efc <_gclk_init_generators_by_fref+0x8c>)
    1ec0:	4b0b      	ldr	r3, [pc, #44]	; (1ef0 <_gclk_init_generators_by_fref+0x80>)
    1ec2:	631a      	str	r2, [r3, #48]	; 0x30
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    1ec4:	4619      	mov	r1, r3
    1ec6:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    1eca:	684b      	ldr	r3, [r1, #4]
    1ecc:	4213      	tst	r3, r2
    1ece:	d1fc      	bne.n	1eca <_gclk_init_generators_by_fref+0x5a>
		        | (CONF_GCLK_GENERATOR_10_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_10_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_11_CONFIG == 1
	if (bm & (1ul << 11)) {
    1ed0:	f410 6f00 	tst.w	r0, #2048	; 0x800
    1ed4:	d008      	beq.n	1ee8 <_gclk_init_generators_by_fref+0x78>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    1ed6:	4a08      	ldr	r2, [pc, #32]	; (1ef8 <_gclk_init_generators_by_fref+0x88>)
    1ed8:	4b05      	ldr	r3, [pc, #20]	; (1ef0 <_gclk_init_generators_by_fref+0x80>)
    1eda:	64da      	str	r2, [r3, #76]	; 0x4c
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    1edc:	4619      	mov	r1, r3
    1ede:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    1ee2:	684b      	ldr	r3, [r1, #4]
    1ee4:	4213      	tst	r3, r2
    1ee6:	d1fc      	bne.n	1ee2 <_gclk_init_generators_by_fref+0x72>
    1ee8:	4770      	bx	lr
    1eea:	bf00      	nop
    1eec:	00010101 	.word	0x00010101
    1ef0:	40001c00 	.word	0x40001c00
    1ef4:	00011908 	.word	0x00011908
    1ef8:	00010904 	.word	0x00010904
    1efc:	00010106 	.word	0x00010106

00001f00 <_mclk_init>:
	((Mclk *)hw)->CPUDIV.reg = data;
    1f00:	2201      	movs	r2, #1
    1f02:	4b01      	ldr	r3, [pc, #4]	; (1f08 <_mclk_init+0x8>)
    1f04:	715a      	strb	r2, [r3, #5]
    1f06:	4770      	bx	lr
    1f08:	40000800 	.word	0x40000800

00001f0c <_osc32kctrl_init_sources>:
}

static inline hri_osc32kctrl_osculp32k_reg_t hri_osc32kctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Osc32kctrl *)hw)->OSCULP32K.reg;
    1f0c:	4b03      	ldr	r3, [pc, #12]	; (1f1c <_osc32kctrl_init_sources+0x10>)
    1f0e:	69da      	ldr	r2, [r3, #28]
	calib = hri_osc32kctrl_read_OSCULP32K_CALIB_bf(hw);
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
#if CONF_OSCULP32K_CALIB_ENABLE == 1
	                                   OSC32KCTRL_OSCULP32K_CALIB(CONF_OSCULP32K_CALIB)
#else
	                                   OSC32KCTRL_OSCULP32K_CALIB(calib)
    1f10:	f402 527c 	and.w	r2, r2, #16128	; 0x3f00
}

static inline void hri_osc32kctrl_write_OSCULP32K_reg(const void *const hw, hri_osc32kctrl_osculp32k_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->OSCULP32K.reg = data;
    1f14:	61da      	str	r2, [r3, #28]
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
    1f16:	2200      	movs	r2, #0
    1f18:	741a      	strb	r2, [r3, #16]
    1f1a:	4770      	bx	lr
    1f1c:	40001400 	.word	0x40001400

00001f20 <_oscctrl_init_sources>:
}

static inline void hri_oscctrl_write_XOSCCTRL_reg(const void *const hw, uint8_t index, hri_oscctrl_xoscctrl_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->XOSCCTRL[index].reg = data;
    1f20:	4a04      	ldr	r2, [pc, #16]	; (1f34 <_oscctrl_init_sources+0x14>)
    1f22:	4b05      	ldr	r3, [pc, #20]	; (1f38 <_oscctrl_init_sources+0x18>)
    1f24:	619a      	str	r2, [r3, #24]
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCRDY1) >> OSCCTRL_STATUS_XOSCRDY1_Pos;
    1f26:	461a      	mov	r2, r3
    1f28:	6913      	ldr	r3, [r2, #16]
	        | (CONF_XOSC1_XTALEN << OSCCTRL_XOSCCTRL_XTALEN_Pos) | (CONF_XOSC1_ENABLE << OSCCTRL_XOSCCTRL_ENABLE_Pos));
#endif

#if CONF_XOSC1_CONFIG == 1
#if CONF_XOSC1_ENABLE == 1
	while (!hri_oscctrl_get_STATUS_XOSCRDY1_bit(hw))
    1f2a:	f013 0f02 	tst.w	r3, #2
    1f2e:	d0fb      	beq.n	1f28 <_oscctrl_init_sources+0x8>
	hri_oscctrl_set_XOSCCTRL_ONDEMAND_bit(hw, 1);
#endif
#endif

	(void)hw;
}
    1f30:	4770      	bx	lr
    1f32:	bf00      	nop
    1f34:	03002606 	.word	0x03002606
    1f38:	40001000 	.word	0x40001000

00001f3c <_oscctrl_init_referenced_generators>:
	tmp = ((Gclk *)hw)->GENCTRL[index].reg;
    1f3c:	4a47      	ldr	r2, [pc, #284]	; (205c <_oscctrl_init_referenced_generators+0x120>)
    1f3e:	6a13      	ldr	r3, [r2, #32]
	tmp &= ~GCLK_GENCTRL_SRC_Msk;
    1f40:	f023 030f 	bic.w	r3, r3, #15
	tmp |= GCLK_GENCTRL_SRC(data);
    1f44:	f043 0304 	orr.w	r3, r3, #4
	((Gclk *)hw)->GENCTRL[index].reg = tmp;
    1f48:	6213      	str	r3, [r2, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    1f4a:	4611      	mov	r1, r2
    1f4c:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    1f50:	684b      	ldr	r3, [r1, #4]
    1f52:	4213      	tst	r3, r2
    1f54:	d1fc      	bne.n	1f50 <_oscctrl_init_referenced_generators+0x14>
	return (((Gclk *)hw)->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL0) >> GCLK_SYNCBUSY_GENCTRL0_Pos;
    1f56:	4a41      	ldr	r2, [pc, #260]	; (205c <_oscctrl_init_referenced_generators+0x120>)
    1f58:	6853      	ldr	r3, [r2, #4]
{
	void *hw = (void *)OSCCTRL;

#if CONF_DFLL_CONFIG == 1
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, GCLK_GENCTRL_SRC_OSCULP32K);
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
    1f5a:	f013 0f04 	tst.w	r3, #4
    1f5e:	d1fb      	bne.n	1f58 <_oscctrl_init_referenced_generators+0x1c>
}

static inline void hri_oscctrl_write_DFLLCTRLA_reg(const void *const hw, hri_oscctrl_dfllctrla_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLCTRLA.reg = data;
    1f60:	4b3f      	ldr	r3, [pc, #252]	; (2060 <_oscctrl_init_referenced_generators+0x124>)
    1f62:	2200      	movs	r2, #0
    1f64:	771a      	strb	r2, [r3, #28]
}

static inline void hri_oscctrl_write_DFLLMUL_reg(const void *const hw, hri_oscctrl_dfllmul_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLMUL.reg = data;
    1f66:	4a3f      	ldr	r2, [pc, #252]	; (2064 <_oscctrl_init_referenced_generators+0x128>)
    1f68:	629a      	str	r2, [r3, #40]	; 0x28
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(const void *const hw)
{
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    1f6a:	461a      	mov	r2, r3
    1f6c:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
#endif

	hri_oscctrl_write_DFLLMUL_reg(hw,
	                              OSCCTRL_DFLLMUL_CSTEP(CONF_DFLL_CSTEP) | OSCCTRL_DFLLMUL_FSTEP(CONF_DFLL_FSTEP)
	                                  | OSCCTRL_DFLLMUL_MUL(CONF_DFLL_MUL));
	while (hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(hw))
    1f70:	f013 0f10 	tst.w	r3, #16
    1f74:	d1fa      	bne.n	1f6c <_oscctrl_init_referenced_generators+0x30>
	((Oscctrl *)hw)->DFLLCTRLB.reg = data;
    1f76:	2200      	movs	r2, #0
    1f78:	4b39      	ldr	r3, [pc, #228]	; (2060 <_oscctrl_init_referenced_generators+0x124>)
    1f7a:	f883 2020 	strb.w	r2, [r3, #32]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    1f7e:	461a      	mov	r2, r3
    1f80:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
		;

	hri_oscctrl_write_DFLLCTRLB_reg(hw, 0);
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    1f84:	f013 0f04 	tst.w	r3, #4
    1f88:	d1fa      	bne.n	1f80 <_oscctrl_init_referenced_generators+0x44>
	((Oscctrl *)hw)->DFLLCTRLA.reg = data;
    1f8a:	2202      	movs	r2, #2
    1f8c:	4b34      	ldr	r3, [pc, #208]	; (2060 <_oscctrl_init_referenced_generators+0x124>)
    1f8e:	771a      	strb	r2, [r3, #28]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    1f90:	461a      	mov	r2, r3
    1f92:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
		;

	tmp = (CONF_DFLL_RUNSTDBY << OSCCTRL_DFLLCTRLA_RUNSTDBY_Pos) | OSCCTRL_DFLLCTRLA_ENABLE;
	hri_oscctrl_write_DFLLCTRLA_reg(hw, tmp);
	while (hri_oscctrl_get_DFLLSYNC_ENABLE_bit(hw))
    1f96:	f013 0f02 	tst.w	r3, #2
    1f9a:	d1fa      	bne.n	1f92 <_oscctrl_init_referenced_generators+0x56>
	return ((Oscctrl *)hw)->DFLLVAL.reg;
    1f9c:	4b30      	ldr	r3, [pc, #192]	; (2060 <_oscctrl_init_referenced_generators+0x124>)
    1f9e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	((Oscctrl *)hw)->DFLLVAL.reg = data;
    1fa0:	625a      	str	r2, [r3, #36]	; 0x24
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    1fa2:	461a      	mov	r2, r3
    1fa4:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c

#if CONF_DFLL_OVERWRITE_CALIBRATION == 1
	hri_oscctrl_write_DFLLVAL_reg(hw, OSCCTRL_DFLLVAL_COARSE(CONF_DFLL_COARSE) | OSCCTRL_DFLLVAL_FINE(CONF_DFLL_FINE));
#endif
	hri_oscctrl_write_DFLLVAL_reg(hw, hri_oscctrl_read_DFLLVAL_reg(hw));
	while (hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit(hw))
    1fa8:	f013 0f08 	tst.w	r3, #8
    1fac:	d1fa      	bne.n	1fa4 <_oscctrl_init_referenced_generators+0x68>
	((Oscctrl *)hw)->DFLLCTRLB.reg = data;
    1fae:	2219      	movs	r2, #25
    1fb0:	4b2b      	ldr	r3, [pc, #172]	; (2060 <_oscctrl_init_referenced_generators+0x124>)
    1fb2:	f883 2020 	strb.w	r2, [r3, #32]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    1fb6:	461a      	mov	r2, r3
    1fb8:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
	tmp = (CONF_DFLL_WAITLOCK << OSCCTRL_DFLLCTRLB_WAITLOCK_Pos) | (CONF_DFLL_BPLCKC << OSCCTRL_DFLLCTRLB_BPLCKC_Pos)
	      | (CONF_DFLL_QLDIS << OSCCTRL_DFLLCTRLB_QLDIS_Pos) | (CONF_DFLL_CCDIS << OSCCTRL_DFLLCTRLB_CCDIS_Pos)
	      | (CONF_DFLL_USBCRM << OSCCTRL_DFLLCTRLB_USBCRM_Pos) | (CONF_DFLL_LLAW << OSCCTRL_DFLLCTRLB_LLAW_Pos)
	      | (CONF_DFLL_STABLE << OSCCTRL_DFLLCTRLB_STABLE_Pos) | (CONF_DFLL_MODE << OSCCTRL_DFLLCTRLB_MODE_Pos) | 0;
	hri_oscctrl_write_DFLLCTRLB_reg(hw, tmp);
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    1fbc:	f013 0f04 	tst.w	r3, #4
    1fc0:	d1fa      	bne.n	1fb8 <_oscctrl_init_referenced_generators+0x7c>
	((Gclk *)hw)->PCHCTRL[index].reg = data;
    1fc2:	2243      	movs	r2, #67	; 0x43
    1fc4:	4b25      	ldr	r3, [pc, #148]	; (205c <_oscctrl_init_referenced_generators+0x120>)
    1fc6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLRATIO.reg = data;
    1fca:	4a27      	ldr	r2, [pc, #156]	; (2068 <_oscctrl_init_referenced_generators+0x12c>)
    1fcc:	f5a3 6340 	sub.w	r3, r3, #3072	; 0xc00
    1fd0:	649a      	str	r2, [r3, #72]	; 0x48
	while (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg & reg) {
    1fd2:	461a      	mov	r2, r3
    1fd4:	6d13      	ldr	r3, [r2, #80]	; 0x50
    1fd6:	f013 0f06 	tst.w	r3, #6
    1fda:	d1fb      	bne.n	1fd4 <_oscctrl_init_referenced_generators+0x98>
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLB.reg = data;
    1fdc:	4b20      	ldr	r3, [pc, #128]	; (2060 <_oscctrl_init_referenced_generators+0x124>)
    1fde:	f44f 6200 	mov.w	r2, #2048	; 0x800
    1fe2:	64da      	str	r2, [r3, #76]	; 0x4c
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLA.reg = data;
    1fe4:	2202      	movs	r2, #2
    1fe6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	while (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg & reg) {
    1fea:	461a      	mov	r2, r3
    1fec:	6d13      	ldr	r3, [r2, #80]	; 0x50
    1fee:	f013 0f02 	tst.w	r3, #2
    1ff2:	d1fb      	bne.n	1fec <_oscctrl_init_referenced_generators+0xb0>
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
    1ff4:	4b1a      	ldr	r3, [pc, #104]	; (2060 <_oscctrl_init_referenced_generators+0x124>)
    1ff6:	f893 3020 	ldrb.w	r3, [r3, #32]
	                                (CONF_FDPLL1_RUNSTDBY << OSCCTRL_DPLLCTRLA_RUNSTDBY_Pos)
	                                    | (CONF_FDPLL1_ENABLE << OSCCTRL_DPLLCTRLA_ENABLE_Pos));
#endif

#if CONF_DFLL_CONFIG == 1
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(hw)) {
    1ffa:	f013 0f01 	tst.w	r3, #1
    1ffe:	d026      	beq.n	204e <_oscctrl_init_referenced_generators+0x112>
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    2000:	4a17      	ldr	r2, [pc, #92]	; (2060 <_oscctrl_init_referenced_generators+0x124>)
    2002:	6913      	ldr	r3, [r2, #16]
	tmp &= mask;
    2004:	f403 6310 	and.w	r3, r3, #2304	; 0x900
		hri_oscctrl_status_reg_t status_mask = OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC;

		while (hri_oscctrl_get_STATUS_reg(hw, status_mask) != status_mask)
    2008:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
    200c:	d1f9      	bne.n	2002 <_oscctrl_init_referenced_generators+0xc6>
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_LOCK)
    200e:	4b14      	ldr	r3, [pc, #80]	; (2060 <_oscctrl_init_referenced_generators+0x124>)
    2010:	6d5a      	ldr	r2, [r3, #84]	; 0x54
#endif
#endif

#if CONF_FDPLL1_CONFIG == 1
#if CONF_FDPLL1_ENABLE == 1
	while (!(hri_oscctrl_get_DPLLSTATUS_LOCK_bit(hw, 1) || hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(hw, 1)))
    2012:	f012 0f01 	tst.w	r2, #1
    2016:	d103      	bne.n	2020 <_oscctrl_init_referenced_generators+0xe4>
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_CLKRDY)
    2018:	6d5a      	ldr	r2, [r3, #84]	; 0x54
    201a:	f012 0f02 	tst.w	r2, #2
    201e:	d0f7      	beq.n	2010 <_oscctrl_init_referenced_generators+0xd4>
	return ((Gclk *)hw)->SYNCBUSY.reg;
    2020:	4a0e      	ldr	r2, [pc, #56]	; (205c <_oscctrl_init_referenced_generators+0x120>)
    2022:	6853      	ldr	r3, [r2, #4]
	hri_oscctrl_set_DPLLCTRLA_ONDEMAND_bit(hw, 1);
#endif
#endif

#if CONF_DFLL_CONFIG == 1
	while (hri_gclk_read_SYNCBUSY_reg(GCLK))
    2024:	2b00      	cmp	r3, #0
    2026:	d1fc      	bne.n	2022 <_oscctrl_init_referenced_generators+0xe6>
	tmp = ((Gclk *)hw)->GENCTRL[index].reg;
    2028:	4a0c      	ldr	r2, [pc, #48]	; (205c <_oscctrl_init_referenced_generators+0x120>)
    202a:	6a13      	ldr	r3, [r2, #32]
	tmp &= ~GCLK_GENCTRL_SRC_Msk;
    202c:	f023 030f 	bic.w	r3, r3, #15
	tmp |= GCLK_GENCTRL_SRC(data);
    2030:	f043 0301 	orr.w	r3, r3, #1
	((Gclk *)hw)->GENCTRL[index].reg = tmp;
    2034:	6213      	str	r3, [r2, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    2036:	4611      	mov	r1, r2
    2038:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    203c:	684b      	ldr	r3, [r1, #4]
    203e:	4213      	tst	r3, r2
    2040:	d1fc      	bne.n	203c <_oscctrl_init_referenced_generators+0x100>
	return (((Gclk *)hw)->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL0) >> GCLK_SYNCBUSY_GENCTRL0_Pos;
    2042:	4a06      	ldr	r2, [pc, #24]	; (205c <_oscctrl_init_referenced_generators+0x120>)
    2044:	6853      	ldr	r3, [r2, #4]
		;
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, CONF_GCLK_GEN_0_SOURCE);
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
    2046:	f013 0f04 	tst.w	r3, #4
    204a:	d1fb      	bne.n	2044 <_oscctrl_init_referenced_generators+0x108>
		;
#endif
	(void)hw;
}
    204c:	4770      	bx	lr
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_DFLLRDY) >> OSCCTRL_STATUS_DFLLRDY_Pos;
    204e:	4a04      	ldr	r2, [pc, #16]	; (2060 <_oscctrl_init_referenced_generators+0x124>)
    2050:	6913      	ldr	r3, [r2, #16]
		while (!hri_oscctrl_get_STATUS_DFLLRDY_bit(hw))
    2052:	f413 7f80 	tst.w	r3, #256	; 0x100
    2056:	d0fb      	beq.n	2050 <_oscctrl_init_referenced_generators+0x114>
    2058:	e7d9      	b.n	200e <_oscctrl_init_referenced_generators+0xd2>
    205a:	bf00      	nop
    205c:	40001c00 	.word	0x40001c00
    2060:	40001000 	.word	0x40001000
    2064:	0401bb80 	.word	0x0401bb80
    2068:	000307a0 	.word	0x000307a0

0000206c <_timer_init>:

/**
 * \brief Initialize Timer
 */
int32_t _timer_init(struct _timer_device *const dev, void *const hw)
{
    206c:	b538      	push	{r3, r4, r5, lr}
    206e:	460c      	mov	r4, r1
	ASSERT(dev);
    2070:	4605      	mov	r5, r0
    2072:	2230      	movs	r2, #48	; 0x30
    2074:	4917      	ldr	r1, [pc, #92]	; (20d4 <_timer_init+0x68>)
    2076:	3000      	adds	r0, #0
    2078:	bf18      	it	ne
    207a:	2001      	movne	r0, #1
    207c:	4b16      	ldr	r3, [pc, #88]	; (20d8 <_timer_init+0x6c>)
    207e:	4798      	blx	r3

	dev->hw = hw;
    2080:	60ec      	str	r4, [r5, #12]
}

static inline void hri_rtcmode0_write_CTRLA_reg(const void *const hw, hri_rtcmode0_ctrla_reg_t data)
{
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg = data;
    2082:	2301      	movs	r3, #1
    2084:	8023      	strh	r3, [r4, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    2086:	f248 0203 	movw	r2, #32771	; 0x8003
    208a:	6923      	ldr	r3, [r4, #16]
    208c:	4213      	tst	r3, r2
    208e:	d1fc      	bne.n	208a <_timer_init+0x1e>

	hri_rtcmode0_write_CTRLA_reg(dev->hw, RTC_MODE0_CTRLA_SWRST);
	hri_rtcmode0_wait_for_sync(dev->hw, RTC_MODE0_SYNCBUSY_SWRST);
    2090:	68ea      	ldr	r2, [r5, #12]
    2092:	6913      	ldr	r3, [r2, #16]
    2094:	f013 0f01 	tst.w	r3, #1
    2098:	d1fb      	bne.n	2092 <_timer_init+0x26>
}

static inline void hri_rtcmode0_write_EVCTRL_reg(const void *const hw, hri_rtcmode0_evctrl_reg_t data)
{
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.EVCTRL.reg = data;
    209a:	f44f 7380 	mov.w	r3, #256	; 0x100
    209e:	6053      	str	r3, [r2, #4]
	        | (CONF_RTC_TAMPEREO << RTC_MODE0_EVCTRL_TAMPEREO_Pos)
	        | (CONF_RTC_TAMPEVEI << RTC_MODE0_EVCTRL_TAMPEVEI_Pos) | (CONF_RTC_OVFEO << RTC_MODE0_EVCTRL_OVFEO_Pos));
#endif

	hri_rtcmode0_write_CTRLA_reg(
	    dev->hw, RTC_MODE0_CTRLA_PRESCALER(CONF_RTC_PRESCALER) | RTC_MODE0_CTRLA_COUNTSYNC | RTC_MODE0_CTRLA_MATCHCLR);
    20a0:	68ea      	ldr	r2, [r5, #12]
	((Rtc *)hw)->MODE0.CTRLA.reg = data;
    20a2:	f248 0380 	movw	r3, #32896	; 0x8080
    20a6:	8013      	strh	r3, [r2, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    20a8:	f248 0103 	movw	r1, #32771	; 0x8003
    20ac:	6913      	ldr	r3, [r2, #16]
    20ae:	420b      	tst	r3, r1
    20b0:	d1fc      	bne.n	20ac <_timer_init+0x40>
	hri_rtcmode0_write_COMP_reg(dev->hw, 0, CONF_RTC_COMP_VAL);
    20b2:	68ea      	ldr	r2, [r5, #12]
}

static inline void hri_rtcmode0_write_COMP_reg(const void *const hw, uint8_t index, hri_rtcmode0_comp_reg_t data)
{
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.COMP[index].reg = data;
    20b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
    20b8:	6213      	str	r3, [r2, #32]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    20ba:	6913      	ldr	r3, [r2, #16]
    20bc:	f013 0f60 	tst.w	r3, #96	; 0x60
    20c0:	d1fb      	bne.n	20ba <_timer_init+0x4e>
	hri_rtcmode0_set_INTEN_CMP0_bit(dev->hw);
    20c2:	68eb      	ldr	r3, [r5, #12]
	((Rtc *)hw)->MODE0.INTENSET.reg = RTC_MODE0_INTENSET_CMP0;
    20c4:	f44f 7280 	mov.w	r2, #256	; 0x100
    20c8:	815a      	strh	r2, [r3, #10]

	_rtc_dev = dev;
    20ca:	4b04      	ldr	r3, [pc, #16]	; (20dc <_timer_init+0x70>)
    20cc:	601d      	str	r5, [r3, #0]

	return ERR_NONE;
}
    20ce:	2000      	movs	r0, #0
    20d0:	bd38      	pop	{r3, r4, r5, pc}
    20d2:	bf00      	nop
    20d4:	000051bc 	.word	0x000051bc
    20d8:	00001b6d 	.word	0x00001b6d
    20dc:	200006f4 	.word	0x200006f4

000020e0 <_rtc_get_timer>:
 * \brief Retrieve timer helper functions
 */
struct _timer_hpl_interface *_rtc_get_timer(void)
{
	return NULL;
}
    20e0:	2000      	movs	r0, #0
    20e2:	4770      	bx	lr

000020e4 <RTC_Handler>:

/**
 * \brief Rtc interrupt handler
 */
void RTC_Handler(void)
{
    20e4:	b510      	push	{r4, lr}
	_rtc_timer_interrupt_handler(_rtc_dev);
    20e6:	4b08      	ldr	r3, [pc, #32]	; (2108 <RTC_Handler+0x24>)
    20e8:	681c      	ldr	r4, [r3, #0]
	uint16_t flag = hri_rtcmode0_read_INTFLAG_reg(dev->hw);
    20ea:	68e3      	ldr	r3, [r4, #12]
	return ((Rtc *)hw)->MODE0.INTFLAG.reg;
    20ec:	899b      	ldrh	r3, [r3, #12]
	if (flag & RTC_MODE0_INTFLAG_CMP0) {
    20ee:	f413 7f80 	tst.w	r3, #256	; 0x100
    20f2:	d007      	beq.n	2104 <RTC_Handler+0x20>
		if (dev->timer_cb.period_expired) {
    20f4:	6823      	ldr	r3, [r4, #0]
    20f6:	b10b      	cbz	r3, 20fc <RTC_Handler+0x18>
			dev->timer_cb.period_expired(dev);
    20f8:	4620      	mov	r0, r4
    20fa:	4798      	blx	r3
		hri_rtcmode0_clear_interrupt_CMP0_bit(dev->hw);
    20fc:	68e3      	ldr	r3, [r4, #12]
	((Rtc *)hw)->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_CMP0;
    20fe:	f44f 7280 	mov.w	r2, #256	; 0x100
    2102:	819a      	strh	r2, [r3, #12]
    2104:	bd10      	pop	{r4, pc}
    2106:	bf00      	nop
    2108:	200006f4 	.word	0x200006f4

0000210c <_sercom_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given sercom hardware instance
 */
static uint8_t _sercom_get_hardware_index(const void *const hw)
{
    210c:	b470      	push	{r4, r5, r6}
    210e:	b089      	sub	sp, #36	; 0x24
    2110:	4606      	mov	r6, r0
	Sercom *const sercom_modules[] = SERCOM_INSTS;
    2112:	466c      	mov	r4, sp
    2114:	4d0d      	ldr	r5, [pc, #52]	; (214c <_sercom_get_hardware_index+0x40>)
    2116:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    2118:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    211a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    211e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	/* Find index for SERCOM instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
    2122:	9b00      	ldr	r3, [sp, #0]
    2124:	42b3      	cmp	r3, r6
    2126:	d00d      	beq.n	2144 <_sercom_get_hardware_index+0x38>
    2128:	4631      	mov	r1, r6
    212a:	ab01      	add	r3, sp, #4
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    212c:	2001      	movs	r0, #1
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
    212e:	f853 2b04 	ldr.w	r2, [r3], #4
    2132:	428a      	cmp	r2, r1
    2134:	d007      	beq.n	2146 <_sercom_get_hardware_index+0x3a>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    2136:	3001      	adds	r0, #1
    2138:	2808      	cmp	r0, #8
    213a:	d1f8      	bne.n	212e <_sercom_get_hardware_index+0x22>
			return i;
		}
	}
	return 0;
    213c:	2000      	movs	r0, #0
}
    213e:	b009      	add	sp, #36	; 0x24
    2140:	bc70      	pop	{r4, r5, r6}
    2142:	4770      	bx	lr
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    2144:	2000      	movs	r0, #0
			return i;
    2146:	b2c0      	uxtb	r0, r0
    2148:	e7f9      	b.n	213e <_sercom_get_hardware_index+0x32>
    214a:	bf00      	nop
    214c:	000051d4 	.word	0x000051d4

00002150 <_sercom_init_irq_param>:
 * \brief Init irq param with the given sercom hardware instance
 */
static void _sercom_init_irq_param(const void *const hw, void *dev)
{

	if (hw == SERCOM1) {
    2150:	4b05      	ldr	r3, [pc, #20]	; (2168 <_sercom_init_irq_param+0x18>)
    2152:	4298      	cmp	r0, r3
    2154:	d005      	beq.n	2162 <_sercom_init_irq_param+0x12>
		_sercom1_dev = (struct _i2c_m_async_device *)dev;
	}

	if (hw == SERCOM5) {
    2156:	4b05      	ldr	r3, [pc, #20]	; (216c <_sercom_init_irq_param+0x1c>)
    2158:	4298      	cmp	r0, r3
		_sercom5_dev = (struct _i2c_m_async_device *)dev;
    215a:	bf04      	itt	eq
    215c:	4b04      	ldreq	r3, [pc, #16]	; (2170 <_sercom_init_irq_param+0x20>)
    215e:	6059      	streq	r1, [r3, #4]
    2160:	4770      	bx	lr
		_sercom1_dev = (struct _i2c_m_async_device *)dev;
    2162:	4b03      	ldr	r3, [pc, #12]	; (2170 <_sercom_init_irq_param+0x20>)
    2164:	6019      	str	r1, [r3, #0]
    2166:	4770      	bx	lr
    2168:	40003400 	.word	0x40003400
    216c:	43000400 	.word	0x43000400
    2170:	200006f8 	.word	0x200006f8

00002174 <_sercom_get_irq_num>:

/**
 * \brief Retrieve IRQ number for the given hardware instance
 */
static uint8_t _sercom_get_irq_num(const void *const hw)
{
    2174:	b508      	push	{r3, lr}
	return SERCOM0_0_IRQn + (_sercom_get_hardware_index(hw) << 2);
    2176:	4b03      	ldr	r3, [pc, #12]	; (2184 <_sercom_get_irq_num+0x10>)
    2178:	4798      	blx	r3
    217a:	0080      	lsls	r0, r0, #2
    217c:	302e      	adds	r0, #46	; 0x2e
}
    217e:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
    2182:	bd08      	pop	{r3, pc}
    2184:	0000210d 	.word	0x0000210d

00002188 <_get_i2cm_index>:
{
    2188:	b508      	push	{r3, lr}
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
    218a:	4b0a      	ldr	r3, [pc, #40]	; (21b4 <_get_i2cm_index+0x2c>)
    218c:	4798      	blx	r3
		if (_i2cms[i].number == sercom_offset) {
    218e:	2801      	cmp	r0, #1
    2190:	d00c      	beq.n	21ac <_get_i2cm_index+0x24>
    2192:	2805      	cmp	r0, #5
    2194:	bf08      	it	eq
    2196:	2001      	moveq	r0, #1
    2198:	d009      	beq.n	21ae <_get_i2cm_index+0x26>
	ASSERT(false);
    219a:	f240 32b2 	movw	r2, #946	; 0x3b2
    219e:	4906      	ldr	r1, [pc, #24]	; (21b8 <_get_i2cm_index+0x30>)
    21a0:	2000      	movs	r0, #0
    21a2:	4b06      	ldr	r3, [pc, #24]	; (21bc <_get_i2cm_index+0x34>)
    21a4:	4798      	blx	r3
	return -1;
    21a6:	f04f 30ff 	mov.w	r0, #4294967295
}
    21aa:	bd08      	pop	{r3, pc}
	for (i = 0; i < ARRAY_SIZE(_i2cms); i++) {
    21ac:	2000      	movs	r0, #0
			return i;
    21ae:	b240      	sxtb	r0, r0
    21b0:	bd08      	pop	{r3, pc}
    21b2:	bf00      	nop
    21b4:	0000210d 	.word	0x0000210d
    21b8:	00005248 	.word	0x00005248
    21bc:	00001b6d 	.word	0x00001b6d

000021c0 <_i2c_m_sync_init_impl>:
	}
	return ERR_NONE;
}

static int32_t _i2c_m_sync_init_impl(struct _i2c_m_service *const service, void *const hw)
{
    21c0:	b538      	push	{r3, r4, r5, lr}
    21c2:	4605      	mov	r5, r0
    21c4:	460c      	mov	r4, r1
	uint8_t i = _get_i2cm_index(hw);
    21c6:	4608      	mov	r0, r1
    21c8:	4b32      	ldr	r3, [pc, #200]	; (2294 <_i2c_m_sync_init_impl+0xd4>)
    21ca:	4798      	blx	r3
    21cc:	b2c0      	uxtb	r0, r0
	};
}

static inline bool hri_sercomi2cm_is_syncing(const void *const hw, hri_sercomi2cm_syncbusy_reg_t reg)
{
	return ((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg;
    21ce:	69e3      	ldr	r3, [r4, #28]

	if (!hri_sercomi2cm_is_syncing(hw, SERCOM_I2CM_SYNCBUSY_SWRST)) {
    21d0:	f013 0f01 	tst.w	r3, #1
    21d4:	d122      	bne.n	221c <_i2c_m_sync_init_impl+0x5c>
		uint32_t mode = _i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_MODE_Msk;
    21d6:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    21da:	4a2f      	ldr	r2, [pc, #188]	; (2298 <_i2c_m_sync_init_impl+0xd8>)
    21dc:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    21e0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    21e2:	f002 021c 	and.w	r2, r2, #28
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    21e6:	69e3      	ldr	r3, [r4, #28]
    21e8:	f013 0f03 	tst.w	r3, #3
    21ec:	d1fb      	bne.n	21e6 <_i2c_m_sync_init_impl+0x26>
static inline hri_sercomi2cm_ctrla_reg_t hri_sercomi2cm_get_CTRLA_reg(const void *const          hw,
                                                                      hri_sercomi2cm_ctrla_reg_t mask)
{
	uint32_t tmp;
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    21ee:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomi2cm_get_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_ENABLE)) {
    21f0:	f013 0f02 	tst.w	r3, #2
    21f4:	d00b      	beq.n	220e <_i2c_m_sync_init_impl+0x4e>
	((Sercom *)hw)->I2CM.CTRLA.reg &= ~SERCOM_I2CM_CTRLA_ENABLE;
    21f6:	6823      	ldr	r3, [r4, #0]
    21f8:	f023 0302 	bic.w	r3, r3, #2
    21fc:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    21fe:	69e3      	ldr	r3, [r4, #28]
    2200:	f013 0f03 	tst.w	r3, #3
    2204:	d1fb      	bne.n	21fe <_i2c_m_sync_init_impl+0x3e>
    2206:	69e3      	ldr	r3, [r4, #28]
    2208:	f013 0f02 	tst.w	r3, #2
    220c:	d1fb      	bne.n	2206 <_i2c_m_sync_init_impl+0x46>
			hri_sercomi2cm_clear_CTRLA_ENABLE_bit(hw);
			hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_ENABLE);
		}
		hri_sercomi2cm_write_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_SWRST | mode);
    220e:	f042 0201 	orr.w	r2, r2, #1
}

static inline void hri_sercomi2cm_write_CTRLA_reg(const void *const hw, hri_sercomi2cm_ctrla_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLA.reg = data;
    2212:	6022      	str	r2, [r4, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    2214:	69e3      	ldr	r3, [r4, #28]
    2216:	f013 0f03 	tst.w	r3, #3
    221a:	d1fb      	bne.n	2214 <_i2c_m_sync_init_impl+0x54>
    221c:	69e3      	ldr	r3, [r4, #28]
    221e:	f013 0f01 	tst.w	r3, #1
    2222:	d1fb      	bne.n	221c <_i2c_m_sync_init_impl+0x5c>
	}
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST);

	hri_sercomi2cm_write_CTRLA_reg(hw, _i2cms[i].ctrl_a);
    2224:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    2228:	4a1b      	ldr	r2, [pc, #108]	; (2298 <_i2c_m_sync_init_impl+0xd8>)
    222a:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    222e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	((Sercom *)hw)->I2CM.CTRLA.reg = data;
    2230:	6022      	str	r2, [r4, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    2232:	69e3      	ldr	r3, [r4, #28]
    2234:	f013 0f03 	tst.w	r3, #3
    2238:	d1fb      	bne.n	2232 <_i2c_m_sync_init_impl+0x72>
	hri_sercomi2cm_write_CTRLB_reg(hw, _i2cms[i].ctrl_b);
    223a:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    223e:	4916      	ldr	r1, [pc, #88]	; (2298 <_i2c_m_sync_init_impl+0xd8>)
    2240:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
    2244:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}

static inline void hri_sercomi2cm_write_CTRLB_reg(const void *const hw, hri_sercomi2cm_ctrlb_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg = data;
    2246:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    2248:	69e3      	ldr	r3, [r4, #28]
    224a:	f013 0f04 	tst.w	r3, #4
    224e:	d1fb      	bne.n	2248 <_i2c_m_sync_init_impl+0x88>
	hri_sercomi2cm_write_BAUD_reg(hw, _i2cms[i].baud);
    2250:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    2254:	4910      	ldr	r1, [pc, #64]	; (2298 <_i2c_m_sync_init_impl+0xd8>)
    2256:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
    225a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}

static inline void hri_sercomi2cm_write_BAUD_reg(const void *const hw, hri_sercomi2cm_baud_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.BAUD.reg = data;
    225c:	60e3      	str	r3, [r4, #12]

	service->mode = (_i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_SPEED_Msk) >> SERCOM_I2CM_CTRLA_SPEED_Pos;
    225e:	f3c2 6301 	ubfx	r3, r2, #24, #2
    2262:	81ab      	strh	r3, [r5, #12]

static inline void hri_sercomi2cm_write_ADDR_HS_bit(const void *const hw, bool value)
{
	uint32_t tmp;
	SERCOM_CRITICAL_SECTION_ENTER();
	tmp = ((Sercom *)hw)->I2CM.ADDR.reg;
    2264:	6a62      	ldr	r2, [r4, #36]	; 0x24
	tmp &= ~SERCOM_I2CM_ADDR_HS;
    2266:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
	hri_sercomi2cm_write_ADDR_HS_bit(hw, service->mode < I2C_HS ? 0 : 1);
    226a:	2b01      	cmp	r3, #1
    226c:	bf94      	ite	ls
    226e:	2300      	movls	r3, #0
    2270:	2301      	movhi	r3, #1
	tmp |= value << SERCOM_I2CM_ADDR_HS_Pos;
    2272:	ea42 3383 	orr.w	r3, r2, r3, lsl #14
	((Sercom *)hw)->I2CM.ADDR.reg = tmp;
    2276:	6263      	str	r3, [r4, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    2278:	69e3      	ldr	r3, [r4, #28]
    227a:	f013 0f04 	tst.w	r3, #4
    227e:	d1fb      	bne.n	2278 <_i2c_m_sync_init_impl+0xb8>

	service->trise = _i2cms[i].trise;
    2280:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    2284:	4b04      	ldr	r3, [pc, #16]	; (2298 <_i2c_m_sync_init_impl+0xd8>)
    2286:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    228a:	8e43      	ldrh	r3, [r0, #50]	; 0x32
    228c:	81eb      	strh	r3, [r5, #14]

	return ERR_NONE;
}
    228e:	2000      	movs	r0, #0
    2290:	bd38      	pop	{r3, r4, r5, pc}
    2292:	bf00      	nop
    2294:	00002189 	.word	0x00002189
    2298:	000051d4 	.word	0x000051d4

0000229c <_sercom_i2c_m_irq_handler>:
{
    229c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    22a0:	4605      	mov	r5, r0
	void *   hw    = i2c_dev->hw;
    22a2:	6904      	ldr	r4, [r0, #16]
	return ((Sercom *)hw)->I2CM.INTFLAG.reg;
    22a4:	7e26      	ldrb	r6, [r4, #24]
    22a6:	b2f6      	uxtb	r6, r6
	ASSERT(i2c_dev);
    22a8:	f8df 8234 	ldr.w	r8, [pc, #564]	; 24e0 <_sercom_i2c_m_irq_handler+0x244>
    22ac:	f240 4224 	movw	r2, #1060	; 0x424
    22b0:	4641      	mov	r1, r8
    22b2:	3000      	adds	r0, #0
    22b4:	bf18      	it	ne
    22b6:	2001      	movne	r0, #1
    22b8:	4f88      	ldr	r7, [pc, #544]	; (24dc <_sercom_i2c_m_irq_handler+0x240>)
    22ba:	47b8      	blx	r7
	ASSERT(i2c_dev->hw);
    22bc:	6928      	ldr	r0, [r5, #16]
    22be:	f240 4225 	movw	r2, #1061	; 0x425
    22c2:	4641      	mov	r1, r8
    22c4:	3000      	adds	r0, #0
    22c6:	bf18      	it	ne
    22c8:	2001      	movne	r0, #1
    22ca:	47b8      	blx	r7
	while (!(flags & ERROR_FLAG)) {
    22cc:	f016 0f80 	tst.w	r6, #128	; 0x80
    22d0:	f040 80f6 	bne.w	24c0 <_sercom_i2c_m_irq_handler+0x224>
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    22d4:	6821      	ldr	r1, [r4, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    22d6:	69e3      	ldr	r3, [r4, #28]
    22d8:	f013 0f04 	tst.w	r3, #4
    22dc:	d1fb      	bne.n	22d6 <_sercom_i2c_m_irq_handler+0x3a>
}

static inline hri_sercomi2cm_status_reg_t hri_sercomi2cm_read_STATUS_reg(const void *const hw)
{
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	return ((Sercom *)hw)->I2CM.STATUS.reg;
    22de:	8b63      	ldrh	r3, [r4, #26]
    22e0:	b29b      	uxth	r3, r3
	if (flags & MB_FLAG) {
    22e2:	f016 0f01 	tst.w	r6, #1
    22e6:	f000 8092 	beq.w	240e <_sercom_i2c_m_irq_handler+0x172>
		if (status & SERCOM_I2CM_STATUS_ARBLOST) {
    22ea:	f013 0f02 	tst.w	r3, #2
    22ee:	d024      	beq.n	233a <_sercom_i2c_m_irq_handler+0x9e>
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
    22f0:	2201      	movs	r2, #1
    22f2:	7622      	strb	r2, [r4, #24]
			msg->flags |= I2C_M_FAIL;
    22f4:	886a      	ldrh	r2, [r5, #2]
    22f6:	b292      	uxth	r2, r2
    22f8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
    22fc:	806a      	strh	r2, [r5, #2]
			msg->flags &= ~I2C_M_BUSY;
    22fe:	886a      	ldrh	r2, [r5, #2]
    2300:	f422 7280 	bic.w	r2, r2, #256	; 0x100
    2304:	0412      	lsls	r2, r2, #16
    2306:	0c12      	lsrs	r2, r2, #16
    2308:	806a      	strh	r2, [r5, #2]
			if (status & SERCOM_I2CM_STATUS_BUSERR) {
    230a:	f003 0301 	and.w	r3, r3, #1
			return I2C_ERR_BAD_ADDRESS;
    230e:	2b00      	cmp	r3, #0
    2310:	bf14      	ite	ne
    2312:	f06f 0104 	mvnne.w	r1, #4
    2316:	f06f 0103 	mvneq.w	r1, #3
	i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    231a:	886b      	ldrh	r3, [r5, #2]
    231c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    2320:	041b      	lsls	r3, r3, #16
    2322:	0c1b      	lsrs	r3, r3, #16
    2324:	806b      	strh	r3, [r5, #2]
	if (i2c_dev->cb.error) {
    2326:	696b      	ldr	r3, [r5, #20]
    2328:	2b00      	cmp	r3, #0
    232a:	f000 80c7 	beq.w	24bc <_sercom_i2c_m_irq_handler+0x220>
			i2c_dev->cb.error(i2c_dev, ret);
    232e:	4628      	mov	r0, r5
    2330:	4798      	blx	r3
	((Sercom *)hw)->I2CM.INTFLAG.reg = mask;
    2332:	2380      	movs	r3, #128	; 0x80
    2334:	7623      	strb	r3, [r4, #24]
    2336:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (status & SERCOM_I2CM_STATUS_RXNACK) {
    233a:	f013 0f04 	tst.w	r3, #4
    233e:	d124      	bne.n	238a <_sercom_i2c_m_irq_handler+0xee>
			if (msg->flags & I2C_M_TEN) {
    2340:	886b      	ldrh	r3, [r5, #2]
    2342:	f413 6f80 	tst.w	r3, #1024	; 0x400
    2346:	d03e      	beq.n	23c6 <_sercom_i2c_m_irq_handler+0x12a>
				                              ((((msg->addr & TEN_ADDR_MASK) >> 8) | TEN_ADDR_FRAME) << 1) | I2C_M_RD
    2348:	882b      	ldrh	r3, [r5, #0]
    234a:	09db      	lsrs	r3, r3, #7
				                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    234c:	f003 0206 	and.w	r2, r3, #6
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    2350:	69e3      	ldr	r3, [r4, #28]
    2352:	f013 0f04 	tst.w	r3, #4
    2356:	d1fb      	bne.n	2350 <_sercom_i2c_m_irq_handler+0xb4>
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    2358:	6a63      	ldr	r3, [r4, #36]	; 0x24
    235a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
				hri_sercomi2cm_write_ADDR_reg(hw,
    235e:	f043 03f1 	orr.w	r3, r3, #241	; 0xf1
    2362:	4313      	orrs	r3, r2
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    2364:	6263      	str	r3, [r4, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    2366:	69e3      	ldr	r3, [r4, #28]
    2368:	f013 0f04 	tst.w	r3, #4
    236c:	d1fb      	bne.n	2366 <_sercom_i2c_m_irq_handler+0xca>
				msg->flags &= ~I2C_M_TEN;
    236e:	886b      	ldrh	r3, [r5, #2]
    2370:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    2374:	041b      	lsls	r3, r3, #16
    2376:	0c1b      	lsrs	r3, r3, #16
    2378:	806b      	strh	r3, [r5, #2]
		if ((flags & MB_FLAG) && i2c_dev->cb.tx_complete) {
    237a:	69ab      	ldr	r3, [r5, #24]
    237c:	2b00      	cmp	r3, #0
    237e:	f000 8088 	beq.w	2492 <_sercom_i2c_m_irq_handler+0x1f6>
			i2c_dev->cb.tx_complete(i2c_dev);
    2382:	4628      	mov	r0, r5
    2384:	4798      	blx	r3
    2386:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				if (msg->len > 0) {
    238a:	686b      	ldr	r3, [r5, #4]
    238c:	2b00      	cmp	r3, #0
    238e:	dd04      	ble.n	239a <_sercom_i2c_m_irq_handler+0xfe>
					msg->flags |= I2C_M_FAIL;
    2390:	886b      	ldrh	r3, [r5, #2]
    2392:	b29b      	uxth	r3, r3
    2394:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    2398:	806b      	strh	r3, [r5, #2]
				if (msg->flags & I2C_M_STOP) {
    239a:	886b      	ldrh	r3, [r5, #2]
    239c:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    23a0:	d108      	bne.n	23b4 <_sercom_i2c_m_irq_handler+0x118>
				msg->flags &= ~I2C_M_BUSY;
    23a2:	886b      	ldrh	r3, [r5, #2]
    23a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    23a8:	041b      	lsls	r3, r3, #16
    23aa:	0c1b      	lsrs	r3, r3, #16
    23ac:	806b      	strh	r3, [r5, #2]
				return I2C_NACK;
    23ae:	f06f 0101 	mvn.w	r1, #1
    23b2:	e7b2      	b.n	231a <_sercom_i2c_m_irq_handler+0x7e>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    23b4:	6863      	ldr	r3, [r4, #4]
    23b6:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
    23ba:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    23bc:	69e3      	ldr	r3, [r4, #28]
    23be:	f013 0f04 	tst.w	r3, #4
    23c2:	d1fb      	bne.n	23bc <_sercom_i2c_m_irq_handler+0x120>
    23c4:	e7ed      	b.n	23a2 <_sercom_i2c_m_irq_handler+0x106>
			if (msg->len == 0) {
    23c6:	686b      	ldr	r3, [r5, #4]
    23c8:	b99b      	cbnz	r3, 23f2 <_sercom_i2c_m_irq_handler+0x156>
				if (msg->flags & I2C_M_STOP) {
    23ca:	886b      	ldrh	r3, [r5, #2]
    23cc:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    23d0:	d106      	bne.n	23e0 <_sercom_i2c_m_irq_handler+0x144>
				msg->flags &= ~I2C_M_BUSY;
    23d2:	886b      	ldrh	r3, [r5, #2]
    23d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    23d8:	041b      	lsls	r3, r3, #16
    23da:	0c1b      	lsrs	r3, r3, #16
    23dc:	806b      	strh	r3, [r5, #2]
    23de:	e7cc      	b.n	237a <_sercom_i2c_m_irq_handler+0xde>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    23e0:	6863      	ldr	r3, [r4, #4]
    23e2:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
    23e6:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    23e8:	69e3      	ldr	r3, [r4, #28]
    23ea:	f013 0f04 	tst.w	r3, #4
    23ee:	d1fb      	bne.n	23e8 <_sercom_i2c_m_irq_handler+0x14c>
    23f0:	e7ef      	b.n	23d2 <_sercom_i2c_m_irq_handler+0x136>
				hri_sercomi2cm_write_DATA_reg(hw, *msg->buffer);
    23f2:	68ab      	ldr	r3, [r5, #8]
    23f4:	781b      	ldrb	r3, [r3, #0]
	((Sercom *)hw)->I2CM.DATA.reg = data;
    23f6:	62a3      	str	r3, [r4, #40]	; 0x28
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    23f8:	69e3      	ldr	r3, [r4, #28]
    23fa:	f013 0f04 	tst.w	r3, #4
    23fe:	d1fb      	bne.n	23f8 <_sercom_i2c_m_irq_handler+0x15c>
				msg->buffer++;
    2400:	68ab      	ldr	r3, [r5, #8]
    2402:	3301      	adds	r3, #1
    2404:	60ab      	str	r3, [r5, #8]
				msg->len--;
    2406:	686b      	ldr	r3, [r5, #4]
    2408:	3b01      	subs	r3, #1
    240a:	606b      	str	r3, [r5, #4]
    240c:	e7b5      	b.n	237a <_sercom_i2c_m_irq_handler+0xde>
	} else if (flags & SB_FLAG) {
    240e:	f016 0f02 	tst.w	r6, #2
    2412:	d041      	beq.n	2498 <_sercom_i2c_m_irq_handler+0x1fc>
		if ((msg->len) && !(status & SERCOM_I2CM_STATUS_RXNACK)) {
    2414:	686a      	ldr	r2, [r5, #4]
    2416:	2a00      	cmp	r2, #0
    2418:	d036      	beq.n	2488 <_sercom_i2c_m_irq_handler+0x1ec>
    241a:	f013 0f04 	tst.w	r3, #4
    241e:	d133      	bne.n	2488 <_sercom_i2c_m_irq_handler+0x1ec>
	tmp = (tmp & SERCOM_I2CM_CTRLA_SCLSM) >> SERCOM_I2CM_CTRLA_SCLSM_Pos;
    2420:	f3c1 61c0 	ubfx	r1, r1, #27, #1
			msg->len--;
    2424:	3a01      	subs	r2, #1
    2426:	606a      	str	r2, [r5, #4]
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
    2428:	2a00      	cmp	r2, #0
    242a:	d137      	bne.n	249c <_sercom_i2c_m_irq_handler+0x200>
    242c:	2900      	cmp	r1, #0
    242e:	d039      	beq.n	24a4 <_sercom_i2c_m_irq_handler+0x208>
				if (msg->flags & I2C_M_STOP) {
    2430:	886b      	ldrh	r3, [r5, #2]
    2432:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    2436:	d116      	bne.n	2466 <_sercom_i2c_m_irq_handler+0x1ca>
				msg->flags &= ~I2C_M_BUSY;
    2438:	886b      	ldrh	r3, [r5, #2]
    243a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    243e:	041b      	lsls	r3, r3, #16
    2440:	0c1b      	lsrs	r3, r3, #16
    2442:	806b      	strh	r3, [r5, #2]
			*msg->buffer++ = hri_sercomi2cm_read_DATA_reg(hw);
    2444:	68aa      	ldr	r2, [r5, #8]
    2446:	1c53      	adds	r3, r2, #1
    2448:	60ab      	str	r3, [r5, #8]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    244a:	69e3      	ldr	r3, [r4, #28]
    244c:	f013 0f04 	tst.w	r3, #4
    2450:	d1fb      	bne.n	244a <_sercom_i2c_m_irq_handler+0x1ae>
	return ((Sercom *)hw)->I2CM.DATA.reg;
    2452:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    2454:	7013      	strb	r3, [r2, #0]
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    2456:	2302      	movs	r3, #2
    2458:	7623      	strb	r3, [r4, #24]
		} else if ((flags & SB_FLAG) && i2c_dev->cb.rx_complete) {
    245a:	69eb      	ldr	r3, [r5, #28]
    245c:	b1e3      	cbz	r3, 2498 <_sercom_i2c_m_irq_handler+0x1fc>
			i2c_dev->cb.rx_complete(i2c_dev);
    245e:	4628      	mov	r0, r5
    2460:	4798      	blx	r3
    2462:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_SMEN;
    2466:	6863      	ldr	r3, [r4, #4]
    2468:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    246c:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    246e:	69e3      	ldr	r3, [r4, #28]
    2470:	f013 0f04 	tst.w	r3, #4
    2474:	d1fb      	bne.n	246e <_sercom_i2c_m_irq_handler+0x1d2>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    2476:	6863      	ldr	r3, [r4, #4]
    2478:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
    247c:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    247e:	69e3      	ldr	r3, [r4, #28]
    2480:	f013 0f04 	tst.w	r3, #4
    2484:	d1fb      	bne.n	247e <_sercom_i2c_m_irq_handler+0x1e2>
    2486:	e7d7      	b.n	2438 <_sercom_i2c_m_irq_handler+0x19c>
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    2488:	2302      	movs	r3, #2
    248a:	7623      	strb	r3, [r4, #24]
			return I2C_NACK;
    248c:	f06f 0101 	mvn.w	r1, #1
    2490:	e743      	b.n	231a <_sercom_i2c_m_irq_handler+0x7e>
		} else if ((flags & SB_FLAG) && i2c_dev->cb.rx_complete) {
    2492:	f016 0f02 	tst.w	r6, #2
    2496:	d1e0      	bne.n	245a <_sercom_i2c_m_irq_handler+0x1be>
    2498:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
    249c:	2a01      	cmp	r2, #1
    249e:	d1d1      	bne.n	2444 <_sercom_i2c_m_irq_handler+0x1a8>
    24a0:	2900      	cmp	r1, #0
    24a2:	d0cf      	beq.n	2444 <_sercom_i2c_m_irq_handler+0x1a8>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    24a4:	6863      	ldr	r3, [r4, #4]
    24a6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
    24aa:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    24ac:	69e3      	ldr	r3, [r4, #28]
    24ae:	f013 0f04 	tst.w	r3, #4
    24b2:	d1fb      	bne.n	24ac <_sercom_i2c_m_irq_handler+0x210>
			if (msg->len == 0) {
    24b4:	686b      	ldr	r3, [r5, #4]
    24b6:	2b00      	cmp	r3, #0
    24b8:	d0ba      	beq.n	2430 <_sercom_i2c_m_irq_handler+0x194>
    24ba:	e7c3      	b.n	2444 <_sercom_i2c_m_irq_handler+0x1a8>
    24bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    24c0:	886b      	ldrh	r3, [r5, #2]
    24c2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    24c6:	041b      	lsls	r3, r3, #16
    24c8:	0c1b      	lsrs	r3, r3, #16
    24ca:	806b      	strh	r3, [r5, #2]
	if (i2c_dev->cb.error) {
    24cc:	696b      	ldr	r3, [r5, #20]
    24ce:	2b00      	cmp	r3, #0
    24d0:	d0e2      	beq.n	2498 <_sercom_i2c_m_irq_handler+0x1fc>
			i2c_dev->cb.error(i2c_dev, I2C_ERR_BUS);
    24d2:	f06f 0104 	mvn.w	r1, #4
    24d6:	4628      	mov	r0, r5
    24d8:	4798      	blx	r3
    24da:	e72a      	b.n	2332 <_sercom_i2c_m_irq_handler+0x96>
    24dc:	00001b6d 	.word	0x00001b6d
    24e0:	00005248 	.word	0x00005248

000024e4 <_i2c_m_async_init>:
{
    24e4:	b570      	push	{r4, r5, r6, lr}
    24e6:	460d      	mov	r5, r1
	ASSERT(i2c_dev);
    24e8:	4606      	mov	r6, r0
    24ea:	f44f 6293 	mov.w	r2, #1176	; 0x498
    24ee:	4918      	ldr	r1, [pc, #96]	; (2550 <_i2c_m_async_init+0x6c>)
    24f0:	3000      	adds	r0, #0
    24f2:	bf18      	it	ne
    24f4:	2001      	movne	r0, #1
    24f6:	4b17      	ldr	r3, [pc, #92]	; (2554 <_i2c_m_async_init+0x70>)
    24f8:	4798      	blx	r3
	i2c_dev->hw = hw;
    24fa:	6135      	str	r5, [r6, #16]
	init_status = _i2c_m_sync_init_impl(&i2c_dev->service, hw);
    24fc:	4629      	mov	r1, r5
    24fe:	4630      	mov	r0, r6
    2500:	4b15      	ldr	r3, [pc, #84]	; (2558 <_i2c_m_async_init+0x74>)
    2502:	4798      	blx	r3
	if (init_status) {
    2504:	4604      	mov	r4, r0
    2506:	b108      	cbz	r0, 250c <_i2c_m_async_init+0x28>
}
    2508:	4620      	mov	r0, r4
    250a:	bd70      	pop	{r4, r5, r6, pc}
	_sercom_init_irq_param(hw, (void *)i2c_dev);
    250c:	4631      	mov	r1, r6
    250e:	4628      	mov	r0, r5
    2510:	4b12      	ldr	r3, [pc, #72]	; (255c <_i2c_m_async_init+0x78>)
    2512:	4798      	blx	r3
	uint8_t irq = _sercom_get_irq_num(hw);
    2514:	4628      	mov	r0, r5
    2516:	4b12      	ldr	r3, [pc, #72]	; (2560 <_i2c_m_async_init+0x7c>)
    2518:	4798      	blx	r3
    251a:	1d01      	adds	r1, r0, #4
    251c:	b2c9      	uxtb	r1, r1
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    251e:	2501      	movs	r5, #1
    2520:	f000 021f 	and.w	r2, r0, #31
    2524:	fa05 f202 	lsl.w	r2, r5, r2
    2528:	0943      	lsrs	r3, r0, #5
    252a:	009b      	lsls	r3, r3, #2
    252c:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    2530:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    2534:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    2538:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    253c:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2540:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2544:	601a      	str	r2, [r3, #0]
		irq++;
    2546:	3001      	adds	r0, #1
    2548:	b2c0      	uxtb	r0, r0
	for (uint32_t i = 0; i < 4; i++) {
    254a:	4281      	cmp	r1, r0
    254c:	d1e8      	bne.n	2520 <_i2c_m_async_init+0x3c>
    254e:	e7db      	b.n	2508 <_i2c_m_async_init+0x24>
    2550:	00005248 	.word	0x00005248
    2554:	00001b6d 	.word	0x00001b6d
    2558:	000021c1 	.word	0x000021c1
    255c:	00002151 	.word	0x00002151
    2560:	00002175 	.word	0x00002175

00002564 <_i2c_m_async_transfer>:
{
    2564:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2568:	460c      	mov	r4, r1
	ASSERT(i2c_dev);
    256a:	4605      	mov	r5, r0
    256c:	f110 0800 	adds.w	r8, r0, #0
    2570:	bf18      	it	ne
    2572:	f04f 0801 	movne.w	r8, #1
    2576:	4f45      	ldr	r7, [pc, #276]	; (268c <_i2c_m_async_transfer+0x128>)
    2578:	f240 42ee 	movw	r2, #1262	; 0x4ee
    257c:	4639      	mov	r1, r7
    257e:	4640      	mov	r0, r8
    2580:	4e43      	ldr	r6, [pc, #268]	; (2690 <_i2c_m_async_transfer+0x12c>)
    2582:	47b0      	blx	r6
	ASSERT(i2c_dev->hw);
    2584:	6928      	ldr	r0, [r5, #16]
    2586:	f240 42ef 	movw	r2, #1263	; 0x4ef
    258a:	4639      	mov	r1, r7
    258c:	3000      	adds	r0, #0
    258e:	bf18      	it	ne
    2590:	2001      	movne	r0, #1
    2592:	47b0      	blx	r6
	ASSERT(msg);
    2594:	f44f 629e 	mov.w	r2, #1264	; 0x4f0
    2598:	4639      	mov	r1, r7
    259a:	1c20      	adds	r0, r4, #0
    259c:	bf18      	it	ne
    259e:	2001      	movne	r0, #1
    25a0:	47b0      	blx	r6
	if (msg->len == 0) {
    25a2:	6860      	ldr	r0, [r4, #4]
    25a4:	2800      	cmp	r0, #0
    25a6:	d06f      	beq.n	2688 <_i2c_m_async_transfer+0x124>
	if (i2c_dev->service.msg.flags & I2C_M_BUSY) {
    25a8:	886b      	ldrh	r3, [r5, #2]
    25aa:	f413 7f80 	tst.w	r3, #256	; 0x100
    25ae:	d169      	bne.n	2684 <_i2c_m_async_transfer+0x120>
	msg->flags |= I2C_M_BUSY;
    25b0:	8863      	ldrh	r3, [r4, #2]
    25b2:	b29b      	uxth	r3, r3
    25b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    25b8:	8063      	strh	r3, [r4, #2]
	i2c_dev->service.msg = *msg;
    25ba:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
    25be:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	hri_sercomi2cm_set_CTRLB_SMEN_bit(i2c_dev->hw);
    25c2:	692a      	ldr	r2, [r5, #16]
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_SMEN;
    25c4:	6853      	ldr	r3, [r2, #4]
    25c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    25ca:	6053      	str	r3, [r2, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    25cc:	69d3      	ldr	r3, [r2, #28]
    25ce:	f013 0f04 	tst.w	r3, #4
    25d2:	d1fb      	bne.n	25cc <_i2c_m_async_transfer+0x68>
	void *             hw    = i2c_dev->hw;
    25d4:	692c      	ldr	r4, [r5, #16]
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    25d6:	6826      	ldr	r6, [r4, #0]
	ASSERT(i2c_dev);
    25d8:	f240 42c6 	movw	r2, #1222	; 0x4c6
    25dc:	492b      	ldr	r1, [pc, #172]	; (268c <_i2c_m_async_transfer+0x128>)
    25de:	4640      	mov	r0, r8
    25e0:	4b2b      	ldr	r3, [pc, #172]	; (2690 <_i2c_m_async_transfer+0x12c>)
    25e2:	4798      	blx	r3
	if (msg->len == 1 && sclsm) {
    25e4:	686b      	ldr	r3, [r5, #4]
    25e6:	2b01      	cmp	r3, #1
    25e8:	d02a      	beq.n	2640 <_i2c_m_async_transfer+0xdc>
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    25ea:	6863      	ldr	r3, [r4, #4]
    25ec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
    25f0:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    25f2:	69e3      	ldr	r3, [r4, #28]
    25f4:	f013 0f04 	tst.w	r3, #4
    25f8:	d1fb      	bne.n	25f2 <_i2c_m_async_transfer+0x8e>
	if (msg->addr & I2C_M_TEN) {
    25fa:	882b      	ldrh	r3, [r5, #0]
    25fc:	f413 6f80 	tst.w	r3, #1024	; 0x400
    2600:	d02a      	beq.n	2658 <_i2c_m_async_transfer+0xf4>
		if (msg->flags & I2C_M_RD) {
    2602:	886a      	ldrh	r2, [r5, #2]
    2604:	f012 0f01 	tst.w	r2, #1
    2608:	d004      	beq.n	2614 <_i2c_m_async_transfer+0xb0>
			msg->flags |= I2C_M_TEN;
    260a:	886a      	ldrh	r2, [r5, #2]
    260c:	b292      	uxth	r2, r2
    260e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
    2612:	806a      	strh	r2, [r5, #2]
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    2614:	f240 72fe 	movw	r2, #2046	; 0x7fe
    2618:	ea02 0243 	and.w	r2, r2, r3, lsl #1
    261c:	69e3      	ldr	r3, [r4, #28]
    261e:	f013 0f04 	tst.w	r3, #4
    2622:	d1fb      	bne.n	261c <_i2c_m_async_transfer+0xb8>
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    2624:	6a63      	ldr	r3, [r4, #36]	; 0x24
    2626:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
		hri_sercomi2cm_write_ADDR_reg(hw,
    262a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    262e:	4313      	orrs	r3, r2
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    2630:	6263      	str	r3, [r4, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    2632:	69e3      	ldr	r3, [r4, #28]
    2634:	f013 0f04 	tst.w	r3, #4
    2638:	d1fb      	bne.n	2632 <_i2c_m_async_transfer+0xce>
	return ERR_NONE;
    263a:	2000      	movs	r0, #0
    263c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (msg->len == 1 && sclsm) {
    2640:	f016 6f00 	tst.w	r6, #134217728	; 0x8000000
    2644:	d0d1      	beq.n	25ea <_i2c_m_async_transfer+0x86>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    2646:	6863      	ldr	r3, [r4, #4]
    2648:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
    264c:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    264e:	69e3      	ldr	r3, [r4, #28]
    2650:	f013 0f04 	tst.w	r3, #4
    2654:	d1fb      	bne.n	264e <_i2c_m_async_transfer+0xea>
    2656:	e7d0      	b.n	25fa <_i2c_m_async_transfer+0x96>
		                              ((msg->addr & SEVEN_ADDR_MASK) << 1) | (msg->flags & I2C_M_RD ? I2C_M_RD : 0x0)
    2658:	8869      	ldrh	r1, [r5, #2]
    265a:	005a      	lsls	r2, r3, #1
    265c:	b2d2      	uxtb	r2, r2
    265e:	f001 0301 	and.w	r3, r1, #1
    2662:	431a      	orrs	r2, r3
    2664:	69e3      	ldr	r3, [r4, #28]
    2666:	f013 0f04 	tst.w	r3, #4
    266a:	d1fb      	bne.n	2664 <_i2c_m_async_transfer+0x100>
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    266c:	6a63      	ldr	r3, [r4, #36]	; 0x24
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    266e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
		hri_sercomi2cm_write_ADDR_reg(hw,
    2672:	431a      	orrs	r2, r3
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    2674:	6262      	str	r2, [r4, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    2676:	69e3      	ldr	r3, [r4, #28]
    2678:	f013 0f04 	tst.w	r3, #4
    267c:	d1fb      	bne.n	2676 <_i2c_m_async_transfer+0x112>
	return ERR_NONE;
    267e:	2000      	movs	r0, #0
    2680:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return ERR_BUSY;
    2684:	f06f 0003 	mvn.w	r0, #3
}
    2688:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    268c:	00005248 	.word	0x00005248
    2690:	00001b6d 	.word	0x00001b6d

00002694 <_i2c_m_async_register_callback>:
	switch (type) {
    2694:	2901      	cmp	r1, #1
    2696:	d006      	beq.n	26a6 <_i2c_m_async_register_callback+0x12>
    2698:	b119      	cbz	r1, 26a2 <_i2c_m_async_register_callback+0xe>
    269a:	2902      	cmp	r1, #2
    269c:	d005      	beq.n	26aa <_i2c_m_async_register_callback+0x16>
}
    269e:	2000      	movs	r0, #0
    26a0:	4770      	bx	lr
		i2c_dev->cb.error = (_i2c_error_cb_t)func;
    26a2:	6142      	str	r2, [r0, #20]
		break;
    26a4:	e7fb      	b.n	269e <_i2c_m_async_register_callback+0xa>
		i2c_dev->cb.tx_complete = (_i2c_complete_cb_t)func;
    26a6:	6182      	str	r2, [r0, #24]
		break;
    26a8:	e7f9      	b.n	269e <_i2c_m_async_register_callback+0xa>
		i2c_dev->cb.rx_complete = (_i2c_complete_cb_t)func;
    26aa:	61c2      	str	r2, [r0, #28]
		break;
    26ac:	e7f7      	b.n	269e <_i2c_m_async_register_callback+0xa>
	...

000026b0 <SERCOM1_0_Handler>:

/**
 * \internal Sercom interrupt handler
 */
void SERCOM1_0_Handler(void)
{
    26b0:	b508      	push	{r3, lr}
	_sercom_i2c_m_irq_handler(_sercom1_dev);
    26b2:	4b02      	ldr	r3, [pc, #8]	; (26bc <SERCOM1_0_Handler+0xc>)
    26b4:	6818      	ldr	r0, [r3, #0]
    26b6:	4b02      	ldr	r3, [pc, #8]	; (26c0 <SERCOM1_0_Handler+0x10>)
    26b8:	4798      	blx	r3
    26ba:	bd08      	pop	{r3, pc}
    26bc:	200006f8 	.word	0x200006f8
    26c0:	0000229d 	.word	0x0000229d

000026c4 <SERCOM1_1_Handler>:
}
/**
 * \internal Sercom interrupt handler
 */
void SERCOM1_1_Handler(void)
{
    26c4:	b508      	push	{r3, lr}
	_sercom_i2c_m_irq_handler(_sercom1_dev);
    26c6:	4b02      	ldr	r3, [pc, #8]	; (26d0 <SERCOM1_1_Handler+0xc>)
    26c8:	6818      	ldr	r0, [r3, #0]
    26ca:	4b02      	ldr	r3, [pc, #8]	; (26d4 <SERCOM1_1_Handler+0x10>)
    26cc:	4798      	blx	r3
    26ce:	bd08      	pop	{r3, pc}
    26d0:	200006f8 	.word	0x200006f8
    26d4:	0000229d 	.word	0x0000229d

000026d8 <SERCOM1_2_Handler>:
}
/**
 * \internal Sercom interrupt handler
 */
void SERCOM1_2_Handler(void)
{
    26d8:	b508      	push	{r3, lr}
	_sercom_i2c_m_irq_handler(_sercom1_dev);
    26da:	4b02      	ldr	r3, [pc, #8]	; (26e4 <SERCOM1_2_Handler+0xc>)
    26dc:	6818      	ldr	r0, [r3, #0]
    26de:	4b02      	ldr	r3, [pc, #8]	; (26e8 <SERCOM1_2_Handler+0x10>)
    26e0:	4798      	blx	r3
    26e2:	bd08      	pop	{r3, pc}
    26e4:	200006f8 	.word	0x200006f8
    26e8:	0000229d 	.word	0x0000229d

000026ec <SERCOM1_3_Handler>:
}
/**
 * \internal Sercom interrupt handler
 */
void SERCOM1_3_Handler(void)
{
    26ec:	b508      	push	{r3, lr}
	_sercom_i2c_m_irq_handler(_sercom1_dev);
    26ee:	4b02      	ldr	r3, [pc, #8]	; (26f8 <SERCOM1_3_Handler+0xc>)
    26f0:	6818      	ldr	r0, [r3, #0]
    26f2:	4b02      	ldr	r3, [pc, #8]	; (26fc <SERCOM1_3_Handler+0x10>)
    26f4:	4798      	blx	r3
    26f6:	bd08      	pop	{r3, pc}
    26f8:	200006f8 	.word	0x200006f8
    26fc:	0000229d 	.word	0x0000229d

00002700 <SERCOM5_0_Handler>:

/**
 * \internal Sercom interrupt handler
 */
void SERCOM5_0_Handler(void)
{
    2700:	b508      	push	{r3, lr}
	_sercom_i2c_m_irq_handler(_sercom5_dev);
    2702:	4b02      	ldr	r3, [pc, #8]	; (270c <SERCOM5_0_Handler+0xc>)
    2704:	6858      	ldr	r0, [r3, #4]
    2706:	4b02      	ldr	r3, [pc, #8]	; (2710 <SERCOM5_0_Handler+0x10>)
    2708:	4798      	blx	r3
    270a:	bd08      	pop	{r3, pc}
    270c:	200006f8 	.word	0x200006f8
    2710:	0000229d 	.word	0x0000229d

00002714 <SERCOM5_1_Handler>:
}
/**
 * \internal Sercom interrupt handler
 */
void SERCOM5_1_Handler(void)
{
    2714:	b508      	push	{r3, lr}
	_sercom_i2c_m_irq_handler(_sercom5_dev);
    2716:	4b02      	ldr	r3, [pc, #8]	; (2720 <SERCOM5_1_Handler+0xc>)
    2718:	6858      	ldr	r0, [r3, #4]
    271a:	4b02      	ldr	r3, [pc, #8]	; (2724 <SERCOM5_1_Handler+0x10>)
    271c:	4798      	blx	r3
    271e:	bd08      	pop	{r3, pc}
    2720:	200006f8 	.word	0x200006f8
    2724:	0000229d 	.word	0x0000229d

00002728 <SERCOM5_2_Handler>:
}
/**
 * \internal Sercom interrupt handler
 */
void SERCOM5_2_Handler(void)
{
    2728:	b508      	push	{r3, lr}
	_sercom_i2c_m_irq_handler(_sercom5_dev);
    272a:	4b02      	ldr	r3, [pc, #8]	; (2734 <SERCOM5_2_Handler+0xc>)
    272c:	6858      	ldr	r0, [r3, #4]
    272e:	4b02      	ldr	r3, [pc, #8]	; (2738 <SERCOM5_2_Handler+0x10>)
    2730:	4798      	blx	r3
    2732:	bd08      	pop	{r3, pc}
    2734:	200006f8 	.word	0x200006f8
    2738:	0000229d 	.word	0x0000229d

0000273c <SERCOM5_3_Handler>:
}
/**
 * \internal Sercom interrupt handler
 */
void SERCOM5_3_Handler(void)
{
    273c:	b508      	push	{r3, lr}
	_sercom_i2c_m_irq_handler(_sercom5_dev);
    273e:	4b02      	ldr	r3, [pc, #8]	; (2748 <SERCOM5_3_Handler+0xc>)
    2740:	6858      	ldr	r0, [r3, #4]
    2742:	4b02      	ldr	r3, [pc, #8]	; (274c <SERCOM5_3_Handler+0x10>)
    2744:	4798      	blx	r3
    2746:	bd08      	pop	{r3, pc}
    2748:	200006f8 	.word	0x200006f8
    274c:	0000229d 	.word	0x0000229d

00002750 <_spi_m_sync_init>:
}

int32_t _spi_m_sync_init(struct _spi_m_sync_dev *dev, void *const hw)
{
    2750:	b570      	push	{r4, r5, r6, lr}
    2752:	4606      	mov	r6, r0
    2754:	460c      	mov	r4, r1
	uint8_t n = _sercom_get_hardware_index((const void *)hw_addr);
    2756:	4608      	mov	r0, r1
    2758:	4b5d      	ldr	r3, [pc, #372]	; (28d0 <_spi_m_sync_init+0x180>)
    275a:	4798      	blx	r3
		if (sercomspi_regs[i].n == n) {
    275c:	b168      	cbz	r0, 277a <_spi_m_sync_init+0x2a>
    275e:	4603      	mov	r3, r0
    2760:	2806      	cmp	r0, #6
    2762:	bf08      	it	eq
    2764:	2301      	moveq	r3, #1
    2766:	d009      	beq.n	277c <_spi_m_sync_init+0x2c>
	const struct sercomspi_regs_cfg *regs = _spi_get_regs((uint32_t)hw);

	ASSERT(dev && hw);
    2768:	2e00      	cmp	r6, #0
    276a:	f000 809f 	beq.w	28ac <_spi_m_sync_init+0x15c>
    276e:	2c00      	cmp	r4, #0
    2770:	f040 80a5 	bne.w	28be <_spi_m_sync_init+0x16e>
	return NULL;
    2774:	2500      	movs	r5, #0
	ASSERT(dev && hw);
    2776:	2000      	movs	r0, #0
    2778:	e009      	b.n	278e <_spi_m_sync_init+0x3e>
		if (sercomspi_regs[i].n == n) {
    277a:	2300      	movs	r3, #0
			return &sercomspi_regs[i];
    277c:	4d55      	ldr	r5, [pc, #340]	; (28d4 <_spi_m_sync_init+0x184>)
    277e:	eb05 1503 	add.w	r5, r5, r3, lsl #4
    2782:	441d      	add	r5, r3
	ASSERT(dev && hw);
    2784:	2e00      	cmp	r6, #0
    2786:	d0f6      	beq.n	2776 <_spi_m_sync_init+0x26>
    2788:	2001      	movs	r0, #1
    278a:	2c00      	cmp	r4, #0
    278c:	d0f3      	beq.n	2776 <_spi_m_sync_init+0x26>
    278e:	f640 12ac 	movw	r2, #2476	; 0x9ac
    2792:	4951      	ldr	r1, [pc, #324]	; (28d8 <_spi_m_sync_init+0x188>)
    2794:	4b51      	ldr	r3, [pc, #324]	; (28dc <_spi_m_sync_init+0x18c>)
    2796:	4798      	blx	r3

	if (regs == NULL) {
    2798:	2d00      	cmp	r5, #0
    279a:	f000 8084 	beq.w	28a6 <_spi_m_sync_init+0x156>
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    279e:	69e3      	ldr	r3, [r4, #28]
		return ERR_INVALID_ARG;
	}

	if (!hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    27a0:	f013 0f01 	tst.w	r3, #1
    27a4:	d11d      	bne.n	27e2 <_spi_m_sync_init+0x92>
		uint32_t mode = regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk;
    27a6:	682b      	ldr	r3, [r5, #0]
    27a8:	f003 021c 	and.w	r2, r3, #28
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    27ac:	69e3      	ldr	r3, [r4, #28]
    27ae:	f013 0f03 	tst.w	r3, #3
    27b2:	d1fb      	bne.n	27ac <_spi_m_sync_init+0x5c>
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    27b4:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomspi_get_CTRLA_reg(hw, SERCOM_SPI_CTRLA_ENABLE)) {
    27b6:	f013 0f02 	tst.w	r3, #2
    27ba:	d00b      	beq.n	27d4 <_spi_m_sync_init+0x84>
	((Sercom *)hw)->SPI.CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    27bc:	6823      	ldr	r3, [r4, #0]
    27be:	f023 0302 	bic.w	r3, r3, #2
    27c2:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    27c4:	69e3      	ldr	r3, [r4, #28]
    27c6:	f013 0f03 	tst.w	r3, #3
    27ca:	d1fb      	bne.n	27c4 <_spi_m_sync_init+0x74>
    27cc:	69e3      	ldr	r3, [r4, #28]
    27ce:	f013 0f02 	tst.w	r3, #2
    27d2:	d1fb      	bne.n	27cc <_spi_m_sync_init+0x7c>
			hri_sercomspi_clear_CTRLA_ENABLE_bit(hw);
			hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_ENABLE);
		}
		hri_sercomspi_write_CTRLA_reg(hw, SERCOM_SPI_CTRLA_SWRST | mode);
    27d4:	f042 0201 	orr.w	r2, r2, #1
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    27d8:	6022      	str	r2, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    27da:	69e3      	ldr	r3, [r4, #28]
    27dc:	f013 0f03 	tst.w	r3, #3
    27e0:	d1fb      	bne.n	27da <_spi_m_sync_init+0x8a>
    27e2:	69e3      	ldr	r3, [r4, #28]
    27e4:	f013 0f01 	tst.w	r3, #1
    27e8:	d1fb      	bne.n	27e2 <_spi_m_sync_init+0x92>
	}
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST);

	dev->prvt = hw;
    27ea:	6034      	str	r4, [r6, #0]

	if ((regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk) == SERCOM_USART_CTRLA_MODE_SPI_SLAVE) {
    27ec:	682b      	ldr	r3, [r5, #0]
    27ee:	f003 031c 	and.w	r3, r3, #28
    27f2:	2b08      	cmp	r3, #8
    27f4:	d02e      	beq.n	2854 <_spi_m_sync_init+0x104>
	ASSERT(hw && regs);
    27f6:	f640 123c 	movw	r2, #2364	; 0x93c
    27fa:	4937      	ldr	r1, [pc, #220]	; (28d8 <_spi_m_sync_init+0x188>)
    27fc:	1c20      	adds	r0, r4, #0
    27fe:	bf18      	it	ne
    2800:	2001      	movne	r0, #1
    2802:	4b36      	ldr	r3, [pc, #216]	; (28dc <_spi_m_sync_init+0x18c>)
    2804:	4798      	blx	r3
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    2806:	682b      	ldr	r3, [r5, #0]
	hri_sercomspi_write_CTRLA_reg(
    2808:	f423 7381 	bic.w	r3, r3, #258	; 0x102
    280c:	f023 0301 	bic.w	r3, r3, #1
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    2810:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    2812:	69e3      	ldr	r3, [r4, #28]
    2814:	f013 0f03 	tst.w	r3, #3
    2818:	d1fb      	bne.n	2812 <_spi_m_sync_init+0xc2>
	    (regs->ctrlb
    281a:	686b      	ldr	r3, [r5, #4]
	        | (SERCOM_SPI_CTRLB_RXEN));
    281c:	f423 3338 	bic.w	r3, r3, #188416	; 0x2e000
    2820:	f423 7310 	bic.w	r3, r3, #576	; 0x240
	hri_sercomspi_write_CTRLB_reg(
    2824:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    2828:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    282a:	69e3      	ldr	r3, [r4, #28]
    282c:	f013 0f17 	tst.w	r3, #23
    2830:	d1fb      	bne.n	282a <_spi_m_sync_init+0xda>
	hri_sercomspi_write_BAUD_reg(hw, regs->baud);
    2832:	7b2b      	ldrb	r3, [r5, #12]
	((Sercom *)hw)->SPI.BAUD.reg = data;
    2834:	7323      	strb	r3, [r4, #12]
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    2836:	7b6b      	ldrb	r3, [r5, #13]
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    2838:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
	} else {
		_spi_load_regs_master(hw, regs);
	}

	/* Load character size from default hardware configuration */
	dev->char_size = ((regs->ctrlb & SERCOM_SPI_CTRLB_CHSIZE_Msk) == 0) ? 1 : 2;
    283c:	686b      	ldr	r3, [r5, #4]
    283e:	f003 0307 	and.w	r3, r3, #7
    2842:	2b00      	cmp	r3, #0
    2844:	bf0c      	ite	eq
    2846:	2301      	moveq	r3, #1
    2848:	2302      	movne	r3, #2
    284a:	7133      	strb	r3, [r6, #4]

	dev->dummy_byte = regs->dummy_byte;
    284c:	89eb      	ldrh	r3, [r5, #14]
    284e:	80f3      	strh	r3, [r6, #6]

	return ERR_NONE;
    2850:	2000      	movs	r0, #0
    2852:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(hw && regs);
    2854:	f44f 6215 	mov.w	r2, #2384	; 0x950
    2858:	491f      	ldr	r1, [pc, #124]	; (28d8 <_spi_m_sync_init+0x188>)
    285a:	1c20      	adds	r0, r4, #0
    285c:	bf18      	it	ne
    285e:	2001      	movne	r0, #1
    2860:	4b1e      	ldr	r3, [pc, #120]	; (28dc <_spi_m_sync_init+0x18c>)
    2862:	4798      	blx	r3
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    2864:	682b      	ldr	r3, [r5, #0]
	hri_sercomspi_write_CTRLA_reg(
    2866:	f423 7381 	bic.w	r3, r3, #258	; 0x102
    286a:	f023 0301 	bic.w	r3, r3, #1
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    286e:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    2870:	69e3      	ldr	r3, [r4, #28]
    2872:	f013 0f03 	tst.w	r3, #3
    2876:	d1fb      	bne.n	2870 <_spi_m_sync_init+0x120>
	                              (regs->ctrlb & ~(SERCOM_SPI_CTRLB_MSSEN))
    2878:	686b      	ldr	r3, [r5, #4]
	                                  | (SERCOM_SPI_CTRLB_RXEN | SERCOM_SPI_CTRLB_SSDE | SERCOM_SPI_CTRLB_PLOADEN));
    287a:	f423 3308 	bic.w	r3, r3, #139264	; 0x22000
    287e:	f423 7310 	bic.w	r3, r3, #576	; 0x240
	hri_sercomspi_write_CTRLB_reg(hw,
    2882:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    2886:	f443 7310 	orr.w	r3, r3, #576	; 0x240
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    288a:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    288c:	69e3      	ldr	r3, [r4, #28]
    288e:	f013 0f17 	tst.w	r3, #23
    2892:	d1fb      	bne.n	288c <_spi_m_sync_init+0x13c>
	hri_sercomspi_write_ADDR_reg(hw, regs->addr);
    2894:	68ab      	ldr	r3, [r5, #8]
	((Sercom *)hw)->SPI.ADDR.reg = data;
    2896:	6263      	str	r3, [r4, #36]	; 0x24
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    2898:	7b6b      	ldrb	r3, [r5, #13]
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    289a:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    289e:	69e3      	ldr	r3, [r4, #28]
	while (hri_sercomspi_is_syncing(hw, 0xFFFFFFFF))
    28a0:	2b00      	cmp	r3, #0
    28a2:	d1fc      	bne.n	289e <_spi_m_sync_init+0x14e>
    28a4:	e7ca      	b.n	283c <_spi_m_sync_init+0xec>
		return ERR_INVALID_ARG;
    28a6:	f06f 000c 	mvn.w	r0, #12
    28aa:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(dev && hw);
    28ac:	f640 12ac 	movw	r2, #2476	; 0x9ac
    28b0:	4909      	ldr	r1, [pc, #36]	; (28d8 <_spi_m_sync_init+0x188>)
    28b2:	2000      	movs	r0, #0
    28b4:	4b09      	ldr	r3, [pc, #36]	; (28dc <_spi_m_sync_init+0x18c>)
    28b6:	4798      	blx	r3
		return ERR_INVALID_ARG;
    28b8:	f06f 000c 	mvn.w	r0, #12
    28bc:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(dev && hw);
    28be:	f640 12ac 	movw	r2, #2476	; 0x9ac
    28c2:	4905      	ldr	r1, [pc, #20]	; (28d8 <_spi_m_sync_init+0x188>)
    28c4:	2001      	movs	r0, #1
    28c6:	4b05      	ldr	r3, [pc, #20]	; (28dc <_spi_m_sync_init+0x18c>)
    28c8:	4798      	blx	r3
		return ERR_INVALID_ARG;
    28ca:	f06f 000c 	mvn.w	r0, #12
    28ce:	bd70      	pop	{r4, r5, r6, pc}
    28d0:	0000210d 	.word	0x0000210d
    28d4:	00005224 	.word	0x00005224
    28d8:	00005248 	.word	0x00005248
    28dc:	00001b6d 	.word	0x00001b6d

000028e0 <_spi_m_sync_trans>:

	return ERR_NONE;
}

int32_t _spi_m_sync_trans(struct _spi_m_sync_dev *dev, const struct spi_msg *msg)
{
    28e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    28e4:	4681      	mov	r9, r0
    28e6:	460e      	mov	r6, r1
	void *                 hw   = dev->prvt;
    28e8:	6804      	ldr	r4, [r0, #0]
	int32_t                rc   = 0;
	struct _spi_trans_ctrl ctrl = {msg->txbuf, msg->rxbuf, 0, 0, dev->char_size};
    28ea:	f8d1 8000 	ldr.w	r8, [r1]
    28ee:	684d      	ldr	r5, [r1, #4]
    28f0:	7907      	ldrb	r7, [r0, #4]

	ASSERT(dev && hw);
    28f2:	b1a8      	cbz	r0, 2920 <_spi_m_sync_trans+0x40>
    28f4:	1c20      	adds	r0, r4, #0
    28f6:	bf18      	it	ne
    28f8:	2001      	movne	r0, #1
    28fa:	f44f 6231 	mov.w	r2, #2832	; 0xb10
    28fe:	492e      	ldr	r1, [pc, #184]	; (29b8 <_spi_m_sync_trans+0xd8>)
    2900:	4b2e      	ldr	r3, [pc, #184]	; (29bc <_spi_m_sync_trans+0xdc>)
    2902:	4798      	blx	r3
    2904:	69e3      	ldr	r3, [r4, #28]

	/* If settings are not applied (pending), we can not go on */
	if (hri_sercomspi_is_syncing(
    2906:	f013 0f07 	tst.w	r3, #7
    290a:	d134      	bne.n	2976 <_spi_m_sync_trans+0x96>
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    290c:	69e0      	ldr	r0, [r4, #28]
    290e:	f010 0003 	ands.w	r0, r0, #3
    2912:	d1fb      	bne.n	290c <_spi_m_sync_trans+0x2c>
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    2914:	6823      	ldr	r3, [r4, #0]
	        hw, (SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE | SERCOM_SPI_SYNCBUSY_CTRLB))) {
		return ERR_BUSY;
	}

	/* SPI must be enabled to start synchronous transfer */
	if (!hri_sercomspi_get_CTRLA_ENABLE_bit(hw)) {
    2916:	f013 0f02 	tst.w	r3, #2
    291a:	d030      	beq.n	297e <_spi_m_sync_trans+0x9e>
    291c:	4602      	mov	r2, r0
    291e:	e008      	b.n	2932 <_spi_m_sync_trans+0x52>
    2920:	2000      	movs	r0, #0
    2922:	e7ea      	b.n	28fa <_spi_m_sync_trans+0x1a>
	ctrl->rxcnt++;
    2924:	3201      	adds	r2, #1
	if (SERCOM_SPI_INTFLAG_ERROR & iflag) {
    2926:	f013 0f80 	tst.w	r3, #128	; 0x80
    292a:	d112      	bne.n	2952 <_spi_m_sync_trans+0x72>
		rc = _spi_err_check(iflag, hw);

		if (rc < 0) {
			break;
		}
		if (ctrl.txcnt >= msg->size && ctrl.rxcnt >= msg->size) {
    292c:	68b3      	ldr	r3, [r6, #8]
    292e:	4283      	cmp	r3, r0
    2930:	d91e      	bls.n	2970 <_spi_m_sync_trans+0x90>
	return ((Sercom *)hw)->SPI.INTFLAG.reg;
    2932:	7e23      	ldrb	r3, [r4, #24]
    2934:	b2db      	uxtb	r3, r3
	if (!(iflag & SERCOM_SPI_INTFLAG_RXC)) {
    2936:	f013 0f04 	tst.w	r3, #4
    293a:	d024      	beq.n	2986 <_spi_m_sync_trans+0xa6>
	return ((Sercom *)hw)->SPI.DATA.reg;
    293c:	6aa1      	ldr	r1, [r4, #40]	; 0x28
	if (ctrl->rxbuf) {
    293e:	2d00      	cmp	r5, #0
    2940:	d0f0      	beq.n	2924 <_spi_m_sync_trans+0x44>
		*ctrl->rxbuf++ = (uint8_t)data;
    2942:	7029      	strb	r1, [r5, #0]
		if (ctrl->char_size > 1) {
    2944:	2f01      	cmp	r7, #1
		*ctrl->rxbuf++ = (uint8_t)data;
    2946:	bf91      	iteee	ls
    2948:	3501      	addls	r5, #1
			*ctrl->rxbuf++ = (uint8_t)(data >> 8);
    294a:	0a09      	lsrhi	r1, r1, #8
    294c:	7069      	strbhi	r1, [r5, #1]
    294e:	3502      	addhi	r5, #2
    2950:	e7e8      	b.n	2924 <_spi_m_sync_trans+0x44>
	((Sercom *)hw)->SPI.STATUS.reg = mask;
    2952:	f64f 73ff 	movw	r3, #65535	; 0xffff
    2956:	8363      	strh	r3, [r4, #26]
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    2958:	2380      	movs	r3, #128	; 0x80
    295a:	7623      	strb	r3, [r4, #24]
		return ERR_OVERFLOW;
    295c:	f06f 0012 	mvn.w	r0, #18
	tmp = ((Sercom *)hw)->SPI.INTFLAG.reg;
    2960:	7e23      	ldrb	r3, [r4, #24]
	while (!(hri_sercomspi_get_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC | SERCOM_SPI_INTFLAG_DRE))) {
    2962:	f013 0f03 	tst.w	r3, #3
    2966:	d0fb      	beq.n	2960 <_spi_m_sync_trans+0x80>
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    2968:	2303      	movs	r3, #3
    296a:	7623      	strb	r3, [r4, #24]
		}
	}
	/* Wait until SPI bus idle */
	_spi_wait_bus_idle(hw);

	return rc;
    296c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (ctrl.txcnt >= msg->size && ctrl.rxcnt >= msg->size) {
    2970:	4293      	cmp	r3, r2
    2972:	d8de      	bhi.n	2932 <_spi_m_sync_trans+0x52>
    2974:	e7f4      	b.n	2960 <_spi_m_sync_trans+0x80>
		return ERR_BUSY;
    2976:	f06f 0003 	mvn.w	r0, #3
    297a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return ERR_NOT_INITIALIZED;
    297e:	f06f 0013 	mvn.w	r0, #19
    2982:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if (ctrl.rxcnt >= ctrl.txcnt) {
    2986:	4290      	cmp	r0, r2
    2988:	d8cd      	bhi.n	2926 <_spi_m_sync_trans+0x46>
	if (!(SERCOM_SPI_INTFLAG_DRE & iflag)) {
    298a:	f013 0f01 	tst.w	r3, #1
    298e:	d0ca      	beq.n	2926 <_spi_m_sync_trans+0x46>
				_spi_tx_check_and_send(hw, iflag, &ctrl, dev->dummy_byte);
    2990:	f8b9 1006 	ldrh.w	r1, [r9, #6]
	if (ctrl->txbuf) {
    2994:	f1b8 0f00 	cmp.w	r8, #0
    2998:	d00b      	beq.n	29b2 <_spi_m_sync_trans+0xd2>
		data = *ctrl->txbuf++;
    299a:	f898 1000 	ldrb.w	r1, [r8]
		if (ctrl->char_size > 1) {
    299e:	2f01      	cmp	r7, #1
		data = *ctrl->txbuf++;
    29a0:	bf91      	iteee	ls
    29a2:	f108 0801 	addls.w	r8, r8, #1
			data |= (*ctrl->txbuf) << 8;
    29a6:	f898 e001 	ldrbhi.w	lr, [r8, #1]
    29aa:	ea41 210e 	orrhi.w	r1, r1, lr, lsl #8
			ctrl->txbuf++;
    29ae:	f108 0802 	addhi.w	r8, r8, #2
	ctrl->txcnt++;
    29b2:	3001      	adds	r0, #1
	((Sercom *)hw)->SPI.DATA.reg = data;
    29b4:	62a1      	str	r1, [r4, #40]	; 0x28
    29b6:	e7b6      	b.n	2926 <_spi_m_sync_trans+0x46>
    29b8:	00005248 	.word	0x00005248
    29bc:	00001b6d 	.word	0x00001b6d

000029c0 <_delay_init>:
 * \brief Initialize system time module
 */
void _system_time_init(void *const hw)
{
	(void)hw;
	SysTick->LOAD = (0xFFFFFF << SysTick_LOAD_RELOAD_Pos);
    29c0:	4b03      	ldr	r3, [pc, #12]	; (29d0 <_delay_init+0x10>)
    29c2:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
    29c6:	605a      	str	r2, [r3, #4]
	SysTick->CTRL = (1 << SysTick_CTRL_ENABLE_Pos) | (CONF_SYSTICK_TICKINT << SysTick_CTRL_TICKINT_Pos)
    29c8:	2205      	movs	r2, #5
    29ca:	601a      	str	r2, [r3, #0]
    29cc:	4770      	bx	lr
    29ce:	bf00      	nop
    29d0:	e000e010 	.word	0xe000e010

000029d4 <_delay_cycles>:
 * \brief Delay loop to delay n number of cycles
 */
void _delay_cycles(void *const hw, uint32_t cycles)
{
	(void)hw;
	uint8_t  n   = cycles >> 24;
    29d4:	0e0b      	lsrs	r3, r1, #24
	uint32_t buf = cycles;

	while (n--) {
    29d6:	b303      	cbz	r3, 2a1a <_delay_cycles+0x46>
{
    29d8:	b430      	push	{r4, r5}
    29da:	1e5d      	subs	r5, r3, #1
    29dc:	b2ed      	uxtb	r5, r5
	while (n--) {
    29de:	4628      	mov	r0, r5
		SysTick->LOAD = 0xFFFFFF;
    29e0:	4a12      	ldr	r2, [pc, #72]	; (2a2c <_delay_cycles+0x58>)
    29e2:	f06f 447f 	mvn.w	r4, #4278190080	; 0xff000000
    29e6:	6054      	str	r4, [r2, #4]
		SysTick->VAL  = 0xFFFFFF;
    29e8:	6094      	str	r4, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    29ea:	6813      	ldr	r3, [r2, #0]
    29ec:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    29f0:	d0fb      	beq.n	29ea <_delay_cycles+0x16>
	while (n--) {
    29f2:	3801      	subs	r0, #1
    29f4:	b2c0      	uxtb	r0, r0
    29f6:	28ff      	cmp	r0, #255	; 0xff
    29f8:	d1f5      	bne.n	29e6 <_delay_cycles+0x12>
    29fa:	eba5 6505 	sub.w	r5, r5, r5, lsl #24
    29fe:	f101 417f 	add.w	r1, r1, #4278190080	; 0xff000000
    2a02:	3101      	adds	r1, #1
    2a04:	4429      	add	r1, r5
			;
		buf -= 0xFFFFFF;
	}

	SysTick->LOAD = buf;
    2a06:	4b09      	ldr	r3, [pc, #36]	; (2a2c <_delay_cycles+0x58>)
    2a08:	6059      	str	r1, [r3, #4]
	SysTick->VAL  = buf;
    2a0a:	6099      	str	r1, [r3, #8]
	while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    2a0c:	461a      	mov	r2, r3
    2a0e:	6813      	ldr	r3, [r2, #0]
    2a10:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    2a14:	d0fb      	beq.n	2a0e <_delay_cycles+0x3a>
		;
}
    2a16:	bc30      	pop	{r4, r5}
    2a18:	4770      	bx	lr
	SysTick->LOAD = buf;
    2a1a:	4b04      	ldr	r3, [pc, #16]	; (2a2c <_delay_cycles+0x58>)
    2a1c:	6059      	str	r1, [r3, #4]
	SysTick->VAL  = buf;
    2a1e:	6099      	str	r1, [r3, #8]
	while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    2a20:	461a      	mov	r2, r3
    2a22:	6813      	ldr	r3, [r2, #0]
    2a24:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    2a28:	d0fb      	beq.n	2a22 <_delay_cycles+0x4e>
    2a2a:	4770      	bx	lr
    2a2c:	e000e010 	.word	0xe000e010

00002a30 <_dummy_func_no_return>:
static bool _dummy_func_no_return(uint32_t unused0, uint32_t unused1)
{
	(void)unused0;
	(void)unused1;
	return false;
}
    2a30:	2000      	movs	r0, #0
    2a32:	4770      	bx	lr

00002a34 <_usb_d_dev_handle_setup>:
/**
 * \brief Handles setup received interrupt
 * \param[in] ept Pointer to endpoint information.
 */
static void _usb_d_dev_handle_setup(struct _usb_d_dev_ep *ept)
{
    2a34:	b538      	push	{r3, r4, r5, lr}
	uint8_t epn     = USB_EP_GET_N(ept->ep);
    2a36:	7c83      	ldrb	r3, [r0, #18]
    2a38:	f003 030f 	and.w	r3, r3, #15
	bool    is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    2a3c:	7cc2      	ldrb	r2, [r0, #19]

	if (!is_ctrl) {
    2a3e:	f002 0107 	and.w	r1, r2, #7
    2a42:	2901      	cmp	r1, #1
    2a44:	d00b      	beq.n	2a5e <_usb_d_dev_handle_setup+0x2a>
}

static inline void hri_usbendpoint_clear_EPINTFLAG_reg(const void *const hw, uint8_t submodule_index,
                                                       hri_usbendpoint_epintflag_reg_t mask)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    2a46:	015a      	lsls	r2, r3, #5
    2a48:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    2a4c:	2110      	movs	r1, #16
    2a4e:	f882 1107 	strb.w	r1, [r2, #263]	; 0x107
	}
}

static inline void hri_usbendpoint_clear_EPINTEN_RXSTP_bit(const void *const hw, uint8_t submodule_index)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = USB_DEVICE_EPINTENSET_RXSTP;
    2a52:	015b      	lsls	r3, r3, #5
    2a54:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    2a58:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
    2a5c:	bd38      	pop	{r3, r4, r5, pc}
	}
	/* Control transfer:
	 * SETUP transaction will terminate IN/OUT transaction,
	 * and start new transaction with received SETUP packet.
	 */
	if (_usb_d_dev_ep_is_busy(ept)) {
    2a5e:	f012 0f40 	tst.w	r2, #64	; 0x40
    2a62:	d00c      	beq.n	2a7e <_usb_d_dev_handle_setup+0x4a>
		ept->flags.bits.is_busy = 0;
    2a64:	7cc2      	ldrb	r2, [r0, #19]
    2a66:	f36f 1286 	bfc	r2, #6, #1
    2a6a:	74c2      	strb	r2, [r0, #19]
    2a6c:	015a      	lsls	r2, r3, #5
    2a6e:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    2a72:	2180      	movs	r1, #128	; 0x80
    2a74:	f882 1104 	strb.w	r1, [r2, #260]	; 0x104
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    2a78:	2140      	movs	r1, #64	; 0x40
    2a7a:	f882 1105 	strb.w	r1, [r2, #261]	; 0x105

		/* Stop transfer on either direction. */
		_usbd_ep_set_in_rdy(epn, 1, false);
		_usbd_ep_set_out_rdy(epn, 0, false);
	}
	ept->flags.bits.is_stalled = 0;
    2a7e:	7cc2      	ldrb	r2, [r0, #19]
    2a80:	f36f 02c3 	bfc	r2, #3, #1
    2a84:	74c2      	strb	r2, [r0, #19]
	bank->STATUS_BK.reg     = 0;
    2a86:	4909      	ldr	r1, [pc, #36]	; (2aac <_usb_d_dev_handle_setup+0x78>)
    2a88:	015a      	lsls	r2, r3, #5
    2a8a:	188c      	adds	r4, r1, r2
    2a8c:	2500      	movs	r5, #0
    2a8e:	72a5      	strb	r5, [r4, #10]
    2a90:	76a5      	strb	r5, [r4, #26]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    2a92:	f102 4382 	add.w	r3, r2, #1090519040	; 0x41000000
    2a96:	246f      	movs	r4, #111	; 0x6f
    2a98:	f883 4107 	strb.w	r4, [r3, #263]	; 0x107
}

static inline void hri_usbendpoint_clear_EPINTEN_reg(const void *const hw, uint8_t submodule_index,
                                                     hri_usbendpoint_epintenset_reg_t mask)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    2a9c:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    2aa0:	f882 4108 	strb.w	r4, [r2, #264]	; 0x108
	_usbd_ep_clear_bank_status(epn, 0);
	_usbd_ep_clear_bank_status(epn, 1);
	_usbd_ep_int_ack(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
	_usbd_ep_int_dis(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
	/* Invoke callback. */
	dev_inst.ep_callbacks.setup(ept->ep);
    2aa4:	6e8b      	ldr	r3, [r1, #104]	; 0x68
    2aa6:	7c80      	ldrb	r0, [r0, #18]
    2aa8:	4798      	blx	r3
    2aaa:	bd38      	pop	{r3, r4, r5, pc}
    2aac:	20000700 	.word	0x20000700

00002ab0 <_usb_d_dev_handle_stall>:
 * \brief Handles stall sent interrupt
 * \param[in] ept Pointer to endpoint information.
 * \param[in] bank_n Bank number.
 */
static void _usb_d_dev_handle_stall(struct _usb_d_dev_ep *ept, const uint8_t bank_n)
{
    2ab0:	b508      	push	{r3, lr}
		_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
    2ab2:	2320      	movs	r3, #32
    2ab4:	fa03 f101 	lsl.w	r1, r3, r1
	hri_usbendpoint_clear_EPINTEN_reg(USB, epn, flags);
    2ab8:	b2c9      	uxtb	r1, r1
	uint8_t epn = USB_EP_GET_N(ept->ep);
    2aba:	7c83      	ldrb	r3, [r0, #18]
    2abc:	f003 030f 	and.w	r3, r3, #15
    2ac0:	015b      	lsls	r3, r3, #5
    2ac2:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    2ac6:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
	/* Clear interrupt enable. Leave status there for status check. */
	_usbd_ep_int_stall_en(epn, bank_n, false);
	dev_inst.ep_callbacks.done(ept->ep, USB_TRANS_STALL, ept->trans_count);
    2aca:	4b03      	ldr	r3, [pc, #12]	; (2ad8 <_usb_d_dev_handle_stall+0x28>)
    2acc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    2ace:	6882      	ldr	r2, [r0, #8]
    2ad0:	2101      	movs	r1, #1
    2ad2:	7c80      	ldrb	r0, [r0, #18]
    2ad4:	4798      	blx	r3
    2ad6:	bd08      	pop	{r3, pc}
    2ad8:	20000700 	.word	0x20000700

00002adc <_usb_d_dev_trans_done>:
 *  \brief Finish the transaction and invoke callback
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_done(struct _usb_d_dev_ep *ept, const int32_t code)
{
    2adc:	b538      	push	{r3, r4, r5, lr}
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    2ade:	7c84      	ldrb	r4, [r0, #18]
    2ae0:	2cff      	cmp	r4, #255	; 0xff
    2ae2:	d003      	beq.n	2aec <_usb_d_dev_trans_done+0x10>
    2ae4:	7cc3      	ldrb	r3, [r0, #19]
    2ae6:	f013 0f40 	tst.w	r3, #64	; 0x40
    2aea:	d100      	bne.n	2aee <_usb_d_dev_trans_done+0x12>
    2aec:	bd38      	pop	{r3, r4, r5, pc}
		return;
	}
	ept->flags.bits.is_busy = 0;
    2aee:	7cc2      	ldrb	r2, [r0, #19]
    2af0:	f36f 1286 	bfc	r2, #6, #1
    2af4:	74c2      	strb	r2, [r0, #19]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
    2af6:	4a03      	ldr	r2, [pc, #12]	; (2b04 <_usb_d_dev_trans_done+0x28>)
    2af8:	6f15      	ldr	r5, [r2, #112]	; 0x70
    2afa:	6882      	ldr	r2, [r0, #8]
    2afc:	4620      	mov	r0, r4
    2afe:	47a8      	blx	r5
    2b00:	e7f4      	b.n	2aec <_usb_d_dev_trans_done+0x10>
    2b02:	bf00      	nop
    2b04:	20000700 	.word	0x20000700

00002b08 <_usb_d_dev_trans_stop>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_stop(struct _usb_d_dev_ep *ept, bool dir, const int32_t code)
{
    2b08:	b530      	push	{r4, r5, lr}
    2b0a:	b083      	sub	sp, #12
	uint8_t epn = USB_EP_GET_N(ept->ep);
    2b0c:	7c83      	ldrb	r3, [r0, #18]
	;
	const uint8_t intflags[2] = {USB_D_BANK0_INT_FLAGS, USB_D_BANK1_INT_FLAGS};
    2b0e:	2425      	movs	r4, #37	; 0x25
    2b10:	f88d 4004 	strb.w	r4, [sp, #4]
    2b14:	244a      	movs	r4, #74	; 0x4a
    2b16:	f88d 4005 	strb.w	r4, [sp, #5]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    2b1a:	2bff      	cmp	r3, #255	; 0xff
    2b1c:	d01e      	beq.n	2b5c <_usb_d_dev_trans_stop+0x54>
    2b1e:	7cc4      	ldrb	r4, [r0, #19]
    2b20:	f014 0f40 	tst.w	r4, #64	; 0x40
    2b24:	d01a      	beq.n	2b5c <_usb_d_dev_trans_stop+0x54>
	uint8_t epn = USB_EP_GET_N(ept->ep);
    2b26:	f003 040f 	and.w	r4, r3, #15
		return;
	}
	/* Stop transfer */
	if (dir) {
    2b2a:	b1c9      	cbz	r1, 2b60 <_usb_d_dev_trans_stop+0x58>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    2b2c:	0163      	lsls	r3, r4, #5
    2b2e:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    2b32:	2580      	movs	r5, #128	; 0x80
    2b34:	f883 5104 	strb.w	r5, [r3, #260]	; 0x104
    2b38:	460b      	mov	r3, r1
		_usbd_ep_set_in_rdy(epn, 1, false);
	} else {
		/* NAK OUT */
		_usbd_ep_set_out_rdy(epn, 0, false);
	}
	_usbd_ep_int_ack(epn, intflags[dir]);
    2b3a:	a902      	add	r1, sp, #8
    2b3c:	440b      	add	r3, r1
    2b3e:	f813 1c04 	ldrb.w	r1, [r3, #-4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    2b42:	0163      	lsls	r3, r4, #5
    2b44:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    2b48:	f883 1107 	strb.w	r1, [r3, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    2b4c:	0163      	lsls	r3, r4, #5
    2b4e:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    2b52:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
	_usbd_ep_int_dis(epn, intflags[dir]);
	_usb_d_dev_trans_done(ept, code);
    2b56:	4611      	mov	r1, r2
    2b58:	4b05      	ldr	r3, [pc, #20]	; (2b70 <_usb_d_dev_trans_stop+0x68>)
    2b5a:	4798      	blx	r3
}
    2b5c:	b003      	add	sp, #12
    2b5e:	bd30      	pop	{r4, r5, pc}
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    2b60:	0163      	lsls	r3, r4, #5
    2b62:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    2b66:	2540      	movs	r5, #64	; 0x40
    2b68:	f883 5105 	strb.w	r5, [r3, #261]	; 0x105
    2b6c:	e7e4      	b.n	2b38 <_usb_d_dev_trans_stop+0x30>
    2b6e:	bf00      	nop
    2b70:	00002add 	.word	0x00002add

00002b74 <_usb_d_dev_handle_trfail>:
{
    2b74:	b530      	push	{r4, r5, lr}
    2b76:	b083      	sub	sp, #12
	uint8_t            epn     = USB_EP_GET_N(ept->ep);
    2b78:	7c83      	ldrb	r3, [r0, #18]
    2b7a:	f003 030f 	and.w	r3, r3, #15
	const uint8_t      fail[2] = {USB_DEVICE_EPINTFLAG_TRFAIL0, USB_DEVICE_EPINTFLAG_TRFAIL1};
    2b7e:	2204      	movs	r2, #4
    2b80:	f88d 2004 	strb.w	r2, [sp, #4]
    2b84:	2208      	movs	r2, #8
    2b86:	f88d 2005 	strb.w	r2, [sp, #5]
    2b8a:	015a      	lsls	r2, r3, #5
	uint8_t            eptype
    2b8c:	460c      	mov	r4, r1
    2b8e:	b391      	cbz	r1, 2bf6 <_usb_d_dev_handle_trfail+0x82>

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_EPTYPE1_bf(const void *const hw,
                                                                                uint8_t           submodule_index)
{
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    2b90:	f102 4182 	add.w	r1, r2, #1090519040	; 0x41000000
    2b94:	f891 5100 	ldrb.w	r5, [r1, #256]	; 0x100
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE1_Msk) >> USB_DEVICE_EPCFG_EPTYPE1_Pos;
    2b98:	f3c5 1502 	ubfx	r5, r5, #4, #3
	st.reg = bank[bank_n].STATUS_BK.reg;
    2b9c:	eb02 1104 	add.w	r1, r2, r4, lsl #4
    2ba0:	4a32      	ldr	r2, [pc, #200]	; (2c6c <_usb_d_dev_handle_trfail+0xf8>)
    2ba2:	440a      	add	r2, r1
    2ba4:	7a91      	ldrb	r1, [r2, #10]
    2ba6:	b2c9      	uxtb	r1, r1
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
    2ba8:	2d02      	cmp	r5, #2
    2baa:	d02c      	beq.n	2c06 <_usb_d_dev_handle_trfail+0x92>
	} else if (st.bit.ERRORFLOW) {
    2bac:	f011 0f02 	tst.w	r1, #2
    2bb0:	d045      	beq.n	2c3e <_usb_d_dev_handle_trfail+0xca>
	bool                      is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    2bb2:	7cc5      	ldrb	r5, [r0, #19]
		bank[bank_n].STATUS_BK.bit.ERRORFLOW = 0;
    2bb4:	7a91      	ldrb	r1, [r2, #10]
    2bb6:	f36f 0141 	bfc	r1, #1, #1
    2bba:	7291      	strb	r1, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    2bbc:	aa02      	add	r2, sp, #8
    2bbe:	4422      	add	r2, r4
    2bc0:	f812 1c04 	ldrb.w	r1, [r2, #-4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    2bc4:	015a      	lsls	r2, r3, #5
    2bc6:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    2bca:	f882 1107 	strb.w	r1, [r2, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    2bce:	015b      	lsls	r3, r3, #5
    2bd0:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    2bd4:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
		if (is_ctrl && _usb_d_dev_ep_is_busy(ept)) {
    2bd8:	f005 0307 	and.w	r3, r5, #7
    2bdc:	2b01      	cmp	r3, #1
    2bde:	d143      	bne.n	2c68 <_usb_d_dev_handle_trfail+0xf4>
    2be0:	7cc3      	ldrb	r3, [r0, #19]
    2be2:	f013 0f40 	tst.w	r3, #64	; 0x40
    2be6:	d03f      	beq.n	2c68 <_usb_d_dev_handle_trfail+0xf4>
			if (bank_n != _usb_d_dev_ep_is_in(ept)) {
    2be8:	09d9      	lsrs	r1, r3, #7
    2bea:	428c      	cmp	r4, r1
    2bec:	d03c      	beq.n	2c68 <_usb_d_dev_handle_trfail+0xf4>
				_usb_d_dev_trans_stop(ept, _usb_d_dev_ep_is_in(ept), USB_TRANS_DONE);
    2bee:	2200      	movs	r2, #0
    2bf0:	4b1f      	ldr	r3, [pc, #124]	; (2c70 <_usb_d_dev_handle_trfail+0xfc>)
    2bf2:	4798      	blx	r3
    2bf4:	e038      	b.n	2c68 <_usb_d_dev_handle_trfail+0xf4>
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    2bf6:	0159      	lsls	r1, r3, #5
    2bf8:	f101 4182 	add.w	r1, r1, #1090519040	; 0x41000000
    2bfc:	f891 5100 	ldrb.w	r5, [r1, #256]	; 0x100
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE0_Msk) >> USB_DEVICE_EPCFG_EPTYPE0_Pos;
    2c00:	f005 0507 	and.w	r5, r5, #7
    2c04:	e7ca      	b.n	2b9c <_usb_d_dev_handle_trfail+0x28>
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
    2c06:	f011 0f01 	tst.w	r1, #1
    2c0a:	d0cf      	beq.n	2bac <_usb_d_dev_handle_trfail+0x38>
		bank[bank_n].STATUS_BK.bit.CRCERR = 0;
    2c0c:	7a91      	ldrb	r1, [r2, #10]
    2c0e:	f36f 0100 	bfc	r1, #0, #1
    2c12:	7291      	strb	r1, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    2c14:	aa02      	add	r2, sp, #8
    2c16:	4422      	add	r2, r4
    2c18:	f812 1c04 	ldrb.w	r1, [r2, #-4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    2c1c:	015a      	lsls	r2, r3, #5
    2c1e:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    2c22:	f882 1107 	strb.w	r1, [r2, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    2c26:	015b      	lsls	r3, r3, #5
    2c28:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    2c2c:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
		_usb_d_dev_trans_stop(ept, bank_n, USB_TRANS_ERROR);
    2c30:	2204      	movs	r2, #4
    2c32:	1c21      	adds	r1, r4, #0
    2c34:	bf18      	it	ne
    2c36:	2101      	movne	r1, #1
    2c38:	4b0d      	ldr	r3, [pc, #52]	; (2c70 <_usb_d_dev_handle_trfail+0xfc>)
    2c3a:	4798      	blx	r3
    2c3c:	e014      	b.n	2c68 <_usb_d_dev_handle_trfail+0xf4>
	bank->STATUS_BK.reg     = 0;
    2c3e:	eb04 0143 	add.w	r1, r4, r3, lsl #1
    2c42:	4a0a      	ldr	r2, [pc, #40]	; (2c6c <_usb_d_dev_handle_trfail+0xf8>)
    2c44:	eb02 1201 	add.w	r2, r2, r1, lsl #4
    2c48:	2100      	movs	r1, #0
    2c4a:	7291      	strb	r1, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    2c4c:	aa02      	add	r2, sp, #8
    2c4e:	4414      	add	r4, r2
    2c50:	f814 1c04 	ldrb.w	r1, [r4, #-4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    2c54:	015a      	lsls	r2, r3, #5
    2c56:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    2c5a:	f882 1107 	strb.w	r1, [r2, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    2c5e:	015b      	lsls	r3, r3, #5
    2c60:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    2c64:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
}
    2c68:	b003      	add	sp, #12
    2c6a:	bd30      	pop	{r4, r5, pc}
    2c6c:	20000700 	.word	0x20000700
    2c70:	00002b09 	.word	0x00002b09

00002c74 <_usb_d_dev_reset_epts>:
{
    2c74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2c78:	4d0c      	ldr	r5, [pc, #48]	; (2cac <_usb_d_dev_reset_epts+0x38>)
    2c7a:	f105 0474 	add.w	r4, r5, #116	; 0x74
    2c7e:	f505 7594 	add.w	r5, r5, #296	; 0x128
		_usb_d_dev_trans_done(&dev_inst.ep[i], USB_TRANS_RESET);
    2c82:	f04f 0803 	mov.w	r8, #3
    2c86:	4f0a      	ldr	r7, [pc, #40]	; (2cb0 <_usb_d_dev_reset_epts+0x3c>)
		dev_inst.ep[i].ep       = 0xFF;
    2c88:	26ff      	movs	r6, #255	; 0xff
		_usb_d_dev_trans_done(&dev_inst.ep[i], USB_TRANS_RESET);
    2c8a:	4641      	mov	r1, r8
    2c8c:	4620      	mov	r0, r4
    2c8e:	47b8      	blx	r7
		dev_inst.ep[i].ep       = 0xFF;
    2c90:	74a6      	strb	r6, [r4, #18]
		dev_inst.ep[i].flags.u8 = 0;
    2c92:	2300      	movs	r3, #0
    2c94:	74e3      	strb	r3, [r4, #19]
    2c96:	3414      	adds	r4, #20
	for (i = 0; i < USB_D_N_EP; i++) {
    2c98:	42ac      	cmp	r4, r5
    2c9a:	d1f6      	bne.n	2c8a <_usb_d_dev_reset_epts+0x16>
	memset(prvt_inst.desc_table, 0, sizeof(UsbDeviceDescriptor) * (CONF_USB_D_MAX_EP_N + 1));
    2c9c:	2260      	movs	r2, #96	; 0x60
    2c9e:	4619      	mov	r1, r3
    2ca0:	4802      	ldr	r0, [pc, #8]	; (2cac <_usb_d_dev_reset_epts+0x38>)
    2ca2:	4b04      	ldr	r3, [pc, #16]	; (2cb4 <_usb_d_dev_reset_epts+0x40>)
    2ca4:	4798      	blx	r3
    2ca6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2caa:	bf00      	nop
    2cac:	20000700 	.word	0x20000700
    2cb0:	00002add 	.word	0x00002add
    2cb4:	00004a25 	.word	0x00004a25

00002cb8 <_usb_d_dev_in_next>:
{
    2cb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2cbc:	4605      	mov	r5, r0
	uint8_t            epn         = USB_EP_GET_N(ept->ep);
    2cbe:	7c84      	ldrb	r4, [r0, #18]
    2cc0:	f004 040f 	and.w	r4, r4, #15
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
    2cc4:	4688      	mov	r8, r1
    2cc6:	2900      	cmp	r1, #0
    2cc8:	f000 809f 	beq.w	2e0a <_usb_d_dev_in_next+0x152>
	UsbDeviceDescBank *bank        = &prvt_inst.desc_table[epn].DeviceDescBank[0];
    2ccc:	4b58      	ldr	r3, [pc, #352]	; (2e30 <_usb_d_dev_in_next+0x178>)
    2cce:	eb03 1344 	add.w	r3, r3, r4, lsl #5
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
    2cd2:	6958      	ldr	r0, [r3, #20]
    2cd4:	f3c0 0e0d 	ubfx	lr, r0, #0, #14
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    2cd8:	8a2b      	ldrh	r3, [r5, #16]
    2cda:	f240 32ff 	movw	r2, #1023	; 0x3ff
    2cde:	4293      	cmp	r3, r2
    2ce0:	f000 808d 	beq.w	2dfe <_usb_d_dev_in_next+0x146>
    2ce4:	3b01      	subs	r3, #1
    2ce6:	b298      	uxth	r0, r3
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    2ce8:	7cef      	ldrb	r7, [r5, #19]
    2cea:	f007 0707 	and.w	r7, r7, #7
	if (isr) {
    2cee:	f1b8 0f00 	cmp.w	r8, #0
    2cf2:	d005      	beq.n	2d00 <_usb_d_dev_in_next+0x48>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    2cf4:	0162      	lsls	r2, r4, #5
    2cf6:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    2cfa:	2302      	movs	r3, #2
    2cfc:	f882 3107 	strb.w	r3, [r2, #263]	; 0x107
	ept->trans_count += trans_count;
    2d00:	68a9      	ldr	r1, [r5, #8]
    2d02:	eb0e 0301 	add.w	r3, lr, r1
    2d06:	60ab      	str	r3, [r5, #8]
	if (ept->trans_count < ept->trans_size) {
    2d08:	686e      	ldr	r6, [r5, #4]
    2d0a:	42b3      	cmp	r3, r6
    2d0c:	d23f      	bcs.n	2d8e <_usb_d_dev_in_next+0xd6>
		trans_next = ept->trans_size - ept->trans_count;
    2d0e:	1af6      	subs	r6, r6, r3
    2d10:	b2b6      	uxth	r6, r6
		if (ept->flags.bits.use_cache) {
    2d12:	7cea      	ldrb	r2, [r5, #19]
    2d14:	f012 0f20 	tst.w	r2, #32
    2d18:	d02d      	beq.n	2d76 <_usb_d_dev_in_next+0xbe>
    2d1a:	8a2a      	ldrh	r2, [r5, #16]
    2d1c:	4296      	cmp	r6, r2
    2d1e:	bf28      	it	cs
    2d20:	4616      	movcs	r6, r2
			memcpy(ept->cache, &ept->trans_buf[ept->trans_count], trans_next);
    2d22:	6829      	ldr	r1, [r5, #0]
    2d24:	4632      	mov	r2, r6
    2d26:	4419      	add	r1, r3
    2d28:	68e8      	ldr	r0, [r5, #12]
    2d2a:	4b42      	ldr	r3, [pc, #264]	; (2e34 <_usb_d_dev_in_next+0x17c>)
    2d2c:	4798      	blx	r3
			_usbd_ep_set_buf(epn, 1, (uint32_t)ept->cache);
    2d2e:	68ea      	ldr	r2, [r5, #12]
	bank->ADDR.reg          = addr;
    2d30:	4b3f      	ldr	r3, [pc, #252]	; (2e30 <_usb_d_dev_in_next+0x178>)
    2d32:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    2d36:	611a      	str	r2, [r3, #16]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
    2d38:	4b3d      	ldr	r3, [pc, #244]	; (2e30 <_usb_d_dev_in_next+0x178>)
    2d3a:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    2d3e:	695a      	ldr	r2, [r3, #20]
    2d40:	f366 020d 	bfi	r2, r6, #0, #14
    2d44:	615a      	str	r2, [r3, #20]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
    2d46:	695a      	ldr	r2, [r3, #20]
    2d48:	f36f 329b 	bfc	r2, #14, #14
    2d4c:	615a      	str	r2, [r3, #20]
	if (!isr) {
    2d4e:	f1b8 0f00 	cmp.w	r8, #0
    2d52:	d108      	bne.n	2d66 <_usb_d_dev_in_next+0xae>
			inten = USB_D_BANK1_INT_FLAGS;
    2d54:	2f01      	cmp	r7, #1
    2d56:	bf0c      	ite	eq
    2d58:	224e      	moveq	r2, #78	; 0x4e
    2d5a:	224a      	movne	r2, #74	; 0x4a
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    2d5c:	0163      	lsls	r3, r4, #5
    2d5e:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    2d62:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    2d66:	0164      	lsls	r4, r4, #5
    2d68:	f104 4482 	add.w	r4, r4, #1090519040	; 0x41000000
    2d6c:	2380      	movs	r3, #128	; 0x80
    2d6e:	f884 3105 	strb.w	r3, [r4, #261]	; 0x105
    2d72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2d76:	f5b6 5f00 	cmp.w	r6, #8192	; 0x2000
    2d7a:	bf28      	it	cs
    2d7c:	f44f 5600 	movcs.w	r6, #8192	; 0x2000
			_usbd_ep_set_buf(epn, 1, (uint32_t)&ept->trans_buf[ept->trans_count]);
    2d80:	6829      	ldr	r1, [r5, #0]
    2d82:	440b      	add	r3, r1
	bank->ADDR.reg          = addr;
    2d84:	4a2a      	ldr	r2, [pc, #168]	; (2e30 <_usb_d_dev_in_next+0x178>)
    2d86:	eb02 1244 	add.w	r2, r2, r4, lsl #5
    2d8a:	6113      	str	r3, [r2, #16]
    2d8c:	e7d4      	b.n	2d38 <_usb_d_dev_in_next+0x80>
	} else if (ept->flags.bits.need_zlp) {
    2d8e:	7ceb      	ldrb	r3, [r5, #19]
    2d90:	f013 0f10 	tst.w	r3, #16
    2d94:	d00f      	beq.n	2db6 <_usb_d_dev_in_next+0xfe>
		ept->flags.bits.need_zlp = 0;
    2d96:	7ceb      	ldrb	r3, [r5, #19]
    2d98:	f36f 1304 	bfc	r3, #4, #1
    2d9c:	74eb      	strb	r3, [r5, #19]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
    2d9e:	4b24      	ldr	r3, [pc, #144]	; (2e30 <_usb_d_dev_in_next+0x178>)
    2da0:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    2da4:	695a      	ldr	r2, [r3, #20]
    2da6:	f36f 020d 	bfc	r2, #0, #14
    2daa:	615a      	str	r2, [r3, #20]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
    2dac:	695a      	ldr	r2, [r3, #20]
    2dae:	f36f 329b 	bfc	r2, #14, #14
    2db2:	615a      	str	r2, [r3, #20]
    2db4:	e7cb      	b.n	2d4e <_usb_d_dev_in_next+0x96>
	if (is_ctrl) {
    2db6:	2f01      	cmp	r7, #1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    2db8:	ea4f 1444 	mov.w	r4, r4, lsl #5
    2dbc:	f104 4482 	add.w	r4, r4, #1090519040	; 0x41000000
    2dc0:	bf0c      	ite	eq
    2dc2:	234b      	moveq	r3, #75	; 0x4b
    2dc4:	234a      	movne	r3, #74	; 0x4a
    2dc6:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
	if (last_pkt == ept->size) {
    2dca:	8a2a      	ldrh	r2, [r5, #16]
    2dcc:	ea00 030e 	and.w	r3, r0, lr
    2dd0:	429a      	cmp	r2, r3
    2dd2:	d005      	beq.n	2de0 <_usb_d_dev_in_next+0x128>
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    2dd4:	2100      	movs	r1, #0
    2dd6:	4628      	mov	r0, r5
    2dd8:	4b17      	ldr	r3, [pc, #92]	; (2e38 <_usb_d_dev_in_next+0x180>)
    2dda:	4798      	blx	r3
	return;
    2ddc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ept->flags.bits.is_busy = 0;
    2de0:	7ceb      	ldrb	r3, [r5, #19]
    2de2:	f36f 1386 	bfc	r3, #6, #1
    2de6:	74eb      	strb	r3, [r5, #19]
		if (dev_inst.ep_callbacks.more(ept->ep, ept->trans_count)) {
    2de8:	4b11      	ldr	r3, [pc, #68]	; (2e30 <_usb_d_dev_in_next+0x178>)
    2dea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
    2dec:	68a9      	ldr	r1, [r5, #8]
    2dee:	7ca8      	ldrb	r0, [r5, #18]
    2df0:	4798      	blx	r3
    2df2:	b9d0      	cbnz	r0, 2e2a <_usb_d_dev_in_next+0x172>
		ept->flags.bits.is_busy = 1;
    2df4:	7ceb      	ldrb	r3, [r5, #19]
    2df6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    2dfa:	74eb      	strb	r3, [r5, #19]
    2dfc:	e7ea      	b.n	2dd4 <_usb_d_dev_in_next+0x11c>
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    2dfe:	7cef      	ldrb	r7, [r5, #19]
    2e00:	f007 0707 	and.w	r7, r7, #7
    2e04:	f240 30ff 	movw	r0, #1023	; 0x3ff
    2e08:	e774      	b.n	2cf4 <_usb_d_dev_in_next+0x3c>
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    2e0a:	8a03      	ldrh	r3, [r0, #16]
    2e0c:	f240 32ff 	movw	r2, #1023	; 0x3ff
    2e10:	4293      	cmp	r3, r2
    2e12:	d107      	bne.n	2e24 <_usb_d_dev_in_next+0x16c>
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    2e14:	7cef      	ldrb	r7, [r5, #19]
    2e16:	f007 0707 	and.w	r7, r7, #7
    2e1a:	f04f 0e00 	mov.w	lr, #0
    2e1e:	f240 30ff 	movw	r0, #1023	; 0x3ff
    2e22:	e76d      	b.n	2d00 <_usb_d_dev_in_next+0x48>
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    2e24:	f04f 0e00 	mov.w	lr, #0
    2e28:	e75c      	b.n	2ce4 <_usb_d_dev_in_next+0x2c>
    2e2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2e2e:	bf00      	nop
    2e30:	20000700 	.word	0x20000700
    2e34:	000048f1 	.word	0x000048f1
    2e38:	00002add 	.word	0x00002add

00002e3c <_usb_d_dev_out_next>:
{
    2e3c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2e40:	4604      	mov	r4, r0
	uint8_t            epn        = USB_EP_GET_N(ept->ep);
    2e42:	7c85      	ldrb	r5, [r0, #18]
    2e44:	f005 050f 	and.w	r5, r5, #15
	uint16_t           trans_size = isr ? bank->PCKSIZE.bit.MULTI_PACKET_SIZE : 0;
    2e48:	4689      	mov	r9, r1
    2e4a:	2900      	cmp	r1, #0
    2e4c:	d056      	beq.n	2efc <_usb_d_dev_out_next+0xc0>
    2e4e:	4b74      	ldr	r3, [pc, #464]	; (3020 <_usb_d_dev_out_next+0x1e4>)
    2e50:	eb03 1345 	add.w	r3, r3, r5, lsl #5
    2e54:	685a      	ldr	r2, [r3, #4]
    2e56:	f3c2 3a8d 	ubfx	sl, r2, #14, #14
	uint16_t           last_trans = isr ? bank->PCKSIZE.bit.BYTE_COUNT : 0;
    2e5a:	685f      	ldr	r7, [r3, #4]
    2e5c:	f3c7 070d 	ubfx	r7, r7, #0, #14
    2e60:	46bb      	mov	fp, r7
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
    2e62:	8a06      	ldrh	r6, [r0, #16]
    2e64:	f240 33ff 	movw	r3, #1023	; 0x3ff
    2e68:	429e      	cmp	r6, r3
    2e6a:	f000 80ba 	beq.w	2fe2 <_usb_d_dev_out_next+0x1a6>
    2e6e:	3e01      	subs	r6, #1
    2e70:	b2b6      	uxth	r6, r6
	uint16_t           last_pkt   = last_trans & size_mask;
    2e72:	ea06 070b 	and.w	r7, r6, fp
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    2e76:	f894 8013 	ldrb.w	r8, [r4, #19]
    2e7a:	f008 0807 	and.w	r8, r8, #7
	if (isr) {
    2e7e:	f1b9 0f00 	cmp.w	r9, #0
    2e82:	d005      	beq.n	2e90 <_usb_d_dev_out_next+0x54>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    2e84:	016b      	lsls	r3, r5, #5
    2e86:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    2e8a:	2201      	movs	r2, #1
    2e8c:	f883 2107 	strb.w	r2, [r3, #263]	; 0x107
	if (ept->flags.bits.use_cache && ept->trans_size) {
    2e90:	7ce3      	ldrb	r3, [r4, #19]
    2e92:	f013 0f20 	tst.w	r3, #32
    2e96:	d00d      	beq.n	2eb4 <_usb_d_dev_out_next+0x78>
    2e98:	6862      	ldr	r2, [r4, #4]
    2e9a:	2a00      	cmp	r2, #0
    2e9c:	d037      	beq.n	2f0e <_usb_d_dev_out_next+0xd2>
		uint16_t buf_remain = ept->trans_size - ept->trans_count;
    2e9e:	68a0      	ldr	r0, [r4, #8]
    2ea0:	1a12      	subs	r2, r2, r0
    2ea2:	b292      	uxth	r2, r2
		memcpy(&ept->trans_buf[ept->trans_count], ept->cache, (buf_remain > last_pkt) ? last_pkt : buf_remain);
    2ea4:	6823      	ldr	r3, [r4, #0]
    2ea6:	42ba      	cmp	r2, r7
    2ea8:	bf28      	it	cs
    2eaa:	463a      	movcs	r2, r7
    2eac:	68e1      	ldr	r1, [r4, #12]
    2eae:	4418      	add	r0, r3
    2eb0:	4b5c      	ldr	r3, [pc, #368]	; (3024 <_usb_d_dev_out_next+0x1e8>)
    2eb2:	4798      	blx	r3
	if (ept->trans_size == 0 && ept->flags.bits.need_zlp) {
    2eb4:	6863      	ldr	r3, [r4, #4]
    2eb6:	b353      	cbz	r3, 2f0e <_usb_d_dev_out_next+0xd2>
	} else if (isr && last_pkt < ept->size) {
    2eb8:	f1b9 0f00 	cmp.w	r9, #0
    2ebc:	d040      	beq.n	2f40 <_usb_d_dev_out_next+0x104>
    2ebe:	8a22      	ldrh	r2, [r4, #16]
    2ec0:	42ba      	cmp	r2, r7
    2ec2:	d93d      	bls.n	2f40 <_usb_d_dev_out_next+0x104>
		ept->flags.bits.need_zlp = 0;
    2ec4:	7ce3      	ldrb	r3, [r4, #19]
    2ec6:	f36f 1304 	bfc	r3, #4, #1
    2eca:	74e3      	strb	r3, [r4, #19]
		ept->trans_count += last_trans;
    2ecc:	68a3      	ldr	r3, [r4, #8]
    2ece:	445b      	add	r3, fp
    2ed0:	60a3      	str	r3, [r4, #8]
	if (is_ctrl) {
    2ed2:	f1b8 0f01 	cmp.w	r8, #1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    2ed6:	ea4f 1345 	mov.w	r3, r5, lsl #5
    2eda:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    2ede:	bf0c      	ite	eq
    2ee0:	222d      	moveq	r2, #45	; 0x2d
    2ee2:	2225      	movne	r2, #37	; 0x25
    2ee4:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
	if (0 == epn) {
    2ee8:	b915      	cbnz	r5, 2ef0 <_usb_d_dev_out_next+0xb4>
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    2eea:	68e2      	ldr	r2, [r4, #12]
	bank->ADDR.reg          = addr;
    2eec:	4b4c      	ldr	r3, [pc, #304]	; (3020 <_usb_d_dev_out_next+0x1e4>)
    2eee:	601a      	str	r2, [r3, #0]
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    2ef0:	2100      	movs	r1, #0
    2ef2:	4620      	mov	r0, r4
    2ef4:	4b4c      	ldr	r3, [pc, #304]	; (3028 <_usb_d_dev_out_next+0x1ec>)
    2ef6:	4798      	blx	r3
	return;
    2ef8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
    2efc:	8a06      	ldrh	r6, [r0, #16]
    2efe:	f240 33ff 	movw	r3, #1023	; 0x3ff
    2f02:	429e      	cmp	r6, r3
    2f04:	d07b      	beq.n	2ffe <_usb_d_dev_out_next+0x1c2>
    2f06:	f04f 0b00 	mov.w	fp, #0
    2f0a:	46da      	mov	sl, fp
    2f0c:	e7af      	b.n	2e6e <_usb_d_dev_out_next+0x32>
	if (ept->trans_size == 0 && ept->flags.bits.need_zlp) {
    2f0e:	7ce3      	ldrb	r3, [r4, #19]
    2f10:	f013 0f10 	tst.w	r3, #16
    2f14:	d06c      	beq.n	2ff0 <_usb_d_dev_out_next+0x1b4>
		ept->flags.bits.need_zlp  = 0;
    2f16:	7ce3      	ldrb	r3, [r4, #19]
		ept->flags.bits.use_cache = 1;
    2f18:	f003 03ef 	and.w	r3, r3, #239	; 0xef
    2f1c:	f043 0320 	orr.w	r3, r3, #32
    2f20:	74e3      	strb	r3, [r4, #19]
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    2f22:	68e0      	ldr	r0, [r4, #12]
	bank->ADDR.reg          = addr;
    2f24:	493e      	ldr	r1, [pc, #248]	; (3020 <_usb_d_dev_out_next+0x1e4>)
    2f26:	016a      	lsls	r2, r5, #5
    2f28:	188b      	adds	r3, r1, r2
    2f2a:	5088      	str	r0, [r1, r2]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    2f2c:	8a21      	ldrh	r1, [r4, #16]
    2f2e:	685a      	ldr	r2, [r3, #4]
    2f30:	f361 329b 	bfi	r2, r1, #14, #14
    2f34:	605a      	str	r2, [r3, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    2f36:	685a      	ldr	r2, [r3, #4]
    2f38:	f36f 020d 	bfc	r2, #0, #14
    2f3c:	605a      	str	r2, [r3, #4]
    2f3e:	e01d      	b.n	2f7c <_usb_d_dev_out_next+0x140>
		ept->trans_count += trans_size;
    2f40:	68a2      	ldr	r2, [r4, #8]
    2f42:	4452      	add	r2, sl
    2f44:	60a2      	str	r2, [r4, #8]
		if (ept->trans_count < ept->trans_size) {
    2f46:	4293      	cmp	r3, r2
    2f48:	d9c3      	bls.n	2ed2 <_usb_d_dev_out_next+0x96>
			trans_next = ept->trans_size - ept->trans_count;
    2f4a:	1a9b      	subs	r3, r3, r2
    2f4c:	b29b      	uxth	r3, r3
			if (ept->flags.bits.use_cache) {
    2f4e:	7ce1      	ldrb	r1, [r4, #19]
    2f50:	f011 0f20 	tst.w	r1, #32
    2f54:	d026      	beq.n	2fa4 <_usb_d_dev_out_next+0x168>
    2f56:	8a22      	ldrh	r2, [r4, #16]
    2f58:	4293      	cmp	r3, r2
    2f5a:	bf28      	it	cs
    2f5c:	4613      	movcs	r3, r2
				_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    2f5e:	68e0      	ldr	r0, [r4, #12]
	bank->ADDR.reg          = addr;
    2f60:	016a      	lsls	r2, r5, #5
    2f62:	492f      	ldr	r1, [pc, #188]	; (3020 <_usb_d_dev_out_next+0x1e4>)
    2f64:	5088      	str	r0, [r1, r2]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    2f66:	4a2e      	ldr	r2, [pc, #184]	; (3020 <_usb_d_dev_out_next+0x1e4>)
    2f68:	eb02 1245 	add.w	r2, r2, r5, lsl #5
    2f6c:	6851      	ldr	r1, [r2, #4]
    2f6e:	f363 319b 	bfi	r1, r3, #14, #14
    2f72:	6051      	str	r1, [r2, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    2f74:	6853      	ldr	r3, [r2, #4]
    2f76:	f36f 030d 	bfc	r3, #0, #14
    2f7a:	6053      	str	r3, [r2, #4]
	if (!isr) {
    2f7c:	f1b9 0f00 	cmp.w	r9, #0
    2f80:	d108      	bne.n	2f94 <_usb_d_dev_out_next+0x158>
		if (is_ctrl) {
    2f82:	f1b8 0f01 	cmp.w	r8, #1
    2f86:	d025      	beq.n	2fd4 <_usb_d_dev_out_next+0x198>
			inten = USB_D_BANK0_INT_FLAGS;
    2f88:	2225      	movs	r2, #37	; 0x25
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    2f8a:	016b      	lsls	r3, r5, #5
    2f8c:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    2f90:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    2f94:	016d      	lsls	r5, r5, #5
    2f96:	f105 4582 	add.w	r5, r5, #1090519040	; 0x41000000
    2f9a:	2340      	movs	r3, #64	; 0x40
    2f9c:	f885 3104 	strb.w	r3, [r5, #260]	; 0x104
    2fa0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if (trans_next > ept->size) {
    2fa4:	8a21      	ldrh	r1, [r4, #16]
    2fa6:	428b      	cmp	r3, r1
    2fa8:	d90a      	bls.n	2fc0 <_usb_d_dev_out_next+0x184>
					if (trans_next > USB_D_DEV_TRANS_MAX) {
    2faa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
    2fae:	d80e      	bhi.n	2fce <_usb_d_dev_out_next+0x192>
    2fb0:	ea23 0306 	bic.w	r3, r3, r6
				_usbd_ep_set_buf(epn, 0, (uint32_t)&ept->trans_buf[ept->trans_count]);
    2fb4:	6821      	ldr	r1, [r4, #0]
    2fb6:	440a      	add	r2, r1
	bank->ADDR.reg          = addr;
    2fb8:	0169      	lsls	r1, r5, #5
    2fba:	4819      	ldr	r0, [pc, #100]	; (3020 <_usb_d_dev_out_next+0x1e4>)
    2fbc:	5042      	str	r2, [r0, r1]
    2fbe:	e7d2      	b.n	2f66 <_usb_d_dev_out_next+0x12a>
				} else if (trans_next < ept->size) {
    2fc0:	428b      	cmp	r3, r1
    2fc2:	d2f7      	bcs.n	2fb4 <_usb_d_dev_out_next+0x178>
					ept->flags.bits.use_cache = 1;
    2fc4:	7ce1      	ldrb	r1, [r4, #19]
    2fc6:	f041 0120 	orr.w	r1, r1, #32
    2fca:	74e1      	strb	r1, [r4, #19]
    2fcc:	e7f2      	b.n	2fb4 <_usb_d_dev_out_next+0x178>
						trans_next = USB_D_DEV_TRANS_MAX;
    2fce:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    2fd2:	e7ef      	b.n	2fb4 <_usb_d_dev_out_next+0x178>
	bank->STATUS_BK.reg     = 0;
    2fd4:	4b12      	ldr	r3, [pc, #72]	; (3020 <_usb_d_dev_out_next+0x1e4>)
    2fd6:	eb03 1345 	add.w	r3, r3, r5, lsl #5
    2fda:	2200      	movs	r2, #0
    2fdc:	769a      	strb	r2, [r3, #26]
			inten = USB_D_BANK0_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL1;
    2fde:	222d      	movs	r2, #45	; 0x2d
    2fe0:	e7d3      	b.n	2f8a <_usb_d_dev_out_next+0x14e>
	uint16_t           last_pkt   = last_trans & size_mask;
    2fe2:	f3c7 0709 	ubfx	r7, r7, #0, #10
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    2fe6:	f890 8013 	ldrb.w	r8, [r0, #19]
    2fea:	f008 0807 	and.w	r8, r8, #7
    2fee:	e749      	b.n	2e84 <_usb_d_dev_out_next+0x48>
	} else if (isr && last_pkt < ept->size) {
    2ff0:	f1b9 0f00 	cmp.w	r9, #0
    2ff4:	d10b      	bne.n	300e <_usb_d_dev_out_next+0x1d2>
		ept->trans_count += trans_size;
    2ff6:	68a3      	ldr	r3, [r4, #8]
    2ff8:	4453      	add	r3, sl
    2ffa:	60a3      	str	r3, [r4, #8]
    2ffc:	e769      	b.n	2ed2 <_usb_d_dev_out_next+0x96>
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    2ffe:	f890 8013 	ldrb.w	r8, [r0, #19]
    3002:	f008 0807 	and.w	r8, r8, #7
	uint16_t           last_pkt   = last_trans & size_mask;
    3006:	2700      	movs	r7, #0
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    3008:	46bb      	mov	fp, r7
    300a:	46ba      	mov	sl, r7
    300c:	e740      	b.n	2e90 <_usb_d_dev_out_next+0x54>
	} else if (isr && last_pkt < ept->size) {
    300e:	8a23      	ldrh	r3, [r4, #16]
    3010:	42bb      	cmp	r3, r7
    3012:	f63f af57 	bhi.w	2ec4 <_usb_d_dev_out_next+0x88>
		ept->trans_count += trans_size;
    3016:	68a3      	ldr	r3, [r4, #8]
    3018:	4453      	add	r3, sl
    301a:	60a3      	str	r3, [r4, #8]
    301c:	e759      	b.n	2ed2 <_usb_d_dev_out_next+0x96>
    301e:	bf00      	nop
    3020:	20000700 	.word	0x20000700
    3024:	000048f1 	.word	0x000048f1
    3028:	00002add 	.word	0x00002add

0000302c <_usb_d_dev_handler>:
{
    302c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	uint16_t epint = hw->DEVICE.EPINTSMRY.reg;
    3030:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    3034:	8c1e      	ldrh	r6, [r3, #32]
    3036:	b2b6      	uxth	r6, r6
	if (0 == epint) {
    3038:	b146      	cbz	r6, 304c <_usb_d_dev_handler+0x20>
    303a:	4d91      	ldr	r5, [pc, #580]	; (3280 <_usb_d_dev_handler+0x254>)
	uint32_t lpm_variable = 0;
    303c:	2400      	movs	r4, #0
		if ((ept->flags.bits.eptype == 0x1) && !_usb_d_dev_ep_is_busy(ept)) {
    303e:	f1a5 0774 	sub.w	r7, r5, #116	; 0x74
			_usb_d_dev_handle_setup(ept);
    3042:	f8df 9258 	ldr.w	r9, [pc, #600]	; 329c <_usb_d_dev_handler+0x270>
			_usb_d_dev_handle_trfail(ept, 1);
    3046:	f8df 8258 	ldr.w	r8, [pc, #600]	; 32a0 <_usb_d_dev_handler+0x274>
    304a:	e0d3      	b.n	31f4 <_usb_d_dev_handler+0x1c8>
	return tmp;
}

static inline hri_usbdevice_intflag_reg_t hri_usbdevice_read_INTFLAG_reg(const void *const hw)
{
	return ((Usb *)hw)->DEVICE.INTFLAG.reg;
    304c:	8b99      	ldrh	r1, [r3, #28]
	return tmp;
}

static inline hri_usbdevice_intenset_reg_t hri_usbdevice_read_INTEN_reg(const void *const hw)
{
	return ((Usb *)hw)->DEVICE.INTENSET.reg;
    304e:	8b1b      	ldrh	r3, [r3, #24]
    3050:	b29b      	uxth	r3, r3
	flags &= hri_usbdevice_read_INTEN_reg(USB);
    3052:	400b      	ands	r3, r1
	if (flags & USB_DEVICE_INTFLAG_SOF) {
    3054:	f013 0f04 	tst.w	r3, #4
    3058:	d11d      	bne.n	3096 <_usb_d_dev_handler+0x6a>
	if (flags & USB_DEVICE_INTFLAG_LPMSUSP) {
    305a:	f413 7f00 	tst.w	r3, #512	; 0x200
    305e:	d123      	bne.n	30a8 <_usb_d_dev_handler+0x7c>
	} else if (flags & USB_DEVICE_INTFLAG_RAMACER) {
    3060:	f013 0f80 	tst.w	r3, #128	; 0x80
    3064:	d147      	bne.n	30f6 <_usb_d_dev_handler+0xca>
	} else if (flags & USB_D_WAKEUP_INT_FLAGS) {
    3066:	f013 0f70 	tst.w	r3, #112	; 0x70
    306a:	d14f      	bne.n	310c <_usb_d_dev_handler+0xe0>
	} else if (flags & USB_DEVICE_INTFLAG_EORST) {
    306c:	f013 0f08 	tst.w	r3, #8
    3070:	d16e      	bne.n	3150 <_usb_d_dev_handler+0x124>
	} else if (flags & USB_DEVICE_INTFLAG_SUSPEND) {
    3072:	f013 0f01 	tst.w	r3, #1
    3076:	d0e0      	beq.n	303a <_usb_d_dev_handler+0xe>
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    3078:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    307c:	f240 2201 	movw	r2, #513	; 0x201
    3080:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = ~data;
}

static inline void hri_usbdevice_clear_INTEN_reg(const void *const hw, hri_usbdevice_intenset_reg_t mask)
{
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    3082:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    3084:	2270      	movs	r2, #112	; 0x70
    3086:	831a      	strh	r2, [r3, #24]
	dev_inst.callbacks.event(USB_EV_SUSPEND, 0);
    3088:	4b7e      	ldr	r3, [pc, #504]	; (3284 <_usb_d_dev_handler+0x258>)
    308a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    308c:	2100      	movs	r1, #0
    308e:	2004      	movs	r0, #4
    3090:	4798      	blx	r3
    3092:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    3096:	2204      	movs	r2, #4
    3098:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    309c:	839a      	strh	r2, [r3, #28]
	dev_inst.callbacks.sof();
    309e:	4b79      	ldr	r3, [pc, #484]	; (3284 <_usb_d_dev_handler+0x258>)
    30a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    30a2:	4798      	blx	r3
    30a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    30a8:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    30ac:	f240 2201 	movw	r2, #513	; 0x201
    30b0:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    30b2:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    30b4:	2270      	movs	r2, #112	; 0x70
    30b6:	831a      	strh	r2, [r3, #24]
		if (bank->EXTREG.bit.SUBPID == 0x3) {
    30b8:	4b72      	ldr	r3, [pc, #456]	; (3284 <_usb_d_dev_handler+0x258>)
    30ba:	891b      	ldrh	r3, [r3, #8]
    30bc:	f003 030f 	and.w	r3, r3, #15
    30c0:	2b03      	cmp	r3, #3
    30c2:	d00e      	beq.n	30e2 <_usb_d_dev_handler+0xb6>
    30c4:	4b6f      	ldr	r3, [pc, #444]	; (3284 <_usb_d_dev_handler+0x258>)
    30c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    30c8:	f003 030f 	and.w	r3, r3, #15
    30cc:	2b03      	cmp	r3, #3
		UsbDeviceDescBank *bank = &prvt_inst.desc_table[i].DeviceDescBank[0];
    30ce:	bf08      	it	eq
    30d0:	2201      	moveq	r2, #1
		if (bank->EXTREG.bit.SUBPID == 0x3) {
    30d2:	d007      	beq.n	30e4 <_usb_d_dev_handler+0xb8>
	uint32_t lpm_variable = 0;
    30d4:	2100      	movs	r1, #0
	dev_inst.callbacks.event(USB_EV_LPM_SUSPEND, lpm_variable);
    30d6:	4b6b      	ldr	r3, [pc, #428]	; (3284 <_usb_d_dev_handler+0x258>)
    30d8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    30da:	2003      	movs	r0, #3
    30dc:	4798      	blx	r3
    30de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		UsbDeviceDescBank *bank = &prvt_inst.desc_table[i].DeviceDescBank[0];
    30e2:	2200      	movs	r2, #0
			lpm_variable = bank->EXTREG.bit.VARIABLE;
    30e4:	4b67      	ldr	r3, [pc, #412]	; (3284 <_usb_d_dev_handler+0x258>)
    30e6:	eb03 1342 	add.w	r3, r3, r2, lsl #5
    30ea:	8919      	ldrh	r1, [r3, #8]
    30ec:	f3c1 110a 	ubfx	r1, r1, #4, #11
			bank->EXTREG.reg = 0;
    30f0:	2200      	movs	r2, #0
    30f2:	811a      	strh	r2, [r3, #8]
    30f4:	e7ef      	b.n	30d6 <_usb_d_dev_handler+0xaa>
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    30f6:	2280      	movs	r2, #128	; 0x80
    30f8:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    30fc:	839a      	strh	r2, [r3, #28]
	dev_inst.callbacks.event(USB_EV_ERROR, 0);
    30fe:	4b61      	ldr	r3, [pc, #388]	; (3284 <_usb_d_dev_handler+0x258>)
    3100:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    3102:	2100      	movs	r1, #0
    3104:	2005      	movs	r0, #5
    3106:	4798      	blx	r3
    3108:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    310c:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    3110:	2270      	movs	r2, #112	; 0x70
    3112:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    3114:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    3116:	f240 2201 	movw	r2, #513	; 0x201
    311a:	831a      	strh	r2, [r3, #24]
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
    311c:	4b5a      	ldr	r3, [pc, #360]	; (3288 <_usb_d_dev_handler+0x25c>)
    311e:	f893 3020 	ldrb.w	r3, [r3, #32]
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(OSCCTRL)) {
    3122:	f013 0f01 	tst.w	r3, #1
    3126:	d00d      	beq.n	3144 <_usb_d_dev_handler+0x118>
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    3128:	4a57      	ldr	r2, [pc, #348]	; (3288 <_usb_d_dev_handler+0x25c>)
    312a:	6913      	ldr	r3, [r2, #16]
	tmp &= mask;
    312c:	f403 6310 	and.w	r3, r3, #2304	; 0x900
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, (OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC))
    3130:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
    3134:	d1f9      	bne.n	312a <_usb_d_dev_handler+0xfe>
	dev_inst.callbacks.event(USB_EV_WAKEUP, 0);
    3136:	4b53      	ldr	r3, [pc, #332]	; (3284 <_usb_d_dev_handler+0x258>)
    3138:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    313a:	2100      	movs	r1, #0
    313c:	2002      	movs	r0, #2
    313e:	4798      	blx	r3
    3140:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    3144:	4a50      	ldr	r2, [pc, #320]	; (3288 <_usb_d_dev_handler+0x25c>)
    3146:	6913      	ldr	r3, [r2, #16]
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, OSCCTRL_STATUS_DFLLRDY) != OSCCTRL_STATUS_DFLLRDY)
    3148:	f413 7f80 	tst.w	r3, #256	; 0x100
    314c:	d0fb      	beq.n	3146 <_usb_d_dev_handler+0x11a>
    314e:	e7f2      	b.n	3136 <_usb_d_dev_handler+0x10a>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    3150:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    3154:	2400      	movs	r4, #0
    3156:	f883 4100 	strb.w	r4, [r3, #256]	; 0x100
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    315a:	2208      	movs	r2, #8
    315c:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    315e:	2270      	movs	r2, #112	; 0x70
    3160:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    3162:	f240 2201 	movw	r2, #513	; 0x201
    3166:	831a      	strh	r2, [r3, #24]
	_usb_d_dev_reset_epts();
    3168:	4b48      	ldr	r3, [pc, #288]	; (328c <_usb_d_dev_handler+0x260>)
    316a:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_RESET, 0);
    316c:	4b45      	ldr	r3, [pc, #276]	; (3284 <_usb_d_dev_handler+0x258>)
    316e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    3170:	4621      	mov	r1, r4
    3172:	2001      	movs	r0, #1
    3174:	4798      	blx	r3
    3176:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    317a:	f011 0f10 	tst.w	r1, #16
    317e:	d109      	bne.n	3194 <_usb_d_dev_handler+0x168>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    3180:	f011 0f40 	tst.w	r1, #64	; 0x40
    3184:	d108      	bne.n	3198 <_usb_d_dev_handler+0x16c>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    3186:	f011 0f20 	tst.w	r1, #32
    318a:	d02f      	beq.n	31ec <_usb_d_dev_handler+0x1c0>
		_usb_d_dev_handle_stall(ept, 0);
    318c:	2100      	movs	r1, #0
    318e:	4b40      	ldr	r3, [pc, #256]	; (3290 <_usb_d_dev_handler+0x264>)
    3190:	4798      	blx	r3
    3192:	e02b      	b.n	31ec <_usb_d_dev_handler+0x1c0>
		_usb_d_dev_handle_setup(ept);
    3194:	47c8      	blx	r9
    3196:	e029      	b.n	31ec <_usb_d_dev_handler+0x1c0>
		_usb_d_dev_handle_stall(ept, 1);
    3198:	2101      	movs	r1, #1
    319a:	4b3d      	ldr	r3, [pc, #244]	; (3290 <_usb_d_dev_handler+0x264>)
    319c:	4798      	blx	r3
    319e:	e025      	b.n	31ec <_usb_d_dev_handler+0x1c0>
	if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    31a0:	f011 0f40 	tst.w	r1, #64	; 0x40
    31a4:	d111      	bne.n	31ca <_usb_d_dev_handler+0x19e>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    31a6:	f011 0f08 	tst.w	r1, #8
    31aa:	d112      	bne.n	31d2 <_usb_d_dev_handler+0x1a6>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT1) {
    31ac:	f011 0f02 	tst.w	r1, #2
    31b0:	d112      	bne.n	31d8 <_usb_d_dev_handler+0x1ac>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    31b2:	f003 0307 	and.w	r3, r3, #7
    31b6:	2b01      	cmp	r3, #1
    31b8:	d118      	bne.n	31ec <_usb_d_dev_handler+0x1c0>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    31ba:	f011 0f04 	tst.w	r1, #4
    31be:	d10f      	bne.n	31e0 <_usb_d_dev_handler+0x1b4>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    31c0:	f011 0f10 	tst.w	r1, #16
    31c4:	d012      	beq.n	31ec <_usb_d_dev_handler+0x1c0>
			_usb_d_dev_handle_setup(ept);
    31c6:	47c8      	blx	r9
    31c8:	e010      	b.n	31ec <_usb_d_dev_handler+0x1c0>
		_usb_d_dev_handle_stall(ept, 1);
    31ca:	2101      	movs	r1, #1
    31cc:	4b30      	ldr	r3, [pc, #192]	; (3290 <_usb_d_dev_handler+0x264>)
    31ce:	4798      	blx	r3
    31d0:	e00c      	b.n	31ec <_usb_d_dev_handler+0x1c0>
		_usb_d_dev_handle_trfail(ept, 1);
    31d2:	2101      	movs	r1, #1
    31d4:	47c0      	blx	r8
    31d6:	e009      	b.n	31ec <_usb_d_dev_handler+0x1c0>
		_usb_d_dev_in_next(ept, true);
    31d8:	2101      	movs	r1, #1
    31da:	4b2e      	ldr	r3, [pc, #184]	; (3294 <_usb_d_dev_handler+0x268>)
    31dc:	4798      	blx	r3
    31de:	e005      	b.n	31ec <_usb_d_dev_handler+0x1c0>
			_usb_d_dev_handle_trfail(ept, 0);
    31e0:	2100      	movs	r1, #0
    31e2:	47c0      	blx	r8
    31e4:	e002      	b.n	31ec <_usb_d_dev_handler+0x1c0>
		_usb_d_dev_handle_stall(ept, 0);
    31e6:	2100      	movs	r1, #0
    31e8:	4b29      	ldr	r3, [pc, #164]	; (3290 <_usb_d_dev_handler+0x264>)
    31ea:	4798      	blx	r3
    31ec:	3401      	adds	r4, #1
    31ee:	3514      	adds	r5, #20
	for (i = 0; i < USB_D_N_EP; i++) {
    31f0:	2c09      	cmp	r4, #9
    31f2:	d042      	beq.n	327a <_usb_d_dev_handler+0x24e>
    31f4:	4628      	mov	r0, r5
		if (ept->ep == 0xFF) {
    31f6:	7cab      	ldrb	r3, [r5, #18]
    31f8:	2bff      	cmp	r3, #255	; 0xff
    31fa:	d0f7      	beq.n	31ec <_usb_d_dev_handler+0x1c0>
	if (!(epint & (1u << epn))) {
    31fc:	f003 030f 	and.w	r3, r3, #15
    3200:	2101      	movs	r1, #1
    3202:	4099      	lsls	r1, r3
    3204:	4231      	tst	r1, r6
    3206:	d0f1      	beq.n	31ec <_usb_d_dev_handler+0x1c0>
	flags = hw->DEVICE.DeviceEndpoint[epn].EPINTFLAG.reg;
    3208:	0159      	lsls	r1, r3, #5
    320a:	f101 4182 	add.w	r1, r1, #1090519040	; 0x41000000
    320e:	f501 7180 	add.w	r1, r1, #256	; 0x100
    3212:	79c9      	ldrb	r1, [r1, #7]
	mask  = hw->DEVICE.DeviceEndpoint[epn].EPINTENSET.reg;
    3214:	015b      	lsls	r3, r3, #5
    3216:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    321a:	f893 3109 	ldrb.w	r3, [r3, #265]	; 0x109
	if (flags) {
    321e:	4019      	ands	r1, r3
    3220:	d0e4      	beq.n	31ec <_usb_d_dev_handler+0x1c0>
		if ((ept->flags.bits.eptype == 0x1) && !_usb_d_dev_ep_is_busy(ept)) {
    3222:	eb04 0284 	add.w	r2, r4, r4, lsl #2
    3226:	eb07 0282 	add.w	r2, r7, r2, lsl #2
    322a:	f892 3087 	ldrb.w	r3, [r2, #135]	; 0x87
    322e:	f003 0247 	and.w	r2, r3, #71	; 0x47
    3232:	2a01      	cmp	r2, #1
    3234:	d0a1      	beq.n	317a <_usb_d_dev_handler+0x14e>
		} else if (_usb_d_dev_ep_is_in(ept)) {
    3236:	f013 0f80 	tst.w	r3, #128	; 0x80
    323a:	d1b1      	bne.n	31a0 <_usb_d_dev_handler+0x174>
	if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    323c:	f011 0f20 	tst.w	r1, #32
    3240:	d1d1      	bne.n	31e6 <_usb_d_dev_handler+0x1ba>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    3242:	f011 0f04 	tst.w	r1, #4
    3246:	d10e      	bne.n	3266 <_usb_d_dev_handler+0x23a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT0) {
    3248:	f011 0f01 	tst.w	r1, #1
    324c:	d10e      	bne.n	326c <_usb_d_dev_handler+0x240>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    324e:	f003 0307 	and.w	r3, r3, #7
    3252:	2b01      	cmp	r3, #1
    3254:	d1ca      	bne.n	31ec <_usb_d_dev_handler+0x1c0>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    3256:	f011 0f08 	tst.w	r1, #8
    325a:	d10b      	bne.n	3274 <_usb_d_dev_handler+0x248>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    325c:	f011 0f10 	tst.w	r1, #16
    3260:	d0c4      	beq.n	31ec <_usb_d_dev_handler+0x1c0>
			_usb_d_dev_handle_setup(ept);
    3262:	47c8      	blx	r9
    3264:	e7c2      	b.n	31ec <_usb_d_dev_handler+0x1c0>
		_usb_d_dev_handle_trfail(ept, 0);
    3266:	2100      	movs	r1, #0
    3268:	47c0      	blx	r8
    326a:	e7bf      	b.n	31ec <_usb_d_dev_handler+0x1c0>
		_usb_d_dev_out_next(ept, true);
    326c:	2101      	movs	r1, #1
    326e:	4b0a      	ldr	r3, [pc, #40]	; (3298 <_usb_d_dev_handler+0x26c>)
    3270:	4798      	blx	r3
    3272:	e7bb      	b.n	31ec <_usb_d_dev_handler+0x1c0>
			_usb_d_dev_handle_trfail(ept, 1);
    3274:	2101      	movs	r1, #1
    3276:	47c0      	blx	r8
    3278:	e7b8      	b.n	31ec <_usb_d_dev_handler+0x1c0>
    327a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    327e:	bf00      	nop
    3280:	20000774 	.word	0x20000774
    3284:	20000700 	.word	0x20000700
    3288:	40001000 	.word	0x40001000
    328c:	00002c75 	.word	0x00002c75
    3290:	00002ab1 	.word	0x00002ab1
    3294:	00002cb9 	.word	0x00002cb9
    3298:	00002e3d 	.word	0x00002e3d
    329c:	00002a35 	.word	0x00002a35
    32a0:	00002b75 	.word	0x00002b75

000032a4 <_usb_d_dev_init>:
{
    32a4:	b508      	push	{r3, lr}
	return ((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg;
    32a6:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    32aa:	789b      	ldrb	r3, [r3, #2]
	if (!hri_usbdevice_is_syncing(hw, USB_SYNCBUSY_SWRST)) {
    32ac:	f013 0f01 	tst.w	r3, #1
    32b0:	d124      	bne.n	32fc <_usb_d_dev_init+0x58>
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    32b2:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    32b6:	7893      	ldrb	r3, [r2, #2]
    32b8:	f013 0f03 	tst.w	r3, #3
    32bc:	d1fb      	bne.n	32b6 <_usb_d_dev_init+0x12>

static inline hri_usb_ctrla_reg_t hri_usb_get_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t mask)
{
	uint8_t tmp;
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
	tmp = ((Usb *)hw)->HOST.CTRLA.reg;
    32be:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    32c2:	781b      	ldrb	r3, [r3, #0]
		if (hri_usbdevice_get_CTRLA_reg(hw, USB_CTRLA_ENABLE)) {
    32c4:	f013 0f02 	tst.w	r3, #2
    32c8:	d00f      	beq.n	32ea <_usb_d_dev_init+0x46>
	((Usb *)hw)->HOST.CTRLA.reg &= ~USB_CTRLA_ENABLE;
    32ca:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    32ce:	7813      	ldrb	r3, [r2, #0]
    32d0:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    32d4:	7013      	strb	r3, [r2, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    32d6:	7893      	ldrb	r3, [r2, #2]
    32d8:	f013 0f03 	tst.w	r3, #3
    32dc:	d1fb      	bne.n	32d6 <_usb_d_dev_init+0x32>
    32de:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    32e2:	7893      	ldrb	r3, [r2, #2]
    32e4:	f013 0f02 	tst.w	r3, #2
    32e8:	d1fb      	bne.n	32e2 <_usb_d_dev_init+0x3e>
}

static inline void hri_usb_write_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t data)
{
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.CTRLA.reg = data;
    32ea:	2201      	movs	r2, #1
    32ec:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    32f0:	701a      	strb	r2, [r3, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    32f2:	461a      	mov	r2, r3
    32f4:	7893      	ldrb	r3, [r2, #2]
    32f6:	f013 0f03 	tst.w	r3, #3
    32fa:	d1fb      	bne.n	32f4 <_usb_d_dev_init+0x50>
    32fc:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    3300:	7893      	ldrb	r3, [r2, #2]
    3302:	f013 0f01 	tst.w	r3, #1
    3306:	d1fb      	bne.n	3300 <_usb_d_dev_init+0x5c>
	dev_inst.callbacks.sof   = (_usb_d_dev_sof_cb_t)_dummy_func_no_return;
    3308:	4b21      	ldr	r3, [pc, #132]	; (3390 <_usb_d_dev_init+0xec>)
    330a:	4a22      	ldr	r2, [pc, #136]	; (3394 <_usb_d_dev_init+0xf0>)
    330c:	661a      	str	r2, [r3, #96]	; 0x60
	dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)_dummy_func_no_return;
    330e:	665a      	str	r2, [r3, #100]	; 0x64
	dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)_dummy_func_no_return;
    3310:	669a      	str	r2, [r3, #104]	; 0x68
	dev_inst.ep_callbacks.more  = (_usb_d_dev_ep_cb_more_t)_dummy_func_no_return;
    3312:	66da      	str	r2, [r3, #108]	; 0x6c
	dev_inst.ep_callbacks.done  = (_usb_d_dev_ep_cb_done_t)_dummy_func_no_return;
    3314:	671a      	str	r2, [r3, #112]	; 0x70
	_usb_d_dev_reset_epts();
    3316:	4b20      	ldr	r3, [pc, #128]	; (3398 <_usb_d_dev_init+0xf4>)
    3318:	4798      	blx	r3
	    = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRANSN_POS / 32)) >> (NVM_USB_PAD_TRANSN_POS % 32))
    331a:	4b20      	ldr	r3, [pc, #128]	; (339c <_usb_d_dev_init+0xf8>)
    331c:	6819      	ldr	r1, [r3, #0]
	uint32_t pad_transp
    331e:	f3c1 1344 	ubfx	r3, r1, #5, #5
	uint32_t pad_trim = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRIM_POS / 32)) >> (NVM_USB_PAD_TRIM_POS % 32))
    3322:	f3c1 2282 	ubfx	r2, r1, #10, #3
	if (pad_transn == 0 || pad_transn == 0x1F) {
    3326:	f011 011f 	ands.w	r1, r1, #31
    332a:	d02b      	beq.n	3384 <_usb_d_dev_init+0xe0>
		pad_transn = 9;
    332c:	291f      	cmp	r1, #31
    332e:	bf08      	it	eq
    3330:	2109      	moveq	r1, #9
	if (pad_transp == 0 || pad_transp == 0x1F) {
    3332:	b34b      	cbz	r3, 3388 <_usb_d_dev_init+0xe4>
		pad_transp = 25;
    3334:	2b1f      	cmp	r3, #31
    3336:	bf08      	it	eq
    3338:	2319      	moveq	r3, #25
	if (pad_trim == 0 || pad_trim == 0x7) {
    333a:	b33a      	cbz	r2, 338c <_usb_d_dev_init+0xe8>
		pad_trim = 6;
    333c:	2a07      	cmp	r2, #7
    333e:	bf08      	it	eq
    3340:	2206      	moveq	r2, #6
	hw->DEVICE.PADCAL.reg = USB_PADCAL_TRANSN(pad_transn) | USB_PADCAL_TRANSP(pad_transp) | USB_PADCAL_TRIM(pad_trim);
    3342:	f003 031f 	and.w	r3, r3, #31
    3346:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
    334a:	0312      	lsls	r2, r2, #12
    334c:	f402 42e0 	and.w	r2, r2, #28672	; 0x7000
    3350:	4313      	orrs	r3, r2
    3352:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    3356:	8513      	strh	r3, [r2, #40]	; 0x28
	hw->DEVICE.QOSCTRL.bit.CQOS = 3;
    3358:	78d3      	ldrb	r3, [r2, #3]
    335a:	f043 0303 	orr.w	r3, r3, #3
    335e:	70d3      	strb	r3, [r2, #3]
	hw->DEVICE.QOSCTRL.bit.DQOS = 3;
    3360:	78d3      	ldrb	r3, [r2, #3]
    3362:	f043 030c 	orr.w	r3, r3, #12
    3366:	70d3      	strb	r3, [r2, #3]
	((Usb *)hw)->HOST.CTRLA.reg = data;
    3368:	2304      	movs	r3, #4
    336a:	7013      	strb	r3, [r2, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    336c:	7893      	ldrb	r3, [r2, #2]
    336e:	f013 0f03 	tst.w	r3, #3
    3372:	d1fb      	bne.n	336c <_usb_d_dev_init+0xc8>
}

static inline void hri_usb_write_DESCADD_reg(const void *const hw, hri_usb_descadd_reg_t data)
{
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.DESCADD.reg = data;
    3374:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    3378:	4a05      	ldr	r2, [pc, #20]	; (3390 <_usb_d_dev_init+0xec>)
    337a:	625a      	str	r2, [r3, #36]	; 0x24
	((Usb *)hw)->DEVICE.CTRLB.reg = data;
    337c:	2201      	movs	r2, #1
    337e:	811a      	strh	r2, [r3, #8]
}
    3380:	2000      	movs	r0, #0
    3382:	bd08      	pop	{r3, pc}
		pad_transn = 9;
    3384:	2109      	movs	r1, #9
    3386:	e7d4      	b.n	3332 <_usb_d_dev_init+0x8e>
		pad_transp = 25;
    3388:	2319      	movs	r3, #25
    338a:	e7d6      	b.n	333a <_usb_d_dev_init+0x96>
		pad_trim = 6;
    338c:	2206      	movs	r2, #6
    338e:	e7d8      	b.n	3342 <_usb_d_dev_init+0x9e>
    3390:	20000700 	.word	0x20000700
    3394:	00002a31 	.word	0x00002a31
    3398:	00002c75 	.word	0x00002c75
    339c:	00800084 	.word	0x00800084

000033a0 <_usb_d_dev_enable>:
	tmp = ((Usb *)hw)->HOST.SYNCBUSY.reg;
    33a0:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    33a4:	789b      	ldrb	r3, [r3, #2]
	if (hri_usbdevice_get_SYNCBUSY_reg(hw, (USB_SYNCBUSY_ENABLE | USB_SYNCBUSY_SWRST))) {
    33a6:	f013 0f03 	tst.w	r3, #3
    33aa:	d129      	bne.n	3400 <_usb_d_dev_enable+0x60>
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    33ac:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    33b0:	7893      	ldrb	r3, [r2, #2]
    33b2:	f013 0f03 	tst.w	r3, #3
    33b6:	d1fb      	bne.n	33b0 <_usb_d_dev_enable+0x10>
	return ((Usb *)hw)->HOST.CTRLA.reg;
    33b8:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    33bc:	781b      	ldrb	r3, [r3, #0]
    33be:	b2db      	uxtb	r3, r3
	if ((ctrla & USB_CTRLA_ENABLE) == 0) {
    33c0:	f013 0f02 	tst.w	r3, #2
    33c4:	d108      	bne.n	33d8 <_usb_d_dev_enable+0x38>
		hri_usbdevice_write_CTRLA_reg(hw, ctrla | USB_CTRLA_ENABLE);
    33c6:	f043 0302 	orr.w	r3, r3, #2
	((Usb *)hw)->HOST.CTRLA.reg = data;
    33ca:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    33ce:	7013      	strb	r3, [r2, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    33d0:	7893      	ldrb	r3, [r2, #2]
    33d2:	f013 0f03 	tst.w	r3, #3
    33d6:	d1fb      	bne.n	33d0 <_usb_d_dev_enable+0x30>
    33d8:	4b0b      	ldr	r3, [pc, #44]	; (3408 <_usb_d_dev_enable+0x68>)
    33da:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    33de:	609a      	str	r2, [r3, #8]
    33e0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    33e4:	609a      	str	r2, [r3, #8]
    33e6:	f44f 2280 	mov.w	r2, #262144	; 0x40000
    33ea:	609a      	str	r2, [r3, #8]
    33ec:	f44f 2200 	mov.w	r2, #524288	; 0x80000
    33f0:	609a      	str	r2, [r3, #8]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    33f2:	f240 228d 	movw	r2, #653	; 0x28d
    33f6:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    33fa:	831a      	strh	r2, [r3, #24]
	return ERR_NONE;
    33fc:	2000      	movs	r0, #0
    33fe:	4770      	bx	lr
		return -USB_ERR_DENIED;
    3400:	f06f 0010 	mvn.w	r0, #16
}
    3404:	4770      	bx	lr
    3406:	bf00      	nop
    3408:	e000e100 	.word	0xe000e100

0000340c <_usb_d_dev_attach>:
	((Usb *)hw)->DEVICE.CTRLB.reg &= ~USB_DEVICE_CTRLB_DETACH;
    340c:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    3410:	8913      	ldrh	r3, [r2, #8]
    3412:	f023 0301 	bic.w	r3, r3, #1
    3416:	041b      	lsls	r3, r3, #16
    3418:	0c1b      	lsrs	r3, r3, #16
    341a:	8113      	strh	r3, [r2, #8]
    341c:	4770      	bx	lr

0000341e <_usb_d_dev_set_address>:
	hri_usbdevice_write_DADD_reg(USB, USB_DEVICE_DADD_ADDEN | USB_DEVICE_DADD_DADD(addr));
    341e:	f040 0080 	orr.w	r0, r0, #128	; 0x80
	((Usb *)hw)->DEVICE.DADD.reg = data;
    3422:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    3426:	7298      	strb	r0, [r3, #10]
    3428:	4770      	bx	lr
	...

0000342c <_usb_d_dev_ep_init>:
{
    342c:	b5f0      	push	{r4, r5, r6, r7, lr}
    342e:	fa4f fe80 	sxtb.w	lr, r0
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    3432:	f010 050f 	ands.w	r5, r0, #15
    3436:	d04d      	beq.n	34d4 <_usb_d_dev_ep_init+0xa8>
    3438:	f1be 0f00 	cmp.w	lr, #0
    343c:	bfb4      	ite	lt
    343e:	1cac      	addlt	r4, r5, #2
    3440:	462c      	movge	r4, r5
	uint8_t                        ep_type = attr & USB_EP_XTYPE_MASK;
    3442:	f001 0103 	and.w	r1, r1, #3
	const struct _usb_ep_cfg_item *pcfg    = &_usb_ep_cfgs[epn];
    3446:	462b      	mov	r3, r5
	if (epn > CONF_USB_D_MAX_EP_N) {
    3448:	2d02      	cmp	r5, #2
    344a:	d947      	bls.n	34dc <_usb_d_dev_ep_init+0xb0>
		return -USB_ERR_PARAM;
    344c:	f06f 0011 	mvn.w	r0, #17
    3450:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    3452:	f1be 0f00 	cmp.w	lr, #0
    3456:	db1b      	blt.n	3490 <_usb_d_dev_ep_init+0x64>
    3458:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    345c:	4e37      	ldr	r6, [pc, #220]	; (353c <_usb_d_dev_ep_init+0x110>)
    345e:	f856 5025 	ldr.w	r5, [r6, r5, lsl #2]
    3462:	2d00      	cmp	r5, #0
    3464:	d15e      	bne.n	3524 <_usb_d_dev_ep_init+0xf8>
	ept->cache    = (uint8_t *)(dir ? pcfg->i_cache : pcfg->cache);
    3466:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    346a:	4d34      	ldr	r5, [pc, #208]	; (353c <_usb_d_dev_ep_init+0x110>)
    346c:	f855 7023 	ldr.w	r7, [r5, r3, lsl #2]
    3470:	4d33      	ldr	r5, [pc, #204]	; (3540 <_usb_d_dev_ep_init+0x114>)
    3472:	00a6      	lsls	r6, r4, #2
    3474:	1933      	adds	r3, r6, r4
    3476:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    347a:	f8c3 7080 	str.w	r7, [r3, #128]	; 0x80
	ept->size     = max_pkt_siz;
    347e:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
	ept->flags.u8 = (ep_type + 1);
    3482:	3101      	adds	r1, #1
    3484:	f883 1087 	strb.w	r1, [r3, #135]	; 0x87
	ept->ep       = ep;
    3488:	f883 0086 	strb.w	r0, [r3, #134]	; 0x86
	return USB_OK;
    348c:	2000      	movs	r0, #0
    348e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    3490:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    3494:	4e29      	ldr	r6, [pc, #164]	; (353c <_usb_d_dev_ep_init+0x110>)
    3496:	eb06 0585 	add.w	r5, r6, r5, lsl #2
    349a:	686d      	ldr	r5, [r5, #4]
    349c:	b935      	cbnz	r5, 34ac <_usb_d_dev_ep_init+0x80>
	ept->cache    = (uint8_t *)(dir ? pcfg->i_cache : pcfg->cache);
    349e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    34a2:	4d26      	ldr	r5, [pc, #152]	; (353c <_usb_d_dev_ep_init+0x110>)
    34a4:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    34a8:	685f      	ldr	r7, [r3, #4]
    34aa:	e7e1      	b.n	3470 <_usb_d_dev_ep_init+0x44>
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    34ac:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    34b0:	4e22      	ldr	r6, [pc, #136]	; (353c <_usb_d_dev_ep_init+0x110>)
    34b2:	eb06 0585 	add.w	r5, r6, r5, lsl #2
    34b6:	896d      	ldrh	r5, [r5, #10]
    34b8:	4295      	cmp	r5, r2
    34ba:	daf0      	bge.n	349e <_usb_d_dev_ep_init+0x72>
		return -USB_ERR_FUNC;
    34bc:	f06f 0012 	mvn.w	r0, #18
    34c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -USB_ERR_REDO;
    34c2:	f06f 0013 	mvn.w	r0, #19
    34c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return -USB_ERR_REDO;
    34c8:	f06f 0013 	mvn.w	r0, #19
    34cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return -USB_ERR_FUNC;
    34ce:	f06f 0012 	mvn.w	r0, #18
    34d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint8_t                        ep_type = attr & USB_EP_XTYPE_MASK;
    34d4:	f001 0103 	and.w	r1, r1, #3
	return &dev_inst.ep[ep_index];
    34d8:	2400      	movs	r4, #0
	const struct _usb_ep_cfg_item *pcfg    = &_usb_ep_cfgs[epn];
    34da:	4623      	mov	r3, r4
	if (ept->ep != 0xFF) {
    34dc:	eb04 0684 	add.w	r6, r4, r4, lsl #2
    34e0:	4f17      	ldr	r7, [pc, #92]	; (3540 <_usb_d_dev_ep_init+0x114>)
    34e2:	eb07 0686 	add.w	r6, r7, r6, lsl #2
    34e6:	f896 6086 	ldrb.w	r6, [r6, #134]	; 0x86
    34ea:	2eff      	cmp	r6, #255	; 0xff
    34ec:	d1e9      	bne.n	34c2 <_usb_d_dev_ep_init+0x96>
	if (ep_type == USB_EP_XTYPE_CTRL) {
    34ee:	2900      	cmp	r1, #0
    34f0:	d1af      	bne.n	3452 <_usb_d_dev_ep_init+0x26>
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    34f2:	b125      	cbz	r5, 34fe <_usb_d_dev_ep_init+0xd2>
    34f4:	f1be 0f00 	cmp.w	lr, #0
    34f8:	bfa4      	itt	ge
    34fa:	3502      	addge	r5, #2
    34fc:	b2ed      	uxtbge	r5, r5
		if (ept_in->ep != 0xFF) {
    34fe:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    3502:	4e0f      	ldr	r6, [pc, #60]	; (3540 <_usb_d_dev_ep_init+0x114>)
    3504:	eb06 0585 	add.w	r5, r6, r5, lsl #2
    3508:	f895 5086 	ldrb.w	r5, [r5, #134]	; 0x86
    350c:	2dff      	cmp	r5, #255	; 0xff
    350e:	d1db      	bne.n	34c8 <_usb_d_dev_ep_init+0x9c>
		if (pcfg->cache == NULL) {
    3510:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    3514:	4e09      	ldr	r6, [pc, #36]	; (353c <_usb_d_dev_ep_init+0x110>)
    3516:	f856 5025 	ldr.w	r5, [r6, r5, lsl #2]
    351a:	2d00      	cmp	r5, #0
    351c:	d0d7      	beq.n	34ce <_usb_d_dev_ep_init+0xa2>
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    351e:	f1be 0f00 	cmp.w	lr, #0
    3522:	dbb5      	blt.n	3490 <_usb_d_dev_ep_init+0x64>
    3524:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    3528:	4e04      	ldr	r6, [pc, #16]	; (353c <_usb_d_dev_ep_init+0x110>)
    352a:	eb06 0585 	add.w	r5, r6, r5, lsl #2
    352e:	892d      	ldrh	r5, [r5, #8]
    3530:	4295      	cmp	r5, r2
    3532:	da98      	bge.n	3466 <_usb_d_dev_ep_init+0x3a>
		return -USB_ERR_FUNC;
    3534:	f06f 0012 	mvn.w	r0, #18
    3538:	bdf0      	pop	{r4, r5, r6, r7, pc}
    353a:	bf00      	nop
    353c:	00005264 	.word	0x00005264
    3540:	20000700 	.word	0x20000700

00003544 <_usb_d_dev_ep_deinit>:
{
    3544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3546:	b247      	sxtb	r7, r0
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    3548:	f010 060f 	ands.w	r6, r0, #15
    354c:	d00e      	beq.n	356c <_usb_d_dev_ep_deinit+0x28>
    354e:	2f00      	cmp	r7, #0
    3550:	bfb4      	ite	lt
    3552:	1cb3      	addlt	r3, r6, #2
    3554:	4633      	movge	r3, r6
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    3556:	2e02      	cmp	r6, #2
    3558:	d900      	bls.n	355c <_usb_d_dev_ep_deinit+0x18>
    355a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return &dev_inst.ep[ep_index];
    355c:	461d      	mov	r5, r3
    355e:	3301      	adds	r3, #1
    3560:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    3564:	4a24      	ldr	r2, [pc, #144]	; (35f8 <_usb_d_dev_ep_deinit+0xb4>)
    3566:	eb02 0e83 	add.w	lr, r2, r3, lsl #2
    356a:	e002      	b.n	3572 <_usb_d_dev_ep_deinit+0x2e>
    356c:	f8df e094 	ldr.w	lr, [pc, #148]	; 3604 <_usb_d_dev_ep_deinit+0xc0>
    3570:	2500      	movs	r5, #0
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    3572:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    3576:	4a21      	ldr	r2, [pc, #132]	; (35fc <_usb_d_dev_ep_deinit+0xb8>)
    3578:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    357c:	f893 2086 	ldrb.w	r2, [r3, #134]	; 0x86
    3580:	2aff      	cmp	r2, #255	; 0xff
    3582:	d0ea      	beq.n	355a <_usb_d_dev_ep_deinit+0x16>
    3584:	4604      	mov	r4, r0
	_usb_d_dev_trans_stop(ept, dir, USB_TRANS_RESET);
    3586:	2203      	movs	r2, #3
    3588:	0ff9      	lsrs	r1, r7, #31
    358a:	4670      	mov	r0, lr
    358c:	4b1c      	ldr	r3, [pc, #112]	; (3600 <_usb_d_dev_ep_deinit+0xbc>)
    358e:	4798      	blx	r3
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    3590:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    3594:	4a19      	ldr	r2, [pc, #100]	; (35fc <_usb_d_dev_ep_deinit+0xb8>)
    3596:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    359a:	f893 3087 	ldrb.w	r3, [r3, #135]	; 0x87
    359e:	f003 0307 	and.w	r3, r3, #7
    35a2:	2b01      	cmp	r3, #1
    35a4:	d016      	beq.n	35d4 <_usb_d_dev_ep_deinit+0x90>
	} else if (USB_EP_GET_DIR(ep)) {
    35a6:	2f00      	cmp	r7, #0
    35a8:	db1b      	blt.n	35e2 <_usb_d_dev_ep_deinit+0x9e>
    35aa:	0160      	lsls	r0, r4, #5
    35ac:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE0_Msk;
    35b0:	f890 3100 	ldrb.w	r3, [r0, #256]	; 0x100
    35b4:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
    35b8:	f880 3100 	strb.w	r3, [r0, #256]	; 0x100
	ept->flags.u8 = 0;
    35bc:	4b0f      	ldr	r3, [pc, #60]	; (35fc <_usb_d_dev_ep_deinit+0xb8>)
    35be:	00aa      	lsls	r2, r5, #2
    35c0:	1951      	adds	r1, r2, r5
    35c2:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    35c6:	2000      	movs	r0, #0
    35c8:	f881 0087 	strb.w	r0, [r1, #135]	; 0x87
	ept->ep       = 0xFF;
    35cc:	22ff      	movs	r2, #255	; 0xff
    35ce:	f881 2086 	strb.w	r2, [r1, #134]	; 0x86
    35d2:	e7c2      	b.n	355a <_usb_d_dev_ep_deinit+0x16>
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg = 0;
    35d4:	0160      	lsls	r0, r4, #5
    35d6:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
    35da:	2300      	movs	r3, #0
    35dc:	f880 3100 	strb.w	r3, [r0, #256]	; 0x100
    35e0:	e7ec      	b.n	35bc <_usb_d_dev_ep_deinit+0x78>
    35e2:	0176      	lsls	r6, r6, #5
    35e4:	f106 4682 	add.w	r6, r6, #1090519040	; 0x41000000
		hw->DEVICE.DeviceEndpoint[USB_EP_GET_N(ep)].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE1_Msk;
    35e8:	f896 3100 	ldrb.w	r3, [r6, #256]	; 0x100
    35ec:	f003 038f 	and.w	r3, r3, #143	; 0x8f
    35f0:	f886 3100 	strb.w	r3, [r6, #256]	; 0x100
    35f4:	e7e2      	b.n	35bc <_usb_d_dev_ep_deinit+0x78>
    35f6:	bf00      	nop
    35f8:	20000760 	.word	0x20000760
    35fc:	20000700 	.word	0x20000700
    3600:	00002b09 	.word	0x00002b09
    3604:	20000774 	.word	0x20000774

00003608 <_usb_d_dev_ep_enable>:
{
    3608:	b5f0      	push	{r4, r5, r6, r7, lr}
    360a:	b247      	sxtb	r7, r0
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    360c:	f010 000f 	ands.w	r0, r0, #15
    3610:	f000 80a6 	beq.w	3760 <_usb_d_dev_ep_enable+0x158>
    3614:	2f00      	cmp	r7, #0
    3616:	bfb4      	ite	lt
    3618:	1c83      	addlt	r3, r0, #2
    361a:	4603      	movge	r3, r0
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    361c:	4606      	mov	r6, r0
    361e:	0142      	lsls	r2, r0, #5
    3620:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    3624:	f892 4100 	ldrb.w	r4, [r2, #256]	; 0x100
    3628:	b2e4      	uxtb	r4, r4
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    362a:	2802      	cmp	r0, #2
    362c:	f240 809f 	bls.w	376e <_usb_d_dev_ep_enable+0x166>
		return -USB_ERR_PARAM;
    3630:	f06f 0011 	mvn.w	r0, #17
    3634:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (epcfg & (USB_DEVICE_EPCFG_EPTYPE1_Msk | USB_DEVICE_EPCFG_EPTYPE0_Msk)) {
    3636:	f014 0f77 	tst.w	r4, #119	; 0x77
    363a:	f040 8088 	bne.w	374e <_usb_d_dev_ep_enable+0x146>
    363e:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    3642:	2111      	movs	r1, #17
    3644:	f882 1100 	strb.w	r1, [r2, #256]	; 0x100
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    3648:	4c97      	ldr	r4, [pc, #604]	; (38a8 <_usb_d_dev_ep_enable+0x2a0>)
    364a:	eb04 018e 	add.w	r1, r4, lr, lsl #2
    364e:	f8b1 4084 	ldrh.w	r4, [r1, #132]	; 0x84
    3652:	4996      	ldr	r1, [pc, #600]	; (38ac <_usb_d_dev_ep_enable+0x2a4>)
    3654:	ea01 3184 	and.w	r1, r1, r4, lsl #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    3658:	f5b4 7f00 	cmp.w	r4, #512	; 0x200
    365c:	f200 80cc 	bhi.w	37f8 <_usb_d_dev_ep_enable+0x1f0>
    3660:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
    3664:	f200 810a 	bhi.w	387c <_usb_d_dev_ep_enable+0x274>
    3668:	2c80      	cmp	r4, #128	; 0x80
    366a:	f200 80f9 	bhi.w	3860 <_usb_d_dev_ep_enable+0x258>
    366e:	2c40      	cmp	r4, #64	; 0x40
    3670:	f200 810b 	bhi.w	388a <_usb_d_dev_ep_enable+0x282>
    3674:	2c20      	cmp	r4, #32
    3676:	f200 80fa 	bhi.w	386e <_usb_d_dev_ep_enable+0x266>
    367a:	2c10      	cmp	r4, #16
    367c:	f200 810c 	bhi.w	3898 <_usb_d_dev_ep_enable+0x290>
    3680:	2c08      	cmp	r4, #8
    3682:	bf94      	ite	ls
    3684:	2700      	movls	r7, #0
    3686:	2701      	movhi	r7, #1
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    3688:	ea41 7107 	orr.w	r1, r1, r7, lsl #28
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    368c:	6041      	str	r1, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    368e:	f3c4 010d 	ubfx	r1, r4, #0, #14
    3692:	e0b7      	b.n	3804 <_usb_d_dev_ep_enable+0x1fc>
		if (epcfg & USB_DEVICE_EPCFG_EPTYPE1_Msk) {
    3694:	f014 0f70 	tst.w	r4, #112	; 0x70
    3698:	d15c      	bne.n	3754 <_usb_d_dev_ep_enable+0x14c>
		epcfg |= USB_DEVICE_EPCFG_EPTYPE1(ept->flags.bits.eptype);
    369a:	4d83      	ldr	r5, [pc, #524]	; (38a8 <_usb_d_dev_ep_enable+0x2a0>)
    369c:	009f      	lsls	r7, r3, #2
    369e:	18f9      	adds	r1, r7, r3
    36a0:	eb05 0181 	add.w	r1, r5, r1, lsl #2
    36a4:	f891 1087 	ldrb.w	r1, [r1, #135]	; 0x87
    36a8:	0109      	lsls	r1, r1, #4
    36aa:	f001 0170 	and.w	r1, r1, #112	; 0x70
    36ae:	430c      	orrs	r4, r1
    36b0:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    36b4:	f882 4100 	strb.w	r4, [r2, #256]	; 0x100
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    36b8:	443b      	add	r3, r7
    36ba:	eb05 0583 	add.w	r5, r5, r3, lsl #2
    36be:	f8b5 3084 	ldrh.w	r3, [r5, #132]	; 0x84
    36c2:	f3c3 010d 	ubfx	r1, r3, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    36c6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    36ca:	d80f      	bhi.n	36ec <_usb_d_dev_ep_enable+0xe4>
    36cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    36d0:	d819      	bhi.n	3706 <_usb_d_dev_ep_enable+0xfe>
    36d2:	2b80      	cmp	r3, #128	; 0x80
    36d4:	d819      	bhi.n	370a <_usb_d_dev_ep_enable+0x102>
    36d6:	2b40      	cmp	r3, #64	; 0x40
    36d8:	d819      	bhi.n	370e <_usb_d_dev_ep_enable+0x106>
    36da:	2b20      	cmp	r3, #32
    36dc:	d819      	bhi.n	3712 <_usb_d_dev_ep_enable+0x10a>
    36de:	2b10      	cmp	r3, #16
    36e0:	d819      	bhi.n	3716 <_usb_d_dev_ep_enable+0x10e>
    36e2:	2b08      	cmp	r3, #8
    36e4:	bf94      	ite	ls
    36e6:	2300      	movls	r3, #0
    36e8:	2301      	movhi	r3, #1
    36ea:	e000      	b.n	36ee <_usb_d_dev_ep_enable+0xe6>
    36ec:	2307      	movs	r3, #7
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    36ee:	ea41 7303 	orr.w	r3, r1, r3, lsl #28
    36f2:	6143      	str	r3, [r0, #20]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    36f4:	2380      	movs	r3, #128	; 0x80
    36f6:	f882 3104 	strb.w	r3, [r2, #260]	; 0x104
	bank->STATUS_BK.reg     = 0;
    36fa:	4b6b      	ldr	r3, [pc, #428]	; (38a8 <_usb_d_dev_ep_enable+0x2a0>)
    36fc:	eb03 1646 	add.w	r6, r3, r6, lsl #5
    3700:	2000      	movs	r0, #0
    3702:	76b0      	strb	r0, [r6, #26]
    3704:	bdf0      	pop	{r4, r5, r6, r7, pc}
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    3706:	2306      	movs	r3, #6
    3708:	e7f1      	b.n	36ee <_usb_d_dev_ep_enable+0xe6>
    370a:	2305      	movs	r3, #5
    370c:	e7ef      	b.n	36ee <_usb_d_dev_ep_enable+0xe6>
    370e:	2304      	movs	r3, #4
    3710:	e7ed      	b.n	36ee <_usb_d_dev_ep_enable+0xe6>
    3712:	2303      	movs	r3, #3
    3714:	e7eb      	b.n	36ee <_usb_d_dev_ep_enable+0xe6>
    3716:	2302      	movs	r3, #2
    3718:	e7e9      	b.n	36ee <_usb_d_dev_ep_enable+0xe6>
    371a:	2107      	movs	r1, #7
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    371c:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    3720:	6043      	str	r3, [r0, #4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    3722:	2340      	movs	r3, #64	; 0x40
    3724:	f882 3105 	strb.w	r3, [r2, #261]	; 0x105
	bank->STATUS_BK.reg     = 0;
    3728:	4b5f      	ldr	r3, [pc, #380]	; (38a8 <_usb_d_dev_ep_enable+0x2a0>)
    372a:	eb03 1646 	add.w	r6, r3, r6, lsl #5
    372e:	2000      	movs	r0, #0
    3730:	72b0      	strb	r0, [r6, #10]
    3732:	bdf0      	pop	{r4, r5, r6, r7, pc}
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    3734:	2106      	movs	r1, #6
    3736:	e7f1      	b.n	371c <_usb_d_dev_ep_enable+0x114>
    3738:	2105      	movs	r1, #5
    373a:	e7ef      	b.n	371c <_usb_d_dev_ep_enable+0x114>
    373c:	2104      	movs	r1, #4
    373e:	e7ed      	b.n	371c <_usb_d_dev_ep_enable+0x114>
    3740:	2103      	movs	r1, #3
    3742:	e7eb      	b.n	371c <_usb_d_dev_ep_enable+0x114>
    3744:	2102      	movs	r1, #2
    3746:	e7e9      	b.n	371c <_usb_d_dev_ep_enable+0x114>
		return -USB_ERR_PARAM;
    3748:	f06f 0011 	mvn.w	r0, #17
    374c:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return -USB_ERR_REDO;
    374e:	f06f 0013 	mvn.w	r0, #19
    3752:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return -USB_ERR_REDO;
    3754:	f06f 0013 	mvn.w	r0, #19
    3758:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return -USB_ERR_REDO;
    375a:	f06f 0013 	mvn.w	r0, #19
    375e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    3760:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    3764:	f893 4100 	ldrb.w	r4, [r3, #256]	; 0x100
    3768:	b2e4      	uxtb	r4, r4
    376a:	2600      	movs	r6, #0
	return &dev_inst.ep[ep_index];
    376c:	4633      	mov	r3, r6
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    376e:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    3772:	494d      	ldr	r1, [pc, #308]	; (38a8 <_usb_d_dev_ep_enable+0x2a0>)
    3774:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    3778:	f892 5086 	ldrb.w	r5, [r2, #134]	; 0x86
    377c:	2dff      	cmp	r5, #255	; 0xff
    377e:	d0e3      	beq.n	3748 <_usb_d_dev_ep_enable+0x140>
    3780:	0172      	lsls	r2, r6, #5
	bank = prvt_inst.desc_table[epn].DeviceDescBank;
    3782:	1888      	adds	r0, r1, r2
	if (ept->flags.bits.eptype == USB_D_EPTYPE_CTRL) {
    3784:	eb03 0e83 	add.w	lr, r3, r3, lsl #2
    3788:	eb01 018e 	add.w	r1, r1, lr, lsl #2
    378c:	f891 1087 	ldrb.w	r1, [r1, #135]	; 0x87
    3790:	f001 0107 	and.w	r1, r1, #7
    3794:	2901      	cmp	r1, #1
    3796:	f43f af4e 	beq.w	3636 <_usb_d_dev_ep_enable+0x2e>
	} else if (dir) {
    379a:	2f00      	cmp	r7, #0
    379c:	f6ff af7a 	blt.w	3694 <_usb_d_dev_ep_enable+0x8c>
		if (epcfg & USB_DEVICE_EPCFG_EPTYPE0_Msk) {
    37a0:	f014 0f07 	tst.w	r4, #7
    37a4:	d1d9      	bne.n	375a <_usb_d_dev_ep_enable+0x152>
		epcfg |= USB_DEVICE_EPCFG_EPTYPE0(ept->flags.bits.eptype);
    37a6:	4d40      	ldr	r5, [pc, #256]	; (38a8 <_usb_d_dev_ep_enable+0x2a0>)
    37a8:	009f      	lsls	r7, r3, #2
    37aa:	18f9      	adds	r1, r7, r3
    37ac:	eb05 0181 	add.w	r1, r5, r1, lsl #2
    37b0:	f891 1087 	ldrb.w	r1, [r1, #135]	; 0x87
    37b4:	f001 0107 	and.w	r1, r1, #7
    37b8:	430c      	orrs	r4, r1
    37ba:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    37be:	f882 4100 	strb.w	r4, [r2, #256]	; 0x100
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    37c2:	443b      	add	r3, r7
    37c4:	eb05 0583 	add.w	r5, r5, r3, lsl #2
    37c8:	f8b5 1084 	ldrh.w	r1, [r5, #132]	; 0x84
    37cc:	4b37      	ldr	r3, [pc, #220]	; (38ac <_usb_d_dev_ep_enable+0x2a4>)
    37ce:	ea03 3381 	and.w	r3, r3, r1, lsl #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    37d2:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    37d6:	d8a0      	bhi.n	371a <_usb_d_dev_ep_enable+0x112>
    37d8:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
    37dc:	d8aa      	bhi.n	3734 <_usb_d_dev_ep_enable+0x12c>
    37de:	2980      	cmp	r1, #128	; 0x80
    37e0:	d8aa      	bhi.n	3738 <_usb_d_dev_ep_enable+0x130>
    37e2:	2940      	cmp	r1, #64	; 0x40
    37e4:	d8aa      	bhi.n	373c <_usb_d_dev_ep_enable+0x134>
    37e6:	2920      	cmp	r1, #32
    37e8:	d8aa      	bhi.n	3740 <_usb_d_dev_ep_enable+0x138>
    37ea:	2910      	cmp	r1, #16
    37ec:	d8aa      	bhi.n	3744 <_usb_d_dev_ep_enable+0x13c>
    37ee:	2908      	cmp	r1, #8
    37f0:	bf94      	ite	ls
    37f2:	2100      	movls	r1, #0
    37f4:	2101      	movhi	r1, #1
    37f6:	e791      	b.n	371c <_usb_d_dev_ep_enable+0x114>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    37f8:	f041 41e0 	orr.w	r1, r1, #1879048192	; 0x70000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    37fc:	6041      	str	r1, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    37fe:	f3c4 010d 	ubfx	r1, r4, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    3802:	2707      	movs	r7, #7
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    3804:	ea41 7107 	orr.w	r1, r1, r7, lsl #28
    3808:	6141      	str	r1, [r0, #20]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    380a:	2140      	movs	r1, #64	; 0x40
    380c:	f882 1105 	strb.w	r1, [r2, #261]	; 0x105
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    3810:	2080      	movs	r0, #128	; 0x80
    3812:	f882 0104 	strb.w	r0, [r2, #260]	; 0x104
	bank->STATUS_BK.reg     = 0;
    3816:	4a24      	ldr	r2, [pc, #144]	; (38a8 <_usb_d_dev_ep_enable+0x2a0>)
    3818:	eb02 1646 	add.w	r6, r2, r6, lsl #5
    381c:	2000      	movs	r0, #0
    381e:	72b0      	strb	r0, [r6, #10]
    3820:	76b0      	strb	r0, [r6, #26]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    3822:	f005 050f 	and.w	r5, r5, #15
	_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    3826:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    382a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    382e:	f8d3 6080 	ldr.w	r6, [r3, #128]	; 0x80
	bank->ADDR.reg          = addr;
    3832:	016d      	lsls	r5, r5, #5
    3834:	1953      	adds	r3, r2, r5
    3836:	5156      	str	r6, [r2, r5]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    3838:	685a      	ldr	r2, [r3, #4]
    383a:	f364 329b 	bfi	r2, r4, #14, #14
    383e:	605a      	str	r2, [r3, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    3840:	685a      	ldr	r2, [r3, #4]
    3842:	f360 020d 	bfi	r2, r0, #0, #14
    3846:	605a      	str	r2, [r3, #4]
    3848:	f105 4382 	add.w	r3, r5, #1090519040	; 0x41000000
    384c:	22b0      	movs	r2, #176	; 0xb0
    384e:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    3852:	f883 1105 	strb.w	r1, [r3, #261]	; 0x105
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    3856:	461d      	mov	r5, r3
    3858:	2310      	movs	r3, #16
    385a:	f885 3109 	strb.w	r3, [r5, #265]	; 0x109
    385e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    3860:	f041 41a0 	orr.w	r1, r1, #1342177280	; 0x50000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    3864:	6041      	str	r1, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    3866:	f3c4 010d 	ubfx	r1, r4, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    386a:	2705      	movs	r7, #5
    386c:	e7ca      	b.n	3804 <_usb_d_dev_ep_enable+0x1fc>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    386e:	f041 5140 	orr.w	r1, r1, #805306368	; 0x30000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    3872:	6041      	str	r1, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    3874:	f3c4 010d 	ubfx	r1, r4, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    3878:	2703      	movs	r7, #3
    387a:	e7c3      	b.n	3804 <_usb_d_dev_ep_enable+0x1fc>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    387c:	f041 41c0 	orr.w	r1, r1, #1610612736	; 0x60000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    3880:	6041      	str	r1, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    3882:	f3c4 010d 	ubfx	r1, r4, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    3886:	2706      	movs	r7, #6
    3888:	e7bc      	b.n	3804 <_usb_d_dev_ep_enable+0x1fc>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    388a:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    388e:	6041      	str	r1, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    3890:	f3c4 010d 	ubfx	r1, r4, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    3894:	2704      	movs	r7, #4
    3896:	e7b5      	b.n	3804 <_usb_d_dev_ep_enable+0x1fc>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    3898:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    389c:	6041      	str	r1, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    389e:	f3c4 010d 	ubfx	r1, r4, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    38a2:	2702      	movs	r7, #2
    38a4:	e7ae      	b.n	3804 <_usb_d_dev_ep_enable+0x1fc>
    38a6:	bf00      	nop
    38a8:	20000700 	.word	0x20000700
    38ac:	0fffc000 	.word	0x0fffc000

000038b0 <_usb_d_dev_ep_stall>:
{
    38b0:	b470      	push	{r4, r5, r6}
    38b2:	b243      	sxtb	r3, r0
	bool                  dir = USB_EP_GET_DIR(ep);
    38b4:	0fdc      	lsrs	r4, r3, #31
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    38b6:	f010 000f 	ands.w	r0, r0, #15
    38ba:	d008      	beq.n	38ce <_usb_d_dev_ep_stall+0x1e>
    38bc:	2b00      	cmp	r3, #0
    38be:	bfb4      	ite	lt
    38c0:	1c83      	addlt	r3, r0, #2
    38c2:	4603      	movge	r3, r0
	if (epn > CONF_USB_D_MAX_EP_N) {
    38c4:	2802      	cmp	r0, #2
    38c6:	d903      	bls.n	38d0 <_usb_d_dev_ep_stall+0x20>
		return -USB_ERR_PARAM;
    38c8:	f06f 0011 	mvn.w	r0, #17
    38cc:	e018      	b.n	3900 <_usb_d_dev_ep_stall+0x50>
	return &dev_inst.ep[ep_index];
    38ce:	2300      	movs	r3, #0
	if (USB_EP_STALL_SET == ctrl) {
    38d0:	2901      	cmp	r1, #1
    38d2:	d017      	beq.n	3904 <_usb_d_dev_ep_stall+0x54>
	} else if (USB_EP_STALL_CLR == ctrl) {
    38d4:	2900      	cmp	r1, #0
    38d6:	d03a      	beq.n	394e <_usb_d_dev_ep_stall+0x9e>
	uint8_t epn = USB_EP_GET_N(ept->ep);
    38d8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    38dc:	4a45      	ldr	r2, [pc, #276]	; (39f4 <_usb_d_dev_ep_stall+0x144>)
    38de:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    38e2:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    38e6:	f003 030f 	and.w	r3, r3, #15
    38ea:	015b      	lsls	r3, r3, #5
    38ec:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    38f0:	f893 2106 	ldrb.w	r2, [r3, #262]	; 0x106
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    38f4:	2310      	movs	r3, #16
    38f6:	40a3      	lsls	r3, r4
    38f8:	421a      	tst	r2, r3
    38fa:	bf14      	ite	ne
    38fc:	2001      	movne	r0, #1
    38fe:	2000      	moveq	r0, #0
}
    3900:	bc70      	pop	{r4, r5, r6}
    3902:	4770      	bx	lr
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    3904:	2510      	movs	r5, #16
    3906:	40a5      	lsls	r5, r4
    3908:	b2ed      	uxtb	r5, r5
	uint8_t epn = USB_EP_GET_N(ept->ep);
    390a:	493a      	ldr	r1, [pc, #232]	; (39f4 <_usb_d_dev_ep_stall+0x144>)
    390c:	009e      	lsls	r6, r3, #2
    390e:	18f2      	adds	r2, r6, r3
    3910:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    3914:	f892 2086 	ldrb.w	r2, [r2, #134]	; 0x86
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    3918:	f002 020f 	and.w	r2, r2, #15
    391c:	0150      	lsls	r0, r2, #5
    391e:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
    3922:	f880 5105 	strb.w	r5, [r0, #261]	; 0x105
	_usbd_ep_int_en(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    3926:	2020      	movs	r0, #32
    3928:	fa00 f404 	lsl.w	r4, r0, r4
	hri_usbendpoint_set_EPINTEN_reg(USB, epn, flags);
    392c:	b2e4      	uxtb	r4, r4
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    392e:	0152      	lsls	r2, r2, #5
    3930:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    3934:	f882 4109 	strb.w	r4, [r2, #265]	; 0x109
	ept->flags.bits.is_stalled = 1;
    3938:	4433      	add	r3, r6
    393a:	eb01 0383 	add.w	r3, r1, r3, lsl #2
    393e:	f893 2087 	ldrb.w	r2, [r3, #135]	; 0x87
    3942:	f042 0208 	orr.w	r2, r2, #8
    3946:	f883 2087 	strb.w	r2, [r3, #135]	; 0x87
		rc = _usb_d_dev_ep_stall_set(ept, dir);
    394a:	2000      	movs	r0, #0
    394c:	e7d8      	b.n	3900 <_usb_d_dev_ep_stall+0x50>
	uint8_t epn        = USB_EP_GET_N(ept->ep);
    394e:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    3952:	4928      	ldr	r1, [pc, #160]	; (39f4 <_usb_d_dev_ep_stall+0x144>)
    3954:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    3958:	f892 2086 	ldrb.w	r2, [r2, #134]	; 0x86
    395c:	f002 020f 	and.w	r2, r2, #15
    3960:	0151      	lsls	r1, r2, #5
    3962:	f101 4182 	add.w	r1, r1, #1090519040	; 0x41000000
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    3966:	f891 5106 	ldrb.w	r5, [r1, #262]	; 0x106
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    396a:	2010      	movs	r0, #16
    396c:	40a0      	lsls	r0, r4
	if (!is_stalled) {
    396e:	4205      	tst	r5, r0
    3970:	d03c      	beq.n	39ec <_usb_d_dev_ep_stall+0x13c>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    3972:	b2c0      	uxtb	r0, r0
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    3974:	f881 0104 	strb.w	r0, [r1, #260]	; 0x104
	_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    3978:	2020      	movs	r0, #32
    397a:	40a0      	lsls	r0, r4
	hri_usbendpoint_clear_EPINTEN_reg(USB, epn, flags);
    397c:	b2c5      	uxtb	r5, r0
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    397e:	f881 5108 	strb.w	r5, [r1, #264]	; 0x108
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    3982:	f891 2107 	ldrb.w	r2, [r1, #263]	; 0x107
	if (_usbd_ep_is_stall_sent(epn, dir)) {
    3986:	4202      	tst	r2, r0
    3988:	d007      	beq.n	399a <_usb_d_dev_ep_stall+0xea>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    398a:	f881 5107 	strb.w	r5, [r1, #263]	; 0x107
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
    398e:	2201      	movs	r2, #1
    3990:	fa02 f404 	lsl.w	r4, r2, r4
    3994:	b2e4      	uxtb	r4, r4
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    3996:	f881 4104 	strb.w	r4, [r1, #260]	; 0x104
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    399a:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    399e:	4815      	ldr	r0, [pc, #84]	; (39f4 <_usb_d_dev_ep_stall+0x144>)
    39a0:	eb00 0282 	add.w	r2, r0, r2, lsl #2
    39a4:	f892 2087 	ldrb.w	r2, [r2, #135]	; 0x87
    39a8:	f002 0207 	and.w	r2, r2, #7
    39ac:	2a01      	cmp	r2, #1
    39ae:	d00c      	beq.n	39ca <_usb_d_dev_ep_stall+0x11a>
		ept->flags.bits.is_stalled = 0;
    39b0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    39b4:	4a0f      	ldr	r2, [pc, #60]	; (39f4 <_usb_d_dev_ep_stall+0x144>)
    39b6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    39ba:	f893 2087 	ldrb.w	r2, [r3, #135]	; 0x87
    39be:	f36f 02c3 	bfc	r2, #3, #1
    39c2:	f883 2087 	strb.w	r2, [r3, #135]	; 0x87
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
    39c6:	2000      	movs	r0, #0
    39c8:	e79a      	b.n	3900 <_usb_d_dev_ep_stall+0x50>
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    39ca:	f891 2106 	ldrb.w	r2, [r1, #262]	; 0x106
		if ((hri_usbendpoint_read_EPSTATUS_reg(USB, epn) & USB_DEVICE_EPSTATUS_STALLRQ_Msk) == 0) {
    39ce:	f012 0f30 	tst.w	r2, #48	; 0x30
    39d2:	d10d      	bne.n	39f0 <_usb_d_dev_ep_stall+0x140>
			ept->flags.bits.is_stalled = 0;
    39d4:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    39d8:	eb00 0382 	add.w	r3, r0, r2, lsl #2
    39dc:	f893 2087 	ldrb.w	r2, [r3, #135]	; 0x87
    39e0:	f36f 02c3 	bfc	r2, #3, #1
    39e4:	f883 2087 	strb.w	r2, [r3, #135]	; 0x87
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
    39e8:	2000      	movs	r0, #0
    39ea:	e789      	b.n	3900 <_usb_d_dev_ep_stall+0x50>
    39ec:	2000      	movs	r0, #0
    39ee:	e787      	b.n	3900 <_usb_d_dev_ep_stall+0x50>
    39f0:	2000      	movs	r0, #0
    39f2:	e785      	b.n	3900 <_usb_d_dev_ep_stall+0x50>
    39f4:	20000700 	.word	0x20000700

000039f8 <_usb_d_dev_ep_read_req>:

int32_t _usb_d_dev_ep_read_req(const uint8_t ep, uint8_t *req_buf)
{
    39f8:	b430      	push	{r4, r5}
	uint8_t            epn   = USB_EP_GET_N(ep);
    39fa:	f000 040f 	and.w	r4, r0, #15
    39fe:	0163      	lsls	r3, r4, #5
	UsbDeviceDescBank *bank  = prvt_inst.desc_table[epn].DeviceDescBank;
    3a00:	4a14      	ldr	r2, [pc, #80]	; (3a54 <_usb_d_dev_ep_read_req+0x5c>)
    3a02:	18d0      	adds	r0, r2, r3
	uint32_t           addr  = bank[0].ADDR.reg;
    3a04:	58d5      	ldr	r5, [r2, r3]
	uint16_t           bytes = bank[0].PCKSIZE.bit.BYTE_COUNT;
    3a06:	6840      	ldr	r0, [r0, #4]
    3a08:	f3c0 000d 	ubfx	r0, r0, #0, #14

	if (epn > CONF_USB_D_MAX_EP_N || !req_buf) {
    3a0c:	2c02      	cmp	r4, #2
    3a0e:	d817      	bhi.n	3a40 <_usb_d_dev_ep_read_req+0x48>
    3a10:	b1c9      	cbz	r1, 3a46 <_usb_d_dev_ep_read_req+0x4e>
    3a12:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    3a16:	f893 2100 	ldrb.w	r2, [r3, #256]	; 0x100
    3a1a:	b2d2      	uxtb	r2, r2
		return -USB_ERR_PARAM;
	}
	if (!_usbd_ep_is_ctrl(epn)) {
    3a1c:	2a11      	cmp	r2, #17
    3a1e:	d115      	bne.n	3a4c <_usb_d_dev_ep_read_req+0x54>
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    3a20:	f893 2107 	ldrb.w	r2, [r3, #263]	; 0x107
		return -USB_ERR_FUNC;
	}
	if (!_usbd_ep_is_setup(epn)) {
    3a24:	f012 0f10 	tst.w	r2, #16
    3a28:	d102      	bne.n	3a30 <_usb_d_dev_ep_read_req+0x38>
		return ERR_NONE;
    3a2a:	2000      	movs	r0, #0
	}
	memcpy(req_buf, (void *)addr, 8);
	_usbd_ep_ack_setup(epn);

	return bytes;
}
    3a2c:	bc30      	pop	{r4, r5}
    3a2e:	4770      	bx	lr
	memcpy(req_buf, (void *)addr, 8);
    3a30:	682c      	ldr	r4, [r5, #0]
    3a32:	686a      	ldr	r2, [r5, #4]
    3a34:	600c      	str	r4, [r1, #0]
    3a36:	604a      	str	r2, [r1, #4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    3a38:	2210      	movs	r2, #16
    3a3a:	f883 2107 	strb.w	r2, [r3, #263]	; 0x107
	return bytes;
    3a3e:	e7f5      	b.n	3a2c <_usb_d_dev_ep_read_req+0x34>
		return -USB_ERR_PARAM;
    3a40:	f06f 0011 	mvn.w	r0, #17
    3a44:	e7f2      	b.n	3a2c <_usb_d_dev_ep_read_req+0x34>
    3a46:	f06f 0011 	mvn.w	r0, #17
    3a4a:	e7ef      	b.n	3a2c <_usb_d_dev_ep_read_req+0x34>
		return -USB_ERR_FUNC;
    3a4c:	f06f 0012 	mvn.w	r0, #18
    3a50:	e7ec      	b.n	3a2c <_usb_d_dev_ep_read_req+0x34>
    3a52:	bf00      	nop
    3a54:	20000700 	.word	0x20000700

00003a58 <_usb_d_dev_ep_trans>:

int32_t _usb_d_dev_ep_trans(const struct usb_d_transfer *trans)
{
    3a58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3a5c:	b083      	sub	sp, #12
	uint8_t               epn = USB_EP_GET_N(trans->ep);
    3a5e:	7a03      	ldrb	r3, [r0, #8]
    3a60:	b25e      	sxtb	r6, r3
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    3a62:	f013 030f 	ands.w	r3, r3, #15
    3a66:	f000 80c2 	beq.w	3bee <_usb_d_dev_ep_trans+0x196>
    3a6a:	2e00      	cmp	r6, #0
    3a6c:	bfb4      	ite	lt
    3a6e:	1c9a      	addlt	r2, r3, #2
    3a70:	461a      	movge	r2, r3
	return &dev_inst.ep[ep_index];
    3a72:	4614      	mov	r4, r2
    3a74:	4969      	ldr	r1, [pc, #420]	; (3c1c <_usb_d_dev_ep_trans+0x1c4>)
    3a76:	f101 0760 	add.w	r7, r1, #96	; 0x60
    3a7a:	1c55      	adds	r5, r2, #1
    3a7c:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    3a80:	eb07 0785 	add.w	r7, r7, r5, lsl #2
	bool                  dir = USB_EP_GET_DIR(trans->ep);
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);

	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    3a84:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    3a88:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    3a8c:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
    3a90:	f240 31ff 	movw	r1, #1023	; 0x3ff
    3a94:	428a      	cmp	r2, r1
    3a96:	d025      	beq.n	3ae4 <_usb_d_dev_ep_trans+0x8c>
    3a98:	1e55      	subs	r5, r2, #1
    3a9a:	b2ad      	uxth	r5, r5
	bool     size_n_aligned = (trans->size & size_mask);
    3a9c:	6841      	ldr	r1, [r0, #4]
    3a9e:	400d      	ands	r5, r1

	bool use_cache = false;

	volatile hal_atomic_t flags;

	if (epn > CONF_USB_D_MAX_EP_N) {
    3aa0:	2b02      	cmp	r3, #2
    3aa2:	f200 8092 	bhi.w	3bca <_usb_d_dev_ep_trans+0x172>
	 * 1. Buffer not in RAM (cache all).
	 * 2. IN/OUT with unaligned buffer (cache all).
	 * 3. OUT with unaligned packet size (cache last packet).
	 * 4. OUT size < 8 (sub-case for 3).
	 */
	if (!_usb_is_addr4dma(trans->buf, trans->size) || (!_usb_is_aligned(trans->buf))
    3aa6:	6803      	ldr	r3, [r0, #0]
    3aa8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
    3aac:	d31c      	bcc.n	3ae8 <_usb_d_dev_ep_trans+0x90>
    3aae:	eb03 0c01 	add.w	ip, r3, r1
    3ab2:	f8df e180 	ldr.w	lr, [pc, #384]	; 3c34 <_usb_d_dev_ep_trans+0x1dc>
    3ab6:	45f4      	cmp	ip, lr
    3ab8:	d816      	bhi.n	3ae8 <_usb_d_dev_ep_trans+0x90>
    3aba:	f013 0f03 	tst.w	r3, #3
    3abe:	d113      	bne.n	3ae8 <_usb_d_dev_ep_trans+0x90>
	    || (!dir && (trans->size < ept->size))) {
    3ac0:	2e00      	cmp	r6, #0
    3ac2:	db2a      	blt.n	3b1a <_usb_d_dev_ep_trans+0xc2>
    3ac4:	428a      	cmp	r2, r1
    3ac6:	f200 809c 	bhi.w	3c02 <_usb_d_dev_ep_trans+0x1aa>
			return -USB_ERR_FUNC;
		}
		/* Use cache all the time. */
		use_cache = true;
	}
	if (!dir && size_n_aligned) {
    3aca:	b34d      	cbz	r5, 3b20 <_usb_d_dev_ep_trans+0xc8>
		if (!ept->cache) {
    3acc:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    3ad0:	4a52      	ldr	r2, [pc, #328]	; (3c1c <_usb_d_dev_ep_trans+0x1c4>)
    3ad2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    3ad6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    3ada:	2b00      	cmp	r3, #0
    3adc:	d07b      	beq.n	3bd6 <_usb_d_dev_ep_trans+0x17e>
	bool use_cache = false;
    3ade:	f04f 0800 	mov.w	r8, #0
    3ae2:	e00c      	b.n	3afe <_usb_d_dev_ep_trans+0xa6>
	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    3ae4:	4615      	mov	r5, r2
    3ae6:	e7d9      	b.n	3a9c <_usb_d_dev_ep_trans+0x44>
		if (!ept->cache) {
    3ae8:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    3aec:	4a4b      	ldr	r2, [pc, #300]	; (3c1c <_usb_d_dev_ep_trans+0x1c4>)
    3aee:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    3af2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    3af6:	2b00      	cmp	r3, #0
    3af8:	d06a      	beq.n	3bd0 <_usb_d_dev_ep_trans+0x178>
		use_cache = true;
    3afa:	f04f 0801 	mov.w	r8, #1
		}
		/* Set 'use_cache' on last packet. */
	}

	/* Check halt */
	if (ept->flags.bits.is_stalled) {
    3afe:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    3b02:	4a46      	ldr	r2, [pc, #280]	; (3c1c <_usb_d_dev_ep_trans+0x1c4>)
    3b04:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    3b08:	f893 3087 	ldrb.w	r3, [r3, #135]	; 0x87
    3b0c:	f013 0f08 	tst.w	r3, #8
    3b10:	d009      	beq.n	3b26 <_usb_d_dev_ep_trans+0xce>
		return USB_HALTED;
    3b12:	2002      	movs	r0, #2
	} else {
		_usb_d_dev_out_next(ept, false);
	}

	return ERR_NONE;
}
    3b14:	b003      	add	sp, #12
    3b16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	bool use_cache = false;
    3b1a:	f04f 0800 	mov.w	r8, #0
    3b1e:	e7ee      	b.n	3afe <_usb_d_dev_ep_trans+0xa6>
    3b20:	f04f 0800 	mov.w	r8, #0
    3b24:	e7eb      	b.n	3afe <_usb_d_dev_ep_trans+0xa6>
    3b26:	4682      	mov	sl, r0
	atomic_enter_critical(&flags);
    3b28:	a801      	add	r0, sp, #4
    3b2a:	4b3d      	ldr	r3, [pc, #244]	; (3c20 <_usb_d_dev_ep_trans+0x1c8>)
    3b2c:	4798      	blx	r3
	if (_usb_d_dev_ep_is_busy(ept)) {
    3b2e:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    3b32:	4a3a      	ldr	r2, [pc, #232]	; (3c1c <_usb_d_dev_ep_trans+0x1c4>)
    3b34:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    3b38:	f893 3087 	ldrb.w	r3, [r3, #135]	; 0x87
    3b3c:	f013 0f40 	tst.w	r3, #64	; 0x40
    3b40:	d13c      	bne.n	3bbc <_usb_d_dev_ep_trans+0x164>
	ept->flags.bits.is_busy = 1;
    3b42:	eb04 0984 	add.w	r9, r4, r4, lsl #2
    3b46:	4b35      	ldr	r3, [pc, #212]	; (3c1c <_usb_d_dev_ep_trans+0x1c4>)
    3b48:	eb03 0989 	add.w	r9, r3, r9, lsl #2
    3b4c:	f899 3087 	ldrb.w	r3, [r9, #135]	; 0x87
    3b50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    3b54:	f889 3087 	strb.w	r3, [r9, #135]	; 0x87
	atomic_leave_critical(&flags);
    3b58:	a801      	add	r0, sp, #4
    3b5a:	4b32      	ldr	r3, [pc, #200]	; (3c24 <_usb_d_dev_ep_trans+0x1cc>)
    3b5c:	4798      	blx	r3
	ept->trans_buf   = trans->buf;
    3b5e:	f8da 3000 	ldr.w	r3, [sl]
    3b62:	f8c9 3074 	str.w	r3, [r9, #116]	; 0x74
	ept->trans_size  = trans->size;
    3b66:	f8da 3004 	ldr.w	r3, [sl, #4]
    3b6a:	f8c9 3078 	str.w	r3, [r9, #120]	; 0x78
	ept->trans_count = 0;
    3b6e:	2300      	movs	r3, #0
    3b70:	f8c9 307c 	str.w	r3, [r9, #124]	; 0x7c
	bool                  dir = USB_EP_GET_DIR(trans->ep);
    3b74:	0ff2      	lsrs	r2, r6, #31
	ept->flags.bits.dir       = dir;
    3b76:	f899 3087 	ldrb.w	r3, [r9, #135]	; 0x87
    3b7a:	f362 13c7 	bfi	r3, r2, #7, #1
	ept->flags.bits.use_cache = use_cache;
    3b7e:	f368 1345 	bfi	r3, r8, #5, #1
    3b82:	f889 3087 	strb.w	r3, [r9, #135]	; 0x87
	ept->flags.bits.need_zlp  = (trans->zlp && (!size_n_aligned));
    3b86:	f89a 3009 	ldrb.w	r3, [sl, #9]
    3b8a:	b1e3      	cbz	r3, 3bc6 <_usb_d_dev_ep_trans+0x16e>
    3b8c:	fab5 f585 	clz	r5, r5
    3b90:	096d      	lsrs	r5, r5, #5
    3b92:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    3b96:	4b21      	ldr	r3, [pc, #132]	; (3c1c <_usb_d_dev_ep_trans+0x1c4>)
    3b98:	eb03 0484 	add.w	r4, r3, r4, lsl #2
    3b9c:	f894 3087 	ldrb.w	r3, [r4, #135]	; 0x87
    3ba0:	f365 1304 	bfi	r3, r5, #4, #1
    3ba4:	f884 3087 	strb.w	r3, [r4, #135]	; 0x87
	if (dir) {
    3ba8:	2e00      	cmp	r6, #0
		_usb_d_dev_in_next(ept, false);
    3baa:	f04f 0100 	mov.w	r1, #0
    3bae:	4638      	mov	r0, r7
    3bb0:	bfb4      	ite	lt
    3bb2:	4b1d      	ldrlt	r3, [pc, #116]	; (3c28 <_usb_d_dev_ep_trans+0x1d0>)
		_usb_d_dev_out_next(ept, false);
    3bb4:	4b1d      	ldrge	r3, [pc, #116]	; (3c2c <_usb_d_dev_ep_trans+0x1d4>)
    3bb6:	4798      	blx	r3
	return ERR_NONE;
    3bb8:	2000      	movs	r0, #0
    3bba:	e7ab      	b.n	3b14 <_usb_d_dev_ep_trans+0xbc>
		atomic_leave_critical(&flags);
    3bbc:	a801      	add	r0, sp, #4
    3bbe:	4b19      	ldr	r3, [pc, #100]	; (3c24 <_usb_d_dev_ep_trans+0x1cc>)
    3bc0:	4798      	blx	r3
		return USB_BUSY;
    3bc2:	2001      	movs	r0, #1
    3bc4:	e7a6      	b.n	3b14 <_usb_d_dev_ep_trans+0xbc>
    3bc6:	2500      	movs	r5, #0
    3bc8:	e7e3      	b.n	3b92 <_usb_d_dev_ep_trans+0x13a>
		return -USB_ERR_PARAM;
    3bca:	f06f 0011 	mvn.w	r0, #17
    3bce:	e7a1      	b.n	3b14 <_usb_d_dev_ep_trans+0xbc>
			return -USB_ERR_FUNC;
    3bd0:	f06f 0012 	mvn.w	r0, #18
    3bd4:	e79e      	b.n	3b14 <_usb_d_dev_ep_trans+0xbc>
			return -USB_ERR_PARAM;
    3bd6:	f06f 0011 	mvn.w	r0, #17
    3bda:	e79b      	b.n	3b14 <_usb_d_dev_ep_trans+0xbc>
			return -USB_ERR_FUNC;
    3bdc:	f06f 0012 	mvn.w	r0, #18
    3be0:	e798      	b.n	3b14 <_usb_d_dev_ep_trans+0xbc>
	bool     size_n_aligned = (trans->size & size_mask);
    3be2:	6841      	ldr	r1, [r0, #4]
    3be4:	f3c1 0509 	ubfx	r5, r1, #0, #10
	return &dev_inst.ep[ep_index];
    3be8:	4f11      	ldr	r7, [pc, #68]	; (3c30 <_usb_d_dev_ep_trans+0x1d8>)
    3bea:	2400      	movs	r4, #0
    3bec:	e75b      	b.n	3aa6 <_usb_d_dev_ep_trans+0x4e>
	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    3bee:	4a0b      	ldr	r2, [pc, #44]	; (3c1c <_usb_d_dev_ep_trans+0x1c4>)
    3bf0:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
    3bf4:	f240 31ff 	movw	r1, #1023	; 0x3ff
    3bf8:	428a      	cmp	r2, r1
    3bfa:	d0f2      	beq.n	3be2 <_usb_d_dev_ep_trans+0x18a>
	return &dev_inst.ep[ep_index];
    3bfc:	4f0c      	ldr	r7, [pc, #48]	; (3c30 <_usb_d_dev_ep_trans+0x1d8>)
    3bfe:	2400      	movs	r4, #0
    3c00:	e74a      	b.n	3a98 <_usb_d_dev_ep_trans+0x40>
		if (!ept->cache) {
    3c02:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    3c06:	4a05      	ldr	r2, [pc, #20]	; (3c1c <_usb_d_dev_ep_trans+0x1c4>)
    3c08:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    3c0c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    3c10:	2b00      	cmp	r3, #0
    3c12:	d0e3      	beq.n	3bdc <_usb_d_dev_ep_trans+0x184>
    3c14:	f04f 0801 	mov.w	r8, #1
    3c18:	e771      	b.n	3afe <_usb_d_dev_ep_trans+0xa6>
    3c1a:	bf00      	nop
    3c1c:	20000700 	.word	0x20000700
    3c20:	0000486d 	.word	0x0000486d
    3c24:	0000487b 	.word	0x0000487b
    3c28:	00002cb9 	.word	0x00002cb9
    3c2c:	00002e3d 	.word	0x00002e3d
    3c30:	20000774 	.word	0x20000774
    3c34:	20041fff 	.word	0x20041fff

00003c38 <_usb_d_dev_register_callback>:
	return USB_OK;
}

void _usb_d_dev_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    3c38:	4b06      	ldr	r3, [pc, #24]	; (3c54 <_usb_d_dev_register_callback+0x1c>)
    3c3a:	2900      	cmp	r1, #0
    3c3c:	bf08      	it	eq
    3c3e:	4619      	moveq	r1, r3
	if (type == USB_D_CB_EVENT) {
    3c40:	2801      	cmp	r0, #1
    3c42:	d003      	beq.n	3c4c <_usb_d_dev_register_callback+0x14>
		dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)f;
	} else if (type == USB_D_CB_SOF) {
    3c44:	b908      	cbnz	r0, 3c4a <_usb_d_dev_register_callback+0x12>
		dev_inst.callbacks.sof = (_usb_d_dev_sof_cb_t)f;
    3c46:	4b04      	ldr	r3, [pc, #16]	; (3c58 <_usb_d_dev_register_callback+0x20>)
    3c48:	6619      	str	r1, [r3, #96]	; 0x60
    3c4a:	4770      	bx	lr
		dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)f;
    3c4c:	4b02      	ldr	r3, [pc, #8]	; (3c58 <_usb_d_dev_register_callback+0x20>)
    3c4e:	6659      	str	r1, [r3, #100]	; 0x64
    3c50:	4770      	bx	lr
    3c52:	bf00      	nop
    3c54:	00002a31 	.word	0x00002a31
    3c58:	20000700 	.word	0x20000700

00003c5c <_usb_d_dev_register_ep_callback>:
	}
}

void _usb_d_dev_register_ep_callback(const enum usb_d_dev_ep_cb_type type, const FUNC_PTR func)
{
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    3c5c:	4b09      	ldr	r3, [pc, #36]	; (3c84 <_usb_d_dev_register_ep_callback+0x28>)
    3c5e:	2900      	cmp	r1, #0
    3c60:	bf08      	it	eq
    3c62:	4619      	moveq	r1, r3
	if (type == USB_D_DEV_EP_CB_SETUP) {
    3c64:	4603      	mov	r3, r0
    3c66:	b130      	cbz	r0, 3c76 <_usb_d_dev_register_ep_callback+0x1a>
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
	} else if (type == USB_D_DEV_EP_CB_MORE) {
    3c68:	2801      	cmp	r0, #1
    3c6a:	d007      	beq.n	3c7c <_usb_d_dev_register_ep_callback+0x20>
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
	} else if (type == USB_D_DEV_EP_CB_DONE) {
    3c6c:	2802      	cmp	r0, #2
		dev_inst.ep_callbacks.done = (_usb_d_dev_ep_cb_done_t)f;
    3c6e:	bf04      	itt	eq
    3c70:	4b05      	ldreq	r3, [pc, #20]	; (3c88 <_usb_d_dev_register_ep_callback+0x2c>)
    3c72:	6719      	streq	r1, [r3, #112]	; 0x70
    3c74:	4770      	bx	lr
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
    3c76:	4b04      	ldr	r3, [pc, #16]	; (3c88 <_usb_d_dev_register_ep_callback+0x2c>)
    3c78:	6699      	str	r1, [r3, #104]	; 0x68
    3c7a:	4770      	bx	lr
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
    3c7c:	4b02      	ldr	r3, [pc, #8]	; (3c88 <_usb_d_dev_register_ep_callback+0x2c>)
    3c7e:	66d9      	str	r1, [r3, #108]	; 0x6c
    3c80:	4770      	bx	lr
    3c82:	bf00      	nop
    3c84:	00002a31 	.word	0x00002a31
    3c88:	20000700 	.word	0x20000700

00003c8c <USB_0_Handler>:

/**
 * \brief USB interrupt handler
 */
void USB_0_Handler(void)
{
    3c8c:	b508      	push	{r3, lr}

	_usb_d_dev_handler();
    3c8e:	4b01      	ldr	r3, [pc, #4]	; (3c94 <USB_0_Handler+0x8>)
    3c90:	4798      	blx	r3
    3c92:	bd08      	pop	{r3, pc}
    3c94:	0000302d 	.word	0x0000302d

00003c98 <USB_1_Handler>:
}
/**
 * \brief USB interrupt handler
 */
void USB_1_Handler(void)
{
    3c98:	b508      	push	{r3, lr}

	_usb_d_dev_handler();
    3c9a:	4b01      	ldr	r3, [pc, #4]	; (3ca0 <USB_1_Handler+0x8>)
    3c9c:	4798      	blx	r3
    3c9e:	bd08      	pop	{r3, pc}
    3ca0:	0000302d 	.word	0x0000302d

00003ca4 <USB_2_Handler>:
}
/**
 * \brief USB interrupt handler
 */
void USB_2_Handler(void)
{
    3ca4:	b508      	push	{r3, lr}

	_usb_d_dev_handler();
    3ca6:	4b01      	ldr	r3, [pc, #4]	; (3cac <USB_2_Handler+0x8>)
    3ca8:	4798      	blx	r3
    3caa:	bd08      	pop	{r3, pc}
    3cac:	0000302d 	.word	0x0000302d

00003cb0 <USB_3_Handler>:
}
/**
 * \brief USB interrupt handler
 */
void USB_3_Handler(void)
{
    3cb0:	b508      	push	{r3, lr}

	_usb_d_dev_handler();
    3cb2:	4b01      	ldr	r3, [pc, #4]	; (3cb8 <USB_3_Handler+0x8>)
    3cb4:	4798      	blx	r3
    3cb6:	bd08      	pop	{r3, pc}
    3cb8:	0000302d 	.word	0x0000302d

00003cbc <cdcdf_acm_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    3cbc:	b5f0      	push	{r4, r5, r6, r7, lr}
    3cbe:	b083      	sub	sp, #12
	if (0x01 != ((req->bmRequestType >> 5) & 0x03)) { // class request
    3cc0:	780b      	ldrb	r3, [r1, #0]
    3cc2:	f3c3 1441 	ubfx	r4, r3, #5, #2
    3cc6:	2c01      	cmp	r4, #1
    3cc8:	d15e      	bne.n	3d88 <cdcdf_acm_req+0xcc>
		return ERR_NOT_FOUND;
	}
	if ((req->wIndex == _cdcdf_acm_funcd.func_iface[0]) || (req->wIndex == _cdcdf_acm_funcd.func_iface[1])) {
    3cca:	888c      	ldrh	r4, [r1, #4]
    3ccc:	4d35      	ldr	r5, [pc, #212]	; (3da4 <cdcdf_acm_req+0xe8>)
    3cce:	782d      	ldrb	r5, [r5, #0]
    3cd0:	42a5      	cmp	r5, r4
    3cd2:	d003      	beq.n	3cdc <cdcdf_acm_req+0x20>
    3cd4:	4d33      	ldr	r5, [pc, #204]	; (3da4 <cdcdf_acm_req+0xe8>)
    3cd6:	786d      	ldrb	r5, [r5, #1]
    3cd8:	42a5      	cmp	r5, r4
    3cda:	d158      	bne.n	3d8e <cdcdf_acm_req+0xd2>
    3cdc:	4616      	mov	r6, r2
    3cde:	460c      	mov	r4, r1
    3ce0:	4605      	mov	r5, r0
		if (req->bmRequestType & USB_EP_DIR_IN) {
    3ce2:	f013 0f80 	tst.w	r3, #128	; 0x80
    3ce6:	d10c      	bne.n	3d02 <cdcdf_acm_req+0x46>
	uint16_t                   len      = req->wLength;
    3ce8:	88cf      	ldrh	r7, [r1, #6]
	uint8_t *                  ctrl_buf = usbdc_get_ctrl_buffer();
    3cea:	4b2f      	ldr	r3, [pc, #188]	; (3da8 <cdcdf_acm_req+0xec>)
    3cec:	4798      	blx	r3
    3cee:	4601      	mov	r1, r0
	switch (req->bRequest) {
    3cf0:	7863      	ldrb	r3, [r4, #1]
    3cf2:	2b20      	cmp	r3, #32
    3cf4:	d013      	beq.n	3d1e <cdcdf_acm_req+0x62>
    3cf6:	2b22      	cmp	r3, #34	; 0x22
    3cf8:	d032      	beq.n	3d60 <cdcdf_acm_req+0xa4>
		return ERR_INVALID_ARG;
    3cfa:	f06f 000c 	mvn.w	r0, #12
			return cdcdf_acm_set_req(ep, req, stage);
		}
	} else {
		return ERR_NOT_FOUND;
	}
}
    3cfe:	b003      	add	sp, #12
    3d00:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (USB_DATA_STAGE == stage) {
    3d02:	2a01      	cmp	r2, #1
    3d04:	d046      	beq.n	3d94 <cdcdf_acm_req+0xd8>
	switch (req->bRequest) {
    3d06:	784b      	ldrb	r3, [r1, #1]
    3d08:	2b21      	cmp	r3, #33	; 0x21
    3d0a:	d145      	bne.n	3d98 <cdcdf_acm_req+0xdc>
		if (sizeof(struct usb_cdc_line_coding) != len) {
    3d0c:	88cb      	ldrh	r3, [r1, #6]
    3d0e:	2b07      	cmp	r3, #7
    3d10:	d145      	bne.n	3d9e <cdcdf_acm_req+0xe2>
		return usbdc_xfer(ep, (uint8_t *)&usbd_cdc_line_coding, len, false);
    3d12:	2300      	movs	r3, #0
    3d14:	2207      	movs	r2, #7
    3d16:	4925      	ldr	r1, [pc, #148]	; (3dac <cdcdf_acm_req+0xf0>)
    3d18:	4c25      	ldr	r4, [pc, #148]	; (3db0 <cdcdf_acm_req+0xf4>)
    3d1a:	47a0      	blx	r4
    3d1c:	e7ef      	b.n	3cfe <cdcdf_acm_req+0x42>
		if (sizeof(struct usb_cdc_line_coding) != len) {
    3d1e:	2f07      	cmp	r7, #7
    3d20:	d12b      	bne.n	3d7a <cdcdf_acm_req+0xbe>
		if (USB_SETUP_STAGE == stage) {
    3d22:	b1be      	cbz	r6, 3d54 <cdcdf_acm_req+0x98>
			memcpy(&line_coding_tmp, ctrl_buf, sizeof(struct usb_cdc_line_coding));
    3d24:	6800      	ldr	r0, [r0, #0]
    3d26:	9000      	str	r0, [sp, #0]
    3d28:	888a      	ldrh	r2, [r1, #4]
    3d2a:	798b      	ldrb	r3, [r1, #6]
    3d2c:	f8ad 2004 	strh.w	r2, [sp, #4]
    3d30:	f88d 3006 	strb.w	r3, [sp, #6]
			if ((NULL == cdcdf_acm_set_line_coding) || (true == cdcdf_acm_set_line_coding(&line_coding_tmp))) {
    3d34:	4b1b      	ldr	r3, [pc, #108]	; (3da4 <cdcdf_acm_req+0xe8>)
    3d36:	691b      	ldr	r3, [r3, #16]
    3d38:	b113      	cbz	r3, 3d40 <cdcdf_acm_req+0x84>
    3d3a:	4668      	mov	r0, sp
    3d3c:	4798      	blx	r3
    3d3e:	b1f8      	cbz	r0, 3d80 <cdcdf_acm_req+0xc4>
				usbd_cdc_line_coding = line_coding_tmp;
    3d40:	4b18      	ldr	r3, [pc, #96]	; (3da4 <cdcdf_acm_req+0xe8>)
    3d42:	aa02      	add	r2, sp, #8
    3d44:	e912 0003 	ldmdb	r2, {r0, r1}
    3d48:	6098      	str	r0, [r3, #8]
    3d4a:	8199      	strh	r1, [r3, #12]
    3d4c:	0c09      	lsrs	r1, r1, #16
    3d4e:	7399      	strb	r1, [r3, #14]
			return ERR_NONE;
    3d50:	2000      	movs	r0, #0
    3d52:	e7d4      	b.n	3cfe <cdcdf_acm_req+0x42>
			return usbdc_xfer(ep, ctrl_buf, len, false);
    3d54:	2300      	movs	r3, #0
    3d56:	2207      	movs	r2, #7
    3d58:	4628      	mov	r0, r5
    3d5a:	4c15      	ldr	r4, [pc, #84]	; (3db0 <cdcdf_acm_req+0xf4>)
    3d5c:	47a0      	blx	r4
    3d5e:	e7ce      	b.n	3cfe <cdcdf_acm_req+0x42>
		usbdc_xfer(0, NULL, 0, 0);
    3d60:	2300      	movs	r3, #0
    3d62:	461a      	mov	r2, r3
    3d64:	4619      	mov	r1, r3
    3d66:	4618      	mov	r0, r3
    3d68:	4d11      	ldr	r5, [pc, #68]	; (3db0 <cdcdf_acm_req+0xf4>)
    3d6a:	47a8      	blx	r5
		if (NULL != cdcdf_acm_notify_state) {
    3d6c:	4b0d      	ldr	r3, [pc, #52]	; (3da4 <cdcdf_acm_req+0xe8>)
    3d6e:	695b      	ldr	r3, [r3, #20]
    3d70:	b143      	cbz	r3, 3d84 <cdcdf_acm_req+0xc8>
			cdcdf_acm_notify_state(req->wValue);
    3d72:	8860      	ldrh	r0, [r4, #2]
    3d74:	4798      	blx	r3
		return ERR_NONE;
    3d76:	2000      	movs	r0, #0
    3d78:	e7c1      	b.n	3cfe <cdcdf_acm_req+0x42>
			return ERR_INVALID_DATA;
    3d7a:	f04f 30ff 	mov.w	r0, #4294967295
    3d7e:	e7be      	b.n	3cfe <cdcdf_acm_req+0x42>
			return ERR_NONE;
    3d80:	2000      	movs	r0, #0
    3d82:	e7bc      	b.n	3cfe <cdcdf_acm_req+0x42>
		return ERR_NONE;
    3d84:	2000      	movs	r0, #0
			return cdcdf_acm_set_req(ep, req, stage);
    3d86:	e7ba      	b.n	3cfe <cdcdf_acm_req+0x42>
		return ERR_NOT_FOUND;
    3d88:	f06f 0009 	mvn.w	r0, #9
    3d8c:	e7b7      	b.n	3cfe <cdcdf_acm_req+0x42>
		return ERR_NOT_FOUND;
    3d8e:	f06f 0009 	mvn.w	r0, #9
    3d92:	e7b4      	b.n	3cfe <cdcdf_acm_req+0x42>
		return ERR_NONE;
    3d94:	2000      	movs	r0, #0
    3d96:	e7b2      	b.n	3cfe <cdcdf_acm_req+0x42>
		return ERR_INVALID_ARG;
    3d98:	f06f 000c 	mvn.w	r0, #12
    3d9c:	e7af      	b.n	3cfe <cdcdf_acm_req+0x42>
			return ERR_INVALID_DATA;
    3d9e:	f04f 30ff 	mov.w	r0, #4294967295
    3da2:	e7ac      	b.n	3cfe <cdcdf_acm_req+0x42>
    3da4:	200008e8 	.word	0x200008e8
    3da8:	000046e1 	.word	0x000046e1
    3dac:	200008f0 	.word	0x200008f0
    3db0:	000041bd 	.word	0x000041bd

00003db4 <cdcdf_acm_ctrl>:
{
    3db4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3db8:	b083      	sub	sp, #12
    3dba:	4616      	mov	r6, r2
	switch (ctrl) {
    3dbc:	2901      	cmp	r1, #1
    3dbe:	d066      	beq.n	3e8e <cdcdf_acm_ctrl+0xda>
    3dc0:	b141      	cbz	r1, 3dd4 <cdcdf_acm_ctrl+0x20>
		return ERR_INVALID_ARG;
    3dc2:	2902      	cmp	r1, #2
    3dc4:	bf0c      	ite	eq
    3dc6:	f06f 001a 	mvneq.w	r0, #26
    3dca:	f06f 000c 	mvnne.w	r0, #12
}
    3dce:	b003      	add	sp, #12
    3dd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
    3dd4:	f8d0 a008 	ldr.w	sl, [r0, #8]
	ifc = desc->sod;
    3dd8:	6810      	ldr	r0, [r2, #0]
		if (NULL == ifc) {
    3dda:	2800      	cmp	r0, #0
    3ddc:	f000 8085 	beq.w	3eea <cdcdf_acm_ctrl+0x136>
    3de0:	f10a 3bff 	add.w	fp, sl, #4294967295
    3de4:	f10a 0301 	add.w	r3, sl, #1
    3de8:	9300      	str	r3, [sp, #0]
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    3dea:	4f46      	ldr	r7, [pc, #280]	; (3f04 <cdcdf_acm_ctrl+0x150>)
				usb_d_ep_enable(func_data->func_ep_out);
    3dec:	f8df 9124 	ldr.w	r9, [pc, #292]	; 3f14 <cdcdf_acm_ctrl+0x160>
			ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    3df0:	f8df 8124 	ldr.w	r8, [pc, #292]	; 3f18 <cdcdf_acm_ctrl+0x164>
		ifc_desc.bInterfaceNumber = ifc[2];
    3df4:	7882      	ldrb	r2, [r0, #2]
		if ((CDC_CLASS_COMM == ifc_desc.bInterfaceClass) || (CDC_CLASS_DATA == ifc_desc.bInterfaceClass)) {
    3df6:	7943      	ldrb	r3, [r0, #5]
    3df8:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
    3dfc:	2b02      	cmp	r3, #2
    3dfe:	d002      	beq.n	3e06 <cdcdf_acm_ctrl+0x52>
			return ERR_NOT_FOUND;
    3e00:	f06f 0009 	mvn.w	r0, #9
    3e04:	e7e3      	b.n	3dce <cdcdf_acm_ctrl+0x1a>
    3e06:	f10b 0b01 	add.w	fp, fp, #1
			if (func_data->func_iface[i] == ifc_desc.bInterfaceNumber) { // Initialized
    3e0a:	f89b 3000 	ldrb.w	r3, [fp]
    3e0e:	429a      	cmp	r2, r3
    3e10:	d06e      	beq.n	3ef0 <cdcdf_acm_ctrl+0x13c>
			} else if (func_data->func_iface[i] != 0xFF) { // Occupied
    3e12:	2bff      	cmp	r3, #255	; 0xff
    3e14:	d16f      	bne.n	3ef6 <cdcdf_acm_ctrl+0x142>
				func_data->func_iface[i] = ifc_desc.bInterfaceNumber;
    3e16:	f88b 2000 	strb.w	r2, [fp]
		ep = usb_find_desc(ifc, desc->eod, USB_DT_ENDPOINT);
    3e1a:	2205      	movs	r2, #5
    3e1c:	6871      	ldr	r1, [r6, #4]
    3e1e:	4b3a      	ldr	r3, [pc, #232]	; (3f08 <cdcdf_acm_ctrl+0x154>)
    3e20:	4798      	blx	r3
		while (NULL != ep) {
    3e22:	4604      	mov	r4, r0
    3e24:	b1f8      	cbz	r0, 3e66 <cdcdf_acm_ctrl+0xb2>
    3e26:	f8cd b004 	str.w	fp, [sp, #4]
			ep_desc.bEndpointAddress = ep[2];
    3e2a:	78a5      	ldrb	r5, [r4, #2]
 *  \param[in] ptr Byte pointer to the address to get data
 *  \return a 16-bit word
 */
static inline uint16_t usb_get_u16(const uint8_t *ptr)
{
	return (ptr[0] + (ptr[1] << 8));
    3e2c:	7963      	ldrb	r3, [r4, #5]
    3e2e:	7922      	ldrb	r2, [r4, #4]
    3e30:	eb02 2203 	add.w	r2, r2, r3, lsl #8
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    3e34:	b292      	uxth	r2, r2
    3e36:	78e1      	ldrb	r1, [r4, #3]
    3e38:	4628      	mov	r0, r5
    3e3a:	47b8      	blx	r7
    3e3c:	2800      	cmp	r0, #0
    3e3e:	d15d      	bne.n	3efc <cdcdf_acm_ctrl+0x148>
			if (ep_desc.bEndpointAddress & USB_EP_DIR_IN) {
    3e40:	f015 0f80 	tst.w	r5, #128	; 0x80
				func_data->func_ep_in[i] = ep_desc.bEndpointAddress;
    3e44:	bf14      	ite	ne
    3e46:	f88b 5002 	strbne.w	r5, [fp, #2]
				func_data->func_ep_out = ep_desc.bEndpointAddress;
    3e4a:	f88a 5004 	strbeq.w	r5, [sl, #4]
				usb_d_ep_enable(func_data->func_ep_out);
    3e4e:	4628      	mov	r0, r5
    3e50:	47c8      	blx	r9
			desc->sod = ep;
    3e52:	6034      	str	r4, [r6, #0]
 *  \param[in] desc Byte pointer to the descriptor start address
 *  \return Byte pointer to the next descriptor
 */
static inline uint8_t *usb_desc_next(uint8_t *desc)
{
	return (desc + usb_desc_len(desc));
    3e54:	7820      	ldrb	r0, [r4, #0]
			ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    3e56:	6871      	ldr	r1, [r6, #4]
    3e58:	4420      	add	r0, r4
    3e5a:	47c0      	blx	r8
		while (NULL != ep) {
    3e5c:	4604      	mov	r4, r0
    3e5e:	2800      	cmp	r0, #0
    3e60:	d1e3      	bne.n	3e2a <cdcdf_acm_ctrl+0x76>
    3e62:	f8dd b004 	ldr.w	fp, [sp, #4]
		ifc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_INTERFACE);
    3e66:	6833      	ldr	r3, [r6, #0]
    3e68:	7818      	ldrb	r0, [r3, #0]
    3e6a:	2204      	movs	r2, #4
    3e6c:	6871      	ldr	r1, [r6, #4]
    3e6e:	4418      	add	r0, r3
    3e70:	4b25      	ldr	r3, [pc, #148]	; (3f08 <cdcdf_acm_ctrl+0x154>)
    3e72:	4798      	blx	r3
	for (i = 0; i < 2; i++) {
    3e74:	9b00      	ldr	r3, [sp, #0]
    3e76:	459b      	cmp	fp, r3
    3e78:	d004      	beq.n	3e84 <cdcdf_acm_ctrl+0xd0>
		if (NULL == ifc) {
    3e7a:	2800      	cmp	r0, #0
    3e7c:	d1ba      	bne.n	3df4 <cdcdf_acm_ctrl+0x40>
			return ERR_NOT_FOUND;
    3e7e:	f06f 0009 	mvn.w	r0, #9
    3e82:	e7a4      	b.n	3dce <cdcdf_acm_ctrl+0x1a>
	_cdcdf_acm_funcd.enabled = true;
    3e84:	2201      	movs	r2, #1
    3e86:	4b21      	ldr	r3, [pc, #132]	; (3f0c <cdcdf_acm_ctrl+0x158>)
    3e88:	715a      	strb	r2, [r3, #5]
	return ERR_NONE;
    3e8a:	2000      	movs	r0, #0
    3e8c:	e79f      	b.n	3dce <cdcdf_acm_ctrl+0x1a>
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
    3e8e:	6884      	ldr	r4, [r0, #8]
	if (desc) {
    3e90:	b142      	cbz	r2, 3ea4 <cdcdf_acm_ctrl+0xf0>
		ifc_desc.bInterfaceClass = desc->sod[5];
    3e92:	6813      	ldr	r3, [r2, #0]
		if ((ifc_desc.bInterfaceClass != CDC_CLASS_COMM) && (ifc_desc.bInterfaceClass != CDC_CLASS_DATA)) {
    3e94:	795b      	ldrb	r3, [r3, #5]
    3e96:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
    3e9a:	2b02      	cmp	r3, #2
    3e9c:	d002      	beq.n	3ea4 <cdcdf_acm_ctrl+0xf0>
			return ERR_NOT_FOUND;
    3e9e:	f06f 0009 	mvn.w	r0, #9
    3ea2:	e794      	b.n	3dce <cdcdf_acm_ctrl+0x1a>
		if (func_data->func_iface[i] == 0xFF) {
    3ea4:	7823      	ldrb	r3, [r4, #0]
    3ea6:	2bff      	cmp	r3, #255	; 0xff
    3ea8:	d008      	beq.n	3ebc <cdcdf_acm_ctrl+0x108>
			func_data->func_iface[i] = 0xFF;
    3eaa:	23ff      	movs	r3, #255	; 0xff
    3eac:	7023      	strb	r3, [r4, #0]
			if (func_data->func_ep_in[i] != 0xFF) {
    3eae:	78a0      	ldrb	r0, [r4, #2]
    3eb0:	4298      	cmp	r0, r3
    3eb2:	d003      	beq.n	3ebc <cdcdf_acm_ctrl+0x108>
				usb_d_ep_deinit(func_data->func_ep_in[i]);
    3eb4:	4b16      	ldr	r3, [pc, #88]	; (3f10 <cdcdf_acm_ctrl+0x15c>)
    3eb6:	4798      	blx	r3
				func_data->func_ep_in[i] = 0xFF;
    3eb8:	23ff      	movs	r3, #255	; 0xff
    3eba:	70a3      	strb	r3, [r4, #2]
		if (func_data->func_iface[i] == 0xFF) {
    3ebc:	7863      	ldrb	r3, [r4, #1]
    3ebe:	2bff      	cmp	r3, #255	; 0xff
    3ec0:	d008      	beq.n	3ed4 <cdcdf_acm_ctrl+0x120>
			func_data->func_iface[i] = 0xFF;
    3ec2:	23ff      	movs	r3, #255	; 0xff
    3ec4:	7063      	strb	r3, [r4, #1]
			if (func_data->func_ep_in[i] != 0xFF) {
    3ec6:	78e0      	ldrb	r0, [r4, #3]
    3ec8:	4298      	cmp	r0, r3
    3eca:	d003      	beq.n	3ed4 <cdcdf_acm_ctrl+0x120>
				usb_d_ep_deinit(func_data->func_ep_in[i]);
    3ecc:	4b10      	ldr	r3, [pc, #64]	; (3f10 <cdcdf_acm_ctrl+0x15c>)
    3ece:	4798      	blx	r3
				func_data->func_ep_in[i] = 0xFF;
    3ed0:	23ff      	movs	r3, #255	; 0xff
    3ed2:	70e3      	strb	r3, [r4, #3]
	if (func_data->func_ep_out != 0xFF) {
    3ed4:	7920      	ldrb	r0, [r4, #4]
    3ed6:	28ff      	cmp	r0, #255	; 0xff
    3ed8:	d003      	beq.n	3ee2 <cdcdf_acm_ctrl+0x12e>
		usb_d_ep_deinit(func_data->func_ep_out);
    3eda:	4b0d      	ldr	r3, [pc, #52]	; (3f10 <cdcdf_acm_ctrl+0x15c>)
    3edc:	4798      	blx	r3
		func_data->func_ep_out = 0xFF;
    3ede:	23ff      	movs	r3, #255	; 0xff
    3ee0:	7123      	strb	r3, [r4, #4]
	_cdcdf_acm_funcd.enabled = false;
    3ee2:	2000      	movs	r0, #0
    3ee4:	4b09      	ldr	r3, [pc, #36]	; (3f0c <cdcdf_acm_ctrl+0x158>)
    3ee6:	7158      	strb	r0, [r3, #5]
    3ee8:	e771      	b.n	3dce <cdcdf_acm_ctrl+0x1a>
			return ERR_NOT_FOUND;
    3eea:	f06f 0009 	mvn.w	r0, #9
    3eee:	e76e      	b.n	3dce <cdcdf_acm_ctrl+0x1a>
				return ERR_ALREADY_INITIALIZED;
    3ef0:	f06f 0011 	mvn.w	r0, #17
    3ef4:	e76b      	b.n	3dce <cdcdf_acm_ctrl+0x1a>
				return ERR_NO_RESOURCE;
    3ef6:	f06f 001b 	mvn.w	r0, #27
    3efa:	e768      	b.n	3dce <cdcdf_acm_ctrl+0x1a>
				return ERR_NOT_INITIALIZED;
    3efc:	f06f 0013 	mvn.w	r0, #19
    3f00:	e765      	b.n	3dce <cdcdf_acm_ctrl+0x1a>
    3f02:	bf00      	nop
    3f04:	000018b9 	.word	0x000018b9
    3f08:	00004701 	.word	0x00004701
    3f0c:	200008e8 	.word	0x200008e8
    3f10:	00001921 	.word	0x00001921
    3f14:	0000194d 	.word	0x0000194d
    3f18:	0000473b 	.word	0x0000473b

00003f1c <cdcdf_acm_init>:

/**
 * \brief Initialize the USB CDC ACM Function Driver
 */
int32_t cdcdf_acm_init(void)
{
    3f1c:	b508      	push	{r3, lr}
	if (usbdc_get_state() > USBD_S_POWER) {
    3f1e:	4b0a      	ldr	r3, [pc, #40]	; (3f48 <cdcdf_acm_init+0x2c>)
    3f20:	4798      	blx	r3
    3f22:	2801      	cmp	r0, #1
    3f24:	d80c      	bhi.n	3f40 <cdcdf_acm_init+0x24>
		return ERR_DENIED;
	}

	_cdcdf_acm.ctrl      = cdcdf_acm_ctrl;
    3f26:	4809      	ldr	r0, [pc, #36]	; (3f4c <cdcdf_acm_init+0x30>)
    3f28:	4b09      	ldr	r3, [pc, #36]	; (3f50 <cdcdf_acm_init+0x34>)
    3f2a:	61c3      	str	r3, [r0, #28]
	_cdcdf_acm.func_data = &_cdcdf_acm_funcd;
    3f2c:	6200      	str	r0, [r0, #32]

	usbdc_register_function(&_cdcdf_acm);
    3f2e:	3018      	adds	r0, #24
    3f30:	4b08      	ldr	r3, [pc, #32]	; (3f54 <cdcdf_acm_init+0x38>)
    3f32:	4798      	blx	r3
	usbdc_register_handler(USBDC_HDL_REQ, &cdcdf_acm_req_h);
    3f34:	4908      	ldr	r1, [pc, #32]	; (3f58 <cdcdf_acm_init+0x3c>)
    3f36:	2001      	movs	r0, #1
    3f38:	4b08      	ldr	r3, [pc, #32]	; (3f5c <cdcdf_acm_init+0x40>)
    3f3a:	4798      	blx	r3
	return ERR_NONE;
    3f3c:	2000      	movs	r0, #0
    3f3e:	bd08      	pop	{r3, pc}
		return ERR_DENIED;
    3f40:	f06f 0010 	mvn.w	r0, #16
}
    3f44:	bd08      	pop	{r3, pc}
    3f46:	bf00      	nop
    3f48:	000046ed 	.word	0x000046ed
    3f4c:	200008e8 	.word	0x200008e8
    3f50:	00003db5 	.word	0x00003db5
    3f54:	0000468d 	.word	0x0000468d
    3f58:	200000a4 	.word	0x200000a4
    3f5c:	000045f9 	.word	0x000045f9

00003f60 <cdcdf_acm_deinit>:

/**
 * \brief Deinitialize the USB CDC ACM Function Driver
 */
void cdcdf_acm_deinit(void)
{
    3f60:	b538      	push	{r3, r4, r5, lr}
	usb_d_ep_deinit(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_COMM_EP_INDEX]);
    3f62:	4d04      	ldr	r5, [pc, #16]	; (3f74 <cdcdf_acm_deinit+0x14>)
    3f64:	78a8      	ldrb	r0, [r5, #2]
    3f66:	4c04      	ldr	r4, [pc, #16]	; (3f78 <cdcdf_acm_deinit+0x18>)
    3f68:	47a0      	blx	r4
	usb_d_ep_deinit(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX]);
    3f6a:	78e8      	ldrb	r0, [r5, #3]
    3f6c:	47a0      	blx	r4
	usb_d_ep_deinit(_cdcdf_acm_funcd.func_ep_out);
    3f6e:	7928      	ldrb	r0, [r5, #4]
    3f70:	47a0      	blx	r4
    3f72:	bd38      	pop	{r3, r4, r5, pc}
    3f74:	200008e8 	.word	0x200008e8
    3f78:	00001921 	.word	0x00001921

00003f7c <cdcdf_acm_read>:
/**
 * \brief Check whether CDC ACM Function is enabled
 */
bool cdcdf_acm_is_enabled(void)
{
	return _cdcdf_acm_funcd.enabled;
    3f7c:	4b07      	ldr	r3, [pc, #28]	; (3f9c <cdcdf_acm_read+0x20>)
	if (!cdcdf_acm_is_enabled()) {
    3f7e:	795b      	ldrb	r3, [r3, #5]
    3f80:	b143      	cbz	r3, 3f94 <cdcdf_acm_read+0x18>
{
    3f82:	b510      	push	{r4, lr}
    3f84:	460a      	mov	r2, r1
    3f86:	4601      	mov	r1, r0
	return usbdc_xfer(_cdcdf_acm_funcd.func_ep_out, buf, size, false);
    3f88:	2300      	movs	r3, #0
    3f8a:	4804      	ldr	r0, [pc, #16]	; (3f9c <cdcdf_acm_read+0x20>)
    3f8c:	7900      	ldrb	r0, [r0, #4]
    3f8e:	4c04      	ldr	r4, [pc, #16]	; (3fa0 <cdcdf_acm_read+0x24>)
    3f90:	47a0      	blx	r4
    3f92:	bd10      	pop	{r4, pc}
		return ERR_DENIED;
    3f94:	f06f 0010 	mvn.w	r0, #16
    3f98:	4770      	bx	lr
    3f9a:	bf00      	nop
    3f9c:	200008e8 	.word	0x200008e8
    3fa0:	000041bd 	.word	0x000041bd

00003fa4 <cdcdf_acm_write>:
	return _cdcdf_acm_funcd.enabled;
    3fa4:	4b07      	ldr	r3, [pc, #28]	; (3fc4 <cdcdf_acm_write+0x20>)
	if (!cdcdf_acm_is_enabled()) {
    3fa6:	795b      	ldrb	r3, [r3, #5]
    3fa8:	b143      	cbz	r3, 3fbc <cdcdf_acm_write+0x18>
{
    3faa:	b510      	push	{r4, lr}
    3fac:	460a      	mov	r2, r1
    3fae:	4601      	mov	r1, r0
	return usbdc_xfer(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX], buf, size, true);
    3fb0:	2301      	movs	r3, #1
    3fb2:	4804      	ldr	r0, [pc, #16]	; (3fc4 <cdcdf_acm_write+0x20>)
    3fb4:	78c0      	ldrb	r0, [r0, #3]
    3fb6:	4c04      	ldr	r4, [pc, #16]	; (3fc8 <cdcdf_acm_write+0x24>)
    3fb8:	47a0      	blx	r4
    3fba:	bd10      	pop	{r4, pc}
		return ERR_DENIED;
    3fbc:	f06f 0010 	mvn.w	r0, #16
    3fc0:	4770      	bx	lr
    3fc2:	bf00      	nop
    3fc4:	200008e8 	.word	0x200008e8
    3fc8:	000041bd 	.word	0x000041bd

00003fcc <cdcdf_acm_register_callback>:
{
    3fcc:	b508      	push	{r3, lr}
	switch (cb_type) {
    3fce:	2803      	cmp	r0, #3
    3fd0:	d81b      	bhi.n	400a <cdcdf_acm_register_callback+0x3e>
    3fd2:	e8df f000 	tbb	[pc, r0]
    3fd6:	0a02      	.short	0x0a02
    3fd8:	1612      	.short	0x1612
		usb_d_ep_register_callback(_cdcdf_acm_funcd.func_ep_out, USB_D_EP_CB_XFER, func);
    3fda:	460a      	mov	r2, r1
    3fdc:	2102      	movs	r1, #2
    3fde:	4b0c      	ldr	r3, [pc, #48]	; (4010 <cdcdf_acm_register_callback+0x44>)
    3fe0:	7918      	ldrb	r0, [r3, #4]
    3fe2:	4b0c      	ldr	r3, [pc, #48]	; (4014 <cdcdf_acm_register_callback+0x48>)
    3fe4:	4798      	blx	r3
	return ERR_NONE;
    3fe6:	2000      	movs	r0, #0
		break;
    3fe8:	bd08      	pop	{r3, pc}
		usb_d_ep_register_callback(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX], USB_D_EP_CB_XFER, func);
    3fea:	460a      	mov	r2, r1
    3fec:	2102      	movs	r1, #2
    3fee:	4b08      	ldr	r3, [pc, #32]	; (4010 <cdcdf_acm_register_callback+0x44>)
    3ff0:	78d8      	ldrb	r0, [r3, #3]
    3ff2:	4b08      	ldr	r3, [pc, #32]	; (4014 <cdcdf_acm_register_callback+0x48>)
    3ff4:	4798      	blx	r3
	return ERR_NONE;
    3ff6:	2000      	movs	r0, #0
		break;
    3ff8:	bd08      	pop	{r3, pc}
		cdcdf_acm_set_line_coding = (cdcdf_acm_set_line_coding_t)func;
    3ffa:	4b05      	ldr	r3, [pc, #20]	; (4010 <cdcdf_acm_register_callback+0x44>)
    3ffc:	6119      	str	r1, [r3, #16]
	return ERR_NONE;
    3ffe:	2000      	movs	r0, #0
		break;
    4000:	bd08      	pop	{r3, pc}
		cdcdf_acm_notify_state = (cdcdf_acm_notify_state_t)func;
    4002:	4b03      	ldr	r3, [pc, #12]	; (4010 <cdcdf_acm_register_callback+0x44>)
    4004:	6159      	str	r1, [r3, #20]
	return ERR_NONE;
    4006:	2000      	movs	r0, #0
		break;
    4008:	bd08      	pop	{r3, pc}
		return ERR_INVALID_ARG;
    400a:	f06f 000c 	mvn.w	r0, #12
}
    400e:	bd08      	pop	{r3, pc}
    4010:	200008e8 	.word	0x200008e8
    4014:	00001b21 	.word	0x00001b21

00004018 <cdcdf_acm_is_enabled>:
}
    4018:	4b01      	ldr	r3, [pc, #4]	; (4020 <cdcdf_acm_is_enabled+0x8>)
    401a:	7958      	ldrb	r0, [r3, #5]
    401c:	4770      	bx	lr
    401e:	bf00      	nop
    4020:	200008e8 	.word	0x200008e8

00004024 <usbdc_unconfig>:

/**
 * \brief Unconfig, close all interfaces
 */
static void usbdc_unconfig(void)
{
    4024:	b570      	push	{r4, r5, r6, lr}
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    4026:	4b07      	ldr	r3, [pc, #28]	; (4044 <usbdc_unconfig+0x20>)
    4028:	691c      	ldr	r4, [r3, #16]
	while (NULL != func) {
    402a:	b14c      	cbz	r4, 4040 <usbdc_unconfig+0x1c>
		func->ctrl(func, USBDF_DISABLE, NULL);
    402c:	2600      	movs	r6, #0
    402e:	2501      	movs	r5, #1
    4030:	6863      	ldr	r3, [r4, #4]
    4032:	4632      	mov	r2, r6
    4034:	4629      	mov	r1, r5
    4036:	4620      	mov	r0, r4
    4038:	4798      	blx	r3
		func = func->next;
    403a:	6824      	ldr	r4, [r4, #0]
	while (NULL != func) {
    403c:	2c00      	cmp	r4, #0
    403e:	d1f7      	bne.n	4030 <usbdc_unconfig+0xc>
    4040:	bd70      	pop	{r4, r5, r6, pc}
    4042:	bf00      	nop
    4044:	2000090c 	.word	0x2000090c

00004048 <usbdc_change_notify>:
	}
}

/** Invoke all registered Change notification callbacks. */
static void usbdc_change_notify(enum usbdc_change_type change, uint32_t value)
{
    4048:	b570      	push	{r4, r5, r6, lr}
    404a:	4606      	mov	r6, r0
    404c:	460d      	mov	r5, r1
	struct usbdc_change_handler *cg = (struct usbdc_change_handler *)usbdc.handlers.change_list.head;
    404e:	4b07      	ldr	r3, [pc, #28]	; (406c <usbdc_change_notify+0x24>)
    4050:	68dc      	ldr	r4, [r3, #12]

	while (cg != NULL) {
    4052:	b91c      	cbnz	r4, 405c <usbdc_change_notify+0x14>
    4054:	bd70      	pop	{r4, r5, r6, pc}
		if (NULL != cg->cb) {
			cg->cb(change, value);
		}
		cg = cg->next;
    4056:	6824      	ldr	r4, [r4, #0]
	while (cg != NULL) {
    4058:	2c00      	cmp	r4, #0
    405a:	d0fb      	beq.n	4054 <usbdc_change_notify+0xc>
		if (NULL != cg->cb) {
    405c:	6863      	ldr	r3, [r4, #4]
    405e:	2b00      	cmp	r3, #0
    4060:	d0f9      	beq.n	4056 <usbdc_change_notify+0xe>
			cg->cb(change, value);
    4062:	4629      	mov	r1, r5
    4064:	4630      	mov	r0, r6
    4066:	4798      	blx	r3
    4068:	e7f5      	b.n	4056 <usbdc_change_notify+0xe>
    406a:	bf00      	nop
    406c:	2000090c 	.word	0x2000090c

00004070 <usbdc_request_handler>:
	}
}

/** Invoke all registered request callbacks until request handled. */
static int32_t usbdc_request_handler(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    4070:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4072:	4607      	mov	r7, r0
    4074:	460e      	mov	r6, r1
    4076:	4615      	mov	r5, r2
	struct usbdc_req_handler *h = (struct usbdc_req_handler *)usbdc.handlers.req_list.head;
    4078:	4b0c      	ldr	r3, [pc, #48]	; (40ac <usbdc_request_handler+0x3c>)
    407a:	689c      	ldr	r4, [r3, #8]
	int32_t                   rc;

	while (h != NULL) {
    407c:	b91c      	cbnz	r4, 4086 <usbdc_request_handler+0x16>
				return -1;
			}
		}
		h = h->next;
	}
	return false;
    407e:	2000      	movs	r0, #0
    4080:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		h = h->next;
    4082:	6824      	ldr	r4, [r4, #0]
	while (h != NULL) {
    4084:	b16c      	cbz	r4, 40a2 <usbdc_request_handler+0x32>
		if (NULL != h->cb) {
    4086:	6863      	ldr	r3, [r4, #4]
    4088:	2b00      	cmp	r3, #0
    408a:	d0fa      	beq.n	4082 <usbdc_request_handler+0x12>
			rc = h->cb(ep, req, stage);
    408c:	462a      	mov	r2, r5
    408e:	4631      	mov	r1, r6
    4090:	4638      	mov	r0, r7
    4092:	4798      	blx	r3
			if (0 == rc) {
    4094:	b138      	cbz	r0, 40a6 <usbdc_request_handler+0x36>
			} else if (ERR_NOT_FOUND != rc) {
    4096:	f110 0f0a 	cmn.w	r0, #10
    409a:	d0f2      	beq.n	4082 <usbdc_request_handler+0x12>
				return -1;
    409c:	f04f 30ff 	mov.w	r0, #4294967295
}
    40a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return false;
    40a2:	2000      	movs	r0, #0
    40a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				return true;
    40a6:	2001      	movs	r0, #1
    40a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    40aa:	bf00      	nop
    40ac:	2000090c 	.word	0x2000090c

000040b0 <usbd_sof_cb>:

/**
 * \brief Callback invoked on USB device SOF
 */
static void usbd_sof_cb(void)
{
    40b0:	b510      	push	{r4, lr}
	struct usbdc_sof_handler *sof = (struct usbdc_sof_handler *)usbdc.handlers.sof_list.head;
    40b2:	4b06      	ldr	r3, [pc, #24]	; (40cc <usbd_sof_cb+0x1c>)
    40b4:	685c      	ldr	r4, [r3, #4]
	while (sof != NULL) {
    40b6:	b91c      	cbnz	r4, 40c0 <usbd_sof_cb+0x10>
    40b8:	bd10      	pop	{r4, pc}
		sof = sof->next;
    40ba:	6824      	ldr	r4, [r4, #0]
	while (sof != NULL) {
    40bc:	2c00      	cmp	r4, #0
    40be:	d0fb      	beq.n	40b8 <usbd_sof_cb+0x8>
		if (NULL != sof->cb) {
    40c0:	6863      	ldr	r3, [r4, #4]
    40c2:	2b00      	cmp	r3, #0
    40c4:	d0f9      	beq.n	40ba <usbd_sof_cb+0xa>
			sof->cb();
    40c6:	4798      	blx	r3
    40c8:	e7f7      	b.n	40ba <usbd_sof_cb+0xa>
    40ca:	bf00      	nop
    40cc:	2000090c 	.word	0x2000090c

000040d0 <usbdc_cb_ctl_done>:
 * \return Data has error or not.
 * \retval true There is data error, protocol error.
 * \retval false There is no data error.
 */
static bool usbdc_cb_ctl_done(const uint8_t ep, const enum usb_xfer_code code, struct usb_req *req)
{
    40d0:	b510      	push	{r4, lr}
    40d2:	4614      	mov	r4, r2
	(void)ep;

	switch (code) {
    40d4:	b119      	cbz	r1, 40de <usbdc_cb_ctl_done+0xe>
    40d6:	2901      	cmp	r1, #1
    40d8:	d026      	beq.n	4128 <usbdc_cb_ctl_done+0x58>
		return usbdc_ctrl_data_end(req);
	default:
		break;
	}
	return false;
}
    40da:	2000      	movs	r0, #0
    40dc:	bd10      	pop	{r4, pc}
	if (req->bmRequestType != USB_REQT_TYPE_STANDARD) {
    40de:	7813      	ldrb	r3, [r2, #0]
    40e0:	2b00      	cmp	r3, #0
    40e2:	d1fa      	bne.n	40da <usbdc_cb_ctl_done+0xa>
	switch (req->bRequest) {
    40e4:	7853      	ldrb	r3, [r2, #1]
    40e6:	2b05      	cmp	r3, #5
    40e8:	d00f      	beq.n	410a <usbdc_cb_ctl_done+0x3a>
    40ea:	2b09      	cmp	r3, #9
    40ec:	d1f5      	bne.n	40da <usbdc_cb_ctl_done+0xa>
		usbdc.cfg_value = req->wValue;
    40ee:	8852      	ldrh	r2, [r2, #2]
    40f0:	4b10      	ldr	r3, [pc, #64]	; (4134 <usbdc_cb_ctl_done+0x64>)
    40f2:	76da      	strb	r2, [r3, #27]
		usbdc.state     = req->wValue ? USBD_S_CONFIG : USBD_S_ADDRESS;
    40f4:	8863      	ldrh	r3, [r4, #2]
    40f6:	2b00      	cmp	r3, #0
    40f8:	bf14      	ite	ne
    40fa:	2104      	movne	r1, #4
    40fc:	2103      	moveq	r1, #3
    40fe:	4b0d      	ldr	r3, [pc, #52]	; (4134 <usbdc_cb_ctl_done+0x64>)
    4100:	7699      	strb	r1, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
    4102:	2001      	movs	r0, #1
    4104:	4b0c      	ldr	r3, [pc, #48]	; (4138 <usbdc_cb_ctl_done+0x68>)
    4106:	4798      	blx	r3
    4108:	e7e7      	b.n	40da <usbdc_cb_ctl_done+0xa>
		usbdc_set_address(req->wValue);
    410a:	8850      	ldrh	r0, [r2, #2]
	usb_d_set_address(addr);
    410c:	b2c0      	uxtb	r0, r0
    410e:	4b0b      	ldr	r3, [pc, #44]	; (413c <usbdc_cb_ctl_done+0x6c>)
    4110:	4798      	blx	r3
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
    4112:	8863      	ldrh	r3, [r4, #2]
    4114:	2b00      	cmp	r3, #0
    4116:	bf14      	ite	ne
    4118:	2103      	movne	r1, #3
    411a:	2102      	moveq	r1, #2
    411c:	4b05      	ldr	r3, [pc, #20]	; (4134 <usbdc_cb_ctl_done+0x64>)
    411e:	7699      	strb	r1, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
    4120:	2001      	movs	r0, #1
    4122:	4b05      	ldr	r3, [pc, #20]	; (4138 <usbdc_cb_ctl_done+0x68>)
    4124:	4798      	blx	r3
    4126:	e7d8      	b.n	40da <usbdc_cb_ctl_done+0xa>
	usbdc_request_handler(0, req, USB_DATA_STAGE);
    4128:	2201      	movs	r2, #1
    412a:	4621      	mov	r1, r4
    412c:	2000      	movs	r0, #0
    412e:	4b04      	ldr	r3, [pc, #16]	; (4140 <usbdc_cb_ctl_done+0x70>)
    4130:	4798      	blx	r3
		return usbdc_ctrl_data_end(req);
    4132:	e7d2      	b.n	40da <usbdc_cb_ctl_done+0xa>
    4134:	2000090c 	.word	0x2000090c
    4138:	00004049 	.word	0x00004049
    413c:	000018ad 	.word	0x000018ad
    4140:	00004071 	.word	0x00004071

00004144 <usbdc_reset>:

/**
 * \brief USB Device Core Reset
 */
void usbdc_reset(void)
{
    4144:	b570      	push	{r4, r5, r6, lr}
	usbdc_unconfig();
    4146:	4b0d      	ldr	r3, [pc, #52]	; (417c <usbdc_reset+0x38>)
    4148:	4798      	blx	r3

	usbdc.state       = USBD_S_DEFAULT;
    414a:	4d0d      	ldr	r5, [pc, #52]	; (4180 <usbdc_reset+0x3c>)
    414c:	2602      	movs	r6, #2
    414e:	76ae      	strb	r6, [r5, #26]
	usbdc.cfg_value   = 0;
    4150:	2400      	movs	r4, #0
    4152:	76ec      	strb	r4, [r5, #27]
	usbdc.ifc_alt_map = 0;
    4154:	776c      	strb	r4, [r5, #29]

	// Setup EP0
	usb_d_ep_deinit(0);
    4156:	4620      	mov	r0, r4
    4158:	4b0a      	ldr	r3, [pc, #40]	; (4184 <usbdc_reset+0x40>)
    415a:	4798      	blx	r3
	usb_d_ep0_init(usbdc.ctrl_size);
    415c:	7f28      	ldrb	r0, [r5, #28]
    415e:	4b0a      	ldr	r3, [pc, #40]	; (4188 <usbdc_reset+0x44>)
    4160:	4798      	blx	r3
	usb_d_ep_register_callback(0, USB_D_EP_CB_SETUP, (FUNC_PTR)usbdc_cb_ctl_req);
    4162:	4a0a      	ldr	r2, [pc, #40]	; (418c <usbdc_reset+0x48>)
    4164:	4621      	mov	r1, r4
    4166:	4620      	mov	r0, r4
    4168:	4d09      	ldr	r5, [pc, #36]	; (4190 <usbdc_reset+0x4c>)
    416a:	47a8      	blx	r5
	usb_d_ep_register_callback(0, USB_D_EP_CB_XFER, (FUNC_PTR)usbdc_cb_ctl_done);
    416c:	4a09      	ldr	r2, [pc, #36]	; (4194 <usbdc_reset+0x50>)
    416e:	4631      	mov	r1, r6
    4170:	4620      	mov	r0, r4
    4172:	47a8      	blx	r5
	usb_d_ep_enable(0);
    4174:	4620      	mov	r0, r4
    4176:	4b08      	ldr	r3, [pc, #32]	; (4198 <usbdc_reset+0x54>)
    4178:	4798      	blx	r3
    417a:	bd70      	pop	{r4, r5, r6, pc}
    417c:	00004025 	.word	0x00004025
    4180:	2000090c 	.word	0x2000090c
    4184:	00001921 	.word	0x00001921
    4188:	0000190d 	.word	0x0000190d
    418c:	000041dd 	.word	0x000041dd
    4190:	00001b21 	.word	0x00001b21
    4194:	000040d1 	.word	0x000040d1
    4198:	0000194d 	.word	0x0000194d

0000419c <usbd_event_cb>:
 * \brief Callback invoked on USB device events
 * \param[in] ev Event code.
 * \param[in] param Event parameter for event handling.
 */
static void usbd_event_cb(const enum usb_event ev, const uint32_t param)
{
    419c:	b508      	push	{r3, lr}
	(void)param;

	switch (ev) {
    419e:	b110      	cbz	r0, 41a6 <usbd_event_cb+0xa>
    41a0:	2801      	cmp	r0, #1
    41a2:	d004      	beq.n	41ae <usbd_event_cb+0x12>
    41a4:	bd08      	pop	{r3, pc}
	case USB_EV_VBUS:
		usbdc_change_notify(USBDC_C_CONN, param);
    41a6:	2000      	movs	r0, #0
    41a8:	4b02      	ldr	r3, [pc, #8]	; (41b4 <usbd_event_cb+0x18>)
    41aa:	4798      	blx	r3
		break;
    41ac:	bd08      	pop	{r3, pc}

	case USB_EV_RESET:
		usbdc_reset();
    41ae:	4b02      	ldr	r3, [pc, #8]	; (41b8 <usbd_event_cb+0x1c>)
    41b0:	4798      	blx	r3
    41b2:	bd08      	pop	{r3, pc}
    41b4:	00004049 	.word	0x00004049
    41b8:	00004145 	.word	0x00004145

000041bc <usbdc_xfer>:

/**
 * \brief Issue USB device transfer
 */
int32_t usbdc_xfer(uint8_t ep, uint8_t *buf, uint32_t size, bool zlp)
{
    41bc:	b500      	push	{lr}
    41be:	b085      	sub	sp, #20
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    41c0:	9101      	str	r1, [sp, #4]
    41c2:	9202      	str	r2, [sp, #8]
    41c4:	f88d 000c 	strb.w	r0, [sp, #12]
    41c8:	f88d 300d 	strb.w	r3, [sp, #13]
	return usb_d_ep_transfer(&xfer);
    41cc:	a801      	add	r0, sp, #4
    41ce:	4b02      	ldr	r3, [pc, #8]	; (41d8 <usbdc_xfer+0x1c>)
    41d0:	4798      	blx	r3
}
    41d2:	b005      	add	sp, #20
    41d4:	f85d fb04 	ldr.w	pc, [sp], #4
    41d8:	00001999 	.word	0x00001999

000041dc <usbdc_cb_ctl_req>:
{
    41dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    41e0:	b083      	sub	sp, #12
    41e2:	4605      	mov	r5, r0
    41e4:	460c      	mov	r4, r1
	switch (usbdc_request_handler(ep, req, USB_SETUP_STAGE)) {
    41e6:	2200      	movs	r2, #0
    41e8:	4b9b      	ldr	r3, [pc, #620]	; (4458 <usbdc_cb_ctl_req+0x27c>)
    41ea:	4798      	blx	r3
    41ec:	f1b0 3fff 	cmp.w	r0, #4294967295
    41f0:	d00b      	beq.n	420a <usbdc_cb_ctl_req+0x2e>
    41f2:	2801      	cmp	r0, #1
    41f4:	f000 81e3 	beq.w	45be <usbdc_cb_ctl_req+0x3e2>
	switch (req->bmRequestType & (USB_REQT_TYPE_MASK | USB_REQT_DIR_IN)) {
    41f8:	7823      	ldrb	r3, [r4, #0]
    41fa:	f013 02e0 	ands.w	r2, r3, #224	; 0xe0
    41fe:	d008      	beq.n	4212 <usbdc_cb_ctl_req+0x36>
    4200:	2a80      	cmp	r2, #128	; 0x80
    4202:	f000 80f4 	beq.w	43ee <usbdc_cb_ctl_req+0x212>
		return false;
    4206:	2000      	movs	r0, #0
    4208:	e000      	b.n	420c <usbdc_cb_ctl_req+0x30>
		return false;
    420a:	2000      	movs	r0, #0
}
    420c:	b003      	add	sp, #12
    420e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	switch (req->bRequest) {
    4212:	7862      	ldrb	r2, [r4, #1]
    4214:	3a01      	subs	r2, #1
    4216:	2a0a      	cmp	r2, #10
    4218:	f200 81d3 	bhi.w	45c2 <usbdc_cb_ctl_req+0x3e6>
    421c:	e8df f012 	tbh	[pc, r2, lsl #1]
    4220:	01d10060 	.word	0x01d10060
    4224:	01d10076 	.word	0x01d10076
    4228:	01d1000b 	.word	0x01d1000b
    422c:	01d101d1 	.word	0x01d101d1
    4230:	01d10015 	.word	0x01d10015
    4234:	008c      	.short	0x008c
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    4236:	2301      	movs	r3, #1
    4238:	2200      	movs	r2, #0
    423a:	4611      	mov	r1, r2
    423c:	4628      	mov	r0, r5
    423e:	4c87      	ldr	r4, [pc, #540]	; (445c <usbdc_cb_ctl_req+0x280>)
    4240:	47a0      	blx	r4
    4242:	fab0 f080 	clz	r0, r0
    4246:	0940      	lsrs	r0, r0, #5
    4248:	e7e0      	b.n	420c <usbdc_cb_ctl_req+0x30>
		if (!usbdc_set_config(req->wValue)) {
    424a:	8862      	ldrh	r2, [r4, #2]
    424c:	b2d2      	uxtb	r2, r2
	if (cfg_value == 0) {
    424e:	b1ca      	cbz	r2, 4284 <usbdc_cb_ctl_req+0xa8>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, cfg_value);
    4250:	4b83      	ldr	r3, [pc, #524]	; (4460 <usbdc_cb_ctl_req+0x284>)
    4252:	681b      	ldr	r3, [r3, #0]
    4254:	6859      	ldr	r1, [r3, #4]
    4256:	6818      	ldr	r0, [r3, #0]
    4258:	4b82      	ldr	r3, [pc, #520]	; (4464 <usbdc_cb_ctl_req+0x288>)
    425a:	4798      	blx	r3
	if (NULL == cfg_desc) {
    425c:	2800      	cmp	r0, #0
    425e:	f000 81be 	beq.w	45de <usbdc_cb_ctl_req+0x402>
	return (ptr[0] + (ptr[1] << 8));
    4262:	78c2      	ldrb	r2, [r0, #3]
    4264:	7881      	ldrb	r1, [r0, #2]
    4266:	eb01 2102 	add.w	r1, r1, r2, lsl #8
	desc.eod  = cfg_desc + total_len;
    426a:	fa10 f181 	uxtah	r1, r0, r1
    426e:	9101      	str	r1, [sp, #4]
	desc.sod  = usb_find_desc(cfg_desc, desc.eod, USB_DT_INTERFACE);
    4270:	2204      	movs	r2, #4
    4272:	4b7d      	ldr	r3, [pc, #500]	; (4468 <usbdc_cb_ctl_req+0x28c>)
    4274:	4798      	blx	r3
    4276:	9000      	str	r0, [sp, #0]
	while (NULL != desc.sod) {
    4278:	b130      	cbz	r0, 4288 <usbdc_cb_ctl_req+0xac>
    427a:	24ff      	movs	r4, #255	; 0xff
			func       = (struct usbdf_driver *)usbdc.func_list.head;
    427c:	f8df 81e0 	ldr.w	r8, [pc, #480]	; 4460 <usbdc_cb_ctl_req+0x284>
		desc.sod = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    4280:	4f79      	ldr	r7, [pc, #484]	; (4468 <usbdc_cb_ctl_req+0x28c>)
    4282:	e018      	b.n	42b6 <usbdc_cb_ctl_req+0xda>
		usbdc_unconfig();
    4284:	4b79      	ldr	r3, [pc, #484]	; (446c <usbdc_cb_ctl_req+0x290>)
    4286:	4798      	blx	r3
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    4288:	2301      	movs	r3, #1
    428a:	2200      	movs	r2, #0
    428c:	4611      	mov	r1, r2
    428e:	4628      	mov	r0, r5
    4290:	4c72      	ldr	r4, [pc, #456]	; (445c <usbdc_cb_ctl_req+0x280>)
    4292:	47a0      	blx	r4
    4294:	fab0 f080 	clz	r0, r0
    4298:	0940      	lsrs	r0, r0, #5
    429a:	e7b7      	b.n	420c <usbdc_cb_ctl_req+0x30>
			last_iface = desc.sod[2];
    429c:	464c      	mov	r4, r9
    429e:	e000      	b.n	42a2 <usbdc_cb_ctl_req+0xc6>
    42a0:	464c      	mov	r4, r9
		desc.sod = usb_desc_next(desc.sod);
    42a2:	9800      	ldr	r0, [sp, #0]
	return (desc + usb_desc_len(desc));
    42a4:	7803      	ldrb	r3, [r0, #0]
    42a6:	4418      	add	r0, r3
    42a8:	9000      	str	r0, [sp, #0]
		desc.sod = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    42aa:	2204      	movs	r2, #4
    42ac:	9901      	ldr	r1, [sp, #4]
    42ae:	47b8      	blx	r7
    42b0:	9000      	str	r0, [sp, #0]
	while (NULL != desc.sod) {
    42b2:	2800      	cmp	r0, #0
    42b4:	d0e8      	beq.n	4288 <usbdc_cb_ctl_req+0xac>
		if (last_iface != desc.sod[2] /* bInterfaceNumber */) {
    42b6:	f890 9002 	ldrb.w	r9, [r0, #2]
    42ba:	45a1      	cmp	r9, r4
    42bc:	d0f1      	beq.n	42a2 <usbdc_cb_ctl_req+0xc6>
			func       = (struct usbdf_driver *)usbdc.func_list.head;
    42be:	f8d8 4010 	ldr.w	r4, [r8, #16]
			while (NULL != func) {
    42c2:	2c00      	cmp	r4, #0
    42c4:	d0ea      	beq.n	429c <usbdc_cb_ctl_req+0xc0>
				if (func->ctrl(func, USBDF_ENABLE, &desc)) {
    42c6:	2600      	movs	r6, #0
    42c8:	6863      	ldr	r3, [r4, #4]
    42ca:	466a      	mov	r2, sp
    42cc:	4631      	mov	r1, r6
    42ce:	4620      	mov	r0, r4
    42d0:	4798      	blx	r3
    42d2:	2800      	cmp	r0, #0
    42d4:	d0e4      	beq.n	42a0 <usbdc_cb_ctl_req+0xc4>
					func = func->next;
    42d6:	6824      	ldr	r4, [r4, #0]
			while (NULL != func) {
    42d8:	2c00      	cmp	r4, #0
    42da:	d1f5      	bne.n	42c8 <usbdc_cb_ctl_req+0xec>
			last_iface = desc.sod[2];
    42dc:	464c      	mov	r4, r9
    42de:	e7e0      	b.n	42a2 <usbdc_cb_ctl_req+0xc6>
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    42e0:	f003 031f 	and.w	r3, r3, #31
    42e4:	2b02      	cmp	r3, #2
    42e6:	f040 816e 	bne.w	45c6 <usbdc_cb_ctl_req+0x3ea>
		if (req->wLength != 0) {
    42ea:	88e3      	ldrh	r3, [r4, #6]
    42ec:	b10b      	cbz	r3, 42f2 <usbdc_cb_ctl_req+0x116>
			return false;
    42ee:	2000      	movs	r0, #0
    42f0:	e78c      	b.n	420c <usbdc_cb_ctl_req+0x30>
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_CLR);
    42f2:	88a0      	ldrh	r0, [r4, #4]
    42f4:	2100      	movs	r1, #0
    42f6:	b2c0      	uxtb	r0, r0
    42f8:	4b5d      	ldr	r3, [pc, #372]	; (4470 <usbdc_cb_ctl_req+0x294>)
    42fa:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
    42fc:	2301      	movs	r3, #1
    42fe:	2200      	movs	r2, #0
    4300:	4611      	mov	r1, r2
    4302:	4628      	mov	r0, r5
    4304:	4c55      	ldr	r4, [pc, #340]	; (445c <usbdc_cb_ctl_req+0x280>)
    4306:	47a0      	blx	r4
		return true;
    4308:	2001      	movs	r0, #1
    430a:	e77f      	b.n	420c <usbdc_cb_ctl_req+0x30>
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    430c:	f003 031f 	and.w	r3, r3, #31
    4310:	2b02      	cmp	r3, #2
    4312:	f040 815a 	bne.w	45ca <usbdc_cb_ctl_req+0x3ee>
		if (req->wLength != 0) {
    4316:	88e3      	ldrh	r3, [r4, #6]
    4318:	b10b      	cbz	r3, 431e <usbdc_cb_ctl_req+0x142>
			return false;
    431a:	2000      	movs	r0, #0
    431c:	e776      	b.n	420c <usbdc_cb_ctl_req+0x30>
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_SET);
    431e:	88a0      	ldrh	r0, [r4, #4]
    4320:	2101      	movs	r1, #1
    4322:	b2c0      	uxtb	r0, r0
    4324:	4b52      	ldr	r3, [pc, #328]	; (4470 <usbdc_cb_ctl_req+0x294>)
    4326:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
    4328:	2301      	movs	r3, #1
    432a:	2200      	movs	r2, #0
    432c:	4611      	mov	r1, r2
    432e:	4628      	mov	r0, r5
    4330:	4c4a      	ldr	r4, [pc, #296]	; (445c <usbdc_cb_ctl_req+0x280>)
    4332:	47a0      	blx	r4
		return true;
    4334:	2001      	movs	r0, #1
    4336:	e769      	b.n	420c <usbdc_cb_ctl_req+0x30>
		return usbdc_set_interface(req->wValue, req->wIndex);
    4338:	8866      	ldrh	r6, [r4, #2]
    433a:	88a4      	ldrh	r4, [r4, #4]
		ifc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, usbdc.cfg_value);
    433c:	4a48      	ldr	r2, [pc, #288]	; (4460 <usbdc_cb_ctl_req+0x284>)
    433e:	6813      	ldr	r3, [r2, #0]
    4340:	7ed2      	ldrb	r2, [r2, #27]
    4342:	6859      	ldr	r1, [r3, #4]
    4344:	6818      	ldr	r0, [r3, #0]
    4346:	4b47      	ldr	r3, [pc, #284]	; (4464 <usbdc_cb_ctl_req+0x288>)
    4348:	4798      	blx	r3
	if (NULL == ifc) {
    434a:	2800      	cmp	r0, #0
    434c:	d045      	beq.n	43da <usbdc_cb_ctl_req+0x1fe>
	desc.sod = ifc;
    434e:	9000      	str	r0, [sp, #0]
	return (ptr[0] + (ptr[1] << 8));
    4350:	78c2      	ldrb	r2, [r0, #3]
    4352:	7881      	ldrb	r1, [r0, #2]
    4354:	eb01 2102 	add.w	r1, r1, r2, lsl #8
	desc.eod = ifc + usb_cfg_desc_total_len(ifc);
    4358:	fa10 f181 	uxtah	r1, r0, r1
    435c:	9101      	str	r1, [sp, #4]
	if (NULL == (ifc = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE))) {
    435e:	2204      	movs	r2, #4
    4360:	4b41      	ldr	r3, [pc, #260]	; (4468 <usbdc_cb_ctl_req+0x28c>)
    4362:	4798      	blx	r3
    4364:	4603      	mov	r3, r0
    4366:	2800      	cmp	r0, #0
    4368:	d039      	beq.n	43de <usbdc_cb_ctl_req+0x202>
		ifc      = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    436a:	2704      	movs	r7, #4
    436c:	4d3e      	ldr	r5, [pc, #248]	; (4468 <usbdc_cb_ctl_req+0x28c>)
    436e:	e008      	b.n	4382 <usbdc_cb_ctl_req+0x1a6>
		desc.sod = usb_desc_next(desc.sod);
    4370:	9800      	ldr	r0, [sp, #0]
	return (desc + usb_desc_len(desc));
    4372:	7803      	ldrb	r3, [r0, #0]
    4374:	4418      	add	r0, r3
    4376:	9000      	str	r0, [sp, #0]
		ifc      = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    4378:	463a      	mov	r2, r7
    437a:	9901      	ldr	r1, [sp, #4]
    437c:	47a8      	blx	r5
		if (NULL == ifc) {
    437e:	4603      	mov	r3, r0
    4380:	b378      	cbz	r0, 43e2 <usbdc_cb_ctl_req+0x206>
	while (ifc[2] != ifc_id || ifc[3] != alt_set) {
    4382:	789a      	ldrb	r2, [r3, #2]
    4384:	42a2      	cmp	r2, r4
    4386:	d1f3      	bne.n	4370 <usbdc_cb_ctl_req+0x194>
    4388:	78da      	ldrb	r2, [r3, #3]
    438a:	42b2      	cmp	r2, r6
    438c:	d1f0      	bne.n	4370 <usbdc_cb_ctl_req+0x194>
	desc.sod = ifc;
    438e:	9300      	str	r3, [sp, #0]
	func     = (struct usbdf_driver *)usbdc.func_list.head;
    4390:	4b33      	ldr	r3, [pc, #204]	; (4460 <usbdc_cb_ctl_req+0x284>)
    4392:	691d      	ldr	r5, [r3, #16]
	while (NULL != func) {
    4394:	b33d      	cbz	r5, 43e6 <usbdc_cb_ctl_req+0x20a>
		if (func->ctrl(func, USBDF_DISABLE, &desc)) {
    4396:	2701      	movs	r7, #1
    4398:	686b      	ldr	r3, [r5, #4]
    439a:	466a      	mov	r2, sp
    439c:	4639      	mov	r1, r7
    439e:	4628      	mov	r0, r5
    43a0:	4798      	blx	r3
    43a2:	b120      	cbz	r0, 43ae <usbdc_cb_ctl_req+0x1d2>
			func = func->next;
    43a4:	682d      	ldr	r5, [r5, #0]
	while (NULL != func) {
    43a6:	2d00      	cmp	r5, #0
    43a8:	d1f6      	bne.n	4398 <usbdc_cb_ctl_req+0x1bc>
	return false;
    43aa:	2000      	movs	r0, #0
    43ac:	e72e      	b.n	420c <usbdc_cb_ctl_req+0x30>
		} else if (ERR_NONE == func->ctrl(func, USBDF_ENABLE, &desc)) {
    43ae:	686b      	ldr	r3, [r5, #4]
    43b0:	466a      	mov	r2, sp
    43b2:	2100      	movs	r1, #0
    43b4:	4628      	mov	r0, r5
    43b6:	4798      	blx	r3
    43b8:	b9b8      	cbnz	r0, 43ea <usbdc_cb_ctl_req+0x20e>
			if (alt_set) {
    43ba:	b136      	cbz	r6, 43ca <usbdc_cb_ctl_req+0x1ee>
				usbdc.ifc_alt_map |= 1 << ifc_id;
    43bc:	4a28      	ldr	r2, [pc, #160]	; (4460 <usbdc_cb_ctl_req+0x284>)
    43be:	2301      	movs	r3, #1
    43c0:	fa03 f404 	lsl.w	r4, r3, r4
    43c4:	7f53      	ldrb	r3, [r2, #29]
    43c6:	4323      	orrs	r3, r4
    43c8:	7753      	strb	r3, [r2, #29]
			usbdc_xfer(0, NULL, 0, 0);
    43ca:	2300      	movs	r3, #0
    43cc:	461a      	mov	r2, r3
    43ce:	4619      	mov	r1, r3
    43d0:	4618      	mov	r0, r3
    43d2:	4c22      	ldr	r4, [pc, #136]	; (445c <usbdc_cb_ctl_req+0x280>)
    43d4:	47a0      	blx	r4
			return true;
    43d6:	2001      	movs	r0, #1
    43d8:	e718      	b.n	420c <usbdc_cb_ctl_req+0x30>
		return false;
    43da:	2000      	movs	r0, #0
    43dc:	e716      	b.n	420c <usbdc_cb_ctl_req+0x30>
		return false;
    43de:	2000      	movs	r0, #0
    43e0:	e714      	b.n	420c <usbdc_cb_ctl_req+0x30>
			return false;
    43e2:	2000      	movs	r0, #0
    43e4:	e712      	b.n	420c <usbdc_cb_ctl_req+0x30>
	return false;
    43e6:	2000      	movs	r0, #0
    43e8:	e710      	b.n	420c <usbdc_cb_ctl_req+0x30>
			return false;
    43ea:	2000      	movs	r0, #0
    43ec:	e70e      	b.n	420c <usbdc_cb_ctl_req+0x30>
	switch (req->bRequest) {
    43ee:	7862      	ldrb	r2, [r4, #1]
    43f0:	2a0a      	cmp	r2, #10
    43f2:	f200 80ec 	bhi.w	45ce <usbdc_cb_ctl_req+0x3f2>
    43f6:	e8df f012 	tbh	[pc, r2, lsl #1]
    43fa:	008e      	.short	0x008e
    43fc:	00ea00ea 	.word	0x00ea00ea
    4400:	00ea00ea 	.word	0x00ea00ea
    4404:	000b00ea 	.word	0x000b00ea
    4408:	008200ea 	.word	0x008200ea
    440c:	00b200ea 	.word	0x00b200ea
	uint8_t type = (uint8_t)(req->wValue >> 8);
    4410:	8862      	ldrh	r2, [r4, #2]
	switch (type) {
    4412:	0a13      	lsrs	r3, r2, #8
    4414:	2b02      	cmp	r3, #2
    4416:	d02d      	beq.n	4474 <usbdc_cb_ctl_req+0x298>
    4418:	2b03      	cmp	r3, #3
    441a:	d050      	beq.n	44be <usbdc_cb_ctl_req+0x2e2>
    441c:	2b01      	cmp	r3, #1
    441e:	d001      	beq.n	4424 <usbdc_cb_ctl_req+0x248>
	return false;
    4420:	2000      	movs	r0, #0
    4422:	e6f3      	b.n	420c <usbdc_cb_ctl_req+0x30>
	uint16_t length   = req->wLength;
    4424:	88e2      	ldrh	r2, [r4, #6]
    4426:	2a12      	cmp	r2, #18
    4428:	bf28      	it	cs
    442a:	2212      	movcs	r2, #18
    442c:	4614      	mov	r4, r2
		dev_desc = usb_find_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, USB_DT_DEVICE);
    442e:	4b0c      	ldr	r3, [pc, #48]	; (4460 <usbdc_cb_ctl_req+0x284>)
    4430:	681b      	ldr	r3, [r3, #0]
    4432:	2201      	movs	r2, #1
    4434:	6859      	ldr	r1, [r3, #4]
    4436:	6818      	ldr	r0, [r3, #0]
    4438:	4b0b      	ldr	r3, [pc, #44]	; (4468 <usbdc_cb_ctl_req+0x28c>)
    443a:	4798      	blx	r3
	if (!dev_desc) {
    443c:	4601      	mov	r1, r0
    443e:	2800      	cmp	r0, #0
    4440:	f000 80c7 	beq.w	45d2 <usbdc_cb_ctl_req+0x3f6>
	if (ERR_NONE != usbdc_xfer(ep, dev_desc, length, false)) {
    4444:	2300      	movs	r3, #0
    4446:	4622      	mov	r2, r4
    4448:	4628      	mov	r0, r5
    444a:	4c04      	ldr	r4, [pc, #16]	; (445c <usbdc_cb_ctl_req+0x280>)
    444c:	47a0      	blx	r4
    444e:	fab0 f080 	clz	r0, r0
    4452:	0940      	lsrs	r0, r0, #5
    4454:	e6da      	b.n	420c <usbdc_cb_ctl_req+0x30>
    4456:	bf00      	nop
    4458:	00004071 	.word	0x00004071
    445c:	000041bd 	.word	0x000041bd
    4460:	2000090c 	.word	0x2000090c
    4464:	00004781 	.word	0x00004781
    4468:	00004701 	.word	0x00004701
    446c:	00004025 	.word	0x00004025
    4470:	00001ab9 	.word	0x00001ab9
	uint16_t length   = req->wLength;
    4474:	88e4      	ldrh	r4, [r4, #6]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    4476:	4b5b      	ldr	r3, [pc, #364]	; (45e4 <usbdc_cb_ctl_req+0x408>)
    4478:	7f1e      	ldrb	r6, [r3, #28]
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index + 1);
    447a:	681b      	ldr	r3, [r3, #0]
    447c:	3201      	adds	r2, #1
    447e:	b2d2      	uxtb	r2, r2
    4480:	6859      	ldr	r1, [r3, #4]
    4482:	6818      	ldr	r0, [r3, #0]
    4484:	4b58      	ldr	r3, [pc, #352]	; (45e8 <usbdc_cb_ctl_req+0x40c>)
    4486:	4798      	blx	r3
	if (NULL == cfg_desc) {
    4488:	4601      	mov	r1, r0
    448a:	2800      	cmp	r0, #0
    448c:	f000 80a3 	beq.w	45d6 <usbdc_cb_ctl_req+0x3fa>
	return (ptr[0] + (ptr[1] << 8));
    4490:	78c3      	ldrb	r3, [r0, #3]
    4492:	7882      	ldrb	r2, [r0, #2]
    4494:	eb02 2203 	add.w	r2, r2, r3, lsl #8
    4498:	b292      	uxth	r2, r2
	if (length <= total_len) {
    449a:	4294      	cmp	r4, r2
    449c:	d90d      	bls.n	44ba <usbdc_cb_ctl_req+0x2de>
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    449e:	3e01      	subs	r6, #1
    44a0:	4226      	tst	r6, r4
    44a2:	bf0c      	ite	eq
    44a4:	2301      	moveq	r3, #1
    44a6:	2300      	movne	r3, #0
		length = total_len;
    44a8:	4614      	mov	r4, r2
	if (ERR_NONE != usbdc_xfer(ep, cfg_desc, length, need_zlp)) {
    44aa:	4622      	mov	r2, r4
    44ac:	4628      	mov	r0, r5
    44ae:	4c4f      	ldr	r4, [pc, #316]	; (45ec <usbdc_cb_ctl_req+0x410>)
    44b0:	47a0      	blx	r4
    44b2:	fab0 f080 	clz	r0, r0
    44b6:	0940      	lsrs	r0, r0, #5
    44b8:	e6a8      	b.n	420c <usbdc_cb_ctl_req+0x30>
		need_zlp = false;
    44ba:	2300      	movs	r3, #0
    44bc:	e7f5      	b.n	44aa <usbdc_cb_ctl_req+0x2ce>
	uint16_t length   = req->wLength;
    44be:	88e4      	ldrh	r4, [r4, #6]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    44c0:	4b48      	ldr	r3, [pc, #288]	; (45e4 <usbdc_cb_ctl_req+0x408>)
    44c2:	7f1e      	ldrb	r6, [r3, #28]
	str_desc = usb_find_str_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index);
    44c4:	681b      	ldr	r3, [r3, #0]
    44c6:	b2d2      	uxtb	r2, r2
    44c8:	6859      	ldr	r1, [r3, #4]
    44ca:	6818      	ldr	r0, [r3, #0]
    44cc:	4b48      	ldr	r3, [pc, #288]	; (45f0 <usbdc_cb_ctl_req+0x414>)
    44ce:	4798      	blx	r3
	if (NULL == str_desc) {
    44d0:	4601      	mov	r1, r0
    44d2:	2800      	cmp	r0, #0
    44d4:	f000 8081 	beq.w	45da <usbdc_cb_ctl_req+0x3fe>
	if (length <= str_desc[0]) {
    44d8:	7802      	ldrb	r2, [r0, #0]
    44da:	4294      	cmp	r4, r2
    44dc:	d90d      	bls.n	44fa <usbdc_cb_ctl_req+0x31e>
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    44de:	3e01      	subs	r6, #1
    44e0:	4226      	tst	r6, r4
    44e2:	bf0c      	ite	eq
    44e4:	2301      	moveq	r3, #1
    44e6:	2300      	movne	r3, #0
		length = str_desc[0];
    44e8:	4614      	mov	r4, r2
	if (ERR_NONE != usbdc_xfer(ep, str_desc, length, need_zlp)) {
    44ea:	4622      	mov	r2, r4
    44ec:	4628      	mov	r0, r5
    44ee:	4c3f      	ldr	r4, [pc, #252]	; (45ec <usbdc_cb_ctl_req+0x410>)
    44f0:	47a0      	blx	r4
    44f2:	fab0 f080 	clz	r0, r0
    44f6:	0940      	lsrs	r0, r0, #5
    44f8:	e688      	b.n	420c <usbdc_cb_ctl_req+0x30>
		need_zlp = false;
    44fa:	2300      	movs	r3, #0
    44fc:	e7f5      	b.n	44ea <usbdc_cb_ctl_req+0x30e>
		*(uint8_t *)usbdc.ctrl_buf = usbdc.cfg_value;
    44fe:	4939      	ldr	r1, [pc, #228]	; (45e4 <usbdc_cb_ctl_req+0x408>)
    4500:	694b      	ldr	r3, [r1, #20]
    4502:	7eca      	ldrb	r2, [r1, #27]
    4504:	701a      	strb	r2, [r3, #0]
		usbdc_xfer(ep, usbdc.ctrl_buf, 1, false);
    4506:	2300      	movs	r3, #0
    4508:	2201      	movs	r2, #1
    450a:	6949      	ldr	r1, [r1, #20]
    450c:	4628      	mov	r0, r5
    450e:	4c37      	ldr	r4, [pc, #220]	; (45ec <usbdc_cb_ctl_req+0x410>)
    4510:	47a0      	blx	r4
		return true;
    4512:	2001      	movs	r0, #1
    4514:	e67a      	b.n	420c <usbdc_cb_ctl_req+0x30>
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    4516:	f003 031f 	and.w	r3, r3, #31
    451a:	2b01      	cmp	r3, #1
    451c:	d903      	bls.n	4526 <usbdc_cb_ctl_req+0x34a>
    451e:	2b02      	cmp	r3, #2
    4520:	d010      	beq.n	4544 <usbdc_cb_ctl_req+0x368>
		return false;
    4522:	2000      	movs	r0, #0
    4524:	e672      	b.n	420c <usbdc_cb_ctl_req+0x30>
		st = 0;
    4526:	2300      	movs	r3, #0
    4528:	9300      	str	r3, [sp, #0]
	memcpy(usbdc.ctrl_buf, &st, 2);
    452a:	492e      	ldr	r1, [pc, #184]	; (45e4 <usbdc_cb_ctl_req+0x408>)
    452c:	694b      	ldr	r3, [r1, #20]
    452e:	f8bd 2000 	ldrh.w	r2, [sp]
    4532:	801a      	strh	r2, [r3, #0]
	usbdc_xfer(ep, usbdc.ctrl_buf, 2, false);
    4534:	2300      	movs	r3, #0
    4536:	2202      	movs	r2, #2
    4538:	6949      	ldr	r1, [r1, #20]
    453a:	4628      	mov	r0, r5
    453c:	4c2b      	ldr	r4, [pc, #172]	; (45ec <usbdc_cb_ctl_req+0x410>)
    453e:	47a0      	blx	r4
	return true;
    4540:	2001      	movs	r0, #1
    4542:	e663      	b.n	420c <usbdc_cb_ctl_req+0x30>
		st = usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_GET);
    4544:	88a0      	ldrh	r0, [r4, #4]
    4546:	2102      	movs	r1, #2
    4548:	b2c0      	uxtb	r0, r0
    454a:	4b2a      	ldr	r3, [pc, #168]	; (45f4 <usbdc_cb_ctl_req+0x418>)
    454c:	4798      	blx	r3
		if (st < 0) {
    454e:	2800      	cmp	r0, #0
    4550:	db03      	blt.n	455a <usbdc_cb_ctl_req+0x37e>
		st = st & 0x1;
    4552:	f000 0001 	and.w	r0, r0, #1
    4556:	9000      	str	r0, [sp, #0]
    4558:	e7e7      	b.n	452a <usbdc_cb_ctl_req+0x34e>
			return false;
    455a:	2000      	movs	r0, #0
    455c:	e656      	b.n	420c <usbdc_cb_ctl_req+0x30>
	if (!(usbdc.ifc_alt_map & (1 << req->wIndex))) {
    455e:	4b21      	ldr	r3, [pc, #132]	; (45e4 <usbdc_cb_ctl_req+0x408>)
    4560:	7f5b      	ldrb	r3, [r3, #29]
    4562:	88a2      	ldrh	r2, [r4, #4]
    4564:	4113      	asrs	r3, r2
    4566:	f013 0f01 	tst.w	r3, #1
    456a:	d012      	beq.n	4592 <usbdc_cb_ctl_req+0x3b6>
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    456c:	4b1d      	ldr	r3, [pc, #116]	; (45e4 <usbdc_cb_ctl_req+0x408>)
    456e:	691d      	ldr	r5, [r3, #16]
	return false;
    4570:	2000      	movs	r0, #0
	while (NULL != func) {
    4572:	2d00      	cmp	r5, #0
    4574:	f43f ae4a 	beq.w	420c <usbdc_cb_ctl_req+0x30>
		if (0 > (rc = func->ctrl(func, USBDF_GET_IFACE, req))) {
    4578:	2602      	movs	r6, #2
    457a:	686b      	ldr	r3, [r5, #4]
    457c:	4622      	mov	r2, r4
    457e:	4631      	mov	r1, r6
    4580:	4628      	mov	r0, r5
    4582:	4798      	blx	r3
    4584:	2800      	cmp	r0, #0
    4586:	da0f      	bge.n	45a8 <usbdc_cb_ctl_req+0x3cc>
			func = func->next;
    4588:	682d      	ldr	r5, [r5, #0]
	while (NULL != func) {
    458a:	2d00      	cmp	r5, #0
    458c:	d1f5      	bne.n	457a <usbdc_cb_ctl_req+0x39e>
	return false;
    458e:	2000      	movs	r0, #0
    4590:	e63c      	b.n	420c <usbdc_cb_ctl_req+0x30>
		usbdc.ctrl_buf[0] = 0;
    4592:	4914      	ldr	r1, [pc, #80]	; (45e4 <usbdc_cb_ctl_req+0x408>)
    4594:	694b      	ldr	r3, [r1, #20]
    4596:	2000      	movs	r0, #0
    4598:	7018      	strb	r0, [r3, #0]
		usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    459a:	4603      	mov	r3, r0
    459c:	2201      	movs	r2, #1
    459e:	6949      	ldr	r1, [r1, #20]
    45a0:	4c12      	ldr	r4, [pc, #72]	; (45ec <usbdc_cb_ctl_req+0x410>)
    45a2:	47a0      	blx	r4
		return true;
    45a4:	2001      	movs	r0, #1
    45a6:	e631      	b.n	420c <usbdc_cb_ctl_req+0x30>
			usbdc.ctrl_buf[0] = (uint8_t)rc;
    45a8:	490e      	ldr	r1, [pc, #56]	; (45e4 <usbdc_cb_ctl_req+0x408>)
    45aa:	694b      	ldr	r3, [r1, #20]
    45ac:	7018      	strb	r0, [r3, #0]
			usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    45ae:	2300      	movs	r3, #0
    45b0:	2201      	movs	r2, #1
    45b2:	6949      	ldr	r1, [r1, #20]
    45b4:	4618      	mov	r0, r3
    45b6:	4c0d      	ldr	r4, [pc, #52]	; (45ec <usbdc_cb_ctl_req+0x410>)
    45b8:	47a0      	blx	r4
			return true;
    45ba:	2001      	movs	r0, #1
    45bc:	e626      	b.n	420c <usbdc_cb_ctl_req+0x30>
		return true;
    45be:	2001      	movs	r0, #1
    45c0:	e624      	b.n	420c <usbdc_cb_ctl_req+0x30>
		return false;
    45c2:	2000      	movs	r0, #0
    45c4:	e622      	b.n	420c <usbdc_cb_ctl_req+0x30>
		return false;
    45c6:	2000      	movs	r0, #0
    45c8:	e620      	b.n	420c <usbdc_cb_ctl_req+0x30>
		return false;
    45ca:	2000      	movs	r0, #0
    45cc:	e61e      	b.n	420c <usbdc_cb_ctl_req+0x30>
		return false;
    45ce:	2000      	movs	r0, #0
    45d0:	e61c      	b.n	420c <usbdc_cb_ctl_req+0x30>
		return false;
    45d2:	2000      	movs	r0, #0
    45d4:	e61a      	b.n	420c <usbdc_cb_ctl_req+0x30>
		return false;
    45d6:	2000      	movs	r0, #0
    45d8:	e618      	b.n	420c <usbdc_cb_ctl_req+0x30>
		return false;
    45da:	2000      	movs	r0, #0
    45dc:	e616      	b.n	420c <usbdc_cb_ctl_req+0x30>
			return false;
    45de:	2000      	movs	r0, #0
    45e0:	e614      	b.n	420c <usbdc_cb_ctl_req+0x30>
    45e2:	bf00      	nop
    45e4:	2000090c 	.word	0x2000090c
    45e8:	00004781 	.word	0x00004781
    45ec:	000041bd 	.word	0x000041bd
    45f0:	000047e9 	.word	0x000047e9
    45f4:	00001ab9 	.word	0x00001ab9

000045f8 <usbdc_register_handler>:

/**
 * \brief Register the handler
 */
void usbdc_register_handler(enum usbdc_handler_type type, const struct usbdc_handler *h)
{
    45f8:	b508      	push	{r3, lr}
	switch (type) {
    45fa:	2801      	cmp	r0, #1
    45fc:	d007      	beq.n	460e <usbdc_register_handler+0x16>
    45fe:	b110      	cbz	r0, 4606 <usbdc_register_handler+0xe>
    4600:	2802      	cmp	r0, #2
    4602:	d008      	beq.n	4616 <usbdc_register_handler+0x1e>
    4604:	bd08      	pop	{r3, pc}
	case USBDC_HDL_SOF:
		list_insert_at_end(&usbdc.handlers.sof_list, (void *)h);
    4606:	4806      	ldr	r0, [pc, #24]	; (4620 <usbdc_register_handler+0x28>)
    4608:	4b06      	ldr	r3, [pc, #24]	; (4624 <usbdc_register_handler+0x2c>)
    460a:	4798      	blx	r3
		break;
    460c:	bd08      	pop	{r3, pc}
	case USBDC_HDL_REQ:
		list_insert_at_end(&usbdc.handlers.req_list, (void *)h);
    460e:	4806      	ldr	r0, [pc, #24]	; (4628 <usbdc_register_handler+0x30>)
    4610:	4b04      	ldr	r3, [pc, #16]	; (4624 <usbdc_register_handler+0x2c>)
    4612:	4798      	blx	r3
		break;
    4614:	bd08      	pop	{r3, pc}
	case USBDC_HDL_CHANGE:
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
    4616:	4805      	ldr	r0, [pc, #20]	; (462c <usbdc_register_handler+0x34>)
    4618:	4b02      	ldr	r3, [pc, #8]	; (4624 <usbdc_register_handler+0x2c>)
    461a:	4798      	blx	r3
    461c:	bd08      	pop	{r3, pc}
    461e:	bf00      	nop
    4620:	20000910 	.word	0x20000910
    4624:	00001bc9 	.word	0x00001bc9
    4628:	20000914 	.word	0x20000914
    462c:	20000918 	.word	0x20000918

00004630 <usbdc_init>:

/**
 * \brief Initialize the USB device core driver
 */
int32_t usbdc_init(uint8_t *ctrl_buf)
{
    4630:	b538      	push	{r3, r4, r5, lr}
	ASSERT(ctrl_buf);
    4632:	4605      	mov	r5, r0
    4634:	f240 3255 	movw	r2, #853	; 0x355
    4638:	490c      	ldr	r1, [pc, #48]	; (466c <usbdc_init+0x3c>)
    463a:	3000      	adds	r0, #0
    463c:	bf18      	it	ne
    463e:	2001      	movne	r0, #1
    4640:	4b0b      	ldr	r3, [pc, #44]	; (4670 <usbdc_init+0x40>)
    4642:	4798      	blx	r3

	int32_t rc;

	rc = usb_d_init();
    4644:	4b0b      	ldr	r3, [pc, #44]	; (4674 <usbdc_init+0x44>)
    4646:	4798      	blx	r3
	if (rc < 0) {
    4648:	2800      	cmp	r0, #0
    464a:	db0e      	blt.n	466a <usbdc_init+0x3a>
		return rc;
	}

	memset(&usbdc, 0, sizeof(usbdc));
    464c:	4c0a      	ldr	r4, [pc, #40]	; (4678 <usbdc_init+0x48>)
    464e:	2220      	movs	r2, #32
    4650:	2100      	movs	r1, #0
    4652:	4620      	mov	r0, r4
    4654:	4b09      	ldr	r3, [pc, #36]	; (467c <usbdc_init+0x4c>)
    4656:	4798      	blx	r3
	usbdc.ctrl_buf = ctrl_buf;
    4658:	6165      	str	r5, [r4, #20]
	usb_d_register_callback(USB_D_CB_SOF, (FUNC_PTR)usbd_sof_cb);
    465a:	4909      	ldr	r1, [pc, #36]	; (4680 <usbdc_init+0x50>)
    465c:	2000      	movs	r0, #0
    465e:	4c09      	ldr	r4, [pc, #36]	; (4684 <usbdc_init+0x54>)
    4660:	47a0      	blx	r4
	usb_d_register_callback(USB_D_CB_EVENT, (FUNC_PTR)usbd_event_cb);
    4662:	4909      	ldr	r1, [pc, #36]	; (4688 <usbdc_init+0x58>)
    4664:	2001      	movs	r0, #1
    4666:	47a0      	blx	r4

	return 0;
    4668:	2000      	movs	r0, #0
}
    466a:	bd38      	pop	{r3, r4, r5, pc}
    466c:	00005288 	.word	0x00005288
    4670:	00001b6d 	.word	0x00001b6d
    4674:	00001821 	.word	0x00001821
    4678:	2000090c 	.word	0x2000090c
    467c:	00004a25 	.word	0x00004a25
    4680:	000040b1 	.word	0x000040b1
    4684:	00001889 	.word	0x00001889
    4688:	0000419d 	.word	0x0000419d

0000468c <usbdc_register_function>:
 * \brief Register/unregister function support of a USB device function
 *
 * Must be invoked when USB device is stopped.
 */
void usbdc_register_function(struct usbdf_driver *func)
{
    468c:	b508      	push	{r3, lr}
	list_insert_at_end(&usbdc.func_list, func);
    468e:	4601      	mov	r1, r0
    4690:	4801      	ldr	r0, [pc, #4]	; (4698 <usbdc_register_function+0xc>)
    4692:	4b02      	ldr	r3, [pc, #8]	; (469c <usbdc_register_function+0x10>)
    4694:	4798      	blx	r3
    4696:	bd08      	pop	{r3, pc}
    4698:	2000091c 	.word	0x2000091c
    469c:	00001bc9 	.word	0x00001bc9

000046a0 <usbdc_start>:

/**
 * \brief Start the USB device driver with specific descriptors set
 */
int32_t usbdc_start(struct usbd_descriptors *desces)
{
    46a0:	b508      	push	{r3, lr}
	if (usbdc.state >= USBD_S_POWER) {
    46a2:	4b0a      	ldr	r3, [pc, #40]	; (46cc <usbdc_start+0x2c>)
    46a4:	7e9b      	ldrb	r3, [r3, #26]
    46a6:	b95b      	cbnz	r3, 46c0 <usbdc_start+0x20>
		return ERR_BUSY;
	}

	if (desces) {
    46a8:	b168      	cbz	r0, 46c6 <usbdc_start+0x26>
		usbdc.desces.ls_fs = desces;
    46aa:	4b08      	ldr	r3, [pc, #32]	; (46cc <usbdc_start+0x2c>)
    46ac:	6018      	str	r0, [r3, #0]
#endif
	} else {
		return ERR_BAD_DATA;
	}

	usbdc.ctrl_size = desces->sod[7];
    46ae:	6802      	ldr	r2, [r0, #0]
    46b0:	79d2      	ldrb	r2, [r2, #7]
    46b2:	771a      	strb	r2, [r3, #28]
	usbdc.state     = USBD_S_POWER;
    46b4:	2201      	movs	r2, #1
    46b6:	769a      	strb	r2, [r3, #26]
	usb_d_enable();
    46b8:	4b05      	ldr	r3, [pc, #20]	; (46d0 <usbdc_start+0x30>)
    46ba:	4798      	blx	r3
	return ERR_NONE;
    46bc:	2000      	movs	r0, #0
    46be:	bd08      	pop	{r3, pc}
		return ERR_BUSY;
    46c0:	f06f 0003 	mvn.w	r0, #3
    46c4:	bd08      	pop	{r3, pc}
		return ERR_BAD_DATA;
    46c6:	f06f 0008 	mvn.w	r0, #8
}
    46ca:	bd08      	pop	{r3, pc}
    46cc:	2000090c 	.word	0x2000090c
    46d0:	00001895 	.word	0x00001895

000046d4 <usbdc_attach>:

/**
 * \brief Attach the USB device to host
 */
void usbdc_attach(void)
{
    46d4:	b508      	push	{r3, lr}
	usb_d_attach();
    46d6:	4b01      	ldr	r3, [pc, #4]	; (46dc <usbdc_attach+0x8>)
    46d8:	4798      	blx	r3
    46da:	bd08      	pop	{r3, pc}
    46dc:	000018a1 	.word	0x000018a1

000046e0 <usbdc_get_ctrl_buffer>:
 * \brief Return USB Device endpoint0 buffer
 */
uint8_t *usbdc_get_ctrl_buffer(void)
{
	return usbdc.ctrl_buf;
}
    46e0:	4b01      	ldr	r3, [pc, #4]	; (46e8 <usbdc_get_ctrl_buffer+0x8>)
    46e2:	6958      	ldr	r0, [r3, #20]
    46e4:	4770      	bx	lr
    46e6:	bf00      	nop
    46e8:	2000090c 	.word	0x2000090c

000046ec <usbdc_get_state>:
/**
 * \brief Return current USB state
 */
uint8_t usbdc_get_state(void)
{
	if (usbdc.state & USBD_S_SUSPEND) {
    46ec:	4b03      	ldr	r3, [pc, #12]	; (46fc <usbdc_get_state+0x10>)
    46ee:	7e98      	ldrb	r0, [r3, #26]
    46f0:	f000 0310 	and.w	r3, r0, #16
		return USBD_S_SUSPEND;
    46f4:	2b00      	cmp	r3, #0
	}
	return usbdc.state;
}
    46f6:	bf18      	it	ne
    46f8:	2010      	movne	r0, #16
    46fa:	4770      	bx	lr
    46fc:	2000090c 	.word	0x2000090c

00004700 <usb_find_desc>:

uint8_t *usb_find_desc(uint8_t *desc, uint8_t *eof, uint8_t type)
{
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    4700:	4288      	cmp	r0, r1
    4702:	d214      	bcs.n	472e <usb_find_desc+0x2e>
	return desc[0];
    4704:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    4706:	2b01      	cmp	r3, #1
    4708:	d913      	bls.n	4732 <usb_find_desc+0x32>
{
    470a:	b410      	push	{r4}
		if (type == usb_desc_type(desc)) {
    470c:	7844      	ldrb	r4, [r0, #1]
    470e:	4294      	cmp	r4, r2
    4710:	d00a      	beq.n	4728 <usb_find_desc+0x28>
	return (desc + usb_desc_len(desc));
    4712:	4418      	add	r0, r3
	while (desc < eof) {
    4714:	4281      	cmp	r1, r0
    4716:	d906      	bls.n	4726 <usb_find_desc+0x26>
	return desc[0];
    4718:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    471a:	2b01      	cmp	r3, #1
    471c:	d90b      	bls.n	4736 <usb_find_desc+0x36>
	return desc[1];
    471e:	7844      	ldrb	r4, [r0, #1]
		if (type == usb_desc_type(desc)) {
    4720:	4294      	cmp	r4, r2
    4722:	d1f6      	bne.n	4712 <usb_find_desc+0x12>
    4724:	e000      	b.n	4728 <usb_find_desc+0x28>
			return desc;
		}
		desc = usb_desc_next(desc);
	}
	return NULL;
    4726:	2000      	movs	r0, #0
}
    4728:	f85d 4b04 	ldr.w	r4, [sp], #4
    472c:	4770      	bx	lr
	return NULL;
    472e:	2000      	movs	r0, #0
    4730:	4770      	bx	lr
		_desc_len_check();
    4732:	2000      	movs	r0, #0
    4734:	4770      	bx	lr
    4736:	2000      	movs	r0, #0
    4738:	e7f6      	b.n	4728 <usb_find_desc+0x28>

0000473a <usb_find_ep_desc>:

uint8_t *usb_find_ep_desc(uint8_t *desc, uint8_t *eof)
{
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    473a:	4288      	cmp	r0, r1
    473c:	d216      	bcs.n	476c <usb_find_ep_desc+0x32>
	return desc[0];
    473e:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    4740:	2b01      	cmp	r3, #1
    4742:	d915      	bls.n	4770 <usb_find_ep_desc+0x36>
	return desc[1];
    4744:	7842      	ldrb	r2, [r0, #1]
		if (USB_DT_INTERFACE == usb_desc_type(desc)) {
    4746:	2a04      	cmp	r2, #4
    4748:	d014      	beq.n	4774 <usb_find_ep_desc+0x3a>
			break;
		}
		if (USB_DT_ENDPOINT == usb_desc_type(desc)) {
    474a:	2a05      	cmp	r2, #5
    474c:	d00b      	beq.n	4766 <usb_find_ep_desc+0x2c>
	return (desc + usb_desc_len(desc));
    474e:	4418      	add	r0, r3
	while (desc < eof) {
    4750:	4281      	cmp	r1, r0
    4752:	d909      	bls.n	4768 <usb_find_ep_desc+0x2e>
	return desc[0];
    4754:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    4756:	2b01      	cmp	r3, #1
    4758:	d90e      	bls.n	4778 <usb_find_ep_desc+0x3e>
	return desc[1];
    475a:	7842      	ldrb	r2, [r0, #1]
		if (USB_DT_INTERFACE == usb_desc_type(desc)) {
    475c:	2a04      	cmp	r2, #4
    475e:	d00d      	beq.n	477c <usb_find_ep_desc+0x42>
		if (USB_DT_ENDPOINT == usb_desc_type(desc)) {
    4760:	2a05      	cmp	r2, #5
    4762:	d1f4      	bne.n	474e <usb_find_ep_desc+0x14>
    4764:	e00b      	b.n	477e <usb_find_ep_desc+0x44>
    4766:	4770      	bx	lr
			return desc;
		}
		desc = usb_desc_next(desc);
	}
	return NULL;
    4768:	2000      	movs	r0, #0
    476a:	4770      	bx	lr
    476c:	2000      	movs	r0, #0
    476e:	4770      	bx	lr
		_desc_len_check();
    4770:	2000      	movs	r0, #0
    4772:	4770      	bx	lr
	return NULL;
    4774:	2000      	movs	r0, #0
    4776:	4770      	bx	lr
		_desc_len_check();
    4778:	2000      	movs	r0, #0
    477a:	4770      	bx	lr
	return NULL;
    477c:	2000      	movs	r0, #0
}
    477e:	4770      	bx	lr

00004780 <usb_find_cfg_desc>:

uint8_t *usb_find_cfg_desc(uint8_t *desc, uint8_t *eof, uint8_t cfg_value)
{
    4780:	b538      	push	{r3, r4, r5, lr}
    4782:	460c      	mov	r4, r1
    4784:	4615      	mov	r5, r2
	_param_error_check(desc && eof && (desc < eof));

	desc = usb_find_desc(desc, eof, USB_DT_CONFIG);
    4786:	2202      	movs	r2, #2
    4788:	4b16      	ldr	r3, [pc, #88]	; (47e4 <usb_find_cfg_desc+0x64>)
    478a:	4798      	blx	r3
	if (!desc) {
    478c:	4603      	mov	r3, r0
    478e:	b1e8      	cbz	r0, 47cc <usb_find_cfg_desc+0x4c>
		return NULL;
	}
	while (desc < eof) {
    4790:	4284      	cmp	r4, r0
    4792:	d91d      	bls.n	47d0 <usb_find_cfg_desc+0x50>
		_desc_len_check();
    4794:	7802      	ldrb	r2, [r0, #0]
    4796:	2a01      	cmp	r2, #1
    4798:	d91c      	bls.n	47d4 <usb_find_cfg_desc+0x54>
		if (desc[1] != USB_DT_CONFIG) {
    479a:	7842      	ldrb	r2, [r0, #1]
    479c:	2a02      	cmp	r2, #2
    479e:	d11b      	bne.n	47d8 <usb_find_cfg_desc+0x58>
			break;
		}
		if (desc[5] == cfg_value) {
    47a0:	7942      	ldrb	r2, [r0, #5]
    47a2:	42aa      	cmp	r2, r5
    47a4:	d012      	beq.n	47cc <usb_find_cfg_desc+0x4c>
	return (ptr[0] + (ptr[1] << 8));
    47a6:	78d9      	ldrb	r1, [r3, #3]
    47a8:	789a      	ldrb	r2, [r3, #2]
    47aa:	eb02 2201 	add.w	r2, r2, r1, lsl #8
 *  \param[in] cfg_desc Byte pointer to the descriptor start address
 *  \return Byte pointer to descriptor after configuration end
 */
static inline uint8_t *usb_cfg_desc_next(uint8_t *cfg_desc)
{
	return (cfg_desc + usb_cfg_desc_total_len(cfg_desc));
    47ae:	fa13 f382 	uxtah	r3, r3, r2
	while (desc < eof) {
    47b2:	429c      	cmp	r4, r3
    47b4:	d909      	bls.n	47ca <usb_find_cfg_desc+0x4a>
		_desc_len_check();
    47b6:	781a      	ldrb	r2, [r3, #0]
    47b8:	2a01      	cmp	r2, #1
    47ba:	d90f      	bls.n	47dc <usb_find_cfg_desc+0x5c>
		if (desc[1] != USB_DT_CONFIG) {
    47bc:	785a      	ldrb	r2, [r3, #1]
    47be:	2a02      	cmp	r2, #2
    47c0:	d10e      	bne.n	47e0 <usb_find_cfg_desc+0x60>
		if (desc[5] == cfg_value) {
    47c2:	795a      	ldrb	r2, [r3, #5]
    47c4:	42aa      	cmp	r2, r5
    47c6:	d1ee      	bne.n	47a6 <usb_find_cfg_desc+0x26>
    47c8:	e000      	b.n	47cc <usb_find_cfg_desc+0x4c>
			return desc;
		}
		desc = usb_cfg_desc_next(desc);
	}
	return NULL;
    47ca:	2300      	movs	r3, #0
}
    47cc:	4618      	mov	r0, r3
    47ce:	bd38      	pop	{r3, r4, r5, pc}
	return NULL;
    47d0:	2300      	movs	r3, #0
    47d2:	e7fb      	b.n	47cc <usb_find_cfg_desc+0x4c>
		_desc_len_check();
    47d4:	2300      	movs	r3, #0
    47d6:	e7f9      	b.n	47cc <usb_find_cfg_desc+0x4c>
	return NULL;
    47d8:	2300      	movs	r3, #0
    47da:	e7f7      	b.n	47cc <usb_find_cfg_desc+0x4c>
		_desc_len_check();
    47dc:	2300      	movs	r3, #0
    47de:	e7f5      	b.n	47cc <usb_find_cfg_desc+0x4c>
	return NULL;
    47e0:	2300      	movs	r3, #0
    47e2:	e7f3      	b.n	47cc <usb_find_cfg_desc+0x4c>
    47e4:	00004701 	.word	0x00004701

000047e8 <usb_find_str_desc>:
{
	uint8_t i;

	_param_error_check(desc && eof && (desc < eof));

	for (i = 0; desc < eof;) {
    47e8:	4288      	cmp	r0, r1
    47ea:	d217      	bcs.n	481c <usb_find_str_desc+0x34>
{
    47ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    47f0:	460d      	mov	r5, r1
    47f2:	4616      	mov	r6, r2
	for (i = 0; desc < eof;) {
    47f4:	2400      	movs	r4, #0
		desc = usb_find_desc(desc, eof, USB_DT_STRING);
    47f6:	f04f 0803 	mov.w	r8, #3
    47fa:	4f0c      	ldr	r7, [pc, #48]	; (482c <usb_find_str_desc+0x44>)
    47fc:	4642      	mov	r2, r8
    47fe:	4629      	mov	r1, r5
    4800:	47b8      	blx	r7
		if (desc) {
    4802:	4603      	mov	r3, r0
    4804:	b170      	cbz	r0, 4824 <usb_find_str_desc+0x3c>
	return desc[0];
    4806:	7800      	ldrb	r0, [r0, #0]
			_desc_len_check();
    4808:	2801      	cmp	r0, #1
    480a:	d90a      	bls.n	4822 <usb_find_str_desc+0x3a>
			if (i == str_index) {
    480c:	42a6      	cmp	r6, r4
    480e:	d009      	beq.n	4824 <usb_find_str_desc+0x3c>
	return (desc + usb_desc_len(desc));
    4810:	4418      	add	r0, r3
    4812:	3401      	adds	r4, #1
	for (i = 0; desc < eof;) {
    4814:	4285      	cmp	r5, r0
    4816:	d8f1      	bhi.n	47fc <usb_find_str_desc+0x14>
			desc = usb_desc_next(desc);
		} else {
			return NULL;
		}
	}
	return NULL;
    4818:	2300      	movs	r3, #0
    481a:	e003      	b.n	4824 <usb_find_str_desc+0x3c>
    481c:	2300      	movs	r3, #0
}
    481e:	4618      	mov	r0, r3
    4820:	4770      	bx	lr
			_desc_len_check();
    4822:	2300      	movs	r3, #0
}
    4824:	4618      	mov	r0, r3
    4826:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    482a:	bf00      	nop
    482c:	00004701 	.word	0x00004701

00004830 <cdc_device_acm_init>:

/**
 * \brief CDC ACM Init
 */
void cdc_device_acm_init(void)
{
    4830:	b508      	push	{r3, lr}
	/* usb stack init */
	usbdc_init(ctrl_buffer);
    4832:	4805      	ldr	r0, [pc, #20]	; (4848 <cdc_device_acm_init+0x18>)
    4834:	4b05      	ldr	r3, [pc, #20]	; (484c <cdc_device_acm_init+0x1c>)
    4836:	4798      	blx	r3

	/* usbdc_register_funcion inside */
	cdcdf_acm_init();
    4838:	4b05      	ldr	r3, [pc, #20]	; (4850 <cdc_device_acm_init+0x20>)
    483a:	4798      	blx	r3

	usbdc_start(single_desc);
    483c:	4805      	ldr	r0, [pc, #20]	; (4854 <cdc_device_acm_init+0x24>)
    483e:	4b06      	ldr	r3, [pc, #24]	; (4858 <cdc_device_acm_init+0x28>)
    4840:	4798      	blx	r3
	usbdc_attach();
    4842:	4b06      	ldr	r3, [pc, #24]	; (485c <cdc_device_acm_init+0x2c>)
    4844:	4798      	blx	r3
    4846:	bd08      	pop	{r3, pc}
    4848:	2000096c 	.word	0x2000096c
    484c:	00004631 	.word	0x00004631
    4850:	00003f1d 	.word	0x00003f1d
    4854:	200000ac 	.word	0x200000ac
    4858:	000046a1 	.word	0x000046a1
    485c:	000046d5 	.word	0x000046d5

00004860 <usb_init>:
	while (1) {
	}
}

void usb_init(void)
{
    4860:	b508      	push	{r3, lr}

	cdc_device_acm_init();
    4862:	4b01      	ldr	r3, [pc, #4]	; (4868 <usb_init+0x8>)
    4864:	4798      	blx	r3
    4866:	bd08      	pop	{r3, pc}
    4868:	00004831 	.word	0x00004831

0000486c <atomic_enter_critical>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    486c:	f3ef 8310 	mrs	r3, PRIMASK
/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
	*atomic = __get_PRIMASK();
    4870:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
    4872:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    4874:	f3bf 8f5f 	dmb	sy
    4878:	4770      	bx	lr

0000487a <atomic_leave_critical>:
    487a:	f3bf 8f5f 	dmb	sy
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
	__DMB();
	__set_PRIMASK(*atomic);
    487e:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    4880:	f383 8810 	msr	PRIMASK, r3
    4884:	4770      	bx	lr
	...

00004888 <__aeabi_atexit>:
    4888:	460b      	mov	r3, r1
    488a:	4601      	mov	r1, r0
    488c:	4618      	mov	r0, r3
    488e:	f000 b801 	b.w	4894 <__cxa_atexit>
    4892:	bf00      	nop

00004894 <__cxa_atexit>:
    4894:	4613      	mov	r3, r2
    4896:	460a      	mov	r2, r1
    4898:	4601      	mov	r1, r0
    489a:	2002      	movs	r0, #2
    489c:	f000 b9c0 	b.w	4c20 <__register_exitproc>

000048a0 <__libc_init_array>:
    48a0:	b570      	push	{r4, r5, r6, lr}
    48a2:	4e0f      	ldr	r6, [pc, #60]	; (48e0 <__libc_init_array+0x40>)
    48a4:	4d0f      	ldr	r5, [pc, #60]	; (48e4 <__libc_init_array+0x44>)
    48a6:	1b76      	subs	r6, r6, r5
    48a8:	10b6      	asrs	r6, r6, #2
    48aa:	bf18      	it	ne
    48ac:	2400      	movne	r4, #0
    48ae:	d005      	beq.n	48bc <__libc_init_array+0x1c>
    48b0:	3401      	adds	r4, #1
    48b2:	f855 3b04 	ldr.w	r3, [r5], #4
    48b6:	4798      	blx	r3
    48b8:	42a6      	cmp	r6, r4
    48ba:	d1f9      	bne.n	48b0 <__libc_init_array+0x10>
    48bc:	4e0a      	ldr	r6, [pc, #40]	; (48e8 <__libc_init_array+0x48>)
    48be:	4d0b      	ldr	r5, [pc, #44]	; (48ec <__libc_init_array+0x4c>)
    48c0:	1b76      	subs	r6, r6, r5
    48c2:	f000 fd03 	bl	52cc <_init>
    48c6:	10b6      	asrs	r6, r6, #2
    48c8:	bf18      	it	ne
    48ca:	2400      	movne	r4, #0
    48cc:	d006      	beq.n	48dc <__libc_init_array+0x3c>
    48ce:	3401      	adds	r4, #1
    48d0:	f855 3b04 	ldr.w	r3, [r5], #4
    48d4:	4798      	blx	r3
    48d6:	42a6      	cmp	r6, r4
    48d8:	d1f9      	bne.n	48ce <__libc_init_array+0x2e>
    48da:	bd70      	pop	{r4, r5, r6, pc}
    48dc:	bd70      	pop	{r4, r5, r6, pc}
    48de:	bf00      	nop
    48e0:	000052d8 	.word	0x000052d8
    48e4:	000052d8 	.word	0x000052d8
    48e8:	000052e4 	.word	0x000052e4
    48ec:	000052d8 	.word	0x000052d8

000048f0 <memcpy>:
    48f0:	4684      	mov	ip, r0
    48f2:	ea41 0300 	orr.w	r3, r1, r0
    48f6:	f013 0303 	ands.w	r3, r3, #3
    48fa:	d16d      	bne.n	49d8 <memcpy+0xe8>
    48fc:	3a40      	subs	r2, #64	; 0x40
    48fe:	d341      	bcc.n	4984 <memcpy+0x94>
    4900:	f851 3b04 	ldr.w	r3, [r1], #4
    4904:	f840 3b04 	str.w	r3, [r0], #4
    4908:	f851 3b04 	ldr.w	r3, [r1], #4
    490c:	f840 3b04 	str.w	r3, [r0], #4
    4910:	f851 3b04 	ldr.w	r3, [r1], #4
    4914:	f840 3b04 	str.w	r3, [r0], #4
    4918:	f851 3b04 	ldr.w	r3, [r1], #4
    491c:	f840 3b04 	str.w	r3, [r0], #4
    4920:	f851 3b04 	ldr.w	r3, [r1], #4
    4924:	f840 3b04 	str.w	r3, [r0], #4
    4928:	f851 3b04 	ldr.w	r3, [r1], #4
    492c:	f840 3b04 	str.w	r3, [r0], #4
    4930:	f851 3b04 	ldr.w	r3, [r1], #4
    4934:	f840 3b04 	str.w	r3, [r0], #4
    4938:	f851 3b04 	ldr.w	r3, [r1], #4
    493c:	f840 3b04 	str.w	r3, [r0], #4
    4940:	f851 3b04 	ldr.w	r3, [r1], #4
    4944:	f840 3b04 	str.w	r3, [r0], #4
    4948:	f851 3b04 	ldr.w	r3, [r1], #4
    494c:	f840 3b04 	str.w	r3, [r0], #4
    4950:	f851 3b04 	ldr.w	r3, [r1], #4
    4954:	f840 3b04 	str.w	r3, [r0], #4
    4958:	f851 3b04 	ldr.w	r3, [r1], #4
    495c:	f840 3b04 	str.w	r3, [r0], #4
    4960:	f851 3b04 	ldr.w	r3, [r1], #4
    4964:	f840 3b04 	str.w	r3, [r0], #4
    4968:	f851 3b04 	ldr.w	r3, [r1], #4
    496c:	f840 3b04 	str.w	r3, [r0], #4
    4970:	f851 3b04 	ldr.w	r3, [r1], #4
    4974:	f840 3b04 	str.w	r3, [r0], #4
    4978:	f851 3b04 	ldr.w	r3, [r1], #4
    497c:	f840 3b04 	str.w	r3, [r0], #4
    4980:	3a40      	subs	r2, #64	; 0x40
    4982:	d2bd      	bcs.n	4900 <memcpy+0x10>
    4984:	3230      	adds	r2, #48	; 0x30
    4986:	d311      	bcc.n	49ac <memcpy+0xbc>
    4988:	f851 3b04 	ldr.w	r3, [r1], #4
    498c:	f840 3b04 	str.w	r3, [r0], #4
    4990:	f851 3b04 	ldr.w	r3, [r1], #4
    4994:	f840 3b04 	str.w	r3, [r0], #4
    4998:	f851 3b04 	ldr.w	r3, [r1], #4
    499c:	f840 3b04 	str.w	r3, [r0], #4
    49a0:	f851 3b04 	ldr.w	r3, [r1], #4
    49a4:	f840 3b04 	str.w	r3, [r0], #4
    49a8:	3a10      	subs	r2, #16
    49aa:	d2ed      	bcs.n	4988 <memcpy+0x98>
    49ac:	320c      	adds	r2, #12
    49ae:	d305      	bcc.n	49bc <memcpy+0xcc>
    49b0:	f851 3b04 	ldr.w	r3, [r1], #4
    49b4:	f840 3b04 	str.w	r3, [r0], #4
    49b8:	3a04      	subs	r2, #4
    49ba:	d2f9      	bcs.n	49b0 <memcpy+0xc0>
    49bc:	3204      	adds	r2, #4
    49be:	d008      	beq.n	49d2 <memcpy+0xe2>
    49c0:	07d2      	lsls	r2, r2, #31
    49c2:	bf1c      	itt	ne
    49c4:	f811 3b01 	ldrbne.w	r3, [r1], #1
    49c8:	f800 3b01 	strbne.w	r3, [r0], #1
    49cc:	d301      	bcc.n	49d2 <memcpy+0xe2>
    49ce:	880b      	ldrh	r3, [r1, #0]
    49d0:	8003      	strh	r3, [r0, #0]
    49d2:	4660      	mov	r0, ip
    49d4:	4770      	bx	lr
    49d6:	bf00      	nop
    49d8:	2a08      	cmp	r2, #8
    49da:	d313      	bcc.n	4a04 <memcpy+0x114>
    49dc:	078b      	lsls	r3, r1, #30
    49de:	d08d      	beq.n	48fc <memcpy+0xc>
    49e0:	f010 0303 	ands.w	r3, r0, #3
    49e4:	d08a      	beq.n	48fc <memcpy+0xc>
    49e6:	f1c3 0304 	rsb	r3, r3, #4
    49ea:	1ad2      	subs	r2, r2, r3
    49ec:	07db      	lsls	r3, r3, #31
    49ee:	bf1c      	itt	ne
    49f0:	f811 3b01 	ldrbne.w	r3, [r1], #1
    49f4:	f800 3b01 	strbne.w	r3, [r0], #1
    49f8:	d380      	bcc.n	48fc <memcpy+0xc>
    49fa:	f831 3b02 	ldrh.w	r3, [r1], #2
    49fe:	f820 3b02 	strh.w	r3, [r0], #2
    4a02:	e77b      	b.n	48fc <memcpy+0xc>
    4a04:	3a04      	subs	r2, #4
    4a06:	d3d9      	bcc.n	49bc <memcpy+0xcc>
    4a08:	3a01      	subs	r2, #1
    4a0a:	f811 3b01 	ldrb.w	r3, [r1], #1
    4a0e:	f800 3b01 	strb.w	r3, [r0], #1
    4a12:	d2f9      	bcs.n	4a08 <memcpy+0x118>
    4a14:	780b      	ldrb	r3, [r1, #0]
    4a16:	7003      	strb	r3, [r0, #0]
    4a18:	784b      	ldrb	r3, [r1, #1]
    4a1a:	7043      	strb	r3, [r0, #1]
    4a1c:	788b      	ldrb	r3, [r1, #2]
    4a1e:	7083      	strb	r3, [r0, #2]
    4a20:	4660      	mov	r0, ip
    4a22:	4770      	bx	lr

00004a24 <memset>:
    4a24:	b470      	push	{r4, r5, r6}
    4a26:	0786      	lsls	r6, r0, #30
    4a28:	d046      	beq.n	4ab8 <memset+0x94>
    4a2a:	1e54      	subs	r4, r2, #1
    4a2c:	2a00      	cmp	r2, #0
    4a2e:	d041      	beq.n	4ab4 <memset+0x90>
    4a30:	b2ca      	uxtb	r2, r1
    4a32:	4603      	mov	r3, r0
    4a34:	e002      	b.n	4a3c <memset+0x18>
    4a36:	f114 34ff 	adds.w	r4, r4, #4294967295
    4a3a:	d33b      	bcc.n	4ab4 <memset+0x90>
    4a3c:	f803 2b01 	strb.w	r2, [r3], #1
    4a40:	079d      	lsls	r5, r3, #30
    4a42:	d1f8      	bne.n	4a36 <memset+0x12>
    4a44:	2c03      	cmp	r4, #3
    4a46:	d92e      	bls.n	4aa6 <memset+0x82>
    4a48:	b2cd      	uxtb	r5, r1
    4a4a:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
    4a4e:	2c0f      	cmp	r4, #15
    4a50:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
    4a54:	d919      	bls.n	4a8a <memset+0x66>
    4a56:	f103 0210 	add.w	r2, r3, #16
    4a5a:	4626      	mov	r6, r4
    4a5c:	3e10      	subs	r6, #16
    4a5e:	2e0f      	cmp	r6, #15
    4a60:	f842 5c10 	str.w	r5, [r2, #-16]
    4a64:	f842 5c0c 	str.w	r5, [r2, #-12]
    4a68:	f842 5c08 	str.w	r5, [r2, #-8]
    4a6c:	f842 5c04 	str.w	r5, [r2, #-4]
    4a70:	f102 0210 	add.w	r2, r2, #16
    4a74:	d8f2      	bhi.n	4a5c <memset+0x38>
    4a76:	f1a4 0210 	sub.w	r2, r4, #16
    4a7a:	f022 020f 	bic.w	r2, r2, #15
    4a7e:	f004 040f 	and.w	r4, r4, #15
    4a82:	3210      	adds	r2, #16
    4a84:	2c03      	cmp	r4, #3
    4a86:	4413      	add	r3, r2
    4a88:	d90d      	bls.n	4aa6 <memset+0x82>
    4a8a:	461e      	mov	r6, r3
    4a8c:	4622      	mov	r2, r4
    4a8e:	3a04      	subs	r2, #4
    4a90:	2a03      	cmp	r2, #3
    4a92:	f846 5b04 	str.w	r5, [r6], #4
    4a96:	d8fa      	bhi.n	4a8e <memset+0x6a>
    4a98:	1f22      	subs	r2, r4, #4
    4a9a:	f022 0203 	bic.w	r2, r2, #3
    4a9e:	3204      	adds	r2, #4
    4aa0:	4413      	add	r3, r2
    4aa2:	f004 0403 	and.w	r4, r4, #3
    4aa6:	b12c      	cbz	r4, 4ab4 <memset+0x90>
    4aa8:	b2c9      	uxtb	r1, r1
    4aaa:	441c      	add	r4, r3
    4aac:	f803 1b01 	strb.w	r1, [r3], #1
    4ab0:	429c      	cmp	r4, r3
    4ab2:	d1fb      	bne.n	4aac <memset+0x88>
    4ab4:	bc70      	pop	{r4, r5, r6}
    4ab6:	4770      	bx	lr
    4ab8:	4614      	mov	r4, r2
    4aba:	4603      	mov	r3, r0
    4abc:	e7c2      	b.n	4a44 <memset+0x20>
    4abe:	bf00      	nop

00004ac0 <strlen>:
    4ac0:	f890 f000 	pld	[r0]
    4ac4:	e96d 4502 	strd	r4, r5, [sp, #-8]!
    4ac8:	f020 0107 	bic.w	r1, r0, #7
    4acc:	f06f 0c00 	mvn.w	ip, #0
    4ad0:	f010 0407 	ands.w	r4, r0, #7
    4ad4:	f891 f020 	pld	[r1, #32]
    4ad8:	f040 8049 	bne.w	4b6e <strlen+0xae>
    4adc:	f04f 0400 	mov.w	r4, #0
    4ae0:	f06f 0007 	mvn.w	r0, #7
    4ae4:	e9d1 2300 	ldrd	r2, r3, [r1]
    4ae8:	f891 f040 	pld	[r1, #64]	; 0x40
    4aec:	f100 0008 	add.w	r0, r0, #8
    4af0:	fa82 f24c 	uadd8	r2, r2, ip
    4af4:	faa4 f28c 	sel	r2, r4, ip
    4af8:	fa83 f34c 	uadd8	r3, r3, ip
    4afc:	faa2 f38c 	sel	r3, r2, ip
    4b00:	bb4b      	cbnz	r3, 4b56 <strlen+0x96>
    4b02:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
    4b06:	fa82 f24c 	uadd8	r2, r2, ip
    4b0a:	f100 0008 	add.w	r0, r0, #8
    4b0e:	faa4 f28c 	sel	r2, r4, ip
    4b12:	fa83 f34c 	uadd8	r3, r3, ip
    4b16:	faa2 f38c 	sel	r3, r2, ip
    4b1a:	b9e3      	cbnz	r3, 4b56 <strlen+0x96>
    4b1c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
    4b20:	fa82 f24c 	uadd8	r2, r2, ip
    4b24:	f100 0008 	add.w	r0, r0, #8
    4b28:	faa4 f28c 	sel	r2, r4, ip
    4b2c:	fa83 f34c 	uadd8	r3, r3, ip
    4b30:	faa2 f38c 	sel	r3, r2, ip
    4b34:	b97b      	cbnz	r3, 4b56 <strlen+0x96>
    4b36:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
    4b3a:	f101 0120 	add.w	r1, r1, #32
    4b3e:	fa82 f24c 	uadd8	r2, r2, ip
    4b42:	f100 0008 	add.w	r0, r0, #8
    4b46:	faa4 f28c 	sel	r2, r4, ip
    4b4a:	fa83 f34c 	uadd8	r3, r3, ip
    4b4e:	faa2 f38c 	sel	r3, r2, ip
    4b52:	2b00      	cmp	r3, #0
    4b54:	d0c6      	beq.n	4ae4 <strlen+0x24>
    4b56:	2a00      	cmp	r2, #0
    4b58:	bf04      	itt	eq
    4b5a:	3004      	addeq	r0, #4
    4b5c:	461a      	moveq	r2, r3
    4b5e:	ba12      	rev	r2, r2
    4b60:	fab2 f282 	clz	r2, r2
    4b64:	e8fd 4502 	ldrd	r4, r5, [sp], #8
    4b68:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
    4b6c:	4770      	bx	lr
    4b6e:	e9d1 2300 	ldrd	r2, r3, [r1]
    4b72:	f004 0503 	and.w	r5, r4, #3
    4b76:	f1c4 0000 	rsb	r0, r4, #0
    4b7a:	ea4f 05c5 	mov.w	r5, r5, lsl #3
    4b7e:	f014 0f04 	tst.w	r4, #4
    4b82:	f891 f040 	pld	[r1, #64]	; 0x40
    4b86:	fa0c f505 	lsl.w	r5, ip, r5
    4b8a:	ea62 0205 	orn	r2, r2, r5
    4b8e:	bf1c      	itt	ne
    4b90:	ea63 0305 	ornne	r3, r3, r5
    4b94:	4662      	movne	r2, ip
    4b96:	f04f 0400 	mov.w	r4, #0
    4b9a:	e7a9      	b.n	4af0 <strlen+0x30>

00004b9c <__utoa>:
    4b9c:	b5f0      	push	{r4, r5, r6, r7, lr}
    4b9e:	f8df e078 	ldr.w	lr, [pc, #120]	; 4c18 <__utoa+0x7c>
    4ba2:	4616      	mov	r6, r2
    4ba4:	4604      	mov	r4, r0
    4ba6:	460f      	mov	r7, r1
    4ba8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    4bac:	b08b      	sub	sp, #44	; 0x2c
    4bae:	466d      	mov	r5, sp
    4bb0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    4bb2:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    4bb6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    4bb8:	e89e 0003 	ldmia.w	lr, {r0, r1}
    4bbc:	1eb3      	subs	r3, r6, #2
    4bbe:	f845 0b04 	str.w	r0, [r5], #4
    4bc2:	2b22      	cmp	r3, #34	; 0x22
    4bc4:	7029      	strb	r1, [r5, #0]
    4bc6:	d822      	bhi.n	4c0e <__utoa+0x72>
    4bc8:	1e7d      	subs	r5, r7, #1
    4bca:	4628      	mov	r0, r5
    4bcc:	2200      	movs	r2, #0
    4bce:	e000      	b.n	4bd2 <__utoa+0x36>
    4bd0:	461a      	mov	r2, r3
    4bd2:	fbb4 f1f6 	udiv	r1, r4, r6
    4bd6:	ab0a      	add	r3, sp, #40	; 0x28
    4bd8:	fb06 4411 	mls	r4, r6, r1, r4
    4bdc:	4423      	add	r3, r4
    4bde:	460c      	mov	r4, r1
    4be0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
    4be4:	f800 3f01 	strb.w	r3, [r0, #1]!
    4be8:	1c53      	adds	r3, r2, #1
    4bea:	2900      	cmp	r1, #0
    4bec:	d1f0      	bne.n	4bd0 <__utoa+0x34>
    4bee:	54f9      	strb	r1, [r7, r3]
    4bf0:	18bb      	adds	r3, r7, r2
    4bf2:	b14a      	cbz	r2, 4c08 <__utoa+0x6c>
    4bf4:	7819      	ldrb	r1, [r3, #0]
    4bf6:	7868      	ldrb	r0, [r5, #1]
    4bf8:	f805 1f01 	strb.w	r1, [r5, #1]!
    4bfc:	3401      	adds	r4, #1
    4bfe:	1b11      	subs	r1, r2, r4
    4c00:	428c      	cmp	r4, r1
    4c02:	f803 0901 	strb.w	r0, [r3], #-1
    4c06:	dbf5      	blt.n	4bf4 <__utoa+0x58>
    4c08:	4638      	mov	r0, r7
    4c0a:	b00b      	add	sp, #44	; 0x2c
    4c0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4c0e:	2000      	movs	r0, #0
    4c10:	7038      	strb	r0, [r7, #0]
    4c12:	b00b      	add	sp, #44	; 0x2c
    4c14:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4c16:	bf00      	nop
    4c18:	000052a4 	.word	0x000052a4

00004c1c <utoa>:
    4c1c:	f7ff bfbe 	b.w	4b9c <__utoa>

00004c20 <__register_exitproc>:
    4c20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    4c24:	4d2c      	ldr	r5, [pc, #176]	; (4cd8 <__register_exitproc+0xb8>)
    4c26:	4606      	mov	r6, r0
    4c28:	6828      	ldr	r0, [r5, #0]
    4c2a:	4698      	mov	r8, r3
    4c2c:	460f      	mov	r7, r1
    4c2e:	4691      	mov	r9, r2
    4c30:	f000 f882 	bl	4d38 <__retarget_lock_acquire_recursive>
    4c34:	4b29      	ldr	r3, [pc, #164]	; (4cdc <__register_exitproc+0xbc>)
    4c36:	681c      	ldr	r4, [r3, #0]
    4c38:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
    4c3c:	2b00      	cmp	r3, #0
    4c3e:	d03e      	beq.n	4cbe <__register_exitproc+0x9e>
    4c40:	685a      	ldr	r2, [r3, #4]
    4c42:	2a1f      	cmp	r2, #31
    4c44:	dc1c      	bgt.n	4c80 <__register_exitproc+0x60>
    4c46:	f102 0e01 	add.w	lr, r2, #1
    4c4a:	b176      	cbz	r6, 4c6a <__register_exitproc+0x4a>
    4c4c:	eb03 0182 	add.w	r1, r3, r2, lsl #2
    4c50:	2401      	movs	r4, #1
    4c52:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
    4c56:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
    4c5a:	4094      	lsls	r4, r2
    4c5c:	4320      	orrs	r0, r4
    4c5e:	2e02      	cmp	r6, #2
    4c60:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
    4c64:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
    4c68:	d023      	beq.n	4cb2 <__register_exitproc+0x92>
    4c6a:	3202      	adds	r2, #2
    4c6c:	f8c3 e004 	str.w	lr, [r3, #4]
    4c70:	6828      	ldr	r0, [r5, #0]
    4c72:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
    4c76:	f000 f861 	bl	4d3c <__retarget_lock_release_recursive>
    4c7a:	2000      	movs	r0, #0
    4c7c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    4c80:	4b17      	ldr	r3, [pc, #92]	; (4ce0 <__register_exitproc+0xc0>)
    4c82:	b30b      	cbz	r3, 4cc8 <__register_exitproc+0xa8>
    4c84:	f44f 70c8 	mov.w	r0, #400	; 0x190
    4c88:	f3af 8000 	nop.w
    4c8c:	4603      	mov	r3, r0
    4c8e:	b1d8      	cbz	r0, 4cc8 <__register_exitproc+0xa8>
    4c90:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
    4c94:	6002      	str	r2, [r0, #0]
    4c96:	2100      	movs	r1, #0
    4c98:	6041      	str	r1, [r0, #4]
    4c9a:	460a      	mov	r2, r1
    4c9c:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
    4ca0:	f04f 0e01 	mov.w	lr, #1
    4ca4:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
    4ca8:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
    4cac:	2e00      	cmp	r6, #0
    4cae:	d0dc      	beq.n	4c6a <__register_exitproc+0x4a>
    4cb0:	e7cc      	b.n	4c4c <__register_exitproc+0x2c>
    4cb2:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
    4cb6:	430c      	orrs	r4, r1
    4cb8:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
    4cbc:	e7d5      	b.n	4c6a <__register_exitproc+0x4a>
    4cbe:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
    4cc2:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
    4cc6:	e7bb      	b.n	4c40 <__register_exitproc+0x20>
    4cc8:	6828      	ldr	r0, [r5, #0]
    4cca:	f000 f837 	bl	4d3c <__retarget_lock_release_recursive>
    4cce:	f04f 30ff 	mov.w	r0, #4294967295
    4cd2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    4cd6:	bf00      	nop
    4cd8:	20000538 	.word	0x20000538
    4cdc:	000052a0 	.word	0x000052a0
    4ce0:	00000000 	.word	0x00000000

00004ce4 <register_fini>:
    4ce4:	4b02      	ldr	r3, [pc, #8]	; (4cf0 <register_fini+0xc>)
    4ce6:	b113      	cbz	r3, 4cee <register_fini+0xa>
    4ce8:	4802      	ldr	r0, [pc, #8]	; (4cf4 <register_fini+0x10>)
    4cea:	f000 b805 	b.w	4cf8 <atexit>
    4cee:	4770      	bx	lr
    4cf0:	00000000 	.word	0x00000000
    4cf4:	00004d05 	.word	0x00004d05

00004cf8 <atexit>:
    4cf8:	2300      	movs	r3, #0
    4cfa:	4601      	mov	r1, r0
    4cfc:	461a      	mov	r2, r3
    4cfe:	4618      	mov	r0, r3
    4d00:	f7ff bf8e 	b.w	4c20 <__register_exitproc>

00004d04 <__libc_fini_array>:
    4d04:	b538      	push	{r3, r4, r5, lr}
    4d06:	4c0a      	ldr	r4, [pc, #40]	; (4d30 <__libc_fini_array+0x2c>)
    4d08:	4d0a      	ldr	r5, [pc, #40]	; (4d34 <__libc_fini_array+0x30>)
    4d0a:	1b64      	subs	r4, r4, r5
    4d0c:	10a4      	asrs	r4, r4, #2
    4d0e:	d00a      	beq.n	4d26 <__libc_fini_array+0x22>
    4d10:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
    4d14:	3b01      	subs	r3, #1
    4d16:	eb05 0583 	add.w	r5, r5, r3, lsl #2
    4d1a:	3c01      	subs	r4, #1
    4d1c:	f855 3904 	ldr.w	r3, [r5], #-4
    4d20:	4798      	blx	r3
    4d22:	2c00      	cmp	r4, #0
    4d24:	d1f9      	bne.n	4d1a <__libc_fini_array+0x16>
    4d26:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    4d2a:	f000 badb 	b.w	52e4 <_fini>
    4d2e:	bf00      	nop
    4d30:	000052f4 	.word	0x000052f4
    4d34:	000052f0 	.word	0x000052f0

00004d38 <__retarget_lock_acquire_recursive>:
    4d38:	4770      	bx	lr
    4d3a:	bf00      	nop

00004d3c <__retarget_lock_release_recursive>:
    4d3c:	4770      	bx	lr
    4d3e:	bf00      	nop
    4d40:	00333231 	.word	0x00333231
    4d44:	756c6156 	.word	0x756c6156
    4d48:	002c7365 	.word	0x002c7365
    4d4c:	0a333231 	.word	0x0a333231
    4d50:	0000000d 	.word	0x0000000d
    4d54:	756e654d 	.word	0x756e654d
    4d58:	0a0d3a20 	.word	0x0a0d3a20
    4d5c:	00000000 	.word	0x00000000
    4d60:	2d2d2020 	.word	0x2d2d2020
    4d64:	6c655320 	.word	0x6c655320
    4d68:	20746365 	.word	0x20746365
    4d6c:	20656874 	.word	0x20656874
    4d70:	69746361 	.word	0x69746361
    4d74:	0d3a6e6f 	.word	0x0d3a6e6f
    4d78:	0000000a 	.word	0x0000000a
    4d7c:	3a302020 	.word	0x3a302020
    4d80:	74655320 	.word	0x74655320
    4d84:	61747320 	.word	0x61747320
    4d88:	7261646e 	.word	0x7261646e
    4d8c:	69662064 	.word	0x69662064
    4d90:	7265746c 	.word	0x7265746c
    4d94:	20444920 	.word	0x20444920
    4d98:	30203a30 	.word	0x30203a30
    4d9c:	41353478 	.word	0x41353478
    4da0:	7473202c 	.word	0x7473202c
    4da4:	2065726f 	.word	0x2065726f
    4da8:	6f746e69 	.word	0x6f746e69
    4dac:	20785220 	.word	0x20785220
    4db0:	66667562 	.word	0x66667562
    4db4:	202e7265 	.word	0x202e7265
    4db8:	00000a0d 	.word	0x00000a0d
    4dbc:	3a312020 	.word	0x3a312020
    4dc0:	74655320 	.word	0x74655320
    4dc4:	61747320 	.word	0x61747320
    4dc8:	7261646e 	.word	0x7261646e
    4dcc:	69662064 	.word	0x69662064
    4dd0:	7265746c 	.word	0x7265746c
    4dd4:	20444920 	.word	0x20444920
    4dd8:	30203a31 	.word	0x30203a31
    4ddc:	39363478 	.word	0x39363478
    4de0:	7473202c 	.word	0x7473202c
    4de4:	2065726f 	.word	0x2065726f
    4de8:	6f746e69 	.word	0x6f746e69
    4dec:	20785220 	.word	0x20785220
    4df0:	4f464946 	.word	0x4f464946
    4df4:	202e3020 	.word	0x202e3020
    4df8:	00000a0d 	.word	0x00000a0d
    4dfc:	3a322020 	.word	0x3a322020
    4e00:	6e655320 	.word	0x6e655320
    4e04:	44462064 	.word	0x44462064
    4e08:	61747320 	.word	0x61747320
    4e0c:	7261646e 	.word	0x7261646e
    4e10:	656d2064 	.word	0x656d2064
    4e14:	67617373 	.word	0x67617373
    4e18:	69772065 	.word	0x69772065
    4e1c:	49206874 	.word	0x49206874
    4e20:	30203a44 	.word	0x30203a44
    4e24:	41353478 	.word	0x41353478
    4e28:	646e6120 	.word	0x646e6120
    4e2c:	20343620 	.word	0x20343620
    4e30:	65747962 	.word	0x65747962
    4e34:	74616420 	.word	0x74616420
    4e38:	20302061 	.word	0x20302061
    4e3c:	36206f74 	.word	0x36206f74
    4e40:	0d202e33 	.word	0x0d202e33
    4e44:	0000000a 	.word	0x0000000a
    4e48:	3a332020 	.word	0x3a332020
    4e4c:	6e655320 	.word	0x6e655320
    4e50:	44462064 	.word	0x44462064
    4e54:	61747320 	.word	0x61747320
    4e58:	7261646e 	.word	0x7261646e
    4e5c:	656d2064 	.word	0x656d2064
    4e60:	67617373 	.word	0x67617373
    4e64:	69772065 	.word	0x69772065
    4e68:	49206874 	.word	0x49206874
    4e6c:	30203a44 	.word	0x30203a44
    4e70:	39363478 	.word	0x39363478
    4e74:	646e6120 	.word	0x646e6120
    4e78:	20343620 	.word	0x20343620
    4e7c:	65747962 	.word	0x65747962
    4e80:	74616420 	.word	0x74616420
    4e84:	32312061 	.word	0x32312061
    4e88:	6f742038 	.word	0x6f742038
    4e8c:	31393120 	.word	0x31393120
    4e90:	0a0d202e 	.word	0x0a0d202e
    4e94:	00000000 	.word	0x00000000
    4e98:	3a342020 	.word	0x3a342020
    4e9c:	74655320 	.word	0x74655320
    4ea0:	74786520 	.word	0x74786520
    4ea4:	65646e65 	.word	0x65646e65
    4ea8:	69662064 	.word	0x69662064
    4eac:	7265746c 	.word	0x7265746c
    4eb0:	20444920 	.word	0x20444920
    4eb4:	30203a30 	.word	0x30203a30
    4eb8:	30303178 	.word	0x30303178
    4ebc:	41303030 	.word	0x41303030
    4ec0:	73202c35 	.word	0x73202c35
    4ec4:	65726f74 	.word	0x65726f74
    4ec8:	746e6920 	.word	0x746e6920
    4ecc:	7852206f 	.word	0x7852206f
    4ed0:	66756220 	.word	0x66756220
    4ed4:	2e726566 	.word	0x2e726566
    4ed8:	000a0d20 	.word	0x000a0d20
    4edc:	3a352020 	.word	0x3a352020
    4ee0:	74655320 	.word	0x74655320
    4ee4:	74786520 	.word	0x74786520
    4ee8:	65646e65 	.word	0x65646e65
    4eec:	69662064 	.word	0x69662064
    4ef0:	7265746c 	.word	0x7265746c
    4ef4:	20444920 	.word	0x20444920
    4ef8:	30203a31 	.word	0x30203a31
    4efc:	30303178 	.word	0x30303178
    4f00:	39303030 	.word	0x39303030
    4f04:	73202c36 	.word	0x73202c36
    4f08:	65726f74 	.word	0x65726f74
    4f0c:	746e6920 	.word	0x746e6920
    4f10:	7852206f 	.word	0x7852206f
    4f14:	46494620 	.word	0x46494620
    4f18:	2e31204f 	.word	0x2e31204f
    4f1c:	000a0d20 	.word	0x000a0d20
    4f20:	3a362020 	.word	0x3a362020
    4f24:	6e655320 	.word	0x6e655320
    4f28:	44462064 	.word	0x44462064
    4f2c:	74786520 	.word	0x74786520
    4f30:	65646e65 	.word	0x65646e65
    4f34:	656d2064 	.word	0x656d2064
    4f38:	67617373 	.word	0x67617373
    4f3c:	69772065 	.word	0x69772065
    4f40:	49206874 	.word	0x49206874
    4f44:	30203a44 	.word	0x30203a44
    4f48:	30303178 	.word	0x30303178
    4f4c:	41303030 	.word	0x41303030
    4f50:	6e612035 	.word	0x6e612035
    4f54:	34362064 	.word	0x34362064
    4f58:	74796220 	.word	0x74796220
    4f5c:	61642065 	.word	0x61642065
    4f60:	30206174 	.word	0x30206174
    4f64:	206f7420 	.word	0x206f7420
    4f68:	202e3336 	.word	0x202e3336
    4f6c:	00000a0d 	.word	0x00000a0d
    4f70:	3a372020 	.word	0x3a372020
    4f74:	6e655320 	.word	0x6e655320
    4f78:	44462064 	.word	0x44462064
    4f7c:	74786520 	.word	0x74786520
    4f80:	65646e65 	.word	0x65646e65
    4f84:	656d2064 	.word	0x656d2064
    4f88:	67617373 	.word	0x67617373
    4f8c:	69772065 	.word	0x69772065
    4f90:	49206874 	.word	0x49206874
    4f94:	30203a44 	.word	0x30203a44
    4f98:	30303178 	.word	0x30303178
    4f9c:	39303030 	.word	0x39303030
    4fa0:	6e612036 	.word	0x6e612036
    4fa4:	34362064 	.word	0x34362064
    4fa8:	74796220 	.word	0x74796220
    4fac:	61642065 	.word	0x61642065
    4fb0:	31206174 	.word	0x31206174
    4fb4:	74203832 	.word	0x74203832
    4fb8:	3931206f 	.word	0x3931206f
    4fbc:	0d202e31 	.word	0x0d202e31
    4fc0:	0000000a 	.word	0x0000000a
    4fc4:	3a612020 	.word	0x3a612020
    4fc8:	6e655320 	.word	0x6e655320
    4fcc:	6f6e2064 	.word	0x6f6e2064
    4fd0:	6c616d72 	.word	0x6c616d72
    4fd4:	61747320 	.word	0x61747320
    4fd8:	7261646e 	.word	0x7261646e
    4fdc:	656d2064 	.word	0x656d2064
    4fe0:	67617373 	.word	0x67617373
    4fe4:	69772065 	.word	0x69772065
    4fe8:	49206874 	.word	0x49206874
    4fec:	30203a44 	.word	0x30203a44
    4ff0:	39363478 	.word	0x39363478
    4ff4:	646e6120 	.word	0x646e6120
    4ff8:	62203820 	.word	0x62203820
    4ffc:	20657479 	.word	0x20657479
    5000:	61746164 	.word	0x61746164
    5004:	74203020 	.word	0x74203020
    5008:	2e37206f 	.word	0x2e37206f
    500c:	000a0d20 	.word	0x000a0d20
    5010:	3a682020 	.word	0x3a682020
    5014:	73694420 	.word	0x73694420
    5018:	79616c70 	.word	0x79616c70
    501c:	6e656d20 	.word	0x6e656d20
    5020:	0a0d2075 	.word	0x0a0d2075
    5024:	00000a0d 	.word	0x00000a0d
    5028:	682f2e2e 	.word	0x682f2e2e
    502c:	732f6c61 	.word	0x732f6c61
    5030:	682f6372 	.word	0x682f6372
    5034:	635f6c61 	.word	0x635f6c61
    5038:	615f6e61 	.word	0x615f6e61
    503c:	636e7973 	.word	0x636e7973
    5040:	0000632e 	.word	0x0000632e
    5044:	682f2e2e 	.word	0x682f2e2e
    5048:	732f6c61 	.word	0x732f6c61
    504c:	682f6372 	.word	0x682f6372
    5050:	695f6c61 	.word	0x695f6c61
    5054:	6d5f6332 	.word	0x6d5f6332
    5058:	7973615f 	.word	0x7973615f
    505c:	632e636e 	.word	0x632e636e
    5060:	00000000 	.word	0x00000000
    5064:	682f2e2e 	.word	0x682f2e2e
    5068:	732f6c61 	.word	0x732f6c61
    506c:	682f6372 	.word	0x682f6372
    5070:	735f6c61 	.word	0x735f6c61
    5074:	6d5f6970 	.word	0x6d5f6970
    5078:	6e79735f 	.word	0x6e79735f
    507c:	00632e63 	.word	0x00632e63
    5080:	682f2e2e 	.word	0x682f2e2e
    5084:	732f6c61 	.word	0x732f6c61
    5088:	682f6372 	.word	0x682f6372
    508c:	745f6c61 	.word	0x745f6c61
    5090:	72656d69 	.word	0x72656d69
    5094:	0000632e 	.word	0x0000632e
    5098:	682f2e2e 	.word	0x682f2e2e
    509c:	752f6c61 	.word	0x752f6c61
    50a0:	736c6974 	.word	0x736c6974
    50a4:	6372732f 	.word	0x6372732f
    50a8:	6974752f 	.word	0x6974752f
    50ac:	6c5f736c 	.word	0x6c5f736c
    50b0:	2e747369 	.word	0x2e747369
    50b4:	00000063 	.word	0x00000063

000050b8 <user_mux_confs>:
    50b8:	00000100 00000000 00000000 00000000     ................
	...

000050fc <channel_confs>:
    50fc:	0000060c 00000000 00000000 00000000     ................
	...

0000513c <interrupt_cfg>:
	...
    51bc:	682f2e2e 722f6c70 682f6374 725f6c70     ../hpl/rtc/hpl_r
    51cc:	632e6374 00000000 40003000 40003400     tc.c.....0.@.4.@
    51dc:	41012000 41014000 43000000 43000400     . .A.@.A...C...C
    51ec:	43000800 43000c00                       ...C...C

000051f4 <_i2cms>:
    51f4:	00000001 00200014 00000100 00003635     ...... .....56..
    5204:	00d70000 00b71b00 00000005 00200014     .............. .
    5214:	00000100 00003635 00d70000 00b71b00     ....56..........

00005224 <sercomspi_regs>:
    5224:	0020000c 00020000 00000000 01ff0077     .. .........w...
    5234:	20000c00 02000000 00000000 ff007700     ... .........w..
    5244:	00000601 682f2e2e 732f6c70 6f637265     ....../hpl/serco
    5254:	70682f6d 65735f6c 6d6f6372 0000632e     m/hpl_sercom.c..

00005264 <_usb_ep_cfgs>:
    5264:	200008a8 00000000 00000040 20000868     ... ....@...h.. 
    5274:	00000000 00000040 20000828 00000000     ....@...(.. ....
    5284:	00000040 752f2e2e 642f6273 63697665     @...../usb/devic
    5294:	73752f65 2e636462 00000063              e/usbdc.c...

000052a0 <_global_impure_ptr>:
    52a0:	20000110 33323130 37363534 62613938     ... 0123456789ab
    52b0:	66656463 6a696867 6e6d6c6b 7271706f     cdefghijklmnopqr
    52c0:	76757473 7a797877 00000000              stuvwxyz....

000052cc <_init>:
    52cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    52ce:	bf00      	nop
    52d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
    52d2:	bc08      	pop	{r3}
    52d4:	469e      	mov	lr, r3
    52d6:	4770      	bx	lr

000052d8 <__init_array_start>:
    52d8:	00004ce5 	.word	0x00004ce5

000052dc <__frame_dummy_init_array_entry>:
    52dc:	00000289 00000791                       ........

000052e4 <_fini>:
    52e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    52e6:	bf00      	nop
    52e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
    52ea:	bc08      	pop	{r3}
    52ec:	469e      	mov	lr, r3
    52ee:	4770      	bx	lr

000052f0 <__fini_array_start>:
    52f0:	00000265 	.word	0x00000265
