
USB_CDC_Class.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000365c  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000504  20000000  0000365c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bkupram      00000000  47000000  47000000  00020504  2**0
                  CONTENTS
  3 .qspi         00000000  04000000  04000000  00020504  2**0
                  CONTENTS
  4 .bss          000003bc  20000504  00003b60  00020504  2**2
                  ALLOC
  5 .stack        00010000  200008c0  00003f1c  00020504  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  00020504  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  00020532  2**0
                  CONTENTS, READONLY
  8 .debug_info   0002b215  00000000  00000000  0002058b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00003fcb  00000000  00000000  0004b7a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00011e63  00000000  00000000  0004f76b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000d38  00000000  00000000  000615ce  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000014e0  00000000  00000000  00062306  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0003836d  00000000  00000000  000637e6  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00016bec  00000000  00000000  0009bb53  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0011e553  00000000  00000000  000b273f  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00002490  00000000  00000000  001d0c94  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	c0 08 01 20 d5 02 00 00 d1 02 00 00 d1 02 00 00     ... ............
      10:	d1 02 00 00 d1 02 00 00 d1 02 00 00 00 00 00 00     ................
	...
      2c:	d1 02 00 00 d1 02 00 00 00 00 00 00 d1 02 00 00     ................
      3c:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      4c:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      5c:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      6c:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      7c:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      8c:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      9c:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      ac:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      bc:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      cc:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      dc:	d1 02 00 00 d1 02 00 00 d1 02 00 00 00 00 00 00     ................
	...
      f4:	d1 02 00 00 9d 10 00 00 b1 10 00 00 c5 10 00 00     ................
     104:	d9 10 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     114:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     124:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     134:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     144:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     154:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     164:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     174:	d1 02 00 00 d1 02 00 00 d1 02 00 00 59 26 00 00     ............Y&..
     184:	65 26 00 00 71 26 00 00 7d 26 00 00 d1 02 00 00     e&..q&..}&......
     194:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     1a4:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     1b4:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     1c4:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     1d4:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     1e4:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     1f4:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     204:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     214:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     224:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     234:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     244:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     254:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................

00000264 <__do_global_dtors_aux>:
     264:	b510      	push	{r4, lr}
     266:	4c05      	ldr	r4, [pc, #20]	; (27c <__do_global_dtors_aux+0x18>)
     268:	7823      	ldrb	r3, [r4, #0]
     26a:	b933      	cbnz	r3, 27a <__do_global_dtors_aux+0x16>
     26c:	4b04      	ldr	r3, [pc, #16]	; (280 <__do_global_dtors_aux+0x1c>)
     26e:	b113      	cbz	r3, 276 <__do_global_dtors_aux+0x12>
     270:	4804      	ldr	r0, [pc, #16]	; (284 <__do_global_dtors_aux+0x20>)
     272:	f3af 8000 	nop.w
     276:	2301      	movs	r3, #1
     278:	7023      	strb	r3, [r4, #0]
     27a:	bd10      	pop	{r4, pc}
     27c:	20000504 	.word	0x20000504
     280:	00000000 	.word	0x00000000
     284:	0000365c 	.word	0x0000365c

00000288 <frame_dummy>:
     288:	4b0c      	ldr	r3, [pc, #48]	; (2bc <frame_dummy+0x34>)
     28a:	b143      	cbz	r3, 29e <frame_dummy+0x16>
     28c:	480c      	ldr	r0, [pc, #48]	; (2c0 <frame_dummy+0x38>)
     28e:	490d      	ldr	r1, [pc, #52]	; (2c4 <frame_dummy+0x3c>)
     290:	b510      	push	{r4, lr}
     292:	f3af 8000 	nop.w
     296:	480c      	ldr	r0, [pc, #48]	; (2c8 <frame_dummy+0x40>)
     298:	6803      	ldr	r3, [r0, #0]
     29a:	b923      	cbnz	r3, 2a6 <frame_dummy+0x1e>
     29c:	bd10      	pop	{r4, pc}
     29e:	480a      	ldr	r0, [pc, #40]	; (2c8 <frame_dummy+0x40>)
     2a0:	6803      	ldr	r3, [r0, #0]
     2a2:	b933      	cbnz	r3, 2b2 <frame_dummy+0x2a>
     2a4:	4770      	bx	lr
     2a6:	4b09      	ldr	r3, [pc, #36]	; (2cc <frame_dummy+0x44>)
     2a8:	2b00      	cmp	r3, #0
     2aa:	d0f7      	beq.n	29c <frame_dummy+0x14>
     2ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     2b0:	4718      	bx	r3
     2b2:	4b06      	ldr	r3, [pc, #24]	; (2cc <frame_dummy+0x44>)
     2b4:	2b00      	cmp	r3, #0
     2b6:	d0f5      	beq.n	2a4 <frame_dummy+0x1c>
     2b8:	4718      	bx	r3
     2ba:	bf00      	nop
     2bc:	00000000 	.word	0x00000000
     2c0:	0000365c 	.word	0x0000365c
     2c4:	20000508 	.word	0x20000508
     2c8:	0000365c 	.word	0x0000365c
     2cc:	00000000 	.word	0x00000000

000002d0 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     2d0:	e7fe      	b.n	2d0 <Dummy_Handler>
	...

000002d4 <Reset_Handler>:
{
     2d4:	b508      	push	{r3, lr}
        if (pSrc != pDest) {
     2d6:	4b17      	ldr	r3, [pc, #92]	; (334 <Reset_Handler+0x60>)
     2d8:	4a17      	ldr	r2, [pc, #92]	; (338 <Reset_Handler+0x64>)
     2da:	429a      	cmp	r2, r3
     2dc:	d010      	beq.n	300 <Reset_Handler+0x2c>
                for (; pDest < &_erelocate;) {
     2de:	4b17      	ldr	r3, [pc, #92]	; (33c <Reset_Handler+0x68>)
     2e0:	4a14      	ldr	r2, [pc, #80]	; (334 <Reset_Handler+0x60>)
     2e2:	429a      	cmp	r2, r3
     2e4:	d20c      	bcs.n	300 <Reset_Handler+0x2c>
     2e6:	3b01      	subs	r3, #1
     2e8:	1a9b      	subs	r3, r3, r2
     2ea:	f023 0303 	bic.w	r3, r3, #3
     2ee:	3304      	adds	r3, #4
     2f0:	4413      	add	r3, r2
     2f2:	4911      	ldr	r1, [pc, #68]	; (338 <Reset_Handler+0x64>)
                        *pDest++ = *pSrc++;
     2f4:	f851 0b04 	ldr.w	r0, [r1], #4
     2f8:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
     2fc:	429a      	cmp	r2, r3
     2fe:	d1f9      	bne.n	2f4 <Reset_Handler+0x20>
        for (pDest = &_szero; pDest < &_ezero;) {
     300:	4b0f      	ldr	r3, [pc, #60]	; (340 <Reset_Handler+0x6c>)
     302:	4a10      	ldr	r2, [pc, #64]	; (344 <Reset_Handler+0x70>)
     304:	429a      	cmp	r2, r3
     306:	d20a      	bcs.n	31e <Reset_Handler+0x4a>
     308:	3b01      	subs	r3, #1
     30a:	1a9b      	subs	r3, r3, r2
     30c:	f023 0303 	bic.w	r3, r3, #3
     310:	3304      	adds	r3, #4
     312:	4413      	add	r3, r2
                *pDest++ = 0;
     314:	2100      	movs	r1, #0
     316:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
     31a:	4293      	cmp	r3, r2
     31c:	d1fb      	bne.n	316 <Reset_Handler+0x42>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     31e:	4a0a      	ldr	r2, [pc, #40]	; (348 <Reset_Handler+0x74>)
     320:	4b0a      	ldr	r3, [pc, #40]	; (34c <Reset_Handler+0x78>)
     322:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
     326:	6093      	str	r3, [r2, #8]
        __libc_init_array();
     328:	4b09      	ldr	r3, [pc, #36]	; (350 <Reset_Handler+0x7c>)
     32a:	4798      	blx	r3
        main();
     32c:	4b09      	ldr	r3, [pc, #36]	; (354 <Reset_Handler+0x80>)
     32e:	4798      	blx	r3
     330:	e7fe      	b.n	330 <Reset_Handler+0x5c>
     332:	bf00      	nop
     334:	20000000 	.word	0x20000000
     338:	0000365c 	.word	0x0000365c
     33c:	20000504 	.word	0x20000504
     340:	200008c0 	.word	0x200008c0
     344:	20000504 	.word	0x20000504
     348:	e000ed00 	.word	0xe000ed00
     34c:	00000000 	.word	0x00000000
     350:	00003225 	.word	0x00003225
     354:	00000359 	.word	0x00000359

00000358 <main>:
#include "USB_CDC_Class.h"

static uint8_t p[]="Usb port Test\n\r";

int main(void)
{
     358:	b530      	push	{r4, r5, lr}
     35a:	b099      	sub	sp, #100	; 0x64
	atmel_start_init();
     35c:	4b0b      	ldr	r3, [pc, #44]	; (38c <main+0x34>)
     35e:	4798      	blx	r3
	USB_CDC_Class	usb0;
     360:	a801      	add	r0, sp, #4
     362:	4b0b      	ldr	r3, [pc, #44]	; (390 <main+0x38>)
     364:	4798      	blx	r3
	usb0.init();
     366:	a801      	add	r0, sp, #4
     368:	4b0a      	ldr	r3, [pc, #40]	; (394 <main+0x3c>)
     36a:	4798      	blx	r3
	uint8_t *ptr=p;
    /* Replace with your application code */
    while (1) 
    {
		while(!usb0.isUSBEnabled());
     36c:	4c0a      	ldr	r4, [pc, #40]	; (398 <main+0x40>)
		usb0.write(ptr,sizeof(p));
     36e:	4d0b      	ldr	r5, [pc, #44]	; (39c <main+0x44>)
		while(!usb0.isUSBEnabled());
     370:	a801      	add	r0, sp, #4
     372:	47a0      	blx	r4
     374:	2800      	cmp	r0, #0
     376:	d0fb      	beq.n	370 <main+0x18>
		usb0.write(ptr,sizeof(p));
     378:	2210      	movs	r2, #16
     37a:	4629      	mov	r1, r5
     37c:	a801      	add	r0, sp, #4
     37e:	4b08      	ldr	r3, [pc, #32]	; (3a0 <main+0x48>)
     380:	4798      	blx	r3
		delay_ms(500);
     382:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
     386:	4b07      	ldr	r3, [pc, #28]	; (3a4 <main+0x4c>)
     388:	4798      	blx	r3
    while (1) 
     38a:	e7f1      	b.n	370 <main+0x18>
     38c:	000003fd 	.word	0x000003fd
     390:	000003a9 	.word	0x000003a9
     394:	000003ad 	.word	0x000003ad
     398:	000003f1 	.word	0x000003f1
     39c:	20000000 	.word	0x20000000
     3a0:	000003e1 	.word	0x000003e1
     3a4:	0000061d 	.word	0x0000061d

000003a8 <_ZN13USB_CDC_ClassC1Ev>:
{
	//portNumber=0;
	//usb_desc=&single_desc;
	//USBbuffer=usbd_cdc_buffer;

} //USB_CDC_Class
     3a8:	4770      	bx	lr
	...

000003ac <_ZN13USB_CDC_Class4initEv>:
} //USB_CDC_Class

// default destructor


void USB_CDC_Class::init(){
     3ac:	b508      	push	{r3, lr}
	usbdc_init(ctrl_buffer);
     3ae:	3014      	adds	r0, #20
     3b0:	4b05      	ldr	r3, [pc, #20]	; (3c8 <_ZN13USB_CDC_Class4initEv+0x1c>)
     3b2:	4798      	blx	r3

	/* usbdc_register_funcion inside */
	cdcdf_acm_init();
     3b4:	4b05      	ldr	r3, [pc, #20]	; (3cc <_ZN13USB_CDC_Class4initEv+0x20>)
     3b6:	4798      	blx	r3

	usbdc_start(single_desc);
     3b8:	4805      	ldr	r0, [pc, #20]	; (3d0 <_ZN13USB_CDC_Class4initEv+0x24>)
     3ba:	4b06      	ldr	r3, [pc, #24]	; (3d4 <_ZN13USB_CDC_Class4initEv+0x28>)
     3bc:	4798      	blx	r3
	usbdc_attach();
     3be:	4b06      	ldr	r3, [pc, #24]	; (3d8 <_ZN13USB_CDC_Class4initEv+0x2c>)
     3c0:	4798      	blx	r3


bool USB_CDC_Class::isUSBEnabled(void){
	

		return cdcdf_acm_is_enabled();
     3c2:	4b06      	ldr	r3, [pc, #24]	; (3dc <_ZN13USB_CDC_Class4initEv+0x30>)
     3c4:	4798      	blx	r3
     3c6:	bd08      	pop	{r3, pc}
     3c8:	00002f6d 	.word	0x00002f6d
     3cc:	000028e9 	.word	0x000028e9
     3d0:	20000010 	.word	0x20000010
     3d4:	00002fdd 	.word	0x00002fdd
     3d8:	00003011 	.word	0x00003011
     3dc:	00002955 	.word	0x00002955

000003e0 <_ZN13USB_CDC_Class5writeEPhm>:
int32_t  USB_CDC_Class::write( uint8_t *p, uint32_t n){
     3e0:	b508      	push	{r3, lr}
     3e2:	4608      	mov	r0, r1
	w=cdcdf_acm_write(p,n);
     3e4:	4611      	mov	r1, r2
     3e6:	4b01      	ldr	r3, [pc, #4]	; (3ec <_ZN13USB_CDC_Class5writeEPhm+0xc>)
     3e8:	4798      	blx	r3
}
     3ea:	bd08      	pop	{r3, pc}
     3ec:	0000292d 	.word	0x0000292d

000003f0 <_ZN13USB_CDC_Class12isUSBEnabledEv>:
bool USB_CDC_Class::isUSBEnabled(void){
     3f0:	b508      	push	{r3, lr}
		return cdcdf_acm_is_enabled();
     3f2:	4b01      	ldr	r3, [pc, #4]	; (3f8 <_ZN13USB_CDC_Class12isUSBEnabledEv+0x8>)
     3f4:	4798      	blx	r3


	
}
     3f6:	bd08      	pop	{r3, pc}
     3f8:	00002955 	.word	0x00002955

000003fc <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
     3fc:	b508      	push	{r3, lr}
	system_init();
     3fe:	4b02      	ldr	r3, [pc, #8]	; (408 <atmel_start_init+0xc>)
     400:	4798      	blx	r3
	usb_init();
     402:	4b02      	ldr	r3, [pc, #8]	; (40c <atmel_start_init+0x10>)
     404:	4798      	blx	r3
     406:	bd08      	pop	{r3, pc}
     408:	000005e5 	.word	0x000005e5
     40c:	0000319d 	.word	0x0000319d

00000410 <SPI_0_PORT_init>:
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = ~data;
}

static inline void hri_port_clear_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     410:	4b28      	ldr	r3, [pc, #160]	; (4b4 <SPI_0_PORT_init+0xa4>)
     412:	2210      	movs	r2, #16
     414:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     416:	609a      	str	r2, [r3, #8]

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     418:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     41c:	629a      	str	r2, [r3, #40]	; 0x28
     41e:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
     422:	6299      	str	r1, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     424:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
	tmp &= ~PORT_PINCFG_PMUXEN;
     428:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     42c:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     430:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     434:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     438:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     43c:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     440:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     444:	2220      	movs	r2, #32
     446:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     448:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     44a:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     44e:	629a      	str	r2, [r3, #40]	; 0x28
     450:	6299      	str	r1, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     452:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
	tmp &= ~PORT_PINCFG_PMUXEN;
     456:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     45a:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     45e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     462:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     466:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     46a:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     46e:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     472:	2240      	movs	r2, #64	; 0x40
     474:	605a      	str	r2, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     476:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     47a:	f502 3200 	add.w	r2, r2, #131072	; 0x20000
     47e:	629a      	str	r2, [r3, #40]	; 0x28
     480:	4a0d      	ldr	r2, [pc, #52]	; (4b8 <SPI_0_PORT_init+0xa8>)
     482:	629a      	str	r2, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     484:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
     488:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     48c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     490:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
	tmp &= ~PORT_PINCFG_PMUXEN;
     494:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     498:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     49c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     4a0:	f893 2033 	ldrb.w	r2, [r3, #51]	; 0x33
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     4a4:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     4a8:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     4ac:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
     4b0:	4770      	bx	lr
     4b2:	bf00      	nop
     4b4:	41008000 	.word	0x41008000
     4b8:	c0020000 	.word	0xc0020000

000004bc <SPI_0_CLOCK_init>:
}

static inline void hri_gclk_write_PCHCTRL_reg(const void *const hw, uint8_t index, hri_gclk_pchctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->PCHCTRL[index].reg = data;
     4bc:	4b06      	ldr	r3, [pc, #24]	; (4d8 <SPI_0_CLOCK_init+0x1c>)
     4be:	2240      	movs	r2, #64	; 0x40
     4c0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
     4c4:	2243      	movs	r2, #67	; 0x43
     4c6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}

static inline void hri_mclk_set_APBAMASK_SERCOM0_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_SERCOM0;
     4ca:	4a04      	ldr	r2, [pc, #16]	; (4dc <SPI_0_CLOCK_init+0x20>)
     4cc:	6953      	ldr	r3, [r2, #20]
     4ce:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
     4d2:	6153      	str	r3, [r2, #20]
     4d4:	4770      	bx	lr
     4d6:	bf00      	nop
     4d8:	40001c00 	.word	0x40001c00
     4dc:	40000800 	.word	0x40000800

000004e0 <SPI_0_init>:

	hri_mclk_set_APBAMASK_SERCOM0_bit(MCLK);
}

void SPI_0_init(void)
{
     4e0:	b508      	push	{r3, lr}
	SPI_0_CLOCK_init();
     4e2:	4b04      	ldr	r3, [pc, #16]	; (4f4 <SPI_0_init+0x14>)
     4e4:	4798      	blx	r3
	spi_m_async_init(&SPI_0, SERCOM0);
     4e6:	4904      	ldr	r1, [pc, #16]	; (4f8 <SPI_0_init+0x18>)
     4e8:	4804      	ldr	r0, [pc, #16]	; (4fc <SPI_0_init+0x1c>)
     4ea:	4b05      	ldr	r3, [pc, #20]	; (500 <SPI_0_init+0x20>)
     4ec:	4798      	blx	r3
	SPI_0_PORT_init();
     4ee:	4b05      	ldr	r3, [pc, #20]	; (504 <SPI_0_init+0x24>)
     4f0:	4798      	blx	r3
     4f2:	bd08      	pop	{r3, pc}
     4f4:	000004bd 	.word	0x000004bd
     4f8:	40003000 	.word	0x40003000
     4fc:	20000854 	.word	0x20000854
     500:	000007fd 	.word	0x000007fd
     504:	00000411 	.word	0x00000411

00000508 <delay_driver_init>:
}

void delay_driver_init(void)
{
     508:	b508      	push	{r3, lr}
	delay_init(SysTick);
     50a:	4802      	ldr	r0, [pc, #8]	; (514 <delay_driver_init+0xc>)
     50c:	4b02      	ldr	r3, [pc, #8]	; (518 <delay_driver_init+0x10>)
     50e:	4798      	blx	r3
     510:	bd08      	pop	{r3, pc}
     512:	bf00      	nop
     514:	e000e010 	.word	0xe000e010
     518:	00000609 	.word	0x00000609

0000051c <USB_0_PORT_init>:
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     51c:	4b1e      	ldr	r3, [pc, #120]	; (598 <USB_0_PORT_init+0x7c>)
     51e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
     522:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     524:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
     528:	6299      	str	r1, [r3, #40]	; 0x28
     52a:	481c      	ldr	r0, [pc, #112]	; (59c <USB_0_PORT_init+0x80>)
     52c:	6298      	str	r0, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     52e:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     530:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
     534:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     538:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     53c:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
	tmp &= ~PORT_PINCFG_PMUXEN;
     540:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     544:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     548:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     54c:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     550:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     554:	f042 0207 	orr.w	r2, r2, #7
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     558:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     55c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
     560:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     562:	6299      	str	r1, [r3, #40]	; 0x28
     564:	490e      	ldr	r1, [pc, #56]	; (5a0 <USB_0_PORT_init+0x84>)
     566:	6299      	str	r1, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     568:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     56a:	f893 2059 	ldrb.w	r2, [r3, #89]	; 0x59
     56e:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     572:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     576:	f893 2059 	ldrb.w	r2, [r3, #89]	; 0x59
	tmp &= ~PORT_PINCFG_PMUXEN;
     57a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     57e:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     582:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     586:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     58a:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     58e:	f042 0270 	orr.w	r2, r2, #112	; 0x70
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     592:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
     596:	4770      	bx	lr
     598:	41008000 	.word	0x41008000
     59c:	c0000100 	.word	0xc0000100
     5a0:	c0000200 	.word	0xc0000200

000005a4 <USB_0_CLOCK_init>:
     5a4:	2244      	movs	r2, #68	; 0x44
     5a6:	4b07      	ldr	r3, [pc, #28]	; (5c4 <USB_0_CLOCK_init+0x20>)
     5a8:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_USB;
     5ac:	f5a3 53a0 	sub.w	r3, r3, #5120	; 0x1400
     5b0:	691a      	ldr	r2, [r3, #16]
     5b2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
     5b6:	611a      	str	r2, [r3, #16]
}

static inline void hri_mclk_set_APBBMASK_USB_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_USB;
     5b8:	699a      	ldr	r2, [r3, #24]
     5ba:	f042 0201 	orr.w	r2, r2, #1
     5be:	619a      	str	r2, [r3, #24]
     5c0:	4770      	bx	lr
     5c2:	bf00      	nop
     5c4:	40001c00 	.word	0x40001c00

000005c8 <USB_0_init>:
	hri_mclk_set_AHBMASK_USB_bit(MCLK);
	hri_mclk_set_APBBMASK_USB_bit(MCLK);
}

void USB_0_init(void)
{
     5c8:	b508      	push	{r3, lr}
	USB_0_CLOCK_init();
     5ca:	4b03      	ldr	r3, [pc, #12]	; (5d8 <USB_0_init+0x10>)
     5cc:	4798      	blx	r3
	usb_d_init();
     5ce:	4b03      	ldr	r3, [pc, #12]	; (5dc <USB_0_init+0x14>)
     5d0:	4798      	blx	r3
	USB_0_PORT_init();
     5d2:	4b03      	ldr	r3, [pc, #12]	; (5e0 <USB_0_init+0x18>)
     5d4:	4798      	blx	r3
     5d6:	bd08      	pop	{r3, pc}
     5d8:	000005a5 	.word	0x000005a5
     5dc:	00000ad5 	.word	0x00000ad5
     5e0:	0000051d 	.word	0x0000051d

000005e4 <system_init>:
}

void system_init(void)
{
     5e4:	b508      	push	{r3, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
     5e6:	4b04      	ldr	r3, [pc, #16]	; (5f8 <system_init+0x14>)
     5e8:	4798      	blx	r3
	init_mcu();

	SPI_0_init();
     5ea:	4b04      	ldr	r3, [pc, #16]	; (5fc <system_init+0x18>)
     5ec:	4798      	blx	r3

	delay_driver_init();
     5ee:	4b04      	ldr	r3, [pc, #16]	; (600 <system_init+0x1c>)
     5f0:	4798      	blx	r3

	USB_0_init();
     5f2:	4b04      	ldr	r3, [pc, #16]	; (604 <system_init+0x20>)
     5f4:	4798      	blx	r3
     5f6:	bd08      	pop	{r3, pc}
     5f8:	00000e31 	.word	0x00000e31
     5fc:	000004e1 	.word	0x000004e1
     600:	00000509 	.word	0x00000509
     604:	000005c9 	.word	0x000005c9

00000608 <delay_init>:

/**
 * \brief Initialize Delay driver
 */
void delay_init(void *const hw)
{
     608:	b508      	push	{r3, lr}
	_delay_init(hardware = hw);
     60a:	4b02      	ldr	r3, [pc, #8]	; (614 <delay_init+0xc>)
     60c:	6018      	str	r0, [r3, #0]
     60e:	4b02      	ldr	r3, [pc, #8]	; (618 <delay_init+0x10>)
     610:	4798      	blx	r3
     612:	bd08      	pop	{r3, pc}
     614:	20000520 	.word	0x20000520
     618:	0000138d 	.word	0x0000138d

0000061c <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
     61c:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
     61e:	4b04      	ldr	r3, [pc, #16]	; (630 <delay_ms+0x14>)
     620:	681c      	ldr	r4, [r3, #0]
     622:	4b04      	ldr	r3, [pc, #16]	; (634 <delay_ms+0x18>)
     624:	4798      	blx	r3
     626:	4601      	mov	r1, r0
     628:	4620      	mov	r0, r4
     62a:	4b03      	ldr	r3, [pc, #12]	; (638 <delay_ms+0x1c>)
     62c:	4798      	blx	r3
     62e:	bd10      	pop	{r4, pc}
     630:	20000520 	.word	0x20000520
     634:	00000e27 	.word	0x00000e27
     638:	000013a1 	.word	0x000013a1

0000063c <_spi_m_async_io_write>:
 *  \return ERR_NONE on success, or an error code on failure.
 *  \retval ERR_NONE Success, transfer started.
 *  \retval ERR_BUSY Busy.
 */
static int32_t _spi_m_async_io_write(struct io_descriptor *io, const uint8_t *const buf, const uint16_t length)
{
     63c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     63e:	460f      	mov	r7, r1
     640:	4616      	mov	r6, r2
	ASSERT(io);
     642:	4604      	mov	r4, r0
     644:	f240 1227 	movw	r2, #295	; 0x127
     648:	4909      	ldr	r1, [pc, #36]	; (670 <_spi_m_async_io_write+0x34>)
     64a:	3000      	adds	r0, #0
     64c:	bf18      	it	ne
     64e:	2001      	movne	r0, #1
     650:	4b08      	ldr	r3, [pc, #32]	; (674 <_spi_m_async_io_write+0x38>)
     652:	4798      	blx	r3
	struct spi_m_async_descriptor *spi = CONTAINER_OF(io, struct spi_m_async_descriptor, io);

	spi->xfer.rxbuf = NULL;
     654:	2500      	movs	r5, #0
     656:	61a5      	str	r5, [r4, #24]
	spi->xfer.txbuf = (uint8_t *)buf;
     658:	6167      	str	r7, [r4, #20]
	spi->xfer.size  = length;
     65a:	61e6      	str	r6, [r4, #28]
	spi->xfercnt    = 0;
     65c:	6225      	str	r5, [r4, #32]

	spi->stat = SPI_M_ASYNC_STATUS_BUSY;
     65e:	2310      	movs	r3, #16
     660:	7223      	strb	r3, [r4, #8]
	_spi_m_async_enable_tx(&spi->dev, true);
     662:	2101      	movs	r1, #1
     664:	f1a4 0020 	sub.w	r0, r4, #32
     668:	4b03      	ldr	r3, [pc, #12]	; (678 <_spi_m_async_io_write+0x3c>)
     66a:	4798      	blx	r3

	return ERR_NONE;
}
     66c:	4628      	mov	r0, r5
     66e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     670:	00003564 	.word	0x00003564
     674:	00000e21 	.word	0x00000e21
     678:	0000124d 	.word	0x0000124d

0000067c <_spi_m_async_io_read>:
{
     67c:	b570      	push	{r4, r5, r6, lr}
     67e:	460d      	mov	r5, r1
     680:	4616      	mov	r6, r2
	ASSERT(io);
     682:	4604      	mov	r4, r0
     684:	f240 1205 	movw	r2, #261	; 0x105
     688:	490c      	ldr	r1, [pc, #48]	; (6bc <_spi_m_async_io_read+0x40>)
     68a:	3000      	adds	r0, #0
     68c:	bf18      	it	ne
     68e:	2001      	movne	r0, #1
     690:	4b0b      	ldr	r3, [pc, #44]	; (6c0 <_spi_m_async_io_read+0x44>)
     692:	4798      	blx	r3
	spi->xfer.rxbuf = buf;
     694:	61a5      	str	r5, [r4, #24]
	spi->xfer.txbuf = NULL;
     696:	2500      	movs	r5, #0
     698:	6165      	str	r5, [r4, #20]
	spi->xfer.size  = length;
     69a:	61e6      	str	r6, [r4, #28]
	spi->xfercnt    = 0;
     69c:	6225      	str	r5, [r4, #32]
	spi->stat = SPI_M_ASYNC_STATUS_BUSY;
     69e:	2310      	movs	r3, #16
     6a0:	7223      	strb	r3, [r4, #8]
	_spi_m_async_enable_rx(&spi->dev, true);
     6a2:	3c20      	subs	r4, #32
     6a4:	2101      	movs	r1, #1
     6a6:	4620      	mov	r0, r4
     6a8:	4b06      	ldr	r3, [pc, #24]	; (6c4 <_spi_m_async_io_read+0x48>)
     6aa:	4798      	blx	r3
	_spi_m_async_write_one(&spi->dev, SPI_DUMMY_CHAR);
     6ac:	f240 11ff 	movw	r1, #511	; 0x1ff
     6b0:	4620      	mov	r0, r4
     6b2:	4b05      	ldr	r3, [pc, #20]	; (6c8 <_spi_m_async_io_read+0x4c>)
     6b4:	4798      	blx	r3
}
     6b6:	4628      	mov	r0, r5
     6b8:	bd70      	pop	{r4, r5, r6, pc}
     6ba:	bf00      	nop
     6bc:	00003564 	.word	0x00003564
     6c0:	00000e21 	.word	0x00000e21
     6c4:	00001281 	.word	0x00001281
     6c8:	000012fd 	.word	0x000012fd

000006cc <_spi_dev_error>:
{
     6cc:	b570      	push	{r4, r5, r6, lr}
     6ce:	4604      	mov	r4, r0
     6d0:	460e      	mov	r6, r1
	struct spi_m_async_descriptor *spi = CONTAINER_OF(dev, struct spi_m_async_descriptor, dev);
     6d2:	1f05      	subs	r5, r0, #4
	_spi_m_async_enable_tx(dev, false);
     6d4:	2100      	movs	r1, #0
     6d6:	4b09      	ldr	r3, [pc, #36]	; (6fc <_spi_dev_error+0x30>)
     6d8:	4798      	blx	r3
	_spi_m_async_enable_rx(dev, false);
     6da:	2100      	movs	r1, #0
     6dc:	4620      	mov	r0, r4
     6de:	4b08      	ldr	r3, [pc, #32]	; (700 <_spi_dev_error+0x34>)
     6e0:	4798      	blx	r3
	_spi_m_async_enable_tx_complete(dev, false);
     6e2:	2100      	movs	r1, #0
     6e4:	4620      	mov	r0, r4
     6e6:	4b07      	ldr	r3, [pc, #28]	; (704 <_spi_dev_error+0x38>)
     6e8:	4798      	blx	r3
	spi->stat = 0;
     6ea:	2300      	movs	r3, #0
     6ec:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
	if (spi->callbacks.cb_error) {
     6f0:	6b23      	ldr	r3, [r4, #48]	; 0x30
     6f2:	b113      	cbz	r3, 6fa <_spi_dev_error+0x2e>
		spi->callbacks.cb_error(spi, status);
     6f4:	4631      	mov	r1, r6
     6f6:	4628      	mov	r0, r5
     6f8:	4798      	blx	r3
     6fa:	bd70      	pop	{r4, r5, r6, pc}
     6fc:	0000124d 	.word	0x0000124d
     700:	00001281 	.word	0x00001281
     704:	000012c1 	.word	0x000012c1

00000708 <_spi_dev_complete>:
	if (spi->xfercnt >= spi->xfer.size) {
     708:	6c02      	ldr	r2, [r0, #64]	; 0x40
     70a:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
     70c:	429a      	cmp	r2, r3
     70e:	d200      	bcs.n	712 <_spi_dev_complete+0xa>
     710:	4770      	bx	lr
{
     712:	b510      	push	{r4, lr}
     714:	4604      	mov	r4, r0
		_spi_m_async_enable_tx_complete(dev, false);
     716:	2100      	movs	r1, #0
     718:	4b04      	ldr	r3, [pc, #16]	; (72c <_spi_dev_complete+0x24>)
     71a:	4798      	blx	r3
		spi->stat = 0;
     71c:	2300      	movs	r3, #0
     71e:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
		if (spi->callbacks.cb_xfer) {
     722:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
     724:	b10b      	cbz	r3, 72a <_spi_dev_complete+0x22>
			spi->callbacks.cb_xfer(spi);
     726:	1f20      	subs	r0, r4, #4
     728:	4798      	blx	r3
     72a:	bd10      	pop	{r4, pc}
     72c:	000012c1 	.word	0x000012c1

00000730 <_spi_dev_tx>:
{
     730:	b510      	push	{r4, lr}
     732:	4604      	mov	r4, r0
	if (!(dev->char_size > 1)) {
     734:	7903      	ldrb	r3, [r0, #4]
     736:	2b01      	cmp	r3, #1
		_spi_m_async_write_one(dev, spi->xfer.txbuf[spi->xfercnt++]);
     738:	6b42      	ldr	r2, [r0, #52]	; 0x34
     73a:	6c03      	ldr	r3, [r0, #64]	; 0x40
     73c:	f103 0101 	add.w	r1, r3, #1
     740:	6401      	str	r1, [r0, #64]	; 0x40
     742:	bf94      	ite	ls
     744:	5cd1      	ldrbls	r1, [r2, r3]
		_spi_m_async_write_one(dev, ((uint16_t *)spi->xfer.txbuf)[spi->xfercnt++]);
     746:	f832 1013 	ldrhhi.w	r1, [r2, r3, lsl #1]
     74a:	4b08      	ldr	r3, [pc, #32]	; (76c <_spi_dev_tx+0x3c>)
     74c:	4798      	blx	r3
	if (spi->xfercnt == spi->xfer.size) {
     74e:	6c22      	ldr	r2, [r4, #64]	; 0x40
     750:	6be3      	ldr	r3, [r4, #60]	; 0x3c
     752:	429a      	cmp	r2, r3
     754:	d000      	beq.n	758 <_spi_dev_tx+0x28>
     756:	bd10      	pop	{r4, pc}
		_spi_m_async_enable_tx(dev, false);
     758:	2100      	movs	r1, #0
     75a:	4620      	mov	r0, r4
     75c:	4b04      	ldr	r3, [pc, #16]	; (770 <_spi_dev_tx+0x40>)
     75e:	4798      	blx	r3
		_spi_m_async_enable_tx_complete(dev, true);
     760:	2101      	movs	r1, #1
     762:	4620      	mov	r0, r4
     764:	4b03      	ldr	r3, [pc, #12]	; (774 <_spi_dev_tx+0x44>)
     766:	4798      	blx	r3
}
     768:	e7f5      	b.n	756 <_spi_dev_tx+0x26>
     76a:	bf00      	nop
     76c:	000012fd 	.word	0x000012fd
     770:	0000124d 	.word	0x0000124d
     774:	000012c1 	.word	0x000012c1

00000778 <_spi_dev_rx>:
{
     778:	b570      	push	{r4, r5, r6, lr}
     77a:	4604      	mov	r4, r0
	if (spi->xfer.rxbuf) {
     77c:	6b85      	ldr	r5, [r0, #56]	; 0x38
     77e:	b305      	cbz	r5, 7c2 <_spi_dev_rx+0x4a>
		if (!(dev->char_size > 1)) {
     780:	7903      	ldrb	r3, [r0, #4]
     782:	2b01      	cmp	r3, #1
     784:	d916      	bls.n	7b4 <_spi_dev_rx+0x3c>
			((uint16_t *)spi->xfer.rxbuf)[spi->xfercnt++] = (uint16_t)_spi_m_async_read_one(dev);
     786:	6c06      	ldr	r6, [r0, #64]	; 0x40
     788:	1c73      	adds	r3, r6, #1
     78a:	6403      	str	r3, [r0, #64]	; 0x40
     78c:	4b18      	ldr	r3, [pc, #96]	; (7f0 <_spi_dev_rx+0x78>)
     78e:	4798      	blx	r3
     790:	f825 0016 	strh.w	r0, [r5, r6, lsl #1]
	if (spi->xfercnt < spi->xfer.size) {
     794:	6c23      	ldr	r3, [r4, #64]	; 0x40
     796:	6be2      	ldr	r2, [r4, #60]	; 0x3c
     798:	4293      	cmp	r3, r2
     79a:	d21d      	bcs.n	7d8 <_spi_dev_rx+0x60>
		if (spi->xfer.txbuf) {
     79c:	6b62      	ldr	r2, [r4, #52]	; 0x34
     79e:	b1b2      	cbz	r2, 7ce <_spi_dev_rx+0x56>
			if (!(dev->char_size > 1)) {
     7a0:	7921      	ldrb	r1, [r4, #4]
     7a2:	2901      	cmp	r1, #1
				_spi_m_async_write_one(dev, spi->xfer.txbuf[spi->xfercnt]);
     7a4:	bf94      	ite	ls
     7a6:	5cd1      	ldrbls	r1, [r2, r3]
				_spi_m_async_write_one(dev, ((uint16_t *)spi->xfer.txbuf)[spi->xfercnt]);
     7a8:	f832 1013 	ldrhhi.w	r1, [r2, r3, lsl #1]
     7ac:	4620      	mov	r0, r4
     7ae:	4b11      	ldr	r3, [pc, #68]	; (7f4 <_spi_dev_rx+0x7c>)
     7b0:	4798      	blx	r3
     7b2:	bd70      	pop	{r4, r5, r6, pc}
			spi->xfer.rxbuf[spi->xfercnt++] = (uint8_t)_spi_m_async_read_one(dev);
     7b4:	6c06      	ldr	r6, [r0, #64]	; 0x40
     7b6:	1c73      	adds	r3, r6, #1
     7b8:	6403      	str	r3, [r0, #64]	; 0x40
     7ba:	4b0d      	ldr	r3, [pc, #52]	; (7f0 <_spi_dev_rx+0x78>)
     7bc:	4798      	blx	r3
     7be:	55a8      	strb	r0, [r5, r6]
     7c0:	e7e8      	b.n	794 <_spi_dev_rx+0x1c>
		_spi_m_async_read_one(dev);
     7c2:	4b0b      	ldr	r3, [pc, #44]	; (7f0 <_spi_dev_rx+0x78>)
     7c4:	4798      	blx	r3
		spi->xfercnt++;
     7c6:	6c23      	ldr	r3, [r4, #64]	; 0x40
     7c8:	3301      	adds	r3, #1
     7ca:	6423      	str	r3, [r4, #64]	; 0x40
     7cc:	e7e2      	b.n	794 <_spi_dev_rx+0x1c>
			_spi_m_async_write_one(dev, dev->dummy_byte);
     7ce:	88e1      	ldrh	r1, [r4, #6]
     7d0:	4620      	mov	r0, r4
     7d2:	4b08      	ldr	r3, [pc, #32]	; (7f4 <_spi_dev_rx+0x7c>)
     7d4:	4798      	blx	r3
     7d6:	bd70      	pop	{r4, r5, r6, pc}
		_spi_m_async_enable_rx(dev, false);
     7d8:	2100      	movs	r1, #0
     7da:	4620      	mov	r0, r4
     7dc:	4b06      	ldr	r3, [pc, #24]	; (7f8 <_spi_dev_rx+0x80>)
     7de:	4798      	blx	r3
		spi->stat = 0;
     7e0:	2300      	movs	r3, #0
     7e2:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
		if (spi->callbacks.cb_xfer) {
     7e6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
     7e8:	b10b      	cbz	r3, 7ee <_spi_dev_rx+0x76>
			spi->callbacks.cb_xfer(spi);
     7ea:	1f20      	subs	r0, r4, #4
     7ec:	4798      	blx	r3
     7ee:	bd70      	pop	{r4, r5, r6, pc}
     7f0:	0000132d 	.word	0x0000132d
     7f4:	000012fd 	.word	0x000012fd
     7f8:	00001281 	.word	0x00001281

000007fc <spi_m_async_init>:
{
     7fc:	b570      	push	{r4, r5, r6, lr}
     7fe:	460d      	mov	r5, r1
	ASSERT(spi && hw);
     800:	4606      	mov	r6, r0
     802:	b330      	cbz	r0, 852 <spi_m_async_init+0x56>
     804:	1c08      	adds	r0, r1, #0
     806:	bf18      	it	ne
     808:	2001      	movne	r0, #1
     80a:	22a5      	movs	r2, #165	; 0xa5
     80c:	4912      	ldr	r1, [pc, #72]	; (858 <spi_m_async_init+0x5c>)
     80e:	4b13      	ldr	r3, [pc, #76]	; (85c <spi_m_async_init+0x60>)
     810:	4798      	blx	r3
	spi->dev.prvt = (void *)hw;
     812:	4634      	mov	r4, r6
     814:	f844 5f04 	str.w	r5, [r4, #4]!
	rc            = _spi_m_async_init(&spi->dev, hw);
     818:	4629      	mov	r1, r5
     81a:	4620      	mov	r0, r4
     81c:	4b10      	ldr	r3, [pc, #64]	; (860 <spi_m_async_init+0x64>)
     81e:	4798      	blx	r3
	if (rc >= 0) {
     820:	2800      	cmp	r0, #0
     822:	db15      	blt.n	850 <spi_m_async_init+0x54>
		_spi_m_async_register_callback(&spi->dev, SPI_DEV_CB_TX, (FUNC_PTR)_spi_dev_tx);
     824:	4a0f      	ldr	r2, [pc, #60]	; (864 <spi_m_async_init+0x68>)
     826:	2100      	movs	r1, #0
     828:	4620      	mov	r0, r4
     82a:	4d0f      	ldr	r5, [pc, #60]	; (868 <spi_m_async_init+0x6c>)
     82c:	47a8      	blx	r5
		_spi_m_async_register_callback(&spi->dev, SPI_DEV_CB_RX, (FUNC_PTR)_spi_dev_rx);
     82e:	4a0f      	ldr	r2, [pc, #60]	; (86c <spi_m_async_init+0x70>)
     830:	2101      	movs	r1, #1
     832:	4620      	mov	r0, r4
     834:	47a8      	blx	r5
		_spi_m_async_register_callback(&spi->dev, SPI_DEV_CB_COMPLETE, (FUNC_PTR)_spi_dev_complete);
     836:	4a0e      	ldr	r2, [pc, #56]	; (870 <spi_m_async_init+0x74>)
     838:	2102      	movs	r1, #2
     83a:	4620      	mov	r0, r4
     83c:	47a8      	blx	r5
		_spi_m_async_register_callback(&spi->dev, SPI_DEV_CB_ERROR, (FUNC_PTR)_spi_dev_error);
     83e:	4a0d      	ldr	r2, [pc, #52]	; (874 <spi_m_async_init+0x78>)
     840:	2103      	movs	r1, #3
     842:	4620      	mov	r0, r4
     844:	47a8      	blx	r5
	spi->io.read  = _spi_m_async_io_read;
     846:	4b0c      	ldr	r3, [pc, #48]	; (878 <spi_m_async_init+0x7c>)
     848:	62b3      	str	r3, [r6, #40]	; 0x28
	spi->io.write = _spi_m_async_io_write;
     84a:	4b0c      	ldr	r3, [pc, #48]	; (87c <spi_m_async_init+0x80>)
     84c:	6273      	str	r3, [r6, #36]	; 0x24
	return ERR_NONE;
     84e:	2000      	movs	r0, #0
}
     850:	bd70      	pop	{r4, r5, r6, pc}
     852:	2000      	movs	r0, #0
     854:	e7d9      	b.n	80a <spi_m_async_init+0xe>
     856:	bf00      	nop
     858:	00003564 	.word	0x00003564
     85c:	00000e21 	.word	0x00000e21
     860:	000011e1 	.word	0x000011e1
     864:	00000731 	.word	0x00000731
     868:	00001359 	.word	0x00001359
     86c:	00000779 	.word	0x00000779
     870:	00000709 	.word	0x00000709
     874:	000006cd 	.word	0x000006cd
     878:	0000067d 	.word	0x0000067d
     87c:	0000063d 	.word	0x0000063d

00000880 <_usb_d_find_ep>:
 */
static int8_t _usb_d_find_ep(const uint8_t ep)
{
	int8_t i;
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
     880:	4b0f      	ldr	r3, [pc, #60]	; (8c0 <_usb_d_find_ep+0x40>)
     882:	7859      	ldrb	r1, [r3, #1]
     884:	4288      	cmp	r0, r1
     886:	d018      	beq.n	8ba <_usb_d_find_ep+0x3a>
{
     888:	b430      	push	{r4, r5}
     88a:	461a      	mov	r2, r3
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
     88c:	2300      	movs	r3, #0
			return i;
		}
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
     88e:	f000 050f 	and.w	r5, r0, #15
     892:	e007      	b.n	8a4 <_usb_d_find_ep+0x24>
     894:	3301      	adds	r3, #1
     896:	b25b      	sxtb	r3, r3
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
     898:	2b04      	cmp	r3, #4
     89a:	d009      	beq.n	8b0 <_usb_d_find_ep+0x30>
     89c:	3220      	adds	r2, #32
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
     89e:	7851      	ldrb	r1, [r2, #1]
     8a0:	4281      	cmp	r1, r0
     8a2:	d007      	beq.n	8b4 <_usb_d_find_ep+0x34>
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
     8a4:	7814      	ldrb	r4, [r2, #0]
     8a6:	2c00      	cmp	r4, #0
     8a8:	d1f4      	bne.n	894 <_usb_d_find_ep+0x14>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
     8aa:	428d      	cmp	r5, r1
     8ac:	d1f2      	bne.n	894 <_usb_d_find_ep+0x14>
     8ae:	e001      	b.n	8b4 <_usb_d_find_ep+0x34>
			return i;
		}
	}
	return -1;
     8b0:	f04f 33ff 	mov.w	r3, #4294967295
}
     8b4:	4618      	mov	r0, r3
     8b6:	bc30      	pop	{r4, r5}
     8b8:	4770      	bx	lr
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
     8ba:	2300      	movs	r3, #0
}
     8bc:	4618      	mov	r0, r3
     8be:	4770      	bx	lr
     8c0:	20000524 	.word	0x20000524

000008c4 <usb_d_dummy_cb_false>:
{
	(void)unused0;
	(void)unused1;
	(void)unused2;
	return false;
}
     8c4:	2000      	movs	r0, #0
     8c6:	4770      	bx	lr

000008c8 <usb_d_cb_trans_more>:
 * \brief Callback invoked when request more data
 * \param[in] ep Endpoint number with transfer direction on bit 8.
 * \param[in] transfered Number of bytes transfered.
 */
static bool usb_d_cb_trans_more(const uint8_t ep, const uint32_t transfered)
{
     8c8:	b538      	push	{r3, r4, r5, lr}
     8ca:	4604      	mov	r4, r0
     8cc:	460d      	mov	r5, r1
	int8_t           ep_index = _usb_d_find_ep(ep);
     8ce:	4b09      	ldr	r3, [pc, #36]	; (8f4 <usb_d_cb_trans_more+0x2c>)
     8d0:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ept->xfer.hdr.state == USB_EP_S_X_DATA) {
     8d2:	4b09      	ldr	r3, [pc, #36]	; (8f8 <usb_d_cb_trans_more+0x30>)
     8d4:	eb03 1340 	add.w	r3, r3, r0, lsl #5
     8d8:	789b      	ldrb	r3, [r3, #2]
     8da:	2b03      	cmp	r3, #3
     8dc:	d001      	beq.n	8e2 <usb_d_cb_trans_more+0x1a>
		return ept->callbacks.more(ep, transfered);
	}
	return false;
     8de:	2000      	movs	r0, #0
}
     8e0:	bd38      	pop	{r3, r4, r5, pc}
		return ept->callbacks.more(ep, transfered);
     8e2:	4b05      	ldr	r3, [pc, #20]	; (8f8 <usb_d_cb_trans_more+0x30>)
     8e4:	eb03 1040 	add.w	r0, r3, r0, lsl #5
     8e8:	6983      	ldr	r3, [r0, #24]
     8ea:	4629      	mov	r1, r5
     8ec:	4620      	mov	r0, r4
     8ee:	4798      	blx	r3
     8f0:	bd38      	pop	{r3, r4, r5, pc}
     8f2:	bf00      	nop
     8f4:	00000881 	.word	0x00000881
     8f8:	20000524 	.word	0x20000524

000008fc <_usb_d_cb_trans_done>:

/**
 * Callback when USB transactions are finished.
 */
static void _usb_d_cb_trans_done(const uint8_t ep, const int32_t code, const uint32_t transferred)
{
     8fc:	b5f0      	push	{r4, r5, r6, r7, lr}
     8fe:	b085      	sub	sp, #20
     900:	4606      	mov	r6, r0
     902:	460d      	mov	r5, r1
     904:	4617      	mov	r7, r2
	int8_t           ep_index = _usb_d_find_ep(ep);
     906:	4b4d      	ldr	r3, [pc, #308]	; (a3c <_usb_d_cb_trans_done+0x140>)
     908:	4798      	blx	r3
     90a:	4604      	mov	r4, r0
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];

	if (code == USB_TRANS_DONE) {
     90c:	2d00      	cmp	r5, #0
     90e:	d15b      	bne.n	9c8 <_usb_d_cb_trans_done+0xcc>
		ept->xfer.hdr.status = USB_XFER_DONE;
     910:	4a4b      	ldr	r2, [pc, #300]	; (a40 <_usb_d_cb_trans_done+0x144>)
     912:	0143      	lsls	r3, r0, #5
     914:	18d1      	adds	r1, r2, r3
     916:	2000      	movs	r0, #0
     918:	70c8      	strb	r0, [r1, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
     91a:	5cd3      	ldrb	r3, [r2, r3]
     91c:	b173      	cbz	r3, 93c <_usb_d_cb_trans_done+0x40>
			usb_d_ctrl_trans_done(ept);
			return;
		}
		ept->xfer.hdr.state = USB_EP_S_IDLE;
     91e:	4b48      	ldr	r3, [pc, #288]	; (a40 <_usb_d_cb_trans_done+0x144>)
     920:	eb03 1344 	add.w	r3, r3, r4, lsl #5
     924:	2201      	movs	r2, #1
     926:	709a      	strb	r2, [r3, #2]
	} else {
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
		ept->xfer.hdr.status = USB_XFER_ERROR;
	}

	ept->callbacks.xfer(ep, (enum usb_xfer_code)ept->xfer.hdr.status, (void *)transferred);
     928:	4845      	ldr	r0, [pc, #276]	; (a40 <_usb_d_cb_trans_done+0x144>)
     92a:	eb00 1044 	add.w	r0, r0, r4, lsl #5
     92e:	69c3      	ldr	r3, [r0, #28]
     930:	463a      	mov	r2, r7
     932:	78c1      	ldrb	r1, [r0, #3]
     934:	4630      	mov	r0, r6
     936:	4798      	blx	r3
}
     938:	b005      	add	sp, #20
     93a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (state == USB_EP_S_X_DATA) {
     93c:	788b      	ldrb	r3, [r1, #2]
     93e:	2b03      	cmp	r3, #3
     940:	d00b      	beq.n	95a <_usb_d_cb_trans_done+0x5e>
		ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DONE, ept->xfer.req);
     942:	483f      	ldr	r0, [pc, #252]	; (a40 <_usb_d_cb_trans_done+0x144>)
     944:	eb00 1244 	add.w	r2, r0, r4, lsl #5
     948:	4614      	mov	r4, r2
     94a:	69d3      	ldr	r3, [r2, #28]
     94c:	320c      	adds	r2, #12
     94e:	2100      	movs	r1, #0
     950:	7860      	ldrb	r0, [r4, #1]
     952:	4798      	blx	r3
		ept->xfer.hdr.state = USB_EP_S_X_SETUP;
     954:	2302      	movs	r3, #2
     956:	70a3      	strb	r3, [r4, #2]
     958:	e7ee      	b.n	938 <_usb_d_cb_trans_done+0x3c>
	bool    req_dir = USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN;
     95a:	460b      	mov	r3, r1
     95c:	f991 500c 	ldrsb.w	r5, [r1, #12]
		bool err = ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DATA, ept->xfer.req);
     960:	460a      	mov	r2, r1
     962:	69ce      	ldr	r6, [r1, #28]
     964:	320c      	adds	r2, #12
     966:	2101      	movs	r1, #1
     968:	7858      	ldrb	r0, [r3, #1]
     96a:	47b0      	blx	r6
		if (err) {
     96c:	b1a0      	cbz	r0, 998 <_usb_d_cb_trans_done+0x9c>
			ept->xfer.hdr.state  = USB_EP_S_HALTED;
     96e:	4b34      	ldr	r3, [pc, #208]	; (a40 <_usb_d_cb_trans_done+0x144>)
     970:	eb03 1344 	add.w	r3, r3, r4, lsl #5
     974:	2205      	movs	r2, #5
     976:	709a      	strb	r2, [r3, #2]
			ept->xfer.hdr.status = USB_XFER_HALT;
     978:	2202      	movs	r2, #2
     97a:	70da      	strb	r2, [r3, #3]
			_usb_d_dev_ep_stall(req_dir ? ept->xfer.hdr.ep : (ept->xfer.hdr.ep | USB_EP_DIR), USB_EP_STALL_SET);
     97c:	2d00      	cmp	r5, #0
     97e:	db09      	blt.n	994 <_usb_d_cb_trans_done+0x98>
     980:	482f      	ldr	r0, [pc, #188]	; (a40 <_usb_d_cb_trans_done+0x144>)
     982:	eb00 1044 	add.w	r0, r0, r4, lsl #5
     986:	7840      	ldrb	r0, [r0, #1]
     988:	f040 0080 	orr.w	r0, r0, #128	; 0x80
     98c:	2101      	movs	r1, #1
     98e:	4b2d      	ldr	r3, [pc, #180]	; (a44 <_usb_d_cb_trans_done+0x148>)
     990:	4798      	blx	r3
     992:	e7d1      	b.n	938 <_usb_d_cb_trans_done+0x3c>
     994:	7858      	ldrb	r0, [r3, #1]
     996:	e7f9      	b.n	98c <_usb_d_cb_trans_done+0x90>
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
     998:	4829      	ldr	r0, [pc, #164]	; (a40 <_usb_d_cb_trans_done+0x144>)
     99a:	eb00 1044 	add.w	r0, r0, r4, lsl #5
     99e:	2304      	movs	r3, #4
     9a0:	7083      	strb	r3, [r0, #2]
			_usb_d_trans(ept->xfer.hdr.ep, !req_dir, NULL, 0, 1);
     9a2:	7843      	ldrb	r3, [r0, #1]
	struct usb_d_transfer trans
     9a4:	2200      	movs	r2, #0
     9a6:	9201      	str	r2, [sp, #4]
     9a8:	9202      	str	r2, [sp, #8]
     9aa:	4295      	cmp	r5, r2
     9ac:	bfac      	ite	ge
     9ae:	f043 0380 	orrge.w	r3, r3, #128	; 0x80
     9b2:	f003 030f 	andlt.w	r3, r3, #15
     9b6:	f88d 300c 	strb.w	r3, [sp, #12]
     9ba:	2301      	movs	r3, #1
     9bc:	f88d 300d 	strb.w	r3, [sp, #13]
	return _usb_d_dev_ep_trans(&trans);
     9c0:	a801      	add	r0, sp, #4
     9c2:	4b21      	ldr	r3, [pc, #132]	; (a48 <_usb_d_cb_trans_done+0x14c>)
     9c4:	4798      	blx	r3
     9c6:	e7b7      	b.n	938 <_usb_d_cb_trans_done+0x3c>
	} else if (code == USB_TRANS_STALL) {
     9c8:	2d01      	cmp	r5, #1
     9ca:	d00a      	beq.n	9e2 <_usb_d_cb_trans_done+0xe6>
	} else if (code == USB_TRANS_ABORT) {
     9cc:	2d02      	cmp	r5, #2
     9ce:	d01c      	beq.n	a0a <_usb_d_cb_trans_done+0x10e>
	} else if (code == USB_TRANS_RESET) {
     9d0:	2d03      	cmp	r5, #3
     9d2:	d02a      	beq.n	a2a <_usb_d_cb_trans_done+0x12e>
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
     9d4:	4b1a      	ldr	r3, [pc, #104]	; (a40 <_usb_d_cb_trans_done+0x144>)
     9d6:	eb03 1340 	add.w	r3, r3, r0, lsl #5
     9da:	2206      	movs	r2, #6
     9dc:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_ERROR;
     9de:	70da      	strb	r2, [r3, #3]
     9e0:	e7a2      	b.n	928 <_usb_d_cb_trans_done+0x2c>
		ept->xfer.hdr.status = USB_XFER_HALT;
     9e2:	4a17      	ldr	r2, [pc, #92]	; (a40 <_usb_d_cb_trans_done+0x144>)
     9e4:	0143      	lsls	r3, r0, #5
     9e6:	18d1      	adds	r1, r2, r3
     9e8:	2002      	movs	r0, #2
     9ea:	70c8      	strb	r0, [r1, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
     9ec:	5cd3      	ldrb	r3, [r2, r3]
     9ee:	b12b      	cbz	r3, 9fc <_usb_d_cb_trans_done+0x100>
			ept->xfer.hdr.state = USB_EP_S_HALTED;
     9f0:	4b13      	ldr	r3, [pc, #76]	; (a40 <_usb_d_cb_trans_done+0x144>)
     9f2:	eb03 1344 	add.w	r3, r3, r4, lsl #5
     9f6:	2205      	movs	r2, #5
     9f8:	709a      	strb	r2, [r3, #2]
     9fa:	e795      	b.n	928 <_usb_d_cb_trans_done+0x2c>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
     9fc:	460b      	mov	r3, r1
     9fe:	7098      	strb	r0, [r3, #2]
			_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
     a00:	2100      	movs	r1, #0
     a02:	4630      	mov	r0, r6
     a04:	4b0f      	ldr	r3, [pc, #60]	; (a44 <_usb_d_cb_trans_done+0x148>)
     a06:	4798      	blx	r3
     a08:	e78e      	b.n	928 <_usb_d_cb_trans_done+0x2c>
		ept->xfer.hdr.status = USB_XFER_ABORT;
     a0a:	4a0d      	ldr	r2, [pc, #52]	; (a40 <_usb_d_cb_trans_done+0x144>)
     a0c:	0143      	lsls	r3, r0, #5
     a0e:	18d1      	adds	r1, r2, r3
     a10:	2004      	movs	r0, #4
     a12:	70c8      	strb	r0, [r1, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
     a14:	5cd3      	ldrb	r3, [r2, r3]
     a16:	b12b      	cbz	r3, a24 <_usb_d_cb_trans_done+0x128>
		ept->xfer.hdr.state = USB_EP_S_IDLE;
     a18:	4b09      	ldr	r3, [pc, #36]	; (a40 <_usb_d_cb_trans_done+0x144>)
     a1a:	eb03 1344 	add.w	r3, r3, r4, lsl #5
     a1e:	2201      	movs	r2, #1
     a20:	709a      	strb	r2, [r3, #2]
     a22:	e781      	b.n	928 <_usb_d_cb_trans_done+0x2c>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
     a24:	2302      	movs	r3, #2
     a26:	708b      	strb	r3, [r1, #2]
			return;
     a28:	e786      	b.n	938 <_usb_d_cb_trans_done+0x3c>
		ept->xfer.hdr.state  = USB_EP_S_DISABLED;
     a2a:	4b05      	ldr	r3, [pc, #20]	; (a40 <_usb_d_cb_trans_done+0x144>)
     a2c:	eb03 1340 	add.w	r3, r3, r0, lsl #5
     a30:	2200      	movs	r2, #0
     a32:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_RESET;
     a34:	2205      	movs	r2, #5
     a36:	70da      	strb	r2, [r3, #3]
     a38:	e776      	b.n	928 <_usb_d_cb_trans_done+0x2c>
     a3a:	bf00      	nop
     a3c:	00000881 	.word	0x00000881
     a40:	20000524 	.word	0x20000524
     a44:	0000227d 	.word	0x0000227d
     a48:	00002425 	.word	0x00002425

00000a4c <usb_d_cb_trans_setup>:
{
     a4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     a50:	4605      	mov	r5, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
     a52:	4b1c      	ldr	r3, [pc, #112]	; (ac4 <usb_d_cb_trans_setup+0x78>)
     a54:	4798      	blx	r3
     a56:	4606      	mov	r6, r0
	uint8_t *        req      = ept->xfer.req;
     a58:	4c1b      	ldr	r4, [pc, #108]	; (ac8 <usb_d_cb_trans_setup+0x7c>)
     a5a:	eb04 1440 	add.w	r4, r4, r0, lsl #5
     a5e:	340c      	adds	r4, #12
	uint8_t n = _usb_d_dev_ep_read_req(ep, req);
     a60:	4621      	mov	r1, r4
     a62:	4628      	mov	r0, r5
     a64:	4b19      	ldr	r3, [pc, #100]	; (acc <usb_d_cb_trans_setup+0x80>)
     a66:	4798      	blx	r3
	if (n != 8) {
     a68:	b2c0      	uxtb	r0, r0
     a6a:	2808      	cmp	r0, #8
     a6c:	d009      	beq.n	a82 <usb_d_cb_trans_setup+0x36>
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
     a6e:	2101      	movs	r1, #1
     a70:	4628      	mov	r0, r5
     a72:	4c17      	ldr	r4, [pc, #92]	; (ad0 <usb_d_cb_trans_setup+0x84>)
     a74:	47a0      	blx	r4
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
     a76:	2101      	movs	r1, #1
     a78:	f045 0080 	orr.w	r0, r5, #128	; 0x80
     a7c:	47a0      	blx	r4
		return;
     a7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
     a82:	2100      	movs	r1, #0
     a84:	4628      	mov	r0, r5
     a86:	4f12      	ldr	r7, [pc, #72]	; (ad0 <usb_d_cb_trans_setup+0x84>)
     a88:	47b8      	blx	r7
	_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_CLR);
     a8a:	f045 0880 	orr.w	r8, r5, #128	; 0x80
     a8e:	2100      	movs	r1, #0
     a90:	4640      	mov	r0, r8
     a92:	47b8      	blx	r7
	ept->xfer.hdr.state = USB_EP_S_IDLE;
     a94:	4b0c      	ldr	r3, [pc, #48]	; (ac8 <usb_d_cb_trans_setup+0x7c>)
     a96:	eb03 1346 	add.w	r3, r3, r6, lsl #5
     a9a:	2201      	movs	r2, #1
     a9c:	709a      	strb	r2, [r3, #2]
	if (!ept->callbacks.req(ep, req)) {
     a9e:	695b      	ldr	r3, [r3, #20]
     aa0:	4621      	mov	r1, r4
     aa2:	4628      	mov	r0, r5
     aa4:	4798      	blx	r3
     aa6:	b108      	cbz	r0, aac <usb_d_cb_trans_setup+0x60>
     aa8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ept->xfer.hdr.state = USB_EP_S_HALTED;
     aac:	4b06      	ldr	r3, [pc, #24]	; (ac8 <usb_d_cb_trans_setup+0x7c>)
     aae:	eb03 1646 	add.w	r6, r3, r6, lsl #5
     ab2:	2305      	movs	r3, #5
     ab4:	70b3      	strb	r3, [r6, #2]
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
     ab6:	2101      	movs	r1, #1
     ab8:	4628      	mov	r0, r5
     aba:	47b8      	blx	r7
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
     abc:	2101      	movs	r1, #1
     abe:	4640      	mov	r0, r8
     ac0:	47b8      	blx	r7
     ac2:	e7f1      	b.n	aa8 <usb_d_cb_trans_setup+0x5c>
     ac4:	00000881 	.word	0x00000881
     ac8:	20000524 	.word	0x20000524
     acc:	000023c5 	.word	0x000023c5
     ad0:	0000227d 	.word	0x0000227d

00000ad4 <usb_d_init>:

int32_t usb_d_init(void)
{
     ad4:	b510      	push	{r4, lr}
	int32_t rc = _usb_d_dev_init();
     ad6:	4b11      	ldr	r3, [pc, #68]	; (b1c <usb_d_init+0x48>)
     ad8:	4798      	blx	r3
	uint8_t i;
	if (rc < 0) {
     ada:	2800      	cmp	r0, #0
     adc:	db1c      	blt.n	b18 <usb_d_init+0x44>
		return rc;
	}
	memset(usb_d_inst.ep, 0x00, sizeof(struct usb_d_ep) * CONF_USB_D_NUM_EP_SP);
     ade:	4c10      	ldr	r4, [pc, #64]	; (b20 <usb_d_init+0x4c>)
     ae0:	2280      	movs	r2, #128	; 0x80
     ae2:	2100      	movs	r1, #0
     ae4:	4620      	mov	r0, r4
     ae6:	4b0f      	ldr	r3, [pc, #60]	; (b24 <usb_d_init+0x50>)
     ae8:	4798      	blx	r3
     aea:	4623      	mov	r3, r4
     aec:	f104 0080 	add.w	r0, r4, #128	; 0x80
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
     af0:	21ff      	movs	r1, #255	; 0xff
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
     af2:	4a0d      	ldr	r2, [pc, #52]	; (b28 <usb_d_init+0x54>)
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
     af4:	7059      	strb	r1, [r3, #1]
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
     af6:	615a      	str	r2, [r3, #20]
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
     af8:	619a      	str	r2, [r3, #24]
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
     afa:	61da      	str	r2, [r3, #28]
     afc:	3320      	adds	r3, #32
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
     afe:	4283      	cmp	r3, r0
     b00:	d1f8      	bne.n	af4 <usb_d_init+0x20>
	}
	/* Handles device driver endpoint callbacks to build transfer. */
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_SETUP, (FUNC_PTR)usb_d_cb_trans_setup);
     b02:	490a      	ldr	r1, [pc, #40]	; (b2c <usb_d_init+0x58>)
     b04:	2000      	movs	r0, #0
     b06:	4c0a      	ldr	r4, [pc, #40]	; (b30 <usb_d_init+0x5c>)
     b08:	47a0      	blx	r4
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_MORE, (FUNC_PTR)usb_d_cb_trans_more);
     b0a:	490a      	ldr	r1, [pc, #40]	; (b34 <usb_d_init+0x60>)
     b0c:	2001      	movs	r0, #1
     b0e:	47a0      	blx	r4
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_DONE, (FUNC_PTR)_usb_d_cb_trans_done);
     b10:	4909      	ldr	r1, [pc, #36]	; (b38 <usb_d_init+0x64>)
     b12:	2002      	movs	r0, #2
     b14:	47a0      	blx	r4
	return ERR_NONE;
     b16:	2000      	movs	r0, #0
}
     b18:	bd10      	pop	{r4, pc}
     b1a:	bf00      	nop
     b1c:	00001c71 	.word	0x00001c71
     b20:	20000524 	.word	0x20000524
     b24:	000033a9 	.word	0x000033a9
     b28:	000008c5 	.word	0x000008c5
     b2c:	00000a4d 	.word	0x00000a4d
     b30:	00002629 	.word	0x00002629
     b34:	000008c9 	.word	0x000008c9
     b38:	000008fd 	.word	0x000008fd

00000b3c <usb_d_register_callback>:
{
	_usb_d_dev_deinit();
}

void usb_d_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
     b3c:	b508      	push	{r3, lr}
	/* Directly uses device driver callback. */
	_usb_d_dev_register_callback(type, func);
     b3e:	4b01      	ldr	r3, [pc, #4]	; (b44 <usb_d_register_callback+0x8>)
     b40:	4798      	blx	r3
     b42:	bd08      	pop	{r3, pc}
     b44:	00002605 	.word	0x00002605

00000b48 <usb_d_enable>:
}

int32_t usb_d_enable(void)
{
     b48:	b508      	push	{r3, lr}
	return _usb_d_dev_enable();
     b4a:	4b01      	ldr	r3, [pc, #4]	; (b50 <usb_d_enable+0x8>)
     b4c:	4798      	blx	r3
}
     b4e:	bd08      	pop	{r3, pc}
     b50:	00001d6d 	.word	0x00001d6d

00000b54 <usb_d_attach>:
{
	_usb_d_dev_disable();
}

void usb_d_attach(void)
{
     b54:	b508      	push	{r3, lr}
	_usb_d_dev_attach();
     b56:	4b01      	ldr	r3, [pc, #4]	; (b5c <usb_d_attach+0x8>)
     b58:	4798      	blx	r3
     b5a:	bd08      	pop	{r3, pc}
     b5c:	00001dd9 	.word	0x00001dd9

00000b60 <usb_d_set_address>:
{
	return _usb_d_dev_get_uframe_n();
}

void usb_d_set_address(const uint8_t addr)
{
     b60:	b508      	push	{r3, lr}
	_usb_d_dev_set_address(addr);
     b62:	4b01      	ldr	r3, [pc, #4]	; (b68 <usb_d_set_address+0x8>)
     b64:	4798      	blx	r3
     b66:	bd08      	pop	{r3, pc}
     b68:	00001deb 	.word	0x00001deb

00000b6c <usb_d_ep_init>:
{
	return usb_d_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_size);
}

int32_t usb_d_ep_init(const uint8_t ep, const uint8_t attr, const uint16_t max_pkt_size)
{
     b6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     b6e:	4606      	mov	r6, r0
     b70:	460c      	mov	r4, r1
     b72:	4617      	mov	r7, r2
	int32_t          rc;
	int8_t           ep_index = _usb_d_find_ep(ep);
     b74:	4b0f      	ldr	r3, [pc, #60]	; (bb4 <usb_d_ep_init+0x48>)
     b76:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ep_index >= 0) {
     b78:	2800      	cmp	r0, #0
     b7a:	da14      	bge.n	ba6 <usb_d_ep_init+0x3a>
		return -USB_ERR_REDO;
	} else {
		ep_index = _usb_d_find_ep(0xFF);
     b7c:	20ff      	movs	r0, #255	; 0xff
     b7e:	4b0d      	ldr	r3, [pc, #52]	; (bb4 <usb_d_ep_init+0x48>)
     b80:	4798      	blx	r3
		if (ep_index < 0) {
     b82:	1e05      	subs	r5, r0, #0
     b84:	db12      	blt.n	bac <usb_d_ep_init+0x40>
			return -USB_ERR_ALLOC_FAIL;
		}
		ept = &usb_d_inst.ep[ep_index];
	}
	rc = _usb_d_dev_ep_init(ep, attr, max_pkt_size);
     b86:	463a      	mov	r2, r7
     b88:	4621      	mov	r1, r4
     b8a:	4630      	mov	r0, r6
     b8c:	4b0a      	ldr	r3, [pc, #40]	; (bb8 <usb_d_ep_init+0x4c>)
     b8e:	4798      	blx	r3
	if (rc < 0) {
     b90:	2800      	cmp	r0, #0
     b92:	db0d      	blt.n	bb0 <usb_d_ep_init+0x44>
		return rc;
	}
	ept->xfer.hdr.ep   = ep;
     b94:	4b09      	ldr	r3, [pc, #36]	; (bbc <usb_d_ep_init+0x50>)
     b96:	0168      	lsls	r0, r5, #5
     b98:	181a      	adds	r2, r3, r0
     b9a:	7056      	strb	r6, [r2, #1]
	ept->xfer.hdr.type = attr & USB_EP_XTYPE_MASK;
     b9c:	f004 0403 	and.w	r4, r4, #3
     ba0:	541c      	strb	r4, [r3, r0]
	return ERR_NONE;
     ba2:	2000      	movs	r0, #0
     ba4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -USB_ERR_REDO;
     ba6:	f06f 0013 	mvn.w	r0, #19
     baa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return -USB_ERR_ALLOC_FAIL;
     bac:	f06f 0014 	mvn.w	r0, #20
}
     bb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     bb2:	bf00      	nop
     bb4:	00000881 	.word	0x00000881
     bb8:	00001df9 	.word	0x00001df9
     bbc:	20000524 	.word	0x20000524

00000bc0 <usb_d_ep0_init>:
{
     bc0:	b508      	push	{r3, lr}
	return usb_d_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_size);
     bc2:	4602      	mov	r2, r0
     bc4:	2100      	movs	r1, #0
     bc6:	4608      	mov	r0, r1
     bc8:	4b01      	ldr	r3, [pc, #4]	; (bd0 <usb_d_ep0_init+0x10>)
     bca:	4798      	blx	r3
}
     bcc:	bd08      	pop	{r3, pc}
     bce:	bf00      	nop
     bd0:	00000b6d 	.word	0x00000b6d

00000bd4 <usb_d_ep_deinit>:

void usb_d_ep_deinit(const uint8_t ep)
{
     bd4:	b538      	push	{r3, r4, r5, lr}
     bd6:	4605      	mov	r5, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
     bd8:	4b06      	ldr	r3, [pc, #24]	; (bf4 <usb_d_ep_deinit+0x20>)
     bda:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ep_index < 0) {
     bdc:	1e04      	subs	r4, r0, #0
     bde:	db07      	blt.n	bf0 <usb_d_ep_deinit+0x1c>
		return;
	}
	_usb_d_dev_ep_deinit(ep);
     be0:	4628      	mov	r0, r5
     be2:	4b05      	ldr	r3, [pc, #20]	; (bf8 <usb_d_ep_deinit+0x24>)
     be4:	4798      	blx	r3
	ept->xfer.hdr.ep = 0xFF;
     be6:	4805      	ldr	r0, [pc, #20]	; (bfc <usb_d_ep_deinit+0x28>)
     be8:	eb00 1044 	add.w	r0, r0, r4, lsl #5
     bec:	23ff      	movs	r3, #255	; 0xff
     bee:	7043      	strb	r3, [r0, #1]
     bf0:	bd38      	pop	{r3, r4, r5, pc}
     bf2:	bf00      	nop
     bf4:	00000881 	.word	0x00000881
     bf8:	00001f11 	.word	0x00001f11
     bfc:	20000524 	.word	0x20000524

00000c00 <usb_d_ep_enable>:
}

int32_t usb_d_ep_enable(const uint8_t ep)
{
     c00:	b538      	push	{r3, r4, r5, lr}
     c02:	4605      	mov	r5, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
     c04:	4b0e      	ldr	r3, [pc, #56]	; (c40 <usb_d_ep_enable+0x40>)
     c06:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	int32_t          rc;
	if (ep_index < 0) {
     c08:	1e04      	subs	r4, r0, #0
     c0a:	db16      	blt.n	c3a <usb_d_ep_enable+0x3a>
		return -USB_ERR_PARAM;
	}
	ept->xfer.hdr.state = (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) ? USB_EP_S_X_SETUP : USB_EP_S_IDLE;
     c0c:	0163      	lsls	r3, r4, #5
     c0e:	4a0d      	ldr	r2, [pc, #52]	; (c44 <usb_d_ep_enable+0x44>)
     c10:	5cd3      	ldrb	r3, [r2, r3]
     c12:	2b00      	cmp	r3, #0
     c14:	bf0c      	ite	eq
     c16:	2202      	moveq	r2, #2
     c18:	2201      	movne	r2, #1
     c1a:	4b0a      	ldr	r3, [pc, #40]	; (c44 <usb_d_ep_enable+0x44>)
     c1c:	eb03 1344 	add.w	r3, r3, r4, lsl #5
     c20:	709a      	strb	r2, [r3, #2]
	rc                  = _usb_d_dev_ep_enable(ep);
     c22:	4628      	mov	r0, r5
     c24:	4b08      	ldr	r3, [pc, #32]	; (c48 <usb_d_ep_enable+0x48>)
     c26:	4798      	blx	r3
	if (rc < 0) {
     c28:	2800      	cmp	r0, #0
     c2a:	db00      	blt.n	c2e <usb_d_ep_enable+0x2e>
		ept->xfer.hdr.state = USB_EP_S_DISABLED;
	}
	return rc;
}
     c2c:	bd38      	pop	{r3, r4, r5, pc}
		ept->xfer.hdr.state = USB_EP_S_DISABLED;
     c2e:	4b05      	ldr	r3, [pc, #20]	; (c44 <usb_d_ep_enable+0x44>)
     c30:	eb03 1444 	add.w	r4, r3, r4, lsl #5
     c34:	2300      	movs	r3, #0
     c36:	70a3      	strb	r3, [r4, #2]
     c38:	bd38      	pop	{r3, r4, r5, pc}
		return -USB_ERR_PARAM;
     c3a:	f06f 0011 	mvn.w	r0, #17
     c3e:	e7f5      	b.n	c2c <usb_d_ep_enable+0x2c>
     c40:	00000881 	.word	0x00000881
     c44:	20000524 	.word	0x20000524
     c48:	00001fd5 	.word	0x00001fd5

00000c4c <usb_d_ep_transfer>:
	}
	return usb_d_inst.ep[ep_index].xfer.req;
}

int32_t usb_d_ep_transfer(const struct usb_d_transfer *xfer)
{
     c4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     c50:	b086      	sub	sp, #24
     c52:	4604      	mov	r4, r0
	int8_t                ep_index = _usb_d_find_ep(xfer->ep);
     c54:	7a07      	ldrb	r7, [r0, #8]
     c56:	4638      	mov	r0, r7
     c58:	4b3f      	ldr	r3, [pc, #252]	; (d58 <usb_d_ep_transfer+0x10c>)
     c5a:	4798      	blx	r3
	struct usb_d_ep *     ept      = &usb_d_inst.ep[ep_index];
	bool                  dir = USB_EP_GET_DIR(xfer->ep), zlp = xfer->zlp;
     c5c:	7a65      	ldrb	r5, [r4, #9]
	uint32_t              len = xfer->size;
     c5e:	f8d4 8004 	ldr.w	r8, [r4, #4]
	int32_t               rc;
	volatile uint8_t      state;
	volatile hal_atomic_t flags;

	if (ep_index < 0) {
     c62:	1e06      	subs	r6, r0, #0
     c64:	db72      	blt.n	d4c <usb_d_ep_transfer+0x100>
		return -USB_ERR_PARAM;
	}

	atomic_enter_critical(&flags);
     c66:	a804      	add	r0, sp, #16
     c68:	4b3c      	ldr	r3, [pc, #240]	; (d5c <usb_d_ep_transfer+0x110>)
     c6a:	4798      	blx	r3
	state = ept->xfer.hdr.state;
     c6c:	4b3c      	ldr	r3, [pc, #240]	; (d60 <usb_d_ep_transfer+0x114>)
     c6e:	eb03 1346 	add.w	r3, r3, r6, lsl #5
     c72:	789b      	ldrb	r3, [r3, #2]
     c74:	f88d 3017 	strb.w	r3, [sp, #23]
	if (state == USB_EP_S_IDLE) {
     c78:	f89d 3017 	ldrb.w	r3, [sp, #23]
     c7c:	b2db      	uxtb	r3, r3
     c7e:	2b01      	cmp	r3, #1
     c80:	d011      	beq.n	ca6 <usb_d_ep_transfer+0x5a>
		ept->xfer.hdr.state = USB_EP_S_X_DATA;
		atomic_leave_critical(&flags);
	} else {
		atomic_leave_critical(&flags);
     c82:	a804      	add	r0, sp, #16
     c84:	4b37      	ldr	r3, [pc, #220]	; (d64 <usb_d_ep_transfer+0x118>)
     c86:	4798      	blx	r3
		switch (state) {
     c88:	f89d 3017 	ldrb.w	r3, [sp, #23]
     c8c:	b2db      	uxtb	r3, r3
     c8e:	2b05      	cmp	r3, #5
     c90:	d05f      	beq.n	d52 <usb_d_ep_transfer+0x106>
     c92:	2b06      	cmp	r3, #6
     c94:	d023      	beq.n	cde <usb_d_ep_transfer+0x92>
		case USB_EP_S_ERROR:
			return -USB_ERROR;
		case USB_EP_S_DISABLED:
			return -USB_ERR_FUNC;
		default: /* USB_EP_S_X_xxxx  */
			return USB_BUSY;
     c96:	2b00      	cmp	r3, #0
     c98:	bf0c      	ite	eq
     c9a:	f06f 0012 	mvneq.w	r0, #18
     c9e:	2001      	movne	r0, #1
		}
	}

	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
	return rc;
}
     ca0:	b006      	add	sp, #24
     ca2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		ept->xfer.hdr.state = USB_EP_S_X_DATA;
     ca6:	f8df a0b8 	ldr.w	sl, [pc, #184]	; d60 <usb_d_ep_transfer+0x114>
     caa:	ea4f 1946 	mov.w	r9, r6, lsl #5
     cae:	eb0a 0309 	add.w	r3, sl, r9
     cb2:	2203      	movs	r2, #3
     cb4:	709a      	strb	r2, [r3, #2]
		atomic_leave_critical(&flags);
     cb6:	a804      	add	r0, sp, #16
     cb8:	4b2a      	ldr	r3, [pc, #168]	; (d64 <usb_d_ep_transfer+0x118>)
     cba:	4798      	blx	r3
	if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
     cbc:	f81a 3009 	ldrb.w	r3, [sl, r9]
     cc0:	b183      	cbz	r3, ce4 <usb_d_ep_transfer+0x98>
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
     cc2:	7a22      	ldrb	r2, [r4, #8]
     cc4:	3500      	adds	r5, #0
     cc6:	bf18      	it	ne
     cc8:	2501      	movne	r5, #1
	struct usb_d_transfer trans
     cca:	6823      	ldr	r3, [r4, #0]
     ccc:	9301      	str	r3, [sp, #4]
     cce:	f8cd 8008 	str.w	r8, [sp, #8]
     cd2:	f017 0f80 	tst.w	r7, #128	; 0x80
     cd6:	d119      	bne.n	d0c <usb_d_ep_transfer+0xc0>
     cd8:	f002 030f 	and.w	r3, r2, #15
     cdc:	e018      	b.n	d10 <usb_d_ep_transfer+0xc4>
			return -USB_ERROR;
     cde:	f06f 000f 	mvn.w	r0, #15
     ce2:	e7dd      	b.n	ca0 <usb_d_ep_transfer+0x54>
		uint16_t req_len = USB_GET_wLength(ept->xfer.req);
     ce4:	4b1e      	ldr	r3, [pc, #120]	; (d60 <usb_d_ep_transfer+0x114>)
     ce6:	eb03 1346 	add.w	r3, r3, r6, lsl #5
     cea:	7cda      	ldrb	r2, [r3, #19]
     cec:	7c9d      	ldrb	r5, [r3, #18]
     cee:	eb05 2502 	add.w	r5, r5, r2, lsl #8
     cf2:	b2ad      	uxth	r5, r5
		if (req_len == 0) {
     cf4:	b9a5      	cbnz	r5, d20 <usb_d_ep_transfer+0xd4>
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
     cf6:	4b1a      	ldr	r3, [pc, #104]	; (d60 <usb_d_ep_transfer+0x114>)
     cf8:	eb03 1646 	add.w	r6, r3, r6, lsl #5
     cfc:	2304      	movs	r3, #4
     cfe:	70b3      	strb	r3, [r6, #2]
			len                 = 0;
     d00:	2300      	movs	r3, #0
			zlp                 = true;
     d02:	2501      	movs	r5, #1
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
     d04:	7a22      	ldrb	r2, [r4, #8]
	struct usb_d_transfer trans
     d06:	6821      	ldr	r1, [r4, #0]
     d08:	9101      	str	r1, [sp, #4]
     d0a:	9302      	str	r3, [sp, #8]
     d0c:	f042 0380 	orr.w	r3, r2, #128	; 0x80
     d10:	f88d 300c 	strb.w	r3, [sp, #12]
     d14:	f88d 500d 	strb.w	r5, [sp, #13]
	return _usb_d_dev_ep_trans(&trans);
     d18:	a801      	add	r0, sp, #4
     d1a:	4b13      	ldr	r3, [pc, #76]	; (d68 <usb_d_ep_transfer+0x11c>)
     d1c:	4798      	blx	r3
	return rc;
     d1e:	e7bf      	b.n	ca0 <usb_d_ep_transfer+0x54>
     d20:	4643      	mov	r3, r8
     d22:	45a8      	cmp	r8, r5
     d24:	bf28      	it	cs
     d26:	462b      	movcs	r3, r5
			dir = (USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN);
     d28:	4a0d      	ldr	r2, [pc, #52]	; (d60 <usb_d_ep_transfer+0x114>)
     d2a:	eb02 1646 	add.w	r6, r2, r6, lsl #5
			if (dir) {
     d2e:	f996 200c 	ldrsb.w	r2, [r6, #12]
     d32:	2a00      	cmp	r2, #0
     d34:	db05      	blt.n	d42 <usb_d_ep_transfer+0xf6>
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
     d36:	7a22      	ldrb	r2, [r4, #8]
	struct usb_d_transfer trans
     d38:	6821      	ldr	r1, [r4, #0]
     d3a:	9101      	str	r1, [sp, #4]
     d3c:	9302      	str	r3, [sp, #8]
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
     d3e:	2500      	movs	r5, #0
     d40:	e7ca      	b.n	cd8 <usb_d_ep_transfer+0x8c>
				zlp = (req_len > len);
     d42:	429d      	cmp	r5, r3
     d44:	bf94      	ite	ls
     d46:	2500      	movls	r5, #0
     d48:	2501      	movhi	r5, #1
     d4a:	e7db      	b.n	d04 <usb_d_ep_transfer+0xb8>
		return -USB_ERR_PARAM;
     d4c:	f06f 0011 	mvn.w	r0, #17
     d50:	e7a6      	b.n	ca0 <usb_d_ep_transfer+0x54>
			return USB_HALTED;
     d52:	2002      	movs	r0, #2
     d54:	e7a4      	b.n	ca0 <usb_d_ep_transfer+0x54>
     d56:	bf00      	nop
     d58:	00000881 	.word	0x00000881
     d5c:	000031a9 	.word	0x000031a9
     d60:	20000524 	.word	0x20000524
     d64:	000031b7 	.word	0x000031b7
     d68:	00002425 	.word	0x00002425

00000d6c <usb_d_ep_halt>:
	}
	return ERR_NONE;
}

int32_t usb_d_ep_halt(const uint8_t ep, const enum usb_ep_halt_ctrl ctrl)
{
     d6c:	b538      	push	{r3, r4, r5, lr}
     d6e:	4604      	mov	r4, r0
	if (ctrl == USB_EP_HALT_CLR) {
     d70:	b141      	cbz	r1, d84 <usb_d_ep_halt+0x18>
		return _usb_d_ep_halt_clr(ep);
	} else if (ctrl == USB_EP_HALT_SET) {
     d72:	2901      	cmp	r1, #1
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
     d74:	bf0c      	ite	eq
     d76:	2101      	moveq	r1, #1
	} else {
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_GET);
     d78:	2102      	movne	r1, #2
     d7a:	4b13      	ldr	r3, [pc, #76]	; (dc8 <usb_d_ep_halt+0x5c>)
     d7c:	4798      	blx	r3
     d7e:	4603      	mov	r3, r0
	}
}
     d80:	4618      	mov	r0, r3
     d82:	bd38      	pop	{r3, r4, r5, pc}
	int8_t           ep_index = _usb_d_find_ep(ep);
     d84:	4b11      	ldr	r3, [pc, #68]	; (dcc <usb_d_ep_halt+0x60>)
     d86:	4798      	blx	r3
	if (ep_index < 0) {
     d88:	1e05      	subs	r5, r0, #0
     d8a:	db19      	blt.n	dc0 <usb_d_ep_halt+0x54>
	if (_usb_d_dev_ep_stall(ep, USB_EP_STALL_GET)) {
     d8c:	2102      	movs	r1, #2
     d8e:	4620      	mov	r0, r4
     d90:	4b0d      	ldr	r3, [pc, #52]	; (dc8 <usb_d_ep_halt+0x5c>)
     d92:	4798      	blx	r3
     d94:	4603      	mov	r3, r0
     d96:	2800      	cmp	r0, #0
     d98:	d0f2      	beq.n	d80 <usb_d_ep_halt+0x14>
		rc = _usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
     d9a:	2100      	movs	r1, #0
     d9c:	4620      	mov	r0, r4
     d9e:	4b0a      	ldr	r3, [pc, #40]	; (dc8 <usb_d_ep_halt+0x5c>)
     da0:	4798      	blx	r3
		if (rc < 0) {
     da2:	1e03      	subs	r3, r0, #0
     da4:	dbec      	blt.n	d80 <usb_d_ep_halt+0x14>
		ept->xfer.hdr.state  = USB_EP_S_IDLE;
     da6:	4b0a      	ldr	r3, [pc, #40]	; (dd0 <usb_d_ep_halt+0x64>)
     da8:	eb03 1345 	add.w	r3, r3, r5, lsl #5
     dac:	2201      	movs	r2, #1
     dae:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_UNHALT;
     db0:	2103      	movs	r1, #3
     db2:	70d9      	strb	r1, [r3, #3]
		ept->callbacks.xfer(ep, USB_XFER_UNHALT, NULL);
     db4:	69db      	ldr	r3, [r3, #28]
     db6:	2200      	movs	r2, #0
     db8:	4620      	mov	r0, r4
     dba:	4798      	blx	r3
	return ERR_NONE;
     dbc:	2300      	movs	r3, #0
     dbe:	e7df      	b.n	d80 <usb_d_ep_halt+0x14>
		return -USB_ERR_PARAM;
     dc0:	f06f 0311 	mvn.w	r3, #17
     dc4:	e7dc      	b.n	d80 <usb_d_ep_halt+0x14>
     dc6:	bf00      	nop
     dc8:	0000227d 	.word	0x0000227d
     dcc:	00000881 	.word	0x00000881
     dd0:	20000524 	.word	0x20000524

00000dd4 <usb_d_ep_register_callback>:

void usb_d_ep_register_callback(const uint8_t ep, const enum usb_d_ep_cb_type type, const FUNC_PTR func)
{
     dd4:	b538      	push	{r3, r4, r5, lr}
     dd6:	460d      	mov	r5, r1
     dd8:	4614      	mov	r4, r2
	int8_t           ep_index = _usb_d_find_ep(ep);
     dda:	4b0e      	ldr	r3, [pc, #56]	; (e14 <usb_d_ep_register_callback+0x40>)
     ddc:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	FUNC_PTR         f        = func ? (FUNC_PTR)func : (FUNC_PTR)usb_d_dummy_cb_false;
     dde:	4b0e      	ldr	r3, [pc, #56]	; (e18 <usb_d_ep_register_callback+0x44>)
     de0:	2c00      	cmp	r4, #0
     de2:	bf08      	it	eq
     de4:	461c      	moveq	r4, r3
	if (ep_index < 0) {
     de6:	2800      	cmp	r0, #0
     de8:	db13      	blt.n	e12 <usb_d_ep_register_callback+0x3e>
		return;
	}
	switch (type) {
     dea:	2d01      	cmp	r5, #1
     dec:	d008      	beq.n	e00 <usb_d_ep_register_callback+0x2c>
     dee:	b115      	cbz	r5, df6 <usb_d_ep_register_callback+0x22>
     df0:	2d02      	cmp	r5, #2
     df2:	d00a      	beq.n	e0a <usb_d_ep_register_callback+0x36>
     df4:	bd38      	pop	{r3, r4, r5, pc}
	case USB_D_EP_CB_SETUP:
		ept->callbacks.req = (usb_d_ep_cb_setup_t)f;
     df6:	4b09      	ldr	r3, [pc, #36]	; (e1c <usb_d_ep_register_callback+0x48>)
     df8:	eb03 1040 	add.w	r0, r3, r0, lsl #5
     dfc:	6144      	str	r4, [r0, #20]
		break;
     dfe:	bd38      	pop	{r3, r4, r5, pc}
	case USB_D_EP_CB_MORE:
		ept->callbacks.more = (usb_d_ep_cb_more_t)f;
     e00:	4b06      	ldr	r3, [pc, #24]	; (e1c <usb_d_ep_register_callback+0x48>)
     e02:	eb03 1040 	add.w	r0, r3, r0, lsl #5
     e06:	6184      	str	r4, [r0, #24]
		break;
     e08:	bd38      	pop	{r3, r4, r5, pc}
	case USB_D_EP_CB_XFER:
		ept->callbacks.xfer = (usb_d_ep_cb_xfer_t)f;
     e0a:	4b04      	ldr	r3, [pc, #16]	; (e1c <usb_d_ep_register_callback+0x48>)
     e0c:	eb03 1040 	add.w	r0, r3, r0, lsl #5
     e10:	61c4      	str	r4, [r0, #28]
     e12:	bd38      	pop	{r3, r4, r5, pc}
     e14:	00000881 	.word	0x00000881
     e18:	000008c5 	.word	0x000008c5
     e1c:	20000524 	.word	0x20000524

00000e20 <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
     e20:	b900      	cbnz	r0, e24 <assert+0x4>
		__asm("BKPT #0");
     e22:	be00      	bkpt	0x0000
     e24:	4770      	bx	lr

00000e26 <_get_cycles_for_ms>:
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
	return _get_cycles_for_ms_internal(ms, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
}
     e26:	f642 63e0 	movw	r3, #12000	; 0x2ee0
     e2a:	fb03 f000 	mul.w	r0, r3, r0
     e2e:	4770      	bx	lr

00000e30 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
     e30:	b508      	push	{r3, lr}
}

static inline void hri_nvmctrl_set_CTRLA_RWS_bf(const void *const hw, hri_nvmctrl_ctrla_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLA.reg |= NVMCTRL_CTRLA_RWS(mask);
     e32:	4a08      	ldr	r2, [pc, #32]	; (e54 <_init_chip+0x24>)
     e34:	8813      	ldrh	r3, [r2, #0]
     e36:	b29b      	uxth	r3, r3
     e38:	8013      	strh	r3, [r2, #0]
	hri_nvmctrl_set_CTRLA_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);

	_osc32kctrl_init_sources();
     e3a:	4b07      	ldr	r3, [pc, #28]	; (e58 <_init_chip+0x28>)
     e3c:	4798      	blx	r3
	_oscctrl_init_sources();
     e3e:	4b07      	ldr	r3, [pc, #28]	; (e5c <_init_chip+0x2c>)
     e40:	4798      	blx	r3
	_mclk_init();
     e42:	4b07      	ldr	r3, [pc, #28]	; (e60 <_init_chip+0x30>)
     e44:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
#endif
	_oscctrl_init_referenced_generators();
     e46:	4b07      	ldr	r3, [pc, #28]	; (e64 <_init_chip+0x34>)
     e48:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
     e4a:	f640 70ff 	movw	r0, #4095	; 0xfff
     e4e:	4b06      	ldr	r3, [pc, #24]	; (e68 <_init_chip+0x38>)
     e50:	4798      	blx	r3
     e52:	bd08      	pop	{r3, pc}
     e54:	41004000 	.word	0x41004000
     e58:	00000ed5 	.word	0x00000ed5
     e5c:	00000ef5 	.word	0x00000ef5
     e60:	00000ec9 	.word	0x00000ec9
     e64:	00000f11 	.word	0x00000f11
     e68:	00000e6d 	.word	0x00000e6d

00000e6c <_gclk_init_generators_by_fref>:

void _gclk_init_generators_by_fref(uint32_t bm)
{

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
     e6c:	f010 0f01 	tst.w	r0, #1
     e70:	d008      	beq.n	e84 <_gclk_init_generators_by_fref+0x18>
	((Gclk *)hw)->GENCTRL[index].reg = data;
     e72:	4a11      	ldr	r2, [pc, #68]	; (eb8 <_gclk_init_generators_by_fref+0x4c>)
     e74:	4b11      	ldr	r3, [pc, #68]	; (ebc <_gclk_init_generators_by_fref+0x50>)
     e76:	621a      	str	r2, [r3, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
     e78:	4619      	mov	r1, r3
     e7a:	f643 72fd 	movw	r2, #16381	; 0x3ffd
     e7e:	684b      	ldr	r3, [r1, #4]
     e80:	4213      	tst	r3, r2
     e82:	d1fc      	bne.n	e7e <_gclk_init_generators_by_fref+0x12>
		        | (CONF_GCLK_GENERATOR_2_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_2_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_3_CONFIG == 1
	if (bm & (1ul << 3)) {
     e84:	f010 0f08 	tst.w	r0, #8
     e88:	d008      	beq.n	e9c <_gclk_init_generators_by_fref+0x30>
	((Gclk *)hw)->GENCTRL[index].reg = data;
     e8a:	4a0d      	ldr	r2, [pc, #52]	; (ec0 <_gclk_init_generators_by_fref+0x54>)
     e8c:	4b0b      	ldr	r3, [pc, #44]	; (ebc <_gclk_init_generators_by_fref+0x50>)
     e8e:	62da      	str	r2, [r3, #44]	; 0x2c
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
     e90:	4619      	mov	r1, r3
     e92:	f643 72fd 	movw	r2, #16381	; 0x3ffd
     e96:	684b      	ldr	r3, [r1, #4]
     e98:	4213      	tst	r3, r2
     e9a:	d1fc      	bne.n	e96 <_gclk_init_generators_by_fref+0x2a>
		        | (CONF_GCLK_GENERATOR_3_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_3_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_4_CONFIG == 1
	if (bm & (1ul << 4)) {
     e9c:	f010 0f10 	tst.w	r0, #16
     ea0:	d008      	beq.n	eb4 <_gclk_init_generators_by_fref+0x48>
	((Gclk *)hw)->GENCTRL[index].reg = data;
     ea2:	4a08      	ldr	r2, [pc, #32]	; (ec4 <_gclk_init_generators_by_fref+0x58>)
     ea4:	4b05      	ldr	r3, [pc, #20]	; (ebc <_gclk_init_generators_by_fref+0x50>)
     ea6:	631a      	str	r2, [r3, #48]	; 0x30
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
     ea8:	4619      	mov	r1, r3
     eaa:	f643 72fd 	movw	r2, #16381	; 0x3ffd
     eae:	684b      	ldr	r3, [r1, #4]
     eb0:	4213      	tst	r3, r2
     eb2:	d1fc      	bne.n	eae <_gclk_init_generators_by_fref+0x42>
     eb4:	4770      	bx	lr
     eb6:	bf00      	nop
     eb8:	00010101 	.word	0x00010101
     ebc:	40001c00 	.word	0x40001c00
     ec0:	00010105 	.word	0x00010105
     ec4:	00010106 	.word	0x00010106

00000ec8 <_mclk_init>:
	((Mclk *)hw)->CPUDIV.reg = data;
     ec8:	2201      	movs	r2, #1
     eca:	4b01      	ldr	r3, [pc, #4]	; (ed0 <_mclk_init+0x8>)
     ecc:	715a      	strb	r2, [r3, #5]
     ece:	4770      	bx	lr
     ed0:	40000800 	.word	0x40000800

00000ed4 <_osc32kctrl_init_sources>:
}

static inline void hri_osc32kctrl_write_XOSC32K_reg(const void *const hw, hri_osc32kctrl_xosc32k_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->XOSC32K.reg = data;
     ed4:	4b06      	ldr	r3, [pc, #24]	; (ef0 <_osc32kctrl_init_sources+0x1c>)
     ed6:	f242 028e 	movw	r2, #8334	; 0x208e
     eda:	829a      	strh	r2, [r3, #20]
}

static inline void hri_osc32kctrl_write_CFDCTRL_reg(const void *const hw, hri_osc32kctrl_cfdctrl_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->CFDCTRL.reg = data;
     edc:	2200      	movs	r2, #0
     ede:	759a      	strb	r2, [r3, #22]
}

static inline void hri_osc32kctrl_write_EVCTRL_reg(const void *const hw, hri_osc32kctrl_evctrl_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->EVCTRL.reg = data;
     ee0:	75da      	strb	r2, [r3, #23]
}

static inline hri_osc32kctrl_osculp32k_reg_t hri_osc32kctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Osc32kctrl *)hw)->OSCULP32K.reg;
     ee2:	69da      	ldr	r2, [r3, #28]
	calib = hri_osc32kctrl_read_OSCULP32K_CALIB_bf(hw);
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
#if CONF_OSCULP32K_CALIB_ENABLE == 1
	                                   OSC32KCTRL_OSCULP32K_CALIB(CONF_OSCULP32K_CALIB)
#else
	                                   OSC32KCTRL_OSCULP32K_CALIB(calib)
     ee4:	f402 527c 	and.w	r2, r2, #16128	; 0x3f00
}

static inline void hri_osc32kctrl_write_OSCULP32K_reg(const void *const hw, hri_osc32kctrl_osculp32k_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->OSCULP32K.reg = data;
     ee8:	61da      	str	r2, [r3, #28]
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
     eea:	2201      	movs	r2, #1
     eec:	741a      	strb	r2, [r3, #16]
     eee:	4770      	bx	lr
     ef0:	40001400 	.word	0x40001400

00000ef4 <_oscctrl_init_sources>:
}

static inline void hri_oscctrl_write_XOSCCTRL_reg(const void *const hw, uint8_t index, hri_oscctrl_xoscctrl_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->XOSCCTRL[index].reg = data;
     ef4:	4a04      	ldr	r2, [pc, #16]	; (f08 <_oscctrl_init_sources+0x14>)
     ef6:	4b05      	ldr	r3, [pc, #20]	; (f0c <_oscctrl_init_sources+0x18>)
     ef8:	619a      	str	r2, [r3, #24]
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCRDY1) >> OSCCTRL_STATUS_XOSCRDY1_Pos;
     efa:	461a      	mov	r2, r3
     efc:	6913      	ldr	r3, [r2, #16]
	        | (CONF_XOSC1_XTALEN << OSCCTRL_XOSCCTRL_XTALEN_Pos) | (CONF_XOSC1_ENABLE << OSCCTRL_XOSCCTRL_ENABLE_Pos));
#endif

#if CONF_XOSC1_CONFIG == 1
#if CONF_XOSC1_ENABLE == 1
	while (!hri_oscctrl_get_STATUS_XOSCRDY1_bit(hw))
     efe:	f013 0f02 	tst.w	r3, #2
     f02:	d0fb      	beq.n	efc <_oscctrl_init_sources+0x8>
	hri_oscctrl_set_XOSCCTRL_ONDEMAND_bit(hw, 1);
#endif
#endif

	(void)hw;
}
     f04:	4770      	bx	lr
     f06:	bf00      	nop
     f08:	03002606 	.word	0x03002606
     f0c:	40001000 	.word	0x40001000

00000f10 <_oscctrl_init_referenced_generators>:
	tmp = ((Gclk *)hw)->GENCTRL[index].reg;
     f10:	4a36      	ldr	r2, [pc, #216]	; (fec <_oscctrl_init_referenced_generators+0xdc>)
     f12:	6a13      	ldr	r3, [r2, #32]
	tmp &= ~GCLK_GENCTRL_SRC_Msk;
     f14:	f023 030f 	bic.w	r3, r3, #15
	tmp |= GCLK_GENCTRL_SRC(data);
     f18:	f043 0304 	orr.w	r3, r3, #4
	((Gclk *)hw)->GENCTRL[index].reg = tmp;
     f1c:	6213      	str	r3, [r2, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
     f1e:	4611      	mov	r1, r2
     f20:	f643 72fd 	movw	r2, #16381	; 0x3ffd
     f24:	684b      	ldr	r3, [r1, #4]
     f26:	4213      	tst	r3, r2
     f28:	d1fc      	bne.n	f24 <_oscctrl_init_referenced_generators+0x14>
	return (((Gclk *)hw)->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL0) >> GCLK_SYNCBUSY_GENCTRL0_Pos;
     f2a:	4a30      	ldr	r2, [pc, #192]	; (fec <_oscctrl_init_referenced_generators+0xdc>)
     f2c:	6853      	ldr	r3, [r2, #4]
{
	void *hw = (void *)OSCCTRL;

#if CONF_DFLL_CONFIG == 1
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, GCLK_GENCTRL_SRC_OSCULP32K);
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
     f2e:	f013 0f04 	tst.w	r3, #4
     f32:	d1fb      	bne.n	f2c <_oscctrl_init_referenced_generators+0x1c>
}

static inline void hri_oscctrl_write_DFLLCTRLA_reg(const void *const hw, hri_oscctrl_dfllctrla_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLCTRLA.reg = data;
     f34:	4b2e      	ldr	r3, [pc, #184]	; (ff0 <_oscctrl_init_referenced_generators+0xe0>)
     f36:	2200      	movs	r2, #0
     f38:	771a      	strb	r2, [r3, #28]
}

static inline void hri_oscctrl_write_DFLLMUL_reg(const void *const hw, hri_oscctrl_dfllmul_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLMUL.reg = data;
     f3a:	4a2e      	ldr	r2, [pc, #184]	; (ff4 <_oscctrl_init_referenced_generators+0xe4>)
     f3c:	629a      	str	r2, [r3, #40]	; 0x28
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(const void *const hw)
{
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
     f3e:	461a      	mov	r2, r3
     f40:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
#endif

	hri_oscctrl_write_DFLLMUL_reg(hw,
	                              OSCCTRL_DFLLMUL_CSTEP(CONF_DFLL_CSTEP) | OSCCTRL_DFLLMUL_FSTEP(CONF_DFLL_FSTEP)
	                                  | OSCCTRL_DFLLMUL_MUL(CONF_DFLL_MUL));
	while (hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(hw))
     f44:	f013 0f10 	tst.w	r3, #16
     f48:	d1fa      	bne.n	f40 <_oscctrl_init_referenced_generators+0x30>
	((Oscctrl *)hw)->DFLLCTRLB.reg = data;
     f4a:	2200      	movs	r2, #0
     f4c:	4b28      	ldr	r3, [pc, #160]	; (ff0 <_oscctrl_init_referenced_generators+0xe0>)
     f4e:	f883 2020 	strb.w	r2, [r3, #32]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
     f52:	461a      	mov	r2, r3
     f54:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
		;

	hri_oscctrl_write_DFLLCTRLB_reg(hw, 0);
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
     f58:	f013 0f04 	tst.w	r3, #4
     f5c:	d1fa      	bne.n	f54 <_oscctrl_init_referenced_generators+0x44>
	((Oscctrl *)hw)->DFLLCTRLA.reg = data;
     f5e:	2202      	movs	r2, #2
     f60:	4b23      	ldr	r3, [pc, #140]	; (ff0 <_oscctrl_init_referenced_generators+0xe0>)
     f62:	771a      	strb	r2, [r3, #28]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
     f64:	461a      	mov	r2, r3
     f66:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
		;

	tmp = (CONF_DFLL_RUNSTDBY << OSCCTRL_DFLLCTRLA_RUNSTDBY_Pos) | OSCCTRL_DFLLCTRLA_ENABLE;
	hri_oscctrl_write_DFLLCTRLA_reg(hw, tmp);
	while (hri_oscctrl_get_DFLLSYNC_ENABLE_bit(hw))
     f6a:	f013 0f02 	tst.w	r3, #2
     f6e:	d1fa      	bne.n	f66 <_oscctrl_init_referenced_generators+0x56>
	return ((Oscctrl *)hw)->DFLLVAL.reg;
     f70:	4b1f      	ldr	r3, [pc, #124]	; (ff0 <_oscctrl_init_referenced_generators+0xe0>)
     f72:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	((Oscctrl *)hw)->DFLLVAL.reg = data;
     f74:	625a      	str	r2, [r3, #36]	; 0x24
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
     f76:	461a      	mov	r2, r3
     f78:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c

#if CONF_DFLL_OVERWRITE_CALIBRATION == 1
	hri_oscctrl_write_DFLLVAL_reg(hw, OSCCTRL_DFLLVAL_COARSE(CONF_DFLL_COARSE) | OSCCTRL_DFLLVAL_FINE(CONF_DFLL_FINE));
#endif
	hri_oscctrl_write_DFLLVAL_reg(hw, hri_oscctrl_read_DFLLVAL_reg(hw));
	while (hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit(hw))
     f7c:	f013 0f08 	tst.w	r3, #8
     f80:	d1fa      	bne.n	f78 <_oscctrl_init_referenced_generators+0x68>
	((Oscctrl *)hw)->DFLLCTRLB.reg = data;
     f82:	2219      	movs	r2, #25
     f84:	4b1a      	ldr	r3, [pc, #104]	; (ff0 <_oscctrl_init_referenced_generators+0xe0>)
     f86:	f883 2020 	strb.w	r2, [r3, #32]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
     f8a:	461a      	mov	r2, r3
     f8c:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
	tmp = (CONF_DFLL_WAITLOCK << OSCCTRL_DFLLCTRLB_WAITLOCK_Pos) | (CONF_DFLL_BPLCKC << OSCCTRL_DFLLCTRLB_BPLCKC_Pos)
	      | (CONF_DFLL_QLDIS << OSCCTRL_DFLLCTRLB_QLDIS_Pos) | (CONF_DFLL_CCDIS << OSCCTRL_DFLLCTRLB_CCDIS_Pos)
	      | (CONF_DFLL_USBCRM << OSCCTRL_DFLLCTRLB_USBCRM_Pos) | (CONF_DFLL_LLAW << OSCCTRL_DFLLCTRLB_LLAW_Pos)
	      | (CONF_DFLL_STABLE << OSCCTRL_DFLLCTRLB_STABLE_Pos) | (CONF_DFLL_MODE << OSCCTRL_DFLLCTRLB_MODE_Pos) | 0;
	hri_oscctrl_write_DFLLCTRLB_reg(hw, tmp);
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
     f90:	f013 0f04 	tst.w	r3, #4
     f94:	d1fa      	bne.n	f8c <_oscctrl_init_referenced_generators+0x7c>
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
     f96:	4b16      	ldr	r3, [pc, #88]	; (ff0 <_oscctrl_init_referenced_generators+0xe0>)
     f98:	f893 3020 	ldrb.w	r3, [r3, #32]
	                                (CONF_FDPLL1_RUNSTDBY << OSCCTRL_DPLLCTRLA_RUNSTDBY_Pos)
	                                    | (CONF_FDPLL1_ENABLE << OSCCTRL_DPLLCTRLA_ENABLE_Pos));
#endif

#if CONF_DFLL_CONFIG == 1
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(hw)) {
     f9c:	f013 0f01 	tst.w	r3, #1
     fa0:	d01d      	beq.n	fde <_oscctrl_init_referenced_generators+0xce>
	tmp = ((Oscctrl *)hw)->STATUS.reg;
     fa2:	4a13      	ldr	r2, [pc, #76]	; (ff0 <_oscctrl_init_referenced_generators+0xe0>)
     fa4:	6913      	ldr	r3, [r2, #16]
	tmp &= mask;
     fa6:	f403 6310 	and.w	r3, r3, #2304	; 0x900
		hri_oscctrl_status_reg_t status_mask = OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC;

		while (hri_oscctrl_get_STATUS_reg(hw, status_mask) != status_mask)
     faa:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
     fae:	d1f9      	bne.n	fa4 <_oscctrl_init_referenced_generators+0x94>
	return ((Gclk *)hw)->SYNCBUSY.reg;
     fb0:	4a0e      	ldr	r2, [pc, #56]	; (fec <_oscctrl_init_referenced_generators+0xdc>)
     fb2:	6853      	ldr	r3, [r2, #4]
	hri_oscctrl_set_DPLLCTRLA_ONDEMAND_bit(hw, 1);
#endif
#endif

#if CONF_DFLL_CONFIG == 1
	while (hri_gclk_read_SYNCBUSY_reg(GCLK))
     fb4:	2b00      	cmp	r3, #0
     fb6:	d1fc      	bne.n	fb2 <_oscctrl_init_referenced_generators+0xa2>
	tmp = ((Gclk *)hw)->GENCTRL[index].reg;
     fb8:	4a0c      	ldr	r2, [pc, #48]	; (fec <_oscctrl_init_referenced_generators+0xdc>)
     fba:	6a13      	ldr	r3, [r2, #32]
	tmp &= ~GCLK_GENCTRL_SRC_Msk;
     fbc:	f023 030f 	bic.w	r3, r3, #15
	tmp |= GCLK_GENCTRL_SRC(data);
     fc0:	f043 0301 	orr.w	r3, r3, #1
	((Gclk *)hw)->GENCTRL[index].reg = tmp;
     fc4:	6213      	str	r3, [r2, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
     fc6:	4611      	mov	r1, r2
     fc8:	f643 72fd 	movw	r2, #16381	; 0x3ffd
     fcc:	684b      	ldr	r3, [r1, #4]
     fce:	4213      	tst	r3, r2
     fd0:	d1fc      	bne.n	fcc <_oscctrl_init_referenced_generators+0xbc>
	return (((Gclk *)hw)->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL0) >> GCLK_SYNCBUSY_GENCTRL0_Pos;
     fd2:	4a06      	ldr	r2, [pc, #24]	; (fec <_oscctrl_init_referenced_generators+0xdc>)
     fd4:	6853      	ldr	r3, [r2, #4]
		;
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, CONF_GCLK_GEN_0_SOURCE);
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
     fd6:	f013 0f04 	tst.w	r3, #4
     fda:	d1fb      	bne.n	fd4 <_oscctrl_init_referenced_generators+0xc4>
		;
#endif
	(void)hw;
}
     fdc:	4770      	bx	lr
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_DFLLRDY) >> OSCCTRL_STATUS_DFLLRDY_Pos;
     fde:	4a04      	ldr	r2, [pc, #16]	; (ff0 <_oscctrl_init_referenced_generators+0xe0>)
     fe0:	6913      	ldr	r3, [r2, #16]
		while (!hri_oscctrl_get_STATUS_DFLLRDY_bit(hw))
     fe2:	f413 7f80 	tst.w	r3, #256	; 0x100
     fe6:	d0fb      	beq.n	fe0 <_oscctrl_init_referenced_generators+0xd0>
     fe8:	e7e2      	b.n	fb0 <_oscctrl_init_referenced_generators+0xa0>
     fea:	bf00      	nop
     fec:	40001c00 	.word	0x40001c00
     ff0:	40001000 	.word	0x40001000
     ff4:	0401bb80 	.word	0x0401bb80

00000ff8 <_sercom_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given sercom hardware instance
 */
static uint8_t _sercom_get_hardware_index(const void *const hw)
{
     ff8:	b470      	push	{r4, r5, r6}
     ffa:	b089      	sub	sp, #36	; 0x24
     ffc:	4606      	mov	r6, r0
	Sercom *const sercom_modules[] = SERCOM_INSTS;
     ffe:	466c      	mov	r4, sp
    1000:	4d0d      	ldr	r5, [pc, #52]	; (1038 <_sercom_get_hardware_index+0x40>)
    1002:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    1004:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    1006:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    100a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	/* Find index for SERCOM instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
    100e:	9b00      	ldr	r3, [sp, #0]
    1010:	42b3      	cmp	r3, r6
    1012:	d00d      	beq.n	1030 <_sercom_get_hardware_index+0x38>
    1014:	4631      	mov	r1, r6
    1016:	ab01      	add	r3, sp, #4
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    1018:	2001      	movs	r0, #1
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
    101a:	f853 2b04 	ldr.w	r2, [r3], #4
    101e:	428a      	cmp	r2, r1
    1020:	d007      	beq.n	1032 <_sercom_get_hardware_index+0x3a>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    1022:	3001      	adds	r0, #1
    1024:	2808      	cmp	r0, #8
    1026:	d1f8      	bne.n	101a <_sercom_get_hardware_index+0x22>
			return i;
		}
	}
	return 0;
    1028:	2000      	movs	r0, #0
}
    102a:	b009      	add	sp, #36	; 0x24
    102c:	bc70      	pop	{r4, r5, r6}
    102e:	4770      	bx	lr
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    1030:	2000      	movs	r0, #0
			return i;
    1032:	b2c0      	uxtb	r0, r0
    1034:	e7f9      	b.n	102a <_sercom_get_hardware_index+0x32>
    1036:	bf00      	nop
    1038:	00003584 	.word	0x00003584

0000103c <_sercom_get_irq_num>:

/**
 * \brief Retrieve IRQ number for the given hardware instance
 */
static uint8_t _sercom_get_irq_num(const void *const hw)
{
    103c:	b508      	push	{r3, lr}
	return SERCOM0_0_IRQn + (_sercom_get_hardware_index(hw) << 2);
    103e:	4b03      	ldr	r3, [pc, #12]	; (104c <_sercom_get_irq_num+0x10>)
    1040:	4798      	blx	r3
    1042:	0080      	lsls	r0, r0, #2
    1044:	302e      	adds	r0, #46	; 0x2e
}
    1046:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
    104a:	bd08      	pop	{r3, pc}
    104c:	00000ff9 	.word	0x00000ff9

00001050 <_spi_handler>:
/**
 *  \brief IRQ handler used
 *  \param[in, out] p Pointer to SPI device instance.
 */
static void _spi_handler(struct _spi_async_dev *dev)
{
    1050:	b508      	push	{r3, lr}
	void *                      hw = dev->prvt;
    1052:	6802      	ldr	r2, [r0, #0]
	return tmp;
}

static inline hri_sercomspi_intflag_reg_t hri_sercomspi_read_INTFLAG_reg(const void *const hw)
{
	return ((Sercom *)hw)->SPI.INTFLAG.reg;
    1054:	7e11      	ldrb	r1, [r2, #24]
	return tmp;
}

static inline hri_sercomspi_intenset_reg_t hri_sercomspi_read_INTEN_reg(const void *const hw)
{
	return ((Sercom *)hw)->SPI.INTENSET.reg;
    1056:	7d93      	ldrb	r3, [r2, #22]
	hri_sercomspi_intflag_reg_t st;

	st = hri_sercomspi_read_INTFLAG_reg(hw);
	st &= hri_sercomspi_read_INTEN_reg(hw);
    1058:	400b      	ands	r3, r1

	if (st & SERCOM_SPI_INTFLAG_DRE) {
    105a:	f013 0f01 	tst.w	r3, #1
    105e:	d109      	bne.n	1074 <_spi_handler+0x24>
		dev->callbacks.tx(dev);
	} else if (st & SERCOM_SPI_INTFLAG_RXC) {
    1060:	f013 0f04 	tst.w	r3, #4
    1064:	d109      	bne.n	107a <_spi_handler+0x2a>
		dev->callbacks.rx(dev);
	} else if (st & SERCOM_SPI_INTFLAG_TXC) {
    1066:	f013 0f02 	tst.w	r3, #2
    106a:	d109      	bne.n	1080 <_spi_handler+0x30>
		hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC);
		dev->callbacks.complete(dev);
	} else if (st & SERCOM_SPI_INTFLAG_ERROR) {
    106c:	f013 0f80 	tst.w	r3, #128	; 0x80
    1070:	d10b      	bne.n	108a <_spi_handler+0x3a>
    1072:	bd08      	pop	{r3, pc}
		dev->callbacks.tx(dev);
    1074:	6883      	ldr	r3, [r0, #8]
    1076:	4798      	blx	r3
    1078:	bd08      	pop	{r3, pc}
		dev->callbacks.rx(dev);
    107a:	68c3      	ldr	r3, [r0, #12]
    107c:	4798      	blx	r3
    107e:	bd08      	pop	{r3, pc}
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    1080:	2302      	movs	r3, #2
    1082:	7613      	strb	r3, [r2, #24]
		dev->callbacks.complete(dev);
    1084:	6903      	ldr	r3, [r0, #16]
    1086:	4798      	blx	r3
    1088:	bd08      	pop	{r3, pc}
}

static inline void hri_sercomspi_clear_STATUS_reg(const void *const hw, hri_sercomspi_status_reg_t mask)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.STATUS.reg = mask;
    108a:	2304      	movs	r3, #4
    108c:	8353      	strh	r3, [r2, #26]
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    108e:	2380      	movs	r3, #128	; 0x80
    1090:	7613      	strb	r3, [r2, #24]
		hri_sercomspi_clear_STATUS_reg(hw, SERCOM_SPI_STATUS_BUFOVF);
		hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_ERROR);
		dev->callbacks.err(dev, ERR_OVERFLOW);
    1092:	6943      	ldr	r3, [r0, #20]
    1094:	f06f 0112 	mvn.w	r1, #18
    1098:	4798      	blx	r3
	}
}
    109a:	e7ea      	b.n	1072 <_spi_handler+0x22>

0000109c <SERCOM0_0_Handler>:

/**
 * \internal Sercom interrupt handler
 */
void SERCOM0_0_Handler(void)
{
    109c:	b508      	push	{r3, lr}
	_spi_handler(_sercom0_dev);
    109e:	4b02      	ldr	r3, [pc, #8]	; (10a8 <SERCOM0_0_Handler+0xc>)
    10a0:	6818      	ldr	r0, [r3, #0]
    10a2:	4b02      	ldr	r3, [pc, #8]	; (10ac <SERCOM0_0_Handler+0x10>)
    10a4:	4798      	blx	r3
    10a6:	bd08      	pop	{r3, pc}
    10a8:	200005a4 	.word	0x200005a4
    10ac:	00001051 	.word	0x00001051

000010b0 <SERCOM0_1_Handler>:
}
/**
 * \internal Sercom interrupt handler
 */
void SERCOM0_1_Handler(void)
{
    10b0:	b508      	push	{r3, lr}
	_spi_handler(_sercom0_dev);
    10b2:	4b02      	ldr	r3, [pc, #8]	; (10bc <SERCOM0_1_Handler+0xc>)
    10b4:	6818      	ldr	r0, [r3, #0]
    10b6:	4b02      	ldr	r3, [pc, #8]	; (10c0 <SERCOM0_1_Handler+0x10>)
    10b8:	4798      	blx	r3
    10ba:	bd08      	pop	{r3, pc}
    10bc:	200005a4 	.word	0x200005a4
    10c0:	00001051 	.word	0x00001051

000010c4 <SERCOM0_2_Handler>:
}
/**
 * \internal Sercom interrupt handler
 */
void SERCOM0_2_Handler(void)
{
    10c4:	b508      	push	{r3, lr}
	_spi_handler(_sercom0_dev);
    10c6:	4b02      	ldr	r3, [pc, #8]	; (10d0 <SERCOM0_2_Handler+0xc>)
    10c8:	6818      	ldr	r0, [r3, #0]
    10ca:	4b02      	ldr	r3, [pc, #8]	; (10d4 <SERCOM0_2_Handler+0x10>)
    10cc:	4798      	blx	r3
    10ce:	bd08      	pop	{r3, pc}
    10d0:	200005a4 	.word	0x200005a4
    10d4:	00001051 	.word	0x00001051

000010d8 <SERCOM0_3_Handler>:
}
/**
 * \internal Sercom interrupt handler
 */
void SERCOM0_3_Handler(void)
{
    10d8:	b508      	push	{r3, lr}
	_spi_handler(_sercom0_dev);
    10da:	4b02      	ldr	r3, [pc, #8]	; (10e4 <SERCOM0_3_Handler+0xc>)
    10dc:	6818      	ldr	r0, [r3, #0]
    10de:	4b02      	ldr	r3, [pc, #8]	; (10e8 <SERCOM0_3_Handler+0x10>)
    10e0:	4798      	blx	r3
    10e2:	bd08      	pop	{r3, pc}
    10e4:	200005a4 	.word	0x200005a4
    10e8:	00001051 	.word	0x00001051

000010ec <_spi_m_sync_init>:
}

int32_t _spi_m_sync_init(struct _spi_m_sync_dev *dev, void *const hw)
{
    10ec:	b538      	push	{r3, r4, r5, lr}
    10ee:	4605      	mov	r5, r0
    10f0:	460c      	mov	r4, r1
	uint8_t n = _sercom_get_hardware_index((const void *)hw_addr);
    10f2:	4608      	mov	r0, r1
    10f4:	4b36      	ldr	r3, [pc, #216]	; (11d0 <_spi_m_sync_init+0xe4>)
    10f6:	4798      	blx	r3
		if (sercomspi_regs[i].n == n) {
    10f8:	b160      	cbz	r0, 1114 <_spi_m_sync_init+0x28>
	const struct sercomspi_regs_cfg *regs = _spi_get_regs((uint32_t)hw);

	ASSERT(dev && hw);
    10fa:	2d00      	cmp	r5, #0
    10fc:	d055      	beq.n	11aa <_spi_m_sync_init+0xbe>
    10fe:	f640 1273 	movw	r2, #2419	; 0x973
    1102:	4934      	ldr	r1, [pc, #208]	; (11d4 <_spi_m_sync_init+0xe8>)
    1104:	1c20      	adds	r0, r4, #0
    1106:	bf18      	it	ne
    1108:	2001      	movne	r0, #1
    110a:	4b33      	ldr	r3, [pc, #204]	; (11d8 <_spi_m_sync_init+0xec>)
    110c:	4798      	blx	r3

	if (regs == NULL) {
		return ERR_INVALID_ARG;
    110e:	f06f 000c 	mvn.w	r0, #12
    1112:	bd38      	pop	{r3, r4, r5, pc}
	ASSERT(dev && hw);
    1114:	2d00      	cmp	r5, #0
    1116:	d151      	bne.n	11bc <_spi_m_sync_init+0xd0>
    1118:	f640 1273 	movw	r2, #2419	; 0x973
    111c:	492d      	ldr	r1, [pc, #180]	; (11d4 <_spi_m_sync_init+0xe8>)
    111e:	2000      	movs	r0, #0
    1120:	4b2d      	ldr	r3, [pc, #180]	; (11d8 <_spi_m_sync_init+0xec>)
    1122:	4798      	blx	r3
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    1124:	69e3      	ldr	r3, [r4, #28]
	}

	if (!hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    1126:	f013 0f01 	tst.w	r3, #1
    112a:	d119      	bne.n	1160 <_spi_m_sync_init+0x74>
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    112c:	69e3      	ldr	r3, [r4, #28]
    112e:	f013 0f03 	tst.w	r3, #3
    1132:	d1fb      	bne.n	112c <_spi_m_sync_init+0x40>
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    1134:	6823      	ldr	r3, [r4, #0]
		uint32_t mode = regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk;
		if (hri_sercomspi_get_CTRLA_reg(hw, SERCOM_SPI_CTRLA_ENABLE)) {
    1136:	f013 0f02 	tst.w	r3, #2
    113a:	d00b      	beq.n	1154 <_spi_m_sync_init+0x68>
	((Sercom *)hw)->SPI.CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    113c:	6823      	ldr	r3, [r4, #0]
    113e:	f023 0302 	bic.w	r3, r3, #2
    1142:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    1144:	69e3      	ldr	r3, [r4, #28]
    1146:	f013 0f03 	tst.w	r3, #3
    114a:	d1fb      	bne.n	1144 <_spi_m_sync_init+0x58>
    114c:	69e3      	ldr	r3, [r4, #28]
    114e:	f013 0f02 	tst.w	r3, #2
    1152:	d1fb      	bne.n	114c <_spi_m_sync_init+0x60>
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    1154:	230d      	movs	r3, #13
    1156:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    1158:	69e3      	ldr	r3, [r4, #28]
    115a:	f013 0f03 	tst.w	r3, #3
    115e:	d1fb      	bne.n	1158 <_spi_m_sync_init+0x6c>
    1160:	69e3      	ldr	r3, [r4, #28]
    1162:	f013 0f01 	tst.w	r3, #1
    1166:	d1fb      	bne.n	1160 <_spi_m_sync_init+0x74>
		}
		hri_sercomspi_write_CTRLA_reg(hw, SERCOM_SPI_CTRLA_SWRST | mode);
	}
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST);

	dev->prvt = hw;
    1168:	602c      	str	r4, [r5, #0]
	ASSERT(hw && regs);
    116a:	f640 1206 	movw	r2, #2310	; 0x906
    116e:	4919      	ldr	r1, [pc, #100]	; (11d4 <_spi_m_sync_init+0xe8>)
    1170:	1c20      	adds	r0, r4, #0
    1172:	bf18      	it	ne
    1174:	2001      	movne	r0, #1
    1176:	4b18      	ldr	r3, [pc, #96]	; (11d8 <_spi_m_sync_init+0xec>)
    1178:	4798      	blx	r3
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    117a:	4b18      	ldr	r3, [pc, #96]	; (11dc <_spi_m_sync_init+0xf0>)
    117c:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    117e:	69e3      	ldr	r3, [r4, #28]
    1180:	f013 0f03 	tst.w	r3, #3
    1184:	d1fb      	bne.n	117e <_spi_m_sync_init+0x92>
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    1186:	f44f 3300 	mov.w	r3, #131072	; 0x20000
    118a:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    118c:	69e3      	ldr	r3, [r4, #28]
    118e:	f013 0f17 	tst.w	r3, #23
    1192:	d1fb      	bne.n	118c <_spi_m_sync_init+0xa0>
	((Sercom *)hw)->SPI.BAUD.reg = data;
    1194:	2377      	movs	r3, #119	; 0x77
    1196:	7323      	strb	r3, [r4, #12]
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    1198:	2000      	movs	r0, #0
    119a:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
	} else {
		_spi_load_regs_master(hw, regs);
	}

	/* Load character size from default hardware configuration */
	dev->char_size = ((regs->ctrlb & SERCOM_SPI_CTRLB_CHSIZE_Msk) == 0) ? 1 : 2;
    119e:	2301      	movs	r3, #1
    11a0:	712b      	strb	r3, [r5, #4]

	dev->dummy_byte = regs->dummy_byte;
    11a2:	f240 13ff 	movw	r3, #511	; 0x1ff
    11a6:	80eb      	strh	r3, [r5, #6]

	return ERR_NONE;
    11a8:	bd38      	pop	{r3, r4, r5, pc}
	ASSERT(dev && hw);
    11aa:	f640 1273 	movw	r2, #2419	; 0x973
    11ae:	4909      	ldr	r1, [pc, #36]	; (11d4 <_spi_m_sync_init+0xe8>)
    11b0:	2000      	movs	r0, #0
    11b2:	4b09      	ldr	r3, [pc, #36]	; (11d8 <_spi_m_sync_init+0xec>)
    11b4:	4798      	blx	r3
		return ERR_INVALID_ARG;
    11b6:	f06f 000c 	mvn.w	r0, #12
    11ba:	bd38      	pop	{r3, r4, r5, pc}
	ASSERT(dev && hw);
    11bc:	f640 1273 	movw	r2, #2419	; 0x973
    11c0:	4904      	ldr	r1, [pc, #16]	; (11d4 <_spi_m_sync_init+0xe8>)
    11c2:	1c20      	adds	r0, r4, #0
    11c4:	bf18      	it	ne
    11c6:	2001      	movne	r0, #1
    11c8:	4b03      	ldr	r3, [pc, #12]	; (11d8 <_spi_m_sync_init+0xec>)
    11ca:	4798      	blx	r3
    11cc:	e7aa      	b.n	1124 <_spi_m_sync_init+0x38>
    11ce:	bf00      	nop
    11d0:	00000ff9 	.word	0x00000ff9
    11d4:	000035bc 	.word	0x000035bc
    11d8:	00000e21 	.word	0x00000e21
    11dc:	0020000c 	.word	0x0020000c

000011e0 <_spi_m_async_init>:
{
	return _spi_m_sync_init(dev, hw);
}

int32_t _spi_m_async_init(struct _spi_async_dev *dev, void *const hw)
{
    11e0:	b538      	push	{r3, r4, r5, lr}
    11e2:	4604      	mov	r4, r0
    11e4:	460d      	mov	r5, r1
	struct _spi_async_dev *spid = dev;
	/* Do hardware initialize. */
	int32_t rc = _spi_m_sync_init((struct _spi_m_sync_dev *)dev, hw);
    11e6:	4b15      	ldr	r3, [pc, #84]	; (123c <_spi_m_async_init+0x5c>)
    11e8:	4798      	blx	r3

	if (rc < 0) {
    11ea:	2800      	cmp	r0, #0
    11ec:	db25      	blt.n	123a <_spi_m_async_init+0x5a>
	if (hw == SERCOM0) {
    11ee:	4b14      	ldr	r3, [pc, #80]	; (1240 <_spi_m_async_init+0x60>)
    11f0:	429d      	cmp	r5, r3
		_sercom0_dev = (struct _spi_async_dev *)dev;
    11f2:	bf04      	itt	eq
    11f4:	4b13      	ldreq	r3, [pc, #76]	; (1244 <_spi_m_async_init+0x64>)
    11f6:	601c      	streq	r4, [r3, #0]
		return rc;
	}

	_sercom_init_irq_param(hw, (void *)dev);
	/* Initialize callbacks: must use them */
	spid->callbacks.complete = NULL;
    11f8:	2300      	movs	r3, #0
    11fa:	6123      	str	r3, [r4, #16]
	spid->callbacks.rx       = NULL;
    11fc:	60e3      	str	r3, [r4, #12]
	spid->callbacks.tx       = NULL;
    11fe:	60a3      	str	r3, [r4, #8]
	uint8_t irq              = _sercom_get_irq_num(hw);
    1200:	4628      	mov	r0, r5
    1202:	4b11      	ldr	r3, [pc, #68]	; (1248 <_spi_m_async_init+0x68>)
    1204:	4798      	blx	r3
    1206:	1d01      	adds	r1, r0, #4
    1208:	b2c9      	uxtb	r1, r1
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    120a:	2401      	movs	r4, #1
    120c:	f000 021f 	and.w	r2, r0, #31
    1210:	fa04 f202 	lsl.w	r2, r4, r2
    1214:	0943      	lsrs	r3, r0, #5
    1216:	009b      	lsls	r3, r3, #2
    1218:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    121c:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    1220:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    1224:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1228:	f3bf 8f6f 	isb	sy
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    122c:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	for (uint32_t i = 0; i < 4; i++) {
		NVIC_DisableIRQ((IRQn_Type)irq);
		NVIC_ClearPendingIRQ((IRQn_Type)irq);
		irq++;
    1230:	3001      	adds	r0, #1
    1232:	b2c0      	uxtb	r0, r0
	for (uint32_t i = 0; i < 4; i++) {
    1234:	4281      	cmp	r1, r0
    1236:	d1e9      	bne.n	120c <_spi_m_async_init+0x2c>
	}

	return ERR_NONE;
    1238:	2000      	movs	r0, #0
}
    123a:	bd38      	pop	{r3, r4, r5, pc}
    123c:	000010ed 	.word	0x000010ed
    1240:	40003000 	.word	0x40003000
    1244:	200005a4 	.word	0x200005a4
    1248:	0000103d 	.word	0x0000103d

0000124c <_spi_m_async_enable_tx>:

	return rc;
}

int32_t _spi_m_async_enable_tx(struct _spi_async_dev *dev, bool state)
{
    124c:	b538      	push	{r3, r4, r5, lr}
    124e:	460d      	mov	r5, r1
	void *hw = dev->prvt;
    1250:	6804      	ldr	r4, [r0, #0]

	ASSERT(dev && hw);
    1252:	b160      	cbz	r0, 126e <_spi_m_async_enable_tx+0x22>
    1254:	1c20      	adds	r0, r4, #0
    1256:	bf18      	it	ne
    1258:	2001      	movne	r0, #1
    125a:	f640 3203 	movw	r2, #2819	; 0xb03
    125e:	4906      	ldr	r1, [pc, #24]	; (1278 <_spi_m_async_enable_tx+0x2c>)
    1260:	4b06      	ldr	r3, [pc, #24]	; (127c <_spi_m_async_enable_tx+0x30>)
    1262:	4798      	blx	r3

	if (state) {
    1264:	b92d      	cbnz	r5, 1272 <_spi_m_async_enable_tx+0x26>
	((Sercom *)hw)->SPI.INTENCLR.reg = SERCOM_SPI_INTENSET_DRE;
    1266:	2301      	movs	r3, #1
    1268:	7523      	strb	r3, [r4, #20]
	} else {
		hri_sercomspi_clear_INTEN_DRE_bit(hw);
	}

	return ERR_NONE;
}
    126a:	2000      	movs	r0, #0
    126c:	bd38      	pop	{r3, r4, r5, pc}
    126e:	2000      	movs	r0, #0
    1270:	e7f3      	b.n	125a <_spi_m_async_enable_tx+0xe>
	((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_DRE;
    1272:	2301      	movs	r3, #1
    1274:	75a3      	strb	r3, [r4, #22]
    1276:	e7f8      	b.n	126a <_spi_m_async_enable_tx+0x1e>
    1278:	000035bc 	.word	0x000035bc
    127c:	00000e21 	.word	0x00000e21

00001280 <_spi_m_async_enable_rx>:
{
	return _spi_m_async_enable_tx(dev, state);
}

int32_t _spi_m_async_enable_rx(struct _spi_async_dev *dev, bool state)
{
    1280:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1282:	460f      	mov	r7, r1
	void *hw = dev->prvt;
    1284:	6804      	ldr	r4, [r0, #0]

	ASSERT(dev);
    1286:	4e0c      	ldr	r6, [pc, #48]	; (12b8 <_spi_m_async_enable_rx+0x38>)
    1288:	f640 3217 	movw	r2, #2839	; 0xb17
    128c:	4631      	mov	r1, r6
    128e:	3000      	adds	r0, #0
    1290:	bf18      	it	ne
    1292:	2001      	movne	r0, #1
    1294:	4d09      	ldr	r5, [pc, #36]	; (12bc <_spi_m_async_enable_rx+0x3c>)
    1296:	47a8      	blx	r5
	ASSERT(hw);
    1298:	f640 3218 	movw	r2, #2840	; 0xb18
    129c:	4631      	mov	r1, r6
    129e:	1c20      	adds	r0, r4, #0
    12a0:	bf18      	it	ne
    12a2:	2001      	movne	r0, #1
    12a4:	47a8      	blx	r5

	if (state) {
    12a6:	b91f      	cbnz	r7, 12b0 <_spi_m_async_enable_rx+0x30>
	((Sercom *)hw)->SPI.INTENCLR.reg = SERCOM_SPI_INTENSET_RXC;
    12a8:	2304      	movs	r3, #4
    12aa:	7523      	strb	r3, [r4, #20]
	} else {
		hri_sercomspi_clear_INTEN_RXC_bit(hw);
	}

	return ERR_NONE;
}
    12ac:	2000      	movs	r0, #0
    12ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_RXC;
    12b0:	2304      	movs	r3, #4
    12b2:	75a3      	strb	r3, [r4, #22]
    12b4:	e7fa      	b.n	12ac <_spi_m_async_enable_rx+0x2c>
    12b6:	bf00      	nop
    12b8:	000035bc 	.word	0x000035bc
    12bc:	00000e21 	.word	0x00000e21

000012c0 <_spi_m_async_enable_tx_complete>:
{
	return _spi_m_async_enable_rx(dev, state);
}

int32_t _spi_m_async_enable_tx_complete(struct _spi_async_dev *dev, bool state)
{
    12c0:	b538      	push	{r3, r4, r5, lr}
    12c2:	460d      	mov	r5, r1
	ASSERT(dev && dev->prvt);
    12c4:	4604      	mov	r4, r0
    12c6:	b170      	cbz	r0, 12e6 <_spi_m_async_enable_tx_complete+0x26>
    12c8:	6800      	ldr	r0, [r0, #0]
    12ca:	3000      	adds	r0, #0
    12cc:	bf18      	it	ne
    12ce:	2001      	movne	r0, #1
    12d0:	f640 322a 	movw	r2, #2858	; 0xb2a
    12d4:	4907      	ldr	r1, [pc, #28]	; (12f4 <_spi_m_async_enable_tx_complete+0x34>)
    12d6:	4b08      	ldr	r3, [pc, #32]	; (12f8 <_spi_m_async_enable_tx_complete+0x38>)
    12d8:	4798      	blx	r3

	if (state) {
    12da:	b935      	cbnz	r5, 12ea <_spi_m_async_enable_tx_complete+0x2a>
		hri_sercomspi_set_INTEN_TXC_bit(dev->prvt);
	} else {
		hri_sercomspi_clear_INTEN_TXC_bit(dev->prvt);
    12dc:	6823      	ldr	r3, [r4, #0]
	((Sercom *)hw)->SPI.INTENCLR.reg = SERCOM_SPI_INTENSET_TXC;
    12de:	2202      	movs	r2, #2
    12e0:	751a      	strb	r2, [r3, #20]
	}

	return ERR_NONE;
}
    12e2:	2000      	movs	r0, #0
    12e4:	bd38      	pop	{r3, r4, r5, pc}
    12e6:	2000      	movs	r0, #0
    12e8:	e7f2      	b.n	12d0 <_spi_m_async_enable_tx_complete+0x10>
		hri_sercomspi_set_INTEN_TXC_bit(dev->prvt);
    12ea:	6823      	ldr	r3, [r4, #0]
	((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_TXC;
    12ec:	2202      	movs	r2, #2
    12ee:	759a      	strb	r2, [r3, #22]
    12f0:	e7f7      	b.n	12e2 <_spi_m_async_enable_tx_complete+0x22>
    12f2:	bf00      	nop
    12f4:	000035bc 	.word	0x000035bc
    12f8:	00000e21 	.word	0x00000e21

000012fc <_spi_m_async_write_one>:
{
	return _spi_m_async_enable_tx_complete(dev, state);
}

int32_t _spi_m_async_write_one(struct _spi_async_dev *dev, uint16_t data)
{
    12fc:	b538      	push	{r3, r4, r5, lr}
    12fe:	460d      	mov	r5, r1
	ASSERT(dev && dev->prvt);
    1300:	4604      	mov	r4, r0
    1302:	b160      	cbz	r0, 131e <_spi_m_async_write_one+0x22>
    1304:	6800      	ldr	r0, [r0, #0]
    1306:	3000      	adds	r0, #0
    1308:	bf18      	it	ne
    130a:	2001      	movne	r0, #1
    130c:	f640 323c 	movw	r2, #2876	; 0xb3c
    1310:	4904      	ldr	r1, [pc, #16]	; (1324 <_spi_m_async_write_one+0x28>)
    1312:	4b05      	ldr	r3, [pc, #20]	; (1328 <_spi_m_async_write_one+0x2c>)
    1314:	4798      	blx	r3

	hri_sercomspi_write_DATA_reg(dev->prvt, data);
    1316:	6823      	ldr	r3, [r4, #0]
	((Sercom *)hw)->SPI.DATA.reg = data;
    1318:	629d      	str	r5, [r3, #40]	; 0x28

	return ERR_NONE;
}
    131a:	2000      	movs	r0, #0
    131c:	bd38      	pop	{r3, r4, r5, pc}
    131e:	2000      	movs	r0, #0
    1320:	e7f4      	b.n	130c <_spi_m_async_write_one+0x10>
    1322:	bf00      	nop
    1324:	000035bc 	.word	0x000035bc
    1328:	00000e21 	.word	0x00000e21

0000132c <_spi_m_async_read_one>:

	return ERR_NONE;
}

uint16_t _spi_m_async_read_one(struct _spi_async_dev *dev)
{
    132c:	b510      	push	{r4, lr}
	ASSERT(dev && dev->prvt);
    132e:	4604      	mov	r4, r0
    1330:	b160      	cbz	r0, 134c <_spi_m_async_read_one+0x20>
    1332:	6800      	ldr	r0, [r0, #0]
    1334:	3000      	adds	r0, #0
    1336:	bf18      	it	ne
    1338:	2001      	movne	r0, #1
    133a:	f640 3257 	movw	r2, #2903	; 0xb57
    133e:	4904      	ldr	r1, [pc, #16]	; (1350 <_spi_m_async_read_one+0x24>)
    1340:	4b04      	ldr	r3, [pc, #16]	; (1354 <_spi_m_async_read_one+0x28>)
    1342:	4798      	blx	r3

	return hri_sercomspi_read_DATA_reg(dev->prvt);
    1344:	6823      	ldr	r3, [r4, #0]
	return ((Sercom *)hw)->SPI.DATA.reg;
    1346:	6a98      	ldr	r0, [r3, #40]	; 0x28
}
    1348:	b280      	uxth	r0, r0
    134a:	bd10      	pop	{r4, pc}
    134c:	2000      	movs	r0, #0
    134e:	e7f4      	b.n	133a <_spi_m_async_read_one+0xe>
    1350:	000035bc 	.word	0x000035bc
    1354:	00000e21 	.word	0x00000e21

00001358 <_spi_m_async_register_callback>:
	return hri_sercomspi_read_DATA_reg(dev->prvt);
}

int32_t _spi_m_async_register_callback(struct _spi_async_dev *dev, const enum _spi_async_dev_cb_type cb_type,
                                       const FUNC_PTR func)
{
    1358:	b570      	push	{r4, r5, r6, lr}
    135a:	460d      	mov	r5, r1
    135c:	4616      	mov	r6, r2
	typedef void (*func_t)(void);
	struct _spi_async_dev *spid = dev;

	ASSERT(dev && (cb_type < SPI_DEV_CB_N));
    135e:	4604      	mov	r4, r0
    1360:	b168      	cbz	r0, 137e <_spi_m_async_register_callback+0x26>
    1362:	2903      	cmp	r1, #3
    1364:	bf8c      	ite	hi
    1366:	2000      	movhi	r0, #0
    1368:	2001      	movls	r0, #1
    136a:	f44f 6237 	mov.w	r2, #2928	; 0xb70
    136e:	4905      	ldr	r1, [pc, #20]	; (1384 <_spi_m_async_register_callback+0x2c>)
    1370:	4b05      	ldr	r3, [pc, #20]	; (1388 <_spi_m_async_register_callback+0x30>)
    1372:	4798      	blx	r3

	func_t *p_ls  = (func_t *)&spid->callbacks;
	p_ls[cb_type] = (func_t)func;
    1374:	eb04 0485 	add.w	r4, r4, r5, lsl #2
    1378:	60a6      	str	r6, [r4, #8]

	return ERR_NONE;
}
    137a:	2000      	movs	r0, #0
    137c:	bd70      	pop	{r4, r5, r6, pc}
    137e:	2000      	movs	r0, #0
    1380:	e7f3      	b.n	136a <_spi_m_async_register_callback+0x12>
    1382:	bf00      	nop
    1384:	000035bc 	.word	0x000035bc
    1388:	00000e21 	.word	0x00000e21

0000138c <_delay_init>:
 * \brief Initialize system time module
 */
void _system_time_init(void *const hw)
{
	(void)hw;
	SysTick->LOAD = (0xFFFFFF << SysTick_LOAD_RELOAD_Pos);
    138c:	4b03      	ldr	r3, [pc, #12]	; (139c <_delay_init+0x10>)
    138e:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
    1392:	605a      	str	r2, [r3, #4]
	SysTick->CTRL = (1 << SysTick_CTRL_ENABLE_Pos) | (CONF_SYSTICK_TICKINT << SysTick_CTRL_TICKINT_Pos)
    1394:	2205      	movs	r2, #5
    1396:	601a      	str	r2, [r3, #0]
    1398:	4770      	bx	lr
    139a:	bf00      	nop
    139c:	e000e010 	.word	0xe000e010

000013a0 <_delay_cycles>:
 * \brief Delay loop to delay n number of cycles
 */
void _delay_cycles(void *const hw, uint32_t cycles)
{
	(void)hw;
	uint8_t  n   = cycles >> 24;
    13a0:	0e0b      	lsrs	r3, r1, #24
	uint32_t buf = cycles;

	while (n--) {
    13a2:	b303      	cbz	r3, 13e6 <_delay_cycles+0x46>
{
    13a4:	b430      	push	{r4, r5}
    13a6:	1e5d      	subs	r5, r3, #1
    13a8:	b2ed      	uxtb	r5, r5
	while (n--) {
    13aa:	4628      	mov	r0, r5
		SysTick->LOAD = 0xFFFFFF;
    13ac:	4a12      	ldr	r2, [pc, #72]	; (13f8 <_delay_cycles+0x58>)
    13ae:	f06f 447f 	mvn.w	r4, #4278190080	; 0xff000000
    13b2:	6054      	str	r4, [r2, #4]
		SysTick->VAL  = 0xFFFFFF;
    13b4:	6094      	str	r4, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    13b6:	6813      	ldr	r3, [r2, #0]
    13b8:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    13bc:	d0fb      	beq.n	13b6 <_delay_cycles+0x16>
	while (n--) {
    13be:	3801      	subs	r0, #1
    13c0:	b2c0      	uxtb	r0, r0
    13c2:	28ff      	cmp	r0, #255	; 0xff
    13c4:	d1f5      	bne.n	13b2 <_delay_cycles+0x12>
    13c6:	eba5 6505 	sub.w	r5, r5, r5, lsl #24
    13ca:	f101 417f 	add.w	r1, r1, #4278190080	; 0xff000000
    13ce:	3101      	adds	r1, #1
    13d0:	4429      	add	r1, r5
			;
		buf -= 0xFFFFFF;
	}

	SysTick->LOAD = buf;
    13d2:	4b09      	ldr	r3, [pc, #36]	; (13f8 <_delay_cycles+0x58>)
    13d4:	6059      	str	r1, [r3, #4]
	SysTick->VAL  = buf;
    13d6:	6099      	str	r1, [r3, #8]
	while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    13d8:	461a      	mov	r2, r3
    13da:	6813      	ldr	r3, [r2, #0]
    13dc:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    13e0:	d0fb      	beq.n	13da <_delay_cycles+0x3a>
		;
}
    13e2:	bc30      	pop	{r4, r5}
    13e4:	4770      	bx	lr
	SysTick->LOAD = buf;
    13e6:	4b04      	ldr	r3, [pc, #16]	; (13f8 <_delay_cycles+0x58>)
    13e8:	6059      	str	r1, [r3, #4]
	SysTick->VAL  = buf;
    13ea:	6099      	str	r1, [r3, #8]
	while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    13ec:	461a      	mov	r2, r3
    13ee:	6813      	ldr	r3, [r2, #0]
    13f0:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    13f4:	d0fb      	beq.n	13ee <_delay_cycles+0x4e>
    13f6:	4770      	bx	lr
    13f8:	e000e010 	.word	0xe000e010

000013fc <_dummy_func_no_return>:
static bool _dummy_func_no_return(uint32_t unused0, uint32_t unused1)
{
	(void)unused0;
	(void)unused1;
	return false;
}
    13fc:	2000      	movs	r0, #0
    13fe:	4770      	bx	lr

00001400 <_usb_d_dev_handle_setup>:
/**
 * \brief Handles setup received interrupt
 * \param[in] ept Pointer to endpoint information.
 */
static void _usb_d_dev_handle_setup(struct _usb_d_dev_ep *ept)
{
    1400:	b538      	push	{r3, r4, r5, lr}
	uint8_t epn     = USB_EP_GET_N(ept->ep);
    1402:	7c83      	ldrb	r3, [r0, #18]
    1404:	f003 030f 	and.w	r3, r3, #15
	bool    is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    1408:	7cc2      	ldrb	r2, [r0, #19]

	if (!is_ctrl) {
    140a:	f002 0107 	and.w	r1, r2, #7
    140e:	2901      	cmp	r1, #1
    1410:	d00b      	beq.n	142a <_usb_d_dev_handle_setup+0x2a>
}

static inline void hri_usbendpoint_clear_EPINTFLAG_reg(const void *const hw, uint8_t submodule_index,
                                                       hri_usbendpoint_epintflag_reg_t mask)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    1412:	015a      	lsls	r2, r3, #5
    1414:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    1418:	2110      	movs	r1, #16
    141a:	f882 1107 	strb.w	r1, [r2, #263]	; 0x107
	}
}

static inline void hri_usbendpoint_clear_EPINTEN_RXSTP_bit(const void *const hw, uint8_t submodule_index)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = USB_DEVICE_EPINTENSET_RXSTP;
    141e:	015b      	lsls	r3, r3, #5
    1420:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    1424:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
    1428:	bd38      	pop	{r3, r4, r5, pc}
	}
	/* Control transfer:
	 * SETUP transaction will terminate IN/OUT transaction,
	 * and start new transaction with received SETUP packet.
	 */
	if (_usb_d_dev_ep_is_busy(ept)) {
    142a:	f012 0f40 	tst.w	r2, #64	; 0x40
    142e:	d00c      	beq.n	144a <_usb_d_dev_handle_setup+0x4a>
		ept->flags.bits.is_busy = 0;
    1430:	7cc2      	ldrb	r2, [r0, #19]
    1432:	f36f 1286 	bfc	r2, #6, #1
    1436:	74c2      	strb	r2, [r0, #19]
    1438:	015a      	lsls	r2, r3, #5
    143a:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    143e:	2180      	movs	r1, #128	; 0x80
    1440:	f882 1104 	strb.w	r1, [r2, #260]	; 0x104
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    1444:	2140      	movs	r1, #64	; 0x40
    1446:	f882 1105 	strb.w	r1, [r2, #261]	; 0x105

		/* Stop transfer on either direction. */
		_usbd_ep_set_in_rdy(epn, 1, false);
		_usbd_ep_set_out_rdy(epn, 0, false);
	}
	ept->flags.bits.is_stalled = 0;
    144a:	7cc2      	ldrb	r2, [r0, #19]
    144c:	f36f 02c3 	bfc	r2, #3, #1
    1450:	74c2      	strb	r2, [r0, #19]
	bank->STATUS_BK.reg     = 0;
    1452:	4909      	ldr	r1, [pc, #36]	; (1478 <_usb_d_dev_handle_setup+0x78>)
    1454:	015a      	lsls	r2, r3, #5
    1456:	188c      	adds	r4, r1, r2
    1458:	2500      	movs	r5, #0
    145a:	72a5      	strb	r5, [r4, #10]
    145c:	76a5      	strb	r5, [r4, #26]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    145e:	f102 4382 	add.w	r3, r2, #1090519040	; 0x41000000
    1462:	246f      	movs	r4, #111	; 0x6f
    1464:	f883 4107 	strb.w	r4, [r3, #263]	; 0x107
}

static inline void hri_usbendpoint_clear_EPINTEN_reg(const void *const hw, uint8_t submodule_index,
                                                     hri_usbendpoint_epintenset_reg_t mask)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    1468:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    146c:	f882 4108 	strb.w	r4, [r2, #264]	; 0x108
	_usbd_ep_clear_bank_status(epn, 0);
	_usbd_ep_clear_bank_status(epn, 1);
	_usbd_ep_int_ack(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
	_usbd_ep_int_dis(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
	/* Invoke callback. */
	dev_inst.ep_callbacks.setup(ept->ep);
    1470:	6e8b      	ldr	r3, [r1, #104]	; 0x68
    1472:	7c80      	ldrb	r0, [r0, #18]
    1474:	4798      	blx	r3
    1476:	bd38      	pop	{r3, r4, r5, pc}
    1478:	200005a8 	.word	0x200005a8

0000147c <_usb_d_dev_handle_stall>:
 * \brief Handles stall sent interrupt
 * \param[in] ept Pointer to endpoint information.
 * \param[in] bank_n Bank number.
 */
static void _usb_d_dev_handle_stall(struct _usb_d_dev_ep *ept, const uint8_t bank_n)
{
    147c:	b508      	push	{r3, lr}
		_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
    147e:	2320      	movs	r3, #32
    1480:	fa03 f101 	lsl.w	r1, r3, r1
	hri_usbendpoint_clear_EPINTEN_reg(USB, epn, flags);
    1484:	b2c9      	uxtb	r1, r1
	uint8_t epn = USB_EP_GET_N(ept->ep);
    1486:	7c83      	ldrb	r3, [r0, #18]
    1488:	f003 030f 	and.w	r3, r3, #15
    148c:	015b      	lsls	r3, r3, #5
    148e:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    1492:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
	/* Clear interrupt enable. Leave status there for status check. */
	_usbd_ep_int_stall_en(epn, bank_n, false);
	dev_inst.ep_callbacks.done(ept->ep, USB_TRANS_STALL, ept->trans_count);
    1496:	4b03      	ldr	r3, [pc, #12]	; (14a4 <_usb_d_dev_handle_stall+0x28>)
    1498:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    149a:	6882      	ldr	r2, [r0, #8]
    149c:	2101      	movs	r1, #1
    149e:	7c80      	ldrb	r0, [r0, #18]
    14a0:	4798      	blx	r3
    14a2:	bd08      	pop	{r3, pc}
    14a4:	200005a8 	.word	0x200005a8

000014a8 <_usb_d_dev_trans_done>:
 *  \brief Finish the transaction and invoke callback
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_done(struct _usb_d_dev_ep *ept, const int32_t code)
{
    14a8:	b538      	push	{r3, r4, r5, lr}
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    14aa:	7c84      	ldrb	r4, [r0, #18]
    14ac:	2cff      	cmp	r4, #255	; 0xff
    14ae:	d003      	beq.n	14b8 <_usb_d_dev_trans_done+0x10>
    14b0:	7cc3      	ldrb	r3, [r0, #19]
    14b2:	f013 0f40 	tst.w	r3, #64	; 0x40
    14b6:	d100      	bne.n	14ba <_usb_d_dev_trans_done+0x12>
    14b8:	bd38      	pop	{r3, r4, r5, pc}
		return;
	}
	ept->flags.bits.is_busy = 0;
    14ba:	7cc2      	ldrb	r2, [r0, #19]
    14bc:	f36f 1286 	bfc	r2, #6, #1
    14c0:	74c2      	strb	r2, [r0, #19]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
    14c2:	4a03      	ldr	r2, [pc, #12]	; (14d0 <_usb_d_dev_trans_done+0x28>)
    14c4:	6f15      	ldr	r5, [r2, #112]	; 0x70
    14c6:	6882      	ldr	r2, [r0, #8]
    14c8:	4620      	mov	r0, r4
    14ca:	47a8      	blx	r5
    14cc:	e7f4      	b.n	14b8 <_usb_d_dev_trans_done+0x10>
    14ce:	bf00      	nop
    14d0:	200005a8 	.word	0x200005a8

000014d4 <_usb_d_dev_trans_stop>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_stop(struct _usb_d_dev_ep *ept, bool dir, const int32_t code)
{
    14d4:	b530      	push	{r4, r5, lr}
    14d6:	b083      	sub	sp, #12
	uint8_t epn = USB_EP_GET_N(ept->ep);
    14d8:	7c83      	ldrb	r3, [r0, #18]
	;
	const uint8_t intflags[2] = {USB_D_BANK0_INT_FLAGS, USB_D_BANK1_INT_FLAGS};
    14da:	2425      	movs	r4, #37	; 0x25
    14dc:	f88d 4004 	strb.w	r4, [sp, #4]
    14e0:	244a      	movs	r4, #74	; 0x4a
    14e2:	f88d 4005 	strb.w	r4, [sp, #5]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    14e6:	2bff      	cmp	r3, #255	; 0xff
    14e8:	d01e      	beq.n	1528 <_usb_d_dev_trans_stop+0x54>
    14ea:	7cc4      	ldrb	r4, [r0, #19]
    14ec:	f014 0f40 	tst.w	r4, #64	; 0x40
    14f0:	d01a      	beq.n	1528 <_usb_d_dev_trans_stop+0x54>
	uint8_t epn = USB_EP_GET_N(ept->ep);
    14f2:	f003 040f 	and.w	r4, r3, #15
		return;
	}
	/* Stop transfer */
	if (dir) {
    14f6:	b1c9      	cbz	r1, 152c <_usb_d_dev_trans_stop+0x58>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    14f8:	0163      	lsls	r3, r4, #5
    14fa:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    14fe:	2580      	movs	r5, #128	; 0x80
    1500:	f883 5104 	strb.w	r5, [r3, #260]	; 0x104
    1504:	460b      	mov	r3, r1
		_usbd_ep_set_in_rdy(epn, 1, false);
	} else {
		/* NAK OUT */
		_usbd_ep_set_out_rdy(epn, 0, false);
	}
	_usbd_ep_int_ack(epn, intflags[dir]);
    1506:	a902      	add	r1, sp, #8
    1508:	440b      	add	r3, r1
    150a:	f813 1c04 	ldrb.w	r1, [r3, #-4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    150e:	0163      	lsls	r3, r4, #5
    1510:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    1514:	f883 1107 	strb.w	r1, [r3, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    1518:	0163      	lsls	r3, r4, #5
    151a:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    151e:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
	_usbd_ep_int_dis(epn, intflags[dir]);
	_usb_d_dev_trans_done(ept, code);
    1522:	4611      	mov	r1, r2
    1524:	4b05      	ldr	r3, [pc, #20]	; (153c <_usb_d_dev_trans_stop+0x68>)
    1526:	4798      	blx	r3
}
    1528:	b003      	add	sp, #12
    152a:	bd30      	pop	{r4, r5, pc}
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    152c:	0163      	lsls	r3, r4, #5
    152e:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    1532:	2540      	movs	r5, #64	; 0x40
    1534:	f883 5105 	strb.w	r5, [r3, #261]	; 0x105
    1538:	e7e4      	b.n	1504 <_usb_d_dev_trans_stop+0x30>
    153a:	bf00      	nop
    153c:	000014a9 	.word	0x000014a9

00001540 <_usb_d_dev_handle_trfail>:
{
    1540:	b530      	push	{r4, r5, lr}
    1542:	b083      	sub	sp, #12
	uint8_t            epn     = USB_EP_GET_N(ept->ep);
    1544:	7c83      	ldrb	r3, [r0, #18]
    1546:	f003 030f 	and.w	r3, r3, #15
	const uint8_t      fail[2] = {USB_DEVICE_EPINTFLAG_TRFAIL0, USB_DEVICE_EPINTFLAG_TRFAIL1};
    154a:	2204      	movs	r2, #4
    154c:	f88d 2004 	strb.w	r2, [sp, #4]
    1550:	2208      	movs	r2, #8
    1552:	f88d 2005 	strb.w	r2, [sp, #5]
    1556:	015a      	lsls	r2, r3, #5
	uint8_t            eptype
    1558:	460c      	mov	r4, r1
    155a:	b391      	cbz	r1, 15c2 <_usb_d_dev_handle_trfail+0x82>

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_EPTYPE1_bf(const void *const hw,
                                                                                uint8_t           submodule_index)
{
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    155c:	f102 4182 	add.w	r1, r2, #1090519040	; 0x41000000
    1560:	f891 5100 	ldrb.w	r5, [r1, #256]	; 0x100
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE1_Msk) >> USB_DEVICE_EPCFG_EPTYPE1_Pos;
    1564:	f3c5 1502 	ubfx	r5, r5, #4, #3
	st.reg = bank[bank_n].STATUS_BK.reg;
    1568:	eb02 1104 	add.w	r1, r2, r4, lsl #4
    156c:	4a32      	ldr	r2, [pc, #200]	; (1638 <_usb_d_dev_handle_trfail+0xf8>)
    156e:	440a      	add	r2, r1
    1570:	7a91      	ldrb	r1, [r2, #10]
    1572:	b2c9      	uxtb	r1, r1
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
    1574:	2d02      	cmp	r5, #2
    1576:	d02c      	beq.n	15d2 <_usb_d_dev_handle_trfail+0x92>
	} else if (st.bit.ERRORFLOW) {
    1578:	f011 0f02 	tst.w	r1, #2
    157c:	d045      	beq.n	160a <_usb_d_dev_handle_trfail+0xca>
	bool                      is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    157e:	7cc5      	ldrb	r5, [r0, #19]
		bank[bank_n].STATUS_BK.bit.ERRORFLOW = 0;
    1580:	7a91      	ldrb	r1, [r2, #10]
    1582:	f36f 0141 	bfc	r1, #1, #1
    1586:	7291      	strb	r1, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    1588:	aa02      	add	r2, sp, #8
    158a:	4422      	add	r2, r4
    158c:	f812 1c04 	ldrb.w	r1, [r2, #-4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    1590:	015a      	lsls	r2, r3, #5
    1592:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    1596:	f882 1107 	strb.w	r1, [r2, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    159a:	015b      	lsls	r3, r3, #5
    159c:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    15a0:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
		if (is_ctrl && _usb_d_dev_ep_is_busy(ept)) {
    15a4:	f005 0307 	and.w	r3, r5, #7
    15a8:	2b01      	cmp	r3, #1
    15aa:	d143      	bne.n	1634 <_usb_d_dev_handle_trfail+0xf4>
    15ac:	7cc3      	ldrb	r3, [r0, #19]
    15ae:	f013 0f40 	tst.w	r3, #64	; 0x40
    15b2:	d03f      	beq.n	1634 <_usb_d_dev_handle_trfail+0xf4>
			if (bank_n != _usb_d_dev_ep_is_in(ept)) {
    15b4:	09d9      	lsrs	r1, r3, #7
    15b6:	428c      	cmp	r4, r1
    15b8:	d03c      	beq.n	1634 <_usb_d_dev_handle_trfail+0xf4>
				_usb_d_dev_trans_stop(ept, _usb_d_dev_ep_is_in(ept), USB_TRANS_DONE);
    15ba:	2200      	movs	r2, #0
    15bc:	4b1f      	ldr	r3, [pc, #124]	; (163c <_usb_d_dev_handle_trfail+0xfc>)
    15be:	4798      	blx	r3
    15c0:	e038      	b.n	1634 <_usb_d_dev_handle_trfail+0xf4>
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    15c2:	0159      	lsls	r1, r3, #5
    15c4:	f101 4182 	add.w	r1, r1, #1090519040	; 0x41000000
    15c8:	f891 5100 	ldrb.w	r5, [r1, #256]	; 0x100
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE0_Msk) >> USB_DEVICE_EPCFG_EPTYPE0_Pos;
    15cc:	f005 0507 	and.w	r5, r5, #7
    15d0:	e7ca      	b.n	1568 <_usb_d_dev_handle_trfail+0x28>
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
    15d2:	f011 0f01 	tst.w	r1, #1
    15d6:	d0cf      	beq.n	1578 <_usb_d_dev_handle_trfail+0x38>
		bank[bank_n].STATUS_BK.bit.CRCERR = 0;
    15d8:	7a91      	ldrb	r1, [r2, #10]
    15da:	f36f 0100 	bfc	r1, #0, #1
    15de:	7291      	strb	r1, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    15e0:	aa02      	add	r2, sp, #8
    15e2:	4422      	add	r2, r4
    15e4:	f812 1c04 	ldrb.w	r1, [r2, #-4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    15e8:	015a      	lsls	r2, r3, #5
    15ea:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    15ee:	f882 1107 	strb.w	r1, [r2, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    15f2:	015b      	lsls	r3, r3, #5
    15f4:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    15f8:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
		_usb_d_dev_trans_stop(ept, bank_n, USB_TRANS_ERROR);
    15fc:	2204      	movs	r2, #4
    15fe:	1c21      	adds	r1, r4, #0
    1600:	bf18      	it	ne
    1602:	2101      	movne	r1, #1
    1604:	4b0d      	ldr	r3, [pc, #52]	; (163c <_usb_d_dev_handle_trfail+0xfc>)
    1606:	4798      	blx	r3
    1608:	e014      	b.n	1634 <_usb_d_dev_handle_trfail+0xf4>
	bank->STATUS_BK.reg     = 0;
    160a:	eb04 0143 	add.w	r1, r4, r3, lsl #1
    160e:	4a0a      	ldr	r2, [pc, #40]	; (1638 <_usb_d_dev_handle_trfail+0xf8>)
    1610:	eb02 1201 	add.w	r2, r2, r1, lsl #4
    1614:	2100      	movs	r1, #0
    1616:	7291      	strb	r1, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    1618:	aa02      	add	r2, sp, #8
    161a:	4414      	add	r4, r2
    161c:	f814 1c04 	ldrb.w	r1, [r4, #-4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    1620:	015a      	lsls	r2, r3, #5
    1622:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    1626:	f882 1107 	strb.w	r1, [r2, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    162a:	015b      	lsls	r3, r3, #5
    162c:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    1630:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
}
    1634:	b003      	add	sp, #12
    1636:	bd30      	pop	{r4, r5, pc}
    1638:	200005a8 	.word	0x200005a8
    163c:	000014d5 	.word	0x000014d5

00001640 <_usb_d_dev_reset_epts>:
{
    1640:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1644:	4d0c      	ldr	r5, [pc, #48]	; (1678 <_usb_d_dev_reset_epts+0x38>)
    1646:	f105 0474 	add.w	r4, r5, #116	; 0x74
    164a:	f505 7594 	add.w	r5, r5, #296	; 0x128
		_usb_d_dev_trans_done(&dev_inst.ep[i], USB_TRANS_RESET);
    164e:	f04f 0803 	mov.w	r8, #3
    1652:	4f0a      	ldr	r7, [pc, #40]	; (167c <_usb_d_dev_reset_epts+0x3c>)
		dev_inst.ep[i].ep       = 0xFF;
    1654:	26ff      	movs	r6, #255	; 0xff
		_usb_d_dev_trans_done(&dev_inst.ep[i], USB_TRANS_RESET);
    1656:	4641      	mov	r1, r8
    1658:	4620      	mov	r0, r4
    165a:	47b8      	blx	r7
		dev_inst.ep[i].ep       = 0xFF;
    165c:	74a6      	strb	r6, [r4, #18]
		dev_inst.ep[i].flags.u8 = 0;
    165e:	2300      	movs	r3, #0
    1660:	74e3      	strb	r3, [r4, #19]
    1662:	3414      	adds	r4, #20
	for (i = 0; i < USB_D_N_EP; i++) {
    1664:	42ac      	cmp	r4, r5
    1666:	d1f6      	bne.n	1656 <_usb_d_dev_reset_epts+0x16>
	memset(prvt_inst.desc_table, 0, sizeof(UsbDeviceDescriptor) * (CONF_USB_D_MAX_EP_N + 1));
    1668:	2260      	movs	r2, #96	; 0x60
    166a:	4619      	mov	r1, r3
    166c:	4802      	ldr	r0, [pc, #8]	; (1678 <_usb_d_dev_reset_epts+0x38>)
    166e:	4b04      	ldr	r3, [pc, #16]	; (1680 <_usb_d_dev_reset_epts+0x40>)
    1670:	4798      	blx	r3
    1672:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1676:	bf00      	nop
    1678:	200005a8 	.word	0x200005a8
    167c:	000014a9 	.word	0x000014a9
    1680:	000033a9 	.word	0x000033a9

00001684 <_usb_d_dev_in_next>:
{
    1684:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1688:	4605      	mov	r5, r0
	uint8_t            epn         = USB_EP_GET_N(ept->ep);
    168a:	7c84      	ldrb	r4, [r0, #18]
    168c:	f004 040f 	and.w	r4, r4, #15
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
    1690:	4688      	mov	r8, r1
    1692:	2900      	cmp	r1, #0
    1694:	f000 809f 	beq.w	17d6 <_usb_d_dev_in_next+0x152>
	UsbDeviceDescBank *bank        = &prvt_inst.desc_table[epn].DeviceDescBank[0];
    1698:	4b58      	ldr	r3, [pc, #352]	; (17fc <_usb_d_dev_in_next+0x178>)
    169a:	eb03 1344 	add.w	r3, r3, r4, lsl #5
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
    169e:	6958      	ldr	r0, [r3, #20]
    16a0:	f3c0 0e0d 	ubfx	lr, r0, #0, #14
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    16a4:	8a2b      	ldrh	r3, [r5, #16]
    16a6:	f240 32ff 	movw	r2, #1023	; 0x3ff
    16aa:	4293      	cmp	r3, r2
    16ac:	f000 808d 	beq.w	17ca <_usb_d_dev_in_next+0x146>
    16b0:	3b01      	subs	r3, #1
    16b2:	b298      	uxth	r0, r3
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    16b4:	7cef      	ldrb	r7, [r5, #19]
    16b6:	f007 0707 	and.w	r7, r7, #7
	if (isr) {
    16ba:	f1b8 0f00 	cmp.w	r8, #0
    16be:	d005      	beq.n	16cc <_usb_d_dev_in_next+0x48>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    16c0:	0162      	lsls	r2, r4, #5
    16c2:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    16c6:	2302      	movs	r3, #2
    16c8:	f882 3107 	strb.w	r3, [r2, #263]	; 0x107
	ept->trans_count += trans_count;
    16cc:	68a9      	ldr	r1, [r5, #8]
    16ce:	eb0e 0301 	add.w	r3, lr, r1
    16d2:	60ab      	str	r3, [r5, #8]
	if (ept->trans_count < ept->trans_size) {
    16d4:	686e      	ldr	r6, [r5, #4]
    16d6:	42b3      	cmp	r3, r6
    16d8:	d23f      	bcs.n	175a <_usb_d_dev_in_next+0xd6>
		trans_next = ept->trans_size - ept->trans_count;
    16da:	1af6      	subs	r6, r6, r3
    16dc:	b2b6      	uxth	r6, r6
		if (ept->flags.bits.use_cache) {
    16de:	7cea      	ldrb	r2, [r5, #19]
    16e0:	f012 0f20 	tst.w	r2, #32
    16e4:	d02d      	beq.n	1742 <_usb_d_dev_in_next+0xbe>
    16e6:	8a2a      	ldrh	r2, [r5, #16]
    16e8:	4296      	cmp	r6, r2
    16ea:	bf28      	it	cs
    16ec:	4616      	movcs	r6, r2
			memcpy(ept->cache, &ept->trans_buf[ept->trans_count], trans_next);
    16ee:	6829      	ldr	r1, [r5, #0]
    16f0:	4632      	mov	r2, r6
    16f2:	4419      	add	r1, r3
    16f4:	68e8      	ldr	r0, [r5, #12]
    16f6:	4b42      	ldr	r3, [pc, #264]	; (1800 <_usb_d_dev_in_next+0x17c>)
    16f8:	4798      	blx	r3
			_usbd_ep_set_buf(epn, 1, (uint32_t)ept->cache);
    16fa:	68ea      	ldr	r2, [r5, #12]
	bank->ADDR.reg          = addr;
    16fc:	4b3f      	ldr	r3, [pc, #252]	; (17fc <_usb_d_dev_in_next+0x178>)
    16fe:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    1702:	611a      	str	r2, [r3, #16]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
    1704:	4b3d      	ldr	r3, [pc, #244]	; (17fc <_usb_d_dev_in_next+0x178>)
    1706:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    170a:	695a      	ldr	r2, [r3, #20]
    170c:	f366 020d 	bfi	r2, r6, #0, #14
    1710:	615a      	str	r2, [r3, #20]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
    1712:	695a      	ldr	r2, [r3, #20]
    1714:	f36f 329b 	bfc	r2, #14, #14
    1718:	615a      	str	r2, [r3, #20]
	if (!isr) {
    171a:	f1b8 0f00 	cmp.w	r8, #0
    171e:	d108      	bne.n	1732 <_usb_d_dev_in_next+0xae>
			inten = USB_D_BANK1_INT_FLAGS;
    1720:	2f01      	cmp	r7, #1
    1722:	bf0c      	ite	eq
    1724:	224e      	moveq	r2, #78	; 0x4e
    1726:	224a      	movne	r2, #74	; 0x4a
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    1728:	0163      	lsls	r3, r4, #5
    172a:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    172e:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    1732:	0164      	lsls	r4, r4, #5
    1734:	f104 4482 	add.w	r4, r4, #1090519040	; 0x41000000
    1738:	2380      	movs	r3, #128	; 0x80
    173a:	f884 3105 	strb.w	r3, [r4, #261]	; 0x105
    173e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1742:	f5b6 5f00 	cmp.w	r6, #8192	; 0x2000
    1746:	bf28      	it	cs
    1748:	f44f 5600 	movcs.w	r6, #8192	; 0x2000
			_usbd_ep_set_buf(epn, 1, (uint32_t)&ept->trans_buf[ept->trans_count]);
    174c:	6829      	ldr	r1, [r5, #0]
    174e:	440b      	add	r3, r1
	bank->ADDR.reg          = addr;
    1750:	4a2a      	ldr	r2, [pc, #168]	; (17fc <_usb_d_dev_in_next+0x178>)
    1752:	eb02 1244 	add.w	r2, r2, r4, lsl #5
    1756:	6113      	str	r3, [r2, #16]
    1758:	e7d4      	b.n	1704 <_usb_d_dev_in_next+0x80>
	} else if (ept->flags.bits.need_zlp) {
    175a:	7ceb      	ldrb	r3, [r5, #19]
    175c:	f013 0f10 	tst.w	r3, #16
    1760:	d00f      	beq.n	1782 <_usb_d_dev_in_next+0xfe>
		ept->flags.bits.need_zlp = 0;
    1762:	7ceb      	ldrb	r3, [r5, #19]
    1764:	f36f 1304 	bfc	r3, #4, #1
    1768:	74eb      	strb	r3, [r5, #19]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
    176a:	4b24      	ldr	r3, [pc, #144]	; (17fc <_usb_d_dev_in_next+0x178>)
    176c:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    1770:	695a      	ldr	r2, [r3, #20]
    1772:	f36f 020d 	bfc	r2, #0, #14
    1776:	615a      	str	r2, [r3, #20]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
    1778:	695a      	ldr	r2, [r3, #20]
    177a:	f36f 329b 	bfc	r2, #14, #14
    177e:	615a      	str	r2, [r3, #20]
    1780:	e7cb      	b.n	171a <_usb_d_dev_in_next+0x96>
	if (is_ctrl) {
    1782:	2f01      	cmp	r7, #1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    1784:	ea4f 1444 	mov.w	r4, r4, lsl #5
    1788:	f104 4482 	add.w	r4, r4, #1090519040	; 0x41000000
    178c:	bf0c      	ite	eq
    178e:	234b      	moveq	r3, #75	; 0x4b
    1790:	234a      	movne	r3, #74	; 0x4a
    1792:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
	if (last_pkt == ept->size) {
    1796:	8a2a      	ldrh	r2, [r5, #16]
    1798:	ea00 030e 	and.w	r3, r0, lr
    179c:	429a      	cmp	r2, r3
    179e:	d005      	beq.n	17ac <_usb_d_dev_in_next+0x128>
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    17a0:	2100      	movs	r1, #0
    17a2:	4628      	mov	r0, r5
    17a4:	4b17      	ldr	r3, [pc, #92]	; (1804 <_usb_d_dev_in_next+0x180>)
    17a6:	4798      	blx	r3
	return;
    17a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ept->flags.bits.is_busy = 0;
    17ac:	7ceb      	ldrb	r3, [r5, #19]
    17ae:	f36f 1386 	bfc	r3, #6, #1
    17b2:	74eb      	strb	r3, [r5, #19]
		if (dev_inst.ep_callbacks.more(ept->ep, ept->trans_count)) {
    17b4:	4b11      	ldr	r3, [pc, #68]	; (17fc <_usb_d_dev_in_next+0x178>)
    17b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
    17b8:	68a9      	ldr	r1, [r5, #8]
    17ba:	7ca8      	ldrb	r0, [r5, #18]
    17bc:	4798      	blx	r3
    17be:	b9d0      	cbnz	r0, 17f6 <_usb_d_dev_in_next+0x172>
		ept->flags.bits.is_busy = 1;
    17c0:	7ceb      	ldrb	r3, [r5, #19]
    17c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    17c6:	74eb      	strb	r3, [r5, #19]
    17c8:	e7ea      	b.n	17a0 <_usb_d_dev_in_next+0x11c>
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    17ca:	7cef      	ldrb	r7, [r5, #19]
    17cc:	f007 0707 	and.w	r7, r7, #7
    17d0:	f240 30ff 	movw	r0, #1023	; 0x3ff
    17d4:	e774      	b.n	16c0 <_usb_d_dev_in_next+0x3c>
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    17d6:	8a03      	ldrh	r3, [r0, #16]
    17d8:	f240 32ff 	movw	r2, #1023	; 0x3ff
    17dc:	4293      	cmp	r3, r2
    17de:	d107      	bne.n	17f0 <_usb_d_dev_in_next+0x16c>
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    17e0:	7cef      	ldrb	r7, [r5, #19]
    17e2:	f007 0707 	and.w	r7, r7, #7
    17e6:	f04f 0e00 	mov.w	lr, #0
    17ea:	f240 30ff 	movw	r0, #1023	; 0x3ff
    17ee:	e76d      	b.n	16cc <_usb_d_dev_in_next+0x48>
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    17f0:	f04f 0e00 	mov.w	lr, #0
    17f4:	e75c      	b.n	16b0 <_usb_d_dev_in_next+0x2c>
    17f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    17fa:	bf00      	nop
    17fc:	200005a8 	.word	0x200005a8
    1800:	00003275 	.word	0x00003275
    1804:	000014a9 	.word	0x000014a9

00001808 <_usb_d_dev_out_next>:
{
    1808:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    180c:	4604      	mov	r4, r0
	uint8_t            epn        = USB_EP_GET_N(ept->ep);
    180e:	7c85      	ldrb	r5, [r0, #18]
    1810:	f005 050f 	and.w	r5, r5, #15
	uint16_t           trans_size = isr ? bank->PCKSIZE.bit.MULTI_PACKET_SIZE : 0;
    1814:	4689      	mov	r9, r1
    1816:	2900      	cmp	r1, #0
    1818:	d056      	beq.n	18c8 <_usb_d_dev_out_next+0xc0>
    181a:	4b74      	ldr	r3, [pc, #464]	; (19ec <_usb_d_dev_out_next+0x1e4>)
    181c:	eb03 1345 	add.w	r3, r3, r5, lsl #5
    1820:	685a      	ldr	r2, [r3, #4]
    1822:	f3c2 3a8d 	ubfx	sl, r2, #14, #14
	uint16_t           last_trans = isr ? bank->PCKSIZE.bit.BYTE_COUNT : 0;
    1826:	685f      	ldr	r7, [r3, #4]
    1828:	f3c7 070d 	ubfx	r7, r7, #0, #14
    182c:	46bb      	mov	fp, r7
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
    182e:	8a06      	ldrh	r6, [r0, #16]
    1830:	f240 33ff 	movw	r3, #1023	; 0x3ff
    1834:	429e      	cmp	r6, r3
    1836:	f000 80ba 	beq.w	19ae <_usb_d_dev_out_next+0x1a6>
    183a:	3e01      	subs	r6, #1
    183c:	b2b6      	uxth	r6, r6
	uint16_t           last_pkt   = last_trans & size_mask;
    183e:	ea06 070b 	and.w	r7, r6, fp
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    1842:	f894 8013 	ldrb.w	r8, [r4, #19]
    1846:	f008 0807 	and.w	r8, r8, #7
	if (isr) {
    184a:	f1b9 0f00 	cmp.w	r9, #0
    184e:	d005      	beq.n	185c <_usb_d_dev_out_next+0x54>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    1850:	016b      	lsls	r3, r5, #5
    1852:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    1856:	2201      	movs	r2, #1
    1858:	f883 2107 	strb.w	r2, [r3, #263]	; 0x107
	if (ept->flags.bits.use_cache && ept->trans_size) {
    185c:	7ce3      	ldrb	r3, [r4, #19]
    185e:	f013 0f20 	tst.w	r3, #32
    1862:	d00d      	beq.n	1880 <_usb_d_dev_out_next+0x78>
    1864:	6862      	ldr	r2, [r4, #4]
    1866:	2a00      	cmp	r2, #0
    1868:	d037      	beq.n	18da <_usb_d_dev_out_next+0xd2>
		uint16_t buf_remain = ept->trans_size - ept->trans_count;
    186a:	68a0      	ldr	r0, [r4, #8]
    186c:	1a12      	subs	r2, r2, r0
    186e:	b292      	uxth	r2, r2
		memcpy(&ept->trans_buf[ept->trans_count], ept->cache, (buf_remain > last_pkt) ? last_pkt : buf_remain);
    1870:	6823      	ldr	r3, [r4, #0]
    1872:	42ba      	cmp	r2, r7
    1874:	bf28      	it	cs
    1876:	463a      	movcs	r2, r7
    1878:	68e1      	ldr	r1, [r4, #12]
    187a:	4418      	add	r0, r3
    187c:	4b5c      	ldr	r3, [pc, #368]	; (19f0 <_usb_d_dev_out_next+0x1e8>)
    187e:	4798      	blx	r3
	if (ept->trans_size == 0 && ept->flags.bits.need_zlp) {
    1880:	6863      	ldr	r3, [r4, #4]
    1882:	b353      	cbz	r3, 18da <_usb_d_dev_out_next+0xd2>
	} else if (isr && last_pkt < ept->size) {
    1884:	f1b9 0f00 	cmp.w	r9, #0
    1888:	d040      	beq.n	190c <_usb_d_dev_out_next+0x104>
    188a:	8a22      	ldrh	r2, [r4, #16]
    188c:	42ba      	cmp	r2, r7
    188e:	d93d      	bls.n	190c <_usb_d_dev_out_next+0x104>
		ept->flags.bits.need_zlp = 0;
    1890:	7ce3      	ldrb	r3, [r4, #19]
    1892:	f36f 1304 	bfc	r3, #4, #1
    1896:	74e3      	strb	r3, [r4, #19]
		ept->trans_count += last_trans;
    1898:	68a3      	ldr	r3, [r4, #8]
    189a:	445b      	add	r3, fp
    189c:	60a3      	str	r3, [r4, #8]
	if (is_ctrl) {
    189e:	f1b8 0f01 	cmp.w	r8, #1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    18a2:	ea4f 1345 	mov.w	r3, r5, lsl #5
    18a6:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    18aa:	bf0c      	ite	eq
    18ac:	222d      	moveq	r2, #45	; 0x2d
    18ae:	2225      	movne	r2, #37	; 0x25
    18b0:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
	if (0 == epn) {
    18b4:	b915      	cbnz	r5, 18bc <_usb_d_dev_out_next+0xb4>
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    18b6:	68e2      	ldr	r2, [r4, #12]
	bank->ADDR.reg          = addr;
    18b8:	4b4c      	ldr	r3, [pc, #304]	; (19ec <_usb_d_dev_out_next+0x1e4>)
    18ba:	601a      	str	r2, [r3, #0]
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    18bc:	2100      	movs	r1, #0
    18be:	4620      	mov	r0, r4
    18c0:	4b4c      	ldr	r3, [pc, #304]	; (19f4 <_usb_d_dev_out_next+0x1ec>)
    18c2:	4798      	blx	r3
	return;
    18c4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
    18c8:	8a06      	ldrh	r6, [r0, #16]
    18ca:	f240 33ff 	movw	r3, #1023	; 0x3ff
    18ce:	429e      	cmp	r6, r3
    18d0:	d07b      	beq.n	19ca <_usb_d_dev_out_next+0x1c2>
    18d2:	f04f 0b00 	mov.w	fp, #0
    18d6:	46da      	mov	sl, fp
    18d8:	e7af      	b.n	183a <_usb_d_dev_out_next+0x32>
	if (ept->trans_size == 0 && ept->flags.bits.need_zlp) {
    18da:	7ce3      	ldrb	r3, [r4, #19]
    18dc:	f013 0f10 	tst.w	r3, #16
    18e0:	d06c      	beq.n	19bc <_usb_d_dev_out_next+0x1b4>
		ept->flags.bits.need_zlp  = 0;
    18e2:	7ce3      	ldrb	r3, [r4, #19]
		ept->flags.bits.use_cache = 1;
    18e4:	f003 03ef 	and.w	r3, r3, #239	; 0xef
    18e8:	f043 0320 	orr.w	r3, r3, #32
    18ec:	74e3      	strb	r3, [r4, #19]
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    18ee:	68e0      	ldr	r0, [r4, #12]
	bank->ADDR.reg          = addr;
    18f0:	493e      	ldr	r1, [pc, #248]	; (19ec <_usb_d_dev_out_next+0x1e4>)
    18f2:	016a      	lsls	r2, r5, #5
    18f4:	188b      	adds	r3, r1, r2
    18f6:	5088      	str	r0, [r1, r2]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    18f8:	8a21      	ldrh	r1, [r4, #16]
    18fa:	685a      	ldr	r2, [r3, #4]
    18fc:	f361 329b 	bfi	r2, r1, #14, #14
    1900:	605a      	str	r2, [r3, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    1902:	685a      	ldr	r2, [r3, #4]
    1904:	f36f 020d 	bfc	r2, #0, #14
    1908:	605a      	str	r2, [r3, #4]
    190a:	e01d      	b.n	1948 <_usb_d_dev_out_next+0x140>
		ept->trans_count += trans_size;
    190c:	68a2      	ldr	r2, [r4, #8]
    190e:	4452      	add	r2, sl
    1910:	60a2      	str	r2, [r4, #8]
		if (ept->trans_count < ept->trans_size) {
    1912:	4293      	cmp	r3, r2
    1914:	d9c3      	bls.n	189e <_usb_d_dev_out_next+0x96>
			trans_next = ept->trans_size - ept->trans_count;
    1916:	1a9b      	subs	r3, r3, r2
    1918:	b29b      	uxth	r3, r3
			if (ept->flags.bits.use_cache) {
    191a:	7ce1      	ldrb	r1, [r4, #19]
    191c:	f011 0f20 	tst.w	r1, #32
    1920:	d026      	beq.n	1970 <_usb_d_dev_out_next+0x168>
    1922:	8a22      	ldrh	r2, [r4, #16]
    1924:	4293      	cmp	r3, r2
    1926:	bf28      	it	cs
    1928:	4613      	movcs	r3, r2
				_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    192a:	68e0      	ldr	r0, [r4, #12]
	bank->ADDR.reg          = addr;
    192c:	016a      	lsls	r2, r5, #5
    192e:	492f      	ldr	r1, [pc, #188]	; (19ec <_usb_d_dev_out_next+0x1e4>)
    1930:	5088      	str	r0, [r1, r2]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    1932:	4a2e      	ldr	r2, [pc, #184]	; (19ec <_usb_d_dev_out_next+0x1e4>)
    1934:	eb02 1245 	add.w	r2, r2, r5, lsl #5
    1938:	6851      	ldr	r1, [r2, #4]
    193a:	f363 319b 	bfi	r1, r3, #14, #14
    193e:	6051      	str	r1, [r2, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    1940:	6853      	ldr	r3, [r2, #4]
    1942:	f36f 030d 	bfc	r3, #0, #14
    1946:	6053      	str	r3, [r2, #4]
	if (!isr) {
    1948:	f1b9 0f00 	cmp.w	r9, #0
    194c:	d108      	bne.n	1960 <_usb_d_dev_out_next+0x158>
		if (is_ctrl) {
    194e:	f1b8 0f01 	cmp.w	r8, #1
    1952:	d025      	beq.n	19a0 <_usb_d_dev_out_next+0x198>
			inten = USB_D_BANK0_INT_FLAGS;
    1954:	2225      	movs	r2, #37	; 0x25
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    1956:	016b      	lsls	r3, r5, #5
    1958:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    195c:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    1960:	016d      	lsls	r5, r5, #5
    1962:	f105 4582 	add.w	r5, r5, #1090519040	; 0x41000000
    1966:	2340      	movs	r3, #64	; 0x40
    1968:	f885 3104 	strb.w	r3, [r5, #260]	; 0x104
    196c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if (trans_next > ept->size) {
    1970:	8a21      	ldrh	r1, [r4, #16]
    1972:	428b      	cmp	r3, r1
    1974:	d90a      	bls.n	198c <_usb_d_dev_out_next+0x184>
					if (trans_next > USB_D_DEV_TRANS_MAX) {
    1976:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
    197a:	d80e      	bhi.n	199a <_usb_d_dev_out_next+0x192>
    197c:	ea23 0306 	bic.w	r3, r3, r6
				_usbd_ep_set_buf(epn, 0, (uint32_t)&ept->trans_buf[ept->trans_count]);
    1980:	6821      	ldr	r1, [r4, #0]
    1982:	440a      	add	r2, r1
	bank->ADDR.reg          = addr;
    1984:	0169      	lsls	r1, r5, #5
    1986:	4819      	ldr	r0, [pc, #100]	; (19ec <_usb_d_dev_out_next+0x1e4>)
    1988:	5042      	str	r2, [r0, r1]
    198a:	e7d2      	b.n	1932 <_usb_d_dev_out_next+0x12a>
				} else if (trans_next < ept->size) {
    198c:	428b      	cmp	r3, r1
    198e:	d2f7      	bcs.n	1980 <_usb_d_dev_out_next+0x178>
					ept->flags.bits.use_cache = 1;
    1990:	7ce1      	ldrb	r1, [r4, #19]
    1992:	f041 0120 	orr.w	r1, r1, #32
    1996:	74e1      	strb	r1, [r4, #19]
    1998:	e7f2      	b.n	1980 <_usb_d_dev_out_next+0x178>
						trans_next = USB_D_DEV_TRANS_MAX;
    199a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    199e:	e7ef      	b.n	1980 <_usb_d_dev_out_next+0x178>
	bank->STATUS_BK.reg     = 0;
    19a0:	4b12      	ldr	r3, [pc, #72]	; (19ec <_usb_d_dev_out_next+0x1e4>)
    19a2:	eb03 1345 	add.w	r3, r3, r5, lsl #5
    19a6:	2200      	movs	r2, #0
    19a8:	769a      	strb	r2, [r3, #26]
			inten = USB_D_BANK0_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL1;
    19aa:	222d      	movs	r2, #45	; 0x2d
    19ac:	e7d3      	b.n	1956 <_usb_d_dev_out_next+0x14e>
	uint16_t           last_pkt   = last_trans & size_mask;
    19ae:	f3c7 0709 	ubfx	r7, r7, #0, #10
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    19b2:	f890 8013 	ldrb.w	r8, [r0, #19]
    19b6:	f008 0807 	and.w	r8, r8, #7
    19ba:	e749      	b.n	1850 <_usb_d_dev_out_next+0x48>
	} else if (isr && last_pkt < ept->size) {
    19bc:	f1b9 0f00 	cmp.w	r9, #0
    19c0:	d10b      	bne.n	19da <_usb_d_dev_out_next+0x1d2>
		ept->trans_count += trans_size;
    19c2:	68a3      	ldr	r3, [r4, #8]
    19c4:	4453      	add	r3, sl
    19c6:	60a3      	str	r3, [r4, #8]
    19c8:	e769      	b.n	189e <_usb_d_dev_out_next+0x96>
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    19ca:	f890 8013 	ldrb.w	r8, [r0, #19]
    19ce:	f008 0807 	and.w	r8, r8, #7
	uint16_t           last_pkt   = last_trans & size_mask;
    19d2:	2700      	movs	r7, #0
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    19d4:	46bb      	mov	fp, r7
    19d6:	46ba      	mov	sl, r7
    19d8:	e740      	b.n	185c <_usb_d_dev_out_next+0x54>
	} else if (isr && last_pkt < ept->size) {
    19da:	8a23      	ldrh	r3, [r4, #16]
    19dc:	42bb      	cmp	r3, r7
    19de:	f63f af57 	bhi.w	1890 <_usb_d_dev_out_next+0x88>
		ept->trans_count += trans_size;
    19e2:	68a3      	ldr	r3, [r4, #8]
    19e4:	4453      	add	r3, sl
    19e6:	60a3      	str	r3, [r4, #8]
    19e8:	e759      	b.n	189e <_usb_d_dev_out_next+0x96>
    19ea:	bf00      	nop
    19ec:	200005a8 	.word	0x200005a8
    19f0:	00003275 	.word	0x00003275
    19f4:	000014a9 	.word	0x000014a9

000019f8 <_usb_d_dev_handler>:
{
    19f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	uint16_t epint = hw->DEVICE.EPINTSMRY.reg;
    19fc:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    1a00:	8c1e      	ldrh	r6, [r3, #32]
    1a02:	b2b6      	uxth	r6, r6
	if (0 == epint) {
    1a04:	b146      	cbz	r6, 1a18 <_usb_d_dev_handler+0x20>
    1a06:	4d91      	ldr	r5, [pc, #580]	; (1c4c <_usb_d_dev_handler+0x254>)
	uint32_t lpm_variable = 0;
    1a08:	2400      	movs	r4, #0
		if ((ept->flags.bits.eptype == 0x1) && !_usb_d_dev_ep_is_busy(ept)) {
    1a0a:	f1a5 0774 	sub.w	r7, r5, #116	; 0x74
			_usb_d_dev_handle_setup(ept);
    1a0e:	f8df 9258 	ldr.w	r9, [pc, #600]	; 1c68 <_usb_d_dev_handler+0x270>
			_usb_d_dev_handle_trfail(ept, 1);
    1a12:	f8df 8258 	ldr.w	r8, [pc, #600]	; 1c6c <_usb_d_dev_handler+0x274>
    1a16:	e0d3      	b.n	1bc0 <_usb_d_dev_handler+0x1c8>
	return tmp;
}

static inline hri_usbdevice_intflag_reg_t hri_usbdevice_read_INTFLAG_reg(const void *const hw)
{
	return ((Usb *)hw)->DEVICE.INTFLAG.reg;
    1a18:	8b99      	ldrh	r1, [r3, #28]
	return tmp;
}

static inline hri_usbdevice_intenset_reg_t hri_usbdevice_read_INTEN_reg(const void *const hw)
{
	return ((Usb *)hw)->DEVICE.INTENSET.reg;
    1a1a:	8b1b      	ldrh	r3, [r3, #24]
    1a1c:	b29b      	uxth	r3, r3
	flags &= hri_usbdevice_read_INTEN_reg(USB);
    1a1e:	400b      	ands	r3, r1
	if (flags & USB_DEVICE_INTFLAG_SOF) {
    1a20:	f013 0f04 	tst.w	r3, #4
    1a24:	d11d      	bne.n	1a62 <_usb_d_dev_handler+0x6a>
	if (flags & USB_DEVICE_INTFLAG_LPMSUSP) {
    1a26:	f413 7f00 	tst.w	r3, #512	; 0x200
    1a2a:	d123      	bne.n	1a74 <_usb_d_dev_handler+0x7c>
	} else if (flags & USB_DEVICE_INTFLAG_RAMACER) {
    1a2c:	f013 0f80 	tst.w	r3, #128	; 0x80
    1a30:	d147      	bne.n	1ac2 <_usb_d_dev_handler+0xca>
	} else if (flags & USB_D_WAKEUP_INT_FLAGS) {
    1a32:	f013 0f70 	tst.w	r3, #112	; 0x70
    1a36:	d14f      	bne.n	1ad8 <_usb_d_dev_handler+0xe0>
	} else if (flags & USB_DEVICE_INTFLAG_EORST) {
    1a38:	f013 0f08 	tst.w	r3, #8
    1a3c:	d16e      	bne.n	1b1c <_usb_d_dev_handler+0x124>
	} else if (flags & USB_DEVICE_INTFLAG_SUSPEND) {
    1a3e:	f013 0f01 	tst.w	r3, #1
    1a42:	d0e0      	beq.n	1a06 <_usb_d_dev_handler+0xe>
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    1a44:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    1a48:	f240 2201 	movw	r2, #513	; 0x201
    1a4c:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = ~data;
}

static inline void hri_usbdevice_clear_INTEN_reg(const void *const hw, hri_usbdevice_intenset_reg_t mask)
{
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    1a4e:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    1a50:	2270      	movs	r2, #112	; 0x70
    1a52:	831a      	strh	r2, [r3, #24]
	dev_inst.callbacks.event(USB_EV_SUSPEND, 0);
    1a54:	4b7e      	ldr	r3, [pc, #504]	; (1c50 <_usb_d_dev_handler+0x258>)
    1a56:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    1a58:	2100      	movs	r1, #0
    1a5a:	2004      	movs	r0, #4
    1a5c:	4798      	blx	r3
    1a5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    1a62:	2204      	movs	r2, #4
    1a64:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    1a68:	839a      	strh	r2, [r3, #28]
	dev_inst.callbacks.sof();
    1a6a:	4b79      	ldr	r3, [pc, #484]	; (1c50 <_usb_d_dev_handler+0x258>)
    1a6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    1a6e:	4798      	blx	r3
    1a70:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    1a74:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    1a78:	f240 2201 	movw	r2, #513	; 0x201
    1a7c:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    1a7e:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    1a80:	2270      	movs	r2, #112	; 0x70
    1a82:	831a      	strh	r2, [r3, #24]
		if (bank->EXTREG.bit.SUBPID == 0x3) {
    1a84:	4b72      	ldr	r3, [pc, #456]	; (1c50 <_usb_d_dev_handler+0x258>)
    1a86:	891b      	ldrh	r3, [r3, #8]
    1a88:	f003 030f 	and.w	r3, r3, #15
    1a8c:	2b03      	cmp	r3, #3
    1a8e:	d00e      	beq.n	1aae <_usb_d_dev_handler+0xb6>
    1a90:	4b6f      	ldr	r3, [pc, #444]	; (1c50 <_usb_d_dev_handler+0x258>)
    1a92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    1a94:	f003 030f 	and.w	r3, r3, #15
    1a98:	2b03      	cmp	r3, #3
		UsbDeviceDescBank *bank = &prvt_inst.desc_table[i].DeviceDescBank[0];
    1a9a:	bf08      	it	eq
    1a9c:	2201      	moveq	r2, #1
		if (bank->EXTREG.bit.SUBPID == 0x3) {
    1a9e:	d007      	beq.n	1ab0 <_usb_d_dev_handler+0xb8>
	uint32_t lpm_variable = 0;
    1aa0:	2100      	movs	r1, #0
	dev_inst.callbacks.event(USB_EV_LPM_SUSPEND, lpm_variable);
    1aa2:	4b6b      	ldr	r3, [pc, #428]	; (1c50 <_usb_d_dev_handler+0x258>)
    1aa4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    1aa6:	2003      	movs	r0, #3
    1aa8:	4798      	blx	r3
    1aaa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		UsbDeviceDescBank *bank = &prvt_inst.desc_table[i].DeviceDescBank[0];
    1aae:	2200      	movs	r2, #0
			lpm_variable = bank->EXTREG.bit.VARIABLE;
    1ab0:	4b67      	ldr	r3, [pc, #412]	; (1c50 <_usb_d_dev_handler+0x258>)
    1ab2:	eb03 1342 	add.w	r3, r3, r2, lsl #5
    1ab6:	8919      	ldrh	r1, [r3, #8]
    1ab8:	f3c1 110a 	ubfx	r1, r1, #4, #11
			bank->EXTREG.reg = 0;
    1abc:	2200      	movs	r2, #0
    1abe:	811a      	strh	r2, [r3, #8]
    1ac0:	e7ef      	b.n	1aa2 <_usb_d_dev_handler+0xaa>
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    1ac2:	2280      	movs	r2, #128	; 0x80
    1ac4:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    1ac8:	839a      	strh	r2, [r3, #28]
	dev_inst.callbacks.event(USB_EV_ERROR, 0);
    1aca:	4b61      	ldr	r3, [pc, #388]	; (1c50 <_usb_d_dev_handler+0x258>)
    1acc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    1ace:	2100      	movs	r1, #0
    1ad0:	2005      	movs	r0, #5
    1ad2:	4798      	blx	r3
    1ad4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    1ad8:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    1adc:	2270      	movs	r2, #112	; 0x70
    1ade:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    1ae0:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    1ae2:	f240 2201 	movw	r2, #513	; 0x201
    1ae6:	831a      	strh	r2, [r3, #24]
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
    1ae8:	4b5a      	ldr	r3, [pc, #360]	; (1c54 <_usb_d_dev_handler+0x25c>)
    1aea:	f893 3020 	ldrb.w	r3, [r3, #32]
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(OSCCTRL)) {
    1aee:	f013 0f01 	tst.w	r3, #1
    1af2:	d00d      	beq.n	1b10 <_usb_d_dev_handler+0x118>
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    1af4:	4a57      	ldr	r2, [pc, #348]	; (1c54 <_usb_d_dev_handler+0x25c>)
    1af6:	6913      	ldr	r3, [r2, #16]
	tmp &= mask;
    1af8:	f403 6310 	and.w	r3, r3, #2304	; 0x900
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, (OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC))
    1afc:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
    1b00:	d1f9      	bne.n	1af6 <_usb_d_dev_handler+0xfe>
	dev_inst.callbacks.event(USB_EV_WAKEUP, 0);
    1b02:	4b53      	ldr	r3, [pc, #332]	; (1c50 <_usb_d_dev_handler+0x258>)
    1b04:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    1b06:	2100      	movs	r1, #0
    1b08:	2002      	movs	r0, #2
    1b0a:	4798      	blx	r3
    1b0c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    1b10:	4a50      	ldr	r2, [pc, #320]	; (1c54 <_usb_d_dev_handler+0x25c>)
    1b12:	6913      	ldr	r3, [r2, #16]
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, OSCCTRL_STATUS_DFLLRDY) != OSCCTRL_STATUS_DFLLRDY)
    1b14:	f413 7f80 	tst.w	r3, #256	; 0x100
    1b18:	d0fb      	beq.n	1b12 <_usb_d_dev_handler+0x11a>
    1b1a:	e7f2      	b.n	1b02 <_usb_d_dev_handler+0x10a>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    1b1c:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    1b20:	2400      	movs	r4, #0
    1b22:	f883 4100 	strb.w	r4, [r3, #256]	; 0x100
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    1b26:	2208      	movs	r2, #8
    1b28:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    1b2a:	2270      	movs	r2, #112	; 0x70
    1b2c:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    1b2e:	f240 2201 	movw	r2, #513	; 0x201
    1b32:	831a      	strh	r2, [r3, #24]
	_usb_d_dev_reset_epts();
    1b34:	4b48      	ldr	r3, [pc, #288]	; (1c58 <_usb_d_dev_handler+0x260>)
    1b36:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_RESET, 0);
    1b38:	4b45      	ldr	r3, [pc, #276]	; (1c50 <_usb_d_dev_handler+0x258>)
    1b3a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    1b3c:	4621      	mov	r1, r4
    1b3e:	2001      	movs	r0, #1
    1b40:	4798      	blx	r3
    1b42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    1b46:	f011 0f10 	tst.w	r1, #16
    1b4a:	d109      	bne.n	1b60 <_usb_d_dev_handler+0x168>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    1b4c:	f011 0f40 	tst.w	r1, #64	; 0x40
    1b50:	d108      	bne.n	1b64 <_usb_d_dev_handler+0x16c>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    1b52:	f011 0f20 	tst.w	r1, #32
    1b56:	d02f      	beq.n	1bb8 <_usb_d_dev_handler+0x1c0>
		_usb_d_dev_handle_stall(ept, 0);
    1b58:	2100      	movs	r1, #0
    1b5a:	4b40      	ldr	r3, [pc, #256]	; (1c5c <_usb_d_dev_handler+0x264>)
    1b5c:	4798      	blx	r3
    1b5e:	e02b      	b.n	1bb8 <_usb_d_dev_handler+0x1c0>
		_usb_d_dev_handle_setup(ept);
    1b60:	47c8      	blx	r9
    1b62:	e029      	b.n	1bb8 <_usb_d_dev_handler+0x1c0>
		_usb_d_dev_handle_stall(ept, 1);
    1b64:	2101      	movs	r1, #1
    1b66:	4b3d      	ldr	r3, [pc, #244]	; (1c5c <_usb_d_dev_handler+0x264>)
    1b68:	4798      	blx	r3
    1b6a:	e025      	b.n	1bb8 <_usb_d_dev_handler+0x1c0>
	if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    1b6c:	f011 0f40 	tst.w	r1, #64	; 0x40
    1b70:	d111      	bne.n	1b96 <_usb_d_dev_handler+0x19e>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    1b72:	f011 0f08 	tst.w	r1, #8
    1b76:	d112      	bne.n	1b9e <_usb_d_dev_handler+0x1a6>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT1) {
    1b78:	f011 0f02 	tst.w	r1, #2
    1b7c:	d112      	bne.n	1ba4 <_usb_d_dev_handler+0x1ac>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    1b7e:	f003 0307 	and.w	r3, r3, #7
    1b82:	2b01      	cmp	r3, #1
    1b84:	d118      	bne.n	1bb8 <_usb_d_dev_handler+0x1c0>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    1b86:	f011 0f04 	tst.w	r1, #4
    1b8a:	d10f      	bne.n	1bac <_usb_d_dev_handler+0x1b4>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    1b8c:	f011 0f10 	tst.w	r1, #16
    1b90:	d012      	beq.n	1bb8 <_usb_d_dev_handler+0x1c0>
			_usb_d_dev_handle_setup(ept);
    1b92:	47c8      	blx	r9
    1b94:	e010      	b.n	1bb8 <_usb_d_dev_handler+0x1c0>
		_usb_d_dev_handle_stall(ept, 1);
    1b96:	2101      	movs	r1, #1
    1b98:	4b30      	ldr	r3, [pc, #192]	; (1c5c <_usb_d_dev_handler+0x264>)
    1b9a:	4798      	blx	r3
    1b9c:	e00c      	b.n	1bb8 <_usb_d_dev_handler+0x1c0>
		_usb_d_dev_handle_trfail(ept, 1);
    1b9e:	2101      	movs	r1, #1
    1ba0:	47c0      	blx	r8
    1ba2:	e009      	b.n	1bb8 <_usb_d_dev_handler+0x1c0>
		_usb_d_dev_in_next(ept, true);
    1ba4:	2101      	movs	r1, #1
    1ba6:	4b2e      	ldr	r3, [pc, #184]	; (1c60 <_usb_d_dev_handler+0x268>)
    1ba8:	4798      	blx	r3
    1baa:	e005      	b.n	1bb8 <_usb_d_dev_handler+0x1c0>
			_usb_d_dev_handle_trfail(ept, 0);
    1bac:	2100      	movs	r1, #0
    1bae:	47c0      	blx	r8
    1bb0:	e002      	b.n	1bb8 <_usb_d_dev_handler+0x1c0>
		_usb_d_dev_handle_stall(ept, 0);
    1bb2:	2100      	movs	r1, #0
    1bb4:	4b29      	ldr	r3, [pc, #164]	; (1c5c <_usb_d_dev_handler+0x264>)
    1bb6:	4798      	blx	r3
    1bb8:	3401      	adds	r4, #1
    1bba:	3514      	adds	r5, #20
	for (i = 0; i < USB_D_N_EP; i++) {
    1bbc:	2c09      	cmp	r4, #9
    1bbe:	d042      	beq.n	1c46 <_usb_d_dev_handler+0x24e>
    1bc0:	4628      	mov	r0, r5
		if (ept->ep == 0xFF) {
    1bc2:	7cab      	ldrb	r3, [r5, #18]
    1bc4:	2bff      	cmp	r3, #255	; 0xff
    1bc6:	d0f7      	beq.n	1bb8 <_usb_d_dev_handler+0x1c0>
	if (!(epint & (1u << epn))) {
    1bc8:	f003 030f 	and.w	r3, r3, #15
    1bcc:	2101      	movs	r1, #1
    1bce:	4099      	lsls	r1, r3
    1bd0:	4231      	tst	r1, r6
    1bd2:	d0f1      	beq.n	1bb8 <_usb_d_dev_handler+0x1c0>
	flags = hw->DEVICE.DeviceEndpoint[epn].EPINTFLAG.reg;
    1bd4:	0159      	lsls	r1, r3, #5
    1bd6:	f101 4182 	add.w	r1, r1, #1090519040	; 0x41000000
    1bda:	f501 7180 	add.w	r1, r1, #256	; 0x100
    1bde:	79c9      	ldrb	r1, [r1, #7]
	mask  = hw->DEVICE.DeviceEndpoint[epn].EPINTENSET.reg;
    1be0:	015b      	lsls	r3, r3, #5
    1be2:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    1be6:	f893 3109 	ldrb.w	r3, [r3, #265]	; 0x109
	if (flags) {
    1bea:	4019      	ands	r1, r3
    1bec:	d0e4      	beq.n	1bb8 <_usb_d_dev_handler+0x1c0>
		if ((ept->flags.bits.eptype == 0x1) && !_usb_d_dev_ep_is_busy(ept)) {
    1bee:	eb04 0284 	add.w	r2, r4, r4, lsl #2
    1bf2:	eb07 0282 	add.w	r2, r7, r2, lsl #2
    1bf6:	f892 3087 	ldrb.w	r3, [r2, #135]	; 0x87
    1bfa:	f003 0247 	and.w	r2, r3, #71	; 0x47
    1bfe:	2a01      	cmp	r2, #1
    1c00:	d0a1      	beq.n	1b46 <_usb_d_dev_handler+0x14e>
		} else if (_usb_d_dev_ep_is_in(ept)) {
    1c02:	f013 0f80 	tst.w	r3, #128	; 0x80
    1c06:	d1b1      	bne.n	1b6c <_usb_d_dev_handler+0x174>
	if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    1c08:	f011 0f20 	tst.w	r1, #32
    1c0c:	d1d1      	bne.n	1bb2 <_usb_d_dev_handler+0x1ba>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    1c0e:	f011 0f04 	tst.w	r1, #4
    1c12:	d10e      	bne.n	1c32 <_usb_d_dev_handler+0x23a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT0) {
    1c14:	f011 0f01 	tst.w	r1, #1
    1c18:	d10e      	bne.n	1c38 <_usb_d_dev_handler+0x240>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    1c1a:	f003 0307 	and.w	r3, r3, #7
    1c1e:	2b01      	cmp	r3, #1
    1c20:	d1ca      	bne.n	1bb8 <_usb_d_dev_handler+0x1c0>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    1c22:	f011 0f08 	tst.w	r1, #8
    1c26:	d10b      	bne.n	1c40 <_usb_d_dev_handler+0x248>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    1c28:	f011 0f10 	tst.w	r1, #16
    1c2c:	d0c4      	beq.n	1bb8 <_usb_d_dev_handler+0x1c0>
			_usb_d_dev_handle_setup(ept);
    1c2e:	47c8      	blx	r9
    1c30:	e7c2      	b.n	1bb8 <_usb_d_dev_handler+0x1c0>
		_usb_d_dev_handle_trfail(ept, 0);
    1c32:	2100      	movs	r1, #0
    1c34:	47c0      	blx	r8
    1c36:	e7bf      	b.n	1bb8 <_usb_d_dev_handler+0x1c0>
		_usb_d_dev_out_next(ept, true);
    1c38:	2101      	movs	r1, #1
    1c3a:	4b0a      	ldr	r3, [pc, #40]	; (1c64 <_usb_d_dev_handler+0x26c>)
    1c3c:	4798      	blx	r3
    1c3e:	e7bb      	b.n	1bb8 <_usb_d_dev_handler+0x1c0>
			_usb_d_dev_handle_trfail(ept, 1);
    1c40:	2101      	movs	r1, #1
    1c42:	47c0      	blx	r8
    1c44:	e7b8      	b.n	1bb8 <_usb_d_dev_handler+0x1c0>
    1c46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    1c4a:	bf00      	nop
    1c4c:	2000061c 	.word	0x2000061c
    1c50:	200005a8 	.word	0x200005a8
    1c54:	40001000 	.word	0x40001000
    1c58:	00001641 	.word	0x00001641
    1c5c:	0000147d 	.word	0x0000147d
    1c60:	00001685 	.word	0x00001685
    1c64:	00001809 	.word	0x00001809
    1c68:	00001401 	.word	0x00001401
    1c6c:	00001541 	.word	0x00001541

00001c70 <_usb_d_dev_init>:
{
    1c70:	b508      	push	{r3, lr}
	return ((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg;
    1c72:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    1c76:	789b      	ldrb	r3, [r3, #2]
	if (!hri_usbdevice_is_syncing(hw, USB_SYNCBUSY_SWRST)) {
    1c78:	f013 0f01 	tst.w	r3, #1
    1c7c:	d124      	bne.n	1cc8 <_usb_d_dev_init+0x58>
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    1c7e:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    1c82:	7893      	ldrb	r3, [r2, #2]
    1c84:	f013 0f03 	tst.w	r3, #3
    1c88:	d1fb      	bne.n	1c82 <_usb_d_dev_init+0x12>

static inline hri_usb_ctrla_reg_t hri_usb_get_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t mask)
{
	uint8_t tmp;
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
	tmp = ((Usb *)hw)->HOST.CTRLA.reg;
    1c8a:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    1c8e:	781b      	ldrb	r3, [r3, #0]
		if (hri_usbdevice_get_CTRLA_reg(hw, USB_CTRLA_ENABLE)) {
    1c90:	f013 0f02 	tst.w	r3, #2
    1c94:	d00f      	beq.n	1cb6 <_usb_d_dev_init+0x46>
	((Usb *)hw)->HOST.CTRLA.reg &= ~USB_CTRLA_ENABLE;
    1c96:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    1c9a:	7813      	ldrb	r3, [r2, #0]
    1c9c:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    1ca0:	7013      	strb	r3, [r2, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    1ca2:	7893      	ldrb	r3, [r2, #2]
    1ca4:	f013 0f03 	tst.w	r3, #3
    1ca8:	d1fb      	bne.n	1ca2 <_usb_d_dev_init+0x32>
    1caa:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    1cae:	7893      	ldrb	r3, [r2, #2]
    1cb0:	f013 0f02 	tst.w	r3, #2
    1cb4:	d1fb      	bne.n	1cae <_usb_d_dev_init+0x3e>
}

static inline void hri_usb_write_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t data)
{
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.CTRLA.reg = data;
    1cb6:	2201      	movs	r2, #1
    1cb8:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    1cbc:	701a      	strb	r2, [r3, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    1cbe:	461a      	mov	r2, r3
    1cc0:	7893      	ldrb	r3, [r2, #2]
    1cc2:	f013 0f03 	tst.w	r3, #3
    1cc6:	d1fb      	bne.n	1cc0 <_usb_d_dev_init+0x50>
    1cc8:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    1ccc:	7893      	ldrb	r3, [r2, #2]
    1cce:	f013 0f01 	tst.w	r3, #1
    1cd2:	d1fb      	bne.n	1ccc <_usb_d_dev_init+0x5c>
	dev_inst.callbacks.sof   = (_usb_d_dev_sof_cb_t)_dummy_func_no_return;
    1cd4:	4b21      	ldr	r3, [pc, #132]	; (1d5c <_usb_d_dev_init+0xec>)
    1cd6:	4a22      	ldr	r2, [pc, #136]	; (1d60 <_usb_d_dev_init+0xf0>)
    1cd8:	661a      	str	r2, [r3, #96]	; 0x60
	dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)_dummy_func_no_return;
    1cda:	665a      	str	r2, [r3, #100]	; 0x64
	dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)_dummy_func_no_return;
    1cdc:	669a      	str	r2, [r3, #104]	; 0x68
	dev_inst.ep_callbacks.more  = (_usb_d_dev_ep_cb_more_t)_dummy_func_no_return;
    1cde:	66da      	str	r2, [r3, #108]	; 0x6c
	dev_inst.ep_callbacks.done  = (_usb_d_dev_ep_cb_done_t)_dummy_func_no_return;
    1ce0:	671a      	str	r2, [r3, #112]	; 0x70
	_usb_d_dev_reset_epts();
    1ce2:	4b20      	ldr	r3, [pc, #128]	; (1d64 <_usb_d_dev_init+0xf4>)
    1ce4:	4798      	blx	r3
	    = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRANSN_POS / 32)) >> (NVM_USB_PAD_TRANSN_POS % 32))
    1ce6:	4b20      	ldr	r3, [pc, #128]	; (1d68 <_usb_d_dev_init+0xf8>)
    1ce8:	6819      	ldr	r1, [r3, #0]
	uint32_t pad_transp
    1cea:	f3c1 1344 	ubfx	r3, r1, #5, #5
	uint32_t pad_trim = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRIM_POS / 32)) >> (NVM_USB_PAD_TRIM_POS % 32))
    1cee:	f3c1 2282 	ubfx	r2, r1, #10, #3
	if (pad_transn == 0 || pad_transn == 0x1F) {
    1cf2:	f011 011f 	ands.w	r1, r1, #31
    1cf6:	d02b      	beq.n	1d50 <_usb_d_dev_init+0xe0>
		pad_transn = 9;
    1cf8:	291f      	cmp	r1, #31
    1cfa:	bf08      	it	eq
    1cfc:	2109      	moveq	r1, #9
	if (pad_transp == 0 || pad_transp == 0x1F) {
    1cfe:	b34b      	cbz	r3, 1d54 <_usb_d_dev_init+0xe4>
		pad_transp = 25;
    1d00:	2b1f      	cmp	r3, #31
    1d02:	bf08      	it	eq
    1d04:	2319      	moveq	r3, #25
	if (pad_trim == 0 || pad_trim == 0x7) {
    1d06:	b33a      	cbz	r2, 1d58 <_usb_d_dev_init+0xe8>
		pad_trim = 6;
    1d08:	2a07      	cmp	r2, #7
    1d0a:	bf08      	it	eq
    1d0c:	2206      	moveq	r2, #6
	hw->DEVICE.PADCAL.reg = USB_PADCAL_TRANSN(pad_transn) | USB_PADCAL_TRANSP(pad_transp) | USB_PADCAL_TRIM(pad_trim);
    1d0e:	f003 031f 	and.w	r3, r3, #31
    1d12:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
    1d16:	0312      	lsls	r2, r2, #12
    1d18:	f402 42e0 	and.w	r2, r2, #28672	; 0x7000
    1d1c:	4313      	orrs	r3, r2
    1d1e:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    1d22:	8513      	strh	r3, [r2, #40]	; 0x28
	hw->DEVICE.QOSCTRL.bit.CQOS = 3;
    1d24:	78d3      	ldrb	r3, [r2, #3]
    1d26:	f043 0303 	orr.w	r3, r3, #3
    1d2a:	70d3      	strb	r3, [r2, #3]
	hw->DEVICE.QOSCTRL.bit.DQOS = 3;
    1d2c:	78d3      	ldrb	r3, [r2, #3]
    1d2e:	f043 030c 	orr.w	r3, r3, #12
    1d32:	70d3      	strb	r3, [r2, #3]
	((Usb *)hw)->HOST.CTRLA.reg = data;
    1d34:	2304      	movs	r3, #4
    1d36:	7013      	strb	r3, [r2, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    1d38:	7893      	ldrb	r3, [r2, #2]
    1d3a:	f013 0f03 	tst.w	r3, #3
    1d3e:	d1fb      	bne.n	1d38 <_usb_d_dev_init+0xc8>
}

static inline void hri_usb_write_DESCADD_reg(const void *const hw, hri_usb_descadd_reg_t data)
{
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.DESCADD.reg = data;
    1d40:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    1d44:	4a05      	ldr	r2, [pc, #20]	; (1d5c <_usb_d_dev_init+0xec>)
    1d46:	625a      	str	r2, [r3, #36]	; 0x24
	((Usb *)hw)->DEVICE.CTRLB.reg = data;
    1d48:	2201      	movs	r2, #1
    1d4a:	811a      	strh	r2, [r3, #8]
}
    1d4c:	2000      	movs	r0, #0
    1d4e:	bd08      	pop	{r3, pc}
		pad_transn = 9;
    1d50:	2109      	movs	r1, #9
    1d52:	e7d4      	b.n	1cfe <_usb_d_dev_init+0x8e>
		pad_transp = 25;
    1d54:	2319      	movs	r3, #25
    1d56:	e7d6      	b.n	1d06 <_usb_d_dev_init+0x96>
		pad_trim = 6;
    1d58:	2206      	movs	r2, #6
    1d5a:	e7d8      	b.n	1d0e <_usb_d_dev_init+0x9e>
    1d5c:	200005a8 	.word	0x200005a8
    1d60:	000013fd 	.word	0x000013fd
    1d64:	00001641 	.word	0x00001641
    1d68:	00800084 	.word	0x00800084

00001d6c <_usb_d_dev_enable>:
	tmp = ((Usb *)hw)->HOST.SYNCBUSY.reg;
    1d6c:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    1d70:	789b      	ldrb	r3, [r3, #2]
	if (hri_usbdevice_get_SYNCBUSY_reg(hw, (USB_SYNCBUSY_ENABLE | USB_SYNCBUSY_SWRST))) {
    1d72:	f013 0f03 	tst.w	r3, #3
    1d76:	d129      	bne.n	1dcc <_usb_d_dev_enable+0x60>
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    1d78:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    1d7c:	7893      	ldrb	r3, [r2, #2]
    1d7e:	f013 0f03 	tst.w	r3, #3
    1d82:	d1fb      	bne.n	1d7c <_usb_d_dev_enable+0x10>
	return ((Usb *)hw)->HOST.CTRLA.reg;
    1d84:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    1d88:	781b      	ldrb	r3, [r3, #0]
    1d8a:	b2db      	uxtb	r3, r3
	if ((ctrla & USB_CTRLA_ENABLE) == 0) {
    1d8c:	f013 0f02 	tst.w	r3, #2
    1d90:	d108      	bne.n	1da4 <_usb_d_dev_enable+0x38>
		hri_usbdevice_write_CTRLA_reg(hw, ctrla | USB_CTRLA_ENABLE);
    1d92:	f043 0302 	orr.w	r3, r3, #2
	((Usb *)hw)->HOST.CTRLA.reg = data;
    1d96:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    1d9a:	7013      	strb	r3, [r2, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    1d9c:	7893      	ldrb	r3, [r2, #2]
    1d9e:	f013 0f03 	tst.w	r3, #3
    1da2:	d1fb      	bne.n	1d9c <_usb_d_dev_enable+0x30>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1da4:	4b0b      	ldr	r3, [pc, #44]	; (1dd4 <_usb_d_dev_enable+0x68>)
    1da6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    1daa:	609a      	str	r2, [r3, #8]
    1dac:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    1db0:	609a      	str	r2, [r3, #8]
    1db2:	f44f 2280 	mov.w	r2, #262144	; 0x40000
    1db6:	609a      	str	r2, [r3, #8]
    1db8:	f44f 2200 	mov.w	r2, #524288	; 0x80000
    1dbc:	609a      	str	r2, [r3, #8]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    1dbe:	f240 228d 	movw	r2, #653	; 0x28d
    1dc2:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    1dc6:	831a      	strh	r2, [r3, #24]
	return ERR_NONE;
    1dc8:	2000      	movs	r0, #0
    1dca:	4770      	bx	lr
		return -USB_ERR_DENIED;
    1dcc:	f06f 0010 	mvn.w	r0, #16
}
    1dd0:	4770      	bx	lr
    1dd2:	bf00      	nop
    1dd4:	e000e100 	.word	0xe000e100

00001dd8 <_usb_d_dev_attach>:
	((Usb *)hw)->DEVICE.CTRLB.reg &= ~USB_DEVICE_CTRLB_DETACH;
    1dd8:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    1ddc:	8913      	ldrh	r3, [r2, #8]
    1dde:	f023 0301 	bic.w	r3, r3, #1
    1de2:	041b      	lsls	r3, r3, #16
    1de4:	0c1b      	lsrs	r3, r3, #16
    1de6:	8113      	strh	r3, [r2, #8]
    1de8:	4770      	bx	lr

00001dea <_usb_d_dev_set_address>:
	hri_usbdevice_write_DADD_reg(USB, USB_DEVICE_DADD_ADDEN | USB_DEVICE_DADD_DADD(addr));
    1dea:	f040 0080 	orr.w	r0, r0, #128	; 0x80
	((Usb *)hw)->DEVICE.DADD.reg = data;
    1dee:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    1df2:	7298      	strb	r0, [r3, #10]
    1df4:	4770      	bx	lr
	...

00001df8 <_usb_d_dev_ep_init>:
{
    1df8:	b5f0      	push	{r4, r5, r6, r7, lr}
    1dfa:	fa4f fe80 	sxtb.w	lr, r0
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    1dfe:	f010 050f 	ands.w	r5, r0, #15
    1e02:	d04d      	beq.n	1ea0 <_usb_d_dev_ep_init+0xa8>
    1e04:	f1be 0f00 	cmp.w	lr, #0
    1e08:	bfb4      	ite	lt
    1e0a:	1cac      	addlt	r4, r5, #2
    1e0c:	462c      	movge	r4, r5
	uint8_t                        ep_type = attr & USB_EP_XTYPE_MASK;
    1e0e:	f001 0103 	and.w	r1, r1, #3
	const struct _usb_ep_cfg_item *pcfg    = &_usb_ep_cfgs[epn];
    1e12:	462b      	mov	r3, r5
	if (epn > CONF_USB_D_MAX_EP_N) {
    1e14:	2d02      	cmp	r5, #2
    1e16:	d947      	bls.n	1ea8 <_usb_d_dev_ep_init+0xb0>
		return -USB_ERR_PARAM;
    1e18:	f06f 0011 	mvn.w	r0, #17
    1e1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    1e1e:	f1be 0f00 	cmp.w	lr, #0
    1e22:	db1b      	blt.n	1e5c <_usb_d_dev_ep_init+0x64>
    1e24:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    1e28:	4e37      	ldr	r6, [pc, #220]	; (1f08 <_usb_d_dev_ep_init+0x110>)
    1e2a:	f856 5025 	ldr.w	r5, [r6, r5, lsl #2]
    1e2e:	2d00      	cmp	r5, #0
    1e30:	d15e      	bne.n	1ef0 <_usb_d_dev_ep_init+0xf8>
	ept->cache    = (uint8_t *)(dir ? pcfg->i_cache : pcfg->cache);
    1e32:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    1e36:	4d34      	ldr	r5, [pc, #208]	; (1f08 <_usb_d_dev_ep_init+0x110>)
    1e38:	f855 7023 	ldr.w	r7, [r5, r3, lsl #2]
    1e3c:	4d33      	ldr	r5, [pc, #204]	; (1f0c <_usb_d_dev_ep_init+0x114>)
    1e3e:	00a6      	lsls	r6, r4, #2
    1e40:	1933      	adds	r3, r6, r4
    1e42:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    1e46:	f8c3 7080 	str.w	r7, [r3, #128]	; 0x80
	ept->size     = max_pkt_siz;
    1e4a:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
	ept->flags.u8 = (ep_type + 1);
    1e4e:	3101      	adds	r1, #1
    1e50:	f883 1087 	strb.w	r1, [r3, #135]	; 0x87
	ept->ep       = ep;
    1e54:	f883 0086 	strb.w	r0, [r3, #134]	; 0x86
	return USB_OK;
    1e58:	2000      	movs	r0, #0
    1e5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    1e5c:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    1e60:	4e29      	ldr	r6, [pc, #164]	; (1f08 <_usb_d_dev_ep_init+0x110>)
    1e62:	eb06 0585 	add.w	r5, r6, r5, lsl #2
    1e66:	686d      	ldr	r5, [r5, #4]
    1e68:	b935      	cbnz	r5, 1e78 <_usb_d_dev_ep_init+0x80>
	ept->cache    = (uint8_t *)(dir ? pcfg->i_cache : pcfg->cache);
    1e6a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    1e6e:	4d26      	ldr	r5, [pc, #152]	; (1f08 <_usb_d_dev_ep_init+0x110>)
    1e70:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    1e74:	685f      	ldr	r7, [r3, #4]
    1e76:	e7e1      	b.n	1e3c <_usb_d_dev_ep_init+0x44>
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    1e78:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    1e7c:	4e22      	ldr	r6, [pc, #136]	; (1f08 <_usb_d_dev_ep_init+0x110>)
    1e7e:	eb06 0585 	add.w	r5, r6, r5, lsl #2
    1e82:	896d      	ldrh	r5, [r5, #10]
    1e84:	4295      	cmp	r5, r2
    1e86:	daf0      	bge.n	1e6a <_usb_d_dev_ep_init+0x72>
		return -USB_ERR_FUNC;
    1e88:	f06f 0012 	mvn.w	r0, #18
    1e8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -USB_ERR_REDO;
    1e8e:	f06f 0013 	mvn.w	r0, #19
    1e92:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return -USB_ERR_REDO;
    1e94:	f06f 0013 	mvn.w	r0, #19
    1e98:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return -USB_ERR_FUNC;
    1e9a:	f06f 0012 	mvn.w	r0, #18
    1e9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint8_t                        ep_type = attr & USB_EP_XTYPE_MASK;
    1ea0:	f001 0103 	and.w	r1, r1, #3
	return &dev_inst.ep[ep_index];
    1ea4:	2400      	movs	r4, #0
	const struct _usb_ep_cfg_item *pcfg    = &_usb_ep_cfgs[epn];
    1ea6:	4623      	mov	r3, r4
	if (ept->ep != 0xFF) {
    1ea8:	eb04 0684 	add.w	r6, r4, r4, lsl #2
    1eac:	4f17      	ldr	r7, [pc, #92]	; (1f0c <_usb_d_dev_ep_init+0x114>)
    1eae:	eb07 0686 	add.w	r6, r7, r6, lsl #2
    1eb2:	f896 6086 	ldrb.w	r6, [r6, #134]	; 0x86
    1eb6:	2eff      	cmp	r6, #255	; 0xff
    1eb8:	d1e9      	bne.n	1e8e <_usb_d_dev_ep_init+0x96>
	if (ep_type == USB_EP_XTYPE_CTRL) {
    1eba:	2900      	cmp	r1, #0
    1ebc:	d1af      	bne.n	1e1e <_usb_d_dev_ep_init+0x26>
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    1ebe:	b125      	cbz	r5, 1eca <_usb_d_dev_ep_init+0xd2>
    1ec0:	f1be 0f00 	cmp.w	lr, #0
    1ec4:	bfa4      	itt	ge
    1ec6:	3502      	addge	r5, #2
    1ec8:	b2ed      	uxtbge	r5, r5
		if (ept_in->ep != 0xFF) {
    1eca:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    1ece:	4e0f      	ldr	r6, [pc, #60]	; (1f0c <_usb_d_dev_ep_init+0x114>)
    1ed0:	eb06 0585 	add.w	r5, r6, r5, lsl #2
    1ed4:	f895 5086 	ldrb.w	r5, [r5, #134]	; 0x86
    1ed8:	2dff      	cmp	r5, #255	; 0xff
    1eda:	d1db      	bne.n	1e94 <_usb_d_dev_ep_init+0x9c>
		if (pcfg->cache == NULL) {
    1edc:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    1ee0:	4e09      	ldr	r6, [pc, #36]	; (1f08 <_usb_d_dev_ep_init+0x110>)
    1ee2:	f856 5025 	ldr.w	r5, [r6, r5, lsl #2]
    1ee6:	2d00      	cmp	r5, #0
    1ee8:	d0d7      	beq.n	1e9a <_usb_d_dev_ep_init+0xa2>
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    1eea:	f1be 0f00 	cmp.w	lr, #0
    1eee:	dbb5      	blt.n	1e5c <_usb_d_dev_ep_init+0x64>
    1ef0:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    1ef4:	4e04      	ldr	r6, [pc, #16]	; (1f08 <_usb_d_dev_ep_init+0x110>)
    1ef6:	eb06 0585 	add.w	r5, r6, r5, lsl #2
    1efa:	892d      	ldrh	r5, [r5, #8]
    1efc:	4295      	cmp	r5, r2
    1efe:	da98      	bge.n	1e32 <_usb_d_dev_ep_init+0x3a>
		return -USB_ERR_FUNC;
    1f00:	f06f 0012 	mvn.w	r0, #18
    1f04:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1f06:	bf00      	nop
    1f08:	000035d8 	.word	0x000035d8
    1f0c:	200005a8 	.word	0x200005a8

00001f10 <_usb_d_dev_ep_deinit>:
{
    1f10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1f12:	b247      	sxtb	r7, r0
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    1f14:	f010 060f 	ands.w	r6, r0, #15
    1f18:	d00e      	beq.n	1f38 <_usb_d_dev_ep_deinit+0x28>
    1f1a:	2f00      	cmp	r7, #0
    1f1c:	bfb4      	ite	lt
    1f1e:	1cb3      	addlt	r3, r6, #2
    1f20:	4633      	movge	r3, r6
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    1f22:	2e02      	cmp	r6, #2
    1f24:	d900      	bls.n	1f28 <_usb_d_dev_ep_deinit+0x18>
    1f26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return &dev_inst.ep[ep_index];
    1f28:	461d      	mov	r5, r3
    1f2a:	3301      	adds	r3, #1
    1f2c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    1f30:	4a24      	ldr	r2, [pc, #144]	; (1fc4 <_usb_d_dev_ep_deinit+0xb4>)
    1f32:	eb02 0e83 	add.w	lr, r2, r3, lsl #2
    1f36:	e002      	b.n	1f3e <_usb_d_dev_ep_deinit+0x2e>
    1f38:	f8df e094 	ldr.w	lr, [pc, #148]	; 1fd0 <_usb_d_dev_ep_deinit+0xc0>
    1f3c:	2500      	movs	r5, #0
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    1f3e:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    1f42:	4a21      	ldr	r2, [pc, #132]	; (1fc8 <_usb_d_dev_ep_deinit+0xb8>)
    1f44:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    1f48:	f893 2086 	ldrb.w	r2, [r3, #134]	; 0x86
    1f4c:	2aff      	cmp	r2, #255	; 0xff
    1f4e:	d0ea      	beq.n	1f26 <_usb_d_dev_ep_deinit+0x16>
    1f50:	4604      	mov	r4, r0
	_usb_d_dev_trans_stop(ept, dir, USB_TRANS_RESET);
    1f52:	2203      	movs	r2, #3
    1f54:	0ff9      	lsrs	r1, r7, #31
    1f56:	4670      	mov	r0, lr
    1f58:	4b1c      	ldr	r3, [pc, #112]	; (1fcc <_usb_d_dev_ep_deinit+0xbc>)
    1f5a:	4798      	blx	r3
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    1f5c:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    1f60:	4a19      	ldr	r2, [pc, #100]	; (1fc8 <_usb_d_dev_ep_deinit+0xb8>)
    1f62:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    1f66:	f893 3087 	ldrb.w	r3, [r3, #135]	; 0x87
    1f6a:	f003 0307 	and.w	r3, r3, #7
    1f6e:	2b01      	cmp	r3, #1
    1f70:	d016      	beq.n	1fa0 <_usb_d_dev_ep_deinit+0x90>
	} else if (USB_EP_GET_DIR(ep)) {
    1f72:	2f00      	cmp	r7, #0
    1f74:	db1b      	blt.n	1fae <_usb_d_dev_ep_deinit+0x9e>
    1f76:	0160      	lsls	r0, r4, #5
    1f78:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE0_Msk;
    1f7c:	f890 3100 	ldrb.w	r3, [r0, #256]	; 0x100
    1f80:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
    1f84:	f880 3100 	strb.w	r3, [r0, #256]	; 0x100
	ept->flags.u8 = 0;
    1f88:	4b0f      	ldr	r3, [pc, #60]	; (1fc8 <_usb_d_dev_ep_deinit+0xb8>)
    1f8a:	00aa      	lsls	r2, r5, #2
    1f8c:	1951      	adds	r1, r2, r5
    1f8e:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    1f92:	2000      	movs	r0, #0
    1f94:	f881 0087 	strb.w	r0, [r1, #135]	; 0x87
	ept->ep       = 0xFF;
    1f98:	22ff      	movs	r2, #255	; 0xff
    1f9a:	f881 2086 	strb.w	r2, [r1, #134]	; 0x86
    1f9e:	e7c2      	b.n	1f26 <_usb_d_dev_ep_deinit+0x16>
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg = 0;
    1fa0:	0160      	lsls	r0, r4, #5
    1fa2:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
    1fa6:	2300      	movs	r3, #0
    1fa8:	f880 3100 	strb.w	r3, [r0, #256]	; 0x100
    1fac:	e7ec      	b.n	1f88 <_usb_d_dev_ep_deinit+0x78>
    1fae:	0176      	lsls	r6, r6, #5
    1fb0:	f106 4682 	add.w	r6, r6, #1090519040	; 0x41000000
		hw->DEVICE.DeviceEndpoint[USB_EP_GET_N(ep)].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE1_Msk;
    1fb4:	f896 3100 	ldrb.w	r3, [r6, #256]	; 0x100
    1fb8:	f003 038f 	and.w	r3, r3, #143	; 0x8f
    1fbc:	f886 3100 	strb.w	r3, [r6, #256]	; 0x100
    1fc0:	e7e2      	b.n	1f88 <_usb_d_dev_ep_deinit+0x78>
    1fc2:	bf00      	nop
    1fc4:	20000608 	.word	0x20000608
    1fc8:	200005a8 	.word	0x200005a8
    1fcc:	000014d5 	.word	0x000014d5
    1fd0:	2000061c 	.word	0x2000061c

00001fd4 <_usb_d_dev_ep_enable>:
{
    1fd4:	b5f0      	push	{r4, r5, r6, r7, lr}
    1fd6:	b247      	sxtb	r7, r0
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    1fd8:	f010 000f 	ands.w	r0, r0, #15
    1fdc:	f000 80a6 	beq.w	212c <_usb_d_dev_ep_enable+0x158>
    1fe0:	2f00      	cmp	r7, #0
    1fe2:	bfb4      	ite	lt
    1fe4:	1c83      	addlt	r3, r0, #2
    1fe6:	4603      	movge	r3, r0
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    1fe8:	4606      	mov	r6, r0
    1fea:	0142      	lsls	r2, r0, #5
    1fec:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    1ff0:	f892 4100 	ldrb.w	r4, [r2, #256]	; 0x100
    1ff4:	b2e4      	uxtb	r4, r4
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    1ff6:	2802      	cmp	r0, #2
    1ff8:	f240 809f 	bls.w	213a <_usb_d_dev_ep_enable+0x166>
		return -USB_ERR_PARAM;
    1ffc:	f06f 0011 	mvn.w	r0, #17
    2000:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (epcfg & (USB_DEVICE_EPCFG_EPTYPE1_Msk | USB_DEVICE_EPCFG_EPTYPE0_Msk)) {
    2002:	f014 0f77 	tst.w	r4, #119	; 0x77
    2006:	f040 8088 	bne.w	211a <_usb_d_dev_ep_enable+0x146>
    200a:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    200e:	2111      	movs	r1, #17
    2010:	f882 1100 	strb.w	r1, [r2, #256]	; 0x100
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    2014:	4c97      	ldr	r4, [pc, #604]	; (2274 <_usb_d_dev_ep_enable+0x2a0>)
    2016:	eb04 018e 	add.w	r1, r4, lr, lsl #2
    201a:	f8b1 4084 	ldrh.w	r4, [r1, #132]	; 0x84
    201e:	4996      	ldr	r1, [pc, #600]	; (2278 <_usb_d_dev_ep_enable+0x2a4>)
    2020:	ea01 3184 	and.w	r1, r1, r4, lsl #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    2024:	f5b4 7f00 	cmp.w	r4, #512	; 0x200
    2028:	f200 80cc 	bhi.w	21c4 <_usb_d_dev_ep_enable+0x1f0>
    202c:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
    2030:	f200 810a 	bhi.w	2248 <_usb_d_dev_ep_enable+0x274>
    2034:	2c80      	cmp	r4, #128	; 0x80
    2036:	f200 80f9 	bhi.w	222c <_usb_d_dev_ep_enable+0x258>
    203a:	2c40      	cmp	r4, #64	; 0x40
    203c:	f200 810b 	bhi.w	2256 <_usb_d_dev_ep_enable+0x282>
    2040:	2c20      	cmp	r4, #32
    2042:	f200 80fa 	bhi.w	223a <_usb_d_dev_ep_enable+0x266>
    2046:	2c10      	cmp	r4, #16
    2048:	f200 810c 	bhi.w	2264 <_usb_d_dev_ep_enable+0x290>
    204c:	2c08      	cmp	r4, #8
    204e:	bf94      	ite	ls
    2050:	2700      	movls	r7, #0
    2052:	2701      	movhi	r7, #1
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    2054:	ea41 7107 	orr.w	r1, r1, r7, lsl #28
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    2058:	6041      	str	r1, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    205a:	f3c4 010d 	ubfx	r1, r4, #0, #14
    205e:	e0b7      	b.n	21d0 <_usb_d_dev_ep_enable+0x1fc>
		if (epcfg & USB_DEVICE_EPCFG_EPTYPE1_Msk) {
    2060:	f014 0f70 	tst.w	r4, #112	; 0x70
    2064:	d15c      	bne.n	2120 <_usb_d_dev_ep_enable+0x14c>
		epcfg |= USB_DEVICE_EPCFG_EPTYPE1(ept->flags.bits.eptype);
    2066:	4d83      	ldr	r5, [pc, #524]	; (2274 <_usb_d_dev_ep_enable+0x2a0>)
    2068:	009f      	lsls	r7, r3, #2
    206a:	18f9      	adds	r1, r7, r3
    206c:	eb05 0181 	add.w	r1, r5, r1, lsl #2
    2070:	f891 1087 	ldrb.w	r1, [r1, #135]	; 0x87
    2074:	0109      	lsls	r1, r1, #4
    2076:	f001 0170 	and.w	r1, r1, #112	; 0x70
    207a:	430c      	orrs	r4, r1
    207c:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    2080:	f882 4100 	strb.w	r4, [r2, #256]	; 0x100
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    2084:	443b      	add	r3, r7
    2086:	eb05 0583 	add.w	r5, r5, r3, lsl #2
    208a:	f8b5 3084 	ldrh.w	r3, [r5, #132]	; 0x84
    208e:	f3c3 010d 	ubfx	r1, r3, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    2092:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    2096:	d80f      	bhi.n	20b8 <_usb_d_dev_ep_enable+0xe4>
    2098:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    209c:	d819      	bhi.n	20d2 <_usb_d_dev_ep_enable+0xfe>
    209e:	2b80      	cmp	r3, #128	; 0x80
    20a0:	d819      	bhi.n	20d6 <_usb_d_dev_ep_enable+0x102>
    20a2:	2b40      	cmp	r3, #64	; 0x40
    20a4:	d819      	bhi.n	20da <_usb_d_dev_ep_enable+0x106>
    20a6:	2b20      	cmp	r3, #32
    20a8:	d819      	bhi.n	20de <_usb_d_dev_ep_enable+0x10a>
    20aa:	2b10      	cmp	r3, #16
    20ac:	d819      	bhi.n	20e2 <_usb_d_dev_ep_enable+0x10e>
    20ae:	2b08      	cmp	r3, #8
    20b0:	bf94      	ite	ls
    20b2:	2300      	movls	r3, #0
    20b4:	2301      	movhi	r3, #1
    20b6:	e000      	b.n	20ba <_usb_d_dev_ep_enable+0xe6>
    20b8:	2307      	movs	r3, #7
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    20ba:	ea41 7303 	orr.w	r3, r1, r3, lsl #28
    20be:	6143      	str	r3, [r0, #20]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    20c0:	2380      	movs	r3, #128	; 0x80
    20c2:	f882 3104 	strb.w	r3, [r2, #260]	; 0x104
	bank->STATUS_BK.reg     = 0;
    20c6:	4b6b      	ldr	r3, [pc, #428]	; (2274 <_usb_d_dev_ep_enable+0x2a0>)
    20c8:	eb03 1646 	add.w	r6, r3, r6, lsl #5
    20cc:	2000      	movs	r0, #0
    20ce:	76b0      	strb	r0, [r6, #26]
    20d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    20d2:	2306      	movs	r3, #6
    20d4:	e7f1      	b.n	20ba <_usb_d_dev_ep_enable+0xe6>
    20d6:	2305      	movs	r3, #5
    20d8:	e7ef      	b.n	20ba <_usb_d_dev_ep_enable+0xe6>
    20da:	2304      	movs	r3, #4
    20dc:	e7ed      	b.n	20ba <_usb_d_dev_ep_enable+0xe6>
    20de:	2303      	movs	r3, #3
    20e0:	e7eb      	b.n	20ba <_usb_d_dev_ep_enable+0xe6>
    20e2:	2302      	movs	r3, #2
    20e4:	e7e9      	b.n	20ba <_usb_d_dev_ep_enable+0xe6>
    20e6:	2107      	movs	r1, #7
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    20e8:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    20ec:	6043      	str	r3, [r0, #4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    20ee:	2340      	movs	r3, #64	; 0x40
    20f0:	f882 3105 	strb.w	r3, [r2, #261]	; 0x105
	bank->STATUS_BK.reg     = 0;
    20f4:	4b5f      	ldr	r3, [pc, #380]	; (2274 <_usb_d_dev_ep_enable+0x2a0>)
    20f6:	eb03 1646 	add.w	r6, r3, r6, lsl #5
    20fa:	2000      	movs	r0, #0
    20fc:	72b0      	strb	r0, [r6, #10]
    20fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    2100:	2106      	movs	r1, #6
    2102:	e7f1      	b.n	20e8 <_usb_d_dev_ep_enable+0x114>
    2104:	2105      	movs	r1, #5
    2106:	e7ef      	b.n	20e8 <_usb_d_dev_ep_enable+0x114>
    2108:	2104      	movs	r1, #4
    210a:	e7ed      	b.n	20e8 <_usb_d_dev_ep_enable+0x114>
    210c:	2103      	movs	r1, #3
    210e:	e7eb      	b.n	20e8 <_usb_d_dev_ep_enable+0x114>
    2110:	2102      	movs	r1, #2
    2112:	e7e9      	b.n	20e8 <_usb_d_dev_ep_enable+0x114>
		return -USB_ERR_PARAM;
    2114:	f06f 0011 	mvn.w	r0, #17
    2118:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return -USB_ERR_REDO;
    211a:	f06f 0013 	mvn.w	r0, #19
    211e:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return -USB_ERR_REDO;
    2120:	f06f 0013 	mvn.w	r0, #19
    2124:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return -USB_ERR_REDO;
    2126:	f06f 0013 	mvn.w	r0, #19
    212a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    212c:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    2130:	f893 4100 	ldrb.w	r4, [r3, #256]	; 0x100
    2134:	b2e4      	uxtb	r4, r4
    2136:	2600      	movs	r6, #0
	return &dev_inst.ep[ep_index];
    2138:	4633      	mov	r3, r6
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    213a:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    213e:	494d      	ldr	r1, [pc, #308]	; (2274 <_usb_d_dev_ep_enable+0x2a0>)
    2140:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    2144:	f892 5086 	ldrb.w	r5, [r2, #134]	; 0x86
    2148:	2dff      	cmp	r5, #255	; 0xff
    214a:	d0e3      	beq.n	2114 <_usb_d_dev_ep_enable+0x140>
    214c:	0172      	lsls	r2, r6, #5
	bank = prvt_inst.desc_table[epn].DeviceDescBank;
    214e:	1888      	adds	r0, r1, r2
	if (ept->flags.bits.eptype == USB_D_EPTYPE_CTRL) {
    2150:	eb03 0e83 	add.w	lr, r3, r3, lsl #2
    2154:	eb01 018e 	add.w	r1, r1, lr, lsl #2
    2158:	f891 1087 	ldrb.w	r1, [r1, #135]	; 0x87
    215c:	f001 0107 	and.w	r1, r1, #7
    2160:	2901      	cmp	r1, #1
    2162:	f43f af4e 	beq.w	2002 <_usb_d_dev_ep_enable+0x2e>
	} else if (dir) {
    2166:	2f00      	cmp	r7, #0
    2168:	f6ff af7a 	blt.w	2060 <_usb_d_dev_ep_enable+0x8c>
		if (epcfg & USB_DEVICE_EPCFG_EPTYPE0_Msk) {
    216c:	f014 0f07 	tst.w	r4, #7
    2170:	d1d9      	bne.n	2126 <_usb_d_dev_ep_enable+0x152>
		epcfg |= USB_DEVICE_EPCFG_EPTYPE0(ept->flags.bits.eptype);
    2172:	4d40      	ldr	r5, [pc, #256]	; (2274 <_usb_d_dev_ep_enable+0x2a0>)
    2174:	009f      	lsls	r7, r3, #2
    2176:	18f9      	adds	r1, r7, r3
    2178:	eb05 0181 	add.w	r1, r5, r1, lsl #2
    217c:	f891 1087 	ldrb.w	r1, [r1, #135]	; 0x87
    2180:	f001 0107 	and.w	r1, r1, #7
    2184:	430c      	orrs	r4, r1
    2186:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    218a:	f882 4100 	strb.w	r4, [r2, #256]	; 0x100
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    218e:	443b      	add	r3, r7
    2190:	eb05 0583 	add.w	r5, r5, r3, lsl #2
    2194:	f8b5 1084 	ldrh.w	r1, [r5, #132]	; 0x84
    2198:	4b37      	ldr	r3, [pc, #220]	; (2278 <_usb_d_dev_ep_enable+0x2a4>)
    219a:	ea03 3381 	and.w	r3, r3, r1, lsl #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    219e:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    21a2:	d8a0      	bhi.n	20e6 <_usb_d_dev_ep_enable+0x112>
    21a4:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
    21a8:	d8aa      	bhi.n	2100 <_usb_d_dev_ep_enable+0x12c>
    21aa:	2980      	cmp	r1, #128	; 0x80
    21ac:	d8aa      	bhi.n	2104 <_usb_d_dev_ep_enable+0x130>
    21ae:	2940      	cmp	r1, #64	; 0x40
    21b0:	d8aa      	bhi.n	2108 <_usb_d_dev_ep_enable+0x134>
    21b2:	2920      	cmp	r1, #32
    21b4:	d8aa      	bhi.n	210c <_usb_d_dev_ep_enable+0x138>
    21b6:	2910      	cmp	r1, #16
    21b8:	d8aa      	bhi.n	2110 <_usb_d_dev_ep_enable+0x13c>
    21ba:	2908      	cmp	r1, #8
    21bc:	bf94      	ite	ls
    21be:	2100      	movls	r1, #0
    21c0:	2101      	movhi	r1, #1
    21c2:	e791      	b.n	20e8 <_usb_d_dev_ep_enable+0x114>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    21c4:	f041 41e0 	orr.w	r1, r1, #1879048192	; 0x70000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    21c8:	6041      	str	r1, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    21ca:	f3c4 010d 	ubfx	r1, r4, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    21ce:	2707      	movs	r7, #7
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    21d0:	ea41 7107 	orr.w	r1, r1, r7, lsl #28
    21d4:	6141      	str	r1, [r0, #20]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    21d6:	2140      	movs	r1, #64	; 0x40
    21d8:	f882 1105 	strb.w	r1, [r2, #261]	; 0x105
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    21dc:	2080      	movs	r0, #128	; 0x80
    21de:	f882 0104 	strb.w	r0, [r2, #260]	; 0x104
	bank->STATUS_BK.reg     = 0;
    21e2:	4a24      	ldr	r2, [pc, #144]	; (2274 <_usb_d_dev_ep_enable+0x2a0>)
    21e4:	eb02 1646 	add.w	r6, r2, r6, lsl #5
    21e8:	2000      	movs	r0, #0
    21ea:	72b0      	strb	r0, [r6, #10]
    21ec:	76b0      	strb	r0, [r6, #26]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    21ee:	f005 050f 	and.w	r5, r5, #15
	_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    21f2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    21f6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    21fa:	f8d3 6080 	ldr.w	r6, [r3, #128]	; 0x80
	bank->ADDR.reg          = addr;
    21fe:	016d      	lsls	r5, r5, #5
    2200:	1953      	adds	r3, r2, r5
    2202:	5156      	str	r6, [r2, r5]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    2204:	685a      	ldr	r2, [r3, #4]
    2206:	f364 329b 	bfi	r2, r4, #14, #14
    220a:	605a      	str	r2, [r3, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    220c:	685a      	ldr	r2, [r3, #4]
    220e:	f360 020d 	bfi	r2, r0, #0, #14
    2212:	605a      	str	r2, [r3, #4]
    2214:	f105 4382 	add.w	r3, r5, #1090519040	; 0x41000000
    2218:	22b0      	movs	r2, #176	; 0xb0
    221a:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    221e:	f883 1105 	strb.w	r1, [r3, #261]	; 0x105
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    2222:	461d      	mov	r5, r3
    2224:	2310      	movs	r3, #16
    2226:	f885 3109 	strb.w	r3, [r5, #265]	; 0x109
    222a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    222c:	f041 41a0 	orr.w	r1, r1, #1342177280	; 0x50000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    2230:	6041      	str	r1, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    2232:	f3c4 010d 	ubfx	r1, r4, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    2236:	2705      	movs	r7, #5
    2238:	e7ca      	b.n	21d0 <_usb_d_dev_ep_enable+0x1fc>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    223a:	f041 5140 	orr.w	r1, r1, #805306368	; 0x30000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    223e:	6041      	str	r1, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    2240:	f3c4 010d 	ubfx	r1, r4, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    2244:	2703      	movs	r7, #3
    2246:	e7c3      	b.n	21d0 <_usb_d_dev_ep_enable+0x1fc>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    2248:	f041 41c0 	orr.w	r1, r1, #1610612736	; 0x60000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    224c:	6041      	str	r1, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    224e:	f3c4 010d 	ubfx	r1, r4, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    2252:	2706      	movs	r7, #6
    2254:	e7bc      	b.n	21d0 <_usb_d_dev_ep_enable+0x1fc>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    2256:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    225a:	6041      	str	r1, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    225c:	f3c4 010d 	ubfx	r1, r4, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    2260:	2704      	movs	r7, #4
    2262:	e7b5      	b.n	21d0 <_usb_d_dev_ep_enable+0x1fc>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    2264:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    2268:	6041      	str	r1, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    226a:	f3c4 010d 	ubfx	r1, r4, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    226e:	2702      	movs	r7, #2
    2270:	e7ae      	b.n	21d0 <_usb_d_dev_ep_enable+0x1fc>
    2272:	bf00      	nop
    2274:	200005a8 	.word	0x200005a8
    2278:	0fffc000 	.word	0x0fffc000

0000227c <_usb_d_dev_ep_stall>:
{
    227c:	b470      	push	{r4, r5, r6}
    227e:	b243      	sxtb	r3, r0
	bool                  dir = USB_EP_GET_DIR(ep);
    2280:	0fdc      	lsrs	r4, r3, #31
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    2282:	f010 000f 	ands.w	r0, r0, #15
    2286:	d008      	beq.n	229a <_usb_d_dev_ep_stall+0x1e>
    2288:	2b00      	cmp	r3, #0
    228a:	bfb4      	ite	lt
    228c:	1c83      	addlt	r3, r0, #2
    228e:	4603      	movge	r3, r0
	if (epn > CONF_USB_D_MAX_EP_N) {
    2290:	2802      	cmp	r0, #2
    2292:	d903      	bls.n	229c <_usb_d_dev_ep_stall+0x20>
		return -USB_ERR_PARAM;
    2294:	f06f 0011 	mvn.w	r0, #17
    2298:	e018      	b.n	22cc <_usb_d_dev_ep_stall+0x50>
	return &dev_inst.ep[ep_index];
    229a:	2300      	movs	r3, #0
	if (USB_EP_STALL_SET == ctrl) {
    229c:	2901      	cmp	r1, #1
    229e:	d017      	beq.n	22d0 <_usb_d_dev_ep_stall+0x54>
	} else if (USB_EP_STALL_CLR == ctrl) {
    22a0:	2900      	cmp	r1, #0
    22a2:	d03a      	beq.n	231a <_usb_d_dev_ep_stall+0x9e>
	uint8_t epn = USB_EP_GET_N(ept->ep);
    22a4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    22a8:	4a45      	ldr	r2, [pc, #276]	; (23c0 <_usb_d_dev_ep_stall+0x144>)
    22aa:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    22ae:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    22b2:	f003 030f 	and.w	r3, r3, #15
    22b6:	015b      	lsls	r3, r3, #5
    22b8:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    22bc:	f893 2106 	ldrb.w	r2, [r3, #262]	; 0x106
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    22c0:	2310      	movs	r3, #16
    22c2:	40a3      	lsls	r3, r4
    22c4:	421a      	tst	r2, r3
    22c6:	bf14      	ite	ne
    22c8:	2001      	movne	r0, #1
    22ca:	2000      	moveq	r0, #0
}
    22cc:	bc70      	pop	{r4, r5, r6}
    22ce:	4770      	bx	lr
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    22d0:	2510      	movs	r5, #16
    22d2:	40a5      	lsls	r5, r4
    22d4:	b2ed      	uxtb	r5, r5
	uint8_t epn = USB_EP_GET_N(ept->ep);
    22d6:	493a      	ldr	r1, [pc, #232]	; (23c0 <_usb_d_dev_ep_stall+0x144>)
    22d8:	009e      	lsls	r6, r3, #2
    22da:	18f2      	adds	r2, r6, r3
    22dc:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    22e0:	f892 2086 	ldrb.w	r2, [r2, #134]	; 0x86
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    22e4:	f002 020f 	and.w	r2, r2, #15
    22e8:	0150      	lsls	r0, r2, #5
    22ea:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
    22ee:	f880 5105 	strb.w	r5, [r0, #261]	; 0x105
	_usbd_ep_int_en(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    22f2:	2020      	movs	r0, #32
    22f4:	fa00 f404 	lsl.w	r4, r0, r4
	hri_usbendpoint_set_EPINTEN_reg(USB, epn, flags);
    22f8:	b2e4      	uxtb	r4, r4
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    22fa:	0152      	lsls	r2, r2, #5
    22fc:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    2300:	f882 4109 	strb.w	r4, [r2, #265]	; 0x109
	ept->flags.bits.is_stalled = 1;
    2304:	4433      	add	r3, r6
    2306:	eb01 0383 	add.w	r3, r1, r3, lsl #2
    230a:	f893 2087 	ldrb.w	r2, [r3, #135]	; 0x87
    230e:	f042 0208 	orr.w	r2, r2, #8
    2312:	f883 2087 	strb.w	r2, [r3, #135]	; 0x87
		rc = _usb_d_dev_ep_stall_set(ept, dir);
    2316:	2000      	movs	r0, #0
    2318:	e7d8      	b.n	22cc <_usb_d_dev_ep_stall+0x50>
	uint8_t epn        = USB_EP_GET_N(ept->ep);
    231a:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    231e:	4928      	ldr	r1, [pc, #160]	; (23c0 <_usb_d_dev_ep_stall+0x144>)
    2320:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    2324:	f892 2086 	ldrb.w	r2, [r2, #134]	; 0x86
    2328:	f002 020f 	and.w	r2, r2, #15
    232c:	0151      	lsls	r1, r2, #5
    232e:	f101 4182 	add.w	r1, r1, #1090519040	; 0x41000000
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    2332:	f891 5106 	ldrb.w	r5, [r1, #262]	; 0x106
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    2336:	2010      	movs	r0, #16
    2338:	40a0      	lsls	r0, r4
	if (!is_stalled) {
    233a:	4205      	tst	r5, r0
    233c:	d03c      	beq.n	23b8 <_usb_d_dev_ep_stall+0x13c>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    233e:	b2c0      	uxtb	r0, r0
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    2340:	f881 0104 	strb.w	r0, [r1, #260]	; 0x104
	_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    2344:	2020      	movs	r0, #32
    2346:	40a0      	lsls	r0, r4
	hri_usbendpoint_clear_EPINTEN_reg(USB, epn, flags);
    2348:	b2c5      	uxtb	r5, r0
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    234a:	f881 5108 	strb.w	r5, [r1, #264]	; 0x108
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    234e:	f891 2107 	ldrb.w	r2, [r1, #263]	; 0x107
	if (_usbd_ep_is_stall_sent(epn, dir)) {
    2352:	4202      	tst	r2, r0
    2354:	d007      	beq.n	2366 <_usb_d_dev_ep_stall+0xea>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    2356:	f881 5107 	strb.w	r5, [r1, #263]	; 0x107
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
    235a:	2201      	movs	r2, #1
    235c:	fa02 f404 	lsl.w	r4, r2, r4
    2360:	b2e4      	uxtb	r4, r4
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    2362:	f881 4104 	strb.w	r4, [r1, #260]	; 0x104
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    2366:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    236a:	4815      	ldr	r0, [pc, #84]	; (23c0 <_usb_d_dev_ep_stall+0x144>)
    236c:	eb00 0282 	add.w	r2, r0, r2, lsl #2
    2370:	f892 2087 	ldrb.w	r2, [r2, #135]	; 0x87
    2374:	f002 0207 	and.w	r2, r2, #7
    2378:	2a01      	cmp	r2, #1
    237a:	d00c      	beq.n	2396 <_usb_d_dev_ep_stall+0x11a>
		ept->flags.bits.is_stalled = 0;
    237c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    2380:	4a0f      	ldr	r2, [pc, #60]	; (23c0 <_usb_d_dev_ep_stall+0x144>)
    2382:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    2386:	f893 2087 	ldrb.w	r2, [r3, #135]	; 0x87
    238a:	f36f 02c3 	bfc	r2, #3, #1
    238e:	f883 2087 	strb.w	r2, [r3, #135]	; 0x87
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
    2392:	2000      	movs	r0, #0
    2394:	e79a      	b.n	22cc <_usb_d_dev_ep_stall+0x50>
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    2396:	f891 2106 	ldrb.w	r2, [r1, #262]	; 0x106
		if ((hri_usbendpoint_read_EPSTATUS_reg(USB, epn) & USB_DEVICE_EPSTATUS_STALLRQ_Msk) == 0) {
    239a:	f012 0f30 	tst.w	r2, #48	; 0x30
    239e:	d10d      	bne.n	23bc <_usb_d_dev_ep_stall+0x140>
			ept->flags.bits.is_stalled = 0;
    23a0:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    23a4:	eb00 0382 	add.w	r3, r0, r2, lsl #2
    23a8:	f893 2087 	ldrb.w	r2, [r3, #135]	; 0x87
    23ac:	f36f 02c3 	bfc	r2, #3, #1
    23b0:	f883 2087 	strb.w	r2, [r3, #135]	; 0x87
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
    23b4:	2000      	movs	r0, #0
    23b6:	e789      	b.n	22cc <_usb_d_dev_ep_stall+0x50>
    23b8:	2000      	movs	r0, #0
    23ba:	e787      	b.n	22cc <_usb_d_dev_ep_stall+0x50>
    23bc:	2000      	movs	r0, #0
    23be:	e785      	b.n	22cc <_usb_d_dev_ep_stall+0x50>
    23c0:	200005a8 	.word	0x200005a8

000023c4 <_usb_d_dev_ep_read_req>:

int32_t _usb_d_dev_ep_read_req(const uint8_t ep, uint8_t *req_buf)
{
    23c4:	b430      	push	{r4, r5}
	uint8_t            epn   = USB_EP_GET_N(ep);
    23c6:	f000 040f 	and.w	r4, r0, #15
    23ca:	0163      	lsls	r3, r4, #5
	UsbDeviceDescBank *bank  = prvt_inst.desc_table[epn].DeviceDescBank;
    23cc:	4a14      	ldr	r2, [pc, #80]	; (2420 <_usb_d_dev_ep_read_req+0x5c>)
    23ce:	18d0      	adds	r0, r2, r3
	uint32_t           addr  = bank[0].ADDR.reg;
    23d0:	58d5      	ldr	r5, [r2, r3]
	uint16_t           bytes = bank[0].PCKSIZE.bit.BYTE_COUNT;
    23d2:	6840      	ldr	r0, [r0, #4]
    23d4:	f3c0 000d 	ubfx	r0, r0, #0, #14

	if (epn > CONF_USB_D_MAX_EP_N || !req_buf) {
    23d8:	2c02      	cmp	r4, #2
    23da:	d817      	bhi.n	240c <_usb_d_dev_ep_read_req+0x48>
    23dc:	b1c9      	cbz	r1, 2412 <_usb_d_dev_ep_read_req+0x4e>
    23de:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    23e2:	f893 2100 	ldrb.w	r2, [r3, #256]	; 0x100
    23e6:	b2d2      	uxtb	r2, r2
		return -USB_ERR_PARAM;
	}
	if (!_usbd_ep_is_ctrl(epn)) {
    23e8:	2a11      	cmp	r2, #17
    23ea:	d115      	bne.n	2418 <_usb_d_dev_ep_read_req+0x54>
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    23ec:	f893 2107 	ldrb.w	r2, [r3, #263]	; 0x107
		return -USB_ERR_FUNC;
	}
	if (!_usbd_ep_is_setup(epn)) {
    23f0:	f012 0f10 	tst.w	r2, #16
    23f4:	d102      	bne.n	23fc <_usb_d_dev_ep_read_req+0x38>
		return ERR_NONE;
    23f6:	2000      	movs	r0, #0
	}
	memcpy(req_buf, (void *)addr, 8);
	_usbd_ep_ack_setup(epn);

	return bytes;
}
    23f8:	bc30      	pop	{r4, r5}
    23fa:	4770      	bx	lr
	memcpy(req_buf, (void *)addr, 8);
    23fc:	682c      	ldr	r4, [r5, #0]
    23fe:	686a      	ldr	r2, [r5, #4]
    2400:	600c      	str	r4, [r1, #0]
    2402:	604a      	str	r2, [r1, #4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    2404:	2210      	movs	r2, #16
    2406:	f883 2107 	strb.w	r2, [r3, #263]	; 0x107
	return bytes;
    240a:	e7f5      	b.n	23f8 <_usb_d_dev_ep_read_req+0x34>
		return -USB_ERR_PARAM;
    240c:	f06f 0011 	mvn.w	r0, #17
    2410:	e7f2      	b.n	23f8 <_usb_d_dev_ep_read_req+0x34>
    2412:	f06f 0011 	mvn.w	r0, #17
    2416:	e7ef      	b.n	23f8 <_usb_d_dev_ep_read_req+0x34>
		return -USB_ERR_FUNC;
    2418:	f06f 0012 	mvn.w	r0, #18
    241c:	e7ec      	b.n	23f8 <_usb_d_dev_ep_read_req+0x34>
    241e:	bf00      	nop
    2420:	200005a8 	.word	0x200005a8

00002424 <_usb_d_dev_ep_trans>:

int32_t _usb_d_dev_ep_trans(const struct usb_d_transfer *trans)
{
    2424:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2428:	b083      	sub	sp, #12
	uint8_t               epn = USB_EP_GET_N(trans->ep);
    242a:	7a03      	ldrb	r3, [r0, #8]
    242c:	b25e      	sxtb	r6, r3
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    242e:	f013 030f 	ands.w	r3, r3, #15
    2432:	f000 80c2 	beq.w	25ba <_usb_d_dev_ep_trans+0x196>
    2436:	2e00      	cmp	r6, #0
    2438:	bfb4      	ite	lt
    243a:	1c9a      	addlt	r2, r3, #2
    243c:	461a      	movge	r2, r3
	return &dev_inst.ep[ep_index];
    243e:	4614      	mov	r4, r2
    2440:	4969      	ldr	r1, [pc, #420]	; (25e8 <_usb_d_dev_ep_trans+0x1c4>)
    2442:	f101 0760 	add.w	r7, r1, #96	; 0x60
    2446:	1c55      	adds	r5, r2, #1
    2448:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    244c:	eb07 0785 	add.w	r7, r7, r5, lsl #2
	bool                  dir = USB_EP_GET_DIR(trans->ep);
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);

	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    2450:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    2454:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    2458:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
    245c:	f240 31ff 	movw	r1, #1023	; 0x3ff
    2460:	428a      	cmp	r2, r1
    2462:	d025      	beq.n	24b0 <_usb_d_dev_ep_trans+0x8c>
    2464:	1e55      	subs	r5, r2, #1
    2466:	b2ad      	uxth	r5, r5
	bool     size_n_aligned = (trans->size & size_mask);
    2468:	6841      	ldr	r1, [r0, #4]
    246a:	400d      	ands	r5, r1

	bool use_cache = false;

	volatile hal_atomic_t flags;

	if (epn > CONF_USB_D_MAX_EP_N) {
    246c:	2b02      	cmp	r3, #2
    246e:	f200 8092 	bhi.w	2596 <_usb_d_dev_ep_trans+0x172>
	 * 1. Buffer not in RAM (cache all).
	 * 2. IN/OUT with unaligned buffer (cache all).
	 * 3. OUT with unaligned packet size (cache last packet).
	 * 4. OUT size < 8 (sub-case for 3).
	 */
	if (!_usb_is_addr4dma(trans->buf, trans->size) || (!_usb_is_aligned(trans->buf))
    2472:	6803      	ldr	r3, [r0, #0]
    2474:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
    2478:	d31c      	bcc.n	24b4 <_usb_d_dev_ep_trans+0x90>
    247a:	eb03 0c01 	add.w	ip, r3, r1
    247e:	f8df e180 	ldr.w	lr, [pc, #384]	; 2600 <_usb_d_dev_ep_trans+0x1dc>
    2482:	45f4      	cmp	ip, lr
    2484:	d816      	bhi.n	24b4 <_usb_d_dev_ep_trans+0x90>
    2486:	f013 0f03 	tst.w	r3, #3
    248a:	d113      	bne.n	24b4 <_usb_d_dev_ep_trans+0x90>
	    || (!dir && (trans->size < ept->size))) {
    248c:	2e00      	cmp	r6, #0
    248e:	db2a      	blt.n	24e6 <_usb_d_dev_ep_trans+0xc2>
    2490:	428a      	cmp	r2, r1
    2492:	f200 809c 	bhi.w	25ce <_usb_d_dev_ep_trans+0x1aa>
			return -USB_ERR_FUNC;
		}
		/* Use cache all the time. */
		use_cache = true;
	}
	if (!dir && size_n_aligned) {
    2496:	b34d      	cbz	r5, 24ec <_usb_d_dev_ep_trans+0xc8>
		if (!ept->cache) {
    2498:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    249c:	4a52      	ldr	r2, [pc, #328]	; (25e8 <_usb_d_dev_ep_trans+0x1c4>)
    249e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    24a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    24a6:	2b00      	cmp	r3, #0
    24a8:	d07b      	beq.n	25a2 <_usb_d_dev_ep_trans+0x17e>
	bool use_cache = false;
    24aa:	f04f 0800 	mov.w	r8, #0
    24ae:	e00c      	b.n	24ca <_usb_d_dev_ep_trans+0xa6>
	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    24b0:	4615      	mov	r5, r2
    24b2:	e7d9      	b.n	2468 <_usb_d_dev_ep_trans+0x44>
		if (!ept->cache) {
    24b4:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    24b8:	4a4b      	ldr	r2, [pc, #300]	; (25e8 <_usb_d_dev_ep_trans+0x1c4>)
    24ba:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    24be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    24c2:	2b00      	cmp	r3, #0
    24c4:	d06a      	beq.n	259c <_usb_d_dev_ep_trans+0x178>
		use_cache = true;
    24c6:	f04f 0801 	mov.w	r8, #1
		}
		/* Set 'use_cache' on last packet. */
	}

	/* Check halt */
	if (ept->flags.bits.is_stalled) {
    24ca:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    24ce:	4a46      	ldr	r2, [pc, #280]	; (25e8 <_usb_d_dev_ep_trans+0x1c4>)
    24d0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    24d4:	f893 3087 	ldrb.w	r3, [r3, #135]	; 0x87
    24d8:	f013 0f08 	tst.w	r3, #8
    24dc:	d009      	beq.n	24f2 <_usb_d_dev_ep_trans+0xce>
		return USB_HALTED;
    24de:	2002      	movs	r0, #2
	} else {
		_usb_d_dev_out_next(ept, false);
	}

	return ERR_NONE;
}
    24e0:	b003      	add	sp, #12
    24e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	bool use_cache = false;
    24e6:	f04f 0800 	mov.w	r8, #0
    24ea:	e7ee      	b.n	24ca <_usb_d_dev_ep_trans+0xa6>
    24ec:	f04f 0800 	mov.w	r8, #0
    24f0:	e7eb      	b.n	24ca <_usb_d_dev_ep_trans+0xa6>
    24f2:	4682      	mov	sl, r0
	atomic_enter_critical(&flags);
    24f4:	a801      	add	r0, sp, #4
    24f6:	4b3d      	ldr	r3, [pc, #244]	; (25ec <_usb_d_dev_ep_trans+0x1c8>)
    24f8:	4798      	blx	r3
	if (_usb_d_dev_ep_is_busy(ept)) {
    24fa:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    24fe:	4a3a      	ldr	r2, [pc, #232]	; (25e8 <_usb_d_dev_ep_trans+0x1c4>)
    2500:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    2504:	f893 3087 	ldrb.w	r3, [r3, #135]	; 0x87
    2508:	f013 0f40 	tst.w	r3, #64	; 0x40
    250c:	d13c      	bne.n	2588 <_usb_d_dev_ep_trans+0x164>
	ept->flags.bits.is_busy = 1;
    250e:	eb04 0984 	add.w	r9, r4, r4, lsl #2
    2512:	4b35      	ldr	r3, [pc, #212]	; (25e8 <_usb_d_dev_ep_trans+0x1c4>)
    2514:	eb03 0989 	add.w	r9, r3, r9, lsl #2
    2518:	f899 3087 	ldrb.w	r3, [r9, #135]	; 0x87
    251c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    2520:	f889 3087 	strb.w	r3, [r9, #135]	; 0x87
	atomic_leave_critical(&flags);
    2524:	a801      	add	r0, sp, #4
    2526:	4b32      	ldr	r3, [pc, #200]	; (25f0 <_usb_d_dev_ep_trans+0x1cc>)
    2528:	4798      	blx	r3
	ept->trans_buf   = trans->buf;
    252a:	f8da 3000 	ldr.w	r3, [sl]
    252e:	f8c9 3074 	str.w	r3, [r9, #116]	; 0x74
	ept->trans_size  = trans->size;
    2532:	f8da 3004 	ldr.w	r3, [sl, #4]
    2536:	f8c9 3078 	str.w	r3, [r9, #120]	; 0x78
	ept->trans_count = 0;
    253a:	2300      	movs	r3, #0
    253c:	f8c9 307c 	str.w	r3, [r9, #124]	; 0x7c
	bool                  dir = USB_EP_GET_DIR(trans->ep);
    2540:	0ff2      	lsrs	r2, r6, #31
	ept->flags.bits.dir       = dir;
    2542:	f899 3087 	ldrb.w	r3, [r9, #135]	; 0x87
    2546:	f362 13c7 	bfi	r3, r2, #7, #1
	ept->flags.bits.use_cache = use_cache;
    254a:	f368 1345 	bfi	r3, r8, #5, #1
    254e:	f889 3087 	strb.w	r3, [r9, #135]	; 0x87
	ept->flags.bits.need_zlp  = (trans->zlp && (!size_n_aligned));
    2552:	f89a 3009 	ldrb.w	r3, [sl, #9]
    2556:	b1e3      	cbz	r3, 2592 <_usb_d_dev_ep_trans+0x16e>
    2558:	fab5 f585 	clz	r5, r5
    255c:	096d      	lsrs	r5, r5, #5
    255e:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    2562:	4b21      	ldr	r3, [pc, #132]	; (25e8 <_usb_d_dev_ep_trans+0x1c4>)
    2564:	eb03 0484 	add.w	r4, r3, r4, lsl #2
    2568:	f894 3087 	ldrb.w	r3, [r4, #135]	; 0x87
    256c:	f365 1304 	bfi	r3, r5, #4, #1
    2570:	f884 3087 	strb.w	r3, [r4, #135]	; 0x87
	if (dir) {
    2574:	2e00      	cmp	r6, #0
		_usb_d_dev_in_next(ept, false);
    2576:	f04f 0100 	mov.w	r1, #0
    257a:	4638      	mov	r0, r7
    257c:	bfb4      	ite	lt
    257e:	4b1d      	ldrlt	r3, [pc, #116]	; (25f4 <_usb_d_dev_ep_trans+0x1d0>)
		_usb_d_dev_out_next(ept, false);
    2580:	4b1d      	ldrge	r3, [pc, #116]	; (25f8 <_usb_d_dev_ep_trans+0x1d4>)
    2582:	4798      	blx	r3
	return ERR_NONE;
    2584:	2000      	movs	r0, #0
    2586:	e7ab      	b.n	24e0 <_usb_d_dev_ep_trans+0xbc>
		atomic_leave_critical(&flags);
    2588:	a801      	add	r0, sp, #4
    258a:	4b19      	ldr	r3, [pc, #100]	; (25f0 <_usb_d_dev_ep_trans+0x1cc>)
    258c:	4798      	blx	r3
		return USB_BUSY;
    258e:	2001      	movs	r0, #1
    2590:	e7a6      	b.n	24e0 <_usb_d_dev_ep_trans+0xbc>
    2592:	2500      	movs	r5, #0
    2594:	e7e3      	b.n	255e <_usb_d_dev_ep_trans+0x13a>
		return -USB_ERR_PARAM;
    2596:	f06f 0011 	mvn.w	r0, #17
    259a:	e7a1      	b.n	24e0 <_usb_d_dev_ep_trans+0xbc>
			return -USB_ERR_FUNC;
    259c:	f06f 0012 	mvn.w	r0, #18
    25a0:	e79e      	b.n	24e0 <_usb_d_dev_ep_trans+0xbc>
			return -USB_ERR_PARAM;
    25a2:	f06f 0011 	mvn.w	r0, #17
    25a6:	e79b      	b.n	24e0 <_usb_d_dev_ep_trans+0xbc>
			return -USB_ERR_FUNC;
    25a8:	f06f 0012 	mvn.w	r0, #18
    25ac:	e798      	b.n	24e0 <_usb_d_dev_ep_trans+0xbc>
	bool     size_n_aligned = (trans->size & size_mask);
    25ae:	6841      	ldr	r1, [r0, #4]
    25b0:	f3c1 0509 	ubfx	r5, r1, #0, #10
	return &dev_inst.ep[ep_index];
    25b4:	4f11      	ldr	r7, [pc, #68]	; (25fc <_usb_d_dev_ep_trans+0x1d8>)
    25b6:	2400      	movs	r4, #0
    25b8:	e75b      	b.n	2472 <_usb_d_dev_ep_trans+0x4e>
	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    25ba:	4a0b      	ldr	r2, [pc, #44]	; (25e8 <_usb_d_dev_ep_trans+0x1c4>)
    25bc:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
    25c0:	f240 31ff 	movw	r1, #1023	; 0x3ff
    25c4:	428a      	cmp	r2, r1
    25c6:	d0f2      	beq.n	25ae <_usb_d_dev_ep_trans+0x18a>
	return &dev_inst.ep[ep_index];
    25c8:	4f0c      	ldr	r7, [pc, #48]	; (25fc <_usb_d_dev_ep_trans+0x1d8>)
    25ca:	2400      	movs	r4, #0
    25cc:	e74a      	b.n	2464 <_usb_d_dev_ep_trans+0x40>
		if (!ept->cache) {
    25ce:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    25d2:	4a05      	ldr	r2, [pc, #20]	; (25e8 <_usb_d_dev_ep_trans+0x1c4>)
    25d4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    25d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    25dc:	2b00      	cmp	r3, #0
    25de:	d0e3      	beq.n	25a8 <_usb_d_dev_ep_trans+0x184>
    25e0:	f04f 0801 	mov.w	r8, #1
    25e4:	e771      	b.n	24ca <_usb_d_dev_ep_trans+0xa6>
    25e6:	bf00      	nop
    25e8:	200005a8 	.word	0x200005a8
    25ec:	000031a9 	.word	0x000031a9
    25f0:	000031b7 	.word	0x000031b7
    25f4:	00001685 	.word	0x00001685
    25f8:	00001809 	.word	0x00001809
    25fc:	2000061c 	.word	0x2000061c
    2600:	20041fff 	.word	0x20041fff

00002604 <_usb_d_dev_register_callback>:
	return USB_OK;
}

void _usb_d_dev_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    2604:	4b06      	ldr	r3, [pc, #24]	; (2620 <_usb_d_dev_register_callback+0x1c>)
    2606:	2900      	cmp	r1, #0
    2608:	bf08      	it	eq
    260a:	4619      	moveq	r1, r3
	if (type == USB_D_CB_EVENT) {
    260c:	2801      	cmp	r0, #1
    260e:	d003      	beq.n	2618 <_usb_d_dev_register_callback+0x14>
		dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)f;
	} else if (type == USB_D_CB_SOF) {
    2610:	b908      	cbnz	r0, 2616 <_usb_d_dev_register_callback+0x12>
		dev_inst.callbacks.sof = (_usb_d_dev_sof_cb_t)f;
    2612:	4b04      	ldr	r3, [pc, #16]	; (2624 <_usb_d_dev_register_callback+0x20>)
    2614:	6619      	str	r1, [r3, #96]	; 0x60
    2616:	4770      	bx	lr
		dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)f;
    2618:	4b02      	ldr	r3, [pc, #8]	; (2624 <_usb_d_dev_register_callback+0x20>)
    261a:	6659      	str	r1, [r3, #100]	; 0x64
    261c:	4770      	bx	lr
    261e:	bf00      	nop
    2620:	000013fd 	.word	0x000013fd
    2624:	200005a8 	.word	0x200005a8

00002628 <_usb_d_dev_register_ep_callback>:
	}
}

void _usb_d_dev_register_ep_callback(const enum usb_d_dev_ep_cb_type type, const FUNC_PTR func)
{
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    2628:	4b09      	ldr	r3, [pc, #36]	; (2650 <_usb_d_dev_register_ep_callback+0x28>)
    262a:	2900      	cmp	r1, #0
    262c:	bf08      	it	eq
    262e:	4619      	moveq	r1, r3
	if (type == USB_D_DEV_EP_CB_SETUP) {
    2630:	4603      	mov	r3, r0
    2632:	b130      	cbz	r0, 2642 <_usb_d_dev_register_ep_callback+0x1a>
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
	} else if (type == USB_D_DEV_EP_CB_MORE) {
    2634:	2801      	cmp	r0, #1
    2636:	d007      	beq.n	2648 <_usb_d_dev_register_ep_callback+0x20>
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
	} else if (type == USB_D_DEV_EP_CB_DONE) {
    2638:	2802      	cmp	r0, #2
		dev_inst.ep_callbacks.done = (_usb_d_dev_ep_cb_done_t)f;
    263a:	bf04      	itt	eq
    263c:	4b05      	ldreq	r3, [pc, #20]	; (2654 <_usb_d_dev_register_ep_callback+0x2c>)
    263e:	6719      	streq	r1, [r3, #112]	; 0x70
    2640:	4770      	bx	lr
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
    2642:	4b04      	ldr	r3, [pc, #16]	; (2654 <_usb_d_dev_register_ep_callback+0x2c>)
    2644:	6699      	str	r1, [r3, #104]	; 0x68
    2646:	4770      	bx	lr
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
    2648:	4b02      	ldr	r3, [pc, #8]	; (2654 <_usb_d_dev_register_ep_callback+0x2c>)
    264a:	66d9      	str	r1, [r3, #108]	; 0x6c
    264c:	4770      	bx	lr
    264e:	bf00      	nop
    2650:	000013fd 	.word	0x000013fd
    2654:	200005a8 	.word	0x200005a8

00002658 <USB_0_Handler>:

/**
 * \brief USB interrupt handler
 */
void USB_0_Handler(void)
{
    2658:	b508      	push	{r3, lr}

	_usb_d_dev_handler();
    265a:	4b01      	ldr	r3, [pc, #4]	; (2660 <USB_0_Handler+0x8>)
    265c:	4798      	blx	r3
    265e:	bd08      	pop	{r3, pc}
    2660:	000019f9 	.word	0x000019f9

00002664 <USB_1_Handler>:
}
/**
 * \brief USB interrupt handler
 */
void USB_1_Handler(void)
{
    2664:	b508      	push	{r3, lr}

	_usb_d_dev_handler();
    2666:	4b01      	ldr	r3, [pc, #4]	; (266c <USB_1_Handler+0x8>)
    2668:	4798      	blx	r3
    266a:	bd08      	pop	{r3, pc}
    266c:	000019f9 	.word	0x000019f9

00002670 <USB_2_Handler>:
}
/**
 * \brief USB interrupt handler
 */
void USB_2_Handler(void)
{
    2670:	b508      	push	{r3, lr}

	_usb_d_dev_handler();
    2672:	4b01      	ldr	r3, [pc, #4]	; (2678 <USB_2_Handler+0x8>)
    2674:	4798      	blx	r3
    2676:	bd08      	pop	{r3, pc}
    2678:	000019f9 	.word	0x000019f9

0000267c <USB_3_Handler>:
}
/**
 * \brief USB interrupt handler
 */
void USB_3_Handler(void)
{
    267c:	b508      	push	{r3, lr}

	_usb_d_dev_handler();
    267e:	4b01      	ldr	r3, [pc, #4]	; (2684 <USB_3_Handler+0x8>)
    2680:	4798      	blx	r3
    2682:	bd08      	pop	{r3, pc}
    2684:	000019f9 	.word	0x000019f9

00002688 <cdcdf_acm_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    2688:	b5f0      	push	{r4, r5, r6, r7, lr}
    268a:	b083      	sub	sp, #12
	if (0x01 != ((req->bmRequestType >> 5) & 0x03)) { // class request
    268c:	780b      	ldrb	r3, [r1, #0]
    268e:	f3c3 1441 	ubfx	r4, r3, #5, #2
    2692:	2c01      	cmp	r4, #1
    2694:	d15e      	bne.n	2754 <cdcdf_acm_req+0xcc>
		return ERR_NOT_FOUND;
	}
	if ((req->wIndex == _cdcdf_acm_funcd.func_iface[0]) || (req->wIndex == _cdcdf_acm_funcd.func_iface[1])) {
    2696:	888c      	ldrh	r4, [r1, #4]
    2698:	4d35      	ldr	r5, [pc, #212]	; (2770 <cdcdf_acm_req+0xe8>)
    269a:	782d      	ldrb	r5, [r5, #0]
    269c:	42a5      	cmp	r5, r4
    269e:	d003      	beq.n	26a8 <cdcdf_acm_req+0x20>
    26a0:	4d33      	ldr	r5, [pc, #204]	; (2770 <cdcdf_acm_req+0xe8>)
    26a2:	786d      	ldrb	r5, [r5, #1]
    26a4:	42a5      	cmp	r5, r4
    26a6:	d158      	bne.n	275a <cdcdf_acm_req+0xd2>
    26a8:	4616      	mov	r6, r2
    26aa:	460c      	mov	r4, r1
    26ac:	4605      	mov	r5, r0
		if (req->bmRequestType & USB_EP_DIR_IN) {
    26ae:	f013 0f80 	tst.w	r3, #128	; 0x80
    26b2:	d10c      	bne.n	26ce <cdcdf_acm_req+0x46>
	uint16_t                   len      = req->wLength;
    26b4:	88cf      	ldrh	r7, [r1, #6]
	uint8_t *                  ctrl_buf = usbdc_get_ctrl_buffer();
    26b6:	4b2f      	ldr	r3, [pc, #188]	; (2774 <cdcdf_acm_req+0xec>)
    26b8:	4798      	blx	r3
    26ba:	4601      	mov	r1, r0
	switch (req->bRequest) {
    26bc:	7863      	ldrb	r3, [r4, #1]
    26be:	2b20      	cmp	r3, #32
    26c0:	d013      	beq.n	26ea <cdcdf_acm_req+0x62>
    26c2:	2b22      	cmp	r3, #34	; 0x22
    26c4:	d032      	beq.n	272c <cdcdf_acm_req+0xa4>
		return ERR_INVALID_ARG;
    26c6:	f06f 000c 	mvn.w	r0, #12
			return cdcdf_acm_set_req(ep, req, stage);
		}
	} else {
		return ERR_NOT_FOUND;
	}
}
    26ca:	b003      	add	sp, #12
    26cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (USB_DATA_STAGE == stage) {
    26ce:	2a01      	cmp	r2, #1
    26d0:	d046      	beq.n	2760 <cdcdf_acm_req+0xd8>
	switch (req->bRequest) {
    26d2:	784b      	ldrb	r3, [r1, #1]
    26d4:	2b21      	cmp	r3, #33	; 0x21
    26d6:	d145      	bne.n	2764 <cdcdf_acm_req+0xdc>
		if (sizeof(struct usb_cdc_line_coding) != len) {
    26d8:	88cb      	ldrh	r3, [r1, #6]
    26da:	2b07      	cmp	r3, #7
    26dc:	d145      	bne.n	276a <cdcdf_acm_req+0xe2>
		return usbdc_xfer(ep, (uint8_t *)&usbd_cdc_line_coding, len, false);
    26de:	2300      	movs	r3, #0
    26e0:	2207      	movs	r2, #7
    26e2:	4925      	ldr	r1, [pc, #148]	; (2778 <cdcdf_acm_req+0xf0>)
    26e4:	4c25      	ldr	r4, [pc, #148]	; (277c <cdcdf_acm_req+0xf4>)
    26e6:	47a0      	blx	r4
    26e8:	e7ef      	b.n	26ca <cdcdf_acm_req+0x42>
		if (sizeof(struct usb_cdc_line_coding) != len) {
    26ea:	2f07      	cmp	r7, #7
    26ec:	d12b      	bne.n	2746 <cdcdf_acm_req+0xbe>
		if (USB_SETUP_STAGE == stage) {
    26ee:	b1be      	cbz	r6, 2720 <cdcdf_acm_req+0x98>
			memcpy(&line_coding_tmp, ctrl_buf, sizeof(struct usb_cdc_line_coding));
    26f0:	6800      	ldr	r0, [r0, #0]
    26f2:	9000      	str	r0, [sp, #0]
    26f4:	888a      	ldrh	r2, [r1, #4]
    26f6:	798b      	ldrb	r3, [r1, #6]
    26f8:	f8ad 2004 	strh.w	r2, [sp, #4]
    26fc:	f88d 3006 	strb.w	r3, [sp, #6]
			if ((NULL == cdcdf_acm_set_line_coding) || (true == cdcdf_acm_set_line_coding(&line_coding_tmp))) {
    2700:	4b1b      	ldr	r3, [pc, #108]	; (2770 <cdcdf_acm_req+0xe8>)
    2702:	691b      	ldr	r3, [r3, #16]
    2704:	b113      	cbz	r3, 270c <cdcdf_acm_req+0x84>
    2706:	4668      	mov	r0, sp
    2708:	4798      	blx	r3
    270a:	b1f8      	cbz	r0, 274c <cdcdf_acm_req+0xc4>
				usbd_cdc_line_coding = line_coding_tmp;
    270c:	4b18      	ldr	r3, [pc, #96]	; (2770 <cdcdf_acm_req+0xe8>)
    270e:	aa02      	add	r2, sp, #8
    2710:	e912 0003 	ldmdb	r2, {r0, r1}
    2714:	6098      	str	r0, [r3, #8]
    2716:	8199      	strh	r1, [r3, #12]
    2718:	0c09      	lsrs	r1, r1, #16
    271a:	7399      	strb	r1, [r3, #14]
			return ERR_NONE;
    271c:	2000      	movs	r0, #0
    271e:	e7d4      	b.n	26ca <cdcdf_acm_req+0x42>
			return usbdc_xfer(ep, ctrl_buf, len, false);
    2720:	2300      	movs	r3, #0
    2722:	2207      	movs	r2, #7
    2724:	4628      	mov	r0, r5
    2726:	4c15      	ldr	r4, [pc, #84]	; (277c <cdcdf_acm_req+0xf4>)
    2728:	47a0      	blx	r4
    272a:	e7ce      	b.n	26ca <cdcdf_acm_req+0x42>
		usbdc_xfer(0, NULL, 0, 0);
    272c:	2300      	movs	r3, #0
    272e:	461a      	mov	r2, r3
    2730:	4619      	mov	r1, r3
    2732:	4618      	mov	r0, r3
    2734:	4d11      	ldr	r5, [pc, #68]	; (277c <cdcdf_acm_req+0xf4>)
    2736:	47a8      	blx	r5
		if (NULL != cdcdf_acm_notify_state) {
    2738:	4b0d      	ldr	r3, [pc, #52]	; (2770 <cdcdf_acm_req+0xe8>)
    273a:	695b      	ldr	r3, [r3, #20]
    273c:	b143      	cbz	r3, 2750 <cdcdf_acm_req+0xc8>
			cdcdf_acm_notify_state(req->wValue);
    273e:	8860      	ldrh	r0, [r4, #2]
    2740:	4798      	blx	r3
		return ERR_NONE;
    2742:	2000      	movs	r0, #0
    2744:	e7c1      	b.n	26ca <cdcdf_acm_req+0x42>
			return ERR_INVALID_DATA;
    2746:	f04f 30ff 	mov.w	r0, #4294967295
    274a:	e7be      	b.n	26ca <cdcdf_acm_req+0x42>
			return ERR_NONE;
    274c:	2000      	movs	r0, #0
    274e:	e7bc      	b.n	26ca <cdcdf_acm_req+0x42>
		return ERR_NONE;
    2750:	2000      	movs	r0, #0
			return cdcdf_acm_set_req(ep, req, stage);
    2752:	e7ba      	b.n	26ca <cdcdf_acm_req+0x42>
		return ERR_NOT_FOUND;
    2754:	f06f 0009 	mvn.w	r0, #9
    2758:	e7b7      	b.n	26ca <cdcdf_acm_req+0x42>
		return ERR_NOT_FOUND;
    275a:	f06f 0009 	mvn.w	r0, #9
    275e:	e7b4      	b.n	26ca <cdcdf_acm_req+0x42>
		return ERR_NONE;
    2760:	2000      	movs	r0, #0
    2762:	e7b2      	b.n	26ca <cdcdf_acm_req+0x42>
		return ERR_INVALID_ARG;
    2764:	f06f 000c 	mvn.w	r0, #12
    2768:	e7af      	b.n	26ca <cdcdf_acm_req+0x42>
			return ERR_INVALID_DATA;
    276a:	f04f 30ff 	mov.w	r0, #4294967295
    276e:	e7ac      	b.n	26ca <cdcdf_acm_req+0x42>
    2770:	20000790 	.word	0x20000790
    2774:	0000301d 	.word	0x0000301d
    2778:	20000798 	.word	0x20000798
    277c:	00002af9 	.word	0x00002af9

00002780 <cdcdf_acm_ctrl>:
{
    2780:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2784:	b083      	sub	sp, #12
    2786:	4616      	mov	r6, r2
	switch (ctrl) {
    2788:	2901      	cmp	r1, #1
    278a:	d066      	beq.n	285a <cdcdf_acm_ctrl+0xda>
    278c:	b141      	cbz	r1, 27a0 <cdcdf_acm_ctrl+0x20>
		return ERR_INVALID_ARG;
    278e:	2902      	cmp	r1, #2
    2790:	bf0c      	ite	eq
    2792:	f06f 001a 	mvneq.w	r0, #26
    2796:	f06f 000c 	mvnne.w	r0, #12
}
    279a:	b003      	add	sp, #12
    279c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
    27a0:	f8d0 a008 	ldr.w	sl, [r0, #8]
	ifc = desc->sod;
    27a4:	6810      	ldr	r0, [r2, #0]
		if (NULL == ifc) {
    27a6:	2800      	cmp	r0, #0
    27a8:	f000 8085 	beq.w	28b6 <cdcdf_acm_ctrl+0x136>
    27ac:	f10a 3bff 	add.w	fp, sl, #4294967295
    27b0:	f10a 0301 	add.w	r3, sl, #1
    27b4:	9300      	str	r3, [sp, #0]
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    27b6:	4f46      	ldr	r7, [pc, #280]	; (28d0 <cdcdf_acm_ctrl+0x150>)
				usb_d_ep_enable(func_data->func_ep_out);
    27b8:	f8df 9124 	ldr.w	r9, [pc, #292]	; 28e0 <cdcdf_acm_ctrl+0x160>
			ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    27bc:	f8df 8124 	ldr.w	r8, [pc, #292]	; 28e4 <cdcdf_acm_ctrl+0x164>
		ifc_desc.bInterfaceNumber = ifc[2];
    27c0:	7882      	ldrb	r2, [r0, #2]
		if ((CDC_CLASS_COMM == ifc_desc.bInterfaceClass) || (CDC_CLASS_DATA == ifc_desc.bInterfaceClass)) {
    27c2:	7943      	ldrb	r3, [r0, #5]
    27c4:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
    27c8:	2b02      	cmp	r3, #2
    27ca:	d002      	beq.n	27d2 <cdcdf_acm_ctrl+0x52>
			return ERR_NOT_FOUND;
    27cc:	f06f 0009 	mvn.w	r0, #9
    27d0:	e7e3      	b.n	279a <cdcdf_acm_ctrl+0x1a>
    27d2:	f10b 0b01 	add.w	fp, fp, #1
			if (func_data->func_iface[i] == ifc_desc.bInterfaceNumber) { // Initialized
    27d6:	f89b 3000 	ldrb.w	r3, [fp]
    27da:	429a      	cmp	r2, r3
    27dc:	d06e      	beq.n	28bc <cdcdf_acm_ctrl+0x13c>
			} else if (func_data->func_iface[i] != 0xFF) { // Occupied
    27de:	2bff      	cmp	r3, #255	; 0xff
    27e0:	d16f      	bne.n	28c2 <cdcdf_acm_ctrl+0x142>
				func_data->func_iface[i] = ifc_desc.bInterfaceNumber;
    27e2:	f88b 2000 	strb.w	r2, [fp]
		ep = usb_find_desc(ifc, desc->eod, USB_DT_ENDPOINT);
    27e6:	2205      	movs	r2, #5
    27e8:	6871      	ldr	r1, [r6, #4]
    27ea:	4b3a      	ldr	r3, [pc, #232]	; (28d4 <cdcdf_acm_ctrl+0x154>)
    27ec:	4798      	blx	r3
		while (NULL != ep) {
    27ee:	4604      	mov	r4, r0
    27f0:	b1f8      	cbz	r0, 2832 <cdcdf_acm_ctrl+0xb2>
    27f2:	f8cd b004 	str.w	fp, [sp, #4]
			ep_desc.bEndpointAddress = ep[2];
    27f6:	78a5      	ldrb	r5, [r4, #2]
 *  \param[in] ptr Byte pointer to the address to get data
 *  \return a 16-bit word
 */
static inline uint16_t usb_get_u16(const uint8_t *ptr)
{
	return (ptr[0] + (ptr[1] << 8));
    27f8:	7963      	ldrb	r3, [r4, #5]
    27fa:	7922      	ldrb	r2, [r4, #4]
    27fc:	eb02 2203 	add.w	r2, r2, r3, lsl #8
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    2800:	b292      	uxth	r2, r2
    2802:	78e1      	ldrb	r1, [r4, #3]
    2804:	4628      	mov	r0, r5
    2806:	47b8      	blx	r7
    2808:	2800      	cmp	r0, #0
    280a:	d15d      	bne.n	28c8 <cdcdf_acm_ctrl+0x148>
			if (ep_desc.bEndpointAddress & USB_EP_DIR_IN) {
    280c:	f015 0f80 	tst.w	r5, #128	; 0x80
				func_data->func_ep_in[i] = ep_desc.bEndpointAddress;
    2810:	bf14      	ite	ne
    2812:	f88b 5002 	strbne.w	r5, [fp, #2]
				func_data->func_ep_out = ep_desc.bEndpointAddress;
    2816:	f88a 5004 	strbeq.w	r5, [sl, #4]
				usb_d_ep_enable(func_data->func_ep_out);
    281a:	4628      	mov	r0, r5
    281c:	47c8      	blx	r9
			desc->sod = ep;
    281e:	6034      	str	r4, [r6, #0]
 *  \param[in] desc Byte pointer to the descriptor start address
 *  \return Byte pointer to the next descriptor
 */
static inline uint8_t *usb_desc_next(uint8_t *desc)
{
	return (desc + usb_desc_len(desc));
    2820:	7820      	ldrb	r0, [r4, #0]
			ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    2822:	6871      	ldr	r1, [r6, #4]
    2824:	4420      	add	r0, r4
    2826:	47c0      	blx	r8
		while (NULL != ep) {
    2828:	4604      	mov	r4, r0
    282a:	2800      	cmp	r0, #0
    282c:	d1e3      	bne.n	27f6 <cdcdf_acm_ctrl+0x76>
    282e:	f8dd b004 	ldr.w	fp, [sp, #4]
		ifc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_INTERFACE);
    2832:	6833      	ldr	r3, [r6, #0]
    2834:	7818      	ldrb	r0, [r3, #0]
    2836:	2204      	movs	r2, #4
    2838:	6871      	ldr	r1, [r6, #4]
    283a:	4418      	add	r0, r3
    283c:	4b25      	ldr	r3, [pc, #148]	; (28d4 <cdcdf_acm_ctrl+0x154>)
    283e:	4798      	blx	r3
	for (i = 0; i < 2; i++) {
    2840:	9b00      	ldr	r3, [sp, #0]
    2842:	459b      	cmp	fp, r3
    2844:	d004      	beq.n	2850 <cdcdf_acm_ctrl+0xd0>
		if (NULL == ifc) {
    2846:	2800      	cmp	r0, #0
    2848:	d1ba      	bne.n	27c0 <cdcdf_acm_ctrl+0x40>
			return ERR_NOT_FOUND;
    284a:	f06f 0009 	mvn.w	r0, #9
    284e:	e7a4      	b.n	279a <cdcdf_acm_ctrl+0x1a>
	_cdcdf_acm_funcd.enabled = true;
    2850:	2201      	movs	r2, #1
    2852:	4b21      	ldr	r3, [pc, #132]	; (28d8 <cdcdf_acm_ctrl+0x158>)
    2854:	715a      	strb	r2, [r3, #5]
	return ERR_NONE;
    2856:	2000      	movs	r0, #0
    2858:	e79f      	b.n	279a <cdcdf_acm_ctrl+0x1a>
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
    285a:	6884      	ldr	r4, [r0, #8]
	if (desc) {
    285c:	b142      	cbz	r2, 2870 <cdcdf_acm_ctrl+0xf0>
		ifc_desc.bInterfaceClass = desc->sod[5];
    285e:	6813      	ldr	r3, [r2, #0]
		if ((ifc_desc.bInterfaceClass != CDC_CLASS_COMM) && (ifc_desc.bInterfaceClass != CDC_CLASS_DATA)) {
    2860:	795b      	ldrb	r3, [r3, #5]
    2862:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
    2866:	2b02      	cmp	r3, #2
    2868:	d002      	beq.n	2870 <cdcdf_acm_ctrl+0xf0>
			return ERR_NOT_FOUND;
    286a:	f06f 0009 	mvn.w	r0, #9
    286e:	e794      	b.n	279a <cdcdf_acm_ctrl+0x1a>
		if (func_data->func_iface[i] == 0xFF) {
    2870:	7823      	ldrb	r3, [r4, #0]
    2872:	2bff      	cmp	r3, #255	; 0xff
    2874:	d008      	beq.n	2888 <cdcdf_acm_ctrl+0x108>
			func_data->func_iface[i] = 0xFF;
    2876:	23ff      	movs	r3, #255	; 0xff
    2878:	7023      	strb	r3, [r4, #0]
			if (func_data->func_ep_in[i] != 0xFF) {
    287a:	78a0      	ldrb	r0, [r4, #2]
    287c:	4298      	cmp	r0, r3
    287e:	d003      	beq.n	2888 <cdcdf_acm_ctrl+0x108>
				usb_d_ep_deinit(func_data->func_ep_in[i]);
    2880:	4b16      	ldr	r3, [pc, #88]	; (28dc <cdcdf_acm_ctrl+0x15c>)
    2882:	4798      	blx	r3
				func_data->func_ep_in[i] = 0xFF;
    2884:	23ff      	movs	r3, #255	; 0xff
    2886:	70a3      	strb	r3, [r4, #2]
		if (func_data->func_iface[i] == 0xFF) {
    2888:	7863      	ldrb	r3, [r4, #1]
    288a:	2bff      	cmp	r3, #255	; 0xff
    288c:	d008      	beq.n	28a0 <cdcdf_acm_ctrl+0x120>
			func_data->func_iface[i] = 0xFF;
    288e:	23ff      	movs	r3, #255	; 0xff
    2890:	7063      	strb	r3, [r4, #1]
			if (func_data->func_ep_in[i] != 0xFF) {
    2892:	78e0      	ldrb	r0, [r4, #3]
    2894:	4298      	cmp	r0, r3
    2896:	d003      	beq.n	28a0 <cdcdf_acm_ctrl+0x120>
				usb_d_ep_deinit(func_data->func_ep_in[i]);
    2898:	4b10      	ldr	r3, [pc, #64]	; (28dc <cdcdf_acm_ctrl+0x15c>)
    289a:	4798      	blx	r3
				func_data->func_ep_in[i] = 0xFF;
    289c:	23ff      	movs	r3, #255	; 0xff
    289e:	70e3      	strb	r3, [r4, #3]
	if (func_data->func_ep_out != 0xFF) {
    28a0:	7920      	ldrb	r0, [r4, #4]
    28a2:	28ff      	cmp	r0, #255	; 0xff
    28a4:	d003      	beq.n	28ae <cdcdf_acm_ctrl+0x12e>
		usb_d_ep_deinit(func_data->func_ep_out);
    28a6:	4b0d      	ldr	r3, [pc, #52]	; (28dc <cdcdf_acm_ctrl+0x15c>)
    28a8:	4798      	blx	r3
		func_data->func_ep_out = 0xFF;
    28aa:	23ff      	movs	r3, #255	; 0xff
    28ac:	7123      	strb	r3, [r4, #4]
	_cdcdf_acm_funcd.enabled = false;
    28ae:	2000      	movs	r0, #0
    28b0:	4b09      	ldr	r3, [pc, #36]	; (28d8 <cdcdf_acm_ctrl+0x158>)
    28b2:	7158      	strb	r0, [r3, #5]
    28b4:	e771      	b.n	279a <cdcdf_acm_ctrl+0x1a>
			return ERR_NOT_FOUND;
    28b6:	f06f 0009 	mvn.w	r0, #9
    28ba:	e76e      	b.n	279a <cdcdf_acm_ctrl+0x1a>
				return ERR_ALREADY_INITIALIZED;
    28bc:	f06f 0011 	mvn.w	r0, #17
    28c0:	e76b      	b.n	279a <cdcdf_acm_ctrl+0x1a>
				return ERR_NO_RESOURCE;
    28c2:	f06f 001b 	mvn.w	r0, #27
    28c6:	e768      	b.n	279a <cdcdf_acm_ctrl+0x1a>
				return ERR_NOT_INITIALIZED;
    28c8:	f06f 0013 	mvn.w	r0, #19
    28cc:	e765      	b.n	279a <cdcdf_acm_ctrl+0x1a>
    28ce:	bf00      	nop
    28d0:	00000b6d 	.word	0x00000b6d
    28d4:	0000303d 	.word	0x0000303d
    28d8:	20000790 	.word	0x20000790
    28dc:	00000bd5 	.word	0x00000bd5
    28e0:	00000c01 	.word	0x00000c01
    28e4:	00003077 	.word	0x00003077

000028e8 <cdcdf_acm_init>:

/**
 * \brief Initialize the USB CDC ACM Function Driver
 */
int32_t cdcdf_acm_init(void)
{
    28e8:	b508      	push	{r3, lr}
	if (usbdc_get_state() > USBD_S_POWER) {
    28ea:	4b0a      	ldr	r3, [pc, #40]	; (2914 <cdcdf_acm_init+0x2c>)
    28ec:	4798      	blx	r3
    28ee:	2801      	cmp	r0, #1
    28f0:	d80c      	bhi.n	290c <cdcdf_acm_init+0x24>
		return ERR_DENIED;
	}

	_cdcdf_acm.ctrl      = cdcdf_acm_ctrl;
    28f2:	4809      	ldr	r0, [pc, #36]	; (2918 <cdcdf_acm_init+0x30>)
    28f4:	4b09      	ldr	r3, [pc, #36]	; (291c <cdcdf_acm_init+0x34>)
    28f6:	61c3      	str	r3, [r0, #28]
	_cdcdf_acm.func_data = &_cdcdf_acm_funcd;
    28f8:	6200      	str	r0, [r0, #32]

	usbdc_register_function(&_cdcdf_acm);
    28fa:	3018      	adds	r0, #24
    28fc:	4b08      	ldr	r3, [pc, #32]	; (2920 <cdcdf_acm_init+0x38>)
    28fe:	4798      	blx	r3
	usbdc_register_handler(USBDC_HDL_REQ, &cdcdf_acm_req_h);
    2900:	4908      	ldr	r1, [pc, #32]	; (2924 <cdcdf_acm_init+0x3c>)
    2902:	2001      	movs	r0, #1
    2904:	4b08      	ldr	r3, [pc, #32]	; (2928 <cdcdf_acm_init+0x40>)
    2906:	4798      	blx	r3
	return ERR_NONE;
    2908:	2000      	movs	r0, #0
    290a:	bd08      	pop	{r3, pc}
		return ERR_DENIED;
    290c:	f06f 0010 	mvn.w	r0, #16
}
    2910:	bd08      	pop	{r3, pc}
    2912:	bf00      	nop
    2914:	00003029 	.word	0x00003029
    2918:	20000790 	.word	0x20000790
    291c:	00002781 	.word	0x00002781
    2920:	00002fc9 	.word	0x00002fc9
    2924:	20000070 	.word	0x20000070
    2928:	00002f35 	.word	0x00002f35

0000292c <cdcdf_acm_write>:
/**
 * \brief Check whether CDC ACM Function is enabled
 */
bool cdcdf_acm_is_enabled(void)
{
	return _cdcdf_acm_funcd.enabled;
    292c:	4b07      	ldr	r3, [pc, #28]	; (294c <cdcdf_acm_write+0x20>)
	if (!cdcdf_acm_is_enabled()) {
    292e:	795b      	ldrb	r3, [r3, #5]
    2930:	b143      	cbz	r3, 2944 <cdcdf_acm_write+0x18>
{
    2932:	b510      	push	{r4, lr}
    2934:	460a      	mov	r2, r1
    2936:	4601      	mov	r1, r0
	return usbdc_xfer(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX], buf, size, true);
    2938:	2301      	movs	r3, #1
    293a:	4804      	ldr	r0, [pc, #16]	; (294c <cdcdf_acm_write+0x20>)
    293c:	78c0      	ldrb	r0, [r0, #3]
    293e:	4c04      	ldr	r4, [pc, #16]	; (2950 <cdcdf_acm_write+0x24>)
    2940:	47a0      	blx	r4
    2942:	bd10      	pop	{r4, pc}
		return ERR_DENIED;
    2944:	f06f 0010 	mvn.w	r0, #16
    2948:	4770      	bx	lr
    294a:	bf00      	nop
    294c:	20000790 	.word	0x20000790
    2950:	00002af9 	.word	0x00002af9

00002954 <cdcdf_acm_is_enabled>:
}
    2954:	4b01      	ldr	r3, [pc, #4]	; (295c <cdcdf_acm_is_enabled+0x8>)
    2956:	7958      	ldrb	r0, [r3, #5]
    2958:	4770      	bx	lr
    295a:	bf00      	nop
    295c:	20000790 	.word	0x20000790

00002960 <usbdc_unconfig>:

/**
 * \brief Unconfig, close all interfaces
 */
static void usbdc_unconfig(void)
{
    2960:	b570      	push	{r4, r5, r6, lr}
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    2962:	4b07      	ldr	r3, [pc, #28]	; (2980 <usbdc_unconfig+0x20>)
    2964:	691c      	ldr	r4, [r3, #16]
	while (NULL != func) {
    2966:	b14c      	cbz	r4, 297c <usbdc_unconfig+0x1c>
		func->ctrl(func, USBDF_DISABLE, NULL);
    2968:	2600      	movs	r6, #0
    296a:	2501      	movs	r5, #1
    296c:	6863      	ldr	r3, [r4, #4]
    296e:	4632      	mov	r2, r6
    2970:	4629      	mov	r1, r5
    2972:	4620      	mov	r0, r4
    2974:	4798      	blx	r3
		func = func->next;
    2976:	6824      	ldr	r4, [r4, #0]
	while (NULL != func) {
    2978:	2c00      	cmp	r4, #0
    297a:	d1f7      	bne.n	296c <usbdc_unconfig+0xc>
    297c:	bd70      	pop	{r4, r5, r6, pc}
    297e:	bf00      	nop
    2980:	200007b4 	.word	0x200007b4

00002984 <usbdc_change_notify>:
	}
}

/** Invoke all registered Change notification callbacks. */
static void usbdc_change_notify(enum usbdc_change_type change, uint32_t value)
{
    2984:	b570      	push	{r4, r5, r6, lr}
    2986:	4606      	mov	r6, r0
    2988:	460d      	mov	r5, r1
	struct usbdc_change_handler *cg = (struct usbdc_change_handler *)usbdc.handlers.change_list.head;
    298a:	4b07      	ldr	r3, [pc, #28]	; (29a8 <usbdc_change_notify+0x24>)
    298c:	68dc      	ldr	r4, [r3, #12]

	while (cg != NULL) {
    298e:	b91c      	cbnz	r4, 2998 <usbdc_change_notify+0x14>
    2990:	bd70      	pop	{r4, r5, r6, pc}
		if (NULL != cg->cb) {
			cg->cb(change, value);
		}
		cg = cg->next;
    2992:	6824      	ldr	r4, [r4, #0]
	while (cg != NULL) {
    2994:	2c00      	cmp	r4, #0
    2996:	d0fb      	beq.n	2990 <usbdc_change_notify+0xc>
		if (NULL != cg->cb) {
    2998:	6863      	ldr	r3, [r4, #4]
    299a:	2b00      	cmp	r3, #0
    299c:	d0f9      	beq.n	2992 <usbdc_change_notify+0xe>
			cg->cb(change, value);
    299e:	4629      	mov	r1, r5
    29a0:	4630      	mov	r0, r6
    29a2:	4798      	blx	r3
    29a4:	e7f5      	b.n	2992 <usbdc_change_notify+0xe>
    29a6:	bf00      	nop
    29a8:	200007b4 	.word	0x200007b4

000029ac <usbdc_request_handler>:
	}
}

/** Invoke all registered request callbacks until request handled. */
static int32_t usbdc_request_handler(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    29ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    29ae:	4607      	mov	r7, r0
    29b0:	460e      	mov	r6, r1
    29b2:	4615      	mov	r5, r2
	struct usbdc_req_handler *h = (struct usbdc_req_handler *)usbdc.handlers.req_list.head;
    29b4:	4b0c      	ldr	r3, [pc, #48]	; (29e8 <usbdc_request_handler+0x3c>)
    29b6:	689c      	ldr	r4, [r3, #8]
	int32_t                   rc;

	while (h != NULL) {
    29b8:	b91c      	cbnz	r4, 29c2 <usbdc_request_handler+0x16>
				return -1;
			}
		}
		h = h->next;
	}
	return false;
    29ba:	2000      	movs	r0, #0
    29bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		h = h->next;
    29be:	6824      	ldr	r4, [r4, #0]
	while (h != NULL) {
    29c0:	b16c      	cbz	r4, 29de <usbdc_request_handler+0x32>
		if (NULL != h->cb) {
    29c2:	6863      	ldr	r3, [r4, #4]
    29c4:	2b00      	cmp	r3, #0
    29c6:	d0fa      	beq.n	29be <usbdc_request_handler+0x12>
			rc = h->cb(ep, req, stage);
    29c8:	462a      	mov	r2, r5
    29ca:	4631      	mov	r1, r6
    29cc:	4638      	mov	r0, r7
    29ce:	4798      	blx	r3
			if (0 == rc) {
    29d0:	b138      	cbz	r0, 29e2 <usbdc_request_handler+0x36>
			} else if (ERR_NOT_FOUND != rc) {
    29d2:	f110 0f0a 	cmn.w	r0, #10
    29d6:	d0f2      	beq.n	29be <usbdc_request_handler+0x12>
				return -1;
    29d8:	f04f 30ff 	mov.w	r0, #4294967295
}
    29dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return false;
    29de:	2000      	movs	r0, #0
    29e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				return true;
    29e2:	2001      	movs	r0, #1
    29e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    29e6:	bf00      	nop
    29e8:	200007b4 	.word	0x200007b4

000029ec <usbd_sof_cb>:

/**
 * \brief Callback invoked on USB device SOF
 */
static void usbd_sof_cb(void)
{
    29ec:	b510      	push	{r4, lr}
	struct usbdc_sof_handler *sof = (struct usbdc_sof_handler *)usbdc.handlers.sof_list.head;
    29ee:	4b06      	ldr	r3, [pc, #24]	; (2a08 <usbd_sof_cb+0x1c>)
    29f0:	685c      	ldr	r4, [r3, #4]
	while (sof != NULL) {
    29f2:	b91c      	cbnz	r4, 29fc <usbd_sof_cb+0x10>
    29f4:	bd10      	pop	{r4, pc}
		sof = sof->next;
    29f6:	6824      	ldr	r4, [r4, #0]
	while (sof != NULL) {
    29f8:	2c00      	cmp	r4, #0
    29fa:	d0fb      	beq.n	29f4 <usbd_sof_cb+0x8>
		if (NULL != sof->cb) {
    29fc:	6863      	ldr	r3, [r4, #4]
    29fe:	2b00      	cmp	r3, #0
    2a00:	d0f9      	beq.n	29f6 <usbd_sof_cb+0xa>
			sof->cb();
    2a02:	4798      	blx	r3
    2a04:	e7f7      	b.n	29f6 <usbd_sof_cb+0xa>
    2a06:	bf00      	nop
    2a08:	200007b4 	.word	0x200007b4

00002a0c <usbdc_cb_ctl_done>:
 * \return Data has error or not.
 * \retval true There is data error, protocol error.
 * \retval false There is no data error.
 */
static bool usbdc_cb_ctl_done(const uint8_t ep, const enum usb_xfer_code code, struct usb_req *req)
{
    2a0c:	b510      	push	{r4, lr}
    2a0e:	4614      	mov	r4, r2
	(void)ep;

	switch (code) {
    2a10:	b119      	cbz	r1, 2a1a <usbdc_cb_ctl_done+0xe>
    2a12:	2901      	cmp	r1, #1
    2a14:	d026      	beq.n	2a64 <usbdc_cb_ctl_done+0x58>
		return usbdc_ctrl_data_end(req);
	default:
		break;
	}
	return false;
}
    2a16:	2000      	movs	r0, #0
    2a18:	bd10      	pop	{r4, pc}
	if (req->bmRequestType != USB_REQT_TYPE_STANDARD) {
    2a1a:	7813      	ldrb	r3, [r2, #0]
    2a1c:	2b00      	cmp	r3, #0
    2a1e:	d1fa      	bne.n	2a16 <usbdc_cb_ctl_done+0xa>
	switch (req->bRequest) {
    2a20:	7853      	ldrb	r3, [r2, #1]
    2a22:	2b05      	cmp	r3, #5
    2a24:	d00f      	beq.n	2a46 <usbdc_cb_ctl_done+0x3a>
    2a26:	2b09      	cmp	r3, #9
    2a28:	d1f5      	bne.n	2a16 <usbdc_cb_ctl_done+0xa>
		usbdc.cfg_value = req->wValue;
    2a2a:	8852      	ldrh	r2, [r2, #2]
    2a2c:	4b10      	ldr	r3, [pc, #64]	; (2a70 <usbdc_cb_ctl_done+0x64>)
    2a2e:	76da      	strb	r2, [r3, #27]
		usbdc.state     = req->wValue ? USBD_S_CONFIG : USBD_S_ADDRESS;
    2a30:	8863      	ldrh	r3, [r4, #2]
    2a32:	2b00      	cmp	r3, #0
    2a34:	bf14      	ite	ne
    2a36:	2104      	movne	r1, #4
    2a38:	2103      	moveq	r1, #3
    2a3a:	4b0d      	ldr	r3, [pc, #52]	; (2a70 <usbdc_cb_ctl_done+0x64>)
    2a3c:	7699      	strb	r1, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
    2a3e:	2001      	movs	r0, #1
    2a40:	4b0c      	ldr	r3, [pc, #48]	; (2a74 <usbdc_cb_ctl_done+0x68>)
    2a42:	4798      	blx	r3
    2a44:	e7e7      	b.n	2a16 <usbdc_cb_ctl_done+0xa>
		usbdc_set_address(req->wValue);
    2a46:	8850      	ldrh	r0, [r2, #2]
	usb_d_set_address(addr);
    2a48:	b2c0      	uxtb	r0, r0
    2a4a:	4b0b      	ldr	r3, [pc, #44]	; (2a78 <usbdc_cb_ctl_done+0x6c>)
    2a4c:	4798      	blx	r3
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
    2a4e:	8863      	ldrh	r3, [r4, #2]
    2a50:	2b00      	cmp	r3, #0
    2a52:	bf14      	ite	ne
    2a54:	2103      	movne	r1, #3
    2a56:	2102      	moveq	r1, #2
    2a58:	4b05      	ldr	r3, [pc, #20]	; (2a70 <usbdc_cb_ctl_done+0x64>)
    2a5a:	7699      	strb	r1, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
    2a5c:	2001      	movs	r0, #1
    2a5e:	4b05      	ldr	r3, [pc, #20]	; (2a74 <usbdc_cb_ctl_done+0x68>)
    2a60:	4798      	blx	r3
    2a62:	e7d8      	b.n	2a16 <usbdc_cb_ctl_done+0xa>
	usbdc_request_handler(0, req, USB_DATA_STAGE);
    2a64:	2201      	movs	r2, #1
    2a66:	4621      	mov	r1, r4
    2a68:	2000      	movs	r0, #0
    2a6a:	4b04      	ldr	r3, [pc, #16]	; (2a7c <usbdc_cb_ctl_done+0x70>)
    2a6c:	4798      	blx	r3
		return usbdc_ctrl_data_end(req);
    2a6e:	e7d2      	b.n	2a16 <usbdc_cb_ctl_done+0xa>
    2a70:	200007b4 	.word	0x200007b4
    2a74:	00002985 	.word	0x00002985
    2a78:	00000b61 	.word	0x00000b61
    2a7c:	000029ad 	.word	0x000029ad

00002a80 <usbdc_reset>:

/**
 * \brief USB Device Core Reset
 */
void usbdc_reset(void)
{
    2a80:	b570      	push	{r4, r5, r6, lr}
	usbdc_unconfig();
    2a82:	4b0d      	ldr	r3, [pc, #52]	; (2ab8 <usbdc_reset+0x38>)
    2a84:	4798      	blx	r3

	usbdc.state       = USBD_S_DEFAULT;
    2a86:	4d0d      	ldr	r5, [pc, #52]	; (2abc <usbdc_reset+0x3c>)
    2a88:	2602      	movs	r6, #2
    2a8a:	76ae      	strb	r6, [r5, #26]
	usbdc.cfg_value   = 0;
    2a8c:	2400      	movs	r4, #0
    2a8e:	76ec      	strb	r4, [r5, #27]
	usbdc.ifc_alt_map = 0;
    2a90:	776c      	strb	r4, [r5, #29]

	// Setup EP0
	usb_d_ep_deinit(0);
    2a92:	4620      	mov	r0, r4
    2a94:	4b0a      	ldr	r3, [pc, #40]	; (2ac0 <usbdc_reset+0x40>)
    2a96:	4798      	blx	r3
	usb_d_ep0_init(usbdc.ctrl_size);
    2a98:	7f28      	ldrb	r0, [r5, #28]
    2a9a:	4b0a      	ldr	r3, [pc, #40]	; (2ac4 <usbdc_reset+0x44>)
    2a9c:	4798      	blx	r3
	usb_d_ep_register_callback(0, USB_D_EP_CB_SETUP, (FUNC_PTR)usbdc_cb_ctl_req);
    2a9e:	4a0a      	ldr	r2, [pc, #40]	; (2ac8 <usbdc_reset+0x48>)
    2aa0:	4621      	mov	r1, r4
    2aa2:	4620      	mov	r0, r4
    2aa4:	4d09      	ldr	r5, [pc, #36]	; (2acc <usbdc_reset+0x4c>)
    2aa6:	47a8      	blx	r5
	usb_d_ep_register_callback(0, USB_D_EP_CB_XFER, (FUNC_PTR)usbdc_cb_ctl_done);
    2aa8:	4a09      	ldr	r2, [pc, #36]	; (2ad0 <usbdc_reset+0x50>)
    2aaa:	4631      	mov	r1, r6
    2aac:	4620      	mov	r0, r4
    2aae:	47a8      	blx	r5
	usb_d_ep_enable(0);
    2ab0:	4620      	mov	r0, r4
    2ab2:	4b08      	ldr	r3, [pc, #32]	; (2ad4 <usbdc_reset+0x54>)
    2ab4:	4798      	blx	r3
    2ab6:	bd70      	pop	{r4, r5, r6, pc}
    2ab8:	00002961 	.word	0x00002961
    2abc:	200007b4 	.word	0x200007b4
    2ac0:	00000bd5 	.word	0x00000bd5
    2ac4:	00000bc1 	.word	0x00000bc1
    2ac8:	00002b19 	.word	0x00002b19
    2acc:	00000dd5 	.word	0x00000dd5
    2ad0:	00002a0d 	.word	0x00002a0d
    2ad4:	00000c01 	.word	0x00000c01

00002ad8 <usbd_event_cb>:
 * \brief Callback invoked on USB device events
 * \param[in] ev Event code.
 * \param[in] param Event parameter for event handling.
 */
static void usbd_event_cb(const enum usb_event ev, const uint32_t param)
{
    2ad8:	b508      	push	{r3, lr}
	(void)param;

	switch (ev) {
    2ada:	b110      	cbz	r0, 2ae2 <usbd_event_cb+0xa>
    2adc:	2801      	cmp	r0, #1
    2ade:	d004      	beq.n	2aea <usbd_event_cb+0x12>
    2ae0:	bd08      	pop	{r3, pc}
	case USB_EV_VBUS:
		usbdc_change_notify(USBDC_C_CONN, param);
    2ae2:	2000      	movs	r0, #0
    2ae4:	4b02      	ldr	r3, [pc, #8]	; (2af0 <usbd_event_cb+0x18>)
    2ae6:	4798      	blx	r3
		break;
    2ae8:	bd08      	pop	{r3, pc}

	case USB_EV_RESET:
		usbdc_reset();
    2aea:	4b02      	ldr	r3, [pc, #8]	; (2af4 <usbd_event_cb+0x1c>)
    2aec:	4798      	blx	r3
    2aee:	bd08      	pop	{r3, pc}
    2af0:	00002985 	.word	0x00002985
    2af4:	00002a81 	.word	0x00002a81

00002af8 <usbdc_xfer>:

/**
 * \brief Issue USB device transfer
 */
int32_t usbdc_xfer(uint8_t ep, uint8_t *buf, uint32_t size, bool zlp)
{
    2af8:	b500      	push	{lr}
    2afa:	b085      	sub	sp, #20
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    2afc:	9101      	str	r1, [sp, #4]
    2afe:	9202      	str	r2, [sp, #8]
    2b00:	f88d 000c 	strb.w	r0, [sp, #12]
    2b04:	f88d 300d 	strb.w	r3, [sp, #13]
	return usb_d_ep_transfer(&xfer);
    2b08:	a801      	add	r0, sp, #4
    2b0a:	4b02      	ldr	r3, [pc, #8]	; (2b14 <usbdc_xfer+0x1c>)
    2b0c:	4798      	blx	r3
}
    2b0e:	b005      	add	sp, #20
    2b10:	f85d fb04 	ldr.w	pc, [sp], #4
    2b14:	00000c4d 	.word	0x00000c4d

00002b18 <usbdc_cb_ctl_req>:
{
    2b18:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    2b1c:	b083      	sub	sp, #12
    2b1e:	4605      	mov	r5, r0
    2b20:	460c      	mov	r4, r1
	switch (usbdc_request_handler(ep, req, USB_SETUP_STAGE)) {
    2b22:	2200      	movs	r2, #0
    2b24:	4b9b      	ldr	r3, [pc, #620]	; (2d94 <usbdc_cb_ctl_req+0x27c>)
    2b26:	4798      	blx	r3
    2b28:	f1b0 3fff 	cmp.w	r0, #4294967295
    2b2c:	d00b      	beq.n	2b46 <usbdc_cb_ctl_req+0x2e>
    2b2e:	2801      	cmp	r0, #1
    2b30:	f000 81e3 	beq.w	2efa <usbdc_cb_ctl_req+0x3e2>
	switch (req->bmRequestType & (USB_REQT_TYPE_MASK | USB_REQT_DIR_IN)) {
    2b34:	7823      	ldrb	r3, [r4, #0]
    2b36:	f013 02e0 	ands.w	r2, r3, #224	; 0xe0
    2b3a:	d008      	beq.n	2b4e <usbdc_cb_ctl_req+0x36>
    2b3c:	2a80      	cmp	r2, #128	; 0x80
    2b3e:	f000 80f4 	beq.w	2d2a <usbdc_cb_ctl_req+0x212>
		return false;
    2b42:	2000      	movs	r0, #0
    2b44:	e000      	b.n	2b48 <usbdc_cb_ctl_req+0x30>
		return false;
    2b46:	2000      	movs	r0, #0
}
    2b48:	b003      	add	sp, #12
    2b4a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	switch (req->bRequest) {
    2b4e:	7862      	ldrb	r2, [r4, #1]
    2b50:	3a01      	subs	r2, #1
    2b52:	2a0a      	cmp	r2, #10
    2b54:	f200 81d3 	bhi.w	2efe <usbdc_cb_ctl_req+0x3e6>
    2b58:	e8df f012 	tbh	[pc, r2, lsl #1]
    2b5c:	01d10060 	.word	0x01d10060
    2b60:	01d10076 	.word	0x01d10076
    2b64:	01d1000b 	.word	0x01d1000b
    2b68:	01d101d1 	.word	0x01d101d1
    2b6c:	01d10015 	.word	0x01d10015
    2b70:	008c      	.short	0x008c
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    2b72:	2301      	movs	r3, #1
    2b74:	2200      	movs	r2, #0
    2b76:	4611      	mov	r1, r2
    2b78:	4628      	mov	r0, r5
    2b7a:	4c87      	ldr	r4, [pc, #540]	; (2d98 <usbdc_cb_ctl_req+0x280>)
    2b7c:	47a0      	blx	r4
    2b7e:	fab0 f080 	clz	r0, r0
    2b82:	0940      	lsrs	r0, r0, #5
    2b84:	e7e0      	b.n	2b48 <usbdc_cb_ctl_req+0x30>
		if (!usbdc_set_config(req->wValue)) {
    2b86:	8862      	ldrh	r2, [r4, #2]
    2b88:	b2d2      	uxtb	r2, r2
	if (cfg_value == 0) {
    2b8a:	b1ca      	cbz	r2, 2bc0 <usbdc_cb_ctl_req+0xa8>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, cfg_value);
    2b8c:	4b83      	ldr	r3, [pc, #524]	; (2d9c <usbdc_cb_ctl_req+0x284>)
    2b8e:	681b      	ldr	r3, [r3, #0]
    2b90:	6859      	ldr	r1, [r3, #4]
    2b92:	6818      	ldr	r0, [r3, #0]
    2b94:	4b82      	ldr	r3, [pc, #520]	; (2da0 <usbdc_cb_ctl_req+0x288>)
    2b96:	4798      	blx	r3
	if (NULL == cfg_desc) {
    2b98:	2800      	cmp	r0, #0
    2b9a:	f000 81be 	beq.w	2f1a <usbdc_cb_ctl_req+0x402>
	return (ptr[0] + (ptr[1] << 8));
    2b9e:	78c2      	ldrb	r2, [r0, #3]
    2ba0:	7881      	ldrb	r1, [r0, #2]
    2ba2:	eb01 2102 	add.w	r1, r1, r2, lsl #8
	desc.eod  = cfg_desc + total_len;
    2ba6:	fa10 f181 	uxtah	r1, r0, r1
    2baa:	9101      	str	r1, [sp, #4]
	desc.sod  = usb_find_desc(cfg_desc, desc.eod, USB_DT_INTERFACE);
    2bac:	2204      	movs	r2, #4
    2bae:	4b7d      	ldr	r3, [pc, #500]	; (2da4 <usbdc_cb_ctl_req+0x28c>)
    2bb0:	4798      	blx	r3
    2bb2:	9000      	str	r0, [sp, #0]
	while (NULL != desc.sod) {
    2bb4:	b130      	cbz	r0, 2bc4 <usbdc_cb_ctl_req+0xac>
    2bb6:	24ff      	movs	r4, #255	; 0xff
			func       = (struct usbdf_driver *)usbdc.func_list.head;
    2bb8:	f8df 81e0 	ldr.w	r8, [pc, #480]	; 2d9c <usbdc_cb_ctl_req+0x284>
		desc.sod = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    2bbc:	4f79      	ldr	r7, [pc, #484]	; (2da4 <usbdc_cb_ctl_req+0x28c>)
    2bbe:	e018      	b.n	2bf2 <usbdc_cb_ctl_req+0xda>
		usbdc_unconfig();
    2bc0:	4b79      	ldr	r3, [pc, #484]	; (2da8 <usbdc_cb_ctl_req+0x290>)
    2bc2:	4798      	blx	r3
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    2bc4:	2301      	movs	r3, #1
    2bc6:	2200      	movs	r2, #0
    2bc8:	4611      	mov	r1, r2
    2bca:	4628      	mov	r0, r5
    2bcc:	4c72      	ldr	r4, [pc, #456]	; (2d98 <usbdc_cb_ctl_req+0x280>)
    2bce:	47a0      	blx	r4
    2bd0:	fab0 f080 	clz	r0, r0
    2bd4:	0940      	lsrs	r0, r0, #5
    2bd6:	e7b7      	b.n	2b48 <usbdc_cb_ctl_req+0x30>
			last_iface = desc.sod[2];
    2bd8:	464c      	mov	r4, r9
    2bda:	e000      	b.n	2bde <usbdc_cb_ctl_req+0xc6>
    2bdc:	464c      	mov	r4, r9
		desc.sod = usb_desc_next(desc.sod);
    2bde:	9800      	ldr	r0, [sp, #0]
	return (desc + usb_desc_len(desc));
    2be0:	7803      	ldrb	r3, [r0, #0]
    2be2:	4418      	add	r0, r3
    2be4:	9000      	str	r0, [sp, #0]
		desc.sod = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    2be6:	2204      	movs	r2, #4
    2be8:	9901      	ldr	r1, [sp, #4]
    2bea:	47b8      	blx	r7
    2bec:	9000      	str	r0, [sp, #0]
	while (NULL != desc.sod) {
    2bee:	2800      	cmp	r0, #0
    2bf0:	d0e8      	beq.n	2bc4 <usbdc_cb_ctl_req+0xac>
		if (last_iface != desc.sod[2] /* bInterfaceNumber */) {
    2bf2:	f890 9002 	ldrb.w	r9, [r0, #2]
    2bf6:	45a1      	cmp	r9, r4
    2bf8:	d0f1      	beq.n	2bde <usbdc_cb_ctl_req+0xc6>
			func       = (struct usbdf_driver *)usbdc.func_list.head;
    2bfa:	f8d8 4010 	ldr.w	r4, [r8, #16]
			while (NULL != func) {
    2bfe:	2c00      	cmp	r4, #0
    2c00:	d0ea      	beq.n	2bd8 <usbdc_cb_ctl_req+0xc0>
				if (func->ctrl(func, USBDF_ENABLE, &desc)) {
    2c02:	2600      	movs	r6, #0
    2c04:	6863      	ldr	r3, [r4, #4]
    2c06:	466a      	mov	r2, sp
    2c08:	4631      	mov	r1, r6
    2c0a:	4620      	mov	r0, r4
    2c0c:	4798      	blx	r3
    2c0e:	2800      	cmp	r0, #0
    2c10:	d0e4      	beq.n	2bdc <usbdc_cb_ctl_req+0xc4>
					func = func->next;
    2c12:	6824      	ldr	r4, [r4, #0]
			while (NULL != func) {
    2c14:	2c00      	cmp	r4, #0
    2c16:	d1f5      	bne.n	2c04 <usbdc_cb_ctl_req+0xec>
			last_iface = desc.sod[2];
    2c18:	464c      	mov	r4, r9
    2c1a:	e7e0      	b.n	2bde <usbdc_cb_ctl_req+0xc6>
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    2c1c:	f003 031f 	and.w	r3, r3, #31
    2c20:	2b02      	cmp	r3, #2
    2c22:	f040 816e 	bne.w	2f02 <usbdc_cb_ctl_req+0x3ea>
		if (req->wLength != 0) {
    2c26:	88e3      	ldrh	r3, [r4, #6]
    2c28:	b10b      	cbz	r3, 2c2e <usbdc_cb_ctl_req+0x116>
			return false;
    2c2a:	2000      	movs	r0, #0
    2c2c:	e78c      	b.n	2b48 <usbdc_cb_ctl_req+0x30>
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_CLR);
    2c2e:	88a0      	ldrh	r0, [r4, #4]
    2c30:	2100      	movs	r1, #0
    2c32:	b2c0      	uxtb	r0, r0
    2c34:	4b5d      	ldr	r3, [pc, #372]	; (2dac <usbdc_cb_ctl_req+0x294>)
    2c36:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
    2c38:	2301      	movs	r3, #1
    2c3a:	2200      	movs	r2, #0
    2c3c:	4611      	mov	r1, r2
    2c3e:	4628      	mov	r0, r5
    2c40:	4c55      	ldr	r4, [pc, #340]	; (2d98 <usbdc_cb_ctl_req+0x280>)
    2c42:	47a0      	blx	r4
		return true;
    2c44:	2001      	movs	r0, #1
    2c46:	e77f      	b.n	2b48 <usbdc_cb_ctl_req+0x30>
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    2c48:	f003 031f 	and.w	r3, r3, #31
    2c4c:	2b02      	cmp	r3, #2
    2c4e:	f040 815a 	bne.w	2f06 <usbdc_cb_ctl_req+0x3ee>
		if (req->wLength != 0) {
    2c52:	88e3      	ldrh	r3, [r4, #6]
    2c54:	b10b      	cbz	r3, 2c5a <usbdc_cb_ctl_req+0x142>
			return false;
    2c56:	2000      	movs	r0, #0
    2c58:	e776      	b.n	2b48 <usbdc_cb_ctl_req+0x30>
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_SET);
    2c5a:	88a0      	ldrh	r0, [r4, #4]
    2c5c:	2101      	movs	r1, #1
    2c5e:	b2c0      	uxtb	r0, r0
    2c60:	4b52      	ldr	r3, [pc, #328]	; (2dac <usbdc_cb_ctl_req+0x294>)
    2c62:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
    2c64:	2301      	movs	r3, #1
    2c66:	2200      	movs	r2, #0
    2c68:	4611      	mov	r1, r2
    2c6a:	4628      	mov	r0, r5
    2c6c:	4c4a      	ldr	r4, [pc, #296]	; (2d98 <usbdc_cb_ctl_req+0x280>)
    2c6e:	47a0      	blx	r4
		return true;
    2c70:	2001      	movs	r0, #1
    2c72:	e769      	b.n	2b48 <usbdc_cb_ctl_req+0x30>
		return usbdc_set_interface(req->wValue, req->wIndex);
    2c74:	8866      	ldrh	r6, [r4, #2]
    2c76:	88a4      	ldrh	r4, [r4, #4]
		ifc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, usbdc.cfg_value);
    2c78:	4a48      	ldr	r2, [pc, #288]	; (2d9c <usbdc_cb_ctl_req+0x284>)
    2c7a:	6813      	ldr	r3, [r2, #0]
    2c7c:	7ed2      	ldrb	r2, [r2, #27]
    2c7e:	6859      	ldr	r1, [r3, #4]
    2c80:	6818      	ldr	r0, [r3, #0]
    2c82:	4b47      	ldr	r3, [pc, #284]	; (2da0 <usbdc_cb_ctl_req+0x288>)
    2c84:	4798      	blx	r3
	if (NULL == ifc) {
    2c86:	2800      	cmp	r0, #0
    2c88:	d045      	beq.n	2d16 <usbdc_cb_ctl_req+0x1fe>
	desc.sod = ifc;
    2c8a:	9000      	str	r0, [sp, #0]
	return (ptr[0] + (ptr[1] << 8));
    2c8c:	78c2      	ldrb	r2, [r0, #3]
    2c8e:	7881      	ldrb	r1, [r0, #2]
    2c90:	eb01 2102 	add.w	r1, r1, r2, lsl #8
	desc.eod = ifc + usb_cfg_desc_total_len(ifc);
    2c94:	fa10 f181 	uxtah	r1, r0, r1
    2c98:	9101      	str	r1, [sp, #4]
	if (NULL == (ifc = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE))) {
    2c9a:	2204      	movs	r2, #4
    2c9c:	4b41      	ldr	r3, [pc, #260]	; (2da4 <usbdc_cb_ctl_req+0x28c>)
    2c9e:	4798      	blx	r3
    2ca0:	4603      	mov	r3, r0
    2ca2:	2800      	cmp	r0, #0
    2ca4:	d039      	beq.n	2d1a <usbdc_cb_ctl_req+0x202>
		ifc      = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    2ca6:	2704      	movs	r7, #4
    2ca8:	4d3e      	ldr	r5, [pc, #248]	; (2da4 <usbdc_cb_ctl_req+0x28c>)
    2caa:	e008      	b.n	2cbe <usbdc_cb_ctl_req+0x1a6>
		desc.sod = usb_desc_next(desc.sod);
    2cac:	9800      	ldr	r0, [sp, #0]
	return (desc + usb_desc_len(desc));
    2cae:	7803      	ldrb	r3, [r0, #0]
    2cb0:	4418      	add	r0, r3
    2cb2:	9000      	str	r0, [sp, #0]
		ifc      = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    2cb4:	463a      	mov	r2, r7
    2cb6:	9901      	ldr	r1, [sp, #4]
    2cb8:	47a8      	blx	r5
		if (NULL == ifc) {
    2cba:	4603      	mov	r3, r0
    2cbc:	b378      	cbz	r0, 2d1e <usbdc_cb_ctl_req+0x206>
	while (ifc[2] != ifc_id || ifc[3] != alt_set) {
    2cbe:	789a      	ldrb	r2, [r3, #2]
    2cc0:	42a2      	cmp	r2, r4
    2cc2:	d1f3      	bne.n	2cac <usbdc_cb_ctl_req+0x194>
    2cc4:	78da      	ldrb	r2, [r3, #3]
    2cc6:	42b2      	cmp	r2, r6
    2cc8:	d1f0      	bne.n	2cac <usbdc_cb_ctl_req+0x194>
	desc.sod = ifc;
    2cca:	9300      	str	r3, [sp, #0]
	func     = (struct usbdf_driver *)usbdc.func_list.head;
    2ccc:	4b33      	ldr	r3, [pc, #204]	; (2d9c <usbdc_cb_ctl_req+0x284>)
    2cce:	691d      	ldr	r5, [r3, #16]
	while (NULL != func) {
    2cd0:	b33d      	cbz	r5, 2d22 <usbdc_cb_ctl_req+0x20a>
		if (func->ctrl(func, USBDF_DISABLE, &desc)) {
    2cd2:	2701      	movs	r7, #1
    2cd4:	686b      	ldr	r3, [r5, #4]
    2cd6:	466a      	mov	r2, sp
    2cd8:	4639      	mov	r1, r7
    2cda:	4628      	mov	r0, r5
    2cdc:	4798      	blx	r3
    2cde:	b120      	cbz	r0, 2cea <usbdc_cb_ctl_req+0x1d2>
			func = func->next;
    2ce0:	682d      	ldr	r5, [r5, #0]
	while (NULL != func) {
    2ce2:	2d00      	cmp	r5, #0
    2ce4:	d1f6      	bne.n	2cd4 <usbdc_cb_ctl_req+0x1bc>
	return false;
    2ce6:	2000      	movs	r0, #0
    2ce8:	e72e      	b.n	2b48 <usbdc_cb_ctl_req+0x30>
		} else if (ERR_NONE == func->ctrl(func, USBDF_ENABLE, &desc)) {
    2cea:	686b      	ldr	r3, [r5, #4]
    2cec:	466a      	mov	r2, sp
    2cee:	2100      	movs	r1, #0
    2cf0:	4628      	mov	r0, r5
    2cf2:	4798      	blx	r3
    2cf4:	b9b8      	cbnz	r0, 2d26 <usbdc_cb_ctl_req+0x20e>
			if (alt_set) {
    2cf6:	b136      	cbz	r6, 2d06 <usbdc_cb_ctl_req+0x1ee>
				usbdc.ifc_alt_map |= 1 << ifc_id;
    2cf8:	4a28      	ldr	r2, [pc, #160]	; (2d9c <usbdc_cb_ctl_req+0x284>)
    2cfa:	2301      	movs	r3, #1
    2cfc:	fa03 f404 	lsl.w	r4, r3, r4
    2d00:	7f53      	ldrb	r3, [r2, #29]
    2d02:	4323      	orrs	r3, r4
    2d04:	7753      	strb	r3, [r2, #29]
			usbdc_xfer(0, NULL, 0, 0);
    2d06:	2300      	movs	r3, #0
    2d08:	461a      	mov	r2, r3
    2d0a:	4619      	mov	r1, r3
    2d0c:	4618      	mov	r0, r3
    2d0e:	4c22      	ldr	r4, [pc, #136]	; (2d98 <usbdc_cb_ctl_req+0x280>)
    2d10:	47a0      	blx	r4
			return true;
    2d12:	2001      	movs	r0, #1
    2d14:	e718      	b.n	2b48 <usbdc_cb_ctl_req+0x30>
		return false;
    2d16:	2000      	movs	r0, #0
    2d18:	e716      	b.n	2b48 <usbdc_cb_ctl_req+0x30>
		return false;
    2d1a:	2000      	movs	r0, #0
    2d1c:	e714      	b.n	2b48 <usbdc_cb_ctl_req+0x30>
			return false;
    2d1e:	2000      	movs	r0, #0
    2d20:	e712      	b.n	2b48 <usbdc_cb_ctl_req+0x30>
	return false;
    2d22:	2000      	movs	r0, #0
    2d24:	e710      	b.n	2b48 <usbdc_cb_ctl_req+0x30>
			return false;
    2d26:	2000      	movs	r0, #0
    2d28:	e70e      	b.n	2b48 <usbdc_cb_ctl_req+0x30>
	switch (req->bRequest) {
    2d2a:	7862      	ldrb	r2, [r4, #1]
    2d2c:	2a0a      	cmp	r2, #10
    2d2e:	f200 80ec 	bhi.w	2f0a <usbdc_cb_ctl_req+0x3f2>
    2d32:	e8df f012 	tbh	[pc, r2, lsl #1]
    2d36:	008e      	.short	0x008e
    2d38:	00ea00ea 	.word	0x00ea00ea
    2d3c:	00ea00ea 	.word	0x00ea00ea
    2d40:	000b00ea 	.word	0x000b00ea
    2d44:	008200ea 	.word	0x008200ea
    2d48:	00b200ea 	.word	0x00b200ea
	uint8_t type = (uint8_t)(req->wValue >> 8);
    2d4c:	8862      	ldrh	r2, [r4, #2]
	switch (type) {
    2d4e:	0a13      	lsrs	r3, r2, #8
    2d50:	2b02      	cmp	r3, #2
    2d52:	d02d      	beq.n	2db0 <usbdc_cb_ctl_req+0x298>
    2d54:	2b03      	cmp	r3, #3
    2d56:	d050      	beq.n	2dfa <usbdc_cb_ctl_req+0x2e2>
    2d58:	2b01      	cmp	r3, #1
    2d5a:	d001      	beq.n	2d60 <usbdc_cb_ctl_req+0x248>
	return false;
    2d5c:	2000      	movs	r0, #0
    2d5e:	e6f3      	b.n	2b48 <usbdc_cb_ctl_req+0x30>
	uint16_t length   = req->wLength;
    2d60:	88e2      	ldrh	r2, [r4, #6]
    2d62:	2a12      	cmp	r2, #18
    2d64:	bf28      	it	cs
    2d66:	2212      	movcs	r2, #18
    2d68:	4614      	mov	r4, r2
		dev_desc = usb_find_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, USB_DT_DEVICE);
    2d6a:	4b0c      	ldr	r3, [pc, #48]	; (2d9c <usbdc_cb_ctl_req+0x284>)
    2d6c:	681b      	ldr	r3, [r3, #0]
    2d6e:	2201      	movs	r2, #1
    2d70:	6859      	ldr	r1, [r3, #4]
    2d72:	6818      	ldr	r0, [r3, #0]
    2d74:	4b0b      	ldr	r3, [pc, #44]	; (2da4 <usbdc_cb_ctl_req+0x28c>)
    2d76:	4798      	blx	r3
	if (!dev_desc) {
    2d78:	4601      	mov	r1, r0
    2d7a:	2800      	cmp	r0, #0
    2d7c:	f000 80c7 	beq.w	2f0e <usbdc_cb_ctl_req+0x3f6>
	if (ERR_NONE != usbdc_xfer(ep, dev_desc, length, false)) {
    2d80:	2300      	movs	r3, #0
    2d82:	4622      	mov	r2, r4
    2d84:	4628      	mov	r0, r5
    2d86:	4c04      	ldr	r4, [pc, #16]	; (2d98 <usbdc_cb_ctl_req+0x280>)
    2d88:	47a0      	blx	r4
    2d8a:	fab0 f080 	clz	r0, r0
    2d8e:	0940      	lsrs	r0, r0, #5
    2d90:	e6da      	b.n	2b48 <usbdc_cb_ctl_req+0x30>
    2d92:	bf00      	nop
    2d94:	000029ad 	.word	0x000029ad
    2d98:	00002af9 	.word	0x00002af9
    2d9c:	200007b4 	.word	0x200007b4
    2da0:	000030bd 	.word	0x000030bd
    2da4:	0000303d 	.word	0x0000303d
    2da8:	00002961 	.word	0x00002961
    2dac:	00000d6d 	.word	0x00000d6d
	uint16_t length   = req->wLength;
    2db0:	88e4      	ldrh	r4, [r4, #6]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    2db2:	4b5b      	ldr	r3, [pc, #364]	; (2f20 <usbdc_cb_ctl_req+0x408>)
    2db4:	7f1e      	ldrb	r6, [r3, #28]
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index + 1);
    2db6:	681b      	ldr	r3, [r3, #0]
    2db8:	3201      	adds	r2, #1
    2dba:	b2d2      	uxtb	r2, r2
    2dbc:	6859      	ldr	r1, [r3, #4]
    2dbe:	6818      	ldr	r0, [r3, #0]
    2dc0:	4b58      	ldr	r3, [pc, #352]	; (2f24 <usbdc_cb_ctl_req+0x40c>)
    2dc2:	4798      	blx	r3
	if (NULL == cfg_desc) {
    2dc4:	4601      	mov	r1, r0
    2dc6:	2800      	cmp	r0, #0
    2dc8:	f000 80a3 	beq.w	2f12 <usbdc_cb_ctl_req+0x3fa>
	return (ptr[0] + (ptr[1] << 8));
    2dcc:	78c3      	ldrb	r3, [r0, #3]
    2dce:	7882      	ldrb	r2, [r0, #2]
    2dd0:	eb02 2203 	add.w	r2, r2, r3, lsl #8
    2dd4:	b292      	uxth	r2, r2
	if (length <= total_len) {
    2dd6:	4294      	cmp	r4, r2
    2dd8:	d90d      	bls.n	2df6 <usbdc_cb_ctl_req+0x2de>
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    2dda:	3e01      	subs	r6, #1
    2ddc:	4226      	tst	r6, r4
    2dde:	bf0c      	ite	eq
    2de0:	2301      	moveq	r3, #1
    2de2:	2300      	movne	r3, #0
		length = total_len;
    2de4:	4614      	mov	r4, r2
	if (ERR_NONE != usbdc_xfer(ep, cfg_desc, length, need_zlp)) {
    2de6:	4622      	mov	r2, r4
    2de8:	4628      	mov	r0, r5
    2dea:	4c4f      	ldr	r4, [pc, #316]	; (2f28 <usbdc_cb_ctl_req+0x410>)
    2dec:	47a0      	blx	r4
    2dee:	fab0 f080 	clz	r0, r0
    2df2:	0940      	lsrs	r0, r0, #5
    2df4:	e6a8      	b.n	2b48 <usbdc_cb_ctl_req+0x30>
		need_zlp = false;
    2df6:	2300      	movs	r3, #0
    2df8:	e7f5      	b.n	2de6 <usbdc_cb_ctl_req+0x2ce>
	uint16_t length   = req->wLength;
    2dfa:	88e4      	ldrh	r4, [r4, #6]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    2dfc:	4b48      	ldr	r3, [pc, #288]	; (2f20 <usbdc_cb_ctl_req+0x408>)
    2dfe:	7f1e      	ldrb	r6, [r3, #28]
	str_desc = usb_find_str_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index);
    2e00:	681b      	ldr	r3, [r3, #0]
    2e02:	b2d2      	uxtb	r2, r2
    2e04:	6859      	ldr	r1, [r3, #4]
    2e06:	6818      	ldr	r0, [r3, #0]
    2e08:	4b48      	ldr	r3, [pc, #288]	; (2f2c <usbdc_cb_ctl_req+0x414>)
    2e0a:	4798      	blx	r3
	if (NULL == str_desc) {
    2e0c:	4601      	mov	r1, r0
    2e0e:	2800      	cmp	r0, #0
    2e10:	f000 8081 	beq.w	2f16 <usbdc_cb_ctl_req+0x3fe>
	if (length <= str_desc[0]) {
    2e14:	7802      	ldrb	r2, [r0, #0]
    2e16:	4294      	cmp	r4, r2
    2e18:	d90d      	bls.n	2e36 <usbdc_cb_ctl_req+0x31e>
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    2e1a:	3e01      	subs	r6, #1
    2e1c:	4226      	tst	r6, r4
    2e1e:	bf0c      	ite	eq
    2e20:	2301      	moveq	r3, #1
    2e22:	2300      	movne	r3, #0
		length = str_desc[0];
    2e24:	4614      	mov	r4, r2
	if (ERR_NONE != usbdc_xfer(ep, str_desc, length, need_zlp)) {
    2e26:	4622      	mov	r2, r4
    2e28:	4628      	mov	r0, r5
    2e2a:	4c3f      	ldr	r4, [pc, #252]	; (2f28 <usbdc_cb_ctl_req+0x410>)
    2e2c:	47a0      	blx	r4
    2e2e:	fab0 f080 	clz	r0, r0
    2e32:	0940      	lsrs	r0, r0, #5
    2e34:	e688      	b.n	2b48 <usbdc_cb_ctl_req+0x30>
		need_zlp = false;
    2e36:	2300      	movs	r3, #0
    2e38:	e7f5      	b.n	2e26 <usbdc_cb_ctl_req+0x30e>
		*(uint8_t *)usbdc.ctrl_buf = usbdc.cfg_value;
    2e3a:	4939      	ldr	r1, [pc, #228]	; (2f20 <usbdc_cb_ctl_req+0x408>)
    2e3c:	694b      	ldr	r3, [r1, #20]
    2e3e:	7eca      	ldrb	r2, [r1, #27]
    2e40:	701a      	strb	r2, [r3, #0]
		usbdc_xfer(ep, usbdc.ctrl_buf, 1, false);
    2e42:	2300      	movs	r3, #0
    2e44:	2201      	movs	r2, #1
    2e46:	6949      	ldr	r1, [r1, #20]
    2e48:	4628      	mov	r0, r5
    2e4a:	4c37      	ldr	r4, [pc, #220]	; (2f28 <usbdc_cb_ctl_req+0x410>)
    2e4c:	47a0      	blx	r4
		return true;
    2e4e:	2001      	movs	r0, #1
    2e50:	e67a      	b.n	2b48 <usbdc_cb_ctl_req+0x30>
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    2e52:	f003 031f 	and.w	r3, r3, #31
    2e56:	2b01      	cmp	r3, #1
    2e58:	d903      	bls.n	2e62 <usbdc_cb_ctl_req+0x34a>
    2e5a:	2b02      	cmp	r3, #2
    2e5c:	d010      	beq.n	2e80 <usbdc_cb_ctl_req+0x368>
		return false;
    2e5e:	2000      	movs	r0, #0
    2e60:	e672      	b.n	2b48 <usbdc_cb_ctl_req+0x30>
		st = 0;
    2e62:	2300      	movs	r3, #0
    2e64:	9300      	str	r3, [sp, #0]
	memcpy(usbdc.ctrl_buf, &st, 2);
    2e66:	492e      	ldr	r1, [pc, #184]	; (2f20 <usbdc_cb_ctl_req+0x408>)
    2e68:	694b      	ldr	r3, [r1, #20]
    2e6a:	f8bd 2000 	ldrh.w	r2, [sp]
    2e6e:	801a      	strh	r2, [r3, #0]
	usbdc_xfer(ep, usbdc.ctrl_buf, 2, false);
    2e70:	2300      	movs	r3, #0
    2e72:	2202      	movs	r2, #2
    2e74:	6949      	ldr	r1, [r1, #20]
    2e76:	4628      	mov	r0, r5
    2e78:	4c2b      	ldr	r4, [pc, #172]	; (2f28 <usbdc_cb_ctl_req+0x410>)
    2e7a:	47a0      	blx	r4
	return true;
    2e7c:	2001      	movs	r0, #1
    2e7e:	e663      	b.n	2b48 <usbdc_cb_ctl_req+0x30>
		st = usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_GET);
    2e80:	88a0      	ldrh	r0, [r4, #4]
    2e82:	2102      	movs	r1, #2
    2e84:	b2c0      	uxtb	r0, r0
    2e86:	4b2a      	ldr	r3, [pc, #168]	; (2f30 <usbdc_cb_ctl_req+0x418>)
    2e88:	4798      	blx	r3
		if (st < 0) {
    2e8a:	2800      	cmp	r0, #0
    2e8c:	db03      	blt.n	2e96 <usbdc_cb_ctl_req+0x37e>
		st = st & 0x1;
    2e8e:	f000 0001 	and.w	r0, r0, #1
    2e92:	9000      	str	r0, [sp, #0]
    2e94:	e7e7      	b.n	2e66 <usbdc_cb_ctl_req+0x34e>
			return false;
    2e96:	2000      	movs	r0, #0
    2e98:	e656      	b.n	2b48 <usbdc_cb_ctl_req+0x30>
	if (!(usbdc.ifc_alt_map & (1 << req->wIndex))) {
    2e9a:	4b21      	ldr	r3, [pc, #132]	; (2f20 <usbdc_cb_ctl_req+0x408>)
    2e9c:	7f5b      	ldrb	r3, [r3, #29]
    2e9e:	88a2      	ldrh	r2, [r4, #4]
    2ea0:	4113      	asrs	r3, r2
    2ea2:	f013 0f01 	tst.w	r3, #1
    2ea6:	d012      	beq.n	2ece <usbdc_cb_ctl_req+0x3b6>
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    2ea8:	4b1d      	ldr	r3, [pc, #116]	; (2f20 <usbdc_cb_ctl_req+0x408>)
    2eaa:	691d      	ldr	r5, [r3, #16]
	return false;
    2eac:	2000      	movs	r0, #0
	while (NULL != func) {
    2eae:	2d00      	cmp	r5, #0
    2eb0:	f43f ae4a 	beq.w	2b48 <usbdc_cb_ctl_req+0x30>
		if (0 > (rc = func->ctrl(func, USBDF_GET_IFACE, req))) {
    2eb4:	2602      	movs	r6, #2
    2eb6:	686b      	ldr	r3, [r5, #4]
    2eb8:	4622      	mov	r2, r4
    2eba:	4631      	mov	r1, r6
    2ebc:	4628      	mov	r0, r5
    2ebe:	4798      	blx	r3
    2ec0:	2800      	cmp	r0, #0
    2ec2:	da0f      	bge.n	2ee4 <usbdc_cb_ctl_req+0x3cc>
			func = func->next;
    2ec4:	682d      	ldr	r5, [r5, #0]
	while (NULL != func) {
    2ec6:	2d00      	cmp	r5, #0
    2ec8:	d1f5      	bne.n	2eb6 <usbdc_cb_ctl_req+0x39e>
	return false;
    2eca:	2000      	movs	r0, #0
    2ecc:	e63c      	b.n	2b48 <usbdc_cb_ctl_req+0x30>
		usbdc.ctrl_buf[0] = 0;
    2ece:	4914      	ldr	r1, [pc, #80]	; (2f20 <usbdc_cb_ctl_req+0x408>)
    2ed0:	694b      	ldr	r3, [r1, #20]
    2ed2:	2000      	movs	r0, #0
    2ed4:	7018      	strb	r0, [r3, #0]
		usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    2ed6:	4603      	mov	r3, r0
    2ed8:	2201      	movs	r2, #1
    2eda:	6949      	ldr	r1, [r1, #20]
    2edc:	4c12      	ldr	r4, [pc, #72]	; (2f28 <usbdc_cb_ctl_req+0x410>)
    2ede:	47a0      	blx	r4
		return true;
    2ee0:	2001      	movs	r0, #1
    2ee2:	e631      	b.n	2b48 <usbdc_cb_ctl_req+0x30>
			usbdc.ctrl_buf[0] = (uint8_t)rc;
    2ee4:	490e      	ldr	r1, [pc, #56]	; (2f20 <usbdc_cb_ctl_req+0x408>)
    2ee6:	694b      	ldr	r3, [r1, #20]
    2ee8:	7018      	strb	r0, [r3, #0]
			usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    2eea:	2300      	movs	r3, #0
    2eec:	2201      	movs	r2, #1
    2eee:	6949      	ldr	r1, [r1, #20]
    2ef0:	4618      	mov	r0, r3
    2ef2:	4c0d      	ldr	r4, [pc, #52]	; (2f28 <usbdc_cb_ctl_req+0x410>)
    2ef4:	47a0      	blx	r4
			return true;
    2ef6:	2001      	movs	r0, #1
    2ef8:	e626      	b.n	2b48 <usbdc_cb_ctl_req+0x30>
		return true;
    2efa:	2001      	movs	r0, #1
    2efc:	e624      	b.n	2b48 <usbdc_cb_ctl_req+0x30>
		return false;
    2efe:	2000      	movs	r0, #0
    2f00:	e622      	b.n	2b48 <usbdc_cb_ctl_req+0x30>
		return false;
    2f02:	2000      	movs	r0, #0
    2f04:	e620      	b.n	2b48 <usbdc_cb_ctl_req+0x30>
		return false;
    2f06:	2000      	movs	r0, #0
    2f08:	e61e      	b.n	2b48 <usbdc_cb_ctl_req+0x30>
		return false;
    2f0a:	2000      	movs	r0, #0
    2f0c:	e61c      	b.n	2b48 <usbdc_cb_ctl_req+0x30>
		return false;
    2f0e:	2000      	movs	r0, #0
    2f10:	e61a      	b.n	2b48 <usbdc_cb_ctl_req+0x30>
		return false;
    2f12:	2000      	movs	r0, #0
    2f14:	e618      	b.n	2b48 <usbdc_cb_ctl_req+0x30>
		return false;
    2f16:	2000      	movs	r0, #0
    2f18:	e616      	b.n	2b48 <usbdc_cb_ctl_req+0x30>
			return false;
    2f1a:	2000      	movs	r0, #0
    2f1c:	e614      	b.n	2b48 <usbdc_cb_ctl_req+0x30>
    2f1e:	bf00      	nop
    2f20:	200007b4 	.word	0x200007b4
    2f24:	000030bd 	.word	0x000030bd
    2f28:	00002af9 	.word	0x00002af9
    2f2c:	00003125 	.word	0x00003125
    2f30:	00000d6d 	.word	0x00000d6d

00002f34 <usbdc_register_handler>:

/**
 * \brief Register the handler
 */
void usbdc_register_handler(enum usbdc_handler_type type, const struct usbdc_handler *h)
{
    2f34:	b508      	push	{r3, lr}
	switch (type) {
    2f36:	2801      	cmp	r0, #1
    2f38:	d007      	beq.n	2f4a <usbdc_register_handler+0x16>
    2f3a:	b110      	cbz	r0, 2f42 <usbdc_register_handler+0xe>
    2f3c:	2802      	cmp	r0, #2
    2f3e:	d008      	beq.n	2f52 <usbdc_register_handler+0x1e>
    2f40:	bd08      	pop	{r3, pc}
	case USBDC_HDL_SOF:
		list_insert_at_end(&usbdc.handlers.sof_list, (void *)h);
    2f42:	4806      	ldr	r0, [pc, #24]	; (2f5c <usbdc_register_handler+0x28>)
    2f44:	4b06      	ldr	r3, [pc, #24]	; (2f60 <usbdc_register_handler+0x2c>)
    2f46:	4798      	blx	r3
		break;
    2f48:	bd08      	pop	{r3, pc}
	case USBDC_HDL_REQ:
		list_insert_at_end(&usbdc.handlers.req_list, (void *)h);
    2f4a:	4806      	ldr	r0, [pc, #24]	; (2f64 <usbdc_register_handler+0x30>)
    2f4c:	4b04      	ldr	r3, [pc, #16]	; (2f60 <usbdc_register_handler+0x2c>)
    2f4e:	4798      	blx	r3
		break;
    2f50:	bd08      	pop	{r3, pc}
	case USBDC_HDL_CHANGE:
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
    2f52:	4805      	ldr	r0, [pc, #20]	; (2f68 <usbdc_register_handler+0x34>)
    2f54:	4b02      	ldr	r3, [pc, #8]	; (2f60 <usbdc_register_handler+0x2c>)
    2f56:	4798      	blx	r3
    2f58:	bd08      	pop	{r3, pc}
    2f5a:	bf00      	nop
    2f5c:	200007b8 	.word	0x200007b8
    2f60:	000031e5 	.word	0x000031e5
    2f64:	200007bc 	.word	0x200007bc
    2f68:	200007c0 	.word	0x200007c0

00002f6c <usbdc_init>:

/**
 * \brief Initialize the USB device core driver
 */
int32_t usbdc_init(uint8_t *ctrl_buf)
{
    2f6c:	b538      	push	{r3, r4, r5, lr}
	ASSERT(ctrl_buf);
    2f6e:	4605      	mov	r5, r0
    2f70:	f240 3255 	movw	r2, #853	; 0x355
    2f74:	490c      	ldr	r1, [pc, #48]	; (2fa8 <usbdc_init+0x3c>)
    2f76:	3000      	adds	r0, #0
    2f78:	bf18      	it	ne
    2f7a:	2001      	movne	r0, #1
    2f7c:	4b0b      	ldr	r3, [pc, #44]	; (2fac <usbdc_init+0x40>)
    2f7e:	4798      	blx	r3

	int32_t rc;

	rc = usb_d_init();
    2f80:	4b0b      	ldr	r3, [pc, #44]	; (2fb0 <usbdc_init+0x44>)
    2f82:	4798      	blx	r3
	if (rc < 0) {
    2f84:	2800      	cmp	r0, #0
    2f86:	db0e      	blt.n	2fa6 <usbdc_init+0x3a>
		return rc;
	}

	memset(&usbdc, 0, sizeof(usbdc));
    2f88:	4c0a      	ldr	r4, [pc, #40]	; (2fb4 <usbdc_init+0x48>)
    2f8a:	2220      	movs	r2, #32
    2f8c:	2100      	movs	r1, #0
    2f8e:	4620      	mov	r0, r4
    2f90:	4b09      	ldr	r3, [pc, #36]	; (2fb8 <usbdc_init+0x4c>)
    2f92:	4798      	blx	r3
	usbdc.ctrl_buf = ctrl_buf;
    2f94:	6165      	str	r5, [r4, #20]
	usb_d_register_callback(USB_D_CB_SOF, (FUNC_PTR)usbd_sof_cb);
    2f96:	4909      	ldr	r1, [pc, #36]	; (2fbc <usbdc_init+0x50>)
    2f98:	2000      	movs	r0, #0
    2f9a:	4c09      	ldr	r4, [pc, #36]	; (2fc0 <usbdc_init+0x54>)
    2f9c:	47a0      	blx	r4
	usb_d_register_callback(USB_D_CB_EVENT, (FUNC_PTR)usbd_event_cb);
    2f9e:	4909      	ldr	r1, [pc, #36]	; (2fc4 <usbdc_init+0x58>)
    2fa0:	2001      	movs	r0, #1
    2fa2:	47a0      	blx	r4

	return 0;
    2fa4:	2000      	movs	r0, #0
}
    2fa6:	bd38      	pop	{r3, r4, r5, pc}
    2fa8:	000035fc 	.word	0x000035fc
    2fac:	00000e21 	.word	0x00000e21
    2fb0:	00000ad5 	.word	0x00000ad5
    2fb4:	200007b4 	.word	0x200007b4
    2fb8:	000033a9 	.word	0x000033a9
    2fbc:	000029ed 	.word	0x000029ed
    2fc0:	00000b3d 	.word	0x00000b3d
    2fc4:	00002ad9 	.word	0x00002ad9

00002fc8 <usbdc_register_function>:
 * \brief Register/unregister function support of a USB device function
 *
 * Must be invoked when USB device is stopped.
 */
void usbdc_register_function(struct usbdf_driver *func)
{
    2fc8:	b508      	push	{r3, lr}
	list_insert_at_end(&usbdc.func_list, func);
    2fca:	4601      	mov	r1, r0
    2fcc:	4801      	ldr	r0, [pc, #4]	; (2fd4 <usbdc_register_function+0xc>)
    2fce:	4b02      	ldr	r3, [pc, #8]	; (2fd8 <usbdc_register_function+0x10>)
    2fd0:	4798      	blx	r3
    2fd2:	bd08      	pop	{r3, pc}
    2fd4:	200007c4 	.word	0x200007c4
    2fd8:	000031e5 	.word	0x000031e5

00002fdc <usbdc_start>:

/**
 * \brief Start the USB device driver with specific descriptors set
 */
int32_t usbdc_start(struct usbd_descriptors *desces)
{
    2fdc:	b508      	push	{r3, lr}
	if (usbdc.state >= USBD_S_POWER) {
    2fde:	4b0a      	ldr	r3, [pc, #40]	; (3008 <usbdc_start+0x2c>)
    2fe0:	7e9b      	ldrb	r3, [r3, #26]
    2fe2:	b95b      	cbnz	r3, 2ffc <usbdc_start+0x20>
		return ERR_BUSY;
	}

	if (desces) {
    2fe4:	b168      	cbz	r0, 3002 <usbdc_start+0x26>
		usbdc.desces.ls_fs = desces;
    2fe6:	4b08      	ldr	r3, [pc, #32]	; (3008 <usbdc_start+0x2c>)
    2fe8:	6018      	str	r0, [r3, #0]
#endif
	} else {
		return ERR_BAD_DATA;
	}

	usbdc.ctrl_size = desces->sod[7];
    2fea:	6802      	ldr	r2, [r0, #0]
    2fec:	79d2      	ldrb	r2, [r2, #7]
    2fee:	771a      	strb	r2, [r3, #28]
	usbdc.state     = USBD_S_POWER;
    2ff0:	2201      	movs	r2, #1
    2ff2:	769a      	strb	r2, [r3, #26]
	usb_d_enable();
    2ff4:	4b05      	ldr	r3, [pc, #20]	; (300c <usbdc_start+0x30>)
    2ff6:	4798      	blx	r3
	return ERR_NONE;
    2ff8:	2000      	movs	r0, #0
    2ffa:	bd08      	pop	{r3, pc}
		return ERR_BUSY;
    2ffc:	f06f 0003 	mvn.w	r0, #3
    3000:	bd08      	pop	{r3, pc}
		return ERR_BAD_DATA;
    3002:	f06f 0008 	mvn.w	r0, #8
}
    3006:	bd08      	pop	{r3, pc}
    3008:	200007b4 	.word	0x200007b4
    300c:	00000b49 	.word	0x00000b49

00003010 <usbdc_attach>:

/**
 * \brief Attach the USB device to host
 */
void usbdc_attach(void)
{
    3010:	b508      	push	{r3, lr}
	usb_d_attach();
    3012:	4b01      	ldr	r3, [pc, #4]	; (3018 <usbdc_attach+0x8>)
    3014:	4798      	blx	r3
    3016:	bd08      	pop	{r3, pc}
    3018:	00000b55 	.word	0x00000b55

0000301c <usbdc_get_ctrl_buffer>:
 * \brief Return USB Device endpoint0 buffer
 */
uint8_t *usbdc_get_ctrl_buffer(void)
{
	return usbdc.ctrl_buf;
}
    301c:	4b01      	ldr	r3, [pc, #4]	; (3024 <usbdc_get_ctrl_buffer+0x8>)
    301e:	6958      	ldr	r0, [r3, #20]
    3020:	4770      	bx	lr
    3022:	bf00      	nop
    3024:	200007b4 	.word	0x200007b4

00003028 <usbdc_get_state>:
/**
 * \brief Return current USB state
 */
uint8_t usbdc_get_state(void)
{
	if (usbdc.state & USBD_S_SUSPEND) {
    3028:	4b03      	ldr	r3, [pc, #12]	; (3038 <usbdc_get_state+0x10>)
    302a:	7e98      	ldrb	r0, [r3, #26]
    302c:	f000 0310 	and.w	r3, r0, #16
		return USBD_S_SUSPEND;
    3030:	2b00      	cmp	r3, #0
	}
	return usbdc.state;
}
    3032:	bf18      	it	ne
    3034:	2010      	movne	r0, #16
    3036:	4770      	bx	lr
    3038:	200007b4 	.word	0x200007b4

0000303c <usb_find_desc>:

uint8_t *usb_find_desc(uint8_t *desc, uint8_t *eof, uint8_t type)
{
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    303c:	4288      	cmp	r0, r1
    303e:	d214      	bcs.n	306a <usb_find_desc+0x2e>
	return desc[0];
    3040:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    3042:	2b01      	cmp	r3, #1
    3044:	d913      	bls.n	306e <usb_find_desc+0x32>
{
    3046:	b410      	push	{r4}
		if (type == usb_desc_type(desc)) {
    3048:	7844      	ldrb	r4, [r0, #1]
    304a:	4294      	cmp	r4, r2
    304c:	d00a      	beq.n	3064 <usb_find_desc+0x28>
	return (desc + usb_desc_len(desc));
    304e:	4418      	add	r0, r3
	while (desc < eof) {
    3050:	4281      	cmp	r1, r0
    3052:	d906      	bls.n	3062 <usb_find_desc+0x26>
	return desc[0];
    3054:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    3056:	2b01      	cmp	r3, #1
    3058:	d90b      	bls.n	3072 <usb_find_desc+0x36>
	return desc[1];
    305a:	7844      	ldrb	r4, [r0, #1]
		if (type == usb_desc_type(desc)) {
    305c:	4294      	cmp	r4, r2
    305e:	d1f6      	bne.n	304e <usb_find_desc+0x12>
    3060:	e000      	b.n	3064 <usb_find_desc+0x28>
			return desc;
		}
		desc = usb_desc_next(desc);
	}
	return NULL;
    3062:	2000      	movs	r0, #0
}
    3064:	f85d 4b04 	ldr.w	r4, [sp], #4
    3068:	4770      	bx	lr
	return NULL;
    306a:	2000      	movs	r0, #0
    306c:	4770      	bx	lr
		_desc_len_check();
    306e:	2000      	movs	r0, #0
    3070:	4770      	bx	lr
    3072:	2000      	movs	r0, #0
    3074:	e7f6      	b.n	3064 <usb_find_desc+0x28>

00003076 <usb_find_ep_desc>:

uint8_t *usb_find_ep_desc(uint8_t *desc, uint8_t *eof)
{
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    3076:	4288      	cmp	r0, r1
    3078:	d216      	bcs.n	30a8 <usb_find_ep_desc+0x32>
	return desc[0];
    307a:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    307c:	2b01      	cmp	r3, #1
    307e:	d915      	bls.n	30ac <usb_find_ep_desc+0x36>
	return desc[1];
    3080:	7842      	ldrb	r2, [r0, #1]
		if (USB_DT_INTERFACE == usb_desc_type(desc)) {
    3082:	2a04      	cmp	r2, #4
    3084:	d014      	beq.n	30b0 <usb_find_ep_desc+0x3a>
			break;
		}
		if (USB_DT_ENDPOINT == usb_desc_type(desc)) {
    3086:	2a05      	cmp	r2, #5
    3088:	d00b      	beq.n	30a2 <usb_find_ep_desc+0x2c>
	return (desc + usb_desc_len(desc));
    308a:	4418      	add	r0, r3
	while (desc < eof) {
    308c:	4281      	cmp	r1, r0
    308e:	d909      	bls.n	30a4 <usb_find_ep_desc+0x2e>
	return desc[0];
    3090:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    3092:	2b01      	cmp	r3, #1
    3094:	d90e      	bls.n	30b4 <usb_find_ep_desc+0x3e>
	return desc[1];
    3096:	7842      	ldrb	r2, [r0, #1]
		if (USB_DT_INTERFACE == usb_desc_type(desc)) {
    3098:	2a04      	cmp	r2, #4
    309a:	d00d      	beq.n	30b8 <usb_find_ep_desc+0x42>
		if (USB_DT_ENDPOINT == usb_desc_type(desc)) {
    309c:	2a05      	cmp	r2, #5
    309e:	d1f4      	bne.n	308a <usb_find_ep_desc+0x14>
    30a0:	e00b      	b.n	30ba <usb_find_ep_desc+0x44>
    30a2:	4770      	bx	lr
			return desc;
		}
		desc = usb_desc_next(desc);
	}
	return NULL;
    30a4:	2000      	movs	r0, #0
    30a6:	4770      	bx	lr
    30a8:	2000      	movs	r0, #0
    30aa:	4770      	bx	lr
		_desc_len_check();
    30ac:	2000      	movs	r0, #0
    30ae:	4770      	bx	lr
	return NULL;
    30b0:	2000      	movs	r0, #0
    30b2:	4770      	bx	lr
		_desc_len_check();
    30b4:	2000      	movs	r0, #0
    30b6:	4770      	bx	lr
	return NULL;
    30b8:	2000      	movs	r0, #0
}
    30ba:	4770      	bx	lr

000030bc <usb_find_cfg_desc>:

uint8_t *usb_find_cfg_desc(uint8_t *desc, uint8_t *eof, uint8_t cfg_value)
{
    30bc:	b538      	push	{r3, r4, r5, lr}
    30be:	460c      	mov	r4, r1
    30c0:	4615      	mov	r5, r2
	_param_error_check(desc && eof && (desc < eof));

	desc = usb_find_desc(desc, eof, USB_DT_CONFIG);
    30c2:	2202      	movs	r2, #2
    30c4:	4b16      	ldr	r3, [pc, #88]	; (3120 <usb_find_cfg_desc+0x64>)
    30c6:	4798      	blx	r3
	if (!desc) {
    30c8:	4603      	mov	r3, r0
    30ca:	b1e8      	cbz	r0, 3108 <usb_find_cfg_desc+0x4c>
		return NULL;
	}
	while (desc < eof) {
    30cc:	4284      	cmp	r4, r0
    30ce:	d91d      	bls.n	310c <usb_find_cfg_desc+0x50>
		_desc_len_check();
    30d0:	7802      	ldrb	r2, [r0, #0]
    30d2:	2a01      	cmp	r2, #1
    30d4:	d91c      	bls.n	3110 <usb_find_cfg_desc+0x54>
		if (desc[1] != USB_DT_CONFIG) {
    30d6:	7842      	ldrb	r2, [r0, #1]
    30d8:	2a02      	cmp	r2, #2
    30da:	d11b      	bne.n	3114 <usb_find_cfg_desc+0x58>
			break;
		}
		if (desc[5] == cfg_value) {
    30dc:	7942      	ldrb	r2, [r0, #5]
    30de:	42aa      	cmp	r2, r5
    30e0:	d012      	beq.n	3108 <usb_find_cfg_desc+0x4c>
	return (ptr[0] + (ptr[1] << 8));
    30e2:	78d9      	ldrb	r1, [r3, #3]
    30e4:	789a      	ldrb	r2, [r3, #2]
    30e6:	eb02 2201 	add.w	r2, r2, r1, lsl #8
 *  \param[in] cfg_desc Byte pointer to the descriptor start address
 *  \return Byte pointer to descriptor after configuration end
 */
static inline uint8_t *usb_cfg_desc_next(uint8_t *cfg_desc)
{
	return (cfg_desc + usb_cfg_desc_total_len(cfg_desc));
    30ea:	fa13 f382 	uxtah	r3, r3, r2
	while (desc < eof) {
    30ee:	429c      	cmp	r4, r3
    30f0:	d909      	bls.n	3106 <usb_find_cfg_desc+0x4a>
		_desc_len_check();
    30f2:	781a      	ldrb	r2, [r3, #0]
    30f4:	2a01      	cmp	r2, #1
    30f6:	d90f      	bls.n	3118 <usb_find_cfg_desc+0x5c>
		if (desc[1] != USB_DT_CONFIG) {
    30f8:	785a      	ldrb	r2, [r3, #1]
    30fa:	2a02      	cmp	r2, #2
    30fc:	d10e      	bne.n	311c <usb_find_cfg_desc+0x60>
		if (desc[5] == cfg_value) {
    30fe:	795a      	ldrb	r2, [r3, #5]
    3100:	42aa      	cmp	r2, r5
    3102:	d1ee      	bne.n	30e2 <usb_find_cfg_desc+0x26>
    3104:	e000      	b.n	3108 <usb_find_cfg_desc+0x4c>
			return desc;
		}
		desc = usb_cfg_desc_next(desc);
	}
	return NULL;
    3106:	2300      	movs	r3, #0
}
    3108:	4618      	mov	r0, r3
    310a:	bd38      	pop	{r3, r4, r5, pc}
	return NULL;
    310c:	2300      	movs	r3, #0
    310e:	e7fb      	b.n	3108 <usb_find_cfg_desc+0x4c>
		_desc_len_check();
    3110:	2300      	movs	r3, #0
    3112:	e7f9      	b.n	3108 <usb_find_cfg_desc+0x4c>
	return NULL;
    3114:	2300      	movs	r3, #0
    3116:	e7f7      	b.n	3108 <usb_find_cfg_desc+0x4c>
		_desc_len_check();
    3118:	2300      	movs	r3, #0
    311a:	e7f5      	b.n	3108 <usb_find_cfg_desc+0x4c>
	return NULL;
    311c:	2300      	movs	r3, #0
    311e:	e7f3      	b.n	3108 <usb_find_cfg_desc+0x4c>
    3120:	0000303d 	.word	0x0000303d

00003124 <usb_find_str_desc>:
{
	uint8_t i;

	_param_error_check(desc && eof && (desc < eof));

	for (i = 0; desc < eof;) {
    3124:	4288      	cmp	r0, r1
    3126:	d217      	bcs.n	3158 <usb_find_str_desc+0x34>
{
    3128:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    312c:	460d      	mov	r5, r1
    312e:	4616      	mov	r6, r2
	for (i = 0; desc < eof;) {
    3130:	2400      	movs	r4, #0
		desc = usb_find_desc(desc, eof, USB_DT_STRING);
    3132:	f04f 0803 	mov.w	r8, #3
    3136:	4f0c      	ldr	r7, [pc, #48]	; (3168 <usb_find_str_desc+0x44>)
    3138:	4642      	mov	r2, r8
    313a:	4629      	mov	r1, r5
    313c:	47b8      	blx	r7
		if (desc) {
    313e:	4603      	mov	r3, r0
    3140:	b170      	cbz	r0, 3160 <usb_find_str_desc+0x3c>
	return desc[0];
    3142:	7800      	ldrb	r0, [r0, #0]
			_desc_len_check();
    3144:	2801      	cmp	r0, #1
    3146:	d90a      	bls.n	315e <usb_find_str_desc+0x3a>
			if (i == str_index) {
    3148:	42a6      	cmp	r6, r4
    314a:	d009      	beq.n	3160 <usb_find_str_desc+0x3c>
	return (desc + usb_desc_len(desc));
    314c:	4418      	add	r0, r3
    314e:	3401      	adds	r4, #1
	for (i = 0; desc < eof;) {
    3150:	4285      	cmp	r5, r0
    3152:	d8f1      	bhi.n	3138 <usb_find_str_desc+0x14>
			desc = usb_desc_next(desc);
		} else {
			return NULL;
		}
	}
	return NULL;
    3154:	2300      	movs	r3, #0
    3156:	e003      	b.n	3160 <usb_find_str_desc+0x3c>
    3158:	2300      	movs	r3, #0
}
    315a:	4618      	mov	r0, r3
    315c:	4770      	bx	lr
			_desc_len_check();
    315e:	2300      	movs	r3, #0
}
    3160:	4618      	mov	r0, r3
    3162:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3166:	bf00      	nop
    3168:	0000303d 	.word	0x0000303d

0000316c <cdc_device_acm_init>:

/**
 * \brief CDC ACM Init
 */
void cdc_device_acm_init(void)
{
    316c:	b508      	push	{r3, lr}
	/* usb stack init */
	usbdc_init(ctrl_buffer);
    316e:	4805      	ldr	r0, [pc, #20]	; (3184 <cdc_device_acm_init+0x18>)
    3170:	4b05      	ldr	r3, [pc, #20]	; (3188 <cdc_device_acm_init+0x1c>)
    3172:	4798      	blx	r3

	/* usbdc_register_funcion inside */
	cdcdf_acm_init();
    3174:	4b05      	ldr	r3, [pc, #20]	; (318c <cdc_device_acm_init+0x20>)
    3176:	4798      	blx	r3

	usbdc_start(single_desc);
    3178:	4805      	ldr	r0, [pc, #20]	; (3190 <cdc_device_acm_init+0x24>)
    317a:	4b06      	ldr	r3, [pc, #24]	; (3194 <cdc_device_acm_init+0x28>)
    317c:	4798      	blx	r3
	usbdc_attach();
    317e:	4b06      	ldr	r3, [pc, #24]	; (3198 <cdc_device_acm_init+0x2c>)
    3180:	4798      	blx	r3
    3182:	bd08      	pop	{r3, pc}
    3184:	20000814 	.word	0x20000814
    3188:	00002f6d 	.word	0x00002f6d
    318c:	000028e9 	.word	0x000028e9
    3190:	20000078 	.word	0x20000078
    3194:	00002fdd 	.word	0x00002fdd
    3198:	00003011 	.word	0x00003011

0000319c <usb_init>:
	while (1) {
	}
}

void usb_init(void)
{
    319c:	b508      	push	{r3, lr}

	cdc_device_acm_init();
    319e:	4b01      	ldr	r3, [pc, #4]	; (31a4 <usb_init+0x8>)
    31a0:	4798      	blx	r3
    31a2:	bd08      	pop	{r3, pc}
    31a4:	0000316d 	.word	0x0000316d

000031a8 <atomic_enter_critical>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    31a8:	f3ef 8310 	mrs	r3, PRIMASK
/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
	*atomic = __get_PRIMASK();
    31ac:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
    31ae:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    31b0:	f3bf 8f5f 	dmb	sy
    31b4:	4770      	bx	lr

000031b6 <atomic_leave_critical>:
    31b6:	f3bf 8f5f 	dmb	sy
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
	__DMB();
	__set_PRIMASK(*atomic);
    31ba:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    31bc:	f383 8810 	msr	PRIMASK, r3
    31c0:	4770      	bx	lr

000031c2 <is_list_element>:
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
    31c2:	6803      	ldr	r3, [r0, #0]
    31c4:	b14b      	cbz	r3, 31da <is_list_element+0x18>
		if (it == element) {
    31c6:	428b      	cmp	r3, r1
    31c8:	d009      	beq.n	31de <is_list_element+0x1c>
	for (it = list->head; it; it = it->next) {
    31ca:	681b      	ldr	r3, [r3, #0]
    31cc:	b11b      	cbz	r3, 31d6 <is_list_element+0x14>
		if (it == element) {
    31ce:	4299      	cmp	r1, r3
    31d0:	d1fb      	bne.n	31ca <is_list_element+0x8>
			return true;
    31d2:	2001      	movs	r0, #1
		}
	}

	return false;
}
    31d4:	4770      	bx	lr
	return false;
    31d6:	2000      	movs	r0, #0
    31d8:	4770      	bx	lr
    31da:	2000      	movs	r0, #0
    31dc:	4770      	bx	lr
			return true;
    31de:	2001      	movs	r0, #1
    31e0:	4770      	bx	lr
	...

000031e4 <list_insert_at_end>:

/**
 * \brief Insert an element at list end
 */
void list_insert_at_end(struct list_descriptor *const list, void *const element)
{
    31e4:	b570      	push	{r4, r5, r6, lr}
    31e6:	4605      	mov	r5, r0
    31e8:	460e      	mov	r6, r1
	struct list_element *it = list->head;
    31ea:	6804      	ldr	r4, [r0, #0]

	ASSERT(!is_list_element(list, element));
    31ec:	4b0a      	ldr	r3, [pc, #40]	; (3218 <list_insert_at_end+0x34>)
    31ee:	4798      	blx	r3
    31f0:	f080 0001 	eor.w	r0, r0, #1
    31f4:	224f      	movs	r2, #79	; 0x4f
    31f6:	4909      	ldr	r1, [pc, #36]	; (321c <list_insert_at_end+0x38>)
    31f8:	b2c0      	uxtb	r0, r0
    31fa:	4b09      	ldr	r3, [pc, #36]	; (3220 <list_insert_at_end+0x3c>)
    31fc:	4798      	blx	r3

	if (!list->head) {
    31fe:	682b      	ldr	r3, [r5, #0]
    3200:	b91b      	cbnz	r3, 320a <list_insert_at_end+0x26>
		list->head                             = (struct list_element *)element;
    3202:	602e      	str	r6, [r5, #0]
		((struct list_element *)element)->next = NULL;
    3204:	6033      	str	r3, [r6, #0]
		return;
    3206:	bd70      	pop	{r4, r5, r6, pc}
	}

	while (it->next) {
		it = it->next;
    3208:	461c      	mov	r4, r3
	while (it->next) {
    320a:	6823      	ldr	r3, [r4, #0]
    320c:	2b00      	cmp	r3, #0
    320e:	d1fb      	bne.n	3208 <list_insert_at_end+0x24>
	}
	it->next                               = (struct list_element *)element;
    3210:	6026      	str	r6, [r4, #0]
	((struct list_element *)element)->next = NULL;
    3212:	6033      	str	r3, [r6, #0]
    3214:	bd70      	pop	{r4, r5, r6, pc}
    3216:	bf00      	nop
    3218:	000031c3 	.word	0x000031c3
    321c:	00003614 	.word	0x00003614
    3220:	00000e21 	.word	0x00000e21

00003224 <__libc_init_array>:
    3224:	b570      	push	{r4, r5, r6, lr}
    3226:	4e0f      	ldr	r6, [pc, #60]	; (3264 <__libc_init_array+0x40>)
    3228:	4d0f      	ldr	r5, [pc, #60]	; (3268 <__libc_init_array+0x44>)
    322a:	1b76      	subs	r6, r6, r5
    322c:	10b6      	asrs	r6, r6, #2
    322e:	bf18      	it	ne
    3230:	2400      	movne	r4, #0
    3232:	d005      	beq.n	3240 <__libc_init_array+0x1c>
    3234:	3401      	adds	r4, #1
    3236:	f855 3b04 	ldr.w	r3, [r5], #4
    323a:	4798      	blx	r3
    323c:	42a6      	cmp	r6, r4
    323e:	d1f9      	bne.n	3234 <__libc_init_array+0x10>
    3240:	4e0a      	ldr	r6, [pc, #40]	; (326c <__libc_init_array+0x48>)
    3242:	4d0b      	ldr	r5, [pc, #44]	; (3270 <__libc_init_array+0x4c>)
    3244:	1b76      	subs	r6, r6, r5
    3246:	f000 f9f7 	bl	3638 <_init>
    324a:	10b6      	asrs	r6, r6, #2
    324c:	bf18      	it	ne
    324e:	2400      	movne	r4, #0
    3250:	d006      	beq.n	3260 <__libc_init_array+0x3c>
    3252:	3401      	adds	r4, #1
    3254:	f855 3b04 	ldr.w	r3, [r5], #4
    3258:	4798      	blx	r3
    325a:	42a6      	cmp	r6, r4
    325c:	d1f9      	bne.n	3252 <__libc_init_array+0x2e>
    325e:	bd70      	pop	{r4, r5, r6, pc}
    3260:	bd70      	pop	{r4, r5, r6, pc}
    3262:	bf00      	nop
    3264:	00003644 	.word	0x00003644
    3268:	00003644 	.word	0x00003644
    326c:	0000364c 	.word	0x0000364c
    3270:	00003644 	.word	0x00003644

00003274 <memcpy>:
    3274:	4684      	mov	ip, r0
    3276:	ea41 0300 	orr.w	r3, r1, r0
    327a:	f013 0303 	ands.w	r3, r3, #3
    327e:	d16d      	bne.n	335c <memcpy+0xe8>
    3280:	3a40      	subs	r2, #64	; 0x40
    3282:	d341      	bcc.n	3308 <memcpy+0x94>
    3284:	f851 3b04 	ldr.w	r3, [r1], #4
    3288:	f840 3b04 	str.w	r3, [r0], #4
    328c:	f851 3b04 	ldr.w	r3, [r1], #4
    3290:	f840 3b04 	str.w	r3, [r0], #4
    3294:	f851 3b04 	ldr.w	r3, [r1], #4
    3298:	f840 3b04 	str.w	r3, [r0], #4
    329c:	f851 3b04 	ldr.w	r3, [r1], #4
    32a0:	f840 3b04 	str.w	r3, [r0], #4
    32a4:	f851 3b04 	ldr.w	r3, [r1], #4
    32a8:	f840 3b04 	str.w	r3, [r0], #4
    32ac:	f851 3b04 	ldr.w	r3, [r1], #4
    32b0:	f840 3b04 	str.w	r3, [r0], #4
    32b4:	f851 3b04 	ldr.w	r3, [r1], #4
    32b8:	f840 3b04 	str.w	r3, [r0], #4
    32bc:	f851 3b04 	ldr.w	r3, [r1], #4
    32c0:	f840 3b04 	str.w	r3, [r0], #4
    32c4:	f851 3b04 	ldr.w	r3, [r1], #4
    32c8:	f840 3b04 	str.w	r3, [r0], #4
    32cc:	f851 3b04 	ldr.w	r3, [r1], #4
    32d0:	f840 3b04 	str.w	r3, [r0], #4
    32d4:	f851 3b04 	ldr.w	r3, [r1], #4
    32d8:	f840 3b04 	str.w	r3, [r0], #4
    32dc:	f851 3b04 	ldr.w	r3, [r1], #4
    32e0:	f840 3b04 	str.w	r3, [r0], #4
    32e4:	f851 3b04 	ldr.w	r3, [r1], #4
    32e8:	f840 3b04 	str.w	r3, [r0], #4
    32ec:	f851 3b04 	ldr.w	r3, [r1], #4
    32f0:	f840 3b04 	str.w	r3, [r0], #4
    32f4:	f851 3b04 	ldr.w	r3, [r1], #4
    32f8:	f840 3b04 	str.w	r3, [r0], #4
    32fc:	f851 3b04 	ldr.w	r3, [r1], #4
    3300:	f840 3b04 	str.w	r3, [r0], #4
    3304:	3a40      	subs	r2, #64	; 0x40
    3306:	d2bd      	bcs.n	3284 <memcpy+0x10>
    3308:	3230      	adds	r2, #48	; 0x30
    330a:	d311      	bcc.n	3330 <memcpy+0xbc>
    330c:	f851 3b04 	ldr.w	r3, [r1], #4
    3310:	f840 3b04 	str.w	r3, [r0], #4
    3314:	f851 3b04 	ldr.w	r3, [r1], #4
    3318:	f840 3b04 	str.w	r3, [r0], #4
    331c:	f851 3b04 	ldr.w	r3, [r1], #4
    3320:	f840 3b04 	str.w	r3, [r0], #4
    3324:	f851 3b04 	ldr.w	r3, [r1], #4
    3328:	f840 3b04 	str.w	r3, [r0], #4
    332c:	3a10      	subs	r2, #16
    332e:	d2ed      	bcs.n	330c <memcpy+0x98>
    3330:	320c      	adds	r2, #12
    3332:	d305      	bcc.n	3340 <memcpy+0xcc>
    3334:	f851 3b04 	ldr.w	r3, [r1], #4
    3338:	f840 3b04 	str.w	r3, [r0], #4
    333c:	3a04      	subs	r2, #4
    333e:	d2f9      	bcs.n	3334 <memcpy+0xc0>
    3340:	3204      	adds	r2, #4
    3342:	d008      	beq.n	3356 <memcpy+0xe2>
    3344:	07d2      	lsls	r2, r2, #31
    3346:	bf1c      	itt	ne
    3348:	f811 3b01 	ldrbne.w	r3, [r1], #1
    334c:	f800 3b01 	strbne.w	r3, [r0], #1
    3350:	d301      	bcc.n	3356 <memcpy+0xe2>
    3352:	880b      	ldrh	r3, [r1, #0]
    3354:	8003      	strh	r3, [r0, #0]
    3356:	4660      	mov	r0, ip
    3358:	4770      	bx	lr
    335a:	bf00      	nop
    335c:	2a08      	cmp	r2, #8
    335e:	d313      	bcc.n	3388 <memcpy+0x114>
    3360:	078b      	lsls	r3, r1, #30
    3362:	d08d      	beq.n	3280 <memcpy+0xc>
    3364:	f010 0303 	ands.w	r3, r0, #3
    3368:	d08a      	beq.n	3280 <memcpy+0xc>
    336a:	f1c3 0304 	rsb	r3, r3, #4
    336e:	1ad2      	subs	r2, r2, r3
    3370:	07db      	lsls	r3, r3, #31
    3372:	bf1c      	itt	ne
    3374:	f811 3b01 	ldrbne.w	r3, [r1], #1
    3378:	f800 3b01 	strbne.w	r3, [r0], #1
    337c:	d380      	bcc.n	3280 <memcpy+0xc>
    337e:	f831 3b02 	ldrh.w	r3, [r1], #2
    3382:	f820 3b02 	strh.w	r3, [r0], #2
    3386:	e77b      	b.n	3280 <memcpy+0xc>
    3388:	3a04      	subs	r2, #4
    338a:	d3d9      	bcc.n	3340 <memcpy+0xcc>
    338c:	3a01      	subs	r2, #1
    338e:	f811 3b01 	ldrb.w	r3, [r1], #1
    3392:	f800 3b01 	strb.w	r3, [r0], #1
    3396:	d2f9      	bcs.n	338c <memcpy+0x118>
    3398:	780b      	ldrb	r3, [r1, #0]
    339a:	7003      	strb	r3, [r0, #0]
    339c:	784b      	ldrb	r3, [r1, #1]
    339e:	7043      	strb	r3, [r0, #1]
    33a0:	788b      	ldrb	r3, [r1, #2]
    33a2:	7083      	strb	r3, [r0, #2]
    33a4:	4660      	mov	r0, ip
    33a6:	4770      	bx	lr

000033a8 <memset>:
    33a8:	b470      	push	{r4, r5, r6}
    33aa:	0786      	lsls	r6, r0, #30
    33ac:	d046      	beq.n	343c <memset+0x94>
    33ae:	1e54      	subs	r4, r2, #1
    33b0:	2a00      	cmp	r2, #0
    33b2:	d041      	beq.n	3438 <memset+0x90>
    33b4:	b2ca      	uxtb	r2, r1
    33b6:	4603      	mov	r3, r0
    33b8:	e002      	b.n	33c0 <memset+0x18>
    33ba:	f114 34ff 	adds.w	r4, r4, #4294967295
    33be:	d33b      	bcc.n	3438 <memset+0x90>
    33c0:	f803 2b01 	strb.w	r2, [r3], #1
    33c4:	079d      	lsls	r5, r3, #30
    33c6:	d1f8      	bne.n	33ba <memset+0x12>
    33c8:	2c03      	cmp	r4, #3
    33ca:	d92e      	bls.n	342a <memset+0x82>
    33cc:	b2cd      	uxtb	r5, r1
    33ce:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
    33d2:	2c0f      	cmp	r4, #15
    33d4:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
    33d8:	d919      	bls.n	340e <memset+0x66>
    33da:	f103 0210 	add.w	r2, r3, #16
    33de:	4626      	mov	r6, r4
    33e0:	3e10      	subs	r6, #16
    33e2:	2e0f      	cmp	r6, #15
    33e4:	f842 5c10 	str.w	r5, [r2, #-16]
    33e8:	f842 5c0c 	str.w	r5, [r2, #-12]
    33ec:	f842 5c08 	str.w	r5, [r2, #-8]
    33f0:	f842 5c04 	str.w	r5, [r2, #-4]
    33f4:	f102 0210 	add.w	r2, r2, #16
    33f8:	d8f2      	bhi.n	33e0 <memset+0x38>
    33fa:	f1a4 0210 	sub.w	r2, r4, #16
    33fe:	f022 020f 	bic.w	r2, r2, #15
    3402:	f004 040f 	and.w	r4, r4, #15
    3406:	3210      	adds	r2, #16
    3408:	2c03      	cmp	r4, #3
    340a:	4413      	add	r3, r2
    340c:	d90d      	bls.n	342a <memset+0x82>
    340e:	461e      	mov	r6, r3
    3410:	4622      	mov	r2, r4
    3412:	3a04      	subs	r2, #4
    3414:	2a03      	cmp	r2, #3
    3416:	f846 5b04 	str.w	r5, [r6], #4
    341a:	d8fa      	bhi.n	3412 <memset+0x6a>
    341c:	1f22      	subs	r2, r4, #4
    341e:	f022 0203 	bic.w	r2, r2, #3
    3422:	3204      	adds	r2, #4
    3424:	4413      	add	r3, r2
    3426:	f004 0403 	and.w	r4, r4, #3
    342a:	b12c      	cbz	r4, 3438 <memset+0x90>
    342c:	b2c9      	uxtb	r1, r1
    342e:	441c      	add	r4, r3
    3430:	f803 1b01 	strb.w	r1, [r3], #1
    3434:	429c      	cmp	r4, r3
    3436:	d1fb      	bne.n	3430 <memset+0x88>
    3438:	bc70      	pop	{r4, r5, r6}
    343a:	4770      	bx	lr
    343c:	4614      	mov	r4, r2
    343e:	4603      	mov	r3, r0
    3440:	e7c2      	b.n	33c8 <memset+0x20>
    3442:	bf00      	nop

00003444 <register_fini>:
    3444:	4b02      	ldr	r3, [pc, #8]	; (3450 <register_fini+0xc>)
    3446:	b113      	cbz	r3, 344e <register_fini+0xa>
    3448:	4802      	ldr	r0, [pc, #8]	; (3454 <register_fini+0x10>)
    344a:	f000 b805 	b.w	3458 <atexit>
    344e:	4770      	bx	lr
    3450:	00000000 	.word	0x00000000
    3454:	00003465 	.word	0x00003465

00003458 <atexit>:
    3458:	2300      	movs	r3, #0
    345a:	4601      	mov	r1, r0
    345c:	461a      	mov	r2, r3
    345e:	4618      	mov	r0, r3
    3460:	f000 b81e 	b.w	34a0 <__register_exitproc>

00003464 <__libc_fini_array>:
    3464:	b538      	push	{r3, r4, r5, lr}
    3466:	4c0a      	ldr	r4, [pc, #40]	; (3490 <__libc_fini_array+0x2c>)
    3468:	4d0a      	ldr	r5, [pc, #40]	; (3494 <__libc_fini_array+0x30>)
    346a:	1b64      	subs	r4, r4, r5
    346c:	10a4      	asrs	r4, r4, #2
    346e:	d00a      	beq.n	3486 <__libc_fini_array+0x22>
    3470:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
    3474:	3b01      	subs	r3, #1
    3476:	eb05 0583 	add.w	r5, r5, r3, lsl #2
    347a:	3c01      	subs	r4, #1
    347c:	f855 3904 	ldr.w	r3, [r5], #-4
    3480:	4798      	blx	r3
    3482:	2c00      	cmp	r4, #0
    3484:	d1f9      	bne.n	347a <__libc_fini_array+0x16>
    3486:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    348a:	f000 b8df 	b.w	364c <_fini>
    348e:	bf00      	nop
    3490:	0000365c 	.word	0x0000365c
    3494:	00003658 	.word	0x00003658

00003498 <__retarget_lock_acquire_recursive>:
    3498:	4770      	bx	lr
    349a:	bf00      	nop

0000349c <__retarget_lock_release_recursive>:
    349c:	4770      	bx	lr
    349e:	bf00      	nop

000034a0 <__register_exitproc>:
    34a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    34a4:	4d2c      	ldr	r5, [pc, #176]	; (3558 <__register_exitproc+0xb8>)
    34a6:	4606      	mov	r6, r0
    34a8:	6828      	ldr	r0, [r5, #0]
    34aa:	4698      	mov	r8, r3
    34ac:	460f      	mov	r7, r1
    34ae:	4691      	mov	r9, r2
    34b0:	f7ff fff2 	bl	3498 <__retarget_lock_acquire_recursive>
    34b4:	4b29      	ldr	r3, [pc, #164]	; (355c <__register_exitproc+0xbc>)
    34b6:	681c      	ldr	r4, [r3, #0]
    34b8:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
    34bc:	2b00      	cmp	r3, #0
    34be:	d03e      	beq.n	353e <__register_exitproc+0x9e>
    34c0:	685a      	ldr	r2, [r3, #4]
    34c2:	2a1f      	cmp	r2, #31
    34c4:	dc1c      	bgt.n	3500 <__register_exitproc+0x60>
    34c6:	f102 0e01 	add.w	lr, r2, #1
    34ca:	b176      	cbz	r6, 34ea <__register_exitproc+0x4a>
    34cc:	eb03 0182 	add.w	r1, r3, r2, lsl #2
    34d0:	2401      	movs	r4, #1
    34d2:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
    34d6:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
    34da:	4094      	lsls	r4, r2
    34dc:	4320      	orrs	r0, r4
    34de:	2e02      	cmp	r6, #2
    34e0:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
    34e4:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
    34e8:	d023      	beq.n	3532 <__register_exitproc+0x92>
    34ea:	3202      	adds	r2, #2
    34ec:	f8c3 e004 	str.w	lr, [r3, #4]
    34f0:	6828      	ldr	r0, [r5, #0]
    34f2:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
    34f6:	f7ff ffd1 	bl	349c <__retarget_lock_release_recursive>
    34fa:	2000      	movs	r0, #0
    34fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    3500:	4b17      	ldr	r3, [pc, #92]	; (3560 <__register_exitproc+0xc0>)
    3502:	b30b      	cbz	r3, 3548 <__register_exitproc+0xa8>
    3504:	f44f 70c8 	mov.w	r0, #400	; 0x190
    3508:	f3af 8000 	nop.w
    350c:	4603      	mov	r3, r0
    350e:	b1d8      	cbz	r0, 3548 <__register_exitproc+0xa8>
    3510:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
    3514:	6002      	str	r2, [r0, #0]
    3516:	2100      	movs	r1, #0
    3518:	6041      	str	r1, [r0, #4]
    351a:	460a      	mov	r2, r1
    351c:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
    3520:	f04f 0e01 	mov.w	lr, #1
    3524:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
    3528:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
    352c:	2e00      	cmp	r6, #0
    352e:	d0dc      	beq.n	34ea <__register_exitproc+0x4a>
    3530:	e7cc      	b.n	34cc <__register_exitproc+0x2c>
    3532:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
    3536:	430c      	orrs	r4, r1
    3538:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
    353c:	e7d5      	b.n	34ea <__register_exitproc+0x4a>
    353e:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
    3542:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
    3546:	e7bb      	b.n	34c0 <__register_exitproc+0x20>
    3548:	6828      	ldr	r0, [r5, #0]
    354a:	f7ff ffa7 	bl	349c <__retarget_lock_release_recursive>
    354e:	f04f 30ff 	mov.w	r0, #4294967295
    3552:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    3556:	bf00      	nop
    3558:	20000500 	.word	0x20000500
    355c:	00003634 	.word	0x00003634
    3560:	00000000 	.word	0x00000000
    3564:	682f2e2e 	.word	0x682f2e2e
    3568:	732f6c61 	.word	0x732f6c61
    356c:	682f6372 	.word	0x682f6372
    3570:	735f6c61 	.word	0x735f6c61
    3574:	6d5f6970 	.word	0x6d5f6970
    3578:	7973615f 	.word	0x7973615f
    357c:	632e636e 	.word	0x632e636e
    3580:	00000000 	.word	0x00000000
    3584:	40003000 	.word	0x40003000
    3588:	40003400 	.word	0x40003400
    358c:	41012000 	.word	0x41012000
    3590:	41014000 	.word	0x41014000
    3594:	43000000 	.word	0x43000000
    3598:	43000400 	.word	0x43000400
    359c:	43000800 	.word	0x43000800
    35a0:	43000c00 	.word	0x43000c00

000035a4 <_i2cms>:
	...
    35bc:	682f2e2e 732f6c70 6f637265 70682f6d     ../hpl/sercom/hp
    35cc:	65735f6c 6d6f6372 0000632e              l_sercom.c..

000035d8 <_usb_ep_cfgs>:
    35d8:	20000750 00000000 00000040 20000710     P.. ....@...... 
    35e8:	00000000 00000040 200006d0 00000000     ....@...... ....
    35f8:	00000040 752f2e2e 642f6273 63697665     @...../usb/devic
    3608:	73752f65 2e636462 00000063 682f2e2e     e/usbdc.c...../h
    3618:	752f6c61 736c6974 6372732f 6974752f     al/utils/src/uti
    3628:	6c5f736c 2e747369 00000063              ls_list.c...

00003634 <_global_impure_ptr>:
    3634:	200000d8                                ... 

00003638 <_init>:
    3638:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    363a:	bf00      	nop
    363c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    363e:	bc08      	pop	{r3}
    3640:	469e      	mov	lr, r3
    3642:	4770      	bx	lr

00003644 <__init_array_start>:
    3644:	00003445 	.word	0x00003445

00003648 <__frame_dummy_init_array_entry>:
    3648:	00000289                                ....

0000364c <_fini>:
    364c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    364e:	bf00      	nop
    3650:	bcf8      	pop	{r3, r4, r5, r6, r7}
    3652:	bc08      	pop	{r3}
    3654:	469e      	mov	lr, r3
    3656:	4770      	bx	lr

00003658 <__fini_array_start>:
    3658:	00000265 	.word	0x00000265
