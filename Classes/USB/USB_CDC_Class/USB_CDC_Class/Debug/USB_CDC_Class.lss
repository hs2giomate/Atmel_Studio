
USB_CDC_Class.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00005334  00000000  00000000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00005334  00005334  00015334  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     0000053c  20000000  0000533c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bkupram      00000000  47000000  47000000  0002053c  2**0
                  CONTENTS
  4 .qspi         00000000  04000000  04000000  0002053c  2**0
                  CONTENTS
  5 .bss          000005a8  2000053c  00005878  0002053c  2**2
                  ALLOC
  6 .stack        00010004  20000ae4  00005e20  0002053c  2**0
                  ALLOC
  7 .ARM.attributes 0000002e  00000000  00000000  0002053c  2**0
                  CONTENTS, READONLY
  8 .comment      00000059  00000000  00000000  0002056a  2**0
                  CONTENTS, READONLY
  9 .debug_info   000430ab  00000000  00000000  000205c3  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000054db  00000000  00000000  0006366e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0001788b  00000000  00000000  00068b49  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00001140  00000000  00000000  000803d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00001970  00000000  00000000  00081514  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  0003d95b  00000000  00000000  00082e84  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0001d8e1  00000000  00000000  000c07df  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    0012c3b4  00000000  00000000  000de0c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  00003124  00000000  00000000  0020a474  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	e8 0a 01 20 d1 02 00 00 55 03 00 00 55 03 00 00     ... ....U...U...
      10:	55 03 00 00 55 03 00 00 55 03 00 00 00 00 00 00     U...U...U.......
	...
      2c:	55 03 00 00 55 03 00 00 00 00 00 00 55 03 00 00     U...U.......U...
      3c:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...
      4c:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...
      5c:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...
      6c:	11 21 00 00 55 03 00 00 55 03 00 00 55 03 00 00     .!..U...U...U...
      7c:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...
      8c:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...
      9c:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...
      ac:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...
      bc:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...
      cc:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...
      dc:	55 03 00 00 55 03 00 00 55 03 00 00 00 00 00 00     U...U...U.......
	...
      f4:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...
     104:	55 03 00 00 dd 26 00 00 f1 26 00 00 05 27 00 00     U....&...&...'..
     114:	19 27 00 00 55 03 00 00 55 03 00 00 55 03 00 00     .'..U...U...U...
     124:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...
     134:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...
     144:	55 03 00 00 2d 27 00 00 41 27 00 00 55 27 00 00     U...-'..A'..U'..
     154:	69 27 00 00 55 03 00 00 55 03 00 00 55 03 00 00     i'..U...U...U...
     164:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...
     174:	55 03 00 00 55 03 00 00 51 1d 00 00 b9 3c 00 00     U...U...Q....<..
     184:	c5 3c 00 00 d1 3c 00 00 dd 3c 00 00 55 03 00 00     .<...<...<..U...
     194:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...
     1a4:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...
     1b4:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...
     1c4:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...
     1d4:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...
     1e4:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...
     1f4:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...
     204:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...
     214:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...
     224:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...
     234:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...
     244:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...
     254:	55 03 00 00 55 03 00 00 55 03 00 00 55 03 00 00     U...U...U...U...

00000264 <__do_global_dtors_aux>:
     264:	b510      	push	{r4, lr}
     266:	4c05      	ldr	r4, [pc, #20]	; (27c <__do_global_dtors_aux+0x18>)
     268:	7823      	ldrb	r3, [r4, #0]
     26a:	b933      	cbnz	r3, 27a <__do_global_dtors_aux+0x16>
     26c:	4b04      	ldr	r3, [pc, #16]	; (280 <__do_global_dtors_aux+0x1c>)
     26e:	b113      	cbz	r3, 276 <__do_global_dtors_aux+0x12>
     270:	4804      	ldr	r0, [pc, #16]	; (284 <__do_global_dtors_aux+0x20>)
     272:	f3af 8000 	nop.w
     276:	2301      	movs	r3, #1
     278:	7023      	strb	r3, [r4, #0]
     27a:	bd10      	pop	{r4, pc}
     27c:	2000053c 	.word	0x2000053c
     280:	00000000 	.word	0x00000000
     284:	0000533c 	.word	0x0000533c

00000288 <frame_dummy>:
     288:	4b0c      	ldr	r3, [pc, #48]	; (2bc <frame_dummy+0x34>)
     28a:	b143      	cbz	r3, 29e <frame_dummy+0x16>
     28c:	480c      	ldr	r0, [pc, #48]	; (2c0 <frame_dummy+0x38>)
     28e:	490d      	ldr	r1, [pc, #52]	; (2c4 <frame_dummy+0x3c>)
     290:	b510      	push	{r4, lr}
     292:	f3af 8000 	nop.w
     296:	480c      	ldr	r0, [pc, #48]	; (2c8 <frame_dummy+0x40>)
     298:	6803      	ldr	r3, [r0, #0]
     29a:	b923      	cbnz	r3, 2a6 <frame_dummy+0x1e>
     29c:	bd10      	pop	{r4, pc}
     29e:	480a      	ldr	r0, [pc, #40]	; (2c8 <frame_dummy+0x40>)
     2a0:	6803      	ldr	r3, [r0, #0]
     2a2:	b933      	cbnz	r3, 2b2 <frame_dummy+0x2a>
     2a4:	4770      	bx	lr
     2a6:	4b09      	ldr	r3, [pc, #36]	; (2cc <frame_dummy+0x44>)
     2a8:	2b00      	cmp	r3, #0
     2aa:	d0f7      	beq.n	29c <frame_dummy+0x14>
     2ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     2b0:	4718      	bx	r3
     2b2:	4b06      	ldr	r3, [pc, #24]	; (2cc <frame_dummy+0x44>)
     2b4:	2b00      	cmp	r3, #0
     2b6:	d0f5      	beq.n	2a4 <frame_dummy+0x1c>
     2b8:	4718      	bx	r3
     2ba:	bf00      	nop
     2bc:	00000000 	.word	0x00000000
     2c0:	0000533c 	.word	0x0000533c
     2c4:	20000540 	.word	0x20000540
     2c8:	0000533c 	.word	0x0000533c
     2cc:	00000000 	.word	0x00000000

000002d0 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
     2d0:	b580      	push	{r7, lr}
     2d2:	b082      	sub	sp, #8
     2d4:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
     2d6:	4b16      	ldr	r3, [pc, #88]	; (330 <Reset_Handler+0x60>)
     2d8:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
     2da:	4b16      	ldr	r3, [pc, #88]	; (334 <Reset_Handler+0x64>)
     2dc:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
     2de:	687a      	ldr	r2, [r7, #4]
     2e0:	683b      	ldr	r3, [r7, #0]
     2e2:	429a      	cmp	r2, r3
     2e4:	d00c      	beq.n	300 <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
     2e6:	e007      	b.n	2f8 <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
     2e8:	683b      	ldr	r3, [r7, #0]
     2ea:	1d1a      	adds	r2, r3, #4
     2ec:	603a      	str	r2, [r7, #0]
     2ee:	687a      	ldr	r2, [r7, #4]
     2f0:	1d11      	adds	r1, r2, #4
     2f2:	6079      	str	r1, [r7, #4]
     2f4:	6812      	ldr	r2, [r2, #0]
     2f6:	601a      	str	r2, [r3, #0]
                for (; pDest < &_erelocate;) {
     2f8:	683b      	ldr	r3, [r7, #0]
     2fa:	4a0f      	ldr	r2, [pc, #60]	; (338 <Reset_Handler+0x68>)
     2fc:	4293      	cmp	r3, r2
     2fe:	d3f3      	bcc.n	2e8 <Reset_Handler+0x18>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
     300:	4b0e      	ldr	r3, [pc, #56]	; (33c <Reset_Handler+0x6c>)
     302:	603b      	str	r3, [r7, #0]
     304:	e004      	b.n	310 <Reset_Handler+0x40>
                *pDest++ = 0;
     306:	683b      	ldr	r3, [r7, #0]
     308:	1d1a      	adds	r2, r3, #4
     30a:	603a      	str	r2, [r7, #0]
     30c:	2200      	movs	r2, #0
     30e:	601a      	str	r2, [r3, #0]
        for (pDest = &_szero; pDest < &_ezero;) {
     310:	683b      	ldr	r3, [r7, #0]
     312:	4a0b      	ldr	r2, [pc, #44]	; (340 <Reset_Handler+0x70>)
     314:	4293      	cmp	r3, r2
     316:	d3f6      	bcc.n	306 <Reset_Handler+0x36>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
     318:	4b0a      	ldr	r3, [pc, #40]	; (344 <Reset_Handler+0x74>)
     31a:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     31c:	4a0a      	ldr	r2, [pc, #40]	; (348 <Reset_Handler+0x78>)
     31e:	687b      	ldr	r3, [r7, #4]
     320:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
     324:	6093      	str	r3, [r2, #8]
        __DSB();
        __ISB();
#endif

        /* Initialize the C library */
        __libc_init_array();
     326:	4b09      	ldr	r3, [pc, #36]	; (34c <Reset_Handler+0x7c>)
     328:	4798      	blx	r3

        /* Branch to main function */
        main();
     32a:	4b09      	ldr	r3, [pc, #36]	; (350 <Reset_Handler+0x80>)
     32c:	4798      	blx	r3

        /* Infinite loop */
        while (1);
     32e:	e7fe      	b.n	32e <Reset_Handler+0x5e>
     330:	0000533c 	.word	0x0000533c
     334:	20000000 	.word	0x20000000
     338:	2000053c 	.word	0x2000053c
     33c:	2000053c 	.word	0x2000053c
     340:	20000ae4 	.word	0x20000ae4
     344:	00000000 	.word	0x00000000
     348:	e000ed00 	.word	0xe000ed00
     34c:	000048cd 	.word	0x000048cd
     350:	000003d9 	.word	0x000003d9

00000354 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     354:	b480      	push	{r7}
     356:	af00      	add	r7, sp, #0
        while (1) {
     358:	e7fe      	b.n	358 <Dummy_Handler+0x4>

0000035a <hri_port_toggle_OUT_reg>:
{
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
}

static inline void hri_port_toggle_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
     35a:	b480      	push	{r7}
     35c:	b085      	sub	sp, #20
     35e:	af00      	add	r7, sp, #0
     360:	60f8      	str	r0, [r7, #12]
     362:	460b      	mov	r3, r1
     364:	607a      	str	r2, [r7, #4]
     366:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = mask;
     368:	7afb      	ldrb	r3, [r7, #11]
     36a:	68fa      	ldr	r2, [r7, #12]
     36c:	01db      	lsls	r3, r3, #7
     36e:	4413      	add	r3, r2
     370:	331c      	adds	r3, #28
     372:	687a      	ldr	r2, [r7, #4]
     374:	601a      	str	r2, [r3, #0]
}
     376:	bf00      	nop
     378:	3714      	adds	r7, #20
     37a:	46bd      	mov	sp, r7
     37c:	bc80      	pop	{r7}
     37e:	4770      	bx	lr

00000380 <_gpio_toggle_level>:

/**
 * \brief Change output level to the opposite with mask
 */
static inline void _gpio_toggle_level(const enum gpio_port port, const uint32_t mask)
{
     380:	b580      	push	{r7, lr}
     382:	b082      	sub	sp, #8
     384:	af00      	add	r7, sp, #0
     386:	4603      	mov	r3, r0
     388:	6039      	str	r1, [r7, #0]
     38a:	71fb      	strb	r3, [r7, #7]
	hri_port_toggle_OUT_reg(PORT, port, mask);
     38c:	79fb      	ldrb	r3, [r7, #7]
     38e:	683a      	ldr	r2, [r7, #0]
     390:	4619      	mov	r1, r3
     392:	4803      	ldr	r0, [pc, #12]	; (3a0 <_gpio_toggle_level+0x20>)
     394:	4b03      	ldr	r3, [pc, #12]	; (3a4 <_gpio_toggle_level+0x24>)
     396:	4798      	blx	r3
}
     398:	bf00      	nop
     39a:	3708      	adds	r7, #8
     39c:	46bd      	mov	sp, r7
     39e:	bd80      	pop	{r7, pc}
     3a0:	41008000 	.word	0x41008000
     3a4:	0000035b 	.word	0x0000035b

000003a8 <gpio_toggle_pin_level>:
 * Toggle the pin levels on pins defined by bit mask
 *
 * \param[in] pin       The pin number for device
 */
static inline void gpio_toggle_pin_level(const uint8_t pin)
{
     3a8:	b580      	push	{r7, lr}
     3aa:	b082      	sub	sp, #8
     3ac:	af00      	add	r7, sp, #0
     3ae:	4603      	mov	r3, r0
     3b0:	71fb      	strb	r3, [r7, #7]
	_gpio_toggle_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin));
     3b2:	79fb      	ldrb	r3, [r7, #7]
     3b4:	115b      	asrs	r3, r3, #5
     3b6:	b2d8      	uxtb	r0, r3
     3b8:	79fb      	ldrb	r3, [r7, #7]
     3ba:	f003 031f 	and.w	r3, r3, #31
     3be:	2201      	movs	r2, #1
     3c0:	fa02 f303 	lsl.w	r3, r2, r3
     3c4:	4619      	mov	r1, r3
     3c6:	4b03      	ldr	r3, [pc, #12]	; (3d4 <gpio_toggle_pin_level+0x2c>)
     3c8:	4798      	blx	r3
}
     3ca:	bf00      	nop
     3cc:	3708      	adds	r7, #8
     3ce:	46bd      	mov	sp, r7
     3d0:	bd80      	pop	{r7, pc}
     3d2:	bf00      	nop
     3d4:	00000381 	.word	0x00000381

000003d8 <main>:
void display_menu(void);

static uint8_t p[]=" ---Usb port Test ----\n\r";
static uint8_t q[]=",123,456,678 \n\r";
int main(void)
{
     3d8:	b580      	push	{r7, lr}
     3da:	b0d6      	sub	sp, #344	; 0x158
     3dc:	af00      	add	r7, sp, #0
	atmel_start_init();
     3de:	4ba5      	ldr	r3, [pc, #660]	; (674 <main+0x29c>)
     3e0:	4798      	blx	r3

	usb0.init();
     3e2:	48a5      	ldr	r0, [pc, #660]	; (678 <main+0x2a0>)
     3e4:	4ba5      	ldr	r3, [pc, #660]	; (67c <main+0x2a4>)
     3e6:	4798      	blx	r3
	uint8_t *ptr;
	uint8_t  r;
	uint8_t	n,m,l,l2,ind,ind2;

	const char	*test ="123";
     3e8:	4ba5      	ldr	r3, [pc, #660]	; (680 <main+0x2a8>)
     3ea:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
	uint8_t	text0[]="Values,";
     3ee:	4aa5      	ldr	r2, [pc, #660]	; (684 <main+0x2ac>)
     3f0:	f507 738e 	add.w	r3, r7, #284	; 0x11c
     3f4:	e892 0003 	ldmia.w	r2, {r0, r1}
     3f8:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t	text1[]=",";
     3fc:	232c      	movs	r3, #44	; 0x2c
     3fe:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
	uint8_t	text2[]="123\n\r";
     402:	4aa1      	ldr	r2, [pc, #644]	; (688 <main+0x2b0>)
     404:	f507 7388 	add.w	r3, r7, #272	; 0x110
     408:	e892 0003 	ldmia.w	r2, {r0, r1}
     40c:	6018      	str	r0, [r3, #0]
     40e:	3304      	adds	r3, #4
     410:	8019      	strh	r1, [r3, #0]
	char	array[16];
	uint8_t	palabra[128],finalText[128];
	uint32_t	counter=1;
     412:	2301      	movs	r3, #1
     414:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
	delay_ms(100);
     418:	2064      	movs	r0, #100	; 0x64
     41a:	4b9c      	ldr	r3, [pc, #624]	; (68c <main+0x2b4>)
     41c:	4798      	blx	r3
	display_menu();
     41e:	4b9c      	ldr	r3, [pc, #624]	; (690 <main+0x2b8>)
     420:	4798      	blx	r3
	usb0.write(&p[0],sizeof(p));
     422:	2219      	movs	r2, #25
     424:	499b      	ldr	r1, [pc, #620]	; (694 <main+0x2bc>)
     426:	4894      	ldr	r0, [pc, #592]	; (678 <main+0x2a0>)
     428:	4b9b      	ldr	r3, [pc, #620]	; (698 <main+0x2c0>)
     42a:	4798      	blx	r3
		delay_ms(200);
     42c:	20c8      	movs	r0, #200	; 0xc8
     42e:	4b97      	ldr	r3, [pc, #604]	; (68c <main+0x2b4>)
     430:	4798      	blx	r3
	ind=0;
     432:	2300      	movs	r3, #0
     434:	f887 3153 	strb.w	r3, [r7, #339]	; 0x153
    /* Replace with your application code */
    while (1) 
    {
		ind=0;
     438:	2300      	movs	r3, #0
     43a:	f887 3153 	strb.w	r3, [r7, #339]	; 0x153
		
		l=sizeof(text0);
     43e:	2308      	movs	r3, #8
     440:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
		for (int k=0;k<l;k++)
     444:	2300      	movs	r3, #0
     446:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
     44a:	f897 212f 	ldrb.w	r2, [r7, #303]	; 0x12f
     44e:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
     452:	429a      	cmp	r2, r3
     454:	dd12      	ble.n	47c <main+0xa4>
		{

			palabra[k]=text0[k];
     456:	f507 728e 	add.w	r2, r7, #284	; 0x11c
     45a:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
     45e:	4413      	add	r3, r2
     460:	7819      	ldrb	r1, [r3, #0]
     462:	f107 0280 	add.w	r2, r7, #128	; 0x80
     466:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
     46a:	4413      	add	r3, r2
     46c:	460a      	mov	r2, r1
     46e:	701a      	strb	r2, [r3, #0]
		for (int k=0;k<l;k++)
     470:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
     474:	3301      	adds	r3, #1
     476:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
     47a:	e7e6      	b.n	44a <main+0x72>
		}
		ind=l;
     47c:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
     480:	f887 3153 	strb.w	r3, [r7, #339]	; 0x153
		
		for (int ij=0;ij<4;ij++)
     484:	2300      	movs	r3, #0
     486:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
     48a:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
     48e:	2b03      	cmp	r3, #3
     490:	dc72      	bgt.n	578 <main+0x1a0>
		{
			
			char *c=utoa(counter,array,10);
     492:	f507 7380 	add.w	r3, r7, #256	; 0x100
     496:	220a      	movs	r2, #10
     498:	4619      	mov	r1, r3
     49a:	f8d7 014c 	ldr.w	r0, [r7, #332]	; 0x14c
     49e:	4b7f      	ldr	r3, [pc, #508]	; (69c <main+0x2c4>)
     4a0:	4798      	blx	r3
     4a2:	f8c7 0128 	str.w	r0, [r7, #296]	; 0x128
						
			//usb0.write((uint8_t *)t,10);
			n=sizeof(c);
     4a6:	2304      	movs	r3, #4
     4a8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
			ptr=(uint8_t*)c;
     4ac:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
     4b0:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
			for (int i=ind;i<n+ind;i++)
     4b4:	f897 3153 	ldrb.w	r3, [r7, #339]	; 0x153
     4b8:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
     4bc:	f897 2127 	ldrb.w	r2, [r7, #295]	; 0x127
     4c0:	f897 3153 	ldrb.w	r3, [r7, #339]	; 0x153
     4c4:	441a      	add	r2, r3
     4c6:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
     4ca:	429a      	cmp	r2, r3
     4cc:	dd14      	ble.n	4f8 <main+0x120>
			{
				palabra[i]=*ptr;
     4ce:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
     4d2:	7819      	ldrb	r1, [r3, #0]
     4d4:	f107 0280 	add.w	r2, r7, #128	; 0x80
     4d8:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
     4dc:	4413      	add	r3, r2
     4de:	460a      	mov	r2, r1
     4e0:	701a      	strb	r2, [r3, #0]
				ptr++;
     4e2:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
     4e6:	3301      	adds	r3, #1
     4e8:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
			for (int i=ind;i<n+ind;i++)
     4ec:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
     4f0:	3301      	adds	r3, #1
     4f2:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
     4f6:	e7e1      	b.n	4bc <main+0xe4>
				
			}
			ind=ind+n;
     4f8:	f897 2153 	ldrb.w	r2, [r7, #339]	; 0x153
     4fc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
     500:	4413      	add	r3, r2
     502:	f887 3153 	strb.w	r3, [r7, #339]	; 0x153
			m=sizeof(text1);
     506:	2302      	movs	r3, #2
     508:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
			for (int j=ind;j<m+ind;j++)
     50c:	f897 3153 	ldrb.w	r3, [r7, #339]	; 0x153
     510:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
     514:	f897 2126 	ldrb.w	r2, [r7, #294]	; 0x126
     518:	f897 3153 	ldrb.w	r3, [r7, #339]	; 0x153
     51c:	441a      	add	r2, r3
     51e:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
     522:	429a      	cmp	r2, r3
     524:	dd16      	ble.n	554 <main+0x17c>
			{
				palabra[j]=text1[j-ind];
     526:	f897 3153 	ldrb.w	r3, [r7, #339]	; 0x153
     52a:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
     52e:	1ad3      	subs	r3, r2, r3
     530:	f507 72ac 	add.w	r2, r7, #344	; 0x158
     534:	4413      	add	r3, r2
     536:	f813 1c40 	ldrb.w	r1, [r3, #-64]
     53a:	f107 0280 	add.w	r2, r7, #128	; 0x80
     53e:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
     542:	4413      	add	r3, r2
     544:	460a      	mov	r2, r1
     546:	701a      	strb	r2, [r3, #0]
			for (int j=ind;j<m+ind;j++)
     548:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
     54c:	3301      	adds	r3, #1
     54e:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
     552:	e7df      	b.n	514 <main+0x13c>
			}
			ind=ind+m;
     554:	f897 2153 	ldrb.w	r2, [r7, #339]	; 0x153
     558:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
     55c:	4413      	add	r3, r2
     55e:	f887 3153 	strb.w	r3, [r7, #339]	; 0x153
			
		
			
			//usb0.write(&text1[0],sizeof(text1));
			counter++;
     562:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
     566:	3301      	adds	r3, #1
     568:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
		for (int ij=0;ij<4;ij++)
     56c:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
     570:	3301      	adds	r3, #1
     572:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
     576:	e788      	b.n	48a <main+0xb2>
		}
		
		l2=sizeof(text2);
     578:	2306      	movs	r3, #6
     57a:	f887 3125 	strb.w	r3, [r7, #293]	; 0x125
		for (int kk=ind;kk<l2+ind;kk++)
     57e:	f897 3153 	ldrb.w	r3, [r7, #339]	; 0x153
     582:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
     586:	f897 2125 	ldrb.w	r2, [r7, #293]	; 0x125
     58a:	f897 3153 	ldrb.w	r3, [r7, #339]	; 0x153
     58e:	441a      	add	r2, r3
     590:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
     594:	429a      	cmp	r2, r3
     596:	dd16      	ble.n	5c6 <main+0x1ee>
		{
			palabra[kk]=text2[kk-ind];
     598:	f897 3153 	ldrb.w	r3, [r7, #339]	; 0x153
     59c:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
     5a0:	1ad3      	subs	r3, r2, r3
     5a2:	f507 72ac 	add.w	r2, r7, #344	; 0x158
     5a6:	4413      	add	r3, r2
     5a8:	f813 1c48 	ldrb.w	r1, [r3, #-72]
     5ac:	f107 0280 	add.w	r2, r7, #128	; 0x80
     5b0:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
     5b4:	4413      	add	r3, r2
     5b6:	460a      	mov	r2, r1
     5b8:	701a      	strb	r2, [r3, #0]
		for (int kk=ind;kk<l2+ind;kk++)
     5ba:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
     5be:	3301      	adds	r3, #1
     5c0:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
     5c4:	e7df      	b.n	586 <main+0x1ae>
		}
		ind=ind+l2;
     5c6:	f897 2153 	ldrb.w	r2, [r7, #339]	; 0x153
     5ca:	f897 3125 	ldrb.w	r3, [r7, #293]	; 0x125
     5ce:	4413      	add	r3, r2
     5d0:	f887 3153 	strb.w	r3, [r7, #339]	; 0x153
		ind2=0;
     5d4:	2300      	movs	r3, #0
     5d6:	f887 3152 	strb.w	r3, [r7, #338]	; 0x152
		for (int i=0;i<ind;i++)
     5da:	2300      	movs	r3, #0
     5dc:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
     5e0:	f897 2153 	ldrb.w	r2, [r7, #339]	; 0x153
     5e4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
     5e8:	429a      	cmp	r2, r3
     5ea:	dd1c      	ble.n	626 <main+0x24e>
		{
			if (palabra[i]>9)
     5ec:	f107 0280 	add.w	r2, r7, #128	; 0x80
     5f0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
     5f4:	4413      	add	r3, r2
     5f6:	781b      	ldrb	r3, [r3, #0]
     5f8:	2b09      	cmp	r3, #9
     5fa:	dd0e      	ble.n	61a <main+0x242>
			{
					finalText[ind2]=palabra[i];
     5fc:	f897 3152 	ldrb.w	r3, [r7, #338]	; 0x152
     600:	f107 0180 	add.w	r1, r7, #128	; 0x80
     604:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
     608:	440a      	add	r2, r1
     60a:	7811      	ldrb	r1, [r2, #0]
     60c:	463a      	mov	r2, r7
     60e:	54d1      	strb	r1, [r2, r3]
					ind2++;			
     610:	f897 3152 	ldrb.w	r3, [r7, #338]	; 0x152
     614:	3301      	adds	r3, #1
     616:	f887 3152 	strb.w	r3, [r7, #338]	; 0x152
		for (int i=0;i<ind;i++)
     61a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
     61e:	3301      	adds	r3, #1
     620:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
     624:	e7dc      	b.n	5e0 <main+0x208>
			}
		}
		usb0.write(&finalText[0],ind2);
     626:	f897 2152 	ldrb.w	r2, [r7, #338]	; 0x152
     62a:	463b      	mov	r3, r7
     62c:	4619      	mov	r1, r3
     62e:	4812      	ldr	r0, [pc, #72]	; (678 <main+0x2a0>)
     630:	4b19      	ldr	r3, [pc, #100]	; (698 <main+0x2c0>)
     632:	4798      	blx	r3
		delay_ms(500);
     634:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
     638:	4b14      	ldr	r3, [pc, #80]	; (68c <main+0x2b4>)
     63a:	4798      	blx	r3
		//usb0.write(&q[0],sizeof(q));
		//delay_ms(500);
		usb0.read(&r,1);
     63c:	f507 7392 	add.w	r3, r7, #292	; 0x124
     640:	2201      	movs	r2, #1
     642:	4619      	mov	r1, r3
     644:	480c      	ldr	r0, [pc, #48]	; (678 <main+0x2a0>)
     646:	4b16      	ldr	r3, [pc, #88]	; (6a0 <main+0x2c8>)
     648:	4798      	blx	r3
		delay_ms(200);
     64a:	20c8      	movs	r0, #200	; 0xc8
     64c:	4b0f      	ldr	r3, [pc, #60]	; (68c <main+0x2b4>)
     64e:	4798      	blx	r3
		
		
		if (r>33)
     650:	f897 3124 	ldrb.w	r3, [r7, #292]	; 0x124
     654:	2b21      	cmp	r3, #33	; 0x21
     656:	dd08      	ble.n	66a <main+0x292>
		{
		//	text1[0]=r;
		//	usb0.write(&text1[0],sizeof(text1));
			gpio_toggle_pin_level(LED0);
     658:	2052      	movs	r0, #82	; 0x52
     65a:	4b12      	ldr	r3, [pc, #72]	; (6a4 <main+0x2cc>)
     65c:	4798      	blx	r3
			delay_ms(100);
     65e:	2064      	movs	r0, #100	; 0x64
     660:	4b0a      	ldr	r3, [pc, #40]	; (68c <main+0x2b4>)
     662:	4798      	blx	r3
			r=0x00;
     664:	2300      	movs	r3, #0
     666:	f887 3124 	strb.w	r3, [r7, #292]	; 0x124
		}
		
		
		delay_ms(500);
     66a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
     66e:	4b07      	ldr	r3, [pc, #28]	; (68c <main+0x2b4>)
     670:	4798      	blx	r3
    }
     672:	e6e1      	b.n	438 <main+0x60>
     674:	00000ae5 	.word	0x00000ae5
     678:	20000558 	.word	0x20000558
     67c:	00000891 	.word	0x00000891
     680:	00004d80 	.word	0x00004d80
     684:	00004d84 	.word	0x00004d84
     688:	00004d8c 	.word	0x00004d8c
     68c:	000012a5 	.word	0x000012a5
     690:	000006a9 	.word	0x000006a9
     694:	20000004 	.word	0x20000004
     698:	0000091d 	.word	0x0000091d
     69c:	00004c5d 	.word	0x00004c5d
     6a0:	0000096d 	.word	0x0000096d
     6a4:	000003a9 	.word	0x000003a9

000006a8 <_Z12display_menuv>:
}

 void display_menu(void)
 {
     6a8:	b580      	push	{r7, lr}
     6aa:	af00      	add	r7, sp, #0
	 usb0.xprint("Menu :\r\n");
     6ac:	4918      	ldr	r1, [pc, #96]	; (710 <_Z12display_menuv+0x68>)
     6ae:	4819      	ldr	r0, [pc, #100]	; (714 <_Z12display_menuv+0x6c>)
     6b0:	4b19      	ldr	r3, [pc, #100]	; (718 <_Z12display_menuv+0x70>)
     6b2:	4798      	blx	r3
	usb0.xprint( "  -- Select the action:\r\n");
     6b4:	4919      	ldr	r1, [pc, #100]	; (71c <_Z12display_menuv+0x74>)
     6b6:	4817      	ldr	r0, [pc, #92]	; (714 <_Z12display_menuv+0x6c>)
     6b8:	4b17      	ldr	r3, [pc, #92]	; (718 <_Z12display_menuv+0x70>)
     6ba:	4798      	blx	r3
	usb0.xprint( "  0: Set standard filter ID 0: 0x45A, store into Rx buffer. \r\n");
     6bc:	4918      	ldr	r1, [pc, #96]	; (720 <_Z12display_menuv+0x78>)
     6be:	4815      	ldr	r0, [pc, #84]	; (714 <_Z12display_menuv+0x6c>)
     6c0:	4b15      	ldr	r3, [pc, #84]	; (718 <_Z12display_menuv+0x70>)
     6c2:	4798      	blx	r3
	usb0.xprint( "  1: Set standard filter ID 1: 0x469, store into Rx FIFO 0. \r\n");
     6c4:	4917      	ldr	r1, [pc, #92]	; (724 <_Z12display_menuv+0x7c>)
     6c6:	4813      	ldr	r0, [pc, #76]	; (714 <_Z12display_menuv+0x6c>)
     6c8:	4b13      	ldr	r3, [pc, #76]	; (718 <_Z12display_menuv+0x70>)
     6ca:	4798      	blx	r3
	usb0.xprint( "  2: Send FD standard message with ID: 0x45A and 64 byte data 0 to 63. \r\n");
     6cc:	4916      	ldr	r1, [pc, #88]	; (728 <_Z12display_menuv+0x80>)
     6ce:	4811      	ldr	r0, [pc, #68]	; (714 <_Z12display_menuv+0x6c>)
     6d0:	4b11      	ldr	r3, [pc, #68]	; (718 <_Z12display_menuv+0x70>)
     6d2:	4798      	blx	r3
	usb0.xprint( "  3: Send FD standard message with ID: 0x469 and 64 byte data 128 to 191. \r\n");
     6d4:	4915      	ldr	r1, [pc, #84]	; (72c <_Z12display_menuv+0x84>)
     6d6:	480f      	ldr	r0, [pc, #60]	; (714 <_Z12display_menuv+0x6c>)
     6d8:	4b0f      	ldr	r3, [pc, #60]	; (718 <_Z12display_menuv+0x70>)
     6da:	4798      	blx	r3
	usb0.xprint( "  4: Set extended filter ID 0: 0x100000A5, store into Rx buffer. \r\n");
     6dc:	4914      	ldr	r1, [pc, #80]	; (730 <_Z12display_menuv+0x88>)
     6de:	480d      	ldr	r0, [pc, #52]	; (714 <_Z12display_menuv+0x6c>)
     6e0:	4b0d      	ldr	r3, [pc, #52]	; (718 <_Z12display_menuv+0x70>)
     6e2:	4798      	blx	r3
	usb0.xprint( "  5: Set extended filter ID 1: 0x10000096, store into Rx FIFO 1. \r\n");
     6e4:	4913      	ldr	r1, [pc, #76]	; (734 <_Z12display_menuv+0x8c>)
     6e6:	480b      	ldr	r0, [pc, #44]	; (714 <_Z12display_menuv+0x6c>)
     6e8:	4b0b      	ldr	r3, [pc, #44]	; (718 <_Z12display_menuv+0x70>)
     6ea:	4798      	blx	r3
	usb0.xprint( "  6: Send FD extended message with ID: 0x100000A5 and 64 byte data 0 to 63. \r\n");
     6ec:	4912      	ldr	r1, [pc, #72]	; (738 <_Z12display_menuv+0x90>)
     6ee:	4809      	ldr	r0, [pc, #36]	; (714 <_Z12display_menuv+0x6c>)
     6f0:	4b09      	ldr	r3, [pc, #36]	; (718 <_Z12display_menuv+0x70>)
     6f2:	4798      	blx	r3
	usb0.xprint( "  7: Send FD extended message with ID: 0x10000096 and 64 byte data 128 to 191. \r\n");
     6f4:	4911      	ldr	r1, [pc, #68]	; (73c <_Z12display_menuv+0x94>)
     6f6:	4807      	ldr	r0, [pc, #28]	; (714 <_Z12display_menuv+0x6c>)
     6f8:	4b07      	ldr	r3, [pc, #28]	; (718 <_Z12display_menuv+0x70>)
     6fa:	4798      	blx	r3
	usb0.xprint( "  a: Send normal standard message with ID: 0x469 and 8 byte data 0 to 7. \r\n");
     6fc:	4910      	ldr	r1, [pc, #64]	; (740 <_Z12display_menuv+0x98>)
     6fe:	4805      	ldr	r0, [pc, #20]	; (714 <_Z12display_menuv+0x6c>)
     700:	4b05      	ldr	r3, [pc, #20]	; (718 <_Z12display_menuv+0x70>)
     702:	4798      	blx	r3
	usb0.xprint( "  h: Display menu \r\n\r\n");
     704:	490f      	ldr	r1, [pc, #60]	; (744 <_Z12display_menuv+0x9c>)
     706:	4803      	ldr	r0, [pc, #12]	; (714 <_Z12display_menuv+0x6c>)
     708:	4b03      	ldr	r3, [pc, #12]	; (718 <_Z12display_menuv+0x70>)
     70a:	4798      	blx	r3
     70c:	bf00      	nop
     70e:	bd80      	pop	{r7, pc}
     710:	00004d94 	.word	0x00004d94
     714:	20000558 	.word	0x20000558
     718:	00000a61 	.word	0x00000a61
     71c:	00004da0 	.word	0x00004da0
     720:	00004dbc 	.word	0x00004dbc
     724:	00004dfc 	.word	0x00004dfc
     728:	00004e3c 	.word	0x00004e3c
     72c:	00004e88 	.word	0x00004e88
     730:	00004ed8 	.word	0x00004ed8
     734:	00004f1c 	.word	0x00004f1c
     738:	00004f60 	.word	0x00004f60
     73c:	00004fb0 	.word	0x00004fb0
     740:	00005004 	.word	0x00005004
     744:	00005050 	.word	0x00005050

00000748 <_Z41__static_initialization_and_destruction_0ii>:
     748:	b580      	push	{r7, lr}
     74a:	b082      	sub	sp, #8
     74c:	af00      	add	r7, sp, #0
     74e:	6078      	str	r0, [r7, #4]
     750:	6039      	str	r1, [r7, #0]
     752:	687b      	ldr	r3, [r7, #4]
     754:	2b01      	cmp	r3, #1
     756:	d10c      	bne.n	772 <_Z41__static_initialization_and_destruction_0ii+0x2a>
     758:	683b      	ldr	r3, [r7, #0]
     75a:	f64f 72ff 	movw	r2, #65535	; 0xffff
     75e:	4293      	cmp	r3, r2
     760:	d107      	bne.n	772 <_Z41__static_initialization_and_destruction_0ii+0x2a>
USB_CDC_Class	usb0;
     762:	4806      	ldr	r0, [pc, #24]	; (77c <_Z41__static_initialization_and_destruction_0ii+0x34>)
     764:	4b06      	ldr	r3, [pc, #24]	; (780 <_Z41__static_initialization_and_destruction_0ii+0x38>)
     766:	4798      	blx	r3
     768:	4a06      	ldr	r2, [pc, #24]	; (784 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
     76a:	4907      	ldr	r1, [pc, #28]	; (788 <_Z41__static_initialization_and_destruction_0ii+0x40>)
     76c:	4803      	ldr	r0, [pc, #12]	; (77c <_Z41__static_initialization_and_destruction_0ii+0x34>)
     76e:	4b07      	ldr	r3, [pc, #28]	; (78c <_Z41__static_initialization_and_destruction_0ii+0x44>)
     770:	4798      	blx	r3
     772:	bf00      	nop
     774:	3708      	adds	r7, #8
     776:	46bd      	mov	sp, r7
     778:	bd80      	pop	{r7, pc}
     77a:	bf00      	nop
     77c:	20000558 	.word	0x20000558
     780:	00000859 	.word	0x00000859
     784:	20000000 	.word	0x20000000
     788:	00000a45 	.word	0x00000a45
     78c:	000048b5 	.word	0x000048b5

00000790 <_GLOBAL__sub_I_usb0>:
     790:	b580      	push	{r7, lr}
     792:	af00      	add	r7, sp, #0
     794:	f64f 71ff 	movw	r1, #65535	; 0xffff
     798:	2001      	movs	r0, #1
     79a:	4b01      	ldr	r3, [pc, #4]	; (7a0 <_GLOBAL__sub_I_usb0+0x10>)
     79c:	4798      	blx	r3
     79e:	bd80      	pop	{r7, pc}
     7a0:	00000749 	.word	0x00000749

000007a4 <_ZL12cb_bulk_readh13usb_xfer_codem>:

/**
 * \brief Callback invoked when bulk OUT data received
 */
static bool cb_bulk_read(const uint8_t ep, const enum usb_xfer_code rc, const uint32_t count)
{
     7a4:	b580      	push	{r7, lr}
     7a6:	b082      	sub	sp, #8
     7a8:	af00      	add	r7, sp, #0
     7aa:	4603      	mov	r3, r0
     7ac:	603a      	str	r2, [r7, #0]
     7ae:	71fb      	strb	r3, [r7, #7]
     7b0:	460b      	mov	r3, r1
     7b2:	71bb      	strb	r3, [r7, #6]

	ptrUSBClass->setLastChar();
     7b4:	4b07      	ldr	r3, [pc, #28]	; (7d4 <_ZL12cb_bulk_readh13usb_xfer_codem+0x30>)
     7b6:	681b      	ldr	r3, [r3, #0]
     7b8:	4618      	mov	r0, r3
     7ba:	4b07      	ldr	r3, [pc, #28]	; (7d8 <_ZL12cb_bulk_readh13usb_xfer_codem+0x34>)
     7bc:	4798      	blx	r3
	ptrUSBClass->setRxDone();
     7be:	4b05      	ldr	r3, [pc, #20]	; (7d4 <_ZL12cb_bulk_readh13usb_xfer_codem+0x30>)
     7c0:	681b      	ldr	r3, [r3, #0]
     7c2:	4618      	mov	r0, r3
     7c4:	4b05      	ldr	r3, [pc, #20]	; (7dc <_ZL12cb_bulk_readh13usb_xfer_codem+0x38>)
     7c6:	4798      	blx	r3

	return false;
     7c8:	2300      	movs	r3, #0
}
     7ca:	4618      	mov	r0, r3
     7cc:	3708      	adds	r7, #8
     7ce:	46bd      	mov	sp, r7
     7d0:	bd80      	pop	{r7, pc}
     7d2:	bf00      	nop
     7d4:	20000640 	.word	0x20000640
     7d8:	00000a25 	.word	0x00000a25
     7dc:	000009fd 	.word	0x000009fd

000007e0 <_ZL13cb_bulk_writeh13usb_xfer_codem>:

/**
 * \brief Callback invoked when bulk IN data received
 */
static bool cb_bulk_write(const uint8_t ep, const enum usb_xfer_code rc, const uint32_t count)
{
     7e0:	b580      	push	{r7, lr}
     7e2:	b082      	sub	sp, #8
     7e4:	af00      	add	r7, sp, #0
     7e6:	4603      	mov	r3, r0
     7e8:	603a      	str	r2, [r7, #0]
     7ea:	71fb      	strb	r3, [r7, #7]
     7ec:	460b      	mov	r3, r1
     7ee:	71bb      	strb	r3, [r7, #6]
	/* Echo data. */

	
	ptrUSBClass->setTxDone();
     7f0:	4b04      	ldr	r3, [pc, #16]	; (804 <_ZL13cb_bulk_writeh13usb_xfer_codem+0x24>)
     7f2:	681b      	ldr	r3, [r3, #0]
     7f4:	4618      	mov	r0, r3
     7f6:	4b04      	ldr	r3, [pc, #16]	; (808 <_ZL13cb_bulk_writeh13usb_xfer_codem+0x28>)
     7f8:	4798      	blx	r3

	

	/* No error. */
	return false;
     7fa:	2300      	movs	r3, #0
}
     7fc:	4618      	mov	r0, r3
     7fe:	3708      	adds	r7, #8
     800:	46bd      	mov	sp, r7
     802:	bd80      	pop	{r7, pc}
     804:	20000640 	.word	0x20000640
     808:	000009d5 	.word	0x000009d5

0000080c <_ZL10cb_state_c22usb_cdc_control_signal>:

static bool cb_state_c(usb_cdc_control_signal_t state)
{
     80c:	b580      	push	{r7, lr}
     80e:	b082      	sub	sp, #8
     810:	af00      	add	r7, sp, #0
     812:	80b8      	strh	r0, [r7, #4]
	if (state.rs232.DTR) {
     814:	793b      	ldrb	r3, [r7, #4]
     816:	f003 0301 	and.w	r3, r3, #1
     81a:	b2db      	uxtb	r3, r3
     81c:	2b00      	cmp	r3, #0
     81e:	d00c      	beq.n	83a <_ZL10cb_state_c22usb_cdc_control_signal+0x2e>
		/* Callbacks must be registered after endpoint allocation */
		cdcdf_acm_register_callback(CDCDF_ACM_CB_READ, (FUNC_PTR)cb_bulk_read);
     820:	4908      	ldr	r1, [pc, #32]	; (844 <_ZL10cb_state_c22usb_cdc_control_signal+0x38>)
     822:	2000      	movs	r0, #0
     824:	4b08      	ldr	r3, [pc, #32]	; (848 <_ZL10cb_state_c22usb_cdc_control_signal+0x3c>)
     826:	4798      	blx	r3
		cdcdf_acm_register_callback(CDCDF_ACM_CB_WRITE, (FUNC_PTR)cb_bulk_write);
     828:	4908      	ldr	r1, [pc, #32]	; (84c <_ZL10cb_state_c22usb_cdc_control_signal+0x40>)
     82a:	2001      	movs	r0, #1
     82c:	4b06      	ldr	r3, [pc, #24]	; (848 <_ZL10cb_state_c22usb_cdc_control_signal+0x3c>)
     82e:	4798      	blx	r3

		ptrUSBClass->setTxDone();
     830:	4b07      	ldr	r3, [pc, #28]	; (850 <_ZL10cb_state_c22usb_cdc_control_signal+0x44>)
     832:	681b      	ldr	r3, [r3, #0]
     834:	4618      	mov	r0, r3
     836:	4b07      	ldr	r3, [pc, #28]	; (854 <_ZL10cb_state_c22usb_cdc_control_signal+0x48>)
     838:	4798      	blx	r3

	}

	/* No error. */
	return false;
     83a:	2300      	movs	r3, #0
}
     83c:	4618      	mov	r0, r3
     83e:	3708      	adds	r7, #8
     840:	46bd      	mov	sp, r7
     842:	bd80      	pop	{r7, pc}
     844:	000007a5 	.word	0x000007a5
     848:	00003ff9 	.word	0x00003ff9
     84c:	000007e1 	.word	0x000007e1
     850:	20000640 	.word	0x20000640
     854:	000009d5 	.word	0x000009d5

00000858 <_ZN13USB_CDC_ClassC1Ev>:

// default constructor
USB_CDC_Class::USB_CDC_Class()
     858:	b480      	push	{r7}
     85a:	b083      	sub	sp, #12
     85c:	af00      	add	r7, sp, #0
     85e:	6078      	str	r0, [r7, #4]
{
	descUSB=desc;
     860:	687b      	ldr	r3, [r7, #4]
     862:	4a08      	ldr	r2, [pc, #32]	; (884 <_ZN13USB_CDC_ClassC1Ev+0x2c>)
     864:	605a      	str	r2, [r3, #4]
	ptr_cdc_buffer=usbd_cdc_buffer;
     866:	687b      	ldr	r3, [r7, #4]
     868:	4a07      	ldr	r2, [pc, #28]	; (888 <_ZN13USB_CDC_ClassC1Ev+0x30>)
     86a:	609a      	str	r2, [r3, #8]
	ptrUSBClass=this;
     86c:	4a07      	ldr	r2, [pc, #28]	; (88c <_ZN13USB_CDC_ClassC1Ev+0x34>)
     86e:	687b      	ldr	r3, [r7, #4]
     870:	6013      	str	r3, [r2, #0]
	pUSBClass=this;
     872:	687b      	ldr	r3, [r7, #4]
     874:	687a      	ldr	r2, [r7, #4]
     876:	665a      	str	r2, [r3, #100]	; 0x64



} //USB_CDC_Class
     878:	687b      	ldr	r3, [r7, #4]
     87a:	4618      	mov	r0, r3
     87c:	370c      	adds	r7, #12
     87e:	46bd      	mov	sp, r7
     880:	bc80      	pop	{r7}
     882:	4770      	bx	lr
     884:	20000088 	.word	0x20000088
     888:	200005c0 	.word	0x200005c0
     88c:	20000640 	.word	0x20000640

00000890 <_ZN13USB_CDC_Class4initEv>:
} //USB_CDC_Class

// default destructor


void USB_CDC_Class::init(){
     890:	b580      	push	{r7, lr}
     892:	b082      	sub	sp, #8
     894:	af00      	add	r7, sp, #0
     896:	6078      	str	r0, [r7, #4]
	usbdc_init(usb_ctrl_buffer);
     898:	4815      	ldr	r0, [pc, #84]	; (8f0 <_ZN13USB_CDC_Class4initEv+0x60>)
     89a:	4b16      	ldr	r3, [pc, #88]	; (8f4 <_ZN13USB_CDC_Class4initEv+0x64>)
     89c:	4798      	blx	r3

	/* usbdc_register_funcion inside */
	cdcdf_acm_init();
     89e:	4b16      	ldr	r3, [pc, #88]	; (8f8 <_ZN13USB_CDC_Class4initEv+0x68>)
     8a0:	4798      	blx	r3

	usbdc_start(desc);
     8a2:	4816      	ldr	r0, [pc, #88]	; (8fc <_ZN13USB_CDC_Class4initEv+0x6c>)
     8a4:	4b16      	ldr	r3, [pc, #88]	; (900 <_ZN13USB_CDC_Class4initEv+0x70>)
     8a6:	4798      	blx	r3
	usbdc_attach();
     8a8:	4b16      	ldr	r3, [pc, #88]	; (904 <_ZN13USB_CDC_Class4initEv+0x74>)
     8aa:	4798      	blx	r3

	cdcdf_acm_register_callback(CDCDF_ACM_CB_STATE_C, (FUNC_PTR)cb_state_c);
     8ac:	4916      	ldr	r1, [pc, #88]	; (908 <_ZN13USB_CDC_Class4initEv+0x78>)
     8ae:	2003      	movs	r0, #3
     8b0:	4b16      	ldr	r3, [pc, #88]	; (90c <_ZN13USB_CDC_Class4initEv+0x7c>)
     8b2:	4798      	blx	r3
	cdcdf_acm_register_callback(CDCDF_ACM_CB_READ, (FUNC_PTR)cb_bulk_read);
     8b4:	4916      	ldr	r1, [pc, #88]	; (910 <_ZN13USB_CDC_Class4initEv+0x80>)
     8b6:	2000      	movs	r0, #0
     8b8:	4b14      	ldr	r3, [pc, #80]	; (90c <_ZN13USB_CDC_Class4initEv+0x7c>)
     8ba:	4798      	blx	r3
	cdcdf_acm_register_callback(CDCDF_ACM_CB_WRITE, (FUNC_PTR)cb_bulk_write);
     8bc:	4915      	ldr	r1, [pc, #84]	; (914 <_ZN13USB_CDC_Class4initEv+0x84>)
     8be:	2001      	movs	r0, #1
     8c0:	4b12      	ldr	r3, [pc, #72]	; (90c <_ZN13USB_CDC_Class4initEv+0x7c>)
     8c2:	4798      	blx	r3
	txDone=true;
     8c4:	687b      	ldr	r3, [r7, #4]
     8c6:	2201      	movs	r2, #1
     8c8:	f883 2020 	strb.w	r2, [r3, #32]
	rxDone=true;
     8cc:	687b      	ldr	r3, [r7, #4]
     8ce:	2201      	movs	r2, #1
     8d0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	while (!isUSBEnabled()){};
     8d4:	6878      	ldr	r0, [r7, #4]
     8d6:	4b10      	ldr	r3, [pc, #64]	; (918 <_ZN13USB_CDC_Class4initEv+0x88>)
     8d8:	4798      	blx	r3
     8da:	4603      	mov	r3, r0
     8dc:	f083 0301 	eor.w	r3, r3, #1
     8e0:	b2db      	uxtb	r3, r3
     8e2:	2b00      	cmp	r3, #0
     8e4:	d000      	beq.n	8e8 <_ZN13USB_CDC_Class4initEv+0x58>
     8e6:	e7f5      	b.n	8d4 <_ZN13USB_CDC_Class4initEv+0x44>
	
}
     8e8:	bf00      	nop
     8ea:	3708      	adds	r7, #8
     8ec:	46bd      	mov	sp, r7
     8ee:	bd80      	pop	{r7, pc}
     8f0:	20000600 	.word	0x20000600
     8f4:	0000465d 	.word	0x0000465d
     8f8:	00003f49 	.word	0x00003f49
     8fc:	20000088 	.word	0x20000088
     900:	000046cd 	.word	0x000046cd
     904:	00004701 	.word	0x00004701
     908:	0000080d 	.word	0x0000080d
     90c:	00003ff9 	.word	0x00003ff9
     910:	000007a5 	.word	0x000007a5
     914:	000007e1 	.word	0x000007e1
     918:	000009b9 	.word	0x000009b9

0000091c <_ZN13USB_CDC_Class5writeEPhm>:
int32_t USB_CDC_Class::enable(){
	cdcdf_acm_init();
	return 0;
}

int32_t  USB_CDC_Class::write( uint8_t *p, uint32_t n){
     91c:	b580      	push	{r7, lr}
     91e:	b086      	sub	sp, #24
     920:	af00      	add	r7, sp, #0
     922:	60f8      	str	r0, [r7, #12]
     924:	60b9      	str	r1, [r7, #8]
     926:	607a      	str	r2, [r7, #4]
	int32_t w;

	while(!isUSBEnabled());
     928:	68f8      	ldr	r0, [r7, #12]
     92a:	4b0e      	ldr	r3, [pc, #56]	; (964 <_ZN13USB_CDC_Class5writeEPhm+0x48>)
     92c:	4798      	blx	r3
     92e:	4603      	mov	r3, r0
     930:	f083 0301 	eor.w	r3, r3, #1
     934:	b2db      	uxtb	r3, r3
     936:	2b00      	cmp	r3, #0
     938:	d000      	beq.n	93c <_ZN13USB_CDC_Class5writeEPhm+0x20>
     93a:	e7f5      	b.n	928 <_ZN13USB_CDC_Class5writeEPhm+0xc>
	while(!txDone);
     93c:	68fb      	ldr	r3, [r7, #12]
     93e:	f893 3020 	ldrb.w	r3, [r3, #32]
     942:	2b00      	cmp	r3, #0
     944:	d100      	bne.n	948 <_ZN13USB_CDC_Class5writeEPhm+0x2c>
     946:	e7f9      	b.n	93c <_ZN13USB_CDC_Class5writeEPhm+0x20>
	txDone=false;
     948:	68fb      	ldr	r3, [r7, #12]
     94a:	2200      	movs	r2, #0
     94c:	f883 2020 	strb.w	r2, [r3, #32]
	w=cdcdf_acm_write(p,n);
     950:	6879      	ldr	r1, [r7, #4]
     952:	68b8      	ldr	r0, [r7, #8]
     954:	4b04      	ldr	r3, [pc, #16]	; (968 <_ZN13USB_CDC_Class5writeEPhm+0x4c>)
     956:	4798      	blx	r3
     958:	6178      	str	r0, [r7, #20]
	
	return w;
     95a:	697b      	ldr	r3, [r7, #20]
	
}
     95c:	4618      	mov	r0, r3
     95e:	3718      	adds	r7, #24
     960:	46bd      	mov	sp, r7
     962:	bd80      	pop	{r7, pc}
     964:	000009b9 	.word	0x000009b9
     968:	00003fd1 	.word	0x00003fd1

0000096c <_ZN13USB_CDC_Class4readEPhm>:
	{
		while(!rxDone);
	}
	return  r;
}
int32_t  USB_CDC_Class::read(uint8_t * p, uint32_t n){
     96c:	b580      	push	{r7, lr}
     96e:	b086      	sub	sp, #24
     970:	af00      	add	r7, sp, #0
     972:	60f8      	str	r0, [r7, #12]
     974:	60b9      	str	r1, [r7, #8]
     976:	607a      	str	r2, [r7, #4]
	int32_t r;
	char_buffer=p;
     978:	68fb      	ldr	r3, [r7, #12]
     97a:	68ba      	ldr	r2, [r7, #8]
     97c:	60da      	str	r2, [r3, #12]
	while(!isUSBEnabled());
     97e:	68f8      	ldr	r0, [r7, #12]
     980:	4b0b      	ldr	r3, [pc, #44]	; (9b0 <_ZN13USB_CDC_Class4readEPhm+0x44>)
     982:	4798      	blx	r3
     984:	4603      	mov	r3, r0
     986:	f083 0301 	eor.w	r3, r3, #1
     98a:	b2db      	uxtb	r3, r3
     98c:	2b00      	cmp	r3, #0
     98e:	d000      	beq.n	992 <_ZN13USB_CDC_Class4readEPhm+0x26>
     990:	e7f5      	b.n	97e <_ZN13USB_CDC_Class4readEPhm+0x12>
	//while(!rxDone);
	rxDone=false;
     992:	68fb      	ldr	r3, [r7, #12]
     994:	2200      	movs	r2, #0
     996:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	r=cdcdf_acm_read(p, n);
     99a:	6879      	ldr	r1, [r7, #4]
     99c:	68b8      	ldr	r0, [r7, #8]
     99e:	4b05      	ldr	r3, [pc, #20]	; (9b4 <_ZN13USB_CDC_Class4readEPhm+0x48>)
     9a0:	4798      	blx	r3
     9a2:	6178      	str	r0, [r7, #20]
	

	return  r;
     9a4:	697b      	ldr	r3, [r7, #20]
}
     9a6:	4618      	mov	r0, r3
     9a8:	3718      	adds	r7, #24
     9aa:	46bd      	mov	sp, r7
     9ac:	bd80      	pop	{r7, pc}
     9ae:	bf00      	nop
     9b0:	000009b9 	.word	0x000009b9
     9b4:	00003fa9 	.word	0x00003fa9

000009b8 <_ZN13USB_CDC_Class12isUSBEnabledEv>:
}
void USB_CDC_Class::disable(void){
cdcdf_acm_deinit();
	
}
bool USB_CDC_Class::isUSBEnabled(void){
     9b8:	b580      	push	{r7, lr}
     9ba:	b082      	sub	sp, #8
     9bc:	af00      	add	r7, sp, #0
     9be:	6078      	str	r0, [r7, #4]
	

	return cdcdf_acm_is_enabled();
     9c0:	4b03      	ldr	r3, [pc, #12]	; (9d0 <_ZN13USB_CDC_Class12isUSBEnabledEv+0x18>)
     9c2:	4798      	blx	r3
     9c4:	4603      	mov	r3, r0
	
}
     9c6:	4618      	mov	r0, r3
     9c8:	3708      	adds	r7, #8
     9ca:	46bd      	mov	sp, r7
     9cc:	bd80      	pop	{r7, pc}
     9ce:	bf00      	nop
     9d0:	00004045 	.word	0x00004045

000009d4 <_ZN13USB_CDC_Class9setTxDoneEv>:
bool  USB_CDC_Class::setTxDone(void){
     9d4:	b480      	push	{r7}
     9d6:	b083      	sub	sp, #12
     9d8:	af00      	add	r7, sp, #0
     9da:	6078      	str	r0, [r7, #4]
	txDone=true;
     9dc:	687b      	ldr	r3, [r7, #4]
     9de:	2201      	movs	r2, #1
     9e0:	f883 2020 	strb.w	r2, [r3, #32]
	txDone=true;
     9e4:	687b      	ldr	r3, [r7, #4]
     9e6:	2201      	movs	r2, #1
     9e8:	f883 2020 	strb.w	r2, [r3, #32]
	return txDone;
     9ec:	687b      	ldr	r3, [r7, #4]
     9ee:	f893 3020 	ldrb.w	r3, [r3, #32]
}
     9f2:	4618      	mov	r0, r3
     9f4:	370c      	adds	r7, #12
     9f6:	46bd      	mov	sp, r7
     9f8:	bc80      	pop	{r7}
     9fa:	4770      	bx	lr

000009fc <_ZN13USB_CDC_Class9setRxDoneEv>:
bool  USB_CDC_Class::setRxDone(void){
     9fc:	b480      	push	{r7}
     9fe:	b083      	sub	sp, #12
     a00:	af00      	add	r7, sp, #0
     a02:	6078      	str	r0, [r7, #4]
	rxDone=true;
     a04:	687b      	ldr	r3, [r7, #4]
     a06:	2201      	movs	r2, #1
     a08:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	rxDone=true;
     a0c:	687b      	ldr	r3, [r7, #4]
     a0e:	2201      	movs	r2, #1
     a10:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	return rxDone;
     a14:	687b      	ldr	r3, [r7, #4]
     a16:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
}
     a1a:	4618      	mov	r0, r3
     a1c:	370c      	adds	r7, #12
     a1e:	46bd      	mov	sp, r7
     a20:	bc80      	pop	{r7}
     a22:	4770      	bx	lr

00000a24 <_ZN13USB_CDC_Class11setLastCharEv>:
char USB_CDC_Class::getLastChar(){
	
	return (char)byte;
	
}
uint8_t USB_CDC_Class::setLastChar(){
     a24:	b480      	push	{r7}
     a26:	b083      	sub	sp, #12
     a28:	af00      	add	r7, sp, #0
     a2a:	6078      	str	r0, [r7, #4]
	byte=*char_buffer;
     a2c:	687b      	ldr	r3, [r7, #4]
     a2e:	68db      	ldr	r3, [r3, #12]
     a30:	781a      	ldrb	r2, [r3, #0]
     a32:	687b      	ldr	r3, [r7, #4]
     a34:	741a      	strb	r2, [r3, #16]

	return byte;
     a36:	687b      	ldr	r3, [r7, #4]
     a38:	7c1b      	ldrb	r3, [r3, #16]
	
}
     a3a:	4618      	mov	r0, r3
     a3c:	370c      	adds	r7, #12
     a3e:	46bd      	mov	sp, r7
     a40:	bc80      	pop	{r7}
     a42:	4770      	bx	lr

00000a44 <_ZN13USB_CDC_ClassD1Ev>:


// default destructor
USB_CDC_Class::~USB_CDC_Class()
     a44:	b580      	push	{r7, lr}
     a46:	b082      	sub	sp, #8
     a48:	af00      	add	r7, sp, #0
     a4a:	6078      	str	r0, [r7, #4]
{
	cdcdf_acm_deinit();
     a4c:	4b03      	ldr	r3, [pc, #12]	; (a5c <_ZN13USB_CDC_ClassD1Ev+0x18>)
     a4e:	4798      	blx	r3
} //~USB_CDC_Class
     a50:	687b      	ldr	r3, [r7, #4]
     a52:	4618      	mov	r0, r3
     a54:	3708      	adds	r7, #8
     a56:	46bd      	mov	sp, r7
     a58:	bd80      	pop	{r7, pc}
     a5a:	bf00      	nop
     a5c:	00003f8d 	.word	0x00003f8d

00000a60 <_ZN13USB_CDC_Class6xprintEPKc>:
void USB_CDC_Class::xprint(const char *message){
     a60:	b580      	push	{r7, lr}
     a62:	b0c6      	sub	sp, #280	; 0x118
     a64:	af00      	add	r7, sp, #0
     a66:	1d3b      	adds	r3, r7, #4
     a68:	6018      	str	r0, [r3, #0]
     a6a:	463b      	mov	r3, r7
     a6c:	6019      	str	r1, [r3, #0]

	uint32_t s;
	char *p=(char *)message;
     a6e:	463b      	mov	r3, r7
     a70:	681b      	ldr	r3, [r3, #0]
     a72:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
	s=strlen(p);
     a76:	f8d7 0114 	ldr.w	r0, [r7, #276]	; 0x114
     a7a:	4b18      	ldr	r3, [pc, #96]	; (adc <_ZN13USB_CDC_Class6xprintEPKc+0x7c>)
     a7c:	4798      	blx	r3
     a7e:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
	uint8_t	chain[256];

	
	for (uint8_t i=0;i<s;i++){
     a82:	2300      	movs	r3, #0
     a84:	f887 3113 	strb.w	r3, [r7, #275]	; 0x113
     a88:	f897 2113 	ldrb.w	r2, [r7, #275]	; 0x113
     a8c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
     a90:	429a      	cmp	r2, r3
     a92:	d212      	bcs.n	aba <_ZN13USB_CDC_Class6xprintEPKc+0x5a>
		chain[i]=*p;
     a94:	f897 3113 	ldrb.w	r3, [r7, #275]	; 0x113
     a98:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
     a9c:	7811      	ldrb	r1, [r2, #0]
     a9e:	f107 0208 	add.w	r2, r7, #8
     aa2:	54d1      	strb	r1, [r2, r3]
		p++;
     aa4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
     aa8:	3301      	adds	r3, #1
     aaa:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
	for (uint8_t i=0;i<s;i++){
     aae:	f897 3113 	ldrb.w	r3, [r7, #275]	; 0x113
     ab2:	3301      	adds	r3, #1
     ab4:	f887 3113 	strb.w	r3, [r7, #275]	; 0x113
     ab8:	e7e6      	b.n	a88 <_ZN13USB_CDC_Class6xprintEPKc+0x28>
	}

	//uint8_t	pArray[s]=*string;
	uint8_t *ptr=(uint8_t*)chain;
     aba:	f107 0308 	add.w	r3, r7, #8
     abe:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
	
	write(ptr,s);
     ac2:	1d3b      	adds	r3, r7, #4
     ac4:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
     ac8:	f8d7 1108 	ldr.w	r1, [r7, #264]	; 0x108
     acc:	6818      	ldr	r0, [r3, #0]
     ace:	4b04      	ldr	r3, [pc, #16]	; (ae0 <_ZN13USB_CDC_Class6xprintEPKc+0x80>)
     ad0:	4798      	blx	r3
}
     ad2:	bf00      	nop
     ad4:	f507 778c 	add.w	r7, r7, #280	; 0x118
     ad8:	46bd      	mov	sp, r7
     ada:	bd80      	pop	{r7, pc}
     adc:	00004b01 	.word	0x00004b01
     ae0:	0000091d 	.word	0x0000091d

00000ae4 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
     ae4:	b508      	push	{r3, lr}
	system_init();
     ae6:	4b02      	ldr	r3, [pc, #8]	; (af0 <atmel_start_init+0xc>)
     ae8:	4798      	blx	r3
	usb_init();
     aea:	4b02      	ldr	r3, [pc, #8]	; (af4 <atmel_start_init+0x10>)
     aec:	4798      	blx	r3
     aee:	bd08      	pop	{r3, pc}
     af0:	00000fdd 	.word	0x00000fdd
     af4:	0000488d 	.word	0x0000488d

00000af8 <EVENT_SYSTEM_0_init>:
struct i2c_m_async_desc I2C_1;

struct i2c_m_async_desc I2C_EEPROM;

void EVENT_SYSTEM_0_init(void)
{
     af8:	b508      	push	{r3, lr}
}

static inline void hri_gclk_write_PCHCTRL_reg(const void *const hw, uint8_t index, hri_gclk_pchctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->PCHCTRL[index].reg = data;
     afa:	2240      	movs	r2, #64	; 0x40
     afc:	4b05      	ldr	r3, [pc, #20]	; (b14 <EVENT_SYSTEM_0_init+0x1c>)
     afe:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
}

static inline void hri_mclk_set_APBBMASK_EVSYS_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_EVSYS;
     b02:	4a05      	ldr	r2, [pc, #20]	; (b18 <EVENT_SYSTEM_0_init+0x20>)
     b04:	6993      	ldr	r3, [r2, #24]
     b06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
     b0a:	6193      	str	r3, [r2, #24]
	hri_gclk_write_PCHCTRL_reg(GCLK, EVSYS_GCLK_ID_0, CONF_GCLK_EVSYS_CHANNEL_0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));

	hri_mclk_set_APBBMASK_EVSYS_bit(MCLK);

	event_system_init();
     b0c:	4b03      	ldr	r3, [pc, #12]	; (b1c <EVENT_SYSTEM_0_init+0x24>)
     b0e:	4798      	blx	r3
     b10:	bd08      	pop	{r3, pc}
     b12:	bf00      	nop
     b14:	40001c00 	.word	0x40001c00
     b18:	40000800 	.word	0x40000800
     b1c:	000012c5 	.word	0x000012c5

00000b20 <SPI_LTC2983_PORT_init>:
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = ~data;
}

static inline void hri_port_clear_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     b20:	4b28      	ldr	r3, [pc, #160]	; (bc4 <SPI_LTC2983_PORT_init+0xa4>)
     b22:	2210      	movs	r2, #16
     b24:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     b26:	609a      	str	r2, [r3, #8]

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     b28:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     b2c:	629a      	str	r2, [r3, #40]	; 0x28
     b2e:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
     b32:	6299      	str	r1, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     b34:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
	tmp &= ~PORT_PINCFG_PMUXEN;
     b38:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     b3c:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     b40:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     b44:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     b48:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     b4c:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     b50:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     b54:	2220      	movs	r2, #32
     b56:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     b58:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     b5a:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     b5e:	629a      	str	r2, [r3, #40]	; 0x28
     b60:	6299      	str	r1, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     b62:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
	tmp &= ~PORT_PINCFG_PMUXEN;
     b66:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     b6a:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     b6e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     b72:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     b76:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     b7a:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     b7e:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     b82:	2240      	movs	r2, #64	; 0x40
     b84:	605a      	str	r2, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     b86:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     b8a:	f502 3200 	add.w	r2, r2, #131072	; 0x20000
     b8e:	629a      	str	r2, [r3, #40]	; 0x28
     b90:	4a0d      	ldr	r2, [pc, #52]	; (bc8 <SPI_LTC2983_PORT_init+0xa8>)
     b92:	629a      	str	r2, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     b94:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
     b98:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     b9c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     ba0:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
	tmp &= ~PORT_PINCFG_PMUXEN;
     ba4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     ba8:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     bac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     bb0:	f893 2033 	ldrb.w	r2, [r3, #51]	; 0x33
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     bb4:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     bb8:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     bbc:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
     bc0:	4770      	bx	lr
     bc2:	bf00      	nop
     bc4:	41008000 	.word	0x41008000
     bc8:	c0020000 	.word	0xc0020000

00000bcc <SPI_LTC2983_CLOCK_init>:
     bcc:	4b06      	ldr	r3, [pc, #24]	; (be8 <SPI_LTC2983_CLOCK_init+0x1c>)
     bce:	2240      	movs	r2, #64	; 0x40
     bd0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
     bd4:	2243      	movs	r2, #67	; 0x43
     bd6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_SERCOM0;
     bda:	4a04      	ldr	r2, [pc, #16]	; (bec <SPI_LTC2983_CLOCK_init+0x20>)
     bdc:	6953      	ldr	r3, [r2, #20]
     bde:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
     be2:	6153      	str	r3, [r2, #20]
     be4:	4770      	bx	lr
     be6:	bf00      	nop
     be8:	40001c00 	.word	0x40001c00
     bec:	40000800 	.word	0x40000800

00000bf0 <SPI_LTC2983_init>:

	hri_mclk_set_APBAMASK_SERCOM0_bit(MCLK);
}

void SPI_LTC2983_init(void)
{
     bf0:	b508      	push	{r3, lr}
	SPI_LTC2983_CLOCK_init();
     bf2:	4b04      	ldr	r3, [pc, #16]	; (c04 <SPI_LTC2983_init+0x14>)
     bf4:	4798      	blx	r3
	spi_m_sync_init(&SPI_LTC2983, SERCOM0);
     bf6:	4904      	ldr	r1, [pc, #16]	; (c08 <SPI_LTC2983_init+0x18>)
     bf8:	4804      	ldr	r0, [pc, #16]	; (c0c <SPI_LTC2983_init+0x1c>)
     bfa:	4b05      	ldr	r3, [pc, #20]	; (c10 <SPI_LTC2983_init+0x20>)
     bfc:	4798      	blx	r3
	SPI_LTC2983_PORT_init();
     bfe:	4b05      	ldr	r3, [pc, #20]	; (c14 <SPI_LTC2983_init+0x24>)
     c00:	4798      	blx	r3
     c02:	bd08      	pop	{r3, pc}
     c04:	00000bcd 	.word	0x00000bcd
     c08:	40003000 	.word	0x40003000
     c0c:	20000a14 	.word	0x20000a14
     c10:	000013d5 	.word	0x000013d5
     c14:	00000b21 	.word	0x00000b21

00000c18 <I2C_1_PORT_init>:
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     c18:	4b16      	ldr	r3, [pc, #88]	; (c74 <I2C_1_PORT_init+0x5c>)
     c1a:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
     c1e:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     c22:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     c26:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
	tmp &= ~PORT_PINCFG_PMUXEN;
     c2a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     c2e:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     c32:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     c36:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     c3a:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     c3e:	f042 0202 	orr.w	r2, r2, #2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     c42:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     c46:	f893 2051 	ldrb.w	r2, [r3, #81]	; 0x51
     c4a:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     c4e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     c52:	f893 2051 	ldrb.w	r2, [r3, #81]	; 0x51
	tmp &= ~PORT_PINCFG_PMUXEN;
     c56:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     c5a:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     c5e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     c62:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     c66:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     c6a:	f042 0220 	orr.w	r2, r2, #32
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     c6e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
     c72:	4770      	bx	lr
     c74:	41008000 	.word	0x41008000

00000c78 <I2C_1_CLOCK_init>:
     c78:	4b06      	ldr	r3, [pc, #24]	; (c94 <I2C_1_CLOCK_init+0x1c>)
     c7a:	2240      	movs	r2, #64	; 0x40
     c7c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
     c80:	2243      	movs	r2, #67	; 0x43
     c82:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_SERCOM1;
     c86:	4a04      	ldr	r2, [pc, #16]	; (c98 <I2C_1_CLOCK_init+0x20>)
     c88:	6953      	ldr	r3, [r2, #20]
     c8a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
     c8e:	6153      	str	r3, [r2, #20]
     c90:	4770      	bx	lr
     c92:	bf00      	nop
     c94:	40001c00 	.word	0x40001c00
     c98:	40000800 	.word	0x40000800

00000c9c <I2C_1_init>:

	hri_mclk_set_APBAMASK_SERCOM1_bit(MCLK);
}

void I2C_1_init(void)
{
     c9c:	b508      	push	{r3, lr}
	I2C_1_CLOCK_init();
     c9e:	4b04      	ldr	r3, [pc, #16]	; (cb0 <I2C_1_init+0x14>)
     ca0:	4798      	blx	r3
	i2c_m_async_init(&I2C_1, SERCOM1);
     ca2:	4904      	ldr	r1, [pc, #16]	; (cb4 <I2C_1_init+0x18>)
     ca4:	4804      	ldr	r0, [pc, #16]	; (cb8 <I2C_1_init+0x1c>)
     ca6:	4b05      	ldr	r3, [pc, #20]	; (cbc <I2C_1_init+0x20>)
     ca8:	4798      	blx	r3
	I2C_1_PORT_init();
     caa:	4b05      	ldr	r3, [pc, #20]	; (cc0 <I2C_1_init+0x24>)
     cac:	4798      	blx	r3
     cae:	bd08      	pop	{r3, pc}
     cb0:	00000c79 	.word	0x00000c79
     cb4:	40003400 	.word	0x40003400
     cb8:	200009d4 	.word	0x200009d4
     cbc:	00001369 	.word	0x00001369
     cc0:	00000c19 	.word	0x00000c19

00000cc4 <I2C_EEPROM_PORT_init>:
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     cc4:	4b16      	ldr	r3, [pc, #88]	; (d20 <I2C_EEPROM_PORT_init+0x5c>)
     cc6:	f893 2057 	ldrb.w	r2, [r3, #87]	; 0x57
     cca:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     cce:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     cd2:	f893 2057 	ldrb.w	r2, [r3, #87]	; 0x57
	tmp &= ~PORT_PINCFG_PMUXEN;
     cd6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     cda:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     cde:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     ce2:	f893 203b 	ldrb.w	r2, [r3, #59]	; 0x3b
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     ce6:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     cea:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     cee:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     cf2:	f893 2056 	ldrb.w	r2, [r3, #86]	; 0x56
     cf6:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     cfa:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     cfe:	f893 2056 	ldrb.w	r2, [r3, #86]	; 0x56
	tmp &= ~PORT_PINCFG_PMUXEN;
     d02:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     d06:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     d0a:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     d0e:	f893 203b 	ldrb.w	r2, [r3, #59]	; 0x3b
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     d12:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     d16:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     d1a:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
     d1e:	4770      	bx	lr
     d20:	41008000 	.word	0x41008000

00000d24 <I2C_EEPROM_CLOCK_init>:
     d24:	4b06      	ldr	r3, [pc, #24]	; (d40 <I2C_EEPROM_CLOCK_init+0x1c>)
     d26:	2240      	movs	r2, #64	; 0x40
     d28:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
     d2c:	2243      	movs	r2, #67	; 0x43
     d2e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}

static inline void hri_mclk_set_APBDMASK_SERCOM5_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM5;
     d32:	4a04      	ldr	r2, [pc, #16]	; (d44 <I2C_EEPROM_CLOCK_init+0x20>)
     d34:	6a13      	ldr	r3, [r2, #32]
     d36:	f043 0302 	orr.w	r3, r3, #2
     d3a:	6213      	str	r3, [r2, #32]
     d3c:	4770      	bx	lr
     d3e:	bf00      	nop
     d40:	40001c00 	.word	0x40001c00
     d44:	40000800 	.word	0x40000800

00000d48 <I2C_EEPROM_init>:

	hri_mclk_set_APBDMASK_SERCOM5_bit(MCLK);
}

void I2C_EEPROM_init(void)
{
     d48:	b508      	push	{r3, lr}
	I2C_EEPROM_CLOCK_init();
     d4a:	4b04      	ldr	r3, [pc, #16]	; (d5c <I2C_EEPROM_init+0x14>)
     d4c:	4798      	blx	r3
	i2c_m_async_init(&I2C_EEPROM, SERCOM5);
     d4e:	4904      	ldr	r1, [pc, #16]	; (d60 <I2C_EEPROM_init+0x18>)
     d50:	4804      	ldr	r0, [pc, #16]	; (d64 <I2C_EEPROM_init+0x1c>)
     d52:	4b05      	ldr	r3, [pc, #20]	; (d68 <I2C_EEPROM_init+0x20>)
     d54:	4798      	blx	r3
	I2C_EEPROM_PORT_init();
     d56:	4b05      	ldr	r3, [pc, #20]	; (d6c <I2C_EEPROM_init+0x24>)
     d58:	4798      	blx	r3
     d5a:	bd08      	pop	{r3, pc}
     d5c:	00000d25 	.word	0x00000d25
     d60:	43000400 	.word	0x43000400
     d64:	20000a44 	.word	0x20000a44
     d68:	00001369 	.word	0x00001369
     d6c:	00000cc5 	.word	0x00000cc5

00000d70 <SPI_Holt_PORT_init>:
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     d70:	4b2d      	ldr	r3, [pc, #180]	; (e28 <SPI_Holt_PORT_init+0xb8>)
     d72:	2210      	movs	r2, #16
     d74:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     d78:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     d7c:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     d80:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
     d84:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
     d88:	f8c3 1128 	str.w	r1, [r3, #296]	; 0x128
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     d8c:	f893 2144 	ldrb.w	r2, [r3, #324]	; 0x144
	tmp &= ~PORT_PINCFG_PMUXEN;
     d90:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     d94:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     d98:	f883 2144 	strb.w	r2, [r3, #324]	; 0x144
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     d9c:	f893 2132 	ldrb.w	r2, [r3, #306]	; 0x132
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     da0:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     da4:	f042 0202 	orr.w	r2, r2, #2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     da8:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     dac:	2220      	movs	r2, #32
     dae:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     db2:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     db6:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     dba:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
     dbe:	f8c3 1128 	str.w	r1, [r3, #296]	; 0x128
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     dc2:	f893 2145 	ldrb.w	r2, [r3, #325]	; 0x145
	tmp &= ~PORT_PINCFG_PMUXEN;
     dc6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     dca:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     dce:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     dd2:	f893 2132 	ldrb.w	r2, [r3, #306]	; 0x132
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     dd6:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     dda:	f042 0220 	orr.w	r2, r2, #32
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     dde:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     de2:	2240      	movs	r2, #64	; 0x40
     de4:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     de8:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     dec:	f502 3200 	add.w	r2, r2, #131072	; 0x20000
     df0:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
     df4:	4a0d      	ldr	r2, [pc, #52]	; (e2c <SPI_Holt_PORT_init+0xbc>)
     df6:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     dfa:	f893 2146 	ldrb.w	r2, [r3, #326]	; 0x146
     dfe:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     e02:	f883 2146 	strb.w	r2, [r3, #326]	; 0x146
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     e06:	f893 2146 	ldrb.w	r2, [r3, #326]	; 0x146
	tmp &= ~PORT_PINCFG_PMUXEN;
     e0a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     e0e:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     e12:	f883 2146 	strb.w	r2, [r3, #326]	; 0x146
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     e16:	f893 2133 	ldrb.w	r2, [r3, #307]	; 0x133
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     e1a:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     e1e:	f042 0202 	orr.w	r2, r2, #2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     e22:	f883 2133 	strb.w	r2, [r3, #307]	; 0x133
     e26:	4770      	bx	lr
     e28:	41008000 	.word	0x41008000
     e2c:	c0020000 	.word	0xc0020000

00000e30 <SPI_Holt_CLOCK_init>:
     e30:	4b06      	ldr	r3, [pc, #24]	; (e4c <SPI_Holt_CLOCK_init+0x1c>)
     e32:	2240      	movs	r2, #64	; 0x40
     e34:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
     e38:	2243      	movs	r2, #67	; 0x43
     e3a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}

static inline void hri_mclk_set_APBDMASK_SERCOM6_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM6;
     e3e:	4a04      	ldr	r2, [pc, #16]	; (e50 <SPI_Holt_CLOCK_init+0x20>)
     e40:	6a13      	ldr	r3, [r2, #32]
     e42:	f043 0304 	orr.w	r3, r3, #4
     e46:	6213      	str	r3, [r2, #32]
     e48:	4770      	bx	lr
     e4a:	bf00      	nop
     e4c:	40001c00 	.word	0x40001c00
     e50:	40000800 	.word	0x40000800

00000e54 <SPI_Holt_init>:

	hri_mclk_set_APBDMASK_SERCOM6_bit(MCLK);
}

void SPI_Holt_init(void)
{
     e54:	b508      	push	{r3, lr}
	SPI_Holt_CLOCK_init();
     e56:	4b04      	ldr	r3, [pc, #16]	; (e68 <SPI_Holt_init+0x14>)
     e58:	4798      	blx	r3
	spi_m_sync_init(&SPI_Holt, SERCOM6);
     e5a:	4904      	ldr	r1, [pc, #16]	; (e6c <SPI_Holt_init+0x18>)
     e5c:	4804      	ldr	r0, [pc, #16]	; (e70 <SPI_Holt_init+0x1c>)
     e5e:	4b05      	ldr	r3, [pc, #20]	; (e74 <SPI_Holt_init+0x20>)
     e60:	4798      	blx	r3
	SPI_Holt_PORT_init();
     e62:	4b05      	ldr	r3, [pc, #20]	; (e78 <SPI_Holt_init+0x24>)
     e64:	4798      	blx	r3
     e66:	bd08      	pop	{r3, pc}
     e68:	00000e31 	.word	0x00000e31
     e6c:	43000800 	.word	0x43000800
     e70:	20000a2c 	.word	0x20000a2c
     e74:	000013d5 	.word	0x000013d5
     e78:	00000d71 	.word	0x00000d71

00000e7c <delay_driver_init>:
}

void delay_driver_init(void)
{
     e7c:	b508      	push	{r3, lr}
	delay_init(SysTick);
     e7e:	4802      	ldr	r0, [pc, #8]	; (e88 <delay_driver_init+0xc>)
     e80:	4b02      	ldr	r3, [pc, #8]	; (e8c <delay_driver_init+0x10>)
     e82:	4798      	blx	r3
     e84:	bd08      	pop	{r3, pc}
     e86:	bf00      	nop
     e88:	e000e010 	.word	0xe000e010
     e8c:	00001291 	.word	0x00001291

00000e90 <USB_DEVICE_INSTANCE_PORT_init>:
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     e90:	4b1e      	ldr	r3, [pc, #120]	; (f0c <USB_DEVICE_INSTANCE_PORT_init+0x7c>)
     e92:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
     e96:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     e98:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
     e9c:	6299      	str	r1, [r3, #40]	; 0x28
     e9e:	481c      	ldr	r0, [pc, #112]	; (f10 <USB_DEVICE_INSTANCE_PORT_init+0x80>)
     ea0:	6298      	str	r0, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     ea2:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     ea4:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
     ea8:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     eac:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     eb0:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
	tmp &= ~PORT_PINCFG_PMUXEN;
     eb4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     eb8:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     ebc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     ec0:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     ec4:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     ec8:	f042 0207 	orr.w	r2, r2, #7
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     ecc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     ed0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
     ed4:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     ed6:	6299      	str	r1, [r3, #40]	; 0x28
     ed8:	490e      	ldr	r1, [pc, #56]	; (f14 <USB_DEVICE_INSTANCE_PORT_init+0x84>)
     eda:	6299      	str	r1, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     edc:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     ede:	f893 2059 	ldrb.w	r2, [r3, #89]	; 0x59
     ee2:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     ee6:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     eea:	f893 2059 	ldrb.w	r2, [r3, #89]	; 0x59
	tmp &= ~PORT_PINCFG_PMUXEN;
     eee:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     ef2:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     ef6:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     efa:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     efe:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     f02:	f042 0270 	orr.w	r2, r2, #112	; 0x70
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     f06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
     f0a:	4770      	bx	lr
     f0c:	41008000 	.word	0x41008000
     f10:	c0000100 	.word	0xc0000100
     f14:	c0000200 	.word	0xc0000200

00000f18 <USB_DEVICE_INSTANCE_CLOCK_init>:
     f18:	2244      	movs	r2, #68	; 0x44
     f1a:	4b07      	ldr	r3, [pc, #28]	; (f38 <USB_DEVICE_INSTANCE_CLOCK_init+0x20>)
     f1c:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_USB;
     f20:	f5a3 53a0 	sub.w	r3, r3, #5120	; 0x1400
     f24:	691a      	ldr	r2, [r3, #16]
     f26:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
     f2a:	611a      	str	r2, [r3, #16]
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_USB;
     f2c:	699a      	ldr	r2, [r3, #24]
     f2e:	f042 0201 	orr.w	r2, r2, #1
     f32:	619a      	str	r2, [r3, #24]
     f34:	4770      	bx	lr
     f36:	bf00      	nop
     f38:	40001c00 	.word	0x40001c00

00000f3c <USB_DEVICE_INSTANCE_init>:
	hri_mclk_set_AHBMASK_USB_bit(MCLK);
	hri_mclk_set_APBBMASK_USB_bit(MCLK);
}

void USB_DEVICE_INSTANCE_init(void)
{
     f3c:	b508      	push	{r3, lr}
	USB_DEVICE_INSTANCE_CLOCK_init();
     f3e:	4b03      	ldr	r3, [pc, #12]	; (f4c <USB_DEVICE_INSTANCE_init+0x10>)
     f40:	4798      	blx	r3
	usb_d_init();
     f42:	4b03      	ldr	r3, [pc, #12]	; (f50 <USB_DEVICE_INSTANCE_init+0x14>)
     f44:	4798      	blx	r3
	USB_DEVICE_INSTANCE_PORT_init();
     f46:	4b03      	ldr	r3, [pc, #12]	; (f54 <USB_DEVICE_INSTANCE_init+0x18>)
     f48:	4798      	blx	r3
     f4a:	bd08      	pop	{r3, pc}
     f4c:	00000f19 	.word	0x00000f19
     f50:	00001845 	.word	0x00001845
     f54:	00000e91 	.word	0x00000e91

00000f58 <CAN_0_PORT_init>:
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     f58:	4b10      	ldr	r3, [pc, #64]	; (f9c <CAN_0_PORT_init+0x44>)
     f5a:	f893 20cd 	ldrb.w	r2, [r3, #205]	; 0xcd
	tmp &= ~PORT_PINCFG_PMUXEN;
     f5e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     f62:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     f66:	f883 20cd 	strb.w	r2, [r3, #205]	; 0xcd
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     f6a:	f893 20b6 	ldrb.w	r2, [r3, #182]	; 0xb6
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     f6e:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     f72:	f042 0270 	orr.w	r2, r2, #112	; 0x70
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     f76:	f883 20b6 	strb.w	r2, [r3, #182]	; 0xb6
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     f7a:	f893 20cc 	ldrb.w	r2, [r3, #204]	; 0xcc
	tmp &= ~PORT_PINCFG_PMUXEN;
     f7e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     f82:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     f86:	f883 20cc 	strb.w	r2, [r3, #204]	; 0xcc
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     f8a:	f893 20b6 	ldrb.w	r2, [r3, #182]	; 0xb6
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     f8e:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     f92:	f042 0207 	orr.w	r2, r2, #7
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     f96:	f883 20b6 	strb.w	r2, [r3, #182]	; 0xb6
     f9a:	4770      	bx	lr
     f9c:	41008000 	.word	0x41008000

00000fa0 <CAN_0_init>:
 * \brief CAN initialization function
 *
 * Enables CAN peripheral, clocks and initializes CAN driver
 */
void CAN_0_init(void)
{
     fa0:	b508      	push	{r3, lr}
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_CAN1;
     fa2:	4a08      	ldr	r2, [pc, #32]	; (fc4 <CAN_0_init+0x24>)
     fa4:	6913      	ldr	r3, [r2, #16]
     fa6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
     faa:	6113      	str	r3, [r2, #16]
     fac:	2242      	movs	r2, #66	; 0x42
     fae:	4b06      	ldr	r3, [pc, #24]	; (fc8 <CAN_0_init+0x28>)
     fb0:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
	hri_mclk_set_AHBMASK_CAN1_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, CAN1_GCLK_ID, CONF_GCLK_CAN1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
	can_async_init(&CAN_0, CAN1);
     fb4:	4905      	ldr	r1, [pc, #20]	; (fcc <CAN_0_init+0x2c>)
     fb6:	4806      	ldr	r0, [pc, #24]	; (fd0 <CAN_0_init+0x30>)
     fb8:	4b06      	ldr	r3, [pc, #24]	; (fd4 <CAN_0_init+0x34>)
     fba:	4798      	blx	r3
	CAN_0_PORT_init();
     fbc:	4b06      	ldr	r3, [pc, #24]	; (fd8 <CAN_0_init+0x38>)
     fbe:	4798      	blx	r3
     fc0:	bd08      	pop	{r3, pc}
     fc2:	bf00      	nop
     fc4:	40000800 	.word	0x40000800
     fc8:	40001c00 	.word	0x40001c00
     fcc:	42000400 	.word	0x42000400
     fd0:	200009ac 	.word	0x200009ac
     fd4:	00001241 	.word	0x00001241
     fd8:	00000f59 	.word	0x00000f59

00000fdc <system_init>:
}

void system_init(void)
{
     fdc:	b538      	push	{r3, r4, r5, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
     fde:	4b79      	ldr	r3, [pc, #484]	; (11c4 <system_init+0x1e8>)
     fe0:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     fe2:	4b79      	ldr	r3, [pc, #484]	; (11c8 <system_init+0x1ec>)
     fe4:	2280      	movs	r2, #128	; 0x80
     fe6:	619a      	str	r2, [r3, #24]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     fe8:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     fea:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     fee:	629a      	str	r2, [r3, #40]	; 0x28
     ff0:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
     ff4:	6299      	str	r1, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     ff6:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
	tmp &= ~PORT_PINCFG_PMUXEN;
     ffa:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     ffe:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    1002:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    1006:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    100a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    100e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    1012:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
    1016:	486d      	ldr	r0, [pc, #436]	; (11cc <system_init+0x1f0>)
    1018:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    101c:	f893 00dc 	ldrb.w	r0, [r3, #220]	; 0xdc
	tmp &= ~PORT_PINCFG_PMUXEN;
    1020:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1024:	f883 00dc 	strb.w	r0, [r3, #220]	; 0xdc
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    1028:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
    102c:	f8c3 0094 	str.w	r0, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    1030:	f8c3 0088 	str.w	r0, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    1034:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
    1038:	4865      	ldr	r0, [pc, #404]	; (11d0 <system_init+0x1f4>)
    103a:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    103e:	f893 00dd 	ldrb.w	r0, [r3, #221]	; 0xdd
	tmp &= ~PORT_PINCFG_PMUXEN;
    1042:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1046:	f883 00dd 	strb.w	r0, [r3, #221]	; 0xdd
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    104a:	2004      	movs	r0, #4
    104c:	f8c3 0104 	str.w	r0, [r3, #260]	; 0x104
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    1050:	4c60      	ldr	r4, [pc, #384]	; (11d4 <system_init+0x1f8>)
    1052:	f8c3 4128 	str.w	r4, [r3, #296]	; 0x128
    1056:	4d60      	ldr	r5, [pc, #384]	; (11d8 <system_init+0x1fc>)
    1058:	f8c3 5128 	str.w	r5, [r3, #296]	; 0x128
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    105c:	f8c3 0104 	str.w	r0, [r3, #260]	; 0x104
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
    1060:	f893 4142 	ldrb.w	r4, [r3, #322]	; 0x142
    1064:	4304      	orrs	r4, r0
    1066:	f883 4142 	strb.w	r4, [r3, #322]	; 0x142
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    106a:	f8c3 0118 	str.w	r0, [r3, #280]	; 0x118
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    106e:	f893 0142 	ldrb.w	r0, [r3, #322]	; 0x142
	tmp &= ~PORT_PINCFG_PMUXEN;
    1072:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1076:	f883 0142 	strb.w	r0, [r3, #322]	; 0x142
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    107a:	2008      	movs	r0, #8
    107c:	f8c3 0104 	str.w	r0, [r3, #260]	; 0x104
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    1080:	4c56      	ldr	r4, [pc, #344]	; (11dc <system_init+0x200>)
    1082:	f8c3 4128 	str.w	r4, [r3, #296]	; 0x128
    1086:	f8c3 5128 	str.w	r5, [r3, #296]	; 0x128
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    108a:	f8c3 0104 	str.w	r0, [r3, #260]	; 0x104
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
    108e:	f893 4143 	ldrb.w	r4, [r3, #323]	; 0x143
    1092:	f044 0404 	orr.w	r4, r4, #4
    1096:	f883 4143 	strb.w	r4, [r3, #323]	; 0x143
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    109a:	f8c3 0118 	str.w	r0, [r3, #280]	; 0x118
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    109e:	f893 0143 	ldrb.w	r0, [r3, #323]	; 0x143
	tmp &= ~PORT_PINCFG_PMUXEN;
    10a2:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    10a6:	f883 0143 	strb.w	r0, [r3, #323]	; 0x143
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    10aa:	f44f 5000 	mov.w	r0, #8192	; 0x2000
    10ae:	f8c3 0114 	str.w	r0, [r3, #276]	; 0x114
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    10b2:	f8c3 0108 	str.w	r0, [r3, #264]	; 0x108
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    10b6:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
    10ba:	f8c3 0128 	str.w	r0, [r3, #296]	; 0x128
    10be:	f8c3 1128 	str.w	r1, [r3, #296]	; 0x128
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    10c2:	f893 014d 	ldrb.w	r0, [r3, #333]	; 0x14d
	tmp &= ~PORT_PINCFG_PMUXEN;
    10c6:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    10ca:	f883 014d 	strb.w	r0, [r3, #333]	; 0x14d
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    10ce:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    10d2:	f8c3 0114 	str.w	r0, [r3, #276]	; 0x114
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    10d6:	f8c3 0108 	str.w	r0, [r3, #264]	; 0x108
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    10da:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
    10de:	f8c3 0128 	str.w	r0, [r3, #296]	; 0x128
    10e2:	f8c3 1128 	str.w	r1, [r3, #296]	; 0x128
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    10e6:	f893 014f 	ldrb.w	r0, [r3, #335]	; 0x14f
	tmp &= ~PORT_PINCFG_PMUXEN;
    10ea:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    10ee:	f883 014f 	strb.w	r0, [r3, #335]	; 0x14f
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    10f2:	f44f 2080 	mov.w	r0, #262144	; 0x40000
    10f6:	f8c3 0114 	str.w	r0, [r3, #276]	; 0x114
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    10fa:	f8c3 0108 	str.w	r0, [r3, #264]	; 0x108
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    10fe:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
    1102:	4837      	ldr	r0, [pc, #220]	; (11e0 <system_init+0x204>)
    1104:	f8c3 0128 	str.w	r0, [r3, #296]	; 0x128
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1108:	f893 0152 	ldrb.w	r0, [r3, #338]	; 0x152
	tmp &= ~PORT_PINCFG_PMUXEN;
    110c:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1110:	f883 0152 	strb.w	r0, [r3, #338]	; 0x152
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    1114:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    1118:	4832      	ldr	r0, [pc, #200]	; (11e4 <system_init+0x208>)
    111a:	f8c3 0128 	str.w	r0, [r3, #296]	; 0x128
    111e:	4832      	ldr	r0, [pc, #200]	; (11e8 <system_init+0x20c>)
    1120:	f8c3 0128 	str.w	r0, [r3, #296]	; 0x128
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    1124:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
    1128:	f893 015e 	ldrb.w	r0, [r3, #350]	; 0x15e
    112c:	f040 0004 	orr.w	r0, r0, #4
    1130:	f883 015e 	strb.w	r0, [r3, #350]	; 0x15e
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    1134:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1138:	f893 215e 	ldrb.w	r2, [r3, #350]	; 0x15e
	tmp &= ~PORT_PINCFG_PMUXEN;
    113c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1140:	f883 215e 	strb.w	r2, [r3, #350]	; 0x15e
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    1144:	f44f 6280 	mov.w	r2, #1024	; 0x400
    1148:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    114c:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    1150:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    1154:	f8c3 21a8 	str.w	r2, [r3, #424]	; 0x1a8
    1158:	f8c3 11a8 	str.w	r1, [r3, #424]	; 0x1a8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    115c:	f893 21ca 	ldrb.w	r2, [r3, #458]	; 0x1ca
	tmp &= ~PORT_PINCFG_PMUXEN;
    1160:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1164:	f883 21ca 	strb.w	r2, [r3, #458]	; 0x1ca
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    1168:	f44f 6200 	mov.w	r2, #2048	; 0x800
    116c:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    1170:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    1174:	4c1d      	ldr	r4, [pc, #116]	; (11ec <system_init+0x210>)
    1176:	f8c3 41a8 	str.w	r4, [r3, #424]	; 0x1a8
    117a:	f8c3 11a8 	str.w	r1, [r3, #424]	; 0x1a8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    117e:	f893 21cb 	ldrb.w	r2, [r3, #459]	; 0x1cb
	tmp &= ~PORT_PINCFG_PMUXEN;
    1182:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1186:	f883 21cb 	strb.w	r2, [r3, #459]	; 0x1cb
	// Set pin direction to output
	gpio_set_pin_direction(OLED_LED3, GPIO_DIRECTION_OUT);

	gpio_set_pin_function(OLED_LED3, GPIO_PIN_FUNCTION_OFF);

	EVENT_SYSTEM_0_init();
    118a:	4b19      	ldr	r3, [pc, #100]	; (11f0 <system_init+0x214>)
    118c:	4798      	blx	r3
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_RTC;
    118e:	6963      	ldr	r3, [r4, #20]
    1190:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    1194:	6163      	str	r3, [r4, #20]
	timer_init(&TIMER_0, RTC, _rtc_get_timer());
    1196:	4b17      	ldr	r3, [pc, #92]	; (11f4 <system_init+0x218>)
    1198:	4798      	blx	r3
    119a:	4602      	mov	r2, r0
    119c:	4916      	ldr	r1, [pc, #88]	; (11f8 <system_init+0x21c>)
    119e:	4817      	ldr	r0, [pc, #92]	; (11fc <system_init+0x220>)
    11a0:	4b17      	ldr	r3, [pc, #92]	; (1200 <system_init+0x224>)
    11a2:	4798      	blx	r3

	TIMER_0_init();

	SPI_LTC2983_init();
    11a4:	4b17      	ldr	r3, [pc, #92]	; (1204 <system_init+0x228>)
    11a6:	4798      	blx	r3

	I2C_1_init();
    11a8:	4b17      	ldr	r3, [pc, #92]	; (1208 <system_init+0x22c>)
    11aa:	4798      	blx	r3

	I2C_EEPROM_init();
    11ac:	4b17      	ldr	r3, [pc, #92]	; (120c <system_init+0x230>)
    11ae:	4798      	blx	r3

	SPI_Holt_init();
    11b0:	4b17      	ldr	r3, [pc, #92]	; (1210 <system_init+0x234>)
    11b2:	4798      	blx	r3

	delay_driver_init();
    11b4:	4b17      	ldr	r3, [pc, #92]	; (1214 <system_init+0x238>)
    11b6:	4798      	blx	r3

	USB_DEVICE_INSTANCE_init();
    11b8:	4b17      	ldr	r3, [pc, #92]	; (1218 <system_init+0x23c>)
    11ba:	4798      	blx	r3
	CAN_0_init();
    11bc:	4b17      	ldr	r3, [pc, #92]	; (121c <system_init+0x240>)
    11be:	4798      	blx	r3
    11c0:	bd38      	pop	{r3, r4, r5, pc}
    11c2:	bf00      	nop
    11c4:	00001dd9 	.word	0x00001dd9
    11c8:	41008000 	.word	0x41008000
    11cc:	c0001000 	.word	0xc0001000
    11d0:	c0002000 	.word	0xc0002000
    11d4:	40020004 	.word	0x40020004
    11d8:	c0020000 	.word	0xc0020000
    11dc:	40020008 	.word	0x40020008
    11e0:	c0000004 	.word	0xc0000004
    11e4:	40020000 	.word	0x40020000
    11e8:	c0024000 	.word	0xc0024000
    11ec:	40000800 	.word	0x40000800
    11f0:	00000af9 	.word	0x00000af9
    11f4:	0000210d 	.word	0x0000210d
    11f8:	40002400 	.word	0x40002400
    11fc:	20000a84 	.word	0x20000a84
    1200:	000015b5 	.word	0x000015b5
    1204:	00000bf1 	.word	0x00000bf1
    1208:	00000c9d 	.word	0x00000c9d
    120c:	00000d49 	.word	0x00000d49
    1210:	00000e55 	.word	0x00000e55
    1214:	00000e7d 	.word	0x00000e7d
    1218:	00000f3d 	.word	0x00000f3d
    121c:	00000fa1 	.word	0x00000fa1

00001220 <can_tx_done>:

/**
 * \internal Callback of CAN Message Write finished
 */
static void can_tx_done(struct _can_async_device *dev)
{
    1220:	b508      	push	{r3, lr}
	struct can_async_descriptor *const descr = CONTAINER_OF(dev, struct can_async_descriptor, dev);

	if (descr->cb.tx_done) {
    1222:	69c3      	ldr	r3, [r0, #28]
    1224:	b103      	cbz	r3, 1228 <can_tx_done+0x8>
		descr->cb.tx_done(descr);
    1226:	4798      	blx	r3
    1228:	bd08      	pop	{r3, pc}

0000122a <can_rx_done>:

/**
 * \internal Callback of CAN Message Read finished
 */
static void can_rx_done(struct _can_async_device *dev)
{
    122a:	b508      	push	{r3, lr}
	struct can_async_descriptor *const descr = CONTAINER_OF(dev, struct can_async_descriptor, dev);

	if (descr->cb.rx_done) {
    122c:	6a03      	ldr	r3, [r0, #32]
    122e:	b103      	cbz	r3, 1232 <can_rx_done+0x8>
		descr->cb.rx_done(descr);
    1230:	4798      	blx	r3
    1232:	bd08      	pop	{r3, pc}

00001234 <can_irq_handler>:

/**
 * \internal Callback of CAN Interrupt
 */
static void can_irq_handler(struct _can_async_device *dev, enum can_async_interrupt_type type)
{
    1234:	b508      	push	{r3, lr}
	struct can_async_descriptor *const descr = CONTAINER_OF(dev, struct can_async_descriptor, dev);

	if (descr->cb.irq_handler) {
    1236:	6a43      	ldr	r3, [r0, #36]	; 0x24
    1238:	b103      	cbz	r3, 123c <can_irq_handler+0x8>
		descr->cb.irq_handler(descr, type);
    123a:	4798      	blx	r3
    123c:	bd08      	pop	{r3, pc}
	...

00001240 <can_async_init>:
{
    1240:	b538      	push	{r3, r4, r5, lr}
    1242:	460d      	mov	r5, r1
	ASSERT(descr && hw);
    1244:	4604      	mov	r4, r0
    1246:	b1a0      	cbz	r0, 1272 <can_async_init+0x32>
    1248:	1c08      	adds	r0, r1, #0
    124a:	bf18      	it	ne
    124c:	2001      	movne	r0, #1
    124e:	2241      	movs	r2, #65	; 0x41
    1250:	4909      	ldr	r1, [pc, #36]	; (1278 <can_async_init+0x38>)
    1252:	4b0a      	ldr	r3, [pc, #40]	; (127c <can_async_init+0x3c>)
    1254:	4798      	blx	r3
	rc = _can_async_init(&descr->dev, hw);
    1256:	4629      	mov	r1, r5
    1258:	4620      	mov	r0, r4
    125a:	4b09      	ldr	r3, [pc, #36]	; (1280 <can_async_init+0x40>)
    125c:	4798      	blx	r3
	if (rc) {
    125e:	4603      	mov	r3, r0
    1260:	b928      	cbnz	r0, 126e <can_async_init+0x2e>
	descr->dev.cb.tx_done     = can_tx_done;
    1262:	4a08      	ldr	r2, [pc, #32]	; (1284 <can_async_init+0x44>)
    1264:	6062      	str	r2, [r4, #4]
	descr->dev.cb.rx_done     = can_rx_done;
    1266:	4a08      	ldr	r2, [pc, #32]	; (1288 <can_async_init+0x48>)
    1268:	60a2      	str	r2, [r4, #8]
	descr->dev.cb.irq_handler = can_irq_handler;
    126a:	4a08      	ldr	r2, [pc, #32]	; (128c <can_async_init+0x4c>)
    126c:	60e2      	str	r2, [r4, #12]
}
    126e:	4618      	mov	r0, r3
    1270:	bd38      	pop	{r3, r4, r5, pc}
    1272:	2000      	movs	r0, #0
    1274:	e7eb      	b.n	124e <can_async_init+0xe>
    1276:	bf00      	nop
    1278:	00005068 	.word	0x00005068
    127c:	00001b91 	.word	0x00001b91
    1280:	00001c39 	.word	0x00001c39
    1284:	00001221 	.word	0x00001221
    1288:	0000122b 	.word	0x0000122b
    128c:	00001235 	.word	0x00001235

00001290 <delay_init>:

/**
 * \brief Initialize Delay driver
 */
void delay_init(void *const hw)
{
    1290:	b508      	push	{r3, lr}
	_delay_init(hardware = hw);
    1292:	4b02      	ldr	r3, [pc, #8]	; (129c <delay_init+0xc>)
    1294:	6018      	str	r0, [r3, #0]
    1296:	4b02      	ldr	r3, [pc, #8]	; (12a0 <delay_init+0x10>)
    1298:	4798      	blx	r3
    129a:	bd08      	pop	{r3, pc}
    129c:	20000644 	.word	0x20000644
    12a0:	000029ed 	.word	0x000029ed

000012a4 <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
    12a4:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
    12a6:	4b04      	ldr	r3, [pc, #16]	; (12b8 <delay_ms+0x14>)
    12a8:	681c      	ldr	r4, [r3, #0]
    12aa:	4b04      	ldr	r3, [pc, #16]	; (12bc <delay_ms+0x18>)
    12ac:	4798      	blx	r3
    12ae:	4601      	mov	r1, r0
    12b0:	4620      	mov	r0, r4
    12b2:	4b03      	ldr	r3, [pc, #12]	; (12c0 <delay_ms+0x1c>)
    12b4:	4798      	blx	r3
    12b6:	bd10      	pop	{r4, pc}
    12b8:	20000644 	.word	0x20000644
    12bc:	00001dcd 	.word	0x00001dcd
    12c0:	00002a01 	.word	0x00002a01

000012c4 <event_system_init>:

/**
 * \brief Initialize event system.
 */
int32_t event_system_init(void)
{
    12c4:	b508      	push	{r3, lr}
	return _event_system_init();
    12c6:	4b01      	ldr	r3, [pc, #4]	; (12cc <event_system_init+0x8>)
    12c8:	4798      	blx	r3
}
    12ca:	bd08      	pop	{r3, pc}
    12cc:	00001e41 	.word	0x00001e41

000012d0 <i2c_tx_complete>:

/**
 * \brief Callback function for tx complete
 */
static void i2c_tx_complete(struct _i2c_m_async_device *const i2c_dev)
{
    12d0:	b508      	push	{r3, lr}
	struct i2c_m_async_desc *i2c = CONTAINER_OF(i2c_dev, struct i2c_m_async_desc, device);

	if (!(i2c_dev->service.msg.flags & I2C_M_BUSY)) {
    12d2:	8843      	ldrh	r3, [r0, #2]
    12d4:	f413 7f80 	tst.w	r3, #256	; 0x100
    12d8:	d102      	bne.n	12e0 <i2c_tx_complete+0x10>
		if (i2c->i2c_cb.tx_complete) {
    12da:	6b43      	ldr	r3, [r0, #52]	; 0x34
    12dc:	b103      	cbz	r3, 12e0 <i2c_tx_complete+0x10>
			i2c->i2c_cb.tx_complete(i2c);
    12de:	4798      	blx	r3
    12e0:	bd08      	pop	{r3, pc}

000012e2 <i2c_rx_complete>:

/**
 * \brief Callback function for rx complete
 */
static void i2c_rx_complete(struct _i2c_m_async_device *const i2c_dev)
{
    12e2:	b508      	push	{r3, lr}
	struct i2c_m_async_desc *i2c = CONTAINER_OF(i2c_dev, struct i2c_m_async_desc, device);

	if (!(i2c_dev->service.msg.flags & I2C_M_BUSY)) {
    12e4:	8843      	ldrh	r3, [r0, #2]
    12e6:	f413 7f80 	tst.w	r3, #256	; 0x100
    12ea:	d102      	bne.n	12f2 <i2c_rx_complete+0x10>
		if (i2c->i2c_cb.rx_complete) {
    12ec:	6b83      	ldr	r3, [r0, #56]	; 0x38
    12ee:	b103      	cbz	r3, 12f2 <i2c_rx_complete+0x10>
			i2c->i2c_cb.rx_complete(i2c);
    12f0:	4798      	blx	r3
    12f2:	bd08      	pop	{r3, pc}

000012f4 <i2c_error>:
		}
	}
}

static void i2c_error(struct _i2c_m_async_device *const i2c_dev, int32_t error)
{
    12f4:	b508      	push	{r3, lr}
	struct i2c_m_async_desc *i2c = CONTAINER_OF(i2c_dev, struct i2c_m_async_desc, device);

	if (!(i2c_dev->service.msg.flags & I2C_M_BUSY)) {
    12f6:	8843      	ldrh	r3, [r0, #2]
    12f8:	f413 7f80 	tst.w	r3, #256	; 0x100
    12fc:	d102      	bne.n	1304 <i2c_error+0x10>
		if (i2c->i2c_cb.error) {
    12fe:	6b03      	ldr	r3, [r0, #48]	; 0x30
    1300:	b103      	cbz	r3, 1304 <i2c_error+0x10>
			i2c->i2c_cb.error(i2c, error);
    1302:	4798      	blx	r3
    1304:	bd08      	pop	{r3, pc}
	...

00001308 <i2c_m_async_write>:

/**
 * \brief Async version of I2C I/O write
 */
static int32_t i2c_m_async_write(struct io_descriptor *const io, const uint8_t *buf, const uint16_t n)
{
    1308:	b510      	push	{r4, lr}
    130a:	b084      	sub	sp, #16
    130c:	4614      	mov	r4, r2
	struct i2c_m_async_desc *i2c = CONTAINER_OF(io, struct i2c_m_async_desc, io);
	struct _i2c_m_msg        msg;
	int32_t                  ret;

	msg.addr   = i2c->slave_addr;
    130e:	8a83      	ldrh	r3, [r0, #20]
    1310:	f8ad 3004 	strh.w	r3, [sp, #4]
	msg.len    = n;
    1314:	9202      	str	r2, [sp, #8]
	msg.flags  = I2C_M_STOP;
    1316:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    131a:	f8ad 3006 	strh.w	r3, [sp, #6]
	msg.buffer = (uint8_t *)buf;
    131e:	9103      	str	r1, [sp, #12]

	/* start transfer then return */
	ret = _i2c_m_async_transfer(&i2c->device, &msg);
    1320:	a901      	add	r1, sp, #4
    1322:	3828      	subs	r0, #40	; 0x28
    1324:	4b03      	ldr	r3, [pc, #12]	; (1334 <i2c_m_async_write+0x2c>)
    1326:	4798      	blx	r3
		/* error occurred */
		return ret;
	}

	return (int32_t)n;
}
    1328:	2800      	cmp	r0, #0
    132a:	bf08      	it	eq
    132c:	4620      	moveq	r0, r4
    132e:	b004      	add	sp, #16
    1330:	bd10      	pop	{r4, pc}
    1332:	bf00      	nop
    1334:	00002591 	.word	0x00002591

00001338 <i2c_m_async_read>:
{
    1338:	b510      	push	{r4, lr}
    133a:	b084      	sub	sp, #16
    133c:	4614      	mov	r4, r2
	msg.addr   = i2c->slave_addr;
    133e:	8a83      	ldrh	r3, [r0, #20]
    1340:	f8ad 3004 	strh.w	r3, [sp, #4]
	msg.len    = n;
    1344:	9202      	str	r2, [sp, #8]
	msg.flags  = I2C_M_STOP | I2C_M_RD;
    1346:	f248 0301 	movw	r3, #32769	; 0x8001
    134a:	f8ad 3006 	strh.w	r3, [sp, #6]
	msg.buffer = buf;
    134e:	9103      	str	r1, [sp, #12]
	ret = _i2c_m_async_transfer(&i2c->device, &msg);
    1350:	a901      	add	r1, sp, #4
    1352:	3828      	subs	r0, #40	; 0x28
    1354:	4b03      	ldr	r3, [pc, #12]	; (1364 <i2c_m_async_read+0x2c>)
    1356:	4798      	blx	r3
}
    1358:	2800      	cmp	r0, #0
    135a:	bf08      	it	eq
    135c:	4620      	moveq	r0, r4
    135e:	b004      	add	sp, #16
    1360:	bd10      	pop	{r4, pc}
    1362:	bf00      	nop
    1364:	00002591 	.word	0x00002591

00001368 <i2c_m_async_init>:

/**
 * \brief Async version of i2c initialize
 */
int32_t i2c_m_async_init(struct i2c_m_async_desc *const i2c, void *const hw)
{
    1368:	b570      	push	{r4, r5, r6, lr}
    136a:	460d      	mov	r5, r1
	int32_t init_status;
	ASSERT(i2c);
    136c:	4604      	mov	r4, r0
    136e:	2289      	movs	r2, #137	; 0x89
    1370:	490f      	ldr	r1, [pc, #60]	; (13b0 <i2c_m_async_init+0x48>)
    1372:	3000      	adds	r0, #0
    1374:	bf18      	it	ne
    1376:	2001      	movne	r0, #1
    1378:	4b0e      	ldr	r3, [pc, #56]	; (13b4 <i2c_m_async_init+0x4c>)
    137a:	4798      	blx	r3

	init_status = _i2c_m_async_init(&i2c->device, hw);
    137c:	4629      	mov	r1, r5
    137e:	4620      	mov	r0, r4
    1380:	4b0d      	ldr	r3, [pc, #52]	; (13b8 <i2c_m_async_init+0x50>)
    1382:	4798      	blx	r3
	if (init_status) {
    1384:	4605      	mov	r5, r0
    1386:	b108      	cbz	r0, 138c <i2c_m_async_init+0x24>
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_TX_COMPLETE, (FUNC_PTR)i2c_tx_complete);
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_RX_COMPLETE, (FUNC_PTR)i2c_rx_complete);
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_ERROR, (FUNC_PTR)i2c_error);

	return ERR_NONE;
}
    1388:	4628      	mov	r0, r5
    138a:	bd70      	pop	{r4, r5, r6, pc}
	i2c->io.read  = i2c_m_async_read;
    138c:	4b0b      	ldr	r3, [pc, #44]	; (13bc <i2c_m_async_init+0x54>)
    138e:	62e3      	str	r3, [r4, #44]	; 0x2c
	i2c->io.write = i2c_m_async_write;
    1390:	4b0b      	ldr	r3, [pc, #44]	; (13c0 <i2c_m_async_init+0x58>)
    1392:	62a3      	str	r3, [r4, #40]	; 0x28
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_TX_COMPLETE, (FUNC_PTR)i2c_tx_complete);
    1394:	4a0b      	ldr	r2, [pc, #44]	; (13c4 <i2c_m_async_init+0x5c>)
    1396:	2101      	movs	r1, #1
    1398:	4620      	mov	r0, r4
    139a:	4e0b      	ldr	r6, [pc, #44]	; (13c8 <i2c_m_async_init+0x60>)
    139c:	47b0      	blx	r6
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_RX_COMPLETE, (FUNC_PTR)i2c_rx_complete);
    139e:	4a0b      	ldr	r2, [pc, #44]	; (13cc <i2c_m_async_init+0x64>)
    13a0:	2102      	movs	r1, #2
    13a2:	4620      	mov	r0, r4
    13a4:	47b0      	blx	r6
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_ERROR, (FUNC_PTR)i2c_error);
    13a6:	4a0a      	ldr	r2, [pc, #40]	; (13d0 <i2c_m_async_init+0x68>)
    13a8:	2100      	movs	r1, #0
    13aa:	4620      	mov	r0, r4
    13ac:	47b0      	blx	r6
	return ERR_NONE;
    13ae:	e7eb      	b.n	1388 <i2c_m_async_init+0x20>
    13b0:	00005084 	.word	0x00005084
    13b4:	00001b91 	.word	0x00001b91
    13b8:	00002511 	.word	0x00002511
    13bc:	00001339 	.word	0x00001339
    13c0:	00001309 	.word	0x00001309
    13c4:	000012d1 	.word	0x000012d1
    13c8:	000026c1 	.word	0x000026c1
    13cc:	000012e3 	.word	0x000012e3
    13d0:	000012f5 	.word	0x000012f5

000013d4 <spi_m_sync_init>:
	ASSERT(spi);
	spi->func = (struct _spi_m_sync_hpl_interface *)func;
}

int32_t spi_m_sync_init(struct spi_m_sync_descriptor *spi, void *const hw)
{
    13d4:	b538      	push	{r3, r4, r5, lr}
    13d6:	460d      	mov	r5, r1
	int32_t rc = 0;
	ASSERT(spi && hw);
    13d8:	4604      	mov	r4, r0
    13da:	b1b8      	cbz	r0, 140c <spi_m_sync_init+0x38>
    13dc:	1c08      	adds	r0, r1, #0
    13de:	bf18      	it	ne
    13e0:	2001      	movne	r0, #1
    13e2:	2240      	movs	r2, #64	; 0x40
    13e4:	490a      	ldr	r1, [pc, #40]	; (1410 <spi_m_sync_init+0x3c>)
    13e6:	4b0b      	ldr	r3, [pc, #44]	; (1414 <spi_m_sync_init+0x40>)
    13e8:	4798      	blx	r3
	spi->dev.prvt = (void *)hw;
    13ea:	4620      	mov	r0, r4
    13ec:	f840 5f04 	str.w	r5, [r0, #4]!
	rc            = _spi_m_sync_init(&spi->dev, hw);
    13f0:	4629      	mov	r1, r5
    13f2:	4b09      	ldr	r3, [pc, #36]	; (1418 <spi_m_sync_init+0x44>)
    13f4:	4798      	blx	r3

	if (rc < 0) {
    13f6:	2800      	cmp	r0, #0
    13f8:	db07      	blt.n	140a <spi_m_sync_init+0x36>
		return rc;
	}

	spi->flags    = SPI_DEACTIVATE_NEXT;
    13fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    13fe:	82a3      	strh	r3, [r4, #20]
	spi->io.read  = _spi_m_sync_io_read;
    1400:	4b06      	ldr	r3, [pc, #24]	; (141c <spi_m_sync_init+0x48>)
    1402:	6123      	str	r3, [r4, #16]
	spi->io.write = _spi_m_sync_io_write;
    1404:	4b06      	ldr	r3, [pc, #24]	; (1420 <spi_m_sync_init+0x4c>)
    1406:	60e3      	str	r3, [r4, #12]

	return ERR_NONE;
    1408:	2000      	movs	r0, #0
}
    140a:	bd38      	pop	{r3, r4, r5, pc}
    140c:	2000      	movs	r0, #0
    140e:	e7e8      	b.n	13e2 <spi_m_sync_init+0xe>
    1410:	000050a4 	.word	0x000050a4
    1414:	00001b91 	.word	0x00001b91
    1418:	0000277d 	.word	0x0000277d
    141c:	000014a1 	.word	0x000014a1
    1420:	00001465 	.word	0x00001465

00001424 <spi_m_sync_transfer>:

	return spi_m_sync_transfer(spi, &xfer);
}

int32_t spi_m_sync_transfer(struct spi_m_sync_descriptor *spi, const struct spi_xfer *p_xfer)
{
    1424:	b530      	push	{r4, r5, lr}
    1426:	b085      	sub	sp, #20
    1428:	460c      	mov	r4, r1
	struct spi_msg msg;

	ASSERT(spi && p_xfer);
    142a:	4605      	mov	r5, r0
    142c:	b190      	cbz	r0, 1454 <spi_m_sync_transfer+0x30>
    142e:	1c08      	adds	r0, r1, #0
    1430:	bf18      	it	ne
    1432:	2001      	movne	r0, #1
    1434:	22b3      	movs	r2, #179	; 0xb3
    1436:	4908      	ldr	r1, [pc, #32]	; (1458 <spi_m_sync_transfer+0x34>)
    1438:	4b08      	ldr	r3, [pc, #32]	; (145c <spi_m_sync_transfer+0x38>)
    143a:	4798      	blx	r3

	msg.txbuf = p_xfer->txbuf;
    143c:	6823      	ldr	r3, [r4, #0]
    143e:	9301      	str	r3, [sp, #4]
	msg.rxbuf = p_xfer->rxbuf;
    1440:	6863      	ldr	r3, [r4, #4]
    1442:	9302      	str	r3, [sp, #8]
	msg.size  = p_xfer->size;
    1444:	68a3      	ldr	r3, [r4, #8]
    1446:	9303      	str	r3, [sp, #12]
	return _spi_m_sync_trans(&spi->dev, &msg);
    1448:	a901      	add	r1, sp, #4
    144a:	1d28      	adds	r0, r5, #4
    144c:	4b04      	ldr	r3, [pc, #16]	; (1460 <spi_m_sync_transfer+0x3c>)
    144e:	4798      	blx	r3
}
    1450:	b005      	add	sp, #20
    1452:	bd30      	pop	{r4, r5, pc}
    1454:	2000      	movs	r0, #0
    1456:	e7ed      	b.n	1434 <spi_m_sync_transfer+0x10>
    1458:	000050a4 	.word	0x000050a4
    145c:	00001b91 	.word	0x00001b91
    1460:	0000290d 	.word	0x0000290d

00001464 <_spi_m_sync_io_write>:
{
    1464:	b570      	push	{r4, r5, r6, lr}
    1466:	b084      	sub	sp, #16
    1468:	460e      	mov	r6, r1
    146a:	4615      	mov	r5, r2
	ASSERT(io);
    146c:	4604      	mov	r4, r0
    146e:	22a3      	movs	r2, #163	; 0xa3
    1470:	4908      	ldr	r1, [pc, #32]	; (1494 <_spi_m_sync_io_write+0x30>)
    1472:	3000      	adds	r0, #0
    1474:	bf18      	it	ne
    1476:	2001      	movne	r0, #1
    1478:	4b07      	ldr	r3, [pc, #28]	; (1498 <_spi_m_sync_io_write+0x34>)
    147a:	4798      	blx	r3
	xfer.rxbuf = 0;
    147c:	2300      	movs	r3, #0
    147e:	9302      	str	r3, [sp, #8]
	xfer.txbuf = (uint8_t *)buf;
    1480:	9601      	str	r6, [sp, #4]
	xfer.size  = length;
    1482:	9503      	str	r5, [sp, #12]
	return spi_m_sync_transfer(spi, &xfer);
    1484:	a901      	add	r1, sp, #4
    1486:	f1a4 000c 	sub.w	r0, r4, #12
    148a:	4b04      	ldr	r3, [pc, #16]	; (149c <_spi_m_sync_io_write+0x38>)
    148c:	4798      	blx	r3
}
    148e:	b004      	add	sp, #16
    1490:	bd70      	pop	{r4, r5, r6, pc}
    1492:	bf00      	nop
    1494:	000050a4 	.word	0x000050a4
    1498:	00001b91 	.word	0x00001b91
    149c:	00001425 	.word	0x00001425

000014a0 <_spi_m_sync_io_read>:
{
    14a0:	b570      	push	{r4, r5, r6, lr}
    14a2:	b084      	sub	sp, #16
    14a4:	460e      	mov	r6, r1
    14a6:	4615      	mov	r5, r2
	ASSERT(io);
    14a8:	4604      	mov	r4, r0
    14aa:	2287      	movs	r2, #135	; 0x87
    14ac:	4908      	ldr	r1, [pc, #32]	; (14d0 <_spi_m_sync_io_read+0x30>)
    14ae:	3000      	adds	r0, #0
    14b0:	bf18      	it	ne
    14b2:	2001      	movne	r0, #1
    14b4:	4b07      	ldr	r3, [pc, #28]	; (14d4 <_spi_m_sync_io_read+0x34>)
    14b6:	4798      	blx	r3
	xfer.rxbuf = buf;
    14b8:	9602      	str	r6, [sp, #8]
	xfer.txbuf = 0;
    14ba:	2300      	movs	r3, #0
    14bc:	9301      	str	r3, [sp, #4]
	xfer.size  = length;
    14be:	9503      	str	r5, [sp, #12]
	return spi_m_sync_transfer(spi, &xfer);
    14c0:	a901      	add	r1, sp, #4
    14c2:	f1a4 000c 	sub.w	r0, r4, #12
    14c6:	4b04      	ldr	r3, [pc, #16]	; (14d8 <_spi_m_sync_io_read+0x38>)
    14c8:	4798      	blx	r3
}
    14ca:	b004      	add	sp, #16
    14cc:	bd70      	pop	{r4, r5, r6, pc}
    14ce:	bf00      	nop
    14d0:	000050a4 	.word	0x000050a4
    14d4:	00001b91 	.word	0x00001b91
    14d8:	00001425 	.word	0x00001425

000014dc <timer_add_timer_task>:
 * \param[in] head The pointer to the head of timer task list
 * \param[in] task The pointer to task to add
 * \param[in] time Current timer time
 */
static void timer_add_timer_task(struct list_descriptor *list, struct timer_task *const new_task, const uint32_t time)
{
    14dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    14de:	4684      	mov	ip, r0
 * \return A pointer to the head of the given list or NULL if the list is
 * empty
 */
static inline void *list_get_head(const struct list_descriptor *const list)
{
	return (void *)list->head;
    14e0:	6807      	ldr	r7, [r0, #0]
	struct timer_task *it, *prev = NULL, *head = (struct timer_task *)list_get_head(list);

	if (!head) {
    14e2:	b12f      	cbz	r7, 14f0 <timer_add_timer_task+0x14>
		if (it->time_label <= time) {
			time_left = it->interval - (time - it->time_label);
		} else {
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
		}
		if (time_left >= new_task->interval)
    14e4:	688d      	ldr	r5, [r1, #8]
    14e6:	463c      	mov	r4, r7
    14e8:	2600      	movs	r6, #0
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
    14ea:	f1c2 0e01 	rsb	lr, r2, #1
    14ee:	e00b      	b.n	1508 <timer_add_timer_task+0x2c>
		list_insert_as_head(list, new_task);
    14f0:	4b0e      	ldr	r3, [pc, #56]	; (152c <timer_add_timer_task+0x50>)
    14f2:	4798      	blx	r3
		return;
    14f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
    14f6:	4473      	add	r3, lr
    14f8:	68a0      	ldr	r0, [r4, #8]
    14fa:	4403      	add	r3, r0
		if (time_left >= new_task->interval)
    14fc:	42ab      	cmp	r3, r5
    14fe:	d20a      	bcs.n	1516 <timer_add_timer_task+0x3a>
 * \return A pointer to the next list element or NULL if there is not next
 * element
 */
static inline void *list_get_next_element(const void *const element)
{
	return element ? ((struct list_element *)element)->next : NULL;
    1500:	6823      	ldr	r3, [r4, #0]
    1502:	4626      	mov	r6, r4
	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
    1504:	b153      	cbz	r3, 151c <timer_add_timer_task+0x40>
    1506:	461c      	mov	r4, r3
		if (it->time_label <= time) {
    1508:	6863      	ldr	r3, [r4, #4]
    150a:	4293      	cmp	r3, r2
    150c:	d8f3      	bhi.n	14f6 <timer_add_timer_task+0x1a>
			time_left = it->interval - (time - it->time_label);
    150e:	68a0      	ldr	r0, [r4, #8]
    1510:	4403      	add	r3, r0
    1512:	1a9b      	subs	r3, r3, r2
    1514:	e7f2      	b.n	14fc <timer_add_timer_task+0x20>
			break;
		prev = it;
	}

	if (it == head) {
    1516:	42a7      	cmp	r7, r4
    1518:	d004      	beq.n	1524 <timer_add_timer_task+0x48>
    151a:	4634      	mov	r4, r6
		list_insert_as_head(list, new_task);
	} else {
		list_insert_after(prev, new_task);
    151c:	4620      	mov	r0, r4
    151e:	4b04      	ldr	r3, [pc, #16]	; (1530 <timer_add_timer_task+0x54>)
    1520:	4798      	blx	r3
    1522:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		list_insert_as_head(list, new_task);
    1524:	4660      	mov	r0, ip
    1526:	4b01      	ldr	r3, [pc, #4]	; (152c <timer_add_timer_task+0x50>)
    1528:	4798      	blx	r3
    152a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    152c:	00001bb9 	.word	0x00001bb9
    1530:	00001be5 	.word	0x00001be5

00001534 <timer_process_counted>:

/**
 * \internal Process interrupts
 */
static void timer_process_counted(struct _timer_device *device)
{
    1534:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return (void *)list->head;
    1538:	6944      	ldr	r4, [r0, #20]
	struct timer_descriptor *timer = CONTAINER_OF(device, struct timer_descriptor, device);
	struct timer_task *      it    = (struct timer_task *)list_get_head(&timer->tasks);
	uint32_t                 time  = ++timer->time;
    153a:	6907      	ldr	r7, [r0, #16]
    153c:	3701      	adds	r7, #1
    153e:	6107      	str	r7, [r0, #16]

	if ((timer->flags & TIMER_FLAG_QUEUE_IS_TAKEN) || (timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED)) {
    1540:	7e03      	ldrb	r3, [r0, #24]
    1542:	f013 0f01 	tst.w	r3, #1
    1546:	d113      	bne.n	1570 <timer_process_counted+0x3c>
    1548:	7e03      	ldrb	r3, [r0, #24]
    154a:	f013 0f02 	tst.w	r3, #2
    154e:	d10f      	bne.n	1570 <timer_process_counted+0x3c>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
		return;
	}

	while (it && ((time - it->time_label) >= it->interval)) {
    1550:	b354      	cbz	r4, 15a8 <timer_process_counted+0x74>
    1552:	6863      	ldr	r3, [r4, #4]
    1554:	1afb      	subs	r3, r7, r3
    1556:	68a2      	ldr	r2, [r4, #8]
    1558:	4293      	cmp	r3, r2
    155a:	d307      	bcc.n	156c <timer_process_counted+0x38>
    155c:	4606      	mov	r6, r0
		struct timer_task *tmp = it;

		list_remove_head(&timer->tasks);
    155e:	f100 0814 	add.w	r8, r0, #20
    1562:	f8df 9048 	ldr.w	r9, [pc, #72]	; 15ac <timer_process_counted+0x78>
		if (TIMER_TASK_REPEAT == tmp->mode) {
			tmp->time_label = time;
			timer_add_timer_task(&timer->tasks, tmp, time);
    1566:	f8df a048 	ldr.w	sl, [pc, #72]	; 15b0 <timer_process_counted+0x7c>
    156a:	e012      	b.n	1592 <timer_process_counted+0x5e>
    156c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
    1570:	7e03      	ldrb	r3, [r0, #24]
    1572:	f043 0302 	orr.w	r3, r3, #2
    1576:	7603      	strb	r3, [r0, #24]
		return;
    1578:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    157c:	6975      	ldr	r5, [r6, #20]
		}
		it = (struct timer_task *)list_get_head(&timer->tasks);

		tmp->cb(tmp);
    157e:	68e3      	ldr	r3, [r4, #12]
    1580:	4620      	mov	r0, r4
    1582:	4798      	blx	r3
	while (it && ((time - it->time_label) >= it->interval)) {
    1584:	b185      	cbz	r5, 15a8 <timer_process_counted+0x74>
		it = (struct timer_task *)list_get_head(&timer->tasks);
    1586:	462c      	mov	r4, r5
	while (it && ((time - it->time_label) >= it->interval)) {
    1588:	686b      	ldr	r3, [r5, #4]
    158a:	1afb      	subs	r3, r7, r3
    158c:	68aa      	ldr	r2, [r5, #8]
    158e:	4293      	cmp	r3, r2
    1590:	d30a      	bcc.n	15a8 <timer_process_counted+0x74>
		list_remove_head(&timer->tasks);
    1592:	4640      	mov	r0, r8
    1594:	47c8      	blx	r9
		if (TIMER_TASK_REPEAT == tmp->mode) {
    1596:	7c23      	ldrb	r3, [r4, #16]
    1598:	2b01      	cmp	r3, #1
    159a:	d1ef      	bne.n	157c <timer_process_counted+0x48>
			tmp->time_label = time;
    159c:	6067      	str	r7, [r4, #4]
			timer_add_timer_task(&timer->tasks, tmp, time);
    159e:	463a      	mov	r2, r7
    15a0:	4621      	mov	r1, r4
    15a2:	4640      	mov	r0, r8
    15a4:	47d0      	blx	sl
    15a6:	e7e9      	b.n	157c <timer_process_counted+0x48>
    15a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    15ac:	00001c2d 	.word	0x00001c2d
    15b0:	000014dd 	.word	0x000014dd

000015b4 <timer_init>:
{
    15b4:	b538      	push	{r3, r4, r5, lr}
    15b6:	460d      	mov	r5, r1
	ASSERT(descr && hw);
    15b8:	4604      	mov	r4, r0
    15ba:	b178      	cbz	r0, 15dc <timer_init+0x28>
    15bc:	1c08      	adds	r0, r1, #0
    15be:	bf18      	it	ne
    15c0:	2001      	movne	r0, #1
    15c2:	223b      	movs	r2, #59	; 0x3b
    15c4:	4906      	ldr	r1, [pc, #24]	; (15e0 <timer_init+0x2c>)
    15c6:	4b07      	ldr	r3, [pc, #28]	; (15e4 <timer_init+0x30>)
    15c8:	4798      	blx	r3
	_timer_init(&descr->device, hw);
    15ca:	4629      	mov	r1, r5
    15cc:	4620      	mov	r0, r4
    15ce:	4b06      	ldr	r3, [pc, #24]	; (15e8 <timer_init+0x34>)
    15d0:	4798      	blx	r3
	descr->time                           = 0;
    15d2:	2000      	movs	r0, #0
    15d4:	6120      	str	r0, [r4, #16]
	descr->device.timer_cb.period_expired = timer_process_counted;
    15d6:	4b05      	ldr	r3, [pc, #20]	; (15ec <timer_init+0x38>)
    15d8:	6023      	str	r3, [r4, #0]
}
    15da:	bd38      	pop	{r3, r4, r5, pc}
    15dc:	2000      	movs	r0, #0
    15de:	e7f0      	b.n	15c2 <timer_init+0xe>
    15e0:	000050c0 	.word	0x000050c0
    15e4:	00001b91 	.word	0x00001b91
    15e8:	00002099 	.word	0x00002099
    15ec:	00001535 	.word	0x00001535

000015f0 <_usb_d_find_ep>:
 */
static int8_t _usb_d_find_ep(const uint8_t ep)
{
	int8_t i;
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    15f0:	4b0f      	ldr	r3, [pc, #60]	; (1630 <_usb_d_find_ep+0x40>)
    15f2:	7859      	ldrb	r1, [r3, #1]
    15f4:	4288      	cmp	r0, r1
    15f6:	d018      	beq.n	162a <_usb_d_find_ep+0x3a>
{
    15f8:	b430      	push	{r4, r5}
    15fa:	461a      	mov	r2, r3
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    15fc:	2300      	movs	r3, #0
			return i;
		}
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    15fe:	f000 050f 	and.w	r5, r0, #15
    1602:	e007      	b.n	1614 <_usb_d_find_ep+0x24>
    1604:	3301      	adds	r3, #1
    1606:	b25b      	sxtb	r3, r3
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    1608:	2b04      	cmp	r3, #4
    160a:	d009      	beq.n	1620 <_usb_d_find_ep+0x30>
    160c:	3220      	adds	r2, #32
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    160e:	7851      	ldrb	r1, [r2, #1]
    1610:	4281      	cmp	r1, r0
    1612:	d007      	beq.n	1624 <_usb_d_find_ep+0x34>
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
    1614:	7814      	ldrb	r4, [r2, #0]
    1616:	2c00      	cmp	r4, #0
    1618:	d1f4      	bne.n	1604 <_usb_d_find_ep+0x14>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    161a:	428d      	cmp	r5, r1
    161c:	d1f2      	bne.n	1604 <_usb_d_find_ep+0x14>
    161e:	e001      	b.n	1624 <_usb_d_find_ep+0x34>
			return i;
		}
	}
	return -1;
    1620:	f04f 33ff 	mov.w	r3, #4294967295
}
    1624:	4618      	mov	r0, r3
    1626:	bc30      	pop	{r4, r5}
    1628:	4770      	bx	lr
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    162a:	2300      	movs	r3, #0
}
    162c:	4618      	mov	r0, r3
    162e:	4770      	bx	lr
    1630:	20000648 	.word	0x20000648

00001634 <usb_d_dummy_cb_false>:
{
	(void)unused0;
	(void)unused1;
	(void)unused2;
	return false;
}
    1634:	2000      	movs	r0, #0
    1636:	4770      	bx	lr

00001638 <usb_d_cb_trans_more>:
 * \brief Callback invoked when request more data
 * \param[in] ep Endpoint number with transfer direction on bit 8.
 * \param[in] transfered Number of bytes transfered.
 */
static bool usb_d_cb_trans_more(const uint8_t ep, const uint32_t transfered)
{
    1638:	b538      	push	{r3, r4, r5, lr}
    163a:	4604      	mov	r4, r0
    163c:	460d      	mov	r5, r1
	int8_t           ep_index = _usb_d_find_ep(ep);
    163e:	4b09      	ldr	r3, [pc, #36]	; (1664 <usb_d_cb_trans_more+0x2c>)
    1640:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ept->xfer.hdr.state == USB_EP_S_X_DATA) {
    1642:	4b09      	ldr	r3, [pc, #36]	; (1668 <usb_d_cb_trans_more+0x30>)
    1644:	eb03 1340 	add.w	r3, r3, r0, lsl #5
    1648:	789b      	ldrb	r3, [r3, #2]
    164a:	2b03      	cmp	r3, #3
    164c:	d001      	beq.n	1652 <usb_d_cb_trans_more+0x1a>
		return ept->callbacks.more(ep, transfered);
	}
	return false;
    164e:	2000      	movs	r0, #0
}
    1650:	bd38      	pop	{r3, r4, r5, pc}
		return ept->callbacks.more(ep, transfered);
    1652:	4b05      	ldr	r3, [pc, #20]	; (1668 <usb_d_cb_trans_more+0x30>)
    1654:	eb03 1040 	add.w	r0, r3, r0, lsl #5
    1658:	6983      	ldr	r3, [r0, #24]
    165a:	4629      	mov	r1, r5
    165c:	4620      	mov	r0, r4
    165e:	4798      	blx	r3
    1660:	bd38      	pop	{r3, r4, r5, pc}
    1662:	bf00      	nop
    1664:	000015f1 	.word	0x000015f1
    1668:	20000648 	.word	0x20000648

0000166c <_usb_d_cb_trans_done>:

/**
 * Callback when USB transactions are finished.
 */
static void _usb_d_cb_trans_done(const uint8_t ep, const int32_t code, const uint32_t transferred)
{
    166c:	b5f0      	push	{r4, r5, r6, r7, lr}
    166e:	b085      	sub	sp, #20
    1670:	4606      	mov	r6, r0
    1672:	460d      	mov	r5, r1
    1674:	4617      	mov	r7, r2
	int8_t           ep_index = _usb_d_find_ep(ep);
    1676:	4b4d      	ldr	r3, [pc, #308]	; (17ac <_usb_d_cb_trans_done+0x140>)
    1678:	4798      	blx	r3
    167a:	4604      	mov	r4, r0
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];

	if (code == USB_TRANS_DONE) {
    167c:	2d00      	cmp	r5, #0
    167e:	d15b      	bne.n	1738 <_usb_d_cb_trans_done+0xcc>
		ept->xfer.hdr.status = USB_XFER_DONE;
    1680:	4a4b      	ldr	r2, [pc, #300]	; (17b0 <_usb_d_cb_trans_done+0x144>)
    1682:	0143      	lsls	r3, r0, #5
    1684:	18d1      	adds	r1, r2, r3
    1686:	2000      	movs	r0, #0
    1688:	70c8      	strb	r0, [r1, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    168a:	5cd3      	ldrb	r3, [r2, r3]
    168c:	b173      	cbz	r3, 16ac <_usb_d_cb_trans_done+0x40>
			usb_d_ctrl_trans_done(ept);
			return;
		}
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    168e:	4b48      	ldr	r3, [pc, #288]	; (17b0 <_usb_d_cb_trans_done+0x144>)
    1690:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    1694:	2201      	movs	r2, #1
    1696:	709a      	strb	r2, [r3, #2]
	} else {
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
		ept->xfer.hdr.status = USB_XFER_ERROR;
	}

	ept->callbacks.xfer(ep, (enum usb_xfer_code)ept->xfer.hdr.status, (void *)transferred);
    1698:	4845      	ldr	r0, [pc, #276]	; (17b0 <_usb_d_cb_trans_done+0x144>)
    169a:	eb00 1044 	add.w	r0, r0, r4, lsl #5
    169e:	69c3      	ldr	r3, [r0, #28]
    16a0:	463a      	mov	r2, r7
    16a2:	78c1      	ldrb	r1, [r0, #3]
    16a4:	4630      	mov	r0, r6
    16a6:	4798      	blx	r3
}
    16a8:	b005      	add	sp, #20
    16aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (state == USB_EP_S_X_DATA) {
    16ac:	788b      	ldrb	r3, [r1, #2]
    16ae:	2b03      	cmp	r3, #3
    16b0:	d00b      	beq.n	16ca <_usb_d_cb_trans_done+0x5e>
		ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DONE, ept->xfer.req);
    16b2:	483f      	ldr	r0, [pc, #252]	; (17b0 <_usb_d_cb_trans_done+0x144>)
    16b4:	eb00 1244 	add.w	r2, r0, r4, lsl #5
    16b8:	4614      	mov	r4, r2
    16ba:	69d3      	ldr	r3, [r2, #28]
    16bc:	320c      	adds	r2, #12
    16be:	2100      	movs	r1, #0
    16c0:	7860      	ldrb	r0, [r4, #1]
    16c2:	4798      	blx	r3
		ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    16c4:	2302      	movs	r3, #2
    16c6:	70a3      	strb	r3, [r4, #2]
    16c8:	e7ee      	b.n	16a8 <_usb_d_cb_trans_done+0x3c>
	bool    req_dir = USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN;
    16ca:	460b      	mov	r3, r1
    16cc:	f991 500c 	ldrsb.w	r5, [r1, #12]
		bool err = ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DATA, ept->xfer.req);
    16d0:	460a      	mov	r2, r1
    16d2:	69ce      	ldr	r6, [r1, #28]
    16d4:	320c      	adds	r2, #12
    16d6:	2101      	movs	r1, #1
    16d8:	7858      	ldrb	r0, [r3, #1]
    16da:	47b0      	blx	r6
		if (err) {
    16dc:	b1a0      	cbz	r0, 1708 <_usb_d_cb_trans_done+0x9c>
			ept->xfer.hdr.state  = USB_EP_S_HALTED;
    16de:	4b34      	ldr	r3, [pc, #208]	; (17b0 <_usb_d_cb_trans_done+0x144>)
    16e0:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    16e4:	2205      	movs	r2, #5
    16e6:	709a      	strb	r2, [r3, #2]
			ept->xfer.hdr.status = USB_XFER_HALT;
    16e8:	2202      	movs	r2, #2
    16ea:	70da      	strb	r2, [r3, #3]
			_usb_d_dev_ep_stall(req_dir ? ept->xfer.hdr.ep : (ept->xfer.hdr.ep | USB_EP_DIR), USB_EP_STALL_SET);
    16ec:	2d00      	cmp	r5, #0
    16ee:	db09      	blt.n	1704 <_usb_d_cb_trans_done+0x98>
    16f0:	482f      	ldr	r0, [pc, #188]	; (17b0 <_usb_d_cb_trans_done+0x144>)
    16f2:	eb00 1044 	add.w	r0, r0, r4, lsl #5
    16f6:	7840      	ldrb	r0, [r0, #1]
    16f8:	f040 0080 	orr.w	r0, r0, #128	; 0x80
    16fc:	2101      	movs	r1, #1
    16fe:	4b2d      	ldr	r3, [pc, #180]	; (17b4 <_usb_d_cb_trans_done+0x148>)
    1700:	4798      	blx	r3
    1702:	e7d1      	b.n	16a8 <_usb_d_cb_trans_done+0x3c>
    1704:	7858      	ldrb	r0, [r3, #1]
    1706:	e7f9      	b.n	16fc <_usb_d_cb_trans_done+0x90>
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    1708:	4829      	ldr	r0, [pc, #164]	; (17b0 <_usb_d_cb_trans_done+0x144>)
    170a:	eb00 1044 	add.w	r0, r0, r4, lsl #5
    170e:	2304      	movs	r3, #4
    1710:	7083      	strb	r3, [r0, #2]
			_usb_d_trans(ept->xfer.hdr.ep, !req_dir, NULL, 0, 1);
    1712:	7843      	ldrb	r3, [r0, #1]
	struct usb_d_transfer trans
    1714:	2200      	movs	r2, #0
    1716:	9201      	str	r2, [sp, #4]
    1718:	9202      	str	r2, [sp, #8]
    171a:	4295      	cmp	r5, r2
    171c:	bfac      	ite	ge
    171e:	f043 0380 	orrge.w	r3, r3, #128	; 0x80
    1722:	f003 030f 	andlt.w	r3, r3, #15
    1726:	f88d 300c 	strb.w	r3, [sp, #12]
    172a:	2301      	movs	r3, #1
    172c:	f88d 300d 	strb.w	r3, [sp, #13]
	return _usb_d_dev_ep_trans(&trans);
    1730:	a801      	add	r0, sp, #4
    1732:	4b21      	ldr	r3, [pc, #132]	; (17b8 <_usb_d_cb_trans_done+0x14c>)
    1734:	4798      	blx	r3
    1736:	e7b7      	b.n	16a8 <_usb_d_cb_trans_done+0x3c>
	} else if (code == USB_TRANS_STALL) {
    1738:	2d01      	cmp	r5, #1
    173a:	d00a      	beq.n	1752 <_usb_d_cb_trans_done+0xe6>
	} else if (code == USB_TRANS_ABORT) {
    173c:	2d02      	cmp	r5, #2
    173e:	d01c      	beq.n	177a <_usb_d_cb_trans_done+0x10e>
	} else if (code == USB_TRANS_RESET) {
    1740:	2d03      	cmp	r5, #3
    1742:	d02a      	beq.n	179a <_usb_d_cb_trans_done+0x12e>
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
    1744:	4b1a      	ldr	r3, [pc, #104]	; (17b0 <_usb_d_cb_trans_done+0x144>)
    1746:	eb03 1340 	add.w	r3, r3, r0, lsl #5
    174a:	2206      	movs	r2, #6
    174c:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_ERROR;
    174e:	70da      	strb	r2, [r3, #3]
    1750:	e7a2      	b.n	1698 <_usb_d_cb_trans_done+0x2c>
		ept->xfer.hdr.status = USB_XFER_HALT;
    1752:	4a17      	ldr	r2, [pc, #92]	; (17b0 <_usb_d_cb_trans_done+0x144>)
    1754:	0143      	lsls	r3, r0, #5
    1756:	18d1      	adds	r1, r2, r3
    1758:	2002      	movs	r0, #2
    175a:	70c8      	strb	r0, [r1, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    175c:	5cd3      	ldrb	r3, [r2, r3]
    175e:	b12b      	cbz	r3, 176c <_usb_d_cb_trans_done+0x100>
			ept->xfer.hdr.state = USB_EP_S_HALTED;
    1760:	4b13      	ldr	r3, [pc, #76]	; (17b0 <_usb_d_cb_trans_done+0x144>)
    1762:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    1766:	2205      	movs	r2, #5
    1768:	709a      	strb	r2, [r3, #2]
    176a:	e795      	b.n	1698 <_usb_d_cb_trans_done+0x2c>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    176c:	460b      	mov	r3, r1
    176e:	7098      	strb	r0, [r3, #2]
			_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    1770:	2100      	movs	r1, #0
    1772:	4630      	mov	r0, r6
    1774:	4b0f      	ldr	r3, [pc, #60]	; (17b4 <_usb_d_cb_trans_done+0x148>)
    1776:	4798      	blx	r3
    1778:	e78e      	b.n	1698 <_usb_d_cb_trans_done+0x2c>
		ept->xfer.hdr.status = USB_XFER_ABORT;
    177a:	4a0d      	ldr	r2, [pc, #52]	; (17b0 <_usb_d_cb_trans_done+0x144>)
    177c:	0143      	lsls	r3, r0, #5
    177e:	18d1      	adds	r1, r2, r3
    1780:	2004      	movs	r0, #4
    1782:	70c8      	strb	r0, [r1, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    1784:	5cd3      	ldrb	r3, [r2, r3]
    1786:	b12b      	cbz	r3, 1794 <_usb_d_cb_trans_done+0x128>
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    1788:	4b09      	ldr	r3, [pc, #36]	; (17b0 <_usb_d_cb_trans_done+0x144>)
    178a:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    178e:	2201      	movs	r2, #1
    1790:	709a      	strb	r2, [r3, #2]
    1792:	e781      	b.n	1698 <_usb_d_cb_trans_done+0x2c>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    1794:	2302      	movs	r3, #2
    1796:	708b      	strb	r3, [r1, #2]
			return;
    1798:	e786      	b.n	16a8 <_usb_d_cb_trans_done+0x3c>
		ept->xfer.hdr.state  = USB_EP_S_DISABLED;
    179a:	4b05      	ldr	r3, [pc, #20]	; (17b0 <_usb_d_cb_trans_done+0x144>)
    179c:	eb03 1340 	add.w	r3, r3, r0, lsl #5
    17a0:	2200      	movs	r2, #0
    17a2:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_RESET;
    17a4:	2205      	movs	r2, #5
    17a6:	70da      	strb	r2, [r3, #3]
    17a8:	e776      	b.n	1698 <_usb_d_cb_trans_done+0x2c>
    17aa:	bf00      	nop
    17ac:	000015f1 	.word	0x000015f1
    17b0:	20000648 	.word	0x20000648
    17b4:	000038dd 	.word	0x000038dd
    17b8:	00003a85 	.word	0x00003a85

000017bc <usb_d_cb_trans_setup>:
{
    17bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    17c0:	4605      	mov	r5, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
    17c2:	4b1c      	ldr	r3, [pc, #112]	; (1834 <usb_d_cb_trans_setup+0x78>)
    17c4:	4798      	blx	r3
    17c6:	4606      	mov	r6, r0
	uint8_t *        req      = ept->xfer.req;
    17c8:	4c1b      	ldr	r4, [pc, #108]	; (1838 <usb_d_cb_trans_setup+0x7c>)
    17ca:	eb04 1440 	add.w	r4, r4, r0, lsl #5
    17ce:	340c      	adds	r4, #12
	uint8_t n = _usb_d_dev_ep_read_req(ep, req);
    17d0:	4621      	mov	r1, r4
    17d2:	4628      	mov	r0, r5
    17d4:	4b19      	ldr	r3, [pc, #100]	; (183c <usb_d_cb_trans_setup+0x80>)
    17d6:	4798      	blx	r3
	if (n != 8) {
    17d8:	b2c0      	uxtb	r0, r0
    17da:	2808      	cmp	r0, #8
    17dc:	d009      	beq.n	17f2 <usb_d_cb_trans_setup+0x36>
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    17de:	2101      	movs	r1, #1
    17e0:	4628      	mov	r0, r5
    17e2:	4c17      	ldr	r4, [pc, #92]	; (1840 <usb_d_cb_trans_setup+0x84>)
    17e4:	47a0      	blx	r4
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    17e6:	2101      	movs	r1, #1
    17e8:	f045 0080 	orr.w	r0, r5, #128	; 0x80
    17ec:	47a0      	blx	r4
		return;
    17ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    17f2:	2100      	movs	r1, #0
    17f4:	4628      	mov	r0, r5
    17f6:	4f12      	ldr	r7, [pc, #72]	; (1840 <usb_d_cb_trans_setup+0x84>)
    17f8:	47b8      	blx	r7
	_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_CLR);
    17fa:	f045 0880 	orr.w	r8, r5, #128	; 0x80
    17fe:	2100      	movs	r1, #0
    1800:	4640      	mov	r0, r8
    1802:	47b8      	blx	r7
	ept->xfer.hdr.state = USB_EP_S_IDLE;
    1804:	4b0c      	ldr	r3, [pc, #48]	; (1838 <usb_d_cb_trans_setup+0x7c>)
    1806:	eb03 1346 	add.w	r3, r3, r6, lsl #5
    180a:	2201      	movs	r2, #1
    180c:	709a      	strb	r2, [r3, #2]
	if (!ept->callbacks.req(ep, req)) {
    180e:	695b      	ldr	r3, [r3, #20]
    1810:	4621      	mov	r1, r4
    1812:	4628      	mov	r0, r5
    1814:	4798      	blx	r3
    1816:	b108      	cbz	r0, 181c <usb_d_cb_trans_setup+0x60>
    1818:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ept->xfer.hdr.state = USB_EP_S_HALTED;
    181c:	4b06      	ldr	r3, [pc, #24]	; (1838 <usb_d_cb_trans_setup+0x7c>)
    181e:	eb03 1646 	add.w	r6, r3, r6, lsl #5
    1822:	2305      	movs	r3, #5
    1824:	70b3      	strb	r3, [r6, #2]
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    1826:	2101      	movs	r1, #1
    1828:	4628      	mov	r0, r5
    182a:	47b8      	blx	r7
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    182c:	2101      	movs	r1, #1
    182e:	4640      	mov	r0, r8
    1830:	47b8      	blx	r7
    1832:	e7f1      	b.n	1818 <usb_d_cb_trans_setup+0x5c>
    1834:	000015f1 	.word	0x000015f1
    1838:	20000648 	.word	0x20000648
    183c:	00003a25 	.word	0x00003a25
    1840:	000038dd 	.word	0x000038dd

00001844 <usb_d_init>:

int32_t usb_d_init(void)
{
    1844:	b510      	push	{r4, lr}
	int32_t rc = _usb_d_dev_init();
    1846:	4b11      	ldr	r3, [pc, #68]	; (188c <usb_d_init+0x48>)
    1848:	4798      	blx	r3
	uint8_t i;
	if (rc < 0) {
    184a:	2800      	cmp	r0, #0
    184c:	db1c      	blt.n	1888 <usb_d_init+0x44>
		return rc;
	}
	memset(usb_d_inst.ep, 0x00, sizeof(struct usb_d_ep) * CONF_USB_D_NUM_EP_SP);
    184e:	4c10      	ldr	r4, [pc, #64]	; (1890 <usb_d_init+0x4c>)
    1850:	2280      	movs	r2, #128	; 0x80
    1852:	2100      	movs	r1, #0
    1854:	4620      	mov	r0, r4
    1856:	4b0f      	ldr	r3, [pc, #60]	; (1894 <usb_d_init+0x50>)
    1858:	4798      	blx	r3
    185a:	4623      	mov	r3, r4
    185c:	f104 0080 	add.w	r0, r4, #128	; 0x80
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
    1860:	21ff      	movs	r1, #255	; 0xff
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    1862:	4a0d      	ldr	r2, [pc, #52]	; (1898 <usb_d_init+0x54>)
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
    1864:	7059      	strb	r1, [r3, #1]
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    1866:	615a      	str	r2, [r3, #20]
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
    1868:	619a      	str	r2, [r3, #24]
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
    186a:	61da      	str	r2, [r3, #28]
    186c:	3320      	adds	r3, #32
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    186e:	4283      	cmp	r3, r0
    1870:	d1f8      	bne.n	1864 <usb_d_init+0x20>
	}
	/* Handles device driver endpoint callbacks to build transfer. */
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_SETUP, (FUNC_PTR)usb_d_cb_trans_setup);
    1872:	490a      	ldr	r1, [pc, #40]	; (189c <usb_d_init+0x58>)
    1874:	2000      	movs	r0, #0
    1876:	4c0a      	ldr	r4, [pc, #40]	; (18a0 <usb_d_init+0x5c>)
    1878:	47a0      	blx	r4
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_MORE, (FUNC_PTR)usb_d_cb_trans_more);
    187a:	490a      	ldr	r1, [pc, #40]	; (18a4 <usb_d_init+0x60>)
    187c:	2001      	movs	r0, #1
    187e:	47a0      	blx	r4
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_DONE, (FUNC_PTR)_usb_d_cb_trans_done);
    1880:	4909      	ldr	r1, [pc, #36]	; (18a8 <usb_d_init+0x64>)
    1882:	2002      	movs	r0, #2
    1884:	47a0      	blx	r4
	return ERR_NONE;
    1886:	2000      	movs	r0, #0
}
    1888:	bd10      	pop	{r4, pc}
    188a:	bf00      	nop
    188c:	000032d1 	.word	0x000032d1
    1890:	20000648 	.word	0x20000648
    1894:	00004a51 	.word	0x00004a51
    1898:	00001635 	.word	0x00001635
    189c:	000017bd 	.word	0x000017bd
    18a0:	00003c89 	.word	0x00003c89
    18a4:	00001639 	.word	0x00001639
    18a8:	0000166d 	.word	0x0000166d

000018ac <usb_d_register_callback>:
{
	_usb_d_dev_deinit();
}

void usb_d_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
    18ac:	b508      	push	{r3, lr}
	/* Directly uses device driver callback. */
	_usb_d_dev_register_callback(type, func);
    18ae:	4b01      	ldr	r3, [pc, #4]	; (18b4 <usb_d_register_callback+0x8>)
    18b0:	4798      	blx	r3
    18b2:	bd08      	pop	{r3, pc}
    18b4:	00003c65 	.word	0x00003c65

000018b8 <usb_d_enable>:
}

int32_t usb_d_enable(void)
{
    18b8:	b508      	push	{r3, lr}
	return _usb_d_dev_enable();
    18ba:	4b01      	ldr	r3, [pc, #4]	; (18c0 <usb_d_enable+0x8>)
    18bc:	4798      	blx	r3
}
    18be:	bd08      	pop	{r3, pc}
    18c0:	000033cd 	.word	0x000033cd

000018c4 <usb_d_attach>:
{
	_usb_d_dev_disable();
}

void usb_d_attach(void)
{
    18c4:	b508      	push	{r3, lr}
	_usb_d_dev_attach();
    18c6:	4b01      	ldr	r3, [pc, #4]	; (18cc <usb_d_attach+0x8>)
    18c8:	4798      	blx	r3
    18ca:	bd08      	pop	{r3, pc}
    18cc:	00003439 	.word	0x00003439

000018d0 <usb_d_set_address>:
{
	return _usb_d_dev_get_uframe_n();
}

void usb_d_set_address(const uint8_t addr)
{
    18d0:	b508      	push	{r3, lr}
	_usb_d_dev_set_address(addr);
    18d2:	4b01      	ldr	r3, [pc, #4]	; (18d8 <usb_d_set_address+0x8>)
    18d4:	4798      	blx	r3
    18d6:	bd08      	pop	{r3, pc}
    18d8:	0000344b 	.word	0x0000344b

000018dc <usb_d_ep_init>:
{
	return usb_d_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_size);
}

int32_t usb_d_ep_init(const uint8_t ep, const uint8_t attr, const uint16_t max_pkt_size)
{
    18dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    18de:	4606      	mov	r6, r0
    18e0:	460c      	mov	r4, r1
    18e2:	4617      	mov	r7, r2
	int32_t          rc;
	int8_t           ep_index = _usb_d_find_ep(ep);
    18e4:	4b0f      	ldr	r3, [pc, #60]	; (1924 <usb_d_ep_init+0x48>)
    18e6:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ep_index >= 0) {
    18e8:	2800      	cmp	r0, #0
    18ea:	da14      	bge.n	1916 <usb_d_ep_init+0x3a>
		return -USB_ERR_REDO;
	} else {
		ep_index = _usb_d_find_ep(0xFF);
    18ec:	20ff      	movs	r0, #255	; 0xff
    18ee:	4b0d      	ldr	r3, [pc, #52]	; (1924 <usb_d_ep_init+0x48>)
    18f0:	4798      	blx	r3
		if (ep_index < 0) {
    18f2:	1e05      	subs	r5, r0, #0
    18f4:	db12      	blt.n	191c <usb_d_ep_init+0x40>
			return -USB_ERR_ALLOC_FAIL;
		}
		ept = &usb_d_inst.ep[ep_index];
	}
	rc = _usb_d_dev_ep_init(ep, attr, max_pkt_size);
    18f6:	463a      	mov	r2, r7
    18f8:	4621      	mov	r1, r4
    18fa:	4630      	mov	r0, r6
    18fc:	4b0a      	ldr	r3, [pc, #40]	; (1928 <usb_d_ep_init+0x4c>)
    18fe:	4798      	blx	r3
	if (rc < 0) {
    1900:	2800      	cmp	r0, #0
    1902:	db0d      	blt.n	1920 <usb_d_ep_init+0x44>
		return rc;
	}
	ept->xfer.hdr.ep   = ep;
    1904:	4b09      	ldr	r3, [pc, #36]	; (192c <usb_d_ep_init+0x50>)
    1906:	0168      	lsls	r0, r5, #5
    1908:	181a      	adds	r2, r3, r0
    190a:	7056      	strb	r6, [r2, #1]
	ept->xfer.hdr.type = attr & USB_EP_XTYPE_MASK;
    190c:	f004 0403 	and.w	r4, r4, #3
    1910:	541c      	strb	r4, [r3, r0]
	return ERR_NONE;
    1912:	2000      	movs	r0, #0
    1914:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -USB_ERR_REDO;
    1916:	f06f 0013 	mvn.w	r0, #19
    191a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return -USB_ERR_ALLOC_FAIL;
    191c:	f06f 0014 	mvn.w	r0, #20
}
    1920:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1922:	bf00      	nop
    1924:	000015f1 	.word	0x000015f1
    1928:	00003459 	.word	0x00003459
    192c:	20000648 	.word	0x20000648

00001930 <usb_d_ep0_init>:
{
    1930:	b508      	push	{r3, lr}
	return usb_d_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_size);
    1932:	4602      	mov	r2, r0
    1934:	2100      	movs	r1, #0
    1936:	4608      	mov	r0, r1
    1938:	4b01      	ldr	r3, [pc, #4]	; (1940 <usb_d_ep0_init+0x10>)
    193a:	4798      	blx	r3
}
    193c:	bd08      	pop	{r3, pc}
    193e:	bf00      	nop
    1940:	000018dd 	.word	0x000018dd

00001944 <usb_d_ep_deinit>:

void usb_d_ep_deinit(const uint8_t ep)
{
    1944:	b538      	push	{r3, r4, r5, lr}
    1946:	4605      	mov	r5, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
    1948:	4b06      	ldr	r3, [pc, #24]	; (1964 <usb_d_ep_deinit+0x20>)
    194a:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ep_index < 0) {
    194c:	1e04      	subs	r4, r0, #0
    194e:	db07      	blt.n	1960 <usb_d_ep_deinit+0x1c>
		return;
	}
	_usb_d_dev_ep_deinit(ep);
    1950:	4628      	mov	r0, r5
    1952:	4b05      	ldr	r3, [pc, #20]	; (1968 <usb_d_ep_deinit+0x24>)
    1954:	4798      	blx	r3
	ept->xfer.hdr.ep = 0xFF;
    1956:	4805      	ldr	r0, [pc, #20]	; (196c <usb_d_ep_deinit+0x28>)
    1958:	eb00 1044 	add.w	r0, r0, r4, lsl #5
    195c:	23ff      	movs	r3, #255	; 0xff
    195e:	7043      	strb	r3, [r0, #1]
    1960:	bd38      	pop	{r3, r4, r5, pc}
    1962:	bf00      	nop
    1964:	000015f1 	.word	0x000015f1
    1968:	00003571 	.word	0x00003571
    196c:	20000648 	.word	0x20000648

00001970 <usb_d_ep_enable>:
}

int32_t usb_d_ep_enable(const uint8_t ep)
{
    1970:	b538      	push	{r3, r4, r5, lr}
    1972:	4605      	mov	r5, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
    1974:	4b0e      	ldr	r3, [pc, #56]	; (19b0 <usb_d_ep_enable+0x40>)
    1976:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	int32_t          rc;
	if (ep_index < 0) {
    1978:	1e04      	subs	r4, r0, #0
    197a:	db16      	blt.n	19aa <usb_d_ep_enable+0x3a>
		return -USB_ERR_PARAM;
	}
	ept->xfer.hdr.state = (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) ? USB_EP_S_X_SETUP : USB_EP_S_IDLE;
    197c:	0163      	lsls	r3, r4, #5
    197e:	4a0d      	ldr	r2, [pc, #52]	; (19b4 <usb_d_ep_enable+0x44>)
    1980:	5cd3      	ldrb	r3, [r2, r3]
    1982:	2b00      	cmp	r3, #0
    1984:	bf0c      	ite	eq
    1986:	2202      	moveq	r2, #2
    1988:	2201      	movne	r2, #1
    198a:	4b0a      	ldr	r3, [pc, #40]	; (19b4 <usb_d_ep_enable+0x44>)
    198c:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    1990:	709a      	strb	r2, [r3, #2]
	rc                  = _usb_d_dev_ep_enable(ep);
    1992:	4628      	mov	r0, r5
    1994:	4b08      	ldr	r3, [pc, #32]	; (19b8 <usb_d_ep_enable+0x48>)
    1996:	4798      	blx	r3
	if (rc < 0) {
    1998:	2800      	cmp	r0, #0
    199a:	db00      	blt.n	199e <usb_d_ep_enable+0x2e>
		ept->xfer.hdr.state = USB_EP_S_DISABLED;
	}
	return rc;
}
    199c:	bd38      	pop	{r3, r4, r5, pc}
		ept->xfer.hdr.state = USB_EP_S_DISABLED;
    199e:	4b05      	ldr	r3, [pc, #20]	; (19b4 <usb_d_ep_enable+0x44>)
    19a0:	eb03 1444 	add.w	r4, r3, r4, lsl #5
    19a4:	2300      	movs	r3, #0
    19a6:	70a3      	strb	r3, [r4, #2]
    19a8:	bd38      	pop	{r3, r4, r5, pc}
		return -USB_ERR_PARAM;
    19aa:	f06f 0011 	mvn.w	r0, #17
    19ae:	e7f5      	b.n	199c <usb_d_ep_enable+0x2c>
    19b0:	000015f1 	.word	0x000015f1
    19b4:	20000648 	.word	0x20000648
    19b8:	00003635 	.word	0x00003635

000019bc <usb_d_ep_transfer>:
	}
	return usb_d_inst.ep[ep_index].xfer.req;
}

int32_t usb_d_ep_transfer(const struct usb_d_transfer *xfer)
{
    19bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    19c0:	b086      	sub	sp, #24
    19c2:	4604      	mov	r4, r0
	int8_t                ep_index = _usb_d_find_ep(xfer->ep);
    19c4:	7a07      	ldrb	r7, [r0, #8]
    19c6:	4638      	mov	r0, r7
    19c8:	4b3f      	ldr	r3, [pc, #252]	; (1ac8 <usb_d_ep_transfer+0x10c>)
    19ca:	4798      	blx	r3
	struct usb_d_ep *     ept      = &usb_d_inst.ep[ep_index];
	bool                  dir = USB_EP_GET_DIR(xfer->ep), zlp = xfer->zlp;
    19cc:	7a65      	ldrb	r5, [r4, #9]
	uint32_t              len = xfer->size;
    19ce:	f8d4 8004 	ldr.w	r8, [r4, #4]
	int32_t               rc;
	volatile uint8_t      state;
	volatile hal_atomic_t flags;

	if (ep_index < 0) {
    19d2:	1e06      	subs	r6, r0, #0
    19d4:	db72      	blt.n	1abc <usb_d_ep_transfer+0x100>
		return -USB_ERR_PARAM;
	}

	atomic_enter_critical(&flags);
    19d6:	a804      	add	r0, sp, #16
    19d8:	4b3c      	ldr	r3, [pc, #240]	; (1acc <usb_d_ep_transfer+0x110>)
    19da:	4798      	blx	r3
	state = ept->xfer.hdr.state;
    19dc:	4b3c      	ldr	r3, [pc, #240]	; (1ad0 <usb_d_ep_transfer+0x114>)
    19de:	eb03 1346 	add.w	r3, r3, r6, lsl #5
    19e2:	789b      	ldrb	r3, [r3, #2]
    19e4:	f88d 3017 	strb.w	r3, [sp, #23]
	if (state == USB_EP_S_IDLE) {
    19e8:	f89d 3017 	ldrb.w	r3, [sp, #23]
    19ec:	b2db      	uxtb	r3, r3
    19ee:	2b01      	cmp	r3, #1
    19f0:	d011      	beq.n	1a16 <usb_d_ep_transfer+0x5a>
		ept->xfer.hdr.state = USB_EP_S_X_DATA;
		atomic_leave_critical(&flags);
	} else {
		atomic_leave_critical(&flags);
    19f2:	a804      	add	r0, sp, #16
    19f4:	4b37      	ldr	r3, [pc, #220]	; (1ad4 <usb_d_ep_transfer+0x118>)
    19f6:	4798      	blx	r3
		switch (state) {
    19f8:	f89d 3017 	ldrb.w	r3, [sp, #23]
    19fc:	b2db      	uxtb	r3, r3
    19fe:	2b05      	cmp	r3, #5
    1a00:	d05f      	beq.n	1ac2 <usb_d_ep_transfer+0x106>
    1a02:	2b06      	cmp	r3, #6
    1a04:	d023      	beq.n	1a4e <usb_d_ep_transfer+0x92>
		case USB_EP_S_ERROR:
			return -USB_ERROR;
		case USB_EP_S_DISABLED:
			return -USB_ERR_FUNC;
		default: /* USB_EP_S_X_xxxx  */
			return USB_BUSY;
    1a06:	2b00      	cmp	r3, #0
    1a08:	bf0c      	ite	eq
    1a0a:	f06f 0012 	mvneq.w	r0, #18
    1a0e:	2001      	movne	r0, #1
		}
	}

	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
	return rc;
}
    1a10:	b006      	add	sp, #24
    1a12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		ept->xfer.hdr.state = USB_EP_S_X_DATA;
    1a16:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 1ad0 <usb_d_ep_transfer+0x114>
    1a1a:	ea4f 1946 	mov.w	r9, r6, lsl #5
    1a1e:	eb0a 0309 	add.w	r3, sl, r9
    1a22:	2203      	movs	r2, #3
    1a24:	709a      	strb	r2, [r3, #2]
		atomic_leave_critical(&flags);
    1a26:	a804      	add	r0, sp, #16
    1a28:	4b2a      	ldr	r3, [pc, #168]	; (1ad4 <usb_d_ep_transfer+0x118>)
    1a2a:	4798      	blx	r3
	if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    1a2c:	f81a 3009 	ldrb.w	r3, [sl, r9]
    1a30:	b183      	cbz	r3, 1a54 <usb_d_ep_transfer+0x98>
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    1a32:	7a22      	ldrb	r2, [r4, #8]
    1a34:	3500      	adds	r5, #0
    1a36:	bf18      	it	ne
    1a38:	2501      	movne	r5, #1
	struct usb_d_transfer trans
    1a3a:	6823      	ldr	r3, [r4, #0]
    1a3c:	9301      	str	r3, [sp, #4]
    1a3e:	f8cd 8008 	str.w	r8, [sp, #8]
    1a42:	f017 0f80 	tst.w	r7, #128	; 0x80
    1a46:	d119      	bne.n	1a7c <usb_d_ep_transfer+0xc0>
    1a48:	f002 030f 	and.w	r3, r2, #15
    1a4c:	e018      	b.n	1a80 <usb_d_ep_transfer+0xc4>
			return -USB_ERROR;
    1a4e:	f06f 000f 	mvn.w	r0, #15
    1a52:	e7dd      	b.n	1a10 <usb_d_ep_transfer+0x54>
		uint16_t req_len = USB_GET_wLength(ept->xfer.req);
    1a54:	4b1e      	ldr	r3, [pc, #120]	; (1ad0 <usb_d_ep_transfer+0x114>)
    1a56:	eb03 1346 	add.w	r3, r3, r6, lsl #5
    1a5a:	7cda      	ldrb	r2, [r3, #19]
    1a5c:	7c9d      	ldrb	r5, [r3, #18]
    1a5e:	eb05 2502 	add.w	r5, r5, r2, lsl #8
    1a62:	b2ad      	uxth	r5, r5
		if (req_len == 0) {
    1a64:	b9a5      	cbnz	r5, 1a90 <usb_d_ep_transfer+0xd4>
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    1a66:	4b1a      	ldr	r3, [pc, #104]	; (1ad0 <usb_d_ep_transfer+0x114>)
    1a68:	eb03 1646 	add.w	r6, r3, r6, lsl #5
    1a6c:	2304      	movs	r3, #4
    1a6e:	70b3      	strb	r3, [r6, #2]
			len                 = 0;
    1a70:	2300      	movs	r3, #0
			zlp                 = true;
    1a72:	2501      	movs	r5, #1
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    1a74:	7a22      	ldrb	r2, [r4, #8]
	struct usb_d_transfer trans
    1a76:	6821      	ldr	r1, [r4, #0]
    1a78:	9101      	str	r1, [sp, #4]
    1a7a:	9302      	str	r3, [sp, #8]
    1a7c:	f042 0380 	orr.w	r3, r2, #128	; 0x80
    1a80:	f88d 300c 	strb.w	r3, [sp, #12]
    1a84:	f88d 500d 	strb.w	r5, [sp, #13]
	return _usb_d_dev_ep_trans(&trans);
    1a88:	a801      	add	r0, sp, #4
    1a8a:	4b13      	ldr	r3, [pc, #76]	; (1ad8 <usb_d_ep_transfer+0x11c>)
    1a8c:	4798      	blx	r3
	return rc;
    1a8e:	e7bf      	b.n	1a10 <usb_d_ep_transfer+0x54>
    1a90:	4643      	mov	r3, r8
    1a92:	45a8      	cmp	r8, r5
    1a94:	bf28      	it	cs
    1a96:	462b      	movcs	r3, r5
			dir = (USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN);
    1a98:	4a0d      	ldr	r2, [pc, #52]	; (1ad0 <usb_d_ep_transfer+0x114>)
    1a9a:	eb02 1646 	add.w	r6, r2, r6, lsl #5
			if (dir) {
    1a9e:	f996 200c 	ldrsb.w	r2, [r6, #12]
    1aa2:	2a00      	cmp	r2, #0
    1aa4:	db05      	blt.n	1ab2 <usb_d_ep_transfer+0xf6>
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    1aa6:	7a22      	ldrb	r2, [r4, #8]
	struct usb_d_transfer trans
    1aa8:	6821      	ldr	r1, [r4, #0]
    1aaa:	9101      	str	r1, [sp, #4]
    1aac:	9302      	str	r3, [sp, #8]
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    1aae:	2500      	movs	r5, #0
    1ab0:	e7ca      	b.n	1a48 <usb_d_ep_transfer+0x8c>
				zlp = (req_len > len);
    1ab2:	429d      	cmp	r5, r3
    1ab4:	bf94      	ite	ls
    1ab6:	2500      	movls	r5, #0
    1ab8:	2501      	movhi	r5, #1
    1aba:	e7db      	b.n	1a74 <usb_d_ep_transfer+0xb8>
		return -USB_ERR_PARAM;
    1abc:	f06f 0011 	mvn.w	r0, #17
    1ac0:	e7a6      	b.n	1a10 <usb_d_ep_transfer+0x54>
			return USB_HALTED;
    1ac2:	2002      	movs	r0, #2
    1ac4:	e7a4      	b.n	1a10 <usb_d_ep_transfer+0x54>
    1ac6:	bf00      	nop
    1ac8:	000015f1 	.word	0x000015f1
    1acc:	00004899 	.word	0x00004899
    1ad0:	20000648 	.word	0x20000648
    1ad4:	000048a7 	.word	0x000048a7
    1ad8:	00003a85 	.word	0x00003a85

00001adc <usb_d_ep_halt>:
	}
	return ERR_NONE;
}

int32_t usb_d_ep_halt(const uint8_t ep, const enum usb_ep_halt_ctrl ctrl)
{
    1adc:	b538      	push	{r3, r4, r5, lr}
    1ade:	4604      	mov	r4, r0
	if (ctrl == USB_EP_HALT_CLR) {
    1ae0:	b141      	cbz	r1, 1af4 <usb_d_ep_halt+0x18>
		return _usb_d_ep_halt_clr(ep);
	} else if (ctrl == USB_EP_HALT_SET) {
    1ae2:	2901      	cmp	r1, #1
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    1ae4:	bf0c      	ite	eq
    1ae6:	2101      	moveq	r1, #1
	} else {
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_GET);
    1ae8:	2102      	movne	r1, #2
    1aea:	4b13      	ldr	r3, [pc, #76]	; (1b38 <usb_d_ep_halt+0x5c>)
    1aec:	4798      	blx	r3
    1aee:	4603      	mov	r3, r0
	}
}
    1af0:	4618      	mov	r0, r3
    1af2:	bd38      	pop	{r3, r4, r5, pc}
	int8_t           ep_index = _usb_d_find_ep(ep);
    1af4:	4b11      	ldr	r3, [pc, #68]	; (1b3c <usb_d_ep_halt+0x60>)
    1af6:	4798      	blx	r3
	if (ep_index < 0) {
    1af8:	1e05      	subs	r5, r0, #0
    1afa:	db19      	blt.n	1b30 <usb_d_ep_halt+0x54>
	if (_usb_d_dev_ep_stall(ep, USB_EP_STALL_GET)) {
    1afc:	2102      	movs	r1, #2
    1afe:	4620      	mov	r0, r4
    1b00:	4b0d      	ldr	r3, [pc, #52]	; (1b38 <usb_d_ep_halt+0x5c>)
    1b02:	4798      	blx	r3
    1b04:	4603      	mov	r3, r0
    1b06:	2800      	cmp	r0, #0
    1b08:	d0f2      	beq.n	1af0 <usb_d_ep_halt+0x14>
		rc = _usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    1b0a:	2100      	movs	r1, #0
    1b0c:	4620      	mov	r0, r4
    1b0e:	4b0a      	ldr	r3, [pc, #40]	; (1b38 <usb_d_ep_halt+0x5c>)
    1b10:	4798      	blx	r3
		if (rc < 0) {
    1b12:	1e03      	subs	r3, r0, #0
    1b14:	dbec      	blt.n	1af0 <usb_d_ep_halt+0x14>
		ept->xfer.hdr.state  = USB_EP_S_IDLE;
    1b16:	4b0a      	ldr	r3, [pc, #40]	; (1b40 <usb_d_ep_halt+0x64>)
    1b18:	eb03 1345 	add.w	r3, r3, r5, lsl #5
    1b1c:	2201      	movs	r2, #1
    1b1e:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_UNHALT;
    1b20:	2103      	movs	r1, #3
    1b22:	70d9      	strb	r1, [r3, #3]
		ept->callbacks.xfer(ep, USB_XFER_UNHALT, NULL);
    1b24:	69db      	ldr	r3, [r3, #28]
    1b26:	2200      	movs	r2, #0
    1b28:	4620      	mov	r0, r4
    1b2a:	4798      	blx	r3
	return ERR_NONE;
    1b2c:	2300      	movs	r3, #0
    1b2e:	e7df      	b.n	1af0 <usb_d_ep_halt+0x14>
		return -USB_ERR_PARAM;
    1b30:	f06f 0311 	mvn.w	r3, #17
    1b34:	e7dc      	b.n	1af0 <usb_d_ep_halt+0x14>
    1b36:	bf00      	nop
    1b38:	000038dd 	.word	0x000038dd
    1b3c:	000015f1 	.word	0x000015f1
    1b40:	20000648 	.word	0x20000648

00001b44 <usb_d_ep_register_callback>:

void usb_d_ep_register_callback(const uint8_t ep, const enum usb_d_ep_cb_type type, const FUNC_PTR func)
{
    1b44:	b538      	push	{r3, r4, r5, lr}
    1b46:	460d      	mov	r5, r1
    1b48:	4614      	mov	r4, r2
	int8_t           ep_index = _usb_d_find_ep(ep);
    1b4a:	4b0e      	ldr	r3, [pc, #56]	; (1b84 <usb_d_ep_register_callback+0x40>)
    1b4c:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	FUNC_PTR         f        = func ? (FUNC_PTR)func : (FUNC_PTR)usb_d_dummy_cb_false;
    1b4e:	4b0e      	ldr	r3, [pc, #56]	; (1b88 <usb_d_ep_register_callback+0x44>)
    1b50:	2c00      	cmp	r4, #0
    1b52:	bf08      	it	eq
    1b54:	461c      	moveq	r4, r3
	if (ep_index < 0) {
    1b56:	2800      	cmp	r0, #0
    1b58:	db13      	blt.n	1b82 <usb_d_ep_register_callback+0x3e>
		return;
	}
	switch (type) {
    1b5a:	2d01      	cmp	r5, #1
    1b5c:	d008      	beq.n	1b70 <usb_d_ep_register_callback+0x2c>
    1b5e:	b115      	cbz	r5, 1b66 <usb_d_ep_register_callback+0x22>
    1b60:	2d02      	cmp	r5, #2
    1b62:	d00a      	beq.n	1b7a <usb_d_ep_register_callback+0x36>
    1b64:	bd38      	pop	{r3, r4, r5, pc}
	case USB_D_EP_CB_SETUP:
		ept->callbacks.req = (usb_d_ep_cb_setup_t)f;
    1b66:	4b09      	ldr	r3, [pc, #36]	; (1b8c <usb_d_ep_register_callback+0x48>)
    1b68:	eb03 1040 	add.w	r0, r3, r0, lsl #5
    1b6c:	6144      	str	r4, [r0, #20]
		break;
    1b6e:	bd38      	pop	{r3, r4, r5, pc}
	case USB_D_EP_CB_MORE:
		ept->callbacks.more = (usb_d_ep_cb_more_t)f;
    1b70:	4b06      	ldr	r3, [pc, #24]	; (1b8c <usb_d_ep_register_callback+0x48>)
    1b72:	eb03 1040 	add.w	r0, r3, r0, lsl #5
    1b76:	6184      	str	r4, [r0, #24]
		break;
    1b78:	bd38      	pop	{r3, r4, r5, pc}
	case USB_D_EP_CB_XFER:
		ept->callbacks.xfer = (usb_d_ep_cb_xfer_t)f;
    1b7a:	4b04      	ldr	r3, [pc, #16]	; (1b8c <usb_d_ep_register_callback+0x48>)
    1b7c:	eb03 1040 	add.w	r0, r3, r0, lsl #5
    1b80:	61c4      	str	r4, [r0, #28]
    1b82:	bd38      	pop	{r3, r4, r5, pc}
    1b84:	000015f1 	.word	0x000015f1
    1b88:	00001635 	.word	0x00001635
    1b8c:	20000648 	.word	0x20000648

00001b90 <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
    1b90:	b900      	cbnz	r0, 1b94 <assert+0x4>
		__asm("BKPT #0");
    1b92:	be00      	bkpt	0x0000
    1b94:	4770      	bx	lr

00001b96 <is_list_element>:
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
    1b96:	6803      	ldr	r3, [r0, #0]
    1b98:	b14b      	cbz	r3, 1bae <is_list_element+0x18>
		if (it == element) {
    1b9a:	428b      	cmp	r3, r1
    1b9c:	d009      	beq.n	1bb2 <is_list_element+0x1c>
	for (it = list->head; it; it = it->next) {
    1b9e:	681b      	ldr	r3, [r3, #0]
    1ba0:	b11b      	cbz	r3, 1baa <is_list_element+0x14>
		if (it == element) {
    1ba2:	4299      	cmp	r1, r3
    1ba4:	d1fb      	bne.n	1b9e <is_list_element+0x8>
			return true;
    1ba6:	2001      	movs	r0, #1
		}
	}

	return false;
}
    1ba8:	4770      	bx	lr
	return false;
    1baa:	2000      	movs	r0, #0
    1bac:	4770      	bx	lr
    1bae:	2000      	movs	r0, #0
    1bb0:	4770      	bx	lr
			return true;
    1bb2:	2001      	movs	r0, #1
    1bb4:	4770      	bx	lr
	...

00001bb8 <list_insert_as_head>:

/**
 * \brief Insert an element as list head
 */
void list_insert_as_head(struct list_descriptor *const list, void *const element)
{
    1bb8:	b538      	push	{r3, r4, r5, lr}
    1bba:	4604      	mov	r4, r0
    1bbc:	460d      	mov	r5, r1
	ASSERT(!is_list_element(list, element));
    1bbe:	4b06      	ldr	r3, [pc, #24]	; (1bd8 <list_insert_as_head+0x20>)
    1bc0:	4798      	blx	r3
    1bc2:	f080 0001 	eor.w	r0, r0, #1
    1bc6:	2239      	movs	r2, #57	; 0x39
    1bc8:	4904      	ldr	r1, [pc, #16]	; (1bdc <list_insert_as_head+0x24>)
    1bca:	b2c0      	uxtb	r0, r0
    1bcc:	4b04      	ldr	r3, [pc, #16]	; (1be0 <list_insert_as_head+0x28>)
    1bce:	4798      	blx	r3

	((struct list_element *)element)->next = list->head;
    1bd0:	6823      	ldr	r3, [r4, #0]
    1bd2:	602b      	str	r3, [r5, #0]
	list->head                             = (struct list_element *)element;
    1bd4:	6025      	str	r5, [r4, #0]
    1bd6:	bd38      	pop	{r3, r4, r5, pc}
    1bd8:	00001b97 	.word	0x00001b97
    1bdc:	000050d8 	.word	0x000050d8
    1be0:	00001b91 	.word	0x00001b91

00001be4 <list_insert_after>:
/**
 * \brief Insert an element after the given list element
 */
void list_insert_after(void *const after, void *const element)
{
	((struct list_element *)element)->next = ((struct list_element *)after)->next;
    1be4:	6803      	ldr	r3, [r0, #0]
    1be6:	600b      	str	r3, [r1, #0]
	((struct list_element *)after)->next   = (struct list_element *)element;
    1be8:	6001      	str	r1, [r0, #0]
    1bea:	4770      	bx	lr

00001bec <list_insert_at_end>:

/**
 * \brief Insert an element at list end
 */
void list_insert_at_end(struct list_descriptor *const list, void *const element)
{
    1bec:	b570      	push	{r4, r5, r6, lr}
    1bee:	4605      	mov	r5, r0
    1bf0:	460e      	mov	r6, r1
	struct list_element *it = list->head;
    1bf2:	6804      	ldr	r4, [r0, #0]

	ASSERT(!is_list_element(list, element));
    1bf4:	4b0a      	ldr	r3, [pc, #40]	; (1c20 <list_insert_at_end+0x34>)
    1bf6:	4798      	blx	r3
    1bf8:	f080 0001 	eor.w	r0, r0, #1
    1bfc:	224f      	movs	r2, #79	; 0x4f
    1bfe:	4909      	ldr	r1, [pc, #36]	; (1c24 <list_insert_at_end+0x38>)
    1c00:	b2c0      	uxtb	r0, r0
    1c02:	4b09      	ldr	r3, [pc, #36]	; (1c28 <list_insert_at_end+0x3c>)
    1c04:	4798      	blx	r3

	if (!list->head) {
    1c06:	682b      	ldr	r3, [r5, #0]
    1c08:	b91b      	cbnz	r3, 1c12 <list_insert_at_end+0x26>
		list->head                             = (struct list_element *)element;
    1c0a:	602e      	str	r6, [r5, #0]
		((struct list_element *)element)->next = NULL;
    1c0c:	6033      	str	r3, [r6, #0]
		return;
    1c0e:	bd70      	pop	{r4, r5, r6, pc}
	}

	while (it->next) {
		it = it->next;
    1c10:	461c      	mov	r4, r3
	while (it->next) {
    1c12:	6823      	ldr	r3, [r4, #0]
    1c14:	2b00      	cmp	r3, #0
    1c16:	d1fb      	bne.n	1c10 <list_insert_at_end+0x24>
	}
	it->next                               = (struct list_element *)element;
    1c18:	6026      	str	r6, [r4, #0]
	((struct list_element *)element)->next = NULL;
    1c1a:	6033      	str	r3, [r6, #0]
    1c1c:	bd70      	pop	{r4, r5, r6, pc}
    1c1e:	bf00      	nop
    1c20:	00001b97 	.word	0x00001b97
    1c24:	000050d8 	.word	0x000050d8
    1c28:	00001b91 	.word	0x00001b91

00001c2c <list_remove_head>:
/**
 * \brief Removes list head
 */
void *list_remove_head(struct list_descriptor *const list)
{
	if (list->head) {
    1c2c:	6803      	ldr	r3, [r0, #0]
    1c2e:	b10b      	cbz	r3, 1c34 <list_remove_head+0x8>
		struct list_element *tmp = list->head;

		list->head = list->head->next;
    1c30:	681a      	ldr	r2, [r3, #0]
    1c32:	6002      	str	r2, [r0, #0]
		return (void *)tmp;
	}

	return NULL;
}
    1c34:	4618      	mov	r0, r3
    1c36:	4770      	bx	lr

00001c38 <_can_async_init>:

/**
 * \brief Initialize CAN.
 */
int32_t _can_async_init(struct _can_async_device *const dev, void *const hw)
{
    1c38:	b410      	push	{r4}
	dev->hw = hw;
    1c3a:	6001      	str	r1, [r0, #0]
}

static inline void hri_can_set_CCCR_INIT_bit(const void *const hw)
{
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg |= CAN_CCCR_INIT;
    1c3c:	698b      	ldr	r3, [r1, #24]
    1c3e:	f043 0301 	orr.w	r3, r3, #1
    1c42:	618b      	str	r3, [r1, #24]
	hri_can_set_CCCR_INIT_bit(dev->hw);
	while (hri_can_get_CCCR_INIT_bit(dev->hw) == 0)
    1c44:	6802      	ldr	r2, [r0, #0]
}

static inline bool hri_can_get_CCCR_INIT_bit(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Can *)hw)->CCCR.reg;
    1c46:	6993      	ldr	r3, [r2, #24]
    1c48:	f013 0f01 	tst.w	r3, #1
    1c4c:	d0fb      	beq.n	1c46 <_can_async_init+0xe>
}

static inline void hri_can_set_CCCR_CCE_bit(const void *const hw)
{
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg |= CAN_CCCR_CCE;
    1c4e:	6993      	ldr	r3, [r2, #24]
    1c50:	f043 0302 	orr.w	r3, r3, #2
    1c54:	6193      	str	r3, [r2, #24]
		hri_can_write_ILE_reg(dev->hw, CAN_ILE_EINT0);
	}
#endif

#ifdef CONF_CAN1_ENABLED
	if (hw == CAN1) {
    1c56:	4b37      	ldr	r3, [pc, #220]	; (1d34 <_can_async_init+0xfc>)
    1c58:	4299      	cmp	r1, r3
    1c5a:	d012      	beq.n	1c82 <_can_async_init+0x4a>
		hri_can_write_ILE_reg(dev->hw, CAN_ILE_EINT0);
	}
#endif

	/* Disable CCE to prevent Configuration Change */
	hri_can_clear_CCCR_CCE_bit(dev->hw);
    1c5c:	6802      	ldr	r2, [r0, #0]
}

static inline void hri_can_clear_CCCR_CCE_bit(const void *const hw)
{
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg &= ~CAN_CCCR_CCE;
    1c5e:	6993      	ldr	r3, [r2, #24]
    1c60:	f023 0302 	bic.w	r3, r3, #2
    1c64:	6193      	str	r3, [r2, #24]
	hri_can_clear_CCCR_INIT_bit(dev->hw);
    1c66:	6802      	ldr	r2, [r0, #0]
	((Can *)hw)->CCCR.reg &= ~CAN_CCCR_INIT;
    1c68:	6993      	ldr	r3, [r2, #24]
    1c6a:	f023 0301 	bic.w	r3, r3, #1
    1c6e:	6193      	str	r3, [r2, #24]
	while (hri_can_get_CCCR_INIT_bit(dev->hw)) {
    1c70:	6802      	ldr	r2, [r0, #0]
	tmp = ((Can *)hw)->CCCR.reg;
    1c72:	6993      	ldr	r3, [r2, #24]
    1c74:	f013 0f01 	tst.w	r3, #1
    1c78:	d1fb      	bne.n	1c72 <_can_async_init+0x3a>
	};

	return ERR_NONE;
}
    1c7a:	2000      	movs	r0, #0
    1c7c:	f85d 4b04 	ldr.w	r4, [sp], #4
    1c80:	4770      	bx	lr
		_can1_dev    = dev;
    1c82:	4b2d      	ldr	r3, [pc, #180]	; (1d38 <_can_async_init+0x100>)
    1c84:	461a      	mov	r2, r3
    1c86:	f842 0b04 	str.w	r0, [r2], #4
		dev->context = (void *)&_can1_context;
    1c8a:	492c      	ldr	r1, [pc, #176]	; (1d3c <_can_async_init+0x104>)
    1c8c:	6181      	str	r1, [r0, #24]
		hri_can_set_CCCR_reg(dev->hw, CONF_CAN1_CCCR_REG);
    1c8e:	6804      	ldr	r4, [r0, #0]
}

static inline void hri_can_set_CCCR_reg(const void *const hw, hri_can_cccr_reg_t mask)
{
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg |= mask;
    1c90:	69a1      	ldr	r1, [r4, #24]
    1c92:	f441 7140 	orr.w	r1, r1, #768	; 0x300
    1c96:	61a1      	str	r1, [r4, #24]
		hri_can_write_MRCFG_reg(dev->hw, CONF_CAN1_MRCFG_REG);
    1c98:	6801      	ldr	r1, [r0, #0]
	((Can *)hw)->MRCFG.reg = data;
    1c9a:	2402      	movs	r4, #2
    1c9c:	608c      	str	r4, [r1, #8]
		hri_can_write_NBTP_reg(dev->hw, CONF_CAN1_BTP_REG);
    1c9e:	6801      	ldr	r1, [r0, #0]
}

static inline void hri_can_write_NBTP_reg(const void *const hw, hri_can_nbtp_reg_t data)
{
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->NBTP.reg = data;
    1ca0:	4c27      	ldr	r4, [pc, #156]	; (1d40 <_can_async_init+0x108>)
    1ca2:	61cc      	str	r4, [r1, #28]
		hri_can_write_DBTP_reg(dev->hw, CONF_CAN1_DBTP_REG);
    1ca4:	6801      	ldr	r1, [r0, #0]
	((Can *)hw)->DBTP.reg = data;
    1ca6:	340f      	adds	r4, #15
    1ca8:	60cc      	str	r4, [r1, #12]
		hri_can_write_RXF0C_reg(dev->hw, CONF_CAN1_RXF0C_REG | CAN_RXF0C_F0SA((uint32_t)can1_rx_fifo));
    1caa:	6804      	ldr	r4, [r0, #0]
    1cac:	4925      	ldr	r1, [pc, #148]	; (1d44 <_can_async_init+0x10c>)
    1cae:	b289      	uxth	r1, r1
    1cb0:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
    1cb4:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
}

static inline void hri_can_write_RXF0C_reg(const void *const hw, hri_can_rxf0c_reg_t data)
{
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->RXF0C.reg = data;
    1cb8:	f8c4 10a0 	str.w	r1, [r4, #160]	; 0xa0
		hri_can_write_RXESC_reg(dev->hw, CONF_CAN1_RXESC_REG);
    1cbc:	6804      	ldr	r4, [r0, #0]
}

static inline void hri_can_write_RXESC_reg(const void *const hw, hri_can_rxesc_reg_t data)
{
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->RXESC.reg = data;
    1cbe:	2100      	movs	r1, #0
    1cc0:	f8c4 10bc 	str.w	r1, [r4, #188]	; 0xbc
		hri_can_write_TXESC_reg(dev->hw, CONF_CAN1_TXESC_REG);
    1cc4:	6804      	ldr	r4, [r0, #0]
}

static inline void hri_can_write_TXESC_reg(const void *const hw, hri_can_txesc_reg_t data)
{
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->TXESC.reg = data;
    1cc6:	f8c4 10c8 	str.w	r1, [r4, #200]	; 0xc8
		hri_can_write_TXBC_reg(dev->hw, CONF_CAN1_TXBC_REG | CAN_TXBC_TBSA((uint32_t)can1_tx_fifo));
    1cca:	6804      	ldr	r4, [r0, #0]
    1ccc:	491e      	ldr	r1, [pc, #120]	; (1d48 <_can_async_init+0x110>)
    1cce:	b289      	uxth	r1, r1
    1cd0:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
	((Can *)hw)->TXBC.reg = data;
    1cd4:	f8c4 10c0 	str.w	r1, [r4, #192]	; 0xc0
		hri_can_write_TXEFC_reg(dev->hw, CONF_CAN1_TXEFC_REG | CAN_TXEFC_EFSA((uint32_t)can1_tx_event_fifo));
    1cd8:	6801      	ldr	r1, [r0, #0]
    1cda:	b292      	uxth	r2, r2
    1cdc:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
}

static inline void hri_can_write_TXEFC_reg(const void *const hw, hri_can_txefc_reg_t data)
{
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->TXEFC.reg = data;
    1ce0:	f8c1 20f0 	str.w	r2, [r1, #240]	; 0xf0
		hri_can_write_GFC_reg(dev->hw, CONF_CAN1_GFC_REG);
    1ce4:	6802      	ldr	r2, [r0, #0]
	((Can *)hw)->GFC.reg = data;
    1ce6:	2128      	movs	r1, #40	; 0x28
    1ce8:	f8c2 1080 	str.w	r1, [r2, #128]	; 0x80
		hri_can_write_SIDFC_reg(dev->hw, CONF_CAN1_SIDFC_REG | CAN_SIDFC_FLSSA((uint32_t)can1_rx_std_filter));
    1cec:	6801      	ldr	r1, [r0, #0]
    1cee:	f103 0214 	add.w	r2, r3, #20
    1cf2:	b292      	uxth	r2, r2
    1cf4:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
	((Can *)hw)->SIDFC.reg = data;
    1cf8:	f8c1 2084 	str.w	r2, [r1, #132]	; 0x84
		hri_can_write_XIDFC_reg(dev->hw, CONF_CAN1_XIDFC_REG | CAN_XIDFC_FLESA((uint32_t)can1_rx_ext_filter));
    1cfc:	6802      	ldr	r2, [r0, #0]
    1cfe:	331c      	adds	r3, #28
    1d00:	b29b      	uxth	r3, r3
    1d02:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
	((Can *)hw)->XIDFC.reg = data;
    1d06:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
		hri_can_write_XIDAM_reg(dev->hw, CONF_CAN1_XIDAM_REG);
    1d0a:	6803      	ldr	r3, [r0, #0]
	((Can *)hw)->XIDAM.reg = data;
    1d0c:	f06f 4260 	mvn.w	r2, #3758096384	; 0xe0000000
    1d10:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1d14:	4b0d      	ldr	r3, [pc, #52]	; (1d4c <_can_async_init+0x114>)
    1d16:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    1d1a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    1d1e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1d22:	f3bf 8f6f 	isb	sy
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1d26:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1d2a:	609a      	str	r2, [r3, #8]
		hri_can_write_ILE_reg(dev->hw, CAN_ILE_EINT0);
    1d2c:	6803      	ldr	r3, [r0, #0]
	((Can *)hw)->ILE.reg = data;
    1d2e:	2201      	movs	r2, #1
    1d30:	65da      	str	r2, [r3, #92]	; 0x5c
    1d32:	e793      	b.n	1c5c <_can_async_init+0x24>
    1d34:	42000400 	.word	0x42000400
    1d38:	200006c8 	.word	0x200006c8
    1d3c:	20000090 	.word	0x20000090
    1d40:	00010c01 	.word	0x00010c01
    1d44:	20000ab0 	.word	0x20000ab0
    1d48:	20000aa0 	.word	0x20000aa0
    1d4c:	e000e100 	.word	0xe000e100

00001d50 <CAN1_Handler>:

/*
 * \brief CAN interrupt handler
 */
void CAN1_Handler(void)
{
    1d50:	b538      	push	{r3, r4, r5, lr}
	struct _can_async_device *dev = _can1_dev;
    1d52:	4b1d      	ldr	r3, [pc, #116]	; (1dc8 <CAN1_Handler+0x78>)
    1d54:	681d      	ldr	r5, [r3, #0]
	uint32_t                  ir;
	ir = hri_can_read_IR_reg(dev->hw);
    1d56:	682b      	ldr	r3, [r5, #0]
	return ((Can *)hw)->IR.reg;
    1d58:	6d1c      	ldr	r4, [r3, #80]	; 0x50

	if (ir & CAN_IR_RF0N) {
    1d5a:	f014 0f01 	tst.w	r4, #1
    1d5e:	d11c      	bne.n	1d9a <CAN1_Handler+0x4a>
		dev->cb.rx_done(dev);
	}

	if (ir & CAN_IR_TC) {
    1d60:	f414 7f00 	tst.w	r4, #512	; 0x200
    1d64:	d11d      	bne.n	1da2 <CAN1_Handler+0x52>
		dev->cb.tx_done(dev);
	}

	if (ir & CAN_IR_BO) {
    1d66:	f014 7f00 	tst.w	r4, #33554432	; 0x2000000
    1d6a:	d11e      	bne.n	1daa <CAN1_Handler+0x5a>
		dev->cb.irq_handler(dev, CAN_IRQ_BO);
	}

	if (ir & CAN_IR_EW) {
    1d6c:	f014 7f80 	tst.w	r4, #16777216	; 0x1000000
    1d70:	d120      	bne.n	1db4 <CAN1_Handler+0x64>
		dev->cb.irq_handler(dev, CAN_IRQ_EW);
	}

	if (ir & CAN_IR_EP) {
    1d72:	f414 0f00 	tst.w	r4, #8388608	; 0x800000
    1d76:	d00a      	beq.n	1d8e <CAN1_Handler+0x3e>
		dev->cb.irq_handler(dev, hri_can_get_PSR_EP_bit(dev->hw) ? CAN_IRQ_EP : CAN_IRQ_EA);
    1d78:	68ea      	ldr	r2, [r5, #12]
    1d7a:	682b      	ldr	r3, [r5, #0]
	return (((Can *)hw)->PSR.reg & CAN_PSR_EP) >> CAN_PSR_EP_Pos;
    1d7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    1d7e:	f3c3 1340 	ubfx	r3, r3, #5, #1
    1d82:	2b00      	cmp	r3, #0
    1d84:	bf14      	ite	ne
    1d86:	2102      	movne	r1, #2
    1d88:	2101      	moveq	r1, #1
    1d8a:	4628      	mov	r0, r5
    1d8c:	4790      	blx	r2
	}

	if (ir & CAN_IR_RF0L) {
    1d8e:	f014 0f08 	tst.w	r4, #8
    1d92:	d114      	bne.n	1dbe <CAN1_Handler+0x6e>
		dev->cb.irq_handler(dev, CAN_IRQ_DO);
	}

	hri_can_write_IR_reg(dev->hw, ir);
    1d94:	682b      	ldr	r3, [r5, #0]
	((Can *)hw)->IR.reg = data;
    1d96:	651c      	str	r4, [r3, #80]	; 0x50
    1d98:	bd38      	pop	{r3, r4, r5, pc}
		dev->cb.rx_done(dev);
    1d9a:	68ab      	ldr	r3, [r5, #8]
    1d9c:	4628      	mov	r0, r5
    1d9e:	4798      	blx	r3
    1da0:	e7de      	b.n	1d60 <CAN1_Handler+0x10>
		dev->cb.tx_done(dev);
    1da2:	686b      	ldr	r3, [r5, #4]
    1da4:	4628      	mov	r0, r5
    1da6:	4798      	blx	r3
    1da8:	e7dd      	b.n	1d66 <CAN1_Handler+0x16>
		dev->cb.irq_handler(dev, CAN_IRQ_BO);
    1daa:	68eb      	ldr	r3, [r5, #12]
    1dac:	2103      	movs	r1, #3
    1dae:	4628      	mov	r0, r5
    1db0:	4798      	blx	r3
    1db2:	e7db      	b.n	1d6c <CAN1_Handler+0x1c>
		dev->cb.irq_handler(dev, CAN_IRQ_EW);
    1db4:	68eb      	ldr	r3, [r5, #12]
    1db6:	2100      	movs	r1, #0
    1db8:	4628      	mov	r0, r5
    1dba:	4798      	blx	r3
    1dbc:	e7d9      	b.n	1d72 <CAN1_Handler+0x22>
		dev->cb.irq_handler(dev, CAN_IRQ_DO);
    1dbe:	68eb      	ldr	r3, [r5, #12]
    1dc0:	2104      	movs	r1, #4
    1dc2:	4628      	mov	r0, r5
    1dc4:	4798      	blx	r3
    1dc6:	e7e5      	b.n	1d94 <CAN1_Handler+0x44>
    1dc8:	200006c8 	.word	0x200006c8

00001dcc <_get_cycles_for_ms>:
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
	return _get_cycles_for_ms_internal(ms, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
}
    1dcc:	f642 63e0 	movw	r3, #12000	; 0x2ee0
    1dd0:	fb03 f000 	mul.w	r0, r3, r0
    1dd4:	4770      	bx	lr
	...

00001dd8 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
    1dd8:	b510      	push	{r4, lr}
}

static inline void hri_nvmctrl_set_CTRLA_RWS_bf(const void *const hw, hri_nvmctrl_ctrla_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLA.reg |= NVMCTRL_CTRLA_RWS(mask);
    1dda:	4a12      	ldr	r2, [pc, #72]	; (1e24 <_init_chip+0x4c>)
    1ddc:	8813      	ldrh	r3, [r2, #0]
    1dde:	b29b      	uxth	r3, r3
    1de0:	8013      	strh	r3, [r2, #0]
	hri_nvmctrl_set_CTRLA_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);

	_osc32kctrl_init_sources();
    1de2:	4b11      	ldr	r3, [pc, #68]	; (1e28 <_init_chip+0x50>)
    1de4:	4798      	blx	r3
	_oscctrl_init_sources();
    1de6:	4b11      	ldr	r3, [pc, #68]	; (1e2c <_init_chip+0x54>)
    1de8:	4798      	blx	r3
	_mclk_init();
    1dea:	4b11      	ldr	r3, [pc, #68]	; (1e30 <_init_chip+0x58>)
    1dec:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
    1dee:	2008      	movs	r0, #8
    1df0:	4c10      	ldr	r4, [pc, #64]	; (1e34 <_init_chip+0x5c>)
    1df2:	47a0      	blx	r4
#endif
	_oscctrl_init_referenced_generators();
    1df4:	4b10      	ldr	r3, [pc, #64]	; (1e38 <_init_chip+0x60>)
    1df6:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
    1df8:	f640 70f7 	movw	r0, #4087	; 0xff7
    1dfc:	47a0      	blx	r4
	((Port *)hw)->Group[submodule_index].EVCTRL.reg |= mask;
    1dfe:	4b0f      	ldr	r3, [pc, #60]	; (1e3c <_init_chip+0x64>)
    1e00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    1e02:	62da      	str	r2, [r3, #44]	; 0x2c
    1e04:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
    1e08:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
    1e0c:	f8d3 212c 	ldr.w	r2, [r3, #300]	; 0x12c
    1e10:	f042 02ef 	orr.w	r2, r2, #239	; 0xef
    1e14:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
    1e18:	f8d3 21ac 	ldr.w	r2, [r3, #428]	; 0x1ac
    1e1c:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
    1e20:	bd10      	pop	{r4, pc}
    1e22:	bf00      	nop
    1e24:	41004000 	.word	0x41004000
    1e28:	00001f39 	.word	0x00001f39
    1e2c:	00001f4d 	.word	0x00001f4d
    1e30:	00001f2d 	.word	0x00001f2d
    1e34:	00001e9d 	.word	0x00001e9d
    1e38:	00001f69 	.word	0x00001f69
    1e3c:	41008000 	.word	0x41008000

00001e40 <_event_system_init>:

/**
 * \brief Initialize event system
 */
int32_t _event_system_init(void)
{
    1e40:	b430      	push	{r4, r5}
    1e42:	4814      	ldr	r0, [pc, #80]	; (1e94 <_event_system_init+0x54>)
    1e44:	f100 0543 	add.w	r5, r0, #67	; 0x43
    1e48:	4603      	mov	r3, r0
}

static inline void hri_evsys_write_USER_reg(const void *const hw, uint8_t index, hri_evsys_user_reg_t data)
{
	EVSYS_CRITICAL_SECTION_ENTER();
	((Evsys *)hw)->USER[index].reg = data;
    1e4a:	4c13      	ldr	r4, [pc, #76]	; (1e98 <_event_system_init+0x58>)
    1e4c:	1a1a      	subs	r2, r3, r0
	uint8_t i;
	/* configure user multiplexers */
	for (i = 0; i < EVSYS_USERS; i++) {
		hri_evsys_write_USER_reg(EVSYS, i, user_mux_confs[i]);
    1e4e:	f813 1b01 	ldrb.w	r1, [r3], #1
    1e52:	3248      	adds	r2, #72	; 0x48
    1e54:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
	for (i = 0; i < EVSYS_USERS; i++) {
    1e58:	42ab      	cmp	r3, r5
    1e5a:	d1f7      	bne.n	1e4c <_event_system_init+0xc>
    1e5c:	480d      	ldr	r0, [pc, #52]	; (1e94 <_event_system_init+0x54>)
    1e5e:	f100 0442 	add.w	r4, r0, #66	; 0x42
    1e62:	3080      	adds	r0, #128	; 0x80
    1e64:	2100      	movs	r1, #0
	}

	/* configure channels */
	for (i = 0; i < EVSYS_CHANNELS; i++) {
		hri_evsys_write_CHANNEL_reg(EVSYS, i, channel_confs[i]);
    1e66:	f834 3f02 	ldrh.w	r3, [r4, #2]!
    1e6a:	00ca      	lsls	r2, r1, #3
    1e6c:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    1e70:	f502 4260 	add.w	r2, r2, #57344	; 0xe000

static inline void hri_evsys_write_CHANNEL_reg(const void *const hw, uint8_t submodule_index,
                                               hri_evsys_channel_reg_t data)
{
	EVSYS_CRITICAL_SECTION_ENTER();
	((Evsys *)hw)->Channel[submodule_index].CHANNEL.reg = data;
    1e74:	6213      	str	r3, [r2, #32]
		hri_evsys_write_CHINTEN_reg(EVSYS, i, interrupt_cfg[i]);
    1e76:	f850 3f04 	ldr.w	r3, [r0, #4]!
    1e7a:	b2db      	uxtb	r3, r3
	((Evsys *)hw)->Channel[submodule_index].CHINTENSET.reg = data;
    1e7c:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
	((Evsys *)hw)->Channel[submodule_index].CHINTENCLR.reg = ~data;
    1e80:	43db      	mvns	r3, r3
    1e82:	b2db      	uxtb	r3, r3
    1e84:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
    1e88:	3101      	adds	r1, #1
	for (i = 0; i < EVSYS_CHANNELS; i++) {
    1e8a:	2920      	cmp	r1, #32
    1e8c:	d1eb      	bne.n	1e66 <_event_system_init+0x26>
	}

	return ERR_NONE;
}
    1e8e:	2000      	movs	r0, #0
    1e90:	bc30      	pop	{r4, r5}
    1e92:	4770      	bx	lr
    1e94:	000050f8 	.word	0x000050f8
    1e98:	4100e000 	.word	0x4100e000

00001e9c <_gclk_init_generators_by_fref>:

void _gclk_init_generators_by_fref(uint32_t bm)
{

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
    1e9c:	f010 0f01 	tst.w	r0, #1
    1ea0:	d008      	beq.n	1eb4 <_gclk_init_generators_by_fref+0x18>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    1ea2:	4a1d      	ldr	r2, [pc, #116]	; (1f18 <_gclk_init_generators_by_fref+0x7c>)
    1ea4:	4b1d      	ldr	r3, [pc, #116]	; (1f1c <_gclk_init_generators_by_fref+0x80>)
    1ea6:	621a      	str	r2, [r3, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    1ea8:	4619      	mov	r1, r3
    1eaa:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    1eae:	684b      	ldr	r3, [r1, #4]
    1eb0:	4213      	tst	r3, r2
    1eb2:	d1fc      	bne.n	1eae <_gclk_init_generators_by_fref+0x12>
		        | (CONF_GCLK_GENERATOR_1_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_1_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_2_CONFIG == 1
	if (bm & (1ul << 2)) {
    1eb4:	f010 0f04 	tst.w	r0, #4
    1eb8:	d008      	beq.n	1ecc <_gclk_init_generators_by_fref+0x30>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    1eba:	4a19      	ldr	r2, [pc, #100]	; (1f20 <_gclk_init_generators_by_fref+0x84>)
    1ebc:	4b17      	ldr	r3, [pc, #92]	; (1f1c <_gclk_init_generators_by_fref+0x80>)
    1ebe:	629a      	str	r2, [r3, #40]	; 0x28
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    1ec0:	4619      	mov	r1, r3
    1ec2:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    1ec6:	684b      	ldr	r3, [r1, #4]
    1ec8:	4213      	tst	r3, r2
    1eca:	d1fc      	bne.n	1ec6 <_gclk_init_generators_by_fref+0x2a>
		        | (CONF_GCLK_GENERATOR_2_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_2_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_3_CONFIG == 1
	if (bm & (1ul << 3)) {
    1ecc:	f010 0f08 	tst.w	r0, #8
    1ed0:	d008      	beq.n	1ee4 <_gclk_init_generators_by_fref+0x48>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    1ed2:	4a14      	ldr	r2, [pc, #80]	; (1f24 <_gclk_init_generators_by_fref+0x88>)
    1ed4:	4b11      	ldr	r3, [pc, #68]	; (1f1c <_gclk_init_generators_by_fref+0x80>)
    1ed6:	62da      	str	r2, [r3, #44]	; 0x2c
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    1ed8:	4619      	mov	r1, r3
    1eda:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    1ede:	684b      	ldr	r3, [r1, #4]
    1ee0:	4213      	tst	r3, r2
    1ee2:	d1fc      	bne.n	1ede <_gclk_init_generators_by_fref+0x42>
		        | (CONF_GCLK_GENERATOR_3_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_3_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_4_CONFIG == 1
	if (bm & (1ul << 4)) {
    1ee4:	f010 0f10 	tst.w	r0, #16
    1ee8:	d008      	beq.n	1efc <_gclk_init_generators_by_fref+0x60>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    1eea:	4a0f      	ldr	r2, [pc, #60]	; (1f28 <_gclk_init_generators_by_fref+0x8c>)
    1eec:	4b0b      	ldr	r3, [pc, #44]	; (1f1c <_gclk_init_generators_by_fref+0x80>)
    1eee:	631a      	str	r2, [r3, #48]	; 0x30
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    1ef0:	4619      	mov	r1, r3
    1ef2:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    1ef6:	684b      	ldr	r3, [r1, #4]
    1ef8:	4213      	tst	r3, r2
    1efa:	d1fc      	bne.n	1ef6 <_gclk_init_generators_by_fref+0x5a>
		        | (CONF_GCLK_GENERATOR_10_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_10_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_11_CONFIG == 1
	if (bm & (1ul << 11)) {
    1efc:	f410 6f00 	tst.w	r0, #2048	; 0x800
    1f00:	d008      	beq.n	1f14 <_gclk_init_generators_by_fref+0x78>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    1f02:	4a08      	ldr	r2, [pc, #32]	; (1f24 <_gclk_init_generators_by_fref+0x88>)
    1f04:	4b05      	ldr	r3, [pc, #20]	; (1f1c <_gclk_init_generators_by_fref+0x80>)
    1f06:	64da      	str	r2, [r3, #76]	; 0x4c
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    1f08:	4619      	mov	r1, r3
    1f0a:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    1f0e:	684b      	ldr	r3, [r1, #4]
    1f10:	4213      	tst	r3, r2
    1f12:	d1fc      	bne.n	1f0e <_gclk_init_generators_by_fref+0x72>
    1f14:	4770      	bx	lr
    1f16:	bf00      	nop
    1f18:	00010101 	.word	0x00010101
    1f1c:	40001c00 	.word	0x40001c00
    1f20:	00011908 	.word	0x00011908
    1f24:	00010904 	.word	0x00010904
    1f28:	00010106 	.word	0x00010106

00001f2c <_mclk_init>:
	((Mclk *)hw)->CPUDIV.reg = data;
    1f2c:	2201      	movs	r2, #1
    1f2e:	4b01      	ldr	r3, [pc, #4]	; (1f34 <_mclk_init+0x8>)
    1f30:	715a      	strb	r2, [r3, #5]
    1f32:	4770      	bx	lr
    1f34:	40000800 	.word	0x40000800

00001f38 <_osc32kctrl_init_sources>:
}

static inline hri_osc32kctrl_osculp32k_reg_t hri_osc32kctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Osc32kctrl *)hw)->OSCULP32K.reg;
    1f38:	4b03      	ldr	r3, [pc, #12]	; (1f48 <_osc32kctrl_init_sources+0x10>)
    1f3a:	69da      	ldr	r2, [r3, #28]
	calib = hri_osc32kctrl_read_OSCULP32K_CALIB_bf(hw);
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
#if CONF_OSCULP32K_CALIB_ENABLE == 1
	                                   OSC32KCTRL_OSCULP32K_CALIB(CONF_OSCULP32K_CALIB)
#else
	                                   OSC32KCTRL_OSCULP32K_CALIB(calib)
    1f3c:	f402 527c 	and.w	r2, r2, #16128	; 0x3f00
}

static inline void hri_osc32kctrl_write_OSCULP32K_reg(const void *const hw, hri_osc32kctrl_osculp32k_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->OSCULP32K.reg = data;
    1f40:	61da      	str	r2, [r3, #28]
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
    1f42:	2200      	movs	r2, #0
    1f44:	741a      	strb	r2, [r3, #16]
    1f46:	4770      	bx	lr
    1f48:	40001400 	.word	0x40001400

00001f4c <_oscctrl_init_sources>:
}

static inline void hri_oscctrl_write_XOSCCTRL_reg(const void *const hw, uint8_t index, hri_oscctrl_xoscctrl_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->XOSCCTRL[index].reg = data;
    1f4c:	4a04      	ldr	r2, [pc, #16]	; (1f60 <_oscctrl_init_sources+0x14>)
    1f4e:	4b05      	ldr	r3, [pc, #20]	; (1f64 <_oscctrl_init_sources+0x18>)
    1f50:	619a      	str	r2, [r3, #24]
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCRDY1) >> OSCCTRL_STATUS_XOSCRDY1_Pos;
    1f52:	461a      	mov	r2, r3
    1f54:	6913      	ldr	r3, [r2, #16]
	        | (CONF_XOSC1_XTALEN << OSCCTRL_XOSCCTRL_XTALEN_Pos) | (CONF_XOSC1_ENABLE << OSCCTRL_XOSCCTRL_ENABLE_Pos));
#endif

#if CONF_XOSC1_CONFIG == 1
#if CONF_XOSC1_ENABLE == 1
	while (!hri_oscctrl_get_STATUS_XOSCRDY1_bit(hw))
    1f56:	f013 0f02 	tst.w	r3, #2
    1f5a:	d0fb      	beq.n	1f54 <_oscctrl_init_sources+0x8>
	hri_oscctrl_set_XOSCCTRL_ONDEMAND_bit(hw, 1);
#endif
#endif

	(void)hw;
}
    1f5c:	4770      	bx	lr
    1f5e:	bf00      	nop
    1f60:	03002606 	.word	0x03002606
    1f64:	40001000 	.word	0x40001000

00001f68 <_oscctrl_init_referenced_generators>:
	tmp = ((Gclk *)hw)->GENCTRL[index].reg;
    1f68:	4a47      	ldr	r2, [pc, #284]	; (2088 <_oscctrl_init_referenced_generators+0x120>)
    1f6a:	6a13      	ldr	r3, [r2, #32]
	tmp &= ~GCLK_GENCTRL_SRC_Msk;
    1f6c:	f023 030f 	bic.w	r3, r3, #15
	tmp |= GCLK_GENCTRL_SRC(data);
    1f70:	f043 0304 	orr.w	r3, r3, #4
	((Gclk *)hw)->GENCTRL[index].reg = tmp;
    1f74:	6213      	str	r3, [r2, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    1f76:	4611      	mov	r1, r2
    1f78:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    1f7c:	684b      	ldr	r3, [r1, #4]
    1f7e:	4213      	tst	r3, r2
    1f80:	d1fc      	bne.n	1f7c <_oscctrl_init_referenced_generators+0x14>
	return (((Gclk *)hw)->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL0) >> GCLK_SYNCBUSY_GENCTRL0_Pos;
    1f82:	4a41      	ldr	r2, [pc, #260]	; (2088 <_oscctrl_init_referenced_generators+0x120>)
    1f84:	6853      	ldr	r3, [r2, #4]
{
	void *hw = (void *)OSCCTRL;

#if CONF_DFLL_CONFIG == 1
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, GCLK_GENCTRL_SRC_OSCULP32K);
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
    1f86:	f013 0f04 	tst.w	r3, #4
    1f8a:	d1fb      	bne.n	1f84 <_oscctrl_init_referenced_generators+0x1c>
}

static inline void hri_oscctrl_write_DFLLCTRLA_reg(const void *const hw, hri_oscctrl_dfllctrla_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLCTRLA.reg = data;
    1f8c:	4b3f      	ldr	r3, [pc, #252]	; (208c <_oscctrl_init_referenced_generators+0x124>)
    1f8e:	2200      	movs	r2, #0
    1f90:	771a      	strb	r2, [r3, #28]
}

static inline void hri_oscctrl_write_DFLLMUL_reg(const void *const hw, hri_oscctrl_dfllmul_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLMUL.reg = data;
    1f92:	4a3f      	ldr	r2, [pc, #252]	; (2090 <_oscctrl_init_referenced_generators+0x128>)
    1f94:	629a      	str	r2, [r3, #40]	; 0x28
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(const void *const hw)
{
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    1f96:	461a      	mov	r2, r3
    1f98:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
#endif

	hri_oscctrl_write_DFLLMUL_reg(hw,
	                              OSCCTRL_DFLLMUL_CSTEP(CONF_DFLL_CSTEP) | OSCCTRL_DFLLMUL_FSTEP(CONF_DFLL_FSTEP)
	                                  | OSCCTRL_DFLLMUL_MUL(CONF_DFLL_MUL));
	while (hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(hw))
    1f9c:	f013 0f10 	tst.w	r3, #16
    1fa0:	d1fa      	bne.n	1f98 <_oscctrl_init_referenced_generators+0x30>
	((Oscctrl *)hw)->DFLLCTRLB.reg = data;
    1fa2:	2200      	movs	r2, #0
    1fa4:	4b39      	ldr	r3, [pc, #228]	; (208c <_oscctrl_init_referenced_generators+0x124>)
    1fa6:	f883 2020 	strb.w	r2, [r3, #32]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    1faa:	461a      	mov	r2, r3
    1fac:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
		;

	hri_oscctrl_write_DFLLCTRLB_reg(hw, 0);
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    1fb0:	f013 0f04 	tst.w	r3, #4
    1fb4:	d1fa      	bne.n	1fac <_oscctrl_init_referenced_generators+0x44>
	((Oscctrl *)hw)->DFLLCTRLA.reg = data;
    1fb6:	2202      	movs	r2, #2
    1fb8:	4b34      	ldr	r3, [pc, #208]	; (208c <_oscctrl_init_referenced_generators+0x124>)
    1fba:	771a      	strb	r2, [r3, #28]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    1fbc:	461a      	mov	r2, r3
    1fbe:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
		;

	tmp = (CONF_DFLL_RUNSTDBY << OSCCTRL_DFLLCTRLA_RUNSTDBY_Pos) | OSCCTRL_DFLLCTRLA_ENABLE;
	hri_oscctrl_write_DFLLCTRLA_reg(hw, tmp);
	while (hri_oscctrl_get_DFLLSYNC_ENABLE_bit(hw))
    1fc2:	f013 0f02 	tst.w	r3, #2
    1fc6:	d1fa      	bne.n	1fbe <_oscctrl_init_referenced_generators+0x56>
	return ((Oscctrl *)hw)->DFLLVAL.reg;
    1fc8:	4b30      	ldr	r3, [pc, #192]	; (208c <_oscctrl_init_referenced_generators+0x124>)
    1fca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	((Oscctrl *)hw)->DFLLVAL.reg = data;
    1fcc:	625a      	str	r2, [r3, #36]	; 0x24
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    1fce:	461a      	mov	r2, r3
    1fd0:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c

#if CONF_DFLL_OVERWRITE_CALIBRATION == 1
	hri_oscctrl_write_DFLLVAL_reg(hw, OSCCTRL_DFLLVAL_COARSE(CONF_DFLL_COARSE) | OSCCTRL_DFLLVAL_FINE(CONF_DFLL_FINE));
#endif
	hri_oscctrl_write_DFLLVAL_reg(hw, hri_oscctrl_read_DFLLVAL_reg(hw));
	while (hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit(hw))
    1fd4:	f013 0f08 	tst.w	r3, #8
    1fd8:	d1fa      	bne.n	1fd0 <_oscctrl_init_referenced_generators+0x68>
	((Oscctrl *)hw)->DFLLCTRLB.reg = data;
    1fda:	2219      	movs	r2, #25
    1fdc:	4b2b      	ldr	r3, [pc, #172]	; (208c <_oscctrl_init_referenced_generators+0x124>)
    1fde:	f883 2020 	strb.w	r2, [r3, #32]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    1fe2:	461a      	mov	r2, r3
    1fe4:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
	tmp = (CONF_DFLL_WAITLOCK << OSCCTRL_DFLLCTRLB_WAITLOCK_Pos) | (CONF_DFLL_BPLCKC << OSCCTRL_DFLLCTRLB_BPLCKC_Pos)
	      | (CONF_DFLL_QLDIS << OSCCTRL_DFLLCTRLB_QLDIS_Pos) | (CONF_DFLL_CCDIS << OSCCTRL_DFLLCTRLB_CCDIS_Pos)
	      | (CONF_DFLL_USBCRM << OSCCTRL_DFLLCTRLB_USBCRM_Pos) | (CONF_DFLL_LLAW << OSCCTRL_DFLLCTRLB_LLAW_Pos)
	      | (CONF_DFLL_STABLE << OSCCTRL_DFLLCTRLB_STABLE_Pos) | (CONF_DFLL_MODE << OSCCTRL_DFLLCTRLB_MODE_Pos) | 0;
	hri_oscctrl_write_DFLLCTRLB_reg(hw, tmp);
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    1fe8:	f013 0f04 	tst.w	r3, #4
    1fec:	d1fa      	bne.n	1fe4 <_oscctrl_init_referenced_generators+0x7c>
	((Gclk *)hw)->PCHCTRL[index].reg = data;
    1fee:	2243      	movs	r2, #67	; 0x43
    1ff0:	4b25      	ldr	r3, [pc, #148]	; (2088 <_oscctrl_init_referenced_generators+0x120>)
    1ff2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLRATIO.reg = data;
    1ff6:	4a27      	ldr	r2, [pc, #156]	; (2094 <_oscctrl_init_referenced_generators+0x12c>)
    1ff8:	f5a3 6340 	sub.w	r3, r3, #3072	; 0xc00
    1ffc:	649a      	str	r2, [r3, #72]	; 0x48
	while (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg & reg) {
    1ffe:	461a      	mov	r2, r3
    2000:	6d13      	ldr	r3, [r2, #80]	; 0x50
    2002:	f013 0f06 	tst.w	r3, #6
    2006:	d1fb      	bne.n	2000 <_oscctrl_init_referenced_generators+0x98>
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLB.reg = data;
    2008:	4b20      	ldr	r3, [pc, #128]	; (208c <_oscctrl_init_referenced_generators+0x124>)
    200a:	f44f 6200 	mov.w	r2, #2048	; 0x800
    200e:	64da      	str	r2, [r3, #76]	; 0x4c
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLA.reg = data;
    2010:	2202      	movs	r2, #2
    2012:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	while (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg & reg) {
    2016:	461a      	mov	r2, r3
    2018:	6d13      	ldr	r3, [r2, #80]	; 0x50
    201a:	f013 0f02 	tst.w	r3, #2
    201e:	d1fb      	bne.n	2018 <_oscctrl_init_referenced_generators+0xb0>
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
    2020:	4b1a      	ldr	r3, [pc, #104]	; (208c <_oscctrl_init_referenced_generators+0x124>)
    2022:	f893 3020 	ldrb.w	r3, [r3, #32]
	                                (CONF_FDPLL1_RUNSTDBY << OSCCTRL_DPLLCTRLA_RUNSTDBY_Pos)
	                                    | (CONF_FDPLL1_ENABLE << OSCCTRL_DPLLCTRLA_ENABLE_Pos));
#endif

#if CONF_DFLL_CONFIG == 1
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(hw)) {
    2026:	f013 0f01 	tst.w	r3, #1
    202a:	d026      	beq.n	207a <_oscctrl_init_referenced_generators+0x112>
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    202c:	4a17      	ldr	r2, [pc, #92]	; (208c <_oscctrl_init_referenced_generators+0x124>)
    202e:	6913      	ldr	r3, [r2, #16]
	tmp &= mask;
    2030:	f403 6310 	and.w	r3, r3, #2304	; 0x900
		hri_oscctrl_status_reg_t status_mask = OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC;

		while (hri_oscctrl_get_STATUS_reg(hw, status_mask) != status_mask)
    2034:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
    2038:	d1f9      	bne.n	202e <_oscctrl_init_referenced_generators+0xc6>
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_LOCK)
    203a:	4b14      	ldr	r3, [pc, #80]	; (208c <_oscctrl_init_referenced_generators+0x124>)
    203c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
#endif
#endif

#if CONF_FDPLL1_CONFIG == 1
#if CONF_FDPLL1_ENABLE == 1
	while (!(hri_oscctrl_get_DPLLSTATUS_LOCK_bit(hw, 1) || hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(hw, 1)))
    203e:	f012 0f01 	tst.w	r2, #1
    2042:	d103      	bne.n	204c <_oscctrl_init_referenced_generators+0xe4>
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_CLKRDY)
    2044:	6d5a      	ldr	r2, [r3, #84]	; 0x54
    2046:	f012 0f02 	tst.w	r2, #2
    204a:	d0f7      	beq.n	203c <_oscctrl_init_referenced_generators+0xd4>
	return ((Gclk *)hw)->SYNCBUSY.reg;
    204c:	4a0e      	ldr	r2, [pc, #56]	; (2088 <_oscctrl_init_referenced_generators+0x120>)
    204e:	6853      	ldr	r3, [r2, #4]
	hri_oscctrl_set_DPLLCTRLA_ONDEMAND_bit(hw, 1);
#endif
#endif

#if CONF_DFLL_CONFIG == 1
	while (hri_gclk_read_SYNCBUSY_reg(GCLK))
    2050:	2b00      	cmp	r3, #0
    2052:	d1fc      	bne.n	204e <_oscctrl_init_referenced_generators+0xe6>
	tmp = ((Gclk *)hw)->GENCTRL[index].reg;
    2054:	4a0c      	ldr	r2, [pc, #48]	; (2088 <_oscctrl_init_referenced_generators+0x120>)
    2056:	6a13      	ldr	r3, [r2, #32]
	tmp &= ~GCLK_GENCTRL_SRC_Msk;
    2058:	f023 030f 	bic.w	r3, r3, #15
	tmp |= GCLK_GENCTRL_SRC(data);
    205c:	f043 0301 	orr.w	r3, r3, #1
	((Gclk *)hw)->GENCTRL[index].reg = tmp;
    2060:	6213      	str	r3, [r2, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    2062:	4611      	mov	r1, r2
    2064:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    2068:	684b      	ldr	r3, [r1, #4]
    206a:	4213      	tst	r3, r2
    206c:	d1fc      	bne.n	2068 <_oscctrl_init_referenced_generators+0x100>
	return (((Gclk *)hw)->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL0) >> GCLK_SYNCBUSY_GENCTRL0_Pos;
    206e:	4a06      	ldr	r2, [pc, #24]	; (2088 <_oscctrl_init_referenced_generators+0x120>)
    2070:	6853      	ldr	r3, [r2, #4]
		;
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, CONF_GCLK_GEN_0_SOURCE);
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
    2072:	f013 0f04 	tst.w	r3, #4
    2076:	d1fb      	bne.n	2070 <_oscctrl_init_referenced_generators+0x108>
		;
#endif
	(void)hw;
}
    2078:	4770      	bx	lr
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_DFLLRDY) >> OSCCTRL_STATUS_DFLLRDY_Pos;
    207a:	4a04      	ldr	r2, [pc, #16]	; (208c <_oscctrl_init_referenced_generators+0x124>)
    207c:	6913      	ldr	r3, [r2, #16]
		while (!hri_oscctrl_get_STATUS_DFLLRDY_bit(hw))
    207e:	f413 7f80 	tst.w	r3, #256	; 0x100
    2082:	d0fb      	beq.n	207c <_oscctrl_init_referenced_generators+0x114>
    2084:	e7d9      	b.n	203a <_oscctrl_init_referenced_generators+0xd2>
    2086:	bf00      	nop
    2088:	40001c00 	.word	0x40001c00
    208c:	40001000 	.word	0x40001000
    2090:	0401bb80 	.word	0x0401bb80
    2094:	000307a0 	.word	0x000307a0

00002098 <_timer_init>:

/**
 * \brief Initialize Timer
 */
int32_t _timer_init(struct _timer_device *const dev, void *const hw)
{
    2098:	b538      	push	{r3, r4, r5, lr}
    209a:	460c      	mov	r4, r1
	ASSERT(dev);
    209c:	4605      	mov	r5, r0
    209e:	2230      	movs	r2, #48	; 0x30
    20a0:	4917      	ldr	r1, [pc, #92]	; (2100 <_timer_init+0x68>)
    20a2:	3000      	adds	r0, #0
    20a4:	bf18      	it	ne
    20a6:	2001      	movne	r0, #1
    20a8:	4b16      	ldr	r3, [pc, #88]	; (2104 <_timer_init+0x6c>)
    20aa:	4798      	blx	r3

	dev->hw = hw;
    20ac:	60ec      	str	r4, [r5, #12]
}

static inline void hri_rtcmode0_write_CTRLA_reg(const void *const hw, hri_rtcmode0_ctrla_reg_t data)
{
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg = data;
    20ae:	2301      	movs	r3, #1
    20b0:	8023      	strh	r3, [r4, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    20b2:	f248 0203 	movw	r2, #32771	; 0x8003
    20b6:	6923      	ldr	r3, [r4, #16]
    20b8:	4213      	tst	r3, r2
    20ba:	d1fc      	bne.n	20b6 <_timer_init+0x1e>

	hri_rtcmode0_write_CTRLA_reg(dev->hw, RTC_MODE0_CTRLA_SWRST);
	hri_rtcmode0_wait_for_sync(dev->hw, RTC_MODE0_SYNCBUSY_SWRST);
    20bc:	68ea      	ldr	r2, [r5, #12]
    20be:	6913      	ldr	r3, [r2, #16]
    20c0:	f013 0f01 	tst.w	r3, #1
    20c4:	d1fb      	bne.n	20be <_timer_init+0x26>
}

static inline void hri_rtcmode0_write_EVCTRL_reg(const void *const hw, hri_rtcmode0_evctrl_reg_t data)
{
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.EVCTRL.reg = data;
    20c6:	f44f 7380 	mov.w	r3, #256	; 0x100
    20ca:	6053      	str	r3, [r2, #4]
	        | (CONF_RTC_TAMPEREO << RTC_MODE0_EVCTRL_TAMPEREO_Pos)
	        | (CONF_RTC_TAMPEVEI << RTC_MODE0_EVCTRL_TAMPEVEI_Pos) | (CONF_RTC_OVFEO << RTC_MODE0_EVCTRL_OVFEO_Pos));
#endif

	hri_rtcmode0_write_CTRLA_reg(
	    dev->hw, RTC_MODE0_CTRLA_PRESCALER(CONF_RTC_PRESCALER) | RTC_MODE0_CTRLA_COUNTSYNC | RTC_MODE0_CTRLA_MATCHCLR);
    20cc:	68ea      	ldr	r2, [r5, #12]
	((Rtc *)hw)->MODE0.CTRLA.reg = data;
    20ce:	f248 0380 	movw	r3, #32896	; 0x8080
    20d2:	8013      	strh	r3, [r2, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    20d4:	f248 0103 	movw	r1, #32771	; 0x8003
    20d8:	6913      	ldr	r3, [r2, #16]
    20da:	420b      	tst	r3, r1
    20dc:	d1fc      	bne.n	20d8 <_timer_init+0x40>
	hri_rtcmode0_write_COMP_reg(dev->hw, 0, CONF_RTC_COMP_VAL);
    20de:	68ea      	ldr	r2, [r5, #12]
}

static inline void hri_rtcmode0_write_COMP_reg(const void *const hw, uint8_t index, hri_rtcmode0_comp_reg_t data)
{
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.COMP[index].reg = data;
    20e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
    20e4:	6213      	str	r3, [r2, #32]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    20e6:	6913      	ldr	r3, [r2, #16]
    20e8:	f013 0f60 	tst.w	r3, #96	; 0x60
    20ec:	d1fb      	bne.n	20e6 <_timer_init+0x4e>
	hri_rtcmode0_set_INTEN_CMP0_bit(dev->hw);
    20ee:	68eb      	ldr	r3, [r5, #12]
	((Rtc *)hw)->MODE0.INTENSET.reg = RTC_MODE0_INTENSET_CMP0;
    20f0:	f44f 7280 	mov.w	r2, #256	; 0x100
    20f4:	815a      	strh	r2, [r3, #10]

	_rtc_dev = dev;
    20f6:	4b04      	ldr	r3, [pc, #16]	; (2108 <_timer_init+0x70>)
    20f8:	601d      	str	r5, [r3, #0]

	return ERR_NONE;
}
    20fa:	2000      	movs	r0, #0
    20fc:	bd38      	pop	{r3, r4, r5, pc}
    20fe:	bf00      	nop
    2100:	000051fc 	.word	0x000051fc
    2104:	00001b91 	.word	0x00001b91
    2108:	200006f4 	.word	0x200006f4

0000210c <_rtc_get_timer>:
 * \brief Retrieve timer helper functions
 */
struct _timer_hpl_interface *_rtc_get_timer(void)
{
	return NULL;
}
    210c:	2000      	movs	r0, #0
    210e:	4770      	bx	lr

00002110 <RTC_Handler>:

/**
 * \brief Rtc interrupt handler
 */
void RTC_Handler(void)
{
    2110:	b510      	push	{r4, lr}
	_rtc_timer_interrupt_handler(_rtc_dev);
    2112:	4b08      	ldr	r3, [pc, #32]	; (2134 <RTC_Handler+0x24>)
    2114:	681c      	ldr	r4, [r3, #0]
	uint16_t flag = hri_rtcmode0_read_INTFLAG_reg(dev->hw);
    2116:	68e3      	ldr	r3, [r4, #12]
	return ((Rtc *)hw)->MODE0.INTFLAG.reg;
    2118:	899b      	ldrh	r3, [r3, #12]
	if (flag & RTC_MODE0_INTFLAG_CMP0) {
    211a:	f413 7f80 	tst.w	r3, #256	; 0x100
    211e:	d007      	beq.n	2130 <RTC_Handler+0x20>
		if (dev->timer_cb.period_expired) {
    2120:	6823      	ldr	r3, [r4, #0]
    2122:	b10b      	cbz	r3, 2128 <RTC_Handler+0x18>
			dev->timer_cb.period_expired(dev);
    2124:	4620      	mov	r0, r4
    2126:	4798      	blx	r3
		hri_rtcmode0_clear_interrupt_CMP0_bit(dev->hw);
    2128:	68e3      	ldr	r3, [r4, #12]
	((Rtc *)hw)->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_CMP0;
    212a:	f44f 7280 	mov.w	r2, #256	; 0x100
    212e:	819a      	strh	r2, [r3, #12]
    2130:	bd10      	pop	{r4, pc}
    2132:	bf00      	nop
    2134:	200006f4 	.word	0x200006f4

00002138 <_sercom_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given sercom hardware instance
 */
static uint8_t _sercom_get_hardware_index(const void *const hw)
{
    2138:	b470      	push	{r4, r5, r6}
    213a:	b089      	sub	sp, #36	; 0x24
    213c:	4606      	mov	r6, r0
	Sercom *const sercom_modules[] = SERCOM_INSTS;
    213e:	466c      	mov	r4, sp
    2140:	4d0d      	ldr	r5, [pc, #52]	; (2178 <_sercom_get_hardware_index+0x40>)
    2142:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    2144:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    2146:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    214a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	/* Find index for SERCOM instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
    214e:	9b00      	ldr	r3, [sp, #0]
    2150:	42b3      	cmp	r3, r6
    2152:	d00d      	beq.n	2170 <_sercom_get_hardware_index+0x38>
    2154:	4631      	mov	r1, r6
    2156:	ab01      	add	r3, sp, #4
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    2158:	2001      	movs	r0, #1
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
    215a:	f853 2b04 	ldr.w	r2, [r3], #4
    215e:	428a      	cmp	r2, r1
    2160:	d007      	beq.n	2172 <_sercom_get_hardware_index+0x3a>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    2162:	3001      	adds	r0, #1
    2164:	2808      	cmp	r0, #8
    2166:	d1f8      	bne.n	215a <_sercom_get_hardware_index+0x22>
			return i;
		}
	}
	return 0;
    2168:	2000      	movs	r0, #0
}
    216a:	b009      	add	sp, #36	; 0x24
    216c:	bc70      	pop	{r4, r5, r6}
    216e:	4770      	bx	lr
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    2170:	2000      	movs	r0, #0
			return i;
    2172:	b2c0      	uxtb	r0, r0
    2174:	e7f9      	b.n	216a <_sercom_get_hardware_index+0x32>
    2176:	bf00      	nop
    2178:	00005214 	.word	0x00005214

0000217c <_sercom_init_irq_param>:
 * \brief Init irq param with the given sercom hardware instance
 */
static void _sercom_init_irq_param(const void *const hw, void *dev)
{

	if (hw == SERCOM1) {
    217c:	4b05      	ldr	r3, [pc, #20]	; (2194 <_sercom_init_irq_param+0x18>)
    217e:	4298      	cmp	r0, r3
    2180:	d005      	beq.n	218e <_sercom_init_irq_param+0x12>
		_sercom1_dev = (struct _i2c_m_async_device *)dev;
	}

	if (hw == SERCOM5) {
    2182:	4b05      	ldr	r3, [pc, #20]	; (2198 <_sercom_init_irq_param+0x1c>)
    2184:	4298      	cmp	r0, r3
		_sercom5_dev = (struct _i2c_m_async_device *)dev;
    2186:	bf04      	itt	eq
    2188:	4b04      	ldreq	r3, [pc, #16]	; (219c <_sercom_init_irq_param+0x20>)
    218a:	6059      	streq	r1, [r3, #4]
    218c:	4770      	bx	lr
		_sercom1_dev = (struct _i2c_m_async_device *)dev;
    218e:	4b03      	ldr	r3, [pc, #12]	; (219c <_sercom_init_irq_param+0x20>)
    2190:	6019      	str	r1, [r3, #0]
    2192:	4770      	bx	lr
    2194:	40003400 	.word	0x40003400
    2198:	43000400 	.word	0x43000400
    219c:	200006f8 	.word	0x200006f8

000021a0 <_sercom_get_irq_num>:

/**
 * \brief Retrieve IRQ number for the given hardware instance
 */
static uint8_t _sercom_get_irq_num(const void *const hw)
{
    21a0:	b508      	push	{r3, lr}
	return SERCOM0_0_IRQn + (_sercom_get_hardware_index(hw) << 2);
    21a2:	4b03      	ldr	r3, [pc, #12]	; (21b0 <_sercom_get_irq_num+0x10>)
    21a4:	4798      	blx	r3
    21a6:	0080      	lsls	r0, r0, #2
    21a8:	302e      	adds	r0, #46	; 0x2e
}
    21aa:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
    21ae:	bd08      	pop	{r3, pc}
    21b0:	00002139 	.word	0x00002139

000021b4 <_get_i2cm_index>:
{
    21b4:	b508      	push	{r3, lr}
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
    21b6:	4b0a      	ldr	r3, [pc, #40]	; (21e0 <_get_i2cm_index+0x2c>)
    21b8:	4798      	blx	r3
		if (_i2cms[i].number == sercom_offset) {
    21ba:	2801      	cmp	r0, #1
    21bc:	d00c      	beq.n	21d8 <_get_i2cm_index+0x24>
    21be:	2805      	cmp	r0, #5
    21c0:	bf08      	it	eq
    21c2:	2001      	moveq	r0, #1
    21c4:	d009      	beq.n	21da <_get_i2cm_index+0x26>
	ASSERT(false);
    21c6:	f240 32b2 	movw	r2, #946	; 0x3b2
    21ca:	4906      	ldr	r1, [pc, #24]	; (21e4 <_get_i2cm_index+0x30>)
    21cc:	2000      	movs	r0, #0
    21ce:	4b06      	ldr	r3, [pc, #24]	; (21e8 <_get_i2cm_index+0x34>)
    21d0:	4798      	blx	r3
	return -1;
    21d2:	f04f 30ff 	mov.w	r0, #4294967295
}
    21d6:	bd08      	pop	{r3, pc}
	for (i = 0; i < ARRAY_SIZE(_i2cms); i++) {
    21d8:	2000      	movs	r0, #0
			return i;
    21da:	b240      	sxtb	r0, r0
    21dc:	bd08      	pop	{r3, pc}
    21de:	bf00      	nop
    21e0:	00002139 	.word	0x00002139
    21e4:	00005288 	.word	0x00005288
    21e8:	00001b91 	.word	0x00001b91

000021ec <_i2c_m_sync_init_impl>:
	}
	return ERR_NONE;
}

static int32_t _i2c_m_sync_init_impl(struct _i2c_m_service *const service, void *const hw)
{
    21ec:	b538      	push	{r3, r4, r5, lr}
    21ee:	4605      	mov	r5, r0
    21f0:	460c      	mov	r4, r1
	uint8_t i = _get_i2cm_index(hw);
    21f2:	4608      	mov	r0, r1
    21f4:	4b32      	ldr	r3, [pc, #200]	; (22c0 <_i2c_m_sync_init_impl+0xd4>)
    21f6:	4798      	blx	r3
    21f8:	b2c0      	uxtb	r0, r0
	};
}

static inline bool hri_sercomi2cm_is_syncing(const void *const hw, hri_sercomi2cm_syncbusy_reg_t reg)
{
	return ((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg;
    21fa:	69e3      	ldr	r3, [r4, #28]

	if (!hri_sercomi2cm_is_syncing(hw, SERCOM_I2CM_SYNCBUSY_SWRST)) {
    21fc:	f013 0f01 	tst.w	r3, #1
    2200:	d122      	bne.n	2248 <_i2c_m_sync_init_impl+0x5c>
		uint32_t mode = _i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_MODE_Msk;
    2202:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    2206:	4a2f      	ldr	r2, [pc, #188]	; (22c4 <_i2c_m_sync_init_impl+0xd8>)
    2208:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    220c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    220e:	f002 021c 	and.w	r2, r2, #28
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    2212:	69e3      	ldr	r3, [r4, #28]
    2214:	f013 0f03 	tst.w	r3, #3
    2218:	d1fb      	bne.n	2212 <_i2c_m_sync_init_impl+0x26>
static inline hri_sercomi2cm_ctrla_reg_t hri_sercomi2cm_get_CTRLA_reg(const void *const          hw,
                                                                      hri_sercomi2cm_ctrla_reg_t mask)
{
	uint32_t tmp;
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    221a:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomi2cm_get_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_ENABLE)) {
    221c:	f013 0f02 	tst.w	r3, #2
    2220:	d00b      	beq.n	223a <_i2c_m_sync_init_impl+0x4e>
	((Sercom *)hw)->I2CM.CTRLA.reg &= ~SERCOM_I2CM_CTRLA_ENABLE;
    2222:	6823      	ldr	r3, [r4, #0]
    2224:	f023 0302 	bic.w	r3, r3, #2
    2228:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    222a:	69e3      	ldr	r3, [r4, #28]
    222c:	f013 0f03 	tst.w	r3, #3
    2230:	d1fb      	bne.n	222a <_i2c_m_sync_init_impl+0x3e>
    2232:	69e3      	ldr	r3, [r4, #28]
    2234:	f013 0f02 	tst.w	r3, #2
    2238:	d1fb      	bne.n	2232 <_i2c_m_sync_init_impl+0x46>
			hri_sercomi2cm_clear_CTRLA_ENABLE_bit(hw);
			hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_ENABLE);
		}
		hri_sercomi2cm_write_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_SWRST | mode);
    223a:	f042 0201 	orr.w	r2, r2, #1
}

static inline void hri_sercomi2cm_write_CTRLA_reg(const void *const hw, hri_sercomi2cm_ctrla_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLA.reg = data;
    223e:	6022      	str	r2, [r4, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    2240:	69e3      	ldr	r3, [r4, #28]
    2242:	f013 0f03 	tst.w	r3, #3
    2246:	d1fb      	bne.n	2240 <_i2c_m_sync_init_impl+0x54>
    2248:	69e3      	ldr	r3, [r4, #28]
    224a:	f013 0f01 	tst.w	r3, #1
    224e:	d1fb      	bne.n	2248 <_i2c_m_sync_init_impl+0x5c>
	}
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST);

	hri_sercomi2cm_write_CTRLA_reg(hw, _i2cms[i].ctrl_a);
    2250:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    2254:	4a1b      	ldr	r2, [pc, #108]	; (22c4 <_i2c_m_sync_init_impl+0xd8>)
    2256:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    225a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	((Sercom *)hw)->I2CM.CTRLA.reg = data;
    225c:	6022      	str	r2, [r4, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    225e:	69e3      	ldr	r3, [r4, #28]
    2260:	f013 0f03 	tst.w	r3, #3
    2264:	d1fb      	bne.n	225e <_i2c_m_sync_init_impl+0x72>
	hri_sercomi2cm_write_CTRLB_reg(hw, _i2cms[i].ctrl_b);
    2266:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    226a:	4916      	ldr	r1, [pc, #88]	; (22c4 <_i2c_m_sync_init_impl+0xd8>)
    226c:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
    2270:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}

static inline void hri_sercomi2cm_write_CTRLB_reg(const void *const hw, hri_sercomi2cm_ctrlb_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg = data;
    2272:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    2274:	69e3      	ldr	r3, [r4, #28]
    2276:	f013 0f04 	tst.w	r3, #4
    227a:	d1fb      	bne.n	2274 <_i2c_m_sync_init_impl+0x88>
	hri_sercomi2cm_write_BAUD_reg(hw, _i2cms[i].baud);
    227c:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    2280:	4910      	ldr	r1, [pc, #64]	; (22c4 <_i2c_m_sync_init_impl+0xd8>)
    2282:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
    2286:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}

static inline void hri_sercomi2cm_write_BAUD_reg(const void *const hw, hri_sercomi2cm_baud_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.BAUD.reg = data;
    2288:	60e3      	str	r3, [r4, #12]

	service->mode = (_i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_SPEED_Msk) >> SERCOM_I2CM_CTRLA_SPEED_Pos;
    228a:	f3c2 6301 	ubfx	r3, r2, #24, #2
    228e:	81ab      	strh	r3, [r5, #12]

static inline void hri_sercomi2cm_write_ADDR_HS_bit(const void *const hw, bool value)
{
	uint32_t tmp;
	SERCOM_CRITICAL_SECTION_ENTER();
	tmp = ((Sercom *)hw)->I2CM.ADDR.reg;
    2290:	6a62      	ldr	r2, [r4, #36]	; 0x24
	tmp &= ~SERCOM_I2CM_ADDR_HS;
    2292:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
	hri_sercomi2cm_write_ADDR_HS_bit(hw, service->mode < I2C_HS ? 0 : 1);
    2296:	2b01      	cmp	r3, #1
    2298:	bf94      	ite	ls
    229a:	2300      	movls	r3, #0
    229c:	2301      	movhi	r3, #1
	tmp |= value << SERCOM_I2CM_ADDR_HS_Pos;
    229e:	ea42 3383 	orr.w	r3, r2, r3, lsl #14
	((Sercom *)hw)->I2CM.ADDR.reg = tmp;
    22a2:	6263      	str	r3, [r4, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    22a4:	69e3      	ldr	r3, [r4, #28]
    22a6:	f013 0f04 	tst.w	r3, #4
    22aa:	d1fb      	bne.n	22a4 <_i2c_m_sync_init_impl+0xb8>

	service->trise = _i2cms[i].trise;
    22ac:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    22b0:	4b04      	ldr	r3, [pc, #16]	; (22c4 <_i2c_m_sync_init_impl+0xd8>)
    22b2:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    22b6:	8e43      	ldrh	r3, [r0, #50]	; 0x32
    22b8:	81eb      	strh	r3, [r5, #14]

	return ERR_NONE;
}
    22ba:	2000      	movs	r0, #0
    22bc:	bd38      	pop	{r3, r4, r5, pc}
    22be:	bf00      	nop
    22c0:	000021b5 	.word	0x000021b5
    22c4:	00005214 	.word	0x00005214

000022c8 <_sercom_i2c_m_irq_handler>:
{
    22c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    22cc:	4605      	mov	r5, r0
	void *   hw    = i2c_dev->hw;
    22ce:	6904      	ldr	r4, [r0, #16]
	return ((Sercom *)hw)->I2CM.INTFLAG.reg;
    22d0:	7e26      	ldrb	r6, [r4, #24]
    22d2:	b2f6      	uxtb	r6, r6
	ASSERT(i2c_dev);
    22d4:	f8df 8234 	ldr.w	r8, [pc, #564]	; 250c <_sercom_i2c_m_irq_handler+0x244>
    22d8:	f240 4224 	movw	r2, #1060	; 0x424
    22dc:	4641      	mov	r1, r8
    22de:	3000      	adds	r0, #0
    22e0:	bf18      	it	ne
    22e2:	2001      	movne	r0, #1
    22e4:	4f88      	ldr	r7, [pc, #544]	; (2508 <_sercom_i2c_m_irq_handler+0x240>)
    22e6:	47b8      	blx	r7
	ASSERT(i2c_dev->hw);
    22e8:	6928      	ldr	r0, [r5, #16]
    22ea:	f240 4225 	movw	r2, #1061	; 0x425
    22ee:	4641      	mov	r1, r8
    22f0:	3000      	adds	r0, #0
    22f2:	bf18      	it	ne
    22f4:	2001      	movne	r0, #1
    22f6:	47b8      	blx	r7
	while (!(flags & ERROR_FLAG)) {
    22f8:	f016 0f80 	tst.w	r6, #128	; 0x80
    22fc:	f040 80f6 	bne.w	24ec <_sercom_i2c_m_irq_handler+0x224>
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    2300:	6821      	ldr	r1, [r4, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    2302:	69e3      	ldr	r3, [r4, #28]
    2304:	f013 0f04 	tst.w	r3, #4
    2308:	d1fb      	bne.n	2302 <_sercom_i2c_m_irq_handler+0x3a>
}

static inline hri_sercomi2cm_status_reg_t hri_sercomi2cm_read_STATUS_reg(const void *const hw)
{
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	return ((Sercom *)hw)->I2CM.STATUS.reg;
    230a:	8b63      	ldrh	r3, [r4, #26]
    230c:	b29b      	uxth	r3, r3
	if (flags & MB_FLAG) {
    230e:	f016 0f01 	tst.w	r6, #1
    2312:	f000 8092 	beq.w	243a <_sercom_i2c_m_irq_handler+0x172>
		if (status & SERCOM_I2CM_STATUS_ARBLOST) {
    2316:	f013 0f02 	tst.w	r3, #2
    231a:	d024      	beq.n	2366 <_sercom_i2c_m_irq_handler+0x9e>
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
    231c:	2201      	movs	r2, #1
    231e:	7622      	strb	r2, [r4, #24]
			msg->flags |= I2C_M_FAIL;
    2320:	886a      	ldrh	r2, [r5, #2]
    2322:	b292      	uxth	r2, r2
    2324:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
    2328:	806a      	strh	r2, [r5, #2]
			msg->flags &= ~I2C_M_BUSY;
    232a:	886a      	ldrh	r2, [r5, #2]
    232c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
    2330:	0412      	lsls	r2, r2, #16
    2332:	0c12      	lsrs	r2, r2, #16
    2334:	806a      	strh	r2, [r5, #2]
			if (status & SERCOM_I2CM_STATUS_BUSERR) {
    2336:	f003 0301 	and.w	r3, r3, #1
			return I2C_ERR_BAD_ADDRESS;
    233a:	2b00      	cmp	r3, #0
    233c:	bf14      	ite	ne
    233e:	f06f 0104 	mvnne.w	r1, #4
    2342:	f06f 0103 	mvneq.w	r1, #3
	i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    2346:	886b      	ldrh	r3, [r5, #2]
    2348:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    234c:	041b      	lsls	r3, r3, #16
    234e:	0c1b      	lsrs	r3, r3, #16
    2350:	806b      	strh	r3, [r5, #2]
	if (i2c_dev->cb.error) {
    2352:	696b      	ldr	r3, [r5, #20]
    2354:	2b00      	cmp	r3, #0
    2356:	f000 80c7 	beq.w	24e8 <_sercom_i2c_m_irq_handler+0x220>
			i2c_dev->cb.error(i2c_dev, ret);
    235a:	4628      	mov	r0, r5
    235c:	4798      	blx	r3
	((Sercom *)hw)->I2CM.INTFLAG.reg = mask;
    235e:	2380      	movs	r3, #128	; 0x80
    2360:	7623      	strb	r3, [r4, #24]
    2362:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (status & SERCOM_I2CM_STATUS_RXNACK) {
    2366:	f013 0f04 	tst.w	r3, #4
    236a:	d124      	bne.n	23b6 <_sercom_i2c_m_irq_handler+0xee>
			if (msg->flags & I2C_M_TEN) {
    236c:	886b      	ldrh	r3, [r5, #2]
    236e:	f413 6f80 	tst.w	r3, #1024	; 0x400
    2372:	d03e      	beq.n	23f2 <_sercom_i2c_m_irq_handler+0x12a>
				                              ((((msg->addr & TEN_ADDR_MASK) >> 8) | TEN_ADDR_FRAME) << 1) | I2C_M_RD
    2374:	882b      	ldrh	r3, [r5, #0]
    2376:	09db      	lsrs	r3, r3, #7
				                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    2378:	f003 0206 	and.w	r2, r3, #6
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    237c:	69e3      	ldr	r3, [r4, #28]
    237e:	f013 0f04 	tst.w	r3, #4
    2382:	d1fb      	bne.n	237c <_sercom_i2c_m_irq_handler+0xb4>
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    2384:	6a63      	ldr	r3, [r4, #36]	; 0x24
    2386:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
				hri_sercomi2cm_write_ADDR_reg(hw,
    238a:	f043 03f1 	orr.w	r3, r3, #241	; 0xf1
    238e:	4313      	orrs	r3, r2
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    2390:	6263      	str	r3, [r4, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    2392:	69e3      	ldr	r3, [r4, #28]
    2394:	f013 0f04 	tst.w	r3, #4
    2398:	d1fb      	bne.n	2392 <_sercom_i2c_m_irq_handler+0xca>
				msg->flags &= ~I2C_M_TEN;
    239a:	886b      	ldrh	r3, [r5, #2]
    239c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    23a0:	041b      	lsls	r3, r3, #16
    23a2:	0c1b      	lsrs	r3, r3, #16
    23a4:	806b      	strh	r3, [r5, #2]
		if ((flags & MB_FLAG) && i2c_dev->cb.tx_complete) {
    23a6:	69ab      	ldr	r3, [r5, #24]
    23a8:	2b00      	cmp	r3, #0
    23aa:	f000 8088 	beq.w	24be <_sercom_i2c_m_irq_handler+0x1f6>
			i2c_dev->cb.tx_complete(i2c_dev);
    23ae:	4628      	mov	r0, r5
    23b0:	4798      	blx	r3
    23b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				if (msg->len > 0) {
    23b6:	686b      	ldr	r3, [r5, #4]
    23b8:	2b00      	cmp	r3, #0
    23ba:	dd04      	ble.n	23c6 <_sercom_i2c_m_irq_handler+0xfe>
					msg->flags |= I2C_M_FAIL;
    23bc:	886b      	ldrh	r3, [r5, #2]
    23be:	b29b      	uxth	r3, r3
    23c0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    23c4:	806b      	strh	r3, [r5, #2]
				if (msg->flags & I2C_M_STOP) {
    23c6:	886b      	ldrh	r3, [r5, #2]
    23c8:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    23cc:	d108      	bne.n	23e0 <_sercom_i2c_m_irq_handler+0x118>
				msg->flags &= ~I2C_M_BUSY;
    23ce:	886b      	ldrh	r3, [r5, #2]
    23d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    23d4:	041b      	lsls	r3, r3, #16
    23d6:	0c1b      	lsrs	r3, r3, #16
    23d8:	806b      	strh	r3, [r5, #2]
				return I2C_NACK;
    23da:	f06f 0101 	mvn.w	r1, #1
    23de:	e7b2      	b.n	2346 <_sercom_i2c_m_irq_handler+0x7e>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    23e0:	6863      	ldr	r3, [r4, #4]
    23e2:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
    23e6:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    23e8:	69e3      	ldr	r3, [r4, #28]
    23ea:	f013 0f04 	tst.w	r3, #4
    23ee:	d1fb      	bne.n	23e8 <_sercom_i2c_m_irq_handler+0x120>
    23f0:	e7ed      	b.n	23ce <_sercom_i2c_m_irq_handler+0x106>
			if (msg->len == 0) {
    23f2:	686b      	ldr	r3, [r5, #4]
    23f4:	b99b      	cbnz	r3, 241e <_sercom_i2c_m_irq_handler+0x156>
				if (msg->flags & I2C_M_STOP) {
    23f6:	886b      	ldrh	r3, [r5, #2]
    23f8:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    23fc:	d106      	bne.n	240c <_sercom_i2c_m_irq_handler+0x144>
				msg->flags &= ~I2C_M_BUSY;
    23fe:	886b      	ldrh	r3, [r5, #2]
    2400:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    2404:	041b      	lsls	r3, r3, #16
    2406:	0c1b      	lsrs	r3, r3, #16
    2408:	806b      	strh	r3, [r5, #2]
    240a:	e7cc      	b.n	23a6 <_sercom_i2c_m_irq_handler+0xde>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    240c:	6863      	ldr	r3, [r4, #4]
    240e:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
    2412:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    2414:	69e3      	ldr	r3, [r4, #28]
    2416:	f013 0f04 	tst.w	r3, #4
    241a:	d1fb      	bne.n	2414 <_sercom_i2c_m_irq_handler+0x14c>
    241c:	e7ef      	b.n	23fe <_sercom_i2c_m_irq_handler+0x136>
				hri_sercomi2cm_write_DATA_reg(hw, *msg->buffer);
    241e:	68ab      	ldr	r3, [r5, #8]
    2420:	781b      	ldrb	r3, [r3, #0]
	((Sercom *)hw)->I2CM.DATA.reg = data;
    2422:	62a3      	str	r3, [r4, #40]	; 0x28
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    2424:	69e3      	ldr	r3, [r4, #28]
    2426:	f013 0f04 	tst.w	r3, #4
    242a:	d1fb      	bne.n	2424 <_sercom_i2c_m_irq_handler+0x15c>
				msg->buffer++;
    242c:	68ab      	ldr	r3, [r5, #8]
    242e:	3301      	adds	r3, #1
    2430:	60ab      	str	r3, [r5, #8]
				msg->len--;
    2432:	686b      	ldr	r3, [r5, #4]
    2434:	3b01      	subs	r3, #1
    2436:	606b      	str	r3, [r5, #4]
    2438:	e7b5      	b.n	23a6 <_sercom_i2c_m_irq_handler+0xde>
	} else if (flags & SB_FLAG) {
    243a:	f016 0f02 	tst.w	r6, #2
    243e:	d041      	beq.n	24c4 <_sercom_i2c_m_irq_handler+0x1fc>
		if ((msg->len) && !(status & SERCOM_I2CM_STATUS_RXNACK)) {
    2440:	686a      	ldr	r2, [r5, #4]
    2442:	2a00      	cmp	r2, #0
    2444:	d036      	beq.n	24b4 <_sercom_i2c_m_irq_handler+0x1ec>
    2446:	f013 0f04 	tst.w	r3, #4
    244a:	d133      	bne.n	24b4 <_sercom_i2c_m_irq_handler+0x1ec>
	tmp = (tmp & SERCOM_I2CM_CTRLA_SCLSM) >> SERCOM_I2CM_CTRLA_SCLSM_Pos;
    244c:	f3c1 61c0 	ubfx	r1, r1, #27, #1
			msg->len--;
    2450:	3a01      	subs	r2, #1
    2452:	606a      	str	r2, [r5, #4]
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
    2454:	2a00      	cmp	r2, #0
    2456:	d137      	bne.n	24c8 <_sercom_i2c_m_irq_handler+0x200>
    2458:	2900      	cmp	r1, #0
    245a:	d039      	beq.n	24d0 <_sercom_i2c_m_irq_handler+0x208>
				if (msg->flags & I2C_M_STOP) {
    245c:	886b      	ldrh	r3, [r5, #2]
    245e:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    2462:	d116      	bne.n	2492 <_sercom_i2c_m_irq_handler+0x1ca>
				msg->flags &= ~I2C_M_BUSY;
    2464:	886b      	ldrh	r3, [r5, #2]
    2466:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    246a:	041b      	lsls	r3, r3, #16
    246c:	0c1b      	lsrs	r3, r3, #16
    246e:	806b      	strh	r3, [r5, #2]
			*msg->buffer++ = hri_sercomi2cm_read_DATA_reg(hw);
    2470:	68aa      	ldr	r2, [r5, #8]
    2472:	1c53      	adds	r3, r2, #1
    2474:	60ab      	str	r3, [r5, #8]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    2476:	69e3      	ldr	r3, [r4, #28]
    2478:	f013 0f04 	tst.w	r3, #4
    247c:	d1fb      	bne.n	2476 <_sercom_i2c_m_irq_handler+0x1ae>
	return ((Sercom *)hw)->I2CM.DATA.reg;
    247e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    2480:	7013      	strb	r3, [r2, #0]
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    2482:	2302      	movs	r3, #2
    2484:	7623      	strb	r3, [r4, #24]
		} else if ((flags & SB_FLAG) && i2c_dev->cb.rx_complete) {
    2486:	69eb      	ldr	r3, [r5, #28]
    2488:	b1e3      	cbz	r3, 24c4 <_sercom_i2c_m_irq_handler+0x1fc>
			i2c_dev->cb.rx_complete(i2c_dev);
    248a:	4628      	mov	r0, r5
    248c:	4798      	blx	r3
    248e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_SMEN;
    2492:	6863      	ldr	r3, [r4, #4]
    2494:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    2498:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    249a:	69e3      	ldr	r3, [r4, #28]
    249c:	f013 0f04 	tst.w	r3, #4
    24a0:	d1fb      	bne.n	249a <_sercom_i2c_m_irq_handler+0x1d2>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    24a2:	6863      	ldr	r3, [r4, #4]
    24a4:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
    24a8:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    24aa:	69e3      	ldr	r3, [r4, #28]
    24ac:	f013 0f04 	tst.w	r3, #4
    24b0:	d1fb      	bne.n	24aa <_sercom_i2c_m_irq_handler+0x1e2>
    24b2:	e7d7      	b.n	2464 <_sercom_i2c_m_irq_handler+0x19c>
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    24b4:	2302      	movs	r3, #2
    24b6:	7623      	strb	r3, [r4, #24]
			return I2C_NACK;
    24b8:	f06f 0101 	mvn.w	r1, #1
    24bc:	e743      	b.n	2346 <_sercom_i2c_m_irq_handler+0x7e>
		} else if ((flags & SB_FLAG) && i2c_dev->cb.rx_complete) {
    24be:	f016 0f02 	tst.w	r6, #2
    24c2:	d1e0      	bne.n	2486 <_sercom_i2c_m_irq_handler+0x1be>
    24c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
    24c8:	2a01      	cmp	r2, #1
    24ca:	d1d1      	bne.n	2470 <_sercom_i2c_m_irq_handler+0x1a8>
    24cc:	2900      	cmp	r1, #0
    24ce:	d0cf      	beq.n	2470 <_sercom_i2c_m_irq_handler+0x1a8>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    24d0:	6863      	ldr	r3, [r4, #4]
    24d2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
    24d6:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    24d8:	69e3      	ldr	r3, [r4, #28]
    24da:	f013 0f04 	tst.w	r3, #4
    24de:	d1fb      	bne.n	24d8 <_sercom_i2c_m_irq_handler+0x210>
			if (msg->len == 0) {
    24e0:	686b      	ldr	r3, [r5, #4]
    24e2:	2b00      	cmp	r3, #0
    24e4:	d0ba      	beq.n	245c <_sercom_i2c_m_irq_handler+0x194>
    24e6:	e7c3      	b.n	2470 <_sercom_i2c_m_irq_handler+0x1a8>
    24e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    24ec:	886b      	ldrh	r3, [r5, #2]
    24ee:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    24f2:	041b      	lsls	r3, r3, #16
    24f4:	0c1b      	lsrs	r3, r3, #16
    24f6:	806b      	strh	r3, [r5, #2]
	if (i2c_dev->cb.error) {
    24f8:	696b      	ldr	r3, [r5, #20]
    24fa:	2b00      	cmp	r3, #0
    24fc:	d0e2      	beq.n	24c4 <_sercom_i2c_m_irq_handler+0x1fc>
			i2c_dev->cb.error(i2c_dev, I2C_ERR_BUS);
    24fe:	f06f 0104 	mvn.w	r1, #4
    2502:	4628      	mov	r0, r5
    2504:	4798      	blx	r3
    2506:	e72a      	b.n	235e <_sercom_i2c_m_irq_handler+0x96>
    2508:	00001b91 	.word	0x00001b91
    250c:	00005288 	.word	0x00005288

00002510 <_i2c_m_async_init>:
{
    2510:	b570      	push	{r4, r5, r6, lr}
    2512:	460d      	mov	r5, r1
	ASSERT(i2c_dev);
    2514:	4606      	mov	r6, r0
    2516:	f44f 6293 	mov.w	r2, #1176	; 0x498
    251a:	4918      	ldr	r1, [pc, #96]	; (257c <_i2c_m_async_init+0x6c>)
    251c:	3000      	adds	r0, #0
    251e:	bf18      	it	ne
    2520:	2001      	movne	r0, #1
    2522:	4b17      	ldr	r3, [pc, #92]	; (2580 <_i2c_m_async_init+0x70>)
    2524:	4798      	blx	r3
	i2c_dev->hw = hw;
    2526:	6135      	str	r5, [r6, #16]
	init_status = _i2c_m_sync_init_impl(&i2c_dev->service, hw);
    2528:	4629      	mov	r1, r5
    252a:	4630      	mov	r0, r6
    252c:	4b15      	ldr	r3, [pc, #84]	; (2584 <_i2c_m_async_init+0x74>)
    252e:	4798      	blx	r3
	if (init_status) {
    2530:	4604      	mov	r4, r0
    2532:	b108      	cbz	r0, 2538 <_i2c_m_async_init+0x28>
}
    2534:	4620      	mov	r0, r4
    2536:	bd70      	pop	{r4, r5, r6, pc}
	_sercom_init_irq_param(hw, (void *)i2c_dev);
    2538:	4631      	mov	r1, r6
    253a:	4628      	mov	r0, r5
    253c:	4b12      	ldr	r3, [pc, #72]	; (2588 <_i2c_m_async_init+0x78>)
    253e:	4798      	blx	r3
	uint8_t irq = _sercom_get_irq_num(hw);
    2540:	4628      	mov	r0, r5
    2542:	4b12      	ldr	r3, [pc, #72]	; (258c <_i2c_m_async_init+0x7c>)
    2544:	4798      	blx	r3
    2546:	1d01      	adds	r1, r0, #4
    2548:	b2c9      	uxtb	r1, r1
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    254a:	2501      	movs	r5, #1
    254c:	f000 021f 	and.w	r2, r0, #31
    2550:	fa05 f202 	lsl.w	r2, r5, r2
    2554:	0943      	lsrs	r3, r0, #5
    2556:	009b      	lsls	r3, r3, #2
    2558:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    255c:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    2560:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    2564:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2568:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    256c:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2570:	601a      	str	r2, [r3, #0]
		irq++;
    2572:	3001      	adds	r0, #1
    2574:	b2c0      	uxtb	r0, r0
	for (uint32_t i = 0; i < 4; i++) {
    2576:	4281      	cmp	r1, r0
    2578:	d1e8      	bne.n	254c <_i2c_m_async_init+0x3c>
    257a:	e7db      	b.n	2534 <_i2c_m_async_init+0x24>
    257c:	00005288 	.word	0x00005288
    2580:	00001b91 	.word	0x00001b91
    2584:	000021ed 	.word	0x000021ed
    2588:	0000217d 	.word	0x0000217d
    258c:	000021a1 	.word	0x000021a1

00002590 <_i2c_m_async_transfer>:
{
    2590:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2594:	460c      	mov	r4, r1
	ASSERT(i2c_dev);
    2596:	4605      	mov	r5, r0
    2598:	f110 0800 	adds.w	r8, r0, #0
    259c:	bf18      	it	ne
    259e:	f04f 0801 	movne.w	r8, #1
    25a2:	4f45      	ldr	r7, [pc, #276]	; (26b8 <_i2c_m_async_transfer+0x128>)
    25a4:	f240 42ee 	movw	r2, #1262	; 0x4ee
    25a8:	4639      	mov	r1, r7
    25aa:	4640      	mov	r0, r8
    25ac:	4e43      	ldr	r6, [pc, #268]	; (26bc <_i2c_m_async_transfer+0x12c>)
    25ae:	47b0      	blx	r6
	ASSERT(i2c_dev->hw);
    25b0:	6928      	ldr	r0, [r5, #16]
    25b2:	f240 42ef 	movw	r2, #1263	; 0x4ef
    25b6:	4639      	mov	r1, r7
    25b8:	3000      	adds	r0, #0
    25ba:	bf18      	it	ne
    25bc:	2001      	movne	r0, #1
    25be:	47b0      	blx	r6
	ASSERT(msg);
    25c0:	f44f 629e 	mov.w	r2, #1264	; 0x4f0
    25c4:	4639      	mov	r1, r7
    25c6:	1c20      	adds	r0, r4, #0
    25c8:	bf18      	it	ne
    25ca:	2001      	movne	r0, #1
    25cc:	47b0      	blx	r6
	if (msg->len == 0) {
    25ce:	6860      	ldr	r0, [r4, #4]
    25d0:	2800      	cmp	r0, #0
    25d2:	d06f      	beq.n	26b4 <_i2c_m_async_transfer+0x124>
	if (i2c_dev->service.msg.flags & I2C_M_BUSY) {
    25d4:	886b      	ldrh	r3, [r5, #2]
    25d6:	f413 7f80 	tst.w	r3, #256	; 0x100
    25da:	d169      	bne.n	26b0 <_i2c_m_async_transfer+0x120>
	msg->flags |= I2C_M_BUSY;
    25dc:	8863      	ldrh	r3, [r4, #2]
    25de:	b29b      	uxth	r3, r3
    25e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    25e4:	8063      	strh	r3, [r4, #2]
	i2c_dev->service.msg = *msg;
    25e6:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
    25ea:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	hri_sercomi2cm_set_CTRLB_SMEN_bit(i2c_dev->hw);
    25ee:	692a      	ldr	r2, [r5, #16]
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_SMEN;
    25f0:	6853      	ldr	r3, [r2, #4]
    25f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    25f6:	6053      	str	r3, [r2, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    25f8:	69d3      	ldr	r3, [r2, #28]
    25fa:	f013 0f04 	tst.w	r3, #4
    25fe:	d1fb      	bne.n	25f8 <_i2c_m_async_transfer+0x68>
	void *             hw    = i2c_dev->hw;
    2600:	692c      	ldr	r4, [r5, #16]
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    2602:	6826      	ldr	r6, [r4, #0]
	ASSERT(i2c_dev);
    2604:	f240 42c6 	movw	r2, #1222	; 0x4c6
    2608:	492b      	ldr	r1, [pc, #172]	; (26b8 <_i2c_m_async_transfer+0x128>)
    260a:	4640      	mov	r0, r8
    260c:	4b2b      	ldr	r3, [pc, #172]	; (26bc <_i2c_m_async_transfer+0x12c>)
    260e:	4798      	blx	r3
	if (msg->len == 1 && sclsm) {
    2610:	686b      	ldr	r3, [r5, #4]
    2612:	2b01      	cmp	r3, #1
    2614:	d02a      	beq.n	266c <_i2c_m_async_transfer+0xdc>
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    2616:	6863      	ldr	r3, [r4, #4]
    2618:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
    261c:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    261e:	69e3      	ldr	r3, [r4, #28]
    2620:	f013 0f04 	tst.w	r3, #4
    2624:	d1fb      	bne.n	261e <_i2c_m_async_transfer+0x8e>
	if (msg->addr & I2C_M_TEN) {
    2626:	882b      	ldrh	r3, [r5, #0]
    2628:	f413 6f80 	tst.w	r3, #1024	; 0x400
    262c:	d02a      	beq.n	2684 <_i2c_m_async_transfer+0xf4>
		if (msg->flags & I2C_M_RD) {
    262e:	886a      	ldrh	r2, [r5, #2]
    2630:	f012 0f01 	tst.w	r2, #1
    2634:	d004      	beq.n	2640 <_i2c_m_async_transfer+0xb0>
			msg->flags |= I2C_M_TEN;
    2636:	886a      	ldrh	r2, [r5, #2]
    2638:	b292      	uxth	r2, r2
    263a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
    263e:	806a      	strh	r2, [r5, #2]
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    2640:	f240 72fe 	movw	r2, #2046	; 0x7fe
    2644:	ea02 0243 	and.w	r2, r2, r3, lsl #1
    2648:	69e3      	ldr	r3, [r4, #28]
    264a:	f013 0f04 	tst.w	r3, #4
    264e:	d1fb      	bne.n	2648 <_i2c_m_async_transfer+0xb8>
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    2650:	6a63      	ldr	r3, [r4, #36]	; 0x24
    2652:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
		hri_sercomi2cm_write_ADDR_reg(hw,
    2656:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    265a:	4313      	orrs	r3, r2
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    265c:	6263      	str	r3, [r4, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    265e:	69e3      	ldr	r3, [r4, #28]
    2660:	f013 0f04 	tst.w	r3, #4
    2664:	d1fb      	bne.n	265e <_i2c_m_async_transfer+0xce>
	return ERR_NONE;
    2666:	2000      	movs	r0, #0
    2668:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (msg->len == 1 && sclsm) {
    266c:	f016 6f00 	tst.w	r6, #134217728	; 0x8000000
    2670:	d0d1      	beq.n	2616 <_i2c_m_async_transfer+0x86>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    2672:	6863      	ldr	r3, [r4, #4]
    2674:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
    2678:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    267a:	69e3      	ldr	r3, [r4, #28]
    267c:	f013 0f04 	tst.w	r3, #4
    2680:	d1fb      	bne.n	267a <_i2c_m_async_transfer+0xea>
    2682:	e7d0      	b.n	2626 <_i2c_m_async_transfer+0x96>
		                              ((msg->addr & SEVEN_ADDR_MASK) << 1) | (msg->flags & I2C_M_RD ? I2C_M_RD : 0x0)
    2684:	8869      	ldrh	r1, [r5, #2]
    2686:	005a      	lsls	r2, r3, #1
    2688:	b2d2      	uxtb	r2, r2
    268a:	f001 0301 	and.w	r3, r1, #1
    268e:	431a      	orrs	r2, r3
    2690:	69e3      	ldr	r3, [r4, #28]
    2692:	f013 0f04 	tst.w	r3, #4
    2696:	d1fb      	bne.n	2690 <_i2c_m_async_transfer+0x100>
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    2698:	6a63      	ldr	r3, [r4, #36]	; 0x24
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    269a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
		hri_sercomi2cm_write_ADDR_reg(hw,
    269e:	431a      	orrs	r2, r3
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    26a0:	6262      	str	r2, [r4, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    26a2:	69e3      	ldr	r3, [r4, #28]
    26a4:	f013 0f04 	tst.w	r3, #4
    26a8:	d1fb      	bne.n	26a2 <_i2c_m_async_transfer+0x112>
	return ERR_NONE;
    26aa:	2000      	movs	r0, #0
    26ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return ERR_BUSY;
    26b0:	f06f 0003 	mvn.w	r0, #3
}
    26b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    26b8:	00005288 	.word	0x00005288
    26bc:	00001b91 	.word	0x00001b91

000026c0 <_i2c_m_async_register_callback>:
	switch (type) {
    26c0:	2901      	cmp	r1, #1
    26c2:	d006      	beq.n	26d2 <_i2c_m_async_register_callback+0x12>
    26c4:	b119      	cbz	r1, 26ce <_i2c_m_async_register_callback+0xe>
    26c6:	2902      	cmp	r1, #2
    26c8:	d005      	beq.n	26d6 <_i2c_m_async_register_callback+0x16>
}
    26ca:	2000      	movs	r0, #0
    26cc:	4770      	bx	lr
		i2c_dev->cb.error = (_i2c_error_cb_t)func;
    26ce:	6142      	str	r2, [r0, #20]
		break;
    26d0:	e7fb      	b.n	26ca <_i2c_m_async_register_callback+0xa>
		i2c_dev->cb.tx_complete = (_i2c_complete_cb_t)func;
    26d2:	6182      	str	r2, [r0, #24]
		break;
    26d4:	e7f9      	b.n	26ca <_i2c_m_async_register_callback+0xa>
		i2c_dev->cb.rx_complete = (_i2c_complete_cb_t)func;
    26d6:	61c2      	str	r2, [r0, #28]
		break;
    26d8:	e7f7      	b.n	26ca <_i2c_m_async_register_callback+0xa>
	...

000026dc <SERCOM1_0_Handler>:

/**
 * \internal Sercom interrupt handler
 */
void SERCOM1_0_Handler(void)
{
    26dc:	b508      	push	{r3, lr}
	_sercom_i2c_m_irq_handler(_sercom1_dev);
    26de:	4b02      	ldr	r3, [pc, #8]	; (26e8 <SERCOM1_0_Handler+0xc>)
    26e0:	6818      	ldr	r0, [r3, #0]
    26e2:	4b02      	ldr	r3, [pc, #8]	; (26ec <SERCOM1_0_Handler+0x10>)
    26e4:	4798      	blx	r3
    26e6:	bd08      	pop	{r3, pc}
    26e8:	200006f8 	.word	0x200006f8
    26ec:	000022c9 	.word	0x000022c9

000026f0 <SERCOM1_1_Handler>:
}
/**
 * \internal Sercom interrupt handler
 */
void SERCOM1_1_Handler(void)
{
    26f0:	b508      	push	{r3, lr}
	_sercom_i2c_m_irq_handler(_sercom1_dev);
    26f2:	4b02      	ldr	r3, [pc, #8]	; (26fc <SERCOM1_1_Handler+0xc>)
    26f4:	6818      	ldr	r0, [r3, #0]
    26f6:	4b02      	ldr	r3, [pc, #8]	; (2700 <SERCOM1_1_Handler+0x10>)
    26f8:	4798      	blx	r3
    26fa:	bd08      	pop	{r3, pc}
    26fc:	200006f8 	.word	0x200006f8
    2700:	000022c9 	.word	0x000022c9

00002704 <SERCOM1_2_Handler>:
}
/**
 * \internal Sercom interrupt handler
 */
void SERCOM1_2_Handler(void)
{
    2704:	b508      	push	{r3, lr}
	_sercom_i2c_m_irq_handler(_sercom1_dev);
    2706:	4b02      	ldr	r3, [pc, #8]	; (2710 <SERCOM1_2_Handler+0xc>)
    2708:	6818      	ldr	r0, [r3, #0]
    270a:	4b02      	ldr	r3, [pc, #8]	; (2714 <SERCOM1_2_Handler+0x10>)
    270c:	4798      	blx	r3
    270e:	bd08      	pop	{r3, pc}
    2710:	200006f8 	.word	0x200006f8
    2714:	000022c9 	.word	0x000022c9

00002718 <SERCOM1_3_Handler>:
}
/**
 * \internal Sercom interrupt handler
 */
void SERCOM1_3_Handler(void)
{
    2718:	b508      	push	{r3, lr}
	_sercom_i2c_m_irq_handler(_sercom1_dev);
    271a:	4b02      	ldr	r3, [pc, #8]	; (2724 <SERCOM1_3_Handler+0xc>)
    271c:	6818      	ldr	r0, [r3, #0]
    271e:	4b02      	ldr	r3, [pc, #8]	; (2728 <SERCOM1_3_Handler+0x10>)
    2720:	4798      	blx	r3
    2722:	bd08      	pop	{r3, pc}
    2724:	200006f8 	.word	0x200006f8
    2728:	000022c9 	.word	0x000022c9

0000272c <SERCOM5_0_Handler>:

/**
 * \internal Sercom interrupt handler
 */
void SERCOM5_0_Handler(void)
{
    272c:	b508      	push	{r3, lr}
	_sercom_i2c_m_irq_handler(_sercom5_dev);
    272e:	4b02      	ldr	r3, [pc, #8]	; (2738 <SERCOM5_0_Handler+0xc>)
    2730:	6858      	ldr	r0, [r3, #4]
    2732:	4b02      	ldr	r3, [pc, #8]	; (273c <SERCOM5_0_Handler+0x10>)
    2734:	4798      	blx	r3
    2736:	bd08      	pop	{r3, pc}
    2738:	200006f8 	.word	0x200006f8
    273c:	000022c9 	.word	0x000022c9

00002740 <SERCOM5_1_Handler>:
}
/**
 * \internal Sercom interrupt handler
 */
void SERCOM5_1_Handler(void)
{
    2740:	b508      	push	{r3, lr}
	_sercom_i2c_m_irq_handler(_sercom5_dev);
    2742:	4b02      	ldr	r3, [pc, #8]	; (274c <SERCOM5_1_Handler+0xc>)
    2744:	6858      	ldr	r0, [r3, #4]
    2746:	4b02      	ldr	r3, [pc, #8]	; (2750 <SERCOM5_1_Handler+0x10>)
    2748:	4798      	blx	r3
    274a:	bd08      	pop	{r3, pc}
    274c:	200006f8 	.word	0x200006f8
    2750:	000022c9 	.word	0x000022c9

00002754 <SERCOM5_2_Handler>:
}
/**
 * \internal Sercom interrupt handler
 */
void SERCOM5_2_Handler(void)
{
    2754:	b508      	push	{r3, lr}
	_sercom_i2c_m_irq_handler(_sercom5_dev);
    2756:	4b02      	ldr	r3, [pc, #8]	; (2760 <SERCOM5_2_Handler+0xc>)
    2758:	6858      	ldr	r0, [r3, #4]
    275a:	4b02      	ldr	r3, [pc, #8]	; (2764 <SERCOM5_2_Handler+0x10>)
    275c:	4798      	blx	r3
    275e:	bd08      	pop	{r3, pc}
    2760:	200006f8 	.word	0x200006f8
    2764:	000022c9 	.word	0x000022c9

00002768 <SERCOM5_3_Handler>:
}
/**
 * \internal Sercom interrupt handler
 */
void SERCOM5_3_Handler(void)
{
    2768:	b508      	push	{r3, lr}
	_sercom_i2c_m_irq_handler(_sercom5_dev);
    276a:	4b02      	ldr	r3, [pc, #8]	; (2774 <SERCOM5_3_Handler+0xc>)
    276c:	6858      	ldr	r0, [r3, #4]
    276e:	4b02      	ldr	r3, [pc, #8]	; (2778 <SERCOM5_3_Handler+0x10>)
    2770:	4798      	blx	r3
    2772:	bd08      	pop	{r3, pc}
    2774:	200006f8 	.word	0x200006f8
    2778:	000022c9 	.word	0x000022c9

0000277c <_spi_m_sync_init>:
}

int32_t _spi_m_sync_init(struct _spi_m_sync_dev *dev, void *const hw)
{
    277c:	b570      	push	{r4, r5, r6, lr}
    277e:	4606      	mov	r6, r0
    2780:	460c      	mov	r4, r1
	uint8_t n = _sercom_get_hardware_index((const void *)hw_addr);
    2782:	4608      	mov	r0, r1
    2784:	4b5d      	ldr	r3, [pc, #372]	; (28fc <_spi_m_sync_init+0x180>)
    2786:	4798      	blx	r3
		if (sercomspi_regs[i].n == n) {
    2788:	b168      	cbz	r0, 27a6 <_spi_m_sync_init+0x2a>
    278a:	4603      	mov	r3, r0
    278c:	2806      	cmp	r0, #6
    278e:	bf08      	it	eq
    2790:	2301      	moveq	r3, #1
    2792:	d009      	beq.n	27a8 <_spi_m_sync_init+0x2c>
	const struct sercomspi_regs_cfg *regs = _spi_get_regs((uint32_t)hw);

	ASSERT(dev && hw);
    2794:	2e00      	cmp	r6, #0
    2796:	f000 809f 	beq.w	28d8 <_spi_m_sync_init+0x15c>
    279a:	2c00      	cmp	r4, #0
    279c:	f040 80a5 	bne.w	28ea <_spi_m_sync_init+0x16e>
	return NULL;
    27a0:	2500      	movs	r5, #0
	ASSERT(dev && hw);
    27a2:	2000      	movs	r0, #0
    27a4:	e009      	b.n	27ba <_spi_m_sync_init+0x3e>
		if (sercomspi_regs[i].n == n) {
    27a6:	2300      	movs	r3, #0
			return &sercomspi_regs[i];
    27a8:	4d55      	ldr	r5, [pc, #340]	; (2900 <_spi_m_sync_init+0x184>)
    27aa:	eb05 1503 	add.w	r5, r5, r3, lsl #4
    27ae:	441d      	add	r5, r3
	ASSERT(dev && hw);
    27b0:	2e00      	cmp	r6, #0
    27b2:	d0f6      	beq.n	27a2 <_spi_m_sync_init+0x26>
    27b4:	2001      	movs	r0, #1
    27b6:	2c00      	cmp	r4, #0
    27b8:	d0f3      	beq.n	27a2 <_spi_m_sync_init+0x26>
    27ba:	f640 12ac 	movw	r2, #2476	; 0x9ac
    27be:	4951      	ldr	r1, [pc, #324]	; (2904 <_spi_m_sync_init+0x188>)
    27c0:	4b51      	ldr	r3, [pc, #324]	; (2908 <_spi_m_sync_init+0x18c>)
    27c2:	4798      	blx	r3

	if (regs == NULL) {
    27c4:	2d00      	cmp	r5, #0
    27c6:	f000 8084 	beq.w	28d2 <_spi_m_sync_init+0x156>
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    27ca:	69e3      	ldr	r3, [r4, #28]
		return ERR_INVALID_ARG;
	}

	if (!hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    27cc:	f013 0f01 	tst.w	r3, #1
    27d0:	d11d      	bne.n	280e <_spi_m_sync_init+0x92>
		uint32_t mode = regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk;
    27d2:	682b      	ldr	r3, [r5, #0]
    27d4:	f003 021c 	and.w	r2, r3, #28
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    27d8:	69e3      	ldr	r3, [r4, #28]
    27da:	f013 0f03 	tst.w	r3, #3
    27de:	d1fb      	bne.n	27d8 <_spi_m_sync_init+0x5c>
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    27e0:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomspi_get_CTRLA_reg(hw, SERCOM_SPI_CTRLA_ENABLE)) {
    27e2:	f013 0f02 	tst.w	r3, #2
    27e6:	d00b      	beq.n	2800 <_spi_m_sync_init+0x84>
	((Sercom *)hw)->SPI.CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    27e8:	6823      	ldr	r3, [r4, #0]
    27ea:	f023 0302 	bic.w	r3, r3, #2
    27ee:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    27f0:	69e3      	ldr	r3, [r4, #28]
    27f2:	f013 0f03 	tst.w	r3, #3
    27f6:	d1fb      	bne.n	27f0 <_spi_m_sync_init+0x74>
    27f8:	69e3      	ldr	r3, [r4, #28]
    27fa:	f013 0f02 	tst.w	r3, #2
    27fe:	d1fb      	bne.n	27f8 <_spi_m_sync_init+0x7c>
			hri_sercomspi_clear_CTRLA_ENABLE_bit(hw);
			hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_ENABLE);
		}
		hri_sercomspi_write_CTRLA_reg(hw, SERCOM_SPI_CTRLA_SWRST | mode);
    2800:	f042 0201 	orr.w	r2, r2, #1
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    2804:	6022      	str	r2, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    2806:	69e3      	ldr	r3, [r4, #28]
    2808:	f013 0f03 	tst.w	r3, #3
    280c:	d1fb      	bne.n	2806 <_spi_m_sync_init+0x8a>
    280e:	69e3      	ldr	r3, [r4, #28]
    2810:	f013 0f01 	tst.w	r3, #1
    2814:	d1fb      	bne.n	280e <_spi_m_sync_init+0x92>
	}
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST);

	dev->prvt = hw;
    2816:	6034      	str	r4, [r6, #0]

	if ((regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk) == SERCOM_USART_CTRLA_MODE_SPI_SLAVE) {
    2818:	682b      	ldr	r3, [r5, #0]
    281a:	f003 031c 	and.w	r3, r3, #28
    281e:	2b08      	cmp	r3, #8
    2820:	d02e      	beq.n	2880 <_spi_m_sync_init+0x104>
	ASSERT(hw && regs);
    2822:	f640 123c 	movw	r2, #2364	; 0x93c
    2826:	4937      	ldr	r1, [pc, #220]	; (2904 <_spi_m_sync_init+0x188>)
    2828:	1c20      	adds	r0, r4, #0
    282a:	bf18      	it	ne
    282c:	2001      	movne	r0, #1
    282e:	4b36      	ldr	r3, [pc, #216]	; (2908 <_spi_m_sync_init+0x18c>)
    2830:	4798      	blx	r3
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    2832:	682b      	ldr	r3, [r5, #0]
	hri_sercomspi_write_CTRLA_reg(
    2834:	f423 7381 	bic.w	r3, r3, #258	; 0x102
    2838:	f023 0301 	bic.w	r3, r3, #1
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    283c:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    283e:	69e3      	ldr	r3, [r4, #28]
    2840:	f013 0f03 	tst.w	r3, #3
    2844:	d1fb      	bne.n	283e <_spi_m_sync_init+0xc2>
	    (regs->ctrlb
    2846:	686b      	ldr	r3, [r5, #4]
	        | (SERCOM_SPI_CTRLB_RXEN));
    2848:	f423 3338 	bic.w	r3, r3, #188416	; 0x2e000
    284c:	f423 7310 	bic.w	r3, r3, #576	; 0x240
	hri_sercomspi_write_CTRLB_reg(
    2850:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    2854:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    2856:	69e3      	ldr	r3, [r4, #28]
    2858:	f013 0f17 	tst.w	r3, #23
    285c:	d1fb      	bne.n	2856 <_spi_m_sync_init+0xda>
	hri_sercomspi_write_BAUD_reg(hw, regs->baud);
    285e:	7b2b      	ldrb	r3, [r5, #12]
	((Sercom *)hw)->SPI.BAUD.reg = data;
    2860:	7323      	strb	r3, [r4, #12]
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    2862:	7b6b      	ldrb	r3, [r5, #13]
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    2864:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
	} else {
		_spi_load_regs_master(hw, regs);
	}

	/* Load character size from default hardware configuration */
	dev->char_size = ((regs->ctrlb & SERCOM_SPI_CTRLB_CHSIZE_Msk) == 0) ? 1 : 2;
    2868:	686b      	ldr	r3, [r5, #4]
    286a:	f003 0307 	and.w	r3, r3, #7
    286e:	2b00      	cmp	r3, #0
    2870:	bf0c      	ite	eq
    2872:	2301      	moveq	r3, #1
    2874:	2302      	movne	r3, #2
    2876:	7133      	strb	r3, [r6, #4]

	dev->dummy_byte = regs->dummy_byte;
    2878:	89eb      	ldrh	r3, [r5, #14]
    287a:	80f3      	strh	r3, [r6, #6]

	return ERR_NONE;
    287c:	2000      	movs	r0, #0
    287e:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(hw && regs);
    2880:	f44f 6215 	mov.w	r2, #2384	; 0x950
    2884:	491f      	ldr	r1, [pc, #124]	; (2904 <_spi_m_sync_init+0x188>)
    2886:	1c20      	adds	r0, r4, #0
    2888:	bf18      	it	ne
    288a:	2001      	movne	r0, #1
    288c:	4b1e      	ldr	r3, [pc, #120]	; (2908 <_spi_m_sync_init+0x18c>)
    288e:	4798      	blx	r3
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    2890:	682b      	ldr	r3, [r5, #0]
	hri_sercomspi_write_CTRLA_reg(
    2892:	f423 7381 	bic.w	r3, r3, #258	; 0x102
    2896:	f023 0301 	bic.w	r3, r3, #1
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    289a:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    289c:	69e3      	ldr	r3, [r4, #28]
    289e:	f013 0f03 	tst.w	r3, #3
    28a2:	d1fb      	bne.n	289c <_spi_m_sync_init+0x120>
	                              (regs->ctrlb & ~(SERCOM_SPI_CTRLB_MSSEN))
    28a4:	686b      	ldr	r3, [r5, #4]
	                                  | (SERCOM_SPI_CTRLB_RXEN | SERCOM_SPI_CTRLB_SSDE | SERCOM_SPI_CTRLB_PLOADEN));
    28a6:	f423 3308 	bic.w	r3, r3, #139264	; 0x22000
    28aa:	f423 7310 	bic.w	r3, r3, #576	; 0x240
	hri_sercomspi_write_CTRLB_reg(hw,
    28ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    28b2:	f443 7310 	orr.w	r3, r3, #576	; 0x240
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    28b6:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    28b8:	69e3      	ldr	r3, [r4, #28]
    28ba:	f013 0f17 	tst.w	r3, #23
    28be:	d1fb      	bne.n	28b8 <_spi_m_sync_init+0x13c>
	hri_sercomspi_write_ADDR_reg(hw, regs->addr);
    28c0:	68ab      	ldr	r3, [r5, #8]
	((Sercom *)hw)->SPI.ADDR.reg = data;
    28c2:	6263      	str	r3, [r4, #36]	; 0x24
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    28c4:	7b6b      	ldrb	r3, [r5, #13]
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    28c6:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    28ca:	69e3      	ldr	r3, [r4, #28]
	while (hri_sercomspi_is_syncing(hw, 0xFFFFFFFF))
    28cc:	2b00      	cmp	r3, #0
    28ce:	d1fc      	bne.n	28ca <_spi_m_sync_init+0x14e>
    28d0:	e7ca      	b.n	2868 <_spi_m_sync_init+0xec>
		return ERR_INVALID_ARG;
    28d2:	f06f 000c 	mvn.w	r0, #12
    28d6:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(dev && hw);
    28d8:	f640 12ac 	movw	r2, #2476	; 0x9ac
    28dc:	4909      	ldr	r1, [pc, #36]	; (2904 <_spi_m_sync_init+0x188>)
    28de:	2000      	movs	r0, #0
    28e0:	4b09      	ldr	r3, [pc, #36]	; (2908 <_spi_m_sync_init+0x18c>)
    28e2:	4798      	blx	r3
		return ERR_INVALID_ARG;
    28e4:	f06f 000c 	mvn.w	r0, #12
    28e8:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(dev && hw);
    28ea:	f640 12ac 	movw	r2, #2476	; 0x9ac
    28ee:	4905      	ldr	r1, [pc, #20]	; (2904 <_spi_m_sync_init+0x188>)
    28f0:	2001      	movs	r0, #1
    28f2:	4b05      	ldr	r3, [pc, #20]	; (2908 <_spi_m_sync_init+0x18c>)
    28f4:	4798      	blx	r3
		return ERR_INVALID_ARG;
    28f6:	f06f 000c 	mvn.w	r0, #12
    28fa:	bd70      	pop	{r4, r5, r6, pc}
    28fc:	00002139 	.word	0x00002139
    2900:	00005264 	.word	0x00005264
    2904:	00005288 	.word	0x00005288
    2908:	00001b91 	.word	0x00001b91

0000290c <_spi_m_sync_trans>:

	return ERR_NONE;
}

int32_t _spi_m_sync_trans(struct _spi_m_sync_dev *dev, const struct spi_msg *msg)
{
    290c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    2910:	4681      	mov	r9, r0
    2912:	460e      	mov	r6, r1
	void *                 hw   = dev->prvt;
    2914:	6804      	ldr	r4, [r0, #0]
	int32_t                rc   = 0;
	struct _spi_trans_ctrl ctrl = {msg->txbuf, msg->rxbuf, 0, 0, dev->char_size};
    2916:	f8d1 8000 	ldr.w	r8, [r1]
    291a:	684d      	ldr	r5, [r1, #4]
    291c:	7907      	ldrb	r7, [r0, #4]

	ASSERT(dev && hw);
    291e:	b1a8      	cbz	r0, 294c <_spi_m_sync_trans+0x40>
    2920:	1c20      	adds	r0, r4, #0
    2922:	bf18      	it	ne
    2924:	2001      	movne	r0, #1
    2926:	f44f 6231 	mov.w	r2, #2832	; 0xb10
    292a:	492e      	ldr	r1, [pc, #184]	; (29e4 <_spi_m_sync_trans+0xd8>)
    292c:	4b2e      	ldr	r3, [pc, #184]	; (29e8 <_spi_m_sync_trans+0xdc>)
    292e:	4798      	blx	r3
    2930:	69e3      	ldr	r3, [r4, #28]

	/* If settings are not applied (pending), we can not go on */
	if (hri_sercomspi_is_syncing(
    2932:	f013 0f07 	tst.w	r3, #7
    2936:	d134      	bne.n	29a2 <_spi_m_sync_trans+0x96>
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    2938:	69e0      	ldr	r0, [r4, #28]
    293a:	f010 0003 	ands.w	r0, r0, #3
    293e:	d1fb      	bne.n	2938 <_spi_m_sync_trans+0x2c>
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    2940:	6823      	ldr	r3, [r4, #0]
	        hw, (SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE | SERCOM_SPI_SYNCBUSY_CTRLB))) {
		return ERR_BUSY;
	}

	/* SPI must be enabled to start synchronous transfer */
	if (!hri_sercomspi_get_CTRLA_ENABLE_bit(hw)) {
    2942:	f013 0f02 	tst.w	r3, #2
    2946:	d030      	beq.n	29aa <_spi_m_sync_trans+0x9e>
    2948:	4602      	mov	r2, r0
    294a:	e008      	b.n	295e <_spi_m_sync_trans+0x52>
    294c:	2000      	movs	r0, #0
    294e:	e7ea      	b.n	2926 <_spi_m_sync_trans+0x1a>
	ctrl->rxcnt++;
    2950:	3201      	adds	r2, #1
	if (SERCOM_SPI_INTFLAG_ERROR & iflag) {
    2952:	f013 0f80 	tst.w	r3, #128	; 0x80
    2956:	d112      	bne.n	297e <_spi_m_sync_trans+0x72>
		rc = _spi_err_check(iflag, hw);

		if (rc < 0) {
			break;
		}
		if (ctrl.txcnt >= msg->size && ctrl.rxcnt >= msg->size) {
    2958:	68b3      	ldr	r3, [r6, #8]
    295a:	4283      	cmp	r3, r0
    295c:	d91e      	bls.n	299c <_spi_m_sync_trans+0x90>
	return ((Sercom *)hw)->SPI.INTFLAG.reg;
    295e:	7e23      	ldrb	r3, [r4, #24]
    2960:	b2db      	uxtb	r3, r3
	if (!(iflag & SERCOM_SPI_INTFLAG_RXC)) {
    2962:	f013 0f04 	tst.w	r3, #4
    2966:	d024      	beq.n	29b2 <_spi_m_sync_trans+0xa6>
	return ((Sercom *)hw)->SPI.DATA.reg;
    2968:	6aa1      	ldr	r1, [r4, #40]	; 0x28
	if (ctrl->rxbuf) {
    296a:	2d00      	cmp	r5, #0
    296c:	d0f0      	beq.n	2950 <_spi_m_sync_trans+0x44>
		*ctrl->rxbuf++ = (uint8_t)data;
    296e:	7029      	strb	r1, [r5, #0]
		if (ctrl->char_size > 1) {
    2970:	2f01      	cmp	r7, #1
		*ctrl->rxbuf++ = (uint8_t)data;
    2972:	bf91      	iteee	ls
    2974:	3501      	addls	r5, #1
			*ctrl->rxbuf++ = (uint8_t)(data >> 8);
    2976:	0a09      	lsrhi	r1, r1, #8
    2978:	7069      	strbhi	r1, [r5, #1]
    297a:	3502      	addhi	r5, #2
    297c:	e7e8      	b.n	2950 <_spi_m_sync_trans+0x44>
	((Sercom *)hw)->SPI.STATUS.reg = mask;
    297e:	f64f 73ff 	movw	r3, #65535	; 0xffff
    2982:	8363      	strh	r3, [r4, #26]
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    2984:	2380      	movs	r3, #128	; 0x80
    2986:	7623      	strb	r3, [r4, #24]
		return ERR_OVERFLOW;
    2988:	f06f 0012 	mvn.w	r0, #18
	tmp = ((Sercom *)hw)->SPI.INTFLAG.reg;
    298c:	7e23      	ldrb	r3, [r4, #24]
	while (!(hri_sercomspi_get_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC | SERCOM_SPI_INTFLAG_DRE))) {
    298e:	f013 0f03 	tst.w	r3, #3
    2992:	d0fb      	beq.n	298c <_spi_m_sync_trans+0x80>
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    2994:	2303      	movs	r3, #3
    2996:	7623      	strb	r3, [r4, #24]
		}
	}
	/* Wait until SPI bus idle */
	_spi_wait_bus_idle(hw);

	return rc;
    2998:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (ctrl.txcnt >= msg->size && ctrl.rxcnt >= msg->size) {
    299c:	4293      	cmp	r3, r2
    299e:	d8de      	bhi.n	295e <_spi_m_sync_trans+0x52>
    29a0:	e7f4      	b.n	298c <_spi_m_sync_trans+0x80>
		return ERR_BUSY;
    29a2:	f06f 0003 	mvn.w	r0, #3
    29a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return ERR_NOT_INITIALIZED;
    29aa:	f06f 0013 	mvn.w	r0, #19
    29ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if (ctrl.rxcnt >= ctrl.txcnt) {
    29b2:	4290      	cmp	r0, r2
    29b4:	d8cd      	bhi.n	2952 <_spi_m_sync_trans+0x46>
	if (!(SERCOM_SPI_INTFLAG_DRE & iflag)) {
    29b6:	f013 0f01 	tst.w	r3, #1
    29ba:	d0ca      	beq.n	2952 <_spi_m_sync_trans+0x46>
				_spi_tx_check_and_send(hw, iflag, &ctrl, dev->dummy_byte);
    29bc:	f8b9 1006 	ldrh.w	r1, [r9, #6]
	if (ctrl->txbuf) {
    29c0:	f1b8 0f00 	cmp.w	r8, #0
    29c4:	d00b      	beq.n	29de <_spi_m_sync_trans+0xd2>
		data = *ctrl->txbuf++;
    29c6:	f898 1000 	ldrb.w	r1, [r8]
		if (ctrl->char_size > 1) {
    29ca:	2f01      	cmp	r7, #1
		data = *ctrl->txbuf++;
    29cc:	bf91      	iteee	ls
    29ce:	f108 0801 	addls.w	r8, r8, #1
			data |= (*ctrl->txbuf) << 8;
    29d2:	f898 e001 	ldrbhi.w	lr, [r8, #1]
    29d6:	ea41 210e 	orrhi.w	r1, r1, lr, lsl #8
			ctrl->txbuf++;
    29da:	f108 0802 	addhi.w	r8, r8, #2
	ctrl->txcnt++;
    29de:	3001      	adds	r0, #1
	((Sercom *)hw)->SPI.DATA.reg = data;
    29e0:	62a1      	str	r1, [r4, #40]	; 0x28
    29e2:	e7b6      	b.n	2952 <_spi_m_sync_trans+0x46>
    29e4:	00005288 	.word	0x00005288
    29e8:	00001b91 	.word	0x00001b91

000029ec <_delay_init>:
 * \brief Initialize system time module
 */
void _system_time_init(void *const hw)
{
	(void)hw;
	SysTick->LOAD = (0xFFFFFF << SysTick_LOAD_RELOAD_Pos);
    29ec:	4b03      	ldr	r3, [pc, #12]	; (29fc <_delay_init+0x10>)
    29ee:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
    29f2:	605a      	str	r2, [r3, #4]
	SysTick->CTRL = (1 << SysTick_CTRL_ENABLE_Pos) | (CONF_SYSTICK_TICKINT << SysTick_CTRL_TICKINT_Pos)
    29f4:	2205      	movs	r2, #5
    29f6:	601a      	str	r2, [r3, #0]
    29f8:	4770      	bx	lr
    29fa:	bf00      	nop
    29fc:	e000e010 	.word	0xe000e010

00002a00 <_delay_cycles>:
 * \brief Delay loop to delay n number of cycles
 */
void _delay_cycles(void *const hw, uint32_t cycles)
{
	(void)hw;
	uint8_t  n   = cycles >> 24;
    2a00:	0e0b      	lsrs	r3, r1, #24
	uint32_t buf = cycles;

	while (n--) {
    2a02:	b303      	cbz	r3, 2a46 <_delay_cycles+0x46>
{
    2a04:	b430      	push	{r4, r5}
    2a06:	1e5d      	subs	r5, r3, #1
    2a08:	b2ed      	uxtb	r5, r5
	while (n--) {
    2a0a:	4628      	mov	r0, r5
		SysTick->LOAD = 0xFFFFFF;
    2a0c:	4a12      	ldr	r2, [pc, #72]	; (2a58 <_delay_cycles+0x58>)
    2a0e:	f06f 447f 	mvn.w	r4, #4278190080	; 0xff000000
    2a12:	6054      	str	r4, [r2, #4]
		SysTick->VAL  = 0xFFFFFF;
    2a14:	6094      	str	r4, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    2a16:	6813      	ldr	r3, [r2, #0]
    2a18:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    2a1c:	d0fb      	beq.n	2a16 <_delay_cycles+0x16>
	while (n--) {
    2a1e:	3801      	subs	r0, #1
    2a20:	b2c0      	uxtb	r0, r0
    2a22:	28ff      	cmp	r0, #255	; 0xff
    2a24:	d1f5      	bne.n	2a12 <_delay_cycles+0x12>
    2a26:	eba5 6505 	sub.w	r5, r5, r5, lsl #24
    2a2a:	f101 417f 	add.w	r1, r1, #4278190080	; 0xff000000
    2a2e:	3101      	adds	r1, #1
    2a30:	4429      	add	r1, r5
			;
		buf -= 0xFFFFFF;
	}

	SysTick->LOAD = buf;
    2a32:	4b09      	ldr	r3, [pc, #36]	; (2a58 <_delay_cycles+0x58>)
    2a34:	6059      	str	r1, [r3, #4]
	SysTick->VAL  = buf;
    2a36:	6099      	str	r1, [r3, #8]
	while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    2a38:	461a      	mov	r2, r3
    2a3a:	6813      	ldr	r3, [r2, #0]
    2a3c:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    2a40:	d0fb      	beq.n	2a3a <_delay_cycles+0x3a>
		;
}
    2a42:	bc30      	pop	{r4, r5}
    2a44:	4770      	bx	lr
	SysTick->LOAD = buf;
    2a46:	4b04      	ldr	r3, [pc, #16]	; (2a58 <_delay_cycles+0x58>)
    2a48:	6059      	str	r1, [r3, #4]
	SysTick->VAL  = buf;
    2a4a:	6099      	str	r1, [r3, #8]
	while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    2a4c:	461a      	mov	r2, r3
    2a4e:	6813      	ldr	r3, [r2, #0]
    2a50:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    2a54:	d0fb      	beq.n	2a4e <_delay_cycles+0x4e>
    2a56:	4770      	bx	lr
    2a58:	e000e010 	.word	0xe000e010

00002a5c <_dummy_func_no_return>:
static bool _dummy_func_no_return(uint32_t unused0, uint32_t unused1)
{
	(void)unused0;
	(void)unused1;
	return false;
}
    2a5c:	2000      	movs	r0, #0
    2a5e:	4770      	bx	lr

00002a60 <_usb_d_dev_handle_setup>:
/**
 * \brief Handles setup received interrupt
 * \param[in] ept Pointer to endpoint information.
 */
static void _usb_d_dev_handle_setup(struct _usb_d_dev_ep *ept)
{
    2a60:	b538      	push	{r3, r4, r5, lr}
	uint8_t epn     = USB_EP_GET_N(ept->ep);
    2a62:	7c83      	ldrb	r3, [r0, #18]
    2a64:	f003 030f 	and.w	r3, r3, #15
	bool    is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    2a68:	7cc2      	ldrb	r2, [r0, #19]

	if (!is_ctrl) {
    2a6a:	f002 0107 	and.w	r1, r2, #7
    2a6e:	2901      	cmp	r1, #1
    2a70:	d00b      	beq.n	2a8a <_usb_d_dev_handle_setup+0x2a>
}

static inline void hri_usbendpoint_clear_EPINTFLAG_reg(const void *const hw, uint8_t submodule_index,
                                                       hri_usbendpoint_epintflag_reg_t mask)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    2a72:	015a      	lsls	r2, r3, #5
    2a74:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    2a78:	2110      	movs	r1, #16
    2a7a:	f882 1107 	strb.w	r1, [r2, #263]	; 0x107
	}
}

static inline void hri_usbendpoint_clear_EPINTEN_RXSTP_bit(const void *const hw, uint8_t submodule_index)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = USB_DEVICE_EPINTENSET_RXSTP;
    2a7e:	015b      	lsls	r3, r3, #5
    2a80:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    2a84:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
    2a88:	bd38      	pop	{r3, r4, r5, pc}
	}
	/* Control transfer:
	 * SETUP transaction will terminate IN/OUT transaction,
	 * and start new transaction with received SETUP packet.
	 */
	if (_usb_d_dev_ep_is_busy(ept)) {
    2a8a:	f012 0f40 	tst.w	r2, #64	; 0x40
    2a8e:	d00c      	beq.n	2aaa <_usb_d_dev_handle_setup+0x4a>
		ept->flags.bits.is_busy = 0;
    2a90:	7cc2      	ldrb	r2, [r0, #19]
    2a92:	f36f 1286 	bfc	r2, #6, #1
    2a96:	74c2      	strb	r2, [r0, #19]
    2a98:	015a      	lsls	r2, r3, #5
    2a9a:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    2a9e:	2180      	movs	r1, #128	; 0x80
    2aa0:	f882 1104 	strb.w	r1, [r2, #260]	; 0x104
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    2aa4:	2140      	movs	r1, #64	; 0x40
    2aa6:	f882 1105 	strb.w	r1, [r2, #261]	; 0x105

		/* Stop transfer on either direction. */
		_usbd_ep_set_in_rdy(epn, 1, false);
		_usbd_ep_set_out_rdy(epn, 0, false);
	}
	ept->flags.bits.is_stalled = 0;
    2aaa:	7cc2      	ldrb	r2, [r0, #19]
    2aac:	f36f 02c3 	bfc	r2, #3, #1
    2ab0:	74c2      	strb	r2, [r0, #19]
	bank->STATUS_BK.reg     = 0;
    2ab2:	4909      	ldr	r1, [pc, #36]	; (2ad8 <_usb_d_dev_handle_setup+0x78>)
    2ab4:	015a      	lsls	r2, r3, #5
    2ab6:	188c      	adds	r4, r1, r2
    2ab8:	2500      	movs	r5, #0
    2aba:	72a5      	strb	r5, [r4, #10]
    2abc:	76a5      	strb	r5, [r4, #26]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    2abe:	f102 4382 	add.w	r3, r2, #1090519040	; 0x41000000
    2ac2:	246f      	movs	r4, #111	; 0x6f
    2ac4:	f883 4107 	strb.w	r4, [r3, #263]	; 0x107
}

static inline void hri_usbendpoint_clear_EPINTEN_reg(const void *const hw, uint8_t submodule_index,
                                                     hri_usbendpoint_epintenset_reg_t mask)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    2ac8:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    2acc:	f882 4108 	strb.w	r4, [r2, #264]	; 0x108
	_usbd_ep_clear_bank_status(epn, 0);
	_usbd_ep_clear_bank_status(epn, 1);
	_usbd_ep_int_ack(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
	_usbd_ep_int_dis(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
	/* Invoke callback. */
	dev_inst.ep_callbacks.setup(ept->ep);
    2ad0:	6e8b      	ldr	r3, [r1, #104]	; 0x68
    2ad2:	7c80      	ldrb	r0, [r0, #18]
    2ad4:	4798      	blx	r3
    2ad6:	bd38      	pop	{r3, r4, r5, pc}
    2ad8:	20000700 	.word	0x20000700

00002adc <_usb_d_dev_handle_stall>:
 * \brief Handles stall sent interrupt
 * \param[in] ept Pointer to endpoint information.
 * \param[in] bank_n Bank number.
 */
static void _usb_d_dev_handle_stall(struct _usb_d_dev_ep *ept, const uint8_t bank_n)
{
    2adc:	b508      	push	{r3, lr}
		_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
    2ade:	2320      	movs	r3, #32
    2ae0:	fa03 f101 	lsl.w	r1, r3, r1
	hri_usbendpoint_clear_EPINTEN_reg(USB, epn, flags);
    2ae4:	b2c9      	uxtb	r1, r1
	uint8_t epn = USB_EP_GET_N(ept->ep);
    2ae6:	7c83      	ldrb	r3, [r0, #18]
    2ae8:	f003 030f 	and.w	r3, r3, #15
    2aec:	015b      	lsls	r3, r3, #5
    2aee:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    2af2:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
	/* Clear interrupt enable. Leave status there for status check. */
	_usbd_ep_int_stall_en(epn, bank_n, false);
	dev_inst.ep_callbacks.done(ept->ep, USB_TRANS_STALL, ept->trans_count);
    2af6:	4b03      	ldr	r3, [pc, #12]	; (2b04 <_usb_d_dev_handle_stall+0x28>)
    2af8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    2afa:	6882      	ldr	r2, [r0, #8]
    2afc:	2101      	movs	r1, #1
    2afe:	7c80      	ldrb	r0, [r0, #18]
    2b00:	4798      	blx	r3
    2b02:	bd08      	pop	{r3, pc}
    2b04:	20000700 	.word	0x20000700

00002b08 <_usb_d_dev_trans_done>:
 *  \brief Finish the transaction and invoke callback
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_done(struct _usb_d_dev_ep *ept, const int32_t code)
{
    2b08:	b538      	push	{r3, r4, r5, lr}
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    2b0a:	7c84      	ldrb	r4, [r0, #18]
    2b0c:	2cff      	cmp	r4, #255	; 0xff
    2b0e:	d003      	beq.n	2b18 <_usb_d_dev_trans_done+0x10>
    2b10:	7cc3      	ldrb	r3, [r0, #19]
    2b12:	f013 0f40 	tst.w	r3, #64	; 0x40
    2b16:	d100      	bne.n	2b1a <_usb_d_dev_trans_done+0x12>
    2b18:	bd38      	pop	{r3, r4, r5, pc}
		return;
	}
	ept->flags.bits.is_busy = 0;
    2b1a:	7cc2      	ldrb	r2, [r0, #19]
    2b1c:	f36f 1286 	bfc	r2, #6, #1
    2b20:	74c2      	strb	r2, [r0, #19]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
    2b22:	4a03      	ldr	r2, [pc, #12]	; (2b30 <_usb_d_dev_trans_done+0x28>)
    2b24:	6f15      	ldr	r5, [r2, #112]	; 0x70
    2b26:	6882      	ldr	r2, [r0, #8]
    2b28:	4620      	mov	r0, r4
    2b2a:	47a8      	blx	r5
    2b2c:	e7f4      	b.n	2b18 <_usb_d_dev_trans_done+0x10>
    2b2e:	bf00      	nop
    2b30:	20000700 	.word	0x20000700

00002b34 <_usb_d_dev_trans_stop>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_stop(struct _usb_d_dev_ep *ept, bool dir, const int32_t code)
{
    2b34:	b530      	push	{r4, r5, lr}
    2b36:	b083      	sub	sp, #12
	uint8_t epn = USB_EP_GET_N(ept->ep);
    2b38:	7c83      	ldrb	r3, [r0, #18]
	;
	const uint8_t intflags[2] = {USB_D_BANK0_INT_FLAGS, USB_D_BANK1_INT_FLAGS};
    2b3a:	2425      	movs	r4, #37	; 0x25
    2b3c:	f88d 4004 	strb.w	r4, [sp, #4]
    2b40:	244a      	movs	r4, #74	; 0x4a
    2b42:	f88d 4005 	strb.w	r4, [sp, #5]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    2b46:	2bff      	cmp	r3, #255	; 0xff
    2b48:	d01e      	beq.n	2b88 <_usb_d_dev_trans_stop+0x54>
    2b4a:	7cc4      	ldrb	r4, [r0, #19]
    2b4c:	f014 0f40 	tst.w	r4, #64	; 0x40
    2b50:	d01a      	beq.n	2b88 <_usb_d_dev_trans_stop+0x54>
	uint8_t epn = USB_EP_GET_N(ept->ep);
    2b52:	f003 040f 	and.w	r4, r3, #15
		return;
	}
	/* Stop transfer */
	if (dir) {
    2b56:	b1c9      	cbz	r1, 2b8c <_usb_d_dev_trans_stop+0x58>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    2b58:	0163      	lsls	r3, r4, #5
    2b5a:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    2b5e:	2580      	movs	r5, #128	; 0x80
    2b60:	f883 5104 	strb.w	r5, [r3, #260]	; 0x104
    2b64:	460b      	mov	r3, r1
		_usbd_ep_set_in_rdy(epn, 1, false);
	} else {
		/* NAK OUT */
		_usbd_ep_set_out_rdy(epn, 0, false);
	}
	_usbd_ep_int_ack(epn, intflags[dir]);
    2b66:	a902      	add	r1, sp, #8
    2b68:	440b      	add	r3, r1
    2b6a:	f813 1c04 	ldrb.w	r1, [r3, #-4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    2b6e:	0163      	lsls	r3, r4, #5
    2b70:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    2b74:	f883 1107 	strb.w	r1, [r3, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    2b78:	0163      	lsls	r3, r4, #5
    2b7a:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    2b7e:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
	_usbd_ep_int_dis(epn, intflags[dir]);
	_usb_d_dev_trans_done(ept, code);
    2b82:	4611      	mov	r1, r2
    2b84:	4b05      	ldr	r3, [pc, #20]	; (2b9c <_usb_d_dev_trans_stop+0x68>)
    2b86:	4798      	blx	r3
}
    2b88:	b003      	add	sp, #12
    2b8a:	bd30      	pop	{r4, r5, pc}
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    2b8c:	0163      	lsls	r3, r4, #5
    2b8e:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    2b92:	2540      	movs	r5, #64	; 0x40
    2b94:	f883 5105 	strb.w	r5, [r3, #261]	; 0x105
    2b98:	e7e4      	b.n	2b64 <_usb_d_dev_trans_stop+0x30>
    2b9a:	bf00      	nop
    2b9c:	00002b09 	.word	0x00002b09

00002ba0 <_usb_d_dev_handle_trfail>:
{
    2ba0:	b530      	push	{r4, r5, lr}
    2ba2:	b083      	sub	sp, #12
	uint8_t            epn     = USB_EP_GET_N(ept->ep);
    2ba4:	7c83      	ldrb	r3, [r0, #18]
    2ba6:	f003 030f 	and.w	r3, r3, #15
	const uint8_t      fail[2] = {USB_DEVICE_EPINTFLAG_TRFAIL0, USB_DEVICE_EPINTFLAG_TRFAIL1};
    2baa:	2204      	movs	r2, #4
    2bac:	f88d 2004 	strb.w	r2, [sp, #4]
    2bb0:	2208      	movs	r2, #8
    2bb2:	f88d 2005 	strb.w	r2, [sp, #5]
    2bb6:	015a      	lsls	r2, r3, #5
	uint8_t            eptype
    2bb8:	460c      	mov	r4, r1
    2bba:	b391      	cbz	r1, 2c22 <_usb_d_dev_handle_trfail+0x82>

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_EPTYPE1_bf(const void *const hw,
                                                                                uint8_t           submodule_index)
{
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    2bbc:	f102 4182 	add.w	r1, r2, #1090519040	; 0x41000000
    2bc0:	f891 5100 	ldrb.w	r5, [r1, #256]	; 0x100
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE1_Msk) >> USB_DEVICE_EPCFG_EPTYPE1_Pos;
    2bc4:	f3c5 1502 	ubfx	r5, r5, #4, #3
	st.reg = bank[bank_n].STATUS_BK.reg;
    2bc8:	eb02 1104 	add.w	r1, r2, r4, lsl #4
    2bcc:	4a32      	ldr	r2, [pc, #200]	; (2c98 <_usb_d_dev_handle_trfail+0xf8>)
    2bce:	440a      	add	r2, r1
    2bd0:	7a91      	ldrb	r1, [r2, #10]
    2bd2:	b2c9      	uxtb	r1, r1
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
    2bd4:	2d02      	cmp	r5, #2
    2bd6:	d02c      	beq.n	2c32 <_usb_d_dev_handle_trfail+0x92>
	} else if (st.bit.ERRORFLOW) {
    2bd8:	f011 0f02 	tst.w	r1, #2
    2bdc:	d045      	beq.n	2c6a <_usb_d_dev_handle_trfail+0xca>
	bool                      is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    2bde:	7cc5      	ldrb	r5, [r0, #19]
		bank[bank_n].STATUS_BK.bit.ERRORFLOW = 0;
    2be0:	7a91      	ldrb	r1, [r2, #10]
    2be2:	f36f 0141 	bfc	r1, #1, #1
    2be6:	7291      	strb	r1, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    2be8:	aa02      	add	r2, sp, #8
    2bea:	4422      	add	r2, r4
    2bec:	f812 1c04 	ldrb.w	r1, [r2, #-4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    2bf0:	015a      	lsls	r2, r3, #5
    2bf2:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    2bf6:	f882 1107 	strb.w	r1, [r2, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    2bfa:	015b      	lsls	r3, r3, #5
    2bfc:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    2c00:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
		if (is_ctrl && _usb_d_dev_ep_is_busy(ept)) {
    2c04:	f005 0307 	and.w	r3, r5, #7
    2c08:	2b01      	cmp	r3, #1
    2c0a:	d143      	bne.n	2c94 <_usb_d_dev_handle_trfail+0xf4>
    2c0c:	7cc3      	ldrb	r3, [r0, #19]
    2c0e:	f013 0f40 	tst.w	r3, #64	; 0x40
    2c12:	d03f      	beq.n	2c94 <_usb_d_dev_handle_trfail+0xf4>
			if (bank_n != _usb_d_dev_ep_is_in(ept)) {
    2c14:	09d9      	lsrs	r1, r3, #7
    2c16:	428c      	cmp	r4, r1
    2c18:	d03c      	beq.n	2c94 <_usb_d_dev_handle_trfail+0xf4>
				_usb_d_dev_trans_stop(ept, _usb_d_dev_ep_is_in(ept), USB_TRANS_DONE);
    2c1a:	2200      	movs	r2, #0
    2c1c:	4b1f      	ldr	r3, [pc, #124]	; (2c9c <_usb_d_dev_handle_trfail+0xfc>)
    2c1e:	4798      	blx	r3
    2c20:	e038      	b.n	2c94 <_usb_d_dev_handle_trfail+0xf4>
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    2c22:	0159      	lsls	r1, r3, #5
    2c24:	f101 4182 	add.w	r1, r1, #1090519040	; 0x41000000
    2c28:	f891 5100 	ldrb.w	r5, [r1, #256]	; 0x100
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE0_Msk) >> USB_DEVICE_EPCFG_EPTYPE0_Pos;
    2c2c:	f005 0507 	and.w	r5, r5, #7
    2c30:	e7ca      	b.n	2bc8 <_usb_d_dev_handle_trfail+0x28>
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
    2c32:	f011 0f01 	tst.w	r1, #1
    2c36:	d0cf      	beq.n	2bd8 <_usb_d_dev_handle_trfail+0x38>
		bank[bank_n].STATUS_BK.bit.CRCERR = 0;
    2c38:	7a91      	ldrb	r1, [r2, #10]
    2c3a:	f36f 0100 	bfc	r1, #0, #1
    2c3e:	7291      	strb	r1, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    2c40:	aa02      	add	r2, sp, #8
    2c42:	4422      	add	r2, r4
    2c44:	f812 1c04 	ldrb.w	r1, [r2, #-4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    2c48:	015a      	lsls	r2, r3, #5
    2c4a:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    2c4e:	f882 1107 	strb.w	r1, [r2, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    2c52:	015b      	lsls	r3, r3, #5
    2c54:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    2c58:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
		_usb_d_dev_trans_stop(ept, bank_n, USB_TRANS_ERROR);
    2c5c:	2204      	movs	r2, #4
    2c5e:	1c21      	adds	r1, r4, #0
    2c60:	bf18      	it	ne
    2c62:	2101      	movne	r1, #1
    2c64:	4b0d      	ldr	r3, [pc, #52]	; (2c9c <_usb_d_dev_handle_trfail+0xfc>)
    2c66:	4798      	blx	r3
    2c68:	e014      	b.n	2c94 <_usb_d_dev_handle_trfail+0xf4>
	bank->STATUS_BK.reg     = 0;
    2c6a:	eb04 0143 	add.w	r1, r4, r3, lsl #1
    2c6e:	4a0a      	ldr	r2, [pc, #40]	; (2c98 <_usb_d_dev_handle_trfail+0xf8>)
    2c70:	eb02 1201 	add.w	r2, r2, r1, lsl #4
    2c74:	2100      	movs	r1, #0
    2c76:	7291      	strb	r1, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    2c78:	aa02      	add	r2, sp, #8
    2c7a:	4414      	add	r4, r2
    2c7c:	f814 1c04 	ldrb.w	r1, [r4, #-4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    2c80:	015a      	lsls	r2, r3, #5
    2c82:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    2c86:	f882 1107 	strb.w	r1, [r2, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    2c8a:	015b      	lsls	r3, r3, #5
    2c8c:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    2c90:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
}
    2c94:	b003      	add	sp, #12
    2c96:	bd30      	pop	{r4, r5, pc}
    2c98:	20000700 	.word	0x20000700
    2c9c:	00002b35 	.word	0x00002b35

00002ca0 <_usb_d_dev_reset_epts>:
{
    2ca0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2ca4:	4d0c      	ldr	r5, [pc, #48]	; (2cd8 <_usb_d_dev_reset_epts+0x38>)
    2ca6:	f105 0474 	add.w	r4, r5, #116	; 0x74
    2caa:	f505 7594 	add.w	r5, r5, #296	; 0x128
		_usb_d_dev_trans_done(&dev_inst.ep[i], USB_TRANS_RESET);
    2cae:	f04f 0803 	mov.w	r8, #3
    2cb2:	4f0a      	ldr	r7, [pc, #40]	; (2cdc <_usb_d_dev_reset_epts+0x3c>)
		dev_inst.ep[i].ep       = 0xFF;
    2cb4:	26ff      	movs	r6, #255	; 0xff
		_usb_d_dev_trans_done(&dev_inst.ep[i], USB_TRANS_RESET);
    2cb6:	4641      	mov	r1, r8
    2cb8:	4620      	mov	r0, r4
    2cba:	47b8      	blx	r7
		dev_inst.ep[i].ep       = 0xFF;
    2cbc:	74a6      	strb	r6, [r4, #18]
		dev_inst.ep[i].flags.u8 = 0;
    2cbe:	2300      	movs	r3, #0
    2cc0:	74e3      	strb	r3, [r4, #19]
    2cc2:	3414      	adds	r4, #20
	for (i = 0; i < USB_D_N_EP; i++) {
    2cc4:	42ac      	cmp	r4, r5
    2cc6:	d1f6      	bne.n	2cb6 <_usb_d_dev_reset_epts+0x16>
	memset(prvt_inst.desc_table, 0, sizeof(UsbDeviceDescriptor) * (CONF_USB_D_MAX_EP_N + 1));
    2cc8:	2260      	movs	r2, #96	; 0x60
    2cca:	4619      	mov	r1, r3
    2ccc:	4802      	ldr	r0, [pc, #8]	; (2cd8 <_usb_d_dev_reset_epts+0x38>)
    2cce:	4b04      	ldr	r3, [pc, #16]	; (2ce0 <_usb_d_dev_reset_epts+0x40>)
    2cd0:	4798      	blx	r3
    2cd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2cd6:	bf00      	nop
    2cd8:	20000700 	.word	0x20000700
    2cdc:	00002b09 	.word	0x00002b09
    2ce0:	00004a51 	.word	0x00004a51

00002ce4 <_usb_d_dev_in_next>:
{
    2ce4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2ce8:	4605      	mov	r5, r0
	uint8_t            epn         = USB_EP_GET_N(ept->ep);
    2cea:	7c84      	ldrb	r4, [r0, #18]
    2cec:	f004 040f 	and.w	r4, r4, #15
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
    2cf0:	4688      	mov	r8, r1
    2cf2:	2900      	cmp	r1, #0
    2cf4:	f000 809f 	beq.w	2e36 <_usb_d_dev_in_next+0x152>
	UsbDeviceDescBank *bank        = &prvt_inst.desc_table[epn].DeviceDescBank[0];
    2cf8:	4b58      	ldr	r3, [pc, #352]	; (2e5c <_usb_d_dev_in_next+0x178>)
    2cfa:	eb03 1344 	add.w	r3, r3, r4, lsl #5
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
    2cfe:	6958      	ldr	r0, [r3, #20]
    2d00:	f3c0 0e0d 	ubfx	lr, r0, #0, #14
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    2d04:	8a2b      	ldrh	r3, [r5, #16]
    2d06:	f240 32ff 	movw	r2, #1023	; 0x3ff
    2d0a:	4293      	cmp	r3, r2
    2d0c:	f000 808d 	beq.w	2e2a <_usb_d_dev_in_next+0x146>
    2d10:	3b01      	subs	r3, #1
    2d12:	b298      	uxth	r0, r3
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    2d14:	7cef      	ldrb	r7, [r5, #19]
    2d16:	f007 0707 	and.w	r7, r7, #7
	if (isr) {
    2d1a:	f1b8 0f00 	cmp.w	r8, #0
    2d1e:	d005      	beq.n	2d2c <_usb_d_dev_in_next+0x48>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    2d20:	0162      	lsls	r2, r4, #5
    2d22:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    2d26:	2302      	movs	r3, #2
    2d28:	f882 3107 	strb.w	r3, [r2, #263]	; 0x107
	ept->trans_count += trans_count;
    2d2c:	68a9      	ldr	r1, [r5, #8]
    2d2e:	eb0e 0301 	add.w	r3, lr, r1
    2d32:	60ab      	str	r3, [r5, #8]
	if (ept->trans_count < ept->trans_size) {
    2d34:	686e      	ldr	r6, [r5, #4]
    2d36:	42b3      	cmp	r3, r6
    2d38:	d23f      	bcs.n	2dba <_usb_d_dev_in_next+0xd6>
		trans_next = ept->trans_size - ept->trans_count;
    2d3a:	1af6      	subs	r6, r6, r3
    2d3c:	b2b6      	uxth	r6, r6
		if (ept->flags.bits.use_cache) {
    2d3e:	7cea      	ldrb	r2, [r5, #19]
    2d40:	f012 0f20 	tst.w	r2, #32
    2d44:	d02d      	beq.n	2da2 <_usb_d_dev_in_next+0xbe>
    2d46:	8a2a      	ldrh	r2, [r5, #16]
    2d48:	4296      	cmp	r6, r2
    2d4a:	bf28      	it	cs
    2d4c:	4616      	movcs	r6, r2
			memcpy(ept->cache, &ept->trans_buf[ept->trans_count], trans_next);
    2d4e:	6829      	ldr	r1, [r5, #0]
    2d50:	4632      	mov	r2, r6
    2d52:	4419      	add	r1, r3
    2d54:	68e8      	ldr	r0, [r5, #12]
    2d56:	4b42      	ldr	r3, [pc, #264]	; (2e60 <_usb_d_dev_in_next+0x17c>)
    2d58:	4798      	blx	r3
			_usbd_ep_set_buf(epn, 1, (uint32_t)ept->cache);
    2d5a:	68ea      	ldr	r2, [r5, #12]
	bank->ADDR.reg          = addr;
    2d5c:	4b3f      	ldr	r3, [pc, #252]	; (2e5c <_usb_d_dev_in_next+0x178>)
    2d5e:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    2d62:	611a      	str	r2, [r3, #16]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
    2d64:	4b3d      	ldr	r3, [pc, #244]	; (2e5c <_usb_d_dev_in_next+0x178>)
    2d66:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    2d6a:	695a      	ldr	r2, [r3, #20]
    2d6c:	f366 020d 	bfi	r2, r6, #0, #14
    2d70:	615a      	str	r2, [r3, #20]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
    2d72:	695a      	ldr	r2, [r3, #20]
    2d74:	f36f 329b 	bfc	r2, #14, #14
    2d78:	615a      	str	r2, [r3, #20]
	if (!isr) {
    2d7a:	f1b8 0f00 	cmp.w	r8, #0
    2d7e:	d108      	bne.n	2d92 <_usb_d_dev_in_next+0xae>
			inten = USB_D_BANK1_INT_FLAGS;
    2d80:	2f01      	cmp	r7, #1
    2d82:	bf0c      	ite	eq
    2d84:	224e      	moveq	r2, #78	; 0x4e
    2d86:	224a      	movne	r2, #74	; 0x4a
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    2d88:	0163      	lsls	r3, r4, #5
    2d8a:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    2d8e:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    2d92:	0164      	lsls	r4, r4, #5
    2d94:	f104 4482 	add.w	r4, r4, #1090519040	; 0x41000000
    2d98:	2380      	movs	r3, #128	; 0x80
    2d9a:	f884 3105 	strb.w	r3, [r4, #261]	; 0x105
    2d9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2da2:	f5b6 5f00 	cmp.w	r6, #8192	; 0x2000
    2da6:	bf28      	it	cs
    2da8:	f44f 5600 	movcs.w	r6, #8192	; 0x2000
			_usbd_ep_set_buf(epn, 1, (uint32_t)&ept->trans_buf[ept->trans_count]);
    2dac:	6829      	ldr	r1, [r5, #0]
    2dae:	440b      	add	r3, r1
	bank->ADDR.reg          = addr;
    2db0:	4a2a      	ldr	r2, [pc, #168]	; (2e5c <_usb_d_dev_in_next+0x178>)
    2db2:	eb02 1244 	add.w	r2, r2, r4, lsl #5
    2db6:	6113      	str	r3, [r2, #16]
    2db8:	e7d4      	b.n	2d64 <_usb_d_dev_in_next+0x80>
	} else if (ept->flags.bits.need_zlp) {
    2dba:	7ceb      	ldrb	r3, [r5, #19]
    2dbc:	f013 0f10 	tst.w	r3, #16
    2dc0:	d00f      	beq.n	2de2 <_usb_d_dev_in_next+0xfe>
		ept->flags.bits.need_zlp = 0;
    2dc2:	7ceb      	ldrb	r3, [r5, #19]
    2dc4:	f36f 1304 	bfc	r3, #4, #1
    2dc8:	74eb      	strb	r3, [r5, #19]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
    2dca:	4b24      	ldr	r3, [pc, #144]	; (2e5c <_usb_d_dev_in_next+0x178>)
    2dcc:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    2dd0:	695a      	ldr	r2, [r3, #20]
    2dd2:	f36f 020d 	bfc	r2, #0, #14
    2dd6:	615a      	str	r2, [r3, #20]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
    2dd8:	695a      	ldr	r2, [r3, #20]
    2dda:	f36f 329b 	bfc	r2, #14, #14
    2dde:	615a      	str	r2, [r3, #20]
    2de0:	e7cb      	b.n	2d7a <_usb_d_dev_in_next+0x96>
	if (is_ctrl) {
    2de2:	2f01      	cmp	r7, #1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    2de4:	ea4f 1444 	mov.w	r4, r4, lsl #5
    2de8:	f104 4482 	add.w	r4, r4, #1090519040	; 0x41000000
    2dec:	bf0c      	ite	eq
    2dee:	234b      	moveq	r3, #75	; 0x4b
    2df0:	234a      	movne	r3, #74	; 0x4a
    2df2:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
	if (last_pkt == ept->size) {
    2df6:	8a2a      	ldrh	r2, [r5, #16]
    2df8:	ea00 030e 	and.w	r3, r0, lr
    2dfc:	429a      	cmp	r2, r3
    2dfe:	d005      	beq.n	2e0c <_usb_d_dev_in_next+0x128>
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    2e00:	2100      	movs	r1, #0
    2e02:	4628      	mov	r0, r5
    2e04:	4b17      	ldr	r3, [pc, #92]	; (2e64 <_usb_d_dev_in_next+0x180>)
    2e06:	4798      	blx	r3
	return;
    2e08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ept->flags.bits.is_busy = 0;
    2e0c:	7ceb      	ldrb	r3, [r5, #19]
    2e0e:	f36f 1386 	bfc	r3, #6, #1
    2e12:	74eb      	strb	r3, [r5, #19]
		if (dev_inst.ep_callbacks.more(ept->ep, ept->trans_count)) {
    2e14:	4b11      	ldr	r3, [pc, #68]	; (2e5c <_usb_d_dev_in_next+0x178>)
    2e16:	6edb      	ldr	r3, [r3, #108]	; 0x6c
    2e18:	68a9      	ldr	r1, [r5, #8]
    2e1a:	7ca8      	ldrb	r0, [r5, #18]
    2e1c:	4798      	blx	r3
    2e1e:	b9d0      	cbnz	r0, 2e56 <_usb_d_dev_in_next+0x172>
		ept->flags.bits.is_busy = 1;
    2e20:	7ceb      	ldrb	r3, [r5, #19]
    2e22:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    2e26:	74eb      	strb	r3, [r5, #19]
    2e28:	e7ea      	b.n	2e00 <_usb_d_dev_in_next+0x11c>
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    2e2a:	7cef      	ldrb	r7, [r5, #19]
    2e2c:	f007 0707 	and.w	r7, r7, #7
    2e30:	f240 30ff 	movw	r0, #1023	; 0x3ff
    2e34:	e774      	b.n	2d20 <_usb_d_dev_in_next+0x3c>
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    2e36:	8a03      	ldrh	r3, [r0, #16]
    2e38:	f240 32ff 	movw	r2, #1023	; 0x3ff
    2e3c:	4293      	cmp	r3, r2
    2e3e:	d107      	bne.n	2e50 <_usb_d_dev_in_next+0x16c>
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    2e40:	7cef      	ldrb	r7, [r5, #19]
    2e42:	f007 0707 	and.w	r7, r7, #7
    2e46:	f04f 0e00 	mov.w	lr, #0
    2e4a:	f240 30ff 	movw	r0, #1023	; 0x3ff
    2e4e:	e76d      	b.n	2d2c <_usb_d_dev_in_next+0x48>
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    2e50:	f04f 0e00 	mov.w	lr, #0
    2e54:	e75c      	b.n	2d10 <_usb_d_dev_in_next+0x2c>
    2e56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2e5a:	bf00      	nop
    2e5c:	20000700 	.word	0x20000700
    2e60:	0000491d 	.word	0x0000491d
    2e64:	00002b09 	.word	0x00002b09

00002e68 <_usb_d_dev_out_next>:
{
    2e68:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2e6c:	4604      	mov	r4, r0
	uint8_t            epn        = USB_EP_GET_N(ept->ep);
    2e6e:	7c85      	ldrb	r5, [r0, #18]
    2e70:	f005 050f 	and.w	r5, r5, #15
	uint16_t           trans_size = isr ? bank->PCKSIZE.bit.MULTI_PACKET_SIZE : 0;
    2e74:	4689      	mov	r9, r1
    2e76:	2900      	cmp	r1, #0
    2e78:	d056      	beq.n	2f28 <_usb_d_dev_out_next+0xc0>
    2e7a:	4b74      	ldr	r3, [pc, #464]	; (304c <_usb_d_dev_out_next+0x1e4>)
    2e7c:	eb03 1345 	add.w	r3, r3, r5, lsl #5
    2e80:	685a      	ldr	r2, [r3, #4]
    2e82:	f3c2 3a8d 	ubfx	sl, r2, #14, #14
	uint16_t           last_trans = isr ? bank->PCKSIZE.bit.BYTE_COUNT : 0;
    2e86:	685f      	ldr	r7, [r3, #4]
    2e88:	f3c7 070d 	ubfx	r7, r7, #0, #14
    2e8c:	46bb      	mov	fp, r7
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
    2e8e:	8a06      	ldrh	r6, [r0, #16]
    2e90:	f240 33ff 	movw	r3, #1023	; 0x3ff
    2e94:	429e      	cmp	r6, r3
    2e96:	f000 80ba 	beq.w	300e <_usb_d_dev_out_next+0x1a6>
    2e9a:	3e01      	subs	r6, #1
    2e9c:	b2b6      	uxth	r6, r6
	uint16_t           last_pkt   = last_trans & size_mask;
    2e9e:	ea06 070b 	and.w	r7, r6, fp
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    2ea2:	f894 8013 	ldrb.w	r8, [r4, #19]
    2ea6:	f008 0807 	and.w	r8, r8, #7
	if (isr) {
    2eaa:	f1b9 0f00 	cmp.w	r9, #0
    2eae:	d005      	beq.n	2ebc <_usb_d_dev_out_next+0x54>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    2eb0:	016b      	lsls	r3, r5, #5
    2eb2:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    2eb6:	2201      	movs	r2, #1
    2eb8:	f883 2107 	strb.w	r2, [r3, #263]	; 0x107
	if (ept->flags.bits.use_cache && ept->trans_size) {
    2ebc:	7ce3      	ldrb	r3, [r4, #19]
    2ebe:	f013 0f20 	tst.w	r3, #32
    2ec2:	d00d      	beq.n	2ee0 <_usb_d_dev_out_next+0x78>
    2ec4:	6862      	ldr	r2, [r4, #4]
    2ec6:	2a00      	cmp	r2, #0
    2ec8:	d037      	beq.n	2f3a <_usb_d_dev_out_next+0xd2>
		uint16_t buf_remain = ept->trans_size - ept->trans_count;
    2eca:	68a0      	ldr	r0, [r4, #8]
    2ecc:	1a12      	subs	r2, r2, r0
    2ece:	b292      	uxth	r2, r2
		memcpy(&ept->trans_buf[ept->trans_count], ept->cache, (buf_remain > last_pkt) ? last_pkt : buf_remain);
    2ed0:	6823      	ldr	r3, [r4, #0]
    2ed2:	42ba      	cmp	r2, r7
    2ed4:	bf28      	it	cs
    2ed6:	463a      	movcs	r2, r7
    2ed8:	68e1      	ldr	r1, [r4, #12]
    2eda:	4418      	add	r0, r3
    2edc:	4b5c      	ldr	r3, [pc, #368]	; (3050 <_usb_d_dev_out_next+0x1e8>)
    2ede:	4798      	blx	r3
	if (ept->trans_size == 0 && ept->flags.bits.need_zlp) {
    2ee0:	6863      	ldr	r3, [r4, #4]
    2ee2:	b353      	cbz	r3, 2f3a <_usb_d_dev_out_next+0xd2>
	} else if (isr && last_pkt < ept->size) {
    2ee4:	f1b9 0f00 	cmp.w	r9, #0
    2ee8:	d040      	beq.n	2f6c <_usb_d_dev_out_next+0x104>
    2eea:	8a22      	ldrh	r2, [r4, #16]
    2eec:	42ba      	cmp	r2, r7
    2eee:	d93d      	bls.n	2f6c <_usb_d_dev_out_next+0x104>
		ept->flags.bits.need_zlp = 0;
    2ef0:	7ce3      	ldrb	r3, [r4, #19]
    2ef2:	f36f 1304 	bfc	r3, #4, #1
    2ef6:	74e3      	strb	r3, [r4, #19]
		ept->trans_count += last_trans;
    2ef8:	68a3      	ldr	r3, [r4, #8]
    2efa:	445b      	add	r3, fp
    2efc:	60a3      	str	r3, [r4, #8]
	if (is_ctrl) {
    2efe:	f1b8 0f01 	cmp.w	r8, #1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    2f02:	ea4f 1345 	mov.w	r3, r5, lsl #5
    2f06:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    2f0a:	bf0c      	ite	eq
    2f0c:	222d      	moveq	r2, #45	; 0x2d
    2f0e:	2225      	movne	r2, #37	; 0x25
    2f10:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
	if (0 == epn) {
    2f14:	b915      	cbnz	r5, 2f1c <_usb_d_dev_out_next+0xb4>
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    2f16:	68e2      	ldr	r2, [r4, #12]
	bank->ADDR.reg          = addr;
    2f18:	4b4c      	ldr	r3, [pc, #304]	; (304c <_usb_d_dev_out_next+0x1e4>)
    2f1a:	601a      	str	r2, [r3, #0]
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    2f1c:	2100      	movs	r1, #0
    2f1e:	4620      	mov	r0, r4
    2f20:	4b4c      	ldr	r3, [pc, #304]	; (3054 <_usb_d_dev_out_next+0x1ec>)
    2f22:	4798      	blx	r3
	return;
    2f24:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
    2f28:	8a06      	ldrh	r6, [r0, #16]
    2f2a:	f240 33ff 	movw	r3, #1023	; 0x3ff
    2f2e:	429e      	cmp	r6, r3
    2f30:	d07b      	beq.n	302a <_usb_d_dev_out_next+0x1c2>
    2f32:	f04f 0b00 	mov.w	fp, #0
    2f36:	46da      	mov	sl, fp
    2f38:	e7af      	b.n	2e9a <_usb_d_dev_out_next+0x32>
	if (ept->trans_size == 0 && ept->flags.bits.need_zlp) {
    2f3a:	7ce3      	ldrb	r3, [r4, #19]
    2f3c:	f013 0f10 	tst.w	r3, #16
    2f40:	d06c      	beq.n	301c <_usb_d_dev_out_next+0x1b4>
		ept->flags.bits.need_zlp  = 0;
    2f42:	7ce3      	ldrb	r3, [r4, #19]
		ept->flags.bits.use_cache = 1;
    2f44:	f003 03ef 	and.w	r3, r3, #239	; 0xef
    2f48:	f043 0320 	orr.w	r3, r3, #32
    2f4c:	74e3      	strb	r3, [r4, #19]
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    2f4e:	68e0      	ldr	r0, [r4, #12]
	bank->ADDR.reg          = addr;
    2f50:	493e      	ldr	r1, [pc, #248]	; (304c <_usb_d_dev_out_next+0x1e4>)
    2f52:	016a      	lsls	r2, r5, #5
    2f54:	188b      	adds	r3, r1, r2
    2f56:	5088      	str	r0, [r1, r2]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    2f58:	8a21      	ldrh	r1, [r4, #16]
    2f5a:	685a      	ldr	r2, [r3, #4]
    2f5c:	f361 329b 	bfi	r2, r1, #14, #14
    2f60:	605a      	str	r2, [r3, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    2f62:	685a      	ldr	r2, [r3, #4]
    2f64:	f36f 020d 	bfc	r2, #0, #14
    2f68:	605a      	str	r2, [r3, #4]
    2f6a:	e01d      	b.n	2fa8 <_usb_d_dev_out_next+0x140>
		ept->trans_count += trans_size;
    2f6c:	68a2      	ldr	r2, [r4, #8]
    2f6e:	4452      	add	r2, sl
    2f70:	60a2      	str	r2, [r4, #8]
		if (ept->trans_count < ept->trans_size) {
    2f72:	4293      	cmp	r3, r2
    2f74:	d9c3      	bls.n	2efe <_usb_d_dev_out_next+0x96>
			trans_next = ept->trans_size - ept->trans_count;
    2f76:	1a9b      	subs	r3, r3, r2
    2f78:	b29b      	uxth	r3, r3
			if (ept->flags.bits.use_cache) {
    2f7a:	7ce1      	ldrb	r1, [r4, #19]
    2f7c:	f011 0f20 	tst.w	r1, #32
    2f80:	d026      	beq.n	2fd0 <_usb_d_dev_out_next+0x168>
    2f82:	8a22      	ldrh	r2, [r4, #16]
    2f84:	4293      	cmp	r3, r2
    2f86:	bf28      	it	cs
    2f88:	4613      	movcs	r3, r2
				_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    2f8a:	68e0      	ldr	r0, [r4, #12]
	bank->ADDR.reg          = addr;
    2f8c:	016a      	lsls	r2, r5, #5
    2f8e:	492f      	ldr	r1, [pc, #188]	; (304c <_usb_d_dev_out_next+0x1e4>)
    2f90:	5088      	str	r0, [r1, r2]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    2f92:	4a2e      	ldr	r2, [pc, #184]	; (304c <_usb_d_dev_out_next+0x1e4>)
    2f94:	eb02 1245 	add.w	r2, r2, r5, lsl #5
    2f98:	6851      	ldr	r1, [r2, #4]
    2f9a:	f363 319b 	bfi	r1, r3, #14, #14
    2f9e:	6051      	str	r1, [r2, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    2fa0:	6853      	ldr	r3, [r2, #4]
    2fa2:	f36f 030d 	bfc	r3, #0, #14
    2fa6:	6053      	str	r3, [r2, #4]
	if (!isr) {
    2fa8:	f1b9 0f00 	cmp.w	r9, #0
    2fac:	d108      	bne.n	2fc0 <_usb_d_dev_out_next+0x158>
		if (is_ctrl) {
    2fae:	f1b8 0f01 	cmp.w	r8, #1
    2fb2:	d025      	beq.n	3000 <_usb_d_dev_out_next+0x198>
			inten = USB_D_BANK0_INT_FLAGS;
    2fb4:	2225      	movs	r2, #37	; 0x25
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    2fb6:	016b      	lsls	r3, r5, #5
    2fb8:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    2fbc:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    2fc0:	016d      	lsls	r5, r5, #5
    2fc2:	f105 4582 	add.w	r5, r5, #1090519040	; 0x41000000
    2fc6:	2340      	movs	r3, #64	; 0x40
    2fc8:	f885 3104 	strb.w	r3, [r5, #260]	; 0x104
    2fcc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if (trans_next > ept->size) {
    2fd0:	8a21      	ldrh	r1, [r4, #16]
    2fd2:	428b      	cmp	r3, r1
    2fd4:	d90a      	bls.n	2fec <_usb_d_dev_out_next+0x184>
					if (trans_next > USB_D_DEV_TRANS_MAX) {
    2fd6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
    2fda:	d80e      	bhi.n	2ffa <_usb_d_dev_out_next+0x192>
    2fdc:	ea23 0306 	bic.w	r3, r3, r6
				_usbd_ep_set_buf(epn, 0, (uint32_t)&ept->trans_buf[ept->trans_count]);
    2fe0:	6821      	ldr	r1, [r4, #0]
    2fe2:	440a      	add	r2, r1
	bank->ADDR.reg          = addr;
    2fe4:	0169      	lsls	r1, r5, #5
    2fe6:	4819      	ldr	r0, [pc, #100]	; (304c <_usb_d_dev_out_next+0x1e4>)
    2fe8:	5042      	str	r2, [r0, r1]
    2fea:	e7d2      	b.n	2f92 <_usb_d_dev_out_next+0x12a>
				} else if (trans_next < ept->size) {
    2fec:	428b      	cmp	r3, r1
    2fee:	d2f7      	bcs.n	2fe0 <_usb_d_dev_out_next+0x178>
					ept->flags.bits.use_cache = 1;
    2ff0:	7ce1      	ldrb	r1, [r4, #19]
    2ff2:	f041 0120 	orr.w	r1, r1, #32
    2ff6:	74e1      	strb	r1, [r4, #19]
    2ff8:	e7f2      	b.n	2fe0 <_usb_d_dev_out_next+0x178>
						trans_next = USB_D_DEV_TRANS_MAX;
    2ffa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    2ffe:	e7ef      	b.n	2fe0 <_usb_d_dev_out_next+0x178>
	bank->STATUS_BK.reg     = 0;
    3000:	4b12      	ldr	r3, [pc, #72]	; (304c <_usb_d_dev_out_next+0x1e4>)
    3002:	eb03 1345 	add.w	r3, r3, r5, lsl #5
    3006:	2200      	movs	r2, #0
    3008:	769a      	strb	r2, [r3, #26]
			inten = USB_D_BANK0_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL1;
    300a:	222d      	movs	r2, #45	; 0x2d
    300c:	e7d3      	b.n	2fb6 <_usb_d_dev_out_next+0x14e>
	uint16_t           last_pkt   = last_trans & size_mask;
    300e:	f3c7 0709 	ubfx	r7, r7, #0, #10
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    3012:	f890 8013 	ldrb.w	r8, [r0, #19]
    3016:	f008 0807 	and.w	r8, r8, #7
    301a:	e749      	b.n	2eb0 <_usb_d_dev_out_next+0x48>
	} else if (isr && last_pkt < ept->size) {
    301c:	f1b9 0f00 	cmp.w	r9, #0
    3020:	d10b      	bne.n	303a <_usb_d_dev_out_next+0x1d2>
		ept->trans_count += trans_size;
    3022:	68a3      	ldr	r3, [r4, #8]
    3024:	4453      	add	r3, sl
    3026:	60a3      	str	r3, [r4, #8]
    3028:	e769      	b.n	2efe <_usb_d_dev_out_next+0x96>
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    302a:	f890 8013 	ldrb.w	r8, [r0, #19]
    302e:	f008 0807 	and.w	r8, r8, #7
	uint16_t           last_pkt   = last_trans & size_mask;
    3032:	2700      	movs	r7, #0
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    3034:	46bb      	mov	fp, r7
    3036:	46ba      	mov	sl, r7
    3038:	e740      	b.n	2ebc <_usb_d_dev_out_next+0x54>
	} else if (isr && last_pkt < ept->size) {
    303a:	8a23      	ldrh	r3, [r4, #16]
    303c:	42bb      	cmp	r3, r7
    303e:	f63f af57 	bhi.w	2ef0 <_usb_d_dev_out_next+0x88>
		ept->trans_count += trans_size;
    3042:	68a3      	ldr	r3, [r4, #8]
    3044:	4453      	add	r3, sl
    3046:	60a3      	str	r3, [r4, #8]
    3048:	e759      	b.n	2efe <_usb_d_dev_out_next+0x96>
    304a:	bf00      	nop
    304c:	20000700 	.word	0x20000700
    3050:	0000491d 	.word	0x0000491d
    3054:	00002b09 	.word	0x00002b09

00003058 <_usb_d_dev_handler>:
{
    3058:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	uint16_t epint = hw->DEVICE.EPINTSMRY.reg;
    305c:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    3060:	8c1e      	ldrh	r6, [r3, #32]
    3062:	b2b6      	uxth	r6, r6
	if (0 == epint) {
    3064:	b146      	cbz	r6, 3078 <_usb_d_dev_handler+0x20>
    3066:	4d91      	ldr	r5, [pc, #580]	; (32ac <_usb_d_dev_handler+0x254>)
	uint32_t lpm_variable = 0;
    3068:	2400      	movs	r4, #0
		if ((ept->flags.bits.eptype == 0x1) && !_usb_d_dev_ep_is_busy(ept)) {
    306a:	f1a5 0774 	sub.w	r7, r5, #116	; 0x74
			_usb_d_dev_handle_setup(ept);
    306e:	f8df 9258 	ldr.w	r9, [pc, #600]	; 32c8 <_usb_d_dev_handler+0x270>
			_usb_d_dev_handle_trfail(ept, 1);
    3072:	f8df 8258 	ldr.w	r8, [pc, #600]	; 32cc <_usb_d_dev_handler+0x274>
    3076:	e0d3      	b.n	3220 <_usb_d_dev_handler+0x1c8>
	return tmp;
}

static inline hri_usbdevice_intflag_reg_t hri_usbdevice_read_INTFLAG_reg(const void *const hw)
{
	return ((Usb *)hw)->DEVICE.INTFLAG.reg;
    3078:	8b99      	ldrh	r1, [r3, #28]
	return tmp;
}

static inline hri_usbdevice_intenset_reg_t hri_usbdevice_read_INTEN_reg(const void *const hw)
{
	return ((Usb *)hw)->DEVICE.INTENSET.reg;
    307a:	8b1b      	ldrh	r3, [r3, #24]
    307c:	b29b      	uxth	r3, r3
	flags &= hri_usbdevice_read_INTEN_reg(USB);
    307e:	400b      	ands	r3, r1
	if (flags & USB_DEVICE_INTFLAG_SOF) {
    3080:	f013 0f04 	tst.w	r3, #4
    3084:	d11d      	bne.n	30c2 <_usb_d_dev_handler+0x6a>
	if (flags & USB_DEVICE_INTFLAG_LPMSUSP) {
    3086:	f413 7f00 	tst.w	r3, #512	; 0x200
    308a:	d123      	bne.n	30d4 <_usb_d_dev_handler+0x7c>
	} else if (flags & USB_DEVICE_INTFLAG_RAMACER) {
    308c:	f013 0f80 	tst.w	r3, #128	; 0x80
    3090:	d147      	bne.n	3122 <_usb_d_dev_handler+0xca>
	} else if (flags & USB_D_WAKEUP_INT_FLAGS) {
    3092:	f013 0f70 	tst.w	r3, #112	; 0x70
    3096:	d14f      	bne.n	3138 <_usb_d_dev_handler+0xe0>
	} else if (flags & USB_DEVICE_INTFLAG_EORST) {
    3098:	f013 0f08 	tst.w	r3, #8
    309c:	d16e      	bne.n	317c <_usb_d_dev_handler+0x124>
	} else if (flags & USB_DEVICE_INTFLAG_SUSPEND) {
    309e:	f013 0f01 	tst.w	r3, #1
    30a2:	d0e0      	beq.n	3066 <_usb_d_dev_handler+0xe>
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    30a4:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    30a8:	f240 2201 	movw	r2, #513	; 0x201
    30ac:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = ~data;
}

static inline void hri_usbdevice_clear_INTEN_reg(const void *const hw, hri_usbdevice_intenset_reg_t mask)
{
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    30ae:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    30b0:	2270      	movs	r2, #112	; 0x70
    30b2:	831a      	strh	r2, [r3, #24]
	dev_inst.callbacks.event(USB_EV_SUSPEND, 0);
    30b4:	4b7e      	ldr	r3, [pc, #504]	; (32b0 <_usb_d_dev_handler+0x258>)
    30b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    30b8:	2100      	movs	r1, #0
    30ba:	2004      	movs	r0, #4
    30bc:	4798      	blx	r3
    30be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    30c2:	2204      	movs	r2, #4
    30c4:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    30c8:	839a      	strh	r2, [r3, #28]
	dev_inst.callbacks.sof();
    30ca:	4b79      	ldr	r3, [pc, #484]	; (32b0 <_usb_d_dev_handler+0x258>)
    30cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    30ce:	4798      	blx	r3
    30d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    30d4:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    30d8:	f240 2201 	movw	r2, #513	; 0x201
    30dc:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    30de:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    30e0:	2270      	movs	r2, #112	; 0x70
    30e2:	831a      	strh	r2, [r3, #24]
		if (bank->EXTREG.bit.SUBPID == 0x3) {
    30e4:	4b72      	ldr	r3, [pc, #456]	; (32b0 <_usb_d_dev_handler+0x258>)
    30e6:	891b      	ldrh	r3, [r3, #8]
    30e8:	f003 030f 	and.w	r3, r3, #15
    30ec:	2b03      	cmp	r3, #3
    30ee:	d00e      	beq.n	310e <_usb_d_dev_handler+0xb6>
    30f0:	4b6f      	ldr	r3, [pc, #444]	; (32b0 <_usb_d_dev_handler+0x258>)
    30f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    30f4:	f003 030f 	and.w	r3, r3, #15
    30f8:	2b03      	cmp	r3, #3
		UsbDeviceDescBank *bank = &prvt_inst.desc_table[i].DeviceDescBank[0];
    30fa:	bf08      	it	eq
    30fc:	2201      	moveq	r2, #1
		if (bank->EXTREG.bit.SUBPID == 0x3) {
    30fe:	d007      	beq.n	3110 <_usb_d_dev_handler+0xb8>
	uint32_t lpm_variable = 0;
    3100:	2100      	movs	r1, #0
	dev_inst.callbacks.event(USB_EV_LPM_SUSPEND, lpm_variable);
    3102:	4b6b      	ldr	r3, [pc, #428]	; (32b0 <_usb_d_dev_handler+0x258>)
    3104:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    3106:	2003      	movs	r0, #3
    3108:	4798      	blx	r3
    310a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		UsbDeviceDescBank *bank = &prvt_inst.desc_table[i].DeviceDescBank[0];
    310e:	2200      	movs	r2, #0
			lpm_variable = bank->EXTREG.bit.VARIABLE;
    3110:	4b67      	ldr	r3, [pc, #412]	; (32b0 <_usb_d_dev_handler+0x258>)
    3112:	eb03 1342 	add.w	r3, r3, r2, lsl #5
    3116:	8919      	ldrh	r1, [r3, #8]
    3118:	f3c1 110a 	ubfx	r1, r1, #4, #11
			bank->EXTREG.reg = 0;
    311c:	2200      	movs	r2, #0
    311e:	811a      	strh	r2, [r3, #8]
    3120:	e7ef      	b.n	3102 <_usb_d_dev_handler+0xaa>
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    3122:	2280      	movs	r2, #128	; 0x80
    3124:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    3128:	839a      	strh	r2, [r3, #28]
	dev_inst.callbacks.event(USB_EV_ERROR, 0);
    312a:	4b61      	ldr	r3, [pc, #388]	; (32b0 <_usb_d_dev_handler+0x258>)
    312c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    312e:	2100      	movs	r1, #0
    3130:	2005      	movs	r0, #5
    3132:	4798      	blx	r3
    3134:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    3138:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    313c:	2270      	movs	r2, #112	; 0x70
    313e:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    3140:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    3142:	f240 2201 	movw	r2, #513	; 0x201
    3146:	831a      	strh	r2, [r3, #24]
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
    3148:	4b5a      	ldr	r3, [pc, #360]	; (32b4 <_usb_d_dev_handler+0x25c>)
    314a:	f893 3020 	ldrb.w	r3, [r3, #32]
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(OSCCTRL)) {
    314e:	f013 0f01 	tst.w	r3, #1
    3152:	d00d      	beq.n	3170 <_usb_d_dev_handler+0x118>
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    3154:	4a57      	ldr	r2, [pc, #348]	; (32b4 <_usb_d_dev_handler+0x25c>)
    3156:	6913      	ldr	r3, [r2, #16]
	tmp &= mask;
    3158:	f403 6310 	and.w	r3, r3, #2304	; 0x900
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, (OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC))
    315c:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
    3160:	d1f9      	bne.n	3156 <_usb_d_dev_handler+0xfe>
	dev_inst.callbacks.event(USB_EV_WAKEUP, 0);
    3162:	4b53      	ldr	r3, [pc, #332]	; (32b0 <_usb_d_dev_handler+0x258>)
    3164:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    3166:	2100      	movs	r1, #0
    3168:	2002      	movs	r0, #2
    316a:	4798      	blx	r3
    316c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    3170:	4a50      	ldr	r2, [pc, #320]	; (32b4 <_usb_d_dev_handler+0x25c>)
    3172:	6913      	ldr	r3, [r2, #16]
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, OSCCTRL_STATUS_DFLLRDY) != OSCCTRL_STATUS_DFLLRDY)
    3174:	f413 7f80 	tst.w	r3, #256	; 0x100
    3178:	d0fb      	beq.n	3172 <_usb_d_dev_handler+0x11a>
    317a:	e7f2      	b.n	3162 <_usb_d_dev_handler+0x10a>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    317c:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    3180:	2400      	movs	r4, #0
    3182:	f883 4100 	strb.w	r4, [r3, #256]	; 0x100
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    3186:	2208      	movs	r2, #8
    3188:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    318a:	2270      	movs	r2, #112	; 0x70
    318c:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    318e:	f240 2201 	movw	r2, #513	; 0x201
    3192:	831a      	strh	r2, [r3, #24]
	_usb_d_dev_reset_epts();
    3194:	4b48      	ldr	r3, [pc, #288]	; (32b8 <_usb_d_dev_handler+0x260>)
    3196:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_RESET, 0);
    3198:	4b45      	ldr	r3, [pc, #276]	; (32b0 <_usb_d_dev_handler+0x258>)
    319a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    319c:	4621      	mov	r1, r4
    319e:	2001      	movs	r0, #1
    31a0:	4798      	blx	r3
    31a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    31a6:	f011 0f10 	tst.w	r1, #16
    31aa:	d109      	bne.n	31c0 <_usb_d_dev_handler+0x168>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    31ac:	f011 0f40 	tst.w	r1, #64	; 0x40
    31b0:	d108      	bne.n	31c4 <_usb_d_dev_handler+0x16c>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    31b2:	f011 0f20 	tst.w	r1, #32
    31b6:	d02f      	beq.n	3218 <_usb_d_dev_handler+0x1c0>
		_usb_d_dev_handle_stall(ept, 0);
    31b8:	2100      	movs	r1, #0
    31ba:	4b40      	ldr	r3, [pc, #256]	; (32bc <_usb_d_dev_handler+0x264>)
    31bc:	4798      	blx	r3
    31be:	e02b      	b.n	3218 <_usb_d_dev_handler+0x1c0>
		_usb_d_dev_handle_setup(ept);
    31c0:	47c8      	blx	r9
    31c2:	e029      	b.n	3218 <_usb_d_dev_handler+0x1c0>
		_usb_d_dev_handle_stall(ept, 1);
    31c4:	2101      	movs	r1, #1
    31c6:	4b3d      	ldr	r3, [pc, #244]	; (32bc <_usb_d_dev_handler+0x264>)
    31c8:	4798      	blx	r3
    31ca:	e025      	b.n	3218 <_usb_d_dev_handler+0x1c0>
	if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    31cc:	f011 0f40 	tst.w	r1, #64	; 0x40
    31d0:	d111      	bne.n	31f6 <_usb_d_dev_handler+0x19e>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    31d2:	f011 0f08 	tst.w	r1, #8
    31d6:	d112      	bne.n	31fe <_usb_d_dev_handler+0x1a6>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT1) {
    31d8:	f011 0f02 	tst.w	r1, #2
    31dc:	d112      	bne.n	3204 <_usb_d_dev_handler+0x1ac>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    31de:	f003 0307 	and.w	r3, r3, #7
    31e2:	2b01      	cmp	r3, #1
    31e4:	d118      	bne.n	3218 <_usb_d_dev_handler+0x1c0>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    31e6:	f011 0f04 	tst.w	r1, #4
    31ea:	d10f      	bne.n	320c <_usb_d_dev_handler+0x1b4>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    31ec:	f011 0f10 	tst.w	r1, #16
    31f0:	d012      	beq.n	3218 <_usb_d_dev_handler+0x1c0>
			_usb_d_dev_handle_setup(ept);
    31f2:	47c8      	blx	r9
    31f4:	e010      	b.n	3218 <_usb_d_dev_handler+0x1c0>
		_usb_d_dev_handle_stall(ept, 1);
    31f6:	2101      	movs	r1, #1
    31f8:	4b30      	ldr	r3, [pc, #192]	; (32bc <_usb_d_dev_handler+0x264>)
    31fa:	4798      	blx	r3
    31fc:	e00c      	b.n	3218 <_usb_d_dev_handler+0x1c0>
		_usb_d_dev_handle_trfail(ept, 1);
    31fe:	2101      	movs	r1, #1
    3200:	47c0      	blx	r8
    3202:	e009      	b.n	3218 <_usb_d_dev_handler+0x1c0>
		_usb_d_dev_in_next(ept, true);
    3204:	2101      	movs	r1, #1
    3206:	4b2e      	ldr	r3, [pc, #184]	; (32c0 <_usb_d_dev_handler+0x268>)
    3208:	4798      	blx	r3
    320a:	e005      	b.n	3218 <_usb_d_dev_handler+0x1c0>
			_usb_d_dev_handle_trfail(ept, 0);
    320c:	2100      	movs	r1, #0
    320e:	47c0      	blx	r8
    3210:	e002      	b.n	3218 <_usb_d_dev_handler+0x1c0>
		_usb_d_dev_handle_stall(ept, 0);
    3212:	2100      	movs	r1, #0
    3214:	4b29      	ldr	r3, [pc, #164]	; (32bc <_usb_d_dev_handler+0x264>)
    3216:	4798      	blx	r3
    3218:	3401      	adds	r4, #1
    321a:	3514      	adds	r5, #20
	for (i = 0; i < USB_D_N_EP; i++) {
    321c:	2c09      	cmp	r4, #9
    321e:	d042      	beq.n	32a6 <_usb_d_dev_handler+0x24e>
    3220:	4628      	mov	r0, r5
		if (ept->ep == 0xFF) {
    3222:	7cab      	ldrb	r3, [r5, #18]
    3224:	2bff      	cmp	r3, #255	; 0xff
    3226:	d0f7      	beq.n	3218 <_usb_d_dev_handler+0x1c0>
	if (!(epint & (1u << epn))) {
    3228:	f003 030f 	and.w	r3, r3, #15
    322c:	2101      	movs	r1, #1
    322e:	4099      	lsls	r1, r3
    3230:	4231      	tst	r1, r6
    3232:	d0f1      	beq.n	3218 <_usb_d_dev_handler+0x1c0>
	flags = hw->DEVICE.DeviceEndpoint[epn].EPINTFLAG.reg;
    3234:	0159      	lsls	r1, r3, #5
    3236:	f101 4182 	add.w	r1, r1, #1090519040	; 0x41000000
    323a:	f501 7180 	add.w	r1, r1, #256	; 0x100
    323e:	79c9      	ldrb	r1, [r1, #7]
	mask  = hw->DEVICE.DeviceEndpoint[epn].EPINTENSET.reg;
    3240:	015b      	lsls	r3, r3, #5
    3242:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    3246:	f893 3109 	ldrb.w	r3, [r3, #265]	; 0x109
	if (flags) {
    324a:	4019      	ands	r1, r3
    324c:	d0e4      	beq.n	3218 <_usb_d_dev_handler+0x1c0>
		if ((ept->flags.bits.eptype == 0x1) && !_usb_d_dev_ep_is_busy(ept)) {
    324e:	eb04 0284 	add.w	r2, r4, r4, lsl #2
    3252:	eb07 0282 	add.w	r2, r7, r2, lsl #2
    3256:	f892 3087 	ldrb.w	r3, [r2, #135]	; 0x87
    325a:	f003 0247 	and.w	r2, r3, #71	; 0x47
    325e:	2a01      	cmp	r2, #1
    3260:	d0a1      	beq.n	31a6 <_usb_d_dev_handler+0x14e>
		} else if (_usb_d_dev_ep_is_in(ept)) {
    3262:	f013 0f80 	tst.w	r3, #128	; 0x80
    3266:	d1b1      	bne.n	31cc <_usb_d_dev_handler+0x174>
	if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    3268:	f011 0f20 	tst.w	r1, #32
    326c:	d1d1      	bne.n	3212 <_usb_d_dev_handler+0x1ba>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    326e:	f011 0f04 	tst.w	r1, #4
    3272:	d10e      	bne.n	3292 <_usb_d_dev_handler+0x23a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT0) {
    3274:	f011 0f01 	tst.w	r1, #1
    3278:	d10e      	bne.n	3298 <_usb_d_dev_handler+0x240>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    327a:	f003 0307 	and.w	r3, r3, #7
    327e:	2b01      	cmp	r3, #1
    3280:	d1ca      	bne.n	3218 <_usb_d_dev_handler+0x1c0>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    3282:	f011 0f08 	tst.w	r1, #8
    3286:	d10b      	bne.n	32a0 <_usb_d_dev_handler+0x248>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    3288:	f011 0f10 	tst.w	r1, #16
    328c:	d0c4      	beq.n	3218 <_usb_d_dev_handler+0x1c0>
			_usb_d_dev_handle_setup(ept);
    328e:	47c8      	blx	r9
    3290:	e7c2      	b.n	3218 <_usb_d_dev_handler+0x1c0>
		_usb_d_dev_handle_trfail(ept, 0);
    3292:	2100      	movs	r1, #0
    3294:	47c0      	blx	r8
    3296:	e7bf      	b.n	3218 <_usb_d_dev_handler+0x1c0>
		_usb_d_dev_out_next(ept, true);
    3298:	2101      	movs	r1, #1
    329a:	4b0a      	ldr	r3, [pc, #40]	; (32c4 <_usb_d_dev_handler+0x26c>)
    329c:	4798      	blx	r3
    329e:	e7bb      	b.n	3218 <_usb_d_dev_handler+0x1c0>
			_usb_d_dev_handle_trfail(ept, 1);
    32a0:	2101      	movs	r1, #1
    32a2:	47c0      	blx	r8
    32a4:	e7b8      	b.n	3218 <_usb_d_dev_handler+0x1c0>
    32a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    32aa:	bf00      	nop
    32ac:	20000774 	.word	0x20000774
    32b0:	20000700 	.word	0x20000700
    32b4:	40001000 	.word	0x40001000
    32b8:	00002ca1 	.word	0x00002ca1
    32bc:	00002add 	.word	0x00002add
    32c0:	00002ce5 	.word	0x00002ce5
    32c4:	00002e69 	.word	0x00002e69
    32c8:	00002a61 	.word	0x00002a61
    32cc:	00002ba1 	.word	0x00002ba1

000032d0 <_usb_d_dev_init>:
{
    32d0:	b508      	push	{r3, lr}
	return ((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg;
    32d2:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    32d6:	789b      	ldrb	r3, [r3, #2]
	if (!hri_usbdevice_is_syncing(hw, USB_SYNCBUSY_SWRST)) {
    32d8:	f013 0f01 	tst.w	r3, #1
    32dc:	d124      	bne.n	3328 <_usb_d_dev_init+0x58>
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    32de:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    32e2:	7893      	ldrb	r3, [r2, #2]
    32e4:	f013 0f03 	tst.w	r3, #3
    32e8:	d1fb      	bne.n	32e2 <_usb_d_dev_init+0x12>

static inline hri_usb_ctrla_reg_t hri_usb_get_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t mask)
{
	uint8_t tmp;
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
	tmp = ((Usb *)hw)->HOST.CTRLA.reg;
    32ea:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    32ee:	781b      	ldrb	r3, [r3, #0]
		if (hri_usbdevice_get_CTRLA_reg(hw, USB_CTRLA_ENABLE)) {
    32f0:	f013 0f02 	tst.w	r3, #2
    32f4:	d00f      	beq.n	3316 <_usb_d_dev_init+0x46>
	((Usb *)hw)->HOST.CTRLA.reg &= ~USB_CTRLA_ENABLE;
    32f6:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    32fa:	7813      	ldrb	r3, [r2, #0]
    32fc:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    3300:	7013      	strb	r3, [r2, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    3302:	7893      	ldrb	r3, [r2, #2]
    3304:	f013 0f03 	tst.w	r3, #3
    3308:	d1fb      	bne.n	3302 <_usb_d_dev_init+0x32>
    330a:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    330e:	7893      	ldrb	r3, [r2, #2]
    3310:	f013 0f02 	tst.w	r3, #2
    3314:	d1fb      	bne.n	330e <_usb_d_dev_init+0x3e>
}

static inline void hri_usb_write_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t data)
{
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.CTRLA.reg = data;
    3316:	2201      	movs	r2, #1
    3318:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    331c:	701a      	strb	r2, [r3, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    331e:	461a      	mov	r2, r3
    3320:	7893      	ldrb	r3, [r2, #2]
    3322:	f013 0f03 	tst.w	r3, #3
    3326:	d1fb      	bne.n	3320 <_usb_d_dev_init+0x50>
    3328:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    332c:	7893      	ldrb	r3, [r2, #2]
    332e:	f013 0f01 	tst.w	r3, #1
    3332:	d1fb      	bne.n	332c <_usb_d_dev_init+0x5c>
	dev_inst.callbacks.sof   = (_usb_d_dev_sof_cb_t)_dummy_func_no_return;
    3334:	4b21      	ldr	r3, [pc, #132]	; (33bc <_usb_d_dev_init+0xec>)
    3336:	4a22      	ldr	r2, [pc, #136]	; (33c0 <_usb_d_dev_init+0xf0>)
    3338:	661a      	str	r2, [r3, #96]	; 0x60
	dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)_dummy_func_no_return;
    333a:	665a      	str	r2, [r3, #100]	; 0x64
	dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)_dummy_func_no_return;
    333c:	669a      	str	r2, [r3, #104]	; 0x68
	dev_inst.ep_callbacks.more  = (_usb_d_dev_ep_cb_more_t)_dummy_func_no_return;
    333e:	66da      	str	r2, [r3, #108]	; 0x6c
	dev_inst.ep_callbacks.done  = (_usb_d_dev_ep_cb_done_t)_dummy_func_no_return;
    3340:	671a      	str	r2, [r3, #112]	; 0x70
	_usb_d_dev_reset_epts();
    3342:	4b20      	ldr	r3, [pc, #128]	; (33c4 <_usb_d_dev_init+0xf4>)
    3344:	4798      	blx	r3
	    = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRANSN_POS / 32)) >> (NVM_USB_PAD_TRANSN_POS % 32))
    3346:	4b20      	ldr	r3, [pc, #128]	; (33c8 <_usb_d_dev_init+0xf8>)
    3348:	6819      	ldr	r1, [r3, #0]
	uint32_t pad_transp
    334a:	f3c1 1344 	ubfx	r3, r1, #5, #5
	uint32_t pad_trim = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRIM_POS / 32)) >> (NVM_USB_PAD_TRIM_POS % 32))
    334e:	f3c1 2282 	ubfx	r2, r1, #10, #3
	if (pad_transn == 0 || pad_transn == 0x1F) {
    3352:	f011 011f 	ands.w	r1, r1, #31
    3356:	d02b      	beq.n	33b0 <_usb_d_dev_init+0xe0>
		pad_transn = 9;
    3358:	291f      	cmp	r1, #31
    335a:	bf08      	it	eq
    335c:	2109      	moveq	r1, #9
	if (pad_transp == 0 || pad_transp == 0x1F) {
    335e:	b34b      	cbz	r3, 33b4 <_usb_d_dev_init+0xe4>
		pad_transp = 25;
    3360:	2b1f      	cmp	r3, #31
    3362:	bf08      	it	eq
    3364:	2319      	moveq	r3, #25
	if (pad_trim == 0 || pad_trim == 0x7) {
    3366:	b33a      	cbz	r2, 33b8 <_usb_d_dev_init+0xe8>
		pad_trim = 6;
    3368:	2a07      	cmp	r2, #7
    336a:	bf08      	it	eq
    336c:	2206      	moveq	r2, #6
	hw->DEVICE.PADCAL.reg = USB_PADCAL_TRANSN(pad_transn) | USB_PADCAL_TRANSP(pad_transp) | USB_PADCAL_TRIM(pad_trim);
    336e:	f003 031f 	and.w	r3, r3, #31
    3372:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
    3376:	0312      	lsls	r2, r2, #12
    3378:	f402 42e0 	and.w	r2, r2, #28672	; 0x7000
    337c:	4313      	orrs	r3, r2
    337e:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    3382:	8513      	strh	r3, [r2, #40]	; 0x28
	hw->DEVICE.QOSCTRL.bit.CQOS = 3;
    3384:	78d3      	ldrb	r3, [r2, #3]
    3386:	f043 0303 	orr.w	r3, r3, #3
    338a:	70d3      	strb	r3, [r2, #3]
	hw->DEVICE.QOSCTRL.bit.DQOS = 3;
    338c:	78d3      	ldrb	r3, [r2, #3]
    338e:	f043 030c 	orr.w	r3, r3, #12
    3392:	70d3      	strb	r3, [r2, #3]
	((Usb *)hw)->HOST.CTRLA.reg = data;
    3394:	2304      	movs	r3, #4
    3396:	7013      	strb	r3, [r2, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    3398:	7893      	ldrb	r3, [r2, #2]
    339a:	f013 0f03 	tst.w	r3, #3
    339e:	d1fb      	bne.n	3398 <_usb_d_dev_init+0xc8>
}

static inline void hri_usb_write_DESCADD_reg(const void *const hw, hri_usb_descadd_reg_t data)
{
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.DESCADD.reg = data;
    33a0:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    33a4:	4a05      	ldr	r2, [pc, #20]	; (33bc <_usb_d_dev_init+0xec>)
    33a6:	625a      	str	r2, [r3, #36]	; 0x24
	((Usb *)hw)->DEVICE.CTRLB.reg = data;
    33a8:	2201      	movs	r2, #1
    33aa:	811a      	strh	r2, [r3, #8]
}
    33ac:	2000      	movs	r0, #0
    33ae:	bd08      	pop	{r3, pc}
		pad_transn = 9;
    33b0:	2109      	movs	r1, #9
    33b2:	e7d4      	b.n	335e <_usb_d_dev_init+0x8e>
		pad_transp = 25;
    33b4:	2319      	movs	r3, #25
    33b6:	e7d6      	b.n	3366 <_usb_d_dev_init+0x96>
		pad_trim = 6;
    33b8:	2206      	movs	r2, #6
    33ba:	e7d8      	b.n	336e <_usb_d_dev_init+0x9e>
    33bc:	20000700 	.word	0x20000700
    33c0:	00002a5d 	.word	0x00002a5d
    33c4:	00002ca1 	.word	0x00002ca1
    33c8:	00800084 	.word	0x00800084

000033cc <_usb_d_dev_enable>:
	tmp = ((Usb *)hw)->HOST.SYNCBUSY.reg;
    33cc:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    33d0:	789b      	ldrb	r3, [r3, #2]
	if (hri_usbdevice_get_SYNCBUSY_reg(hw, (USB_SYNCBUSY_ENABLE | USB_SYNCBUSY_SWRST))) {
    33d2:	f013 0f03 	tst.w	r3, #3
    33d6:	d129      	bne.n	342c <_usb_d_dev_enable+0x60>
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    33d8:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    33dc:	7893      	ldrb	r3, [r2, #2]
    33de:	f013 0f03 	tst.w	r3, #3
    33e2:	d1fb      	bne.n	33dc <_usb_d_dev_enable+0x10>
	return ((Usb *)hw)->HOST.CTRLA.reg;
    33e4:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    33e8:	781b      	ldrb	r3, [r3, #0]
    33ea:	b2db      	uxtb	r3, r3
	if ((ctrla & USB_CTRLA_ENABLE) == 0) {
    33ec:	f013 0f02 	tst.w	r3, #2
    33f0:	d108      	bne.n	3404 <_usb_d_dev_enable+0x38>
		hri_usbdevice_write_CTRLA_reg(hw, ctrla | USB_CTRLA_ENABLE);
    33f2:	f043 0302 	orr.w	r3, r3, #2
	((Usb *)hw)->HOST.CTRLA.reg = data;
    33f6:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    33fa:	7013      	strb	r3, [r2, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    33fc:	7893      	ldrb	r3, [r2, #2]
    33fe:	f013 0f03 	tst.w	r3, #3
    3402:	d1fb      	bne.n	33fc <_usb_d_dev_enable+0x30>
    3404:	4b0b      	ldr	r3, [pc, #44]	; (3434 <_usb_d_dev_enable+0x68>)
    3406:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    340a:	609a      	str	r2, [r3, #8]
    340c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    3410:	609a      	str	r2, [r3, #8]
    3412:	f44f 2280 	mov.w	r2, #262144	; 0x40000
    3416:	609a      	str	r2, [r3, #8]
    3418:	f44f 2200 	mov.w	r2, #524288	; 0x80000
    341c:	609a      	str	r2, [r3, #8]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    341e:	f240 228d 	movw	r2, #653	; 0x28d
    3422:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    3426:	831a      	strh	r2, [r3, #24]
	return ERR_NONE;
    3428:	2000      	movs	r0, #0
    342a:	4770      	bx	lr
		return -USB_ERR_DENIED;
    342c:	f06f 0010 	mvn.w	r0, #16
}
    3430:	4770      	bx	lr
    3432:	bf00      	nop
    3434:	e000e100 	.word	0xe000e100

00003438 <_usb_d_dev_attach>:
	((Usb *)hw)->DEVICE.CTRLB.reg &= ~USB_DEVICE_CTRLB_DETACH;
    3438:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    343c:	8913      	ldrh	r3, [r2, #8]
    343e:	f023 0301 	bic.w	r3, r3, #1
    3442:	041b      	lsls	r3, r3, #16
    3444:	0c1b      	lsrs	r3, r3, #16
    3446:	8113      	strh	r3, [r2, #8]
    3448:	4770      	bx	lr

0000344a <_usb_d_dev_set_address>:
	hri_usbdevice_write_DADD_reg(USB, USB_DEVICE_DADD_ADDEN | USB_DEVICE_DADD_DADD(addr));
    344a:	f040 0080 	orr.w	r0, r0, #128	; 0x80
	((Usb *)hw)->DEVICE.DADD.reg = data;
    344e:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    3452:	7298      	strb	r0, [r3, #10]
    3454:	4770      	bx	lr
	...

00003458 <_usb_d_dev_ep_init>:
{
    3458:	b5f0      	push	{r4, r5, r6, r7, lr}
    345a:	fa4f fe80 	sxtb.w	lr, r0
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    345e:	f010 050f 	ands.w	r5, r0, #15
    3462:	d04d      	beq.n	3500 <_usb_d_dev_ep_init+0xa8>
    3464:	f1be 0f00 	cmp.w	lr, #0
    3468:	bfb4      	ite	lt
    346a:	1cac      	addlt	r4, r5, #2
    346c:	462c      	movge	r4, r5
	uint8_t                        ep_type = attr & USB_EP_XTYPE_MASK;
    346e:	f001 0103 	and.w	r1, r1, #3
	const struct _usb_ep_cfg_item *pcfg    = &_usb_ep_cfgs[epn];
    3472:	462b      	mov	r3, r5
	if (epn > CONF_USB_D_MAX_EP_N) {
    3474:	2d02      	cmp	r5, #2
    3476:	d947      	bls.n	3508 <_usb_d_dev_ep_init+0xb0>
		return -USB_ERR_PARAM;
    3478:	f06f 0011 	mvn.w	r0, #17
    347c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    347e:	f1be 0f00 	cmp.w	lr, #0
    3482:	db1b      	blt.n	34bc <_usb_d_dev_ep_init+0x64>
    3484:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    3488:	4e37      	ldr	r6, [pc, #220]	; (3568 <_usb_d_dev_ep_init+0x110>)
    348a:	f856 5025 	ldr.w	r5, [r6, r5, lsl #2]
    348e:	2d00      	cmp	r5, #0
    3490:	d15e      	bne.n	3550 <_usb_d_dev_ep_init+0xf8>
	ept->cache    = (uint8_t *)(dir ? pcfg->i_cache : pcfg->cache);
    3492:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    3496:	4d34      	ldr	r5, [pc, #208]	; (3568 <_usb_d_dev_ep_init+0x110>)
    3498:	f855 7023 	ldr.w	r7, [r5, r3, lsl #2]
    349c:	4d33      	ldr	r5, [pc, #204]	; (356c <_usb_d_dev_ep_init+0x114>)
    349e:	00a6      	lsls	r6, r4, #2
    34a0:	1933      	adds	r3, r6, r4
    34a2:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    34a6:	f8c3 7080 	str.w	r7, [r3, #128]	; 0x80
	ept->size     = max_pkt_siz;
    34aa:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
	ept->flags.u8 = (ep_type + 1);
    34ae:	3101      	adds	r1, #1
    34b0:	f883 1087 	strb.w	r1, [r3, #135]	; 0x87
	ept->ep       = ep;
    34b4:	f883 0086 	strb.w	r0, [r3, #134]	; 0x86
	return USB_OK;
    34b8:	2000      	movs	r0, #0
    34ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    34bc:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    34c0:	4e29      	ldr	r6, [pc, #164]	; (3568 <_usb_d_dev_ep_init+0x110>)
    34c2:	eb06 0585 	add.w	r5, r6, r5, lsl #2
    34c6:	686d      	ldr	r5, [r5, #4]
    34c8:	b935      	cbnz	r5, 34d8 <_usb_d_dev_ep_init+0x80>
	ept->cache    = (uint8_t *)(dir ? pcfg->i_cache : pcfg->cache);
    34ca:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    34ce:	4d26      	ldr	r5, [pc, #152]	; (3568 <_usb_d_dev_ep_init+0x110>)
    34d0:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    34d4:	685f      	ldr	r7, [r3, #4]
    34d6:	e7e1      	b.n	349c <_usb_d_dev_ep_init+0x44>
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    34d8:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    34dc:	4e22      	ldr	r6, [pc, #136]	; (3568 <_usb_d_dev_ep_init+0x110>)
    34de:	eb06 0585 	add.w	r5, r6, r5, lsl #2
    34e2:	896d      	ldrh	r5, [r5, #10]
    34e4:	4295      	cmp	r5, r2
    34e6:	daf0      	bge.n	34ca <_usb_d_dev_ep_init+0x72>
		return -USB_ERR_FUNC;
    34e8:	f06f 0012 	mvn.w	r0, #18
    34ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -USB_ERR_REDO;
    34ee:	f06f 0013 	mvn.w	r0, #19
    34f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return -USB_ERR_REDO;
    34f4:	f06f 0013 	mvn.w	r0, #19
    34f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return -USB_ERR_FUNC;
    34fa:	f06f 0012 	mvn.w	r0, #18
    34fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint8_t                        ep_type = attr & USB_EP_XTYPE_MASK;
    3500:	f001 0103 	and.w	r1, r1, #3
	return &dev_inst.ep[ep_index];
    3504:	2400      	movs	r4, #0
	const struct _usb_ep_cfg_item *pcfg    = &_usb_ep_cfgs[epn];
    3506:	4623      	mov	r3, r4
	if (ept->ep != 0xFF) {
    3508:	eb04 0684 	add.w	r6, r4, r4, lsl #2
    350c:	4f17      	ldr	r7, [pc, #92]	; (356c <_usb_d_dev_ep_init+0x114>)
    350e:	eb07 0686 	add.w	r6, r7, r6, lsl #2
    3512:	f896 6086 	ldrb.w	r6, [r6, #134]	; 0x86
    3516:	2eff      	cmp	r6, #255	; 0xff
    3518:	d1e9      	bne.n	34ee <_usb_d_dev_ep_init+0x96>
	if (ep_type == USB_EP_XTYPE_CTRL) {
    351a:	2900      	cmp	r1, #0
    351c:	d1af      	bne.n	347e <_usb_d_dev_ep_init+0x26>
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    351e:	b125      	cbz	r5, 352a <_usb_d_dev_ep_init+0xd2>
    3520:	f1be 0f00 	cmp.w	lr, #0
    3524:	bfa4      	itt	ge
    3526:	3502      	addge	r5, #2
    3528:	b2ed      	uxtbge	r5, r5
		if (ept_in->ep != 0xFF) {
    352a:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    352e:	4e0f      	ldr	r6, [pc, #60]	; (356c <_usb_d_dev_ep_init+0x114>)
    3530:	eb06 0585 	add.w	r5, r6, r5, lsl #2
    3534:	f895 5086 	ldrb.w	r5, [r5, #134]	; 0x86
    3538:	2dff      	cmp	r5, #255	; 0xff
    353a:	d1db      	bne.n	34f4 <_usb_d_dev_ep_init+0x9c>
		if (pcfg->cache == NULL) {
    353c:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    3540:	4e09      	ldr	r6, [pc, #36]	; (3568 <_usb_d_dev_ep_init+0x110>)
    3542:	f856 5025 	ldr.w	r5, [r6, r5, lsl #2]
    3546:	2d00      	cmp	r5, #0
    3548:	d0d7      	beq.n	34fa <_usb_d_dev_ep_init+0xa2>
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    354a:	f1be 0f00 	cmp.w	lr, #0
    354e:	dbb5      	blt.n	34bc <_usb_d_dev_ep_init+0x64>
    3550:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    3554:	4e04      	ldr	r6, [pc, #16]	; (3568 <_usb_d_dev_ep_init+0x110>)
    3556:	eb06 0585 	add.w	r5, r6, r5, lsl #2
    355a:	892d      	ldrh	r5, [r5, #8]
    355c:	4295      	cmp	r5, r2
    355e:	da98      	bge.n	3492 <_usb_d_dev_ep_init+0x3a>
		return -USB_ERR_FUNC;
    3560:	f06f 0012 	mvn.w	r0, #18
    3564:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3566:	bf00      	nop
    3568:	000052a4 	.word	0x000052a4
    356c:	20000700 	.word	0x20000700

00003570 <_usb_d_dev_ep_deinit>:
{
    3570:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3572:	b247      	sxtb	r7, r0
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    3574:	f010 060f 	ands.w	r6, r0, #15
    3578:	d00e      	beq.n	3598 <_usb_d_dev_ep_deinit+0x28>
    357a:	2f00      	cmp	r7, #0
    357c:	bfb4      	ite	lt
    357e:	1cb3      	addlt	r3, r6, #2
    3580:	4633      	movge	r3, r6
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    3582:	2e02      	cmp	r6, #2
    3584:	d900      	bls.n	3588 <_usb_d_dev_ep_deinit+0x18>
    3586:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return &dev_inst.ep[ep_index];
    3588:	461d      	mov	r5, r3
    358a:	3301      	adds	r3, #1
    358c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    3590:	4a24      	ldr	r2, [pc, #144]	; (3624 <_usb_d_dev_ep_deinit+0xb4>)
    3592:	eb02 0e83 	add.w	lr, r2, r3, lsl #2
    3596:	e002      	b.n	359e <_usb_d_dev_ep_deinit+0x2e>
    3598:	f8df e094 	ldr.w	lr, [pc, #148]	; 3630 <_usb_d_dev_ep_deinit+0xc0>
    359c:	2500      	movs	r5, #0
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    359e:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    35a2:	4a21      	ldr	r2, [pc, #132]	; (3628 <_usb_d_dev_ep_deinit+0xb8>)
    35a4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    35a8:	f893 2086 	ldrb.w	r2, [r3, #134]	; 0x86
    35ac:	2aff      	cmp	r2, #255	; 0xff
    35ae:	d0ea      	beq.n	3586 <_usb_d_dev_ep_deinit+0x16>
    35b0:	4604      	mov	r4, r0
	_usb_d_dev_trans_stop(ept, dir, USB_TRANS_RESET);
    35b2:	2203      	movs	r2, #3
    35b4:	0ff9      	lsrs	r1, r7, #31
    35b6:	4670      	mov	r0, lr
    35b8:	4b1c      	ldr	r3, [pc, #112]	; (362c <_usb_d_dev_ep_deinit+0xbc>)
    35ba:	4798      	blx	r3
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    35bc:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    35c0:	4a19      	ldr	r2, [pc, #100]	; (3628 <_usb_d_dev_ep_deinit+0xb8>)
    35c2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    35c6:	f893 3087 	ldrb.w	r3, [r3, #135]	; 0x87
    35ca:	f003 0307 	and.w	r3, r3, #7
    35ce:	2b01      	cmp	r3, #1
    35d0:	d016      	beq.n	3600 <_usb_d_dev_ep_deinit+0x90>
	} else if (USB_EP_GET_DIR(ep)) {
    35d2:	2f00      	cmp	r7, #0
    35d4:	db1b      	blt.n	360e <_usb_d_dev_ep_deinit+0x9e>
    35d6:	0160      	lsls	r0, r4, #5
    35d8:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE0_Msk;
    35dc:	f890 3100 	ldrb.w	r3, [r0, #256]	; 0x100
    35e0:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
    35e4:	f880 3100 	strb.w	r3, [r0, #256]	; 0x100
	ept->flags.u8 = 0;
    35e8:	4b0f      	ldr	r3, [pc, #60]	; (3628 <_usb_d_dev_ep_deinit+0xb8>)
    35ea:	00aa      	lsls	r2, r5, #2
    35ec:	1951      	adds	r1, r2, r5
    35ee:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    35f2:	2000      	movs	r0, #0
    35f4:	f881 0087 	strb.w	r0, [r1, #135]	; 0x87
	ept->ep       = 0xFF;
    35f8:	22ff      	movs	r2, #255	; 0xff
    35fa:	f881 2086 	strb.w	r2, [r1, #134]	; 0x86
    35fe:	e7c2      	b.n	3586 <_usb_d_dev_ep_deinit+0x16>
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg = 0;
    3600:	0160      	lsls	r0, r4, #5
    3602:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
    3606:	2300      	movs	r3, #0
    3608:	f880 3100 	strb.w	r3, [r0, #256]	; 0x100
    360c:	e7ec      	b.n	35e8 <_usb_d_dev_ep_deinit+0x78>
    360e:	0176      	lsls	r6, r6, #5
    3610:	f106 4682 	add.w	r6, r6, #1090519040	; 0x41000000
		hw->DEVICE.DeviceEndpoint[USB_EP_GET_N(ep)].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE1_Msk;
    3614:	f896 3100 	ldrb.w	r3, [r6, #256]	; 0x100
    3618:	f003 038f 	and.w	r3, r3, #143	; 0x8f
    361c:	f886 3100 	strb.w	r3, [r6, #256]	; 0x100
    3620:	e7e2      	b.n	35e8 <_usb_d_dev_ep_deinit+0x78>
    3622:	bf00      	nop
    3624:	20000760 	.word	0x20000760
    3628:	20000700 	.word	0x20000700
    362c:	00002b35 	.word	0x00002b35
    3630:	20000774 	.word	0x20000774

00003634 <_usb_d_dev_ep_enable>:
{
    3634:	b5f0      	push	{r4, r5, r6, r7, lr}
    3636:	b247      	sxtb	r7, r0
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    3638:	f010 000f 	ands.w	r0, r0, #15
    363c:	f000 80a6 	beq.w	378c <_usb_d_dev_ep_enable+0x158>
    3640:	2f00      	cmp	r7, #0
    3642:	bfb4      	ite	lt
    3644:	1c83      	addlt	r3, r0, #2
    3646:	4603      	movge	r3, r0
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    3648:	4606      	mov	r6, r0
    364a:	0142      	lsls	r2, r0, #5
    364c:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    3650:	f892 4100 	ldrb.w	r4, [r2, #256]	; 0x100
    3654:	b2e4      	uxtb	r4, r4
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    3656:	2802      	cmp	r0, #2
    3658:	f240 809f 	bls.w	379a <_usb_d_dev_ep_enable+0x166>
		return -USB_ERR_PARAM;
    365c:	f06f 0011 	mvn.w	r0, #17
    3660:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (epcfg & (USB_DEVICE_EPCFG_EPTYPE1_Msk | USB_DEVICE_EPCFG_EPTYPE0_Msk)) {
    3662:	f014 0f77 	tst.w	r4, #119	; 0x77
    3666:	f040 8088 	bne.w	377a <_usb_d_dev_ep_enable+0x146>
    366a:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    366e:	2111      	movs	r1, #17
    3670:	f882 1100 	strb.w	r1, [r2, #256]	; 0x100
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    3674:	4c97      	ldr	r4, [pc, #604]	; (38d4 <_usb_d_dev_ep_enable+0x2a0>)
    3676:	eb04 018e 	add.w	r1, r4, lr, lsl #2
    367a:	f8b1 4084 	ldrh.w	r4, [r1, #132]	; 0x84
    367e:	4996      	ldr	r1, [pc, #600]	; (38d8 <_usb_d_dev_ep_enable+0x2a4>)
    3680:	ea01 3184 	and.w	r1, r1, r4, lsl #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    3684:	f5b4 7f00 	cmp.w	r4, #512	; 0x200
    3688:	f200 80cc 	bhi.w	3824 <_usb_d_dev_ep_enable+0x1f0>
    368c:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
    3690:	f200 810a 	bhi.w	38a8 <_usb_d_dev_ep_enable+0x274>
    3694:	2c80      	cmp	r4, #128	; 0x80
    3696:	f200 80f9 	bhi.w	388c <_usb_d_dev_ep_enable+0x258>
    369a:	2c40      	cmp	r4, #64	; 0x40
    369c:	f200 810b 	bhi.w	38b6 <_usb_d_dev_ep_enable+0x282>
    36a0:	2c20      	cmp	r4, #32
    36a2:	f200 80fa 	bhi.w	389a <_usb_d_dev_ep_enable+0x266>
    36a6:	2c10      	cmp	r4, #16
    36a8:	f200 810c 	bhi.w	38c4 <_usb_d_dev_ep_enable+0x290>
    36ac:	2c08      	cmp	r4, #8
    36ae:	bf94      	ite	ls
    36b0:	2700      	movls	r7, #0
    36b2:	2701      	movhi	r7, #1
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    36b4:	ea41 7107 	orr.w	r1, r1, r7, lsl #28
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    36b8:	6041      	str	r1, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    36ba:	f3c4 010d 	ubfx	r1, r4, #0, #14
    36be:	e0b7      	b.n	3830 <_usb_d_dev_ep_enable+0x1fc>
		if (epcfg & USB_DEVICE_EPCFG_EPTYPE1_Msk) {
    36c0:	f014 0f70 	tst.w	r4, #112	; 0x70
    36c4:	d15c      	bne.n	3780 <_usb_d_dev_ep_enable+0x14c>
		epcfg |= USB_DEVICE_EPCFG_EPTYPE1(ept->flags.bits.eptype);
    36c6:	4d83      	ldr	r5, [pc, #524]	; (38d4 <_usb_d_dev_ep_enable+0x2a0>)
    36c8:	009f      	lsls	r7, r3, #2
    36ca:	18f9      	adds	r1, r7, r3
    36cc:	eb05 0181 	add.w	r1, r5, r1, lsl #2
    36d0:	f891 1087 	ldrb.w	r1, [r1, #135]	; 0x87
    36d4:	0109      	lsls	r1, r1, #4
    36d6:	f001 0170 	and.w	r1, r1, #112	; 0x70
    36da:	430c      	orrs	r4, r1
    36dc:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    36e0:	f882 4100 	strb.w	r4, [r2, #256]	; 0x100
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    36e4:	443b      	add	r3, r7
    36e6:	eb05 0583 	add.w	r5, r5, r3, lsl #2
    36ea:	f8b5 3084 	ldrh.w	r3, [r5, #132]	; 0x84
    36ee:	f3c3 010d 	ubfx	r1, r3, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    36f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    36f6:	d80f      	bhi.n	3718 <_usb_d_dev_ep_enable+0xe4>
    36f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    36fc:	d819      	bhi.n	3732 <_usb_d_dev_ep_enable+0xfe>
    36fe:	2b80      	cmp	r3, #128	; 0x80
    3700:	d819      	bhi.n	3736 <_usb_d_dev_ep_enable+0x102>
    3702:	2b40      	cmp	r3, #64	; 0x40
    3704:	d819      	bhi.n	373a <_usb_d_dev_ep_enable+0x106>
    3706:	2b20      	cmp	r3, #32
    3708:	d819      	bhi.n	373e <_usb_d_dev_ep_enable+0x10a>
    370a:	2b10      	cmp	r3, #16
    370c:	d819      	bhi.n	3742 <_usb_d_dev_ep_enable+0x10e>
    370e:	2b08      	cmp	r3, #8
    3710:	bf94      	ite	ls
    3712:	2300      	movls	r3, #0
    3714:	2301      	movhi	r3, #1
    3716:	e000      	b.n	371a <_usb_d_dev_ep_enable+0xe6>
    3718:	2307      	movs	r3, #7
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    371a:	ea41 7303 	orr.w	r3, r1, r3, lsl #28
    371e:	6143      	str	r3, [r0, #20]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    3720:	2380      	movs	r3, #128	; 0x80
    3722:	f882 3104 	strb.w	r3, [r2, #260]	; 0x104
	bank->STATUS_BK.reg     = 0;
    3726:	4b6b      	ldr	r3, [pc, #428]	; (38d4 <_usb_d_dev_ep_enable+0x2a0>)
    3728:	eb03 1646 	add.w	r6, r3, r6, lsl #5
    372c:	2000      	movs	r0, #0
    372e:	76b0      	strb	r0, [r6, #26]
    3730:	bdf0      	pop	{r4, r5, r6, r7, pc}
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    3732:	2306      	movs	r3, #6
    3734:	e7f1      	b.n	371a <_usb_d_dev_ep_enable+0xe6>
    3736:	2305      	movs	r3, #5
    3738:	e7ef      	b.n	371a <_usb_d_dev_ep_enable+0xe6>
    373a:	2304      	movs	r3, #4
    373c:	e7ed      	b.n	371a <_usb_d_dev_ep_enable+0xe6>
    373e:	2303      	movs	r3, #3
    3740:	e7eb      	b.n	371a <_usb_d_dev_ep_enable+0xe6>
    3742:	2302      	movs	r3, #2
    3744:	e7e9      	b.n	371a <_usb_d_dev_ep_enable+0xe6>
    3746:	2107      	movs	r1, #7
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    3748:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    374c:	6043      	str	r3, [r0, #4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    374e:	2340      	movs	r3, #64	; 0x40
    3750:	f882 3105 	strb.w	r3, [r2, #261]	; 0x105
	bank->STATUS_BK.reg     = 0;
    3754:	4b5f      	ldr	r3, [pc, #380]	; (38d4 <_usb_d_dev_ep_enable+0x2a0>)
    3756:	eb03 1646 	add.w	r6, r3, r6, lsl #5
    375a:	2000      	movs	r0, #0
    375c:	72b0      	strb	r0, [r6, #10]
    375e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    3760:	2106      	movs	r1, #6
    3762:	e7f1      	b.n	3748 <_usb_d_dev_ep_enable+0x114>
    3764:	2105      	movs	r1, #5
    3766:	e7ef      	b.n	3748 <_usb_d_dev_ep_enable+0x114>
    3768:	2104      	movs	r1, #4
    376a:	e7ed      	b.n	3748 <_usb_d_dev_ep_enable+0x114>
    376c:	2103      	movs	r1, #3
    376e:	e7eb      	b.n	3748 <_usb_d_dev_ep_enable+0x114>
    3770:	2102      	movs	r1, #2
    3772:	e7e9      	b.n	3748 <_usb_d_dev_ep_enable+0x114>
		return -USB_ERR_PARAM;
    3774:	f06f 0011 	mvn.w	r0, #17
    3778:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return -USB_ERR_REDO;
    377a:	f06f 0013 	mvn.w	r0, #19
    377e:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return -USB_ERR_REDO;
    3780:	f06f 0013 	mvn.w	r0, #19
    3784:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return -USB_ERR_REDO;
    3786:	f06f 0013 	mvn.w	r0, #19
    378a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    378c:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    3790:	f893 4100 	ldrb.w	r4, [r3, #256]	; 0x100
    3794:	b2e4      	uxtb	r4, r4
    3796:	2600      	movs	r6, #0
	return &dev_inst.ep[ep_index];
    3798:	4633      	mov	r3, r6
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    379a:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    379e:	494d      	ldr	r1, [pc, #308]	; (38d4 <_usb_d_dev_ep_enable+0x2a0>)
    37a0:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    37a4:	f892 5086 	ldrb.w	r5, [r2, #134]	; 0x86
    37a8:	2dff      	cmp	r5, #255	; 0xff
    37aa:	d0e3      	beq.n	3774 <_usb_d_dev_ep_enable+0x140>
    37ac:	0172      	lsls	r2, r6, #5
	bank = prvt_inst.desc_table[epn].DeviceDescBank;
    37ae:	1888      	adds	r0, r1, r2
	if (ept->flags.bits.eptype == USB_D_EPTYPE_CTRL) {
    37b0:	eb03 0e83 	add.w	lr, r3, r3, lsl #2
    37b4:	eb01 018e 	add.w	r1, r1, lr, lsl #2
    37b8:	f891 1087 	ldrb.w	r1, [r1, #135]	; 0x87
    37bc:	f001 0107 	and.w	r1, r1, #7
    37c0:	2901      	cmp	r1, #1
    37c2:	f43f af4e 	beq.w	3662 <_usb_d_dev_ep_enable+0x2e>
	} else if (dir) {
    37c6:	2f00      	cmp	r7, #0
    37c8:	f6ff af7a 	blt.w	36c0 <_usb_d_dev_ep_enable+0x8c>
		if (epcfg & USB_DEVICE_EPCFG_EPTYPE0_Msk) {
    37cc:	f014 0f07 	tst.w	r4, #7
    37d0:	d1d9      	bne.n	3786 <_usb_d_dev_ep_enable+0x152>
		epcfg |= USB_DEVICE_EPCFG_EPTYPE0(ept->flags.bits.eptype);
    37d2:	4d40      	ldr	r5, [pc, #256]	; (38d4 <_usb_d_dev_ep_enable+0x2a0>)
    37d4:	009f      	lsls	r7, r3, #2
    37d6:	18f9      	adds	r1, r7, r3
    37d8:	eb05 0181 	add.w	r1, r5, r1, lsl #2
    37dc:	f891 1087 	ldrb.w	r1, [r1, #135]	; 0x87
    37e0:	f001 0107 	and.w	r1, r1, #7
    37e4:	430c      	orrs	r4, r1
    37e6:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    37ea:	f882 4100 	strb.w	r4, [r2, #256]	; 0x100
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    37ee:	443b      	add	r3, r7
    37f0:	eb05 0583 	add.w	r5, r5, r3, lsl #2
    37f4:	f8b5 1084 	ldrh.w	r1, [r5, #132]	; 0x84
    37f8:	4b37      	ldr	r3, [pc, #220]	; (38d8 <_usb_d_dev_ep_enable+0x2a4>)
    37fa:	ea03 3381 	and.w	r3, r3, r1, lsl #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    37fe:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    3802:	d8a0      	bhi.n	3746 <_usb_d_dev_ep_enable+0x112>
    3804:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
    3808:	d8aa      	bhi.n	3760 <_usb_d_dev_ep_enable+0x12c>
    380a:	2980      	cmp	r1, #128	; 0x80
    380c:	d8aa      	bhi.n	3764 <_usb_d_dev_ep_enable+0x130>
    380e:	2940      	cmp	r1, #64	; 0x40
    3810:	d8aa      	bhi.n	3768 <_usb_d_dev_ep_enable+0x134>
    3812:	2920      	cmp	r1, #32
    3814:	d8aa      	bhi.n	376c <_usb_d_dev_ep_enable+0x138>
    3816:	2910      	cmp	r1, #16
    3818:	d8aa      	bhi.n	3770 <_usb_d_dev_ep_enable+0x13c>
    381a:	2908      	cmp	r1, #8
    381c:	bf94      	ite	ls
    381e:	2100      	movls	r1, #0
    3820:	2101      	movhi	r1, #1
    3822:	e791      	b.n	3748 <_usb_d_dev_ep_enable+0x114>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    3824:	f041 41e0 	orr.w	r1, r1, #1879048192	; 0x70000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    3828:	6041      	str	r1, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    382a:	f3c4 010d 	ubfx	r1, r4, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    382e:	2707      	movs	r7, #7
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    3830:	ea41 7107 	orr.w	r1, r1, r7, lsl #28
    3834:	6141      	str	r1, [r0, #20]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    3836:	2140      	movs	r1, #64	; 0x40
    3838:	f882 1105 	strb.w	r1, [r2, #261]	; 0x105
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    383c:	2080      	movs	r0, #128	; 0x80
    383e:	f882 0104 	strb.w	r0, [r2, #260]	; 0x104
	bank->STATUS_BK.reg     = 0;
    3842:	4a24      	ldr	r2, [pc, #144]	; (38d4 <_usb_d_dev_ep_enable+0x2a0>)
    3844:	eb02 1646 	add.w	r6, r2, r6, lsl #5
    3848:	2000      	movs	r0, #0
    384a:	72b0      	strb	r0, [r6, #10]
    384c:	76b0      	strb	r0, [r6, #26]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    384e:	f005 050f 	and.w	r5, r5, #15
	_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    3852:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    3856:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    385a:	f8d3 6080 	ldr.w	r6, [r3, #128]	; 0x80
	bank->ADDR.reg          = addr;
    385e:	016d      	lsls	r5, r5, #5
    3860:	1953      	adds	r3, r2, r5
    3862:	5156      	str	r6, [r2, r5]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    3864:	685a      	ldr	r2, [r3, #4]
    3866:	f364 329b 	bfi	r2, r4, #14, #14
    386a:	605a      	str	r2, [r3, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    386c:	685a      	ldr	r2, [r3, #4]
    386e:	f360 020d 	bfi	r2, r0, #0, #14
    3872:	605a      	str	r2, [r3, #4]
    3874:	f105 4382 	add.w	r3, r5, #1090519040	; 0x41000000
    3878:	22b0      	movs	r2, #176	; 0xb0
    387a:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    387e:	f883 1105 	strb.w	r1, [r3, #261]	; 0x105
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    3882:	461d      	mov	r5, r3
    3884:	2310      	movs	r3, #16
    3886:	f885 3109 	strb.w	r3, [r5, #265]	; 0x109
    388a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    388c:	f041 41a0 	orr.w	r1, r1, #1342177280	; 0x50000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    3890:	6041      	str	r1, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    3892:	f3c4 010d 	ubfx	r1, r4, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    3896:	2705      	movs	r7, #5
    3898:	e7ca      	b.n	3830 <_usb_d_dev_ep_enable+0x1fc>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    389a:	f041 5140 	orr.w	r1, r1, #805306368	; 0x30000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    389e:	6041      	str	r1, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    38a0:	f3c4 010d 	ubfx	r1, r4, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    38a4:	2703      	movs	r7, #3
    38a6:	e7c3      	b.n	3830 <_usb_d_dev_ep_enable+0x1fc>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    38a8:	f041 41c0 	orr.w	r1, r1, #1610612736	; 0x60000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    38ac:	6041      	str	r1, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    38ae:	f3c4 010d 	ubfx	r1, r4, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    38b2:	2706      	movs	r7, #6
    38b4:	e7bc      	b.n	3830 <_usb_d_dev_ep_enable+0x1fc>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    38b6:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    38ba:	6041      	str	r1, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    38bc:	f3c4 010d 	ubfx	r1, r4, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    38c0:	2704      	movs	r7, #4
    38c2:	e7b5      	b.n	3830 <_usb_d_dev_ep_enable+0x1fc>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    38c4:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    38c8:	6041      	str	r1, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    38ca:	f3c4 010d 	ubfx	r1, r4, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    38ce:	2702      	movs	r7, #2
    38d0:	e7ae      	b.n	3830 <_usb_d_dev_ep_enable+0x1fc>
    38d2:	bf00      	nop
    38d4:	20000700 	.word	0x20000700
    38d8:	0fffc000 	.word	0x0fffc000

000038dc <_usb_d_dev_ep_stall>:
{
    38dc:	b470      	push	{r4, r5, r6}
    38de:	b243      	sxtb	r3, r0
	bool                  dir = USB_EP_GET_DIR(ep);
    38e0:	0fdc      	lsrs	r4, r3, #31
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    38e2:	f010 000f 	ands.w	r0, r0, #15
    38e6:	d008      	beq.n	38fa <_usb_d_dev_ep_stall+0x1e>
    38e8:	2b00      	cmp	r3, #0
    38ea:	bfb4      	ite	lt
    38ec:	1c83      	addlt	r3, r0, #2
    38ee:	4603      	movge	r3, r0
	if (epn > CONF_USB_D_MAX_EP_N) {
    38f0:	2802      	cmp	r0, #2
    38f2:	d903      	bls.n	38fc <_usb_d_dev_ep_stall+0x20>
		return -USB_ERR_PARAM;
    38f4:	f06f 0011 	mvn.w	r0, #17
    38f8:	e018      	b.n	392c <_usb_d_dev_ep_stall+0x50>
	return &dev_inst.ep[ep_index];
    38fa:	2300      	movs	r3, #0
	if (USB_EP_STALL_SET == ctrl) {
    38fc:	2901      	cmp	r1, #1
    38fe:	d017      	beq.n	3930 <_usb_d_dev_ep_stall+0x54>
	} else if (USB_EP_STALL_CLR == ctrl) {
    3900:	2900      	cmp	r1, #0
    3902:	d03a      	beq.n	397a <_usb_d_dev_ep_stall+0x9e>
	uint8_t epn = USB_EP_GET_N(ept->ep);
    3904:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    3908:	4a45      	ldr	r2, [pc, #276]	; (3a20 <_usb_d_dev_ep_stall+0x144>)
    390a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    390e:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    3912:	f003 030f 	and.w	r3, r3, #15
    3916:	015b      	lsls	r3, r3, #5
    3918:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    391c:	f893 2106 	ldrb.w	r2, [r3, #262]	; 0x106
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    3920:	2310      	movs	r3, #16
    3922:	40a3      	lsls	r3, r4
    3924:	421a      	tst	r2, r3
    3926:	bf14      	ite	ne
    3928:	2001      	movne	r0, #1
    392a:	2000      	moveq	r0, #0
}
    392c:	bc70      	pop	{r4, r5, r6}
    392e:	4770      	bx	lr
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    3930:	2510      	movs	r5, #16
    3932:	40a5      	lsls	r5, r4
    3934:	b2ed      	uxtb	r5, r5
	uint8_t epn = USB_EP_GET_N(ept->ep);
    3936:	493a      	ldr	r1, [pc, #232]	; (3a20 <_usb_d_dev_ep_stall+0x144>)
    3938:	009e      	lsls	r6, r3, #2
    393a:	18f2      	adds	r2, r6, r3
    393c:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    3940:	f892 2086 	ldrb.w	r2, [r2, #134]	; 0x86
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    3944:	f002 020f 	and.w	r2, r2, #15
    3948:	0150      	lsls	r0, r2, #5
    394a:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
    394e:	f880 5105 	strb.w	r5, [r0, #261]	; 0x105
	_usbd_ep_int_en(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    3952:	2020      	movs	r0, #32
    3954:	fa00 f404 	lsl.w	r4, r0, r4
	hri_usbendpoint_set_EPINTEN_reg(USB, epn, flags);
    3958:	b2e4      	uxtb	r4, r4
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    395a:	0152      	lsls	r2, r2, #5
    395c:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    3960:	f882 4109 	strb.w	r4, [r2, #265]	; 0x109
	ept->flags.bits.is_stalled = 1;
    3964:	4433      	add	r3, r6
    3966:	eb01 0383 	add.w	r3, r1, r3, lsl #2
    396a:	f893 2087 	ldrb.w	r2, [r3, #135]	; 0x87
    396e:	f042 0208 	orr.w	r2, r2, #8
    3972:	f883 2087 	strb.w	r2, [r3, #135]	; 0x87
		rc = _usb_d_dev_ep_stall_set(ept, dir);
    3976:	2000      	movs	r0, #0
    3978:	e7d8      	b.n	392c <_usb_d_dev_ep_stall+0x50>
	uint8_t epn        = USB_EP_GET_N(ept->ep);
    397a:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    397e:	4928      	ldr	r1, [pc, #160]	; (3a20 <_usb_d_dev_ep_stall+0x144>)
    3980:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    3984:	f892 2086 	ldrb.w	r2, [r2, #134]	; 0x86
    3988:	f002 020f 	and.w	r2, r2, #15
    398c:	0151      	lsls	r1, r2, #5
    398e:	f101 4182 	add.w	r1, r1, #1090519040	; 0x41000000
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    3992:	f891 5106 	ldrb.w	r5, [r1, #262]	; 0x106
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    3996:	2010      	movs	r0, #16
    3998:	40a0      	lsls	r0, r4
	if (!is_stalled) {
    399a:	4205      	tst	r5, r0
    399c:	d03c      	beq.n	3a18 <_usb_d_dev_ep_stall+0x13c>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    399e:	b2c0      	uxtb	r0, r0
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    39a0:	f881 0104 	strb.w	r0, [r1, #260]	; 0x104
	_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    39a4:	2020      	movs	r0, #32
    39a6:	40a0      	lsls	r0, r4
	hri_usbendpoint_clear_EPINTEN_reg(USB, epn, flags);
    39a8:	b2c5      	uxtb	r5, r0
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    39aa:	f881 5108 	strb.w	r5, [r1, #264]	; 0x108
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    39ae:	f891 2107 	ldrb.w	r2, [r1, #263]	; 0x107
	if (_usbd_ep_is_stall_sent(epn, dir)) {
    39b2:	4202      	tst	r2, r0
    39b4:	d007      	beq.n	39c6 <_usb_d_dev_ep_stall+0xea>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    39b6:	f881 5107 	strb.w	r5, [r1, #263]	; 0x107
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
    39ba:	2201      	movs	r2, #1
    39bc:	fa02 f404 	lsl.w	r4, r2, r4
    39c0:	b2e4      	uxtb	r4, r4
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    39c2:	f881 4104 	strb.w	r4, [r1, #260]	; 0x104
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    39c6:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    39ca:	4815      	ldr	r0, [pc, #84]	; (3a20 <_usb_d_dev_ep_stall+0x144>)
    39cc:	eb00 0282 	add.w	r2, r0, r2, lsl #2
    39d0:	f892 2087 	ldrb.w	r2, [r2, #135]	; 0x87
    39d4:	f002 0207 	and.w	r2, r2, #7
    39d8:	2a01      	cmp	r2, #1
    39da:	d00c      	beq.n	39f6 <_usb_d_dev_ep_stall+0x11a>
		ept->flags.bits.is_stalled = 0;
    39dc:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    39e0:	4a0f      	ldr	r2, [pc, #60]	; (3a20 <_usb_d_dev_ep_stall+0x144>)
    39e2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    39e6:	f893 2087 	ldrb.w	r2, [r3, #135]	; 0x87
    39ea:	f36f 02c3 	bfc	r2, #3, #1
    39ee:	f883 2087 	strb.w	r2, [r3, #135]	; 0x87
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
    39f2:	2000      	movs	r0, #0
    39f4:	e79a      	b.n	392c <_usb_d_dev_ep_stall+0x50>
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    39f6:	f891 2106 	ldrb.w	r2, [r1, #262]	; 0x106
		if ((hri_usbendpoint_read_EPSTATUS_reg(USB, epn) & USB_DEVICE_EPSTATUS_STALLRQ_Msk) == 0) {
    39fa:	f012 0f30 	tst.w	r2, #48	; 0x30
    39fe:	d10d      	bne.n	3a1c <_usb_d_dev_ep_stall+0x140>
			ept->flags.bits.is_stalled = 0;
    3a00:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    3a04:	eb00 0382 	add.w	r3, r0, r2, lsl #2
    3a08:	f893 2087 	ldrb.w	r2, [r3, #135]	; 0x87
    3a0c:	f36f 02c3 	bfc	r2, #3, #1
    3a10:	f883 2087 	strb.w	r2, [r3, #135]	; 0x87
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
    3a14:	2000      	movs	r0, #0
    3a16:	e789      	b.n	392c <_usb_d_dev_ep_stall+0x50>
    3a18:	2000      	movs	r0, #0
    3a1a:	e787      	b.n	392c <_usb_d_dev_ep_stall+0x50>
    3a1c:	2000      	movs	r0, #0
    3a1e:	e785      	b.n	392c <_usb_d_dev_ep_stall+0x50>
    3a20:	20000700 	.word	0x20000700

00003a24 <_usb_d_dev_ep_read_req>:

int32_t _usb_d_dev_ep_read_req(const uint8_t ep, uint8_t *req_buf)
{
    3a24:	b430      	push	{r4, r5}
	uint8_t            epn   = USB_EP_GET_N(ep);
    3a26:	f000 040f 	and.w	r4, r0, #15
    3a2a:	0163      	lsls	r3, r4, #5
	UsbDeviceDescBank *bank  = prvt_inst.desc_table[epn].DeviceDescBank;
    3a2c:	4a14      	ldr	r2, [pc, #80]	; (3a80 <_usb_d_dev_ep_read_req+0x5c>)
    3a2e:	18d0      	adds	r0, r2, r3
	uint32_t           addr  = bank[0].ADDR.reg;
    3a30:	58d5      	ldr	r5, [r2, r3]
	uint16_t           bytes = bank[0].PCKSIZE.bit.BYTE_COUNT;
    3a32:	6840      	ldr	r0, [r0, #4]
    3a34:	f3c0 000d 	ubfx	r0, r0, #0, #14

	if (epn > CONF_USB_D_MAX_EP_N || !req_buf) {
    3a38:	2c02      	cmp	r4, #2
    3a3a:	d817      	bhi.n	3a6c <_usb_d_dev_ep_read_req+0x48>
    3a3c:	b1c9      	cbz	r1, 3a72 <_usb_d_dev_ep_read_req+0x4e>
    3a3e:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    3a42:	f893 2100 	ldrb.w	r2, [r3, #256]	; 0x100
    3a46:	b2d2      	uxtb	r2, r2
		return -USB_ERR_PARAM;
	}
	if (!_usbd_ep_is_ctrl(epn)) {
    3a48:	2a11      	cmp	r2, #17
    3a4a:	d115      	bne.n	3a78 <_usb_d_dev_ep_read_req+0x54>
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    3a4c:	f893 2107 	ldrb.w	r2, [r3, #263]	; 0x107
		return -USB_ERR_FUNC;
	}
	if (!_usbd_ep_is_setup(epn)) {
    3a50:	f012 0f10 	tst.w	r2, #16
    3a54:	d102      	bne.n	3a5c <_usb_d_dev_ep_read_req+0x38>
		return ERR_NONE;
    3a56:	2000      	movs	r0, #0
	}
	memcpy(req_buf, (void *)addr, 8);
	_usbd_ep_ack_setup(epn);

	return bytes;
}
    3a58:	bc30      	pop	{r4, r5}
    3a5a:	4770      	bx	lr
	memcpy(req_buf, (void *)addr, 8);
    3a5c:	682c      	ldr	r4, [r5, #0]
    3a5e:	686a      	ldr	r2, [r5, #4]
    3a60:	600c      	str	r4, [r1, #0]
    3a62:	604a      	str	r2, [r1, #4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    3a64:	2210      	movs	r2, #16
    3a66:	f883 2107 	strb.w	r2, [r3, #263]	; 0x107
	return bytes;
    3a6a:	e7f5      	b.n	3a58 <_usb_d_dev_ep_read_req+0x34>
		return -USB_ERR_PARAM;
    3a6c:	f06f 0011 	mvn.w	r0, #17
    3a70:	e7f2      	b.n	3a58 <_usb_d_dev_ep_read_req+0x34>
    3a72:	f06f 0011 	mvn.w	r0, #17
    3a76:	e7ef      	b.n	3a58 <_usb_d_dev_ep_read_req+0x34>
		return -USB_ERR_FUNC;
    3a78:	f06f 0012 	mvn.w	r0, #18
    3a7c:	e7ec      	b.n	3a58 <_usb_d_dev_ep_read_req+0x34>
    3a7e:	bf00      	nop
    3a80:	20000700 	.word	0x20000700

00003a84 <_usb_d_dev_ep_trans>:

int32_t _usb_d_dev_ep_trans(const struct usb_d_transfer *trans)
{
    3a84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3a88:	b083      	sub	sp, #12
	uint8_t               epn = USB_EP_GET_N(trans->ep);
    3a8a:	7a03      	ldrb	r3, [r0, #8]
    3a8c:	b25e      	sxtb	r6, r3
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    3a8e:	f013 030f 	ands.w	r3, r3, #15
    3a92:	f000 80c2 	beq.w	3c1a <_usb_d_dev_ep_trans+0x196>
    3a96:	2e00      	cmp	r6, #0
    3a98:	bfb4      	ite	lt
    3a9a:	1c9a      	addlt	r2, r3, #2
    3a9c:	461a      	movge	r2, r3
	return &dev_inst.ep[ep_index];
    3a9e:	4614      	mov	r4, r2
    3aa0:	4969      	ldr	r1, [pc, #420]	; (3c48 <_usb_d_dev_ep_trans+0x1c4>)
    3aa2:	f101 0760 	add.w	r7, r1, #96	; 0x60
    3aa6:	1c55      	adds	r5, r2, #1
    3aa8:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    3aac:	eb07 0785 	add.w	r7, r7, r5, lsl #2
	bool                  dir = USB_EP_GET_DIR(trans->ep);
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);

	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    3ab0:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    3ab4:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    3ab8:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
    3abc:	f240 31ff 	movw	r1, #1023	; 0x3ff
    3ac0:	428a      	cmp	r2, r1
    3ac2:	d025      	beq.n	3b10 <_usb_d_dev_ep_trans+0x8c>
    3ac4:	1e55      	subs	r5, r2, #1
    3ac6:	b2ad      	uxth	r5, r5
	bool     size_n_aligned = (trans->size & size_mask);
    3ac8:	6841      	ldr	r1, [r0, #4]
    3aca:	400d      	ands	r5, r1

	bool use_cache = false;

	volatile hal_atomic_t flags;

	if (epn > CONF_USB_D_MAX_EP_N) {
    3acc:	2b02      	cmp	r3, #2
    3ace:	f200 8092 	bhi.w	3bf6 <_usb_d_dev_ep_trans+0x172>
	 * 1. Buffer not in RAM (cache all).
	 * 2. IN/OUT with unaligned buffer (cache all).
	 * 3. OUT with unaligned packet size (cache last packet).
	 * 4. OUT size < 8 (sub-case for 3).
	 */
	if (!_usb_is_addr4dma(trans->buf, trans->size) || (!_usb_is_aligned(trans->buf))
    3ad2:	6803      	ldr	r3, [r0, #0]
    3ad4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
    3ad8:	d31c      	bcc.n	3b14 <_usb_d_dev_ep_trans+0x90>
    3ada:	eb03 0c01 	add.w	ip, r3, r1
    3ade:	f8df e180 	ldr.w	lr, [pc, #384]	; 3c60 <_usb_d_dev_ep_trans+0x1dc>
    3ae2:	45f4      	cmp	ip, lr
    3ae4:	d816      	bhi.n	3b14 <_usb_d_dev_ep_trans+0x90>
    3ae6:	f013 0f03 	tst.w	r3, #3
    3aea:	d113      	bne.n	3b14 <_usb_d_dev_ep_trans+0x90>
	    || (!dir && (trans->size < ept->size))) {
    3aec:	2e00      	cmp	r6, #0
    3aee:	db2a      	blt.n	3b46 <_usb_d_dev_ep_trans+0xc2>
    3af0:	428a      	cmp	r2, r1
    3af2:	f200 809c 	bhi.w	3c2e <_usb_d_dev_ep_trans+0x1aa>
			return -USB_ERR_FUNC;
		}
		/* Use cache all the time. */
		use_cache = true;
	}
	if (!dir && size_n_aligned) {
    3af6:	b34d      	cbz	r5, 3b4c <_usb_d_dev_ep_trans+0xc8>
		if (!ept->cache) {
    3af8:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    3afc:	4a52      	ldr	r2, [pc, #328]	; (3c48 <_usb_d_dev_ep_trans+0x1c4>)
    3afe:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    3b02:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    3b06:	2b00      	cmp	r3, #0
    3b08:	d07b      	beq.n	3c02 <_usb_d_dev_ep_trans+0x17e>
	bool use_cache = false;
    3b0a:	f04f 0800 	mov.w	r8, #0
    3b0e:	e00c      	b.n	3b2a <_usb_d_dev_ep_trans+0xa6>
	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    3b10:	4615      	mov	r5, r2
    3b12:	e7d9      	b.n	3ac8 <_usb_d_dev_ep_trans+0x44>
		if (!ept->cache) {
    3b14:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    3b18:	4a4b      	ldr	r2, [pc, #300]	; (3c48 <_usb_d_dev_ep_trans+0x1c4>)
    3b1a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    3b1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    3b22:	2b00      	cmp	r3, #0
    3b24:	d06a      	beq.n	3bfc <_usb_d_dev_ep_trans+0x178>
		use_cache = true;
    3b26:	f04f 0801 	mov.w	r8, #1
		}
		/* Set 'use_cache' on last packet. */
	}

	/* Check halt */
	if (ept->flags.bits.is_stalled) {
    3b2a:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    3b2e:	4a46      	ldr	r2, [pc, #280]	; (3c48 <_usb_d_dev_ep_trans+0x1c4>)
    3b30:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    3b34:	f893 3087 	ldrb.w	r3, [r3, #135]	; 0x87
    3b38:	f013 0f08 	tst.w	r3, #8
    3b3c:	d009      	beq.n	3b52 <_usb_d_dev_ep_trans+0xce>
		return USB_HALTED;
    3b3e:	2002      	movs	r0, #2
	} else {
		_usb_d_dev_out_next(ept, false);
	}

	return ERR_NONE;
}
    3b40:	b003      	add	sp, #12
    3b42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	bool use_cache = false;
    3b46:	f04f 0800 	mov.w	r8, #0
    3b4a:	e7ee      	b.n	3b2a <_usb_d_dev_ep_trans+0xa6>
    3b4c:	f04f 0800 	mov.w	r8, #0
    3b50:	e7eb      	b.n	3b2a <_usb_d_dev_ep_trans+0xa6>
    3b52:	4682      	mov	sl, r0
	atomic_enter_critical(&flags);
    3b54:	a801      	add	r0, sp, #4
    3b56:	4b3d      	ldr	r3, [pc, #244]	; (3c4c <_usb_d_dev_ep_trans+0x1c8>)
    3b58:	4798      	blx	r3
	if (_usb_d_dev_ep_is_busy(ept)) {
    3b5a:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    3b5e:	4a3a      	ldr	r2, [pc, #232]	; (3c48 <_usb_d_dev_ep_trans+0x1c4>)
    3b60:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    3b64:	f893 3087 	ldrb.w	r3, [r3, #135]	; 0x87
    3b68:	f013 0f40 	tst.w	r3, #64	; 0x40
    3b6c:	d13c      	bne.n	3be8 <_usb_d_dev_ep_trans+0x164>
	ept->flags.bits.is_busy = 1;
    3b6e:	eb04 0984 	add.w	r9, r4, r4, lsl #2
    3b72:	4b35      	ldr	r3, [pc, #212]	; (3c48 <_usb_d_dev_ep_trans+0x1c4>)
    3b74:	eb03 0989 	add.w	r9, r3, r9, lsl #2
    3b78:	f899 3087 	ldrb.w	r3, [r9, #135]	; 0x87
    3b7c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    3b80:	f889 3087 	strb.w	r3, [r9, #135]	; 0x87
	atomic_leave_critical(&flags);
    3b84:	a801      	add	r0, sp, #4
    3b86:	4b32      	ldr	r3, [pc, #200]	; (3c50 <_usb_d_dev_ep_trans+0x1cc>)
    3b88:	4798      	blx	r3
	ept->trans_buf   = trans->buf;
    3b8a:	f8da 3000 	ldr.w	r3, [sl]
    3b8e:	f8c9 3074 	str.w	r3, [r9, #116]	; 0x74
	ept->trans_size  = trans->size;
    3b92:	f8da 3004 	ldr.w	r3, [sl, #4]
    3b96:	f8c9 3078 	str.w	r3, [r9, #120]	; 0x78
	ept->trans_count = 0;
    3b9a:	2300      	movs	r3, #0
    3b9c:	f8c9 307c 	str.w	r3, [r9, #124]	; 0x7c
	bool                  dir = USB_EP_GET_DIR(trans->ep);
    3ba0:	0ff2      	lsrs	r2, r6, #31
	ept->flags.bits.dir       = dir;
    3ba2:	f899 3087 	ldrb.w	r3, [r9, #135]	; 0x87
    3ba6:	f362 13c7 	bfi	r3, r2, #7, #1
	ept->flags.bits.use_cache = use_cache;
    3baa:	f368 1345 	bfi	r3, r8, #5, #1
    3bae:	f889 3087 	strb.w	r3, [r9, #135]	; 0x87
	ept->flags.bits.need_zlp  = (trans->zlp && (!size_n_aligned));
    3bb2:	f89a 3009 	ldrb.w	r3, [sl, #9]
    3bb6:	b1e3      	cbz	r3, 3bf2 <_usb_d_dev_ep_trans+0x16e>
    3bb8:	fab5 f585 	clz	r5, r5
    3bbc:	096d      	lsrs	r5, r5, #5
    3bbe:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    3bc2:	4b21      	ldr	r3, [pc, #132]	; (3c48 <_usb_d_dev_ep_trans+0x1c4>)
    3bc4:	eb03 0484 	add.w	r4, r3, r4, lsl #2
    3bc8:	f894 3087 	ldrb.w	r3, [r4, #135]	; 0x87
    3bcc:	f365 1304 	bfi	r3, r5, #4, #1
    3bd0:	f884 3087 	strb.w	r3, [r4, #135]	; 0x87
	if (dir) {
    3bd4:	2e00      	cmp	r6, #0
		_usb_d_dev_in_next(ept, false);
    3bd6:	f04f 0100 	mov.w	r1, #0
    3bda:	4638      	mov	r0, r7
    3bdc:	bfb4      	ite	lt
    3bde:	4b1d      	ldrlt	r3, [pc, #116]	; (3c54 <_usb_d_dev_ep_trans+0x1d0>)
		_usb_d_dev_out_next(ept, false);
    3be0:	4b1d      	ldrge	r3, [pc, #116]	; (3c58 <_usb_d_dev_ep_trans+0x1d4>)
    3be2:	4798      	blx	r3
	return ERR_NONE;
    3be4:	2000      	movs	r0, #0
    3be6:	e7ab      	b.n	3b40 <_usb_d_dev_ep_trans+0xbc>
		atomic_leave_critical(&flags);
    3be8:	a801      	add	r0, sp, #4
    3bea:	4b19      	ldr	r3, [pc, #100]	; (3c50 <_usb_d_dev_ep_trans+0x1cc>)
    3bec:	4798      	blx	r3
		return USB_BUSY;
    3bee:	2001      	movs	r0, #1
    3bf0:	e7a6      	b.n	3b40 <_usb_d_dev_ep_trans+0xbc>
    3bf2:	2500      	movs	r5, #0
    3bf4:	e7e3      	b.n	3bbe <_usb_d_dev_ep_trans+0x13a>
		return -USB_ERR_PARAM;
    3bf6:	f06f 0011 	mvn.w	r0, #17
    3bfa:	e7a1      	b.n	3b40 <_usb_d_dev_ep_trans+0xbc>
			return -USB_ERR_FUNC;
    3bfc:	f06f 0012 	mvn.w	r0, #18
    3c00:	e79e      	b.n	3b40 <_usb_d_dev_ep_trans+0xbc>
			return -USB_ERR_PARAM;
    3c02:	f06f 0011 	mvn.w	r0, #17
    3c06:	e79b      	b.n	3b40 <_usb_d_dev_ep_trans+0xbc>
			return -USB_ERR_FUNC;
    3c08:	f06f 0012 	mvn.w	r0, #18
    3c0c:	e798      	b.n	3b40 <_usb_d_dev_ep_trans+0xbc>
	bool     size_n_aligned = (trans->size & size_mask);
    3c0e:	6841      	ldr	r1, [r0, #4]
    3c10:	f3c1 0509 	ubfx	r5, r1, #0, #10
	return &dev_inst.ep[ep_index];
    3c14:	4f11      	ldr	r7, [pc, #68]	; (3c5c <_usb_d_dev_ep_trans+0x1d8>)
    3c16:	2400      	movs	r4, #0
    3c18:	e75b      	b.n	3ad2 <_usb_d_dev_ep_trans+0x4e>
	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    3c1a:	4a0b      	ldr	r2, [pc, #44]	; (3c48 <_usb_d_dev_ep_trans+0x1c4>)
    3c1c:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
    3c20:	f240 31ff 	movw	r1, #1023	; 0x3ff
    3c24:	428a      	cmp	r2, r1
    3c26:	d0f2      	beq.n	3c0e <_usb_d_dev_ep_trans+0x18a>
	return &dev_inst.ep[ep_index];
    3c28:	4f0c      	ldr	r7, [pc, #48]	; (3c5c <_usb_d_dev_ep_trans+0x1d8>)
    3c2a:	2400      	movs	r4, #0
    3c2c:	e74a      	b.n	3ac4 <_usb_d_dev_ep_trans+0x40>
		if (!ept->cache) {
    3c2e:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    3c32:	4a05      	ldr	r2, [pc, #20]	; (3c48 <_usb_d_dev_ep_trans+0x1c4>)
    3c34:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    3c38:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    3c3c:	2b00      	cmp	r3, #0
    3c3e:	d0e3      	beq.n	3c08 <_usb_d_dev_ep_trans+0x184>
    3c40:	f04f 0801 	mov.w	r8, #1
    3c44:	e771      	b.n	3b2a <_usb_d_dev_ep_trans+0xa6>
    3c46:	bf00      	nop
    3c48:	20000700 	.word	0x20000700
    3c4c:	00004899 	.word	0x00004899
    3c50:	000048a7 	.word	0x000048a7
    3c54:	00002ce5 	.word	0x00002ce5
    3c58:	00002e69 	.word	0x00002e69
    3c5c:	20000774 	.word	0x20000774
    3c60:	20041fff 	.word	0x20041fff

00003c64 <_usb_d_dev_register_callback>:
	return USB_OK;
}

void _usb_d_dev_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    3c64:	4b06      	ldr	r3, [pc, #24]	; (3c80 <_usb_d_dev_register_callback+0x1c>)
    3c66:	2900      	cmp	r1, #0
    3c68:	bf08      	it	eq
    3c6a:	4619      	moveq	r1, r3
	if (type == USB_D_CB_EVENT) {
    3c6c:	2801      	cmp	r0, #1
    3c6e:	d003      	beq.n	3c78 <_usb_d_dev_register_callback+0x14>
		dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)f;
	} else if (type == USB_D_CB_SOF) {
    3c70:	b908      	cbnz	r0, 3c76 <_usb_d_dev_register_callback+0x12>
		dev_inst.callbacks.sof = (_usb_d_dev_sof_cb_t)f;
    3c72:	4b04      	ldr	r3, [pc, #16]	; (3c84 <_usb_d_dev_register_callback+0x20>)
    3c74:	6619      	str	r1, [r3, #96]	; 0x60
    3c76:	4770      	bx	lr
		dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)f;
    3c78:	4b02      	ldr	r3, [pc, #8]	; (3c84 <_usb_d_dev_register_callback+0x20>)
    3c7a:	6659      	str	r1, [r3, #100]	; 0x64
    3c7c:	4770      	bx	lr
    3c7e:	bf00      	nop
    3c80:	00002a5d 	.word	0x00002a5d
    3c84:	20000700 	.word	0x20000700

00003c88 <_usb_d_dev_register_ep_callback>:
	}
}

void _usb_d_dev_register_ep_callback(const enum usb_d_dev_ep_cb_type type, const FUNC_PTR func)
{
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    3c88:	4b09      	ldr	r3, [pc, #36]	; (3cb0 <_usb_d_dev_register_ep_callback+0x28>)
    3c8a:	2900      	cmp	r1, #0
    3c8c:	bf08      	it	eq
    3c8e:	4619      	moveq	r1, r3
	if (type == USB_D_DEV_EP_CB_SETUP) {
    3c90:	4603      	mov	r3, r0
    3c92:	b130      	cbz	r0, 3ca2 <_usb_d_dev_register_ep_callback+0x1a>
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
	} else if (type == USB_D_DEV_EP_CB_MORE) {
    3c94:	2801      	cmp	r0, #1
    3c96:	d007      	beq.n	3ca8 <_usb_d_dev_register_ep_callback+0x20>
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
	} else if (type == USB_D_DEV_EP_CB_DONE) {
    3c98:	2802      	cmp	r0, #2
		dev_inst.ep_callbacks.done = (_usb_d_dev_ep_cb_done_t)f;
    3c9a:	bf04      	itt	eq
    3c9c:	4b05      	ldreq	r3, [pc, #20]	; (3cb4 <_usb_d_dev_register_ep_callback+0x2c>)
    3c9e:	6719      	streq	r1, [r3, #112]	; 0x70
    3ca0:	4770      	bx	lr
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
    3ca2:	4b04      	ldr	r3, [pc, #16]	; (3cb4 <_usb_d_dev_register_ep_callback+0x2c>)
    3ca4:	6699      	str	r1, [r3, #104]	; 0x68
    3ca6:	4770      	bx	lr
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
    3ca8:	4b02      	ldr	r3, [pc, #8]	; (3cb4 <_usb_d_dev_register_ep_callback+0x2c>)
    3caa:	66d9      	str	r1, [r3, #108]	; 0x6c
    3cac:	4770      	bx	lr
    3cae:	bf00      	nop
    3cb0:	00002a5d 	.word	0x00002a5d
    3cb4:	20000700 	.word	0x20000700

00003cb8 <USB_0_Handler>:

/**
 * \brief USB interrupt handler
 */
void USB_0_Handler(void)
{
    3cb8:	b508      	push	{r3, lr}

	_usb_d_dev_handler();
    3cba:	4b01      	ldr	r3, [pc, #4]	; (3cc0 <USB_0_Handler+0x8>)
    3cbc:	4798      	blx	r3
    3cbe:	bd08      	pop	{r3, pc}
    3cc0:	00003059 	.word	0x00003059

00003cc4 <USB_1_Handler>:
}
/**
 * \brief USB interrupt handler
 */
void USB_1_Handler(void)
{
    3cc4:	b508      	push	{r3, lr}

	_usb_d_dev_handler();
    3cc6:	4b01      	ldr	r3, [pc, #4]	; (3ccc <USB_1_Handler+0x8>)
    3cc8:	4798      	blx	r3
    3cca:	bd08      	pop	{r3, pc}
    3ccc:	00003059 	.word	0x00003059

00003cd0 <USB_2_Handler>:
}
/**
 * \brief USB interrupt handler
 */
void USB_2_Handler(void)
{
    3cd0:	b508      	push	{r3, lr}

	_usb_d_dev_handler();
    3cd2:	4b01      	ldr	r3, [pc, #4]	; (3cd8 <USB_2_Handler+0x8>)
    3cd4:	4798      	blx	r3
    3cd6:	bd08      	pop	{r3, pc}
    3cd8:	00003059 	.word	0x00003059

00003cdc <USB_3_Handler>:
}
/**
 * \brief USB interrupt handler
 */
void USB_3_Handler(void)
{
    3cdc:	b508      	push	{r3, lr}

	_usb_d_dev_handler();
    3cde:	4b01      	ldr	r3, [pc, #4]	; (3ce4 <USB_3_Handler+0x8>)
    3ce0:	4798      	blx	r3
    3ce2:	bd08      	pop	{r3, pc}
    3ce4:	00003059 	.word	0x00003059

00003ce8 <cdcdf_acm_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    3ce8:	b5f0      	push	{r4, r5, r6, r7, lr}
    3cea:	b083      	sub	sp, #12
	if (0x01 != ((req->bmRequestType >> 5) & 0x03)) { // class request
    3cec:	780b      	ldrb	r3, [r1, #0]
    3cee:	f3c3 1441 	ubfx	r4, r3, #5, #2
    3cf2:	2c01      	cmp	r4, #1
    3cf4:	d15e      	bne.n	3db4 <cdcdf_acm_req+0xcc>
		return ERR_NOT_FOUND;
	}
	if ((req->wIndex == _cdcdf_acm_funcd.func_iface[0]) || (req->wIndex == _cdcdf_acm_funcd.func_iface[1])) {
    3cf6:	888c      	ldrh	r4, [r1, #4]
    3cf8:	4d35      	ldr	r5, [pc, #212]	; (3dd0 <cdcdf_acm_req+0xe8>)
    3cfa:	782d      	ldrb	r5, [r5, #0]
    3cfc:	42a5      	cmp	r5, r4
    3cfe:	d003      	beq.n	3d08 <cdcdf_acm_req+0x20>
    3d00:	4d33      	ldr	r5, [pc, #204]	; (3dd0 <cdcdf_acm_req+0xe8>)
    3d02:	786d      	ldrb	r5, [r5, #1]
    3d04:	42a5      	cmp	r5, r4
    3d06:	d158      	bne.n	3dba <cdcdf_acm_req+0xd2>
    3d08:	4616      	mov	r6, r2
    3d0a:	460c      	mov	r4, r1
    3d0c:	4605      	mov	r5, r0
		if (req->bmRequestType & USB_EP_DIR_IN) {
    3d0e:	f013 0f80 	tst.w	r3, #128	; 0x80
    3d12:	d10c      	bne.n	3d2e <cdcdf_acm_req+0x46>
	uint16_t                   len      = req->wLength;
    3d14:	88cf      	ldrh	r7, [r1, #6]
	uint8_t *                  ctrl_buf = usbdc_get_ctrl_buffer();
    3d16:	4b2f      	ldr	r3, [pc, #188]	; (3dd4 <cdcdf_acm_req+0xec>)
    3d18:	4798      	blx	r3
    3d1a:	4601      	mov	r1, r0
	switch (req->bRequest) {
    3d1c:	7863      	ldrb	r3, [r4, #1]
    3d1e:	2b20      	cmp	r3, #32
    3d20:	d013      	beq.n	3d4a <cdcdf_acm_req+0x62>
    3d22:	2b22      	cmp	r3, #34	; 0x22
    3d24:	d032      	beq.n	3d8c <cdcdf_acm_req+0xa4>
		return ERR_INVALID_ARG;
    3d26:	f06f 000c 	mvn.w	r0, #12
			return cdcdf_acm_set_req(ep, req, stage);
		}
	} else {
		return ERR_NOT_FOUND;
	}
}
    3d2a:	b003      	add	sp, #12
    3d2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (USB_DATA_STAGE == stage) {
    3d2e:	2a01      	cmp	r2, #1
    3d30:	d046      	beq.n	3dc0 <cdcdf_acm_req+0xd8>
	switch (req->bRequest) {
    3d32:	784b      	ldrb	r3, [r1, #1]
    3d34:	2b21      	cmp	r3, #33	; 0x21
    3d36:	d145      	bne.n	3dc4 <cdcdf_acm_req+0xdc>
		if (sizeof(struct usb_cdc_line_coding) != len) {
    3d38:	88cb      	ldrh	r3, [r1, #6]
    3d3a:	2b07      	cmp	r3, #7
    3d3c:	d145      	bne.n	3dca <cdcdf_acm_req+0xe2>
		return usbdc_xfer(ep, (uint8_t *)&usbd_cdc_line_coding, len, false);
    3d3e:	2300      	movs	r3, #0
    3d40:	2207      	movs	r2, #7
    3d42:	4925      	ldr	r1, [pc, #148]	; (3dd8 <cdcdf_acm_req+0xf0>)
    3d44:	4c25      	ldr	r4, [pc, #148]	; (3ddc <cdcdf_acm_req+0xf4>)
    3d46:	47a0      	blx	r4
    3d48:	e7ef      	b.n	3d2a <cdcdf_acm_req+0x42>
		if (sizeof(struct usb_cdc_line_coding) != len) {
    3d4a:	2f07      	cmp	r7, #7
    3d4c:	d12b      	bne.n	3da6 <cdcdf_acm_req+0xbe>
		if (USB_SETUP_STAGE == stage) {
    3d4e:	b1be      	cbz	r6, 3d80 <cdcdf_acm_req+0x98>
			memcpy(&line_coding_tmp, ctrl_buf, sizeof(struct usb_cdc_line_coding));
    3d50:	6800      	ldr	r0, [r0, #0]
    3d52:	9000      	str	r0, [sp, #0]
    3d54:	888a      	ldrh	r2, [r1, #4]
    3d56:	798b      	ldrb	r3, [r1, #6]
    3d58:	f8ad 2004 	strh.w	r2, [sp, #4]
    3d5c:	f88d 3006 	strb.w	r3, [sp, #6]
			if ((NULL == cdcdf_acm_set_line_coding) || (true == cdcdf_acm_set_line_coding(&line_coding_tmp))) {
    3d60:	4b1b      	ldr	r3, [pc, #108]	; (3dd0 <cdcdf_acm_req+0xe8>)
    3d62:	691b      	ldr	r3, [r3, #16]
    3d64:	b113      	cbz	r3, 3d6c <cdcdf_acm_req+0x84>
    3d66:	4668      	mov	r0, sp
    3d68:	4798      	blx	r3
    3d6a:	b1f8      	cbz	r0, 3dac <cdcdf_acm_req+0xc4>
				usbd_cdc_line_coding = line_coding_tmp;
    3d6c:	4b18      	ldr	r3, [pc, #96]	; (3dd0 <cdcdf_acm_req+0xe8>)
    3d6e:	aa02      	add	r2, sp, #8
    3d70:	e912 0003 	ldmdb	r2, {r0, r1}
    3d74:	6098      	str	r0, [r3, #8]
    3d76:	8199      	strh	r1, [r3, #12]
    3d78:	0c09      	lsrs	r1, r1, #16
    3d7a:	7399      	strb	r1, [r3, #14]
			return ERR_NONE;
    3d7c:	2000      	movs	r0, #0
    3d7e:	e7d4      	b.n	3d2a <cdcdf_acm_req+0x42>
			return usbdc_xfer(ep, ctrl_buf, len, false);
    3d80:	2300      	movs	r3, #0
    3d82:	2207      	movs	r2, #7
    3d84:	4628      	mov	r0, r5
    3d86:	4c15      	ldr	r4, [pc, #84]	; (3ddc <cdcdf_acm_req+0xf4>)
    3d88:	47a0      	blx	r4
    3d8a:	e7ce      	b.n	3d2a <cdcdf_acm_req+0x42>
		usbdc_xfer(0, NULL, 0, 0);
    3d8c:	2300      	movs	r3, #0
    3d8e:	461a      	mov	r2, r3
    3d90:	4619      	mov	r1, r3
    3d92:	4618      	mov	r0, r3
    3d94:	4d11      	ldr	r5, [pc, #68]	; (3ddc <cdcdf_acm_req+0xf4>)
    3d96:	47a8      	blx	r5
		if (NULL != cdcdf_acm_notify_state) {
    3d98:	4b0d      	ldr	r3, [pc, #52]	; (3dd0 <cdcdf_acm_req+0xe8>)
    3d9a:	695b      	ldr	r3, [r3, #20]
    3d9c:	b143      	cbz	r3, 3db0 <cdcdf_acm_req+0xc8>
			cdcdf_acm_notify_state(req->wValue);
    3d9e:	8860      	ldrh	r0, [r4, #2]
    3da0:	4798      	blx	r3
		return ERR_NONE;
    3da2:	2000      	movs	r0, #0
    3da4:	e7c1      	b.n	3d2a <cdcdf_acm_req+0x42>
			return ERR_INVALID_DATA;
    3da6:	f04f 30ff 	mov.w	r0, #4294967295
    3daa:	e7be      	b.n	3d2a <cdcdf_acm_req+0x42>
			return ERR_NONE;
    3dac:	2000      	movs	r0, #0
    3dae:	e7bc      	b.n	3d2a <cdcdf_acm_req+0x42>
		return ERR_NONE;
    3db0:	2000      	movs	r0, #0
			return cdcdf_acm_set_req(ep, req, stage);
    3db2:	e7ba      	b.n	3d2a <cdcdf_acm_req+0x42>
		return ERR_NOT_FOUND;
    3db4:	f06f 0009 	mvn.w	r0, #9
    3db8:	e7b7      	b.n	3d2a <cdcdf_acm_req+0x42>
		return ERR_NOT_FOUND;
    3dba:	f06f 0009 	mvn.w	r0, #9
    3dbe:	e7b4      	b.n	3d2a <cdcdf_acm_req+0x42>
		return ERR_NONE;
    3dc0:	2000      	movs	r0, #0
    3dc2:	e7b2      	b.n	3d2a <cdcdf_acm_req+0x42>
		return ERR_INVALID_ARG;
    3dc4:	f06f 000c 	mvn.w	r0, #12
    3dc8:	e7af      	b.n	3d2a <cdcdf_acm_req+0x42>
			return ERR_INVALID_DATA;
    3dca:	f04f 30ff 	mov.w	r0, #4294967295
    3dce:	e7ac      	b.n	3d2a <cdcdf_acm_req+0x42>
    3dd0:	200008e8 	.word	0x200008e8
    3dd4:	0000470d 	.word	0x0000470d
    3dd8:	200008f0 	.word	0x200008f0
    3ddc:	000041e9 	.word	0x000041e9

00003de0 <cdcdf_acm_ctrl>:
{
    3de0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3de4:	b083      	sub	sp, #12
    3de6:	4616      	mov	r6, r2
	switch (ctrl) {
    3de8:	2901      	cmp	r1, #1
    3dea:	d066      	beq.n	3eba <cdcdf_acm_ctrl+0xda>
    3dec:	b141      	cbz	r1, 3e00 <cdcdf_acm_ctrl+0x20>
		return ERR_INVALID_ARG;
    3dee:	2902      	cmp	r1, #2
    3df0:	bf0c      	ite	eq
    3df2:	f06f 001a 	mvneq.w	r0, #26
    3df6:	f06f 000c 	mvnne.w	r0, #12
}
    3dfa:	b003      	add	sp, #12
    3dfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
    3e00:	f8d0 a008 	ldr.w	sl, [r0, #8]
	ifc = desc->sod;
    3e04:	6810      	ldr	r0, [r2, #0]
		if (NULL == ifc) {
    3e06:	2800      	cmp	r0, #0
    3e08:	f000 8085 	beq.w	3f16 <cdcdf_acm_ctrl+0x136>
    3e0c:	f10a 3bff 	add.w	fp, sl, #4294967295
    3e10:	f10a 0301 	add.w	r3, sl, #1
    3e14:	9300      	str	r3, [sp, #0]
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    3e16:	4f46      	ldr	r7, [pc, #280]	; (3f30 <cdcdf_acm_ctrl+0x150>)
				usb_d_ep_enable(func_data->func_ep_out);
    3e18:	f8df 9124 	ldr.w	r9, [pc, #292]	; 3f40 <cdcdf_acm_ctrl+0x160>
			ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    3e1c:	f8df 8124 	ldr.w	r8, [pc, #292]	; 3f44 <cdcdf_acm_ctrl+0x164>
		ifc_desc.bInterfaceNumber = ifc[2];
    3e20:	7882      	ldrb	r2, [r0, #2]
		if ((CDC_CLASS_COMM == ifc_desc.bInterfaceClass) || (CDC_CLASS_DATA == ifc_desc.bInterfaceClass)) {
    3e22:	7943      	ldrb	r3, [r0, #5]
    3e24:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
    3e28:	2b02      	cmp	r3, #2
    3e2a:	d002      	beq.n	3e32 <cdcdf_acm_ctrl+0x52>
			return ERR_NOT_FOUND;
    3e2c:	f06f 0009 	mvn.w	r0, #9
    3e30:	e7e3      	b.n	3dfa <cdcdf_acm_ctrl+0x1a>
    3e32:	f10b 0b01 	add.w	fp, fp, #1
			if (func_data->func_iface[i] == ifc_desc.bInterfaceNumber) { // Initialized
    3e36:	f89b 3000 	ldrb.w	r3, [fp]
    3e3a:	429a      	cmp	r2, r3
    3e3c:	d06e      	beq.n	3f1c <cdcdf_acm_ctrl+0x13c>
			} else if (func_data->func_iface[i] != 0xFF) { // Occupied
    3e3e:	2bff      	cmp	r3, #255	; 0xff
    3e40:	d16f      	bne.n	3f22 <cdcdf_acm_ctrl+0x142>
				func_data->func_iface[i] = ifc_desc.bInterfaceNumber;
    3e42:	f88b 2000 	strb.w	r2, [fp]
		ep = usb_find_desc(ifc, desc->eod, USB_DT_ENDPOINT);
    3e46:	2205      	movs	r2, #5
    3e48:	6871      	ldr	r1, [r6, #4]
    3e4a:	4b3a      	ldr	r3, [pc, #232]	; (3f34 <cdcdf_acm_ctrl+0x154>)
    3e4c:	4798      	blx	r3
		while (NULL != ep) {
    3e4e:	4604      	mov	r4, r0
    3e50:	b1f8      	cbz	r0, 3e92 <cdcdf_acm_ctrl+0xb2>
    3e52:	f8cd b004 	str.w	fp, [sp, #4]
			ep_desc.bEndpointAddress = ep[2];
    3e56:	78a5      	ldrb	r5, [r4, #2]
 *  \param[in] ptr Byte pointer to the address to get data
 *  \return a 16-bit word
 */
static inline uint16_t usb_get_u16(const uint8_t *ptr)
{
	return (ptr[0] + (ptr[1] << 8));
    3e58:	7963      	ldrb	r3, [r4, #5]
    3e5a:	7922      	ldrb	r2, [r4, #4]
    3e5c:	eb02 2203 	add.w	r2, r2, r3, lsl #8
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    3e60:	b292      	uxth	r2, r2
    3e62:	78e1      	ldrb	r1, [r4, #3]
    3e64:	4628      	mov	r0, r5
    3e66:	47b8      	blx	r7
    3e68:	2800      	cmp	r0, #0
    3e6a:	d15d      	bne.n	3f28 <cdcdf_acm_ctrl+0x148>
			if (ep_desc.bEndpointAddress & USB_EP_DIR_IN) {
    3e6c:	f015 0f80 	tst.w	r5, #128	; 0x80
				func_data->func_ep_in[i] = ep_desc.bEndpointAddress;
    3e70:	bf14      	ite	ne
    3e72:	f88b 5002 	strbne.w	r5, [fp, #2]
				func_data->func_ep_out = ep_desc.bEndpointAddress;
    3e76:	f88a 5004 	strbeq.w	r5, [sl, #4]
				usb_d_ep_enable(func_data->func_ep_out);
    3e7a:	4628      	mov	r0, r5
    3e7c:	47c8      	blx	r9
			desc->sod = ep;
    3e7e:	6034      	str	r4, [r6, #0]
 *  \param[in] desc Byte pointer to the descriptor start address
 *  \return Byte pointer to the next descriptor
 */
static inline uint8_t *usb_desc_next(uint8_t *desc)
{
	return (desc + usb_desc_len(desc));
    3e80:	7820      	ldrb	r0, [r4, #0]
			ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    3e82:	6871      	ldr	r1, [r6, #4]
    3e84:	4420      	add	r0, r4
    3e86:	47c0      	blx	r8
		while (NULL != ep) {
    3e88:	4604      	mov	r4, r0
    3e8a:	2800      	cmp	r0, #0
    3e8c:	d1e3      	bne.n	3e56 <cdcdf_acm_ctrl+0x76>
    3e8e:	f8dd b004 	ldr.w	fp, [sp, #4]
		ifc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_INTERFACE);
    3e92:	6833      	ldr	r3, [r6, #0]
    3e94:	7818      	ldrb	r0, [r3, #0]
    3e96:	2204      	movs	r2, #4
    3e98:	6871      	ldr	r1, [r6, #4]
    3e9a:	4418      	add	r0, r3
    3e9c:	4b25      	ldr	r3, [pc, #148]	; (3f34 <cdcdf_acm_ctrl+0x154>)
    3e9e:	4798      	blx	r3
	for (i = 0; i < 2; i++) {
    3ea0:	9b00      	ldr	r3, [sp, #0]
    3ea2:	459b      	cmp	fp, r3
    3ea4:	d004      	beq.n	3eb0 <cdcdf_acm_ctrl+0xd0>
		if (NULL == ifc) {
    3ea6:	2800      	cmp	r0, #0
    3ea8:	d1ba      	bne.n	3e20 <cdcdf_acm_ctrl+0x40>
			return ERR_NOT_FOUND;
    3eaa:	f06f 0009 	mvn.w	r0, #9
    3eae:	e7a4      	b.n	3dfa <cdcdf_acm_ctrl+0x1a>
	_cdcdf_acm_funcd.enabled = true;
    3eb0:	2201      	movs	r2, #1
    3eb2:	4b21      	ldr	r3, [pc, #132]	; (3f38 <cdcdf_acm_ctrl+0x158>)
    3eb4:	715a      	strb	r2, [r3, #5]
	return ERR_NONE;
    3eb6:	2000      	movs	r0, #0
    3eb8:	e79f      	b.n	3dfa <cdcdf_acm_ctrl+0x1a>
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
    3eba:	6884      	ldr	r4, [r0, #8]
	if (desc) {
    3ebc:	b142      	cbz	r2, 3ed0 <cdcdf_acm_ctrl+0xf0>
		ifc_desc.bInterfaceClass = desc->sod[5];
    3ebe:	6813      	ldr	r3, [r2, #0]
		if ((ifc_desc.bInterfaceClass != CDC_CLASS_COMM) && (ifc_desc.bInterfaceClass != CDC_CLASS_DATA)) {
    3ec0:	795b      	ldrb	r3, [r3, #5]
    3ec2:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
    3ec6:	2b02      	cmp	r3, #2
    3ec8:	d002      	beq.n	3ed0 <cdcdf_acm_ctrl+0xf0>
			return ERR_NOT_FOUND;
    3eca:	f06f 0009 	mvn.w	r0, #9
    3ece:	e794      	b.n	3dfa <cdcdf_acm_ctrl+0x1a>
		if (func_data->func_iface[i] == 0xFF) {
    3ed0:	7823      	ldrb	r3, [r4, #0]
    3ed2:	2bff      	cmp	r3, #255	; 0xff
    3ed4:	d008      	beq.n	3ee8 <cdcdf_acm_ctrl+0x108>
			func_data->func_iface[i] = 0xFF;
    3ed6:	23ff      	movs	r3, #255	; 0xff
    3ed8:	7023      	strb	r3, [r4, #0]
			if (func_data->func_ep_in[i] != 0xFF) {
    3eda:	78a0      	ldrb	r0, [r4, #2]
    3edc:	4298      	cmp	r0, r3
    3ede:	d003      	beq.n	3ee8 <cdcdf_acm_ctrl+0x108>
				usb_d_ep_deinit(func_data->func_ep_in[i]);
    3ee0:	4b16      	ldr	r3, [pc, #88]	; (3f3c <cdcdf_acm_ctrl+0x15c>)
    3ee2:	4798      	blx	r3
				func_data->func_ep_in[i] = 0xFF;
    3ee4:	23ff      	movs	r3, #255	; 0xff
    3ee6:	70a3      	strb	r3, [r4, #2]
		if (func_data->func_iface[i] == 0xFF) {
    3ee8:	7863      	ldrb	r3, [r4, #1]
    3eea:	2bff      	cmp	r3, #255	; 0xff
    3eec:	d008      	beq.n	3f00 <cdcdf_acm_ctrl+0x120>
			func_data->func_iface[i] = 0xFF;
    3eee:	23ff      	movs	r3, #255	; 0xff
    3ef0:	7063      	strb	r3, [r4, #1]
			if (func_data->func_ep_in[i] != 0xFF) {
    3ef2:	78e0      	ldrb	r0, [r4, #3]
    3ef4:	4298      	cmp	r0, r3
    3ef6:	d003      	beq.n	3f00 <cdcdf_acm_ctrl+0x120>
				usb_d_ep_deinit(func_data->func_ep_in[i]);
    3ef8:	4b10      	ldr	r3, [pc, #64]	; (3f3c <cdcdf_acm_ctrl+0x15c>)
    3efa:	4798      	blx	r3
				func_data->func_ep_in[i] = 0xFF;
    3efc:	23ff      	movs	r3, #255	; 0xff
    3efe:	70e3      	strb	r3, [r4, #3]
	if (func_data->func_ep_out != 0xFF) {
    3f00:	7920      	ldrb	r0, [r4, #4]
    3f02:	28ff      	cmp	r0, #255	; 0xff
    3f04:	d003      	beq.n	3f0e <cdcdf_acm_ctrl+0x12e>
		usb_d_ep_deinit(func_data->func_ep_out);
    3f06:	4b0d      	ldr	r3, [pc, #52]	; (3f3c <cdcdf_acm_ctrl+0x15c>)
    3f08:	4798      	blx	r3
		func_data->func_ep_out = 0xFF;
    3f0a:	23ff      	movs	r3, #255	; 0xff
    3f0c:	7123      	strb	r3, [r4, #4]
	_cdcdf_acm_funcd.enabled = false;
    3f0e:	2000      	movs	r0, #0
    3f10:	4b09      	ldr	r3, [pc, #36]	; (3f38 <cdcdf_acm_ctrl+0x158>)
    3f12:	7158      	strb	r0, [r3, #5]
    3f14:	e771      	b.n	3dfa <cdcdf_acm_ctrl+0x1a>
			return ERR_NOT_FOUND;
    3f16:	f06f 0009 	mvn.w	r0, #9
    3f1a:	e76e      	b.n	3dfa <cdcdf_acm_ctrl+0x1a>
				return ERR_ALREADY_INITIALIZED;
    3f1c:	f06f 0011 	mvn.w	r0, #17
    3f20:	e76b      	b.n	3dfa <cdcdf_acm_ctrl+0x1a>
				return ERR_NO_RESOURCE;
    3f22:	f06f 001b 	mvn.w	r0, #27
    3f26:	e768      	b.n	3dfa <cdcdf_acm_ctrl+0x1a>
				return ERR_NOT_INITIALIZED;
    3f28:	f06f 0013 	mvn.w	r0, #19
    3f2c:	e765      	b.n	3dfa <cdcdf_acm_ctrl+0x1a>
    3f2e:	bf00      	nop
    3f30:	000018dd 	.word	0x000018dd
    3f34:	0000472d 	.word	0x0000472d
    3f38:	200008e8 	.word	0x200008e8
    3f3c:	00001945 	.word	0x00001945
    3f40:	00001971 	.word	0x00001971
    3f44:	00004767 	.word	0x00004767

00003f48 <cdcdf_acm_init>:

/**
 * \brief Initialize the USB CDC ACM Function Driver
 */
int32_t cdcdf_acm_init(void)
{
    3f48:	b508      	push	{r3, lr}
	if (usbdc_get_state() > USBD_S_POWER) {
    3f4a:	4b0a      	ldr	r3, [pc, #40]	; (3f74 <cdcdf_acm_init+0x2c>)
    3f4c:	4798      	blx	r3
    3f4e:	2801      	cmp	r0, #1
    3f50:	d80c      	bhi.n	3f6c <cdcdf_acm_init+0x24>
		return ERR_DENIED;
	}

	_cdcdf_acm.ctrl      = cdcdf_acm_ctrl;
    3f52:	4809      	ldr	r0, [pc, #36]	; (3f78 <cdcdf_acm_init+0x30>)
    3f54:	4b09      	ldr	r3, [pc, #36]	; (3f7c <cdcdf_acm_init+0x34>)
    3f56:	61c3      	str	r3, [r0, #28]
	_cdcdf_acm.func_data = &_cdcdf_acm_funcd;
    3f58:	6200      	str	r0, [r0, #32]

	usbdc_register_function(&_cdcdf_acm);
    3f5a:	3018      	adds	r0, #24
    3f5c:	4b08      	ldr	r3, [pc, #32]	; (3f80 <cdcdf_acm_init+0x38>)
    3f5e:	4798      	blx	r3
	usbdc_register_handler(USBDC_HDL_REQ, &cdcdf_acm_req_h);
    3f60:	4908      	ldr	r1, [pc, #32]	; (3f84 <cdcdf_acm_init+0x3c>)
    3f62:	2001      	movs	r0, #1
    3f64:	4b08      	ldr	r3, [pc, #32]	; (3f88 <cdcdf_acm_init+0x40>)
    3f66:	4798      	blx	r3
	return ERR_NONE;
    3f68:	2000      	movs	r0, #0
    3f6a:	bd08      	pop	{r3, pc}
		return ERR_DENIED;
    3f6c:	f06f 0010 	mvn.w	r0, #16
}
    3f70:	bd08      	pop	{r3, pc}
    3f72:	bf00      	nop
    3f74:	00004719 	.word	0x00004719
    3f78:	200008e8 	.word	0x200008e8
    3f7c:	00003de1 	.word	0x00003de1
    3f80:	000046b9 	.word	0x000046b9
    3f84:	200000a4 	.word	0x200000a4
    3f88:	00004625 	.word	0x00004625

00003f8c <cdcdf_acm_deinit>:

/**
 * \brief Deinitialize the USB CDC ACM Function Driver
 */
void cdcdf_acm_deinit(void)
{
    3f8c:	b538      	push	{r3, r4, r5, lr}
	usb_d_ep_deinit(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_COMM_EP_INDEX]);
    3f8e:	4d04      	ldr	r5, [pc, #16]	; (3fa0 <cdcdf_acm_deinit+0x14>)
    3f90:	78a8      	ldrb	r0, [r5, #2]
    3f92:	4c04      	ldr	r4, [pc, #16]	; (3fa4 <cdcdf_acm_deinit+0x18>)
    3f94:	47a0      	blx	r4
	usb_d_ep_deinit(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX]);
    3f96:	78e8      	ldrb	r0, [r5, #3]
    3f98:	47a0      	blx	r4
	usb_d_ep_deinit(_cdcdf_acm_funcd.func_ep_out);
    3f9a:	7928      	ldrb	r0, [r5, #4]
    3f9c:	47a0      	blx	r4
    3f9e:	bd38      	pop	{r3, r4, r5, pc}
    3fa0:	200008e8 	.word	0x200008e8
    3fa4:	00001945 	.word	0x00001945

00003fa8 <cdcdf_acm_read>:
/**
 * \brief Check whether CDC ACM Function is enabled
 */
bool cdcdf_acm_is_enabled(void)
{
	return _cdcdf_acm_funcd.enabled;
    3fa8:	4b07      	ldr	r3, [pc, #28]	; (3fc8 <cdcdf_acm_read+0x20>)
	if (!cdcdf_acm_is_enabled()) {
    3faa:	795b      	ldrb	r3, [r3, #5]
    3fac:	b143      	cbz	r3, 3fc0 <cdcdf_acm_read+0x18>
{
    3fae:	b510      	push	{r4, lr}
    3fb0:	460a      	mov	r2, r1
    3fb2:	4601      	mov	r1, r0
	return usbdc_xfer(_cdcdf_acm_funcd.func_ep_out, buf, size, false);
    3fb4:	2300      	movs	r3, #0
    3fb6:	4804      	ldr	r0, [pc, #16]	; (3fc8 <cdcdf_acm_read+0x20>)
    3fb8:	7900      	ldrb	r0, [r0, #4]
    3fba:	4c04      	ldr	r4, [pc, #16]	; (3fcc <cdcdf_acm_read+0x24>)
    3fbc:	47a0      	blx	r4
    3fbe:	bd10      	pop	{r4, pc}
		return ERR_DENIED;
    3fc0:	f06f 0010 	mvn.w	r0, #16
    3fc4:	4770      	bx	lr
    3fc6:	bf00      	nop
    3fc8:	200008e8 	.word	0x200008e8
    3fcc:	000041e9 	.word	0x000041e9

00003fd0 <cdcdf_acm_write>:
	return _cdcdf_acm_funcd.enabled;
    3fd0:	4b07      	ldr	r3, [pc, #28]	; (3ff0 <cdcdf_acm_write+0x20>)
	if (!cdcdf_acm_is_enabled()) {
    3fd2:	795b      	ldrb	r3, [r3, #5]
    3fd4:	b143      	cbz	r3, 3fe8 <cdcdf_acm_write+0x18>
{
    3fd6:	b510      	push	{r4, lr}
    3fd8:	460a      	mov	r2, r1
    3fda:	4601      	mov	r1, r0
	return usbdc_xfer(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX], buf, size, true);
    3fdc:	2301      	movs	r3, #1
    3fde:	4804      	ldr	r0, [pc, #16]	; (3ff0 <cdcdf_acm_write+0x20>)
    3fe0:	78c0      	ldrb	r0, [r0, #3]
    3fe2:	4c04      	ldr	r4, [pc, #16]	; (3ff4 <cdcdf_acm_write+0x24>)
    3fe4:	47a0      	blx	r4
    3fe6:	bd10      	pop	{r4, pc}
		return ERR_DENIED;
    3fe8:	f06f 0010 	mvn.w	r0, #16
    3fec:	4770      	bx	lr
    3fee:	bf00      	nop
    3ff0:	200008e8 	.word	0x200008e8
    3ff4:	000041e9 	.word	0x000041e9

00003ff8 <cdcdf_acm_register_callback>:
{
    3ff8:	b508      	push	{r3, lr}
	switch (cb_type) {
    3ffa:	2803      	cmp	r0, #3
    3ffc:	d81b      	bhi.n	4036 <cdcdf_acm_register_callback+0x3e>
    3ffe:	e8df f000 	tbb	[pc, r0]
    4002:	0a02      	.short	0x0a02
    4004:	1612      	.short	0x1612
		usb_d_ep_register_callback(_cdcdf_acm_funcd.func_ep_out, USB_D_EP_CB_XFER, func);
    4006:	460a      	mov	r2, r1
    4008:	2102      	movs	r1, #2
    400a:	4b0c      	ldr	r3, [pc, #48]	; (403c <cdcdf_acm_register_callback+0x44>)
    400c:	7918      	ldrb	r0, [r3, #4]
    400e:	4b0c      	ldr	r3, [pc, #48]	; (4040 <cdcdf_acm_register_callback+0x48>)
    4010:	4798      	blx	r3
	return ERR_NONE;
    4012:	2000      	movs	r0, #0
		break;
    4014:	bd08      	pop	{r3, pc}
		usb_d_ep_register_callback(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX], USB_D_EP_CB_XFER, func);
    4016:	460a      	mov	r2, r1
    4018:	2102      	movs	r1, #2
    401a:	4b08      	ldr	r3, [pc, #32]	; (403c <cdcdf_acm_register_callback+0x44>)
    401c:	78d8      	ldrb	r0, [r3, #3]
    401e:	4b08      	ldr	r3, [pc, #32]	; (4040 <cdcdf_acm_register_callback+0x48>)
    4020:	4798      	blx	r3
	return ERR_NONE;
    4022:	2000      	movs	r0, #0
		break;
    4024:	bd08      	pop	{r3, pc}
		cdcdf_acm_set_line_coding = (cdcdf_acm_set_line_coding_t)func;
    4026:	4b05      	ldr	r3, [pc, #20]	; (403c <cdcdf_acm_register_callback+0x44>)
    4028:	6119      	str	r1, [r3, #16]
	return ERR_NONE;
    402a:	2000      	movs	r0, #0
		break;
    402c:	bd08      	pop	{r3, pc}
		cdcdf_acm_notify_state = (cdcdf_acm_notify_state_t)func;
    402e:	4b03      	ldr	r3, [pc, #12]	; (403c <cdcdf_acm_register_callback+0x44>)
    4030:	6159      	str	r1, [r3, #20]
	return ERR_NONE;
    4032:	2000      	movs	r0, #0
		break;
    4034:	bd08      	pop	{r3, pc}
		return ERR_INVALID_ARG;
    4036:	f06f 000c 	mvn.w	r0, #12
}
    403a:	bd08      	pop	{r3, pc}
    403c:	200008e8 	.word	0x200008e8
    4040:	00001b45 	.word	0x00001b45

00004044 <cdcdf_acm_is_enabled>:
}
    4044:	4b01      	ldr	r3, [pc, #4]	; (404c <cdcdf_acm_is_enabled+0x8>)
    4046:	7958      	ldrb	r0, [r3, #5]
    4048:	4770      	bx	lr
    404a:	bf00      	nop
    404c:	200008e8 	.word	0x200008e8

00004050 <usbdc_unconfig>:

/**
 * \brief Unconfig, close all interfaces
 */
static void usbdc_unconfig(void)
{
    4050:	b570      	push	{r4, r5, r6, lr}
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    4052:	4b07      	ldr	r3, [pc, #28]	; (4070 <usbdc_unconfig+0x20>)
    4054:	691c      	ldr	r4, [r3, #16]
	while (NULL != func) {
    4056:	b14c      	cbz	r4, 406c <usbdc_unconfig+0x1c>
		func->ctrl(func, USBDF_DISABLE, NULL);
    4058:	2600      	movs	r6, #0
    405a:	2501      	movs	r5, #1
    405c:	6863      	ldr	r3, [r4, #4]
    405e:	4632      	mov	r2, r6
    4060:	4629      	mov	r1, r5
    4062:	4620      	mov	r0, r4
    4064:	4798      	blx	r3
		func = func->next;
    4066:	6824      	ldr	r4, [r4, #0]
	while (NULL != func) {
    4068:	2c00      	cmp	r4, #0
    406a:	d1f7      	bne.n	405c <usbdc_unconfig+0xc>
    406c:	bd70      	pop	{r4, r5, r6, pc}
    406e:	bf00      	nop
    4070:	2000090c 	.word	0x2000090c

00004074 <usbdc_change_notify>:
	}
}

/** Invoke all registered Change notification callbacks. */
static void usbdc_change_notify(enum usbdc_change_type change, uint32_t value)
{
    4074:	b570      	push	{r4, r5, r6, lr}
    4076:	4606      	mov	r6, r0
    4078:	460d      	mov	r5, r1
	struct usbdc_change_handler *cg = (struct usbdc_change_handler *)usbdc.handlers.change_list.head;
    407a:	4b07      	ldr	r3, [pc, #28]	; (4098 <usbdc_change_notify+0x24>)
    407c:	68dc      	ldr	r4, [r3, #12]

	while (cg != NULL) {
    407e:	b91c      	cbnz	r4, 4088 <usbdc_change_notify+0x14>
    4080:	bd70      	pop	{r4, r5, r6, pc}
		if (NULL != cg->cb) {
			cg->cb(change, value);
		}
		cg = cg->next;
    4082:	6824      	ldr	r4, [r4, #0]
	while (cg != NULL) {
    4084:	2c00      	cmp	r4, #0
    4086:	d0fb      	beq.n	4080 <usbdc_change_notify+0xc>
		if (NULL != cg->cb) {
    4088:	6863      	ldr	r3, [r4, #4]
    408a:	2b00      	cmp	r3, #0
    408c:	d0f9      	beq.n	4082 <usbdc_change_notify+0xe>
			cg->cb(change, value);
    408e:	4629      	mov	r1, r5
    4090:	4630      	mov	r0, r6
    4092:	4798      	blx	r3
    4094:	e7f5      	b.n	4082 <usbdc_change_notify+0xe>
    4096:	bf00      	nop
    4098:	2000090c 	.word	0x2000090c

0000409c <usbdc_request_handler>:
	}
}

/** Invoke all registered request callbacks until request handled. */
static int32_t usbdc_request_handler(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    409c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    409e:	4607      	mov	r7, r0
    40a0:	460e      	mov	r6, r1
    40a2:	4615      	mov	r5, r2
	struct usbdc_req_handler *h = (struct usbdc_req_handler *)usbdc.handlers.req_list.head;
    40a4:	4b0c      	ldr	r3, [pc, #48]	; (40d8 <usbdc_request_handler+0x3c>)
    40a6:	689c      	ldr	r4, [r3, #8]
	int32_t                   rc;

	while (h != NULL) {
    40a8:	b91c      	cbnz	r4, 40b2 <usbdc_request_handler+0x16>
				return -1;
			}
		}
		h = h->next;
	}
	return false;
    40aa:	2000      	movs	r0, #0
    40ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		h = h->next;
    40ae:	6824      	ldr	r4, [r4, #0]
	while (h != NULL) {
    40b0:	b16c      	cbz	r4, 40ce <usbdc_request_handler+0x32>
		if (NULL != h->cb) {
    40b2:	6863      	ldr	r3, [r4, #4]
    40b4:	2b00      	cmp	r3, #0
    40b6:	d0fa      	beq.n	40ae <usbdc_request_handler+0x12>
			rc = h->cb(ep, req, stage);
    40b8:	462a      	mov	r2, r5
    40ba:	4631      	mov	r1, r6
    40bc:	4638      	mov	r0, r7
    40be:	4798      	blx	r3
			if (0 == rc) {
    40c0:	b138      	cbz	r0, 40d2 <usbdc_request_handler+0x36>
			} else if (ERR_NOT_FOUND != rc) {
    40c2:	f110 0f0a 	cmn.w	r0, #10
    40c6:	d0f2      	beq.n	40ae <usbdc_request_handler+0x12>
				return -1;
    40c8:	f04f 30ff 	mov.w	r0, #4294967295
}
    40cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return false;
    40ce:	2000      	movs	r0, #0
    40d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				return true;
    40d2:	2001      	movs	r0, #1
    40d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    40d6:	bf00      	nop
    40d8:	2000090c 	.word	0x2000090c

000040dc <usbd_sof_cb>:

/**
 * \brief Callback invoked on USB device SOF
 */
static void usbd_sof_cb(void)
{
    40dc:	b510      	push	{r4, lr}
	struct usbdc_sof_handler *sof = (struct usbdc_sof_handler *)usbdc.handlers.sof_list.head;
    40de:	4b06      	ldr	r3, [pc, #24]	; (40f8 <usbd_sof_cb+0x1c>)
    40e0:	685c      	ldr	r4, [r3, #4]
	while (sof != NULL) {
    40e2:	b91c      	cbnz	r4, 40ec <usbd_sof_cb+0x10>
    40e4:	bd10      	pop	{r4, pc}
		sof = sof->next;
    40e6:	6824      	ldr	r4, [r4, #0]
	while (sof != NULL) {
    40e8:	2c00      	cmp	r4, #0
    40ea:	d0fb      	beq.n	40e4 <usbd_sof_cb+0x8>
		if (NULL != sof->cb) {
    40ec:	6863      	ldr	r3, [r4, #4]
    40ee:	2b00      	cmp	r3, #0
    40f0:	d0f9      	beq.n	40e6 <usbd_sof_cb+0xa>
			sof->cb();
    40f2:	4798      	blx	r3
    40f4:	e7f7      	b.n	40e6 <usbd_sof_cb+0xa>
    40f6:	bf00      	nop
    40f8:	2000090c 	.word	0x2000090c

000040fc <usbdc_cb_ctl_done>:
 * \return Data has error or not.
 * \retval true There is data error, protocol error.
 * \retval false There is no data error.
 */
static bool usbdc_cb_ctl_done(const uint8_t ep, const enum usb_xfer_code code, struct usb_req *req)
{
    40fc:	b510      	push	{r4, lr}
    40fe:	4614      	mov	r4, r2
	(void)ep;

	switch (code) {
    4100:	b119      	cbz	r1, 410a <usbdc_cb_ctl_done+0xe>
    4102:	2901      	cmp	r1, #1
    4104:	d026      	beq.n	4154 <usbdc_cb_ctl_done+0x58>
		return usbdc_ctrl_data_end(req);
	default:
		break;
	}
	return false;
}
    4106:	2000      	movs	r0, #0
    4108:	bd10      	pop	{r4, pc}
	if (req->bmRequestType != USB_REQT_TYPE_STANDARD) {
    410a:	7813      	ldrb	r3, [r2, #0]
    410c:	2b00      	cmp	r3, #0
    410e:	d1fa      	bne.n	4106 <usbdc_cb_ctl_done+0xa>
	switch (req->bRequest) {
    4110:	7853      	ldrb	r3, [r2, #1]
    4112:	2b05      	cmp	r3, #5
    4114:	d00f      	beq.n	4136 <usbdc_cb_ctl_done+0x3a>
    4116:	2b09      	cmp	r3, #9
    4118:	d1f5      	bne.n	4106 <usbdc_cb_ctl_done+0xa>
		usbdc.cfg_value = req->wValue;
    411a:	8852      	ldrh	r2, [r2, #2]
    411c:	4b10      	ldr	r3, [pc, #64]	; (4160 <usbdc_cb_ctl_done+0x64>)
    411e:	76da      	strb	r2, [r3, #27]
		usbdc.state     = req->wValue ? USBD_S_CONFIG : USBD_S_ADDRESS;
    4120:	8863      	ldrh	r3, [r4, #2]
    4122:	2b00      	cmp	r3, #0
    4124:	bf14      	ite	ne
    4126:	2104      	movne	r1, #4
    4128:	2103      	moveq	r1, #3
    412a:	4b0d      	ldr	r3, [pc, #52]	; (4160 <usbdc_cb_ctl_done+0x64>)
    412c:	7699      	strb	r1, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
    412e:	2001      	movs	r0, #1
    4130:	4b0c      	ldr	r3, [pc, #48]	; (4164 <usbdc_cb_ctl_done+0x68>)
    4132:	4798      	blx	r3
    4134:	e7e7      	b.n	4106 <usbdc_cb_ctl_done+0xa>
		usbdc_set_address(req->wValue);
    4136:	8850      	ldrh	r0, [r2, #2]
	usb_d_set_address(addr);
    4138:	b2c0      	uxtb	r0, r0
    413a:	4b0b      	ldr	r3, [pc, #44]	; (4168 <usbdc_cb_ctl_done+0x6c>)
    413c:	4798      	blx	r3
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
    413e:	8863      	ldrh	r3, [r4, #2]
    4140:	2b00      	cmp	r3, #0
    4142:	bf14      	ite	ne
    4144:	2103      	movne	r1, #3
    4146:	2102      	moveq	r1, #2
    4148:	4b05      	ldr	r3, [pc, #20]	; (4160 <usbdc_cb_ctl_done+0x64>)
    414a:	7699      	strb	r1, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
    414c:	2001      	movs	r0, #1
    414e:	4b05      	ldr	r3, [pc, #20]	; (4164 <usbdc_cb_ctl_done+0x68>)
    4150:	4798      	blx	r3
    4152:	e7d8      	b.n	4106 <usbdc_cb_ctl_done+0xa>
	usbdc_request_handler(0, req, USB_DATA_STAGE);
    4154:	2201      	movs	r2, #1
    4156:	4621      	mov	r1, r4
    4158:	2000      	movs	r0, #0
    415a:	4b04      	ldr	r3, [pc, #16]	; (416c <usbdc_cb_ctl_done+0x70>)
    415c:	4798      	blx	r3
		return usbdc_ctrl_data_end(req);
    415e:	e7d2      	b.n	4106 <usbdc_cb_ctl_done+0xa>
    4160:	2000090c 	.word	0x2000090c
    4164:	00004075 	.word	0x00004075
    4168:	000018d1 	.word	0x000018d1
    416c:	0000409d 	.word	0x0000409d

00004170 <usbdc_reset>:

/**
 * \brief USB Device Core Reset
 */
void usbdc_reset(void)
{
    4170:	b570      	push	{r4, r5, r6, lr}
	usbdc_unconfig();
    4172:	4b0d      	ldr	r3, [pc, #52]	; (41a8 <usbdc_reset+0x38>)
    4174:	4798      	blx	r3

	usbdc.state       = USBD_S_DEFAULT;
    4176:	4d0d      	ldr	r5, [pc, #52]	; (41ac <usbdc_reset+0x3c>)
    4178:	2602      	movs	r6, #2
    417a:	76ae      	strb	r6, [r5, #26]
	usbdc.cfg_value   = 0;
    417c:	2400      	movs	r4, #0
    417e:	76ec      	strb	r4, [r5, #27]
	usbdc.ifc_alt_map = 0;
    4180:	776c      	strb	r4, [r5, #29]

	// Setup EP0
	usb_d_ep_deinit(0);
    4182:	4620      	mov	r0, r4
    4184:	4b0a      	ldr	r3, [pc, #40]	; (41b0 <usbdc_reset+0x40>)
    4186:	4798      	blx	r3
	usb_d_ep0_init(usbdc.ctrl_size);
    4188:	7f28      	ldrb	r0, [r5, #28]
    418a:	4b0a      	ldr	r3, [pc, #40]	; (41b4 <usbdc_reset+0x44>)
    418c:	4798      	blx	r3
	usb_d_ep_register_callback(0, USB_D_EP_CB_SETUP, (FUNC_PTR)usbdc_cb_ctl_req);
    418e:	4a0a      	ldr	r2, [pc, #40]	; (41b8 <usbdc_reset+0x48>)
    4190:	4621      	mov	r1, r4
    4192:	4620      	mov	r0, r4
    4194:	4d09      	ldr	r5, [pc, #36]	; (41bc <usbdc_reset+0x4c>)
    4196:	47a8      	blx	r5
	usb_d_ep_register_callback(0, USB_D_EP_CB_XFER, (FUNC_PTR)usbdc_cb_ctl_done);
    4198:	4a09      	ldr	r2, [pc, #36]	; (41c0 <usbdc_reset+0x50>)
    419a:	4631      	mov	r1, r6
    419c:	4620      	mov	r0, r4
    419e:	47a8      	blx	r5
	usb_d_ep_enable(0);
    41a0:	4620      	mov	r0, r4
    41a2:	4b08      	ldr	r3, [pc, #32]	; (41c4 <usbdc_reset+0x54>)
    41a4:	4798      	blx	r3
    41a6:	bd70      	pop	{r4, r5, r6, pc}
    41a8:	00004051 	.word	0x00004051
    41ac:	2000090c 	.word	0x2000090c
    41b0:	00001945 	.word	0x00001945
    41b4:	00001931 	.word	0x00001931
    41b8:	00004209 	.word	0x00004209
    41bc:	00001b45 	.word	0x00001b45
    41c0:	000040fd 	.word	0x000040fd
    41c4:	00001971 	.word	0x00001971

000041c8 <usbd_event_cb>:
 * \brief Callback invoked on USB device events
 * \param[in] ev Event code.
 * \param[in] param Event parameter for event handling.
 */
static void usbd_event_cb(const enum usb_event ev, const uint32_t param)
{
    41c8:	b508      	push	{r3, lr}
	(void)param;

	switch (ev) {
    41ca:	b110      	cbz	r0, 41d2 <usbd_event_cb+0xa>
    41cc:	2801      	cmp	r0, #1
    41ce:	d004      	beq.n	41da <usbd_event_cb+0x12>
    41d0:	bd08      	pop	{r3, pc}
	case USB_EV_VBUS:
		usbdc_change_notify(USBDC_C_CONN, param);
    41d2:	2000      	movs	r0, #0
    41d4:	4b02      	ldr	r3, [pc, #8]	; (41e0 <usbd_event_cb+0x18>)
    41d6:	4798      	blx	r3
		break;
    41d8:	bd08      	pop	{r3, pc}

	case USB_EV_RESET:
		usbdc_reset();
    41da:	4b02      	ldr	r3, [pc, #8]	; (41e4 <usbd_event_cb+0x1c>)
    41dc:	4798      	blx	r3
    41de:	bd08      	pop	{r3, pc}
    41e0:	00004075 	.word	0x00004075
    41e4:	00004171 	.word	0x00004171

000041e8 <usbdc_xfer>:

/**
 * \brief Issue USB device transfer
 */
int32_t usbdc_xfer(uint8_t ep, uint8_t *buf, uint32_t size, bool zlp)
{
    41e8:	b500      	push	{lr}
    41ea:	b085      	sub	sp, #20
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    41ec:	9101      	str	r1, [sp, #4]
    41ee:	9202      	str	r2, [sp, #8]
    41f0:	f88d 000c 	strb.w	r0, [sp, #12]
    41f4:	f88d 300d 	strb.w	r3, [sp, #13]
	return usb_d_ep_transfer(&xfer);
    41f8:	a801      	add	r0, sp, #4
    41fa:	4b02      	ldr	r3, [pc, #8]	; (4204 <usbdc_xfer+0x1c>)
    41fc:	4798      	blx	r3
}
    41fe:	b005      	add	sp, #20
    4200:	f85d fb04 	ldr.w	pc, [sp], #4
    4204:	000019bd 	.word	0x000019bd

00004208 <usbdc_cb_ctl_req>:
{
    4208:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    420c:	b083      	sub	sp, #12
    420e:	4605      	mov	r5, r0
    4210:	460c      	mov	r4, r1
	switch (usbdc_request_handler(ep, req, USB_SETUP_STAGE)) {
    4212:	2200      	movs	r2, #0
    4214:	4b9b      	ldr	r3, [pc, #620]	; (4484 <usbdc_cb_ctl_req+0x27c>)
    4216:	4798      	blx	r3
    4218:	f1b0 3fff 	cmp.w	r0, #4294967295
    421c:	d00b      	beq.n	4236 <usbdc_cb_ctl_req+0x2e>
    421e:	2801      	cmp	r0, #1
    4220:	f000 81e3 	beq.w	45ea <usbdc_cb_ctl_req+0x3e2>
	switch (req->bmRequestType & (USB_REQT_TYPE_MASK | USB_REQT_DIR_IN)) {
    4224:	7823      	ldrb	r3, [r4, #0]
    4226:	f013 02e0 	ands.w	r2, r3, #224	; 0xe0
    422a:	d008      	beq.n	423e <usbdc_cb_ctl_req+0x36>
    422c:	2a80      	cmp	r2, #128	; 0x80
    422e:	f000 80f4 	beq.w	441a <usbdc_cb_ctl_req+0x212>
		return false;
    4232:	2000      	movs	r0, #0
    4234:	e000      	b.n	4238 <usbdc_cb_ctl_req+0x30>
		return false;
    4236:	2000      	movs	r0, #0
}
    4238:	b003      	add	sp, #12
    423a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	switch (req->bRequest) {
    423e:	7862      	ldrb	r2, [r4, #1]
    4240:	3a01      	subs	r2, #1
    4242:	2a0a      	cmp	r2, #10
    4244:	f200 81d3 	bhi.w	45ee <usbdc_cb_ctl_req+0x3e6>
    4248:	e8df f012 	tbh	[pc, r2, lsl #1]
    424c:	01d10060 	.word	0x01d10060
    4250:	01d10076 	.word	0x01d10076
    4254:	01d1000b 	.word	0x01d1000b
    4258:	01d101d1 	.word	0x01d101d1
    425c:	01d10015 	.word	0x01d10015
    4260:	008c      	.short	0x008c
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    4262:	2301      	movs	r3, #1
    4264:	2200      	movs	r2, #0
    4266:	4611      	mov	r1, r2
    4268:	4628      	mov	r0, r5
    426a:	4c87      	ldr	r4, [pc, #540]	; (4488 <usbdc_cb_ctl_req+0x280>)
    426c:	47a0      	blx	r4
    426e:	fab0 f080 	clz	r0, r0
    4272:	0940      	lsrs	r0, r0, #5
    4274:	e7e0      	b.n	4238 <usbdc_cb_ctl_req+0x30>
		if (!usbdc_set_config(req->wValue)) {
    4276:	8862      	ldrh	r2, [r4, #2]
    4278:	b2d2      	uxtb	r2, r2
	if (cfg_value == 0) {
    427a:	b1ca      	cbz	r2, 42b0 <usbdc_cb_ctl_req+0xa8>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, cfg_value);
    427c:	4b83      	ldr	r3, [pc, #524]	; (448c <usbdc_cb_ctl_req+0x284>)
    427e:	681b      	ldr	r3, [r3, #0]
    4280:	6859      	ldr	r1, [r3, #4]
    4282:	6818      	ldr	r0, [r3, #0]
    4284:	4b82      	ldr	r3, [pc, #520]	; (4490 <usbdc_cb_ctl_req+0x288>)
    4286:	4798      	blx	r3
	if (NULL == cfg_desc) {
    4288:	2800      	cmp	r0, #0
    428a:	f000 81be 	beq.w	460a <usbdc_cb_ctl_req+0x402>
	return (ptr[0] + (ptr[1] << 8));
    428e:	78c2      	ldrb	r2, [r0, #3]
    4290:	7881      	ldrb	r1, [r0, #2]
    4292:	eb01 2102 	add.w	r1, r1, r2, lsl #8
	desc.eod  = cfg_desc + total_len;
    4296:	fa10 f181 	uxtah	r1, r0, r1
    429a:	9101      	str	r1, [sp, #4]
	desc.sod  = usb_find_desc(cfg_desc, desc.eod, USB_DT_INTERFACE);
    429c:	2204      	movs	r2, #4
    429e:	4b7d      	ldr	r3, [pc, #500]	; (4494 <usbdc_cb_ctl_req+0x28c>)
    42a0:	4798      	blx	r3
    42a2:	9000      	str	r0, [sp, #0]
	while (NULL != desc.sod) {
    42a4:	b130      	cbz	r0, 42b4 <usbdc_cb_ctl_req+0xac>
    42a6:	24ff      	movs	r4, #255	; 0xff
			func       = (struct usbdf_driver *)usbdc.func_list.head;
    42a8:	f8df 81e0 	ldr.w	r8, [pc, #480]	; 448c <usbdc_cb_ctl_req+0x284>
		desc.sod = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    42ac:	4f79      	ldr	r7, [pc, #484]	; (4494 <usbdc_cb_ctl_req+0x28c>)
    42ae:	e018      	b.n	42e2 <usbdc_cb_ctl_req+0xda>
		usbdc_unconfig();
    42b0:	4b79      	ldr	r3, [pc, #484]	; (4498 <usbdc_cb_ctl_req+0x290>)
    42b2:	4798      	blx	r3
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    42b4:	2301      	movs	r3, #1
    42b6:	2200      	movs	r2, #0
    42b8:	4611      	mov	r1, r2
    42ba:	4628      	mov	r0, r5
    42bc:	4c72      	ldr	r4, [pc, #456]	; (4488 <usbdc_cb_ctl_req+0x280>)
    42be:	47a0      	blx	r4
    42c0:	fab0 f080 	clz	r0, r0
    42c4:	0940      	lsrs	r0, r0, #5
    42c6:	e7b7      	b.n	4238 <usbdc_cb_ctl_req+0x30>
			last_iface = desc.sod[2];
    42c8:	464c      	mov	r4, r9
    42ca:	e000      	b.n	42ce <usbdc_cb_ctl_req+0xc6>
    42cc:	464c      	mov	r4, r9
		desc.sod = usb_desc_next(desc.sod);
    42ce:	9800      	ldr	r0, [sp, #0]
	return (desc + usb_desc_len(desc));
    42d0:	7803      	ldrb	r3, [r0, #0]
    42d2:	4418      	add	r0, r3
    42d4:	9000      	str	r0, [sp, #0]
		desc.sod = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    42d6:	2204      	movs	r2, #4
    42d8:	9901      	ldr	r1, [sp, #4]
    42da:	47b8      	blx	r7
    42dc:	9000      	str	r0, [sp, #0]
	while (NULL != desc.sod) {
    42de:	2800      	cmp	r0, #0
    42e0:	d0e8      	beq.n	42b4 <usbdc_cb_ctl_req+0xac>
		if (last_iface != desc.sod[2] /* bInterfaceNumber */) {
    42e2:	f890 9002 	ldrb.w	r9, [r0, #2]
    42e6:	45a1      	cmp	r9, r4
    42e8:	d0f1      	beq.n	42ce <usbdc_cb_ctl_req+0xc6>
			func       = (struct usbdf_driver *)usbdc.func_list.head;
    42ea:	f8d8 4010 	ldr.w	r4, [r8, #16]
			while (NULL != func) {
    42ee:	2c00      	cmp	r4, #0
    42f0:	d0ea      	beq.n	42c8 <usbdc_cb_ctl_req+0xc0>
				if (func->ctrl(func, USBDF_ENABLE, &desc)) {
    42f2:	2600      	movs	r6, #0
    42f4:	6863      	ldr	r3, [r4, #4]
    42f6:	466a      	mov	r2, sp
    42f8:	4631      	mov	r1, r6
    42fa:	4620      	mov	r0, r4
    42fc:	4798      	blx	r3
    42fe:	2800      	cmp	r0, #0
    4300:	d0e4      	beq.n	42cc <usbdc_cb_ctl_req+0xc4>
					func = func->next;
    4302:	6824      	ldr	r4, [r4, #0]
			while (NULL != func) {
    4304:	2c00      	cmp	r4, #0
    4306:	d1f5      	bne.n	42f4 <usbdc_cb_ctl_req+0xec>
			last_iface = desc.sod[2];
    4308:	464c      	mov	r4, r9
    430a:	e7e0      	b.n	42ce <usbdc_cb_ctl_req+0xc6>
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    430c:	f003 031f 	and.w	r3, r3, #31
    4310:	2b02      	cmp	r3, #2
    4312:	f040 816e 	bne.w	45f2 <usbdc_cb_ctl_req+0x3ea>
		if (req->wLength != 0) {
    4316:	88e3      	ldrh	r3, [r4, #6]
    4318:	b10b      	cbz	r3, 431e <usbdc_cb_ctl_req+0x116>
			return false;
    431a:	2000      	movs	r0, #0
    431c:	e78c      	b.n	4238 <usbdc_cb_ctl_req+0x30>
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_CLR);
    431e:	88a0      	ldrh	r0, [r4, #4]
    4320:	2100      	movs	r1, #0
    4322:	b2c0      	uxtb	r0, r0
    4324:	4b5d      	ldr	r3, [pc, #372]	; (449c <usbdc_cb_ctl_req+0x294>)
    4326:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
    4328:	2301      	movs	r3, #1
    432a:	2200      	movs	r2, #0
    432c:	4611      	mov	r1, r2
    432e:	4628      	mov	r0, r5
    4330:	4c55      	ldr	r4, [pc, #340]	; (4488 <usbdc_cb_ctl_req+0x280>)
    4332:	47a0      	blx	r4
		return true;
    4334:	2001      	movs	r0, #1
    4336:	e77f      	b.n	4238 <usbdc_cb_ctl_req+0x30>
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    4338:	f003 031f 	and.w	r3, r3, #31
    433c:	2b02      	cmp	r3, #2
    433e:	f040 815a 	bne.w	45f6 <usbdc_cb_ctl_req+0x3ee>
		if (req->wLength != 0) {
    4342:	88e3      	ldrh	r3, [r4, #6]
    4344:	b10b      	cbz	r3, 434a <usbdc_cb_ctl_req+0x142>
			return false;
    4346:	2000      	movs	r0, #0
    4348:	e776      	b.n	4238 <usbdc_cb_ctl_req+0x30>
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_SET);
    434a:	88a0      	ldrh	r0, [r4, #4]
    434c:	2101      	movs	r1, #1
    434e:	b2c0      	uxtb	r0, r0
    4350:	4b52      	ldr	r3, [pc, #328]	; (449c <usbdc_cb_ctl_req+0x294>)
    4352:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
    4354:	2301      	movs	r3, #1
    4356:	2200      	movs	r2, #0
    4358:	4611      	mov	r1, r2
    435a:	4628      	mov	r0, r5
    435c:	4c4a      	ldr	r4, [pc, #296]	; (4488 <usbdc_cb_ctl_req+0x280>)
    435e:	47a0      	blx	r4
		return true;
    4360:	2001      	movs	r0, #1
    4362:	e769      	b.n	4238 <usbdc_cb_ctl_req+0x30>
		return usbdc_set_interface(req->wValue, req->wIndex);
    4364:	8866      	ldrh	r6, [r4, #2]
    4366:	88a4      	ldrh	r4, [r4, #4]
		ifc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, usbdc.cfg_value);
    4368:	4a48      	ldr	r2, [pc, #288]	; (448c <usbdc_cb_ctl_req+0x284>)
    436a:	6813      	ldr	r3, [r2, #0]
    436c:	7ed2      	ldrb	r2, [r2, #27]
    436e:	6859      	ldr	r1, [r3, #4]
    4370:	6818      	ldr	r0, [r3, #0]
    4372:	4b47      	ldr	r3, [pc, #284]	; (4490 <usbdc_cb_ctl_req+0x288>)
    4374:	4798      	blx	r3
	if (NULL == ifc) {
    4376:	2800      	cmp	r0, #0
    4378:	d045      	beq.n	4406 <usbdc_cb_ctl_req+0x1fe>
	desc.sod = ifc;
    437a:	9000      	str	r0, [sp, #0]
	return (ptr[0] + (ptr[1] << 8));
    437c:	78c2      	ldrb	r2, [r0, #3]
    437e:	7881      	ldrb	r1, [r0, #2]
    4380:	eb01 2102 	add.w	r1, r1, r2, lsl #8
	desc.eod = ifc + usb_cfg_desc_total_len(ifc);
    4384:	fa10 f181 	uxtah	r1, r0, r1
    4388:	9101      	str	r1, [sp, #4]
	if (NULL == (ifc = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE))) {
    438a:	2204      	movs	r2, #4
    438c:	4b41      	ldr	r3, [pc, #260]	; (4494 <usbdc_cb_ctl_req+0x28c>)
    438e:	4798      	blx	r3
    4390:	4603      	mov	r3, r0
    4392:	2800      	cmp	r0, #0
    4394:	d039      	beq.n	440a <usbdc_cb_ctl_req+0x202>
		ifc      = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    4396:	2704      	movs	r7, #4
    4398:	4d3e      	ldr	r5, [pc, #248]	; (4494 <usbdc_cb_ctl_req+0x28c>)
    439a:	e008      	b.n	43ae <usbdc_cb_ctl_req+0x1a6>
		desc.sod = usb_desc_next(desc.sod);
    439c:	9800      	ldr	r0, [sp, #0]
	return (desc + usb_desc_len(desc));
    439e:	7803      	ldrb	r3, [r0, #0]
    43a0:	4418      	add	r0, r3
    43a2:	9000      	str	r0, [sp, #0]
		ifc      = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    43a4:	463a      	mov	r2, r7
    43a6:	9901      	ldr	r1, [sp, #4]
    43a8:	47a8      	blx	r5
		if (NULL == ifc) {
    43aa:	4603      	mov	r3, r0
    43ac:	b378      	cbz	r0, 440e <usbdc_cb_ctl_req+0x206>
	while (ifc[2] != ifc_id || ifc[3] != alt_set) {
    43ae:	789a      	ldrb	r2, [r3, #2]
    43b0:	42a2      	cmp	r2, r4
    43b2:	d1f3      	bne.n	439c <usbdc_cb_ctl_req+0x194>
    43b4:	78da      	ldrb	r2, [r3, #3]
    43b6:	42b2      	cmp	r2, r6
    43b8:	d1f0      	bne.n	439c <usbdc_cb_ctl_req+0x194>
	desc.sod = ifc;
    43ba:	9300      	str	r3, [sp, #0]
	func     = (struct usbdf_driver *)usbdc.func_list.head;
    43bc:	4b33      	ldr	r3, [pc, #204]	; (448c <usbdc_cb_ctl_req+0x284>)
    43be:	691d      	ldr	r5, [r3, #16]
	while (NULL != func) {
    43c0:	b33d      	cbz	r5, 4412 <usbdc_cb_ctl_req+0x20a>
		if (func->ctrl(func, USBDF_DISABLE, &desc)) {
    43c2:	2701      	movs	r7, #1
    43c4:	686b      	ldr	r3, [r5, #4]
    43c6:	466a      	mov	r2, sp
    43c8:	4639      	mov	r1, r7
    43ca:	4628      	mov	r0, r5
    43cc:	4798      	blx	r3
    43ce:	b120      	cbz	r0, 43da <usbdc_cb_ctl_req+0x1d2>
			func = func->next;
    43d0:	682d      	ldr	r5, [r5, #0]
	while (NULL != func) {
    43d2:	2d00      	cmp	r5, #0
    43d4:	d1f6      	bne.n	43c4 <usbdc_cb_ctl_req+0x1bc>
	return false;
    43d6:	2000      	movs	r0, #0
    43d8:	e72e      	b.n	4238 <usbdc_cb_ctl_req+0x30>
		} else if (ERR_NONE == func->ctrl(func, USBDF_ENABLE, &desc)) {
    43da:	686b      	ldr	r3, [r5, #4]
    43dc:	466a      	mov	r2, sp
    43de:	2100      	movs	r1, #0
    43e0:	4628      	mov	r0, r5
    43e2:	4798      	blx	r3
    43e4:	b9b8      	cbnz	r0, 4416 <usbdc_cb_ctl_req+0x20e>
			if (alt_set) {
    43e6:	b136      	cbz	r6, 43f6 <usbdc_cb_ctl_req+0x1ee>
				usbdc.ifc_alt_map |= 1 << ifc_id;
    43e8:	4a28      	ldr	r2, [pc, #160]	; (448c <usbdc_cb_ctl_req+0x284>)
    43ea:	2301      	movs	r3, #1
    43ec:	fa03 f404 	lsl.w	r4, r3, r4
    43f0:	7f53      	ldrb	r3, [r2, #29]
    43f2:	4323      	orrs	r3, r4
    43f4:	7753      	strb	r3, [r2, #29]
			usbdc_xfer(0, NULL, 0, 0);
    43f6:	2300      	movs	r3, #0
    43f8:	461a      	mov	r2, r3
    43fa:	4619      	mov	r1, r3
    43fc:	4618      	mov	r0, r3
    43fe:	4c22      	ldr	r4, [pc, #136]	; (4488 <usbdc_cb_ctl_req+0x280>)
    4400:	47a0      	blx	r4
			return true;
    4402:	2001      	movs	r0, #1
    4404:	e718      	b.n	4238 <usbdc_cb_ctl_req+0x30>
		return false;
    4406:	2000      	movs	r0, #0
    4408:	e716      	b.n	4238 <usbdc_cb_ctl_req+0x30>
		return false;
    440a:	2000      	movs	r0, #0
    440c:	e714      	b.n	4238 <usbdc_cb_ctl_req+0x30>
			return false;
    440e:	2000      	movs	r0, #0
    4410:	e712      	b.n	4238 <usbdc_cb_ctl_req+0x30>
	return false;
    4412:	2000      	movs	r0, #0
    4414:	e710      	b.n	4238 <usbdc_cb_ctl_req+0x30>
			return false;
    4416:	2000      	movs	r0, #0
    4418:	e70e      	b.n	4238 <usbdc_cb_ctl_req+0x30>
	switch (req->bRequest) {
    441a:	7862      	ldrb	r2, [r4, #1]
    441c:	2a0a      	cmp	r2, #10
    441e:	f200 80ec 	bhi.w	45fa <usbdc_cb_ctl_req+0x3f2>
    4422:	e8df f012 	tbh	[pc, r2, lsl #1]
    4426:	008e      	.short	0x008e
    4428:	00ea00ea 	.word	0x00ea00ea
    442c:	00ea00ea 	.word	0x00ea00ea
    4430:	000b00ea 	.word	0x000b00ea
    4434:	008200ea 	.word	0x008200ea
    4438:	00b200ea 	.word	0x00b200ea
	uint8_t type = (uint8_t)(req->wValue >> 8);
    443c:	8862      	ldrh	r2, [r4, #2]
	switch (type) {
    443e:	0a13      	lsrs	r3, r2, #8
    4440:	2b02      	cmp	r3, #2
    4442:	d02d      	beq.n	44a0 <usbdc_cb_ctl_req+0x298>
    4444:	2b03      	cmp	r3, #3
    4446:	d050      	beq.n	44ea <usbdc_cb_ctl_req+0x2e2>
    4448:	2b01      	cmp	r3, #1
    444a:	d001      	beq.n	4450 <usbdc_cb_ctl_req+0x248>
	return false;
    444c:	2000      	movs	r0, #0
    444e:	e6f3      	b.n	4238 <usbdc_cb_ctl_req+0x30>
	uint16_t length   = req->wLength;
    4450:	88e2      	ldrh	r2, [r4, #6]
    4452:	2a12      	cmp	r2, #18
    4454:	bf28      	it	cs
    4456:	2212      	movcs	r2, #18
    4458:	4614      	mov	r4, r2
		dev_desc = usb_find_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, USB_DT_DEVICE);
    445a:	4b0c      	ldr	r3, [pc, #48]	; (448c <usbdc_cb_ctl_req+0x284>)
    445c:	681b      	ldr	r3, [r3, #0]
    445e:	2201      	movs	r2, #1
    4460:	6859      	ldr	r1, [r3, #4]
    4462:	6818      	ldr	r0, [r3, #0]
    4464:	4b0b      	ldr	r3, [pc, #44]	; (4494 <usbdc_cb_ctl_req+0x28c>)
    4466:	4798      	blx	r3
	if (!dev_desc) {
    4468:	4601      	mov	r1, r0
    446a:	2800      	cmp	r0, #0
    446c:	f000 80c7 	beq.w	45fe <usbdc_cb_ctl_req+0x3f6>
	if (ERR_NONE != usbdc_xfer(ep, dev_desc, length, false)) {
    4470:	2300      	movs	r3, #0
    4472:	4622      	mov	r2, r4
    4474:	4628      	mov	r0, r5
    4476:	4c04      	ldr	r4, [pc, #16]	; (4488 <usbdc_cb_ctl_req+0x280>)
    4478:	47a0      	blx	r4
    447a:	fab0 f080 	clz	r0, r0
    447e:	0940      	lsrs	r0, r0, #5
    4480:	e6da      	b.n	4238 <usbdc_cb_ctl_req+0x30>
    4482:	bf00      	nop
    4484:	0000409d 	.word	0x0000409d
    4488:	000041e9 	.word	0x000041e9
    448c:	2000090c 	.word	0x2000090c
    4490:	000047ad 	.word	0x000047ad
    4494:	0000472d 	.word	0x0000472d
    4498:	00004051 	.word	0x00004051
    449c:	00001add 	.word	0x00001add
	uint16_t length   = req->wLength;
    44a0:	88e4      	ldrh	r4, [r4, #6]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    44a2:	4b5b      	ldr	r3, [pc, #364]	; (4610 <usbdc_cb_ctl_req+0x408>)
    44a4:	7f1e      	ldrb	r6, [r3, #28]
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index + 1);
    44a6:	681b      	ldr	r3, [r3, #0]
    44a8:	3201      	adds	r2, #1
    44aa:	b2d2      	uxtb	r2, r2
    44ac:	6859      	ldr	r1, [r3, #4]
    44ae:	6818      	ldr	r0, [r3, #0]
    44b0:	4b58      	ldr	r3, [pc, #352]	; (4614 <usbdc_cb_ctl_req+0x40c>)
    44b2:	4798      	blx	r3
	if (NULL == cfg_desc) {
    44b4:	4601      	mov	r1, r0
    44b6:	2800      	cmp	r0, #0
    44b8:	f000 80a3 	beq.w	4602 <usbdc_cb_ctl_req+0x3fa>
	return (ptr[0] + (ptr[1] << 8));
    44bc:	78c3      	ldrb	r3, [r0, #3]
    44be:	7882      	ldrb	r2, [r0, #2]
    44c0:	eb02 2203 	add.w	r2, r2, r3, lsl #8
    44c4:	b292      	uxth	r2, r2
	if (length <= total_len) {
    44c6:	4294      	cmp	r4, r2
    44c8:	d90d      	bls.n	44e6 <usbdc_cb_ctl_req+0x2de>
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    44ca:	3e01      	subs	r6, #1
    44cc:	4226      	tst	r6, r4
    44ce:	bf0c      	ite	eq
    44d0:	2301      	moveq	r3, #1
    44d2:	2300      	movne	r3, #0
		length = total_len;
    44d4:	4614      	mov	r4, r2
	if (ERR_NONE != usbdc_xfer(ep, cfg_desc, length, need_zlp)) {
    44d6:	4622      	mov	r2, r4
    44d8:	4628      	mov	r0, r5
    44da:	4c4f      	ldr	r4, [pc, #316]	; (4618 <usbdc_cb_ctl_req+0x410>)
    44dc:	47a0      	blx	r4
    44de:	fab0 f080 	clz	r0, r0
    44e2:	0940      	lsrs	r0, r0, #5
    44e4:	e6a8      	b.n	4238 <usbdc_cb_ctl_req+0x30>
		need_zlp = false;
    44e6:	2300      	movs	r3, #0
    44e8:	e7f5      	b.n	44d6 <usbdc_cb_ctl_req+0x2ce>
	uint16_t length   = req->wLength;
    44ea:	88e4      	ldrh	r4, [r4, #6]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    44ec:	4b48      	ldr	r3, [pc, #288]	; (4610 <usbdc_cb_ctl_req+0x408>)
    44ee:	7f1e      	ldrb	r6, [r3, #28]
	str_desc = usb_find_str_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index);
    44f0:	681b      	ldr	r3, [r3, #0]
    44f2:	b2d2      	uxtb	r2, r2
    44f4:	6859      	ldr	r1, [r3, #4]
    44f6:	6818      	ldr	r0, [r3, #0]
    44f8:	4b48      	ldr	r3, [pc, #288]	; (461c <usbdc_cb_ctl_req+0x414>)
    44fa:	4798      	blx	r3
	if (NULL == str_desc) {
    44fc:	4601      	mov	r1, r0
    44fe:	2800      	cmp	r0, #0
    4500:	f000 8081 	beq.w	4606 <usbdc_cb_ctl_req+0x3fe>
	if (length <= str_desc[0]) {
    4504:	7802      	ldrb	r2, [r0, #0]
    4506:	4294      	cmp	r4, r2
    4508:	d90d      	bls.n	4526 <usbdc_cb_ctl_req+0x31e>
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    450a:	3e01      	subs	r6, #1
    450c:	4226      	tst	r6, r4
    450e:	bf0c      	ite	eq
    4510:	2301      	moveq	r3, #1
    4512:	2300      	movne	r3, #0
		length = str_desc[0];
    4514:	4614      	mov	r4, r2
	if (ERR_NONE != usbdc_xfer(ep, str_desc, length, need_zlp)) {
    4516:	4622      	mov	r2, r4
    4518:	4628      	mov	r0, r5
    451a:	4c3f      	ldr	r4, [pc, #252]	; (4618 <usbdc_cb_ctl_req+0x410>)
    451c:	47a0      	blx	r4
    451e:	fab0 f080 	clz	r0, r0
    4522:	0940      	lsrs	r0, r0, #5
    4524:	e688      	b.n	4238 <usbdc_cb_ctl_req+0x30>
		need_zlp = false;
    4526:	2300      	movs	r3, #0
    4528:	e7f5      	b.n	4516 <usbdc_cb_ctl_req+0x30e>
		*(uint8_t *)usbdc.ctrl_buf = usbdc.cfg_value;
    452a:	4939      	ldr	r1, [pc, #228]	; (4610 <usbdc_cb_ctl_req+0x408>)
    452c:	694b      	ldr	r3, [r1, #20]
    452e:	7eca      	ldrb	r2, [r1, #27]
    4530:	701a      	strb	r2, [r3, #0]
		usbdc_xfer(ep, usbdc.ctrl_buf, 1, false);
    4532:	2300      	movs	r3, #0
    4534:	2201      	movs	r2, #1
    4536:	6949      	ldr	r1, [r1, #20]
    4538:	4628      	mov	r0, r5
    453a:	4c37      	ldr	r4, [pc, #220]	; (4618 <usbdc_cb_ctl_req+0x410>)
    453c:	47a0      	blx	r4
		return true;
    453e:	2001      	movs	r0, #1
    4540:	e67a      	b.n	4238 <usbdc_cb_ctl_req+0x30>
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    4542:	f003 031f 	and.w	r3, r3, #31
    4546:	2b01      	cmp	r3, #1
    4548:	d903      	bls.n	4552 <usbdc_cb_ctl_req+0x34a>
    454a:	2b02      	cmp	r3, #2
    454c:	d010      	beq.n	4570 <usbdc_cb_ctl_req+0x368>
		return false;
    454e:	2000      	movs	r0, #0
    4550:	e672      	b.n	4238 <usbdc_cb_ctl_req+0x30>
		st = 0;
    4552:	2300      	movs	r3, #0
    4554:	9300      	str	r3, [sp, #0]
	memcpy(usbdc.ctrl_buf, &st, 2);
    4556:	492e      	ldr	r1, [pc, #184]	; (4610 <usbdc_cb_ctl_req+0x408>)
    4558:	694b      	ldr	r3, [r1, #20]
    455a:	f8bd 2000 	ldrh.w	r2, [sp]
    455e:	801a      	strh	r2, [r3, #0]
	usbdc_xfer(ep, usbdc.ctrl_buf, 2, false);
    4560:	2300      	movs	r3, #0
    4562:	2202      	movs	r2, #2
    4564:	6949      	ldr	r1, [r1, #20]
    4566:	4628      	mov	r0, r5
    4568:	4c2b      	ldr	r4, [pc, #172]	; (4618 <usbdc_cb_ctl_req+0x410>)
    456a:	47a0      	blx	r4
	return true;
    456c:	2001      	movs	r0, #1
    456e:	e663      	b.n	4238 <usbdc_cb_ctl_req+0x30>
		st = usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_GET);
    4570:	88a0      	ldrh	r0, [r4, #4]
    4572:	2102      	movs	r1, #2
    4574:	b2c0      	uxtb	r0, r0
    4576:	4b2a      	ldr	r3, [pc, #168]	; (4620 <usbdc_cb_ctl_req+0x418>)
    4578:	4798      	blx	r3
		if (st < 0) {
    457a:	2800      	cmp	r0, #0
    457c:	db03      	blt.n	4586 <usbdc_cb_ctl_req+0x37e>
		st = st & 0x1;
    457e:	f000 0001 	and.w	r0, r0, #1
    4582:	9000      	str	r0, [sp, #0]
    4584:	e7e7      	b.n	4556 <usbdc_cb_ctl_req+0x34e>
			return false;
    4586:	2000      	movs	r0, #0
    4588:	e656      	b.n	4238 <usbdc_cb_ctl_req+0x30>
	if (!(usbdc.ifc_alt_map & (1 << req->wIndex))) {
    458a:	4b21      	ldr	r3, [pc, #132]	; (4610 <usbdc_cb_ctl_req+0x408>)
    458c:	7f5b      	ldrb	r3, [r3, #29]
    458e:	88a2      	ldrh	r2, [r4, #4]
    4590:	4113      	asrs	r3, r2
    4592:	f013 0f01 	tst.w	r3, #1
    4596:	d012      	beq.n	45be <usbdc_cb_ctl_req+0x3b6>
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    4598:	4b1d      	ldr	r3, [pc, #116]	; (4610 <usbdc_cb_ctl_req+0x408>)
    459a:	691d      	ldr	r5, [r3, #16]
	return false;
    459c:	2000      	movs	r0, #0
	while (NULL != func) {
    459e:	2d00      	cmp	r5, #0
    45a0:	f43f ae4a 	beq.w	4238 <usbdc_cb_ctl_req+0x30>
		if (0 > (rc = func->ctrl(func, USBDF_GET_IFACE, req))) {
    45a4:	2602      	movs	r6, #2
    45a6:	686b      	ldr	r3, [r5, #4]
    45a8:	4622      	mov	r2, r4
    45aa:	4631      	mov	r1, r6
    45ac:	4628      	mov	r0, r5
    45ae:	4798      	blx	r3
    45b0:	2800      	cmp	r0, #0
    45b2:	da0f      	bge.n	45d4 <usbdc_cb_ctl_req+0x3cc>
			func = func->next;
    45b4:	682d      	ldr	r5, [r5, #0]
	while (NULL != func) {
    45b6:	2d00      	cmp	r5, #0
    45b8:	d1f5      	bne.n	45a6 <usbdc_cb_ctl_req+0x39e>
	return false;
    45ba:	2000      	movs	r0, #0
    45bc:	e63c      	b.n	4238 <usbdc_cb_ctl_req+0x30>
		usbdc.ctrl_buf[0] = 0;
    45be:	4914      	ldr	r1, [pc, #80]	; (4610 <usbdc_cb_ctl_req+0x408>)
    45c0:	694b      	ldr	r3, [r1, #20]
    45c2:	2000      	movs	r0, #0
    45c4:	7018      	strb	r0, [r3, #0]
		usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    45c6:	4603      	mov	r3, r0
    45c8:	2201      	movs	r2, #1
    45ca:	6949      	ldr	r1, [r1, #20]
    45cc:	4c12      	ldr	r4, [pc, #72]	; (4618 <usbdc_cb_ctl_req+0x410>)
    45ce:	47a0      	blx	r4
		return true;
    45d0:	2001      	movs	r0, #1
    45d2:	e631      	b.n	4238 <usbdc_cb_ctl_req+0x30>
			usbdc.ctrl_buf[0] = (uint8_t)rc;
    45d4:	490e      	ldr	r1, [pc, #56]	; (4610 <usbdc_cb_ctl_req+0x408>)
    45d6:	694b      	ldr	r3, [r1, #20]
    45d8:	7018      	strb	r0, [r3, #0]
			usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    45da:	2300      	movs	r3, #0
    45dc:	2201      	movs	r2, #1
    45de:	6949      	ldr	r1, [r1, #20]
    45e0:	4618      	mov	r0, r3
    45e2:	4c0d      	ldr	r4, [pc, #52]	; (4618 <usbdc_cb_ctl_req+0x410>)
    45e4:	47a0      	blx	r4
			return true;
    45e6:	2001      	movs	r0, #1
    45e8:	e626      	b.n	4238 <usbdc_cb_ctl_req+0x30>
		return true;
    45ea:	2001      	movs	r0, #1
    45ec:	e624      	b.n	4238 <usbdc_cb_ctl_req+0x30>
		return false;
    45ee:	2000      	movs	r0, #0
    45f0:	e622      	b.n	4238 <usbdc_cb_ctl_req+0x30>
		return false;
    45f2:	2000      	movs	r0, #0
    45f4:	e620      	b.n	4238 <usbdc_cb_ctl_req+0x30>
		return false;
    45f6:	2000      	movs	r0, #0
    45f8:	e61e      	b.n	4238 <usbdc_cb_ctl_req+0x30>
		return false;
    45fa:	2000      	movs	r0, #0
    45fc:	e61c      	b.n	4238 <usbdc_cb_ctl_req+0x30>
		return false;
    45fe:	2000      	movs	r0, #0
    4600:	e61a      	b.n	4238 <usbdc_cb_ctl_req+0x30>
		return false;
    4602:	2000      	movs	r0, #0
    4604:	e618      	b.n	4238 <usbdc_cb_ctl_req+0x30>
		return false;
    4606:	2000      	movs	r0, #0
    4608:	e616      	b.n	4238 <usbdc_cb_ctl_req+0x30>
			return false;
    460a:	2000      	movs	r0, #0
    460c:	e614      	b.n	4238 <usbdc_cb_ctl_req+0x30>
    460e:	bf00      	nop
    4610:	2000090c 	.word	0x2000090c
    4614:	000047ad 	.word	0x000047ad
    4618:	000041e9 	.word	0x000041e9
    461c:	00004815 	.word	0x00004815
    4620:	00001add 	.word	0x00001add

00004624 <usbdc_register_handler>:

/**
 * \brief Register the handler
 */
void usbdc_register_handler(enum usbdc_handler_type type, const struct usbdc_handler *h)
{
    4624:	b508      	push	{r3, lr}
	switch (type) {
    4626:	2801      	cmp	r0, #1
    4628:	d007      	beq.n	463a <usbdc_register_handler+0x16>
    462a:	b110      	cbz	r0, 4632 <usbdc_register_handler+0xe>
    462c:	2802      	cmp	r0, #2
    462e:	d008      	beq.n	4642 <usbdc_register_handler+0x1e>
    4630:	bd08      	pop	{r3, pc}
	case USBDC_HDL_SOF:
		list_insert_at_end(&usbdc.handlers.sof_list, (void *)h);
    4632:	4806      	ldr	r0, [pc, #24]	; (464c <usbdc_register_handler+0x28>)
    4634:	4b06      	ldr	r3, [pc, #24]	; (4650 <usbdc_register_handler+0x2c>)
    4636:	4798      	blx	r3
		break;
    4638:	bd08      	pop	{r3, pc}
	case USBDC_HDL_REQ:
		list_insert_at_end(&usbdc.handlers.req_list, (void *)h);
    463a:	4806      	ldr	r0, [pc, #24]	; (4654 <usbdc_register_handler+0x30>)
    463c:	4b04      	ldr	r3, [pc, #16]	; (4650 <usbdc_register_handler+0x2c>)
    463e:	4798      	blx	r3
		break;
    4640:	bd08      	pop	{r3, pc}
	case USBDC_HDL_CHANGE:
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
    4642:	4805      	ldr	r0, [pc, #20]	; (4658 <usbdc_register_handler+0x34>)
    4644:	4b02      	ldr	r3, [pc, #8]	; (4650 <usbdc_register_handler+0x2c>)
    4646:	4798      	blx	r3
    4648:	bd08      	pop	{r3, pc}
    464a:	bf00      	nop
    464c:	20000910 	.word	0x20000910
    4650:	00001bed 	.word	0x00001bed
    4654:	20000914 	.word	0x20000914
    4658:	20000918 	.word	0x20000918

0000465c <usbdc_init>:

/**
 * \brief Initialize the USB device core driver
 */
int32_t usbdc_init(uint8_t *ctrl_buf)
{
    465c:	b538      	push	{r3, r4, r5, lr}
	ASSERT(ctrl_buf);
    465e:	4605      	mov	r5, r0
    4660:	f240 3255 	movw	r2, #853	; 0x355
    4664:	490c      	ldr	r1, [pc, #48]	; (4698 <usbdc_init+0x3c>)
    4666:	3000      	adds	r0, #0
    4668:	bf18      	it	ne
    466a:	2001      	movne	r0, #1
    466c:	4b0b      	ldr	r3, [pc, #44]	; (469c <usbdc_init+0x40>)
    466e:	4798      	blx	r3

	int32_t rc;

	rc = usb_d_init();
    4670:	4b0b      	ldr	r3, [pc, #44]	; (46a0 <usbdc_init+0x44>)
    4672:	4798      	blx	r3
	if (rc < 0) {
    4674:	2800      	cmp	r0, #0
    4676:	db0e      	blt.n	4696 <usbdc_init+0x3a>
		return rc;
	}

	memset(&usbdc, 0, sizeof(usbdc));
    4678:	4c0a      	ldr	r4, [pc, #40]	; (46a4 <usbdc_init+0x48>)
    467a:	2220      	movs	r2, #32
    467c:	2100      	movs	r1, #0
    467e:	4620      	mov	r0, r4
    4680:	4b09      	ldr	r3, [pc, #36]	; (46a8 <usbdc_init+0x4c>)
    4682:	4798      	blx	r3
	usbdc.ctrl_buf = ctrl_buf;
    4684:	6165      	str	r5, [r4, #20]
	usb_d_register_callback(USB_D_CB_SOF, (FUNC_PTR)usbd_sof_cb);
    4686:	4909      	ldr	r1, [pc, #36]	; (46ac <usbdc_init+0x50>)
    4688:	2000      	movs	r0, #0
    468a:	4c09      	ldr	r4, [pc, #36]	; (46b0 <usbdc_init+0x54>)
    468c:	47a0      	blx	r4
	usb_d_register_callback(USB_D_CB_EVENT, (FUNC_PTR)usbd_event_cb);
    468e:	4909      	ldr	r1, [pc, #36]	; (46b4 <usbdc_init+0x58>)
    4690:	2001      	movs	r0, #1
    4692:	47a0      	blx	r4

	return 0;
    4694:	2000      	movs	r0, #0
}
    4696:	bd38      	pop	{r3, r4, r5, pc}
    4698:	000052c8 	.word	0x000052c8
    469c:	00001b91 	.word	0x00001b91
    46a0:	00001845 	.word	0x00001845
    46a4:	2000090c 	.word	0x2000090c
    46a8:	00004a51 	.word	0x00004a51
    46ac:	000040dd 	.word	0x000040dd
    46b0:	000018ad 	.word	0x000018ad
    46b4:	000041c9 	.word	0x000041c9

000046b8 <usbdc_register_function>:
 * \brief Register/unregister function support of a USB device function
 *
 * Must be invoked when USB device is stopped.
 */
void usbdc_register_function(struct usbdf_driver *func)
{
    46b8:	b508      	push	{r3, lr}
	list_insert_at_end(&usbdc.func_list, func);
    46ba:	4601      	mov	r1, r0
    46bc:	4801      	ldr	r0, [pc, #4]	; (46c4 <usbdc_register_function+0xc>)
    46be:	4b02      	ldr	r3, [pc, #8]	; (46c8 <usbdc_register_function+0x10>)
    46c0:	4798      	blx	r3
    46c2:	bd08      	pop	{r3, pc}
    46c4:	2000091c 	.word	0x2000091c
    46c8:	00001bed 	.word	0x00001bed

000046cc <usbdc_start>:

/**
 * \brief Start the USB device driver with specific descriptors set
 */
int32_t usbdc_start(struct usbd_descriptors *desces)
{
    46cc:	b508      	push	{r3, lr}
	if (usbdc.state >= USBD_S_POWER) {
    46ce:	4b0a      	ldr	r3, [pc, #40]	; (46f8 <usbdc_start+0x2c>)
    46d0:	7e9b      	ldrb	r3, [r3, #26]
    46d2:	b95b      	cbnz	r3, 46ec <usbdc_start+0x20>
		return ERR_BUSY;
	}

	if (desces) {
    46d4:	b168      	cbz	r0, 46f2 <usbdc_start+0x26>
		usbdc.desces.ls_fs = desces;
    46d6:	4b08      	ldr	r3, [pc, #32]	; (46f8 <usbdc_start+0x2c>)
    46d8:	6018      	str	r0, [r3, #0]
#endif
	} else {
		return ERR_BAD_DATA;
	}

	usbdc.ctrl_size = desces->sod[7];
    46da:	6802      	ldr	r2, [r0, #0]
    46dc:	79d2      	ldrb	r2, [r2, #7]
    46de:	771a      	strb	r2, [r3, #28]
	usbdc.state     = USBD_S_POWER;
    46e0:	2201      	movs	r2, #1
    46e2:	769a      	strb	r2, [r3, #26]
	usb_d_enable();
    46e4:	4b05      	ldr	r3, [pc, #20]	; (46fc <usbdc_start+0x30>)
    46e6:	4798      	blx	r3
	return ERR_NONE;
    46e8:	2000      	movs	r0, #0
    46ea:	bd08      	pop	{r3, pc}
		return ERR_BUSY;
    46ec:	f06f 0003 	mvn.w	r0, #3
    46f0:	bd08      	pop	{r3, pc}
		return ERR_BAD_DATA;
    46f2:	f06f 0008 	mvn.w	r0, #8
}
    46f6:	bd08      	pop	{r3, pc}
    46f8:	2000090c 	.word	0x2000090c
    46fc:	000018b9 	.word	0x000018b9

00004700 <usbdc_attach>:

/**
 * \brief Attach the USB device to host
 */
void usbdc_attach(void)
{
    4700:	b508      	push	{r3, lr}
	usb_d_attach();
    4702:	4b01      	ldr	r3, [pc, #4]	; (4708 <usbdc_attach+0x8>)
    4704:	4798      	blx	r3
    4706:	bd08      	pop	{r3, pc}
    4708:	000018c5 	.word	0x000018c5

0000470c <usbdc_get_ctrl_buffer>:
 * \brief Return USB Device endpoint0 buffer
 */
uint8_t *usbdc_get_ctrl_buffer(void)
{
	return usbdc.ctrl_buf;
}
    470c:	4b01      	ldr	r3, [pc, #4]	; (4714 <usbdc_get_ctrl_buffer+0x8>)
    470e:	6958      	ldr	r0, [r3, #20]
    4710:	4770      	bx	lr
    4712:	bf00      	nop
    4714:	2000090c 	.word	0x2000090c

00004718 <usbdc_get_state>:
/**
 * \brief Return current USB state
 */
uint8_t usbdc_get_state(void)
{
	if (usbdc.state & USBD_S_SUSPEND) {
    4718:	4b03      	ldr	r3, [pc, #12]	; (4728 <usbdc_get_state+0x10>)
    471a:	7e98      	ldrb	r0, [r3, #26]
    471c:	f000 0310 	and.w	r3, r0, #16
		return USBD_S_SUSPEND;
    4720:	2b00      	cmp	r3, #0
	}
	return usbdc.state;
}
    4722:	bf18      	it	ne
    4724:	2010      	movne	r0, #16
    4726:	4770      	bx	lr
    4728:	2000090c 	.word	0x2000090c

0000472c <usb_find_desc>:

uint8_t *usb_find_desc(uint8_t *desc, uint8_t *eof, uint8_t type)
{
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    472c:	4288      	cmp	r0, r1
    472e:	d214      	bcs.n	475a <usb_find_desc+0x2e>
	return desc[0];
    4730:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    4732:	2b01      	cmp	r3, #1
    4734:	d913      	bls.n	475e <usb_find_desc+0x32>
{
    4736:	b410      	push	{r4}
		if (type == usb_desc_type(desc)) {
    4738:	7844      	ldrb	r4, [r0, #1]
    473a:	4294      	cmp	r4, r2
    473c:	d00a      	beq.n	4754 <usb_find_desc+0x28>
	return (desc + usb_desc_len(desc));
    473e:	4418      	add	r0, r3
	while (desc < eof) {
    4740:	4281      	cmp	r1, r0
    4742:	d906      	bls.n	4752 <usb_find_desc+0x26>
	return desc[0];
    4744:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    4746:	2b01      	cmp	r3, #1
    4748:	d90b      	bls.n	4762 <usb_find_desc+0x36>
	return desc[1];
    474a:	7844      	ldrb	r4, [r0, #1]
		if (type == usb_desc_type(desc)) {
    474c:	4294      	cmp	r4, r2
    474e:	d1f6      	bne.n	473e <usb_find_desc+0x12>
    4750:	e000      	b.n	4754 <usb_find_desc+0x28>
			return desc;
		}
		desc = usb_desc_next(desc);
	}
	return NULL;
    4752:	2000      	movs	r0, #0
}
    4754:	f85d 4b04 	ldr.w	r4, [sp], #4
    4758:	4770      	bx	lr
	return NULL;
    475a:	2000      	movs	r0, #0
    475c:	4770      	bx	lr
		_desc_len_check();
    475e:	2000      	movs	r0, #0
    4760:	4770      	bx	lr
    4762:	2000      	movs	r0, #0
    4764:	e7f6      	b.n	4754 <usb_find_desc+0x28>

00004766 <usb_find_ep_desc>:

uint8_t *usb_find_ep_desc(uint8_t *desc, uint8_t *eof)
{
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    4766:	4288      	cmp	r0, r1
    4768:	d216      	bcs.n	4798 <usb_find_ep_desc+0x32>
	return desc[0];
    476a:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    476c:	2b01      	cmp	r3, #1
    476e:	d915      	bls.n	479c <usb_find_ep_desc+0x36>
	return desc[1];
    4770:	7842      	ldrb	r2, [r0, #1]
		if (USB_DT_INTERFACE == usb_desc_type(desc)) {
    4772:	2a04      	cmp	r2, #4
    4774:	d014      	beq.n	47a0 <usb_find_ep_desc+0x3a>
			break;
		}
		if (USB_DT_ENDPOINT == usb_desc_type(desc)) {
    4776:	2a05      	cmp	r2, #5
    4778:	d00b      	beq.n	4792 <usb_find_ep_desc+0x2c>
	return (desc + usb_desc_len(desc));
    477a:	4418      	add	r0, r3
	while (desc < eof) {
    477c:	4281      	cmp	r1, r0
    477e:	d909      	bls.n	4794 <usb_find_ep_desc+0x2e>
	return desc[0];
    4780:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    4782:	2b01      	cmp	r3, #1
    4784:	d90e      	bls.n	47a4 <usb_find_ep_desc+0x3e>
	return desc[1];
    4786:	7842      	ldrb	r2, [r0, #1]
		if (USB_DT_INTERFACE == usb_desc_type(desc)) {
    4788:	2a04      	cmp	r2, #4
    478a:	d00d      	beq.n	47a8 <usb_find_ep_desc+0x42>
		if (USB_DT_ENDPOINT == usb_desc_type(desc)) {
    478c:	2a05      	cmp	r2, #5
    478e:	d1f4      	bne.n	477a <usb_find_ep_desc+0x14>
    4790:	e00b      	b.n	47aa <usb_find_ep_desc+0x44>
    4792:	4770      	bx	lr
			return desc;
		}
		desc = usb_desc_next(desc);
	}
	return NULL;
    4794:	2000      	movs	r0, #0
    4796:	4770      	bx	lr
    4798:	2000      	movs	r0, #0
    479a:	4770      	bx	lr
		_desc_len_check();
    479c:	2000      	movs	r0, #0
    479e:	4770      	bx	lr
	return NULL;
    47a0:	2000      	movs	r0, #0
    47a2:	4770      	bx	lr
		_desc_len_check();
    47a4:	2000      	movs	r0, #0
    47a6:	4770      	bx	lr
	return NULL;
    47a8:	2000      	movs	r0, #0
}
    47aa:	4770      	bx	lr

000047ac <usb_find_cfg_desc>:

uint8_t *usb_find_cfg_desc(uint8_t *desc, uint8_t *eof, uint8_t cfg_value)
{
    47ac:	b538      	push	{r3, r4, r5, lr}
    47ae:	460c      	mov	r4, r1
    47b0:	4615      	mov	r5, r2
	_param_error_check(desc && eof && (desc < eof));

	desc = usb_find_desc(desc, eof, USB_DT_CONFIG);
    47b2:	2202      	movs	r2, #2
    47b4:	4b16      	ldr	r3, [pc, #88]	; (4810 <usb_find_cfg_desc+0x64>)
    47b6:	4798      	blx	r3
	if (!desc) {
    47b8:	4603      	mov	r3, r0
    47ba:	b1e8      	cbz	r0, 47f8 <usb_find_cfg_desc+0x4c>
		return NULL;
	}
	while (desc < eof) {
    47bc:	4284      	cmp	r4, r0
    47be:	d91d      	bls.n	47fc <usb_find_cfg_desc+0x50>
		_desc_len_check();
    47c0:	7802      	ldrb	r2, [r0, #0]
    47c2:	2a01      	cmp	r2, #1
    47c4:	d91c      	bls.n	4800 <usb_find_cfg_desc+0x54>
		if (desc[1] != USB_DT_CONFIG) {
    47c6:	7842      	ldrb	r2, [r0, #1]
    47c8:	2a02      	cmp	r2, #2
    47ca:	d11b      	bne.n	4804 <usb_find_cfg_desc+0x58>
			break;
		}
		if (desc[5] == cfg_value) {
    47cc:	7942      	ldrb	r2, [r0, #5]
    47ce:	42aa      	cmp	r2, r5
    47d0:	d012      	beq.n	47f8 <usb_find_cfg_desc+0x4c>
	return (ptr[0] + (ptr[1] << 8));
    47d2:	78d9      	ldrb	r1, [r3, #3]
    47d4:	789a      	ldrb	r2, [r3, #2]
    47d6:	eb02 2201 	add.w	r2, r2, r1, lsl #8
 *  \param[in] cfg_desc Byte pointer to the descriptor start address
 *  \return Byte pointer to descriptor after configuration end
 */
static inline uint8_t *usb_cfg_desc_next(uint8_t *cfg_desc)
{
	return (cfg_desc + usb_cfg_desc_total_len(cfg_desc));
    47da:	fa13 f382 	uxtah	r3, r3, r2
	while (desc < eof) {
    47de:	429c      	cmp	r4, r3
    47e0:	d909      	bls.n	47f6 <usb_find_cfg_desc+0x4a>
		_desc_len_check();
    47e2:	781a      	ldrb	r2, [r3, #0]
    47e4:	2a01      	cmp	r2, #1
    47e6:	d90f      	bls.n	4808 <usb_find_cfg_desc+0x5c>
		if (desc[1] != USB_DT_CONFIG) {
    47e8:	785a      	ldrb	r2, [r3, #1]
    47ea:	2a02      	cmp	r2, #2
    47ec:	d10e      	bne.n	480c <usb_find_cfg_desc+0x60>
		if (desc[5] == cfg_value) {
    47ee:	795a      	ldrb	r2, [r3, #5]
    47f0:	42aa      	cmp	r2, r5
    47f2:	d1ee      	bne.n	47d2 <usb_find_cfg_desc+0x26>
    47f4:	e000      	b.n	47f8 <usb_find_cfg_desc+0x4c>
			return desc;
		}
		desc = usb_cfg_desc_next(desc);
	}
	return NULL;
    47f6:	2300      	movs	r3, #0
}
    47f8:	4618      	mov	r0, r3
    47fa:	bd38      	pop	{r3, r4, r5, pc}
	return NULL;
    47fc:	2300      	movs	r3, #0
    47fe:	e7fb      	b.n	47f8 <usb_find_cfg_desc+0x4c>
		_desc_len_check();
    4800:	2300      	movs	r3, #0
    4802:	e7f9      	b.n	47f8 <usb_find_cfg_desc+0x4c>
	return NULL;
    4804:	2300      	movs	r3, #0
    4806:	e7f7      	b.n	47f8 <usb_find_cfg_desc+0x4c>
		_desc_len_check();
    4808:	2300      	movs	r3, #0
    480a:	e7f5      	b.n	47f8 <usb_find_cfg_desc+0x4c>
	return NULL;
    480c:	2300      	movs	r3, #0
    480e:	e7f3      	b.n	47f8 <usb_find_cfg_desc+0x4c>
    4810:	0000472d 	.word	0x0000472d

00004814 <usb_find_str_desc>:
{
	uint8_t i;

	_param_error_check(desc && eof && (desc < eof));

	for (i = 0; desc < eof;) {
    4814:	4288      	cmp	r0, r1
    4816:	d217      	bcs.n	4848 <usb_find_str_desc+0x34>
{
    4818:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    481c:	460d      	mov	r5, r1
    481e:	4616      	mov	r6, r2
	for (i = 0; desc < eof;) {
    4820:	2400      	movs	r4, #0
		desc = usb_find_desc(desc, eof, USB_DT_STRING);
    4822:	f04f 0803 	mov.w	r8, #3
    4826:	4f0c      	ldr	r7, [pc, #48]	; (4858 <usb_find_str_desc+0x44>)
    4828:	4642      	mov	r2, r8
    482a:	4629      	mov	r1, r5
    482c:	47b8      	blx	r7
		if (desc) {
    482e:	4603      	mov	r3, r0
    4830:	b170      	cbz	r0, 4850 <usb_find_str_desc+0x3c>
	return desc[0];
    4832:	7800      	ldrb	r0, [r0, #0]
			_desc_len_check();
    4834:	2801      	cmp	r0, #1
    4836:	d90a      	bls.n	484e <usb_find_str_desc+0x3a>
			if (i == str_index) {
    4838:	42a6      	cmp	r6, r4
    483a:	d009      	beq.n	4850 <usb_find_str_desc+0x3c>
	return (desc + usb_desc_len(desc));
    483c:	4418      	add	r0, r3
    483e:	3401      	adds	r4, #1
	for (i = 0; desc < eof;) {
    4840:	4285      	cmp	r5, r0
    4842:	d8f1      	bhi.n	4828 <usb_find_str_desc+0x14>
			desc = usb_desc_next(desc);
		} else {
			return NULL;
		}
	}
	return NULL;
    4844:	2300      	movs	r3, #0
    4846:	e003      	b.n	4850 <usb_find_str_desc+0x3c>
    4848:	2300      	movs	r3, #0
}
    484a:	4618      	mov	r0, r3
    484c:	4770      	bx	lr
			_desc_len_check();
    484e:	2300      	movs	r3, #0
}
    4850:	4618      	mov	r0, r3
    4852:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4856:	bf00      	nop
    4858:	0000472d 	.word	0x0000472d

0000485c <cdc_device_acm_init>:

/**
 * \brief CDC ACM Init
 */
void cdc_device_acm_init(void)
{
    485c:	b508      	push	{r3, lr}
	/* usb stack init */
	usbdc_init(ctrl_buffer);
    485e:	4805      	ldr	r0, [pc, #20]	; (4874 <cdc_device_acm_init+0x18>)
    4860:	4b05      	ldr	r3, [pc, #20]	; (4878 <cdc_device_acm_init+0x1c>)
    4862:	4798      	blx	r3

	/* usbdc_register_funcion inside */
	cdcdf_acm_init();
    4864:	4b05      	ldr	r3, [pc, #20]	; (487c <cdc_device_acm_init+0x20>)
    4866:	4798      	blx	r3

	usbdc_start(single_desc);
    4868:	4805      	ldr	r0, [pc, #20]	; (4880 <cdc_device_acm_init+0x24>)
    486a:	4b06      	ldr	r3, [pc, #24]	; (4884 <cdc_device_acm_init+0x28>)
    486c:	4798      	blx	r3
	usbdc_attach();
    486e:	4b06      	ldr	r3, [pc, #24]	; (4888 <cdc_device_acm_init+0x2c>)
    4870:	4798      	blx	r3
    4872:	bd08      	pop	{r3, pc}
    4874:	2000096c 	.word	0x2000096c
    4878:	0000465d 	.word	0x0000465d
    487c:	00003f49 	.word	0x00003f49
    4880:	200000ac 	.word	0x200000ac
    4884:	000046cd 	.word	0x000046cd
    4888:	00004701 	.word	0x00004701

0000488c <usb_init>:
	while (1) {
	}
}

void usb_init(void)
{
    488c:	b508      	push	{r3, lr}

	cdc_device_acm_init();
    488e:	4b01      	ldr	r3, [pc, #4]	; (4894 <usb_init+0x8>)
    4890:	4798      	blx	r3
    4892:	bd08      	pop	{r3, pc}
    4894:	0000485d 	.word	0x0000485d

00004898 <atomic_enter_critical>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    4898:	f3ef 8310 	mrs	r3, PRIMASK
/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
	*atomic = __get_PRIMASK();
    489c:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
    489e:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    48a0:	f3bf 8f5f 	dmb	sy
    48a4:	4770      	bx	lr

000048a6 <atomic_leave_critical>:
    48a6:	f3bf 8f5f 	dmb	sy
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
	__DMB();
	__set_PRIMASK(*atomic);
    48aa:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    48ac:	f383 8810 	msr	PRIMASK, r3
    48b0:	4770      	bx	lr
	...

000048b4 <__aeabi_atexit>:
    48b4:	460b      	mov	r3, r1
    48b6:	4601      	mov	r1, r0
    48b8:	4618      	mov	r0, r3
    48ba:	f000 b801 	b.w	48c0 <__cxa_atexit>
    48be:	bf00      	nop

000048c0 <__cxa_atexit>:
    48c0:	4613      	mov	r3, r2
    48c2:	460a      	mov	r2, r1
    48c4:	4601      	mov	r1, r0
    48c6:	2002      	movs	r0, #2
    48c8:	f000 b9ca 	b.w	4c60 <__register_exitproc>

000048cc <__libc_init_array>:
    48cc:	b570      	push	{r4, r5, r6, lr}
    48ce:	4e0f      	ldr	r6, [pc, #60]	; (490c <__libc_init_array+0x40>)
    48d0:	4d0f      	ldr	r5, [pc, #60]	; (4910 <__libc_init_array+0x44>)
    48d2:	1b76      	subs	r6, r6, r5
    48d4:	10b6      	asrs	r6, r6, #2
    48d6:	bf18      	it	ne
    48d8:	2400      	movne	r4, #0
    48da:	d005      	beq.n	48e8 <__libc_init_array+0x1c>
    48dc:	3401      	adds	r4, #1
    48de:	f855 3b04 	ldr.w	r3, [r5], #4
    48e2:	4798      	blx	r3
    48e4:	42a6      	cmp	r6, r4
    48e6:	d1f9      	bne.n	48dc <__libc_init_array+0x10>
    48e8:	4e0a      	ldr	r6, [pc, #40]	; (4914 <__libc_init_array+0x48>)
    48ea:	4d0b      	ldr	r5, [pc, #44]	; (4918 <__libc_init_array+0x4c>)
    48ec:	1b76      	subs	r6, r6, r5
    48ee:	f000 fd0d 	bl	530c <_init>
    48f2:	10b6      	asrs	r6, r6, #2
    48f4:	bf18      	it	ne
    48f6:	2400      	movne	r4, #0
    48f8:	d006      	beq.n	4908 <__libc_init_array+0x3c>
    48fa:	3401      	adds	r4, #1
    48fc:	f855 3b04 	ldr.w	r3, [r5], #4
    4900:	4798      	blx	r3
    4902:	42a6      	cmp	r6, r4
    4904:	d1f9      	bne.n	48fa <__libc_init_array+0x2e>
    4906:	bd70      	pop	{r4, r5, r6, pc}
    4908:	bd70      	pop	{r4, r5, r6, pc}
    490a:	bf00      	nop
    490c:	00005318 	.word	0x00005318
    4910:	00005318 	.word	0x00005318
    4914:	00005324 	.word	0x00005324
    4918:	00005318 	.word	0x00005318

0000491c <memcpy>:
    491c:	4684      	mov	ip, r0
    491e:	ea41 0300 	orr.w	r3, r1, r0
    4922:	f013 0303 	ands.w	r3, r3, #3
    4926:	d16d      	bne.n	4a04 <memcpy+0xe8>
    4928:	3a40      	subs	r2, #64	; 0x40
    492a:	d341      	bcc.n	49b0 <memcpy+0x94>
    492c:	f851 3b04 	ldr.w	r3, [r1], #4
    4930:	f840 3b04 	str.w	r3, [r0], #4
    4934:	f851 3b04 	ldr.w	r3, [r1], #4
    4938:	f840 3b04 	str.w	r3, [r0], #4
    493c:	f851 3b04 	ldr.w	r3, [r1], #4
    4940:	f840 3b04 	str.w	r3, [r0], #4
    4944:	f851 3b04 	ldr.w	r3, [r1], #4
    4948:	f840 3b04 	str.w	r3, [r0], #4
    494c:	f851 3b04 	ldr.w	r3, [r1], #4
    4950:	f840 3b04 	str.w	r3, [r0], #4
    4954:	f851 3b04 	ldr.w	r3, [r1], #4
    4958:	f840 3b04 	str.w	r3, [r0], #4
    495c:	f851 3b04 	ldr.w	r3, [r1], #4
    4960:	f840 3b04 	str.w	r3, [r0], #4
    4964:	f851 3b04 	ldr.w	r3, [r1], #4
    4968:	f840 3b04 	str.w	r3, [r0], #4
    496c:	f851 3b04 	ldr.w	r3, [r1], #4
    4970:	f840 3b04 	str.w	r3, [r0], #4
    4974:	f851 3b04 	ldr.w	r3, [r1], #4
    4978:	f840 3b04 	str.w	r3, [r0], #4
    497c:	f851 3b04 	ldr.w	r3, [r1], #4
    4980:	f840 3b04 	str.w	r3, [r0], #4
    4984:	f851 3b04 	ldr.w	r3, [r1], #4
    4988:	f840 3b04 	str.w	r3, [r0], #4
    498c:	f851 3b04 	ldr.w	r3, [r1], #4
    4990:	f840 3b04 	str.w	r3, [r0], #4
    4994:	f851 3b04 	ldr.w	r3, [r1], #4
    4998:	f840 3b04 	str.w	r3, [r0], #4
    499c:	f851 3b04 	ldr.w	r3, [r1], #4
    49a0:	f840 3b04 	str.w	r3, [r0], #4
    49a4:	f851 3b04 	ldr.w	r3, [r1], #4
    49a8:	f840 3b04 	str.w	r3, [r0], #4
    49ac:	3a40      	subs	r2, #64	; 0x40
    49ae:	d2bd      	bcs.n	492c <memcpy+0x10>
    49b0:	3230      	adds	r2, #48	; 0x30
    49b2:	d311      	bcc.n	49d8 <memcpy+0xbc>
    49b4:	f851 3b04 	ldr.w	r3, [r1], #4
    49b8:	f840 3b04 	str.w	r3, [r0], #4
    49bc:	f851 3b04 	ldr.w	r3, [r1], #4
    49c0:	f840 3b04 	str.w	r3, [r0], #4
    49c4:	f851 3b04 	ldr.w	r3, [r1], #4
    49c8:	f840 3b04 	str.w	r3, [r0], #4
    49cc:	f851 3b04 	ldr.w	r3, [r1], #4
    49d0:	f840 3b04 	str.w	r3, [r0], #4
    49d4:	3a10      	subs	r2, #16
    49d6:	d2ed      	bcs.n	49b4 <memcpy+0x98>
    49d8:	320c      	adds	r2, #12
    49da:	d305      	bcc.n	49e8 <memcpy+0xcc>
    49dc:	f851 3b04 	ldr.w	r3, [r1], #4
    49e0:	f840 3b04 	str.w	r3, [r0], #4
    49e4:	3a04      	subs	r2, #4
    49e6:	d2f9      	bcs.n	49dc <memcpy+0xc0>
    49e8:	3204      	adds	r2, #4
    49ea:	d008      	beq.n	49fe <memcpy+0xe2>
    49ec:	07d2      	lsls	r2, r2, #31
    49ee:	bf1c      	itt	ne
    49f0:	f811 3b01 	ldrbne.w	r3, [r1], #1
    49f4:	f800 3b01 	strbne.w	r3, [r0], #1
    49f8:	d301      	bcc.n	49fe <memcpy+0xe2>
    49fa:	880b      	ldrh	r3, [r1, #0]
    49fc:	8003      	strh	r3, [r0, #0]
    49fe:	4660      	mov	r0, ip
    4a00:	4770      	bx	lr
    4a02:	bf00      	nop
    4a04:	2a08      	cmp	r2, #8
    4a06:	d313      	bcc.n	4a30 <memcpy+0x114>
    4a08:	078b      	lsls	r3, r1, #30
    4a0a:	d08d      	beq.n	4928 <memcpy+0xc>
    4a0c:	f010 0303 	ands.w	r3, r0, #3
    4a10:	d08a      	beq.n	4928 <memcpy+0xc>
    4a12:	f1c3 0304 	rsb	r3, r3, #4
    4a16:	1ad2      	subs	r2, r2, r3
    4a18:	07db      	lsls	r3, r3, #31
    4a1a:	bf1c      	itt	ne
    4a1c:	f811 3b01 	ldrbne.w	r3, [r1], #1
    4a20:	f800 3b01 	strbne.w	r3, [r0], #1
    4a24:	d380      	bcc.n	4928 <memcpy+0xc>
    4a26:	f831 3b02 	ldrh.w	r3, [r1], #2
    4a2a:	f820 3b02 	strh.w	r3, [r0], #2
    4a2e:	e77b      	b.n	4928 <memcpy+0xc>
    4a30:	3a04      	subs	r2, #4
    4a32:	d3d9      	bcc.n	49e8 <memcpy+0xcc>
    4a34:	3a01      	subs	r2, #1
    4a36:	f811 3b01 	ldrb.w	r3, [r1], #1
    4a3a:	f800 3b01 	strb.w	r3, [r0], #1
    4a3e:	d2f9      	bcs.n	4a34 <memcpy+0x118>
    4a40:	780b      	ldrb	r3, [r1, #0]
    4a42:	7003      	strb	r3, [r0, #0]
    4a44:	784b      	ldrb	r3, [r1, #1]
    4a46:	7043      	strb	r3, [r0, #1]
    4a48:	788b      	ldrb	r3, [r1, #2]
    4a4a:	7083      	strb	r3, [r0, #2]
    4a4c:	4660      	mov	r0, ip
    4a4e:	4770      	bx	lr

00004a50 <memset>:
    4a50:	b470      	push	{r4, r5, r6}
    4a52:	0786      	lsls	r6, r0, #30
    4a54:	d046      	beq.n	4ae4 <memset+0x94>
    4a56:	1e54      	subs	r4, r2, #1
    4a58:	2a00      	cmp	r2, #0
    4a5a:	d041      	beq.n	4ae0 <memset+0x90>
    4a5c:	b2ca      	uxtb	r2, r1
    4a5e:	4603      	mov	r3, r0
    4a60:	e002      	b.n	4a68 <memset+0x18>
    4a62:	f114 34ff 	adds.w	r4, r4, #4294967295
    4a66:	d33b      	bcc.n	4ae0 <memset+0x90>
    4a68:	f803 2b01 	strb.w	r2, [r3], #1
    4a6c:	079d      	lsls	r5, r3, #30
    4a6e:	d1f8      	bne.n	4a62 <memset+0x12>
    4a70:	2c03      	cmp	r4, #3
    4a72:	d92e      	bls.n	4ad2 <memset+0x82>
    4a74:	b2cd      	uxtb	r5, r1
    4a76:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
    4a7a:	2c0f      	cmp	r4, #15
    4a7c:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
    4a80:	d919      	bls.n	4ab6 <memset+0x66>
    4a82:	f103 0210 	add.w	r2, r3, #16
    4a86:	4626      	mov	r6, r4
    4a88:	3e10      	subs	r6, #16
    4a8a:	2e0f      	cmp	r6, #15
    4a8c:	f842 5c10 	str.w	r5, [r2, #-16]
    4a90:	f842 5c0c 	str.w	r5, [r2, #-12]
    4a94:	f842 5c08 	str.w	r5, [r2, #-8]
    4a98:	f842 5c04 	str.w	r5, [r2, #-4]
    4a9c:	f102 0210 	add.w	r2, r2, #16
    4aa0:	d8f2      	bhi.n	4a88 <memset+0x38>
    4aa2:	f1a4 0210 	sub.w	r2, r4, #16
    4aa6:	f022 020f 	bic.w	r2, r2, #15
    4aaa:	f004 040f 	and.w	r4, r4, #15
    4aae:	3210      	adds	r2, #16
    4ab0:	2c03      	cmp	r4, #3
    4ab2:	4413      	add	r3, r2
    4ab4:	d90d      	bls.n	4ad2 <memset+0x82>
    4ab6:	461e      	mov	r6, r3
    4ab8:	4622      	mov	r2, r4
    4aba:	3a04      	subs	r2, #4
    4abc:	2a03      	cmp	r2, #3
    4abe:	f846 5b04 	str.w	r5, [r6], #4
    4ac2:	d8fa      	bhi.n	4aba <memset+0x6a>
    4ac4:	1f22      	subs	r2, r4, #4
    4ac6:	f022 0203 	bic.w	r2, r2, #3
    4aca:	3204      	adds	r2, #4
    4acc:	4413      	add	r3, r2
    4ace:	f004 0403 	and.w	r4, r4, #3
    4ad2:	b12c      	cbz	r4, 4ae0 <memset+0x90>
    4ad4:	b2c9      	uxtb	r1, r1
    4ad6:	441c      	add	r4, r3
    4ad8:	f803 1b01 	strb.w	r1, [r3], #1
    4adc:	429c      	cmp	r4, r3
    4ade:	d1fb      	bne.n	4ad8 <memset+0x88>
    4ae0:	bc70      	pop	{r4, r5, r6}
    4ae2:	4770      	bx	lr
    4ae4:	4614      	mov	r4, r2
    4ae6:	4603      	mov	r3, r0
    4ae8:	e7c2      	b.n	4a70 <memset+0x20>
    4aea:	bf00      	nop
	...

00004b00 <strlen>:
    4b00:	f890 f000 	pld	[r0]
    4b04:	e96d 4502 	strd	r4, r5, [sp, #-8]!
    4b08:	f020 0107 	bic.w	r1, r0, #7
    4b0c:	f06f 0c00 	mvn.w	ip, #0
    4b10:	f010 0407 	ands.w	r4, r0, #7
    4b14:	f891 f020 	pld	[r1, #32]
    4b18:	f040 8049 	bne.w	4bae <strlen+0xae>
    4b1c:	f04f 0400 	mov.w	r4, #0
    4b20:	f06f 0007 	mvn.w	r0, #7
    4b24:	e9d1 2300 	ldrd	r2, r3, [r1]
    4b28:	f891 f040 	pld	[r1, #64]	; 0x40
    4b2c:	f100 0008 	add.w	r0, r0, #8
    4b30:	fa82 f24c 	uadd8	r2, r2, ip
    4b34:	faa4 f28c 	sel	r2, r4, ip
    4b38:	fa83 f34c 	uadd8	r3, r3, ip
    4b3c:	faa2 f38c 	sel	r3, r2, ip
    4b40:	bb4b      	cbnz	r3, 4b96 <strlen+0x96>
    4b42:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
    4b46:	fa82 f24c 	uadd8	r2, r2, ip
    4b4a:	f100 0008 	add.w	r0, r0, #8
    4b4e:	faa4 f28c 	sel	r2, r4, ip
    4b52:	fa83 f34c 	uadd8	r3, r3, ip
    4b56:	faa2 f38c 	sel	r3, r2, ip
    4b5a:	b9e3      	cbnz	r3, 4b96 <strlen+0x96>
    4b5c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
    4b60:	fa82 f24c 	uadd8	r2, r2, ip
    4b64:	f100 0008 	add.w	r0, r0, #8
    4b68:	faa4 f28c 	sel	r2, r4, ip
    4b6c:	fa83 f34c 	uadd8	r3, r3, ip
    4b70:	faa2 f38c 	sel	r3, r2, ip
    4b74:	b97b      	cbnz	r3, 4b96 <strlen+0x96>
    4b76:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
    4b7a:	f101 0120 	add.w	r1, r1, #32
    4b7e:	fa82 f24c 	uadd8	r2, r2, ip
    4b82:	f100 0008 	add.w	r0, r0, #8
    4b86:	faa4 f28c 	sel	r2, r4, ip
    4b8a:	fa83 f34c 	uadd8	r3, r3, ip
    4b8e:	faa2 f38c 	sel	r3, r2, ip
    4b92:	2b00      	cmp	r3, #0
    4b94:	d0c6      	beq.n	4b24 <strlen+0x24>
    4b96:	2a00      	cmp	r2, #0
    4b98:	bf04      	itt	eq
    4b9a:	3004      	addeq	r0, #4
    4b9c:	461a      	moveq	r2, r3
    4b9e:	ba12      	rev	r2, r2
    4ba0:	fab2 f282 	clz	r2, r2
    4ba4:	e8fd 4502 	ldrd	r4, r5, [sp], #8
    4ba8:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
    4bac:	4770      	bx	lr
    4bae:	e9d1 2300 	ldrd	r2, r3, [r1]
    4bb2:	f004 0503 	and.w	r5, r4, #3
    4bb6:	f1c4 0000 	rsb	r0, r4, #0
    4bba:	ea4f 05c5 	mov.w	r5, r5, lsl #3
    4bbe:	f014 0f04 	tst.w	r4, #4
    4bc2:	f891 f040 	pld	[r1, #64]	; 0x40
    4bc6:	fa0c f505 	lsl.w	r5, ip, r5
    4bca:	ea62 0205 	orn	r2, r2, r5
    4bce:	bf1c      	itt	ne
    4bd0:	ea63 0305 	ornne	r3, r3, r5
    4bd4:	4662      	movne	r2, ip
    4bd6:	f04f 0400 	mov.w	r4, #0
    4bda:	e7a9      	b.n	4b30 <strlen+0x30>

00004bdc <__utoa>:
    4bdc:	b5f0      	push	{r4, r5, r6, r7, lr}
    4bde:	f8df e078 	ldr.w	lr, [pc, #120]	; 4c58 <__utoa+0x7c>
    4be2:	4616      	mov	r6, r2
    4be4:	4604      	mov	r4, r0
    4be6:	460f      	mov	r7, r1
    4be8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    4bec:	b08b      	sub	sp, #44	; 0x2c
    4bee:	466d      	mov	r5, sp
    4bf0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    4bf2:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    4bf6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    4bf8:	e89e 0003 	ldmia.w	lr, {r0, r1}
    4bfc:	1eb3      	subs	r3, r6, #2
    4bfe:	f845 0b04 	str.w	r0, [r5], #4
    4c02:	2b22      	cmp	r3, #34	; 0x22
    4c04:	7029      	strb	r1, [r5, #0]
    4c06:	d822      	bhi.n	4c4e <__utoa+0x72>
    4c08:	1e7d      	subs	r5, r7, #1
    4c0a:	4628      	mov	r0, r5
    4c0c:	2200      	movs	r2, #0
    4c0e:	e000      	b.n	4c12 <__utoa+0x36>
    4c10:	461a      	mov	r2, r3
    4c12:	fbb4 f1f6 	udiv	r1, r4, r6
    4c16:	ab0a      	add	r3, sp, #40	; 0x28
    4c18:	fb06 4411 	mls	r4, r6, r1, r4
    4c1c:	4423      	add	r3, r4
    4c1e:	460c      	mov	r4, r1
    4c20:	f813 3c28 	ldrb.w	r3, [r3, #-40]
    4c24:	f800 3f01 	strb.w	r3, [r0, #1]!
    4c28:	1c53      	adds	r3, r2, #1
    4c2a:	2900      	cmp	r1, #0
    4c2c:	d1f0      	bne.n	4c10 <__utoa+0x34>
    4c2e:	54f9      	strb	r1, [r7, r3]
    4c30:	18bb      	adds	r3, r7, r2
    4c32:	b14a      	cbz	r2, 4c48 <__utoa+0x6c>
    4c34:	7819      	ldrb	r1, [r3, #0]
    4c36:	7868      	ldrb	r0, [r5, #1]
    4c38:	f805 1f01 	strb.w	r1, [r5, #1]!
    4c3c:	3401      	adds	r4, #1
    4c3e:	1b11      	subs	r1, r2, r4
    4c40:	428c      	cmp	r4, r1
    4c42:	f803 0901 	strb.w	r0, [r3], #-1
    4c46:	dbf5      	blt.n	4c34 <__utoa+0x58>
    4c48:	4638      	mov	r0, r7
    4c4a:	b00b      	add	sp, #44	; 0x2c
    4c4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4c4e:	2000      	movs	r0, #0
    4c50:	7038      	strb	r0, [r7, #0]
    4c52:	b00b      	add	sp, #44	; 0x2c
    4c54:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4c56:	bf00      	nop
    4c58:	000052e4 	.word	0x000052e4

00004c5c <utoa>:
    4c5c:	f7ff bfbe 	b.w	4bdc <__utoa>

00004c60 <__register_exitproc>:
    4c60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    4c64:	4d2c      	ldr	r5, [pc, #176]	; (4d18 <__register_exitproc+0xb8>)
    4c66:	4606      	mov	r6, r0
    4c68:	6828      	ldr	r0, [r5, #0]
    4c6a:	4698      	mov	r8, r3
    4c6c:	460f      	mov	r7, r1
    4c6e:	4691      	mov	r9, r2
    4c70:	f000 f882 	bl	4d78 <__retarget_lock_acquire_recursive>
    4c74:	4b29      	ldr	r3, [pc, #164]	; (4d1c <__register_exitproc+0xbc>)
    4c76:	681c      	ldr	r4, [r3, #0]
    4c78:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
    4c7c:	2b00      	cmp	r3, #0
    4c7e:	d03e      	beq.n	4cfe <__register_exitproc+0x9e>
    4c80:	685a      	ldr	r2, [r3, #4]
    4c82:	2a1f      	cmp	r2, #31
    4c84:	dc1c      	bgt.n	4cc0 <__register_exitproc+0x60>
    4c86:	f102 0e01 	add.w	lr, r2, #1
    4c8a:	b176      	cbz	r6, 4caa <__register_exitproc+0x4a>
    4c8c:	eb03 0182 	add.w	r1, r3, r2, lsl #2
    4c90:	2401      	movs	r4, #1
    4c92:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
    4c96:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
    4c9a:	4094      	lsls	r4, r2
    4c9c:	4320      	orrs	r0, r4
    4c9e:	2e02      	cmp	r6, #2
    4ca0:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
    4ca4:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
    4ca8:	d023      	beq.n	4cf2 <__register_exitproc+0x92>
    4caa:	3202      	adds	r2, #2
    4cac:	f8c3 e004 	str.w	lr, [r3, #4]
    4cb0:	6828      	ldr	r0, [r5, #0]
    4cb2:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
    4cb6:	f000 f861 	bl	4d7c <__retarget_lock_release_recursive>
    4cba:	2000      	movs	r0, #0
    4cbc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    4cc0:	4b17      	ldr	r3, [pc, #92]	; (4d20 <__register_exitproc+0xc0>)
    4cc2:	b30b      	cbz	r3, 4d08 <__register_exitproc+0xa8>
    4cc4:	f44f 70c8 	mov.w	r0, #400	; 0x190
    4cc8:	f3af 8000 	nop.w
    4ccc:	4603      	mov	r3, r0
    4cce:	b1d8      	cbz	r0, 4d08 <__register_exitproc+0xa8>
    4cd0:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
    4cd4:	6002      	str	r2, [r0, #0]
    4cd6:	2100      	movs	r1, #0
    4cd8:	6041      	str	r1, [r0, #4]
    4cda:	460a      	mov	r2, r1
    4cdc:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
    4ce0:	f04f 0e01 	mov.w	lr, #1
    4ce4:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
    4ce8:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
    4cec:	2e00      	cmp	r6, #0
    4cee:	d0dc      	beq.n	4caa <__register_exitproc+0x4a>
    4cf0:	e7cc      	b.n	4c8c <__register_exitproc+0x2c>
    4cf2:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
    4cf6:	430c      	orrs	r4, r1
    4cf8:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
    4cfc:	e7d5      	b.n	4caa <__register_exitproc+0x4a>
    4cfe:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
    4d02:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
    4d06:	e7bb      	b.n	4c80 <__register_exitproc+0x20>
    4d08:	6828      	ldr	r0, [r5, #0]
    4d0a:	f000 f837 	bl	4d7c <__retarget_lock_release_recursive>
    4d0e:	f04f 30ff 	mov.w	r0, #4294967295
    4d12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    4d16:	bf00      	nop
    4d18:	20000538 	.word	0x20000538
    4d1c:	000052e0 	.word	0x000052e0
    4d20:	00000000 	.word	0x00000000

00004d24 <register_fini>:
    4d24:	4b02      	ldr	r3, [pc, #8]	; (4d30 <register_fini+0xc>)
    4d26:	b113      	cbz	r3, 4d2e <register_fini+0xa>
    4d28:	4802      	ldr	r0, [pc, #8]	; (4d34 <register_fini+0x10>)
    4d2a:	f000 b805 	b.w	4d38 <atexit>
    4d2e:	4770      	bx	lr
    4d30:	00000000 	.word	0x00000000
    4d34:	00004d45 	.word	0x00004d45

00004d38 <atexit>:
    4d38:	2300      	movs	r3, #0
    4d3a:	4601      	mov	r1, r0
    4d3c:	461a      	mov	r2, r3
    4d3e:	4618      	mov	r0, r3
    4d40:	f7ff bf8e 	b.w	4c60 <__register_exitproc>

00004d44 <__libc_fini_array>:
    4d44:	b538      	push	{r3, r4, r5, lr}
    4d46:	4c0a      	ldr	r4, [pc, #40]	; (4d70 <__libc_fini_array+0x2c>)
    4d48:	4d0a      	ldr	r5, [pc, #40]	; (4d74 <__libc_fini_array+0x30>)
    4d4a:	1b64      	subs	r4, r4, r5
    4d4c:	10a4      	asrs	r4, r4, #2
    4d4e:	d00a      	beq.n	4d66 <__libc_fini_array+0x22>
    4d50:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
    4d54:	3b01      	subs	r3, #1
    4d56:	eb05 0583 	add.w	r5, r5, r3, lsl #2
    4d5a:	3c01      	subs	r4, #1
    4d5c:	f855 3904 	ldr.w	r3, [r5], #-4
    4d60:	4798      	blx	r3
    4d62:	2c00      	cmp	r4, #0
    4d64:	d1f9      	bne.n	4d5a <__libc_fini_array+0x16>
    4d66:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    4d6a:	f000 badb 	b.w	5324 <_fini>
    4d6e:	bf00      	nop
    4d70:	00005334 	.word	0x00005334
    4d74:	00005330 	.word	0x00005330

00004d78 <__retarget_lock_acquire_recursive>:
    4d78:	4770      	bx	lr
    4d7a:	bf00      	nop

00004d7c <__retarget_lock_release_recursive>:
    4d7c:	4770      	bx	lr
    4d7e:	bf00      	nop
    4d80:	00333231 	.word	0x00333231
    4d84:	756c6156 	.word	0x756c6156
    4d88:	002c7365 	.word	0x002c7365
    4d8c:	0a333231 	.word	0x0a333231
    4d90:	0000000d 	.word	0x0000000d
    4d94:	756e654d 	.word	0x756e654d
    4d98:	0a0d3a20 	.word	0x0a0d3a20
    4d9c:	00000000 	.word	0x00000000
    4da0:	2d2d2020 	.word	0x2d2d2020
    4da4:	6c655320 	.word	0x6c655320
    4da8:	20746365 	.word	0x20746365
    4dac:	20656874 	.word	0x20656874
    4db0:	69746361 	.word	0x69746361
    4db4:	0d3a6e6f 	.word	0x0d3a6e6f
    4db8:	0000000a 	.word	0x0000000a
    4dbc:	3a302020 	.word	0x3a302020
    4dc0:	74655320 	.word	0x74655320
    4dc4:	61747320 	.word	0x61747320
    4dc8:	7261646e 	.word	0x7261646e
    4dcc:	69662064 	.word	0x69662064
    4dd0:	7265746c 	.word	0x7265746c
    4dd4:	20444920 	.word	0x20444920
    4dd8:	30203a30 	.word	0x30203a30
    4ddc:	41353478 	.word	0x41353478
    4de0:	7473202c 	.word	0x7473202c
    4de4:	2065726f 	.word	0x2065726f
    4de8:	6f746e69 	.word	0x6f746e69
    4dec:	20785220 	.word	0x20785220
    4df0:	66667562 	.word	0x66667562
    4df4:	202e7265 	.word	0x202e7265
    4df8:	00000a0d 	.word	0x00000a0d
    4dfc:	3a312020 	.word	0x3a312020
    4e00:	74655320 	.word	0x74655320
    4e04:	61747320 	.word	0x61747320
    4e08:	7261646e 	.word	0x7261646e
    4e0c:	69662064 	.word	0x69662064
    4e10:	7265746c 	.word	0x7265746c
    4e14:	20444920 	.word	0x20444920
    4e18:	30203a31 	.word	0x30203a31
    4e1c:	39363478 	.word	0x39363478
    4e20:	7473202c 	.word	0x7473202c
    4e24:	2065726f 	.word	0x2065726f
    4e28:	6f746e69 	.word	0x6f746e69
    4e2c:	20785220 	.word	0x20785220
    4e30:	4f464946 	.word	0x4f464946
    4e34:	202e3020 	.word	0x202e3020
    4e38:	00000a0d 	.word	0x00000a0d
    4e3c:	3a322020 	.word	0x3a322020
    4e40:	6e655320 	.word	0x6e655320
    4e44:	44462064 	.word	0x44462064
    4e48:	61747320 	.word	0x61747320
    4e4c:	7261646e 	.word	0x7261646e
    4e50:	656d2064 	.word	0x656d2064
    4e54:	67617373 	.word	0x67617373
    4e58:	69772065 	.word	0x69772065
    4e5c:	49206874 	.word	0x49206874
    4e60:	30203a44 	.word	0x30203a44
    4e64:	41353478 	.word	0x41353478
    4e68:	646e6120 	.word	0x646e6120
    4e6c:	20343620 	.word	0x20343620
    4e70:	65747962 	.word	0x65747962
    4e74:	74616420 	.word	0x74616420
    4e78:	20302061 	.word	0x20302061
    4e7c:	36206f74 	.word	0x36206f74
    4e80:	0d202e33 	.word	0x0d202e33
    4e84:	0000000a 	.word	0x0000000a
    4e88:	3a332020 	.word	0x3a332020
    4e8c:	6e655320 	.word	0x6e655320
    4e90:	44462064 	.word	0x44462064
    4e94:	61747320 	.word	0x61747320
    4e98:	7261646e 	.word	0x7261646e
    4e9c:	656d2064 	.word	0x656d2064
    4ea0:	67617373 	.word	0x67617373
    4ea4:	69772065 	.word	0x69772065
    4ea8:	49206874 	.word	0x49206874
    4eac:	30203a44 	.word	0x30203a44
    4eb0:	39363478 	.word	0x39363478
    4eb4:	646e6120 	.word	0x646e6120
    4eb8:	20343620 	.word	0x20343620
    4ebc:	65747962 	.word	0x65747962
    4ec0:	74616420 	.word	0x74616420
    4ec4:	32312061 	.word	0x32312061
    4ec8:	6f742038 	.word	0x6f742038
    4ecc:	31393120 	.word	0x31393120
    4ed0:	0a0d202e 	.word	0x0a0d202e
    4ed4:	00000000 	.word	0x00000000
    4ed8:	3a342020 	.word	0x3a342020
    4edc:	74655320 	.word	0x74655320
    4ee0:	74786520 	.word	0x74786520
    4ee4:	65646e65 	.word	0x65646e65
    4ee8:	69662064 	.word	0x69662064
    4eec:	7265746c 	.word	0x7265746c
    4ef0:	20444920 	.word	0x20444920
    4ef4:	30203a30 	.word	0x30203a30
    4ef8:	30303178 	.word	0x30303178
    4efc:	41303030 	.word	0x41303030
    4f00:	73202c35 	.word	0x73202c35
    4f04:	65726f74 	.word	0x65726f74
    4f08:	746e6920 	.word	0x746e6920
    4f0c:	7852206f 	.word	0x7852206f
    4f10:	66756220 	.word	0x66756220
    4f14:	2e726566 	.word	0x2e726566
    4f18:	000a0d20 	.word	0x000a0d20
    4f1c:	3a352020 	.word	0x3a352020
    4f20:	74655320 	.word	0x74655320
    4f24:	74786520 	.word	0x74786520
    4f28:	65646e65 	.word	0x65646e65
    4f2c:	69662064 	.word	0x69662064
    4f30:	7265746c 	.word	0x7265746c
    4f34:	20444920 	.word	0x20444920
    4f38:	30203a31 	.word	0x30203a31
    4f3c:	30303178 	.word	0x30303178
    4f40:	39303030 	.word	0x39303030
    4f44:	73202c36 	.word	0x73202c36
    4f48:	65726f74 	.word	0x65726f74
    4f4c:	746e6920 	.word	0x746e6920
    4f50:	7852206f 	.word	0x7852206f
    4f54:	46494620 	.word	0x46494620
    4f58:	2e31204f 	.word	0x2e31204f
    4f5c:	000a0d20 	.word	0x000a0d20
    4f60:	3a362020 	.word	0x3a362020
    4f64:	6e655320 	.word	0x6e655320
    4f68:	44462064 	.word	0x44462064
    4f6c:	74786520 	.word	0x74786520
    4f70:	65646e65 	.word	0x65646e65
    4f74:	656d2064 	.word	0x656d2064
    4f78:	67617373 	.word	0x67617373
    4f7c:	69772065 	.word	0x69772065
    4f80:	49206874 	.word	0x49206874
    4f84:	30203a44 	.word	0x30203a44
    4f88:	30303178 	.word	0x30303178
    4f8c:	41303030 	.word	0x41303030
    4f90:	6e612035 	.word	0x6e612035
    4f94:	34362064 	.word	0x34362064
    4f98:	74796220 	.word	0x74796220
    4f9c:	61642065 	.word	0x61642065
    4fa0:	30206174 	.word	0x30206174
    4fa4:	206f7420 	.word	0x206f7420
    4fa8:	202e3336 	.word	0x202e3336
    4fac:	00000a0d 	.word	0x00000a0d
    4fb0:	3a372020 	.word	0x3a372020
    4fb4:	6e655320 	.word	0x6e655320
    4fb8:	44462064 	.word	0x44462064
    4fbc:	74786520 	.word	0x74786520
    4fc0:	65646e65 	.word	0x65646e65
    4fc4:	656d2064 	.word	0x656d2064
    4fc8:	67617373 	.word	0x67617373
    4fcc:	69772065 	.word	0x69772065
    4fd0:	49206874 	.word	0x49206874
    4fd4:	30203a44 	.word	0x30203a44
    4fd8:	30303178 	.word	0x30303178
    4fdc:	39303030 	.word	0x39303030
    4fe0:	6e612036 	.word	0x6e612036
    4fe4:	34362064 	.word	0x34362064
    4fe8:	74796220 	.word	0x74796220
    4fec:	61642065 	.word	0x61642065
    4ff0:	31206174 	.word	0x31206174
    4ff4:	74203832 	.word	0x74203832
    4ff8:	3931206f 	.word	0x3931206f
    4ffc:	0d202e31 	.word	0x0d202e31
    5000:	0000000a 	.word	0x0000000a
    5004:	3a612020 	.word	0x3a612020
    5008:	6e655320 	.word	0x6e655320
    500c:	6f6e2064 	.word	0x6f6e2064
    5010:	6c616d72 	.word	0x6c616d72
    5014:	61747320 	.word	0x61747320
    5018:	7261646e 	.word	0x7261646e
    501c:	656d2064 	.word	0x656d2064
    5020:	67617373 	.word	0x67617373
    5024:	69772065 	.word	0x69772065
    5028:	49206874 	.word	0x49206874
    502c:	30203a44 	.word	0x30203a44
    5030:	39363478 	.word	0x39363478
    5034:	646e6120 	.word	0x646e6120
    5038:	62203820 	.word	0x62203820
    503c:	20657479 	.word	0x20657479
    5040:	61746164 	.word	0x61746164
    5044:	74203020 	.word	0x74203020
    5048:	2e37206f 	.word	0x2e37206f
    504c:	000a0d20 	.word	0x000a0d20
    5050:	3a682020 	.word	0x3a682020
    5054:	73694420 	.word	0x73694420
    5058:	79616c70 	.word	0x79616c70
    505c:	6e656d20 	.word	0x6e656d20
    5060:	0a0d2075 	.word	0x0a0d2075
    5064:	00000a0d 	.word	0x00000a0d
    5068:	682f2e2e 	.word	0x682f2e2e
    506c:	732f6c61 	.word	0x732f6c61
    5070:	682f6372 	.word	0x682f6372
    5074:	635f6c61 	.word	0x635f6c61
    5078:	615f6e61 	.word	0x615f6e61
    507c:	636e7973 	.word	0x636e7973
    5080:	0000632e 	.word	0x0000632e
    5084:	682f2e2e 	.word	0x682f2e2e
    5088:	732f6c61 	.word	0x732f6c61
    508c:	682f6372 	.word	0x682f6372
    5090:	695f6c61 	.word	0x695f6c61
    5094:	6d5f6332 	.word	0x6d5f6332
    5098:	7973615f 	.word	0x7973615f
    509c:	632e636e 	.word	0x632e636e
    50a0:	00000000 	.word	0x00000000
    50a4:	682f2e2e 	.word	0x682f2e2e
    50a8:	732f6c61 	.word	0x732f6c61
    50ac:	682f6372 	.word	0x682f6372
    50b0:	735f6c61 	.word	0x735f6c61
    50b4:	6d5f6970 	.word	0x6d5f6970
    50b8:	6e79735f 	.word	0x6e79735f
    50bc:	00632e63 	.word	0x00632e63
    50c0:	682f2e2e 	.word	0x682f2e2e
    50c4:	732f6c61 	.word	0x732f6c61
    50c8:	682f6372 	.word	0x682f6372
    50cc:	745f6c61 	.word	0x745f6c61
    50d0:	72656d69 	.word	0x72656d69
    50d4:	0000632e 	.word	0x0000632e
    50d8:	682f2e2e 	.word	0x682f2e2e
    50dc:	752f6c61 	.word	0x752f6c61
    50e0:	736c6974 	.word	0x736c6974
    50e4:	6372732f 	.word	0x6372732f
    50e8:	6974752f 	.word	0x6974752f
    50ec:	6c5f736c 	.word	0x6c5f736c
    50f0:	2e747369 	.word	0x2e747369
    50f4:	00000063 	.word	0x00000063

000050f8 <user_mux_confs>:
    50f8:	00000100 00000000 00000000 00000000     ................
	...

0000513c <channel_confs>:
    513c:	0000060c 00000000 00000000 00000000     ................
	...

0000517c <interrupt_cfg>:
	...
    51fc:	682f2e2e 722f6c70 682f6374 725f6c70     ../hpl/rtc/hpl_r
    520c:	632e6374 00000000 40003000 40003400     tc.c.....0.@.4.@
    521c:	41012000 41014000 43000000 43000400     . .A.@.A...C...C
    522c:	43000800 43000c00                       ...C...C

00005234 <_i2cms>:
    5234:	00000001 00200014 00000100 00003635     ...... .....56..
    5244:	00d70000 00b71b00 00000005 00200014     .............. .
    5254:	00000100 00003635 00d70000 00b71b00     ....56..........

00005264 <sercomspi_regs>:
    5264:	0020000c 00020000 00000000 01ff0077     .. .........w...
    5274:	20000c00 02000000 00000000 ff007700     ... .........w..
    5284:	00000601 682f2e2e 732f6c70 6f637265     ....../hpl/serco
    5294:	70682f6d 65735f6c 6d6f6372 0000632e     m/hpl_sercom.c..

000052a4 <_usb_ep_cfgs>:
    52a4:	200008a8 00000000 00000040 20000868     ... ....@...h.. 
    52b4:	00000000 00000040 20000828 00000000     ....@...(.. ....
    52c4:	00000040 752f2e2e 642f6273 63697665     @...../usb/devic
    52d4:	73752f65 2e636462 00000063              e/usbdc.c...

000052e0 <_global_impure_ptr>:
    52e0:	20000110 33323130 37363534 62613938     ... 0123456789ab
    52f0:	66656463 6a696867 6e6d6c6b 7271706f     cdefghijklmnopqr
    5300:	76757473 7a797877 00000000              stuvwxyz....

0000530c <_init>:
    530c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    530e:	bf00      	nop
    5310:	bcf8      	pop	{r3, r4, r5, r6, r7}
    5312:	bc08      	pop	{r3}
    5314:	469e      	mov	lr, r3
    5316:	4770      	bx	lr

00005318 <__init_array_start>:
    5318:	00004d25 	.word	0x00004d25

0000531c <__frame_dummy_init_array_entry>:
    531c:	00000289 00000791                       ........

00005324 <_fini>:
    5324:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5326:	bf00      	nop
    5328:	bcf8      	pop	{r3, r4, r5, r6, r7}
    532a:	bc08      	pop	{r3}
    532c:	469e      	mov	lr, r3
    532e:	4770      	bx	lr

00005330 <__fini_array_start>:
    5330:	00000265 	.word	0x00000265
