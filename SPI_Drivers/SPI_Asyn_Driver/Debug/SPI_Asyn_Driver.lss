
SPI_Asyn_Driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000b18  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000000  20000000  20000000  00010b18  2**0
                  CONTENTS
  2 .bss          0000006c  20000000  20000000  00020000  2**2
                  ALLOC
  3 .stack        00002004  2000006c  2000006c  00020000  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00010b18  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00010b40  2**0
                  CONTENTS, READONLY
  6 .debug_info   0001c0fb  00000000  00000000  00010b99  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001a35  00000000  00000000  0002cc94  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000a1b6  00000000  00000000  0002e6c9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000770  00000000  00000000  0003887f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000cd0  00000000  00000000  00038fef  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00016d5c  00000000  00000000  00039cbf  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000a0e0  00000000  00000000  00050a1b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00083ec7  00000000  00000000  0005aafb  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00001328  00000000  00000000  000de9c4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
   0:	70 20 00 20 25 01 00 00 21 01 00 00 21 01 00 00     p . %...!...!...
	...
  2c:	21 01 00 00 00 00 00 00 00 00 00 00 21 01 00 00     !...........!...
  3c:	21 01 00 00 21 01 00 00 21 01 00 00 21 01 00 00     !...!...!...!...
  4c:	21 01 00 00 21 01 00 00 21 01 00 00 21 01 00 00     !...!...!...!...
  5c:	21 01 00 00 21 01 00 00 e1 06 00 00 21 01 00 00     !...!.......!...
  6c:	21 01 00 00 21 01 00 00 21 01 00 00 21 01 00 00     !...!...!...!...
  7c:	21 01 00 00 21 01 00 00 21 01 00 00 21 01 00 00     !...!...!...!...
  8c:	21 01 00 00 21 01 00 00 21 01 00 00 21 01 00 00     !...!...!...!...
  9c:	21 01 00 00 21 01 00 00 21 01 00 00 21 01 00 00     !...!...!...!...
  ac:	21 01 00 00 00 00 00 00                             !.......

000000b4 <__do_global_dtors_aux>:
  b4:	b510      	push	{r4, lr}
  b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
  b8:	7823      	ldrb	r3, [r4, #0]
  ba:	2b00      	cmp	r3, #0
  bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
  be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
  c0:	2b00      	cmp	r3, #0
  c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
  c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
  c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
  c8:	bf00      	nop
  ca:	2301      	movs	r3, #1
  cc:	7023      	strb	r3, [r4, #0]
  ce:	bd10      	pop	{r4, pc}
  d0:	20000000 	.word	0x20000000
  d4:	00000000 	.word	0x00000000
  d8:	00000b18 	.word	0x00000b18

000000dc <frame_dummy>:
  dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
  de:	b510      	push	{r4, lr}
  e0:	2b00      	cmp	r3, #0
  e2:	d003      	beq.n	ec <frame_dummy+0x10>
  e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
  e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
  e8:	e000      	b.n	ec <frame_dummy+0x10>
  ea:	bf00      	nop
  ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
  ee:	6803      	ldr	r3, [r0, #0]
  f0:	2b00      	cmp	r3, #0
  f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
  f4:	bd10      	pop	{r4, pc}
  f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
  f8:	2b00      	cmp	r3, #0
  fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
  fc:	4798      	blx	r3
  fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
 100:	00000000 	.word	0x00000000
 104:	20000004 	.word	0x20000004
 108:	00000b18 	.word	0x00000b18
 10c:	00000b18 	.word	0x00000b18
 110:	00000000 	.word	0x00000000

00000114 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
 114:	b510      	push	{r4, lr}
	system_init();
 116:	4b01      	ldr	r3, [pc, #4]	; (11c <atmel_start_init+0x8>)
 118:	4798      	blx	r3
}
 11a:	bd10      	pop	{r4, pc}
 11c:	00000321 	.word	0x00000321

00000120 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
 120:	e7fe      	b.n	120 <Dummy_Handler>
	...

00000124 <Reset_Handler>:
{
 124:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
 126:	4a2a      	ldr	r2, [pc, #168]	; (1d0 <Reset_Handler+0xac>)
 128:	4b2a      	ldr	r3, [pc, #168]	; (1d4 <Reset_Handler+0xb0>)
 12a:	429a      	cmp	r2, r3
 12c:	d011      	beq.n	152 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
 12e:	001a      	movs	r2, r3
 130:	4b29      	ldr	r3, [pc, #164]	; (1d8 <Reset_Handler+0xb4>)
 132:	429a      	cmp	r2, r3
 134:	d20d      	bcs.n	152 <Reset_Handler+0x2e>
 136:	4a29      	ldr	r2, [pc, #164]	; (1dc <Reset_Handler+0xb8>)
 138:	3303      	adds	r3, #3
 13a:	1a9b      	subs	r3, r3, r2
 13c:	089b      	lsrs	r3, r3, #2
 13e:	3301      	adds	r3, #1
 140:	009b      	lsls	r3, r3, #2
 142:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
 144:	4823      	ldr	r0, [pc, #140]	; (1d4 <Reset_Handler+0xb0>)
 146:	4922      	ldr	r1, [pc, #136]	; (1d0 <Reset_Handler+0xac>)
 148:	588c      	ldr	r4, [r1, r2]
 14a:	5084      	str	r4, [r0, r2]
 14c:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
 14e:	429a      	cmp	r2, r3
 150:	d1fa      	bne.n	148 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
 152:	4a23      	ldr	r2, [pc, #140]	; (1e0 <Reset_Handler+0xbc>)
 154:	4b23      	ldr	r3, [pc, #140]	; (1e4 <Reset_Handler+0xc0>)
 156:	429a      	cmp	r2, r3
 158:	d20a      	bcs.n	170 <Reset_Handler+0x4c>
 15a:	43d3      	mvns	r3, r2
 15c:	4921      	ldr	r1, [pc, #132]	; (1e4 <Reset_Handler+0xc0>)
 15e:	185b      	adds	r3, r3, r1
 160:	2103      	movs	r1, #3
 162:	438b      	bics	r3, r1
 164:	3304      	adds	r3, #4
 166:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
 168:	2100      	movs	r1, #0
 16a:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
 16c:	4293      	cmp	r3, r2
 16e:	d1fc      	bne.n	16a <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
 170:	4a1d      	ldr	r2, [pc, #116]	; (1e8 <Reset_Handler+0xc4>)
 172:	21ff      	movs	r1, #255	; 0xff
 174:	4b1d      	ldr	r3, [pc, #116]	; (1ec <Reset_Handler+0xc8>)
 176:	438b      	bics	r3, r1
 178:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
 17a:	39fd      	subs	r1, #253	; 0xfd
 17c:	2390      	movs	r3, #144	; 0x90
 17e:	005b      	lsls	r3, r3, #1
 180:	4a1b      	ldr	r2, [pc, #108]	; (1f0 <Reset_Handler+0xcc>)
 182:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
 184:	4a1b      	ldr	r2, [pc, #108]	; (1f4 <Reset_Handler+0xd0>)
 186:	78d3      	ldrb	r3, [r2, #3]
 188:	2503      	movs	r5, #3
 18a:	43ab      	bics	r3, r5
 18c:	2402      	movs	r4, #2
 18e:	4323      	orrs	r3, r4
 190:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
 192:	78d3      	ldrb	r3, [r2, #3]
 194:	270c      	movs	r7, #12
 196:	43bb      	bics	r3, r7
 198:	2608      	movs	r6, #8
 19a:	4333      	orrs	r3, r6
 19c:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
 19e:	4b16      	ldr	r3, [pc, #88]	; (1f8 <Reset_Handler+0xd4>)
 1a0:	7b98      	ldrb	r0, [r3, #14]
 1a2:	2230      	movs	r2, #48	; 0x30
 1a4:	4390      	bics	r0, r2
 1a6:	2220      	movs	r2, #32
 1a8:	4310      	orrs	r0, r2
 1aa:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
 1ac:	7b99      	ldrb	r1, [r3, #14]
 1ae:	43b9      	bics	r1, r7
 1b0:	4331      	orrs	r1, r6
 1b2:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
 1b4:	7b9a      	ldrb	r2, [r3, #14]
 1b6:	43aa      	bics	r2, r5
 1b8:	4322      	orrs	r2, r4
 1ba:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
 1bc:	4a0f      	ldr	r2, [pc, #60]	; (1fc <Reset_Handler+0xd8>)
 1be:	6853      	ldr	r3, [r2, #4]
 1c0:	2180      	movs	r1, #128	; 0x80
 1c2:	430b      	orrs	r3, r1
 1c4:	6053      	str	r3, [r2, #4]
        __libc_init_array();
 1c6:	4b0e      	ldr	r3, [pc, #56]	; (200 <Reset_Handler+0xdc>)
 1c8:	4798      	blx	r3
        main();
 1ca:	4b0e      	ldr	r3, [pc, #56]	; (204 <Reset_Handler+0xe0>)
 1cc:	4798      	blx	r3
 1ce:	e7fe      	b.n	1ce <Reset_Handler+0xaa>
 1d0:	00000b18 	.word	0x00000b18
 1d4:	20000000 	.word	0x20000000
 1d8:	20000000 	.word	0x20000000
 1dc:	20000004 	.word	0x20000004
 1e0:	20000000 	.word	0x20000000
 1e4:	2000006c 	.word	0x2000006c
 1e8:	e000ed00 	.word	0xe000ed00
 1ec:	00000000 	.word	0x00000000
 1f0:	41007000 	.word	0x41007000
 1f4:	41005000 	.word	0x41005000
 1f8:	41004800 	.word	0x41004800
 1fc:	41004000 	.word	0x41004000
 200:	00000a75 	.word	0x00000a75
 204:	00000a69 	.word	0x00000a69

00000208 <SPI_0_PORT_init>:
#include <hpl_pm_base.h>

struct spi_m_async_descriptor SPI_0;

void SPI_0_PORT_init(void)
{
 208:	b5f0      	push	{r4, r5, r6, r7, lr}
 20a:	46ce      	mov	lr, r9
 20c:	4647      	mov	r7, r8
 20e:	b580      	push	{r7, lr}
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = ~data;
}

static inline void hri_port_clear_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
 210:	21c0      	movs	r1, #192	; 0xc0
 212:	05c9      	lsls	r1, r1, #23
 214:	2380      	movs	r3, #128	; 0x80
 216:	009b      	lsls	r3, r3, #2
 218:	604b      	str	r3, [r1, #4]

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
 21a:	4b25      	ldr	r3, [pc, #148]	; (2b0 <SPI_0_PORT_init+0xa8>)
 21c:	4a25      	ldr	r2, [pc, #148]	; (2b4 <SPI_0_PORT_init+0xac>)
 21e:	629a      	str	r2, [r3, #40]	; 0x28
 220:	4a25      	ldr	r2, [pc, #148]	; (2b8 <SPI_0_PORT_init+0xb0>)
 222:	629a      	str	r2, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
 224:	2449      	movs	r4, #73	; 0x49
 226:	5d1a      	ldrb	r2, [r3, r4]
 228:	2004      	movs	r0, #4
 22a:	4382      	bics	r2, r0
 22c:	551a      	strb	r2, [r3, r4]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
 22e:	5d18      	ldrb	r0, [r3, r4]
	tmp &= ~PORT_PINCFG_PMUXEN;
 230:	2601      	movs	r6, #1
 232:	43b0      	bics	r0, r6
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
 234:	2201      	movs	r2, #1
 236:	4310      	orrs	r0, r2
 238:	b2c0      	uxtb	r0, r0
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
 23a:	5518      	strb	r0, [r3, r4]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
 23c:	2734      	movs	r7, #52	; 0x34
 23e:	5dd8      	ldrb	r0, [r3, r7]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
 240:	250f      	movs	r5, #15
 242:	4028      	ands	r0, r5
	tmp |= PORT_PMUX_PMUXO(data);
 244:	2420      	movs	r4, #32
 246:	46a1      	mov	r9, r4
 248:	464c      	mov	r4, r9
 24a:	4320      	orrs	r0, r4
 24c:	b2c0      	uxtb	r0, r0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
 24e:	55d8      	strb	r0, [r3, r7]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
 250:	2080      	movs	r0, #128	; 0x80
 252:	00c0      	lsls	r0, r0, #3
 254:	6148      	str	r0, [r1, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
 256:	6088      	str	r0, [r1, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
 258:	4818      	ldr	r0, [pc, #96]	; (2bc <SPI_0_PORT_init+0xb4>)
 25a:	6298      	str	r0, [r3, #40]	; 0x28
 25c:	20c0      	movs	r0, #192	; 0xc0
 25e:	0600      	lsls	r0, r0, #24
 260:	4684      	mov	ip, r0
 262:	6298      	str	r0, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
 264:	3716      	adds	r7, #22
 266:	5dd8      	ldrb	r0, [r3, r7]
	tmp &= ~PORT_PINCFG_PMUXEN;
 268:	43b0      	bics	r0, r6
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
 26a:	4310      	orrs	r0, r2
 26c:	b2c0      	uxtb	r0, r0
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
 26e:	55d8      	strb	r0, [r3, r7]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
 270:	2035      	movs	r0, #53	; 0x35
 272:	5c1f      	ldrb	r7, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
 274:	240f      	movs	r4, #15
 276:	43a7      	bics	r7, r4
	tmp |= PORT_PMUX_PMUXE(data);
 278:	3c0d      	subs	r4, #13
 27a:	4327      	orrs	r7, r4
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
 27c:	541f      	strb	r7, [r3, r0]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
 27e:	2780      	movs	r7, #128	; 0x80
 280:	013f      	lsls	r7, r7, #4
 282:	614f      	str	r7, [r1, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
 284:	608f      	str	r7, [r1, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
 286:	490e      	ldr	r1, [pc, #56]	; (2c0 <SPI_0_PORT_init+0xb8>)
 288:	6299      	str	r1, [r3, #40]	; 0x28
 28a:	4661      	mov	r1, ip
 28c:	6299      	str	r1, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
 28e:	274b      	movs	r7, #75	; 0x4b
 290:	5dd9      	ldrb	r1, [r3, r7]
	tmp &= ~PORT_PINCFG_PMUXEN;
 292:	43b1      	bics	r1, r6
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
 294:	4311      	orrs	r1, r2
 296:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
 298:	55d9      	strb	r1, [r3, r7]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
 29a:	5c1a      	ldrb	r2, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
 29c:	402a      	ands	r2, r5
	tmp |= PORT_PMUX_PMUXO(data);
 29e:	4649      	mov	r1, r9
 2a0:	430a      	orrs	r2, r1
 2a2:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
 2a4:	541a      	strb	r2, [r3, r0]

	// Set pin direction to output
	gpio_set_pin_direction(PA11, GPIO_DIRECTION_OUT);

	gpio_set_pin_function(PA11, PINMUX_PA11C_SERCOM0_PAD3);
}
 2a6:	bc0c      	pop	{r2, r3}
 2a8:	4690      	mov	r8, r2
 2aa:	4699      	mov	r9, r3
 2ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 2ae:	46c0      	nop			; (mov r8, r8)
 2b0:	41004400 	.word	0x41004400
 2b4:	40020200 	.word	0x40020200
 2b8:	c0020000 	.word	0xc0020000
 2bc:	40000400 	.word	0x40000400
 2c0:	40000800 	.word	0x40000800

000002c4 <SPI_0_CLOCK_init>:
			peripheral = (uint32_t)_pm_get_apbb_index(module);
			PM->APBBMASK.reg |= 1 << peripheral;
		}
		break;
	case PM_BUS_APBC:
		PM->APBCMASK.reg |= 1 << peripheral;
 2c4:	4a04      	ldr	r2, [pc, #16]	; (2d8 <SPI_0_CLOCK_init+0x14>)
 2c6:	6a13      	ldr	r3, [r2, #32]
 2c8:	2104      	movs	r1, #4
 2ca:	430b      	orrs	r3, r1
 2cc:	6213      	str	r3, [r2, #32]
}

static inline void hri_gclk_write_CLKCTRL_reg(const void *const hw, hri_gclk_clkctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->CLKCTRL.reg = data;
 2ce:	4a03      	ldr	r2, [pc, #12]	; (2dc <SPI_0_CLOCK_init+0x18>)
 2d0:	4b03      	ldr	r3, [pc, #12]	; (2e0 <SPI_0_CLOCK_init+0x1c>)
 2d2:	805a      	strh	r2, [r3, #2]

void SPI_0_CLOCK_init(void)
{
	_pm_enable_bus_clock(PM_BUS_APBC, SERCOM0);
	_gclk_enable_channel(SERCOM0_GCLK_ID_CORE, CONF_GCLK_SERCOM0_CORE_SRC);
}
 2d4:	4770      	bx	lr
 2d6:	46c0      	nop			; (mov r8, r8)
 2d8:	40000400 	.word	0x40000400
 2dc:	00004014 	.word	0x00004014
 2e0:	40000c00 	.word	0x40000c00

000002e4 <SPI_0_init>:

void SPI_0_init(void)
{
 2e4:	b510      	push	{r4, lr}
	SPI_0_CLOCK_init();
 2e6:	4b04      	ldr	r3, [pc, #16]	; (2f8 <SPI_0_init+0x14>)
 2e8:	4798      	blx	r3
	spi_m_async_init(&SPI_0, SERCOM0);
 2ea:	4904      	ldr	r1, [pc, #16]	; (2fc <SPI_0_init+0x18>)
 2ec:	4804      	ldr	r0, [pc, #16]	; (300 <SPI_0_init+0x1c>)
 2ee:	4b05      	ldr	r3, [pc, #20]	; (304 <SPI_0_init+0x20>)
 2f0:	4798      	blx	r3
	SPI_0_PORT_init();
 2f2:	4b05      	ldr	r3, [pc, #20]	; (308 <SPI_0_init+0x24>)
 2f4:	4798      	blx	r3
}
 2f6:	bd10      	pop	{r4, pc}
 2f8:	000002c5 	.word	0x000002c5
 2fc:	42000800 	.word	0x42000800
 300:	20000024 	.word	0x20000024
 304:	000005e5 	.word	0x000005e5
 308:	00000209 	.word	0x00000209

0000030c <delay_driver_init>:

void delay_driver_init(void)
{
 30c:	b510      	push	{r4, lr}
	delay_init(SysTick);
 30e:	4802      	ldr	r0, [pc, #8]	; (318 <delay_driver_init+0xc>)
 310:	4b02      	ldr	r3, [pc, #8]	; (31c <delay_driver_init+0x10>)
 312:	4798      	blx	r3
}
 314:	bd10      	pop	{r4, pc}
 316:	46c0      	nop			; (mov r8, r8)
 318:	e000e010 	.word	0xe000e010
 31c:	000003d5 	.word	0x000003d5

00000320 <system_init>:

void system_init(void)
{
 320:	b570      	push	{r4, r5, r6, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
 322:	4b23      	ldr	r3, [pc, #140]	; (3b0 <system_init+0x90>)
 324:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
 326:	22c0      	movs	r2, #192	; 0xc0
 328:	05d2      	lsls	r2, r2, #23
 32a:	2304      	movs	r3, #4
 32c:	6153      	str	r3, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
 32e:	6093      	str	r3, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
 330:	4b20      	ldr	r3, [pc, #128]	; (3b4 <system_init+0x94>)
 332:	4921      	ldr	r1, [pc, #132]	; (3b8 <system_init+0x98>)
 334:	6299      	str	r1, [r3, #40]	; 0x28
 336:	20c0      	movs	r0, #192	; 0xc0
 338:	0600      	lsls	r0, r0, #24
 33a:	6298      	str	r0, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
 33c:	2542      	movs	r5, #66	; 0x42
 33e:	5d5c      	ldrb	r4, [r3, r5]
	tmp &= ~PORT_PINCFG_PMUXEN;
 340:	2101      	movs	r1, #1
 342:	438c      	bics	r4, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
 344:	555c      	strb	r4, [r3, r5]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
 346:	2408      	movs	r4, #8
 348:	6154      	str	r4, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
 34a:	6094      	str	r4, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
 34c:	4c1b      	ldr	r4, [pc, #108]	; (3bc <system_init+0x9c>)
 34e:	629c      	str	r4, [r3, #40]	; 0x28
 350:	6298      	str	r0, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
 352:	3501      	adds	r5, #1
 354:	5d5c      	ldrb	r4, [r3, r5]
	tmp &= ~PORT_PINCFG_PMUXEN;
 356:	438c      	bics	r4, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
 358:	555c      	strb	r4, [r3, r5]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
 35a:	2410      	movs	r4, #16
 35c:	6154      	str	r4, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
 35e:	6094      	str	r4, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
 360:	4c17      	ldr	r4, [pc, #92]	; (3c0 <system_init+0xa0>)
 362:	629c      	str	r4, [r3, #40]	; 0x28
 364:	6298      	str	r0, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
 366:	3501      	adds	r5, #1
 368:	5d5c      	ldrb	r4, [r3, r5]
	tmp &= ~PORT_PINCFG_PMUXEN;
 36a:	438c      	bics	r4, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
 36c:	555c      	strb	r4, [r3, r5]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
 36e:	2480      	movs	r4, #128	; 0x80
 370:	0524      	lsls	r4, r4, #20
 372:	6194      	str	r4, [r2, #24]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
 374:	6094      	str	r4, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
 376:	2480      	movs	r4, #128	; 0x80
 378:	05e4      	lsls	r4, r4, #23
 37a:	629c      	str	r4, [r3, #40]	; 0x28
 37c:	4c11      	ldr	r4, [pc, #68]	; (3c4 <system_init+0xa4>)
 37e:	629c      	str	r4, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
 380:	3517      	adds	r5, #23
 382:	5d5c      	ldrb	r4, [r3, r5]
	tmp &= ~PORT_PINCFG_PMUXEN;
 384:	438c      	bics	r4, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
 386:	555c      	strb	r4, [r3, r5]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
 388:	2480      	movs	r4, #128	; 0x80
 38a:	00a4      	lsls	r4, r4, #2
 38c:	3539      	adds	r5, #57	; 0x39
 38e:	5154      	str	r4, [r2, r5]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
 390:	3d0c      	subs	r5, #12
 392:	5154      	str	r4, [r2, r5]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
 394:	22a8      	movs	r2, #168	; 0xa8
 396:	4c0c      	ldr	r4, [pc, #48]	; (3c8 <system_init+0xa8>)
 398:	509c      	str	r4, [r3, r2]
 39a:	5098      	str	r0, [r3, r2]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
 39c:	20c9      	movs	r0, #201	; 0xc9
 39e:	5c1a      	ldrb	r2, [r3, r0]
	tmp &= ~PORT_PINCFG_PMUXEN;
 3a0:	438a      	bics	r2, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
 3a2:	541a      	strb	r2, [r3, r0]
	// Set pin direction to output
	gpio_set_pin_direction(Write_Fail, GPIO_DIRECTION_OUT);

	gpio_set_pin_function(Write_Fail, GPIO_PIN_FUNCTION_OFF);

	SPI_0_init();
 3a4:	4b09      	ldr	r3, [pc, #36]	; (3cc <system_init+0xac>)
 3a6:	4798      	blx	r3

	delay_driver_init();
 3a8:	4b09      	ldr	r3, [pc, #36]	; (3d0 <system_init+0xb0>)
 3aa:	4798      	blx	r3
}
 3ac:	bd70      	pop	{r4, r5, r6, pc}
 3ae:	46c0      	nop			; (mov r8, r8)
 3b0:	00000671 	.word	0x00000671
 3b4:	41004400 	.word	0x41004400
 3b8:	40000004 	.word	0x40000004
 3bc:	40000008 	.word	0x40000008
 3c0:	40000010 	.word	0x40000010
 3c4:	c0000800 	.word	0xc0000800
 3c8:	40000200 	.word	0x40000200
 3cc:	000002e5 	.word	0x000002e5
 3d0:	0000030d 	.word	0x0000030d

000003d4 <delay_init>:

/**
 * \brief Initialize Delay driver
 */
void delay_init(void *const hw)
{
 3d4:	b510      	push	{r4, lr}
	_delay_init(hardware = hw);
 3d6:	4b02      	ldr	r3, [pc, #8]	; (3e0 <delay_init+0xc>)
 3d8:	6018      	str	r0, [r3, #0]
 3da:	4b02      	ldr	r3, [pc, #8]	; (3e4 <delay_init+0x10>)
 3dc:	4798      	blx	r3
}
 3de:	bd10      	pop	{r4, pc}
 3e0:	2000001c 	.word	0x2000001c
 3e4:	00000a55 	.word	0x00000a55

000003e8 <_spi_m_async_io_write>:
 *  \return ERR_NONE on success, or an error code on failure.
 *  \retval ERR_NONE Success, transfer started.
 *  \retval ERR_BUSY Busy.
 */
static int32_t _spi_m_async_io_write(struct io_descriptor *io, const uint8_t *const buf, const uint16_t length)
{
 3e8:	b570      	push	{r4, r5, r6, lr}
 3ea:	0004      	movs	r4, r0
 3ec:	000e      	movs	r6, r1
 3ee:	0015      	movs	r5, r2
	ASSERT(io);
 3f0:	1e43      	subs	r3, r0, #1
 3f2:	4198      	sbcs	r0, r3
 3f4:	b2c0      	uxtb	r0, r0
 3f6:	2228      	movs	r2, #40	; 0x28
 3f8:	32ff      	adds	r2, #255	; 0xff
 3fa:	490a      	ldr	r1, [pc, #40]	; (424 <_spi_m_async_io_write+0x3c>)
 3fc:	4b0a      	ldr	r3, [pc, #40]	; (428 <_spi_m_async_io_write+0x40>)
 3fe:	4798      	blx	r3
	struct spi_m_async_descriptor *spi = CONTAINER_OF(io, struct spi_m_async_descriptor, io);

	spi->xfer.rxbuf = NULL;
 400:	0023      	movs	r3, r4
 402:	2200      	movs	r2, #0
 404:	61a2      	str	r2, [r4, #24]
	spi->xfer.txbuf = (uint8_t *)buf;
 406:	6166      	str	r6, [r4, #20]
	spi->xfer.size  = length;
 408:	61e5      	str	r5, [r4, #28]
	spi->xfercnt    = 0;
 40a:	6222      	str	r2, [r4, #32]
	spi->xfer.rxbuf = NULL;
 40c:	3b24      	subs	r3, #36	; 0x24

	spi->stat = SPI_M_ASYNC_STATUS_BUSY;
 40e:	2110      	movs	r1, #16
 410:	322c      	adds	r2, #44	; 0x2c
 412:	5499      	strb	r1, [r3, r2]
	_spi_m_async_enable_tx(&spi->dev, true);
 414:	0020      	movs	r0, r4
 416:	3820      	subs	r0, #32
 418:	390f      	subs	r1, #15
 41a:	4b04      	ldr	r3, [pc, #16]	; (42c <_spi_m_async_io_write+0x44>)
 41c:	4798      	blx	r3

	return ERR_NONE;
}
 41e:	2000      	movs	r0, #0
 420:	bd70      	pop	{r4, r5, r6, pc}
 422:	46c0      	nop			; (mov r8, r8)
 424:	00000abc 	.word	0x00000abc
 428:	00000669 	.word	0x00000669
 42c:	000008a1 	.word	0x000008a1

00000430 <_spi_m_async_io_read>:
{
 430:	b570      	push	{r4, r5, r6, lr}
 432:	0004      	movs	r4, r0
 434:	000e      	movs	r6, r1
 436:	0015      	movs	r5, r2
	ASSERT(io);
 438:	1e43      	subs	r3, r0, #1
 43a:	4198      	sbcs	r0, r3
 43c:	b2c0      	uxtb	r0, r0
 43e:	2206      	movs	r2, #6
 440:	32ff      	adds	r2, #255	; 0xff
 442:	490c      	ldr	r1, [pc, #48]	; (474 <_spi_m_async_io_read+0x44>)
 444:	4b0c      	ldr	r3, [pc, #48]	; (478 <_spi_m_async_io_read+0x48>)
 446:	4798      	blx	r3
	spi->xfer.rxbuf = buf;
 448:	0023      	movs	r3, r4
 44a:	61a6      	str	r6, [r4, #24]
	spi->xfer.txbuf = NULL;
 44c:	2200      	movs	r2, #0
 44e:	6162      	str	r2, [r4, #20]
	spi->xfer.size  = length;
 450:	61e5      	str	r5, [r4, #28]
	spi->xfercnt    = 0;
 452:	6222      	str	r2, [r4, #32]
	spi->xfer.rxbuf = buf;
 454:	3b24      	subs	r3, #36	; 0x24
	spi->stat = SPI_M_ASYNC_STATUS_BUSY;
 456:	2110      	movs	r1, #16
 458:	322c      	adds	r2, #44	; 0x2c
 45a:	5499      	strb	r1, [r3, r2]
	_spi_m_async_enable_rx(&spi->dev, true);
 45c:	3c20      	subs	r4, #32
 45e:	390f      	subs	r1, #15
 460:	0020      	movs	r0, r4
 462:	4b06      	ldr	r3, [pc, #24]	; (47c <_spi_m_async_io_read+0x4c>)
 464:	4798      	blx	r3
	_spi_m_async_write_one(&spi->dev, SPI_DUMMY_CHAR);
 466:	4906      	ldr	r1, [pc, #24]	; (480 <_spi_m_async_io_read+0x50>)
 468:	0020      	movs	r0, r4
 46a:	4b06      	ldr	r3, [pc, #24]	; (484 <_spi_m_async_io_read+0x54>)
 46c:	4798      	blx	r3
}
 46e:	2000      	movs	r0, #0
 470:	bd70      	pop	{r4, r5, r6, pc}
 472:	46c0      	nop			; (mov r8, r8)
 474:	00000abc 	.word	0x00000abc
 478:	00000669 	.word	0x00000669
 47c:	000008dd 	.word	0x000008dd
 480:	000001ff 	.word	0x000001ff
 484:	00000961 	.word	0x00000961

00000488 <_spi_dev_error>:
{
 488:	b570      	push	{r4, r5, r6, lr}
 48a:	0004      	movs	r4, r0
 48c:	000e      	movs	r6, r1
	struct spi_m_async_descriptor *spi = CONTAINER_OF(dev, struct spi_m_async_descriptor, dev);
 48e:	1f05      	subs	r5, r0, #4
	_spi_m_async_enable_tx(dev, false);
 490:	2100      	movs	r1, #0
 492:	4b0a      	ldr	r3, [pc, #40]	; (4bc <_spi_dev_error+0x34>)
 494:	4798      	blx	r3
	_spi_m_async_enable_rx(dev, false);
 496:	2100      	movs	r1, #0
 498:	0020      	movs	r0, r4
 49a:	4b09      	ldr	r3, [pc, #36]	; (4c0 <_spi_dev_error+0x38>)
 49c:	4798      	blx	r3
	_spi_m_async_enable_tx_complete(dev, false);
 49e:	2100      	movs	r1, #0
 4a0:	0020      	movs	r0, r4
 4a2:	4b08      	ldr	r3, [pc, #32]	; (4c4 <_spi_dev_error+0x3c>)
 4a4:	4798      	blx	r3
	spi->stat = 0;
 4a6:	2200      	movs	r2, #0
 4a8:	232c      	movs	r3, #44	; 0x2c
 4aa:	54ea      	strb	r2, [r5, r3]
	if (spi->callbacks.cb_error) {
 4ac:	6b23      	ldr	r3, [r4, #48]	; 0x30
 4ae:	2b00      	cmp	r3, #0
 4b0:	d002      	beq.n	4b8 <_spi_dev_error+0x30>
		spi->callbacks.cb_error(spi, status);
 4b2:	0031      	movs	r1, r6
 4b4:	0028      	movs	r0, r5
 4b6:	4798      	blx	r3
}
 4b8:	bd70      	pop	{r4, r5, r6, pc}
 4ba:	46c0      	nop			; (mov r8, r8)
 4bc:	000008a1 	.word	0x000008a1
 4c0:	000008dd 	.word	0x000008dd
 4c4:	00000921 	.word	0x00000921

000004c8 <_spi_dev_complete>:
{
 4c8:	b510      	push	{r4, lr}
 4ca:	0004      	movs	r4, r0
	if (spi->xfercnt >= spi->xfer.size) {
 4cc:	6c02      	ldr	r2, [r0, #64]	; 0x40
 4ce:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 4d0:	429a      	cmp	r2, r3
 4d2:	d200      	bcs.n	4d6 <_spi_dev_complete+0xe>
}
 4d4:	bd10      	pop	{r4, pc}
		_spi_m_async_enable_tx_complete(dev, false);
 4d6:	2100      	movs	r1, #0
 4d8:	4b05      	ldr	r3, [pc, #20]	; (4f0 <_spi_dev_complete+0x28>)
 4da:	4798      	blx	r3
		spi->stat = 0;
 4dc:	1f23      	subs	r3, r4, #4
 4de:	2100      	movs	r1, #0
 4e0:	222c      	movs	r2, #44	; 0x2c
 4e2:	5499      	strb	r1, [r3, r2]
		if (spi->callbacks.cb_xfer) {
 4e4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 4e6:	2b00      	cmp	r3, #0
 4e8:	d0f4      	beq.n	4d4 <_spi_dev_complete+0xc>
	struct spi_m_async_descriptor *spi = CONTAINER_OF(dev, struct spi_m_async_descriptor, dev);
 4ea:	1f20      	subs	r0, r4, #4
			spi->callbacks.cb_xfer(spi);
 4ec:	4798      	blx	r3
}
 4ee:	e7f1      	b.n	4d4 <_spi_dev_complete+0xc>
 4f0:	00000921 	.word	0x00000921

000004f4 <_spi_dev_tx>:
{
 4f4:	b510      	push	{r4, lr}
 4f6:	0004      	movs	r4, r0
	if (!(dev->char_size > 1)) {
 4f8:	7903      	ldrb	r3, [r0, #4]
 4fa:	2b01      	cmp	r3, #1
 4fc:	d90d      	bls.n	51a <_spi_dev_tx+0x26>
		_spi_m_async_write_one(dev, ((uint16_t *)spi->xfer.txbuf)[spi->xfercnt++]);
 4fe:	6b41      	ldr	r1, [r0, #52]	; 0x34
 500:	6c03      	ldr	r3, [r0, #64]	; 0x40
 502:	1c58      	adds	r0, r3, #1
 504:	6420      	str	r0, [r4, #64]	; 0x40
 506:	005b      	lsls	r3, r3, #1
 508:	5a59      	ldrh	r1, [r3, r1]
 50a:	0020      	movs	r0, r4
 50c:	4b0c      	ldr	r3, [pc, #48]	; (540 <_spi_dev_tx+0x4c>)
 50e:	4798      	blx	r3
	if (spi->xfercnt == spi->xfer.size) {
 510:	6c22      	ldr	r2, [r4, #64]	; 0x40
 512:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 514:	429a      	cmp	r2, r3
 516:	d009      	beq.n	52c <_spi_dev_tx+0x38>
}
 518:	bd10      	pop	{r4, pc}
		_spi_m_async_write_one(dev, spi->xfer.txbuf[spi->xfercnt++]);
 51a:	6b41      	ldr	r1, [r0, #52]	; 0x34
 51c:	6c02      	ldr	r2, [r0, #64]	; 0x40
 51e:	1c50      	adds	r0, r2, #1
 520:	6420      	str	r0, [r4, #64]	; 0x40
 522:	5c89      	ldrb	r1, [r1, r2]
 524:	0020      	movs	r0, r4
 526:	4b06      	ldr	r3, [pc, #24]	; (540 <_spi_dev_tx+0x4c>)
 528:	4798      	blx	r3
 52a:	e7f1      	b.n	510 <_spi_dev_tx+0x1c>
		_spi_m_async_enable_tx(dev, false);
 52c:	2100      	movs	r1, #0
 52e:	0020      	movs	r0, r4
 530:	4b04      	ldr	r3, [pc, #16]	; (544 <_spi_dev_tx+0x50>)
 532:	4798      	blx	r3
		_spi_m_async_enable_tx_complete(dev, true);
 534:	2101      	movs	r1, #1
 536:	0020      	movs	r0, r4
 538:	4b03      	ldr	r3, [pc, #12]	; (548 <_spi_dev_tx+0x54>)
 53a:	4798      	blx	r3
}
 53c:	e7ec      	b.n	518 <_spi_dev_tx+0x24>
 53e:	46c0      	nop			; (mov r8, r8)
 540:	00000961 	.word	0x00000961
 544:	000008a1 	.word	0x000008a1
 548:	00000921 	.word	0x00000921

0000054c <_spi_dev_rx>:
{
 54c:	b570      	push	{r4, r5, r6, lr}
 54e:	0004      	movs	r4, r0
	if (spi->xfer.rxbuf) {
 550:	6b83      	ldr	r3, [r0, #56]	; 0x38
 552:	2b00      	cmp	r3, #0
 554:	d022      	beq.n	59c <_spi_dev_rx+0x50>
		if (!(dev->char_size > 1)) {
 556:	7902      	ldrb	r2, [r0, #4]
 558:	2a01      	cmp	r2, #1
 55a:	d917      	bls.n	58c <_spi_dev_rx+0x40>
			((uint16_t *)spi->xfer.rxbuf)[spi->xfercnt++] = (uint16_t)_spi_m_async_read_one(dev);
 55c:	6c05      	ldr	r5, [r0, #64]	; 0x40
 55e:	1c69      	adds	r1, r5, #1
 560:	6401      	str	r1, [r0, #64]	; 0x40
 562:	006d      	lsls	r5, r5, #1
 564:	195d      	adds	r5, r3, r5
 566:	4b1c      	ldr	r3, [pc, #112]	; (5d8 <_spi_dev_rx+0x8c>)
 568:	4798      	blx	r3
 56a:	8028      	strh	r0, [r5, #0]
	if (spi->xfercnt < spi->xfer.size) {
 56c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 56e:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 570:	4293      	cmp	r3, r2
 572:	d223      	bcs.n	5bc <_spi_dev_rx+0x70>
		if (spi->xfer.txbuf) {
 574:	6b62      	ldr	r2, [r4, #52]	; 0x34
 576:	2a00      	cmp	r2, #0
 578:	d01b      	beq.n	5b2 <_spi_dev_rx+0x66>
			if (!(dev->char_size > 1)) {
 57a:	7921      	ldrb	r1, [r4, #4]
 57c:	2901      	cmp	r1, #1
 57e:	d913      	bls.n	5a8 <_spi_dev_rx+0x5c>
				_spi_m_async_write_one(dev, ((uint16_t *)spi->xfer.txbuf)[spi->xfercnt]);
 580:	005b      	lsls	r3, r3, #1
 582:	5a99      	ldrh	r1, [r3, r2]
 584:	0020      	movs	r0, r4
 586:	4b15      	ldr	r3, [pc, #84]	; (5dc <_spi_dev_rx+0x90>)
 588:	4798      	blx	r3
}
 58a:	bd70      	pop	{r4, r5, r6, pc}
			spi->xfer.rxbuf[spi->xfercnt++] = (uint8_t)_spi_m_async_read_one(dev);
 58c:	6c05      	ldr	r5, [r0, #64]	; 0x40
 58e:	1c69      	adds	r1, r5, #1
 590:	6401      	str	r1, [r0, #64]	; 0x40
 592:	195d      	adds	r5, r3, r5
 594:	4b10      	ldr	r3, [pc, #64]	; (5d8 <_spi_dev_rx+0x8c>)
 596:	4798      	blx	r3
 598:	7028      	strb	r0, [r5, #0]
 59a:	e7e7      	b.n	56c <_spi_dev_rx+0x20>
		_spi_m_async_read_one(dev);
 59c:	4b0e      	ldr	r3, [pc, #56]	; (5d8 <_spi_dev_rx+0x8c>)
 59e:	4798      	blx	r3
		spi->xfercnt++;
 5a0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 5a2:	3301      	adds	r3, #1
 5a4:	6423      	str	r3, [r4, #64]	; 0x40
 5a6:	e7e1      	b.n	56c <_spi_dev_rx+0x20>
				_spi_m_async_write_one(dev, spi->xfer.txbuf[spi->xfercnt]);
 5a8:	5cd1      	ldrb	r1, [r2, r3]
 5aa:	0020      	movs	r0, r4
 5ac:	4b0b      	ldr	r3, [pc, #44]	; (5dc <_spi_dev_rx+0x90>)
 5ae:	4798      	blx	r3
 5b0:	e7eb      	b.n	58a <_spi_dev_rx+0x3e>
			_spi_m_async_write_one(dev, dev->dummy_byte);
 5b2:	88e1      	ldrh	r1, [r4, #6]
 5b4:	0020      	movs	r0, r4
 5b6:	4b09      	ldr	r3, [pc, #36]	; (5dc <_spi_dev_rx+0x90>)
 5b8:	4798      	blx	r3
 5ba:	e7e6      	b.n	58a <_spi_dev_rx+0x3e>
		_spi_m_async_enable_rx(dev, false);
 5bc:	2100      	movs	r1, #0
 5be:	0020      	movs	r0, r4
 5c0:	4b07      	ldr	r3, [pc, #28]	; (5e0 <_spi_dev_rx+0x94>)
 5c2:	4798      	blx	r3
		spi->stat = 0;
 5c4:	1f23      	subs	r3, r4, #4
 5c6:	2100      	movs	r1, #0
 5c8:	222c      	movs	r2, #44	; 0x2c
 5ca:	5499      	strb	r1, [r3, r2]
		if (spi->callbacks.cb_xfer) {
 5cc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 5ce:	2b00      	cmp	r3, #0
 5d0:	d0db      	beq.n	58a <_spi_dev_rx+0x3e>
	struct spi_m_async_descriptor *spi = CONTAINER_OF(dev, struct spi_m_async_descriptor, dev);
 5d2:	1f20      	subs	r0, r4, #4
			spi->callbacks.cb_xfer(spi);
 5d4:	4798      	blx	r3
}
 5d6:	e7d8      	b.n	58a <_spi_dev_rx+0x3e>
 5d8:	00000995 	.word	0x00000995
 5dc:	00000961 	.word	0x00000961
 5e0:	000008dd 	.word	0x000008dd

000005e4 <spi_m_async_init>:
{
 5e4:	b570      	push	{r4, r5, r6, lr}
 5e6:	0004      	movs	r4, r0
 5e8:	000e      	movs	r6, r1
	ASSERT(spi && hw);
 5ea:	2800      	cmp	r0, #0
 5ec:	d026      	beq.n	63c <spi_m_async_init+0x58>
 5ee:	0008      	movs	r0, r1
 5f0:	1e43      	subs	r3, r0, #1
 5f2:	4198      	sbcs	r0, r3
 5f4:	b2c0      	uxtb	r0, r0
 5f6:	22a5      	movs	r2, #165	; 0xa5
 5f8:	4911      	ldr	r1, [pc, #68]	; (640 <spi_m_async_init+0x5c>)
 5fa:	4b12      	ldr	r3, [pc, #72]	; (644 <spi_m_async_init+0x60>)
 5fc:	4798      	blx	r3
	spi->dev.prvt = (void *)hw;
 5fe:	6066      	str	r6, [r4, #4]
	rc            = _spi_m_async_init(&spi->dev, hw);
 600:	1d25      	adds	r5, r4, #4
 602:	0031      	movs	r1, r6
 604:	0028      	movs	r0, r5
 606:	4b10      	ldr	r3, [pc, #64]	; (648 <spi_m_async_init+0x64>)
 608:	4798      	blx	r3
	if (rc >= 0) {
 60a:	2800      	cmp	r0, #0
 60c:	db15      	blt.n	63a <spi_m_async_init+0x56>
		_spi_m_async_register_callback(&spi->dev, SPI_DEV_CB_TX, (FUNC_PTR)_spi_dev_tx);
 60e:	4a0f      	ldr	r2, [pc, #60]	; (64c <spi_m_async_init+0x68>)
 610:	2100      	movs	r1, #0
 612:	0028      	movs	r0, r5
 614:	4e0e      	ldr	r6, [pc, #56]	; (650 <spi_m_async_init+0x6c>)
 616:	47b0      	blx	r6
		_spi_m_async_register_callback(&spi->dev, SPI_DEV_CB_RX, (FUNC_PTR)_spi_dev_rx);
 618:	4a0e      	ldr	r2, [pc, #56]	; (654 <spi_m_async_init+0x70>)
 61a:	2101      	movs	r1, #1
 61c:	0028      	movs	r0, r5
 61e:	47b0      	blx	r6
		_spi_m_async_register_callback(&spi->dev, SPI_DEV_CB_COMPLETE, (FUNC_PTR)_spi_dev_complete);
 620:	4a0d      	ldr	r2, [pc, #52]	; (658 <spi_m_async_init+0x74>)
 622:	2102      	movs	r1, #2
 624:	0028      	movs	r0, r5
 626:	47b0      	blx	r6
		_spi_m_async_register_callback(&spi->dev, SPI_DEV_CB_ERROR, (FUNC_PTR)_spi_dev_error);
 628:	4a0c      	ldr	r2, [pc, #48]	; (65c <spi_m_async_init+0x78>)
 62a:	2103      	movs	r1, #3
 62c:	0028      	movs	r0, r5
 62e:	47b0      	blx	r6
	spi->io.read  = _spi_m_async_io_read;
 630:	4b0b      	ldr	r3, [pc, #44]	; (660 <spi_m_async_init+0x7c>)
 632:	62a3      	str	r3, [r4, #40]	; 0x28
	spi->io.write = _spi_m_async_io_write;
 634:	4b0b      	ldr	r3, [pc, #44]	; (664 <spi_m_async_init+0x80>)
 636:	6263      	str	r3, [r4, #36]	; 0x24
	return ERR_NONE;
 638:	2000      	movs	r0, #0
}
 63a:	bd70      	pop	{r4, r5, r6, pc}
 63c:	2000      	movs	r0, #0
 63e:	e7da      	b.n	5f6 <spi_m_async_init+0x12>
 640:	00000abc 	.word	0x00000abc
 644:	00000669 	.word	0x00000669
 648:	0000082d 	.word	0x0000082d
 64c:	000004f5 	.word	0x000004f5
 650:	000009c1 	.word	0x000009c1
 654:	0000054d 	.word	0x0000054d
 658:	000004c9 	.word	0x000004c9
 65c:	00000489 	.word	0x00000489
 660:	00000431 	.word	0x00000431
 664:	000003e9 	.word	0x000003e9

00000668 <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
 668:	2800      	cmp	r0, #0
 66a:	d100      	bne.n	66e <assert+0x6>
		__asm("BKPT #0");
 66c:	be00      	bkpt	0x0000
	}
	(void)file;
	(void)line;
}
 66e:	4770      	bx	lr

00000670 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
 670:	b510      	push	{r4, lr}
}

static inline void hri_nvmctrl_set_CTRLB_RWS_bf(const void *const hw, hri_nvmctrl_ctrlb_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLB.reg |= NVMCTRL_CTRLB_RWS(mask);
 672:	4b06      	ldr	r3, [pc, #24]	; (68c <_init_chip+0x1c>)
 674:	685a      	ldr	r2, [r3, #4]
 676:	605a      	str	r2, [r3, #4]
	hri_nvmctrl_set_CTRLB_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);

	_pm_init();
 678:	4b05      	ldr	r3, [pc, #20]	; (690 <_init_chip+0x20>)
 67a:	4798      	blx	r3
	_sysctrl_init_sources();
 67c:	4b05      	ldr	r3, [pc, #20]	; (694 <_init_chip+0x24>)
 67e:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
#endif
	_sysctrl_init_referenced_generators();
 680:	4b05      	ldr	r3, [pc, #20]	; (698 <_init_chip+0x28>)
 682:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
 684:	20ff      	movs	r0, #255	; 0xff
 686:	4b05      	ldr	r3, [pc, #20]	; (69c <_init_chip+0x2c>)
 688:	4798      	blx	r3
#if CONF_DMAC_ENABLE
	_pm_enable_bus_clock(PM_BUS_AHB, DMAC);
	_pm_enable_bus_clock(PM_BUS_APBB, DMAC);
	_dma_init();
#endif
}
 68a:	bd10      	pop	{r4, pc}
 68c:	41004000 	.word	0x41004000
 690:	000006c1 	.word	0x000006c1
 694:	000009fd 	.word	0x000009fd
 698:	00000a45 	.word	0x00000a45
 69c:	000006a1 	.word	0x000006a1

000006a0 <_gclk_init_generators_by_fref>:

void _gclk_init_generators_by_fref(uint32_t bm)
{

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
 6a0:	07c3      	lsls	r3, r0, #31
 6a2:	d50a      	bpl.n	6ba <_gclk_init_generators_by_fref+0x1a>
}

static inline void hri_gclk_write_GENDIV_reg(const void *const hw, hri_gclk_gendiv_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->GENDIV.reg = data;
 6a4:	4b05      	ldr	r3, [pc, #20]	; (6bc <_gclk_init_generators_by_fref+0x1c>)
 6a6:	2280      	movs	r2, #128	; 0x80
 6a8:	0052      	lsls	r2, r2, #1
 6aa:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
 6ac:	2283      	movs	r2, #131	; 0x83
 6ae:	0252      	lsls	r2, r2, #9
 6b0:	605a      	str	r2, [r3, #4]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
 6b2:	001a      	movs	r2, r3
 6b4:	7853      	ldrb	r3, [r2, #1]
 6b6:	09db      	lsrs	r3, r3, #7
 6b8:	d1fc      	bne.n	6b4 <_gclk_init_generators_by_fref+0x14>
		        | (CONF_GCLK_GEN_8_DIVSEL << GCLK_GENCTRL_DIVSEL_Pos) | (CONF_GCLK_GEN_8_OE << GCLK_GENCTRL_OE_Pos)
		        | (CONF_GCLK_GEN_8_OOV << GCLK_GENCTRL_OOV_Pos) | (CONF_GCLK_GEN_8_IDC << GCLK_GENCTRL_IDC_Pos)
		        | (CONF_GCLK_GENERATOR_8_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_8_SRC | GCLK_GENCTRL_ID(8));
	}
#endif
}
 6ba:	4770      	bx	lr
 6bc:	40000c00 	.word	0x40000c00

000006c0 <_pm_init>:
}

static inline void hri_pm_set_CPUSEL_CPUDIV_bf(const void *const hw, hri_pm_cpusel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->CPUSEL.reg |= PM_CPUSEL_CPUDIV(mask);
 6c0:	4b06      	ldr	r3, [pc, #24]	; (6dc <_pm_init+0x1c>)
 6c2:	7a1a      	ldrb	r2, [r3, #8]
 6c4:	b2d2      	uxtb	r2, r2
 6c6:	721a      	strb	r2, [r3, #8]
}

static inline void hri_pm_set_APBASEL_APBADIV_bf(const void *const hw, hri_pm_apbasel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBASEL.reg |= PM_APBASEL_APBADIV(mask);
 6c8:	7a5a      	ldrb	r2, [r3, #9]
 6ca:	b2d2      	uxtb	r2, r2
 6cc:	725a      	strb	r2, [r3, #9]
}

static inline void hri_pm_set_APBBSEL_APBBDIV_bf(const void *const hw, hri_pm_apbbsel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBBSEL.reg |= PM_APBBSEL_APBBDIV(mask);
 6ce:	7a9a      	ldrb	r2, [r3, #10]
 6d0:	b2d2      	uxtb	r2, r2
 6d2:	729a      	strb	r2, [r3, #10]
}

static inline void hri_pm_set_APBCSEL_APBCDIV_bf(const void *const hw, hri_pm_apbcsel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBCSEL.reg |= PM_APBCSEL_APBCDIV(mask);
 6d4:	7ada      	ldrb	r2, [r3, #11]
 6d6:	b2d2      	uxtb	r2, r2
 6d8:	72da      	strb	r2, [r3, #11]
{
	hri_pm_set_CPUSEL_CPUDIV_bf(PM, CONF_CPU_DIV);
	hri_pm_set_APBASEL_APBADIV_bf(PM, CONF_APBA_DIV);
	hri_pm_set_APBBSEL_APBBDIV_bf(PM, CONF_APBB_DIV);
	hri_pm_set_APBCSEL_APBCDIV_bf(PM, CONF_APBC_DIV);
}
 6da:	4770      	bx	lr
 6dc:	40000400 	.word	0x40000400

000006e0 <SERCOM0_Handler>:
		dev->callbacks.err(dev, ERR_OVERFLOW);
	}
}

void SERCOM0_Handler(void)
{
 6e0:	b510      	push	{r4, lr}
	_spi_handler(_sercom0_dev);
 6e2:	4b12      	ldr	r3, [pc, #72]	; (72c <SERCOM0_Handler+0x4c>)
 6e4:	6818      	ldr	r0, [r3, #0]
	void *                      hw = dev->prvt;
 6e6:	6802      	ldr	r2, [r0, #0]
	return tmp;
}

static inline hri_sercomspi_intflag_reg_t hri_sercomspi_read_INTFLAG_reg(const void *const hw)
{
	return ((Sercom *)hw)->SPI.INTFLAG.reg;
 6e8:	7e11      	ldrb	r1, [r2, #24]
	return tmp;
}

static inline hri_sercomspi_intenset_reg_t hri_sercomspi_read_INTEN_reg(const void *const hw)
{
	return ((Sercom *)hw)->SPI.INTENSET.reg;
 6ea:	7d93      	ldrb	r3, [r2, #22]
	st &= hri_sercomspi_read_INTEN_reg(hw);
 6ec:	400b      	ands	r3, r1
	if (st & SERCOM_SPI_INTFLAG_DRE) {
 6ee:	07d9      	lsls	r1, r3, #31
 6f0:	d407      	bmi.n	702 <SERCOM0_Handler+0x22>
	} else if (st & SERCOM_SPI_INTFLAG_RXC) {
 6f2:	0759      	lsls	r1, r3, #29
 6f4:	d408      	bmi.n	708 <SERCOM0_Handler+0x28>
	} else if (st & SERCOM_SPI_INTFLAG_TXC) {
 6f6:	0799      	lsls	r1, r3, #30
 6f8:	d409      	bmi.n	70e <SERCOM0_Handler+0x2e>
	} else if (st & SERCOM_SPI_INTFLAG_ERROR) {
 6fa:	b25b      	sxtb	r3, r3
 6fc:	2b00      	cmp	r3, #0
 6fe:	db0b      	blt.n	718 <SERCOM0_Handler+0x38>
}
 700:	bd10      	pop	{r4, pc}
		dev->callbacks.tx(dev);
 702:	6883      	ldr	r3, [r0, #8]
 704:	4798      	blx	r3
 706:	e7fb      	b.n	700 <SERCOM0_Handler+0x20>
		dev->callbacks.rx(dev);
 708:	68c3      	ldr	r3, [r0, #12]
 70a:	4798      	blx	r3
 70c:	e7f8      	b.n	700 <SERCOM0_Handler+0x20>
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
 70e:	2302      	movs	r3, #2
 710:	7613      	strb	r3, [r2, #24]
		dev->callbacks.complete(dev);
 712:	6903      	ldr	r3, [r0, #16]
 714:	4798      	blx	r3
 716:	e7f3      	b.n	700 <SERCOM0_Handler+0x20>
}

static inline void hri_sercomspi_clear_STATUS_reg(const void *const hw, hri_sercomspi_status_reg_t mask)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.STATUS.reg = mask;
 718:	2304      	movs	r3, #4
 71a:	8353      	strh	r3, [r2, #26]
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
 71c:	337c      	adds	r3, #124	; 0x7c
 71e:	7613      	strb	r3, [r2, #24]
		dev->callbacks.err(dev, ERR_OVERFLOW);
 720:	6943      	ldr	r3, [r0, #20]
 722:	2113      	movs	r1, #19
 724:	4249      	negs	r1, r1
 726:	4798      	blx	r3
}
 728:	e7ea      	b.n	700 <SERCOM0_Handler+0x20>
 72a:	46c0      	nop			; (mov r8, r8)
 72c:	20000020 	.word	0x20000020

00000730 <_spi_m_sync_init>:

int32_t _spi_m_sync_init(struct _spi_m_sync_dev *dev, void *const hw)
{
 730:	b570      	push	{r4, r5, r6, lr}
 732:	0005      	movs	r5, r0
 734:	000c      	movs	r4, r1
	return ((uint32_t)hw - (uint32_t)SERCOM0) >> 10;
 736:	4b37      	ldr	r3, [pc, #220]	; (814 <_spi_m_sync_init+0xe4>)
 738:	18cb      	adds	r3, r1, r3
 73a:	0a9b      	lsrs	r3, r3, #10
		if (sercomspi_regs[i].n == n) {
 73c:	b2db      	uxtb	r3, r3
 73e:	2b00      	cmp	r3, #0
 740:	d00c      	beq.n	75c <_spi_m_sync_init+0x2c>
	const struct sercomspi_regs_cfg *regs = _spi_get_regs((uint32_t)hw);

	ASSERT(dev && hw);
 742:	2800      	cmp	r0, #0
 744:	d053      	beq.n	7ee <_spi_m_sync_init+0xbe>
 746:	1e60      	subs	r0, r4, #1
 748:	4184      	sbcs	r4, r0
 74a:	b2e0      	uxtb	r0, r4
 74c:	2294      	movs	r2, #148	; 0x94
 74e:	0112      	lsls	r2, r2, #4
 750:	4931      	ldr	r1, [pc, #196]	; (818 <_spi_m_sync_init+0xe8>)
 752:	4b32      	ldr	r3, [pc, #200]	; (81c <_spi_m_sync_init+0xec>)
 754:	4798      	blx	r3

	if (regs == NULL) {
		return ERR_INVALID_ARG;
 756:	200d      	movs	r0, #13
 758:	4240      	negs	r0, r0
 75a:	e047      	b.n	7ec <_spi_m_sync_init+0xbc>
	ASSERT(dev && hw);
 75c:	2800      	cmp	r0, #0
 75e:	d14f      	bne.n	800 <_spi_m_sync_init+0xd0>
 760:	2294      	movs	r2, #148	; 0x94
 762:	0112      	lsls	r2, r2, #4
 764:	492c      	ldr	r1, [pc, #176]	; (818 <_spi_m_sync_init+0xe8>)
 766:	2000      	movs	r0, #0
 768:	4b2c      	ldr	r3, [pc, #176]	; (81c <_spi_m_sync_init+0xec>)
 76a:	4798      	blx	r3
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
 76c:	69e3      	ldr	r3, [r4, #28]
	}

	if (!hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
 76e:	07db      	lsls	r3, r3, #31
 770:	d418      	bmi.n	7a4 <_spi_m_sync_init+0x74>
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
 772:	2203      	movs	r2, #3
 774:	69e3      	ldr	r3, [r4, #28]
 776:	421a      	tst	r2, r3
 778:	d1fc      	bne.n	774 <_spi_m_sync_init+0x44>
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
 77a:	6823      	ldr	r3, [r4, #0]
		uint32_t mode = regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk;
		if (hri_sercomspi_get_CTRLA_reg(hw, SERCOM_SPI_CTRLA_ENABLE)) {
 77c:	079b      	lsls	r3, r3, #30
 77e:	d50b      	bpl.n	798 <_spi_m_sync_init+0x68>
	((Sercom *)hw)->SPI.CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
 780:	6823      	ldr	r3, [r4, #0]
 782:	2202      	movs	r2, #2
 784:	4393      	bics	r3, r2
 786:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
 788:	3201      	adds	r2, #1
 78a:	69e3      	ldr	r3, [r4, #28]
 78c:	421a      	tst	r2, r3
 78e:	d1fc      	bne.n	78a <_spi_m_sync_init+0x5a>
 790:	2202      	movs	r2, #2
 792:	69e3      	ldr	r3, [r4, #28]
 794:	421a      	tst	r2, r3
 796:	d1fc      	bne.n	792 <_spi_m_sync_init+0x62>
	((Sercom *)hw)->SPI.CTRLA.reg = data;
 798:	230d      	movs	r3, #13
 79a:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
 79c:	2203      	movs	r2, #3
 79e:	69e3      	ldr	r3, [r4, #28]
 7a0:	421a      	tst	r2, r3
 7a2:	d1fc      	bne.n	79e <_spi_m_sync_init+0x6e>
 7a4:	2201      	movs	r2, #1
 7a6:	69e3      	ldr	r3, [r4, #28]
 7a8:	421a      	tst	r2, r3
 7aa:	d1fc      	bne.n	7a6 <_spi_m_sync_init+0x76>
		}
		hri_sercomspi_write_CTRLA_reg(hw, SERCOM_SPI_CTRLA_SWRST | mode);
	}
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST);

	dev->prvt = hw;
 7ac:	602c      	str	r4, [r5, #0]
	ASSERT(hw && regs);
 7ae:	0020      	movs	r0, r4
 7b0:	1e43      	subs	r3, r0, #1
 7b2:	4198      	sbcs	r0, r3
 7b4:	b2c0      	uxtb	r0, r0
 7b6:	4a1a      	ldr	r2, [pc, #104]	; (820 <_spi_m_sync_init+0xf0>)
 7b8:	4917      	ldr	r1, [pc, #92]	; (818 <_spi_m_sync_init+0xe8>)
 7ba:	4b18      	ldr	r3, [pc, #96]	; (81c <_spi_m_sync_init+0xec>)
 7bc:	4798      	blx	r3
	((Sercom *)hw)->SPI.CTRLA.reg = data;
 7be:	4b19      	ldr	r3, [pc, #100]	; (824 <_spi_m_sync_init+0xf4>)
 7c0:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
 7c2:	2203      	movs	r2, #3
 7c4:	69e3      	ldr	r3, [r4, #28]
 7c6:	421a      	tst	r2, r3
 7c8:	d1fc      	bne.n	7c4 <_spi_m_sync_init+0x94>
	((Sercom *)hw)->SPI.CTRLB.reg = data;
 7ca:	2380      	movs	r3, #128	; 0x80
 7cc:	029b      	lsls	r3, r3, #10
 7ce:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
 7d0:	2207      	movs	r2, #7
 7d2:	69e3      	ldr	r3, [r4, #28]
 7d4:	421a      	tst	r2, r3
 7d6:	d1fc      	bne.n	7d2 <_spi_m_sync_init+0xa2>
	((Sercom *)hw)->SPI.BAUD.reg = data;
 7d8:	2309      	movs	r3, #9
 7da:	7323      	strb	r3, [r4, #12]
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
 7dc:	2200      	movs	r2, #0
 7de:	3327      	adds	r3, #39	; 0x27
 7e0:	54e2      	strb	r2, [r4, r3]
	} else {
		_spi_load_regs_master(hw, regs);
	}

	/* Load character size from default hardware configuration */
	dev->char_size = ((regs->ctrlb & SERCOM_SPI_CTRLB_CHSIZE_Msk) == 0) ? 1 : 2;
 7e2:	3b2f      	subs	r3, #47	; 0x2f
 7e4:	712b      	strb	r3, [r5, #4]

	dev->dummy_byte = regs->dummy_byte;
 7e6:	4b10      	ldr	r3, [pc, #64]	; (828 <_spi_m_sync_init+0xf8>)
 7e8:	80eb      	strh	r3, [r5, #6]

	return ERR_NONE;
 7ea:	2000      	movs	r0, #0
}
 7ec:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(dev && hw);
 7ee:	2294      	movs	r2, #148	; 0x94
 7f0:	0112      	lsls	r2, r2, #4
 7f2:	4909      	ldr	r1, [pc, #36]	; (818 <_spi_m_sync_init+0xe8>)
 7f4:	2000      	movs	r0, #0
 7f6:	4b09      	ldr	r3, [pc, #36]	; (81c <_spi_m_sync_init+0xec>)
 7f8:	4798      	blx	r3
		return ERR_INVALID_ARG;
 7fa:	200d      	movs	r0, #13
 7fc:	4240      	negs	r0, r0
 7fe:	e7f5      	b.n	7ec <_spi_m_sync_init+0xbc>
	ASSERT(dev && hw);
 800:	0008      	movs	r0, r1
 802:	1e43      	subs	r3, r0, #1
 804:	4198      	sbcs	r0, r3
 806:	b2c0      	uxtb	r0, r0
 808:	2294      	movs	r2, #148	; 0x94
 80a:	0112      	lsls	r2, r2, #4
 80c:	4902      	ldr	r1, [pc, #8]	; (818 <_spi_m_sync_init+0xe8>)
 80e:	4b03      	ldr	r3, [pc, #12]	; (81c <_spi_m_sync_init+0xec>)
 810:	4798      	blx	r3
 812:	e7ab      	b.n	76c <_spi_m_sync_init+0x3c>
 814:	bdfff800 	.word	0xbdfff800
 818:	00000adc 	.word	0x00000adc
 81c:	00000669 	.word	0x00000669
 820:	000008eb 	.word	0x000008eb
 824:	0011000c 	.word	0x0011000c
 828:	000001ff 	.word	0x000001ff

0000082c <_spi_m_async_init>:
{
	return _spi_m_sync_init(dev, hw);
}

int32_t _spi_m_async_init(struct _spi_async_dev *dev, void *const hw)
{
 82c:	b570      	push	{r4, r5, r6, lr}
 82e:	0005      	movs	r5, r0
 830:	000c      	movs	r4, r1
	struct _spi_async_dev *spid = dev;
	/* Do hardware initialize. */
	int32_t rc = _spi_m_sync_init((struct _spi_m_sync_dev *)dev, hw);
 832:	4b16      	ldr	r3, [pc, #88]	; (88c <_spi_m_async_init+0x60>)
 834:	4798      	blx	r3

	if (rc < 0) {
 836:	2800      	cmp	r0, #0
 838:	db1d      	blt.n	876 <_spi_m_async_init+0x4a>
	if (hw == SERCOM0) {
 83a:	4b15      	ldr	r3, [pc, #84]	; (890 <_spi_m_async_init+0x64>)
 83c:	429c      	cmp	r4, r3
 83e:	d01b      	beq.n	878 <_spi_m_async_init+0x4c>
		return rc;
	}

	_sercom_init_irq_param(hw, (void *)dev);
	/* Initialize callbacks: must use them */
	spid->callbacks.complete = NULL;
 840:	2300      	movs	r3, #0
 842:	612b      	str	r3, [r5, #16]
	spid->callbacks.rx       = NULL;
 844:	60eb      	str	r3, [r5, #12]
	spid->callbacks.tx       = NULL;
 846:	60ab      	str	r3, [r5, #8]
	return ((uint32_t)hw - (uint32_t)SERCOM0) >> 10;
 848:	4b12      	ldr	r3, [pc, #72]	; (894 <_spi_m_async_init+0x68>)
 84a:	469c      	mov	ip, r3
 84c:	4464      	add	r4, ip
 84e:	0aa4      	lsrs	r4, r4, #10
	return SERCOM0_IRQn + _sercom_get_hardware_index(hw);
 850:	3409      	adds	r4, #9
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
 852:	b2e3      	uxtb	r3, r4
 854:	0622      	lsls	r2, r4, #24
 856:	d417      	bmi.n	888 <_spi_m_async_init+0x5c>
  {
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 858:	221f      	movs	r2, #31
 85a:	401a      	ands	r2, r3
 85c:	2301      	movs	r3, #1
 85e:	4093      	lsls	r3, r2
 860:	4a0d      	ldr	r2, [pc, #52]	; (898 <_spi_m_async_init+0x6c>)
 862:	2180      	movs	r1, #128	; 0x80
 864:	5053      	str	r3, [r2, r1]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 866:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 86a:	f3bf 8f6f 	isb	sy
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 86e:	3101      	adds	r1, #1
 870:	31ff      	adds	r1, #255	; 0xff
 872:	5053      	str	r3, [r2, r1]
	NVIC_DisableIRQ((IRQn_Type)_sercom_get_irq_num(hw));
	NVIC_ClearPendingIRQ((IRQn_Type)_sercom_get_irq_num(hw));

	return ERR_NONE;
 874:	2000      	movs	r0, #0
}
 876:	bd70      	pop	{r4, r5, r6, pc}
		_sercom0_dev = (struct _spi_async_dev *)dev;
 878:	4b08      	ldr	r3, [pc, #32]	; (89c <_spi_m_async_init+0x70>)
 87a:	601d      	str	r5, [r3, #0]
	spid->callbacks.complete = NULL;
 87c:	2300      	movs	r3, #0
 87e:	612b      	str	r3, [r5, #16]
	spid->callbacks.rx       = NULL;
 880:	60eb      	str	r3, [r5, #12]
	spid->callbacks.tx       = NULL;
 882:	60ab      	str	r3, [r5, #8]
	return SERCOM0_IRQn + _sercom_get_hardware_index(hw);
 884:	3309      	adds	r3, #9
 886:	e7e7      	b.n	858 <_spi_m_async_init+0x2c>
	return ERR_NONE;
 888:	2000      	movs	r0, #0
 88a:	e7f4      	b.n	876 <_spi_m_async_init+0x4a>
 88c:	00000731 	.word	0x00000731
 890:	42000800 	.word	0x42000800
 894:	bdfff800 	.word	0xbdfff800
 898:	e000e100 	.word	0xe000e100
 89c:	20000020 	.word	0x20000020

000008a0 <_spi_m_async_enable_tx>:

	return rc;
}

int32_t _spi_m_async_enable_tx(struct _spi_async_dev *dev, bool state)
{
 8a0:	b570      	push	{r4, r5, r6, lr}
 8a2:	000d      	movs	r5, r1
	void *hw = dev->prvt;
 8a4:	6804      	ldr	r4, [r0, #0]

	ASSERT(dev && hw);
 8a6:	2800      	cmp	r0, #0
 8a8:	d00d      	beq.n	8c6 <_spi_m_async_enable_tx+0x26>
 8aa:	0020      	movs	r0, r4
 8ac:	1e43      	subs	r3, r0, #1
 8ae:	4198      	sbcs	r0, r3
 8b0:	b2c0      	uxtb	r0, r0
 8b2:	4a07      	ldr	r2, [pc, #28]	; (8d0 <_spi_m_async_enable_tx+0x30>)
 8b4:	4907      	ldr	r1, [pc, #28]	; (8d4 <_spi_m_async_enable_tx+0x34>)
 8b6:	4b08      	ldr	r3, [pc, #32]	; (8d8 <_spi_m_async_enable_tx+0x38>)
 8b8:	4798      	blx	r3

	if (state) {
 8ba:	2d00      	cmp	r5, #0
 8bc:	d105      	bne.n	8ca <_spi_m_async_enable_tx+0x2a>
	((Sercom *)hw)->SPI.INTENCLR.reg = SERCOM_SPI_INTENSET_DRE;
 8be:	2301      	movs	r3, #1
 8c0:	7523      	strb	r3, [r4, #20]
	} else {
		hri_sercomspi_clear_INTEN_DRE_bit(hw);
	}

	return ERR_NONE;
}
 8c2:	2000      	movs	r0, #0
 8c4:	bd70      	pop	{r4, r5, r6, pc}
 8c6:	2000      	movs	r0, #0
 8c8:	e7f3      	b.n	8b2 <_spi_m_async_enable_tx+0x12>
	((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_DRE;
 8ca:	2301      	movs	r3, #1
 8cc:	75a3      	strb	r3, [r4, #22]
 8ce:	e7f8      	b.n	8c2 <_spi_m_async_enable_tx+0x22>
 8d0:	00000acc 	.word	0x00000acc
 8d4:	00000adc 	.word	0x00000adc
 8d8:	00000669 	.word	0x00000669

000008dc <_spi_m_async_enable_rx>:
{
	return _spi_m_async_enable_tx(dev, state);
}

int32_t _spi_m_async_enable_rx(struct _spi_async_dev *dev, bool state)
{
 8dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8de:	000e      	movs	r6, r1
	void *hw = dev->prvt;
 8e0:	6805      	ldr	r5, [r0, #0]

	ASSERT(dev);
 8e2:	4c0c      	ldr	r4, [pc, #48]	; (914 <_spi_m_async_enable_rx+0x38>)
 8e4:	1e43      	subs	r3, r0, #1
 8e6:	4198      	sbcs	r0, r3
 8e8:	b2c0      	uxtb	r0, r0
 8ea:	22ae      	movs	r2, #174	; 0xae
 8ec:	0112      	lsls	r2, r2, #4
 8ee:	0021      	movs	r1, r4
 8f0:	4f09      	ldr	r7, [pc, #36]	; (918 <_spi_m_async_enable_rx+0x3c>)
 8f2:	47b8      	blx	r7
	ASSERT(hw);
 8f4:	0028      	movs	r0, r5
 8f6:	1e43      	subs	r3, r0, #1
 8f8:	4198      	sbcs	r0, r3
 8fa:	b2c0      	uxtb	r0, r0
 8fc:	4a07      	ldr	r2, [pc, #28]	; (91c <_spi_m_async_enable_rx+0x40>)
 8fe:	0021      	movs	r1, r4
 900:	47b8      	blx	r7

	if (state) {
 902:	2e00      	cmp	r6, #0
 904:	d103      	bne.n	90e <_spi_m_async_enable_rx+0x32>
	((Sercom *)hw)->SPI.INTENCLR.reg = SERCOM_SPI_INTENSET_RXC;
 906:	2304      	movs	r3, #4
 908:	752b      	strb	r3, [r5, #20]
	} else {
		hri_sercomspi_clear_INTEN_RXC_bit(hw);
	}

	return ERR_NONE;
}
 90a:	2000      	movs	r0, #0
 90c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_RXC;
 90e:	2304      	movs	r3, #4
 910:	75ab      	strb	r3, [r5, #22]
 912:	e7fa      	b.n	90a <_spi_m_async_enable_rx+0x2e>
 914:	00000adc 	.word	0x00000adc
 918:	00000669 	.word	0x00000669
 91c:	00000ae1 	.word	0x00000ae1

00000920 <_spi_m_async_enable_tx_complete>:
{
	return _spi_m_async_enable_rx(dev, state);
}

int32_t _spi_m_async_enable_tx_complete(struct _spi_async_dev *dev, bool state)
{
 920:	b570      	push	{r4, r5, r6, lr}
 922:	0004      	movs	r4, r0
 924:	000d      	movs	r5, r1
	ASSERT(dev && dev->prvt);
 926:	2800      	cmp	r0, #0
 928:	d00e      	beq.n	948 <_spi_m_async_enable_tx_complete+0x28>
 92a:	6800      	ldr	r0, [r0, #0]
 92c:	1e43      	subs	r3, r0, #1
 92e:	4198      	sbcs	r0, r3
 930:	b2c0      	uxtb	r0, r0
 932:	4a08      	ldr	r2, [pc, #32]	; (954 <_spi_m_async_enable_tx_complete+0x34>)
 934:	4908      	ldr	r1, [pc, #32]	; (958 <_spi_m_async_enable_tx_complete+0x38>)
 936:	4b09      	ldr	r3, [pc, #36]	; (95c <_spi_m_async_enable_tx_complete+0x3c>)
 938:	4798      	blx	r3

	if (state) {
 93a:	2d00      	cmp	r5, #0
 93c:	d106      	bne.n	94c <_spi_m_async_enable_tx_complete+0x2c>
		hri_sercomspi_set_INTEN_TXC_bit(dev->prvt);
	} else {
		hri_sercomspi_clear_INTEN_TXC_bit(dev->prvt);
 93e:	6823      	ldr	r3, [r4, #0]
	((Sercom *)hw)->SPI.INTENCLR.reg = SERCOM_SPI_INTENSET_TXC;
 940:	2202      	movs	r2, #2
 942:	751a      	strb	r2, [r3, #20]
	}

	return ERR_NONE;
}
 944:	2000      	movs	r0, #0
 946:	bd70      	pop	{r4, r5, r6, pc}
 948:	2000      	movs	r0, #0
 94a:	e7f2      	b.n	932 <_spi_m_async_enable_tx_complete+0x12>
		hri_sercomspi_set_INTEN_TXC_bit(dev->prvt);
 94c:	6823      	ldr	r3, [r4, #0]
	((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_TXC;
 94e:	2202      	movs	r2, #2
 950:	759a      	strb	r2, [r3, #22]
 952:	e7f7      	b.n	944 <_spi_m_async_enable_tx_complete+0x24>
 954:	00000af3 	.word	0x00000af3
 958:	00000adc 	.word	0x00000adc
 95c:	00000669 	.word	0x00000669

00000960 <_spi_m_async_write_one>:
{
	return _spi_m_async_enable_tx_complete(dev, state);
}

int32_t _spi_m_async_write_one(struct _spi_async_dev *dev, uint16_t data)
{
 960:	b570      	push	{r4, r5, r6, lr}
 962:	0004      	movs	r4, r0
 964:	000d      	movs	r5, r1
	ASSERT(dev && dev->prvt);
 966:	2800      	cmp	r0, #0
 968:	d00b      	beq.n	982 <_spi_m_async_write_one+0x22>
 96a:	6800      	ldr	r0, [r0, #0]
 96c:	1e43      	subs	r3, r0, #1
 96e:	4198      	sbcs	r0, r3
 970:	b2c0      	uxtb	r0, r0
 972:	4a05      	ldr	r2, [pc, #20]	; (988 <_spi_m_async_write_one+0x28>)
 974:	4905      	ldr	r1, [pc, #20]	; (98c <_spi_m_async_write_one+0x2c>)
 976:	4b06      	ldr	r3, [pc, #24]	; (990 <_spi_m_async_write_one+0x30>)
 978:	4798      	blx	r3

	hri_sercomspi_write_DATA_reg(dev->prvt, data);
 97a:	6823      	ldr	r3, [r4, #0]
	((Sercom *)hw)->SPI.DATA.reg = data;
 97c:	629d      	str	r5, [r3, #40]	; 0x28

	return ERR_NONE;
}
 97e:	2000      	movs	r0, #0
 980:	bd70      	pop	{r4, r5, r6, pc}
 982:	2000      	movs	r0, #0
 984:	e7f5      	b.n	972 <_spi_m_async_write_one+0x12>
 986:	46c0      	nop			; (mov r8, r8)
 988:	00000b05 	.word	0x00000b05
 98c:	00000adc 	.word	0x00000adc
 990:	00000669 	.word	0x00000669

00000994 <_spi_m_async_read_one>:

	return ERR_NONE;
}

uint16_t _spi_m_async_read_one(struct _spi_async_dev *dev)
{
 994:	b510      	push	{r4, lr}
 996:	1e04      	subs	r4, r0, #0
	ASSERT(dev && dev->prvt);
 998:	d00c      	beq.n	9b4 <_spi_m_async_read_one+0x20>
 99a:	6800      	ldr	r0, [r0, #0]
 99c:	1e43      	subs	r3, r0, #1
 99e:	4198      	sbcs	r0, r3
 9a0:	b2c0      	uxtb	r0, r0
 9a2:	22b2      	movs	r2, #178	; 0xb2
 9a4:	0112      	lsls	r2, r2, #4
 9a6:	4904      	ldr	r1, [pc, #16]	; (9b8 <_spi_m_async_read_one+0x24>)
 9a8:	4b04      	ldr	r3, [pc, #16]	; (9bc <_spi_m_async_read_one+0x28>)
 9aa:	4798      	blx	r3

	return hri_sercomspi_read_DATA_reg(dev->prvt);
 9ac:	6823      	ldr	r3, [r4, #0]
	return ((Sercom *)hw)->SPI.DATA.reg;
 9ae:	6a98      	ldr	r0, [r3, #40]	; 0x28
 9b0:	b280      	uxth	r0, r0
}
 9b2:	bd10      	pop	{r4, pc}
 9b4:	2000      	movs	r0, #0
 9b6:	e7f4      	b.n	9a2 <_spi_m_async_read_one+0xe>
 9b8:	00000adc 	.word	0x00000adc
 9bc:	00000669 	.word	0x00000669

000009c0 <_spi_m_async_register_callback>:
	return hri_sercomspi_read_DATA_reg(dev->prvt);
}

int32_t _spi_m_async_register_callback(struct _spi_async_dev *dev, const enum _spi_async_dev_cb_type cb_type,
                                       const FUNC_PTR func)
{
 9c0:	b570      	push	{r4, r5, r6, lr}
 9c2:	0004      	movs	r4, r0
 9c4:	000d      	movs	r5, r1
 9c6:	0016      	movs	r6, r2
	typedef void (*func_t)(void);
	struct _spi_async_dev *spid = dev;

	ASSERT(dev && (cb_type < SPI_DEV_CB_N));
 9c8:	2800      	cmp	r0, #0
 9ca:	d00f      	beq.n	9ec <_spi_m_async_register_callback+0x2c>
 9cc:	2000      	movs	r0, #0
 9ce:	2303      	movs	r3, #3
 9d0:	428b      	cmp	r3, r1
 9d2:	4140      	adcs	r0, r0
 9d4:	b2c0      	uxtb	r0, r0
 9d6:	2301      	movs	r3, #1
 9d8:	4018      	ands	r0, r3
 9da:	4a05      	ldr	r2, [pc, #20]	; (9f0 <_spi_m_async_register_callback+0x30>)
 9dc:	4905      	ldr	r1, [pc, #20]	; (9f4 <_spi_m_async_register_callback+0x34>)
 9de:	4b06      	ldr	r3, [pc, #24]	; (9f8 <_spi_m_async_register_callback+0x38>)
 9e0:	4798      	blx	r3

	func_t *p_ls  = (func_t *)&spid->callbacks;
	p_ls[cb_type] = (func_t)func;
 9e2:	00ad      	lsls	r5, r5, #2
 9e4:	1964      	adds	r4, r4, r5
 9e6:	60a6      	str	r6, [r4, #8]

	return ERR_NONE;
}
 9e8:	2000      	movs	r0, #0
 9ea:	bd70      	pop	{r4, r5, r6, pc}
 9ec:	2000      	movs	r0, #0
 9ee:	e7f2      	b.n	9d6 <_spi_m_async_register_callback+0x16>
 9f0:	00000b39 	.word	0x00000b39
 9f4:	00000adc 	.word	0x00000adc
 9f8:	00000669 	.word	0x00000669

000009fc <_sysctrl_init_sources>:
}

static inline hri_sysctrl_osc8m_reg_t hri_sysctrl_read_OSC8M_CALIB_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Sysctrl *)hw)->OSC8M.reg;
 9fc:	4b0e      	ldr	r3, [pc, #56]	; (a38 <_sysctrl_init_sources+0x3c>)
 9fe:	6a1a      	ldr	r2, [r3, #32]
}

static inline hri_sysctrl_osc8m_reg_t hri_sysctrl_read_OSC8M_FRANGE_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Sysctrl *)hw)->OSC8M.reg;
 a00:	6a19      	ldr	r1, [r3, #32]
	hri_sysctrl_write_OSC8M_reg(hw,
	                            SYSCTRL_OSC8M_FRANGE(hri_sysctrl_read_OSC8M_FRANGE_bf(hw)) |
#if CONF_OSC8M_OVERWRITE_CALIBRATION == 1
	                                SYSCTRL_OSC8M_CALIB(CONF_OSC8M_CALIB) |
#else
	                                SYSCTRL_OSC8M_CALIB(calib) |
 a02:	480e      	ldr	r0, [pc, #56]	; (a3c <_sysctrl_init_sources+0x40>)
 a04:	4002      	ands	r2, r0
	                            SYSCTRL_OSC8M_FRANGE(hri_sysctrl_read_OSC8M_FRANGE_bf(hw)) |
 a06:	0f89      	lsrs	r1, r1, #30
 a08:	0789      	lsls	r1, r1, #30
	hri_sysctrl_write_OSC8M_reg(hw,
 a0a:	480d      	ldr	r0, [pc, #52]	; (a40 <_sysctrl_init_sources+0x44>)
 a0c:	4301      	orrs	r1, r0
 a0e:	430a      	orrs	r2, r1
}

static inline void hri_sysctrl_write_OSC8M_reg(const void *const hw, hri_sysctrl_osc8m_reg_t data)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->OSC8M.reg = data;
 a10:	621a      	str	r2, [r3, #32]
	((Sysctrl *)hw)->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
 a12:	699a      	ldr	r2, [r3, #24]
 a14:	2102      	movs	r1, #2
 a16:	430a      	orrs	r2, r1
 a18:	619a      	str	r2, [r3, #24]
	tmp = ((Sysctrl *)hw)->OSCULP32K.reg;
 a1a:	7f1a      	ldrb	r2, [r3, #28]
	tmp = (tmp & SYSCTRL_OSCULP32K_CALIB_Msk) >> SYSCTRL_OSCULP32K_CALIB_Pos;
 a1c:	311d      	adds	r1, #29
 a1e:	400a      	ands	r2, r1
	((Sysctrl *)hw)->OSCULP32K.reg = data;
 a20:	771a      	strb	r2, [r3, #28]
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_OSC8MRDY) >> SYSCTRL_PCLKSR_OSC8MRDY_Pos;
 a22:	0019      	movs	r1, r3
#endif
#endif

#if CONF_OSC8M_CONFIG == 1
#if CONF_OSC8M_ENABLE == 1
	while (!hri_sysctrl_get_PCLKSR_OSC8MRDY_bit(hw))
 a24:	2208      	movs	r2, #8
 a26:	68cb      	ldr	r3, [r1, #12]
 a28:	421a      	tst	r2, r3
 a2a:	d0fc      	beq.n	a26 <_sysctrl_init_sources+0x2a>
	((Sysctrl *)hw)->OSC8M.reg |= SYSCTRL_OSC8M_ONDEMAND;
 a2c:	4a02      	ldr	r2, [pc, #8]	; (a38 <_sysctrl_init_sources+0x3c>)
 a2e:	6a13      	ldr	r3, [r2, #32]
 a30:	2180      	movs	r1, #128	; 0x80
 a32:	430b      	orrs	r3, r1
 a34:	6213      	str	r3, [r2, #32]
	hri_sysctrl_set_OSC8M_ONDEMAND_bit(hw);
#endif
#endif

	(void)calib, (void)hw;
}
 a36:	4770      	bx	lr
 a38:	40000800 	.word	0x40000800
 a3c:	0fff0000 	.word	0x0fff0000
 a40:	00000302 	.word	0x00000302

00000a44 <_sysctrl_init_referenced_generators>:
	((Sysctrl *)hw)->OSC32K.reg &= ~SYSCTRL_OSC32K_ENABLE;
 a44:	4a02      	ldr	r2, [pc, #8]	; (a50 <_sysctrl_init_referenced_generators+0xc>)
 a46:	6993      	ldr	r3, [r2, #24]
 a48:	2102      	movs	r1, #2
 a4a:	438b      	bics	r3, r1
 a4c:	6193      	str	r3, [r2, #24]
	/* Disable after all possible configurations needs sync written. */
	hri_sysctrl_clear_OSC32K_ENABLE_bit(hw);
#endif

	(void)hw;
}
 a4e:	4770      	bx	lr
 a50:	40000800 	.word	0x40000800

00000a54 <_delay_init>:
 * \brief Initialize system time module
 */
void _system_time_init(void *const hw)
{
	(void)hw;
	SysTick->LOAD = (0xFFFFFF << SysTick_LOAD_RELOAD_Pos);
 a54:	4b02      	ldr	r3, [pc, #8]	; (a60 <_delay_init+0xc>)
 a56:	4a03      	ldr	r2, [pc, #12]	; (a64 <_delay_init+0x10>)
 a58:	605a      	str	r2, [r3, #4]
	SysTick->CTRL = (1 << SysTick_CTRL_ENABLE_Pos) | (CONF_SYSTICK_TICKINT << SysTick_CTRL_TICKINT_Pos)
 a5a:	2205      	movs	r2, #5
 a5c:	601a      	str	r2, [r3, #0]
 * \brief Initialize delay functionality
 */
void _delay_init(void *const hw)
{
	_system_time_init(hw);
}
 a5e:	4770      	bx	lr
 a60:	e000e010 	.word	0xe000e010
 a64:	00ffffff 	.word	0x00ffffff

00000a68 <main>:
#include <atmel_start.h>

int main(void)
{
 a68:	b510      	push	{r4, lr}
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
 a6a:	4b01      	ldr	r3, [pc, #4]	; (a70 <main+0x8>)
 a6c:	4798      	blx	r3
 a6e:	e7fe      	b.n	a6e <main+0x6>
 a70:	00000115 	.word	0x00000115

00000a74 <__libc_init_array>:
 a74:	b570      	push	{r4, r5, r6, lr}
 a76:	2600      	movs	r6, #0
 a78:	4d0c      	ldr	r5, [pc, #48]	; (aac <__libc_init_array+0x38>)
 a7a:	4c0d      	ldr	r4, [pc, #52]	; (ab0 <__libc_init_array+0x3c>)
 a7c:	1b64      	subs	r4, r4, r5
 a7e:	10a4      	asrs	r4, r4, #2
 a80:	42a6      	cmp	r6, r4
 a82:	d109      	bne.n	a98 <__libc_init_array+0x24>
 a84:	2600      	movs	r6, #0
 a86:	f000 f837 	bl	af8 <_init>
 a8a:	4d0a      	ldr	r5, [pc, #40]	; (ab4 <__libc_init_array+0x40>)
 a8c:	4c0a      	ldr	r4, [pc, #40]	; (ab8 <__libc_init_array+0x44>)
 a8e:	1b64      	subs	r4, r4, r5
 a90:	10a4      	asrs	r4, r4, #2
 a92:	42a6      	cmp	r6, r4
 a94:	d105      	bne.n	aa2 <__libc_init_array+0x2e>
 a96:	bd70      	pop	{r4, r5, r6, pc}
 a98:	00b3      	lsls	r3, r6, #2
 a9a:	58eb      	ldr	r3, [r5, r3]
 a9c:	4798      	blx	r3
 a9e:	3601      	adds	r6, #1
 aa0:	e7ee      	b.n	a80 <__libc_init_array+0xc>
 aa2:	00b3      	lsls	r3, r6, #2
 aa4:	58eb      	ldr	r3, [r5, r3]
 aa6:	4798      	blx	r3
 aa8:	3601      	adds	r6, #1
 aaa:	e7f2      	b.n	a92 <__libc_init_array+0x1e>
 aac:	00000b04 	.word	0x00000b04
 ab0:	00000b04 	.word	0x00000b04
 ab4:	00000b04 	.word	0x00000b04
 ab8:	00000b08 	.word	0x00000b08
 abc:	682f2e2e 	.word	0x682f2e2e
 ac0:	732f6c61 	.word	0x732f6c61
 ac4:	682f6372 	.word	0x682f6372
 ac8:	735f6c61 	.word	0x735f6c61
 acc:	6d5f6970 	.word	0x6d5f6970
 ad0:	7973615f 	.word	0x7973615f
 ad4:	632e636e 	.word	0x632e636e
 ad8:	00000000 	.word	0x00000000
 adc:	682f2e2e 	.word	0x682f2e2e
 ae0:	732f6c70 	.word	0x732f6c70
 ae4:	6f637265 	.word	0x6f637265
 ae8:	70682f6d 	.word	0x70682f6d
 aec:	65735f6c 	.word	0x65735f6c
 af0:	6d6f6372 	.word	0x6d6f6372
 af4:	0000632e 	.word	0x0000632e

00000af8 <_init>:
 af8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 afa:	46c0      	nop			; (mov r8, r8)
 afc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 afe:	bc08      	pop	{r3}
 b00:	469e      	mov	lr, r3
 b02:	4770      	bx	lr

00000b04 <__init_array_start>:
 b04:	000000dd 	.word	0x000000dd

00000b08 <_fini>:
 b08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 b0a:	46c0      	nop			; (mov r8, r8)
 b0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 b0e:	bc08      	pop	{r3}
 b10:	469e      	mov	lr, r3
 b12:	4770      	bx	lr

00000b14 <__fini_array_start>:
 b14:	000000b5 	.word	0x000000b5
