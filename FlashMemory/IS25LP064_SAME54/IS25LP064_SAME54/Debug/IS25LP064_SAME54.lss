
IS25LP064_SAME54.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000cfa0  00000000  00000000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  0000cfa0  0000cfa0  0001cfa0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     0000052c  20000000  0000cfa8  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bkupram      00000000  47000000  47000000  0002052c  2**0
                  CONTENTS
  4 .qspi         00000000  04000000  04000000  0002052c  2**0
                  CONTENTS
  5 .bss          00000940  2000052c  0000d4d4  0002052c  2**2
                  ALLOC
  6 .stack        00010004  20000e6c  0000de14  0002052c  2**0
                  ALLOC
  7 .ARM.attributes 0000002e  00000000  00000000  0002052c  2**0
                  CONTENTS, READONLY
  8 .comment      00000059  00000000  00000000  0002055a  2**0
                  CONTENTS, READONLY
  9 .debug_info   0004f78e  00000000  00000000  000205b3  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00006b36  00000000  00000000  0006fd41  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000175db  00000000  00000000  00076877  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000028c8  00000000  00000000  0008de52  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00002638  00000000  00000000  0009071a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  00045489  00000000  00000000  00092d52  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0002cd38  00000000  00000000  000d81db  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    001325fe  00000000  00000000  00104f13  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  0000aa2c  00000000  00000000  00237514  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	70 0e 01 20 d5 02 00 00 d1 02 00 00 d1 02 00 00     p.. ............
      10:	d1 02 00 00 d1 02 00 00 d1 02 00 00 00 00 00 00     ................
	...
      2c:	d1 02 00 00 d1 02 00 00 00 00 00 00 d1 02 00 00     ................
      3c:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      4c:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      5c:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      6c:	f5 56 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     .V..............
      7c:	d1 02 00 00 85 45 00 00 95 45 00 00 a5 45 00 00     .....E...E...E..
      8c:	b5 45 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     .E..............
      9c:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      ac:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      bc:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      cc:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
      dc:	d1 02 00 00 d1 02 00 00 d1 02 00 00 00 00 00 00     ................
	...
      f4:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     104:	d1 02 00 00 71 69 00 00 8d 69 00 00 a9 69 00 00     ....qi...i...i..
     114:	c5 69 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     .i..............
     124:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     134:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     144:	d1 02 00 00 e1 69 00 00 fd 69 00 00 19 6a 00 00     .....i...i...j..
     154:	35 6a 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     5j..............
     164:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     174:	d1 02 00 00 d1 02 00 00 61 3b 00 00 85 a2 00 00     ........a;......
     184:	95 a2 00 00 a5 a2 00 00 b5 a2 00 00 d1 02 00 00     ................
     194:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     1a4:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     1b4:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     1c4:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     1d4:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     1e4:	d1 02 00 00 d1 02 00 00 09 7a 00 00 25 7a 00 00     .........z..%z..
     1f4:	41 7a 00 00 5d 7a 00 00 d1 02 00 00 d1 02 00 00     Az..]z..........
     204:	d1 02 00 00 79 7a 00 00 d1 02 00 00 d1 02 00 00     ....yz..........
     214:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     224:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     234:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     244:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
     254:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................

00000264 <__do_global_dtors_aux>:
     264:	b510      	push	{r4, lr}
     266:	4c05      	ldr	r4, [pc, #20]	; (27c <__do_global_dtors_aux+0x18>)
     268:	7823      	ldrb	r3, [r4, #0]
     26a:	b933      	cbnz	r3, 27a <__do_global_dtors_aux+0x16>
     26c:	4b04      	ldr	r3, [pc, #16]	; (280 <__do_global_dtors_aux+0x1c>)
     26e:	b113      	cbz	r3, 276 <__do_global_dtors_aux+0x12>
     270:	4804      	ldr	r0, [pc, #16]	; (284 <__do_global_dtors_aux+0x20>)
     272:	f3af 8000 	nop.w
     276:	2301      	movs	r3, #1
     278:	7023      	strb	r3, [r4, #0]
     27a:	bd10      	pop	{r4, pc}
     27c:	2000052c 	.word	0x2000052c
     280:	00000000 	.word	0x00000000
     284:	0000cfa8 	.word	0x0000cfa8

00000288 <frame_dummy>:
     288:	4b0c      	ldr	r3, [pc, #48]	; (2bc <frame_dummy+0x34>)
     28a:	b143      	cbz	r3, 29e <frame_dummy+0x16>
     28c:	480c      	ldr	r0, [pc, #48]	; (2c0 <frame_dummy+0x38>)
     28e:	490d      	ldr	r1, [pc, #52]	; (2c4 <frame_dummy+0x3c>)
     290:	b510      	push	{r4, lr}
     292:	f3af 8000 	nop.w
     296:	480c      	ldr	r0, [pc, #48]	; (2c8 <frame_dummy+0x40>)
     298:	6803      	ldr	r3, [r0, #0]
     29a:	b923      	cbnz	r3, 2a6 <frame_dummy+0x1e>
     29c:	bd10      	pop	{r4, pc}
     29e:	480a      	ldr	r0, [pc, #40]	; (2c8 <frame_dummy+0x40>)
     2a0:	6803      	ldr	r3, [r0, #0]
     2a2:	b933      	cbnz	r3, 2b2 <frame_dummy+0x2a>
     2a4:	4770      	bx	lr
     2a6:	4b09      	ldr	r3, [pc, #36]	; (2cc <frame_dummy+0x44>)
     2a8:	2b00      	cmp	r3, #0
     2aa:	d0f7      	beq.n	29c <frame_dummy+0x14>
     2ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     2b0:	4718      	bx	r3
     2b2:	4b06      	ldr	r3, [pc, #24]	; (2cc <frame_dummy+0x44>)
     2b4:	2b00      	cmp	r3, #0
     2b6:	d0f5      	beq.n	2a4 <frame_dummy+0x1c>
     2b8:	4718      	bx	r3
     2ba:	bf00      	nop
     2bc:	00000000 	.word	0x00000000
     2c0:	0000cfa8 	.word	0x0000cfa8
     2c4:	20000530 	.word	0x20000530
     2c8:	0000cfa8 	.word	0x0000cfa8
     2cc:	00000000 	.word	0x00000000

000002d0 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     2d0:	e7fe      	b.n	2d0 <Dummy_Handler>
	...

000002d4 <Reset_Handler>:
{
     2d4:	b508      	push	{r3, lr}
        if (pSrc != pDest) {
     2d6:	4b17      	ldr	r3, [pc, #92]	; (334 <Reset_Handler+0x60>)
     2d8:	4a17      	ldr	r2, [pc, #92]	; (338 <Reset_Handler+0x64>)
     2da:	429a      	cmp	r2, r3
     2dc:	d010      	beq.n	300 <Reset_Handler+0x2c>
                for (; pDest < &_erelocate;) {
     2de:	4b17      	ldr	r3, [pc, #92]	; (33c <Reset_Handler+0x68>)
     2e0:	4a14      	ldr	r2, [pc, #80]	; (334 <Reset_Handler+0x60>)
     2e2:	429a      	cmp	r2, r3
     2e4:	d20c      	bcs.n	300 <Reset_Handler+0x2c>
     2e6:	3b01      	subs	r3, #1
     2e8:	1a9b      	subs	r3, r3, r2
     2ea:	f023 0303 	bic.w	r3, r3, #3
     2ee:	3304      	adds	r3, #4
     2f0:	4413      	add	r3, r2
     2f2:	4911      	ldr	r1, [pc, #68]	; (338 <Reset_Handler+0x64>)
                        *pDest++ = *pSrc++;
     2f4:	f851 0b04 	ldr.w	r0, [r1], #4
     2f8:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
     2fc:	429a      	cmp	r2, r3
     2fe:	d1f9      	bne.n	2f4 <Reset_Handler+0x20>
        for (pDest = &_szero; pDest < &_ezero;) {
     300:	4b0f      	ldr	r3, [pc, #60]	; (340 <Reset_Handler+0x6c>)
     302:	4a10      	ldr	r2, [pc, #64]	; (344 <Reset_Handler+0x70>)
     304:	429a      	cmp	r2, r3
     306:	d20a      	bcs.n	31e <Reset_Handler+0x4a>
     308:	3b01      	subs	r3, #1
     30a:	1a9b      	subs	r3, r3, r2
     30c:	f023 0303 	bic.w	r3, r3, #3
     310:	3304      	adds	r3, #4
     312:	4413      	add	r3, r2
                *pDest++ = 0;
     314:	2100      	movs	r1, #0
     316:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
     31a:	4293      	cmp	r3, r2
     31c:	d1fb      	bne.n	316 <Reset_Handler+0x42>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     31e:	4a0a      	ldr	r2, [pc, #40]	; (348 <Reset_Handler+0x74>)
     320:	4b0a      	ldr	r3, [pc, #40]	; (34c <Reset_Handler+0x78>)
     322:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
     326:	6093      	str	r3, [r2, #8]
        __libc_init_array();
     328:	4b09      	ldr	r3, [pc, #36]	; (350 <Reset_Handler+0x7c>)
     32a:	4798      	blx	r3
        main();
     32c:	4b09      	ldr	r3, [pc, #36]	; (354 <Reset_Handler+0x80>)
     32e:	4798      	blx	r3
     330:	e7fe      	b.n	330 <Reset_Handler+0x5c>
     332:	bf00      	nop
     334:	20000000 	.word	0x20000000
     338:	0000cfa8 	.word	0x0000cfa8
     33c:	2000052c 	.word	0x2000052c
     340:	20000e6c 	.word	0x20000e6c
     344:	2000052c 	.word	0x2000052c
     348:	e000ed00 	.word	0xe000ed00
     34c:	00000000 	.word	0x00000000
     350:	0000c755 	.word	0x0000c755
     354:	000007ed 	.word	0x000007ed

00000358 <_ZN16FlashMemoryClassD1Ev>:
	spi_descriptor=spi_des;
	memoryAddress=flashMemory;
} //FlashMemoryClass

// default destructor
FlashMemoryClass::~FlashMemoryClass()
     358:	b510      	push	{r4, lr}
     35a:	4604      	mov	r4, r0
     35c:	3090      	adds	r0, #144	; 0x90
     35e:	4b02      	ldr	r3, [pc, #8]	; (368 <_ZN16FlashMemoryClassD1Ev+0x10>)
     360:	4798      	blx	r3
{
} //~FlashMemoryClass
     362:	4620      	mov	r0, r4
     364:	bd10      	pop	{r4, pc}
     366:	bf00      	nop
     368:	000008cd 	.word	0x000008cd

0000036c <_ZN16FlashMemoryClassC1EP21spi_m_sync_descriptor>:
FlashMemoryClass::FlashMemoryClass(spi_m_sync_descriptor *spi_des)
     36c:	b538      	push	{r3, r4, r5, lr}
     36e:	4604      	mov	r4, r0
     370:	460d      	mov	r5, r1
     372:	3090      	adds	r0, #144	; 0x90
     374:	4b06      	ldr	r3, [pc, #24]	; (390 <_ZN16FlashMemoryClassC1EP21spi_m_sync_descriptor+0x24>)
     376:	4798      	blx	r3
	appParameters=defaultParameters;
     378:	227c      	movs	r2, #124	; 0x7c
     37a:	4906      	ldr	r1, [pc, #24]	; (394 <_ZN16FlashMemoryClassC1EP21spi_m_sync_descriptor+0x28>)
     37c:	1d20      	adds	r0, r4, #4
     37e:	4b06      	ldr	r3, [pc, #24]	; (398 <_ZN16FlashMemoryClassC1EP21spi_m_sync_descriptor+0x2c>)
     380:	4798      	blx	r3
	spi_descriptor=spi_des;
     382:	f8c4 508c 	str.w	r5, [r4, #140]	; 0x8c
	memoryAddress=flashMemory;
     386:	2300      	movs	r3, #0
     388:	6023      	str	r3, [r4, #0]
} //FlashMemoryClass
     38a:	4620      	mov	r0, r4
     38c:	bd38      	pop	{r3, r4, r5, pc}
     38e:	bf00      	nop
     390:	000008c1 	.word	0x000008c1
     394:	0000cadc 	.word	0x0000cadc
     398:	0000c7a5 	.word	0x0000c7a5

0000039c <_ZN16FlashMemoryClass9flashOpenEv>:
}



void FlashMemoryClass::flashOpen(void)
{
     39c:	b510      	push	{r4, lr}
     39e:	4604      	mov	r4, r0
	garbage=spi.enable();
     3a0:	3090      	adds	r0, #144	; 0x90
     3a2:	4b02      	ldr	r3, [pc, #8]	; (3ac <_ZN16FlashMemoryClass9flashOpenEv+0x10>)
     3a4:	4798      	blx	r3
     3a6:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
     3aa:	bd10      	pop	{r4, pc}
     3ac:	00000901 	.word	0x00000901

000003b0 <_ZN16FlashMemoryClass12CE_Low_FlashEv>:
	CE_High_Flash();
	return (uint8_t)src;
}
void FlashMemoryClass::CE_Low_Flash(void)
{
	garbage=0;
     3b0:	2300      	movs	r3, #0
     3b2:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = ~data;
}

static inline void hri_port_clear_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     3b6:	4b04      	ldr	r3, [pc, #16]	; (3c8 <_ZN16FlashMemoryClass12CE_Low_FlashEv+0x18>)
     3b8:	2220      	movs	r2, #32
     3ba:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     3be:	2280      	movs	r2, #128	; 0x80
     3c0:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
     3c4:	4770      	bx	lr
     3c6:	bf00      	nop
     3c8:	41008000 	.word	0x41008000

000003cc <_ZN16FlashMemoryClass13CE_High_FlashEv>:
		gpio_set_pin_level(CS_FRAM,true);
}

void FlashMemoryClass::CE_High_Flash(void)
{
	garbage=0;
     3cc:	2300      	movs	r3, #0
     3ce:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
     3d2:	4b04      	ldr	r3, [pc, #16]	; (3e4 <_ZN16FlashMemoryClass13CE_High_FlashEv+0x18>)
     3d4:	2220      	movs	r2, #32
     3d6:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
     3da:	2280      	movs	r2, #128	; 0x80
     3dc:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
     3e0:	4770      	bx	lr
     3e2:	bf00      	nop
     3e4:	41008000 	.word	0x41008000

000003e8 <_ZN16FlashMemoryClass9Send_ByteEh>:
	// <true"> High
	true);
	gpio_set_pin_level(CS_FRAM,true);
}
uint8_t FlashMemoryClass::Send_Byte(uint8_t byte)
{
     3e8:	b500      	push	{lr}
     3ea:	b083      	sub	sp, #12
     3ec:	ab02      	add	r3, sp, #8
     3ee:	f803 1d01 	strb.w	r1, [r3, #-1]!
	//WaitBusy();
	spi.write(&byte,1);
     3f2:	2201      	movs	r2, #1
     3f4:	4619      	mov	r1, r3
     3f6:	3090      	adds	r0, #144	; 0x90
     3f8:	4b03      	ldr	r3, [pc, #12]	; (408 <_ZN16FlashMemoryClass9Send_ByteEh+0x20>)
     3fa:	4798      	blx	r3
	return byte;
}
     3fc:	f89d 0007 	ldrb.w	r0, [sp, #7]
     400:	b003      	add	sp, #12
     402:	f85d fb04 	ldr.w	pc, [sp], #4
     406:	bf00      	nop
     408:	00000925 	.word	0x00000925

0000040c <_ZN16FlashMemoryClass8Get_ByteEv>:

uint8_t FlashMemoryClass::Get_Byte(void)
{
     40c:	b500      	push	{lr}
     40e:	b083      	sub	sp, #12
	uint8_t byte;
	//WaitBusy();
	spi.read(&byte,1);
     410:	2201      	movs	r2, #1
     412:	f10d 0107 	add.w	r1, sp, #7
     416:	3090      	adds	r0, #144	; 0x90
     418:	4b03      	ldr	r3, [pc, #12]	; (428 <_ZN16FlashMemoryClass8Get_ByteEv+0x1c>)
     41a:	4798      	blx	r3
	
	return byte;
}
     41c:	f89d 0007 	ldrb.w	r0, [sp, #7]
     420:	b003      	add	sp, #12
     422:	f85d fb04 	ldr.w	pc, [sp], #4
     426:	bf00      	nop
     428:	00000945 	.word	0x00000945

0000042c <_ZN16FlashMemoryClass4WRDIEv>:

}


void FlashMemoryClass::WRDI(void)
{
     42c:	b510      	push	{r4, lr}
     42e:	4604      	mov	r4, r0
	CE_Low_Flash();			// enable device
     430:	4b04      	ldr	r3, [pc, #16]	; (444 <_ZN16FlashMemoryClass4WRDIEv+0x18>)
     432:	4798      	blx	r3
	Send_Byte(kFlashWRinhibit);	// send WRDI command
     434:	2104      	movs	r1, #4
     436:	4620      	mov	r0, r4
     438:	4b03      	ldr	r3, [pc, #12]	; (448 <_ZN16FlashMemoryClass4WRDIEv+0x1c>)
     43a:	4798      	blx	r3
//	WaitBusy();
	CE_High_Flash();			// disable device
     43c:	4620      	mov	r0, r4
     43e:	4b03      	ldr	r3, [pc, #12]	; (44c <_ZN16FlashMemoryClass4WRDIEv+0x20>)
     440:	4798      	blx	r3
     442:	bd10      	pop	{r4, pc}
     444:	000003b1 	.word	0x000003b1
     448:	000003e9 	.word	0x000003e9
     44c:	000003cd 	.word	0x000003cd

00000450 <_ZN16FlashMemoryClass15Block_Erase_64KEm>:
	WRDI();
	}
	flashClose();
}
	
void	FlashMemoryClass::Block_Erase_64K(uint32_t Dst){
     450:	b570      	push	{r4, r5, r6, lr}
     452:	4604      	mov	r4, r0
     454:	460e      	mov	r6, r1

		CE_Low_Flash();				// enable device
     456:	4b0a      	ldr	r3, [pc, #40]	; (480 <_ZN16FlashMemoryClass15Block_Erase_64KEm+0x30>)
     458:	4798      	blx	r3
		Send_Byte(kFlash64KBlockErase);		// send Sector Erase command
     45a:	21d8      	movs	r1, #216	; 0xd8
     45c:	4620      	mov	r0, r4
     45e:	4d09      	ldr	r5, [pc, #36]	; (484 <_ZN16FlashMemoryClass15Block_Erase_64KEm+0x34>)
     460:	47a8      	blx	r5
		Send_Byte(((Dst & 0xFFFFFF) >> 16)); // send 3 address bytes
     462:	f3c6 4107 	ubfx	r1, r6, #16, #8
     466:	4620      	mov	r0, r4
     468:	47a8      	blx	r5
		Send_Byte(((Dst & 0xFFFF) >> 8));
     46a:	f3c6 2107 	ubfx	r1, r6, #8, #8
     46e:	4620      	mov	r0, r4
     470:	47a8      	blx	r5
		Send_Byte(Dst & 0xFF);
     472:	b2f1      	uxtb	r1, r6
     474:	4620      	mov	r0, r4
     476:	47a8      	blx	r5
		CE_High_Flash();				// disable device
     478:	4620      	mov	r0, r4
     47a:	4b03      	ldr	r3, [pc, #12]	; (488 <_ZN16FlashMemoryClass15Block_Erase_64KEm+0x38>)
     47c:	4798      	blx	r3
     47e:	bd70      	pop	{r4, r5, r6, pc}
     480:	000003b1 	.word	0x000003b1
     484:	000003e9 	.word	0x000003e9
     488:	000003cd 	.word	0x000003cd

0000048c <_ZN16FlashMemoryClass18ReadSingleRegisterEh>:
uint8_t  FlashMemoryClass::ReadFunctionRegister(void){
			// disable device
		return ReadSingleRegister(kFlashReadFunction);
	}
	
uint8_t  FlashMemoryClass::ReadSingleRegister(uint8_t r){
     48c:	b538      	push	{r3, r4, r5, lr}
     48e:	4604      	mov	r4, r0
     490:	460d      	mov	r5, r1
	uint8_t b = 0;
	CE_Low_Flash();			// enable device
     492:	4b07      	ldr	r3, [pc, #28]	; (4b0 <_ZN16FlashMemoryClass18ReadSingleRegisterEh+0x24>)
     494:	4798      	blx	r3
	Send_Byte(r);	// send RDSR command
     496:	4629      	mov	r1, r5
     498:	4620      	mov	r0, r4
     49a:	4b06      	ldr	r3, [pc, #24]	; (4b4 <_ZN16FlashMemoryClass18ReadSingleRegisterEh+0x28>)
     49c:	4798      	blx	r3
	b = Get_Byte();		/* receive byte */
     49e:	4620      	mov	r0, r4
     4a0:	4b05      	ldr	r3, [pc, #20]	; (4b8 <_ZN16FlashMemoryClass18ReadSingleRegisterEh+0x2c>)
     4a2:	4798      	blx	r3
     4a4:	4605      	mov	r5, r0
	CE_High_Flash();			// disable device
     4a6:	4620      	mov	r0, r4
     4a8:	4b04      	ldr	r3, [pc, #16]	; (4bc <_ZN16FlashMemoryClass18ReadSingleRegisterEh+0x30>)
     4aa:	4798      	blx	r3
	return b;
}
     4ac:	4628      	mov	r0, r5
     4ae:	bd38      	pop	{r3, r4, r5, pc}
     4b0:	000003b1 	.word	0x000003b1
     4b4:	000003e9 	.word	0x000003e9
     4b8:	0000040d 	.word	0x0000040d
     4bc:	000003cd 	.word	0x000003cd

000004c0 <_ZN16FlashMemoryClass18ReadStatusRegisterEv>:
uint8_t  FlashMemoryClass::ReadStatusRegister(void){
     4c0:	b510      	push	{r4, lr}
     4c2:	4604      	mov	r4, r0
			status=ReadSingleRegister(kFlashReadSR);
     4c4:	2105      	movs	r1, #5
     4c6:	4b02      	ldr	r3, [pc, #8]	; (4d0 <_ZN16FlashMemoryClass18ReadStatusRegisterEv+0x10>)
     4c8:	4798      	blx	r3
     4ca:	f884 00bc 	strb.w	r0, [r4, #188]	; 0xbc
	}
     4ce:	bd10      	pop	{r4, pc}
     4d0:	0000048d 	.word	0x0000048d

000004d4 <_ZN16FlashMemoryClass4WRENEv>:
{
     4d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     4d6:	4604      	mov	r4, r0
		CE_Low_Flash();			// enable device
     4d8:	4f08      	ldr	r7, [pc, #32]	; (4fc <_ZN16FlashMemoryClass4WRENEv+0x28>)
		Send_Byte(kFlashWREnable);	// send WREN command
     4da:	4e09      	ldr	r6, [pc, #36]	; (500 <_ZN16FlashMemoryClass4WRENEv+0x2c>)
		CE_High_Flash();
     4dc:	4d09      	ldr	r5, [pc, #36]	; (504 <_ZN16FlashMemoryClass4WRENEv+0x30>)
		CE_Low_Flash();			// enable device
     4de:	4620      	mov	r0, r4
     4e0:	47b8      	blx	r7
		Send_Byte(kFlashWREnable);	// send WREN command
     4e2:	2106      	movs	r1, #6
     4e4:	4620      	mov	r0, r4
     4e6:	47b0      	blx	r6
		CE_High_Flash();
     4e8:	4620      	mov	r0, r4
     4ea:	47a8      	blx	r5
		status=ReadStatusRegister();
     4ec:	4620      	mov	r0, r4
     4ee:	4b06      	ldr	r3, [pc, #24]	; (508 <_ZN16FlashMemoryClass4WRENEv+0x34>)
     4f0:	4798      	blx	r3
     4f2:	f884 00bc 	strb.w	r0, [r4, #188]	; 0xbc
	} while ((status&&(0x02))==0);
     4f6:	2800      	cmp	r0, #0
     4f8:	d0f1      	beq.n	4de <_ZN16FlashMemoryClass4WRENEv+0xa>
}
     4fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     4fc:	000003b1 	.word	0x000003b1
     500:	000003e9 	.word	0x000003e9
     504:	000003cd 	.word	0x000003cd
     508:	000004c1 	.word	0x000004c1

0000050c <_ZN16FlashMemoryClass8WaitBusyEv>:
uint8_t  FlashMemoryClass::WaitBusy(void){
     50c:	b538      	push	{r3, r4, r5, lr}
     50e:	4604      	mov	r4, r0
	status = ReadStatusRegister();
     510:	4b07      	ldr	r3, [pc, #28]	; (530 <_ZN16FlashMemoryClass8WaitBusyEv+0x24>)
     512:	4798      	blx	r3
     514:	f884 00bc 	strb.w	r0, [r4, #188]	; 0xbc
		while ((status & kFlashWriteSR) == 1){// waste time until not busy
     518:	f010 0f01 	tst.w	r0, #1
     51c:	d007      	beq.n	52e <_ZN16FlashMemoryClass8WaitBusyEv+0x22>
			status = ReadStatusRegister();
     51e:	4d04      	ldr	r5, [pc, #16]	; (530 <_ZN16FlashMemoryClass8WaitBusyEv+0x24>)
     520:	4620      	mov	r0, r4
     522:	47a8      	blx	r5
     524:	f884 00bc 	strb.w	r0, [r4, #188]	; 0xbc
		while ((status & kFlashWriteSR) == 1){// waste time until not busy
     528:	f010 0f01 	tst.w	r0, #1
     52c:	d1f8      	bne.n	520 <_ZN16FlashMemoryClass8WaitBusyEv+0x14>
	}
     52e:	bd38      	pop	{r3, r4, r5, pc}
     530:	000004c1 	.word	0x000004c1

00000534 <_ZN16FlashMemoryClass10flashCloseEv>:
	Send_Byte(byte);		/* receive byte */
	CE_High_Flash();			// disable device
	return byte;
}

void FlashMemoryClass::flashClose(void){
     534:	b508      	push	{r3, lr}
	garbage=0;
     536:	2300      	movs	r3, #0
     538:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
		spi.disable();
     53c:	3090      	adds	r0, #144	; 0x90
     53e:	4b01      	ldr	r3, [pc, #4]	; (544 <_ZN16FlashMemoryClass10flashCloseEv+0x10>)
     540:	4798      	blx	r3
     542:	bd08      	pop	{r3, pc}
     544:	00000965 	.word	0x00000965

00000548 <_ZN16FlashMemoryClass4InitEv>:
void	FlashMemoryClass::Init(void){
     548:	b538      	push	{r3, r4, r5, lr}
     54a:	4604      	mov	r4, r0
	spi.SetDescriptor(spi_descriptor);
     54c:	f100 0590 	add.w	r5, r0, #144	; 0x90
     550:	f8d0 108c 	ldr.w	r1, [r0, #140]	; 0x8c
     554:	4628      	mov	r0, r5
     556:	4b09      	ldr	r3, [pc, #36]	; (57c <_ZN16FlashMemoryClass4InitEv+0x34>)
     558:	4798      	blx	r3
	spi.init();
     55a:	4628      	mov	r0, r5
     55c:	4b08      	ldr	r3, [pc, #32]	; (580 <_ZN16FlashMemoryClass4InitEv+0x38>)
     55e:	4798      	blx	r3
	memoryAddress=0x00;
     560:	2300      	movs	r3, #0
     562:	6023      	str	r3, [r4, #0]
	flashOpen();
     564:	4620      	mov	r0, r4
     566:	4b07      	ldr	r3, [pc, #28]	; (584 <_ZN16FlashMemoryClass4InitEv+0x3c>)
     568:	4798      	blx	r3
	status=ReadStatusRegister();
     56a:	4620      	mov	r0, r4
     56c:	4b06      	ldr	r3, [pc, #24]	; (588 <_ZN16FlashMemoryClass4InitEv+0x40>)
     56e:	4798      	blx	r3
     570:	f884 00bc 	strb.w	r0, [r4, #188]	; 0xbc
	flashClose();
     574:	4620      	mov	r0, r4
     576:	4b05      	ldr	r3, [pc, #20]	; (58c <_ZN16FlashMemoryClass4InitEv+0x44>)
     578:	4798      	blx	r3
     57a:	bd38      	pop	{r3, r4, r5, pc}
     57c:	000008f5 	.word	0x000008f5
     580:	000008d1 	.word	0x000008d1
     584:	0000039d 	.word	0x0000039d
     588:	000004c1 	.word	0x000004c1
     58c:	00000535 	.word	0x00000535

00000590 <_ZN16FlashMemoryClass7IsReadyEv>:
bool  FlashMemoryClass::IsReady(void){
     590:	b510      	push	{r4, lr}
     592:	4604      	mov	r4, r0
	flashOpen();
     594:	4b08      	ldr	r3, [pc, #32]	; (5b8 <_ZN16FlashMemoryClass7IsReadyEv+0x28>)
     596:	4798      	blx	r3
	status = ReadStatusRegister();
     598:	4620      	mov	r0, r4
     59a:	4b08      	ldr	r3, [pc, #32]	; (5bc <_ZN16FlashMemoryClass7IsReadyEv+0x2c>)
     59c:	4798      	blx	r3
     59e:	f884 00bc 	strb.w	r0, [r4, #188]	; 0xbc
	flashClose();
     5a2:	4620      	mov	r0, r4
     5a4:	4b06      	ldr	r3, [pc, #24]	; (5c0 <_ZN16FlashMemoryClass7IsReadyEv+0x30>)
     5a6:	4798      	blx	r3
	return	(status&0x01)==0;
     5a8:	f894 00bc 	ldrb.w	r0, [r4, #188]	; 0xbc
     5ac:	f080 0001 	eor.w	r0, r0, #1
}
     5b0:	f000 0001 	and.w	r0, r0, #1
     5b4:	bd10      	pop	{r4, pc}
     5b6:	bf00      	nop
     5b8:	0000039d 	.word	0x0000039d
     5bc:	000004c1 	.word	0x000004c1
     5c0:	00000535 	.word	0x00000535

000005c4 <_ZN16FlashMemoryClass12Sector_EraseEm>:
	}
void FlashMemoryClass::Sector_Erase(uint32_t Dst)
{
     5c4:	b570      	push	{r4, r5, r6, lr}
     5c6:	4604      	mov	r4, r0
     5c8:	460e      	mov	r6, r1
	CE_Low_Flash();				// enable device
     5ca:	4b0a      	ldr	r3, [pc, #40]	; (5f4 <_ZN16FlashMemoryClass12Sector_EraseEm+0x30>)
     5cc:	4798      	blx	r3
	Send_Byte(kFlash4KSectorErase);		// send Sector Erase command
     5ce:	2120      	movs	r1, #32
     5d0:	4620      	mov	r0, r4
     5d2:	4d09      	ldr	r5, [pc, #36]	; (5f8 <_ZN16FlashMemoryClass12Sector_EraseEm+0x34>)
     5d4:	47a8      	blx	r5
	Send_Byte(((Dst & 0xFFFFFF) >> 16)); // send 3 address bytes
     5d6:	f3c6 4107 	ubfx	r1, r6, #16, #8
     5da:	4620      	mov	r0, r4
     5dc:	47a8      	blx	r5
	Send_Byte(((Dst & 0xFFFF) >> 8));
     5de:	f3c6 2107 	ubfx	r1, r6, #8, #8
     5e2:	4620      	mov	r0, r4
     5e4:	47a8      	blx	r5
	Send_Byte(Dst & 0xFF);
     5e6:	b2f1      	uxtb	r1, r6
     5e8:	4620      	mov	r0, r4
     5ea:	47a8      	blx	r5
	CE_High_Flash();				// disable device
     5ec:	4620      	mov	r0, r4
     5ee:	4b03      	ldr	r3, [pc, #12]	; (5fc <_ZN16FlashMemoryClass12Sector_EraseEm+0x38>)
     5f0:	4798      	blx	r3
     5f2:	bd70      	pop	{r4, r5, r6, pc}
     5f4:	000003b1 	.word	0x000003b1
     5f8:	000003e9 	.word	0x000003e9
     5fc:	000003cd 	.word	0x000003cd

00000600 <_ZN16FlashMemoryClass10eraseFlashEmm>:
	{
     600:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
     604:	4604      	mov	r4, r0
     606:	460e      	mov	r6, r1
     608:	4615      	mov	r5, r2
	flashOpen();
     60a:	4b1b      	ldr	r3, [pc, #108]	; (678 <_ZN16FlashMemoryClass10eraseFlashEmm+0x78>)
     60c:	4798      	blx	r3
	while (eraseRemaining > 0)
     60e:	b17d      	cbz	r5, 630 <_ZN16FlashMemoryClass10eraseFlashEmm+0x30>
	WREN();
     610:	4f1a      	ldr	r7, [pc, #104]	; (67c <_ZN16FlashMemoryClass10eraseFlashEmm+0x7c>)
		Block_Erase_64K(eraseAddress);
     612:	f8df 907c 	ldr.w	r9, [pc, #124]	; 690 <_ZN16FlashMemoryClass10eraseFlashEmm+0x90>
		Sector_Erase(eraseAddress);
     616:	f8df 8068 	ldr.w	r8, [pc, #104]	; 680 <_ZN16FlashMemoryClass10eraseFlashEmm+0x80>
     61a:	e01d      	b.n	658 <_ZN16FlashMemoryClass10eraseFlashEmm+0x58>
		Sector_Erase(eraseAddress);
     61c:	4631      	mov	r1, r6
     61e:	4620      	mov	r0, r4
     620:	4b17      	ldr	r3, [pc, #92]	; (680 <_ZN16FlashMemoryClass10eraseFlashEmm+0x80>)
     622:	4798      	blx	r3
	WaitBusy();
     624:	4620      	mov	r0, r4
     626:	4b17      	ldr	r3, [pc, #92]	; (684 <_ZN16FlashMemoryClass10eraseFlashEmm+0x84>)
     628:	4798      	blx	r3
	WRDI();
     62a:	4620      	mov	r0, r4
     62c:	4b16      	ldr	r3, [pc, #88]	; (688 <_ZN16FlashMemoryClass10eraseFlashEmm+0x88>)
     62e:	4798      	blx	r3
	flashClose();
     630:	4620      	mov	r0, r4
     632:	4b16      	ldr	r3, [pc, #88]	; (68c <_ZN16FlashMemoryClass10eraseFlashEmm+0x8c>)
     634:	4798      	blx	r3
     636:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		Block_Erase_64K(eraseAddress);
     63a:	4631      	mov	r1, r6
     63c:	4620      	mov	r0, r4
     63e:	47c8      	blx	r9
		eraseAddress += (64 * 1024);
     640:	f506 3680 	add.w	r6, r6, #65536	; 0x10000
		eraseRemaining -= (64 * 1024);
     644:	f5a5 3580 	sub.w	r5, r5, #65536	; 0x10000
	WaitBusy();
     648:	4620      	mov	r0, r4
     64a:	4b0e      	ldr	r3, [pc, #56]	; (684 <_ZN16FlashMemoryClass10eraseFlashEmm+0x84>)
     64c:	4798      	blx	r3
	WRDI();
     64e:	4620      	mov	r0, r4
     650:	4b0d      	ldr	r3, [pc, #52]	; (688 <_ZN16FlashMemoryClass10eraseFlashEmm+0x88>)
     652:	4798      	blx	r3
	while (eraseRemaining > 0)
     654:	2d00      	cmp	r5, #0
     656:	d0eb      	beq.n	630 <_ZN16FlashMemoryClass10eraseFlashEmm+0x30>
	WREN();
     658:	4620      	mov	r0, r4
     65a:	47b8      	blx	r7
	if (eraseRemaining <= 4 * 1024)
     65c:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
     660:	d9dc      	bls.n	61c <_ZN16FlashMemoryClass10eraseFlashEmm+0x1c>
	else if (eraseRemaining < 64 * 1024)
     662:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
     666:	d2e8      	bcs.n	63a <_ZN16FlashMemoryClass10eraseFlashEmm+0x3a>
		Sector_Erase(eraseAddress);
     668:	4631      	mov	r1, r6
     66a:	4620      	mov	r0, r4
     66c:	47c0      	blx	r8
		eraseAddress += (4 * 1024);
     66e:	f506 5680 	add.w	r6, r6, #4096	; 0x1000
		eraseRemaining -= (4 * 1024);
     672:	f5a5 5580 	sub.w	r5, r5, #4096	; 0x1000
     676:	e7e7      	b.n	648 <_ZN16FlashMemoryClass10eraseFlashEmm+0x48>
     678:	0000039d 	.word	0x0000039d
     67c:	000004d5 	.word	0x000004d5
     680:	000005c5 	.word	0x000005c5
     684:	0000050d 	.word	0x0000050d
     688:	0000042d 	.word	0x0000042d
     68c:	00000535 	.word	0x00000535
     690:	00000451 	.word	0x00000451

00000694 <_ZN16FlashMemoryClass12WriteAddressEPhmm>:
	delay_ms(100);
	CE_Low_Flash();
	Send_Byte(0x99);
	CE_High_Flash();				// disable device
}
uint32_t	FlashMemoryClass::WriteAddress(uint8_t *p,uint32_t addr, uint32_t size){
     694:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     698:	4605      	mov	r5, r0
     69a:	460e      	mov	r6, r1
     69c:	4690      	mov	r8, r2
     69e:	461f      	mov	r7, r3
	uint32_t	w;
	while(!IsReady());
     6a0:	4c1d      	ldr	r4, [pc, #116]	; (718 <_ZN16FlashMemoryClass12WriteAddressEPhmm+0x84>)
     6a2:	4628      	mov	r0, r5
     6a4:	47a0      	blx	r4
     6a6:	2800      	cmp	r0, #0
     6a8:	d0fb      	beq.n	6a2 <_ZN16FlashMemoryClass12WriteAddressEPhmm+0xe>
	flashOpen();
     6aa:	4628      	mov	r0, r5
     6ac:	4b1b      	ldr	r3, [pc, #108]	; (71c <_ZN16FlashMemoryClass12WriteAddressEPhmm+0x88>)
     6ae:	4798      	blx	r3
	WREN();
     6b0:	4628      	mov	r0, r5
     6b2:	4b1b      	ldr	r3, [pc, #108]	; (720 <_ZN16FlashMemoryClass12WriteAddressEPhmm+0x8c>)
     6b4:	4798      	blx	r3
	CE_Low_Flash();
     6b6:	4628      	mov	r0, r5
     6b8:	4b1a      	ldr	r3, [pc, #104]	; (724 <_ZN16FlashMemoryClass12WriteAddressEPhmm+0x90>)
     6ba:	4798      	blx	r3
	localBuffer[0]=kFlashByteProgram;
     6bc:	2302      	movs	r3, #2
     6be:	f885 30a4 	strb.w	r3, [r5, #164]	; 0xa4
	localBuffer[1]=(uint8_t)((addr & 0xFFFFFF) >> 16);
     6c2:	ea4f 4318 	mov.w	r3, r8, lsr #16
     6c6:	f885 30a5 	strb.w	r3, [r5, #165]	; 0xa5
	localBuffer[2]=(uint8_t)((addr & 0xFFFF) >> 8);
     6ca:	ea4f 2318 	mov.w	r3, r8, lsr #8
     6ce:	f885 30a6 	strb.w	r3, [r5, #166]	; 0xa6
	localBuffer[3]=(uint8_t)(addr&0xFF);
     6d2:	f885 80a7 	strb.w	r8, [r5, #167]	; 0xa7
	for (uint32_t i = 4; i <(size)+4; i++)
     6d6:	1d3a      	adds	r2, r7, #4
     6d8:	2a04      	cmp	r2, #4
     6da:	d90a      	bls.n	6f2 <_ZN16FlashMemoryClass12WriteAddressEPhmm+0x5e>
     6dc:	1e70      	subs	r0, r6, #1
     6de:	f105 04a7 	add.w	r4, r5, #167	; 0xa7
     6e2:	1e79      	subs	r1, r7, #1
     6e4:	4431      	add	r1, r6
	{
		localBuffer[i]=*p;
     6e6:	f810 3f01 	ldrb.w	r3, [r0, #1]!
     6ea:	f804 3f01 	strb.w	r3, [r4, #1]!
	for (uint32_t i = 4; i <(size)+4; i++)
     6ee:	4288      	cmp	r0, r1
     6f0:	d1f9      	bne.n	6e6 <_ZN16FlashMemoryClass12WriteAddressEPhmm+0x52>
		p++;
	}


	w=spi.write(&localBuffer[0],size+4);
     6f2:	f105 01a4 	add.w	r1, r5, #164	; 0xa4
     6f6:	f105 0090 	add.w	r0, r5, #144	; 0x90
     6fa:	4b0b      	ldr	r3, [pc, #44]	; (728 <_ZN16FlashMemoryClass12WriteAddressEPhmm+0x94>)
     6fc:	4798      	blx	r3
     6fe:	4604      	mov	r4, r0

	CE_High_Flash();
     700:	4628      	mov	r0, r5
     702:	4b0a      	ldr	r3, [pc, #40]	; (72c <_ZN16FlashMemoryClass12WriteAddressEPhmm+0x98>)
     704:	4798      	blx	r3
	WRDI();
     706:	4628      	mov	r0, r5
     708:	4b09      	ldr	r3, [pc, #36]	; (730 <_ZN16FlashMemoryClass12WriteAddressEPhmm+0x9c>)
     70a:	4798      	blx	r3
	flashClose();
     70c:	4628      	mov	r0, r5
     70e:	4b09      	ldr	r3, [pc, #36]	; (734 <_ZN16FlashMemoryClass12WriteAddressEPhmm+0xa0>)
     710:	4798      	blx	r3
	return	w;
	/*return (uint32_t)writeFlash(addr,(void*)p,size);*/
}
     712:	4620      	mov	r0, r4
     714:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     718:	00000591 	.word	0x00000591
     71c:	0000039d 	.word	0x0000039d
     720:	000004d5 	.word	0x000004d5
     724:	000003b1 	.word	0x000003b1
     728:	00000925 	.word	0x00000925
     72c:	000003cd 	.word	0x000003cd
     730:	0000042d 	.word	0x0000042d
     734:	00000535 	.word	0x00000535

00000738 <_ZN16FlashMemoryClass11ReadAddressEPhmm>:
uint32_t	FlashMemoryClass::ReadAddress(uint8_t *p,uint32_t addr, uint32_t size){
     738:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     73c:	4604      	mov	r4, r0
     73e:	460f      	mov	r7, r1
     740:	4616      	mov	r6, r2
     742:	4698      	mov	r8, r3
	uint8_t	dummy;
	while(!IsReady());
     744:	4d16      	ldr	r5, [pc, #88]	; (7a0 <_ZN16FlashMemoryClass11ReadAddressEPhmm+0x68>)
     746:	4620      	mov	r0, r4
     748:	47a8      	blx	r5
     74a:	2800      	cmp	r0, #0
     74c:	d0fb      	beq.n	746 <_ZN16FlashMemoryClass11ReadAddressEPhmm+0xe>
	flashOpen();
     74e:	4620      	mov	r0, r4
     750:	4b14      	ldr	r3, [pc, #80]	; (7a4 <_ZN16FlashMemoryClass11ReadAddressEPhmm+0x6c>)
     752:	4798      	blx	r3
	CE_Low_Flash();
     754:	4620      	mov	r0, r4
     756:	4b14      	ldr	r3, [pc, #80]	; (7a8 <_ZN16FlashMemoryClass11ReadAddressEPhmm+0x70>)
     758:	4798      	blx	r3
	instruction[0]=kFlashRead;
     75a:	2303      	movs	r3, #3
     75c:	f884 30b8 	strb.w	r3, [r4, #184]	; 0xb8
	instruction[1]=(uint8_t)((addr & 0xFFFFFF) >> 16);
     760:	0c33      	lsrs	r3, r6, #16
     762:	f884 30b9 	strb.w	r3, [r4, #185]	; 0xb9
	instruction[2]=(uint8_t)((addr & 0xFFFF) >> 8);
     766:	0a33      	lsrs	r3, r6, #8
     768:	f884 30ba 	strb.w	r3, [r4, #186]	; 0xba
	instruction[3]=(uint8_t)(addr&0xFF);
     76c:	f884 60bb 	strb.w	r6, [r4, #187]	; 0xbb
		
	uint32_t	r=spi.write(instruction,4);
     770:	f104 0590 	add.w	r5, r4, #144	; 0x90
     774:	2204      	movs	r2, #4
     776:	f104 01b8 	add.w	r1, r4, #184	; 0xb8
     77a:	4628      	mov	r0, r5
     77c:	4b0b      	ldr	r3, [pc, #44]	; (7ac <_ZN16FlashMemoryClass11ReadAddressEPhmm+0x74>)
     77e:	4798      	blx	r3
	r=spi.read(p,size);
     780:	4642      	mov	r2, r8
     782:	4639      	mov	r1, r7
     784:	4628      	mov	r0, r5
     786:	4b0a      	ldr	r3, [pc, #40]	; (7b0 <_ZN16FlashMemoryClass11ReadAddressEPhmm+0x78>)
     788:	4798      	blx	r3
     78a:	4605      	mov	r5, r0
	CE_High_Flash();
     78c:	4620      	mov	r0, r4
     78e:	4b09      	ldr	r3, [pc, #36]	; (7b4 <_ZN16FlashMemoryClass11ReadAddressEPhmm+0x7c>)
     790:	4798      	blx	r3
	flashClose();
     792:	4620      	mov	r0, r4
     794:	4b08      	ldr	r3, [pc, #32]	; (7b8 <_ZN16FlashMemoryClass11ReadAddressEPhmm+0x80>)
     796:	4798      	blx	r3
	
	return	r;
	/*return	(uint32_t)readFlash((void*)p,addr,size);*/
}
     798:	4628      	mov	r0, r5
     79a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     79e:	bf00      	nop
     7a0:	00000591 	.word	0x00000591
     7a4:	0000039d 	.word	0x0000039d
     7a8:	000003b1 	.word	0x000003b1
     7ac:	00000925 	.word	0x00000925
     7b0:	00000945 	.word	0x00000945
     7b4:	000003cd 	.word	0x000003cd
     7b8:	00000535 	.word	0x00000535

000007bc <_GLOBAL__sub_I__ZN16FlashMemoryClassC2Ev>:
     7bc:	b510      	push	{r4, lr}
     7be:	4c05      	ldr	r4, [pc, #20]	; (7d4 <_GLOBAL__sub_I__ZN16FlashMemoryClassC2Ev+0x18>)
     7c0:	4905      	ldr	r1, [pc, #20]	; (7d8 <_GLOBAL__sub_I__ZN16FlashMemoryClassC2Ev+0x1c>)
     7c2:	4620      	mov	r0, r4
     7c4:	4b05      	ldr	r3, [pc, #20]	; (7dc <_GLOBAL__sub_I__ZN16FlashMemoryClassC2Ev+0x20>)
     7c6:	4798      	blx	r3
     7c8:	4a05      	ldr	r2, [pc, #20]	; (7e0 <_GLOBAL__sub_I__ZN16FlashMemoryClassC2Ev+0x24>)
     7ca:	4906      	ldr	r1, [pc, #24]	; (7e4 <_GLOBAL__sub_I__ZN16FlashMemoryClassC2Ev+0x28>)
     7cc:	4620      	mov	r0, r4
     7ce:	4b06      	ldr	r3, [pc, #24]	; (7e8 <_GLOBAL__sub_I__ZN16FlashMemoryClassC2Ev+0x2c>)
     7d0:	4798      	blx	r3
     7d2:	bd10      	pop	{r4, pc}
     7d4:	20000548 	.word	0x20000548
     7d8:	20000c1c 	.word	0x20000c1c
     7dc:	0000036d 	.word	0x0000036d
     7e0:	20000000 	.word	0x20000000
     7e4:	00000359 	.word	0x00000359
     7e8:	0000c721 	.word	0x0000c721

000007ec <main>:
#include <atmel_start.h>
#include "main.h"
#include "stdlib.h"
//static FlashMemoryClass	flash(&SPI_0);
int main(void)
{
     7ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     7f0:	b089      	sub	sp, #36	; 0x24
	atmel_start_init();
     7f2:	4b2a      	ldr	r3, [pc, #168]	; (89c <main+0xb0>)
     7f4:	4798      	blx	r3
	bool is_corrupted = false;
	uint8_t tx_buffer[ISSI_BUFFER_SIZE] ;
	uint8_t rx_buffer[ISSI_BUFFER_SIZE] ;
	
	flash.Init();
     7f6:	482a      	ldr	r0, [pc, #168]	; (8a0 <main+0xb4>)
     7f8:	4b2a      	ldr	r3, [pc, #168]	; (8a4 <main+0xb8>)
     7fa:	4798      	blx	r3
     7fc:	ab04      	add	r3, sp, #16
     7fe:	aa08      	add	r2, sp, #32
     800:	461c      	mov	r4, r3

	//usb.print("QSPI Program Started\n\r");
	/* Initialize Tx buffer */
	for (int i = 0; i <ISSI_BUFFER_SIZE ; i++) {
		tx_buffer[i] = (uint8_t)i;
     802:	1ae1      	subs	r1, r4, r3
     804:	f804 1b01 	strb.w	r1, [r4], #1
	for (int i = 0; i <ISSI_BUFFER_SIZE ; i++) {
     808:	4294      	cmp	r4, r2
     80a:	d1fa      	bne.n	802 <main+0x16>
	}

	flash.eraseFlash(0,TEST_FLASH_SIZE);
     80c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     810:	2100      	movs	r1, #0
     812:	4823      	ldr	r0, [pc, #140]	; (8a0 <main+0xb4>)
     814:	4b24      	ldr	r3, [pc, #144]	; (8a8 <main+0xbc>)
     816:	4798      	blx	r3
	/* Erase flash memory */
	uint32_t	m=0;
     818:	2500      	movs	r5, #0
	while (1) {
		//delay_us(100);
		/* Write data to flash memory */
		if (ERR_NONE ==flash.WriteAddress((uint8_t *)tx_buffer,m,ISSI_BUFFER_SIZE)) {
     81a:	4f21      	ldr	r7, [pc, #132]	; (8a0 <main+0xb4>)
     81c:	f04f 0a10 	mov.w	sl, #16
			
		}
		delay_ms(WRITE_DELAY);
     820:	f8df 8098 	ldr.w	r8, [pc, #152]	; 8bc <main+0xd0>
		if (ERR_NONE ==flash.WriteAddress((uint8_t *)tx_buffer,m,ISSI_BUFFER_SIZE)) {
     824:	4653      	mov	r3, sl
     826:	462a      	mov	r2, r5
     828:	a904      	add	r1, sp, #16
     82a:	4638      	mov	r0, r7
     82c:	4e1f      	ldr	r6, [pc, #124]	; (8ac <main+0xc0>)
     82e:	47b0      	blx	r6
		delay_ms(WRITE_DELAY);
     830:	2064      	movs	r0, #100	; 0x64
     832:	47c0      	blx	r8
		//flash.WaitBusy();
		/* Read data from flash memory */
		if (ERR_NONE == flash.ReadAddress((uint8_t *)rx_buffer,m,ISSI_BUFFER_SIZE)) {
     834:	4653      	mov	r3, sl
     836:	462a      	mov	r2, r5
     838:	4669      	mov	r1, sp
     83a:	4638      	mov	r0, r7
     83c:	4e1c      	ldr	r6, [pc, #112]	; (8b0 <main+0xc4>)
     83e:	47b0      	blx	r6
     840:	f44f 2280 	mov.w	r2, #262144	; 0x40000
     844:	4b1b      	ldr	r3, [pc, #108]	; (8b4 <main+0xc8>)
     846:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
		}
		//	delay_us(100);
		is_corrupted = false;
		gpio_set_pin_level(LED0,true);
		for (int i = 1; i < ISSI_BUFFER_SIZE; i++) {
			if (tx_buffer[i] != rx_buffer[i]) {
     84a:	f89d 2011 	ldrb.w	r2, [sp, #17]
     84e:	f89d 3001 	ldrb.w	r3, [sp, #1]
     852:	429a      	cmp	r2, r3
     854:	d11b      	bne.n	88e <main+0xa2>
     856:	f10d 0312 	add.w	r3, sp, #18
     85a:	f10d 0202 	add.w	r2, sp, #2
     85e:	f813 0b01 	ldrb.w	r0, [r3], #1
     862:	f812 1b01 	ldrb.w	r1, [r2], #1
     866:	4288      	cmp	r0, r1
     868:	d111      	bne.n	88e <main+0xa2>
		for (int i = 1; i < ISSI_BUFFER_SIZE; i++) {
     86a:	42a3      	cmp	r3, r4
     86c:	d1f7      	bne.n	85e <main+0x72>
				break;
			}
			
		}

		delay_ms(WRITE_DELAY);
     86e:	2064      	movs	r0, #100	; 0x64
     870:	47c0      	blx	r8
		m=(m+ISSI_BUFFER_SIZE)%TEST_FLASH_SIZE;
     872:	3510      	adds	r5, #16
     874:	f3c5 050b 	ubfx	r5, r5, #0, #12
     878:	f10d 090f 	add.w	r9, sp, #15
     87c:	f10d 0b1f 	add.w	fp, sp, #31
		for (int i = 0; i <ISSI_BUFFER_SIZE ; i++) {
			tx_buffer[i] = (uint8_t)rand();
     880:	4e0d      	ldr	r6, [pc, #52]	; (8b8 <main+0xcc>)
     882:	47b0      	blx	r6
     884:	f809 0f01 	strb.w	r0, [r9, #1]!
		for (int i = 0; i <ISSI_BUFFER_SIZE ; i++) {
     888:	45d9      	cmp	r9, fp
     88a:	d0cb      	beq.n	824 <main+0x38>
     88c:	e7f9      	b.n	882 <main+0x96>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     88e:	f44f 2280 	mov.w	r2, #262144	; 0x40000
     892:	4b08      	ldr	r3, [pc, #32]	; (8b4 <main+0xc8>)
     894:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
     898:	e7e9      	b.n	86e <main+0x82>
     89a:	bf00      	nop
     89c:	00000975 	.word	0x00000975
     8a0:	20000548 	.word	0x20000548
     8a4:	00000549 	.word	0x00000549
     8a8:	00000601 	.word	0x00000601
     8ac:	00000695 	.word	0x00000695
     8b0:	00000739 	.word	0x00000739
     8b4:	41008000 	.word	0x41008000
     8b8:	0000c975 	.word	0x0000c975
     8bc:	00001e15 	.word	0x00001e15

000008c0 <_ZN13SPI_Syn_ClassC1Ev>:
SPI_Syn_Class	*ptrSPISync;

// default constructor
SPI_Syn_Class::SPI_Syn_Class()
{
		ptrSPISync=this;
     8c0:	4b01      	ldr	r3, [pc, #4]	; (8c8 <_ZN13SPI_Syn_ClassC1Ev+0x8>)
     8c2:	6018      	str	r0, [r3, #0]
//	SPI=SPI_1;
} //SPI_Syn_Class
     8c4:	4770      	bx	lr
     8c6:	bf00      	nop
     8c8:	20000608 	.word	0x20000608

000008cc <_ZN13SPI_Syn_ClassD1Ev>:
} //SPI_Syn_Class

// default destructor
SPI_Syn_Class::~SPI_Syn_Class()
{
} //~SPI_Syn_Class
     8cc:	4770      	bx	lr
	...

000008d0 <_ZN13SPI_Syn_Class4initEv>:

void SPI_Syn_Class::init(){
     8d0:	b510      	push	{r4, lr}
     8d2:	4604      	mov	r4, r0
	spi_m_sync_get_io_descriptor(SPI, &spio);
     8d4:	f100 0108 	add.w	r1, r0, #8
     8d8:	6840      	ldr	r0, [r0, #4]
     8da:	4b04      	ldr	r3, [pc, #16]	; (8ec <_ZN13SPI_Syn_Class4initEv+0x1c>)
     8dc:	4798      	blx	r3

	spi_m_sync_enable(SPI);
     8de:	6860      	ldr	r0, [r4, #4]
     8e0:	4b03      	ldr	r3, [pc, #12]	; (8f0 <_ZN13SPI_Syn_Class4initEv+0x20>)
     8e2:	4798      	blx	r3
	
	ready=true;
     8e4:	2301      	movs	r3, #1
     8e6:	7023      	strb	r3, [r4, #0]
	xferDone=true;
     8e8:	7063      	strb	r3, [r4, #1]
     8ea:	bd10      	pop	{r4, pc}
     8ec:	00002931 	.word	0x00002931
     8f0:	000027a5 	.word	0x000027a5

000008f4 <_ZN13SPI_Syn_Class13SetDescriptorEP21spi_m_sync_descriptor>:
	
}
void SPI_Syn_Class::SetDescriptor(spi_m_sync_descriptor *spiDesc){
	ptrSPISync=this;
     8f4:	4b01      	ldr	r3, [pc, #4]	; (8fc <_ZN13SPI_Syn_Class13SetDescriptorEP21spi_m_sync_descriptor+0x8>)
     8f6:	6018      	str	r0, [r3, #0]
	SPI=spiDesc;
     8f8:	6041      	str	r1, [r0, #4]
     8fa:	4770      	bx	lr
     8fc:	20000608 	.word	0x20000608

00000900 <_ZN13SPI_Syn_Class6enableEv>:
}


int32_t SPI_Syn_Class::enable(){
     900:	b510      	push	{r4, lr}
     902:	4604      	mov	r4, r0
	spi_m_sync_get_io_descriptor(SPI, &spio);
     904:	f100 0108 	add.w	r1, r0, #8
     908:	6840      	ldr	r0, [r0, #4]
     90a:	4b04      	ldr	r3, [pc, #16]	; (91c <_ZN13SPI_Syn_Class6enableEv+0x1c>)
     90c:	4798      	blx	r3
	spi_m_sync_enable(SPI);
     90e:	6860      	ldr	r0, [r4, #4]
     910:	4b03      	ldr	r3, [pc, #12]	; (920 <_ZN13SPI_Syn_Class6enableEv+0x20>)
     912:	4798      	blx	r3
	ready=true;
     914:	2301      	movs	r3, #1
     916:	7023      	strb	r3, [r4, #0]
	return 0;
}
     918:	2000      	movs	r0, #0
     91a:	bd10      	pop	{r4, pc}
     91c:	00002931 	.word	0x00002931
     920:	000027a5 	.word	0x000027a5

00000924 <_ZN13SPI_Syn_Class5writeEPKhl>:

int32_t  SPI_Syn_Class::write(const uint8_t * p, int32_t n){
     924:	b510      	push	{r4, lr}
     926:	4604      	mov	r4, r0
	int32_t w;
	wFlag=true;
     928:	2301      	movs	r3, #1
     92a:	7403      	strb	r3, [r0, #16]
	w= io_write(spio,p,(uint16_t)n);
     92c:	b292      	uxth	r2, r2
     92e:	6880      	ldr	r0, [r0, #8]
     930:	4b03      	ldr	r3, [pc, #12]	; (940 <_ZN13SPI_Syn_Class5writeEPKhl+0x1c>)
     932:	4798      	blx	r3
	wFlag=(bool)w;
     934:	1c03      	adds	r3, r0, #0
     936:	bf18      	it	ne
     938:	2301      	movne	r3, #1
     93a:	7423      	strb	r3, [r4, #16]
	 return w;
	
}
     93c:	bd10      	pop	{r4, pc}
     93e:	bf00      	nop
     940:	000020fd 	.word	0x000020fd

00000944 <_ZN13SPI_Syn_Class4readEPhl>:
int32_t  SPI_Syn_Class::read(uint8_t * p, int32_t n){
     944:	b510      	push	{r4, lr}
     946:	4604      	mov	r4, r0
	int32_t r;
	rFlag=true;
     948:	2301      	movs	r3, #1
     94a:	7443      	strb	r3, [r0, #17]
	r=io_read(spio,p,(uint16_t)n);
     94c:	b292      	uxth	r2, r2
     94e:	6880      	ldr	r0, [r0, #8]
     950:	4b03      	ldr	r3, [pc, #12]	; (960 <_ZN13SPI_Syn_Class4readEPhl+0x1c>)
     952:	4798      	blx	r3
	rFlag=(bool)r;
     954:	1c03      	adds	r3, r0, #0
     956:	bf18      	it	ne
     958:	2301      	movne	r3, #1
     95a:	7463      	strb	r3, [r4, #17]
	return  r;
}
     95c:	bd10      	pop	{r4, pc}
     95e:	bf00      	nop
     960:	0000214d 	.word	0x0000214d

00000964 <_ZN13SPI_Syn_Class7disableEv>:
void SPI_Syn_Class::disable(void){
     964:	b508      	push	{r3, lr}
	spi_m_sync_disable(SPI);
     966:	6840      	ldr	r0, [r0, #4]
     968:	4b01      	ldr	r3, [pc, #4]	; (970 <_ZN13SPI_Syn_Class7disableEv+0xc>)
     96a:	4798      	blx	r3
     96c:	bd08      	pop	{r3, pc}
     96e:	bf00      	nop
     970:	000027e1 	.word	0x000027e1

00000974 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
     974:	b580      	push	{r7, lr}
     976:	af00      	add	r7, sp, #0
	system_init();
     978:	4b03      	ldr	r3, [pc, #12]	; (988 <atmel_start_init+0x14>)
     97a:	4798      	blx	r3
	usb_init();
     97c:	4b03      	ldr	r3, [pc, #12]	; (98c <atmel_start_init+0x18>)
     97e:	4798      	blx	r3
	spi_nor_flash_init();
     980:	4b03      	ldr	r3, [pc, #12]	; (990 <atmel_start_init+0x1c>)
     982:	4798      	blx	r3
}
     984:	bf00      	nop
     986:	bd80      	pop	{r7, pc}
     988:	00001a8d 	.word	0x00001a8d
     98c:	0000a989 	.word	0x0000a989
     990:	0000a91d 	.word	0x0000a91d

00000994 <hri_gclk_write_PCHCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_gclk_write_PCHCTRL_reg(const void *const hw, uint8_t index, hri_gclk_pchctrl_reg_t data)
{
     994:	b480      	push	{r7}
     996:	b085      	sub	sp, #20
     998:	af00      	add	r7, sp, #0
     99a:	60f8      	str	r0, [r7, #12]
     99c:	460b      	mov	r3, r1
     99e:	607a      	str	r2, [r7, #4]
     9a0:	72fb      	strb	r3, [r7, #11]
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->PCHCTRL[index].reg = data;
     9a2:	7afa      	ldrb	r2, [r7, #11]
     9a4:	68fb      	ldr	r3, [r7, #12]
     9a6:	3220      	adds	r2, #32
     9a8:	6879      	ldr	r1, [r7, #4]
     9aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	GCLK_CRITICAL_SECTION_LEAVE();
}
     9ae:	bf00      	nop
     9b0:	3714      	adds	r7, #20
     9b2:	46bd      	mov	sp, r7
     9b4:	f85d 7b04 	ldr.w	r7, [sp], #4
     9b8:	4770      	bx	lr

000009ba <hri_mclk_set_AHBMASK_USB_bit>:
	((Mclk *)hw)->AHBMASK.reg ^= MCLK_AHBMASK_DMAC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_AHBMASK_USB_bit(const void *const hw)
{
     9ba:	b480      	push	{r7}
     9bc:	b083      	sub	sp, #12
     9be:	af00      	add	r7, sp, #0
     9c0:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_USB;
     9c2:	687b      	ldr	r3, [r7, #4]
     9c4:	691b      	ldr	r3, [r3, #16]
     9c6:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
     9ca:	687b      	ldr	r3, [r7, #4]
     9cc:	611a      	str	r2, [r3, #16]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     9ce:	bf00      	nop
     9d0:	370c      	adds	r7, #12
     9d2:	46bd      	mov	sp, r7
     9d4:	f85d 7b04 	ldr.w	r7, [sp], #4
     9d8:	4770      	bx	lr

000009da <hri_mclk_set_AHBMASK_QSPI_bit>:
	((Mclk *)hw)->AHBMASK.reg ^= MCLK_AHBMASK_PAC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_AHBMASK_QSPI_bit(const void *const hw)
{
     9da:	b480      	push	{r7}
     9dc:	b083      	sub	sp, #12
     9de:	af00      	add	r7, sp, #0
     9e0:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_QSPI;
     9e2:	687b      	ldr	r3, [r7, #4]
     9e4:	691b      	ldr	r3, [r3, #16]
     9e6:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
     9ea:	687b      	ldr	r3, [r7, #4]
     9ec:	611a      	str	r2, [r3, #16]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     9ee:	bf00      	nop
     9f0:	370c      	adds	r7, #12
     9f2:	46bd      	mov	sp, r7
     9f4:	f85d 7b04 	ldr.w	r7, [sp], #4
     9f8:	4770      	bx	lr

000009fa <hri_mclk_set_AHBMASK_CAN1_bit>:
	((Mclk *)hw)->AHBMASK.reg ^= MCLK_AHBMASK_CAN0;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_AHBMASK_CAN1_bit(const void *const hw)
{
     9fa:	b480      	push	{r7}
     9fc:	b083      	sub	sp, #12
     9fe:	af00      	add	r7, sp, #0
     a00:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_CAN1;
     a02:	687b      	ldr	r3, [r7, #4]
     a04:	691b      	ldr	r3, [r3, #16]
     a06:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
     a0a:	687b      	ldr	r3, [r7, #4]
     a0c:	611a      	str	r2, [r3, #16]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     a0e:	bf00      	nop
     a10:	370c      	adds	r7, #12
     a12:	46bd      	mov	sp, r7
     a14:	f85d 7b04 	ldr.w	r7, [sp], #4
     a18:	4770      	bx	lr

00000a1a <hri_mclk_set_AHBMASK_QSPI_2X_bit>:
	((Mclk *)hw)->AHBMASK.reg ^= MCLK_AHBMASK_PUKCC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_AHBMASK_QSPI_2X_bit(const void *const hw)
{
     a1a:	b480      	push	{r7}
     a1c:	b083      	sub	sp, #12
     a1e:	af00      	add	r7, sp, #0
     a20:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_QSPI_2X;
     a22:	687b      	ldr	r3, [r7, #4]
     a24:	691b      	ldr	r3, [r3, #16]
     a26:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
     a2a:	687b      	ldr	r3, [r7, #4]
     a2c:	611a      	str	r2, [r3, #16]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     a2e:	bf00      	nop
     a30:	370c      	adds	r7, #12
     a32:	46bd      	mov	sp, r7
     a34:	f85d 7b04 	ldr.w	r7, [sp], #4
     a38:	4770      	bx	lr

00000a3a <hri_mclk_set_APBAMASK_WDT_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_GCLK;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_WDT_bit(const void *const hw)
{
     a3a:	b480      	push	{r7}
     a3c:	b083      	sub	sp, #12
     a3e:	af00      	add	r7, sp, #0
     a40:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_WDT;
     a42:	687b      	ldr	r3, [r7, #4]
     a44:	695b      	ldr	r3, [r3, #20]
     a46:	f443 7280 	orr.w	r2, r3, #256	; 0x100
     a4a:	687b      	ldr	r3, [r7, #4]
     a4c:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     a4e:	bf00      	nop
     a50:	370c      	adds	r7, #12
     a52:	46bd      	mov	sp, r7
     a54:	f85d 7b04 	ldr.w	r7, [sp], #4
     a58:	4770      	bx	lr

00000a5a <hri_mclk_set_APBAMASK_RTC_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_WDT;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_RTC_bit(const void *const hw)
{
     a5a:	b480      	push	{r7}
     a5c:	b083      	sub	sp, #12
     a5e:	af00      	add	r7, sp, #0
     a60:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_RTC;
     a62:	687b      	ldr	r3, [r7, #4]
     a64:	695b      	ldr	r3, [r3, #20]
     a66:	f443 7200 	orr.w	r2, r3, #512	; 0x200
     a6a:	687b      	ldr	r3, [r7, #4]
     a6c:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     a6e:	bf00      	nop
     a70:	370c      	adds	r7, #12
     a72:	46bd      	mov	sp, r7
     a74:	f85d 7b04 	ldr.w	r7, [sp], #4
     a78:	4770      	bx	lr

00000a7a <hri_mclk_set_APBAMASK_EIC_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_RTC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_EIC_bit(const void *const hw)
{
     a7a:	b480      	push	{r7}
     a7c:	b083      	sub	sp, #12
     a7e:	af00      	add	r7, sp, #0
     a80:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_EIC;
     a82:	687b      	ldr	r3, [r7, #4]
     a84:	695b      	ldr	r3, [r3, #20]
     a86:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
     a8a:	687b      	ldr	r3, [r7, #4]
     a8c:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     a8e:	bf00      	nop
     a90:	370c      	adds	r7, #12
     a92:	46bd      	mov	sp, r7
     a94:	f85d 7b04 	ldr.w	r7, [sp], #4
     a98:	4770      	bx	lr

00000a9a <hri_mclk_set_APBAMASK_SERCOM0_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_FREQM;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_SERCOM0_bit(const void *const hw)
{
     a9a:	b480      	push	{r7}
     a9c:	b083      	sub	sp, #12
     a9e:	af00      	add	r7, sp, #0
     aa0:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_SERCOM0;
     aa2:	687b      	ldr	r3, [r7, #4]
     aa4:	695b      	ldr	r3, [r3, #20]
     aa6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
     aaa:	687b      	ldr	r3, [r7, #4]
     aac:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     aae:	bf00      	nop
     ab0:	370c      	adds	r7, #12
     ab2:	46bd      	mov	sp, r7
     ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
     ab8:	4770      	bx	lr

00000aba <hri_mclk_set_APBAMASK_SERCOM1_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_SERCOM0;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_SERCOM1_bit(const void *const hw)
{
     aba:	b480      	push	{r7}
     abc:	b083      	sub	sp, #12
     abe:	af00      	add	r7, sp, #0
     ac0:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_SERCOM1;
     ac2:	687b      	ldr	r3, [r7, #4]
     ac4:	695b      	ldr	r3, [r3, #20]
     ac6:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
     aca:	687b      	ldr	r3, [r7, #4]
     acc:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     ace:	bf00      	nop
     ad0:	370c      	adds	r7, #12
     ad2:	46bd      	mov	sp, r7
     ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
     ad8:	4770      	bx	lr

00000ada <hri_mclk_set_APBAMASK_TC0_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_SERCOM1;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_TC0_bit(const void *const hw)
{
     ada:	b480      	push	{r7}
     adc:	b083      	sub	sp, #12
     ade:	af00      	add	r7, sp, #0
     ae0:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_TC0;
     ae2:	687b      	ldr	r3, [r7, #4]
     ae4:	695b      	ldr	r3, [r3, #20]
     ae6:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
     aea:	687b      	ldr	r3, [r7, #4]
     aec:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     aee:	bf00      	nop
     af0:	370c      	adds	r7, #12
     af2:	46bd      	mov	sp, r7
     af4:	f85d 7b04 	ldr.w	r7, [sp], #4
     af8:	4770      	bx	lr

00000afa <hri_mclk_set_APBAMASK_TC1_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_TC0;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_TC1_bit(const void *const hw)
{
     afa:	b480      	push	{r7}
     afc:	b083      	sub	sp, #12
     afe:	af00      	add	r7, sp, #0
     b00:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_TC1;
     b02:	687b      	ldr	r3, [r7, #4]
     b04:	695b      	ldr	r3, [r3, #20]
     b06:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
     b0a:	687b      	ldr	r3, [r7, #4]
     b0c:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     b0e:	bf00      	nop
     b10:	370c      	adds	r7, #12
     b12:	46bd      	mov	sp, r7
     b14:	f85d 7b04 	ldr.w	r7, [sp], #4
     b18:	4770      	bx	lr

00000b1a <hri_mclk_set_APBBMASK_USB_bit>:
{
	return ((Mclk *)hw)->APBAMASK.reg;
}

static inline void hri_mclk_set_APBBMASK_USB_bit(const void *const hw)
{
     b1a:	b480      	push	{r7}
     b1c:	b083      	sub	sp, #12
     b1e:	af00      	add	r7, sp, #0
     b20:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_USB;
     b22:	687b      	ldr	r3, [r7, #4]
     b24:	699b      	ldr	r3, [r3, #24]
     b26:	f043 0201 	orr.w	r2, r3, #1
     b2a:	687b      	ldr	r3, [r7, #4]
     b2c:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     b2e:	bf00      	nop
     b30:	370c      	adds	r7, #12
     b32:	46bd      	mov	sp, r7
     b34:	f85d 7b04 	ldr.w	r7, [sp], #4
     b38:	4770      	bx	lr

00000b3a <hri_mclk_set_APBBMASK_DSU_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_USB;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_DSU_bit(const void *const hw)
{
     b3a:	b480      	push	{r7}
     b3c:	b083      	sub	sp, #12
     b3e:	af00      	add	r7, sp, #0
     b40:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_DSU;
     b42:	687b      	ldr	r3, [r7, #4]
     b44:	699b      	ldr	r3, [r3, #24]
     b46:	f043 0202 	orr.w	r2, r3, #2
     b4a:	687b      	ldr	r3, [r7, #4]
     b4c:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     b4e:	bf00      	nop
     b50:	370c      	adds	r7, #12
     b52:	46bd      	mov	sp, r7
     b54:	f85d 7b04 	ldr.w	r7, [sp], #4
     b58:	4770      	bx	lr

00000b5a <hri_mclk_set_APBBMASK_EVSYS_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_HMATRIX;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_EVSYS_bit(const void *const hw)
{
     b5a:	b480      	push	{r7}
     b5c:	b083      	sub	sp, #12
     b5e:	af00      	add	r7, sp, #0
     b60:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_EVSYS;
     b62:	687b      	ldr	r3, [r7, #4]
     b64:	699b      	ldr	r3, [r3, #24]
     b66:	f043 0280 	orr.w	r2, r3, #128	; 0x80
     b6a:	687b      	ldr	r3, [r7, #4]
     b6c:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     b6e:	bf00      	nop
     b70:	370c      	adds	r7, #12
     b72:	46bd      	mov	sp, r7
     b74:	f85d 7b04 	ldr.w	r7, [sp], #4
     b78:	4770      	bx	lr

00000b7a <hri_mclk_set_APBBMASK_TC2_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_TCC1;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_TC2_bit(const void *const hw)
{
     b7a:	b480      	push	{r7}
     b7c:	b083      	sub	sp, #12
     b7e:	af00      	add	r7, sp, #0
     b80:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TC2;
     b82:	687b      	ldr	r3, [r7, #4]
     b84:	699b      	ldr	r3, [r3, #24]
     b86:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
     b8a:	687b      	ldr	r3, [r7, #4]
     b8c:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     b8e:	bf00      	nop
     b90:	370c      	adds	r7, #12
     b92:	46bd      	mov	sp, r7
     b94:	f85d 7b04 	ldr.w	r7, [sp], #4
     b98:	4770      	bx	lr

00000b9a <hri_mclk_set_APBBMASK_TC3_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_TC2;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_TC3_bit(const void *const hw)
{
     b9a:	b480      	push	{r7}
     b9c:	b083      	sub	sp, #12
     b9e:	af00      	add	r7, sp, #0
     ba0:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TC3;
     ba2:	687b      	ldr	r3, [r7, #4]
     ba4:	699b      	ldr	r3, [r3, #24]
     ba6:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
     baa:	687b      	ldr	r3, [r7, #4]
     bac:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     bae:	bf00      	nop
     bb0:	370c      	adds	r7, #12
     bb2:	46bd      	mov	sp, r7
     bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
     bb8:	4770      	bx	lr

00000bba <hri_mclk_set_APBCMASK_QSPI_bit>:
	((Mclk *)hw)->APBCMASK.reg ^= MCLK_APBCMASK_ICM;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBCMASK_QSPI_bit(const void *const hw)
{
     bba:	b480      	push	{r7}
     bbc:	b083      	sub	sp, #12
     bbe:	af00      	add	r7, sp, #0
     bc0:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_QSPI;
     bc2:	687b      	ldr	r3, [r7, #4]
     bc4:	69db      	ldr	r3, [r3, #28]
     bc6:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
     bca:	687b      	ldr	r3, [r7, #4]
     bcc:	61da      	str	r2, [r3, #28]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     bce:	bf00      	nop
     bd0:	370c      	adds	r7, #12
     bd2:	46bd      	mov	sp, r7
     bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
     bd8:	4770      	bx	lr

00000bda <hri_mclk_set_APBDMASK_SERCOM5_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_SERCOM4;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_SERCOM5_bit(const void *const hw)
{
     bda:	b480      	push	{r7}
     bdc:	b083      	sub	sp, #12
     bde:	af00      	add	r7, sp, #0
     be0:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM5;
     be2:	687b      	ldr	r3, [r7, #4]
     be4:	6a1b      	ldr	r3, [r3, #32]
     be6:	f043 0202 	orr.w	r2, r3, #2
     bea:	687b      	ldr	r3, [r7, #4]
     bec:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     bee:	bf00      	nop
     bf0:	370c      	adds	r7, #12
     bf2:	46bd      	mov	sp, r7
     bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
     bf8:	4770      	bx	lr

00000bfa <hri_mclk_set_APBDMASK_SERCOM6_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_SERCOM5;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_SERCOM6_bit(const void *const hw)
{
     bfa:	b480      	push	{r7}
     bfc:	b083      	sub	sp, #12
     bfe:	af00      	add	r7, sp, #0
     c00:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM6;
     c02:	687b      	ldr	r3, [r7, #4]
     c04:	6a1b      	ldr	r3, [r3, #32]
     c06:	f043 0204 	orr.w	r2, r3, #4
     c0a:	687b      	ldr	r3, [r7, #4]
     c0c:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     c0e:	bf00      	nop
     c10:	370c      	adds	r7, #12
     c12:	46bd      	mov	sp, r7
     c14:	f85d 7b04 	ldr.w	r7, [sp], #4
     c18:	4770      	bx	lr

00000c1a <hri_mclk_set_APBDMASK_TC7_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_TC6;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_TC7_bit(const void *const hw)
{
     c1a:	b480      	push	{r7}
     c1c:	b083      	sub	sp, #12
     c1e:	af00      	add	r7, sp, #0
     c20:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_TC7;
     c22:	687b      	ldr	r3, [r7, #4]
     c24:	6a1b      	ldr	r3, [r3, #32]
     c26:	f043 0240 	orr.w	r2, r3, #64	; 0x40
     c2a:	687b      	ldr	r3, [r7, #4]
     c2c:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     c2e:	bf00      	nop
     c30:	370c      	adds	r7, #12
     c32:	46bd      	mov	sp, r7
     c34:	f85d 7b04 	ldr.w	r7, [sp], #4
     c38:	4770      	bx	lr

00000c3a <hri_port_set_DIR_reg>:
{
	((Port *)hw)->Group[submodule_index].DIRTGL.reg = PORT_DIR_DIR(mask);
}

static inline void hri_port_set_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
     c3a:	b480      	push	{r7}
     c3c:	b085      	sub	sp, #20
     c3e:	af00      	add	r7, sp, #0
     c40:	60f8      	str	r0, [r7, #12]
     c42:	460b      	mov	r3, r1
     c44:	607a      	str	r2, [r7, #4]
     c46:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     c48:	7afb      	ldrb	r3, [r7, #11]
     c4a:	68fa      	ldr	r2, [r7, #12]
     c4c:	01db      	lsls	r3, r3, #7
     c4e:	4413      	add	r3, r2
     c50:	3308      	adds	r3, #8
     c52:	687a      	ldr	r2, [r7, #4]
     c54:	601a      	str	r2, [r3, #0]
}
     c56:	bf00      	nop
     c58:	3714      	adds	r7, #20
     c5a:	46bd      	mov	sp, r7
     c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
     c60:	4770      	bx	lr

00000c62 <hri_port_clear_DIR_reg>:
	((Port *)hw)->Group[submodule_index].DIRSET.reg = data;
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = ~data;
}

static inline void hri_port_clear_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
     c62:	b480      	push	{r7}
     c64:	b085      	sub	sp, #20
     c66:	af00      	add	r7, sp, #0
     c68:	60f8      	str	r0, [r7, #12]
     c6a:	460b      	mov	r3, r1
     c6c:	607a      	str	r2, [r7, #4]
     c6e:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     c70:	7afb      	ldrb	r3, [r7, #11]
     c72:	68fa      	ldr	r2, [r7, #12]
     c74:	01db      	lsls	r3, r3, #7
     c76:	4413      	add	r3, r2
     c78:	3304      	adds	r3, #4
     c7a:	687a      	ldr	r2, [r7, #4]
     c7c:	601a      	str	r2, [r3, #0]
}
     c7e:	bf00      	nop
     c80:	3714      	adds	r7, #20
     c82:	46bd      	mov	sp, r7
     c84:	f85d 7b04 	ldr.w	r7, [sp], #4
     c88:	4770      	bx	lr

00000c8a <hri_port_set_OUT_reg>:
{
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = PORT_OUT_OUT(mask);
}

static inline void hri_port_set_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
     c8a:	b480      	push	{r7}
     c8c:	b085      	sub	sp, #20
     c8e:	af00      	add	r7, sp, #0
     c90:	60f8      	str	r0, [r7, #12]
     c92:	460b      	mov	r3, r1
     c94:	607a      	str	r2, [r7, #4]
     c96:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     c98:	7afb      	ldrb	r3, [r7, #11]
     c9a:	68fa      	ldr	r2, [r7, #12]
     c9c:	01db      	lsls	r3, r3, #7
     c9e:	4413      	add	r3, r2
     ca0:	3318      	adds	r3, #24
     ca2:	687a      	ldr	r2, [r7, #4]
     ca4:	601a      	str	r2, [r3, #0]
}
     ca6:	bf00      	nop
     ca8:	3714      	adds	r7, #20
     caa:	46bd      	mov	sp, r7
     cac:	f85d 7b04 	ldr.w	r7, [sp], #4
     cb0:	4770      	bx	lr

00000cb2 <hri_port_clear_OUT_reg>:
	((Port *)hw)->Group[submodule_index].OUTSET.reg = data;
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = ~data;
}

static inline void hri_port_clear_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
     cb2:	b480      	push	{r7}
     cb4:	b085      	sub	sp, #20
     cb6:	af00      	add	r7, sp, #0
     cb8:	60f8      	str	r0, [r7, #12]
     cba:	460b      	mov	r3, r1
     cbc:	607a      	str	r2, [r7, #4]
     cbe:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     cc0:	7afb      	ldrb	r3, [r7, #11]
     cc2:	68fa      	ldr	r2, [r7, #12]
     cc4:	01db      	lsls	r3, r3, #7
     cc6:	4413      	add	r3, r2
     cc8:	3314      	adds	r3, #20
     cca:	687a      	ldr	r2, [r7, #4]
     ccc:	601a      	str	r2, [r3, #0]
}
     cce:	bf00      	nop
     cd0:	3714      	adds	r7, #20
     cd2:	46bd      	mov	sp, r7
     cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
     cd8:	4770      	bx	lr

00000cda <hri_port_write_PMUX_PMUXE_bf>:
	return tmp;
}

static inline void hri_port_write_PMUX_PMUXE_bf(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                hri_port_pmux_reg_t data)
{
     cda:	b480      	push	{r7}
     cdc:	b085      	sub	sp, #20
     cde:	af00      	add	r7, sp, #0
     ce0:	6078      	str	r0, [r7, #4]
     ce2:	4608      	mov	r0, r1
     ce4:	4611      	mov	r1, r2
     ce6:	461a      	mov	r2, r3
     ce8:	4603      	mov	r3, r0
     cea:	70fb      	strb	r3, [r7, #3]
     cec:	460b      	mov	r3, r1
     cee:	70bb      	strb	r3, [r7, #2]
     cf0:	4613      	mov	r3, r2
     cf2:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     cf4:	78fa      	ldrb	r2, [r7, #3]
     cf6:	78bb      	ldrb	r3, [r7, #2]
     cf8:	6879      	ldr	r1, [r7, #4]
     cfa:	01d2      	lsls	r2, r2, #7
     cfc:	440a      	add	r2, r1
     cfe:	4413      	add	r3, r2
     d00:	3330      	adds	r3, #48	; 0x30
     d02:	781b      	ldrb	r3, [r3, #0]
     d04:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     d06:	7bfb      	ldrb	r3, [r7, #15]
     d08:	f023 030f 	bic.w	r3, r3, #15
     d0c:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXE(data);
     d0e:	787b      	ldrb	r3, [r7, #1]
     d10:	f003 030f 	and.w	r3, r3, #15
     d14:	b2da      	uxtb	r2, r3
     d16:	7bfb      	ldrb	r3, [r7, #15]
     d18:	4313      	orrs	r3, r2
     d1a:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     d1c:	78fa      	ldrb	r2, [r7, #3]
     d1e:	78bb      	ldrb	r3, [r7, #2]
     d20:	6879      	ldr	r1, [r7, #4]
     d22:	01d2      	lsls	r2, r2, #7
     d24:	440a      	add	r2, r1
     d26:	4413      	add	r3, r2
     d28:	3330      	adds	r3, #48	; 0x30
     d2a:	7bfa      	ldrb	r2, [r7, #15]
     d2c:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     d2e:	bf00      	nop
     d30:	3714      	adds	r7, #20
     d32:	46bd      	mov	sp, r7
     d34:	f85d 7b04 	ldr.w	r7, [sp], #4
     d38:	4770      	bx	lr

00000d3a <hri_port_write_PMUX_PMUXO_bf>:
	return tmp;
}

static inline void hri_port_write_PMUX_PMUXO_bf(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                hri_port_pmux_reg_t data)
{
     d3a:	b480      	push	{r7}
     d3c:	b085      	sub	sp, #20
     d3e:	af00      	add	r7, sp, #0
     d40:	6078      	str	r0, [r7, #4]
     d42:	4608      	mov	r0, r1
     d44:	4611      	mov	r1, r2
     d46:	461a      	mov	r2, r3
     d48:	4603      	mov	r3, r0
     d4a:	70fb      	strb	r3, [r7, #3]
     d4c:	460b      	mov	r3, r1
     d4e:	70bb      	strb	r3, [r7, #2]
     d50:	4613      	mov	r3, r2
     d52:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     d54:	78fa      	ldrb	r2, [r7, #3]
     d56:	78bb      	ldrb	r3, [r7, #2]
     d58:	6879      	ldr	r1, [r7, #4]
     d5a:	01d2      	lsls	r2, r2, #7
     d5c:	440a      	add	r2, r1
     d5e:	4413      	add	r3, r2
     d60:	3330      	adds	r3, #48	; 0x30
     d62:	781b      	ldrb	r3, [r3, #0]
     d64:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     d66:	7bfb      	ldrb	r3, [r7, #15]
     d68:	f003 030f 	and.w	r3, r3, #15
     d6c:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXO(data);
     d6e:	787b      	ldrb	r3, [r7, #1]
     d70:	011b      	lsls	r3, r3, #4
     d72:	b2da      	uxtb	r2, r3
     d74:	7bfb      	ldrb	r3, [r7, #15]
     d76:	4313      	orrs	r3, r2
     d78:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     d7a:	78fa      	ldrb	r2, [r7, #3]
     d7c:	78bb      	ldrb	r3, [r7, #2]
     d7e:	6879      	ldr	r1, [r7, #4]
     d80:	01d2      	lsls	r2, r2, #7
     d82:	440a      	add	r2, r1
     d84:	4413      	add	r3, r2
     d86:	3330      	adds	r3, #48	; 0x30
     d88:	7bfa      	ldrb	r2, [r7, #15]
     d8a:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     d8c:	bf00      	nop
     d8e:	3714      	adds	r7, #20
     d90:	46bd      	mov	sp, r7
     d92:	f85d 7b04 	ldr.w	r7, [sp], #4
     d96:	4770      	bx	lr

00000d98 <hri_port_write_PINCFG_PMUXEN_bit>:
	return (bool)tmp;
}

static inline void hri_port_write_PINCFG_PMUXEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                    bool value)
{
     d98:	b480      	push	{r7}
     d9a:	b085      	sub	sp, #20
     d9c:	af00      	add	r7, sp, #0
     d9e:	6078      	str	r0, [r7, #4]
     da0:	4608      	mov	r0, r1
     da2:	4611      	mov	r1, r2
     da4:	461a      	mov	r2, r3
     da6:	4603      	mov	r3, r0
     da8:	70fb      	strb	r3, [r7, #3]
     daa:	460b      	mov	r3, r1
     dac:	70bb      	strb	r3, [r7, #2]
     dae:	4613      	mov	r3, r2
     db0:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     db2:	78fa      	ldrb	r2, [r7, #3]
     db4:	78bb      	ldrb	r3, [r7, #2]
     db6:	6879      	ldr	r1, [r7, #4]
     db8:	01d2      	lsls	r2, r2, #7
     dba:	440a      	add	r2, r1
     dbc:	4413      	add	r3, r2
     dbe:	3340      	adds	r3, #64	; 0x40
     dc0:	781b      	ldrb	r3, [r3, #0]
     dc2:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PINCFG_PMUXEN;
     dc4:	7bfb      	ldrb	r3, [r7, #15]
     dc6:	f023 0301 	bic.w	r3, r3, #1
     dca:	73fb      	strb	r3, [r7, #15]
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     dcc:	787a      	ldrb	r2, [r7, #1]
     dce:	7bfb      	ldrb	r3, [r7, #15]
     dd0:	4313      	orrs	r3, r2
     dd2:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     dd4:	78fa      	ldrb	r2, [r7, #3]
     dd6:	78bb      	ldrb	r3, [r7, #2]
     dd8:	6879      	ldr	r1, [r7, #4]
     dda:	01d2      	lsls	r2, r2, #7
     ddc:	440a      	add	r2, r1
     dde:	4413      	add	r3, r2
     de0:	3340      	adds	r3, #64	; 0x40
     de2:	7bfa      	ldrb	r2, [r7, #15]
     de4:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     de6:	bf00      	nop
     de8:	3714      	adds	r7, #20
     dea:	46bd      	mov	sp, r7
     dec:	f85d 7b04 	ldr.w	r7, [sp], #4
     df0:	4770      	bx	lr

00000df2 <hri_port_set_PINCFG_PULLEN_bit>:
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg ^= PORT_PINCFG_INEN;
	PORT_CRITICAL_SECTION_LEAVE();
}

static inline void hri_port_set_PINCFG_PULLEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index)
{
     df2:	b490      	push	{r4, r7}
     df4:	b082      	sub	sp, #8
     df6:	af00      	add	r7, sp, #0
     df8:	6078      	str	r0, [r7, #4]
     dfa:	460b      	mov	r3, r1
     dfc:	70fb      	strb	r3, [r7, #3]
     dfe:	4613      	mov	r3, r2
     e00:	70bb      	strb	r3, [r7, #2]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
     e02:	78fa      	ldrb	r2, [r7, #3]
     e04:	78bb      	ldrb	r3, [r7, #2]
     e06:	78f8      	ldrb	r0, [r7, #3]
     e08:	78b9      	ldrb	r1, [r7, #2]
     e0a:	687c      	ldr	r4, [r7, #4]
     e0c:	01c0      	lsls	r0, r0, #7
     e0e:	4420      	add	r0, r4
     e10:	4401      	add	r1, r0
     e12:	3140      	adds	r1, #64	; 0x40
     e14:	7809      	ldrb	r1, [r1, #0]
     e16:	b2c9      	uxtb	r1, r1
     e18:	f041 0104 	orr.w	r1, r1, #4
     e1c:	b2c8      	uxtb	r0, r1
     e1e:	6879      	ldr	r1, [r7, #4]
     e20:	01d2      	lsls	r2, r2, #7
     e22:	440a      	add	r2, r1
     e24:	4413      	add	r3, r2
     e26:	3340      	adds	r3, #64	; 0x40
     e28:	4602      	mov	r2, r0
     e2a:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     e2c:	bf00      	nop
     e2e:	3708      	adds	r7, #8
     e30:	46bd      	mov	sp, r7
     e32:	bc90      	pop	{r4, r7}
     e34:	4770      	bx	lr

00000e36 <hri_port_clear_PINCFG_PULLEN_bit>:
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
	PORT_CRITICAL_SECTION_LEAVE();
}

static inline void hri_port_clear_PINCFG_PULLEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index)
{
     e36:	b490      	push	{r4, r7}
     e38:	b082      	sub	sp, #8
     e3a:	af00      	add	r7, sp, #0
     e3c:	6078      	str	r0, [r7, #4]
     e3e:	460b      	mov	r3, r1
     e40:	70fb      	strb	r3, [r7, #3]
     e42:	4613      	mov	r3, r2
     e44:	70bb      	strb	r3, [r7, #2]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     e46:	78fa      	ldrb	r2, [r7, #3]
     e48:	78bb      	ldrb	r3, [r7, #2]
     e4a:	78f8      	ldrb	r0, [r7, #3]
     e4c:	78b9      	ldrb	r1, [r7, #2]
     e4e:	687c      	ldr	r4, [r7, #4]
     e50:	01c0      	lsls	r0, r0, #7
     e52:	4420      	add	r0, r4
     e54:	4401      	add	r1, r0
     e56:	3140      	adds	r1, #64	; 0x40
     e58:	7809      	ldrb	r1, [r1, #0]
     e5a:	b2c9      	uxtb	r1, r1
     e5c:	f021 0104 	bic.w	r1, r1, #4
     e60:	b2c8      	uxtb	r0, r1
     e62:	6879      	ldr	r1, [r7, #4]
     e64:	01d2      	lsls	r2, r2, #7
     e66:	440a      	add	r2, r1
     e68:	4413      	add	r3, r2
     e6a:	3340      	adds	r3, #64	; 0x40
     e6c:	4602      	mov	r2, r0
     e6e:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     e70:	bf00      	nop
     e72:	3708      	adds	r7, #8
     e74:	46bd      	mov	sp, r7
     e76:	bc90      	pop	{r4, r7}
     e78:	4770      	bx	lr

00000e7a <hri_port_write_WRCONFIG_reg>:
	return ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
}

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
     e7a:	b480      	push	{r7}
     e7c:	b085      	sub	sp, #20
     e7e:	af00      	add	r7, sp, #0
     e80:	60f8      	str	r0, [r7, #12]
     e82:	460b      	mov	r3, r1
     e84:	607a      	str	r2, [r7, #4]
     e86:	72fb      	strb	r3, [r7, #11]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     e88:	7afb      	ldrb	r3, [r7, #11]
     e8a:	68fa      	ldr	r2, [r7, #12]
     e8c:	01db      	lsls	r3, r3, #7
     e8e:	4413      	add	r3, r2
     e90:	3328      	adds	r3, #40	; 0x28
     e92:	687a      	ldr	r2, [r7, #4]
     e94:	601a      	str	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     e96:	bf00      	nop
     e98:	3714      	adds	r7, #20
     e9a:	46bd      	mov	sp, r7
     e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
     ea0:	4770      	bx	lr
	...

00000ea4 <_gpio_set_direction>:
/**
 * \brief Set direction on port with mask
 */
static inline void _gpio_set_direction(const enum gpio_port port, const uint32_t mask,
                                       const enum gpio_direction direction)
{
     ea4:	b580      	push	{r7, lr}
     ea6:	b082      	sub	sp, #8
     ea8:	af00      	add	r7, sp, #0
     eaa:	4603      	mov	r3, r0
     eac:	6039      	str	r1, [r7, #0]
     eae:	71fb      	strb	r3, [r7, #7]
     eb0:	4613      	mov	r3, r2
     eb2:	71bb      	strb	r3, [r7, #6]
	switch (direction) {
     eb4:	79bb      	ldrb	r3, [r7, #6]
     eb6:	2b01      	cmp	r3, #1
     eb8:	d01c      	beq.n	ef4 <_gpio_set_direction+0x50>
     eba:	2b02      	cmp	r3, #2
     ebc:	d037      	beq.n	f2e <_gpio_set_direction+0x8a>
     ebe:	2b00      	cmp	r3, #0
     ec0:	d14e      	bne.n	f60 <_gpio_set_direction+0xbc>
	case GPIO_DIRECTION_OFF:
		hri_port_clear_DIR_reg(PORT, port, mask);
     ec2:	79fb      	ldrb	r3, [r7, #7]
     ec4:	683a      	ldr	r2, [r7, #0]
     ec6:	4619      	mov	r1, r3
     ec8:	482a      	ldr	r0, [pc, #168]	; (f74 <_gpio_set_direction+0xd0>)
     eca:	4b2b      	ldr	r3, [pc, #172]	; (f78 <_gpio_set_direction+0xd4>)
     ecc:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
     ece:	683b      	ldr	r3, [r7, #0]
     ed0:	b29b      	uxth	r3, r3
     ed2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
     ed6:	79fb      	ldrb	r3, [r7, #7]
     ed8:	4619      	mov	r1, r3
     eda:	4826      	ldr	r0, [pc, #152]	; (f74 <_gpio_set_direction+0xd0>)
     edc:	4b27      	ldr	r3, [pc, #156]	; (f7c <_gpio_set_direction+0xd8>)
     ede:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
     ee0:	683b      	ldr	r3, [r7, #0]
     ee2:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
     ee4:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
     ee8:	79fb      	ldrb	r3, [r7, #7]
     eea:	4619      	mov	r1, r3
     eec:	4821      	ldr	r0, [pc, #132]	; (f74 <_gpio_set_direction+0xd0>)
     eee:	4b23      	ldr	r3, [pc, #140]	; (f7c <_gpio_set_direction+0xd8>)
     ef0:	4798      	blx	r3
		break;
     ef2:	e03a      	b.n	f6a <_gpio_set_direction+0xc6>

	case GPIO_DIRECTION_IN:
		hri_port_clear_DIR_reg(PORT, port, mask);
     ef4:	79fb      	ldrb	r3, [r7, #7]
     ef6:	683a      	ldr	r2, [r7, #0]
     ef8:	4619      	mov	r1, r3
     efa:	481e      	ldr	r0, [pc, #120]	; (f74 <_gpio_set_direction+0xd0>)
     efc:	4b1e      	ldr	r3, [pc, #120]	; (f78 <_gpio_set_direction+0xd4>)
     efe:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN | (mask & 0xffff));
     f00:	683b      	ldr	r3, [r7, #0]
     f02:	b29b      	uxth	r3, r3
     f04:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
     f08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
     f0c:	79f9      	ldrb	r1, [r7, #7]
     f0e:	461a      	mov	r2, r3
     f10:	4818      	ldr	r0, [pc, #96]	; (f74 <_gpio_set_direction+0xd0>)
     f12:	4b1a      	ldr	r3, [pc, #104]	; (f7c <_gpio_set_direction+0xd8>)
     f14:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT,
		                            port,
		                            PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN
		                                | ((mask & 0xffff0000) >> 16));
     f16:	683b      	ldr	r3, [r7, #0]
     f18:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(PORT,
     f1a:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
     f1e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
     f22:	79f9      	ldrb	r1, [r7, #7]
     f24:	461a      	mov	r2, r3
     f26:	4813      	ldr	r0, [pc, #76]	; (f74 <_gpio_set_direction+0xd0>)
     f28:	4b14      	ldr	r3, [pc, #80]	; (f7c <_gpio_set_direction+0xd8>)
     f2a:	4798      	blx	r3
		break;
     f2c:	e01d      	b.n	f6a <_gpio_set_direction+0xc6>

	case GPIO_DIRECTION_OUT:
		hri_port_set_DIR_reg(PORT, port, mask);
     f2e:	79fb      	ldrb	r3, [r7, #7]
     f30:	683a      	ldr	r2, [r7, #0]
     f32:	4619      	mov	r1, r3
     f34:	480f      	ldr	r0, [pc, #60]	; (f74 <_gpio_set_direction+0xd0>)
     f36:	4b12      	ldr	r3, [pc, #72]	; (f80 <_gpio_set_direction+0xdc>)
     f38:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
     f3a:	683b      	ldr	r3, [r7, #0]
     f3c:	b29b      	uxth	r3, r3
     f3e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
     f42:	79fb      	ldrb	r3, [r7, #7]
     f44:	4619      	mov	r1, r3
     f46:	480b      	ldr	r0, [pc, #44]	; (f74 <_gpio_set_direction+0xd0>)
     f48:	4b0c      	ldr	r3, [pc, #48]	; (f7c <_gpio_set_direction+0xd8>)
     f4a:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
     f4c:	683b      	ldr	r3, [r7, #0]
     f4e:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
     f50:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
     f54:	79fb      	ldrb	r3, [r7, #7]
     f56:	4619      	mov	r1, r3
     f58:	4806      	ldr	r0, [pc, #24]	; (f74 <_gpio_set_direction+0xd0>)
     f5a:	4b08      	ldr	r3, [pc, #32]	; (f7c <_gpio_set_direction+0xd8>)
     f5c:	4798      	blx	r3
		break;
     f5e:	e004      	b.n	f6a <_gpio_set_direction+0xc6>

	default:
		ASSERT(false);
     f60:	2246      	movs	r2, #70	; 0x46
     f62:	4908      	ldr	r1, [pc, #32]	; (f84 <_gpio_set_direction+0xe0>)
     f64:	2000      	movs	r0, #0
     f66:	4b08      	ldr	r3, [pc, #32]	; (f88 <_gpio_set_direction+0xe4>)
     f68:	4798      	blx	r3
	}
}
     f6a:	bf00      	nop
     f6c:	3708      	adds	r7, #8
     f6e:	46bd      	mov	sp, r7
     f70:	bd80      	pop	{r7, pc}
     f72:	bf00      	nop
     f74:	41008000 	.word	0x41008000
     f78:	00000c63 	.word	0x00000c63
     f7c:	00000e7b 	.word	0x00000e7b
     f80:	00000c3b 	.word	0x00000c3b
     f84:	0000cb58 	.word	0x0000cb58
     f88:	00003481 	.word	0x00003481

00000f8c <_gpio_set_level>:

/**
 * \brief Set output level on port with mask
 */
static inline void _gpio_set_level(const enum gpio_port port, const uint32_t mask, const bool level)
{
     f8c:	b580      	push	{r7, lr}
     f8e:	b082      	sub	sp, #8
     f90:	af00      	add	r7, sp, #0
     f92:	4603      	mov	r3, r0
     f94:	6039      	str	r1, [r7, #0]
     f96:	71fb      	strb	r3, [r7, #7]
     f98:	4613      	mov	r3, r2
     f9a:	71bb      	strb	r3, [r7, #6]
	if (level) {
     f9c:	79bb      	ldrb	r3, [r7, #6]
     f9e:	2b00      	cmp	r3, #0
     fa0:	d006      	beq.n	fb0 <_gpio_set_level+0x24>
		hri_port_set_OUT_reg(PORT, port, mask);
     fa2:	79fb      	ldrb	r3, [r7, #7]
     fa4:	683a      	ldr	r2, [r7, #0]
     fa6:	4619      	mov	r1, r3
     fa8:	4806      	ldr	r0, [pc, #24]	; (fc4 <_gpio_set_level+0x38>)
     faa:	4b07      	ldr	r3, [pc, #28]	; (fc8 <_gpio_set_level+0x3c>)
     fac:	4798      	blx	r3
	} else {
		hri_port_clear_OUT_reg(PORT, port, mask);
	}
}
     fae:	e005      	b.n	fbc <_gpio_set_level+0x30>
		hri_port_clear_OUT_reg(PORT, port, mask);
     fb0:	79fb      	ldrb	r3, [r7, #7]
     fb2:	683a      	ldr	r2, [r7, #0]
     fb4:	4619      	mov	r1, r3
     fb6:	4803      	ldr	r0, [pc, #12]	; (fc4 <_gpio_set_level+0x38>)
     fb8:	4b04      	ldr	r3, [pc, #16]	; (fcc <_gpio_set_level+0x40>)
     fba:	4798      	blx	r3
}
     fbc:	bf00      	nop
     fbe:	3708      	adds	r7, #8
     fc0:	46bd      	mov	sp, r7
     fc2:	bd80      	pop	{r7, pc}
     fc4:	41008000 	.word	0x41008000
     fc8:	00000c8b 	.word	0x00000c8b
     fcc:	00000cb3 	.word	0x00000cb3

00000fd0 <_gpio_set_pin_pull_mode>:
/**
 * \brief Set pin pull mode
 */
static inline void _gpio_set_pin_pull_mode(const enum gpio_port port, const uint8_t pin,
                                           const enum gpio_pull_mode pull_mode)
{
     fd0:	b580      	push	{r7, lr}
     fd2:	b082      	sub	sp, #8
     fd4:	af00      	add	r7, sp, #0
     fd6:	4603      	mov	r3, r0
     fd8:	71fb      	strb	r3, [r7, #7]
     fda:	460b      	mov	r3, r1
     fdc:	71bb      	strb	r3, [r7, #6]
     fde:	4613      	mov	r3, r2
     fe0:	717b      	strb	r3, [r7, #5]
	switch (pull_mode) {
     fe2:	797b      	ldrb	r3, [r7, #5]
     fe4:	2b01      	cmp	r3, #1
     fe6:	d00a      	beq.n	ffe <_gpio_set_pin_pull_mode+0x2e>
     fe8:	2b02      	cmp	r3, #2
     fea:	d01f      	beq.n	102c <_gpio_set_pin_pull_mode+0x5c>
     fec:	2b00      	cmp	r3, #0
     fee:	d134      	bne.n	105a <_gpio_set_pin_pull_mode+0x8a>
	case GPIO_PULL_OFF:
		hri_port_clear_PINCFG_PULLEN_bit(PORT, port, pin);
     ff0:	79ba      	ldrb	r2, [r7, #6]
     ff2:	79fb      	ldrb	r3, [r7, #7]
     ff4:	4619      	mov	r1, r3
     ff6:	481e      	ldr	r0, [pc, #120]	; (1070 <_gpio_set_pin_pull_mode+0xa0>)
     ff8:	4b1e      	ldr	r3, [pc, #120]	; (1074 <_gpio_set_pin_pull_mode+0xa4>)
     ffa:	4798      	blx	r3
		break;
     ffc:	e033      	b.n	1066 <_gpio_set_pin_pull_mode+0x96>

	case GPIO_PULL_UP:
		hri_port_clear_DIR_reg(PORT, port, 1U << pin);
     ffe:	79bb      	ldrb	r3, [r7, #6]
    1000:	2201      	movs	r2, #1
    1002:	409a      	lsls	r2, r3
    1004:	79fb      	ldrb	r3, [r7, #7]
    1006:	4619      	mov	r1, r3
    1008:	4819      	ldr	r0, [pc, #100]	; (1070 <_gpio_set_pin_pull_mode+0xa0>)
    100a:	4b1b      	ldr	r3, [pc, #108]	; (1078 <_gpio_set_pin_pull_mode+0xa8>)
    100c:	4798      	blx	r3
		hri_port_set_PINCFG_PULLEN_bit(PORT, port, pin);
    100e:	79ba      	ldrb	r2, [r7, #6]
    1010:	79fb      	ldrb	r3, [r7, #7]
    1012:	4619      	mov	r1, r3
    1014:	4816      	ldr	r0, [pc, #88]	; (1070 <_gpio_set_pin_pull_mode+0xa0>)
    1016:	4b19      	ldr	r3, [pc, #100]	; (107c <_gpio_set_pin_pull_mode+0xac>)
    1018:	4798      	blx	r3
		hri_port_set_OUT_reg(PORT, port, 1U << pin);
    101a:	79bb      	ldrb	r3, [r7, #6]
    101c:	2201      	movs	r2, #1
    101e:	409a      	lsls	r2, r3
    1020:	79fb      	ldrb	r3, [r7, #7]
    1022:	4619      	mov	r1, r3
    1024:	4812      	ldr	r0, [pc, #72]	; (1070 <_gpio_set_pin_pull_mode+0xa0>)
    1026:	4b16      	ldr	r3, [pc, #88]	; (1080 <_gpio_set_pin_pull_mode+0xb0>)
    1028:	4798      	blx	r3
		break;
    102a:	e01c      	b.n	1066 <_gpio_set_pin_pull_mode+0x96>

	case GPIO_PULL_DOWN:
		hri_port_clear_DIR_reg(PORT, port, 1U << pin);
    102c:	79bb      	ldrb	r3, [r7, #6]
    102e:	2201      	movs	r2, #1
    1030:	409a      	lsls	r2, r3
    1032:	79fb      	ldrb	r3, [r7, #7]
    1034:	4619      	mov	r1, r3
    1036:	480e      	ldr	r0, [pc, #56]	; (1070 <_gpio_set_pin_pull_mode+0xa0>)
    1038:	4b0f      	ldr	r3, [pc, #60]	; (1078 <_gpio_set_pin_pull_mode+0xa8>)
    103a:	4798      	blx	r3
		hri_port_set_PINCFG_PULLEN_bit(PORT, port, pin);
    103c:	79ba      	ldrb	r2, [r7, #6]
    103e:	79fb      	ldrb	r3, [r7, #7]
    1040:	4619      	mov	r1, r3
    1042:	480b      	ldr	r0, [pc, #44]	; (1070 <_gpio_set_pin_pull_mode+0xa0>)
    1044:	4b0d      	ldr	r3, [pc, #52]	; (107c <_gpio_set_pin_pull_mode+0xac>)
    1046:	4798      	blx	r3
		hri_port_clear_OUT_reg(PORT, port, 1U << pin);
    1048:	79bb      	ldrb	r3, [r7, #6]
    104a:	2201      	movs	r2, #1
    104c:	409a      	lsls	r2, r3
    104e:	79fb      	ldrb	r3, [r7, #7]
    1050:	4619      	mov	r1, r3
    1052:	4807      	ldr	r0, [pc, #28]	; (1070 <_gpio_set_pin_pull_mode+0xa0>)
    1054:	4b0b      	ldr	r3, [pc, #44]	; (1084 <_gpio_set_pin_pull_mode+0xb4>)
    1056:	4798      	blx	r3
		break;
    1058:	e005      	b.n	1066 <_gpio_set_pin_pull_mode+0x96>

	default:
		ASSERT(false);
    105a:	2289      	movs	r2, #137	; 0x89
    105c:	490a      	ldr	r1, [pc, #40]	; (1088 <_gpio_set_pin_pull_mode+0xb8>)
    105e:	2000      	movs	r0, #0
    1060:	4b0a      	ldr	r3, [pc, #40]	; (108c <_gpio_set_pin_pull_mode+0xbc>)
    1062:	4798      	blx	r3
		break;
    1064:	bf00      	nop
	}
}
    1066:	bf00      	nop
    1068:	3708      	adds	r7, #8
    106a:	46bd      	mov	sp, r7
    106c:	bd80      	pop	{r7, pc}
    106e:	bf00      	nop
    1070:	41008000 	.word	0x41008000
    1074:	00000e37 	.word	0x00000e37
    1078:	00000c63 	.word	0x00000c63
    107c:	00000df3 	.word	0x00000df3
    1080:	00000c8b 	.word	0x00000c8b
    1084:	00000cb3 	.word	0x00000cb3
    1088:	0000cb58 	.word	0x0000cb58
    108c:	00003481 	.word	0x00003481

00001090 <_gpio_set_pin_function>:

/**
 * \brief Set gpio pin function
 */
static inline void _gpio_set_pin_function(const uint32_t gpio, const uint32_t function)
{
    1090:	b590      	push	{r4, r7, lr}
    1092:	b085      	sub	sp, #20
    1094:	af00      	add	r7, sp, #0
    1096:	6078      	str	r0, [r7, #4]
    1098:	6039      	str	r1, [r7, #0]
	uint8_t port = GPIO_PORT(gpio);
    109a:	687b      	ldr	r3, [r7, #4]
    109c:	095b      	lsrs	r3, r3, #5
    109e:	73fb      	strb	r3, [r7, #15]
	uint8_t pin  = GPIO_PIN(gpio);
    10a0:	687b      	ldr	r3, [r7, #4]
    10a2:	b2db      	uxtb	r3, r3
    10a4:	f003 031f 	and.w	r3, r3, #31
    10a8:	73bb      	strb	r3, [r7, #14]

	if (function == GPIO_PIN_FUNCTION_OFF) {
    10aa:	683b      	ldr	r3, [r7, #0]
    10ac:	f1b3 3fff 	cmp.w	r3, #4294967295
    10b0:	d106      	bne.n	10c0 <_gpio_set_pin_function+0x30>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, false);
    10b2:	7bba      	ldrb	r2, [r7, #14]
    10b4:	7bf9      	ldrb	r1, [r7, #15]
    10b6:	2300      	movs	r3, #0
    10b8:	4812      	ldr	r0, [pc, #72]	; (1104 <_gpio_set_pin_function+0x74>)
    10ba:	4c13      	ldr	r4, [pc, #76]	; (1108 <_gpio_set_pin_function+0x78>)
    10bc:	47a0      	blx	r4
		} else {
			// Even numbered pin
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
		}
	}
}
    10be:	e01d      	b.n	10fc <_gpio_set_pin_function+0x6c>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, true);
    10c0:	7bba      	ldrb	r2, [r7, #14]
    10c2:	7bf9      	ldrb	r1, [r7, #15]
    10c4:	2301      	movs	r3, #1
    10c6:	480f      	ldr	r0, [pc, #60]	; (1104 <_gpio_set_pin_function+0x74>)
    10c8:	4c0f      	ldr	r4, [pc, #60]	; (1108 <_gpio_set_pin_function+0x78>)
    10ca:	47a0      	blx	r4
		if (pin & 1) {
    10cc:	7bbb      	ldrb	r3, [r7, #14]
    10ce:	f003 0301 	and.w	r3, r3, #1
    10d2:	2b00      	cmp	r3, #0
    10d4:	d009      	beq.n	10ea <_gpio_set_pin_function+0x5a>
			hri_port_write_PMUX_PMUXO_bf(PORT, port, pin >> 1, function & 0xffff);
    10d6:	7bbb      	ldrb	r3, [r7, #14]
    10d8:	085b      	lsrs	r3, r3, #1
    10da:	b2da      	uxtb	r2, r3
    10dc:	683b      	ldr	r3, [r7, #0]
    10de:	b2db      	uxtb	r3, r3
    10e0:	7bf9      	ldrb	r1, [r7, #15]
    10e2:	4808      	ldr	r0, [pc, #32]	; (1104 <_gpio_set_pin_function+0x74>)
    10e4:	4c09      	ldr	r4, [pc, #36]	; (110c <_gpio_set_pin_function+0x7c>)
    10e6:	47a0      	blx	r4
}
    10e8:	e008      	b.n	10fc <_gpio_set_pin_function+0x6c>
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
    10ea:	7bbb      	ldrb	r3, [r7, #14]
    10ec:	085b      	lsrs	r3, r3, #1
    10ee:	b2da      	uxtb	r2, r3
    10f0:	683b      	ldr	r3, [r7, #0]
    10f2:	b2db      	uxtb	r3, r3
    10f4:	7bf9      	ldrb	r1, [r7, #15]
    10f6:	4803      	ldr	r0, [pc, #12]	; (1104 <_gpio_set_pin_function+0x74>)
    10f8:	4c05      	ldr	r4, [pc, #20]	; (1110 <_gpio_set_pin_function+0x80>)
    10fa:	47a0      	blx	r4
}
    10fc:	bf00      	nop
    10fe:	3714      	adds	r7, #20
    1100:	46bd      	mov	sp, r7
    1102:	bd90      	pop	{r4, r7, pc}
    1104:	41008000 	.word	0x41008000
    1108:	00000d99 	.word	0x00000d99
    110c:	00000d3b 	.word	0x00000d3b
    1110:	00000cdb 	.word	0x00000cdb

00001114 <gpio_set_pin_pull_mode>:
 * \param[in] pull_mode GPIO_PULL_DOWN = Pull pin low with internal resistor
 *                      GPIO_PULL_UP   = Pull pin high with internal resistor
 *                      GPIO_PULL_OFF  = Disable pin pull mode
 */
static inline void gpio_set_pin_pull_mode(const uint8_t pin, const enum gpio_pull_mode pull_mode)
{
    1114:	b580      	push	{r7, lr}
    1116:	b082      	sub	sp, #8
    1118:	af00      	add	r7, sp, #0
    111a:	4603      	mov	r3, r0
    111c:	460a      	mov	r2, r1
    111e:	71fb      	strb	r3, [r7, #7]
    1120:	4613      	mov	r3, r2
    1122:	71bb      	strb	r3, [r7, #6]
	_gpio_set_pin_pull_mode((enum gpio_port)GPIO_PORT(pin), pin & 0x1F, pull_mode);
    1124:	79fb      	ldrb	r3, [r7, #7]
    1126:	095b      	lsrs	r3, r3, #5
    1128:	b2d8      	uxtb	r0, r3
    112a:	79fb      	ldrb	r3, [r7, #7]
    112c:	f003 031f 	and.w	r3, r3, #31
    1130:	b2db      	uxtb	r3, r3
    1132:	79ba      	ldrb	r2, [r7, #6]
    1134:	4619      	mov	r1, r3
    1136:	4b03      	ldr	r3, [pc, #12]	; (1144 <gpio_set_pin_pull_mode+0x30>)
    1138:	4798      	blx	r3
}
    113a:	bf00      	nop
    113c:	3708      	adds	r7, #8
    113e:	46bd      	mov	sp, r7
    1140:	bd80      	pop	{r7, pc}
    1142:	bf00      	nop
    1144:	00000fd1 	.word	0x00000fd1

00001148 <gpio_set_pin_function>:
 * \param[in] function  The pin function is given by a 32-bit wide bitfield
 *                      found in the header files for the device
 *
 */
static inline void gpio_set_pin_function(const uint32_t pin, uint32_t function)
{
    1148:	b580      	push	{r7, lr}
    114a:	b082      	sub	sp, #8
    114c:	af00      	add	r7, sp, #0
    114e:	6078      	str	r0, [r7, #4]
    1150:	6039      	str	r1, [r7, #0]
	_gpio_set_pin_function(pin, function);
    1152:	6839      	ldr	r1, [r7, #0]
    1154:	6878      	ldr	r0, [r7, #4]
    1156:	4b03      	ldr	r3, [pc, #12]	; (1164 <gpio_set_pin_function+0x1c>)
    1158:	4798      	blx	r3
}
    115a:	bf00      	nop
    115c:	3708      	adds	r7, #8
    115e:	46bd      	mov	sp, r7
    1160:	bd80      	pop	{r7, pc}
    1162:	bf00      	nop
    1164:	00001091 	.word	0x00001091

00001168 <gpio_set_pin_direction>:
 *                      GPIO_DIRECTION_OUT = Data direction out
 *                      GPIO_DIRECTION_OFF = Disables the pin
 *                      (low power state)
 */
static inline void gpio_set_pin_direction(const uint8_t pin, const enum gpio_direction direction)
{
    1168:	b580      	push	{r7, lr}
    116a:	b082      	sub	sp, #8
    116c:	af00      	add	r7, sp, #0
    116e:	4603      	mov	r3, r0
    1170:	460a      	mov	r2, r1
    1172:	71fb      	strb	r3, [r7, #7]
    1174:	4613      	mov	r3, r2
    1176:	71bb      	strb	r3, [r7, #6]
	_gpio_set_direction((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), direction);
    1178:	79fb      	ldrb	r3, [r7, #7]
    117a:	095b      	lsrs	r3, r3, #5
    117c:	b2d8      	uxtb	r0, r3
    117e:	79fb      	ldrb	r3, [r7, #7]
    1180:	f003 031f 	and.w	r3, r3, #31
    1184:	2201      	movs	r2, #1
    1186:	fa02 f303 	lsl.w	r3, r2, r3
    118a:	79ba      	ldrb	r2, [r7, #6]
    118c:	4619      	mov	r1, r3
    118e:	4b03      	ldr	r3, [pc, #12]	; (119c <gpio_set_pin_direction+0x34>)
    1190:	4798      	blx	r3
}
    1192:	bf00      	nop
    1194:	3708      	adds	r7, #8
    1196:	46bd      	mov	sp, r7
    1198:	bd80      	pop	{r7, pc}
    119a:	bf00      	nop
    119c:	00000ea5 	.word	0x00000ea5

000011a0 <gpio_set_pin_level>:
 * \param[in] pin       The pin number for device
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void gpio_set_pin_level(const uint8_t pin, const bool level)
{
    11a0:	b580      	push	{r7, lr}
    11a2:	b082      	sub	sp, #8
    11a4:	af00      	add	r7, sp, #0
    11a6:	4603      	mov	r3, r0
    11a8:	460a      	mov	r2, r1
    11aa:	71fb      	strb	r3, [r7, #7]
    11ac:	4613      	mov	r3, r2
    11ae:	71bb      	strb	r3, [r7, #6]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
    11b0:	79fb      	ldrb	r3, [r7, #7]
    11b2:	095b      	lsrs	r3, r3, #5
    11b4:	b2d8      	uxtb	r0, r3
    11b6:	79fb      	ldrb	r3, [r7, #7]
    11b8:	f003 031f 	and.w	r3, r3, #31
    11bc:	2201      	movs	r2, #1
    11be:	fa02 f303 	lsl.w	r3, r2, r3
    11c2:	79ba      	ldrb	r2, [r7, #6]
    11c4:	4619      	mov	r1, r3
    11c6:	4b03      	ldr	r3, [pc, #12]	; (11d4 <gpio_set_pin_level+0x34>)
    11c8:	4798      	blx	r3
}
    11ca:	bf00      	nop
    11cc:	3708      	adds	r7, #8
    11ce:	46bd      	mov	sp, r7
    11d0:	bd80      	pop	{r7, pc}
    11d2:	bf00      	nop
    11d4:	00000f8d 	.word	0x00000f8d

000011d8 <init_mcu>:
 * This function calls the various initialization functions.
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
    11d8:	b580      	push	{r7, lr}
    11da:	af00      	add	r7, sp, #0
	_init_chip();
    11dc:	4b01      	ldr	r3, [pc, #4]	; (11e4 <init_mcu+0xc>)
    11de:	4798      	blx	r3
}
    11e0:	bf00      	nop
    11e2:	bd80      	pop	{r7, pc}
    11e4:	00003fc9 	.word	0x00003fc9

000011e8 <wdt_init>:
 * \return Operation status of init
 * \retval 0 Completed sucessfully.
 * \retval -1 Always on or enabled, don't need init again.
 */
static inline int32_t wdt_init(struct wdt_descriptor *const wdt, const void *hw)
{
    11e8:	b580      	push	{r7, lr}
    11ea:	b082      	sub	sp, #8
    11ec:	af00      	add	r7, sp, #0
    11ee:	6078      	str	r0, [r7, #4]
    11f0:	6039      	str	r1, [r7, #0]
	ASSERT(wdt && hw);
    11f2:	687b      	ldr	r3, [r7, #4]
    11f4:	2b00      	cmp	r3, #0
    11f6:	d004      	beq.n	1202 <wdt_init+0x1a>
    11f8:	683b      	ldr	r3, [r7, #0]
    11fa:	2b00      	cmp	r3, #0
    11fc:	d001      	beq.n	1202 <wdt_init+0x1a>
    11fe:	2301      	movs	r3, #1
    1200:	e000      	b.n	1204 <wdt_init+0x1c>
    1202:	2300      	movs	r3, #0
    1204:	f003 0301 	and.w	r3, r3, #1
    1208:	b2db      	uxtb	r3, r3
    120a:	2248      	movs	r2, #72	; 0x48
    120c:	4907      	ldr	r1, [pc, #28]	; (122c <wdt_init+0x44>)
    120e:	4618      	mov	r0, r3
    1210:	4b07      	ldr	r3, [pc, #28]	; (1230 <wdt_init+0x48>)
    1212:	4798      	blx	r3

	wdt->dev.hw = (void *)hw;
    1214:	687b      	ldr	r3, [r7, #4]
    1216:	683a      	ldr	r2, [r7, #0]
    1218:	601a      	str	r2, [r3, #0]

	return _wdt_init(&wdt->dev);
    121a:	687b      	ldr	r3, [r7, #4]
    121c:	4618      	mov	r0, r3
    121e:	4b05      	ldr	r3, [pc, #20]	; (1234 <wdt_init+0x4c>)
    1220:	4798      	blx	r3
    1222:	4603      	mov	r3, r0
}
    1224:	4618      	mov	r0, r3
    1226:	3708      	adds	r7, #8
    1228:	46bd      	mov	sp, r7
    122a:	bd80      	pop	{r7, pc}
    122c:	0000cb74 	.word	0x0000cb74
    1230:	00003481 	.word	0x00003481
    1234:	0000a3c1 	.word	0x0000a3c1

00001238 <CRC_CALC_init>:
 * \brief CRC initialization function
 *
 * Enables CRC peripheral, clocks and initializes CRC driver
 */
void CRC_CALC_init(void)
{
    1238:	b580      	push	{r7, lr}
    123a:	af00      	add	r7, sp, #0
	hri_mclk_set_APBBMASK_DSU_bit(MCLK);
    123c:	4804      	ldr	r0, [pc, #16]	; (1250 <CRC_CALC_init+0x18>)
    123e:	4b05      	ldr	r3, [pc, #20]	; (1254 <CRC_CALC_init+0x1c>)
    1240:	4798      	blx	r3
	crc_sync_init(&CRC_CALC, DSU);
    1242:	4905      	ldr	r1, [pc, #20]	; (1258 <CRC_CALC_init+0x20>)
    1244:	4805      	ldr	r0, [pc, #20]	; (125c <CRC_CALC_init+0x24>)
    1246:	4b06      	ldr	r3, [pc, #24]	; (1260 <CRC_CALC_init+0x28>)
    1248:	4798      	blx	r3
}
    124a:	bf00      	nop
    124c:	bd80      	pop	{r7, pc}
    124e:	bf00      	nop
    1250:	40000800 	.word	0x40000800
    1254:	00000b3b 	.word	0x00000b3b
    1258:	41002000 	.word	0x41002000
    125c:	20000db0 	.word	0x20000db0
    1260:	00001d95 	.word	0x00001d95

00001264 <EXTERNAL_IRQ_0_init>:

void EXTERNAL_IRQ_0_init(void)
{
    1264:	b580      	push	{r7, lr}
    1266:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, EIC_GCLK_ID, CONF_GCLK_EIC_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1268:	2244      	movs	r2, #68	; 0x44
    126a:	2104      	movs	r1, #4
    126c:	481e      	ldr	r0, [pc, #120]	; (12e8 <EXTERNAL_IRQ_0_init+0x84>)
    126e:	4b1f      	ldr	r3, [pc, #124]	; (12ec <EXTERNAL_IRQ_0_init+0x88>)
    1270:	4798      	blx	r3
	hri_mclk_set_APBAMASK_EIC_bit(MCLK);
    1272:	481f      	ldr	r0, [pc, #124]	; (12f0 <EXTERNAL_IRQ_0_init+0x8c>)
    1274:	4b1f      	ldr	r3, [pc, #124]	; (12f4 <EXTERNAL_IRQ_0_init+0x90>)
    1276:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PA04, GPIO_DIRECTION_IN);
    1278:	2101      	movs	r1, #1
    127a:	2004      	movs	r0, #4
    127c:	4b1e      	ldr	r3, [pc, #120]	; (12f8 <EXTERNAL_IRQ_0_init+0x94>)
    127e:	4798      	blx	r3

	gpio_set_pin_pull_mode(PA04,
    1280:	2102      	movs	r1, #2
    1282:	2004      	movs	r0, #4
    1284:	4b1d      	ldr	r3, [pc, #116]	; (12fc <EXTERNAL_IRQ_0_init+0x98>)
    1286:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(PA04, PINMUX_PA04A_EIC_EXTINT4);
    1288:	f44f 2180 	mov.w	r1, #262144	; 0x40000
    128c:	2004      	movs	r0, #4
    128e:	4b1c      	ldr	r3, [pc, #112]	; (1300 <EXTERNAL_IRQ_0_init+0x9c>)
    1290:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PA05, GPIO_DIRECTION_IN);
    1292:	2101      	movs	r1, #1
    1294:	2005      	movs	r0, #5
    1296:	4b18      	ldr	r3, [pc, #96]	; (12f8 <EXTERNAL_IRQ_0_init+0x94>)
    1298:	4798      	blx	r3

	gpio_set_pin_pull_mode(PA05,
    129a:	2102      	movs	r1, #2
    129c:	2005      	movs	r0, #5
    129e:	4b17      	ldr	r3, [pc, #92]	; (12fc <EXTERNAL_IRQ_0_init+0x98>)
    12a0:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(PA05, PINMUX_PA05A_EIC_EXTINT5);
    12a2:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
    12a6:	2005      	movs	r0, #5
    12a8:	4b15      	ldr	r3, [pc, #84]	; (1300 <EXTERNAL_IRQ_0_init+0x9c>)
    12aa:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(R2Int, GPIO_DIRECTION_IN);
    12ac:	2101      	movs	r1, #1
    12ae:	2056      	movs	r0, #86	; 0x56
    12b0:	4b11      	ldr	r3, [pc, #68]	; (12f8 <EXTERNAL_IRQ_0_init+0x94>)
    12b2:	4798      	blx	r3

	gpio_set_pin_pull_mode(R2Int,
    12b4:	2102      	movs	r1, #2
    12b6:	2056      	movs	r0, #86	; 0x56
    12b8:	4b10      	ldr	r3, [pc, #64]	; (12fc <EXTERNAL_IRQ_0_init+0x98>)
    12ba:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(R2Int, PINMUX_PC22A_EIC_EXTINT6);
    12bc:	f44f 01ac 	mov.w	r1, #5636096	; 0x560000
    12c0:	2056      	movs	r0, #86	; 0x56
    12c2:	4b0f      	ldr	r3, [pc, #60]	; (1300 <EXTERNAL_IRQ_0_init+0x9c>)
    12c4:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(R1Int, GPIO_DIRECTION_IN);
    12c6:	2101      	movs	r1, #1
    12c8:	2057      	movs	r0, #87	; 0x57
    12ca:	4b0b      	ldr	r3, [pc, #44]	; (12f8 <EXTERNAL_IRQ_0_init+0x94>)
    12cc:	4798      	blx	r3

	gpio_set_pin_pull_mode(R1Int,
    12ce:	2102      	movs	r1, #2
    12d0:	2057      	movs	r0, #87	; 0x57
    12d2:	4b0a      	ldr	r3, [pc, #40]	; (12fc <EXTERNAL_IRQ_0_init+0x98>)
    12d4:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(R1Int, PINMUX_PC23A_EIC_EXTINT7);
    12d6:	f44f 01ae 	mov.w	r1, #5701632	; 0x570000
    12da:	2057      	movs	r0, #87	; 0x57
    12dc:	4b08      	ldr	r3, [pc, #32]	; (1300 <EXTERNAL_IRQ_0_init+0x9c>)
    12de:	4798      	blx	r3

	ext_irq_init();
    12e0:	4b08      	ldr	r3, [pc, #32]	; (1304 <EXTERNAL_IRQ_0_init+0xa0>)
    12e2:	4798      	blx	r3
}
    12e4:	bf00      	nop
    12e6:	bd80      	pop	{r7, pc}
    12e8:	40001c00 	.word	0x40001c00
    12ec:	00000995 	.word	0x00000995
    12f0:	40000800 	.word	0x40000800
    12f4:	00000a7b 	.word	0x00000a7b
    12f8:	00001169 	.word	0x00001169
    12fc:	00001115 	.word	0x00001115
    1300:	00001149 	.word	0x00001149
    1304:	00001e5d 	.word	0x00001e5d

00001308 <EVENT_SYSTEM_0_init>:

void EVENT_SYSTEM_0_init(void)
{
    1308:	b580      	push	{r7, lr}
    130a:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, EVSYS_GCLK_ID_0, CONF_GCLK_EVSYS_CHANNEL_0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    130c:	2244      	movs	r2, #68	; 0x44
    130e:	210b      	movs	r1, #11
    1310:	4804      	ldr	r0, [pc, #16]	; (1324 <EVENT_SYSTEM_0_init+0x1c>)
    1312:	4b05      	ldr	r3, [pc, #20]	; (1328 <EVENT_SYSTEM_0_init+0x20>)
    1314:	4798      	blx	r3

	hri_mclk_set_APBBMASK_EVSYS_bit(MCLK);
    1316:	4805      	ldr	r0, [pc, #20]	; (132c <EVENT_SYSTEM_0_init+0x24>)
    1318:	4b05      	ldr	r3, [pc, #20]	; (1330 <EVENT_SYSTEM_0_init+0x28>)
    131a:	4798      	blx	r3

	event_system_init();
    131c:	4b05      	ldr	r3, [pc, #20]	; (1334 <EVENT_SYSTEM_0_init+0x2c>)
    131e:	4798      	blx	r3
}
    1320:	bf00      	nop
    1322:	bd80      	pop	{r7, pc}
    1324:	40001c00 	.word	0x40001c00
    1328:	00000995 	.word	0x00000995
    132c:	40000800 	.word	0x40000800
    1330:	00000b5b 	.word	0x00000b5b
    1334:	00001e49 	.word	0x00001e49

00001338 <QSPI_N25Q256_PORT_init>:

void QSPI_N25Q256_PORT_init(void)
{
    1338:	b580      	push	{r7, lr}
    133a:	af00      	add	r7, sp, #0

	// Set pin direction to input
	gpio_set_pin_direction(FLASH_CS, GPIO_DIRECTION_IN);
    133c:	2101      	movs	r1, #1
    133e:	202b      	movs	r0, #43	; 0x2b
    1340:	4b2b      	ldr	r3, [pc, #172]	; (13f0 <QSPI_N25Q256_PORT_init+0xb8>)
    1342:	4798      	blx	r3

	gpio_set_pin_pull_mode(FLASH_CS,
    1344:	2100      	movs	r1, #0
    1346:	202b      	movs	r0, #43	; 0x2b
    1348:	4b2a      	ldr	r3, [pc, #168]	; (13f4 <QSPI_N25Q256_PORT_init+0xbc>)
    134a:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_CS, PINMUX_PB11H_QSPI_CS);
    134c:	492a      	ldr	r1, [pc, #168]	; (13f8 <QSPI_N25Q256_PORT_init+0xc0>)
    134e:	202b      	movs	r0, #43	; 0x2b
    1350:	4b2a      	ldr	r3, [pc, #168]	; (13fc <QSPI_N25Q256_PORT_init+0xc4>)
    1352:	4798      	blx	r3

	gpio_set_pin_direction(FLASH_IO0,
    1354:	2102      	movs	r1, #2
    1356:	2008      	movs	r0, #8
    1358:	4b25      	ldr	r3, [pc, #148]	; (13f0 <QSPI_N25Q256_PORT_init+0xb8>)
    135a:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(FLASH_IO0,
    135c:	2100      	movs	r1, #0
    135e:	2008      	movs	r0, #8
    1360:	4b27      	ldr	r3, [pc, #156]	; (1400 <QSPI_N25Q256_PORT_init+0xc8>)
    1362:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(FLASH_IO0,
    1364:	2100      	movs	r1, #0
    1366:	2008      	movs	r0, #8
    1368:	4b22      	ldr	r3, [pc, #136]	; (13f4 <QSPI_N25Q256_PORT_init+0xbc>)
    136a:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_IO0,
    136c:	4925      	ldr	r1, [pc, #148]	; (1404 <QSPI_N25Q256_PORT_init+0xcc>)
    136e:	2008      	movs	r0, #8
    1370:	4b22      	ldr	r3, [pc, #136]	; (13fc <QSPI_N25Q256_PORT_init+0xc4>)
    1372:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA08H_QSPI_DATA0);

	gpio_set_pin_direction(FLASH_IO1,
    1374:	2102      	movs	r1, #2
    1376:	2009      	movs	r0, #9
    1378:	4b1d      	ldr	r3, [pc, #116]	; (13f0 <QSPI_N25Q256_PORT_init+0xb8>)
    137a:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(FLASH_IO1,
    137c:	2100      	movs	r1, #0
    137e:	2009      	movs	r0, #9
    1380:	4b1f      	ldr	r3, [pc, #124]	; (1400 <QSPI_N25Q256_PORT_init+0xc8>)
    1382:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(FLASH_IO1,
    1384:	2100      	movs	r1, #0
    1386:	2009      	movs	r0, #9
    1388:	4b1a      	ldr	r3, [pc, #104]	; (13f4 <QSPI_N25Q256_PORT_init+0xbc>)
    138a:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_IO1,
    138c:	491e      	ldr	r1, [pc, #120]	; (1408 <QSPI_N25Q256_PORT_init+0xd0>)
    138e:	2009      	movs	r0, #9
    1390:	4b1a      	ldr	r3, [pc, #104]	; (13fc <QSPI_N25Q256_PORT_init+0xc4>)
    1392:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA09H_QSPI_DATA1);

	gpio_set_pin_direction(FLASH_IO2,
    1394:	2102      	movs	r1, #2
    1396:	200a      	movs	r0, #10
    1398:	4b15      	ldr	r3, [pc, #84]	; (13f0 <QSPI_N25Q256_PORT_init+0xb8>)
    139a:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(FLASH_IO2,
    139c:	2100      	movs	r1, #0
    139e:	200a      	movs	r0, #10
    13a0:	4b17      	ldr	r3, [pc, #92]	; (1400 <QSPI_N25Q256_PORT_init+0xc8>)
    13a2:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(FLASH_IO2,
    13a4:	2100      	movs	r1, #0
    13a6:	200a      	movs	r0, #10
    13a8:	4b12      	ldr	r3, [pc, #72]	; (13f4 <QSPI_N25Q256_PORT_init+0xbc>)
    13aa:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_IO2,
    13ac:	4917      	ldr	r1, [pc, #92]	; (140c <QSPI_N25Q256_PORT_init+0xd4>)
    13ae:	200a      	movs	r0, #10
    13b0:	4b12      	ldr	r3, [pc, #72]	; (13fc <QSPI_N25Q256_PORT_init+0xc4>)
    13b2:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA10H_QSPI_DATA2);

	gpio_set_pin_direction(FLASH_IO3,
    13b4:	2102      	movs	r1, #2
    13b6:	200b      	movs	r0, #11
    13b8:	4b0d      	ldr	r3, [pc, #52]	; (13f0 <QSPI_N25Q256_PORT_init+0xb8>)
    13ba:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(FLASH_IO3,
    13bc:	2100      	movs	r1, #0
    13be:	200b      	movs	r0, #11
    13c0:	4b0f      	ldr	r3, [pc, #60]	; (1400 <QSPI_N25Q256_PORT_init+0xc8>)
    13c2:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(FLASH_IO3,
    13c4:	2100      	movs	r1, #0
    13c6:	200b      	movs	r0, #11
    13c8:	4b0a      	ldr	r3, [pc, #40]	; (13f4 <QSPI_N25Q256_PORT_init+0xbc>)
    13ca:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_IO3,
    13cc:	4910      	ldr	r1, [pc, #64]	; (1410 <QSPI_N25Q256_PORT_init+0xd8>)
    13ce:	200b      	movs	r0, #11
    13d0:	4b0a      	ldr	r3, [pc, #40]	; (13fc <QSPI_N25Q256_PORT_init+0xc4>)
    13d2:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA11H_QSPI_DATA3);

	// Set pin direction to input
	gpio_set_pin_direction(FLASH_CLK, GPIO_DIRECTION_IN);
    13d4:	2101      	movs	r1, #1
    13d6:	202a      	movs	r0, #42	; 0x2a
    13d8:	4b05      	ldr	r3, [pc, #20]	; (13f0 <QSPI_N25Q256_PORT_init+0xb8>)
    13da:	4798      	blx	r3

	gpio_set_pin_pull_mode(FLASH_CLK,
    13dc:	2100      	movs	r1, #0
    13de:	202a      	movs	r0, #42	; 0x2a
    13e0:	4b04      	ldr	r3, [pc, #16]	; (13f4 <QSPI_N25Q256_PORT_init+0xbc>)
    13e2:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_CLK, PINMUX_PB10H_QSPI_SCK);
    13e4:	490b      	ldr	r1, [pc, #44]	; (1414 <QSPI_N25Q256_PORT_init+0xdc>)
    13e6:	202a      	movs	r0, #42	; 0x2a
    13e8:	4b04      	ldr	r3, [pc, #16]	; (13fc <QSPI_N25Q256_PORT_init+0xc4>)
    13ea:	4798      	blx	r3
}
    13ec:	bf00      	nop
    13ee:	bd80      	pop	{r7, pc}
    13f0:	00001169 	.word	0x00001169
    13f4:	00001115 	.word	0x00001115
    13f8:	002b0007 	.word	0x002b0007
    13fc:	00001149 	.word	0x00001149
    1400:	000011a1 	.word	0x000011a1
    1404:	00080007 	.word	0x00080007
    1408:	00090007 	.word	0x00090007
    140c:	000a0007 	.word	0x000a0007
    1410:	000b0007 	.word	0x000b0007
    1414:	002a0007 	.word	0x002a0007

00001418 <QSPI_N25Q256_CLOCK_init>:

void QSPI_N25Q256_CLOCK_init(void)
{
    1418:	b580      	push	{r7, lr}
    141a:	af00      	add	r7, sp, #0
	hri_mclk_set_AHBMASK_QSPI_bit(MCLK);
    141c:	4805      	ldr	r0, [pc, #20]	; (1434 <QSPI_N25Q256_CLOCK_init+0x1c>)
    141e:	4b06      	ldr	r3, [pc, #24]	; (1438 <QSPI_N25Q256_CLOCK_init+0x20>)
    1420:	4798      	blx	r3
	hri_mclk_set_AHBMASK_QSPI_2X_bit(MCLK);
    1422:	4804      	ldr	r0, [pc, #16]	; (1434 <QSPI_N25Q256_CLOCK_init+0x1c>)
    1424:	4b05      	ldr	r3, [pc, #20]	; (143c <QSPI_N25Q256_CLOCK_init+0x24>)
    1426:	4798      	blx	r3
	hri_mclk_set_APBCMASK_QSPI_bit(MCLK);
    1428:	4802      	ldr	r0, [pc, #8]	; (1434 <QSPI_N25Q256_CLOCK_init+0x1c>)
    142a:	4b05      	ldr	r3, [pc, #20]	; (1440 <QSPI_N25Q256_CLOCK_init+0x28>)
    142c:	4798      	blx	r3
}
    142e:	bf00      	nop
    1430:	bd80      	pop	{r7, pc}
    1432:	bf00      	nop
    1434:	40000800 	.word	0x40000800
    1438:	000009db 	.word	0x000009db
    143c:	00000a1b 	.word	0x00000a1b
    1440:	00000bbb 	.word	0x00000bbb

00001444 <QSPI_N25Q256_init>:

void QSPI_N25Q256_init(void)
{
    1444:	b580      	push	{r7, lr}
    1446:	af00      	add	r7, sp, #0
	QSPI_N25Q256_CLOCK_init();
    1448:	4b04      	ldr	r3, [pc, #16]	; (145c <QSPI_N25Q256_init+0x18>)
    144a:	4798      	blx	r3
	qspi_sync_init(&QSPI_N25Q256, QSPI);
    144c:	4904      	ldr	r1, [pc, #16]	; (1460 <QSPI_N25Q256_init+0x1c>)
    144e:	4805      	ldr	r0, [pc, #20]	; (1464 <QSPI_N25Q256_init+0x20>)
    1450:	4b05      	ldr	r3, [pc, #20]	; (1468 <QSPI_N25Q256_init+0x24>)
    1452:	4798      	blx	r3
	QSPI_N25Q256_PORT_init();
    1454:	4b05      	ldr	r3, [pc, #20]	; (146c <QSPI_N25Q256_init+0x28>)
    1456:	4798      	blx	r3
}
    1458:	bf00      	nop
    145a:	bd80      	pop	{r7, pc}
    145c:	00001419 	.word	0x00001419
    1460:	42003400 	.word	0x42003400
    1464:	20000c94 	.word	0x20000c94
    1468:	00002249 	.word	0x00002249
    146c:	00001339 	.word	0x00001339

00001470 <DATETIME_CLOCK_CLOCK_init>:

void DATETIME_CLOCK_CLOCK_init(void)
{
    1470:	b580      	push	{r7, lr}
    1472:	af00      	add	r7, sp, #0
	hri_mclk_set_APBAMASK_RTC_bit(MCLK);
    1474:	4802      	ldr	r0, [pc, #8]	; (1480 <DATETIME_CLOCK_CLOCK_init+0x10>)
    1476:	4b03      	ldr	r3, [pc, #12]	; (1484 <DATETIME_CLOCK_CLOCK_init+0x14>)
    1478:	4798      	blx	r3
}
    147a:	bf00      	nop
    147c:	bd80      	pop	{r7, pc}
    147e:	bf00      	nop
    1480:	40000800 	.word	0x40000800
    1484:	00000a5b 	.word	0x00000a5b

00001488 <DATETIME_CLOCK_init>:

void DATETIME_CLOCK_init(void)
{
    1488:	b580      	push	{r7, lr}
    148a:	af00      	add	r7, sp, #0
	DATETIME_CLOCK_CLOCK_init();
    148c:	4b03      	ldr	r3, [pc, #12]	; (149c <DATETIME_CLOCK_init+0x14>)
    148e:	4798      	blx	r3
	calendar_init(&DATETIME_CLOCK, RTC);
    1490:	4903      	ldr	r1, [pc, #12]	; (14a0 <DATETIME_CLOCK_init+0x18>)
    1492:	4804      	ldr	r0, [pc, #16]	; (14a4 <DATETIME_CLOCK_init+0x1c>)
    1494:	4b04      	ldr	r3, [pc, #16]	; (14a8 <DATETIME_CLOCK_init+0x20>)
    1496:	4798      	blx	r3
}
    1498:	bf00      	nop
    149a:	bd80      	pop	{r7, pc}
    149c:	00001471 	.word	0x00001471
    14a0:	40002400 	.word	0x40002400
    14a4:	20000d8c 	.word	0x20000d8c
    14a8:	00001c39 	.word	0x00001c39

000014ac <SPI_HI3593_PORT_init>:

void SPI_HI3593_PORT_init(void)
{
    14ac:	b580      	push	{r7, lr}
    14ae:	af00      	add	r7, sp, #0

	gpio_set_pin_level(PC17,
    14b0:	2100      	movs	r1, #0
    14b2:	2051      	movs	r0, #81	; 0x51
    14b4:	4b11      	ldr	r3, [pc, #68]	; (14fc <SPI_HI3593_PORT_init+0x50>)
    14b6:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PC17, GPIO_DIRECTION_OUT);
    14b8:	2102      	movs	r1, #2
    14ba:	2051      	movs	r0, #81	; 0x51
    14bc:	4b10      	ldr	r3, [pc, #64]	; (1500 <SPI_HI3593_PORT_init+0x54>)
    14be:	4798      	blx	r3

	gpio_set_pin_function(PC17, PINMUX_PC17D_SERCOM0_PAD0);
    14c0:	4910      	ldr	r1, [pc, #64]	; (1504 <SPI_HI3593_PORT_init+0x58>)
    14c2:	2051      	movs	r0, #81	; 0x51
    14c4:	4b10      	ldr	r3, [pc, #64]	; (1508 <SPI_HI3593_PORT_init+0x5c>)
    14c6:	4798      	blx	r3

	gpio_set_pin_level(PC16,
    14c8:	2100      	movs	r1, #0
    14ca:	2050      	movs	r0, #80	; 0x50
    14cc:	4b0b      	ldr	r3, [pc, #44]	; (14fc <SPI_HI3593_PORT_init+0x50>)
    14ce:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PC16, GPIO_DIRECTION_OUT);
    14d0:	2102      	movs	r1, #2
    14d2:	2050      	movs	r0, #80	; 0x50
    14d4:	4b0a      	ldr	r3, [pc, #40]	; (1500 <SPI_HI3593_PORT_init+0x54>)
    14d6:	4798      	blx	r3

	gpio_set_pin_function(PC16, PINMUX_PC16D_SERCOM0_PAD1);
    14d8:	490c      	ldr	r1, [pc, #48]	; (150c <SPI_HI3593_PORT_init+0x60>)
    14da:	2050      	movs	r0, #80	; 0x50
    14dc:	4b0a      	ldr	r3, [pc, #40]	; (1508 <SPI_HI3593_PORT_init+0x5c>)
    14de:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PA06, GPIO_DIRECTION_IN);
    14e0:	2101      	movs	r1, #1
    14e2:	2006      	movs	r0, #6
    14e4:	4b06      	ldr	r3, [pc, #24]	; (1500 <SPI_HI3593_PORT_init+0x54>)
    14e6:	4798      	blx	r3

	gpio_set_pin_pull_mode(PA06,
    14e8:	2100      	movs	r1, #0
    14ea:	2006      	movs	r0, #6
    14ec:	4b08      	ldr	r3, [pc, #32]	; (1510 <SPI_HI3593_PORT_init+0x64>)
    14ee:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA06, PINMUX_PA06D_SERCOM0_PAD2);
    14f0:	4908      	ldr	r1, [pc, #32]	; (1514 <SPI_HI3593_PORT_init+0x68>)
    14f2:	2006      	movs	r0, #6
    14f4:	4b04      	ldr	r3, [pc, #16]	; (1508 <SPI_HI3593_PORT_init+0x5c>)
    14f6:	4798      	blx	r3
}
    14f8:	bf00      	nop
    14fa:	bd80      	pop	{r7, pc}
    14fc:	000011a1 	.word	0x000011a1
    1500:	00001169 	.word	0x00001169
    1504:	00510003 	.word	0x00510003
    1508:	00001149 	.word	0x00001149
    150c:	00500003 	.word	0x00500003
    1510:	00001115 	.word	0x00001115
    1514:	00060003 	.word	0x00060003

00001518 <SPI_HI3593_CLOCK_init>:

void SPI_HI3593_CLOCK_init(void)
{
    1518:	b580      	push	{r7, lr}
    151a:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM0_GCLK_ID_CORE, CONF_GCLK_SERCOM0_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    151c:	2240      	movs	r2, #64	; 0x40
    151e:	2107      	movs	r1, #7
    1520:	4806      	ldr	r0, [pc, #24]	; (153c <SPI_HI3593_CLOCK_init+0x24>)
    1522:	4b07      	ldr	r3, [pc, #28]	; (1540 <SPI_HI3593_CLOCK_init+0x28>)
    1524:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM0_GCLK_ID_SLOW, CONF_GCLK_SERCOM0_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1526:	2243      	movs	r2, #67	; 0x43
    1528:	2103      	movs	r1, #3
    152a:	4804      	ldr	r0, [pc, #16]	; (153c <SPI_HI3593_CLOCK_init+0x24>)
    152c:	4b04      	ldr	r3, [pc, #16]	; (1540 <SPI_HI3593_CLOCK_init+0x28>)
    152e:	4798      	blx	r3

	hri_mclk_set_APBAMASK_SERCOM0_bit(MCLK);
    1530:	4804      	ldr	r0, [pc, #16]	; (1544 <SPI_HI3593_CLOCK_init+0x2c>)
    1532:	4b05      	ldr	r3, [pc, #20]	; (1548 <SPI_HI3593_CLOCK_init+0x30>)
    1534:	4798      	blx	r3
}
    1536:	bf00      	nop
    1538:	bd80      	pop	{r7, pc}
    153a:	bf00      	nop
    153c:	40001c00 	.word	0x40001c00
    1540:	00000995 	.word	0x00000995
    1544:	40000800 	.word	0x40000800
    1548:	00000a9b 	.word	0x00000a9b

0000154c <SPI_HI3593_init>:

void SPI_HI3593_init(void)
{
    154c:	b580      	push	{r7, lr}
    154e:	af00      	add	r7, sp, #0
	SPI_HI3593_CLOCK_init();
    1550:	4b04      	ldr	r3, [pc, #16]	; (1564 <SPI_HI3593_init+0x18>)
    1552:	4798      	blx	r3
	spi_m_sync_init(&SPI_HI3593, SERCOM0);
    1554:	4904      	ldr	r1, [pc, #16]	; (1568 <SPI_HI3593_init+0x1c>)
    1556:	4805      	ldr	r0, [pc, #20]	; (156c <SPI_HI3593_init+0x20>)
    1558:	4b05      	ldr	r3, [pc, #20]	; (1570 <SPI_HI3593_init+0x24>)
    155a:	4798      	blx	r3
	SPI_HI3593_PORT_init();
    155c:	4b05      	ldr	r3, [pc, #20]	; (1574 <SPI_HI3593_init+0x28>)
    155e:	4798      	blx	r3
}
    1560:	bf00      	nop
    1562:	bd80      	pop	{r7, pc}
    1564:	00001519 	.word	0x00001519
    1568:	40003000 	.word	0x40003000
    156c:	20000c34 	.word	0x20000c34
    1570:	00002725 	.word	0x00002725
    1574:	000014ad 	.word	0x000014ad

00001578 <SPI_TEMP_PORT_init>:

void SPI_TEMP_PORT_init(void)
{
    1578:	b580      	push	{r7, lr}
    157a:	af00      	add	r7, sp, #0

	gpio_set_pin_level(PA00,
    157c:	2100      	movs	r1, #0
    157e:	2000      	movs	r0, #0
    1580:	4b11      	ldr	r3, [pc, #68]	; (15c8 <SPI_TEMP_PORT_init+0x50>)
    1582:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PA00, GPIO_DIRECTION_OUT);
    1584:	2102      	movs	r1, #2
    1586:	2000      	movs	r0, #0
    1588:	4b10      	ldr	r3, [pc, #64]	; (15cc <SPI_TEMP_PORT_init+0x54>)
    158a:	4798      	blx	r3

	gpio_set_pin_function(PA00, PINMUX_PA00D_SERCOM1_PAD0);
    158c:	2103      	movs	r1, #3
    158e:	2000      	movs	r0, #0
    1590:	4b0f      	ldr	r3, [pc, #60]	; (15d0 <SPI_TEMP_PORT_init+0x58>)
    1592:	4798      	blx	r3

	gpio_set_pin_level(PA01,
    1594:	2100      	movs	r1, #0
    1596:	2001      	movs	r0, #1
    1598:	4b0b      	ldr	r3, [pc, #44]	; (15c8 <SPI_TEMP_PORT_init+0x50>)
    159a:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PA01, GPIO_DIRECTION_OUT);
    159c:	2102      	movs	r1, #2
    159e:	2001      	movs	r0, #1
    15a0:	4b0a      	ldr	r3, [pc, #40]	; (15cc <SPI_TEMP_PORT_init+0x54>)
    15a2:	4798      	blx	r3

	gpio_set_pin_function(PA01, PINMUX_PA01D_SERCOM1_PAD1);
    15a4:	490b      	ldr	r1, [pc, #44]	; (15d4 <SPI_TEMP_PORT_init+0x5c>)
    15a6:	2001      	movs	r0, #1
    15a8:	4b09      	ldr	r3, [pc, #36]	; (15d0 <SPI_TEMP_PORT_init+0x58>)
    15aa:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PA18, GPIO_DIRECTION_IN);
    15ac:	2101      	movs	r1, #1
    15ae:	2012      	movs	r0, #18
    15b0:	4b06      	ldr	r3, [pc, #24]	; (15cc <SPI_TEMP_PORT_init+0x54>)
    15b2:	4798      	blx	r3

	gpio_set_pin_pull_mode(PA18,
    15b4:	2100      	movs	r1, #0
    15b6:	2012      	movs	r0, #18
    15b8:	4b07      	ldr	r3, [pc, #28]	; (15d8 <SPI_TEMP_PORT_init+0x60>)
    15ba:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA18, PINMUX_PA18C_SERCOM1_PAD2);
    15bc:	4907      	ldr	r1, [pc, #28]	; (15dc <SPI_TEMP_PORT_init+0x64>)
    15be:	2012      	movs	r0, #18
    15c0:	4b03      	ldr	r3, [pc, #12]	; (15d0 <SPI_TEMP_PORT_init+0x58>)
    15c2:	4798      	blx	r3
}
    15c4:	bf00      	nop
    15c6:	bd80      	pop	{r7, pc}
    15c8:	000011a1 	.word	0x000011a1
    15cc:	00001169 	.word	0x00001169
    15d0:	00001149 	.word	0x00001149
    15d4:	00010003 	.word	0x00010003
    15d8:	00001115 	.word	0x00001115
    15dc:	00120002 	.word	0x00120002

000015e0 <SPI_TEMP_CLOCK_init>:

void SPI_TEMP_CLOCK_init(void)
{
    15e0:	b580      	push	{r7, lr}
    15e2:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM1_GCLK_ID_CORE, CONF_GCLK_SERCOM1_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    15e4:	2240      	movs	r2, #64	; 0x40
    15e6:	2108      	movs	r1, #8
    15e8:	4806      	ldr	r0, [pc, #24]	; (1604 <SPI_TEMP_CLOCK_init+0x24>)
    15ea:	4b07      	ldr	r3, [pc, #28]	; (1608 <SPI_TEMP_CLOCK_init+0x28>)
    15ec:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM1_GCLK_ID_SLOW, CONF_GCLK_SERCOM1_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    15ee:	2243      	movs	r2, #67	; 0x43
    15f0:	2103      	movs	r1, #3
    15f2:	4804      	ldr	r0, [pc, #16]	; (1604 <SPI_TEMP_CLOCK_init+0x24>)
    15f4:	4b04      	ldr	r3, [pc, #16]	; (1608 <SPI_TEMP_CLOCK_init+0x28>)
    15f6:	4798      	blx	r3

	hri_mclk_set_APBAMASK_SERCOM1_bit(MCLK);
    15f8:	4804      	ldr	r0, [pc, #16]	; (160c <SPI_TEMP_CLOCK_init+0x2c>)
    15fa:	4b05      	ldr	r3, [pc, #20]	; (1610 <SPI_TEMP_CLOCK_init+0x30>)
    15fc:	4798      	blx	r3
}
    15fe:	bf00      	nop
    1600:	bd80      	pop	{r7, pc}
    1602:	bf00      	nop
    1604:	40001c00 	.word	0x40001c00
    1608:	00000995 	.word	0x00000995
    160c:	40000800 	.word	0x40000800
    1610:	00000abb 	.word	0x00000abb

00001614 <SPI_TEMP_init>:

void SPI_TEMP_init(void)
{
    1614:	b580      	push	{r7, lr}
    1616:	af00      	add	r7, sp, #0
	SPI_TEMP_CLOCK_init();
    1618:	4b04      	ldr	r3, [pc, #16]	; (162c <SPI_TEMP_init+0x18>)
    161a:	4798      	blx	r3
	spi_m_async_init(&SPI_TEMP, SERCOM1);
    161c:	4904      	ldr	r1, [pc, #16]	; (1630 <SPI_TEMP_init+0x1c>)
    161e:	4805      	ldr	r0, [pc, #20]	; (1634 <SPI_TEMP_init+0x20>)
    1620:	4b05      	ldr	r3, [pc, #20]	; (1638 <SPI_TEMP_init+0x24>)
    1622:	4798      	blx	r3
	SPI_TEMP_PORT_init();
    1624:	4b05      	ldr	r3, [pc, #20]	; (163c <SPI_TEMP_init+0x28>)
    1626:	4798      	blx	r3
}
    1628:	bf00      	nop
    162a:	bd80      	pop	{r7, pc}
    162c:	000015e1 	.word	0x000015e1
    1630:	40003400 	.word	0x40003400
    1634:	20000c4c 	.word	0x20000c4c
    1638:	00002571 	.word	0x00002571
    163c:	00001579 	.word	0x00001579

00001640 <I2C_EXPANDER_PORT_init>:

void I2C_EXPANDER_PORT_init(void)
{
    1640:	b580      	push	{r7, lr}
    1642:	af00      	add	r7, sp, #0

	gpio_set_pin_pull_mode(PA23,
    1644:	2100      	movs	r1, #0
    1646:	2017      	movs	r0, #23
    1648:	4b07      	ldr	r3, [pc, #28]	; (1668 <I2C_EXPANDER_PORT_init+0x28>)
    164a:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA23, PINMUX_PA23D_SERCOM5_PAD0);
    164c:	4907      	ldr	r1, [pc, #28]	; (166c <I2C_EXPANDER_PORT_init+0x2c>)
    164e:	2017      	movs	r0, #23
    1650:	4b07      	ldr	r3, [pc, #28]	; (1670 <I2C_EXPANDER_PORT_init+0x30>)
    1652:	4798      	blx	r3

	gpio_set_pin_pull_mode(PA22,
    1654:	2100      	movs	r1, #0
    1656:	2016      	movs	r0, #22
    1658:	4b03      	ldr	r3, [pc, #12]	; (1668 <I2C_EXPANDER_PORT_init+0x28>)
    165a:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA22, PINMUX_PA22D_SERCOM5_PAD1);
    165c:	4905      	ldr	r1, [pc, #20]	; (1674 <I2C_EXPANDER_PORT_init+0x34>)
    165e:	2016      	movs	r0, #22
    1660:	4b03      	ldr	r3, [pc, #12]	; (1670 <I2C_EXPANDER_PORT_init+0x30>)
    1662:	4798      	blx	r3
}
    1664:	bf00      	nop
    1666:	bd80      	pop	{r7, pc}
    1668:	00001115 	.word	0x00001115
    166c:	00170003 	.word	0x00170003
    1670:	00001149 	.word	0x00001149
    1674:	00160003 	.word	0x00160003

00001678 <I2C_EXPANDER_CLOCK_init>:

void I2C_EXPANDER_CLOCK_init(void)
{
    1678:	b580      	push	{r7, lr}
    167a:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM5_GCLK_ID_CORE, CONF_GCLK_SERCOM5_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    167c:	2242      	movs	r2, #66	; 0x42
    167e:	2123      	movs	r1, #35	; 0x23
    1680:	4806      	ldr	r0, [pc, #24]	; (169c <I2C_EXPANDER_CLOCK_init+0x24>)
    1682:	4b07      	ldr	r3, [pc, #28]	; (16a0 <I2C_EXPANDER_CLOCK_init+0x28>)
    1684:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM5_GCLK_ID_SLOW, CONF_GCLK_SERCOM5_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1686:	2246      	movs	r2, #70	; 0x46
    1688:	2103      	movs	r1, #3
    168a:	4804      	ldr	r0, [pc, #16]	; (169c <I2C_EXPANDER_CLOCK_init+0x24>)
    168c:	4b04      	ldr	r3, [pc, #16]	; (16a0 <I2C_EXPANDER_CLOCK_init+0x28>)
    168e:	4798      	blx	r3

	hri_mclk_set_APBDMASK_SERCOM5_bit(MCLK);
    1690:	4804      	ldr	r0, [pc, #16]	; (16a4 <I2C_EXPANDER_CLOCK_init+0x2c>)
    1692:	4b05      	ldr	r3, [pc, #20]	; (16a8 <I2C_EXPANDER_CLOCK_init+0x30>)
    1694:	4798      	blx	r3
}
    1696:	bf00      	nop
    1698:	bd80      	pop	{r7, pc}
    169a:	bf00      	nop
    169c:	40001c00 	.word	0x40001c00
    16a0:	00000995 	.word	0x00000995
    16a4:	40000800 	.word	0x40000800
    16a8:	00000bdb 	.word	0x00000bdb

000016ac <I2C_EXPANDER_init>:

void I2C_EXPANDER_init(void)
{
    16ac:	b580      	push	{r7, lr}
    16ae:	af00      	add	r7, sp, #0
	I2C_EXPANDER_CLOCK_init();
    16b0:	4b04      	ldr	r3, [pc, #16]	; (16c4 <I2C_EXPANDER_init+0x18>)
    16b2:	4798      	blx	r3
	i2c_m_async_init(&I2C_EXPANDER, SERCOM5);
    16b4:	4904      	ldr	r1, [pc, #16]	; (16c8 <I2C_EXPANDER_init+0x1c>)
    16b6:	4805      	ldr	r0, [pc, #20]	; (16cc <I2C_EXPANDER_init+0x20>)
    16b8:	4b05      	ldr	r3, [pc, #20]	; (16d0 <I2C_EXPANDER_init+0x24>)
    16ba:	4798      	blx	r3
	I2C_EXPANDER_PORT_init();
    16bc:	4b05      	ldr	r3, [pc, #20]	; (16d4 <I2C_EXPANDER_init+0x28>)
    16be:	4798      	blx	r3
}
    16c0:	bf00      	nop
    16c2:	bd80      	pop	{r7, pc}
    16c4:	00001679 	.word	0x00001679
    16c8:	43000400 	.word	0x43000400
    16cc:	20000d30 	.word	0x20000d30
    16d0:	00002069 	.word	0x00002069
    16d4:	00001641 	.word	0x00001641

000016d8 <SPI_MEMORIES_PORT_init>:

void SPI_MEMORIES_PORT_init(void)
{
    16d8:	b580      	push	{r7, lr}
    16da:	af00      	add	r7, sp, #0

	gpio_set_pin_level(PD09,
    16dc:	2100      	movs	r1, #0
    16de:	2069      	movs	r0, #105	; 0x69
    16e0:	4b11      	ldr	r3, [pc, #68]	; (1728 <SPI_MEMORIES_PORT_init+0x50>)
    16e2:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PD09, GPIO_DIRECTION_OUT);
    16e4:	2102      	movs	r1, #2
    16e6:	2069      	movs	r0, #105	; 0x69
    16e8:	4b10      	ldr	r3, [pc, #64]	; (172c <SPI_MEMORIES_PORT_init+0x54>)
    16ea:	4798      	blx	r3

	gpio_set_pin_function(PD09, PINMUX_PD09D_SERCOM6_PAD0);
    16ec:	4910      	ldr	r1, [pc, #64]	; (1730 <SPI_MEMORIES_PORT_init+0x58>)
    16ee:	2069      	movs	r0, #105	; 0x69
    16f0:	4b10      	ldr	r3, [pc, #64]	; (1734 <SPI_MEMORIES_PORT_init+0x5c>)
    16f2:	4798      	blx	r3

	gpio_set_pin_level(PD08,
    16f4:	2100      	movs	r1, #0
    16f6:	2068      	movs	r0, #104	; 0x68
    16f8:	4b0b      	ldr	r3, [pc, #44]	; (1728 <SPI_MEMORIES_PORT_init+0x50>)
    16fa:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PD08, GPIO_DIRECTION_OUT);
    16fc:	2102      	movs	r1, #2
    16fe:	2068      	movs	r0, #104	; 0x68
    1700:	4b0a      	ldr	r3, [pc, #40]	; (172c <SPI_MEMORIES_PORT_init+0x54>)
    1702:	4798      	blx	r3

	gpio_set_pin_function(PD08, PINMUX_PD08D_SERCOM6_PAD1);
    1704:	490c      	ldr	r1, [pc, #48]	; (1738 <SPI_MEMORIES_PORT_init+0x60>)
    1706:	2068      	movs	r0, #104	; 0x68
    1708:	4b0a      	ldr	r3, [pc, #40]	; (1734 <SPI_MEMORIES_PORT_init+0x5c>)
    170a:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PC06, GPIO_DIRECTION_IN);
    170c:	2101      	movs	r1, #1
    170e:	2046      	movs	r0, #70	; 0x46
    1710:	4b06      	ldr	r3, [pc, #24]	; (172c <SPI_MEMORIES_PORT_init+0x54>)
    1712:	4798      	blx	r3

	gpio_set_pin_pull_mode(PC06,
    1714:	2100      	movs	r1, #0
    1716:	2046      	movs	r0, #70	; 0x46
    1718:	4b08      	ldr	r3, [pc, #32]	; (173c <SPI_MEMORIES_PORT_init+0x64>)
    171a:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PC06, PINMUX_PC06C_SERCOM6_PAD2);
    171c:	4908      	ldr	r1, [pc, #32]	; (1740 <SPI_MEMORIES_PORT_init+0x68>)
    171e:	2046      	movs	r0, #70	; 0x46
    1720:	4b04      	ldr	r3, [pc, #16]	; (1734 <SPI_MEMORIES_PORT_init+0x5c>)
    1722:	4798      	blx	r3
}
    1724:	bf00      	nop
    1726:	bd80      	pop	{r7, pc}
    1728:	000011a1 	.word	0x000011a1
    172c:	00001169 	.word	0x00001169
    1730:	00690003 	.word	0x00690003
    1734:	00001149 	.word	0x00001149
    1738:	00680003 	.word	0x00680003
    173c:	00001115 	.word	0x00001115
    1740:	00460002 	.word	0x00460002

00001744 <SPI_MEMORIES_CLOCK_init>:

void SPI_MEMORIES_CLOCK_init(void)
{
    1744:	b580      	push	{r7, lr}
    1746:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM6_GCLK_ID_CORE, CONF_GCLK_SERCOM6_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1748:	2242      	movs	r2, #66	; 0x42
    174a:	2124      	movs	r1, #36	; 0x24
    174c:	4806      	ldr	r0, [pc, #24]	; (1768 <SPI_MEMORIES_CLOCK_init+0x24>)
    174e:	4b07      	ldr	r3, [pc, #28]	; (176c <SPI_MEMORIES_CLOCK_init+0x28>)
    1750:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM6_GCLK_ID_SLOW, CONF_GCLK_SERCOM6_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1752:	2246      	movs	r2, #70	; 0x46
    1754:	2103      	movs	r1, #3
    1756:	4804      	ldr	r0, [pc, #16]	; (1768 <SPI_MEMORIES_CLOCK_init+0x24>)
    1758:	4b04      	ldr	r3, [pc, #16]	; (176c <SPI_MEMORIES_CLOCK_init+0x28>)
    175a:	4798      	blx	r3

	hri_mclk_set_APBDMASK_SERCOM6_bit(MCLK);
    175c:	4804      	ldr	r0, [pc, #16]	; (1770 <SPI_MEMORIES_CLOCK_init+0x2c>)
    175e:	4b05      	ldr	r3, [pc, #20]	; (1774 <SPI_MEMORIES_CLOCK_init+0x30>)
    1760:	4798      	blx	r3
}
    1762:	bf00      	nop
    1764:	bd80      	pop	{r7, pc}
    1766:	bf00      	nop
    1768:	40001c00 	.word	0x40001c00
    176c:	00000995 	.word	0x00000995
    1770:	40000800 	.word	0x40000800
    1774:	00000bfb 	.word	0x00000bfb

00001778 <SPI_MEMORIES_init>:

void SPI_MEMORIES_init(void)
{
    1778:	b580      	push	{r7, lr}
    177a:	af00      	add	r7, sp, #0
	SPI_MEMORIES_CLOCK_init();
    177c:	4b04      	ldr	r3, [pc, #16]	; (1790 <SPI_MEMORIES_init+0x18>)
    177e:	4798      	blx	r3
	spi_m_sync_init(&SPI_MEMORIES, SERCOM6);
    1780:	4904      	ldr	r1, [pc, #16]	; (1794 <SPI_MEMORIES_init+0x1c>)
    1782:	4805      	ldr	r0, [pc, #20]	; (1798 <SPI_MEMORIES_init+0x20>)
    1784:	4b05      	ldr	r3, [pc, #20]	; (179c <SPI_MEMORIES_init+0x24>)
    1786:	4798      	blx	r3
	SPI_MEMORIES_PORT_init();
    1788:	4b05      	ldr	r3, [pc, #20]	; (17a0 <SPI_MEMORIES_init+0x28>)
    178a:	4798      	blx	r3
}
    178c:	bf00      	nop
    178e:	bd80      	pop	{r7, pc}
    1790:	00001745 	.word	0x00001745
    1794:	43000800 	.word	0x43000800
    1798:	20000c1c 	.word	0x20000c1c
    179c:	00002725 	.word	0x00002725
    17a0:	000016d9 	.word	0x000016d9

000017a4 <TIMER_INTERFACE_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_INTERFACE_init(void)
{
    17a4:	b580      	push	{r7, lr}
    17a6:	af00      	add	r7, sp, #0
	hri_mclk_set_APBAMASK_TC0_bit(MCLK);
    17a8:	4808      	ldr	r0, [pc, #32]	; (17cc <TIMER_INTERFACE_init+0x28>)
    17aa:	4b09      	ldr	r3, [pc, #36]	; (17d0 <TIMER_INTERFACE_init+0x2c>)
    17ac:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC0_GCLK_ID, CONF_GCLK_TC0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    17ae:	2243      	movs	r2, #67	; 0x43
    17b0:	2109      	movs	r1, #9
    17b2:	4808      	ldr	r0, [pc, #32]	; (17d4 <TIMER_INTERFACE_init+0x30>)
    17b4:	4b08      	ldr	r3, [pc, #32]	; (17d8 <TIMER_INTERFACE_init+0x34>)
    17b6:	4798      	blx	r3

	timer_init(&TIMER_INTERFACE, TC0, _tc_get_timer());
    17b8:	4b08      	ldr	r3, [pc, #32]	; (17dc <TIMER_INTERFACE_init+0x38>)
    17ba:	4798      	blx	r3
    17bc:	4603      	mov	r3, r0
    17be:	461a      	mov	r2, r3
    17c0:	4907      	ldr	r1, [pc, #28]	; (17e0 <TIMER_INTERFACE_init+0x3c>)
    17c2:	4808      	ldr	r0, [pc, #32]	; (17e4 <TIMER_INTERFACE_init+0x40>)
    17c4:	4b08      	ldr	r3, [pc, #32]	; (17e8 <TIMER_INTERFACE_init+0x44>)
    17c6:	4798      	blx	r3
}
    17c8:	bf00      	nop
    17ca:	bd80      	pop	{r7, pc}
    17cc:	40000800 	.word	0x40000800
    17d0:	00000adb 	.word	0x00000adb
    17d4:	40001c00 	.word	0x40001c00
    17d8:	00000995 	.word	0x00000995
    17dc:	00007945 	.word	0x00007945
    17e0:	40003800 	.word	0x40003800
    17e4:	20000cb4 	.word	0x20000cb4
    17e8:	000029b5 	.word	0x000029b5

000017ec <TIMER_EVENT_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_EVENT_init(void)
{
    17ec:	b580      	push	{r7, lr}
    17ee:	af00      	add	r7, sp, #0
	hri_mclk_set_APBAMASK_TC1_bit(MCLK);
    17f0:	4808      	ldr	r0, [pc, #32]	; (1814 <TIMER_EVENT_init+0x28>)
    17f2:	4b09      	ldr	r3, [pc, #36]	; (1818 <TIMER_EVENT_init+0x2c>)
    17f4:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC1_GCLK_ID, CONF_GCLK_TC1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    17f6:	2245      	movs	r2, #69	; 0x45
    17f8:	2109      	movs	r1, #9
    17fa:	4808      	ldr	r0, [pc, #32]	; (181c <TIMER_EVENT_init+0x30>)
    17fc:	4b08      	ldr	r3, [pc, #32]	; (1820 <TIMER_EVENT_init+0x34>)
    17fe:	4798      	blx	r3

	timer_init(&TIMER_EVENT, TC1, _tc_get_timer());
    1800:	4b08      	ldr	r3, [pc, #32]	; (1824 <TIMER_EVENT_init+0x38>)
    1802:	4798      	blx	r3
    1804:	4603      	mov	r3, r0
    1806:	461a      	mov	r2, r3
    1808:	4907      	ldr	r1, [pc, #28]	; (1828 <TIMER_EVENT_init+0x3c>)
    180a:	4808      	ldr	r0, [pc, #32]	; (182c <TIMER_EVENT_init+0x40>)
    180c:	4b08      	ldr	r3, [pc, #32]	; (1830 <TIMER_EVENT_init+0x44>)
    180e:	4798      	blx	r3
}
    1810:	bf00      	nop
    1812:	bd80      	pop	{r7, pc}
    1814:	40000800 	.word	0x40000800
    1818:	00000afb 	.word	0x00000afb
    181c:	40001c00 	.word	0x40001c00
    1820:	00000995 	.word	0x00000995
    1824:	00007945 	.word	0x00007945
    1828:	40003c00 	.word	0x40003c00
    182c:	20000c98 	.word	0x20000c98
    1830:	000029b5 	.word	0x000029b5

00001834 <TIMER_ARINC_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_ARINC_init(void)
{
    1834:	b580      	push	{r7, lr}
    1836:	af00      	add	r7, sp, #0
	hri_mclk_set_APBBMASK_TC2_bit(MCLK);
    1838:	4808      	ldr	r0, [pc, #32]	; (185c <TIMER_ARINC_init+0x28>)
    183a:	4b09      	ldr	r3, [pc, #36]	; (1860 <TIMER_ARINC_init+0x2c>)
    183c:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC2_GCLK_ID, CONF_GCLK_TC2_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    183e:	2244      	movs	r2, #68	; 0x44
    1840:	211a      	movs	r1, #26
    1842:	4808      	ldr	r0, [pc, #32]	; (1864 <TIMER_ARINC_init+0x30>)
    1844:	4b08      	ldr	r3, [pc, #32]	; (1868 <TIMER_ARINC_init+0x34>)
    1846:	4798      	blx	r3

	timer_init(&TIMER_ARINC, TC2, _tc_get_timer());
    1848:	4b08      	ldr	r3, [pc, #32]	; (186c <TIMER_ARINC_init+0x38>)
    184a:	4798      	blx	r3
    184c:	4603      	mov	r3, r0
    184e:	461a      	mov	r2, r3
    1850:	4907      	ldr	r1, [pc, #28]	; (1870 <TIMER_ARINC_init+0x3c>)
    1852:	4808      	ldr	r0, [pc, #32]	; (1874 <TIMER_ARINC_init+0x40>)
    1854:	4b08      	ldr	r3, [pc, #32]	; (1878 <TIMER_ARINC_init+0x44>)
    1856:	4798      	blx	r3
}
    1858:	bf00      	nop
    185a:	bd80      	pop	{r7, pc}
    185c:	40000800 	.word	0x40000800
    1860:	00000b7b 	.word	0x00000b7b
    1864:	40001c00 	.word	0x40001c00
    1868:	00000995 	.word	0x00000995
    186c:	00007945 	.word	0x00007945
    1870:	4101a000 	.word	0x4101a000
    1874:	20000d14 	.word	0x20000d14
    1878:	000029b5 	.word	0x000029b5

0000187c <TIMER_HVAC_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_HVAC_init(void)
{
    187c:	b580      	push	{r7, lr}
    187e:	af00      	add	r7, sp, #0
	hri_mclk_set_APBBMASK_TC3_bit(MCLK);
    1880:	4808      	ldr	r0, [pc, #32]	; (18a4 <TIMER_HVAC_init+0x28>)
    1882:	4b09      	ldr	r3, [pc, #36]	; (18a8 <TIMER_HVAC_init+0x2c>)
    1884:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC3_GCLK_ID, CONF_GCLK_TC3_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1886:	2245      	movs	r2, #69	; 0x45
    1888:	211a      	movs	r1, #26
    188a:	4808      	ldr	r0, [pc, #32]	; (18ac <TIMER_HVAC_init+0x30>)
    188c:	4b08      	ldr	r3, [pc, #32]	; (18b0 <TIMER_HVAC_init+0x34>)
    188e:	4798      	blx	r3

	timer_init(&TIMER_HVAC, TC3, _tc_get_timer());
    1890:	4b08      	ldr	r3, [pc, #32]	; (18b4 <TIMER_HVAC_init+0x38>)
    1892:	4798      	blx	r3
    1894:	4603      	mov	r3, r0
    1896:	461a      	mov	r2, r3
    1898:	4907      	ldr	r1, [pc, #28]	; (18b8 <TIMER_HVAC_init+0x3c>)
    189a:	4808      	ldr	r0, [pc, #32]	; (18bc <TIMER_HVAC_init+0x40>)
    189c:	4b08      	ldr	r3, [pc, #32]	; (18c0 <TIMER_HVAC_init+0x44>)
    189e:	4798      	blx	r3
}
    18a0:	bf00      	nop
    18a2:	bd80      	pop	{r7, pc}
    18a4:	40000800 	.word	0x40000800
    18a8:	00000b9b 	.word	0x00000b9b
    18ac:	40001c00 	.word	0x40001c00
    18b0:	00000995 	.word	0x00000995
    18b4:	00007945 	.word	0x00007945
    18b8:	4101c000 	.word	0x4101c000
    18bc:	20000d70 	.word	0x20000d70
    18c0:	000029b5 	.word	0x000029b5

000018c4 <LIVE_PULSE_PORT_init>:

void LIVE_PULSE_PORT_init(void)
{
    18c4:	b480      	push	{r7}
    18c6:	af00      	add	r7, sp, #0
}
    18c8:	bf00      	nop
    18ca:	46bd      	mov	sp, r7
    18cc:	f85d 7b04 	ldr.w	r7, [sp], #4
    18d0:	4770      	bx	lr
	...

000018d4 <LIVE_PULSE_CLOCK_init>:

void LIVE_PULSE_CLOCK_init(void)
{
    18d4:	b580      	push	{r7, lr}
    18d6:	af00      	add	r7, sp, #0

	hri_mclk_set_APBDMASK_TC7_bit(MCLK);
    18d8:	4804      	ldr	r0, [pc, #16]	; (18ec <LIVE_PULSE_CLOCK_init+0x18>)
    18da:	4b05      	ldr	r3, [pc, #20]	; (18f0 <LIVE_PULSE_CLOCK_init+0x1c>)
    18dc:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC7_GCLK_ID, CONF_GCLK_TC7_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    18de:	224b      	movs	r2, #75	; 0x4b
    18e0:	2127      	movs	r1, #39	; 0x27
    18e2:	4804      	ldr	r0, [pc, #16]	; (18f4 <LIVE_PULSE_CLOCK_init+0x20>)
    18e4:	4b04      	ldr	r3, [pc, #16]	; (18f8 <LIVE_PULSE_CLOCK_init+0x24>)
    18e6:	4798      	blx	r3
}
    18e8:	bf00      	nop
    18ea:	bd80      	pop	{r7, pc}
    18ec:	40000800 	.word	0x40000800
    18f0:	00000c1b 	.word	0x00000c1b
    18f4:	40001c00 	.word	0x40001c00
    18f8:	00000995 	.word	0x00000995

000018fc <LIVE_PULSE_init>:

void LIVE_PULSE_init(void)
{
    18fc:	b580      	push	{r7, lr}
    18fe:	af00      	add	r7, sp, #0
	LIVE_PULSE_CLOCK_init();
    1900:	4b06      	ldr	r3, [pc, #24]	; (191c <LIVE_PULSE_init+0x20>)
    1902:	4798      	blx	r3
	LIVE_PULSE_PORT_init();
    1904:	4b06      	ldr	r3, [pc, #24]	; (1920 <LIVE_PULSE_init+0x24>)
    1906:	4798      	blx	r3
	pwm_init(&LIVE_PULSE, TC7, _tc_get_pwm());
    1908:	4b06      	ldr	r3, [pc, #24]	; (1924 <LIVE_PULSE_init+0x28>)
    190a:	4798      	blx	r3
    190c:	4603      	mov	r3, r0
    190e:	461a      	mov	r2, r3
    1910:	4905      	ldr	r1, [pc, #20]	; (1928 <LIVE_PULSE_init+0x2c>)
    1912:	4806      	ldr	r0, [pc, #24]	; (192c <LIVE_PULSE_init+0x30>)
    1914:	4b06      	ldr	r3, [pc, #24]	; (1930 <LIVE_PULSE_init+0x34>)
    1916:	4798      	blx	r3
}
    1918:	bf00      	nop
    191a:	bd80      	pop	{r7, pc}
    191c:	000018d5 	.word	0x000018d5
    1920:	000018c5 	.word	0x000018c5
    1924:	00007955 	.word	0x00007955
    1928:	43001800 	.word	0x43001800
    192c:	20000cd0 	.word	0x20000cd0
    1930:	0000219d 	.word	0x0000219d

00001934 <CDCUSB_PORT_init>:

void CDCUSB_PORT_init(void)
{
    1934:	b580      	push	{r7, lr}
    1936:	af00      	add	r7, sp, #0

	gpio_set_pin_direction(PA24,
    1938:	2102      	movs	r1, #2
    193a:	2018      	movs	r0, #24
    193c:	4b0f      	ldr	r3, [pc, #60]	; (197c <CDCUSB_PORT_init+0x48>)
    193e:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(PA24,
    1940:	2100      	movs	r1, #0
    1942:	2018      	movs	r0, #24
    1944:	4b0e      	ldr	r3, [pc, #56]	; (1980 <CDCUSB_PORT_init+0x4c>)
    1946:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(PA24,
    1948:	2100      	movs	r1, #0
    194a:	2018      	movs	r0, #24
    194c:	4b0d      	ldr	r3, [pc, #52]	; (1984 <CDCUSB_PORT_init+0x50>)
    194e:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA24,
    1950:	490d      	ldr	r1, [pc, #52]	; (1988 <CDCUSB_PORT_init+0x54>)
    1952:	2018      	movs	r0, #24
    1954:	4b0d      	ldr	r3, [pc, #52]	; (198c <CDCUSB_PORT_init+0x58>)
    1956:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA24H_USB_DM);

	gpio_set_pin_direction(PA25,
    1958:	2102      	movs	r1, #2
    195a:	2019      	movs	r0, #25
    195c:	4b07      	ldr	r3, [pc, #28]	; (197c <CDCUSB_PORT_init+0x48>)
    195e:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(PA25,
    1960:	2100      	movs	r1, #0
    1962:	2019      	movs	r0, #25
    1964:	4b06      	ldr	r3, [pc, #24]	; (1980 <CDCUSB_PORT_init+0x4c>)
    1966:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(PA25,
    1968:	2100      	movs	r1, #0
    196a:	2019      	movs	r0, #25
    196c:	4b05      	ldr	r3, [pc, #20]	; (1984 <CDCUSB_PORT_init+0x50>)
    196e:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA25,
    1970:	4907      	ldr	r1, [pc, #28]	; (1990 <CDCUSB_PORT_init+0x5c>)
    1972:	2019      	movs	r0, #25
    1974:	4b05      	ldr	r3, [pc, #20]	; (198c <CDCUSB_PORT_init+0x58>)
    1976:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_K"> K
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA25H_USB_DP);
}
    1978:	bf00      	nop
    197a:	bd80      	pop	{r7, pc}
    197c:	00001169 	.word	0x00001169
    1980:	000011a1 	.word	0x000011a1
    1984:	00001115 	.word	0x00001115
    1988:	00180007 	.word	0x00180007
    198c:	00001149 	.word	0x00001149
    1990:	00190007 	.word	0x00190007

00001994 <CDCUSB_CLOCK_init>:
#if (CONF_GCLK_USB_FREQUENCY > (48000000 + 48000000 / 400)) || (CONF_GCLK_USB_FREQUENCY < (48000000 - 48000000 / 400))
#warning USB clock should be 48MHz ~ 0.25% clock, check your configuration!
#endif

void CDCUSB_CLOCK_init(void)
{
    1994:	b580      	push	{r7, lr}
    1996:	af00      	add	r7, sp, #0

	hri_gclk_write_PCHCTRL_reg(GCLK, USB_GCLK_ID, CONF_GCLK_USB_SRC | GCLK_PCHCTRL_CHEN);
    1998:	2242      	movs	r2, #66	; 0x42
    199a:	210a      	movs	r1, #10
    199c:	4805      	ldr	r0, [pc, #20]	; (19b4 <CDCUSB_CLOCK_init+0x20>)
    199e:	4b06      	ldr	r3, [pc, #24]	; (19b8 <CDCUSB_CLOCK_init+0x24>)
    19a0:	4798      	blx	r3
	hri_mclk_set_AHBMASK_USB_bit(MCLK);
    19a2:	4806      	ldr	r0, [pc, #24]	; (19bc <CDCUSB_CLOCK_init+0x28>)
    19a4:	4b06      	ldr	r3, [pc, #24]	; (19c0 <CDCUSB_CLOCK_init+0x2c>)
    19a6:	4798      	blx	r3
	hri_mclk_set_APBBMASK_USB_bit(MCLK);
    19a8:	4804      	ldr	r0, [pc, #16]	; (19bc <CDCUSB_CLOCK_init+0x28>)
    19aa:	4b06      	ldr	r3, [pc, #24]	; (19c4 <CDCUSB_CLOCK_init+0x30>)
    19ac:	4798      	blx	r3
}
    19ae:	bf00      	nop
    19b0:	bd80      	pop	{r7, pc}
    19b2:	bf00      	nop
    19b4:	40001c00 	.word	0x40001c00
    19b8:	00000995 	.word	0x00000995
    19bc:	40000800 	.word	0x40000800
    19c0:	000009bb 	.word	0x000009bb
    19c4:	00000b1b 	.word	0x00000b1b

000019c8 <CDCUSB_init>:

void CDCUSB_init(void)
{
    19c8:	b580      	push	{r7, lr}
    19ca:	af00      	add	r7, sp, #0
	CDCUSB_CLOCK_init();
    19cc:	4b03      	ldr	r3, [pc, #12]	; (19dc <CDCUSB_init+0x14>)
    19ce:	4798      	blx	r3
	usb_d_init();
    19d0:	4b03      	ldr	r3, [pc, #12]	; (19e0 <CDCUSB_init+0x18>)
    19d2:	4798      	blx	r3
	CDCUSB_PORT_init();
    19d4:	4b03      	ldr	r3, [pc, #12]	; (19e4 <CDCUSB_init+0x1c>)
    19d6:	4798      	blx	r3
}
    19d8:	bf00      	nop
    19da:	bd80      	pop	{r7, pc}
    19dc:	00001995 	.word	0x00001995
    19e0:	00002f2d 	.word	0x00002f2d
    19e4:	00001935 	.word	0x00001935

000019e8 <WATCHDOG_CLOCK_init>:

void WATCHDOG_CLOCK_init(void)
{
    19e8:	b580      	push	{r7, lr}
    19ea:	af00      	add	r7, sp, #0
	hri_mclk_set_APBAMASK_WDT_bit(MCLK);
    19ec:	4802      	ldr	r0, [pc, #8]	; (19f8 <WATCHDOG_CLOCK_init+0x10>)
    19ee:	4b03      	ldr	r3, [pc, #12]	; (19fc <WATCHDOG_CLOCK_init+0x14>)
    19f0:	4798      	blx	r3
}
    19f2:	bf00      	nop
    19f4:	bd80      	pop	{r7, pc}
    19f6:	bf00      	nop
    19f8:	40000800 	.word	0x40000800
    19fc:	00000a3b 	.word	0x00000a3b

00001a00 <WATCHDOG_init>:

void WATCHDOG_init(void)
{
    1a00:	b580      	push	{r7, lr}
    1a02:	af00      	add	r7, sp, #0
	WATCHDOG_CLOCK_init();
    1a04:	4b03      	ldr	r3, [pc, #12]	; (1a14 <WATCHDOG_init+0x14>)
    1a06:	4798      	blx	r3
	wdt_init(&WATCHDOG, WDT);
    1a08:	4903      	ldr	r1, [pc, #12]	; (1a18 <WATCHDOG_init+0x18>)
    1a0a:	4804      	ldr	r0, [pc, #16]	; (1a1c <WATCHDOG_init+0x1c>)
    1a0c:	4b04      	ldr	r3, [pc, #16]	; (1a20 <WATCHDOG_init+0x20>)
    1a0e:	4798      	blx	r3
}
    1a10:	bf00      	nop
    1a12:	bd80      	pop	{r7, pc}
    1a14:	000019e9 	.word	0x000019e9
    1a18:	40002000 	.word	0x40002000
    1a1c:	20000dac 	.word	0x20000dac
    1a20:	000011e9 	.word	0x000011e9

00001a24 <CAN_CCU_PORT_init>:

void CAN_CCU_PORT_init(void)
{
    1a24:	b580      	push	{r7, lr}
    1a26:	af00      	add	r7, sp, #0

	gpio_set_pin_function(PB13, PINMUX_PB13H_CAN1_RX);
    1a28:	4904      	ldr	r1, [pc, #16]	; (1a3c <CAN_CCU_PORT_init+0x18>)
    1a2a:	202d      	movs	r0, #45	; 0x2d
    1a2c:	4b04      	ldr	r3, [pc, #16]	; (1a40 <CAN_CCU_PORT_init+0x1c>)
    1a2e:	4798      	blx	r3

	gpio_set_pin_function(PB12, PINMUX_PB12H_CAN1_TX);
    1a30:	4904      	ldr	r1, [pc, #16]	; (1a44 <CAN_CCU_PORT_init+0x20>)
    1a32:	202c      	movs	r0, #44	; 0x2c
    1a34:	4b02      	ldr	r3, [pc, #8]	; (1a40 <CAN_CCU_PORT_init+0x1c>)
    1a36:	4798      	blx	r3
}
    1a38:	bf00      	nop
    1a3a:	bd80      	pop	{r7, pc}
    1a3c:	002d0007 	.word	0x002d0007
    1a40:	00001149 	.word	0x00001149
    1a44:	002c0007 	.word	0x002c0007

00001a48 <CAN_CCU_init>:
 * \brief CAN initialization function
 *
 * Enables CAN peripheral, clocks and initializes CAN driver
 */
void CAN_CCU_init(void)
{
    1a48:	b580      	push	{r7, lr}
    1a4a:	af00      	add	r7, sp, #0
	hri_mclk_set_AHBMASK_CAN1_bit(MCLK);
    1a4c:	4807      	ldr	r0, [pc, #28]	; (1a6c <CAN_CCU_init+0x24>)
    1a4e:	4b08      	ldr	r3, [pc, #32]	; (1a70 <CAN_CCU_init+0x28>)
    1a50:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, CAN1_GCLK_ID, CONF_GCLK_CAN1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1a52:	2243      	movs	r2, #67	; 0x43
    1a54:	211c      	movs	r1, #28
    1a56:	4807      	ldr	r0, [pc, #28]	; (1a74 <CAN_CCU_init+0x2c>)
    1a58:	4b07      	ldr	r3, [pc, #28]	; (1a78 <CAN_CCU_init+0x30>)
    1a5a:	4798      	blx	r3
	can_async_init(&CAN_CCU, CAN1);
    1a5c:	4907      	ldr	r1, [pc, #28]	; (1a7c <CAN_CCU_init+0x34>)
    1a5e:	4808      	ldr	r0, [pc, #32]	; (1a80 <CAN_CCU_init+0x38>)
    1a60:	4b08      	ldr	r3, [pc, #32]	; (1a84 <CAN_CCU_init+0x3c>)
    1a62:	4798      	blx	r3
	CAN_CCU_PORT_init();
    1a64:	4b08      	ldr	r3, [pc, #32]	; (1a88 <CAN_CCU_init+0x40>)
    1a66:	4798      	blx	r3
}
    1a68:	bf00      	nop
    1a6a:	bd80      	pop	{r7, pc}
    1a6c:	40000800 	.word	0x40000800
    1a70:	000009fb 	.word	0x000009fb
    1a74:	40001c00 	.word	0x40001c00
    1a78:	00000995 	.word	0x00000995
    1a7c:	42000400 	.word	0x42000400
    1a80:	20000cec 	.word	0x20000cec
    1a84:	00001ca9 	.word	0x00001ca9
    1a88:	00001a25 	.word	0x00001a25

00001a8c <system_init>:

void system_init(void)
{
    1a8c:	b580      	push	{r7, lr}
    1a8e:	af00      	add	r7, sp, #0
	init_mcu();
    1a90:	4b53      	ldr	r3, [pc, #332]	; (1be0 <system_init+0x154>)
    1a92:	4798      	blx	r3

	// GPIO on PB07

	// Set pin direction to input
	gpio_set_pin_direction(INT_LTC2983, GPIO_DIRECTION_IN);
    1a94:	2101      	movs	r1, #1
    1a96:	2027      	movs	r0, #39	; 0x27
    1a98:	4b52      	ldr	r3, [pc, #328]	; (1be4 <system_init+0x158>)
    1a9a:	4798      	blx	r3

	gpio_set_pin_pull_mode(INT_LTC2983,
    1a9c:	2102      	movs	r1, #2
    1a9e:	2027      	movs	r0, #39	; 0x27
    1aa0:	4b51      	ldr	r3, [pc, #324]	; (1be8 <system_init+0x15c>)
    1aa2:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(INT_LTC2983, GPIO_PIN_FUNCTION_OFF);
    1aa4:	f04f 31ff 	mov.w	r1, #4294967295
    1aa8:	2027      	movs	r0, #39	; 0x27
    1aaa:	4b50      	ldr	r3, [pc, #320]	; (1bec <system_init+0x160>)
    1aac:	4798      	blx	r3

	// GPIO on PB29

	gpio_set_pin_level(CS_SPI_LTC,
    1aae:	2101      	movs	r1, #1
    1ab0:	203d      	movs	r0, #61	; 0x3d
    1ab2:	4b4f      	ldr	r3, [pc, #316]	; (1bf0 <system_init+0x164>)
    1ab4:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_SPI_LTC, GPIO_DIRECTION_OUT);
    1ab6:	2102      	movs	r1, #2
    1ab8:	203d      	movs	r0, #61	; 0x3d
    1aba:	4b4a      	ldr	r3, [pc, #296]	; (1be4 <system_init+0x158>)
    1abc:	4798      	blx	r3

	gpio_set_pin_function(CS_SPI_LTC, GPIO_PIN_FUNCTION_OFF);
    1abe:	f04f 31ff 	mov.w	r1, #4294967295
    1ac2:	203d      	movs	r0, #61	; 0x3d
    1ac4:	4b49      	ldr	r3, [pc, #292]	; (1bec <system_init+0x160>)
    1ac6:	4798      	blx	r3

	// GPIO on PB31

	// Set pin direction to input
	gpio_set_pin_direction(SW0, GPIO_DIRECTION_IN);
    1ac8:	2101      	movs	r1, #1
    1aca:	203f      	movs	r0, #63	; 0x3f
    1acc:	4b45      	ldr	r3, [pc, #276]	; (1be4 <system_init+0x158>)
    1ace:	4798      	blx	r3

	gpio_set_pin_pull_mode(SW0,
    1ad0:	2101      	movs	r1, #1
    1ad2:	203f      	movs	r0, #63	; 0x3f
    1ad4:	4b44      	ldr	r3, [pc, #272]	; (1be8 <system_init+0x15c>)
    1ad6:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_UP);

	gpio_set_pin_function(SW0, GPIO_PIN_FUNCTION_OFF);
    1ad8:	f04f 31ff 	mov.w	r1, #4294967295
    1adc:	203f      	movs	r0, #63	; 0x3f
    1ade:	4b43      	ldr	r3, [pc, #268]	; (1bec <system_init+0x160>)
    1ae0:	4798      	blx	r3

	// GPIO on PC00

	// Set pin direction to input
	gpio_set_pin_direction(VBUS_DETECTED, GPIO_DIRECTION_IN);
    1ae2:	2101      	movs	r1, #1
    1ae4:	2040      	movs	r0, #64	; 0x40
    1ae6:	4b3f      	ldr	r3, [pc, #252]	; (1be4 <system_init+0x158>)
    1ae8:	4798      	blx	r3

	gpio_set_pin_pull_mode(VBUS_DETECTED,
    1aea:	2102      	movs	r1, #2
    1aec:	2040      	movs	r0, #64	; 0x40
    1aee:	4b3e      	ldr	r3, [pc, #248]	; (1be8 <system_init+0x15c>)
    1af0:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(VBUS_DETECTED, GPIO_PIN_FUNCTION_OFF);
    1af2:	f04f 31ff 	mov.w	r1, #4294967295
    1af6:	2040      	movs	r0, #64	; 0x40
    1af8:	4b3c      	ldr	r3, [pc, #240]	; (1bec <system_init+0x160>)
    1afa:	4798      	blx	r3

	// GPIO on PC05

	gpio_set_pin_level(CS_FLASH,
    1afc:	2101      	movs	r1, #1
    1afe:	2045      	movs	r0, #69	; 0x45
    1b00:	4b3b      	ldr	r3, [pc, #236]	; (1bf0 <system_init+0x164>)
    1b02:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_FLASH, GPIO_DIRECTION_OUT);
    1b04:	2102      	movs	r1, #2
    1b06:	2045      	movs	r0, #69	; 0x45
    1b08:	4b36      	ldr	r3, [pc, #216]	; (1be4 <system_init+0x158>)
    1b0a:	4798      	blx	r3

	gpio_set_pin_function(CS_FLASH, GPIO_PIN_FUNCTION_OFF);
    1b0c:	f04f 31ff 	mov.w	r1, #4294967295
    1b10:	2045      	movs	r0, #69	; 0x45
    1b12:	4b36      	ldr	r3, [pc, #216]	; (1bec <system_init+0x160>)
    1b14:	4798      	blx	r3

	// GPIO on PC07

	gpio_set_pin_level(CS_FRAM,
    1b16:	2101      	movs	r1, #1
    1b18:	2047      	movs	r0, #71	; 0x47
    1b1a:	4b35      	ldr	r3, [pc, #212]	; (1bf0 <system_init+0x164>)
    1b1c:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_FRAM, GPIO_DIRECTION_OUT);
    1b1e:	2102      	movs	r1, #2
    1b20:	2047      	movs	r0, #71	; 0x47
    1b22:	4b30      	ldr	r3, [pc, #192]	; (1be4 <system_init+0x158>)
    1b24:	4798      	blx	r3

	gpio_set_pin_function(CS_FRAM, GPIO_PIN_FUNCTION_OFF);
    1b26:	f04f 31ff 	mov.w	r1, #4294967295
    1b2a:	2047      	movs	r0, #71	; 0x47
    1b2c:	4b2f      	ldr	r3, [pc, #188]	; (1bec <system_init+0x160>)
    1b2e:	4798      	blx	r3

	// GPIO on PC13

	gpio_set_pin_level(CAN_STDBY,
    1b30:	2100      	movs	r1, #0
    1b32:	204d      	movs	r0, #77	; 0x4d
    1b34:	4b2e      	ldr	r3, [pc, #184]	; (1bf0 <system_init+0x164>)
    1b36:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(CAN_STDBY, GPIO_DIRECTION_OUT);
    1b38:	2102      	movs	r1, #2
    1b3a:	204d      	movs	r0, #77	; 0x4d
    1b3c:	4b29      	ldr	r3, [pc, #164]	; (1be4 <system_init+0x158>)
    1b3e:	4798      	blx	r3

	gpio_set_pin_function(CAN_STDBY, GPIO_PIN_FUNCTION_OFF);
    1b40:	f04f 31ff 	mov.w	r1, #4294967295
    1b44:	204d      	movs	r0, #77	; 0x4d
    1b46:	4b29      	ldr	r3, [pc, #164]	; (1bec <system_init+0x160>)
    1b48:	4798      	blx	r3

	// GPIO on PC14

	gpio_set_pin_level(CS_Holt,
    1b4a:	2101      	movs	r1, #1
    1b4c:	204e      	movs	r0, #78	; 0x4e
    1b4e:	4b28      	ldr	r3, [pc, #160]	; (1bf0 <system_init+0x164>)
    1b50:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_Holt, GPIO_DIRECTION_OUT);
    1b52:	2102      	movs	r1, #2
    1b54:	204e      	movs	r0, #78	; 0x4e
    1b56:	4b23      	ldr	r3, [pc, #140]	; (1be4 <system_init+0x158>)
    1b58:	4798      	blx	r3

	gpio_set_pin_function(CS_Holt, GPIO_PIN_FUNCTION_OFF);
    1b5a:	f04f 31ff 	mov.w	r1, #4294967295
    1b5e:	204e      	movs	r0, #78	; 0x4e
    1b60:	4b22      	ldr	r3, [pc, #136]	; (1bec <system_init+0x160>)
    1b62:	4798      	blx	r3

	// GPIO on PC15

	gpio_set_pin_level(Ethernet_Led,
    1b64:	2100      	movs	r1, #0
    1b66:	204f      	movs	r0, #79	; 0x4f
    1b68:	4b21      	ldr	r3, [pc, #132]	; (1bf0 <system_init+0x164>)
    1b6a:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(Ethernet_Led, GPIO_DIRECTION_OUT);
    1b6c:	2102      	movs	r1, #2
    1b6e:	204f      	movs	r0, #79	; 0x4f
    1b70:	4b1c      	ldr	r3, [pc, #112]	; (1be4 <system_init+0x158>)
    1b72:	4798      	blx	r3

	gpio_set_pin_function(Ethernet_Led, GPIO_PIN_FUNCTION_OFF);
    1b74:	f04f 31ff 	mov.w	r1, #4294967295
    1b78:	204f      	movs	r0, #79	; 0x4f
    1b7a:	4b1c      	ldr	r3, [pc, #112]	; (1bec <system_init+0x160>)
    1b7c:	4798      	blx	r3

	// GPIO on PC18

	gpio_set_pin_level(LED0,
    1b7e:	2100      	movs	r1, #0
    1b80:	2052      	movs	r0, #82	; 0x52
    1b82:	4b1b      	ldr	r3, [pc, #108]	; (1bf0 <system_init+0x164>)
    1b84:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(LED0, GPIO_DIRECTION_OUT);
    1b86:	2102      	movs	r1, #2
    1b88:	2052      	movs	r0, #82	; 0x52
    1b8a:	4b16      	ldr	r3, [pc, #88]	; (1be4 <system_init+0x158>)
    1b8c:	4798      	blx	r3

	gpio_set_pin_function(LED0, GPIO_PIN_FUNCTION_OFF);
    1b8e:	f04f 31ff 	mov.w	r1, #4294967295
    1b92:	2052      	movs	r0, #82	; 0x52
    1b94:	4b15      	ldr	r3, [pc, #84]	; (1bec <system_init+0x160>)
    1b96:	4798      	blx	r3

	CRC_CALC_init();
    1b98:	4b16      	ldr	r3, [pc, #88]	; (1bf4 <system_init+0x168>)
    1b9a:	4798      	blx	r3
	EXTERNAL_IRQ_0_init();
    1b9c:	4b16      	ldr	r3, [pc, #88]	; (1bf8 <system_init+0x16c>)
    1b9e:	4798      	blx	r3

	EVENT_SYSTEM_0_init();
    1ba0:	4b16      	ldr	r3, [pc, #88]	; (1bfc <system_init+0x170>)
    1ba2:	4798      	blx	r3

	QSPI_N25Q256_init();
    1ba4:	4b16      	ldr	r3, [pc, #88]	; (1c00 <system_init+0x174>)
    1ba6:	4798      	blx	r3

	DATETIME_CLOCK_init();
    1ba8:	4b16      	ldr	r3, [pc, #88]	; (1c04 <system_init+0x178>)
    1baa:	4798      	blx	r3

	SPI_HI3593_init();
    1bac:	4b16      	ldr	r3, [pc, #88]	; (1c08 <system_init+0x17c>)
    1bae:	4798      	blx	r3

	SPI_TEMP_init();
    1bb0:	4b16      	ldr	r3, [pc, #88]	; (1c0c <system_init+0x180>)
    1bb2:	4798      	blx	r3

	I2C_EXPANDER_init();
    1bb4:	4b16      	ldr	r3, [pc, #88]	; (1c10 <system_init+0x184>)
    1bb6:	4798      	blx	r3

	SPI_MEMORIES_init();
    1bb8:	4b16      	ldr	r3, [pc, #88]	; (1c14 <system_init+0x188>)
    1bba:	4798      	blx	r3

	TIMER_INTERFACE_init();
    1bbc:	4b16      	ldr	r3, [pc, #88]	; (1c18 <system_init+0x18c>)
    1bbe:	4798      	blx	r3
	TIMER_EVENT_init();
    1bc0:	4b16      	ldr	r3, [pc, #88]	; (1c1c <system_init+0x190>)
    1bc2:	4798      	blx	r3
	TIMER_ARINC_init();
    1bc4:	4b16      	ldr	r3, [pc, #88]	; (1c20 <system_init+0x194>)
    1bc6:	4798      	blx	r3
	TIMER_HVAC_init();
    1bc8:	4b16      	ldr	r3, [pc, #88]	; (1c24 <system_init+0x198>)
    1bca:	4798      	blx	r3
	LIVE_PULSE_init();
    1bcc:	4b16      	ldr	r3, [pc, #88]	; (1c28 <system_init+0x19c>)
    1bce:	4798      	blx	r3

	CDCUSB_init();
    1bd0:	4b16      	ldr	r3, [pc, #88]	; (1c2c <system_init+0x1a0>)
    1bd2:	4798      	blx	r3

	WATCHDOG_init();
    1bd4:	4b16      	ldr	r3, [pc, #88]	; (1c30 <system_init+0x1a4>)
    1bd6:	4798      	blx	r3
	CAN_CCU_init();
    1bd8:	4b16      	ldr	r3, [pc, #88]	; (1c34 <system_init+0x1a8>)
    1bda:	4798      	blx	r3
}
    1bdc:	bf00      	nop
    1bde:	bd80      	pop	{r7, pc}
    1be0:	000011d9 	.word	0x000011d9
    1be4:	00001169 	.word	0x00001169
    1be8:	00001115 	.word	0x00001115
    1bec:	00001149 	.word	0x00001149
    1bf0:	000011a1 	.word	0x000011a1
    1bf4:	00001239 	.word	0x00001239
    1bf8:	00001265 	.word	0x00001265
    1bfc:	00001309 	.word	0x00001309
    1c00:	00001445 	.word	0x00001445
    1c04:	00001489 	.word	0x00001489
    1c08:	0000154d 	.word	0x0000154d
    1c0c:	00001615 	.word	0x00001615
    1c10:	000016ad 	.word	0x000016ad
    1c14:	00001779 	.word	0x00001779
    1c18:	000017a5 	.word	0x000017a5
    1c1c:	000017ed 	.word	0x000017ed
    1c20:	00001835 	.word	0x00001835
    1c24:	0000187d 	.word	0x0000187d
    1c28:	000018fd 	.word	0x000018fd
    1c2c:	000019c9 	.word	0x000019c9
    1c30:	00001a01 	.word	0x00001a01
    1c34:	00001a49 	.word	0x00001a49

00001c38 <calendar_init>:
}

/** \brief Initialize Calendar
 */
int32_t calendar_init(struct calendar_descriptor *const calendar, const void *hw)
{
    1c38:	b580      	push	{r7, lr}
    1c3a:	b084      	sub	sp, #16
    1c3c:	af00      	add	r7, sp, #0
    1c3e:	6078      	str	r0, [r7, #4]
    1c40:	6039      	str	r1, [r7, #0]
	int32_t ret = 0;
    1c42:	2300      	movs	r3, #0
    1c44:	60fb      	str	r3, [r7, #12]

	/* Sanity check arguments */
	ASSERT(calendar);
    1c46:	687b      	ldr	r3, [r7, #4]
    1c48:	2b00      	cmp	r3, #0
    1c4a:	bf14      	ite	ne
    1c4c:	2301      	movne	r3, #1
    1c4e:	2300      	moveq	r3, #0
    1c50:	b2db      	uxtb	r3, r3
    1c52:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
    1c56:	4911      	ldr	r1, [pc, #68]	; (1c9c <calendar_init+0x64>)
    1c58:	4618      	mov	r0, r3
    1c5a:	4b11      	ldr	r3, [pc, #68]	; (1ca0 <calendar_init+0x68>)
    1c5c:	4798      	blx	r3

	if (calendar->device.hw == hw) {
    1c5e:	687b      	ldr	r3, [r7, #4]
    1c60:	681a      	ldr	r2, [r3, #0]
    1c62:	683b      	ldr	r3, [r7, #0]
    1c64:	429a      	cmp	r2, r3
    1c66:	d101      	bne.n	1c6c <calendar_init+0x34>
		/* Already initialized with current configuration */
		return ERR_NONE;
    1c68:	2300      	movs	r3, #0
    1c6a:	e013      	b.n	1c94 <calendar_init+0x5c>
	} else if (calendar->device.hw != NULL) {
    1c6c:	687b      	ldr	r3, [r7, #4]
    1c6e:	681b      	ldr	r3, [r3, #0]
    1c70:	2b00      	cmp	r3, #0
    1c72:	d002      	beq.n	1c7a <calendar_init+0x42>
		/* Initialized with another configuration */
		return ERR_ALREADY_INITIALIZED;
    1c74:	f06f 0311 	mvn.w	r3, #17
    1c78:	e00c      	b.n	1c94 <calendar_init+0x5c>
	}
	calendar->device.hw = (void *)hw;
    1c7a:	687b      	ldr	r3, [r7, #4]
    1c7c:	683a      	ldr	r2, [r7, #0]
    1c7e:	601a      	str	r2, [r3, #0]
	ret                 = _calendar_init(&calendar->device);
    1c80:	687b      	ldr	r3, [r7, #4]
    1c82:	4618      	mov	r0, r3
    1c84:	4b07      	ldr	r3, [pc, #28]	; (1ca4 <calendar_init+0x6c>)
    1c86:	4798      	blx	r3
    1c88:	60f8      	str	r0, [r7, #12]
	calendar->base_year = DEFAULT_BASE_YEAR;
    1c8a:	687b      	ldr	r3, [r7, #4]
    1c8c:	f240 72b2 	movw	r2, #1970	; 0x7b2
    1c90:	619a      	str	r2, [r3, #24]

	return ret;
    1c92:	68fb      	ldr	r3, [r7, #12]
}
    1c94:	4618      	mov	r0, r3
    1c96:	3710      	adds	r7, #16
    1c98:	46bd      	mov	sp, r7
    1c9a:	bd80      	pop	{r7, pc}
    1c9c:	0000cb90 	.word	0x0000cb90
    1ca0:	00003481 	.word	0x00003481
    1ca4:	000055ad 	.word	0x000055ad

00001ca8 <can_async_init>:

/**
 * \brief Initialize CAN.
 */
int32_t can_async_init(struct can_async_descriptor *const descr, void *const hw)
{
    1ca8:	b580      	push	{r7, lr}
    1caa:	b084      	sub	sp, #16
    1cac:	af00      	add	r7, sp, #0
    1cae:	6078      	str	r0, [r7, #4]
    1cb0:	6039      	str	r1, [r7, #0]
	int32_t rc;

	ASSERT(descr && hw);
    1cb2:	687b      	ldr	r3, [r7, #4]
    1cb4:	2b00      	cmp	r3, #0
    1cb6:	d004      	beq.n	1cc2 <can_async_init+0x1a>
    1cb8:	683b      	ldr	r3, [r7, #0]
    1cba:	2b00      	cmp	r3, #0
    1cbc:	d001      	beq.n	1cc2 <can_async_init+0x1a>
    1cbe:	2301      	movs	r3, #1
    1cc0:	e000      	b.n	1cc4 <can_async_init+0x1c>
    1cc2:	2300      	movs	r3, #0
    1cc4:	f003 0301 	and.w	r3, r3, #1
    1cc8:	b2db      	uxtb	r3, r3
    1cca:	2241      	movs	r2, #65	; 0x41
    1ccc:	490e      	ldr	r1, [pc, #56]	; (1d08 <can_async_init+0x60>)
    1cce:	4618      	mov	r0, r3
    1cd0:	4b0e      	ldr	r3, [pc, #56]	; (1d0c <can_async_init+0x64>)
    1cd2:	4798      	blx	r3

	rc = _can_async_init(&descr->dev, hw);
    1cd4:	687b      	ldr	r3, [r7, #4]
    1cd6:	6839      	ldr	r1, [r7, #0]
    1cd8:	4618      	mov	r0, r3
    1cda:	4b0d      	ldr	r3, [pc, #52]	; (1d10 <can_async_init+0x68>)
    1cdc:	4798      	blx	r3
    1cde:	60f8      	str	r0, [r7, #12]
	if (rc) {
    1ce0:	68fb      	ldr	r3, [r7, #12]
    1ce2:	2b00      	cmp	r3, #0
    1ce4:	d001      	beq.n	1cea <can_async_init+0x42>
		return rc;
    1ce6:	68fb      	ldr	r3, [r7, #12]
    1ce8:	e009      	b.n	1cfe <can_async_init+0x56>
	}
	descr->dev.cb.tx_done     = can_tx_done;
    1cea:	687b      	ldr	r3, [r7, #4]
    1cec:	4a09      	ldr	r2, [pc, #36]	; (1d14 <can_async_init+0x6c>)
    1cee:	605a      	str	r2, [r3, #4]
	descr->dev.cb.rx_done     = can_rx_done;
    1cf0:	687b      	ldr	r3, [r7, #4]
    1cf2:	4a09      	ldr	r2, [pc, #36]	; (1d18 <can_async_init+0x70>)
    1cf4:	609a      	str	r2, [r3, #8]
	descr->dev.cb.irq_handler = can_irq_handler;
    1cf6:	687b      	ldr	r3, [r7, #4]
    1cf8:	4a08      	ldr	r2, [pc, #32]	; (1d1c <can_async_init+0x74>)
    1cfa:	60da      	str	r2, [r3, #12]

	return ERR_NONE;
    1cfc:	2300      	movs	r3, #0
}
    1cfe:	4618      	mov	r0, r3
    1d00:	3710      	adds	r7, #16
    1d02:	46bd      	mov	sp, r7
    1d04:	bd80      	pop	{r7, pc}
    1d06:	bf00      	nop
    1d08:	0000cbac 	.word	0x0000cbac
    1d0c:	00003481 	.word	0x00003481
    1d10:	00003975 	.word	0x00003975
    1d14:	00001d21 	.word	0x00001d21
    1d18:	00001d45 	.word	0x00001d45
    1d1c:	00001d69 	.word	0x00001d69

00001d20 <can_tx_done>:

/**
 * \internal Callback of CAN Message Write finished
 */
static void can_tx_done(struct _can_async_device *dev)
{
    1d20:	b580      	push	{r7, lr}
    1d22:	b084      	sub	sp, #16
    1d24:	af00      	add	r7, sp, #0
    1d26:	6078      	str	r0, [r7, #4]
	struct can_async_descriptor *const descr = CONTAINER_OF(dev, struct can_async_descriptor, dev);
    1d28:	687b      	ldr	r3, [r7, #4]
    1d2a:	60fb      	str	r3, [r7, #12]

	if (descr->cb.tx_done) {
    1d2c:	68fb      	ldr	r3, [r7, #12]
    1d2e:	69db      	ldr	r3, [r3, #28]
    1d30:	2b00      	cmp	r3, #0
    1d32:	d003      	beq.n	1d3c <can_tx_done+0x1c>
		descr->cb.tx_done(descr);
    1d34:	68fb      	ldr	r3, [r7, #12]
    1d36:	69db      	ldr	r3, [r3, #28]
    1d38:	68f8      	ldr	r0, [r7, #12]
    1d3a:	4798      	blx	r3
	}
}
    1d3c:	bf00      	nop
    1d3e:	3710      	adds	r7, #16
    1d40:	46bd      	mov	sp, r7
    1d42:	bd80      	pop	{r7, pc}

00001d44 <can_rx_done>:

/**
 * \internal Callback of CAN Message Read finished
 */
static void can_rx_done(struct _can_async_device *dev)
{
    1d44:	b580      	push	{r7, lr}
    1d46:	b084      	sub	sp, #16
    1d48:	af00      	add	r7, sp, #0
    1d4a:	6078      	str	r0, [r7, #4]
	struct can_async_descriptor *const descr = CONTAINER_OF(dev, struct can_async_descriptor, dev);
    1d4c:	687b      	ldr	r3, [r7, #4]
    1d4e:	60fb      	str	r3, [r7, #12]

	if (descr->cb.rx_done) {
    1d50:	68fb      	ldr	r3, [r7, #12]
    1d52:	6a1b      	ldr	r3, [r3, #32]
    1d54:	2b00      	cmp	r3, #0
    1d56:	d003      	beq.n	1d60 <can_rx_done+0x1c>
		descr->cb.rx_done(descr);
    1d58:	68fb      	ldr	r3, [r7, #12]
    1d5a:	6a1b      	ldr	r3, [r3, #32]
    1d5c:	68f8      	ldr	r0, [r7, #12]
    1d5e:	4798      	blx	r3
	}
}
    1d60:	bf00      	nop
    1d62:	3710      	adds	r7, #16
    1d64:	46bd      	mov	sp, r7
    1d66:	bd80      	pop	{r7, pc}

00001d68 <can_irq_handler>:

/**
 * \internal Callback of CAN Interrupt
 */
static void can_irq_handler(struct _can_async_device *dev, enum can_async_interrupt_type type)
{
    1d68:	b580      	push	{r7, lr}
    1d6a:	b084      	sub	sp, #16
    1d6c:	af00      	add	r7, sp, #0
    1d6e:	6078      	str	r0, [r7, #4]
    1d70:	460b      	mov	r3, r1
    1d72:	70fb      	strb	r3, [r7, #3]
	struct can_async_descriptor *const descr = CONTAINER_OF(dev, struct can_async_descriptor, dev);
    1d74:	687b      	ldr	r3, [r7, #4]
    1d76:	60fb      	str	r3, [r7, #12]

	if (descr->cb.irq_handler) {
    1d78:	68fb      	ldr	r3, [r7, #12]
    1d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    1d7c:	2b00      	cmp	r3, #0
    1d7e:	d005      	beq.n	1d8c <can_irq_handler+0x24>
		descr->cb.irq_handler(descr, type);
    1d80:	68fb      	ldr	r3, [r7, #12]
    1d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    1d84:	78fa      	ldrb	r2, [r7, #3]
    1d86:	4611      	mov	r1, r2
    1d88:	68f8      	ldr	r0, [r7, #12]
    1d8a:	4798      	blx	r3
	}
}
    1d8c:	bf00      	nop
    1d8e:	3710      	adds	r7, #16
    1d90:	46bd      	mov	sp, r7
    1d92:	bd80      	pop	{r7, pc}

00001d94 <crc_sync_init>:

/**
 * \brief Initialize CRC.
 */
int32_t crc_sync_init(struct crc_sync_descriptor *const descr, void *const hw)
{
    1d94:	b580      	push	{r7, lr}
    1d96:	b082      	sub	sp, #8
    1d98:	af00      	add	r7, sp, #0
    1d9a:	6078      	str	r0, [r7, #4]
    1d9c:	6039      	str	r1, [r7, #0]
	ASSERT(descr && hw);
    1d9e:	687b      	ldr	r3, [r7, #4]
    1da0:	2b00      	cmp	r3, #0
    1da2:	d004      	beq.n	1dae <crc_sync_init+0x1a>
    1da4:	683b      	ldr	r3, [r7, #0]
    1da6:	2b00      	cmp	r3, #0
    1da8:	d001      	beq.n	1dae <crc_sync_init+0x1a>
    1daa:	2301      	movs	r3, #1
    1dac:	e000      	b.n	1db0 <crc_sync_init+0x1c>
    1dae:	2300      	movs	r3, #0
    1db0:	f003 0301 	and.w	r3, r3, #1
    1db4:	b2db      	uxtb	r3, r3
    1db6:	222b      	movs	r2, #43	; 0x2b
    1db8:	4906      	ldr	r1, [pc, #24]	; (1dd4 <crc_sync_init+0x40>)
    1dba:	4618      	mov	r0, r3
    1dbc:	4b06      	ldr	r3, [pc, #24]	; (1dd8 <crc_sync_init+0x44>)
    1dbe:	4798      	blx	r3

	return _crc_sync_init(&descr->dev, hw);
    1dc0:	687b      	ldr	r3, [r7, #4]
    1dc2:	6839      	ldr	r1, [r7, #0]
    1dc4:	4618      	mov	r0, r3
    1dc6:	4b05      	ldr	r3, [pc, #20]	; (1ddc <crc_sync_init+0x48>)
    1dc8:	4798      	blx	r3
    1dca:	4603      	mov	r3, r0
}
    1dcc:	4618      	mov	r0, r3
    1dce:	3708      	adds	r7, #8
    1dd0:	46bd      	mov	sp, r7
    1dd2:	bd80      	pop	{r7, pc}
    1dd4:	0000cbc8 	.word	0x0000cbc8
    1dd8:	00003481 	.word	0x00003481
    1ddc:	0000401d 	.word	0x0000401d

00001de0 <delay_us>:

/**
 * \brief Perform delay in us
 */
void delay_us(const uint16_t us)
{
    1de0:	b590      	push	{r4, r7, lr}
    1de2:	b083      	sub	sp, #12
    1de4:	af00      	add	r7, sp, #0
    1de6:	4603      	mov	r3, r0
    1de8:	80fb      	strh	r3, [r7, #6]
	_delay_cycles(hardware, _get_cycles_for_us(us));
    1dea:	4b07      	ldr	r3, [pc, #28]	; (1e08 <delay_us+0x28>)
    1dec:	681c      	ldr	r4, [r3, #0]
    1dee:	88fb      	ldrh	r3, [r7, #6]
    1df0:	4618      	mov	r0, r3
    1df2:	4b06      	ldr	r3, [pc, #24]	; (1e0c <delay_us+0x2c>)
    1df4:	4798      	blx	r3
    1df6:	4603      	mov	r3, r0
    1df8:	4619      	mov	r1, r3
    1dfa:	4620      	mov	r0, r4
    1dfc:	4b04      	ldr	r3, [pc, #16]	; (1e10 <delay_us+0x30>)
    1dfe:	4798      	blx	r3
}
    1e00:	bf00      	nop
    1e02:	370c      	adds	r7, #12
    1e04:	46bd      	mov	sp, r7
    1e06:	bd90      	pop	{r4, r7, pc}
    1e08:	2000060c 	.word	0x2000060c
    1e0c:	00003d71 	.word	0x00003d71
    1e10:	00003f09 	.word	0x00003f09

00001e14 <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
    1e14:	b590      	push	{r4, r7, lr}
    1e16:	b083      	sub	sp, #12
    1e18:	af00      	add	r7, sp, #0
    1e1a:	4603      	mov	r3, r0
    1e1c:	80fb      	strh	r3, [r7, #6]
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
    1e1e:	4b07      	ldr	r3, [pc, #28]	; (1e3c <delay_ms+0x28>)
    1e20:	681c      	ldr	r4, [r3, #0]
    1e22:	88fb      	ldrh	r3, [r7, #6]
    1e24:	4618      	mov	r0, r3
    1e26:	4b06      	ldr	r3, [pc, #24]	; (1e40 <delay_ms+0x2c>)
    1e28:	4798      	blx	r3
    1e2a:	4603      	mov	r3, r0
    1e2c:	4619      	mov	r1, r3
    1e2e:	4620      	mov	r0, r4
    1e30:	4b04      	ldr	r3, [pc, #16]	; (1e44 <delay_ms+0x30>)
    1e32:	4798      	blx	r3
}
    1e34:	bf00      	nop
    1e36:	370c      	adds	r7, #12
    1e38:	46bd      	mov	sp, r7
    1e3a:	bd90      	pop	{r4, r7, pc}
    1e3c:	2000060c 	.word	0x2000060c
    1e40:	00003edd 	.word	0x00003edd
    1e44:	00003f09 	.word	0x00003f09

00001e48 <event_system_init>:

/**
 * \brief Initialize event system.
 */
int32_t event_system_init(void)
{
    1e48:	b580      	push	{r7, lr}
    1e4a:	af00      	add	r7, sp, #0
	return _event_system_init();
    1e4c:	4b02      	ldr	r3, [pc, #8]	; (1e58 <event_system_init+0x10>)
    1e4e:	4798      	blx	r3
    1e50:	4603      	mov	r3, r0
}
    1e52:	4618      	mov	r0, r3
    1e54:	bd80      	pop	{r7, pc}
    1e56:	bf00      	nop
    1e58:	00004651 	.word	0x00004651

00001e5c <ext_irq_init>:

/**
 * \brief Initialize external irq component if any
 */
int32_t ext_irq_init(void)
{
    1e5c:	b580      	push	{r7, lr}
    1e5e:	b082      	sub	sp, #8
    1e60:	af00      	add	r7, sp, #0
	uint16_t i;

	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    1e62:	2300      	movs	r3, #0
    1e64:	80fb      	strh	r3, [r7, #6]
    1e66:	e00e      	b.n	1e86 <ext_irq_init+0x2a>
		ext_irqs[i].pin = 0xFFFFFFFF;
    1e68:	88fb      	ldrh	r3, [r7, #6]
    1e6a:	4a0c      	ldr	r2, [pc, #48]	; (1e9c <ext_irq_init+0x40>)
    1e6c:	00db      	lsls	r3, r3, #3
    1e6e:	4413      	add	r3, r2
    1e70:	f04f 32ff 	mov.w	r2, #4294967295
    1e74:	605a      	str	r2, [r3, #4]
		ext_irqs[i].cb  = NULL;
    1e76:	88fb      	ldrh	r3, [r7, #6]
    1e78:	4a08      	ldr	r2, [pc, #32]	; (1e9c <ext_irq_init+0x40>)
    1e7a:	2100      	movs	r1, #0
    1e7c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    1e80:	88fb      	ldrh	r3, [r7, #6]
    1e82:	3301      	adds	r3, #1
    1e84:	80fb      	strh	r3, [r7, #6]
    1e86:	88fb      	ldrh	r3, [r7, #6]
    1e88:	2b03      	cmp	r3, #3
    1e8a:	d9ed      	bls.n	1e68 <ext_irq_init+0xc>
	}

	return _ext_irq_init(process_ext_irq);
    1e8c:	4804      	ldr	r0, [pc, #16]	; (1ea0 <ext_irq_init+0x44>)
    1e8e:	4b05      	ldr	r3, [pc, #20]	; (1ea4 <ext_irq_init+0x48>)
    1e90:	4798      	blx	r3
    1e92:	4603      	mov	r3, r0
}
    1e94:	4618      	mov	r0, r3
    1e96:	3708      	adds	r7, #8
    1e98:	46bd      	mov	sp, r7
    1e9a:	bd80      	pop	{r7, pc}
    1e9c:	20000610 	.word	0x20000610
    1ea0:	00001ea9 	.word	0x00001ea9
    1ea4:	00004325 	.word	0x00004325

00001ea8 <process_ext_irq>:
 * \brief Interrupt processing routine
 *
 * \param[in] pin The pin which triggered the interrupt
 */
static void process_ext_irq(const uint32_t pin)
{
    1ea8:	b580      	push	{r7, lr}
    1eaa:	b084      	sub	sp, #16
    1eac:	af00      	add	r7, sp, #0
    1eae:	6078      	str	r0, [r7, #4]
	uint8_t lower = 0, middle, upper = EXT_IRQ_AMOUNT;
    1eb0:	2300      	movs	r3, #0
    1eb2:	73fb      	strb	r3, [r7, #15]
    1eb4:	2304      	movs	r3, #4
    1eb6:	73bb      	strb	r3, [r7, #14]

	while (upper >= lower) {
    1eb8:	e02a      	b.n	1f10 <process_ext_irq+0x68>
		middle = (upper + lower) >> 1;
    1eba:	7bba      	ldrb	r2, [r7, #14]
    1ebc:	7bfb      	ldrb	r3, [r7, #15]
    1ebe:	4413      	add	r3, r2
    1ec0:	105b      	asrs	r3, r3, #1
    1ec2:	737b      	strb	r3, [r7, #13]
		if (middle >= EXT_IRQ_AMOUNT) {
    1ec4:	7b7b      	ldrb	r3, [r7, #13]
    1ec6:	2b03      	cmp	r3, #3
    1ec8:	d827      	bhi.n	1f1a <process_ext_irq+0x72>
			return;
		}

		if (ext_irqs[middle].pin == pin) {
    1eca:	7b7b      	ldrb	r3, [r7, #13]
    1ecc:	4a16      	ldr	r2, [pc, #88]	; (1f28 <process_ext_irq+0x80>)
    1ece:	00db      	lsls	r3, r3, #3
    1ed0:	4413      	add	r3, r2
    1ed2:	685a      	ldr	r2, [r3, #4]
    1ed4:	687b      	ldr	r3, [r7, #4]
    1ed6:	429a      	cmp	r2, r3
    1ed8:	d10b      	bne.n	1ef2 <process_ext_irq+0x4a>
			if (ext_irqs[middle].cb) {
    1eda:	7b7b      	ldrb	r3, [r7, #13]
    1edc:	4a12      	ldr	r2, [pc, #72]	; (1f28 <process_ext_irq+0x80>)
    1ede:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    1ee2:	2b00      	cmp	r3, #0
    1ee4:	d01b      	beq.n	1f1e <process_ext_irq+0x76>
				ext_irqs[middle].cb();
    1ee6:	7b7b      	ldrb	r3, [r7, #13]
    1ee8:	4a0f      	ldr	r2, [pc, #60]	; (1f28 <process_ext_irq+0x80>)
    1eea:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    1eee:	4798      	blx	r3
			}
			return;
    1ef0:	e015      	b.n	1f1e <process_ext_irq+0x76>
		}

		if (ext_irqs[middle].pin < pin) {
    1ef2:	7b7b      	ldrb	r3, [r7, #13]
    1ef4:	4a0c      	ldr	r2, [pc, #48]	; (1f28 <process_ext_irq+0x80>)
    1ef6:	00db      	lsls	r3, r3, #3
    1ef8:	4413      	add	r3, r2
    1efa:	685a      	ldr	r2, [r3, #4]
    1efc:	687b      	ldr	r3, [r7, #4]
    1efe:	429a      	cmp	r2, r3
    1f00:	d203      	bcs.n	1f0a <process_ext_irq+0x62>
			lower = middle + 1;
    1f02:	7b7b      	ldrb	r3, [r7, #13]
    1f04:	3301      	adds	r3, #1
    1f06:	73fb      	strb	r3, [r7, #15]
    1f08:	e002      	b.n	1f10 <process_ext_irq+0x68>
		} else {
			upper = middle - 1;
    1f0a:	7b7b      	ldrb	r3, [r7, #13]
    1f0c:	3b01      	subs	r3, #1
    1f0e:	73bb      	strb	r3, [r7, #14]
	while (upper >= lower) {
    1f10:	7bba      	ldrb	r2, [r7, #14]
    1f12:	7bfb      	ldrb	r3, [r7, #15]
    1f14:	429a      	cmp	r2, r3
    1f16:	d2d0      	bcs.n	1eba <process_ext_irq+0x12>
    1f18:	e002      	b.n	1f20 <process_ext_irq+0x78>
			return;
    1f1a:	bf00      	nop
    1f1c:	e000      	b.n	1f20 <process_ext_irq+0x78>
			return;
    1f1e:	bf00      	nop
		}
	}
}
    1f20:	3710      	adds	r7, #16
    1f22:	46bd      	mov	sp, r7
    1f24:	bd80      	pop	{r7, pc}
    1f26:	bf00      	nop
    1f28:	20000610 	.word	0x20000610

00001f2c <i2c_tx_complete>:

/**
 * \brief Callback function for tx complete
 */
static void i2c_tx_complete(struct _i2c_m_async_device *const i2c_dev)
{
    1f2c:	b580      	push	{r7, lr}
    1f2e:	b084      	sub	sp, #16
    1f30:	af00      	add	r7, sp, #0
    1f32:	6078      	str	r0, [r7, #4]
	struct i2c_m_async_desc *i2c = CONTAINER_OF(i2c_dev, struct i2c_m_async_desc, device);
    1f34:	687b      	ldr	r3, [r7, #4]
    1f36:	60fb      	str	r3, [r7, #12]

	if (!(i2c_dev->service.msg.flags & I2C_M_BUSY)) {
    1f38:	687b      	ldr	r3, [r7, #4]
    1f3a:	885b      	ldrh	r3, [r3, #2]
    1f3c:	b29b      	uxth	r3, r3
    1f3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
    1f42:	2b00      	cmp	r3, #0
    1f44:	d107      	bne.n	1f56 <i2c_tx_complete+0x2a>
		if (i2c->i2c_cb.tx_complete) {
    1f46:	68fb      	ldr	r3, [r7, #12]
    1f48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    1f4a:	2b00      	cmp	r3, #0
    1f4c:	d003      	beq.n	1f56 <i2c_tx_complete+0x2a>
			i2c->i2c_cb.tx_complete(i2c);
    1f4e:	68fb      	ldr	r3, [r7, #12]
    1f50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    1f52:	68f8      	ldr	r0, [r7, #12]
    1f54:	4798      	blx	r3
		}
	}
}
    1f56:	bf00      	nop
    1f58:	3710      	adds	r7, #16
    1f5a:	46bd      	mov	sp, r7
    1f5c:	bd80      	pop	{r7, pc}

00001f5e <i2c_rx_complete>:

/**
 * \brief Callback function for rx complete
 */
static void i2c_rx_complete(struct _i2c_m_async_device *const i2c_dev)
{
    1f5e:	b580      	push	{r7, lr}
    1f60:	b084      	sub	sp, #16
    1f62:	af00      	add	r7, sp, #0
    1f64:	6078      	str	r0, [r7, #4]
	struct i2c_m_async_desc *i2c = CONTAINER_OF(i2c_dev, struct i2c_m_async_desc, device);
    1f66:	687b      	ldr	r3, [r7, #4]
    1f68:	60fb      	str	r3, [r7, #12]

	if (!(i2c_dev->service.msg.flags & I2C_M_BUSY)) {
    1f6a:	687b      	ldr	r3, [r7, #4]
    1f6c:	885b      	ldrh	r3, [r3, #2]
    1f6e:	b29b      	uxth	r3, r3
    1f70:	f403 7380 	and.w	r3, r3, #256	; 0x100
    1f74:	2b00      	cmp	r3, #0
    1f76:	d107      	bne.n	1f88 <i2c_rx_complete+0x2a>
		if (i2c->i2c_cb.rx_complete) {
    1f78:	68fb      	ldr	r3, [r7, #12]
    1f7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    1f7c:	2b00      	cmp	r3, #0
    1f7e:	d003      	beq.n	1f88 <i2c_rx_complete+0x2a>
			i2c->i2c_cb.rx_complete(i2c);
    1f80:	68fb      	ldr	r3, [r7, #12]
    1f82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    1f84:	68f8      	ldr	r0, [r7, #12]
    1f86:	4798      	blx	r3
		}
	}
}
    1f88:	bf00      	nop
    1f8a:	3710      	adds	r7, #16
    1f8c:	46bd      	mov	sp, r7
    1f8e:	bd80      	pop	{r7, pc}

00001f90 <i2c_error>:

static void i2c_error(struct _i2c_m_async_device *const i2c_dev, int32_t error)
{
    1f90:	b580      	push	{r7, lr}
    1f92:	b084      	sub	sp, #16
    1f94:	af00      	add	r7, sp, #0
    1f96:	6078      	str	r0, [r7, #4]
    1f98:	6039      	str	r1, [r7, #0]
	struct i2c_m_async_desc *i2c = CONTAINER_OF(i2c_dev, struct i2c_m_async_desc, device);
    1f9a:	687b      	ldr	r3, [r7, #4]
    1f9c:	60fb      	str	r3, [r7, #12]

	if (!(i2c_dev->service.msg.flags & I2C_M_BUSY)) {
    1f9e:	687b      	ldr	r3, [r7, #4]
    1fa0:	885b      	ldrh	r3, [r3, #2]
    1fa2:	b29b      	uxth	r3, r3
    1fa4:	f403 7380 	and.w	r3, r3, #256	; 0x100
    1fa8:	2b00      	cmp	r3, #0
    1faa:	d108      	bne.n	1fbe <i2c_error+0x2e>
		if (i2c->i2c_cb.error) {
    1fac:	68fb      	ldr	r3, [r7, #12]
    1fae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    1fb0:	2b00      	cmp	r3, #0
    1fb2:	d004      	beq.n	1fbe <i2c_error+0x2e>
			i2c->i2c_cb.error(i2c, error);
    1fb4:	68fb      	ldr	r3, [r7, #12]
    1fb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    1fb8:	6839      	ldr	r1, [r7, #0]
    1fba:	68f8      	ldr	r0, [r7, #12]
    1fbc:	4798      	blx	r3
		}
	}
}
    1fbe:	bf00      	nop
    1fc0:	3710      	adds	r7, #16
    1fc2:	46bd      	mov	sp, r7
    1fc4:	bd80      	pop	{r7, pc}
	...

00001fc8 <i2c_m_async_read>:

/**
 * \brief Async version of I2C I/O read
 */
static int32_t i2c_m_async_read(struct io_descriptor *const io, uint8_t *buf, const uint16_t n)
{
    1fc8:	b580      	push	{r7, lr}
    1fca:	b08a      	sub	sp, #40	; 0x28
    1fcc:	af00      	add	r7, sp, #0
    1fce:	60f8      	str	r0, [r7, #12]
    1fd0:	60b9      	str	r1, [r7, #8]
    1fd2:	4613      	mov	r3, r2
    1fd4:	80fb      	strh	r3, [r7, #6]
	struct i2c_m_async_desc *i2c = CONTAINER_OF(io, struct i2c_m_async_desc, io);
    1fd6:	68fb      	ldr	r3, [r7, #12]
    1fd8:	3b28      	subs	r3, #40	; 0x28
    1fda:	627b      	str	r3, [r7, #36]	; 0x24
	struct _i2c_m_msg        msg;
	int32_t                  ret;

	msg.addr   = i2c->slave_addr;
    1fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1fde:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
    1fe0:	82bb      	strh	r3, [r7, #20]
	msg.len    = n;
    1fe2:	88fb      	ldrh	r3, [r7, #6]
    1fe4:	61bb      	str	r3, [r7, #24]
	msg.flags  = I2C_M_STOP | I2C_M_RD;
    1fe6:	f248 0301 	movw	r3, #32769	; 0x8001
    1fea:	82fb      	strh	r3, [r7, #22]
	msg.buffer = buf;
    1fec:	68bb      	ldr	r3, [r7, #8]
    1fee:	61fb      	str	r3, [r7, #28]

	/* start transfer then return */
	ret = _i2c_m_async_transfer(&i2c->device, &msg);
    1ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1ff2:	f107 0214 	add.w	r2, r7, #20
    1ff6:	4611      	mov	r1, r2
    1ff8:	4618      	mov	r0, r3
    1ffa:	4b06      	ldr	r3, [pc, #24]	; (2014 <i2c_m_async_read+0x4c>)
    1ffc:	4798      	blx	r3
    1ffe:	6238      	str	r0, [r7, #32]

	if (ret != 0) {
    2000:	6a3b      	ldr	r3, [r7, #32]
    2002:	2b00      	cmp	r3, #0
    2004:	d001      	beq.n	200a <i2c_m_async_read+0x42>
		/* error occurred */
		return ret;
    2006:	6a3b      	ldr	r3, [r7, #32]
    2008:	e000      	b.n	200c <i2c_m_async_read+0x44>
	}

	return (int32_t)n;
    200a:	88fb      	ldrh	r3, [r7, #6]
}
    200c:	4618      	mov	r0, r3
    200e:	3728      	adds	r7, #40	; 0x28
    2010:	46bd      	mov	sp, r7
    2012:	bd80      	pop	{r7, pc}
    2014:	0000646d 	.word	0x0000646d

00002018 <i2c_m_async_write>:

/**
 * \brief Async version of I2C I/O write
 */
static int32_t i2c_m_async_write(struct io_descriptor *const io, const uint8_t *buf, const uint16_t n)
{
    2018:	b580      	push	{r7, lr}
    201a:	b08a      	sub	sp, #40	; 0x28
    201c:	af00      	add	r7, sp, #0
    201e:	60f8      	str	r0, [r7, #12]
    2020:	60b9      	str	r1, [r7, #8]
    2022:	4613      	mov	r3, r2
    2024:	80fb      	strh	r3, [r7, #6]
	struct i2c_m_async_desc *i2c = CONTAINER_OF(io, struct i2c_m_async_desc, io);
    2026:	68fb      	ldr	r3, [r7, #12]
    2028:	3b28      	subs	r3, #40	; 0x28
    202a:	627b      	str	r3, [r7, #36]	; 0x24
	struct _i2c_m_msg        msg;
	int32_t                  ret;

	msg.addr   = i2c->slave_addr;
    202c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    202e:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
    2030:	82bb      	strh	r3, [r7, #20]
	msg.len    = n;
    2032:	88fb      	ldrh	r3, [r7, #6]
    2034:	61bb      	str	r3, [r7, #24]
	msg.flags  = I2C_M_STOP;
    2036:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    203a:	82fb      	strh	r3, [r7, #22]
	msg.buffer = (uint8_t *)buf;
    203c:	68bb      	ldr	r3, [r7, #8]
    203e:	61fb      	str	r3, [r7, #28]

	/* start transfer then return */
	ret = _i2c_m_async_transfer(&i2c->device, &msg);
    2040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2042:	f107 0214 	add.w	r2, r7, #20
    2046:	4611      	mov	r1, r2
    2048:	4618      	mov	r0, r3
    204a:	4b06      	ldr	r3, [pc, #24]	; (2064 <i2c_m_async_write+0x4c>)
    204c:	4798      	blx	r3
    204e:	6238      	str	r0, [r7, #32]

	if (ret != 0) {
    2050:	6a3b      	ldr	r3, [r7, #32]
    2052:	2b00      	cmp	r3, #0
    2054:	d001      	beq.n	205a <i2c_m_async_write+0x42>
		/* error occurred */
		return ret;
    2056:	6a3b      	ldr	r3, [r7, #32]
    2058:	e000      	b.n	205c <i2c_m_async_write+0x44>
	}

	return (int32_t)n;
    205a:	88fb      	ldrh	r3, [r7, #6]
}
    205c:	4618      	mov	r0, r3
    205e:	3728      	adds	r7, #40	; 0x28
    2060:	46bd      	mov	sp, r7
    2062:	bd80      	pop	{r7, pc}
    2064:	0000646d 	.word	0x0000646d

00002068 <i2c_m_async_init>:

/**
 * \brief Async version of i2c initialize
 */
int32_t i2c_m_async_init(struct i2c_m_async_desc *const i2c, void *const hw)
{
    2068:	b580      	push	{r7, lr}
    206a:	b084      	sub	sp, #16
    206c:	af00      	add	r7, sp, #0
    206e:	6078      	str	r0, [r7, #4]
    2070:	6039      	str	r1, [r7, #0]
	int32_t init_status;
	ASSERT(i2c);
    2072:	687b      	ldr	r3, [r7, #4]
    2074:	2b00      	cmp	r3, #0
    2076:	bf14      	ite	ne
    2078:	2301      	movne	r3, #1
    207a:	2300      	moveq	r3, #0
    207c:	b2db      	uxtb	r3, r3
    207e:	2289      	movs	r2, #137	; 0x89
    2080:	4915      	ldr	r1, [pc, #84]	; (20d8 <i2c_m_async_init+0x70>)
    2082:	4618      	mov	r0, r3
    2084:	4b15      	ldr	r3, [pc, #84]	; (20dc <i2c_m_async_init+0x74>)
    2086:	4798      	blx	r3

	init_status = _i2c_m_async_init(&i2c->device, hw);
    2088:	687b      	ldr	r3, [r7, #4]
    208a:	6839      	ldr	r1, [r7, #0]
    208c:	4618      	mov	r0, r3
    208e:	4b14      	ldr	r3, [pc, #80]	; (20e0 <i2c_m_async_init+0x78>)
    2090:	4798      	blx	r3
    2092:	60f8      	str	r0, [r7, #12]
	if (init_status) {
    2094:	68fb      	ldr	r3, [r7, #12]
    2096:	2b00      	cmp	r3, #0
    2098:	d001      	beq.n	209e <i2c_m_async_init+0x36>
		return init_status;
    209a:	68fb      	ldr	r3, [r7, #12]
    209c:	e018      	b.n	20d0 <i2c_m_async_init+0x68>
	}
	/* Init I/O */
	i2c->io.read  = i2c_m_async_read;
    209e:	687b      	ldr	r3, [r7, #4]
    20a0:	4a10      	ldr	r2, [pc, #64]	; (20e4 <i2c_m_async_init+0x7c>)
    20a2:	62da      	str	r2, [r3, #44]	; 0x2c
	i2c->io.write = i2c_m_async_write;
    20a4:	687b      	ldr	r3, [r7, #4]
    20a6:	4a10      	ldr	r2, [pc, #64]	; (20e8 <i2c_m_async_init+0x80>)
    20a8:	629a      	str	r2, [r3, #40]	; 0x28

	/* Init callbacks */
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_TX_COMPLETE, (FUNC_PTR)i2c_tx_complete);
    20aa:	687b      	ldr	r3, [r7, #4]
    20ac:	4a0f      	ldr	r2, [pc, #60]	; (20ec <i2c_m_async_init+0x84>)
    20ae:	2101      	movs	r1, #1
    20b0:	4618      	mov	r0, r3
    20b2:	4b0f      	ldr	r3, [pc, #60]	; (20f0 <i2c_m_async_init+0x88>)
    20b4:	4798      	blx	r3
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_RX_COMPLETE, (FUNC_PTR)i2c_rx_complete);
    20b6:	687b      	ldr	r3, [r7, #4]
    20b8:	4a0e      	ldr	r2, [pc, #56]	; (20f4 <i2c_m_async_init+0x8c>)
    20ba:	2102      	movs	r1, #2
    20bc:	4618      	mov	r0, r3
    20be:	4b0c      	ldr	r3, [pc, #48]	; (20f0 <i2c_m_async_init+0x88>)
    20c0:	4798      	blx	r3
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_ERROR, (FUNC_PTR)i2c_error);
    20c2:	687b      	ldr	r3, [r7, #4]
    20c4:	4a0c      	ldr	r2, [pc, #48]	; (20f8 <i2c_m_async_init+0x90>)
    20c6:	2100      	movs	r1, #0
    20c8:	4618      	mov	r0, r3
    20ca:	4b09      	ldr	r3, [pc, #36]	; (20f0 <i2c_m_async_init+0x88>)
    20cc:	4798      	blx	r3

	return ERR_NONE;
    20ce:	2300      	movs	r3, #0
}
    20d0:	4618      	mov	r0, r3
    20d2:	3710      	adds	r7, #16
    20d4:	46bd      	mov	sp, r7
    20d6:	bd80      	pop	{r7, pc}
    20d8:	0000cbe4 	.word	0x0000cbe4
    20dc:	00003481 	.word	0x00003481
    20e0:	000062bd 	.word	0x000062bd
    20e4:	00001fc9 	.word	0x00001fc9
    20e8:	00002019 	.word	0x00002019
    20ec:	00001f2d 	.word	0x00001f2d
    20f0:	00006541 	.word	0x00006541
    20f4:	00001f5f 	.word	0x00001f5f
    20f8:	00001f91 	.word	0x00001f91

000020fc <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
    20fc:	b580      	push	{r7, lr}
    20fe:	b084      	sub	sp, #16
    2100:	af00      	add	r7, sp, #0
    2102:	60f8      	str	r0, [r7, #12]
    2104:	60b9      	str	r1, [r7, #8]
    2106:	4613      	mov	r3, r2
    2108:	80fb      	strh	r3, [r7, #6]
	ASSERT(io_descr && buf);
    210a:	68fb      	ldr	r3, [r7, #12]
    210c:	2b00      	cmp	r3, #0
    210e:	d004      	beq.n	211a <io_write+0x1e>
    2110:	68bb      	ldr	r3, [r7, #8]
    2112:	2b00      	cmp	r3, #0
    2114:	d001      	beq.n	211a <io_write+0x1e>
    2116:	2301      	movs	r3, #1
    2118:	e000      	b.n	211c <io_write+0x20>
    211a:	2300      	movs	r3, #0
    211c:	f003 0301 	and.w	r3, r3, #1
    2120:	b2db      	uxtb	r3, r3
    2122:	2234      	movs	r2, #52	; 0x34
    2124:	4907      	ldr	r1, [pc, #28]	; (2144 <io_write+0x48>)
    2126:	4618      	mov	r0, r3
    2128:	4b07      	ldr	r3, [pc, #28]	; (2148 <io_write+0x4c>)
    212a:	4798      	blx	r3
	return io_descr->write(io_descr, buf, length);
    212c:	68fb      	ldr	r3, [r7, #12]
    212e:	681b      	ldr	r3, [r3, #0]
    2130:	88fa      	ldrh	r2, [r7, #6]
    2132:	68b9      	ldr	r1, [r7, #8]
    2134:	68f8      	ldr	r0, [r7, #12]
    2136:	4798      	blx	r3
    2138:	4603      	mov	r3, r0
}
    213a:	4618      	mov	r0, r3
    213c:	3710      	adds	r7, #16
    213e:	46bd      	mov	sp, r7
    2140:	bd80      	pop	{r7, pc}
    2142:	bf00      	nop
    2144:	0000cc04 	.word	0x0000cc04
    2148:	00003481 	.word	0x00003481

0000214c <io_read>:

/**
 * \brief I/O read interface
 */
int32_t io_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
    214c:	b580      	push	{r7, lr}
    214e:	b084      	sub	sp, #16
    2150:	af00      	add	r7, sp, #0
    2152:	60f8      	str	r0, [r7, #12]
    2154:	60b9      	str	r1, [r7, #8]
    2156:	4613      	mov	r3, r2
    2158:	80fb      	strh	r3, [r7, #6]
	ASSERT(io_descr && buf);
    215a:	68fb      	ldr	r3, [r7, #12]
    215c:	2b00      	cmp	r3, #0
    215e:	d004      	beq.n	216a <io_read+0x1e>
    2160:	68bb      	ldr	r3, [r7, #8]
    2162:	2b00      	cmp	r3, #0
    2164:	d001      	beq.n	216a <io_read+0x1e>
    2166:	2301      	movs	r3, #1
    2168:	e000      	b.n	216c <io_read+0x20>
    216a:	2300      	movs	r3, #0
    216c:	f003 0301 	and.w	r3, r3, #1
    2170:	b2db      	uxtb	r3, r3
    2172:	223d      	movs	r2, #61	; 0x3d
    2174:	4907      	ldr	r1, [pc, #28]	; (2194 <io_read+0x48>)
    2176:	4618      	mov	r0, r3
    2178:	4b07      	ldr	r3, [pc, #28]	; (2198 <io_read+0x4c>)
    217a:	4798      	blx	r3
	return io_descr->read(io_descr, buf, length);
    217c:	68fb      	ldr	r3, [r7, #12]
    217e:	685b      	ldr	r3, [r3, #4]
    2180:	88fa      	ldrh	r2, [r7, #6]
    2182:	68b9      	ldr	r1, [r7, #8]
    2184:	68f8      	ldr	r0, [r7, #12]
    2186:	4798      	blx	r3
    2188:	4603      	mov	r3, r0
}
    218a:	4618      	mov	r0, r3
    218c:	3710      	adds	r7, #16
    218e:	46bd      	mov	sp, r7
    2190:	bd80      	pop	{r7, pc}
    2192:	bf00      	nop
    2194:	0000cc04 	.word	0x0000cc04
    2198:	00003481 	.word	0x00003481

0000219c <pwm_init>:

/**
 * \brief Initialize pwm
 */
int32_t pwm_init(struct pwm_descriptor *const descr, void *const hw, struct _pwm_hpl_interface *const func)
{
    219c:	b580      	push	{r7, lr}
    219e:	b084      	sub	sp, #16
    21a0:	af00      	add	r7, sp, #0
    21a2:	60f8      	str	r0, [r7, #12]
    21a4:	60b9      	str	r1, [r7, #8]
    21a6:	607a      	str	r2, [r7, #4]
	ASSERT(descr && hw);
    21a8:	68fb      	ldr	r3, [r7, #12]
    21aa:	2b00      	cmp	r3, #0
    21ac:	d004      	beq.n	21b8 <pwm_init+0x1c>
    21ae:	68bb      	ldr	r3, [r7, #8]
    21b0:	2b00      	cmp	r3, #0
    21b2:	d001      	beq.n	21b8 <pwm_init+0x1c>
    21b4:	2301      	movs	r3, #1
    21b6:	e000      	b.n	21ba <pwm_init+0x1e>
    21b8:	2300      	movs	r3, #0
    21ba:	f003 0301 	and.w	r3, r3, #1
    21be:	b2db      	uxtb	r3, r3
    21c0:	2233      	movs	r2, #51	; 0x33
    21c2:	490a      	ldr	r1, [pc, #40]	; (21ec <pwm_init+0x50>)
    21c4:	4618      	mov	r0, r3
    21c6:	4b0a      	ldr	r3, [pc, #40]	; (21f0 <pwm_init+0x54>)
    21c8:	4798      	blx	r3
	_pwm_init(&descr->device, hw);
    21ca:	68fb      	ldr	r3, [r7, #12]
    21cc:	68b9      	ldr	r1, [r7, #8]
    21ce:	4618      	mov	r0, r3
    21d0:	4b08      	ldr	r3, [pc, #32]	; (21f4 <pwm_init+0x58>)
    21d2:	4798      	blx	r3
	descr->device.callback.pwm_period_cb = pwm_period_expired;
    21d4:	68fb      	ldr	r3, [r7, #12]
    21d6:	4a08      	ldr	r2, [pc, #32]	; (21f8 <pwm_init+0x5c>)
    21d8:	601a      	str	r2, [r3, #0]
	descr->device.callback.pwm_error_cb  = pwm_detect_fault;
    21da:	68fb      	ldr	r3, [r7, #12]
    21dc:	4a07      	ldr	r2, [pc, #28]	; (21fc <pwm_init+0x60>)
    21de:	605a      	str	r2, [r3, #4]
	return ERR_NONE;
    21e0:	2300      	movs	r3, #0
}
    21e2:	4618      	mov	r0, r3
    21e4:	3710      	adds	r7, #16
    21e6:	46bd      	mov	sp, r7
    21e8:	bd80      	pop	{r7, pc}
    21ea:	bf00      	nop
    21ec:	0000cc18 	.word	0x0000cc18
    21f0:	00003481 	.word	0x00003481
    21f4:	00007729 	.word	0x00007729
    21f8:	00002201 	.word	0x00002201
    21fc:	00002225 	.word	0x00002225

00002200 <pwm_period_expired>:

/**
 * \internal Process interrupts caused by period experied
 */
static void pwm_period_expired(struct _pwm_device *device)
{
    2200:	b580      	push	{r7, lr}
    2202:	b084      	sub	sp, #16
    2204:	af00      	add	r7, sp, #0
    2206:	6078      	str	r0, [r7, #4]
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);
    2208:	687b      	ldr	r3, [r7, #4]
    220a:	60fb      	str	r3, [r7, #12]

	if (descr->pwm_cb.period) {
    220c:	68fb      	ldr	r3, [r7, #12]
    220e:	695b      	ldr	r3, [r3, #20]
    2210:	2b00      	cmp	r3, #0
    2212:	d003      	beq.n	221c <pwm_period_expired+0x1c>
		descr->pwm_cb.period(descr);
    2214:	68fb      	ldr	r3, [r7, #12]
    2216:	695b      	ldr	r3, [r3, #20]
    2218:	68f8      	ldr	r0, [r7, #12]
    221a:	4798      	blx	r3
	}
}
    221c:	bf00      	nop
    221e:	3710      	adds	r7, #16
    2220:	46bd      	mov	sp, r7
    2222:	bd80      	pop	{r7, pc}

00002224 <pwm_detect_fault>:

/**
 * \internal Process interrupts caused by pwm fault
 */
static void pwm_detect_fault(struct _pwm_device *device)
{
    2224:	b580      	push	{r7, lr}
    2226:	b084      	sub	sp, #16
    2228:	af00      	add	r7, sp, #0
    222a:	6078      	str	r0, [r7, #4]
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);
    222c:	687b      	ldr	r3, [r7, #4]
    222e:	60fb      	str	r3, [r7, #12]

	if (descr->pwm_cb.error) {
    2230:	68fb      	ldr	r3, [r7, #12]
    2232:	699b      	ldr	r3, [r3, #24]
    2234:	2b00      	cmp	r3, #0
    2236:	d003      	beq.n	2240 <pwm_detect_fault+0x1c>
		descr->pwm_cb.error(descr);
    2238:	68fb      	ldr	r3, [r7, #12]
    223a:	699b      	ldr	r3, [r3, #24]
    223c:	68f8      	ldr	r0, [r7, #12]
    223e:	4798      	blx	r3
	}
}
    2240:	bf00      	nop
    2242:	3710      	adds	r7, #16
    2244:	46bd      	mov	sp, r7
    2246:	bd80      	pop	{r7, pc}

00002248 <qspi_sync_init>:
 * \brief Driver version
 */
#define QSPI_SYNC_DRIVER_VERSION 0x00000001u

int32_t qspi_sync_init(struct qspi_sync_descriptor *qspi, void *const hw)
{
    2248:	b580      	push	{r7, lr}
    224a:	b082      	sub	sp, #8
    224c:	af00      	add	r7, sp, #0
    224e:	6078      	str	r0, [r7, #4]
    2250:	6039      	str	r1, [r7, #0]
	ASSERT(qspi && hw);
    2252:	687b      	ldr	r3, [r7, #4]
    2254:	2b00      	cmp	r3, #0
    2256:	d004      	beq.n	2262 <qspi_sync_init+0x1a>
    2258:	683b      	ldr	r3, [r7, #0]
    225a:	2b00      	cmp	r3, #0
    225c:	d001      	beq.n	2262 <qspi_sync_init+0x1a>
    225e:	2301      	movs	r3, #1
    2260:	e000      	b.n	2264 <qspi_sync_init+0x1c>
    2262:	2300      	movs	r3, #0
    2264:	f003 0301 	and.w	r3, r3, #1
    2268:	b2db      	uxtb	r3, r3
    226a:	2231      	movs	r2, #49	; 0x31
    226c:	4906      	ldr	r1, [pc, #24]	; (2288 <qspi_sync_init+0x40>)
    226e:	4618      	mov	r0, r3
    2270:	4b06      	ldr	r3, [pc, #24]	; (228c <qspi_sync_init+0x44>)
    2272:	4798      	blx	r3

	return _qspi_sync_init(&qspi->dev, hw);
    2274:	687b      	ldr	r3, [r7, #4]
    2276:	6839      	ldr	r1, [r7, #0]
    2278:	4618      	mov	r0, r3
    227a:	4b05      	ldr	r3, [pc, #20]	; (2290 <qspi_sync_init+0x48>)
    227c:	4798      	blx	r3
    227e:	4603      	mov	r3, r0
}
    2280:	4618      	mov	r0, r3
    2282:	3708      	adds	r7, #8
    2284:	46bd      	mov	sp, r7
    2286:	bd80      	pop	{r7, pc}
    2288:	0000cc30 	.word	0x0000cc30
    228c:	00003481 	.word	0x00003481
    2290:	000051e9 	.word	0x000051e9

00002294 <qspi_sync_enable>:

	return _qspi_sync_deinit(&qspi->dev);
}

int32_t qspi_sync_enable(struct qspi_sync_descriptor *qspi)
{
    2294:	b580      	push	{r7, lr}
    2296:	b082      	sub	sp, #8
    2298:	af00      	add	r7, sp, #0
    229a:	6078      	str	r0, [r7, #4]
	ASSERT(qspi);
    229c:	687b      	ldr	r3, [r7, #4]
    229e:	2b00      	cmp	r3, #0
    22a0:	bf14      	ite	ne
    22a2:	2301      	movne	r3, #1
    22a4:	2300      	moveq	r3, #0
    22a6:	b2db      	uxtb	r3, r3
    22a8:	223f      	movs	r2, #63	; 0x3f
    22aa:	4906      	ldr	r1, [pc, #24]	; (22c4 <qspi_sync_enable+0x30>)
    22ac:	4618      	mov	r0, r3
    22ae:	4b06      	ldr	r3, [pc, #24]	; (22c8 <qspi_sync_enable+0x34>)
    22b0:	4798      	blx	r3

	return _qspi_sync_enable(&qspi->dev);
    22b2:	687b      	ldr	r3, [r7, #4]
    22b4:	4618      	mov	r0, r3
    22b6:	4b05      	ldr	r3, [pc, #20]	; (22cc <qspi_sync_enable+0x38>)
    22b8:	4798      	blx	r3
    22ba:	4603      	mov	r3, r0
}
    22bc:	4618      	mov	r0, r3
    22be:	3708      	adds	r7, #8
    22c0:	46bd      	mov	sp, r7
    22c2:	bd80      	pop	{r7, pc}
    22c4:	0000cc30 	.word	0x0000cc30
    22c8:	00003481 	.word	0x00003481
    22cc:	0000525d 	.word	0x0000525d

000022d0 <qspi_sync_disable>:

int32_t qspi_sync_disable(struct qspi_sync_descriptor *qspi)
{
    22d0:	b580      	push	{r7, lr}
    22d2:	b082      	sub	sp, #8
    22d4:	af00      	add	r7, sp, #0
    22d6:	6078      	str	r0, [r7, #4]
	ASSERT(qspi);
    22d8:	687b      	ldr	r3, [r7, #4]
    22da:	2b00      	cmp	r3, #0
    22dc:	bf14      	ite	ne
    22de:	2301      	movne	r3, #1
    22e0:	2300      	moveq	r3, #0
    22e2:	b2db      	uxtb	r3, r3
    22e4:	2246      	movs	r2, #70	; 0x46
    22e6:	4906      	ldr	r1, [pc, #24]	; (2300 <qspi_sync_disable+0x30>)
    22e8:	4618      	mov	r0, r3
    22ea:	4b06      	ldr	r3, [pc, #24]	; (2304 <qspi_sync_disable+0x34>)
    22ec:	4798      	blx	r3

	return _qspi_sync_disable(&qspi->dev);
    22ee:	687b      	ldr	r3, [r7, #4]
    22f0:	4618      	mov	r0, r3
    22f2:	4b05      	ldr	r3, [pc, #20]	; (2308 <qspi_sync_disable+0x38>)
    22f4:	4798      	blx	r3
    22f6:	4603      	mov	r3, r0
}
    22f8:	4618      	mov	r0, r3
    22fa:	3708      	adds	r7, #8
    22fc:	46bd      	mov	sp, r7
    22fe:	bd80      	pop	{r7, pc}
    2300:	0000cc30 	.word	0x0000cc30
    2304:	00003481 	.word	0x00003481
    2308:	00005281 	.word	0x00005281

0000230c <qspi_sync_serial_run_command>:

int32_t qspi_sync_serial_run_command(struct qspi_sync_descriptor *qspi, const struct _qspi_command *cmd)
{
    230c:	b580      	push	{r7, lr}
    230e:	b082      	sub	sp, #8
    2310:	af00      	add	r7, sp, #0
    2312:	6078      	str	r0, [r7, #4]
    2314:	6039      	str	r1, [r7, #0]
	ASSERT(qspi && cmd);
    2316:	687b      	ldr	r3, [r7, #4]
    2318:	2b00      	cmp	r3, #0
    231a:	d004      	beq.n	2326 <qspi_sync_serial_run_command+0x1a>
    231c:	683b      	ldr	r3, [r7, #0]
    231e:	2b00      	cmp	r3, #0
    2320:	d001      	beq.n	2326 <qspi_sync_serial_run_command+0x1a>
    2322:	2301      	movs	r3, #1
    2324:	e000      	b.n	2328 <qspi_sync_serial_run_command+0x1c>
    2326:	2300      	movs	r3, #0
    2328:	f003 0301 	and.w	r3, r3, #1
    232c:	b2db      	uxtb	r3, r3
    232e:	224d      	movs	r2, #77	; 0x4d
    2330:	4906      	ldr	r1, [pc, #24]	; (234c <qspi_sync_serial_run_command+0x40>)
    2332:	4618      	mov	r0, r3
    2334:	4b06      	ldr	r3, [pc, #24]	; (2350 <qspi_sync_serial_run_command+0x44>)
    2336:	4798      	blx	r3

	return _qspi_sync_serial_run_command(&qspi->dev, cmd);
    2338:	687b      	ldr	r3, [r7, #4]
    233a:	6839      	ldr	r1, [r7, #0]
    233c:	4618      	mov	r0, r3
    233e:	4b05      	ldr	r3, [pc, #20]	; (2354 <qspi_sync_serial_run_command+0x48>)
    2340:	4798      	blx	r3
    2342:	4603      	mov	r3, r0
}
    2344:	4618      	mov	r0, r3
    2346:	3708      	adds	r7, #8
    2348:	46bd      	mov	sp, r7
    234a:	bd80      	pop	{r7, pc}
    234c:	0000cc30 	.word	0x0000cc30
    2350:	00003481 	.word	0x00003481
    2354:	000053cd 	.word	0x000053cd

00002358 <_spi_dev_tx>:
/**
 *  \brief Callback for TX
 *  \param[in, out] dev Pointer to the SPI device instance.
 */
static void _spi_dev_tx(struct _spi_m_async_dev *dev)
{
    2358:	b580      	push	{r7, lr}
    235a:	b084      	sub	sp, #16
    235c:	af00      	add	r7, sp, #0
    235e:	6078      	str	r0, [r7, #4]
	struct spi_m_async_descriptor *spi = CONTAINER_OF(dev, struct spi_m_async_descriptor, dev);
    2360:	687b      	ldr	r3, [r7, #4]
    2362:	3b04      	subs	r3, #4
    2364:	60fb      	str	r3, [r7, #12]

	if (!(dev->char_size > 1)) {
    2366:	687b      	ldr	r3, [r7, #4]
    2368:	791b      	ldrb	r3, [r3, #4]
    236a:	2b01      	cmp	r3, #1
    236c:	d80e      	bhi.n	238c <_spi_dev_tx+0x34>
		_spi_m_async_write_one(dev, spi->xfer.txbuf[spi->xfercnt++]);
    236e:	68fb      	ldr	r3, [r7, #12]
    2370:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    2372:	68fb      	ldr	r3, [r7, #12]
    2374:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    2376:	1c58      	adds	r0, r3, #1
    2378:	68f9      	ldr	r1, [r7, #12]
    237a:	6448      	str	r0, [r1, #68]	; 0x44
    237c:	4413      	add	r3, r2
    237e:	781b      	ldrb	r3, [r3, #0]
    2380:	b29b      	uxth	r3, r3
    2382:	4619      	mov	r1, r3
    2384:	6878      	ldr	r0, [r7, #4]
    2386:	4b11      	ldr	r3, [pc, #68]	; (23cc <_spi_dev_tx+0x74>)
    2388:	4798      	blx	r3
    238a:	e00d      	b.n	23a8 <_spi_dev_tx+0x50>
	} else {
		_spi_m_async_write_one(dev, ((uint16_t *)spi->xfer.txbuf)[spi->xfercnt++]);
    238c:	68fb      	ldr	r3, [r7, #12]
    238e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    2390:	68fb      	ldr	r3, [r7, #12]
    2392:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    2394:	1c58      	adds	r0, r3, #1
    2396:	68f9      	ldr	r1, [r7, #12]
    2398:	6448      	str	r0, [r1, #68]	; 0x44
    239a:	005b      	lsls	r3, r3, #1
    239c:	4413      	add	r3, r2
    239e:	881b      	ldrh	r3, [r3, #0]
    23a0:	4619      	mov	r1, r3
    23a2:	6878      	ldr	r0, [r7, #4]
    23a4:	4b09      	ldr	r3, [pc, #36]	; (23cc <_spi_dev_tx+0x74>)
    23a6:	4798      	blx	r3
	}

	if (spi->xfercnt == spi->xfer.size) {
    23a8:	68fb      	ldr	r3, [r7, #12]
    23aa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    23ac:	68fb      	ldr	r3, [r7, #12]
    23ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    23b0:	429a      	cmp	r2, r3
    23b2:	d107      	bne.n	23c4 <_spi_dev_tx+0x6c>
		_spi_m_async_enable_tx(dev, false);
    23b4:	2100      	movs	r1, #0
    23b6:	6878      	ldr	r0, [r7, #4]
    23b8:	4b05      	ldr	r3, [pc, #20]	; (23d0 <_spi_dev_tx+0x78>)
    23ba:	4798      	blx	r3
		_spi_m_async_enable_tx_complete(dev, true);
    23bc:	2101      	movs	r1, #1
    23be:	6878      	ldr	r0, [r7, #4]
    23c0:	4b04      	ldr	r3, [pc, #16]	; (23d4 <_spi_dev_tx+0x7c>)
    23c2:	4798      	blx	r3
	}
}
    23c4:	bf00      	nop
    23c6:	3710      	adds	r7, #16
    23c8:	46bd      	mov	sp, r7
    23ca:	bd80      	pop	{r7, pc}
    23cc:	00007039 	.word	0x00007039
    23d0:	00006efd 	.word	0x00006efd
    23d4:	00006fd1 	.word	0x00006fd1

000023d8 <_spi_dev_rx>:
/**
 *  \brief Callback for RX
 *  \param[in, out] dev Pointer to the SPI device instance.
 */
static void _spi_dev_rx(struct _spi_m_async_dev *dev)
{
    23d8:	b590      	push	{r4, r7, lr}
    23da:	b085      	sub	sp, #20
    23dc:	af00      	add	r7, sp, #0
    23de:	6078      	str	r0, [r7, #4]
	struct spi_m_async_descriptor *spi = CONTAINER_OF(dev, struct spi_m_async_descriptor, dev);
    23e0:	687b      	ldr	r3, [r7, #4]
    23e2:	3b04      	subs	r3, #4
    23e4:	60fb      	str	r3, [r7, #12]

	if (spi->xfer.rxbuf) {
    23e6:	68fb      	ldr	r3, [r7, #12]
    23e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    23ea:	2b00      	cmp	r3, #0
    23ec:	d021      	beq.n	2432 <_spi_dev_rx+0x5a>
		if (!(dev->char_size > 1)) {
    23ee:	687b      	ldr	r3, [r7, #4]
    23f0:	791b      	ldrb	r3, [r3, #4]
    23f2:	2b01      	cmp	r3, #1
    23f4:	d80e      	bhi.n	2414 <_spi_dev_rx+0x3c>
			/* 8-bit or less */
			spi->xfer.rxbuf[spi->xfercnt++] = (uint8_t)_spi_m_async_read_one(dev);
    23f6:	68fb      	ldr	r3, [r7, #12]
    23f8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
    23fa:	68fb      	ldr	r3, [r7, #12]
    23fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    23fe:	1c58      	adds	r0, r3, #1
    2400:	68f9      	ldr	r1, [r7, #12]
    2402:	6448      	str	r0, [r1, #68]	; 0x44
    2404:	18d4      	adds	r4, r2, r3
    2406:	6878      	ldr	r0, [r7, #4]
    2408:	4b2e      	ldr	r3, [pc, #184]	; (24c4 <_spi_dev_rx+0xec>)
    240a:	4798      	blx	r3
    240c:	4603      	mov	r3, r0
    240e:	b2db      	uxtb	r3, r3
    2410:	7023      	strb	r3, [r4, #0]
    2412:	e016      	b.n	2442 <_spi_dev_rx+0x6a>
		} else {
			/* 9-bit or more */
			((uint16_t *)spi->xfer.rxbuf)[spi->xfercnt++] = (uint16_t)_spi_m_async_read_one(dev);
    2414:	68fb      	ldr	r3, [r7, #12]
    2416:	6bda      	ldr	r2, [r3, #60]	; 0x3c
    2418:	68fb      	ldr	r3, [r7, #12]
    241a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    241c:	1c58      	adds	r0, r3, #1
    241e:	68f9      	ldr	r1, [r7, #12]
    2420:	6448      	str	r0, [r1, #68]	; 0x44
    2422:	005b      	lsls	r3, r3, #1
    2424:	18d4      	adds	r4, r2, r3
    2426:	6878      	ldr	r0, [r7, #4]
    2428:	4b26      	ldr	r3, [pc, #152]	; (24c4 <_spi_dev_rx+0xec>)
    242a:	4798      	blx	r3
    242c:	4603      	mov	r3, r0
    242e:	8023      	strh	r3, [r4, #0]
    2430:	e007      	b.n	2442 <_spi_dev_rx+0x6a>
		}
	} else {
		/* dummy data read if rxbuf is NULL */
		_spi_m_async_read_one(dev);
    2432:	6878      	ldr	r0, [r7, #4]
    2434:	4b23      	ldr	r3, [pc, #140]	; (24c4 <_spi_dev_rx+0xec>)
    2436:	4798      	blx	r3
		spi->xfercnt++;
    2438:	68fb      	ldr	r3, [r7, #12]
    243a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    243c:	1c5a      	adds	r2, r3, #1
    243e:	68fb      	ldr	r3, [r7, #12]
    2440:	645a      	str	r2, [r3, #68]	; 0x44
	}

	if (spi->xfercnt < spi->xfer.size) {
    2442:	68fb      	ldr	r3, [r7, #12]
    2444:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    2446:	68fb      	ldr	r3, [r7, #12]
    2448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    244a:	429a      	cmp	r2, r3
    244c:	d226      	bcs.n	249c <_spi_dev_rx+0xc4>
		if (spi->xfer.txbuf) {
    244e:	68fb      	ldr	r3, [r7, #12]
    2450:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    2452:	2b00      	cmp	r3, #0
    2454:	d01b      	beq.n	248e <_spi_dev_rx+0xb6>
			if (!(dev->char_size > 1)) {
    2456:	687b      	ldr	r3, [r7, #4]
    2458:	791b      	ldrb	r3, [r3, #4]
    245a:	2b01      	cmp	r3, #1
    245c:	d80b      	bhi.n	2476 <_spi_dev_rx+0x9e>
				_spi_m_async_write_one(dev, spi->xfer.txbuf[spi->xfercnt]);
    245e:	68fb      	ldr	r3, [r7, #12]
    2460:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    2462:	68fb      	ldr	r3, [r7, #12]
    2464:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    2466:	4413      	add	r3, r2
    2468:	781b      	ldrb	r3, [r3, #0]
    246a:	b29b      	uxth	r3, r3
    246c:	4619      	mov	r1, r3
    246e:	6878      	ldr	r0, [r7, #4]
    2470:	4b15      	ldr	r3, [pc, #84]	; (24c8 <_spi_dev_rx+0xf0>)
    2472:	4798      	blx	r3

		if (spi->callbacks.cb_xfer) {
			spi->callbacks.cb_xfer(spi);
		}
	}
}
    2474:	e022      	b.n	24bc <_spi_dev_rx+0xe4>
				_spi_m_async_write_one(dev, ((uint16_t *)spi->xfer.txbuf)[spi->xfercnt]);
    2476:	68fb      	ldr	r3, [r7, #12]
    2478:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    247a:	68fb      	ldr	r3, [r7, #12]
    247c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    247e:	005b      	lsls	r3, r3, #1
    2480:	4413      	add	r3, r2
    2482:	881b      	ldrh	r3, [r3, #0]
    2484:	4619      	mov	r1, r3
    2486:	6878      	ldr	r0, [r7, #4]
    2488:	4b0f      	ldr	r3, [pc, #60]	; (24c8 <_spi_dev_rx+0xf0>)
    248a:	4798      	blx	r3
}
    248c:	e016      	b.n	24bc <_spi_dev_rx+0xe4>
			_spi_m_async_write_one(dev, dev->dummy_byte);
    248e:	687b      	ldr	r3, [r7, #4]
    2490:	88db      	ldrh	r3, [r3, #6]
    2492:	4619      	mov	r1, r3
    2494:	6878      	ldr	r0, [r7, #4]
    2496:	4b0c      	ldr	r3, [pc, #48]	; (24c8 <_spi_dev_rx+0xf0>)
    2498:	4798      	blx	r3
}
    249a:	e00f      	b.n	24bc <_spi_dev_rx+0xe4>
		_spi_m_async_enable_rx(dev, false);
    249c:	2100      	movs	r1, #0
    249e:	6878      	ldr	r0, [r7, #4]
    24a0:	4b0a      	ldr	r3, [pc, #40]	; (24cc <_spi_dev_rx+0xf4>)
    24a2:	4798      	blx	r3
		spi->stat = 0;
    24a4:	68fb      	ldr	r3, [r7, #12]
    24a6:	2200      	movs	r2, #0
    24a8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
		if (spi->callbacks.cb_xfer) {
    24ac:	68fb      	ldr	r3, [r7, #12]
    24ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    24b0:	2b00      	cmp	r3, #0
    24b2:	d003      	beq.n	24bc <_spi_dev_rx+0xe4>
			spi->callbacks.cb_xfer(spi);
    24b4:	68fb      	ldr	r3, [r7, #12]
    24b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    24b8:	68f8      	ldr	r0, [r7, #12]
    24ba:	4798      	blx	r3
}
    24bc:	bf00      	nop
    24be:	3714      	adds	r7, #20
    24c0:	46bd      	mov	sp, r7
    24c2:	bd90      	pop	{r4, r7, pc}
    24c4:	00007091 	.word	0x00007091
    24c8:	00007039 	.word	0x00007039
    24cc:	00006f61 	.word	0x00006f61

000024d0 <_spi_dev_complete>:
/**
 *  \brief Callback for complete
 *  \param[in, out] dev Pointer to the SPI device instance.
 */
static void _spi_dev_complete(struct _spi_m_async_dev *dev)
{
    24d0:	b580      	push	{r7, lr}
    24d2:	b084      	sub	sp, #16
    24d4:	af00      	add	r7, sp, #0
    24d6:	6078      	str	r0, [r7, #4]
	struct spi_m_async_descriptor *spi = CONTAINER_OF(dev, struct spi_m_async_descriptor, dev);
    24d8:	687b      	ldr	r3, [r7, #4]
    24da:	3b04      	subs	r3, #4
    24dc:	60fb      	str	r3, [r7, #12]

	if (spi->xfercnt >= spi->xfer.size) {
    24de:	68fb      	ldr	r3, [r7, #12]
    24e0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    24e2:	68fb      	ldr	r3, [r7, #12]
    24e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    24e6:	429a      	cmp	r2, r3
    24e8:	d30f      	bcc.n	250a <_spi_dev_complete+0x3a>
		_spi_m_async_enable_tx_complete(dev, false);
    24ea:	2100      	movs	r1, #0
    24ec:	6878      	ldr	r0, [r7, #4]
    24ee:	4b09      	ldr	r3, [pc, #36]	; (2514 <_spi_dev_complete+0x44>)
    24f0:	4798      	blx	r3
		spi->stat = 0;
    24f2:	68fb      	ldr	r3, [r7, #12]
    24f4:	2200      	movs	r2, #0
    24f6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

		if (spi->callbacks.cb_xfer) {
    24fa:	68fb      	ldr	r3, [r7, #12]
    24fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    24fe:	2b00      	cmp	r3, #0
    2500:	d003      	beq.n	250a <_spi_dev_complete+0x3a>
			spi->callbacks.cb_xfer(spi);
    2502:	68fb      	ldr	r3, [r7, #12]
    2504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    2506:	68f8      	ldr	r0, [r7, #12]
    2508:	4798      	blx	r3
		}
	}
}
    250a:	bf00      	nop
    250c:	3710      	adds	r7, #16
    250e:	46bd      	mov	sp, r7
    2510:	bd80      	pop	{r7, pc}
    2512:	bf00      	nop
    2514:	00006fd1 	.word	0x00006fd1

00002518 <_spi_dev_error>:
 *  \brief Callback for error
 *  \param[in, out] dev Pointer to the SPI device instance.
 *  \param[in] status Error status.
 */
static void _spi_dev_error(struct _spi_m_async_dev *dev, int32_t status)
{
    2518:	b580      	push	{r7, lr}
    251a:	b084      	sub	sp, #16
    251c:	af00      	add	r7, sp, #0
    251e:	6078      	str	r0, [r7, #4]
    2520:	6039      	str	r1, [r7, #0]
	struct spi_m_async_descriptor *spi = CONTAINER_OF(dev, struct spi_m_async_descriptor, dev);
    2522:	687b      	ldr	r3, [r7, #4]
    2524:	3b04      	subs	r3, #4
    2526:	60fb      	str	r3, [r7, #12]

	_spi_m_async_enable_tx(dev, false);
    2528:	2100      	movs	r1, #0
    252a:	6878      	ldr	r0, [r7, #4]
    252c:	4b0d      	ldr	r3, [pc, #52]	; (2564 <_spi_dev_error+0x4c>)
    252e:	4798      	blx	r3
	_spi_m_async_enable_rx(dev, false);
    2530:	2100      	movs	r1, #0
    2532:	6878      	ldr	r0, [r7, #4]
    2534:	4b0c      	ldr	r3, [pc, #48]	; (2568 <_spi_dev_error+0x50>)
    2536:	4798      	blx	r3
	_spi_m_async_enable_tx_complete(dev, false);
    2538:	2100      	movs	r1, #0
    253a:	6878      	ldr	r0, [r7, #4]
    253c:	4b0b      	ldr	r3, [pc, #44]	; (256c <_spi_dev_error+0x54>)
    253e:	4798      	blx	r3
	spi->stat = 0;
    2540:	68fb      	ldr	r3, [r7, #12]
    2542:	2200      	movs	r2, #0
    2544:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

	/* Invoke complete callback */
	if (spi->callbacks.cb_error) {
    2548:	68fb      	ldr	r3, [r7, #12]
    254a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    254c:	2b00      	cmp	r3, #0
    254e:	d004      	beq.n	255a <_spi_dev_error+0x42>
		spi->callbacks.cb_error(spi, status);
    2550:	68fb      	ldr	r3, [r7, #12]
    2552:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    2554:	6839      	ldr	r1, [r7, #0]
    2556:	68f8      	ldr	r0, [r7, #12]
    2558:	4798      	blx	r3
	}
}
    255a:	bf00      	nop
    255c:	3710      	adds	r7, #16
    255e:	46bd      	mov	sp, r7
    2560:	bd80      	pop	{r7, pc}
    2562:	bf00      	nop
    2564:	00006efd 	.word	0x00006efd
    2568:	00006f61 	.word	0x00006f61
    256c:	00006fd1 	.word	0x00006fd1

00002570 <spi_m_async_init>:
	ASSERT(spi);
	spi->func = (struct _spi_m_async_hpl_interface *)func;
}

int32_t spi_m_async_init(struct spi_m_async_descriptor *spi, void *const hw)
{
    2570:	b580      	push	{r7, lr}
    2572:	b084      	sub	sp, #16
    2574:	af00      	add	r7, sp, #0
    2576:	6078      	str	r0, [r7, #4]
    2578:	6039      	str	r1, [r7, #0]
	int32_t rc = 0;
    257a:	2300      	movs	r3, #0
    257c:	60fb      	str	r3, [r7, #12]
	ASSERT(spi && hw);
    257e:	687b      	ldr	r3, [r7, #4]
    2580:	2b00      	cmp	r3, #0
    2582:	d004      	beq.n	258e <spi_m_async_init+0x1e>
    2584:	683b      	ldr	r3, [r7, #0]
    2586:	2b00      	cmp	r3, #0
    2588:	d001      	beq.n	258e <spi_m_async_init+0x1e>
    258a:	2301      	movs	r3, #1
    258c:	e000      	b.n	2590 <spi_m_async_init+0x20>
    258e:	2300      	movs	r3, #0
    2590:	f003 0301 	and.w	r3, r3, #1
    2594:	b2db      	uxtb	r3, r3
    2596:	22a5      	movs	r2, #165	; 0xa5
    2598:	491c      	ldr	r1, [pc, #112]	; (260c <spi_m_async_init+0x9c>)
    259a:	4618      	mov	r0, r3
    259c:	4b1c      	ldr	r3, [pc, #112]	; (2610 <spi_m_async_init+0xa0>)
    259e:	4798      	blx	r3
	spi->dev.prvt = (void *)hw;
    25a0:	687b      	ldr	r3, [r7, #4]
    25a2:	683a      	ldr	r2, [r7, #0]
    25a4:	605a      	str	r2, [r3, #4]
	rc            = _spi_m_async_init(&spi->dev, hw);
    25a6:	687b      	ldr	r3, [r7, #4]
    25a8:	3304      	adds	r3, #4
    25aa:	6839      	ldr	r1, [r7, #0]
    25ac:	4618      	mov	r0, r3
    25ae:	4b19      	ldr	r3, [pc, #100]	; (2614 <spi_m_async_init+0xa4>)
    25b0:	4798      	blx	r3
    25b2:	60f8      	str	r0, [r7, #12]

	if (rc >= 0) {
    25b4:	68fb      	ldr	r3, [r7, #12]
    25b6:	2b00      	cmp	r3, #0
    25b8:	db23      	blt.n	2602 <spi_m_async_init+0x92>
		_spi_m_async_register_callback(&spi->dev, SPI_DEV_CB_TX, (FUNC_PTR)_spi_dev_tx);
    25ba:	687b      	ldr	r3, [r7, #4]
    25bc:	3304      	adds	r3, #4
    25be:	4a16      	ldr	r2, [pc, #88]	; (2618 <spi_m_async_init+0xa8>)
    25c0:	2100      	movs	r1, #0
    25c2:	4618      	mov	r0, r3
    25c4:	4b15      	ldr	r3, [pc, #84]	; (261c <spi_m_async_init+0xac>)
    25c6:	4798      	blx	r3
		_spi_m_async_register_callback(&spi->dev, SPI_DEV_CB_RX, (FUNC_PTR)_spi_dev_rx);
    25c8:	687b      	ldr	r3, [r7, #4]
    25ca:	3304      	adds	r3, #4
    25cc:	4a14      	ldr	r2, [pc, #80]	; (2620 <spi_m_async_init+0xb0>)
    25ce:	2101      	movs	r1, #1
    25d0:	4618      	mov	r0, r3
    25d2:	4b12      	ldr	r3, [pc, #72]	; (261c <spi_m_async_init+0xac>)
    25d4:	4798      	blx	r3
		_spi_m_async_register_callback(&spi->dev, SPI_DEV_CB_COMPLETE, (FUNC_PTR)_spi_dev_complete);
    25d6:	687b      	ldr	r3, [r7, #4]
    25d8:	3304      	adds	r3, #4
    25da:	4a12      	ldr	r2, [pc, #72]	; (2624 <spi_m_async_init+0xb4>)
    25dc:	2102      	movs	r1, #2
    25de:	4618      	mov	r0, r3
    25e0:	4b0e      	ldr	r3, [pc, #56]	; (261c <spi_m_async_init+0xac>)
    25e2:	4798      	blx	r3
		_spi_m_async_register_callback(&spi->dev, SPI_DEV_CB_ERROR, (FUNC_PTR)_spi_dev_error);
    25e4:	687b      	ldr	r3, [r7, #4]
    25e6:	3304      	adds	r3, #4
    25e8:	4a0f      	ldr	r2, [pc, #60]	; (2628 <spi_m_async_init+0xb8>)
    25ea:	2103      	movs	r1, #3
    25ec:	4618      	mov	r0, r3
    25ee:	4b0b      	ldr	r3, [pc, #44]	; (261c <spi_m_async_init+0xac>)
    25f0:	4798      	blx	r3
	} else {
		return rc;
	}

	spi->io.read  = _spi_m_async_io_read;
    25f2:	687b      	ldr	r3, [r7, #4]
    25f4:	4a0d      	ldr	r2, [pc, #52]	; (262c <spi_m_async_init+0xbc>)
    25f6:	629a      	str	r2, [r3, #40]	; 0x28
	spi->io.write = _spi_m_async_io_write;
    25f8:	687b      	ldr	r3, [r7, #4]
    25fa:	4a0d      	ldr	r2, [pc, #52]	; (2630 <spi_m_async_init+0xc0>)
    25fc:	625a      	str	r2, [r3, #36]	; 0x24
	return ERR_NONE;
    25fe:	2300      	movs	r3, #0
    2600:	e000      	b.n	2604 <spi_m_async_init+0x94>
		return rc;
    2602:	68fb      	ldr	r3, [r7, #12]
}
    2604:	4618      	mov	r0, r3
    2606:	3710      	adds	r7, #16
    2608:	46bd      	mov	sp, r7
    260a:	bd80      	pop	{r7, pc}
    260c:	0000cc4c 	.word	0x0000cc4c
    2610:	00003481 	.word	0x00003481
    2614:	00006b5d 	.word	0x00006b5d
    2618:	00002359 	.word	0x00002359
    261c:	000070e1 	.word	0x000070e1
    2620:	000023d9 	.word	0x000023d9
    2624:	000024d1 	.word	0x000024d1
    2628:	00002519 	.word	0x00002519
    262c:	00002635 	.word	0x00002635
    2630:	000026b5 	.word	0x000026b5

00002634 <_spi_m_async_io_read>:
 *  \return ERR_NONE on success, or an error code on failure.
 *  \retval ERR_NONE Success, transfer started.
 *  \retval ERR_BUSY Busy.
 */
static int32_t _spi_m_async_io_read(struct io_descriptor *io, uint8_t *const buf, const uint16_t length)
{
    2634:	b580      	push	{r7, lr}
    2636:	b086      	sub	sp, #24
    2638:	af00      	add	r7, sp, #0
    263a:	60f8      	str	r0, [r7, #12]
    263c:	60b9      	str	r1, [r7, #8]
    263e:	4613      	mov	r3, r2
    2640:	80fb      	strh	r3, [r7, #6]
	ASSERT(io);
    2642:	68fb      	ldr	r3, [r7, #12]
    2644:	2b00      	cmp	r3, #0
    2646:	bf14      	ite	ne
    2648:	2301      	movne	r3, #1
    264a:	2300      	moveq	r3, #0
    264c:	b2db      	uxtb	r3, r3
    264e:	f240 1205 	movw	r2, #261	; 0x105
    2652:	4914      	ldr	r1, [pc, #80]	; (26a4 <_spi_m_async_io_read+0x70>)
    2654:	4618      	mov	r0, r3
    2656:	4b14      	ldr	r3, [pc, #80]	; (26a8 <_spi_m_async_io_read+0x74>)
    2658:	4798      	blx	r3
	struct spi_m_async_descriptor *spi = CONTAINER_OF(io, struct spi_m_async_descriptor, io);
    265a:	68fb      	ldr	r3, [r7, #12]
    265c:	3b24      	subs	r3, #36	; 0x24
    265e:	617b      	str	r3, [r7, #20]

	spi->xfer.rxbuf = buf;
    2660:	697b      	ldr	r3, [r7, #20]
    2662:	68ba      	ldr	r2, [r7, #8]
    2664:	63da      	str	r2, [r3, #60]	; 0x3c
	spi->xfer.txbuf = NULL;
    2666:	697b      	ldr	r3, [r7, #20]
    2668:	2200      	movs	r2, #0
    266a:	639a      	str	r2, [r3, #56]	; 0x38
	spi->xfer.size  = length;
    266c:	88fa      	ldrh	r2, [r7, #6]
    266e:	697b      	ldr	r3, [r7, #20]
    2670:	641a      	str	r2, [r3, #64]	; 0x40
	spi->xfercnt    = 0;
    2672:	697b      	ldr	r3, [r7, #20]
    2674:	2200      	movs	r2, #0
    2676:	645a      	str	r2, [r3, #68]	; 0x44

	spi->stat = SPI_M_ASYNC_STATUS_BUSY;
    2678:	697b      	ldr	r3, [r7, #20]
    267a:	2210      	movs	r2, #16
    267c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	_spi_m_async_enable_rx(&spi->dev, true);
    2680:	697b      	ldr	r3, [r7, #20]
    2682:	3304      	adds	r3, #4
    2684:	2101      	movs	r1, #1
    2686:	4618      	mov	r0, r3
    2688:	4b08      	ldr	r3, [pc, #32]	; (26ac <_spi_m_async_io_read+0x78>)
    268a:	4798      	blx	r3
	_spi_m_async_write_one(&spi->dev, SPI_DUMMY_CHAR);
    268c:	697b      	ldr	r3, [r7, #20]
    268e:	3304      	adds	r3, #4
    2690:	f240 11ff 	movw	r1, #511	; 0x1ff
    2694:	4618      	mov	r0, r3
    2696:	4b06      	ldr	r3, [pc, #24]	; (26b0 <_spi_m_async_io_read+0x7c>)
    2698:	4798      	blx	r3

	return ERR_NONE;
    269a:	2300      	movs	r3, #0
}
    269c:	4618      	mov	r0, r3
    269e:	3718      	adds	r7, #24
    26a0:	46bd      	mov	sp, r7
    26a2:	bd80      	pop	{r7, pc}
    26a4:	0000cc4c 	.word	0x0000cc4c
    26a8:	00003481 	.word	0x00003481
    26ac:	00006f61 	.word	0x00006f61
    26b0:	00007039 	.word	0x00007039

000026b4 <_spi_m_async_io_write>:
 *  \return ERR_NONE on success, or an error code on failure.
 *  \retval ERR_NONE Success, transfer started.
 *  \retval ERR_BUSY Busy.
 */
static int32_t _spi_m_async_io_write(struct io_descriptor *io, const uint8_t *const buf, const uint16_t length)
{
    26b4:	b580      	push	{r7, lr}
    26b6:	b086      	sub	sp, #24
    26b8:	af00      	add	r7, sp, #0
    26ba:	60f8      	str	r0, [r7, #12]
    26bc:	60b9      	str	r1, [r7, #8]
    26be:	4613      	mov	r3, r2
    26c0:	80fb      	strh	r3, [r7, #6]
	ASSERT(io);
    26c2:	68fb      	ldr	r3, [r7, #12]
    26c4:	2b00      	cmp	r3, #0
    26c6:	bf14      	ite	ne
    26c8:	2301      	movne	r3, #1
    26ca:	2300      	moveq	r3, #0
    26cc:	b2db      	uxtb	r3, r3
    26ce:	f240 1227 	movw	r2, #295	; 0x127
    26d2:	4911      	ldr	r1, [pc, #68]	; (2718 <_spi_m_async_io_write+0x64>)
    26d4:	4618      	mov	r0, r3
    26d6:	4b11      	ldr	r3, [pc, #68]	; (271c <_spi_m_async_io_write+0x68>)
    26d8:	4798      	blx	r3
	struct spi_m_async_descriptor *spi = CONTAINER_OF(io, struct spi_m_async_descriptor, io);
    26da:	68fb      	ldr	r3, [r7, #12]
    26dc:	3b24      	subs	r3, #36	; 0x24
    26de:	617b      	str	r3, [r7, #20]

	spi->xfer.rxbuf = NULL;
    26e0:	697b      	ldr	r3, [r7, #20]
    26e2:	2200      	movs	r2, #0
    26e4:	63da      	str	r2, [r3, #60]	; 0x3c
	spi->xfer.txbuf = (uint8_t *)buf;
    26e6:	697b      	ldr	r3, [r7, #20]
    26e8:	68ba      	ldr	r2, [r7, #8]
    26ea:	639a      	str	r2, [r3, #56]	; 0x38
	spi->xfer.size  = length;
    26ec:	88fa      	ldrh	r2, [r7, #6]
    26ee:	697b      	ldr	r3, [r7, #20]
    26f0:	641a      	str	r2, [r3, #64]	; 0x40
	spi->xfercnt    = 0;
    26f2:	697b      	ldr	r3, [r7, #20]
    26f4:	2200      	movs	r2, #0
    26f6:	645a      	str	r2, [r3, #68]	; 0x44

	spi->stat = SPI_M_ASYNC_STATUS_BUSY;
    26f8:	697b      	ldr	r3, [r7, #20]
    26fa:	2210      	movs	r2, #16
    26fc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	_spi_m_async_enable_tx(&spi->dev, true);
    2700:	697b      	ldr	r3, [r7, #20]
    2702:	3304      	adds	r3, #4
    2704:	2101      	movs	r1, #1
    2706:	4618      	mov	r0, r3
    2708:	4b05      	ldr	r3, [pc, #20]	; (2720 <_spi_m_async_io_write+0x6c>)
    270a:	4798      	blx	r3

	return ERR_NONE;
    270c:	2300      	movs	r3, #0
}
    270e:	4618      	mov	r0, r3
    2710:	3718      	adds	r7, #24
    2712:	46bd      	mov	sp, r7
    2714:	bd80      	pop	{r7, pc}
    2716:	bf00      	nop
    2718:	0000cc4c 	.word	0x0000cc4c
    271c:	00003481 	.word	0x00003481
    2720:	00006efd 	.word	0x00006efd

00002724 <spi_m_sync_init>:
	ASSERT(spi);
	spi->func = (struct _spi_m_sync_hpl_interface *)func;
}

int32_t spi_m_sync_init(struct spi_m_sync_descriptor *spi, void *const hw)
{
    2724:	b580      	push	{r7, lr}
    2726:	b084      	sub	sp, #16
    2728:	af00      	add	r7, sp, #0
    272a:	6078      	str	r0, [r7, #4]
    272c:	6039      	str	r1, [r7, #0]
	int32_t rc = 0;
    272e:	2300      	movs	r3, #0
    2730:	60fb      	str	r3, [r7, #12]
	ASSERT(spi && hw);
    2732:	687b      	ldr	r3, [r7, #4]
    2734:	2b00      	cmp	r3, #0
    2736:	d004      	beq.n	2742 <spi_m_sync_init+0x1e>
    2738:	683b      	ldr	r3, [r7, #0]
    273a:	2b00      	cmp	r3, #0
    273c:	d001      	beq.n	2742 <spi_m_sync_init+0x1e>
    273e:	2301      	movs	r3, #1
    2740:	e000      	b.n	2744 <spi_m_sync_init+0x20>
    2742:	2300      	movs	r3, #0
    2744:	f003 0301 	and.w	r3, r3, #1
    2748:	b2db      	uxtb	r3, r3
    274a:	2240      	movs	r2, #64	; 0x40
    274c:	4910      	ldr	r1, [pc, #64]	; (2790 <spi_m_sync_init+0x6c>)
    274e:	4618      	mov	r0, r3
    2750:	4b10      	ldr	r3, [pc, #64]	; (2794 <spi_m_sync_init+0x70>)
    2752:	4798      	blx	r3
	spi->dev.prvt = (void *)hw;
    2754:	687b      	ldr	r3, [r7, #4]
    2756:	683a      	ldr	r2, [r7, #0]
    2758:	605a      	str	r2, [r3, #4]
	rc            = _spi_m_sync_init(&spi->dev, hw);
    275a:	687b      	ldr	r3, [r7, #4]
    275c:	3304      	adds	r3, #4
    275e:	6839      	ldr	r1, [r7, #0]
    2760:	4618      	mov	r0, r3
    2762:	4b0d      	ldr	r3, [pc, #52]	; (2798 <spi_m_sync_init+0x74>)
    2764:	4798      	blx	r3
    2766:	60f8      	str	r0, [r7, #12]

	if (rc < 0) {
    2768:	68fb      	ldr	r3, [r7, #12]
    276a:	2b00      	cmp	r3, #0
    276c:	da01      	bge.n	2772 <spi_m_sync_init+0x4e>
		return rc;
    276e:	68fb      	ldr	r3, [r7, #12]
    2770:	e00a      	b.n	2788 <spi_m_sync_init+0x64>
	}

	spi->flags    = SPI_DEACTIVATE_NEXT;
    2772:	687b      	ldr	r3, [r7, #4]
    2774:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    2778:	829a      	strh	r2, [r3, #20]
	spi->io.read  = _spi_m_sync_io_read;
    277a:	687b      	ldr	r3, [r7, #4]
    277c:	4a07      	ldr	r2, [pc, #28]	; (279c <spi_m_sync_init+0x78>)
    277e:	611a      	str	r2, [r3, #16]
	spi->io.write = _spi_m_sync_io_write;
    2780:	687b      	ldr	r3, [r7, #4]
    2782:	4a07      	ldr	r2, [pc, #28]	; (27a0 <spi_m_sync_init+0x7c>)
    2784:	60da      	str	r2, [r3, #12]

	return ERR_NONE;
    2786:	2300      	movs	r3, #0
}
    2788:	4618      	mov	r0, r3
    278a:	3710      	adds	r7, #16
    278c:	46bd      	mov	sp, r7
    278e:	bd80      	pop	{r7, pc}
    2790:	0000cc6c 	.word	0x0000cc6c
    2794:	00003481 	.word	0x00003481
    2798:	00006a51 	.word	0x00006a51
    279c:	0000281d 	.word	0x0000281d
    27a0:	00002875 	.word	0x00002875

000027a4 <spi_m_sync_enable>:
	ASSERT(spi);
	_spi_m_sync_deinit(&spi->dev);
}

void spi_m_sync_enable(struct spi_m_sync_descriptor *spi)
{
    27a4:	b580      	push	{r7, lr}
    27a6:	b082      	sub	sp, #8
    27a8:	af00      	add	r7, sp, #0
    27aa:	6078      	str	r0, [r7, #4]
	ASSERT(spi);
    27ac:	687b      	ldr	r3, [r7, #4]
    27ae:	2b00      	cmp	r3, #0
    27b0:	bf14      	ite	ne
    27b2:	2301      	movne	r3, #1
    27b4:	2300      	moveq	r3, #0
    27b6:	b2db      	uxtb	r3, r3
    27b8:	2257      	movs	r2, #87	; 0x57
    27ba:	4906      	ldr	r1, [pc, #24]	; (27d4 <spi_m_sync_enable+0x30>)
    27bc:	4618      	mov	r0, r3
    27be:	4b06      	ldr	r3, [pc, #24]	; (27d8 <spi_m_sync_enable+0x34>)
    27c0:	4798      	blx	r3
	_spi_m_sync_enable(&spi->dev);
    27c2:	687b      	ldr	r3, [r7, #4]
    27c4:	3304      	adds	r3, #4
    27c6:	4618      	mov	r0, r3
    27c8:	4b04      	ldr	r3, [pc, #16]	; (27dc <spi_m_sync_enable+0x38>)
    27ca:	4798      	blx	r3
}
    27cc:	bf00      	nop
    27ce:	3708      	adds	r7, #8
    27d0:	46bd      	mov	sp, r7
    27d2:	bd80      	pop	{r7, pc}
    27d4:	0000cc6c 	.word	0x0000cc6c
    27d8:	00003481 	.word	0x00003481
    27dc:	00006bed 	.word	0x00006bed

000027e0 <spi_m_sync_disable>:

void spi_m_sync_disable(struct spi_m_sync_descriptor *spi)
{
    27e0:	b580      	push	{r7, lr}
    27e2:	b082      	sub	sp, #8
    27e4:	af00      	add	r7, sp, #0
    27e6:	6078      	str	r0, [r7, #4]
	ASSERT(spi);
    27e8:	687b      	ldr	r3, [r7, #4]
    27ea:	2b00      	cmp	r3, #0
    27ec:	bf14      	ite	ne
    27ee:	2301      	movne	r3, #1
    27f0:	2300      	moveq	r3, #0
    27f2:	b2db      	uxtb	r3, r3
    27f4:	225d      	movs	r2, #93	; 0x5d
    27f6:	4906      	ldr	r1, [pc, #24]	; (2810 <spi_m_sync_disable+0x30>)
    27f8:	4618      	mov	r0, r3
    27fa:	4b06      	ldr	r3, [pc, #24]	; (2814 <spi_m_sync_disable+0x34>)
    27fc:	4798      	blx	r3
	_spi_m_sync_disable(&spi->dev);
    27fe:	687b      	ldr	r3, [r7, #4]
    2800:	3304      	adds	r3, #4
    2802:	4618      	mov	r0, r3
    2804:	4b04      	ldr	r3, [pc, #16]	; (2818 <spi_m_sync_disable+0x38>)
    2806:	4798      	blx	r3
}
    2808:	bf00      	nop
    280a:	3708      	adds	r7, #8
    280c:	46bd      	mov	sp, r7
    280e:	bd80      	pop	{r7, pc}
    2810:	0000cc6c 	.word	0x0000cc6c
    2814:	00003481 	.word	0x00003481
    2818:	00006c3d 	.word	0x00006c3d

0000281c <_spi_m_sync_io_read>:
 *  \return Operation status.
 *  \retval size Success.
 *  \retval >=0 Time out, with number of characters read.
 */
static int32_t _spi_m_sync_io_read(struct io_descriptor *io, uint8_t *buf, const uint16_t length)
{
    281c:	b580      	push	{r7, lr}
    281e:	b088      	sub	sp, #32
    2820:	af00      	add	r7, sp, #0
    2822:	60f8      	str	r0, [r7, #12]
    2824:	60b9      	str	r1, [r7, #8]
    2826:	4613      	mov	r3, r2
    2828:	80fb      	strh	r3, [r7, #6]
	ASSERT(io);
    282a:	68fb      	ldr	r3, [r7, #12]
    282c:	2b00      	cmp	r3, #0
    282e:	bf14      	ite	ne
    2830:	2301      	movne	r3, #1
    2832:	2300      	moveq	r3, #0
    2834:	b2db      	uxtb	r3, r3
    2836:	2287      	movs	r2, #135	; 0x87
    2838:	490b      	ldr	r1, [pc, #44]	; (2868 <_spi_m_sync_io_read+0x4c>)
    283a:	4618      	mov	r0, r3
    283c:	4b0b      	ldr	r3, [pc, #44]	; (286c <_spi_m_sync_io_read+0x50>)
    283e:	4798      	blx	r3

	struct spi_m_sync_descriptor *spi = CONTAINER_OF(io, struct spi_m_sync_descriptor, io);
    2840:	68fb      	ldr	r3, [r7, #12]
    2842:	3b0c      	subs	r3, #12
    2844:	61fb      	str	r3, [r7, #28]
	struct spi_xfer               xfer;

	xfer.rxbuf = buf;
    2846:	68bb      	ldr	r3, [r7, #8]
    2848:	617b      	str	r3, [r7, #20]
	xfer.txbuf = 0;
    284a:	2300      	movs	r3, #0
    284c:	613b      	str	r3, [r7, #16]
	xfer.size  = length;
    284e:	88fb      	ldrh	r3, [r7, #6]
    2850:	61bb      	str	r3, [r7, #24]

	return spi_m_sync_transfer(spi, &xfer);
    2852:	f107 0310 	add.w	r3, r7, #16
    2856:	4619      	mov	r1, r3
    2858:	69f8      	ldr	r0, [r7, #28]
    285a:	4b05      	ldr	r3, [pc, #20]	; (2870 <_spi_m_sync_io_read+0x54>)
    285c:	4798      	blx	r3
    285e:	4603      	mov	r3, r0
}
    2860:	4618      	mov	r0, r3
    2862:	3720      	adds	r7, #32
    2864:	46bd      	mov	sp, r7
    2866:	bd80      	pop	{r7, pc}
    2868:	0000cc6c 	.word	0x0000cc6c
    286c:	00003481 	.word	0x00003481
    2870:	000028cd 	.word	0x000028cd

00002874 <_spi_m_sync_io_write>:
 *  \return Operation status.
 *  \retval size Success.
 *  \retval >=0 Timeout, with number of characters transferred.
 */
static int32_t _spi_m_sync_io_write(struct io_descriptor *const io, const uint8_t *const buf, const uint16_t length)
{
    2874:	b580      	push	{r7, lr}
    2876:	b088      	sub	sp, #32
    2878:	af00      	add	r7, sp, #0
    287a:	60f8      	str	r0, [r7, #12]
    287c:	60b9      	str	r1, [r7, #8]
    287e:	4613      	mov	r3, r2
    2880:	80fb      	strh	r3, [r7, #6]
	ASSERT(io);
    2882:	68fb      	ldr	r3, [r7, #12]
    2884:	2b00      	cmp	r3, #0
    2886:	bf14      	ite	ne
    2888:	2301      	movne	r3, #1
    288a:	2300      	moveq	r3, #0
    288c:	b2db      	uxtb	r3, r3
    288e:	22a3      	movs	r2, #163	; 0xa3
    2890:	490b      	ldr	r1, [pc, #44]	; (28c0 <_spi_m_sync_io_write+0x4c>)
    2892:	4618      	mov	r0, r3
    2894:	4b0b      	ldr	r3, [pc, #44]	; (28c4 <_spi_m_sync_io_write+0x50>)
    2896:	4798      	blx	r3

	struct spi_m_sync_descriptor *spi = CONTAINER_OF(io, struct spi_m_sync_descriptor, io);
    2898:	68fb      	ldr	r3, [r7, #12]
    289a:	3b0c      	subs	r3, #12
    289c:	61fb      	str	r3, [r7, #28]
	struct spi_xfer               xfer;

	xfer.rxbuf = 0;
    289e:	2300      	movs	r3, #0
    28a0:	617b      	str	r3, [r7, #20]
	xfer.txbuf = (uint8_t *)buf;
    28a2:	68bb      	ldr	r3, [r7, #8]
    28a4:	613b      	str	r3, [r7, #16]
	xfer.size  = length;
    28a6:	88fb      	ldrh	r3, [r7, #6]
    28a8:	61bb      	str	r3, [r7, #24]

	return spi_m_sync_transfer(spi, &xfer);
    28aa:	f107 0310 	add.w	r3, r7, #16
    28ae:	4619      	mov	r1, r3
    28b0:	69f8      	ldr	r0, [r7, #28]
    28b2:	4b05      	ldr	r3, [pc, #20]	; (28c8 <_spi_m_sync_io_write+0x54>)
    28b4:	4798      	blx	r3
    28b6:	4603      	mov	r3, r0
}
    28b8:	4618      	mov	r0, r3
    28ba:	3720      	adds	r7, #32
    28bc:	46bd      	mov	sp, r7
    28be:	bd80      	pop	{r7, pc}
    28c0:	0000cc6c 	.word	0x0000cc6c
    28c4:	00003481 	.word	0x00003481
    28c8:	000028cd 	.word	0x000028cd

000028cc <spi_m_sync_transfer>:

int32_t spi_m_sync_transfer(struct spi_m_sync_descriptor *spi, const struct spi_xfer *p_xfer)
{
    28cc:	b580      	push	{r7, lr}
    28ce:	b086      	sub	sp, #24
    28d0:	af00      	add	r7, sp, #0
    28d2:	6078      	str	r0, [r7, #4]
    28d4:	6039      	str	r1, [r7, #0]
	struct spi_msg msg;

	ASSERT(spi && p_xfer);
    28d6:	687b      	ldr	r3, [r7, #4]
    28d8:	2b00      	cmp	r3, #0
    28da:	d004      	beq.n	28e6 <spi_m_sync_transfer+0x1a>
    28dc:	683b      	ldr	r3, [r7, #0]
    28de:	2b00      	cmp	r3, #0
    28e0:	d001      	beq.n	28e6 <spi_m_sync_transfer+0x1a>
    28e2:	2301      	movs	r3, #1
    28e4:	e000      	b.n	28e8 <spi_m_sync_transfer+0x1c>
    28e6:	2300      	movs	r3, #0
    28e8:	f003 0301 	and.w	r3, r3, #1
    28ec:	b2db      	uxtb	r3, r3
    28ee:	22b3      	movs	r2, #179	; 0xb3
    28f0:	490c      	ldr	r1, [pc, #48]	; (2924 <spi_m_sync_transfer+0x58>)
    28f2:	4618      	mov	r0, r3
    28f4:	4b0c      	ldr	r3, [pc, #48]	; (2928 <spi_m_sync_transfer+0x5c>)
    28f6:	4798      	blx	r3

	msg.txbuf = p_xfer->txbuf;
    28f8:	683b      	ldr	r3, [r7, #0]
    28fa:	681b      	ldr	r3, [r3, #0]
    28fc:	60fb      	str	r3, [r7, #12]
	msg.rxbuf = p_xfer->rxbuf;
    28fe:	683b      	ldr	r3, [r7, #0]
    2900:	685b      	ldr	r3, [r3, #4]
    2902:	613b      	str	r3, [r7, #16]
	msg.size  = p_xfer->size;
    2904:	683b      	ldr	r3, [r7, #0]
    2906:	689b      	ldr	r3, [r3, #8]
    2908:	617b      	str	r3, [r7, #20]
	return _spi_m_sync_trans(&spi->dev, &msg);
    290a:	687b      	ldr	r3, [r7, #4]
    290c:	3304      	adds	r3, #4
    290e:	f107 020c 	add.w	r2, r7, #12
    2912:	4611      	mov	r1, r2
    2914:	4618      	mov	r0, r3
    2916:	4b05      	ldr	r3, [pc, #20]	; (292c <spi_m_sync_transfer+0x60>)
    2918:	4798      	blx	r3
    291a:	4603      	mov	r3, r0
}
    291c:	4618      	mov	r0, r3
    291e:	3718      	adds	r7, #24
    2920:	46bd      	mov	sp, r7
    2922:	bd80      	pop	{r7, pc}
    2924:	0000cc6c 	.word	0x0000cc6c
    2928:	00003481 	.word	0x00003481
    292c:	00006de1 	.word	0x00006de1

00002930 <spi_m_sync_get_io_descriptor>:

int32_t spi_m_sync_get_io_descriptor(struct spi_m_sync_descriptor *const spi, struct io_descriptor **io)
{
    2930:	b580      	push	{r7, lr}
    2932:	b082      	sub	sp, #8
    2934:	af00      	add	r7, sp, #0
    2936:	6078      	str	r0, [r7, #4]
    2938:	6039      	str	r1, [r7, #0]
	ASSERT(spi && io);
    293a:	687b      	ldr	r3, [r7, #4]
    293c:	2b00      	cmp	r3, #0
    293e:	d004      	beq.n	294a <spi_m_sync_get_io_descriptor+0x1a>
    2940:	683b      	ldr	r3, [r7, #0]
    2942:	2b00      	cmp	r3, #0
    2944:	d001      	beq.n	294a <spi_m_sync_get_io_descriptor+0x1a>
    2946:	2301      	movs	r3, #1
    2948:	e000      	b.n	294c <spi_m_sync_get_io_descriptor+0x1c>
    294a:	2300      	movs	r3, #0
    294c:	f003 0301 	and.w	r3, r3, #1
    2950:	b2db      	uxtb	r3, r3
    2952:	22bd      	movs	r2, #189	; 0xbd
    2954:	4906      	ldr	r1, [pc, #24]	; (2970 <spi_m_sync_get_io_descriptor+0x40>)
    2956:	4618      	mov	r0, r3
    2958:	4b06      	ldr	r3, [pc, #24]	; (2974 <spi_m_sync_get_io_descriptor+0x44>)
    295a:	4798      	blx	r3
	*io = &spi->io;
    295c:	687b      	ldr	r3, [r7, #4]
    295e:	f103 020c 	add.w	r2, r3, #12
    2962:	683b      	ldr	r3, [r7, #0]
    2964:	601a      	str	r2, [r3, #0]
	return 0;
    2966:	2300      	movs	r3, #0
}
    2968:	4618      	mov	r0, r3
    296a:	3708      	adds	r7, #8
    296c:	46bd      	mov	sp, r7
    296e:	bd80      	pop	{r7, pc}
    2970:	0000cc6c 	.word	0x0000cc6c
    2974:	00003481 	.word	0x00003481

00002978 <list_get_head>:
 *
 * \return A pointer to the head of the given list or NULL if the list is
 * empty
 */
static inline void *list_get_head(const struct list_descriptor *const list)
{
    2978:	b480      	push	{r7}
    297a:	b083      	sub	sp, #12
    297c:	af00      	add	r7, sp, #0
    297e:	6078      	str	r0, [r7, #4]
	return (void *)list->head;
    2980:	687b      	ldr	r3, [r7, #4]
    2982:	681b      	ldr	r3, [r3, #0]
}
    2984:	4618      	mov	r0, r3
    2986:	370c      	adds	r7, #12
    2988:	46bd      	mov	sp, r7
    298a:	f85d 7b04 	ldr.w	r7, [sp], #4
    298e:	4770      	bx	lr

00002990 <list_get_next_element>:
 *
 * \return A pointer to the next list element or NULL if there is not next
 * element
 */
static inline void *list_get_next_element(const void *const element)
{
    2990:	b480      	push	{r7}
    2992:	b083      	sub	sp, #12
    2994:	af00      	add	r7, sp, #0
    2996:	6078      	str	r0, [r7, #4]
	return element ? ((struct list_element *)element)->next : NULL;
    2998:	687b      	ldr	r3, [r7, #4]
    299a:	2b00      	cmp	r3, #0
    299c:	d002      	beq.n	29a4 <list_get_next_element+0x14>
    299e:	687b      	ldr	r3, [r7, #4]
    29a0:	681b      	ldr	r3, [r3, #0]
    29a2:	e000      	b.n	29a6 <list_get_next_element+0x16>
    29a4:	2300      	movs	r3, #0
}
    29a6:	4618      	mov	r0, r3
    29a8:	370c      	adds	r7, #12
    29aa:	46bd      	mov	sp, r7
    29ac:	f85d 7b04 	ldr.w	r7, [sp], #4
    29b0:	4770      	bx	lr
	...

000029b4 <timer_init>:

/**
 * \brief Initialize timer
 */
int32_t timer_init(struct timer_descriptor *const descr, void *const hw, struct _timer_hpl_interface *const func)
{
    29b4:	b580      	push	{r7, lr}
    29b6:	b084      	sub	sp, #16
    29b8:	af00      	add	r7, sp, #0
    29ba:	60f8      	str	r0, [r7, #12]
    29bc:	60b9      	str	r1, [r7, #8]
    29be:	607a      	str	r2, [r7, #4]
	ASSERT(descr && hw);
    29c0:	68fb      	ldr	r3, [r7, #12]
    29c2:	2b00      	cmp	r3, #0
    29c4:	d004      	beq.n	29d0 <timer_init+0x1c>
    29c6:	68bb      	ldr	r3, [r7, #8]
    29c8:	2b00      	cmp	r3, #0
    29ca:	d001      	beq.n	29d0 <timer_init+0x1c>
    29cc:	2301      	movs	r3, #1
    29ce:	e000      	b.n	29d2 <timer_init+0x1e>
    29d0:	2300      	movs	r3, #0
    29d2:	f003 0301 	and.w	r3, r3, #1
    29d6:	b2db      	uxtb	r3, r3
    29d8:	223b      	movs	r2, #59	; 0x3b
    29da:	490a      	ldr	r1, [pc, #40]	; (2a04 <timer_init+0x50>)
    29dc:	4618      	mov	r0, r3
    29de:	4b0a      	ldr	r3, [pc, #40]	; (2a08 <timer_init+0x54>)
    29e0:	4798      	blx	r3
	_timer_init(&descr->device, hw);
    29e2:	68fb      	ldr	r3, [r7, #12]
    29e4:	68b9      	ldr	r1, [r7, #8]
    29e6:	4618      	mov	r0, r3
    29e8:	4b08      	ldr	r3, [pc, #32]	; (2a0c <timer_init+0x58>)
    29ea:	4798      	blx	r3
	descr->time                           = 0;
    29ec:	68fb      	ldr	r3, [r7, #12]
    29ee:	2200      	movs	r2, #0
    29f0:	611a      	str	r2, [r3, #16]
	descr->device.timer_cb.period_expired = timer_process_counted;
    29f2:	68fb      	ldr	r3, [r7, #12]
    29f4:	4a06      	ldr	r2, [pc, #24]	; (2a10 <timer_init+0x5c>)
    29f6:	601a      	str	r2, [r3, #0]

	return ERR_NONE;
    29f8:	2300      	movs	r3, #0
}
    29fa:	4618      	mov	r0, r3
    29fc:	3710      	adds	r7, #16
    29fe:	46bd      	mov	sp, r7
    2a00:	bd80      	pop	{r7, pc}
    2a02:	bf00      	nop
    2a04:	0000cc88 	.word	0x0000cc88
    2a08:	00003481 	.word	0x00003481
    2a0c:	00007479 	.word	0x00007479
    2a10:	00002ac5 	.word	0x00002ac5

00002a14 <timer_add_timer_task>:
 * \param[in] head The pointer to the head of timer task list
 * \param[in] task The pointer to task to add
 * \param[in] time Current timer time
 */
static void timer_add_timer_task(struct list_descriptor *list, struct timer_task *const new_task, const uint32_t time)
{
    2a14:	b580      	push	{r7, lr}
    2a16:	b088      	sub	sp, #32
    2a18:	af00      	add	r7, sp, #0
    2a1a:	60f8      	str	r0, [r7, #12]
    2a1c:	60b9      	str	r1, [r7, #8]
    2a1e:	607a      	str	r2, [r7, #4]
	struct timer_task *it, *prev = NULL, *head = (struct timer_task *)list_get_head(list);
    2a20:	2300      	movs	r3, #0
    2a22:	61bb      	str	r3, [r7, #24]
    2a24:	68f8      	ldr	r0, [r7, #12]
    2a26:	4b23      	ldr	r3, [pc, #140]	; (2ab4 <timer_add_timer_task+0xa0>)
    2a28:	4798      	blx	r3
    2a2a:	6138      	str	r0, [r7, #16]

	if (!head) {
    2a2c:	693b      	ldr	r3, [r7, #16]
    2a2e:	2b00      	cmp	r3, #0
    2a30:	d104      	bne.n	2a3c <timer_add_timer_task+0x28>
		list_insert_as_head(list, new_task);
    2a32:	68b9      	ldr	r1, [r7, #8]
    2a34:	68f8      	ldr	r0, [r7, #12]
    2a36:	4b20      	ldr	r3, [pc, #128]	; (2ab8 <timer_add_timer_task+0xa4>)
    2a38:	4798      	blx	r3
		return;
    2a3a:	e037      	b.n	2aac <timer_add_timer_task+0x98>
	}

	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
    2a3c:	693b      	ldr	r3, [r7, #16]
    2a3e:	61fb      	str	r3, [r7, #28]
    2a40:	e022      	b.n	2a88 <timer_add_timer_task+0x74>
		uint32_t time_left;

		if (it->time_label <= time) {
    2a42:	69fb      	ldr	r3, [r7, #28]
    2a44:	685a      	ldr	r2, [r3, #4]
    2a46:	687b      	ldr	r3, [r7, #4]
    2a48:	429a      	cmp	r2, r3
    2a4a:	d808      	bhi.n	2a5e <timer_add_timer_task+0x4a>
			time_left = it->interval - (time - it->time_label);
    2a4c:	69fb      	ldr	r3, [r7, #28]
    2a4e:	689a      	ldr	r2, [r3, #8]
    2a50:	69fb      	ldr	r3, [r7, #28]
    2a52:	6859      	ldr	r1, [r3, #4]
    2a54:	687b      	ldr	r3, [r7, #4]
    2a56:	1acb      	subs	r3, r1, r3
    2a58:	4413      	add	r3, r2
    2a5a:	617b      	str	r3, [r7, #20]
    2a5c:	e009      	b.n	2a72 <timer_add_timer_task+0x5e>
		} else {
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
    2a5e:	69fb      	ldr	r3, [r7, #28]
    2a60:	689a      	ldr	r2, [r3, #8]
    2a62:	69fb      	ldr	r3, [r7, #28]
    2a64:	685b      	ldr	r3, [r3, #4]
    2a66:	441a      	add	r2, r3
    2a68:	687b      	ldr	r3, [r7, #4]
    2a6a:	425b      	negs	r3, r3
    2a6c:	4413      	add	r3, r2
    2a6e:	3301      	adds	r3, #1
    2a70:	617b      	str	r3, [r7, #20]
		}
		if (time_left >= new_task->interval)
    2a72:	68bb      	ldr	r3, [r7, #8]
    2a74:	689a      	ldr	r2, [r3, #8]
    2a76:	697b      	ldr	r3, [r7, #20]
    2a78:	429a      	cmp	r2, r3
    2a7a:	d909      	bls.n	2a90 <timer_add_timer_task+0x7c>
			break;
		prev = it;
    2a7c:	69fb      	ldr	r3, [r7, #28]
    2a7e:	61bb      	str	r3, [r7, #24]
	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
    2a80:	69f8      	ldr	r0, [r7, #28]
    2a82:	4b0e      	ldr	r3, [pc, #56]	; (2abc <timer_add_timer_task+0xa8>)
    2a84:	4798      	blx	r3
    2a86:	61f8      	str	r0, [r7, #28]
    2a88:	69fb      	ldr	r3, [r7, #28]
    2a8a:	2b00      	cmp	r3, #0
    2a8c:	d1d9      	bne.n	2a42 <timer_add_timer_task+0x2e>
    2a8e:	e000      	b.n	2a92 <timer_add_timer_task+0x7e>
			break;
    2a90:	bf00      	nop
	}

	if (it == head) {
    2a92:	69fa      	ldr	r2, [r7, #28]
    2a94:	693b      	ldr	r3, [r7, #16]
    2a96:	429a      	cmp	r2, r3
    2a98:	d104      	bne.n	2aa4 <timer_add_timer_task+0x90>
		list_insert_as_head(list, new_task);
    2a9a:	68b9      	ldr	r1, [r7, #8]
    2a9c:	68f8      	ldr	r0, [r7, #12]
    2a9e:	4b06      	ldr	r3, [pc, #24]	; (2ab8 <timer_add_timer_task+0xa4>)
    2aa0:	4798      	blx	r3
    2aa2:	e003      	b.n	2aac <timer_add_timer_task+0x98>
	} else {
		list_insert_after(prev, new_task);
    2aa4:	68b9      	ldr	r1, [r7, #8]
    2aa6:	69b8      	ldr	r0, [r7, #24]
    2aa8:	4b05      	ldr	r3, [pc, #20]	; (2ac0 <timer_add_timer_task+0xac>)
    2aaa:	4798      	blx	r3
	}
}
    2aac:	3720      	adds	r7, #32
    2aae:	46bd      	mov	sp, r7
    2ab0:	bd80      	pop	{r7, pc}
    2ab2:	bf00      	nop
    2ab4:	00002979 	.word	0x00002979
    2ab8:	000034e1 	.word	0x000034e1
    2abc:	00002991 	.word	0x00002991
    2ac0:	00003539 	.word	0x00003539

00002ac4 <timer_process_counted>:

/**
 * \internal Process interrupts
 */
static void timer_process_counted(struct _timer_device *device)
{
    2ac4:	b580      	push	{r7, lr}
    2ac6:	b086      	sub	sp, #24
    2ac8:	af00      	add	r7, sp, #0
    2aca:	6078      	str	r0, [r7, #4]
	struct timer_descriptor *timer = CONTAINER_OF(device, struct timer_descriptor, device);
    2acc:	687b      	ldr	r3, [r7, #4]
    2ace:	613b      	str	r3, [r7, #16]
	struct timer_task *      it    = (struct timer_task *)list_get_head(&timer->tasks);
    2ad0:	693b      	ldr	r3, [r7, #16]
    2ad2:	3314      	adds	r3, #20
    2ad4:	4618      	mov	r0, r3
    2ad6:	4b27      	ldr	r3, [pc, #156]	; (2b74 <timer_process_counted+0xb0>)
    2ad8:	4798      	blx	r3
    2ada:	6178      	str	r0, [r7, #20]
	uint32_t                 time  = ++timer->time;
    2adc:	693b      	ldr	r3, [r7, #16]
    2ade:	691b      	ldr	r3, [r3, #16]
    2ae0:	1c5a      	adds	r2, r3, #1
    2ae2:	693b      	ldr	r3, [r7, #16]
    2ae4:	611a      	str	r2, [r3, #16]
    2ae6:	693b      	ldr	r3, [r7, #16]
    2ae8:	691b      	ldr	r3, [r3, #16]
    2aea:	60fb      	str	r3, [r7, #12]

	if ((timer->flags & TIMER_FLAG_QUEUE_IS_TAKEN) || (timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED)) {
    2aec:	693b      	ldr	r3, [r7, #16]
    2aee:	7e1b      	ldrb	r3, [r3, #24]
    2af0:	b2db      	uxtb	r3, r3
    2af2:	f003 0301 	and.w	r3, r3, #1
    2af6:	2b00      	cmp	r3, #0
    2af8:	d106      	bne.n	2b08 <timer_process_counted+0x44>
    2afa:	693b      	ldr	r3, [r7, #16]
    2afc:	7e1b      	ldrb	r3, [r3, #24]
    2afe:	b2db      	uxtb	r3, r3
    2b00:	f003 0302 	and.w	r3, r3, #2
    2b04:	2b00      	cmp	r3, #0
    2b06:	d027      	beq.n	2b58 <timer_process_counted+0x94>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
    2b08:	693b      	ldr	r3, [r7, #16]
    2b0a:	7e1b      	ldrb	r3, [r3, #24]
    2b0c:	b2db      	uxtb	r3, r3
    2b0e:	f043 0302 	orr.w	r3, r3, #2
    2b12:	b2da      	uxtb	r2, r3
    2b14:	693b      	ldr	r3, [r7, #16]
    2b16:	761a      	strb	r2, [r3, #24]
		return;
    2b18:	e029      	b.n	2b6e <timer_process_counted+0xaa>
	}

	while (it && ((time - it->time_label) >= it->interval)) {
		struct timer_task *tmp = it;
    2b1a:	697b      	ldr	r3, [r7, #20]
    2b1c:	60bb      	str	r3, [r7, #8]

		list_remove_head(&timer->tasks);
    2b1e:	693b      	ldr	r3, [r7, #16]
    2b20:	3314      	adds	r3, #20
    2b22:	4618      	mov	r0, r3
    2b24:	4b14      	ldr	r3, [pc, #80]	; (2b78 <timer_process_counted+0xb4>)
    2b26:	4798      	blx	r3
		if (TIMER_TASK_REPEAT == tmp->mode) {
    2b28:	68bb      	ldr	r3, [r7, #8]
    2b2a:	7c1b      	ldrb	r3, [r3, #16]
    2b2c:	2b01      	cmp	r3, #1
    2b2e:	d109      	bne.n	2b44 <timer_process_counted+0x80>
			tmp->time_label = time;
    2b30:	68bb      	ldr	r3, [r7, #8]
    2b32:	68fa      	ldr	r2, [r7, #12]
    2b34:	605a      	str	r2, [r3, #4]
			timer_add_timer_task(&timer->tasks, tmp, time);
    2b36:	693b      	ldr	r3, [r7, #16]
    2b38:	3314      	adds	r3, #20
    2b3a:	68fa      	ldr	r2, [r7, #12]
    2b3c:	68b9      	ldr	r1, [r7, #8]
    2b3e:	4618      	mov	r0, r3
    2b40:	4b0e      	ldr	r3, [pc, #56]	; (2b7c <timer_process_counted+0xb8>)
    2b42:	4798      	blx	r3
		}
		it = (struct timer_task *)list_get_head(&timer->tasks);
    2b44:	693b      	ldr	r3, [r7, #16]
    2b46:	3314      	adds	r3, #20
    2b48:	4618      	mov	r0, r3
    2b4a:	4b0a      	ldr	r3, [pc, #40]	; (2b74 <timer_process_counted+0xb0>)
    2b4c:	4798      	blx	r3
    2b4e:	6178      	str	r0, [r7, #20]

		tmp->cb(tmp);
    2b50:	68bb      	ldr	r3, [r7, #8]
    2b52:	68db      	ldr	r3, [r3, #12]
    2b54:	68b8      	ldr	r0, [r7, #8]
    2b56:	4798      	blx	r3
	while (it && ((time - it->time_label) >= it->interval)) {
    2b58:	697b      	ldr	r3, [r7, #20]
    2b5a:	2b00      	cmp	r3, #0
    2b5c:	d007      	beq.n	2b6e <timer_process_counted+0xaa>
    2b5e:	697b      	ldr	r3, [r7, #20]
    2b60:	685b      	ldr	r3, [r3, #4]
    2b62:	68fa      	ldr	r2, [r7, #12]
    2b64:	1ad2      	subs	r2, r2, r3
    2b66:	697b      	ldr	r3, [r7, #20]
    2b68:	689b      	ldr	r3, [r3, #8]
    2b6a:	429a      	cmp	r2, r3
    2b6c:	d2d5      	bcs.n	2b1a <timer_process_counted+0x56>
	}
}
    2b6e:	3718      	adds	r7, #24
    2b70:	46bd      	mov	sp, r7
    2b72:	bd80      	pop	{r7, pc}
    2b74:	00002979 	.word	0x00002979
    2b78:	000035d9 	.word	0x000035d9
    2b7c:	00002a15 	.word	0x00002a15

00002b80 <_usb_d_find_ep>:
 * \return Index of endpoint descriptor.
 * \retval >=0 The index.
 * \retval <0 Not found (endpoint is not initialized).
 */
static int8_t _usb_d_find_ep(const uint8_t ep)
{
    2b80:	b480      	push	{r7}
    2b82:	b085      	sub	sp, #20
    2b84:	af00      	add	r7, sp, #0
    2b86:	4603      	mov	r3, r0
    2b88:	71fb      	strb	r3, [r7, #7]
	int8_t i;
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    2b8a:	2300      	movs	r3, #0
    2b8c:	73fb      	strb	r3, [r7, #15]
    2b8e:	e029      	b.n	2be4 <_usb_d_find_ep+0x64>
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    2b90:	f997 300f 	ldrsb.w	r3, [r7, #15]
    2b94:	4a19      	ldr	r2, [pc, #100]	; (2bfc <_usb_d_find_ep+0x7c>)
    2b96:	015b      	lsls	r3, r3, #5
    2b98:	4413      	add	r3, r2
    2b9a:	3301      	adds	r3, #1
    2b9c:	781b      	ldrb	r3, [r3, #0]
    2b9e:	79fa      	ldrb	r2, [r7, #7]
    2ba0:	429a      	cmp	r2, r3
    2ba2:	d102      	bne.n	2baa <_usb_d_find_ep+0x2a>
			return i;
    2ba4:	f997 300f 	ldrsb.w	r3, [r7, #15]
    2ba8:	e022      	b.n	2bf0 <_usb_d_find_ep+0x70>
		}
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
    2baa:	f997 300f 	ldrsb.w	r3, [r7, #15]
    2bae:	4a13      	ldr	r2, [pc, #76]	; (2bfc <_usb_d_find_ep+0x7c>)
    2bb0:	015b      	lsls	r3, r3, #5
    2bb2:	4413      	add	r3, r2
    2bb4:	781b      	ldrb	r3, [r3, #0]
    2bb6:	2b00      	cmp	r3, #0
    2bb8:	d10e      	bne.n	2bd8 <_usb_d_find_ep+0x58>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    2bba:	79fb      	ldrb	r3, [r7, #7]
    2bbc:	f003 030f 	and.w	r3, r3, #15
    2bc0:	f997 200f 	ldrsb.w	r2, [r7, #15]
    2bc4:	490d      	ldr	r1, [pc, #52]	; (2bfc <_usb_d_find_ep+0x7c>)
    2bc6:	0152      	lsls	r2, r2, #5
    2bc8:	440a      	add	r2, r1
    2bca:	3201      	adds	r2, #1
    2bcc:	7812      	ldrb	r2, [r2, #0]
    2bce:	4293      	cmp	r3, r2
    2bd0:	d102      	bne.n	2bd8 <_usb_d_find_ep+0x58>
			return i;
    2bd2:	f997 300f 	ldrsb.w	r3, [r7, #15]
    2bd6:	e00b      	b.n	2bf0 <_usb_d_find_ep+0x70>
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    2bd8:	f997 300f 	ldrsb.w	r3, [r7, #15]
    2bdc:	b2db      	uxtb	r3, r3
    2bde:	3301      	adds	r3, #1
    2be0:	b2db      	uxtb	r3, r3
    2be2:	73fb      	strb	r3, [r7, #15]
    2be4:	f997 300f 	ldrsb.w	r3, [r7, #15]
    2be8:	2b03      	cmp	r3, #3
    2bea:	ddd1      	ble.n	2b90 <_usb_d_find_ep+0x10>
		}
	}
	return -1;
    2bec:	f04f 33ff 	mov.w	r3, #4294967295
}
    2bf0:	4618      	mov	r0, r3
    2bf2:	3714      	adds	r7, #20
    2bf4:	46bd      	mov	sp, r7
    2bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
    2bfa:	4770      	bx	lr
    2bfc:	20000630 	.word	0x20000630

00002c00 <_usb_d_trans>:
 * \param[in] size Transfer size.
 * \param[in] zlp Auto append ZLP for IN, or wait ZLP for OUT.
 */
static inline int32_t _usb_d_trans(const uint8_t ep, const bool dir, const uint8_t *buf, const uint32_t size,
                                   const uint8_t zlp)
{
    2c00:	b580      	push	{r7, lr}
    2c02:	b088      	sub	sp, #32
    2c04:	af00      	add	r7, sp, #0
    2c06:	60ba      	str	r2, [r7, #8]
    2c08:	607b      	str	r3, [r7, #4]
    2c0a:	4603      	mov	r3, r0
    2c0c:	73fb      	strb	r3, [r7, #15]
    2c0e:	460b      	mov	r3, r1
    2c10:	73bb      	strb	r3, [r7, #14]
	struct usb_d_transfer trans
    2c12:	68bb      	ldr	r3, [r7, #8]
    2c14:	617b      	str	r3, [r7, #20]
    2c16:	687b      	ldr	r3, [r7, #4]
    2c18:	61bb      	str	r3, [r7, #24]
    2c1a:	7bbb      	ldrb	r3, [r7, #14]
    2c1c:	2b00      	cmp	r3, #0
    2c1e:	d004      	beq.n	2c2a <_usb_d_trans+0x2a>
    2c20:	7bfb      	ldrb	r3, [r7, #15]
    2c22:	f063 037f 	orn	r3, r3, #127	; 0x7f
    2c26:	b2db      	uxtb	r3, r3
    2c28:	e003      	b.n	2c32 <_usb_d_trans+0x32>
    2c2a:	7bfb      	ldrb	r3, [r7, #15]
    2c2c:	f003 030f 	and.w	r3, r3, #15
    2c30:	b2db      	uxtb	r3, r3
    2c32:	773b      	strb	r3, [r7, #28]
    2c34:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
    2c38:	777b      	strb	r3, [r7, #29]
	    = {(uint8_t *)buf, size, dir ? (uint8_t)(ep | USB_EP_DIR) : (uint8_t)(ep & USB_EP_N_MASK), zlp};

	return _usb_d_dev_ep_trans(&trans);
    2c3a:	f107 0314 	add.w	r3, r7, #20
    2c3e:	4618      	mov	r0, r3
    2c40:	4b03      	ldr	r3, [pc, #12]	; (2c50 <_usb_d_trans+0x50>)
    2c42:	4798      	blx	r3
    2c44:	4603      	mov	r3, r0
}
    2c46:	4618      	mov	r0, r3
    2c48:	3720      	adds	r7, #32
    2c4a:	46bd      	mov	sp, r7
    2c4c:	bd80      	pop	{r7, pc}
    2c4e:	bf00      	nop
    2c50:	0000a021 	.word	0x0000a021

00002c54 <usb_d_dummy_cb_false>:
 * \param[in] unused1 Unused parameter.
 * \param[in] unused2 Unused parameter.
 * \return Always \c false.
 */
static bool usb_d_dummy_cb_false(uint32_t unused0, uint32_t unused1, uint32_t unused2)
{
    2c54:	b480      	push	{r7}
    2c56:	b085      	sub	sp, #20
    2c58:	af00      	add	r7, sp, #0
    2c5a:	60f8      	str	r0, [r7, #12]
    2c5c:	60b9      	str	r1, [r7, #8]
    2c5e:	607a      	str	r2, [r7, #4]
	(void)unused0;
	(void)unused1;
	(void)unused2;
	return false;
    2c60:	2300      	movs	r3, #0
}
    2c62:	4618      	mov	r0, r3
    2c64:	3714      	adds	r7, #20
    2c66:	46bd      	mov	sp, r7
    2c68:	f85d 7b04 	ldr.w	r7, [sp], #4
    2c6c:	4770      	bx	lr
	...

00002c70 <usb_d_cb_trans_setup>:
/**
 * \brief Callback invoked when SETUP packet is ready
 * \param[in] ep Endpoint number with transfer direction on bit 8.
 */
static void usb_d_cb_trans_setup(const uint8_t ep)
{
    2c70:	b580      	push	{r7, lr}
    2c72:	b086      	sub	sp, #24
    2c74:	af00      	add	r7, sp, #0
    2c76:	4603      	mov	r3, r0
    2c78:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    2c7a:	79fb      	ldrb	r3, [r7, #7]
    2c7c:	4618      	mov	r0, r3
    2c7e:	4b2a      	ldr	r3, [pc, #168]	; (2d28 <usb_d_cb_trans_setup+0xb8>)
    2c80:	4798      	blx	r3
    2c82:	4603      	mov	r3, r0
    2c84:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    2c86:	f997 3017 	ldrsb.w	r3, [r7, #23]
    2c8a:	015b      	lsls	r3, r3, #5
    2c8c:	4a27      	ldr	r2, [pc, #156]	; (2d2c <usb_d_cb_trans_setup+0xbc>)
    2c8e:	4413      	add	r3, r2
    2c90:	613b      	str	r3, [r7, #16]
	uint8_t *        req      = ept->xfer.req;
    2c92:	693b      	ldr	r3, [r7, #16]
    2c94:	330c      	adds	r3, #12
    2c96:	60fb      	str	r3, [r7, #12]

	uint8_t n = _usb_d_dev_ep_read_req(ep, req);
    2c98:	79fb      	ldrb	r3, [r7, #7]
    2c9a:	68f9      	ldr	r1, [r7, #12]
    2c9c:	4618      	mov	r0, r3
    2c9e:	4b24      	ldr	r3, [pc, #144]	; (2d30 <usb_d_cb_trans_setup+0xc0>)
    2ca0:	4798      	blx	r3
    2ca2:	4603      	mov	r3, r0
    2ca4:	72fb      	strb	r3, [r7, #11]
	if (n != 8) {
    2ca6:	7afb      	ldrb	r3, [r7, #11]
    2ca8:	2b08      	cmp	r3, #8
    2caa:	d00d      	beq.n	2cc8 <usb_d_cb_trans_setup+0x58>
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    2cac:	79fb      	ldrb	r3, [r7, #7]
    2cae:	2101      	movs	r1, #1
    2cb0:	4618      	mov	r0, r3
    2cb2:	4b20      	ldr	r3, [pc, #128]	; (2d34 <usb_d_cb_trans_setup+0xc4>)
    2cb4:	4798      	blx	r3
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    2cb6:	79fb      	ldrb	r3, [r7, #7]
    2cb8:	f063 037f 	orn	r3, r3, #127	; 0x7f
    2cbc:	b2db      	uxtb	r3, r3
    2cbe:	2101      	movs	r1, #1
    2cc0:	4618      	mov	r0, r3
    2cc2:	4b1c      	ldr	r3, [pc, #112]	; (2d34 <usb_d_cb_trans_setup+0xc4>)
    2cc4:	4798      	blx	r3
		return;
    2cc6:	e02b      	b.n	2d20 <usb_d_cb_trans_setup+0xb0>
	}

	_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    2cc8:	79fb      	ldrb	r3, [r7, #7]
    2cca:	2100      	movs	r1, #0
    2ccc:	4618      	mov	r0, r3
    2cce:	4b19      	ldr	r3, [pc, #100]	; (2d34 <usb_d_cb_trans_setup+0xc4>)
    2cd0:	4798      	blx	r3
	_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_CLR);
    2cd2:	79fb      	ldrb	r3, [r7, #7]
    2cd4:	f063 037f 	orn	r3, r3, #127	; 0x7f
    2cd8:	b2db      	uxtb	r3, r3
    2cda:	2100      	movs	r1, #0
    2cdc:	4618      	mov	r0, r3
    2cde:	4b15      	ldr	r3, [pc, #84]	; (2d34 <usb_d_cb_trans_setup+0xc4>)
    2ce0:	4798      	blx	r3
	ept->xfer.hdr.state = USB_EP_S_IDLE;
    2ce2:	693b      	ldr	r3, [r7, #16]
    2ce4:	2201      	movs	r2, #1
    2ce6:	709a      	strb	r2, [r3, #2]
	if (!ept->callbacks.req(ep, req)) {
    2ce8:	693b      	ldr	r3, [r7, #16]
    2cea:	695b      	ldr	r3, [r3, #20]
    2cec:	79fa      	ldrb	r2, [r7, #7]
    2cee:	68f9      	ldr	r1, [r7, #12]
    2cf0:	4610      	mov	r0, r2
    2cf2:	4798      	blx	r3
    2cf4:	4603      	mov	r3, r0
    2cf6:	f083 0301 	eor.w	r3, r3, #1
    2cfa:	b2db      	uxtb	r3, r3
    2cfc:	2b00      	cmp	r3, #0
    2cfe:	d00f      	beq.n	2d20 <usb_d_cb_trans_setup+0xb0>
		ept->xfer.hdr.state = USB_EP_S_HALTED;
    2d00:	693b      	ldr	r3, [r7, #16]
    2d02:	2205      	movs	r2, #5
    2d04:	709a      	strb	r2, [r3, #2]
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    2d06:	79fb      	ldrb	r3, [r7, #7]
    2d08:	2101      	movs	r1, #1
    2d0a:	4618      	mov	r0, r3
    2d0c:	4b09      	ldr	r3, [pc, #36]	; (2d34 <usb_d_cb_trans_setup+0xc4>)
    2d0e:	4798      	blx	r3
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    2d10:	79fb      	ldrb	r3, [r7, #7]
    2d12:	f063 037f 	orn	r3, r3, #127	; 0x7f
    2d16:	b2db      	uxtb	r3, r3
    2d18:	2101      	movs	r1, #1
    2d1a:	4618      	mov	r0, r3
    2d1c:	4b05      	ldr	r3, [pc, #20]	; (2d34 <usb_d_cb_trans_setup+0xc4>)
    2d1e:	4798      	blx	r3
	}
}
    2d20:	3718      	adds	r7, #24
    2d22:	46bd      	mov	sp, r7
    2d24:	bd80      	pop	{r7, pc}
    2d26:	bf00      	nop
    2d28:	00002b81 	.word	0x00002b81
    2d2c:	20000630 	.word	0x20000630
    2d30:	00009f79 	.word	0x00009f79
    2d34:	00009df1 	.word	0x00009df1

00002d38 <usb_d_cb_trans_more>:
 * \brief Callback invoked when request more data
 * \param[in] ep Endpoint number with transfer direction on bit 8.
 * \param[in] transfered Number of bytes transfered.
 */
static bool usb_d_cb_trans_more(const uint8_t ep, const uint32_t transfered)
{
    2d38:	b580      	push	{r7, lr}
    2d3a:	b084      	sub	sp, #16
    2d3c:	af00      	add	r7, sp, #0
    2d3e:	4603      	mov	r3, r0
    2d40:	6039      	str	r1, [r7, #0]
    2d42:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    2d44:	79fb      	ldrb	r3, [r7, #7]
    2d46:	4618      	mov	r0, r3
    2d48:	4b0d      	ldr	r3, [pc, #52]	; (2d80 <usb_d_cb_trans_more+0x48>)
    2d4a:	4798      	blx	r3
    2d4c:	4603      	mov	r3, r0
    2d4e:	73fb      	strb	r3, [r7, #15]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    2d50:	f997 300f 	ldrsb.w	r3, [r7, #15]
    2d54:	015b      	lsls	r3, r3, #5
    2d56:	4a0b      	ldr	r2, [pc, #44]	; (2d84 <usb_d_cb_trans_more+0x4c>)
    2d58:	4413      	add	r3, r2
    2d5a:	60bb      	str	r3, [r7, #8]
	if (ept->xfer.hdr.state == USB_EP_S_X_DATA) {
    2d5c:	68bb      	ldr	r3, [r7, #8]
    2d5e:	789b      	ldrb	r3, [r3, #2]
    2d60:	2b03      	cmp	r3, #3
    2d62:	d107      	bne.n	2d74 <usb_d_cb_trans_more+0x3c>
		return ept->callbacks.more(ep, transfered);
    2d64:	68bb      	ldr	r3, [r7, #8]
    2d66:	699b      	ldr	r3, [r3, #24]
    2d68:	79fa      	ldrb	r2, [r7, #7]
    2d6a:	6839      	ldr	r1, [r7, #0]
    2d6c:	4610      	mov	r0, r2
    2d6e:	4798      	blx	r3
    2d70:	4603      	mov	r3, r0
    2d72:	e000      	b.n	2d76 <usb_d_cb_trans_more+0x3e>
	}
	return false;
    2d74:	2300      	movs	r3, #0
}
    2d76:	4618      	mov	r0, r3
    2d78:	3710      	adds	r7, #16
    2d7a:	46bd      	mov	sp, r7
    2d7c:	bd80      	pop	{r7, pc}
    2d7e:	bf00      	nop
    2d80:	00002b81 	.word	0x00002b81
    2d84:	20000630 	.word	0x20000630

00002d88 <usb_d_ctrl_trans_done>:
/**
 * \brief Handles the case that control endpoint transactions are done
 * \param[in,out] ept Pointer to endpoint information.
 */
static inline void usb_d_ctrl_trans_done(struct usb_d_ep *ept)
{
    2d88:	b590      	push	{r4, r7, lr}
    2d8a:	b087      	sub	sp, #28
    2d8c:	af02      	add	r7, sp, #8
    2d8e:	6078      	str	r0, [r7, #4]
	uint8_t state   = ept->xfer.hdr.state;
    2d90:	687b      	ldr	r3, [r7, #4]
    2d92:	789b      	ldrb	r3, [r3, #2]
    2d94:	73fb      	strb	r3, [r7, #15]
	bool    req_dir = USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN;
    2d96:	687b      	ldr	r3, [r7, #4]
    2d98:	7b1b      	ldrb	r3, [r3, #12]
    2d9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
    2d9e:	2b00      	cmp	r3, #0
    2da0:	bf14      	ite	ne
    2da2:	2301      	movne	r3, #1
    2da4:	2300      	moveq	r3, #0
    2da6:	73bb      	strb	r3, [r7, #14]

	if (state == USB_EP_S_X_DATA) {
    2da8:	7bfb      	ldrb	r3, [r7, #15]
    2daa:	2b03      	cmp	r3, #3
    2dac:	d13a      	bne.n	2e24 <usb_d_ctrl_trans_done+0x9c>
		/* Data stage -> Status stage */
		bool err = ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DATA, ept->xfer.req);
    2dae:	687b      	ldr	r3, [r7, #4]
    2db0:	69db      	ldr	r3, [r3, #28]
    2db2:	687a      	ldr	r2, [r7, #4]
    2db4:	7850      	ldrb	r0, [r2, #1]
    2db6:	687a      	ldr	r2, [r7, #4]
    2db8:	320c      	adds	r2, #12
    2dba:	2101      	movs	r1, #1
    2dbc:	4798      	blx	r3
    2dbe:	4603      	mov	r3, r0
    2dc0:	737b      	strb	r3, [r7, #13]
		if (err) {
    2dc2:	7b7b      	ldrb	r3, [r7, #13]
    2dc4:	2b00      	cmp	r3, #0
    2dc6:	d015      	beq.n	2df4 <usb_d_ctrl_trans_done+0x6c>
			ept->xfer.hdr.state  = USB_EP_S_HALTED;
    2dc8:	687b      	ldr	r3, [r7, #4]
    2dca:	2205      	movs	r2, #5
    2dcc:	709a      	strb	r2, [r3, #2]
			ept->xfer.hdr.status = USB_XFER_HALT;
    2dce:	687b      	ldr	r3, [r7, #4]
    2dd0:	2202      	movs	r2, #2
    2dd2:	70da      	strb	r2, [r3, #3]
			_usb_d_dev_ep_stall(req_dir ? ept->xfer.hdr.ep : (ept->xfer.hdr.ep | USB_EP_DIR), USB_EP_STALL_SET);
    2dd4:	7bbb      	ldrb	r3, [r7, #14]
    2dd6:	2b00      	cmp	r3, #0
    2dd8:	d002      	beq.n	2de0 <usb_d_ctrl_trans_done+0x58>
    2dda:	687b      	ldr	r3, [r7, #4]
    2ddc:	785b      	ldrb	r3, [r3, #1]
    2dde:	e004      	b.n	2dea <usb_d_ctrl_trans_done+0x62>
    2de0:	687b      	ldr	r3, [r7, #4]
    2de2:	785b      	ldrb	r3, [r3, #1]
    2de4:	f063 037f 	orn	r3, r3, #127	; 0x7f
    2de8:	b2db      	uxtb	r3, r3
    2dea:	2101      	movs	r1, #1
    2dec:	4618      	mov	r0, r3
    2dee:	4b15      	ldr	r3, [pc, #84]	; (2e44 <usb_d_ctrl_trans_done+0xbc>)
    2df0:	4798      	blx	r3
	} else {
		/* Status stage done */
		ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DONE, ept->xfer.req);
		ept->xfer.hdr.state = USB_EP_S_X_SETUP;
	}
}
    2df2:	e022      	b.n	2e3a <usb_d_ctrl_trans_done+0xb2>
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    2df4:	687b      	ldr	r3, [r7, #4]
    2df6:	2204      	movs	r2, #4
    2df8:	709a      	strb	r2, [r3, #2]
			_usb_d_trans(ept->xfer.hdr.ep, !req_dir, NULL, 0, 1);
    2dfa:	687b      	ldr	r3, [r7, #4]
    2dfc:	7858      	ldrb	r0, [r3, #1]
    2dfe:	7bbb      	ldrb	r3, [r7, #14]
    2e00:	2b00      	cmp	r3, #0
    2e02:	bf14      	ite	ne
    2e04:	2301      	movne	r3, #1
    2e06:	2300      	moveq	r3, #0
    2e08:	b2db      	uxtb	r3, r3
    2e0a:	f083 0301 	eor.w	r3, r3, #1
    2e0e:	b2db      	uxtb	r3, r3
    2e10:	f003 0301 	and.w	r3, r3, #1
    2e14:	b2d9      	uxtb	r1, r3
    2e16:	2301      	movs	r3, #1
    2e18:	9300      	str	r3, [sp, #0]
    2e1a:	2300      	movs	r3, #0
    2e1c:	2200      	movs	r2, #0
    2e1e:	4c0a      	ldr	r4, [pc, #40]	; (2e48 <usb_d_ctrl_trans_done+0xc0>)
    2e20:	47a0      	blx	r4
}
    2e22:	e00a      	b.n	2e3a <usb_d_ctrl_trans_done+0xb2>
		ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DONE, ept->xfer.req);
    2e24:	687b      	ldr	r3, [r7, #4]
    2e26:	69db      	ldr	r3, [r3, #28]
    2e28:	687a      	ldr	r2, [r7, #4]
    2e2a:	7850      	ldrb	r0, [r2, #1]
    2e2c:	687a      	ldr	r2, [r7, #4]
    2e2e:	320c      	adds	r2, #12
    2e30:	2100      	movs	r1, #0
    2e32:	4798      	blx	r3
		ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    2e34:	687b      	ldr	r3, [r7, #4]
    2e36:	2202      	movs	r2, #2
    2e38:	709a      	strb	r2, [r3, #2]
}
    2e3a:	bf00      	nop
    2e3c:	3714      	adds	r7, #20
    2e3e:	46bd      	mov	sp, r7
    2e40:	bd90      	pop	{r4, r7, pc}
    2e42:	bf00      	nop
    2e44:	00009df1 	.word	0x00009df1
    2e48:	00002c01 	.word	0x00002c01

00002e4c <_usb_d_cb_trans_done>:

/**
 * Callback when USB transactions are finished.
 */
static void _usb_d_cb_trans_done(const uint8_t ep, const int32_t code, const uint32_t transferred)
{
    2e4c:	b580      	push	{r7, lr}
    2e4e:	b086      	sub	sp, #24
    2e50:	af00      	add	r7, sp, #0
    2e52:	4603      	mov	r3, r0
    2e54:	60b9      	str	r1, [r7, #8]
    2e56:	607a      	str	r2, [r7, #4]
    2e58:	73fb      	strb	r3, [r7, #15]
	int8_t           ep_index = _usb_d_find_ep(ep);
    2e5a:	7bfb      	ldrb	r3, [r7, #15]
    2e5c:	4618      	mov	r0, r3
    2e5e:	4b2f      	ldr	r3, [pc, #188]	; (2f1c <_usb_d_cb_trans_done+0xd0>)
    2e60:	4798      	blx	r3
    2e62:	4603      	mov	r3, r0
    2e64:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    2e66:	f997 3017 	ldrsb.w	r3, [r7, #23]
    2e6a:	015b      	lsls	r3, r3, #5
    2e6c:	4a2c      	ldr	r2, [pc, #176]	; (2f20 <_usb_d_cb_trans_done+0xd4>)
    2e6e:	4413      	add	r3, r2
    2e70:	613b      	str	r3, [r7, #16]

	if (code == USB_TRANS_DONE) {
    2e72:	68bb      	ldr	r3, [r7, #8]
    2e74:	2b00      	cmp	r3, #0
    2e76:	d10e      	bne.n	2e96 <_usb_d_cb_trans_done+0x4a>
		ept->xfer.hdr.status = USB_XFER_DONE;
    2e78:	693b      	ldr	r3, [r7, #16]
    2e7a:	2200      	movs	r2, #0
    2e7c:	70da      	strb	r2, [r3, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    2e7e:	693b      	ldr	r3, [r7, #16]
    2e80:	781b      	ldrb	r3, [r3, #0]
    2e82:	2b00      	cmp	r3, #0
    2e84:	d103      	bne.n	2e8e <_usb_d_cb_trans_done+0x42>
			usb_d_ctrl_trans_done(ept);
    2e86:	6938      	ldr	r0, [r7, #16]
    2e88:	4b26      	ldr	r3, [pc, #152]	; (2f24 <_usb_d_cb_trans_done+0xd8>)
    2e8a:	4798      	blx	r3
			return;
    2e8c:	e043      	b.n	2f16 <_usb_d_cb_trans_done+0xca>
		}
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    2e8e:	693b      	ldr	r3, [r7, #16]
    2e90:	2201      	movs	r2, #1
    2e92:	709a      	strb	r2, [r3, #2]
    2e94:	e038      	b.n	2f08 <_usb_d_cb_trans_done+0xbc>
	} else if (code == USB_TRANS_STALL) {
    2e96:	68bb      	ldr	r3, [r7, #8]
    2e98:	2b01      	cmp	r3, #1
    2e9a:	d113      	bne.n	2ec4 <_usb_d_cb_trans_done+0x78>
		ept->xfer.hdr.status = USB_XFER_HALT;
    2e9c:	693b      	ldr	r3, [r7, #16]
    2e9e:	2202      	movs	r2, #2
    2ea0:	70da      	strb	r2, [r3, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    2ea2:	693b      	ldr	r3, [r7, #16]
    2ea4:	781b      	ldrb	r3, [r3, #0]
    2ea6:	2b00      	cmp	r3, #0
    2ea8:	d108      	bne.n	2ebc <_usb_d_cb_trans_done+0x70>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    2eaa:	693b      	ldr	r3, [r7, #16]
    2eac:	2202      	movs	r2, #2
    2eae:	709a      	strb	r2, [r3, #2]
			_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    2eb0:	7bfb      	ldrb	r3, [r7, #15]
    2eb2:	2100      	movs	r1, #0
    2eb4:	4618      	mov	r0, r3
    2eb6:	4b1c      	ldr	r3, [pc, #112]	; (2f28 <_usb_d_cb_trans_done+0xdc>)
    2eb8:	4798      	blx	r3
    2eba:	e025      	b.n	2f08 <_usb_d_cb_trans_done+0xbc>
		} else {
			ept->xfer.hdr.state = USB_EP_S_HALTED;
    2ebc:	693b      	ldr	r3, [r7, #16]
    2ebe:	2205      	movs	r2, #5
    2ec0:	709a      	strb	r2, [r3, #2]
    2ec2:	e021      	b.n	2f08 <_usb_d_cb_trans_done+0xbc>
		}
	} else if (code == USB_TRANS_ABORT) {
    2ec4:	68bb      	ldr	r3, [r7, #8]
    2ec6:	2b02      	cmp	r3, #2
    2ec8:	d10e      	bne.n	2ee8 <_usb_d_cb_trans_done+0x9c>
		ept->xfer.hdr.status = USB_XFER_ABORT;
    2eca:	693b      	ldr	r3, [r7, #16]
    2ecc:	2204      	movs	r2, #4
    2ece:	70da      	strb	r2, [r3, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    2ed0:	693b      	ldr	r3, [r7, #16]
    2ed2:	781b      	ldrb	r3, [r3, #0]
    2ed4:	2b00      	cmp	r3, #0
    2ed6:	d103      	bne.n	2ee0 <_usb_d_cb_trans_done+0x94>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    2ed8:	693b      	ldr	r3, [r7, #16]
    2eda:	2202      	movs	r2, #2
    2edc:	709a      	strb	r2, [r3, #2]
			return;
    2ede:	e01a      	b.n	2f16 <_usb_d_cb_trans_done+0xca>
		}
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    2ee0:	693b      	ldr	r3, [r7, #16]
    2ee2:	2201      	movs	r2, #1
    2ee4:	709a      	strb	r2, [r3, #2]
    2ee6:	e00f      	b.n	2f08 <_usb_d_cb_trans_done+0xbc>
	} else if (code == USB_TRANS_RESET) {
    2ee8:	68bb      	ldr	r3, [r7, #8]
    2eea:	2b03      	cmp	r3, #3
    2eec:	d106      	bne.n	2efc <_usb_d_cb_trans_done+0xb0>
		ept->xfer.hdr.state  = USB_EP_S_DISABLED;
    2eee:	693b      	ldr	r3, [r7, #16]
    2ef0:	2200      	movs	r2, #0
    2ef2:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_RESET;
    2ef4:	693b      	ldr	r3, [r7, #16]
    2ef6:	2205      	movs	r2, #5
    2ef8:	70da      	strb	r2, [r3, #3]
    2efa:	e005      	b.n	2f08 <_usb_d_cb_trans_done+0xbc>
	} else {
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
    2efc:	693b      	ldr	r3, [r7, #16]
    2efe:	2206      	movs	r2, #6
    2f00:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_ERROR;
    2f02:	693b      	ldr	r3, [r7, #16]
    2f04:	2206      	movs	r2, #6
    2f06:	70da      	strb	r2, [r3, #3]
	}

	ept->callbacks.xfer(ep, (enum usb_xfer_code)ept->xfer.hdr.status, (void *)transferred);
    2f08:	693b      	ldr	r3, [r7, #16]
    2f0a:	69db      	ldr	r3, [r3, #28]
    2f0c:	693a      	ldr	r2, [r7, #16]
    2f0e:	78d1      	ldrb	r1, [r2, #3]
    2f10:	687a      	ldr	r2, [r7, #4]
    2f12:	7bf8      	ldrb	r0, [r7, #15]
    2f14:	4798      	blx	r3
}
    2f16:	3718      	adds	r7, #24
    2f18:	46bd      	mov	sp, r7
    2f1a:	bd80      	pop	{r7, pc}
    2f1c:	00002b81 	.word	0x00002b81
    2f20:	20000630 	.word	0x20000630
    2f24:	00002d89 	.word	0x00002d89
    2f28:	00009df1 	.word	0x00009df1

00002f2c <usb_d_init>:

int32_t usb_d_init(void)
{
    2f2c:	b580      	push	{r7, lr}
    2f2e:	b082      	sub	sp, #8
    2f30:	af00      	add	r7, sp, #0
	int32_t rc = _usb_d_dev_init();
    2f32:	4b21      	ldr	r3, [pc, #132]	; (2fb8 <usb_d_init+0x8c>)
    2f34:	4798      	blx	r3
    2f36:	6038      	str	r0, [r7, #0]
	uint8_t i;
	if (rc < 0) {
    2f38:	683b      	ldr	r3, [r7, #0]
    2f3a:	2b00      	cmp	r3, #0
    2f3c:	da01      	bge.n	2f42 <usb_d_init+0x16>
		return rc;
    2f3e:	683b      	ldr	r3, [r7, #0]
    2f40:	e036      	b.n	2fb0 <usb_d_init+0x84>
	}
	memset(usb_d_inst.ep, 0x00, sizeof(struct usb_d_ep) * CONF_USB_D_NUM_EP_SP);
    2f42:	2280      	movs	r2, #128	; 0x80
    2f44:	2100      	movs	r1, #0
    2f46:	481d      	ldr	r0, [pc, #116]	; (2fbc <usb_d_init+0x90>)
    2f48:	4b1d      	ldr	r3, [pc, #116]	; (2fc0 <usb_d_init+0x94>)
    2f4a:	4798      	blx	r3
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    2f4c:	2300      	movs	r3, #0
    2f4e:	71fb      	strb	r3, [r7, #7]
    2f50:	e01e      	b.n	2f90 <usb_d_init+0x64>
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
    2f52:	79fb      	ldrb	r3, [r7, #7]
    2f54:	4a19      	ldr	r2, [pc, #100]	; (2fbc <usb_d_init+0x90>)
    2f56:	015b      	lsls	r3, r3, #5
    2f58:	4413      	add	r3, r2
    2f5a:	3301      	adds	r3, #1
    2f5c:	22ff      	movs	r2, #255	; 0xff
    2f5e:	701a      	strb	r2, [r3, #0]
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    2f60:	79fb      	ldrb	r3, [r7, #7]
    2f62:	4a16      	ldr	r2, [pc, #88]	; (2fbc <usb_d_init+0x90>)
    2f64:	015b      	lsls	r3, r3, #5
    2f66:	4413      	add	r3, r2
    2f68:	3314      	adds	r3, #20
    2f6a:	4a16      	ldr	r2, [pc, #88]	; (2fc4 <usb_d_init+0x98>)
    2f6c:	601a      	str	r2, [r3, #0]
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
    2f6e:	79fb      	ldrb	r3, [r7, #7]
    2f70:	4a12      	ldr	r2, [pc, #72]	; (2fbc <usb_d_init+0x90>)
    2f72:	015b      	lsls	r3, r3, #5
    2f74:	4413      	add	r3, r2
    2f76:	3318      	adds	r3, #24
    2f78:	4a12      	ldr	r2, [pc, #72]	; (2fc4 <usb_d_init+0x98>)
    2f7a:	601a      	str	r2, [r3, #0]
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
    2f7c:	79fb      	ldrb	r3, [r7, #7]
    2f7e:	4a0f      	ldr	r2, [pc, #60]	; (2fbc <usb_d_init+0x90>)
    2f80:	015b      	lsls	r3, r3, #5
    2f82:	4413      	add	r3, r2
    2f84:	331c      	adds	r3, #28
    2f86:	4a0f      	ldr	r2, [pc, #60]	; (2fc4 <usb_d_init+0x98>)
    2f88:	601a      	str	r2, [r3, #0]
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    2f8a:	79fb      	ldrb	r3, [r7, #7]
    2f8c:	3301      	adds	r3, #1
    2f8e:	71fb      	strb	r3, [r7, #7]
    2f90:	79fb      	ldrb	r3, [r7, #7]
    2f92:	2b03      	cmp	r3, #3
    2f94:	d9dd      	bls.n	2f52 <usb_d_init+0x26>
	}
	/* Handles device driver endpoint callbacks to build transfer. */
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_SETUP, (FUNC_PTR)usb_d_cb_trans_setup);
    2f96:	490c      	ldr	r1, [pc, #48]	; (2fc8 <usb_d_init+0x9c>)
    2f98:	2000      	movs	r0, #0
    2f9a:	4b0c      	ldr	r3, [pc, #48]	; (2fcc <usb_d_init+0xa0>)
    2f9c:	4798      	blx	r3
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_MORE, (FUNC_PTR)usb_d_cb_trans_more);
    2f9e:	490c      	ldr	r1, [pc, #48]	; (2fd0 <usb_d_init+0xa4>)
    2fa0:	2001      	movs	r0, #1
    2fa2:	4b0a      	ldr	r3, [pc, #40]	; (2fcc <usb_d_init+0xa0>)
    2fa4:	4798      	blx	r3
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_DONE, (FUNC_PTR)_usb_d_cb_trans_done);
    2fa6:	490b      	ldr	r1, [pc, #44]	; (2fd4 <usb_d_init+0xa8>)
    2fa8:	2002      	movs	r0, #2
    2faa:	4b08      	ldr	r3, [pc, #32]	; (2fcc <usb_d_init+0xa0>)
    2fac:	4798      	blx	r3
	return ERR_NONE;
    2fae:	2300      	movs	r3, #0
}
    2fb0:	4618      	mov	r0, r3
    2fb2:	3708      	adds	r7, #8
    2fb4:	46bd      	mov	sp, r7
    2fb6:	bd80      	pop	{r7, pc}
    2fb8:	00009639 	.word	0x00009639
    2fbc:	20000630 	.word	0x20000630
    2fc0:	0000c8d9 	.word	0x0000c8d9
    2fc4:	00002c55 	.word	0x00002c55
    2fc8:	00002c71 	.word	0x00002c71
    2fcc:	0000a22d 	.word	0x0000a22d
    2fd0:	00002d39 	.word	0x00002d39
    2fd4:	00002e4d 	.word	0x00002e4d

00002fd8 <usb_d_register_callback>:
{
	_usb_d_dev_deinit();
}

void usb_d_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
    2fd8:	b580      	push	{r7, lr}
    2fda:	b082      	sub	sp, #8
    2fdc:	af00      	add	r7, sp, #0
    2fde:	4603      	mov	r3, r0
    2fe0:	6039      	str	r1, [r7, #0]
    2fe2:	71fb      	strb	r3, [r7, #7]
	/* Directly uses device driver callback. */
	_usb_d_dev_register_callback(type, func);
    2fe4:	79fb      	ldrb	r3, [r7, #7]
    2fe6:	6839      	ldr	r1, [r7, #0]
    2fe8:	4618      	mov	r0, r3
    2fea:	4b03      	ldr	r3, [pc, #12]	; (2ff8 <usb_d_register_callback+0x20>)
    2fec:	4798      	blx	r3
}
    2fee:	bf00      	nop
    2ff0:	3708      	adds	r7, #8
    2ff2:	46bd      	mov	sp, r7
    2ff4:	bd80      	pop	{r7, pc}
    2ff6:	bf00      	nop
    2ff8:	0000a1e5 	.word	0x0000a1e5

00002ffc <usb_d_enable>:

int32_t usb_d_enable(void)
{
    2ffc:	b580      	push	{r7, lr}
    2ffe:	af00      	add	r7, sp, #0
	return _usb_d_dev_enable();
    3000:	4b02      	ldr	r3, [pc, #8]	; (300c <usb_d_enable+0x10>)
    3002:	4798      	blx	r3
    3004:	4603      	mov	r3, r0
}
    3006:	4618      	mov	r0, r3
    3008:	bd80      	pop	{r7, pc}
    300a:	bf00      	nop
    300c:	00009729 	.word	0x00009729

00003010 <usb_d_attach>:
{
	_usb_d_dev_disable();
}

void usb_d_attach(void)
{
    3010:	b580      	push	{r7, lr}
    3012:	af00      	add	r7, sp, #0
	_usb_d_dev_attach();
    3014:	4b01      	ldr	r3, [pc, #4]	; (301c <usb_d_attach+0xc>)
    3016:	4798      	blx	r3
}
    3018:	bf00      	nop
    301a:	bd80      	pop	{r7, pc}
    301c:	000097ad 	.word	0x000097ad

00003020 <usb_d_set_address>:
{
	return _usb_d_dev_get_uframe_n();
}

void usb_d_set_address(const uint8_t addr)
{
    3020:	b580      	push	{r7, lr}
    3022:	b082      	sub	sp, #8
    3024:	af00      	add	r7, sp, #0
    3026:	4603      	mov	r3, r0
    3028:	71fb      	strb	r3, [r7, #7]
	_usb_d_dev_set_address(addr);
    302a:	79fb      	ldrb	r3, [r7, #7]
    302c:	4618      	mov	r0, r3
    302e:	4b03      	ldr	r3, [pc, #12]	; (303c <usb_d_set_address+0x1c>)
    3030:	4798      	blx	r3
}
    3032:	bf00      	nop
    3034:	3708      	adds	r7, #8
    3036:	46bd      	mov	sp, r7
    3038:	bd80      	pop	{r7, pc}
    303a:	bf00      	nop
    303c:	000097c1 	.word	0x000097c1

00003040 <usb_d_ep0_init>:
{
	_usb_d_dev_send_remotewakeup();
}

int32_t usb_d_ep0_init(const uint8_t max_pkt_size)
{
    3040:	b580      	push	{r7, lr}
    3042:	b082      	sub	sp, #8
    3044:	af00      	add	r7, sp, #0
    3046:	4603      	mov	r3, r0
    3048:	71fb      	strb	r3, [r7, #7]
	return usb_d_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_size);
    304a:	79fb      	ldrb	r3, [r7, #7]
    304c:	b29b      	uxth	r3, r3
    304e:	461a      	mov	r2, r3
    3050:	2100      	movs	r1, #0
    3052:	2000      	movs	r0, #0
    3054:	4b03      	ldr	r3, [pc, #12]	; (3064 <usb_d_ep0_init+0x24>)
    3056:	4798      	blx	r3
    3058:	4603      	mov	r3, r0
}
    305a:	4618      	mov	r0, r3
    305c:	3708      	adds	r7, #8
    305e:	46bd      	mov	sp, r7
    3060:	bd80      	pop	{r7, pc}
    3062:	bf00      	nop
    3064:	00003069 	.word	0x00003069

00003068 <usb_d_ep_init>:

int32_t usb_d_ep_init(const uint8_t ep, const uint8_t attr, const uint16_t max_pkt_size)
{
    3068:	b580      	push	{r7, lr}
    306a:	b086      	sub	sp, #24
    306c:	af00      	add	r7, sp, #0
    306e:	4603      	mov	r3, r0
    3070:	71fb      	strb	r3, [r7, #7]
    3072:	460b      	mov	r3, r1
    3074:	71bb      	strb	r3, [r7, #6]
    3076:	4613      	mov	r3, r2
    3078:	80bb      	strh	r3, [r7, #4]
	int32_t          rc;
	int8_t           ep_index = _usb_d_find_ep(ep);
    307a:	79fb      	ldrb	r3, [r7, #7]
    307c:	4618      	mov	r0, r3
    307e:	4b1e      	ldr	r3, [pc, #120]	; (30f8 <usb_d_ep_init+0x90>)
    3080:	4798      	blx	r3
    3082:	4603      	mov	r3, r0
    3084:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    3086:	f997 3017 	ldrsb.w	r3, [r7, #23]
    308a:	015b      	lsls	r3, r3, #5
    308c:	4a1b      	ldr	r2, [pc, #108]	; (30fc <usb_d_ep_init+0x94>)
    308e:	4413      	add	r3, r2
    3090:	613b      	str	r3, [r7, #16]
	if (ep_index >= 0) {
    3092:	f997 3017 	ldrsb.w	r3, [r7, #23]
    3096:	2b00      	cmp	r3, #0
    3098:	db02      	blt.n	30a0 <usb_d_ep_init+0x38>
		return -USB_ERR_REDO;
    309a:	f06f 0313 	mvn.w	r3, #19
    309e:	e027      	b.n	30f0 <usb_d_ep_init+0x88>
	} else {
		ep_index = _usb_d_find_ep(0xFF);
    30a0:	20ff      	movs	r0, #255	; 0xff
    30a2:	4b15      	ldr	r3, [pc, #84]	; (30f8 <usb_d_ep_init+0x90>)
    30a4:	4798      	blx	r3
    30a6:	4603      	mov	r3, r0
    30a8:	75fb      	strb	r3, [r7, #23]
		if (ep_index < 0) {
    30aa:	f997 3017 	ldrsb.w	r3, [r7, #23]
    30ae:	2b00      	cmp	r3, #0
    30b0:	da02      	bge.n	30b8 <usb_d_ep_init+0x50>
			return -USB_ERR_ALLOC_FAIL;
    30b2:	f06f 0314 	mvn.w	r3, #20
    30b6:	e01b      	b.n	30f0 <usb_d_ep_init+0x88>
		}
		ept = &usb_d_inst.ep[ep_index];
    30b8:	f997 3017 	ldrsb.w	r3, [r7, #23]
    30bc:	015b      	lsls	r3, r3, #5
    30be:	4a0f      	ldr	r2, [pc, #60]	; (30fc <usb_d_ep_init+0x94>)
    30c0:	4413      	add	r3, r2
    30c2:	613b      	str	r3, [r7, #16]
	}
	rc = _usb_d_dev_ep_init(ep, attr, max_pkt_size);
    30c4:	88ba      	ldrh	r2, [r7, #4]
    30c6:	79b9      	ldrb	r1, [r7, #6]
    30c8:	79fb      	ldrb	r3, [r7, #7]
    30ca:	4618      	mov	r0, r3
    30cc:	4b0c      	ldr	r3, [pc, #48]	; (3100 <usb_d_ep_init+0x98>)
    30ce:	4798      	blx	r3
    30d0:	60f8      	str	r0, [r7, #12]
	if (rc < 0) {
    30d2:	68fb      	ldr	r3, [r7, #12]
    30d4:	2b00      	cmp	r3, #0
    30d6:	da01      	bge.n	30dc <usb_d_ep_init+0x74>
		return rc;
    30d8:	68fb      	ldr	r3, [r7, #12]
    30da:	e009      	b.n	30f0 <usb_d_ep_init+0x88>
	}
	ept->xfer.hdr.ep   = ep;
    30dc:	693b      	ldr	r3, [r7, #16]
    30de:	79fa      	ldrb	r2, [r7, #7]
    30e0:	705a      	strb	r2, [r3, #1]
	ept->xfer.hdr.type = attr & USB_EP_XTYPE_MASK;
    30e2:	79bb      	ldrb	r3, [r7, #6]
    30e4:	f003 0303 	and.w	r3, r3, #3
    30e8:	b2da      	uxtb	r2, r3
    30ea:	693b      	ldr	r3, [r7, #16]
    30ec:	701a      	strb	r2, [r3, #0]
	return ERR_NONE;
    30ee:	2300      	movs	r3, #0
}
    30f0:	4618      	mov	r0, r3
    30f2:	3718      	adds	r7, #24
    30f4:	46bd      	mov	sp, r7
    30f6:	bd80      	pop	{r7, pc}
    30f8:	00002b81 	.word	0x00002b81
    30fc:	20000630 	.word	0x20000630
    3100:	00009861 	.word	0x00009861

00003104 <usb_d_ep_deinit>:

void usb_d_ep_deinit(const uint8_t ep)
{
    3104:	b580      	push	{r7, lr}
    3106:	b084      	sub	sp, #16
    3108:	af00      	add	r7, sp, #0
    310a:	4603      	mov	r3, r0
    310c:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    310e:	79fb      	ldrb	r3, [r7, #7]
    3110:	4618      	mov	r0, r3
    3112:	4b0d      	ldr	r3, [pc, #52]	; (3148 <usb_d_ep_deinit+0x44>)
    3114:	4798      	blx	r3
    3116:	4603      	mov	r3, r0
    3118:	73fb      	strb	r3, [r7, #15]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    311a:	f997 300f 	ldrsb.w	r3, [r7, #15]
    311e:	015b      	lsls	r3, r3, #5
    3120:	4a0a      	ldr	r2, [pc, #40]	; (314c <usb_d_ep_deinit+0x48>)
    3122:	4413      	add	r3, r2
    3124:	60bb      	str	r3, [r7, #8]
	if (ep_index < 0) {
    3126:	f997 300f 	ldrsb.w	r3, [r7, #15]
    312a:	2b00      	cmp	r3, #0
    312c:	db07      	blt.n	313e <usb_d_ep_deinit+0x3a>
		return;
	}
	_usb_d_dev_ep_deinit(ep);
    312e:	79fb      	ldrb	r3, [r7, #7]
    3130:	4618      	mov	r0, r3
    3132:	4b07      	ldr	r3, [pc, #28]	; (3150 <usb_d_ep_deinit+0x4c>)
    3134:	4798      	blx	r3
	ept->xfer.hdr.ep = 0xFF;
    3136:	68bb      	ldr	r3, [r7, #8]
    3138:	22ff      	movs	r2, #255	; 0xff
    313a:	705a      	strb	r2, [r3, #1]
    313c:	e000      	b.n	3140 <usb_d_ep_deinit+0x3c>
		return;
    313e:	bf00      	nop
}
    3140:	3710      	adds	r7, #16
    3142:	46bd      	mov	sp, r7
    3144:	bd80      	pop	{r7, pc}
    3146:	bf00      	nop
    3148:	00002b81 	.word	0x00002b81
    314c:	20000630 	.word	0x20000630
    3150:	00009995 	.word	0x00009995

00003154 <usb_d_ep_enable>:

int32_t usb_d_ep_enable(const uint8_t ep)
{
    3154:	b580      	push	{r7, lr}
    3156:	b086      	sub	sp, #24
    3158:	af00      	add	r7, sp, #0
    315a:	4603      	mov	r3, r0
    315c:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    315e:	79fb      	ldrb	r3, [r7, #7]
    3160:	4618      	mov	r0, r3
    3162:	4b15      	ldr	r3, [pc, #84]	; (31b8 <usb_d_ep_enable+0x64>)
    3164:	4798      	blx	r3
    3166:	4603      	mov	r3, r0
    3168:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    316a:	f997 3017 	ldrsb.w	r3, [r7, #23]
    316e:	015b      	lsls	r3, r3, #5
    3170:	4a12      	ldr	r2, [pc, #72]	; (31bc <usb_d_ep_enable+0x68>)
    3172:	4413      	add	r3, r2
    3174:	613b      	str	r3, [r7, #16]
	int32_t          rc;
	if (ep_index < 0) {
    3176:	f997 3017 	ldrsb.w	r3, [r7, #23]
    317a:	2b00      	cmp	r3, #0
    317c:	da02      	bge.n	3184 <usb_d_ep_enable+0x30>
		return -USB_ERR_PARAM;
    317e:	f06f 0311 	mvn.w	r3, #17
    3182:	e014      	b.n	31ae <usb_d_ep_enable+0x5a>
	}
	ept->xfer.hdr.state = (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) ? USB_EP_S_X_SETUP : USB_EP_S_IDLE;
    3184:	693b      	ldr	r3, [r7, #16]
    3186:	781b      	ldrb	r3, [r3, #0]
    3188:	2b00      	cmp	r3, #0
    318a:	d101      	bne.n	3190 <usb_d_ep_enable+0x3c>
    318c:	2202      	movs	r2, #2
    318e:	e000      	b.n	3192 <usb_d_ep_enable+0x3e>
    3190:	2201      	movs	r2, #1
    3192:	693b      	ldr	r3, [r7, #16]
    3194:	709a      	strb	r2, [r3, #2]
	rc                  = _usb_d_dev_ep_enable(ep);
    3196:	79fb      	ldrb	r3, [r7, #7]
    3198:	4618      	mov	r0, r3
    319a:	4b09      	ldr	r3, [pc, #36]	; (31c0 <usb_d_ep_enable+0x6c>)
    319c:	4798      	blx	r3
    319e:	60f8      	str	r0, [r7, #12]
	if (rc < 0) {
    31a0:	68fb      	ldr	r3, [r7, #12]
    31a2:	2b00      	cmp	r3, #0
    31a4:	da02      	bge.n	31ac <usb_d_ep_enable+0x58>
		ept->xfer.hdr.state = USB_EP_S_DISABLED;
    31a6:	693b      	ldr	r3, [r7, #16]
    31a8:	2200      	movs	r2, #0
    31aa:	709a      	strb	r2, [r3, #2]
	}
	return rc;
    31ac:	68fb      	ldr	r3, [r7, #12]
}
    31ae:	4618      	mov	r0, r3
    31b0:	3718      	adds	r7, #24
    31b2:	46bd      	mov	sp, r7
    31b4:	bd80      	pop	{r7, pc}
    31b6:	bf00      	nop
    31b8:	00002b81 	.word	0x00002b81
    31bc:	20000630 	.word	0x20000630
    31c0:	00009a79 	.word	0x00009a79

000031c4 <usb_d_ep_transfer>:
	}
	return usb_d_inst.ep[ep_index].xfer.req;
}

int32_t usb_d_ep_transfer(const struct usb_d_transfer *xfer)
{
    31c4:	b590      	push	{r4, r7, lr}
    31c6:	b08d      	sub	sp, #52	; 0x34
    31c8:	af02      	add	r7, sp, #8
    31ca:	6078      	str	r0, [r7, #4]
	int8_t                ep_index = _usb_d_find_ep(xfer->ep);
    31cc:	687b      	ldr	r3, [r7, #4]
    31ce:	7a1b      	ldrb	r3, [r3, #8]
    31d0:	4618      	mov	r0, r3
    31d2:	4b51      	ldr	r3, [pc, #324]	; (3318 <usb_d_ep_transfer+0x154>)
    31d4:	4798      	blx	r3
    31d6:	4603      	mov	r3, r0
    31d8:	77fb      	strb	r3, [r7, #31]
	struct usb_d_ep *     ept      = &usb_d_inst.ep[ep_index];
    31da:	f997 301f 	ldrsb.w	r3, [r7, #31]
    31de:	015b      	lsls	r3, r3, #5
    31e0:	4a4e      	ldr	r2, [pc, #312]	; (331c <usb_d_ep_transfer+0x158>)
    31e2:	4413      	add	r3, r2
    31e4:	61bb      	str	r3, [r7, #24]
	bool                  dir = USB_EP_GET_DIR(xfer->ep), zlp = xfer->zlp;
    31e6:	687b      	ldr	r3, [r7, #4]
    31e8:	7a1b      	ldrb	r3, [r3, #8]
    31ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
    31ee:	2b00      	cmp	r3, #0
    31f0:	bf14      	ite	ne
    31f2:	2301      	movne	r3, #1
    31f4:	2300      	moveq	r3, #0
    31f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    31fa:	687b      	ldr	r3, [r7, #4]
    31fc:	7a5b      	ldrb	r3, [r3, #9]
    31fe:	2b00      	cmp	r3, #0
    3200:	bf14      	ite	ne
    3202:	2301      	movne	r3, #1
    3204:	2300      	moveq	r3, #0
    3206:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint32_t              len = xfer->size;
    320a:	687b      	ldr	r3, [r7, #4]
    320c:	685b      	ldr	r3, [r3, #4]
    320e:	623b      	str	r3, [r7, #32]
	int32_t               rc;
	volatile uint8_t      state;
	volatile hal_atomic_t flags;

	if (ep_index < 0) {
    3210:	f997 301f 	ldrsb.w	r3, [r7, #31]
    3214:	2b00      	cmp	r3, #0
    3216:	da02      	bge.n	321e <usb_d_ep_transfer+0x5a>
		return -USB_ERR_PARAM;
    3218:	f06f 0311 	mvn.w	r3, #17
    321c:	e077      	b.n	330e <usb_d_ep_transfer+0x14a>
	}

	atomic_enter_critical(&flags);
    321e:	f107 0308 	add.w	r3, r7, #8
    3222:	4618      	mov	r0, r3
    3224:	4b3e      	ldr	r3, [pc, #248]	; (3320 <usb_d_ep_transfer+0x15c>)
    3226:	4798      	blx	r3
	state = ept->xfer.hdr.state;
    3228:	69bb      	ldr	r3, [r7, #24]
    322a:	789b      	ldrb	r3, [r3, #2]
    322c:	73fb      	strb	r3, [r7, #15]
	if (state == USB_EP_S_IDLE) {
    322e:	7bfb      	ldrb	r3, [r7, #15]
    3230:	b2db      	uxtb	r3, r3
    3232:	2b01      	cmp	r3, #1
    3234:	d10c      	bne.n	3250 <usb_d_ep_transfer+0x8c>
		ept->xfer.hdr.state = USB_EP_S_X_DATA;
    3236:	69bb      	ldr	r3, [r7, #24]
    3238:	2203      	movs	r2, #3
    323a:	709a      	strb	r2, [r3, #2]
		atomic_leave_critical(&flags);
    323c:	f107 0308 	add.w	r3, r7, #8
    3240:	4618      	mov	r0, r3
    3242:	4b38      	ldr	r3, [pc, #224]	; (3324 <usb_d_ep_transfer+0x160>)
    3244:	4798      	blx	r3
		default: /* USB_EP_S_X_xxxx  */
			return USB_BUSY;
		}
	}

	if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    3246:	69bb      	ldr	r3, [r7, #24]
    3248:	781b      	ldrb	r3, [r3, #0]
    324a:	2b00      	cmp	r3, #0
    324c:	d151      	bne.n	32f2 <usb_d_ep_transfer+0x12e>
    324e:	e017      	b.n	3280 <usb_d_ep_transfer+0xbc>
		atomic_leave_critical(&flags);
    3250:	f107 0308 	add.w	r3, r7, #8
    3254:	4618      	mov	r0, r3
    3256:	4b33      	ldr	r3, [pc, #204]	; (3324 <usb_d_ep_transfer+0x160>)
    3258:	4798      	blx	r3
		switch (state) {
    325a:	7bfb      	ldrb	r3, [r7, #15]
    325c:	b2db      	uxtb	r3, r3
    325e:	2b05      	cmp	r3, #5
    3260:	d004      	beq.n	326c <usb_d_ep_transfer+0xa8>
    3262:	2b06      	cmp	r3, #6
    3264:	d004      	beq.n	3270 <usb_d_ep_transfer+0xac>
    3266:	2b00      	cmp	r3, #0
    3268:	d005      	beq.n	3276 <usb_d_ep_transfer+0xb2>
    326a:	e007      	b.n	327c <usb_d_ep_transfer+0xb8>
			return USB_HALTED;
    326c:	2302      	movs	r3, #2
    326e:	e04e      	b.n	330e <usb_d_ep_transfer+0x14a>
			return -USB_ERROR;
    3270:	f06f 030f 	mvn.w	r3, #15
    3274:	e04b      	b.n	330e <usb_d_ep_transfer+0x14a>
			return -USB_ERR_FUNC;
    3276:	f06f 0312 	mvn.w	r3, #18
    327a:	e048      	b.n	330e <usb_d_ep_transfer+0x14a>
			return USB_BUSY;
    327c:	2301      	movs	r3, #1
    327e:	e046      	b.n	330e <usb_d_ep_transfer+0x14a>
		uint16_t req_len = USB_GET_wLength(ept->xfer.req);
    3280:	69bb      	ldr	r3, [r7, #24]
    3282:	7c9b      	ldrb	r3, [r3, #18]
    3284:	b29a      	uxth	r2, r3
    3286:	69bb      	ldr	r3, [r7, #24]
    3288:	7cdb      	ldrb	r3, [r3, #19]
    328a:	b29b      	uxth	r3, r3
    328c:	021b      	lsls	r3, r3, #8
    328e:	b29b      	uxth	r3, r3
    3290:	4413      	add	r3, r2
    3292:	82fb      	strh	r3, [r7, #22]
		/* SETUP without data: ZLP IN as status. */
		if (req_len == 0) {
    3294:	8afb      	ldrh	r3, [r7, #22]
    3296:	2b00      	cmp	r3, #0
    3298:	d10b      	bne.n	32b2 <usb_d_ep_transfer+0xee>
			dir                 = true;
    329a:	2301      	movs	r3, #1
    329c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			len                 = 0;
    32a0:	2300      	movs	r3, #0
    32a2:	623b      	str	r3, [r7, #32]
			zlp                 = true;
    32a4:	2301      	movs	r3, #1
    32a6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    32aa:	69bb      	ldr	r3, [r7, #24]
    32ac:	2204      	movs	r2, #4
    32ae:	709a      	strb	r2, [r3, #2]
    32b0:	e01f      	b.n	32f2 <usb_d_ep_transfer+0x12e>
		} else {
			dir = (USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN);
    32b2:	69bb      	ldr	r3, [r7, #24]
    32b4:	7b1b      	ldrb	r3, [r3, #12]
    32b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
    32ba:	2b00      	cmp	r3, #0
    32bc:	bf14      	ite	ne
    32be:	2301      	movne	r3, #1
    32c0:	2300      	moveq	r3, #0
    32c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			/* Data length not exceed requested. */
			if (len > req_len) {
    32c6:	8afa      	ldrh	r2, [r7, #22]
    32c8:	6a3b      	ldr	r3, [r7, #32]
    32ca:	429a      	cmp	r2, r3
    32cc:	d201      	bcs.n	32d2 <usb_d_ep_transfer+0x10e>
				len = req_len;
    32ce:	8afb      	ldrh	r3, [r7, #22]
    32d0:	623b      	str	r3, [r7, #32]
			}
			if (dir) {
    32d2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    32d6:	2b00      	cmp	r3, #0
    32d8:	d008      	beq.n	32ec <usb_d_ep_transfer+0x128>
				/* Setup -> In */
				zlp = (req_len > len);
    32da:	8afa      	ldrh	r2, [r7, #22]
    32dc:	6a3b      	ldr	r3, [r7, #32]
    32de:	429a      	cmp	r2, r3
    32e0:	bf8c      	ite	hi
    32e2:	2301      	movhi	r3, #1
    32e4:	2300      	movls	r3, #0
    32e6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    32ea:	e002      	b.n	32f2 <usb_d_ep_transfer+0x12e>
			} else {
				zlp = false;
    32ec:	2300      	movs	r3, #0
    32ee:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			}
		}
	}

	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    32f2:	687b      	ldr	r3, [r7, #4]
    32f4:	7a18      	ldrb	r0, [r3, #8]
    32f6:	687b      	ldr	r3, [r7, #4]
    32f8:	681a      	ldr	r2, [r3, #0]
    32fa:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
    32fe:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
    3302:	9300      	str	r3, [sp, #0]
    3304:	6a3b      	ldr	r3, [r7, #32]
    3306:	4c08      	ldr	r4, [pc, #32]	; (3328 <usb_d_ep_transfer+0x164>)
    3308:	47a0      	blx	r4
    330a:	6138      	str	r0, [r7, #16]
	return rc;
    330c:	693b      	ldr	r3, [r7, #16]
}
    330e:	4618      	mov	r0, r3
    3310:	372c      	adds	r7, #44	; 0x2c
    3312:	46bd      	mov	sp, r7
    3314:	bd90      	pop	{r4, r7, pc}
    3316:	bf00      	nop
    3318:	00002b81 	.word	0x00002b81
    331c:	20000630 	.word	0x20000630
    3320:	0000a999 	.word	0x0000a999
    3324:	0000a9bf 	.word	0x0000a9bf
    3328:	00002c01 	.word	0x00002c01

0000332c <_usb_d_ep_halt_clr>:
		return USB_BUSY;
	}
}

static inline int32_t _usb_d_ep_halt_clr(const uint8_t ep)
{
    332c:	b580      	push	{r7, lr}
    332e:	b086      	sub	sp, #24
    3330:	af00      	add	r7, sp, #0
    3332:	4603      	mov	r3, r0
    3334:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    3336:	79fb      	ldrb	r3, [r7, #7]
    3338:	4618      	mov	r0, r3
    333a:	4b1a      	ldr	r3, [pc, #104]	; (33a4 <_usb_d_ep_halt_clr+0x78>)
    333c:	4798      	blx	r3
    333e:	4603      	mov	r3, r0
    3340:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    3342:	f997 3017 	ldrsb.w	r3, [r7, #23]
    3346:	015b      	lsls	r3, r3, #5
    3348:	4a17      	ldr	r2, [pc, #92]	; (33a8 <_usb_d_ep_halt_clr+0x7c>)
    334a:	4413      	add	r3, r2
    334c:	613b      	str	r3, [r7, #16]
	int32_t          rc;
	if (ep_index < 0) {
    334e:	f997 3017 	ldrsb.w	r3, [r7, #23]
    3352:	2b00      	cmp	r3, #0
    3354:	da02      	bge.n	335c <_usb_d_ep_halt_clr+0x30>
		return -USB_ERR_PARAM;
    3356:	f06f 0311 	mvn.w	r3, #17
    335a:	e01f      	b.n	339c <_usb_d_ep_halt_clr+0x70>
	}
	if (_usb_d_dev_ep_stall(ep, USB_EP_STALL_GET)) {
    335c:	79fb      	ldrb	r3, [r7, #7]
    335e:	2102      	movs	r1, #2
    3360:	4618      	mov	r0, r3
    3362:	4b12      	ldr	r3, [pc, #72]	; (33ac <_usb_d_ep_halt_clr+0x80>)
    3364:	4798      	blx	r3
    3366:	4603      	mov	r3, r0
    3368:	2b00      	cmp	r3, #0
    336a:	d016      	beq.n	339a <_usb_d_ep_halt_clr+0x6e>
		rc = _usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    336c:	79fb      	ldrb	r3, [r7, #7]
    336e:	2100      	movs	r1, #0
    3370:	4618      	mov	r0, r3
    3372:	4b0e      	ldr	r3, [pc, #56]	; (33ac <_usb_d_ep_halt_clr+0x80>)
    3374:	4798      	blx	r3
    3376:	60f8      	str	r0, [r7, #12]
		if (rc < 0) {
    3378:	68fb      	ldr	r3, [r7, #12]
    337a:	2b00      	cmp	r3, #0
    337c:	da01      	bge.n	3382 <_usb_d_ep_halt_clr+0x56>
			return rc;
    337e:	68fb      	ldr	r3, [r7, #12]
    3380:	e00c      	b.n	339c <_usb_d_ep_halt_clr+0x70>
		}
		ept->xfer.hdr.state  = USB_EP_S_IDLE;
    3382:	693b      	ldr	r3, [r7, #16]
    3384:	2201      	movs	r2, #1
    3386:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_UNHALT;
    3388:	693b      	ldr	r3, [r7, #16]
    338a:	2203      	movs	r2, #3
    338c:	70da      	strb	r2, [r3, #3]
		ept->callbacks.xfer(ep, USB_XFER_UNHALT, NULL);
    338e:	693b      	ldr	r3, [r7, #16]
    3390:	69db      	ldr	r3, [r3, #28]
    3392:	79f8      	ldrb	r0, [r7, #7]
    3394:	2200      	movs	r2, #0
    3396:	2103      	movs	r1, #3
    3398:	4798      	blx	r3
	}
	return ERR_NONE;
    339a:	2300      	movs	r3, #0
}
    339c:	4618      	mov	r0, r3
    339e:	3718      	adds	r7, #24
    33a0:	46bd      	mov	sp, r7
    33a2:	bd80      	pop	{r7, pc}
    33a4:	00002b81 	.word	0x00002b81
    33a8:	20000630 	.word	0x20000630
    33ac:	00009df1 	.word	0x00009df1

000033b0 <usb_d_ep_halt>:

int32_t usb_d_ep_halt(const uint8_t ep, const enum usb_ep_halt_ctrl ctrl)
{
    33b0:	b580      	push	{r7, lr}
    33b2:	b082      	sub	sp, #8
    33b4:	af00      	add	r7, sp, #0
    33b6:	4603      	mov	r3, r0
    33b8:	460a      	mov	r2, r1
    33ba:	71fb      	strb	r3, [r7, #7]
    33bc:	4613      	mov	r3, r2
    33be:	71bb      	strb	r3, [r7, #6]
	if (ctrl == USB_EP_HALT_CLR) {
    33c0:	79bb      	ldrb	r3, [r7, #6]
    33c2:	2b00      	cmp	r3, #0
    33c4:	d105      	bne.n	33d2 <usb_d_ep_halt+0x22>
		return _usb_d_ep_halt_clr(ep);
    33c6:	79fb      	ldrb	r3, [r7, #7]
    33c8:	4618      	mov	r0, r3
    33ca:	4b0c      	ldr	r3, [pc, #48]	; (33fc <usb_d_ep_halt+0x4c>)
    33cc:	4798      	blx	r3
    33ce:	4603      	mov	r3, r0
    33d0:	e00f      	b.n	33f2 <usb_d_ep_halt+0x42>
	} else if (ctrl == USB_EP_HALT_SET) {
    33d2:	79bb      	ldrb	r3, [r7, #6]
    33d4:	2b01      	cmp	r3, #1
    33d6:	d106      	bne.n	33e6 <usb_d_ep_halt+0x36>
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    33d8:	79fb      	ldrb	r3, [r7, #7]
    33da:	2101      	movs	r1, #1
    33dc:	4618      	mov	r0, r3
    33de:	4b08      	ldr	r3, [pc, #32]	; (3400 <usb_d_ep_halt+0x50>)
    33e0:	4798      	blx	r3
    33e2:	4603      	mov	r3, r0
    33e4:	e005      	b.n	33f2 <usb_d_ep_halt+0x42>
	} else {
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_GET);
    33e6:	79fb      	ldrb	r3, [r7, #7]
    33e8:	2102      	movs	r1, #2
    33ea:	4618      	mov	r0, r3
    33ec:	4b04      	ldr	r3, [pc, #16]	; (3400 <usb_d_ep_halt+0x50>)
    33ee:	4798      	blx	r3
    33f0:	4603      	mov	r3, r0
	}
}
    33f2:	4618      	mov	r0, r3
    33f4:	3708      	adds	r7, #8
    33f6:	46bd      	mov	sp, r7
    33f8:	bd80      	pop	{r7, pc}
    33fa:	bf00      	nop
    33fc:	0000332d 	.word	0x0000332d
    3400:	00009df1 	.word	0x00009df1

00003404 <usb_d_ep_register_callback>:

void usb_d_ep_register_callback(const uint8_t ep, const enum usb_d_ep_cb_type type, const FUNC_PTR func)
{
    3404:	b580      	push	{r7, lr}
    3406:	b086      	sub	sp, #24
    3408:	af00      	add	r7, sp, #0
    340a:	4603      	mov	r3, r0
    340c:	603a      	str	r2, [r7, #0]
    340e:	71fb      	strb	r3, [r7, #7]
    3410:	460b      	mov	r3, r1
    3412:	71bb      	strb	r3, [r7, #6]
	int8_t           ep_index = _usb_d_find_ep(ep);
    3414:	79fb      	ldrb	r3, [r7, #7]
    3416:	4618      	mov	r0, r3
    3418:	4b16      	ldr	r3, [pc, #88]	; (3474 <usb_d_ep_register_callback+0x70>)
    341a:	4798      	blx	r3
    341c:	4603      	mov	r3, r0
    341e:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    3420:	f997 3017 	ldrsb.w	r3, [r7, #23]
    3424:	015b      	lsls	r3, r3, #5
    3426:	4a14      	ldr	r2, [pc, #80]	; (3478 <usb_d_ep_register_callback+0x74>)
    3428:	4413      	add	r3, r2
    342a:	613b      	str	r3, [r7, #16]
	FUNC_PTR         f        = func ? (FUNC_PTR)func : (FUNC_PTR)usb_d_dummy_cb_false;
    342c:	683b      	ldr	r3, [r7, #0]
    342e:	2b00      	cmp	r3, #0
    3430:	d001      	beq.n	3436 <usb_d_ep_register_callback+0x32>
    3432:	683b      	ldr	r3, [r7, #0]
    3434:	e000      	b.n	3438 <usb_d_ep_register_callback+0x34>
    3436:	4b11      	ldr	r3, [pc, #68]	; (347c <usb_d_ep_register_callback+0x78>)
    3438:	60fb      	str	r3, [r7, #12]
	if (ep_index < 0) {
    343a:	f997 3017 	ldrsb.w	r3, [r7, #23]
    343e:	2b00      	cmp	r3, #0
    3440:	db13      	blt.n	346a <usb_d_ep_register_callback+0x66>
		return;
	}
	switch (type) {
    3442:	79bb      	ldrb	r3, [r7, #6]
    3444:	2b01      	cmp	r3, #1
    3446:	d008      	beq.n	345a <usb_d_ep_register_callback+0x56>
    3448:	2b02      	cmp	r3, #2
    344a:	d00a      	beq.n	3462 <usb_d_ep_register_callback+0x5e>
    344c:	2b00      	cmp	r3, #0
    344e:	d000      	beq.n	3452 <usb_d_ep_register_callback+0x4e>
		break;
	case USB_D_EP_CB_XFER:
		ept->callbacks.xfer = (usb_d_ep_cb_xfer_t)f;
		break;
	default:
		break;
    3450:	e00c      	b.n	346c <usb_d_ep_register_callback+0x68>
		ept->callbacks.req = (usb_d_ep_cb_setup_t)f;
    3452:	693b      	ldr	r3, [r7, #16]
    3454:	68fa      	ldr	r2, [r7, #12]
    3456:	615a      	str	r2, [r3, #20]
		break;
    3458:	e008      	b.n	346c <usb_d_ep_register_callback+0x68>
		ept->callbacks.more = (usb_d_ep_cb_more_t)f;
    345a:	693b      	ldr	r3, [r7, #16]
    345c:	68fa      	ldr	r2, [r7, #12]
    345e:	619a      	str	r2, [r3, #24]
		break;
    3460:	e004      	b.n	346c <usb_d_ep_register_callback+0x68>
		ept->callbacks.xfer = (usb_d_ep_cb_xfer_t)f;
    3462:	693b      	ldr	r3, [r7, #16]
    3464:	68fa      	ldr	r2, [r7, #12]
    3466:	61da      	str	r2, [r3, #28]
		break;
    3468:	e000      	b.n	346c <usb_d_ep_register_callback+0x68>
		return;
    346a:	bf00      	nop
	}
}
    346c:	3718      	adds	r7, #24
    346e:	46bd      	mov	sp, r7
    3470:	bd80      	pop	{r7, pc}
    3472:	bf00      	nop
    3474:	00002b81 	.word	0x00002b81
    3478:	20000630 	.word	0x20000630
    347c:	00002c55 	.word	0x00002c55

00003480 <assert>:

/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
    3480:	b480      	push	{r7}
    3482:	b085      	sub	sp, #20
    3484:	af00      	add	r7, sp, #0
    3486:	4603      	mov	r3, r0
    3488:	60b9      	str	r1, [r7, #8]
    348a:	607a      	str	r2, [r7, #4]
    348c:	73fb      	strb	r3, [r7, #15]
	if (!(condition)) {
    348e:	7bfb      	ldrb	r3, [r7, #15]
    3490:	f083 0301 	eor.w	r3, r3, #1
    3494:	b2db      	uxtb	r3, r3
    3496:	2b00      	cmp	r3, #0
    3498:	d000      	beq.n	349c <assert+0x1c>
		__asm("BKPT #0");
    349a:	be00      	bkpt	0x0000
	}
	(void)file;
	(void)line;
}
    349c:	bf00      	nop
    349e:	3714      	adds	r7, #20
    34a0:	46bd      	mov	sp, r7
    34a2:	f85d 7b04 	ldr.w	r7, [sp], #4
    34a6:	4770      	bx	lr

000034a8 <is_list_element>:

/**
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
    34a8:	b480      	push	{r7}
    34aa:	b085      	sub	sp, #20
    34ac:	af00      	add	r7, sp, #0
    34ae:	6078      	str	r0, [r7, #4]
    34b0:	6039      	str	r1, [r7, #0]
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
    34b2:	687b      	ldr	r3, [r7, #4]
    34b4:	681b      	ldr	r3, [r3, #0]
    34b6:	60fb      	str	r3, [r7, #12]
    34b8:	e008      	b.n	34cc <is_list_element+0x24>
		if (it == element) {
    34ba:	68fa      	ldr	r2, [r7, #12]
    34bc:	683b      	ldr	r3, [r7, #0]
    34be:	429a      	cmp	r2, r3
    34c0:	d101      	bne.n	34c6 <is_list_element+0x1e>
			return true;
    34c2:	2301      	movs	r3, #1
    34c4:	e006      	b.n	34d4 <is_list_element+0x2c>
	for (it = list->head; it; it = it->next) {
    34c6:	68fb      	ldr	r3, [r7, #12]
    34c8:	681b      	ldr	r3, [r3, #0]
    34ca:	60fb      	str	r3, [r7, #12]
    34cc:	68fb      	ldr	r3, [r7, #12]
    34ce:	2b00      	cmp	r3, #0
    34d0:	d1f3      	bne.n	34ba <is_list_element+0x12>
		}
	}

	return false;
    34d2:	2300      	movs	r3, #0
}
    34d4:	4618      	mov	r0, r3
    34d6:	3714      	adds	r7, #20
    34d8:	46bd      	mov	sp, r7
    34da:	f85d 7b04 	ldr.w	r7, [sp], #4
    34de:	4770      	bx	lr

000034e0 <list_insert_as_head>:

/**
 * \brief Insert an element as list head
 */
void list_insert_as_head(struct list_descriptor *const list, void *const element)
{
    34e0:	b580      	push	{r7, lr}
    34e2:	b082      	sub	sp, #8
    34e4:	af00      	add	r7, sp, #0
    34e6:	6078      	str	r0, [r7, #4]
    34e8:	6039      	str	r1, [r7, #0]
	ASSERT(!is_list_element(list, element));
    34ea:	6839      	ldr	r1, [r7, #0]
    34ec:	6878      	ldr	r0, [r7, #4]
    34ee:	4b0f      	ldr	r3, [pc, #60]	; (352c <list_insert_as_head+0x4c>)
    34f0:	4798      	blx	r3
    34f2:	4603      	mov	r3, r0
    34f4:	2b00      	cmp	r3, #0
    34f6:	bf14      	ite	ne
    34f8:	2301      	movne	r3, #1
    34fa:	2300      	moveq	r3, #0
    34fc:	b2db      	uxtb	r3, r3
    34fe:	f083 0301 	eor.w	r3, r3, #1
    3502:	b2db      	uxtb	r3, r3
    3504:	f003 0301 	and.w	r3, r3, #1
    3508:	b2db      	uxtb	r3, r3
    350a:	2239      	movs	r2, #57	; 0x39
    350c:	4908      	ldr	r1, [pc, #32]	; (3530 <list_insert_as_head+0x50>)
    350e:	4618      	mov	r0, r3
    3510:	4b08      	ldr	r3, [pc, #32]	; (3534 <list_insert_as_head+0x54>)
    3512:	4798      	blx	r3

	((struct list_element *)element)->next = list->head;
    3514:	687b      	ldr	r3, [r7, #4]
    3516:	681a      	ldr	r2, [r3, #0]
    3518:	683b      	ldr	r3, [r7, #0]
    351a:	601a      	str	r2, [r3, #0]
	list->head                             = (struct list_element *)element;
    351c:	687b      	ldr	r3, [r7, #4]
    351e:	683a      	ldr	r2, [r7, #0]
    3520:	601a      	str	r2, [r3, #0]
}
    3522:	bf00      	nop
    3524:	3708      	adds	r7, #8
    3526:	46bd      	mov	sp, r7
    3528:	bd80      	pop	{r7, pc}
    352a:	bf00      	nop
    352c:	000034a9 	.word	0x000034a9
    3530:	0000cca0 	.word	0x0000cca0
    3534:	00003481 	.word	0x00003481

00003538 <list_insert_after>:

/**
 * \brief Insert an element after the given list element
 */
void list_insert_after(void *const after, void *const element)
{
    3538:	b480      	push	{r7}
    353a:	b083      	sub	sp, #12
    353c:	af00      	add	r7, sp, #0
    353e:	6078      	str	r0, [r7, #4]
    3540:	6039      	str	r1, [r7, #0]
	((struct list_element *)element)->next = ((struct list_element *)after)->next;
    3542:	687b      	ldr	r3, [r7, #4]
    3544:	681a      	ldr	r2, [r3, #0]
    3546:	683b      	ldr	r3, [r7, #0]
    3548:	601a      	str	r2, [r3, #0]
	((struct list_element *)after)->next   = (struct list_element *)element;
    354a:	687b      	ldr	r3, [r7, #4]
    354c:	683a      	ldr	r2, [r7, #0]
    354e:	601a      	str	r2, [r3, #0]
}
    3550:	bf00      	nop
    3552:	370c      	adds	r7, #12
    3554:	46bd      	mov	sp, r7
    3556:	f85d 7b04 	ldr.w	r7, [sp], #4
    355a:	4770      	bx	lr

0000355c <list_insert_at_end>:

/**
 * \brief Insert an element at list end
 */
void list_insert_at_end(struct list_descriptor *const list, void *const element)
{
    355c:	b580      	push	{r7, lr}
    355e:	b084      	sub	sp, #16
    3560:	af00      	add	r7, sp, #0
    3562:	6078      	str	r0, [r7, #4]
    3564:	6039      	str	r1, [r7, #0]
	struct list_element *it = list->head;
    3566:	687b      	ldr	r3, [r7, #4]
    3568:	681b      	ldr	r3, [r3, #0]
    356a:	60fb      	str	r3, [r7, #12]

	ASSERT(!is_list_element(list, element));
    356c:	6839      	ldr	r1, [r7, #0]
    356e:	6878      	ldr	r0, [r7, #4]
    3570:	4b16      	ldr	r3, [pc, #88]	; (35cc <list_insert_at_end+0x70>)
    3572:	4798      	blx	r3
    3574:	4603      	mov	r3, r0
    3576:	2b00      	cmp	r3, #0
    3578:	bf14      	ite	ne
    357a:	2301      	movne	r3, #1
    357c:	2300      	moveq	r3, #0
    357e:	b2db      	uxtb	r3, r3
    3580:	f083 0301 	eor.w	r3, r3, #1
    3584:	b2db      	uxtb	r3, r3
    3586:	f003 0301 	and.w	r3, r3, #1
    358a:	b2db      	uxtb	r3, r3
    358c:	224f      	movs	r2, #79	; 0x4f
    358e:	4910      	ldr	r1, [pc, #64]	; (35d0 <list_insert_at_end+0x74>)
    3590:	4618      	mov	r0, r3
    3592:	4b10      	ldr	r3, [pc, #64]	; (35d4 <list_insert_at_end+0x78>)
    3594:	4798      	blx	r3

	if (!list->head) {
    3596:	687b      	ldr	r3, [r7, #4]
    3598:	681b      	ldr	r3, [r3, #0]
    359a:	2b00      	cmp	r3, #0
    359c:	d109      	bne.n	35b2 <list_insert_at_end+0x56>
		list->head                             = (struct list_element *)element;
    359e:	687b      	ldr	r3, [r7, #4]
    35a0:	683a      	ldr	r2, [r7, #0]
    35a2:	601a      	str	r2, [r3, #0]
		((struct list_element *)element)->next = NULL;
    35a4:	683b      	ldr	r3, [r7, #0]
    35a6:	2200      	movs	r2, #0
    35a8:	601a      	str	r2, [r3, #0]
		return;
    35aa:	e00c      	b.n	35c6 <list_insert_at_end+0x6a>
	}

	while (it->next) {
		it = it->next;
    35ac:	68fb      	ldr	r3, [r7, #12]
    35ae:	681b      	ldr	r3, [r3, #0]
    35b0:	60fb      	str	r3, [r7, #12]
	while (it->next) {
    35b2:	68fb      	ldr	r3, [r7, #12]
    35b4:	681b      	ldr	r3, [r3, #0]
    35b6:	2b00      	cmp	r3, #0
    35b8:	d1f8      	bne.n	35ac <list_insert_at_end+0x50>
	}
	it->next                               = (struct list_element *)element;
    35ba:	68fb      	ldr	r3, [r7, #12]
    35bc:	683a      	ldr	r2, [r7, #0]
    35be:	601a      	str	r2, [r3, #0]
	((struct list_element *)element)->next = NULL;
    35c0:	683b      	ldr	r3, [r7, #0]
    35c2:	2200      	movs	r2, #0
    35c4:	601a      	str	r2, [r3, #0]
}
    35c6:	3710      	adds	r7, #16
    35c8:	46bd      	mov	sp, r7
    35ca:	bd80      	pop	{r7, pc}
    35cc:	000034a9 	.word	0x000034a9
    35d0:	0000cca0 	.word	0x0000cca0
    35d4:	00003481 	.word	0x00003481

000035d8 <list_remove_head>:

/**
 * \brief Removes list head
 */
void *list_remove_head(struct list_descriptor *const list)
{
    35d8:	b480      	push	{r7}
    35da:	b085      	sub	sp, #20
    35dc:	af00      	add	r7, sp, #0
    35de:	6078      	str	r0, [r7, #4]
	if (list->head) {
    35e0:	687b      	ldr	r3, [r7, #4]
    35e2:	681b      	ldr	r3, [r3, #0]
    35e4:	2b00      	cmp	r3, #0
    35e6:	d009      	beq.n	35fc <list_remove_head+0x24>
		struct list_element *tmp = list->head;
    35e8:	687b      	ldr	r3, [r7, #4]
    35ea:	681b      	ldr	r3, [r3, #0]
    35ec:	60fb      	str	r3, [r7, #12]

		list->head = list->head->next;
    35ee:	687b      	ldr	r3, [r7, #4]
    35f0:	681b      	ldr	r3, [r3, #0]
    35f2:	681a      	ldr	r2, [r3, #0]
    35f4:	687b      	ldr	r3, [r7, #4]
    35f6:	601a      	str	r2, [r3, #0]
		return (void *)tmp;
    35f8:	68fb      	ldr	r3, [r7, #12]
    35fa:	e000      	b.n	35fe <list_remove_head+0x26>
	}

	return NULL;
    35fc:	2300      	movs	r3, #0
}
    35fe:	4618      	mov	r0, r3
    3600:	3714      	adds	r7, #20
    3602:	46bd      	mov	sp, r7
    3604:	f85d 7b04 	ldr.w	r7, [sp], #4
    3608:	4770      	bx	lr
	...

0000360c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
    360c:	b480      	push	{r7}
    360e:	b083      	sub	sp, #12
    3610:	af00      	add	r7, sp, #0
    3612:	4603      	mov	r3, r0
    3614:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    3616:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    361a:	2b00      	cmp	r3, #0
    361c:	db0b      	blt.n	3636 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    361e:	4909      	ldr	r1, [pc, #36]	; (3644 <__NVIC_EnableIRQ+0x38>)
    3620:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    3624:	095b      	lsrs	r3, r3, #5
    3626:	88fa      	ldrh	r2, [r7, #6]
    3628:	f002 021f 	and.w	r2, r2, #31
    362c:	2001      	movs	r0, #1
    362e:	fa00 f202 	lsl.w	r2, r0, r2
    3632:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
    3636:	bf00      	nop
    3638:	370c      	adds	r7, #12
    363a:	46bd      	mov	sp, r7
    363c:	f85d 7b04 	ldr.w	r7, [sp], #4
    3640:	4770      	bx	lr
    3642:	bf00      	nop
    3644:	e000e100 	.word	0xe000e100

00003648 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
    3648:	b480      	push	{r7}
    364a:	b083      	sub	sp, #12
    364c:	af00      	add	r7, sp, #0
    364e:	4603      	mov	r3, r0
    3650:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    3652:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    3656:	2b00      	cmp	r3, #0
    3658:	db10      	blt.n	367c <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    365a:	490b      	ldr	r1, [pc, #44]	; (3688 <__NVIC_DisableIRQ+0x40>)
    365c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    3660:	095b      	lsrs	r3, r3, #5
    3662:	88fa      	ldrh	r2, [r7, #6]
    3664:	f002 021f 	and.w	r2, r2, #31
    3668:	2001      	movs	r0, #1
    366a:	fa00 f202 	lsl.w	r2, r0, r2
    366e:	3320      	adds	r3, #32
    3670:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    3674:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    3678:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
    367c:	bf00      	nop
    367e:	370c      	adds	r7, #12
    3680:	46bd      	mov	sp, r7
    3682:	f85d 7b04 	ldr.w	r7, [sp], #4
    3686:	4770      	bx	lr
    3688:	e000e100 	.word	0xe000e100

0000368c <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
    368c:	b480      	push	{r7}
    368e:	b083      	sub	sp, #12
    3690:	af00      	add	r7, sp, #0
    3692:	4603      	mov	r3, r0
    3694:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    3696:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    369a:	2b00      	cmp	r3, #0
    369c:	db0c      	blt.n	36b8 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    369e:	4909      	ldr	r1, [pc, #36]	; (36c4 <__NVIC_ClearPendingIRQ+0x38>)
    36a0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    36a4:	095b      	lsrs	r3, r3, #5
    36a6:	88fa      	ldrh	r2, [r7, #6]
    36a8:	f002 021f 	and.w	r2, r2, #31
    36ac:	2001      	movs	r0, #1
    36ae:	fa00 f202 	lsl.w	r2, r0, r2
    36b2:	3360      	adds	r3, #96	; 0x60
    36b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
    36b8:	bf00      	nop
    36ba:	370c      	adds	r7, #12
    36bc:	46bd      	mov	sp, r7
    36be:	f85d 7b04 	ldr.w	r7, [sp], #4
    36c2:	4770      	bx	lr
    36c4:	e000e100 	.word	0xe000e100

000036c8 <hri_can_get_PSR_EP_bit>:
{
	return ((Can *)hw)->ECR.reg;
}

static inline bool hri_can_get_PSR_EP_bit(const void *const hw)
{
    36c8:	b480      	push	{r7}
    36ca:	b083      	sub	sp, #12
    36cc:	af00      	add	r7, sp, #0
    36ce:	6078      	str	r0, [r7, #4]
	return (((Can *)hw)->PSR.reg & CAN_PSR_EP) >> CAN_PSR_EP_Pos;
    36d0:	687b      	ldr	r3, [r7, #4]
    36d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    36d4:	095b      	lsrs	r3, r3, #5
    36d6:	f003 0301 	and.w	r3, r3, #1
    36da:	2b00      	cmp	r3, #0
    36dc:	bf14      	ite	ne
    36de:	2301      	movne	r3, #1
    36e0:	2300      	moveq	r3, #0
    36e2:	b2db      	uxtb	r3, r3
}
    36e4:	4618      	mov	r0, r3
    36e6:	370c      	adds	r7, #12
    36e8:	46bd      	mov	sp, r7
    36ea:	f85d 7b04 	ldr.w	r7, [sp], #4
    36ee:	4770      	bx	lr

000036f0 <hri_can_write_MRCFG_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_MRCFG_reg(const void *const hw, hri_can_mrcfg_reg_t data)
{
    36f0:	b480      	push	{r7}
    36f2:	b083      	sub	sp, #12
    36f4:	af00      	add	r7, sp, #0
    36f6:	6078      	str	r0, [r7, #4]
    36f8:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->MRCFG.reg = data;
    36fa:	687b      	ldr	r3, [r7, #4]
    36fc:	683a      	ldr	r2, [r7, #0]
    36fe:	609a      	str	r2, [r3, #8]
	CAN_CRITICAL_SECTION_LEAVE();
}
    3700:	bf00      	nop
    3702:	370c      	adds	r7, #12
    3704:	46bd      	mov	sp, r7
    3706:	f85d 7b04 	ldr.w	r7, [sp], #4
    370a:	4770      	bx	lr

0000370c <hri_can_write_DBTP_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_DBTP_reg(const void *const hw, hri_can_dbtp_reg_t data)
{
    370c:	b480      	push	{r7}
    370e:	b083      	sub	sp, #12
    3710:	af00      	add	r7, sp, #0
    3712:	6078      	str	r0, [r7, #4]
    3714:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->DBTP.reg = data;
    3716:	687b      	ldr	r3, [r7, #4]
    3718:	683a      	ldr	r2, [r7, #0]
    371a:	60da      	str	r2, [r3, #12]
	CAN_CRITICAL_SECTION_LEAVE();
}
    371c:	bf00      	nop
    371e:	370c      	adds	r7, #12
    3720:	46bd      	mov	sp, r7
    3722:	f85d 7b04 	ldr.w	r7, [sp], #4
    3726:	4770      	bx	lr

00003728 <hri_can_set_CCCR_INIT_bit>:
{
	return ((Can *)hw)->RWD.reg;
}

static inline void hri_can_set_CCCR_INIT_bit(const void *const hw)
{
    3728:	b480      	push	{r7}
    372a:	b083      	sub	sp, #12
    372c:	af00      	add	r7, sp, #0
    372e:	6078      	str	r0, [r7, #4]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg |= CAN_CCCR_INIT;
    3730:	687b      	ldr	r3, [r7, #4]
    3732:	699b      	ldr	r3, [r3, #24]
    3734:	f043 0201 	orr.w	r2, r3, #1
    3738:	687b      	ldr	r3, [r7, #4]
    373a:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    373c:	bf00      	nop
    373e:	370c      	adds	r7, #12
    3740:	46bd      	mov	sp, r7
    3742:	f85d 7b04 	ldr.w	r7, [sp], #4
    3746:	4770      	bx	lr

00003748 <hri_can_get_CCCR_INIT_bit>:

static inline bool hri_can_get_CCCR_INIT_bit(const void *const hw)
{
    3748:	b480      	push	{r7}
    374a:	b085      	sub	sp, #20
    374c:	af00      	add	r7, sp, #0
    374e:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Can *)hw)->CCCR.reg;
    3750:	687b      	ldr	r3, [r7, #4]
    3752:	699b      	ldr	r3, [r3, #24]
    3754:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & CAN_CCCR_INIT) >> CAN_CCCR_INIT_Pos;
    3756:	68fb      	ldr	r3, [r7, #12]
    3758:	f003 0301 	and.w	r3, r3, #1
    375c:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    375e:	68fb      	ldr	r3, [r7, #12]
    3760:	2b00      	cmp	r3, #0
    3762:	bf14      	ite	ne
    3764:	2301      	movne	r3, #1
    3766:	2300      	moveq	r3, #0
    3768:	b2db      	uxtb	r3, r3
}
    376a:	4618      	mov	r0, r3
    376c:	3714      	adds	r7, #20
    376e:	46bd      	mov	sp, r7
    3770:	f85d 7b04 	ldr.w	r7, [sp], #4
    3774:	4770      	bx	lr

00003776 <hri_can_clear_CCCR_INIT_bit>:
	((Can *)hw)->CCCR.reg = tmp;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline void hri_can_clear_CCCR_INIT_bit(const void *const hw)
{
    3776:	b480      	push	{r7}
    3778:	b083      	sub	sp, #12
    377a:	af00      	add	r7, sp, #0
    377c:	6078      	str	r0, [r7, #4]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg &= ~CAN_CCCR_INIT;
    377e:	687b      	ldr	r3, [r7, #4]
    3780:	699b      	ldr	r3, [r3, #24]
    3782:	f023 0201 	bic.w	r2, r3, #1
    3786:	687b      	ldr	r3, [r7, #4]
    3788:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    378a:	bf00      	nop
    378c:	370c      	adds	r7, #12
    378e:	46bd      	mov	sp, r7
    3790:	f85d 7b04 	ldr.w	r7, [sp], #4
    3794:	4770      	bx	lr

00003796 <hri_can_set_CCCR_CCE_bit>:
	((Can *)hw)->CCCR.reg ^= CAN_CCCR_INIT;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline void hri_can_set_CCCR_CCE_bit(const void *const hw)
{
    3796:	b480      	push	{r7}
    3798:	b083      	sub	sp, #12
    379a:	af00      	add	r7, sp, #0
    379c:	6078      	str	r0, [r7, #4]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg |= CAN_CCCR_CCE;
    379e:	687b      	ldr	r3, [r7, #4]
    37a0:	699b      	ldr	r3, [r3, #24]
    37a2:	f043 0202 	orr.w	r2, r3, #2
    37a6:	687b      	ldr	r3, [r7, #4]
    37a8:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    37aa:	bf00      	nop
    37ac:	370c      	adds	r7, #12
    37ae:	46bd      	mov	sp, r7
    37b0:	f85d 7b04 	ldr.w	r7, [sp], #4
    37b4:	4770      	bx	lr

000037b6 <hri_can_clear_CCCR_CCE_bit>:
	((Can *)hw)->CCCR.reg = tmp;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline void hri_can_clear_CCCR_CCE_bit(const void *const hw)
{
    37b6:	b480      	push	{r7}
    37b8:	b083      	sub	sp, #12
    37ba:	af00      	add	r7, sp, #0
    37bc:	6078      	str	r0, [r7, #4]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg &= ~CAN_CCCR_CCE;
    37be:	687b      	ldr	r3, [r7, #4]
    37c0:	699b      	ldr	r3, [r3, #24]
    37c2:	f023 0202 	bic.w	r2, r3, #2
    37c6:	687b      	ldr	r3, [r7, #4]
    37c8:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    37ca:	bf00      	nop
    37cc:	370c      	adds	r7, #12
    37ce:	46bd      	mov	sp, r7
    37d0:	f85d 7b04 	ldr.w	r7, [sp], #4
    37d4:	4770      	bx	lr

000037d6 <hri_can_set_CCCR_reg>:
	((Can *)hw)->CCCR.reg ^= CAN_CCCR_NISO;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline void hri_can_set_CCCR_reg(const void *const hw, hri_can_cccr_reg_t mask)
{
    37d6:	b480      	push	{r7}
    37d8:	b083      	sub	sp, #12
    37da:	af00      	add	r7, sp, #0
    37dc:	6078      	str	r0, [r7, #4]
    37de:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg |= mask;
    37e0:	687b      	ldr	r3, [r7, #4]
    37e2:	699a      	ldr	r2, [r3, #24]
    37e4:	683b      	ldr	r3, [r7, #0]
    37e6:	431a      	orrs	r2, r3
    37e8:	687b      	ldr	r3, [r7, #4]
    37ea:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    37ec:	bf00      	nop
    37ee:	370c      	adds	r7, #12
    37f0:	46bd      	mov	sp, r7
    37f2:	f85d 7b04 	ldr.w	r7, [sp], #4
    37f6:	4770      	bx	lr

000037f8 <hri_can_write_NBTP_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_NBTP_reg(const void *const hw, hri_can_nbtp_reg_t data)
{
    37f8:	b480      	push	{r7}
    37fa:	b083      	sub	sp, #12
    37fc:	af00      	add	r7, sp, #0
    37fe:	6078      	str	r0, [r7, #4]
    3800:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->NBTP.reg = data;
    3802:	687b      	ldr	r3, [r7, #4]
    3804:	683a      	ldr	r2, [r7, #0]
    3806:	61da      	str	r2, [r3, #28]
	CAN_CRITICAL_SECTION_LEAVE();
}
    3808:	bf00      	nop
    380a:	370c      	adds	r7, #12
    380c:	46bd      	mov	sp, r7
    380e:	f85d 7b04 	ldr.w	r7, [sp], #4
    3812:	4770      	bx	lr

00003814 <hri_can_write_IR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_IR_reg(const void *const hw, hri_can_ir_reg_t data)
{
    3814:	b480      	push	{r7}
    3816:	b083      	sub	sp, #12
    3818:	af00      	add	r7, sp, #0
    381a:	6078      	str	r0, [r7, #4]
    381c:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->IR.reg = data;
    381e:	687b      	ldr	r3, [r7, #4]
    3820:	683a      	ldr	r2, [r7, #0]
    3822:	651a      	str	r2, [r3, #80]	; 0x50
	CAN_CRITICAL_SECTION_LEAVE();
}
    3824:	bf00      	nop
    3826:	370c      	adds	r7, #12
    3828:	46bd      	mov	sp, r7
    382a:	f85d 7b04 	ldr.w	r7, [sp], #4
    382e:	4770      	bx	lr

00003830 <hri_can_read_IR_reg>:
	((Can *)hw)->IR.reg ^= mask;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline hri_can_ir_reg_t hri_can_read_IR_reg(const void *const hw)
{
    3830:	b480      	push	{r7}
    3832:	b083      	sub	sp, #12
    3834:	af00      	add	r7, sp, #0
    3836:	6078      	str	r0, [r7, #4]
	return ((Can *)hw)->IR.reg;
    3838:	687b      	ldr	r3, [r7, #4]
    383a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
}
    383c:	4618      	mov	r0, r3
    383e:	370c      	adds	r7, #12
    3840:	46bd      	mov	sp, r7
    3842:	f85d 7b04 	ldr.w	r7, [sp], #4
    3846:	4770      	bx	lr

00003848 <hri_can_write_ILE_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_ILE_reg(const void *const hw, hri_can_ile_reg_t data)
{
    3848:	b480      	push	{r7}
    384a:	b083      	sub	sp, #12
    384c:	af00      	add	r7, sp, #0
    384e:	6078      	str	r0, [r7, #4]
    3850:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->ILE.reg = data;
    3852:	687b      	ldr	r3, [r7, #4]
    3854:	683a      	ldr	r2, [r7, #0]
    3856:	65da      	str	r2, [r3, #92]	; 0x5c
	CAN_CRITICAL_SECTION_LEAVE();
}
    3858:	bf00      	nop
    385a:	370c      	adds	r7, #12
    385c:	46bd      	mov	sp, r7
    385e:	f85d 7b04 	ldr.w	r7, [sp], #4
    3862:	4770      	bx	lr

00003864 <hri_can_write_GFC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_GFC_reg(const void *const hw, hri_can_gfc_reg_t data)
{
    3864:	b480      	push	{r7}
    3866:	b083      	sub	sp, #12
    3868:	af00      	add	r7, sp, #0
    386a:	6078      	str	r0, [r7, #4]
    386c:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->GFC.reg = data;
    386e:	687b      	ldr	r3, [r7, #4]
    3870:	683a      	ldr	r2, [r7, #0]
    3872:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	CAN_CRITICAL_SECTION_LEAVE();
}
    3876:	bf00      	nop
    3878:	370c      	adds	r7, #12
    387a:	46bd      	mov	sp, r7
    387c:	f85d 7b04 	ldr.w	r7, [sp], #4
    3880:	4770      	bx	lr

00003882 <hri_can_write_SIDFC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_SIDFC_reg(const void *const hw, hri_can_sidfc_reg_t data)
{
    3882:	b480      	push	{r7}
    3884:	b083      	sub	sp, #12
    3886:	af00      	add	r7, sp, #0
    3888:	6078      	str	r0, [r7, #4]
    388a:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->SIDFC.reg = data;
    388c:	687b      	ldr	r3, [r7, #4]
    388e:	683a      	ldr	r2, [r7, #0]
    3890:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	CAN_CRITICAL_SECTION_LEAVE();
}
    3894:	bf00      	nop
    3896:	370c      	adds	r7, #12
    3898:	46bd      	mov	sp, r7
    389a:	f85d 7b04 	ldr.w	r7, [sp], #4
    389e:	4770      	bx	lr

000038a0 <hri_can_write_XIDFC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_XIDFC_reg(const void *const hw, hri_can_xidfc_reg_t data)
{
    38a0:	b480      	push	{r7}
    38a2:	b083      	sub	sp, #12
    38a4:	af00      	add	r7, sp, #0
    38a6:	6078      	str	r0, [r7, #4]
    38a8:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->XIDFC.reg = data;
    38aa:	687b      	ldr	r3, [r7, #4]
    38ac:	683a      	ldr	r2, [r7, #0]
    38ae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	CAN_CRITICAL_SECTION_LEAVE();
}
    38b2:	bf00      	nop
    38b4:	370c      	adds	r7, #12
    38b6:	46bd      	mov	sp, r7
    38b8:	f85d 7b04 	ldr.w	r7, [sp], #4
    38bc:	4770      	bx	lr

000038be <hri_can_write_XIDAM_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_XIDAM_reg(const void *const hw, hri_can_xidam_reg_t data)
{
    38be:	b480      	push	{r7}
    38c0:	b083      	sub	sp, #12
    38c2:	af00      	add	r7, sp, #0
    38c4:	6078      	str	r0, [r7, #4]
    38c6:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->XIDAM.reg = data;
    38c8:	687b      	ldr	r3, [r7, #4]
    38ca:	683a      	ldr	r2, [r7, #0]
    38cc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	CAN_CRITICAL_SECTION_LEAVE();
}
    38d0:	bf00      	nop
    38d2:	370c      	adds	r7, #12
    38d4:	46bd      	mov	sp, r7
    38d6:	f85d 7b04 	ldr.w	r7, [sp], #4
    38da:	4770      	bx	lr

000038dc <hri_can_write_RXF0C_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_RXF0C_reg(const void *const hw, hri_can_rxf0c_reg_t data)
{
    38dc:	b480      	push	{r7}
    38de:	b083      	sub	sp, #12
    38e0:	af00      	add	r7, sp, #0
    38e2:	6078      	str	r0, [r7, #4]
    38e4:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->RXF0C.reg = data;
    38e6:	687b      	ldr	r3, [r7, #4]
    38e8:	683a      	ldr	r2, [r7, #0]
    38ea:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	CAN_CRITICAL_SECTION_LEAVE();
}
    38ee:	bf00      	nop
    38f0:	370c      	adds	r7, #12
    38f2:	46bd      	mov	sp, r7
    38f4:	f85d 7b04 	ldr.w	r7, [sp], #4
    38f8:	4770      	bx	lr

000038fa <hri_can_write_RXESC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_RXESC_reg(const void *const hw, hri_can_rxesc_reg_t data)
{
    38fa:	b480      	push	{r7}
    38fc:	b083      	sub	sp, #12
    38fe:	af00      	add	r7, sp, #0
    3900:	6078      	str	r0, [r7, #4]
    3902:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->RXESC.reg = data;
    3904:	687b      	ldr	r3, [r7, #4]
    3906:	683a      	ldr	r2, [r7, #0]
    3908:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
	CAN_CRITICAL_SECTION_LEAVE();
}
    390c:	bf00      	nop
    390e:	370c      	adds	r7, #12
    3910:	46bd      	mov	sp, r7
    3912:	f85d 7b04 	ldr.w	r7, [sp], #4
    3916:	4770      	bx	lr

00003918 <hri_can_write_TXBC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_TXBC_reg(const void *const hw, hri_can_txbc_reg_t data)
{
    3918:	b480      	push	{r7}
    391a:	b083      	sub	sp, #12
    391c:	af00      	add	r7, sp, #0
    391e:	6078      	str	r0, [r7, #4]
    3920:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->TXBC.reg = data;
    3922:	687b      	ldr	r3, [r7, #4]
    3924:	683a      	ldr	r2, [r7, #0]
    3926:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	CAN_CRITICAL_SECTION_LEAVE();
}
    392a:	bf00      	nop
    392c:	370c      	adds	r7, #12
    392e:	46bd      	mov	sp, r7
    3930:	f85d 7b04 	ldr.w	r7, [sp], #4
    3934:	4770      	bx	lr

00003936 <hri_can_write_TXESC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_TXESC_reg(const void *const hw, hri_can_txesc_reg_t data)
{
    3936:	b480      	push	{r7}
    3938:	b083      	sub	sp, #12
    393a:	af00      	add	r7, sp, #0
    393c:	6078      	str	r0, [r7, #4]
    393e:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->TXESC.reg = data;
    3940:	687b      	ldr	r3, [r7, #4]
    3942:	683a      	ldr	r2, [r7, #0]
    3944:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	CAN_CRITICAL_SECTION_LEAVE();
}
    3948:	bf00      	nop
    394a:	370c      	adds	r7, #12
    394c:	46bd      	mov	sp, r7
    394e:	f85d 7b04 	ldr.w	r7, [sp], #4
    3952:	4770      	bx	lr

00003954 <hri_can_write_TXEFC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_TXEFC_reg(const void *const hw, hri_can_txefc_reg_t data)
{
    3954:	b480      	push	{r7}
    3956:	b083      	sub	sp, #12
    3958:	af00      	add	r7, sp, #0
    395a:	6078      	str	r0, [r7, #4]
    395c:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->TXEFC.reg = data;
    395e:	687b      	ldr	r3, [r7, #4]
    3960:	683a      	ldr	r2, [r7, #0]
    3962:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
	CAN_CRITICAL_SECTION_LEAVE();
}
    3966:	bf00      	nop
    3968:	370c      	adds	r7, #12
    396a:	46bd      	mov	sp, r7
    396c:	f85d 7b04 	ldr.w	r7, [sp], #4
    3970:	4770      	bx	lr
	...

00003974 <_can_async_init>:

/**
 * \brief Initialize CAN.
 */
int32_t _can_async_init(struct _can_async_device *const dev, void *const hw)
{
    3974:	b580      	push	{r7, lr}
    3976:	b082      	sub	sp, #8
    3978:	af00      	add	r7, sp, #0
    397a:	6078      	str	r0, [r7, #4]
    397c:	6039      	str	r1, [r7, #0]
	dev->hw = hw;
    397e:	687b      	ldr	r3, [r7, #4]
    3980:	683a      	ldr	r2, [r7, #0]
    3982:	601a      	str	r2, [r3, #0]
	hri_can_set_CCCR_INIT_bit(dev->hw);
    3984:	687b      	ldr	r3, [r7, #4]
    3986:	681b      	ldr	r3, [r3, #0]
    3988:	4618      	mov	r0, r3
    398a:	4b55      	ldr	r3, [pc, #340]	; (3ae0 <_can_async_init+0x16c>)
    398c:	4798      	blx	r3
	while (hri_can_get_CCCR_INIT_bit(dev->hw) == 0)
    398e:	bf00      	nop
    3990:	687b      	ldr	r3, [r7, #4]
    3992:	681b      	ldr	r3, [r3, #0]
    3994:	4618      	mov	r0, r3
    3996:	4b53      	ldr	r3, [pc, #332]	; (3ae4 <_can_async_init+0x170>)
    3998:	4798      	blx	r3
    399a:	4603      	mov	r3, r0
    399c:	f083 0301 	eor.w	r3, r3, #1
    39a0:	b2db      	uxtb	r3, r3
    39a2:	2b00      	cmp	r3, #0
    39a4:	d1f4      	bne.n	3990 <_can_async_init+0x1c>
		;
	hri_can_set_CCCR_CCE_bit(dev->hw);
    39a6:	687b      	ldr	r3, [r7, #4]
    39a8:	681b      	ldr	r3, [r3, #0]
    39aa:	4618      	mov	r0, r3
    39ac:	4b4e      	ldr	r3, [pc, #312]	; (3ae8 <_can_async_init+0x174>)
    39ae:	4798      	blx	r3
		hri_can_write_ILE_reg(dev->hw, CAN_ILE_EINT0);
	}
#endif

#ifdef CONF_CAN1_ENABLED
	if (hw == CAN1) {
    39b0:	683b      	ldr	r3, [r7, #0]
    39b2:	4a4e      	ldr	r2, [pc, #312]	; (3aec <_can_async_init+0x178>)
    39b4:	4293      	cmp	r3, r2
    39b6:	d17a      	bne.n	3aae <_can_async_init+0x13a>
		_can1_dev    = dev;
    39b8:	4a4d      	ldr	r2, [pc, #308]	; (3af0 <_can_async_init+0x17c>)
    39ba:	687b      	ldr	r3, [r7, #4]
    39bc:	6013      	str	r3, [r2, #0]
		dev->context = (void *)&_can1_context;
    39be:	687b      	ldr	r3, [r7, #4]
    39c0:	4a4c      	ldr	r2, [pc, #304]	; (3af4 <_can_async_init+0x180>)
    39c2:	619a      	str	r2, [r3, #24]
		hri_can_set_CCCR_reg(dev->hw, CONF_CAN1_CCCR_REG);
    39c4:	687b      	ldr	r3, [r7, #4]
    39c6:	681b      	ldr	r3, [r3, #0]
    39c8:	f44f 7140 	mov.w	r1, #768	; 0x300
    39cc:	4618      	mov	r0, r3
    39ce:	4b4a      	ldr	r3, [pc, #296]	; (3af8 <_can_async_init+0x184>)
    39d0:	4798      	blx	r3
		hri_can_write_MRCFG_reg(dev->hw, CONF_CAN1_MRCFG_REG);
    39d2:	687b      	ldr	r3, [r7, #4]
    39d4:	681b      	ldr	r3, [r3, #0]
    39d6:	2102      	movs	r1, #2
    39d8:	4618      	mov	r0, r3
    39da:	4b48      	ldr	r3, [pc, #288]	; (3afc <_can_async_init+0x188>)
    39dc:	4798      	blx	r3
		hri_can_write_NBTP_reg(dev->hw, CONF_CAN1_BTP_REG);
    39de:	687b      	ldr	r3, [r7, #4]
    39e0:	681b      	ldr	r3, [r3, #0]
    39e2:	4947      	ldr	r1, [pc, #284]	; (3b00 <_can_async_init+0x18c>)
    39e4:	4618      	mov	r0, r3
    39e6:	4b47      	ldr	r3, [pc, #284]	; (3b04 <_can_async_init+0x190>)
    39e8:	4798      	blx	r3
		hri_can_write_DBTP_reg(dev->hw, CONF_CAN1_DBTP_REG);
    39ea:	687b      	ldr	r3, [r7, #4]
    39ec:	681b      	ldr	r3, [r3, #0]
    39ee:	4946      	ldr	r1, [pc, #280]	; (3b08 <_can_async_init+0x194>)
    39f0:	4618      	mov	r0, r3
    39f2:	4b46      	ldr	r3, [pc, #280]	; (3b0c <_can_async_init+0x198>)
    39f4:	4798      	blx	r3
		hri_can_write_RXF0C_reg(dev->hw, CONF_CAN1_RXF0C_REG | CAN_RXF0C_F0SA((uint32_t)can1_rx_fifo));
    39f6:	687b      	ldr	r3, [r7, #4]
    39f8:	681a      	ldr	r2, [r3, #0]
    39fa:	4b45      	ldr	r3, [pc, #276]	; (3b10 <_can_async_init+0x19c>)
    39fc:	b29b      	uxth	r3, r3
    39fe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    3a02:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    3a06:	4619      	mov	r1, r3
    3a08:	4610      	mov	r0, r2
    3a0a:	4b42      	ldr	r3, [pc, #264]	; (3b14 <_can_async_init+0x1a0>)
    3a0c:	4798      	blx	r3
		hri_can_write_RXESC_reg(dev->hw, CONF_CAN1_RXESC_REG);
    3a0e:	687b      	ldr	r3, [r7, #4]
    3a10:	681b      	ldr	r3, [r3, #0]
    3a12:	2107      	movs	r1, #7
    3a14:	4618      	mov	r0, r3
    3a16:	4b40      	ldr	r3, [pc, #256]	; (3b18 <_can_async_init+0x1a4>)
    3a18:	4798      	blx	r3
		hri_can_write_TXESC_reg(dev->hw, CONF_CAN1_TXESC_REG);
    3a1a:	687b      	ldr	r3, [r7, #4]
    3a1c:	681b      	ldr	r3, [r3, #0]
    3a1e:	2107      	movs	r1, #7
    3a20:	4618      	mov	r0, r3
    3a22:	4b3e      	ldr	r3, [pc, #248]	; (3b1c <_can_async_init+0x1a8>)
    3a24:	4798      	blx	r3
		hri_can_write_TXBC_reg(dev->hw, CONF_CAN1_TXBC_REG | CAN_TXBC_TBSA((uint32_t)can1_tx_fifo));
    3a26:	687b      	ldr	r3, [r7, #4]
    3a28:	681a      	ldr	r2, [r3, #0]
    3a2a:	4b3d      	ldr	r3, [pc, #244]	; (3b20 <_can_async_init+0x1ac>)
    3a2c:	b29b      	uxth	r3, r3
    3a2e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    3a32:	4619      	mov	r1, r3
    3a34:	4610      	mov	r0, r2
    3a36:	4b3b      	ldr	r3, [pc, #236]	; (3b24 <_can_async_init+0x1b0>)
    3a38:	4798      	blx	r3
		hri_can_write_TXEFC_reg(dev->hw, CONF_CAN1_TXEFC_REG | CAN_TXEFC_EFSA((uint32_t)can1_tx_event_fifo));
    3a3a:	687b      	ldr	r3, [r7, #4]
    3a3c:	681a      	ldr	r2, [r3, #0]
    3a3e:	4b3a      	ldr	r3, [pc, #232]	; (3b28 <_can_async_init+0x1b4>)
    3a40:	b29b      	uxth	r3, r3
    3a42:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    3a46:	4619      	mov	r1, r3
    3a48:	4610      	mov	r0, r2
    3a4a:	4b38      	ldr	r3, [pc, #224]	; (3b2c <_can_async_init+0x1b8>)
    3a4c:	4798      	blx	r3
		hri_can_write_GFC_reg(dev->hw, CONF_CAN1_GFC_REG);
    3a4e:	687b      	ldr	r3, [r7, #4]
    3a50:	681b      	ldr	r3, [r3, #0]
    3a52:	2108      	movs	r1, #8
    3a54:	4618      	mov	r0, r3
    3a56:	4b36      	ldr	r3, [pc, #216]	; (3b30 <_can_async_init+0x1bc>)
    3a58:	4798      	blx	r3
		hri_can_write_SIDFC_reg(dev->hw, CONF_CAN1_SIDFC_REG | CAN_SIDFC_FLSSA((uint32_t)can1_rx_std_filter));
    3a5a:	687b      	ldr	r3, [r7, #4]
    3a5c:	681a      	ldr	r2, [r3, #0]
    3a5e:	4b35      	ldr	r3, [pc, #212]	; (3b34 <_can_async_init+0x1c0>)
    3a60:	b29b      	uxth	r3, r3
    3a62:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
    3a66:	4619      	mov	r1, r3
    3a68:	4610      	mov	r0, r2
    3a6a:	4b33      	ldr	r3, [pc, #204]	; (3b38 <_can_async_init+0x1c4>)
    3a6c:	4798      	blx	r3
		hri_can_write_XIDFC_reg(dev->hw, CONF_CAN1_XIDFC_REG | CAN_XIDFC_FLESA((uint32_t)can1_rx_ext_filter));
    3a6e:	687b      	ldr	r3, [r7, #4]
    3a70:	681a      	ldr	r2, [r3, #0]
    3a72:	4b32      	ldr	r3, [pc, #200]	; (3b3c <_can_async_init+0x1c8>)
    3a74:	b29b      	uxth	r3, r3
    3a76:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    3a7a:	4619      	mov	r1, r3
    3a7c:	4610      	mov	r0, r2
    3a7e:	4b30      	ldr	r3, [pc, #192]	; (3b40 <_can_async_init+0x1cc>)
    3a80:	4798      	blx	r3
		hri_can_write_XIDAM_reg(dev->hw, CONF_CAN1_XIDAM_REG);
    3a82:	687b      	ldr	r3, [r7, #4]
    3a84:	681b      	ldr	r3, [r3, #0]
    3a86:	f06f 4160 	mvn.w	r1, #3758096384	; 0xe0000000
    3a8a:	4618      	mov	r0, r3
    3a8c:	4b2d      	ldr	r3, [pc, #180]	; (3b44 <_can_async_init+0x1d0>)
    3a8e:	4798      	blx	r3

		NVIC_DisableIRQ(CAN1_IRQn);
    3a90:	204f      	movs	r0, #79	; 0x4f
    3a92:	4b2d      	ldr	r3, [pc, #180]	; (3b48 <_can_async_init+0x1d4>)
    3a94:	4798      	blx	r3
		NVIC_ClearPendingIRQ(CAN1_IRQn);
    3a96:	204f      	movs	r0, #79	; 0x4f
    3a98:	4b2c      	ldr	r3, [pc, #176]	; (3b4c <_can_async_init+0x1d8>)
    3a9a:	4798      	blx	r3
		NVIC_EnableIRQ(CAN1_IRQn);
    3a9c:	204f      	movs	r0, #79	; 0x4f
    3a9e:	4b2c      	ldr	r3, [pc, #176]	; (3b50 <_can_async_init+0x1dc>)
    3aa0:	4798      	blx	r3
		hri_can_write_ILE_reg(dev->hw, CAN_ILE_EINT0);
    3aa2:	687b      	ldr	r3, [r7, #4]
    3aa4:	681b      	ldr	r3, [r3, #0]
    3aa6:	2101      	movs	r1, #1
    3aa8:	4618      	mov	r0, r3
    3aaa:	4b2a      	ldr	r3, [pc, #168]	; (3b54 <_can_async_init+0x1e0>)
    3aac:	4798      	blx	r3
	}
#endif

	/* Disable CCE to prevent Configuration Change */
	hri_can_clear_CCCR_CCE_bit(dev->hw);
    3aae:	687b      	ldr	r3, [r7, #4]
    3ab0:	681b      	ldr	r3, [r3, #0]
    3ab2:	4618      	mov	r0, r3
    3ab4:	4b28      	ldr	r3, [pc, #160]	; (3b58 <_can_async_init+0x1e4>)
    3ab6:	4798      	blx	r3
	hri_can_clear_CCCR_INIT_bit(dev->hw);
    3ab8:	687b      	ldr	r3, [r7, #4]
    3aba:	681b      	ldr	r3, [r3, #0]
    3abc:	4618      	mov	r0, r3
    3abe:	4b27      	ldr	r3, [pc, #156]	; (3b5c <_can_async_init+0x1e8>)
    3ac0:	4798      	blx	r3
	while (hri_can_get_CCCR_INIT_bit(dev->hw)) {
    3ac2:	bf00      	nop
    3ac4:	687b      	ldr	r3, [r7, #4]
    3ac6:	681b      	ldr	r3, [r3, #0]
    3ac8:	4618      	mov	r0, r3
    3aca:	4b06      	ldr	r3, [pc, #24]	; (3ae4 <_can_async_init+0x170>)
    3acc:	4798      	blx	r3
    3ace:	4603      	mov	r3, r0
    3ad0:	2b00      	cmp	r3, #0
    3ad2:	d1f7      	bne.n	3ac4 <_can_async_init+0x150>
	};

	return ERR_NONE;
    3ad4:	2300      	movs	r3, #0
}
    3ad6:	4618      	mov	r0, r3
    3ad8:	3708      	adds	r7, #8
    3ada:	46bd      	mov	sp, r7
    3adc:	bd80      	pop	{r7, pc}
    3ade:	bf00      	nop
    3ae0:	00003729 	.word	0x00003729
    3ae4:	00003749 	.word	0x00003749
    3ae8:	00003797 	.word	0x00003797
    3aec:	42000400 	.word	0x42000400
    3af0:	20000750 	.word	0x20000750
    3af4:	20000004 	.word	0x20000004
    3af8:	000037d7 	.word	0x000037d7
    3afc:	000036f1 	.word	0x000036f1
    3b00:	00010c01 	.word	0x00010c01
    3b04:	000037f9 	.word	0x000037f9
    3b08:	00010c10 	.word	0x00010c10
    3b0c:	0000370d 	.word	0x0000370d
    3b10:	20000dfc 	.word	0x20000dfc
    3b14:	000038dd 	.word	0x000038dd
    3b18:	000038fb 	.word	0x000038fb
    3b1c:	00003937 	.word	0x00003937
    3b20:	20000db4 	.word	0x20000db4
    3b24:	00003919 	.word	0x00003919
    3b28:	200006b0 	.word	0x200006b0
    3b2c:	00003955 	.word	0x00003955
    3b30:	00003865 	.word	0x00003865
    3b34:	200006c0 	.word	0x200006c0
    3b38:	00003883 	.word	0x00003883
    3b3c:	20000740 	.word	0x20000740
    3b40:	000038a1 	.word	0x000038a1
    3b44:	000038bf 	.word	0x000038bf
    3b48:	00003649 	.word	0x00003649
    3b4c:	0000368d 	.word	0x0000368d
    3b50:	0000360d 	.word	0x0000360d
    3b54:	00003849 	.word	0x00003849
    3b58:	000037b7 	.word	0x000037b7
    3b5c:	00003777 	.word	0x00003777

00003b60 <CAN1_Handler>:

/*
 * \brief CAN interrupt handler
 */
void CAN1_Handler(void)
{
    3b60:	b590      	push	{r4, r7, lr}
    3b62:	b083      	sub	sp, #12
    3b64:	af00      	add	r7, sp, #0
	struct _can_async_device *dev = _can1_dev;
    3b66:	4b2c      	ldr	r3, [pc, #176]	; (3c18 <CAN1_Handler+0xb8>)
    3b68:	681b      	ldr	r3, [r3, #0]
    3b6a:	607b      	str	r3, [r7, #4]
	uint32_t                  ir;
	ir = hri_can_read_IR_reg(dev->hw);
    3b6c:	687b      	ldr	r3, [r7, #4]
    3b6e:	681b      	ldr	r3, [r3, #0]
    3b70:	4618      	mov	r0, r3
    3b72:	4b2a      	ldr	r3, [pc, #168]	; (3c1c <CAN1_Handler+0xbc>)
    3b74:	4798      	blx	r3
    3b76:	6038      	str	r0, [r7, #0]

	if (ir & CAN_IR_RF0N) {
    3b78:	683b      	ldr	r3, [r7, #0]
    3b7a:	f003 0301 	and.w	r3, r3, #1
    3b7e:	2b00      	cmp	r3, #0
    3b80:	d003      	beq.n	3b8a <CAN1_Handler+0x2a>
		dev->cb.rx_done(dev);
    3b82:	687b      	ldr	r3, [r7, #4]
    3b84:	689b      	ldr	r3, [r3, #8]
    3b86:	6878      	ldr	r0, [r7, #4]
    3b88:	4798      	blx	r3
	}

	if (ir & CAN_IR_TC) {
    3b8a:	683b      	ldr	r3, [r7, #0]
    3b8c:	f403 7300 	and.w	r3, r3, #512	; 0x200
    3b90:	2b00      	cmp	r3, #0
    3b92:	d003      	beq.n	3b9c <CAN1_Handler+0x3c>
		dev->cb.tx_done(dev);
    3b94:	687b      	ldr	r3, [r7, #4]
    3b96:	685b      	ldr	r3, [r3, #4]
    3b98:	6878      	ldr	r0, [r7, #4]
    3b9a:	4798      	blx	r3
	}

	if (ir & CAN_IR_BO) {
    3b9c:	683b      	ldr	r3, [r7, #0]
    3b9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    3ba2:	2b00      	cmp	r3, #0
    3ba4:	d004      	beq.n	3bb0 <CAN1_Handler+0x50>
		dev->cb.irq_handler(dev, CAN_IRQ_BO);
    3ba6:	687b      	ldr	r3, [r7, #4]
    3ba8:	68db      	ldr	r3, [r3, #12]
    3baa:	2103      	movs	r1, #3
    3bac:	6878      	ldr	r0, [r7, #4]
    3bae:	4798      	blx	r3
	}

	if (ir & CAN_IR_EW) {
    3bb0:	683b      	ldr	r3, [r7, #0]
    3bb2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
    3bb6:	2b00      	cmp	r3, #0
    3bb8:	d004      	beq.n	3bc4 <CAN1_Handler+0x64>
		dev->cb.irq_handler(dev, CAN_IRQ_EW);
    3bba:	687b      	ldr	r3, [r7, #4]
    3bbc:	68db      	ldr	r3, [r3, #12]
    3bbe:	2100      	movs	r1, #0
    3bc0:	6878      	ldr	r0, [r7, #4]
    3bc2:	4798      	blx	r3
	}

	if (ir & CAN_IR_EP) {
    3bc4:	683b      	ldr	r3, [r7, #0]
    3bc6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    3bca:	2b00      	cmp	r3, #0
    3bcc:	d00f      	beq.n	3bee <CAN1_Handler+0x8e>
		dev->cb.irq_handler(dev, hri_can_get_PSR_EP_bit(dev->hw) ? CAN_IRQ_EP : CAN_IRQ_EA);
    3bce:	687b      	ldr	r3, [r7, #4]
    3bd0:	68dc      	ldr	r4, [r3, #12]
    3bd2:	687b      	ldr	r3, [r7, #4]
    3bd4:	681b      	ldr	r3, [r3, #0]
    3bd6:	4618      	mov	r0, r3
    3bd8:	4b11      	ldr	r3, [pc, #68]	; (3c20 <CAN1_Handler+0xc0>)
    3bda:	4798      	blx	r3
    3bdc:	4603      	mov	r3, r0
    3bde:	2b00      	cmp	r3, #0
    3be0:	d001      	beq.n	3be6 <CAN1_Handler+0x86>
    3be2:	2302      	movs	r3, #2
    3be4:	e000      	b.n	3be8 <CAN1_Handler+0x88>
    3be6:	2301      	movs	r3, #1
    3be8:	4619      	mov	r1, r3
    3bea:	6878      	ldr	r0, [r7, #4]
    3bec:	47a0      	blx	r4
	}

	if (ir & CAN_IR_RF0L) {
    3bee:	683b      	ldr	r3, [r7, #0]
    3bf0:	f003 0308 	and.w	r3, r3, #8
    3bf4:	2b00      	cmp	r3, #0
    3bf6:	d004      	beq.n	3c02 <CAN1_Handler+0xa2>
		dev->cb.irq_handler(dev, CAN_IRQ_DO);
    3bf8:	687b      	ldr	r3, [r7, #4]
    3bfa:	68db      	ldr	r3, [r3, #12]
    3bfc:	2104      	movs	r1, #4
    3bfe:	6878      	ldr	r0, [r7, #4]
    3c00:	4798      	blx	r3
	}

	hri_can_write_IR_reg(dev->hw, ir);
    3c02:	687b      	ldr	r3, [r7, #4]
    3c04:	681b      	ldr	r3, [r3, #0]
    3c06:	6839      	ldr	r1, [r7, #0]
    3c08:	4618      	mov	r0, r3
    3c0a:	4b06      	ldr	r3, [pc, #24]	; (3c24 <CAN1_Handler+0xc4>)
    3c0c:	4798      	blx	r3
}
    3c0e:	bf00      	nop
    3c10:	370c      	adds	r7, #12
    3c12:	46bd      	mov	sp, r7
    3c14:	bd90      	pop	{r4, r7, pc}
    3c16:	bf00      	nop
    3c18:	20000750 	.word	0x20000750
    3c1c:	00003831 	.word	0x00003831
    3c20:	000036c9 	.word	0x000036c9
    3c24:	00003815 	.word	0x00003815

00003c28 <_get_cycles_for_us_internal>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of us
 */
static inline uint32_t _get_cycles_for_us_internal(const uint16_t us, const uint32_t freq, const uint8_t power)
{
    3c28:	b480      	push	{r7}
    3c2a:	b083      	sub	sp, #12
    3c2c:	af00      	add	r7, sp, #0
    3c2e:	4603      	mov	r3, r0
    3c30:	6039      	str	r1, [r7, #0]
    3c32:	80fb      	strh	r3, [r7, #6]
    3c34:	4613      	mov	r3, r2
    3c36:	717b      	strb	r3, [r7, #5]
	switch (power) {
    3c38:	797b      	ldrb	r3, [r7, #5]
    3c3a:	3b04      	subs	r3, #4
    3c3c:	2b05      	cmp	r3, #5
    3c3e:	d86b      	bhi.n	3d18 <_get_cycles_for_us_internal+0xf0>
    3c40:	a201      	add	r2, pc, #4	; (adr r2, 3c48 <_get_cycles_for_us_internal+0x20>)
    3c42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    3c46:	bf00      	nop
    3c48:	00003cf7 	.word	0x00003cf7
    3c4c:	00003cd7 	.word	0x00003cd7
    3c50:	00003cb9 	.word	0x00003cb9
    3c54:	00003c9b 	.word	0x00003c9b
    3c58:	00003c7d 	.word	0x00003c7d
    3c5c:	00003c61 	.word	0x00003c61
	case 9:
		return (us * (freq / 1000000) + 2) / 3;
    3c60:	88fb      	ldrh	r3, [r7, #6]
    3c62:	683a      	ldr	r2, [r7, #0]
    3c64:	4935      	ldr	r1, [pc, #212]	; (3d3c <_get_cycles_for_us_internal+0x114>)
    3c66:	fba1 1202 	umull	r1, r2, r1, r2
    3c6a:	0c92      	lsrs	r2, r2, #18
    3c6c:	fb02 f303 	mul.w	r3, r2, r3
    3c70:	3302      	adds	r3, #2
    3c72:	4a33      	ldr	r2, [pc, #204]	; (3d40 <_get_cycles_for_us_internal+0x118>)
    3c74:	fba2 2303 	umull	r2, r3, r2, r3
    3c78:	085b      	lsrs	r3, r3, #1
    3c7a:	e059      	b.n	3d30 <_get_cycles_for_us_internal+0x108>
	case 8:
		return (us * (freq / 100000) + 29) / 30;
    3c7c:	88fb      	ldrh	r3, [r7, #6]
    3c7e:	683a      	ldr	r2, [r7, #0]
    3c80:	0952      	lsrs	r2, r2, #5
    3c82:	4930      	ldr	r1, [pc, #192]	; (3d44 <_get_cycles_for_us_internal+0x11c>)
    3c84:	fba1 1202 	umull	r1, r2, r1, r2
    3c88:	09d2      	lsrs	r2, r2, #7
    3c8a:	fb02 f303 	mul.w	r3, r2, r3
    3c8e:	331d      	adds	r3, #29
    3c90:	4a2d      	ldr	r2, [pc, #180]	; (3d48 <_get_cycles_for_us_internal+0x120>)
    3c92:	fba2 2303 	umull	r2, r3, r2, r3
    3c96:	091b      	lsrs	r3, r3, #4
    3c98:	e04a      	b.n	3d30 <_get_cycles_for_us_internal+0x108>
	case 7:
		return (us * (freq / 10000) + 299) / 300;
    3c9a:	88fb      	ldrh	r3, [r7, #6]
    3c9c:	683a      	ldr	r2, [r7, #0]
    3c9e:	492b      	ldr	r1, [pc, #172]	; (3d4c <_get_cycles_for_us_internal+0x124>)
    3ca0:	fba1 1202 	umull	r1, r2, r1, r2
    3ca4:	0b52      	lsrs	r2, r2, #13
    3ca6:	fb02 f303 	mul.w	r3, r2, r3
    3caa:	f203 132b 	addw	r3, r3, #299	; 0x12b
    3cae:	4a28      	ldr	r2, [pc, #160]	; (3d50 <_get_cycles_for_us_internal+0x128>)
    3cb0:	fba2 2303 	umull	r2, r3, r2, r3
    3cb4:	095b      	lsrs	r3, r3, #5
    3cb6:	e03b      	b.n	3d30 <_get_cycles_for_us_internal+0x108>
	case 6:
		return (us * (freq / 1000) + 2999) / 3000;
    3cb8:	88fb      	ldrh	r3, [r7, #6]
    3cba:	683a      	ldr	r2, [r7, #0]
    3cbc:	4925      	ldr	r1, [pc, #148]	; (3d54 <_get_cycles_for_us_internal+0x12c>)
    3cbe:	fba1 1202 	umull	r1, r2, r1, r2
    3cc2:	0992      	lsrs	r2, r2, #6
    3cc4:	fb02 f303 	mul.w	r3, r2, r3
    3cc8:	f603 33b7 	addw	r3, r3, #2999	; 0xbb7
    3ccc:	4a22      	ldr	r2, [pc, #136]	; (3d58 <_get_cycles_for_us_internal+0x130>)
    3cce:	fba2 2303 	umull	r2, r3, r2, r3
    3cd2:	099b      	lsrs	r3, r3, #6
    3cd4:	e02c      	b.n	3d30 <_get_cycles_for_us_internal+0x108>
	case 5:
		return (us * (freq / 100) + 29999) / 30000;
    3cd6:	88fb      	ldrh	r3, [r7, #6]
    3cd8:	683a      	ldr	r2, [r7, #0]
    3cda:	4920      	ldr	r1, [pc, #128]	; (3d5c <_get_cycles_for_us_internal+0x134>)
    3cdc:	fba1 1202 	umull	r1, r2, r1, r2
    3ce0:	0952      	lsrs	r2, r2, #5
    3ce2:	fb02 f303 	mul.w	r3, r2, r3
    3ce6:	f503 43ea 	add.w	r3, r3, #29952	; 0x7500
    3cea:	332f      	adds	r3, #47	; 0x2f
    3cec:	4a1c      	ldr	r2, [pc, #112]	; (3d60 <_get_cycles_for_us_internal+0x138>)
    3cee:	fba2 2303 	umull	r2, r3, r2, r3
    3cf2:	0b5b      	lsrs	r3, r3, #13
    3cf4:	e01c      	b.n	3d30 <_get_cycles_for_us_internal+0x108>
	case 4:
		return (us * (freq / 10) + 299999) / 300000;
    3cf6:	88fb      	ldrh	r3, [r7, #6]
    3cf8:	683a      	ldr	r2, [r7, #0]
    3cfa:	491a      	ldr	r1, [pc, #104]	; (3d64 <_get_cycles_for_us_internal+0x13c>)
    3cfc:	fba1 1202 	umull	r1, r2, r1, r2
    3d00:	08d2      	lsrs	r2, r2, #3
    3d02:	fb02 f303 	mul.w	r3, r2, r3
    3d06:	f503 2392 	add.w	r3, r3, #299008	; 0x49000
    3d0a:	f203 33df 	addw	r3, r3, #991	; 0x3df
    3d0e:	4a16      	ldr	r2, [pc, #88]	; (3d68 <_get_cycles_for_us_internal+0x140>)
    3d10:	fba2 2303 	umull	r2, r3, r2, r3
    3d14:	0c5b      	lsrs	r3, r3, #17
    3d16:	e00b      	b.n	3d30 <_get_cycles_for_us_internal+0x108>
	default:
		return (us * freq + 2999999) / 3000000;
    3d18:	88fb      	ldrh	r3, [r7, #6]
    3d1a:	683a      	ldr	r2, [r7, #0]
    3d1c:	fb02 f303 	mul.w	r3, r2, r3
    3d20:	f503 1337 	add.w	r3, r3, #2998272	; 0x2dc000
    3d24:	f203 63bf 	addw	r3, r3, #1727	; 0x6bf
    3d28:	4a10      	ldr	r2, [pc, #64]	; (3d6c <_get_cycles_for_us_internal+0x144>)
    3d2a:	fba2 2303 	umull	r2, r3, r2, r3
    3d2e:	0c9b      	lsrs	r3, r3, #18
	}
}
    3d30:	4618      	mov	r0, r3
    3d32:	370c      	adds	r7, #12
    3d34:	46bd      	mov	sp, r7
    3d36:	f85d 7b04 	ldr.w	r7, [sp], #4
    3d3a:	4770      	bx	lr
    3d3c:	431bde83 	.word	0x431bde83
    3d40:	aaaaaaab 	.word	0xaaaaaaab
    3d44:	0a7c5ac5 	.word	0x0a7c5ac5
    3d48:	88888889 	.word	0x88888889
    3d4c:	d1b71759 	.word	0xd1b71759
    3d50:	1b4e81b5 	.word	0x1b4e81b5
    3d54:	10624dd3 	.word	0x10624dd3
    3d58:	057619f1 	.word	0x057619f1
    3d5c:	51eb851f 	.word	0x51eb851f
    3d60:	45e7b273 	.word	0x45e7b273
    3d64:	cccccccd 	.word	0xcccccccd
    3d68:	6fd91d85 	.word	0x6fd91d85
    3d6c:	165e9f81 	.word	0x165e9f81

00003d70 <_get_cycles_for_us>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of us
 */
uint32_t _get_cycles_for_us(const uint16_t us)
{
    3d70:	b580      	push	{r7, lr}
    3d72:	b082      	sub	sp, #8
    3d74:	af00      	add	r7, sp, #0
    3d76:	4603      	mov	r3, r0
    3d78:	80fb      	strh	r3, [r7, #6]
	return _get_cycles_for_us_internal(us, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
    3d7a:	88fb      	ldrh	r3, [r7, #6]
    3d7c:	2209      	movs	r2, #9
    3d7e:	4904      	ldr	r1, [pc, #16]	; (3d90 <_get_cycles_for_us+0x20>)
    3d80:	4618      	mov	r0, r3
    3d82:	4b04      	ldr	r3, [pc, #16]	; (3d94 <_get_cycles_for_us+0x24>)
    3d84:	4798      	blx	r3
    3d86:	4603      	mov	r3, r0
}
    3d88:	4618      	mov	r0, r3
    3d8a:	3708      	adds	r7, #8
    3d8c:	46bd      	mov	sp, r7
    3d8e:	bd80      	pop	{r7, pc}
    3d90:	07270e00 	.word	0x07270e00
    3d94:	00003c29 	.word	0x00003c29

00003d98 <_get_cycles_for_ms_internal>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
static inline uint32_t _get_cycles_for_ms_internal(const uint16_t ms, const uint32_t freq, const uint8_t power)
{
    3d98:	b480      	push	{r7}
    3d9a:	b083      	sub	sp, #12
    3d9c:	af00      	add	r7, sp, #0
    3d9e:	4603      	mov	r3, r0
    3da0:	6039      	str	r1, [r7, #0]
    3da2:	80fb      	strh	r3, [r7, #6]
    3da4:	4613      	mov	r3, r2
    3da6:	717b      	strb	r3, [r7, #5]
	switch (power) {
    3da8:	797b      	ldrb	r3, [r7, #5]
    3daa:	3b04      	subs	r3, #4
    3dac:	2b05      	cmp	r3, #5
    3dae:	d870      	bhi.n	3e92 <_get_cycles_for_ms_internal+0xfa>
    3db0:	a201      	add	r2, pc, #4	; (adr r2, 3db8 <_get_cycles_for_ms_internal+0x20>)
    3db2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    3db6:	bf00      	nop
    3db8:	00003e75 	.word	0x00003e75
    3dbc:	00003e59 	.word	0x00003e59
    3dc0:	00003e3d 	.word	0x00003e3d
    3dc4:	00003e19 	.word	0x00003e19
    3dc8:	00003df5 	.word	0x00003df5
    3dcc:	00003dd1 	.word	0x00003dd1
	case 9:
		return (ms * (freq / 1000000) + 2) / 3 * 1000;
    3dd0:	88fb      	ldrh	r3, [r7, #6]
    3dd2:	683a      	ldr	r2, [r7, #0]
    3dd4:	4937      	ldr	r1, [pc, #220]	; (3eb4 <_get_cycles_for_ms_internal+0x11c>)
    3dd6:	fba1 1202 	umull	r1, r2, r1, r2
    3dda:	0c92      	lsrs	r2, r2, #18
    3ddc:	fb02 f303 	mul.w	r3, r2, r3
    3de0:	3302      	adds	r3, #2
    3de2:	4a35      	ldr	r2, [pc, #212]	; (3eb8 <_get_cycles_for_ms_internal+0x120>)
    3de4:	fba2 2303 	umull	r2, r3, r2, r3
    3de8:	085b      	lsrs	r3, r3, #1
    3dea:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    3dee:	fb02 f303 	mul.w	r3, r2, r3
    3df2:	e058      	b.n	3ea6 <_get_cycles_for_ms_internal+0x10e>
	case 8:
		return (ms * (freq / 100000) + 2) / 3 * 100;
    3df4:	88fb      	ldrh	r3, [r7, #6]
    3df6:	683a      	ldr	r2, [r7, #0]
    3df8:	0952      	lsrs	r2, r2, #5
    3dfa:	4930      	ldr	r1, [pc, #192]	; (3ebc <_get_cycles_for_ms_internal+0x124>)
    3dfc:	fba1 1202 	umull	r1, r2, r1, r2
    3e00:	09d2      	lsrs	r2, r2, #7
    3e02:	fb02 f303 	mul.w	r3, r2, r3
    3e06:	3302      	adds	r3, #2
    3e08:	4a2b      	ldr	r2, [pc, #172]	; (3eb8 <_get_cycles_for_ms_internal+0x120>)
    3e0a:	fba2 2303 	umull	r2, r3, r2, r3
    3e0e:	085b      	lsrs	r3, r3, #1
    3e10:	2264      	movs	r2, #100	; 0x64
    3e12:	fb02 f303 	mul.w	r3, r2, r3
    3e16:	e046      	b.n	3ea6 <_get_cycles_for_ms_internal+0x10e>
	case 7:
		return (ms * (freq / 10000) + 2) / 3 * 10;
    3e18:	88fb      	ldrh	r3, [r7, #6]
    3e1a:	683a      	ldr	r2, [r7, #0]
    3e1c:	4928      	ldr	r1, [pc, #160]	; (3ec0 <_get_cycles_for_ms_internal+0x128>)
    3e1e:	fba1 1202 	umull	r1, r2, r1, r2
    3e22:	0b52      	lsrs	r2, r2, #13
    3e24:	fb02 f303 	mul.w	r3, r2, r3
    3e28:	3302      	adds	r3, #2
    3e2a:	4a23      	ldr	r2, [pc, #140]	; (3eb8 <_get_cycles_for_ms_internal+0x120>)
    3e2c:	fba2 2303 	umull	r2, r3, r2, r3
    3e30:	085a      	lsrs	r2, r3, #1
    3e32:	4613      	mov	r3, r2
    3e34:	009b      	lsls	r3, r3, #2
    3e36:	4413      	add	r3, r2
    3e38:	005b      	lsls	r3, r3, #1
    3e3a:	e034      	b.n	3ea6 <_get_cycles_for_ms_internal+0x10e>
	case 6:
		return (ms * (freq / 1000) + 2) / 3;
    3e3c:	88fb      	ldrh	r3, [r7, #6]
    3e3e:	683a      	ldr	r2, [r7, #0]
    3e40:	4920      	ldr	r1, [pc, #128]	; (3ec4 <_get_cycles_for_ms_internal+0x12c>)
    3e42:	fba1 1202 	umull	r1, r2, r1, r2
    3e46:	0992      	lsrs	r2, r2, #6
    3e48:	fb02 f303 	mul.w	r3, r2, r3
    3e4c:	3302      	adds	r3, #2
    3e4e:	4a1a      	ldr	r2, [pc, #104]	; (3eb8 <_get_cycles_for_ms_internal+0x120>)
    3e50:	fba2 2303 	umull	r2, r3, r2, r3
    3e54:	085b      	lsrs	r3, r3, #1
    3e56:	e026      	b.n	3ea6 <_get_cycles_for_ms_internal+0x10e>
	case 5:
		return (ms * (freq / 100) + 29) / 30;
    3e58:	88fb      	ldrh	r3, [r7, #6]
    3e5a:	683a      	ldr	r2, [r7, #0]
    3e5c:	491a      	ldr	r1, [pc, #104]	; (3ec8 <_get_cycles_for_ms_internal+0x130>)
    3e5e:	fba1 1202 	umull	r1, r2, r1, r2
    3e62:	0952      	lsrs	r2, r2, #5
    3e64:	fb02 f303 	mul.w	r3, r2, r3
    3e68:	331d      	adds	r3, #29
    3e6a:	4a18      	ldr	r2, [pc, #96]	; (3ecc <_get_cycles_for_ms_internal+0x134>)
    3e6c:	fba2 2303 	umull	r2, r3, r2, r3
    3e70:	091b      	lsrs	r3, r3, #4
    3e72:	e018      	b.n	3ea6 <_get_cycles_for_ms_internal+0x10e>
	case 4:
		return (ms * (freq / 10) + 299) / 300;
    3e74:	88fb      	ldrh	r3, [r7, #6]
    3e76:	683a      	ldr	r2, [r7, #0]
    3e78:	4915      	ldr	r1, [pc, #84]	; (3ed0 <_get_cycles_for_ms_internal+0x138>)
    3e7a:	fba1 1202 	umull	r1, r2, r1, r2
    3e7e:	08d2      	lsrs	r2, r2, #3
    3e80:	fb02 f303 	mul.w	r3, r2, r3
    3e84:	f203 132b 	addw	r3, r3, #299	; 0x12b
    3e88:	4a12      	ldr	r2, [pc, #72]	; (3ed4 <_get_cycles_for_ms_internal+0x13c>)
    3e8a:	fba2 2303 	umull	r2, r3, r2, r3
    3e8e:	095b      	lsrs	r3, r3, #5
    3e90:	e009      	b.n	3ea6 <_get_cycles_for_ms_internal+0x10e>
	default:
		return (ms * (freq / 1) + 2999) / 3000;
    3e92:	88fb      	ldrh	r3, [r7, #6]
    3e94:	683a      	ldr	r2, [r7, #0]
    3e96:	fb02 f303 	mul.w	r3, r2, r3
    3e9a:	f603 33b7 	addw	r3, r3, #2999	; 0xbb7
    3e9e:	4a0e      	ldr	r2, [pc, #56]	; (3ed8 <_get_cycles_for_ms_internal+0x140>)
    3ea0:	fba2 2303 	umull	r2, r3, r2, r3
    3ea4:	099b      	lsrs	r3, r3, #6
	}
}
    3ea6:	4618      	mov	r0, r3
    3ea8:	370c      	adds	r7, #12
    3eaa:	46bd      	mov	sp, r7
    3eac:	f85d 7b04 	ldr.w	r7, [sp], #4
    3eb0:	4770      	bx	lr
    3eb2:	bf00      	nop
    3eb4:	431bde83 	.word	0x431bde83
    3eb8:	aaaaaaab 	.word	0xaaaaaaab
    3ebc:	0a7c5ac5 	.word	0x0a7c5ac5
    3ec0:	d1b71759 	.word	0xd1b71759
    3ec4:	10624dd3 	.word	0x10624dd3
    3ec8:	51eb851f 	.word	0x51eb851f
    3ecc:	88888889 	.word	0x88888889
    3ed0:	cccccccd 	.word	0xcccccccd
    3ed4:	1b4e81b5 	.word	0x1b4e81b5
    3ed8:	057619f1 	.word	0x057619f1

00003edc <_get_cycles_for_ms>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
    3edc:	b580      	push	{r7, lr}
    3ede:	b082      	sub	sp, #8
    3ee0:	af00      	add	r7, sp, #0
    3ee2:	4603      	mov	r3, r0
    3ee4:	80fb      	strh	r3, [r7, #6]
	return _get_cycles_for_ms_internal(ms, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
    3ee6:	88fb      	ldrh	r3, [r7, #6]
    3ee8:	2209      	movs	r2, #9
    3eea:	4904      	ldr	r1, [pc, #16]	; (3efc <_get_cycles_for_ms+0x20>)
    3eec:	4618      	mov	r0, r3
    3eee:	4b04      	ldr	r3, [pc, #16]	; (3f00 <_get_cycles_for_ms+0x24>)
    3ef0:	4798      	blx	r3
    3ef2:	4603      	mov	r3, r0
}
    3ef4:	4618      	mov	r0, r3
    3ef6:	3708      	adds	r7, #8
    3ef8:	46bd      	mov	sp, r7
    3efa:	bd80      	pop	{r7, pc}
    3efc:	07270e00 	.word	0x07270e00
    3f00:	00003d99 	.word	0x00003d99
    3f04:	00000000 	.word	0x00000000

00003f08 <_delay_cycles>:
}
/**
 * \brief Delay loop to delay n number of cycles
 */
void _delay_cycles(void *const hw, uint32_t cycles)
{
    3f08:	b480      	push	{r7}
    3f0a:	b083      	sub	sp, #12
    3f0c:	af00      	add	r7, sp, #0
    3f0e:	6078      	str	r0, [r7, #4]
    3f10:	6039      	str	r1, [r7, #0]
    3f12:	bf00      	nop
    3f14:	f3af 8000 	nop.w

00003f18 <__delay>:
	__asm(".align 3 \n"
	      "__delay:\n"
	      "subs r1, r1, #1\n"
	      "bhi __delay\n");
#elif defined __GNUC__
	__asm(".syntax unified\n"
    3f18:	3901      	subs	r1, #1
    3f1a:	d8fd      	bhi.n	3f18 <__delay>
	__asm("__delay:\n"
	      "subs r1, r1, #1\n"
	      "bhi.n __delay\n");
#endif
#endif
}
    3f1c:	bf00      	nop
    3f1e:	370c      	adds	r7, #12
    3f20:	46bd      	mov	sp, r7
    3f22:	f85d 7b04 	ldr.w	r7, [sp], #4
    3f26:	4770      	bx	lr

00003f28 <hri_nvmctrl_set_CTRLA_RWS_bf>:
	tmp = (tmp & NVMCTRL_CTRLA_PRM_Msk) >> NVMCTRL_CTRLA_PRM_Pos;
	return tmp;
}

static inline void hri_nvmctrl_set_CTRLA_RWS_bf(const void *const hw, hri_nvmctrl_ctrla_reg_t mask)
{
    3f28:	b480      	push	{r7}
    3f2a:	b083      	sub	sp, #12
    3f2c:	af00      	add	r7, sp, #0
    3f2e:	6078      	str	r0, [r7, #4]
    3f30:	460b      	mov	r3, r1
    3f32:	807b      	strh	r3, [r7, #2]
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLA.reg |= NVMCTRL_CTRLA_RWS(mask);
    3f34:	687b      	ldr	r3, [r7, #4]
    3f36:	881b      	ldrh	r3, [r3, #0]
    3f38:	b29a      	uxth	r2, r3
    3f3a:	887b      	ldrh	r3, [r7, #2]
    3f3c:	021b      	lsls	r3, r3, #8
    3f3e:	b29b      	uxth	r3, r3
    3f40:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
    3f44:	b29b      	uxth	r3, r3
    3f46:	4313      	orrs	r3, r2
    3f48:	b29a      	uxth	r2, r3
    3f4a:	687b      	ldr	r3, [r7, #4]
    3f4c:	801a      	strh	r2, [r3, #0]
	NVMCTRL_CRITICAL_SECTION_LEAVE();
}
    3f4e:	bf00      	nop
    3f50:	370c      	adds	r7, #12
    3f52:	46bd      	mov	sp, r7
    3f54:	f85d 7b04 	ldr.w	r7, [sp], #4
    3f58:	4770      	bx	lr

00003f5a <hri_port_set_EVCTRL_reg>:
{
    3f5a:	b480      	push	{r7}
    3f5c:	b085      	sub	sp, #20
    3f5e:	af00      	add	r7, sp, #0
    3f60:	60f8      	str	r0, [r7, #12]
    3f62:	460b      	mov	r3, r1
    3f64:	607a      	str	r2, [r7, #4]
    3f66:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].EVCTRL.reg |= mask;
    3f68:	7afb      	ldrb	r3, [r7, #11]
    3f6a:	7afa      	ldrb	r2, [r7, #11]
    3f6c:	68f9      	ldr	r1, [r7, #12]
    3f6e:	01d2      	lsls	r2, r2, #7
    3f70:	440a      	add	r2, r1
    3f72:	322c      	adds	r2, #44	; 0x2c
    3f74:	6811      	ldr	r1, [r2, #0]
    3f76:	687a      	ldr	r2, [r7, #4]
    3f78:	430a      	orrs	r2, r1
    3f7a:	68f9      	ldr	r1, [r7, #12]
    3f7c:	01db      	lsls	r3, r3, #7
    3f7e:	440b      	add	r3, r1
    3f80:	332c      	adds	r3, #44	; 0x2c
    3f82:	601a      	str	r2, [r3, #0]
}
    3f84:	bf00      	nop
    3f86:	3714      	adds	r7, #20
    3f88:	46bd      	mov	sp, r7
    3f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
    3f8e:	4770      	bx	lr

00003f90 <_port_event_init>:

static inline void _port_event_init()
{
    3f90:	b580      	push	{r7, lr}
    3f92:	af00      	add	r7, sp, #0
	hri_port_set_EVCTRL_reg(PORT, 0, CONF_PORTA_EVCTRL);
    3f94:	2200      	movs	r2, #0
    3f96:	2100      	movs	r1, #0
    3f98:	4809      	ldr	r0, [pc, #36]	; (3fc0 <_port_event_init+0x30>)
    3f9a:	4b0a      	ldr	r3, [pc, #40]	; (3fc4 <_port_event_init+0x34>)
    3f9c:	4798      	blx	r3
	hri_port_set_EVCTRL_reg(PORT, 1, CONF_PORTB_EVCTRL);
    3f9e:	2200      	movs	r2, #0
    3fa0:	2101      	movs	r1, #1
    3fa2:	4807      	ldr	r0, [pc, #28]	; (3fc0 <_port_event_init+0x30>)
    3fa4:	4b07      	ldr	r3, [pc, #28]	; (3fc4 <_port_event_init+0x34>)
    3fa6:	4798      	blx	r3
	hri_port_set_EVCTRL_reg(PORT, 2, CONF_PORTC_EVCTRL);
    3fa8:	22ef      	movs	r2, #239	; 0xef
    3faa:	2102      	movs	r1, #2
    3fac:	4804      	ldr	r0, [pc, #16]	; (3fc0 <_port_event_init+0x30>)
    3fae:	4b05      	ldr	r3, [pc, #20]	; (3fc4 <_port_event_init+0x34>)
    3fb0:	4798      	blx	r3
	hri_port_set_EVCTRL_reg(PORT, 3, CONF_PORTD_EVCTRL);
    3fb2:	2200      	movs	r2, #0
    3fb4:	2103      	movs	r1, #3
    3fb6:	4802      	ldr	r0, [pc, #8]	; (3fc0 <_port_event_init+0x30>)
    3fb8:	4b02      	ldr	r3, [pc, #8]	; (3fc4 <_port_event_init+0x34>)
    3fba:	4798      	blx	r3
}
    3fbc:	bf00      	nop
    3fbe:	bd80      	pop	{r7, pc}
    3fc0:	41008000 	.word	0x41008000
    3fc4:	00003f5b 	.word	0x00003f5b

00003fc8 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
    3fc8:	b580      	push	{r7, lr}
    3fca:	af00      	add	r7, sp, #0
	hri_nvmctrl_set_CTRLA_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);
    3fcc:	2104      	movs	r1, #4
    3fce:	480b      	ldr	r0, [pc, #44]	; (3ffc <_init_chip+0x34>)
    3fd0:	4b0b      	ldr	r3, [pc, #44]	; (4000 <_init_chip+0x38>)
    3fd2:	4798      	blx	r3

	_osc32kctrl_init_sources();
    3fd4:	4b0b      	ldr	r3, [pc, #44]	; (4004 <_init_chip+0x3c>)
    3fd6:	4798      	blx	r3
	_oscctrl_init_sources();
    3fd8:	4b0b      	ldr	r3, [pc, #44]	; (4008 <_init_chip+0x40>)
    3fda:	4798      	blx	r3
	_mclk_init();
    3fdc:	4b0b      	ldr	r3, [pc, #44]	; (400c <_init_chip+0x44>)
    3fde:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
    3fe0:	f44f 6084 	mov.w	r0, #1056	; 0x420
    3fe4:	4b0a      	ldr	r3, [pc, #40]	; (4010 <_init_chip+0x48>)
    3fe6:	4798      	blx	r3
#endif
	_oscctrl_init_referenced_generators();
    3fe8:	4b0a      	ldr	r3, [pc, #40]	; (4014 <_init_chip+0x4c>)
    3fea:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
    3fec:	f640 30df 	movw	r0, #3039	; 0xbdf
    3ff0:	4b07      	ldr	r3, [pc, #28]	; (4010 <_init_chip+0x48>)
    3ff2:	4798      	blx	r3
	hri_mclk_set_AHBMASK_DMAC_bit(MCLK);
	_dma_init();
#endif

#if (CONF_PORT_EVCTRL_PORT_0 | CONF_PORT_EVCTRL_PORT_1 | CONF_PORT_EVCTRL_PORT_2 | CONF_PORT_EVCTRL_PORT_3)
	_port_event_init();
    3ff4:	4b08      	ldr	r3, [pc, #32]	; (4018 <_init_chip+0x50>)
    3ff6:	4798      	blx	r3
#endif

#if CONF_CMCC_ENABLE
	cache_init();
#endif
}
    3ff8:	bf00      	nop
    3ffa:	bd80      	pop	{r7, pc}
    3ffc:	41004000 	.word	0x41004000
    4000:	00003f29 	.word	0x00003f29
    4004:	00004921 	.word	0x00004921
    4008:	00004de9 	.word	0x00004de9
    400c:	00004841 	.word	0x00004841
    4010:	00004731 	.word	0x00004731
    4014:	00004e29 	.word	0x00004e29
    4018:	00003f91 	.word	0x00003f91

0000401c <_crc_sync_init>:

/**
 * \brief Initialize CRC.
 */
int32_t _crc_sync_init(struct _crc_sync_device *const device, void *const hw)
{
    401c:	b480      	push	{r7}
    401e:	b083      	sub	sp, #12
    4020:	af00      	add	r7, sp, #0
    4022:	6078      	str	r0, [r7, #4]
    4024:	6039      	str	r1, [r7, #0]
	device->hw = hw;
    4026:	687b      	ldr	r3, [r7, #4]
    4028:	683a      	ldr	r2, [r7, #0]
    402a:	601a      	str	r2, [r3, #0]

	return ERR_NONE;
    402c:	2300      	movs	r3, #0
}
    402e:	4618      	mov	r0, r3
    4030:	370c      	adds	r7, #12
    4032:	46bd      	mov	sp, r7
    4034:	f85d 7b04 	ldr.w	r7, [sp], #4
    4038:	4770      	bx	lr
	...

0000403c <__NVIC_EnableIRQ>:
{
    403c:	b480      	push	{r7}
    403e:	b083      	sub	sp, #12
    4040:	af00      	add	r7, sp, #0
    4042:	4603      	mov	r3, r0
    4044:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    4046:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    404a:	2b00      	cmp	r3, #0
    404c:	db0b      	blt.n	4066 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    404e:	4909      	ldr	r1, [pc, #36]	; (4074 <__NVIC_EnableIRQ+0x38>)
    4050:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    4054:	095b      	lsrs	r3, r3, #5
    4056:	88fa      	ldrh	r2, [r7, #6]
    4058:	f002 021f 	and.w	r2, r2, #31
    405c:	2001      	movs	r0, #1
    405e:	fa00 f202 	lsl.w	r2, r0, r2
    4062:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    4066:	bf00      	nop
    4068:	370c      	adds	r7, #12
    406a:	46bd      	mov	sp, r7
    406c:	f85d 7b04 	ldr.w	r7, [sp], #4
    4070:	4770      	bx	lr
    4072:	bf00      	nop
    4074:	e000e100 	.word	0xe000e100

00004078 <__NVIC_DisableIRQ>:
{
    4078:	b480      	push	{r7}
    407a:	b083      	sub	sp, #12
    407c:	af00      	add	r7, sp, #0
    407e:	4603      	mov	r3, r0
    4080:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    4082:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    4086:	2b00      	cmp	r3, #0
    4088:	db10      	blt.n	40ac <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    408a:	490b      	ldr	r1, [pc, #44]	; (40b8 <__NVIC_DisableIRQ+0x40>)
    408c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    4090:	095b      	lsrs	r3, r3, #5
    4092:	88fa      	ldrh	r2, [r7, #6]
    4094:	f002 021f 	and.w	r2, r2, #31
    4098:	2001      	movs	r0, #1
    409a:	fa00 f202 	lsl.w	r2, r0, r2
    409e:	3320      	adds	r3, #32
    40a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    40a4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    40a8:	f3bf 8f6f 	isb	sy
}
    40ac:	bf00      	nop
    40ae:	370c      	adds	r7, #12
    40b0:	46bd      	mov	sp, r7
    40b2:	f85d 7b04 	ldr.w	r7, [sp], #4
    40b6:	4770      	bx	lr
    40b8:	e000e100 	.word	0xe000e100

000040bc <__NVIC_ClearPendingIRQ>:
{
    40bc:	b480      	push	{r7}
    40be:	b083      	sub	sp, #12
    40c0:	af00      	add	r7, sp, #0
    40c2:	4603      	mov	r3, r0
    40c4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    40c6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    40ca:	2b00      	cmp	r3, #0
    40cc:	db0c      	blt.n	40e8 <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    40ce:	4909      	ldr	r1, [pc, #36]	; (40f4 <__NVIC_ClearPendingIRQ+0x38>)
    40d0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    40d4:	095b      	lsrs	r3, r3, #5
    40d6:	88fa      	ldrh	r2, [r7, #6]
    40d8:	f002 021f 	and.w	r2, r2, #31
    40dc:	2001      	movs	r0, #1
    40de:	fa00 f202 	lsl.w	r2, r0, r2
    40e2:	3360      	adds	r3, #96	; 0x60
    40e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    40e8:	bf00      	nop
    40ea:	370c      	adds	r7, #12
    40ec:	46bd      	mov	sp, r7
    40ee:	f85d 7b04 	ldr.w	r7, [sp], #4
    40f2:	4770      	bx	lr
    40f4:	e000e100 	.word	0xe000e100

000040f8 <hri_eic_wait_for_sync>:
typedef uint32_t hri_eic_syncbusy_reg_t;
typedef uint8_t  hri_eic_ctrla_reg_t;
typedef uint8_t  hri_eic_nmictrl_reg_t;

static inline void hri_eic_wait_for_sync(const void *const hw, hri_eic_syncbusy_reg_t reg)
{
    40f8:	b480      	push	{r7}
    40fa:	b083      	sub	sp, #12
    40fc:	af00      	add	r7, sp, #0
    40fe:	6078      	str	r0, [r7, #4]
    4100:	6039      	str	r1, [r7, #0]
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
    4102:	bf00      	nop
    4104:	687b      	ldr	r3, [r7, #4]
    4106:	685a      	ldr	r2, [r3, #4]
    4108:	683b      	ldr	r3, [r7, #0]
    410a:	4013      	ands	r3, r2
    410c:	2b00      	cmp	r3, #0
    410e:	d1f9      	bne.n	4104 <hri_eic_wait_for_sync+0xc>
	};
}
    4110:	bf00      	nop
    4112:	370c      	adds	r7, #12
    4114:	46bd      	mov	sp, r7
    4116:	f85d 7b04 	ldr.w	r7, [sp], #4
    411a:	4770      	bx	lr

0000411c <hri_eic_is_syncing>:

static inline bool hri_eic_is_syncing(const void *const hw, hri_eic_syncbusy_reg_t reg)
{
    411c:	b480      	push	{r7}
    411e:	b083      	sub	sp, #12
    4120:	af00      	add	r7, sp, #0
    4122:	6078      	str	r0, [r7, #4]
    4124:	6039      	str	r1, [r7, #0]
	return ((Eic *)hw)->SYNCBUSY.reg & reg;
    4126:	687b      	ldr	r3, [r7, #4]
    4128:	685a      	ldr	r2, [r3, #4]
    412a:	683b      	ldr	r3, [r7, #0]
    412c:	4013      	ands	r3, r2
    412e:	2b00      	cmp	r3, #0
    4130:	bf14      	ite	ne
    4132:	2301      	movne	r3, #1
    4134:	2300      	moveq	r3, #0
    4136:	b2db      	uxtb	r3, r3
}
    4138:	4618      	mov	r0, r3
    413a:	370c      	adds	r7, #12
    413c:	46bd      	mov	sp, r7
    413e:	f85d 7b04 	ldr.w	r7, [sp], #4
    4142:	4770      	bx	lr

00004144 <hri_eic_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_eic_intflag_reg_t hri_eic_read_INTFLAG_reg(const void *const hw)
{
    4144:	b480      	push	{r7}
    4146:	b083      	sub	sp, #12
    4148:	af00      	add	r7, sp, #0
    414a:	6078      	str	r0, [r7, #4]
	return ((Eic *)hw)->INTFLAG.reg;
    414c:	687b      	ldr	r3, [r7, #4]
    414e:	695b      	ldr	r3, [r3, #20]
}
    4150:	4618      	mov	r0, r3
    4152:	370c      	adds	r7, #12
    4154:	46bd      	mov	sp, r7
    4156:	f85d 7b04 	ldr.w	r7, [sp], #4
    415a:	4770      	bx	lr

0000415c <hri_eic_clear_INTFLAG_reg>:

static inline void hri_eic_clear_INTFLAG_reg(const void *const hw, hri_eic_intflag_reg_t mask)
{
    415c:	b480      	push	{r7}
    415e:	b083      	sub	sp, #12
    4160:	af00      	add	r7, sp, #0
    4162:	6078      	str	r0, [r7, #4]
    4164:	6039      	str	r1, [r7, #0]
	((Eic *)hw)->INTFLAG.reg = mask;
    4166:	687b      	ldr	r3, [r7, #4]
    4168:	683a      	ldr	r2, [r7, #0]
    416a:	615a      	str	r2, [r3, #20]
}
    416c:	bf00      	nop
    416e:	370c      	adds	r7, #12
    4170:	46bd      	mov	sp, r7
    4172:	f85d 7b04 	ldr.w	r7, [sp], #4
    4176:	4770      	bx	lr

00004178 <hri_eic_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & EIC_CTRLA_SWRST) >> EIC_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_eic_set_CTRLA_ENABLE_bit(const void *const hw)
{
    4178:	b580      	push	{r7, lr}
    417a:	b082      	sub	sp, #8
    417c:	af00      	add	r7, sp, #0
    417e:	6078      	str	r0, [r7, #4]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRLA.reg |= EIC_CTRLA_ENABLE;
    4180:	687b      	ldr	r3, [r7, #4]
    4182:	781b      	ldrb	r3, [r3, #0]
    4184:	b2db      	uxtb	r3, r3
    4186:	f043 0302 	orr.w	r3, r3, #2
    418a:	b2da      	uxtb	r2, r3
    418c:	687b      	ldr	r3, [r7, #4]
    418e:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_SWRST | EIC_SYNCBUSY_ENABLE);
    4190:	2103      	movs	r1, #3
    4192:	6878      	ldr	r0, [r7, #4]
    4194:	4b02      	ldr	r3, [pc, #8]	; (41a0 <hri_eic_set_CTRLA_ENABLE_bit+0x28>)
    4196:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    4198:	bf00      	nop
    419a:	3708      	adds	r7, #8
    419c:	46bd      	mov	sp, r7
    419e:	bd80      	pop	{r7, pc}
    41a0:	000040f9 	.word	0x000040f9

000041a4 <hri_eic_clear_CTRLA_ENABLE_bit>:
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_SWRST | EIC_SYNCBUSY_ENABLE);
	EIC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_eic_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    41a4:	b580      	push	{r7, lr}
    41a6:	b082      	sub	sp, #8
    41a8:	af00      	add	r7, sp, #0
    41aa:	6078      	str	r0, [r7, #4]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRLA.reg &= ~EIC_CTRLA_ENABLE;
    41ac:	687b      	ldr	r3, [r7, #4]
    41ae:	781b      	ldrb	r3, [r3, #0]
    41b0:	b2db      	uxtb	r3, r3
    41b2:	f023 0302 	bic.w	r3, r3, #2
    41b6:	b2da      	uxtb	r2, r3
    41b8:	687b      	ldr	r3, [r7, #4]
    41ba:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_SWRST | EIC_SYNCBUSY_ENABLE);
    41bc:	2103      	movs	r1, #3
    41be:	6878      	ldr	r0, [r7, #4]
    41c0:	4b02      	ldr	r3, [pc, #8]	; (41cc <hri_eic_clear_CTRLA_ENABLE_bit+0x28>)
    41c2:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    41c4:	bf00      	nop
    41c6:	3708      	adds	r7, #8
    41c8:	46bd      	mov	sp, r7
    41ca:	bd80      	pop	{r7, pc}
    41cc:	000040f9 	.word	0x000040f9

000041d0 <hri_eic_write_CTRLA_CKSEL_bit>:
	tmp = (tmp & EIC_CTRLA_CKSEL) >> EIC_CTRLA_CKSEL_Pos;
	return (bool)tmp;
}

static inline void hri_eic_write_CTRLA_CKSEL_bit(const void *const hw, bool value)
{
    41d0:	b580      	push	{r7, lr}
    41d2:	b084      	sub	sp, #16
    41d4:	af00      	add	r7, sp, #0
    41d6:	6078      	str	r0, [r7, #4]
    41d8:	460b      	mov	r3, r1
    41da:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	EIC_CRITICAL_SECTION_ENTER();
	tmp = ((Eic *)hw)->CTRLA.reg;
    41dc:	687b      	ldr	r3, [r7, #4]
    41de:	781b      	ldrb	r3, [r3, #0]
    41e0:	73fb      	strb	r3, [r7, #15]
	tmp &= ~EIC_CTRLA_CKSEL;
    41e2:	7bfb      	ldrb	r3, [r7, #15]
    41e4:	f023 0310 	bic.w	r3, r3, #16
    41e8:	73fb      	strb	r3, [r7, #15]
	tmp |= value << EIC_CTRLA_CKSEL_Pos;
    41ea:	78fb      	ldrb	r3, [r7, #3]
    41ec:	011b      	lsls	r3, r3, #4
    41ee:	b25a      	sxtb	r2, r3
    41f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
    41f4:	4313      	orrs	r3, r2
    41f6:	b25b      	sxtb	r3, r3
    41f8:	73fb      	strb	r3, [r7, #15]
	((Eic *)hw)->CTRLA.reg = tmp;
    41fa:	687b      	ldr	r3, [r7, #4]
    41fc:	7bfa      	ldrb	r2, [r7, #15]
    41fe:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
    4200:	2103      	movs	r1, #3
    4202:	6878      	ldr	r0, [r7, #4]
    4204:	4b02      	ldr	r3, [pc, #8]	; (4210 <hri_eic_write_CTRLA_CKSEL_bit+0x40>)
    4206:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    4208:	bf00      	nop
    420a:	3710      	adds	r7, #16
    420c:	46bd      	mov	sp, r7
    420e:	bd80      	pop	{r7, pc}
    4210:	000040f9 	.word	0x000040f9

00004214 <hri_eic_get_CTRLA_reg>:
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
	EIC_CRITICAL_SECTION_LEAVE();
}

static inline hri_eic_ctrla_reg_t hri_eic_get_CTRLA_reg(const void *const hw, hri_eic_ctrla_reg_t mask)
{
    4214:	b580      	push	{r7, lr}
    4216:	b084      	sub	sp, #16
    4218:	af00      	add	r7, sp, #0
    421a:	6078      	str	r0, [r7, #4]
    421c:	460b      	mov	r3, r1
    421e:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
    4220:	2103      	movs	r1, #3
    4222:	6878      	ldr	r0, [r7, #4]
    4224:	4b06      	ldr	r3, [pc, #24]	; (4240 <hri_eic_get_CTRLA_reg+0x2c>)
    4226:	4798      	blx	r3
	tmp = ((Eic *)hw)->CTRLA.reg;
    4228:	687b      	ldr	r3, [r7, #4]
    422a:	781b      	ldrb	r3, [r3, #0]
    422c:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    422e:	7bfa      	ldrb	r2, [r7, #15]
    4230:	78fb      	ldrb	r3, [r7, #3]
    4232:	4013      	ands	r3, r2
    4234:	73fb      	strb	r3, [r7, #15]
	return tmp;
    4236:	7bfb      	ldrb	r3, [r7, #15]
}
    4238:	4618      	mov	r0, r3
    423a:	3710      	adds	r7, #16
    423c:	46bd      	mov	sp, r7
    423e:	bd80      	pop	{r7, pc}
    4240:	000040f9 	.word	0x000040f9

00004244 <hri_eic_write_CTRLA_reg>:

static inline void hri_eic_write_CTRLA_reg(const void *const hw, hri_eic_ctrla_reg_t data)
{
    4244:	b580      	push	{r7, lr}
    4246:	b082      	sub	sp, #8
    4248:	af00      	add	r7, sp, #0
    424a:	6078      	str	r0, [r7, #4]
    424c:	460b      	mov	r3, r1
    424e:	70fb      	strb	r3, [r7, #3]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRLA.reg = data;
    4250:	687b      	ldr	r3, [r7, #4]
    4252:	78fa      	ldrb	r2, [r7, #3]
    4254:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
    4256:	2103      	movs	r1, #3
    4258:	6878      	ldr	r0, [r7, #4]
    425a:	4b03      	ldr	r3, [pc, #12]	; (4268 <hri_eic_write_CTRLA_reg+0x24>)
    425c:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    425e:	bf00      	nop
    4260:	3708      	adds	r7, #8
    4262:	46bd      	mov	sp, r7
    4264:	bd80      	pop	{r7, pc}
    4266:	bf00      	nop
    4268:	000040f9 	.word	0x000040f9

0000426c <hri_eic_write_NMICTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_NMICTRL_reg(const void *const hw, hri_eic_nmictrl_reg_t data)
{
    426c:	b480      	push	{r7}
    426e:	b083      	sub	sp, #12
    4270:	af00      	add	r7, sp, #0
    4272:	6078      	str	r0, [r7, #4]
    4274:	460b      	mov	r3, r1
    4276:	70fb      	strb	r3, [r7, #3]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->NMICTRL.reg = data;
    4278:	687b      	ldr	r3, [r7, #4]
    427a:	78fa      	ldrb	r2, [r7, #3]
    427c:	705a      	strb	r2, [r3, #1]
	EIC_CRITICAL_SECTION_LEAVE();
}
    427e:	bf00      	nop
    4280:	370c      	adds	r7, #12
    4282:	46bd      	mov	sp, r7
    4284:	f85d 7b04 	ldr.w	r7, [sp], #4
    4288:	4770      	bx	lr

0000428a <hri_eic_write_EVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_EVCTRL_reg(const void *const hw, hri_eic_evctrl_reg_t data)
{
    428a:	b480      	push	{r7}
    428c:	b083      	sub	sp, #12
    428e:	af00      	add	r7, sp, #0
    4290:	6078      	str	r0, [r7, #4]
    4292:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->EVCTRL.reg = data;
    4294:	687b      	ldr	r3, [r7, #4]
    4296:	683a      	ldr	r2, [r7, #0]
    4298:	609a      	str	r2, [r3, #8]
	EIC_CRITICAL_SECTION_LEAVE();
}
    429a:	bf00      	nop
    429c:	370c      	adds	r7, #12
    429e:	46bd      	mov	sp, r7
    42a0:	f85d 7b04 	ldr.w	r7, [sp], #4
    42a4:	4770      	bx	lr

000042a6 <hri_eic_write_ASYNCH_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_ASYNCH_reg(const void *const hw, hri_eic_asynch_reg_t data)
{
    42a6:	b480      	push	{r7}
    42a8:	b083      	sub	sp, #12
    42aa:	af00      	add	r7, sp, #0
    42ac:	6078      	str	r0, [r7, #4]
    42ae:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->ASYNCH.reg = data;
    42b0:	687b      	ldr	r3, [r7, #4]
    42b2:	683a      	ldr	r2, [r7, #0]
    42b4:	619a      	str	r2, [r3, #24]
	EIC_CRITICAL_SECTION_LEAVE();
}
    42b6:	bf00      	nop
    42b8:	370c      	adds	r7, #12
    42ba:	46bd      	mov	sp, r7
    42bc:	f85d 7b04 	ldr.w	r7, [sp], #4
    42c0:	4770      	bx	lr

000042c2 <hri_eic_write_CONFIG_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_CONFIG_reg(const void *const hw, uint8_t index, hri_eic_config_reg_t data)
{
    42c2:	b480      	push	{r7}
    42c4:	b085      	sub	sp, #20
    42c6:	af00      	add	r7, sp, #0
    42c8:	60f8      	str	r0, [r7, #12]
    42ca:	460b      	mov	r3, r1
    42cc:	607a      	str	r2, [r7, #4]
    42ce:	72fb      	strb	r3, [r7, #11]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CONFIG[index].reg = data;
    42d0:	7afb      	ldrb	r3, [r7, #11]
    42d2:	68fa      	ldr	r2, [r7, #12]
    42d4:	3306      	adds	r3, #6
    42d6:	009b      	lsls	r3, r3, #2
    42d8:	4413      	add	r3, r2
    42da:	687a      	ldr	r2, [r7, #4]
    42dc:	605a      	str	r2, [r3, #4]
	EIC_CRITICAL_SECTION_LEAVE();
}
    42de:	bf00      	nop
    42e0:	3714      	adds	r7, #20
    42e2:	46bd      	mov	sp, r7
    42e4:	f85d 7b04 	ldr.w	r7, [sp], #4
    42e8:	4770      	bx	lr

000042ea <hri_eic_write_DEBOUNCEN_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_DEBOUNCEN_reg(const void *const hw, hri_eic_debouncen_reg_t data)
{
    42ea:	b480      	push	{r7}
    42ec:	b083      	sub	sp, #12
    42ee:	af00      	add	r7, sp, #0
    42f0:	6078      	str	r0, [r7, #4]
    42f2:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->DEBOUNCEN.reg = data;
    42f4:	687b      	ldr	r3, [r7, #4]
    42f6:	683a      	ldr	r2, [r7, #0]
    42f8:	631a      	str	r2, [r3, #48]	; 0x30
	EIC_CRITICAL_SECTION_LEAVE();
}
    42fa:	bf00      	nop
    42fc:	370c      	adds	r7, #12
    42fe:	46bd      	mov	sp, r7
    4300:	f85d 7b04 	ldr.w	r7, [sp], #4
    4304:	4770      	bx	lr

00004306 <hri_eic_write_DPRESCALER_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_DPRESCALER_reg(const void *const hw, hri_eic_dprescaler_reg_t data)
{
    4306:	b480      	push	{r7}
    4308:	b083      	sub	sp, #12
    430a:	af00      	add	r7, sp, #0
    430c:	6078      	str	r0, [r7, #4]
    430e:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->DPRESCALER.reg = data;
    4310:	687b      	ldr	r3, [r7, #4]
    4312:	683a      	ldr	r2, [r7, #0]
    4314:	635a      	str	r2, [r3, #52]	; 0x34
	EIC_CRITICAL_SECTION_LEAVE();
}
    4316:	bf00      	nop
    4318:	370c      	adds	r7, #12
    431a:	46bd      	mov	sp, r7
    431c:	f85d 7b04 	ldr.w	r7, [sp], #4
    4320:	4770      	bx	lr
	...

00004324 <_ext_irq_init>:

/**
 * \brief Initialize external interrupt module
 */
int32_t _ext_irq_init(void (*cb)(const uint32_t pin))
{
    4324:	b580      	push	{r7, lr}
    4326:	b082      	sub	sp, #8
    4328:	af00      	add	r7, sp, #0
    432a:	6078      	str	r0, [r7, #4]
	if (!hri_eic_is_syncing(EIC, EIC_SYNCBUSY_SWRST)) {
    432c:	2101      	movs	r1, #1
    432e:	4838      	ldr	r0, [pc, #224]	; (4410 <_ext_irq_init+0xec>)
    4330:	4b38      	ldr	r3, [pc, #224]	; (4414 <_ext_irq_init+0xf0>)
    4332:	4798      	blx	r3
    4334:	4603      	mov	r3, r0
    4336:	f083 0301 	eor.w	r3, r3, #1
    433a:	b2db      	uxtb	r3, r3
    433c:	2b00      	cmp	r3, #0
    433e:	d011      	beq.n	4364 <_ext_irq_init+0x40>
		if (hri_eic_get_CTRLA_reg(EIC, EIC_CTRLA_ENABLE)) {
    4340:	2102      	movs	r1, #2
    4342:	4833      	ldr	r0, [pc, #204]	; (4410 <_ext_irq_init+0xec>)
    4344:	4b34      	ldr	r3, [pc, #208]	; (4418 <_ext_irq_init+0xf4>)
    4346:	4798      	blx	r3
    4348:	4603      	mov	r3, r0
    434a:	2b00      	cmp	r3, #0
    434c:	d006      	beq.n	435c <_ext_irq_init+0x38>
			hri_eic_clear_CTRLA_ENABLE_bit(EIC);
    434e:	4830      	ldr	r0, [pc, #192]	; (4410 <_ext_irq_init+0xec>)
    4350:	4b32      	ldr	r3, [pc, #200]	; (441c <_ext_irq_init+0xf8>)
    4352:	4798      	blx	r3
			hri_eic_wait_for_sync(EIC, EIC_SYNCBUSY_ENABLE);
    4354:	2102      	movs	r1, #2
    4356:	482e      	ldr	r0, [pc, #184]	; (4410 <_ext_irq_init+0xec>)
    4358:	4b31      	ldr	r3, [pc, #196]	; (4420 <_ext_irq_init+0xfc>)
    435a:	4798      	blx	r3
		}
		hri_eic_write_CTRLA_reg(EIC, EIC_CTRLA_SWRST);
    435c:	2101      	movs	r1, #1
    435e:	482c      	ldr	r0, [pc, #176]	; (4410 <_ext_irq_init+0xec>)
    4360:	4b30      	ldr	r3, [pc, #192]	; (4424 <_ext_irq_init+0x100>)
    4362:	4798      	blx	r3
	}
	hri_eic_wait_for_sync(EIC, EIC_SYNCBUSY_SWRST);
    4364:	2101      	movs	r1, #1
    4366:	482a      	ldr	r0, [pc, #168]	; (4410 <_ext_irq_init+0xec>)
    4368:	4b2d      	ldr	r3, [pc, #180]	; (4420 <_ext_irq_init+0xfc>)
    436a:	4798      	blx	r3

	hri_eic_write_CTRLA_CKSEL_bit(EIC, CONF_EIC_CKSEL);
    436c:	2100      	movs	r1, #0
    436e:	4828      	ldr	r0, [pc, #160]	; (4410 <_ext_irq_init+0xec>)
    4370:	4b2d      	ldr	r3, [pc, #180]	; (4428 <_ext_irq_init+0x104>)
    4372:	4798      	blx	r3

	hri_eic_write_NMICTRL_reg(EIC,
    4374:	2100      	movs	r1, #0
    4376:	4826      	ldr	r0, [pc, #152]	; (4410 <_ext_irq_init+0xec>)
    4378:	4b2c      	ldr	r3, [pc, #176]	; (442c <_ext_irq_init+0x108>)
    437a:	4798      	blx	r3
	                          (CONF_EIC_NMIFILTEN << EIC_NMICTRL_NMIFILTEN_Pos)
	                              | EIC_NMICTRL_NMISENSE(CONF_EIC_NMISENSE) | EIC_ASYNCH_ASYNCH(CONF_EIC_NMIASYNCH)
	                              | 0);

	hri_eic_write_EVCTRL_reg(EIC,
    437c:	2100      	movs	r1, #0
    437e:	4824      	ldr	r0, [pc, #144]	; (4410 <_ext_irq_init+0xec>)
    4380:	4b2b      	ldr	r3, [pc, #172]	; (4430 <_ext_irq_init+0x10c>)
    4382:	4798      	blx	r3
	                             | (CONF_EIC_EXTINTEO3 << 3) | (CONF_EIC_EXTINTEO4 << 4) | (CONF_EIC_EXTINTEO5 << 5)
	                             | (CONF_EIC_EXTINTEO6 << 6) | (CONF_EIC_EXTINTEO7 << 7) | (CONF_EIC_EXTINTEO8 << 8)
	                             | (CONF_EIC_EXTINTEO9 << 9) | (CONF_EIC_EXTINTEO10 << 10) | (CONF_EIC_EXTINTEO11 << 11)
	                             | (CONF_EIC_EXTINTEO12 << 12) | (CONF_EIC_EXTINTEO13 << 13)
	                             | (CONF_EIC_EXTINTEO14 << 14) | (CONF_EIC_EXTINTEO15 << 15) | 0);
	hri_eic_write_ASYNCH_reg(EIC,
    4384:	2130      	movs	r1, #48	; 0x30
    4386:	4822      	ldr	r0, [pc, #136]	; (4410 <_ext_irq_init+0xec>)
    4388:	4b2a      	ldr	r3, [pc, #168]	; (4434 <_ext_irq_init+0x110>)
    438a:	4798      	blx	r3
	                             | (CONF_EIC_ASYNCH3 << 3) | (CONF_EIC_ASYNCH4 << 4) | (CONF_EIC_ASYNCH5 << 5)
	                             | (CONF_EIC_ASYNCH6 << 6) | (CONF_EIC_ASYNCH7 << 7) | (CONF_EIC_ASYNCH8 << 8)
	                             | (CONF_EIC_ASYNCH9 << 9) | (CONF_EIC_ASYNCH10 << 10) | (CONF_EIC_ASYNCH11 << 11)
	                             | (CONF_EIC_ASYNCH12 << 12) | (CONF_EIC_ASYNCH13 << 13) | (CONF_EIC_ASYNCH14 << 14)
	                             | (CONF_EIC_ASYNCH15 << 15) | 0);
	hri_eic_write_DEBOUNCEN_reg(
    438c:	2130      	movs	r1, #48	; 0x30
    438e:	4820      	ldr	r0, [pc, #128]	; (4410 <_ext_irq_init+0xec>)
    4390:	4b29      	ldr	r3, [pc, #164]	; (4438 <_ext_irq_init+0x114>)
    4392:	4798      	blx	r3
	        | (CONF_EIC_DEBOUNCE_ENABLE6 << 6) | (CONF_EIC_DEBOUNCE_ENABLE7 << 7) | (CONF_EIC_DEBOUNCE_ENABLE8 << 8)
	        | (CONF_EIC_DEBOUNCE_ENABLE9 << 9) | (CONF_EIC_DEBOUNCE_ENABLE10 << 10) | (CONF_EIC_DEBOUNCE_ENABLE11 << 11)
	        | (CONF_EIC_DEBOUNCE_ENABLE12 << 12) | (CONF_EIC_DEBOUNCE_ENABLE13 << 13)
	        | (CONF_EIC_DEBOUNCE_ENABLE14 << 14) | (CONF_EIC_DEBOUNCE_ENABLE15 << 15) | 0);

	hri_eic_write_DPRESCALER_reg(
    4394:	2100      	movs	r1, #0
    4396:	481e      	ldr	r0, [pc, #120]	; (4410 <_ext_irq_init+0xec>)
    4398:	4b28      	ldr	r3, [pc, #160]	; (443c <_ext_irq_init+0x118>)
    439a:	4798      	blx	r3
	    EIC,
	    (EIC_DPRESCALER_PRESCALER0(CONF_EIC_DPRESCALER0)) | (CONF_EIC_STATES0 << EIC_DPRESCALER_STATES0_Pos)
	        | (EIC_DPRESCALER_PRESCALER1(CONF_EIC_DPRESCALER1)) | (CONF_EIC_STATES1 << EIC_DPRESCALER_STATES1_Pos)
	        | CONF_EIC_TICKON << EIC_DPRESCALER_TICKON_Pos | 0);

	hri_eic_write_CONFIG_reg(EIC,
    439c:	f44f 0219 	mov.w	r2, #10027008	; 0x990000
    43a0:	2100      	movs	r1, #0
    43a2:	481b      	ldr	r0, [pc, #108]	; (4410 <_ext_irq_init+0xec>)
    43a4:	4b26      	ldr	r3, [pc, #152]	; (4440 <_ext_irq_init+0x11c>)
    43a6:	4798      	blx	r3
	                             | (CONF_EIC_FILTEN5 << EIC_CONFIG_FILTEN5_Pos) | EIC_CONFIG_SENSE5(CONF_EIC_SENSE5)
	                             | (CONF_EIC_FILTEN6 << EIC_CONFIG_FILTEN6_Pos) | EIC_CONFIG_SENSE6(CONF_EIC_SENSE6)
	                             | (CONF_EIC_FILTEN7 << EIC_CONFIG_FILTEN7_Pos) | EIC_CONFIG_SENSE7(CONF_EIC_SENSE7)
	                             | 0);

	hri_eic_write_CONFIG_reg(EIC,
    43a8:	2200      	movs	r2, #0
    43aa:	2101      	movs	r1, #1
    43ac:	4818      	ldr	r0, [pc, #96]	; (4410 <_ext_irq_init+0xec>)
    43ae:	4b24      	ldr	r3, [pc, #144]	; (4440 <_ext_irq_init+0x11c>)
    43b0:	4798      	blx	r3
	                             | (CONF_EIC_FILTEN13 << EIC_CONFIG_FILTEN5_Pos) | EIC_CONFIG_SENSE5(CONF_EIC_SENSE13)
	                             | (CONF_EIC_FILTEN14 << EIC_CONFIG_FILTEN6_Pos) | EIC_CONFIG_SENSE6(CONF_EIC_SENSE14)
	                             | (CONF_EIC_FILTEN15 << EIC_CONFIG_FILTEN7_Pos) | EIC_CONFIG_SENSE7(CONF_EIC_SENSE15)
	                             | 0);

	hri_eic_set_CTRLA_ENABLE_bit(EIC);
    43b2:	4817      	ldr	r0, [pc, #92]	; (4410 <_ext_irq_init+0xec>)
    43b4:	4b23      	ldr	r3, [pc, #140]	; (4444 <_ext_irq_init+0x120>)
    43b6:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_4_IRQn);
    43b8:	2010      	movs	r0, #16
    43ba:	4b23      	ldr	r3, [pc, #140]	; (4448 <_ext_irq_init+0x124>)
    43bc:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_4_IRQn);
    43be:	2010      	movs	r0, #16
    43c0:	4b22      	ldr	r3, [pc, #136]	; (444c <_ext_irq_init+0x128>)
    43c2:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_4_IRQn);
    43c4:	2010      	movs	r0, #16
    43c6:	4b22      	ldr	r3, [pc, #136]	; (4450 <_ext_irq_init+0x12c>)
    43c8:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_5_IRQn);
    43ca:	2011      	movs	r0, #17
    43cc:	4b1e      	ldr	r3, [pc, #120]	; (4448 <_ext_irq_init+0x124>)
    43ce:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_5_IRQn);
    43d0:	2011      	movs	r0, #17
    43d2:	4b1e      	ldr	r3, [pc, #120]	; (444c <_ext_irq_init+0x128>)
    43d4:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_5_IRQn);
    43d6:	2011      	movs	r0, #17
    43d8:	4b1d      	ldr	r3, [pc, #116]	; (4450 <_ext_irq_init+0x12c>)
    43da:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_6_IRQn);
    43dc:	2012      	movs	r0, #18
    43de:	4b1a      	ldr	r3, [pc, #104]	; (4448 <_ext_irq_init+0x124>)
    43e0:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_6_IRQn);
    43e2:	2012      	movs	r0, #18
    43e4:	4b19      	ldr	r3, [pc, #100]	; (444c <_ext_irq_init+0x128>)
    43e6:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_6_IRQn);
    43e8:	2012      	movs	r0, #18
    43ea:	4b19      	ldr	r3, [pc, #100]	; (4450 <_ext_irq_init+0x12c>)
    43ec:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_7_IRQn);
    43ee:	2013      	movs	r0, #19
    43f0:	4b15      	ldr	r3, [pc, #84]	; (4448 <_ext_irq_init+0x124>)
    43f2:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_7_IRQn);
    43f4:	2013      	movs	r0, #19
    43f6:	4b15      	ldr	r3, [pc, #84]	; (444c <_ext_irq_init+0x128>)
    43f8:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_7_IRQn);
    43fa:	2013      	movs	r0, #19
    43fc:	4b14      	ldr	r3, [pc, #80]	; (4450 <_ext_irq_init+0x12c>)
    43fe:	4798      	blx	r3

	callback = cb;
    4400:	4a14      	ldr	r2, [pc, #80]	; (4454 <_ext_irq_init+0x130>)
    4402:	687b      	ldr	r3, [r7, #4]
    4404:	6013      	str	r3, [r2, #0]

	return ERR_NONE;
    4406:	2300      	movs	r3, #0
}
    4408:	4618      	mov	r0, r3
    440a:	3708      	adds	r7, #8
    440c:	46bd      	mov	sp, r7
    440e:	bd80      	pop	{r7, pc}
    4410:	40002800 	.word	0x40002800
    4414:	0000411d 	.word	0x0000411d
    4418:	00004215 	.word	0x00004215
    441c:	000041a5 	.word	0x000041a5
    4420:	000040f9 	.word	0x000040f9
    4424:	00004245 	.word	0x00004245
    4428:	000041d1 	.word	0x000041d1
    442c:	0000426d 	.word	0x0000426d
    4430:	0000428b 	.word	0x0000428b
    4434:	000042a7 	.word	0x000042a7
    4438:	000042eb 	.word	0x000042eb
    443c:	00004307 	.word	0x00004307
    4440:	000042c3 	.word	0x000042c3
    4444:	00004179 	.word	0x00004179
    4448:	00004079 	.word	0x00004079
    444c:	000040bd 	.word	0x000040bd
    4450:	0000403d 	.word	0x0000403d
    4454:	20000754 	.word	0x20000754

00004458 <_ext_irq_handler>:

/**
 * \brief Inter EIC interrupt handler
 */
static void _ext_irq_handler(void)
{
    4458:	b580      	push	{r7, lr}
    445a:	b084      	sub	sp, #16
    445c:	af00      	add	r7, sp, #0
	volatile uint32_t flags = hri_eic_read_INTFLAG_reg(EIC);
    445e:	4841      	ldr	r0, [pc, #260]	; (4564 <_ext_irq_handler+0x10c>)
    4460:	4b41      	ldr	r3, [pc, #260]	; (4568 <_ext_irq_handler+0x110>)
    4462:	4798      	blx	r3
    4464:	4603      	mov	r3, r0
    4466:	603b      	str	r3, [r7, #0]
	int8_t            pos;
	uint32_t          pin = INVALID_PIN_NUMBER;
    4468:	f04f 33ff 	mov.w	r3, #4294967295
    446c:	60bb      	str	r3, [r7, #8]

	hri_eic_clear_INTFLAG_reg(EIC, flags);
    446e:	683b      	ldr	r3, [r7, #0]
    4470:	4619      	mov	r1, r3
    4472:	483c      	ldr	r0, [pc, #240]	; (4564 <_ext_irq_handler+0x10c>)
    4474:	4b3d      	ldr	r3, [pc, #244]	; (456c <_ext_irq_handler+0x114>)
    4476:	4798      	blx	r3

	ASSERT(callback);
    4478:	4b3d      	ldr	r3, [pc, #244]	; (4570 <_ext_irq_handler+0x118>)
    447a:	681b      	ldr	r3, [r3, #0]
    447c:	2b00      	cmp	r3, #0
    447e:	bf14      	ite	ne
    4480:	2301      	movne	r3, #1
    4482:	2300      	moveq	r3, #0
    4484:	b2db      	uxtb	r3, r3
    4486:	22f4      	movs	r2, #244	; 0xf4
    4488:	493a      	ldr	r1, [pc, #232]	; (4574 <_ext_irq_handler+0x11c>)
    448a:	4618      	mov	r0, r3
    448c:	4b3a      	ldr	r3, [pc, #232]	; (4578 <_ext_irq_handler+0x120>)
    448e:	4798      	blx	r3

	while (flags) {
    4490:	e060      	b.n	4554 <_ext_irq_handler+0xfc>
		pos = ffs(flags) - 1;
    4492:	683b      	ldr	r3, [r7, #0]
    4494:	4618      	mov	r0, r3
    4496:	4b39      	ldr	r3, [pc, #228]	; (457c <_ext_irq_handler+0x124>)
    4498:	4798      	blx	r3
    449a:	4603      	mov	r3, r0
    449c:	b2db      	uxtb	r3, r3
    449e:	3b01      	subs	r3, #1
    44a0:	b2db      	uxtb	r3, r3
    44a2:	73fb      	strb	r3, [r7, #15]
		while (-1 != pos) {
    44a4:	e047      	b.n	4536 <_ext_irq_handler+0xde>
			uint8_t lower = 0, middle, upper = EXT_IRQ_AMOUNT;
    44a6:	2300      	movs	r3, #0
    44a8:	71fb      	strb	r3, [r7, #7]
    44aa:	2304      	movs	r3, #4
    44ac:	71bb      	strb	r3, [r7, #6]

			while (upper >= lower) {
    44ae:	e024      	b.n	44fa <_ext_irq_handler+0xa2>
				middle = (upper + lower) >> 1;
    44b0:	79ba      	ldrb	r2, [r7, #6]
    44b2:	79fb      	ldrb	r3, [r7, #7]
    44b4:	4413      	add	r3, r2
    44b6:	105b      	asrs	r3, r3, #1
    44b8:	717b      	strb	r3, [r7, #5]
				if (_map[middle].extint == pos) {
    44ba:	797b      	ldrb	r3, [r7, #5]
    44bc:	4a30      	ldr	r2, [pc, #192]	; (4580 <_ext_irq_handler+0x128>)
    44be:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
    44c2:	461a      	mov	r2, r3
    44c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
    44c8:	429a      	cmp	r2, r3
    44ca:	d106      	bne.n	44da <_ext_irq_handler+0x82>
					pin = _map[middle].pin;
    44cc:	797b      	ldrb	r3, [r7, #5]
    44ce:	4a2c      	ldr	r2, [pc, #176]	; (4580 <_ext_irq_handler+0x128>)
    44d0:	00db      	lsls	r3, r3, #3
    44d2:	4413      	add	r3, r2
    44d4:	685b      	ldr	r3, [r3, #4]
    44d6:	60bb      	str	r3, [r7, #8]
					break;
    44d8:	e013      	b.n	4502 <_ext_irq_handler+0xaa>
				}
				if (_map[middle].extint < pos) {
    44da:	797b      	ldrb	r3, [r7, #5]
    44dc:	4a28      	ldr	r2, [pc, #160]	; (4580 <_ext_irq_handler+0x128>)
    44de:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
    44e2:	461a      	mov	r2, r3
    44e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
    44e8:	429a      	cmp	r2, r3
    44ea:	da03      	bge.n	44f4 <_ext_irq_handler+0x9c>
					lower = middle + 1;
    44ec:	797b      	ldrb	r3, [r7, #5]
    44ee:	3301      	adds	r3, #1
    44f0:	71fb      	strb	r3, [r7, #7]
    44f2:	e002      	b.n	44fa <_ext_irq_handler+0xa2>
				} else {
					upper = middle - 1;
    44f4:	797b      	ldrb	r3, [r7, #5]
    44f6:	3b01      	subs	r3, #1
    44f8:	71bb      	strb	r3, [r7, #6]
			while (upper >= lower) {
    44fa:	79ba      	ldrb	r2, [r7, #6]
    44fc:	79fb      	ldrb	r3, [r7, #7]
    44fe:	429a      	cmp	r2, r3
    4500:	d2d6      	bcs.n	44b0 <_ext_irq_handler+0x58>
				}
			}

			if (INVALID_PIN_NUMBER != pin) {
    4502:	68bb      	ldr	r3, [r7, #8]
    4504:	f1b3 3fff 	cmp.w	r3, #4294967295
    4508:	d003      	beq.n	4512 <_ext_irq_handler+0xba>
				callback(pin);
    450a:	4b19      	ldr	r3, [pc, #100]	; (4570 <_ext_irq_handler+0x118>)
    450c:	681b      	ldr	r3, [r3, #0]
    450e:	68b8      	ldr	r0, [r7, #8]
    4510:	4798      	blx	r3
			}
			flags &= ~(1ul << pos);
    4512:	f997 300f 	ldrsb.w	r3, [r7, #15]
    4516:	2201      	movs	r2, #1
    4518:	fa02 f303 	lsl.w	r3, r2, r3
    451c:	43da      	mvns	r2, r3
    451e:	683b      	ldr	r3, [r7, #0]
    4520:	4013      	ands	r3, r2
    4522:	603b      	str	r3, [r7, #0]
			pos = ffs(flags) - 1;
    4524:	683b      	ldr	r3, [r7, #0]
    4526:	4618      	mov	r0, r3
    4528:	4b14      	ldr	r3, [pc, #80]	; (457c <_ext_irq_handler+0x124>)
    452a:	4798      	blx	r3
    452c:	4603      	mov	r3, r0
    452e:	b2db      	uxtb	r3, r3
    4530:	3b01      	subs	r3, #1
    4532:	b2db      	uxtb	r3, r3
    4534:	73fb      	strb	r3, [r7, #15]
		while (-1 != pos) {
    4536:	f997 300f 	ldrsb.w	r3, [r7, #15]
    453a:	f1b3 3fff 	cmp.w	r3, #4294967295
    453e:	d1b2      	bne.n	44a6 <_ext_irq_handler+0x4e>
		}
		flags = hri_eic_read_INTFLAG_reg(EIC);
    4540:	4808      	ldr	r0, [pc, #32]	; (4564 <_ext_irq_handler+0x10c>)
    4542:	4b09      	ldr	r3, [pc, #36]	; (4568 <_ext_irq_handler+0x110>)
    4544:	4798      	blx	r3
    4546:	4603      	mov	r3, r0
    4548:	603b      	str	r3, [r7, #0]
		hri_eic_clear_INTFLAG_reg(EIC, flags);
    454a:	683b      	ldr	r3, [r7, #0]
    454c:	4619      	mov	r1, r3
    454e:	4805      	ldr	r0, [pc, #20]	; (4564 <_ext_irq_handler+0x10c>)
    4550:	4b06      	ldr	r3, [pc, #24]	; (456c <_ext_irq_handler+0x114>)
    4552:	4798      	blx	r3
	while (flags) {
    4554:	683b      	ldr	r3, [r7, #0]
    4556:	2b00      	cmp	r3, #0
    4558:	d19b      	bne.n	4492 <_ext_irq_handler+0x3a>
	}
}
    455a:	bf00      	nop
    455c:	3710      	adds	r7, #16
    455e:	46bd      	mov	sp, r7
    4560:	bd80      	pop	{r7, pc}
    4562:	bf00      	nop
    4564:	40002800 	.word	0x40002800
    4568:	00004145 	.word	0x00004145
    456c:	0000415d 	.word	0x0000415d
    4570:	20000754 	.word	0x20000754
    4574:	0000cce0 	.word	0x0000cce0
    4578:	00003481 	.word	0x00003481
    457c:	0000c739 	.word	0x0000c739
    4580:	0000ccc0 	.word	0x0000ccc0

00004584 <EIC_4_Handler>:

/**
 * \brief EIC interrupt handler
 */
void EIC_4_Handler(void)
{
    4584:	b580      	push	{r7, lr}
    4586:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    4588:	4b01      	ldr	r3, [pc, #4]	; (4590 <EIC_4_Handler+0xc>)
    458a:	4798      	blx	r3
} /**
    458c:	bf00      	nop
    458e:	bd80      	pop	{r7, pc}
    4590:	00004459 	.word	0x00004459

00004594 <EIC_5_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_5_Handler(void)
{
    4594:	b580      	push	{r7, lr}
    4596:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    4598:	4b01      	ldr	r3, [pc, #4]	; (45a0 <EIC_5_Handler+0xc>)
    459a:	4798      	blx	r3
} /**
    459c:	bf00      	nop
    459e:	bd80      	pop	{r7, pc}
    45a0:	00004459 	.word	0x00004459

000045a4 <EIC_6_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_6_Handler(void)
{
    45a4:	b580      	push	{r7, lr}
    45a6:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    45a8:	4b01      	ldr	r3, [pc, #4]	; (45b0 <EIC_6_Handler+0xc>)
    45aa:	4798      	blx	r3
} /**
    45ac:	bf00      	nop
    45ae:	bd80      	pop	{r7, pc}
    45b0:	00004459 	.word	0x00004459

000045b4 <EIC_7_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_7_Handler(void)
{
    45b4:	b580      	push	{r7, lr}
    45b6:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    45b8:	4b01      	ldr	r3, [pc, #4]	; (45c0 <EIC_7_Handler+0xc>)
    45ba:	4798      	blx	r3
}
    45bc:	bf00      	nop
    45be:	bd80      	pop	{r7, pc}
    45c0:	00004459 	.word	0x00004459

000045c4 <hri_evsys_write_USER_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_evsys_write_USER_reg(const void *const hw, uint8_t index, hri_evsys_user_reg_t data)
{
    45c4:	b480      	push	{r7}
    45c6:	b085      	sub	sp, #20
    45c8:	af00      	add	r7, sp, #0
    45ca:	60f8      	str	r0, [r7, #12]
    45cc:	460b      	mov	r3, r1
    45ce:	607a      	str	r2, [r7, #4]
    45d0:	72fb      	strb	r3, [r7, #11]
	EVSYS_CRITICAL_SECTION_ENTER();
	((Evsys *)hw)->USER[index].reg = data;
    45d2:	7afa      	ldrb	r2, [r7, #11]
    45d4:	68fb      	ldr	r3, [r7, #12]
    45d6:	3248      	adds	r2, #72	; 0x48
    45d8:	6879      	ldr	r1, [r7, #4]
    45da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	EVSYS_CRITICAL_SECTION_LEAVE();
}
    45de:	bf00      	nop
    45e0:	3714      	adds	r7, #20
    45e2:	46bd      	mov	sp, r7
    45e4:	f85d 7b04 	ldr.w	r7, [sp], #4
    45e8:	4770      	bx	lr

000045ea <hri_evsys_write_CHINTEN_reg>:
	return ((Evsys *)hw)->Channel[submodule_index].CHINTENSET.reg;
}

static inline void hri_evsys_write_CHINTEN_reg(const void *const hw, uint8_t submodule_index,
                                               hri_evsys_chintenset_reg_t data)
{
    45ea:	b480      	push	{r7}
    45ec:	b083      	sub	sp, #12
    45ee:	af00      	add	r7, sp, #0
    45f0:	6078      	str	r0, [r7, #4]
    45f2:	460b      	mov	r3, r1
    45f4:	70fb      	strb	r3, [r7, #3]
    45f6:	4613      	mov	r3, r2
    45f8:	70bb      	strb	r3, [r7, #2]
	((Evsys *)hw)->Channel[submodule_index].CHINTENSET.reg = data;
    45fa:	78fb      	ldrb	r3, [r7, #3]
    45fc:	687a      	ldr	r2, [r7, #4]
    45fe:	3304      	adds	r3, #4
    4600:	00db      	lsls	r3, r3, #3
    4602:	4413      	add	r3, r2
    4604:	78ba      	ldrb	r2, [r7, #2]
    4606:	715a      	strb	r2, [r3, #5]
	((Evsys *)hw)->Channel[submodule_index].CHINTENCLR.reg = ~data;
    4608:	78fb      	ldrb	r3, [r7, #3]
    460a:	78ba      	ldrb	r2, [r7, #2]
    460c:	43d2      	mvns	r2, r2
    460e:	b2d1      	uxtb	r1, r2
    4610:	687a      	ldr	r2, [r7, #4]
    4612:	3304      	adds	r3, #4
    4614:	00db      	lsls	r3, r3, #3
    4616:	4413      	add	r3, r2
    4618:	460a      	mov	r2, r1
    461a:	711a      	strb	r2, [r3, #4]
}
    461c:	bf00      	nop
    461e:	370c      	adds	r7, #12
    4620:	46bd      	mov	sp, r7
    4622:	f85d 7b04 	ldr.w	r7, [sp], #4
    4626:	4770      	bx	lr

00004628 <hri_evsys_write_CHANNEL_reg>:
	return tmp;
}

static inline void hri_evsys_write_CHANNEL_reg(const void *const hw, uint8_t submodule_index,
                                               hri_evsys_channel_reg_t data)
{
    4628:	b480      	push	{r7}
    462a:	b085      	sub	sp, #20
    462c:	af00      	add	r7, sp, #0
    462e:	60f8      	str	r0, [r7, #12]
    4630:	460b      	mov	r3, r1
    4632:	607a      	str	r2, [r7, #4]
    4634:	72fb      	strb	r3, [r7, #11]
	EVSYS_CRITICAL_SECTION_ENTER();
	((Evsys *)hw)->Channel[submodule_index].CHANNEL.reg = data;
    4636:	7afa      	ldrb	r2, [r7, #11]
    4638:	68fb      	ldr	r3, [r7, #12]
    463a:	3204      	adds	r2, #4
    463c:	6879      	ldr	r1, [r7, #4]
    463e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
	EVSYS_CRITICAL_SECTION_LEAVE();
}
    4642:	bf00      	nop
    4644:	3714      	adds	r7, #20
    4646:	46bd      	mov	sp, r7
    4648:	f85d 7b04 	ldr.w	r7, [sp], #4
    464c:	4770      	bx	lr
	...

00004650 <_event_system_init>:

/**
 * \brief Initialize event system
 */
int32_t _event_system_init(void)
{
    4650:	b580      	push	{r7, lr}
    4652:	b082      	sub	sp, #8
    4654:	af00      	add	r7, sp, #0
	uint8_t i;
	/* configure user multiplexers */
	for (i = 0; i < EVSYS_USERS; i++) {
    4656:	2300      	movs	r3, #0
    4658:	71fb      	strb	r3, [r7, #7]
    465a:	e00b      	b.n	4674 <_event_system_init+0x24>
		hri_evsys_write_USER_reg(EVSYS, i, user_mux_confs[i]);
    465c:	79fb      	ldrb	r3, [r7, #7]
    465e:	4a18      	ldr	r2, [pc, #96]	; (46c0 <_event_system_init+0x70>)
    4660:	5cd3      	ldrb	r3, [r2, r3]
    4662:	461a      	mov	r2, r3
    4664:	79fb      	ldrb	r3, [r7, #7]
    4666:	4619      	mov	r1, r3
    4668:	4816      	ldr	r0, [pc, #88]	; (46c4 <_event_system_init+0x74>)
    466a:	4b17      	ldr	r3, [pc, #92]	; (46c8 <_event_system_init+0x78>)
    466c:	4798      	blx	r3
	for (i = 0; i < EVSYS_USERS; i++) {
    466e:	79fb      	ldrb	r3, [r7, #7]
    4670:	3301      	adds	r3, #1
    4672:	71fb      	strb	r3, [r7, #7]
    4674:	79fb      	ldrb	r3, [r7, #7]
    4676:	2b42      	cmp	r3, #66	; 0x42
    4678:	d9f0      	bls.n	465c <_event_system_init+0xc>
	}

	/* configure channels */
	for (i = 0; i < EVSYS_CHANNELS; i++) {
    467a:	2300      	movs	r3, #0
    467c:	71fb      	strb	r3, [r7, #7]
    467e:	e016      	b.n	46ae <_event_system_init+0x5e>
		hri_evsys_write_CHANNEL_reg(EVSYS, i, channel_confs[i]);
    4680:	79fb      	ldrb	r3, [r7, #7]
    4682:	4a12      	ldr	r2, [pc, #72]	; (46cc <_event_system_init+0x7c>)
    4684:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
    4688:	461a      	mov	r2, r3
    468a:	79fb      	ldrb	r3, [r7, #7]
    468c:	4619      	mov	r1, r3
    468e:	480d      	ldr	r0, [pc, #52]	; (46c4 <_event_system_init+0x74>)
    4690:	4b0f      	ldr	r3, [pc, #60]	; (46d0 <_event_system_init+0x80>)
    4692:	4798      	blx	r3
		hri_evsys_write_CHINTEN_reg(EVSYS, i, interrupt_cfg[i]);
    4694:	79fb      	ldrb	r3, [r7, #7]
    4696:	4a0f      	ldr	r2, [pc, #60]	; (46d4 <_event_system_init+0x84>)
    4698:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    469c:	b2da      	uxtb	r2, r3
    469e:	79fb      	ldrb	r3, [r7, #7]
    46a0:	4619      	mov	r1, r3
    46a2:	4808      	ldr	r0, [pc, #32]	; (46c4 <_event_system_init+0x74>)
    46a4:	4b0c      	ldr	r3, [pc, #48]	; (46d8 <_event_system_init+0x88>)
    46a6:	4798      	blx	r3
	for (i = 0; i < EVSYS_CHANNELS; i++) {
    46a8:	79fb      	ldrb	r3, [r7, #7]
    46aa:	3301      	adds	r3, #1
    46ac:	71fb      	strb	r3, [r7, #7]
    46ae:	79fb      	ldrb	r3, [r7, #7]
    46b0:	2b1f      	cmp	r3, #31
    46b2:	d9e5      	bls.n	4680 <_event_system_init+0x30>
	}

	return ERR_NONE;
    46b4:	2300      	movs	r3, #0
}
    46b6:	4618      	mov	r0, r3
    46b8:	3708      	adds	r7, #8
    46ba:	46bd      	mov	sp, r7
    46bc:	bd80      	pop	{r7, pc}
    46be:	bf00      	nop
    46c0:	0000ccf8 	.word	0x0000ccf8
    46c4:	4100e000 	.word	0x4100e000
    46c8:	000045c5 	.word	0x000045c5
    46cc:	0000cd3c 	.word	0x0000cd3c
    46d0:	00004629 	.word	0x00004629
    46d4:	0000cd7c 	.word	0x0000cd7c
    46d8:	000045eb 	.word	0x000045eb

000046dc <hri_gclk_wait_for_sync>:
{
    46dc:	b480      	push	{r7}
    46de:	b083      	sub	sp, #12
    46e0:	af00      	add	r7, sp, #0
    46e2:	6078      	str	r0, [r7, #4]
    46e4:	6039      	str	r1, [r7, #0]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    46e6:	bf00      	nop
    46e8:	687b      	ldr	r3, [r7, #4]
    46ea:	685a      	ldr	r2, [r3, #4]
    46ec:	683b      	ldr	r3, [r7, #0]
    46ee:	4013      	ands	r3, r2
    46f0:	2b00      	cmp	r3, #0
    46f2:	d1f9      	bne.n	46e8 <hri_gclk_wait_for_sync+0xc>
}
    46f4:	bf00      	nop
    46f6:	370c      	adds	r7, #12
    46f8:	46bd      	mov	sp, r7
    46fa:	f85d 7b04 	ldr.w	r7, [sp], #4
    46fe:	4770      	bx	lr

00004700 <hri_gclk_write_GENCTRL_reg>:
{
    4700:	b580      	push	{r7, lr}
    4702:	b084      	sub	sp, #16
    4704:	af00      	add	r7, sp, #0
    4706:	60f8      	str	r0, [r7, #12]
    4708:	460b      	mov	r3, r1
    470a:	607a      	str	r2, [r7, #4]
    470c:	72fb      	strb	r3, [r7, #11]
	((Gclk *)hw)->GENCTRL[index].reg = data;
    470e:	7afa      	ldrb	r2, [r7, #11]
    4710:	68fb      	ldr	r3, [r7, #12]
    4712:	3208      	adds	r2, #8
    4714:	6879      	ldr	r1, [r7, #4]
    4716:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	hri_gclk_wait_for_sync(hw, GCLK_SYNCBUSY_MASK);
    471a:	f643 71fd 	movw	r1, #16381	; 0x3ffd
    471e:	68f8      	ldr	r0, [r7, #12]
    4720:	4b02      	ldr	r3, [pc, #8]	; (472c <hri_gclk_write_GENCTRL_reg+0x2c>)
    4722:	4798      	blx	r3
}
    4724:	bf00      	nop
    4726:	3710      	adds	r7, #16
    4728:	46bd      	mov	sp, r7
    472a:	bd80      	pop	{r7, pc}
    472c:	000046dd 	.word	0x000046dd

00004730 <_gclk_init_generators_by_fref>:
	        | (CONF_GCLK_GENERATOR_11_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_11_SOURCE);
#endif
}

void _gclk_init_generators_by_fref(uint32_t bm)
{
    4730:	b580      	push	{r7, lr}
    4732:	b082      	sub	sp, #8
    4734:	af00      	add	r7, sp, #0
    4736:	6078      	str	r0, [r7, #4]

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
    4738:	687b      	ldr	r3, [r7, #4]
    473a:	f003 0301 	and.w	r3, r3, #1
    473e:	2b00      	cmp	r3, #0
    4740:	d004      	beq.n	474c <_gclk_init_generators_by_fref+0x1c>
		hri_gclk_write_GENCTRL_reg(
    4742:	4a2c      	ldr	r2, [pc, #176]	; (47f4 <_gclk_init_generators_by_fref+0xc4>)
    4744:	2100      	movs	r1, #0
    4746:	482c      	ldr	r0, [pc, #176]	; (47f8 <_gclk_init_generators_by_fref+0xc8>)
    4748:	4b2c      	ldr	r3, [pc, #176]	; (47fc <_gclk_init_generators_by_fref+0xcc>)
    474a:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_0_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_0_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_1_CONFIG == 1
	if (bm & (1ul << 1)) {
    474c:	687b      	ldr	r3, [r7, #4]
    474e:	f003 0302 	and.w	r3, r3, #2
    4752:	2b00      	cmp	r3, #0
    4754:	d004      	beq.n	4760 <_gclk_init_generators_by_fref+0x30>
		hri_gclk_write_GENCTRL_reg(
    4756:	4a2a      	ldr	r2, [pc, #168]	; (4800 <_gclk_init_generators_by_fref+0xd0>)
    4758:	2101      	movs	r1, #1
    475a:	4827      	ldr	r0, [pc, #156]	; (47f8 <_gclk_init_generators_by_fref+0xc8>)
    475c:	4b27      	ldr	r3, [pc, #156]	; (47fc <_gclk_init_generators_by_fref+0xcc>)
    475e:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_1_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_1_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_2_CONFIG == 1
	if (bm & (1ul << 2)) {
    4760:	687b      	ldr	r3, [r7, #4]
    4762:	f003 0304 	and.w	r3, r3, #4
    4766:	2b00      	cmp	r3, #0
    4768:	d004      	beq.n	4774 <_gclk_init_generators_by_fref+0x44>
		hri_gclk_write_GENCTRL_reg(
    476a:	4a26      	ldr	r2, [pc, #152]	; (4804 <_gclk_init_generators_by_fref+0xd4>)
    476c:	2102      	movs	r1, #2
    476e:	4822      	ldr	r0, [pc, #136]	; (47f8 <_gclk_init_generators_by_fref+0xc8>)
    4770:	4b22      	ldr	r3, [pc, #136]	; (47fc <_gclk_init_generators_by_fref+0xcc>)
    4772:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_2_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_2_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_3_CONFIG == 1
	if (bm & (1ul << 3)) {
    4774:	687b      	ldr	r3, [r7, #4]
    4776:	f003 0308 	and.w	r3, r3, #8
    477a:	2b00      	cmp	r3, #0
    477c:	d004      	beq.n	4788 <_gclk_init_generators_by_fref+0x58>
		hri_gclk_write_GENCTRL_reg(
    477e:	4a22      	ldr	r2, [pc, #136]	; (4808 <_gclk_init_generators_by_fref+0xd8>)
    4780:	2103      	movs	r1, #3
    4782:	481d      	ldr	r0, [pc, #116]	; (47f8 <_gclk_init_generators_by_fref+0xc8>)
    4784:	4b1d      	ldr	r3, [pc, #116]	; (47fc <_gclk_init_generators_by_fref+0xcc>)
    4786:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_3_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_3_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_4_CONFIG == 1
	if (bm & (1ul << 4)) {
    4788:	687b      	ldr	r3, [r7, #4]
    478a:	f003 0310 	and.w	r3, r3, #16
    478e:	2b00      	cmp	r3, #0
    4790:	d004      	beq.n	479c <_gclk_init_generators_by_fref+0x6c>
		hri_gclk_write_GENCTRL_reg(
    4792:	4a1e      	ldr	r2, [pc, #120]	; (480c <_gclk_init_generators_by_fref+0xdc>)
    4794:	2104      	movs	r1, #4
    4796:	4818      	ldr	r0, [pc, #96]	; (47f8 <_gclk_init_generators_by_fref+0xc8>)
    4798:	4b18      	ldr	r3, [pc, #96]	; (47fc <_gclk_init_generators_by_fref+0xcc>)
    479a:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_4_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_4_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_5_CONFIG == 1
	if (bm & (1ul << 5)) {
    479c:	687b      	ldr	r3, [r7, #4]
    479e:	f003 0320 	and.w	r3, r3, #32
    47a2:	2b00      	cmp	r3, #0
    47a4:	d004      	beq.n	47b0 <_gclk_init_generators_by_fref+0x80>
		hri_gclk_write_GENCTRL_reg(
    47a6:	4a1a      	ldr	r2, [pc, #104]	; (4810 <_gclk_init_generators_by_fref+0xe0>)
    47a8:	2105      	movs	r1, #5
    47aa:	4813      	ldr	r0, [pc, #76]	; (47f8 <_gclk_init_generators_by_fref+0xc8>)
    47ac:	4b13      	ldr	r3, [pc, #76]	; (47fc <_gclk_init_generators_by_fref+0xcc>)
    47ae:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_5_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_5_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_6_CONFIG == 1
	if (bm & (1ul << 6)) {
    47b0:	687b      	ldr	r3, [r7, #4]
    47b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
    47b6:	2b00      	cmp	r3, #0
    47b8:	d004      	beq.n	47c4 <_gclk_init_generators_by_fref+0x94>
		hri_gclk_write_GENCTRL_reg(
    47ba:	4a16      	ldr	r2, [pc, #88]	; (4814 <_gclk_init_generators_by_fref+0xe4>)
    47bc:	2106      	movs	r1, #6
    47be:	480e      	ldr	r0, [pc, #56]	; (47f8 <_gclk_init_generators_by_fref+0xc8>)
    47c0:	4b0e      	ldr	r3, [pc, #56]	; (47fc <_gclk_init_generators_by_fref+0xcc>)
    47c2:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_9_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_9_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_10_CONFIG == 1
	if (bm & (1ul << 10)) {
    47c4:	687b      	ldr	r3, [r7, #4]
    47c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    47ca:	2b00      	cmp	r3, #0
    47cc:	d004      	beq.n	47d8 <_gclk_init_generators_by_fref+0xa8>
		hri_gclk_write_GENCTRL_reg(
    47ce:	4a12      	ldr	r2, [pc, #72]	; (4818 <_gclk_init_generators_by_fref+0xe8>)
    47d0:	210a      	movs	r1, #10
    47d2:	4809      	ldr	r0, [pc, #36]	; (47f8 <_gclk_init_generators_by_fref+0xc8>)
    47d4:	4b09      	ldr	r3, [pc, #36]	; (47fc <_gclk_init_generators_by_fref+0xcc>)
    47d6:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_10_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_10_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_11_CONFIG == 1
	if (bm & (1ul << 11)) {
    47d8:	687b      	ldr	r3, [r7, #4]
    47da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
    47de:	2b00      	cmp	r3, #0
    47e0:	d004      	beq.n	47ec <_gclk_init_generators_by_fref+0xbc>
		hri_gclk_write_GENCTRL_reg(
    47e2:	4a0e      	ldr	r2, [pc, #56]	; (481c <_gclk_init_generators_by_fref+0xec>)
    47e4:	210b      	movs	r1, #11
    47e6:	4804      	ldr	r0, [pc, #16]	; (47f8 <_gclk_init_generators_by_fref+0xc8>)
    47e8:	4b04      	ldr	r3, [pc, #16]	; (47fc <_gclk_init_generators_by_fref+0xcc>)
    47ea:	4798      	blx	r3
		        | (CONF_GCLK_GEN_11_DIVSEL << GCLK_GENCTRL_DIVSEL_Pos) | (CONF_GCLK_GEN_11_OE << GCLK_GENCTRL_OE_Pos)
		        | (CONF_GCLK_GEN_11_OOV << GCLK_GENCTRL_OOV_Pos) | (CONF_GCLK_GEN_11_IDC << GCLK_GENCTRL_IDC_Pos)
		        | (CONF_GCLK_GENERATOR_11_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_11_SOURCE);
	}
#endif
}
    47ec:	bf00      	nop
    47ee:	3708      	adds	r7, #8
    47f0:	46bd      	mov	sp, r7
    47f2:	bd80      	pop	{r7, pc}
    47f4:	00010107 	.word	0x00010107
    47f8:	40001c00 	.word	0x40001c00
    47fc:	00004701 	.word	0x00004701
    4800:	00010907 	.word	0x00010907
    4804:	00010906 	.word	0x00010906
    4808:	00020908 	.word	0x00020908
    480c:	00010901 	.word	0x00010901
    4810:	00062901 	.word	0x00062901
    4814:	000c2901 	.word	0x000c2901
    4818:	00010905 	.word	0x00010905
    481c:	00041905 	.word	0x00041905

00004820 <hri_mclk_write_CPUDIV_reg>:
{
    4820:	b480      	push	{r7}
    4822:	b083      	sub	sp, #12
    4824:	af00      	add	r7, sp, #0
    4826:	6078      	str	r0, [r7, #4]
    4828:	460b      	mov	r3, r1
    482a:	70fb      	strb	r3, [r7, #3]
	((Mclk *)hw)->CPUDIV.reg = data;
    482c:	687b      	ldr	r3, [r7, #4]
    482e:	78fa      	ldrb	r2, [r7, #3]
    4830:	715a      	strb	r2, [r3, #5]
}
    4832:	bf00      	nop
    4834:	370c      	adds	r7, #12
    4836:	46bd      	mov	sp, r7
    4838:	f85d 7b04 	ldr.w	r7, [sp], #4
    483c:	4770      	bx	lr
	...

00004840 <_mclk_init>:

/**
 * \brief Initialize master clock generator
 */
void _mclk_init(void)
{
    4840:	b580      	push	{r7, lr}
    4842:	b082      	sub	sp, #8
    4844:	af00      	add	r7, sp, #0
	void *hw = (void *)MCLK;
    4846:	4b05      	ldr	r3, [pc, #20]	; (485c <_mclk_init+0x1c>)
    4848:	607b      	str	r3, [r7, #4]
	hri_mclk_write_CPUDIV_reg(hw, MCLK_CPUDIV_DIV(CONF_MCLK_CPUDIV));
    484a:	2101      	movs	r1, #1
    484c:	6878      	ldr	r0, [r7, #4]
    484e:	4b04      	ldr	r3, [pc, #16]	; (4860 <_mclk_init+0x20>)
    4850:	4798      	blx	r3
}
    4852:	bf00      	nop
    4854:	3708      	adds	r7, #8
    4856:	46bd      	mov	sp, r7
    4858:	bd80      	pop	{r7, pc}
    485a:	bf00      	nop
    485c:	40000800 	.word	0x40000800
    4860:	00004821 	.word	0x00004821

00004864 <hri_osc32kctrl_write_RTCCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_RTCCTRL_reg(const void *const hw, hri_osc32kctrl_rtcctrl_reg_t data)
{
    4864:	b480      	push	{r7}
    4866:	b083      	sub	sp, #12
    4868:	af00      	add	r7, sp, #0
    486a:	6078      	str	r0, [r7, #4]
    486c:	460b      	mov	r3, r1
    486e:	70fb      	strb	r3, [r7, #3]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
    4870:	687b      	ldr	r3, [r7, #4]
    4872:	78fa      	ldrb	r2, [r7, #3]
    4874:	741a      	strb	r2, [r3, #16]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    4876:	bf00      	nop
    4878:	370c      	adds	r7, #12
    487a:	46bd      	mov	sp, r7
    487c:	f85d 7b04 	ldr.w	r7, [sp], #4
    4880:	4770      	bx	lr

00004882 <hri_osc32kctrl_write_XOSC32K_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_XOSC32K_reg(const void *const hw, hri_osc32kctrl_xosc32k_reg_t data)
{
    4882:	b480      	push	{r7}
    4884:	b083      	sub	sp, #12
    4886:	af00      	add	r7, sp, #0
    4888:	6078      	str	r0, [r7, #4]
    488a:	460b      	mov	r3, r1
    488c:	807b      	strh	r3, [r7, #2]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->XOSC32K.reg = data;
    488e:	687b      	ldr	r3, [r7, #4]
    4890:	887a      	ldrh	r2, [r7, #2]
    4892:	829a      	strh	r2, [r3, #20]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    4894:	bf00      	nop
    4896:	370c      	adds	r7, #12
    4898:	46bd      	mov	sp, r7
    489a:	f85d 7b04 	ldr.w	r7, [sp], #4
    489e:	4770      	bx	lr

000048a0 <hri_osc32kctrl_write_CFDCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_CFDCTRL_reg(const void *const hw, hri_osc32kctrl_cfdctrl_reg_t data)
{
    48a0:	b480      	push	{r7}
    48a2:	b083      	sub	sp, #12
    48a4:	af00      	add	r7, sp, #0
    48a6:	6078      	str	r0, [r7, #4]
    48a8:	460b      	mov	r3, r1
    48aa:	70fb      	strb	r3, [r7, #3]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->CFDCTRL.reg = data;
    48ac:	687b      	ldr	r3, [r7, #4]
    48ae:	78fa      	ldrb	r2, [r7, #3]
    48b0:	759a      	strb	r2, [r3, #22]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    48b2:	bf00      	nop
    48b4:	370c      	adds	r7, #12
    48b6:	46bd      	mov	sp, r7
    48b8:	f85d 7b04 	ldr.w	r7, [sp], #4
    48bc:	4770      	bx	lr

000048be <hri_osc32kctrl_write_EVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_EVCTRL_reg(const void *const hw, hri_osc32kctrl_evctrl_reg_t data)
{
    48be:	b480      	push	{r7}
    48c0:	b083      	sub	sp, #12
    48c2:	af00      	add	r7, sp, #0
    48c4:	6078      	str	r0, [r7, #4]
    48c6:	460b      	mov	r3, r1
    48c8:	70fb      	strb	r3, [r7, #3]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->EVCTRL.reg = data;
    48ca:	687b      	ldr	r3, [r7, #4]
    48cc:	78fa      	ldrb	r2, [r7, #3]
    48ce:	75da      	strb	r2, [r3, #23]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    48d0:	bf00      	nop
    48d2:	370c      	adds	r7, #12
    48d4:	46bd      	mov	sp, r7
    48d6:	f85d 7b04 	ldr.w	r7, [sp], #4
    48da:	4770      	bx	lr

000048dc <hri_osc32kctrl_read_OSCULP32K_CALIB_bf>:
	((Osc32kctrl *)hw)->OSCULP32K.reg ^= OSC32KCTRL_OSCULP32K_CALIB(mask);
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}

static inline hri_osc32kctrl_osculp32k_reg_t hri_osc32kctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
    48dc:	b480      	push	{r7}
    48de:	b085      	sub	sp, #20
    48e0:	af00      	add	r7, sp, #0
    48e2:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Osc32kctrl *)hw)->OSCULP32K.reg;
    48e4:	687b      	ldr	r3, [r7, #4]
    48e6:	69db      	ldr	r3, [r3, #28]
    48e8:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & OSC32KCTRL_OSCULP32K_CALIB_Msk) >> OSC32KCTRL_OSCULP32K_CALIB_Pos;
    48ea:	68fb      	ldr	r3, [r7, #12]
    48ec:	0a1b      	lsrs	r3, r3, #8
    48ee:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    48f2:	60fb      	str	r3, [r7, #12]
	return tmp;
    48f4:	68fb      	ldr	r3, [r7, #12]
}
    48f6:	4618      	mov	r0, r3
    48f8:	3714      	adds	r7, #20
    48fa:	46bd      	mov	sp, r7
    48fc:	f85d 7b04 	ldr.w	r7, [sp], #4
    4900:	4770      	bx	lr

00004902 <hri_osc32kctrl_write_OSCULP32K_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_OSCULP32K_reg(const void *const hw, hri_osc32kctrl_osculp32k_reg_t data)
{
    4902:	b480      	push	{r7}
    4904:	b083      	sub	sp, #12
    4906:	af00      	add	r7, sp, #0
    4908:	6078      	str	r0, [r7, #4]
    490a:	6039      	str	r1, [r7, #0]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->OSCULP32K.reg = data;
    490c:	687b      	ldr	r3, [r7, #4]
    490e:	683a      	ldr	r2, [r7, #0]
    4910:	61da      	str	r2, [r3, #28]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    4912:	bf00      	nop
    4914:	370c      	adds	r7, #12
    4916:	46bd      	mov	sp, r7
    4918:	f85d 7b04 	ldr.w	r7, [sp], #4
    491c:	4770      	bx	lr
	...

00004920 <_osc32kctrl_init_sources>:

/**
 * \brief Initialize 32 kHz clock sources
 */
void _osc32kctrl_init_sources(void)
{
    4920:	b580      	push	{r7, lr}
    4922:	b082      	sub	sp, #8
    4924:	af00      	add	r7, sp, #0
	void *   hw    = (void *)OSC32KCTRL;
    4926:	4b13      	ldr	r3, [pc, #76]	; (4974 <_osc32kctrl_init_sources+0x54>)
    4928:	607b      	str	r3, [r7, #4]
	uint16_t calib = 0;
    492a:	2300      	movs	r3, #0
    492c:	807b      	strh	r3, [r7, #2]

#if CONF_XOSC32K_CONFIG == 1
	hri_osc32kctrl_write_XOSC32K_reg(
    492e:	f242 018e 	movw	r1, #8334	; 0x208e
    4932:	6878      	ldr	r0, [r7, #4]
    4934:	4b10      	ldr	r3, [pc, #64]	; (4978 <_osc32kctrl_init_sources+0x58>)
    4936:	4798      	blx	r3
#ifdef CONF_XOSC32K_CGM
	        OSC32KCTRL_XOSC32K_CGM(CONF_XOSC32K_CGM) |
#endif
	        (CONF_XOSC32K_ENABLE << OSC32KCTRL_XOSC32K_ENABLE_Pos));

	hri_osc32kctrl_write_CFDCTRL_reg(hw, (CONF_XOSC32K_CFDEN << OSC32KCTRL_CFDCTRL_CFDEN_Pos));
    4938:	2100      	movs	r1, #0
    493a:	6878      	ldr	r0, [r7, #4]
    493c:	4b0f      	ldr	r3, [pc, #60]	; (497c <_osc32kctrl_init_sources+0x5c>)
    493e:	4798      	blx	r3

	hri_osc32kctrl_write_EVCTRL_reg(hw, (CONF_XOSC32K_CFDEO << OSC32KCTRL_EVCTRL_CFDEO_Pos));
    4940:	2100      	movs	r1, #0
    4942:	6878      	ldr	r0, [r7, #4]
    4944:	4b0e      	ldr	r3, [pc, #56]	; (4980 <_osc32kctrl_init_sources+0x60>)
    4946:	4798      	blx	r3
#endif

#if CONF_OSCULP32K_CONFIG == 1
	calib = hri_osc32kctrl_read_OSCULP32K_CALIB_bf(hw);
    4948:	6878      	ldr	r0, [r7, #4]
    494a:	4b0e      	ldr	r3, [pc, #56]	; (4984 <_osc32kctrl_init_sources+0x64>)
    494c:	4798      	blx	r3
    494e:	4603      	mov	r3, r0
    4950:	807b      	strh	r3, [r7, #2]
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
#if CONF_OSCULP32K_CALIB_ENABLE == 1
	                                   OSC32KCTRL_OSCULP32K_CALIB(CONF_OSCULP32K_CALIB)
#else
	                                   OSC32KCTRL_OSCULP32K_CALIB(calib)
    4952:	887b      	ldrh	r3, [r7, #2]
    4954:	021b      	lsls	r3, r3, #8
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
    4956:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
    495a:	4619      	mov	r1, r3
    495c:	6878      	ldr	r0, [r7, #4]
    495e:	4b0a      	ldr	r3, [pc, #40]	; (4988 <_osc32kctrl_init_sources+0x68>)
    4960:	4798      	blx	r3
	while (!hri_osc32kctrl_get_STATUS_XOSC32KRDY_bit(hw))
		;
#endif
#endif

	hri_osc32kctrl_write_RTCCTRL_reg(hw, OSC32KCTRL_RTCCTRL_RTCSEL(CONF_RTCCTRL));
    4962:	2100      	movs	r1, #0
    4964:	6878      	ldr	r0, [r7, #4]
    4966:	4b09      	ldr	r3, [pc, #36]	; (498c <_osc32kctrl_init_sources+0x6c>)
    4968:	4798      	blx	r3
	(void)calib;
}
    496a:	bf00      	nop
    496c:	3708      	adds	r7, #8
    496e:	46bd      	mov	sp, r7
    4970:	bd80      	pop	{r7, pc}
    4972:	bf00      	nop
    4974:	40001400 	.word	0x40001400
    4978:	00004883 	.word	0x00004883
    497c:	000048a1 	.word	0x000048a1
    4980:	000048bf 	.word	0x000048bf
    4984:	000048dd 	.word	0x000048dd
    4988:	00004903 	.word	0x00004903
    498c:	00004865 	.word	0x00004865

00004990 <hri_gclk_wait_for_sync>:
{
    4990:	b480      	push	{r7}
    4992:	b083      	sub	sp, #12
    4994:	af00      	add	r7, sp, #0
    4996:	6078      	str	r0, [r7, #4]
    4998:	6039      	str	r1, [r7, #0]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    499a:	bf00      	nop
    499c:	687b      	ldr	r3, [r7, #4]
    499e:	685a      	ldr	r2, [r3, #4]
    49a0:	683b      	ldr	r3, [r7, #0]
    49a2:	4013      	ands	r3, r2
    49a4:	2b00      	cmp	r3, #0
    49a6:	d1f9      	bne.n	499c <hri_gclk_wait_for_sync+0xc>
}
    49a8:	bf00      	nop
    49aa:	370c      	adds	r7, #12
    49ac:	46bd      	mov	sp, r7
    49ae:	f85d 7b04 	ldr.w	r7, [sp], #4
    49b2:	4770      	bx	lr

000049b4 <hri_gclk_get_SYNCBUSY_GENCTRL0_bit>:
{
    49b4:	b480      	push	{r7}
    49b6:	b083      	sub	sp, #12
    49b8:	af00      	add	r7, sp, #0
    49ba:	6078      	str	r0, [r7, #4]
	return (((Gclk *)hw)->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL0) >> GCLK_SYNCBUSY_GENCTRL0_Pos;
    49bc:	687b      	ldr	r3, [r7, #4]
    49be:	685b      	ldr	r3, [r3, #4]
    49c0:	089b      	lsrs	r3, r3, #2
    49c2:	f003 0301 	and.w	r3, r3, #1
    49c6:	2b00      	cmp	r3, #0
    49c8:	bf14      	ite	ne
    49ca:	2301      	movne	r3, #1
    49cc:	2300      	moveq	r3, #0
    49ce:	b2db      	uxtb	r3, r3
}
    49d0:	4618      	mov	r0, r3
    49d2:	370c      	adds	r7, #12
    49d4:	46bd      	mov	sp, r7
    49d6:	f85d 7b04 	ldr.w	r7, [sp], #4
    49da:	4770      	bx	lr

000049dc <hri_gclk_read_SYNCBUSY_reg>:
{
    49dc:	b480      	push	{r7}
    49de:	b083      	sub	sp, #12
    49e0:	af00      	add	r7, sp, #0
    49e2:	6078      	str	r0, [r7, #4]
	return ((Gclk *)hw)->SYNCBUSY.reg;
    49e4:	687b      	ldr	r3, [r7, #4]
    49e6:	685b      	ldr	r3, [r3, #4]
}
    49e8:	4618      	mov	r0, r3
    49ea:	370c      	adds	r7, #12
    49ec:	46bd      	mov	sp, r7
    49ee:	f85d 7b04 	ldr.w	r7, [sp], #4
    49f2:	4770      	bx	lr

000049f4 <hri_gclk_write_GENCTRL_SRC_bf>:
{
    49f4:	b580      	push	{r7, lr}
    49f6:	b086      	sub	sp, #24
    49f8:	af00      	add	r7, sp, #0
    49fa:	60f8      	str	r0, [r7, #12]
    49fc:	460b      	mov	r3, r1
    49fe:	607a      	str	r2, [r7, #4]
    4a00:	72fb      	strb	r3, [r7, #11]
	tmp = ((Gclk *)hw)->GENCTRL[index].reg;
    4a02:	7afa      	ldrb	r2, [r7, #11]
    4a04:	68fb      	ldr	r3, [r7, #12]
    4a06:	3208      	adds	r2, #8
    4a08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    4a0c:	617b      	str	r3, [r7, #20]
	tmp &= ~GCLK_GENCTRL_SRC_Msk;
    4a0e:	697b      	ldr	r3, [r7, #20]
    4a10:	f023 030f 	bic.w	r3, r3, #15
    4a14:	617b      	str	r3, [r7, #20]
	tmp |= GCLK_GENCTRL_SRC(data);
    4a16:	687b      	ldr	r3, [r7, #4]
    4a18:	f003 030f 	and.w	r3, r3, #15
    4a1c:	697a      	ldr	r2, [r7, #20]
    4a1e:	4313      	orrs	r3, r2
    4a20:	617b      	str	r3, [r7, #20]
	((Gclk *)hw)->GENCTRL[index].reg = tmp;
    4a22:	7afa      	ldrb	r2, [r7, #11]
    4a24:	68fb      	ldr	r3, [r7, #12]
    4a26:	3208      	adds	r2, #8
    4a28:	6979      	ldr	r1, [r7, #20]
    4a2a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	hri_gclk_wait_for_sync(hw, GCLK_SYNCBUSY_MASK);
    4a2e:	f643 71fd 	movw	r1, #16381	; 0x3ffd
    4a32:	68f8      	ldr	r0, [r7, #12]
    4a34:	4b02      	ldr	r3, [pc, #8]	; (4a40 <hri_gclk_write_GENCTRL_SRC_bf+0x4c>)
    4a36:	4798      	blx	r3
}
    4a38:	bf00      	nop
    4a3a:	3718      	adds	r7, #24
    4a3c:	46bd      	mov	sp, r7
    4a3e:	bd80      	pop	{r7, pc}
    4a40:	00004991 	.word	0x00004991

00004a44 <hri_gclk_write_PCHCTRL_reg>:
{
    4a44:	b480      	push	{r7}
    4a46:	b085      	sub	sp, #20
    4a48:	af00      	add	r7, sp, #0
    4a4a:	60f8      	str	r0, [r7, #12]
    4a4c:	460b      	mov	r3, r1
    4a4e:	607a      	str	r2, [r7, #4]
    4a50:	72fb      	strb	r3, [r7, #11]
	((Gclk *)hw)->PCHCTRL[index].reg = data;
    4a52:	7afa      	ldrb	r2, [r7, #11]
    4a54:	68fb      	ldr	r3, [r7, #12]
    4a56:	3220      	adds	r2, #32
    4a58:	6879      	ldr	r1, [r7, #4]
    4a5a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
    4a5e:	bf00      	nop
    4a60:	3714      	adds	r7, #20
    4a62:	46bd      	mov	sp, r7
    4a64:	f85d 7b04 	ldr.w	r7, [sp], #4
    4a68:	4770      	bx	lr

00004a6a <hri_oscctrl_wait_for_sync>:
	return ((OscctrlDpll *)hw)->DPLLSYNCBUSY.reg & reg;
}

static inline void hri_oscctrl_wait_for_sync(const void *const hw, uint8_t submodule_index,
                                             hri_oscctrl_dpllsyncbusy_reg_t reg)
{
    4a6a:	b480      	push	{r7}
    4a6c:	b085      	sub	sp, #20
    4a6e:	af00      	add	r7, sp, #0
    4a70:	60f8      	str	r0, [r7, #12]
    4a72:	460b      	mov	r3, r1
    4a74:	607a      	str	r2, [r7, #4]
    4a76:	72fb      	strb	r3, [r7, #11]
	while (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg & reg) {
    4a78:	bf00      	nop
    4a7a:	7afa      	ldrb	r2, [r7, #11]
    4a7c:	68f9      	ldr	r1, [r7, #12]
    4a7e:	4613      	mov	r3, r2
    4a80:	009b      	lsls	r3, r3, #2
    4a82:	4413      	add	r3, r2
    4a84:	009b      	lsls	r3, r3, #2
    4a86:	440b      	add	r3, r1
    4a88:	333c      	adds	r3, #60	; 0x3c
    4a8a:	681a      	ldr	r2, [r3, #0]
    4a8c:	687b      	ldr	r3, [r7, #4]
    4a8e:	4013      	ands	r3, r2
    4a90:	2b00      	cmp	r3, #0
    4a92:	d1f2      	bne.n	4a7a <hri_oscctrl_wait_for_sync+0x10>
	};
}
    4a94:	bf00      	nop
    4a96:	3714      	adds	r7, #20
    4a98:	46bd      	mov	sp, r7
    4a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
    4a9e:	4770      	bx	lr

00004aa0 <hri_oscctrl_get_DPLLSTATUS_LOCK_bit>:
{
	return ((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg;
}

static inline bool hri_oscctrl_get_DPLLSTATUS_LOCK_bit(const void *const hw, uint8_t submodule_index)
{
    4aa0:	b480      	push	{r7}
    4aa2:	b083      	sub	sp, #12
    4aa4:	af00      	add	r7, sp, #0
    4aa6:	6078      	str	r0, [r7, #4]
    4aa8:	460b      	mov	r3, r1
    4aaa:	70fb      	strb	r3, [r7, #3]
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_LOCK)
    4aac:	78fa      	ldrb	r2, [r7, #3]
    4aae:	6879      	ldr	r1, [r7, #4]
    4ab0:	4613      	mov	r3, r2
    4ab2:	009b      	lsls	r3, r3, #2
    4ab4:	4413      	add	r3, r2
    4ab6:	009b      	lsls	r3, r3, #2
    4ab8:	440b      	add	r3, r1
    4aba:	3340      	adds	r3, #64	; 0x40
    4abc:	681b      	ldr	r3, [r3, #0]
	       >> OSCCTRL_DPLLSTATUS_LOCK_Pos;
    4abe:	f003 0301 	and.w	r3, r3, #1
    4ac2:	2b00      	cmp	r3, #0
    4ac4:	bf14      	ite	ne
    4ac6:	2301      	movne	r3, #1
    4ac8:	2300      	moveq	r3, #0
    4aca:	b2db      	uxtb	r3, r3
}
    4acc:	4618      	mov	r0, r3
    4ace:	370c      	adds	r7, #12
    4ad0:	46bd      	mov	sp, r7
    4ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
    4ad6:	4770      	bx	lr

00004ad8 <hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit>:

static inline bool hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(const void *const hw, uint8_t submodule_index)
{
    4ad8:	b480      	push	{r7}
    4ada:	b083      	sub	sp, #12
    4adc:	af00      	add	r7, sp, #0
    4ade:	6078      	str	r0, [r7, #4]
    4ae0:	460b      	mov	r3, r1
    4ae2:	70fb      	strb	r3, [r7, #3]
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_CLKRDY)
    4ae4:	78fa      	ldrb	r2, [r7, #3]
    4ae6:	6879      	ldr	r1, [r7, #4]
    4ae8:	4613      	mov	r3, r2
    4aea:	009b      	lsls	r3, r3, #2
    4aec:	4413      	add	r3, r2
    4aee:	009b      	lsls	r3, r3, #2
    4af0:	440b      	add	r3, r1
    4af2:	3340      	adds	r3, #64	; 0x40
    4af4:	681b      	ldr	r3, [r3, #0]
	       >> OSCCTRL_DPLLSTATUS_CLKRDY_Pos;
    4af6:	085b      	lsrs	r3, r3, #1
    4af8:	f003 0301 	and.w	r3, r3, #1
    4afc:	2b00      	cmp	r3, #0
    4afe:	bf14      	ite	ne
    4b00:	2301      	movne	r3, #1
    4b02:	2300      	moveq	r3, #0
    4b04:	b2db      	uxtb	r3, r3
}
    4b06:	4618      	mov	r0, r3
    4b08:	370c      	adds	r7, #12
    4b0a:	46bd      	mov	sp, r7
    4b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
    4b10:	4770      	bx	lr
	...

00004b14 <hri_oscctrl_write_DPLLCTRLA_reg>:
	return tmp;
}

static inline void hri_oscctrl_write_DPLLCTRLA_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_oscctrl_dpllctrla_reg_t data)
{
    4b14:	b580      	push	{r7, lr}
    4b16:	b082      	sub	sp, #8
    4b18:	af00      	add	r7, sp, #0
    4b1a:	6078      	str	r0, [r7, #4]
    4b1c:	460b      	mov	r3, r1
    4b1e:	70fb      	strb	r3, [r7, #3]
    4b20:	4613      	mov	r3, r2
    4b22:	70bb      	strb	r3, [r7, #2]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLA.reg = data;
    4b24:	78fa      	ldrb	r2, [r7, #3]
    4b26:	6879      	ldr	r1, [r7, #4]
    4b28:	4613      	mov	r3, r2
    4b2a:	009b      	lsls	r3, r3, #2
    4b2c:	4413      	add	r3, r2
    4b2e:	009b      	lsls	r3, r3, #2
    4b30:	440b      	add	r3, r1
    4b32:	3330      	adds	r3, #48	; 0x30
    4b34:	78ba      	ldrb	r2, [r7, #2]
    4b36:	701a      	strb	r2, [r3, #0]
	hri_oscctrl_wait_for_sync(hw, submodule_index, OSCCTRL_DPLLSYNCBUSY_ENABLE);
    4b38:	78fb      	ldrb	r3, [r7, #3]
    4b3a:	2202      	movs	r2, #2
    4b3c:	4619      	mov	r1, r3
    4b3e:	6878      	ldr	r0, [r7, #4]
    4b40:	4b02      	ldr	r3, [pc, #8]	; (4b4c <hri_oscctrl_write_DPLLCTRLA_reg+0x38>)
    4b42:	4798      	blx	r3
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    4b44:	bf00      	nop
    4b46:	3708      	adds	r7, #8
    4b48:	46bd      	mov	sp, r7
    4b4a:	bd80      	pop	{r7, pc}
    4b4c:	00004a6b 	.word	0x00004a6b

00004b50 <hri_oscctrl_write_DPLLRATIO_reg>:
	return tmp;
}

static inline void hri_oscctrl_write_DPLLRATIO_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_oscctrl_dpllratio_reg_t data)
{
    4b50:	b580      	push	{r7, lr}
    4b52:	b084      	sub	sp, #16
    4b54:	af00      	add	r7, sp, #0
    4b56:	60f8      	str	r0, [r7, #12]
    4b58:	460b      	mov	r3, r1
    4b5a:	607a      	str	r2, [r7, #4]
    4b5c:	72fb      	strb	r3, [r7, #11]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLRATIO.reg = data;
    4b5e:	7afa      	ldrb	r2, [r7, #11]
    4b60:	68f9      	ldr	r1, [r7, #12]
    4b62:	4613      	mov	r3, r2
    4b64:	009b      	lsls	r3, r3, #2
    4b66:	4413      	add	r3, r2
    4b68:	009b      	lsls	r3, r3, #2
    4b6a:	440b      	add	r3, r1
    4b6c:	3334      	adds	r3, #52	; 0x34
    4b6e:	687a      	ldr	r2, [r7, #4]
    4b70:	601a      	str	r2, [r3, #0]
	hri_oscctrl_wait_for_sync(hw, submodule_index, OSCCTRL_DPLLSYNCBUSY_MASK);
    4b72:	7afb      	ldrb	r3, [r7, #11]
    4b74:	2206      	movs	r2, #6
    4b76:	4619      	mov	r1, r3
    4b78:	68f8      	ldr	r0, [r7, #12]
    4b7a:	4b03      	ldr	r3, [pc, #12]	; (4b88 <hri_oscctrl_write_DPLLRATIO_reg+0x38>)
    4b7c:	4798      	blx	r3
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    4b7e:	bf00      	nop
    4b80:	3710      	adds	r7, #16
    4b82:	46bd      	mov	sp, r7
    4b84:	bd80      	pop	{r7, pc}
    4b86:	bf00      	nop
    4b88:	00004a6b 	.word	0x00004a6b

00004b8c <hri_oscctrl_write_DPLLCTRLB_reg>:
	return tmp;
}

static inline void hri_oscctrl_write_DPLLCTRLB_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_oscctrl_dpllctrlb_reg_t data)
{
    4b8c:	b480      	push	{r7}
    4b8e:	b085      	sub	sp, #20
    4b90:	af00      	add	r7, sp, #0
    4b92:	60f8      	str	r0, [r7, #12]
    4b94:	460b      	mov	r3, r1
    4b96:	607a      	str	r2, [r7, #4]
    4b98:	72fb      	strb	r3, [r7, #11]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLB.reg = data;
    4b9a:	7afa      	ldrb	r2, [r7, #11]
    4b9c:	68f9      	ldr	r1, [r7, #12]
    4b9e:	4613      	mov	r3, r2
    4ba0:	009b      	lsls	r3, r3, #2
    4ba2:	4413      	add	r3, r2
    4ba4:	009b      	lsls	r3, r3, #2
    4ba6:	440b      	add	r3, r1
    4ba8:	3338      	adds	r3, #56	; 0x38
    4baa:	687a      	ldr	r2, [r7, #4]
    4bac:	601a      	str	r2, [r3, #0]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    4bae:	bf00      	nop
    4bb0:	3714      	adds	r7, #20
    4bb2:	46bd      	mov	sp, r7
    4bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
    4bb8:	4770      	bx	lr

00004bba <hri_oscctrl_get_STATUS_XOSCRDY1_bit>:
{
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCRDY0) >> OSCCTRL_STATUS_XOSCRDY0_Pos;
}

static inline bool hri_oscctrl_get_STATUS_XOSCRDY1_bit(const void *const hw)
{
    4bba:	b480      	push	{r7}
    4bbc:	b083      	sub	sp, #12
    4bbe:	af00      	add	r7, sp, #0
    4bc0:	6078      	str	r0, [r7, #4]
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCRDY1) >> OSCCTRL_STATUS_XOSCRDY1_Pos;
    4bc2:	687b      	ldr	r3, [r7, #4]
    4bc4:	691b      	ldr	r3, [r3, #16]
    4bc6:	085b      	lsrs	r3, r3, #1
    4bc8:	f003 0301 	and.w	r3, r3, #1
    4bcc:	2b00      	cmp	r3, #0
    4bce:	bf14      	ite	ne
    4bd0:	2301      	movne	r3, #1
    4bd2:	2300      	moveq	r3, #0
    4bd4:	b2db      	uxtb	r3, r3
}
    4bd6:	4618      	mov	r0, r3
    4bd8:	370c      	adds	r7, #12
    4bda:	46bd      	mov	sp, r7
    4bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
    4be0:	4770      	bx	lr

00004be2 <hri_oscctrl_get_STATUS_DFLLRDY_bit>:
{
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCCKSW1) >> OSCCTRL_STATUS_XOSCCKSW1_Pos;
}

static inline bool hri_oscctrl_get_STATUS_DFLLRDY_bit(const void *const hw)
{
    4be2:	b480      	push	{r7}
    4be4:	b083      	sub	sp, #12
    4be6:	af00      	add	r7, sp, #0
    4be8:	6078      	str	r0, [r7, #4]
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_DFLLRDY) >> OSCCTRL_STATUS_DFLLRDY_Pos;
    4bea:	687b      	ldr	r3, [r7, #4]
    4bec:	691b      	ldr	r3, [r3, #16]
    4bee:	0a1b      	lsrs	r3, r3, #8
    4bf0:	f003 0301 	and.w	r3, r3, #1
    4bf4:	2b00      	cmp	r3, #0
    4bf6:	bf14      	ite	ne
    4bf8:	2301      	movne	r3, #1
    4bfa:	2300      	moveq	r3, #0
    4bfc:	b2db      	uxtb	r3, r3
}
    4bfe:	4618      	mov	r0, r3
    4c00:	370c      	adds	r7, #12
    4c02:	46bd      	mov	sp, r7
    4c04:	f85d 7b04 	ldr.w	r7, [sp], #4
    4c08:	4770      	bx	lr

00004c0a <hri_oscctrl_get_STATUS_reg>:
{
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_DPLL1LDRTO) >> OSCCTRL_STATUS_DPLL1LDRTO_Pos;
}

static inline hri_oscctrl_status_reg_t hri_oscctrl_get_STATUS_reg(const void *const hw, hri_oscctrl_status_reg_t mask)
{
    4c0a:	b480      	push	{r7}
    4c0c:	b085      	sub	sp, #20
    4c0e:	af00      	add	r7, sp, #0
    4c10:	6078      	str	r0, [r7, #4]
    4c12:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    4c14:	687b      	ldr	r3, [r7, #4]
    4c16:	691b      	ldr	r3, [r3, #16]
    4c18:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    4c1a:	68fa      	ldr	r2, [r7, #12]
    4c1c:	683b      	ldr	r3, [r7, #0]
    4c1e:	4013      	ands	r3, r2
    4c20:	60fb      	str	r3, [r7, #12]
	return tmp;
    4c22:	68fb      	ldr	r3, [r7, #12]
}
    4c24:	4618      	mov	r0, r3
    4c26:	3714      	adds	r7, #20
    4c28:	46bd      	mov	sp, r7
    4c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
    4c2e:	4770      	bx	lr

00004c30 <hri_oscctrl_write_XOSCCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_XOSCCTRL_reg(const void *const hw, uint8_t index, hri_oscctrl_xoscctrl_reg_t data)
{
    4c30:	b480      	push	{r7}
    4c32:	b085      	sub	sp, #20
    4c34:	af00      	add	r7, sp, #0
    4c36:	60f8      	str	r0, [r7, #12]
    4c38:	460b      	mov	r3, r1
    4c3a:	607a      	str	r2, [r7, #4]
    4c3c:	72fb      	strb	r3, [r7, #11]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->XOSCCTRL[index].reg = data;
    4c3e:	7afb      	ldrb	r3, [r7, #11]
    4c40:	68fa      	ldr	r2, [r7, #12]
    4c42:	3304      	adds	r3, #4
    4c44:	009b      	lsls	r3, r3, #2
    4c46:	4413      	add	r3, r2
    4c48:	687a      	ldr	r2, [r7, #4]
    4c4a:	605a      	str	r2, [r3, #4]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    4c4c:	bf00      	nop
    4c4e:	3714      	adds	r7, #20
    4c50:	46bd      	mov	sp, r7
    4c52:	f85d 7b04 	ldr.w	r7, [sp], #4
    4c56:	4770      	bx	lr

00004c58 <hri_oscctrl_write_DFLLCTRLA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_DFLLCTRLA_reg(const void *const hw, hri_oscctrl_dfllctrla_reg_t data)
{
    4c58:	b480      	push	{r7}
    4c5a:	b083      	sub	sp, #12
    4c5c:	af00      	add	r7, sp, #0
    4c5e:	6078      	str	r0, [r7, #4]
    4c60:	460b      	mov	r3, r1
    4c62:	70fb      	strb	r3, [r7, #3]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLCTRLA.reg = data;
    4c64:	687b      	ldr	r3, [r7, #4]
    4c66:	78fa      	ldrb	r2, [r7, #3]
    4c68:	771a      	strb	r2, [r3, #28]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    4c6a:	bf00      	nop
    4c6c:	370c      	adds	r7, #12
    4c6e:	46bd      	mov	sp, r7
    4c70:	f85d 7b04 	ldr.w	r7, [sp], #4
    4c74:	4770      	bx	lr

00004c76 <hri_oscctrl_get_DFLLCTRLB_MODE_bit>:
	((Oscctrl *)hw)->DFLLCTRLB.reg |= OSCCTRL_DFLLCTRLB_MODE;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLCTRLB_MODE_bit(const void *const hw)
{
    4c76:	b480      	push	{r7}
    4c78:	b085      	sub	sp, #20
    4c7a:	af00      	add	r7, sp, #0
    4c7c:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
    4c7e:	687b      	ldr	r3, [r7, #4]
    4c80:	f893 3020 	ldrb.w	r3, [r3, #32]
    4c84:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLCTRLB_MODE) >> OSCCTRL_DFLLCTRLB_MODE_Pos;
    4c86:	7bfb      	ldrb	r3, [r7, #15]
    4c88:	f003 0301 	and.w	r3, r3, #1
    4c8c:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    4c8e:	7bfb      	ldrb	r3, [r7, #15]
    4c90:	2b00      	cmp	r3, #0
    4c92:	bf14      	ite	ne
    4c94:	2301      	movne	r3, #1
    4c96:	2300      	moveq	r3, #0
    4c98:	b2db      	uxtb	r3, r3
}
    4c9a:	4618      	mov	r0, r3
    4c9c:	3714      	adds	r7, #20
    4c9e:	46bd      	mov	sp, r7
    4ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
    4ca4:	4770      	bx	lr

00004ca6 <hri_oscctrl_write_DFLLCTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_DFLLCTRLB_reg(const void *const hw, hri_oscctrl_dfllctrlb_reg_t data)
{
    4ca6:	b480      	push	{r7}
    4ca8:	b083      	sub	sp, #12
    4caa:	af00      	add	r7, sp, #0
    4cac:	6078      	str	r0, [r7, #4]
    4cae:	460b      	mov	r3, r1
    4cb0:	70fb      	strb	r3, [r7, #3]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLCTRLB.reg = data;
    4cb2:	687b      	ldr	r3, [r7, #4]
    4cb4:	78fa      	ldrb	r2, [r7, #3]
    4cb6:	f883 2020 	strb.w	r2, [r3, #32]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    4cba:	bf00      	nop
    4cbc:	370c      	adds	r7, #12
    4cbe:	46bd      	mov	sp, r7
    4cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
    4cc4:	4770      	bx	lr

00004cc6 <hri_oscctrl_write_DFLLVAL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_DFLLVAL_reg(const void *const hw, hri_oscctrl_dfllval_reg_t data)
{
    4cc6:	b480      	push	{r7}
    4cc8:	b083      	sub	sp, #12
    4cca:	af00      	add	r7, sp, #0
    4ccc:	6078      	str	r0, [r7, #4]
    4cce:	6039      	str	r1, [r7, #0]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLVAL.reg = data;
    4cd0:	687b      	ldr	r3, [r7, #4]
    4cd2:	683a      	ldr	r2, [r7, #0]
    4cd4:	625a      	str	r2, [r3, #36]	; 0x24
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    4cd6:	bf00      	nop
    4cd8:	370c      	adds	r7, #12
    4cda:	46bd      	mov	sp, r7
    4cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
    4ce0:	4770      	bx	lr

00004ce2 <hri_oscctrl_read_DFLLVAL_reg>:
	((Oscctrl *)hw)->DFLLVAL.reg ^= mask;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline hri_oscctrl_dfllval_reg_t hri_oscctrl_read_DFLLVAL_reg(const void *const hw)
{
    4ce2:	b480      	push	{r7}
    4ce4:	b083      	sub	sp, #12
    4ce6:	af00      	add	r7, sp, #0
    4ce8:	6078      	str	r0, [r7, #4]
	return ((Oscctrl *)hw)->DFLLVAL.reg;
    4cea:	687b      	ldr	r3, [r7, #4]
    4cec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
    4cee:	4618      	mov	r0, r3
    4cf0:	370c      	adds	r7, #12
    4cf2:	46bd      	mov	sp, r7
    4cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
    4cf8:	4770      	bx	lr

00004cfa <hri_oscctrl_write_DFLLMUL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_DFLLMUL_reg(const void *const hw, hri_oscctrl_dfllmul_reg_t data)
{
    4cfa:	b480      	push	{r7}
    4cfc:	b083      	sub	sp, #12
    4cfe:	af00      	add	r7, sp, #0
    4d00:	6078      	str	r0, [r7, #4]
    4d02:	6039      	str	r1, [r7, #0]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLMUL.reg = data;
    4d04:	687b      	ldr	r3, [r7, #4]
    4d06:	683a      	ldr	r2, [r7, #0]
    4d08:	629a      	str	r2, [r3, #40]	; 0x28
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    4d0a:	bf00      	nop
    4d0c:	370c      	adds	r7, #12
    4d0e:	46bd      	mov	sp, r7
    4d10:	f85d 7b04 	ldr.w	r7, [sp], #4
    4d14:	4770      	bx	lr

00004d16 <hri_oscctrl_get_DFLLSYNC_ENABLE_bit>:
	((Oscctrl *)hw)->DFLLSYNC.reg |= OSCCTRL_DFLLSYNC_ENABLE;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLSYNC_ENABLE_bit(const void *const hw)
{
    4d16:	b480      	push	{r7}
    4d18:	b085      	sub	sp, #20
    4d1a:	af00      	add	r7, sp, #0
    4d1c:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    4d1e:	687b      	ldr	r3, [r7, #4]
    4d20:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    4d24:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLSYNC_ENABLE) >> OSCCTRL_DFLLSYNC_ENABLE_Pos;
    4d26:	7bfb      	ldrb	r3, [r7, #15]
    4d28:	085b      	lsrs	r3, r3, #1
    4d2a:	b2db      	uxtb	r3, r3
    4d2c:	f003 0301 	and.w	r3, r3, #1
    4d30:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    4d32:	7bfb      	ldrb	r3, [r7, #15]
    4d34:	2b00      	cmp	r3, #0
    4d36:	bf14      	ite	ne
    4d38:	2301      	movne	r3, #1
    4d3a:	2300      	moveq	r3, #0
    4d3c:	b2db      	uxtb	r3, r3
}
    4d3e:	4618      	mov	r0, r3
    4d40:	3714      	adds	r7, #20
    4d42:	46bd      	mov	sp, r7
    4d44:	f85d 7b04 	ldr.w	r7, [sp], #4
    4d48:	4770      	bx	lr

00004d4a <hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit>:
	((Oscctrl *)hw)->DFLLSYNC.reg |= OSCCTRL_DFLLSYNC_DFLLCTRLB;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(const void *const hw)
{
    4d4a:	b480      	push	{r7}
    4d4c:	b085      	sub	sp, #20
    4d4e:	af00      	add	r7, sp, #0
    4d50:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    4d52:	687b      	ldr	r3, [r7, #4]
    4d54:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    4d58:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLSYNC_DFLLCTRLB) >> OSCCTRL_DFLLSYNC_DFLLCTRLB_Pos;
    4d5a:	7bfb      	ldrb	r3, [r7, #15]
    4d5c:	089b      	lsrs	r3, r3, #2
    4d5e:	b2db      	uxtb	r3, r3
    4d60:	f003 0301 	and.w	r3, r3, #1
    4d64:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    4d66:	7bfb      	ldrb	r3, [r7, #15]
    4d68:	2b00      	cmp	r3, #0
    4d6a:	bf14      	ite	ne
    4d6c:	2301      	movne	r3, #1
    4d6e:	2300      	moveq	r3, #0
    4d70:	b2db      	uxtb	r3, r3
}
    4d72:	4618      	mov	r0, r3
    4d74:	3714      	adds	r7, #20
    4d76:	46bd      	mov	sp, r7
    4d78:	f85d 7b04 	ldr.w	r7, [sp], #4
    4d7c:	4770      	bx	lr

00004d7e <hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit>:
	((Oscctrl *)hw)->DFLLSYNC.reg |= OSCCTRL_DFLLSYNC_DFLLVAL;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit(const void *const hw)
{
    4d7e:	b480      	push	{r7}
    4d80:	b085      	sub	sp, #20
    4d82:	af00      	add	r7, sp, #0
    4d84:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    4d86:	687b      	ldr	r3, [r7, #4]
    4d88:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    4d8c:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLSYNC_DFLLVAL) >> OSCCTRL_DFLLSYNC_DFLLVAL_Pos;
    4d8e:	7bfb      	ldrb	r3, [r7, #15]
    4d90:	08db      	lsrs	r3, r3, #3
    4d92:	b2db      	uxtb	r3, r3
    4d94:	f003 0301 	and.w	r3, r3, #1
    4d98:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    4d9a:	7bfb      	ldrb	r3, [r7, #15]
    4d9c:	2b00      	cmp	r3, #0
    4d9e:	bf14      	ite	ne
    4da0:	2301      	movne	r3, #1
    4da2:	2300      	moveq	r3, #0
    4da4:	b2db      	uxtb	r3, r3
}
    4da6:	4618      	mov	r0, r3
    4da8:	3714      	adds	r7, #20
    4daa:	46bd      	mov	sp, r7
    4dac:	f85d 7b04 	ldr.w	r7, [sp], #4
    4db0:	4770      	bx	lr

00004db2 <hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit>:
	((Oscctrl *)hw)->DFLLSYNC.reg |= OSCCTRL_DFLLSYNC_DFLLMUL;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(const void *const hw)
{
    4db2:	b480      	push	{r7}
    4db4:	b085      	sub	sp, #20
    4db6:	af00      	add	r7, sp, #0
    4db8:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    4dba:	687b      	ldr	r3, [r7, #4]
    4dbc:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    4dc0:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLSYNC_DFLLMUL) >> OSCCTRL_DFLLSYNC_DFLLMUL_Pos;
    4dc2:	7bfb      	ldrb	r3, [r7, #15]
    4dc4:	091b      	lsrs	r3, r3, #4
    4dc6:	b2db      	uxtb	r3, r3
    4dc8:	f003 0301 	and.w	r3, r3, #1
    4dcc:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    4dce:	7bfb      	ldrb	r3, [r7, #15]
    4dd0:	2b00      	cmp	r3, #0
    4dd2:	bf14      	ite	ne
    4dd4:	2301      	movne	r3, #1
    4dd6:	2300      	moveq	r3, #0
    4dd8:	b2db      	uxtb	r3, r3
}
    4dda:	4618      	mov	r0, r3
    4ddc:	3714      	adds	r7, #20
    4dde:	46bd      	mov	sp, r7
    4de0:	f85d 7b04 	ldr.w	r7, [sp], #4
    4de4:	4770      	bx	lr
	...

00004de8 <_oscctrl_init_sources>:

/**
 * \brief Initialize clock sources
 */
void _oscctrl_init_sources(void)
{
    4de8:	b580      	push	{r7, lr}
    4dea:	b082      	sub	sp, #8
    4dec:	af00      	add	r7, sp, #0
	void *hw = (void *)OSCCTRL;
    4dee:	4b0a      	ldr	r3, [pc, #40]	; (4e18 <_oscctrl_init_sources+0x30>)
    4df0:	607b      	str	r3, [r7, #4]
	hri_oscctrl_set_XOSCCTRL_ONDEMAND_bit(hw, 0);
#endif
#endif

#if CONF_XOSC1_CONFIG == 1
	hri_oscctrl_write_XOSCCTRL_reg(
    4df2:	4a0a      	ldr	r2, [pc, #40]	; (4e1c <_oscctrl_init_sources+0x34>)
    4df4:	2101      	movs	r1, #1
    4df6:	6878      	ldr	r0, [r7, #4]
    4df8:	4b09      	ldr	r3, [pc, #36]	; (4e20 <_oscctrl_init_sources+0x38>)
    4dfa:	4798      	blx	r3
	        | (CONF_XOSC1_XTALEN << OSCCTRL_XOSCCTRL_XTALEN_Pos) | (CONF_XOSC1_ENABLE << OSCCTRL_XOSCCTRL_ENABLE_Pos));
#endif

#if CONF_XOSC1_CONFIG == 1
#if CONF_XOSC1_ENABLE == 1
	while (!hri_oscctrl_get_STATUS_XOSCRDY1_bit(hw))
    4dfc:	bf00      	nop
    4dfe:	6878      	ldr	r0, [r7, #4]
    4e00:	4b08      	ldr	r3, [pc, #32]	; (4e24 <_oscctrl_init_sources+0x3c>)
    4e02:	4798      	blx	r3
    4e04:	4603      	mov	r3, r0
    4e06:	f083 0301 	eor.w	r3, r3, #1
    4e0a:	b2db      	uxtb	r3, r3
    4e0c:	2b00      	cmp	r3, #0
    4e0e:	d1f6      	bne.n	4dfe <_oscctrl_init_sources+0x16>
	hri_oscctrl_set_XOSCCTRL_ONDEMAND_bit(hw, 1);
#endif
#endif

	(void)hw;
}
    4e10:	bf00      	nop
    4e12:	3708      	adds	r7, #8
    4e14:	46bd      	mov	sp, r7
    4e16:	bd80      	pop	{r7, pc}
    4e18:	40001000 	.word	0x40001000
    4e1c:	03002606 	.word	0x03002606
    4e20:	00004c31 	.word	0x00004c31
    4e24:	00004bbb 	.word	0x00004bbb

00004e28 <_oscctrl_init_referenced_generators>:

void _oscctrl_init_referenced_generators(void)
{
    4e28:	b580      	push	{r7, lr}
    4e2a:	b084      	sub	sp, #16
    4e2c:	af00      	add	r7, sp, #0
	void *hw = (void *)OSCCTRL;
    4e2e:	4b6b      	ldr	r3, [pc, #428]	; (4fdc <_oscctrl_init_referenced_generators+0x1b4>)
    4e30:	60fb      	str	r3, [r7, #12]

#if CONF_DFLL_CONFIG == 1
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, GCLK_GENCTRL_SRC_OSCULP32K);
    4e32:	2204      	movs	r2, #4
    4e34:	2100      	movs	r1, #0
    4e36:	486a      	ldr	r0, [pc, #424]	; (4fe0 <_oscctrl_init_referenced_generators+0x1b8>)
    4e38:	4b6a      	ldr	r3, [pc, #424]	; (4fe4 <_oscctrl_init_referenced_generators+0x1bc>)
    4e3a:	4798      	blx	r3
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
    4e3c:	bf00      	nop
    4e3e:	4868      	ldr	r0, [pc, #416]	; (4fe0 <_oscctrl_init_referenced_generators+0x1b8>)
    4e40:	4b69      	ldr	r3, [pc, #420]	; (4fe8 <_oscctrl_init_referenced_generators+0x1c0>)
    4e42:	4798      	blx	r3
    4e44:	4603      	mov	r3, r0
    4e46:	2b00      	cmp	r3, #0
    4e48:	d1f9      	bne.n	4e3e <_oscctrl_init_referenced_generators+0x16>
		;
	uint8_t tmp;
	hri_oscctrl_write_DFLLCTRLA_reg(hw, 0);
    4e4a:	2100      	movs	r1, #0
    4e4c:	68f8      	ldr	r0, [r7, #12]
    4e4e:	4b67      	ldr	r3, [pc, #412]	; (4fec <_oscctrl_init_referenced_generators+0x1c4>)
    4e50:	4798      	blx	r3
#if CONF_DFLL_USBCRM != 1 && CONF_DFLL_MODE != 0
	hri_gclk_write_PCHCTRL_reg(
	    GCLK, OSCCTRL_GCLK_ID_DFLL48, (1 << GCLK_PCHCTRL_CHEN_Pos) | GCLK_PCHCTRL_GEN(CONF_DFLL_GCLK));
#endif

	hri_oscctrl_write_DFLLMUL_reg(hw,
    4e52:	4967      	ldr	r1, [pc, #412]	; (4ff0 <_oscctrl_init_referenced_generators+0x1c8>)
    4e54:	68f8      	ldr	r0, [r7, #12]
    4e56:	4b67      	ldr	r3, [pc, #412]	; (4ff4 <_oscctrl_init_referenced_generators+0x1cc>)
    4e58:	4798      	blx	r3
	                              OSCCTRL_DFLLMUL_CSTEP(CONF_DFLL_CSTEP) | OSCCTRL_DFLLMUL_FSTEP(CONF_DFLL_FSTEP)
	                                  | OSCCTRL_DFLLMUL_MUL(CONF_DFLL_MUL));
	while (hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(hw))
    4e5a:	bf00      	nop
    4e5c:	68f8      	ldr	r0, [r7, #12]
    4e5e:	4b66      	ldr	r3, [pc, #408]	; (4ff8 <_oscctrl_init_referenced_generators+0x1d0>)
    4e60:	4798      	blx	r3
    4e62:	4603      	mov	r3, r0
    4e64:	2b00      	cmp	r3, #0
    4e66:	d1f9      	bne.n	4e5c <_oscctrl_init_referenced_generators+0x34>
		;

	hri_oscctrl_write_DFLLCTRLB_reg(hw, 0);
    4e68:	2100      	movs	r1, #0
    4e6a:	68f8      	ldr	r0, [r7, #12]
    4e6c:	4b63      	ldr	r3, [pc, #396]	; (4ffc <_oscctrl_init_referenced_generators+0x1d4>)
    4e6e:	4798      	blx	r3
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    4e70:	bf00      	nop
    4e72:	68f8      	ldr	r0, [r7, #12]
    4e74:	4b62      	ldr	r3, [pc, #392]	; (5000 <_oscctrl_init_referenced_generators+0x1d8>)
    4e76:	4798      	blx	r3
    4e78:	4603      	mov	r3, r0
    4e7a:	2b00      	cmp	r3, #0
    4e7c:	d1f9      	bne.n	4e72 <_oscctrl_init_referenced_generators+0x4a>
		;

	tmp = (CONF_DFLL_RUNSTDBY << OSCCTRL_DFLLCTRLA_RUNSTDBY_Pos) | OSCCTRL_DFLLCTRLA_ENABLE;
    4e7e:	2302      	movs	r3, #2
    4e80:	72fb      	strb	r3, [r7, #11]
	hri_oscctrl_write_DFLLCTRLA_reg(hw, tmp);
    4e82:	7afb      	ldrb	r3, [r7, #11]
    4e84:	4619      	mov	r1, r3
    4e86:	68f8      	ldr	r0, [r7, #12]
    4e88:	4b58      	ldr	r3, [pc, #352]	; (4fec <_oscctrl_init_referenced_generators+0x1c4>)
    4e8a:	4798      	blx	r3
	while (hri_oscctrl_get_DFLLSYNC_ENABLE_bit(hw))
    4e8c:	bf00      	nop
    4e8e:	68f8      	ldr	r0, [r7, #12]
    4e90:	4b5c      	ldr	r3, [pc, #368]	; (5004 <_oscctrl_init_referenced_generators+0x1dc>)
    4e92:	4798      	blx	r3
    4e94:	4603      	mov	r3, r0
    4e96:	2b00      	cmp	r3, #0
    4e98:	d1f9      	bne.n	4e8e <_oscctrl_init_referenced_generators+0x66>
		;

#if CONF_DFLL_OVERWRITE_CALIBRATION == 1
	hri_oscctrl_write_DFLLVAL_reg(hw, OSCCTRL_DFLLVAL_COARSE(CONF_DFLL_COARSE) | OSCCTRL_DFLLVAL_FINE(CONF_DFLL_FINE));
#endif
	hri_oscctrl_write_DFLLVAL_reg(hw, hri_oscctrl_read_DFLLVAL_reg(hw));
    4e9a:	68f8      	ldr	r0, [r7, #12]
    4e9c:	4b5a      	ldr	r3, [pc, #360]	; (5008 <_oscctrl_init_referenced_generators+0x1e0>)
    4e9e:	4798      	blx	r3
    4ea0:	4603      	mov	r3, r0
    4ea2:	4619      	mov	r1, r3
    4ea4:	68f8      	ldr	r0, [r7, #12]
    4ea6:	4b59      	ldr	r3, [pc, #356]	; (500c <_oscctrl_init_referenced_generators+0x1e4>)
    4ea8:	4798      	blx	r3
	while (hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit(hw))
    4eaa:	bf00      	nop
    4eac:	68f8      	ldr	r0, [r7, #12]
    4eae:	4b58      	ldr	r3, [pc, #352]	; (5010 <_oscctrl_init_referenced_generators+0x1e8>)
    4eb0:	4798      	blx	r3
    4eb2:	4603      	mov	r3, r0
    4eb4:	2b00      	cmp	r3, #0
    4eb6:	d1f9      	bne.n	4eac <_oscctrl_init_referenced_generators+0x84>
		;

	tmp = (CONF_DFLL_WAITLOCK << OSCCTRL_DFLLCTRLB_WAITLOCK_Pos) | (CONF_DFLL_BPLCKC << OSCCTRL_DFLLCTRLB_BPLCKC_Pos)
    4eb8:	2319      	movs	r3, #25
    4eba:	72fb      	strb	r3, [r7, #11]
	      | (CONF_DFLL_QLDIS << OSCCTRL_DFLLCTRLB_QLDIS_Pos) | (CONF_DFLL_CCDIS << OSCCTRL_DFLLCTRLB_CCDIS_Pos)
	      | (CONF_DFLL_USBCRM << OSCCTRL_DFLLCTRLB_USBCRM_Pos) | (CONF_DFLL_LLAW << OSCCTRL_DFLLCTRLB_LLAW_Pos)
	      | (CONF_DFLL_STABLE << OSCCTRL_DFLLCTRLB_STABLE_Pos) | (CONF_DFLL_MODE << OSCCTRL_DFLLCTRLB_MODE_Pos) | 0;
	hri_oscctrl_write_DFLLCTRLB_reg(hw, tmp);
    4ebc:	7afb      	ldrb	r3, [r7, #11]
    4ebe:	4619      	mov	r1, r3
    4ec0:	68f8      	ldr	r0, [r7, #12]
    4ec2:	4b4e      	ldr	r3, [pc, #312]	; (4ffc <_oscctrl_init_referenced_generators+0x1d4>)
    4ec4:	4798      	blx	r3
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    4ec6:	bf00      	nop
    4ec8:	68f8      	ldr	r0, [r7, #12]
    4eca:	4b4d      	ldr	r3, [pc, #308]	; (5000 <_oscctrl_init_referenced_generators+0x1d8>)
    4ecc:	4798      	blx	r3
    4ece:	4603      	mov	r3, r0
    4ed0:	2b00      	cmp	r3, #0
    4ed2:	d1f9      	bne.n	4ec8 <_oscctrl_init_referenced_generators+0xa0>
		;
#endif

#if CONF_FDPLL0_CONFIG == 1
#if CONF_FDPLL0_REFCLK == 0
	hri_gclk_write_PCHCTRL_reg(
    4ed4:	2245      	movs	r2, #69	; 0x45
    4ed6:	2101      	movs	r1, #1
    4ed8:	4841      	ldr	r0, [pc, #260]	; (4fe0 <_oscctrl_init_referenced_generators+0x1b8>)
    4eda:	4b4e      	ldr	r3, [pc, #312]	; (5014 <_oscctrl_init_referenced_generators+0x1ec>)
    4edc:	4798      	blx	r3
	    GCLK, OSCCTRL_GCLK_ID_FDPLL0, (1 << GCLK_PCHCTRL_CHEN_Pos) | GCLK_PCHCTRL_GEN(CONF_FDPLL0_GCLK));
#endif
	hri_oscctrl_write_DPLLRATIO_reg(
    4ede:	223b      	movs	r2, #59	; 0x3b
    4ee0:	2100      	movs	r1, #0
    4ee2:	68f8      	ldr	r0, [r7, #12]
    4ee4:	4b4c      	ldr	r3, [pc, #304]	; (5018 <_oscctrl_init_referenced_generators+0x1f0>)
    4ee6:	4798      	blx	r3
	    hw, 0, OSCCTRL_DPLLRATIO_LDRFRAC(CONF_FDPLL0_LDRFRAC) | OSCCTRL_DPLLRATIO_LDR(CONF_FDPLL0_LDR));
	hri_oscctrl_write_DPLLCTRLB_reg(
    4ee8:	f44f 6201 	mov.w	r2, #2064	; 0x810
    4eec:	2100      	movs	r1, #0
    4eee:	68f8      	ldr	r0, [r7, #12]
    4ef0:	4b4a      	ldr	r3, [pc, #296]	; (501c <_oscctrl_init_referenced_generators+0x1f4>)
    4ef2:	4798      	blx	r3
	    OSCCTRL_DPLLCTRLB_DIV(CONF_FDPLL0_DIV) | (CONF_FDPLL0_DCOEN << OSCCTRL_DPLLCTRLB_DCOEN_Pos)
	        | OSCCTRL_DPLLCTRLB_DCOFILTER(CONF_FDPLL0_DCOFILTER)
	        | (CONF_FDPLL0_LBYPASS << OSCCTRL_DPLLCTRLB_LBYPASS_Pos) | OSCCTRL_DPLLCTRLB_LTIME(CONF_FDPLL0_LTIME)
	        | OSCCTRL_DPLLCTRLB_REFCLK(CONF_FDPLL0_REFCLK) | (CONF_FDPLL0_WUF << OSCCTRL_DPLLCTRLB_WUF_Pos)
	        | OSCCTRL_DPLLCTRLB_FILTER(CONF_FDPLL0_FILTER));
	hri_oscctrl_write_DPLLCTRLA_reg(hw,
    4ef4:	2242      	movs	r2, #66	; 0x42
    4ef6:	2100      	movs	r1, #0
    4ef8:	68f8      	ldr	r0, [r7, #12]
    4efa:	4b49      	ldr	r3, [pc, #292]	; (5020 <_oscctrl_init_referenced_generators+0x1f8>)
    4efc:	4798      	blx	r3
#if CONF_FDPLL1_CONFIG == 1
#if CONF_FDPLL1_REFCLK == 0
	hri_gclk_write_PCHCTRL_reg(
	    GCLK, OSCCTRL_GCLK_ID_FDPLL1, (1 << GCLK_PCHCTRL_CHEN_Pos) | GCLK_PCHCTRL_GEN(CONF_FDPLL1_GCLK));
#endif
	hri_oscctrl_write_DPLLRATIO_reg(
    4efe:	4a49      	ldr	r2, [pc, #292]	; (5024 <_oscctrl_init_referenced_generators+0x1fc>)
    4f00:	2101      	movs	r1, #1
    4f02:	68f8      	ldr	r0, [r7, #12]
    4f04:	4b44      	ldr	r3, [pc, #272]	; (5018 <_oscctrl_init_referenced_generators+0x1f0>)
    4f06:	4798      	blx	r3
	    hw, 1, OSCCTRL_DPLLRATIO_LDRFRAC(CONF_FDPLL1_LDRFRAC) | OSCCTRL_DPLLRATIO_LDR(CONF_FDPLL1_LDR));
	hri_oscctrl_write_DPLLCTRLB_reg(
    4f08:	f44f 6203 	mov.w	r2, #2096	; 0x830
    4f0c:	2101      	movs	r1, #1
    4f0e:	68f8      	ldr	r0, [r7, #12]
    4f10:	4b42      	ldr	r3, [pc, #264]	; (501c <_oscctrl_init_referenced_generators+0x1f4>)
    4f12:	4798      	blx	r3
	    OSCCTRL_DPLLCTRLB_DIV(CONF_FDPLL1_DIV) | (CONF_FDPLL1_DCOEN << OSCCTRL_DPLLCTRLB_DCOEN_Pos)
	        | OSCCTRL_DPLLCTRLB_DCOFILTER(CONF_FDPLL1_DCOFILTER)
	        | (CONF_FDPLL1_LBYPASS << OSCCTRL_DPLLCTRLB_LBYPASS_Pos) | OSCCTRL_DPLLCTRLB_LTIME(CONF_FDPLL1_LTIME)
	        | OSCCTRL_DPLLCTRLB_REFCLK(CONF_FDPLL1_REFCLK) | (CONF_FDPLL1_WUF << OSCCTRL_DPLLCTRLB_WUF_Pos)
	        | OSCCTRL_DPLLCTRLB_FILTER(CONF_FDPLL1_FILTER));
	hri_oscctrl_write_DPLLCTRLA_reg(hw,
    4f14:	2202      	movs	r2, #2
    4f16:	2101      	movs	r1, #1
    4f18:	68f8      	ldr	r0, [r7, #12]
    4f1a:	4b41      	ldr	r3, [pc, #260]	; (5020 <_oscctrl_init_referenced_generators+0x1f8>)
    4f1c:	4798      	blx	r3
	                                (CONF_FDPLL1_RUNSTDBY << OSCCTRL_DPLLCTRLA_RUNSTDBY_Pos)
	                                    | (CONF_FDPLL1_ENABLE << OSCCTRL_DPLLCTRLA_ENABLE_Pos));
#endif

#if CONF_DFLL_CONFIG == 1
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(hw)) {
    4f1e:	68f8      	ldr	r0, [r7, #12]
    4f20:	4b41      	ldr	r3, [pc, #260]	; (5028 <_oscctrl_init_referenced_generators+0x200>)
    4f22:	4798      	blx	r3
    4f24:	4603      	mov	r3, r0
    4f26:	2b00      	cmp	r3, #0
    4f28:	d00c      	beq.n	4f44 <_oscctrl_init_referenced_generators+0x11c>
		hri_oscctrl_status_reg_t status_mask = OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC;
    4f2a:	f44f 6310 	mov.w	r3, #2304	; 0x900
    4f2e:	607b      	str	r3, [r7, #4]

		while (hri_oscctrl_get_STATUS_reg(hw, status_mask) != status_mask)
    4f30:	bf00      	nop
    4f32:	6879      	ldr	r1, [r7, #4]
    4f34:	68f8      	ldr	r0, [r7, #12]
    4f36:	4b3d      	ldr	r3, [pc, #244]	; (502c <_oscctrl_init_referenced_generators+0x204>)
    4f38:	4798      	blx	r3
    4f3a:	4602      	mov	r2, r0
    4f3c:	687b      	ldr	r3, [r7, #4]
    4f3e:	429a      	cmp	r2, r3
    4f40:	d1f7      	bne.n	4f32 <_oscctrl_init_referenced_generators+0x10a>
    4f42:	e009      	b.n	4f58 <_oscctrl_init_referenced_generators+0x130>
			;
	} else {
		while (!hri_oscctrl_get_STATUS_DFLLRDY_bit(hw))
    4f44:	bf00      	nop
    4f46:	68f8      	ldr	r0, [r7, #12]
    4f48:	4b39      	ldr	r3, [pc, #228]	; (5030 <_oscctrl_init_referenced_generators+0x208>)
    4f4a:	4798      	blx	r3
    4f4c:	4603      	mov	r3, r0
    4f4e:	f083 0301 	eor.w	r3, r3, #1
    4f52:	b2db      	uxtb	r3, r3
    4f54:	2b00      	cmp	r3, #0
    4f56:	d1f6      	bne.n	4f46 <_oscctrl_init_referenced_generators+0x11e>
#endif
#endif

#if CONF_FDPLL0_CONFIG == 1
#if CONF_FDPLL0_ENABLE == 1
	while (!(hri_oscctrl_get_DPLLSTATUS_LOCK_bit(hw, 0) || hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(hw, 0)))
    4f58:	bf00      	nop
    4f5a:	2100      	movs	r1, #0
    4f5c:	68f8      	ldr	r0, [r7, #12]
    4f5e:	4b35      	ldr	r3, [pc, #212]	; (5034 <_oscctrl_init_referenced_generators+0x20c>)
    4f60:	4798      	blx	r3
    4f62:	4603      	mov	r3, r0
    4f64:	f083 0301 	eor.w	r3, r3, #1
    4f68:	b2db      	uxtb	r3, r3
    4f6a:	2b00      	cmp	r3, #0
    4f6c:	d009      	beq.n	4f82 <_oscctrl_init_referenced_generators+0x15a>
    4f6e:	2100      	movs	r1, #0
    4f70:	68f8      	ldr	r0, [r7, #12]
    4f72:	4b31      	ldr	r3, [pc, #196]	; (5038 <_oscctrl_init_referenced_generators+0x210>)
    4f74:	4798      	blx	r3
    4f76:	4603      	mov	r3, r0
    4f78:	f083 0301 	eor.w	r3, r3, #1
    4f7c:	b2db      	uxtb	r3, r3
    4f7e:	2b00      	cmp	r3, #0
    4f80:	d1eb      	bne.n	4f5a <_oscctrl_init_referenced_generators+0x132>
#endif
#endif

#if CONF_FDPLL1_CONFIG == 1
#if CONF_FDPLL1_ENABLE == 1
	while (!(hri_oscctrl_get_DPLLSTATUS_LOCK_bit(hw, 1) || hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(hw, 1)))
    4f82:	bf00      	nop
    4f84:	2101      	movs	r1, #1
    4f86:	68f8      	ldr	r0, [r7, #12]
    4f88:	4b2a      	ldr	r3, [pc, #168]	; (5034 <_oscctrl_init_referenced_generators+0x20c>)
    4f8a:	4798      	blx	r3
    4f8c:	4603      	mov	r3, r0
    4f8e:	f083 0301 	eor.w	r3, r3, #1
    4f92:	b2db      	uxtb	r3, r3
    4f94:	2b00      	cmp	r3, #0
    4f96:	d009      	beq.n	4fac <_oscctrl_init_referenced_generators+0x184>
    4f98:	2101      	movs	r1, #1
    4f9a:	68f8      	ldr	r0, [r7, #12]
    4f9c:	4b26      	ldr	r3, [pc, #152]	; (5038 <_oscctrl_init_referenced_generators+0x210>)
    4f9e:	4798      	blx	r3
    4fa0:	4603      	mov	r3, r0
    4fa2:	f083 0301 	eor.w	r3, r3, #1
    4fa6:	b2db      	uxtb	r3, r3
    4fa8:	2b00      	cmp	r3, #0
    4faa:	d1eb      	bne.n	4f84 <_oscctrl_init_referenced_generators+0x15c>
	hri_oscctrl_set_DPLLCTRLA_ONDEMAND_bit(hw, 1);
#endif
#endif

#if CONF_DFLL_CONFIG == 1
	while (hri_gclk_read_SYNCBUSY_reg(GCLK))
    4fac:	bf00      	nop
    4fae:	480c      	ldr	r0, [pc, #48]	; (4fe0 <_oscctrl_init_referenced_generators+0x1b8>)
    4fb0:	4b22      	ldr	r3, [pc, #136]	; (503c <_oscctrl_init_referenced_generators+0x214>)
    4fb2:	4798      	blx	r3
    4fb4:	4603      	mov	r3, r0
    4fb6:	2b00      	cmp	r3, #0
    4fb8:	d1f9      	bne.n	4fae <_oscctrl_init_referenced_generators+0x186>
		;
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, CONF_GCLK_GEN_0_SOURCE);
    4fba:	2207      	movs	r2, #7
    4fbc:	2100      	movs	r1, #0
    4fbe:	4808      	ldr	r0, [pc, #32]	; (4fe0 <_oscctrl_init_referenced_generators+0x1b8>)
    4fc0:	4b08      	ldr	r3, [pc, #32]	; (4fe4 <_oscctrl_init_referenced_generators+0x1bc>)
    4fc2:	4798      	blx	r3
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
    4fc4:	bf00      	nop
    4fc6:	4806      	ldr	r0, [pc, #24]	; (4fe0 <_oscctrl_init_referenced_generators+0x1b8>)
    4fc8:	4b07      	ldr	r3, [pc, #28]	; (4fe8 <_oscctrl_init_referenced_generators+0x1c0>)
    4fca:	4798      	blx	r3
    4fcc:	4603      	mov	r3, r0
    4fce:	2b00      	cmp	r3, #0
    4fd0:	d1f9      	bne.n	4fc6 <_oscctrl_init_referenced_generators+0x19e>
		;
#endif
	(void)hw;
}
    4fd2:	bf00      	nop
    4fd4:	3710      	adds	r7, #16
    4fd6:	46bd      	mov	sp, r7
    4fd8:	bd80      	pop	{r7, pc}
    4fda:	bf00      	nop
    4fdc:	40001000 	.word	0x40001000
    4fe0:	40001c00 	.word	0x40001c00
    4fe4:	000049f5 	.word	0x000049f5
    4fe8:	000049b5 	.word	0x000049b5
    4fec:	00004c59 	.word	0x00004c59
    4ff0:	0401bb80 	.word	0x0401bb80
    4ff4:	00004cfb 	.word	0x00004cfb
    4ff8:	00004db3 	.word	0x00004db3
    4ffc:	00004ca7 	.word	0x00004ca7
    5000:	00004d4b 	.word	0x00004d4b
    5004:	00004d17 	.word	0x00004d17
    5008:	00004ce3 	.word	0x00004ce3
    500c:	00004cc7 	.word	0x00004cc7
    5010:	00004d7f 	.word	0x00004d7f
    5014:	00004a45 	.word	0x00004a45
    5018:	00004b51 	.word	0x00004b51
    501c:	00004b8d 	.word	0x00004b8d
    5020:	00004b15 	.word	0x00004b15
    5024:	000407a0 	.word	0x000407a0
    5028:	00004c77 	.word	0x00004c77
    502c:	00004c0b 	.word	0x00004c0b
    5030:	00004be3 	.word	0x00004be3
    5034:	00004aa1 	.word	0x00004aa1
    5038:	00004ad9 	.word	0x00004ad9
    503c:	000049dd 	.word	0x000049dd

00005040 <hri_qspi_get_INTFLAG_INSTREND_bit>:
{
	((Qspi *)hw)->INTFLAG.reg = QSPI_INTFLAG_CSRISE;
}

static inline bool hri_qspi_get_INTFLAG_INSTREND_bit(const void *const hw)
{
    5040:	b480      	push	{r7}
    5042:	b083      	sub	sp, #12
    5044:	af00      	add	r7, sp, #0
    5046:	6078      	str	r0, [r7, #4]
	return (((Qspi *)hw)->INTFLAG.reg & QSPI_INTFLAG_INSTREND) >> QSPI_INTFLAG_INSTREND_Pos;
    5048:	687b      	ldr	r3, [r7, #4]
    504a:	69db      	ldr	r3, [r3, #28]
    504c:	0a9b      	lsrs	r3, r3, #10
    504e:	f003 0301 	and.w	r3, r3, #1
    5052:	2b00      	cmp	r3, #0
    5054:	bf14      	ite	ne
    5056:	2301      	movne	r3, #1
    5058:	2300      	moveq	r3, #0
    505a:	b2db      	uxtb	r3, r3
}
    505c:	4618      	mov	r0, r3
    505e:	370c      	adds	r7, #12
    5060:	46bd      	mov	sp, r7
    5062:	f85d 7b04 	ldr.w	r7, [sp], #4
    5066:	4770      	bx	lr

00005068 <hri_qspi_clear_INTFLAG_INSTREND_bit>:

static inline void hri_qspi_clear_INTFLAG_INSTREND_bit(const void *const hw)
{
    5068:	b480      	push	{r7}
    506a:	b083      	sub	sp, #12
    506c:	af00      	add	r7, sp, #0
    506e:	6078      	str	r0, [r7, #4]
	((Qspi *)hw)->INTFLAG.reg = QSPI_INTFLAG_INSTREND;
    5070:	687b      	ldr	r3, [r7, #4]
    5072:	f44f 6280 	mov.w	r2, #1024	; 0x400
    5076:	61da      	str	r2, [r3, #28]
}
    5078:	bf00      	nop
    507a:	370c      	adds	r7, #12
    507c:	46bd      	mov	sp, r7
    507e:	f85d 7b04 	ldr.w	r7, [sp], #4
    5082:	4770      	bx	lr

00005084 <hri_qspi_write_CTRLA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_CTRLA_reg(const void *const hw, hri_qspi_ctrla_reg_t data)
{
    5084:	b480      	push	{r7}
    5086:	b083      	sub	sp, #12
    5088:	af00      	add	r7, sp, #0
    508a:	6078      	str	r0, [r7, #4]
    508c:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->CTRLA.reg = data;
    508e:	687b      	ldr	r3, [r7, #4]
    5090:	683a      	ldr	r2, [r7, #0]
    5092:	601a      	str	r2, [r3, #0]
	QSPI_CRITICAL_SECTION_LEAVE();
}
    5094:	bf00      	nop
    5096:	370c      	adds	r7, #12
    5098:	46bd      	mov	sp, r7
    509a:	f85d 7b04 	ldr.w	r7, [sp], #4
    509e:	4770      	bx	lr

000050a0 <hri_qspi_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_CTRLB_reg(const void *const hw, hri_qspi_ctrlb_reg_t data)
{
    50a0:	b480      	push	{r7}
    50a2:	b083      	sub	sp, #12
    50a4:	af00      	add	r7, sp, #0
    50a6:	6078      	str	r0, [r7, #4]
    50a8:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->CTRLB.reg = data;
    50aa:	687b      	ldr	r3, [r7, #4]
    50ac:	683a      	ldr	r2, [r7, #0]
    50ae:	605a      	str	r2, [r3, #4]
	QSPI_CRITICAL_SECTION_LEAVE();
}
    50b0:	bf00      	nop
    50b2:	370c      	adds	r7, #12
    50b4:	46bd      	mov	sp, r7
    50b6:	f85d 7b04 	ldr.w	r7, [sp], #4
    50ba:	4770      	bx	lr

000050bc <hri_qspi_write_BAUD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_BAUD_reg(const void *const hw, hri_qspi_baud_reg_t data)
{
    50bc:	b480      	push	{r7}
    50be:	b083      	sub	sp, #12
    50c0:	af00      	add	r7, sp, #0
    50c2:	6078      	str	r0, [r7, #4]
    50c4:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->BAUD.reg = data;
    50c6:	687b      	ldr	r3, [r7, #4]
    50c8:	683a      	ldr	r2, [r7, #0]
    50ca:	609a      	str	r2, [r3, #8]
	QSPI_CRITICAL_SECTION_LEAVE();
}
    50cc:	bf00      	nop
    50ce:	370c      	adds	r7, #12
    50d0:	46bd      	mov	sp, r7
    50d2:	f85d 7b04 	ldr.w	r7, [sp], #4
    50d6:	4770      	bx	lr

000050d8 <hri_qspi_write_INSTRADDR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_INSTRADDR_reg(const void *const hw, hri_qspi_instraddr_reg_t data)
{
    50d8:	b480      	push	{r7}
    50da:	b083      	sub	sp, #12
    50dc:	af00      	add	r7, sp, #0
    50de:	6078      	str	r0, [r7, #4]
    50e0:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->INSTRADDR.reg = data;
    50e2:	687b      	ldr	r3, [r7, #4]
    50e4:	683a      	ldr	r2, [r7, #0]
    50e6:	631a      	str	r2, [r3, #48]	; 0x30
	QSPI_CRITICAL_SECTION_LEAVE();
}
    50e8:	bf00      	nop
    50ea:	370c      	adds	r7, #12
    50ec:	46bd      	mov	sp, r7
    50ee:	f85d 7b04 	ldr.w	r7, [sp], #4
    50f2:	4770      	bx	lr

000050f4 <hri_qspi_write_INSTRCTRL_INSTR_bf>:
	tmp = (tmp & QSPI_INSTRCTRL_INSTR(mask)) >> QSPI_INSTRCTRL_INSTR_Pos;
	return tmp;
}

static inline void hri_qspi_write_INSTRCTRL_INSTR_bf(const void *const hw, hri_qspi_instrctrl_reg_t data)
{
    50f4:	b480      	push	{r7}
    50f6:	b085      	sub	sp, #20
    50f8:	af00      	add	r7, sp, #0
    50fa:	6078      	str	r0, [r7, #4]
    50fc:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	QSPI_CRITICAL_SECTION_ENTER();
	tmp = ((Qspi *)hw)->INSTRCTRL.reg;
    50fe:	687b      	ldr	r3, [r7, #4]
    5100:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    5102:	60fb      	str	r3, [r7, #12]
	tmp &= ~QSPI_INSTRCTRL_INSTR_Msk;
    5104:	68fb      	ldr	r3, [r7, #12]
    5106:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    510a:	60fb      	str	r3, [r7, #12]
	tmp |= QSPI_INSTRCTRL_INSTR(data);
    510c:	683b      	ldr	r3, [r7, #0]
    510e:	b2db      	uxtb	r3, r3
    5110:	68fa      	ldr	r2, [r7, #12]
    5112:	4313      	orrs	r3, r2
    5114:	60fb      	str	r3, [r7, #12]
	((Qspi *)hw)->INSTRCTRL.reg = tmp;
    5116:	687b      	ldr	r3, [r7, #4]
    5118:	68fa      	ldr	r2, [r7, #12]
    511a:	635a      	str	r2, [r3, #52]	; 0x34
	QSPI_CRITICAL_SECTION_LEAVE();
}
    511c:	bf00      	nop
    511e:	3714      	adds	r7, #20
    5120:	46bd      	mov	sp, r7
    5122:	f85d 7b04 	ldr.w	r7, [sp], #4
    5126:	4770      	bx	lr

00005128 <hri_qspi_write_INSTRCTRL_OPTCODE_bf>:
	tmp = (tmp & QSPI_INSTRCTRL_OPTCODE(mask)) >> QSPI_INSTRCTRL_OPTCODE_Pos;
	return tmp;
}

static inline void hri_qspi_write_INSTRCTRL_OPTCODE_bf(const void *const hw, hri_qspi_instrctrl_reg_t data)
{
    5128:	b480      	push	{r7}
    512a:	b085      	sub	sp, #20
    512c:	af00      	add	r7, sp, #0
    512e:	6078      	str	r0, [r7, #4]
    5130:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	QSPI_CRITICAL_SECTION_ENTER();
	tmp = ((Qspi *)hw)->INSTRCTRL.reg;
    5132:	687b      	ldr	r3, [r7, #4]
    5134:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    5136:	60fb      	str	r3, [r7, #12]
	tmp &= ~QSPI_INSTRCTRL_OPTCODE_Msk;
    5138:	68fb      	ldr	r3, [r7, #12]
    513a:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
    513e:	60fb      	str	r3, [r7, #12]
	tmp |= QSPI_INSTRCTRL_OPTCODE(data);
    5140:	683b      	ldr	r3, [r7, #0]
    5142:	041b      	lsls	r3, r3, #16
    5144:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
    5148:	68fa      	ldr	r2, [r7, #12]
    514a:	4313      	orrs	r3, r2
    514c:	60fb      	str	r3, [r7, #12]
	((Qspi *)hw)->INSTRCTRL.reg = tmp;
    514e:	687b      	ldr	r3, [r7, #4]
    5150:	68fa      	ldr	r2, [r7, #12]
    5152:	635a      	str	r2, [r3, #52]	; 0x34
	QSPI_CRITICAL_SECTION_LEAVE();
}
    5154:	bf00      	nop
    5156:	3714      	adds	r7, #20
    5158:	46bd      	mov	sp, r7
    515a:	f85d 7b04 	ldr.w	r7, [sp], #4
    515e:	4770      	bx	lr

00005160 <hri_qspi_write_INSTRFRAME_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_INSTRFRAME_reg(const void *const hw, hri_qspi_instrframe_reg_t data)
{
    5160:	b480      	push	{r7}
    5162:	b083      	sub	sp, #12
    5164:	af00      	add	r7, sp, #0
    5166:	6078      	str	r0, [r7, #4]
    5168:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->INSTRFRAME.reg = data;
    516a:	687b      	ldr	r3, [r7, #4]
    516c:	683a      	ldr	r2, [r7, #0]
    516e:	639a      	str	r2, [r3, #56]	; 0x38
	QSPI_CRITICAL_SECTION_LEAVE();
}
    5170:	bf00      	nop
    5172:	370c      	adds	r7, #12
    5174:	46bd      	mov	sp, r7
    5176:	f85d 7b04 	ldr.w	r7, [sp], #4
    517a:	4770      	bx	lr

0000517c <hri_qspi_read_INSTRFRAME_reg>:
	((Qspi *)hw)->INSTRFRAME.reg ^= mask;
	QSPI_CRITICAL_SECTION_LEAVE();
}

static inline hri_qspi_instrframe_reg_t hri_qspi_read_INSTRFRAME_reg(const void *const hw)
{
    517c:	b480      	push	{r7}
    517e:	b083      	sub	sp, #12
    5180:	af00      	add	r7, sp, #0
    5182:	6078      	str	r0, [r7, #4]
	return ((Qspi *)hw)->INSTRFRAME.reg;
    5184:	687b      	ldr	r3, [r7, #4]
    5186:	6b9b      	ldr	r3, [r3, #56]	; 0x38
}
    5188:	4618      	mov	r0, r3
    518a:	370c      	adds	r7, #12
    518c:	46bd      	mov	sp, r7
    518e:	f85d 7b04 	ldr.w	r7, [sp], #4
    5192:	4770      	bx	lr

00005194 <_qspi_memcpy>:
 * \param dst  Pointer to destination buffer.
 * \param src  Pointer to source buffer.
 * \param count  Bytes to be copied.
 */
static void _qspi_memcpy(uint8_t *dst, uint8_t *src, uint32_t count)
{
    5194:	b480      	push	{r7}
    5196:	b085      	sub	sp, #20
    5198:	af00      	add	r7, sp, #0
    519a:	60f8      	str	r0, [r7, #12]
    519c:	60b9      	str	r1, [r7, #8]
    519e:	607a      	str	r2, [r7, #4]
	while (count--) {
    51a0:	e007      	b.n	51b2 <_qspi_memcpy+0x1e>
		*dst++ = *src++;
    51a2:	68fb      	ldr	r3, [r7, #12]
    51a4:	1c5a      	adds	r2, r3, #1
    51a6:	60fa      	str	r2, [r7, #12]
    51a8:	68ba      	ldr	r2, [r7, #8]
    51aa:	1c51      	adds	r1, r2, #1
    51ac:	60b9      	str	r1, [r7, #8]
    51ae:	7812      	ldrb	r2, [r2, #0]
    51b0:	701a      	strb	r2, [r3, #0]
	while (count--) {
    51b2:	687b      	ldr	r3, [r7, #4]
    51b4:	1e5a      	subs	r2, r3, #1
    51b6:	607a      	str	r2, [r7, #4]
    51b8:	2b00      	cmp	r3, #0
    51ba:	d1f2      	bne.n	51a2 <_qspi_memcpy+0xe>
	}
}
    51bc:	bf00      	nop
    51be:	3714      	adds	r7, #20
    51c0:	46bd      	mov	sp, r7
    51c2:	f85d 7b04 	ldr.w	r7, [sp], #4
    51c6:	4770      	bx	lr

000051c8 <_qspi_end_transfer>:
 * \brief Ends ongoing transfer by releasing CS of QSPI peripheral.
 *
 * \param qspi  Pointer to an Qspi instance.
 */
static inline void _qspi_end_transfer(void *hw)
{
    51c8:	b580      	push	{r7, lr}
    51ca:	b082      	sub	sp, #8
    51cc:	af00      	add	r7, sp, #0
    51ce:	6078      	str	r0, [r7, #4]
	hri_qspi_write_CTRLA_reg(hw, QSPI_CTRLA_ENABLE | QSPI_CTRLA_LASTXFER);
    51d0:	4903      	ldr	r1, [pc, #12]	; (51e0 <_qspi_end_transfer+0x18>)
    51d2:	6878      	ldr	r0, [r7, #4]
    51d4:	4b03      	ldr	r3, [pc, #12]	; (51e4 <_qspi_end_transfer+0x1c>)
    51d6:	4798      	blx	r3
}
    51d8:	bf00      	nop
    51da:	3708      	adds	r7, #8
    51dc:	46bd      	mov	sp, r7
    51de:	bd80      	pop	{r7, pc}
    51e0:	01000002 	.word	0x01000002
    51e4:	00005085 	.word	0x00005085

000051e8 <_qspi_sync_init>:

int32_t _qspi_sync_init(struct _qspi_sync_dev *dev, void *const hw)
{
    51e8:	b580      	push	{r7, lr}
    51ea:	b082      	sub	sp, #8
    51ec:	af00      	add	r7, sp, #0
    51ee:	6078      	str	r0, [r7, #4]
    51f0:	6039      	str	r1, [r7, #0]
	ASSERT(dev && hw);
    51f2:	687b      	ldr	r3, [r7, #4]
    51f4:	2b00      	cmp	r3, #0
    51f6:	d004      	beq.n	5202 <_qspi_sync_init+0x1a>
    51f8:	683b      	ldr	r3, [r7, #0]
    51fa:	2b00      	cmp	r3, #0
    51fc:	d001      	beq.n	5202 <_qspi_sync_init+0x1a>
    51fe:	2301      	movs	r3, #1
    5200:	e000      	b.n	5204 <_qspi_sync_init+0x1c>
    5202:	2300      	movs	r3, #0
    5204:	f003 0301 	and.w	r3, r3, #1
    5208:	b2db      	uxtb	r3, r3
    520a:	2240      	movs	r2, #64	; 0x40
    520c:	490c      	ldr	r1, [pc, #48]	; (5240 <_qspi_sync_init+0x58>)
    520e:	4618      	mov	r0, r3
    5210:	4b0c      	ldr	r3, [pc, #48]	; (5244 <_qspi_sync_init+0x5c>)
    5212:	4798      	blx	r3
	dev->prvt = hw;
    5214:	687b      	ldr	r3, [r7, #4]
    5216:	683a      	ldr	r2, [r7, #0]
    5218:	601a      	str	r2, [r3, #0]
	hri_qspi_write_CTRLA_reg(dev->prvt, QSPI_CTRLA_SWRST);
    521a:	687b      	ldr	r3, [r7, #4]
    521c:	681b      	ldr	r3, [r3, #0]
    521e:	2101      	movs	r1, #1
    5220:	4618      	mov	r0, r3
    5222:	4b09      	ldr	r3, [pc, #36]	; (5248 <_qspi_sync_init+0x60>)
    5224:	4798      	blx	r3

	hri_qspi_write_CTRLB_reg(hw,
    5226:	4909      	ldr	r1, [pc, #36]	; (524c <_qspi_sync_init+0x64>)
    5228:	6838      	ldr	r0, [r7, #0]
    522a:	4b09      	ldr	r3, [pc, #36]	; (5250 <_qspi_sync_init+0x68>)
    522c:	4798      	blx	r3
	                         QSPI_CTRLB_MODE_MEMORY | QSPI_CTRLB_CSMODE_LASTXFER | QSPI_CTRLB_DATALEN(0)
	                             | QSPI_CTRLB_DLYBCT(0) | QSPI_CTRLB_DLYCS(CONF_QSPI_DLYCS));

	hri_qspi_write_BAUD_reg(hw,
    522e:	4909      	ldr	r1, [pc, #36]	; (5254 <_qspi_sync_init+0x6c>)
    5230:	6838      	ldr	r0, [r7, #0]
    5232:	4b09      	ldr	r3, [pc, #36]	; (5258 <_qspi_sync_init+0x70>)
    5234:	4798      	blx	r3
	                        CONF_QSPI_CPOL << QSPI_BAUD_CPOL_Pos | CONF_QSPI_CPHA << QSPI_BAUD_CPHA_Pos
	                            | QSPI_BAUD_BAUD(CONF_QSPI_BAUD_RATE) | QSPI_BAUD_DLYBS(CONF_QSPI_DLYBS));
	return ERR_NONE;
    5236:	2300      	movs	r3, #0
}
    5238:	4618      	mov	r0, r3
    523a:	3708      	adds	r7, #8
    523c:	46bd      	mov	sp, r7
    523e:	bd80      	pop	{r7, pc}
    5240:	0000cdfc 	.word	0x0000cdfc
    5244:	00003481 	.word	0x00003481
    5248:	00005085 	.word	0x00005085
    524c:	06000011 	.word	0x06000011
    5250:	000050a1 	.word	0x000050a1
    5254:	00241300 	.word	0x00241300
    5258:	000050bd 	.word	0x000050bd

0000525c <_qspi_sync_enable>:
	hri_qspi_write_CTRLA_reg(dev->prvt, QSPI_CTRLA_SWRST);
	return ERR_NONE;
}

int32_t _qspi_sync_enable(struct _qspi_sync_dev *dev)
{
    525c:	b580      	push	{r7, lr}
    525e:	b082      	sub	sp, #8
    5260:	af00      	add	r7, sp, #0
    5262:	6078      	str	r0, [r7, #4]
	hri_qspi_write_CTRLA_reg(dev->prvt, QSPI_CTRLA_ENABLE);
    5264:	687b      	ldr	r3, [r7, #4]
    5266:	681b      	ldr	r3, [r3, #0]
    5268:	2102      	movs	r1, #2
    526a:	4618      	mov	r0, r3
    526c:	4b03      	ldr	r3, [pc, #12]	; (527c <_qspi_sync_enable+0x20>)
    526e:	4798      	blx	r3
	return ERR_NONE;
    5270:	2300      	movs	r3, #0
}
    5272:	4618      	mov	r0, r3
    5274:	3708      	adds	r7, #8
    5276:	46bd      	mov	sp, r7
    5278:	bd80      	pop	{r7, pc}
    527a:	bf00      	nop
    527c:	00005085 	.word	0x00005085

00005280 <_qspi_sync_disable>:

int32_t _qspi_sync_disable(struct _qspi_sync_dev *dev)
{
    5280:	b580      	push	{r7, lr}
    5282:	b082      	sub	sp, #8
    5284:	af00      	add	r7, sp, #0
    5286:	6078      	str	r0, [r7, #4]
	hri_qspi_write_CTRLA_reg(dev->prvt, 0);
    5288:	687b      	ldr	r3, [r7, #4]
    528a:	681b      	ldr	r3, [r3, #0]
    528c:	2100      	movs	r1, #0
    528e:	4618      	mov	r0, r3
    5290:	4b03      	ldr	r3, [pc, #12]	; (52a0 <_qspi_sync_disable+0x20>)
    5292:	4798      	blx	r3
	return ERR_NONE;
    5294:	2300      	movs	r3, #0
}
    5296:	4618      	mov	r0, r3
    5298:	3708      	adds	r7, #8
    529a:	46bd      	mov	sp, r7
    529c:	bd80      	pop	{r7, pc}
    529e:	bf00      	nop
    52a0:	00005085 	.word	0x00005085

000052a4 <_qspi_sync_command_set_ifr>:

/**
 * \brief Set instruction frame param.
 */
static void _qspi_sync_command_set_ifr(struct _qspi_sync_dev *dev, const struct _qspi_command *cmd)
{
    52a4:	b580      	push	{r7, lr}
    52a6:	b084      	sub	sp, #16
    52a8:	af00      	add	r7, sp, #0
    52aa:	6078      	str	r0, [r7, #4]
    52ac:	6039      	str	r1, [r7, #0]
	void *hw = dev->prvt;
    52ae:	687b      	ldr	r3, [r7, #4]
    52b0:	681b      	ldr	r3, [r3, #0]
    52b2:	60fb      	str	r3, [r7, #12]
	if (cmd->inst_frame.bits.addr_en) {
    52b4:	683b      	ldr	r3, [r7, #0]
    52b6:	781b      	ldrb	r3, [r3, #0]
    52b8:	f003 0320 	and.w	r3, r3, #32
    52bc:	b2db      	uxtb	r3, r3
    52be:	2b00      	cmp	r3, #0
    52c0:	d005      	beq.n	52ce <_qspi_sync_command_set_ifr+0x2a>
		hri_qspi_write_INSTRADDR_reg(hw, cmd->address);
    52c2:	683b      	ldr	r3, [r7, #0]
    52c4:	689b      	ldr	r3, [r3, #8]
    52c6:	4619      	mov	r1, r3
    52c8:	68f8      	ldr	r0, [r7, #12]
    52ca:	4b13      	ldr	r3, [pc, #76]	; (5318 <_qspi_sync_command_set_ifr+0x74>)
    52cc:	4798      	blx	r3
	}

	if (cmd->inst_frame.bits.inst_en) {
    52ce:	683b      	ldr	r3, [r7, #0]
    52d0:	781b      	ldrb	r3, [r3, #0]
    52d2:	f003 0310 	and.w	r3, r3, #16
    52d6:	b2db      	uxtb	r3, r3
    52d8:	2b00      	cmp	r3, #0
    52da:	d005      	beq.n	52e8 <_qspi_sync_command_set_ifr+0x44>
		hri_qspi_write_INSTRCTRL_INSTR_bf(hw, cmd->instruction);
    52dc:	683b      	ldr	r3, [r7, #0]
    52de:	791b      	ldrb	r3, [r3, #4]
    52e0:	4619      	mov	r1, r3
    52e2:	68f8      	ldr	r0, [r7, #12]
    52e4:	4b0d      	ldr	r3, [pc, #52]	; (531c <_qspi_sync_command_set_ifr+0x78>)
    52e6:	4798      	blx	r3
	}

	if (cmd->inst_frame.bits.opt_en) {
    52e8:	683b      	ldr	r3, [r7, #0]
    52ea:	781b      	ldrb	r3, [r3, #0]
    52ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
    52f0:	b2db      	uxtb	r3, r3
    52f2:	2b00      	cmp	r3, #0
    52f4:	d005      	beq.n	5302 <_qspi_sync_command_set_ifr+0x5e>
		hri_qspi_write_INSTRCTRL_OPTCODE_bf(hw, cmd->option);
    52f6:	683b      	ldr	r3, [r7, #0]
    52f8:	795b      	ldrb	r3, [r3, #5]
    52fa:	4619      	mov	r1, r3
    52fc:	68f8      	ldr	r0, [r7, #12]
    52fe:	4b08      	ldr	r3, [pc, #32]	; (5320 <_qspi_sync_command_set_ifr+0x7c>)
    5300:	4798      	blx	r3
	}

	hri_qspi_write_INSTRFRAME_reg(hw, cmd->inst_frame.word);
    5302:	683b      	ldr	r3, [r7, #0]
    5304:	681b      	ldr	r3, [r3, #0]
    5306:	4619      	mov	r1, r3
    5308:	68f8      	ldr	r0, [r7, #12]
    530a:	4b06      	ldr	r3, [pc, #24]	; (5324 <_qspi_sync_command_set_ifr+0x80>)
    530c:	4798      	blx	r3
}
    530e:	bf00      	nop
    5310:	3710      	adds	r7, #16
    5312:	46bd      	mov	sp, r7
    5314:	bd80      	pop	{r7, pc}
    5316:	bf00      	nop
    5318:	000050d9 	.word	0x000050d9
    531c:	000050f5 	.word	0x000050f5
    5320:	00005129 	.word	0x00005129
    5324:	00005161 	.word	0x00005161

00005328 <_qspi_sync_run_transfer>:

/**
 * \brief Access QSPI mapping memory via AHB.
 */
static void _qspi_sync_run_transfer(struct _qspi_sync_dev *dev, const struct _qspi_command *cmd)
{
    5328:	b580      	push	{r7, lr}
    532a:	b084      	sub	sp, #16
    532c:	af00      	add	r7, sp, #0
    532e:	6078      	str	r0, [r7, #4]
    5330:	6039      	str	r1, [r7, #0]
	void *   hw       = dev->prvt;
    5332:	687b      	ldr	r3, [r7, #4]
    5334:	681b      	ldr	r3, [r3, #0]
    5336:	60bb      	str	r3, [r7, #8]
	uint8_t *qspi_mem = (uint8_t *)QSPI_AHB;
    5338:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    533c:	60fb      	str	r3, [r7, #12]
	if (cmd->inst_frame.bits.addr_en)
    533e:	683b      	ldr	r3, [r7, #0]
    5340:	781b      	ldrb	r3, [r3, #0]
    5342:	f003 0320 	and.w	r3, r3, #32
    5346:	b2db      	uxtb	r3, r3
    5348:	2b00      	cmp	r3, #0
    534a:	d004      	beq.n	5356 <_qspi_sync_run_transfer+0x2e>
		qspi_mem += cmd->address;
    534c:	683b      	ldr	r3, [r7, #0]
    534e:	689b      	ldr	r3, [r3, #8]
    5350:	68fa      	ldr	r2, [r7, #12]
    5352:	4413      	add	r3, r2
    5354:	60fb      	str	r3, [r7, #12]

	/* To synchronize system bus accesses */
	hri_qspi_read_INSTRFRAME_reg(hw);
    5356:	68b8      	ldr	r0, [r7, #8]
    5358:	4b18      	ldr	r3, [pc, #96]	; (53bc <_qspi_sync_run_transfer+0x94>)
    535a:	4798      	blx	r3

	ASSERT(cmd->tx_buf || cmd->rx_buf);
    535c:	683b      	ldr	r3, [r7, #0]
    535e:	691b      	ldr	r3, [r3, #16]
    5360:	2b00      	cmp	r3, #0
    5362:	d103      	bne.n	536c <_qspi_sync_run_transfer+0x44>
    5364:	683b      	ldr	r3, [r7, #0]
    5366:	695b      	ldr	r3, [r3, #20]
    5368:	2b00      	cmp	r3, #0
    536a:	d001      	beq.n	5370 <_qspi_sync_run_transfer+0x48>
    536c:	2301      	movs	r3, #1
    536e:	e000      	b.n	5372 <_qspi_sync_run_transfer+0x4a>
    5370:	2300      	movs	r3, #0
    5372:	f003 0301 	and.w	r3, r3, #1
    5376:	b2db      	uxtb	r3, r3
    5378:	2282      	movs	r2, #130	; 0x82
    537a:	4911      	ldr	r1, [pc, #68]	; (53c0 <_qspi_sync_run_transfer+0x98>)
    537c:	4618      	mov	r0, r3
    537e:	4b11      	ldr	r3, [pc, #68]	; (53c4 <_qspi_sync_run_transfer+0x9c>)
    5380:	4798      	blx	r3

	if (cmd->tx_buf) {
    5382:	683b      	ldr	r3, [r7, #0]
    5384:	691b      	ldr	r3, [r3, #16]
    5386:	2b00      	cmp	r3, #0
    5388:	d008      	beq.n	539c <_qspi_sync_run_transfer+0x74>
		_qspi_memcpy((uint8_t *)qspi_mem, (uint8_t *)cmd->tx_buf, cmd->buf_len);
    538a:	683b      	ldr	r3, [r7, #0]
    538c:	6919      	ldr	r1, [r3, #16]
    538e:	683b      	ldr	r3, [r7, #0]
    5390:	68db      	ldr	r3, [r3, #12]
    5392:	461a      	mov	r2, r3
    5394:	68f8      	ldr	r0, [r7, #12]
    5396:	4b0c      	ldr	r3, [pc, #48]	; (53c8 <_qspi_sync_run_transfer+0xa0>)
    5398:	4798      	blx	r3
    539a:	e007      	b.n	53ac <_qspi_sync_run_transfer+0x84>
	} else {
		_qspi_memcpy((uint8_t *)cmd->rx_buf, (uint8_t *)qspi_mem, cmd->buf_len);
    539c:	683b      	ldr	r3, [r7, #0]
    539e:	6958      	ldr	r0, [r3, #20]
    53a0:	683b      	ldr	r3, [r7, #0]
    53a2:	68db      	ldr	r3, [r3, #12]
    53a4:	461a      	mov	r2, r3
    53a6:	68f9      	ldr	r1, [r7, #12]
    53a8:	4b07      	ldr	r3, [pc, #28]	; (53c8 <_qspi_sync_run_transfer+0xa0>)
    53aa:	4798      	blx	r3
  __ASM volatile ("dsb 0xF":::"memory");
    53ac:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    53b0:	f3bf 8f6f 	isb	sy
	}

	__DSB();
	__ISB();
}
    53b4:	bf00      	nop
    53b6:	3710      	adds	r7, #16
    53b8:	46bd      	mov	sp, r7
    53ba:	bd80      	pop	{r7, pc}
    53bc:	0000517d 	.word	0x0000517d
    53c0:	0000cdfc 	.word	0x0000cdfc
    53c4:	00003481 	.word	0x00003481
    53c8:	00005195 	.word	0x00005195

000053cc <_qspi_sync_serial_run_command>:

int32_t _qspi_sync_serial_run_command(struct _qspi_sync_dev *dev, const struct _qspi_command *cmd)
{
    53cc:	b580      	push	{r7, lr}
    53ce:	b082      	sub	sp, #8
    53d0:	af00      	add	r7, sp, #0
    53d2:	6078      	str	r0, [r7, #4]
    53d4:	6039      	str	r1, [r7, #0]
	_qspi_sync_command_set_ifr(dev, cmd);
    53d6:	6839      	ldr	r1, [r7, #0]
    53d8:	6878      	ldr	r0, [r7, #4]
    53da:	4b14      	ldr	r3, [pc, #80]	; (542c <_qspi_sync_serial_run_command+0x60>)
    53dc:	4798      	blx	r3

	if (cmd->inst_frame.bits.data_en) {
    53de:	683b      	ldr	r3, [r7, #0]
    53e0:	781b      	ldrb	r3, [r3, #0]
    53e2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    53e6:	b2db      	uxtb	r3, r3
    53e8:	2b00      	cmp	r3, #0
    53ea:	d003      	beq.n	53f4 <_qspi_sync_serial_run_command+0x28>
		_qspi_sync_run_transfer(dev, cmd);
    53ec:	6839      	ldr	r1, [r7, #0]
    53ee:	6878      	ldr	r0, [r7, #4]
    53f0:	4b0f      	ldr	r3, [pc, #60]	; (5430 <_qspi_sync_serial_run_command+0x64>)
    53f2:	4798      	blx	r3
	}

	_qspi_end_transfer(dev->prvt);
    53f4:	687b      	ldr	r3, [r7, #4]
    53f6:	681b      	ldr	r3, [r3, #0]
    53f8:	4618      	mov	r0, r3
    53fa:	4b0e      	ldr	r3, [pc, #56]	; (5434 <_qspi_sync_serial_run_command+0x68>)
    53fc:	4798      	blx	r3

	while (!hri_qspi_get_INTFLAG_INSTREND_bit(dev->prvt))
    53fe:	bf00      	nop
    5400:	687b      	ldr	r3, [r7, #4]
    5402:	681b      	ldr	r3, [r3, #0]
    5404:	4618      	mov	r0, r3
    5406:	4b0c      	ldr	r3, [pc, #48]	; (5438 <_qspi_sync_serial_run_command+0x6c>)
    5408:	4798      	blx	r3
    540a:	4603      	mov	r3, r0
    540c:	f083 0301 	eor.w	r3, r3, #1
    5410:	b2db      	uxtb	r3, r3
    5412:	2b00      	cmp	r3, #0
    5414:	d1f4      	bne.n	5400 <_qspi_sync_serial_run_command+0x34>
		;
	hri_qspi_clear_INTFLAG_INSTREND_bit(dev->prvt);
    5416:	687b      	ldr	r3, [r7, #4]
    5418:	681b      	ldr	r3, [r3, #0]
    541a:	4618      	mov	r0, r3
    541c:	4b07      	ldr	r3, [pc, #28]	; (543c <_qspi_sync_serial_run_command+0x70>)
    541e:	4798      	blx	r3
	return ERR_NONE;
    5420:	2300      	movs	r3, #0
}
    5422:	4618      	mov	r0, r3
    5424:	3708      	adds	r7, #8
    5426:	46bd      	mov	sp, r7
    5428:	bd80      	pop	{r7, pc}
    542a:	bf00      	nop
    542c:	000052a5 	.word	0x000052a5
    5430:	00005329 	.word	0x00005329
    5434:	000051c9 	.word	0x000051c9
    5438:	00005041 	.word	0x00005041
    543c:	00005069 	.word	0x00005069

00005440 <hri_rtcmode0_wait_for_sync>:
typedef uint8_t  hri_rtc_freqcorr_reg_t;
typedef uint8_t  hri_rtcalarm_mask_reg_t;
typedef uint8_t  hri_rtcmode2_mask_reg_t;

static inline void hri_rtcmode0_wait_for_sync(const void *const hw, hri_rtcmode0_syncbusy_reg_t reg)
{
    5440:	b480      	push	{r7}
    5442:	b083      	sub	sp, #12
    5444:	af00      	add	r7, sp, #0
    5446:	6078      	str	r0, [r7, #4]
    5448:	6039      	str	r1, [r7, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    544a:	bf00      	nop
    544c:	687b      	ldr	r3, [r7, #4]
    544e:	691a      	ldr	r2, [r3, #16]
    5450:	683b      	ldr	r3, [r7, #0]
    5452:	4013      	ands	r3, r2
    5454:	2b00      	cmp	r3, #0
    5456:	d1f9      	bne.n	544c <hri_rtcmode0_wait_for_sync+0xc>
	};
}
    5458:	bf00      	nop
    545a:	370c      	adds	r7, #12
    545c:	46bd      	mov	sp, r7
    545e:	f85d 7b04 	ldr.w	r7, [sp], #4
    5462:	4770      	bx	lr

00005464 <hri_rtcmode0_clear_interrupt_CMP0_bit>:
{
	return (((Rtc *)hw)->MODE0.INTFLAG.reg & RTC_MODE0_INTFLAG_CMP0) >> RTC_MODE0_INTFLAG_CMP0_Pos;
}

static inline void hri_rtcmode0_clear_interrupt_CMP0_bit(const void *const hw)
{
    5464:	b480      	push	{r7}
    5466:	b083      	sub	sp, #12
    5468:	af00      	add	r7, sp, #0
    546a:	6078      	str	r0, [r7, #4]
	((Rtc *)hw)->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_CMP0;
    546c:	687b      	ldr	r3, [r7, #4]
    546e:	f44f 7280 	mov.w	r2, #256	; 0x100
    5472:	819a      	strh	r2, [r3, #12]
}
    5474:	bf00      	nop
    5476:	370c      	adds	r7, #12
    5478:	46bd      	mov	sp, r7
    547a:	f85d 7b04 	ldr.w	r7, [sp], #4
    547e:	4770      	bx	lr

00005480 <hri_rtcmode0_clear_interrupt_TAMPER_bit>:
{
	return (((Rtc *)hw)->MODE0.INTFLAG.reg & RTC_MODE0_INTFLAG_TAMPER) >> RTC_MODE0_INTFLAG_TAMPER_Pos;
}

static inline void hri_rtcmode0_clear_interrupt_TAMPER_bit(const void *const hw)
{
    5480:	b480      	push	{r7}
    5482:	b083      	sub	sp, #12
    5484:	af00      	add	r7, sp, #0
    5486:	6078      	str	r0, [r7, #4]
	((Rtc *)hw)->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_TAMPER;
    5488:	687b      	ldr	r3, [r7, #4]
    548a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    548e:	819a      	strh	r2, [r3, #12]
}
    5490:	bf00      	nop
    5492:	370c      	adds	r7, #12
    5494:	46bd      	mov	sp, r7
    5496:	f85d 7b04 	ldr.w	r7, [sp], #4
    549a:	4770      	bx	lr

0000549c <hri_rtcmode0_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_rtcmode0_intflag_reg_t hri_rtcmode0_read_INTFLAG_reg(const void *const hw)
{
    549c:	b480      	push	{r7}
    549e:	b083      	sub	sp, #12
    54a0:	af00      	add	r7, sp, #0
    54a2:	6078      	str	r0, [r7, #4]
	return ((Rtc *)hw)->MODE0.INTFLAG.reg;
    54a4:	687b      	ldr	r3, [r7, #4]
    54a6:	899b      	ldrh	r3, [r3, #12]
    54a8:	b29b      	uxth	r3, r3
}
    54aa:	4618      	mov	r0, r3
    54ac:	370c      	adds	r7, #12
    54ae:	46bd      	mov	sp, r7
    54b0:	f85d 7b04 	ldr.w	r7, [sp], #4
    54b4:	4770      	bx	lr

000054b6 <hri_rtcmode0_read_INTEN_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_rtcmode0_intenset_reg_t hri_rtcmode0_read_INTEN_reg(const void *const hw)
{
    54b6:	b480      	push	{r7}
    54b8:	b083      	sub	sp, #12
    54ba:	af00      	add	r7, sp, #0
    54bc:	6078      	str	r0, [r7, #4]
	return ((Rtc *)hw)->MODE0.INTENSET.reg;
    54be:	687b      	ldr	r3, [r7, #4]
    54c0:	895b      	ldrh	r3, [r3, #10]
    54c2:	b29b      	uxth	r3, r3
}
    54c4:	4618      	mov	r0, r3
    54c6:	370c      	adds	r7, #12
    54c8:	46bd      	mov	sp, r7
    54ca:	f85d 7b04 	ldr.w	r7, [sp], #4
    54ce:	4770      	bx	lr

000054d0 <hri_rtcmode0_set_CTRLA_SWRST_bit>:
	hri_rtcmode2_wait_for_sync(hw, RTC_MODE2_SYNCBUSY_MASK_);
	return ((Rtc *)hw)->MODE2.TIMESTAMP.reg;
}

static inline void hri_rtcmode0_set_CTRLA_SWRST_bit(const void *const hw)
{
    54d0:	b580      	push	{r7, lr}
    54d2:	b082      	sub	sp, #8
    54d4:	af00      	add	r7, sp, #0
    54d6:	6078      	str	r0, [r7, #4]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg |= RTC_MODE0_CTRLA_SWRST;
    54d8:	687b      	ldr	r3, [r7, #4]
    54da:	881b      	ldrh	r3, [r3, #0]
    54dc:	b29b      	uxth	r3, r3
    54de:	f043 0301 	orr.w	r3, r3, #1
    54e2:	b29a      	uxth	r2, r3
    54e4:	687b      	ldr	r3, [r7, #4]
    54e6:	801a      	strh	r2, [r3, #0]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST);
    54e8:	2101      	movs	r1, #1
    54ea:	6878      	ldr	r0, [r7, #4]
    54ec:	4b02      	ldr	r3, [pc, #8]	; (54f8 <hri_rtcmode0_set_CTRLA_SWRST_bit+0x28>)
    54ee:	4798      	blx	r3
	RTC_CRITICAL_SECTION_LEAVE();
}
    54f0:	bf00      	nop
    54f2:	3708      	adds	r7, #8
    54f4:	46bd      	mov	sp, r7
    54f6:	bd80      	pop	{r7, pc}
    54f8:	00005441 	.word	0x00005441

000054fc <hri_rtcmode0_get_CTRLA_ENABLE_bit>:
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
	RTC_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_rtcmode0_get_CTRLA_ENABLE_bit(const void *const hw)
{
    54fc:	b580      	push	{r7, lr}
    54fe:	b084      	sub	sp, #16
    5500:	af00      	add	r7, sp, #0
    5502:	6078      	str	r0, [r7, #4]
	uint16_t tmp;
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
    5504:	f248 0103 	movw	r1, #32771	; 0x8003
    5508:	6878      	ldr	r0, [r7, #4]
    550a:	4b0a      	ldr	r3, [pc, #40]	; (5534 <hri_rtcmode0_get_CTRLA_ENABLE_bit+0x38>)
    550c:	4798      	blx	r3
	tmp = ((Rtc *)hw)->MODE0.CTRLA.reg;
    550e:	687b      	ldr	r3, [r7, #4]
    5510:	881b      	ldrh	r3, [r3, #0]
    5512:	81fb      	strh	r3, [r7, #14]
	tmp = (tmp & RTC_MODE0_CTRLA_ENABLE) >> RTC_MODE0_CTRLA_ENABLE_Pos;
    5514:	89fb      	ldrh	r3, [r7, #14]
    5516:	085b      	lsrs	r3, r3, #1
    5518:	b29b      	uxth	r3, r3
    551a:	f003 0301 	and.w	r3, r3, #1
    551e:	81fb      	strh	r3, [r7, #14]
	return (bool)tmp;
    5520:	89fb      	ldrh	r3, [r7, #14]
    5522:	2b00      	cmp	r3, #0
    5524:	bf14      	ite	ne
    5526:	2301      	movne	r3, #1
    5528:	2300      	moveq	r3, #0
    552a:	b2db      	uxtb	r3, r3
}
    552c:	4618      	mov	r0, r3
    552e:	3710      	adds	r7, #16
    5530:	46bd      	mov	sp, r7
    5532:	bd80      	pop	{r7, pc}
    5534:	00005441 	.word	0x00005441

00005538 <hri_rtcmode0_clear_CTRLA_ENABLE_bit>:
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
	RTC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_rtcmode0_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    5538:	b580      	push	{r7, lr}
    553a:	b082      	sub	sp, #8
    553c:	af00      	add	r7, sp, #0
    553e:	6078      	str	r0, [r7, #4]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg &= ~RTC_MODE0_CTRLA_ENABLE;
    5540:	687b      	ldr	r3, [r7, #4]
    5542:	881b      	ldrh	r3, [r3, #0]
    5544:	b29b      	uxth	r3, r3
    5546:	f023 0302 	bic.w	r3, r3, #2
    554a:	b29a      	uxth	r2, r3
    554c:	687b      	ldr	r3, [r7, #4]
    554e:	801a      	strh	r2, [r3, #0]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
    5550:	f248 0103 	movw	r1, #32771	; 0x8003
    5554:	6878      	ldr	r0, [r7, #4]
    5556:	4b03      	ldr	r3, [pc, #12]	; (5564 <hri_rtcmode0_clear_CTRLA_ENABLE_bit+0x2c>)
    5558:	4798      	blx	r3
	RTC_CRITICAL_SECTION_LEAVE();
}
    555a:	bf00      	nop
    555c:	3708      	adds	r7, #8
    555e:	46bd      	mov	sp, r7
    5560:	bd80      	pop	{r7, pc}
    5562:	bf00      	nop
    5564:	00005441 	.word	0x00005441

00005568 <hri_rtcmode0_write_CTRLA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_rtcmode0_write_CTRLA_reg(const void *const hw, hri_rtcmode0_ctrla_reg_t data)
{
    5568:	b580      	push	{r7, lr}
    556a:	b082      	sub	sp, #8
    556c:	af00      	add	r7, sp, #0
    556e:	6078      	str	r0, [r7, #4]
    5570:	460b      	mov	r3, r1
    5572:	807b      	strh	r3, [r7, #2]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg = data;
    5574:	687b      	ldr	r3, [r7, #4]
    5576:	887a      	ldrh	r2, [r7, #2]
    5578:	801a      	strh	r2, [r3, #0]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
    557a:	f248 0103 	movw	r1, #32771	; 0x8003
    557e:	6878      	ldr	r0, [r7, #4]
    5580:	4b02      	ldr	r3, [pc, #8]	; (558c <hri_rtcmode0_write_CTRLA_reg+0x24>)
    5582:	4798      	blx	r3
	RTC_CRITICAL_SECTION_LEAVE();
}
    5584:	bf00      	nop
    5586:	3708      	adds	r7, #8
    5588:	46bd      	mov	sp, r7
    558a:	bd80      	pop	{r7, pc}
    558c:	00005441 	.word	0x00005441

00005590 <hri_rtc_write_TAMPCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_rtc_write_TAMPCTRL_reg(const void *const hw, hri_rtc_tampctrl_reg_t data)
{
    5590:	b480      	push	{r7}
    5592:	b083      	sub	sp, #12
    5594:	af00      	add	r7, sp, #0
    5596:	6078      	str	r0, [r7, #4]
    5598:	6039      	str	r1, [r7, #0]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.TAMPCTRL.reg = data;
    559a:	687b      	ldr	r3, [r7, #4]
    559c:	683a      	ldr	r2, [r7, #0]
    559e:	661a      	str	r2, [r3, #96]	; 0x60
	RTC_CRITICAL_SECTION_LEAVE();
}
    55a0:	bf00      	nop
    55a2:	370c      	adds	r7, #12
    55a4:	46bd      	mov	sp, r7
    55a6:	f85d 7b04 	ldr.w	r7, [sp], #4
    55aa:	4770      	bx	lr

000055ac <_calendar_init>:

/**
 * \brief Initializes the RTC module with given configurations.
 */
int32_t _calendar_init(struct calendar_dev *const dev)
{
    55ac:	b580      	push	{r7, lr}
    55ae:	b082      	sub	sp, #8
    55b0:	af00      	add	r7, sp, #0
    55b2:	6078      	str	r0, [r7, #4]
	ASSERT(dev && dev->hw);
    55b4:	687b      	ldr	r3, [r7, #4]
    55b6:	2b00      	cmp	r3, #0
    55b8:	d005      	beq.n	55c6 <_calendar_init+0x1a>
    55ba:	687b      	ldr	r3, [r7, #4]
    55bc:	681b      	ldr	r3, [r3, #0]
    55be:	2b00      	cmp	r3, #0
    55c0:	d001      	beq.n	55c6 <_calendar_init+0x1a>
    55c2:	2301      	movs	r3, #1
    55c4:	e000      	b.n	55c8 <_calendar_init+0x1c>
    55c6:	2300      	movs	r3, #0
    55c8:	f003 0301 	and.w	r3, r3, #1
    55cc:	b2db      	uxtb	r3, r3
    55ce:	222f      	movs	r2, #47	; 0x2f
    55d0:	491e      	ldr	r1, [pc, #120]	; (564c <_calendar_init+0xa0>)
    55d2:	4618      	mov	r0, r3
    55d4:	4b1e      	ldr	r3, [pc, #120]	; (5650 <_calendar_init+0xa4>)
    55d6:	4798      	blx	r3

	_rtc_dev = dev;
    55d8:	4a1e      	ldr	r2, [pc, #120]	; (5654 <_calendar_init+0xa8>)
    55da:	687b      	ldr	r3, [r7, #4]
    55dc:	6013      	str	r3, [r2, #0]

	hri_rtcmode0_wait_for_sync(dev->hw, RTC_MODE0_SYNCBUSY_SWRST);
    55de:	687b      	ldr	r3, [r7, #4]
    55e0:	681b      	ldr	r3, [r3, #0]
    55e2:	2101      	movs	r1, #1
    55e4:	4618      	mov	r0, r3
    55e6:	4b1c      	ldr	r3, [pc, #112]	; (5658 <_calendar_init+0xac>)
    55e8:	4798      	blx	r3
	if (hri_rtcmode0_get_CTRLA_ENABLE_bit(dev->hw)) {
    55ea:	687b      	ldr	r3, [r7, #4]
    55ec:	681b      	ldr	r3, [r3, #0]
    55ee:	4618      	mov	r0, r3
    55f0:	4b1a      	ldr	r3, [pc, #104]	; (565c <_calendar_init+0xb0>)
    55f2:	4798      	blx	r3
    55f4:	4603      	mov	r3, r0
    55f6:	2b00      	cmp	r3, #0
    55f8:	d00a      	beq.n	5610 <_calendar_init+0x64>
#if !CONF_RTC_INIT_RESET
		return ERR_DENIED;
#else
		hri_rtcmode0_clear_CTRLA_ENABLE_bit(dev->hw);
    55fa:	687b      	ldr	r3, [r7, #4]
    55fc:	681b      	ldr	r3, [r3, #0]
    55fe:	4618      	mov	r0, r3
    5600:	4b17      	ldr	r3, [pc, #92]	; (5660 <_calendar_init+0xb4>)
    5602:	4798      	blx	r3
		hri_rtcmode0_wait_for_sync(dev->hw, RTC_MODE0_SYNCBUSY_ENABLE);
    5604:	687b      	ldr	r3, [r7, #4]
    5606:	681b      	ldr	r3, [r3, #0]
    5608:	2102      	movs	r1, #2
    560a:	4618      	mov	r0, r3
    560c:	4b12      	ldr	r3, [pc, #72]	; (5658 <_calendar_init+0xac>)
    560e:	4798      	blx	r3
#endif
	}
	hri_rtcmode0_set_CTRLA_SWRST_bit(dev->hw);
    5610:	687b      	ldr	r3, [r7, #4]
    5612:	681b      	ldr	r3, [r3, #0]
    5614:	4618      	mov	r0, r3
    5616:	4b13      	ldr	r3, [pc, #76]	; (5664 <_calendar_init+0xb8>)
    5618:	4798      	blx	r3
	hri_rtcmode0_wait_for_sync(dev->hw, RTC_MODE0_SYNCBUSY_SWRST);
    561a:	687b      	ldr	r3, [r7, #4]
    561c:	681b      	ldr	r3, [r3, #0]
    561e:	2101      	movs	r1, #1
    5620:	4618      	mov	r0, r3
    5622:	4b0d      	ldr	r3, [pc, #52]	; (5658 <_calendar_init+0xac>)
    5624:	4798      	blx	r3
	        | (CONF_RTC_COMPE0 << RTC_MODE0_EVCTRL_CMPEO_Pos) | (CONF_RTC_COMPE1 << RTC_MODE0_EVCTRL_CMPEO1_Pos)
	        | (CONF_RTC_TAMPEREO << RTC_MODE0_EVCTRL_TAMPEREO_Pos)
	        | (CONF_RTC_TAMPEVEI << RTC_MODE0_EVCTRL_TAMPEVEI_Pos) | (CONF_RTC_OVFEO << RTC_MODE0_EVCTRL_OVFEO_Pos));
#endif

	hri_rtcmode0_write_CTRLA_reg(dev->hw, RTC_MODE0_CTRLA_PRESCALER(CONF_RTC_PRESCALER) | RTC_MODE0_CTRLA_COUNTSYNC);
    5626:	687b      	ldr	r3, [r7, #4]
    5628:	681b      	ldr	r3, [r3, #0]
    562a:	f44f 410b 	mov.w	r1, #35584	; 0x8b00
    562e:	4618      	mov	r0, r3
    5630:	4b0d      	ldr	r3, [pc, #52]	; (5668 <_calendar_init+0xbc>)
    5632:	4798      	blx	r3

	hri_rtc_write_TAMPCTRL_reg(
	    dev->hw,
    5634:	687b      	ldr	r3, [r7, #4]
    5636:	681b      	ldr	r3, [r3, #0]
	hri_rtc_write_TAMPCTRL_reg(
    5638:	2100      	movs	r1, #0
    563a:	4618      	mov	r0, r3
    563c:	4b0b      	ldr	r3, [pc, #44]	; (566c <_calendar_init+0xc0>)
    563e:	4798      	blx	r3
	if ((CONF_RTC_TAMPER_INACT_0 == TAMPER_MODE_ACTL) | (CONF_RTC_TAMPER_INACT_1 == TAMPER_MODE_ACTL)
	    | (CONF_RTC_TAMPER_INACT_2 == TAMPER_MODE_ACTL) | (CONF_RTC_TAMPER_INACT_3 == TAMPER_MODE_ACTL)
	    | (CONF_RTC_TAMPER_INACT_4 == TAMPER_MODE_ACTL)) {
		hri_rtcmode0_set_CTRLB_RTCOUT_bit(dev->hw);
	}
	return ERR_NONE;
    5640:	2300      	movs	r3, #0
}
    5642:	4618      	mov	r0, r3
    5644:	3708      	adds	r7, #8
    5646:	46bd      	mov	sp, r7
    5648:	bd80      	pop	{r7, pc}
    564a:	bf00      	nop
    564c:	0000ce14 	.word	0x0000ce14
    5650:	00003481 	.word	0x00003481
    5654:	20000758 	.word	0x20000758
    5658:	00005441 	.word	0x00005441
    565c:	000054fd 	.word	0x000054fd
    5660:	00005539 	.word	0x00005539
    5664:	000054d1 	.word	0x000054d1
    5668:	00005569 	.word	0x00005569
    566c:	00005591 	.word	0x00005591

00005670 <_rtc_interrupt_handler>:
 * \brief RTC interrupt handler
 *
 * \param[in] dev The pointer to calendar device struct
 */
static void _rtc_interrupt_handler(struct calendar_dev *dev)
{
    5670:	b580      	push	{r7, lr}
    5672:	b084      	sub	sp, #16
    5674:	af00      	add	r7, sp, #0
    5676:	6078      	str	r0, [r7, #4]
	/* Read and mask interrupt flag register */
	uint16_t interrupt_status  = hri_rtcmode0_read_INTFLAG_reg(dev->hw);
    5678:	687b      	ldr	r3, [r7, #4]
    567a:	681b      	ldr	r3, [r3, #0]
    567c:	4618      	mov	r0, r3
    567e:	4b19      	ldr	r3, [pc, #100]	; (56e4 <_rtc_interrupt_handler+0x74>)
    5680:	4798      	blx	r3
    5682:	4603      	mov	r3, r0
    5684:	81fb      	strh	r3, [r7, #14]
	uint16_t interrupt_enabled = hri_rtcmode0_read_INTEN_reg(dev->hw);
    5686:	687b      	ldr	r3, [r7, #4]
    5688:	681b      	ldr	r3, [r3, #0]
    568a:	4618      	mov	r0, r3
    568c:	4b16      	ldr	r3, [pc, #88]	; (56e8 <_rtc_interrupt_handler+0x78>)
    568e:	4798      	blx	r3
    5690:	4603      	mov	r3, r0
    5692:	81bb      	strh	r3, [r7, #12]

	if ((interrupt_status & interrupt_enabled) & RTC_MODE2_INTFLAG_ALARM0) {
    5694:	89fa      	ldrh	r2, [r7, #14]
    5696:	89bb      	ldrh	r3, [r7, #12]
    5698:	4013      	ands	r3, r2
    569a:	b29b      	uxth	r3, r3
    569c:	f403 7380 	and.w	r3, r3, #256	; 0x100
    56a0:	2b00      	cmp	r3, #0
    56a2:	d009      	beq.n	56b8 <_rtc_interrupt_handler+0x48>
		dev->callback(dev);
    56a4:	687b      	ldr	r3, [r7, #4]
    56a6:	685b      	ldr	r3, [r3, #4]
    56a8:	6878      	ldr	r0, [r7, #4]
    56aa:	4798      	blx	r3

		/* Clear interrupt flag */
		hri_rtcmode0_clear_interrupt_CMP0_bit(dev->hw);
    56ac:	687b      	ldr	r3, [r7, #4]
    56ae:	681b      	ldr	r3, [r3, #0]
    56b0:	4618      	mov	r0, r3
    56b2:	4b0e      	ldr	r3, [pc, #56]	; (56ec <_rtc_interrupt_handler+0x7c>)
    56b4:	4798      	blx	r3
		dev->callback_tamper(dev);

		/* Clear interrupt flag */
		hri_rtcmode0_clear_interrupt_TAMPER_bit(dev->hw);
	}
}
    56b6:	e010      	b.n	56da <_rtc_interrupt_handler+0x6a>
	} else if ((interrupt_status & interrupt_enabled) & RTC_MODE2_INTFLAG_TAMPER) {
    56b8:	89fa      	ldrh	r2, [r7, #14]
    56ba:	89bb      	ldrh	r3, [r7, #12]
    56bc:	4013      	ands	r3, r2
    56be:	b29b      	uxth	r3, r3
    56c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    56c4:	2b00      	cmp	r3, #0
    56c6:	d008      	beq.n	56da <_rtc_interrupt_handler+0x6a>
		dev->callback_tamper(dev);
    56c8:	687b      	ldr	r3, [r7, #4]
    56ca:	689b      	ldr	r3, [r3, #8]
    56cc:	6878      	ldr	r0, [r7, #4]
    56ce:	4798      	blx	r3
		hri_rtcmode0_clear_interrupt_TAMPER_bit(dev->hw);
    56d0:	687b      	ldr	r3, [r7, #4]
    56d2:	681b      	ldr	r3, [r3, #0]
    56d4:	4618      	mov	r0, r3
    56d6:	4b06      	ldr	r3, [pc, #24]	; (56f0 <_rtc_interrupt_handler+0x80>)
    56d8:	4798      	blx	r3
}
    56da:	bf00      	nop
    56dc:	3710      	adds	r7, #16
    56de:	46bd      	mov	sp, r7
    56e0:	bd80      	pop	{r7, pc}
    56e2:	bf00      	nop
    56e4:	0000549d 	.word	0x0000549d
    56e8:	000054b7 	.word	0x000054b7
    56ec:	00005465 	.word	0x00005465
    56f0:	00005481 	.word	0x00005481

000056f4 <RTC_Handler>:

/**
 * \brief Rtc interrupt handler
 */
void RTC_Handler(void)
{
    56f4:	b580      	push	{r7, lr}
    56f6:	af00      	add	r7, sp, #0
	_rtc_interrupt_handler(_rtc_dev);
    56f8:	4b03      	ldr	r3, [pc, #12]	; (5708 <RTC_Handler+0x14>)
    56fa:	681b      	ldr	r3, [r3, #0]
    56fc:	4618      	mov	r0, r3
    56fe:	4b03      	ldr	r3, [pc, #12]	; (570c <RTC_Handler+0x18>)
    5700:	4798      	blx	r3
}
    5702:	bf00      	nop
    5704:	bd80      	pop	{r7, pc}
    5706:	bf00      	nop
    5708:	20000758 	.word	0x20000758
    570c:	00005671 	.word	0x00005671

00005710 <__NVIC_EnableIRQ>:
{
    5710:	b480      	push	{r7}
    5712:	b083      	sub	sp, #12
    5714:	af00      	add	r7, sp, #0
    5716:	4603      	mov	r3, r0
    5718:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    571a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    571e:	2b00      	cmp	r3, #0
    5720:	db0b      	blt.n	573a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    5722:	4909      	ldr	r1, [pc, #36]	; (5748 <__NVIC_EnableIRQ+0x38>)
    5724:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    5728:	095b      	lsrs	r3, r3, #5
    572a:	88fa      	ldrh	r2, [r7, #6]
    572c:	f002 021f 	and.w	r2, r2, #31
    5730:	2001      	movs	r0, #1
    5732:	fa00 f202 	lsl.w	r2, r0, r2
    5736:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    573a:	bf00      	nop
    573c:	370c      	adds	r7, #12
    573e:	46bd      	mov	sp, r7
    5740:	f85d 7b04 	ldr.w	r7, [sp], #4
    5744:	4770      	bx	lr
    5746:	bf00      	nop
    5748:	e000e100 	.word	0xe000e100

0000574c <__NVIC_DisableIRQ>:
{
    574c:	b480      	push	{r7}
    574e:	b083      	sub	sp, #12
    5750:	af00      	add	r7, sp, #0
    5752:	4603      	mov	r3, r0
    5754:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    5756:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    575a:	2b00      	cmp	r3, #0
    575c:	db10      	blt.n	5780 <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    575e:	490b      	ldr	r1, [pc, #44]	; (578c <__NVIC_DisableIRQ+0x40>)
    5760:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    5764:	095b      	lsrs	r3, r3, #5
    5766:	88fa      	ldrh	r2, [r7, #6]
    5768:	f002 021f 	and.w	r2, r2, #31
    576c:	2001      	movs	r0, #1
    576e:	fa00 f202 	lsl.w	r2, r0, r2
    5772:	3320      	adds	r3, #32
    5774:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    5778:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    577c:	f3bf 8f6f 	isb	sy
}
    5780:	bf00      	nop
    5782:	370c      	adds	r7, #12
    5784:	46bd      	mov	sp, r7
    5786:	f85d 7b04 	ldr.w	r7, [sp], #4
    578a:	4770      	bx	lr
    578c:	e000e100 	.word	0xe000e100

00005790 <__NVIC_ClearPendingIRQ>:
{
    5790:	b480      	push	{r7}
    5792:	b083      	sub	sp, #12
    5794:	af00      	add	r7, sp, #0
    5796:	4603      	mov	r3, r0
    5798:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    579a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    579e:	2b00      	cmp	r3, #0
    57a0:	db0c      	blt.n	57bc <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    57a2:	4909      	ldr	r1, [pc, #36]	; (57c8 <__NVIC_ClearPendingIRQ+0x38>)
    57a4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    57a8:	095b      	lsrs	r3, r3, #5
    57aa:	88fa      	ldrh	r2, [r7, #6]
    57ac:	f002 021f 	and.w	r2, r2, #31
    57b0:	2001      	movs	r0, #1
    57b2:	fa00 f202 	lsl.w	r2, r0, r2
    57b6:	3360      	adds	r3, #96	; 0x60
    57b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    57bc:	bf00      	nop
    57be:	370c      	adds	r7, #12
    57c0:	46bd      	mov	sp, r7
    57c2:	f85d 7b04 	ldr.w	r7, [sp], #4
    57c6:	4770      	bx	lr
    57c8:	e000e100 	.word	0xe000e100

000057cc <hri_sercomi2cm_wait_for_sync>:
typedef uint8_t  hri_sercomusart_intflag_reg_t;
typedef uint8_t  hri_sercomusart_rxerrcnt_reg_t;
typedef uint8_t  hri_sercomusart_rxpl_reg_t;

static inline void hri_sercomi2cm_wait_for_sync(const void *const hw, hri_sercomi2cm_syncbusy_reg_t reg)
{
    57cc:	b480      	push	{r7}
    57ce:	b083      	sub	sp, #12
    57d0:	af00      	add	r7, sp, #0
    57d2:	6078      	str	r0, [r7, #4]
    57d4:	6039      	str	r1, [r7, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    57d6:	bf00      	nop
    57d8:	687b      	ldr	r3, [r7, #4]
    57da:	69da      	ldr	r2, [r3, #28]
    57dc:	683b      	ldr	r3, [r7, #0]
    57de:	4013      	ands	r3, r2
    57e0:	2b00      	cmp	r3, #0
    57e2:	d1f9      	bne.n	57d8 <hri_sercomi2cm_wait_for_sync+0xc>
	};
}
    57e4:	bf00      	nop
    57e6:	370c      	adds	r7, #12
    57e8:	46bd      	mov	sp, r7
    57ea:	f85d 7b04 	ldr.w	r7, [sp], #4
    57ee:	4770      	bx	lr

000057f0 <hri_sercomi2cm_is_syncing>:

static inline bool hri_sercomi2cm_is_syncing(const void *const hw, hri_sercomi2cm_syncbusy_reg_t reg)
{
    57f0:	b480      	push	{r7}
    57f2:	b083      	sub	sp, #12
    57f4:	af00      	add	r7, sp, #0
    57f6:	6078      	str	r0, [r7, #4]
    57f8:	6039      	str	r1, [r7, #0]
	return ((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg;
    57fa:	687b      	ldr	r3, [r7, #4]
    57fc:	69da      	ldr	r2, [r3, #28]
    57fe:	683b      	ldr	r3, [r7, #0]
    5800:	4013      	ands	r3, r2
    5802:	2b00      	cmp	r3, #0
    5804:	bf14      	ite	ne
    5806:	2301      	movne	r3, #1
    5808:	2300      	moveq	r3, #0
    580a:	b2db      	uxtb	r3, r3
}
    580c:	4618      	mov	r0, r3
    580e:	370c      	adds	r7, #12
    5810:	46bd      	mov	sp, r7
    5812:	f85d 7b04 	ldr.w	r7, [sp], #4
    5816:	4770      	bx	lr

00005818 <hri_sercomspi_wait_for_sync>:
{
	return ((Sercom *)hw)->I2CS.SYNCBUSY.reg & reg;
}

static inline void hri_sercomspi_wait_for_sync(const void *const hw, hri_sercomspi_syncbusy_reg_t reg)
{
    5818:	b480      	push	{r7}
    581a:	b083      	sub	sp, #12
    581c:	af00      	add	r7, sp, #0
    581e:	6078      	str	r0, [r7, #4]
    5820:	6039      	str	r1, [r7, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    5822:	bf00      	nop
    5824:	687b      	ldr	r3, [r7, #4]
    5826:	69da      	ldr	r2, [r3, #28]
    5828:	683b      	ldr	r3, [r7, #0]
    582a:	4013      	ands	r3, r2
    582c:	2b00      	cmp	r3, #0
    582e:	d1f9      	bne.n	5824 <hri_sercomspi_wait_for_sync+0xc>
	};
}
    5830:	bf00      	nop
    5832:	370c      	adds	r7, #12
    5834:	46bd      	mov	sp, r7
    5836:	f85d 7b04 	ldr.w	r7, [sp], #4
    583a:	4770      	bx	lr

0000583c <hri_sercomspi_is_syncing>:

static inline bool hri_sercomspi_is_syncing(const void *const hw, hri_sercomspi_syncbusy_reg_t reg)
{
    583c:	b480      	push	{r7}
    583e:	b083      	sub	sp, #12
    5840:	af00      	add	r7, sp, #0
    5842:	6078      	str	r0, [r7, #4]
    5844:	6039      	str	r1, [r7, #0]
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    5846:	687b      	ldr	r3, [r7, #4]
    5848:	69da      	ldr	r2, [r3, #28]
    584a:	683b      	ldr	r3, [r7, #0]
    584c:	4013      	ands	r3, r2
    584e:	2b00      	cmp	r3, #0
    5850:	bf14      	ite	ne
    5852:	2301      	movne	r3, #1
    5854:	2300      	moveq	r3, #0
    5856:	b2db      	uxtb	r3, r3
}
    5858:	4618      	mov	r0, r3
    585a:	370c      	adds	r7, #12
    585c:	46bd      	mov	sp, r7
    585e:	f85d 7b04 	ldr.w	r7, [sp], #4
    5862:	4770      	bx	lr

00005864 <hri_sercomi2cm_clear_interrupt_MB_bit>:
{
	return (((Sercom *)hw)->I2CM.INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) >> SERCOM_I2CM_INTFLAG_MB_Pos;
}

static inline void hri_sercomi2cm_clear_interrupt_MB_bit(const void *const hw)
{
    5864:	b480      	push	{r7}
    5866:	b083      	sub	sp, #12
    5868:	af00      	add	r7, sp, #0
    586a:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
    586c:	687b      	ldr	r3, [r7, #4]
    586e:	2201      	movs	r2, #1
    5870:	761a      	strb	r2, [r3, #24]
}
    5872:	bf00      	nop
    5874:	370c      	adds	r7, #12
    5876:	46bd      	mov	sp, r7
    5878:	f85d 7b04 	ldr.w	r7, [sp], #4
    587c:	4770      	bx	lr

0000587e <hri_sercomi2cm_clear_interrupt_SB_bit>:
{
	return (((Sercom *)hw)->I2CM.INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) >> SERCOM_I2CM_INTFLAG_SB_Pos;
}

static inline void hri_sercomi2cm_clear_interrupt_SB_bit(const void *const hw)
{
    587e:	b480      	push	{r7}
    5880:	b083      	sub	sp, #12
    5882:	af00      	add	r7, sp, #0
    5884:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    5886:	687b      	ldr	r3, [r7, #4]
    5888:	2202      	movs	r2, #2
    588a:	761a      	strb	r2, [r3, #24]
}
    588c:	bf00      	nop
    588e:	370c      	adds	r7, #12
    5890:	46bd      	mov	sp, r7
    5892:	f85d 7b04 	ldr.w	r7, [sp], #4
    5896:	4770      	bx	lr

00005898 <hri_sercomi2cm_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_sercomi2cm_intflag_reg_t hri_sercomi2cm_read_INTFLAG_reg(const void *const hw)
{
    5898:	b480      	push	{r7}
    589a:	b083      	sub	sp, #12
    589c:	af00      	add	r7, sp, #0
    589e:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->I2CM.INTFLAG.reg;
    58a0:	687b      	ldr	r3, [r7, #4]
    58a2:	7e1b      	ldrb	r3, [r3, #24]
    58a4:	b2db      	uxtb	r3, r3
}
    58a6:	4618      	mov	r0, r3
    58a8:	370c      	adds	r7, #12
    58aa:	46bd      	mov	sp, r7
    58ac:	f85d 7b04 	ldr.w	r7, [sp], #4
    58b0:	4770      	bx	lr

000058b2 <hri_sercomi2cm_clear_INTFLAG_reg>:

static inline void hri_sercomi2cm_clear_INTFLAG_reg(const void *const hw, hri_sercomi2cm_intflag_reg_t mask)
{
    58b2:	b480      	push	{r7}
    58b4:	b083      	sub	sp, #12
    58b6:	af00      	add	r7, sp, #0
    58b8:	6078      	str	r0, [r7, #4]
    58ba:	460b      	mov	r3, r1
    58bc:	70fb      	strb	r3, [r7, #3]
	((Sercom *)hw)->I2CM.INTFLAG.reg = mask;
    58be:	687b      	ldr	r3, [r7, #4]
    58c0:	78fa      	ldrb	r2, [r7, #3]
    58c2:	761a      	strb	r2, [r3, #24]
}
    58c4:	bf00      	nop
    58c6:	370c      	adds	r7, #12
    58c8:	46bd      	mov	sp, r7
    58ca:	f85d 7b04 	ldr.w	r7, [sp], #4
    58ce:	4770      	bx	lr

000058d0 <hri_sercomspi_get_INTFLAG_reg>:
	((Sercom *)hw)->SPI.INTFLAG.reg = SERCOM_SPI_INTFLAG_ERROR;
}

static inline hri_sercomspi_intflag_reg_t hri_sercomspi_get_INTFLAG_reg(const void *const           hw,
                                                                        hri_sercomspi_intflag_reg_t mask)
{
    58d0:	b480      	push	{r7}
    58d2:	b085      	sub	sp, #20
    58d4:	af00      	add	r7, sp, #0
    58d6:	6078      	str	r0, [r7, #4]
    58d8:	460b      	mov	r3, r1
    58da:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	tmp = ((Sercom *)hw)->SPI.INTFLAG.reg;
    58dc:	687b      	ldr	r3, [r7, #4]
    58de:	7e1b      	ldrb	r3, [r3, #24]
    58e0:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    58e2:	7bfa      	ldrb	r2, [r7, #15]
    58e4:	78fb      	ldrb	r3, [r7, #3]
    58e6:	4013      	ands	r3, r2
    58e8:	73fb      	strb	r3, [r7, #15]
	return tmp;
    58ea:	7bfb      	ldrb	r3, [r7, #15]
}
    58ec:	4618      	mov	r0, r3
    58ee:	3714      	adds	r7, #20
    58f0:	46bd      	mov	sp, r7
    58f2:	f85d 7b04 	ldr.w	r7, [sp], #4
    58f6:	4770      	bx	lr

000058f8 <hri_sercomspi_read_INTFLAG_reg>:

static inline hri_sercomspi_intflag_reg_t hri_sercomspi_read_INTFLAG_reg(const void *const hw)
{
    58f8:	b480      	push	{r7}
    58fa:	b083      	sub	sp, #12
    58fc:	af00      	add	r7, sp, #0
    58fe:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->SPI.INTFLAG.reg;
    5900:	687b      	ldr	r3, [r7, #4]
    5902:	7e1b      	ldrb	r3, [r3, #24]
    5904:	b2db      	uxtb	r3, r3
}
    5906:	4618      	mov	r0, r3
    5908:	370c      	adds	r7, #12
    590a:	46bd      	mov	sp, r7
    590c:	f85d 7b04 	ldr.w	r7, [sp], #4
    5910:	4770      	bx	lr

00005912 <hri_sercomspi_clear_INTFLAG_reg>:

static inline void hri_sercomspi_clear_INTFLAG_reg(const void *const hw, hri_sercomspi_intflag_reg_t mask)
{
    5912:	b480      	push	{r7}
    5914:	b083      	sub	sp, #12
    5916:	af00      	add	r7, sp, #0
    5918:	6078      	str	r0, [r7, #4]
    591a:	460b      	mov	r3, r1
    591c:	70fb      	strb	r3, [r7, #3]
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    591e:	687b      	ldr	r3, [r7, #4]
    5920:	78fa      	ldrb	r2, [r7, #3]
    5922:	761a      	strb	r2, [r3, #24]
}
    5924:	bf00      	nop
    5926:	370c      	adds	r7, #12
    5928:	46bd      	mov	sp, r7
    592a:	f85d 7b04 	ldr.w	r7, [sp], #4
    592e:	4770      	bx	lr

00005930 <hri_sercomspi_set_INTEN_DRE_bit>:
{
	((Sercom *)hw)->I2CS.INTENCLR.reg = mask;
}

static inline void hri_sercomspi_set_INTEN_DRE_bit(const void *const hw)
{
    5930:	b480      	push	{r7}
    5932:	b083      	sub	sp, #12
    5934:	af00      	add	r7, sp, #0
    5936:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_DRE;
    5938:	687b      	ldr	r3, [r7, #4]
    593a:	2201      	movs	r2, #1
    593c:	759a      	strb	r2, [r3, #22]
}
    593e:	bf00      	nop
    5940:	370c      	adds	r7, #12
    5942:	46bd      	mov	sp, r7
    5944:	f85d 7b04 	ldr.w	r7, [sp], #4
    5948:	4770      	bx	lr

0000594a <hri_sercomspi_clear_INTEN_DRE_bit>:
		((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_DRE;
	}
}

static inline void hri_sercomspi_clear_INTEN_DRE_bit(const void *const hw)
{
    594a:	b480      	push	{r7}
    594c:	b083      	sub	sp, #12
    594e:	af00      	add	r7, sp, #0
    5950:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->SPI.INTENCLR.reg = SERCOM_SPI_INTENSET_DRE;
    5952:	687b      	ldr	r3, [r7, #4]
    5954:	2201      	movs	r2, #1
    5956:	751a      	strb	r2, [r3, #20]
}
    5958:	bf00      	nop
    595a:	370c      	adds	r7, #12
    595c:	46bd      	mov	sp, r7
    595e:	f85d 7b04 	ldr.w	r7, [sp], #4
    5962:	4770      	bx	lr

00005964 <hri_sercomspi_set_INTEN_TXC_bit>:

static inline void hri_sercomspi_set_INTEN_TXC_bit(const void *const hw)
{
    5964:	b480      	push	{r7}
    5966:	b083      	sub	sp, #12
    5968:	af00      	add	r7, sp, #0
    596a:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_TXC;
    596c:	687b      	ldr	r3, [r7, #4]
    596e:	2202      	movs	r2, #2
    5970:	759a      	strb	r2, [r3, #22]
}
    5972:	bf00      	nop
    5974:	370c      	adds	r7, #12
    5976:	46bd      	mov	sp, r7
    5978:	f85d 7b04 	ldr.w	r7, [sp], #4
    597c:	4770      	bx	lr

0000597e <hri_sercomspi_clear_INTEN_TXC_bit>:
		((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_TXC;
	}
}

static inline void hri_sercomspi_clear_INTEN_TXC_bit(const void *const hw)
{
    597e:	b480      	push	{r7}
    5980:	b083      	sub	sp, #12
    5982:	af00      	add	r7, sp, #0
    5984:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->SPI.INTENCLR.reg = SERCOM_SPI_INTENSET_TXC;
    5986:	687b      	ldr	r3, [r7, #4]
    5988:	2202      	movs	r2, #2
    598a:	751a      	strb	r2, [r3, #20]
}
    598c:	bf00      	nop
    598e:	370c      	adds	r7, #12
    5990:	46bd      	mov	sp, r7
    5992:	f85d 7b04 	ldr.w	r7, [sp], #4
    5996:	4770      	bx	lr

00005998 <hri_sercomspi_set_INTEN_RXC_bit>:

static inline void hri_sercomspi_set_INTEN_RXC_bit(const void *const hw)
{
    5998:	b480      	push	{r7}
    599a:	b083      	sub	sp, #12
    599c:	af00      	add	r7, sp, #0
    599e:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_RXC;
    59a0:	687b      	ldr	r3, [r7, #4]
    59a2:	2204      	movs	r2, #4
    59a4:	759a      	strb	r2, [r3, #22]
}
    59a6:	bf00      	nop
    59a8:	370c      	adds	r7, #12
    59aa:	46bd      	mov	sp, r7
    59ac:	f85d 7b04 	ldr.w	r7, [sp], #4
    59b0:	4770      	bx	lr

000059b2 <hri_sercomspi_clear_INTEN_RXC_bit>:
		((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_RXC;
	}
}

static inline void hri_sercomspi_clear_INTEN_RXC_bit(const void *const hw)
{
    59b2:	b480      	push	{r7}
    59b4:	b083      	sub	sp, #12
    59b6:	af00      	add	r7, sp, #0
    59b8:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->SPI.INTENCLR.reg = SERCOM_SPI_INTENSET_RXC;
    59ba:	687b      	ldr	r3, [r7, #4]
    59bc:	2204      	movs	r2, #4
    59be:	751a      	strb	r2, [r3, #20]
}
    59c0:	bf00      	nop
    59c2:	370c      	adds	r7, #12
    59c4:	46bd      	mov	sp, r7
    59c6:	f85d 7b04 	ldr.w	r7, [sp], #4
    59ca:	4770      	bx	lr

000059cc <hri_sercomspi_read_INTEN_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_sercomspi_intenset_reg_t hri_sercomspi_read_INTEN_reg(const void *const hw)
{
    59cc:	b480      	push	{r7}
    59ce:	b083      	sub	sp, #12
    59d0:	af00      	add	r7, sp, #0
    59d2:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->SPI.INTENSET.reg;
    59d4:	687b      	ldr	r3, [r7, #4]
    59d6:	7d9b      	ldrb	r3, [r3, #22]
    59d8:	b2db      	uxtb	r3, r3
}
    59da:	4618      	mov	r0, r3
    59dc:	370c      	adds	r7, #12
    59de:	46bd      	mov	sp, r7
    59e0:	f85d 7b04 	ldr.w	r7, [sp], #4
    59e4:	4770      	bx	lr
	...

000059e8 <hri_sercomi2cm_clear_CTRLA_ENABLE_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    59e8:	b580      	push	{r7, lr}
    59ea:	b082      	sub	sp, #8
    59ec:	af00      	add	r7, sp, #0
    59ee:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLA.reg &= ~SERCOM_I2CM_CTRLA_ENABLE;
    59f0:	687b      	ldr	r3, [r7, #4]
    59f2:	681b      	ldr	r3, [r3, #0]
    59f4:	f023 0202 	bic.w	r2, r3, #2
    59f8:	687b      	ldr	r3, [r7, #4]
    59fa:	601a      	str	r2, [r3, #0]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
    59fc:	2103      	movs	r1, #3
    59fe:	6878      	ldr	r0, [r7, #4]
    5a00:	4b02      	ldr	r3, [pc, #8]	; (5a0c <hri_sercomi2cm_clear_CTRLA_ENABLE_bit+0x24>)
    5a02:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5a04:	bf00      	nop
    5a06:	3708      	adds	r7, #8
    5a08:	46bd      	mov	sp, r7
    5a0a:	bd80      	pop	{r7, pc}
    5a0c:	000057cd 	.word	0x000057cd

00005a10 <hri_sercomi2cm_get_CTRLA_SCLSM_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_MASK);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_sercomi2cm_get_CTRLA_SCLSM_bit(const void *const hw)
{
    5a10:	b480      	push	{r7}
    5a12:	b085      	sub	sp, #20
    5a14:	af00      	add	r7, sp, #0
    5a16:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    5a18:	687b      	ldr	r3, [r7, #4]
    5a1a:	681b      	ldr	r3, [r3, #0]
    5a1c:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & SERCOM_I2CM_CTRLA_SCLSM) >> SERCOM_I2CM_CTRLA_SCLSM_Pos;
    5a1e:	68fb      	ldr	r3, [r7, #12]
    5a20:	0edb      	lsrs	r3, r3, #27
    5a22:	f003 0301 	and.w	r3, r3, #1
    5a26:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    5a28:	68fb      	ldr	r3, [r7, #12]
    5a2a:	2b00      	cmp	r3, #0
    5a2c:	bf14      	ite	ne
    5a2e:	2301      	movne	r3, #1
    5a30:	2300      	moveq	r3, #0
    5a32:	b2db      	uxtb	r3, r3
}
    5a34:	4618      	mov	r0, r3
    5a36:	3714      	adds	r7, #20
    5a38:	46bd      	mov	sp, r7
    5a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
    5a3e:	4770      	bx	lr

00005a40 <hri_sercomi2cm_get_CTRLA_reg>:
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_ctrla_reg_t hri_sercomi2cm_get_CTRLA_reg(const void *const          hw,
                                                                      hri_sercomi2cm_ctrla_reg_t mask)
{
    5a40:	b580      	push	{r7, lr}
    5a42:	b084      	sub	sp, #16
    5a44:	af00      	add	r7, sp, #0
    5a46:	6078      	str	r0, [r7, #4]
    5a48:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
    5a4a:	2103      	movs	r1, #3
    5a4c:	6878      	ldr	r0, [r7, #4]
    5a4e:	4b07      	ldr	r3, [pc, #28]	; (5a6c <hri_sercomi2cm_get_CTRLA_reg+0x2c>)
    5a50:	4798      	blx	r3
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    5a52:	687b      	ldr	r3, [r7, #4]
    5a54:	681b      	ldr	r3, [r3, #0]
    5a56:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    5a58:	68fa      	ldr	r2, [r7, #12]
    5a5a:	683b      	ldr	r3, [r7, #0]
    5a5c:	4013      	ands	r3, r2
    5a5e:	60fb      	str	r3, [r7, #12]
	return tmp;
    5a60:	68fb      	ldr	r3, [r7, #12]
}
    5a62:	4618      	mov	r0, r3
    5a64:	3710      	adds	r7, #16
    5a66:	46bd      	mov	sp, r7
    5a68:	bd80      	pop	{r7, pc}
    5a6a:	bf00      	nop
    5a6c:	000057cd 	.word	0x000057cd

00005a70 <hri_sercomi2cm_write_CTRLA_reg>:

static inline void hri_sercomi2cm_write_CTRLA_reg(const void *const hw, hri_sercomi2cm_ctrla_reg_t data)
{
    5a70:	b580      	push	{r7, lr}
    5a72:	b082      	sub	sp, #8
    5a74:	af00      	add	r7, sp, #0
    5a76:	6078      	str	r0, [r7, #4]
    5a78:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLA.reg = data;
    5a7a:	687b      	ldr	r3, [r7, #4]
    5a7c:	683a      	ldr	r2, [r7, #0]
    5a7e:	601a      	str	r2, [r3, #0]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
    5a80:	2103      	movs	r1, #3
    5a82:	6878      	ldr	r0, [r7, #4]
    5a84:	4b02      	ldr	r3, [pc, #8]	; (5a90 <hri_sercomi2cm_write_CTRLA_reg+0x20>)
    5a86:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5a88:	bf00      	nop
    5a8a:	3708      	adds	r7, #8
    5a8c:	46bd      	mov	sp, r7
    5a8e:	bd80      	pop	{r7, pc}
    5a90:	000057cd 	.word	0x000057cd

00005a94 <hri_sercomspi_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & SERCOM_SPI_CTRLA_SWRST) >> SERCOM_SPI_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_sercomspi_set_CTRLA_ENABLE_bit(const void *const hw)
{
    5a94:	b580      	push	{r7, lr}
    5a96:	b082      	sub	sp, #8
    5a98:	af00      	add	r7, sp, #0
    5a9a:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    5a9c:	687b      	ldr	r3, [r7, #4]
    5a9e:	681b      	ldr	r3, [r3, #0]
    5aa0:	f043 0202 	orr.w	r2, r3, #2
    5aa4:	687b      	ldr	r3, [r7, #4]
    5aa6:	601a      	str	r2, [r3, #0]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    5aa8:	2103      	movs	r1, #3
    5aaa:	6878      	ldr	r0, [r7, #4]
    5aac:	4b02      	ldr	r3, [pc, #8]	; (5ab8 <hri_sercomspi_set_CTRLA_ENABLE_bit+0x24>)
    5aae:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5ab0:	bf00      	nop
    5ab2:	3708      	adds	r7, #8
    5ab4:	46bd      	mov	sp, r7
    5ab6:	bd80      	pop	{r7, pc}
    5ab8:	00005819 	.word	0x00005819

00005abc <hri_sercomspi_get_CTRLA_ENABLE_bit>:

static inline bool hri_sercomspi_get_CTRLA_ENABLE_bit(const void *const hw)
{
    5abc:	b580      	push	{r7, lr}
    5abe:	b084      	sub	sp, #16
    5ac0:	af00      	add	r7, sp, #0
    5ac2:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    5ac4:	2103      	movs	r1, #3
    5ac6:	6878      	ldr	r0, [r7, #4]
    5ac8:	4b09      	ldr	r3, [pc, #36]	; (5af0 <hri_sercomspi_get_CTRLA_ENABLE_bit+0x34>)
    5aca:	4798      	blx	r3
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    5acc:	687b      	ldr	r3, [r7, #4]
    5ace:	681b      	ldr	r3, [r3, #0]
    5ad0:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & SERCOM_SPI_CTRLA_ENABLE) >> SERCOM_SPI_CTRLA_ENABLE_Pos;
    5ad2:	68fb      	ldr	r3, [r7, #12]
    5ad4:	085b      	lsrs	r3, r3, #1
    5ad6:	f003 0301 	and.w	r3, r3, #1
    5ada:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    5adc:	68fb      	ldr	r3, [r7, #12]
    5ade:	2b00      	cmp	r3, #0
    5ae0:	bf14      	ite	ne
    5ae2:	2301      	movne	r3, #1
    5ae4:	2300      	moveq	r3, #0
    5ae6:	b2db      	uxtb	r3, r3
}
    5ae8:	4618      	mov	r0, r3
    5aea:	3710      	adds	r7, #16
    5aec:	46bd      	mov	sp, r7
    5aee:	bd80      	pop	{r7, pc}
    5af0:	00005819 	.word	0x00005819

00005af4 <hri_sercomspi_clear_CTRLA_ENABLE_bit>:
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomspi_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    5af4:	b580      	push	{r7, lr}
    5af6:	b082      	sub	sp, #8
    5af8:	af00      	add	r7, sp, #0
    5afa:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    5afc:	687b      	ldr	r3, [r7, #4]
    5afe:	681b      	ldr	r3, [r3, #0]
    5b00:	f023 0202 	bic.w	r2, r3, #2
    5b04:	687b      	ldr	r3, [r7, #4]
    5b06:	601a      	str	r2, [r3, #0]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    5b08:	2103      	movs	r1, #3
    5b0a:	6878      	ldr	r0, [r7, #4]
    5b0c:	4b02      	ldr	r3, [pc, #8]	; (5b18 <hri_sercomspi_clear_CTRLA_ENABLE_bit+0x24>)
    5b0e:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5b10:	bf00      	nop
    5b12:	3708      	adds	r7, #8
    5b14:	46bd      	mov	sp, r7
    5b16:	bd80      	pop	{r7, pc}
    5b18:	00005819 	.word	0x00005819

00005b1c <hri_sercomspi_get_CTRLA_reg>:
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomspi_ctrla_reg_t hri_sercomspi_get_CTRLA_reg(const void *const         hw,
                                                                    hri_sercomspi_ctrla_reg_t mask)
{
    5b1c:	b580      	push	{r7, lr}
    5b1e:	b084      	sub	sp, #16
    5b20:	af00      	add	r7, sp, #0
    5b22:	6078      	str	r0, [r7, #4]
    5b24:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    5b26:	2103      	movs	r1, #3
    5b28:	6878      	ldr	r0, [r7, #4]
    5b2a:	4b07      	ldr	r3, [pc, #28]	; (5b48 <hri_sercomspi_get_CTRLA_reg+0x2c>)
    5b2c:	4798      	blx	r3
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    5b2e:	687b      	ldr	r3, [r7, #4]
    5b30:	681b      	ldr	r3, [r3, #0]
    5b32:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    5b34:	68fa      	ldr	r2, [r7, #12]
    5b36:	683b      	ldr	r3, [r7, #0]
    5b38:	4013      	ands	r3, r2
    5b3a:	60fb      	str	r3, [r7, #12]
	return tmp;
    5b3c:	68fb      	ldr	r3, [r7, #12]
}
    5b3e:	4618      	mov	r0, r3
    5b40:	3710      	adds	r7, #16
    5b42:	46bd      	mov	sp, r7
    5b44:	bd80      	pop	{r7, pc}
    5b46:	bf00      	nop
    5b48:	00005819 	.word	0x00005819

00005b4c <hri_sercomspi_write_CTRLA_reg>:

static inline void hri_sercomspi_write_CTRLA_reg(const void *const hw, hri_sercomspi_ctrla_reg_t data)
{
    5b4c:	b580      	push	{r7, lr}
    5b4e:	b082      	sub	sp, #8
    5b50:	af00      	add	r7, sp, #0
    5b52:	6078      	str	r0, [r7, #4]
    5b54:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    5b56:	687b      	ldr	r3, [r7, #4]
    5b58:	683a      	ldr	r2, [r7, #0]
    5b5a:	601a      	str	r2, [r3, #0]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    5b5c:	2103      	movs	r1, #3
    5b5e:	6878      	ldr	r0, [r7, #4]
    5b60:	4b02      	ldr	r3, [pc, #8]	; (5b6c <hri_sercomspi_write_CTRLA_reg+0x20>)
    5b62:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5b64:	bf00      	nop
    5b66:	3708      	adds	r7, #8
    5b68:	46bd      	mov	sp, r7
    5b6a:	bd80      	pop	{r7, pc}
    5b6c:	00005819 	.word	0x00005819

00005b70 <hri_sercomi2cm_set_CTRLB_SMEN_bit>:
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
	return ((Sercom *)hw)->USART.CTRLA.reg;
}

static inline void hri_sercomi2cm_set_CTRLB_SMEN_bit(const void *const hw)
{
    5b70:	b580      	push	{r7, lr}
    5b72:	b082      	sub	sp, #8
    5b74:	af00      	add	r7, sp, #0
    5b76:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_SMEN;
    5b78:	687b      	ldr	r3, [r7, #4]
    5b7a:	685b      	ldr	r3, [r3, #4]
    5b7c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
    5b80:	687b      	ldr	r3, [r7, #4]
    5b82:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    5b84:	2104      	movs	r1, #4
    5b86:	6878      	ldr	r0, [r7, #4]
    5b88:	4b02      	ldr	r3, [pc, #8]	; (5b94 <hri_sercomi2cm_set_CTRLB_SMEN_bit+0x24>)
    5b8a:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5b8c:	bf00      	nop
    5b8e:	3708      	adds	r7, #8
    5b90:	46bd      	mov	sp, r7
    5b92:	bd80      	pop	{r7, pc}
    5b94:	000057cd 	.word	0x000057cd

00005b98 <hri_sercomi2cm_clear_CTRLB_SMEN_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_clear_CTRLB_SMEN_bit(const void *const hw)
{
    5b98:	b580      	push	{r7, lr}
    5b9a:	b082      	sub	sp, #8
    5b9c:	af00      	add	r7, sp, #0
    5b9e:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_SMEN;
    5ba0:	687b      	ldr	r3, [r7, #4]
    5ba2:	685b      	ldr	r3, [r3, #4]
    5ba4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
    5ba8:	687b      	ldr	r3, [r7, #4]
    5baa:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    5bac:	2104      	movs	r1, #4
    5bae:	6878      	ldr	r0, [r7, #4]
    5bb0:	4b02      	ldr	r3, [pc, #8]	; (5bbc <hri_sercomi2cm_clear_CTRLB_SMEN_bit+0x24>)
    5bb2:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5bb4:	bf00      	nop
    5bb6:	3708      	adds	r7, #8
    5bb8:	46bd      	mov	sp, r7
    5bba:	bd80      	pop	{r7, pc}
    5bbc:	000057cd 	.word	0x000057cd

00005bc0 <hri_sercomi2cm_set_CTRLB_ACKACT_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_set_CTRLB_ACKACT_bit(const void *const hw)
{
    5bc0:	b580      	push	{r7, lr}
    5bc2:	b082      	sub	sp, #8
    5bc4:	af00      	add	r7, sp, #0
    5bc6:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    5bc8:	687b      	ldr	r3, [r7, #4]
    5bca:	685b      	ldr	r3, [r3, #4]
    5bcc:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
    5bd0:	687b      	ldr	r3, [r7, #4]
    5bd2:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    5bd4:	2104      	movs	r1, #4
    5bd6:	6878      	ldr	r0, [r7, #4]
    5bd8:	4b02      	ldr	r3, [pc, #8]	; (5be4 <hri_sercomi2cm_set_CTRLB_ACKACT_bit+0x24>)
    5bda:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5bdc:	bf00      	nop
    5bde:	3708      	adds	r7, #8
    5be0:	46bd      	mov	sp, r7
    5be2:	bd80      	pop	{r7, pc}
    5be4:	000057cd 	.word	0x000057cd

00005be8 <hri_sercomi2cm_clear_CTRLB_ACKACT_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_clear_CTRLB_ACKACT_bit(const void *const hw)
{
    5be8:	b580      	push	{r7, lr}
    5bea:	b082      	sub	sp, #8
    5bec:	af00      	add	r7, sp, #0
    5bee:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    5bf0:	687b      	ldr	r3, [r7, #4]
    5bf2:	685b      	ldr	r3, [r3, #4]
    5bf4:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
    5bf8:	687b      	ldr	r3, [r7, #4]
    5bfa:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    5bfc:	2104      	movs	r1, #4
    5bfe:	6878      	ldr	r0, [r7, #4]
    5c00:	4b02      	ldr	r3, [pc, #8]	; (5c0c <hri_sercomi2cm_clear_CTRLB_ACKACT_bit+0x24>)
    5c02:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5c04:	bf00      	nop
    5c06:	3708      	adds	r7, #8
    5c08:	46bd      	mov	sp, r7
    5c0a:	bd80      	pop	{r7, pc}
    5c0c:	000057cd 	.word	0x000057cd

00005c10 <hri_sercomi2cm_set_CTRLB_CMD_bf>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_set_CTRLB_CMD_bf(const void *const hw, hri_sercomi2cm_ctrlb_reg_t mask)
{
    5c10:	b580      	push	{r7, lr}
    5c12:	b082      	sub	sp, #8
    5c14:	af00      	add	r7, sp, #0
    5c16:	6078      	str	r0, [r7, #4]
    5c18:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    5c1a:	687b      	ldr	r3, [r7, #4]
    5c1c:	685a      	ldr	r2, [r3, #4]
    5c1e:	683b      	ldr	r3, [r7, #0]
    5c20:	041b      	lsls	r3, r3, #16
    5c22:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
    5c26:	431a      	orrs	r2, r3
    5c28:	687b      	ldr	r3, [r7, #4]
    5c2a:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    5c2c:	2104      	movs	r1, #4
    5c2e:	6878      	ldr	r0, [r7, #4]
    5c30:	4b02      	ldr	r3, [pc, #8]	; (5c3c <hri_sercomi2cm_set_CTRLB_CMD_bf+0x2c>)
    5c32:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5c34:	bf00      	nop
    5c36:	3708      	adds	r7, #8
    5c38:	46bd      	mov	sp, r7
    5c3a:	bd80      	pop	{r7, pc}
    5c3c:	000057cd 	.word	0x000057cd

00005c40 <hri_sercomi2cm_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_CTRLB_reg(const void *const hw, hri_sercomi2cm_ctrlb_reg_t data)
{
    5c40:	b580      	push	{r7, lr}
    5c42:	b082      	sub	sp, #8
    5c44:	af00      	add	r7, sp, #0
    5c46:	6078      	str	r0, [r7, #4]
    5c48:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg = data;
    5c4a:	687b      	ldr	r3, [r7, #4]
    5c4c:	683a      	ldr	r2, [r7, #0]
    5c4e:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    5c50:	2104      	movs	r1, #4
    5c52:	6878      	ldr	r0, [r7, #4]
    5c54:	4b02      	ldr	r3, [pc, #8]	; (5c60 <hri_sercomi2cm_write_CTRLB_reg+0x20>)
    5c56:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5c58:	bf00      	nop
    5c5a:	3708      	adds	r7, #8
    5c5c:	46bd      	mov	sp, r7
    5c5e:	bd80      	pop	{r7, pc}
    5c60:	000057cd 	.word	0x000057cd

00005c64 <hri_sercomspi_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_CTRLB_reg(const void *const hw, hri_sercomspi_ctrlb_reg_t data)
{
    5c64:	b580      	push	{r7, lr}
    5c66:	b082      	sub	sp, #8
    5c68:	af00      	add	r7, sp, #0
    5c6a:	6078      	str	r0, [r7, #4]
    5c6c:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    5c6e:	687b      	ldr	r3, [r7, #4]
    5c70:	683a      	ldr	r2, [r7, #0]
    5c72:	605a      	str	r2, [r3, #4]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_MASK);
    5c74:	2117      	movs	r1, #23
    5c76:	6878      	ldr	r0, [r7, #4]
    5c78:	4b02      	ldr	r3, [pc, #8]	; (5c84 <hri_sercomspi_write_CTRLB_reg+0x20>)
    5c7a:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5c7c:	bf00      	nop
    5c7e:	3708      	adds	r7, #8
    5c80:	46bd      	mov	sp, r7
    5c82:	bd80      	pop	{r7, pc}
    5c84:	00005819 	.word	0x00005819

00005c88 <hri_sercomi2cm_write_BAUD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_BAUD_reg(const void *const hw, hri_sercomi2cm_baud_reg_t data)
{
    5c88:	b480      	push	{r7}
    5c8a:	b083      	sub	sp, #12
    5c8c:	af00      	add	r7, sp, #0
    5c8e:	6078      	str	r0, [r7, #4]
    5c90:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.BAUD.reg = data;
    5c92:	687b      	ldr	r3, [r7, #4]
    5c94:	683a      	ldr	r2, [r7, #0]
    5c96:	60da      	str	r2, [r3, #12]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5c98:	bf00      	nop
    5c9a:	370c      	adds	r7, #12
    5c9c:	46bd      	mov	sp, r7
    5c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
    5ca2:	4770      	bx	lr

00005ca4 <hri_sercomspi_write_BAUD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_BAUD_reg(const void *const hw, hri_sercomspi_baud_reg_t data)
{
    5ca4:	b480      	push	{r7}
    5ca6:	b083      	sub	sp, #12
    5ca8:	af00      	add	r7, sp, #0
    5caa:	6078      	str	r0, [r7, #4]
    5cac:	460b      	mov	r3, r1
    5cae:	70fb      	strb	r3, [r7, #3]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.BAUD.reg = data;
    5cb0:	687b      	ldr	r3, [r7, #4]
    5cb2:	78fa      	ldrb	r2, [r7, #3]
    5cb4:	731a      	strb	r2, [r3, #12]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5cb6:	bf00      	nop
    5cb8:	370c      	adds	r7, #12
    5cba:	46bd      	mov	sp, r7
    5cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
    5cc0:	4770      	bx	lr
	...

00005cc4 <hri_sercomi2cm_write_ADDR_HS_bit>:
	tmp = (tmp & SERCOM_I2CM_ADDR_HS) >> SERCOM_I2CM_ADDR_HS_Pos;
	return (bool)tmp;
}

static inline void hri_sercomi2cm_write_ADDR_HS_bit(const void *const hw, bool value)
{
    5cc4:	b580      	push	{r7, lr}
    5cc6:	b084      	sub	sp, #16
    5cc8:	af00      	add	r7, sp, #0
    5cca:	6078      	str	r0, [r7, #4]
    5ccc:	460b      	mov	r3, r1
    5cce:	70fb      	strb	r3, [r7, #3]
	uint32_t tmp;
	SERCOM_CRITICAL_SECTION_ENTER();
	tmp = ((Sercom *)hw)->I2CM.ADDR.reg;
    5cd0:	687b      	ldr	r3, [r7, #4]
    5cd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    5cd4:	60fb      	str	r3, [r7, #12]
	tmp &= ~SERCOM_I2CM_ADDR_HS;
    5cd6:	68fb      	ldr	r3, [r7, #12]
    5cd8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    5cdc:	60fb      	str	r3, [r7, #12]
	tmp |= value << SERCOM_I2CM_ADDR_HS_Pos;
    5cde:	78fb      	ldrb	r3, [r7, #3]
    5ce0:	039b      	lsls	r3, r3, #14
    5ce2:	461a      	mov	r2, r3
    5ce4:	68fb      	ldr	r3, [r7, #12]
    5ce6:	4313      	orrs	r3, r2
    5ce8:	60fb      	str	r3, [r7, #12]
	((Sercom *)hw)->I2CM.ADDR.reg = tmp;
    5cea:	687b      	ldr	r3, [r7, #4]
    5cec:	68fa      	ldr	r2, [r7, #12]
    5cee:	625a      	str	r2, [r3, #36]	; 0x24
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    5cf0:	2104      	movs	r1, #4
    5cf2:	6878      	ldr	r0, [r7, #4]
    5cf4:	4b02      	ldr	r3, [pc, #8]	; (5d00 <hri_sercomi2cm_write_ADDR_HS_bit+0x3c>)
    5cf6:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5cf8:	bf00      	nop
    5cfa:	3710      	adds	r7, #16
    5cfc:	46bd      	mov	sp, r7
    5cfe:	bd80      	pop	{r7, pc}
    5d00:	000057cd 	.word	0x000057cd

00005d04 <hri_sercomi2cm_write_ADDR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_ADDR_reg(const void *const hw, hri_sercomi2cm_addr_reg_t data)
{
    5d04:	b580      	push	{r7, lr}
    5d06:	b082      	sub	sp, #8
    5d08:	af00      	add	r7, sp, #0
    5d0a:	6078      	str	r0, [r7, #4]
    5d0c:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    5d0e:	687b      	ldr	r3, [r7, #4]
    5d10:	683a      	ldr	r2, [r7, #0]
    5d12:	625a      	str	r2, [r3, #36]	; 0x24
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    5d14:	2104      	movs	r1, #4
    5d16:	6878      	ldr	r0, [r7, #4]
    5d18:	4b02      	ldr	r3, [pc, #8]	; (5d24 <hri_sercomi2cm_write_ADDR_reg+0x20>)
    5d1a:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5d1c:	bf00      	nop
    5d1e:	3708      	adds	r7, #8
    5d20:	46bd      	mov	sp, r7
    5d22:	bd80      	pop	{r7, pc}
    5d24:	000057cd 	.word	0x000057cd

00005d28 <hri_sercomi2cm_read_ADDR_reg>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_addr_reg_t hri_sercomi2cm_read_ADDR_reg(const void *const hw)
{
    5d28:	b580      	push	{r7, lr}
    5d2a:	b082      	sub	sp, #8
    5d2c:	af00      	add	r7, sp, #0
    5d2e:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    5d30:	2104      	movs	r1, #4
    5d32:	6878      	ldr	r0, [r7, #4]
    5d34:	4b03      	ldr	r3, [pc, #12]	; (5d44 <hri_sercomi2cm_read_ADDR_reg+0x1c>)
    5d36:	4798      	blx	r3
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    5d38:	687b      	ldr	r3, [r7, #4]
    5d3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
    5d3c:	4618      	mov	r0, r3
    5d3e:	3708      	adds	r7, #8
    5d40:	46bd      	mov	sp, r7
    5d42:	bd80      	pop	{r7, pc}
    5d44:	000057cd 	.word	0x000057cd

00005d48 <hri_sercomspi_write_ADDR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_ADDR_reg(const void *const hw, hri_sercomspi_addr_reg_t data)
{
    5d48:	b480      	push	{r7}
    5d4a:	b083      	sub	sp, #12
    5d4c:	af00      	add	r7, sp, #0
    5d4e:	6078      	str	r0, [r7, #4]
    5d50:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.ADDR.reg = data;
    5d52:	687b      	ldr	r3, [r7, #4]
    5d54:	683a      	ldr	r2, [r7, #0]
    5d56:	625a      	str	r2, [r3, #36]	; 0x24
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5d58:	bf00      	nop
    5d5a:	370c      	adds	r7, #12
    5d5c:	46bd      	mov	sp, r7
    5d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
    5d62:	4770      	bx	lr

00005d64 <hri_sercomi2cm_write_DATA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_DATA_reg(const void *const hw, hri_sercomi2cm_data_reg_t data)
{
    5d64:	b580      	push	{r7, lr}
    5d66:	b082      	sub	sp, #8
    5d68:	af00      	add	r7, sp, #0
    5d6a:	6078      	str	r0, [r7, #4]
    5d6c:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.DATA.reg = data;
    5d6e:	687b      	ldr	r3, [r7, #4]
    5d70:	683a      	ldr	r2, [r7, #0]
    5d72:	629a      	str	r2, [r3, #40]	; 0x28
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    5d74:	2104      	movs	r1, #4
    5d76:	6878      	ldr	r0, [r7, #4]
    5d78:	4b02      	ldr	r3, [pc, #8]	; (5d84 <hri_sercomi2cm_write_DATA_reg+0x20>)
    5d7a:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5d7c:	bf00      	nop
    5d7e:	3708      	adds	r7, #8
    5d80:	46bd      	mov	sp, r7
    5d82:	bd80      	pop	{r7, pc}
    5d84:	000057cd 	.word	0x000057cd

00005d88 <hri_sercomi2cm_read_DATA_reg>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_data_reg_t hri_sercomi2cm_read_DATA_reg(const void *const hw)
{
    5d88:	b580      	push	{r7, lr}
    5d8a:	b082      	sub	sp, #8
    5d8c:	af00      	add	r7, sp, #0
    5d8e:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    5d90:	2104      	movs	r1, #4
    5d92:	6878      	ldr	r0, [r7, #4]
    5d94:	4b03      	ldr	r3, [pc, #12]	; (5da4 <hri_sercomi2cm_read_DATA_reg+0x1c>)
    5d96:	4798      	blx	r3
	return ((Sercom *)hw)->I2CM.DATA.reg;
    5d98:	687b      	ldr	r3, [r7, #4]
    5d9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
    5d9c:	4618      	mov	r0, r3
    5d9e:	3708      	adds	r7, #8
    5da0:	46bd      	mov	sp, r7
    5da2:	bd80      	pop	{r7, pc}
    5da4:	000057cd 	.word	0x000057cd

00005da8 <hri_sercomspi_write_DATA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_DATA_reg(const void *const hw, hri_sercomspi_data_reg_t data)
{
    5da8:	b480      	push	{r7}
    5daa:	b083      	sub	sp, #12
    5dac:	af00      	add	r7, sp, #0
    5dae:	6078      	str	r0, [r7, #4]
    5db0:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.DATA.reg = data;
    5db2:	687b      	ldr	r3, [r7, #4]
    5db4:	683a      	ldr	r2, [r7, #0]
    5db6:	629a      	str	r2, [r3, #40]	; 0x28
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5db8:	bf00      	nop
    5dba:	370c      	adds	r7, #12
    5dbc:	46bd      	mov	sp, r7
    5dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
    5dc2:	4770      	bx	lr

00005dc4 <hri_sercomspi_read_DATA_reg>:
	((Sercom *)hw)->SPI.DATA.reg ^= mask;
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomspi_data_reg_t hri_sercomspi_read_DATA_reg(const void *const hw)
{
    5dc4:	b480      	push	{r7}
    5dc6:	b083      	sub	sp, #12
    5dc8:	af00      	add	r7, sp, #0
    5dca:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->SPI.DATA.reg;
    5dcc:	687b      	ldr	r3, [r7, #4]
    5dce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
    5dd0:	4618      	mov	r0, r3
    5dd2:	370c      	adds	r7, #12
    5dd4:	46bd      	mov	sp, r7
    5dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
    5dda:	4770      	bx	lr

00005ddc <hri_sercomspi_write_DBGCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_DBGCTRL_reg(const void *const hw, hri_sercomspi_dbgctrl_reg_t data)
{
    5ddc:	b480      	push	{r7}
    5dde:	b083      	sub	sp, #12
    5de0:	af00      	add	r7, sp, #0
    5de2:	6078      	str	r0, [r7, #4]
    5de4:	460b      	mov	r3, r1
    5de6:	70fb      	strb	r3, [r7, #3]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    5de8:	687b      	ldr	r3, [r7, #4]
    5dea:	78fa      	ldrb	r2, [r7, #3]
    5dec:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5df0:	bf00      	nop
    5df2:	370c      	adds	r7, #12
    5df4:	46bd      	mov	sp, r7
    5df6:	f85d 7b04 	ldr.w	r7, [sp], #4
    5dfa:	4770      	bx	lr

00005dfc <hri_sercomspi_clear_STATUS_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_clear_STATUS_reg(const void *const hw, hri_sercomspi_status_reg_t mask)
{
    5dfc:	b480      	push	{r7}
    5dfe:	b083      	sub	sp, #12
    5e00:	af00      	add	r7, sp, #0
    5e02:	6078      	str	r0, [r7, #4]
    5e04:	460b      	mov	r3, r1
    5e06:	807b      	strh	r3, [r7, #2]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.STATUS.reg = mask;
    5e08:	687b      	ldr	r3, [r7, #4]
    5e0a:	887a      	ldrh	r2, [r7, #2]
    5e0c:	835a      	strh	r2, [r3, #26]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    5e0e:	bf00      	nop
    5e10:	370c      	adds	r7, #12
    5e12:	46bd      	mov	sp, r7
    5e14:	f85d 7b04 	ldr.w	r7, [sp], #4
    5e18:	4770      	bx	lr
	...

00005e1c <hri_sercomi2cm_read_STATUS_reg>:
{
	((Sercom *)hw)->I2CM.STATUS.reg |= mask;
}

static inline hri_sercomi2cm_status_reg_t hri_sercomi2cm_read_STATUS_reg(const void *const hw)
{
    5e1c:	b580      	push	{r7, lr}
    5e1e:	b082      	sub	sp, #8
    5e20:	af00      	add	r7, sp, #0
    5e22:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    5e24:	2104      	movs	r1, #4
    5e26:	6878      	ldr	r0, [r7, #4]
    5e28:	4b04      	ldr	r3, [pc, #16]	; (5e3c <hri_sercomi2cm_read_STATUS_reg+0x20>)
    5e2a:	4798      	blx	r3
	return ((Sercom *)hw)->I2CM.STATUS.reg;
    5e2c:	687b      	ldr	r3, [r7, #4]
    5e2e:	8b5b      	ldrh	r3, [r3, #26]
    5e30:	b29b      	uxth	r3, r3
}
    5e32:	4618      	mov	r0, r3
    5e34:	3708      	adds	r7, #8
    5e36:	46bd      	mov	sp, r7
    5e38:	bd80      	pop	{r7, pc}
    5e3a:	bf00      	nop
    5e3c:	000057cd 	.word	0x000057cd

00005e40 <_sercom_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given sercom hardware instance
 */
static uint8_t _sercom_get_hardware_index(const void *const hw)
{
    5e40:	b4b0      	push	{r4, r5, r7}
    5e42:	b08d      	sub	sp, #52	; 0x34
    5e44:	af00      	add	r7, sp, #0
    5e46:	6078      	str	r0, [r7, #4]
	Sercom *const sercom_modules[] = SERCOM_INSTS;
    5e48:	4b13      	ldr	r3, [pc, #76]	; (5e98 <_sercom_get_hardware_index+0x58>)
    5e4a:	f107 040c 	add.w	r4, r7, #12
    5e4e:	461d      	mov	r5, r3
    5e50:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    5e52:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    5e54:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    5e58:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	/* Find index for SERCOM instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    5e5c:	2300      	movs	r3, #0
    5e5e:	62fb      	str	r3, [r7, #44]	; 0x2c
    5e60:	e010      	b.n	5e84 <_sercom_get_hardware_index+0x44>
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
    5e62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    5e64:	009b      	lsls	r3, r3, #2
    5e66:	f107 0230 	add.w	r2, r7, #48	; 0x30
    5e6a:	4413      	add	r3, r2
    5e6c:	f853 3c24 	ldr.w	r3, [r3, #-36]
    5e70:	461a      	mov	r2, r3
    5e72:	687b      	ldr	r3, [r7, #4]
    5e74:	429a      	cmp	r2, r3
    5e76:	d102      	bne.n	5e7e <_sercom_get_hardware_index+0x3e>
			return i;
    5e78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    5e7a:	b2db      	uxtb	r3, r3
    5e7c:	e006      	b.n	5e8c <_sercom_get_hardware_index+0x4c>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    5e7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    5e80:	3301      	adds	r3, #1
    5e82:	62fb      	str	r3, [r7, #44]	; 0x2c
    5e84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    5e86:	2b07      	cmp	r3, #7
    5e88:	d9eb      	bls.n	5e62 <_sercom_get_hardware_index+0x22>
		}
	}
	return 0;
    5e8a:	2300      	movs	r3, #0
}
    5e8c:	4618      	mov	r0, r3
    5e8e:	3734      	adds	r7, #52	; 0x34
    5e90:	46bd      	mov	sp, r7
    5e92:	bcb0      	pop	{r4, r5, r7}
    5e94:	4770      	bx	lr
    5e96:	bf00      	nop
    5e98:	0000ce48 	.word	0x0000ce48

00005e9c <_sercom_init_irq_param>:

/**
 * \brief Init irq param with the given sercom hardware instance
 */
static void _sercom_init_irq_param(const void *const hw, void *dev)
{
    5e9c:	b480      	push	{r7}
    5e9e:	b083      	sub	sp, #12
    5ea0:	af00      	add	r7, sp, #0
    5ea2:	6078      	str	r0, [r7, #4]
    5ea4:	6039      	str	r1, [r7, #0]

	if (hw == SERCOM1) {
    5ea6:	687b      	ldr	r3, [r7, #4]
    5ea8:	4a09      	ldr	r2, [pc, #36]	; (5ed0 <_sercom_init_irq_param+0x34>)
    5eaa:	4293      	cmp	r3, r2
    5eac:	d102      	bne.n	5eb4 <_sercom_init_irq_param+0x18>
		_sercom1_dev = (struct _spi_async_dev *)dev;
    5eae:	4a09      	ldr	r2, [pc, #36]	; (5ed4 <_sercom_init_irq_param+0x38>)
    5eb0:	683b      	ldr	r3, [r7, #0]
    5eb2:	6013      	str	r3, [r2, #0]
	}

	if (hw == SERCOM5) {
    5eb4:	687b      	ldr	r3, [r7, #4]
    5eb6:	4a08      	ldr	r2, [pc, #32]	; (5ed8 <_sercom_init_irq_param+0x3c>)
    5eb8:	4293      	cmp	r3, r2
    5eba:	d102      	bne.n	5ec2 <_sercom_init_irq_param+0x26>
		_sercom5_dev = (struct _i2c_m_async_device *)dev;
    5ebc:	4a07      	ldr	r2, [pc, #28]	; (5edc <_sercom_init_irq_param+0x40>)
    5ebe:	683b      	ldr	r3, [r7, #0]
    5ec0:	6013      	str	r3, [r2, #0]
	}
}
    5ec2:	bf00      	nop
    5ec4:	370c      	adds	r7, #12
    5ec6:	46bd      	mov	sp, r7
    5ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
    5ecc:	4770      	bx	lr
    5ece:	bf00      	nop
    5ed0:	40003400 	.word	0x40003400
    5ed4:	20000774 	.word	0x20000774
    5ed8:	43000400 	.word	0x43000400
    5edc:	20000778 	.word	0x20000778

00005ee0 <_get_i2cm_index>:
 * \param[in] hw The pointer to hardware instance

 * \return The ordinal number of the given sercom hardware instance
 */
static int8_t _get_i2cm_index(const void *const hw)
{
    5ee0:	b580      	push	{r7, lr}
    5ee2:	b084      	sub	sp, #16
    5ee4:	af00      	add	r7, sp, #0
    5ee6:	6078      	str	r0, [r7, #4]
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
    5ee8:	6878      	ldr	r0, [r7, #4]
    5eea:	4b13      	ldr	r3, [pc, #76]	; (5f38 <_get_i2cm_index+0x58>)
    5eec:	4798      	blx	r3
    5eee:	4603      	mov	r3, r0
    5ef0:	73bb      	strb	r3, [r7, #14]
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_i2cms); i++) {
    5ef2:	2300      	movs	r3, #0
    5ef4:	73fb      	strb	r3, [r7, #15]
    5ef6:	e010      	b.n	5f1a <_get_i2cm_index+0x3a>
		if (_i2cms[i].number == sercom_offset) {
    5ef8:	7bfa      	ldrb	r2, [r7, #15]
    5efa:	4910      	ldr	r1, [pc, #64]	; (5f3c <_get_i2cm_index+0x5c>)
    5efc:	4613      	mov	r3, r2
    5efe:	005b      	lsls	r3, r3, #1
    5f00:	4413      	add	r3, r2
    5f02:	00db      	lsls	r3, r3, #3
    5f04:	440b      	add	r3, r1
    5f06:	781b      	ldrb	r3, [r3, #0]
    5f08:	7bba      	ldrb	r2, [r7, #14]
    5f0a:	429a      	cmp	r2, r3
    5f0c:	d102      	bne.n	5f14 <_get_i2cm_index+0x34>
			return i;
    5f0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
    5f12:	e00d      	b.n	5f30 <_get_i2cm_index+0x50>
	for (i = 0; i < ARRAY_SIZE(_i2cms); i++) {
    5f14:	7bfb      	ldrb	r3, [r7, #15]
    5f16:	3301      	adds	r3, #1
    5f18:	73fb      	strb	r3, [r7, #15]
    5f1a:	7bfb      	ldrb	r3, [r7, #15]
    5f1c:	2b00      	cmp	r3, #0
    5f1e:	d0eb      	beq.n	5ef8 <_get_i2cm_index+0x18>
		}
	}

	ASSERT(false);
    5f20:	f240 32b2 	movw	r2, #946	; 0x3b2
    5f24:	4906      	ldr	r1, [pc, #24]	; (5f40 <_get_i2cm_index+0x60>)
    5f26:	2000      	movs	r0, #0
    5f28:	4b06      	ldr	r3, [pc, #24]	; (5f44 <_get_i2cm_index+0x64>)
    5f2a:	4798      	blx	r3
	return -1;
    5f2c:	f04f 33ff 	mov.w	r3, #4294967295
}
    5f30:	4618      	mov	r0, r3
    5f32:	3710      	adds	r7, #16
    5f34:	46bd      	mov	sp, r7
    5f36:	bd80      	pop	{r7, pc}
    5f38:	00005e41 	.word	0x00005e41
    5f3c:	20000018 	.word	0x20000018
    5f40:	0000ce2c 	.word	0x0000ce2c
    5f44:	00003481 	.word	0x00003481

00005f48 <_sercom_i2c_send_stop>:

static inline void _sercom_i2c_send_stop(void *const hw)
{
    5f48:	b580      	push	{r7, lr}
    5f4a:	b082      	sub	sp, #8
    5f4c:	af00      	add	r7, sp, #0
    5f4e:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_set_CTRLB_CMD_bf(hw, CMD_STOP);
    5f50:	2103      	movs	r1, #3
    5f52:	6878      	ldr	r0, [r7, #4]
    5f54:	4b02      	ldr	r3, [pc, #8]	; (5f60 <_sercom_i2c_send_stop+0x18>)
    5f56:	4798      	blx	r3
}
    5f58:	bf00      	nop
    5f5a:	3708      	adds	r7, #8
    5f5c:	46bd      	mov	sp, r7
    5f5e:	bd80      	pop	{r7, pc}
    5f60:	00005c11 	.word	0x00005c11

00005f64 <_sercom_i2c_sync_analyse_flags>:

/**
 * \brief SERCOM I2CM analyze hardware status and transfer next byte
 */
static inline int32_t _sercom_i2c_sync_analyse_flags(void *const hw, uint32_t flags, struct _i2c_m_msg *const msg)
{
    5f64:	b590      	push	{r4, r7, lr}
    5f66:	b087      	sub	sp, #28
    5f68:	af00      	add	r7, sp, #0
    5f6a:	60f8      	str	r0, [r7, #12]
    5f6c:	60b9      	str	r1, [r7, #8]
    5f6e:	607a      	str	r2, [r7, #4]
	int      sclsm  = hri_sercomi2cm_get_CTRLA_SCLSM_bit(hw);
    5f70:	68f8      	ldr	r0, [r7, #12]
    5f72:	4b7d      	ldr	r3, [pc, #500]	; (6168 <_sercom_i2c_sync_analyse_flags+0x204>)
    5f74:	4798      	blx	r3
    5f76:	4603      	mov	r3, r0
    5f78:	617b      	str	r3, [r7, #20]
	uint16_t status = hri_sercomi2cm_read_STATUS_reg(hw);
    5f7a:	68f8      	ldr	r0, [r7, #12]
    5f7c:	4b7b      	ldr	r3, [pc, #492]	; (616c <_sercom_i2c_sync_analyse_flags+0x208>)
    5f7e:	4798      	blx	r3
    5f80:	4603      	mov	r3, r0
    5f82:	827b      	strh	r3, [r7, #18]

	if (flags & MB_FLAG) {
    5f84:	68bb      	ldr	r3, [r7, #8]
    5f86:	f003 0301 	and.w	r3, r3, #1
    5f8a:	2b00      	cmp	r3, #0
    5f8c:	f000 8095 	beq.w	60ba <_sercom_i2c_sync_analyse_flags+0x156>
		/* tx error */
		if (status & SERCOM_I2CM_STATUS_ARBLOST) {
    5f90:	8a7b      	ldrh	r3, [r7, #18]
    5f92:	f003 0302 	and.w	r3, r3, #2
    5f96:	2b00      	cmp	r3, #0
    5f98:	d01d      	beq.n	5fd6 <_sercom_i2c_sync_analyse_flags+0x72>
			hri_sercomi2cm_clear_interrupt_MB_bit(hw);
    5f9a:	68f8      	ldr	r0, [r7, #12]
    5f9c:	4b74      	ldr	r3, [pc, #464]	; (6170 <_sercom_i2c_sync_analyse_flags+0x20c>)
    5f9e:	4798      	blx	r3
			msg->flags |= I2C_M_FAIL;
    5fa0:	687b      	ldr	r3, [r7, #4]
    5fa2:	885b      	ldrh	r3, [r3, #2]
    5fa4:	b29b      	uxth	r3, r3
    5fa6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    5faa:	b29a      	uxth	r2, r3
    5fac:	687b      	ldr	r3, [r7, #4]
    5fae:	805a      	strh	r2, [r3, #2]
			msg->flags &= ~I2C_M_BUSY;
    5fb0:	687b      	ldr	r3, [r7, #4]
    5fb2:	885b      	ldrh	r3, [r3, #2]
    5fb4:	b29b      	uxth	r3, r3
    5fb6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    5fba:	b29a      	uxth	r2, r3
    5fbc:	687b      	ldr	r3, [r7, #4]
    5fbe:	805a      	strh	r2, [r3, #2]

			if (status & SERCOM_I2CM_STATUS_BUSERR) {
    5fc0:	8a7b      	ldrh	r3, [r7, #18]
    5fc2:	f003 0301 	and.w	r3, r3, #1
    5fc6:	2b00      	cmp	r3, #0
    5fc8:	d002      	beq.n	5fd0 <_sercom_i2c_sync_analyse_flags+0x6c>
				return I2C_ERR_BUS;
    5fca:	f06f 0304 	mvn.w	r3, #4
    5fce:	e0c6      	b.n	615e <_sercom_i2c_sync_analyse_flags+0x1fa>
			}

			return I2C_ERR_BAD_ADDRESS;
    5fd0:	f06f 0303 	mvn.w	r3, #3
    5fd4:	e0c3      	b.n	615e <_sercom_i2c_sync_analyse_flags+0x1fa>
		} else {
			if (status & SERCOM_I2CM_STATUS_RXNACK) {
    5fd6:	8a7b      	ldrh	r3, [r7, #18]
    5fd8:	f003 0304 	and.w	r3, r3, #4
    5fdc:	2b00      	cmp	r3, #0
    5fde:	d01f      	beq.n	6020 <_sercom_i2c_sync_analyse_flags+0xbc>

				/* Slave rejects to receive more data */
				if (msg->len > 0) {
    5fe0:	687b      	ldr	r3, [r7, #4]
    5fe2:	685b      	ldr	r3, [r3, #4]
    5fe4:	2b00      	cmp	r3, #0
    5fe6:	dd07      	ble.n	5ff8 <_sercom_i2c_sync_analyse_flags+0x94>
					msg->flags |= I2C_M_FAIL;
    5fe8:	687b      	ldr	r3, [r7, #4]
    5fea:	885b      	ldrh	r3, [r3, #2]
    5fec:	b29b      	uxth	r3, r3
    5fee:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    5ff2:	b29a      	uxth	r2, r3
    5ff4:	687b      	ldr	r3, [r7, #4]
    5ff6:	805a      	strh	r2, [r3, #2]
				}

				if (msg->flags & I2C_M_STOP) {
    5ff8:	687b      	ldr	r3, [r7, #4]
    5ffa:	885b      	ldrh	r3, [r3, #2]
    5ffc:	b29b      	uxth	r3, r3
    5ffe:	b21b      	sxth	r3, r3
    6000:	2b00      	cmp	r3, #0
    6002:	da02      	bge.n	600a <_sercom_i2c_sync_analyse_flags+0xa6>
					_sercom_i2c_send_stop(hw);
    6004:	68f8      	ldr	r0, [r7, #12]
    6006:	4b5b      	ldr	r3, [pc, #364]	; (6174 <_sercom_i2c_sync_analyse_flags+0x210>)
    6008:	4798      	blx	r3
				}

				msg->flags &= ~I2C_M_BUSY;
    600a:	687b      	ldr	r3, [r7, #4]
    600c:	885b      	ldrh	r3, [r3, #2]
    600e:	b29b      	uxth	r3, r3
    6010:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    6014:	b29a      	uxth	r2, r3
    6016:	687b      	ldr	r3, [r7, #4]
    6018:	805a      	strh	r2, [r3, #2]

				return I2C_NACK;
    601a:	f06f 0301 	mvn.w	r3, #1
    601e:	e09e      	b.n	615e <_sercom_i2c_sync_analyse_flags+0x1fa>
			}

			if (msg->flags & I2C_M_TEN) {
    6020:	687b      	ldr	r3, [r7, #4]
    6022:	885b      	ldrh	r3, [r3, #2]
    6024:	b29b      	uxth	r3, r3
    6026:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    602a:	2b00      	cmp	r3, #0
    602c:	d01c      	beq.n	6068 <_sercom_i2c_sync_analyse_flags+0x104>
				hri_sercomi2cm_write_ADDR_reg(hw,
				                              ((((msg->addr & TEN_ADDR_MASK) >> 8) | TEN_ADDR_FRAME) << 1) | I2C_M_RD
    602e:	687b      	ldr	r3, [r7, #4]
    6030:	881b      	ldrh	r3, [r3, #0]
    6032:	121b      	asrs	r3, r3, #8
    6034:	005b      	lsls	r3, r3, #1
				                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    6036:	f003 0406 	and.w	r4, r3, #6
    603a:	68f8      	ldr	r0, [r7, #12]
    603c:	4b4e      	ldr	r3, [pc, #312]	; (6178 <_sercom_i2c_sync_analyse_flags+0x214>)
    603e:	4798      	blx	r3
    6040:	4603      	mov	r3, r0
    6042:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    6046:	4323      	orrs	r3, r4
				hri_sercomi2cm_write_ADDR_reg(hw,
    6048:	f043 03f1 	orr.w	r3, r3, #241	; 0xf1
    604c:	4619      	mov	r1, r3
    604e:	68f8      	ldr	r0, [r7, #12]
    6050:	4b4a      	ldr	r3, [pc, #296]	; (617c <_sercom_i2c_sync_analyse_flags+0x218>)
    6052:	4798      	blx	r3
				msg->flags &= ~I2C_M_TEN;
    6054:	687b      	ldr	r3, [r7, #4]
    6056:	885b      	ldrh	r3, [r3, #2]
    6058:	b29b      	uxth	r3, r3
    605a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    605e:	b29a      	uxth	r2, r3
    6060:	687b      	ldr	r3, [r7, #4]
    6062:	805a      	strh	r2, [r3, #2]

				return I2C_OK;
    6064:	2300      	movs	r3, #0
    6066:	e07a      	b.n	615e <_sercom_i2c_sync_analyse_flags+0x1fa>
			}

			if (msg->len == 0) {
    6068:	687b      	ldr	r3, [r7, #4]
    606a:	685b      	ldr	r3, [r3, #4]
    606c:	2b00      	cmp	r3, #0
    606e:	d111      	bne.n	6094 <_sercom_i2c_sync_analyse_flags+0x130>
				if (msg->flags & I2C_M_STOP) {
    6070:	687b      	ldr	r3, [r7, #4]
    6072:	885b      	ldrh	r3, [r3, #2]
    6074:	b29b      	uxth	r3, r3
    6076:	b21b      	sxth	r3, r3
    6078:	2b00      	cmp	r3, #0
    607a:	da02      	bge.n	6082 <_sercom_i2c_sync_analyse_flags+0x11e>
					_sercom_i2c_send_stop(hw);
    607c:	68f8      	ldr	r0, [r7, #12]
    607e:	4b3d      	ldr	r3, [pc, #244]	; (6174 <_sercom_i2c_sync_analyse_flags+0x210>)
    6080:	4798      	blx	r3
				}

				msg->flags &= ~I2C_M_BUSY;
    6082:	687b      	ldr	r3, [r7, #4]
    6084:	885b      	ldrh	r3, [r3, #2]
    6086:	b29b      	uxth	r3, r3
    6088:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    608c:	b29a      	uxth	r2, r3
    608e:	687b      	ldr	r3, [r7, #4]
    6090:	805a      	strh	r2, [r3, #2]
    6092:	e010      	b.n	60b6 <_sercom_i2c_sync_analyse_flags+0x152>
			} else {
				hri_sercomi2cm_write_DATA_reg(hw, *msg->buffer);
    6094:	687b      	ldr	r3, [r7, #4]
    6096:	689b      	ldr	r3, [r3, #8]
    6098:	781b      	ldrb	r3, [r3, #0]
    609a:	4619      	mov	r1, r3
    609c:	68f8      	ldr	r0, [r7, #12]
    609e:	4b38      	ldr	r3, [pc, #224]	; (6180 <_sercom_i2c_sync_analyse_flags+0x21c>)
    60a0:	4798      	blx	r3
				msg->buffer++;
    60a2:	687b      	ldr	r3, [r7, #4]
    60a4:	689b      	ldr	r3, [r3, #8]
    60a6:	1c5a      	adds	r2, r3, #1
    60a8:	687b      	ldr	r3, [r7, #4]
    60aa:	609a      	str	r2, [r3, #8]
				msg->len--;
    60ac:	687b      	ldr	r3, [r7, #4]
    60ae:	685b      	ldr	r3, [r3, #4]
    60b0:	1e5a      	subs	r2, r3, #1
    60b2:	687b      	ldr	r3, [r7, #4]
    60b4:	605a      	str	r2, [r3, #4]
			}

			return I2C_OK;
    60b6:	2300      	movs	r3, #0
    60b8:	e051      	b.n	615e <_sercom_i2c_sync_analyse_flags+0x1fa>
		}
	} else if (flags & SB_FLAG) {
    60ba:	68bb      	ldr	r3, [r7, #8]
    60bc:	f003 0302 	and.w	r3, r3, #2
    60c0:	2b00      	cmp	r3, #0
    60c2:	d04b      	beq.n	615c <_sercom_i2c_sync_analyse_flags+0x1f8>
		if ((msg->len) && !(status & SERCOM_I2CM_STATUS_RXNACK)) {
    60c4:	687b      	ldr	r3, [r7, #4]
    60c6:	685b      	ldr	r3, [r3, #4]
    60c8:	2b00      	cmp	r3, #0
    60ca:	d041      	beq.n	6150 <_sercom_i2c_sync_analyse_flags+0x1ec>
    60cc:	8a7b      	ldrh	r3, [r7, #18]
    60ce:	f003 0304 	and.w	r3, r3, #4
    60d2:	2b00      	cmp	r3, #0
    60d4:	d13c      	bne.n	6150 <_sercom_i2c_sync_analyse_flags+0x1ec>
			msg->len--;
    60d6:	687b      	ldr	r3, [r7, #4]
    60d8:	685b      	ldr	r3, [r3, #4]
    60da:	1e5a      	subs	r2, r3, #1
    60dc:	687b      	ldr	r3, [r7, #4]
    60de:	605a      	str	r2, [r3, #4]

			/* last byte, send nack */
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
    60e0:	687b      	ldr	r3, [r7, #4]
    60e2:	685b      	ldr	r3, [r3, #4]
    60e4:	2b00      	cmp	r3, #0
    60e6:	d102      	bne.n	60ee <_sercom_i2c_sync_analyse_flags+0x18a>
    60e8:	697b      	ldr	r3, [r7, #20]
    60ea:	2b00      	cmp	r3, #0
    60ec:	d006      	beq.n	60fc <_sercom_i2c_sync_analyse_flags+0x198>
    60ee:	687b      	ldr	r3, [r7, #4]
    60f0:	685b      	ldr	r3, [r3, #4]
    60f2:	2b01      	cmp	r3, #1
    60f4:	d105      	bne.n	6102 <_sercom_i2c_sync_analyse_flags+0x19e>
    60f6:	697b      	ldr	r3, [r7, #20]
    60f8:	2b00      	cmp	r3, #0
    60fa:	d002      	beq.n	6102 <_sercom_i2c_sync_analyse_flags+0x19e>
				hri_sercomi2cm_set_CTRLB_ACKACT_bit(hw);
    60fc:	68f8      	ldr	r0, [r7, #12]
    60fe:	4b21      	ldr	r3, [pc, #132]	; (6184 <_sercom_i2c_sync_analyse_flags+0x220>)
    6100:	4798      	blx	r3
			}

			if (msg->len == 0) {
    6102:	687b      	ldr	r3, [r7, #4]
    6104:	685b      	ldr	r3, [r3, #4]
    6106:	2b00      	cmp	r3, #0
    6108:	d113      	bne.n	6132 <_sercom_i2c_sync_analyse_flags+0x1ce>
				if (msg->flags & I2C_M_STOP) {
    610a:	687b      	ldr	r3, [r7, #4]
    610c:	885b      	ldrh	r3, [r3, #2]
    610e:	b29b      	uxth	r3, r3
    6110:	b21b      	sxth	r3, r3
    6112:	2b00      	cmp	r3, #0
    6114:	da05      	bge.n	6122 <_sercom_i2c_sync_analyse_flags+0x1be>
					hri_sercomi2cm_clear_CTRLB_SMEN_bit(hw);
    6116:	68f8      	ldr	r0, [r7, #12]
    6118:	4b1b      	ldr	r3, [pc, #108]	; (6188 <_sercom_i2c_sync_analyse_flags+0x224>)
    611a:	4798      	blx	r3
					_sercom_i2c_send_stop(hw);
    611c:	68f8      	ldr	r0, [r7, #12]
    611e:	4b15      	ldr	r3, [pc, #84]	; (6174 <_sercom_i2c_sync_analyse_flags+0x210>)
    6120:	4798      	blx	r3
				}

				msg->flags &= ~I2C_M_BUSY;
    6122:	687b      	ldr	r3, [r7, #4]
    6124:	885b      	ldrh	r3, [r3, #2]
    6126:	b29b      	uxth	r3, r3
    6128:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    612c:	b29a      	uxth	r2, r3
    612e:	687b      	ldr	r3, [r7, #4]
    6130:	805a      	strh	r2, [r3, #2]

			/* Accessing DATA.DATA auto-triggers I2C bus operations.
			 * The operation performed depends on the state of
			 * CTRLB.ACKACT, CTRLB.SMEN
			 **/
			*msg->buffer++ = hri_sercomi2cm_read_DATA_reg(hw);
    6132:	687b      	ldr	r3, [r7, #4]
    6134:	689c      	ldr	r4, [r3, #8]
    6136:	1c62      	adds	r2, r4, #1
    6138:	687b      	ldr	r3, [r7, #4]
    613a:	609a      	str	r2, [r3, #8]
    613c:	68f8      	ldr	r0, [r7, #12]
    613e:	4b13      	ldr	r3, [pc, #76]	; (618c <_sercom_i2c_sync_analyse_flags+0x228>)
    6140:	4798      	blx	r3
    6142:	4603      	mov	r3, r0
    6144:	b2db      	uxtb	r3, r3
    6146:	7023      	strb	r3, [r4, #0]
		} else {
			hri_sercomi2cm_clear_interrupt_SB_bit(hw);
			return I2C_NACK;
		}

		hri_sercomi2cm_clear_interrupt_SB_bit(hw);
    6148:	68f8      	ldr	r0, [r7, #12]
    614a:	4b11      	ldr	r3, [pc, #68]	; (6190 <_sercom_i2c_sync_analyse_flags+0x22c>)
    614c:	4798      	blx	r3
    614e:	e005      	b.n	615c <_sercom_i2c_sync_analyse_flags+0x1f8>
			hri_sercomi2cm_clear_interrupt_SB_bit(hw);
    6150:	68f8      	ldr	r0, [r7, #12]
    6152:	4b0f      	ldr	r3, [pc, #60]	; (6190 <_sercom_i2c_sync_analyse_flags+0x22c>)
    6154:	4798      	blx	r3
			return I2C_NACK;
    6156:	f06f 0301 	mvn.w	r3, #1
    615a:	e000      	b.n	615e <_sercom_i2c_sync_analyse_flags+0x1fa>
	}

	return I2C_OK;
    615c:	2300      	movs	r3, #0
}
    615e:	4618      	mov	r0, r3
    6160:	371c      	adds	r7, #28
    6162:	46bd      	mov	sp, r7
    6164:	bd90      	pop	{r4, r7, pc}
    6166:	bf00      	nop
    6168:	00005a11 	.word	0x00005a11
    616c:	00005e1d 	.word	0x00005e1d
    6170:	00005865 	.word	0x00005865
    6174:	00005f49 	.word	0x00005f49
    6178:	00005d29 	.word	0x00005d29
    617c:	00005d05 	.word	0x00005d05
    6180:	00005d65 	.word	0x00005d65
    6184:	00005bc1 	.word	0x00005bc1
    6188:	00005b99 	.word	0x00005b99
    618c:	00005d89 	.word	0x00005d89
    6190:	0000587f 	.word	0x0000587f

00006194 <_sercom_i2c_m_irq_handler>:
 * \internal Sercom i2c master interrupt handler
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
static void _sercom_i2c_m_irq_handler(struct _i2c_m_async_device *i2c_dev)
{
    6194:	b580      	push	{r7, lr}
    6196:	b086      	sub	sp, #24
    6198:	af00      	add	r7, sp, #0
    619a:	6078      	str	r0, [r7, #4]
	void *   hw    = i2c_dev->hw;
    619c:	687b      	ldr	r3, [r7, #4]
    619e:	691b      	ldr	r3, [r3, #16]
    61a0:	613b      	str	r3, [r7, #16]
	uint32_t flags = hri_sercomi2cm_read_INTFLAG_reg(hw);
    61a2:	6938      	ldr	r0, [r7, #16]
    61a4:	4b37      	ldr	r3, [pc, #220]	; (6284 <_sercom_i2c_m_irq_handler+0xf0>)
    61a6:	4798      	blx	r3
    61a8:	4603      	mov	r3, r0
    61aa:	60fb      	str	r3, [r7, #12]
	int32_t  ret   = I2C_OK;
    61ac:	2300      	movs	r3, #0
    61ae:	617b      	str	r3, [r7, #20]

	ASSERT(i2c_dev);
    61b0:	687b      	ldr	r3, [r7, #4]
    61b2:	2b00      	cmp	r3, #0
    61b4:	bf14      	ite	ne
    61b6:	2301      	movne	r3, #1
    61b8:	2300      	moveq	r3, #0
    61ba:	b2db      	uxtb	r3, r3
    61bc:	f240 4224 	movw	r2, #1060	; 0x424
    61c0:	4931      	ldr	r1, [pc, #196]	; (6288 <_sercom_i2c_m_irq_handler+0xf4>)
    61c2:	4618      	mov	r0, r3
    61c4:	4b31      	ldr	r3, [pc, #196]	; (628c <_sercom_i2c_m_irq_handler+0xf8>)
    61c6:	4798      	blx	r3
	ASSERT(i2c_dev->hw);
    61c8:	687b      	ldr	r3, [r7, #4]
    61ca:	691b      	ldr	r3, [r3, #16]
    61cc:	2b00      	cmp	r3, #0
    61ce:	bf14      	ite	ne
    61d0:	2301      	movne	r3, #1
    61d2:	2300      	moveq	r3, #0
    61d4:	b2db      	uxtb	r3, r3
    61d6:	f240 4225 	movw	r2, #1061	; 0x425
    61da:	492b      	ldr	r1, [pc, #172]	; (6288 <_sercom_i2c_m_irq_handler+0xf4>)
    61dc:	4618      	mov	r0, r3
    61de:	4b2b      	ldr	r3, [pc, #172]	; (628c <_sercom_i2c_m_irq_handler+0xf8>)
    61e0:	4798      	blx	r3

	while (!(flags & ERROR_FLAG)) {
    61e2:	bf00      	nop
    61e4:	68fb      	ldr	r3, [r7, #12]
    61e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
    61ea:	2b00      	cmp	r3, #0
    61ec:	d126      	bne.n	623c <_sercom_i2c_m_irq_handler+0xa8>
		ret = _sercom_i2c_sync_analyse_flags(hw, flags, &i2c_dev->service.msg);
    61ee:	687b      	ldr	r3, [r7, #4]
    61f0:	461a      	mov	r2, r3
    61f2:	68f9      	ldr	r1, [r7, #12]
    61f4:	6938      	ldr	r0, [r7, #16]
    61f6:	4b26      	ldr	r3, [pc, #152]	; (6290 <_sercom_i2c_m_irq_handler+0xfc>)
    61f8:	4798      	blx	r3
    61fa:	6178      	str	r0, [r7, #20]

		if (ret != 0) {
    61fc:	697b      	ldr	r3, [r7, #20]
    61fe:	2b00      	cmp	r3, #0
    6200:	d11b      	bne.n	623a <_sercom_i2c_m_irq_handler+0xa6>
			break;
		}

		/* app callback */
		if ((flags & MB_FLAG) && i2c_dev->cb.tx_complete) {
    6202:	68fb      	ldr	r3, [r7, #12]
    6204:	f003 0301 	and.w	r3, r3, #1
    6208:	2b00      	cmp	r3, #0
    620a:	d008      	beq.n	621e <_sercom_i2c_m_irq_handler+0x8a>
    620c:	687b      	ldr	r3, [r7, #4]
    620e:	699b      	ldr	r3, [r3, #24]
    6210:	2b00      	cmp	r3, #0
    6212:	d004      	beq.n	621e <_sercom_i2c_m_irq_handler+0x8a>
			i2c_dev->cb.tx_complete(i2c_dev);
    6214:	687b      	ldr	r3, [r7, #4]
    6216:	699b      	ldr	r3, [r3, #24]
    6218:	6878      	ldr	r0, [r7, #4]
    621a:	4798      	blx	r3
		} else if ((flags & SB_FLAG) && i2c_dev->cb.rx_complete) {
			i2c_dev->cb.rx_complete(i2c_dev);
		}

		return;
    621c:	e02e      	b.n	627c <_sercom_i2c_m_irq_handler+0xe8>
		} else if ((flags & SB_FLAG) && i2c_dev->cb.rx_complete) {
    621e:	68fb      	ldr	r3, [r7, #12]
    6220:	f003 0302 	and.w	r3, r3, #2
    6224:	2b00      	cmp	r3, #0
    6226:	d029      	beq.n	627c <_sercom_i2c_m_irq_handler+0xe8>
    6228:	687b      	ldr	r3, [r7, #4]
    622a:	69db      	ldr	r3, [r3, #28]
    622c:	2b00      	cmp	r3, #0
    622e:	d025      	beq.n	627c <_sercom_i2c_m_irq_handler+0xe8>
			i2c_dev->cb.rx_complete(i2c_dev);
    6230:	687b      	ldr	r3, [r7, #4]
    6232:	69db      	ldr	r3, [r3, #28]
    6234:	6878      	ldr	r0, [r7, #4]
    6236:	4798      	blx	r3
		return;
    6238:	e020      	b.n	627c <_sercom_i2c_m_irq_handler+0xe8>
			break;
    623a:	bf00      	nop
	}

	i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    623c:	687b      	ldr	r3, [r7, #4]
    623e:	885b      	ldrh	r3, [r3, #2]
    6240:	b29b      	uxth	r3, r3
    6242:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    6246:	b29a      	uxth	r2, r3
    6248:	687b      	ldr	r3, [r7, #4]
    624a:	805a      	strh	r2, [r3, #2]
	if (i2c_dev->cb.error) {
    624c:	687b      	ldr	r3, [r7, #4]
    624e:	695b      	ldr	r3, [r3, #20]
    6250:	2b00      	cmp	r3, #0
    6252:	d014      	beq.n	627e <_sercom_i2c_m_irq_handler+0xea>
		if (ret != I2C_OK) {
    6254:	697b      	ldr	r3, [r7, #20]
    6256:	2b00      	cmp	r3, #0
    6258:	d005      	beq.n	6266 <_sercom_i2c_m_irq_handler+0xd2>
			i2c_dev->cb.error(i2c_dev, ret);
    625a:	687b      	ldr	r3, [r7, #4]
    625c:	695b      	ldr	r3, [r3, #20]
    625e:	6979      	ldr	r1, [r7, #20]
    6260:	6878      	ldr	r0, [r7, #4]
    6262:	4798      	blx	r3
    6264:	e005      	b.n	6272 <_sercom_i2c_m_irq_handler+0xde>
		} else {
			i2c_dev->cb.error(i2c_dev, I2C_ERR_BUS);
    6266:	687b      	ldr	r3, [r7, #4]
    6268:	695b      	ldr	r3, [r3, #20]
    626a:	f06f 0104 	mvn.w	r1, #4
    626e:	6878      	ldr	r0, [r7, #4]
    6270:	4798      	blx	r3
		}
		hri_sercomi2cm_clear_INTFLAG_reg(hw, SERCOM_I2CM_INTFLAG_ERROR);
    6272:	2180      	movs	r1, #128	; 0x80
    6274:	6938      	ldr	r0, [r7, #16]
    6276:	4b07      	ldr	r3, [pc, #28]	; (6294 <_sercom_i2c_m_irq_handler+0x100>)
    6278:	4798      	blx	r3
    627a:	e000      	b.n	627e <_sercom_i2c_m_irq_handler+0xea>
		return;
    627c:	bf00      	nop
	}
}
    627e:	3718      	adds	r7, #24
    6280:	46bd      	mov	sp, r7
    6282:	bd80      	pop	{r7, pc}
    6284:	00005899 	.word	0x00005899
    6288:	0000ce2c 	.word	0x0000ce2c
    628c:	00003481 	.word	0x00003481
    6290:	00005f65 	.word	0x00005f65
    6294:	000058b3 	.word	0x000058b3

00006298 <_sercom_get_irq_num>:

/**
 * \brief Retrieve IRQ number for the given hardware instance
 */
static uint8_t _sercom_get_irq_num(const void *const hw)
{
    6298:	b580      	push	{r7, lr}
    629a:	b082      	sub	sp, #8
    629c:	af00      	add	r7, sp, #0
    629e:	6078      	str	r0, [r7, #4]
	return SERCOM0_0_IRQn + (_sercom_get_hardware_index(hw) << 2);
    62a0:	6878      	ldr	r0, [r7, #4]
    62a2:	4b05      	ldr	r3, [pc, #20]	; (62b8 <_sercom_get_irq_num+0x20>)
    62a4:	4798      	blx	r3
    62a6:	4603      	mov	r3, r0
    62a8:	009b      	lsls	r3, r3, #2
    62aa:	b2db      	uxtb	r3, r3
    62ac:	332e      	adds	r3, #46	; 0x2e
    62ae:	b2db      	uxtb	r3, r3
}
    62b0:	4618      	mov	r0, r3
    62b2:	3708      	adds	r7, #8
    62b4:	46bd      	mov	sp, r7
    62b6:	bd80      	pop	{r7, pc}
    62b8:	00005e41 	.word	0x00005e41

000062bc <_i2c_m_async_init>:
 * \brief Initialize sercom i2c module to use in async mode
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
int32_t _i2c_m_async_init(struct _i2c_m_async_device *const i2c_dev, void *const hw)
{
    62bc:	b580      	push	{r7, lr}
    62be:	b086      	sub	sp, #24
    62c0:	af00      	add	r7, sp, #0
    62c2:	6078      	str	r0, [r7, #4]
    62c4:	6039      	str	r1, [r7, #0]
	int32_t init_status;

	ASSERT(i2c_dev);
    62c6:	687b      	ldr	r3, [r7, #4]
    62c8:	2b00      	cmp	r3, #0
    62ca:	bf14      	ite	ne
    62cc:	2301      	movne	r3, #1
    62ce:	2300      	moveq	r3, #0
    62d0:	b2db      	uxtb	r3, r3
    62d2:	f44f 6293 	mov.w	r2, #1176	; 0x498
    62d6:	491d      	ldr	r1, [pc, #116]	; (634c <_i2c_m_async_init+0x90>)
    62d8:	4618      	mov	r0, r3
    62da:	4b1d      	ldr	r3, [pc, #116]	; (6350 <_i2c_m_async_init+0x94>)
    62dc:	4798      	blx	r3

	i2c_dev->hw = hw;
    62de:	687b      	ldr	r3, [r7, #4]
    62e0:	683a      	ldr	r2, [r7, #0]
    62e2:	611a      	str	r2, [r3, #16]

	init_status = _i2c_m_sync_init_impl(&i2c_dev->service, hw);
    62e4:	687b      	ldr	r3, [r7, #4]
    62e6:	6839      	ldr	r1, [r7, #0]
    62e8:	4618      	mov	r0, r3
    62ea:	4b1a      	ldr	r3, [pc, #104]	; (6354 <_i2c_m_async_init+0x98>)
    62ec:	4798      	blx	r3
    62ee:	60f8      	str	r0, [r7, #12]
	if (init_status) {
    62f0:	68fb      	ldr	r3, [r7, #12]
    62f2:	2b00      	cmp	r3, #0
    62f4:	d001      	beq.n	62fa <_i2c_m_async_init+0x3e>
		return init_status;
    62f6:	68fb      	ldr	r3, [r7, #12]
    62f8:	e024      	b.n	6344 <_i2c_m_async_init+0x88>
	}

	_sercom_init_irq_param(hw, (void *)i2c_dev);
    62fa:	6879      	ldr	r1, [r7, #4]
    62fc:	6838      	ldr	r0, [r7, #0]
    62fe:	4b16      	ldr	r3, [pc, #88]	; (6358 <_i2c_m_async_init+0x9c>)
    6300:	4798      	blx	r3
	uint8_t irq = _sercom_get_irq_num(hw);
    6302:	6838      	ldr	r0, [r7, #0]
    6304:	4b15      	ldr	r3, [pc, #84]	; (635c <_i2c_m_async_init+0xa0>)
    6306:	4798      	blx	r3
    6308:	4603      	mov	r3, r0
    630a:	75fb      	strb	r3, [r7, #23]
	for (uint32_t i = 0; i < 4; i++) {
    630c:	2300      	movs	r3, #0
    630e:	613b      	str	r3, [r7, #16]
    6310:	e014      	b.n	633c <_i2c_m_async_init+0x80>
		NVIC_DisableIRQ((IRQn_Type)irq);
    6312:	7dfb      	ldrb	r3, [r7, #23]
    6314:	b21b      	sxth	r3, r3
    6316:	4618      	mov	r0, r3
    6318:	4b11      	ldr	r3, [pc, #68]	; (6360 <_i2c_m_async_init+0xa4>)
    631a:	4798      	blx	r3
		NVIC_ClearPendingIRQ((IRQn_Type)irq);
    631c:	7dfb      	ldrb	r3, [r7, #23]
    631e:	b21b      	sxth	r3, r3
    6320:	4618      	mov	r0, r3
    6322:	4b10      	ldr	r3, [pc, #64]	; (6364 <_i2c_m_async_init+0xa8>)
    6324:	4798      	blx	r3
		NVIC_EnableIRQ((IRQn_Type)irq);
    6326:	7dfb      	ldrb	r3, [r7, #23]
    6328:	b21b      	sxth	r3, r3
    632a:	4618      	mov	r0, r3
    632c:	4b0e      	ldr	r3, [pc, #56]	; (6368 <_i2c_m_async_init+0xac>)
    632e:	4798      	blx	r3
		irq++;
    6330:	7dfb      	ldrb	r3, [r7, #23]
    6332:	3301      	adds	r3, #1
    6334:	75fb      	strb	r3, [r7, #23]
	for (uint32_t i = 0; i < 4; i++) {
    6336:	693b      	ldr	r3, [r7, #16]
    6338:	3301      	adds	r3, #1
    633a:	613b      	str	r3, [r7, #16]
    633c:	693b      	ldr	r3, [r7, #16]
    633e:	2b03      	cmp	r3, #3
    6340:	d9e7      	bls.n	6312 <_i2c_m_async_init+0x56>
	}
	return ERR_NONE;
    6342:	2300      	movs	r3, #0
}
    6344:	4618      	mov	r0, r3
    6346:	3718      	adds	r7, #24
    6348:	46bd      	mov	sp, r7
    634a:	bd80      	pop	{r7, pc}
    634c:	0000ce2c 	.word	0x0000ce2c
    6350:	00003481 	.word	0x00003481
    6354:	00006585 	.word	0x00006585
    6358:	00005e9d 	.word	0x00005e9d
    635c:	00006299 	.word	0x00006299
    6360:	0000574d 	.word	0x0000574d
    6364:	00005791 	.word	0x00005791
    6368:	00005711 	.word	0x00005711

0000636c <_sercom_i2c_send_address>:
 * \brief Transfer the slave address to bus, which will start the transfer
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
static int32_t _sercom_i2c_send_address(struct _i2c_m_async_device *const i2c_dev)
{
    636c:	b590      	push	{r4, r7, lr}
    636e:	b087      	sub	sp, #28
    6370:	af00      	add	r7, sp, #0
    6372:	6078      	str	r0, [r7, #4]
	void *             hw    = i2c_dev->hw;
    6374:	687b      	ldr	r3, [r7, #4]
    6376:	691b      	ldr	r3, [r3, #16]
    6378:	617b      	str	r3, [r7, #20]
	struct _i2c_m_msg *msg   = &i2c_dev->service.msg;
    637a:	687b      	ldr	r3, [r7, #4]
    637c:	613b      	str	r3, [r7, #16]
	int                sclsm = hri_sercomi2cm_get_CTRLA_SCLSM_bit(hw);
    637e:	6978      	ldr	r0, [r7, #20]
    6380:	4b33      	ldr	r3, [pc, #204]	; (6450 <_sercom_i2c_send_address+0xe4>)
    6382:	4798      	blx	r3
    6384:	4603      	mov	r3, r0
    6386:	60fb      	str	r3, [r7, #12]

	ASSERT(i2c_dev);
    6388:	687b      	ldr	r3, [r7, #4]
    638a:	2b00      	cmp	r3, #0
    638c:	bf14      	ite	ne
    638e:	2301      	movne	r3, #1
    6390:	2300      	moveq	r3, #0
    6392:	b2db      	uxtb	r3, r3
    6394:	f240 42c6 	movw	r2, #1222	; 0x4c6
    6398:	492e      	ldr	r1, [pc, #184]	; (6454 <_sercom_i2c_send_address+0xe8>)
    639a:	4618      	mov	r0, r3
    639c:	4b2e      	ldr	r3, [pc, #184]	; (6458 <_sercom_i2c_send_address+0xec>)
    639e:	4798      	blx	r3

	if (msg->len == 1 && sclsm) {
    63a0:	693b      	ldr	r3, [r7, #16]
    63a2:	685b      	ldr	r3, [r3, #4]
    63a4:	2b01      	cmp	r3, #1
    63a6:	d106      	bne.n	63b6 <_sercom_i2c_send_address+0x4a>
    63a8:	68fb      	ldr	r3, [r7, #12]
    63aa:	2b00      	cmp	r3, #0
    63ac:	d003      	beq.n	63b6 <_sercom_i2c_send_address+0x4a>
		hri_sercomi2cm_set_CTRLB_ACKACT_bit(hw);
    63ae:	6978      	ldr	r0, [r7, #20]
    63b0:	4b2a      	ldr	r3, [pc, #168]	; (645c <_sercom_i2c_send_address+0xf0>)
    63b2:	4798      	blx	r3
    63b4:	e002      	b.n	63bc <_sercom_i2c_send_address+0x50>
	} else {
		hri_sercomi2cm_clear_CTRLB_ACKACT_bit(hw);
    63b6:	6978      	ldr	r0, [r7, #20]
    63b8:	4b29      	ldr	r3, [pc, #164]	; (6460 <_sercom_i2c_send_address+0xf4>)
    63ba:	4798      	blx	r3
	}

	/* ten bit address */
	if (msg->addr & I2C_M_TEN) {
    63bc:	693b      	ldr	r3, [r7, #16]
    63be:	881b      	ldrh	r3, [r3, #0]
    63c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    63c4:	2b00      	cmp	r3, #0
    63c6:	d022      	beq.n	640e <_sercom_i2c_send_address+0xa2>
		if (msg->flags & I2C_M_RD) {
    63c8:	693b      	ldr	r3, [r7, #16]
    63ca:	885b      	ldrh	r3, [r3, #2]
    63cc:	b29b      	uxth	r3, r3
    63ce:	f003 0301 	and.w	r3, r3, #1
    63d2:	2b00      	cmp	r3, #0
    63d4:	d007      	beq.n	63e6 <_sercom_i2c_send_address+0x7a>
			msg->flags |= I2C_M_TEN;
    63d6:	693b      	ldr	r3, [r7, #16]
    63d8:	885b      	ldrh	r3, [r3, #2]
    63da:	b29b      	uxth	r3, r3
    63dc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    63e0:	b29a      	uxth	r2, r3
    63e2:	693b      	ldr	r3, [r7, #16]
    63e4:	805a      	strh	r2, [r3, #2]
		}

		hri_sercomi2cm_write_ADDR_reg(hw,
		                              ((msg->addr & TEN_ADDR_MASK) << 1) | SERCOM_I2CM_ADDR_TENBITEN
    63e6:	693b      	ldr	r3, [r7, #16]
    63e8:	881b      	ldrh	r3, [r3, #0]
    63ea:	005b      	lsls	r3, r3, #1
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    63ec:	f240 74fe 	movw	r4, #2046	; 0x7fe
    63f0:	401c      	ands	r4, r3
    63f2:	6978      	ldr	r0, [r7, #20]
    63f4:	4b1b      	ldr	r3, [pc, #108]	; (6464 <_sercom_i2c_send_address+0xf8>)
    63f6:	4798      	blx	r3
    63f8:	4603      	mov	r3, r0
    63fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    63fe:	4323      	orrs	r3, r4
		hri_sercomi2cm_write_ADDR_reg(hw,
    6400:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    6404:	4619      	mov	r1, r3
    6406:	6978      	ldr	r0, [r7, #20]
    6408:	4b17      	ldr	r3, [pc, #92]	; (6468 <_sercom_i2c_send_address+0xfc>)
    640a:	4798      	blx	r3
    640c:	e01a      	b.n	6444 <_sercom_i2c_send_address+0xd8>
	} else {
		hri_sercomi2cm_write_ADDR_reg(hw,
		                              ((msg->addr & SEVEN_ADDR_MASK) << 1) | (msg->flags & I2C_M_RD ? I2C_M_RD : 0x0)
    640e:	693b      	ldr	r3, [r7, #16]
    6410:	881b      	ldrh	r3, [r3, #0]
    6412:	005b      	lsls	r3, r3, #1
    6414:	b2db      	uxtb	r3, r3
    6416:	693a      	ldr	r2, [r7, #16]
    6418:	8852      	ldrh	r2, [r2, #2]
    641a:	b292      	uxth	r2, r2
    641c:	f002 0201 	and.w	r2, r2, #1
    6420:	2a00      	cmp	r2, #0
    6422:	bf14      	ite	ne
    6424:	2201      	movne	r2, #1
    6426:	2200      	moveq	r2, #0
    6428:	b2d2      	uxtb	r2, r2
    642a:	4313      	orrs	r3, r2
    642c:	461c      	mov	r4, r3
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    642e:	6978      	ldr	r0, [r7, #20]
    6430:	4b0c      	ldr	r3, [pc, #48]	; (6464 <_sercom_i2c_send_address+0xf8>)
    6432:	4798      	blx	r3
    6434:	4603      	mov	r3, r0
    6436:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
		hri_sercomi2cm_write_ADDR_reg(hw,
    643a:	4323      	orrs	r3, r4
    643c:	4619      	mov	r1, r3
    643e:	6978      	ldr	r0, [r7, #20]
    6440:	4b09      	ldr	r3, [pc, #36]	; (6468 <_sercom_i2c_send_address+0xfc>)
    6442:	4798      	blx	r3
	}

	return ERR_NONE;
    6444:	2300      	movs	r3, #0
}
    6446:	4618      	mov	r0, r3
    6448:	371c      	adds	r7, #28
    644a:	46bd      	mov	sp, r7
    644c:	bd90      	pop	{r4, r7, pc}
    644e:	bf00      	nop
    6450:	00005a11 	.word	0x00005a11
    6454:	0000ce2c 	.word	0x0000ce2c
    6458:	00003481 	.word	0x00003481
    645c:	00005bc1 	.word	0x00005bc1
    6460:	00005be9 	.word	0x00005be9
    6464:	00005d29 	.word	0x00005d29
    6468:	00005d05 	.word	0x00005d05

0000646c <_i2c_m_async_transfer>:
 * \return Transfer status.
 * \retval 0 Transfer success
 * \retval <0 Transfer fail, return the error code
 */
int32_t _i2c_m_async_transfer(struct _i2c_m_async_device *i2c_dev, struct _i2c_m_msg *msg)
{
    646c:	b580      	push	{r7, lr}
    646e:	b084      	sub	sp, #16
    6470:	af00      	add	r7, sp, #0
    6472:	6078      	str	r0, [r7, #4]
    6474:	6039      	str	r1, [r7, #0]
	int ret;

	ASSERT(i2c_dev);
    6476:	687b      	ldr	r3, [r7, #4]
    6478:	2b00      	cmp	r3, #0
    647a:	bf14      	ite	ne
    647c:	2301      	movne	r3, #1
    647e:	2300      	moveq	r3, #0
    6480:	b2db      	uxtb	r3, r3
    6482:	f240 42ee 	movw	r2, #1262	; 0x4ee
    6486:	492a      	ldr	r1, [pc, #168]	; (6530 <_i2c_m_async_transfer+0xc4>)
    6488:	4618      	mov	r0, r3
    648a:	4b2a      	ldr	r3, [pc, #168]	; (6534 <_i2c_m_async_transfer+0xc8>)
    648c:	4798      	blx	r3
	ASSERT(i2c_dev->hw);
    648e:	687b      	ldr	r3, [r7, #4]
    6490:	691b      	ldr	r3, [r3, #16]
    6492:	2b00      	cmp	r3, #0
    6494:	bf14      	ite	ne
    6496:	2301      	movne	r3, #1
    6498:	2300      	moveq	r3, #0
    649a:	b2db      	uxtb	r3, r3
    649c:	f240 42ef 	movw	r2, #1263	; 0x4ef
    64a0:	4923      	ldr	r1, [pc, #140]	; (6530 <_i2c_m_async_transfer+0xc4>)
    64a2:	4618      	mov	r0, r3
    64a4:	4b23      	ldr	r3, [pc, #140]	; (6534 <_i2c_m_async_transfer+0xc8>)
    64a6:	4798      	blx	r3
	ASSERT(msg);
    64a8:	683b      	ldr	r3, [r7, #0]
    64aa:	2b00      	cmp	r3, #0
    64ac:	bf14      	ite	ne
    64ae:	2301      	movne	r3, #1
    64b0:	2300      	moveq	r3, #0
    64b2:	b2db      	uxtb	r3, r3
    64b4:	f44f 629e 	mov.w	r2, #1264	; 0x4f0
    64b8:	491d      	ldr	r1, [pc, #116]	; (6530 <_i2c_m_async_transfer+0xc4>)
    64ba:	4618      	mov	r0, r3
    64bc:	4b1d      	ldr	r3, [pc, #116]	; (6534 <_i2c_m_async_transfer+0xc8>)
    64be:	4798      	blx	r3

	if (msg->len == 0) {
    64c0:	683b      	ldr	r3, [r7, #0]
    64c2:	685b      	ldr	r3, [r3, #4]
    64c4:	2b00      	cmp	r3, #0
    64c6:	d101      	bne.n	64cc <_i2c_m_async_transfer+0x60>
		return ERR_NONE;
    64c8:	2300      	movs	r3, #0
    64ca:	e02d      	b.n	6528 <_i2c_m_async_transfer+0xbc>
	}

	if (i2c_dev->service.msg.flags & I2C_M_BUSY) {
    64cc:	687b      	ldr	r3, [r7, #4]
    64ce:	885b      	ldrh	r3, [r3, #2]
    64d0:	b29b      	uxth	r3, r3
    64d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
    64d6:	2b00      	cmp	r3, #0
    64d8:	d002      	beq.n	64e0 <_i2c_m_async_transfer+0x74>
		return ERR_BUSY;
    64da:	f06f 0303 	mvn.w	r3, #3
    64de:	e023      	b.n	6528 <_i2c_m_async_transfer+0xbc>
	}

	msg->flags |= I2C_M_BUSY;
    64e0:	683b      	ldr	r3, [r7, #0]
    64e2:	885b      	ldrh	r3, [r3, #2]
    64e4:	b29b      	uxth	r3, r3
    64e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    64ea:	b29a      	uxth	r2, r3
    64ec:	683b      	ldr	r3, [r7, #0]
    64ee:	805a      	strh	r2, [r3, #2]
	i2c_dev->service.msg = *msg;
    64f0:	687b      	ldr	r3, [r7, #4]
    64f2:	683a      	ldr	r2, [r7, #0]
    64f4:	ca07      	ldmia	r2, {r0, r1, r2}
    64f6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	hri_sercomi2cm_set_CTRLB_SMEN_bit(i2c_dev->hw);
    64fa:	687b      	ldr	r3, [r7, #4]
    64fc:	691b      	ldr	r3, [r3, #16]
    64fe:	4618      	mov	r0, r3
    6500:	4b0d      	ldr	r3, [pc, #52]	; (6538 <_i2c_m_async_transfer+0xcc>)
    6502:	4798      	blx	r3

	ret = _sercom_i2c_send_address(i2c_dev);
    6504:	6878      	ldr	r0, [r7, #4]
    6506:	4b0d      	ldr	r3, [pc, #52]	; (653c <_i2c_m_async_transfer+0xd0>)
    6508:	4798      	blx	r3
    650a:	60f8      	str	r0, [r7, #12]

	if (ret) {
    650c:	68fb      	ldr	r3, [r7, #12]
    650e:	2b00      	cmp	r3, #0
    6510:	d009      	beq.n	6526 <_i2c_m_async_transfer+0xba>
		i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    6512:	687b      	ldr	r3, [r7, #4]
    6514:	885b      	ldrh	r3, [r3, #2]
    6516:	b29b      	uxth	r3, r3
    6518:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    651c:	b29a      	uxth	r2, r3
    651e:	687b      	ldr	r3, [r7, #4]
    6520:	805a      	strh	r2, [r3, #2]

		return ret;
    6522:	68fb      	ldr	r3, [r7, #12]
    6524:	e000      	b.n	6528 <_i2c_m_async_transfer+0xbc>
	}

	return ERR_NONE;
    6526:	2300      	movs	r3, #0
}
    6528:	4618      	mov	r0, r3
    652a:	3710      	adds	r7, #16
    652c:	46bd      	mov	sp, r7
    652e:	bd80      	pop	{r7, pc}
    6530:	0000ce2c 	.word	0x0000ce2c
    6534:	00003481 	.word	0x00003481
    6538:	00005b71 	.word	0x00005b71
    653c:	0000636d 	.word	0x0000636d

00006540 <_i2c_m_async_register_callback>:
 * \param[in] type The callback type
 * \param[in] func The callback function pointer
 */
int32_t _i2c_m_async_register_callback(struct _i2c_m_async_device *const i2c_dev, enum _i2c_m_async_callback_type type,
                                       FUNC_PTR func)
{
    6540:	b480      	push	{r7}
    6542:	b085      	sub	sp, #20
    6544:	af00      	add	r7, sp, #0
    6546:	60f8      	str	r0, [r7, #12]
    6548:	460b      	mov	r3, r1
    654a:	607a      	str	r2, [r7, #4]
    654c:	72fb      	strb	r3, [r7, #11]
	switch (type) {
    654e:	7afb      	ldrb	r3, [r7, #11]
    6550:	2b01      	cmp	r3, #1
    6552:	d008      	beq.n	6566 <_i2c_m_async_register_callback+0x26>
    6554:	2b02      	cmp	r3, #2
    6556:	d00a      	beq.n	656e <_i2c_m_async_register_callback+0x2e>
    6558:	2b00      	cmp	r3, #0
    655a:	d000      	beq.n	655e <_i2c_m_async_register_callback+0x1e>
	case I2C_M_ASYNC_DEVICE_RX_COMPLETE:
		i2c_dev->cb.rx_complete = (_i2c_complete_cb_t)func;
		break;
	default:
		/* error */
		break;
    655c:	e00b      	b.n	6576 <_i2c_m_async_register_callback+0x36>
		i2c_dev->cb.error = (_i2c_error_cb_t)func;
    655e:	68fb      	ldr	r3, [r7, #12]
    6560:	687a      	ldr	r2, [r7, #4]
    6562:	615a      	str	r2, [r3, #20]
		break;
    6564:	e007      	b.n	6576 <_i2c_m_async_register_callback+0x36>
		i2c_dev->cb.tx_complete = (_i2c_complete_cb_t)func;
    6566:	68fb      	ldr	r3, [r7, #12]
    6568:	687a      	ldr	r2, [r7, #4]
    656a:	619a      	str	r2, [r3, #24]
		break;
    656c:	e003      	b.n	6576 <_i2c_m_async_register_callback+0x36>
		i2c_dev->cb.rx_complete = (_i2c_complete_cb_t)func;
    656e:	68fb      	ldr	r3, [r7, #12]
    6570:	687a      	ldr	r2, [r7, #4]
    6572:	61da      	str	r2, [r3, #28]
		break;
    6574:	bf00      	nop
	}

	return ERR_NONE;
    6576:	2300      	movs	r3, #0
}
    6578:	4618      	mov	r0, r3
    657a:	3714      	adds	r7, #20
    657c:	46bd      	mov	sp, r7
    657e:	f85d 7b04 	ldr.w	r7, [sp], #4
    6582:	4770      	bx	lr

00006584 <_i2c_m_sync_init_impl>:
	}
	return ERR_NONE;
}

static int32_t _i2c_m_sync_init_impl(struct _i2c_m_service *const service, void *const hw)
{
    6584:	b580      	push	{r7, lr}
    6586:	b084      	sub	sp, #16
    6588:	af00      	add	r7, sp, #0
    658a:	6078      	str	r0, [r7, #4]
    658c:	6039      	str	r1, [r7, #0]
	uint8_t i = _get_i2cm_index(hw);
    658e:	6838      	ldr	r0, [r7, #0]
    6590:	4b42      	ldr	r3, [pc, #264]	; (669c <_i2c_m_sync_init_impl+0x118>)
    6592:	4798      	blx	r3
    6594:	4603      	mov	r3, r0
    6596:	73fb      	strb	r3, [r7, #15]

	if (!hri_sercomi2cm_is_syncing(hw, SERCOM_I2CM_SYNCBUSY_SWRST)) {
    6598:	2101      	movs	r1, #1
    659a:	6838      	ldr	r0, [r7, #0]
    659c:	4b40      	ldr	r3, [pc, #256]	; (66a0 <_i2c_m_sync_init_impl+0x11c>)
    659e:	4798      	blx	r3
    65a0:	4603      	mov	r3, r0
    65a2:	f083 0301 	eor.w	r3, r3, #1
    65a6:	b2db      	uxtb	r3, r3
    65a8:	2b00      	cmp	r3, #0
    65aa:	d020      	beq.n	65ee <_i2c_m_sync_init_impl+0x6a>
		uint32_t mode = _i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_MODE_Msk;
    65ac:	7bfa      	ldrb	r2, [r7, #15]
    65ae:	493d      	ldr	r1, [pc, #244]	; (66a4 <_i2c_m_sync_init_impl+0x120>)
    65b0:	4613      	mov	r3, r2
    65b2:	005b      	lsls	r3, r3, #1
    65b4:	4413      	add	r3, r2
    65b6:	00db      	lsls	r3, r3, #3
    65b8:	440b      	add	r3, r1
    65ba:	3304      	adds	r3, #4
    65bc:	681b      	ldr	r3, [r3, #0]
    65be:	f003 031c 	and.w	r3, r3, #28
    65c2:	60bb      	str	r3, [r7, #8]
		if (hri_sercomi2cm_get_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_ENABLE)) {
    65c4:	2102      	movs	r1, #2
    65c6:	6838      	ldr	r0, [r7, #0]
    65c8:	4b37      	ldr	r3, [pc, #220]	; (66a8 <_i2c_m_sync_init_impl+0x124>)
    65ca:	4798      	blx	r3
    65cc:	4603      	mov	r3, r0
    65ce:	2b00      	cmp	r3, #0
    65d0:	d006      	beq.n	65e0 <_i2c_m_sync_init_impl+0x5c>
			hri_sercomi2cm_clear_CTRLA_ENABLE_bit(hw);
    65d2:	6838      	ldr	r0, [r7, #0]
    65d4:	4b35      	ldr	r3, [pc, #212]	; (66ac <_i2c_m_sync_init_impl+0x128>)
    65d6:	4798      	blx	r3
			hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_ENABLE);
    65d8:	2102      	movs	r1, #2
    65da:	6838      	ldr	r0, [r7, #0]
    65dc:	4b34      	ldr	r3, [pc, #208]	; (66b0 <_i2c_m_sync_init_impl+0x12c>)
    65de:	4798      	blx	r3
		}
		hri_sercomi2cm_write_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_SWRST | mode);
    65e0:	68bb      	ldr	r3, [r7, #8]
    65e2:	f043 0301 	orr.w	r3, r3, #1
    65e6:	4619      	mov	r1, r3
    65e8:	6838      	ldr	r0, [r7, #0]
    65ea:	4b32      	ldr	r3, [pc, #200]	; (66b4 <_i2c_m_sync_init_impl+0x130>)
    65ec:	4798      	blx	r3
	}
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST);
    65ee:	2101      	movs	r1, #1
    65f0:	6838      	ldr	r0, [r7, #0]
    65f2:	4b2f      	ldr	r3, [pc, #188]	; (66b0 <_i2c_m_sync_init_impl+0x12c>)
    65f4:	4798      	blx	r3

	hri_sercomi2cm_write_CTRLA_reg(hw, _i2cms[i].ctrl_a);
    65f6:	7bfa      	ldrb	r2, [r7, #15]
    65f8:	492a      	ldr	r1, [pc, #168]	; (66a4 <_i2c_m_sync_init_impl+0x120>)
    65fa:	4613      	mov	r3, r2
    65fc:	005b      	lsls	r3, r3, #1
    65fe:	4413      	add	r3, r2
    6600:	00db      	lsls	r3, r3, #3
    6602:	440b      	add	r3, r1
    6604:	3304      	adds	r3, #4
    6606:	681b      	ldr	r3, [r3, #0]
    6608:	4619      	mov	r1, r3
    660a:	6838      	ldr	r0, [r7, #0]
    660c:	4b29      	ldr	r3, [pc, #164]	; (66b4 <_i2c_m_sync_init_impl+0x130>)
    660e:	4798      	blx	r3
	hri_sercomi2cm_write_CTRLB_reg(hw, _i2cms[i].ctrl_b);
    6610:	7bfa      	ldrb	r2, [r7, #15]
    6612:	4924      	ldr	r1, [pc, #144]	; (66a4 <_i2c_m_sync_init_impl+0x120>)
    6614:	4613      	mov	r3, r2
    6616:	005b      	lsls	r3, r3, #1
    6618:	4413      	add	r3, r2
    661a:	00db      	lsls	r3, r3, #3
    661c:	440b      	add	r3, r1
    661e:	3308      	adds	r3, #8
    6620:	681b      	ldr	r3, [r3, #0]
    6622:	4619      	mov	r1, r3
    6624:	6838      	ldr	r0, [r7, #0]
    6626:	4b24      	ldr	r3, [pc, #144]	; (66b8 <_i2c_m_sync_init_impl+0x134>)
    6628:	4798      	blx	r3
	hri_sercomi2cm_write_BAUD_reg(hw, _i2cms[i].baud);
    662a:	7bfa      	ldrb	r2, [r7, #15]
    662c:	491d      	ldr	r1, [pc, #116]	; (66a4 <_i2c_m_sync_init_impl+0x120>)
    662e:	4613      	mov	r3, r2
    6630:	005b      	lsls	r3, r3, #1
    6632:	4413      	add	r3, r2
    6634:	00db      	lsls	r3, r3, #3
    6636:	440b      	add	r3, r1
    6638:	330c      	adds	r3, #12
    663a:	681b      	ldr	r3, [r3, #0]
    663c:	4619      	mov	r1, r3
    663e:	6838      	ldr	r0, [r7, #0]
    6640:	4b1e      	ldr	r3, [pc, #120]	; (66bc <_i2c_m_sync_init_impl+0x138>)
    6642:	4798      	blx	r3

	service->mode = (_i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_SPEED_Msk) >> SERCOM_I2CM_CTRLA_SPEED_Pos;
    6644:	7bfa      	ldrb	r2, [r7, #15]
    6646:	4917      	ldr	r1, [pc, #92]	; (66a4 <_i2c_m_sync_init_impl+0x120>)
    6648:	4613      	mov	r3, r2
    664a:	005b      	lsls	r3, r3, #1
    664c:	4413      	add	r3, r2
    664e:	00db      	lsls	r3, r3, #3
    6650:	440b      	add	r3, r1
    6652:	3304      	adds	r3, #4
    6654:	681b      	ldr	r3, [r3, #0]
    6656:	0e1b      	lsrs	r3, r3, #24
    6658:	b29b      	uxth	r3, r3
    665a:	f003 0303 	and.w	r3, r3, #3
    665e:	b29a      	uxth	r2, r3
    6660:	687b      	ldr	r3, [r7, #4]
    6662:	819a      	strh	r2, [r3, #12]
	hri_sercomi2cm_write_ADDR_HS_bit(hw, service->mode < I2C_HS ? 0 : 1);
    6664:	687b      	ldr	r3, [r7, #4]
    6666:	899b      	ldrh	r3, [r3, #12]
    6668:	2b01      	cmp	r3, #1
    666a:	bf8c      	ite	hi
    666c:	2301      	movhi	r3, #1
    666e:	2300      	movls	r3, #0
    6670:	b2db      	uxtb	r3, r3
    6672:	4619      	mov	r1, r3
    6674:	6838      	ldr	r0, [r7, #0]
    6676:	4b12      	ldr	r3, [pc, #72]	; (66c0 <_i2c_m_sync_init_impl+0x13c>)
    6678:	4798      	blx	r3

	service->trise = _i2cms[i].trise;
    667a:	7bfa      	ldrb	r2, [r7, #15]
    667c:	4909      	ldr	r1, [pc, #36]	; (66a4 <_i2c_m_sync_init_impl+0x120>)
    667e:	4613      	mov	r3, r2
    6680:	005b      	lsls	r3, r3, #1
    6682:	4413      	add	r3, r2
    6684:	00db      	lsls	r3, r3, #3
    6686:	440b      	add	r3, r1
    6688:	3312      	adds	r3, #18
    668a:	881a      	ldrh	r2, [r3, #0]
    668c:	687b      	ldr	r3, [r7, #4]
    668e:	81da      	strh	r2, [r3, #14]

	return ERR_NONE;
    6690:	2300      	movs	r3, #0
}
    6692:	4618      	mov	r0, r3
    6694:	3710      	adds	r7, #16
    6696:	46bd      	mov	sp, r7
    6698:	bd80      	pop	{r7, pc}
    669a:	bf00      	nop
    669c:	00005ee1 	.word	0x00005ee1
    66a0:	000057f1 	.word	0x000057f1
    66a4:	20000018 	.word	0x20000018
    66a8:	00005a41 	.word	0x00005a41
    66ac:	000059e9 	.word	0x000059e9
    66b0:	000057cd 	.word	0x000057cd
    66b4:	00005a71 	.word	0x00005a71
    66b8:	00005c41 	.word	0x00005c41
    66bc:	00005c89 	.word	0x00005c89
    66c0:	00005cc5 	.word	0x00005cc5

000066c4 <_spi_sync_enable>:
 *  \param[in] hw Pointer to the hardware register base.
 *
 * \return Enabling status
 */
static int32_t _spi_sync_enable(void *const hw)
{
    66c4:	b580      	push	{r7, lr}
    66c6:	b082      	sub	sp, #8
    66c8:	af00      	add	r7, sp, #0
    66ca:	6078      	str	r0, [r7, #4]
	if (hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    66cc:	2101      	movs	r1, #1
    66ce:	6878      	ldr	r0, [r7, #4]
    66d0:	4b07      	ldr	r3, [pc, #28]	; (66f0 <_spi_sync_enable+0x2c>)
    66d2:	4798      	blx	r3
    66d4:	4603      	mov	r3, r0
    66d6:	2b00      	cmp	r3, #0
    66d8:	d002      	beq.n	66e0 <_spi_sync_enable+0x1c>
		return ERR_BUSY;
    66da:	f06f 0303 	mvn.w	r3, #3
    66de:	e003      	b.n	66e8 <_spi_sync_enable+0x24>
	}

	hri_sercomspi_set_CTRLA_ENABLE_bit(hw);
    66e0:	6878      	ldr	r0, [r7, #4]
    66e2:	4b04      	ldr	r3, [pc, #16]	; (66f4 <_spi_sync_enable+0x30>)
    66e4:	4798      	blx	r3

	return ERR_NONE;
    66e6:	2300      	movs	r3, #0
}
    66e8:	4618      	mov	r0, r3
    66ea:	3708      	adds	r7, #8
    66ec:	46bd      	mov	sp, r7
    66ee:	bd80      	pop	{r7, pc}
    66f0:	0000583d 	.word	0x0000583d
    66f4:	00005a95 	.word	0x00005a95

000066f8 <_spi_sync_disable>:
 *  \param[in] hw Pointer to the hardware register base.
 *
 * \return Disabling status
 */
static int32_t _spi_sync_disable(void *const hw)
{
    66f8:	b580      	push	{r7, lr}
    66fa:	b082      	sub	sp, #8
    66fc:	af00      	add	r7, sp, #0
    66fe:	6078      	str	r0, [r7, #4]
	if (hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    6700:	2101      	movs	r1, #1
    6702:	6878      	ldr	r0, [r7, #4]
    6704:	4b07      	ldr	r3, [pc, #28]	; (6724 <_spi_sync_disable+0x2c>)
    6706:	4798      	blx	r3
    6708:	4603      	mov	r3, r0
    670a:	2b00      	cmp	r3, #0
    670c:	d002      	beq.n	6714 <_spi_sync_disable+0x1c>
		return ERR_BUSY;
    670e:	f06f 0303 	mvn.w	r3, #3
    6712:	e003      	b.n	671c <_spi_sync_disable+0x24>
	}
	hri_sercomspi_clear_CTRLA_ENABLE_bit(hw);
    6714:	6878      	ldr	r0, [r7, #4]
    6716:	4b04      	ldr	r3, [pc, #16]	; (6728 <_spi_sync_disable+0x30>)
    6718:	4798      	blx	r3

	return ERR_NONE;
    671a:	2300      	movs	r3, #0
}
    671c:	4618      	mov	r0, r3
    671e:	3708      	adds	r7, #8
    6720:	46bd      	mov	sp, r7
    6722:	bd80      	pop	{r7, pc}
    6724:	0000583d 	.word	0x0000583d
    6728:	00005af5 	.word	0x00005af5

0000672c <_spi_load_regs_master>:
 *  are ignored.
 *  \param[in, out] hw Pointer to the hardware register base.
 *  \param[in] regs Pointer to register configuration values.
 */
static inline void _spi_load_regs_master(void *const hw, const struct sercomspi_regs_cfg *regs)
{
    672c:	b580      	push	{r7, lr}
    672e:	b082      	sub	sp, #8
    6730:	af00      	add	r7, sp, #0
    6732:	6078      	str	r0, [r7, #4]
    6734:	6039      	str	r1, [r7, #0]
	ASSERT(hw && regs);
    6736:	687b      	ldr	r3, [r7, #4]
    6738:	2b00      	cmp	r3, #0
    673a:	d004      	beq.n	6746 <_spi_load_regs_master+0x1a>
    673c:	683b      	ldr	r3, [r7, #0]
    673e:	2b00      	cmp	r3, #0
    6740:	d001      	beq.n	6746 <_spi_load_regs_master+0x1a>
    6742:	2301      	movs	r3, #1
    6744:	e000      	b.n	6748 <_spi_load_regs_master+0x1c>
    6746:	2300      	movs	r3, #0
    6748:	f003 0301 	and.w	r3, r3, #1
    674c:	b2db      	uxtb	r3, r3
    674e:	f640 123c 	movw	r2, #2364	; 0x93c
    6752:	4915      	ldr	r1, [pc, #84]	; (67a8 <_spi_load_regs_master+0x7c>)
    6754:	4618      	mov	r0, r3
    6756:	4b15      	ldr	r3, [pc, #84]	; (67ac <_spi_load_regs_master+0x80>)
    6758:	4798      	blx	r3
	hri_sercomspi_write_CTRLA_reg(
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    675a:	683b      	ldr	r3, [r7, #0]
    675c:	681b      	ldr	r3, [r3, #0]
	hri_sercomspi_write_CTRLA_reg(
    675e:	f423 7381 	bic.w	r3, r3, #258	; 0x102
    6762:	f023 0301 	bic.w	r3, r3, #1
    6766:	4619      	mov	r1, r3
    6768:	6878      	ldr	r0, [r7, #4]
    676a:	4b11      	ldr	r3, [pc, #68]	; (67b0 <_spi_load_regs_master+0x84>)
    676c:	4798      	blx	r3
	hri_sercomspi_write_CTRLB_reg(
	    hw,
	    (regs->ctrlb
    676e:	683b      	ldr	r3, [r7, #0]
    6770:	685b      	ldr	r3, [r3, #4]
	     & ~(SERCOM_SPI_CTRLB_MSSEN | SERCOM_SPI_CTRLB_AMODE_Msk | SERCOM_SPI_CTRLB_SSDE | SERCOM_SPI_CTRLB_PLOADEN))
	        | (SERCOM_SPI_CTRLB_RXEN));
    6772:	f423 3338 	bic.w	r3, r3, #188416	; 0x2e000
    6776:	f423 7310 	bic.w	r3, r3, #576	; 0x240
	hri_sercomspi_write_CTRLB_reg(
    677a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    677e:	4619      	mov	r1, r3
    6780:	6878      	ldr	r0, [r7, #4]
    6782:	4b0c      	ldr	r3, [pc, #48]	; (67b4 <_spi_load_regs_master+0x88>)
    6784:	4798      	blx	r3
	hri_sercomspi_write_BAUD_reg(hw, regs->baud);
    6786:	683b      	ldr	r3, [r7, #0]
    6788:	7b1b      	ldrb	r3, [r3, #12]
    678a:	4619      	mov	r1, r3
    678c:	6878      	ldr	r0, [r7, #4]
    678e:	4b0a      	ldr	r3, [pc, #40]	; (67b8 <_spi_load_regs_master+0x8c>)
    6790:	4798      	blx	r3
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    6792:	683b      	ldr	r3, [r7, #0]
    6794:	7b5b      	ldrb	r3, [r3, #13]
    6796:	4619      	mov	r1, r3
    6798:	6878      	ldr	r0, [r7, #4]
    679a:	4b08      	ldr	r3, [pc, #32]	; (67bc <_spi_load_regs_master+0x90>)
    679c:	4798      	blx	r3
}
    679e:	bf00      	nop
    67a0:	3708      	adds	r7, #8
    67a2:	46bd      	mov	sp, r7
    67a4:	bd80      	pop	{r7, pc}
    67a6:	bf00      	nop
    67a8:	0000ce2c 	.word	0x0000ce2c
    67ac:	00003481 	.word	0x00003481
    67b0:	00005b4d 	.word	0x00005b4d
    67b4:	00005c65 	.word	0x00005c65
    67b8:	00005ca5 	.word	0x00005ca5
    67bc:	00005ddd 	.word	0x00005ddd

000067c0 <_spi_load_regs_slave>:
 *  are ignored.
 *  \param[in, out] hw Pointer to the hardware register base.
 *  \param[in] regs Pointer to register configuration values.
 */
static inline void _spi_load_regs_slave(void *const hw, const struct sercomspi_regs_cfg *regs)
{
    67c0:	b580      	push	{r7, lr}
    67c2:	b082      	sub	sp, #8
    67c4:	af00      	add	r7, sp, #0
    67c6:	6078      	str	r0, [r7, #4]
    67c8:	6039      	str	r1, [r7, #0]
	ASSERT(hw && regs);
    67ca:	687b      	ldr	r3, [r7, #4]
    67cc:	2b00      	cmp	r3, #0
    67ce:	d004      	beq.n	67da <_spi_load_regs_slave+0x1a>
    67d0:	683b      	ldr	r3, [r7, #0]
    67d2:	2b00      	cmp	r3, #0
    67d4:	d001      	beq.n	67da <_spi_load_regs_slave+0x1a>
    67d6:	2301      	movs	r3, #1
    67d8:	e000      	b.n	67dc <_spi_load_regs_slave+0x1c>
    67da:	2300      	movs	r3, #0
    67dc:	f003 0301 	and.w	r3, r3, #1
    67e0:	b2db      	uxtb	r3, r3
    67e2:	f44f 6215 	mov.w	r2, #2384	; 0x950
    67e6:	491a      	ldr	r1, [pc, #104]	; (6850 <_spi_load_regs_slave+0x90>)
    67e8:	4618      	mov	r0, r3
    67ea:	4b1a      	ldr	r3, [pc, #104]	; (6854 <_spi_load_regs_slave+0x94>)
    67ec:	4798      	blx	r3
	hri_sercomspi_write_CTRLA_reg(
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    67ee:	683b      	ldr	r3, [r7, #0]
    67f0:	681b      	ldr	r3, [r3, #0]
	hri_sercomspi_write_CTRLA_reg(
    67f2:	f423 7381 	bic.w	r3, r3, #258	; 0x102
    67f6:	f023 0301 	bic.w	r3, r3, #1
    67fa:	4619      	mov	r1, r3
    67fc:	6878      	ldr	r0, [r7, #4]
    67fe:	4b16      	ldr	r3, [pc, #88]	; (6858 <_spi_load_regs_slave+0x98>)
    6800:	4798      	blx	r3
	hri_sercomspi_write_CTRLB_reg(hw,
	                              (regs->ctrlb & ~(SERCOM_SPI_CTRLB_MSSEN))
    6802:	683b      	ldr	r3, [r7, #0]
    6804:	685b      	ldr	r3, [r3, #4]
	                                  | (SERCOM_SPI_CTRLB_RXEN | SERCOM_SPI_CTRLB_SSDE | SERCOM_SPI_CTRLB_PLOADEN));
    6806:	f423 3308 	bic.w	r3, r3, #139264	; 0x22000
    680a:	f423 7310 	bic.w	r3, r3, #576	; 0x240
	hri_sercomspi_write_CTRLB_reg(hw,
    680e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    6812:	f443 7310 	orr.w	r3, r3, #576	; 0x240
    6816:	4619      	mov	r1, r3
    6818:	6878      	ldr	r0, [r7, #4]
    681a:	4b10      	ldr	r3, [pc, #64]	; (685c <_spi_load_regs_slave+0x9c>)
    681c:	4798      	blx	r3
	hri_sercomspi_write_ADDR_reg(hw, regs->addr);
    681e:	683b      	ldr	r3, [r7, #0]
    6820:	689b      	ldr	r3, [r3, #8]
    6822:	4619      	mov	r1, r3
    6824:	6878      	ldr	r0, [r7, #4]
    6826:	4b0e      	ldr	r3, [pc, #56]	; (6860 <_spi_load_regs_slave+0xa0>)
    6828:	4798      	blx	r3
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    682a:	683b      	ldr	r3, [r7, #0]
    682c:	7b5b      	ldrb	r3, [r3, #13]
    682e:	4619      	mov	r1, r3
    6830:	6878      	ldr	r0, [r7, #4]
    6832:	4b0c      	ldr	r3, [pc, #48]	; (6864 <_spi_load_regs_slave+0xa4>)
    6834:	4798      	blx	r3
	while (hri_sercomspi_is_syncing(hw, 0xFFFFFFFF))
    6836:	bf00      	nop
    6838:	f04f 31ff 	mov.w	r1, #4294967295
    683c:	6878      	ldr	r0, [r7, #4]
    683e:	4b0a      	ldr	r3, [pc, #40]	; (6868 <_spi_load_regs_slave+0xa8>)
    6840:	4798      	blx	r3
    6842:	4603      	mov	r3, r0
    6844:	2b00      	cmp	r3, #0
    6846:	d1f7      	bne.n	6838 <_spi_load_regs_slave+0x78>
		;
}
    6848:	bf00      	nop
    684a:	3708      	adds	r7, #8
    684c:	46bd      	mov	sp, r7
    684e:	bd80      	pop	{r7, pc}
    6850:	0000ce2c 	.word	0x0000ce2c
    6854:	00003481 	.word	0x00003481
    6858:	00005b4d 	.word	0x00005b4d
    685c:	00005c65 	.word	0x00005c65
    6860:	00005d49 	.word	0x00005d49
    6864:	00005ddd 	.word	0x00005ddd
    6868:	0000583d 	.word	0x0000583d

0000686c <_spi_get_regs>:
/** \brief Return the pointer to register settings of specific SERCOM
 *  \param[in] hw_addr The hardware register base address.
 *  \return Pointer to register settings of specific SERCOM.
 */
static inline const struct sercomspi_regs_cfg *_spi_get_regs(const uint32_t hw_addr)
{
    686c:	b580      	push	{r7, lr}
    686e:	b084      	sub	sp, #16
    6870:	af00      	add	r7, sp, #0
    6872:	6078      	str	r0, [r7, #4]
	uint8_t n = _sercom_get_hardware_index((const void *)hw_addr);
    6874:	687b      	ldr	r3, [r7, #4]
    6876:	4618      	mov	r0, r3
    6878:	4b11      	ldr	r3, [pc, #68]	; (68c0 <_spi_get_regs+0x54>)
    687a:	4798      	blx	r3
    687c:	4603      	mov	r3, r0
    687e:	73bb      	strb	r3, [r7, #14]
	uint8_t i;

	for (i = 0; i < sizeof(sercomspi_regs) / sizeof(struct sercomspi_regs_cfg); i++) {
    6880:	2300      	movs	r3, #0
    6882:	73fb      	strb	r3, [r7, #15]
    6884:	e014      	b.n	68b0 <_spi_get_regs+0x44>
		if (sercomspi_regs[i].n == n) {
    6886:	7bfa      	ldrb	r2, [r7, #15]
    6888:	490e      	ldr	r1, [pc, #56]	; (68c4 <_spi_get_regs+0x58>)
    688a:	4613      	mov	r3, r2
    688c:	011b      	lsls	r3, r3, #4
    688e:	4413      	add	r3, r2
    6890:	440b      	add	r3, r1
    6892:	3310      	adds	r3, #16
    6894:	781b      	ldrb	r3, [r3, #0]
    6896:	7bba      	ldrb	r2, [r7, #14]
    6898:	429a      	cmp	r2, r3
    689a:	d106      	bne.n	68aa <_spi_get_regs+0x3e>
			return &sercomspi_regs[i];
    689c:	7bfa      	ldrb	r2, [r7, #15]
    689e:	4613      	mov	r3, r2
    68a0:	011b      	lsls	r3, r3, #4
    68a2:	4413      	add	r3, r2
    68a4:	4a07      	ldr	r2, [pc, #28]	; (68c4 <_spi_get_regs+0x58>)
    68a6:	4413      	add	r3, r2
    68a8:	e006      	b.n	68b8 <_spi_get_regs+0x4c>
	for (i = 0; i < sizeof(sercomspi_regs) / sizeof(struct sercomspi_regs_cfg); i++) {
    68aa:	7bfb      	ldrb	r3, [r7, #15]
    68ac:	3301      	adds	r3, #1
    68ae:	73fb      	strb	r3, [r7, #15]
    68b0:	7bfb      	ldrb	r3, [r7, #15]
    68b2:	2b02      	cmp	r3, #2
    68b4:	d9e7      	bls.n	6886 <_spi_get_regs+0x1a>
		}
	}

	return NULL;
    68b6:	2300      	movs	r3, #0
}
    68b8:	4618      	mov	r0, r3
    68ba:	3710      	adds	r7, #16
    68bc:	46bd      	mov	sp, r7
    68be:	bd80      	pop	{r7, pc}
    68c0:	00005e41 	.word	0x00005e41
    68c4:	0000ce68 	.word	0x0000ce68

000068c8 <_spi_handler>:
/**
 *  \brief IRQ handler used
 *  \param[in, out] p Pointer to SPI device instance.
 */
static void _spi_handler(struct _spi_async_dev *dev)
{
    68c8:	b580      	push	{r7, lr}
    68ca:	b084      	sub	sp, #16
    68cc:	af00      	add	r7, sp, #0
    68ce:	6078      	str	r0, [r7, #4]
	void *                      hw = dev->prvt;
    68d0:	687b      	ldr	r3, [r7, #4]
    68d2:	681b      	ldr	r3, [r3, #0]
    68d4:	60fb      	str	r3, [r7, #12]
	hri_sercomspi_intflag_reg_t st;

	st = hri_sercomspi_read_INTFLAG_reg(hw);
    68d6:	68f8      	ldr	r0, [r7, #12]
    68d8:	4b21      	ldr	r3, [pc, #132]	; (6960 <_spi_handler+0x98>)
    68da:	4798      	blx	r3
    68dc:	4603      	mov	r3, r0
    68de:	72fb      	strb	r3, [r7, #11]
	st &= hri_sercomspi_read_INTEN_reg(hw);
    68e0:	68f8      	ldr	r0, [r7, #12]
    68e2:	4b20      	ldr	r3, [pc, #128]	; (6964 <_spi_handler+0x9c>)
    68e4:	4798      	blx	r3
    68e6:	4603      	mov	r3, r0
    68e8:	461a      	mov	r2, r3
    68ea:	7afb      	ldrb	r3, [r7, #11]
    68ec:	4013      	ands	r3, r2
    68ee:	72fb      	strb	r3, [r7, #11]

	if (st & SERCOM_SPI_INTFLAG_DRE) {
    68f0:	7afb      	ldrb	r3, [r7, #11]
    68f2:	f003 0301 	and.w	r3, r3, #1
    68f6:	2b00      	cmp	r3, #0
    68f8:	d004      	beq.n	6904 <_spi_handler+0x3c>
		dev->callbacks.tx(dev);
    68fa:	687b      	ldr	r3, [r7, #4]
    68fc:	689b      	ldr	r3, [r3, #8]
    68fe:	6878      	ldr	r0, [r7, #4]
    6900:	4798      	blx	r3
	} else if (st & SERCOM_SPI_INTFLAG_ERROR) {
		hri_sercomspi_clear_STATUS_reg(hw, SERCOM_SPI_STATUS_BUFOVF);
		hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_ERROR);
		dev->callbacks.err(dev, ERR_OVERFLOW);
	}
}
    6902:	e029      	b.n	6958 <_spi_handler+0x90>
	} else if (st & SERCOM_SPI_INTFLAG_RXC) {
    6904:	7afb      	ldrb	r3, [r7, #11]
    6906:	f003 0304 	and.w	r3, r3, #4
    690a:	2b00      	cmp	r3, #0
    690c:	d004      	beq.n	6918 <_spi_handler+0x50>
		dev->callbacks.rx(dev);
    690e:	687b      	ldr	r3, [r7, #4]
    6910:	68db      	ldr	r3, [r3, #12]
    6912:	6878      	ldr	r0, [r7, #4]
    6914:	4798      	blx	r3
}
    6916:	e01f      	b.n	6958 <_spi_handler+0x90>
	} else if (st & SERCOM_SPI_INTFLAG_TXC) {
    6918:	7afb      	ldrb	r3, [r7, #11]
    691a:	f003 0302 	and.w	r3, r3, #2
    691e:	2b00      	cmp	r3, #0
    6920:	d008      	beq.n	6934 <_spi_handler+0x6c>
		hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC);
    6922:	2102      	movs	r1, #2
    6924:	68f8      	ldr	r0, [r7, #12]
    6926:	4b10      	ldr	r3, [pc, #64]	; (6968 <_spi_handler+0xa0>)
    6928:	4798      	blx	r3
		dev->callbacks.complete(dev);
    692a:	687b      	ldr	r3, [r7, #4]
    692c:	691b      	ldr	r3, [r3, #16]
    692e:	6878      	ldr	r0, [r7, #4]
    6930:	4798      	blx	r3
}
    6932:	e011      	b.n	6958 <_spi_handler+0x90>
	} else if (st & SERCOM_SPI_INTFLAG_ERROR) {
    6934:	f997 300b 	ldrsb.w	r3, [r7, #11]
    6938:	2b00      	cmp	r3, #0
    693a:	da0d      	bge.n	6958 <_spi_handler+0x90>
		hri_sercomspi_clear_STATUS_reg(hw, SERCOM_SPI_STATUS_BUFOVF);
    693c:	2104      	movs	r1, #4
    693e:	68f8      	ldr	r0, [r7, #12]
    6940:	4b0a      	ldr	r3, [pc, #40]	; (696c <_spi_handler+0xa4>)
    6942:	4798      	blx	r3
		hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_ERROR);
    6944:	2180      	movs	r1, #128	; 0x80
    6946:	68f8      	ldr	r0, [r7, #12]
    6948:	4b07      	ldr	r3, [pc, #28]	; (6968 <_spi_handler+0xa0>)
    694a:	4798      	blx	r3
		dev->callbacks.err(dev, ERR_OVERFLOW);
    694c:	687b      	ldr	r3, [r7, #4]
    694e:	695b      	ldr	r3, [r3, #20]
    6950:	f06f 0112 	mvn.w	r1, #18
    6954:	6878      	ldr	r0, [r7, #4]
    6956:	4798      	blx	r3
}
    6958:	bf00      	nop
    695a:	3710      	adds	r7, #16
    695c:	46bd      	mov	sp, r7
    695e:	bd80      	pop	{r7, pc}
    6960:	000058f9 	.word	0x000058f9
    6964:	000059cd 	.word	0x000059cd
    6968:	00005913 	.word	0x00005913
    696c:	00005dfd 	.word	0x00005dfd

00006970 <SERCOM1_0_Handler>:

/**
 * \internal Sercom interrupt handler
 */
void SERCOM1_0_Handler(void)
{
    6970:	b580      	push	{r7, lr}
    6972:	af00      	add	r7, sp, #0
	_spi_handler(_sercom1_dev);
    6974:	4b03      	ldr	r3, [pc, #12]	; (6984 <SERCOM1_0_Handler+0x14>)
    6976:	681b      	ldr	r3, [r3, #0]
    6978:	4618      	mov	r0, r3
    697a:	4b03      	ldr	r3, [pc, #12]	; (6988 <SERCOM1_0_Handler+0x18>)
    697c:	4798      	blx	r3
}
    697e:	bf00      	nop
    6980:	bd80      	pop	{r7, pc}
    6982:	bf00      	nop
    6984:	20000774 	.word	0x20000774
    6988:	000068c9 	.word	0x000068c9

0000698c <SERCOM1_1_Handler>:
/**
 * \internal Sercom interrupt handler
 */
void SERCOM1_1_Handler(void)
{
    698c:	b580      	push	{r7, lr}
    698e:	af00      	add	r7, sp, #0
	_spi_handler(_sercom1_dev);
    6990:	4b03      	ldr	r3, [pc, #12]	; (69a0 <SERCOM1_1_Handler+0x14>)
    6992:	681b      	ldr	r3, [r3, #0]
    6994:	4618      	mov	r0, r3
    6996:	4b03      	ldr	r3, [pc, #12]	; (69a4 <SERCOM1_1_Handler+0x18>)
    6998:	4798      	blx	r3
}
    699a:	bf00      	nop
    699c:	bd80      	pop	{r7, pc}
    699e:	bf00      	nop
    69a0:	20000774 	.word	0x20000774
    69a4:	000068c9 	.word	0x000068c9

000069a8 <SERCOM1_2_Handler>:
/**
 * \internal Sercom interrupt handler
 */
void SERCOM1_2_Handler(void)
{
    69a8:	b580      	push	{r7, lr}
    69aa:	af00      	add	r7, sp, #0
	_spi_handler(_sercom1_dev);
    69ac:	4b03      	ldr	r3, [pc, #12]	; (69bc <SERCOM1_2_Handler+0x14>)
    69ae:	681b      	ldr	r3, [r3, #0]
    69b0:	4618      	mov	r0, r3
    69b2:	4b03      	ldr	r3, [pc, #12]	; (69c0 <SERCOM1_2_Handler+0x18>)
    69b4:	4798      	blx	r3
}
    69b6:	bf00      	nop
    69b8:	bd80      	pop	{r7, pc}
    69ba:	bf00      	nop
    69bc:	20000774 	.word	0x20000774
    69c0:	000068c9 	.word	0x000068c9

000069c4 <SERCOM1_3_Handler>:
/**
 * \internal Sercom interrupt handler
 */
void SERCOM1_3_Handler(void)
{
    69c4:	b580      	push	{r7, lr}
    69c6:	af00      	add	r7, sp, #0
	_spi_handler(_sercom1_dev);
    69c8:	4b03      	ldr	r3, [pc, #12]	; (69d8 <SERCOM1_3_Handler+0x14>)
    69ca:	681b      	ldr	r3, [r3, #0]
    69cc:	4618      	mov	r0, r3
    69ce:	4b03      	ldr	r3, [pc, #12]	; (69dc <SERCOM1_3_Handler+0x18>)
    69d0:	4798      	blx	r3
}
    69d2:	bf00      	nop
    69d4:	bd80      	pop	{r7, pc}
    69d6:	bf00      	nop
    69d8:	20000774 	.word	0x20000774
    69dc:	000068c9 	.word	0x000068c9

000069e0 <SERCOM5_0_Handler>:

/**
 * \internal Sercom interrupt handler
 */
void SERCOM5_0_Handler(void)
{
    69e0:	b580      	push	{r7, lr}
    69e2:	af00      	add	r7, sp, #0
	_sercom_i2c_m_irq_handler(_sercom5_dev);
    69e4:	4b03      	ldr	r3, [pc, #12]	; (69f4 <SERCOM5_0_Handler+0x14>)
    69e6:	681b      	ldr	r3, [r3, #0]
    69e8:	4618      	mov	r0, r3
    69ea:	4b03      	ldr	r3, [pc, #12]	; (69f8 <SERCOM5_0_Handler+0x18>)
    69ec:	4798      	blx	r3
}
    69ee:	bf00      	nop
    69f0:	bd80      	pop	{r7, pc}
    69f2:	bf00      	nop
    69f4:	20000778 	.word	0x20000778
    69f8:	00006195 	.word	0x00006195

000069fc <SERCOM5_1_Handler>:
/**
 * \internal Sercom interrupt handler
 */
void SERCOM5_1_Handler(void)
{
    69fc:	b580      	push	{r7, lr}
    69fe:	af00      	add	r7, sp, #0
	_sercom_i2c_m_irq_handler(_sercom5_dev);
    6a00:	4b03      	ldr	r3, [pc, #12]	; (6a10 <SERCOM5_1_Handler+0x14>)
    6a02:	681b      	ldr	r3, [r3, #0]
    6a04:	4618      	mov	r0, r3
    6a06:	4b03      	ldr	r3, [pc, #12]	; (6a14 <SERCOM5_1_Handler+0x18>)
    6a08:	4798      	blx	r3
}
    6a0a:	bf00      	nop
    6a0c:	bd80      	pop	{r7, pc}
    6a0e:	bf00      	nop
    6a10:	20000778 	.word	0x20000778
    6a14:	00006195 	.word	0x00006195

00006a18 <SERCOM5_2_Handler>:
/**
 * \internal Sercom interrupt handler
 */
void SERCOM5_2_Handler(void)
{
    6a18:	b580      	push	{r7, lr}
    6a1a:	af00      	add	r7, sp, #0
	_sercom_i2c_m_irq_handler(_sercom5_dev);
    6a1c:	4b03      	ldr	r3, [pc, #12]	; (6a2c <SERCOM5_2_Handler+0x14>)
    6a1e:	681b      	ldr	r3, [r3, #0]
    6a20:	4618      	mov	r0, r3
    6a22:	4b03      	ldr	r3, [pc, #12]	; (6a30 <SERCOM5_2_Handler+0x18>)
    6a24:	4798      	blx	r3
}
    6a26:	bf00      	nop
    6a28:	bd80      	pop	{r7, pc}
    6a2a:	bf00      	nop
    6a2c:	20000778 	.word	0x20000778
    6a30:	00006195 	.word	0x00006195

00006a34 <SERCOM5_3_Handler>:
/**
 * \internal Sercom interrupt handler
 */
void SERCOM5_3_Handler(void)
{
    6a34:	b580      	push	{r7, lr}
    6a36:	af00      	add	r7, sp, #0
	_sercom_i2c_m_irq_handler(_sercom5_dev);
    6a38:	4b03      	ldr	r3, [pc, #12]	; (6a48 <SERCOM5_3_Handler+0x14>)
    6a3a:	681b      	ldr	r3, [r3, #0]
    6a3c:	4618      	mov	r0, r3
    6a3e:	4b03      	ldr	r3, [pc, #12]	; (6a4c <SERCOM5_3_Handler+0x18>)
    6a40:	4798      	blx	r3
}
    6a42:	bf00      	nop
    6a44:	bd80      	pop	{r7, pc}
    6a46:	bf00      	nop
    6a48:	20000778 	.word	0x20000778
    6a4c:	00006195 	.word	0x00006195

00006a50 <_spi_m_sync_init>:

int32_t _spi_m_sync_init(struct _spi_m_sync_dev *dev, void *const hw)
{
    6a50:	b580      	push	{r7, lr}
    6a52:	b084      	sub	sp, #16
    6a54:	af00      	add	r7, sp, #0
    6a56:	6078      	str	r0, [r7, #4]
    6a58:	6039      	str	r1, [r7, #0]
	const struct sercomspi_regs_cfg *regs = _spi_get_regs((uint32_t)hw);
    6a5a:	683b      	ldr	r3, [r7, #0]
    6a5c:	4618      	mov	r0, r3
    6a5e:	4b35      	ldr	r3, [pc, #212]	; (6b34 <_spi_m_sync_init+0xe4>)
    6a60:	4798      	blx	r3
    6a62:	60f8      	str	r0, [r7, #12]

	ASSERT(dev && hw);
    6a64:	687b      	ldr	r3, [r7, #4]
    6a66:	2b00      	cmp	r3, #0
    6a68:	d004      	beq.n	6a74 <_spi_m_sync_init+0x24>
    6a6a:	683b      	ldr	r3, [r7, #0]
    6a6c:	2b00      	cmp	r3, #0
    6a6e:	d001      	beq.n	6a74 <_spi_m_sync_init+0x24>
    6a70:	2301      	movs	r3, #1
    6a72:	e000      	b.n	6a76 <_spi_m_sync_init+0x26>
    6a74:	2300      	movs	r3, #0
    6a76:	f003 0301 	and.w	r3, r3, #1
    6a7a:	b2db      	uxtb	r3, r3
    6a7c:	f640 12c6 	movw	r2, #2502	; 0x9c6
    6a80:	492d      	ldr	r1, [pc, #180]	; (6b38 <_spi_m_sync_init+0xe8>)
    6a82:	4618      	mov	r0, r3
    6a84:	4b2d      	ldr	r3, [pc, #180]	; (6b3c <_spi_m_sync_init+0xec>)
    6a86:	4798      	blx	r3

	if (regs == NULL) {
    6a88:	68fb      	ldr	r3, [r7, #12]
    6a8a:	2b00      	cmp	r3, #0
    6a8c:	d102      	bne.n	6a94 <_spi_m_sync_init+0x44>
		return ERR_INVALID_ARG;
    6a8e:	f06f 030c 	mvn.w	r3, #12
    6a92:	e04a      	b.n	6b2a <_spi_m_sync_init+0xda>
	}

	if (!hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    6a94:	2101      	movs	r1, #1
    6a96:	6838      	ldr	r0, [r7, #0]
    6a98:	4b29      	ldr	r3, [pc, #164]	; (6b40 <_spi_m_sync_init+0xf0>)
    6a9a:	4798      	blx	r3
    6a9c:	4603      	mov	r3, r0
    6a9e:	f083 0301 	eor.w	r3, r3, #1
    6aa2:	b2db      	uxtb	r3, r3
    6aa4:	2b00      	cmp	r3, #0
    6aa6:	d019      	beq.n	6adc <_spi_m_sync_init+0x8c>
		uint32_t mode = regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk;
    6aa8:	68fb      	ldr	r3, [r7, #12]
    6aaa:	681b      	ldr	r3, [r3, #0]
    6aac:	f003 031c 	and.w	r3, r3, #28
    6ab0:	60bb      	str	r3, [r7, #8]
		if (hri_sercomspi_get_CTRLA_reg(hw, SERCOM_SPI_CTRLA_ENABLE)) {
    6ab2:	2102      	movs	r1, #2
    6ab4:	6838      	ldr	r0, [r7, #0]
    6ab6:	4b23      	ldr	r3, [pc, #140]	; (6b44 <_spi_m_sync_init+0xf4>)
    6ab8:	4798      	blx	r3
    6aba:	4603      	mov	r3, r0
    6abc:	2b00      	cmp	r3, #0
    6abe:	d006      	beq.n	6ace <_spi_m_sync_init+0x7e>
			hri_sercomspi_clear_CTRLA_ENABLE_bit(hw);
    6ac0:	6838      	ldr	r0, [r7, #0]
    6ac2:	4b21      	ldr	r3, [pc, #132]	; (6b48 <_spi_m_sync_init+0xf8>)
    6ac4:	4798      	blx	r3
			hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_ENABLE);
    6ac6:	2102      	movs	r1, #2
    6ac8:	6838      	ldr	r0, [r7, #0]
    6aca:	4b20      	ldr	r3, [pc, #128]	; (6b4c <_spi_m_sync_init+0xfc>)
    6acc:	4798      	blx	r3
		}
		hri_sercomspi_write_CTRLA_reg(hw, SERCOM_SPI_CTRLA_SWRST | mode);
    6ace:	68bb      	ldr	r3, [r7, #8]
    6ad0:	f043 0301 	orr.w	r3, r3, #1
    6ad4:	4619      	mov	r1, r3
    6ad6:	6838      	ldr	r0, [r7, #0]
    6ad8:	4b1d      	ldr	r3, [pc, #116]	; (6b50 <_spi_m_sync_init+0x100>)
    6ada:	4798      	blx	r3
	}
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST);
    6adc:	2101      	movs	r1, #1
    6ade:	6838      	ldr	r0, [r7, #0]
    6ae0:	4b1a      	ldr	r3, [pc, #104]	; (6b4c <_spi_m_sync_init+0xfc>)
    6ae2:	4798      	blx	r3

	dev->prvt = hw;
    6ae4:	687b      	ldr	r3, [r7, #4]
    6ae6:	683a      	ldr	r2, [r7, #0]
    6ae8:	601a      	str	r2, [r3, #0]

	if ((regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk) == SERCOM_USART_CTRLA_MODE_SPI_SLAVE) {
    6aea:	68fb      	ldr	r3, [r7, #12]
    6aec:	681b      	ldr	r3, [r3, #0]
    6aee:	f003 031c 	and.w	r3, r3, #28
    6af2:	2b08      	cmp	r3, #8
    6af4:	d104      	bne.n	6b00 <_spi_m_sync_init+0xb0>
		_spi_load_regs_slave(hw, regs);
    6af6:	68f9      	ldr	r1, [r7, #12]
    6af8:	6838      	ldr	r0, [r7, #0]
    6afa:	4b16      	ldr	r3, [pc, #88]	; (6b54 <_spi_m_sync_init+0x104>)
    6afc:	4798      	blx	r3
    6afe:	e003      	b.n	6b08 <_spi_m_sync_init+0xb8>
	} else {
		_spi_load_regs_master(hw, regs);
    6b00:	68f9      	ldr	r1, [r7, #12]
    6b02:	6838      	ldr	r0, [r7, #0]
    6b04:	4b14      	ldr	r3, [pc, #80]	; (6b58 <_spi_m_sync_init+0x108>)
    6b06:	4798      	blx	r3
	}

	/* Load character size from default hardware configuration */
	dev->char_size = ((regs->ctrlb & SERCOM_SPI_CTRLB_CHSIZE_Msk) == 0) ? 1 : 2;
    6b08:	68fb      	ldr	r3, [r7, #12]
    6b0a:	685b      	ldr	r3, [r3, #4]
    6b0c:	f003 0307 	and.w	r3, r3, #7
    6b10:	2b00      	cmp	r3, #0
    6b12:	d101      	bne.n	6b18 <_spi_m_sync_init+0xc8>
    6b14:	2201      	movs	r2, #1
    6b16:	e000      	b.n	6b1a <_spi_m_sync_init+0xca>
    6b18:	2202      	movs	r2, #2
    6b1a:	687b      	ldr	r3, [r7, #4]
    6b1c:	711a      	strb	r2, [r3, #4]

	dev->dummy_byte = regs->dummy_byte;
    6b1e:	68fb      	ldr	r3, [r7, #12]
    6b20:	89db      	ldrh	r3, [r3, #14]
    6b22:	b29a      	uxth	r2, r3
    6b24:	687b      	ldr	r3, [r7, #4]
    6b26:	80da      	strh	r2, [r3, #6]

	return ERR_NONE;
    6b28:	2300      	movs	r3, #0
}
    6b2a:	4618      	mov	r0, r3
    6b2c:	3710      	adds	r7, #16
    6b2e:	46bd      	mov	sp, r7
    6b30:	bd80      	pop	{r7, pc}
    6b32:	bf00      	nop
    6b34:	0000686d 	.word	0x0000686d
    6b38:	0000ce2c 	.word	0x0000ce2c
    6b3c:	00003481 	.word	0x00003481
    6b40:	0000583d 	.word	0x0000583d
    6b44:	00005b1d 	.word	0x00005b1d
    6b48:	00005af5 	.word	0x00005af5
    6b4c:	00005819 	.word	0x00005819
    6b50:	00005b4d 	.word	0x00005b4d
    6b54:	000067c1 	.word	0x000067c1
    6b58:	0000672d 	.word	0x0000672d

00006b5c <_spi_m_async_init>:
{
	return _spi_m_sync_init(dev, hw);
}

int32_t _spi_m_async_init(struct _spi_async_dev *dev, void *const hw)
{
    6b5c:	b580      	push	{r7, lr}
    6b5e:	b086      	sub	sp, #24
    6b60:	af00      	add	r7, sp, #0
    6b62:	6078      	str	r0, [r7, #4]
    6b64:	6039      	str	r1, [r7, #0]
	struct _spi_async_dev *spid = dev;
    6b66:	687b      	ldr	r3, [r7, #4]
    6b68:	60fb      	str	r3, [r7, #12]
	/* Do hardware initialize. */
	int32_t rc = _spi_m_sync_init((struct _spi_m_sync_dev *)dev, hw);
    6b6a:	6839      	ldr	r1, [r7, #0]
    6b6c:	6878      	ldr	r0, [r7, #4]
    6b6e:	4b1a      	ldr	r3, [pc, #104]	; (6bd8 <_spi_m_async_init+0x7c>)
    6b70:	4798      	blx	r3
    6b72:	60b8      	str	r0, [r7, #8]

	if (rc < 0) {
    6b74:	68bb      	ldr	r3, [r7, #8]
    6b76:	2b00      	cmp	r3, #0
    6b78:	da01      	bge.n	6b7e <_spi_m_async_init+0x22>
		return rc;
    6b7a:	68bb      	ldr	r3, [r7, #8]
    6b7c:	e028      	b.n	6bd0 <_spi_m_async_init+0x74>
	}

	_sercom_init_irq_param(hw, (void *)dev);
    6b7e:	6879      	ldr	r1, [r7, #4]
    6b80:	6838      	ldr	r0, [r7, #0]
    6b82:	4b16      	ldr	r3, [pc, #88]	; (6bdc <_spi_m_async_init+0x80>)
    6b84:	4798      	blx	r3
	/* Initialize callbacks: must use them */
	spid->callbacks.complete = NULL;
    6b86:	68fb      	ldr	r3, [r7, #12]
    6b88:	2200      	movs	r2, #0
    6b8a:	611a      	str	r2, [r3, #16]
	spid->callbacks.rx       = NULL;
    6b8c:	68fb      	ldr	r3, [r7, #12]
    6b8e:	2200      	movs	r2, #0
    6b90:	60da      	str	r2, [r3, #12]
	spid->callbacks.tx       = NULL;
    6b92:	68fb      	ldr	r3, [r7, #12]
    6b94:	2200      	movs	r2, #0
    6b96:	609a      	str	r2, [r3, #8]
	uint8_t irq              = _sercom_get_irq_num(hw);
    6b98:	6838      	ldr	r0, [r7, #0]
    6b9a:	4b11      	ldr	r3, [pc, #68]	; (6be0 <_spi_m_async_init+0x84>)
    6b9c:	4798      	blx	r3
    6b9e:	4603      	mov	r3, r0
    6ba0:	75fb      	strb	r3, [r7, #23]
	for (uint32_t i = 0; i < 4; i++) {
    6ba2:	2300      	movs	r3, #0
    6ba4:	613b      	str	r3, [r7, #16]
    6ba6:	e00f      	b.n	6bc8 <_spi_m_async_init+0x6c>
		NVIC_DisableIRQ((IRQn_Type)irq);
    6ba8:	7dfb      	ldrb	r3, [r7, #23]
    6baa:	b21b      	sxth	r3, r3
    6bac:	4618      	mov	r0, r3
    6bae:	4b0d      	ldr	r3, [pc, #52]	; (6be4 <_spi_m_async_init+0x88>)
    6bb0:	4798      	blx	r3
		NVIC_ClearPendingIRQ((IRQn_Type)irq);
    6bb2:	7dfb      	ldrb	r3, [r7, #23]
    6bb4:	b21b      	sxth	r3, r3
    6bb6:	4618      	mov	r0, r3
    6bb8:	4b0b      	ldr	r3, [pc, #44]	; (6be8 <_spi_m_async_init+0x8c>)
    6bba:	4798      	blx	r3
		irq++;
    6bbc:	7dfb      	ldrb	r3, [r7, #23]
    6bbe:	3301      	adds	r3, #1
    6bc0:	75fb      	strb	r3, [r7, #23]
	for (uint32_t i = 0; i < 4; i++) {
    6bc2:	693b      	ldr	r3, [r7, #16]
    6bc4:	3301      	adds	r3, #1
    6bc6:	613b      	str	r3, [r7, #16]
    6bc8:	693b      	ldr	r3, [r7, #16]
    6bca:	2b03      	cmp	r3, #3
    6bcc:	d9ec      	bls.n	6ba8 <_spi_m_async_init+0x4c>
	}

	return ERR_NONE;
    6bce:	2300      	movs	r3, #0
}
    6bd0:	4618      	mov	r0, r3
    6bd2:	3718      	adds	r7, #24
    6bd4:	46bd      	mov	sp, r7
    6bd6:	bd80      	pop	{r7, pc}
    6bd8:	00006a51 	.word	0x00006a51
    6bdc:	00005e9d 	.word	0x00005e9d
    6be0:	00006299 	.word	0x00006299
    6be4:	0000574d 	.word	0x0000574d
    6be8:	00005791 	.word	0x00005791

00006bec <_spi_m_sync_enable>:
{
	return _spi_deinit(dev->prvt);
}

int32_t _spi_m_sync_enable(struct _spi_m_sync_dev *dev)
{
    6bec:	b580      	push	{r7, lr}
    6bee:	b082      	sub	sp, #8
    6bf0:	af00      	add	r7, sp, #0
    6bf2:	6078      	str	r0, [r7, #4]
	ASSERT(dev && dev->prvt);
    6bf4:	687b      	ldr	r3, [r7, #4]
    6bf6:	2b00      	cmp	r3, #0
    6bf8:	d005      	beq.n	6c06 <_spi_m_sync_enable+0x1a>
    6bfa:	687b      	ldr	r3, [r7, #4]
    6bfc:	681b      	ldr	r3, [r3, #0]
    6bfe:	2b00      	cmp	r3, #0
    6c00:	d001      	beq.n	6c06 <_spi_m_sync_enable+0x1a>
    6c02:	2301      	movs	r3, #1
    6c04:	e000      	b.n	6c08 <_spi_m_sync_enable+0x1c>
    6c06:	2300      	movs	r3, #0
    6c08:	f003 0301 	and.w	r3, r3, #1
    6c0c:	b2db      	uxtb	r3, r3
    6c0e:	f640 2225 	movw	r2, #2597	; 0xa25
    6c12:	4907      	ldr	r1, [pc, #28]	; (6c30 <_spi_m_sync_enable+0x44>)
    6c14:	4618      	mov	r0, r3
    6c16:	4b07      	ldr	r3, [pc, #28]	; (6c34 <_spi_m_sync_enable+0x48>)
    6c18:	4798      	blx	r3

	return _spi_sync_enable(dev->prvt);
    6c1a:	687b      	ldr	r3, [r7, #4]
    6c1c:	681b      	ldr	r3, [r3, #0]
    6c1e:	4618      	mov	r0, r3
    6c20:	4b05      	ldr	r3, [pc, #20]	; (6c38 <_spi_m_sync_enable+0x4c>)
    6c22:	4798      	blx	r3
    6c24:	4603      	mov	r3, r0
}
    6c26:	4618      	mov	r0, r3
    6c28:	3708      	adds	r7, #8
    6c2a:	46bd      	mov	sp, r7
    6c2c:	bd80      	pop	{r7, pc}
    6c2e:	bf00      	nop
    6c30:	0000ce2c 	.word	0x0000ce2c
    6c34:	00003481 	.word	0x00003481
    6c38:	000066c5 	.word	0x000066c5

00006c3c <_spi_m_sync_disable>:

	return _spi_async_enable(dev->prvt);
}

int32_t _spi_m_sync_disable(struct _spi_m_sync_dev *dev)
{
    6c3c:	b580      	push	{r7, lr}
    6c3e:	b082      	sub	sp, #8
    6c40:	af00      	add	r7, sp, #0
    6c42:	6078      	str	r0, [r7, #4]
	ASSERT(dev && dev->prvt);
    6c44:	687b      	ldr	r3, [r7, #4]
    6c46:	2b00      	cmp	r3, #0
    6c48:	d005      	beq.n	6c56 <_spi_m_sync_disable+0x1a>
    6c4a:	687b      	ldr	r3, [r7, #4]
    6c4c:	681b      	ldr	r3, [r3, #0]
    6c4e:	2b00      	cmp	r3, #0
    6c50:	d001      	beq.n	6c56 <_spi_m_sync_disable+0x1a>
    6c52:	2301      	movs	r3, #1
    6c54:	e000      	b.n	6c58 <_spi_m_sync_disable+0x1c>
    6c56:	2300      	movs	r3, #0
    6c58:	f003 0301 	and.w	r3, r3, #1
    6c5c:	b2db      	uxtb	r3, r3
    6c5e:	f640 2241 	movw	r2, #2625	; 0xa41
    6c62:	4907      	ldr	r1, [pc, #28]	; (6c80 <_spi_m_sync_disable+0x44>)
    6c64:	4618      	mov	r0, r3
    6c66:	4b07      	ldr	r3, [pc, #28]	; (6c84 <_spi_m_sync_disable+0x48>)
    6c68:	4798      	blx	r3

	return _spi_sync_disable(dev->prvt);
    6c6a:	687b      	ldr	r3, [r7, #4]
    6c6c:	681b      	ldr	r3, [r3, #0]
    6c6e:	4618      	mov	r0, r3
    6c70:	4b05      	ldr	r3, [pc, #20]	; (6c88 <_spi_m_sync_disable+0x4c>)
    6c72:	4798      	blx	r3
    6c74:	4603      	mov	r3, r0
}
    6c76:	4618      	mov	r0, r3
    6c78:	3708      	adds	r7, #8
    6c7a:	46bd      	mov	sp, r7
    6c7c:	bd80      	pop	{r7, pc}
    6c7e:	bf00      	nop
    6c80:	0000ce2c 	.word	0x0000ce2c
    6c84:	00003481 	.word	0x00003481
    6c88:	000066f9 	.word	0x000066f9

00006c8c <_spi_wait_bus_idle>:
	return _spi_set_data_order(dev->prvt, dord);
}

/** Wait until SPI bus idle. */
static inline void _spi_wait_bus_idle(void *const hw)
{
    6c8c:	b580      	push	{r7, lr}
    6c8e:	b082      	sub	sp, #8
    6c90:	af00      	add	r7, sp, #0
    6c92:	6078      	str	r0, [r7, #4]
	while (!(hri_sercomspi_get_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC | SERCOM_SPI_INTFLAG_DRE))) {
    6c94:	bf00      	nop
    6c96:	2103      	movs	r1, #3
    6c98:	6878      	ldr	r0, [r7, #4]
    6c9a:	4b06      	ldr	r3, [pc, #24]	; (6cb4 <_spi_wait_bus_idle+0x28>)
    6c9c:	4798      	blx	r3
    6c9e:	4603      	mov	r3, r0
    6ca0:	2b00      	cmp	r3, #0
    6ca2:	d0f8      	beq.n	6c96 <_spi_wait_bus_idle+0xa>
		;
	}
	hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC | SERCOM_SPI_INTFLAG_DRE);
    6ca4:	2103      	movs	r1, #3
    6ca6:	6878      	ldr	r0, [r7, #4]
    6ca8:	4b03      	ldr	r3, [pc, #12]	; (6cb8 <_spi_wait_bus_idle+0x2c>)
    6caa:	4798      	blx	r3
}
    6cac:	bf00      	nop
    6cae:	3708      	adds	r7, #8
    6cb0:	46bd      	mov	sp, r7
    6cb2:	bd80      	pop	{r7, pc}
    6cb4:	000058d1 	.word	0x000058d1
    6cb8:	00005913 	.word	0x00005913

00006cbc <_spi_rx_check_and_receive>:
	uint8_t char_size;
};

/** Check interrupt flag of RXC and update transaction runtime information. */
static inline bool _spi_rx_check_and_receive(void *const hw, const uint32_t iflag, struct _spi_trans_ctrl *ctrl)
{
    6cbc:	b580      	push	{r7, lr}
    6cbe:	b086      	sub	sp, #24
    6cc0:	af00      	add	r7, sp, #0
    6cc2:	60f8      	str	r0, [r7, #12]
    6cc4:	60b9      	str	r1, [r7, #8]
    6cc6:	607a      	str	r2, [r7, #4]
	uint32_t data;

	if (!(iflag & SERCOM_SPI_INTFLAG_RXC)) {
    6cc8:	68bb      	ldr	r3, [r7, #8]
    6cca:	f003 0304 	and.w	r3, r3, #4
    6cce:	2b00      	cmp	r3, #0
    6cd0:	d101      	bne.n	6cd6 <_spi_rx_check_and_receive+0x1a>
		return false;
    6cd2:	2300      	movs	r3, #0
    6cd4:	e022      	b.n	6d1c <_spi_rx_check_and_receive+0x60>
	}

	data = hri_sercomspi_read_DATA_reg(hw);
    6cd6:	68f8      	ldr	r0, [r7, #12]
    6cd8:	4b12      	ldr	r3, [pc, #72]	; (6d24 <_spi_rx_check_and_receive+0x68>)
    6cda:	4798      	blx	r3
    6cdc:	6178      	str	r0, [r7, #20]

	if (ctrl->rxbuf) {
    6cde:	687b      	ldr	r3, [r7, #4]
    6ce0:	685b      	ldr	r3, [r3, #4]
    6ce2:	2b00      	cmp	r3, #0
    6ce4:	d014      	beq.n	6d10 <_spi_rx_check_and_receive+0x54>
		*ctrl->rxbuf++ = (uint8_t)data;
    6ce6:	687b      	ldr	r3, [r7, #4]
    6ce8:	685b      	ldr	r3, [r3, #4]
    6cea:	1c59      	adds	r1, r3, #1
    6cec:	687a      	ldr	r2, [r7, #4]
    6cee:	6051      	str	r1, [r2, #4]
    6cf0:	697a      	ldr	r2, [r7, #20]
    6cf2:	b2d2      	uxtb	r2, r2
    6cf4:	701a      	strb	r2, [r3, #0]

		if (ctrl->char_size > 1) {
    6cf6:	687b      	ldr	r3, [r7, #4]
    6cf8:	7c1b      	ldrb	r3, [r3, #16]
    6cfa:	2b01      	cmp	r3, #1
    6cfc:	d908      	bls.n	6d10 <_spi_rx_check_and_receive+0x54>
			*ctrl->rxbuf++ = (uint8_t)(data >> 8);
    6cfe:	687b      	ldr	r3, [r7, #4]
    6d00:	685b      	ldr	r3, [r3, #4]
    6d02:	1c59      	adds	r1, r3, #1
    6d04:	687a      	ldr	r2, [r7, #4]
    6d06:	6051      	str	r1, [r2, #4]
    6d08:	697a      	ldr	r2, [r7, #20]
    6d0a:	0a12      	lsrs	r2, r2, #8
    6d0c:	b2d2      	uxtb	r2, r2
    6d0e:	701a      	strb	r2, [r3, #0]
		}
	}

	ctrl->rxcnt++;
    6d10:	687b      	ldr	r3, [r7, #4]
    6d12:	68db      	ldr	r3, [r3, #12]
    6d14:	1c5a      	adds	r2, r3, #1
    6d16:	687b      	ldr	r3, [r7, #4]
    6d18:	60da      	str	r2, [r3, #12]

	return true;
    6d1a:	2301      	movs	r3, #1
}
    6d1c:	4618      	mov	r0, r3
    6d1e:	3718      	adds	r7, #24
    6d20:	46bd      	mov	sp, r7
    6d22:	bd80      	pop	{r7, pc}
    6d24:	00005dc5 	.word	0x00005dc5

00006d28 <_spi_tx_check_and_send>:

/** Check interrupt flag of DRE and update transaction runtime information. */
static inline void _spi_tx_check_and_send(void *const hw, const uint32_t iflag, struct _spi_trans_ctrl *ctrl,
                                          uint16_t dummy)
{
    6d28:	b580      	push	{r7, lr}
    6d2a:	b086      	sub	sp, #24
    6d2c:	af00      	add	r7, sp, #0
    6d2e:	60f8      	str	r0, [r7, #12]
    6d30:	60b9      	str	r1, [r7, #8]
    6d32:	607a      	str	r2, [r7, #4]
    6d34:	807b      	strh	r3, [r7, #2]
	uint32_t data;

	if (!(SERCOM_SPI_INTFLAG_DRE & iflag)) {
    6d36:	68bb      	ldr	r3, [r7, #8]
    6d38:	f003 0301 	and.w	r3, r3, #1
    6d3c:	2b00      	cmp	r3, #0
    6d3e:	d028      	beq.n	6d92 <_spi_tx_check_and_send+0x6a>
		return;
	}

	if (ctrl->txbuf) {
    6d40:	687b      	ldr	r3, [r7, #4]
    6d42:	681b      	ldr	r3, [r3, #0]
    6d44:	2b00      	cmp	r3, #0
    6d46:	d018      	beq.n	6d7a <_spi_tx_check_and_send+0x52>
		data = *ctrl->txbuf++;
    6d48:	687b      	ldr	r3, [r7, #4]
    6d4a:	681b      	ldr	r3, [r3, #0]
    6d4c:	1c59      	adds	r1, r3, #1
    6d4e:	687a      	ldr	r2, [r7, #4]
    6d50:	6011      	str	r1, [r2, #0]
    6d52:	781b      	ldrb	r3, [r3, #0]
    6d54:	617b      	str	r3, [r7, #20]

		if (ctrl->char_size > 1) {
    6d56:	687b      	ldr	r3, [r7, #4]
    6d58:	7c1b      	ldrb	r3, [r3, #16]
    6d5a:	2b01      	cmp	r3, #1
    6d5c:	d90f      	bls.n	6d7e <_spi_tx_check_and_send+0x56>
			data |= (*ctrl->txbuf) << 8;
    6d5e:	687b      	ldr	r3, [r7, #4]
    6d60:	681b      	ldr	r3, [r3, #0]
    6d62:	781b      	ldrb	r3, [r3, #0]
    6d64:	021b      	lsls	r3, r3, #8
    6d66:	461a      	mov	r2, r3
    6d68:	697b      	ldr	r3, [r7, #20]
    6d6a:	4313      	orrs	r3, r2
    6d6c:	617b      	str	r3, [r7, #20]
			ctrl->txbuf++;
    6d6e:	687b      	ldr	r3, [r7, #4]
    6d70:	681b      	ldr	r3, [r3, #0]
    6d72:	1c5a      	adds	r2, r3, #1
    6d74:	687b      	ldr	r3, [r7, #4]
    6d76:	601a      	str	r2, [r3, #0]
    6d78:	e001      	b.n	6d7e <_spi_tx_check_and_send+0x56>
		}
	} else {
		data = dummy;
    6d7a:	887b      	ldrh	r3, [r7, #2]
    6d7c:	617b      	str	r3, [r7, #20]
	}

	ctrl->txcnt++;
    6d7e:	687b      	ldr	r3, [r7, #4]
    6d80:	689b      	ldr	r3, [r3, #8]
    6d82:	1c5a      	adds	r2, r3, #1
    6d84:	687b      	ldr	r3, [r7, #4]
    6d86:	609a      	str	r2, [r3, #8]
	hri_sercomspi_write_DATA_reg(hw, data);
    6d88:	6979      	ldr	r1, [r7, #20]
    6d8a:	68f8      	ldr	r0, [r7, #12]
    6d8c:	4b03      	ldr	r3, [pc, #12]	; (6d9c <_spi_tx_check_and_send+0x74>)
    6d8e:	4798      	blx	r3
    6d90:	e000      	b.n	6d94 <_spi_tx_check_and_send+0x6c>
		return;
    6d92:	bf00      	nop
}
    6d94:	3718      	adds	r7, #24
    6d96:	46bd      	mov	sp, r7
    6d98:	bd80      	pop	{r7, pc}
    6d9a:	bf00      	nop
    6d9c:	00005da9 	.word	0x00005da9

00006da0 <_spi_err_check>:

/** Check interrupt flag of ERROR and update transaction runtime information. */
static inline int32_t _spi_err_check(const uint32_t iflag, void *const hw)
{
    6da0:	b580      	push	{r7, lr}
    6da2:	b082      	sub	sp, #8
    6da4:	af00      	add	r7, sp, #0
    6da6:	6078      	str	r0, [r7, #4]
    6da8:	6039      	str	r1, [r7, #0]
	if (SERCOM_SPI_INTFLAG_ERROR & iflag) {
    6daa:	687b      	ldr	r3, [r7, #4]
    6dac:	f003 0380 	and.w	r3, r3, #128	; 0x80
    6db0:	2b00      	cmp	r3, #0
    6db2:	d00b      	beq.n	6dcc <_spi_err_check+0x2c>
		hri_sercomspi_clear_STATUS_reg(hw, ~0);
    6db4:	f64f 71ff 	movw	r1, #65535	; 0xffff
    6db8:	6838      	ldr	r0, [r7, #0]
    6dba:	4b07      	ldr	r3, [pc, #28]	; (6dd8 <_spi_err_check+0x38>)
    6dbc:	4798      	blx	r3
		hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_ERROR);
    6dbe:	2180      	movs	r1, #128	; 0x80
    6dc0:	6838      	ldr	r0, [r7, #0]
    6dc2:	4b06      	ldr	r3, [pc, #24]	; (6ddc <_spi_err_check+0x3c>)
    6dc4:	4798      	blx	r3
		return ERR_OVERFLOW;
    6dc6:	f06f 0312 	mvn.w	r3, #18
    6dca:	e000      	b.n	6dce <_spi_err_check+0x2e>
	}

	return ERR_NONE;
    6dcc:	2300      	movs	r3, #0
}
    6dce:	4618      	mov	r0, r3
    6dd0:	3708      	adds	r7, #8
    6dd2:	46bd      	mov	sp, r7
    6dd4:	bd80      	pop	{r7, pc}
    6dd6:	bf00      	nop
    6dd8:	00005dfd 	.word	0x00005dfd
    6ddc:	00005913 	.word	0x00005913

00006de0 <_spi_m_sync_trans>:

int32_t _spi_m_sync_trans(struct _spi_m_sync_dev *dev, const struct spi_msg *msg)
{
    6de0:	b590      	push	{r4, r7, lr}
    6de2:	b08b      	sub	sp, #44	; 0x2c
    6de4:	af00      	add	r7, sp, #0
    6de6:	6078      	str	r0, [r7, #4]
    6de8:	6039      	str	r1, [r7, #0]
	void *                 hw   = dev->prvt;
    6dea:	687b      	ldr	r3, [r7, #4]
    6dec:	681b      	ldr	r3, [r3, #0]
    6dee:	623b      	str	r3, [r7, #32]
	int32_t                rc   = 0;
    6df0:	2300      	movs	r3, #0
    6df2:	627b      	str	r3, [r7, #36]	; 0x24
	struct _spi_trans_ctrl ctrl = {msg->txbuf, msg->rxbuf, 0, 0, dev->char_size};
    6df4:	683b      	ldr	r3, [r7, #0]
    6df6:	681b      	ldr	r3, [r3, #0]
    6df8:	60bb      	str	r3, [r7, #8]
    6dfa:	683b      	ldr	r3, [r7, #0]
    6dfc:	685b      	ldr	r3, [r3, #4]
    6dfe:	60fb      	str	r3, [r7, #12]
    6e00:	2300      	movs	r3, #0
    6e02:	613b      	str	r3, [r7, #16]
    6e04:	2300      	movs	r3, #0
    6e06:	617b      	str	r3, [r7, #20]
    6e08:	687b      	ldr	r3, [r7, #4]
    6e0a:	791b      	ldrb	r3, [r3, #4]
    6e0c:	763b      	strb	r3, [r7, #24]

	ASSERT(dev && hw);
    6e0e:	687b      	ldr	r3, [r7, #4]
    6e10:	2b00      	cmp	r3, #0
    6e12:	d004      	beq.n	6e1e <_spi_m_sync_trans+0x3e>
    6e14:	6a3b      	ldr	r3, [r7, #32]
    6e16:	2b00      	cmp	r3, #0
    6e18:	d001      	beq.n	6e1e <_spi_m_sync_trans+0x3e>
    6e1a:	2301      	movs	r3, #1
    6e1c:	e000      	b.n	6e20 <_spi_m_sync_trans+0x40>
    6e1e:	2300      	movs	r3, #0
    6e20:	f003 0301 	and.w	r3, r3, #1
    6e24:	b2db      	uxtb	r3, r3
    6e26:	f640 322a 	movw	r2, #2858	; 0xb2a
    6e2a:	492b      	ldr	r1, [pc, #172]	; (6ed8 <_spi_m_sync_trans+0xf8>)
    6e2c:	4618      	mov	r0, r3
    6e2e:	4b2b      	ldr	r3, [pc, #172]	; (6edc <_spi_m_sync_trans+0xfc>)
    6e30:	4798      	blx	r3

	/* If settings are not applied (pending), we can not go on */
	if (hri_sercomspi_is_syncing(
    6e32:	2107      	movs	r1, #7
    6e34:	6a38      	ldr	r0, [r7, #32]
    6e36:	4b2a      	ldr	r3, [pc, #168]	; (6ee0 <_spi_m_sync_trans+0x100>)
    6e38:	4798      	blx	r3
    6e3a:	4603      	mov	r3, r0
    6e3c:	2b00      	cmp	r3, #0
    6e3e:	d002      	beq.n	6e46 <_spi_m_sync_trans+0x66>
	        hw, (SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE | SERCOM_SPI_SYNCBUSY_CTRLB))) {
		return ERR_BUSY;
    6e40:	f06f 0303 	mvn.w	r3, #3
    6e44:	e043      	b.n	6ece <_spi_m_sync_trans+0xee>
	}

	/* SPI must be enabled to start synchronous transfer */
	if (!hri_sercomspi_get_CTRLA_ENABLE_bit(hw)) {
    6e46:	6a38      	ldr	r0, [r7, #32]
    6e48:	4b26      	ldr	r3, [pc, #152]	; (6ee4 <_spi_m_sync_trans+0x104>)
    6e4a:	4798      	blx	r3
    6e4c:	4603      	mov	r3, r0
    6e4e:	f083 0301 	eor.w	r3, r3, #1
    6e52:	b2db      	uxtb	r3, r3
    6e54:	2b00      	cmp	r3, #0
    6e56:	d002      	beq.n	6e5e <_spi_m_sync_trans+0x7e>
		return ERR_NOT_INITIALIZED;
    6e58:	f06f 0313 	mvn.w	r3, #19
    6e5c:	e037      	b.n	6ece <_spi_m_sync_trans+0xee>
	}

	for (;;) {
		uint32_t iflag = hri_sercomspi_read_INTFLAG_reg(hw);
    6e5e:	6a38      	ldr	r0, [r7, #32]
    6e60:	4b21      	ldr	r3, [pc, #132]	; (6ee8 <_spi_m_sync_trans+0x108>)
    6e62:	4798      	blx	r3
    6e64:	4603      	mov	r3, r0
    6e66:	61fb      	str	r3, [r7, #28]

		if (!_spi_rx_check_and_receive(hw, iflag, &ctrl)) {
    6e68:	f107 0308 	add.w	r3, r7, #8
    6e6c:	461a      	mov	r2, r3
    6e6e:	69f9      	ldr	r1, [r7, #28]
    6e70:	6a38      	ldr	r0, [r7, #32]
    6e72:	4b1e      	ldr	r3, [pc, #120]	; (6eec <_spi_m_sync_trans+0x10c>)
    6e74:	4798      	blx	r3
    6e76:	4603      	mov	r3, r0
    6e78:	f083 0301 	eor.w	r3, r3, #1
    6e7c:	b2db      	uxtb	r3, r3
    6e7e:	2b00      	cmp	r3, #0
    6e80:	d00b      	beq.n	6e9a <_spi_m_sync_trans+0xba>
			/* In master mode, do not start next byte before previous byte received
			 * to make better output waveform */
			if (ctrl.rxcnt >= ctrl.txcnt) {
    6e82:	697a      	ldr	r2, [r7, #20]
    6e84:	693b      	ldr	r3, [r7, #16]
    6e86:	429a      	cmp	r2, r3
    6e88:	d307      	bcc.n	6e9a <_spi_m_sync_trans+0xba>
				_spi_tx_check_and_send(hw, iflag, &ctrl, dev->dummy_byte);
    6e8a:	687b      	ldr	r3, [r7, #4]
    6e8c:	88db      	ldrh	r3, [r3, #6]
    6e8e:	f107 0208 	add.w	r2, r7, #8
    6e92:	69f9      	ldr	r1, [r7, #28]
    6e94:	6a38      	ldr	r0, [r7, #32]
    6e96:	4c16      	ldr	r4, [pc, #88]	; (6ef0 <_spi_m_sync_trans+0x110>)
    6e98:	47a0      	blx	r4
			}
		}

		rc = _spi_err_check(iflag, hw);
    6e9a:	6a39      	ldr	r1, [r7, #32]
    6e9c:	69f8      	ldr	r0, [r7, #28]
    6e9e:	4b15      	ldr	r3, [pc, #84]	; (6ef4 <_spi_m_sync_trans+0x114>)
    6ea0:	4798      	blx	r3
    6ea2:	6278      	str	r0, [r7, #36]	; 0x24

		if (rc < 0) {
    6ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    6ea6:	2b00      	cmp	r3, #0
    6ea8:	db0c      	blt.n	6ec4 <_spi_m_sync_trans+0xe4>
			break;
		}
		if (ctrl.txcnt >= msg->size && ctrl.rxcnt >= msg->size) {
    6eaa:	693a      	ldr	r2, [r7, #16]
    6eac:	683b      	ldr	r3, [r7, #0]
    6eae:	689b      	ldr	r3, [r3, #8]
    6eb0:	429a      	cmp	r2, r3
    6eb2:	d3d4      	bcc.n	6e5e <_spi_m_sync_trans+0x7e>
    6eb4:	697a      	ldr	r2, [r7, #20]
    6eb6:	683b      	ldr	r3, [r7, #0]
    6eb8:	689b      	ldr	r3, [r3, #8]
    6eba:	429a      	cmp	r2, r3
    6ebc:	d3cf      	bcc.n	6e5e <_spi_m_sync_trans+0x7e>
			rc = ctrl.txcnt;
    6ebe:	693b      	ldr	r3, [r7, #16]
    6ec0:	627b      	str	r3, [r7, #36]	; 0x24
			break;
    6ec2:	e000      	b.n	6ec6 <_spi_m_sync_trans+0xe6>
			break;
    6ec4:	bf00      	nop
		}
	}
	/* Wait until SPI bus idle */
	_spi_wait_bus_idle(hw);
    6ec6:	6a38      	ldr	r0, [r7, #32]
    6ec8:	4b0b      	ldr	r3, [pc, #44]	; (6ef8 <_spi_m_sync_trans+0x118>)
    6eca:	4798      	blx	r3

	return rc;
    6ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
    6ece:	4618      	mov	r0, r3
    6ed0:	372c      	adds	r7, #44	; 0x2c
    6ed2:	46bd      	mov	sp, r7
    6ed4:	bd90      	pop	{r4, r7, pc}
    6ed6:	bf00      	nop
    6ed8:	0000ce2c 	.word	0x0000ce2c
    6edc:	00003481 	.word	0x00003481
    6ee0:	0000583d 	.word	0x0000583d
    6ee4:	00005abd 	.word	0x00005abd
    6ee8:	000058f9 	.word	0x000058f9
    6eec:	00006cbd 	.word	0x00006cbd
    6ef0:	00006d29 	.word	0x00006d29
    6ef4:	00006da1 	.word	0x00006da1
    6ef8:	00006c8d 	.word	0x00006c8d

00006efc <_spi_m_async_enable_tx>:

int32_t _spi_m_async_enable_tx(struct _spi_async_dev *dev, bool state)
{
    6efc:	b580      	push	{r7, lr}
    6efe:	b084      	sub	sp, #16
    6f00:	af00      	add	r7, sp, #0
    6f02:	6078      	str	r0, [r7, #4]
    6f04:	460b      	mov	r3, r1
    6f06:	70fb      	strb	r3, [r7, #3]
	void *hw = dev->prvt;
    6f08:	687b      	ldr	r3, [r7, #4]
    6f0a:	681b      	ldr	r3, [r3, #0]
    6f0c:	60fb      	str	r3, [r7, #12]

	ASSERT(dev && hw);
    6f0e:	687b      	ldr	r3, [r7, #4]
    6f10:	2b00      	cmp	r3, #0
    6f12:	d004      	beq.n	6f1e <_spi_m_async_enable_tx+0x22>
    6f14:	68fb      	ldr	r3, [r7, #12]
    6f16:	2b00      	cmp	r3, #0
    6f18:	d001      	beq.n	6f1e <_spi_m_async_enable_tx+0x22>
    6f1a:	2301      	movs	r3, #1
    6f1c:	e000      	b.n	6f20 <_spi_m_async_enable_tx+0x24>
    6f1e:	2300      	movs	r3, #0
    6f20:	f003 0301 	and.w	r3, r3, #1
    6f24:	b2db      	uxtb	r3, r3
    6f26:	f640 3256 	movw	r2, #2902	; 0xb56
    6f2a:	4909      	ldr	r1, [pc, #36]	; (6f50 <_spi_m_async_enable_tx+0x54>)
    6f2c:	4618      	mov	r0, r3
    6f2e:	4b09      	ldr	r3, [pc, #36]	; (6f54 <_spi_m_async_enable_tx+0x58>)
    6f30:	4798      	blx	r3

	if (state) {
    6f32:	78fb      	ldrb	r3, [r7, #3]
    6f34:	2b00      	cmp	r3, #0
    6f36:	d003      	beq.n	6f40 <_spi_m_async_enable_tx+0x44>
		hri_sercomspi_set_INTEN_DRE_bit(hw);
    6f38:	68f8      	ldr	r0, [r7, #12]
    6f3a:	4b07      	ldr	r3, [pc, #28]	; (6f58 <_spi_m_async_enable_tx+0x5c>)
    6f3c:	4798      	blx	r3
    6f3e:	e002      	b.n	6f46 <_spi_m_async_enable_tx+0x4a>
	} else {
		hri_sercomspi_clear_INTEN_DRE_bit(hw);
    6f40:	68f8      	ldr	r0, [r7, #12]
    6f42:	4b06      	ldr	r3, [pc, #24]	; (6f5c <_spi_m_async_enable_tx+0x60>)
    6f44:	4798      	blx	r3
	}

	return ERR_NONE;
    6f46:	2300      	movs	r3, #0
}
    6f48:	4618      	mov	r0, r3
    6f4a:	3710      	adds	r7, #16
    6f4c:	46bd      	mov	sp, r7
    6f4e:	bd80      	pop	{r7, pc}
    6f50:	0000ce2c 	.word	0x0000ce2c
    6f54:	00003481 	.word	0x00003481
    6f58:	00005931 	.word	0x00005931
    6f5c:	0000594b 	.word	0x0000594b

00006f60 <_spi_m_async_enable_rx>:
{
	return _spi_m_async_enable_tx(dev, state);
}

int32_t _spi_m_async_enable_rx(struct _spi_async_dev *dev, bool state)
{
    6f60:	b580      	push	{r7, lr}
    6f62:	b084      	sub	sp, #16
    6f64:	af00      	add	r7, sp, #0
    6f66:	6078      	str	r0, [r7, #4]
    6f68:	460b      	mov	r3, r1
    6f6a:	70fb      	strb	r3, [r7, #3]
	void *hw = dev->prvt;
    6f6c:	687b      	ldr	r3, [r7, #4]
    6f6e:	681b      	ldr	r3, [r3, #0]
    6f70:	60fb      	str	r3, [r7, #12]

	ASSERT(dev);
    6f72:	687b      	ldr	r3, [r7, #4]
    6f74:	2b00      	cmp	r3, #0
    6f76:	bf14      	ite	ne
    6f78:	2301      	movne	r3, #1
    6f7a:	2300      	moveq	r3, #0
    6f7c:	b2db      	uxtb	r3, r3
    6f7e:	f640 326a 	movw	r2, #2922	; 0xb6a
    6f82:	490f      	ldr	r1, [pc, #60]	; (6fc0 <_spi_m_async_enable_rx+0x60>)
    6f84:	4618      	mov	r0, r3
    6f86:	4b0f      	ldr	r3, [pc, #60]	; (6fc4 <_spi_m_async_enable_rx+0x64>)
    6f88:	4798      	blx	r3
	ASSERT(hw);
    6f8a:	68fb      	ldr	r3, [r7, #12]
    6f8c:	2b00      	cmp	r3, #0
    6f8e:	bf14      	ite	ne
    6f90:	2301      	movne	r3, #1
    6f92:	2300      	moveq	r3, #0
    6f94:	b2db      	uxtb	r3, r3
    6f96:	f640 326b 	movw	r2, #2923	; 0xb6b
    6f9a:	4909      	ldr	r1, [pc, #36]	; (6fc0 <_spi_m_async_enable_rx+0x60>)
    6f9c:	4618      	mov	r0, r3
    6f9e:	4b09      	ldr	r3, [pc, #36]	; (6fc4 <_spi_m_async_enable_rx+0x64>)
    6fa0:	4798      	blx	r3

	if (state) {
    6fa2:	78fb      	ldrb	r3, [r7, #3]
    6fa4:	2b00      	cmp	r3, #0
    6fa6:	d003      	beq.n	6fb0 <_spi_m_async_enable_rx+0x50>
		hri_sercomspi_set_INTEN_RXC_bit(hw);
    6fa8:	68f8      	ldr	r0, [r7, #12]
    6faa:	4b07      	ldr	r3, [pc, #28]	; (6fc8 <_spi_m_async_enable_rx+0x68>)
    6fac:	4798      	blx	r3
    6fae:	e002      	b.n	6fb6 <_spi_m_async_enable_rx+0x56>
	} else {
		hri_sercomspi_clear_INTEN_RXC_bit(hw);
    6fb0:	68f8      	ldr	r0, [r7, #12]
    6fb2:	4b06      	ldr	r3, [pc, #24]	; (6fcc <_spi_m_async_enable_rx+0x6c>)
    6fb4:	4798      	blx	r3
	}

	return ERR_NONE;
    6fb6:	2300      	movs	r3, #0
}
    6fb8:	4618      	mov	r0, r3
    6fba:	3710      	adds	r7, #16
    6fbc:	46bd      	mov	sp, r7
    6fbe:	bd80      	pop	{r7, pc}
    6fc0:	0000ce2c 	.word	0x0000ce2c
    6fc4:	00003481 	.word	0x00003481
    6fc8:	00005999 	.word	0x00005999
    6fcc:	000059b3 	.word	0x000059b3

00006fd0 <_spi_m_async_enable_tx_complete>:
{
	return _spi_m_async_enable_rx(dev, state);
}

int32_t _spi_m_async_enable_tx_complete(struct _spi_async_dev *dev, bool state)
{
    6fd0:	b580      	push	{r7, lr}
    6fd2:	b082      	sub	sp, #8
    6fd4:	af00      	add	r7, sp, #0
    6fd6:	6078      	str	r0, [r7, #4]
    6fd8:	460b      	mov	r3, r1
    6fda:	70fb      	strb	r3, [r7, #3]
	ASSERT(dev && dev->prvt);
    6fdc:	687b      	ldr	r3, [r7, #4]
    6fde:	2b00      	cmp	r3, #0
    6fe0:	d005      	beq.n	6fee <_spi_m_async_enable_tx_complete+0x1e>
    6fe2:	687b      	ldr	r3, [r7, #4]
    6fe4:	681b      	ldr	r3, [r3, #0]
    6fe6:	2b00      	cmp	r3, #0
    6fe8:	d001      	beq.n	6fee <_spi_m_async_enable_tx_complete+0x1e>
    6fea:	2301      	movs	r3, #1
    6fec:	e000      	b.n	6ff0 <_spi_m_async_enable_tx_complete+0x20>
    6fee:	2300      	movs	r3, #0
    6ff0:	f003 0301 	and.w	r3, r3, #1
    6ff4:	b2db      	uxtb	r3, r3
    6ff6:	f640 327d 	movw	r2, #2941	; 0xb7d
    6ffa:	490b      	ldr	r1, [pc, #44]	; (7028 <_spi_m_async_enable_tx_complete+0x58>)
    6ffc:	4618      	mov	r0, r3
    6ffe:	4b0b      	ldr	r3, [pc, #44]	; (702c <_spi_m_async_enable_tx_complete+0x5c>)
    7000:	4798      	blx	r3

	if (state) {
    7002:	78fb      	ldrb	r3, [r7, #3]
    7004:	2b00      	cmp	r3, #0
    7006:	d005      	beq.n	7014 <_spi_m_async_enable_tx_complete+0x44>
		hri_sercomspi_set_INTEN_TXC_bit(dev->prvt);
    7008:	687b      	ldr	r3, [r7, #4]
    700a:	681b      	ldr	r3, [r3, #0]
    700c:	4618      	mov	r0, r3
    700e:	4b08      	ldr	r3, [pc, #32]	; (7030 <_spi_m_async_enable_tx_complete+0x60>)
    7010:	4798      	blx	r3
    7012:	e004      	b.n	701e <_spi_m_async_enable_tx_complete+0x4e>
	} else {
		hri_sercomspi_clear_INTEN_TXC_bit(dev->prvt);
    7014:	687b      	ldr	r3, [r7, #4]
    7016:	681b      	ldr	r3, [r3, #0]
    7018:	4618      	mov	r0, r3
    701a:	4b06      	ldr	r3, [pc, #24]	; (7034 <_spi_m_async_enable_tx_complete+0x64>)
    701c:	4798      	blx	r3
	}

	return ERR_NONE;
    701e:	2300      	movs	r3, #0
}
    7020:	4618      	mov	r0, r3
    7022:	3708      	adds	r7, #8
    7024:	46bd      	mov	sp, r7
    7026:	bd80      	pop	{r7, pc}
    7028:	0000ce2c 	.word	0x0000ce2c
    702c:	00003481 	.word	0x00003481
    7030:	00005965 	.word	0x00005965
    7034:	0000597f 	.word	0x0000597f

00007038 <_spi_m_async_write_one>:
{
	return _spi_m_async_enable_tx_complete(dev, state);
}

int32_t _spi_m_async_write_one(struct _spi_async_dev *dev, uint16_t data)
{
    7038:	b580      	push	{r7, lr}
    703a:	b082      	sub	sp, #8
    703c:	af00      	add	r7, sp, #0
    703e:	6078      	str	r0, [r7, #4]
    7040:	460b      	mov	r3, r1
    7042:	807b      	strh	r3, [r7, #2]
	ASSERT(dev && dev->prvt);
    7044:	687b      	ldr	r3, [r7, #4]
    7046:	2b00      	cmp	r3, #0
    7048:	d005      	beq.n	7056 <_spi_m_async_write_one+0x1e>
    704a:	687b      	ldr	r3, [r7, #4]
    704c:	681b      	ldr	r3, [r3, #0]
    704e:	2b00      	cmp	r3, #0
    7050:	d001      	beq.n	7056 <_spi_m_async_write_one+0x1e>
    7052:	2301      	movs	r3, #1
    7054:	e000      	b.n	7058 <_spi_m_async_write_one+0x20>
    7056:	2300      	movs	r3, #0
    7058:	f003 0301 	and.w	r3, r3, #1
    705c:	b2db      	uxtb	r3, r3
    705e:	f640 328f 	movw	r2, #2959	; 0xb8f
    7062:	4908      	ldr	r1, [pc, #32]	; (7084 <_spi_m_async_write_one+0x4c>)
    7064:	4618      	mov	r0, r3
    7066:	4b08      	ldr	r3, [pc, #32]	; (7088 <_spi_m_async_write_one+0x50>)
    7068:	4798      	blx	r3

	hri_sercomspi_write_DATA_reg(dev->prvt, data);
    706a:	687b      	ldr	r3, [r7, #4]
    706c:	681b      	ldr	r3, [r3, #0]
    706e:	887a      	ldrh	r2, [r7, #2]
    7070:	4611      	mov	r1, r2
    7072:	4618      	mov	r0, r3
    7074:	4b05      	ldr	r3, [pc, #20]	; (708c <_spi_m_async_write_one+0x54>)
    7076:	4798      	blx	r3

	return ERR_NONE;
    7078:	2300      	movs	r3, #0
}
    707a:	4618      	mov	r0, r3
    707c:	3708      	adds	r7, #8
    707e:	46bd      	mov	sp, r7
    7080:	bd80      	pop	{r7, pc}
    7082:	bf00      	nop
    7084:	0000ce2c 	.word	0x0000ce2c
    7088:	00003481 	.word	0x00003481
    708c:	00005da9 	.word	0x00005da9

00007090 <_spi_m_async_read_one>:

	return ERR_NONE;
}

uint16_t _spi_m_async_read_one(struct _spi_async_dev *dev)
{
    7090:	b580      	push	{r7, lr}
    7092:	b082      	sub	sp, #8
    7094:	af00      	add	r7, sp, #0
    7096:	6078      	str	r0, [r7, #4]
	ASSERT(dev && dev->prvt);
    7098:	687b      	ldr	r3, [r7, #4]
    709a:	2b00      	cmp	r3, #0
    709c:	d005      	beq.n	70aa <_spi_m_async_read_one+0x1a>
    709e:	687b      	ldr	r3, [r7, #4]
    70a0:	681b      	ldr	r3, [r3, #0]
    70a2:	2b00      	cmp	r3, #0
    70a4:	d001      	beq.n	70aa <_spi_m_async_read_one+0x1a>
    70a6:	2301      	movs	r3, #1
    70a8:	e000      	b.n	70ac <_spi_m_async_read_one+0x1c>
    70aa:	2300      	movs	r3, #0
    70ac:	f003 0301 	and.w	r3, r3, #1
    70b0:	b2db      	uxtb	r3, r3
    70b2:	f640 32aa 	movw	r2, #2986	; 0xbaa
    70b6:	4907      	ldr	r1, [pc, #28]	; (70d4 <_spi_m_async_read_one+0x44>)
    70b8:	4618      	mov	r0, r3
    70ba:	4b07      	ldr	r3, [pc, #28]	; (70d8 <_spi_m_async_read_one+0x48>)
    70bc:	4798      	blx	r3

	return hri_sercomspi_read_DATA_reg(dev->prvt);
    70be:	687b      	ldr	r3, [r7, #4]
    70c0:	681b      	ldr	r3, [r3, #0]
    70c2:	4618      	mov	r0, r3
    70c4:	4b05      	ldr	r3, [pc, #20]	; (70dc <_spi_m_async_read_one+0x4c>)
    70c6:	4798      	blx	r3
    70c8:	4603      	mov	r3, r0
    70ca:	b29b      	uxth	r3, r3
}
    70cc:	4618      	mov	r0, r3
    70ce:	3708      	adds	r7, #8
    70d0:	46bd      	mov	sp, r7
    70d2:	bd80      	pop	{r7, pc}
    70d4:	0000ce2c 	.word	0x0000ce2c
    70d8:	00003481 	.word	0x00003481
    70dc:	00005dc5 	.word	0x00005dc5

000070e0 <_spi_m_async_register_callback>:
	return hri_sercomspi_read_DATA_reg(dev->prvt);
}

int32_t _spi_m_async_register_callback(struct _spi_async_dev *dev, const enum _spi_async_dev_cb_type cb_type,
                                       const FUNC_PTR func)
{
    70e0:	b580      	push	{r7, lr}
    70e2:	b086      	sub	sp, #24
    70e4:	af00      	add	r7, sp, #0
    70e6:	60f8      	str	r0, [r7, #12]
    70e8:	460b      	mov	r3, r1
    70ea:	607a      	str	r2, [r7, #4]
    70ec:	72fb      	strb	r3, [r7, #11]
	typedef void (*func_t)(void);
	struct _spi_async_dev *spid = dev;
    70ee:	68fb      	ldr	r3, [r7, #12]
    70f0:	617b      	str	r3, [r7, #20]

	ASSERT(dev && (cb_type < SPI_DEV_CB_N));
    70f2:	68fb      	ldr	r3, [r7, #12]
    70f4:	2b00      	cmp	r3, #0
    70f6:	d004      	beq.n	7102 <_spi_m_async_register_callback+0x22>
    70f8:	7afb      	ldrb	r3, [r7, #11]
    70fa:	2b03      	cmp	r3, #3
    70fc:	d801      	bhi.n	7102 <_spi_m_async_register_callback+0x22>
    70fe:	2301      	movs	r3, #1
    7100:	e000      	b.n	7104 <_spi_m_async_register_callback+0x24>
    7102:	2300      	movs	r3, #0
    7104:	f003 0301 	and.w	r3, r3, #1
    7108:	b2db      	uxtb	r3, r3
    710a:	f640 32c3 	movw	r2, #3011	; 0xbc3
    710e:	4909      	ldr	r1, [pc, #36]	; (7134 <_spi_m_async_register_callback+0x54>)
    7110:	4618      	mov	r0, r3
    7112:	4b09      	ldr	r3, [pc, #36]	; (7138 <_spi_m_async_register_callback+0x58>)
    7114:	4798      	blx	r3

	func_t *p_ls  = (func_t *)&spid->callbacks;
    7116:	697b      	ldr	r3, [r7, #20]
    7118:	3308      	adds	r3, #8
    711a:	613b      	str	r3, [r7, #16]
	p_ls[cb_type] = (func_t)func;
    711c:	7afb      	ldrb	r3, [r7, #11]
    711e:	009b      	lsls	r3, r3, #2
    7120:	693a      	ldr	r2, [r7, #16]
    7122:	4413      	add	r3, r2
    7124:	687a      	ldr	r2, [r7, #4]
    7126:	601a      	str	r2, [r3, #0]

	return ERR_NONE;
    7128:	2300      	movs	r3, #0
}
    712a:	4618      	mov	r0, r3
    712c:	3718      	adds	r7, #24
    712e:	46bd      	mov	sp, r7
    7130:	bd80      	pop	{r7, pc}
    7132:	bf00      	nop
    7134:	0000ce2c 	.word	0x0000ce2c
    7138:	00003481 	.word	0x00003481

0000713c <__NVIC_EnableIRQ>:
{
    713c:	b480      	push	{r7}
    713e:	b083      	sub	sp, #12
    7140:	af00      	add	r7, sp, #0
    7142:	4603      	mov	r3, r0
    7144:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    7146:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    714a:	2b00      	cmp	r3, #0
    714c:	db0b      	blt.n	7166 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    714e:	4909      	ldr	r1, [pc, #36]	; (7174 <__NVIC_EnableIRQ+0x38>)
    7150:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    7154:	095b      	lsrs	r3, r3, #5
    7156:	88fa      	ldrh	r2, [r7, #6]
    7158:	f002 021f 	and.w	r2, r2, #31
    715c:	2001      	movs	r0, #1
    715e:	fa00 f202 	lsl.w	r2, r0, r2
    7162:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    7166:	bf00      	nop
    7168:	370c      	adds	r7, #12
    716a:	46bd      	mov	sp, r7
    716c:	f85d 7b04 	ldr.w	r7, [sp], #4
    7170:	4770      	bx	lr
    7172:	bf00      	nop
    7174:	e000e100 	.word	0xe000e100

00007178 <__NVIC_DisableIRQ>:
{
    7178:	b480      	push	{r7}
    717a:	b083      	sub	sp, #12
    717c:	af00      	add	r7, sp, #0
    717e:	4603      	mov	r3, r0
    7180:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    7182:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    7186:	2b00      	cmp	r3, #0
    7188:	db10      	blt.n	71ac <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    718a:	490b      	ldr	r1, [pc, #44]	; (71b8 <__NVIC_DisableIRQ+0x40>)
    718c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    7190:	095b      	lsrs	r3, r3, #5
    7192:	88fa      	ldrh	r2, [r7, #6]
    7194:	f002 021f 	and.w	r2, r2, #31
    7198:	2001      	movs	r0, #1
    719a:	fa00 f202 	lsl.w	r2, r0, r2
    719e:	3320      	adds	r3, #32
    71a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    71a4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    71a8:	f3bf 8f6f 	isb	sy
}
    71ac:	bf00      	nop
    71ae:	370c      	adds	r7, #12
    71b0:	46bd      	mov	sp, r7
    71b2:	f85d 7b04 	ldr.w	r7, [sp], #4
    71b6:	4770      	bx	lr
    71b8:	e000e100 	.word	0xe000e100

000071bc <__NVIC_ClearPendingIRQ>:
{
    71bc:	b480      	push	{r7}
    71be:	b083      	sub	sp, #12
    71c0:	af00      	add	r7, sp, #0
    71c2:	4603      	mov	r3, r0
    71c4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    71c6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    71ca:	2b00      	cmp	r3, #0
    71cc:	db0c      	blt.n	71e8 <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    71ce:	4909      	ldr	r1, [pc, #36]	; (71f4 <__NVIC_ClearPendingIRQ+0x38>)
    71d0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    71d4:	095b      	lsrs	r3, r3, #5
    71d6:	88fa      	ldrh	r2, [r7, #6]
    71d8:	f002 021f 	and.w	r2, r2, #31
    71dc:	2001      	movs	r0, #1
    71de:	fa00 f202 	lsl.w	r2, r0, r2
    71e2:	3360      	adds	r3, #96	; 0x60
    71e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    71e8:	bf00      	nop
    71ea:	370c      	adds	r7, #12
    71ec:	46bd      	mov	sp, r7
    71ee:	f85d 7b04 	ldr.w	r7, [sp], #4
    71f2:	4770      	bx	lr
    71f4:	e000e100 	.word	0xe000e100

000071f8 <hri_tc_wait_for_sync>:
typedef uint8_t  hri_tccount8_count_reg_t;
typedef uint8_t  hri_tccount8_per_reg_t;
typedef uint8_t  hri_tccount8_perbuf_reg_t;

static inline void hri_tc_wait_for_sync(const void *const hw, hri_tc_syncbusy_reg_t reg)
{
    71f8:	b480      	push	{r7}
    71fa:	b083      	sub	sp, #12
    71fc:	af00      	add	r7, sp, #0
    71fe:	6078      	str	r0, [r7, #4]
    7200:	6039      	str	r1, [r7, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    7202:	bf00      	nop
    7204:	687b      	ldr	r3, [r7, #4]
    7206:	691a      	ldr	r2, [r3, #16]
    7208:	683b      	ldr	r3, [r7, #0]
    720a:	4013      	ands	r3, r2
    720c:	2b00      	cmp	r3, #0
    720e:	d1f9      	bne.n	7204 <hri_tc_wait_for_sync+0xc>
	};
}
    7210:	bf00      	nop
    7212:	370c      	adds	r7, #12
    7214:	46bd      	mov	sp, r7
    7216:	f85d 7b04 	ldr.w	r7, [sp], #4
    721a:	4770      	bx	lr

0000721c <hri_tc_is_syncing>:

static inline bool hri_tc_is_syncing(const void *const hw, hri_tc_syncbusy_reg_t reg)
{
    721c:	b480      	push	{r7}
    721e:	b083      	sub	sp, #12
    7220:	af00      	add	r7, sp, #0
    7222:	6078      	str	r0, [r7, #4]
    7224:	6039      	str	r1, [r7, #0]
	return ((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg;
    7226:	687b      	ldr	r3, [r7, #4]
    7228:	691a      	ldr	r2, [r3, #16]
    722a:	683b      	ldr	r3, [r7, #0]
    722c:	4013      	ands	r3, r2
    722e:	2b00      	cmp	r3, #0
    7230:	bf14      	ite	ne
    7232:	2301      	movne	r3, #1
    7234:	2300      	moveq	r3, #0
    7236:	b2db      	uxtb	r3, r3
}
    7238:	4618      	mov	r0, r3
    723a:	370c      	adds	r7, #12
    723c:	46bd      	mov	sp, r7
    723e:	f85d 7b04 	ldr.w	r7, [sp], #4
    7242:	4770      	bx	lr

00007244 <hri_tc_get_interrupt_OVF_bit>:
{
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_MC1;
}

static inline bool hri_tc_get_interrupt_OVF_bit(const void *const hw)
{
    7244:	b480      	push	{r7}
    7246:	b083      	sub	sp, #12
    7248:	af00      	add	r7, sp, #0
    724a:	6078      	str	r0, [r7, #4]
	return (((Tc *)hw)->COUNT16.INTFLAG.reg & TC_INTFLAG_OVF) >> TC_INTFLAG_OVF_Pos;
    724c:	687b      	ldr	r3, [r7, #4]
    724e:	7a9b      	ldrb	r3, [r3, #10]
    7250:	b2db      	uxtb	r3, r3
    7252:	f003 0301 	and.w	r3, r3, #1
    7256:	2b00      	cmp	r3, #0
    7258:	bf14      	ite	ne
    725a:	2301      	movne	r3, #1
    725c:	2300      	moveq	r3, #0
    725e:	b2db      	uxtb	r3, r3
}
    7260:	4618      	mov	r0, r3
    7262:	370c      	adds	r7, #12
    7264:	46bd      	mov	sp, r7
    7266:	f85d 7b04 	ldr.w	r7, [sp], #4
    726a:	4770      	bx	lr

0000726c <hri_tc_clear_interrupt_OVF_bit>:

static inline void hri_tc_clear_interrupt_OVF_bit(const void *const hw)
{
    726c:	b480      	push	{r7}
    726e:	b083      	sub	sp, #12
    7270:	af00      	add	r7, sp, #0
    7272:	6078      	str	r0, [r7, #4]
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_OVF;
    7274:	687b      	ldr	r3, [r7, #4]
    7276:	2201      	movs	r2, #1
    7278:	729a      	strb	r2, [r3, #10]
}
    727a:	bf00      	nop
    727c:	370c      	adds	r7, #12
    727e:	46bd      	mov	sp, r7
    7280:	f85d 7b04 	ldr.w	r7, [sp], #4
    7284:	4770      	bx	lr

00007286 <hri_tc_clear_interrupt_ERR_bit>:
{
	return (((Tc *)hw)->COUNT16.INTFLAG.reg & TC_INTFLAG_ERR) >> TC_INTFLAG_ERR_Pos;
}

static inline void hri_tc_clear_interrupt_ERR_bit(const void *const hw)
{
    7286:	b480      	push	{r7}
    7288:	b083      	sub	sp, #12
    728a:	af00      	add	r7, sp, #0
    728c:	6078      	str	r0, [r7, #4]
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_ERR;
    728e:	687b      	ldr	r3, [r7, #4]
    7290:	2202      	movs	r2, #2
    7292:	729a      	strb	r2, [r3, #10]
}
    7294:	bf00      	nop
    7296:	370c      	adds	r7, #12
    7298:	46bd      	mov	sp, r7
    729a:	f85d 7b04 	ldr.w	r7, [sp], #4
    729e:	4770      	bx	lr

000072a0 <hri_tc_set_INTEN_OVF_bit>:
{
	((Tc *)hw)->COUNT16.CTRLBCLR.reg = mask;
}

static inline void hri_tc_set_INTEN_OVF_bit(const void *const hw)
{
    72a0:	b480      	push	{r7}
    72a2:	b083      	sub	sp, #12
    72a4:	af00      	add	r7, sp, #0
    72a6:	6078      	str	r0, [r7, #4]
	((Tc *)hw)->COUNT16.INTENSET.reg = TC_INTENSET_OVF;
    72a8:	687b      	ldr	r3, [r7, #4]
    72aa:	2201      	movs	r2, #1
    72ac:	725a      	strb	r2, [r3, #9]
}
    72ae:	bf00      	nop
    72b0:	370c      	adds	r7, #12
    72b2:	46bd      	mov	sp, r7
    72b4:	f85d 7b04 	ldr.w	r7, [sp], #4
    72b8:	4770      	bx	lr

000072ba <hri_tc_get_INTEN_ERR_bit>:
{
	((Tc *)hw)->COUNT16.INTENSET.reg = TC_INTENSET_ERR;
}

static inline bool hri_tc_get_INTEN_ERR_bit(const void *const hw)
{
    72ba:	b480      	push	{r7}
    72bc:	b083      	sub	sp, #12
    72be:	af00      	add	r7, sp, #0
    72c0:	6078      	str	r0, [r7, #4]
	return (((Tc *)hw)->COUNT16.INTENSET.reg & TC_INTENSET_ERR) >> TC_INTENSET_ERR_Pos;
    72c2:	687b      	ldr	r3, [r7, #4]
    72c4:	7a5b      	ldrb	r3, [r3, #9]
    72c6:	b2db      	uxtb	r3, r3
    72c8:	085b      	lsrs	r3, r3, #1
    72ca:	f003 0301 	and.w	r3, r3, #1
    72ce:	2b00      	cmp	r3, #0
    72d0:	bf14      	ite	ne
    72d2:	2301      	movne	r3, #1
    72d4:	2300      	moveq	r3, #0
    72d6:	b2db      	uxtb	r3, r3
}
    72d8:	4618      	mov	r0, r3
    72da:	370c      	adds	r7, #12
    72dc:	46bd      	mov	sp, r7
    72de:	f85d 7b04 	ldr.w	r7, [sp], #4
    72e2:	4770      	bx	lr

000072e4 <hri_tc_clear_CTRLA_ENABLE_bit>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_tc_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    72e4:	b580      	push	{r7, lr}
    72e6:	b082      	sub	sp, #8
    72e8:	af00      	add	r7, sp, #0
    72ea:	6078      	str	r0, [r7, #4]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    72ec:	687b      	ldr	r3, [r7, #4]
    72ee:	681b      	ldr	r3, [r3, #0]
    72f0:	f023 0202 	bic.w	r2, r3, #2
    72f4:	687b      	ldr	r3, [r7, #4]
    72f6:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    72f8:	2103      	movs	r1, #3
    72fa:	6878      	ldr	r0, [r7, #4]
    72fc:	4b02      	ldr	r3, [pc, #8]	; (7308 <hri_tc_clear_CTRLA_ENABLE_bit+0x24>)
    72fe:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    7300:	bf00      	nop
    7302:	3708      	adds	r7, #8
    7304:	46bd      	mov	sp, r7
    7306:	bd80      	pop	{r7, pc}
    7308:	000071f9 	.word	0x000071f9

0000730c <hri_tc_get_CTRLA_reg>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tc_ctrla_reg_t hri_tc_get_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t mask)
{
    730c:	b580      	push	{r7, lr}
    730e:	b084      	sub	sp, #16
    7310:	af00      	add	r7, sp, #0
    7312:	6078      	str	r0, [r7, #4]
    7314:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    7316:	2103      	movs	r1, #3
    7318:	6878      	ldr	r0, [r7, #4]
    731a:	4b07      	ldr	r3, [pc, #28]	; (7338 <hri_tc_get_CTRLA_reg+0x2c>)
    731c:	4798      	blx	r3
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    731e:	687b      	ldr	r3, [r7, #4]
    7320:	681b      	ldr	r3, [r3, #0]
    7322:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    7324:	68fa      	ldr	r2, [r7, #12]
    7326:	683b      	ldr	r3, [r7, #0]
    7328:	4013      	ands	r3, r2
    732a:	60fb      	str	r3, [r7, #12]
	return tmp;
    732c:	68fb      	ldr	r3, [r7, #12]
}
    732e:	4618      	mov	r0, r3
    7330:	3710      	adds	r7, #16
    7332:	46bd      	mov	sp, r7
    7334:	bd80      	pop	{r7, pc}
    7336:	bf00      	nop
    7338:	000071f9 	.word	0x000071f9

0000733c <hri_tc_write_CTRLA_reg>:

static inline void hri_tc_write_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t data)
{
    733c:	b580      	push	{r7, lr}
    733e:	b082      	sub	sp, #8
    7340:	af00      	add	r7, sp, #0
    7342:	6078      	str	r0, [r7, #4]
    7344:	6039      	str	r1, [r7, #0]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    7346:	687b      	ldr	r3, [r7, #4]
    7348:	683a      	ldr	r2, [r7, #0]
    734a:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    734c:	2103      	movs	r1, #3
    734e:	6878      	ldr	r0, [r7, #4]
    7350:	4b02      	ldr	r3, [pc, #8]	; (735c <hri_tc_write_CTRLA_reg+0x20>)
    7352:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    7354:	bf00      	nop
    7356:	3708      	adds	r7, #8
    7358:	46bd      	mov	sp, r7
    735a:	bd80      	pop	{r7, pc}
    735c:	000071f9 	.word	0x000071f9

00007360 <hri_tc_write_EVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tc_write_EVCTRL_reg(const void *const hw, hri_tc_evctrl_reg_t data)
{
    7360:	b480      	push	{r7}
    7362:	b083      	sub	sp, #12
    7364:	af00      	add	r7, sp, #0
    7366:	6078      	str	r0, [r7, #4]
    7368:	460b      	mov	r3, r1
    736a:	807b      	strh	r3, [r7, #2]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.EVCTRL.reg = data;
    736c:	687b      	ldr	r3, [r7, #4]
    736e:	887a      	ldrh	r2, [r7, #2]
    7370:	80da      	strh	r2, [r3, #6]
	TC_CRITICAL_SECTION_LEAVE();
}
    7372:	bf00      	nop
    7374:	370c      	adds	r7, #12
    7376:	46bd      	mov	sp, r7
    7378:	f85d 7b04 	ldr.w	r7, [sp], #4
    737c:	4770      	bx	lr

0000737e <hri_tc_write_WAVE_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tc_write_WAVE_reg(const void *const hw, hri_tc_wave_reg_t data)
{
    737e:	b480      	push	{r7}
    7380:	b083      	sub	sp, #12
    7382:	af00      	add	r7, sp, #0
    7384:	6078      	str	r0, [r7, #4]
    7386:	460b      	mov	r3, r1
    7388:	70fb      	strb	r3, [r7, #3]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.WAVE.reg = data;
    738a:	687b      	ldr	r3, [r7, #4]
    738c:	78fa      	ldrb	r2, [r7, #3]
    738e:	731a      	strb	r2, [r3, #12]
	TC_CRITICAL_SECTION_LEAVE();
}
    7390:	bf00      	nop
    7392:	370c      	adds	r7, #12
    7394:	46bd      	mov	sp, r7
    7396:	f85d 7b04 	ldr.w	r7, [sp], #4
    739a:	4770      	bx	lr

0000739c <hri_tc_write_DBGCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tc_write_DBGCTRL_reg(const void *const hw, hri_tc_dbgctrl_reg_t data)
{
    739c:	b480      	push	{r7}
    739e:	b083      	sub	sp, #12
    73a0:	af00      	add	r7, sp, #0
    73a2:	6078      	str	r0, [r7, #4]
    73a4:	460b      	mov	r3, r1
    73a6:	70fb      	strb	r3, [r7, #3]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.DBGCTRL.reg = data;
    73a8:	687b      	ldr	r3, [r7, #4]
    73aa:	78fa      	ldrb	r2, [r7, #3]
    73ac:	73da      	strb	r2, [r3, #15]
	TC_CRITICAL_SECTION_LEAVE();
}
    73ae:	bf00      	nop
    73b0:	370c      	adds	r7, #12
    73b2:	46bd      	mov	sp, r7
    73b4:	f85d 7b04 	ldr.w	r7, [sp], #4
    73b8:	4770      	bx	lr
	...

000073bc <hri_tccount8_write_PER_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount8_write_PER_reg(const void *const hw, hri_tccount8_per_reg_t data)
{
    73bc:	b580      	push	{r7, lr}
    73be:	b082      	sub	sp, #8
    73c0:	af00      	add	r7, sp, #0
    73c2:	6078      	str	r0, [r7, #4]
    73c4:	460b      	mov	r3, r1
    73c6:	70fb      	strb	r3, [r7, #3]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT8.PER.reg = data;
    73c8:	687b      	ldr	r3, [r7, #4]
    73ca:	78fa      	ldrb	r2, [r7, #3]
    73cc:	76da      	strb	r2, [r3, #27]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_PER);
    73ce:	2120      	movs	r1, #32
    73d0:	6878      	ldr	r0, [r7, #4]
    73d2:	4b03      	ldr	r3, [pc, #12]	; (73e0 <hri_tccount8_write_PER_reg+0x24>)
    73d4:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    73d6:	bf00      	nop
    73d8:	3708      	adds	r7, #8
    73da:	46bd      	mov	sp, r7
    73dc:	bd80      	pop	{r7, pc}
    73de:	bf00      	nop
    73e0:	000071f9 	.word	0x000071f9

000073e4 <hri_tccount8_write_CC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount8_write_CC_reg(const void *const hw, uint8_t index, hri_tccount8_cc_reg_t data)
{
    73e4:	b580      	push	{r7, lr}
    73e6:	b082      	sub	sp, #8
    73e8:	af00      	add	r7, sp, #0
    73ea:	6078      	str	r0, [r7, #4]
    73ec:	460b      	mov	r3, r1
    73ee:	70fb      	strb	r3, [r7, #3]
    73f0:	4613      	mov	r3, r2
    73f2:	70bb      	strb	r3, [r7, #2]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT8.CC[index].reg = data;
    73f4:	78fb      	ldrb	r3, [r7, #3]
    73f6:	687a      	ldr	r2, [r7, #4]
    73f8:	4413      	add	r3, r2
    73fa:	78ba      	ldrb	r2, [r7, #2]
    73fc:	771a      	strb	r2, [r3, #28]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    73fe:	21c0      	movs	r1, #192	; 0xc0
    7400:	6878      	ldr	r0, [r7, #4]
    7402:	4b03      	ldr	r3, [pc, #12]	; (7410 <hri_tccount8_write_CC_reg+0x2c>)
    7404:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    7406:	bf00      	nop
    7408:	3708      	adds	r7, #8
    740a:	46bd      	mov	sp, r7
    740c:	bd80      	pop	{r7, pc}
    740e:	bf00      	nop
    7410:	000071f9 	.word	0x000071f9

00007414 <hri_tccount16_write_CC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount16_write_CC_reg(const void *const hw, uint8_t index, hri_tccount16_cc_reg_t data)
{
    7414:	b580      	push	{r7, lr}
    7416:	b082      	sub	sp, #8
    7418:	af00      	add	r7, sp, #0
    741a:	6078      	str	r0, [r7, #4]
    741c:	460b      	mov	r3, r1
    741e:	70fb      	strb	r3, [r7, #3]
    7420:	4613      	mov	r3, r2
    7422:	803b      	strh	r3, [r7, #0]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    7424:	78fb      	ldrb	r3, [r7, #3]
    7426:	687a      	ldr	r2, [r7, #4]
    7428:	330c      	adds	r3, #12
    742a:	005b      	lsls	r3, r3, #1
    742c:	4413      	add	r3, r2
    742e:	883a      	ldrh	r2, [r7, #0]
    7430:	809a      	strh	r2, [r3, #4]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    7432:	21c0      	movs	r1, #192	; 0xc0
    7434:	6878      	ldr	r0, [r7, #4]
    7436:	4b03      	ldr	r3, [pc, #12]	; (7444 <hri_tccount16_write_CC_reg+0x30>)
    7438:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    743a:	bf00      	nop
    743c:	3708      	adds	r7, #8
    743e:	46bd      	mov	sp, r7
    7440:	bd80      	pop	{r7, pc}
    7442:	bf00      	nop
    7444:	000071f9 	.word	0x000071f9

00007448 <hri_tccount32_write_CC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount32_write_CC_reg(const void *const hw, uint8_t index, hri_tccount32_cc_reg_t data)
{
    7448:	b580      	push	{r7, lr}
    744a:	b084      	sub	sp, #16
    744c:	af00      	add	r7, sp, #0
    744e:	60f8      	str	r0, [r7, #12]
    7450:	460b      	mov	r3, r1
    7452:	607a      	str	r2, [r7, #4]
    7454:	72fb      	strb	r3, [r7, #11]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    7456:	7afb      	ldrb	r3, [r7, #11]
    7458:	68fa      	ldr	r2, [r7, #12]
    745a:	3306      	adds	r3, #6
    745c:	009b      	lsls	r3, r3, #2
    745e:	4413      	add	r3, r2
    7460:	687a      	ldr	r2, [r7, #4]
    7462:	605a      	str	r2, [r3, #4]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    7464:	21c0      	movs	r1, #192	; 0xc0
    7466:	68f8      	ldr	r0, [r7, #12]
    7468:	4b02      	ldr	r3, [pc, #8]	; (7474 <hri_tccount32_write_CC_reg+0x2c>)
    746a:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    746c:	bf00      	nop
    746e:	3710      	adds	r7, #16
    7470:	46bd      	mov	sp, r7
    7472:	bd80      	pop	{r7, pc}
    7474:	000071f9 	.word	0x000071f9

00007478 <_timer_init>:
static inline uint8_t _get_hardware_offset(const void *const hw);
/**
 * \brief Initialize TC
 */
int32_t _timer_init(struct _timer_device *const device, void *const hw)
{
    7478:	b580      	push	{r7, lr}
    747a:	b084      	sub	sp, #16
    747c:	af00      	add	r7, sp, #0
    747e:	6078      	str	r0, [r7, #4]
    7480:	6039      	str	r1, [r7, #0]
	int8_t i = get_tc_index(hw);
    7482:	6838      	ldr	r0, [r7, #0]
    7484:	4b93      	ldr	r3, [pc, #588]	; (76d4 <_timer_init+0x25c>)
    7486:	4798      	blx	r3
    7488:	4603      	mov	r3, r0
    748a:	73fb      	strb	r3, [r7, #15]

	device->hw = hw;
    748c:	687b      	ldr	r3, [r7, #4]
    748e:	683a      	ldr	r2, [r7, #0]
    7490:	60da      	str	r2, [r3, #12]
	ASSERT(ARRAY_SIZE(_tcs));
    7492:	2295      	movs	r2, #149	; 0x95
    7494:	4990      	ldr	r1, [pc, #576]	; (76d8 <_timer_init+0x260>)
    7496:	2001      	movs	r0, #1
    7498:	4b90      	ldr	r3, [pc, #576]	; (76dc <_timer_init+0x264>)
    749a:	4798      	blx	r3

	if (!hri_tc_is_syncing(hw, TC_SYNCBUSY_SWRST)) {
    749c:	2101      	movs	r1, #1
    749e:	6838      	ldr	r0, [r7, #0]
    74a0:	4b8f      	ldr	r3, [pc, #572]	; (76e0 <_timer_init+0x268>)
    74a2:	4798      	blx	r3
    74a4:	4603      	mov	r3, r0
    74a6:	f083 0301 	eor.w	r3, r3, #1
    74aa:	b2db      	uxtb	r3, r3
    74ac:	2b00      	cmp	r3, #0
    74ae:	d011      	beq.n	74d4 <_timer_init+0x5c>
		if (hri_tc_get_CTRLA_reg(hw, TC_CTRLA_ENABLE)) {
    74b0:	2102      	movs	r1, #2
    74b2:	6838      	ldr	r0, [r7, #0]
    74b4:	4b8b      	ldr	r3, [pc, #556]	; (76e4 <_timer_init+0x26c>)
    74b6:	4798      	blx	r3
    74b8:	4603      	mov	r3, r0
    74ba:	2b00      	cmp	r3, #0
    74bc:	d006      	beq.n	74cc <_timer_init+0x54>
			hri_tc_clear_CTRLA_ENABLE_bit(hw);
    74be:	6838      	ldr	r0, [r7, #0]
    74c0:	4b89      	ldr	r3, [pc, #548]	; (76e8 <_timer_init+0x270>)
    74c2:	4798      	blx	r3
			hri_tc_wait_for_sync(hw, TC_SYNCBUSY_ENABLE);
    74c4:	2102      	movs	r1, #2
    74c6:	6838      	ldr	r0, [r7, #0]
    74c8:	4b88      	ldr	r3, [pc, #544]	; (76ec <_timer_init+0x274>)
    74ca:	4798      	blx	r3
		}
		hri_tc_write_CTRLA_reg(hw, TC_CTRLA_SWRST);
    74cc:	2101      	movs	r1, #1
    74ce:	6838      	ldr	r0, [r7, #0]
    74d0:	4b87      	ldr	r3, [pc, #540]	; (76f0 <_timer_init+0x278>)
    74d2:	4798      	blx	r3
	}
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST);
    74d4:	2101      	movs	r1, #1
    74d6:	6838      	ldr	r0, [r7, #0]
    74d8:	4b84      	ldr	r3, [pc, #528]	; (76ec <_timer_init+0x274>)
    74da:	4798      	blx	r3

	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    74dc:	f997 200f 	ldrsb.w	r2, [r7, #15]
    74e0:	4984      	ldr	r1, [pc, #528]	; (76f4 <_timer_init+0x27c>)
    74e2:	4613      	mov	r3, r2
    74e4:	009b      	lsls	r3, r3, #2
    74e6:	4413      	add	r3, r2
    74e8:	009b      	lsls	r3, r3, #2
    74ea:	440b      	add	r3, r1
    74ec:	3304      	adds	r3, #4
    74ee:	681b      	ldr	r3, [r3, #0]
    74f0:	4619      	mov	r1, r3
    74f2:	6838      	ldr	r0, [r7, #0]
    74f4:	4b7e      	ldr	r3, [pc, #504]	; (76f0 <_timer_init+0x278>)
    74f6:	4798      	blx	r3
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    74f8:	f997 200f 	ldrsb.w	r2, [r7, #15]
    74fc:	497d      	ldr	r1, [pc, #500]	; (76f4 <_timer_init+0x27c>)
    74fe:	4613      	mov	r3, r2
    7500:	009b      	lsls	r3, r3, #2
    7502:	4413      	add	r3, r2
    7504:	009b      	lsls	r3, r3, #2
    7506:	440b      	add	r3, r1
    7508:	330a      	adds	r3, #10
    750a:	781b      	ldrb	r3, [r3, #0]
    750c:	4619      	mov	r1, r3
    750e:	6838      	ldr	r0, [r7, #0]
    7510:	4b79      	ldr	r3, [pc, #484]	; (76f8 <_timer_init+0x280>)
    7512:	4798      	blx	r3
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    7514:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7518:	4976      	ldr	r1, [pc, #472]	; (76f4 <_timer_init+0x27c>)
    751a:	4613      	mov	r3, r2
    751c:	009b      	lsls	r3, r3, #2
    751e:	4413      	add	r3, r2
    7520:	009b      	lsls	r3, r3, #2
    7522:	440b      	add	r3, r1
    7524:	3308      	adds	r3, #8
    7526:	881b      	ldrh	r3, [r3, #0]
    7528:	4619      	mov	r1, r3
    752a:	6838      	ldr	r0, [r7, #0]
    752c:	4b73      	ldr	r3, [pc, #460]	; (76fc <_timer_init+0x284>)
    752e:	4798      	blx	r3
	hri_tc_write_WAVE_reg(hw, TC_WAVE_WAVEGEN_MFRQ);
    7530:	2101      	movs	r1, #1
    7532:	6838      	ldr	r0, [r7, #0]
    7534:	4b72      	ldr	r3, [pc, #456]	; (7700 <_timer_init+0x288>)
    7536:	4798      	blx	r3

	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    7538:	f997 200f 	ldrsb.w	r2, [r7, #15]
    753c:	496d      	ldr	r1, [pc, #436]	; (76f4 <_timer_init+0x27c>)
    753e:	4613      	mov	r3, r2
    7540:	009b      	lsls	r3, r3, #2
    7542:	4413      	add	r3, r2
    7544:	009b      	lsls	r3, r3, #2
    7546:	440b      	add	r3, r1
    7548:	3304      	adds	r3, #4
    754a:	681b      	ldr	r3, [r3, #0]
    754c:	f003 030c 	and.w	r3, r3, #12
    7550:	2b08      	cmp	r3, #8
    7552:	d11e      	bne.n	7592 <_timer_init+0x11a>
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    7554:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7558:	4966      	ldr	r1, [pc, #408]	; (76f4 <_timer_init+0x27c>)
    755a:	4613      	mov	r3, r2
    755c:	009b      	lsls	r3, r3, #2
    755e:	4413      	add	r3, r2
    7560:	009b      	lsls	r3, r3, #2
    7562:	440b      	add	r3, r1
    7564:	330c      	adds	r3, #12
    7566:	681b      	ldr	r3, [r3, #0]
    7568:	461a      	mov	r2, r3
    756a:	2100      	movs	r1, #0
    756c:	6838      	ldr	r0, [r7, #0]
    756e:	4b65      	ldr	r3, [pc, #404]	; (7704 <_timer_init+0x28c>)
    7570:	4798      	blx	r3
		hri_tccount32_write_CC_reg(hw, 1, _tcs[i].cc1);
    7572:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7576:	495f      	ldr	r1, [pc, #380]	; (76f4 <_timer_init+0x27c>)
    7578:	4613      	mov	r3, r2
    757a:	009b      	lsls	r3, r3, #2
    757c:	4413      	add	r3, r2
    757e:	009b      	lsls	r3, r3, #2
    7580:	440b      	add	r3, r1
    7582:	3310      	adds	r3, #16
    7584:	681b      	ldr	r3, [r3, #0]
    7586:	461a      	mov	r2, r3
    7588:	2101      	movs	r1, #1
    758a:	6838      	ldr	r0, [r7, #0]
    758c:	4b5d      	ldr	r3, [pc, #372]	; (7704 <_timer_init+0x28c>)
    758e:	4798      	blx	r3
    7590:	e06a      	b.n	7668 <_timer_init+0x1f0>

	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    7592:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7596:	4957      	ldr	r1, [pc, #348]	; (76f4 <_timer_init+0x27c>)
    7598:	4613      	mov	r3, r2
    759a:	009b      	lsls	r3, r3, #2
    759c:	4413      	add	r3, r2
    759e:	009b      	lsls	r3, r3, #2
    75a0:	440b      	add	r3, r1
    75a2:	3304      	adds	r3, #4
    75a4:	681b      	ldr	r3, [r3, #0]
    75a6:	f003 030c 	and.w	r3, r3, #12
    75aa:	2b00      	cmp	r3, #0
    75ac:	d120      	bne.n	75f0 <_timer_init+0x178>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)_tcs[i].cc0);
    75ae:	f997 200f 	ldrsb.w	r2, [r7, #15]
    75b2:	4950      	ldr	r1, [pc, #320]	; (76f4 <_timer_init+0x27c>)
    75b4:	4613      	mov	r3, r2
    75b6:	009b      	lsls	r3, r3, #2
    75b8:	4413      	add	r3, r2
    75ba:	009b      	lsls	r3, r3, #2
    75bc:	440b      	add	r3, r1
    75be:	330c      	adds	r3, #12
    75c0:	681b      	ldr	r3, [r3, #0]
    75c2:	b29b      	uxth	r3, r3
    75c4:	461a      	mov	r2, r3
    75c6:	2100      	movs	r1, #0
    75c8:	6838      	ldr	r0, [r7, #0]
    75ca:	4b4f      	ldr	r3, [pc, #316]	; (7708 <_timer_init+0x290>)
    75cc:	4798      	blx	r3
		hri_tccount16_write_CC_reg(hw, 1, (uint16_t)_tcs[i].cc1);
    75ce:	f997 200f 	ldrsb.w	r2, [r7, #15]
    75d2:	4948      	ldr	r1, [pc, #288]	; (76f4 <_timer_init+0x27c>)
    75d4:	4613      	mov	r3, r2
    75d6:	009b      	lsls	r3, r3, #2
    75d8:	4413      	add	r3, r2
    75da:	009b      	lsls	r3, r3, #2
    75dc:	440b      	add	r3, r1
    75de:	3310      	adds	r3, #16
    75e0:	681b      	ldr	r3, [r3, #0]
    75e2:	b29b      	uxth	r3, r3
    75e4:	461a      	mov	r2, r3
    75e6:	2101      	movs	r1, #1
    75e8:	6838      	ldr	r0, [r7, #0]
    75ea:	4b47      	ldr	r3, [pc, #284]	; (7708 <_timer_init+0x290>)
    75ec:	4798      	blx	r3
    75ee:	e03b      	b.n	7668 <_timer_init+0x1f0>

	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT8) {
    75f0:	f997 200f 	ldrsb.w	r2, [r7, #15]
    75f4:	493f      	ldr	r1, [pc, #252]	; (76f4 <_timer_init+0x27c>)
    75f6:	4613      	mov	r3, r2
    75f8:	009b      	lsls	r3, r3, #2
    75fa:	4413      	add	r3, r2
    75fc:	009b      	lsls	r3, r3, #2
    75fe:	440b      	add	r3, r1
    7600:	3304      	adds	r3, #4
    7602:	681b      	ldr	r3, [r3, #0]
    7604:	f003 030c 	and.w	r3, r3, #12
    7608:	2b04      	cmp	r3, #4
    760a:	d12d      	bne.n	7668 <_timer_init+0x1f0>
		hri_tccount8_write_CC_reg(hw, 0, (uint8_t)_tcs[i].cc0);
    760c:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7610:	4938      	ldr	r1, [pc, #224]	; (76f4 <_timer_init+0x27c>)
    7612:	4613      	mov	r3, r2
    7614:	009b      	lsls	r3, r3, #2
    7616:	4413      	add	r3, r2
    7618:	009b      	lsls	r3, r3, #2
    761a:	440b      	add	r3, r1
    761c:	330c      	adds	r3, #12
    761e:	681b      	ldr	r3, [r3, #0]
    7620:	b2db      	uxtb	r3, r3
    7622:	461a      	mov	r2, r3
    7624:	2100      	movs	r1, #0
    7626:	6838      	ldr	r0, [r7, #0]
    7628:	4b38      	ldr	r3, [pc, #224]	; (770c <_timer_init+0x294>)
    762a:	4798      	blx	r3
		hri_tccount8_write_CC_reg(hw, 1, (uint8_t)_tcs[i].cc1);
    762c:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7630:	4930      	ldr	r1, [pc, #192]	; (76f4 <_timer_init+0x27c>)
    7632:	4613      	mov	r3, r2
    7634:	009b      	lsls	r3, r3, #2
    7636:	4413      	add	r3, r2
    7638:	009b      	lsls	r3, r3, #2
    763a:	440b      	add	r3, r1
    763c:	3310      	adds	r3, #16
    763e:	681b      	ldr	r3, [r3, #0]
    7640:	b2db      	uxtb	r3, r3
    7642:	461a      	mov	r2, r3
    7644:	2101      	movs	r1, #1
    7646:	6838      	ldr	r0, [r7, #0]
    7648:	4b30      	ldr	r3, [pc, #192]	; (770c <_timer_init+0x294>)
    764a:	4798      	blx	r3
		hri_tccount8_write_PER_reg(hw, _tcs[i].per);
    764c:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7650:	4928      	ldr	r1, [pc, #160]	; (76f4 <_timer_init+0x27c>)
    7652:	4613      	mov	r3, r2
    7654:	009b      	lsls	r3, r3, #2
    7656:	4413      	add	r3, r2
    7658:	009b      	lsls	r3, r3, #2
    765a:	440b      	add	r3, r1
    765c:	330b      	adds	r3, #11
    765e:	781b      	ldrb	r3, [r3, #0]
    7660:	4619      	mov	r1, r3
    7662:	6838      	ldr	r0, [r7, #0]
    7664:	4b2a      	ldr	r3, [pc, #168]	; (7710 <_timer_init+0x298>)
    7666:	4798      	blx	r3
	}
	hri_tc_set_INTEN_OVF_bit(hw);
    7668:	6838      	ldr	r0, [r7, #0]
    766a:	4b2a      	ldr	r3, [pc, #168]	; (7714 <_timer_init+0x29c>)
    766c:	4798      	blx	r3

	_tc_init_irq_param(hw, (void *)device);
    766e:	6879      	ldr	r1, [r7, #4]
    7670:	6838      	ldr	r0, [r7, #0]
    7672:	4b29      	ldr	r3, [pc, #164]	; (7718 <_timer_init+0x2a0>)
    7674:	4798      	blx	r3
	NVIC_DisableIRQ(_tcs[i].irq);
    7676:	f997 200f 	ldrsb.w	r2, [r7, #15]
    767a:	491e      	ldr	r1, [pc, #120]	; (76f4 <_timer_init+0x27c>)
    767c:	4613      	mov	r3, r2
    767e:	009b      	lsls	r3, r3, #2
    7680:	4413      	add	r3, r2
    7682:	009b      	lsls	r3, r3, #2
    7684:	440b      	add	r3, r1
    7686:	3302      	adds	r3, #2
    7688:	f9b3 3000 	ldrsh.w	r3, [r3]
    768c:	4618      	mov	r0, r3
    768e:	4b23      	ldr	r3, [pc, #140]	; (771c <_timer_init+0x2a4>)
    7690:	4798      	blx	r3
	NVIC_ClearPendingIRQ(_tcs[i].irq);
    7692:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7696:	4917      	ldr	r1, [pc, #92]	; (76f4 <_timer_init+0x27c>)
    7698:	4613      	mov	r3, r2
    769a:	009b      	lsls	r3, r3, #2
    769c:	4413      	add	r3, r2
    769e:	009b      	lsls	r3, r3, #2
    76a0:	440b      	add	r3, r1
    76a2:	3302      	adds	r3, #2
    76a4:	f9b3 3000 	ldrsh.w	r3, [r3]
    76a8:	4618      	mov	r0, r3
    76aa:	4b1d      	ldr	r3, [pc, #116]	; (7720 <_timer_init+0x2a8>)
    76ac:	4798      	blx	r3
	NVIC_EnableIRQ(_tcs[i].irq);
    76ae:	f997 200f 	ldrsb.w	r2, [r7, #15]
    76b2:	4910      	ldr	r1, [pc, #64]	; (76f4 <_timer_init+0x27c>)
    76b4:	4613      	mov	r3, r2
    76b6:	009b      	lsls	r3, r3, #2
    76b8:	4413      	add	r3, r2
    76ba:	009b      	lsls	r3, r3, #2
    76bc:	440b      	add	r3, r1
    76be:	3302      	adds	r3, #2
    76c0:	f9b3 3000 	ldrsh.w	r3, [r3]
    76c4:	4618      	mov	r0, r3
    76c6:	4b17      	ldr	r3, [pc, #92]	; (7724 <_timer_init+0x2ac>)
    76c8:	4798      	blx	r3

	return ERR_NONE;
    76ca:	2300      	movs	r3, #0
}
    76cc:	4618      	mov	r0, r3
    76ce:	3710      	adds	r7, #16
    76d0:	46bd      	mov	sp, r7
    76d2:	bd80      	pop	{r7, pc}
    76d4:	00007a95 	.word	0x00007a95
    76d8:	0000ce9c 	.word	0x0000ce9c
    76dc:	00003481 	.word	0x00003481
    76e0:	0000721d 	.word	0x0000721d
    76e4:	0000730d 	.word	0x0000730d
    76e8:	000072e5 	.word	0x000072e5
    76ec:	000071f9 	.word	0x000071f9
    76f0:	0000733d 	.word	0x0000733d
    76f4:	20000030 	.word	0x20000030
    76f8:	0000739d 	.word	0x0000739d
    76fc:	00007361 	.word	0x00007361
    7700:	0000737f 	.word	0x0000737f
    7704:	00007449 	.word	0x00007449
    7708:	00007415 	.word	0x00007415
    770c:	000073e5 	.word	0x000073e5
    7710:	000073bd 	.word	0x000073bd
    7714:	000072a1 	.word	0x000072a1
    7718:	00007afd 	.word	0x00007afd
    771c:	00007179 	.word	0x00007179
    7720:	000071bd 	.word	0x000071bd
    7724:	0000713d 	.word	0x0000713d

00007728 <_pwm_init>:
/**
 * \brief Initialize TC for PWM mode
 */
int32_t _pwm_init(struct _pwm_device *const device, void *const hw)
{
    7728:	b580      	push	{r7, lr}
    772a:	b084      	sub	sp, #16
    772c:	af00      	add	r7, sp, #0
    772e:	6078      	str	r0, [r7, #4]
    7730:	6039      	str	r1, [r7, #0]
	int8_t i   = get_tc_index(hw);
    7732:	6838      	ldr	r0, [r7, #0]
    7734:	4b73      	ldr	r3, [pc, #460]	; (7904 <_pwm_init+0x1dc>)
    7736:	4798      	blx	r3
    7738:	4603      	mov	r3, r0
    773a:	73fb      	strb	r3, [r7, #15]
	device->hw = hw;
    773c:	687b      	ldr	r3, [r7, #4]
    773e:	683a      	ldr	r2, [r7, #0]
    7740:	611a      	str	r2, [r3, #16]

	if (!hri_tc_is_syncing(hw, TC_SYNCBUSY_SWRST)) {
    7742:	2101      	movs	r1, #1
    7744:	6838      	ldr	r0, [r7, #0]
    7746:	4b70      	ldr	r3, [pc, #448]	; (7908 <_pwm_init+0x1e0>)
    7748:	4798      	blx	r3
    774a:	4603      	mov	r3, r0
    774c:	f083 0301 	eor.w	r3, r3, #1
    7750:	b2db      	uxtb	r3, r3
    7752:	2b00      	cmp	r3, #0
    7754:	d011      	beq.n	777a <_pwm_init+0x52>
		if (hri_tc_get_CTRLA_reg(hw, TC_CTRLA_ENABLE)) {
    7756:	2102      	movs	r1, #2
    7758:	6838      	ldr	r0, [r7, #0]
    775a:	4b6c      	ldr	r3, [pc, #432]	; (790c <_pwm_init+0x1e4>)
    775c:	4798      	blx	r3
    775e:	4603      	mov	r3, r0
    7760:	2b00      	cmp	r3, #0
    7762:	d006      	beq.n	7772 <_pwm_init+0x4a>
			hri_tc_clear_CTRLA_ENABLE_bit(hw);
    7764:	6838      	ldr	r0, [r7, #0]
    7766:	4b6a      	ldr	r3, [pc, #424]	; (7910 <_pwm_init+0x1e8>)
    7768:	4798      	blx	r3
			hri_tc_wait_for_sync(hw, TC_SYNCBUSY_ENABLE);
    776a:	2102      	movs	r1, #2
    776c:	6838      	ldr	r0, [r7, #0]
    776e:	4b69      	ldr	r3, [pc, #420]	; (7914 <_pwm_init+0x1ec>)
    7770:	4798      	blx	r3
		}
		hri_tc_write_CTRLA_reg(hw, TC_CTRLA_SWRST);
    7772:	2101      	movs	r1, #1
    7774:	6838      	ldr	r0, [r7, #0]
    7776:	4b68      	ldr	r3, [pc, #416]	; (7918 <_pwm_init+0x1f0>)
    7778:	4798      	blx	r3
	}
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST);
    777a:	2101      	movs	r1, #1
    777c:	6838      	ldr	r0, [r7, #0]
    777e:	4b65      	ldr	r3, [pc, #404]	; (7914 <_pwm_init+0x1ec>)
    7780:	4798      	blx	r3

	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    7782:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7786:	4965      	ldr	r1, [pc, #404]	; (791c <_pwm_init+0x1f4>)
    7788:	4613      	mov	r3, r2
    778a:	009b      	lsls	r3, r3, #2
    778c:	4413      	add	r3, r2
    778e:	009b      	lsls	r3, r3, #2
    7790:	440b      	add	r3, r1
    7792:	3304      	adds	r3, #4
    7794:	681b      	ldr	r3, [r3, #0]
    7796:	4619      	mov	r1, r3
    7798:	6838      	ldr	r0, [r7, #0]
    779a:	4b5f      	ldr	r3, [pc, #380]	; (7918 <_pwm_init+0x1f0>)
    779c:	4798      	blx	r3
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    779e:	f997 200f 	ldrsb.w	r2, [r7, #15]
    77a2:	495e      	ldr	r1, [pc, #376]	; (791c <_pwm_init+0x1f4>)
    77a4:	4613      	mov	r3, r2
    77a6:	009b      	lsls	r3, r3, #2
    77a8:	4413      	add	r3, r2
    77aa:	009b      	lsls	r3, r3, #2
    77ac:	440b      	add	r3, r1
    77ae:	330a      	adds	r3, #10
    77b0:	781b      	ldrb	r3, [r3, #0]
    77b2:	4619      	mov	r1, r3
    77b4:	6838      	ldr	r0, [r7, #0]
    77b6:	4b5a      	ldr	r3, [pc, #360]	; (7920 <_pwm_init+0x1f8>)
    77b8:	4798      	blx	r3
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    77ba:	f997 200f 	ldrsb.w	r2, [r7, #15]
    77be:	4957      	ldr	r1, [pc, #348]	; (791c <_pwm_init+0x1f4>)
    77c0:	4613      	mov	r3, r2
    77c2:	009b      	lsls	r3, r3, #2
    77c4:	4413      	add	r3, r2
    77c6:	009b      	lsls	r3, r3, #2
    77c8:	440b      	add	r3, r1
    77ca:	3308      	adds	r3, #8
    77cc:	881b      	ldrh	r3, [r3, #0]
    77ce:	4619      	mov	r1, r3
    77d0:	6838      	ldr	r0, [r7, #0]
    77d2:	4b54      	ldr	r3, [pc, #336]	; (7924 <_pwm_init+0x1fc>)
    77d4:	4798      	blx	r3
	hri_tc_write_WAVE_reg(hw, TC_WAVE_WAVEGEN_MPWM_Val);
    77d6:	2103      	movs	r1, #3
    77d8:	6838      	ldr	r0, [r7, #0]
    77da:	4b53      	ldr	r3, [pc, #332]	; (7928 <_pwm_init+0x200>)
    77dc:	4798      	blx	r3

	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    77de:	f997 200f 	ldrsb.w	r2, [r7, #15]
    77e2:	494e      	ldr	r1, [pc, #312]	; (791c <_pwm_init+0x1f4>)
    77e4:	4613      	mov	r3, r2
    77e6:	009b      	lsls	r3, r3, #2
    77e8:	4413      	add	r3, r2
    77ea:	009b      	lsls	r3, r3, #2
    77ec:	440b      	add	r3, r1
    77ee:	3304      	adds	r3, #4
    77f0:	681b      	ldr	r3, [r3, #0]
    77f2:	f003 030c 	and.w	r3, r3, #12
    77f6:	2b08      	cmp	r3, #8
    77f8:	d11e      	bne.n	7838 <_pwm_init+0x110>
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    77fa:	f997 200f 	ldrsb.w	r2, [r7, #15]
    77fe:	4947      	ldr	r1, [pc, #284]	; (791c <_pwm_init+0x1f4>)
    7800:	4613      	mov	r3, r2
    7802:	009b      	lsls	r3, r3, #2
    7804:	4413      	add	r3, r2
    7806:	009b      	lsls	r3, r3, #2
    7808:	440b      	add	r3, r1
    780a:	330c      	adds	r3, #12
    780c:	681b      	ldr	r3, [r3, #0]
    780e:	461a      	mov	r2, r3
    7810:	2100      	movs	r1, #0
    7812:	6838      	ldr	r0, [r7, #0]
    7814:	4b45      	ldr	r3, [pc, #276]	; (792c <_pwm_init+0x204>)
    7816:	4798      	blx	r3
		hri_tccount32_write_CC_reg(hw, 1, _tcs[i].cc1);
    7818:	f997 200f 	ldrsb.w	r2, [r7, #15]
    781c:	493f      	ldr	r1, [pc, #252]	; (791c <_pwm_init+0x1f4>)
    781e:	4613      	mov	r3, r2
    7820:	009b      	lsls	r3, r3, #2
    7822:	4413      	add	r3, r2
    7824:	009b      	lsls	r3, r3, #2
    7826:	440b      	add	r3, r1
    7828:	3310      	adds	r3, #16
    782a:	681b      	ldr	r3, [r3, #0]
    782c:	461a      	mov	r2, r3
    782e:	2101      	movs	r1, #1
    7830:	6838      	ldr	r0, [r7, #0]
    7832:	4b3e      	ldr	r3, [pc, #248]	; (792c <_pwm_init+0x204>)
    7834:	4798      	blx	r3
    7836:	e031      	b.n	789c <_pwm_init+0x174>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    7838:	f997 200f 	ldrsb.w	r2, [r7, #15]
    783c:	4937      	ldr	r1, [pc, #220]	; (791c <_pwm_init+0x1f4>)
    783e:	4613      	mov	r3, r2
    7840:	009b      	lsls	r3, r3, #2
    7842:	4413      	add	r3, r2
    7844:	009b      	lsls	r3, r3, #2
    7846:	440b      	add	r3, r1
    7848:	3304      	adds	r3, #4
    784a:	681b      	ldr	r3, [r3, #0]
    784c:	f003 030c 	and.w	r3, r3, #12
    7850:	2b00      	cmp	r3, #0
    7852:	d120      	bne.n	7896 <_pwm_init+0x16e>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)_tcs[i].cc0);
    7854:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7858:	4930      	ldr	r1, [pc, #192]	; (791c <_pwm_init+0x1f4>)
    785a:	4613      	mov	r3, r2
    785c:	009b      	lsls	r3, r3, #2
    785e:	4413      	add	r3, r2
    7860:	009b      	lsls	r3, r3, #2
    7862:	440b      	add	r3, r1
    7864:	330c      	adds	r3, #12
    7866:	681b      	ldr	r3, [r3, #0]
    7868:	b29b      	uxth	r3, r3
    786a:	461a      	mov	r2, r3
    786c:	2100      	movs	r1, #0
    786e:	6838      	ldr	r0, [r7, #0]
    7870:	4b2f      	ldr	r3, [pc, #188]	; (7930 <_pwm_init+0x208>)
    7872:	4798      	blx	r3
		hri_tccount16_write_CC_reg(hw, 1, (uint16_t)_tcs[i].cc1);
    7874:	f997 200f 	ldrsb.w	r2, [r7, #15]
    7878:	4928      	ldr	r1, [pc, #160]	; (791c <_pwm_init+0x1f4>)
    787a:	4613      	mov	r3, r2
    787c:	009b      	lsls	r3, r3, #2
    787e:	4413      	add	r3, r2
    7880:	009b      	lsls	r3, r3, #2
    7882:	440b      	add	r3, r1
    7884:	3310      	adds	r3, #16
    7886:	681b      	ldr	r3, [r3, #0]
    7888:	b29b      	uxth	r3, r3
    788a:	461a      	mov	r2, r3
    788c:	2101      	movs	r1, #1
    788e:	6838      	ldr	r0, [r7, #0]
    7890:	4b27      	ldr	r3, [pc, #156]	; (7930 <_pwm_init+0x208>)
    7892:	4798      	blx	r3
    7894:	e002      	b.n	789c <_pwm_init+0x174>
	} else {
		/* 8-bit resolution is not accepted by duty cycle control */
		return -1;
    7896:	f04f 33ff 	mov.w	r3, #4294967295
    789a:	e02e      	b.n	78fa <_pwm_init+0x1d2>
	}

	_tc_init_irq_param(hw, (void *)device);
    789c:	6879      	ldr	r1, [r7, #4]
    789e:	6838      	ldr	r0, [r7, #0]
    78a0:	4b24      	ldr	r3, [pc, #144]	; (7934 <_pwm_init+0x20c>)
    78a2:	4798      	blx	r3
	NVIC_DisableIRQ(_tcs[i].irq);
    78a4:	f997 200f 	ldrsb.w	r2, [r7, #15]
    78a8:	491c      	ldr	r1, [pc, #112]	; (791c <_pwm_init+0x1f4>)
    78aa:	4613      	mov	r3, r2
    78ac:	009b      	lsls	r3, r3, #2
    78ae:	4413      	add	r3, r2
    78b0:	009b      	lsls	r3, r3, #2
    78b2:	440b      	add	r3, r1
    78b4:	3302      	adds	r3, #2
    78b6:	f9b3 3000 	ldrsh.w	r3, [r3]
    78ba:	4618      	mov	r0, r3
    78bc:	4b1e      	ldr	r3, [pc, #120]	; (7938 <_pwm_init+0x210>)
    78be:	4798      	blx	r3
	NVIC_ClearPendingIRQ(_tcs[i].irq);
    78c0:	f997 200f 	ldrsb.w	r2, [r7, #15]
    78c4:	4915      	ldr	r1, [pc, #84]	; (791c <_pwm_init+0x1f4>)
    78c6:	4613      	mov	r3, r2
    78c8:	009b      	lsls	r3, r3, #2
    78ca:	4413      	add	r3, r2
    78cc:	009b      	lsls	r3, r3, #2
    78ce:	440b      	add	r3, r1
    78d0:	3302      	adds	r3, #2
    78d2:	f9b3 3000 	ldrsh.w	r3, [r3]
    78d6:	4618      	mov	r0, r3
    78d8:	4b18      	ldr	r3, [pc, #96]	; (793c <_pwm_init+0x214>)
    78da:	4798      	blx	r3
	NVIC_EnableIRQ(_tcs[i].irq);
    78dc:	f997 200f 	ldrsb.w	r2, [r7, #15]
    78e0:	490e      	ldr	r1, [pc, #56]	; (791c <_pwm_init+0x1f4>)
    78e2:	4613      	mov	r3, r2
    78e4:	009b      	lsls	r3, r3, #2
    78e6:	4413      	add	r3, r2
    78e8:	009b      	lsls	r3, r3, #2
    78ea:	440b      	add	r3, r1
    78ec:	3302      	adds	r3, #2
    78ee:	f9b3 3000 	ldrsh.w	r3, [r3]
    78f2:	4618      	mov	r0, r3
    78f4:	4b12      	ldr	r3, [pc, #72]	; (7940 <_pwm_init+0x218>)
    78f6:	4798      	blx	r3

	return 0;
    78f8:	2300      	movs	r3, #0
}
    78fa:	4618      	mov	r0, r3
    78fc:	3710      	adds	r7, #16
    78fe:	46bd      	mov	sp, r7
    7900:	bd80      	pop	{r7, pc}
    7902:	bf00      	nop
    7904:	00007a95 	.word	0x00007a95
    7908:	0000721d 	.word	0x0000721d
    790c:	0000730d 	.word	0x0000730d
    7910:	000072e5 	.word	0x000072e5
    7914:	000071f9 	.word	0x000071f9
    7918:	0000733d 	.word	0x0000733d
    791c:	20000030 	.word	0x20000030
    7920:	0000739d 	.word	0x0000739d
    7924:	00007361 	.word	0x00007361
    7928:	0000737f 	.word	0x0000737f
    792c:	00007449 	.word	0x00007449
    7930:	00007415 	.word	0x00007415
    7934:	00007afd 	.word	0x00007afd
    7938:	00007179 	.word	0x00007179
    793c:	000071bd 	.word	0x000071bd
    7940:	0000713d 	.word	0x0000713d

00007944 <_tc_get_timer>:

/**
 * \brief Retrieve timer helper functions
 */
struct _timer_hpl_interface *_tc_get_timer(void)
{
    7944:	b480      	push	{r7}
    7946:	af00      	add	r7, sp, #0
	return NULL;
    7948:	2300      	movs	r3, #0
}
    794a:	4618      	mov	r0, r3
    794c:	46bd      	mov	sp, r7
    794e:	f85d 7b04 	ldr.w	r7, [sp], #4
    7952:	4770      	bx	lr

00007954 <_tc_get_pwm>:

/**
 * \brief Retrieve pwm helper functions
 */
struct _pwm_hpl_interface *_tc_get_pwm(void)
{
    7954:	b480      	push	{r7}
    7956:	af00      	add	r7, sp, #0
	return NULL;
    7958:	2300      	movs	r3, #0
}
    795a:	4618      	mov	r0, r3
    795c:	46bd      	mov	sp, r7
    795e:	f85d 7b04 	ldr.w	r7, [sp], #4
    7962:	4770      	bx	lr

00007964 <tc_interrupt_handler>:
 * \internal TC interrupt handler for Timer
 *
 * \param[in] instance TC instance number
 */
static void tc_interrupt_handler(struct _timer_device *device)
{
    7964:	b580      	push	{r7, lr}
    7966:	b084      	sub	sp, #16
    7968:	af00      	add	r7, sp, #0
    796a:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    796c:	687b      	ldr	r3, [r7, #4]
    796e:	68db      	ldr	r3, [r3, #12]
    7970:	60fb      	str	r3, [r7, #12]

	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    7972:	68f8      	ldr	r0, [r7, #12]
    7974:	4b07      	ldr	r3, [pc, #28]	; (7994 <tc_interrupt_handler+0x30>)
    7976:	4798      	blx	r3
    7978:	4603      	mov	r3, r0
    797a:	2b00      	cmp	r3, #0
    797c:	d006      	beq.n	798c <tc_interrupt_handler+0x28>
		hri_tc_clear_interrupt_OVF_bit(hw);
    797e:	68f8      	ldr	r0, [r7, #12]
    7980:	4b05      	ldr	r3, [pc, #20]	; (7998 <tc_interrupt_handler+0x34>)
    7982:	4798      	blx	r3
		device->timer_cb.period_expired(device);
    7984:	687b      	ldr	r3, [r7, #4]
    7986:	681b      	ldr	r3, [r3, #0]
    7988:	6878      	ldr	r0, [r7, #4]
    798a:	4798      	blx	r3
	}
}
    798c:	bf00      	nop
    798e:	3710      	adds	r7, #16
    7990:	46bd      	mov	sp, r7
    7992:	bd80      	pop	{r7, pc}
    7994:	00007245 	.word	0x00007245
    7998:	0000726d 	.word	0x0000726d

0000799c <tc_pwm_interrupt_handler>:
 * \internal TC interrupt handler for PWM
 *
 * \param[in] instance TC instance number
 */
static void tc_pwm_interrupt_handler(struct _pwm_device *device)
{
    799c:	b580      	push	{r7, lr}
    799e:	b084      	sub	sp, #16
    79a0:	af00      	add	r7, sp, #0
    79a2:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    79a4:	687b      	ldr	r3, [r7, #4]
    79a6:	691b      	ldr	r3, [r3, #16]
    79a8:	60fb      	str	r3, [r7, #12]

	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    79aa:	68f8      	ldr	r0, [r7, #12]
    79ac:	4b12      	ldr	r3, [pc, #72]	; (79f8 <tc_pwm_interrupt_handler+0x5c>)
    79ae:	4798      	blx	r3
    79b0:	4603      	mov	r3, r0
    79b2:	2b00      	cmp	r3, #0
    79b4:	d00a      	beq.n	79cc <tc_pwm_interrupt_handler+0x30>
		hri_tc_clear_interrupt_OVF_bit(hw);
    79b6:	68f8      	ldr	r0, [r7, #12]
    79b8:	4b10      	ldr	r3, [pc, #64]	; (79fc <tc_pwm_interrupt_handler+0x60>)
    79ba:	4798      	blx	r3
		if (NULL != device->callback.pwm_period_cb) {
    79bc:	687b      	ldr	r3, [r7, #4]
    79be:	681b      	ldr	r3, [r3, #0]
    79c0:	2b00      	cmp	r3, #0
    79c2:	d003      	beq.n	79cc <tc_pwm_interrupt_handler+0x30>
			device->callback.pwm_period_cb(device);
    79c4:	687b      	ldr	r3, [r7, #4]
    79c6:	681b      	ldr	r3, [r3, #0]
    79c8:	6878      	ldr	r0, [r7, #4]
    79ca:	4798      	blx	r3
		}
	}
	if (hri_tc_get_INTEN_ERR_bit(hw)) {
    79cc:	68f8      	ldr	r0, [r7, #12]
    79ce:	4b0c      	ldr	r3, [pc, #48]	; (7a00 <tc_pwm_interrupt_handler+0x64>)
    79d0:	4798      	blx	r3
    79d2:	4603      	mov	r3, r0
    79d4:	2b00      	cmp	r3, #0
    79d6:	d00a      	beq.n	79ee <tc_pwm_interrupt_handler+0x52>
		hri_tc_clear_interrupt_ERR_bit(hw);
    79d8:	68f8      	ldr	r0, [r7, #12]
    79da:	4b0a      	ldr	r3, [pc, #40]	; (7a04 <tc_pwm_interrupt_handler+0x68>)
    79dc:	4798      	blx	r3
		if (NULL != device->callback.pwm_error_cb) {
    79de:	687b      	ldr	r3, [r7, #4]
    79e0:	685b      	ldr	r3, [r3, #4]
    79e2:	2b00      	cmp	r3, #0
    79e4:	d003      	beq.n	79ee <tc_pwm_interrupt_handler+0x52>
			device->callback.pwm_error_cb(device);
    79e6:	687b      	ldr	r3, [r7, #4]
    79e8:	685b      	ldr	r3, [r3, #4]
    79ea:	6878      	ldr	r0, [r7, #4]
    79ec:	4798      	blx	r3
		}
	}
}
    79ee:	bf00      	nop
    79f0:	3710      	adds	r7, #16
    79f2:	46bd      	mov	sp, r7
    79f4:	bd80      	pop	{r7, pc}
    79f6:	bf00      	nop
    79f8:	00007245 	.word	0x00007245
    79fc:	0000726d 	.word	0x0000726d
    7a00:	000072bb 	.word	0x000072bb
    7a04:	00007287 	.word	0x00007287

00007a08 <TC0_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC0_Handler(void)
{
    7a08:	b580      	push	{r7, lr}
    7a0a:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc0_dev);
    7a0c:	4b03      	ldr	r3, [pc, #12]	; (7a1c <TC0_Handler+0x14>)
    7a0e:	681b      	ldr	r3, [r3, #0]
    7a10:	4618      	mov	r0, r3
    7a12:	4b03      	ldr	r3, [pc, #12]	; (7a20 <TC0_Handler+0x18>)
    7a14:	4798      	blx	r3
}
    7a16:	bf00      	nop
    7a18:	bd80      	pop	{r7, pc}
    7a1a:	bf00      	nop
    7a1c:	2000078c 	.word	0x2000078c
    7a20:	00007965 	.word	0x00007965

00007a24 <TC1_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC1_Handler(void)
{
    7a24:	b580      	push	{r7, lr}
    7a26:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc1_dev);
    7a28:	4b03      	ldr	r3, [pc, #12]	; (7a38 <TC1_Handler+0x14>)
    7a2a:	681b      	ldr	r3, [r3, #0]
    7a2c:	4618      	mov	r0, r3
    7a2e:	4b03      	ldr	r3, [pc, #12]	; (7a3c <TC1_Handler+0x18>)
    7a30:	4798      	blx	r3
}
    7a32:	bf00      	nop
    7a34:	bd80      	pop	{r7, pc}
    7a36:	bf00      	nop
    7a38:	20000790 	.word	0x20000790
    7a3c:	00007965 	.word	0x00007965

00007a40 <TC2_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC2_Handler(void)
{
    7a40:	b580      	push	{r7, lr}
    7a42:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc2_dev);
    7a44:	4b03      	ldr	r3, [pc, #12]	; (7a54 <TC2_Handler+0x14>)
    7a46:	681b      	ldr	r3, [r3, #0]
    7a48:	4618      	mov	r0, r3
    7a4a:	4b03      	ldr	r3, [pc, #12]	; (7a58 <TC2_Handler+0x18>)
    7a4c:	4798      	blx	r3
}
    7a4e:	bf00      	nop
    7a50:	bd80      	pop	{r7, pc}
    7a52:	bf00      	nop
    7a54:	20000794 	.word	0x20000794
    7a58:	00007965 	.word	0x00007965

00007a5c <TC3_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC3_Handler(void)
{
    7a5c:	b580      	push	{r7, lr}
    7a5e:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc3_dev);
    7a60:	4b03      	ldr	r3, [pc, #12]	; (7a70 <TC3_Handler+0x14>)
    7a62:	681b      	ldr	r3, [r3, #0]
    7a64:	4618      	mov	r0, r3
    7a66:	4b03      	ldr	r3, [pc, #12]	; (7a74 <TC3_Handler+0x18>)
    7a68:	4798      	blx	r3
}
    7a6a:	bf00      	nop
    7a6c:	bd80      	pop	{r7, pc}
    7a6e:	bf00      	nop
    7a70:	20000798 	.word	0x20000798
    7a74:	00007965 	.word	0x00007965

00007a78 <TC7_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC7_Handler(void)
{
    7a78:	b580      	push	{r7, lr}
    7a7a:	af00      	add	r7, sp, #0
	tc_pwm_interrupt_handler(_tc7_dev);
    7a7c:	4b03      	ldr	r3, [pc, #12]	; (7a8c <TC7_Handler+0x14>)
    7a7e:	681b      	ldr	r3, [r3, #0]
    7a80:	4618      	mov	r0, r3
    7a82:	4b03      	ldr	r3, [pc, #12]	; (7a90 <TC7_Handler+0x18>)
    7a84:	4798      	blx	r3
}
    7a86:	bf00      	nop
    7a88:	bd80      	pop	{r7, pc}
    7a8a:	bf00      	nop
    7a8c:	2000079c 	.word	0x2000079c
    7a90:	0000799d 	.word	0x0000799d

00007a94 <get_tc_index>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The index of TC configuration
 */
static int8_t get_tc_index(const void *const hw)
{
    7a94:	b580      	push	{r7, lr}
    7a96:	b084      	sub	sp, #16
    7a98:	af00      	add	r7, sp, #0
    7a9a:	6078      	str	r0, [r7, #4]
	uint8_t index = _get_hardware_offset(hw);
    7a9c:	6878      	ldr	r0, [r7, #4]
    7a9e:	4b13      	ldr	r3, [pc, #76]	; (7aec <get_tc_index+0x58>)
    7aa0:	4798      	blx	r3
    7aa2:	4603      	mov	r3, r0
    7aa4:	73bb      	strb	r3, [r7, #14]
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    7aa6:	2300      	movs	r3, #0
    7aa8:	73fb      	strb	r3, [r7, #15]
    7aaa:	e010      	b.n	7ace <get_tc_index+0x3a>
		if (_tcs[i].number == index) {
    7aac:	7bfa      	ldrb	r2, [r7, #15]
    7aae:	4910      	ldr	r1, [pc, #64]	; (7af0 <get_tc_index+0x5c>)
    7ab0:	4613      	mov	r3, r2
    7ab2:	009b      	lsls	r3, r3, #2
    7ab4:	4413      	add	r3, r2
    7ab6:	009b      	lsls	r3, r3, #2
    7ab8:	440b      	add	r3, r1
    7aba:	781b      	ldrb	r3, [r3, #0]
    7abc:	7bba      	ldrb	r2, [r7, #14]
    7abe:	429a      	cmp	r2, r3
    7ac0:	d102      	bne.n	7ac8 <get_tc_index+0x34>
			return i;
    7ac2:	f997 300f 	ldrsb.w	r3, [r7, #15]
    7ac6:	e00d      	b.n	7ae4 <get_tc_index+0x50>
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    7ac8:	7bfb      	ldrb	r3, [r7, #15]
    7aca:	3301      	adds	r3, #1
    7acc:	73fb      	strb	r3, [r7, #15]
    7ace:	7bfb      	ldrb	r3, [r7, #15]
    7ad0:	2b04      	cmp	r3, #4
    7ad2:	d9eb      	bls.n	7aac <get_tc_index+0x18>
		}
	}

	ASSERT(false);
    7ad4:	f240 2206 	movw	r2, #518	; 0x206
    7ad8:	4906      	ldr	r1, [pc, #24]	; (7af4 <get_tc_index+0x60>)
    7ada:	2000      	movs	r0, #0
    7adc:	4b06      	ldr	r3, [pc, #24]	; (7af8 <get_tc_index+0x64>)
    7ade:	4798      	blx	r3
	return -1;
    7ae0:	f04f 33ff 	mov.w	r3, #4294967295
}
    7ae4:	4618      	mov	r0, r3
    7ae6:	3710      	adds	r7, #16
    7ae8:	46bd      	mov	sp, r7
    7aea:	bd80      	pop	{r7, pc}
    7aec:	00007b81 	.word	0x00007b81
    7af0:	20000030 	.word	0x20000030
    7af4:	0000ce9c 	.word	0x0000ce9c
    7af8:	00003481 	.word	0x00003481

00007afc <_tc_init_irq_param>:

/**
 * \brief Init irq param with the given tc hardware instance
 */
static void _tc_init_irq_param(const void *const hw, void *dev)
{
    7afc:	b480      	push	{r7}
    7afe:	b083      	sub	sp, #12
    7b00:	af00      	add	r7, sp, #0
    7b02:	6078      	str	r0, [r7, #4]
    7b04:	6039      	str	r1, [r7, #0]
	if (hw == TC0) {
    7b06:	687b      	ldr	r3, [r7, #4]
    7b08:	4a13      	ldr	r2, [pc, #76]	; (7b58 <_tc_init_irq_param+0x5c>)
    7b0a:	4293      	cmp	r3, r2
    7b0c:	d102      	bne.n	7b14 <_tc_init_irq_param+0x18>
		_tc0_dev = (struct _timer_device *)dev;
    7b0e:	4a13      	ldr	r2, [pc, #76]	; (7b5c <_tc_init_irq_param+0x60>)
    7b10:	683b      	ldr	r3, [r7, #0]
    7b12:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC1) {
    7b14:	687b      	ldr	r3, [r7, #4]
    7b16:	4a12      	ldr	r2, [pc, #72]	; (7b60 <_tc_init_irq_param+0x64>)
    7b18:	4293      	cmp	r3, r2
    7b1a:	d102      	bne.n	7b22 <_tc_init_irq_param+0x26>
		_tc1_dev = (struct _timer_device *)dev;
    7b1c:	4a11      	ldr	r2, [pc, #68]	; (7b64 <_tc_init_irq_param+0x68>)
    7b1e:	683b      	ldr	r3, [r7, #0]
    7b20:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC2) {
    7b22:	687b      	ldr	r3, [r7, #4]
    7b24:	4a10      	ldr	r2, [pc, #64]	; (7b68 <_tc_init_irq_param+0x6c>)
    7b26:	4293      	cmp	r3, r2
    7b28:	d102      	bne.n	7b30 <_tc_init_irq_param+0x34>
		_tc2_dev = (struct _timer_device *)dev;
    7b2a:	4a10      	ldr	r2, [pc, #64]	; (7b6c <_tc_init_irq_param+0x70>)
    7b2c:	683b      	ldr	r3, [r7, #0]
    7b2e:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC3) {
    7b30:	687b      	ldr	r3, [r7, #4]
    7b32:	4a0f      	ldr	r2, [pc, #60]	; (7b70 <_tc_init_irq_param+0x74>)
    7b34:	4293      	cmp	r3, r2
    7b36:	d102      	bne.n	7b3e <_tc_init_irq_param+0x42>
		_tc3_dev = (struct _timer_device *)dev;
    7b38:	4a0e      	ldr	r2, [pc, #56]	; (7b74 <_tc_init_irq_param+0x78>)
    7b3a:	683b      	ldr	r3, [r7, #0]
    7b3c:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC7) {
    7b3e:	687b      	ldr	r3, [r7, #4]
    7b40:	4a0d      	ldr	r2, [pc, #52]	; (7b78 <_tc_init_irq_param+0x7c>)
    7b42:	4293      	cmp	r3, r2
    7b44:	d102      	bne.n	7b4c <_tc_init_irq_param+0x50>
		_tc7_dev = (struct _pwm_device *)dev;
    7b46:	4a0d      	ldr	r2, [pc, #52]	; (7b7c <_tc_init_irq_param+0x80>)
    7b48:	683b      	ldr	r3, [r7, #0]
    7b4a:	6013      	str	r3, [r2, #0]
	}
}
    7b4c:	bf00      	nop
    7b4e:	370c      	adds	r7, #12
    7b50:	46bd      	mov	sp, r7
    7b52:	f85d 7b04 	ldr.w	r7, [sp], #4
    7b56:	4770      	bx	lr
    7b58:	40003800 	.word	0x40003800
    7b5c:	2000078c 	.word	0x2000078c
    7b60:	40003c00 	.word	0x40003c00
    7b64:	20000790 	.word	0x20000790
    7b68:	4101a000 	.word	0x4101a000
    7b6c:	20000794 	.word	0x20000794
    7b70:	4101c000 	.word	0x4101c000
    7b74:	20000798 	.word	0x20000798
    7b78:	43001800 	.word	0x43001800
    7b7c:	2000079c 	.word	0x2000079c

00007b80 <_get_hardware_offset>:
 * \internal Retrieve TC hardware index
 *
 * \param[in] hw The pointer to hardware instance
 */
static inline uint8_t _get_hardware_offset(const void *const hw)
{
    7b80:	b4b0      	push	{r4, r5, r7}
    7b82:	b08d      	sub	sp, #52	; 0x34
    7b84:	af00      	add	r7, sp, #0
    7b86:	6078      	str	r0, [r7, #4]
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
    7b88:	4b13      	ldr	r3, [pc, #76]	; (7bd8 <_get_hardware_offset+0x58>)
    7b8a:	f107 040c 	add.w	r4, r7, #12
    7b8e:	461d      	mov	r5, r3
    7b90:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    7b92:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    7b94:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    7b98:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    7b9c:	2300      	movs	r3, #0
    7b9e:	62fb      	str	r3, [r7, #44]	; 0x2c
    7ba0:	e010      	b.n	7bc4 <_get_hardware_offset+0x44>
		if ((uint32_t)hw == (uint32_t)tc_modules[i]) {
    7ba2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    7ba4:	009b      	lsls	r3, r3, #2
    7ba6:	f107 0230 	add.w	r2, r7, #48	; 0x30
    7baa:	4413      	add	r3, r2
    7bac:	f853 3c24 	ldr.w	r3, [r3, #-36]
    7bb0:	461a      	mov	r2, r3
    7bb2:	687b      	ldr	r3, [r7, #4]
    7bb4:	429a      	cmp	r2, r3
    7bb6:	d102      	bne.n	7bbe <_get_hardware_offset+0x3e>
			return i;
    7bb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    7bba:	b2db      	uxtb	r3, r3
    7bbc:	e006      	b.n	7bcc <_get_hardware_offset+0x4c>
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    7bbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    7bc0:	3301      	adds	r3, #1
    7bc2:	62fb      	str	r3, [r7, #44]	; 0x2c
    7bc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    7bc6:	2b07      	cmp	r3, #7
    7bc8:	d9eb      	bls.n	7ba2 <_get_hardware_offset+0x22>
		}
	}
	return 0;
    7bca:	2300      	movs	r3, #0
}
    7bcc:	4618      	mov	r0, r3
    7bce:	3734      	adds	r7, #52	; 0x34
    7bd0:	46bd      	mov	sp, r7
    7bd2:	bcb0      	pop	{r4, r5, r7}
    7bd4:	4770      	bx	lr
    7bd6:	bf00      	nop
    7bd8:	0000ceb0 	.word	0x0000ceb0

00007bdc <__NVIC_EnableIRQ>:
{
    7bdc:	b480      	push	{r7}
    7bde:	b083      	sub	sp, #12
    7be0:	af00      	add	r7, sp, #0
    7be2:	4603      	mov	r3, r0
    7be4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    7be6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    7bea:	2b00      	cmp	r3, #0
    7bec:	db0b      	blt.n	7c06 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    7bee:	4909      	ldr	r1, [pc, #36]	; (7c14 <__NVIC_EnableIRQ+0x38>)
    7bf0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    7bf4:	095b      	lsrs	r3, r3, #5
    7bf6:	88fa      	ldrh	r2, [r7, #6]
    7bf8:	f002 021f 	and.w	r2, r2, #31
    7bfc:	2001      	movs	r0, #1
    7bfe:	fa00 f202 	lsl.w	r2, r0, r2
    7c02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    7c06:	bf00      	nop
    7c08:	370c      	adds	r7, #12
    7c0a:	46bd      	mov	sp, r7
    7c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
    7c10:	4770      	bx	lr
    7c12:	bf00      	nop
    7c14:	e000e100 	.word	0xe000e100

00007c18 <hri_oscctrl_get_DPLLSTATUS_reg>:
{
    7c18:	b480      	push	{r7}
    7c1a:	b087      	sub	sp, #28
    7c1c:	af00      	add	r7, sp, #0
    7c1e:	60f8      	str	r0, [r7, #12]
    7c20:	460b      	mov	r3, r1
    7c22:	607a      	str	r2, [r7, #4]
    7c24:	72fb      	strb	r3, [r7, #11]
	tmp = ((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg;
    7c26:	7afa      	ldrb	r2, [r7, #11]
    7c28:	68f9      	ldr	r1, [r7, #12]
    7c2a:	4613      	mov	r3, r2
    7c2c:	009b      	lsls	r3, r3, #2
    7c2e:	4413      	add	r3, r2
    7c30:	009b      	lsls	r3, r3, #2
    7c32:	440b      	add	r3, r1
    7c34:	3340      	adds	r3, #64	; 0x40
    7c36:	681b      	ldr	r3, [r3, #0]
    7c38:	617b      	str	r3, [r7, #20]
	tmp &= mask;
    7c3a:	697a      	ldr	r2, [r7, #20]
    7c3c:	687b      	ldr	r3, [r7, #4]
    7c3e:	4013      	ands	r3, r2
    7c40:	617b      	str	r3, [r7, #20]
	return tmp;
    7c42:	697b      	ldr	r3, [r7, #20]
}
    7c44:	4618      	mov	r0, r3
    7c46:	371c      	adds	r7, #28
    7c48:	46bd      	mov	sp, r7
    7c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
    7c4e:	4770      	bx	lr

00007c50 <hri_oscctrl_get_STATUS_reg>:
{
    7c50:	b480      	push	{r7}
    7c52:	b085      	sub	sp, #20
    7c54:	af00      	add	r7, sp, #0
    7c56:	6078      	str	r0, [r7, #4]
    7c58:	6039      	str	r1, [r7, #0]
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    7c5a:	687b      	ldr	r3, [r7, #4]
    7c5c:	691b      	ldr	r3, [r3, #16]
    7c5e:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    7c60:	68fa      	ldr	r2, [r7, #12]
    7c62:	683b      	ldr	r3, [r7, #0]
    7c64:	4013      	ands	r3, r2
    7c66:	60fb      	str	r3, [r7, #12]
	return tmp;
    7c68:	68fb      	ldr	r3, [r7, #12]
}
    7c6a:	4618      	mov	r0, r3
    7c6c:	3714      	adds	r7, #20
    7c6e:	46bd      	mov	sp, r7
    7c70:	f85d 7b04 	ldr.w	r7, [sp], #4
    7c74:	4770      	bx	lr

00007c76 <hri_oscctrl_get_DFLLCTRLB_MODE_bit>:
{
    7c76:	b480      	push	{r7}
    7c78:	b085      	sub	sp, #20
    7c7a:	af00      	add	r7, sp, #0
    7c7c:	6078      	str	r0, [r7, #4]
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
    7c7e:	687b      	ldr	r3, [r7, #4]
    7c80:	f893 3020 	ldrb.w	r3, [r3, #32]
    7c84:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLCTRLB_MODE) >> OSCCTRL_DFLLCTRLB_MODE_Pos;
    7c86:	7bfb      	ldrb	r3, [r7, #15]
    7c88:	f003 0301 	and.w	r3, r3, #1
    7c8c:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    7c8e:	7bfb      	ldrb	r3, [r7, #15]
    7c90:	2b00      	cmp	r3, #0
    7c92:	bf14      	ite	ne
    7c94:	2301      	movne	r3, #1
    7c96:	2300      	moveq	r3, #0
    7c98:	b2db      	uxtb	r3, r3
}
    7c9a:	4618      	mov	r0, r3
    7c9c:	3714      	adds	r7, #20
    7c9e:	46bd      	mov	sp, r7
    7ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
    7ca4:	4770      	bx	lr

00007ca6 <hri_usb_wait_for_sync>:
typedef uint8_t  hri_usbpipe_pintenset_reg_t;
typedef uint8_t  hri_usbpipe_pintflag_reg_t;
typedef uint8_t  hri_usbpipe_pstatus_reg_t;

static inline void hri_usb_wait_for_sync(const void *const hw, hri_usb_syncbusy_reg_t reg)
{
    7ca6:	b480      	push	{r7}
    7ca8:	b083      	sub	sp, #12
    7caa:	af00      	add	r7, sp, #0
    7cac:	6078      	str	r0, [r7, #4]
    7cae:	460b      	mov	r3, r1
    7cb0:	70fb      	strb	r3, [r7, #3]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    7cb2:	bf00      	nop
    7cb4:	687b      	ldr	r3, [r7, #4]
    7cb6:	789b      	ldrb	r3, [r3, #2]
    7cb8:	b2da      	uxtb	r2, r3
    7cba:	78fb      	ldrb	r3, [r7, #3]
    7cbc:	4013      	ands	r3, r2
    7cbe:	b2db      	uxtb	r3, r3
    7cc0:	2b00      	cmp	r3, #0
    7cc2:	d1f7      	bne.n	7cb4 <hri_usb_wait_for_sync+0xe>
	};
}
    7cc4:	bf00      	nop
    7cc6:	370c      	adds	r7, #12
    7cc8:	46bd      	mov	sp, r7
    7cca:	f85d 7b04 	ldr.w	r7, [sp], #4
    7cce:	4770      	bx	lr

00007cd0 <hri_usb_is_syncing>:

static inline bool hri_usb_is_syncing(const void *const hw, hri_usb_syncbusy_reg_t reg)
{
    7cd0:	b480      	push	{r7}
    7cd2:	b083      	sub	sp, #12
    7cd4:	af00      	add	r7, sp, #0
    7cd6:	6078      	str	r0, [r7, #4]
    7cd8:	460b      	mov	r3, r1
    7cda:	70fb      	strb	r3, [r7, #3]
	return ((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg;
    7cdc:	687b      	ldr	r3, [r7, #4]
    7cde:	789b      	ldrb	r3, [r3, #2]
    7ce0:	b2da      	uxtb	r2, r3
    7ce2:	78fb      	ldrb	r3, [r7, #3]
    7ce4:	4013      	ands	r3, r2
    7ce6:	b2db      	uxtb	r3, r3
    7ce8:	2b00      	cmp	r3, #0
    7cea:	bf14      	ite	ne
    7cec:	2301      	movne	r3, #1
    7cee:	2300      	moveq	r3, #0
    7cf0:	b2db      	uxtb	r3, r3
}
    7cf2:	4618      	mov	r0, r3
    7cf4:	370c      	adds	r7, #12
    7cf6:	46bd      	mov	sp, r7
    7cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
    7cfc:	4770      	bx	lr

00007cfe <hri_usbendpoint_get_EPINTFLAG_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL1;
}

static inline hri_usbendpoint_epintflag_reg_t
hri_usbendpoint_get_EPINTFLAG_reg(const void *const hw, uint8_t submodule_index, hri_usbendpoint_epintflag_reg_t mask)
{
    7cfe:	b480      	push	{r7}
    7d00:	b085      	sub	sp, #20
    7d02:	af00      	add	r7, sp, #0
    7d04:	6078      	str	r0, [r7, #4]
    7d06:	460b      	mov	r3, r1
    7d08:	70fb      	strb	r3, [r7, #3]
    7d0a:	4613      	mov	r3, r2
    7d0c:	70bb      	strb	r3, [r7, #2]
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    7d0e:	78fb      	ldrb	r3, [r7, #3]
    7d10:	687a      	ldr	r2, [r7, #4]
    7d12:	3308      	adds	r3, #8
    7d14:	015b      	lsls	r3, r3, #5
    7d16:	4413      	add	r3, r2
    7d18:	3307      	adds	r3, #7
    7d1a:	781b      	ldrb	r3, [r3, #0]
    7d1c:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    7d1e:	7bfa      	ldrb	r2, [r7, #15]
    7d20:	78bb      	ldrb	r3, [r7, #2]
    7d22:	4013      	ands	r3, r2
    7d24:	73fb      	strb	r3, [r7, #15]
	return tmp;
    7d26:	7bfb      	ldrb	r3, [r7, #15]
}
    7d28:	4618      	mov	r0, r3
    7d2a:	3714      	adds	r7, #20
    7d2c:	46bd      	mov	sp, r7
    7d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
    7d32:	4770      	bx	lr

00007d34 <hri_usbendpoint_read_EPINTFLAG_reg>:

static inline hri_usbendpoint_epintflag_reg_t hri_usbendpoint_read_EPINTFLAG_reg(const void *const hw,
                                                                                 uint8_t           submodule_index)
{
    7d34:	b480      	push	{r7}
    7d36:	b083      	sub	sp, #12
    7d38:	af00      	add	r7, sp, #0
    7d3a:	6078      	str	r0, [r7, #4]
    7d3c:	460b      	mov	r3, r1
    7d3e:	70fb      	strb	r3, [r7, #3]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    7d40:	78fb      	ldrb	r3, [r7, #3]
    7d42:	687a      	ldr	r2, [r7, #4]
    7d44:	3308      	adds	r3, #8
    7d46:	015b      	lsls	r3, r3, #5
    7d48:	4413      	add	r3, r2
    7d4a:	3307      	adds	r3, #7
    7d4c:	781b      	ldrb	r3, [r3, #0]
    7d4e:	b2db      	uxtb	r3, r3
}
    7d50:	4618      	mov	r0, r3
    7d52:	370c      	adds	r7, #12
    7d54:	46bd      	mov	sp, r7
    7d56:	f85d 7b04 	ldr.w	r7, [sp], #4
    7d5a:	4770      	bx	lr

00007d5c <hri_usbendpoint_clear_EPINTFLAG_reg>:

static inline void hri_usbendpoint_clear_EPINTFLAG_reg(const void *const hw, uint8_t submodule_index,
                                                       hri_usbendpoint_epintflag_reg_t mask)
{
    7d5c:	b480      	push	{r7}
    7d5e:	b083      	sub	sp, #12
    7d60:	af00      	add	r7, sp, #0
    7d62:	6078      	str	r0, [r7, #4]
    7d64:	460b      	mov	r3, r1
    7d66:	70fb      	strb	r3, [r7, #3]
    7d68:	4613      	mov	r3, r2
    7d6a:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    7d6c:	78fb      	ldrb	r3, [r7, #3]
    7d6e:	687a      	ldr	r2, [r7, #4]
    7d70:	3308      	adds	r3, #8
    7d72:	015b      	lsls	r3, r3, #5
    7d74:	4413      	add	r3, r2
    7d76:	3307      	adds	r3, #7
    7d78:	78ba      	ldrb	r2, [r7, #2]
    7d7a:	701a      	strb	r2, [r3, #0]
}
    7d7c:	bf00      	nop
    7d7e:	370c      	adds	r7, #12
    7d80:	46bd      	mov	sp, r7
    7d82:	f85d 7b04 	ldr.w	r7, [sp], #4
    7d86:	4770      	bx	lr

00007d88 <hri_usbendpoint_set_EPSTATUS_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUS_BK1RDY;
}

static inline void hri_usbendpoint_set_EPSTATUS_reg(const void *const hw, uint8_t submodule_index,
                                                    hri_usbendpoint_epstatus_reg_t mask)
{
    7d88:	b480      	push	{r7}
    7d8a:	b083      	sub	sp, #12
    7d8c:	af00      	add	r7, sp, #0
    7d8e:	6078      	str	r0, [r7, #4]
    7d90:	460b      	mov	r3, r1
    7d92:	70fb      	strb	r3, [r7, #3]
    7d94:	4613      	mov	r3, r2
    7d96:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    7d98:	78fb      	ldrb	r3, [r7, #3]
    7d9a:	687a      	ldr	r2, [r7, #4]
    7d9c:	3308      	adds	r3, #8
    7d9e:	015b      	lsls	r3, r3, #5
    7da0:	4413      	add	r3, r2
    7da2:	3305      	adds	r3, #5
    7da4:	78ba      	ldrb	r2, [r7, #2]
    7da6:	701a      	strb	r2, [r3, #0]
}
    7da8:	bf00      	nop
    7daa:	370c      	adds	r7, #12
    7dac:	46bd      	mov	sp, r7
    7dae:	f85d 7b04 	ldr.w	r7, [sp], #4
    7db2:	4770      	bx	lr

00007db4 <hri_usbendpoint_read_EPSTATUS_reg>:
	return tmp;
}

static inline hri_usbendpoint_epstatus_reg_t hri_usbendpoint_read_EPSTATUS_reg(const void *const hw,
                                                                               uint8_t           submodule_index)
{
    7db4:	b480      	push	{r7}
    7db6:	b083      	sub	sp, #12
    7db8:	af00      	add	r7, sp, #0
    7dba:	6078      	str	r0, [r7, #4]
    7dbc:	460b      	mov	r3, r1
    7dbe:	70fb      	strb	r3, [r7, #3]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    7dc0:	78fb      	ldrb	r3, [r7, #3]
    7dc2:	687a      	ldr	r2, [r7, #4]
    7dc4:	3308      	adds	r3, #8
    7dc6:	015b      	lsls	r3, r3, #5
    7dc8:	4413      	add	r3, r2
    7dca:	3306      	adds	r3, #6
    7dcc:	781b      	ldrb	r3, [r3, #0]
    7dce:	b2db      	uxtb	r3, r3
}
    7dd0:	4618      	mov	r0, r3
    7dd2:	370c      	adds	r7, #12
    7dd4:	46bd      	mov	sp, r7
    7dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
    7dda:	4770      	bx	lr

00007ddc <hri_usbendpoint_clear_EPSTATUS_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = ~data;
}

static inline void hri_usbendpoint_clear_EPSTATUS_reg(const void *const hw, uint8_t submodule_index,
                                                      hri_usbendpoint_epstatus_reg_t mask)
{
    7ddc:	b480      	push	{r7}
    7dde:	b083      	sub	sp, #12
    7de0:	af00      	add	r7, sp, #0
    7de2:	6078      	str	r0, [r7, #4]
    7de4:	460b      	mov	r3, r1
    7de6:	70fb      	strb	r3, [r7, #3]
    7de8:	4613      	mov	r3, r2
    7dea:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    7dec:	78fb      	ldrb	r3, [r7, #3]
    7dee:	687a      	ldr	r2, [r7, #4]
    7df0:	3308      	adds	r3, #8
    7df2:	015b      	lsls	r3, r3, #5
    7df4:	4413      	add	r3, r2
    7df6:	3304      	adds	r3, #4
    7df8:	78ba      	ldrb	r2, [r7, #2]
    7dfa:	701a      	strb	r2, [r3, #0]
}
    7dfc:	bf00      	nop
    7dfe:	370c      	adds	r7, #12
    7e00:	46bd      	mov	sp, r7
    7e02:	f85d 7b04 	ldr.w	r7, [sp], #4
    7e06:	4770      	bx	lr

00007e08 <hri_usbendpoint_clear_EPINTEN_RXSTP_bit>:
		((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = USB_DEVICE_EPINTENSET_RXSTP;
	}
}

static inline void hri_usbendpoint_clear_EPINTEN_RXSTP_bit(const void *const hw, uint8_t submodule_index)
{
    7e08:	b480      	push	{r7}
    7e0a:	b083      	sub	sp, #12
    7e0c:	af00      	add	r7, sp, #0
    7e0e:	6078      	str	r0, [r7, #4]
    7e10:	460b      	mov	r3, r1
    7e12:	70fb      	strb	r3, [r7, #3]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = USB_DEVICE_EPINTENSET_RXSTP;
    7e14:	78fb      	ldrb	r3, [r7, #3]
    7e16:	687a      	ldr	r2, [r7, #4]
    7e18:	015b      	lsls	r3, r3, #5
    7e1a:	4413      	add	r3, r2
    7e1c:	f503 7384 	add.w	r3, r3, #264	; 0x108
    7e20:	2210      	movs	r2, #16
    7e22:	701a      	strb	r2, [r3, #0]
}
    7e24:	bf00      	nop
    7e26:	370c      	adds	r7, #12
    7e28:	46bd      	mov	sp, r7
    7e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
    7e2e:	4770      	bx	lr

00007e30 <hri_usbendpoint_set_EPINTEN_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = USB_DEVICE_EPINTENSET_STALL1;
}

static inline void hri_usbendpoint_set_EPINTEN_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_usbendpoint_epintenset_reg_t mask)
{
    7e30:	b480      	push	{r7}
    7e32:	b083      	sub	sp, #12
    7e34:	af00      	add	r7, sp, #0
    7e36:	6078      	str	r0, [r7, #4]
    7e38:	460b      	mov	r3, r1
    7e3a:	70fb      	strb	r3, [r7, #3]
    7e3c:	4613      	mov	r3, r2
    7e3e:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    7e40:	78fb      	ldrb	r3, [r7, #3]
    7e42:	687a      	ldr	r2, [r7, #4]
    7e44:	015b      	lsls	r3, r3, #5
    7e46:	4413      	add	r3, r2
    7e48:	f203 1309 	addw	r3, r3, #265	; 0x109
    7e4c:	78ba      	ldrb	r2, [r7, #2]
    7e4e:	701a      	strb	r2, [r3, #0]
}
    7e50:	bf00      	nop
    7e52:	370c      	adds	r7, #12
    7e54:	46bd      	mov	sp, r7
    7e56:	f85d 7b04 	ldr.w	r7, [sp], #4
    7e5a:	4770      	bx	lr

00007e5c <hri_usbendpoint_clear_EPINTEN_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = ~data;
}

static inline void hri_usbendpoint_clear_EPINTEN_reg(const void *const hw, uint8_t submodule_index,
                                                     hri_usbendpoint_epintenset_reg_t mask)
{
    7e5c:	b480      	push	{r7}
    7e5e:	b083      	sub	sp, #12
    7e60:	af00      	add	r7, sp, #0
    7e62:	6078      	str	r0, [r7, #4]
    7e64:	460b      	mov	r3, r1
    7e66:	70fb      	strb	r3, [r7, #3]
    7e68:	4613      	mov	r3, r2
    7e6a:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    7e6c:	78fb      	ldrb	r3, [r7, #3]
    7e6e:	687a      	ldr	r2, [r7, #4]
    7e70:	015b      	lsls	r3, r3, #5
    7e72:	4413      	add	r3, r2
    7e74:	f503 7384 	add.w	r3, r3, #264	; 0x108
    7e78:	78ba      	ldrb	r2, [r7, #2]
    7e7a:	701a      	strb	r2, [r3, #0]
}
    7e7c:	bf00      	nop
    7e7e:	370c      	adds	r7, #12
    7e80:	46bd      	mov	sp, r7
    7e82:	f85d 7b04 	ldr.w	r7, [sp], #4
    7e86:	4770      	bx	lr

00007e88 <hri_usbendpoint_read_EPCFG_EPTYPE0_bf>:
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_EPTYPE0_bf(const void *const hw,
                                                                                uint8_t           submodule_index)
{
    7e88:	b480      	push	{r7}
    7e8a:	b085      	sub	sp, #20
    7e8c:	af00      	add	r7, sp, #0
    7e8e:	6078      	str	r0, [r7, #4]
    7e90:	460b      	mov	r3, r1
    7e92:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    7e94:	78fb      	ldrb	r3, [r7, #3]
    7e96:	687a      	ldr	r2, [r7, #4]
    7e98:	3308      	adds	r3, #8
    7e9a:	015b      	lsls	r3, r3, #5
    7e9c:	4413      	add	r3, r2
    7e9e:	781b      	ldrb	r3, [r3, #0]
    7ea0:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE0_Msk) >> USB_DEVICE_EPCFG_EPTYPE0_Pos;
    7ea2:	7bfb      	ldrb	r3, [r7, #15]
    7ea4:	f003 0307 	and.w	r3, r3, #7
    7ea8:	73fb      	strb	r3, [r7, #15]
	return tmp;
    7eaa:	7bfb      	ldrb	r3, [r7, #15]
}
    7eac:	4618      	mov	r0, r3
    7eae:	3714      	adds	r7, #20
    7eb0:	46bd      	mov	sp, r7
    7eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
    7eb6:	4770      	bx	lr

00007eb8 <hri_usbendpoint_read_EPCFG_EPTYPE1_bf>:
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_EPTYPE1_bf(const void *const hw,
                                                                                uint8_t           submodule_index)
{
    7eb8:	b480      	push	{r7}
    7eba:	b085      	sub	sp, #20
    7ebc:	af00      	add	r7, sp, #0
    7ebe:	6078      	str	r0, [r7, #4]
    7ec0:	460b      	mov	r3, r1
    7ec2:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    7ec4:	78fb      	ldrb	r3, [r7, #3]
    7ec6:	687a      	ldr	r2, [r7, #4]
    7ec8:	3308      	adds	r3, #8
    7eca:	015b      	lsls	r3, r3, #5
    7ecc:	4413      	add	r3, r2
    7ece:	781b      	ldrb	r3, [r3, #0]
    7ed0:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE1_Msk) >> USB_DEVICE_EPCFG_EPTYPE1_Pos;
    7ed2:	7bfb      	ldrb	r3, [r7, #15]
    7ed4:	091b      	lsrs	r3, r3, #4
    7ed6:	b2db      	uxtb	r3, r3
    7ed8:	f003 0307 	and.w	r3, r3, #7
    7edc:	73fb      	strb	r3, [r7, #15]
	return tmp;
    7ede:	7bfb      	ldrb	r3, [r7, #15]
}
    7ee0:	4618      	mov	r0, r3
    7ee2:	3714      	adds	r7, #20
    7ee4:	46bd      	mov	sp, r7
    7ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
    7eea:	4770      	bx	lr

00007eec <hri_usbendpoint_write_EPCFG_reg>:
	return tmp;
}

static inline void hri_usbendpoint_write_EPCFG_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_usbendpoint_epcfg_reg_t data)
{
    7eec:	b480      	push	{r7}
    7eee:	b083      	sub	sp, #12
    7ef0:	af00      	add	r7, sp, #0
    7ef2:	6078      	str	r0, [r7, #4]
    7ef4:	460b      	mov	r3, r1
    7ef6:	70fb      	strb	r3, [r7, #3]
    7ef8:	4613      	mov	r3, r2
    7efa:	70bb      	strb	r3, [r7, #2]
	USB_CRITICAL_SECTION_ENTER();
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    7efc:	78fb      	ldrb	r3, [r7, #3]
    7efe:	687a      	ldr	r2, [r7, #4]
    7f00:	3308      	adds	r3, #8
    7f02:	015b      	lsls	r3, r3, #5
    7f04:	4413      	add	r3, r2
    7f06:	78ba      	ldrb	r2, [r7, #2]
    7f08:	701a      	strb	r2, [r3, #0]
	USB_CRITICAL_SECTION_LEAVE();
}
    7f0a:	bf00      	nop
    7f0c:	370c      	adds	r7, #12
    7f0e:	46bd      	mov	sp, r7
    7f10:	f85d 7b04 	ldr.w	r7, [sp], #4
    7f14:	4770      	bx	lr

00007f16 <hri_usbendpoint_read_EPCFG_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg ^= mask;
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_reg(const void *const hw, uint8_t submodule_index)
{
    7f16:	b480      	push	{r7}
    7f18:	b083      	sub	sp, #12
    7f1a:	af00      	add	r7, sp, #0
    7f1c:	6078      	str	r0, [r7, #4]
    7f1e:	460b      	mov	r3, r1
    7f20:	70fb      	strb	r3, [r7, #3]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    7f22:	78fb      	ldrb	r3, [r7, #3]
    7f24:	687a      	ldr	r2, [r7, #4]
    7f26:	3308      	adds	r3, #8
    7f28:	015b      	lsls	r3, r3, #5
    7f2a:	4413      	add	r3, r2
    7f2c:	781b      	ldrb	r3, [r3, #0]
    7f2e:	b2db      	uxtb	r3, r3
}
    7f30:	4618      	mov	r0, r3
    7f32:	370c      	adds	r7, #12
    7f34:	46bd      	mov	sp, r7
    7f36:	f85d 7b04 	ldr.w	r7, [sp], #4
    7f3a:	4770      	bx	lr

00007f3c <hri_usbdevice_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_usbdevice_intflag_reg_t hri_usbdevice_read_INTFLAG_reg(const void *const hw)
{
    7f3c:	b480      	push	{r7}
    7f3e:	b083      	sub	sp, #12
    7f40:	af00      	add	r7, sp, #0
    7f42:	6078      	str	r0, [r7, #4]
	return ((Usb *)hw)->DEVICE.INTFLAG.reg;
    7f44:	687b      	ldr	r3, [r7, #4]
    7f46:	8b9b      	ldrh	r3, [r3, #28]
    7f48:	b29b      	uxth	r3, r3
}
    7f4a:	4618      	mov	r0, r3
    7f4c:	370c      	adds	r7, #12
    7f4e:	46bd      	mov	sp, r7
    7f50:	f85d 7b04 	ldr.w	r7, [sp], #4
    7f54:	4770      	bx	lr

00007f56 <hri_usbdevice_clear_INTFLAG_reg>:

static inline void hri_usbdevice_clear_INTFLAG_reg(const void *const hw, hri_usbdevice_intflag_reg_t mask)
{
    7f56:	b480      	push	{r7}
    7f58:	b083      	sub	sp, #12
    7f5a:	af00      	add	r7, sp, #0
    7f5c:	6078      	str	r0, [r7, #4]
    7f5e:	460b      	mov	r3, r1
    7f60:	807b      	strh	r3, [r7, #2]
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    7f62:	687b      	ldr	r3, [r7, #4]
    7f64:	887a      	ldrh	r2, [r7, #2]
    7f66:	839a      	strh	r2, [r3, #28]
}
    7f68:	bf00      	nop
    7f6a:	370c      	adds	r7, #12
    7f6c:	46bd      	mov	sp, r7
    7f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
    7f72:	4770      	bx	lr

00007f74 <hri_usbdevice_set_INTEN_reg>:
{
	((Usb *)hw)->DEVICE.INTENCLR.reg = USB_DEVICE_INTENSET_LPMSUSP;
}

static inline void hri_usbdevice_set_INTEN_reg(const void *const hw, hri_usbdevice_intenset_reg_t mask)
{
    7f74:	b480      	push	{r7}
    7f76:	b083      	sub	sp, #12
    7f78:	af00      	add	r7, sp, #0
    7f7a:	6078      	str	r0, [r7, #4]
    7f7c:	460b      	mov	r3, r1
    7f7e:	807b      	strh	r3, [r7, #2]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    7f80:	687b      	ldr	r3, [r7, #4]
    7f82:	887a      	ldrh	r2, [r7, #2]
    7f84:	831a      	strh	r2, [r3, #24]
}
    7f86:	bf00      	nop
    7f88:	370c      	adds	r7, #12
    7f8a:	46bd      	mov	sp, r7
    7f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
    7f90:	4770      	bx	lr

00007f92 <hri_usbdevice_read_INTEN_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_usbdevice_intenset_reg_t hri_usbdevice_read_INTEN_reg(const void *const hw)
{
    7f92:	b480      	push	{r7}
    7f94:	b083      	sub	sp, #12
    7f96:	af00      	add	r7, sp, #0
    7f98:	6078      	str	r0, [r7, #4]
	return ((Usb *)hw)->DEVICE.INTENSET.reg;
    7f9a:	687b      	ldr	r3, [r7, #4]
    7f9c:	8b1b      	ldrh	r3, [r3, #24]
    7f9e:	b29b      	uxth	r3, r3
}
    7fa0:	4618      	mov	r0, r3
    7fa2:	370c      	adds	r7, #12
    7fa4:	46bd      	mov	sp, r7
    7fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
    7faa:	4770      	bx	lr

00007fac <hri_usbdevice_clear_INTEN_reg>:
	((Usb *)hw)->DEVICE.INTENSET.reg = data;
	((Usb *)hw)->DEVICE.INTENCLR.reg = ~data;
}

static inline void hri_usbdevice_clear_INTEN_reg(const void *const hw, hri_usbdevice_intenset_reg_t mask)
{
    7fac:	b480      	push	{r7}
    7fae:	b083      	sub	sp, #12
    7fb0:	af00      	add	r7, sp, #0
    7fb2:	6078      	str	r0, [r7, #4]
    7fb4:	460b      	mov	r3, r1
    7fb6:	807b      	strh	r3, [r7, #2]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    7fb8:	687b      	ldr	r3, [r7, #4]
    7fba:	887a      	ldrh	r2, [r7, #2]
    7fbc:	829a      	strh	r2, [r3, #20]
}
    7fbe:	bf00      	nop
    7fc0:	370c      	adds	r7, #12
    7fc2:	46bd      	mov	sp, r7
    7fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
    7fc8:	4770      	bx	lr

00007fca <hri_usb_get_SYNCBUSY_reg>:
{
	return (((Usb *)hw)->HOST.SYNCBUSY.reg & USB_SYNCBUSY_ENABLE) >> USB_SYNCBUSY_ENABLE_Pos;
}

static inline hri_usb_syncbusy_reg_t hri_usb_get_SYNCBUSY_reg(const void *const hw, hri_usb_syncbusy_reg_t mask)
{
    7fca:	b480      	push	{r7}
    7fcc:	b085      	sub	sp, #20
    7fce:	af00      	add	r7, sp, #0
    7fd0:	6078      	str	r0, [r7, #4]
    7fd2:	460b      	mov	r3, r1
    7fd4:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	tmp = ((Usb *)hw)->HOST.SYNCBUSY.reg;
    7fd6:	687b      	ldr	r3, [r7, #4]
    7fd8:	789b      	ldrb	r3, [r3, #2]
    7fda:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    7fdc:	7bfa      	ldrb	r2, [r7, #15]
    7fde:	78fb      	ldrb	r3, [r7, #3]
    7fe0:	4013      	ands	r3, r2
    7fe2:	73fb      	strb	r3, [r7, #15]
	return tmp;
    7fe4:	7bfb      	ldrb	r3, [r7, #15]
}
    7fe6:	4618      	mov	r0, r3
    7fe8:	3714      	adds	r7, #20
    7fea:	46bd      	mov	sp, r7
    7fec:	f85d 7b04 	ldr.w	r7, [sp], #4
    7ff0:	4770      	bx	lr
	...

00007ff4 <hri_usb_clear_CTRLA_ENABLE_bit>:
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_SWRST | USB_SYNCBUSY_ENABLE);
	USB_CRITICAL_SECTION_LEAVE();
}

static inline void hri_usb_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    7ff4:	b580      	push	{r7, lr}
    7ff6:	b082      	sub	sp, #8
    7ff8:	af00      	add	r7, sp, #0
    7ffa:	6078      	str	r0, [r7, #4]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.CTRLA.reg &= ~USB_CTRLA_ENABLE;
    7ffc:	687b      	ldr	r3, [r7, #4]
    7ffe:	781b      	ldrb	r3, [r3, #0]
    8000:	b2db      	uxtb	r3, r3
    8002:	f023 0302 	bic.w	r3, r3, #2
    8006:	b2da      	uxtb	r2, r3
    8008:	687b      	ldr	r3, [r7, #4]
    800a:	701a      	strb	r2, [r3, #0]
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_SWRST | USB_SYNCBUSY_ENABLE);
    800c:	2103      	movs	r1, #3
    800e:	6878      	ldr	r0, [r7, #4]
    8010:	4b02      	ldr	r3, [pc, #8]	; (801c <hri_usb_clear_CTRLA_ENABLE_bit+0x28>)
    8012:	4798      	blx	r3
	USB_CRITICAL_SECTION_LEAVE();
}
    8014:	bf00      	nop
    8016:	3708      	adds	r7, #8
    8018:	46bd      	mov	sp, r7
    801a:	bd80      	pop	{r7, pc}
    801c:	00007ca7 	.word	0x00007ca7

00008020 <hri_usb_get_CTRLA_reg>:
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usb_ctrla_reg_t hri_usb_get_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t mask)
{
    8020:	b580      	push	{r7, lr}
    8022:	b084      	sub	sp, #16
    8024:	af00      	add	r7, sp, #0
    8026:	6078      	str	r0, [r7, #4]
    8028:	460b      	mov	r3, r1
    802a:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
    802c:	2103      	movs	r1, #3
    802e:	6878      	ldr	r0, [r7, #4]
    8030:	4b06      	ldr	r3, [pc, #24]	; (804c <hri_usb_get_CTRLA_reg+0x2c>)
    8032:	4798      	blx	r3
	tmp = ((Usb *)hw)->HOST.CTRLA.reg;
    8034:	687b      	ldr	r3, [r7, #4]
    8036:	781b      	ldrb	r3, [r3, #0]
    8038:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    803a:	7bfa      	ldrb	r2, [r7, #15]
    803c:	78fb      	ldrb	r3, [r7, #3]
    803e:	4013      	ands	r3, r2
    8040:	73fb      	strb	r3, [r7, #15]
	return tmp;
    8042:	7bfb      	ldrb	r3, [r7, #15]
}
    8044:	4618      	mov	r0, r3
    8046:	3710      	adds	r7, #16
    8048:	46bd      	mov	sp, r7
    804a:	bd80      	pop	{r7, pc}
    804c:	00007ca7 	.word	0x00007ca7

00008050 <hri_usb_write_CTRLA_reg>:

static inline void hri_usb_write_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t data)
{
    8050:	b580      	push	{r7, lr}
    8052:	b082      	sub	sp, #8
    8054:	af00      	add	r7, sp, #0
    8056:	6078      	str	r0, [r7, #4]
    8058:	460b      	mov	r3, r1
    805a:	70fb      	strb	r3, [r7, #3]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.CTRLA.reg = data;
    805c:	687b      	ldr	r3, [r7, #4]
    805e:	78fa      	ldrb	r2, [r7, #3]
    8060:	701a      	strb	r2, [r3, #0]
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
    8062:	2103      	movs	r1, #3
    8064:	6878      	ldr	r0, [r7, #4]
    8066:	4b03      	ldr	r3, [pc, #12]	; (8074 <hri_usb_write_CTRLA_reg+0x24>)
    8068:	4798      	blx	r3
	USB_CRITICAL_SECTION_LEAVE();
}
    806a:	bf00      	nop
    806c:	3708      	adds	r7, #8
    806e:	46bd      	mov	sp, r7
    8070:	bd80      	pop	{r7, pc}
    8072:	bf00      	nop
    8074:	00007ca7 	.word	0x00007ca7

00008078 <hri_usb_read_CTRLA_reg>:
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usb_ctrla_reg_t hri_usb_read_CTRLA_reg(const void *const hw)
{
    8078:	b580      	push	{r7, lr}
    807a:	b082      	sub	sp, #8
    807c:	af00      	add	r7, sp, #0
    807e:	6078      	str	r0, [r7, #4]
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
    8080:	2103      	movs	r1, #3
    8082:	6878      	ldr	r0, [r7, #4]
    8084:	4b04      	ldr	r3, [pc, #16]	; (8098 <hri_usb_read_CTRLA_reg+0x20>)
    8086:	4798      	blx	r3
	return ((Usb *)hw)->HOST.CTRLA.reg;
    8088:	687b      	ldr	r3, [r7, #4]
    808a:	781b      	ldrb	r3, [r3, #0]
    808c:	b2db      	uxtb	r3, r3
}
    808e:	4618      	mov	r0, r3
    8090:	3708      	adds	r7, #8
    8092:	46bd      	mov	sp, r7
    8094:	bd80      	pop	{r7, pc}
    8096:	bf00      	nop
    8098:	00007ca7 	.word	0x00007ca7

0000809c <hri_usbdevice_clear_CTRLB_DETACH_bit>:
	((Usb *)hw)->DEVICE.CTRLB.reg = tmp;
	USB_CRITICAL_SECTION_LEAVE();
}

static inline void hri_usbdevice_clear_CTRLB_DETACH_bit(const void *const hw)
{
    809c:	b480      	push	{r7}
    809e:	b083      	sub	sp, #12
    80a0:	af00      	add	r7, sp, #0
    80a2:	6078      	str	r0, [r7, #4]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->DEVICE.CTRLB.reg &= ~USB_DEVICE_CTRLB_DETACH;
    80a4:	687b      	ldr	r3, [r7, #4]
    80a6:	891b      	ldrh	r3, [r3, #8]
    80a8:	b29b      	uxth	r3, r3
    80aa:	f023 0301 	bic.w	r3, r3, #1
    80ae:	b29a      	uxth	r2, r3
    80b0:	687b      	ldr	r3, [r7, #4]
    80b2:	811a      	strh	r2, [r3, #8]
	USB_CRITICAL_SECTION_LEAVE();
}
    80b4:	bf00      	nop
    80b6:	370c      	adds	r7, #12
    80b8:	46bd      	mov	sp, r7
    80ba:	f85d 7b04 	ldr.w	r7, [sp], #4
    80be:	4770      	bx	lr

000080c0 <hri_usbdevice_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_usbdevice_write_CTRLB_reg(const void *const hw, hri_usbdevice_ctrlb_reg_t data)
{
    80c0:	b480      	push	{r7}
    80c2:	b083      	sub	sp, #12
    80c4:	af00      	add	r7, sp, #0
    80c6:	6078      	str	r0, [r7, #4]
    80c8:	460b      	mov	r3, r1
    80ca:	807b      	strh	r3, [r7, #2]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->DEVICE.CTRLB.reg = data;
    80cc:	687b      	ldr	r3, [r7, #4]
    80ce:	887a      	ldrh	r2, [r7, #2]
    80d0:	811a      	strh	r2, [r3, #8]
	USB_CRITICAL_SECTION_LEAVE();
}
    80d2:	bf00      	nop
    80d4:	370c      	adds	r7, #12
    80d6:	46bd      	mov	sp, r7
    80d8:	f85d 7b04 	ldr.w	r7, [sp], #4
    80dc:	4770      	bx	lr

000080de <hri_usbdevice_write_DADD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_usbdevice_write_DADD_reg(const void *const hw, hri_usbdevice_dadd_reg_t data)
{
    80de:	b480      	push	{r7}
    80e0:	b083      	sub	sp, #12
    80e2:	af00      	add	r7, sp, #0
    80e4:	6078      	str	r0, [r7, #4]
    80e6:	460b      	mov	r3, r1
    80e8:	70fb      	strb	r3, [r7, #3]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->DEVICE.DADD.reg = data;
    80ea:	687b      	ldr	r3, [r7, #4]
    80ec:	78fa      	ldrb	r2, [r7, #3]
    80ee:	729a      	strb	r2, [r3, #10]
	USB_CRITICAL_SECTION_LEAVE();
}
    80f0:	bf00      	nop
    80f2:	370c      	adds	r7, #12
    80f4:	46bd      	mov	sp, r7
    80f6:	f85d 7b04 	ldr.w	r7, [sp], #4
    80fa:	4770      	bx	lr

000080fc <hri_usb_write_DESCADD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_usb_write_DESCADD_reg(const void *const hw, hri_usb_descadd_reg_t data)
{
    80fc:	b480      	push	{r7}
    80fe:	b083      	sub	sp, #12
    8100:	af00      	add	r7, sp, #0
    8102:	6078      	str	r0, [r7, #4]
    8104:	6039      	str	r1, [r7, #0]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.DESCADD.reg = data;
    8106:	687b      	ldr	r3, [r7, #4]
    8108:	683a      	ldr	r2, [r7, #0]
    810a:	625a      	str	r2, [r3, #36]	; 0x24
	USB_CRITICAL_SECTION_LEAVE();
}
    810c:	bf00      	nop
    810e:	370c      	adds	r7, #12
    8110:	46bd      	mov	sp, r7
    8112:	f85d 7b04 	ldr.w	r7, [sp], #4
    8116:	4770      	bx	lr

00008118 <_dummy_func_no_return>:
/**
 * \brief Dummy callback function
 * \return Always false.
 */
static bool _dummy_func_no_return(uint32_t unused0, uint32_t unused1)
{
    8118:	b480      	push	{r7}
    811a:	b083      	sub	sp, #12
    811c:	af00      	add	r7, sp, #0
    811e:	6078      	str	r0, [r7, #4]
    8120:	6039      	str	r1, [r7, #0]
	(void)unused0;
	(void)unused1;
	return false;
    8122:	2300      	movs	r3, #0
}
    8124:	4618      	mov	r0, r3
    8126:	370c      	adds	r7, #12
    8128:	46bd      	mov	sp, r7
    812a:	f85d 7b04 	ldr.w	r7, [sp], #4
    812e:	4770      	bx	lr

00008130 <_usb_load_calib>:

/**
 * \brief Load USB calibration value from NVM
 */
static void _usb_load_calib(void)
{
    8130:	b480      	push	{r7}
    8132:	b085      	sub	sp, #20
    8134:	af00      	add	r7, sp, #0
#define NVM_USB_PAD_TRANSN_SIZE 5
#define NVM_USB_PAD_TRANSP_POS 37
#define NVM_USB_PAD_TRANSP_SIZE 5
#define NVM_USB_PAD_TRIM_POS 42
#define NVM_USB_PAD_TRIM_SIZE 3
	Usb *    hw = USB;
    8136:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    813a:	603b      	str	r3, [r7, #0]
	uint32_t pad_transn
	    = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRANSN_POS / 32)) >> (NVM_USB_PAD_TRANSN_POS % 32))
    813c:	4b28      	ldr	r3, [pc, #160]	; (81e0 <_usb_load_calib+0xb0>)
    813e:	681b      	ldr	r3, [r3, #0]
	uint32_t pad_transn
    8140:	f003 031f 	and.w	r3, r3, #31
    8144:	60fb      	str	r3, [r7, #12]
	      & ((1 << NVM_USB_PAD_TRANSN_SIZE) - 1);
	uint32_t pad_transp
	    = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRANSP_POS / 32)) >> (NVM_USB_PAD_TRANSP_POS % 32))
    8146:	4b26      	ldr	r3, [pc, #152]	; (81e0 <_usb_load_calib+0xb0>)
    8148:	681b      	ldr	r3, [r3, #0]
    814a:	095b      	lsrs	r3, r3, #5
	uint32_t pad_transp
    814c:	f003 031f 	and.w	r3, r3, #31
    8150:	60bb      	str	r3, [r7, #8]
	      & ((1 << NVM_USB_PAD_TRANSP_SIZE) - 1);
	uint32_t pad_trim = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRIM_POS / 32)) >> (NVM_USB_PAD_TRIM_POS % 32))
    8152:	4b23      	ldr	r3, [pc, #140]	; (81e0 <_usb_load_calib+0xb0>)
    8154:	681b      	ldr	r3, [r3, #0]
    8156:	0a9b      	lsrs	r3, r3, #10
    8158:	f003 0307 	and.w	r3, r3, #7
    815c:	607b      	str	r3, [r7, #4]
	                    & ((1 << NVM_USB_PAD_TRIM_SIZE) - 1);
	if (pad_transn == 0 || pad_transn == 0x1F) {
    815e:	68fb      	ldr	r3, [r7, #12]
    8160:	2b00      	cmp	r3, #0
    8162:	d002      	beq.n	816a <_usb_load_calib+0x3a>
    8164:	68fb      	ldr	r3, [r7, #12]
    8166:	2b1f      	cmp	r3, #31
    8168:	d101      	bne.n	816e <_usb_load_calib+0x3e>
		pad_transn = 9;
    816a:	2309      	movs	r3, #9
    816c:	60fb      	str	r3, [r7, #12]
	}
	if (pad_transp == 0 || pad_transp == 0x1F) {
    816e:	68bb      	ldr	r3, [r7, #8]
    8170:	2b00      	cmp	r3, #0
    8172:	d002      	beq.n	817a <_usb_load_calib+0x4a>
    8174:	68bb      	ldr	r3, [r7, #8]
    8176:	2b1f      	cmp	r3, #31
    8178:	d101      	bne.n	817e <_usb_load_calib+0x4e>
		pad_transp = 25;
    817a:	2319      	movs	r3, #25
    817c:	60bb      	str	r3, [r7, #8]
	}
	if (pad_trim == 0 || pad_trim == 0x7) {
    817e:	687b      	ldr	r3, [r7, #4]
    8180:	2b00      	cmp	r3, #0
    8182:	d002      	beq.n	818a <_usb_load_calib+0x5a>
    8184:	687b      	ldr	r3, [r7, #4]
    8186:	2b07      	cmp	r3, #7
    8188:	d101      	bne.n	818e <_usb_load_calib+0x5e>
		pad_trim = 6;
    818a:	2306      	movs	r3, #6
    818c:	607b      	str	r3, [r7, #4]
	}

	hw->DEVICE.PADCAL.reg = USB_PADCAL_TRANSN(pad_transn) | USB_PADCAL_TRANSP(pad_transp) | USB_PADCAL_TRIM(pad_trim);
    818e:	68fb      	ldr	r3, [r7, #12]
    8190:	b29b      	uxth	r3, r3
    8192:	019b      	lsls	r3, r3, #6
    8194:	b29b      	uxth	r3, r3
    8196:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
    819a:	b29a      	uxth	r2, r3
    819c:	68bb      	ldr	r3, [r7, #8]
    819e:	b29b      	uxth	r3, r3
    81a0:	f003 031f 	and.w	r3, r3, #31
    81a4:	b29b      	uxth	r3, r3
    81a6:	4313      	orrs	r3, r2
    81a8:	b29a      	uxth	r2, r3
    81aa:	687b      	ldr	r3, [r7, #4]
    81ac:	b29b      	uxth	r3, r3
    81ae:	031b      	lsls	r3, r3, #12
    81b0:	b29b      	uxth	r3, r3
    81b2:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
    81b6:	b29b      	uxth	r3, r3
    81b8:	4313      	orrs	r3, r2
    81ba:	b29a      	uxth	r2, r3
    81bc:	683b      	ldr	r3, [r7, #0]
    81be:	851a      	strh	r2, [r3, #40]	; 0x28

	hw->DEVICE.QOSCTRL.bit.CQOS = 3;
    81c0:	683a      	ldr	r2, [r7, #0]
    81c2:	78d3      	ldrb	r3, [r2, #3]
    81c4:	f043 0303 	orr.w	r3, r3, #3
    81c8:	70d3      	strb	r3, [r2, #3]
	hw->DEVICE.QOSCTRL.bit.DQOS = 3;
    81ca:	683a      	ldr	r2, [r7, #0]
    81cc:	78d3      	ldrb	r3, [r2, #3]
    81ce:	f043 030c 	orr.w	r3, r3, #12
    81d2:	70d3      	strb	r3, [r2, #3]
}
    81d4:	bf00      	nop
    81d6:	3714      	adds	r7, #20
    81d8:	46bd      	mov	sp, r7
    81da:	f85d 7b04 	ldr.w	r7, [sp], #4
    81de:	4770      	bx	lr
    81e0:	00800084 	.word	0x00800084

000081e4 <_usb_d_dev_wait_dpll_rdy>:

/**
 * \brief Wait DPLL clock to be ready
 */
static inline void _usb_d_dev_wait_dpll_rdy(void)
{
    81e4:	b580      	push	{r7, lr}
    81e6:	af00      	add	r7, sp, #0
#define DPLL_READY_FLAG (OSCCTRL_DPLLSTATUS_CLKRDY | OSCCTRL_DPLLSTATUS_LOCK)
	while (hri_oscctrl_get_DPLLSTATUS_reg(OSCCTRL, 0, DPLL_READY_FLAG) != DPLL_READY_FLAG)
    81e8:	bf00      	nop
    81ea:	2203      	movs	r2, #3
    81ec:	2100      	movs	r1, #0
    81ee:	4804      	ldr	r0, [pc, #16]	; (8200 <_usb_d_dev_wait_dpll_rdy+0x1c>)
    81f0:	4b04      	ldr	r3, [pc, #16]	; (8204 <_usb_d_dev_wait_dpll_rdy+0x20>)
    81f2:	4798      	blx	r3
    81f4:	4603      	mov	r3, r0
    81f6:	2b03      	cmp	r3, #3
    81f8:	d1f7      	bne.n	81ea <_usb_d_dev_wait_dpll_rdy+0x6>
		;
}
    81fa:	bf00      	nop
    81fc:	bd80      	pop	{r7, pc}
    81fe:	bf00      	nop
    8200:	40001000 	.word	0x40001000
    8204:	00007c19 	.word	0x00007c19

00008208 <_usb_d_dev_wait_dfll_rdy>:

/**
 * \brief Wait DFLL clock to be ready
 */
static inline void _usb_d_dev_wait_dfll_rdy(void)
{
    8208:	b580      	push	{r7, lr}
    820a:	af00      	add	r7, sp, #0
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(OSCCTRL)) {
    820c:	480e      	ldr	r0, [pc, #56]	; (8248 <_usb_d_dev_wait_dfll_rdy+0x40>)
    820e:	4b0f      	ldr	r3, [pc, #60]	; (824c <_usb_d_dev_wait_dfll_rdy+0x44>)
    8210:	4798      	blx	r3
    8212:	4603      	mov	r3, r0
    8214:	2b00      	cmp	r3, #0
    8216:	d00a      	beq.n	822e <_usb_d_dev_wait_dfll_rdy+0x26>
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, (OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC))
    8218:	bf00      	nop
    821a:	f44f 6110 	mov.w	r1, #2304	; 0x900
    821e:	480a      	ldr	r0, [pc, #40]	; (8248 <_usb_d_dev_wait_dfll_rdy+0x40>)
    8220:	4b0b      	ldr	r3, [pc, #44]	; (8250 <_usb_d_dev_wait_dfll_rdy+0x48>)
    8222:	4798      	blx	r3
    8224:	4603      	mov	r3, r0
    8226:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
    822a:	d1f6      	bne.n	821a <_usb_d_dev_wait_dfll_rdy+0x12>
			;
	} else {
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, OSCCTRL_STATUS_DFLLRDY) != OSCCTRL_STATUS_DFLLRDY)
			;
	}
}
    822c:	e009      	b.n	8242 <_usb_d_dev_wait_dfll_rdy+0x3a>
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, OSCCTRL_STATUS_DFLLRDY) != OSCCTRL_STATUS_DFLLRDY)
    822e:	bf00      	nop
    8230:	f44f 7180 	mov.w	r1, #256	; 0x100
    8234:	4804      	ldr	r0, [pc, #16]	; (8248 <_usb_d_dev_wait_dfll_rdy+0x40>)
    8236:	4b06      	ldr	r3, [pc, #24]	; (8250 <_usb_d_dev_wait_dfll_rdy+0x48>)
    8238:	4798      	blx	r3
    823a:	4603      	mov	r3, r0
    823c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    8240:	d1f6      	bne.n	8230 <_usb_d_dev_wait_dfll_rdy+0x28>
}
    8242:	bf00      	nop
    8244:	bd80      	pop	{r7, pc}
    8246:	bf00      	nop
    8248:	40001000 	.word	0x40001000
    824c:	00007c77 	.word	0x00007c77
    8250:	00007c51 	.word	0x00007c51

00008254 <_usb_d_dev_wait_clk_rdy>:
 * \brief Wait USB source clock to be ready
 * \param[in] clk_src Clock source, could be \ref USB_CLK_SRC_DFLL or
 *                    \ref USB_CLK_SRC_DPLL.
 */
static inline void _usb_d_dev_wait_clk_rdy(const uint8_t clk_src)
{
    8254:	b580      	push	{r7, lr}
    8256:	b082      	sub	sp, #8
    8258:	af00      	add	r7, sp, #0
    825a:	4603      	mov	r3, r0
    825c:	71fb      	strb	r3, [r7, #7]
	if (clk_src == USB_CLK_SRC_DFLL) {
    825e:	79fb      	ldrb	r3, [r7, #7]
    8260:	2b00      	cmp	r3, #0
    8262:	d102      	bne.n	826a <_usb_d_dev_wait_clk_rdy+0x16>
		_usb_d_dev_wait_dfll_rdy();
    8264:	4b05      	ldr	r3, [pc, #20]	; (827c <_usb_d_dev_wait_clk_rdy+0x28>)
    8266:	4798      	blx	r3
	} else if (clk_src == USB_CLK_SRC_DPLL) {
		_usb_d_dev_wait_dpll_rdy();
	}
}
    8268:	e004      	b.n	8274 <_usb_d_dev_wait_clk_rdy+0x20>
	} else if (clk_src == USB_CLK_SRC_DPLL) {
    826a:	79fb      	ldrb	r3, [r7, #7]
    826c:	2b01      	cmp	r3, #1
    826e:	d101      	bne.n	8274 <_usb_d_dev_wait_clk_rdy+0x20>
		_usb_d_dev_wait_dpll_rdy();
    8270:	4b03      	ldr	r3, [pc, #12]	; (8280 <_usb_d_dev_wait_clk_rdy+0x2c>)
    8272:	4798      	blx	r3
}
    8274:	bf00      	nop
    8276:	3708      	adds	r7, #8
    8278:	46bd      	mov	sp, r7
    827a:	bd80      	pop	{r7, pc}
    827c:	00008209 	.word	0x00008209
    8280:	000081e5 	.word	0x000081e5

00008284 <_usbd_ep_int_ack>:
/** \brief ACK the endpoint interrupt
 * \param[in] epn Endpoint number.
 * \param[in] flags Interrupt flags.
 */
static inline void _usbd_ep_int_ack(uint8_t epn, uint32_t flags)
{
    8284:	b580      	push	{r7, lr}
    8286:	b082      	sub	sp, #8
    8288:	af00      	add	r7, sp, #0
    828a:	4603      	mov	r3, r0
    828c:	6039      	str	r1, [r7, #0]
    828e:	71fb      	strb	r3, [r7, #7]
	hri_usbendpoint_clear_EPINTFLAG_reg(USB, epn, flags);
    8290:	683b      	ldr	r3, [r7, #0]
    8292:	b2da      	uxtb	r2, r3
    8294:	79fb      	ldrb	r3, [r7, #7]
    8296:	4619      	mov	r1, r3
    8298:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    829c:	4b02      	ldr	r3, [pc, #8]	; (82a8 <_usbd_ep_int_ack+0x24>)
    829e:	4798      	blx	r3
}
    82a0:	bf00      	nop
    82a2:	3708      	adds	r7, #8
    82a4:	46bd      	mov	sp, r7
    82a6:	bd80      	pop	{r7, pc}
    82a8:	00007d5d 	.word	0x00007d5d

000082ac <_usbd_ep_int_en>:
/** \brief Enable the endpoint interrupt
 * \param[in] epn Endpoint number.
 * \param[in] flags Interrupt flags.
 */
static inline void _usbd_ep_int_en(uint8_t epn, uint32_t flags)
{
    82ac:	b580      	push	{r7, lr}
    82ae:	b082      	sub	sp, #8
    82b0:	af00      	add	r7, sp, #0
    82b2:	4603      	mov	r3, r0
    82b4:	6039      	str	r1, [r7, #0]
    82b6:	71fb      	strb	r3, [r7, #7]
	hri_usbendpoint_set_EPINTEN_reg(USB, epn, flags);
    82b8:	683b      	ldr	r3, [r7, #0]
    82ba:	b2da      	uxtb	r2, r3
    82bc:	79fb      	ldrb	r3, [r7, #7]
    82be:	4619      	mov	r1, r3
    82c0:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    82c4:	4b02      	ldr	r3, [pc, #8]	; (82d0 <_usbd_ep_int_en+0x24>)
    82c6:	4798      	blx	r3
}
    82c8:	bf00      	nop
    82ca:	3708      	adds	r7, #8
    82cc:	46bd      	mov	sp, r7
    82ce:	bd80      	pop	{r7, pc}
    82d0:	00007e31 	.word	0x00007e31

000082d4 <_usbd_ep_int_dis>:
/** \brief Disable the endpoint interrupt
 * \param[in] epn Endpoint number.
 * \param[in] flags Interrupt flags.
 */
static inline void _usbd_ep_int_dis(uint8_t epn, uint32_t flags)
{
    82d4:	b580      	push	{r7, lr}
    82d6:	b082      	sub	sp, #8
    82d8:	af00      	add	r7, sp, #0
    82da:	4603      	mov	r3, r0
    82dc:	6039      	str	r1, [r7, #0]
    82de:	71fb      	strb	r3, [r7, #7]
	hri_usbendpoint_clear_EPINTEN_reg(USB, epn, flags);
    82e0:	683b      	ldr	r3, [r7, #0]
    82e2:	b2da      	uxtb	r2, r3
    82e4:	79fb      	ldrb	r3, [r7, #7]
    82e6:	4619      	mov	r1, r3
    82e8:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    82ec:	4b02      	ldr	r3, [pc, #8]	; (82f8 <_usbd_ep_int_dis+0x24>)
    82ee:	4798      	blx	r3
}
    82f0:	bf00      	nop
    82f2:	3708      	adds	r7, #8
    82f4:	46bd      	mov	sp, r7
    82f6:	bd80      	pop	{r7, pc}
    82f8:	00007e5d 	.word	0x00007e5d

000082fc <_usbd_ep_is_ctrl>:

/** \brief Check if endpoint is control endpoint
 * \param[in] epn Endpoint number.
 */
static inline bool _usbd_ep_is_ctrl(uint8_t epn)
{
    82fc:	b580      	push	{r7, lr}
    82fe:	b082      	sub	sp, #8
    8300:	af00      	add	r7, sp, #0
    8302:	4603      	mov	r3, r0
    8304:	71fb      	strb	r3, [r7, #7]
	return (hri_usbendpoint_read_EPCFG_reg(USB, epn) == USB_D_EPCFG_CTRL);
    8306:	79fb      	ldrb	r3, [r7, #7]
    8308:	4619      	mov	r1, r3
    830a:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    830e:	4b06      	ldr	r3, [pc, #24]	; (8328 <_usbd_ep_is_ctrl+0x2c>)
    8310:	4798      	blx	r3
    8312:	4603      	mov	r3, r0
    8314:	2b11      	cmp	r3, #17
    8316:	bf0c      	ite	eq
    8318:	2301      	moveq	r3, #1
    831a:	2300      	movne	r3, #0
    831c:	b2db      	uxtb	r3, r3
}
    831e:	4618      	mov	r0, r3
    8320:	3708      	adds	r7, #8
    8322:	46bd      	mov	sp, r7
    8324:	bd80      	pop	{r7, pc}
    8326:	bf00      	nop
    8328:	00007f17 	.word	0x00007f17

0000832c <_usbd_ep_set_stall>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] st Stall status.
 */
static inline void _usbd_ep_set_stall(uint8_t epn, uint8_t bank_n, bool st)
{
    832c:	b580      	push	{r7, lr}
    832e:	b082      	sub	sp, #8
    8330:	af00      	add	r7, sp, #0
    8332:	4603      	mov	r3, r0
    8334:	71fb      	strb	r3, [r7, #7]
    8336:	460b      	mov	r3, r1
    8338:	71bb      	strb	r3, [r7, #6]
    833a:	4613      	mov	r3, r2
    833c:	717b      	strb	r3, [r7, #5]
	if (st) {
    833e:	797b      	ldrb	r3, [r7, #5]
    8340:	2b00      	cmp	r3, #0
    8342:	d00b      	beq.n	835c <_usbd_ep_set_stall+0x30>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    8344:	79bb      	ldrb	r3, [r7, #6]
    8346:	2210      	movs	r2, #16
    8348:	fa02 f303 	lsl.w	r3, r2, r3
    834c:	b2da      	uxtb	r2, r3
    834e:	79fb      	ldrb	r3, [r7, #7]
    8350:	4619      	mov	r1, r3
    8352:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8356:	4b09      	ldr	r3, [pc, #36]	; (837c <_usbd_ep_set_stall+0x50>)
    8358:	4798      	blx	r3
	} else {
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
	}
}
    835a:	e00a      	b.n	8372 <_usbd_ep_set_stall+0x46>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    835c:	79bb      	ldrb	r3, [r7, #6]
    835e:	2210      	movs	r2, #16
    8360:	fa02 f303 	lsl.w	r3, r2, r3
    8364:	b2da      	uxtb	r2, r3
    8366:	79fb      	ldrb	r3, [r7, #7]
    8368:	4619      	mov	r1, r3
    836a:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    836e:	4b04      	ldr	r3, [pc, #16]	; (8380 <_usbd_ep_set_stall+0x54>)
    8370:	4798      	blx	r3
}
    8372:	bf00      	nop
    8374:	3708      	adds	r7, #8
    8376:	46bd      	mov	sp, r7
    8378:	bd80      	pop	{r7, pc}
    837a:	bf00      	nop
    837c:	00007d89 	.word	0x00007d89
    8380:	00007ddd 	.word	0x00007ddd

00008384 <_usbd_ep_is_stalled>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \return \c true if it's stalled.
 */
static inline bool _usbd_ep_is_stalled(uint8_t epn, uint8_t bank_n)
{
    8384:	b580      	push	{r7, lr}
    8386:	b084      	sub	sp, #16
    8388:	af00      	add	r7, sp, #0
    838a:	4603      	mov	r3, r0
    838c:	460a      	mov	r2, r1
    838e:	71fb      	strb	r3, [r7, #7]
    8390:	4613      	mov	r3, r2
    8392:	71bb      	strb	r3, [r7, #6]
	Usb *hw = USB;
    8394:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    8398:	60fb      	str	r3, [r7, #12]
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    839a:	79fb      	ldrb	r3, [r7, #7]
    839c:	4619      	mov	r1, r3
    839e:	68f8      	ldr	r0, [r7, #12]
    83a0:	4b08      	ldr	r3, [pc, #32]	; (83c4 <_usbd_ep_is_stalled+0x40>)
    83a2:	4798      	blx	r3
    83a4:	4603      	mov	r3, r0
    83a6:	4619      	mov	r1, r3
    83a8:	79bb      	ldrb	r3, [r7, #6]
    83aa:	2210      	movs	r2, #16
    83ac:	fa02 f303 	lsl.w	r3, r2, r3
    83b0:	400b      	ands	r3, r1
    83b2:	2b00      	cmp	r3, #0
    83b4:	bf14      	ite	ne
    83b6:	2301      	movne	r3, #1
    83b8:	2300      	moveq	r3, #0
    83ba:	b2db      	uxtb	r3, r3
}
    83bc:	4618      	mov	r0, r3
    83be:	3710      	adds	r7, #16
    83c0:	46bd      	mov	sp, r7
    83c2:	bd80      	pop	{r7, pc}
    83c4:	00007db5 	.word	0x00007db5

000083c8 <_usbd_ep_is_stall_sent>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \return \c true if it's sent.
 */
static inline bool _usbd_ep_is_stall_sent(uint8_t epn, uint8_t bank_n)
{
    83c8:	b580      	push	{r7, lr}
    83ca:	b084      	sub	sp, #16
    83cc:	af00      	add	r7, sp, #0
    83ce:	4603      	mov	r3, r0
    83d0:	460a      	mov	r2, r1
    83d2:	71fb      	strb	r3, [r7, #7]
    83d4:	4613      	mov	r3, r2
    83d6:	71bb      	strb	r3, [r7, #6]
	Usb *hw = USB;
    83d8:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    83dc:	60fb      	str	r3, [r7, #12]
	return (hri_usbendpoint_read_EPINTFLAG_reg(hw, epn) & (USB_DEVICE_EPINTFLAG_STALL0 << bank_n));
    83de:	79fb      	ldrb	r3, [r7, #7]
    83e0:	4619      	mov	r1, r3
    83e2:	68f8      	ldr	r0, [r7, #12]
    83e4:	4b08      	ldr	r3, [pc, #32]	; (8408 <_usbd_ep_is_stall_sent+0x40>)
    83e6:	4798      	blx	r3
    83e8:	4603      	mov	r3, r0
    83ea:	4619      	mov	r1, r3
    83ec:	79bb      	ldrb	r3, [r7, #6]
    83ee:	2220      	movs	r2, #32
    83f0:	fa02 f303 	lsl.w	r3, r2, r3
    83f4:	400b      	ands	r3, r1
    83f6:	2b00      	cmp	r3, #0
    83f8:	bf14      	ite	ne
    83fa:	2301      	movne	r3, #1
    83fc:	2300      	moveq	r3, #0
    83fe:	b2db      	uxtb	r3, r3
}
    8400:	4618      	mov	r0, r3
    8402:	3710      	adds	r7, #16
    8404:	46bd      	mov	sp, r7
    8406:	bd80      	pop	{r7, pc}
    8408:	00007d35 	.word	0x00007d35

0000840c <_usbd_ep_ack_stall>:
/** \brief ACK endpoint STALL interrupt
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 */
static inline void _usbd_ep_ack_stall(uint8_t epn, uint8_t bank_n)
{
    840c:	b580      	push	{r7, lr}
    840e:	b082      	sub	sp, #8
    8410:	af00      	add	r7, sp, #0
    8412:	4603      	mov	r3, r0
    8414:	460a      	mov	r2, r1
    8416:	71fb      	strb	r3, [r7, #7]
    8418:	4613      	mov	r3, r2
    841a:	71bb      	strb	r3, [r7, #6]
	_usbd_ep_int_ack(epn, (USB_DEVICE_EPINTFLAG_STALL0 << bank_n));
    841c:	79bb      	ldrb	r3, [r7, #6]
    841e:	2220      	movs	r2, #32
    8420:	409a      	lsls	r2, r3
    8422:	79fb      	ldrb	r3, [r7, #7]
    8424:	4611      	mov	r1, r2
    8426:	4618      	mov	r0, r3
    8428:	4b02      	ldr	r3, [pc, #8]	; (8434 <_usbd_ep_ack_stall+0x28>)
    842a:	4798      	blx	r3
}
    842c:	bf00      	nop
    842e:	3708      	adds	r7, #8
    8430:	46bd      	mov	sp, r7
    8432:	bd80      	pop	{r7, pc}
    8434:	00008285 	.word	0x00008285

00008438 <_usbd_ep_int_stall_en>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] en \c true to enable, \c false to disable.
 */
static inline void _usbd_ep_int_stall_en(uint8_t epn, uint8_t bank_n, const bool en)
{
    8438:	b580      	push	{r7, lr}
    843a:	b082      	sub	sp, #8
    843c:	af00      	add	r7, sp, #0
    843e:	4603      	mov	r3, r0
    8440:	71fb      	strb	r3, [r7, #7]
    8442:	460b      	mov	r3, r1
    8444:	71bb      	strb	r3, [r7, #6]
    8446:	4613      	mov	r3, r2
    8448:	717b      	strb	r3, [r7, #5]
	if (en) {
    844a:	797b      	ldrb	r3, [r7, #5]
    844c:	2b00      	cmp	r3, #0
    844e:	d008      	beq.n	8462 <_usbd_ep_int_stall_en+0x2a>
		_usbd_ep_int_en(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
    8450:	79bb      	ldrb	r3, [r7, #6]
    8452:	2220      	movs	r2, #32
    8454:	409a      	lsls	r2, r3
    8456:	79fb      	ldrb	r3, [r7, #7]
    8458:	4611      	mov	r1, r2
    845a:	4618      	mov	r0, r3
    845c:	4b07      	ldr	r3, [pc, #28]	; (847c <_usbd_ep_int_stall_en+0x44>)
    845e:	4798      	blx	r3
	} else {
		_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
	}
}
    8460:	e007      	b.n	8472 <_usbd_ep_int_stall_en+0x3a>
		_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
    8462:	79bb      	ldrb	r3, [r7, #6]
    8464:	2220      	movs	r2, #32
    8466:	409a      	lsls	r2, r3
    8468:	79fb      	ldrb	r3, [r7, #7]
    846a:	4611      	mov	r1, r2
    846c:	4618      	mov	r0, r3
    846e:	4b04      	ldr	r3, [pc, #16]	; (8480 <_usbd_ep_int_stall_en+0x48>)
    8470:	4798      	blx	r3
}
    8472:	bf00      	nop
    8474:	3708      	adds	r7, #8
    8476:	46bd      	mov	sp, r7
    8478:	bd80      	pop	{r7, pc}
    847a:	bf00      	nop
    847c:	000082ad 	.word	0x000082ad
    8480:	000082d5 	.word	0x000082d5

00008484 <_usbd_ep_stop_setup>:

/** \brief Stop SETUP transactions
 * \param[in] epn Endpoint number.
 */
static inline void _usbd_ep_stop_setup(uint8_t epn)
{
    8484:	b580      	push	{r7, lr}
    8486:	b082      	sub	sp, #8
    8488:	af00      	add	r7, sp, #0
    848a:	4603      	mov	r3, r0
    848c:	71fb      	strb	r3, [r7, #7]
	hri_usbendpoint_clear_EPINTEN_RXSTP_bit(USB, epn);
    848e:	79fb      	ldrb	r3, [r7, #7]
    8490:	4619      	mov	r1, r3
    8492:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8496:	4b03      	ldr	r3, [pc, #12]	; (84a4 <_usbd_ep_stop_setup+0x20>)
    8498:	4798      	blx	r3
}
    849a:	bf00      	nop
    849c:	3708      	adds	r7, #8
    849e:	46bd      	mov	sp, r7
    84a0:	bd80      	pop	{r7, pc}
    84a2:	bf00      	nop
    84a4:	00007e09 	.word	0x00007e09

000084a8 <_usbd_ep_is_setup>:

/** \brief Check if SETUP packet is ready in cache
 * \param[in] epn Endpoint number.
 */
static inline bool _usbd_ep_is_setup(uint8_t epn)
{
    84a8:	b580      	push	{r7, lr}
    84aa:	b082      	sub	sp, #8
    84ac:	af00      	add	r7, sp, #0
    84ae:	4603      	mov	r3, r0
    84b0:	71fb      	strb	r3, [r7, #7]
	return hri_usbendpoint_get_EPINTFLAG_reg(USB, epn, USB_DEVICE_EPINTFLAG_RXSTP);
    84b2:	79fb      	ldrb	r3, [r7, #7]
    84b4:	2210      	movs	r2, #16
    84b6:	4619      	mov	r1, r3
    84b8:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    84bc:	4b05      	ldr	r3, [pc, #20]	; (84d4 <_usbd_ep_is_setup+0x2c>)
    84be:	4798      	blx	r3
    84c0:	4603      	mov	r3, r0
    84c2:	2b00      	cmp	r3, #0
    84c4:	bf14      	ite	ne
    84c6:	2301      	movne	r3, #1
    84c8:	2300      	moveq	r3, #0
    84ca:	b2db      	uxtb	r3, r3
}
    84cc:	4618      	mov	r0, r3
    84ce:	3708      	adds	r7, #8
    84d0:	46bd      	mov	sp, r7
    84d2:	bd80      	pop	{r7, pc}
    84d4:	00007cff 	.word	0x00007cff

000084d8 <_usbd_ep_ack_setup>:

/** \brief ACK endpoint SETUP interrupt
 * \param[in] epn Endpoint number.
 */
static inline void _usbd_ep_ack_setup(uint8_t epn)
{
    84d8:	b580      	push	{r7, lr}
    84da:	b082      	sub	sp, #8
    84dc:	af00      	add	r7, sp, #0
    84de:	4603      	mov	r3, r0
    84e0:	71fb      	strb	r3, [r7, #7]
	_usbd_ep_int_ack(epn, USB_DEVICE_EPINTFLAG_RXSTP);
    84e2:	79fb      	ldrb	r3, [r7, #7]
    84e4:	2110      	movs	r1, #16
    84e6:	4618      	mov	r0, r3
    84e8:	4b02      	ldr	r3, [pc, #8]	; (84f4 <_usbd_ep_ack_setup+0x1c>)
    84ea:	4798      	blx	r3
}
    84ec:	bf00      	nop
    84ee:	3708      	adds	r7, #8
    84f0:	46bd      	mov	sp, r7
    84f2:	bd80      	pop	{r7, pc}
    84f4:	00008285 	.word	0x00008285

000084f8 <_usbd_ep_set_toggle>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] tgl Toggle value.
 */
static inline void _usbd_ep_set_toggle(uint8_t epn, uint8_t bank_n, uint8_t tgl)
{
    84f8:	b580      	push	{r7, lr}
    84fa:	b082      	sub	sp, #8
    84fc:	af00      	add	r7, sp, #0
    84fe:	4603      	mov	r3, r0
    8500:	71fb      	strb	r3, [r7, #7]
    8502:	460b      	mov	r3, r1
    8504:	71bb      	strb	r3, [r7, #6]
    8506:	4613      	mov	r3, r2
    8508:	717b      	strb	r3, [r7, #5]
	if (tgl) {
    850a:	797b      	ldrb	r3, [r7, #5]
    850c:	2b00      	cmp	r3, #0
    850e:	d00b      	beq.n	8528 <_usbd_ep_set_toggle+0x30>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
    8510:	79bb      	ldrb	r3, [r7, #6]
    8512:	2201      	movs	r2, #1
    8514:	fa02 f303 	lsl.w	r3, r2, r3
    8518:	b2da      	uxtb	r2, r3
    851a:	79fb      	ldrb	r3, [r7, #7]
    851c:	4619      	mov	r1, r3
    851e:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8522:	4b09      	ldr	r3, [pc, #36]	; (8548 <_usbd_ep_set_toggle+0x50>)
    8524:	4798      	blx	r3
	} else {
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
	}
}
    8526:	e00a      	b.n	853e <_usbd_ep_set_toggle+0x46>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
    8528:	79bb      	ldrb	r3, [r7, #6]
    852a:	2201      	movs	r2, #1
    852c:	fa02 f303 	lsl.w	r3, r2, r3
    8530:	b2da      	uxtb	r2, r3
    8532:	79fb      	ldrb	r3, [r7, #7]
    8534:	4619      	mov	r1, r3
    8536:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    853a:	4b04      	ldr	r3, [pc, #16]	; (854c <_usbd_ep_set_toggle+0x54>)
    853c:	4798      	blx	r3
}
    853e:	bf00      	nop
    8540:	3708      	adds	r7, #8
    8542:	46bd      	mov	sp, r7
    8544:	bd80      	pop	{r7, pc}
    8546:	bf00      	nop
    8548:	00007d89 	.word	0x00007d89
    854c:	00007ddd 	.word	0x00007ddd

00008550 <_usbd_ep_ack_io_cpt>:
/** \brief ACK IN/OUT complete interrupt
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 */
static inline void _usbd_ep_ack_io_cpt(uint8_t epn, uint8_t bank_n)
{
    8550:	b580      	push	{r7, lr}
    8552:	b082      	sub	sp, #8
    8554:	af00      	add	r7, sp, #0
    8556:	4603      	mov	r3, r0
    8558:	460a      	mov	r2, r1
    855a:	71fb      	strb	r3, [r7, #7]
    855c:	4613      	mov	r3, r2
    855e:	71bb      	strb	r3, [r7, #6]
	_usbd_ep_int_ack(epn, USB_DEVICE_EPINTFLAG_TRCPT0 << bank_n);
    8560:	79bb      	ldrb	r3, [r7, #6]
    8562:	2201      	movs	r2, #1
    8564:	409a      	lsls	r2, r3
    8566:	79fb      	ldrb	r3, [r7, #7]
    8568:	4611      	mov	r1, r2
    856a:	4618      	mov	r0, r3
    856c:	4b02      	ldr	r3, [pc, #8]	; (8578 <_usbd_ep_ack_io_cpt+0x28>)
    856e:	4798      	blx	r3
}
    8570:	bf00      	nop
    8572:	3708      	adds	r7, #8
    8574:	46bd      	mov	sp, r7
    8576:	bd80      	pop	{r7, pc}
    8578:	00008285 	.word	0x00008285

0000857c <_usbd_ep_set_buf>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] addr DMA buffer address to set.
 */
static inline void _usbd_ep_set_buf(uint8_t epn, uint8_t bank_n, uint32_t addr)
{
    857c:	b480      	push	{r7}
    857e:	b085      	sub	sp, #20
    8580:	af00      	add	r7, sp, #0
    8582:	4603      	mov	r3, r0
    8584:	603a      	str	r2, [r7, #0]
    8586:	71fb      	strb	r3, [r7, #7]
    8588:	460b      	mov	r3, r1
    858a:	71bb      	strb	r3, [r7, #6]
	UsbDeviceDescBank *bank = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    858c:	79fa      	ldrb	r2, [r7, #7]
    858e:	79bb      	ldrb	r3, [r7, #6]
    8590:	0052      	lsls	r2, r2, #1
    8592:	4413      	add	r3, r2
    8594:	011b      	lsls	r3, r3, #4
    8596:	4a06      	ldr	r2, [pc, #24]	; (85b0 <_usbd_ep_set_buf+0x34>)
    8598:	4413      	add	r3, r2
    859a:	60fb      	str	r3, [r7, #12]
	bank->ADDR.reg          = addr;
    859c:	68fb      	ldr	r3, [r7, #12]
    859e:	683a      	ldr	r2, [r7, #0]
    85a0:	601a      	str	r2, [r3, #0]
}
    85a2:	bf00      	nop
    85a4:	3714      	adds	r7, #20
    85a6:	46bd      	mov	sp, r7
    85a8:	f85d 7b04 	ldr.w	r7, [sp], #4
    85ac:	4770      	bx	lr
    85ae:	bf00      	nop
    85b0:	20000aa8 	.word	0x20000aa8

000085b4 <_usbd_ep_set_in_count>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] count Data count for IN.
 */
static inline void _usbd_ep_set_in_count(uint8_t epn, uint8_t bank_n, uint16_t count)
{
    85b4:	b480      	push	{r7}
    85b6:	b085      	sub	sp, #20
    85b8:	af00      	add	r7, sp, #0
    85ba:	4603      	mov	r3, r0
    85bc:	71fb      	strb	r3, [r7, #7]
    85be:	460b      	mov	r3, r1
    85c0:	71bb      	strb	r3, [r7, #6]
    85c2:	4613      	mov	r3, r2
    85c4:	80bb      	strh	r3, [r7, #4]
	UsbDeviceDescBank *bank             = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    85c6:	79fa      	ldrb	r2, [r7, #7]
    85c8:	79bb      	ldrb	r3, [r7, #6]
    85ca:	0052      	lsls	r2, r2, #1
    85cc:	4413      	add	r3, r2
    85ce:	011b      	lsls	r3, r3, #4
    85d0:	4a08      	ldr	r2, [pc, #32]	; (85f4 <_usbd_ep_set_in_count+0x40>)
    85d2:	4413      	add	r3, r2
    85d4:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
    85d6:	88bb      	ldrh	r3, [r7, #4]
    85d8:	f3c3 030d 	ubfx	r3, r3, #0, #14
    85dc:	b299      	uxth	r1, r3
    85de:	68fa      	ldr	r2, [r7, #12]
    85e0:	6853      	ldr	r3, [r2, #4]
    85e2:	f361 339b 	bfi	r3, r1, #14, #14
    85e6:	6053      	str	r3, [r2, #4]
}
    85e8:	bf00      	nop
    85ea:	3714      	adds	r7, #20
    85ec:	46bd      	mov	sp, r7
    85ee:	f85d 7b04 	ldr.w	r7, [sp], #4
    85f2:	4770      	bx	lr
    85f4:	20000aa8 	.word	0x20000aa8

000085f8 <_usbd_ep_set_in_size>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size for IN.
 */
static inline void _usbd_ep_set_in_size(uint8_t epn, uint8_t bank_n, uint16_t size)
{
    85f8:	b480      	push	{r7}
    85fa:	b085      	sub	sp, #20
    85fc:	af00      	add	r7, sp, #0
    85fe:	4603      	mov	r3, r0
    8600:	71fb      	strb	r3, [r7, #7]
    8602:	460b      	mov	r3, r1
    8604:	71bb      	strb	r3, [r7, #6]
    8606:	4613      	mov	r3, r2
    8608:	80bb      	strh	r3, [r7, #4]
	UsbDeviceDescBank *bank      = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    860a:	79fa      	ldrb	r2, [r7, #7]
    860c:	79bb      	ldrb	r3, [r7, #6]
    860e:	0052      	lsls	r2, r2, #1
    8610:	4413      	add	r3, r2
    8612:	011b      	lsls	r3, r3, #4
    8614:	4a08      	ldr	r2, [pc, #32]	; (8638 <_usbd_ep_set_in_size+0x40>)
    8616:	4413      	add	r3, r2
    8618:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
    861a:	88bb      	ldrh	r3, [r7, #4]
    861c:	f3c3 030d 	ubfx	r3, r3, #0, #14
    8620:	b299      	uxth	r1, r3
    8622:	68fa      	ldr	r2, [r7, #12]
    8624:	6853      	ldr	r3, [r2, #4]
    8626:	f361 030d 	bfi	r3, r1, #0, #14
    862a:	6053      	str	r3, [r2, #4]
}
    862c:	bf00      	nop
    862e:	3714      	adds	r7, #20
    8630:	46bd      	mov	sp, r7
    8632:	f85d 7b04 	ldr.w	r7, [sp], #4
    8636:	4770      	bx	lr
    8638:	20000aa8 	.word	0x20000aa8

0000863c <_usbd_ep_set_out_count>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] count Data count for OUT.
 */
static inline void _usbd_ep_set_out_count(uint8_t epn, uint8_t bank_n, uint16_t count)
{
    863c:	b480      	push	{r7}
    863e:	b085      	sub	sp, #20
    8640:	af00      	add	r7, sp, #0
    8642:	4603      	mov	r3, r0
    8644:	71fb      	strb	r3, [r7, #7]
    8646:	460b      	mov	r3, r1
    8648:	71bb      	strb	r3, [r7, #6]
    864a:	4613      	mov	r3, r2
    864c:	80bb      	strh	r3, [r7, #4]
	UsbDeviceDescBank *bank      = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    864e:	79fa      	ldrb	r2, [r7, #7]
    8650:	79bb      	ldrb	r3, [r7, #6]
    8652:	0052      	lsls	r2, r2, #1
    8654:	4413      	add	r3, r2
    8656:	011b      	lsls	r3, r3, #4
    8658:	4a08      	ldr	r2, [pc, #32]	; (867c <_usbd_ep_set_out_count+0x40>)
    865a:	4413      	add	r3, r2
    865c:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    865e:	88bb      	ldrh	r3, [r7, #4]
    8660:	f3c3 030d 	ubfx	r3, r3, #0, #14
    8664:	b299      	uxth	r1, r3
    8666:	68fa      	ldr	r2, [r7, #12]
    8668:	6853      	ldr	r3, [r2, #4]
    866a:	f361 030d 	bfi	r3, r1, #0, #14
    866e:	6053      	str	r3, [r2, #4]
}
    8670:	bf00      	nop
    8672:	3714      	adds	r7, #20
    8674:	46bd      	mov	sp, r7
    8676:	f85d 7b04 	ldr.w	r7, [sp], #4
    867a:	4770      	bx	lr
    867c:	20000aa8 	.word	0x20000aa8

00008680 <_usbd_ep_set_out_size>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size for OUT.
 */
static inline void _usbd_ep_set_out_size(uint8_t epn, uint8_t bank_n, uint16_t size)
{
    8680:	b480      	push	{r7}
    8682:	b085      	sub	sp, #20
    8684:	af00      	add	r7, sp, #0
    8686:	4603      	mov	r3, r0
    8688:	71fb      	strb	r3, [r7, #7]
    868a:	460b      	mov	r3, r1
    868c:	71bb      	strb	r3, [r7, #6]
    868e:	4613      	mov	r3, r2
    8690:	80bb      	strh	r3, [r7, #4]
	UsbDeviceDescBank *bank             = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    8692:	79fa      	ldrb	r2, [r7, #7]
    8694:	79bb      	ldrb	r3, [r7, #6]
    8696:	0052      	lsls	r2, r2, #1
    8698:	4413      	add	r3, r2
    869a:	011b      	lsls	r3, r3, #4
    869c:	4a08      	ldr	r2, [pc, #32]	; (86c0 <_usbd_ep_set_out_size+0x40>)
    869e:	4413      	add	r3, r2
    86a0:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    86a2:	88bb      	ldrh	r3, [r7, #4]
    86a4:	f3c3 030d 	ubfx	r3, r3, #0, #14
    86a8:	b299      	uxth	r1, r3
    86aa:	68fa      	ldr	r2, [r7, #12]
    86ac:	6853      	ldr	r3, [r2, #4]
    86ae:	f361 339b 	bfi	r3, r1, #14, #14
    86b2:	6053      	str	r3, [r2, #4]
}
    86b4:	bf00      	nop
    86b6:	3714      	adds	r7, #20
    86b8:	46bd      	mov	sp, r7
    86ba:	f85d 7b04 	ldr.w	r7, [sp], #4
    86be:	4770      	bx	lr
    86c0:	20000aa8 	.word	0x20000aa8

000086c4 <_usbd_ep_set_in_trans>:
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size.
 * \param[in] count Initial data count.
 */
static inline void _usbd_ep_set_in_trans(uint8_t epn, uint8_t bank_n, uint32_t size, uint32_t count)
{
    86c4:	b580      	push	{r7, lr}
    86c6:	b084      	sub	sp, #16
    86c8:	af00      	add	r7, sp, #0
    86ca:	60ba      	str	r2, [r7, #8]
    86cc:	607b      	str	r3, [r7, #4]
    86ce:	4603      	mov	r3, r0
    86d0:	73fb      	strb	r3, [r7, #15]
    86d2:	460b      	mov	r3, r1
    86d4:	73bb      	strb	r3, [r7, #14]
	_usbd_ep_set_in_size(epn, bank_n, size);
    86d6:	68bb      	ldr	r3, [r7, #8]
    86d8:	b29a      	uxth	r2, r3
    86da:	7bb9      	ldrb	r1, [r7, #14]
    86dc:	7bfb      	ldrb	r3, [r7, #15]
    86de:	4618      	mov	r0, r3
    86e0:	4b06      	ldr	r3, [pc, #24]	; (86fc <_usbd_ep_set_in_trans+0x38>)
    86e2:	4798      	blx	r3
	_usbd_ep_set_in_count(epn, bank_n, count);
    86e4:	687b      	ldr	r3, [r7, #4]
    86e6:	b29a      	uxth	r2, r3
    86e8:	7bb9      	ldrb	r1, [r7, #14]
    86ea:	7bfb      	ldrb	r3, [r7, #15]
    86ec:	4618      	mov	r0, r3
    86ee:	4b04      	ldr	r3, [pc, #16]	; (8700 <_usbd_ep_set_in_trans+0x3c>)
    86f0:	4798      	blx	r3
}
    86f2:	bf00      	nop
    86f4:	3710      	adds	r7, #16
    86f6:	46bd      	mov	sp, r7
    86f8:	bd80      	pop	{r7, pc}
    86fa:	bf00      	nop
    86fc:	000085f9 	.word	0x000085f9
    8700:	000085b5 	.word	0x000085b5

00008704 <_usbd_ep_set_out_trans>:
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size.
 * \param[in] count Initial data count.
 */
static inline void _usbd_ep_set_out_trans(uint8_t epn, uint8_t bank_n, uint32_t size, uint32_t count)
{
    8704:	b580      	push	{r7, lr}
    8706:	b084      	sub	sp, #16
    8708:	af00      	add	r7, sp, #0
    870a:	60ba      	str	r2, [r7, #8]
    870c:	607b      	str	r3, [r7, #4]
    870e:	4603      	mov	r3, r0
    8710:	73fb      	strb	r3, [r7, #15]
    8712:	460b      	mov	r3, r1
    8714:	73bb      	strb	r3, [r7, #14]
	_usbd_ep_set_out_size(epn, bank_n, size);
    8716:	68bb      	ldr	r3, [r7, #8]
    8718:	b29a      	uxth	r2, r3
    871a:	7bb9      	ldrb	r1, [r7, #14]
    871c:	7bfb      	ldrb	r3, [r7, #15]
    871e:	4618      	mov	r0, r3
    8720:	4b06      	ldr	r3, [pc, #24]	; (873c <_usbd_ep_set_out_trans+0x38>)
    8722:	4798      	blx	r3
	_usbd_ep_set_out_count(epn, bank_n, count);
    8724:	687b      	ldr	r3, [r7, #4]
    8726:	b29a      	uxth	r2, r3
    8728:	7bb9      	ldrb	r1, [r7, #14]
    872a:	7bfb      	ldrb	r3, [r7, #15]
    872c:	4618      	mov	r0, r3
    872e:	4b04      	ldr	r3, [pc, #16]	; (8740 <_usbd_ep_set_out_trans+0x3c>)
    8730:	4798      	blx	r3
}
    8732:	bf00      	nop
    8734:	3710      	adds	r7, #16
    8736:	46bd      	mov	sp, r7
    8738:	bd80      	pop	{r7, pc}
    873a:	bf00      	nop
    873c:	00008681 	.word	0x00008681
    8740:	0000863d 	.word	0x0000863d

00008744 <_usbd_ep_clear_bank_status>:
/** \brief Clear bank status
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 */
static inline void _usbd_ep_clear_bank_status(uint8_t epn, uint8_t bank_n)
{
    8744:	b480      	push	{r7}
    8746:	b085      	sub	sp, #20
    8748:	af00      	add	r7, sp, #0
    874a:	4603      	mov	r3, r0
    874c:	460a      	mov	r2, r1
    874e:	71fb      	strb	r3, [r7, #7]
    8750:	4613      	mov	r3, r2
    8752:	71bb      	strb	r3, [r7, #6]
	UsbDeviceDescBank *bank = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    8754:	79fa      	ldrb	r2, [r7, #7]
    8756:	79bb      	ldrb	r3, [r7, #6]
    8758:	0052      	lsls	r2, r2, #1
    875a:	4413      	add	r3, r2
    875c:	011b      	lsls	r3, r3, #4
    875e:	4a06      	ldr	r2, [pc, #24]	; (8778 <_usbd_ep_clear_bank_status+0x34>)
    8760:	4413      	add	r3, r2
    8762:	60fb      	str	r3, [r7, #12]
	bank->STATUS_BK.reg     = 0;
    8764:	68fb      	ldr	r3, [r7, #12]
    8766:	2200      	movs	r2, #0
    8768:	729a      	strb	r2, [r3, #10]
}
    876a:	bf00      	nop
    876c:	3714      	adds	r7, #20
    876e:	46bd      	mov	sp, r7
    8770:	f85d 7b04 	ldr.w	r7, [sp], #4
    8774:	4770      	bx	lr
    8776:	bf00      	nop
    8778:	20000aa8 	.word	0x20000aa8

0000877c <_usbd_ep_set_in_rdy>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] rdy Set to \c true to indicate IN packet ready to TX.
 */
static inline void _usbd_ep_set_in_rdy(uint8_t epn, uint8_t bank_n, const bool rdy)
{
    877c:	b580      	push	{r7, lr}
    877e:	b082      	sub	sp, #8
    8780:	af00      	add	r7, sp, #0
    8782:	4603      	mov	r3, r0
    8784:	71fb      	strb	r3, [r7, #7]
    8786:	460b      	mov	r3, r1
    8788:	71bb      	strb	r3, [r7, #6]
    878a:	4613      	mov	r3, r2
    878c:	717b      	strb	r3, [r7, #5]
	if (rdy) {
    878e:	797b      	ldrb	r3, [r7, #5]
    8790:	2b00      	cmp	r3, #0
    8792:	d00b      	beq.n	87ac <_usbd_ep_set_in_rdy+0x30>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    8794:	79bb      	ldrb	r3, [r7, #6]
    8796:	2240      	movs	r2, #64	; 0x40
    8798:	fa02 f303 	lsl.w	r3, r2, r3
    879c:	b2da      	uxtb	r2, r3
    879e:	79fb      	ldrb	r3, [r7, #7]
    87a0:	4619      	mov	r1, r3
    87a2:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    87a6:	4b09      	ldr	r3, [pc, #36]	; (87cc <_usbd_ep_set_in_rdy+0x50>)
    87a8:	4798      	blx	r3
	} else {
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
	}
}
    87aa:	e00a      	b.n	87c2 <_usbd_ep_set_in_rdy+0x46>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    87ac:	79bb      	ldrb	r3, [r7, #6]
    87ae:	2240      	movs	r2, #64	; 0x40
    87b0:	fa02 f303 	lsl.w	r3, r2, r3
    87b4:	b2da      	uxtb	r2, r3
    87b6:	79fb      	ldrb	r3, [r7, #7]
    87b8:	4619      	mov	r1, r3
    87ba:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    87be:	4b04      	ldr	r3, [pc, #16]	; (87d0 <_usbd_ep_set_in_rdy+0x54>)
    87c0:	4798      	blx	r3
}
    87c2:	bf00      	nop
    87c4:	3708      	adds	r7, #8
    87c6:	46bd      	mov	sp, r7
    87c8:	bd80      	pop	{r7, pc}
    87ca:	bf00      	nop
    87cc:	00007d89 	.word	0x00007d89
    87d0:	00007ddd 	.word	0x00007ddd

000087d4 <_usbd_ep_set_out_rdy>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] rdy Set to \c true to indicate OUT bank ready to RX.
 */
static inline void _usbd_ep_set_out_rdy(uint8_t epn, uint8_t bank_n, const bool rdy)
{
    87d4:	b580      	push	{r7, lr}
    87d6:	b082      	sub	sp, #8
    87d8:	af00      	add	r7, sp, #0
    87da:	4603      	mov	r3, r0
    87dc:	71fb      	strb	r3, [r7, #7]
    87de:	460b      	mov	r3, r1
    87e0:	71bb      	strb	r3, [r7, #6]
    87e2:	4613      	mov	r3, r2
    87e4:	717b      	strb	r3, [r7, #5]
	if (rdy) {
    87e6:	797b      	ldrb	r3, [r7, #5]
    87e8:	2b00      	cmp	r3, #0
    87ea:	d00b      	beq.n	8804 <_usbd_ep_set_out_rdy+0x30>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    87ec:	79bb      	ldrb	r3, [r7, #6]
    87ee:	2240      	movs	r2, #64	; 0x40
    87f0:	fa02 f303 	lsl.w	r3, r2, r3
    87f4:	b2da      	uxtb	r2, r3
    87f6:	79fb      	ldrb	r3, [r7, #7]
    87f8:	4619      	mov	r1, r3
    87fa:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    87fe:	4b09      	ldr	r3, [pc, #36]	; (8824 <_usbd_ep_set_out_rdy+0x50>)
    8800:	4798      	blx	r3
	} else {
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
	}
}
    8802:	e00a      	b.n	881a <_usbd_ep_set_out_rdy+0x46>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    8804:	79bb      	ldrb	r3, [r7, #6]
    8806:	2240      	movs	r2, #64	; 0x40
    8808:	fa02 f303 	lsl.w	r3, r2, r3
    880c:	b2da      	uxtb	r2, r3
    880e:	79fb      	ldrb	r3, [r7, #7]
    8810:	4619      	mov	r1, r3
    8812:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8816:	4b04      	ldr	r3, [pc, #16]	; (8828 <_usbd_ep_set_out_rdy+0x54>)
    8818:	4798      	blx	r3
}
    881a:	bf00      	nop
    881c:	3708      	adds	r7, #8
    881e:	46bd      	mov	sp, r7
    8820:	bd80      	pop	{r7, pc}
    8822:	bf00      	nop
    8824:	00007ddd 	.word	0x00007ddd
    8828:	00007d89 	.word	0x00007d89

0000882c <_usbd_ep_pcksize_size>:
/**
 *  \brief Convert USB endpoint size to HW PCKSIZE.SIZE
 * \param[in] n Number of bytes of endpoint size.
 */
static inline uint8_t _usbd_ep_pcksize_size(uint16_t n)
{
    882c:	b480      	push	{r7}
    882e:	b083      	sub	sp, #12
    8830:	af00      	add	r7, sp, #0
    8832:	4603      	mov	r3, r0
    8834:	80fb      	strh	r3, [r7, #6]
	return (
	    (n > 512)
	        ? 7
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    8836:	88fb      	ldrh	r3, [r7, #6]
    8838:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    883c:	d820      	bhi.n	8880 <_usbd_ep_pcksize_size+0x54>
    883e:	88fb      	ldrh	r3, [r7, #6]
    8840:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    8844:	d81a      	bhi.n	887c <_usbd_ep_pcksize_size+0x50>
    8846:	88fb      	ldrh	r3, [r7, #6]
    8848:	2b80      	cmp	r3, #128	; 0x80
    884a:	d815      	bhi.n	8878 <_usbd_ep_pcksize_size+0x4c>
    884c:	88fb      	ldrh	r3, [r7, #6]
    884e:	2b40      	cmp	r3, #64	; 0x40
    8850:	d810      	bhi.n	8874 <_usbd_ep_pcksize_size+0x48>
    8852:	88fb      	ldrh	r3, [r7, #6]
    8854:	2b20      	cmp	r3, #32
    8856:	d80b      	bhi.n	8870 <_usbd_ep_pcksize_size+0x44>
    8858:	88fb      	ldrh	r3, [r7, #6]
    885a:	2b10      	cmp	r3, #16
    885c:	d806      	bhi.n	886c <_usbd_ep_pcksize_size+0x40>
    885e:	88fb      	ldrh	r3, [r7, #6]
    8860:	2b08      	cmp	r3, #8
    8862:	bf8c      	ite	hi
    8864:	2301      	movhi	r3, #1
    8866:	2300      	movls	r3, #0
    8868:	b2db      	uxtb	r3, r3
    886a:	e00a      	b.n	8882 <_usbd_ep_pcksize_size+0x56>
    886c:	2302      	movs	r3, #2
    886e:	e008      	b.n	8882 <_usbd_ep_pcksize_size+0x56>
    8870:	2303      	movs	r3, #3
    8872:	e006      	b.n	8882 <_usbd_ep_pcksize_size+0x56>
    8874:	2304      	movs	r3, #4
    8876:	e004      	b.n	8882 <_usbd_ep_pcksize_size+0x56>
    8878:	2305      	movs	r3, #5
    887a:	e002      	b.n	8882 <_usbd_ep_pcksize_size+0x56>
    887c:	2306      	movs	r3, #6
    887e:	e000      	b.n	8882 <_usbd_ep_pcksize_size+0x56>
    8880:	2307      	movs	r3, #7
}
    8882:	4618      	mov	r0, r3
    8884:	370c      	adds	r7, #12
    8886:	46bd      	mov	sp, r7
    8888:	f85d 7b04 	ldr.w	r7, [sp], #4
    888c:	4770      	bx	lr
	...

00008890 <_usb_d_dev_ept>:
 *  \brief Obtain endpoint descriptor pointer
 * \param[in] epn Endpoint number.
 * \param[in] dir Endpoint direction.
 */
static inline struct _usb_d_dev_ep *_usb_d_dev_ept(uint8_t epn, bool dir)
{
    8890:	b480      	push	{r7}
    8892:	b085      	sub	sp, #20
    8894:	af00      	add	r7, sp, #0
    8896:	4603      	mov	r3, r0
    8898:	460a      	mov	r2, r1
    889a:	71fb      	strb	r3, [r7, #7]
    889c:	4613      	mov	r3, r2
    889e:	71bb      	strb	r3, [r7, #6]
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    88a0:	79fb      	ldrb	r3, [r7, #7]
    88a2:	2b00      	cmp	r3, #0
    88a4:	d008      	beq.n	88b8 <_usb_d_dev_ept+0x28>
    88a6:	79bb      	ldrb	r3, [r7, #6]
    88a8:	2b00      	cmp	r3, #0
    88aa:	d003      	beq.n	88b4 <_usb_d_dev_ept+0x24>
    88ac:	79fb      	ldrb	r3, [r7, #7]
    88ae:	3304      	adds	r3, #4
    88b0:	b2db      	uxtb	r3, r3
    88b2:	e002      	b.n	88ba <_usb_d_dev_ept+0x2a>
    88b4:	79fb      	ldrb	r3, [r7, #7]
    88b6:	e000      	b.n	88ba <_usb_d_dev_ept+0x2a>
    88b8:	2300      	movs	r3, #0
    88ba:	73fb      	strb	r3, [r7, #15]
	return &dev_inst.ep[ep_index];
    88bc:	7bfa      	ldrb	r2, [r7, #15]
    88be:	4613      	mov	r3, r2
    88c0:	009b      	lsls	r3, r3, #2
    88c2:	4413      	add	r3, r2
    88c4:	009b      	lsls	r3, r3, #2
    88c6:	3310      	adds	r3, #16
    88c8:	4a04      	ldr	r2, [pc, #16]	; (88dc <_usb_d_dev_ept+0x4c>)
    88ca:	4413      	add	r3, r2
    88cc:	3304      	adds	r3, #4
}
    88ce:	4618      	mov	r0, r3
    88d0:	3714      	adds	r7, #20
    88d2:	46bd      	mov	sp, r7
    88d4:	f85d 7b04 	ldr.w	r7, [sp], #4
    88d8:	4770      	bx	lr
    88da:	bf00      	nop
    88dc:	200009e0 	.word	0x200009e0

000088e0 <_usb_d_dev_sof>:

/**
 * \brief Handles USB SOF interrupt
 */
static inline void _usb_d_dev_sof(void)
{
    88e0:	b580      	push	{r7, lr}
    88e2:	af00      	add	r7, sp, #0
	/* ACK SOF interrupt. */
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_DEVICE_INTFLAG_SOF);
    88e4:	2104      	movs	r1, #4
    88e6:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    88ea:	4b03      	ldr	r3, [pc, #12]	; (88f8 <_usb_d_dev_sof+0x18>)
    88ec:	4798      	blx	r3
	dev_inst.callbacks.sof();
    88ee:	4b03      	ldr	r3, [pc, #12]	; (88fc <_usb_d_dev_sof+0x1c>)
    88f0:	681b      	ldr	r3, [r3, #0]
    88f2:	4798      	blx	r3
}
    88f4:	bf00      	nop
    88f6:	bd80      	pop	{r7, pc}
    88f8:	00007f57 	.word	0x00007f57
    88fc:	200009e0 	.word	0x200009e0

00008900 <_usb_d_dev_lpmsusp>:

/**
 * \brief Handles USB LPM Suspend interrupt
 */
static inline void _usb_d_dev_lpmsusp(void)
{
    8900:	b580      	push	{r7, lr}
    8902:	b084      	sub	sp, #16
    8904:	af00      	add	r7, sp, #0
	uint8_t  i;
	uint32_t lpm_variable = 0;
    8906:	2300      	movs	r3, #0
    8908:	60bb      	str	r3, [r7, #8]

	/* ACK LPMSUSP interrupt. */
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    890a:	f240 2101 	movw	r1, #513	; 0x201
    890e:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8912:	4b1a      	ldr	r3, [pc, #104]	; (897c <_usb_d_dev_lpmsusp+0x7c>)
    8914:	4798      	blx	r3
	/* Change interrupt masks */
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    8916:	f240 2101 	movw	r1, #513	; 0x201
    891a:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    891e:	4b18      	ldr	r3, [pc, #96]	; (8980 <_usb_d_dev_lpmsusp+0x80>)
    8920:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    8922:	2170      	movs	r1, #112	; 0x70
    8924:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8928:	4b16      	ldr	r3, [pc, #88]	; (8984 <_usb_d_dev_lpmsusp+0x84>)
    892a:	4798      	blx	r3

	/* Find LPM data */
	for (i = 0; i < CONF_USB_D_MAX_EP_N; i++) {
    892c:	2300      	movs	r3, #0
    892e:	73fb      	strb	r3, [r7, #15]
    8930:	e018      	b.n	8964 <_usb_d_dev_lpmsusp+0x64>
		UsbDeviceDescBank *bank = &prvt_inst.desc_table[i].DeviceDescBank[0];
    8932:	7bfb      	ldrb	r3, [r7, #15]
    8934:	015b      	lsls	r3, r3, #5
    8936:	4a14      	ldr	r2, [pc, #80]	; (8988 <_usb_d_dev_lpmsusp+0x88>)
    8938:	4413      	add	r3, r2
    893a:	607b      	str	r3, [r7, #4]
		if (bank->EXTREG.bit.SUBPID == 0x3) {
    893c:	687b      	ldr	r3, [r7, #4]
    893e:	891b      	ldrh	r3, [r3, #8]
    8940:	f3c3 0303 	ubfx	r3, r3, #0, #4
    8944:	b2db      	uxtb	r3, r3
    8946:	2b03      	cmp	r3, #3
    8948:	d109      	bne.n	895e <_usb_d_dev_lpmsusp+0x5e>
			/* Save LPM variable */
			lpm_variable = bank->EXTREG.bit.VARIABLE;
    894a:	687b      	ldr	r3, [r7, #4]
    894c:	891b      	ldrh	r3, [r3, #8]
    894e:	f3c3 130a 	ubfx	r3, r3, #4, #11
    8952:	b29b      	uxth	r3, r3
    8954:	60bb      	str	r3, [r7, #8]
			/* Clear */
			bank->EXTREG.reg = 0;
    8956:	687b      	ldr	r3, [r7, #4]
    8958:	2200      	movs	r2, #0
    895a:	811a      	strh	r2, [r3, #8]
			break;
    895c:	e005      	b.n	896a <_usb_d_dev_lpmsusp+0x6a>
	for (i = 0; i < CONF_USB_D_MAX_EP_N; i++) {
    895e:	7bfb      	ldrb	r3, [r7, #15]
    8960:	3301      	adds	r3, #1
    8962:	73fb      	strb	r3, [r7, #15]
    8964:	7bfb      	ldrb	r3, [r7, #15]
    8966:	2b03      	cmp	r3, #3
    8968:	d9e3      	bls.n	8932 <_usb_d_dev_lpmsusp+0x32>
		}
	}
	dev_inst.callbacks.event(USB_EV_LPM_SUSPEND, lpm_variable);
    896a:	4b08      	ldr	r3, [pc, #32]	; (898c <_usb_d_dev_lpmsusp+0x8c>)
    896c:	685b      	ldr	r3, [r3, #4]
    896e:	68b9      	ldr	r1, [r7, #8]
    8970:	2003      	movs	r0, #3
    8972:	4798      	blx	r3
}
    8974:	bf00      	nop
    8976:	3710      	adds	r7, #16
    8978:	46bd      	mov	sp, r7
    897a:	bd80      	pop	{r7, pc}
    897c:	00007f57 	.word	0x00007f57
    8980:	00007fad 	.word	0x00007fad
    8984:	00007f75 	.word	0x00007f75
    8988:	20000aa8 	.word	0x20000aa8
    898c:	200009e0 	.word	0x200009e0

00008990 <_usb_d_dev_ramerr>:

/**
 * \brief Handles USB RAM Error interrupt
 */
static inline void _usb_d_dev_ramerr(void)
{
    8990:	b580      	push	{r7, lr}
    8992:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_DEVICE_INTFLAG_RAMACER);
    8994:	2180      	movs	r1, #128	; 0x80
    8996:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    899a:	4b04      	ldr	r3, [pc, #16]	; (89ac <_usb_d_dev_ramerr+0x1c>)
    899c:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_ERROR, 0);
    899e:	4b04      	ldr	r3, [pc, #16]	; (89b0 <_usb_d_dev_ramerr+0x20>)
    89a0:	685b      	ldr	r3, [r3, #4]
    89a2:	2100      	movs	r1, #0
    89a4:	2005      	movs	r0, #5
    89a6:	4798      	blx	r3
}
    89a8:	bf00      	nop
    89aa:	bd80      	pop	{r7, pc}
    89ac:	00007f57 	.word	0x00007f57
    89b0:	200009e0 	.word	0x200009e0

000089b4 <_usb_d_dev_wakeup>:

/**
 * \brief Handles USB resume/wakeup interrupts
 */
static inline void _usb_d_dev_wakeup(void)
{
    89b4:	b580      	push	{r7, lr}
    89b6:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    89b8:	2170      	movs	r1, #112	; 0x70
    89ba:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    89be:	4b0b      	ldr	r3, [pc, #44]	; (89ec <_usb_d_dev_wakeup+0x38>)
    89c0:	4798      	blx	r3
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    89c2:	2170      	movs	r1, #112	; 0x70
    89c4:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    89c8:	4b09      	ldr	r3, [pc, #36]	; (89f0 <_usb_d_dev_wakeup+0x3c>)
    89ca:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    89cc:	f240 2101 	movw	r1, #513	; 0x201
    89d0:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    89d4:	4b07      	ldr	r3, [pc, #28]	; (89f4 <_usb_d_dev_wakeup+0x40>)
    89d6:	4798      	blx	r3

	_usb_d_dev_wait_clk_rdy(CONF_USB_D_CLK_SRC);
    89d8:	2000      	movs	r0, #0
    89da:	4b07      	ldr	r3, [pc, #28]	; (89f8 <_usb_d_dev_wakeup+0x44>)
    89dc:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_WAKEUP, 0);
    89de:	4b07      	ldr	r3, [pc, #28]	; (89fc <_usb_d_dev_wakeup+0x48>)
    89e0:	685b      	ldr	r3, [r3, #4]
    89e2:	2100      	movs	r1, #0
    89e4:	2002      	movs	r0, #2
    89e6:	4798      	blx	r3
}
    89e8:	bf00      	nop
    89ea:	bd80      	pop	{r7, pc}
    89ec:	00007f57 	.word	0x00007f57
    89f0:	00007fad 	.word	0x00007fad
    89f4:	00007f75 	.word	0x00007f75
    89f8:	00008255 	.word	0x00008255
    89fc:	200009e0 	.word	0x200009e0

00008a00 <_usb_d_dev_reset>:

/**
 * \brief Handles USB signal reset interrupt
 */
static inline void _usb_d_dev_reset(void)
{
    8a00:	b580      	push	{r7, lr}
    8a02:	af00      	add	r7, sp, #0
	/* EP0 will not be reseted by USB RESET, disable manually. */
	hri_usbendpoint_write_EPCFG_reg(USB, 0, 0);
    8a04:	2200      	movs	r2, #0
    8a06:	2100      	movs	r1, #0
    8a08:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8a0c:	4b0d      	ldr	r3, [pc, #52]	; (8a44 <_usb_d_dev_reset+0x44>)
    8a0e:	4798      	blx	r3

	hri_usbdevice_clear_INTFLAG_reg(USB, USB_DEVICE_INTFLAG_EORST);
    8a10:	2108      	movs	r1, #8
    8a12:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8a16:	4b0c      	ldr	r3, [pc, #48]	; (8a48 <_usb_d_dev_reset+0x48>)
    8a18:	4798      	blx	r3
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    8a1a:	2170      	movs	r1, #112	; 0x70
    8a1c:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8a20:	4b0a      	ldr	r3, [pc, #40]	; (8a4c <_usb_d_dev_reset+0x4c>)
    8a22:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    8a24:	f240 2101 	movw	r1, #513	; 0x201
    8a28:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8a2c:	4b08      	ldr	r3, [pc, #32]	; (8a50 <_usb_d_dev_reset+0x50>)
    8a2e:	4798      	blx	r3

	_usb_d_dev_reset_epts();
    8a30:	4b08      	ldr	r3, [pc, #32]	; (8a54 <_usb_d_dev_reset+0x54>)
    8a32:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_RESET, 0);
    8a34:	4b08      	ldr	r3, [pc, #32]	; (8a58 <_usb_d_dev_reset+0x58>)
    8a36:	685b      	ldr	r3, [r3, #4]
    8a38:	2100      	movs	r1, #0
    8a3a:	2001      	movs	r0, #1
    8a3c:	4798      	blx	r3
}
    8a3e:	bf00      	nop
    8a40:	bd80      	pop	{r7, pc}
    8a42:	bf00      	nop
    8a44:	00007eed 	.word	0x00007eed
    8a48:	00007f57 	.word	0x00007f57
    8a4c:	00007fad 	.word	0x00007fad
    8a50:	00007f75 	.word	0x00007f75
    8a54:	000095bd 	.word	0x000095bd
    8a58:	200009e0 	.word	0x200009e0

00008a5c <_usb_d_dev_suspend>:

static inline void _usb_d_dev_suspend(void)
{
    8a5c:	b580      	push	{r7, lr}
    8a5e:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    8a60:	f240 2101 	movw	r1, #513	; 0x201
    8a64:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8a68:	4b09      	ldr	r3, [pc, #36]	; (8a90 <_usb_d_dev_suspend+0x34>)
    8a6a:	4798      	blx	r3
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    8a6c:	f240 2101 	movw	r1, #513	; 0x201
    8a70:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8a74:	4b07      	ldr	r3, [pc, #28]	; (8a94 <_usb_d_dev_suspend+0x38>)
    8a76:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    8a78:	2170      	movs	r1, #112	; 0x70
    8a7a:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8a7e:	4b06      	ldr	r3, [pc, #24]	; (8a98 <_usb_d_dev_suspend+0x3c>)
    8a80:	4798      	blx	r3

	dev_inst.callbacks.event(USB_EV_SUSPEND, 0);
    8a82:	4b06      	ldr	r3, [pc, #24]	; (8a9c <_usb_d_dev_suspend+0x40>)
    8a84:	685b      	ldr	r3, [r3, #4]
    8a86:	2100      	movs	r1, #0
    8a88:	2004      	movs	r0, #4
    8a8a:	4798      	blx	r3
}
    8a8c:	bf00      	nop
    8a8e:	bd80      	pop	{r7, pc}
    8a90:	00007f57 	.word	0x00007f57
    8a94:	00007fad 	.word	0x00007fad
    8a98:	00007f75 	.word	0x00007f75
    8a9c:	200009e0 	.word	0x200009e0

00008aa0 <_usb_d_dev_handle_nep>:

/**
 * \brief Handles USB non-endpoint interrupt
 */
static inline bool _usb_d_dev_handle_nep(void)
{
    8aa0:	b580      	push	{r7, lr}
    8aa2:	b082      	sub	sp, #8
    8aa4:	af00      	add	r7, sp, #0
	bool     rc    = true;
    8aa6:	2301      	movs	r3, #1
    8aa8:	71fb      	strb	r3, [r7, #7]
	uint16_t flags = hri_usbdevice_read_INTFLAG_reg(USB);
    8aaa:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8aae:	4b22      	ldr	r3, [pc, #136]	; (8b38 <_usb_d_dev_handle_nep+0x98>)
    8ab0:	4798      	blx	r3
    8ab2:	4603      	mov	r3, r0
    8ab4:	80bb      	strh	r3, [r7, #4]
	flags &= hri_usbdevice_read_INTEN_reg(USB);
    8ab6:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    8aba:	4b20      	ldr	r3, [pc, #128]	; (8b3c <_usb_d_dev_handle_nep+0x9c>)
    8abc:	4798      	blx	r3
    8abe:	4603      	mov	r3, r0
    8ac0:	461a      	mov	r2, r3
    8ac2:	88bb      	ldrh	r3, [r7, #4]
    8ac4:	4013      	ands	r3, r2
    8ac6:	80bb      	strh	r3, [r7, #4]

	if (flags & USB_DEVICE_INTFLAG_SOF) {
    8ac8:	88bb      	ldrh	r3, [r7, #4]
    8aca:	f003 0304 	and.w	r3, r3, #4
    8ace:	2b00      	cmp	r3, #0
    8ad0:	d003      	beq.n	8ada <_usb_d_dev_handle_nep+0x3a>
		_usb_d_dev_sof();
    8ad2:	4b1b      	ldr	r3, [pc, #108]	; (8b40 <_usb_d_dev_handle_nep+0xa0>)
    8ad4:	4798      	blx	r3
		return true;
    8ad6:	2301      	movs	r3, #1
    8ad8:	e02a      	b.n	8b30 <_usb_d_dev_handle_nep+0x90>
	}
	if (flags & USB_DEVICE_INTFLAG_LPMSUSP) {
    8ada:	88bb      	ldrh	r3, [r7, #4]
    8adc:	f403 7300 	and.w	r3, r3, #512	; 0x200
    8ae0:	2b00      	cmp	r3, #0
    8ae2:	d002      	beq.n	8aea <_usb_d_dev_handle_nep+0x4a>
		_usb_d_dev_lpmsusp();
    8ae4:	4b17      	ldr	r3, [pc, #92]	; (8b44 <_usb_d_dev_handle_nep+0xa4>)
    8ae6:	4798      	blx	r3
    8ae8:	e021      	b.n	8b2e <_usb_d_dev_handle_nep+0x8e>
	} else if (flags & USB_DEVICE_INTFLAG_RAMACER) {
    8aea:	88bb      	ldrh	r3, [r7, #4]
    8aec:	f003 0380 	and.w	r3, r3, #128	; 0x80
    8af0:	2b00      	cmp	r3, #0
    8af2:	d002      	beq.n	8afa <_usb_d_dev_handle_nep+0x5a>
		_usb_d_dev_ramerr();
    8af4:	4b14      	ldr	r3, [pc, #80]	; (8b48 <_usb_d_dev_handle_nep+0xa8>)
    8af6:	4798      	blx	r3
    8af8:	e019      	b.n	8b2e <_usb_d_dev_handle_nep+0x8e>
	} else if (flags & USB_D_WAKEUP_INT_FLAGS) {
    8afa:	88bb      	ldrh	r3, [r7, #4]
    8afc:	f003 0370 	and.w	r3, r3, #112	; 0x70
    8b00:	2b00      	cmp	r3, #0
    8b02:	d002      	beq.n	8b0a <_usb_d_dev_handle_nep+0x6a>
		_usb_d_dev_wakeup();
    8b04:	4b11      	ldr	r3, [pc, #68]	; (8b4c <_usb_d_dev_handle_nep+0xac>)
    8b06:	4798      	blx	r3
    8b08:	e011      	b.n	8b2e <_usb_d_dev_handle_nep+0x8e>
	} else if (flags & USB_DEVICE_INTFLAG_EORST) {
    8b0a:	88bb      	ldrh	r3, [r7, #4]
    8b0c:	f003 0308 	and.w	r3, r3, #8
    8b10:	2b00      	cmp	r3, #0
    8b12:	d002      	beq.n	8b1a <_usb_d_dev_handle_nep+0x7a>
		_usb_d_dev_reset();
    8b14:	4b0e      	ldr	r3, [pc, #56]	; (8b50 <_usb_d_dev_handle_nep+0xb0>)
    8b16:	4798      	blx	r3
    8b18:	e009      	b.n	8b2e <_usb_d_dev_handle_nep+0x8e>
	} else if (flags & USB_DEVICE_INTFLAG_SUSPEND) {
    8b1a:	88bb      	ldrh	r3, [r7, #4]
    8b1c:	f003 0301 	and.w	r3, r3, #1
    8b20:	2b00      	cmp	r3, #0
    8b22:	d002      	beq.n	8b2a <_usb_d_dev_handle_nep+0x8a>
		_usb_d_dev_suspend();
    8b24:	4b0b      	ldr	r3, [pc, #44]	; (8b54 <_usb_d_dev_handle_nep+0xb4>)
    8b26:	4798      	blx	r3
    8b28:	e001      	b.n	8b2e <_usb_d_dev_handle_nep+0x8e>
	} else {
		rc = false;
    8b2a:	2300      	movs	r3, #0
    8b2c:	71fb      	strb	r3, [r7, #7]
	}
	return rc;
    8b2e:	79fb      	ldrb	r3, [r7, #7]
}
    8b30:	4618      	mov	r0, r3
    8b32:	3708      	adds	r7, #8
    8b34:	46bd      	mov	sp, r7
    8b36:	bd80      	pop	{r7, pc}
    8b38:	00007f3d 	.word	0x00007f3d
    8b3c:	00007f93 	.word	0x00007f93
    8b40:	000088e1 	.word	0x000088e1
    8b44:	00008901 	.word	0x00008901
    8b48:	00008991 	.word	0x00008991
    8b4c:	000089b5 	.word	0x000089b5
    8b50:	00008a01 	.word	0x00008a01
    8b54:	00008a5d 	.word	0x00008a5d

00008b58 <_usb_d_dev_in_next>:
 * \brief Prepare next IN transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] isr Invoked from ISR.
 */
static void _usb_d_dev_in_next(struct _usb_d_dev_ep *ept, bool isr)
{
    8b58:	b590      	push	{r4, r7, lr}
    8b5a:	b089      	sub	sp, #36	; 0x24
    8b5c:	af00      	add	r7, sp, #0
    8b5e:	6078      	str	r0, [r7, #4]
    8b60:	460b      	mov	r3, r1
    8b62:	70fb      	strb	r3, [r7, #3]
	Usb *              hw          = USB;
    8b64:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    8b68:	61bb      	str	r3, [r7, #24]
	uint8_t            epn         = USB_EP_GET_N(ept->ep);
    8b6a:	687b      	ldr	r3, [r7, #4]
    8b6c:	7c9b      	ldrb	r3, [r3, #18]
    8b6e:	f003 030f 	and.w	r3, r3, #15
    8b72:	75fb      	strb	r3, [r7, #23]
	UsbDeviceDescBank *bank        = &prvt_inst.desc_table[epn].DeviceDescBank[0];
    8b74:	7dfb      	ldrb	r3, [r7, #23]
    8b76:	015b      	lsls	r3, r3, #5
    8b78:	4a73      	ldr	r2, [pc, #460]	; (8d48 <_usb_d_dev_in_next+0x1f0>)
    8b7a:	4413      	add	r3, r2
    8b7c:	613b      	str	r3, [r7, #16]
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
    8b7e:	78fb      	ldrb	r3, [r7, #3]
    8b80:	2b00      	cmp	r3, #0
    8b82:	d006      	beq.n	8b92 <_usb_d_dev_in_next+0x3a>
    8b84:	693b      	ldr	r3, [r7, #16]
    8b86:	3310      	adds	r3, #16
    8b88:	685b      	ldr	r3, [r3, #4]
    8b8a:	f3c3 030d 	ubfx	r3, r3, #0, #14
    8b8e:	b29b      	uxth	r3, r3
    8b90:	e000      	b.n	8b94 <_usb_d_dev_in_next+0x3c>
    8b92:	2300      	movs	r3, #0
    8b94:	81fb      	strh	r3, [r7, #14]
	uint16_t           trans_next;
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    8b96:	687b      	ldr	r3, [r7, #4]
    8b98:	8a1b      	ldrh	r3, [r3, #16]
    8b9a:	f240 32ff 	movw	r2, #1023	; 0x3ff
    8b9e:	4293      	cmp	r3, r2
    8ba0:	d103      	bne.n	8baa <_usb_d_dev_in_next+0x52>
    8ba2:	687b      	ldr	r3, [r7, #4]
    8ba4:	8a1b      	ldrh	r3, [r3, #16]
    8ba6:	b21b      	sxth	r3, r3
    8ba8:	e004      	b.n	8bb4 <_usb_d_dev_in_next+0x5c>
    8baa:	687b      	ldr	r3, [r7, #4]
    8bac:	8a1b      	ldrh	r3, [r3, #16]
    8bae:	3b01      	subs	r3, #1
    8bb0:	b29b      	uxth	r3, r3
    8bb2:	b21b      	sxth	r3, r3
    8bb4:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
    8bb8:	4013      	ands	r3, r2
    8bba:	b21b      	sxth	r3, r3
    8bbc:	81bb      	strh	r3, [r7, #12]
	uint8_t            inten    = 0;
    8bbe:	2300      	movs	r3, #0
    8bc0:	777b      	strb	r3, [r7, #29]
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    8bc2:	687b      	ldr	r3, [r7, #4]
    8bc4:	7cdb      	ldrb	r3, [r3, #19]
    8bc6:	f003 0307 	and.w	r3, r3, #7
    8bca:	b2db      	uxtb	r3, r3
    8bcc:	2b01      	cmp	r3, #1
    8bce:	bf0c      	ite	eq
    8bd0:	2301      	moveq	r3, #1
    8bd2:	2300      	movne	r3, #0
    8bd4:	72fb      	strb	r3, [r7, #11]

	if (isr) {
    8bd6:	78fb      	ldrb	r3, [r7, #3]
    8bd8:	2b00      	cmp	r3, #0
    8bda:	d004      	beq.n	8be6 <_usb_d_dev_in_next+0x8e>
		_usbd_ep_ack_io_cpt(epn, 1);
    8bdc:	7dfb      	ldrb	r3, [r7, #23]
    8bde:	2101      	movs	r1, #1
    8be0:	4618      	mov	r0, r3
    8be2:	4b5a      	ldr	r3, [pc, #360]	; (8d4c <_usb_d_dev_in_next+0x1f4>)
    8be4:	4798      	blx	r3
	}

	ept->trans_count += trans_count;
    8be6:	687b      	ldr	r3, [r7, #4]
    8be8:	689a      	ldr	r2, [r3, #8]
    8bea:	89fb      	ldrh	r3, [r7, #14]
    8bec:	441a      	add	r2, r3
    8bee:	687b      	ldr	r3, [r7, #4]
    8bf0:	609a      	str	r2, [r3, #8]
	/* Send more data. */
	if (ept->trans_count < ept->trans_size) {
    8bf2:	687b      	ldr	r3, [r7, #4]
    8bf4:	689a      	ldr	r2, [r3, #8]
    8bf6:	687b      	ldr	r3, [r7, #4]
    8bf8:	685b      	ldr	r3, [r3, #4]
    8bfa:	429a      	cmp	r2, r3
    8bfc:	d243      	bcs.n	8c86 <_usb_d_dev_in_next+0x12e>
		trans_next = ept->trans_size - ept->trans_count;
    8bfe:	687b      	ldr	r3, [r7, #4]
    8c00:	685b      	ldr	r3, [r3, #4]
    8c02:	b29a      	uxth	r2, r3
    8c04:	687b      	ldr	r3, [r7, #4]
    8c06:	689b      	ldr	r3, [r3, #8]
    8c08:	b29b      	uxth	r3, r3
    8c0a:	1ad3      	subs	r3, r2, r3
    8c0c:	83fb      	strh	r3, [r7, #30]
		if (ept->flags.bits.use_cache) {
    8c0e:	687b      	ldr	r3, [r7, #4]
    8c10:	7cdb      	ldrb	r3, [r3, #19]
    8c12:	f003 0320 	and.w	r3, r3, #32
    8c16:	b2db      	uxtb	r3, r3
    8c18:	2b00      	cmp	r3, #0
    8c1a:	d01b      	beq.n	8c54 <_usb_d_dev_in_next+0xfc>
			if (trans_next > ept->size) {
    8c1c:	687b      	ldr	r3, [r7, #4]
    8c1e:	8a1b      	ldrh	r3, [r3, #16]
    8c20:	8bfa      	ldrh	r2, [r7, #30]
    8c22:	429a      	cmp	r2, r3
    8c24:	d902      	bls.n	8c2c <_usb_d_dev_in_next+0xd4>
				trans_next = ept->size;
    8c26:	687b      	ldr	r3, [r7, #4]
    8c28:	8a1b      	ldrh	r3, [r3, #16]
    8c2a:	83fb      	strh	r3, [r7, #30]
			}
			memcpy(ept->cache, &ept->trans_buf[ept->trans_count], trans_next);
    8c2c:	687b      	ldr	r3, [r7, #4]
    8c2e:	68d8      	ldr	r0, [r3, #12]
    8c30:	687b      	ldr	r3, [r7, #4]
    8c32:	681a      	ldr	r2, [r3, #0]
    8c34:	687b      	ldr	r3, [r7, #4]
    8c36:	689b      	ldr	r3, [r3, #8]
    8c38:	4413      	add	r3, r2
    8c3a:	8bfa      	ldrh	r2, [r7, #30]
    8c3c:	4619      	mov	r1, r3
    8c3e:	4b44      	ldr	r3, [pc, #272]	; (8d50 <_usb_d_dev_in_next+0x1f8>)
    8c40:	4798      	blx	r3
			_usbd_ep_set_buf(epn, 1, (uint32_t)ept->cache);
    8c42:	687b      	ldr	r3, [r7, #4]
    8c44:	68db      	ldr	r3, [r3, #12]
    8c46:	461a      	mov	r2, r3
    8c48:	7dfb      	ldrb	r3, [r7, #23]
    8c4a:	2101      	movs	r1, #1
    8c4c:	4618      	mov	r0, r3
    8c4e:	4b41      	ldr	r3, [pc, #260]	; (8d54 <_usb_d_dev_in_next+0x1fc>)
    8c50:	4798      	blx	r3
    8c52:	e011      	b.n	8c78 <_usb_d_dev_in_next+0x120>
		} else {
			if (trans_next > USB_D_DEV_TRANS_MAX) {
    8c54:	8bfb      	ldrh	r3, [r7, #30]
    8c56:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
    8c5a:	d902      	bls.n	8c62 <_usb_d_dev_in_next+0x10a>
				trans_next = USB_D_DEV_TRANS_MAX;
    8c5c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    8c60:	83fb      	strh	r3, [r7, #30]
			}
			_usbd_ep_set_buf(epn, 1, (uint32_t)&ept->trans_buf[ept->trans_count]);
    8c62:	687b      	ldr	r3, [r7, #4]
    8c64:	681a      	ldr	r2, [r3, #0]
    8c66:	687b      	ldr	r3, [r7, #4]
    8c68:	689b      	ldr	r3, [r3, #8]
    8c6a:	4413      	add	r3, r2
    8c6c:	461a      	mov	r2, r3
    8c6e:	7dfb      	ldrb	r3, [r7, #23]
    8c70:	2101      	movs	r1, #1
    8c72:	4618      	mov	r0, r3
    8c74:	4b37      	ldr	r3, [pc, #220]	; (8d54 <_usb_d_dev_in_next+0x1fc>)
    8c76:	4798      	blx	r3
		}
		_usbd_ep_set_in_trans(epn, 1, trans_next, 0);
    8c78:	8bfa      	ldrh	r2, [r7, #30]
    8c7a:	7df8      	ldrb	r0, [r7, #23]
    8c7c:	2300      	movs	r3, #0
    8c7e:	2101      	movs	r1, #1
    8c80:	4c35      	ldr	r4, [pc, #212]	; (8d58 <_usb_d_dev_in_next+0x200>)
    8c82:	47a0      	blx	r4
		goto _in_tx_exec;
    8c84:	e041      	b.n	8d0a <_usb_d_dev_in_next+0x1b2>
	} else if (ept->flags.bits.need_zlp) {
    8c86:	687b      	ldr	r3, [r7, #4]
    8c88:	7cdb      	ldrb	r3, [r3, #19]
    8c8a:	f003 0310 	and.w	r3, r3, #16
    8c8e:	b2db      	uxtb	r3, r3
    8c90:	2b00      	cmp	r3, #0
    8c92:	d00b      	beq.n	8cac <_usb_d_dev_in_next+0x154>
		ept->flags.bits.need_zlp = 0;
    8c94:	687a      	ldr	r2, [r7, #4]
    8c96:	7cd3      	ldrb	r3, [r2, #19]
    8c98:	f36f 1304 	bfc	r3, #4, #1
    8c9c:	74d3      	strb	r3, [r2, #19]
		_usbd_ep_set_in_trans(epn, 1, 0, 0);
    8c9e:	7df8      	ldrb	r0, [r7, #23]
    8ca0:	2300      	movs	r3, #0
    8ca2:	2200      	movs	r2, #0
    8ca4:	2101      	movs	r1, #1
    8ca6:	4c2c      	ldr	r4, [pc, #176]	; (8d58 <_usb_d_dev_in_next+0x200>)
    8ca8:	47a0      	blx	r4
		goto _in_tx_exec;
    8caa:	e02e      	b.n	8d0a <_usb_d_dev_in_next+0x1b2>
	}
	/* Complete. */
	if (is_ctrl) {
    8cac:	7afb      	ldrb	r3, [r7, #11]
    8cae:	2b00      	cmp	r3, #0
    8cb0:	d006      	beq.n	8cc0 <_usb_d_dev_in_next+0x168>
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK1_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRCPT0);
    8cb2:	7dfb      	ldrb	r3, [r7, #23]
    8cb4:	224b      	movs	r2, #75	; 0x4b
    8cb6:	4619      	mov	r1, r3
    8cb8:	69b8      	ldr	r0, [r7, #24]
    8cba:	4b28      	ldr	r3, [pc, #160]	; (8d5c <_usb_d_dev_in_next+0x204>)
    8cbc:	4798      	blx	r3
    8cbe:	e005      	b.n	8ccc <_usb_d_dev_in_next+0x174>
	} else {
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK1_INT_FLAGS);
    8cc0:	7dfb      	ldrb	r3, [r7, #23]
    8cc2:	224a      	movs	r2, #74	; 0x4a
    8cc4:	4619      	mov	r1, r3
    8cc6:	69b8      	ldr	r0, [r7, #24]
    8cc8:	4b24      	ldr	r3, [pc, #144]	; (8d5c <_usb_d_dev_in_next+0x204>)
    8cca:	4798      	blx	r3
	}

	/* No ping-pong, so ask more data without background transfer. */
	if (last_pkt == ept->size) {
    8ccc:	687b      	ldr	r3, [r7, #4]
    8cce:	8a1b      	ldrh	r3, [r3, #16]
    8cd0:	89ba      	ldrh	r2, [r7, #12]
    8cd2:	429a      	cmp	r2, r3
    8cd4:	d114      	bne.n	8d00 <_usb_d_dev_in_next+0x1a8>
		ept->flags.bits.is_busy = 0;
    8cd6:	687a      	ldr	r2, [r7, #4]
    8cd8:	7cd3      	ldrb	r3, [r2, #19]
    8cda:	f36f 1386 	bfc	r3, #6, #1
    8cde:	74d3      	strb	r3, [r2, #19]
		if (dev_inst.ep_callbacks.more(ept->ep, ept->trans_count)) {
    8ce0:	4b1f      	ldr	r3, [pc, #124]	; (8d60 <_usb_d_dev_in_next+0x208>)
    8ce2:	68db      	ldr	r3, [r3, #12]
    8ce4:	687a      	ldr	r2, [r7, #4]
    8ce6:	7c90      	ldrb	r0, [r2, #18]
    8ce8:	687a      	ldr	r2, [r7, #4]
    8cea:	6892      	ldr	r2, [r2, #8]
    8cec:	4611      	mov	r1, r2
    8cee:	4798      	blx	r3
    8cf0:	4603      	mov	r3, r0
    8cf2:	2b00      	cmp	r3, #0
    8cf4:	d124      	bne.n	8d40 <_usb_d_dev_in_next+0x1e8>
			/* More data added. */
			return;
		}
		ept->flags.bits.is_busy = 1;
    8cf6:	687a      	ldr	r2, [r7, #4]
    8cf8:	7cd3      	ldrb	r3, [r2, #19]
    8cfa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    8cfe:	74d3      	strb	r3, [r2, #19]
	}
	/* Finish normally. */
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    8d00:	2100      	movs	r1, #0
    8d02:	6878      	ldr	r0, [r7, #4]
    8d04:	4b17      	ldr	r3, [pc, #92]	; (8d64 <_usb_d_dev_in_next+0x20c>)
    8d06:	4798      	blx	r3
	return;
    8d08:	e01b      	b.n	8d42 <_usb_d_dev_in_next+0x1ea>

_in_tx_exec:
	if (!isr) {
    8d0a:	78fb      	ldrb	r3, [r7, #3]
    8d0c:	f083 0301 	eor.w	r3, r3, #1
    8d10:	b2db      	uxtb	r3, r3
    8d12:	2b00      	cmp	r3, #0
    8d14:	d00d      	beq.n	8d32 <_usb_d_dev_in_next+0x1da>
		if (is_ctrl) {
    8d16:	7afb      	ldrb	r3, [r7, #11]
    8d18:	2b00      	cmp	r3, #0
    8d1a:	d002      	beq.n	8d22 <_usb_d_dev_in_next+0x1ca>
			/* Control endpoint: SETUP or OUT will abort IN transaction.
			 * SETUP: terminate the IN without any notification. Trigger
			 *        SETUP callback.
			 * OUT NAK: terminate IN.
			 */
			inten = USB_D_BANK1_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL0;
    8d1c:	234e      	movs	r3, #78	; 0x4e
    8d1e:	777b      	strb	r3, [r7, #29]
    8d20:	e001      	b.n	8d26 <_usb_d_dev_in_next+0x1ce>
		} else {
			/* Initialize normal IN transaction. */
			inten = USB_D_BANK1_INT_FLAGS;
    8d22:	234a      	movs	r3, #74	; 0x4a
    8d24:	777b      	strb	r3, [r7, #29]
		}
		hri_usbendpoint_set_EPINTEN_reg(hw, epn, inten);
    8d26:	7f7a      	ldrb	r2, [r7, #29]
    8d28:	7dfb      	ldrb	r3, [r7, #23]
    8d2a:	4619      	mov	r1, r3
    8d2c:	69b8      	ldr	r0, [r7, #24]
    8d2e:	4b0e      	ldr	r3, [pc, #56]	; (8d68 <_usb_d_dev_in_next+0x210>)
    8d30:	4798      	blx	r3
	}
	_usbd_ep_set_in_rdy(epn, 1, true);
    8d32:	7dfb      	ldrb	r3, [r7, #23]
    8d34:	2201      	movs	r2, #1
    8d36:	2101      	movs	r1, #1
    8d38:	4618      	mov	r0, r3
    8d3a:	4b0c      	ldr	r3, [pc, #48]	; (8d6c <_usb_d_dev_in_next+0x214>)
    8d3c:	4798      	blx	r3
    8d3e:	e000      	b.n	8d42 <_usb_d_dev_in_next+0x1ea>
			return;
    8d40:	bf00      	nop
}
    8d42:	3724      	adds	r7, #36	; 0x24
    8d44:	46bd      	mov	sp, r7
    8d46:	bd90      	pop	{r4, r7, pc}
    8d48:	20000aa8 	.word	0x20000aa8
    8d4c:	00008551 	.word	0x00008551
    8d50:	0000c7a5 	.word	0x0000c7a5
    8d54:	0000857d 	.word	0x0000857d
    8d58:	000086c5 	.word	0x000086c5
    8d5c:	00007e5d 	.word	0x00007e5d
    8d60:	200009e0 	.word	0x200009e0
    8d64:	00009e81 	.word	0x00009e81
    8d68:	00007e31 	.word	0x00007e31
    8d6c:	0000877d 	.word	0x0000877d

00008d70 <_usb_d_dev_out_next>:
 * \brief Prepare next OUT transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] isr Invoked from ISR.
 */
static void _usb_d_dev_out_next(struct _usb_d_dev_ep *ept, bool isr)
{
    8d70:	b590      	push	{r4, r7, lr}
    8d72:	b08b      	sub	sp, #44	; 0x2c
    8d74:	af00      	add	r7, sp, #0
    8d76:	6078      	str	r0, [r7, #4]
    8d78:	460b      	mov	r3, r1
    8d7a:	70fb      	strb	r3, [r7, #3]
	Usb *              hw         = USB;
    8d7c:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    8d80:	623b      	str	r3, [r7, #32]
	uint8_t            epn        = USB_EP_GET_N(ept->ep);
    8d82:	687b      	ldr	r3, [r7, #4]
    8d84:	7c9b      	ldrb	r3, [r3, #18]
    8d86:	f003 030f 	and.w	r3, r3, #15
    8d8a:	77fb      	strb	r3, [r7, #31]
	UsbDeviceDescBank *bank       = &prvt_inst.desc_table[epn].DeviceDescBank[0];
    8d8c:	7ffb      	ldrb	r3, [r7, #31]
    8d8e:	015b      	lsls	r3, r3, #5
    8d90:	4a94      	ldr	r2, [pc, #592]	; (8fe4 <_usb_d_dev_out_next+0x274>)
    8d92:	4413      	add	r3, r2
    8d94:	61bb      	str	r3, [r7, #24]
	uint16_t           trans_size = isr ? bank->PCKSIZE.bit.MULTI_PACKET_SIZE : 0;
    8d96:	78fb      	ldrb	r3, [r7, #3]
    8d98:	2b00      	cmp	r3, #0
    8d9a:	d005      	beq.n	8da8 <_usb_d_dev_out_next+0x38>
    8d9c:	69bb      	ldr	r3, [r7, #24]
    8d9e:	685b      	ldr	r3, [r3, #4]
    8da0:	f3c3 338d 	ubfx	r3, r3, #14, #14
    8da4:	b29b      	uxth	r3, r3
    8da6:	e000      	b.n	8daa <_usb_d_dev_out_next+0x3a>
    8da8:	2300      	movs	r3, #0
    8daa:	82fb      	strh	r3, [r7, #22]
	uint16_t           last_trans = isr ? bank->PCKSIZE.bit.BYTE_COUNT : 0;
    8dac:	78fb      	ldrb	r3, [r7, #3]
    8dae:	2b00      	cmp	r3, #0
    8db0:	d005      	beq.n	8dbe <_usb_d_dev_out_next+0x4e>
    8db2:	69bb      	ldr	r3, [r7, #24]
    8db4:	685b      	ldr	r3, [r3, #4]
    8db6:	f3c3 030d 	ubfx	r3, r3, #0, #14
    8dba:	b29b      	uxth	r3, r3
    8dbc:	e000      	b.n	8dc0 <_usb_d_dev_out_next+0x50>
    8dbe:	2300      	movs	r3, #0
    8dc0:	82bb      	strh	r3, [r7, #20]
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
    8dc2:	687b      	ldr	r3, [r7, #4]
    8dc4:	8a1b      	ldrh	r3, [r3, #16]
    8dc6:	f240 32ff 	movw	r2, #1023	; 0x3ff
    8dca:	4293      	cmp	r3, r2
    8dcc:	d004      	beq.n	8dd8 <_usb_d_dev_out_next+0x68>
    8dce:	687b      	ldr	r3, [r7, #4]
    8dd0:	8a1b      	ldrh	r3, [r3, #16]
    8dd2:	3b01      	subs	r3, #1
    8dd4:	b29b      	uxth	r3, r3
    8dd6:	e001      	b.n	8ddc <_usb_d_dev_out_next+0x6c>
    8dd8:	f240 33ff 	movw	r3, #1023	; 0x3ff
    8ddc:	827b      	strh	r3, [r7, #18]
	uint16_t           last_pkt   = last_trans & size_mask;
    8dde:	8aba      	ldrh	r2, [r7, #20]
    8de0:	8a7b      	ldrh	r3, [r7, #18]
    8de2:	4013      	ands	r3, r2
    8de4:	823b      	strh	r3, [r7, #16]
	uint16_t           trans_next;
	uint8_t            inten;
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    8de6:	687b      	ldr	r3, [r7, #4]
    8de8:	7cdb      	ldrb	r3, [r3, #19]
    8dea:	f003 0307 	and.w	r3, r3, #7
    8dee:	b2db      	uxtb	r3, r3
    8df0:	2b01      	cmp	r3, #1
    8df2:	bf0c      	ite	eq
    8df4:	2301      	moveq	r3, #1
    8df6:	2300      	movne	r3, #0
    8df8:	73fb      	strb	r3, [r7, #15]

	if (isr) {
    8dfa:	78fb      	ldrb	r3, [r7, #3]
    8dfc:	2b00      	cmp	r3, #0
    8dfe:	d004      	beq.n	8e0a <_usb_d_dev_out_next+0x9a>
		_usbd_ep_ack_io_cpt(epn, 0);
    8e00:	7ffb      	ldrb	r3, [r7, #31]
    8e02:	2100      	movs	r1, #0
    8e04:	4618      	mov	r0, r3
    8e06:	4b78      	ldr	r3, [pc, #480]	; (8fe8 <_usb_d_dev_out_next+0x278>)
    8e08:	4798      	blx	r3
	}

	/* If cache is used, copy data to buffer. */
	if (ept->flags.bits.use_cache && ept->trans_size) {
    8e0a:	687b      	ldr	r3, [r7, #4]
    8e0c:	7cdb      	ldrb	r3, [r3, #19]
    8e0e:	f003 0320 	and.w	r3, r3, #32
    8e12:	b2db      	uxtb	r3, r3
    8e14:	2b00      	cmp	r3, #0
    8e16:	d01c      	beq.n	8e52 <_usb_d_dev_out_next+0xe2>
    8e18:	687b      	ldr	r3, [r7, #4]
    8e1a:	685b      	ldr	r3, [r3, #4]
    8e1c:	2b00      	cmp	r3, #0
    8e1e:	d018      	beq.n	8e52 <_usb_d_dev_out_next+0xe2>
		uint16_t buf_remain = ept->trans_size - ept->trans_count;
    8e20:	687b      	ldr	r3, [r7, #4]
    8e22:	685b      	ldr	r3, [r3, #4]
    8e24:	b29a      	uxth	r2, r3
    8e26:	687b      	ldr	r3, [r7, #4]
    8e28:	689b      	ldr	r3, [r3, #8]
    8e2a:	b29b      	uxth	r3, r3
    8e2c:	1ad3      	subs	r3, r2, r3
    8e2e:	81bb      	strh	r3, [r7, #12]
		memcpy(&ept->trans_buf[ept->trans_count], ept->cache, (buf_remain > last_pkt) ? last_pkt : buf_remain);
    8e30:	687b      	ldr	r3, [r7, #4]
    8e32:	681a      	ldr	r2, [r3, #0]
    8e34:	687b      	ldr	r3, [r7, #4]
    8e36:	689b      	ldr	r3, [r3, #8]
    8e38:	18d0      	adds	r0, r2, r3
    8e3a:	687b      	ldr	r3, [r7, #4]
    8e3c:	68d9      	ldr	r1, [r3, #12]
    8e3e:	89ba      	ldrh	r2, [r7, #12]
    8e40:	8a3b      	ldrh	r3, [r7, #16]
    8e42:	429a      	cmp	r2, r3
    8e44:	d901      	bls.n	8e4a <_usb_d_dev_out_next+0xda>
    8e46:	8a3b      	ldrh	r3, [r7, #16]
    8e48:	e000      	b.n	8e4c <_usb_d_dev_out_next+0xdc>
    8e4a:	89bb      	ldrh	r3, [r7, #12]
    8e4c:	461a      	mov	r2, r3
    8e4e:	4b67      	ldr	r3, [pc, #412]	; (8fec <_usb_d_dev_out_next+0x27c>)
    8e50:	4798      	blx	r3
	}

	/* Force wait ZLP */
	if (ept->trans_size == 0 && ept->flags.bits.need_zlp) {
    8e52:	687b      	ldr	r3, [r7, #4]
    8e54:	685b      	ldr	r3, [r3, #4]
    8e56:	2b00      	cmp	r3, #0
    8e58:	d121      	bne.n	8e9e <_usb_d_dev_out_next+0x12e>
    8e5a:	687b      	ldr	r3, [r7, #4]
    8e5c:	7cdb      	ldrb	r3, [r3, #19]
    8e5e:	f003 0310 	and.w	r3, r3, #16
    8e62:	b2db      	uxtb	r3, r3
    8e64:	2b00      	cmp	r3, #0
    8e66:	d01a      	beq.n	8e9e <_usb_d_dev_out_next+0x12e>
		ept->flags.bits.need_zlp  = 0;
    8e68:	687a      	ldr	r2, [r7, #4]
    8e6a:	7cd3      	ldrb	r3, [r2, #19]
    8e6c:	f36f 1304 	bfc	r3, #4, #1
    8e70:	74d3      	strb	r3, [r2, #19]
		ept->flags.bits.use_cache = 1;
    8e72:	687a      	ldr	r2, [r7, #4]
    8e74:	7cd3      	ldrb	r3, [r2, #19]
    8e76:	f043 0320 	orr.w	r3, r3, #32
    8e7a:	74d3      	strb	r3, [r2, #19]
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    8e7c:	687b      	ldr	r3, [r7, #4]
    8e7e:	68db      	ldr	r3, [r3, #12]
    8e80:	461a      	mov	r2, r3
    8e82:	7ffb      	ldrb	r3, [r7, #31]
    8e84:	2100      	movs	r1, #0
    8e86:	4618      	mov	r0, r3
    8e88:	4b59      	ldr	r3, [pc, #356]	; (8ff0 <_usb_d_dev_out_next+0x280>)
    8e8a:	4798      	blx	r3
		_usbd_ep_set_out_trans(epn, 0, ept->size, 0);
    8e8c:	687b      	ldr	r3, [r7, #4]
    8e8e:	8a1b      	ldrh	r3, [r3, #16]
    8e90:	461a      	mov	r2, r3
    8e92:	7ff8      	ldrb	r0, [r7, #31]
    8e94:	2300      	movs	r3, #0
    8e96:	2100      	movs	r1, #0
    8e98:	4c56      	ldr	r4, [pc, #344]	; (8ff4 <_usb_d_dev_out_next+0x284>)
    8e9a:	47a0      	blx	r4
		goto _out_rx_exec;
    8e9c:	e090      	b.n	8fc0 <_usb_d_dev_out_next+0x250>
	} else if (isr && last_pkt < ept->size) {
    8e9e:	78fb      	ldrb	r3, [r7, #3]
    8ea0:	2b00      	cmp	r3, #0
    8ea2:	d010      	beq.n	8ec6 <_usb_d_dev_out_next+0x156>
    8ea4:	687b      	ldr	r3, [r7, #4]
    8ea6:	8a1b      	ldrh	r3, [r3, #16]
    8ea8:	8a3a      	ldrh	r2, [r7, #16]
    8eaa:	429a      	cmp	r2, r3
    8eac:	d20b      	bcs.n	8ec6 <_usb_d_dev_out_next+0x156>
		/* Short packet. */
		ept->flags.bits.need_zlp = 0;
    8eae:	687a      	ldr	r2, [r7, #4]
    8eb0:	7cd3      	ldrb	r3, [r2, #19]
    8eb2:	f36f 1304 	bfc	r3, #4, #1
    8eb6:	74d3      	strb	r3, [r2, #19]
		ept->trans_count += last_trans;
    8eb8:	687b      	ldr	r3, [r7, #4]
    8eba:	689a      	ldr	r2, [r3, #8]
    8ebc:	8abb      	ldrh	r3, [r7, #20]
    8ebe:	441a      	add	r2, r3
    8ec0:	687b      	ldr	r3, [r7, #4]
    8ec2:	609a      	str	r2, [r3, #8]
    8ec4:	e05c      	b.n	8f80 <_usb_d_dev_out_next+0x210>
	} else {
		/* Full packets. */
		ept->trans_count += trans_size;
    8ec6:	687b      	ldr	r3, [r7, #4]
    8ec8:	689a      	ldr	r2, [r3, #8]
    8eca:	8afb      	ldrh	r3, [r7, #22]
    8ecc:	441a      	add	r2, r3
    8ece:	687b      	ldr	r3, [r7, #4]
    8ed0:	609a      	str	r2, [r3, #8]

		/* Wait more data */
		if (ept->trans_count < ept->trans_size) {
    8ed2:	687b      	ldr	r3, [r7, #4]
    8ed4:	689a      	ldr	r2, [r3, #8]
    8ed6:	687b      	ldr	r3, [r7, #4]
    8ed8:	685b      	ldr	r3, [r3, #4]
    8eda:	429a      	cmp	r2, r3
    8edc:	d250      	bcs.n	8f80 <_usb_d_dev_out_next+0x210>
			/* Continue OUT */
			trans_next = ept->trans_size - ept->trans_count;
    8ede:	687b      	ldr	r3, [r7, #4]
    8ee0:	685b      	ldr	r3, [r3, #4]
    8ee2:	b29a      	uxth	r2, r3
    8ee4:	687b      	ldr	r3, [r7, #4]
    8ee6:	689b      	ldr	r3, [r3, #8]
    8ee8:	b29b      	uxth	r3, r3
    8eea:	1ad3      	subs	r3, r2, r3
    8eec:	84fb      	strh	r3, [r7, #38]	; 0x26
			if (ept->flags.bits.use_cache) {
    8eee:	687b      	ldr	r3, [r7, #4]
    8ef0:	7cdb      	ldrb	r3, [r3, #19]
    8ef2:	f003 0320 	and.w	r3, r3, #32
    8ef6:	b2db      	uxtb	r3, r3
    8ef8:	2b00      	cmp	r3, #0
    8efa:	d010      	beq.n	8f1e <_usb_d_dev_out_next+0x1ae>
				/* Expect single packet each time. */
				if (trans_next > ept->size) {
    8efc:	687b      	ldr	r3, [r7, #4]
    8efe:	8a1b      	ldrh	r3, [r3, #16]
    8f00:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    8f02:	429a      	cmp	r2, r3
    8f04:	d902      	bls.n	8f0c <_usb_d_dev_out_next+0x19c>
					trans_next = ept->size;
    8f06:	687b      	ldr	r3, [r7, #4]
    8f08:	8a1b      	ldrh	r3, [r3, #16]
    8f0a:	84fb      	strh	r3, [r7, #38]	; 0x26
				}
				_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    8f0c:	687b      	ldr	r3, [r7, #4]
    8f0e:	68db      	ldr	r3, [r3, #12]
    8f10:	461a      	mov	r2, r3
    8f12:	7ffb      	ldrb	r3, [r7, #31]
    8f14:	2100      	movs	r1, #0
    8f16:	4618      	mov	r0, r3
    8f18:	4b35      	ldr	r3, [pc, #212]	; (8ff0 <_usb_d_dev_out_next+0x280>)
    8f1a:	4798      	blx	r3
    8f1c:	e029      	b.n	8f72 <_usb_d_dev_out_next+0x202>
			} else {
				/* Multiple packets each time. */
				if (trans_next > ept->size) {
    8f1e:	687b      	ldr	r3, [r7, #4]
    8f20:	8a1b      	ldrh	r3, [r3, #16]
    8f22:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    8f24:	429a      	cmp	r2, r3
    8f26:	d90f      	bls.n	8f48 <_usb_d_dev_out_next+0x1d8>
					if (trans_next > USB_D_DEV_TRANS_MAX) {
    8f28:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
    8f2a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
    8f2e:	d903      	bls.n	8f38 <_usb_d_dev_out_next+0x1c8>
						trans_next = USB_D_DEV_TRANS_MAX;
    8f30:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    8f34:	84fb      	strh	r3, [r7, #38]	; 0x26
    8f36:	e011      	b.n	8f5c <_usb_d_dev_out_next+0x1ec>
					} else {
						/* Must expect multiple of ep size. */
						trans_next -= trans_next & size_mask;
    8f38:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    8f3a:	8a7b      	ldrh	r3, [r7, #18]
    8f3c:	4013      	ands	r3, r2
    8f3e:	b29b      	uxth	r3, r3
    8f40:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    8f42:	1ad3      	subs	r3, r2, r3
    8f44:	84fb      	strh	r3, [r7, #38]	; 0x26
    8f46:	e009      	b.n	8f5c <_usb_d_dev_out_next+0x1ec>
					}
				} else if (trans_next < ept->size) {
    8f48:	687b      	ldr	r3, [r7, #4]
    8f4a:	8a1b      	ldrh	r3, [r3, #16]
    8f4c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    8f4e:	429a      	cmp	r2, r3
    8f50:	d204      	bcs.n	8f5c <_usb_d_dev_out_next+0x1ec>
					/* Last un-aligned packet should be cached. */
					ept->flags.bits.use_cache = 1;
    8f52:	687a      	ldr	r2, [r7, #4]
    8f54:	7cd3      	ldrb	r3, [r2, #19]
    8f56:	f043 0320 	orr.w	r3, r3, #32
    8f5a:	74d3      	strb	r3, [r2, #19]
				}
				_usbd_ep_set_buf(epn, 0, (uint32_t)&ept->trans_buf[ept->trans_count]);
    8f5c:	687b      	ldr	r3, [r7, #4]
    8f5e:	681a      	ldr	r2, [r3, #0]
    8f60:	687b      	ldr	r3, [r7, #4]
    8f62:	689b      	ldr	r3, [r3, #8]
    8f64:	4413      	add	r3, r2
    8f66:	461a      	mov	r2, r3
    8f68:	7ffb      	ldrb	r3, [r7, #31]
    8f6a:	2100      	movs	r1, #0
    8f6c:	4618      	mov	r0, r3
    8f6e:	4b20      	ldr	r3, [pc, #128]	; (8ff0 <_usb_d_dev_out_next+0x280>)
    8f70:	4798      	blx	r3
			}
			_usbd_ep_set_out_trans(epn, 0, trans_next, 0);
    8f72:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    8f74:	7ff8      	ldrb	r0, [r7, #31]
    8f76:	2300      	movs	r3, #0
    8f78:	2100      	movs	r1, #0
    8f7a:	4c1e      	ldr	r4, [pc, #120]	; (8ff4 <_usb_d_dev_out_next+0x284>)
    8f7c:	47a0      	blx	r4
			goto _out_rx_exec;
    8f7e:	e01f      	b.n	8fc0 <_usb_d_dev_out_next+0x250>
		}
	}
	/* Finish normally. */
	if (is_ctrl) {
    8f80:	7bfb      	ldrb	r3, [r7, #15]
    8f82:	2b00      	cmp	r3, #0
    8f84:	d006      	beq.n	8f94 <_usb_d_dev_out_next+0x224>
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK0_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL1);
    8f86:	7ffb      	ldrb	r3, [r7, #31]
    8f88:	222d      	movs	r2, #45	; 0x2d
    8f8a:	4619      	mov	r1, r3
    8f8c:	6a38      	ldr	r0, [r7, #32]
    8f8e:	4b1a      	ldr	r3, [pc, #104]	; (8ff8 <_usb_d_dev_out_next+0x288>)
    8f90:	4798      	blx	r3
    8f92:	e005      	b.n	8fa0 <_usb_d_dev_out_next+0x230>
	} else {
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK0_INT_FLAGS);
    8f94:	7ffb      	ldrb	r3, [r7, #31]
    8f96:	2225      	movs	r2, #37	; 0x25
    8f98:	4619      	mov	r1, r3
    8f9a:	6a38      	ldr	r0, [r7, #32]
    8f9c:	4b16      	ldr	r3, [pc, #88]	; (8ff8 <_usb_d_dev_out_next+0x288>)
    8f9e:	4798      	blx	r3
	}
	/* Use ep0 out cache for next setup packets */
	if (0 == epn) {
    8fa0:	7ffb      	ldrb	r3, [r7, #31]
    8fa2:	2b00      	cmp	r3, #0
    8fa4:	d107      	bne.n	8fb6 <_usb_d_dev_out_next+0x246>
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    8fa6:	687b      	ldr	r3, [r7, #4]
    8fa8:	68db      	ldr	r3, [r3, #12]
    8faa:	461a      	mov	r2, r3
    8fac:	7ffb      	ldrb	r3, [r7, #31]
    8fae:	2100      	movs	r1, #0
    8fb0:	4618      	mov	r0, r3
    8fb2:	4b0f      	ldr	r3, [pc, #60]	; (8ff0 <_usb_d_dev_out_next+0x280>)
    8fb4:	4798      	blx	r3
	}
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    8fb6:	2100      	movs	r1, #0
    8fb8:	6878      	ldr	r0, [r7, #4]
    8fba:	4b10      	ldr	r3, [pc, #64]	; (8ffc <_usb_d_dev_out_next+0x28c>)
    8fbc:	4798      	blx	r3
	return;
    8fbe:	e031      	b.n	9024 <_usb_d_dev_out_next+0x2b4>

_out_rx_exec:
	if (!isr) {
    8fc0:	78fb      	ldrb	r3, [r7, #3]
    8fc2:	f083 0301 	eor.w	r3, r3, #1
    8fc6:	b2db      	uxtb	r3, r3
    8fc8:	2b00      	cmp	r3, #0
    8fca:	d025      	beq.n	9018 <_usb_d_dev_out_next+0x2a8>
		if (is_ctrl) {
    8fcc:	7bfb      	ldrb	r3, [r7, #15]
    8fce:	2b00      	cmp	r3, #0
    8fd0:	d018      	beq.n	9004 <_usb_d_dev_out_next+0x294>
			 *                   OUT transactions.
			 * SETUP: terminate OUT without any notification.
			 *        Trigger SETUP notification.
			 * IN NAK: finish OUT normally. Notify data done.
			 */
			_usbd_ep_clear_bank_status(epn, 1);
    8fd2:	7ffb      	ldrb	r3, [r7, #31]
    8fd4:	2101      	movs	r1, #1
    8fd6:	4618      	mov	r0, r3
    8fd8:	4b09      	ldr	r3, [pc, #36]	; (9000 <_usb_d_dev_out_next+0x290>)
    8fda:	4798      	blx	r3
			/* Detect OUT, SETUP, NAK IN */
			inten = USB_D_BANK0_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL1;
    8fdc:	232d      	movs	r3, #45	; 0x2d
    8fde:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    8fe2:	e012      	b.n	900a <_usb_d_dev_out_next+0x29a>
    8fe4:	20000aa8 	.word	0x20000aa8
    8fe8:	00008551 	.word	0x00008551
    8fec:	0000c7a5 	.word	0x0000c7a5
    8ff0:	0000857d 	.word	0x0000857d
    8ff4:	00008705 	.word	0x00008705
    8ff8:	00007e5d 	.word	0x00007e5d
    8ffc:	00009e81 	.word	0x00009e81
    9000:	00008745 	.word	0x00008745
		} else {
			/* Initialize normal OUT transaction. */
			inten = USB_D_BANK0_INT_FLAGS;
    9004:	2325      	movs	r3, #37	; 0x25
    9006:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
		}
		hri_usbendpoint_set_EPINTEN_reg(hw, epn, inten);
    900a:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
    900e:	7ffb      	ldrb	r3, [r7, #31]
    9010:	4619      	mov	r1, r3
    9012:	6a38      	ldr	r0, [r7, #32]
    9014:	4b05      	ldr	r3, [pc, #20]	; (902c <_usb_d_dev_out_next+0x2bc>)
    9016:	4798      	blx	r3
	}
	_usbd_ep_set_out_rdy(epn, 0, true);
    9018:	7ffb      	ldrb	r3, [r7, #31]
    901a:	2201      	movs	r2, #1
    901c:	2100      	movs	r1, #0
    901e:	4618      	mov	r0, r3
    9020:	4b03      	ldr	r3, [pc, #12]	; (9030 <_usb_d_dev_out_next+0x2c0>)
    9022:	4798      	blx	r3
}
    9024:	372c      	adds	r7, #44	; 0x2c
    9026:	46bd      	mov	sp, r7
    9028:	bd90      	pop	{r4, r7, pc}
    902a:	bf00      	nop
    902c:	00007e31 	.word	0x00007e31
    9030:	000087d5 	.word	0x000087d5

00009034 <_usb_d_dev_handle_setup>:
/**
 * \brief Handles setup received interrupt
 * \param[in] ept Pointer to endpoint information.
 */
static void _usb_d_dev_handle_setup(struct _usb_d_dev_ep *ept)
{
    9034:	b580      	push	{r7, lr}
    9036:	b084      	sub	sp, #16
    9038:	af00      	add	r7, sp, #0
    903a:	6078      	str	r0, [r7, #4]
	uint8_t epn     = USB_EP_GET_N(ept->ep);
    903c:	687b      	ldr	r3, [r7, #4]
    903e:	7c9b      	ldrb	r3, [r3, #18]
    9040:	f003 030f 	and.w	r3, r3, #15
    9044:	73fb      	strb	r3, [r7, #15]
	bool    is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    9046:	687b      	ldr	r3, [r7, #4]
    9048:	7cdb      	ldrb	r3, [r3, #19]
    904a:	f003 0307 	and.w	r3, r3, #7
    904e:	b2db      	uxtb	r3, r3
    9050:	2b01      	cmp	r3, #1
    9052:	bf0c      	ite	eq
    9054:	2301      	moveq	r3, #1
    9056:	2300      	movne	r3, #0
    9058:	73bb      	strb	r3, [r7, #14]

	if (!is_ctrl) {
    905a:	7bbb      	ldrb	r3, [r7, #14]
    905c:	f083 0301 	eor.w	r3, r3, #1
    9060:	b2db      	uxtb	r3, r3
    9062:	2b00      	cmp	r3, #0
    9064:	d008      	beq.n	9078 <_usb_d_dev_handle_setup+0x44>
		/* Should never be here! */
		_usbd_ep_ack_setup(epn);
    9066:	7bfb      	ldrb	r3, [r7, #15]
    9068:	4618      	mov	r0, r3
    906a:	4b20      	ldr	r3, [pc, #128]	; (90ec <_usb_d_dev_handle_setup+0xb8>)
    906c:	4798      	blx	r3
		_usbd_ep_stop_setup(epn);
    906e:	7bfb      	ldrb	r3, [r7, #15]
    9070:	4618      	mov	r0, r3
    9072:	4b1f      	ldr	r3, [pc, #124]	; (90f0 <_usb_d_dev_handle_setup+0xbc>)
    9074:	4798      	blx	r3
		return;
    9076:	e036      	b.n	90e6 <_usb_d_dev_handle_setup+0xb2>
	}
	/* Control transfer:
	 * SETUP transaction will terminate IN/OUT transaction,
	 * and start new transaction with received SETUP packet.
	 */
	if (_usb_d_dev_ep_is_busy(ept)) {
    9078:	687b      	ldr	r3, [r7, #4]
    907a:	7cdb      	ldrb	r3, [r3, #19]
    907c:	f003 0340 	and.w	r3, r3, #64	; 0x40
    9080:	b2db      	uxtb	r3, r3
    9082:	2b00      	cmp	r3, #0
    9084:	d010      	beq.n	90a8 <_usb_d_dev_handle_setup+0x74>
		ept->flags.bits.is_busy = 0;
    9086:	687a      	ldr	r2, [r7, #4]
    9088:	7cd3      	ldrb	r3, [r2, #19]
    908a:	f36f 1386 	bfc	r3, #6, #1
    908e:	74d3      	strb	r3, [r2, #19]

		/* Stop transfer on either direction. */
		_usbd_ep_set_in_rdy(epn, 1, false);
    9090:	7bfb      	ldrb	r3, [r7, #15]
    9092:	2200      	movs	r2, #0
    9094:	2101      	movs	r1, #1
    9096:	4618      	mov	r0, r3
    9098:	4b16      	ldr	r3, [pc, #88]	; (90f4 <_usb_d_dev_handle_setup+0xc0>)
    909a:	4798      	blx	r3
		_usbd_ep_set_out_rdy(epn, 0, false);
    909c:	7bfb      	ldrb	r3, [r7, #15]
    909e:	2200      	movs	r2, #0
    90a0:	2100      	movs	r1, #0
    90a2:	4618      	mov	r0, r3
    90a4:	4b14      	ldr	r3, [pc, #80]	; (90f8 <_usb_d_dev_handle_setup+0xc4>)
    90a6:	4798      	blx	r3
	}
	ept->flags.bits.is_stalled = 0;
    90a8:	687a      	ldr	r2, [r7, #4]
    90aa:	7cd3      	ldrb	r3, [r2, #19]
    90ac:	f36f 03c3 	bfc	r3, #3, #1
    90b0:	74d3      	strb	r3, [r2, #19]

	/* Clear status and notify SETUP */
	_usbd_ep_clear_bank_status(epn, 0);
    90b2:	7bfb      	ldrb	r3, [r7, #15]
    90b4:	2100      	movs	r1, #0
    90b6:	4618      	mov	r0, r3
    90b8:	4b10      	ldr	r3, [pc, #64]	; (90fc <_usb_d_dev_handle_setup+0xc8>)
    90ba:	4798      	blx	r3
	_usbd_ep_clear_bank_status(epn, 1);
    90bc:	7bfb      	ldrb	r3, [r7, #15]
    90be:	2101      	movs	r1, #1
    90c0:	4618      	mov	r0, r3
    90c2:	4b0e      	ldr	r3, [pc, #56]	; (90fc <_usb_d_dev_handle_setup+0xc8>)
    90c4:	4798      	blx	r3
	_usbd_ep_int_ack(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
    90c6:	7bfb      	ldrb	r3, [r7, #15]
    90c8:	216f      	movs	r1, #111	; 0x6f
    90ca:	4618      	mov	r0, r3
    90cc:	4b0c      	ldr	r3, [pc, #48]	; (9100 <_usb_d_dev_handle_setup+0xcc>)
    90ce:	4798      	blx	r3
	_usbd_ep_int_dis(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
    90d0:	7bfb      	ldrb	r3, [r7, #15]
    90d2:	216f      	movs	r1, #111	; 0x6f
    90d4:	4618      	mov	r0, r3
    90d6:	4b0b      	ldr	r3, [pc, #44]	; (9104 <_usb_d_dev_handle_setup+0xd0>)
    90d8:	4798      	blx	r3
	/* Invoke callback. */
	dev_inst.ep_callbacks.setup(ept->ep);
    90da:	4b0b      	ldr	r3, [pc, #44]	; (9108 <_usb_d_dev_handle_setup+0xd4>)
    90dc:	689b      	ldr	r3, [r3, #8]
    90de:	687a      	ldr	r2, [r7, #4]
    90e0:	7c92      	ldrb	r2, [r2, #18]
    90e2:	4610      	mov	r0, r2
    90e4:	4798      	blx	r3
}
    90e6:	3710      	adds	r7, #16
    90e8:	46bd      	mov	sp, r7
    90ea:	bd80      	pop	{r7, pc}
    90ec:	000084d9 	.word	0x000084d9
    90f0:	00008485 	.word	0x00008485
    90f4:	0000877d 	.word	0x0000877d
    90f8:	000087d5 	.word	0x000087d5
    90fc:	00008745 	.word	0x00008745
    9100:	00008285 	.word	0x00008285
    9104:	000082d5 	.word	0x000082d5
    9108:	200009e0 	.word	0x200009e0

0000910c <_usb_d_dev_handle_stall>:
 * \brief Handles stall sent interrupt
 * \param[in] ept Pointer to endpoint information.
 * \param[in] bank_n Bank number.
 */
static void _usb_d_dev_handle_stall(struct _usb_d_dev_ep *ept, const uint8_t bank_n)
{
    910c:	b580      	push	{r7, lr}
    910e:	b084      	sub	sp, #16
    9110:	af00      	add	r7, sp, #0
    9112:	6078      	str	r0, [r7, #4]
    9114:	460b      	mov	r3, r1
    9116:	70fb      	strb	r3, [r7, #3]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    9118:	687b      	ldr	r3, [r7, #4]
    911a:	7c9b      	ldrb	r3, [r3, #18]
    911c:	f003 030f 	and.w	r3, r3, #15
    9120:	73fb      	strb	r3, [r7, #15]
	/* Clear interrupt enable. Leave status there for status check. */
	_usbd_ep_int_stall_en(epn, bank_n, false);
    9122:	78f9      	ldrb	r1, [r7, #3]
    9124:	7bfb      	ldrb	r3, [r7, #15]
    9126:	2200      	movs	r2, #0
    9128:	4618      	mov	r0, r3
    912a:	4b07      	ldr	r3, [pc, #28]	; (9148 <_usb_d_dev_handle_stall+0x3c>)
    912c:	4798      	blx	r3
	dev_inst.ep_callbacks.done(ept->ep, USB_TRANS_STALL, ept->trans_count);
    912e:	4b07      	ldr	r3, [pc, #28]	; (914c <_usb_d_dev_handle_stall+0x40>)
    9130:	691b      	ldr	r3, [r3, #16]
    9132:	687a      	ldr	r2, [r7, #4]
    9134:	7c90      	ldrb	r0, [r2, #18]
    9136:	687a      	ldr	r2, [r7, #4]
    9138:	6892      	ldr	r2, [r2, #8]
    913a:	2101      	movs	r1, #1
    913c:	4798      	blx	r3
}
    913e:	bf00      	nop
    9140:	3710      	adds	r7, #16
    9142:	46bd      	mov	sp, r7
    9144:	bd80      	pop	{r7, pc}
    9146:	bf00      	nop
    9148:	00008439 	.word	0x00008439
    914c:	200009e0 	.word	0x200009e0

00009150 <_usb_d_dev_handle_trfail>:
 * \brief Handles transaction fail interrupt
 * \param[in] ept Pointer to endpoint information.
 * \param[in] bank_n Bank number.
 */
static void _usb_d_dev_handle_trfail(struct _usb_d_dev_ep *ept, const uint8_t bank_n)
{
    9150:	b580      	push	{r7, lr}
    9152:	b088      	sub	sp, #32
    9154:	af00      	add	r7, sp, #0
    9156:	6078      	str	r0, [r7, #4]
    9158:	460b      	mov	r3, r1
    915a:	70fb      	strb	r3, [r7, #3]
	Usb *              hw      = USB;
    915c:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    9160:	61fb      	str	r3, [r7, #28]
	uint8_t            epn     = USB_EP_GET_N(ept->ep);
    9162:	687b      	ldr	r3, [r7, #4]
    9164:	7c9b      	ldrb	r3, [r3, #18]
    9166:	f003 030f 	and.w	r3, r3, #15
    916a:	76fb      	strb	r3, [r7, #27]
	const uint8_t      fail[2] = {USB_DEVICE_EPINTFLAG_TRFAIL0, USB_DEVICE_EPINTFLAG_TRFAIL1};
    916c:	4b61      	ldr	r3, [pc, #388]	; (92f4 <_usb_d_dev_handle_trfail+0x1a4>)
    916e:	881b      	ldrh	r3, [r3, #0]
    9170:	823b      	strh	r3, [r7, #16]
	UsbDeviceDescBank *bank    = prvt_inst.desc_table[epn].DeviceDescBank;
    9172:	7efb      	ldrb	r3, [r7, #27]
    9174:	015b      	lsls	r3, r3, #5
    9176:	4a60      	ldr	r2, [pc, #384]	; (92f8 <_usb_d_dev_handle_trfail+0x1a8>)
    9178:	4413      	add	r3, r2
    917a:	617b      	str	r3, [r7, #20]
	uint8_t            eptype
    917c:	78fb      	ldrb	r3, [r7, #3]
    917e:	2b00      	cmp	r3, #0
    9180:	d006      	beq.n	9190 <_usb_d_dev_handle_trfail+0x40>
    9182:	7efb      	ldrb	r3, [r7, #27]
    9184:	4619      	mov	r1, r3
    9186:	69f8      	ldr	r0, [r7, #28]
    9188:	4b5c      	ldr	r3, [pc, #368]	; (92fc <_usb_d_dev_handle_trfail+0x1ac>)
    918a:	4798      	blx	r3
    918c:	4603      	mov	r3, r0
    918e:	e005      	b.n	919c <_usb_d_dev_handle_trfail+0x4c>
    9190:	7efb      	ldrb	r3, [r7, #27]
    9192:	4619      	mov	r1, r3
    9194:	69f8      	ldr	r0, [r7, #28]
    9196:	4b5a      	ldr	r3, [pc, #360]	; (9300 <_usb_d_dev_handle_trfail+0x1b0>)
    9198:	4798      	blx	r3
    919a:	4603      	mov	r3, r0
    919c:	74fb      	strb	r3, [r7, #19]
	    = bank_n ? hri_usbendpoint_read_EPCFG_EPTYPE1_bf(hw, epn) : hri_usbendpoint_read_EPCFG_EPTYPE0_bf(hw, epn);
	bool                      is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    919e:	687b      	ldr	r3, [r7, #4]
    91a0:	7cdb      	ldrb	r3, [r3, #19]
    91a2:	f003 0307 	and.w	r3, r3, #7
    91a6:	b2db      	uxtb	r3, r3
    91a8:	2b01      	cmp	r3, #1
    91aa:	bf0c      	ite	eq
    91ac:	2301      	moveq	r3, #1
    91ae:	2300      	movne	r3, #0
    91b0:	74bb      	strb	r3, [r7, #18]
	USB_DEVICE_STATUS_BK_Type st;
	st.reg = bank[bank_n].STATUS_BK.reg;
    91b2:	78fb      	ldrb	r3, [r7, #3]
    91b4:	011b      	lsls	r3, r3, #4
    91b6:	697a      	ldr	r2, [r7, #20]
    91b8:	4413      	add	r3, r2
    91ba:	7a9b      	ldrb	r3, [r3, #10]
    91bc:	b2db      	uxtb	r3, r3
    91be:	733b      	strb	r3, [r7, #12]

	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
    91c0:	7cfb      	ldrb	r3, [r7, #19]
    91c2:	2b02      	cmp	r3, #2
    91c4:	d12f      	bne.n	9226 <_usb_d_dev_handle_trfail+0xd6>
    91c6:	7b3b      	ldrb	r3, [r7, #12]
    91c8:	f003 0301 	and.w	r3, r3, #1
    91cc:	b2db      	uxtb	r3, r3
    91ce:	2b00      	cmp	r3, #0
    91d0:	d029      	beq.n	9226 <_usb_d_dev_handle_trfail+0xd6>
		bank[bank_n].STATUS_BK.bit.CRCERR = 0;
    91d2:	78fb      	ldrb	r3, [r7, #3]
    91d4:	011b      	lsls	r3, r3, #4
    91d6:	697a      	ldr	r2, [r7, #20]
    91d8:	441a      	add	r2, r3
    91da:	7a93      	ldrb	r3, [r2, #10]
    91dc:	f36f 0300 	bfc	r3, #0, #1
    91e0:	7293      	strb	r3, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    91e2:	78fb      	ldrb	r3, [r7, #3]
    91e4:	f107 0220 	add.w	r2, r7, #32
    91e8:	4413      	add	r3, r2
    91ea:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    91ee:	7efb      	ldrb	r3, [r7, #27]
    91f0:	4619      	mov	r1, r3
    91f2:	69f8      	ldr	r0, [r7, #28]
    91f4:	4b43      	ldr	r3, [pc, #268]	; (9304 <_usb_d_dev_handle_trfail+0x1b4>)
    91f6:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
    91f8:	78fb      	ldrb	r3, [r7, #3]
    91fa:	f107 0220 	add.w	r2, r7, #32
    91fe:	4413      	add	r3, r2
    9200:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    9204:	7efb      	ldrb	r3, [r7, #27]
    9206:	4619      	mov	r1, r3
    9208:	69f8      	ldr	r0, [r7, #28]
    920a:	4b3f      	ldr	r3, [pc, #252]	; (9308 <_usb_d_dev_handle_trfail+0x1b8>)
    920c:	4798      	blx	r3
		_usb_d_dev_trans_stop(ept, bank_n, USB_TRANS_ERROR);
    920e:	78fb      	ldrb	r3, [r7, #3]
    9210:	2b00      	cmp	r3, #0
    9212:	bf14      	ite	ne
    9214:	2301      	movne	r3, #1
    9216:	2300      	moveq	r3, #0
    9218:	b2db      	uxtb	r3, r3
    921a:	2204      	movs	r2, #4
    921c:	4619      	mov	r1, r3
    921e:	6878      	ldr	r0, [r7, #4]
    9220:	4b3a      	ldr	r3, [pc, #232]	; (930c <_usb_d_dev_handle_trfail+0x1bc>)
    9222:	4798      	blx	r3
	} else {
		_usbd_ep_clear_bank_status(epn, bank_n);
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
	}
}
    9224:	e062      	b.n	92ec <_usb_d_dev_handle_trfail+0x19c>
	} else if (st.bit.ERRORFLOW) {
    9226:	7b3b      	ldrb	r3, [r7, #12]
    9228:	f003 0302 	and.w	r3, r3, #2
    922c:	b2db      	uxtb	r3, r3
    922e:	2b00      	cmp	r3, #0
    9230:	d040      	beq.n	92b4 <_usb_d_dev_handle_trfail+0x164>
		bank[bank_n].STATUS_BK.bit.ERRORFLOW = 0;
    9232:	78fb      	ldrb	r3, [r7, #3]
    9234:	011b      	lsls	r3, r3, #4
    9236:	697a      	ldr	r2, [r7, #20]
    9238:	441a      	add	r2, r3
    923a:	7a93      	ldrb	r3, [r2, #10]
    923c:	f36f 0341 	bfc	r3, #1, #1
    9240:	7293      	strb	r3, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    9242:	78fb      	ldrb	r3, [r7, #3]
    9244:	f107 0220 	add.w	r2, r7, #32
    9248:	4413      	add	r3, r2
    924a:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    924e:	7efb      	ldrb	r3, [r7, #27]
    9250:	4619      	mov	r1, r3
    9252:	69f8      	ldr	r0, [r7, #28]
    9254:	4b2b      	ldr	r3, [pc, #172]	; (9304 <_usb_d_dev_handle_trfail+0x1b4>)
    9256:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
    9258:	78fb      	ldrb	r3, [r7, #3]
    925a:	f107 0220 	add.w	r2, r7, #32
    925e:	4413      	add	r3, r2
    9260:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    9264:	7efb      	ldrb	r3, [r7, #27]
    9266:	4619      	mov	r1, r3
    9268:	69f8      	ldr	r0, [r7, #28]
    926a:	4b27      	ldr	r3, [pc, #156]	; (9308 <_usb_d_dev_handle_trfail+0x1b8>)
    926c:	4798      	blx	r3
		if (is_ctrl && _usb_d_dev_ep_is_busy(ept)) {
    926e:	7cbb      	ldrb	r3, [r7, #18]
    9270:	2b00      	cmp	r3, #0
    9272:	d03b      	beq.n	92ec <_usb_d_dev_handle_trfail+0x19c>
    9274:	687b      	ldr	r3, [r7, #4]
    9276:	7cdb      	ldrb	r3, [r3, #19]
    9278:	f003 0340 	and.w	r3, r3, #64	; 0x40
    927c:	b2db      	uxtb	r3, r3
    927e:	2b00      	cmp	r3, #0
    9280:	d034      	beq.n	92ec <_usb_d_dev_handle_trfail+0x19c>
			if (bank_n != _usb_d_dev_ep_is_in(ept)) {
    9282:	687b      	ldr	r3, [r7, #4]
    9284:	7cdb      	ldrb	r3, [r3, #19]
    9286:	f3c3 13c0 	ubfx	r3, r3, #7, #1
    928a:	b2db      	uxtb	r3, r3
    928c:	461a      	mov	r2, r3
    928e:	78fb      	ldrb	r3, [r7, #3]
    9290:	4293      	cmp	r3, r2
    9292:	d02b      	beq.n	92ec <_usb_d_dev_handle_trfail+0x19c>
				_usb_d_dev_trans_stop(ept, _usb_d_dev_ep_is_in(ept), USB_TRANS_DONE);
    9294:	687b      	ldr	r3, [r7, #4]
    9296:	7cdb      	ldrb	r3, [r3, #19]
    9298:	f3c3 13c0 	ubfx	r3, r3, #7, #1
    929c:	b2db      	uxtb	r3, r3
    929e:	2b00      	cmp	r3, #0
    92a0:	bf14      	ite	ne
    92a2:	2301      	movne	r3, #1
    92a4:	2300      	moveq	r3, #0
    92a6:	b2db      	uxtb	r3, r3
    92a8:	2200      	movs	r2, #0
    92aa:	4619      	mov	r1, r3
    92ac:	6878      	ldr	r0, [r7, #4]
    92ae:	4b17      	ldr	r3, [pc, #92]	; (930c <_usb_d_dev_handle_trfail+0x1bc>)
    92b0:	4798      	blx	r3
}
    92b2:	e01b      	b.n	92ec <_usb_d_dev_handle_trfail+0x19c>
		_usbd_ep_clear_bank_status(epn, bank_n);
    92b4:	78fa      	ldrb	r2, [r7, #3]
    92b6:	7efb      	ldrb	r3, [r7, #27]
    92b8:	4611      	mov	r1, r2
    92ba:	4618      	mov	r0, r3
    92bc:	4b14      	ldr	r3, [pc, #80]	; (9310 <_usb_d_dev_handle_trfail+0x1c0>)
    92be:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    92c0:	78fb      	ldrb	r3, [r7, #3]
    92c2:	f107 0220 	add.w	r2, r7, #32
    92c6:	4413      	add	r3, r2
    92c8:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    92cc:	7efb      	ldrb	r3, [r7, #27]
    92ce:	4619      	mov	r1, r3
    92d0:	69f8      	ldr	r0, [r7, #28]
    92d2:	4b0c      	ldr	r3, [pc, #48]	; (9304 <_usb_d_dev_handle_trfail+0x1b4>)
    92d4:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
    92d6:	78fb      	ldrb	r3, [r7, #3]
    92d8:	f107 0220 	add.w	r2, r7, #32
    92dc:	4413      	add	r3, r2
    92de:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    92e2:	7efb      	ldrb	r3, [r7, #27]
    92e4:	4619      	mov	r1, r3
    92e6:	69f8      	ldr	r0, [r7, #28]
    92e8:	4b07      	ldr	r3, [pc, #28]	; (9308 <_usb_d_dev_handle_trfail+0x1b8>)
    92ea:	4798      	blx	r3
}
    92ec:	bf00      	nop
    92ee:	3720      	adds	r7, #32
    92f0:	46bd      	mov	sp, r7
    92f2:	bd80      	pop	{r7, pc}
    92f4:	0000cf0c 	.word	0x0000cf0c
    92f8:	20000aa8 	.word	0x20000aa8
    92fc:	00007eb9 	.word	0x00007eb9
    9300:	00007e89 	.word	0x00007e89
    9304:	00007d5d 	.word	0x00007d5d
    9308:	00007e5d 	.word	0x00007e5d
    930c:	00009ec9 	.word	0x00009ec9
    9310:	00008745 	.word	0x00008745

00009314 <_usb_d_dev_trans_setup_isr>:
 * \brief Analyze flags for setup transaction
 * \param[in] ept Pointer to endpoint information.
 * \param[in] flags Endpoint interrupt flags.
 */
static inline void _usb_d_dev_trans_setup_isr(struct _usb_d_dev_ep *ept, const uint8_t flags)
{
    9314:	b580      	push	{r7, lr}
    9316:	b082      	sub	sp, #8
    9318:	af00      	add	r7, sp, #0
    931a:	6078      	str	r0, [r7, #4]
    931c:	460b      	mov	r3, r1
    931e:	70fb      	strb	r3, [r7, #3]
	/*
	 * SETPU is automatically ACKed by hardware
	 * OUT & IN should be set to NAK when checking SETUP
	 * No need to check OUT & IN status.
	 */
	if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    9320:	78fb      	ldrb	r3, [r7, #3]
    9322:	f003 0310 	and.w	r3, r3, #16
    9326:	2b00      	cmp	r3, #0
    9328:	d003      	beq.n	9332 <_usb_d_dev_trans_setup_isr+0x1e>
		_usb_d_dev_handle_setup(ept);
    932a:	6878      	ldr	r0, [r7, #4]
    932c:	4b0c      	ldr	r3, [pc, #48]	; (9360 <_usb_d_dev_trans_setup_isr+0x4c>)
    932e:	4798      	blx	r3
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
		_usb_d_dev_handle_stall(ept, 1);
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
		_usb_d_dev_handle_stall(ept, 0);
	}
}
    9330:	e012      	b.n	9358 <_usb_d_dev_trans_setup_isr+0x44>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    9332:	78fb      	ldrb	r3, [r7, #3]
    9334:	f003 0340 	and.w	r3, r3, #64	; 0x40
    9338:	2b00      	cmp	r3, #0
    933a:	d004      	beq.n	9346 <_usb_d_dev_trans_setup_isr+0x32>
		_usb_d_dev_handle_stall(ept, 1);
    933c:	2101      	movs	r1, #1
    933e:	6878      	ldr	r0, [r7, #4]
    9340:	4b08      	ldr	r3, [pc, #32]	; (9364 <_usb_d_dev_trans_setup_isr+0x50>)
    9342:	4798      	blx	r3
}
    9344:	e008      	b.n	9358 <_usb_d_dev_trans_setup_isr+0x44>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    9346:	78fb      	ldrb	r3, [r7, #3]
    9348:	f003 0320 	and.w	r3, r3, #32
    934c:	2b00      	cmp	r3, #0
    934e:	d003      	beq.n	9358 <_usb_d_dev_trans_setup_isr+0x44>
		_usb_d_dev_handle_stall(ept, 0);
    9350:	2100      	movs	r1, #0
    9352:	6878      	ldr	r0, [r7, #4]
    9354:	4b03      	ldr	r3, [pc, #12]	; (9364 <_usb_d_dev_trans_setup_isr+0x50>)
    9356:	4798      	blx	r3
}
    9358:	bf00      	nop
    935a:	3708      	adds	r7, #8
    935c:	46bd      	mov	sp, r7
    935e:	bd80      	pop	{r7, pc}
    9360:	00009035 	.word	0x00009035
    9364:	0000910d 	.word	0x0000910d

00009368 <_usb_d_dev_trans_in_isr>:
 * \brief Analyze flags for IN transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] flags Endpoint interrupt flags.
 */
static inline void _usb_d_dev_trans_in_isr(struct _usb_d_dev_ep *ept, const uint8_t flags)
{
    9368:	b580      	push	{r7, lr}
    936a:	b082      	sub	sp, #8
    936c:	af00      	add	r7, sp, #0
    936e:	6078      	str	r0, [r7, #4]
    9370:	460b      	mov	r3, r1
    9372:	70fb      	strb	r3, [r7, #3]
	/*
	 * Check IN flags
	 * If control endpoint, SETUP & OUT is checked to see if abort
	 */
	if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    9374:	78fb      	ldrb	r3, [r7, #3]
    9376:	f003 0340 	and.w	r3, r3, #64	; 0x40
    937a:	2b00      	cmp	r3, #0
    937c:	d004      	beq.n	9388 <_usb_d_dev_trans_in_isr+0x20>
		_usb_d_dev_handle_stall(ept, 1);
    937e:	2101      	movs	r1, #1
    9380:	6878      	ldr	r0, [r7, #4]
    9382:	4b1a      	ldr	r3, [pc, #104]	; (93ec <_usb_d_dev_trans_in_isr+0x84>)
    9384:	4798      	blx	r3
			_usb_d_dev_handle_trfail(ept, 0);
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
			_usb_d_dev_handle_setup(ept);
		}
	}
}
    9386:	e02c      	b.n	93e2 <_usb_d_dev_trans_in_isr+0x7a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    9388:	78fb      	ldrb	r3, [r7, #3]
    938a:	f003 0308 	and.w	r3, r3, #8
    938e:	2b00      	cmp	r3, #0
    9390:	d004      	beq.n	939c <_usb_d_dev_trans_in_isr+0x34>
		_usb_d_dev_handle_trfail(ept, 1);
    9392:	2101      	movs	r1, #1
    9394:	6878      	ldr	r0, [r7, #4]
    9396:	4b16      	ldr	r3, [pc, #88]	; (93f0 <_usb_d_dev_trans_in_isr+0x88>)
    9398:	4798      	blx	r3
}
    939a:	e022      	b.n	93e2 <_usb_d_dev_trans_in_isr+0x7a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT1) {
    939c:	78fb      	ldrb	r3, [r7, #3]
    939e:	f003 0302 	and.w	r3, r3, #2
    93a2:	2b00      	cmp	r3, #0
    93a4:	d004      	beq.n	93b0 <_usb_d_dev_trans_in_isr+0x48>
		_usb_d_dev_in_next(ept, true);
    93a6:	2101      	movs	r1, #1
    93a8:	6878      	ldr	r0, [r7, #4]
    93aa:	4b12      	ldr	r3, [pc, #72]	; (93f4 <_usb_d_dev_trans_in_isr+0x8c>)
    93ac:	4798      	blx	r3
}
    93ae:	e018      	b.n	93e2 <_usb_d_dev_trans_in_isr+0x7a>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    93b0:	687b      	ldr	r3, [r7, #4]
    93b2:	7cdb      	ldrb	r3, [r3, #19]
    93b4:	f003 0307 	and.w	r3, r3, #7
    93b8:	b2db      	uxtb	r3, r3
    93ba:	2b01      	cmp	r3, #1
    93bc:	d111      	bne.n	93e2 <_usb_d_dev_trans_in_isr+0x7a>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    93be:	78fb      	ldrb	r3, [r7, #3]
    93c0:	f003 0304 	and.w	r3, r3, #4
    93c4:	2b00      	cmp	r3, #0
    93c6:	d004      	beq.n	93d2 <_usb_d_dev_trans_in_isr+0x6a>
			_usb_d_dev_handle_trfail(ept, 0);
    93c8:	2100      	movs	r1, #0
    93ca:	6878      	ldr	r0, [r7, #4]
    93cc:	4b08      	ldr	r3, [pc, #32]	; (93f0 <_usb_d_dev_trans_in_isr+0x88>)
    93ce:	4798      	blx	r3
}
    93d0:	e007      	b.n	93e2 <_usb_d_dev_trans_in_isr+0x7a>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    93d2:	78fb      	ldrb	r3, [r7, #3]
    93d4:	f003 0310 	and.w	r3, r3, #16
    93d8:	2b00      	cmp	r3, #0
    93da:	d002      	beq.n	93e2 <_usb_d_dev_trans_in_isr+0x7a>
			_usb_d_dev_handle_setup(ept);
    93dc:	6878      	ldr	r0, [r7, #4]
    93de:	4b06      	ldr	r3, [pc, #24]	; (93f8 <_usb_d_dev_trans_in_isr+0x90>)
    93e0:	4798      	blx	r3
}
    93e2:	bf00      	nop
    93e4:	3708      	adds	r7, #8
    93e6:	46bd      	mov	sp, r7
    93e8:	bd80      	pop	{r7, pc}
    93ea:	bf00      	nop
    93ec:	0000910d 	.word	0x0000910d
    93f0:	00009151 	.word	0x00009151
    93f4:	00008b59 	.word	0x00008b59
    93f8:	00009035 	.word	0x00009035

000093fc <_usb_d_dev_trans_out_isr>:
 * \brief Analyze flags for OUT transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] flags Endpoint interrupt flags.
 */
static inline void _usb_d_dev_trans_out_isr(struct _usb_d_dev_ep *ept, const uint8_t flags)
{
    93fc:	b580      	push	{r7, lr}
    93fe:	b082      	sub	sp, #8
    9400:	af00      	add	r7, sp, #0
    9402:	6078      	str	r0, [r7, #4]
    9404:	460b      	mov	r3, r1
    9406:	70fb      	strb	r3, [r7, #3]
	/*
	 * Check OUT flags.
	 * If control endpoint, SETUP & IN NAK is checked to see if abort
	 */
	if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    9408:	78fb      	ldrb	r3, [r7, #3]
    940a:	f003 0320 	and.w	r3, r3, #32
    940e:	2b00      	cmp	r3, #0
    9410:	d004      	beq.n	941c <_usb_d_dev_trans_out_isr+0x20>
		_usb_d_dev_handle_stall(ept, 0);
    9412:	2100      	movs	r1, #0
    9414:	6878      	ldr	r0, [r7, #4]
    9416:	4b1a      	ldr	r3, [pc, #104]	; (9480 <_usb_d_dev_trans_out_isr+0x84>)
    9418:	4798      	blx	r3
			_usb_d_dev_handle_trfail(ept, 1);
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
			_usb_d_dev_handle_setup(ept);
		}
	}
}
    941a:	e02c      	b.n	9476 <_usb_d_dev_trans_out_isr+0x7a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    941c:	78fb      	ldrb	r3, [r7, #3]
    941e:	f003 0304 	and.w	r3, r3, #4
    9422:	2b00      	cmp	r3, #0
    9424:	d004      	beq.n	9430 <_usb_d_dev_trans_out_isr+0x34>
		_usb_d_dev_handle_trfail(ept, 0);
    9426:	2100      	movs	r1, #0
    9428:	6878      	ldr	r0, [r7, #4]
    942a:	4b16      	ldr	r3, [pc, #88]	; (9484 <_usb_d_dev_trans_out_isr+0x88>)
    942c:	4798      	blx	r3
}
    942e:	e022      	b.n	9476 <_usb_d_dev_trans_out_isr+0x7a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT0) {
    9430:	78fb      	ldrb	r3, [r7, #3]
    9432:	f003 0301 	and.w	r3, r3, #1
    9436:	2b00      	cmp	r3, #0
    9438:	d004      	beq.n	9444 <_usb_d_dev_trans_out_isr+0x48>
		_usb_d_dev_out_next(ept, true);
    943a:	2101      	movs	r1, #1
    943c:	6878      	ldr	r0, [r7, #4]
    943e:	4b12      	ldr	r3, [pc, #72]	; (9488 <_usb_d_dev_trans_out_isr+0x8c>)
    9440:	4798      	blx	r3
}
    9442:	e018      	b.n	9476 <_usb_d_dev_trans_out_isr+0x7a>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    9444:	687b      	ldr	r3, [r7, #4]
    9446:	7cdb      	ldrb	r3, [r3, #19]
    9448:	f003 0307 	and.w	r3, r3, #7
    944c:	b2db      	uxtb	r3, r3
    944e:	2b01      	cmp	r3, #1
    9450:	d111      	bne.n	9476 <_usb_d_dev_trans_out_isr+0x7a>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    9452:	78fb      	ldrb	r3, [r7, #3]
    9454:	f003 0308 	and.w	r3, r3, #8
    9458:	2b00      	cmp	r3, #0
    945a:	d004      	beq.n	9466 <_usb_d_dev_trans_out_isr+0x6a>
			_usb_d_dev_handle_trfail(ept, 1);
    945c:	2101      	movs	r1, #1
    945e:	6878      	ldr	r0, [r7, #4]
    9460:	4b08      	ldr	r3, [pc, #32]	; (9484 <_usb_d_dev_trans_out_isr+0x88>)
    9462:	4798      	blx	r3
}
    9464:	e007      	b.n	9476 <_usb_d_dev_trans_out_isr+0x7a>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    9466:	78fb      	ldrb	r3, [r7, #3]
    9468:	f003 0310 	and.w	r3, r3, #16
    946c:	2b00      	cmp	r3, #0
    946e:	d002      	beq.n	9476 <_usb_d_dev_trans_out_isr+0x7a>
			_usb_d_dev_handle_setup(ept);
    9470:	6878      	ldr	r0, [r7, #4]
    9472:	4b06      	ldr	r3, [pc, #24]	; (948c <_usb_d_dev_trans_out_isr+0x90>)
    9474:	4798      	blx	r3
}
    9476:	bf00      	nop
    9478:	3708      	adds	r7, #8
    947a:	46bd      	mov	sp, r7
    947c:	bd80      	pop	{r7, pc}
    947e:	bf00      	nop
    9480:	0000910d 	.word	0x0000910d
    9484:	00009151 	.word	0x00009151
    9488:	00008d71 	.word	0x00008d71
    948c:	00009035 	.word	0x00009035

00009490 <_usb_d_dev_handle_eps>:
 * \brief Handles the endpoint interrupts.
 * \param[in] epint Endpoint interrupt summary (by bits).
 * \param[in] ept Pointer to endpoint information.
 */
static inline void _usb_d_dev_handle_eps(uint32_t epint, struct _usb_d_dev_ep *ept)
{
    9490:	b580      	push	{r7, lr}
    9492:	b084      	sub	sp, #16
    9494:	af00      	add	r7, sp, #0
    9496:	6078      	str	r0, [r7, #4]
    9498:	6039      	str	r1, [r7, #0]
	Usb *hw = USB;
    949a:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    949e:	60fb      	str	r3, [r7, #12]

	uint8_t flags, mask;
	uint8_t epn = USB_EP_GET_N(ept->ep);
    94a0:	683b      	ldr	r3, [r7, #0]
    94a2:	7c9b      	ldrb	r3, [r3, #18]
    94a4:	f003 030f 	and.w	r3, r3, #15
    94a8:	72fb      	strb	r3, [r7, #11]

	if (!(epint & (1u << epn))) {
    94aa:	7afb      	ldrb	r3, [r7, #11]
    94ac:	2201      	movs	r2, #1
    94ae:	409a      	lsls	r2, r3
    94b0:	687b      	ldr	r3, [r7, #4]
    94b2:	4013      	ands	r3, r2
    94b4:	2b00      	cmp	r3, #0
    94b6:	d03d      	beq.n	9534 <_usb_d_dev_handle_eps+0xa4>
		return;
	}
	flags = hw->DEVICE.DeviceEndpoint[epn].EPINTFLAG.reg;
    94b8:	7afb      	ldrb	r3, [r7, #11]
    94ba:	68fa      	ldr	r2, [r7, #12]
    94bc:	3308      	adds	r3, #8
    94be:	015b      	lsls	r3, r3, #5
    94c0:	4413      	add	r3, r2
    94c2:	3307      	adds	r3, #7
    94c4:	781b      	ldrb	r3, [r3, #0]
    94c6:	72bb      	strb	r3, [r7, #10]
	mask  = hw->DEVICE.DeviceEndpoint[epn].EPINTENSET.reg;
    94c8:	7afb      	ldrb	r3, [r7, #11]
    94ca:	68fa      	ldr	r2, [r7, #12]
    94cc:	015b      	lsls	r3, r3, #5
    94ce:	4413      	add	r3, r2
    94d0:	f203 1309 	addw	r3, r3, #265	; 0x109
    94d4:	781b      	ldrb	r3, [r3, #0]
    94d6:	727b      	strb	r3, [r7, #9]
	flags &= mask;
    94d8:	7aba      	ldrb	r2, [r7, #10]
    94da:	7a7b      	ldrb	r3, [r7, #9]
    94dc:	4013      	ands	r3, r2
    94de:	72bb      	strb	r3, [r7, #10]
	if (flags) {
    94e0:	7abb      	ldrb	r3, [r7, #10]
    94e2:	2b00      	cmp	r3, #0
    94e4:	d027      	beq.n	9536 <_usb_d_dev_handle_eps+0xa6>
		if ((ept->flags.bits.eptype == 0x1) && !_usb_d_dev_ep_is_busy(ept)) {
    94e6:	683b      	ldr	r3, [r7, #0]
    94e8:	7cdb      	ldrb	r3, [r3, #19]
    94ea:	f003 0307 	and.w	r3, r3, #7
    94ee:	b2db      	uxtb	r3, r3
    94f0:	2b01      	cmp	r3, #1
    94f2:	d10c      	bne.n	950e <_usb_d_dev_handle_eps+0x7e>
    94f4:	683b      	ldr	r3, [r7, #0]
    94f6:	7cdb      	ldrb	r3, [r3, #19]
    94f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
    94fc:	b2db      	uxtb	r3, r3
    94fe:	2b00      	cmp	r3, #0
    9500:	d105      	bne.n	950e <_usb_d_dev_handle_eps+0x7e>
			_usb_d_dev_trans_setup_isr(ept, flags);
    9502:	7abb      	ldrb	r3, [r7, #10]
    9504:	4619      	mov	r1, r3
    9506:	6838      	ldr	r0, [r7, #0]
    9508:	4b0c      	ldr	r3, [pc, #48]	; (953c <_usb_d_dev_handle_eps+0xac>)
    950a:	4798      	blx	r3
    950c:	e013      	b.n	9536 <_usb_d_dev_handle_eps+0xa6>
		} else if (_usb_d_dev_ep_is_in(ept)) {
    950e:	683b      	ldr	r3, [r7, #0]
    9510:	7cdb      	ldrb	r3, [r3, #19]
    9512:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    9516:	b2db      	uxtb	r3, r3
    9518:	2b00      	cmp	r3, #0
    951a:	d005      	beq.n	9528 <_usb_d_dev_handle_eps+0x98>
			_usb_d_dev_trans_in_isr(ept, flags);
    951c:	7abb      	ldrb	r3, [r7, #10]
    951e:	4619      	mov	r1, r3
    9520:	6838      	ldr	r0, [r7, #0]
    9522:	4b07      	ldr	r3, [pc, #28]	; (9540 <_usb_d_dev_handle_eps+0xb0>)
    9524:	4798      	blx	r3
    9526:	e006      	b.n	9536 <_usb_d_dev_handle_eps+0xa6>
		} else {
			_usb_d_dev_trans_out_isr(ept, flags);
    9528:	7abb      	ldrb	r3, [r7, #10]
    952a:	4619      	mov	r1, r3
    952c:	6838      	ldr	r0, [r7, #0]
    952e:	4b05      	ldr	r3, [pc, #20]	; (9544 <_usb_d_dev_handle_eps+0xb4>)
    9530:	4798      	blx	r3
    9532:	e000      	b.n	9536 <_usb_d_dev_handle_eps+0xa6>
		return;
    9534:	bf00      	nop
		}
	}
}
    9536:	3710      	adds	r7, #16
    9538:	46bd      	mov	sp, r7
    953a:	bd80      	pop	{r7, pc}
    953c:	00009315 	.word	0x00009315
    9540:	00009369 	.word	0x00009369
    9544:	000093fd 	.word	0x000093fd

00009548 <_usb_d_dev_handler>:
/**
 * \brief USB device interrupt handler
 * \param[in] unused The parameter is not used
 */
static void _usb_d_dev_handler(void)
{
    9548:	b580      	push	{r7, lr}
    954a:	b084      	sub	sp, #16
    954c:	af00      	add	r7, sp, #0
	Usb *   hw = USB;
    954e:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    9552:	60bb      	str	r3, [r7, #8]
	uint8_t i;

	uint16_t epint = hw->DEVICE.EPINTSMRY.reg;
    9554:	68bb      	ldr	r3, [r7, #8]
    9556:	8c1b      	ldrh	r3, [r3, #32]
    9558:	80fb      	strh	r3, [r7, #6]
	if (0 == epint) {
    955a:	88fb      	ldrh	r3, [r7, #6]
    955c:	2b00      	cmp	r3, #0
    955e:	d104      	bne.n	956a <_usb_d_dev_handler+0x22>
		if (_usb_d_dev_handle_nep()) {
    9560:	4b13      	ldr	r3, [pc, #76]	; (95b0 <_usb_d_dev_handler+0x68>)
    9562:	4798      	blx	r3
    9564:	4603      	mov	r3, r0
    9566:	2b00      	cmp	r3, #0
    9568:	d11e      	bne.n	95a8 <_usb_d_dev_handler+0x60>
			return;
		}
	}
	/* Handle endpoints */
	for (i = 0; i < USB_D_N_EP; i++) {
    956a:	2300      	movs	r3, #0
    956c:	73fb      	strb	r3, [r7, #15]
    956e:	e017      	b.n	95a0 <_usb_d_dev_handler+0x58>
		struct _usb_d_dev_ep *ept = &dev_inst.ep[i];
    9570:	7bfa      	ldrb	r2, [r7, #15]
    9572:	4613      	mov	r3, r2
    9574:	009b      	lsls	r3, r3, #2
    9576:	4413      	add	r3, r2
    9578:	009b      	lsls	r3, r3, #2
    957a:	3310      	adds	r3, #16
    957c:	4a0d      	ldr	r2, [pc, #52]	; (95b4 <_usb_d_dev_handler+0x6c>)
    957e:	4413      	add	r3, r2
    9580:	3304      	adds	r3, #4
    9582:	603b      	str	r3, [r7, #0]
		if (ept->ep == 0xFF) {
    9584:	683b      	ldr	r3, [r7, #0]
    9586:	7c9b      	ldrb	r3, [r3, #18]
    9588:	2bff      	cmp	r3, #255	; 0xff
    958a:	d005      	beq.n	9598 <_usb_d_dev_handler+0x50>
			continue;
		}
		_usb_d_dev_handle_eps(epint, ept);
    958c:	88fb      	ldrh	r3, [r7, #6]
    958e:	6839      	ldr	r1, [r7, #0]
    9590:	4618      	mov	r0, r3
    9592:	4b09      	ldr	r3, [pc, #36]	; (95b8 <_usb_d_dev_handler+0x70>)
    9594:	4798      	blx	r3
    9596:	e000      	b.n	959a <_usb_d_dev_handler+0x52>
			continue;
    9598:	bf00      	nop
	for (i = 0; i < USB_D_N_EP; i++) {
    959a:	7bfb      	ldrb	r3, [r7, #15]
    959c:	3301      	adds	r3, #1
    959e:	73fb      	strb	r3, [r7, #15]
    95a0:	7bfb      	ldrb	r3, [r7, #15]
    95a2:	2b08      	cmp	r3, #8
    95a4:	d9e4      	bls.n	9570 <_usb_d_dev_handler+0x28>
    95a6:	e000      	b.n	95aa <_usb_d_dev_handler+0x62>
			return;
    95a8:	bf00      	nop
	}
}
    95aa:	3710      	adds	r7, #16
    95ac:	46bd      	mov	sp, r7
    95ae:	bd80      	pop	{r7, pc}
    95b0:	00008aa1 	.word	0x00008aa1
    95b4:	200009e0 	.word	0x200009e0
    95b8:	00009491 	.word	0x00009491

000095bc <_usb_d_dev_reset_epts>:

/**
 * \brief Reset all endpoint software instances
 */
static void _usb_d_dev_reset_epts(void)
{
    95bc:	b580      	push	{r7, lr}
    95be:	b082      	sub	sp, #8
    95c0:	af00      	add	r7, sp, #0
	uint8_t i;
	for (i = 0; i < USB_D_N_EP; i++) {
    95c2:	2300      	movs	r3, #0
    95c4:	71fb      	strb	r3, [r7, #7]
    95c6:	e023      	b.n	9610 <_usb_d_dev_reset_epts+0x54>
		_usb_d_dev_trans_done(&dev_inst.ep[i], USB_TRANS_RESET);
    95c8:	79fa      	ldrb	r2, [r7, #7]
    95ca:	4613      	mov	r3, r2
    95cc:	009b      	lsls	r3, r3, #2
    95ce:	4413      	add	r3, r2
    95d0:	009b      	lsls	r3, r3, #2
    95d2:	3310      	adds	r3, #16
    95d4:	4a14      	ldr	r2, [pc, #80]	; (9628 <_usb_d_dev_reset_epts+0x6c>)
    95d6:	4413      	add	r3, r2
    95d8:	3304      	adds	r3, #4
    95da:	2103      	movs	r1, #3
    95dc:	4618      	mov	r0, r3
    95de:	4b13      	ldr	r3, [pc, #76]	; (962c <_usb_d_dev_reset_epts+0x70>)
    95e0:	4798      	blx	r3
		dev_inst.ep[i].ep       = 0xFF;
    95e2:	79fa      	ldrb	r2, [r7, #7]
    95e4:	4910      	ldr	r1, [pc, #64]	; (9628 <_usb_d_dev_reset_epts+0x6c>)
    95e6:	4613      	mov	r3, r2
    95e8:	009b      	lsls	r3, r3, #2
    95ea:	4413      	add	r3, r2
    95ec:	009b      	lsls	r3, r3, #2
    95ee:	440b      	add	r3, r1
    95f0:	3326      	adds	r3, #38	; 0x26
    95f2:	22ff      	movs	r2, #255	; 0xff
    95f4:	701a      	strb	r2, [r3, #0]
		dev_inst.ep[i].flags.u8 = 0;
    95f6:	79fa      	ldrb	r2, [r7, #7]
    95f8:	490b      	ldr	r1, [pc, #44]	; (9628 <_usb_d_dev_reset_epts+0x6c>)
    95fa:	4613      	mov	r3, r2
    95fc:	009b      	lsls	r3, r3, #2
    95fe:	4413      	add	r3, r2
    9600:	009b      	lsls	r3, r3, #2
    9602:	440b      	add	r3, r1
    9604:	3327      	adds	r3, #39	; 0x27
    9606:	2200      	movs	r2, #0
    9608:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < USB_D_N_EP; i++) {
    960a:	79fb      	ldrb	r3, [r7, #7]
    960c:	3301      	adds	r3, #1
    960e:	71fb      	strb	r3, [r7, #7]
    9610:	79fb      	ldrb	r3, [r7, #7]
    9612:	2b08      	cmp	r3, #8
    9614:	d9d8      	bls.n	95c8 <_usb_d_dev_reset_epts+0xc>
	}
	memset(prvt_inst.desc_table, 0, sizeof(UsbDeviceDescriptor) * (CONF_USB_D_MAX_EP_N + 1));
    9616:	22a0      	movs	r2, #160	; 0xa0
    9618:	2100      	movs	r1, #0
    961a:	4805      	ldr	r0, [pc, #20]	; (9630 <_usb_d_dev_reset_epts+0x74>)
    961c:	4b05      	ldr	r3, [pc, #20]	; (9634 <_usb_d_dev_reset_epts+0x78>)
    961e:	4798      	blx	r3
}
    9620:	bf00      	nop
    9622:	3708      	adds	r7, #8
    9624:	46bd      	mov	sp, r7
    9626:	bd80      	pop	{r7, pc}
    9628:	200009e0 	.word	0x200009e0
    962c:	00009e81 	.word	0x00009e81
    9630:	20000aa8 	.word	0x20000aa8
    9634:	0000c8d9 	.word	0x0000c8d9

00009638 <_usb_d_dev_init>:

int32_t _usb_d_dev_init(void)
{
    9638:	b580      	push	{r7, lr}
    963a:	b084      	sub	sp, #16
    963c:	af00      	add	r7, sp, #0
	Usb *         hw         = USB;
    963e:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    9642:	60fb      	str	r3, [r7, #12]
	uint8_t       speed      = CONF_USB_D_SPEED;
    9644:	2301      	movs	r3, #1
    9646:	72fb      	strb	r3, [r7, #11]
	const uint8_t spdconf[4] = {
    9648:	2304      	movs	r3, #4
    964a:	713b      	strb	r3, [r7, #4]
    964c:	2300      	movs	r3, #0
    964e:	717b      	strb	r3, [r7, #5]
    9650:	2300      	movs	r3, #0
    9652:	71bb      	strb	r3, [r7, #6]
    9654:	2300      	movs	r3, #0
    9656:	71fb      	strb	r3, [r7, #7]
	    USB_DEVICE_CTRLB_SPDCONF(0), /* FS */
	    0,
	    0 /* Reserved */
	};

	if (!hri_usbdevice_is_syncing(hw, USB_SYNCBUSY_SWRST)) {
    9658:	2101      	movs	r1, #1
    965a:	68f8      	ldr	r0, [r7, #12]
    965c:	4b26      	ldr	r3, [pc, #152]	; (96f8 <_usb_d_dev_init+0xc0>)
    965e:	4798      	blx	r3
    9660:	4603      	mov	r3, r0
    9662:	f083 0301 	eor.w	r3, r3, #1
    9666:	b2db      	uxtb	r3, r3
    9668:	2b00      	cmp	r3, #0
    966a:	d011      	beq.n	9690 <_usb_d_dev_init+0x58>
		if (hri_usbdevice_get_CTRLA_reg(hw, USB_CTRLA_ENABLE)) {
    966c:	2102      	movs	r1, #2
    966e:	68f8      	ldr	r0, [r7, #12]
    9670:	4b22      	ldr	r3, [pc, #136]	; (96fc <_usb_d_dev_init+0xc4>)
    9672:	4798      	blx	r3
    9674:	4603      	mov	r3, r0
    9676:	2b00      	cmp	r3, #0
    9678:	d006      	beq.n	9688 <_usb_d_dev_init+0x50>
			hri_usbdevice_clear_CTRLA_ENABLE_bit(hw);
    967a:	68f8      	ldr	r0, [r7, #12]
    967c:	4b20      	ldr	r3, [pc, #128]	; (9700 <_usb_d_dev_init+0xc8>)
    967e:	4798      	blx	r3
			hri_usbdevice_wait_for_sync(hw, USB_SYNCBUSY_ENABLE);
    9680:	2102      	movs	r1, #2
    9682:	68f8      	ldr	r0, [r7, #12]
    9684:	4b1f      	ldr	r3, [pc, #124]	; (9704 <_usb_d_dev_init+0xcc>)
    9686:	4798      	blx	r3
		}
		hri_usbdevice_write_CTRLA_reg(hw, USB_CTRLA_SWRST);
    9688:	2101      	movs	r1, #1
    968a:	68f8      	ldr	r0, [r7, #12]
    968c:	4b1e      	ldr	r3, [pc, #120]	; (9708 <_usb_d_dev_init+0xd0>)
    968e:	4798      	blx	r3
	}
	hri_usbdevice_wait_for_sync(hw, USB_SYNCBUSY_SWRST);
    9690:	2101      	movs	r1, #1
    9692:	68f8      	ldr	r0, [r7, #12]
    9694:	4b1b      	ldr	r3, [pc, #108]	; (9704 <_usb_d_dev_init+0xcc>)
    9696:	4798      	blx	r3

	dev_inst.callbacks.sof   = (_usb_d_dev_sof_cb_t)_dummy_func_no_return;
    9698:	4b1c      	ldr	r3, [pc, #112]	; (970c <_usb_d_dev_init+0xd4>)
    969a:	4a1d      	ldr	r2, [pc, #116]	; (9710 <_usb_d_dev_init+0xd8>)
    969c:	601a      	str	r2, [r3, #0]
	dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)_dummy_func_no_return;
    969e:	4b1b      	ldr	r3, [pc, #108]	; (970c <_usb_d_dev_init+0xd4>)
    96a0:	4a1b      	ldr	r2, [pc, #108]	; (9710 <_usb_d_dev_init+0xd8>)
    96a2:	605a      	str	r2, [r3, #4]

	dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)_dummy_func_no_return;
    96a4:	4b19      	ldr	r3, [pc, #100]	; (970c <_usb_d_dev_init+0xd4>)
    96a6:	4a1a      	ldr	r2, [pc, #104]	; (9710 <_usb_d_dev_init+0xd8>)
    96a8:	609a      	str	r2, [r3, #8]
	dev_inst.ep_callbacks.more  = (_usb_d_dev_ep_cb_more_t)_dummy_func_no_return;
    96aa:	4b18      	ldr	r3, [pc, #96]	; (970c <_usb_d_dev_init+0xd4>)
    96ac:	4a18      	ldr	r2, [pc, #96]	; (9710 <_usb_d_dev_init+0xd8>)
    96ae:	60da      	str	r2, [r3, #12]
	dev_inst.ep_callbacks.done  = (_usb_d_dev_ep_cb_done_t)_dummy_func_no_return;
    96b0:	4b16      	ldr	r3, [pc, #88]	; (970c <_usb_d_dev_init+0xd4>)
    96b2:	4a17      	ldr	r2, [pc, #92]	; (9710 <_usb_d_dev_init+0xd8>)
    96b4:	611a      	str	r2, [r3, #16]

	_usb_d_dev_reset_epts();
    96b6:	4b17      	ldr	r3, [pc, #92]	; (9714 <_usb_d_dev_init+0xdc>)
    96b8:	4798      	blx	r3

	_usb_load_calib();
    96ba:	4b17      	ldr	r3, [pc, #92]	; (9718 <_usb_d_dev_init+0xe0>)
    96bc:	4798      	blx	r3

	hri_usbdevice_write_CTRLA_reg(hw, USB_CTRLA_RUNSTDBY);
    96be:	2104      	movs	r1, #4
    96c0:	68f8      	ldr	r0, [r7, #12]
    96c2:	4b11      	ldr	r3, [pc, #68]	; (9708 <_usb_d_dev_init+0xd0>)
    96c4:	4798      	blx	r3
	hri_usbdevice_write_DESCADD_reg(hw, (uint32_t)prvt_inst.desc_table);
    96c6:	4b15      	ldr	r3, [pc, #84]	; (971c <_usb_d_dev_init+0xe4>)
    96c8:	4619      	mov	r1, r3
    96ca:	68f8      	ldr	r0, [r7, #12]
    96cc:	4b14      	ldr	r3, [pc, #80]	; (9720 <_usb_d_dev_init+0xe8>)
    96ce:	4798      	blx	r3
	hri_usbdevice_write_CTRLB_reg(hw, spdconf[speed] | USB_DEVICE_CTRLB_DETACH);
    96d0:	7afb      	ldrb	r3, [r7, #11]
    96d2:	f107 0210 	add.w	r2, r7, #16
    96d6:	4413      	add	r3, r2
    96d8:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
    96dc:	f043 0301 	orr.w	r3, r3, #1
    96e0:	b2db      	uxtb	r3, r3
    96e2:	b29b      	uxth	r3, r3
    96e4:	4619      	mov	r1, r3
    96e6:	68f8      	ldr	r0, [r7, #12]
    96e8:	4b0e      	ldr	r3, [pc, #56]	; (9724 <_usb_d_dev_init+0xec>)
    96ea:	4798      	blx	r3

	return ERR_NONE;
    96ec:	2300      	movs	r3, #0
}
    96ee:	4618      	mov	r0, r3
    96f0:	3710      	adds	r7, #16
    96f2:	46bd      	mov	sp, r7
    96f4:	bd80      	pop	{r7, pc}
    96f6:	bf00      	nop
    96f8:	00007cd1 	.word	0x00007cd1
    96fc:	00008021 	.word	0x00008021
    9700:	00007ff5 	.word	0x00007ff5
    9704:	00007ca7 	.word	0x00007ca7
    9708:	00008051 	.word	0x00008051
    970c:	200009e0 	.word	0x200009e0
    9710:	00008119 	.word	0x00008119
    9714:	000095bd 	.word	0x000095bd
    9718:	00008131 	.word	0x00008131
    971c:	20000aa8 	.word	0x20000aa8
    9720:	000080fd 	.word	0x000080fd
    9724:	000080c1 	.word	0x000080c1

00009728 <_usb_d_dev_enable>:
	NVIC_DisableIRQ(USB_3_IRQn);
	NVIC_ClearPendingIRQ(USB_3_IRQn);
}

int32_t _usb_d_dev_enable(void)
{
    9728:	b580      	push	{r7, lr}
    972a:	b082      	sub	sp, #8
    972c:	af00      	add	r7, sp, #0
	Usb *   hw = USB;
    972e:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    9732:	607b      	str	r3, [r7, #4]
	uint8_t ctrla;

	if (hri_usbdevice_get_SYNCBUSY_reg(hw, (USB_SYNCBUSY_ENABLE | USB_SYNCBUSY_SWRST))) {
    9734:	2103      	movs	r1, #3
    9736:	6878      	ldr	r0, [r7, #4]
    9738:	4b17      	ldr	r3, [pc, #92]	; (9798 <_usb_d_dev_enable+0x70>)
    973a:	4798      	blx	r3
    973c:	4603      	mov	r3, r0
    973e:	2b00      	cmp	r3, #0
    9740:	d002      	beq.n	9748 <_usb_d_dev_enable+0x20>
		return -USB_ERR_DENIED;
    9742:	f06f 0310 	mvn.w	r3, #16
    9746:	e023      	b.n	9790 <_usb_d_dev_enable+0x68>
	}
	ctrla = hri_usbdevice_read_CTRLA_reg(hw);
    9748:	6878      	ldr	r0, [r7, #4]
    974a:	4b14      	ldr	r3, [pc, #80]	; (979c <_usb_d_dev_enable+0x74>)
    974c:	4798      	blx	r3
    974e:	4603      	mov	r3, r0
    9750:	70fb      	strb	r3, [r7, #3]
	if ((ctrla & USB_CTRLA_ENABLE) == 0) {
    9752:	78fb      	ldrb	r3, [r7, #3]
    9754:	f003 0302 	and.w	r3, r3, #2
    9758:	2b00      	cmp	r3, #0
    975a:	d107      	bne.n	976c <_usb_d_dev_enable+0x44>
		hri_usbdevice_write_CTRLA_reg(hw, ctrla | USB_CTRLA_ENABLE);
    975c:	78fb      	ldrb	r3, [r7, #3]
    975e:	f043 0302 	orr.w	r3, r3, #2
    9762:	b2db      	uxtb	r3, r3
    9764:	4619      	mov	r1, r3
    9766:	6878      	ldr	r0, [r7, #4]
    9768:	4b0d      	ldr	r3, [pc, #52]	; (97a0 <_usb_d_dev_enable+0x78>)
    976a:	4798      	blx	r3
	}

	NVIC_EnableIRQ(USB_0_IRQn);
    976c:	2050      	movs	r0, #80	; 0x50
    976e:	4b0d      	ldr	r3, [pc, #52]	; (97a4 <_usb_d_dev_enable+0x7c>)
    9770:	4798      	blx	r3
	NVIC_EnableIRQ(USB_1_IRQn);
    9772:	2051      	movs	r0, #81	; 0x51
    9774:	4b0b      	ldr	r3, [pc, #44]	; (97a4 <_usb_d_dev_enable+0x7c>)
    9776:	4798      	blx	r3
	NVIC_EnableIRQ(USB_2_IRQn);
    9778:	2052      	movs	r0, #82	; 0x52
    977a:	4b0a      	ldr	r3, [pc, #40]	; (97a4 <_usb_d_dev_enable+0x7c>)
    977c:	4798      	blx	r3
	NVIC_EnableIRQ(USB_3_IRQn);
    977e:	2053      	movs	r0, #83	; 0x53
    9780:	4b08      	ldr	r3, [pc, #32]	; (97a4 <_usb_d_dev_enable+0x7c>)
    9782:	4798      	blx	r3

	hri_usbdevice_set_INTEN_reg(hw,
    9784:	f240 218d 	movw	r1, #653	; 0x28d
    9788:	6878      	ldr	r0, [r7, #4]
    978a:	4b07      	ldr	r3, [pc, #28]	; (97a8 <_usb_d_dev_enable+0x80>)
    978c:	4798      	blx	r3
	                            USB_DEVICE_INTENSET_SOF | USB_DEVICE_INTENSET_EORST | USB_DEVICE_INTENSET_RAMACER
	                                | USB_D_SUSPEND_INT_FLAGS);

	return ERR_NONE;
    978e:	2300      	movs	r3, #0
}
    9790:	4618      	mov	r0, r3
    9792:	3708      	adds	r7, #8
    9794:	46bd      	mov	sp, r7
    9796:	bd80      	pop	{r7, pc}
    9798:	00007fcb 	.word	0x00007fcb
    979c:	00008079 	.word	0x00008079
    97a0:	00008051 	.word	0x00008051
    97a4:	00007bdd 	.word	0x00007bdd
    97a8:	00007f75 	.word	0x00007f75

000097ac <_usb_d_dev_attach>:

	return ERR_NONE;
}

void _usb_d_dev_attach(void)
{
    97ac:	b580      	push	{r7, lr}
    97ae:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_CTRLB_DETACH_bit(USB);
    97b0:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    97b4:	4b01      	ldr	r3, [pc, #4]	; (97bc <_usb_d_dev_attach+0x10>)
    97b6:	4798      	blx	r3
}
    97b8:	bf00      	nop
    97ba:	bd80      	pop	{r7, pc}
    97bc:	0000809d 	.word	0x0000809d

000097c0 <_usb_d_dev_set_address>:

	return speed[sp];
}

void _usb_d_dev_set_address(uint8_t addr)
{
    97c0:	b580      	push	{r7, lr}
    97c2:	b082      	sub	sp, #8
    97c4:	af00      	add	r7, sp, #0
    97c6:	4603      	mov	r3, r0
    97c8:	71fb      	strb	r3, [r7, #7]
	hri_usbdevice_write_DADD_reg(USB, USB_DEVICE_DADD_ADDEN | USB_DEVICE_DADD_DADD(addr));
    97ca:	79fb      	ldrb	r3, [r7, #7]
    97cc:	f063 037f 	orn	r3, r3, #127	; 0x7f
    97d0:	b2db      	uxtb	r3, r3
    97d2:	4619      	mov	r1, r3
    97d4:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    97d8:	4b02      	ldr	r3, [pc, #8]	; (97e4 <_usb_d_dev_set_address+0x24>)
    97da:	4798      	blx	r3
}
    97dc:	bf00      	nop
    97de:	3708      	adds	r7, #8
    97e0:	46bd      	mov	sp, r7
    97e2:	bd80      	pop	{r7, pc}
    97e4:	000080df 	.word	0x000080df

000097e8 <_usb_d_dev_trans_setup>:
/**
 *  \brief Start a setup transaction
 *  \param[in] ept Endpoint information.
 */
static inline void _usb_d_dev_trans_setup(struct _usb_d_dev_ep *ept)
{
    97e8:	b590      	push	{r4, r7, lr}
    97ea:	b085      	sub	sp, #20
    97ec:	af00      	add	r7, sp, #0
    97ee:	6078      	str	r0, [r7, #4]
	Usb *   hw  = USB;
    97f0:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    97f4:	60fb      	str	r3, [r7, #12]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    97f6:	687b      	ldr	r3, [r7, #4]
    97f8:	7c9b      	ldrb	r3, [r3, #18]
    97fa:	f003 030f 	and.w	r3, r3, #15
    97fe:	72fb      	strb	r3, [r7, #11]

	_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    9800:	687b      	ldr	r3, [r7, #4]
    9802:	68db      	ldr	r3, [r3, #12]
    9804:	461a      	mov	r2, r3
    9806:	7afb      	ldrb	r3, [r7, #11]
    9808:	2100      	movs	r1, #0
    980a:	4618      	mov	r0, r3
    980c:	4b0f      	ldr	r3, [pc, #60]	; (984c <_usb_d_dev_trans_setup+0x64>)
    980e:	4798      	blx	r3
	_usbd_ep_set_out_trans(epn, 0, ept->size, 0);
    9810:	687b      	ldr	r3, [r7, #4]
    9812:	8a1b      	ldrh	r3, [r3, #16]
    9814:	461a      	mov	r2, r3
    9816:	7af8      	ldrb	r0, [r7, #11]
    9818:	2300      	movs	r3, #0
    981a:	2100      	movs	r1, #0
    981c:	4c0c      	ldr	r4, [pc, #48]	; (9850 <_usb_d_dev_trans_setup+0x68>)
    981e:	47a0      	blx	r4

	hri_usbendpoint_clear_EPSTATUS_reg(hw, epn, USB_DEVICE_EPSTATUS_STALLRQ(0x3) | USB_DEVICE_EPSTATUS_BK1RDY);
    9820:	7afb      	ldrb	r3, [r7, #11]
    9822:	22b0      	movs	r2, #176	; 0xb0
    9824:	4619      	mov	r1, r3
    9826:	68f8      	ldr	r0, [r7, #12]
    9828:	4b0a      	ldr	r3, [pc, #40]	; (9854 <_usb_d_dev_trans_setup+0x6c>)
    982a:	4798      	blx	r3
	_usbd_ep_set_out_rdy(epn, 0, false);
    982c:	7afb      	ldrb	r3, [r7, #11]
    982e:	2200      	movs	r2, #0
    9830:	2100      	movs	r1, #0
    9832:	4618      	mov	r0, r3
    9834:	4b08      	ldr	r3, [pc, #32]	; (9858 <_usb_d_dev_trans_setup+0x70>)
    9836:	4798      	blx	r3

	hri_usbendpoint_set_EPINTEN_reg(hw, epn, USB_D_SETUP_INT_FLAGS);
    9838:	7afb      	ldrb	r3, [r7, #11]
    983a:	2210      	movs	r2, #16
    983c:	4619      	mov	r1, r3
    983e:	68f8      	ldr	r0, [r7, #12]
    9840:	4b06      	ldr	r3, [pc, #24]	; (985c <_usb_d_dev_trans_setup+0x74>)
    9842:	4798      	blx	r3
}
    9844:	bf00      	nop
    9846:	3714      	adds	r7, #20
    9848:	46bd      	mov	sp, r7
    984a:	bd90      	pop	{r4, r7, pc}
    984c:	0000857d 	.word	0x0000857d
    9850:	00008705 	.word	0x00008705
    9854:	00007ddd 	.word	0x00007ddd
    9858:	000087d5 	.word	0x000087d5
    985c:	00007e31 	.word	0x00007e31

00009860 <_usb_d_dev_ep_init>:
{
	return _usb_d_dev_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_siz);
}

int32_t _usb_d_dev_ep_init(const uint8_t ep, const uint8_t attr, const uint16_t max_pkt_siz)
{
    9860:	b580      	push	{r7, lr}
    9862:	b088      	sub	sp, #32
    9864:	af00      	add	r7, sp, #0
    9866:	4603      	mov	r3, r0
    9868:	71fb      	strb	r3, [r7, #7]
    986a:	460b      	mov	r3, r1
    986c:	71bb      	strb	r3, [r7, #6]
    986e:	4613      	mov	r3, r2
    9870:	80bb      	strh	r3, [r7, #4]
	uint8_t               epn = USB_EP_GET_N(ep);
    9872:	79fb      	ldrb	r3, [r7, #7]
    9874:	f003 030f 	and.w	r3, r3, #15
    9878:	77fb      	strb	r3, [r7, #31]
	bool                  dir = USB_EP_GET_DIR(ep);
    987a:	79fb      	ldrb	r3, [r7, #7]
    987c:	f003 0380 	and.w	r3, r3, #128	; 0x80
    9880:	2b00      	cmp	r3, #0
    9882:	bf14      	ite	ne
    9884:	2301      	movne	r3, #1
    9886:	2300      	moveq	r3, #0
    9888:	77bb      	strb	r3, [r7, #30]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    988a:	7fba      	ldrb	r2, [r7, #30]
    988c:	7ffb      	ldrb	r3, [r7, #31]
    988e:	4611      	mov	r1, r2
    9890:	4618      	mov	r0, r3
    9892:	4b3e      	ldr	r3, [pc, #248]	; (998c <_usb_d_dev_ep_init+0x12c>)
    9894:	4798      	blx	r3
    9896:	61b8      	str	r0, [r7, #24]

	uint8_t                        ep_type = attr & USB_EP_XTYPE_MASK;
    9898:	79bb      	ldrb	r3, [r7, #6]
    989a:	f003 0303 	and.w	r3, r3, #3
    989e:	75fb      	strb	r3, [r7, #23]
	const struct _usb_ep_cfg_item *pcfg    = &_usb_ep_cfgs[epn];
    98a0:	7ffa      	ldrb	r2, [r7, #31]
    98a2:	4613      	mov	r3, r2
    98a4:	005b      	lsls	r3, r3, #1
    98a6:	4413      	add	r3, r2
    98a8:	009b      	lsls	r3, r3, #2
    98aa:	4a39      	ldr	r2, [pc, #228]	; (9990 <_usb_d_dev_ep_init+0x130>)
    98ac:	4413      	add	r3, r2
    98ae:	613b      	str	r3, [r7, #16]

	if (epn > CONF_USB_D_MAX_EP_N) {
    98b0:	7ffb      	ldrb	r3, [r7, #31]
    98b2:	2b04      	cmp	r3, #4
    98b4:	d902      	bls.n	98bc <_usb_d_dev_ep_init+0x5c>
		return -USB_ERR_PARAM;
    98b6:	f06f 0311 	mvn.w	r3, #17
    98ba:	e063      	b.n	9984 <_usb_d_dev_ep_init+0x124>
	}
	if (ept->ep != 0xFF) {
    98bc:	69bb      	ldr	r3, [r7, #24]
    98be:	7c9b      	ldrb	r3, [r3, #18]
    98c0:	2bff      	cmp	r3, #255	; 0xff
    98c2:	d002      	beq.n	98ca <_usb_d_dev_ep_init+0x6a>
		return -USB_ERR_REDO;
    98c4:	f06f 0313 	mvn.w	r3, #19
    98c8:	e05c      	b.n	9984 <_usb_d_dev_ep_init+0x124>
	}
	if (ep_type == USB_EP_XTYPE_CTRL) {
    98ca:	7dfb      	ldrb	r3, [r7, #23]
    98cc:	2b00      	cmp	r3, #0
    98ce:	d11f      	bne.n	9910 <_usb_d_dev_ep_init+0xb0>
		struct _usb_d_dev_ep *ept_in = _usb_d_dev_ept(epn, !dir);
    98d0:	7fbb      	ldrb	r3, [r7, #30]
    98d2:	2b00      	cmp	r3, #0
    98d4:	bf14      	ite	ne
    98d6:	2301      	movne	r3, #1
    98d8:	2300      	moveq	r3, #0
    98da:	b2db      	uxtb	r3, r3
    98dc:	f083 0301 	eor.w	r3, r3, #1
    98e0:	b2db      	uxtb	r3, r3
    98e2:	f003 0301 	and.w	r3, r3, #1
    98e6:	b2da      	uxtb	r2, r3
    98e8:	7ffb      	ldrb	r3, [r7, #31]
    98ea:	4611      	mov	r1, r2
    98ec:	4618      	mov	r0, r3
    98ee:	4b27      	ldr	r3, [pc, #156]	; (998c <_usb_d_dev_ep_init+0x12c>)
    98f0:	4798      	blx	r3
    98f2:	60f8      	str	r0, [r7, #12]
		if (ept_in->ep != 0xFF) {
    98f4:	68fb      	ldr	r3, [r7, #12]
    98f6:	7c9b      	ldrb	r3, [r3, #18]
    98f8:	2bff      	cmp	r3, #255	; 0xff
    98fa:	d002      	beq.n	9902 <_usb_d_dev_ep_init+0xa2>
			return -USB_ERR_REDO;
    98fc:	f06f 0313 	mvn.w	r3, #19
    9900:	e040      	b.n	9984 <_usb_d_dev_ep_init+0x124>
		}
		if (pcfg->cache == NULL) {
    9902:	693b      	ldr	r3, [r7, #16]
    9904:	681b      	ldr	r3, [r3, #0]
    9906:	2b00      	cmp	r3, #0
    9908:	d102      	bne.n	9910 <_usb_d_dev_ep_init+0xb0>
			return -USB_ERR_FUNC;
    990a:	f06f 0312 	mvn.w	r3, #18
    990e:	e039      	b.n	9984 <_usb_d_dev_ep_init+0x124>
		}
	}
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    9910:	7fbb      	ldrb	r3, [r7, #30]
    9912:	2b00      	cmp	r3, #0
    9914:	d007      	beq.n	9926 <_usb_d_dev_ep_init+0xc6>
    9916:	693b      	ldr	r3, [r7, #16]
    9918:	685b      	ldr	r3, [r3, #4]
    991a:	2b00      	cmp	r3, #0
    991c:	bf14      	ite	ne
    991e:	2301      	movne	r3, #1
    9920:	2300      	moveq	r3, #0
    9922:	b2db      	uxtb	r3, r3
    9924:	e006      	b.n	9934 <_usb_d_dev_ep_init+0xd4>
    9926:	693b      	ldr	r3, [r7, #16]
    9928:	681b      	ldr	r3, [r3, #0]
    992a:	2b00      	cmp	r3, #0
    992c:	bf14      	ite	ne
    992e:	2301      	movne	r3, #1
    9930:	2300      	moveq	r3, #0
    9932:	b2db      	uxtb	r3, r3
    9934:	2b00      	cmp	r3, #0
    9936:	d00f      	beq.n	9958 <_usb_d_dev_ep_init+0xf8>
    9938:	7fbb      	ldrb	r3, [r7, #30]
    993a:	2b00      	cmp	r3, #0
    993c:	d003      	beq.n	9946 <_usb_d_dev_ep_init+0xe6>
    993e:	693b      	ldr	r3, [r7, #16]
    9940:	895b      	ldrh	r3, [r3, #10]
    9942:	461a      	mov	r2, r3
    9944:	e002      	b.n	994c <_usb_d_dev_ep_init+0xec>
    9946:	693b      	ldr	r3, [r7, #16]
    9948:	891b      	ldrh	r3, [r3, #8]
    994a:	461a      	mov	r2, r3
    994c:	88bb      	ldrh	r3, [r7, #4]
    994e:	429a      	cmp	r2, r3
    9950:	da02      	bge.n	9958 <_usb_d_dev_ep_init+0xf8>
		return -USB_ERR_FUNC;
    9952:	f06f 0312 	mvn.w	r3, #18
    9956:	e015      	b.n	9984 <_usb_d_dev_ep_init+0x124>
	}

	/* Initialize EP n settings */
	ept->cache    = (uint8_t *)(dir ? pcfg->i_cache : pcfg->cache);
    9958:	7fbb      	ldrb	r3, [r7, #30]
    995a:	2b00      	cmp	r3, #0
    995c:	d002      	beq.n	9964 <_usb_d_dev_ep_init+0x104>
    995e:	693b      	ldr	r3, [r7, #16]
    9960:	685b      	ldr	r3, [r3, #4]
    9962:	e001      	b.n	9968 <_usb_d_dev_ep_init+0x108>
    9964:	693b      	ldr	r3, [r7, #16]
    9966:	681b      	ldr	r3, [r3, #0]
    9968:	69ba      	ldr	r2, [r7, #24]
    996a:	60d3      	str	r3, [r2, #12]
	ept->size     = max_pkt_siz;
    996c:	69bb      	ldr	r3, [r7, #24]
    996e:	88ba      	ldrh	r2, [r7, #4]
    9970:	821a      	strh	r2, [r3, #16]
	ept->flags.u8 = (ep_type + 1);
    9972:	7dfb      	ldrb	r3, [r7, #23]
    9974:	3301      	adds	r3, #1
    9976:	b2da      	uxtb	r2, r3
    9978:	69bb      	ldr	r3, [r7, #24]
    997a:	74da      	strb	r2, [r3, #19]
	ept->ep       = ep;
    997c:	69bb      	ldr	r3, [r7, #24]
    997e:	79fa      	ldrb	r2, [r7, #7]
    9980:	749a      	strb	r2, [r3, #18]

	return USB_OK;
    9982:	2300      	movs	r3, #0
}
    9984:	4618      	mov	r0, r3
    9986:	3720      	adds	r7, #32
    9988:	46bd      	mov	sp, r7
    998a:	bd80      	pop	{r7, pc}
    998c:	00008891 	.word	0x00008891
    9990:	0000ced0 	.word	0x0000ced0

00009994 <_usb_d_dev_ep_deinit>:

void _usb_d_dev_ep_deinit(uint8_t ep)
{
    9994:	b580      	push	{r7, lr}
    9996:	b086      	sub	sp, #24
    9998:	af00      	add	r7, sp, #0
    999a:	4603      	mov	r3, r0
    999c:	71fb      	strb	r3, [r7, #7]
	Usb *                 hw  = USB;
    999e:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    99a2:	617b      	str	r3, [r7, #20]
	uint8_t               epn = USB_EP_GET_N(ep);
    99a4:	79fb      	ldrb	r3, [r7, #7]
    99a6:	f003 030f 	and.w	r3, r3, #15
    99aa:	74fb      	strb	r3, [r7, #19]
	bool                  dir = USB_EP_GET_DIR(ep);
    99ac:	79fb      	ldrb	r3, [r7, #7]
    99ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
    99b2:	2b00      	cmp	r3, #0
    99b4:	bf14      	ite	ne
    99b6:	2301      	movne	r3, #1
    99b8:	2300      	moveq	r3, #0
    99ba:	74bb      	strb	r3, [r7, #18]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    99bc:	7cba      	ldrb	r2, [r7, #18]
    99be:	7cfb      	ldrb	r3, [r7, #19]
    99c0:	4611      	mov	r1, r2
    99c2:	4618      	mov	r0, r3
    99c4:	4b2a      	ldr	r3, [pc, #168]	; (9a70 <_usb_d_dev_ep_deinit+0xdc>)
    99c6:	4798      	blx	r3
    99c8:	60f8      	str	r0, [r7, #12]

	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    99ca:	7cfb      	ldrb	r3, [r7, #19]
    99cc:	2b04      	cmp	r3, #4
    99ce:	d84a      	bhi.n	9a66 <_usb_d_dev_ep_deinit+0xd2>
    99d0:	68fb      	ldr	r3, [r7, #12]
    99d2:	7c9b      	ldrb	r3, [r3, #18]
    99d4:	2bff      	cmp	r3, #255	; 0xff
    99d6:	d046      	beq.n	9a66 <_usb_d_dev_ep_deinit+0xd2>
		return;
	}

	/* Finish pending transactions. */
	_usb_d_dev_trans_stop(ept, dir, USB_TRANS_RESET);
    99d8:	7cbb      	ldrb	r3, [r7, #18]
    99da:	2203      	movs	r2, #3
    99dc:	4619      	mov	r1, r3
    99de:	68f8      	ldr	r0, [r7, #12]
    99e0:	4b24      	ldr	r3, [pc, #144]	; (9a74 <_usb_d_dev_ep_deinit+0xe0>)
    99e2:	4798      	blx	r3

	/* Disable the endpoint. */
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    99e4:	68fb      	ldr	r3, [r7, #12]
    99e6:	7cdb      	ldrb	r3, [r3, #19]
    99e8:	f003 0307 	and.w	r3, r3, #7
    99ec:	b2db      	uxtb	r3, r3
    99ee:	2b01      	cmp	r3, #1
    99f0:	d107      	bne.n	9a02 <_usb_d_dev_ep_deinit+0x6e>
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg = 0;
    99f2:	79fb      	ldrb	r3, [r7, #7]
    99f4:	697a      	ldr	r2, [r7, #20]
    99f6:	3308      	adds	r3, #8
    99f8:	015b      	lsls	r3, r3, #5
    99fa:	4413      	add	r3, r2
    99fc:	2200      	movs	r2, #0
    99fe:	701a      	strb	r2, [r3, #0]
    9a00:	e02a      	b.n	9a58 <_usb_d_dev_ep_deinit+0xc4>
	} else if (USB_EP_GET_DIR(ep)) {
    9a02:	f997 3007 	ldrsb.w	r3, [r7, #7]
    9a06:	2b00      	cmp	r3, #0
    9a08:	da15      	bge.n	9a36 <_usb_d_dev_ep_deinit+0xa2>
		hw->DEVICE.DeviceEndpoint[USB_EP_GET_N(ep)].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE1_Msk;
    9a0a:	79fb      	ldrb	r3, [r7, #7]
    9a0c:	f003 030f 	and.w	r3, r3, #15
    9a10:	79fa      	ldrb	r2, [r7, #7]
    9a12:	f002 020f 	and.w	r2, r2, #15
    9a16:	6979      	ldr	r1, [r7, #20]
    9a18:	3208      	adds	r2, #8
    9a1a:	0152      	lsls	r2, r2, #5
    9a1c:	440a      	add	r2, r1
    9a1e:	7812      	ldrb	r2, [r2, #0]
    9a20:	b2d2      	uxtb	r2, r2
    9a22:	f022 0270 	bic.w	r2, r2, #112	; 0x70
    9a26:	b2d1      	uxtb	r1, r2
    9a28:	697a      	ldr	r2, [r7, #20]
    9a2a:	3308      	adds	r3, #8
    9a2c:	015b      	lsls	r3, r3, #5
    9a2e:	4413      	add	r3, r2
    9a30:	460a      	mov	r2, r1
    9a32:	701a      	strb	r2, [r3, #0]
    9a34:	e010      	b.n	9a58 <_usb_d_dev_ep_deinit+0xc4>
	} else {
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE0_Msk;
    9a36:	79fb      	ldrb	r3, [r7, #7]
    9a38:	79fa      	ldrb	r2, [r7, #7]
    9a3a:	6979      	ldr	r1, [r7, #20]
    9a3c:	3208      	adds	r2, #8
    9a3e:	0152      	lsls	r2, r2, #5
    9a40:	440a      	add	r2, r1
    9a42:	7812      	ldrb	r2, [r2, #0]
    9a44:	b2d2      	uxtb	r2, r2
    9a46:	f022 0207 	bic.w	r2, r2, #7
    9a4a:	b2d1      	uxtb	r1, r2
    9a4c:	697a      	ldr	r2, [r7, #20]
    9a4e:	3308      	adds	r3, #8
    9a50:	015b      	lsls	r3, r3, #5
    9a52:	4413      	add	r3, r2
    9a54:	460a      	mov	r2, r1
    9a56:	701a      	strb	r2, [r3, #0]
	}
	ept->flags.u8 = 0;
    9a58:	68fb      	ldr	r3, [r7, #12]
    9a5a:	2200      	movs	r2, #0
    9a5c:	74da      	strb	r2, [r3, #19]
	ept->ep       = 0xFF;
    9a5e:	68fb      	ldr	r3, [r7, #12]
    9a60:	22ff      	movs	r2, #255	; 0xff
    9a62:	749a      	strb	r2, [r3, #18]
    9a64:	e000      	b.n	9a68 <_usb_d_dev_ep_deinit+0xd4>
		return;
    9a66:	bf00      	nop
}
    9a68:	3718      	adds	r7, #24
    9a6a:	46bd      	mov	sp, r7
    9a6c:	bd80      	pop	{r7, pc}
    9a6e:	bf00      	nop
    9a70:	00008891 	.word	0x00008891
    9a74:	00009ec9 	.word	0x00009ec9

00009a78 <_usb_d_dev_ep_enable>:

int32_t _usb_d_dev_ep_enable(const uint8_t ep)
{
    9a78:	b5b0      	push	{r4, r5, r7, lr}
    9a7a:	b088      	sub	sp, #32
    9a7c:	af00      	add	r7, sp, #0
    9a7e:	4603      	mov	r3, r0
    9a80:	71fb      	strb	r3, [r7, #7]
	Usb *                 hw    = USB;
    9a82:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    9a86:	61fb      	str	r3, [r7, #28]
	uint8_t               epn   = USB_EP_GET_N(ep);
    9a88:	79fb      	ldrb	r3, [r7, #7]
    9a8a:	f003 030f 	and.w	r3, r3, #15
    9a8e:	76fb      	strb	r3, [r7, #27]
	bool                  dir   = USB_EP_GET_DIR(ep);
    9a90:	79fb      	ldrb	r3, [r7, #7]
    9a92:	f003 0380 	and.w	r3, r3, #128	; 0x80
    9a96:	2b00      	cmp	r3, #0
    9a98:	bf14      	ite	ne
    9a9a:	2301      	movne	r3, #1
    9a9c:	2300      	moveq	r3, #0
    9a9e:	76bb      	strb	r3, [r7, #26]
	struct _usb_d_dev_ep *ept   = _usb_d_dev_ept(epn, dir);
    9aa0:	7eba      	ldrb	r2, [r7, #26]
    9aa2:	7efb      	ldrb	r3, [r7, #27]
    9aa4:	4611      	mov	r1, r2
    9aa6:	4618      	mov	r0, r3
    9aa8:	4b70      	ldr	r3, [pc, #448]	; (9c6c <_usb_d_dev_ep_enable+0x1f4>)
    9aaa:	4798      	blx	r3
    9aac:	6178      	str	r0, [r7, #20]
	uint8_t               epcfg = hri_usbendpoint_read_EPCFG_reg(hw, epn);
    9aae:	7efb      	ldrb	r3, [r7, #27]
    9ab0:	4619      	mov	r1, r3
    9ab2:	69f8      	ldr	r0, [r7, #28]
    9ab4:	4b6e      	ldr	r3, [pc, #440]	; (9c70 <_usb_d_dev_ep_enable+0x1f8>)
    9ab6:	4798      	blx	r3
    9ab8:	4603      	mov	r3, r0
    9aba:	74fb      	strb	r3, [r7, #19]
	UsbDeviceDescBank *   bank;

	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    9abc:	7efb      	ldrb	r3, [r7, #27]
    9abe:	2b04      	cmp	r3, #4
    9ac0:	d803      	bhi.n	9aca <_usb_d_dev_ep_enable+0x52>
    9ac2:	697b      	ldr	r3, [r7, #20]
    9ac4:	7c9b      	ldrb	r3, [r3, #18]
    9ac6:	2bff      	cmp	r3, #255	; 0xff
    9ac8:	d102      	bne.n	9ad0 <_usb_d_dev_ep_enable+0x58>
		return -USB_ERR_PARAM;
    9aca:	f06f 0311 	mvn.w	r3, #17
    9ace:	e0c8      	b.n	9c62 <_usb_d_dev_ep_enable+0x1ea>
	}

	bank = prvt_inst.desc_table[epn].DeviceDescBank;
    9ad0:	7efb      	ldrb	r3, [r7, #27]
    9ad2:	015b      	lsls	r3, r3, #5
    9ad4:	4a67      	ldr	r2, [pc, #412]	; (9c74 <_usb_d_dev_ep_enable+0x1fc>)
    9ad6:	4413      	add	r3, r2
    9ad8:	60fb      	str	r3, [r7, #12]
	if (ept->flags.bits.eptype == USB_D_EPTYPE_CTRL) {
    9ada:	697b      	ldr	r3, [r7, #20]
    9adc:	7cdb      	ldrb	r3, [r3, #19]
    9ade:	f003 0307 	and.w	r3, r3, #7
    9ae2:	b2db      	uxtb	r3, r3
    9ae4:	2b01      	cmp	r3, #1
    9ae6:	d14b      	bne.n	9b80 <_usb_d_dev_ep_enable+0x108>
		if (epcfg & (USB_DEVICE_EPCFG_EPTYPE1_Msk | USB_DEVICE_EPCFG_EPTYPE0_Msk)) {
    9ae8:	7cfb      	ldrb	r3, [r7, #19]
    9aea:	f003 0377 	and.w	r3, r3, #119	; 0x77
    9aee:	2b00      	cmp	r3, #0
    9af0:	d002      	beq.n	9af8 <_usb_d_dev_ep_enable+0x80>
			return -USB_ERR_REDO;
    9af2:	f06f 0313 	mvn.w	r3, #19
    9af6:	e0b4      	b.n	9c62 <_usb_d_dev_ep_enable+0x1ea>
		}
		hri_usbendpoint_write_EPCFG_reg(hw, epn, USB_D_EPCFG_CTRL);
    9af8:	7efb      	ldrb	r3, [r7, #27]
    9afa:	2211      	movs	r2, #17
    9afc:	4619      	mov	r1, r3
    9afe:	69f8      	ldr	r0, [r7, #28]
    9b00:	4b5d      	ldr	r3, [pc, #372]	; (9c78 <_usb_d_dev_ep_enable+0x200>)
    9b02:	4798      	blx	r3
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    9b04:	697b      	ldr	r3, [r7, #20]
    9b06:	8a1b      	ldrh	r3, [r3, #16]
    9b08:	039b      	lsls	r3, r3, #14
    9b0a:	4c5c      	ldr	r4, [pc, #368]	; (9c7c <_usb_d_dev_ep_enable+0x204>)
    9b0c:	401c      	ands	r4, r3
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    9b0e:	697b      	ldr	r3, [r7, #20]
    9b10:	8a1b      	ldrh	r3, [r3, #16]
    9b12:	4618      	mov	r0, r3
    9b14:	4b5a      	ldr	r3, [pc, #360]	; (9c80 <_usb_d_dev_ep_enable+0x208>)
    9b16:	4798      	blx	r3
    9b18:	4603      	mov	r3, r0
    9b1a:	071b      	lsls	r3, r3, #28
    9b1c:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    9b20:	ea44 0203 	orr.w	r2, r4, r3
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    9b24:	68fb      	ldr	r3, [r7, #12]
    9b26:	605a      	str	r2, [r3, #4]
		bank[1].PCKSIZE.reg
    9b28:	68fb      	ldr	r3, [r7, #12]
    9b2a:	f103 0410 	add.w	r4, r3, #16
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    9b2e:	697b      	ldr	r3, [r7, #20]
    9b30:	8a1b      	ldrh	r3, [r3, #16]
    9b32:	f3c3 050d 	ubfx	r5, r3, #0, #14
    9b36:	697b      	ldr	r3, [r7, #20]
    9b38:	8a1b      	ldrh	r3, [r3, #16]
    9b3a:	4618      	mov	r0, r3
    9b3c:	4b50      	ldr	r3, [pc, #320]	; (9c80 <_usb_d_dev_ep_enable+0x208>)
    9b3e:	4798      	blx	r3
    9b40:	4603      	mov	r3, r0
    9b42:	071b      	lsls	r3, r3, #28
    9b44:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    9b48:	432b      	orrs	r3, r5
    9b4a:	6063      	str	r3, [r4, #4]
		/* By default, control endpoint accept SETUP and NAK all other token. */
		_usbd_ep_set_out_rdy(epn, 0, false);
    9b4c:	7efb      	ldrb	r3, [r7, #27]
    9b4e:	2200      	movs	r2, #0
    9b50:	2100      	movs	r1, #0
    9b52:	4618      	mov	r0, r3
    9b54:	4b4b      	ldr	r3, [pc, #300]	; (9c84 <_usb_d_dev_ep_enable+0x20c>)
    9b56:	4798      	blx	r3
		_usbd_ep_set_in_rdy(epn, 1, false);
    9b58:	7efb      	ldrb	r3, [r7, #27]
    9b5a:	2200      	movs	r2, #0
    9b5c:	2101      	movs	r1, #1
    9b5e:	4618      	mov	r0, r3
    9b60:	4b49      	ldr	r3, [pc, #292]	; (9c88 <_usb_d_dev_ep_enable+0x210>)
    9b62:	4798      	blx	r3

		_usbd_ep_clear_bank_status(epn, 0);
    9b64:	7efb      	ldrb	r3, [r7, #27]
    9b66:	2100      	movs	r1, #0
    9b68:	4618      	mov	r0, r3
    9b6a:	4b48      	ldr	r3, [pc, #288]	; (9c8c <_usb_d_dev_ep_enable+0x214>)
    9b6c:	4798      	blx	r3
		_usbd_ep_clear_bank_status(epn, 1);
    9b6e:	7efb      	ldrb	r3, [r7, #27]
    9b70:	2101      	movs	r1, #1
    9b72:	4618      	mov	r0, r3
    9b74:	4b45      	ldr	r3, [pc, #276]	; (9c8c <_usb_d_dev_ep_enable+0x214>)
    9b76:	4798      	blx	r3

		/* Enable SETUP reception for control endpoint. */
		_usb_d_dev_trans_setup(ept);
    9b78:	6978      	ldr	r0, [r7, #20]
    9b7a:	4b45      	ldr	r3, [pc, #276]	; (9c90 <_usb_d_dev_ep_enable+0x218>)
    9b7c:	4798      	blx	r3
    9b7e:	e06f      	b.n	9c60 <_usb_d_dev_ep_enable+0x1e8>

	} else if (dir) {
    9b80:	7ebb      	ldrb	r3, [r7, #26]
    9b82:	2b00      	cmp	r3, #0
    9b84:	d038      	beq.n	9bf8 <_usb_d_dev_ep_enable+0x180>
		if (epcfg & USB_DEVICE_EPCFG_EPTYPE1_Msk) {
    9b86:	7cfb      	ldrb	r3, [r7, #19]
    9b88:	f003 0370 	and.w	r3, r3, #112	; 0x70
    9b8c:	2b00      	cmp	r3, #0
    9b8e:	d002      	beq.n	9b96 <_usb_d_dev_ep_enable+0x11e>
			return -USB_ERR_REDO;
    9b90:	f06f 0313 	mvn.w	r3, #19
    9b94:	e065      	b.n	9c62 <_usb_d_dev_ep_enable+0x1ea>
		}
		epcfg |= USB_DEVICE_EPCFG_EPTYPE1(ept->flags.bits.eptype);
    9b96:	697b      	ldr	r3, [r7, #20]
    9b98:	7cdb      	ldrb	r3, [r3, #19]
    9b9a:	f3c3 0302 	ubfx	r3, r3, #0, #3
    9b9e:	b2db      	uxtb	r3, r3
    9ba0:	011b      	lsls	r3, r3, #4
    9ba2:	b2db      	uxtb	r3, r3
    9ba4:	f003 0370 	and.w	r3, r3, #112	; 0x70
    9ba8:	b2da      	uxtb	r2, r3
    9baa:	7cfb      	ldrb	r3, [r7, #19]
    9bac:	4313      	orrs	r3, r2
    9bae:	74fb      	strb	r3, [r7, #19]
		hri_usbendpoint_write_EPCFG_reg(hw, epn, epcfg);
    9bb0:	7cfa      	ldrb	r2, [r7, #19]
    9bb2:	7efb      	ldrb	r3, [r7, #27]
    9bb4:	4619      	mov	r1, r3
    9bb6:	69f8      	ldr	r0, [r7, #28]
    9bb8:	4b2f      	ldr	r3, [pc, #188]	; (9c78 <_usb_d_dev_ep_enable+0x200>)
    9bba:	4798      	blx	r3

		bank[1].PCKSIZE.reg
    9bbc:	68fb      	ldr	r3, [r7, #12]
    9bbe:	f103 0410 	add.w	r4, r3, #16
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    9bc2:	697b      	ldr	r3, [r7, #20]
    9bc4:	8a1b      	ldrh	r3, [r3, #16]
    9bc6:	f3c3 050d 	ubfx	r5, r3, #0, #14
    9bca:	697b      	ldr	r3, [r7, #20]
    9bcc:	8a1b      	ldrh	r3, [r3, #16]
    9bce:	4618      	mov	r0, r3
    9bd0:	4b2b      	ldr	r3, [pc, #172]	; (9c80 <_usb_d_dev_ep_enable+0x208>)
    9bd2:	4798      	blx	r3
    9bd4:	4603      	mov	r3, r0
    9bd6:	071b      	lsls	r3, r3, #28
    9bd8:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    9bdc:	432b      	orrs	r3, r5
    9bde:	6063      	str	r3, [r4, #4]

		/* By default, IN endpoint will NAK all token. */
		_usbd_ep_set_in_rdy(epn, 1, false);
    9be0:	7efb      	ldrb	r3, [r7, #27]
    9be2:	2200      	movs	r2, #0
    9be4:	2101      	movs	r1, #1
    9be6:	4618      	mov	r0, r3
    9be8:	4b27      	ldr	r3, [pc, #156]	; (9c88 <_usb_d_dev_ep_enable+0x210>)
    9bea:	4798      	blx	r3
		_usbd_ep_clear_bank_status(epn, 1);
    9bec:	7efb      	ldrb	r3, [r7, #27]
    9bee:	2101      	movs	r1, #1
    9bf0:	4618      	mov	r0, r3
    9bf2:	4b26      	ldr	r3, [pc, #152]	; (9c8c <_usb_d_dev_ep_enable+0x214>)
    9bf4:	4798      	blx	r3
    9bf6:	e033      	b.n	9c60 <_usb_d_dev_ep_enable+0x1e8>

	} else {

		if (epcfg & USB_DEVICE_EPCFG_EPTYPE0_Msk) {
    9bf8:	7cfb      	ldrb	r3, [r7, #19]
    9bfa:	f003 0307 	and.w	r3, r3, #7
    9bfe:	2b00      	cmp	r3, #0
    9c00:	d002      	beq.n	9c08 <_usb_d_dev_ep_enable+0x190>
			return -USB_ERR_REDO;
    9c02:	f06f 0313 	mvn.w	r3, #19
    9c06:	e02c      	b.n	9c62 <_usb_d_dev_ep_enable+0x1ea>
		}
		epcfg |= USB_DEVICE_EPCFG_EPTYPE0(ept->flags.bits.eptype);
    9c08:	697b      	ldr	r3, [r7, #20]
    9c0a:	7cdb      	ldrb	r3, [r3, #19]
    9c0c:	f3c3 0302 	ubfx	r3, r3, #0, #3
    9c10:	b2db      	uxtb	r3, r3
    9c12:	461a      	mov	r2, r3
    9c14:	7cfb      	ldrb	r3, [r7, #19]
    9c16:	4313      	orrs	r3, r2
    9c18:	74fb      	strb	r3, [r7, #19]
		hri_usbendpoint_write_EPCFG_reg(hw, epn, epcfg);
    9c1a:	7cfa      	ldrb	r2, [r7, #19]
    9c1c:	7efb      	ldrb	r3, [r7, #27]
    9c1e:	4619      	mov	r1, r3
    9c20:	69f8      	ldr	r0, [r7, #28]
    9c22:	4b15      	ldr	r3, [pc, #84]	; (9c78 <_usb_d_dev_ep_enable+0x200>)
    9c24:	4798      	blx	r3

		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    9c26:	697b      	ldr	r3, [r7, #20]
    9c28:	8a1b      	ldrh	r3, [r3, #16]
    9c2a:	039b      	lsls	r3, r3, #14
    9c2c:	4c13      	ldr	r4, [pc, #76]	; (9c7c <_usb_d_dev_ep_enable+0x204>)
    9c2e:	401c      	ands	r4, r3
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    9c30:	697b      	ldr	r3, [r7, #20]
    9c32:	8a1b      	ldrh	r3, [r3, #16]
    9c34:	4618      	mov	r0, r3
    9c36:	4b12      	ldr	r3, [pc, #72]	; (9c80 <_usb_d_dev_ep_enable+0x208>)
    9c38:	4798      	blx	r3
    9c3a:	4603      	mov	r3, r0
    9c3c:	071b      	lsls	r3, r3, #28
    9c3e:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    9c42:	ea44 0203 	orr.w	r2, r4, r3
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    9c46:	68fb      	ldr	r3, [r7, #12]
    9c48:	605a      	str	r2, [r3, #4]

		/* By default, OUT endpoint will NAK all token. */
		_usbd_ep_set_out_rdy(epn, 0, false);
    9c4a:	7efb      	ldrb	r3, [r7, #27]
    9c4c:	2200      	movs	r2, #0
    9c4e:	2100      	movs	r1, #0
    9c50:	4618      	mov	r0, r3
    9c52:	4b0c      	ldr	r3, [pc, #48]	; (9c84 <_usb_d_dev_ep_enable+0x20c>)
    9c54:	4798      	blx	r3
		_usbd_ep_clear_bank_status(epn, 0);
    9c56:	7efb      	ldrb	r3, [r7, #27]
    9c58:	2100      	movs	r1, #0
    9c5a:	4618      	mov	r0, r3
    9c5c:	4b0b      	ldr	r3, [pc, #44]	; (9c8c <_usb_d_dev_ep_enable+0x214>)
    9c5e:	4798      	blx	r3
	}

	return USB_OK;
    9c60:	2300      	movs	r3, #0
}
    9c62:	4618      	mov	r0, r3
    9c64:	3720      	adds	r7, #32
    9c66:	46bd      	mov	sp, r7
    9c68:	bdb0      	pop	{r4, r5, r7, pc}
    9c6a:	bf00      	nop
    9c6c:	00008891 	.word	0x00008891
    9c70:	00007f17 	.word	0x00007f17
    9c74:	20000aa8 	.word	0x20000aa8
    9c78:	00007eed 	.word	0x00007eed
    9c7c:	0fffc000 	.word	0x0fffc000
    9c80:	0000882d 	.word	0x0000882d
    9c84:	000087d5 	.word	0x000087d5
    9c88:	0000877d 	.word	0x0000877d
    9c8c:	00008745 	.word	0x00008745
    9c90:	000097e9 	.word	0x000097e9

00009c94 <_usb_d_dev_ep_stall_get>:
 * \return Stall status.
 * \retval \c true Endpoint is stalled.
 * \retval \c false Endpoint is not stalled.
 */
static inline int32_t _usb_d_dev_ep_stall_get(struct _usb_d_dev_ep *ept, bool dir)
{
    9c94:	b580      	push	{r7, lr}
    9c96:	b084      	sub	sp, #16
    9c98:	af00      	add	r7, sp, #0
    9c9a:	6078      	str	r0, [r7, #4]
    9c9c:	460b      	mov	r3, r1
    9c9e:	70fb      	strb	r3, [r7, #3]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    9ca0:	687b      	ldr	r3, [r7, #4]
    9ca2:	7c9b      	ldrb	r3, [r3, #18]
    9ca4:	f003 030f 	and.w	r3, r3, #15
    9ca8:	73fb      	strb	r3, [r7, #15]
	return _usbd_ep_is_stalled(epn, dir);
    9caa:	78fa      	ldrb	r2, [r7, #3]
    9cac:	7bfb      	ldrb	r3, [r7, #15]
    9cae:	4611      	mov	r1, r2
    9cb0:	4618      	mov	r0, r3
    9cb2:	4b03      	ldr	r3, [pc, #12]	; (9cc0 <_usb_d_dev_ep_stall_get+0x2c>)
    9cb4:	4798      	blx	r3
    9cb6:	4603      	mov	r3, r0
}
    9cb8:	4618      	mov	r0, r3
    9cba:	3710      	adds	r7, #16
    9cbc:	46bd      	mov	sp, r7
    9cbe:	bd80      	pop	{r7, pc}
    9cc0:	00008385 	.word	0x00008385

00009cc4 <_usb_d_dev_ep_stall_set>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \return Always 0, success.
 */
static inline int32_t _usb_d_dev_ep_stall_set(struct _usb_d_dev_ep *ept, bool dir)
{
    9cc4:	b580      	push	{r7, lr}
    9cc6:	b084      	sub	sp, #16
    9cc8:	af00      	add	r7, sp, #0
    9cca:	6078      	str	r0, [r7, #4]
    9ccc:	460b      	mov	r3, r1
    9cce:	70fb      	strb	r3, [r7, #3]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    9cd0:	687b      	ldr	r3, [r7, #4]
    9cd2:	7c9b      	ldrb	r3, [r3, #18]
    9cd4:	f003 030f 	and.w	r3, r3, #15
    9cd8:	73fb      	strb	r3, [r7, #15]
	_usbd_ep_set_stall(epn, dir, true);
    9cda:	78f9      	ldrb	r1, [r7, #3]
    9cdc:	7bfb      	ldrb	r3, [r7, #15]
    9cde:	2201      	movs	r2, #1
    9ce0:	4618      	mov	r0, r3
    9ce2:	4b0a      	ldr	r3, [pc, #40]	; (9d0c <_usb_d_dev_ep_stall_set+0x48>)
    9ce4:	4798      	blx	r3
	_usbd_ep_int_en(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    9ce6:	78fb      	ldrb	r3, [r7, #3]
    9ce8:	2220      	movs	r2, #32
    9cea:	409a      	lsls	r2, r3
    9cec:	7bfb      	ldrb	r3, [r7, #15]
    9cee:	4611      	mov	r1, r2
    9cf0:	4618      	mov	r0, r3
    9cf2:	4b07      	ldr	r3, [pc, #28]	; (9d10 <_usb_d_dev_ep_stall_set+0x4c>)
    9cf4:	4798      	blx	r3
	ept->flags.bits.is_stalled = 1;
    9cf6:	687a      	ldr	r2, [r7, #4]
    9cf8:	7cd3      	ldrb	r3, [r2, #19]
    9cfa:	f043 0308 	orr.w	r3, r3, #8
    9cfe:	74d3      	strb	r3, [r2, #19]
	/* In stall interrupt abort the transfer. */
	return ERR_NONE;
    9d00:	2300      	movs	r3, #0
}
    9d02:	4618      	mov	r0, r3
    9d04:	3710      	adds	r7, #16
    9d06:	46bd      	mov	sp, r7
    9d08:	bd80      	pop	{r7, pc}
    9d0a:	bf00      	nop
    9d0c:	0000832d 	.word	0x0000832d
    9d10:	000082ad 	.word	0x000082ad

00009d14 <_usb_d_dev_ep_stall_clr>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \return Always 0, success.
 */
static inline int32_t _usb_d_dev_ep_stall_clr(struct _usb_d_dev_ep *ept, bool dir)
{
    9d14:	b580      	push	{r7, lr}
    9d16:	b084      	sub	sp, #16
    9d18:	af00      	add	r7, sp, #0
    9d1a:	6078      	str	r0, [r7, #4]
    9d1c:	460b      	mov	r3, r1
    9d1e:	70fb      	strb	r3, [r7, #3]
	uint8_t epn        = USB_EP_GET_N(ept->ep);
    9d20:	687b      	ldr	r3, [r7, #4]
    9d22:	7c9b      	ldrb	r3, [r3, #18]
    9d24:	f003 030f 	and.w	r3, r3, #15
    9d28:	73fb      	strb	r3, [r7, #15]
	bool    is_stalled = _usbd_ep_is_stalled(epn, dir);
    9d2a:	78fa      	ldrb	r2, [r7, #3]
    9d2c:	7bfb      	ldrb	r3, [r7, #15]
    9d2e:	4611      	mov	r1, r2
    9d30:	4618      	mov	r0, r3
    9d32:	4b28      	ldr	r3, [pc, #160]	; (9dd4 <_usb_d_dev_ep_stall_clr+0xc0>)
    9d34:	4798      	blx	r3
    9d36:	4603      	mov	r3, r0
    9d38:	73bb      	strb	r3, [r7, #14]
	if (!is_stalled) {
    9d3a:	7bbb      	ldrb	r3, [r7, #14]
    9d3c:	f083 0301 	eor.w	r3, r3, #1
    9d40:	b2db      	uxtb	r3, r3
    9d42:	2b00      	cmp	r3, #0
    9d44:	d001      	beq.n	9d4a <_usb_d_dev_ep_stall_clr+0x36>
		return ERR_NONE;
    9d46:	2300      	movs	r3, #0
    9d48:	e040      	b.n	9dcc <_usb_d_dev_ep_stall_clr+0xb8>
	}
	_usbd_ep_set_stall(epn, dir, false);
    9d4a:	78f9      	ldrb	r1, [r7, #3]
    9d4c:	7bfb      	ldrb	r3, [r7, #15]
    9d4e:	2200      	movs	r2, #0
    9d50:	4618      	mov	r0, r3
    9d52:	4b21      	ldr	r3, [pc, #132]	; (9dd8 <_usb_d_dev_ep_stall_clr+0xc4>)
    9d54:	4798      	blx	r3
	_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    9d56:	78fb      	ldrb	r3, [r7, #3]
    9d58:	2220      	movs	r2, #32
    9d5a:	409a      	lsls	r2, r3
    9d5c:	7bfb      	ldrb	r3, [r7, #15]
    9d5e:	4611      	mov	r1, r2
    9d60:	4618      	mov	r0, r3
    9d62:	4b1e      	ldr	r3, [pc, #120]	; (9ddc <_usb_d_dev_ep_stall_clr+0xc8>)
    9d64:	4798      	blx	r3
	if (_usbd_ep_is_stall_sent(epn, dir)) {
    9d66:	78fa      	ldrb	r2, [r7, #3]
    9d68:	7bfb      	ldrb	r3, [r7, #15]
    9d6a:	4611      	mov	r1, r2
    9d6c:	4618      	mov	r0, r3
    9d6e:	4b1c      	ldr	r3, [pc, #112]	; (9de0 <_usb_d_dev_ep_stall_clr+0xcc>)
    9d70:	4798      	blx	r3
    9d72:	4603      	mov	r3, r0
    9d74:	2b00      	cmp	r3, #0
    9d76:	d00b      	beq.n	9d90 <_usb_d_dev_ep_stall_clr+0x7c>
		_usbd_ep_ack_stall(epn, dir);
    9d78:	78fa      	ldrb	r2, [r7, #3]
    9d7a:	7bfb      	ldrb	r3, [r7, #15]
    9d7c:	4611      	mov	r1, r2
    9d7e:	4618      	mov	r0, r3
    9d80:	4b18      	ldr	r3, [pc, #96]	; (9de4 <_usb_d_dev_ep_stall_clr+0xd0>)
    9d82:	4798      	blx	r3
		_usbd_ep_set_toggle(epn, dir, 0);
    9d84:	78f9      	ldrb	r1, [r7, #3]
    9d86:	7bfb      	ldrb	r3, [r7, #15]
    9d88:	2200      	movs	r2, #0
    9d8a:	4618      	mov	r0, r3
    9d8c:	4b16      	ldr	r3, [pc, #88]	; (9de8 <_usb_d_dev_ep_stall_clr+0xd4>)
    9d8e:	4798      	blx	r3
	}
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    9d90:	687b      	ldr	r3, [r7, #4]
    9d92:	7cdb      	ldrb	r3, [r3, #19]
    9d94:	f003 0307 	and.w	r3, r3, #7
    9d98:	b2db      	uxtb	r3, r3
    9d9a:	2b01      	cmp	r3, #1
    9d9c:	d110      	bne.n	9dc0 <_usb_d_dev_ep_stall_clr+0xac>
		if ((hri_usbendpoint_read_EPSTATUS_reg(USB, epn) & USB_DEVICE_EPSTATUS_STALLRQ_Msk) == 0) {
    9d9e:	7bfb      	ldrb	r3, [r7, #15]
    9da0:	4619      	mov	r1, r3
    9da2:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9da6:	4b11      	ldr	r3, [pc, #68]	; (9dec <_usb_d_dev_ep_stall_clr+0xd8>)
    9da8:	4798      	blx	r3
    9daa:	4603      	mov	r3, r0
    9dac:	f003 0330 	and.w	r3, r3, #48	; 0x30
    9db0:	2b00      	cmp	r3, #0
    9db2:	d10a      	bne.n	9dca <_usb_d_dev_ep_stall_clr+0xb6>
			ept->flags.bits.is_stalled = 0;
    9db4:	687a      	ldr	r2, [r7, #4]
    9db6:	7cd3      	ldrb	r3, [r2, #19]
    9db8:	f36f 03c3 	bfc	r3, #3, #1
    9dbc:	74d3      	strb	r3, [r2, #19]
    9dbe:	e004      	b.n	9dca <_usb_d_dev_ep_stall_clr+0xb6>
		}
	} else {
		ept->flags.bits.is_stalled = 0;
    9dc0:	687a      	ldr	r2, [r7, #4]
    9dc2:	7cd3      	ldrb	r3, [r2, #19]
    9dc4:	f36f 03c3 	bfc	r3, #3, #1
    9dc8:	74d3      	strb	r3, [r2, #19]
	}
	return ERR_NONE;
    9dca:	2300      	movs	r3, #0
}
    9dcc:	4618      	mov	r0, r3
    9dce:	3710      	adds	r7, #16
    9dd0:	46bd      	mov	sp, r7
    9dd2:	bd80      	pop	{r7, pc}
    9dd4:	00008385 	.word	0x00008385
    9dd8:	0000832d 	.word	0x0000832d
    9ddc:	000082d5 	.word	0x000082d5
    9de0:	000083c9 	.word	0x000083c9
    9de4:	0000840d 	.word	0x0000840d
    9de8:	000084f9 	.word	0x000084f9
    9dec:	00007db5 	.word	0x00007db5

00009df0 <_usb_d_dev_ep_stall>:

int32_t _usb_d_dev_ep_stall(const uint8_t ep, const enum usb_ep_stall_ctrl ctrl)
{
    9df0:	b580      	push	{r7, lr}
    9df2:	b086      	sub	sp, #24
    9df4:	af00      	add	r7, sp, #0
    9df6:	4603      	mov	r3, r0
    9df8:	460a      	mov	r2, r1
    9dfa:	71fb      	strb	r3, [r7, #7]
    9dfc:	4613      	mov	r3, r2
    9dfe:	71bb      	strb	r3, [r7, #6]
	uint8_t               epn = USB_EP_GET_N(ep);
    9e00:	79fb      	ldrb	r3, [r7, #7]
    9e02:	f003 030f 	and.w	r3, r3, #15
    9e06:	74fb      	strb	r3, [r7, #19]
	bool                  dir = USB_EP_GET_DIR(ep);
    9e08:	79fb      	ldrb	r3, [r7, #7]
    9e0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
    9e0e:	2b00      	cmp	r3, #0
    9e10:	bf14      	ite	ne
    9e12:	2301      	movne	r3, #1
    9e14:	2300      	moveq	r3, #0
    9e16:	74bb      	strb	r3, [r7, #18]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    9e18:	7cba      	ldrb	r2, [r7, #18]
    9e1a:	7cfb      	ldrb	r3, [r7, #19]
    9e1c:	4611      	mov	r1, r2
    9e1e:	4618      	mov	r0, r3
    9e20:	4b13      	ldr	r3, [pc, #76]	; (9e70 <_usb_d_dev_ep_stall+0x80>)
    9e22:	4798      	blx	r3
    9e24:	60f8      	str	r0, [r7, #12]
	int32_t               rc;

	if (epn > CONF_USB_D_MAX_EP_N) {
    9e26:	7cfb      	ldrb	r3, [r7, #19]
    9e28:	2b04      	cmp	r3, #4
    9e2a:	d902      	bls.n	9e32 <_usb_d_dev_ep_stall+0x42>
		return -USB_ERR_PARAM;
    9e2c:	f06f 0311 	mvn.w	r3, #17
    9e30:	e01a      	b.n	9e68 <_usb_d_dev_ep_stall+0x78>
	}

	if (USB_EP_STALL_SET == ctrl) {
    9e32:	79bb      	ldrb	r3, [r7, #6]
    9e34:	2b01      	cmp	r3, #1
    9e36:	d106      	bne.n	9e46 <_usb_d_dev_ep_stall+0x56>
		rc = _usb_d_dev_ep_stall_set(ept, dir);
    9e38:	7cbb      	ldrb	r3, [r7, #18]
    9e3a:	4619      	mov	r1, r3
    9e3c:	68f8      	ldr	r0, [r7, #12]
    9e3e:	4b0d      	ldr	r3, [pc, #52]	; (9e74 <_usb_d_dev_ep_stall+0x84>)
    9e40:	4798      	blx	r3
    9e42:	6178      	str	r0, [r7, #20]
    9e44:	e00f      	b.n	9e66 <_usb_d_dev_ep_stall+0x76>
	} else if (USB_EP_STALL_CLR == ctrl) {
    9e46:	79bb      	ldrb	r3, [r7, #6]
    9e48:	2b00      	cmp	r3, #0
    9e4a:	d106      	bne.n	9e5a <_usb_d_dev_ep_stall+0x6a>
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
    9e4c:	7cbb      	ldrb	r3, [r7, #18]
    9e4e:	4619      	mov	r1, r3
    9e50:	68f8      	ldr	r0, [r7, #12]
    9e52:	4b09      	ldr	r3, [pc, #36]	; (9e78 <_usb_d_dev_ep_stall+0x88>)
    9e54:	4798      	blx	r3
    9e56:	6178      	str	r0, [r7, #20]
    9e58:	e005      	b.n	9e66 <_usb_d_dev_ep_stall+0x76>
	} else {
		rc = _usb_d_dev_ep_stall_get(ept, dir);
    9e5a:	7cbb      	ldrb	r3, [r7, #18]
    9e5c:	4619      	mov	r1, r3
    9e5e:	68f8      	ldr	r0, [r7, #12]
    9e60:	4b06      	ldr	r3, [pc, #24]	; (9e7c <_usb_d_dev_ep_stall+0x8c>)
    9e62:	4798      	blx	r3
    9e64:	6178      	str	r0, [r7, #20]
	}
	return rc;
    9e66:	697b      	ldr	r3, [r7, #20]
}
    9e68:	4618      	mov	r0, r3
    9e6a:	3718      	adds	r7, #24
    9e6c:	46bd      	mov	sp, r7
    9e6e:	bd80      	pop	{r7, pc}
    9e70:	00008891 	.word	0x00008891
    9e74:	00009cc5 	.word	0x00009cc5
    9e78:	00009d15 	.word	0x00009d15
    9e7c:	00009c95 	.word	0x00009c95

00009e80 <_usb_d_dev_trans_done>:
 *  \brief Finish the transaction and invoke callback
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_done(struct _usb_d_dev_ep *ept, const int32_t code)
{
    9e80:	b580      	push	{r7, lr}
    9e82:	b082      	sub	sp, #8
    9e84:	af00      	add	r7, sp, #0
    9e86:	6078      	str	r0, [r7, #4]
    9e88:	6039      	str	r1, [r7, #0]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    9e8a:	687b      	ldr	r3, [r7, #4]
    9e8c:	7c9b      	ldrb	r3, [r3, #18]
    9e8e:	2bff      	cmp	r3, #255	; 0xff
    9e90:	d014      	beq.n	9ebc <_usb_d_dev_trans_done+0x3c>
    9e92:	687b      	ldr	r3, [r7, #4]
    9e94:	7cdb      	ldrb	r3, [r3, #19]
    9e96:	f003 0340 	and.w	r3, r3, #64	; 0x40
    9e9a:	b2db      	uxtb	r3, r3
    9e9c:	2b00      	cmp	r3, #0
    9e9e:	d00d      	beq.n	9ebc <_usb_d_dev_trans_done+0x3c>
		return;
	}
	ept->flags.bits.is_busy = 0;
    9ea0:	687a      	ldr	r2, [r7, #4]
    9ea2:	7cd3      	ldrb	r3, [r2, #19]
    9ea4:	f36f 1386 	bfc	r3, #6, #1
    9ea8:	74d3      	strb	r3, [r2, #19]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
    9eaa:	4b06      	ldr	r3, [pc, #24]	; (9ec4 <_usb_d_dev_trans_done+0x44>)
    9eac:	691b      	ldr	r3, [r3, #16]
    9eae:	687a      	ldr	r2, [r7, #4]
    9eb0:	7c90      	ldrb	r0, [r2, #18]
    9eb2:	687a      	ldr	r2, [r7, #4]
    9eb4:	6892      	ldr	r2, [r2, #8]
    9eb6:	6839      	ldr	r1, [r7, #0]
    9eb8:	4798      	blx	r3
    9eba:	e000      	b.n	9ebe <_usb_d_dev_trans_done+0x3e>
		return;
    9ebc:	bf00      	nop
}
    9ebe:	3708      	adds	r7, #8
    9ec0:	46bd      	mov	sp, r7
    9ec2:	bd80      	pop	{r7, pc}
    9ec4:	200009e0 	.word	0x200009e0

00009ec8 <_usb_d_dev_trans_stop>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_stop(struct _usb_d_dev_ep *ept, bool dir, const int32_t code)
{
    9ec8:	b580      	push	{r7, lr}
    9eca:	b086      	sub	sp, #24
    9ecc:	af00      	add	r7, sp, #0
    9ece:	60f8      	str	r0, [r7, #12]
    9ed0:	460b      	mov	r3, r1
    9ed2:	607a      	str	r2, [r7, #4]
    9ed4:	72fb      	strb	r3, [r7, #11]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    9ed6:	68fb      	ldr	r3, [r7, #12]
    9ed8:	7c9b      	ldrb	r3, [r3, #18]
    9eda:	f003 030f 	and.w	r3, r3, #15
    9ede:	75fb      	strb	r3, [r7, #23]
	;
	const uint8_t intflags[2] = {USB_D_BANK0_INT_FLAGS, USB_D_BANK1_INT_FLAGS};
    9ee0:	4b1f      	ldr	r3, [pc, #124]	; (9f60 <_usb_d_dev_trans_stop+0x98>)
    9ee2:	881b      	ldrh	r3, [r3, #0]
    9ee4:	82bb      	strh	r3, [r7, #20]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    9ee6:	68fb      	ldr	r3, [r7, #12]
    9ee8:	7c9b      	ldrb	r3, [r3, #18]
    9eea:	2bff      	cmp	r3, #255	; 0xff
    9eec:	d033      	beq.n	9f56 <_usb_d_dev_trans_stop+0x8e>
    9eee:	68fb      	ldr	r3, [r7, #12]
    9ef0:	7cdb      	ldrb	r3, [r3, #19]
    9ef2:	f003 0340 	and.w	r3, r3, #64	; 0x40
    9ef6:	b2db      	uxtb	r3, r3
    9ef8:	2b00      	cmp	r3, #0
    9efa:	d02c      	beq.n	9f56 <_usb_d_dev_trans_stop+0x8e>
		return;
	}
	/* Stop transfer */
	if (dir) {
    9efc:	7afb      	ldrb	r3, [r7, #11]
    9efe:	2b00      	cmp	r3, #0
    9f00:	d006      	beq.n	9f10 <_usb_d_dev_trans_stop+0x48>
		/* NAK IN */
		_usbd_ep_set_in_rdy(epn, 1, false);
    9f02:	7dfb      	ldrb	r3, [r7, #23]
    9f04:	2200      	movs	r2, #0
    9f06:	2101      	movs	r1, #1
    9f08:	4618      	mov	r0, r3
    9f0a:	4b16      	ldr	r3, [pc, #88]	; (9f64 <_usb_d_dev_trans_stop+0x9c>)
    9f0c:	4798      	blx	r3
    9f0e:	e005      	b.n	9f1c <_usb_d_dev_trans_stop+0x54>
	} else {
		/* NAK OUT */
		_usbd_ep_set_out_rdy(epn, 0, false);
    9f10:	7dfb      	ldrb	r3, [r7, #23]
    9f12:	2200      	movs	r2, #0
    9f14:	2100      	movs	r1, #0
    9f16:	4618      	mov	r0, r3
    9f18:	4b13      	ldr	r3, [pc, #76]	; (9f68 <_usb_d_dev_trans_stop+0xa0>)
    9f1a:	4798      	blx	r3
	}
	_usbd_ep_int_ack(epn, intflags[dir]);
    9f1c:	7afb      	ldrb	r3, [r7, #11]
    9f1e:	f107 0218 	add.w	r2, r7, #24
    9f22:	4413      	add	r3, r2
    9f24:	f813 3c04 	ldrb.w	r3, [r3, #-4]
    9f28:	461a      	mov	r2, r3
    9f2a:	7dfb      	ldrb	r3, [r7, #23]
    9f2c:	4611      	mov	r1, r2
    9f2e:	4618      	mov	r0, r3
    9f30:	4b0e      	ldr	r3, [pc, #56]	; (9f6c <_usb_d_dev_trans_stop+0xa4>)
    9f32:	4798      	blx	r3
	_usbd_ep_int_dis(epn, intflags[dir]);
    9f34:	7afb      	ldrb	r3, [r7, #11]
    9f36:	f107 0218 	add.w	r2, r7, #24
    9f3a:	4413      	add	r3, r2
    9f3c:	f813 3c04 	ldrb.w	r3, [r3, #-4]
    9f40:	461a      	mov	r2, r3
    9f42:	7dfb      	ldrb	r3, [r7, #23]
    9f44:	4611      	mov	r1, r2
    9f46:	4618      	mov	r0, r3
    9f48:	4b09      	ldr	r3, [pc, #36]	; (9f70 <_usb_d_dev_trans_stop+0xa8>)
    9f4a:	4798      	blx	r3
	_usb_d_dev_trans_done(ept, code);
    9f4c:	6879      	ldr	r1, [r7, #4]
    9f4e:	68f8      	ldr	r0, [r7, #12]
    9f50:	4b08      	ldr	r3, [pc, #32]	; (9f74 <_usb_d_dev_trans_stop+0xac>)
    9f52:	4798      	blx	r3
    9f54:	e000      	b.n	9f58 <_usb_d_dev_trans_stop+0x90>
		return;
    9f56:	bf00      	nop
}
    9f58:	3718      	adds	r7, #24
    9f5a:	46bd      	mov	sp, r7
    9f5c:	bd80      	pop	{r7, pc}
    9f5e:	bf00      	nop
    9f60:	0000cf10 	.word	0x0000cf10
    9f64:	0000877d 	.word	0x0000877d
    9f68:	000087d5 	.word	0x000087d5
    9f6c:	00008285 	.word	0x00008285
    9f70:	000082d5 	.word	0x000082d5
    9f74:	00009e81 	.word	0x00009e81

00009f78 <_usb_d_dev_ep_read_req>:

int32_t _usb_d_dev_ep_read_req(const uint8_t ep, uint8_t *req_buf)
{
    9f78:	b580      	push	{r7, lr}
    9f7a:	b086      	sub	sp, #24
    9f7c:	af00      	add	r7, sp, #0
    9f7e:	4603      	mov	r3, r0
    9f80:	6039      	str	r1, [r7, #0]
    9f82:	71fb      	strb	r3, [r7, #7]
	uint8_t            epn   = USB_EP_GET_N(ep);
    9f84:	79fb      	ldrb	r3, [r7, #7]
    9f86:	f003 030f 	and.w	r3, r3, #15
    9f8a:	75fb      	strb	r3, [r7, #23]
	UsbDeviceDescBank *bank  = prvt_inst.desc_table[epn].DeviceDescBank;
    9f8c:	7dfb      	ldrb	r3, [r7, #23]
    9f8e:	015b      	lsls	r3, r3, #5
    9f90:	4a1e      	ldr	r2, [pc, #120]	; (a00c <_usb_d_dev_ep_read_req+0x94>)
    9f92:	4413      	add	r3, r2
    9f94:	613b      	str	r3, [r7, #16]
	uint32_t           addr  = bank[0].ADDR.reg;
    9f96:	693b      	ldr	r3, [r7, #16]
    9f98:	681b      	ldr	r3, [r3, #0]
    9f9a:	60fb      	str	r3, [r7, #12]
	uint16_t           bytes = bank[0].PCKSIZE.bit.BYTE_COUNT;
    9f9c:	693b      	ldr	r3, [r7, #16]
    9f9e:	685b      	ldr	r3, [r3, #4]
    9fa0:	f3c3 030d 	ubfx	r3, r3, #0, #14
    9fa4:	b29b      	uxth	r3, r3
    9fa6:	817b      	strh	r3, [r7, #10]

	if (epn > CONF_USB_D_MAX_EP_N || !req_buf) {
    9fa8:	7dfb      	ldrb	r3, [r7, #23]
    9faa:	2b04      	cmp	r3, #4
    9fac:	d802      	bhi.n	9fb4 <_usb_d_dev_ep_read_req+0x3c>
    9fae:	683b      	ldr	r3, [r7, #0]
    9fb0:	2b00      	cmp	r3, #0
    9fb2:	d102      	bne.n	9fba <_usb_d_dev_ep_read_req+0x42>
		return -USB_ERR_PARAM;
    9fb4:	f06f 0311 	mvn.w	r3, #17
    9fb8:	e023      	b.n	a002 <_usb_d_dev_ep_read_req+0x8a>
	}
	if (!_usbd_ep_is_ctrl(epn)) {
    9fba:	7dfb      	ldrb	r3, [r7, #23]
    9fbc:	4618      	mov	r0, r3
    9fbe:	4b14      	ldr	r3, [pc, #80]	; (a010 <_usb_d_dev_ep_read_req+0x98>)
    9fc0:	4798      	blx	r3
    9fc2:	4603      	mov	r3, r0
    9fc4:	f083 0301 	eor.w	r3, r3, #1
    9fc8:	b2db      	uxtb	r3, r3
    9fca:	2b00      	cmp	r3, #0
    9fcc:	d002      	beq.n	9fd4 <_usb_d_dev_ep_read_req+0x5c>
		return -USB_ERR_FUNC;
    9fce:	f06f 0312 	mvn.w	r3, #18
    9fd2:	e016      	b.n	a002 <_usb_d_dev_ep_read_req+0x8a>
	}
	if (!_usbd_ep_is_setup(epn)) {
    9fd4:	7dfb      	ldrb	r3, [r7, #23]
    9fd6:	4618      	mov	r0, r3
    9fd8:	4b0e      	ldr	r3, [pc, #56]	; (a014 <_usb_d_dev_ep_read_req+0x9c>)
    9fda:	4798      	blx	r3
    9fdc:	4603      	mov	r3, r0
    9fde:	f083 0301 	eor.w	r3, r3, #1
    9fe2:	b2db      	uxtb	r3, r3
    9fe4:	2b00      	cmp	r3, #0
    9fe6:	d001      	beq.n	9fec <_usb_d_dev_ep_read_req+0x74>
		return ERR_NONE;
    9fe8:	2300      	movs	r3, #0
    9fea:	e00a      	b.n	a002 <_usb_d_dev_ep_read_req+0x8a>
	}
	memcpy(req_buf, (void *)addr, 8);
    9fec:	68fb      	ldr	r3, [r7, #12]
    9fee:	2208      	movs	r2, #8
    9ff0:	4619      	mov	r1, r3
    9ff2:	6838      	ldr	r0, [r7, #0]
    9ff4:	4b08      	ldr	r3, [pc, #32]	; (a018 <_usb_d_dev_ep_read_req+0xa0>)
    9ff6:	4798      	blx	r3
	_usbd_ep_ack_setup(epn);
    9ff8:	7dfb      	ldrb	r3, [r7, #23]
    9ffa:	4618      	mov	r0, r3
    9ffc:	4b07      	ldr	r3, [pc, #28]	; (a01c <_usb_d_dev_ep_read_req+0xa4>)
    9ffe:	4798      	blx	r3

	return bytes;
    a000:	897b      	ldrh	r3, [r7, #10]
}
    a002:	4618      	mov	r0, r3
    a004:	3718      	adds	r7, #24
    a006:	46bd      	mov	sp, r7
    a008:	bd80      	pop	{r7, pc}
    a00a:	bf00      	nop
    a00c:	20000aa8 	.word	0x20000aa8
    a010:	000082fd 	.word	0x000082fd
    a014:	000084a9 	.word	0x000084a9
    a018:	0000c7a5 	.word	0x0000c7a5
    a01c:	000084d9 	.word	0x000084d9

0000a020 <_usb_d_dev_ep_trans>:

int32_t _usb_d_dev_ep_trans(const struct usb_d_transfer *trans)
{
    a020:	b580      	push	{r7, lr}
    a022:	b086      	sub	sp, #24
    a024:	af00      	add	r7, sp, #0
    a026:	6078      	str	r0, [r7, #4]
	uint8_t               epn = USB_EP_GET_N(trans->ep);
    a028:	687b      	ldr	r3, [r7, #4]
    a02a:	7a1b      	ldrb	r3, [r3, #8]
    a02c:	f003 030f 	and.w	r3, r3, #15
    a030:	75bb      	strb	r3, [r7, #22]
	bool                  dir = USB_EP_GET_DIR(trans->ep);
    a032:	687b      	ldr	r3, [r7, #4]
    a034:	7a1b      	ldrb	r3, [r3, #8]
    a036:	f003 0380 	and.w	r3, r3, #128	; 0x80
    a03a:	2b00      	cmp	r3, #0
    a03c:	bf14      	ite	ne
    a03e:	2301      	movne	r3, #1
    a040:	2300      	moveq	r3, #0
    a042:	757b      	strb	r3, [r7, #21]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    a044:	7d7a      	ldrb	r2, [r7, #21]
    a046:	7dbb      	ldrb	r3, [r7, #22]
    a048:	4611      	mov	r1, r2
    a04a:	4618      	mov	r0, r3
    a04c:	4b5f      	ldr	r3, [pc, #380]	; (a1cc <_usb_d_dev_ep_trans+0x1ac>)
    a04e:	4798      	blx	r3
    a050:	6138      	str	r0, [r7, #16]

	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    a052:	693b      	ldr	r3, [r7, #16]
    a054:	8a1b      	ldrh	r3, [r3, #16]
    a056:	f240 32ff 	movw	r2, #1023	; 0x3ff
    a05a:	4293      	cmp	r3, r2
    a05c:	d004      	beq.n	a068 <_usb_d_dev_ep_trans+0x48>
    a05e:	693b      	ldr	r3, [r7, #16]
    a060:	8a1b      	ldrh	r3, [r3, #16]
    a062:	3b01      	subs	r3, #1
    a064:	b29b      	uxth	r3, r3
    a066:	e001      	b.n	a06c <_usb_d_dev_ep_trans+0x4c>
    a068:	f240 33ff 	movw	r3, #1023	; 0x3ff
    a06c:	81fb      	strh	r3, [r7, #14]
	bool     size_n_aligned = (trans->size & size_mask);
    a06e:	687b      	ldr	r3, [r7, #4]
    a070:	685a      	ldr	r2, [r3, #4]
    a072:	89fb      	ldrh	r3, [r7, #14]
    a074:	4013      	ands	r3, r2
    a076:	2b00      	cmp	r3, #0
    a078:	bf14      	ite	ne
    a07a:	2301      	movne	r3, #1
    a07c:	2300      	moveq	r3, #0
    a07e:	737b      	strb	r3, [r7, #13]

	bool use_cache = false;
    a080:	2300      	movs	r3, #0
    a082:	75fb      	strb	r3, [r7, #23]

	volatile hal_atomic_t flags;

	if (epn > CONF_USB_D_MAX_EP_N) {
    a084:	7dbb      	ldrb	r3, [r7, #22]
    a086:	2b04      	cmp	r3, #4
    a088:	d902      	bls.n	a090 <_usb_d_dev_ep_trans+0x70>
		return -USB_ERR_PARAM;
    a08a:	f06f 0311 	mvn.w	r3, #17
    a08e:	e098      	b.n	a1c2 <_usb_d_dev_ep_trans+0x1a2>
	 * 1. Buffer not in RAM (cache all).
	 * 2. IN/OUT with unaligned buffer (cache all).
	 * 3. OUT with unaligned packet size (cache last packet).
	 * 4. OUT size < 8 (sub-case for 3).
	 */
	if (!_usb_is_addr4dma(trans->buf, trans->size) || (!_usb_is_aligned(trans->buf))
    a090:	687b      	ldr	r3, [r7, #4]
    a092:	681b      	ldr	r3, [r3, #0]
    a094:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
    a098:	d31a      	bcc.n	a0d0 <_usb_d_dev_ep_trans+0xb0>
    a09a:	687b      	ldr	r3, [r7, #4]
    a09c:	681b      	ldr	r3, [r3, #0]
    a09e:	461a      	mov	r2, r3
    a0a0:	687b      	ldr	r3, [r7, #4]
    a0a2:	685b      	ldr	r3, [r3, #4]
    a0a4:	4413      	add	r3, r2
    a0a6:	4a4a      	ldr	r2, [pc, #296]	; (a1d0 <_usb_d_dev_ep_trans+0x1b0>)
    a0a8:	4293      	cmp	r3, r2
    a0aa:	d811      	bhi.n	a0d0 <_usb_d_dev_ep_trans+0xb0>
    a0ac:	687b      	ldr	r3, [r7, #4]
    a0ae:	681b      	ldr	r3, [r3, #0]
    a0b0:	f003 0303 	and.w	r3, r3, #3
    a0b4:	2b00      	cmp	r3, #0
    a0b6:	d10b      	bne.n	a0d0 <_usb_d_dev_ep_trans+0xb0>
	    || (!dir && (trans->size < ept->size))) {
    a0b8:	7d7b      	ldrb	r3, [r7, #21]
    a0ba:	f083 0301 	eor.w	r3, r3, #1
    a0be:	b2db      	uxtb	r3, r3
    a0c0:	2b00      	cmp	r3, #0
    a0c2:	d00e      	beq.n	a0e2 <_usb_d_dev_ep_trans+0xc2>
    a0c4:	687b      	ldr	r3, [r7, #4]
    a0c6:	685b      	ldr	r3, [r3, #4]
    a0c8:	693a      	ldr	r2, [r7, #16]
    a0ca:	8a12      	ldrh	r2, [r2, #16]
    a0cc:	4293      	cmp	r3, r2
    a0ce:	d208      	bcs.n	a0e2 <_usb_d_dev_ep_trans+0xc2>
		if (!ept->cache) {
    a0d0:	693b      	ldr	r3, [r7, #16]
    a0d2:	68db      	ldr	r3, [r3, #12]
    a0d4:	2b00      	cmp	r3, #0
    a0d6:	d102      	bne.n	a0de <_usb_d_dev_ep_trans+0xbe>
			return -USB_ERR_FUNC;
    a0d8:	f06f 0312 	mvn.w	r3, #18
    a0dc:	e071      	b.n	a1c2 <_usb_d_dev_ep_trans+0x1a2>
		}
		/* Use cache all the time. */
		use_cache = true;
    a0de:	2301      	movs	r3, #1
    a0e0:	75fb      	strb	r3, [r7, #23]
	}
	if (!dir && size_n_aligned) {
    a0e2:	7d7b      	ldrb	r3, [r7, #21]
    a0e4:	f083 0301 	eor.w	r3, r3, #1
    a0e8:	b2db      	uxtb	r3, r3
    a0ea:	2b00      	cmp	r3, #0
    a0ec:	d009      	beq.n	a102 <_usb_d_dev_ep_trans+0xe2>
    a0ee:	7b7b      	ldrb	r3, [r7, #13]
    a0f0:	2b00      	cmp	r3, #0
    a0f2:	d006      	beq.n	a102 <_usb_d_dev_ep_trans+0xe2>
		if (!ept->cache) {
    a0f4:	693b      	ldr	r3, [r7, #16]
    a0f6:	68db      	ldr	r3, [r3, #12]
    a0f8:	2b00      	cmp	r3, #0
    a0fa:	d102      	bne.n	a102 <_usb_d_dev_ep_trans+0xe2>
			return -USB_ERR_PARAM;
    a0fc:	f06f 0311 	mvn.w	r3, #17
    a100:	e05f      	b.n	a1c2 <_usb_d_dev_ep_trans+0x1a2>
		}
		/* Set 'use_cache' on last packet. */
	}

	/* Check halt */
	if (ept->flags.bits.is_stalled) {
    a102:	693b      	ldr	r3, [r7, #16]
    a104:	7cdb      	ldrb	r3, [r3, #19]
    a106:	f003 0308 	and.w	r3, r3, #8
    a10a:	b2db      	uxtb	r3, r3
    a10c:	2b00      	cmp	r3, #0
    a10e:	d001      	beq.n	a114 <_usb_d_dev_ep_trans+0xf4>
		return USB_HALTED;
    a110:	2302      	movs	r3, #2
    a112:	e056      	b.n	a1c2 <_usb_d_dev_ep_trans+0x1a2>
	}

	/* Try to start transactions. */

	atomic_enter_critical(&flags);
    a114:	f107 0308 	add.w	r3, r7, #8
    a118:	4618      	mov	r0, r3
    a11a:	4b2e      	ldr	r3, [pc, #184]	; (a1d4 <_usb_d_dev_ep_trans+0x1b4>)
    a11c:	4798      	blx	r3
	if (_usb_d_dev_ep_is_busy(ept)) {
    a11e:	693b      	ldr	r3, [r7, #16]
    a120:	7cdb      	ldrb	r3, [r3, #19]
    a122:	f003 0340 	and.w	r3, r3, #64	; 0x40
    a126:	b2db      	uxtb	r3, r3
    a128:	2b00      	cmp	r3, #0
    a12a:	d006      	beq.n	a13a <_usb_d_dev_ep_trans+0x11a>
		atomic_leave_critical(&flags);
    a12c:	f107 0308 	add.w	r3, r7, #8
    a130:	4618      	mov	r0, r3
    a132:	4b29      	ldr	r3, [pc, #164]	; (a1d8 <_usb_d_dev_ep_trans+0x1b8>)
    a134:	4798      	blx	r3
		return USB_BUSY;
    a136:	2301      	movs	r3, #1
    a138:	e043      	b.n	a1c2 <_usb_d_dev_ep_trans+0x1a2>
	}
	ept->flags.bits.is_busy = 1;
    a13a:	693a      	ldr	r2, [r7, #16]
    a13c:	7cd3      	ldrb	r3, [r2, #19]
    a13e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    a142:	74d3      	strb	r3, [r2, #19]
	atomic_leave_critical(&flags);
    a144:	f107 0308 	add.w	r3, r7, #8
    a148:	4618      	mov	r0, r3
    a14a:	4b23      	ldr	r3, [pc, #140]	; (a1d8 <_usb_d_dev_ep_trans+0x1b8>)
    a14c:	4798      	blx	r3

	/* Copy transaction information. */
	ept->trans_buf   = trans->buf;
    a14e:	687b      	ldr	r3, [r7, #4]
    a150:	681a      	ldr	r2, [r3, #0]
    a152:	693b      	ldr	r3, [r7, #16]
    a154:	601a      	str	r2, [r3, #0]
	ept->trans_size  = trans->size;
    a156:	687b      	ldr	r3, [r7, #4]
    a158:	685a      	ldr	r2, [r3, #4]
    a15a:	693b      	ldr	r3, [r7, #16]
    a15c:	605a      	str	r2, [r3, #4]
	ept->trans_count = 0;
    a15e:	693b      	ldr	r3, [r7, #16]
    a160:	2200      	movs	r2, #0
    a162:	609a      	str	r2, [r3, #8]

	ept->flags.bits.dir       = dir;
    a164:	693a      	ldr	r2, [r7, #16]
    a166:	7cd3      	ldrb	r3, [r2, #19]
    a168:	7d79      	ldrb	r1, [r7, #21]
    a16a:	f361 13c7 	bfi	r3, r1, #7, #1
    a16e:	74d3      	strb	r3, [r2, #19]
	ept->flags.bits.use_cache = use_cache;
    a170:	693a      	ldr	r2, [r7, #16]
    a172:	7cd3      	ldrb	r3, [r2, #19]
    a174:	7df9      	ldrb	r1, [r7, #23]
    a176:	f361 1345 	bfi	r3, r1, #5, #1
    a17a:	74d3      	strb	r3, [r2, #19]
	ept->flags.bits.need_zlp  = (trans->zlp && (!size_n_aligned));
    a17c:	687b      	ldr	r3, [r7, #4]
    a17e:	7a5b      	ldrb	r3, [r3, #9]
    a180:	2b00      	cmp	r3, #0
    a182:	d007      	beq.n	a194 <_usb_d_dev_ep_trans+0x174>
    a184:	7b7b      	ldrb	r3, [r7, #13]
    a186:	f083 0301 	eor.w	r3, r3, #1
    a18a:	b2db      	uxtb	r3, r3
    a18c:	2b00      	cmp	r3, #0
    a18e:	d001      	beq.n	a194 <_usb_d_dev_ep_trans+0x174>
    a190:	2301      	movs	r3, #1
    a192:	e000      	b.n	a196 <_usb_d_dev_ep_trans+0x176>
    a194:	2300      	movs	r3, #0
    a196:	b2db      	uxtb	r3, r3
    a198:	f003 0301 	and.w	r3, r3, #1
    a19c:	b2d9      	uxtb	r1, r3
    a19e:	693a      	ldr	r2, [r7, #16]
    a1a0:	7cd3      	ldrb	r3, [r2, #19]
    a1a2:	f361 1304 	bfi	r3, r1, #4, #1
    a1a6:	74d3      	strb	r3, [r2, #19]

	if (dir) {
    a1a8:	7d7b      	ldrb	r3, [r7, #21]
    a1aa:	2b00      	cmp	r3, #0
    a1ac:	d004      	beq.n	a1b8 <_usb_d_dev_ep_trans+0x198>
		_usb_d_dev_in_next(ept, false);
    a1ae:	2100      	movs	r1, #0
    a1b0:	6938      	ldr	r0, [r7, #16]
    a1b2:	4b0a      	ldr	r3, [pc, #40]	; (a1dc <_usb_d_dev_ep_trans+0x1bc>)
    a1b4:	4798      	blx	r3
    a1b6:	e003      	b.n	a1c0 <_usb_d_dev_ep_trans+0x1a0>
	} else {
		_usb_d_dev_out_next(ept, false);
    a1b8:	2100      	movs	r1, #0
    a1ba:	6938      	ldr	r0, [r7, #16]
    a1bc:	4b08      	ldr	r3, [pc, #32]	; (a1e0 <_usb_d_dev_ep_trans+0x1c0>)
    a1be:	4798      	blx	r3
	}

	return ERR_NONE;
    a1c0:	2300      	movs	r3, #0
}
    a1c2:	4618      	mov	r0, r3
    a1c4:	3718      	adds	r7, #24
    a1c6:	46bd      	mov	sp, r7
    a1c8:	bd80      	pop	{r7, pc}
    a1ca:	bf00      	nop
    a1cc:	00008891 	.word	0x00008891
    a1d0:	20041fff 	.word	0x20041fff
    a1d4:	0000a999 	.word	0x0000a999
    a1d8:	0000a9bf 	.word	0x0000a9bf
    a1dc:	00008b59 	.word	0x00008b59
    a1e0:	00008d71 	.word	0x00008d71

0000a1e4 <_usb_d_dev_register_callback>:
	}
	return USB_OK;
}

void _usb_d_dev_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
    a1e4:	b480      	push	{r7}
    a1e6:	b085      	sub	sp, #20
    a1e8:	af00      	add	r7, sp, #0
    a1ea:	4603      	mov	r3, r0
    a1ec:	6039      	str	r1, [r7, #0]
    a1ee:	71fb      	strb	r3, [r7, #7]
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    a1f0:	683b      	ldr	r3, [r7, #0]
    a1f2:	2b00      	cmp	r3, #0
    a1f4:	d001      	beq.n	a1fa <_usb_d_dev_register_callback+0x16>
    a1f6:	683b      	ldr	r3, [r7, #0]
    a1f8:	e000      	b.n	a1fc <_usb_d_dev_register_callback+0x18>
    a1fa:	4b0a      	ldr	r3, [pc, #40]	; (a224 <_usb_d_dev_register_callback+0x40>)
    a1fc:	60fb      	str	r3, [r7, #12]
	if (type == USB_D_CB_EVENT) {
    a1fe:	79fb      	ldrb	r3, [r7, #7]
    a200:	2b01      	cmp	r3, #1
    a202:	d103      	bne.n	a20c <_usb_d_dev_register_callback+0x28>
		dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)f;
    a204:	4a08      	ldr	r2, [pc, #32]	; (a228 <_usb_d_dev_register_callback+0x44>)
    a206:	68fb      	ldr	r3, [r7, #12]
    a208:	6053      	str	r3, [r2, #4]
	} else if (type == USB_D_CB_SOF) {
		dev_inst.callbacks.sof = (_usb_d_dev_sof_cb_t)f;
	}
}
    a20a:	e005      	b.n	a218 <_usb_d_dev_register_callback+0x34>
	} else if (type == USB_D_CB_SOF) {
    a20c:	79fb      	ldrb	r3, [r7, #7]
    a20e:	2b00      	cmp	r3, #0
    a210:	d102      	bne.n	a218 <_usb_d_dev_register_callback+0x34>
		dev_inst.callbacks.sof = (_usb_d_dev_sof_cb_t)f;
    a212:	4a05      	ldr	r2, [pc, #20]	; (a228 <_usb_d_dev_register_callback+0x44>)
    a214:	68fb      	ldr	r3, [r7, #12]
    a216:	6013      	str	r3, [r2, #0]
}
    a218:	bf00      	nop
    a21a:	3714      	adds	r7, #20
    a21c:	46bd      	mov	sp, r7
    a21e:	f85d 7b04 	ldr.w	r7, [sp], #4
    a222:	4770      	bx	lr
    a224:	00008119 	.word	0x00008119
    a228:	200009e0 	.word	0x200009e0

0000a22c <_usb_d_dev_register_ep_callback>:

void _usb_d_dev_register_ep_callback(const enum usb_d_dev_ep_cb_type type, const FUNC_PTR func)
{
    a22c:	b480      	push	{r7}
    a22e:	b085      	sub	sp, #20
    a230:	af00      	add	r7, sp, #0
    a232:	4603      	mov	r3, r0
    a234:	6039      	str	r1, [r7, #0]
    a236:	71fb      	strb	r3, [r7, #7]
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    a238:	683b      	ldr	r3, [r7, #0]
    a23a:	2b00      	cmp	r3, #0
    a23c:	d001      	beq.n	a242 <_usb_d_dev_register_ep_callback+0x16>
    a23e:	683b      	ldr	r3, [r7, #0]
    a240:	e000      	b.n	a244 <_usb_d_dev_register_ep_callback+0x18>
    a242:	4b0e      	ldr	r3, [pc, #56]	; (a27c <_usb_d_dev_register_ep_callback+0x50>)
    a244:	60fb      	str	r3, [r7, #12]
	if (type == USB_D_DEV_EP_CB_SETUP) {
    a246:	79fb      	ldrb	r3, [r7, #7]
    a248:	2b00      	cmp	r3, #0
    a24a:	d103      	bne.n	a254 <_usb_d_dev_register_ep_callback+0x28>
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
    a24c:	4a0c      	ldr	r2, [pc, #48]	; (a280 <_usb_d_dev_register_ep_callback+0x54>)
    a24e:	68fb      	ldr	r3, [r7, #12]
    a250:	6093      	str	r3, [r2, #8]
	} else if (type == USB_D_DEV_EP_CB_MORE) {
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
	} else if (type == USB_D_DEV_EP_CB_DONE) {
		dev_inst.ep_callbacks.done = (_usb_d_dev_ep_cb_done_t)f;
	}
}
    a252:	e00c      	b.n	a26e <_usb_d_dev_register_ep_callback+0x42>
	} else if (type == USB_D_DEV_EP_CB_MORE) {
    a254:	79fb      	ldrb	r3, [r7, #7]
    a256:	2b01      	cmp	r3, #1
    a258:	d103      	bne.n	a262 <_usb_d_dev_register_ep_callback+0x36>
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
    a25a:	4a09      	ldr	r2, [pc, #36]	; (a280 <_usb_d_dev_register_ep_callback+0x54>)
    a25c:	68fb      	ldr	r3, [r7, #12]
    a25e:	60d3      	str	r3, [r2, #12]
}
    a260:	e005      	b.n	a26e <_usb_d_dev_register_ep_callback+0x42>
	} else if (type == USB_D_DEV_EP_CB_DONE) {
    a262:	79fb      	ldrb	r3, [r7, #7]
    a264:	2b02      	cmp	r3, #2
    a266:	d102      	bne.n	a26e <_usb_d_dev_register_ep_callback+0x42>
		dev_inst.ep_callbacks.done = (_usb_d_dev_ep_cb_done_t)f;
    a268:	4a05      	ldr	r2, [pc, #20]	; (a280 <_usb_d_dev_register_ep_callback+0x54>)
    a26a:	68fb      	ldr	r3, [r7, #12]
    a26c:	6113      	str	r3, [r2, #16]
}
    a26e:	bf00      	nop
    a270:	3714      	adds	r7, #20
    a272:	46bd      	mov	sp, r7
    a274:	f85d 7b04 	ldr.w	r7, [sp], #4
    a278:	4770      	bx	lr
    a27a:	bf00      	nop
    a27c:	00008119 	.word	0x00008119
    a280:	200009e0 	.word	0x200009e0

0000a284 <USB_0_Handler>:

/**
 * \brief USB interrupt handler
 */
void USB_0_Handler(void)
{
    a284:	b580      	push	{r7, lr}
    a286:	af00      	add	r7, sp, #0

	_usb_d_dev_handler();
    a288:	4b01      	ldr	r3, [pc, #4]	; (a290 <USB_0_Handler+0xc>)
    a28a:	4798      	blx	r3
}
    a28c:	bf00      	nop
    a28e:	bd80      	pop	{r7, pc}
    a290:	00009549 	.word	0x00009549

0000a294 <USB_1_Handler>:
/**
 * \brief USB interrupt handler
 */
void USB_1_Handler(void)
{
    a294:	b580      	push	{r7, lr}
    a296:	af00      	add	r7, sp, #0

	_usb_d_dev_handler();
    a298:	4b01      	ldr	r3, [pc, #4]	; (a2a0 <USB_1_Handler+0xc>)
    a29a:	4798      	blx	r3
}
    a29c:	bf00      	nop
    a29e:	bd80      	pop	{r7, pc}
    a2a0:	00009549 	.word	0x00009549

0000a2a4 <USB_2_Handler>:
/**
 * \brief USB interrupt handler
 */
void USB_2_Handler(void)
{
    a2a4:	b580      	push	{r7, lr}
    a2a6:	af00      	add	r7, sp, #0

	_usb_d_dev_handler();
    a2a8:	4b01      	ldr	r3, [pc, #4]	; (a2b0 <USB_2_Handler+0xc>)
    a2aa:	4798      	blx	r3
}
    a2ac:	bf00      	nop
    a2ae:	bd80      	pop	{r7, pc}
    a2b0:	00009549 	.word	0x00009549

0000a2b4 <USB_3_Handler>:
/**
 * \brief USB interrupt handler
 */
void USB_3_Handler(void)
{
    a2b4:	b580      	push	{r7, lr}
    a2b6:	af00      	add	r7, sp, #0

	_usb_d_dev_handler();
    a2b8:	4b01      	ldr	r3, [pc, #4]	; (a2c0 <USB_3_Handler+0xc>)
    a2ba:	4798      	blx	r3
}
    a2bc:	bf00      	nop
    a2be:	bd80      	pop	{r7, pc}
    a2c0:	00009549 	.word	0x00009549

0000a2c4 <hri_wdt_wait_for_sync>:
typedef uint8_t  hri_wdt_ewctrl_reg_t;
typedef uint8_t  hri_wdt_intenset_reg_t;
typedef uint8_t  hri_wdt_intflag_reg_t;

static inline void hri_wdt_wait_for_sync(const void *const hw, hri_wdt_syncbusy_reg_t reg)
{
    a2c4:	b480      	push	{r7}
    a2c6:	b083      	sub	sp, #12
    a2c8:	af00      	add	r7, sp, #0
    a2ca:	6078      	str	r0, [r7, #4]
    a2cc:	6039      	str	r1, [r7, #0]
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    a2ce:	bf00      	nop
    a2d0:	687b      	ldr	r3, [r7, #4]
    a2d2:	689a      	ldr	r2, [r3, #8]
    a2d4:	683b      	ldr	r3, [r7, #0]
    a2d6:	4013      	ands	r3, r2
    a2d8:	2b00      	cmp	r3, #0
    a2da:	d1f9      	bne.n	a2d0 <hri_wdt_wait_for_sync+0xc>
	};
}
    a2dc:	bf00      	nop
    a2de:	370c      	adds	r7, #12
    a2e0:	46bd      	mov	sp, r7
    a2e2:	f85d 7b04 	ldr.w	r7, [sp], #4
    a2e6:	4770      	bx	lr

0000a2e8 <hri_wdt_get_CTRLA_ENABLE_bit>:
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
	WDT_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_wdt_get_CTRLA_ENABLE_bit(const void *const hw)
{
    a2e8:	b580      	push	{r7, lr}
    a2ea:	b084      	sub	sp, #16
    a2ec:	af00      	add	r7, sp, #0
    a2ee:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
    a2f0:	210e      	movs	r1, #14
    a2f2:	6878      	ldr	r0, [r7, #4]
    a2f4:	4b0a      	ldr	r3, [pc, #40]	; (a320 <hri_wdt_get_CTRLA_ENABLE_bit+0x38>)
    a2f6:	4798      	blx	r3
	tmp = ((Wdt *)hw)->CTRLA.reg;
    a2f8:	687b      	ldr	r3, [r7, #4]
    a2fa:	781b      	ldrb	r3, [r3, #0]
    a2fc:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & WDT_CTRLA_ENABLE) >> WDT_CTRLA_ENABLE_Pos;
    a2fe:	7bfb      	ldrb	r3, [r7, #15]
    a300:	085b      	lsrs	r3, r3, #1
    a302:	b2db      	uxtb	r3, r3
    a304:	f003 0301 	and.w	r3, r3, #1
    a308:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    a30a:	7bfb      	ldrb	r3, [r7, #15]
    a30c:	2b00      	cmp	r3, #0
    a30e:	bf14      	ite	ne
    a310:	2301      	movne	r3, #1
    a312:	2300      	moveq	r3, #0
    a314:	b2db      	uxtb	r3, r3
}
    a316:	4618      	mov	r0, r3
    a318:	3710      	adds	r7, #16
    a31a:	46bd      	mov	sp, r7
    a31c:	bd80      	pop	{r7, pc}
    a31e:	bf00      	nop
    a320:	0000a2c5 	.word	0x0000a2c5

0000a324 <hri_wdt_clear_CTRLA_WEN_bit>:
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
	WDT_CRITICAL_SECTION_LEAVE();
}

static inline void hri_wdt_clear_CTRLA_WEN_bit(const void *const hw)
{
    a324:	b580      	push	{r7, lr}
    a326:	b082      	sub	sp, #8
    a328:	af00      	add	r7, sp, #0
    a32a:	6078      	str	r0, [r7, #4]
	WDT_CRITICAL_SECTION_ENTER();
	((Wdt *)hw)->CTRLA.reg &= ~WDT_CTRLA_WEN;
    a32c:	687b      	ldr	r3, [r7, #4]
    a32e:	781b      	ldrb	r3, [r3, #0]
    a330:	b2db      	uxtb	r3, r3
    a332:	f023 0304 	bic.w	r3, r3, #4
    a336:	b2da      	uxtb	r2, r3
    a338:	687b      	ldr	r3, [r7, #4]
    a33a:	701a      	strb	r2, [r3, #0]
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
    a33c:	210e      	movs	r1, #14
    a33e:	6878      	ldr	r0, [r7, #4]
    a340:	4b02      	ldr	r3, [pc, #8]	; (a34c <hri_wdt_clear_CTRLA_WEN_bit+0x28>)
    a342:	4798      	blx	r3
	WDT_CRITICAL_SECTION_LEAVE();
}
    a344:	bf00      	nop
    a346:	3708      	adds	r7, #8
    a348:	46bd      	mov	sp, r7
    a34a:	bd80      	pop	{r7, pc}
    a34c:	0000a2c5 	.word	0x0000a2c5

0000a350 <hri_wdt_get_CTRLA_ALWAYSON_bit>:
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
	WDT_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_wdt_get_CTRLA_ALWAYSON_bit(const void *const hw)
{
    a350:	b580      	push	{r7, lr}
    a352:	b084      	sub	sp, #16
    a354:	af00      	add	r7, sp, #0
    a356:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
    a358:	210e      	movs	r1, #14
    a35a:	6878      	ldr	r0, [r7, #4]
    a35c:	4b08      	ldr	r3, [pc, #32]	; (a380 <hri_wdt_get_CTRLA_ALWAYSON_bit+0x30>)
    a35e:	4798      	blx	r3
	tmp = ((Wdt *)hw)->CTRLA.reg;
    a360:	687b      	ldr	r3, [r7, #4]
    a362:	781b      	ldrb	r3, [r3, #0]
    a364:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & WDT_CTRLA_ALWAYSON) >> WDT_CTRLA_ALWAYSON_Pos;
    a366:	7bfb      	ldrb	r3, [r7, #15]
    a368:	09db      	lsrs	r3, r3, #7
    a36a:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    a36c:	7bfb      	ldrb	r3, [r7, #15]
    a36e:	2b00      	cmp	r3, #0
    a370:	bf14      	ite	ne
    a372:	2301      	movne	r3, #1
    a374:	2300      	moveq	r3, #0
    a376:	b2db      	uxtb	r3, r3
}
    a378:	4618      	mov	r0, r3
    a37a:	3710      	adds	r7, #16
    a37c:	46bd      	mov	sp, r7
    a37e:	bd80      	pop	{r7, pc}
    a380:	0000a2c5 	.word	0x0000a2c5

0000a384 <hri_wdt_write_CONFIG_PER_bf>:
	tmp = (tmp & WDT_CONFIG_PER(mask)) >> WDT_CONFIG_PER_Pos;
	return tmp;
}

static inline void hri_wdt_write_CONFIG_PER_bf(const void *const hw, hri_wdt_config_reg_t data)
{
    a384:	b480      	push	{r7}
    a386:	b085      	sub	sp, #20
    a388:	af00      	add	r7, sp, #0
    a38a:	6078      	str	r0, [r7, #4]
    a38c:	460b      	mov	r3, r1
    a38e:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	WDT_CRITICAL_SECTION_ENTER();
	tmp = ((Wdt *)hw)->CONFIG.reg;
    a390:	687b      	ldr	r3, [r7, #4]
    a392:	785b      	ldrb	r3, [r3, #1]
    a394:	73fb      	strb	r3, [r7, #15]
	tmp &= ~WDT_CONFIG_PER_Msk;
    a396:	7bfb      	ldrb	r3, [r7, #15]
    a398:	f023 030f 	bic.w	r3, r3, #15
    a39c:	73fb      	strb	r3, [r7, #15]
	tmp |= WDT_CONFIG_PER(data);
    a39e:	78fb      	ldrb	r3, [r7, #3]
    a3a0:	f003 030f 	and.w	r3, r3, #15
    a3a4:	b2da      	uxtb	r2, r3
    a3a6:	7bfb      	ldrb	r3, [r7, #15]
    a3a8:	4313      	orrs	r3, r2
    a3aa:	73fb      	strb	r3, [r7, #15]
	((Wdt *)hw)->CONFIG.reg = tmp;
    a3ac:	687b      	ldr	r3, [r7, #4]
    a3ae:	7bfa      	ldrb	r2, [r7, #15]
    a3b0:	705a      	strb	r2, [r3, #1]
	WDT_CRITICAL_SECTION_LEAVE();
}
    a3b2:	bf00      	nop
    a3b4:	3714      	adds	r7, #20
    a3b6:	46bd      	mov	sp, r7
    a3b8:	f85d 7b04 	ldr.w	r7, [sp], #4
    a3bc:	4770      	bx	lr
	...

0000a3c0 <_wdt_init>:

/**
 * \brief WDT initialization function
 */
int32_t _wdt_init(struct wdt_dev *const dev)
{
    a3c0:	b580      	push	{r7, lr}
    a3c2:	b082      	sub	sp, #8
    a3c4:	af00      	add	r7, sp, #0
    a3c6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	ASSERT(dev && dev->hw);
    a3c8:	687b      	ldr	r3, [r7, #4]
    a3ca:	2b00      	cmp	r3, #0
    a3cc:	d005      	beq.n	a3da <_wdt_init+0x1a>
    a3ce:	687b      	ldr	r3, [r7, #4]
    a3d0:	681b      	ldr	r3, [r3, #0]
    a3d2:	2b00      	cmp	r3, #0
    a3d4:	d001      	beq.n	a3da <_wdt_init+0x1a>
    a3d6:	2301      	movs	r3, #1
    a3d8:	e000      	b.n	a3dc <_wdt_init+0x1c>
    a3da:	2300      	movs	r3, #0
    a3dc:	f003 0301 	and.w	r3, r3, #1
    a3e0:	b2db      	uxtb	r3, r3
    a3e2:	2250      	movs	r2, #80	; 0x50
    a3e4:	4913      	ldr	r1, [pc, #76]	; (a434 <_wdt_init+0x74>)
    a3e6:	4618      	mov	r0, r3
    a3e8:	4b13      	ldr	r3, [pc, #76]	; (a438 <_wdt_init+0x78>)
    a3ea:	4798      	blx	r3

	if (hri_wdt_get_CTRLA_ALWAYSON_bit(dev->hw) || hri_wdt_get_CTRLA_ENABLE_bit(dev->hw)) {
    a3ec:	687b      	ldr	r3, [r7, #4]
    a3ee:	681b      	ldr	r3, [r3, #0]
    a3f0:	4618      	mov	r0, r3
    a3f2:	4b12      	ldr	r3, [pc, #72]	; (a43c <_wdt_init+0x7c>)
    a3f4:	4798      	blx	r3
    a3f6:	4603      	mov	r3, r0
    a3f8:	2b00      	cmp	r3, #0
    a3fa:	d107      	bne.n	a40c <_wdt_init+0x4c>
    a3fc:	687b      	ldr	r3, [r7, #4]
    a3fe:	681b      	ldr	r3, [r3, #0]
    a400:	4618      	mov	r0, r3
    a402:	4b0f      	ldr	r3, [pc, #60]	; (a440 <_wdt_init+0x80>)
    a404:	4798      	blx	r3
    a406:	4603      	mov	r3, r0
    a408:	2b00      	cmp	r3, #0
    a40a:	d002      	beq.n	a412 <_wdt_init+0x52>
		return ERR_DENIED;
    a40c:	f06f 0310 	mvn.w	r3, #16
    a410:	e00b      	b.n	a42a <_wdt_init+0x6a>
	} else {
		if (CONF_WDT_WINDOW_EN) {
			hri_wdt_write_CONFIG_WINDOW_bf(dev->hw, CONF_WDT_WINDOW);
		} else {
			hri_wdt_clear_CTRLA_WEN_bit(dev->hw);
    a412:	687b      	ldr	r3, [r7, #4]
    a414:	681b      	ldr	r3, [r3, #0]
    a416:	4618      	mov	r0, r3
    a418:	4b0a      	ldr	r3, [pc, #40]	; (a444 <_wdt_init+0x84>)
    a41a:	4798      	blx	r3
		}

		hri_wdt_write_CONFIG_PER_bf(dev->hw, CONF_WDT_PER);
    a41c:	687b      	ldr	r3, [r7, #4]
    a41e:	681b      	ldr	r3, [r3, #0]
    a420:	210b      	movs	r1, #11
    a422:	4618      	mov	r0, r3
    a424:	4b08      	ldr	r3, [pc, #32]	; (a448 <_wdt_init+0x88>)
    a426:	4798      	blx	r3
	}

	return ERR_NONE;
    a428:	2300      	movs	r3, #0
}
    a42a:	4618      	mov	r0, r3
    a42c:	3708      	adds	r7, #8
    a42e:	46bd      	mov	sp, r7
    a430:	bd80      	pop	{r7, pc}
    a432:	bf00      	nop
    a434:	0000cf14 	.word	0x0000cf14
    a438:	00003481 	.word	0x00003481
    a43c:	0000a351 	.word	0x0000a351
    a440:	0000a2e9 	.word	0x0000a2e9
    a444:	0000a325 	.word	0x0000a325
    a448:	0000a385 	.word	0x0000a385

0000a44c <hri_port_set_DIR_reg>:
{
    a44c:	b480      	push	{r7}
    a44e:	b085      	sub	sp, #20
    a450:	af00      	add	r7, sp, #0
    a452:	60f8      	str	r0, [r7, #12]
    a454:	460b      	mov	r3, r1
    a456:	607a      	str	r2, [r7, #4]
    a458:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    a45a:	7afb      	ldrb	r3, [r7, #11]
    a45c:	68fa      	ldr	r2, [r7, #12]
    a45e:	01db      	lsls	r3, r3, #7
    a460:	4413      	add	r3, r2
    a462:	3308      	adds	r3, #8
    a464:	687a      	ldr	r2, [r7, #4]
    a466:	601a      	str	r2, [r3, #0]
}
    a468:	bf00      	nop
    a46a:	3714      	adds	r7, #20
    a46c:	46bd      	mov	sp, r7
    a46e:	f85d 7b04 	ldr.w	r7, [sp], #4
    a472:	4770      	bx	lr

0000a474 <hri_port_clear_DIR_reg>:
{
    a474:	b480      	push	{r7}
    a476:	b085      	sub	sp, #20
    a478:	af00      	add	r7, sp, #0
    a47a:	60f8      	str	r0, [r7, #12]
    a47c:	460b      	mov	r3, r1
    a47e:	607a      	str	r2, [r7, #4]
    a480:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    a482:	7afb      	ldrb	r3, [r7, #11]
    a484:	68fa      	ldr	r2, [r7, #12]
    a486:	01db      	lsls	r3, r3, #7
    a488:	4413      	add	r3, r2
    a48a:	3304      	adds	r3, #4
    a48c:	687a      	ldr	r2, [r7, #4]
    a48e:	601a      	str	r2, [r3, #0]
}
    a490:	bf00      	nop
    a492:	3714      	adds	r7, #20
    a494:	46bd      	mov	sp, r7
    a496:	f85d 7b04 	ldr.w	r7, [sp], #4
    a49a:	4770      	bx	lr

0000a49c <hri_port_set_OUT_reg>:
{
    a49c:	b480      	push	{r7}
    a49e:	b085      	sub	sp, #20
    a4a0:	af00      	add	r7, sp, #0
    a4a2:	60f8      	str	r0, [r7, #12]
    a4a4:	460b      	mov	r3, r1
    a4a6:	607a      	str	r2, [r7, #4]
    a4a8:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    a4aa:	7afb      	ldrb	r3, [r7, #11]
    a4ac:	68fa      	ldr	r2, [r7, #12]
    a4ae:	01db      	lsls	r3, r3, #7
    a4b0:	4413      	add	r3, r2
    a4b2:	3318      	adds	r3, #24
    a4b4:	687a      	ldr	r2, [r7, #4]
    a4b6:	601a      	str	r2, [r3, #0]
}
    a4b8:	bf00      	nop
    a4ba:	3714      	adds	r7, #20
    a4bc:	46bd      	mov	sp, r7
    a4be:	f85d 7b04 	ldr.w	r7, [sp], #4
    a4c2:	4770      	bx	lr

0000a4c4 <hri_port_clear_OUT_reg>:
{
    a4c4:	b480      	push	{r7}
    a4c6:	b085      	sub	sp, #20
    a4c8:	af00      	add	r7, sp, #0
    a4ca:	60f8      	str	r0, [r7, #12]
    a4cc:	460b      	mov	r3, r1
    a4ce:	607a      	str	r2, [r7, #4]
    a4d0:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    a4d2:	7afb      	ldrb	r3, [r7, #11]
    a4d4:	68fa      	ldr	r2, [r7, #12]
    a4d6:	01db      	lsls	r3, r3, #7
    a4d8:	4413      	add	r3, r2
    a4da:	3314      	adds	r3, #20
    a4dc:	687a      	ldr	r2, [r7, #4]
    a4de:	601a      	str	r2, [r3, #0]
}
    a4e0:	bf00      	nop
    a4e2:	3714      	adds	r7, #20
    a4e4:	46bd      	mov	sp, r7
    a4e6:	f85d 7b04 	ldr.w	r7, [sp], #4
    a4ea:	4770      	bx	lr

0000a4ec <hri_port_write_PMUX_PMUXE_bf>:
{
    a4ec:	b480      	push	{r7}
    a4ee:	b085      	sub	sp, #20
    a4f0:	af00      	add	r7, sp, #0
    a4f2:	6078      	str	r0, [r7, #4]
    a4f4:	4608      	mov	r0, r1
    a4f6:	4611      	mov	r1, r2
    a4f8:	461a      	mov	r2, r3
    a4fa:	4603      	mov	r3, r0
    a4fc:	70fb      	strb	r3, [r7, #3]
    a4fe:	460b      	mov	r3, r1
    a500:	70bb      	strb	r3, [r7, #2]
    a502:	4613      	mov	r3, r2
    a504:	707b      	strb	r3, [r7, #1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    a506:	78fa      	ldrb	r2, [r7, #3]
    a508:	78bb      	ldrb	r3, [r7, #2]
    a50a:	6879      	ldr	r1, [r7, #4]
    a50c:	01d2      	lsls	r2, r2, #7
    a50e:	440a      	add	r2, r1
    a510:	4413      	add	r3, r2
    a512:	3330      	adds	r3, #48	; 0x30
    a514:	781b      	ldrb	r3, [r3, #0]
    a516:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    a518:	7bfb      	ldrb	r3, [r7, #15]
    a51a:	f023 030f 	bic.w	r3, r3, #15
    a51e:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXE(data);
    a520:	787b      	ldrb	r3, [r7, #1]
    a522:	f003 030f 	and.w	r3, r3, #15
    a526:	b2da      	uxtb	r2, r3
    a528:	7bfb      	ldrb	r3, [r7, #15]
    a52a:	4313      	orrs	r3, r2
    a52c:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    a52e:	78fa      	ldrb	r2, [r7, #3]
    a530:	78bb      	ldrb	r3, [r7, #2]
    a532:	6879      	ldr	r1, [r7, #4]
    a534:	01d2      	lsls	r2, r2, #7
    a536:	440a      	add	r2, r1
    a538:	4413      	add	r3, r2
    a53a:	3330      	adds	r3, #48	; 0x30
    a53c:	7bfa      	ldrb	r2, [r7, #15]
    a53e:	701a      	strb	r2, [r3, #0]
}
    a540:	bf00      	nop
    a542:	3714      	adds	r7, #20
    a544:	46bd      	mov	sp, r7
    a546:	f85d 7b04 	ldr.w	r7, [sp], #4
    a54a:	4770      	bx	lr

0000a54c <hri_port_write_PMUX_PMUXO_bf>:
{
    a54c:	b480      	push	{r7}
    a54e:	b085      	sub	sp, #20
    a550:	af00      	add	r7, sp, #0
    a552:	6078      	str	r0, [r7, #4]
    a554:	4608      	mov	r0, r1
    a556:	4611      	mov	r1, r2
    a558:	461a      	mov	r2, r3
    a55a:	4603      	mov	r3, r0
    a55c:	70fb      	strb	r3, [r7, #3]
    a55e:	460b      	mov	r3, r1
    a560:	70bb      	strb	r3, [r7, #2]
    a562:	4613      	mov	r3, r2
    a564:	707b      	strb	r3, [r7, #1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    a566:	78fa      	ldrb	r2, [r7, #3]
    a568:	78bb      	ldrb	r3, [r7, #2]
    a56a:	6879      	ldr	r1, [r7, #4]
    a56c:	01d2      	lsls	r2, r2, #7
    a56e:	440a      	add	r2, r1
    a570:	4413      	add	r3, r2
    a572:	3330      	adds	r3, #48	; 0x30
    a574:	781b      	ldrb	r3, [r3, #0]
    a576:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    a578:	7bfb      	ldrb	r3, [r7, #15]
    a57a:	f003 030f 	and.w	r3, r3, #15
    a57e:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXO(data);
    a580:	787b      	ldrb	r3, [r7, #1]
    a582:	011b      	lsls	r3, r3, #4
    a584:	b2da      	uxtb	r2, r3
    a586:	7bfb      	ldrb	r3, [r7, #15]
    a588:	4313      	orrs	r3, r2
    a58a:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    a58c:	78fa      	ldrb	r2, [r7, #3]
    a58e:	78bb      	ldrb	r3, [r7, #2]
    a590:	6879      	ldr	r1, [r7, #4]
    a592:	01d2      	lsls	r2, r2, #7
    a594:	440a      	add	r2, r1
    a596:	4413      	add	r3, r2
    a598:	3330      	adds	r3, #48	; 0x30
    a59a:	7bfa      	ldrb	r2, [r7, #15]
    a59c:	701a      	strb	r2, [r3, #0]
}
    a59e:	bf00      	nop
    a5a0:	3714      	adds	r7, #20
    a5a2:	46bd      	mov	sp, r7
    a5a4:	f85d 7b04 	ldr.w	r7, [sp], #4
    a5a8:	4770      	bx	lr

0000a5aa <hri_port_write_PINCFG_PMUXEN_bit>:
{
    a5aa:	b480      	push	{r7}
    a5ac:	b085      	sub	sp, #20
    a5ae:	af00      	add	r7, sp, #0
    a5b0:	6078      	str	r0, [r7, #4]
    a5b2:	4608      	mov	r0, r1
    a5b4:	4611      	mov	r1, r2
    a5b6:	461a      	mov	r2, r3
    a5b8:	4603      	mov	r3, r0
    a5ba:	70fb      	strb	r3, [r7, #3]
    a5bc:	460b      	mov	r3, r1
    a5be:	70bb      	strb	r3, [r7, #2]
    a5c0:	4613      	mov	r3, r2
    a5c2:	707b      	strb	r3, [r7, #1]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    a5c4:	78fa      	ldrb	r2, [r7, #3]
    a5c6:	78bb      	ldrb	r3, [r7, #2]
    a5c8:	6879      	ldr	r1, [r7, #4]
    a5ca:	01d2      	lsls	r2, r2, #7
    a5cc:	440a      	add	r2, r1
    a5ce:	4413      	add	r3, r2
    a5d0:	3340      	adds	r3, #64	; 0x40
    a5d2:	781b      	ldrb	r3, [r3, #0]
    a5d4:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PINCFG_PMUXEN;
    a5d6:	7bfb      	ldrb	r3, [r7, #15]
    a5d8:	f023 0301 	bic.w	r3, r3, #1
    a5dc:	73fb      	strb	r3, [r7, #15]
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    a5de:	787a      	ldrb	r2, [r7, #1]
    a5e0:	7bfb      	ldrb	r3, [r7, #15]
    a5e2:	4313      	orrs	r3, r2
    a5e4:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    a5e6:	78fa      	ldrb	r2, [r7, #3]
    a5e8:	78bb      	ldrb	r3, [r7, #2]
    a5ea:	6879      	ldr	r1, [r7, #4]
    a5ec:	01d2      	lsls	r2, r2, #7
    a5ee:	440a      	add	r2, r1
    a5f0:	4413      	add	r3, r2
    a5f2:	3340      	adds	r3, #64	; 0x40
    a5f4:	7bfa      	ldrb	r2, [r7, #15]
    a5f6:	701a      	strb	r2, [r3, #0]
}
    a5f8:	bf00      	nop
    a5fa:	3714      	adds	r7, #20
    a5fc:	46bd      	mov	sp, r7
    a5fe:	f85d 7b04 	ldr.w	r7, [sp], #4
    a602:	4770      	bx	lr

0000a604 <hri_port_write_WRCONFIG_reg>:
{
    a604:	b480      	push	{r7}
    a606:	b085      	sub	sp, #20
    a608:	af00      	add	r7, sp, #0
    a60a:	60f8      	str	r0, [r7, #12]
    a60c:	460b      	mov	r3, r1
    a60e:	607a      	str	r2, [r7, #4]
    a610:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    a612:	7afb      	ldrb	r3, [r7, #11]
    a614:	68fa      	ldr	r2, [r7, #12]
    a616:	01db      	lsls	r3, r3, #7
    a618:	4413      	add	r3, r2
    a61a:	3328      	adds	r3, #40	; 0x28
    a61c:	687a      	ldr	r2, [r7, #4]
    a61e:	601a      	str	r2, [r3, #0]
}
    a620:	bf00      	nop
    a622:	3714      	adds	r7, #20
    a624:	46bd      	mov	sp, r7
    a626:	f85d 7b04 	ldr.w	r7, [sp], #4
    a62a:	4770      	bx	lr

0000a62c <_gpio_set_direction>:
{
    a62c:	b580      	push	{r7, lr}
    a62e:	b082      	sub	sp, #8
    a630:	af00      	add	r7, sp, #0
    a632:	4603      	mov	r3, r0
    a634:	6039      	str	r1, [r7, #0]
    a636:	71fb      	strb	r3, [r7, #7]
    a638:	4613      	mov	r3, r2
    a63a:	71bb      	strb	r3, [r7, #6]
	switch (direction) {
    a63c:	79bb      	ldrb	r3, [r7, #6]
    a63e:	2b01      	cmp	r3, #1
    a640:	d01c      	beq.n	a67c <_gpio_set_direction+0x50>
    a642:	2b02      	cmp	r3, #2
    a644:	d037      	beq.n	a6b6 <_gpio_set_direction+0x8a>
    a646:	2b00      	cmp	r3, #0
    a648:	d14e      	bne.n	a6e8 <_gpio_set_direction+0xbc>
		hri_port_clear_DIR_reg(PORT, port, mask);
    a64a:	79fb      	ldrb	r3, [r7, #7]
    a64c:	683a      	ldr	r2, [r7, #0]
    a64e:	4619      	mov	r1, r3
    a650:	482a      	ldr	r0, [pc, #168]	; (a6fc <_gpio_set_direction+0xd0>)
    a652:	4b2b      	ldr	r3, [pc, #172]	; (a700 <_gpio_set_direction+0xd4>)
    a654:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    a656:	683b      	ldr	r3, [r7, #0]
    a658:	b29b      	uxth	r3, r3
    a65a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
    a65e:	79fb      	ldrb	r3, [r7, #7]
    a660:	4619      	mov	r1, r3
    a662:	4826      	ldr	r0, [pc, #152]	; (a6fc <_gpio_set_direction+0xd0>)
    a664:	4b27      	ldr	r3, [pc, #156]	; (a704 <_gpio_set_direction+0xd8>)
    a666:	4798      	blx	r3
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    a668:	683b      	ldr	r3, [r7, #0]
    a66a:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
    a66c:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
    a670:	79fb      	ldrb	r3, [r7, #7]
    a672:	4619      	mov	r1, r3
    a674:	4821      	ldr	r0, [pc, #132]	; (a6fc <_gpio_set_direction+0xd0>)
    a676:	4b23      	ldr	r3, [pc, #140]	; (a704 <_gpio_set_direction+0xd8>)
    a678:	4798      	blx	r3
		break;
    a67a:	e03a      	b.n	a6f2 <_gpio_set_direction+0xc6>
		hri_port_clear_DIR_reg(PORT, port, mask);
    a67c:	79fb      	ldrb	r3, [r7, #7]
    a67e:	683a      	ldr	r2, [r7, #0]
    a680:	4619      	mov	r1, r3
    a682:	481e      	ldr	r0, [pc, #120]	; (a6fc <_gpio_set_direction+0xd0>)
    a684:	4b1e      	ldr	r3, [pc, #120]	; (a700 <_gpio_set_direction+0xd4>)
    a686:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN | (mask & 0xffff));
    a688:	683b      	ldr	r3, [r7, #0]
    a68a:	b29b      	uxth	r3, r3
    a68c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
    a690:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    a694:	79f9      	ldrb	r1, [r7, #7]
    a696:	461a      	mov	r2, r3
    a698:	4818      	ldr	r0, [pc, #96]	; (a6fc <_gpio_set_direction+0xd0>)
    a69a:	4b1a      	ldr	r3, [pc, #104]	; (a704 <_gpio_set_direction+0xd8>)
    a69c:	4798      	blx	r3
		                                | ((mask & 0xffff0000) >> 16));
    a69e:	683b      	ldr	r3, [r7, #0]
    a6a0:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(PORT,
    a6a2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
    a6a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    a6aa:	79f9      	ldrb	r1, [r7, #7]
    a6ac:	461a      	mov	r2, r3
    a6ae:	4813      	ldr	r0, [pc, #76]	; (a6fc <_gpio_set_direction+0xd0>)
    a6b0:	4b14      	ldr	r3, [pc, #80]	; (a704 <_gpio_set_direction+0xd8>)
    a6b2:	4798      	blx	r3
		break;
    a6b4:	e01d      	b.n	a6f2 <_gpio_set_direction+0xc6>
		hri_port_set_DIR_reg(PORT, port, mask);
    a6b6:	79fb      	ldrb	r3, [r7, #7]
    a6b8:	683a      	ldr	r2, [r7, #0]
    a6ba:	4619      	mov	r1, r3
    a6bc:	480f      	ldr	r0, [pc, #60]	; (a6fc <_gpio_set_direction+0xd0>)
    a6be:	4b12      	ldr	r3, [pc, #72]	; (a708 <_gpio_set_direction+0xdc>)
    a6c0:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    a6c2:	683b      	ldr	r3, [r7, #0]
    a6c4:	b29b      	uxth	r3, r3
    a6c6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
    a6ca:	79fb      	ldrb	r3, [r7, #7]
    a6cc:	4619      	mov	r1, r3
    a6ce:	480b      	ldr	r0, [pc, #44]	; (a6fc <_gpio_set_direction+0xd0>)
    a6d0:	4b0c      	ldr	r3, [pc, #48]	; (a704 <_gpio_set_direction+0xd8>)
    a6d2:	4798      	blx	r3
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    a6d4:	683b      	ldr	r3, [r7, #0]
    a6d6:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
    a6d8:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
    a6dc:	79fb      	ldrb	r3, [r7, #7]
    a6de:	4619      	mov	r1, r3
    a6e0:	4806      	ldr	r0, [pc, #24]	; (a6fc <_gpio_set_direction+0xd0>)
    a6e2:	4b08      	ldr	r3, [pc, #32]	; (a704 <_gpio_set_direction+0xd8>)
    a6e4:	4798      	blx	r3
		break;
    a6e6:	e004      	b.n	a6f2 <_gpio_set_direction+0xc6>
		ASSERT(false);
    a6e8:	2246      	movs	r2, #70	; 0x46
    a6ea:	4908      	ldr	r1, [pc, #32]	; (a70c <_gpio_set_direction+0xe0>)
    a6ec:	2000      	movs	r0, #0
    a6ee:	4b08      	ldr	r3, [pc, #32]	; (a710 <_gpio_set_direction+0xe4>)
    a6f0:	4798      	blx	r3
}
    a6f2:	bf00      	nop
    a6f4:	3708      	adds	r7, #8
    a6f6:	46bd      	mov	sp, r7
    a6f8:	bd80      	pop	{r7, pc}
    a6fa:	bf00      	nop
    a6fc:	41008000 	.word	0x41008000
    a700:	0000a475 	.word	0x0000a475
    a704:	0000a605 	.word	0x0000a605
    a708:	0000a44d 	.word	0x0000a44d
    a70c:	0000cf2c 	.word	0x0000cf2c
    a710:	00003481 	.word	0x00003481

0000a714 <_gpio_set_level>:
{
    a714:	b580      	push	{r7, lr}
    a716:	b082      	sub	sp, #8
    a718:	af00      	add	r7, sp, #0
    a71a:	4603      	mov	r3, r0
    a71c:	6039      	str	r1, [r7, #0]
    a71e:	71fb      	strb	r3, [r7, #7]
    a720:	4613      	mov	r3, r2
    a722:	71bb      	strb	r3, [r7, #6]
	if (level) {
    a724:	79bb      	ldrb	r3, [r7, #6]
    a726:	2b00      	cmp	r3, #0
    a728:	d006      	beq.n	a738 <_gpio_set_level+0x24>
		hri_port_set_OUT_reg(PORT, port, mask);
    a72a:	79fb      	ldrb	r3, [r7, #7]
    a72c:	683a      	ldr	r2, [r7, #0]
    a72e:	4619      	mov	r1, r3
    a730:	4806      	ldr	r0, [pc, #24]	; (a74c <_gpio_set_level+0x38>)
    a732:	4b07      	ldr	r3, [pc, #28]	; (a750 <_gpio_set_level+0x3c>)
    a734:	4798      	blx	r3
}
    a736:	e005      	b.n	a744 <_gpio_set_level+0x30>
		hri_port_clear_OUT_reg(PORT, port, mask);
    a738:	79fb      	ldrb	r3, [r7, #7]
    a73a:	683a      	ldr	r2, [r7, #0]
    a73c:	4619      	mov	r1, r3
    a73e:	4803      	ldr	r0, [pc, #12]	; (a74c <_gpio_set_level+0x38>)
    a740:	4b04      	ldr	r3, [pc, #16]	; (a754 <_gpio_set_level+0x40>)
    a742:	4798      	blx	r3
}
    a744:	bf00      	nop
    a746:	3708      	adds	r7, #8
    a748:	46bd      	mov	sp, r7
    a74a:	bd80      	pop	{r7, pc}
    a74c:	41008000 	.word	0x41008000
    a750:	0000a49d 	.word	0x0000a49d
    a754:	0000a4c5 	.word	0x0000a4c5

0000a758 <_gpio_set_pin_function>:
{
    a758:	b590      	push	{r4, r7, lr}
    a75a:	b085      	sub	sp, #20
    a75c:	af00      	add	r7, sp, #0
    a75e:	6078      	str	r0, [r7, #4]
    a760:	6039      	str	r1, [r7, #0]
	uint8_t port = GPIO_PORT(gpio);
    a762:	687b      	ldr	r3, [r7, #4]
    a764:	095b      	lsrs	r3, r3, #5
    a766:	73fb      	strb	r3, [r7, #15]
	uint8_t pin  = GPIO_PIN(gpio);
    a768:	687b      	ldr	r3, [r7, #4]
    a76a:	b2db      	uxtb	r3, r3
    a76c:	f003 031f 	and.w	r3, r3, #31
    a770:	73bb      	strb	r3, [r7, #14]
	if (function == GPIO_PIN_FUNCTION_OFF) {
    a772:	683b      	ldr	r3, [r7, #0]
    a774:	f1b3 3fff 	cmp.w	r3, #4294967295
    a778:	d106      	bne.n	a788 <_gpio_set_pin_function+0x30>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, false);
    a77a:	7bba      	ldrb	r2, [r7, #14]
    a77c:	7bf9      	ldrb	r1, [r7, #15]
    a77e:	2300      	movs	r3, #0
    a780:	4812      	ldr	r0, [pc, #72]	; (a7cc <_gpio_set_pin_function+0x74>)
    a782:	4c13      	ldr	r4, [pc, #76]	; (a7d0 <_gpio_set_pin_function+0x78>)
    a784:	47a0      	blx	r4
}
    a786:	e01d      	b.n	a7c4 <_gpio_set_pin_function+0x6c>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, true);
    a788:	7bba      	ldrb	r2, [r7, #14]
    a78a:	7bf9      	ldrb	r1, [r7, #15]
    a78c:	2301      	movs	r3, #1
    a78e:	480f      	ldr	r0, [pc, #60]	; (a7cc <_gpio_set_pin_function+0x74>)
    a790:	4c0f      	ldr	r4, [pc, #60]	; (a7d0 <_gpio_set_pin_function+0x78>)
    a792:	47a0      	blx	r4
		if (pin & 1) {
    a794:	7bbb      	ldrb	r3, [r7, #14]
    a796:	f003 0301 	and.w	r3, r3, #1
    a79a:	2b00      	cmp	r3, #0
    a79c:	d009      	beq.n	a7b2 <_gpio_set_pin_function+0x5a>
			hri_port_write_PMUX_PMUXO_bf(PORT, port, pin >> 1, function & 0xffff);
    a79e:	7bbb      	ldrb	r3, [r7, #14]
    a7a0:	085b      	lsrs	r3, r3, #1
    a7a2:	b2da      	uxtb	r2, r3
    a7a4:	683b      	ldr	r3, [r7, #0]
    a7a6:	b2db      	uxtb	r3, r3
    a7a8:	7bf9      	ldrb	r1, [r7, #15]
    a7aa:	4808      	ldr	r0, [pc, #32]	; (a7cc <_gpio_set_pin_function+0x74>)
    a7ac:	4c09      	ldr	r4, [pc, #36]	; (a7d4 <_gpio_set_pin_function+0x7c>)
    a7ae:	47a0      	blx	r4
}
    a7b0:	e008      	b.n	a7c4 <_gpio_set_pin_function+0x6c>
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
    a7b2:	7bbb      	ldrb	r3, [r7, #14]
    a7b4:	085b      	lsrs	r3, r3, #1
    a7b6:	b2da      	uxtb	r2, r3
    a7b8:	683b      	ldr	r3, [r7, #0]
    a7ba:	b2db      	uxtb	r3, r3
    a7bc:	7bf9      	ldrb	r1, [r7, #15]
    a7be:	4803      	ldr	r0, [pc, #12]	; (a7cc <_gpio_set_pin_function+0x74>)
    a7c0:	4c05      	ldr	r4, [pc, #20]	; (a7d8 <_gpio_set_pin_function+0x80>)
    a7c2:	47a0      	blx	r4
}
    a7c4:	bf00      	nop
    a7c6:	3714      	adds	r7, #20
    a7c8:	46bd      	mov	sp, r7
    a7ca:	bd90      	pop	{r4, r7, pc}
    a7cc:	41008000 	.word	0x41008000
    a7d0:	0000a5ab 	.word	0x0000a5ab
    a7d4:	0000a54d 	.word	0x0000a54d
    a7d8:	0000a4ed 	.word	0x0000a4ed

0000a7dc <gpio_set_pin_function>:
{
    a7dc:	b580      	push	{r7, lr}
    a7de:	b082      	sub	sp, #8
    a7e0:	af00      	add	r7, sp, #0
    a7e2:	6078      	str	r0, [r7, #4]
    a7e4:	6039      	str	r1, [r7, #0]
	_gpio_set_pin_function(pin, function);
    a7e6:	6839      	ldr	r1, [r7, #0]
    a7e8:	6878      	ldr	r0, [r7, #4]
    a7ea:	4b03      	ldr	r3, [pc, #12]	; (a7f8 <gpio_set_pin_function+0x1c>)
    a7ec:	4798      	blx	r3
}
    a7ee:	bf00      	nop
    a7f0:	3708      	adds	r7, #8
    a7f2:	46bd      	mov	sp, r7
    a7f4:	bd80      	pop	{r7, pc}
    a7f6:	bf00      	nop
    a7f8:	0000a759 	.word	0x0000a759

0000a7fc <gpio_set_pin_direction>:
{
    a7fc:	b580      	push	{r7, lr}
    a7fe:	b082      	sub	sp, #8
    a800:	af00      	add	r7, sp, #0
    a802:	4603      	mov	r3, r0
    a804:	460a      	mov	r2, r1
    a806:	71fb      	strb	r3, [r7, #7]
    a808:	4613      	mov	r3, r2
    a80a:	71bb      	strb	r3, [r7, #6]
	_gpio_set_direction((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), direction);
    a80c:	79fb      	ldrb	r3, [r7, #7]
    a80e:	095b      	lsrs	r3, r3, #5
    a810:	b2d8      	uxtb	r0, r3
    a812:	79fb      	ldrb	r3, [r7, #7]
    a814:	f003 031f 	and.w	r3, r3, #31
    a818:	2201      	movs	r2, #1
    a81a:	fa02 f303 	lsl.w	r3, r2, r3
    a81e:	79ba      	ldrb	r2, [r7, #6]
    a820:	4619      	mov	r1, r3
    a822:	4b03      	ldr	r3, [pc, #12]	; (a830 <gpio_set_pin_direction+0x34>)
    a824:	4798      	blx	r3
}
    a826:	bf00      	nop
    a828:	3708      	adds	r7, #8
    a82a:	46bd      	mov	sp, r7
    a82c:	bd80      	pop	{r7, pc}
    a82e:	bf00      	nop
    a830:	0000a62d 	.word	0x0000a62d

0000a834 <gpio_set_pin_level>:
{
    a834:	b580      	push	{r7, lr}
    a836:	b082      	sub	sp, #8
    a838:	af00      	add	r7, sp, #0
    a83a:	4603      	mov	r3, r0
    a83c:	460a      	mov	r2, r1
    a83e:	71fb      	strb	r3, [r7, #7]
    a840:	4613      	mov	r3, r2
    a842:	71bb      	strb	r3, [r7, #6]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
    a844:	79fb      	ldrb	r3, [r7, #7]
    a846:	095b      	lsrs	r3, r3, #5
    a848:	b2d8      	uxtb	r0, r3
    a84a:	79fb      	ldrb	r3, [r7, #7]
    a84c:	f003 031f 	and.w	r3, r3, #31
    a850:	2201      	movs	r2, #1
    a852:	fa02 f303 	lsl.w	r3, r2, r3
    a856:	79ba      	ldrb	r2, [r7, #6]
    a858:	4619      	mov	r1, r3
    a85a:	4b03      	ldr	r3, [pc, #12]	; (a868 <gpio_set_pin_level+0x34>)
    a85c:	4798      	blx	r3
}
    a85e:	bf00      	nop
    a860:	3708      	adds	r7, #8
    a862:	46bd      	mov	sp, r7
    a864:	bd80      	pop	{r7, pc}
    a866:	bf00      	nop
    a868:	0000a715 	.word	0x0000a715

0000a86c <QSPI_N25Q256_exit_xip>:
static struct n25q256a SPI_NOR_FLASH_0_descr;

struct spi_nor_flash *SPI_NOR_FLASH_0;

void QSPI_N25Q256_exit_xip(void)
{
    a86c:	b580      	push	{r7, lr}
    a86e:	b082      	sub	sp, #8
    a870:	af00      	add	r7, sp, #0
	gpio_set_pin_function(FLASH_IO0, 0);
    a872:	2100      	movs	r1, #0
    a874:	2008      	movs	r0, #8
    a876:	4b24      	ldr	r3, [pc, #144]	; (a908 <QSPI_N25Q256_exit_xip+0x9c>)
    a878:	4798      	blx	r3
	gpio_set_pin_function(FLASH_CS, 0);
    a87a:	2100      	movs	r1, #0
    a87c:	202b      	movs	r0, #43	; 0x2b
    a87e:	4b22      	ldr	r3, [pc, #136]	; (a908 <QSPI_N25Q256_exit_xip+0x9c>)
    a880:	4798      	blx	r3
	gpio_set_pin_function(FLASH_CLK, 0);
    a882:	2100      	movs	r1, #0
    a884:	202a      	movs	r0, #42	; 0x2a
    a886:	4b20      	ldr	r3, [pc, #128]	; (a908 <QSPI_N25Q256_exit_xip+0x9c>)
    a888:	4798      	blx	r3

	gpio_set_pin_direction(FLASH_IO0, GPIO_DIRECTION_OUT);
    a88a:	2102      	movs	r1, #2
    a88c:	2008      	movs	r0, #8
    a88e:	4b1f      	ldr	r3, [pc, #124]	; (a90c <QSPI_N25Q256_exit_xip+0xa0>)
    a890:	4798      	blx	r3
	gpio_set_pin_direction(FLASH_CS, GPIO_DIRECTION_OUT);
    a892:	2102      	movs	r1, #2
    a894:	202b      	movs	r0, #43	; 0x2b
    a896:	4b1d      	ldr	r3, [pc, #116]	; (a90c <QSPI_N25Q256_exit_xip+0xa0>)
    a898:	4798      	blx	r3
	gpio_set_pin_direction(FLASH_CLK, GPIO_DIRECTION_OUT);
    a89a:	2102      	movs	r1, #2
    a89c:	202a      	movs	r0, #42	; 0x2a
    a89e:	4b1b      	ldr	r3, [pc, #108]	; (a90c <QSPI_N25Q256_exit_xip+0xa0>)
    a8a0:	4798      	blx	r3

	gpio_set_pin_level(FLASH_IO0, true);
    a8a2:	2101      	movs	r1, #1
    a8a4:	2008      	movs	r0, #8
    a8a6:	4b1a      	ldr	r3, [pc, #104]	; (a910 <QSPI_N25Q256_exit_xip+0xa4>)
    a8a8:	4798      	blx	r3
	gpio_set_pin_level(FLASH_CS, false);
    a8aa:	2100      	movs	r1, #0
    a8ac:	202b      	movs	r0, #43	; 0x2b
    a8ae:	4b18      	ldr	r3, [pc, #96]	; (a910 <QSPI_N25Q256_exit_xip+0xa4>)
    a8b0:	4798      	blx	r3
	gpio_set_pin_level(FLASH_CLK, false);
    a8b2:	2100      	movs	r1, #0
    a8b4:	202a      	movs	r0, #42	; 0x2a
    a8b6:	4b16      	ldr	r3, [pc, #88]	; (a910 <QSPI_N25Q256_exit_xip+0xa4>)
    a8b8:	4798      	blx	r3

	delay_us(1);
    a8ba:	2001      	movs	r0, #1
    a8bc:	4b15      	ldr	r3, [pc, #84]	; (a914 <QSPI_N25Q256_exit_xip+0xa8>)
    a8be:	4798      	blx	r3

	for (int i = 0; i < 7; i++) {
    a8c0:	2300      	movs	r3, #0
    a8c2:	607b      	str	r3, [r7, #4]
    a8c4:	e010      	b.n	a8e8 <QSPI_N25Q256_exit_xip+0x7c>
		gpio_set_pin_level(FLASH_CLK, true);
    a8c6:	2101      	movs	r1, #1
    a8c8:	202a      	movs	r0, #42	; 0x2a
    a8ca:	4b11      	ldr	r3, [pc, #68]	; (a910 <QSPI_N25Q256_exit_xip+0xa4>)
    a8cc:	4798      	blx	r3
		delay_us(1);
    a8ce:	2001      	movs	r0, #1
    a8d0:	4b10      	ldr	r3, [pc, #64]	; (a914 <QSPI_N25Q256_exit_xip+0xa8>)
    a8d2:	4798      	blx	r3
		gpio_set_pin_level(FLASH_CLK, false);
    a8d4:	2100      	movs	r1, #0
    a8d6:	202a      	movs	r0, #42	; 0x2a
    a8d8:	4b0d      	ldr	r3, [pc, #52]	; (a910 <QSPI_N25Q256_exit_xip+0xa4>)
    a8da:	4798      	blx	r3
		delay_us(1);
    a8dc:	2001      	movs	r0, #1
    a8de:	4b0d      	ldr	r3, [pc, #52]	; (a914 <QSPI_N25Q256_exit_xip+0xa8>)
    a8e0:	4798      	blx	r3
	for (int i = 0; i < 7; i++) {
    a8e2:	687b      	ldr	r3, [r7, #4]
    a8e4:	3301      	adds	r3, #1
    a8e6:	607b      	str	r3, [r7, #4]
    a8e8:	687b      	ldr	r3, [r7, #4]
    a8ea:	2b06      	cmp	r3, #6
    a8ec:	ddeb      	ble.n	a8c6 <QSPI_N25Q256_exit_xip+0x5a>
	}

	gpio_set_pin_level(FLASH_CS, true);
    a8ee:	2101      	movs	r1, #1
    a8f0:	202b      	movs	r0, #43	; 0x2b
    a8f2:	4b07      	ldr	r3, [pc, #28]	; (a910 <QSPI_N25Q256_exit_xip+0xa4>)
    a8f4:	4798      	blx	r3
	delay_us(1);
    a8f6:	2001      	movs	r0, #1
    a8f8:	4b06      	ldr	r3, [pc, #24]	; (a914 <QSPI_N25Q256_exit_xip+0xa8>)
    a8fa:	4798      	blx	r3
	QSPI_N25Q256_PORT_init();
    a8fc:	4b06      	ldr	r3, [pc, #24]	; (a918 <QSPI_N25Q256_exit_xip+0xac>)
    a8fe:	4798      	blx	r3
}
    a900:	bf00      	nop
    a902:	3708      	adds	r7, #8
    a904:	46bd      	mov	sp, r7
    a906:	bd80      	pop	{r7, pc}
    a908:	0000a7dd 	.word	0x0000a7dd
    a90c:	0000a7fd 	.word	0x0000a7fd
    a910:	0000a835 	.word	0x0000a835
    a914:	00001de1 	.word	0x00001de1
    a918:	00001339 	.word	0x00001339

0000a91c <spi_nor_flash_init>:

/**
 * \brief Initialize Temperature Sensors
 */
void spi_nor_flash_init(void)
{
    a91c:	b598      	push	{r3, r4, r7, lr}
    a91e:	af00      	add	r7, sp, #0

	qspi_sync_enable(&QSPI_N25Q256);
    a920:	4806      	ldr	r0, [pc, #24]	; (a93c <spi_nor_flash_init+0x20>)
    a922:	4b07      	ldr	r3, [pc, #28]	; (a940 <spi_nor_flash_init+0x24>)
    a924:	4798      	blx	r3
	SPI_NOR_FLASH_0 = n25q256a_construct(
    a926:	2300      	movs	r3, #0
    a928:	4a06      	ldr	r2, [pc, #24]	; (a944 <spi_nor_flash_init+0x28>)
    a92a:	4904      	ldr	r1, [pc, #16]	; (a93c <spi_nor_flash_init+0x20>)
    a92c:	4806      	ldr	r0, [pc, #24]	; (a948 <spi_nor_flash_init+0x2c>)
    a92e:	4c07      	ldr	r4, [pc, #28]	; (a94c <spi_nor_flash_init+0x30>)
    a930:	47a0      	blx	r4
    a932:	4602      	mov	r2, r0
    a934:	4b06      	ldr	r3, [pc, #24]	; (a950 <spi_nor_flash_init+0x34>)
    a936:	601a      	str	r2, [r3, #0]
	    &SPI_NOR_FLASH_0_descr.parent, &QSPI_N25Q256, QSPI_N25Q256_exit_xip, CONF_SPI_NOR_FLASH_0_QUAD_MODE);
}
    a938:	bf00      	nop
    a93a:	bd98      	pop	{r3, r4, r7, pc}
    a93c:	20000c94 	.word	0x20000c94
    a940:	00002295 	.word	0x00002295
    a944:	0000a86d 	.word	0x0000a86d
    a948:	20000b48 	.word	0x20000b48
    a94c:	0000ad89 	.word	0x0000ad89
    a950:	20000e44 	.word	0x20000e44

0000a954 <cdc_device_acm_init>:

/**
 * \brief CDC ACM Init
 */
void cdc_device_acm_init(void)
{
    a954:	b580      	push	{r7, lr}
    a956:	af00      	add	r7, sp, #0
	/* usb stack init */
	usbdc_init(ctrl_buffer);
    a958:	4805      	ldr	r0, [pc, #20]	; (a970 <cdc_device_acm_init+0x1c>)
    a95a:	4b06      	ldr	r3, [pc, #24]	; (a974 <cdc_device_acm_init+0x20>)
    a95c:	4798      	blx	r3

	/* usbdc_register_funcion inside */
	cdcdf_acm_init();
    a95e:	4b06      	ldr	r3, [pc, #24]	; (a978 <cdc_device_acm_init+0x24>)
    a960:	4798      	blx	r3

	usbdc_start(single_desc);
    a962:	4806      	ldr	r0, [pc, #24]	; (a97c <cdc_device_acm_init+0x28>)
    a964:	4b06      	ldr	r3, [pc, #24]	; (a980 <cdc_device_acm_init+0x2c>)
    a966:	4798      	blx	r3
	usbdc_attach();
    a968:	4b06      	ldr	r3, [pc, #24]	; (a984 <cdc_device_acm_init+0x30>)
    a96a:	4798      	blx	r3
}
    a96c:	bf00      	nop
    a96e:	bd80      	pop	{r7, pc}
    a970:	20000b98 	.word	0x20000b98
    a974:	0000c375 	.word	0x0000c375
    a978:	0000b729 	.word	0x0000b729
    a97c:	200000ec 	.word	0x200000ec
    a980:	0000c411 	.word	0x0000c411
    a984:	0000c461 	.word	0x0000c461

0000a988 <usb_init>:
	while (1) {
	}
}

void usb_init(void)
{
    a988:	b580      	push	{r7, lr}
    a98a:	af00      	add	r7, sp, #0

	cdc_device_acm_init();
    a98c:	4b01      	ldr	r3, [pc, #4]	; (a994 <usb_init+0xc>)
    a98e:	4798      	blx	r3
}
    a990:	bf00      	nop
    a992:	bd80      	pop	{r7, pc}
    a994:	0000a955 	.word	0x0000a955

0000a998 <atomic_enter_critical>:

/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
    a998:	b480      	push	{r7}
    a99a:	b085      	sub	sp, #20
    a99c:	af00      	add	r7, sp, #0
    a99e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    a9a0:	f3ef 8310 	mrs	r3, PRIMASK
    a9a4:	60fb      	str	r3, [r7, #12]
  return(result);
    a9a6:	68fa      	ldr	r2, [r7, #12]
	*atomic = __get_PRIMASK();
    a9a8:	687b      	ldr	r3, [r7, #4]
    a9aa:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
    a9ac:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    a9ae:	f3bf 8f5f 	dmb	sy
	__disable_irq();
	__DMB();
}
    a9b2:	bf00      	nop
    a9b4:	3714      	adds	r7, #20
    a9b6:	46bd      	mov	sp, r7
    a9b8:	f85d 7b04 	ldr.w	r7, [sp], #4
    a9bc:	4770      	bx	lr

0000a9be <atomic_leave_critical>:

/**
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
    a9be:	b480      	push	{r7}
    a9c0:	b085      	sub	sp, #20
    a9c2:	af00      	add	r7, sp, #0
    a9c4:	6078      	str	r0, [r7, #4]
    a9c6:	f3bf 8f5f 	dmb	sy
	__DMB();
	__set_PRIMASK(*atomic);
    a9ca:	687b      	ldr	r3, [r7, #4]
    a9cc:	681b      	ldr	r3, [r3, #0]
    a9ce:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    a9d0:	68fb      	ldr	r3, [r7, #12]
    a9d2:	f383 8810 	msr	PRIMASK, r3
}
    a9d6:	bf00      	nop
    a9d8:	3714      	adds	r7, #20
    a9da:	46bd      	mov	sp, r7
    a9dc:	f85d 7b04 	ldr.w	r7, [sp], #4
    a9e0:	4770      	bx	lr
	...

0000a9e4 <n25q256a_xip_confirm>:
    n25q256a_enable_xip,
    n25q256a_disable_xip,
};

int32_t n25q256a_xip_confirm(const struct spi_nor_flash *const me, const bool on_off)
{
    a9e4:	b580      	push	{r7, lr}
    a9e6:	b08c      	sub	sp, #48	; 0x30
    a9e8:	af00      	add	r7, sp, #0
    a9ea:	6078      	str	r0, [r7, #4]
    a9ec:	460b      	mov	r3, r1
    a9ee:	70fb      	strb	r3, [r7, #3]
	uint8_t                      dummy;
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    a9f0:	687b      	ldr	r3, [r7, #4]
    a9f2:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    a9f4:	687b      	ldr	r3, [r7, #4]
    a9f6:	681b      	ldr	r3, [r3, #0]
    a9f8:	62bb      	str	r3, [r7, #40]	; 0x28
	struct _qspi_command         cmd
    a9fa:	f107 030c 	add.w	r3, r7, #12
    a9fe:	2200      	movs	r2, #0
    aa00:	601a      	str	r2, [r3, #0]
    aa02:	605a      	str	r2, [r3, #4]
    aa04:	609a      	str	r2, [r3, #8]
    aa06:	60da      	str	r2, [r3, #12]
    aa08:	611a      	str	r2, [r3, #16]
    aa0a:	615a      	str	r2, [r3, #20]
	    = {.inst_frame.bits.width        = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1,
    aa0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    aa0e:	7b1b      	ldrb	r3, [r3, #12]
    aa10:	2b00      	cmp	r3, #0
    aa12:	d001      	beq.n	aa18 <n25q256a_xip_confirm+0x34>
    aa14:	2206      	movs	r2, #6
    aa16:	e000      	b.n	aa1a <n25q256a_xip_confirm+0x36>
    aa18:	2200      	movs	r2, #0
	struct _qspi_command         cmd
    aa1a:	7b3b      	ldrb	r3, [r7, #12]
    aa1c:	f362 0302 	bfi	r3, r2, #0, #3
    aa20:	733b      	strb	r3, [r7, #12]
    aa22:	7b3b      	ldrb	r3, [r7, #12]
    aa24:	f043 0310 	orr.w	r3, r3, #16
    aa28:	733b      	strb	r3, [r7, #12]
    aa2a:	7b3b      	ldrb	r3, [r7, #12]
    aa2c:	f043 0320 	orr.w	r3, r3, #32
    aa30:	733b      	strb	r3, [r7, #12]
    aa32:	7b3b      	ldrb	r3, [r7, #12]
    aa34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    aa38:	733b      	strb	r3, [r7, #12]
    aa3a:	7b3b      	ldrb	r3, [r7, #12]
    aa3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    aa40:	733b      	strb	r3, [r7, #12]
    aa42:	7b7b      	ldrb	r3, [r7, #13]
    aa44:	f043 0303 	orr.w	r3, r3, #3
    aa48:	737b      	strb	r3, [r7, #13]
    aa4a:	7b7b      	ldrb	r3, [r7, #13]
    aa4c:	2201      	movs	r2, #1
    aa4e:	f362 1305 	bfi	r3, r2, #4, #2
    aa52:	737b      	strb	r3, [r7, #13]
	       .inst_frame.bits.inst_en      = 1,
	       .inst_frame.bits.data_en      = 1,
	       .inst_frame.bits.addr_en      = 1,
	       .inst_frame.bits.opt_en       = 1,
	       .inst_frame.bits.opt_len      = QSPI_OPT_8BIT,
	       .inst_frame.bits.dummy_cycles = n25q->quad_mode ? 8 : 0,
    aa54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    aa56:	7b1b      	ldrb	r3, [r3, #12]
    aa58:	2b00      	cmp	r3, #0
    aa5a:	d001      	beq.n	aa60 <n25q256a_xip_confirm+0x7c>
    aa5c:	2208      	movs	r2, #8
    aa5e:	e000      	b.n	aa62 <n25q256a_xip_confirm+0x7e>
    aa60:	2200      	movs	r2, #0
	struct _qspi_command         cmd
    aa62:	7bbb      	ldrb	r3, [r7, #14]
    aa64:	f362 0304 	bfi	r3, r2, #0, #5
    aa68:	73bb      	strb	r3, [r7, #14]
    aa6a:	230b      	movs	r3, #11
    aa6c:	743b      	strb	r3, [r7, #16]
    aa6e:	78fb      	ldrb	r3, [r7, #3]
    aa70:	2b00      	cmp	r3, #0
    aa72:	d001      	beq.n	aa78 <n25q256a_xip_confirm+0x94>
    aa74:	2300      	movs	r3, #0
    aa76:	e000      	b.n	aa7a <n25q256a_xip_confirm+0x96>
    aa78:	23ff      	movs	r3, #255	; 0xff
    aa7a:	747b      	strb	r3, [r7, #17]
    aa7c:	2301      	movs	r3, #1
    aa7e:	61bb      	str	r3, [r7, #24]
    aa80:	f107 0327 	add.w	r3, r7, #39	; 0x27
    aa84:	623b      	str	r3, [r7, #32]
	       .instruction                  = N25Q_FAST_READ,
	       .option                       = on_off ? 0x00 : 0xFF,
	       .address                      = 0,
	       .buf_len                      = 1,
	       .rx_buf                       = &dummy};
	qspi_sync_serial_run_command(descr, &cmd);
    aa86:	f107 030c 	add.w	r3, r7, #12
    aa8a:	4619      	mov	r1, r3
    aa8c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    aa8e:	4b07      	ldr	r3, [pc, #28]	; (aaac <n25q256a_xip_confirm+0xc8>)
    aa90:	4798      	blx	r3
	n25q->xip_mode = on_off ? 2 : 1;
    aa92:	78fb      	ldrb	r3, [r7, #3]
    aa94:	2b00      	cmp	r3, #0
    aa96:	d001      	beq.n	aa9c <n25q256a_xip_confirm+0xb8>
    aa98:	2202      	movs	r2, #2
    aa9a:	e000      	b.n	aa9e <n25q256a_xip_confirm+0xba>
    aa9c:	2201      	movs	r2, #1
    aa9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    aaa0:	735a      	strb	r2, [r3, #13]
	return ERR_NONE;
    aaa2:	2300      	movs	r3, #0
}
    aaa4:	4618      	mov	r0, r3
    aaa6:	3730      	adds	r7, #48	; 0x30
    aaa8:	46bd      	mov	sp, r7
    aaaa:	bd80      	pop	{r7, pc}
    aaac:	0000230d 	.word	0x0000230d

0000aab0 <n25q256a_read_reg>:

uint32_t n25q256a_read_reg(const struct spi_nor_flash *const me, uint8_t width, uint8_t inst)
{
    aab0:	b580      	push	{r7, lr}
    aab2:	b08c      	sub	sp, #48	; 0x30
    aab4:	af00      	add	r7, sp, #0
    aab6:	6078      	str	r0, [r7, #4]
    aab8:	460b      	mov	r3, r1
    aaba:	70fb      	strb	r3, [r7, #3]
    aabc:	4613      	mov	r3, r2
    aabe:	70bb      	strb	r3, [r7, #2]
	uint32_t                     status = 0;
    aac0:	2300      	movs	r3, #0
    aac2:	627b      	str	r3, [r7, #36]	; 0x24
	struct n25q256a *            n25q   = (struct n25q256a *)me;
    aac4:	687b      	ldr	r3, [r7, #4]
    aac6:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr  = (struct qspi_sync_descriptor *)(me->io);
    aac8:	687b      	ldr	r3, [r7, #4]
    aaca:	681b      	ldr	r3, [r3, #0]
    aacc:	62bb      	str	r3, [r7, #40]	; 0x28
	struct _qspi_command         cmd    = {.inst_frame.bits.width    = width,
    aace:	f107 030c 	add.w	r3, r7, #12
    aad2:	2200      	movs	r2, #0
    aad4:	601a      	str	r2, [r3, #0]
    aad6:	605a      	str	r2, [r3, #4]
    aad8:	609a      	str	r2, [r3, #8]
    aada:	60da      	str	r2, [r3, #12]
    aadc:	611a      	str	r2, [r3, #16]
    aade:	615a      	str	r2, [r3, #20]
    aae0:	78fb      	ldrb	r3, [r7, #3]
    aae2:	f003 0307 	and.w	r3, r3, #7
    aae6:	b2da      	uxtb	r2, r3
    aae8:	7b3b      	ldrb	r3, [r7, #12]
    aaea:	f362 0302 	bfi	r3, r2, #0, #3
    aaee:	733b      	strb	r3, [r7, #12]
    aaf0:	7b3b      	ldrb	r3, [r7, #12]
    aaf2:	f043 0310 	orr.w	r3, r3, #16
    aaf6:	733b      	strb	r3, [r7, #12]
    aaf8:	7b3b      	ldrb	r3, [r7, #12]
    aafa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    aafe:	733b      	strb	r3, [r7, #12]
    ab00:	78bb      	ldrb	r3, [r7, #2]
    ab02:	743b      	strb	r3, [r7, #16]
    ab04:	2301      	movs	r3, #1
    ab06:	61bb      	str	r3, [r7, #24]
    ab08:	f107 0324 	add.w	r3, r7, #36	; 0x24
    ab0c:	623b      	str	r3, [r7, #32]
                                .inst_frame.bits.data_en  = 1,
                                .inst_frame.bits.tfr_type = QSPI_READ_ACCESS,
                                .instruction              = inst,
                                .buf_len                  = N25Q_RD_REG_SIZE(inst),
                                .rx_buf                   = &status};
	if (n25q->xip_mode) {
    ab0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    ab10:	7b5b      	ldrb	r3, [r3, #13]
    ab12:	2b00      	cmp	r3, #0
    ab14:	d003      	beq.n	ab1e <n25q256a_read_reg+0x6e>
		n25q256a_xip_confirm(me, false);
    ab16:	2100      	movs	r1, #0
    ab18:	6878      	ldr	r0, [r7, #4]
    ab1a:	4b0a      	ldr	r3, [pc, #40]	; (ab44 <n25q256a_read_reg+0x94>)
    ab1c:	4798      	blx	r3
	}
	qspi_sync_serial_run_command(descr, &cmd);
    ab1e:	f107 030c 	add.w	r3, r7, #12
    ab22:	4619      	mov	r1, r3
    ab24:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    ab26:	4b08      	ldr	r3, [pc, #32]	; (ab48 <n25q256a_read_reg+0x98>)
    ab28:	4798      	blx	r3
	if (n25q->xip_mode) {
    ab2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    ab2c:	7b5b      	ldrb	r3, [r3, #13]
    ab2e:	2b00      	cmp	r3, #0
    ab30:	d003      	beq.n	ab3a <n25q256a_read_reg+0x8a>
		n25q256a_xip_confirm(me, true);
    ab32:	2101      	movs	r1, #1
    ab34:	6878      	ldr	r0, [r7, #4]
    ab36:	4b03      	ldr	r3, [pc, #12]	; (ab44 <n25q256a_read_reg+0x94>)
    ab38:	4798      	blx	r3
	}
	return status;
    ab3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
    ab3c:	4618      	mov	r0, r3
    ab3e:	3730      	adds	r7, #48	; 0x30
    ab40:	46bd      	mov	sp, r7
    ab42:	bd80      	pop	{r7, pc}
    ab44:	0000a9e5 	.word	0x0000a9e5
    ab48:	0000230d 	.word	0x0000230d

0000ab4c <n25q256a_write_reg>:
void n25q256a_write_reg(const struct spi_nor_flash *const me, uint8_t width, uint8_t inst, uint32_t data)
{
    ab4c:	b580      	push	{r7, lr}
    ab4e:	b08c      	sub	sp, #48	; 0x30
    ab50:	af00      	add	r7, sp, #0
    ab52:	60f8      	str	r0, [r7, #12]
    ab54:	607b      	str	r3, [r7, #4]
    ab56:	460b      	mov	r3, r1
    ab58:	72fb      	strb	r3, [r7, #11]
    ab5a:	4613      	mov	r3, r2
    ab5c:	72bb      	strb	r3, [r7, #10]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    ab5e:	68fb      	ldr	r3, [r7, #12]
    ab60:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    ab62:	68fb      	ldr	r3, [r7, #12]
    ab64:	681b      	ldr	r3, [r3, #0]
    ab66:	62bb      	str	r3, [r7, #40]	; 0x28
	struct _qspi_command         cmd   = {.inst_frame.bits.width    = width,
    ab68:	f107 0310 	add.w	r3, r7, #16
    ab6c:	2200      	movs	r2, #0
    ab6e:	601a      	str	r2, [r3, #0]
    ab70:	605a      	str	r2, [r3, #4]
    ab72:	609a      	str	r2, [r3, #8]
    ab74:	60da      	str	r2, [r3, #12]
    ab76:	611a      	str	r2, [r3, #16]
    ab78:	615a      	str	r2, [r3, #20]
    ab7a:	7afb      	ldrb	r3, [r7, #11]
    ab7c:	f003 0307 	and.w	r3, r3, #7
    ab80:	b2da      	uxtb	r2, r3
    ab82:	7c3b      	ldrb	r3, [r7, #16]
    ab84:	f362 0302 	bfi	r3, r2, #0, #3
    ab88:	743b      	strb	r3, [r7, #16]
    ab8a:	7c3b      	ldrb	r3, [r7, #16]
    ab8c:	f043 0310 	orr.w	r3, r3, #16
    ab90:	743b      	strb	r3, [r7, #16]
    ab92:	7c3b      	ldrb	r3, [r7, #16]
    ab94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    ab98:	743b      	strb	r3, [r7, #16]
    ab9a:	7c7b      	ldrb	r3, [r7, #17]
    ab9c:	2202      	movs	r2, #2
    ab9e:	f362 1305 	bfi	r3, r2, #4, #2
    aba2:	747b      	strb	r3, [r7, #17]
    aba4:	7abb      	ldrb	r3, [r7, #10]
    aba6:	753b      	strb	r3, [r7, #20]
    aba8:	2301      	movs	r3, #1
    abaa:	61fb      	str	r3, [r7, #28]
    abac:	1d3b      	adds	r3, r7, #4
    abae:	623b      	str	r3, [r7, #32]
                                .inst_frame.bits.data_en  = 1,
                                .inst_frame.bits.tfr_type = QSPI_WRITE_ACCESS,
                                .instruction              = inst,
                                .buf_len                  = N25Q_WR_REG_SIZE(inst),
                                .tx_buf                   = &data};
	if (n25q->xip_mode) {
    abb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    abb2:	7b5b      	ldrb	r3, [r3, #13]
    abb4:	2b00      	cmp	r3, #0
    abb6:	d003      	beq.n	abc0 <n25q256a_write_reg+0x74>
		n25q256a_xip_confirm(me, false);
    abb8:	2100      	movs	r1, #0
    abba:	68f8      	ldr	r0, [r7, #12]
    abbc:	4b09      	ldr	r3, [pc, #36]	; (abe4 <n25q256a_write_reg+0x98>)
    abbe:	4798      	blx	r3
	}
	qspi_sync_serial_run_command(descr, &cmd);
    abc0:	f107 0310 	add.w	r3, r7, #16
    abc4:	4619      	mov	r1, r3
    abc6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    abc8:	4b07      	ldr	r3, [pc, #28]	; (abe8 <n25q256a_write_reg+0x9c>)
    abca:	4798      	blx	r3
	if (n25q->xip_mode) {
    abcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    abce:	7b5b      	ldrb	r3, [r3, #13]
    abd0:	2b00      	cmp	r3, #0
    abd2:	d003      	beq.n	abdc <n25q256a_write_reg+0x90>
		n25q256a_xip_confirm(me, true);
    abd4:	2101      	movs	r1, #1
    abd6:	68f8      	ldr	r0, [r7, #12]
    abd8:	4b02      	ldr	r3, [pc, #8]	; (abe4 <n25q256a_write_reg+0x98>)
    abda:	4798      	blx	r3
	}
}
    abdc:	bf00      	nop
    abde:	3730      	adds	r7, #48	; 0x30
    abe0:	46bd      	mov	sp, r7
    abe2:	bd80      	pop	{r7, pc}
    abe4:	0000a9e5 	.word	0x0000a9e5
    abe8:	0000230d 	.word	0x0000230d

0000abec <n25q256a_write_enable>:

void n25q256a_write_enable(const struct spi_nor_flash *const me, uint8_t width, bool en)
{
    abec:	b580      	push	{r7, lr}
    abee:	b090      	sub	sp, #64	; 0x40
    abf0:	af00      	add	r7, sp, #0
    abf2:	6078      	str	r0, [r7, #4]
    abf4:	460b      	mov	r3, r1
    abf6:	70fb      	strb	r3, [r7, #3]
    abf8:	4613      	mov	r3, r2
    abfa:	70bb      	strb	r3, [r7, #2]
	uint8_t                      status;
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    abfc:	687b      	ldr	r3, [r7, #4]
    abfe:	681b      	ldr	r3, [r3, #0]
    ac00:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint8_t                      inst  = (en == true ? N25Q_WRITE_ENABLE : N25Q_WRITE_DISABLE);
    ac02:	78bb      	ldrb	r3, [r7, #2]
    ac04:	2b00      	cmp	r3, #0
    ac06:	d001      	beq.n	ac0c <n25q256a_write_enable+0x20>
    ac08:	2306      	movs	r3, #6
    ac0a:	e000      	b.n	ac0e <n25q256a_write_enable+0x22>
    ac0c:	2304      	movs	r3, #4
    ac0e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	struct _qspi_command cmd_en = {.inst_frame.bits.width = width, .inst_frame.bits.inst_en = 1, .instruction = inst};
    ac12:	f107 0320 	add.w	r3, r7, #32
    ac16:	2200      	movs	r2, #0
    ac18:	601a      	str	r2, [r3, #0]
    ac1a:	605a      	str	r2, [r3, #4]
    ac1c:	609a      	str	r2, [r3, #8]
    ac1e:	60da      	str	r2, [r3, #12]
    ac20:	611a      	str	r2, [r3, #16]
    ac22:	615a      	str	r2, [r3, #20]
    ac24:	78fb      	ldrb	r3, [r7, #3]
    ac26:	f003 0307 	and.w	r3, r3, #7
    ac2a:	b2da      	uxtb	r2, r3
    ac2c:	f897 3020 	ldrb.w	r3, [r7, #32]
    ac30:	f362 0302 	bfi	r3, r2, #0, #3
    ac34:	f887 3020 	strb.w	r3, [r7, #32]
    ac38:	f897 3020 	ldrb.w	r3, [r7, #32]
    ac3c:	f043 0310 	orr.w	r3, r3, #16
    ac40:	f887 3020 	strb.w	r3, [r7, #32]
    ac44:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
    ac48:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	struct _qspi_command cmd_st = {.inst_frame.bits.width    = width,
    ac4c:	f107 0308 	add.w	r3, r7, #8
    ac50:	2200      	movs	r2, #0
    ac52:	601a      	str	r2, [r3, #0]
    ac54:	605a      	str	r2, [r3, #4]
    ac56:	609a      	str	r2, [r3, #8]
    ac58:	60da      	str	r2, [r3, #12]
    ac5a:	611a      	str	r2, [r3, #16]
    ac5c:	615a      	str	r2, [r3, #20]
    ac5e:	78fb      	ldrb	r3, [r7, #3]
    ac60:	f003 0307 	and.w	r3, r3, #7
    ac64:	b2da      	uxtb	r2, r3
    ac66:	7a3b      	ldrb	r3, [r7, #8]
    ac68:	f362 0302 	bfi	r3, r2, #0, #3
    ac6c:	723b      	strb	r3, [r7, #8]
    ac6e:	7a3b      	ldrb	r3, [r7, #8]
    ac70:	f043 0310 	orr.w	r3, r3, #16
    ac74:	723b      	strb	r3, [r7, #8]
    ac76:	7a3b      	ldrb	r3, [r7, #8]
    ac78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    ac7c:	723b      	strb	r3, [r7, #8]
    ac7e:	2305      	movs	r3, #5
    ac80:	733b      	strb	r3, [r7, #12]
    ac82:	2301      	movs	r3, #1
    ac84:	617b      	str	r3, [r7, #20]
    ac86:	f107 033a 	add.w	r3, r7, #58	; 0x3a
    ac8a:	61fb      	str	r3, [r7, #28]
	                               .inst_frame.bits.tfr_type = QSPI_READ_ACCESS,
	                               .instruction              = N25Q_READ_STATUS_REGISTER,
	                               .buf_len                  = 1,
	                               .rx_buf                   = &status};
	do {
		qspi_sync_serial_run_command(descr, &cmd_en);
    ac8c:	f107 0320 	add.w	r3, r7, #32
    ac90:	4619      	mov	r1, r3
    ac92:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
    ac94:	4b08      	ldr	r3, [pc, #32]	; (acb8 <n25q256a_write_enable+0xcc>)
    ac96:	4798      	blx	r3
		qspi_sync_serial_run_command(descr, &cmd_st);
    ac98:	f107 0308 	add.w	r3, r7, #8
    ac9c:	4619      	mov	r1, r3
    ac9e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
    aca0:	4b05      	ldr	r3, [pc, #20]	; (acb8 <n25q256a_write_enable+0xcc>)
    aca2:	4798      	blx	r3
	} while ((status & (1 << 1)) == 0);
    aca4:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
    aca8:	f003 0302 	and.w	r3, r3, #2
    acac:	2b00      	cmp	r3, #0
    acae:	d0ed      	beq.n	ac8c <n25q256a_write_enable+0xa0>
}
    acb0:	bf00      	nop
    acb2:	3740      	adds	r7, #64	; 0x40
    acb4:	46bd      	mov	sp, r7
    acb6:	bd80      	pop	{r7, pc}
    acb8:	0000230d 	.word	0x0000230d

0000acbc <n25q256a_switch_mode>:

void n25q256a_switch_mode(const struct spi_nor_flash *const me, uint8_t mode)
{
    acbc:	b590      	push	{r4, r7, lr}
    acbe:	b087      	sub	sp, #28
    acc0:	af00      	add	r7, sp, #0
    acc2:	6078      	str	r0, [r7, #4]
    acc4:	460b      	mov	r3, r1
    acc6:	70fb      	strb	r3, [r7, #3]
	struct n25q256a *n25q   = (struct n25q256a *)me;
    acc8:	687b      	ldr	r3, [r7, #4]
    acca:	60fb      	str	r3, [r7, #12]
	uint8_t          width  = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    accc:	68fb      	ldr	r3, [r7, #12]
    acce:	7b1b      	ldrb	r3, [r3, #12]
    acd0:	2b00      	cmp	r3, #0
    acd2:	d001      	beq.n	acd8 <n25q256a_switch_mode+0x1c>
    acd4:	2306      	movs	r3, #6
    acd6:	e000      	b.n	acda <n25q256a_switch_mode+0x1e>
    acd8:	2300      	movs	r3, #0
    acda:	72fb      	strb	r3, [r7, #11]
	uint32_t         evcfg  = n25q256a_read_reg(me, width, N25Q_READ_ENHANCED_VOLATILE_CONFIG_REGISTER);
    acdc:	7afb      	ldrb	r3, [r7, #11]
    acde:	2265      	movs	r2, #101	; 0x65
    ace0:	4619      	mov	r1, r3
    ace2:	6878      	ldr	r0, [r7, #4]
    ace4:	4b25      	ldr	r3, [pc, #148]	; (ad7c <n25q256a_switch_mode+0xc0>)
    ace6:	4798      	blx	r3
    ace8:	6178      	str	r0, [r7, #20]
	uint8_t          modify = 0;
    acea:	2300      	movs	r3, #0
    acec:	74fb      	strb	r3, [r7, #19]
	if (n25q->quad_mode == mode) {
    acee:	68fb      	ldr	r3, [r7, #12]
    acf0:	7b1b      	ldrb	r3, [r3, #12]
    acf2:	78fa      	ldrb	r2, [r7, #3]
    acf4:	429a      	cmp	r2, r3
    acf6:	d03d      	beq.n	ad74 <n25q256a_switch_mode+0xb8>
		return;
	}
	if (mode) {
    acf8:	78fb      	ldrb	r3, [r7, #3]
    acfa:	2b00      	cmp	r3, #0
    acfc:	d00b      	beq.n	ad16 <n25q256a_switch_mode+0x5a>
		if (evcfg & 0x80) {
    acfe:	697b      	ldr	r3, [r7, #20]
    ad00:	f003 0380 	and.w	r3, r3, #128	; 0x80
    ad04:	2b00      	cmp	r3, #0
    ad06:	d011      	beq.n	ad2c <n25q256a_switch_mode+0x70>
			evcfg &= 0x1F;
    ad08:	697b      	ldr	r3, [r7, #20]
    ad0a:	f003 031f 	and.w	r3, r3, #31
    ad0e:	617b      	str	r3, [r7, #20]
			modify = 1;
    ad10:	2301      	movs	r3, #1
    ad12:	74fb      	strb	r3, [r7, #19]
    ad14:	e00a      	b.n	ad2c <n25q256a_switch_mode+0x70>
		}
	} else {
		if (!(evcfg & 0x80)) {
    ad16:	697b      	ldr	r3, [r7, #20]
    ad18:	f003 0380 	and.w	r3, r3, #128	; 0x80
    ad1c:	2b00      	cmp	r3, #0
    ad1e:	d105      	bne.n	ad2c <n25q256a_switch_mode+0x70>
			evcfg |= 0xC0;
    ad20:	697b      	ldr	r3, [r7, #20]
    ad22:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
    ad26:	617b      	str	r3, [r7, #20]
			modify = 1;
    ad28:	2301      	movs	r3, #1
    ad2a:	74fb      	strb	r3, [r7, #19]
		}
	}
	if (modify) {
    ad2c:	7cfb      	ldrb	r3, [r7, #19]
    ad2e:	2b00      	cmp	r3, #0
    ad30:	d021      	beq.n	ad76 <n25q256a_switch_mode+0xba>
		n25q->quad_mode = mode;
    ad32:	68fb      	ldr	r3, [r7, #12]
    ad34:	78fa      	ldrb	r2, [r7, #3]
    ad36:	731a      	strb	r2, [r3, #12]
		n25q256a_write_enable(me, width, true);
    ad38:	7afb      	ldrb	r3, [r7, #11]
    ad3a:	2201      	movs	r2, #1
    ad3c:	4619      	mov	r1, r3
    ad3e:	6878      	ldr	r0, [r7, #4]
    ad40:	4b0f      	ldr	r3, [pc, #60]	; (ad80 <n25q256a_switch_mode+0xc4>)
    ad42:	4798      	blx	r3
		n25q256a_write_reg(me, width, N25Q_WRITE_ENHANCED_VOLATILE_CONFIG_REGISTER, evcfg);
    ad44:	7af9      	ldrb	r1, [r7, #11]
    ad46:	697b      	ldr	r3, [r7, #20]
    ad48:	2261      	movs	r2, #97	; 0x61
    ad4a:	6878      	ldr	r0, [r7, #4]
    ad4c:	4c0d      	ldr	r4, [pc, #52]	; (ad84 <n25q256a_switch_mode+0xc8>)
    ad4e:	47a0      	blx	r4
		width           = mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    ad50:	78fb      	ldrb	r3, [r7, #3]
    ad52:	2b00      	cmp	r3, #0
    ad54:	d001      	beq.n	ad5a <n25q256a_switch_mode+0x9e>
    ad56:	2306      	movs	r3, #6
    ad58:	e000      	b.n	ad5c <n25q256a_switch_mode+0xa0>
    ad5a:	2300      	movs	r3, #0
    ad5c:	72fb      	strb	r3, [r7, #11]
		evcfg           = n25q256a_read_reg(me, width, N25Q_READ_ENHANCED_VOLATILE_CONFIG_REGISTER);
    ad5e:	7afb      	ldrb	r3, [r7, #11]
    ad60:	2265      	movs	r2, #101	; 0x65
    ad62:	4619      	mov	r1, r3
    ad64:	6878      	ldr	r0, [r7, #4]
    ad66:	4b05      	ldr	r3, [pc, #20]	; (ad7c <n25q256a_switch_mode+0xc0>)
    ad68:	4798      	blx	r3
    ad6a:	6178      	str	r0, [r7, #20]
		n25q->quad_mode = mode;
    ad6c:	68fb      	ldr	r3, [r7, #12]
    ad6e:	78fa      	ldrb	r2, [r7, #3]
    ad70:	731a      	strb	r2, [r3, #12]
    ad72:	e000      	b.n	ad76 <n25q256a_switch_mode+0xba>
		return;
    ad74:	bf00      	nop
	}
}
    ad76:	371c      	adds	r7, #28
    ad78:	46bd      	mov	sp, r7
    ad7a:	bd90      	pop	{r4, r7, pc}
    ad7c:	0000aab1 	.word	0x0000aab1
    ad80:	0000abed 	.word	0x0000abed
    ad84:	0000ab4d 	.word	0x0000ab4d

0000ad88 <n25q256a_construct>:
/**
 * \brief Construct n25q256a spi nor flash
 */
struct spi_nor_flash *n25q256a_construct(struct spi_nor_flash *const me, void *const io, func pin_exit_xip,
                                         const uint8_t quad_mode)
{
    ad88:	b580      	push	{r7, lr}
    ad8a:	b086      	sub	sp, #24
    ad8c:	af00      	add	r7, sp, #0
    ad8e:	60f8      	str	r0, [r7, #12]
    ad90:	60b9      	str	r1, [r7, #8]
    ad92:	607a      	str	r2, [r7, #4]
    ad94:	70fb      	strb	r3, [r7, #3]
	struct n25q256a *n25q = (struct n25q256a *)me;
    ad96:	68fb      	ldr	r3, [r7, #12]
    ad98:	617b      	str	r3, [r7, #20]
	spi_nor_flash_construct(me, io, &n25q256a_interface);
    ad9a:	4a0c      	ldr	r2, [pc, #48]	; (adcc <n25q256a_construct+0x44>)
    ad9c:	68b9      	ldr	r1, [r7, #8]
    ad9e:	68f8      	ldr	r0, [r7, #12]
    ada0:	4b0b      	ldr	r3, [pc, #44]	; (add0 <n25q256a_construct+0x48>)
    ada2:	4798      	blx	r3
	n25q->quad_mode    = 0;
    ada4:	697b      	ldr	r3, [r7, #20]
    ada6:	2200      	movs	r2, #0
    ada8:	731a      	strb	r2, [r3, #12]
	n25q->xip_mode     = false;
    adaa:	697b      	ldr	r3, [r7, #20]
    adac:	2200      	movs	r2, #0
    adae:	735a      	strb	r2, [r3, #13]
	n25q->pin_exit_xip = pin_exit_xip;
    adb0:	697b      	ldr	r3, [r7, #20]
    adb2:	687a      	ldr	r2, [r7, #4]
    adb4:	609a      	str	r2, [r3, #8]
	n25q256a_switch_mode(me, quad_mode);
    adb6:	78fb      	ldrb	r3, [r7, #3]
    adb8:	4619      	mov	r1, r3
    adba:	68f8      	ldr	r0, [r7, #12]
    adbc:	4b05      	ldr	r3, [pc, #20]	; (add4 <n25q256a_construct+0x4c>)
    adbe:	4798      	blx	r3
	return me;
    adc0:	68fb      	ldr	r3, [r7, #12]
}
    adc2:	4618      	mov	r0, r3
    adc4:	3718      	adds	r7, #24
    adc6:	46bd      	mov	sp, r7
    adc8:	bd80      	pop	{r7, pc}
    adca:	bf00      	nop
    adcc:	0000cf48 	.word	0x0000cf48
    add0:	0000b265 	.word	0x0000b265
    add4:	0000acbd 	.word	0x0000acbd

0000add8 <n25q256a_read>:

int32_t n25q256a_read(const struct spi_nor_flash *const me, uint8_t *buf, uint32_t address, uint32_t length)
{
    add8:	b580      	push	{r7, lr}
    adda:	b08c      	sub	sp, #48	; 0x30
    addc:	af00      	add	r7, sp, #0
    adde:	60f8      	str	r0, [r7, #12]
    ade0:	60b9      	str	r1, [r7, #8]
    ade2:	607a      	str	r2, [r7, #4]
    ade4:	603b      	str	r3, [r7, #0]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    ade6:	68fb      	ldr	r3, [r7, #12]
    ade8:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    adea:	68fb      	ldr	r3, [r7, #12]
    adec:	681b      	ldr	r3, [r3, #0]
    adee:	62bb      	str	r3, [r7, #40]	; 0x28

	struct _qspi_command cmd = {
    adf0:	f107 0310 	add.w	r3, r7, #16
    adf4:	2200      	movs	r2, #0
    adf6:	601a      	str	r2, [r3, #0]
    adf8:	605a      	str	r2, [r3, #4]
    adfa:	609a      	str	r2, [r3, #8]
    adfc:	60da      	str	r2, [r3, #12]
    adfe:	611a      	str	r2, [r3, #16]
    ae00:	615a      	str	r2, [r3, #20]
	    .inst_frame.bits.width        = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1,
    ae02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    ae04:	7b1b      	ldrb	r3, [r3, #12]
    ae06:	2b00      	cmp	r3, #0
    ae08:	d001      	beq.n	ae0e <n25q256a_read+0x36>
    ae0a:	2206      	movs	r2, #6
    ae0c:	e000      	b.n	ae10 <n25q256a_read+0x38>
    ae0e:	2200      	movs	r2, #0
	struct _qspi_command cmd = {
    ae10:	7c3b      	ldrb	r3, [r7, #16]
    ae12:	f362 0302 	bfi	r3, r2, #0, #3
    ae16:	743b      	strb	r3, [r7, #16]
    ae18:	7c3b      	ldrb	r3, [r7, #16]
    ae1a:	f043 0310 	orr.w	r3, r3, #16
    ae1e:	743b      	strb	r3, [r7, #16]
    ae20:	7c3b      	ldrb	r3, [r7, #16]
    ae22:	f043 0320 	orr.w	r3, r3, #32
    ae26:	743b      	strb	r3, [r7, #16]
    ae28:	7c3b      	ldrb	r3, [r7, #16]
    ae2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    ae2e:	743b      	strb	r3, [r7, #16]
    ae30:	7c7b      	ldrb	r3, [r7, #17]
    ae32:	2201      	movs	r2, #1
    ae34:	f362 1305 	bfi	r3, r2, #4, #2
    ae38:	747b      	strb	r3, [r7, #17]
	    .inst_frame.bits.inst_en      = 1,
	    .inst_frame.bits.data_en      = 1,
	    .inst_frame.bits.addr_en      = 1,
	    .inst_frame.bits.dummy_cycles = n25q->quad_mode ? 10 : 8,
    ae3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    ae3c:	7b1b      	ldrb	r3, [r3, #12]
    ae3e:	2b00      	cmp	r3, #0
    ae40:	d001      	beq.n	ae46 <n25q256a_read+0x6e>
    ae42:	220a      	movs	r2, #10
    ae44:	e000      	b.n	ae48 <n25q256a_read+0x70>
    ae46:	2208      	movs	r2, #8
	struct _qspi_command cmd = {
    ae48:	7cbb      	ldrb	r3, [r7, #18]
    ae4a:	f362 0304 	bfi	r3, r2, #0, #5
    ae4e:	74bb      	strb	r3, [r7, #18]
    ae50:	230b      	movs	r3, #11
    ae52:	753b      	strb	r3, [r7, #20]
    ae54:	687b      	ldr	r3, [r7, #4]
    ae56:	61bb      	str	r3, [r7, #24]
    ae58:	683b      	ldr	r3, [r7, #0]
    ae5a:	61fb      	str	r3, [r7, #28]
    ae5c:	68bb      	ldr	r3, [r7, #8]
    ae5e:	627b      	str	r3, [r7, #36]	; 0x24
	//	.instruction                  = N25Q_READ_ARRAY_LF,
	    .address                      = address,
	    .buf_len                      = length,
	    .rx_buf                       = buf,
	};
	qspi_sync_serial_run_command(descr, &cmd);
    ae60:	f107 0310 	add.w	r3, r7, #16
    ae64:	4619      	mov	r1, r3
    ae66:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    ae68:	4b03      	ldr	r3, [pc, #12]	; (ae78 <n25q256a_read+0xa0>)
    ae6a:	4798      	blx	r3
	return ERR_NONE;
    ae6c:	2300      	movs	r3, #0
}
    ae6e:	4618      	mov	r0, r3
    ae70:	3730      	adds	r7, #48	; 0x30
    ae72:	46bd      	mov	sp, r7
    ae74:	bd80      	pop	{r7, pc}
    ae76:	bf00      	nop
    ae78:	0000230d 	.word	0x0000230d

0000ae7c <n25q256a_write>:

int32_t n25q256a_write(const struct spi_nor_flash *const me, uint8_t *buf, uint32_t address, uint32_t length)
{
    ae7c:	b580      	push	{r7, lr}
    ae7e:	b08c      	sub	sp, #48	; 0x30
    ae80:	af00      	add	r7, sp, #0
    ae82:	60f8      	str	r0, [r7, #12]
    ae84:	60b9      	str	r1, [r7, #8]
    ae86:	607a      	str	r2, [r7, #4]
    ae88:	603b      	str	r3, [r7, #0]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    ae8a:	68fb      	ldr	r3, [r7, #12]
    ae8c:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    ae8e:	68fb      	ldr	r3, [r7, #12]
    ae90:	681b      	ldr	r3, [r3, #0]
    ae92:	62bb      	str	r3, [r7, #40]	; 0x28
	struct _qspi_command         cmd   = {
    ae94:	f107 0310 	add.w	r3, r7, #16
    ae98:	2200      	movs	r2, #0
    ae9a:	601a      	str	r2, [r3, #0]
    ae9c:	605a      	str	r2, [r3, #4]
    ae9e:	609a      	str	r2, [r3, #8]
    aea0:	60da      	str	r2, [r3, #12]
    aea2:	611a      	str	r2, [r3, #16]
    aea4:	615a      	str	r2, [r3, #20]
    aea6:	7c3b      	ldrb	r3, [r7, #16]
    aea8:	f043 0310 	orr.w	r3, r3, #16
    aeac:	743b      	strb	r3, [r7, #16]
    aeae:	7c3b      	ldrb	r3, [r7, #16]
    aeb0:	f043 0320 	orr.w	r3, r3, #32
    aeb4:	743b      	strb	r3, [r7, #16]
    aeb6:	7c3b      	ldrb	r3, [r7, #16]
    aeb8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    aebc:	743b      	strb	r3, [r7, #16]
    aebe:	7c7b      	ldrb	r3, [r7, #17]
    aec0:	f043 0330 	orr.w	r3, r3, #48	; 0x30
    aec4:	747b      	strb	r3, [r7, #17]
    aec6:	2302      	movs	r3, #2
    aec8:	753b      	strb	r3, [r7, #20]
    aeca:	687b      	ldr	r3, [r7, #4]
    aecc:	61bb      	str	r3, [r7, #24]
    aece:	683b      	ldr	r3, [r7, #0]
    aed0:	61fb      	str	r3, [r7, #28]
    aed2:	68bb      	ldr	r3, [r7, #8]
    aed4:	623b      	str	r3, [r7, #32]
        .address                  = address,
        .buf_len                  = length,
        .tx_buf                   = buf,
    };
	/* Command, address, data width are different for different modes */
	cmd.inst_frame.bits.width = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    aed6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    aed8:	7b1b      	ldrb	r3, [r3, #12]
    aeda:	2b00      	cmp	r3, #0
    aedc:	d001      	beq.n	aee2 <n25q256a_write+0x66>
    aede:	2206      	movs	r2, #6
    aee0:	e000      	b.n	aee4 <n25q256a_write+0x68>
    aee2:	2200      	movs	r2, #0
    aee4:	7c3b      	ldrb	r3, [r7, #16]
    aee6:	f362 0302 	bfi	r3, r2, #0, #3
    aeea:	743b      	strb	r3, [r7, #16]
	while (length) {
    aeec:	e035      	b.n	af5a <n25q256a_write+0xde>
		cmd.address = address;
    aeee:	687b      	ldr	r3, [r7, #4]
    aef0:	61bb      	str	r3, [r7, #24]
		if (length <= N25Q_PAGE_SIZE) {
    aef2:	683b      	ldr	r3, [r7, #0]
    aef4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    aef8:	d802      	bhi.n	af00 <n25q256a_write+0x84>
			cmd.buf_len = length;
    aefa:	683b      	ldr	r3, [r7, #0]
    aefc:	61fb      	str	r3, [r7, #28]
    aefe:	e002      	b.n	af06 <n25q256a_write+0x8a>
		} else {
			cmd.buf_len = N25Q_PAGE_SIZE;
    af00:	f44f 7380 	mov.w	r3, #256	; 0x100
    af04:	61fb      	str	r3, [r7, #28]
		}
		/* PROGRAM commands are initiated by first executing the
		 * WRITE ENABLE command to set the write enable latch bit to 1.
		 */
		n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
    af06:	7c3b      	ldrb	r3, [r7, #16]
    af08:	f3c3 0302 	ubfx	r3, r3, #0, #3
    af0c:	b2db      	uxtb	r3, r3
    af0e:	2201      	movs	r2, #1
    af10:	4619      	mov	r1, r3
    af12:	68f8      	ldr	r0, [r7, #12]
    af14:	4b19      	ldr	r3, [pc, #100]	; (af7c <n25q256a_write+0x100>)
    af16:	4798      	blx	r3
		/* Send PROGRAM command */
		qspi_sync_serial_run_command(descr, &cmd);
    af18:	f107 0310 	add.w	r3, r7, #16
    af1c:	4619      	mov	r1, r3
    af1e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    af20:	4b17      	ldr	r3, [pc, #92]	; (af80 <n25q256a_write+0x104>)
    af22:	4798      	blx	r3
		/* When the operation is in progress, the write in progress bit is set.
		 * The write enable latch bit is cleared.
		 * The flag status register is polled for the operation status.
		 */
		while (!(n25q256a_read_reg(me, cmd.inst_frame.bits.width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
    af24:	bf00      	nop
    af26:	7c3b      	ldrb	r3, [r7, #16]
    af28:	f3c3 0302 	ubfx	r3, r3, #0, #3
    af2c:	b2db      	uxtb	r3, r3
    af2e:	2270      	movs	r2, #112	; 0x70
    af30:	4619      	mov	r1, r3
    af32:	68f8      	ldr	r0, [r7, #12]
    af34:	4b13      	ldr	r3, [pc, #76]	; (af84 <n25q256a_write+0x108>)
    af36:	4798      	blx	r3
    af38:	4603      	mov	r3, r0
    af3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
    af3e:	2b00      	cmp	r3, #0
    af40:	d0f1      	beq.n	af26 <n25q256a_write+0xaa>
			;
		cmd.tx_buf += cmd.buf_len;
    af42:	6a3a      	ldr	r2, [r7, #32]
    af44:	69fb      	ldr	r3, [r7, #28]
    af46:	4413      	add	r3, r2
    af48:	623b      	str	r3, [r7, #32]
		length -= cmd.buf_len;
    af4a:	69fb      	ldr	r3, [r7, #28]
    af4c:	683a      	ldr	r2, [r7, #0]
    af4e:	1ad3      	subs	r3, r2, r3
    af50:	603b      	str	r3, [r7, #0]
		address += cmd.buf_len;
    af52:	69fb      	ldr	r3, [r7, #28]
    af54:	687a      	ldr	r2, [r7, #4]
    af56:	4413      	add	r3, r2
    af58:	607b      	str	r3, [r7, #4]
	while (length) {
    af5a:	683b      	ldr	r3, [r7, #0]
    af5c:	2b00      	cmp	r3, #0
    af5e:	d1c6      	bne.n	aeee <n25q256a_write+0x72>
	}
	if (n25q->xip_mode) {
    af60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    af62:	7b5b      	ldrb	r3, [r3, #13]
    af64:	2b00      	cmp	r3, #0
    af66:	d003      	beq.n	af70 <n25q256a_write+0xf4>
		n25q256a_xip_confirm(me, true);
    af68:	2101      	movs	r1, #1
    af6a:	68f8      	ldr	r0, [r7, #12]
    af6c:	4b06      	ldr	r3, [pc, #24]	; (af88 <n25q256a_write+0x10c>)
    af6e:	4798      	blx	r3
	}
	return ERR_NONE;
    af70:	2300      	movs	r3, #0
}
    af72:	4618      	mov	r0, r3
    af74:	3730      	adds	r7, #48	; 0x30
    af76:	46bd      	mov	sp, r7
    af78:	bd80      	pop	{r7, pc}
    af7a:	bf00      	nop
    af7c:	0000abed 	.word	0x0000abed
    af80:	0000230d 	.word	0x0000230d
    af84:	0000aab1 	.word	0x0000aab1
    af88:	0000a9e5 	.word	0x0000a9e5

0000af8c <n25q256a_erase>:

int32_t n25q256a_erase(const struct spi_nor_flash *const me, uint32_t address, uint32_t length)
{
    af8c:	b580      	push	{r7, lr}
    af8e:	b090      	sub	sp, #64	; 0x40
    af90:	af00      	add	r7, sp, #0
    af92:	60f8      	str	r0, [r7, #12]
    af94:	60b9      	str	r1, [r7, #8]
    af96:	607a      	str	r2, [r7, #4]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    af98:	68fb      	ldr	r3, [r7, #12]
    af9a:	633b      	str	r3, [r7, #48]	; 0x30
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    af9c:	68fb      	ldr	r3, [r7, #12]
    af9e:	681b      	ldr	r3, [r3, #0]
    afa0:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct _qspi_command         cmd   = {
    afa2:	f107 0314 	add.w	r3, r7, #20
    afa6:	2200      	movs	r2, #0
    afa8:	601a      	str	r2, [r3, #0]
    afaa:	605a      	str	r2, [r3, #4]
    afac:	609a      	str	r2, [r3, #8]
    afae:	60da      	str	r2, [r3, #12]
    afb0:	611a      	str	r2, [r3, #16]
    afb2:	615a      	str	r2, [r3, #20]
        .inst_frame.bits.width    = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1,
    afb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    afb6:	7b1b      	ldrb	r3, [r3, #12]
    afb8:	2b00      	cmp	r3, #0
    afba:	d001      	beq.n	afc0 <n25q256a_erase+0x34>
    afbc:	2206      	movs	r2, #6
    afbe:	e000      	b.n	afc2 <n25q256a_erase+0x36>
    afc0:	2200      	movs	r2, #0
	struct _qspi_command         cmd   = {
    afc2:	7d3b      	ldrb	r3, [r7, #20]
    afc4:	f362 0302 	bfi	r3, r2, #0, #3
    afc8:	753b      	strb	r3, [r7, #20]
    afca:	7d3b      	ldrb	r3, [r7, #20]
    afcc:	f043 0310 	orr.w	r3, r3, #16
    afd0:	753b      	strb	r3, [r7, #20]
        .inst_frame.bits.inst_en  = 1,
        .inst_frame.bits.addr_en  = (length < N25Q_FLASH_SIZE) ? 1 : 0,
    afd2:	687b      	ldr	r3, [r7, #4]
    afd4:	4a56      	ldr	r2, [pc, #344]	; (b130 <n25q256a_erase+0x1a4>)
    afd6:	4293      	cmp	r3, r2
    afd8:	bf94      	ite	ls
    afda:	2301      	movls	r3, #1
    afdc:	2300      	movhi	r3, #0
    afde:	b2da      	uxtb	r2, r3
	struct _qspi_command         cmd   = {
    afe0:	7d3b      	ldrb	r3, [r7, #20]
    afe2:	f362 1345 	bfi	r3, r2, #5, #1
    afe6:	753b      	strb	r3, [r7, #20]
    afe8:	7d7b      	ldrb	r3, [r7, #21]
    afea:	2202      	movs	r2, #2
    afec:	f362 1305 	bfi	r3, r2, #4, #2
    aff0:	757b      	strb	r3, [r7, #21]
        .inst_frame.bits.tfr_type = QSPI_WRITE_ACCESS,
    };
	uint32_t temp_addr = address;
    aff2:	68bb      	ldr	r3, [r7, #8]
    aff4:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t temp_len  = length;
    aff6:	687b      	ldr	r3, [r7, #4]
    aff8:	63bb      	str	r3, [r7, #56]	; 0x38
	int32_t  rc        = ERR_NONE;
    affa:	2300      	movs	r3, #0
    affc:	637b      	str	r3, [r7, #52]	; 0x34

	if ((length % N25Q_SECTOR_SIZE) || (address % N25Q_SECTOR_SIZE)) {
    affe:	687b      	ldr	r3, [r7, #4]
    b000:	f3c3 030b 	ubfx	r3, r3, #0, #12
    b004:	2b00      	cmp	r3, #0
    b006:	d104      	bne.n	b012 <n25q256a_erase+0x86>
    b008:	68bb      	ldr	r3, [r7, #8]
    b00a:	f3c3 030b 	ubfx	r3, r3, #0, #12
    b00e:	2b00      	cmp	r3, #0
    b010:	d002      	beq.n	b018 <n25q256a_erase+0x8c>
		return ERR_INVALID_ARG;
    b012:	f06f 030c 	mvn.w	r3, #12
    b016:	e087      	b.n	b128 <n25q256a_erase+0x19c>
	}

	if (length >= N25Q_FLASH_SIZE) {
    b018:	687b      	ldr	r3, [r7, #4]
    b01a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
    b01e:	d368      	bcc.n	b0f2 <n25q256a_erase+0x166>
		cmd.instruction = N25Q_BULK_ERASE;
    b020:	23c7      	movs	r3, #199	; 0xc7
    b022:	763b      	strb	r3, [r7, #24]
		/* WRITE ENABLE command must be issued to
		 * set the write enable latch bit to 1 */
		n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
    b024:	7d3b      	ldrb	r3, [r7, #20]
    b026:	f3c3 0302 	ubfx	r3, r3, #0, #3
    b02a:	b2db      	uxtb	r3, r3
    b02c:	2201      	movs	r2, #1
    b02e:	4619      	mov	r1, r3
    b030:	68f8      	ldr	r0, [r7, #12]
    b032:	4b40      	ldr	r3, [pc, #256]	; (b134 <n25q256a_erase+0x1a8>)
    b034:	4798      	blx	r3
		/* Send specific erase command */
		qspi_sync_serial_run_command(descr, &cmd);
    b036:	f107 0314 	add.w	r3, r7, #20
    b03a:	4619      	mov	r1, r3
    b03c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    b03e:	4b3e      	ldr	r3, [pc, #248]	; (b138 <n25q256a_erase+0x1ac>)
    b040:	4798      	blx	r3
    b042:	e059      	b.n	b0f8 <n25q256a_erase+0x16c>
	} else {
		while (temp_len > 0) {
			if (((temp_addr % N25Q_BLOCK_SIZE) == 0) && (temp_len >= N25Q_BLOCK_SIZE)) {
    b044:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    b046:	b29b      	uxth	r3, r3
    b048:	2b00      	cmp	r3, #0
    b04a:	d11f      	bne.n	b08c <n25q256a_erase+0x100>
    b04c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    b04e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    b052:	d31b      	bcc.n	b08c <n25q256a_erase+0x100>
				cmd.address     = temp_addr;
    b054:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    b056:	61fb      	str	r3, [r7, #28]
				cmd.instruction = N25Q_BLOCK_ERASE_64K;
    b058:	23d8      	movs	r3, #216	; 0xd8
    b05a:	763b      	strb	r3, [r7, #24]
				/* WRITE ENABLE command must be issued to
				 * set the write enable latch bit to 1 */
				n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
    b05c:	7d3b      	ldrb	r3, [r7, #20]
    b05e:	f3c3 0302 	ubfx	r3, r3, #0, #3
    b062:	b2db      	uxtb	r3, r3
    b064:	2201      	movs	r2, #1
    b066:	4619      	mov	r1, r3
    b068:	68f8      	ldr	r0, [r7, #12]
    b06a:	4b32      	ldr	r3, [pc, #200]	; (b134 <n25q256a_erase+0x1a8>)
    b06c:	4798      	blx	r3
				/* Send specific erase command */
				qspi_sync_serial_run_command(descr, &cmd);
    b06e:	f107 0314 	add.w	r3, r7, #20
    b072:	4619      	mov	r1, r3
    b074:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    b076:	4b30      	ldr	r3, [pc, #192]	; (b138 <n25q256a_erase+0x1ac>)
    b078:	4798      	blx	r3
				temp_addr += N25Q_BLOCK_SIZE;
    b07a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    b07c:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
    b080:	63fb      	str	r3, [r7, #60]	; 0x3c
				temp_len -= N25Q_BLOCK_SIZE;
    b082:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    b084:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
    b088:	63bb      	str	r3, [r7, #56]	; 0x38
    b08a:	e023      	b.n	b0d4 <n25q256a_erase+0x148>
			} else if (temp_len >= N25Q_SECTOR_SIZE) {
    b08c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    b08e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    b092:	d31b      	bcc.n	b0cc <n25q256a_erase+0x140>
				cmd.address     = temp_addr;
    b094:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    b096:	61fb      	str	r3, [r7, #28]
				cmd.instruction = N25Q_BLOCK_ERASE_4K;
    b098:	2320      	movs	r3, #32
    b09a:	763b      	strb	r3, [r7, #24]
				/* WRITE ENABLE command must be issued to
				 * set the write enable latch bit to 1 */
				n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
    b09c:	7d3b      	ldrb	r3, [r7, #20]
    b09e:	f3c3 0302 	ubfx	r3, r3, #0, #3
    b0a2:	b2db      	uxtb	r3, r3
    b0a4:	2201      	movs	r2, #1
    b0a6:	4619      	mov	r1, r3
    b0a8:	68f8      	ldr	r0, [r7, #12]
    b0aa:	4b22      	ldr	r3, [pc, #136]	; (b134 <n25q256a_erase+0x1a8>)
    b0ac:	4798      	blx	r3
				/* Send specific erase command */
				qspi_sync_serial_run_command(descr, &cmd);
    b0ae:	f107 0314 	add.w	r3, r7, #20
    b0b2:	4619      	mov	r1, r3
    b0b4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    b0b6:	4b20      	ldr	r3, [pc, #128]	; (b138 <n25q256a_erase+0x1ac>)
    b0b8:	4798      	blx	r3
				temp_addr += N25Q_SECTOR_SIZE;
    b0ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    b0bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
    b0c0:	63fb      	str	r3, [r7, #60]	; 0x3c
				temp_len -= N25Q_SECTOR_SIZE;
    b0c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    b0c4:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
    b0c8:	63bb      	str	r3, [r7, #56]	; 0x38
    b0ca:	e003      	b.n	b0d4 <n25q256a_erase+0x148>
			} else {
				rc = ERR_INVALID_ARG;
    b0cc:	f06f 030c 	mvn.w	r3, #12
    b0d0:	637b      	str	r3, [r7, #52]	; 0x34
				break;
    b0d2:	e011      	b.n	b0f8 <n25q256a_erase+0x16c>
			/* When the operation is in progress,
			 * the write in progress bit is set.
			 * The write enable latch bit is cleared.
			 * The flag status register is polled for the operation status.
			 */
			while (!(n25q256a_read_reg(me, cmd.inst_frame.bits.width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
    b0d4:	bf00      	nop
    b0d6:	7d3b      	ldrb	r3, [r7, #20]
    b0d8:	f3c3 0302 	ubfx	r3, r3, #0, #3
    b0dc:	b2db      	uxtb	r3, r3
    b0de:	2270      	movs	r2, #112	; 0x70
    b0e0:	4619      	mov	r1, r3
    b0e2:	68f8      	ldr	r0, [r7, #12]
    b0e4:	4b15      	ldr	r3, [pc, #84]	; (b13c <n25q256a_erase+0x1b0>)
    b0e6:	4798      	blx	r3
    b0e8:	4603      	mov	r3, r0
    b0ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
    b0ee:	2b00      	cmp	r3, #0
    b0f0:	d0f1      	beq.n	b0d6 <n25q256a_erase+0x14a>
		while (temp_len > 0) {
    b0f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    b0f4:	2b00      	cmp	r3, #0
    b0f6:	d1a5      	bne.n	b044 <n25q256a_erase+0xb8>
				;
		}
	}
	/* The flag status register is polled for the final operation status. */
	while (!(n25q256a_read_reg(me, cmd.inst_frame.bits.width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
    b0f8:	bf00      	nop
    b0fa:	7d3b      	ldrb	r3, [r7, #20]
    b0fc:	f3c3 0302 	ubfx	r3, r3, #0, #3
    b100:	b2db      	uxtb	r3, r3
    b102:	2270      	movs	r2, #112	; 0x70
    b104:	4619      	mov	r1, r3
    b106:	68f8      	ldr	r0, [r7, #12]
    b108:	4b0c      	ldr	r3, [pc, #48]	; (b13c <n25q256a_erase+0x1b0>)
    b10a:	4798      	blx	r3
    b10c:	4603      	mov	r3, r0
    b10e:	f003 0380 	and.w	r3, r3, #128	; 0x80
    b112:	2b00      	cmp	r3, #0
    b114:	d0f1      	beq.n	b0fa <n25q256a_erase+0x16e>
		;
	if (n25q->xip_mode) {
    b116:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    b118:	7b5b      	ldrb	r3, [r3, #13]
    b11a:	2b00      	cmp	r3, #0
    b11c:	d003      	beq.n	b126 <n25q256a_erase+0x19a>
		n25q256a_xip_confirm(me, true);
    b11e:	2101      	movs	r1, #1
    b120:	68f8      	ldr	r0, [r7, #12]
    b122:	4b07      	ldr	r3, [pc, #28]	; (b140 <n25q256a_erase+0x1b4>)
    b124:	4798      	blx	r3
	}
	return rc;
    b126:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
    b128:	4618      	mov	r0, r3
    b12a:	3740      	adds	r7, #64	; 0x40
    b12c:	46bd      	mov	sp, r7
    b12e:	bd80      	pop	{r7, pc}
    b130:	001fffff 	.word	0x001fffff
    b134:	0000abed 	.word	0x0000abed
    b138:	0000230d 	.word	0x0000230d
    b13c:	0000aab1 	.word	0x0000aab1
    b140:	0000a9e5 	.word	0x0000a9e5

0000b144 <n25q256a_enable_xip>:

int32_t n25q256a_enable_xip(const struct spi_nor_flash *const me)
{
    b144:	b590      	push	{r4, r7, lr}
    b146:	b085      	sub	sp, #20
    b148:	af00      	add	r7, sp, #0
    b14a:	6078      	str	r0, [r7, #4]
	struct n25q256a *n25q  = (struct n25q256a *)me;
    b14c:	687b      	ldr	r3, [r7, #4]
    b14e:	60fb      	str	r3, [r7, #12]
	uint8_t          width = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    b150:	68fb      	ldr	r3, [r7, #12]
    b152:	7b1b      	ldrb	r3, [r3, #12]
    b154:	2b00      	cmp	r3, #0
    b156:	d001      	beq.n	b15c <n25q256a_enable_xip+0x18>
    b158:	2306      	movs	r3, #6
    b15a:	e000      	b.n	b15e <n25q256a_enable_xip+0x1a>
    b15c:	2300      	movs	r3, #0
    b15e:	72fb      	strb	r3, [r7, #11]
	if (!n25q->xip_mode) {
    b160:	68fb      	ldr	r3, [r7, #12]
    b162:	7b5b      	ldrb	r3, [r3, #13]
    b164:	2b00      	cmp	r3, #0
    b166:	d129      	bne.n	b1bc <n25q256a_enable_xip+0x78>
		uint8_t vcfg = n25q256a_read_reg(me, width, N25Q_READ_VOLATILE_CONFIG_REGISTER);
    b168:	7afb      	ldrb	r3, [r7, #11]
    b16a:	2285      	movs	r2, #133	; 0x85
    b16c:	4619      	mov	r1, r3
    b16e:	6878      	ldr	r0, [r7, #4]
    b170:	4b15      	ldr	r3, [pc, #84]	; (b1c8 <n25q256a_enable_xip+0x84>)
    b172:	4798      	blx	r3
    b174:	4603      	mov	r3, r0
    b176:	72bb      	strb	r3, [r7, #10]
		if (vcfg & (1u << 3)) {
    b178:	7abb      	ldrb	r3, [r7, #10]
    b17a:	f003 0308 	and.w	r3, r3, #8
    b17e:	2b00      	cmp	r3, #0
    b180:	d015      	beq.n	b1ae <n25q256a_enable_xip+0x6a>
			vcfg &= ~(1u << 3);
    b182:	7abb      	ldrb	r3, [r7, #10]
    b184:	f023 0308 	bic.w	r3, r3, #8
    b188:	72bb      	strb	r3, [r7, #10]
			n25q256a_write_reg(me, width, N25Q_WRITE_VOLATILE_CONFIG_REGISTER, vcfg);
    b18a:	7abb      	ldrb	r3, [r7, #10]
    b18c:	7af9      	ldrb	r1, [r7, #11]
    b18e:	2281      	movs	r2, #129	; 0x81
    b190:	6878      	ldr	r0, [r7, #4]
    b192:	4c0e      	ldr	r4, [pc, #56]	; (b1cc <n25q256a_enable_xip+0x88>)
    b194:	47a0      	blx	r4
			while (!(n25q256a_read_reg(me, width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
    b196:	bf00      	nop
    b198:	7afb      	ldrb	r3, [r7, #11]
    b19a:	2270      	movs	r2, #112	; 0x70
    b19c:	4619      	mov	r1, r3
    b19e:	6878      	ldr	r0, [r7, #4]
    b1a0:	4b09      	ldr	r3, [pc, #36]	; (b1c8 <n25q256a_enable_xip+0x84>)
    b1a2:	4798      	blx	r3
    b1a4:	4603      	mov	r3, r0
    b1a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
    b1aa:	2b00      	cmp	r3, #0
    b1ac:	d0f4      	beq.n	b198 <n25q256a_enable_xip+0x54>
				;
		}
		n25q->xip_mode = 1;
    b1ae:	68fb      	ldr	r3, [r7, #12]
    b1b0:	2201      	movs	r2, #1
    b1b2:	735a      	strb	r2, [r3, #13]
		n25q256a_xip_confirm(me, true);
    b1b4:	2101      	movs	r1, #1
    b1b6:	6878      	ldr	r0, [r7, #4]
    b1b8:	4b05      	ldr	r3, [pc, #20]	; (b1d0 <n25q256a_enable_xip+0x8c>)
    b1ba:	4798      	blx	r3
	}
	return ERR_NONE;
    b1bc:	2300      	movs	r3, #0
}
    b1be:	4618      	mov	r0, r3
    b1c0:	3714      	adds	r7, #20
    b1c2:	46bd      	mov	sp, r7
    b1c4:	bd90      	pop	{r4, r7, pc}
    b1c6:	bf00      	nop
    b1c8:	0000aab1 	.word	0x0000aab1
    b1cc:	0000ab4d 	.word	0x0000ab4d
    b1d0:	0000a9e5 	.word	0x0000a9e5

0000b1d4 <n25q256a_disable_xip>:

int32_t n25q256a_disable_xip(const struct spi_nor_flash *const me)
{
    b1d4:	b580      	push	{r7, lr}
    b1d6:	b086      	sub	sp, #24
    b1d8:	af00      	add	r7, sp, #0
    b1da:	6078      	str	r0, [r7, #4]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    b1dc:	687b      	ldr	r3, [r7, #4]
    b1de:	617b      	str	r3, [r7, #20]
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    b1e0:	687b      	ldr	r3, [r7, #4]
    b1e2:	681b      	ldr	r3, [r3, #0]
    b1e4:	613b      	str	r3, [r7, #16]
	uint8_t                      width = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    b1e6:	697b      	ldr	r3, [r7, #20]
    b1e8:	7b1b      	ldrb	r3, [r3, #12]
    b1ea:	2b00      	cmp	r3, #0
    b1ec:	d001      	beq.n	b1f2 <n25q256a_disable_xip+0x1e>
    b1ee:	2306      	movs	r3, #6
    b1f0:	e000      	b.n	b1f4 <n25q256a_disable_xip+0x20>
    b1f2:	2300      	movs	r3, #0
    b1f4:	73fb      	strb	r3, [r7, #15]
	uint8_t                      vcfg;
	/* XIP is terminated by driving the XIP confirmation bit to 1.
	 * The device automatically resets volatile configuration register bit 3 to 1.
	 */
	n25q256a_xip_confirm(me, false);
    b1f6:	2100      	movs	r1, #0
    b1f8:	6878      	ldr	r0, [r7, #4]
    b1fa:	4b15      	ldr	r3, [pc, #84]	; (b250 <n25q256a_disable_xip+0x7c>)
    b1fc:	4798      	blx	r3
	vcfg = n25q256a_read_reg(me, width, N25Q_READ_VOLATILE_CONFIG_REGISTER);
    b1fe:	7bfb      	ldrb	r3, [r7, #15]
    b200:	2285      	movs	r2, #133	; 0x85
    b202:	4619      	mov	r1, r3
    b204:	6878      	ldr	r0, [r7, #4]
    b206:	4b13      	ldr	r3, [pc, #76]	; (b254 <n25q256a_disable_xip+0x80>)
    b208:	4798      	blx	r3
    b20a:	4603      	mov	r3, r0
    b20c:	73bb      	strb	r3, [r7, #14]
	if (!(vcfg & (1u << 3))) {
    b20e:	7bbb      	ldrb	r3, [r7, #14]
    b210:	f003 0308 	and.w	r3, r3, #8
    b214:	2b00      	cmp	r3, #0
    b216:	d113      	bne.n	b240 <n25q256a_disable_xip+0x6c>
		if (n25q->pin_exit_xip) {
    b218:	697b      	ldr	r3, [r7, #20]
    b21a:	689b      	ldr	r3, [r3, #8]
    b21c:	2b00      	cmp	r3, #0
    b21e:	d00f      	beq.n	b240 <n25q256a_disable_xip+0x6c>
			/* Quad    : drive DQ0 = 1 with S# held LOW for  7 clock cycles
			 * Dual    : drive DQ0 = 1 with S# held LOW for 13 clock cycles
			 * Extended: drive DQ0 = 1 with S# held LOW for 25 clock cycles
			 */
			void *hw = descr->dev.prvt;
    b220:	693b      	ldr	r3, [r7, #16]
    b222:	681b      	ldr	r3, [r3, #0]
    b224:	60bb      	str	r3, [r7, #8]
			qspi_sync_disable(descr);
    b226:	6938      	ldr	r0, [r7, #16]
    b228:	4b0b      	ldr	r3, [pc, #44]	; (b258 <n25q256a_disable_xip+0x84>)
    b22a:	4798      	blx	r3
			n25q->pin_exit_xip();
    b22c:	697b      	ldr	r3, [r7, #20]
    b22e:	689b      	ldr	r3, [r3, #8]
    b230:	4798      	blx	r3

			qspi_sync_init(descr, hw);
    b232:	68b9      	ldr	r1, [r7, #8]
    b234:	6938      	ldr	r0, [r7, #16]
    b236:	4b09      	ldr	r3, [pc, #36]	; (b25c <n25q256a_disable_xip+0x88>)
    b238:	4798      	blx	r3
			qspi_sync_enable(descr);
    b23a:	6938      	ldr	r0, [r7, #16]
    b23c:	4b08      	ldr	r3, [pc, #32]	; (b260 <n25q256a_disable_xip+0x8c>)
    b23e:	4798      	blx	r3
		}
	}
	n25q->xip_mode = 0;
    b240:	697b      	ldr	r3, [r7, #20]
    b242:	2200      	movs	r2, #0
    b244:	735a      	strb	r2, [r3, #13]
	return ERR_NONE;
    b246:	2300      	movs	r3, #0
}
    b248:	4618      	mov	r0, r3
    b24a:	3718      	adds	r7, #24
    b24c:	46bd      	mov	sp, r7
    b24e:	bd80      	pop	{r7, pc}
    b250:	0000a9e5 	.word	0x0000a9e5
    b254:	0000aab1 	.word	0x0000aab1
    b258:	000022d1 	.word	0x000022d1
    b25c:	00002249 	.word	0x00002249
    b260:	00002295 	.word	0x00002295

0000b264 <spi_nor_flash_construct>:

#include <spi_nor_flash.h>

struct spi_nor_flash *spi_nor_flash_construct(struct spi_nor_flash *const me, void *const io,
                                              const struct spi_nor_flash_interface *const interface)
{
    b264:	b480      	push	{r7}
    b266:	b085      	sub	sp, #20
    b268:	af00      	add	r7, sp, #0
    b26a:	60f8      	str	r0, [r7, #12]
    b26c:	60b9      	str	r1, [r7, #8]
    b26e:	607a      	str	r2, [r7, #4]
	me->io        = io;
    b270:	68fb      	ldr	r3, [r7, #12]
    b272:	68ba      	ldr	r2, [r7, #8]
    b274:	601a      	str	r2, [r3, #0]
	me->interface = interface;
    b276:	68fb      	ldr	r3, [r7, #12]
    b278:	687a      	ldr	r2, [r7, #4]
    b27a:	605a      	str	r2, [r3, #4]

	return me;
    b27c:	68fb      	ldr	r3, [r7, #12]
}
    b27e:	4618      	mov	r0, r3
    b280:	3714      	adds	r7, #20
    b282:	46bd      	mov	sp, r7
    b284:	f85d 7b04 	ldr.w	r7, [sp], #4
    b288:	4770      	bx	lr

0000b28a <usb_get_u16>:
/** \brief Get a word (calculate by little endian 16-bit data)
 *  \param[in] ptr Byte pointer to the address to get data
 *  \return a 16-bit word
 */
static inline uint16_t usb_get_u16(const uint8_t *ptr)
{
    b28a:	b480      	push	{r7}
    b28c:	b083      	sub	sp, #12
    b28e:	af00      	add	r7, sp, #0
    b290:	6078      	str	r0, [r7, #4]
	return (ptr[0] + (ptr[1] << 8));
    b292:	687b      	ldr	r3, [r7, #4]
    b294:	781b      	ldrb	r3, [r3, #0]
    b296:	b29a      	uxth	r2, r3
    b298:	687b      	ldr	r3, [r7, #4]
    b29a:	3301      	adds	r3, #1
    b29c:	781b      	ldrb	r3, [r3, #0]
    b29e:	b29b      	uxth	r3, r3
    b2a0:	021b      	lsls	r3, r3, #8
    b2a2:	b29b      	uxth	r3, r3
    b2a4:	4413      	add	r3, r2
    b2a6:	b29b      	uxth	r3, r3
}
    b2a8:	4618      	mov	r0, r3
    b2aa:	370c      	adds	r7, #12
    b2ac:	46bd      	mov	sp, r7
    b2ae:	f85d 7b04 	ldr.w	r7, [sp], #4
    b2b2:	4770      	bx	lr

0000b2b4 <usb_desc_len>:
/** \brief Get descriptor length
 *  \param[in] desc Byte pointer to the descriptor start address
 *  \return descriptor length
 */
static inline uint8_t usb_desc_len(const uint8_t *desc)
{
    b2b4:	b480      	push	{r7}
    b2b6:	b083      	sub	sp, #12
    b2b8:	af00      	add	r7, sp, #0
    b2ba:	6078      	str	r0, [r7, #4]
	return desc[0];
    b2bc:	687b      	ldr	r3, [r7, #4]
    b2be:	781b      	ldrb	r3, [r3, #0]
}
    b2c0:	4618      	mov	r0, r3
    b2c2:	370c      	adds	r7, #12
    b2c4:	46bd      	mov	sp, r7
    b2c6:	f85d 7b04 	ldr.w	r7, [sp], #4
    b2ca:	4770      	bx	lr

0000b2cc <usb_desc_next>:
/** \brief Get next USB descriptor
 *  \param[in] desc Byte pointer to the descriptor start address
 *  \return Byte pointer to the next descriptor
 */
static inline uint8_t *usb_desc_next(uint8_t *desc)
{
    b2cc:	b580      	push	{r7, lr}
    b2ce:	b082      	sub	sp, #8
    b2d0:	af00      	add	r7, sp, #0
    b2d2:	6078      	str	r0, [r7, #4]
	return (desc + usb_desc_len(desc));
    b2d4:	6878      	ldr	r0, [r7, #4]
    b2d6:	4b05      	ldr	r3, [pc, #20]	; (b2ec <usb_desc_next+0x20>)
    b2d8:	4798      	blx	r3
    b2da:	4603      	mov	r3, r0
    b2dc:	461a      	mov	r2, r3
    b2de:	687b      	ldr	r3, [r7, #4]
    b2e0:	4413      	add	r3, r2
}
    b2e2:	4618      	mov	r0, r3
    b2e4:	3708      	adds	r7, #8
    b2e6:	46bd      	mov	sp, r7
    b2e8:	bd80      	pop	{r7, pc}
    b2ea:	bf00      	nop
    b2ec:	0000b2b5 	.word	0x0000b2b5

0000b2f0 <cdcdf_acm_enable>:
 * \param[in] drv Pointer to USB device function driver
 * \param[in] desc Pointer to USB interface descriptor
 * \return Operation status.
 */
static int32_t cdcdf_acm_enable(struct usbdf_driver *drv, struct usbd_descriptors *desc)
{
    b2f0:	b580      	push	{r7, lr}
    b2f2:	b08c      	sub	sp, #48	; 0x30
    b2f4:	af00      	add	r7, sp, #0
    b2f6:	6078      	str	r0, [r7, #4]
    b2f8:	6039      	str	r1, [r7, #0]
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
    b2fa:	687b      	ldr	r3, [r7, #4]
    b2fc:	689b      	ldr	r3, [r3, #8]
    b2fe:	623b      	str	r3, [r7, #32]
	usb_ep_desc_t    ep_desc;
	usb_iface_desc_t ifc_desc;
	uint8_t *        ifc, *ep;
	uint8_t          i;

	ifc = desc->sod;
    b300:	683b      	ldr	r3, [r7, #0]
    b302:	681b      	ldr	r3, [r3, #0]
    b304:	62fb      	str	r3, [r7, #44]	; 0x2c
	for (i = 0; i < 2; i++) {
    b306:	2300      	movs	r3, #0
    b308:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    b30c:	e08f      	b.n	b42e <cdcdf_acm_enable+0x13e>
		if (NULL == ifc) {
    b30e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b310:	2b00      	cmp	r3, #0
    b312:	d102      	bne.n	b31a <cdcdf_acm_enable+0x2a>
			return ERR_NOT_FOUND;
    b314:	f06f 0309 	mvn.w	r3, #9
    b318:	e092      	b.n	b440 <cdcdf_acm_enable+0x150>
		}

		ifc_desc.bInterfaceNumber = ifc[2];
    b31a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b31c:	789b      	ldrb	r3, [r3, #2]
    b31e:	73bb      	strb	r3, [r7, #14]
		ifc_desc.bInterfaceClass  = ifc[5];
    b320:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b322:	795b      	ldrb	r3, [r3, #5]
    b324:	747b      	strb	r3, [r7, #17]

		if ((CDC_CLASS_COMM == ifc_desc.bInterfaceClass) || (CDC_CLASS_DATA == ifc_desc.bInterfaceClass)) {
    b326:	7c7b      	ldrb	r3, [r7, #17]
    b328:	2b02      	cmp	r3, #2
    b32a:	d002      	beq.n	b332 <cdcdf_acm_enable+0x42>
    b32c:	7c7b      	ldrb	r3, [r7, #17]
    b32e:	2b0a      	cmp	r3, #10
    b330:	d121      	bne.n	b376 <cdcdf_acm_enable+0x86>
			if (func_data->func_iface[i] == ifc_desc.bInterfaceNumber) { // Initialized
    b332:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    b336:	6a3a      	ldr	r2, [r7, #32]
    b338:	5cd2      	ldrb	r2, [r2, r3]
    b33a:	7bbb      	ldrb	r3, [r7, #14]
    b33c:	429a      	cmp	r2, r3
    b33e:	d102      	bne.n	b346 <cdcdf_acm_enable+0x56>
				return ERR_ALREADY_INITIALIZED;
    b340:	f06f 0311 	mvn.w	r3, #17
    b344:	e07c      	b.n	b440 <cdcdf_acm_enable+0x150>
			} else if (func_data->func_iface[i] != 0xFF) { // Occupied
    b346:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    b34a:	6a3a      	ldr	r2, [r7, #32]
    b34c:	5cd3      	ldrb	r3, [r2, r3]
    b34e:	2bff      	cmp	r3, #255	; 0xff
    b350:	d002      	beq.n	b358 <cdcdf_acm_enable+0x68>
				return ERR_NO_RESOURCE;
    b352:	f06f 031b 	mvn.w	r3, #27
    b356:	e073      	b.n	b440 <cdcdf_acm_enable+0x150>
			} else {
				func_data->func_iface[i] = ifc_desc.bInterfaceNumber;
    b358:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    b35c:	7bb9      	ldrb	r1, [r7, #14]
    b35e:	6a3a      	ldr	r2, [r7, #32]
    b360:	54d1      	strb	r1, [r2, r3]
			if (func_data->func_iface[i] == ifc_desc.bInterfaceNumber) { // Initialized
    b362:	bf00      	nop
		} else { // Not supported by this function driver
			return ERR_NOT_FOUND;
		}

		// Install endpoints
		ep = usb_find_desc(ifc, desc->eod, USB_DT_ENDPOINT);
    b364:	683b      	ldr	r3, [r7, #0]
    b366:	685b      	ldr	r3, [r3, #4]
    b368:	2205      	movs	r2, #5
    b36a:	4619      	mov	r1, r3
    b36c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    b36e:	4b36      	ldr	r3, [pc, #216]	; (b448 <cdcdf_acm_enable+0x158>)
    b370:	4798      	blx	r3
    b372:	62b8      	str	r0, [r7, #40]	; 0x28
		while (NULL != ep) {
    b374:	e047      	b.n	b406 <cdcdf_acm_enable+0x116>
			return ERR_NOT_FOUND;
    b376:	f06f 0309 	mvn.w	r3, #9
    b37a:	e061      	b.n	b440 <cdcdf_acm_enable+0x150>
			ep_desc.bEndpointAddress = ep[2];
    b37c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    b37e:	789b      	ldrb	r3, [r3, #2]
    b380:	76bb      	strb	r3, [r7, #26]
			ep_desc.bmAttributes     = ep[3];
    b382:	6abb      	ldr	r3, [r7, #40]	; 0x28
    b384:	78db      	ldrb	r3, [r3, #3]
    b386:	76fb      	strb	r3, [r7, #27]
			ep_desc.wMaxPacketSize   = usb_get_u16(ep + 4);
    b388:	6abb      	ldr	r3, [r7, #40]	; 0x28
    b38a:	3304      	adds	r3, #4
    b38c:	4618      	mov	r0, r3
    b38e:	4b2f      	ldr	r3, [pc, #188]	; (b44c <cdcdf_acm_enable+0x15c>)
    b390:	4798      	blx	r3
    b392:	4603      	mov	r3, r0
    b394:	83bb      	strh	r3, [r7, #28]
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    b396:	7ebb      	ldrb	r3, [r7, #26]
    b398:	7ef9      	ldrb	r1, [r7, #27]
    b39a:	8bba      	ldrh	r2, [r7, #28]
    b39c:	4618      	mov	r0, r3
    b39e:	4b2c      	ldr	r3, [pc, #176]	; (b450 <cdcdf_acm_enable+0x160>)
    b3a0:	4798      	blx	r3
    b3a2:	4603      	mov	r3, r0
    b3a4:	2b00      	cmp	r3, #0
    b3a6:	d002      	beq.n	b3ae <cdcdf_acm_enable+0xbe>
				return ERR_NOT_INITIALIZED;
    b3a8:	f06f 0313 	mvn.w	r3, #19
    b3ac:	e048      	b.n	b440 <cdcdf_acm_enable+0x150>
			}
			if (ep_desc.bEndpointAddress & USB_EP_DIR_IN) {
    b3ae:	7ebb      	ldrb	r3, [r7, #26]
    b3b0:	b25b      	sxtb	r3, r3
    b3b2:	2b00      	cmp	r3, #0
    b3b4:	da0f      	bge.n	b3d6 <cdcdf_acm_enable+0xe6>
				func_data->func_ep_in[i] = ep_desc.bEndpointAddress;
    b3b6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    b3ba:	7eb9      	ldrb	r1, [r7, #26]
    b3bc:	6a3a      	ldr	r2, [r7, #32]
    b3be:	4413      	add	r3, r2
    b3c0:	460a      	mov	r2, r1
    b3c2:	709a      	strb	r2, [r3, #2]
				usb_d_ep_enable(func_data->func_ep_in[i]);
    b3c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    b3c8:	6a3a      	ldr	r2, [r7, #32]
    b3ca:	4413      	add	r3, r2
    b3cc:	789b      	ldrb	r3, [r3, #2]
    b3ce:	4618      	mov	r0, r3
    b3d0:	4b20      	ldr	r3, [pc, #128]	; (b454 <cdcdf_acm_enable+0x164>)
    b3d2:	4798      	blx	r3
    b3d4:	e007      	b.n	b3e6 <cdcdf_acm_enable+0xf6>
			} else {
				func_data->func_ep_out = ep_desc.bEndpointAddress;
    b3d6:	7eba      	ldrb	r2, [r7, #26]
    b3d8:	6a3b      	ldr	r3, [r7, #32]
    b3da:	711a      	strb	r2, [r3, #4]
				usb_d_ep_enable(func_data->func_ep_out);
    b3dc:	6a3b      	ldr	r3, [r7, #32]
    b3de:	791b      	ldrb	r3, [r3, #4]
    b3e0:	4618      	mov	r0, r3
    b3e2:	4b1c      	ldr	r3, [pc, #112]	; (b454 <cdcdf_acm_enable+0x164>)
    b3e4:	4798      	blx	r3
			}
			desc->sod = ep;
    b3e6:	683b      	ldr	r3, [r7, #0]
    b3e8:	6aba      	ldr	r2, [r7, #40]	; 0x28
    b3ea:	601a      	str	r2, [r3, #0]
			ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    b3ec:	683b      	ldr	r3, [r7, #0]
    b3ee:	681b      	ldr	r3, [r3, #0]
    b3f0:	4618      	mov	r0, r3
    b3f2:	4b19      	ldr	r3, [pc, #100]	; (b458 <cdcdf_acm_enable+0x168>)
    b3f4:	4798      	blx	r3
    b3f6:	4602      	mov	r2, r0
    b3f8:	683b      	ldr	r3, [r7, #0]
    b3fa:	685b      	ldr	r3, [r3, #4]
    b3fc:	4619      	mov	r1, r3
    b3fe:	4610      	mov	r0, r2
    b400:	4b16      	ldr	r3, [pc, #88]	; (b45c <cdcdf_acm_enable+0x16c>)
    b402:	4798      	blx	r3
    b404:	62b8      	str	r0, [r7, #40]	; 0x28
		while (NULL != ep) {
    b406:	6abb      	ldr	r3, [r7, #40]	; 0x28
    b408:	2b00      	cmp	r3, #0
    b40a:	d1b7      	bne.n	b37c <cdcdf_acm_enable+0x8c>
		}
		ifc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_INTERFACE);
    b40c:	683b      	ldr	r3, [r7, #0]
    b40e:	681b      	ldr	r3, [r3, #0]
    b410:	4618      	mov	r0, r3
    b412:	4b11      	ldr	r3, [pc, #68]	; (b458 <cdcdf_acm_enable+0x168>)
    b414:	4798      	blx	r3
    b416:	683b      	ldr	r3, [r7, #0]
    b418:	685b      	ldr	r3, [r3, #4]
    b41a:	2204      	movs	r2, #4
    b41c:	4619      	mov	r1, r3
    b41e:	4b0a      	ldr	r3, [pc, #40]	; (b448 <cdcdf_acm_enable+0x158>)
    b420:	4798      	blx	r3
    b422:	62f8      	str	r0, [r7, #44]	; 0x2c
	for (i = 0; i < 2; i++) {
    b424:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    b428:	3301      	adds	r3, #1
    b42a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    b42e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    b432:	2b01      	cmp	r3, #1
    b434:	f67f af6b 	bls.w	b30e <cdcdf_acm_enable+0x1e>
	}
	// Installed
	_cdcdf_acm_funcd.enabled = true;
    b438:	4b09      	ldr	r3, [pc, #36]	; (b460 <cdcdf_acm_enable+0x170>)
    b43a:	2201      	movs	r2, #1
    b43c:	715a      	strb	r2, [r3, #5]
	return ERR_NONE;
    b43e:	2300      	movs	r3, #0
}
    b440:	4618      	mov	r0, r3
    b442:	3730      	adds	r7, #48	; 0x30
    b444:	46bd      	mov	sp, r7
    b446:	bd80      	pop	{r7, pc}
    b448:	0000c575 	.word	0x0000c575
    b44c:	0000b28b 	.word	0x0000b28b
    b450:	00003069 	.word	0x00003069
    b454:	00003155 	.word	0x00003155
    b458:	0000b2cd 	.word	0x0000b2cd
    b45c:	0000c5d1 	.word	0x0000c5d1
    b460:	20000be4 	.word	0x20000be4

0000b464 <cdcdf_acm_disable>:
 * \param[in] drv Pointer to USB device function driver
 * \param[in] desc Pointer to USB device descriptor
 * \return Operation status.
 */
static int32_t cdcdf_acm_disable(struct usbdf_driver *drv, struct usbd_descriptors *desc)
{
    b464:	b580      	push	{r7, lr}
    b466:	b088      	sub	sp, #32
    b468:	af00      	add	r7, sp, #0
    b46a:	6078      	str	r0, [r7, #4]
    b46c:	6039      	str	r1, [r7, #0]
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
    b46e:	687b      	ldr	r3, [r7, #4]
    b470:	689b      	ldr	r3, [r3, #8]
    b472:	61bb      	str	r3, [r7, #24]

	usb_iface_desc_t ifc_desc;
	uint8_t          i;

	if (desc) {
    b474:	683b      	ldr	r3, [r7, #0]
    b476:	2b00      	cmp	r3, #0
    b478:	d00c      	beq.n	b494 <cdcdf_acm_disable+0x30>
		ifc_desc.bInterfaceClass = desc->sod[5];
    b47a:	683b      	ldr	r3, [r7, #0]
    b47c:	681b      	ldr	r3, [r3, #0]
    b47e:	795b      	ldrb	r3, [r3, #5]
    b480:	747b      	strb	r3, [r7, #17]
		// Check interface
		if ((ifc_desc.bInterfaceClass != CDC_CLASS_COMM) && (ifc_desc.bInterfaceClass != CDC_CLASS_DATA)) {
    b482:	7c7b      	ldrb	r3, [r7, #17]
    b484:	2b02      	cmp	r3, #2
    b486:	d005      	beq.n	b494 <cdcdf_acm_disable+0x30>
    b488:	7c7b      	ldrb	r3, [r7, #17]
    b48a:	2b0a      	cmp	r3, #10
    b48c:	d002      	beq.n	b494 <cdcdf_acm_disable+0x30>
			return ERR_NOT_FOUND;
    b48e:	f06f 0309 	mvn.w	r3, #9
    b492:	e035      	b.n	b500 <cdcdf_acm_disable+0x9c>
		}
	}

	for (i = 0; i < 2; i++) {
    b494:	2300      	movs	r3, #0
    b496:	77fb      	strb	r3, [r7, #31]
    b498:	e01f      	b.n	b4da <cdcdf_acm_disable+0x76>
		if (func_data->func_iface[i] == 0xFF) {
    b49a:	7ffb      	ldrb	r3, [r7, #31]
    b49c:	69ba      	ldr	r2, [r7, #24]
    b49e:	5cd3      	ldrb	r3, [r2, r3]
    b4a0:	2bff      	cmp	r3, #255	; 0xff
    b4a2:	d016      	beq.n	b4d2 <cdcdf_acm_disable+0x6e>
			continue;
		} else {
			func_data->func_iface[i] = 0xFF;
    b4a4:	7ffb      	ldrb	r3, [r7, #31]
    b4a6:	69ba      	ldr	r2, [r7, #24]
    b4a8:	21ff      	movs	r1, #255	; 0xff
    b4aa:	54d1      	strb	r1, [r2, r3]
			if (func_data->func_ep_in[i] != 0xFF) {
    b4ac:	7ffb      	ldrb	r3, [r7, #31]
    b4ae:	69ba      	ldr	r2, [r7, #24]
    b4b0:	4413      	add	r3, r2
    b4b2:	789b      	ldrb	r3, [r3, #2]
    b4b4:	2bff      	cmp	r3, #255	; 0xff
    b4b6:	d00d      	beq.n	b4d4 <cdcdf_acm_disable+0x70>
				usb_d_ep_deinit(func_data->func_ep_in[i]);
    b4b8:	7ffb      	ldrb	r3, [r7, #31]
    b4ba:	69ba      	ldr	r2, [r7, #24]
    b4bc:	4413      	add	r3, r2
    b4be:	789b      	ldrb	r3, [r3, #2]
    b4c0:	4618      	mov	r0, r3
    b4c2:	4b11      	ldr	r3, [pc, #68]	; (b508 <cdcdf_acm_disable+0xa4>)
    b4c4:	4798      	blx	r3
				func_data->func_ep_in[i] = 0xFF;
    b4c6:	7ffb      	ldrb	r3, [r7, #31]
    b4c8:	69ba      	ldr	r2, [r7, #24]
    b4ca:	4413      	add	r3, r2
    b4cc:	22ff      	movs	r2, #255	; 0xff
    b4ce:	709a      	strb	r2, [r3, #2]
    b4d0:	e000      	b.n	b4d4 <cdcdf_acm_disable+0x70>
			continue;
    b4d2:	bf00      	nop
	for (i = 0; i < 2; i++) {
    b4d4:	7ffb      	ldrb	r3, [r7, #31]
    b4d6:	3301      	adds	r3, #1
    b4d8:	77fb      	strb	r3, [r7, #31]
    b4da:	7ffb      	ldrb	r3, [r7, #31]
    b4dc:	2b01      	cmp	r3, #1
    b4de:	d9dc      	bls.n	b49a <cdcdf_acm_disable+0x36>
			}
		}
	}

	if (func_data->func_ep_out != 0xFF) {
    b4e0:	69bb      	ldr	r3, [r7, #24]
    b4e2:	791b      	ldrb	r3, [r3, #4]
    b4e4:	2bff      	cmp	r3, #255	; 0xff
    b4e6:	d007      	beq.n	b4f8 <cdcdf_acm_disable+0x94>
		usb_d_ep_deinit(func_data->func_ep_out);
    b4e8:	69bb      	ldr	r3, [r7, #24]
    b4ea:	791b      	ldrb	r3, [r3, #4]
    b4ec:	4618      	mov	r0, r3
    b4ee:	4b06      	ldr	r3, [pc, #24]	; (b508 <cdcdf_acm_disable+0xa4>)
    b4f0:	4798      	blx	r3
		func_data->func_ep_out = 0xFF;
    b4f2:	69bb      	ldr	r3, [r7, #24]
    b4f4:	22ff      	movs	r2, #255	; 0xff
    b4f6:	711a      	strb	r2, [r3, #4]
	}

	_cdcdf_acm_funcd.enabled = false;
    b4f8:	4b04      	ldr	r3, [pc, #16]	; (b50c <cdcdf_acm_disable+0xa8>)
    b4fa:	2200      	movs	r2, #0
    b4fc:	715a      	strb	r2, [r3, #5]
	return ERR_NONE;
    b4fe:	2300      	movs	r3, #0
}
    b500:	4618      	mov	r0, r3
    b502:	3720      	adds	r7, #32
    b504:	46bd      	mov	sp, r7
    b506:	bd80      	pop	{r7, pc}
    b508:	00003105 	.word	0x00003105
    b50c:	20000be4 	.word	0x20000be4

0000b510 <cdcdf_acm_ctrl>:
 * \param[in] ctrl USB device general function control type
 * \param[in] param Parameter pointer
 * \return Operation status.
 */
static int32_t cdcdf_acm_ctrl(struct usbdf_driver *drv, enum usbdf_control ctrl, void *param)
{
    b510:	b580      	push	{r7, lr}
    b512:	b084      	sub	sp, #16
    b514:	af00      	add	r7, sp, #0
    b516:	60f8      	str	r0, [r7, #12]
    b518:	460b      	mov	r3, r1
    b51a:	607a      	str	r2, [r7, #4]
    b51c:	72fb      	strb	r3, [r7, #11]
	switch (ctrl) {
    b51e:	7afb      	ldrb	r3, [r7, #11]
    b520:	2b01      	cmp	r3, #1
    b522:	d009      	beq.n	b538 <cdcdf_acm_ctrl+0x28>
    b524:	2b02      	cmp	r3, #2
    b526:	d00d      	beq.n	b544 <cdcdf_acm_ctrl+0x34>
    b528:	2b00      	cmp	r3, #0
    b52a:	d10e      	bne.n	b54a <cdcdf_acm_ctrl+0x3a>
	case USBDF_ENABLE:
		return cdcdf_acm_enable(drv, (struct usbd_descriptors *)param);
    b52c:	6879      	ldr	r1, [r7, #4]
    b52e:	68f8      	ldr	r0, [r7, #12]
    b530:	4b09      	ldr	r3, [pc, #36]	; (b558 <cdcdf_acm_ctrl+0x48>)
    b532:	4798      	blx	r3
    b534:	4603      	mov	r3, r0
    b536:	e00a      	b.n	b54e <cdcdf_acm_ctrl+0x3e>

	case USBDF_DISABLE:
		return cdcdf_acm_disable(drv, (struct usbd_descriptors *)param);
    b538:	6879      	ldr	r1, [r7, #4]
    b53a:	68f8      	ldr	r0, [r7, #12]
    b53c:	4b07      	ldr	r3, [pc, #28]	; (b55c <cdcdf_acm_ctrl+0x4c>)
    b53e:	4798      	blx	r3
    b540:	4603      	mov	r3, r0
    b542:	e004      	b.n	b54e <cdcdf_acm_ctrl+0x3e>

	case USBDF_GET_IFACE:
		return ERR_UNSUPPORTED_OP;
    b544:	f06f 031a 	mvn.w	r3, #26
    b548:	e001      	b.n	b54e <cdcdf_acm_ctrl+0x3e>

	default:
		return ERR_INVALID_ARG;
    b54a:	f06f 030c 	mvn.w	r3, #12
	}
}
    b54e:	4618      	mov	r0, r3
    b550:	3710      	adds	r7, #16
    b552:	46bd      	mov	sp, r7
    b554:	bd80      	pop	{r7, pc}
    b556:	bf00      	nop
    b558:	0000b2f1 	.word	0x0000b2f1
    b55c:	0000b465 	.word	0x0000b465

0000b560 <cdcdf_acm_set_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_set_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    b560:	b590      	push	{r4, r7, lr}
    b562:	b087      	sub	sp, #28
    b564:	af00      	add	r7, sp, #0
    b566:	4603      	mov	r3, r0
    b568:	6039      	str	r1, [r7, #0]
    b56a:	71fb      	strb	r3, [r7, #7]
    b56c:	4613      	mov	r3, r2
    b56e:	71bb      	strb	r3, [r7, #6]
	struct usb_cdc_line_coding line_coding_tmp;
	uint16_t                   len      = req->wLength;
    b570:	683b      	ldr	r3, [r7, #0]
    b572:	799a      	ldrb	r2, [r3, #6]
    b574:	79db      	ldrb	r3, [r3, #7]
    b576:	021b      	lsls	r3, r3, #8
    b578:	4313      	orrs	r3, r2
    b57a:	82fb      	strh	r3, [r7, #22]
	uint8_t *                  ctrl_buf = usbdc_get_ctrl_buffer();
    b57c:	4b2b      	ldr	r3, [pc, #172]	; (b62c <cdcdf_acm_set_req+0xcc>)
    b57e:	4798      	blx	r3
    b580:	6138      	str	r0, [r7, #16]

	switch (req->bRequest) {
    b582:	683b      	ldr	r3, [r7, #0]
    b584:	785b      	ldrb	r3, [r3, #1]
    b586:	2b20      	cmp	r3, #32
    b588:	d002      	beq.n	b590 <cdcdf_acm_set_req+0x30>
    b58a:	2b22      	cmp	r3, #34	; 0x22
    b58c:	d034      	beq.n	b5f8 <cdcdf_acm_set_req+0x98>
    b58e:	e046      	b.n	b61e <cdcdf_acm_set_req+0xbe>
	case USB_REQ_CDC_SET_LINE_CODING:
		if (sizeof(struct usb_cdc_line_coding) != len) {
    b590:	8afb      	ldrh	r3, [r7, #22]
    b592:	2b07      	cmp	r3, #7
    b594:	d002      	beq.n	b59c <cdcdf_acm_set_req+0x3c>
			return ERR_INVALID_DATA;
    b596:	f04f 33ff 	mov.w	r3, #4294967295
    b59a:	e042      	b.n	b622 <cdcdf_acm_set_req+0xc2>
		}
		if (USB_SETUP_STAGE == stage) {
    b59c:	79bb      	ldrb	r3, [r7, #6]
    b59e:	2b00      	cmp	r3, #0
    b5a0:	d107      	bne.n	b5b2 <cdcdf_acm_set_req+0x52>
			return usbdc_xfer(ep, ctrl_buf, len, false);
    b5a2:	8afa      	ldrh	r2, [r7, #22]
    b5a4:	79f8      	ldrb	r0, [r7, #7]
    b5a6:	2300      	movs	r3, #0
    b5a8:	6939      	ldr	r1, [r7, #16]
    b5aa:	4c21      	ldr	r4, [pc, #132]	; (b630 <cdcdf_acm_set_req+0xd0>)
    b5ac:	47a0      	blx	r4
    b5ae:	4603      	mov	r3, r0
    b5b0:	e037      	b.n	b622 <cdcdf_acm_set_req+0xc2>
		} else {
			memcpy(&line_coding_tmp, ctrl_buf, sizeof(struct usb_cdc_line_coding));
    b5b2:	693a      	ldr	r2, [r7, #16]
    b5b4:	f107 0308 	add.w	r3, r7, #8
    b5b8:	6810      	ldr	r0, [r2, #0]
    b5ba:	6018      	str	r0, [r3, #0]
    b5bc:	8891      	ldrh	r1, [r2, #4]
    b5be:	7992      	ldrb	r2, [r2, #6]
    b5c0:	8099      	strh	r1, [r3, #4]
    b5c2:	719a      	strb	r2, [r3, #6]
			if ((NULL == cdcdf_acm_set_line_coding) || (true == cdcdf_acm_set_line_coding(&line_coding_tmp))) {
    b5c4:	4b1b      	ldr	r3, [pc, #108]	; (b634 <cdcdf_acm_set_req+0xd4>)
    b5c6:	681b      	ldr	r3, [r3, #0]
    b5c8:	2b00      	cmp	r3, #0
    b5ca:	d008      	beq.n	b5de <cdcdf_acm_set_req+0x7e>
    b5cc:	4b19      	ldr	r3, [pc, #100]	; (b634 <cdcdf_acm_set_req+0xd4>)
    b5ce:	681b      	ldr	r3, [r3, #0]
    b5d0:	f107 0208 	add.w	r2, r7, #8
    b5d4:	4610      	mov	r0, r2
    b5d6:	4798      	blx	r3
    b5d8:	4603      	mov	r3, r0
    b5da:	2b00      	cmp	r3, #0
    b5dc:	d00a      	beq.n	b5f4 <cdcdf_acm_set_req+0x94>
				usbd_cdc_line_coding = line_coding_tmp;
    b5de:	4b16      	ldr	r3, [pc, #88]	; (b638 <cdcdf_acm_set_req+0xd8>)
    b5e0:	f107 0208 	add.w	r2, r7, #8
    b5e4:	e892 0003 	ldmia.w	r2, {r0, r1}
    b5e8:	6018      	str	r0, [r3, #0]
    b5ea:	3304      	adds	r3, #4
    b5ec:	8019      	strh	r1, [r3, #0]
    b5ee:	3302      	adds	r3, #2
    b5f0:	0c0a      	lsrs	r2, r1, #16
    b5f2:	701a      	strb	r2, [r3, #0]
			}
			return ERR_NONE;
    b5f4:	2300      	movs	r3, #0
    b5f6:	e014      	b.n	b622 <cdcdf_acm_set_req+0xc2>
		}
	case USB_REQ_CDC_SET_CONTROL_LINE_STATE:
		usbdc_xfer(0, NULL, 0, 0);
    b5f8:	2300      	movs	r3, #0
    b5fa:	2200      	movs	r2, #0
    b5fc:	2100      	movs	r1, #0
    b5fe:	2000      	movs	r0, #0
    b600:	4c0b      	ldr	r4, [pc, #44]	; (b630 <cdcdf_acm_set_req+0xd0>)
    b602:	47a0      	blx	r4
		if (NULL != cdcdf_acm_notify_state) {
    b604:	4b0d      	ldr	r3, [pc, #52]	; (b63c <cdcdf_acm_set_req+0xdc>)
    b606:	681b      	ldr	r3, [r3, #0]
    b608:	2b00      	cmp	r3, #0
    b60a:	d006      	beq.n	b61a <cdcdf_acm_set_req+0xba>
			cdcdf_acm_notify_state(req->wValue);
    b60c:	4b0b      	ldr	r3, [pc, #44]	; (b63c <cdcdf_acm_set_req+0xdc>)
    b60e:	681b      	ldr	r3, [r3, #0]
    b610:	683a      	ldr	r2, [r7, #0]
    b612:	8852      	ldrh	r2, [r2, #2]
    b614:	b292      	uxth	r2, r2
    b616:	4610      	mov	r0, r2
    b618:	4798      	blx	r3
		}
		return ERR_NONE;
    b61a:	2300      	movs	r3, #0
    b61c:	e001      	b.n	b622 <cdcdf_acm_set_req+0xc2>
	default:
		return ERR_INVALID_ARG;
    b61e:	f06f 030c 	mvn.w	r3, #12
	}
}
    b622:	4618      	mov	r0, r3
    b624:	371c      	adds	r7, #28
    b626:	46bd      	mov	sp, r7
    b628:	bd90      	pop	{r4, r7, pc}
    b62a:	bf00      	nop
    b62c:	0000c471 	.word	0x0000c471
    b630:	0000c2e5 	.word	0x0000c2e5
    b634:	20000bf8 	.word	0x20000bf8
    b638:	20000bec 	.word	0x20000bec
    b63c:	20000bf4 	.word	0x20000bf4

0000b640 <cdcdf_acm_get_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_get_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    b640:	b590      	push	{r4, r7, lr}
    b642:	b085      	sub	sp, #20
    b644:	af00      	add	r7, sp, #0
    b646:	4603      	mov	r3, r0
    b648:	6039      	str	r1, [r7, #0]
    b64a:	71fb      	strb	r3, [r7, #7]
    b64c:	4613      	mov	r3, r2
    b64e:	71bb      	strb	r3, [r7, #6]
	uint16_t len = req->wLength;
    b650:	683b      	ldr	r3, [r7, #0]
    b652:	799a      	ldrb	r2, [r3, #6]
    b654:	79db      	ldrb	r3, [r3, #7]
    b656:	021b      	lsls	r3, r3, #8
    b658:	4313      	orrs	r3, r2
    b65a:	81fb      	strh	r3, [r7, #14]

	if (USB_DATA_STAGE == stage) {
    b65c:	79bb      	ldrb	r3, [r7, #6]
    b65e:	2b01      	cmp	r3, #1
    b660:	d101      	bne.n	b666 <cdcdf_acm_get_req+0x26>
		return ERR_NONE;
    b662:	2300      	movs	r3, #0
    b664:	e013      	b.n	b68e <cdcdf_acm_get_req+0x4e>
	}

	switch (req->bRequest) {
    b666:	683b      	ldr	r3, [r7, #0]
    b668:	785b      	ldrb	r3, [r3, #1]
    b66a:	2b21      	cmp	r3, #33	; 0x21
    b66c:	d10d      	bne.n	b68a <cdcdf_acm_get_req+0x4a>
	case USB_REQ_CDC_GET_LINE_CODING:
		if (sizeof(struct usb_cdc_line_coding) != len) {
    b66e:	89fb      	ldrh	r3, [r7, #14]
    b670:	2b07      	cmp	r3, #7
    b672:	d002      	beq.n	b67a <cdcdf_acm_get_req+0x3a>
			return ERR_INVALID_DATA;
    b674:	f04f 33ff 	mov.w	r3, #4294967295
    b678:	e009      	b.n	b68e <cdcdf_acm_get_req+0x4e>
		}
		return usbdc_xfer(ep, (uint8_t *)&usbd_cdc_line_coding, len, false);
    b67a:	89fa      	ldrh	r2, [r7, #14]
    b67c:	79f8      	ldrb	r0, [r7, #7]
    b67e:	2300      	movs	r3, #0
    b680:	4905      	ldr	r1, [pc, #20]	; (b698 <cdcdf_acm_get_req+0x58>)
    b682:	4c06      	ldr	r4, [pc, #24]	; (b69c <cdcdf_acm_get_req+0x5c>)
    b684:	47a0      	blx	r4
    b686:	4603      	mov	r3, r0
    b688:	e001      	b.n	b68e <cdcdf_acm_get_req+0x4e>
	default:
		return ERR_INVALID_ARG;
    b68a:	f06f 030c 	mvn.w	r3, #12
	}
}
    b68e:	4618      	mov	r0, r3
    b690:	3714      	adds	r7, #20
    b692:	46bd      	mov	sp, r7
    b694:	bd90      	pop	{r4, r7, pc}
    b696:	bf00      	nop
    b698:	20000bec 	.word	0x20000bec
    b69c:	0000c2e5 	.word	0x0000c2e5

0000b6a0 <cdcdf_acm_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    b6a0:	b580      	push	{r7, lr}
    b6a2:	b082      	sub	sp, #8
    b6a4:	af00      	add	r7, sp, #0
    b6a6:	4603      	mov	r3, r0
    b6a8:	6039      	str	r1, [r7, #0]
    b6aa:	71fb      	strb	r3, [r7, #7]
    b6ac:	4613      	mov	r3, r2
    b6ae:	71bb      	strb	r3, [r7, #6]
	if (0x01 != ((req->bmRequestType >> 5) & 0x03)) { // class request
    b6b0:	683b      	ldr	r3, [r7, #0]
    b6b2:	781b      	ldrb	r3, [r3, #0]
    b6b4:	095b      	lsrs	r3, r3, #5
    b6b6:	b2db      	uxtb	r3, r3
    b6b8:	f003 0303 	and.w	r3, r3, #3
    b6bc:	2b01      	cmp	r3, #1
    b6be:	d002      	beq.n	b6c6 <cdcdf_acm_req+0x26>
		return ERR_NOT_FOUND;
    b6c0:	f06f 0309 	mvn.w	r3, #9
    b6c4:	e026      	b.n	b714 <cdcdf_acm_req+0x74>
	}
	if ((req->wIndex == _cdcdf_acm_funcd.func_iface[0]) || (req->wIndex == _cdcdf_acm_funcd.func_iface[1])) {
    b6c6:	683b      	ldr	r3, [r7, #0]
    b6c8:	889b      	ldrh	r3, [r3, #4]
    b6ca:	b29a      	uxth	r2, r3
    b6cc:	4b13      	ldr	r3, [pc, #76]	; (b71c <cdcdf_acm_req+0x7c>)
    b6ce:	781b      	ldrb	r3, [r3, #0]
    b6d0:	b29b      	uxth	r3, r3
    b6d2:	429a      	cmp	r2, r3
    b6d4:	d007      	beq.n	b6e6 <cdcdf_acm_req+0x46>
    b6d6:	683b      	ldr	r3, [r7, #0]
    b6d8:	889b      	ldrh	r3, [r3, #4]
    b6da:	b29a      	uxth	r2, r3
    b6dc:	4b0f      	ldr	r3, [pc, #60]	; (b71c <cdcdf_acm_req+0x7c>)
    b6de:	785b      	ldrb	r3, [r3, #1]
    b6e0:	b29b      	uxth	r3, r3
    b6e2:	429a      	cmp	r2, r3
    b6e4:	d114      	bne.n	b710 <cdcdf_acm_req+0x70>
		if (req->bmRequestType & USB_EP_DIR_IN) {
    b6e6:	683b      	ldr	r3, [r7, #0]
    b6e8:	781b      	ldrb	r3, [r3, #0]
    b6ea:	b25b      	sxtb	r3, r3
    b6ec:	2b00      	cmp	r3, #0
    b6ee:	da07      	bge.n	b700 <cdcdf_acm_req+0x60>
			return cdcdf_acm_get_req(ep, req, stage);
    b6f0:	79ba      	ldrb	r2, [r7, #6]
    b6f2:	79fb      	ldrb	r3, [r7, #7]
    b6f4:	6839      	ldr	r1, [r7, #0]
    b6f6:	4618      	mov	r0, r3
    b6f8:	4b09      	ldr	r3, [pc, #36]	; (b720 <cdcdf_acm_req+0x80>)
    b6fa:	4798      	blx	r3
    b6fc:	4603      	mov	r3, r0
    b6fe:	e009      	b.n	b714 <cdcdf_acm_req+0x74>
		} else {
			return cdcdf_acm_set_req(ep, req, stage);
    b700:	79ba      	ldrb	r2, [r7, #6]
    b702:	79fb      	ldrb	r3, [r7, #7]
    b704:	6839      	ldr	r1, [r7, #0]
    b706:	4618      	mov	r0, r3
    b708:	4b06      	ldr	r3, [pc, #24]	; (b724 <cdcdf_acm_req+0x84>)
    b70a:	4798      	blx	r3
    b70c:	4603      	mov	r3, r0
    b70e:	e001      	b.n	b714 <cdcdf_acm_req+0x74>
		}
	} else {
		return ERR_NOT_FOUND;
    b710:	f06f 0309 	mvn.w	r3, #9
	}
}
    b714:	4618      	mov	r0, r3
    b716:	3708      	adds	r7, #8
    b718:	46bd      	mov	sp, r7
    b71a:	bd80      	pop	{r7, pc}
    b71c:	20000be4 	.word	0x20000be4
    b720:	0000b641 	.word	0x0000b641
    b724:	0000b561 	.word	0x0000b561

0000b728 <cdcdf_acm_init>:

/**
 * \brief Initialize the USB CDC ACM Function Driver
 */
int32_t cdcdf_acm_init(void)
{
    b728:	b580      	push	{r7, lr}
    b72a:	af00      	add	r7, sp, #0
	if (usbdc_get_state() > USBD_S_POWER) {
    b72c:	4b0b      	ldr	r3, [pc, #44]	; (b75c <cdcdf_acm_init+0x34>)
    b72e:	4798      	blx	r3
    b730:	4603      	mov	r3, r0
    b732:	2b01      	cmp	r3, #1
    b734:	d902      	bls.n	b73c <cdcdf_acm_init+0x14>
		return ERR_DENIED;
    b736:	f06f 0310 	mvn.w	r3, #16
    b73a:	e00d      	b.n	b758 <cdcdf_acm_init+0x30>
	}

	_cdcdf_acm.ctrl      = cdcdf_acm_ctrl;
    b73c:	4b08      	ldr	r3, [pc, #32]	; (b760 <cdcdf_acm_init+0x38>)
    b73e:	4a09      	ldr	r2, [pc, #36]	; (b764 <cdcdf_acm_init+0x3c>)
    b740:	605a      	str	r2, [r3, #4]
	_cdcdf_acm.func_data = &_cdcdf_acm_funcd;
    b742:	4b07      	ldr	r3, [pc, #28]	; (b760 <cdcdf_acm_init+0x38>)
    b744:	4a08      	ldr	r2, [pc, #32]	; (b768 <cdcdf_acm_init+0x40>)
    b746:	609a      	str	r2, [r3, #8]

	usbdc_register_function(&_cdcdf_acm);
    b748:	4805      	ldr	r0, [pc, #20]	; (b760 <cdcdf_acm_init+0x38>)
    b74a:	4b08      	ldr	r3, [pc, #32]	; (b76c <cdcdf_acm_init+0x44>)
    b74c:	4798      	blx	r3
	usbdc_register_handler(USBDC_HDL_REQ, &cdcdf_acm_req_h);
    b74e:	4908      	ldr	r1, [pc, #32]	; (b770 <cdcdf_acm_init+0x48>)
    b750:	2001      	movs	r0, #1
    b752:	4b08      	ldr	r3, [pc, #32]	; (b774 <cdcdf_acm_init+0x4c>)
    b754:	4798      	blx	r3
	return ERR_NONE;
    b756:	2300      	movs	r3, #0
}
    b758:	4618      	mov	r0, r3
    b75a:	bd80      	pop	{r7, pc}
    b75c:	0000c489 	.word	0x0000c489
    b760:	20000bd8 	.word	0x20000bd8
    b764:	0000b511 	.word	0x0000b511
    b768:	20000be4 	.word	0x20000be4
    b76c:	0000c3f1 	.word	0x0000c3f1
    b770:	200000f4 	.word	0x200000f4
    b774:	0000c321 	.word	0x0000c321

0000b778 <usb_get_u16>:
{
    b778:	b480      	push	{r7}
    b77a:	b083      	sub	sp, #12
    b77c:	af00      	add	r7, sp, #0
    b77e:	6078      	str	r0, [r7, #4]
	return (ptr[0] + (ptr[1] << 8));
    b780:	687b      	ldr	r3, [r7, #4]
    b782:	781b      	ldrb	r3, [r3, #0]
    b784:	b29a      	uxth	r2, r3
    b786:	687b      	ldr	r3, [r7, #4]
    b788:	3301      	adds	r3, #1
    b78a:	781b      	ldrb	r3, [r3, #0]
    b78c:	b29b      	uxth	r3, r3
    b78e:	021b      	lsls	r3, r3, #8
    b790:	b29b      	uxth	r3, r3
    b792:	4413      	add	r3, r2
    b794:	b29b      	uxth	r3, r3
}
    b796:	4618      	mov	r0, r3
    b798:	370c      	adds	r7, #12
    b79a:	46bd      	mov	sp, r7
    b79c:	f85d 7b04 	ldr.w	r7, [sp], #4
    b7a0:	4770      	bx	lr

0000b7a2 <usb_desc_len>:
{
    b7a2:	b480      	push	{r7}
    b7a4:	b083      	sub	sp, #12
    b7a6:	af00      	add	r7, sp, #0
    b7a8:	6078      	str	r0, [r7, #4]
	return desc[0];
    b7aa:	687b      	ldr	r3, [r7, #4]
    b7ac:	781b      	ldrb	r3, [r3, #0]
}
    b7ae:	4618      	mov	r0, r3
    b7b0:	370c      	adds	r7, #12
    b7b2:	46bd      	mov	sp, r7
    b7b4:	f85d 7b04 	ldr.w	r7, [sp], #4
    b7b8:	4770      	bx	lr
	...

0000b7bc <usb_desc_next>:
{
    b7bc:	b580      	push	{r7, lr}
    b7be:	b082      	sub	sp, #8
    b7c0:	af00      	add	r7, sp, #0
    b7c2:	6078      	str	r0, [r7, #4]
	return (desc + usb_desc_len(desc));
    b7c4:	6878      	ldr	r0, [r7, #4]
    b7c6:	4b05      	ldr	r3, [pc, #20]	; (b7dc <usb_desc_next+0x20>)
    b7c8:	4798      	blx	r3
    b7ca:	4603      	mov	r3, r0
    b7cc:	461a      	mov	r2, r3
    b7ce:	687b      	ldr	r3, [r7, #4]
    b7d0:	4413      	add	r3, r2
}
    b7d2:	4618      	mov	r0, r3
    b7d4:	3708      	adds	r7, #8
    b7d6:	46bd      	mov	sp, r7
    b7d8:	bd80      	pop	{r7, pc}
    b7da:	bf00      	nop
    b7dc:	0000b7a3 	.word	0x0000b7a3

0000b7e0 <usb_cfg_desc_total_len>:
/** \brief Get wTotalLength of USB Configuration Descriptor
 *  \param[in] cfg_desc Byte pointer to the descriptor start address
 *  \return 16-bit total length of configuration list
 */
static inline uint16_t usb_cfg_desc_total_len(const uint8_t *cfg_desc)
{
    b7e0:	b580      	push	{r7, lr}
    b7e2:	b082      	sub	sp, #8
    b7e4:	af00      	add	r7, sp, #0
    b7e6:	6078      	str	r0, [r7, #4]
	return usb_get_u16(cfg_desc + 2);
    b7e8:	687b      	ldr	r3, [r7, #4]
    b7ea:	3302      	adds	r3, #2
    b7ec:	4618      	mov	r0, r3
    b7ee:	4b03      	ldr	r3, [pc, #12]	; (b7fc <usb_cfg_desc_total_len+0x1c>)
    b7f0:	4798      	blx	r3
    b7f2:	4603      	mov	r3, r0
}
    b7f4:	4618      	mov	r0, r3
    b7f6:	3708      	adds	r7, #8
    b7f8:	46bd      	mov	sp, r7
    b7fa:	bd80      	pop	{r7, pc}
    b7fc:	0000b779 	.word	0x0000b779

0000b800 <usbdc_get_dev_desc>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_dev_desc(const uint8_t ep, struct usb_req *req)
{
    b800:	b590      	push	{r4, r7, lr}
    b802:	b085      	sub	sp, #20
    b804:	af00      	add	r7, sp, #0
    b806:	4603      	mov	r3, r0
    b808:	6039      	str	r1, [r7, #0]
    b80a:	71fb      	strb	r3, [r7, #7]
	uint8_t *dev_desc = NULL;
    b80c:	2300      	movs	r3, #0
    b80e:	60fb      	str	r3, [r7, #12]
	uint16_t length   = req->wLength;
    b810:	683b      	ldr	r3, [r7, #0]
    b812:	799a      	ldrb	r2, [r3, #6]
    b814:	79db      	ldrb	r3, [r3, #7]
    b816:	021b      	lsls	r3, r3, #8
    b818:	4313      	orrs	r3, r2
    b81a:	817b      	strh	r3, [r7, #10]
	if (length > 0x12) {
    b81c:	897b      	ldrh	r3, [r7, #10]
    b81e:	2b12      	cmp	r3, #18
    b820:	d901      	bls.n	b826 <usbdc_get_dev_desc+0x26>
		length = 0x12;
    b822:	2312      	movs	r3, #18
    b824:	817b      	strh	r3, [r7, #10]
		dev_desc = usb_find_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, USB_DT_DEVICE);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!dev_desc) {
    b826:	68fb      	ldr	r3, [r7, #12]
    b828:	2b00      	cmp	r3, #0
    b82a:	d10a      	bne.n	b842 <usbdc_get_dev_desc+0x42>
		dev_desc = usb_find_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, USB_DT_DEVICE);
    b82c:	4b0f      	ldr	r3, [pc, #60]	; (b86c <usbdc_get_dev_desc+0x6c>)
    b82e:	681b      	ldr	r3, [r3, #0]
    b830:	6818      	ldr	r0, [r3, #0]
    b832:	4b0e      	ldr	r3, [pc, #56]	; (b86c <usbdc_get_dev_desc+0x6c>)
    b834:	681b      	ldr	r3, [r3, #0]
    b836:	685b      	ldr	r3, [r3, #4]
    b838:	2201      	movs	r2, #1
    b83a:	4619      	mov	r1, r3
    b83c:	4b0c      	ldr	r3, [pc, #48]	; (b870 <usbdc_get_dev_desc+0x70>)
    b83e:	4798      	blx	r3
    b840:	60f8      	str	r0, [r7, #12]
	}
	if (!dev_desc) {
    b842:	68fb      	ldr	r3, [r7, #12]
    b844:	2b00      	cmp	r3, #0
    b846:	d101      	bne.n	b84c <usbdc_get_dev_desc+0x4c>
		return false;
    b848:	2300      	movs	r3, #0
    b84a:	e00b      	b.n	b864 <usbdc_get_dev_desc+0x64>
	}
	if (ERR_NONE != usbdc_xfer(ep, dev_desc, length, false)) {
    b84c:	897a      	ldrh	r2, [r7, #10]
    b84e:	79f8      	ldrb	r0, [r7, #7]
    b850:	2300      	movs	r3, #0
    b852:	68f9      	ldr	r1, [r7, #12]
    b854:	4c07      	ldr	r4, [pc, #28]	; (b874 <usbdc_get_dev_desc+0x74>)
    b856:	47a0      	blx	r4
    b858:	4603      	mov	r3, r0
    b85a:	2b00      	cmp	r3, #0
    b85c:	d001      	beq.n	b862 <usbdc_get_dev_desc+0x62>
		return false;
    b85e:	2300      	movs	r3, #0
    b860:	e000      	b.n	b864 <usbdc_get_dev_desc+0x64>
	}
	return true;
    b862:	2301      	movs	r3, #1
}
    b864:	4618      	mov	r0, r3
    b866:	3714      	adds	r7, #20
    b868:	46bd      	mov	sp, r7
    b86a:	bd90      	pop	{r4, r7, pc}
    b86c:	20000bfc 	.word	0x20000bfc
    b870:	0000c575 	.word	0x0000c575
    b874:	0000c2e5 	.word	0x0000c2e5

0000b878 <usbdc_get_cfg_desc>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_cfg_desc(const uint8_t ep, struct usb_req *req)
{
    b878:	b590      	push	{r4, r7, lr}
    b87a:	b087      	sub	sp, #28
    b87c:	af00      	add	r7, sp, #0
    b87e:	4603      	mov	r3, r0
    b880:	6039      	str	r1, [r7, #0]
    b882:	71fb      	strb	r3, [r7, #7]
	uint8_t *cfg_desc = NULL;
    b884:	2300      	movs	r3, #0
    b886:	617b      	str	r3, [r7, #20]
	uint16_t total_len;
	uint16_t length   = req->wLength;
    b888:	683b      	ldr	r3, [r7, #0]
    b88a:	799a      	ldrb	r2, [r3, #6]
    b88c:	79db      	ldrb	r3, [r3, #7]
    b88e:	021b      	lsls	r3, r3, #8
    b890:	4313      	orrs	r3, r2
    b892:	827b      	strh	r3, [r7, #18]
	uint8_t  index    = req->wValue & 0x00FF;
    b894:	683b      	ldr	r3, [r7, #0]
    b896:	885b      	ldrh	r3, [r3, #2]
    b898:	b29b      	uxth	r3, r3
    b89a:	743b      	strb	r3, [r7, #16]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    b89c:	8a7a      	ldrh	r2, [r7, #18]
    b89e:	4b1e      	ldr	r3, [pc, #120]	; (b918 <usbdc_get_cfg_desc+0xa0>)
    b8a0:	7f1b      	ldrb	r3, [r3, #28]
    b8a2:	3b01      	subs	r3, #1
    b8a4:	4013      	ands	r3, r2
    b8a6:	2b00      	cmp	r3, #0
    b8a8:	bf0c      	ite	eq
    b8aa:	2301      	moveq	r3, #1
    b8ac:	2300      	movne	r3, #0
    b8ae:	747b      	strb	r3, [r7, #17]
		cfg_desc = usb_find_cfg_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, index + 1);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!cfg_desc) {
    b8b0:	697b      	ldr	r3, [r7, #20]
    b8b2:	2b00      	cmp	r3, #0
    b8b4:	d10c      	bne.n	b8d0 <usbdc_get_cfg_desc+0x58>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index + 1);
    b8b6:	4b18      	ldr	r3, [pc, #96]	; (b918 <usbdc_get_cfg_desc+0xa0>)
    b8b8:	681b      	ldr	r3, [r3, #0]
    b8ba:	6818      	ldr	r0, [r3, #0]
    b8bc:	4b16      	ldr	r3, [pc, #88]	; (b918 <usbdc_get_cfg_desc+0xa0>)
    b8be:	681b      	ldr	r3, [r3, #0]
    b8c0:	6859      	ldr	r1, [r3, #4]
    b8c2:	7c3b      	ldrb	r3, [r7, #16]
    b8c4:	3301      	adds	r3, #1
    b8c6:	b2db      	uxtb	r3, r3
    b8c8:	461a      	mov	r2, r3
    b8ca:	4b14      	ldr	r3, [pc, #80]	; (b91c <usbdc_get_cfg_desc+0xa4>)
    b8cc:	4798      	blx	r3
    b8ce:	6178      	str	r0, [r7, #20]
	}
	if (NULL == cfg_desc) {
    b8d0:	697b      	ldr	r3, [r7, #20]
    b8d2:	2b00      	cmp	r3, #0
    b8d4:	d101      	bne.n	b8da <usbdc_get_cfg_desc+0x62>
		return false;
    b8d6:	2300      	movs	r3, #0
    b8d8:	e019      	b.n	b90e <usbdc_get_cfg_desc+0x96>
	}
	total_len = usb_cfg_desc_total_len(cfg_desc);
    b8da:	6978      	ldr	r0, [r7, #20]
    b8dc:	4b10      	ldr	r3, [pc, #64]	; (b920 <usbdc_get_cfg_desc+0xa8>)
    b8de:	4798      	blx	r3
    b8e0:	4603      	mov	r3, r0
    b8e2:	81fb      	strh	r3, [r7, #14]
	if (length <= total_len) {
    b8e4:	8a7a      	ldrh	r2, [r7, #18]
    b8e6:	89fb      	ldrh	r3, [r7, #14]
    b8e8:	429a      	cmp	r2, r3
    b8ea:	d802      	bhi.n	b8f2 <usbdc_get_cfg_desc+0x7a>
		need_zlp = false;
    b8ec:	2300      	movs	r3, #0
    b8ee:	747b      	strb	r3, [r7, #17]
    b8f0:	e001      	b.n	b8f6 <usbdc_get_cfg_desc+0x7e>
	} else {
		length = total_len;
    b8f2:	89fb      	ldrh	r3, [r7, #14]
    b8f4:	827b      	strh	r3, [r7, #18]
	}
	if (ERR_NONE != usbdc_xfer(ep, cfg_desc, length, need_zlp)) {
    b8f6:	8a7a      	ldrh	r2, [r7, #18]
    b8f8:	7c7b      	ldrb	r3, [r7, #17]
    b8fa:	79f8      	ldrb	r0, [r7, #7]
    b8fc:	6979      	ldr	r1, [r7, #20]
    b8fe:	4c09      	ldr	r4, [pc, #36]	; (b924 <usbdc_get_cfg_desc+0xac>)
    b900:	47a0      	blx	r4
    b902:	4603      	mov	r3, r0
    b904:	2b00      	cmp	r3, #0
    b906:	d001      	beq.n	b90c <usbdc_get_cfg_desc+0x94>
		return false;
    b908:	2300      	movs	r3, #0
    b90a:	e000      	b.n	b90e <usbdc_get_cfg_desc+0x96>
	}
	return true;
    b90c:	2301      	movs	r3, #1
}
    b90e:	4618      	mov	r0, r3
    b910:	371c      	adds	r7, #28
    b912:	46bd      	mov	sp, r7
    b914:	bd90      	pop	{r4, r7, pc}
    b916:	bf00      	nop
    b918:	20000bfc 	.word	0x20000bfc
    b91c:	0000c635 	.word	0x0000c635
    b920:	0000b7e1 	.word	0x0000b7e1
    b924:	0000c2e5 	.word	0x0000c2e5

0000b928 <usbdc_get_str_desc>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_str_desc(const uint8_t ep, struct usb_req *req)
{
    b928:	b590      	push	{r4, r7, lr}
    b92a:	b085      	sub	sp, #20
    b92c:	af00      	add	r7, sp, #0
    b92e:	4603      	mov	r3, r0
    b930:	6039      	str	r1, [r7, #0]
    b932:	71fb      	strb	r3, [r7, #7]
	uint8_t *str_desc;
	uint16_t length   = req->wLength;
    b934:	683b      	ldr	r3, [r7, #0]
    b936:	799a      	ldrb	r2, [r3, #6]
    b938:	79db      	ldrb	r3, [r3, #7]
    b93a:	021b      	lsls	r3, r3, #8
    b93c:	4313      	orrs	r3, r2
    b93e:	81fb      	strh	r3, [r7, #14]
	uint8_t  index    = req->wValue & 0x00FF;
    b940:	683b      	ldr	r3, [r7, #0]
    b942:	885b      	ldrh	r3, [r3, #2]
    b944:	b29b      	uxth	r3, r3
    b946:	733b      	strb	r3, [r7, #12]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    b948:	89fa      	ldrh	r2, [r7, #14]
    b94a:	4b1a      	ldr	r3, [pc, #104]	; (b9b4 <usbdc_get_str_desc+0x8c>)
    b94c:	7f1b      	ldrb	r3, [r3, #28]
    b94e:	3b01      	subs	r3, #1
    b950:	4013      	ands	r3, r2
    b952:	2b00      	cmp	r3, #0
    b954:	bf0c      	ite	eq
    b956:	2301      	moveq	r3, #1
    b958:	2300      	movne	r3, #0
    b95a:	737b      	strb	r3, [r7, #13]
	/* All string are in default descriptors block: FS/LS */
	str_desc = usb_find_str_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index);
    b95c:	4b15      	ldr	r3, [pc, #84]	; (b9b4 <usbdc_get_str_desc+0x8c>)
    b95e:	681b      	ldr	r3, [r3, #0]
    b960:	6818      	ldr	r0, [r3, #0]
    b962:	4b14      	ldr	r3, [pc, #80]	; (b9b4 <usbdc_get_str_desc+0x8c>)
    b964:	681b      	ldr	r3, [r3, #0]
    b966:	685b      	ldr	r3, [r3, #4]
    b968:	7b3a      	ldrb	r2, [r7, #12]
    b96a:	4619      	mov	r1, r3
    b96c:	4b12      	ldr	r3, [pc, #72]	; (b9b8 <usbdc_get_str_desc+0x90>)
    b96e:	4798      	blx	r3
    b970:	60b8      	str	r0, [r7, #8]
	if (NULL == str_desc) {
    b972:	68bb      	ldr	r3, [r7, #8]
    b974:	2b00      	cmp	r3, #0
    b976:	d101      	bne.n	b97c <usbdc_get_str_desc+0x54>
		return false;
    b978:	2300      	movs	r3, #0
    b97a:	e017      	b.n	b9ac <usbdc_get_str_desc+0x84>
	}
	if (length <= str_desc[0]) {
    b97c:	68bb      	ldr	r3, [r7, #8]
    b97e:	781b      	ldrb	r3, [r3, #0]
    b980:	b29b      	uxth	r3, r3
    b982:	89fa      	ldrh	r2, [r7, #14]
    b984:	429a      	cmp	r2, r3
    b986:	d802      	bhi.n	b98e <usbdc_get_str_desc+0x66>
		need_zlp = false;
    b988:	2300      	movs	r3, #0
    b98a:	737b      	strb	r3, [r7, #13]
    b98c:	e002      	b.n	b994 <usbdc_get_str_desc+0x6c>
	} else {
		length = str_desc[0];
    b98e:	68bb      	ldr	r3, [r7, #8]
    b990:	781b      	ldrb	r3, [r3, #0]
    b992:	81fb      	strh	r3, [r7, #14]
	}
	if (ERR_NONE != usbdc_xfer(ep, str_desc, length, need_zlp)) {
    b994:	89fa      	ldrh	r2, [r7, #14]
    b996:	7b7b      	ldrb	r3, [r7, #13]
    b998:	79f8      	ldrb	r0, [r7, #7]
    b99a:	68b9      	ldr	r1, [r7, #8]
    b99c:	4c07      	ldr	r4, [pc, #28]	; (b9bc <usbdc_get_str_desc+0x94>)
    b99e:	47a0      	blx	r4
    b9a0:	4603      	mov	r3, r0
    b9a2:	2b00      	cmp	r3, #0
    b9a4:	d001      	beq.n	b9aa <usbdc_get_str_desc+0x82>
		return false;
    b9a6:	2300      	movs	r3, #0
    b9a8:	e000      	b.n	b9ac <usbdc_get_str_desc+0x84>
	}
	return true;
    b9aa:	2301      	movs	r3, #1
}
    b9ac:	4618      	mov	r0, r3
    b9ae:	3714      	adds	r7, #20
    b9b0:	46bd      	mov	sp, r7
    b9b2:	bd90      	pop	{r4, r7, pc}
    b9b4:	20000bfc 	.word	0x20000bfc
    b9b8:	0000c6ad 	.word	0x0000c6ad
    b9bc:	0000c2e5 	.word	0x0000c2e5

0000b9c0 <usbdc_get_desc_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_desc_req(const uint8_t ep, struct usb_req *req)
{
    b9c0:	b580      	push	{r7, lr}
    b9c2:	b084      	sub	sp, #16
    b9c4:	af00      	add	r7, sp, #0
    b9c6:	4603      	mov	r3, r0
    b9c8:	6039      	str	r1, [r7, #0]
    b9ca:	71fb      	strb	r3, [r7, #7]
	uint8_t type = (uint8_t)(req->wValue >> 8);
    b9cc:	683b      	ldr	r3, [r7, #0]
    b9ce:	885b      	ldrh	r3, [r3, #2]
    b9d0:	b29b      	uxth	r3, r3
    b9d2:	0a1b      	lsrs	r3, r3, #8
    b9d4:	b29b      	uxth	r3, r3
    b9d6:	73fb      	strb	r3, [r7, #15]
	switch (type) {
    b9d8:	7bfb      	ldrb	r3, [r7, #15]
    b9da:	2b02      	cmp	r3, #2
    b9dc:	d00d      	beq.n	b9fa <usbdc_get_desc_req+0x3a>
    b9de:	2b03      	cmp	r3, #3
    b9e0:	d012      	beq.n	ba08 <usbdc_get_desc_req+0x48>
    b9e2:	2b01      	cmp	r3, #1
    b9e4:	d002      	beq.n	b9ec <usbdc_get_desc_req+0x2c>
		return usbdc_get_othspdcfg_desc(ep, req);
#endif
	case USB_DT_STRING:
		return usbdc_get_str_desc(ep, req);
	default:
		break;
    b9e6:	bf00      	nop
	}
	return false;
    b9e8:	2300      	movs	r3, #0
    b9ea:	e013      	b.n	ba14 <usbdc_get_desc_req+0x54>
		return usbdc_get_dev_desc(ep, req);
    b9ec:	79fb      	ldrb	r3, [r7, #7]
    b9ee:	6839      	ldr	r1, [r7, #0]
    b9f0:	4618      	mov	r0, r3
    b9f2:	4b0a      	ldr	r3, [pc, #40]	; (ba1c <usbdc_get_desc_req+0x5c>)
    b9f4:	4798      	blx	r3
    b9f6:	4603      	mov	r3, r0
    b9f8:	e00c      	b.n	ba14 <usbdc_get_desc_req+0x54>
		return usbdc_get_cfg_desc(ep, req);
    b9fa:	79fb      	ldrb	r3, [r7, #7]
    b9fc:	6839      	ldr	r1, [r7, #0]
    b9fe:	4618      	mov	r0, r3
    ba00:	4b07      	ldr	r3, [pc, #28]	; (ba20 <usbdc_get_desc_req+0x60>)
    ba02:	4798      	blx	r3
    ba04:	4603      	mov	r3, r0
    ba06:	e005      	b.n	ba14 <usbdc_get_desc_req+0x54>
		return usbdc_get_str_desc(ep, req);
    ba08:	79fb      	ldrb	r3, [r7, #7]
    ba0a:	6839      	ldr	r1, [r7, #0]
    ba0c:	4618      	mov	r0, r3
    ba0e:	4b05      	ldr	r3, [pc, #20]	; (ba24 <usbdc_get_desc_req+0x64>)
    ba10:	4798      	blx	r3
    ba12:	4603      	mov	r3, r0
}
    ba14:	4618      	mov	r0, r3
    ba16:	3710      	adds	r7, #16
    ba18:	46bd      	mov	sp, r7
    ba1a:	bd80      	pop	{r7, pc}
    ba1c:	0000b801 	.word	0x0000b801
    ba20:	0000b879 	.word	0x0000b879
    ba24:	0000b929 	.word	0x0000b929

0000ba28 <usbdc_get_status_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_status_req(const uint8_t ep, const struct usb_req *req)
{
    ba28:	b590      	push	{r4, r7, lr}
    ba2a:	b085      	sub	sp, #20
    ba2c:	af00      	add	r7, sp, #0
    ba2e:	4603      	mov	r3, r0
    ba30:	6039      	str	r1, [r7, #0]
    ba32:	71fb      	strb	r3, [r7, #7]
	int32_t st;
	(void)ep;

	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    ba34:	683b      	ldr	r3, [r7, #0]
    ba36:	781b      	ldrb	r3, [r3, #0]
    ba38:	f003 031f 	and.w	r3, r3, #31
    ba3c:	2b00      	cmp	r3, #0
    ba3e:	db1b      	blt.n	ba78 <usbdc_get_status_req+0x50>
    ba40:	2b01      	cmp	r3, #1
    ba42:	dd02      	ble.n	ba4a <usbdc_get_status_req+0x22>
    ba44:	2b02      	cmp	r3, #2
    ba46:	d003      	beq.n	ba50 <usbdc_get_status_req+0x28>
    ba48:	e016      	b.n	ba78 <usbdc_get_status_req+0x50>
	case USB_REQT_RECIP_DEVICE:
	case USB_REQT_RECIP_INTERFACE:
		st = 0;
    ba4a:	2300      	movs	r3, #0
    ba4c:	60fb      	str	r3, [r7, #12]
		break;
    ba4e:	e015      	b.n	ba7c <usbdc_get_status_req+0x54>
	case USB_REQT_RECIP_ENDPOINT:
		st = usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_GET);
    ba50:	683b      	ldr	r3, [r7, #0]
    ba52:	889b      	ldrh	r3, [r3, #4]
    ba54:	b29b      	uxth	r3, r3
    ba56:	b2db      	uxtb	r3, r3
    ba58:	2102      	movs	r1, #2
    ba5a:	4618      	mov	r0, r3
    ba5c:	4b0f      	ldr	r3, [pc, #60]	; (ba9c <usbdc_get_status_req+0x74>)
    ba5e:	4798      	blx	r3
    ba60:	4603      	mov	r3, r0
    ba62:	60fb      	str	r3, [r7, #12]
		if (st < 0) {
    ba64:	68fb      	ldr	r3, [r7, #12]
    ba66:	2b00      	cmp	r3, #0
    ba68:	da01      	bge.n	ba6e <usbdc_get_status_req+0x46>
			return false;
    ba6a:	2300      	movs	r3, #0
    ba6c:	e012      	b.n	ba94 <usbdc_get_status_req+0x6c>
		}
		st = st & 0x1;
    ba6e:	68fb      	ldr	r3, [r7, #12]
    ba70:	f003 0301 	and.w	r3, r3, #1
    ba74:	60fb      	str	r3, [r7, #12]
		break;
    ba76:	e001      	b.n	ba7c <usbdc_get_status_req+0x54>
	default:
		return false;
    ba78:	2300      	movs	r3, #0
    ba7a:	e00b      	b.n	ba94 <usbdc_get_status_req+0x6c>
	}
	memcpy(usbdc.ctrl_buf, &st, 2);
    ba7c:	4b08      	ldr	r3, [pc, #32]	; (baa0 <usbdc_get_status_req+0x78>)
    ba7e:	695b      	ldr	r3, [r3, #20]
    ba80:	89ba      	ldrh	r2, [r7, #12]
    ba82:	801a      	strh	r2, [r3, #0]
	usbdc_xfer(ep, usbdc.ctrl_buf, 2, false);
    ba84:	4b06      	ldr	r3, [pc, #24]	; (baa0 <usbdc_get_status_req+0x78>)
    ba86:	6959      	ldr	r1, [r3, #20]
    ba88:	79f8      	ldrb	r0, [r7, #7]
    ba8a:	2300      	movs	r3, #0
    ba8c:	2202      	movs	r2, #2
    ba8e:	4c05      	ldr	r4, [pc, #20]	; (baa4 <usbdc_get_status_req+0x7c>)
    ba90:	47a0      	blx	r4
	return true;
    ba92:	2301      	movs	r3, #1
}
    ba94:	4618      	mov	r0, r3
    ba96:	3714      	adds	r7, #20
    ba98:	46bd      	mov	sp, r7
    ba9a:	bd90      	pop	{r4, r7, pc}
    ba9c:	000033b1 	.word	0x000033b1
    baa0:	20000bfc 	.word	0x20000bfc
    baa4:	0000c2e5 	.word	0x0000c2e5

0000baa8 <usbdc_get_interface>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_interface(struct usb_req *req)
{
    baa8:	b590      	push	{r4, r7, lr}
    baaa:	b085      	sub	sp, #20
    baac:	af00      	add	r7, sp, #0
    baae:	6078      	str	r0, [r7, #4]
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    bab0:	4b1f      	ldr	r3, [pc, #124]	; (bb30 <usbdc_get_interface+0x88>)
    bab2:	691b      	ldr	r3, [r3, #16]
    bab4:	60fb      	str	r3, [r7, #12]
	int32_t              rc;

	if (!(usbdc.ifc_alt_map & (1 << req->wIndex))) {
    bab6:	4b1e      	ldr	r3, [pc, #120]	; (bb30 <usbdc_get_interface+0x88>)
    bab8:	7f5b      	ldrb	r3, [r3, #29]
    baba:	461a      	mov	r2, r3
    babc:	687b      	ldr	r3, [r7, #4]
    babe:	889b      	ldrh	r3, [r3, #4]
    bac0:	b29b      	uxth	r3, r3
    bac2:	fa42 f303 	asr.w	r3, r2, r3
    bac6:	f003 0301 	and.w	r3, r3, #1
    baca:	2b00      	cmp	r3, #0
    bacc:	d128      	bne.n	bb20 <usbdc_get_interface+0x78>
		/* Return 0 if alternate is not used */
		usbdc.ctrl_buf[0] = 0;
    bace:	4b18      	ldr	r3, [pc, #96]	; (bb30 <usbdc_get_interface+0x88>)
    bad0:	695b      	ldr	r3, [r3, #20]
    bad2:	2200      	movs	r2, #0
    bad4:	701a      	strb	r2, [r3, #0]
		usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    bad6:	4b16      	ldr	r3, [pc, #88]	; (bb30 <usbdc_get_interface+0x88>)
    bad8:	6959      	ldr	r1, [r3, #20]
    bada:	2300      	movs	r3, #0
    badc:	2201      	movs	r2, #1
    bade:	2000      	movs	r0, #0
    bae0:	4c14      	ldr	r4, [pc, #80]	; (bb34 <usbdc_get_interface+0x8c>)
    bae2:	47a0      	blx	r4
		return true;
    bae4:	2301      	movs	r3, #1
    bae6:	e01f      	b.n	bb28 <usbdc_get_interface+0x80>
	}
	/* Check function drivers only if alternate is used */
	while (NULL != func) {
		if (0 > (rc = func->ctrl(func, USBDF_GET_IFACE, req))) {
    bae8:	68fb      	ldr	r3, [r7, #12]
    baea:	685b      	ldr	r3, [r3, #4]
    baec:	687a      	ldr	r2, [r7, #4]
    baee:	2102      	movs	r1, #2
    baf0:	68f8      	ldr	r0, [r7, #12]
    baf2:	4798      	blx	r3
    baf4:	60b8      	str	r0, [r7, #8]
    baf6:	68bb      	ldr	r3, [r7, #8]
    baf8:	2b00      	cmp	r3, #0
    bafa:	da03      	bge.n	bb04 <usbdc_get_interface+0x5c>
			func = func->next;
    bafc:	68fb      	ldr	r3, [r7, #12]
    bafe:	681b      	ldr	r3, [r3, #0]
    bb00:	60fb      	str	r3, [r7, #12]
    bb02:	e00d      	b.n	bb20 <usbdc_get_interface+0x78>
		} else {
			usbdc.ctrl_buf[0] = (uint8_t)rc;
    bb04:	4b0a      	ldr	r3, [pc, #40]	; (bb30 <usbdc_get_interface+0x88>)
    bb06:	695b      	ldr	r3, [r3, #20]
    bb08:	68ba      	ldr	r2, [r7, #8]
    bb0a:	b2d2      	uxtb	r2, r2
    bb0c:	701a      	strb	r2, [r3, #0]
			usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    bb0e:	4b08      	ldr	r3, [pc, #32]	; (bb30 <usbdc_get_interface+0x88>)
    bb10:	6959      	ldr	r1, [r3, #20]
    bb12:	2300      	movs	r3, #0
    bb14:	2201      	movs	r2, #1
    bb16:	2000      	movs	r0, #0
    bb18:	4c06      	ldr	r4, [pc, #24]	; (bb34 <usbdc_get_interface+0x8c>)
    bb1a:	47a0      	blx	r4
			return true;
    bb1c:	2301      	movs	r3, #1
    bb1e:	e003      	b.n	bb28 <usbdc_get_interface+0x80>
	while (NULL != func) {
    bb20:	68fb      	ldr	r3, [r7, #12]
    bb22:	2b00      	cmp	r3, #0
    bb24:	d1e0      	bne.n	bae8 <usbdc_get_interface+0x40>
		}
	}
	return false;
    bb26:	2300      	movs	r3, #0
}
    bb28:	4618      	mov	r0, r3
    bb2a:	3714      	adds	r7, #20
    bb2c:	46bd      	mov	sp, r7
    bb2e:	bd90      	pop	{r4, r7, pc}
    bb30:	20000bfc 	.word	0x20000bfc
    bb34:	0000c2e5 	.word	0x0000c2e5

0000bb38 <usbdc_get_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_req(const uint8_t ep, struct usb_req *req)
{
    bb38:	b590      	push	{r4, r7, lr}
    bb3a:	b083      	sub	sp, #12
    bb3c:	af00      	add	r7, sp, #0
    bb3e:	4603      	mov	r3, r0
    bb40:	6039      	str	r1, [r7, #0]
    bb42:	71fb      	strb	r3, [r7, #7]
	switch (req->bRequest) {
    bb44:	683b      	ldr	r3, [r7, #0]
    bb46:	785b      	ldrb	r3, [r3, #1]
    bb48:	2b0a      	cmp	r3, #10
    bb4a:	d83a      	bhi.n	bbc2 <usbdc_get_req+0x8a>
    bb4c:	a201      	add	r2, pc, #4	; (adr r2, bb54 <usbdc_get_req+0x1c>)
    bb4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    bb52:	bf00      	nop
    bb54:	0000bbab 	.word	0x0000bbab
    bb58:	0000bbc3 	.word	0x0000bbc3
    bb5c:	0000bbc3 	.word	0x0000bbc3
    bb60:	0000bbc3 	.word	0x0000bbc3
    bb64:	0000bbc3 	.word	0x0000bbc3
    bb68:	0000bbc3 	.word	0x0000bbc3
    bb6c:	0000bb81 	.word	0x0000bb81
    bb70:	0000bbc3 	.word	0x0000bbc3
    bb74:	0000bb8f 	.word	0x0000bb8f
    bb78:	0000bbc3 	.word	0x0000bbc3
    bb7c:	0000bbb9 	.word	0x0000bbb9
	case USB_REQ_GET_DESC:
		return usbdc_get_desc_req(ep, req);
    bb80:	79fb      	ldrb	r3, [r7, #7]
    bb82:	6839      	ldr	r1, [r7, #0]
    bb84:	4618      	mov	r0, r3
    bb86:	4b11      	ldr	r3, [pc, #68]	; (bbcc <usbdc_get_req+0x94>)
    bb88:	4798      	blx	r3
    bb8a:	4603      	mov	r3, r0
    bb8c:	e01a      	b.n	bbc4 <usbdc_get_req+0x8c>
	case USB_REQ_GET_CONFIG:
		*(uint8_t *)usbdc.ctrl_buf = usbdc.cfg_value;
    bb8e:	4b10      	ldr	r3, [pc, #64]	; (bbd0 <usbdc_get_req+0x98>)
    bb90:	695b      	ldr	r3, [r3, #20]
    bb92:	4a0f      	ldr	r2, [pc, #60]	; (bbd0 <usbdc_get_req+0x98>)
    bb94:	7ed2      	ldrb	r2, [r2, #27]
    bb96:	701a      	strb	r2, [r3, #0]
		usbdc_xfer(ep, usbdc.ctrl_buf, 1, false);
    bb98:	4b0d      	ldr	r3, [pc, #52]	; (bbd0 <usbdc_get_req+0x98>)
    bb9a:	6959      	ldr	r1, [r3, #20]
    bb9c:	79f8      	ldrb	r0, [r7, #7]
    bb9e:	2300      	movs	r3, #0
    bba0:	2201      	movs	r2, #1
    bba2:	4c0c      	ldr	r4, [pc, #48]	; (bbd4 <usbdc_get_req+0x9c>)
    bba4:	47a0      	blx	r4
		return true;
    bba6:	2301      	movs	r3, #1
    bba8:	e00c      	b.n	bbc4 <usbdc_get_req+0x8c>
	case USB_REQ_GET_STATUS:
		return usbdc_get_status_req(ep, req);
    bbaa:	79fb      	ldrb	r3, [r7, #7]
    bbac:	6839      	ldr	r1, [r7, #0]
    bbae:	4618      	mov	r0, r3
    bbb0:	4b09      	ldr	r3, [pc, #36]	; (bbd8 <usbdc_get_req+0xa0>)
    bbb2:	4798      	blx	r3
    bbb4:	4603      	mov	r3, r0
    bbb6:	e005      	b.n	bbc4 <usbdc_get_req+0x8c>
	case USB_REQ_GET_INTERFACE:
		return usbdc_get_interface(req);
    bbb8:	6838      	ldr	r0, [r7, #0]
    bbba:	4b08      	ldr	r3, [pc, #32]	; (bbdc <usbdc_get_req+0xa4>)
    bbbc:	4798      	blx	r3
    bbbe:	4603      	mov	r3, r0
    bbc0:	e000      	b.n	bbc4 <usbdc_get_req+0x8c>
	default:
		return false;
    bbc2:	2300      	movs	r3, #0
	}
}
    bbc4:	4618      	mov	r0, r3
    bbc6:	370c      	adds	r7, #12
    bbc8:	46bd      	mov	sp, r7
    bbca:	bd90      	pop	{r4, r7, pc}
    bbcc:	0000b9c1 	.word	0x0000b9c1
    bbd0:	20000bfc 	.word	0x20000bfc
    bbd4:	0000c2e5 	.word	0x0000c2e5
    bbd8:	0000ba29 	.word	0x0000ba29
    bbdc:	0000baa9 	.word	0x0000baa9

0000bbe0 <usbdc_clear_ftr_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_clear_ftr_req(const uint8_t ep, const struct usb_req *req)
{
    bbe0:	b590      	push	{r4, r7, lr}
    bbe2:	b083      	sub	sp, #12
    bbe4:	af00      	add	r7, sp, #0
    bbe6:	4603      	mov	r3, r0
    bbe8:	6039      	str	r1, [r7, #0]
    bbea:	71fb      	strb	r3, [r7, #7]
	(void)ep;
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    bbec:	683b      	ldr	r3, [r7, #0]
    bbee:	781b      	ldrb	r3, [r3, #0]
    bbf0:	f003 031f 	and.w	r3, r3, #31
    bbf4:	2b02      	cmp	r3, #2
    bbf6:	d116      	bne.n	bc26 <usbdc_clear_ftr_req+0x46>
	case USB_REQT_RECIP_ENDPOINT:
		if (req->wLength != 0) {
    bbf8:	683b      	ldr	r3, [r7, #0]
    bbfa:	88db      	ldrh	r3, [r3, #6]
    bbfc:	b29b      	uxth	r3, r3
    bbfe:	2b00      	cmp	r3, #0
    bc00:	d001      	beq.n	bc06 <usbdc_clear_ftr_req+0x26>
			return false;
    bc02:	2300      	movs	r3, #0
    bc04:	e010      	b.n	bc28 <usbdc_clear_ftr_req+0x48>
		}
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_CLR);
    bc06:	683b      	ldr	r3, [r7, #0]
    bc08:	889b      	ldrh	r3, [r3, #4]
    bc0a:	b29b      	uxth	r3, r3
    bc0c:	b2db      	uxtb	r3, r3
    bc0e:	2100      	movs	r1, #0
    bc10:	4618      	mov	r0, r3
    bc12:	4b07      	ldr	r3, [pc, #28]	; (bc30 <usbdc_clear_ftr_req+0x50>)
    bc14:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
    bc16:	79f8      	ldrb	r0, [r7, #7]
    bc18:	2301      	movs	r3, #1
    bc1a:	2200      	movs	r2, #0
    bc1c:	2100      	movs	r1, #0
    bc1e:	4c05      	ldr	r4, [pc, #20]	; (bc34 <usbdc_clear_ftr_req+0x54>)
    bc20:	47a0      	blx	r4
		return true;
    bc22:	2301      	movs	r3, #1
    bc24:	e000      	b.n	bc28 <usbdc_clear_ftr_req+0x48>
	default:
		return false;
    bc26:	2300      	movs	r3, #0
	}
}
    bc28:	4618      	mov	r0, r3
    bc2a:	370c      	adds	r7, #12
    bc2c:	46bd      	mov	sp, r7
    bc2e:	bd90      	pop	{r4, r7, pc}
    bc30:	000033b1 	.word	0x000033b1
    bc34:	0000c2e5 	.word	0x0000c2e5

0000bc38 <usbdc_set_ftr_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_set_ftr_req(const uint8_t ep, const struct usb_req *req)
{
    bc38:	b590      	push	{r4, r7, lr}
    bc3a:	b083      	sub	sp, #12
    bc3c:	af00      	add	r7, sp, #0
    bc3e:	4603      	mov	r3, r0
    bc40:	6039      	str	r1, [r7, #0]
    bc42:	71fb      	strb	r3, [r7, #7]
	(void)ep;
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    bc44:	683b      	ldr	r3, [r7, #0]
    bc46:	781b      	ldrb	r3, [r3, #0]
    bc48:	f003 031f 	and.w	r3, r3, #31
    bc4c:	2b02      	cmp	r3, #2
    bc4e:	d116      	bne.n	bc7e <usbdc_set_ftr_req+0x46>
	case USB_REQT_RECIP_ENDPOINT:
		if (req->wLength != 0) {
    bc50:	683b      	ldr	r3, [r7, #0]
    bc52:	88db      	ldrh	r3, [r3, #6]
    bc54:	b29b      	uxth	r3, r3
    bc56:	2b00      	cmp	r3, #0
    bc58:	d001      	beq.n	bc5e <usbdc_set_ftr_req+0x26>
			return false;
    bc5a:	2300      	movs	r3, #0
    bc5c:	e010      	b.n	bc80 <usbdc_set_ftr_req+0x48>
		}
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_SET);
    bc5e:	683b      	ldr	r3, [r7, #0]
    bc60:	889b      	ldrh	r3, [r3, #4]
    bc62:	b29b      	uxth	r3, r3
    bc64:	b2db      	uxtb	r3, r3
    bc66:	2101      	movs	r1, #1
    bc68:	4618      	mov	r0, r3
    bc6a:	4b07      	ldr	r3, [pc, #28]	; (bc88 <usbdc_set_ftr_req+0x50>)
    bc6c:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
    bc6e:	79f8      	ldrb	r0, [r7, #7]
    bc70:	2301      	movs	r3, #1
    bc72:	2200      	movs	r2, #0
    bc74:	2100      	movs	r1, #0
    bc76:	4c05      	ldr	r4, [pc, #20]	; (bc8c <usbdc_set_ftr_req+0x54>)
    bc78:	47a0      	blx	r4
		return true;
    bc7a:	2301      	movs	r3, #1
    bc7c:	e000      	b.n	bc80 <usbdc_set_ftr_req+0x48>
	default:
		return false;
    bc7e:	2300      	movs	r3, #0
	}
}
    bc80:	4618      	mov	r0, r3
    bc82:	370c      	adds	r7, #12
    bc84:	46bd      	mov	sp, r7
    bc86:	bd90      	pop	{r4, r7, pc}
    bc88:	000033b1 	.word	0x000033b1
    bc8c:	0000c2e5 	.word	0x0000c2e5

0000bc90 <usbdc_unconfig>:

/**
 * \brief Unconfig, close all interfaces
 */
static void usbdc_unconfig(void)
{
    bc90:	b580      	push	{r7, lr}
    bc92:	b082      	sub	sp, #8
    bc94:	af00      	add	r7, sp, #0
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    bc96:	4b0a      	ldr	r3, [pc, #40]	; (bcc0 <usbdc_unconfig+0x30>)
    bc98:	691b      	ldr	r3, [r3, #16]
    bc9a:	607b      	str	r3, [r7, #4]
	while (NULL != func) {
    bc9c:	e008      	b.n	bcb0 <usbdc_unconfig+0x20>
		func->ctrl(func, USBDF_DISABLE, NULL);
    bc9e:	687b      	ldr	r3, [r7, #4]
    bca0:	685b      	ldr	r3, [r3, #4]
    bca2:	2200      	movs	r2, #0
    bca4:	2101      	movs	r1, #1
    bca6:	6878      	ldr	r0, [r7, #4]
    bca8:	4798      	blx	r3
		func = func->next;
    bcaa:	687b      	ldr	r3, [r7, #4]
    bcac:	681b      	ldr	r3, [r3, #0]
    bcae:	607b      	str	r3, [r7, #4]
	while (NULL != func) {
    bcb0:	687b      	ldr	r3, [r7, #4]
    bcb2:	2b00      	cmp	r3, #0
    bcb4:	d1f3      	bne.n	bc9e <usbdc_unconfig+0xe>
	}
}
    bcb6:	bf00      	nop
    bcb8:	3708      	adds	r7, #8
    bcba:	46bd      	mov	sp, r7
    bcbc:	bd80      	pop	{r7, pc}
    bcbe:	bf00      	nop
    bcc0:	20000bfc 	.word	0x20000bfc

0000bcc4 <usbdc_set_config>:
 * \param[in] cfg_value Configuration Value
 * \retval true Set configuration OK.
 * \retval false Request error.
 */
static bool usbdc_set_config(uint8_t cfg_value)
{
    bcc4:	b580      	push	{r7, lr}
    bcc6:	b088      	sub	sp, #32
    bcc8:	af00      	add	r7, sp, #0
    bcca:	4603      	mov	r3, r0
    bccc:	71fb      	strb	r3, [r7, #7]
	struct usbd_descriptors desc;
	struct usbdf_driver *   func;
	uint8_t *               cfg_desc = NULL;
    bcce:	2300      	movs	r3, #0
    bcd0:	61bb      	str	r3, [r7, #24]
	uint16_t                total_len;
	uint8_t                 last_iface = 0xFF;
    bcd2:	23ff      	movs	r3, #255	; 0xff
    bcd4:	75fb      	strb	r3, [r7, #23]

	if (cfg_value == 0) {
    bcd6:	79fb      	ldrb	r3, [r7, #7]
    bcd8:	2b00      	cmp	r3, #0
    bcda:	d103      	bne.n	bce4 <usbdc_set_config+0x20>
		usbdc_unconfig();
    bcdc:	4b2e      	ldr	r3, [pc, #184]	; (bd98 <usbdc_set_config+0xd4>)
    bcde:	4798      	blx	r3
		return true;
    bce0:	2301      	movs	r3, #1
    bce2:	e055      	b.n	bd90 <usbdc_set_config+0xcc>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, cfg_value);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!cfg_desc) {
    bce4:	69bb      	ldr	r3, [r7, #24]
    bce6:	2b00      	cmp	r3, #0
    bce8:	d10a      	bne.n	bd00 <usbdc_set_config+0x3c>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, cfg_value);
    bcea:	4b2c      	ldr	r3, [pc, #176]	; (bd9c <usbdc_set_config+0xd8>)
    bcec:	681b      	ldr	r3, [r3, #0]
    bcee:	6818      	ldr	r0, [r3, #0]
    bcf0:	4b2a      	ldr	r3, [pc, #168]	; (bd9c <usbdc_set_config+0xd8>)
    bcf2:	681b      	ldr	r3, [r3, #0]
    bcf4:	685b      	ldr	r3, [r3, #4]
    bcf6:	79fa      	ldrb	r2, [r7, #7]
    bcf8:	4619      	mov	r1, r3
    bcfa:	4b29      	ldr	r3, [pc, #164]	; (bda0 <usbdc_set_config+0xdc>)
    bcfc:	4798      	blx	r3
    bcfe:	61b8      	str	r0, [r7, #24]
	}
	if (NULL == cfg_desc) {
    bd00:	69bb      	ldr	r3, [r7, #24]
    bd02:	2b00      	cmp	r3, #0
    bd04:	d101      	bne.n	bd0a <usbdc_set_config+0x46>
		return false;
    bd06:	2300      	movs	r3, #0
    bd08:	e042      	b.n	bd90 <usbdc_set_config+0xcc>
	}

	total_len = usb_cfg_desc_total_len(cfg_desc);
    bd0a:	69b8      	ldr	r0, [r7, #24]
    bd0c:	4b25      	ldr	r3, [pc, #148]	; (bda4 <usbdc_set_config+0xe0>)
    bd0e:	4798      	blx	r3
    bd10:	4603      	mov	r3, r0
    bd12:	82bb      	strh	r3, [r7, #20]
	desc.eod  = cfg_desc + total_len;
    bd14:	8abb      	ldrh	r3, [r7, #20]
    bd16:	69ba      	ldr	r2, [r7, #24]
    bd18:	4413      	add	r3, r2
    bd1a:	613b      	str	r3, [r7, #16]
	desc.sod  = usb_find_desc(cfg_desc, desc.eod, USB_DT_INTERFACE);
    bd1c:	693b      	ldr	r3, [r7, #16]
    bd1e:	2204      	movs	r2, #4
    bd20:	4619      	mov	r1, r3
    bd22:	69b8      	ldr	r0, [r7, #24]
    bd24:	4b20      	ldr	r3, [pc, #128]	; (bda8 <usbdc_set_config+0xe4>)
    bd26:	4798      	blx	r3
    bd28:	4603      	mov	r3, r0
    bd2a:	60fb      	str	r3, [r7, #12]

	while (NULL != desc.sod) {
    bd2c:	e02c      	b.n	bd88 <usbdc_set_config+0xc4>
		/* Apply very first alternate setting (must be 0) of the interface */
		if (last_iface != desc.sod[2] /* bInterfaceNumber */) {
    bd2e:	68fb      	ldr	r3, [r7, #12]
    bd30:	3302      	adds	r3, #2
    bd32:	781b      	ldrb	r3, [r3, #0]
    bd34:	7dfa      	ldrb	r2, [r7, #23]
    bd36:	429a      	cmp	r2, r3
    bd38:	d018      	beq.n	bd6c <usbdc_set_config+0xa8>
			last_iface = desc.sod[2];
    bd3a:	68fb      	ldr	r3, [r7, #12]
    bd3c:	789b      	ldrb	r3, [r3, #2]
    bd3e:	75fb      	strb	r3, [r7, #23]
			func       = (struct usbdf_driver *)usbdc.func_list.head;
    bd40:	4b16      	ldr	r3, [pc, #88]	; (bd9c <usbdc_set_config+0xd8>)
    bd42:	691b      	ldr	r3, [r3, #16]
    bd44:	61fb      	str	r3, [r7, #28]
			while (NULL != func) {
    bd46:	e00c      	b.n	bd62 <usbdc_set_config+0x9e>
				if (func->ctrl(func, USBDF_ENABLE, &desc)) {
    bd48:	69fb      	ldr	r3, [r7, #28]
    bd4a:	685b      	ldr	r3, [r3, #4]
    bd4c:	f107 020c 	add.w	r2, r7, #12
    bd50:	2100      	movs	r1, #0
    bd52:	69f8      	ldr	r0, [r7, #28]
    bd54:	4798      	blx	r3
    bd56:	4603      	mov	r3, r0
    bd58:	2b00      	cmp	r3, #0
    bd5a:	d006      	beq.n	bd6a <usbdc_set_config+0xa6>
					func = func->next;
    bd5c:	69fb      	ldr	r3, [r7, #28]
    bd5e:	681b      	ldr	r3, [r3, #0]
    bd60:	61fb      	str	r3, [r7, #28]
			while (NULL != func) {
    bd62:	69fb      	ldr	r3, [r7, #28]
    bd64:	2b00      	cmp	r3, #0
    bd66:	d1ef      	bne.n	bd48 <usbdc_set_config+0x84>
    bd68:	e000      	b.n	bd6c <usbdc_set_config+0xa8>
				} else {
					break;
    bd6a:	bf00      	nop
				}
			}
		}
		desc.sod = usb_desc_next(desc.sod);
    bd6c:	68fb      	ldr	r3, [r7, #12]
    bd6e:	4618      	mov	r0, r3
    bd70:	4b0e      	ldr	r3, [pc, #56]	; (bdac <usbdc_set_config+0xe8>)
    bd72:	4798      	blx	r3
    bd74:	4603      	mov	r3, r0
    bd76:	60fb      	str	r3, [r7, #12]
		desc.sod = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    bd78:	68fb      	ldr	r3, [r7, #12]
    bd7a:	6939      	ldr	r1, [r7, #16]
    bd7c:	2204      	movs	r2, #4
    bd7e:	4618      	mov	r0, r3
    bd80:	4b09      	ldr	r3, [pc, #36]	; (bda8 <usbdc_set_config+0xe4>)
    bd82:	4798      	blx	r3
    bd84:	4603      	mov	r3, r0
    bd86:	60fb      	str	r3, [r7, #12]
	while (NULL != desc.sod) {
    bd88:	68fb      	ldr	r3, [r7, #12]
    bd8a:	2b00      	cmp	r3, #0
    bd8c:	d1cf      	bne.n	bd2e <usbdc_set_config+0x6a>
	}
	return true;
    bd8e:	2301      	movs	r3, #1
}
    bd90:	4618      	mov	r0, r3
    bd92:	3720      	adds	r7, #32
    bd94:	46bd      	mov	sp, r7
    bd96:	bd80      	pop	{r7, pc}
    bd98:	0000bc91 	.word	0x0000bc91
    bd9c:	20000bfc 	.word	0x20000bfc
    bda0:	0000c635 	.word	0x0000c635
    bda4:	0000b7e1 	.word	0x0000b7e1
    bda8:	0000c575 	.word	0x0000c575
    bdac:	0000b7bd 	.word	0x0000b7bd

0000bdb0 <usbdc_set_address>:
/**
 * \brief Apply the USB device address
 * \param[in] addr address to be set.
 */
static void usbdc_set_address(uint8_t addr)
{
    bdb0:	b580      	push	{r7, lr}
    bdb2:	b082      	sub	sp, #8
    bdb4:	af00      	add	r7, sp, #0
    bdb6:	4603      	mov	r3, r0
    bdb8:	71fb      	strb	r3, [r7, #7]
	usb_d_set_address(addr);
    bdba:	79fb      	ldrb	r3, [r7, #7]
    bdbc:	4618      	mov	r0, r3
    bdbe:	4b03      	ldr	r3, [pc, #12]	; (bdcc <usbdc_set_address+0x1c>)
    bdc0:	4798      	blx	r3
}
    bdc2:	bf00      	nop
    bdc4:	3708      	adds	r7, #8
    bdc6:	46bd      	mov	sp, r7
    bdc8:	bd80      	pop	{r7, pc}
    bdca:	bf00      	nop
    bdcc:	00003021 	.word	0x00003021

0000bdd0 <usbdc_set_interface>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_set_interface(uint16_t alt_set, uint16_t ifc_id)
{
    bdd0:	b590      	push	{r4, r7, lr}
    bdd2:	b087      	sub	sp, #28
    bdd4:	af00      	add	r7, sp, #0
    bdd6:	4603      	mov	r3, r0
    bdd8:	460a      	mov	r2, r1
    bdda:	80fb      	strh	r3, [r7, #6]
    bddc:	4613      	mov	r3, r2
    bdde:	80bb      	strh	r3, [r7, #4]
	struct usbd_descriptors desc;
	struct usbdf_driver *   func;
	uint8_t *               ifc = NULL;
    bde0:	2300      	movs	r3, #0
    bde2:	613b      	str	r3, [r7, #16]
		ifc = usb_find_cfg_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, usbdc.cfg_value);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!ifc) {
    bde4:	693b      	ldr	r3, [r7, #16]
    bde6:	2b00      	cmp	r3, #0
    bde8:	d10b      	bne.n	be02 <usbdc_set_interface+0x32>
		ifc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, usbdc.cfg_value);
    bdea:	4b43      	ldr	r3, [pc, #268]	; (bef8 <usbdc_set_interface+0x128>)
    bdec:	681b      	ldr	r3, [r3, #0]
    bdee:	6818      	ldr	r0, [r3, #0]
    bdf0:	4b41      	ldr	r3, [pc, #260]	; (bef8 <usbdc_set_interface+0x128>)
    bdf2:	681b      	ldr	r3, [r3, #0]
    bdf4:	6859      	ldr	r1, [r3, #4]
    bdf6:	4b40      	ldr	r3, [pc, #256]	; (bef8 <usbdc_set_interface+0x128>)
    bdf8:	7edb      	ldrb	r3, [r3, #27]
    bdfa:	461a      	mov	r2, r3
    bdfc:	4b3f      	ldr	r3, [pc, #252]	; (befc <usbdc_set_interface+0x12c>)
    bdfe:	4798      	blx	r3
    be00:	6138      	str	r0, [r7, #16]
	}
	if (NULL == ifc) {
    be02:	693b      	ldr	r3, [r7, #16]
    be04:	2b00      	cmp	r3, #0
    be06:	d101      	bne.n	be0c <usbdc_set_interface+0x3c>
		return false;
    be08:	2300      	movs	r3, #0
    be0a:	e071      	b.n	bef0 <usbdc_set_interface+0x120>
	}
	desc.sod = ifc;
    be0c:	693b      	ldr	r3, [r7, #16]
    be0e:	60bb      	str	r3, [r7, #8]
	desc.eod = ifc + usb_cfg_desc_total_len(ifc);
    be10:	6938      	ldr	r0, [r7, #16]
    be12:	4b3b      	ldr	r3, [pc, #236]	; (bf00 <usbdc_set_interface+0x130>)
    be14:	4798      	blx	r3
    be16:	4603      	mov	r3, r0
    be18:	461a      	mov	r2, r3
    be1a:	693b      	ldr	r3, [r7, #16]
    be1c:	4413      	add	r3, r2
    be1e:	60fb      	str	r3, [r7, #12]

	if (NULL == (ifc = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE))) {
    be20:	68bb      	ldr	r3, [r7, #8]
    be22:	68f9      	ldr	r1, [r7, #12]
    be24:	2204      	movs	r2, #4
    be26:	4618      	mov	r0, r3
    be28:	4b36      	ldr	r3, [pc, #216]	; (bf04 <usbdc_set_interface+0x134>)
    be2a:	4798      	blx	r3
    be2c:	6138      	str	r0, [r7, #16]
    be2e:	693b      	ldr	r3, [r7, #16]
    be30:	2b00      	cmp	r3, #0
    be32:	d113      	bne.n	be5c <usbdc_set_interface+0x8c>
		return false;
    be34:	2300      	movs	r3, #0
    be36:	e05b      	b.n	bef0 <usbdc_set_interface+0x120>
	}

	while (ifc[2] != ifc_id || ifc[3] != alt_set) {
		desc.sod = usb_desc_next(desc.sod);
    be38:	68bb      	ldr	r3, [r7, #8]
    be3a:	4618      	mov	r0, r3
    be3c:	4b32      	ldr	r3, [pc, #200]	; (bf08 <usbdc_set_interface+0x138>)
    be3e:	4798      	blx	r3
    be40:	4603      	mov	r3, r0
    be42:	60bb      	str	r3, [r7, #8]
		ifc      = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    be44:	68bb      	ldr	r3, [r7, #8]
    be46:	68f9      	ldr	r1, [r7, #12]
    be48:	2204      	movs	r2, #4
    be4a:	4618      	mov	r0, r3
    be4c:	4b2d      	ldr	r3, [pc, #180]	; (bf04 <usbdc_set_interface+0x134>)
    be4e:	4798      	blx	r3
    be50:	6138      	str	r0, [r7, #16]
		if (NULL == ifc) {
    be52:	693b      	ldr	r3, [r7, #16]
    be54:	2b00      	cmp	r3, #0
    be56:	d101      	bne.n	be5c <usbdc_set_interface+0x8c>
			return false;
    be58:	2300      	movs	r3, #0
    be5a:	e049      	b.n	bef0 <usbdc_set_interface+0x120>
	while (ifc[2] != ifc_id || ifc[3] != alt_set) {
    be5c:	693b      	ldr	r3, [r7, #16]
    be5e:	3302      	adds	r3, #2
    be60:	781b      	ldrb	r3, [r3, #0]
    be62:	b29b      	uxth	r3, r3
    be64:	88ba      	ldrh	r2, [r7, #4]
    be66:	429a      	cmp	r2, r3
    be68:	d1e6      	bne.n	be38 <usbdc_set_interface+0x68>
    be6a:	693b      	ldr	r3, [r7, #16]
    be6c:	3303      	adds	r3, #3
    be6e:	781b      	ldrb	r3, [r3, #0]
    be70:	b29b      	uxth	r3, r3
    be72:	88fa      	ldrh	r2, [r7, #6]
    be74:	429a      	cmp	r2, r3
    be76:	d1df      	bne.n	be38 <usbdc_set_interface+0x68>
		}
	}

	desc.sod = ifc;
    be78:	693b      	ldr	r3, [r7, #16]
    be7a:	60bb      	str	r3, [r7, #8]
	func     = (struct usbdf_driver *)usbdc.func_list.head;
    be7c:	4b1e      	ldr	r3, [pc, #120]	; (bef8 <usbdc_set_interface+0x128>)
    be7e:	691b      	ldr	r3, [r3, #16]
    be80:	617b      	str	r3, [r7, #20]

	while (NULL != func) {
    be82:	e031      	b.n	bee8 <usbdc_set_interface+0x118>
		if (func->ctrl(func, USBDF_DISABLE, &desc)) {
    be84:	697b      	ldr	r3, [r7, #20]
    be86:	685b      	ldr	r3, [r3, #4]
    be88:	f107 0208 	add.w	r2, r7, #8
    be8c:	2101      	movs	r1, #1
    be8e:	6978      	ldr	r0, [r7, #20]
    be90:	4798      	blx	r3
    be92:	4603      	mov	r3, r0
    be94:	2b00      	cmp	r3, #0
    be96:	d003      	beq.n	bea0 <usbdc_set_interface+0xd0>
			func = func->next;
    be98:	697b      	ldr	r3, [r7, #20]
    be9a:	681b      	ldr	r3, [r3, #0]
    be9c:	617b      	str	r3, [r7, #20]
    be9e:	e023      	b.n	bee8 <usbdc_set_interface+0x118>
		} else if (ERR_NONE == func->ctrl(func, USBDF_ENABLE, &desc)) {
    bea0:	697b      	ldr	r3, [r7, #20]
    bea2:	685b      	ldr	r3, [r3, #4]
    bea4:	f107 0208 	add.w	r2, r7, #8
    bea8:	2100      	movs	r1, #0
    beaa:	6978      	ldr	r0, [r7, #20]
    beac:	4798      	blx	r3
    beae:	4603      	mov	r3, r0
    beb0:	2b00      	cmp	r3, #0
    beb2:	d117      	bne.n	bee4 <usbdc_set_interface+0x114>
			if (alt_set) {
    beb4:	88fb      	ldrh	r3, [r7, #6]
    beb6:	2b00      	cmp	r3, #0
    beb8:	d00c      	beq.n	bed4 <usbdc_set_interface+0x104>
				/* Alternate settings are used from now on */
				usbdc.ifc_alt_map |= 1 << ifc_id;
    beba:	4b0f      	ldr	r3, [pc, #60]	; (bef8 <usbdc_set_interface+0x128>)
    bebc:	7f5b      	ldrb	r3, [r3, #29]
    bebe:	b25a      	sxtb	r2, r3
    bec0:	88bb      	ldrh	r3, [r7, #4]
    bec2:	2101      	movs	r1, #1
    bec4:	fa01 f303 	lsl.w	r3, r1, r3
    bec8:	b25b      	sxtb	r3, r3
    beca:	4313      	orrs	r3, r2
    becc:	b25b      	sxtb	r3, r3
    bece:	b2da      	uxtb	r2, r3
    bed0:	4b09      	ldr	r3, [pc, #36]	; (bef8 <usbdc_set_interface+0x128>)
    bed2:	775a      	strb	r2, [r3, #29]
			}
			usbdc_xfer(0, NULL, 0, 0);
    bed4:	2300      	movs	r3, #0
    bed6:	2200      	movs	r2, #0
    bed8:	2100      	movs	r1, #0
    beda:	2000      	movs	r0, #0
    bedc:	4c0b      	ldr	r4, [pc, #44]	; (bf0c <usbdc_set_interface+0x13c>)
    bede:	47a0      	blx	r4
			return true;
    bee0:	2301      	movs	r3, #1
    bee2:	e005      	b.n	bef0 <usbdc_set_interface+0x120>
		} else {
			return false;
    bee4:	2300      	movs	r3, #0
    bee6:	e003      	b.n	bef0 <usbdc_set_interface+0x120>
	while (NULL != func) {
    bee8:	697b      	ldr	r3, [r7, #20]
    beea:	2b00      	cmp	r3, #0
    beec:	d1ca      	bne.n	be84 <usbdc_set_interface+0xb4>
		}
	}

	return false;
    beee:	2300      	movs	r3, #0
}
    bef0:	4618      	mov	r0, r3
    bef2:	371c      	adds	r7, #28
    bef4:	46bd      	mov	sp, r7
    bef6:	bd90      	pop	{r4, r7, pc}
    bef8:	20000bfc 	.word	0x20000bfc
    befc:	0000c635 	.word	0x0000c635
    bf00:	0000b7e1 	.word	0x0000b7e1
    bf04:	0000c575 	.word	0x0000c575
    bf08:	0000b7bd 	.word	0x0000b7bd
    bf0c:	0000c2e5 	.word	0x0000c2e5

0000bf10 <usbdc_set_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_set_req(const uint8_t ep, struct usb_req *req)
{
    bf10:	b590      	push	{r4, r7, lr}
    bf12:	b083      	sub	sp, #12
    bf14:	af00      	add	r7, sp, #0
    bf16:	4603      	mov	r3, r0
    bf18:	6039      	str	r1, [r7, #0]
    bf1a:	71fb      	strb	r3, [r7, #7]
	switch (req->bRequest) {
    bf1c:	683b      	ldr	r3, [r7, #0]
    bf1e:	785b      	ldrb	r3, [r3, #1]
    bf20:	3b01      	subs	r3, #1
    bf22:	2b0a      	cmp	r3, #10
    bf24:	d85b      	bhi.n	bfde <usbdc_set_req+0xce>
    bf26:	a201      	add	r2, pc, #4	; (adr r2, bf2c <usbdc_set_req+0x1c>)
    bf28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    bf2c:	0000bfab 	.word	0x0000bfab
    bf30:	0000bfdf 	.word	0x0000bfdf
    bf34:	0000bfb9 	.word	0x0000bfb9
    bf38:	0000bfdf 	.word	0x0000bfdf
    bf3c:	0000bf59 	.word	0x0000bf59
    bf40:	0000bfdf 	.word	0x0000bfdf
    bf44:	0000bfdf 	.word	0x0000bfdf
    bf48:	0000bfdf 	.word	0x0000bfdf
    bf4c:	0000bf73 	.word	0x0000bf73
    bf50:	0000bfdf 	.word	0x0000bfdf
    bf54:	0000bfc7 	.word	0x0000bfc7
	case USB_REQ_SET_ADDRESS:
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    bf58:	79f8      	ldrb	r0, [r7, #7]
    bf5a:	2301      	movs	r3, #1
    bf5c:	2200      	movs	r2, #0
    bf5e:	2100      	movs	r1, #0
    bf60:	4c21      	ldr	r4, [pc, #132]	; (bfe8 <usbdc_set_req+0xd8>)
    bf62:	47a0      	blx	r4
    bf64:	4603      	mov	r3, r0
    bf66:	2b00      	cmp	r3, #0
    bf68:	bf0c      	ite	eq
    bf6a:	2301      	moveq	r3, #1
    bf6c:	2300      	movne	r3, #0
    bf6e:	b2db      	uxtb	r3, r3
    bf70:	e036      	b.n	bfe0 <usbdc_set_req+0xd0>
	case USB_REQ_SET_CONFIG:
		if (!usbdc_set_config(req->wValue)) {
    bf72:	683b      	ldr	r3, [r7, #0]
    bf74:	885b      	ldrh	r3, [r3, #2]
    bf76:	b29b      	uxth	r3, r3
    bf78:	b2db      	uxtb	r3, r3
    bf7a:	4618      	mov	r0, r3
    bf7c:	4b1b      	ldr	r3, [pc, #108]	; (bfec <usbdc_set_req+0xdc>)
    bf7e:	4798      	blx	r3
    bf80:	4603      	mov	r3, r0
    bf82:	f083 0301 	eor.w	r3, r3, #1
    bf86:	b2db      	uxtb	r3, r3
    bf88:	2b00      	cmp	r3, #0
    bf8a:	d001      	beq.n	bf90 <usbdc_set_req+0x80>
			return false;
    bf8c:	2300      	movs	r3, #0
    bf8e:	e027      	b.n	bfe0 <usbdc_set_req+0xd0>
		}
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    bf90:	79f8      	ldrb	r0, [r7, #7]
    bf92:	2301      	movs	r3, #1
    bf94:	2200      	movs	r2, #0
    bf96:	2100      	movs	r1, #0
    bf98:	4c13      	ldr	r4, [pc, #76]	; (bfe8 <usbdc_set_req+0xd8>)
    bf9a:	47a0      	blx	r4
    bf9c:	4603      	mov	r3, r0
    bf9e:	2b00      	cmp	r3, #0
    bfa0:	bf0c      	ite	eq
    bfa2:	2301      	moveq	r3, #1
    bfa4:	2300      	movne	r3, #0
    bfa6:	b2db      	uxtb	r3, r3
    bfa8:	e01a      	b.n	bfe0 <usbdc_set_req+0xd0>
	case USB_REQ_CLEAR_FTR:
		return usbdc_clear_ftr_req(ep, req);
    bfaa:	79fb      	ldrb	r3, [r7, #7]
    bfac:	6839      	ldr	r1, [r7, #0]
    bfae:	4618      	mov	r0, r3
    bfb0:	4b0f      	ldr	r3, [pc, #60]	; (bff0 <usbdc_set_req+0xe0>)
    bfb2:	4798      	blx	r3
    bfb4:	4603      	mov	r3, r0
    bfb6:	e013      	b.n	bfe0 <usbdc_set_req+0xd0>
	case USB_REQ_SET_FTR:
		return usbdc_set_ftr_req(ep, req);
    bfb8:	79fb      	ldrb	r3, [r7, #7]
    bfba:	6839      	ldr	r1, [r7, #0]
    bfbc:	4618      	mov	r0, r3
    bfbe:	4b0d      	ldr	r3, [pc, #52]	; (bff4 <usbdc_set_req+0xe4>)
    bfc0:	4798      	blx	r3
    bfc2:	4603      	mov	r3, r0
    bfc4:	e00c      	b.n	bfe0 <usbdc_set_req+0xd0>
	case USB_REQ_SET_INTERFACE:
		return usbdc_set_interface(req->wValue, req->wIndex);
    bfc6:	683b      	ldr	r3, [r7, #0]
    bfc8:	885b      	ldrh	r3, [r3, #2]
    bfca:	b29a      	uxth	r2, r3
    bfcc:	683b      	ldr	r3, [r7, #0]
    bfce:	889b      	ldrh	r3, [r3, #4]
    bfd0:	b29b      	uxth	r3, r3
    bfd2:	4619      	mov	r1, r3
    bfd4:	4610      	mov	r0, r2
    bfd6:	4b08      	ldr	r3, [pc, #32]	; (bff8 <usbdc_set_req+0xe8>)
    bfd8:	4798      	blx	r3
    bfda:	4603      	mov	r3, r0
    bfdc:	e000      	b.n	bfe0 <usbdc_set_req+0xd0>
	default:
		return false;
    bfde:	2300      	movs	r3, #0
	}
}
    bfe0:	4618      	mov	r0, r3
    bfe2:	370c      	adds	r7, #12
    bfe4:	46bd      	mov	sp, r7
    bfe6:	bd90      	pop	{r4, r7, pc}
    bfe8:	0000c2e5 	.word	0x0000c2e5
    bfec:	0000bcc5 	.word	0x0000bcc5
    bff0:	0000bbe1 	.word	0x0000bbe1
    bff4:	0000bc39 	.word	0x0000bc39
    bff8:	0000bdd1 	.word	0x0000bdd1

0000bffc <usbdc_sof_notify>:

/** Invoke all registered SOF callbacks. */
static void usbdc_sof_notify(void)
{
    bffc:	b580      	push	{r7, lr}
    bffe:	b082      	sub	sp, #8
    c000:	af00      	add	r7, sp, #0
	struct usbdc_sof_handler *sof = (struct usbdc_sof_handler *)usbdc.handlers.sof_list.head;
    c002:	4b0a      	ldr	r3, [pc, #40]	; (c02c <usbdc_sof_notify+0x30>)
    c004:	685b      	ldr	r3, [r3, #4]
    c006:	607b      	str	r3, [r7, #4]

	while (sof != NULL) {
    c008:	e009      	b.n	c01e <usbdc_sof_notify+0x22>
		if (NULL != sof->cb) {
    c00a:	687b      	ldr	r3, [r7, #4]
    c00c:	685b      	ldr	r3, [r3, #4]
    c00e:	2b00      	cmp	r3, #0
    c010:	d002      	beq.n	c018 <usbdc_sof_notify+0x1c>
			sof->cb();
    c012:	687b      	ldr	r3, [r7, #4]
    c014:	685b      	ldr	r3, [r3, #4]
    c016:	4798      	blx	r3
		}
		sof = sof->next;
    c018:	687b      	ldr	r3, [r7, #4]
    c01a:	681b      	ldr	r3, [r3, #0]
    c01c:	607b      	str	r3, [r7, #4]
	while (sof != NULL) {
    c01e:	687b      	ldr	r3, [r7, #4]
    c020:	2b00      	cmp	r3, #0
    c022:	d1f2      	bne.n	c00a <usbdc_sof_notify+0xe>
	}
}
    c024:	bf00      	nop
    c026:	3708      	adds	r7, #8
    c028:	46bd      	mov	sp, r7
    c02a:	bd80      	pop	{r7, pc}
    c02c:	20000bfc 	.word	0x20000bfc

0000c030 <usbdc_change_notify>:

/** Invoke all registered Change notification callbacks. */
static void usbdc_change_notify(enum usbdc_change_type change, uint32_t value)
{
    c030:	b580      	push	{r7, lr}
    c032:	b084      	sub	sp, #16
    c034:	af00      	add	r7, sp, #0
    c036:	4603      	mov	r3, r0
    c038:	6039      	str	r1, [r7, #0]
    c03a:	71fb      	strb	r3, [r7, #7]
	struct usbdc_change_handler *cg = (struct usbdc_change_handler *)usbdc.handlers.change_list.head;
    c03c:	4b0b      	ldr	r3, [pc, #44]	; (c06c <usbdc_change_notify+0x3c>)
    c03e:	68db      	ldr	r3, [r3, #12]
    c040:	60fb      	str	r3, [r7, #12]

	while (cg != NULL) {
    c042:	e00c      	b.n	c05e <usbdc_change_notify+0x2e>
		if (NULL != cg->cb) {
    c044:	68fb      	ldr	r3, [r7, #12]
    c046:	685b      	ldr	r3, [r3, #4]
    c048:	2b00      	cmp	r3, #0
    c04a:	d005      	beq.n	c058 <usbdc_change_notify+0x28>
			cg->cb(change, value);
    c04c:	68fb      	ldr	r3, [r7, #12]
    c04e:	685b      	ldr	r3, [r3, #4]
    c050:	79fa      	ldrb	r2, [r7, #7]
    c052:	6839      	ldr	r1, [r7, #0]
    c054:	4610      	mov	r0, r2
    c056:	4798      	blx	r3
		}
		cg = cg->next;
    c058:	68fb      	ldr	r3, [r7, #12]
    c05a:	681b      	ldr	r3, [r3, #0]
    c05c:	60fb      	str	r3, [r7, #12]
	while (cg != NULL) {
    c05e:	68fb      	ldr	r3, [r7, #12]
    c060:	2b00      	cmp	r3, #0
    c062:	d1ef      	bne.n	c044 <usbdc_change_notify+0x14>
	}
}
    c064:	bf00      	nop
    c066:	3710      	adds	r7, #16
    c068:	46bd      	mov	sp, r7
    c06a:	bd80      	pop	{r7, pc}
    c06c:	20000bfc 	.word	0x20000bfc

0000c070 <usbdc_request_handler>:

/** Invoke all registered request callbacks until request handled. */
static int32_t usbdc_request_handler(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    c070:	b580      	push	{r7, lr}
    c072:	b084      	sub	sp, #16
    c074:	af00      	add	r7, sp, #0
    c076:	4603      	mov	r3, r0
    c078:	6039      	str	r1, [r7, #0]
    c07a:	71fb      	strb	r3, [r7, #7]
    c07c:	4613      	mov	r3, r2
    c07e:	71bb      	strb	r3, [r7, #6]
	struct usbdc_req_handler *h = (struct usbdc_req_handler *)usbdc.handlers.req_list.head;
    c080:	4b12      	ldr	r3, [pc, #72]	; (c0cc <usbdc_request_handler+0x5c>)
    c082:	689b      	ldr	r3, [r3, #8]
    c084:	60fb      	str	r3, [r7, #12]
	int32_t                   rc;

	while (h != NULL) {
    c086:	e019      	b.n	c0bc <usbdc_request_handler+0x4c>
		if (NULL != h->cb) {
    c088:	68fb      	ldr	r3, [r7, #12]
    c08a:	685b      	ldr	r3, [r3, #4]
    c08c:	2b00      	cmp	r3, #0
    c08e:	d012      	beq.n	c0b6 <usbdc_request_handler+0x46>
			rc = h->cb(ep, req, stage);
    c090:	68fb      	ldr	r3, [r7, #12]
    c092:	685b      	ldr	r3, [r3, #4]
    c094:	79ba      	ldrb	r2, [r7, #6]
    c096:	79f8      	ldrb	r0, [r7, #7]
    c098:	6839      	ldr	r1, [r7, #0]
    c09a:	4798      	blx	r3
    c09c:	60b8      	str	r0, [r7, #8]
			if (0 == rc) {
    c09e:	68bb      	ldr	r3, [r7, #8]
    c0a0:	2b00      	cmp	r3, #0
    c0a2:	d101      	bne.n	c0a8 <usbdc_request_handler+0x38>
				return true;
    c0a4:	2301      	movs	r3, #1
    c0a6:	e00d      	b.n	c0c4 <usbdc_request_handler+0x54>
			} else if (ERR_NOT_FOUND != rc) {
    c0a8:	68bb      	ldr	r3, [r7, #8]
    c0aa:	f113 0f0a 	cmn.w	r3, #10
    c0ae:	d002      	beq.n	c0b6 <usbdc_request_handler+0x46>
				return -1;
    c0b0:	f04f 33ff 	mov.w	r3, #4294967295
    c0b4:	e006      	b.n	c0c4 <usbdc_request_handler+0x54>
			}
		}
		h = h->next;
    c0b6:	68fb      	ldr	r3, [r7, #12]
    c0b8:	681b      	ldr	r3, [r3, #0]
    c0ba:	60fb      	str	r3, [r7, #12]
	while (h != NULL) {
    c0bc:	68fb      	ldr	r3, [r7, #12]
    c0be:	2b00      	cmp	r3, #0
    c0c0:	d1e2      	bne.n	c088 <usbdc_request_handler+0x18>
	}
	return false;
    c0c2:	2300      	movs	r3, #0
}
    c0c4:	4618      	mov	r0, r3
    c0c6:	3710      	adds	r7, #16
    c0c8:	46bd      	mov	sp, r7
    c0ca:	bd80      	pop	{r7, pc}
    c0cc:	20000bfc 	.word	0x20000bfc

0000c0d0 <usbd_sof_cb>:

/**
 * \brief Callback invoked on USB device SOF
 */
static void usbd_sof_cb(void)
{
    c0d0:	b580      	push	{r7, lr}
    c0d2:	af00      	add	r7, sp, #0
	usbdc_sof_notify();
    c0d4:	4b01      	ldr	r3, [pc, #4]	; (c0dc <usbd_sof_cb+0xc>)
    c0d6:	4798      	blx	r3
}
    c0d8:	bf00      	nop
    c0da:	bd80      	pop	{r7, pc}
    c0dc:	0000bffd 	.word	0x0000bffd

0000c0e0 <usbdc_cb_ctl_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_cb_ctl_req(const uint8_t ep, struct usb_req *req)
{
    c0e0:	b580      	push	{r7, lr}
    c0e2:	b082      	sub	sp, #8
    c0e4:	af00      	add	r7, sp, #0
    c0e6:	4603      	mov	r3, r0
    c0e8:	6039      	str	r1, [r7, #0]
    c0ea:	71fb      	strb	r3, [r7, #7]
	switch (usbdc_request_handler(ep, req, USB_SETUP_STAGE)) {
    c0ec:	79fb      	ldrb	r3, [r7, #7]
    c0ee:	2200      	movs	r2, #0
    c0f0:	6839      	ldr	r1, [r7, #0]
    c0f2:	4618      	mov	r0, r3
    c0f4:	4b14      	ldr	r3, [pc, #80]	; (c148 <usbdc_cb_ctl_req+0x68>)
    c0f6:	4798      	blx	r3
    c0f8:	4603      	mov	r3, r0
    c0fa:	f1b3 3fff 	cmp.w	r3, #4294967295
    c0fe:	d00b      	beq.n	c118 <usbdc_cb_ctl_req+0x38>
    c100:	2b01      	cmp	r3, #1
    c102:	d007      	beq.n	c114 <usbdc_cb_ctl_req+0x34>
	case true:
		return true;
	case -1:
		return false;
	default:
		break;
    c104:	bf00      	nop
	}

	// STD request handling
	switch (req->bmRequestType & (USB_REQT_TYPE_MASK | USB_REQT_DIR_IN)) {
    c106:	683b      	ldr	r3, [r7, #0]
    c108:	781b      	ldrb	r3, [r3, #0]
    c10a:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
    c10e:	2b00      	cmp	r3, #0
    c110:	d007      	beq.n	c122 <usbdc_cb_ctl_req+0x42>
    c112:	e003      	b.n	c11c <usbdc_cb_ctl_req+0x3c>
		return true;
    c114:	2301      	movs	r3, #1
    c116:	e013      	b.n	c140 <usbdc_cb_ctl_req+0x60>
		return false;
    c118:	2300      	movs	r3, #0
    c11a:	e011      	b.n	c140 <usbdc_cb_ctl_req+0x60>
	switch (req->bmRequestType & (USB_REQT_TYPE_MASK | USB_REQT_DIR_IN)) {
    c11c:	2b80      	cmp	r3, #128	; 0x80
    c11e:	d007      	beq.n	c130 <usbdc_cb_ctl_req+0x50>
    c120:	e00d      	b.n	c13e <usbdc_cb_ctl_req+0x5e>
	case USB_REQT_TYPE_STANDARD:
		return usbdc_set_req(ep, req);
    c122:	79fb      	ldrb	r3, [r7, #7]
    c124:	6839      	ldr	r1, [r7, #0]
    c126:	4618      	mov	r0, r3
    c128:	4b08      	ldr	r3, [pc, #32]	; (c14c <usbdc_cb_ctl_req+0x6c>)
    c12a:	4798      	blx	r3
    c12c:	4603      	mov	r3, r0
    c12e:	e007      	b.n	c140 <usbdc_cb_ctl_req+0x60>
	case (USB_REQT_TYPE_STANDARD | USB_REQT_DIR_IN):
		return usbdc_get_req(ep, req);
    c130:	79fb      	ldrb	r3, [r7, #7]
    c132:	6839      	ldr	r1, [r7, #0]
    c134:	4618      	mov	r0, r3
    c136:	4b06      	ldr	r3, [pc, #24]	; (c150 <usbdc_cb_ctl_req+0x70>)
    c138:	4798      	blx	r3
    c13a:	4603      	mov	r3, r0
    c13c:	e000      	b.n	c140 <usbdc_cb_ctl_req+0x60>
	default:
		return false;
    c13e:	2300      	movs	r3, #0
	}
}
    c140:	4618      	mov	r0, r3
    c142:	3708      	adds	r7, #8
    c144:	46bd      	mov	sp, r7
    c146:	bd80      	pop	{r7, pc}
    c148:	0000c071 	.word	0x0000c071
    c14c:	0000bf11 	.word	0x0000bf11
    c150:	0000bb39 	.word	0x0000bb39

0000c154 <usbdc_ctrl_status_end>:
/**
 * \brief When control status stage is end
 * \param[in] req Pointer to the request.
 */
static void usbdc_ctrl_status_end(const struct usb_req *req)
{
    c154:	b580      	push	{r7, lr}
    c156:	b082      	sub	sp, #8
    c158:	af00      	add	r7, sp, #0
    c15a:	6078      	str	r0, [r7, #4]
	if (req->bmRequestType != USB_REQT_TYPE_STANDARD) {
    c15c:	687b      	ldr	r3, [r7, #4]
    c15e:	781b      	ldrb	r3, [r3, #0]
    c160:	2b00      	cmp	r3, #0
    c162:	d135      	bne.n	c1d0 <usbdc_ctrl_status_end+0x7c>
		return;
	}
	switch (req->bRequest) {
    c164:	687b      	ldr	r3, [r7, #4]
    c166:	785b      	ldrb	r3, [r3, #1]
    c168:	2b05      	cmp	r3, #5
    c16a:	d019      	beq.n	c1a0 <usbdc_ctrl_status_end+0x4c>
    c16c:	2b09      	cmp	r3, #9
    c16e:	d000      	beq.n	c172 <usbdc_ctrl_status_end+0x1e>
		usbdc_set_address(req->wValue);
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
		break;
	default:
		break;
    c170:	e02f      	b.n	c1d2 <usbdc_ctrl_status_end+0x7e>
		usbdc.cfg_value = req->wValue;
    c172:	687b      	ldr	r3, [r7, #4]
    c174:	885b      	ldrh	r3, [r3, #2]
    c176:	b29b      	uxth	r3, r3
    c178:	b2da      	uxtb	r2, r3
    c17a:	4b17      	ldr	r3, [pc, #92]	; (c1d8 <usbdc_ctrl_status_end+0x84>)
    c17c:	76da      	strb	r2, [r3, #27]
		usbdc.state     = req->wValue ? USBD_S_CONFIG : USBD_S_ADDRESS;
    c17e:	687b      	ldr	r3, [r7, #4]
    c180:	885b      	ldrh	r3, [r3, #2]
    c182:	b29b      	uxth	r3, r3
    c184:	2b00      	cmp	r3, #0
    c186:	d001      	beq.n	c18c <usbdc_ctrl_status_end+0x38>
    c188:	2204      	movs	r2, #4
    c18a:	e000      	b.n	c18e <usbdc_ctrl_status_end+0x3a>
    c18c:	2203      	movs	r2, #3
    c18e:	4b12      	ldr	r3, [pc, #72]	; (c1d8 <usbdc_ctrl_status_end+0x84>)
    c190:	769a      	strb	r2, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
    c192:	4b11      	ldr	r3, [pc, #68]	; (c1d8 <usbdc_ctrl_status_end+0x84>)
    c194:	7e9b      	ldrb	r3, [r3, #26]
    c196:	4619      	mov	r1, r3
    c198:	2001      	movs	r0, #1
    c19a:	4b10      	ldr	r3, [pc, #64]	; (c1dc <usbdc_ctrl_status_end+0x88>)
    c19c:	4798      	blx	r3
		break;
    c19e:	e018      	b.n	c1d2 <usbdc_ctrl_status_end+0x7e>
		usbdc_set_address(req->wValue);
    c1a0:	687b      	ldr	r3, [r7, #4]
    c1a2:	885b      	ldrh	r3, [r3, #2]
    c1a4:	b29b      	uxth	r3, r3
    c1a6:	b2db      	uxtb	r3, r3
    c1a8:	4618      	mov	r0, r3
    c1aa:	4b0d      	ldr	r3, [pc, #52]	; (c1e0 <usbdc_ctrl_status_end+0x8c>)
    c1ac:	4798      	blx	r3
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
    c1ae:	687b      	ldr	r3, [r7, #4]
    c1b0:	885b      	ldrh	r3, [r3, #2]
    c1b2:	b29b      	uxth	r3, r3
    c1b4:	2b00      	cmp	r3, #0
    c1b6:	d001      	beq.n	c1bc <usbdc_ctrl_status_end+0x68>
    c1b8:	2203      	movs	r2, #3
    c1ba:	e000      	b.n	c1be <usbdc_ctrl_status_end+0x6a>
    c1bc:	2202      	movs	r2, #2
    c1be:	4b06      	ldr	r3, [pc, #24]	; (c1d8 <usbdc_ctrl_status_end+0x84>)
    c1c0:	769a      	strb	r2, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
    c1c2:	4b05      	ldr	r3, [pc, #20]	; (c1d8 <usbdc_ctrl_status_end+0x84>)
    c1c4:	7e9b      	ldrb	r3, [r3, #26]
    c1c6:	4619      	mov	r1, r3
    c1c8:	2001      	movs	r0, #1
    c1ca:	4b04      	ldr	r3, [pc, #16]	; (c1dc <usbdc_ctrl_status_end+0x88>)
    c1cc:	4798      	blx	r3
		break;
    c1ce:	e000      	b.n	c1d2 <usbdc_ctrl_status_end+0x7e>
		return;
    c1d0:	bf00      	nop
	}
}
    c1d2:	3708      	adds	r7, #8
    c1d4:	46bd      	mov	sp, r7
    c1d6:	bd80      	pop	{r7, pc}
    c1d8:	20000bfc 	.word	0x20000bfc
    c1dc:	0000c031 	.word	0x0000c031
    c1e0:	0000bdb1 	.word	0x0000bdb1

0000c1e4 <usbdc_ctrl_data_end>:
/**
 * \brief When control data stage is end
 * \param[in] req Pointer to the request.
 */
static bool usbdc_ctrl_data_end(struct usb_req *req)
{
    c1e4:	b580      	push	{r7, lr}
    c1e6:	b082      	sub	sp, #8
    c1e8:	af00      	add	r7, sp, #0
    c1ea:	6078      	str	r0, [r7, #4]
	usbdc_request_handler(0, req, USB_DATA_STAGE);
    c1ec:	2201      	movs	r2, #1
    c1ee:	6879      	ldr	r1, [r7, #4]
    c1f0:	2000      	movs	r0, #0
    c1f2:	4b03      	ldr	r3, [pc, #12]	; (c200 <usbdc_ctrl_data_end+0x1c>)
    c1f4:	4798      	blx	r3
	return false;
    c1f6:	2300      	movs	r3, #0
}
    c1f8:	4618      	mov	r0, r3
    c1fa:	3708      	adds	r7, #8
    c1fc:	46bd      	mov	sp, r7
    c1fe:	bd80      	pop	{r7, pc}
    c200:	0000c071 	.word	0x0000c071

0000c204 <usbdc_cb_ctl_done>:
 * \return Data has error or not.
 * \retval true There is data error, protocol error.
 * \retval false There is no data error.
 */
static bool usbdc_cb_ctl_done(const uint8_t ep, const enum usb_xfer_code code, struct usb_req *req)
{
    c204:	b580      	push	{r7, lr}
    c206:	b082      	sub	sp, #8
    c208:	af00      	add	r7, sp, #0
    c20a:	4603      	mov	r3, r0
    c20c:	603a      	str	r2, [r7, #0]
    c20e:	71fb      	strb	r3, [r7, #7]
    c210:	460b      	mov	r3, r1
    c212:	71bb      	strb	r3, [r7, #6]
	(void)ep;

	switch (code) {
    c214:	79bb      	ldrb	r3, [r7, #6]
    c216:	2b00      	cmp	r3, #0
    c218:	d002      	beq.n	c220 <usbdc_cb_ctl_done+0x1c>
    c21a:	2b01      	cmp	r3, #1
    c21c:	d004      	beq.n	c228 <usbdc_cb_ctl_done+0x24>
		usbdc_ctrl_status_end(req);
		break;
	case USB_XFER_DATA:
		return usbdc_ctrl_data_end(req);
	default:
		break;
    c21e:	e008      	b.n	c232 <usbdc_cb_ctl_done+0x2e>
		usbdc_ctrl_status_end(req);
    c220:	6838      	ldr	r0, [r7, #0]
    c222:	4b06      	ldr	r3, [pc, #24]	; (c23c <usbdc_cb_ctl_done+0x38>)
    c224:	4798      	blx	r3
		break;
    c226:	e004      	b.n	c232 <usbdc_cb_ctl_done+0x2e>
		return usbdc_ctrl_data_end(req);
    c228:	6838      	ldr	r0, [r7, #0]
    c22a:	4b05      	ldr	r3, [pc, #20]	; (c240 <usbdc_cb_ctl_done+0x3c>)
    c22c:	4798      	blx	r3
    c22e:	4603      	mov	r3, r0
    c230:	e000      	b.n	c234 <usbdc_cb_ctl_done+0x30>
	}
	return false;
    c232:	2300      	movs	r3, #0
}
    c234:	4618      	mov	r0, r3
    c236:	3708      	adds	r7, #8
    c238:	46bd      	mov	sp, r7
    c23a:	bd80      	pop	{r7, pc}
    c23c:	0000c155 	.word	0x0000c155
    c240:	0000c1e5 	.word	0x0000c1e5

0000c244 <usbdc_reset>:

/**
 * \brief USB Device Core Reset
 */
void usbdc_reset(void)
{
    c244:	b580      	push	{r7, lr}
    c246:	af00      	add	r7, sp, #0
	usbdc_unconfig();
    c248:	4b10      	ldr	r3, [pc, #64]	; (c28c <usbdc_reset+0x48>)
    c24a:	4798      	blx	r3

	usbdc.state       = USBD_S_DEFAULT;
    c24c:	4b10      	ldr	r3, [pc, #64]	; (c290 <usbdc_reset+0x4c>)
    c24e:	2202      	movs	r2, #2
    c250:	769a      	strb	r2, [r3, #26]
	usbdc.cfg_value   = 0;
    c252:	4b0f      	ldr	r3, [pc, #60]	; (c290 <usbdc_reset+0x4c>)
    c254:	2200      	movs	r2, #0
    c256:	76da      	strb	r2, [r3, #27]
	usbdc.ifc_alt_map = 0;
    c258:	4b0d      	ldr	r3, [pc, #52]	; (c290 <usbdc_reset+0x4c>)
    c25a:	2200      	movs	r2, #0
    c25c:	775a      	strb	r2, [r3, #29]

	// Setup EP0
	usb_d_ep_deinit(0);
    c25e:	2000      	movs	r0, #0
    c260:	4b0c      	ldr	r3, [pc, #48]	; (c294 <usbdc_reset+0x50>)
    c262:	4798      	blx	r3
	usb_d_ep0_init(usbdc.ctrl_size);
    c264:	4b0a      	ldr	r3, [pc, #40]	; (c290 <usbdc_reset+0x4c>)
    c266:	7f1b      	ldrb	r3, [r3, #28]
    c268:	4618      	mov	r0, r3
    c26a:	4b0b      	ldr	r3, [pc, #44]	; (c298 <usbdc_reset+0x54>)
    c26c:	4798      	blx	r3
	usb_d_ep_register_callback(0, USB_D_EP_CB_SETUP, (FUNC_PTR)usbdc_cb_ctl_req);
    c26e:	4a0b      	ldr	r2, [pc, #44]	; (c29c <usbdc_reset+0x58>)
    c270:	2100      	movs	r1, #0
    c272:	2000      	movs	r0, #0
    c274:	4b0a      	ldr	r3, [pc, #40]	; (c2a0 <usbdc_reset+0x5c>)
    c276:	4798      	blx	r3
	usb_d_ep_register_callback(0, USB_D_EP_CB_XFER, (FUNC_PTR)usbdc_cb_ctl_done);
    c278:	4a0a      	ldr	r2, [pc, #40]	; (c2a4 <usbdc_reset+0x60>)
    c27a:	2102      	movs	r1, #2
    c27c:	2000      	movs	r0, #0
    c27e:	4b08      	ldr	r3, [pc, #32]	; (c2a0 <usbdc_reset+0x5c>)
    c280:	4798      	blx	r3
	usb_d_ep_enable(0);
    c282:	2000      	movs	r0, #0
    c284:	4b08      	ldr	r3, [pc, #32]	; (c2a8 <usbdc_reset+0x64>)
    c286:	4798      	blx	r3
}
    c288:	bf00      	nop
    c28a:	bd80      	pop	{r7, pc}
    c28c:	0000bc91 	.word	0x0000bc91
    c290:	20000bfc 	.word	0x20000bfc
    c294:	00003105 	.word	0x00003105
    c298:	00003041 	.word	0x00003041
    c29c:	0000c0e1 	.word	0x0000c0e1
    c2a0:	00003405 	.word	0x00003405
    c2a4:	0000c205 	.word	0x0000c205
    c2a8:	00003155 	.word	0x00003155

0000c2ac <usbd_event_cb>:
 * \brief Callback invoked on USB device events
 * \param[in] ev Event code.
 * \param[in] param Event parameter for event handling.
 */
static void usbd_event_cb(const enum usb_event ev, const uint32_t param)
{
    c2ac:	b580      	push	{r7, lr}
    c2ae:	b082      	sub	sp, #8
    c2b0:	af00      	add	r7, sp, #0
    c2b2:	4603      	mov	r3, r0
    c2b4:	6039      	str	r1, [r7, #0]
    c2b6:	71fb      	strb	r3, [r7, #7]
	(void)param;

	switch (ev) {
    c2b8:	79fb      	ldrb	r3, [r7, #7]
    c2ba:	2b00      	cmp	r3, #0
    c2bc:	d002      	beq.n	c2c4 <usbd_event_cb+0x18>
    c2be:	2b01      	cmp	r3, #1
    c2c0:	d005      	beq.n	c2ce <usbd_event_cb+0x22>
	case USB_EV_RESET:
		usbdc_reset();
		break;

	default:
		break;
    c2c2:	e007      	b.n	c2d4 <usbd_event_cb+0x28>
		usbdc_change_notify(USBDC_C_CONN, param);
    c2c4:	6839      	ldr	r1, [r7, #0]
    c2c6:	2000      	movs	r0, #0
    c2c8:	4b04      	ldr	r3, [pc, #16]	; (c2dc <usbd_event_cb+0x30>)
    c2ca:	4798      	blx	r3
		break;
    c2cc:	e002      	b.n	c2d4 <usbd_event_cb+0x28>
		usbdc_reset();
    c2ce:	4b04      	ldr	r3, [pc, #16]	; (c2e0 <usbd_event_cb+0x34>)
    c2d0:	4798      	blx	r3
		break;
    c2d2:	bf00      	nop
	}
}
    c2d4:	bf00      	nop
    c2d6:	3708      	adds	r7, #8
    c2d8:	46bd      	mov	sp, r7
    c2da:	bd80      	pop	{r7, pc}
    c2dc:	0000c031 	.word	0x0000c031
    c2e0:	0000c245 	.word	0x0000c245

0000c2e4 <usbdc_xfer>:

/**
 * \brief Issue USB device transfer
 */
int32_t usbdc_xfer(uint8_t ep, uint8_t *buf, uint32_t size, bool zlp)
{
    c2e4:	b580      	push	{r7, lr}
    c2e6:	b088      	sub	sp, #32
    c2e8:	af00      	add	r7, sp, #0
    c2ea:	60b9      	str	r1, [r7, #8]
    c2ec:	607a      	str	r2, [r7, #4]
    c2ee:	461a      	mov	r2, r3
    c2f0:	4603      	mov	r3, r0
    c2f2:	73fb      	strb	r3, [r7, #15]
    c2f4:	4613      	mov	r3, r2
    c2f6:	73bb      	strb	r3, [r7, #14]
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    c2f8:	68bb      	ldr	r3, [r7, #8]
    c2fa:	617b      	str	r3, [r7, #20]
    c2fc:	687b      	ldr	r3, [r7, #4]
    c2fe:	61bb      	str	r3, [r7, #24]
    c300:	7bfb      	ldrb	r3, [r7, #15]
    c302:	773b      	strb	r3, [r7, #28]
    c304:	7bbb      	ldrb	r3, [r7, #14]
    c306:	777b      	strb	r3, [r7, #29]
	return usb_d_ep_transfer(&xfer);
    c308:	f107 0314 	add.w	r3, r7, #20
    c30c:	4618      	mov	r0, r3
    c30e:	4b03      	ldr	r3, [pc, #12]	; (c31c <usbdc_xfer+0x38>)
    c310:	4798      	blx	r3
    c312:	4603      	mov	r3, r0
}
    c314:	4618      	mov	r0, r3
    c316:	3720      	adds	r7, #32
    c318:	46bd      	mov	sp, r7
    c31a:	bd80      	pop	{r7, pc}
    c31c:	000031c5 	.word	0x000031c5

0000c320 <usbdc_register_handler>:

/**
 * \brief Register the handler
 */
void usbdc_register_handler(enum usbdc_handler_type type, const struct usbdc_handler *h)
{
    c320:	b580      	push	{r7, lr}
    c322:	b082      	sub	sp, #8
    c324:	af00      	add	r7, sp, #0
    c326:	4603      	mov	r3, r0
    c328:	6039      	str	r1, [r7, #0]
    c32a:	71fb      	strb	r3, [r7, #7]
	switch (type) {
    c32c:	79fb      	ldrb	r3, [r7, #7]
    c32e:	2b01      	cmp	r3, #1
    c330:	d009      	beq.n	c346 <usbdc_register_handler+0x26>
    c332:	2b02      	cmp	r3, #2
    c334:	d00c      	beq.n	c350 <usbdc_register_handler+0x30>
    c336:	2b00      	cmp	r3, #0
    c338:	d000      	beq.n	c33c <usbdc_register_handler+0x1c>
		break;
	case USBDC_HDL_CHANGE:
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
		break;
	default:
		break;
    c33a:	e00e      	b.n	c35a <usbdc_register_handler+0x3a>
		list_insert_at_end(&usbdc.handlers.sof_list, (void *)h);
    c33c:	6839      	ldr	r1, [r7, #0]
    c33e:	4809      	ldr	r0, [pc, #36]	; (c364 <usbdc_register_handler+0x44>)
    c340:	4b09      	ldr	r3, [pc, #36]	; (c368 <usbdc_register_handler+0x48>)
    c342:	4798      	blx	r3
		break;
    c344:	e009      	b.n	c35a <usbdc_register_handler+0x3a>
		list_insert_at_end(&usbdc.handlers.req_list, (void *)h);
    c346:	6839      	ldr	r1, [r7, #0]
    c348:	4808      	ldr	r0, [pc, #32]	; (c36c <usbdc_register_handler+0x4c>)
    c34a:	4b07      	ldr	r3, [pc, #28]	; (c368 <usbdc_register_handler+0x48>)
    c34c:	4798      	blx	r3
		break;
    c34e:	e004      	b.n	c35a <usbdc_register_handler+0x3a>
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
    c350:	6839      	ldr	r1, [r7, #0]
    c352:	4807      	ldr	r0, [pc, #28]	; (c370 <usbdc_register_handler+0x50>)
    c354:	4b04      	ldr	r3, [pc, #16]	; (c368 <usbdc_register_handler+0x48>)
    c356:	4798      	blx	r3
		break;
    c358:	bf00      	nop
	}
}
    c35a:	bf00      	nop
    c35c:	3708      	adds	r7, #8
    c35e:	46bd      	mov	sp, r7
    c360:	bd80      	pop	{r7, pc}
    c362:	bf00      	nop
    c364:	20000c00 	.word	0x20000c00
    c368:	0000355d 	.word	0x0000355d
    c36c:	20000c04 	.word	0x20000c04
    c370:	20000c08 	.word	0x20000c08

0000c374 <usbdc_init>:

/**
 * \brief Initialize the USB device core driver
 */
int32_t usbdc_init(uint8_t *ctrl_buf)
{
    c374:	b580      	push	{r7, lr}
    c376:	b084      	sub	sp, #16
    c378:	af00      	add	r7, sp, #0
    c37a:	6078      	str	r0, [r7, #4]
	ASSERT(ctrl_buf);
    c37c:	687b      	ldr	r3, [r7, #4]
    c37e:	2b00      	cmp	r3, #0
    c380:	bf14      	ite	ne
    c382:	2301      	movne	r3, #1
    c384:	2300      	moveq	r3, #0
    c386:	b2db      	uxtb	r3, r3
    c388:	f240 3255 	movw	r2, #853	; 0x355
    c38c:	4910      	ldr	r1, [pc, #64]	; (c3d0 <usbdc_init+0x5c>)
    c38e:	4618      	mov	r0, r3
    c390:	4b10      	ldr	r3, [pc, #64]	; (c3d4 <usbdc_init+0x60>)
    c392:	4798      	blx	r3

	int32_t rc;

	rc = usb_d_init();
    c394:	4b10      	ldr	r3, [pc, #64]	; (c3d8 <usbdc_init+0x64>)
    c396:	4798      	blx	r3
    c398:	60f8      	str	r0, [r7, #12]
	if (rc < 0) {
    c39a:	68fb      	ldr	r3, [r7, #12]
    c39c:	2b00      	cmp	r3, #0
    c39e:	da01      	bge.n	c3a4 <usbdc_init+0x30>
		return rc;
    c3a0:	68fb      	ldr	r3, [r7, #12]
    c3a2:	e010      	b.n	c3c6 <usbdc_init+0x52>
	}

	memset(&usbdc, 0, sizeof(usbdc));
    c3a4:	2220      	movs	r2, #32
    c3a6:	2100      	movs	r1, #0
    c3a8:	480c      	ldr	r0, [pc, #48]	; (c3dc <usbdc_init+0x68>)
    c3aa:	4b0d      	ldr	r3, [pc, #52]	; (c3e0 <usbdc_init+0x6c>)
    c3ac:	4798      	blx	r3
	usbdc.ctrl_buf = ctrl_buf;
    c3ae:	4a0b      	ldr	r2, [pc, #44]	; (c3dc <usbdc_init+0x68>)
    c3b0:	687b      	ldr	r3, [r7, #4]
    c3b2:	6153      	str	r3, [r2, #20]
	usb_d_register_callback(USB_D_CB_SOF, (FUNC_PTR)usbd_sof_cb);
    c3b4:	490b      	ldr	r1, [pc, #44]	; (c3e4 <usbdc_init+0x70>)
    c3b6:	2000      	movs	r0, #0
    c3b8:	4b0b      	ldr	r3, [pc, #44]	; (c3e8 <usbdc_init+0x74>)
    c3ba:	4798      	blx	r3
	usb_d_register_callback(USB_D_CB_EVENT, (FUNC_PTR)usbd_event_cb);
    c3bc:	490b      	ldr	r1, [pc, #44]	; (c3ec <usbdc_init+0x78>)
    c3be:	2001      	movs	r0, #1
    c3c0:	4b09      	ldr	r3, [pc, #36]	; (c3e8 <usbdc_init+0x74>)
    c3c2:	4798      	blx	r3

	return 0;
    c3c4:	2300      	movs	r3, #0
}
    c3c6:	4618      	mov	r0, r3
    c3c8:	3710      	adds	r7, #16
    c3ca:	46bd      	mov	sp, r7
    c3cc:	bd80      	pop	{r7, pc}
    c3ce:	bf00      	nop
    c3d0:	0000cf5c 	.word	0x0000cf5c
    c3d4:	00003481 	.word	0x00003481
    c3d8:	00002f2d 	.word	0x00002f2d
    c3dc:	20000bfc 	.word	0x20000bfc
    c3e0:	0000c8d9 	.word	0x0000c8d9
    c3e4:	0000c0d1 	.word	0x0000c0d1
    c3e8:	00002fd9 	.word	0x00002fd9
    c3ec:	0000c2ad 	.word	0x0000c2ad

0000c3f0 <usbdc_register_function>:
 * \brief Register/unregister function support of a USB device function
 *
 * Must be invoked when USB device is stopped.
 */
void usbdc_register_function(struct usbdf_driver *func)
{
    c3f0:	b580      	push	{r7, lr}
    c3f2:	b082      	sub	sp, #8
    c3f4:	af00      	add	r7, sp, #0
    c3f6:	6078      	str	r0, [r7, #4]
	list_insert_at_end(&usbdc.func_list, func);
    c3f8:	6879      	ldr	r1, [r7, #4]
    c3fa:	4803      	ldr	r0, [pc, #12]	; (c408 <usbdc_register_function+0x18>)
    c3fc:	4b03      	ldr	r3, [pc, #12]	; (c40c <usbdc_register_function+0x1c>)
    c3fe:	4798      	blx	r3
}
    c400:	bf00      	nop
    c402:	3708      	adds	r7, #8
    c404:	46bd      	mov	sp, r7
    c406:	bd80      	pop	{r7, pc}
    c408:	20000c0c 	.word	0x20000c0c
    c40c:	0000355d 	.word	0x0000355d

0000c410 <usbdc_start>:

/**
 * \brief Start the USB device driver with specific descriptors set
 */
int32_t usbdc_start(struct usbd_descriptors *desces)
{
    c410:	b580      	push	{r7, lr}
    c412:	b082      	sub	sp, #8
    c414:	af00      	add	r7, sp, #0
    c416:	6078      	str	r0, [r7, #4]
	if (usbdc.state >= USBD_S_POWER) {
    c418:	4b0f      	ldr	r3, [pc, #60]	; (c458 <usbdc_start+0x48>)
    c41a:	7e9b      	ldrb	r3, [r3, #26]
    c41c:	2b00      	cmp	r3, #0
    c41e:	d002      	beq.n	c426 <usbdc_start+0x16>
		return ERR_BUSY;
    c420:	f06f 0303 	mvn.w	r3, #3
    c424:	e013      	b.n	c44e <usbdc_start+0x3e>
	}

	if (desces) {
    c426:	687b      	ldr	r3, [r7, #4]
    c428:	2b00      	cmp	r3, #0
    c42a:	d00e      	beq.n	c44a <usbdc_start+0x3a>
		usbdc.desces.ls_fs = desces;
    c42c:	4a0a      	ldr	r2, [pc, #40]	; (c458 <usbdc_start+0x48>)
    c42e:	687b      	ldr	r3, [r7, #4]
    c430:	6013      	str	r3, [r2, #0]
#endif
	} else {
		return ERR_BAD_DATA;
	}

	usbdc.ctrl_size = desces->sod[7];
    c432:	687b      	ldr	r3, [r7, #4]
    c434:	681b      	ldr	r3, [r3, #0]
    c436:	79da      	ldrb	r2, [r3, #7]
    c438:	4b07      	ldr	r3, [pc, #28]	; (c458 <usbdc_start+0x48>)
    c43a:	771a      	strb	r2, [r3, #28]
	usbdc.state     = USBD_S_POWER;
    c43c:	4b06      	ldr	r3, [pc, #24]	; (c458 <usbdc_start+0x48>)
    c43e:	2201      	movs	r2, #1
    c440:	769a      	strb	r2, [r3, #26]
	usb_d_enable();
    c442:	4b06      	ldr	r3, [pc, #24]	; (c45c <usbdc_start+0x4c>)
    c444:	4798      	blx	r3
	return ERR_NONE;
    c446:	2300      	movs	r3, #0
    c448:	e001      	b.n	c44e <usbdc_start+0x3e>
		return ERR_BAD_DATA;
    c44a:	f06f 0308 	mvn.w	r3, #8
}
    c44e:	4618      	mov	r0, r3
    c450:	3708      	adds	r7, #8
    c452:	46bd      	mov	sp, r7
    c454:	bd80      	pop	{r7, pc}
    c456:	bf00      	nop
    c458:	20000bfc 	.word	0x20000bfc
    c45c:	00002ffd 	.word	0x00002ffd

0000c460 <usbdc_attach>:

/**
 * \brief Attach the USB device to host
 */
void usbdc_attach(void)
{
    c460:	b580      	push	{r7, lr}
    c462:	af00      	add	r7, sp, #0
	usb_d_attach();
    c464:	4b01      	ldr	r3, [pc, #4]	; (c46c <usbdc_attach+0xc>)
    c466:	4798      	blx	r3
}
    c468:	bf00      	nop
    c46a:	bd80      	pop	{r7, pc}
    c46c:	00003011 	.word	0x00003011

0000c470 <usbdc_get_ctrl_buffer>:

/**
 * \brief Return USB Device endpoint0 buffer
 */
uint8_t *usbdc_get_ctrl_buffer(void)
{
    c470:	b480      	push	{r7}
    c472:	af00      	add	r7, sp, #0
	return usbdc.ctrl_buf;
    c474:	4b03      	ldr	r3, [pc, #12]	; (c484 <usbdc_get_ctrl_buffer+0x14>)
    c476:	695b      	ldr	r3, [r3, #20]
}
    c478:	4618      	mov	r0, r3
    c47a:	46bd      	mov	sp, r7
    c47c:	f85d 7b04 	ldr.w	r7, [sp], #4
    c480:	4770      	bx	lr
    c482:	bf00      	nop
    c484:	20000bfc 	.word	0x20000bfc

0000c488 <usbdc_get_state>:

/**
 * \brief Return current USB state
 */
uint8_t usbdc_get_state(void)
{
    c488:	b480      	push	{r7}
    c48a:	af00      	add	r7, sp, #0
	if (usbdc.state & USBD_S_SUSPEND) {
    c48c:	4b07      	ldr	r3, [pc, #28]	; (c4ac <usbdc_get_state+0x24>)
    c48e:	7e9b      	ldrb	r3, [r3, #26]
    c490:	f003 0310 	and.w	r3, r3, #16
    c494:	2b00      	cmp	r3, #0
    c496:	d001      	beq.n	c49c <usbdc_get_state+0x14>
		return USBD_S_SUSPEND;
    c498:	2310      	movs	r3, #16
    c49a:	e001      	b.n	c4a0 <usbdc_get_state+0x18>
	}
	return usbdc.state;
    c49c:	4b03      	ldr	r3, [pc, #12]	; (c4ac <usbdc_get_state+0x24>)
    c49e:	7e9b      	ldrb	r3, [r3, #26]
}
    c4a0:	4618      	mov	r0, r3
    c4a2:	46bd      	mov	sp, r7
    c4a4:	f85d 7b04 	ldr.w	r7, [sp], #4
    c4a8:	4770      	bx	lr
    c4aa:	bf00      	nop
    c4ac:	20000bfc 	.word	0x20000bfc

0000c4b0 <usb_get_u16>:
{
    c4b0:	b480      	push	{r7}
    c4b2:	b083      	sub	sp, #12
    c4b4:	af00      	add	r7, sp, #0
    c4b6:	6078      	str	r0, [r7, #4]
	return (ptr[0] + (ptr[1] << 8));
    c4b8:	687b      	ldr	r3, [r7, #4]
    c4ba:	781b      	ldrb	r3, [r3, #0]
    c4bc:	b29a      	uxth	r2, r3
    c4be:	687b      	ldr	r3, [r7, #4]
    c4c0:	3301      	adds	r3, #1
    c4c2:	781b      	ldrb	r3, [r3, #0]
    c4c4:	b29b      	uxth	r3, r3
    c4c6:	021b      	lsls	r3, r3, #8
    c4c8:	b29b      	uxth	r3, r3
    c4ca:	4413      	add	r3, r2
    c4cc:	b29b      	uxth	r3, r3
}
    c4ce:	4618      	mov	r0, r3
    c4d0:	370c      	adds	r7, #12
    c4d2:	46bd      	mov	sp, r7
    c4d4:	f85d 7b04 	ldr.w	r7, [sp], #4
    c4d8:	4770      	bx	lr

0000c4da <usb_desc_len>:
{
    c4da:	b480      	push	{r7}
    c4dc:	b083      	sub	sp, #12
    c4de:	af00      	add	r7, sp, #0
    c4e0:	6078      	str	r0, [r7, #4]
	return desc[0];
    c4e2:	687b      	ldr	r3, [r7, #4]
    c4e4:	781b      	ldrb	r3, [r3, #0]
}
    c4e6:	4618      	mov	r0, r3
    c4e8:	370c      	adds	r7, #12
    c4ea:	46bd      	mov	sp, r7
    c4ec:	f85d 7b04 	ldr.w	r7, [sp], #4
    c4f0:	4770      	bx	lr

0000c4f2 <usb_desc_type>:
{
    c4f2:	b480      	push	{r7}
    c4f4:	b083      	sub	sp, #12
    c4f6:	af00      	add	r7, sp, #0
    c4f8:	6078      	str	r0, [r7, #4]
	return desc[1];
    c4fa:	687b      	ldr	r3, [r7, #4]
    c4fc:	3301      	adds	r3, #1
    c4fe:	781b      	ldrb	r3, [r3, #0]
}
    c500:	4618      	mov	r0, r3
    c502:	370c      	adds	r7, #12
    c504:	46bd      	mov	sp, r7
    c506:	f85d 7b04 	ldr.w	r7, [sp], #4
    c50a:	4770      	bx	lr

0000c50c <usb_desc_next>:
{
    c50c:	b580      	push	{r7, lr}
    c50e:	b082      	sub	sp, #8
    c510:	af00      	add	r7, sp, #0
    c512:	6078      	str	r0, [r7, #4]
	return (desc + usb_desc_len(desc));
    c514:	6878      	ldr	r0, [r7, #4]
    c516:	4b05      	ldr	r3, [pc, #20]	; (c52c <usb_desc_next+0x20>)
    c518:	4798      	blx	r3
    c51a:	4603      	mov	r3, r0
    c51c:	461a      	mov	r2, r3
    c51e:	687b      	ldr	r3, [r7, #4]
    c520:	4413      	add	r3, r2
}
    c522:	4618      	mov	r0, r3
    c524:	3708      	adds	r7, #8
    c526:	46bd      	mov	sp, r7
    c528:	bd80      	pop	{r7, pc}
    c52a:	bf00      	nop
    c52c:	0000c4db 	.word	0x0000c4db

0000c530 <usb_cfg_desc_total_len>:
{
    c530:	b580      	push	{r7, lr}
    c532:	b082      	sub	sp, #8
    c534:	af00      	add	r7, sp, #0
    c536:	6078      	str	r0, [r7, #4]
	return usb_get_u16(cfg_desc + 2);
    c538:	687b      	ldr	r3, [r7, #4]
    c53a:	3302      	adds	r3, #2
    c53c:	4618      	mov	r0, r3
    c53e:	4b03      	ldr	r3, [pc, #12]	; (c54c <usb_cfg_desc_total_len+0x1c>)
    c540:	4798      	blx	r3
    c542:	4603      	mov	r3, r0
}
    c544:	4618      	mov	r0, r3
    c546:	3708      	adds	r7, #8
    c548:	46bd      	mov	sp, r7
    c54a:	bd80      	pop	{r7, pc}
    c54c:	0000c4b1 	.word	0x0000c4b1

0000c550 <usb_cfg_desc_next>:
/** \brief Get Next USB Descriptor After the Configuration Descriptors list
 *  \param[in] cfg_desc Byte pointer to the descriptor start address
 *  \return Byte pointer to descriptor after configuration end
 */
static inline uint8_t *usb_cfg_desc_next(uint8_t *cfg_desc)
{
    c550:	b580      	push	{r7, lr}
    c552:	b082      	sub	sp, #8
    c554:	af00      	add	r7, sp, #0
    c556:	6078      	str	r0, [r7, #4]
	return (cfg_desc + usb_cfg_desc_total_len(cfg_desc));
    c558:	6878      	ldr	r0, [r7, #4]
    c55a:	4b05      	ldr	r3, [pc, #20]	; (c570 <usb_cfg_desc_next+0x20>)
    c55c:	4798      	blx	r3
    c55e:	4603      	mov	r3, r0
    c560:	461a      	mov	r2, r3
    c562:	687b      	ldr	r3, [r7, #4]
    c564:	4413      	add	r3, r2
}
    c566:	4618      	mov	r0, r3
    c568:	3708      	adds	r7, #8
    c56a:	46bd      	mov	sp, r7
    c56c:	bd80      	pop	{r7, pc}
    c56e:	bf00      	nop
    c570:	0000c531 	.word	0x0000c531

0000c574 <usb_find_desc>:
#define _param_error_check(cond) ASSERT(cond)
#define _desc_len_check() ASSERT(usb_desc_len(desc) >= 2)
#endif

uint8_t *usb_find_desc(uint8_t *desc, uint8_t *eof, uint8_t type)
{
    c574:	b580      	push	{r7, lr}
    c576:	b084      	sub	sp, #16
    c578:	af00      	add	r7, sp, #0
    c57a:	60f8      	str	r0, [r7, #12]
    c57c:	60b9      	str	r1, [r7, #8]
    c57e:	4613      	mov	r3, r2
    c580:	71fb      	strb	r3, [r7, #7]
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    c582:	e015      	b.n	c5b0 <usb_find_desc+0x3c>
		_desc_len_check();
    c584:	68f8      	ldr	r0, [r7, #12]
    c586:	4b0f      	ldr	r3, [pc, #60]	; (c5c4 <usb_find_desc+0x50>)
    c588:	4798      	blx	r3
    c58a:	4603      	mov	r3, r0
    c58c:	2b01      	cmp	r3, #1
    c58e:	d801      	bhi.n	c594 <usb_find_desc+0x20>
    c590:	2300      	movs	r3, #0
    c592:	e012      	b.n	c5ba <usb_find_desc+0x46>
		if (type == usb_desc_type(desc)) {
    c594:	68f8      	ldr	r0, [r7, #12]
    c596:	4b0c      	ldr	r3, [pc, #48]	; (c5c8 <usb_find_desc+0x54>)
    c598:	4798      	blx	r3
    c59a:	4603      	mov	r3, r0
    c59c:	461a      	mov	r2, r3
    c59e:	79fb      	ldrb	r3, [r7, #7]
    c5a0:	4293      	cmp	r3, r2
    c5a2:	d101      	bne.n	c5a8 <usb_find_desc+0x34>
			return desc;
    c5a4:	68fb      	ldr	r3, [r7, #12]
    c5a6:	e008      	b.n	c5ba <usb_find_desc+0x46>
		}
		desc = usb_desc_next(desc);
    c5a8:	68f8      	ldr	r0, [r7, #12]
    c5aa:	4b08      	ldr	r3, [pc, #32]	; (c5cc <usb_find_desc+0x58>)
    c5ac:	4798      	blx	r3
    c5ae:	60f8      	str	r0, [r7, #12]
	while (desc < eof) {
    c5b0:	68fa      	ldr	r2, [r7, #12]
    c5b2:	68bb      	ldr	r3, [r7, #8]
    c5b4:	429a      	cmp	r2, r3
    c5b6:	d3e5      	bcc.n	c584 <usb_find_desc+0x10>
	}
	return NULL;
    c5b8:	2300      	movs	r3, #0
}
    c5ba:	4618      	mov	r0, r3
    c5bc:	3710      	adds	r7, #16
    c5be:	46bd      	mov	sp, r7
    c5c0:	bd80      	pop	{r7, pc}
    c5c2:	bf00      	nop
    c5c4:	0000c4db 	.word	0x0000c4db
    c5c8:	0000c4f3 	.word	0x0000c4f3
    c5cc:	0000c50d 	.word	0x0000c50d

0000c5d0 <usb_find_ep_desc>:
	}
	return eof;
}

uint8_t *usb_find_ep_desc(uint8_t *desc, uint8_t *eof)
{
    c5d0:	b580      	push	{r7, lr}
    c5d2:	b082      	sub	sp, #8
    c5d4:	af00      	add	r7, sp, #0
    c5d6:	6078      	str	r0, [r7, #4]
    c5d8:	6039      	str	r1, [r7, #0]
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    c5da:	e019      	b.n	c610 <usb_find_ep_desc+0x40>
		_desc_len_check();
    c5dc:	6878      	ldr	r0, [r7, #4]
    c5de:	4b12      	ldr	r3, [pc, #72]	; (c628 <usb_find_ep_desc+0x58>)
    c5e0:	4798      	blx	r3
    c5e2:	4603      	mov	r3, r0
    c5e4:	2b01      	cmp	r3, #1
    c5e6:	d801      	bhi.n	c5ec <usb_find_ep_desc+0x1c>
    c5e8:	2300      	movs	r3, #0
    c5ea:	e018      	b.n	c61e <usb_find_ep_desc+0x4e>
		if (USB_DT_INTERFACE == usb_desc_type(desc)) {
    c5ec:	6878      	ldr	r0, [r7, #4]
    c5ee:	4b0f      	ldr	r3, [pc, #60]	; (c62c <usb_find_ep_desc+0x5c>)
    c5f0:	4798      	blx	r3
    c5f2:	4603      	mov	r3, r0
    c5f4:	2b04      	cmp	r3, #4
    c5f6:	d010      	beq.n	c61a <usb_find_ep_desc+0x4a>
			break;
		}
		if (USB_DT_ENDPOINT == usb_desc_type(desc)) {
    c5f8:	6878      	ldr	r0, [r7, #4]
    c5fa:	4b0c      	ldr	r3, [pc, #48]	; (c62c <usb_find_ep_desc+0x5c>)
    c5fc:	4798      	blx	r3
    c5fe:	4603      	mov	r3, r0
    c600:	2b05      	cmp	r3, #5
    c602:	d101      	bne.n	c608 <usb_find_ep_desc+0x38>
			return desc;
    c604:	687b      	ldr	r3, [r7, #4]
    c606:	e00a      	b.n	c61e <usb_find_ep_desc+0x4e>
		}
		desc = usb_desc_next(desc);
    c608:	6878      	ldr	r0, [r7, #4]
    c60a:	4b09      	ldr	r3, [pc, #36]	; (c630 <usb_find_ep_desc+0x60>)
    c60c:	4798      	blx	r3
    c60e:	6078      	str	r0, [r7, #4]
	while (desc < eof) {
    c610:	687a      	ldr	r2, [r7, #4]
    c612:	683b      	ldr	r3, [r7, #0]
    c614:	429a      	cmp	r2, r3
    c616:	d3e1      	bcc.n	c5dc <usb_find_ep_desc+0xc>
    c618:	e000      	b.n	c61c <usb_find_ep_desc+0x4c>
			break;
    c61a:	bf00      	nop
	}
	return NULL;
    c61c:	2300      	movs	r3, #0
}
    c61e:	4618      	mov	r0, r3
    c620:	3708      	adds	r7, #8
    c622:	46bd      	mov	sp, r7
    c624:	bd80      	pop	{r7, pc}
    c626:	bf00      	nop
    c628:	0000c4db 	.word	0x0000c4db
    c62c:	0000c4f3 	.word	0x0000c4f3
    c630:	0000c50d 	.word	0x0000c50d

0000c634 <usb_find_cfg_desc>:

uint8_t *usb_find_cfg_desc(uint8_t *desc, uint8_t *eof, uint8_t cfg_value)
{
    c634:	b580      	push	{r7, lr}
    c636:	b084      	sub	sp, #16
    c638:	af00      	add	r7, sp, #0
    c63a:	60f8      	str	r0, [r7, #12]
    c63c:	60b9      	str	r1, [r7, #8]
    c63e:	4613      	mov	r3, r2
    c640:	71fb      	strb	r3, [r7, #7]
	_param_error_check(desc && eof && (desc < eof));

	desc = usb_find_desc(desc, eof, USB_DT_CONFIG);
    c642:	2202      	movs	r2, #2
    c644:	68b9      	ldr	r1, [r7, #8]
    c646:	68f8      	ldr	r0, [r7, #12]
    c648:	4b15      	ldr	r3, [pc, #84]	; (c6a0 <usb_find_cfg_desc+0x6c>)
    c64a:	4798      	blx	r3
    c64c:	60f8      	str	r0, [r7, #12]
	if (!desc) {
    c64e:	68fb      	ldr	r3, [r7, #12]
    c650:	2b00      	cmp	r3, #0
    c652:	d11a      	bne.n	c68a <usb_find_cfg_desc+0x56>
		return NULL;
    c654:	2300      	movs	r3, #0
    c656:	e01f      	b.n	c698 <usb_find_cfg_desc+0x64>
	}
	while (desc < eof) {
		_desc_len_check();
    c658:	68f8      	ldr	r0, [r7, #12]
    c65a:	4b12      	ldr	r3, [pc, #72]	; (c6a4 <usb_find_cfg_desc+0x70>)
    c65c:	4798      	blx	r3
    c65e:	4603      	mov	r3, r0
    c660:	2b01      	cmp	r3, #1
    c662:	d801      	bhi.n	c668 <usb_find_cfg_desc+0x34>
    c664:	2300      	movs	r3, #0
    c666:	e017      	b.n	c698 <usb_find_cfg_desc+0x64>
		if (desc[1] != USB_DT_CONFIG) {
    c668:	68fb      	ldr	r3, [r7, #12]
    c66a:	3301      	adds	r3, #1
    c66c:	781b      	ldrb	r3, [r3, #0]
    c66e:	2b02      	cmp	r3, #2
    c670:	d110      	bne.n	c694 <usb_find_cfg_desc+0x60>
			break;
		}
		if (desc[5] == cfg_value) {
    c672:	68fb      	ldr	r3, [r7, #12]
    c674:	3305      	adds	r3, #5
    c676:	781b      	ldrb	r3, [r3, #0]
    c678:	79fa      	ldrb	r2, [r7, #7]
    c67a:	429a      	cmp	r2, r3
    c67c:	d101      	bne.n	c682 <usb_find_cfg_desc+0x4e>
			return desc;
    c67e:	68fb      	ldr	r3, [r7, #12]
    c680:	e00a      	b.n	c698 <usb_find_cfg_desc+0x64>
		}
		desc = usb_cfg_desc_next(desc);
    c682:	68f8      	ldr	r0, [r7, #12]
    c684:	4b08      	ldr	r3, [pc, #32]	; (c6a8 <usb_find_cfg_desc+0x74>)
    c686:	4798      	blx	r3
    c688:	60f8      	str	r0, [r7, #12]
	while (desc < eof) {
    c68a:	68fa      	ldr	r2, [r7, #12]
    c68c:	68bb      	ldr	r3, [r7, #8]
    c68e:	429a      	cmp	r2, r3
    c690:	d3e2      	bcc.n	c658 <usb_find_cfg_desc+0x24>
    c692:	e000      	b.n	c696 <usb_find_cfg_desc+0x62>
			break;
    c694:	bf00      	nop
	}
	return NULL;
    c696:	2300      	movs	r3, #0
}
    c698:	4618      	mov	r0, r3
    c69a:	3710      	adds	r7, #16
    c69c:	46bd      	mov	sp, r7
    c69e:	bd80      	pop	{r7, pc}
    c6a0:	0000c575 	.word	0x0000c575
    c6a4:	0000c4db 	.word	0x0000c4db
    c6a8:	0000c551 	.word	0x0000c551

0000c6ac <usb_find_str_desc>:
	}
	return NULL;
}

uint8_t *usb_find_str_desc(uint8_t *desc, uint8_t *eof, uint8_t str_index)
{
    c6ac:	b580      	push	{r7, lr}
    c6ae:	b086      	sub	sp, #24
    c6b0:	af00      	add	r7, sp, #0
    c6b2:	60f8      	str	r0, [r7, #12]
    c6b4:	60b9      	str	r1, [r7, #8]
    c6b6:	4613      	mov	r3, r2
    c6b8:	71fb      	strb	r3, [r7, #7]
	uint8_t i;

	_param_error_check(desc && eof && (desc < eof));

	for (i = 0; desc < eof;) {
    c6ba:	2300      	movs	r3, #0
    c6bc:	75fb      	strb	r3, [r7, #23]
    c6be:	e020      	b.n	c702 <usb_find_str_desc+0x56>
		desc = usb_find_desc(desc, eof, USB_DT_STRING);
    c6c0:	2203      	movs	r2, #3
    c6c2:	68b9      	ldr	r1, [r7, #8]
    c6c4:	68f8      	ldr	r0, [r7, #12]
    c6c6:	4b13      	ldr	r3, [pc, #76]	; (c714 <usb_find_str_desc+0x68>)
    c6c8:	4798      	blx	r3
    c6ca:	60f8      	str	r0, [r7, #12]
		if (desc) {
    c6cc:	68fb      	ldr	r3, [r7, #12]
    c6ce:	2b00      	cmp	r3, #0
    c6d0:	d015      	beq.n	c6fe <usb_find_str_desc+0x52>
			_desc_len_check();
    c6d2:	68f8      	ldr	r0, [r7, #12]
    c6d4:	4b10      	ldr	r3, [pc, #64]	; (c718 <usb_find_str_desc+0x6c>)
    c6d6:	4798      	blx	r3
    c6d8:	4603      	mov	r3, r0
    c6da:	2b01      	cmp	r3, #1
    c6dc:	d801      	bhi.n	c6e2 <usb_find_str_desc+0x36>
    c6de:	2300      	movs	r3, #0
    c6e0:	e014      	b.n	c70c <usb_find_str_desc+0x60>
			if (i == str_index) {
    c6e2:	7dfa      	ldrb	r2, [r7, #23]
    c6e4:	79fb      	ldrb	r3, [r7, #7]
    c6e6:	429a      	cmp	r2, r3
    c6e8:	d101      	bne.n	c6ee <usb_find_str_desc+0x42>
				return desc;
    c6ea:	68fb      	ldr	r3, [r7, #12]
    c6ec:	e00e      	b.n	c70c <usb_find_str_desc+0x60>
			}
			i++;
    c6ee:	7dfb      	ldrb	r3, [r7, #23]
    c6f0:	3301      	adds	r3, #1
    c6f2:	75fb      	strb	r3, [r7, #23]
			desc = usb_desc_next(desc);
    c6f4:	68f8      	ldr	r0, [r7, #12]
    c6f6:	4b09      	ldr	r3, [pc, #36]	; (c71c <usb_find_str_desc+0x70>)
    c6f8:	4798      	blx	r3
    c6fa:	60f8      	str	r0, [r7, #12]
    c6fc:	e001      	b.n	c702 <usb_find_str_desc+0x56>
		} else {
			return NULL;
    c6fe:	2300      	movs	r3, #0
    c700:	e004      	b.n	c70c <usb_find_str_desc+0x60>
	for (i = 0; desc < eof;) {
    c702:	68fa      	ldr	r2, [r7, #12]
    c704:	68bb      	ldr	r3, [r7, #8]
    c706:	429a      	cmp	r2, r3
    c708:	d3da      	bcc.n	c6c0 <usb_find_str_desc+0x14>
		}
	}
	return NULL;
    c70a:	2300      	movs	r3, #0
}
    c70c:	4618      	mov	r0, r3
    c70e:	3718      	adds	r7, #24
    c710:	46bd      	mov	sp, r7
    c712:	bd80      	pop	{r7, pc}
    c714:	0000c575 	.word	0x0000c575
    c718:	0000c4db 	.word	0x0000c4db
    c71c:	0000c50d 	.word	0x0000c50d

0000c720 <__aeabi_atexit>:
    c720:	460b      	mov	r3, r1
    c722:	4601      	mov	r1, r0
    c724:	4618      	mov	r0, r3
    c726:	f000 b801 	b.w	c72c <__cxa_atexit>
    c72a:	bf00      	nop

0000c72c <__cxa_atexit>:
    c72c:	4613      	mov	r3, r2
    c72e:	460a      	mov	r2, r1
    c730:	4601      	mov	r1, r0
    c732:	2002      	movs	r0, #2
    c734:	f000 b93e 	b.w	c9b4 <__register_exitproc>

0000c738 <ffs>:
    c738:	b140      	cbz	r0, c74c <ffs+0x14>
    c73a:	2300      	movs	r3, #0
    c73c:	fa40 f103 	asr.w	r1, r0, r3
    c740:	1c5a      	adds	r2, r3, #1
    c742:	07c9      	lsls	r1, r1, #31
    c744:	4613      	mov	r3, r2
    c746:	d5f9      	bpl.n	c73c <ffs+0x4>
    c748:	4610      	mov	r0, r2
    c74a:	4770      	bx	lr
    c74c:	4602      	mov	r2, r0
    c74e:	4610      	mov	r0, r2
    c750:	4770      	bx	lr
    c752:	bf00      	nop

0000c754 <__libc_init_array>:
    c754:	b570      	push	{r4, r5, r6, lr}
    c756:	4e0f      	ldr	r6, [pc, #60]	; (c794 <__libc_init_array+0x40>)
    c758:	4d0f      	ldr	r5, [pc, #60]	; (c798 <__libc_init_array+0x44>)
    c75a:	1b76      	subs	r6, r6, r5
    c75c:	10b6      	asrs	r6, r6, #2
    c75e:	bf18      	it	ne
    c760:	2400      	movne	r4, #0
    c762:	d005      	beq.n	c770 <__libc_init_array+0x1c>
    c764:	3401      	adds	r4, #1
    c766:	f855 3b04 	ldr.w	r3, [r5], #4
    c76a:	4798      	blx	r3
    c76c:	42a6      	cmp	r6, r4
    c76e:	d1f9      	bne.n	c764 <__libc_init_array+0x10>
    c770:	4e0a      	ldr	r6, [pc, #40]	; (c79c <__libc_init_array+0x48>)
    c772:	4d0b      	ldr	r5, [pc, #44]	; (c7a0 <__libc_init_array+0x4c>)
    c774:	1b76      	subs	r6, r6, r5
    c776:	f000 fbff 	bl	cf78 <_init>
    c77a:	10b6      	asrs	r6, r6, #2
    c77c:	bf18      	it	ne
    c77e:	2400      	movne	r4, #0
    c780:	d006      	beq.n	c790 <__libc_init_array+0x3c>
    c782:	3401      	adds	r4, #1
    c784:	f855 3b04 	ldr.w	r3, [r5], #4
    c788:	4798      	blx	r3
    c78a:	42a6      	cmp	r6, r4
    c78c:	d1f9      	bne.n	c782 <__libc_init_array+0x2e>
    c78e:	bd70      	pop	{r4, r5, r6, pc}
    c790:	bd70      	pop	{r4, r5, r6, pc}
    c792:	bf00      	nop
    c794:	0000cf84 	.word	0x0000cf84
    c798:	0000cf84 	.word	0x0000cf84
    c79c:	0000cf90 	.word	0x0000cf90
    c7a0:	0000cf84 	.word	0x0000cf84

0000c7a4 <memcpy>:
    c7a4:	4684      	mov	ip, r0
    c7a6:	ea41 0300 	orr.w	r3, r1, r0
    c7aa:	f013 0303 	ands.w	r3, r3, #3
    c7ae:	d16d      	bne.n	c88c <memcpy+0xe8>
    c7b0:	3a40      	subs	r2, #64	; 0x40
    c7b2:	d341      	bcc.n	c838 <memcpy+0x94>
    c7b4:	f851 3b04 	ldr.w	r3, [r1], #4
    c7b8:	f840 3b04 	str.w	r3, [r0], #4
    c7bc:	f851 3b04 	ldr.w	r3, [r1], #4
    c7c0:	f840 3b04 	str.w	r3, [r0], #4
    c7c4:	f851 3b04 	ldr.w	r3, [r1], #4
    c7c8:	f840 3b04 	str.w	r3, [r0], #4
    c7cc:	f851 3b04 	ldr.w	r3, [r1], #4
    c7d0:	f840 3b04 	str.w	r3, [r0], #4
    c7d4:	f851 3b04 	ldr.w	r3, [r1], #4
    c7d8:	f840 3b04 	str.w	r3, [r0], #4
    c7dc:	f851 3b04 	ldr.w	r3, [r1], #4
    c7e0:	f840 3b04 	str.w	r3, [r0], #4
    c7e4:	f851 3b04 	ldr.w	r3, [r1], #4
    c7e8:	f840 3b04 	str.w	r3, [r0], #4
    c7ec:	f851 3b04 	ldr.w	r3, [r1], #4
    c7f0:	f840 3b04 	str.w	r3, [r0], #4
    c7f4:	f851 3b04 	ldr.w	r3, [r1], #4
    c7f8:	f840 3b04 	str.w	r3, [r0], #4
    c7fc:	f851 3b04 	ldr.w	r3, [r1], #4
    c800:	f840 3b04 	str.w	r3, [r0], #4
    c804:	f851 3b04 	ldr.w	r3, [r1], #4
    c808:	f840 3b04 	str.w	r3, [r0], #4
    c80c:	f851 3b04 	ldr.w	r3, [r1], #4
    c810:	f840 3b04 	str.w	r3, [r0], #4
    c814:	f851 3b04 	ldr.w	r3, [r1], #4
    c818:	f840 3b04 	str.w	r3, [r0], #4
    c81c:	f851 3b04 	ldr.w	r3, [r1], #4
    c820:	f840 3b04 	str.w	r3, [r0], #4
    c824:	f851 3b04 	ldr.w	r3, [r1], #4
    c828:	f840 3b04 	str.w	r3, [r0], #4
    c82c:	f851 3b04 	ldr.w	r3, [r1], #4
    c830:	f840 3b04 	str.w	r3, [r0], #4
    c834:	3a40      	subs	r2, #64	; 0x40
    c836:	d2bd      	bcs.n	c7b4 <memcpy+0x10>
    c838:	3230      	adds	r2, #48	; 0x30
    c83a:	d311      	bcc.n	c860 <memcpy+0xbc>
    c83c:	f851 3b04 	ldr.w	r3, [r1], #4
    c840:	f840 3b04 	str.w	r3, [r0], #4
    c844:	f851 3b04 	ldr.w	r3, [r1], #4
    c848:	f840 3b04 	str.w	r3, [r0], #4
    c84c:	f851 3b04 	ldr.w	r3, [r1], #4
    c850:	f840 3b04 	str.w	r3, [r0], #4
    c854:	f851 3b04 	ldr.w	r3, [r1], #4
    c858:	f840 3b04 	str.w	r3, [r0], #4
    c85c:	3a10      	subs	r2, #16
    c85e:	d2ed      	bcs.n	c83c <memcpy+0x98>
    c860:	320c      	adds	r2, #12
    c862:	d305      	bcc.n	c870 <memcpy+0xcc>
    c864:	f851 3b04 	ldr.w	r3, [r1], #4
    c868:	f840 3b04 	str.w	r3, [r0], #4
    c86c:	3a04      	subs	r2, #4
    c86e:	d2f9      	bcs.n	c864 <memcpy+0xc0>
    c870:	3204      	adds	r2, #4
    c872:	d008      	beq.n	c886 <memcpy+0xe2>
    c874:	07d2      	lsls	r2, r2, #31
    c876:	bf1c      	itt	ne
    c878:	f811 3b01 	ldrbne.w	r3, [r1], #1
    c87c:	f800 3b01 	strbne.w	r3, [r0], #1
    c880:	d301      	bcc.n	c886 <memcpy+0xe2>
    c882:	880b      	ldrh	r3, [r1, #0]
    c884:	8003      	strh	r3, [r0, #0]
    c886:	4660      	mov	r0, ip
    c888:	4770      	bx	lr
    c88a:	bf00      	nop
    c88c:	2a08      	cmp	r2, #8
    c88e:	d313      	bcc.n	c8b8 <memcpy+0x114>
    c890:	078b      	lsls	r3, r1, #30
    c892:	d08d      	beq.n	c7b0 <memcpy+0xc>
    c894:	f010 0303 	ands.w	r3, r0, #3
    c898:	d08a      	beq.n	c7b0 <memcpy+0xc>
    c89a:	f1c3 0304 	rsb	r3, r3, #4
    c89e:	1ad2      	subs	r2, r2, r3
    c8a0:	07db      	lsls	r3, r3, #31
    c8a2:	bf1c      	itt	ne
    c8a4:	f811 3b01 	ldrbne.w	r3, [r1], #1
    c8a8:	f800 3b01 	strbne.w	r3, [r0], #1
    c8ac:	d380      	bcc.n	c7b0 <memcpy+0xc>
    c8ae:	f831 3b02 	ldrh.w	r3, [r1], #2
    c8b2:	f820 3b02 	strh.w	r3, [r0], #2
    c8b6:	e77b      	b.n	c7b0 <memcpy+0xc>
    c8b8:	3a04      	subs	r2, #4
    c8ba:	d3d9      	bcc.n	c870 <memcpy+0xcc>
    c8bc:	3a01      	subs	r2, #1
    c8be:	f811 3b01 	ldrb.w	r3, [r1], #1
    c8c2:	f800 3b01 	strb.w	r3, [r0], #1
    c8c6:	d2f9      	bcs.n	c8bc <memcpy+0x118>
    c8c8:	780b      	ldrb	r3, [r1, #0]
    c8ca:	7003      	strb	r3, [r0, #0]
    c8cc:	784b      	ldrb	r3, [r1, #1]
    c8ce:	7043      	strb	r3, [r0, #1]
    c8d0:	788b      	ldrb	r3, [r1, #2]
    c8d2:	7083      	strb	r3, [r0, #2]
    c8d4:	4660      	mov	r0, ip
    c8d6:	4770      	bx	lr

0000c8d8 <memset>:
    c8d8:	b470      	push	{r4, r5, r6}
    c8da:	0786      	lsls	r6, r0, #30
    c8dc:	d046      	beq.n	c96c <memset+0x94>
    c8de:	1e54      	subs	r4, r2, #1
    c8e0:	2a00      	cmp	r2, #0
    c8e2:	d041      	beq.n	c968 <memset+0x90>
    c8e4:	b2ca      	uxtb	r2, r1
    c8e6:	4603      	mov	r3, r0
    c8e8:	e002      	b.n	c8f0 <memset+0x18>
    c8ea:	f114 34ff 	adds.w	r4, r4, #4294967295
    c8ee:	d33b      	bcc.n	c968 <memset+0x90>
    c8f0:	f803 2b01 	strb.w	r2, [r3], #1
    c8f4:	079d      	lsls	r5, r3, #30
    c8f6:	d1f8      	bne.n	c8ea <memset+0x12>
    c8f8:	2c03      	cmp	r4, #3
    c8fa:	d92e      	bls.n	c95a <memset+0x82>
    c8fc:	b2cd      	uxtb	r5, r1
    c8fe:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
    c902:	2c0f      	cmp	r4, #15
    c904:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
    c908:	d919      	bls.n	c93e <memset+0x66>
    c90a:	f103 0210 	add.w	r2, r3, #16
    c90e:	4626      	mov	r6, r4
    c910:	3e10      	subs	r6, #16
    c912:	2e0f      	cmp	r6, #15
    c914:	f842 5c10 	str.w	r5, [r2, #-16]
    c918:	f842 5c0c 	str.w	r5, [r2, #-12]
    c91c:	f842 5c08 	str.w	r5, [r2, #-8]
    c920:	f842 5c04 	str.w	r5, [r2, #-4]
    c924:	f102 0210 	add.w	r2, r2, #16
    c928:	d8f2      	bhi.n	c910 <memset+0x38>
    c92a:	f1a4 0210 	sub.w	r2, r4, #16
    c92e:	f022 020f 	bic.w	r2, r2, #15
    c932:	f004 040f 	and.w	r4, r4, #15
    c936:	3210      	adds	r2, #16
    c938:	2c03      	cmp	r4, #3
    c93a:	4413      	add	r3, r2
    c93c:	d90d      	bls.n	c95a <memset+0x82>
    c93e:	461e      	mov	r6, r3
    c940:	4622      	mov	r2, r4
    c942:	3a04      	subs	r2, #4
    c944:	2a03      	cmp	r2, #3
    c946:	f846 5b04 	str.w	r5, [r6], #4
    c94a:	d8fa      	bhi.n	c942 <memset+0x6a>
    c94c:	1f22      	subs	r2, r4, #4
    c94e:	f022 0203 	bic.w	r2, r2, #3
    c952:	3204      	adds	r2, #4
    c954:	4413      	add	r3, r2
    c956:	f004 0403 	and.w	r4, r4, #3
    c95a:	b12c      	cbz	r4, c968 <memset+0x90>
    c95c:	b2c9      	uxtb	r1, r1
    c95e:	441c      	add	r4, r3
    c960:	f803 1b01 	strb.w	r1, [r3], #1
    c964:	429c      	cmp	r4, r3
    c966:	d1fb      	bne.n	c960 <memset+0x88>
    c968:	bc70      	pop	{r4, r5, r6}
    c96a:	4770      	bx	lr
    c96c:	4614      	mov	r4, r2
    c96e:	4603      	mov	r3, r0
    c970:	e7c2      	b.n	c8f8 <memset+0x20>
    c972:	bf00      	nop

0000c974 <rand>:
    c974:	b410      	push	{r4}
    c976:	4b0c      	ldr	r3, [pc, #48]	; (c9a8 <rand+0x34>)
    c978:	480c      	ldr	r0, [pc, #48]	; (c9ac <rand+0x38>)
    c97a:	6819      	ldr	r1, [r3, #0]
    c97c:	4c0c      	ldr	r4, [pc, #48]	; (c9b0 <rand+0x3c>)
    c97e:	f8d1 20a8 	ldr.w	r2, [r1, #168]	; 0xa8
    c982:	f8d1 30ac 	ldr.w	r3, [r1, #172]	; 0xac
    c986:	fb00 f002 	mul.w	r0, r0, r2
    c98a:	fb04 0003 	mla	r0, r4, r3, r0
    c98e:	fba2 2304 	umull	r2, r3, r2, r4
    c992:	4403      	add	r3, r0
    c994:	3201      	adds	r2, #1
    c996:	f143 0300 	adc.w	r3, r3, #0
    c99a:	e9c1 232a 	strd	r2, r3, [r1, #168]	; 0xa8
    c99e:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
    c9a2:	bc10      	pop	{r4}
    c9a4:	4770      	bx	lr
    c9a6:	bf00      	nop
    c9a8:	200000fc 	.word	0x200000fc
    c9ac:	5851f42d 	.word	0x5851f42d
    c9b0:	4c957f2d 	.word	0x4c957f2d

0000c9b4 <__register_exitproc>:
    c9b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    c9b8:	4d2c      	ldr	r5, [pc, #176]	; (ca6c <__register_exitproc+0xb8>)
    c9ba:	4606      	mov	r6, r0
    c9bc:	6828      	ldr	r0, [r5, #0]
    c9be:	4698      	mov	r8, r3
    c9c0:	460f      	mov	r7, r1
    c9c2:	4691      	mov	r9, r2
    c9c4:	f000 f882 	bl	cacc <__retarget_lock_acquire_recursive>
    c9c8:	4b29      	ldr	r3, [pc, #164]	; (ca70 <__register_exitproc+0xbc>)
    c9ca:	681c      	ldr	r4, [r3, #0]
    c9cc:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
    c9d0:	2b00      	cmp	r3, #0
    c9d2:	d03e      	beq.n	ca52 <__register_exitproc+0x9e>
    c9d4:	685a      	ldr	r2, [r3, #4]
    c9d6:	2a1f      	cmp	r2, #31
    c9d8:	dc1c      	bgt.n	ca14 <__register_exitproc+0x60>
    c9da:	f102 0e01 	add.w	lr, r2, #1
    c9de:	b176      	cbz	r6, c9fe <__register_exitproc+0x4a>
    c9e0:	eb03 0182 	add.w	r1, r3, r2, lsl #2
    c9e4:	2401      	movs	r4, #1
    c9e6:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
    c9ea:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
    c9ee:	4094      	lsls	r4, r2
    c9f0:	4320      	orrs	r0, r4
    c9f2:	2e02      	cmp	r6, #2
    c9f4:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
    c9f8:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
    c9fc:	d023      	beq.n	ca46 <__register_exitproc+0x92>
    c9fe:	3202      	adds	r2, #2
    ca00:	f8c3 e004 	str.w	lr, [r3, #4]
    ca04:	6828      	ldr	r0, [r5, #0]
    ca06:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
    ca0a:	f000 f861 	bl	cad0 <__retarget_lock_release_recursive>
    ca0e:	2000      	movs	r0, #0
    ca10:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    ca14:	4b17      	ldr	r3, [pc, #92]	; (ca74 <__register_exitproc+0xc0>)
    ca16:	b30b      	cbz	r3, ca5c <__register_exitproc+0xa8>
    ca18:	f44f 70c8 	mov.w	r0, #400	; 0x190
    ca1c:	f3af 8000 	nop.w
    ca20:	4603      	mov	r3, r0
    ca22:	b1d8      	cbz	r0, ca5c <__register_exitproc+0xa8>
    ca24:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
    ca28:	6002      	str	r2, [r0, #0]
    ca2a:	2100      	movs	r1, #0
    ca2c:	6041      	str	r1, [r0, #4]
    ca2e:	460a      	mov	r2, r1
    ca30:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
    ca34:	f04f 0e01 	mov.w	lr, #1
    ca38:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
    ca3c:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
    ca40:	2e00      	cmp	r6, #0
    ca42:	d0dc      	beq.n	c9fe <__register_exitproc+0x4a>
    ca44:	e7cc      	b.n	c9e0 <__register_exitproc+0x2c>
    ca46:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
    ca4a:	430c      	orrs	r4, r1
    ca4c:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
    ca50:	e7d5      	b.n	c9fe <__register_exitproc+0x4a>
    ca52:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
    ca56:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
    ca5a:	e7bb      	b.n	c9d4 <__register_exitproc+0x20>
    ca5c:	6828      	ldr	r0, [r5, #0]
    ca5e:	f000 f837 	bl	cad0 <__retarget_lock_release_recursive>
    ca62:	f04f 30ff 	mov.w	r0, #4294967295
    ca66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    ca6a:	bf00      	nop
    ca6c:	20000528 	.word	0x20000528
    ca70:	0000cf74 	.word	0x0000cf74
    ca74:	00000000 	.word	0x00000000

0000ca78 <register_fini>:
    ca78:	4b02      	ldr	r3, [pc, #8]	; (ca84 <register_fini+0xc>)
    ca7a:	b113      	cbz	r3, ca82 <register_fini+0xa>
    ca7c:	4802      	ldr	r0, [pc, #8]	; (ca88 <register_fini+0x10>)
    ca7e:	f000 b805 	b.w	ca8c <atexit>
    ca82:	4770      	bx	lr
    ca84:	00000000 	.word	0x00000000
    ca88:	0000ca99 	.word	0x0000ca99

0000ca8c <atexit>:
    ca8c:	2300      	movs	r3, #0
    ca8e:	4601      	mov	r1, r0
    ca90:	461a      	mov	r2, r3
    ca92:	4618      	mov	r0, r3
    ca94:	f7ff bf8e 	b.w	c9b4 <__register_exitproc>

0000ca98 <__libc_fini_array>:
    ca98:	b538      	push	{r3, r4, r5, lr}
    ca9a:	4c0a      	ldr	r4, [pc, #40]	; (cac4 <__libc_fini_array+0x2c>)
    ca9c:	4d0a      	ldr	r5, [pc, #40]	; (cac8 <__libc_fini_array+0x30>)
    ca9e:	1b64      	subs	r4, r4, r5
    caa0:	10a4      	asrs	r4, r4, #2
    caa2:	d00a      	beq.n	caba <__libc_fini_array+0x22>
    caa4:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
    caa8:	3b01      	subs	r3, #1
    caaa:	eb05 0583 	add.w	r5, r5, r3, lsl #2
    caae:	3c01      	subs	r4, #1
    cab0:	f855 3904 	ldr.w	r3, [r5], #-4
    cab4:	4798      	blx	r3
    cab6:	2c00      	cmp	r4, #0
    cab8:	d1f9      	bne.n	caae <__libc_fini_array+0x16>
    caba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    cabe:	f000 ba67 	b.w	cf90 <_fini>
    cac2:	bf00      	nop
    cac4:	0000cfa0 	.word	0x0000cfa0
    cac8:	0000cf9c 	.word	0x0000cf9c

0000cacc <__retarget_lock_acquire_recursive>:
    cacc:	4770      	bx	lr
    cace:	bf00      	nop

0000cad0 <__retarget_lock_release_recursive>:
    cad0:	4770      	bx	lr
    cad2:	bf00      	nop

0000cad4 <defaultPreferences>:
    cad4:	00fa 0000 0032 0000                         ....2...

0000cadc <defaultParameters>:
    cadc:	02ee 02bc 07d0 02ee 0320 07d0 e000 450d     ........ ......E
    caec:	de6a 400d 0000 4140 0000 429a 0000 40c0     j..@..@A...B...@
    cafc:	0000 4140 0000 42a4 0000 430c 0000 4302     ..@A...B...C...C
    cb0c:	d289 3e7e 8000 4404 8000 4404 0000 41a0     ..~>...D...D...A
    cb1c:	0000 41f0 0000 3f80 4000 451c 8000 453b     ...A...?.@.E..;E
    cb2c:	1f40 0000 1f40 0000 1f40 0000 1f40 0000     @...@...@...@...
    cb3c:	1388 0000 1388 0000 0064 0000 0064 0000     ........d...d...
    cb4c:	0000 4100 0000 428c 0000 0000 2e2e 682f     ...A...B....../h
    cb5c:	6c70 702f 726f 2f74 7068 5f6c 7067 6f69     pl/port/hpl_gpio
    cb6c:	625f 7361 2e65 0068 2e2e 682f 6c61 692f     _base.h.../hal/i
    cb7c:	636e 756c 6564 682f 6c61 775f 7464 682e     nclude/hal_wdt.h
    cb8c:	0000 0000 2e2e 682f 6c61 732f 6372 682f     ....../hal/src/h
    cb9c:	6c61 635f 6c61 6e65 6164 2e72 0063 0000     al_calendar.c...
    cbac:	2e2e 682f 6c61 732f 6372 682f 6c61 635f     ../hal/src/hal_c
    cbbc:	6e61 615f 7973 636e 632e 0000 2e2e 682f     an_async.c..../h
    cbcc:	6c61 732f 6372 682f 6c61 635f 6372 735f     al/src/hal_crc_s
    cbdc:	6e79 2e63 0063 0000 2e2e 682f 6c61 732f     ync.c...../hal/s
    cbec:	6372 682f 6c61 695f 6332 6d5f 615f 7973     rc/hal_i2c_m_asy
    cbfc:	636e 632e 0000 0000 2e2e 682f 6c61 732f     nc.c....../hal/s
    cc0c:	6372 682f 6c61 695f 2e6f 0063 2e2e 682f     rc/hal_io.c.../h
    cc1c:	6c61 732f 6372 682f 6c61 705f 6d77 632e     al/src/hal_pwm.c
    cc2c:	0000 0000 2e2e 682f 6c61 732f 6372 682f     ....../hal/src/h
    cc3c:	6c61 715f 7073 5f69 7973 636e 632e 0000     al_qspi_sync.c..
    cc4c:	2e2e 682f 6c61 732f 6372 682f 6c61 735f     ../hal/src/hal_s
    cc5c:	6970 6d5f 615f 7973 636e 632e 0000 0000     pi_m_async.c....
    cc6c:	2e2e 682f 6c61 732f 6372 682f 6c61 735f     ../hal/src/hal_s
    cc7c:	6970 6d5f 735f 6e79 2e63 0063 2e2e 682f     pi_m_sync.c.../h
    cc8c:	6c61 732f 6372 682f 6c61 745f 6d69 7265     al/src/hal_timer
    cc9c:	632e 0000 2e2e 682f 6c61 752f 6974 736c     .c..../hal/utils
    ccac:	732f 6372 752f 6974 736c 6c5f 7369 2e74     /src/utils_list.
    ccbc:	0063 0000                                   c...

0000ccc0 <_map>:
    ccc0:	0004 0000 0004 0000 0005 0000 0005 0000     ................
    ccd0:	0006 0000 0056 0000 0007 0000 0057 0000     ....V.......W...
    cce0:	2e2e 682f 6c70 652f 6369 682f 6c70 655f     ../hpl/eic/hpl_e
    ccf0:	6369 632e 0000 0000                         ic.c....

0000ccf8 <user_mux_confs>:
    ccf8:	0100 0000 0000 0000 0000 0000 0000 0000     ................
	...

0000cd3c <channel_confs>:
    cd3c:	065e 0000 0000 0000 0000 0000 0000 0000     ^...............
	...

0000cd7c <interrupt_cfg>:
	...
    cdfc:	2e2e 682f 6c70 712f 7073 2f69 7068 5f6c     ../hpl/qspi/hpl_
    ce0c:	7371 6970 632e 0000 2e2e 682f 6c70 722f     qspi.c..../hpl/r
    ce1c:	6374 682f 6c70 725f 6374 632e 0000 0000     tc/hpl_rtc.c....
    ce2c:	2e2e 682f 6c70 732f 7265 6f63 2f6d 7068     ../hpl/sercom/hp
    ce3c:	5f6c 6573 6372 6d6f 632e 0000 3000 4000     l_sercom.c...0.@
    ce4c:	3400 4000 2000 4101 4000 4101 0000 4300     .4.@. .A.@.A...C
    ce5c:	0400 4300 0800 4300 0c00 4300               ...C...C...C

0000ce68 <sercomspi_regs>:
    ce68:	000c 0020 0000 0002 0000 0000 00fe 01ff     .. .............
    ce78:	0c00 2000 0000 0200 0000 0000 fe00 ff00     ... ............
    ce88:	0101 000c 0020 0000 0002 0000 0000 0002     .... ...........
    ce98:	01ff 0006 2e2e 682f 6c70 742f 2f63 7068     ....../hpl/tc/hp
    cea8:	5f6c 6374 632e 0000 3800 4000 3c00 4000     l_tc.c...8.@.<.@
    ceb8:	a000 4101 c000 4101 1400 4200 1800 4200     ...A...A...B...B
    cec8:	1400 4300 1800 4300                         ...C...C

0000ced0 <_usb_ep_cfgs>:
    ced0:	07a0 2000 0000 0000 0040 0000 07e0 2000     ... ....@...... 
    cee0:	0820 2000 0040 0040 0860 2000 08a0 2000      .. @.@.`.. ... 
    cef0:	0040 0040 08e0 2000 0920 2000 0040 0040     @.@....  .. @.@.
    cf00:	0960 2000 09a0 2000 0040 0040 0804 0000     `.. ... @.@.....
    cf10:	4a25 0000 2e2e 682f 6c70 772f 7464 682f     %J..../hpl/wdt/h
    cf20:	6c70 775f 7464 632e 0000 0000 2e2e 682f     pl_wdt.c....../h
    cf30:	6c70 702f 726f 2f74 7068 5f6c 7067 6f69     pl/port/hpl_gpio
    cf40:	625f 7361 2e65 0068                         _base.h.

0000cf48 <n25q256a_interface>:
    cf48:	add9 0000 ae7d 0000 af8d 0000 b145 0000     ....}.......E...
    cf58:	b1d5 0000 2e2e 752f 6273 642f 7665 6369     ....../usb/devic
    cf68:	2f65 7375 6462 2e63 0063 0000               e/usbdc.c...

0000cf74 <_global_impure_ptr>:
    cf74:	0100 2000                                   ... 

0000cf78 <_init>:
    cf78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    cf7a:	bf00      	nop
    cf7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    cf7e:	bc08      	pop	{r3}
    cf80:	469e      	mov	lr, r3
    cf82:	4770      	bx	lr

0000cf84 <__init_array_start>:
    cf84:	0000ca79 	.word	0x0000ca79

0000cf88 <__frame_dummy_init_array_entry>:
    cf88:	00000289 000007bd                       ........

0000cf90 <_fini>:
    cf90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    cf92:	bf00      	nop
    cf94:	bcf8      	pop	{r3, r4, r5, r6, r7}
    cf96:	bc08      	pop	{r3}
    cf98:	469e      	mov	lr, r3
    cf9a:	4770      	bx	lr

0000cf9c <__fini_array_start>:
    cf9c:	00000265 	.word	0x00000265
