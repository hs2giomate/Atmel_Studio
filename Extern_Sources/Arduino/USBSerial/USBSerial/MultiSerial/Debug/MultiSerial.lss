
MultiSerial.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002d40  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000a0  20000000  00002d40  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000ae8  200000a0  00002de0  000200a0  2**2
                  ALLOC
  3 .ARM.attributes 00000028  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY
  4 .comment      00000059  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY
  5 .debug_info   00054038  00000000  00000000  00020121  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00005f52  00000000  00000000  00074159  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_loc    000077c8  00000000  00000000  0007a0ab  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_aranges 00000910  00000000  00000000  00081873  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00001388  00000000  00000000  00082183  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_macro  0001cb60  00000000  00000000  0008350b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000d20c  00000000  00000000  000a006b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00081221  00000000  00000000  000ad277  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  000017f0  00000000  00000000  0012e498  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:

void *operator new(size_t size) {
  return malloc(size);
}

void *operator new[](size_t size) {
       0:	00 80 00 20 b9 01 00 00 a1 01 00 00 a1 01 00 00     ... ............
	...
      2c:	a1 01 00 00 00 00 00 00 00 00 00 00 a1 01 00 00     ................
      3c:	0d 02 00 00 a1 01 00 00 a1 01 00 00 a1 01 00 00     ................
      4c:	a1 01 00 00 a1 01 00 00 a1 01 00 00 a1 01 00 00     ................
      5c:	a5 01 00 00 a1 01 00 00 91 21 00 00 a1 01 00 00     .........!......
      6c:	a1 01 00 00 a1 01 00 00 a1 01 00 00 a1 21 00 00     .............!..
      7c:	a1 01 00 00 a1 01 00 00 a1 01 00 00 a1 01 00 00     ................
      8c:	a1 01 00 00 00 00 00 00 a1 01 00 00 a1 01 00 00     ................
      9c:	a1 01 00 00 a1 01 00 00 a1 01 00 00 a1 01 00 00     ................
      ac:	a1 01 00 00 00 00 00 00                             ........

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	200000a0 	.word	0x200000a0
      d4:	00000000 	.word	0x00000000
      d8:	00002d3c 	.word	0x00002d3c

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	200000a4 	.word	0x200000a4
     108:	00002d3c 	.word	0x00002d3c
     10c:	20000090 	.word	0x20000090
     110:	00000000 	.word	0x00000000

00000114 <setup>:

  This example code is in the public domain.
*/


void setup() {
     114:	b510      	push	{r4, lr}
  // initialize both serial ports:
  Serial.begin(9600);
     116:	2496      	movs	r4, #150	; 0x96
     118:	01a4      	lsls	r4, r4, #6
     11a:	0021      	movs	r1, r4
     11c:	4805      	ldr	r0, [pc, #20]	; (134 <setup+0x20>)
     11e:	f000 f9fb 	bl	518 <_ZN4Uart5beginEm>
  Serial1.begin(9600);
     122:	0021      	movs	r1, r4
     124:	4804      	ldr	r0, [pc, #16]	; (138 <setup+0x24>)
     126:	f000 f9f7 	bl	518 <_ZN4Uart5beginEm>
  SerialUSB.begin(9600);
     12a:	0021      	movs	r1, r4
     12c:	4803      	ldr	r0, [pc, #12]	; (13c <setup+0x28>)
     12e:	f000 fdfb 	bl	d28 <_ZN7Serial_5beginEm>
}
     132:	bd10      	pop	{r4, pc}
     134:	200006e8 	.word	0x200006e8
     138:	20000924 	.word	0x20000924
     13c:	200000c4 	.word	0x200000c4

00000140 <loop>:

void loop() {
     140:	b570      	push	{r4, r5, r6, lr}
  // read from port 1, send to port 0:
  if (Serial1.available()) {
     142:	4d14      	ldr	r5, [pc, #80]	; (194 <loop+0x54>)
     144:	0028      	movs	r0, r5
     146:	f000 fb0b 	bl	760 <_ZN4Uart9availableEv>
     14a:	4c13      	ldr	r4, [pc, #76]	; (198 <loop+0x58>)
     14c:	2800      	cmp	r0, #0
     14e:	d006      	beq.n	15e <loop+0x1e>
    int inByte = Serial1.read();
     150:	0028      	movs	r0, r5
     152:	f000 fbe1 	bl	918 <_ZN4Uart4readEv>
    Serial.write(inByte);
     156:	b2c1      	uxtb	r1, r0
     158:	0020      	movs	r0, r4
     15a:	f000 fb83 	bl	864 <_ZN4Uart5writeEh>
  }

  // read from port 0, send to port 1:
  if (Serial.available()) {
     15e:	0020      	movs	r0, r4
     160:	f000 fafe 	bl	760 <_ZN4Uart9availableEv>
     164:	2800      	cmp	r0, #0
     166:	d006      	beq.n	176 <loop+0x36>
    int inByte = Serial.read();
     168:	0020      	movs	r0, r4
     16a:	f000 fbd5 	bl	918 <_ZN4Uart4readEv>
    Serial1.write(inByte);
     16e:	b2c1      	uxtb	r1, r0
     170:	0028      	movs	r0, r5
     172:	f000 fb77 	bl	864 <_ZN4Uart5writeEh>
  }

  if (SerialUSB.available()) {
     176:	4d09      	ldr	r5, [pc, #36]	; (19c <loop+0x5c>)
     178:	0028      	movs	r0, r5
     17a:	f000 fd47 	bl	c0c <_ZN7Serial_9availableEv>
     17e:	2800      	cmp	r0, #0
     180:	d006      	beq.n	190 <loop+0x50>
    int inByte = Serial.read();
     182:	0020      	movs	r0, r4
     184:	f000 fbc8 	bl	918 <_ZN4Uart4readEv>
    
    SerialUSB.write(inByte);
     188:	b2c1      	uxtb	r1, r0
     18a:	0028      	movs	r0, r5
     18c:	f000 fc3c 	bl	a08 <_ZN7Serial_5writeEh>
  }
}
     190:	bd70      	pop	{r4, r5, r6, pc}
     192:	46c0      	nop			; (mov r8, r8)
     194:	20000924 	.word	0x20000924
     198:	200006e8 	.word	0x200006e8
     19c:	200000c4 	.word	0x200000c4

000001a0 <Dummy_Handler>:

/* Default empty handler */
void Dummy_Handler(void)
{
#if defined DEBUG
  __BKPT(3);
     1a0:	be03      	bkpt	0x0003
     1a2:	e7fe      	b.n	1a2 <Dummy_Handler+0x2>

000001a4 <USB_Handler>:

static void (*usb_isr)(void) = NULL;

void USB_Handler(void)
{
  if (usb_isr)
     1a4:	4b03      	ldr	r3, [pc, #12]	; (1b4 <USB_Handler+0x10>)
{
     1a6:	b510      	push	{r4, lr}
  if (usb_isr)
     1a8:	681b      	ldr	r3, [r3, #0]
     1aa:	2b00      	cmp	r3, #0
     1ac:	d000      	beq.n	1b0 <USB_Handler+0xc>
    usb_isr();
     1ae:	4798      	blx	r3
}
     1b0:	bd10      	pop	{r4, pc}
     1b2:	46c0      	nop			; (mov r8, r8)
     1b4:	200000bc 	.word	0x200000bc

000001b8 <Reset_Handler>:
{
     1b8:	b570      	push	{r4, r5, r6, lr}
  if ((&__data_start__ != &__data_end__) && (pSrc != pDest)) {
     1ba:	490f      	ldr	r1, [pc, #60]	; (1f8 <Reset_Handler+0x40>)
     1bc:	4c0f      	ldr	r4, [pc, #60]	; (1fc <Reset_Handler+0x44>)
     1be:	42a1      	cmp	r1, r4
     1c0:	d104      	bne.n	1cc <Reset_Handler+0x14>
  SystemInit();
     1c2:	f000 f8f7 	bl	3b4 <SystemInit>
  main();
     1c6:	f000 f887 	bl	2d8 <main>
     1ca:	e7fe      	b.n	1ca <Reset_Handler+0x12>
  if ((&__data_start__ != &__data_end__) && (pSrc != pDest)) {
     1cc:	4d0c      	ldr	r5, [pc, #48]	; (200 <Reset_Handler+0x48>)
     1ce:	2300      	movs	r3, #0
     1d0:	428d      	cmp	r5, r1
     1d2:	d0f6      	beq.n	1c2 <Reset_Handler+0xa>
     1d4:	18ca      	adds	r2, r1, r3
     1d6:	18e8      	adds	r0, r5, r3
    for (; pDest < &__data_end__; pDest++, pSrc++)
     1d8:	42a2      	cmp	r2, r4
     1da:	d305      	bcc.n	1e8 <Reset_Handler+0x30>
  if ((&__data_start__ != &__data_end__) && (pSrc != pDest)) {
     1dc:	4290      	cmp	r0, r2
     1de:	d0f0      	beq.n	1c2 <Reset_Handler+0xa>
     1e0:	4b08      	ldr	r3, [pc, #32]	; (204 <Reset_Handler+0x4c>)
    for (pDest = &__bss_start__; pDest < &__bss_end__; pDest++)
     1e2:	4909      	ldr	r1, [pc, #36]	; (208 <Reset_Handler+0x50>)
      *pDest = 0;
     1e4:	2200      	movs	r2, #0
     1e6:	e004      	b.n	1f2 <Reset_Handler+0x3a>
      *pDest = *pSrc;
     1e8:	6800      	ldr	r0, [r0, #0]
     1ea:	3304      	adds	r3, #4
     1ec:	6010      	str	r0, [r2, #0]
     1ee:	e7f1      	b.n	1d4 <Reset_Handler+0x1c>
      *pDest = 0;
     1f0:	c304      	stmia	r3!, {r2}
    for (pDest = &__bss_start__; pDest < &__bss_end__; pDest++)
     1f2:	428b      	cmp	r3, r1
     1f4:	d3fc      	bcc.n	1f0 <Reset_Handler+0x38>
     1f6:	e7e4      	b.n	1c2 <Reset_Handler+0xa>
     1f8:	20000000 	.word	0x20000000
     1fc:	200000a0 	.word	0x200000a0
     200:	00002d40 	.word	0x00002d40
     204:	200000a0 	.word	0x200000a0
     208:	20000b88 	.word	0x20000b88

0000020c <SysTick_Handler>:
{
     20c:	b510      	push	{r4, lr}
  if (sysTickHook())
     20e:	f000 f860 	bl	2d2 <sysTickHook>
     212:	2800      	cmp	r0, #0
     214:	d101      	bne.n	21a <SysTick_Handler+0xe>
  SysTick_DefaultHandler();
     216:	f000 f851 	bl	2bc <SysTick_DefaultHandler>
}
     21a:	bd10      	pop	{r4, pc}

0000021c <USB_SetHandler>:

void USB_SetHandler(void (*new_usb_isr)(void))
{
  usb_isr = new_usb_isr;
     21c:	4b01      	ldr	r3, [pc, #4]	; (224 <USB_SetHandler+0x8>)
     21e:	6018      	str	r0, [r3, #0]
}
     220:	4770      	bx	lr
     222:	46c0      	nop			; (mov r8, r8)
     224:	200000bc 	.word	0x200000bc

00000228 <micros>:
// Interrupt-compatible version of micros
// Theory: repeatedly take readings of SysTick counter, millis counter and SysTick interrupt pending flag.
// When it appears that millis counter and pending is stable and SysTick hasn't rolled over, use these
// values to calculate micros. If there is a pending SysTick, add one to the millis counter in the calculation.
unsigned long micros( void )
{
     228:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint32_t pend, pend2;
  uint32_t count, count2;

  ticks2  = SysTick->VAL;
  pend2   = !!(SCB->ICSR & SCB_ICSR_PENDSTSET_Msk)  ;
  count2  = _ulTickCount ;
     22a:	4813      	ldr	r0, [pc, #76]	; (278 <micros+0x50>)
  pend2   = !!(SCB->ICSR & SCB_ICSR_PENDSTSET_Msk)  ;
     22c:	2201      	movs	r2, #1
  count2  = _ulTickCount ;
     22e:	4684      	mov	ip, r0
  ticks2  = SysTick->VAL;
     230:	4912      	ldr	r1, [pc, #72]	; (27c <micros+0x54>)
  pend2   = !!(SCB->ICSR & SCB_ICSR_PENDSTSET_Msk)  ;
     232:	4c13      	ldr	r4, [pc, #76]	; (280 <micros+0x58>)
  ticks2  = SysTick->VAL;
     234:	688e      	ldr	r6, [r1, #8]
  pend2   = !!(SCB->ICSR & SCB_ICSR_PENDSTSET_Msk)  ;
     236:	6863      	ldr	r3, [r4, #4]
  count2  = _ulTickCount ;
     238:	6805      	ldr	r5, [r0, #0]
  pend2   = !!(SCB->ICSR & SCB_ICSR_PENDSTSET_Msk)  ;
     23a:	0e9b      	lsrs	r3, r3, #26
     23c:	4013      	ands	r3, r2
  {
    ticks=ticks2;
    pend=pend2;
    count=count2;
    ticks2  = SysTick->VAL;
    pend2   = !!(SCB->ICSR & SCB_ICSR_PENDSTSET_Msk)  ;
     23e:	9201      	str	r2, [sp, #4]
    ticks2  = SysTick->VAL;
     240:	6888      	ldr	r0, [r1, #8]
    pend2   = !!(SCB->ICSR & SCB_ICSR_PENDSTSET_Msk)  ;
     242:	6862      	ldr	r2, [r4, #4]
     244:	9f01      	ldr	r7, [sp, #4]
     246:	0e92      	lsrs	r2, r2, #26
     248:	403a      	ands	r2, r7
    count2  = _ulTickCount ;
     24a:	4667      	mov	r7, ip
     24c:	683f      	ldr	r7, [r7, #0]
  } while ((pend != pend2) || (count != count2) || (ticks < ticks2));
     24e:	4293      	cmp	r3, r2
     250:	d10e      	bne.n	270 <micros+0x48>
     252:	42bd      	cmp	r5, r7
     254:	d10c      	bne.n	270 <micros+0x48>
     256:	4286      	cmp	r6, r0
     258:	d30a      	bcc.n	270 <micros+0x48>

  return ((count+pend) * 1000) + (((SysTick->LOAD  - ticks)*(1048576/(VARIANT_MCK/1000000)))>>20) ;
     25a:	195b      	adds	r3, r3, r5
     25c:	25fa      	movs	r5, #250	; 0xfa
     25e:	6848      	ldr	r0, [r1, #4]
     260:	00ad      	lsls	r5, r5, #2
     262:	1b86      	subs	r6, r0, r6
     264:	4807      	ldr	r0, [pc, #28]	; (284 <micros+0x5c>)
     266:	436b      	muls	r3, r5
     268:	4370      	muls	r0, r6
     26a:	0d00      	lsrs	r0, r0, #20
     26c:	18c0      	adds	r0, r0, r3
  // this is an optimization to turn a runtime division into two compile-time divisions and
  // a runtime multiplication and shift, saving a few cycles
}
     26e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
{
     270:	003d      	movs	r5, r7
     272:	0013      	movs	r3, r2
     274:	0006      	movs	r6, r0
     276:	e7e3      	b.n	240 <micros+0x18>
     278:	200000c0 	.word	0x200000c0
     27c:	e000e010 	.word	0xe000e010
     280:	e000ed00 	.word	0xe000ed00
     284:	00005555 	.word	0x00005555

00000288 <delay>:

void delay( unsigned long ms )
{
     288:	b570      	push	{r4, r5, r6, lr}
     28a:	1e04      	subs	r4, r0, #0
  if (ms == 0)
     28c:	d010      	beq.n	2b0 <delay+0x28>
  {
    return;
  }

  uint32_t start = micros();
     28e:	f7ff ffcb 	bl	228 <micros>
     292:	0005      	movs	r5, r0

  while (ms > 0)
  {
    yield();
     294:	f000 f81c 	bl	2d0 <yield>
    while (ms > 0 && (micros() - start) >= 1000)
     298:	f7ff ffc6 	bl	228 <micros>
     29c:	4b05      	ldr	r3, [pc, #20]	; (2b4 <delay+0x2c>)
     29e:	1b40      	subs	r0, r0, r5
     2a0:	4298      	cmp	r0, r3
     2a2:	d9f7      	bls.n	294 <delay+0xc>
    {
      ms--;
      start += 1000;
     2a4:	23fa      	movs	r3, #250	; 0xfa
      ms--;
     2a6:	3c01      	subs	r4, #1
      start += 1000;
     2a8:	009b      	lsls	r3, r3, #2
     2aa:	18ed      	adds	r5, r5, r3
    while (ms > 0 && (micros() - start) >= 1000)
     2ac:	2c00      	cmp	r4, #0
     2ae:	d1f3      	bne.n	298 <delay+0x10>
    }
  }
}
     2b0:	bd70      	pop	{r4, r5, r6, pc}
     2b2:	46c0      	nop			; (mov r8, r8)
     2b4:	000003e7 	.word	0x000003e7

000002b8 <resetExternalChip>:

void initiateReset(int ms);
void tickReset();
void cancelReset();

 __attribute__ ((weak)) void resetExternalChip() {};
     2b8:	4770      	bx	lr
	...

000002bc <SysTick_DefaultHandler>:

#include "Reset.h" // for tickReset()

void SysTick_DefaultHandler(void)
{
     2bc:	b510      	push	{r4, lr}
  // Increment tick count each ms
  _ulTickCount++;
     2be:	4a03      	ldr	r2, [pc, #12]	; (2cc <SysTick_DefaultHandler+0x10>)
     2c0:	6813      	ldr	r3, [r2, #0]
     2c2:	3301      	adds	r3, #1
     2c4:	6013      	str	r3, [r2, #0]
  tickReset();
     2c6:	f000 f839 	bl	33c <tickReset>
}
     2ca:	bd10      	pop	{r4, pc}
     2cc:	200000c0 	.word	0x200000c0

000002d0 <yield>:
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
	// Empty
}
     2d0:	4770      	bx	lr

000002d2 <sysTickHook>:
 * handler provided by Arduino.
 */
static int __false() {
	// Return false
	return 0;
}
     2d2:	2000      	movs	r0, #0
     2d4:	4770      	bx	lr

000002d6 <_Z11initVariantv>:
#include "Arduino.h"

// Weak empty variant initialization function.
// May be redefined by variant files.
void initVariant() __attribute__((weak));
void initVariant() { }
     2d6:	4770      	bx	lr

000002d8 <main>:

/*
 * \brief Main entry point of Arduino application
 */
int main( void )
{
     2d8:	b510      	push	{r4, lr}
  init();
     2da:	f001 fdd9 	bl	1e90 <init>

  __libc_init_array();
     2de:	f002 f96d 	bl	25bc <__libc_init_array>

  initVariant();
     2e2:	f7ff fff8 	bl	2d6 <_Z11initVariantv>

  delay(1);
     2e6:	2001      	movs	r0, #1
     2e8:	f7ff ffce 	bl	288 <delay>
#if defined(USBCON)
  USBDevice.init();
     2ec:	4c08      	ldr	r4, [pc, #32]	; (310 <main+0x38>)
     2ee:	0020      	movs	r0, r4
     2f0:	f001 f826 	bl	1340 <_ZN14USBDeviceClass4initEv>
  USBDevice.attach();
     2f4:	0020      	movs	r0, r4
     2f6:	f001 f8d7 	bl	14a8 <_ZN14USBDeviceClass6attachEv>
#endif

  setup();
     2fa:	f7ff ff0b 	bl	114 <setup>

  for (;;)
  {
    loop();
     2fe:	f7ff ff1f 	bl	140 <loop>
    if (serialEventRun) serialEventRun();
     302:	4b04      	ldr	r3, [pc, #16]	; (314 <main+0x3c>)
     304:	2b00      	cmp	r3, #0
     306:	d0fa      	beq.n	2fe <main+0x26>
     308:	e000      	b.n	30c <main+0x34>
     30a:	bf00      	nop
     30c:	e7f7      	b.n	2fe <main+0x26>
     30e:	46c0      	nop			; (mov r8, r8)
     310:	2000012c 	.word	0x2000012c
     314:	00000000 	.word	0x00000000

00000318 <initiateReset>:
	while (true);
}

static int ticks = -1;

void initiateReset(int _ticks) {
     318:	b510      	push	{r4, lr}
     31a:	0004      	movs	r4, r0
	resetExternalChip();
     31c:	f7ff ffcc 	bl	2b8 <resetExternalChip>
	ticks = _ticks;
     320:	4b01      	ldr	r3, [pc, #4]	; (328 <initiateReset+0x10>)
     322:	601c      	str	r4, [r3, #0]
}
     324:	bd10      	pop	{r4, pc}
     326:	46c0      	nop			; (mov r8, r8)
     328:	20000000 	.word	0x20000000

0000032c <cancelReset>:

void cancelReset() {
	ticks = -1;
     32c:	2201      	movs	r2, #1
     32e:	4b02      	ldr	r3, [pc, #8]	; (338 <cancelReset+0xc>)
     330:	4252      	negs	r2, r2
     332:	601a      	str	r2, [r3, #0]
}
     334:	4770      	bx	lr
     336:	46c0      	nop			; (mov r8, r8)
     338:	20000000 	.word	0x20000000

0000033c <tickReset>:

void tickReset() {
	if (ticks == -1)
     33c:	4a16      	ldr	r2, [pc, #88]	; (398 <tickReset+0x5c>)
void tickReset() {
     33e:	b510      	push	{r4, lr}
	if (ticks == -1)
     340:	6813      	ldr	r3, [r2, #0]
     342:	1c59      	adds	r1, r3, #1
     344:	d027      	beq.n	396 <tickReset+0x5a>
		return;
	ticks--;
     346:	3b01      	subs	r3, #1
     348:	6013      	str	r3, [r2, #0]
	if (ticks == 0)
     34a:	2b00      	cmp	r3, #0
     34c:	d123      	bne.n	396 <tickReset+0x5a>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
     34e:	b672      	cpsid	i
	if (APP_START < (0x200 + 4)) {
     350:	4b12      	ldr	r3, [pc, #72]	; (39c <tickReset+0x60>)
     352:	4a13      	ldr	r2, [pc, #76]	; (3a0 <tickReset+0x64>)
     354:	3304      	adds	r3, #4
     356:	4293      	cmp	r3, r2
     358:	d808      	bhi.n	36c <tickReset+0x30>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
     35a:	f3bf 8f4f 	dsb	sy
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
     35e:	4a11      	ldr	r2, [pc, #68]	; (3a4 <tickReset+0x68>)
     360:	4b11      	ldr	r3, [pc, #68]	; (3a8 <tickReset+0x6c>)
     362:	60da      	str	r2, [r3, #12]
     364:	f3bf 8f4f 	dsb	sy
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
     368:	46c0      	nop			; (mov r8, r8)
     36a:	e7fd      	b.n	368 <tickReset+0x2c>
        return NVMCTRL->INTFLAG.reg & NVMCTRL_INTFLAG_READY;
     36c:	4a0f      	ldr	r2, [pc, #60]	; (3ac <tickReset+0x70>)
	while (!nvmReady())
     36e:	2101      	movs	r1, #1
     370:	0010      	movs	r0, r2
        return NVMCTRL->INTFLAG.reg & NVMCTRL_INTFLAG_READY;
     372:	7d14      	ldrb	r4, [r2, #20]
	while (!nvmReady())
     374:	420c      	tst	r4, r1
     376:	d0fc      	beq.n	372 <tickReset+0x36>
	NVMCTRL->STATUS.reg |= NVMCTRL_STATUS_MASK;
     378:	2120      	movs	r1, #32
     37a:	8b14      	ldrh	r4, [r2, #24]
     37c:	31ff      	adds	r1, #255	; 0xff
	NVMCTRL->ADDR.reg  = (uintptr_t)&NVM_MEMORY[APP_START / 4];
     37e:	089b      	lsrs	r3, r3, #2
     380:	005b      	lsls	r3, r3, #1
	NVMCTRL->STATUS.reg |= NVMCTRL_STATUS_MASK;
     382:	4321      	orrs	r1, r4
     384:	8311      	strh	r1, [r2, #24]
	NVMCTRL->ADDR.reg  = (uintptr_t)&NVM_MEMORY[APP_START / 4];
     386:	61d3      	str	r3, [r2, #28]
	NVMCTRL->CTRLA.reg = NVMCTRL_CTRLA_CMD_ER | NVMCTRL_CTRLA_CMDEX_KEY;
     388:	4b09      	ldr	r3, [pc, #36]	; (3b0 <tickReset+0x74>)
     38a:	8013      	strh	r3, [r2, #0]
	while (!nvmReady())
     38c:	2301      	movs	r3, #1
        return NVMCTRL->INTFLAG.reg & NVMCTRL_INTFLAG_READY;
     38e:	7d02      	ldrb	r2, [r0, #20]
	while (!nvmReady())
     390:	421a      	tst	r2, r3
     392:	d0fc      	beq.n	38e <tickReset+0x52>
     394:	e7e1      	b.n	35a <tickReset+0x1e>
		banzai();
}
     396:	bd10      	pop	{r4, pc}
     398:	20000000 	.word	0x20000000
     39c:	00000000 	.word	0x00000000
     3a0:	00000203 	.word	0x00000203
     3a4:	05fa0004 	.word	0x05fa0004
     3a8:	e000ed00 	.word	0xe000ed00
     3ac:	41004000 	.word	0x41004000
     3b0:	ffffa502 	.word	0xffffa502

000003b4 <SystemInit>:
#define GENERIC_CLOCK_MULTIPLEXER_DFLL48M (0u)

void SystemInit( void )
{
  /* Set 1 Flash Wait State for 48MHz, cf tables 20.9 and 35.27 in SAMD21 Datasheet */
  NVMCTRL->CTRLB.bit.RWS = NVMCTRL_CTRLB_RWS_HALF_Val ;
     3b4:	221e      	movs	r2, #30
{
     3b6:	b570      	push	{r4, r5, r6, lr}
  NVMCTRL->CTRLB.bit.RWS = NVMCTRL_CTRLB_RWS_HALF_Val ;
     3b8:	4846      	ldr	r0, [pc, #280]	; (4d4 <SystemInit+0x120>)

  /* Turn on the digital interface clock */
  PM->APBAMASK.reg |= PM_APBAMASK_GCLK ;
     3ba:	4947      	ldr	r1, [pc, #284]	; (4d8 <SystemInit+0x124>)
  NVMCTRL->CTRLB.bit.RWS = NVMCTRL_CTRLB_RWS_HALF_Val ;
     3bc:	6843      	ldr	r3, [r0, #4]
     3be:	4393      	bics	r3, r2
     3c0:	3a1c      	subs	r2, #28
     3c2:	4313      	orrs	r3, r2
     3c4:	6043      	str	r3, [r0, #4]
  PM->APBAMASK.reg |= PM_APBAMASK_GCLK ;
     3c6:	2308      	movs	r3, #8
     3c8:	698c      	ldr	r4, [r1, #24]
     3ca:	4323      	orrs	r3, r4
     3cc:	618b      	str	r3, [r1, #24]
#else // has crystal

  /* ----------------------------------------------------------------------------------------------
   * 1) Enable XOSC32K clock (External on-board 32.768Hz oscillator)
   */
  SYSCTRL->XOSC32K.reg = SYSCTRL_XOSC32K_STARTUP( 0x6u ) | /* cf table 15.10 of product datasheet in chapter 15.8.6 */
     3ce:	4c43      	ldr	r4, [pc, #268]	; (4dc <SystemInit+0x128>)
     3d0:	4b43      	ldr	r3, [pc, #268]	; (4e0 <SystemInit+0x12c>)
     3d2:	829c      	strh	r4, [r3, #20]
                         SYSCTRL_XOSC32K_XTALEN | SYSCTRL_XOSC32K_EN32K ;
  SYSCTRL->XOSC32K.bit.ENABLE = 1 ; /* separate call, as described in chapter 15.6.3 */
     3d4:	8a9c      	ldrh	r4, [r3, #20]
     3d6:	4314      	orrs	r4, r2
     3d8:	829c      	strh	r4, [r3, #20]

  while ( (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_XOSC32KRDY) == 0 )
     3da:	68dc      	ldr	r4, [r3, #12]
     3dc:	4214      	tst	r4, r2
     3de:	d0fc      	beq.n	3da <SystemInit+0x26>

  /* Software reset the module to ensure it is re-initialized correctly */
  /* Note: Due to synchronization, there is a delay from writing CTRL.SWRST until the reset is complete.
   * CTRL.SWRST and STATUS.SYNCBUSY will both be cleared when the reset is complete, as described in chapter 13.8.1
   */
  GCLK->CTRL.reg = GCLK_CTRL_SWRST ;
     3e0:	2401      	movs	r4, #1
     3e2:	4a40      	ldr	r2, [pc, #256]	; (4e4 <SystemInit+0x130>)
     3e4:	7014      	strb	r4, [r2, #0]

  while ( (GCLK->CTRL.reg & GCLK_CTRL_SWRST) && (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY) )
     3e6:	7815      	ldrb	r5, [r2, #0]
     3e8:	4225      	tst	r5, r4
     3ea:	d003      	beq.n	3f4 <SystemInit+0x40>
     3ec:	7855      	ldrb	r5, [r2, #1]
     3ee:	b26d      	sxtb	r5, r5
     3f0:	2d00      	cmp	r5, #0
     3f2:	dbf8      	blt.n	3e6 <SystemInit+0x32>
  }

  /* ----------------------------------------------------------------------------------------------
   * 2) Put XOSC32K as source of Generic Clock Generator 1
   */
  GCLK->GENDIV.reg = GCLK_GENDIV_ID( GENERIC_CLOCK_GENERATOR_XOSC32K ) ; // Generic Clock Generator 1
     3f4:	2401      	movs	r4, #1
     3f6:	6094      	str	r4, [r2, #8]

  while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY )
     3f8:	7854      	ldrb	r4, [r2, #1]
     3fa:	b264      	sxtb	r4, r4
     3fc:	2c00      	cmp	r4, #0
     3fe:	dbfb      	blt.n	3f8 <SystemInit+0x44>
  {
    /* Wait for synchronization */
  }

  /* Write Generic Clock Generator 1 configuration */
  GCLK->GENCTRL.reg = GCLK_GENCTRL_ID( GENERIC_CLOCK_GENERATOR_OSC32K ) | // Generic Clock Generator 1
     400:	4c39      	ldr	r4, [pc, #228]	; (4e8 <SystemInit+0x134>)
     402:	6054      	str	r4, [r2, #4]
                      GCLK_GENCTRL_SRC_XOSC32K | // Selected source is External 32KHz Oscillator
#endif
//                      GCLK_GENCTRL_OE | // Output clock to a pin for tests
                      GCLK_GENCTRL_GENEN ;

  while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY )
     404:	7854      	ldrb	r4, [r2, #1]
     406:	b264      	sxtb	r4, r4
     408:	2c00      	cmp	r4, #0
     40a:	dbfb      	blt.n	404 <SystemInit+0x50>
  }

  /* ----------------------------------------------------------------------------------------------
   * 3) Put Generic Clock Generator 1 as source for Generic Clock Multiplexer 0 (DFLL48M reference)
   */
  GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID( GENERIC_CLOCK_MULTIPLEXER_DFLL48M ) | // Generic Clock Multiplexer 0
     40c:	2482      	movs	r4, #130	; 0x82
     40e:	01e4      	lsls	r4, r4, #7
     410:	8054      	strh	r4, [r2, #2]
                      GCLK_CLKCTRL_GEN_GCLK1 | // Generic Clock Generator 1 is source
                      GCLK_CLKCTRL_CLKEN ;

  while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY )
     412:	7854      	ldrb	r4, [r2, #1]
     414:	b264      	sxtb	r4, r4
     416:	2c00      	cmp	r4, #0
     418:	dbfb      	blt.n	412 <SystemInit+0x5e>
   */

  /* DFLL Configuration in Closed Loop mode, cf product datasheet chapter 15.6.7.1 - Closed-Loop Operation */

  /* Remove the OnDemand mode, Bug http://avr32.icgroup.norway.atmel.com/bugzilla/show_bug.cgi?id=9905 */
  SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
     41a:	2402      	movs	r4, #2
     41c:	849c      	strh	r4, [r3, #36]	; 0x24

  while ( (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) == 0 )
     41e:	340e      	adds	r4, #14
     420:	68dd      	ldr	r5, [r3, #12]
     422:	4225      	tst	r5, r4
     424:	d0fc      	beq.n	420 <SystemInit+0x6c>
  {
    /* Wait for synchronization */
  }

  SYSCTRL->DFLLMUL.reg = SYSCTRL_DFLLMUL_CSTEP( 31 ) | // Coarse step is 31, half of the max value
     426:	4c31      	ldr	r4, [pc, #196]	; (4ec <SystemInit+0x138>)
     428:	62dc      	str	r4, [r3, #44]	; 0x2c
                         SYSCTRL_DFLLMUL_FSTEP( 511 ) | // Fine step is 511, half of the max value
                         SYSCTRL_DFLLMUL_MUL( (VARIANT_MCK + VARIANT_MAINOSC/2) / VARIANT_MAINOSC ) ; // External 32KHz is the reference

  while ( (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) == 0 )
     42a:	2410      	movs	r4, #16
     42c:	68dd      	ldr	r5, [r3, #12]
     42e:	4225      	tst	r5, r4
     430:	d0fc      	beq.n	42c <SystemInit+0x78>
  SYSCTRL->DFLLCTRL.reg |= SYSCTRL_DFLLCTRL_ENABLE ;

#else   // has crystal

  /* Write full configuration to DFLL control register */
  SYSCTRL->DFLLCTRL.reg |= SYSCTRL_DFLLCTRL_MODE | /* Enable the closed loop mode */
     432:	8c9d      	ldrh	r5, [r3, #36]	; 0x24
     434:	4c2e      	ldr	r4, [pc, #184]	; (4f0 <SystemInit+0x13c>)
     436:	432c      	orrs	r4, r5
     438:	849c      	strh	r4, [r3, #36]	; 0x24
                           SYSCTRL_DFLLCTRL_WAITLOCK |
                           SYSCTRL_DFLLCTRL_QLDIS ; /* Disable Quick lock */

  while ( (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) == 0 )
     43a:	2410      	movs	r4, #16
     43c:	68dd      	ldr	r5, [r3, #12]
     43e:	4225      	tst	r5, r4
     440:	d0fc      	beq.n	43c <SystemInit+0x88>
  {
    /* Wait for synchronization */
  }

  /* Enable the DFLL */
  SYSCTRL->DFLLCTRL.reg |= SYSCTRL_DFLLCTRL_ENABLE ;
     442:	2402      	movs	r4, #2
     444:	8c9d      	ldrh	r5, [r3, #36]	; 0x24

  while ( (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLLCKC) == 0 ||
     446:	2680      	movs	r6, #128	; 0x80
  SYSCTRL->DFLLCTRL.reg |= SYSCTRL_DFLLCTRL_ENABLE ;
     448:	432c      	orrs	r4, r5
     44a:	849c      	strh	r4, [r3, #36]	; 0x24
          (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLLCKF) == 0 )
     44c:	2440      	movs	r4, #64	; 0x40
  while ( (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLLCKC) == 0 ||
     44e:	68dd      	ldr	r5, [r3, #12]
     450:	4235      	tst	r5, r6
     452:	d0fc      	beq.n	44e <SystemInit+0x9a>
          (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLLCKF) == 0 )
     454:	68dd      	ldr	r5, [r3, #12]
  while ( (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLLCKC) == 0 ||
     456:	4225      	tst	r5, r4
     458:	d0f9      	beq.n	44e <SystemInit+0x9a>
    /* Wait for locks flags */
  }

#endif

  while ( (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) == 0 )
     45a:	2410      	movs	r4, #16
     45c:	68dd      	ldr	r5, [r3, #12]
     45e:	4225      	tst	r5, r4
     460:	d0fc      	beq.n	45c <SystemInit+0xa8>
  }

  /* ----------------------------------------------------------------------------------------------
   * 5) Switch Generic Clock Generator 0 to DFLL48M. CPU will run at 48MHz.
   */
  GCLK->GENDIV.reg = GCLK_GENDIV_ID( GENERIC_CLOCK_GENERATOR_MAIN ) ; // Generic Clock Generator 0
     462:	2400      	movs	r4, #0
     464:	6094      	str	r4, [r2, #8]

  while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY )
     466:	7854      	ldrb	r4, [r2, #1]
     468:	b264      	sxtb	r4, r4
     46a:	2c00      	cmp	r4, #0
     46c:	dbfb      	blt.n	466 <SystemInit+0xb2>
  {
    /* Wait for synchronization */
  }

  /* Write Generic Clock Generator 0 configuration */
  GCLK->GENCTRL.reg = GCLK_GENCTRL_ID( GENERIC_CLOCK_GENERATOR_MAIN ) | // Generic Clock Generator 0
     46e:	4c21      	ldr	r4, [pc, #132]	; (4f4 <SystemInit+0x140>)
     470:	6054      	str	r4, [r2, #4]
                      GCLK_GENCTRL_SRC_DFLL48M | // Selected source is DFLL 48MHz
//                      GCLK_GENCTRL_OE | // Output clock to a pin for tests
                      GCLK_GENCTRL_IDC | // Set 50/50 duty cycle
                      GCLK_GENCTRL_GENEN ;

  while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY )
     472:	7854      	ldrb	r4, [r2, #1]
     474:	b264      	sxtb	r4, r4
     476:	2c00      	cmp	r4, #0
     478:	dbfb      	blt.n	472 <SystemInit+0xbe>
  }

  /* ----------------------------------------------------------------------------------------------
   * 6) Modify PRESCaler value of OSC8M to have 8MHz
   */
  SYSCTRL->OSC8M.bit.PRESC = SYSCTRL_OSC8M_PRESC_0_Val ;  //CMSIS 4.5 changed the prescaler defines
     47a:	6a1c      	ldr	r4, [r3, #32]
     47c:	4d1e      	ldr	r5, [pc, #120]	; (4f8 <SystemInit+0x144>)
     47e:	402c      	ands	r4, r5
  SYSCTRL->OSC8M.bit.ONDEMAND = 0 ;
     480:	2580      	movs	r5, #128	; 0x80
  SYSCTRL->OSC8M.bit.PRESC = SYSCTRL_OSC8M_PRESC_0_Val ;  //CMSIS 4.5 changed the prescaler defines
     482:	621c      	str	r4, [r3, #32]
  SYSCTRL->OSC8M.bit.ONDEMAND = 0 ;
     484:	6a1c      	ldr	r4, [r3, #32]
     486:	43ac      	bics	r4, r5
     488:	621c      	str	r4, [r3, #32]

  /* ----------------------------------------------------------------------------------------------
   * 7) Put OSC8M as source for Generic Clock Generator 3
   */
  GCLK->GENDIV.reg = GCLK_GENDIV_ID( GENERIC_CLOCK_GENERATOR_OSC8M ) ; // Generic Clock Generator 3
     48a:	2303      	movs	r3, #3
     48c:	6093      	str	r3, [r2, #8]

  /* Write Generic Clock Generator 3 configuration */
  GCLK->GENCTRL.reg = GCLK_GENCTRL_ID( GENERIC_CLOCK_GENERATOR_OSC8M ) | // Generic Clock Generator 3
     48e:	4b1b      	ldr	r3, [pc, #108]	; (4fc <SystemInit+0x148>)
     490:	6053      	str	r3, [r2, #4]
                      GCLK_GENCTRL_SRC_OSC8M | // Selected source is RC OSC 8MHz (already enabled at reset)
//                      GCLK_GENCTRL_OE | // Output clock to a pin for tests
                      GCLK_GENCTRL_GENEN ;

  while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY )
     492:	7853      	ldrb	r3, [r2, #1]
     494:	b25b      	sxtb	r3, r3
     496:	2b00      	cmp	r3, #0
     498:	dbfb      	blt.n	492 <SystemInit+0xde>

  /*
   * Now that all system clocks are configured, we can set CPU and APBx BUS clocks.
   * There values are normally the one present after Reset.
   */
  PM->CPUSEL.reg  = PM_CPUSEL_CPUDIV_DIV1 ;
     49a:	2300      	movs	r3, #0

  // ADC Linearity bits 4:0
  uint32_t linearity = (*((uint32_t *) ADC_FUSES_LINEARITY_0_ADDR) & ADC_FUSES_LINEARITY_0_Msk) >> ADC_FUSES_LINEARITY_0_Pos;

  // ADC Linearity bits 7:5
  linearity |= ((*((uint32_t *) ADC_FUSES_LINEARITY_1_ADDR) & ADC_FUSES_LINEARITY_1_Msk) >> ADC_FUSES_LINEARITY_1_Pos) << 5;
     49c:	24ff      	movs	r4, #255	; 0xff
  PM->CPUSEL.reg  = PM_CPUSEL_CPUDIV_DIV1 ;
     49e:	720b      	strb	r3, [r1, #8]
  SystemCoreClock=VARIANT_MCK ;
     4a0:	4a17      	ldr	r2, [pc, #92]	; (500 <SystemInit+0x14c>)
  PM->APBASEL.reg = PM_APBASEL_APBADIV_DIV1_Val ;
     4a2:	724b      	strb	r3, [r1, #9]
  PM->APBBSEL.reg = PM_APBBSEL_APBBDIV_DIV1_Val ;
     4a4:	728b      	strb	r3, [r1, #10]
  PM->APBCSEL.reg = PM_APBCSEL_APBCDIV_DIV1_Val ;
     4a6:	72cb      	strb	r3, [r1, #11]
  SystemCoreClock=VARIANT_MCK ;
     4a8:	4b16      	ldr	r3, [pc, #88]	; (504 <SystemInit+0x150>)
     4aa:	601a      	str	r2, [r3, #0]
  uint32_t bias = (*((uint32_t *) ADC_FUSES_BIASCAL_ADDR) & ADC_FUSES_BIASCAL_Msk) >> ADC_FUSES_BIASCAL_Pos;
     4ac:	4b16      	ldr	r3, [pc, #88]	; (508 <SystemInit+0x154>)
  uint32_t linearity = (*((uint32_t *) ADC_FUSES_LINEARITY_0_ADDR) & ADC_FUSES_LINEARITY_0_Msk) >> ADC_FUSES_LINEARITY_0_Pos;
     4ae:	4a17      	ldr	r2, [pc, #92]	; (50c <SystemInit+0x158>)
  uint32_t bias = (*((uint32_t *) ADC_FUSES_BIASCAL_ADDR) & ADC_FUSES_BIASCAL_Msk) >> ADC_FUSES_BIASCAL_Pos;
     4b0:	681b      	ldr	r3, [r3, #0]
  uint32_t linearity = (*((uint32_t *) ADC_FUSES_LINEARITY_0_ADDR) & ADC_FUSES_LINEARITY_0_Msk) >> ADC_FUSES_LINEARITY_0_Pos;
     4b2:	6811      	ldr	r1, [r2, #0]
  uint32_t bias = (*((uint32_t *) ADC_FUSES_BIASCAL_ADDR) & ADC_FUSES_BIASCAL_Msk) >> ADC_FUSES_BIASCAL_Pos;
     4b4:	069a      	lsls	r2, r3, #26
  linearity |= ((*((uint32_t *) ADC_FUSES_LINEARITY_1_ADDR) & ADC_FUSES_LINEARITY_1_Msk) >> ADC_FUSES_LINEARITY_1_Pos) << 5;
     4b6:	015b      	lsls	r3, r3, #5
  uint32_t linearity = (*((uint32_t *) ADC_FUSES_LINEARITY_0_ADDR) & ADC_FUSES_LINEARITY_0_Msk) >> ADC_FUSES_LINEARITY_0_Pos;
     4b8:	0ec9      	lsrs	r1, r1, #27
  linearity |= ((*((uint32_t *) ADC_FUSES_LINEARITY_1_ADDR) & ADC_FUSES_LINEARITY_1_Msk) >> ADC_FUSES_LINEARITY_1_Pos) << 5;
     4ba:	4023      	ands	r3, r4
  uint32_t bias = (*((uint32_t *) ADC_FUSES_BIASCAL_ADDR) & ADC_FUSES_BIASCAL_Msk) >> ADC_FUSES_BIASCAL_Pos;
     4bc:	0f52      	lsrs	r2, r2, #29

  ADC->CALIB.reg = ADC_CALIB_BIAS_CAL(bias) | ADC_CALIB_LINEARITY_CAL(linearity);
     4be:	0212      	lsls	r2, r2, #8
  linearity |= ((*((uint32_t *) ADC_FUSES_LINEARITY_1_ADDR) & ADC_FUSES_LINEARITY_1_Msk) >> ADC_FUSES_LINEARITY_1_Pos) << 5;
     4c0:	430b      	orrs	r3, r1
  ADC->CALIB.reg = ADC_CALIB_BIAS_CAL(bias) | ADC_CALIB_LINEARITY_CAL(linearity);
     4c2:	4313      	orrs	r3, r2
     4c4:	4a12      	ldr	r2, [pc, #72]	; (510 <SystemInit+0x15c>)
     4c6:	8513      	strh	r3, [r2, #40]	; 0x28

  /*
   * 9) Disable automatic NVM write operations
   */
  NVMCTRL->CTRLB.bit.MANW = 1;
     4c8:	2380      	movs	r3, #128	; 0x80
     4ca:	6842      	ldr	r2, [r0, #4]
     4cc:	4313      	orrs	r3, r2
     4ce:	6043      	str	r3, [r0, #4]
}
     4d0:	bd70      	pop	{r4, r5, r6, pc}
     4d2:	46c0      	nop			; (mov r8, r8)
     4d4:	41004000 	.word	0x41004000
     4d8:	40000400 	.word	0x40000400
     4dc:	0000060c 	.word	0x0000060c
     4e0:	40000800 	.word	0x40000800
     4e4:	40000c00 	.word	0x40000c00
     4e8:	00010501 	.word	0x00010501
     4ec:	7dff05b9 	.word	0x7dff05b9
     4f0:	00000a04 	.word	0x00000a04
     4f4:	00030700 	.word	0x00030700
     4f8:	fffffcff 	.word	0xfffffcff
     4fc:	00010603 	.word	0x00010603
     500:	02dc6c00 	.word	0x02dc6c00
     504:	20000014 	.word	0x20000014
     508:	00806024 	.word	0x00806024
     50c:	00806020 	.word	0x00806020
     510:	42004000 	.word	0x42004000

00000514 <_ZN4UartcvbEv>:
    size_t write(const uint8_t data);
    using Print::write; // pull in write(str) and write(buf, size) from Print

    void IrqHandler();

    operator bool() { return true; }
     514:	2001      	movs	r0, #1
     516:	4770      	bx	lr

00000518 <_ZN4Uart5beginEm>:
  uc_pinRTS = _pinRTS;
  uc_pinCTS = _pinCTS;
}

void Uart::begin(unsigned long baudrate)
{
     518:	b510      	push	{r4, lr}
  begin(baudrate, SERIAL_8N1);
     51a:	6803      	ldr	r3, [r0, #0]
     51c:	4a01      	ldr	r2, [pc, #4]	; (524 <_ZN4Uart5beginEm+0xc>)
     51e:	6a1b      	ldr	r3, [r3, #32]
     520:	4798      	blx	r3
}
     522:	bd10      	pop	{r4, pc}
     524:	00000413 	.word	0x00000413

00000528 <_ZN4Uart4peekEv>:
}

template <int N>
int RingBufferN<N>::peek()
{
  if(_iTail == _iHead)
     528:	0003      	movs	r3, r0
     52a:	33fc      	adds	r3, #252	; 0xfc
     52c:	69d9      	ldr	r1, [r3, #28]
     52e:	699a      	ldr	r2, [r3, #24]
     530:	4291      	cmp	r1, r2
     532:	d003      	beq.n	53c <_ZN4Uart4peekEv+0x14>
    return -1;

  return _aucBuffer[_iTail];
     534:	69db      	ldr	r3, [r3, #28]
     536:	18c0      	adds	r0, r0, r3
     538:	7d00      	ldrb	r0, [r0, #20]
}

int Uart::peek()
{
  return rxBuffer.peek();
}
     53a:	4770      	bx	lr
    return -1;
     53c:	2001      	movs	r0, #1
     53e:	4240      	negs	r0, r0
  return rxBuffer.peek();
     540:	e7fb      	b.n	53a <_ZN4Uart4peekEv+0x12>

00000542 <_ZN4Uart3endEv>:
{
     542:	b510      	push	{r4, lr}
     544:	0004      	movs	r4, r0
  sercom->resetUART();
     546:	6900      	ldr	r0, [r0, #16]
     548:	f001 fec6 	bl	22d8 <_ZN6SERCOM9resetUARTEv>
  _iHead = 0;
     54c:	0022      	movs	r2, r4
     54e:	2300      	movs	r3, #0
     550:	32fc      	adds	r2, #252	; 0xfc
     552:	6193      	str	r3, [r2, #24]
  _iTail = 0;
     554:	61d3      	str	r3, [r2, #28]
  _iHead = 0;
     556:	2286      	movs	r2, #134	; 0x86
     558:	0092      	lsls	r2, r2, #2
     55a:	18a4      	adds	r4, r4, r2
     55c:	6063      	str	r3, [r4, #4]
  _iTail = 0;
     55e:	60a3      	str	r3, [r4, #8]
}
     560:	bd10      	pop	{r4, pc}

00000562 <_ZN4Uart16extractNbStopBitEt>:
  return 1;
}

SercomNumberStopBit Uart::extractNbStopBit(uint16_t config)
{
  switch(config & HARDSER_STOP_BIT_MASK)
     562:	20f0      	movs	r0, #240	; 0xf0
     564:	4001      	ands	r1, r0
  {
    case HARDSER_STOP_BIT_1:
    default:
      return SERCOM_STOP_BIT_1;
     566:	3930      	subs	r1, #48	; 0x30
     568:	4248      	negs	r0, r1
     56a:	4148      	adcs	r0, r1

    case HARDSER_STOP_BIT_2:
      return SERCOM_STOP_BITS_2;
  }
}
     56c:	4770      	bx	lr

0000056e <_ZN4Uart15extractCharSizeEt>:

SercomUartCharSize Uart::extractCharSize(uint16_t config)
{
  switch(config & HARDSER_DATA_MASK)
     56e:	23f0      	movs	r3, #240	; 0xf0
     570:	011b      	lsls	r3, r3, #4
     572:	4019      	ands	r1, r3
     574:	2380      	movs	r3, #128	; 0x80
  {
    case HARDSER_DATA_5:
      return UART_CHAR_SIZE_5_BITS;

    case HARDSER_DATA_6:
      return UART_CHAR_SIZE_6_BITS;
     576:	2006      	movs	r0, #6
  switch(config & HARDSER_DATA_MASK)
     578:	009b      	lsls	r3, r3, #2
     57a:	4299      	cmp	r1, r3
     57c:	d00a      	beq.n	594 <_ZN4Uart15extractCharSizeEt+0x26>
     57e:	3301      	adds	r3, #1
     580:	33ff      	adds	r3, #255	; 0xff

    case HARDSER_DATA_7:
      return UART_CHAR_SIZE_7_BITS;
     582:	3001      	adds	r0, #1
  switch(config & HARDSER_DATA_MASK)
     584:	4299      	cmp	r1, r3
     586:	d005      	beq.n	594 <_ZN4Uart15extractCharSizeEt+0x26>
     588:	2380      	movs	r3, #128	; 0x80
      return UART_CHAR_SIZE_5_BITS;
     58a:	3802      	subs	r0, #2
  switch(config & HARDSER_DATA_MASK)
     58c:	005b      	lsls	r3, r3, #1
     58e:	4299      	cmp	r1, r3
     590:	d000      	beq.n	594 <_ZN4Uart15extractCharSizeEt+0x26>

    case HARDSER_DATA_8:
    default:
      return UART_CHAR_SIZE_8_BITS;
     592:	2000      	movs	r0, #0

  }
}
     594:	4770      	bx	lr

00000596 <_ZN4Uart13extractParityEt>:

SercomParityMode Uart::extractParity(uint16_t config)
{
  switch(config & HARDSER_PARITY_MASK)
     596:	200f      	movs	r0, #15
     598:	4001      	ands	r1, r0
    case HARDSER_PARITY_NONE:
    default:
      return SERCOM_NO_PARITY;

    case HARDSER_PARITY_EVEN:
      return SERCOM_EVEN_PARITY;
     59a:	2000      	movs	r0, #0
  switch(config & HARDSER_PARITY_MASK)
     59c:	2901      	cmp	r1, #1
     59e:	d003      	beq.n	5a8 <_ZN4Uart13extractParityEt+0x12>
      return SERCOM_NO_PARITY;
     5a0:	3902      	subs	r1, #2
     5a2:	1e48      	subs	r0, r1, #1
     5a4:	4181      	sbcs	r1, r0
     5a6:	1c48      	adds	r0, r1, #1

    case HARDSER_PARITY_ODD:
      return SERCOM_ODD_PARITY;
  }
}
     5a8:	4770      	bx	lr
	...

000005ac <_ZN4Uart5beginEmt>:
  pinPeripheral(uc_pinRX, g_APinDescription[uc_pinRX].ulPinType);
     5ac:	2389      	movs	r3, #137	; 0x89
{
     5ae:	b5f0      	push	{r4, r5, r6, r7, lr}
  pinPeripheral(uc_pinRX, g_APinDescription[uc_pinRX].ulPinType);
     5b0:	2618      	movs	r6, #24
{
     5b2:	b085      	sub	sp, #20
     5b4:	9102      	str	r1, [sp, #8]
  pinPeripheral(uc_pinRX, g_APinDescription[uc_pinRX].ulPinType);
     5b6:	009b      	lsls	r3, r3, #2
{
     5b8:	0004      	movs	r4, r0
  pinPeripheral(uc_pinRX, g_APinDescription[uc_pinRX].ulPinType);
     5ba:	5cc0      	ldrb	r0, [r0, r3]
     5bc:	0033      	movs	r3, r6
     5be:	2108      	movs	r1, #8
     5c0:	4343      	muls	r3, r0
     5c2:	4d32      	ldr	r5, [pc, #200]	; (68c <_ZN4Uart5beginEmt+0xe0>)
{
     5c4:	0017      	movs	r7, r2
  pinPeripheral(uc_pinRX, g_APinDescription[uc_pinRX].ulPinType);
     5c6:	18eb      	adds	r3, r5, r3
     5c8:	5659      	ldrsb	r1, [r3, r1]
     5ca:	f001 fd83 	bl	20d4 <pinPeripheral>
  pinPeripheral(uc_pinTX, g_APinDescription[uc_pinTX].ulPinType);
     5ce:	4b30      	ldr	r3, [pc, #192]	; (690 <_ZN4Uart5beginEmt+0xe4>)
     5d0:	2108      	movs	r1, #8
     5d2:	5ce0      	ldrb	r0, [r4, r3]
     5d4:	0033      	movs	r3, r6
     5d6:	4343      	muls	r3, r0
     5d8:	18eb      	adds	r3, r5, r3
     5da:	5659      	ldrsb	r1, [r3, r1]
     5dc:	f001 fd7a 	bl	20d4 <pinPeripheral>
  if (uc_padTX == UART_TX_RTS_CTS_PAD_0_2_3) { 
     5e0:	4b2c      	ldr	r3, [pc, #176]	; (694 <_ZN4Uart5beginEmt+0xe8>)
     5e2:	5ce2      	ldrb	r2, [r4, r3]
     5e4:	9303      	str	r3, [sp, #12]
     5e6:	2a02      	cmp	r2, #2
     5e8:	d109      	bne.n	5fe <_ZN4Uart5beginEmt+0x52>
    if (uc_pinCTS != NO_CTS_PIN) {
     5ea:	3311      	adds	r3, #17
     5ec:	5ce0      	ldrb	r0, [r4, r3]
     5ee:	28ff      	cmp	r0, #255	; 0xff
     5f0:	d005      	beq.n	5fe <_ZN4Uart5beginEmt+0x52>
      pinPeripheral(uc_pinCTS, g_APinDescription[uc_pinCTS].ulPinType);
     5f2:	2108      	movs	r1, #8
     5f4:	4346      	muls	r6, r0
     5f6:	19ae      	adds	r6, r5, r6
     5f8:	5671      	ldrsb	r1, [r6, r1]
     5fa:	f001 fd6b 	bl	20d4 <pinPeripheral>
  if (uc_pinRTS != NO_RTS_PIN) {
     5fe:	268a      	movs	r6, #138	; 0x8a
     600:	00b6      	lsls	r6, r6, #2
     602:	5da0      	ldrb	r0, [r4, r6]
     604:	28ff      	cmp	r0, #255	; 0xff
     606:	d019      	beq.n	63c <_ZN4Uart5beginEmt+0x90>
    pinMode(uc_pinRTS, OUTPUT);
     608:	2101      	movs	r1, #1
     60a:	f001 fceb 	bl	1fe4 <pinMode>
    EPortType rtsPort = g_APinDescription[uc_pinRTS].ulPort;
     60e:	2218      	movs	r2, #24
     610:	5da3      	ldrb	r3, [r4, r6]
    pul_outsetRTS = &PORT->Group[rtsPort].OUTSET.reg;
     612:	4921      	ldr	r1, [pc, #132]	; (698 <_ZN4Uart5beginEmt+0xec>)
    EPortType rtsPort = g_APinDescription[uc_pinRTS].ulPort;
     614:	435a      	muls	r2, r3
    pul_outsetRTS = &PORT->Group[rtsPort].OUTSET.reg;
     616:	56ab      	ldrsb	r3, [r5, r2]
    ul_pinMaskRTS = (1ul << g_APinDescription[uc_pinRTS].ulPin);
     618:	18ad      	adds	r5, r5, r2
    pul_outsetRTS = &PORT->Group[rtsPort].OUTSET.reg;
     61a:	01db      	lsls	r3, r3, #7
     61c:	1858      	adds	r0, r3, r1
     61e:	218b      	movs	r1, #139	; 0x8b
     620:	0089      	lsls	r1, r1, #2
     622:	5060      	str	r0, [r4, r1]
    pul_outclrRTS = &PORT->Group[rtsPort].OUTCLR.reg;
     624:	491d      	ldr	r1, [pc, #116]	; (69c <_ZN4Uart5beginEmt+0xf0>)
    ul_pinMaskRTS = (1ul << g_APinDescription[uc_pinRTS].ulPin);
     626:	2201      	movs	r2, #1
    pul_outclrRTS = &PORT->Group[rtsPort].OUTCLR.reg;
     628:	185b      	adds	r3, r3, r1
     62a:	218c      	movs	r1, #140	; 0x8c
     62c:	0089      	lsls	r1, r1, #2
     62e:	5063      	str	r3, [r4, r1]
    ul_pinMaskRTS = (1ul << g_APinDescription[uc_pinRTS].ulPin);
     630:	6869      	ldr	r1, [r5, #4]
     632:	408a      	lsls	r2, r1
     634:	218d      	movs	r1, #141	; 0x8d
     636:	0089      	lsls	r1, r1, #2
     638:	5062      	str	r2, [r4, r1]
    *pul_outclrRTS = ul_pinMaskRTS;
     63a:	601a      	str	r2, [r3, #0]
  sercom->initUART(UART_INT_CLOCK, SAMPLE_RATE_x16, baudrate);
     63c:	2201      	movs	r2, #1
     63e:	9b02      	ldr	r3, [sp, #8]
     640:	0011      	movs	r1, r2
     642:	6920      	ldr	r0, [r4, #16]
     644:	f001 fef2 	bl	242c <_ZN6SERCOM8initUARTE14SercomUartMode20SercomUartSampleRatem>
  sercom->initFrame(extractCharSize(config), LSB_FIRST, extractParity(config), extractNbStopBit(config));
     648:	0039      	movs	r1, r7
     64a:	0020      	movs	r0, r4
     64c:	f7ff ff8f 	bl	56e <_ZN4Uart15extractCharSizeEt>
     650:	0039      	movs	r1, r7
     652:	0005      	movs	r5, r0
     654:	0020      	movs	r0, r4
     656:	f7ff ff9e 	bl	596 <_ZN4Uart13extractParityEt>
     65a:	0039      	movs	r1, r7
     65c:	0006      	movs	r6, r0
     65e:	0020      	movs	r0, r4
     660:	f7ff ff7f 	bl	562 <_ZN4Uart16extractNbStopBitEt>
     664:	0033      	movs	r3, r6
     666:	9000      	str	r0, [sp, #0]
     668:	0029      	movs	r1, r5
     66a:	6920      	ldr	r0, [r4, #16]
     66c:	2201      	movs	r2, #1
     66e:	f001 fe07 	bl	2280 <_ZN6SERCOM9initFrameE18SercomUartCharSize15SercomDataOrder16SercomParityMode19SercomNumberStopBit>
  sercom->initPads(uc_padTX, uc_padRX);
     672:	4b0b      	ldr	r3, [pc, #44]	; (6a0 <_ZN4Uart5beginEmt+0xf4>)
     674:	6920      	ldr	r0, [r4, #16]
     676:	5ce2      	ldrb	r2, [r4, r3]
     678:	9b03      	ldr	r3, [sp, #12]
     67a:	5ce1      	ldrb	r1, [r4, r3]
     67c:	f001 fe1a 	bl	22b4 <_ZN6SERCOM8initPadsE15SercomUartTXPad11SercomRXPad>
  sercom->enableUART();
     680:	6920      	ldr	r0, [r4, #16]
     682:	f001 fe35 	bl	22f0 <_ZN6SERCOM10enableUARTEv>
}
     686:	b005      	add	sp, #20
     688:	bdf0      	pop	{r4, r5, r6, r7, pc}
     68a:	46c0      	nop			; (mov r8, r8)
     68c:	000028ec 	.word	0x000028ec
     690:	00000225 	.word	0x00000225
     694:	00000227 	.word	0x00000227
     698:	41004418 	.word	0x41004418
     69c:	41004414 	.word	0x41004414
     6a0:	00000226 	.word	0x00000226

000006a4 <_ZN11RingBufferNILi256EEC1Ev>:
    memset( _aucBuffer, 0, N ) ;
     6a4:	2280      	movs	r2, #128	; 0x80
RingBufferN<N>::RingBufferN( void )
     6a6:	b510      	push	{r4, lr}
     6a8:	0004      	movs	r4, r0
    memset( _aucBuffer, 0, N ) ;
     6aa:	0052      	lsls	r2, r2, #1
     6ac:	2100      	movs	r1, #0
     6ae:	f001 ffc6 	bl	263e <memset>
  _iHead = 0;
     6b2:	0023      	movs	r3, r4
     6b4:	2200      	movs	r2, #0
     6b6:	33fc      	adds	r3, #252	; 0xfc
     6b8:	605a      	str	r2, [r3, #4]
}
     6ba:	0020      	movs	r0, r4
  _iTail = 0;
     6bc:	609a      	str	r2, [r3, #8]
}
     6be:	bd10      	pop	{r4, pc}

000006c0 <_ZN4UartC1EP6SERCOMhh11SercomRXPad15SercomUartTXPad>:
Uart::Uart(SERCOM *_s, uint8_t _pinRX, uint8_t _pinTX, SercomRXPad _padRX, SercomUartTXPad _padTX) :
     6c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
     6c2:	001d      	movs	r5, r3
     6c4:	ab08      	add	r3, sp, #32
     6c6:	781b      	ldrb	r3, [r3, #0]
     6c8:	0004      	movs	r4, r0
     6ca:	9300      	str	r3, [sp, #0]
     6cc:	ab09      	add	r3, sp, #36	; 0x24
     6ce:	781b      	ldrb	r3, [r3, #0]
     6d0:	0016      	movs	r6, r2
     6d2:	9301      	str	r3, [sp, #4]
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
     6d4:	2300      	movs	r3, #0
     6d6:	6043      	str	r3, [r0, #4]
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
     6d8:	23fa      	movs	r3, #250	; 0xfa
     6da:	009b      	lsls	r3, r3, #2
     6dc:	6083      	str	r3, [r0, #8]
Uart::Uart(SERCOM *_s, uint8_t _pinRX, uint8_t _pinTX, SercomRXPad _padRX, SercomUartTXPad _padTX, uint8_t _pinRTS, uint8_t _pinCTS)
     6de:	4b11      	ldr	r3, [pc, #68]	; (724 <_ZN4UartC1EP6SERCOMhh11SercomRXPad15SercomUartTXPad+0x64>)
Uart::Uart(SERCOM *_s, uint8_t _pinRX, uint8_t _pinTX, SercomRXPad _padRX, SercomUartTXPad _padTX) :
     6e0:	000f      	movs	r7, r1
Uart::Uart(SERCOM *_s, uint8_t _pinRX, uint8_t _pinTX, SercomRXPad _padRX, SercomUartTXPad _padTX, uint8_t _pinRTS, uint8_t _pinCTS)
     6e2:	3308      	adds	r3, #8
     6e4:	6003      	str	r3, [r0, #0]
     6e6:	3014      	adds	r0, #20
     6e8:	f7ff ffdc 	bl	6a4 <_ZN11RingBufferNILi256EEC1Ev>
     6ec:	0020      	movs	r0, r4
     6ee:	301d      	adds	r0, #29
     6f0:	30ff      	adds	r0, #255	; 0xff
     6f2:	f7ff ffd7 	bl	6a4 <_ZN11RingBufferNILi256EEC1Ev>
  uc_pinRX = _pinRX;
     6f6:	2389      	movs	r3, #137	; 0x89
  uc_padRX = _padRX ;
     6f8:	466a      	mov	r2, sp
  uc_pinRX = _pinRX;
     6fa:	009b      	lsls	r3, r3, #2
  sercom = _s;
     6fc:	6127      	str	r7, [r4, #16]
  uc_pinRX = _pinRX;
     6fe:	54e6      	strb	r6, [r4, r3]
  uc_pinTX = _pinTX;
     700:	4b09      	ldr	r3, [pc, #36]	; (728 <_ZN4UartC1EP6SERCOMhh11SercomRXPad15SercomUartTXPad+0x68>)
  uc_padRX = _padRX ;
     702:	7812      	ldrb	r2, [r2, #0]
  uc_pinTX = _pinTX;
     704:	54e5      	strb	r5, [r4, r3]
  uc_padRX = _padRX ;
     706:	4b09      	ldr	r3, [pc, #36]	; (72c <_ZN4UartC1EP6SERCOMhh11SercomRXPad15SercomUartTXPad+0x6c>)
}
     708:	0020      	movs	r0, r4
  uc_padRX = _padRX ;
     70a:	54e2      	strb	r2, [r4, r3]
  uc_padTX = _padTX;
     70c:	466a      	mov	r2, sp
     70e:	4b08      	ldr	r3, [pc, #32]	; (730 <_ZN4UartC1EP6SERCOMhh11SercomRXPad15SercomUartTXPad+0x70>)
     710:	7912      	ldrb	r2, [r2, #4]
     712:	54e2      	strb	r2, [r4, r3]
  uc_pinRTS = _pinRTS;
     714:	228a      	movs	r2, #138	; 0x8a
     716:	3b29      	subs	r3, #41	; 0x29
     718:	3bff      	subs	r3, #255	; 0xff
     71a:	0092      	lsls	r2, r2, #2
     71c:	54a3      	strb	r3, [r4, r2]
  uc_pinCTS = _pinCTS;
     71e:	3210      	adds	r2, #16
     720:	54a3      	strb	r3, [r4, r2]
}
     722:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
     724:	0000280c 	.word	0x0000280c
     728:	00000225 	.word	0x00000225
     72c:	00000226 	.word	0x00000226
     730:	00000227 	.word	0x00000227

00000734 <_ZN11RingBufferNILi256EE9availableEv>:
  int delta = _iHead - _iTail;
     734:	0003      	movs	r3, r0
     736:	33fc      	adds	r3, #252	; 0xfc
     738:	6858      	ldr	r0, [r3, #4]
     73a:	689b      	ldr	r3, [r3, #8]
     73c:	1ac0      	subs	r0, r0, r3
  if(delta < 0)
     73e:	d501      	bpl.n	744 <_ZN11RingBufferNILi256EE9availableEv+0x10>
    return N + delta;
     740:	3001      	adds	r0, #1
     742:	30ff      	adds	r0, #255	; 0xff
}
     744:	4770      	bx	lr

00000746 <_ZN4Uart5flushEv>:
{
     746:	b510      	push	{r4, lr}
     748:	0004      	movs	r4, r0
  while(txBuffer.available()); // wait until TX buffer is empty
     74a:	0020      	movs	r0, r4
     74c:	301d      	adds	r0, #29
     74e:	30ff      	adds	r0, #255	; 0xff
     750:	f7ff fff0 	bl	734 <_ZN11RingBufferNILi256EE9availableEv>
     754:	2800      	cmp	r0, #0
     756:	d1f8      	bne.n	74a <_ZN4Uart5flushEv+0x4>
  sercom->flushUART();
     758:	6920      	ldr	r0, [r4, #16]
     75a:	f001 fdd2 	bl	2302 <_ZN6SERCOM9flushUARTEv>
}
     75e:	bd10      	pop	{r4, pc}

00000760 <_ZN4Uart9availableEv>:
{
     760:	b510      	push	{r4, lr}
  return rxBuffer.available();
     762:	3014      	adds	r0, #20
     764:	f7ff ffe6 	bl	734 <_ZN11RingBufferNILi256EE9availableEv>
}
     768:	bd10      	pop	{r4, pc}

0000076a <_ZN11RingBufferNILi256EE17availableForStoreEv>:
  if (_iHead >= _iTail)
     76a:	0003      	movs	r3, r0
     76c:	33fc      	adds	r3, #252	; 0xfc
     76e:	6859      	ldr	r1, [r3, #4]
     770:	689a      	ldr	r2, [r3, #8]
     772:	4291      	cmp	r1, r2
     774:	db04      	blt.n	780 <_ZN11RingBufferNILi256EE17availableForStoreEv+0x16>
    return N - 1 - _iHead + _iTail;
     776:	685a      	ldr	r2, [r3, #4]
     778:	6898      	ldr	r0, [r3, #8]
     77a:	1a80      	subs	r0, r0, r2
     77c:	30ff      	adds	r0, #255	; 0xff
}
     77e:	4770      	bx	lr
    return _iTail - _iHead - 1;
     780:	6898      	ldr	r0, [r3, #8]
     782:	685b      	ldr	r3, [r3, #4]
     784:	1ac0      	subs	r0, r0, r3
     786:	3801      	subs	r0, #1
     788:	e7f9      	b.n	77e <_ZN11RingBufferNILi256EE17availableForStoreEv+0x14>

0000078a <_ZN4Uart17availableForWriteEv>:
{
     78a:	b510      	push	{r4, lr}
  return txBuffer.availableForStore();
     78c:	301d      	adds	r0, #29
     78e:	30ff      	adds	r0, #255	; 0xff
     790:	f7ff ffeb 	bl	76a <_ZN11RingBufferNILi256EE17availableForStoreEv>
}
     794:	bd10      	pop	{r4, pc}

00000796 <_ZN4Uart10IrqHandlerEv>:
{
     796:	b510      	push	{r4, lr}
     798:	0004      	movs	r4, r0
  if (sercom->isFrameErrorUART()) {
     79a:	6900      	ldr	r0, [r0, #16]
     79c:	f001 fdcd 	bl	233a <_ZN6SERCOM16isFrameErrorUARTEv>
     7a0:	2800      	cmp	r0, #0
     7a2:	d005      	beq.n	7b0 <_ZN4Uart10IrqHandlerEv+0x1a>
    sercom->readDataUART();
     7a4:	6920      	ldr	r0, [r4, #16]
     7a6:	f001 fdd8 	bl	235a <_ZN6SERCOM12readDataUARTEv>
    sercom->clearFrameErrorUART();
     7aa:	6920      	ldr	r0, [r4, #16]
     7ac:	f001 fdca 	bl	2344 <_ZN6SERCOM19clearFrameErrorUARTEv>
  if (sercom->availableDataUART()) {
     7b0:	6920      	ldr	r0, [r4, #16]
     7b2:	f001 fdb2 	bl	231a <_ZN6SERCOM17availableDataUARTEv>
     7b6:	2800      	cmp	r0, #0
     7b8:	d020      	beq.n	7fc <_ZN4Uart10IrqHandlerEv+0x66>
    rxBuffer.store_char(sercom->readDataUART());
     7ba:	6920      	ldr	r0, [r4, #16]
     7bc:	f001 fdcd 	bl	235a <_ZN6SERCOM12readDataUARTEv>
  int i = nextIndex(_iHead);
     7c0:	0022      	movs	r2, r4
     7c2:	32fc      	adds	r2, #252	; 0xfc
     7c4:	6993      	ldr	r3, [r2, #24]
  if ( i != _iTail )
     7c6:	69d1      	ldr	r1, [r2, #28]
}

template <int N>
int RingBufferN<N>::nextIndex(int index)
{
  return (uint32_t)(index + 1) % N;
     7c8:	3301      	adds	r3, #1
     7ca:	b2db      	uxtb	r3, r3
  if ( i != _iTail )
     7cc:	428b      	cmp	r3, r1
     7ce:	d003      	beq.n	7d8 <_ZN4Uart10IrqHandlerEv+0x42>
    _aucBuffer[_iHead] = c ;
     7d0:	6991      	ldr	r1, [r2, #24]
     7d2:	1861      	adds	r1, r4, r1
     7d4:	7508      	strb	r0, [r1, #20]
    _iHead = i ;
     7d6:	6193      	str	r3, [r2, #24]
    if (uc_pinRTS != NO_RTS_PIN) {
     7d8:	238a      	movs	r3, #138	; 0x8a
     7da:	009b      	lsls	r3, r3, #2
     7dc:	5ce3      	ldrb	r3, [r4, r3]
     7de:	2bff      	cmp	r3, #255	; 0xff
     7e0:	d00c      	beq.n	7fc <_ZN4Uart10IrqHandlerEv+0x66>
    rxBuffer.store_char(sercom->readDataUART());
     7e2:	0020      	movs	r0, r4
     7e4:	3014      	adds	r0, #20
      if (rxBuffer.availableForStore() < RTS_RX_THRESHOLD) {
     7e6:	f7ff ffc0 	bl	76a <_ZN11RingBufferNILi256EE17availableForStoreEv>
     7ea:	2809      	cmp	r0, #9
     7ec:	dc06      	bgt.n	7fc <_ZN4Uart10IrqHandlerEv+0x66>
        *pul_outsetRTS = ul_pinMaskRTS;
     7ee:	238b      	movs	r3, #139	; 0x8b
     7f0:	228d      	movs	r2, #141	; 0x8d
     7f2:	009b      	lsls	r3, r3, #2
     7f4:	0092      	lsls	r2, r2, #2
     7f6:	58e3      	ldr	r3, [r4, r3]
     7f8:	58a2      	ldr	r2, [r4, r2]
     7fa:	601a      	str	r2, [r3, #0]
  if (sercom->isDataRegisterEmptyUART()) {
     7fc:	6920      	ldr	r0, [r4, #16]
     7fe:	f001 fda7 	bl	2350 <_ZN6SERCOM23isDataRegisterEmptyUARTEv>
     802:	2800      	cmp	r0, #0
     804:	d01a      	beq.n	83c <_ZN4Uart10IrqHandlerEv+0xa6>
    if (txBuffer.available()) {
     806:	0020      	movs	r0, r4
     808:	301d      	adds	r0, #29
     80a:	30ff      	adds	r0, #255	; 0xff
     80c:	f7ff ff92 	bl	734 <_ZN11RingBufferNILi256EE9availableEv>
     810:	2800      	cmp	r0, #0
     812:	d022      	beq.n	85a <_ZN4Uart10IrqHandlerEv+0xc4>
  if(_iTail == _iHead)
     814:	2386      	movs	r3, #134	; 0x86
     816:	009b      	lsls	r3, r3, #2
     818:	18e3      	adds	r3, r4, r3
     81a:	6899      	ldr	r1, [r3, #8]
     81c:	685a      	ldr	r2, [r3, #4]
     81e:	4291      	cmp	r1, r2
     820:	d018      	beq.n	854 <_ZN4Uart10IrqHandlerEv+0xbe>
  uint8_t value = _aucBuffer[_iTail];
     822:	218e      	movs	r1, #142	; 0x8e
     824:	689a      	ldr	r2, [r3, #8]
     826:	0049      	lsls	r1, r1, #1
     828:	18a2      	adds	r2, r4, r2
     82a:	5c51      	ldrb	r1, [r2, r1]
  _iTail = nextIndex(_iTail);
     82c:	689a      	ldr	r2, [r3, #8]
  return (uint32_t)(index + 1) % N;
     82e:	3201      	adds	r2, #1
     830:	b2d2      	uxtb	r2, r2
  _iTail = nextIndex(_iTail);
     832:	609a      	str	r2, [r3, #8]
      sercom->writeDataUART(data);
     834:	b2c9      	uxtb	r1, r1
     836:	6920      	ldr	r0, [r4, #16]
     838:	f001 fd93 	bl	2362 <_ZN6SERCOM13writeDataUARTEh>
  if (sercom->isUARTError()) {
     83c:	6920      	ldr	r0, [r4, #16]
     83e:	f001 fd71 	bl	2324 <_ZN6SERCOM11isUARTErrorEv>
     842:	2800      	cmp	r0, #0
     844:	d005      	beq.n	852 <_ZN4Uart10IrqHandlerEv+0xbc>
    sercom->acknowledgeUARTError();
     846:	6920      	ldr	r0, [r4, #16]
     848:	f001 fd70 	bl	232c <_ZN6SERCOM20acknowledgeUARTErrorEv>
    sercom->clearStatusUART();
     84c:	6920      	ldr	r0, [r4, #16]
     84e:	f001 fd60 	bl	2312 <_ZN6SERCOM15clearStatusUARTEv>
}
     852:	bd10      	pop	{r4, pc}
    return -1;
     854:	2101      	movs	r1, #1
     856:	4249      	negs	r1, r1
     858:	e7ec      	b.n	834 <_ZN4Uart10IrqHandlerEv+0x9e>
      sercom->disableDataRegisterEmptyInterruptUART();
     85a:	6920      	ldr	r0, [r4, #16]
     85c:	f001 fd8d 	bl	237a <_ZN6SERCOM37disableDataRegisterEmptyInterruptUARTEv>
     860:	e7ec      	b.n	83c <_ZN4Uart10IrqHandlerEv+0xa6>
	...

00000864 <_ZN4Uart5writeEh>:
{
     864:	b570      	push	{r4, r5, r6, lr}
     866:	0004      	movs	r4, r0
  if (sercom->isDataRegisterEmptyUART() && txBuffer.available() == 0) {
     868:	6900      	ldr	r0, [r0, #16]
{
     86a:	000d      	movs	r5, r1
  if (sercom->isDataRegisterEmptyUART() && txBuffer.available() == 0) {
     86c:	f001 fd70 	bl	2350 <_ZN6SERCOM23isDataRegisterEmptyUARTEv>
     870:	2800      	cmp	r0, #0
     872:	d124      	bne.n	8be <_ZN4Uart5writeEh+0x5a>
  return (uint32_t)(index + 1) % N;
     874:	26ff      	movs	r6, #255	; 0xff
}

template <int N>
bool RingBufferN<N>::isFull()
{
  return (nextIndex(_iHead) == _iTail);
     876:	2386      	movs	r3, #134	; 0x86
     878:	009b      	lsls	r3, r3, #2
     87a:	18e3      	adds	r3, r4, r3
     87c:	685a      	ldr	r2, [r3, #4]
     87e:	6899      	ldr	r1, [r3, #8]
  return (uint32_t)(index + 1) % N;
     880:	3201      	adds	r2, #1
     882:	4032      	ands	r2, r6
    while(txBuffer.isFull()) {
     884:	428a      	cmp	r2, r1
     886:	d12f      	bne.n	8e8 <_ZN4Uart5writeEh+0x84>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
     888:	f3ef 8310 	mrs	r3, PRIMASK
      if (interruptsEnabled) {
     88c:	07db      	lsls	r3, r3, #31
     88e:	d40d      	bmi.n	8ac <_ZN4Uart5writeEh+0x48>
        uint32_t exceptionNumber = (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk);
     890:	4b1e      	ldr	r3, [pc, #120]	; (90c <_ZN4Uart5writeEh+0xa8>)
     892:	685b      	ldr	r3, [r3, #4]
     894:	05db      	lsls	r3, r3, #23
     896:	0ddb      	lsrs	r3, r3, #23
        if (exceptionNumber == 0 ||
     898:	d0ed      	beq.n	876 <_ZN4Uart5writeEh+0x12>
              NVIC_GetPriority((IRQn_Type)(exceptionNumber - 16)) > SERCOM_NVIC_PRIORITY) {
     89a:	3b10      	subs	r3, #16
     89c:	b25b      	sxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
     89e:	2b00      	cmp	r3, #0
     8a0:	db19      	blt.n	8d6 <_ZN4Uart5writeEh+0x72>
    return((uint32_t)(((NVIC->IP[ _IP_IDX(IRQn)] >> _BIT_SHIFT(IRQn) ) & (uint32_t)0xFFUL) >> (8U - __NVIC_PRIO_BITS)));
     8a2:	089b      	lsrs	r3, r3, #2
     8a4:	33c0      	adds	r3, #192	; 0xc0
     8a6:	4a1a      	ldr	r2, [pc, #104]	; (910 <_ZN4Uart5writeEh+0xac>)
     8a8:	009b      	lsls	r3, r3, #2
     8aa:	589b      	ldr	r3, [r3, r2]
      if (sercom->isDataRegisterEmptyUART()) {
     8ac:	6920      	ldr	r0, [r4, #16]
     8ae:	f001 fd4f 	bl	2350 <_ZN6SERCOM23isDataRegisterEmptyUARTEv>
     8b2:	2800      	cmp	r0, #0
     8b4:	d0df      	beq.n	876 <_ZN4Uart5writeEh+0x12>
        IrqHandler();
     8b6:	0020      	movs	r0, r4
     8b8:	f7ff ff6d 	bl	796 <_ZN4Uart10IrqHandlerEv>
     8bc:	e7db      	b.n	876 <_ZN4Uart5writeEh+0x12>
  if (sercom->isDataRegisterEmptyUART() && txBuffer.available() == 0) {
     8be:	0020      	movs	r0, r4
     8c0:	301d      	adds	r0, #29
     8c2:	30ff      	adds	r0, #255	; 0xff
     8c4:	f7ff ff36 	bl	734 <_ZN11RingBufferNILi256EE9availableEv>
     8c8:	2800      	cmp	r0, #0
     8ca:	d1d3      	bne.n	874 <_ZN4Uart5writeEh+0x10>
    sercom->writeDataUART(data);
     8cc:	0029      	movs	r1, r5
     8ce:	6920      	ldr	r0, [r4, #16]
     8d0:	f001 fd47 	bl	2362 <_ZN6SERCOM13writeDataUARTEh>
  return 1;
     8d4:	e017      	b.n	906 <_ZN4Uart5writeEh+0xa2>
    return((uint32_t)(((SCB->SHP[_SHP_IDX(IRQn)] >> _BIT_SHIFT(IRQn) ) & (uint32_t)0xFFUL) >> (8U - __NVIC_PRIO_BITS)));
     8d6:	220f      	movs	r2, #15
     8d8:	4013      	ands	r3, r2
     8da:	3b08      	subs	r3, #8
     8dc:	089b      	lsrs	r3, r3, #2
     8de:	4a0d      	ldr	r2, [pc, #52]	; (914 <_ZN4Uart5writeEh+0xb0>)
     8e0:	009b      	lsls	r3, r3, #2
     8e2:	189b      	adds	r3, r3, r2
     8e4:	681b      	ldr	r3, [r3, #0]
     8e6:	e7e1      	b.n	8ac <_ZN4Uart5writeEh+0x48>
  int i = nextIndex(_iHead);
     8e8:	685a      	ldr	r2, [r3, #4]
  return (uint32_t)(index + 1) % N;
     8ea:	3201      	adds	r2, #1
     8ec:	4016      	ands	r6, r2
  if ( i != _iTail )
     8ee:	689a      	ldr	r2, [r3, #8]
     8f0:	4296      	cmp	r6, r2
     8f2:	d005      	beq.n	900 <_ZN4Uart5writeEh+0x9c>
    _aucBuffer[_iHead] = c ;
     8f4:	218e      	movs	r1, #142	; 0x8e
     8f6:	685a      	ldr	r2, [r3, #4]
     8f8:	0049      	lsls	r1, r1, #1
     8fa:	18a2      	adds	r2, r4, r2
     8fc:	5455      	strb	r5, [r2, r1]
    _iHead = i ;
     8fe:	605e      	str	r6, [r3, #4]
    sercom->enableDataRegisterEmptyInterruptUART();
     900:	6920      	ldr	r0, [r4, #16]
     902:	f001 fd36 	bl	2372 <_ZN6SERCOM36enableDataRegisterEmptyInterruptUARTEv>
}
     906:	2001      	movs	r0, #1
     908:	bd70      	pop	{r4, r5, r6, pc}
     90a:	46c0      	nop			; (mov r8, r8)
     90c:	e000ed00 	.word	0xe000ed00
     910:	e000e100 	.word	0xe000e100
     914:	e000ed1c 	.word	0xe000ed1c

00000918 <_ZN4Uart4readEv>:
  if(_iTail == _iHead)
     918:	0003      	movs	r3, r0
     91a:	33fc      	adds	r3, #252	; 0xfc
     91c:	69d9      	ldr	r1, [r3, #28]
     91e:	699a      	ldr	r2, [r3, #24]
{
     920:	b570      	push	{r4, r5, r6, lr}
     922:	0004      	movs	r4, r0
     924:	4291      	cmp	r1, r2
     926:	d01a      	beq.n	95e <_ZN4Uart4readEv+0x46>
  uint8_t value = _aucBuffer[_iTail];
     928:	69da      	ldr	r2, [r3, #28]
     92a:	1882      	adds	r2, r0, r2
     92c:	7d15      	ldrb	r5, [r2, #20]
  _iTail = nextIndex(_iTail);
     92e:	69da      	ldr	r2, [r3, #28]
  return (uint32_t)(index + 1) % N;
     930:	3201      	adds	r2, #1
     932:	b2d2      	uxtb	r2, r2
  _iTail = nextIndex(_iTail);
     934:	61da      	str	r2, [r3, #28]
  if (uc_pinRTS != NO_RTS_PIN) {
     936:	238a      	movs	r3, #138	; 0x8a
     938:	009b      	lsls	r3, r3, #2
     93a:	5ce3      	ldrb	r3, [r4, r3]
     93c:	2bff      	cmp	r3, #255	; 0xff
     93e:	d00c      	beq.n	95a <_ZN4Uart4readEv+0x42>
  int c = rxBuffer.read_char();
     940:	0020      	movs	r0, r4
     942:	3014      	adds	r0, #20
    if (rxBuffer.availableForStore() > RTS_RX_THRESHOLD) {
     944:	f7ff ff11 	bl	76a <_ZN11RingBufferNILi256EE17availableForStoreEv>
     948:	280a      	cmp	r0, #10
     94a:	dd06      	ble.n	95a <_ZN4Uart4readEv+0x42>
      *pul_outclrRTS = ul_pinMaskRTS;
     94c:	238c      	movs	r3, #140	; 0x8c
     94e:	228d      	movs	r2, #141	; 0x8d
     950:	009b      	lsls	r3, r3, #2
     952:	0092      	lsls	r2, r2, #2
     954:	58e3      	ldr	r3, [r4, r3]
     956:	58a2      	ldr	r2, [r4, r2]
     958:	601a      	str	r2, [r3, #0]
}
     95a:	0028      	movs	r0, r5
     95c:	bd70      	pop	{r4, r5, r6, pc}
    return -1;
     95e:	2501      	movs	r5, #1
     960:	426d      	negs	r5, r5
     962:	e7e8      	b.n	936 <_ZN4Uart4readEv+0x1e>

00000964 <_ZN7Serial_13getDescriptorER8USBSetup>:
}

int Serial_::getDescriptor(USBSetup& /* setup */)
{
	return 0;
}
     964:	2000      	movs	r0, #0
     966:	4770      	bx	lr

00000968 <_ZThn16_N7Serial_13getDescriptorER8USBSetup>:
	};

protected:
    // Implementation of the PUSBListNode
    int getInterface(uint8_t* interfaceNum);
    int getDescriptor(USBSetup& setup);
     968:	b408      	push	{r3}
     96a:	4b02      	ldr	r3, [pc, #8]	; (974 <_ZThn16_N7Serial_13getDescriptorER8USBSetup+0xc>)
     96c:	469c      	mov	ip, r3
     96e:	3810      	subs	r0, #16
     970:	bc08      	pop	{r3}
     972:	4760      	bx	ip
     974:	00000965 	.word	0x00000965

00000978 <_ZL5utox8mPc>:

static void utox8(uint32_t val, char* s) {
     978:	b530      	push	{r4, r5, lr}
	for (int i = 0; i < 8; i++) {
		int d = val & 0XF;
     97a:	250f      	movs	r5, #15
     97c:	1dcb      	adds	r3, r1, #7
     97e:	3901      	subs	r1, #1
     980:	0002      	movs	r2, r0
     982:	402a      	ands	r2, r5
		val = (val >> 4);

		s[7 - i] = d > 9 ? 'A' + d - 10 : '0' + d;
     984:	0014      	movs	r4, r2
		val = (val >> 4);
     986:	0900      	lsrs	r0, r0, #4
		s[7 - i] = d > 9 ? 'A' + d - 10 : '0' + d;
     988:	3430      	adds	r4, #48	; 0x30
     98a:	2a09      	cmp	r2, #9
     98c:	dd01      	ble.n	992 <_ZL5utox8mPc+0x1a>
     98e:	3237      	adds	r2, #55	; 0x37
     990:	0014      	movs	r4, r2
     992:	701c      	strb	r4, [r3, #0]
     994:	3b01      	subs	r3, #1
	for (int i = 0; i < 8; i++) {
     996:	428b      	cmp	r3, r1
     998:	d1f2      	bne.n	980 <_ZL5utox8mPc+0x8>
	}
}
     99a:	bd30      	pop	{r4, r5, pc}

0000099c <_ZN7Serial_12getShortNameEPc>:

uint8_t Serial_::getShortName(char* name) {
     99c:	b510      	push	{r4, lr}
     99e:	000c      	movs	r4, r1
	#define SERIAL_NUMBER_WORD_0	*(volatile uint32_t*)(0x0080A00C)
	#define SERIAL_NUMBER_WORD_1	*(volatile uint32_t*)(0x0080A040)
	#define SERIAL_NUMBER_WORD_2	*(volatile uint32_t*)(0x0080A044)
	#define SERIAL_NUMBER_WORD_3	*(volatile uint32_t*)(0x0080A048)

	utox8(SERIAL_NUMBER_WORD_0, &name[0]);
     9a0:	4b0b      	ldr	r3, [pc, #44]	; (9d0 <_ZN7Serial_12getShortNameEPc+0x34>)
     9a2:	6818      	ldr	r0, [r3, #0]
     9a4:	f7ff ffe8 	bl	978 <_ZL5utox8mPc>
	utox8(SERIAL_NUMBER_WORD_1, &name[8]);
     9a8:	0021      	movs	r1, r4
     9aa:	4b0a      	ldr	r3, [pc, #40]	; (9d4 <_ZN7Serial_12getShortNameEPc+0x38>)
     9ac:	3108      	adds	r1, #8
     9ae:	6818      	ldr	r0, [r3, #0]
     9b0:	f7ff ffe2 	bl	978 <_ZL5utox8mPc>
	utox8(SERIAL_NUMBER_WORD_2, &name[16]);
     9b4:	0021      	movs	r1, r4
     9b6:	4b08      	ldr	r3, [pc, #32]	; (9d8 <_ZN7Serial_12getShortNameEPc+0x3c>)
     9b8:	3110      	adds	r1, #16
     9ba:	6818      	ldr	r0, [r3, #0]
     9bc:	f7ff ffdc 	bl	978 <_ZL5utox8mPc>
	utox8(SERIAL_NUMBER_WORD_3, &name[24]);
     9c0:	0021      	movs	r1, r4
     9c2:	4b06      	ldr	r3, [pc, #24]	; (9dc <_ZN7Serial_12getShortNameEPc+0x40>)
     9c4:	3118      	adds	r1, #24
     9c6:	6818      	ldr	r0, [r3, #0]
     9c8:	f7ff ffd6 	bl	978 <_ZL5utox8mPc>
	return 32;
}
     9cc:	2020      	movs	r0, #32
     9ce:	bd10      	pop	{r4, pc}
     9d0:	0080a00c 	.word	0x0080a00c
     9d4:	0080a040 	.word	0x0080a040
     9d8:	0080a044 	.word	0x0080a044
     9dc:	0080a048 	.word	0x0080a048

000009e0 <_ZThn16_N7Serial_12getShortNameEPc>:
    bool setup(USBSetup& setup);
    uint8_t getShortName(char* name);
     9e0:	b408      	push	{r3}
     9e2:	4b02      	ldr	r3, [pc, #8]	; (9ec <_ZThn16_N7Serial_12getShortNameEPc+0xc>)
     9e4:	469c      	mov	ip, r3
     9e6:	3810      	subs	r0, #16
     9e8:	bc08      	pop	{r3}
     9ea:	4760      	bx	ip
     9ec:	0000099d 	.word	0x0000099d

000009f0 <_ZN7Serial_14handleEndpointEi>:

void Serial_::handleEndpoint(int /* ep */) {
}
     9f0:	4770      	bx	lr
	...

000009f4 <_ZThn16_N7Serial_14handleEndpointEi>:
    void handleEndpoint(int ep);
     9f4:	b408      	push	{r3}
     9f6:	4b02      	ldr	r3, [pc, #8]	; (a00 <_ZThn16_N7Serial_14handleEndpointEi+0xc>)
     9f8:	469c      	mov	ip, r3
     9fa:	3810      	subs	r0, #16
     9fc:	bc08      	pop	{r3}
     9fe:	4760      	bx	ip
     a00:	000009f1 	.word	0x000009f1

00000a04 <_ZN7Serial_17availableForWriteEv>:
int Serial_::availableForWrite(void)
{
	// return the number of bytes left in the current bank,
	// always EP size - 1, because bank is flushed on every write
	return (EPX_SIZE - 1);
}
     a04:	203f      	movs	r0, #63	; 0x3f
     a06:	4770      	bx	lr

00000a08 <_ZN7Serial_5writeEh>:
		setWriteError();
		return 0;
	}
}

size_t Serial_::write(uint8_t c) {
     a08:	b513      	push	{r0, r1, r4, lr}
     a0a:	466b      	mov	r3, sp
	return write(&c, 1);
     a0c:	6802      	ldr	r2, [r0, #0]
size_t Serial_::write(uint8_t c) {
     a0e:	71d9      	strb	r1, [r3, #7]
     a10:	3307      	adds	r3, #7
	return write(&c, 1);
     a12:	6854      	ldr	r4, [r2, #4]
     a14:	0019      	movs	r1, r3
     a16:	2201      	movs	r2, #1
     a18:	47a0      	blx	r4
}
     a1a:	bd16      	pop	{r1, r2, r4, pc}

00000a1c <_ZN7Serial_12getInterfaceEPh>:
{
     a1c:	b5f0      	push	{r4, r5, r6, r7, lr}
	interfaceNum[0] += 2;	// uses 2
     a1e:	780b      	ldrb	r3, [r1, #0]
{
     a20:	b095      	sub	sp, #84	; 0x54
	};
     a22:	ac03      	add	r4, sp, #12
	interfaceNum[0] += 2;	// uses 2
     a24:	3302      	adds	r3, #2
{
     a26:	9001      	str	r0, [sp, #4]
	interfaceNum[0] += 2;	// uses 2
     a28:	700b      	strb	r3, [r1, #0]
	};
     a2a:	2242      	movs	r2, #66	; 0x42
     a2c:	2100      	movs	r1, #0
     a2e:	0020      	movs	r0, r4
     a30:	f001 fe05 	bl	263e <memset>
     a34:	2209      	movs	r2, #9
     a36:	2504      	movs	r5, #4
     a38:	7222      	strb	r2, [r4, #8]
     a3a:	2204      	movs	r2, #4
     a3c:	75a5      	strb	r5, [r4, #22]
     a3e:	7262      	strb	r2, [r4, #9]
     a40:	2506      	movs	r5, #6
     a42:	2205      	movs	r2, #5
     a44:	2024      	movs	r0, #36	; 0x24
     a46:	ae02      	add	r6, sp, #8
     a48:	7665      	strb	r5, [r4, #25]
     a4a:	7725      	strb	r5, [r4, #28]
     a4c:	1995      	adds	r5, r2, r6
     a4e:	74a0      	strb	r0, [r4, #18]
     a50:	75e0      	strb	r0, [r4, #23]
     a52:	76e0      	strb	r0, [r4, #27]
     a54:	77e8      	strb	r0, [r5, #31]
     a56:	0030      	movs	r0, r6
     a58:	2101      	movs	r1, #1
     a5a:	3006      	adds	r0, #6
     a5c:	77c1      	strb	r1, [r0, #31]
     a5e:	0030      	movs	r0, r6
     a60:	3007      	adds	r0, #7
     a62:	77c1      	strb	r1, [r0, #31]
     a64:	a804      	add	r0, sp, #16
     a66:	77c1      	strb	r1, [r0, #31]
     a68:	2009      	movs	r0, #9
     a6a:	7321      	strb	r1, [r4, #12]
     a6c:	7561      	strb	r1, [r4, #21]
     a6e:	1980      	adds	r0, r0, r6
     a70:	3106      	adds	r1, #6
     a72:	77c1      	strb	r1, [r0, #31]
     a74:	200a      	movs	r0, #10
     a76:	1980      	adds	r0, r0, r6
     a78:	77c2      	strb	r2, [r0, #31]
     a7a:	2003      	movs	r0, #3
     a7c:	4684      	mov	ip, r0
     a7e:	4665      	mov	r5, ip
     a80:	a805      	add	r0, sp, #20
     a82:	77c5      	strb	r5, [r0, #31]
     a84:	202e      	movs	r0, #46	; 0x2e
     a86:	2710      	movs	r7, #16
     a88:	1980      	adds	r0, r0, r6
     a8a:	7007      	strb	r7, [r0, #0]
     a8c:	202f      	movs	r0, #47	; 0x2f
     a8e:	2509      	movs	r5, #9
     a90:	2308      	movs	r3, #8
     a92:	1980      	adds	r0, r0, r6
     a94:	7005      	strb	r5, [r0, #0]
     a96:	2504      	movs	r5, #4
     a98:	7023      	strb	r3, [r4, #0]
     a9a:	3303      	adds	r3, #3
     a9c:	7063      	strb	r3, [r4, #1]
     a9e:	a80e      	add	r0, sp, #56	; 0x38
     aa0:	3b09      	subs	r3, #9
     aa2:	70e3      	strb	r3, [r4, #3]
     aa4:	7123      	strb	r3, [r4, #4]
     aa6:	7163      	strb	r3, [r4, #5]
     aa8:	7363      	strb	r3, [r4, #13]
     aaa:	73a3      	strb	r3, [r4, #14]
     aac:	7462      	strb	r2, [r4, #17]
     aae:	7623      	strb	r3, [r4, #24]
     ab0:	76a2      	strb	r2, [r4, #26]
     ab2:	77e2      	strb	r2, [r4, #31]
     ab4:	7527      	strb	r7, [r4, #20]
     ab6:	8527      	strh	r7, [r4, #40]	; 0x28
     ab8:	7005      	strb	r5, [r0, #0]
     aba:	2033      	movs	r0, #51	; 0x33
     abc:	0035      	movs	r5, r6
     abe:	1980      	adds	r0, r0, r6
     ac0:	260a      	movs	r6, #10
     ac2:	7003      	strb	r3, [r0, #0]
     ac4:	a80f      	add	r0, sp, #60	; 0x3c
     ac6:	7006      	strb	r6, [r0, #0]
     ac8:	a810      	add	r0, sp, #64	; 0x40
     aca:	7001      	strb	r1, [r0, #0]
     acc:	2039      	movs	r0, #57	; 0x39
     ace:	1940      	adds	r0, r0, r5
     ad0:	7002      	strb	r2, [r0, #0]
     ad2:	203b      	movs	r0, #59	; 0x3b
     ad4:	3635      	adds	r6, #53	; 0x35
     ad6:	1976      	adds	r6, r6, r5
     ad8:	7031      	strb	r1, [r6, #0]
     ada:	a912      	add	r1, sp, #72	; 0x48
     adc:	700a      	strb	r2, [r1, #0]
		D_ENDPOINT(USB_ENDPOINT_IN(CDC_ENDPOINT_ACM), USB_ENDPOINT_TYPE_INTERRUPT, 0x10, 0x10),
     ade:	2180      	movs	r1, #128	; 0x80
	};
     ae0:	323d      	adds	r2, #61	; 0x3d
     ae2:	1940      	adds	r0, r0, r5
     ae4:	1952      	adds	r2, r2, r5
     ae6:	7003      	strb	r3, [r0, #0]
     ae8:	7013      	strb	r3, [r2, #0]
     aea:	2040      	movs	r0, #64	; 0x40
     aec:	2200      	movs	r2, #0
		D_ENDPOINT(USB_ENDPOINT_IN(CDC_ENDPOINT_ACM), USB_ENDPOINT_TYPE_INTERRUPT, 0x10, 0x10),
     aee:	4249      	negs	r1, r1
     af0:	000e      	movs	r6, r1
	};
     af2:	3341      	adds	r3, #65	; 0x41
     af4:	195b      	adds	r3, r3, r5
     af6:	7018      	strb	r0, [r3, #0]
     af8:	705a      	strb	r2, [r3, #1]
		D_IAD(pluggedInterface, 2, CDC_COMMUNICATION_INTERFACE_CLASS, CDC_ABSTRACT_CONTROL_MODEL, 0),
     afa:	9b01      	ldr	r3, [sp, #4]
	};
     afc:	8720      	strh	r0, [r4, #56]	; 0x38
		D_IAD(pluggedInterface, 2, CDC_COMMUNICATION_INTERFACE_CLASS, CDC_ABSTRACT_CONTROL_MODEL, 0),
     afe:	7d1b      	ldrb	r3, [r3, #20]
		D_ENDPOINT(USB_ENDPOINT_IN(CDC_ENDPOINT_ACM), USB_ENDPOINT_TYPE_INTERRUPT, 0x10, 0x10),
     b00:	9a01      	ldr	r2, [sp, #4]
	};
     b02:	70a3      	strb	r3, [r4, #2]
     b04:	72a3      	strb	r3, [r4, #10]
     b06:	7763      	strb	r3, [r4, #29]
		D_CDCCS(CDC_UNION, CDC_ACM_INTERFACE, CDC_DATA_INTERFACE), // Communication interface is master, data interface is slave 0
     b08:	3301      	adds	r3, #1
     b0a:	b2db      	uxtb	r3, r3
	};
     b0c:	77a3      	strb	r3, [r4, #30]
		D_ENDPOINT(USB_ENDPOINT_IN(CDC_ENDPOINT_ACM), USB_ENDPOINT_TYPE_INTERRUPT, 0x10, 0x10),
     b0e:	7d52      	ldrb	r2, [r2, #21]
	};
     b10:	3835      	subs	r0, #53	; 0x35
		D_ENDPOINT(USB_ENDPOINT_IN(CDC_ENDPOINT_ACM), USB_ENDPOINT_TYPE_INTERRUPT, 0x10, 0x10),
     b12:	4316      	orrs	r6, r2
	};
     b14:	1940      	adds	r0, r0, r5
     b16:	77c6      	strb	r6, [r0, #31]
     b18:	2031      	movs	r0, #49	; 0x31
     b1a:	1940      	adds	r0, r0, r5
     b1c:	7003      	strb	r3, [r0, #0]
     b1e:	233a      	movs	r3, #58	; 0x3a
		D_ENDPOINT(USB_ENDPOINT_OUT(CDC_ENDPOINT_OUT), USB_ENDPOINT_TYPE_BULK, EPX_SIZE, 0),
     b20:	1c50      	adds	r0, r2, #1
	};
     b22:	195b      	adds	r3, r3, r5
     b24:	7018      	strb	r0, [r3, #0]
     b26:	2341      	movs	r3, #65	; 0x41
		D_ENDPOINT(USB_ENDPOINT_IN (CDC_ENDPOINT_IN), USB_ENDPOINT_TYPE_BULK, EPX_SIZE, 0)
     b28:	3202      	adds	r2, #2
     b2a:	430a      	orrs	r2, r1
	};
     b2c:	195b      	adds	r3, r3, r5
     b2e:	701a      	strb	r2, [r3, #0]
	return USBDevice.sendControl(&_cdcInterface, sizeof(_cdcInterface));
     b30:	0021      	movs	r1, r4
     b32:	2242      	movs	r2, #66	; 0x42
     b34:	4802      	ldr	r0, [pc, #8]	; (b40 <_ZN7Serial_12getInterfaceEPh+0x124>)
     b36:	f000 ff57 	bl	19e8 <_ZN14USBDeviceClass11sendControlEPKvm>
}
     b3a:	b015      	add	sp, #84	; 0x54
     b3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
     b3e:	46c0      	nop			; (mov r8, r8)
     b40:	2000012c 	.word	0x2000012c

00000b44 <_ZThn16_N7Serial_12getInterfaceEPh>:
    int getInterface(uint8_t* interfaceNum);
     b44:	b408      	push	{r3}
     b46:	4b02      	ldr	r3, [pc, #8]	; (b50 <_ZThn16_N7Serial_12getInterfaceEPh+0xc>)
     b48:	469c      	mov	ip, r3
     b4a:	3810      	subs	r0, #16
     b4c:	bc08      	pop	{r3}
     b4e:	4760      	bx	ip
     b50:	00000a1d 	.word	0x00000a1d

00000b54 <_ZN7Serial_5setupER8USBSetup>:
{
     b54:	b570      	push	{r4, r5, r6, lr}
	if (CDC_ACM_INTERFACE != i) {
     b56:	790a      	ldrb	r2, [r1, #4]
     b58:	7d03      	ldrb	r3, [r0, #20]
{
     b5a:	000c      	movs	r4, r1
		return false;
     b5c:	2500      	movs	r5, #0
	if (CDC_ACM_INTERFACE != i) {
     b5e:	429a      	cmp	r2, r3
     b60:	d10b      	bne.n	b7a <_ZN7Serial_5setupER8USBSetup+0x26>
	uint8_t requestType = setup.bmRequestType;
     b62:	780b      	ldrb	r3, [r1, #0]
	uint8_t r = setup.bRequest;
     b64:	784e      	ldrb	r6, [r1, #1]
	if (requestType == REQUEST_DEVICETOHOST_CLASS_INTERFACE)
     b66:	2ba1      	cmp	r3, #161	; 0xa1
     b68:	d109      	bne.n	b7e <_ZN7Serial_5setupER8USBSetup+0x2a>
		if (r == CDC_GET_LINE_CODING)
     b6a:	2e21      	cmp	r6, #33	; 0x21
     b6c:	d105      	bne.n	b7a <_ZN7Serial_5setupER8USBSetup+0x26>
			USBDevice.sendControl((void*)&_usbLineInfo, 7);
     b6e:	2207      	movs	r2, #7
     b70:	491f      	ldr	r1, [pc, #124]	; (bf0 <_ZN7Serial_5setupER8USBSetup+0x9c>)
     b72:	4820      	ldr	r0, [pc, #128]	; (bf4 <_ZN7Serial_5setupER8USBSetup+0xa0>)
     b74:	f000 ff38 	bl	19e8 <_ZN14USBDeviceClass11sendControlEPKvm>
			return true;
     b78:	3501      	adds	r5, #1
}
     b7a:	0028      	movs	r0, r5
     b7c:	bd70      	pop	{r4, r5, r6, pc}
	if (requestType == REQUEST_HOSTTODEVICE_CLASS_INTERFACE)
     b7e:	2b21      	cmp	r3, #33	; 0x21
     b80:	d1fb      	bne.n	b7a <_ZN7Serial_5setupER8USBSetup+0x26>
		if (r == CDC_SET_LINE_CODING)
     b82:	2e20      	cmp	r6, #32
     b84:	d119      	bne.n	bba <_ZN7Serial_5setupER8USBSetup+0x66>
			USBDevice.recvControl((void*)&_usbLineInfo, 7);
     b86:	2207      	movs	r2, #7
     b88:	4919      	ldr	r1, [pc, #100]	; (bf0 <_ZN7Serial_5setupER8USBSetup+0x9c>)
     b8a:	481a      	ldr	r0, [pc, #104]	; (bf4 <_ZN7Serial_5setupER8USBSetup+0xa0>)
     b8c:	f000 fe62 	bl	1854 <_ZN14USBDeviceClass11recvControlEPvm>
			if (_usbLineInfo.dwDTERate == 1200 && (_usbLineInfo.lineState & CDC_LINESTATE_DTR) == 0)
     b90:	4b17      	ldr	r3, [pc, #92]	; (bf0 <_ZN7Serial_5setupER8USBSetup+0x9c>)
     b92:	781a      	ldrb	r2, [r3, #0]
     b94:	7859      	ldrb	r1, [r3, #1]
     b96:	0209      	lsls	r1, r1, #8
     b98:	4311      	orrs	r1, r2
     b9a:	789a      	ldrb	r2, [r3, #2]
     b9c:	0412      	lsls	r2, r2, #16
     b9e:	4311      	orrs	r1, r2
     ba0:	78da      	ldrb	r2, [r3, #3]
     ba2:	0612      	lsls	r2, r2, #24
     ba4:	430a      	orrs	r2, r1
     ba6:	2196      	movs	r1, #150	; 0x96
     ba8:	00c9      	lsls	r1, r1, #3
     baa:	428a      	cmp	r2, r1
     bac:	d102      	bne.n	bb4 <_ZN7Serial_5setupER8USBSetup+0x60>
     bae:	79db      	ldrb	r3, [r3, #7]
     bb0:	07db      	lsls	r3, r3, #31
     bb2:	d508      	bpl.n	bc6 <_ZN7Serial_5setupER8USBSetup+0x72>
				cancelReset();
     bb4:	f7ff fbba 	bl	32c <cancelReset>
     bb8:	e008      	b.n	bcc <_ZN7Serial_5setupER8USBSetup+0x78>
		if (r == CDC_SET_CONTROL_LINE_STATE)
     bba:	2e22      	cmp	r6, #34	; 0x22
     bbc:	d10a      	bne.n	bd4 <_ZN7Serial_5setupER8USBSetup+0x80>
			_usbLineInfo.lineState = setup.wValueL;
     bbe:	788a      	ldrb	r2, [r1, #2]
     bc0:	4b0b      	ldr	r3, [pc, #44]	; (bf0 <_ZN7Serial_5setupER8USBSetup+0x9c>)
     bc2:	71da      	strb	r2, [r3, #7]
     bc4:	e7e4      	b.n	b90 <_ZN7Serial_5setupER8USBSetup+0x3c>
				initiateReset(250);
     bc6:	20fa      	movs	r0, #250	; 0xfa
     bc8:	f7ff fba6 	bl	318 <initiateReset>
			USBDevice.sendZlp(0);
     bcc:	2100      	movs	r1, #0
     bce:	4809      	ldr	r0, [pc, #36]	; (bf4 <_ZN7Serial_5setupER8USBSetup+0xa0>)
     bd0:	f001 f820 	bl	1c14 <_ZN14USBDeviceClass7sendZlpEm>
		return true;
     bd4:	2501      	movs	r5, #1
		if (CDC_SEND_BREAK == r)
     bd6:	2e23      	cmp	r6, #35	; 0x23
     bd8:	d1cf      	bne.n	b7a <_ZN7Serial_5setupER8USBSetup+0x26>
			breakValue = ((uint16_t)setup.wValueH << 8) | setup.wValueL;
     bda:	78e3      	ldrb	r3, [r4, #3]
     bdc:	78a2      	ldrb	r2, [r4, #2]
     bde:	021b      	lsls	r3, r3, #8
     be0:	4313      	orrs	r3, r2
     be2:	4a05      	ldr	r2, [pc, #20]	; (bf8 <_ZN7Serial_5setupER8USBSetup+0xa4>)
			USBDevice.sendZlp(0);
     be4:	2100      	movs	r1, #0
     be6:	4803      	ldr	r0, [pc, #12]	; (bf4 <_ZN7Serial_5setupER8USBSetup+0xa0>)
			breakValue = ((uint16_t)setup.wValueH << 8) | setup.wValueL;
     be8:	6013      	str	r3, [r2, #0]
			USBDevice.sendZlp(0);
     bea:	f001 f813 	bl	1c14 <_ZN14USBDeviceClass7sendZlpEm>
     bee:	e7c4      	b.n	b7a <_ZN7Serial_5setupER8USBSetup+0x26>
     bf0:	20000008 	.word	0x20000008
     bf4:	2000012c 	.word	0x2000012c
     bf8:	20000004 	.word	0x20000004

00000bfc <_ZThn16_N7Serial_5setupER8USBSetup>:
    bool setup(USBSetup& setup);
     bfc:	b408      	push	{r3}
     bfe:	4b02      	ldr	r3, [pc, #8]	; (c08 <_ZThn16_N7Serial_5setupER8USBSetup+0xc>)
     c00:	469c      	mov	ip, r3
     c02:	3810      	subs	r0, #16
     c04:	bc08      	pop	{r3}
     c06:	4760      	bx	ip
     c08:	00000b55 	.word	0x00000b55

00000c0c <_ZN7Serial_9availableEv>:
{
     c0c:	b510      	push	{r4, lr}
	return usb.available(CDC_ENDPOINT_OUT) + (_serialPeek != -1);
     c0e:	7d41      	ldrb	r1, [r0, #21]
     c10:	6a00      	ldr	r0, [r0, #32]
     c12:	3101      	adds	r1, #1
     c14:	f000 fd48 	bl	16a8 <_ZN14USBDeviceClass9availableEm>
     c18:	4b03      	ldr	r3, [pc, #12]	; (c28 <_ZN7Serial_9availableEv+0x1c>)
     c1a:	681b      	ldr	r3, [r3, #0]
     c1c:	3301      	adds	r3, #1
     c1e:	1e5a      	subs	r2, r3, #1
     c20:	4193      	sbcs	r3, r2
     c22:	1818      	adds	r0, r3, r0
}
     c24:	bd10      	pop	{r4, pc}
     c26:	46c0      	nop			; (mov r8, r8)
     c28:	20000010 	.word	0x20000010

00000c2c <_ZN7Serial_5flushEv>:
{
     c2c:	b510      	push	{r4, lr}
	usb.flush(CDC_ENDPOINT_IN);
     c2e:	7d41      	ldrb	r1, [r0, #21]
     c30:	6a00      	ldr	r0, [r0, #32]
     c32:	3102      	adds	r1, #2
     c34:	f000 fd4e 	bl	16d4 <_ZN14USBDeviceClass5flushEm>
}
     c38:	bd10      	pop	{r4, pc}

00000c3a <_ZN7Serial_5clearEv>:
void Serial_::clear(void) {
     c3a:	b510      	push	{r4, lr}
	usb.clear(CDC_ENDPOINT_IN);
     c3c:	7d41      	ldrb	r1, [r0, #21]
     c3e:	6a00      	ldr	r0, [r0, #32]
     c40:	3102      	adds	r1, #2
     c42:	f000 fd15 	bl	1670 <_ZN14USBDeviceClass5clearEm>
}
     c46:	bd10      	pop	{r4, pc}

00000c48 <_ZN7Serial_5writeEPKhj>:
{
     c48:	b570      	push	{r4, r5, r6, lr}
     c4a:	000d      	movs	r5, r1
	uint32_t r = usb.send(CDC_ENDPOINT_IN, buffer, size);
     c4c:	7d41      	ldrb	r1, [r0, #21]
{
     c4e:	0004      	movs	r4, r0
     c50:	0013      	movs	r3, r2
	uint32_t r = usb.send(CDC_ENDPOINT_IN, buffer, size);
     c52:	3102      	adds	r1, #2
     c54:	002a      	movs	r2, r5
     c56:	6a00      	ldr	r0, [r0, #32]
     c58:	f000 fe10 	bl	187c <_ZN14USBDeviceClass4sendEmPKvm>
	if (r > 0) {
     c5c:	2800      	cmp	r0, #0
     c5e:	d101      	bne.n	c64 <_ZN7Serial_5writeEPKhj+0x1c>
    void setWriteError(int err = 1) { write_error = err; }
     c60:	2301      	movs	r3, #1
     c62:	6063      	str	r3, [r4, #4]
}
     c64:	bd70      	pop	{r4, r5, r6, pc}
	...

00000c68 <_ZN7Serial_4peekEv>:
{
     c68:	b510      	push	{r4, lr}
	if (_serialPeek != -1)
     c6a:	4c05      	ldr	r4, [pc, #20]	; (c80 <_ZN7Serial_4peekEv+0x18>)
     c6c:	6823      	ldr	r3, [r4, #0]
     c6e:	1c5a      	adds	r2, r3, #1
     c70:	d104      	bne.n	c7c <_ZN7Serial_4peekEv+0x14>
	_serialPeek = read();
     c72:	6803      	ldr	r3, [r0, #0]
     c74:	695b      	ldr	r3, [r3, #20]
     c76:	4798      	blx	r3
     c78:	0003      	movs	r3, r0
     c7a:	6020      	str	r0, [r4, #0]
}
     c7c:	0018      	movs	r0, r3
     c7e:	bd10      	pop	{r4, pc}
     c80:	20000010 	.word	0x20000010

00000c84 <_ZN7Serial_4readEv>:
	if (_serialPeek != -1) {
     c84:	4a07      	ldr	r2, [pc, #28]	; (ca4 <_ZN7Serial_4readEv+0x20>)
{
     c86:	0003      	movs	r3, r0
	if (_serialPeek != -1) {
     c88:	6810      	ldr	r0, [r2, #0]
{
     c8a:	b510      	push	{r4, lr}
	if (_serialPeek != -1) {
     c8c:	1c41      	adds	r1, r0, #1
     c8e:	d003      	beq.n	c98 <_ZN7Serial_4readEv+0x14>
		_serialPeek = -1;
     c90:	2301      	movs	r3, #1
     c92:	425b      	negs	r3, r3
     c94:	6013      	str	r3, [r2, #0]
}
     c96:	bd10      	pop	{r4, pc}
	return usb.recv(CDC_ENDPOINT_OUT);
     c98:	7d59      	ldrb	r1, [r3, #21]
     c9a:	6a18      	ldr	r0, [r3, #32]
     c9c:	3101      	adds	r1, #1
     c9e:	f000 fd9d 	bl	17dc <_ZN14USBDeviceClass4recvEm>
     ca2:	e7f8      	b.n	c96 <_ZN7Serial_4readEv+0x12>
     ca4:	20000010 	.word	0x20000010

00000ca8 <_ZN7Serial_C1ER14USBDeviceClass>:
     ca8:	23fa      	movs	r3, #250	; 0xfa
     caa:	009b      	lsls	r3, r3, #2
Serial_::Serial_(USBDeviceClass &_usb) : PluggableUSBModule(3, 2, epType), usb(_usb), stalled(false)
     cac:	b570      	push	{r4, r5, r6, lr}
     cae:	0004      	movs	r4, r0
     cb0:	6083      	str	r3, [r0, #8]
#if defined(USBCON)

class PluggableUSBModule {
public:
  PluggableUSBModule(uint8_t numEps, uint8_t numIfs, uint32_t *epType) :
    numEndpoints(numEps), numInterfaces(numIfs), endpointType(epType)
     cb2:	2303      	movs	r3, #3
     cb4:	7583      	strb	r3, [r0, #22]
     cb6:	0023      	movs	r3, r4
    Print() : write_error(0) {}
     cb8:	2200      	movs	r2, #0
     cba:	3328      	adds	r3, #40	; 0x28
     cbc:	6042      	str	r2, [r0, #4]
     cbe:	61a3      	str	r3, [r4, #24]
     cc0:	4b0c      	ldr	r3, [pc, #48]	; (cf4 <_ZN7Serial_C1ER14USBDeviceClass+0x4c>)
     cc2:	2002      	movs	r0, #2
     cc4:	001d      	movs	r5, r3
     cc6:	3344      	adds	r3, #68	; 0x44
     cc8:	6123      	str	r3, [r4, #16]
     cca:	3508      	adds	r5, #8
     ccc:	1d63      	adds	r3, r4, #5
     cce:	61e2      	str	r2, [r4, #28]
     cd0:	6025      	str	r5, [r4, #0]
     cd2:	6221      	str	r1, [r4, #32]
     cd4:	75e0      	strb	r0, [r4, #23]
     cd6:	77da      	strb	r2, [r3, #31]
  epType[0] = USB_ENDPOINT_TYPE_INTERRUPT | USB_ENDPOINT_IN(0);
     cd8:	2383      	movs	r3, #131	; 0x83
     cda:	62a3      	str	r3, [r4, #40]	; 0x28
  epType[2] = USB_ENDPOINT_TYPE_BULK | USB_ENDPOINT_IN(0);
     cdc:	3b01      	subs	r3, #1
     cde:	6323      	str	r3, [r4, #48]	; 0x30
  epType[1] = USB_ENDPOINT_TYPE_BULK | USB_ENDPOINT_OUT(0);
     ce0:	62e0      	str	r0, [r4, #44]	; 0x2c
  PluggableUSB().plug(this);
     ce2:	f000 f8ad 	bl	e40 <_Z12PluggableUSBv>
Serial_::Serial_(USBDeviceClass &_usb) : PluggableUSBModule(3, 2, epType), usb(_usb), stalled(false)
     ce6:	0021      	movs	r1, r4
     ce8:	3110      	adds	r1, #16
  PluggableUSB().plug(this);
     cea:	f000 f87d 	bl	de8 <_ZN13PluggableUSB_4plugEP18PluggableUSBModule>
}
     cee:	0020      	movs	r0, r4
     cf0:	bd70      	pop	{r4, r5, r6, pc}
     cf2:	46c0      	nop			; (mov r8, r8)
     cf4:	00002840 	.word	0x00002840

00000cf8 <_ZN7Serial_15enableInterruptEv>:
void Serial_::enableInterrupt() {
     cf8:	b510      	push	{r4, lr}
	usbd.epBank1EnableTransferComplete(CDC_ENDPOINT_ACM);
     cfa:	7d43      	ldrb	r3, [r0, #21]
	inline void epBank0EnableStalled(ep_t ep)          { usb.DeviceEndpoint[ep].EPINTENSET.bit.STALL0 = 1; }
	inline void epBank1EnableStalled(ep_t ep)          { usb.DeviceEndpoint[ep].EPINTENSET.bit.STALL1 = 1; }
	inline void epBank0EnableTransferFailed(ep_t ep)   { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRFAIL0 = 1; }
	inline void epBank1EnableTransferFailed(ep_t ep)   { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRFAIL1 = 1; }
	inline void epBank0EnableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRCPT0 = 1; }
	inline void epBank1EnableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRCPT1 = 1; }
     cfc:	4a09      	ldr	r2, [pc, #36]	; (d24 <_ZN7Serial_15enableInterruptEv+0x2c>)
     cfe:	2002      	movs	r0, #2
     d00:	0159      	lsls	r1, r3, #5
	usbd.epBank0EnableTransferComplete(CDC_ENDPOINT_OUT);
     d02:	3301      	adds	r3, #1
     d04:	6812      	ldr	r2, [r2, #0]
	inline void epBank0EnableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRCPT0 = 1; }
     d06:	b2db      	uxtb	r3, r3
     d08:	015b      	lsls	r3, r3, #5
	inline void epBank1EnableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRCPT1 = 1; }
     d0a:	1851      	adds	r1, r2, r1
	inline void epBank0EnableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRCPT0 = 1; }
     d0c:	18d3      	adds	r3, r2, r3
     d0e:	2201      	movs	r2, #1
	inline void epBank1EnableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRCPT1 = 1; }
     d10:	31ff      	adds	r1, #255	; 0xff
     d12:	7a8c      	ldrb	r4, [r1, #10]
	inline void epBank0EnableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRCPT0 = 1; }
     d14:	33ff      	adds	r3, #255	; 0xff
	inline void epBank1EnableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRCPT1 = 1; }
     d16:	4320      	orrs	r0, r4
     d18:	7288      	strb	r0, [r1, #10]
	inline void epBank0EnableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRCPT0 = 1; }
     d1a:	7a99      	ldrb	r1, [r3, #10]
     d1c:	430a      	orrs	r2, r1
     d1e:	729a      	strb	r2, [r3, #10]
}
     d20:	bd10      	pop	{r4, pc}
     d22:	46c0      	nop			; (mov r8, r8)
     d24:	200005e4 	.word	0x200005e4

00000d28 <_ZN7Serial_5beginEm>:
}
     d28:	4770      	bx	lr
	...

00000d2c <_GLOBAL__sub_I__ZN7Serial_12getInterfaceEPh>:

bool Serial_::rts() {
	return ((_usbLineInfo.lineState & CDC_LINESTATE_RTS) == CDC_LINESTATE_RTS);
}

Serial_ SerialUSB(USBDevice);
     d2c:	b510      	push	{r4, lr}
     d2e:	4902      	ldr	r1, [pc, #8]	; (d38 <_GLOBAL__sub_I__ZN7Serial_12getInterfaceEPh+0xc>)
     d30:	4802      	ldr	r0, [pc, #8]	; (d3c <_GLOBAL__sub_I__ZN7Serial_12getInterfaceEPh+0x10>)
     d32:	f7ff ffb9 	bl	ca8 <_ZN7Serial_C1ER14USBDeviceClass>
     d36:	bd10      	pop	{r4, pc}
     d38:	2000012c 	.word	0x2000012c
     d3c:	200000c4 	.word	0x200000c4

00000d40 <_ZN13PluggableUSB_12getInterfaceEPh>:
#if defined(USBCON) && defined(PLUGGABLE_USB_ENABLED)

extern uint32_t EndPoints[];

int PluggableUSB_::getInterface(uint8_t* interfaceCount)
{
     d40:	b570      	push	{r4, r5, r6, lr}
     d42:	000e      	movs	r6, r1
	int sent = 0;
     d44:	2500      	movs	r5, #0
	PluggableUSBModule* node;
	for (node = rootNode; node; node = node->next) {
     d46:	6844      	ldr	r4, [r0, #4]
     d48:	2c00      	cmp	r4, #0
     d4a:	d00b      	beq.n	d64 <_ZN13PluggableUSB_12getInterfaceEPh+0x24>
		int res = node->getInterface(interfaceCount);
     d4c:	6823      	ldr	r3, [r4, #0]
     d4e:	0031      	movs	r1, r6
     d50:	685b      	ldr	r3, [r3, #4]
     d52:	0020      	movs	r0, r4
     d54:	4798      	blx	r3
		if (res < 0)
     d56:	2800      	cmp	r0, #0
     d58:	db02      	blt.n	d60 <_ZN13PluggableUSB_12getInterfaceEPh+0x20>
			return -1;
		sent += res;
     d5a:	182d      	adds	r5, r5, r0
	for (node = rootNode; node; node = node->next) {
     d5c:	68e4      	ldr	r4, [r4, #12]
     d5e:	e7f3      	b.n	d48 <_ZN13PluggableUSB_12getInterfaceEPh+0x8>
			return -1;
     d60:	2501      	movs	r5, #1
     d62:	426d      	negs	r5, r5
	}
	return sent;
}
     d64:	0028      	movs	r0, r5
     d66:	bd70      	pop	{r4, r5, r6, pc}

00000d68 <_ZN13PluggableUSB_13getDescriptorER8USBSetup>:

int PluggableUSB_::getDescriptor(USBSetup& setup)
{
     d68:	b570      	push	{r4, r5, r6, lr}
     d6a:	000d      	movs	r5, r1
	PluggableUSBModule* node;
	for (node = rootNode; node; node = node->next) {
     d6c:	6844      	ldr	r4, [r0, #4]
     d6e:	2c00      	cmp	r4, #0
     d70:	d008      	beq.n	d84 <_ZN13PluggableUSB_13getDescriptorER8USBSetup+0x1c>
		int ret = node->getDescriptor(setup);
     d72:	6823      	ldr	r3, [r4, #0]
     d74:	0029      	movs	r1, r5
     d76:	689b      	ldr	r3, [r3, #8]
     d78:	0020      	movs	r0, r4
     d7a:	4798      	blx	r3
		// ret!=0 -> request has been processed
		if (ret)
     d7c:	2800      	cmp	r0, #0
     d7e:	d102      	bne.n	d86 <_ZN13PluggableUSB_13getDescriptorER8USBSetup+0x1e>
	for (node = rootNode; node; node = node->next) {
     d80:	68e4      	ldr	r4, [r4, #12]
     d82:	e7f4      	b.n	d6e <_ZN13PluggableUSB_13getDescriptorER8USBSetup+0x6>
			return ret;
	}
	return 0;
     d84:	0020      	movs	r0, r4
}
     d86:	bd70      	pop	{r4, r5, r6, pc}

00000d88 <_ZN13PluggableUSB_12getShortNameEPc>:

uint8_t PluggableUSB_::getShortName(char *iSerialNum)
{
     d88:	b570      	push	{r4, r5, r6, lr}
     d8a:	000d      	movs	r5, r1
	PluggableUSBModule* node;
	uint8_t size = 0;
     d8c:	2600      	movs	r6, #0
	for (node = rootNode; node; node = node->next) {
     d8e:	6844      	ldr	r4, [r0, #4]
     d90:	2c00      	cmp	r4, #0
     d92:	d009      	beq.n	da8 <_ZN13PluggableUSB_12getShortNameEPc+0x20>
		uint8_t len = node->getShortName(iSerialNum);
     d94:	6823      	ldr	r3, [r4, #0]
     d96:	0029      	movs	r1, r5
     d98:	0020      	movs	r0, r4
     d9a:	691b      	ldr	r3, [r3, #16]
     d9c:	4798      	blx	r3
		iSerialNum += len;
		size += len;
     d9e:	1836      	adds	r6, r6, r0
		iSerialNum += len;
     da0:	182d      	adds	r5, r5, r0
		size += len;
     da2:	b2f6      	uxtb	r6, r6
	for (node = rootNode; node; node = node->next) {
     da4:	68e4      	ldr	r4, [r4, #12]
     da6:	e7f3      	b.n	d90 <_ZN13PluggableUSB_12getShortNameEPc+0x8>
	}
	*iSerialNum = 0;
	return size;
}
     da8:	0030      	movs	r0, r6
	*iSerialNum = 0;
     daa:	702c      	strb	r4, [r5, #0]
}
     dac:	bd70      	pop	{r4, r5, r6, pc}

00000dae <_ZN13PluggableUSB_5setupER8USBSetup>:

bool PluggableUSB_::setup(USBSetup& setup)
{
     dae:	b570      	push	{r4, r5, r6, lr}
     db0:	000d      	movs	r5, r1
	PluggableUSBModule* node;
	for (node = rootNode; node; node = node->next) {
     db2:	6844      	ldr	r4, [r0, #4]
     db4:	2c00      	cmp	r4, #0
     db6:	d008      	beq.n	dca <_ZN13PluggableUSB_5setupER8USBSetup+0x1c>
		if (node->setup(setup)) {
     db8:	6823      	ldr	r3, [r4, #0]
     dba:	0029      	movs	r1, r5
     dbc:	681b      	ldr	r3, [r3, #0]
     dbe:	0020      	movs	r0, r4
     dc0:	4798      	blx	r3
     dc2:	2800      	cmp	r0, #0
     dc4:	d102      	bne.n	dcc <_ZN13PluggableUSB_5setupER8USBSetup+0x1e>
	for (node = rootNode; node; node = node->next) {
     dc6:	68e4      	ldr	r4, [r4, #12]
     dc8:	e7f4      	b.n	db4 <_ZN13PluggableUSB_5setupER8USBSetup+0x6>
			return true;
		}
	}
	return false;
     dca:	0020      	movs	r0, r4
}
     dcc:	bd70      	pop	{r4, r5, r6, pc}

00000dce <_ZN13PluggableUSB_14handleEndpointEi>:

void PluggableUSB_::handleEndpoint(int ep)
{
     dce:	b570      	push	{r4, r5, r6, lr}
     dd0:	000d      	movs	r5, r1
	PluggableUSBModule* node;
	for (node = rootNode; node; node = node->next) {
     dd2:	6844      	ldr	r4, [r0, #4]
     dd4:	2c00      	cmp	r4, #0
     dd6:	d006      	beq.n	de6 <_ZN13PluggableUSB_14handleEndpointEi+0x18>
		node->handleEndpoint(ep);
     dd8:	6823      	ldr	r3, [r4, #0]
     dda:	0020      	movs	r0, r4
     ddc:	68db      	ldr	r3, [r3, #12]
     dde:	0029      	movs	r1, r5
     de0:	4798      	blx	r3
	for (node = rootNode; node; node = node->next) {
     de2:	68e4      	ldr	r4, [r4, #12]
     de4:	e7f6      	b.n	dd4 <_ZN13PluggableUSB_14handleEndpointEi+0x6>
	}
}
     de6:	bd70      	pop	{r4, r5, r6, pc}

00000de8 <_ZN13PluggableUSB_4plugEP18PluggableUSBModule>:

bool PluggableUSB_::plug(PluggableUSBModule *node)
{
     de8:	b5f0      	push	{r4, r5, r6, r7, lr}
	if ((lastEp + node->numEndpoints) > USB_ENDPOINTS) {
     dea:	798c      	ldrb	r4, [r1, #6]
     dec:	7845      	ldrb	r5, [r0, #1]
{
     dee:	0003      	movs	r3, r0
	if ((lastEp + node->numEndpoints) > USB_ENDPOINTS) {
     df0:	192a      	adds	r2, r5, r4
		return false;
     df2:	2000      	movs	r0, #0
	if ((lastEp + node->numEndpoints) > USB_ENDPOINTS) {
     df4:	2a07      	cmp	r2, #7
     df6:	dc1f      	bgt.n	e38 <_ZN13PluggableUSB_4plugEP18PluggableUSBModule+0x50>
	}

	if (!rootNode) {
     df8:	685a      	ldr	r2, [r3, #4]
     dfa:	4282      	cmp	r2, r0
     dfc:	d116      	bne.n	e2c <_ZN13PluggableUSB_4plugEP18PluggableUSBModule+0x44>
		rootNode = node;
     dfe:	6059      	str	r1, [r3, #4]
			current = current->next;
		}
		current->next = node;
	}

	node->pluggedInterface = lastIf;
     e00:	781a      	ldrb	r2, [r3, #0]
	node->pluggedEndpoint = lastEp;
	lastIf += node->numInterfaces;
     e02:	79c8      	ldrb	r0, [r1, #7]
	node->pluggedInterface = lastIf;
     e04:	710a      	strb	r2, [r1, #4]
	lastIf += node->numInterfaces;
     e06:	1812      	adds	r2, r2, r0
	node->pluggedEndpoint = lastEp;
     e08:	714d      	strb	r5, [r1, #5]
	lastIf += node->numInterfaces;
     e0a:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < node->numEndpoints; i++) {
     e0c:	2200      	movs	r2, #0
		EndPoints[lastEp] = node->endpointType[i];
     e0e:	4d0b      	ldr	r5, [pc, #44]	; (e3c <_ZN13PluggableUSB_4plugEP18PluggableUSBModule+0x54>)
	for (uint8_t i = 0; i < node->numEndpoints; i++) {
     e10:	4294      	cmp	r4, r2
     e12:	dd10      	ble.n	e36 <_ZN13PluggableUSB_4plugEP18PluggableUSBModule+0x4e>
		EndPoints[lastEp] = node->endpointType[i];
     e14:	688f      	ldr	r7, [r1, #8]
     e16:	7858      	ldrb	r0, [r3, #1]
     e18:	0096      	lsls	r6, r2, #2
     e1a:	59f7      	ldr	r7, [r6, r7]
	for (uint8_t i = 0; i < node->numEndpoints; i++) {
     e1c:	3201      	adds	r2, #1
		EndPoints[lastEp] = node->endpointType[i];
     e1e:	0086      	lsls	r6, r0, #2
		lastEp++;
     e20:	3001      	adds	r0, #1
		EndPoints[lastEp] = node->endpointType[i];
     e22:	5177      	str	r7, [r6, r5]
	for (uint8_t i = 0; i < node->numEndpoints; i++) {
     e24:	b2d2      	uxtb	r2, r2
		lastEp++;
     e26:	7058      	strb	r0, [r3, #1]
	for (uint8_t i = 0; i < node->numEndpoints; i++) {
     e28:	e7f2      	b.n	e10 <_ZN13PluggableUSB_4plugEP18PluggableUSBModule+0x28>
     e2a:	0002      	movs	r2, r0
		while (current->next) {
     e2c:	68d0      	ldr	r0, [r2, #12]
     e2e:	2800      	cmp	r0, #0
     e30:	d1fb      	bne.n	e2a <_ZN13PluggableUSB_4plugEP18PluggableUSBModule+0x42>
		current->next = node;
     e32:	60d1      	str	r1, [r2, #12]
     e34:	e7e4      	b.n	e00 <_ZN13PluggableUSB_4plugEP18PluggableUSBModule+0x18>
	}
	return true;
     e36:	2001      	movs	r0, #1
	// restart USB layer???
}
     e38:	bdf0      	pop	{r4, r5, r6, r7, pc}
     e3a:	46c0      	nop			; (mov r8, r8)
     e3c:	20000104 	.word	0x20000104

00000e40 <_Z12PluggableUSBv>:

PluggableUSB_& PluggableUSB()
{
	static PluggableUSB_ obj;
     e40:	2201      	movs	r2, #1
     e42:	4905      	ldr	r1, [pc, #20]	; (e58 <_Z12PluggableUSBv+0x18>)
     e44:	4805      	ldr	r0, [pc, #20]	; (e5c <_Z12PluggableUSBv+0x1c>)
     e46:	680b      	ldr	r3, [r1, #0]
     e48:	4013      	ands	r3, r2
     e4a:	d103      	bne.n	e54 <_Z12PluggableUSBv+0x14>
	return obj;
}

PluggableUSB_::PluggableUSB_() : lastIf(0), lastEp(1), rootNode(NULL)
     e4c:	7003      	strb	r3, [r0, #0]
     e4e:	7042      	strb	r2, [r0, #1]
     e50:	6043      	str	r3, [r0, #4]
	static PluggableUSB_ obj;
     e52:	600a      	str	r2, [r1, #0]
}
     e54:	4770      	bx	lr
     e56:	46c0      	nop			; (mov r8, r8)
     e58:	200000f8 	.word	0x200000f8
     e5c:	200000fc 	.word	0x200000fc

00000e60 <_ZN26DoubleBufferedEPOutHandlerD1Ev>:

		release();
	}

	virtual ~DoubleBufferedEPOutHandler() {
	}
     e60:	4770      	bx	lr

00000e62 <_ZN26DoubleBufferedEPOutHandlerD0Ev>:
	virtual ~DoubleBufferedEPOutHandler() {
     e62:	b510      	push	{r4, lr}
     e64:	0004      	movs	r4, r0
	}
     e66:	f001 f9f1 	bl	224c <_ZdlPv>
     e6a:	0020      	movs	r0, r4
     e6c:	bd10      	pop	{r4, pc}
	...

00000e70 <_ZN14USBDeviceClass6initEPEmm.part.7>:
	for (uint8_t i = 1; (i < EP_ARRAY_SIZE) && (EndPoints[i] != 0); i++) {
		initEP(i, EndPoints[i]);
	}
}

void USBDeviceClass::initEP(uint32_t ep, uint32_t config)
     e70:	b5f0      	push	{r4, r5, r6, r7, lr}
		if (epHandlers[ep] != NULL) {
			delete (DoubleBufferedEPOutHandler*)epHandlers[ep];
		}
		epHandlers[ep] = new DoubleBufferedEPOutHandler(usbd, ep);
	}
	else if (config == (USB_ENDPOINT_TYPE_BULK | USB_ENDPOINT_IN(0)))
     e72:	2982      	cmp	r1, #130	; 0x82
     e74:	d119      	bne.n	eaa <_ZN14USBDeviceClass6initEPEmm.part.7+0x3a>
	inline void epBank1SetSize(ep_t ep, uint16_t size) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.SIZE = EP_PCKSIZE_SIZE(size); }
     e76:	b2c3      	uxtb	r3, r0
     e78:	4d29      	ldr	r5, [pc, #164]	; (f20 <_ZN14USBDeviceClass6initEPEmm.part.7+0xb0>)
     e7a:	015a      	lsls	r2, r3, #5
     e7c:	18aa      	adds	r2, r5, r2
     e7e:	6991      	ldr	r1, [r2, #24]
     e80:	4c28      	ldr	r4, [pc, #160]	; (f24 <_ZN14USBDeviceClass6initEPEmm.part.7+0xb4>)
	{
		usbd.epBank1SetSize(ep, 64);
		usbd.epBank1SetAddress(ep, &udd_ep_in_cache_buffer[ep]);
     e82:	0180      	lsls	r0, r0, #6
     e84:	400c      	ands	r4, r1
     e86:	21c0      	movs	r1, #192	; 0xc0
     e88:	0589      	lsls	r1, r1, #22
     e8a:	4321      	orrs	r1, r4
     e8c:	6191      	str	r1, [r2, #24]
     e8e:	4926      	ldr	r1, [pc, #152]	; (f28 <_ZN14USBDeviceClass6initEPEmm.part.7+0xb8>)
	inline void epBank1SetType(ep_t ep, uint8_t type) { usb.DeviceEndpoint[ep].EPCFG.bit.EPTYPE1 = type; }
     e90:	3308      	adds	r3, #8
     e92:	1808      	adds	r0, r1, r0
     e94:	2170      	movs	r1, #112	; 0x70
	inline void epBank1SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[1].ADDR.reg = (uint32_t)addr; }
     e96:	6150      	str	r0, [r2, #20]
	inline void epBank1SetType(ep_t ep, uint8_t type) { usb.DeviceEndpoint[ep].EPCFG.bit.EPTYPE1 = type; }
     e98:	6828      	ldr	r0, [r5, #0]
     e9a:	015b      	lsls	r3, r3, #5
     e9c:	5c1a      	ldrb	r2, [r3, r0]
     e9e:	438a      	bics	r2, r1
     ea0:	0011      	movs	r1, r2
     ea2:	2230      	movs	r2, #48	; 0x30
     ea4:	430a      	orrs	r2, r1
     ea6:	541a      	strb	r2, [r3, r0]
		usbd.epBank1SetType(ep, 1); // CONTROL IN

		// Release OUT EP
		usbd.epReleaseOutBank0(ep, 64);
	}
}
     ea8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	else if (config == USB_ENDPOINT_TYPE_CONTROL)
     eaa:	2900      	cmp	r1, #0
     eac:	d1fc      	bne.n	ea8 <_ZN14USBDeviceClass6initEPEmm.part.7+0x38>
	inline void epBank0SetSize(ep_t ep, uint16_t size) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.SIZE = EP_PCKSIZE_SIZE(size); }
     eae:	26c0      	movs	r6, #192	; 0xc0
     eb0:	b2c1      	uxtb	r1, r0
     eb2:	4c1b      	ldr	r4, [pc, #108]	; (f20 <_ZN14USBDeviceClass6initEPEmm.part.7+0xb0>)
     eb4:	014b      	lsls	r3, r1, #5
     eb6:	18e3      	adds	r3, r4, r3
     eb8:	689a      	ldr	r2, [r3, #8]
     eba:	4d1a      	ldr	r5, [pc, #104]	; (f24 <_ZN14USBDeviceClass6initEPEmm.part.7+0xb4>)
     ebc:	05b6      	lsls	r6, r6, #22
     ebe:	402a      	ands	r2, r5
     ec0:	4332      	orrs	r2, r6
     ec2:	609a      	str	r2, [r3, #8]
		usbd.epBank0SetAddress(ep, &udd_ep_out_cache_buffer[ep]);
     ec4:	4a19      	ldr	r2, [pc, #100]	; (f2c <_ZN14USBDeviceClass6initEPEmm.part.7+0xbc>)
     ec6:	0180      	lsls	r0, r0, #6
     ec8:	1812      	adds	r2, r2, r0
	inline void epBank0SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[0].ADDR.reg = (uint32_t)addr; }
     eca:	605a      	str	r2, [r3, #4]
	inline void epBank0SetType(ep_t ep, uint8_t type) { usb.DeviceEndpoint[ep].EPCFG.bit.EPTYPE0 = type; }
     ecc:	000a      	movs	r2, r1
     ece:	2707      	movs	r7, #7
     ed0:	6824      	ldr	r4, [r4, #0]
     ed2:	3208      	adds	r2, #8
     ed4:	0152      	lsls	r2, r2, #5
     ed6:	5d11      	ldrb	r1, [r2, r4]
     ed8:	43b9      	bics	r1, r7
     eda:	000f      	movs	r7, r1
     edc:	2101      	movs	r1, #1
     ede:	4339      	orrs	r1, r7
     ee0:	5511      	strb	r1, [r2, r4]
	inline void epBank1SetSize(ep_t ep, uint16_t size) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.SIZE = EP_PCKSIZE_SIZE(size); }
     ee2:	699f      	ldr	r7, [r3, #24]
		usbd.epBank1SetAddress(ep, &udd_ep_in_cache_buffer[ep]);
     ee4:	4910      	ldr	r1, [pc, #64]	; (f28 <_ZN14USBDeviceClass6initEPEmm.part.7+0xb8>)
     ee6:	403d      	ands	r5, r7
     ee8:	1808      	adds	r0, r1, r0
     eea:	432e      	orrs	r6, r5
     eec:	619e      	str	r6, [r3, #24]
	inline void epBank1SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[1].ADDR.reg = (uint32_t)addr; }
     eee:	6158      	str	r0, [r3, #20]
	inline void epBank1SetType(ep_t ep, uint8_t type) { usb.DeviceEndpoint[ep].EPCFG.bit.EPTYPE1 = type; }
     ef0:	2070      	movs	r0, #112	; 0x70
     ef2:	5d11      	ldrb	r1, [r2, r4]
     ef4:	4381      	bics	r1, r0
     ef6:	0008      	movs	r0, r1
     ef8:	2110      	movs	r1, #16
     efa:	4301      	orrs	r1, r0
     efc:	5511      	strb	r1, [r2, r4]
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
     efe:	6899      	ldr	r1, [r3, #8]
     f00:	480b      	ldr	r0, [pc, #44]	; (f30 <_ZN14USBDeviceClass6initEPEmm.part.7+0xc0>)
	inline void epBank0ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK0RDY = 1; }
     f02:	18a2      	adds	r2, r4, r2
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
     f04:	4008      	ands	r0, r1
     f06:	2180      	movs	r1, #128	; 0x80
     f08:	0349      	lsls	r1, r1, #13
     f0a:	4301      	orrs	r1, r0
     f0c:	6099      	str	r1, [r3, #8]
	inline void epBank0SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = bc; }
     f0e:	6899      	ldr	r1, [r3, #8]
     f10:	0b89      	lsrs	r1, r1, #14
     f12:	0389      	lsls	r1, r1, #14
     f14:	6099      	str	r1, [r3, #8]
	inline void epBank0ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK0RDY = 1; }
     f16:	2340      	movs	r3, #64	; 0x40
     f18:	7911      	ldrb	r1, [r2, #4]
     f1a:	430b      	orrs	r3, r1
     f1c:	7113      	strb	r3, [r2, #4]
     f1e:	e7c3      	b.n	ea8 <_ZN14USBDeviceClass6initEPEmm.part.7+0x38>
     f20:	200005e4 	.word	0x200005e4
     f24:	8fffffff 	.word	0x8fffffff
     f28:	20000158 	.word	0x20000158
     f2c:	20000318 	.word	0x20000318
     f30:	f0003fff 	.word	0xf0003fff

00000f34 <_ZN7__GuardC1Ev>:
     f34:	f3ef 8310 	mrs	r3, PRIMASK
	__Guard() : primask(__get_PRIMASK()), loops(1) {
     f38:	6003      	str	r3, [r0, #0]
     f3a:	2301      	movs	r3, #1
     f3c:	6043      	str	r3, [r0, #4]
  __ASM volatile ("cpsid i" : : : "memory");
     f3e:	b672      	cpsid	i
	}
     f40:	4770      	bx	lr

00000f42 <_ZN7__GuardD1Ev>:
		if (primask == 0) {
     f42:	6803      	ldr	r3, [r0, #0]
     f44:	2b00      	cmp	r3, #0
     f46:	d102      	bne.n	f4e <_ZN7__GuardD1Ev+0xc>
  __ASM volatile ("cpsie i" : : : "memory");
     f48:	b662      	cpsie	i
  __ASM volatile ("isb 0xF":::"memory");
     f4a:	f3bf 8f6f 	isb	sy
	}
     f4e:	4770      	bx	lr

00000f50 <_ZNK26DoubleBufferedEPOutHandler10_availableEv>:
			}
		}
		return i;
	}

	virtual uint32_t _available() const {
     f50:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
		if (current == 0) {
     f52:	0006      	movs	r6, r0
     f54:	36fc      	adds	r6, #252	; 0xfc
     f56:	69b3      	ldr	r3, [r6, #24]
	virtual uint32_t _available() const {
     f58:	0004      	movs	r4, r0
		if (current == 0) {
     f5a:	2b00      	cmp	r3, #0
     f5c:	d118      	bne.n	f90 <_ZNK26DoubleBufferedEPOutHandler10_availableEv+0x40>
			bool ready = ready0;
     f5e:	27b2      	movs	r7, #178	; 0xb2
     f60:	007f      	lsls	r7, r7, #1
     f62:	5dc5      	ldrb	r5, [r0, r7]
			synchronized {
     f64:	4668      	mov	r0, sp
     f66:	f7ff ffe5 	bl	f34 <_ZN7__GuardC1Ev>
     f6a:	9b01      	ldr	r3, [sp, #4]
			bool ready = ready0;
     f6c:	b2ed      	uxtb	r5, r5
			synchronized {
     f6e:	3b01      	subs	r3, #1
     f70:	d302      	bcc.n	f78 <_ZNK26DoubleBufferedEPOutHandler10_availableEv+0x28>
				ready = ready0;
     f72:	5de5      	ldrb	r5, [r4, r7]
     f74:	b2ed      	uxtb	r5, r5
     f76:	e7fa      	b.n	f6e <_ZNK26DoubleBufferedEPOutHandler10_availableEv+0x1e>
			synchronized {
     f78:	4668      	mov	r0, sp
     f7a:	9301      	str	r3, [sp, #4]
     f7c:	f7ff ffe1 	bl	f42 <_ZN7__GuardD1Ev>
			}
			return ready ? (last0 - first0) : 0;
     f80:	2d00      	cmp	r5, #0
     f82:	d101      	bne.n	f88 <_ZNK26DoubleBufferedEPOutHandler10_availableEv+0x38>
     f84:	2000      	movs	r0, #0
			synchronized {
				ready = ready1;
			}
			return ready ? (last1 - first1) : 0;
		}
	}
     f86:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
			return ready ? (last0 - first0) : 0;
     f88:	6e70      	ldr	r0, [r6, #100]	; 0x64
     f8a:	6e33      	ldr	r3, [r6, #96]	; 0x60
			return ready ? (last1 - first1) : 0;
     f8c:	1ac0      	subs	r0, r0, r3
     f8e:	e7fa      	b.n	f86 <_ZNK26DoubleBufferedEPOutHandler10_availableEv+0x36>
			synchronized {
     f90:	4668      	mov	r0, sp
     f92:	f7ff ffcf 	bl	f34 <_ZN7__GuardC1Ev>
				ready = ready1;
     f96:	22d8      	movs	r2, #216	; 0xd8
			bool ready = false;
     f98:	2500      	movs	r5, #0
     f9a:	9b01      	ldr	r3, [sp, #4]
				ready = ready1;
     f9c:	0052      	lsls	r2, r2, #1
			synchronized {
     f9e:	3b01      	subs	r3, #1
     fa0:	d302      	bcc.n	fa8 <_ZNK26DoubleBufferedEPOutHandler10_availableEv+0x58>
				ready = ready1;
     fa2:	5ca5      	ldrb	r5, [r4, r2]
     fa4:	b2ed      	uxtb	r5, r5
			synchronized {
     fa6:	e7fa      	b.n	f9e <_ZNK26DoubleBufferedEPOutHandler10_availableEv+0x4e>
     fa8:	4668      	mov	r0, sp
     faa:	9301      	str	r3, [sp, #4]
     fac:	f7ff ffc9 	bl	f42 <_ZN7__GuardD1Ev>
			return ready ? (last1 - first1) : 0;
     fb0:	2d00      	cmp	r5, #0
     fb2:	d0e7      	beq.n	f84 <_ZNK26DoubleBufferedEPOutHandler10_availableEv+0x34>
     fb4:	23d6      	movs	r3, #214	; 0xd6
     fb6:	005b      	lsls	r3, r3, #1
     fb8:	58e0      	ldr	r0, [r4, r3]
     fba:	3b04      	subs	r3, #4
     fbc:	58e3      	ldr	r3, [r4, r3]
     fbe:	e7e5      	b.n	f8c <_ZNK26DoubleBufferedEPOutHandler10_availableEv+0x3c>

00000fc0 <_ZN26DoubleBufferedEPOutHandler7releaseEv>:
	virtual int peek() {
		_recv();
		return _rx_buffer.peek();
	}

	void release() {
     fc0:	b510      	push	{r4, lr}
		usbd.epReleaseOutBank0(ep, size);
     fc2:	6844      	ldr	r4, [r0, #4]
     fc4:	30fc      	adds	r0, #252	; 0xfc
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
     fc6:	6943      	ldr	r3, [r0, #20]
     fc8:	480b      	ldr	r0, [pc, #44]	; (ff8 <_ZN26DoubleBufferedEPOutHandler7releaseEv+0x38>)
     fca:	b2db      	uxtb	r3, r3
     fcc:	015a      	lsls	r2, r3, #5
     fce:	18a2      	adds	r2, r4, r2
     fd0:	6891      	ldr	r1, [r2, #8]
	inline void epBank0ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK0RDY = 1; }
     fd2:	3308      	adds	r3, #8
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
     fd4:	4008      	ands	r0, r1
     fd6:	2180      	movs	r1, #128	; 0x80
     fd8:	0349      	lsls	r1, r1, #13
     fda:	4301      	orrs	r1, r0
     fdc:	6091      	str	r1, [r2, #8]
	inline void epBank0SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = bc; }
     fde:	6891      	ldr	r1, [r2, #8]
	inline void epBank0ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK0RDY = 1; }
     fe0:	015b      	lsls	r3, r3, #5
	inline void epBank0SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = bc; }
     fe2:	0b89      	lsrs	r1, r1, #14
     fe4:	0389      	lsls	r1, r1, #14
     fe6:	6091      	str	r1, [r2, #8]
	inline void epBank0ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK0RDY = 1; }
     fe8:	6822      	ldr	r2, [r4, #0]
     fea:	18d3      	adds	r3, r2, r3
     fec:	2240      	movs	r2, #64	; 0x40
     fee:	7919      	ldrb	r1, [r3, #4]
     ff0:	430a      	orrs	r2, r1
     ff2:	711a      	strb	r2, [r3, #4]
	}
     ff4:	bd10      	pop	{r4, pc}
     ff6:	46c0      	nop			; (mov r8, r8)
     ff8:	f0003fff 	.word	0xf0003fff

00000ffc <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv>:
	virtual void handleEndpoint()
     ffc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
		if (usbd.epBank0IsTransferComplete(ep))
     ffe:	0005      	movs	r5, r0
    1000:	35fc      	adds	r5, #252	; 0xfc
	inline bool epBank0IsTransferComplete(ep_t ep)  { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.TRCPT0; }
    1002:	7d2b      	ldrb	r3, [r5, #20]
		if (usbd.epBank0IsTransferComplete(ep))
    1004:	6842      	ldr	r2, [r0, #4]
	inline bool epBank0IsTransferComplete(ep_t ep)  { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.TRCPT0; }
    1006:	0019      	movs	r1, r3
	virtual void handleEndpoint()
    1008:	0004      	movs	r4, r0
	inline bool epBank0IsTransferComplete(ep_t ep)  { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.TRCPT0; }
    100a:	3108      	adds	r1, #8
    100c:	6810      	ldr	r0, [r2, #0]
    100e:	0149      	lsls	r1, r1, #5
    1010:	1841      	adds	r1, r0, r1
    1012:	79c9      	ldrb	r1, [r1, #7]
		if (usbd.epBank0IsTransferComplete(ep))
    1014:	07c9      	lsls	r1, r1, #31
    1016:	d511      	bpl.n	103c <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0x40>
	inline uint16_t epBank0ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT; }
    1018:	015b      	lsls	r3, r3, #5
    101a:	18d2      	adds	r2, r2, r3
    101c:	6893      	ldr	r3, [r2, #8]
    101e:	049b      	lsls	r3, r3, #18
    1020:	0c9b      	lsrs	r3, r3, #18
			if (received == 0) {
    1022:	d10c      	bne.n	103e <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0x42>
				release();
    1024:	0020      	movs	r0, r4
    1026:	f7ff ffcb 	bl	fc0 <_ZN26DoubleBufferedEPOutHandler7releaseEv>
	inline void epAckPendingInterrupts(ep_t ep)     { usb.DeviceEndpoint[ep].EPINTFLAG.reg = 0x7F; }
    102a:	6863      	ldr	r3, [r4, #4]
    102c:	681a      	ldr	r2, [r3, #0]
    102e:	696b      	ldr	r3, [r5, #20]
    1030:	b2db      	uxtb	r3, r3
    1032:	3308      	adds	r3, #8
    1034:	015b      	lsls	r3, r3, #5
    1036:	18d3      	adds	r3, r2, r3
    1038:	227f      	movs	r2, #127	; 0x7f
    103a:	71da      	strb	r2, [r3, #7]
	}
    103c:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
			} else if (incoming == 0) {
    103e:	69e9      	ldr	r1, [r5, #28]
    1040:	2900      	cmp	r1, #0
    1042:	d123      	bne.n	108c <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0x90>
				last0 = received;
    1044:	666b      	str	r3, [r5, #100]	; 0x64
				usbd.epBank0SetAddress(ep, const_cast<uint8_t *>(data1));
    1046:	0023      	movs	r3, r4
				incoming = 1;
    1048:	2601      	movs	r6, #1
				usbd.epBank0SetAddress(ep, const_cast<uint8_t *>(data1));
    104a:	3369      	adds	r3, #105	; 0x69
    104c:	33ff      	adds	r3, #255	; 0xff
				incoming = 1;
    104e:	61ee      	str	r6, [r5, #28]
				synchronized {
    1050:	4668      	mov	r0, sp
	inline void epBank0SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[0].ADDR.reg = (uint32_t)addr; }
    1052:	6053      	str	r3, [r2, #4]
					ready0 = true;
    1054:	27b2      	movs	r7, #178	; 0xb2
				synchronized {
    1056:	f7ff ff6d 	bl	f34 <_ZN7__GuardC1Ev>
					ready0 = true;
    105a:	007f      	lsls	r7, r7, #1
					notify = ready1;
    105c:	21b2      	movs	r1, #178	; 0xb2
    105e:	9b01      	ldr	r3, [sp, #4]
    1060:	31ff      	adds	r1, #255	; 0xff
    1062:	3b01      	subs	r3, #1
				synchronized {
    1064:	1c5a      	adds	r2, r3, #1
    1066:	d038      	beq.n	10da <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0xde>
					notify = ready1;
    1068:	22d8      	movs	r2, #216	; 0xd8
					ready0 = true;
    106a:	55e6      	strb	r6, [r4, r7]
					notify = ready1;
    106c:	0052      	lsls	r2, r2, #1
    106e:	5ca2      	ldrb	r2, [r4, r2]
    1070:	1e58      	subs	r0, r3, #1
    1072:	b2d2      	uxtb	r2, r2
    1074:	5462      	strb	r2, [r4, r1]
					if (!notify) {
    1076:	5c62      	ldrb	r2, [r4, r1]
    1078:	4684      	mov	ip, r0
    107a:	2a00      	cmp	r2, #0
    107c:	d104      	bne.n	1088 <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0x8c>
						release();
    107e:	0020      	movs	r0, r4
    1080:	9301      	str	r3, [sp, #4]
    1082:	f7ff ff9d 	bl	fc0 <_ZN26DoubleBufferedEPOutHandler7releaseEv>
    1086:	e7e9      	b.n	105c <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0x60>
    1088:	4663      	mov	r3, ip
    108a:	e7eb      	b.n	1064 <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0x68>
				last1 = received;
    108c:	21d6      	movs	r1, #214	; 0xd6
    108e:	0049      	lsls	r1, r1, #1
    1090:	5063      	str	r3, [r4, r1]
				incoming = 0;
    1092:	2300      	movs	r3, #0
    1094:	61eb      	str	r3, [r5, #28]
				usbd.epBank0SetAddress(ep, const_cast<uint8_t *>(data0));
    1096:	0023      	movs	r3, r4
    1098:	331d      	adds	r3, #29
    109a:	33ff      	adds	r3, #255	; 0xff
	inline void epBank0SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[0].ADDR.reg = (uint32_t)addr; }
    109c:	6053      	str	r3, [r2, #4]
				synchronized {
    109e:	4668      	mov	r0, sp
					ready1 = true;
    10a0:	26d8      	movs	r6, #216	; 0xd8
				synchronized {
    10a2:	f7ff ff47 	bl	f34 <_ZN7__GuardC1Ev>
					ready1 = true;
    10a6:	2701      	movs	r7, #1
    10a8:	0076      	lsls	r6, r6, #1
					notify = ready0;
    10aa:	21b2      	movs	r1, #178	; 0xb2
    10ac:	9b01      	ldr	r3, [sp, #4]
    10ae:	31ff      	adds	r1, #255	; 0xff
    10b0:	3b01      	subs	r3, #1
				synchronized {
    10b2:	1c5a      	adds	r2, r3, #1
    10b4:	d011      	beq.n	10da <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0xde>
					notify = ready0;
    10b6:	22b2      	movs	r2, #178	; 0xb2
					ready1 = true;
    10b8:	55a7      	strb	r7, [r4, r6]
					notify = ready0;
    10ba:	0052      	lsls	r2, r2, #1
    10bc:	5ca2      	ldrb	r2, [r4, r2]
    10be:	1e58      	subs	r0, r3, #1
    10c0:	b2d2      	uxtb	r2, r2
    10c2:	5462      	strb	r2, [r4, r1]
					if (!notify) {
    10c4:	5c62      	ldrb	r2, [r4, r1]
    10c6:	4684      	mov	ip, r0
    10c8:	2a00      	cmp	r2, #0
    10ca:	d104      	bne.n	10d6 <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0xda>
						release();
    10cc:	0020      	movs	r0, r4
    10ce:	9301      	str	r3, [sp, #4]
    10d0:	f7ff ff76 	bl	fc0 <_ZN26DoubleBufferedEPOutHandler7releaseEv>
    10d4:	e7e9      	b.n	10aa <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0xae>
    10d6:	4663      	mov	r3, ip
    10d8:	e7eb      	b.n	10b2 <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0xb6>
				synchronized {
    10da:	4668      	mov	r0, sp
    10dc:	9301      	str	r3, [sp, #4]
    10de:	f7ff ff30 	bl	f42 <_ZN7__GuardD1Ev>
    10e2:	e7a2      	b.n	102a <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0x2e>

000010e4 <_ZN26DoubleBufferedEPOutHandler5_recvEv>:
	uint32_t _recv()
    10e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    10e6:	0005      	movs	r5, r0
		synchronized {
    10e8:	4668      	mov	r0, sp
    10ea:	002c      	movs	r4, r5
    10ec:	f7ff ff22 	bl	f34 <_ZN7__GuardC1Ev>
		uint32_t len = 0;
    10f0:	2700      	movs	r7, #0
    return N - 1 - _iHead + _iTail;
    10f2:	22ff      	movs	r2, #255	; 0xff
    10f4:	9b01      	ldr	r3, [sp, #4]
    10f6:	34fc      	adds	r4, #252	; 0xfc
		synchronized {
    10f8:	3b01      	subs	r3, #1
    10fa:	d30d      	bcc.n	1118 <_ZN26DoubleBufferedEPOutHandler5_recvEv+0x34>
  if (_iHead >= _iTail)
    10fc:	68e0      	ldr	r0, [r4, #12]
    10fe:	6921      	ldr	r1, [r4, #16]
    1100:	4288      	cmp	r0, r1
    1102:	db04      	blt.n	110e <_ZN26DoubleBufferedEPOutHandler5_recvEv+0x2a>
    return N - 1 - _iHead + _iTail;
    1104:	68e7      	ldr	r7, [r4, #12]
    1106:	6920      	ldr	r0, [r4, #16]
    1108:	1bd7      	subs	r7, r2, r7
    110a:	183f      	adds	r7, r7, r0
    110c:	e7f4      	b.n	10f8 <_ZN26DoubleBufferedEPOutHandler5_recvEv+0x14>
    return _iTail - _iHead - 1;
    110e:	6927      	ldr	r7, [r4, #16]
    1110:	68e1      	ldr	r1, [r4, #12]
    1112:	1a7f      	subs	r7, r7, r1
    1114:	3f01      	subs	r7, #1
    1116:	e7ef      	b.n	10f8 <_ZN26DoubleBufferedEPOutHandler5_recvEv+0x14>
    1118:	4668      	mov	r0, sp
    111a:	9301      	str	r3, [sp, #4]
    111c:	f7ff ff11 	bl	f42 <_ZN7__GuardD1Ev>
		if (current == 0) {
    1120:	69a3      	ldr	r3, [r4, #24]
			synchronized {
    1122:	4668      	mov	r0, sp
		if (current == 0) {
    1124:	2b00      	cmp	r3, #0
    1126:	d141      	bne.n	11ac <_ZN26DoubleBufferedEPOutHandler5_recvEv+0xc8>
			synchronized {
    1128:	f7ff ff04 	bl	f34 <_ZN7__GuardC1Ev>
				if (!ready0) {
    112c:	21b2      	movs	r1, #178	; 0xb2
    112e:	9b01      	ldr	r3, [sp, #4]
    1130:	0049      	lsls	r1, r1, #1
    1132:	3b01      	subs	r3, #1
			synchronized {
    1134:	1c5a      	adds	r2, r3, #1
    1136:	d00c      	beq.n	1152 <_ZN26DoubleBufferedEPOutHandler5_recvEv+0x6e>
				if (!ready0) {
    1138:	5c6e      	ldrb	r6, [r5, r1]
    113a:	1e5a      	subs	r2, r3, #1
    113c:	b2f6      	uxtb	r6, r6
    113e:	2e00      	cmp	r6, #0
    1140:	d105      	bne.n	114e <_ZN26DoubleBufferedEPOutHandler5_recvEv+0x6a>
				synchronized {
    1142:	4668      	mov	r0, sp
    1144:	9301      	str	r3, [sp, #4]
    1146:	f7ff fefc 	bl	f42 <_ZN7__GuardD1Ev>
	}
    114a:	0030      	movs	r0, r6
    114c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    114e:	0013      	movs	r3, r2
    1150:	e7f0      	b.n	1134 <_ZN26DoubleBufferedEPOutHandler5_recvEv+0x50>
			synchronized {
    1152:	4668      	mov	r0, sp
    1154:	9301      	str	r3, [sp, #4]
		uint32_t i = 0;
    1156:	2600      	movs	r6, #0
			synchronized {
    1158:	f7ff fef3 	bl	f42 <_ZN7__GuardD1Ev>
  return (uint32_t)(index + 1) % N;
    115c:	22ff      	movs	r2, #255	; 0xff
			for (; i<len && first0 < last0; i++) {
    115e:	42be      	cmp	r6, r7
    1160:	d003      	beq.n	116a <_ZN26DoubleBufferedEPOutHandler5_recvEv+0x86>
    1162:	6e23      	ldr	r3, [r4, #96]	; 0x60
    1164:	6e61      	ldr	r1, [r4, #100]	; 0x64
    1166:	428b      	cmp	r3, r1
    1168:	d360      	bcc.n	122c <_ZN26DoubleBufferedEPOutHandler5_recvEv+0x148>
			if (first0 == last0) {
    116a:	6e63      	ldr	r3, [r4, #100]	; 0x64
    116c:	6e22      	ldr	r2, [r4, #96]	; 0x60
    116e:	429a      	cmp	r2, r3
    1170:	d1eb      	bne.n	114a <_ZN26DoubleBufferedEPOutHandler5_recvEv+0x66>
				first0 = 0;
    1172:	2300      	movs	r3, #0
    1174:	6623      	str	r3, [r4, #96]	; 0x60
				current = 1;
    1176:	3301      	adds	r3, #1
    1178:	61a3      	str	r3, [r4, #24]
				synchronized {
    117a:	4668      	mov	r0, sp
					ready0 = false;
    117c:	24b2      	movs	r4, #178	; 0xb2
				synchronized {
    117e:	f7ff fed9 	bl	f34 <_ZN7__GuardC1Ev>
					ready0 = false;
    1182:	0064      	lsls	r4, r4, #1
					if (notify) {
    1184:	22b2      	movs	r2, #178	; 0xb2
					ready0 = false;
    1186:	2100      	movs	r1, #0
    1188:	9b01      	ldr	r3, [sp, #4]
					if (notify) {
    118a:	32ff      	adds	r2, #255	; 0xff
    118c:	3b01      	subs	r3, #1
				synchronized {
    118e:	1c58      	adds	r0, r3, #1
    1190:	d0d7      	beq.n	1142 <_ZN26DoubleBufferedEPOutHandler5_recvEv+0x5e>
					ready0 = false;
    1192:	5529      	strb	r1, [r5, r4]
					if (notify) {
    1194:	5ca8      	ldrb	r0, [r5, r2]
    1196:	1e5f      	subs	r7, r3, #1
    1198:	2800      	cmp	r0, #0
    119a:	d005      	beq.n	11a8 <_ZN26DoubleBufferedEPOutHandler5_recvEv+0xc4>
						notify = false;
    119c:	54a9      	strb	r1, [r5, r2]
						release();
    119e:	0028      	movs	r0, r5
    11a0:	9301      	str	r3, [sp, #4]
    11a2:	f7ff ff0d 	bl	fc0 <_ZN26DoubleBufferedEPOutHandler7releaseEv>
    11a6:	e7ed      	b.n	1184 <_ZN26DoubleBufferedEPOutHandler5_recvEv+0xa0>
    11a8:	003b      	movs	r3, r7
    11aa:	e7f0      	b.n	118e <_ZN26DoubleBufferedEPOutHandler5_recvEv+0xaa>
			synchronized {
    11ac:	f7ff fec2 	bl	f34 <_ZN7__GuardC1Ev>
				if (!ready1) {
    11b0:	21d8      	movs	r1, #216	; 0xd8
    11b2:	9b01      	ldr	r3, [sp, #4]
    11b4:	0049      	lsls	r1, r1, #1
    11b6:	3b01      	subs	r3, #1
			synchronized {
    11b8:	1c5a      	adds	r2, r3, #1
    11ba:	d006      	beq.n	11ca <_ZN26DoubleBufferedEPOutHandler5_recvEv+0xe6>
				if (!ready1) {
    11bc:	5c6e      	ldrb	r6, [r5, r1]
    11be:	1e5a      	subs	r2, r3, #1
    11c0:	b2f6      	uxtb	r6, r6
    11c2:	2e00      	cmp	r6, #0
    11c4:	d0bd      	beq.n	1142 <_ZN26DoubleBufferedEPOutHandler5_recvEv+0x5e>
    11c6:	0013      	movs	r3, r2
    11c8:	e7f6      	b.n	11b8 <_ZN26DoubleBufferedEPOutHandler5_recvEv+0xd4>
			synchronized {
    11ca:	4668      	mov	r0, sp
    11cc:	9301      	str	r3, [sp, #4]
    11ce:	f7ff feb8 	bl	f42 <_ZN7__GuardD1Ev>
    11d2:	22d4      	movs	r2, #212	; 0xd4
		uint32_t i = 0;
    11d4:	2600      	movs	r6, #0
    11d6:	0052      	lsls	r2, r2, #1
			for (; i<len && first1 < last1; i++) {
    11d8:	42be      	cmp	r6, r7
    11da:	d005      	beq.n	11e8 <_ZN26DoubleBufferedEPOutHandler5_recvEv+0x104>
    11dc:	21d6      	movs	r1, #214	; 0xd6
    11de:	0049      	lsls	r1, r1, #1
    11e0:	58ab      	ldr	r3, [r5, r2]
    11e2:	5869      	ldr	r1, [r5, r1]
    11e4:	428b      	cmp	r3, r1
    11e6:	d332      	bcc.n	124e <_ZN26DoubleBufferedEPOutHandler5_recvEv+0x16a>
			if (first1 == last1) {
    11e8:	23d6      	movs	r3, #214	; 0xd6
    11ea:	005b      	lsls	r3, r3, #1
    11ec:	58eb      	ldr	r3, [r5, r3]
    11ee:	58a9      	ldr	r1, [r5, r2]
    11f0:	4299      	cmp	r1, r3
    11f2:	d1aa      	bne.n	114a <_ZN26DoubleBufferedEPOutHandler5_recvEv+0x66>
				first1 = 0;
    11f4:	2300      	movs	r3, #0
				synchronized {
    11f6:	4668      	mov	r0, sp
				first1 = 0;
    11f8:	50ab      	str	r3, [r5, r2]
				current = 0;
    11fa:	61a3      	str	r3, [r4, #24]
					ready1 = false;
    11fc:	24d8      	movs	r4, #216	; 0xd8
				synchronized {
    11fe:	f7ff fe99 	bl	f34 <_ZN7__GuardC1Ev>
					ready1 = false;
    1202:	0064      	lsls	r4, r4, #1
					if (notify) {
    1204:	22b2      	movs	r2, #178	; 0xb2
					ready1 = false;
    1206:	2100      	movs	r1, #0
    1208:	9b01      	ldr	r3, [sp, #4]
					if (notify) {
    120a:	32ff      	adds	r2, #255	; 0xff
    120c:	3b01      	subs	r3, #1
				synchronized {
    120e:	1c58      	adds	r0, r3, #1
    1210:	d097      	beq.n	1142 <_ZN26DoubleBufferedEPOutHandler5_recvEv+0x5e>
					ready1 = false;
    1212:	5529      	strb	r1, [r5, r4]
					if (notify) {
    1214:	5ca8      	ldrb	r0, [r5, r2]
    1216:	1e5f      	subs	r7, r3, #1
    1218:	2800      	cmp	r0, #0
    121a:	d005      	beq.n	1228 <_ZN26DoubleBufferedEPOutHandler5_recvEv+0x144>
						notify = false;
    121c:	54a9      	strb	r1, [r5, r2]
						release();
    121e:	0028      	movs	r0, r5
    1220:	9301      	str	r3, [sp, #4]
    1222:	f7ff fecd 	bl	fc0 <_ZN26DoubleBufferedEPOutHandler7releaseEv>
    1226:	e7ed      	b.n	1204 <_ZN26DoubleBufferedEPOutHandler5_recvEv+0x120>
    1228:	003b      	movs	r3, r7
    122a:	e7f0      	b.n	120e <_ZN26DoubleBufferedEPOutHandler5_recvEv+0x12a>
				_rx_buffer.store_char(data0[first0++]);
    122c:	1c59      	adds	r1, r3, #1
    122e:	18eb      	adds	r3, r5, r3
    1230:	33ff      	adds	r3, #255	; 0xff
    1232:	6621      	str	r1, [r4, #96]	; 0x60
    1234:	7f59      	ldrb	r1, [r3, #29]
  int i = nextIndex(_iHead);
    1236:	68e3      	ldr	r3, [r4, #12]
  if ( i != _iTail )
    1238:	6920      	ldr	r0, [r4, #16]
  return (uint32_t)(index + 1) % N;
    123a:	3301      	adds	r3, #1
    123c:	4013      	ands	r3, r2
  if ( i != _iTail )
    123e:	4283      	cmp	r3, r0
    1240:	d003      	beq.n	124a <_ZN26DoubleBufferedEPOutHandler5_recvEv+0x166>
    _aucBuffer[_iHead] = c ;
    1242:	68e0      	ldr	r0, [r4, #12]
    1244:	1828      	adds	r0, r5, r0
    1246:	7201      	strb	r1, [r0, #8]
    _iHead = i ;
    1248:	60e3      	str	r3, [r4, #12]
			for (; i<len && first0 < last0; i++) {
    124a:	3601      	adds	r6, #1
    124c:	e787      	b.n	115e <_ZN26DoubleBufferedEPOutHandler5_recvEv+0x7a>
				_rx_buffer.store_char(data1[first1++]);
    124e:	1c59      	adds	r1, r3, #1
    1250:	50a9      	str	r1, [r5, r2]
  return (uint32_t)(index + 1) % N;
    1252:	21ff      	movs	r1, #255	; 0xff
    1254:	18eb      	adds	r3, r5, r3
    1256:	3369      	adds	r3, #105	; 0x69
    1258:	33ff      	adds	r3, #255	; 0xff
    125a:	781b      	ldrb	r3, [r3, #0]
    125c:	469c      	mov	ip, r3
  int i = nextIndex(_iHead);
    125e:	68e3      	ldr	r3, [r4, #12]
  return (uint32_t)(index + 1) % N;
    1260:	3301      	adds	r3, #1
    1262:	400b      	ands	r3, r1
  if ( i != _iTail )
    1264:	6921      	ldr	r1, [r4, #16]
    1266:	428b      	cmp	r3, r1
    1268:	d004      	beq.n	1274 <_ZN26DoubleBufferedEPOutHandler5_recvEv+0x190>
    _aucBuffer[_iHead] = c ;
    126a:	4660      	mov	r0, ip
    126c:	68e1      	ldr	r1, [r4, #12]
    126e:	1869      	adds	r1, r5, r1
    1270:	7208      	strb	r0, [r1, #8]
    _iHead = i ;
    1272:	60e3      	str	r3, [r4, #12]
			for (; i<len && first1 < last1; i++) {
    1274:	3601      	adds	r6, #1
    1276:	e7af      	b.n	11d8 <_ZN26DoubleBufferedEPOutHandler5_recvEv+0xf4>

00001278 <_ZN26DoubleBufferedEPOutHandler4peekEv>:
	virtual int peek() {
    1278:	b510      	push	{r4, lr}
    127a:	0004      	movs	r4, r0
		_recv();
    127c:	f7ff ff32 	bl	10e4 <_ZN26DoubleBufferedEPOutHandler5_recvEv>
  if(_iTail == _iHead)
    1280:	0023      	movs	r3, r4
    1282:	33fc      	adds	r3, #252	; 0xfc
    1284:	6919      	ldr	r1, [r3, #16]
    1286:	68da      	ldr	r2, [r3, #12]
    1288:	4291      	cmp	r1, r2
    128a:	d003      	beq.n	1294 <_ZN26DoubleBufferedEPOutHandler4peekEv+0x1c>
  return _aucBuffer[_iTail];
    128c:	691b      	ldr	r3, [r3, #16]
    128e:	18e4      	adds	r4, r4, r3
    1290:	7a20      	ldrb	r0, [r4, #8]
	}
    1292:	bd10      	pop	{r4, pc}
    return -1;
    1294:	2001      	movs	r0, #1
    1296:	4240      	negs	r0, r0
		return _rx_buffer.peek();
    1298:	e7fb      	b.n	1292 <_ZN26DoubleBufferedEPOutHandler4peekEv+0x1a>

0000129a <_ZN26DoubleBufferedEPOutHandler9availableEv>:
	virtual uint32_t available() {
    129a:	b510      	push	{r4, lr}
    129c:	0004      	movs	r4, r0
  int delta = _iHead - _iTail;
    129e:	34fc      	adds	r4, #252	; 0xfc
		_recv();
    12a0:	f7ff ff20 	bl	10e4 <_ZN26DoubleBufferedEPOutHandler5_recvEv>
    12a4:	68e0      	ldr	r0, [r4, #12]
    12a6:	6923      	ldr	r3, [r4, #16]
    12a8:	1ac0      	subs	r0, r0, r3
  if(delta < 0)
    12aa:	d501      	bpl.n	12b0 <_ZN26DoubleBufferedEPOutHandler9availableEv+0x16>
    return N + delta;
    12ac:	3001      	adds	r0, #1
    12ae:	30ff      	adds	r0, #255	; 0xff
	}
    12b0:	bd10      	pop	{r4, pc}

000012b2 <_ZN26DoubleBufferedEPOutHandler4recvEPvm>:
	virtual uint32_t recv(void *_data, uint32_t len) {
    12b2:	b5f0      	push	{r4, r5, r6, r7, lr}
    12b4:	b085      	sub	sp, #20
    12b6:	9201      	str	r2, [sp, #4]
    12b8:	9100      	str	r1, [sp, #0]
    12ba:	0005      	movs	r5, r0
		_recv();
    12bc:	f7ff ff12 	bl	10e4 <_ZN26DoubleBufferedEPOutHandler5_recvEv>
		synchronized {
    12c0:	a802      	add	r0, sp, #8
    12c2:	f7ff fe37 	bl	f34 <_ZN7__GuardC1Ev>
    return -1;
    12c6:	2001      	movs	r0, #1
		uint32_t i = 0;
    12c8:	2400      	movs	r4, #0
  return (uint32_t)(index + 1) % N;
    12ca:	26ff      	movs	r6, #255	; 0xff
    12cc:	9a03      	ldr	r2, [sp, #12]
    return -1;
    12ce:	4240      	negs	r0, r0
		synchronized {
    12d0:	3a01      	subs	r2, #1
    12d2:	d31d      	bcc.n	1310 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x5e>
  int delta = _iHead - _iTail;
    12d4:	002b      	movs	r3, r5
    12d6:	33fc      	adds	r3, #252	; 0xfc
			for (; i < len && _rx_buffer.available(); i++) {
    12d8:	9901      	ldr	r1, [sp, #4]
    12da:	428c      	cmp	r4, r1
    12dc:	d2f8      	bcs.n	12d0 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x1e>
    12de:	68d9      	ldr	r1, [r3, #12]
    12e0:	691f      	ldr	r7, [r3, #16]
    12e2:	1bc9      	subs	r1, r1, r7
  if(delta < 0)
    12e4:	d501      	bpl.n	12ea <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x38>
    return N + delta;
    12e6:	3101      	adds	r1, #1
    12e8:	31ff      	adds	r1, #255	; 0xff
    12ea:	2900      	cmp	r1, #0
    12ec:	d0f0      	beq.n	12d0 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x1e>
  if(_iTail == _iHead)
    12ee:	6919      	ldr	r1, [r3, #16]
    12f0:	68df      	ldr	r7, [r3, #12]
    12f2:	468c      	mov	ip, r1
    return -1;
    12f4:	0001      	movs	r1, r0
  if(_iTail == _iHead)
    12f6:	45bc      	cmp	ip, r7
    12f8:	d006      	beq.n	1308 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x56>
  uint8_t value = _aucBuffer[_iTail];
    12fa:	6919      	ldr	r1, [r3, #16]
  _iTail = nextIndex(_iTail);
    12fc:	691f      	ldr	r7, [r3, #16]
  uint8_t value = _aucBuffer[_iTail];
    12fe:	1869      	adds	r1, r5, r1
  return (uint32_t)(index + 1) % N;
    1300:	3701      	adds	r7, #1
    1302:	4037      	ands	r7, r6
  uint8_t value = _aucBuffer[_iTail];
    1304:	7a09      	ldrb	r1, [r1, #8]
  _iTail = nextIndex(_iTail);
    1306:	611f      	str	r7, [r3, #16]
				data[i] = _rx_buffer.read_char();
    1308:	9f00      	ldr	r7, [sp, #0]
    130a:	5539      	strb	r1, [r7, r4]
			for (; i < len && _rx_buffer.available(); i++) {
    130c:	3401      	adds	r4, #1
    130e:	e7e3      	b.n	12d8 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x26>
		synchronized {
    1310:	a802      	add	r0, sp, #8
    1312:	9203      	str	r2, [sp, #12]
    1314:	f7ff fe15 	bl	f42 <_ZN7__GuardD1Ev>
	}
    1318:	0020      	movs	r0, r4
    131a:	b005      	add	sp, #20
    131c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000131e <_ZN14USBDeviceClass14SendInterfacesEPm>:
{
    131e:	b537      	push	{r0, r1, r2, r4, r5, lr}
	uint8_t interfaces = 0;
    1320:	466b      	mov	r3, sp
    1322:	1ddc      	adds	r4, r3, #7
    1324:	2300      	movs	r3, #0
{
    1326:	000d      	movs	r5, r1
	uint8_t interfaces = 0;
    1328:	7023      	strb	r3, [r4, #0]
	total[0] += PluggableUSB().getInterface(&interfaces);
    132a:	f7ff fd89 	bl	e40 <_Z12PluggableUSBv>
    132e:	0021      	movs	r1, r4
    1330:	f7ff fd06 	bl	d40 <_ZN13PluggableUSB_12getInterfaceEPh>
    1334:	682b      	ldr	r3, [r5, #0]
    1336:	1818      	adds	r0, r3, r0
    1338:	6028      	str	r0, [r5, #0]
	return interfaces;
    133a:	7820      	ldrb	r0, [r4, #0]
}
    133c:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
	...

00001340 <_ZN14USBDeviceClass4initEv>:
{
    1340:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	txLEDPulse = 0;
    1342:	2400      	movs	r4, #0
    1344:	4b49      	ldr	r3, [pc, #292]	; (146c <_ZN14USBDeviceClass4initEv+0x12c>)
	pinMode(PIN_LED_TXL, OUTPUT);
    1346:	2101      	movs	r1, #1
{
    1348:	0005      	movs	r5, r0
	pinMode(PIN_LED_TXL, OUTPUT);
    134a:	201a      	movs	r0, #26
	txLEDPulse = 0;
    134c:	701c      	strb	r4, [r3, #0]
	pinMode(PIN_LED_TXL, OUTPUT);
    134e:	f000 fe49 	bl	1fe4 <pinMode>
	digitalWrite(PIN_LED_TXL, HIGH);
    1352:	2101      	movs	r1, #1
    1354:	201a      	movs	r0, #26
    1356:	f000 fe91 	bl	207c <digitalWrite>
	rxLEDPulse = 0;
    135a:	4b45      	ldr	r3, [pc, #276]	; (1470 <_ZN14USBDeviceClass4initEv+0x130>)
	pinMode(PIN_LED_RXL, OUTPUT);
    135c:	2101      	movs	r1, #1
    135e:	2019      	movs	r0, #25
	rxLEDPulse = 0;
    1360:	701c      	strb	r4, [r3, #0]
	pinMode(PIN_LED_RXL, OUTPUT);
    1362:	f000 fe3f 	bl	1fe4 <pinMode>
	digitalWrite(PIN_LED_RXL, HIGH);
    1366:	2101      	movs	r1, #1
    1368:	2019      	movs	r0, #25
    136a:	f000 fe87 	bl	207c <digitalWrite>
	PM->APBBMASK.reg |= PM_APBBMASK_USB;
    136e:	2320      	movs	r3, #32
    1370:	4a40      	ldr	r2, [pc, #256]	; (1474 <_ZN14USBDeviceClass4initEv+0x134>)
	PORT->Group[0].PMUX[PIN_PA24G_USB_DM/2].reg &= ~(0xF << (4 * (PIN_PA24G_USB_DM & 0x01u)));
    1372:	200f      	movs	r0, #15
	PM->APBBMASK.reg |= PM_APBBMASK_USB;
    1374:	69d1      	ldr	r1, [r2, #28]
    1376:	430b      	orrs	r3, r1
    1378:	61d3      	str	r3, [r2, #28]
	PORT->Group[0].PINCFG[PIN_PA24G_USB_DM].bit.PMUXEN = 1;
    137a:	2201      	movs	r2, #1
    137c:	493e      	ldr	r1, [pc, #248]	; (1478 <_ZN14USBDeviceClass4initEv+0x138>)
    137e:	780b      	ldrb	r3, [r1, #0]
    1380:	4313      	orrs	r3, r2
    1382:	700b      	strb	r3, [r1, #0]
	PORT->Group[0].PMUX[PIN_PA24G_USB_DM/2].reg &= ~(0xF << (4 * (PIN_PA24G_USB_DM & 0x01u)));
    1384:	4b3d      	ldr	r3, [pc, #244]	; (147c <_ZN14USBDeviceClass4initEv+0x13c>)
    1386:	7819      	ldrb	r1, [r3, #0]
    1388:	4381      	bics	r1, r0
    138a:	7019      	strb	r1, [r3, #0]
	PORT->Group[0].PMUX[PIN_PA24G_USB_DM/2].reg |= MUX_PA24G_USB_DM << (4 * (PIN_PA24G_USB_DM & 0x01u));
    138c:	2106      	movs	r1, #6
    138e:	781c      	ldrb	r4, [r3, #0]
    1390:	4321      	orrs	r1, r4
    1392:	7019      	strb	r1, [r3, #0]
	PORT->Group[0].PINCFG[PIN_PA25G_USB_DP].bit.PMUXEN = 1;
    1394:	493a      	ldr	r1, [pc, #232]	; (1480 <_ZN14USBDeviceClass4initEv+0x140>)
    1396:	780c      	ldrb	r4, [r1, #0]
    1398:	4322      	orrs	r2, r4
    139a:	700a      	strb	r2, [r1, #0]
	PORT->Group[0].PMUX[PIN_PA25G_USB_DP/2].reg &= ~(0xF << (4 * (PIN_PA25G_USB_DP & 0x01u)));
    139c:	781a      	ldrb	r2, [r3, #0]
    139e:	4002      	ands	r2, r0
    13a0:	701a      	strb	r2, [r3, #0]
	PORT->Group[0].PMUX[PIN_PA25G_USB_DP/2].reg |= MUX_PA25G_USB_DP << (4 * (PIN_PA25G_USB_DP & 0x01u));
    13a2:	2260      	movs	r2, #96	; 0x60
    13a4:	7819      	ldrb	r1, [r3, #0]
    13a6:	430a      	orrs	r2, r1
    13a8:	701a      	strb	r2, [r3, #0]
	GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(6)     | // Generic Clock Multiplexer 6
    13aa:	4b36      	ldr	r3, [pc, #216]	; (1484 <_ZN14USBDeviceClass4initEv+0x144>)
    13ac:	4a36      	ldr	r2, [pc, #216]	; (1488 <_ZN14USBDeviceClass4initEv+0x148>)
    13ae:	805a      	strh	r2, [r3, #2]
	while (GCLK->STATUS.bit.SYNCBUSY)
    13b0:	785f      	ldrb	r7, [r3, #1]
    13b2:	09ff      	lsrs	r7, r7, #7
    13b4:	d1fc      	bne.n	13b0 <_ZN14USBDeviceClass4initEv+0x70>
	USB_SetHandler(&UDD_Handler);
    13b6:	4835      	ldr	r0, [pc, #212]	; (148c <_ZN14USBDeviceClass4initEv+0x14c>)
    13b8:	f7fe ff30 	bl	21c <USB_SetHandler>
	usb.CTRLA.bit.SWRST = 1;
    13bc:	4e34      	ldr	r6, [pc, #208]	; (1490 <_ZN14USBDeviceClass4initEv+0x150>)
    13be:	2301      	movs	r3, #1
    13c0:	0030      	movs	r0, r6
    13c2:	c810      	ldmia	r0!, {r4}
	memset(EP, 0, sizeof(EP));
    13c4:	0039      	movs	r1, r7
	usb.CTRLA.bit.SWRST = 1;
    13c6:	7822      	ldrb	r2, [r4, #0]
    13c8:	4313      	orrs	r3, r2
	memset(EP, 0, sizeof(EP));
    13ca:	2280      	movs	r2, #128	; 0x80
	usb.CTRLA.bit.SWRST = 1;
    13cc:	7023      	strb	r3, [r4, #0]
	memset(EP, 0, sizeof(EP));
    13ce:	0052      	lsls	r2, r2, #1
    13d0:	f001 f935 	bl	263e <memset>
	while (usb.SYNCBUSY.bit.SWRST) {}
    13d4:	78a3      	ldrb	r3, [r4, #2]
    13d6:	07db      	lsls	r3, r3, #31
    13d8:	d4fc      	bmi.n	13d4 <_ZN14USBDeviceClass4initEv+0x94>
	uint32_t pad_transn = (*pad_transn_p & USB_FUSES_TRANSN_Msk) >> USB_FUSES_TRANSN_Pos;
    13da:	201f      	movs	r0, #31
	usb.DESCADD.reg = (uint32_t)(&EP);
    13dc:	3604      	adds	r6, #4
	uint32_t pad_transn = (*pad_transn_p & USB_FUSES_TRANSN_Msk) >> USB_FUSES_TRANSN_Pos;
    13de:	4b2d      	ldr	r3, [pc, #180]	; (1494 <_ZN14USBDeviceClass4initEv+0x154>)
	usb.DESCADD.reg = (uint32_t)(&EP);
    13e0:	6266      	str	r6, [r4, #36]	; 0x24
	uint32_t pad_transn = (*pad_transn_p & USB_FUSES_TRANSN_Msk) >> USB_FUSES_TRANSN_Pos;
    13e2:	681b      	ldr	r3, [r3, #0]
    13e4:	0b5a      	lsrs	r2, r3, #13
	uint32_t pad_transp = (*pad_transp_p & USB_FUSES_TRANSP_Msk) >> USB_FUSES_TRANSP_Pos;
    13e6:	0c99      	lsrs	r1, r3, #18
	uint32_t pad_trim   = (*pad_trim_p   & USB_FUSES_TRIM_Msk  ) >> USB_FUSES_TRIM_Pos;
    13e8:	019b      	lsls	r3, r3, #6
	uint32_t pad_transn = (*pad_transn_p & USB_FUSES_TRANSN_Msk) >> USB_FUSES_TRANSN_Pos;
    13ea:	4002      	ands	r2, r0
	uint32_t pad_transp = (*pad_transp_p & USB_FUSES_TRANSP_Msk) >> USB_FUSES_TRANSP_Pos;
    13ec:	4001      	ands	r1, r0
	uint32_t pad_trim   = (*pad_trim_p   & USB_FUSES_TRIM_Msk  ) >> USB_FUSES_TRIM_Pos;
    13ee:	0f5b      	lsrs	r3, r3, #29
	if (pad_transn == 0x1F)  // maximum value (31)
    13f0:	4282      	cmp	r2, r0
    13f2:	d100      	bne.n	13f6 <_ZN14USBDeviceClass4initEv+0xb6>
		pad_transn = 5;
    13f4:	2205      	movs	r2, #5
	if (pad_transp == 0x1F)  // maximum value (31)
    13f6:	291f      	cmp	r1, #31
    13f8:	d100      	bne.n	13fc <_ZN14USBDeviceClass4initEv+0xbc>
		pad_transp = 29;
    13fa:	3902      	subs	r1, #2
	if (pad_trim == 0x7)     // maximum value (7)
    13fc:	2b07      	cmp	r3, #7
    13fe:	d100      	bne.n	1402 <_ZN14USBDeviceClass4initEv+0xc2>
		pad_trim = 3;
    1400:	3b04      	subs	r3, #4
	usb.PADCAL.bit.TRANSN = pad_transn;
    1402:	8d26      	ldrh	r6, [r4, #40]	; 0x28
    1404:	4f24      	ldr	r7, [pc, #144]	; (1498 <_ZN14USBDeviceClass4initEv+0x158>)
    1406:	4002      	ands	r2, r0
    1408:	403e      	ands	r6, r7
    140a:	0192      	lsls	r2, r2, #6
    140c:	4332      	orrs	r2, r6
    140e:	8522      	strh	r2, [r4, #40]	; 0x28
	usb.PADCAL.bit.TRANSP = pad_transp;
    1410:	8d22      	ldrh	r2, [r4, #40]	; 0x28
    1412:	4001      	ands	r1, r0
    1414:	4382      	bics	r2, r0
    1416:	000e      	movs	r6, r1
    1418:	0011      	movs	r1, r2
    141a:	4331      	orrs	r1, r6
    141c:	8521      	strh	r1, [r4, #40]	; 0x28
	usb.PADCAL.bit.TRIM   = pad_trim;
    141e:	8d22      	ldrh	r2, [r4, #40]	; 0x28
    1420:	0319      	lsls	r1, r3, #12
    1422:	4b1e      	ldr	r3, [pc, #120]	; (149c <_ZN14USBDeviceClass4initEv+0x15c>)
	SerialUSB.begin(0);
    1424:	481e      	ldr	r0, [pc, #120]	; (14a0 <_ZN14USBDeviceClass4initEv+0x160>)
    1426:	4013      	ands	r3, r2
	inline void setUSBDeviceMode() { usb.CTRLA.bit.MODE = USB_CTRLA_MODE_DEVICE_Val; }
    1428:	227f      	movs	r2, #127	; 0x7f
	usb.PADCAL.bit.TRIM   = pad_trim;
    142a:	430b      	orrs	r3, r1
    142c:	8523      	strh	r3, [r4, #40]	; 0x28
	inline void setUSBDeviceMode() { usb.CTRLA.bit.MODE = USB_CTRLA_MODE_DEVICE_Val; }
    142e:	7823      	ldrb	r3, [r4, #0]
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    1430:	21c1      	movs	r1, #193	; 0xc1
    1432:	4013      	ands	r3, r2
    1434:	7023      	strb	r3, [r4, #0]
	inline void runInStandby()   { usb.CTRLA.bit.RUNSTDBY = 1; }
    1436:	2304      	movs	r3, #4
    1438:	7822      	ldrb	r2, [r4, #0]
    143a:	0089      	lsls	r1, r1, #2
    143c:	4313      	orrs	r3, r2
	inline void setFullSpeed()       { usb.CTRLB.bit.SPDCONF = USB_DEVICE_CTRLB_SPDCONF_FS_Val;   }
    143e:	220c      	movs	r2, #12
	inline void runInStandby()   { usb.CTRLA.bit.RUNSTDBY = 1; }
    1440:	7023      	strb	r3, [r4, #0]
	inline void setFullSpeed()       { usb.CTRLB.bit.SPDCONF = USB_DEVICE_CTRLB_SPDCONF_FS_Val;   }
    1442:	8923      	ldrh	r3, [r4, #8]
    1444:	4393      	bics	r3, r2
    1446:	4a17      	ldr	r2, [pc, #92]	; (14a4 <_ZN14USBDeviceClass4initEv+0x164>)
    1448:	8123      	strh	r3, [r4, #8]
    144a:	5853      	ldr	r3, [r2, r1]
    144c:	021b      	lsls	r3, r3, #8
    144e:	0a1b      	lsrs	r3, r3, #8
    1450:	5053      	str	r3, [r2, r1]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1452:	2380      	movs	r3, #128	; 0x80
    1454:	6013      	str	r3, [r2, #0]
	inline void enable()  { usb.CTRLA.bit.ENABLE = 1; }
    1456:	7822      	ldrb	r2, [r4, #0]
    1458:	3b7e      	subs	r3, #126	; 0x7e
    145a:	4313      	orrs	r3, r2
    145c:	7023      	strb	r3, [r4, #0]
	initialized = true;
    145e:	2301      	movs	r3, #1
	SerialUSB.begin(0);
    1460:	2100      	movs	r1, #0
	initialized = true;
    1462:	702b      	strb	r3, [r5, #0]
	SerialUSB.begin(0);
    1464:	f7ff fc60 	bl	d28 <_ZN7Serial_5beginEm>
}
    1468:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    146a:	46c0      	nop			; (mov r8, r8)
    146c:	2000014d 	.word	0x2000014d
    1470:	2000014c 	.word	0x2000014c
    1474:	40000400 	.word	0x40000400
    1478:	41004458 	.word	0x41004458
    147c:	4100443c 	.word	0x4100443c
    1480:	41004459 	.word	0x41004459
    1484:	40000c00 	.word	0x40000c00
    1488:	00004006 	.word	0x00004006
    148c:	00001e71 	.word	0x00001e71
    1490:	200005e4 	.word	0x200005e4
    1494:	00806024 	.word	0x00806024
    1498:	fffff83f 	.word	0xfffff83f
    149c:	ffff8fff 	.word	0xffff8fff
    14a0:	200000c4 	.word	0x200000c4
    14a4:	e000e100 	.word	0xe000e100

000014a8 <_ZN14USBDeviceClass6attachEv>:
	if (!initialized)
    14a8:	7800      	ldrb	r0, [r0, #0]
    14aa:	2800      	cmp	r0, #0
    14ac:	d010      	beq.n	14d0 <_ZN14USBDeviceClass6attachEv+0x28>
	inline void attach() { usb.CTRLB.bit.DETACH = 0; }
    14ae:	2101      	movs	r1, #1
    14b0:	4b08      	ldr	r3, [pc, #32]	; (14d4 <_ZN14USBDeviceClass6attachEv+0x2c>)
    14b2:	681b      	ldr	r3, [r3, #0]
    14b4:	891a      	ldrh	r2, [r3, #8]
    14b6:	438a      	bics	r2, r1
    14b8:	811a      	strh	r2, [r3, #8]
	inline void enableEndOfResetInterrupt()    { usb.INTENSET.bit.EORST = 1; }
    14ba:	2208      	movs	r2, #8
    14bc:	8b19      	ldrh	r1, [r3, #24]
    14be:	430a      	orrs	r2, r1
    14c0:	831a      	strh	r2, [r3, #24]
	inline void enableStartOfFrameInterrupt()  { usb.INTENSET.bit.SOF = 1; }
    14c2:	2204      	movs	r2, #4
    14c4:	8b19      	ldrh	r1, [r3, #24]
    14c6:	430a      	orrs	r2, r1
    14c8:	831a      	strh	r2, [r3, #24]
	_usbConfiguration = 0;
    14ca:	2200      	movs	r2, #0
    14cc:	4b02      	ldr	r3, [pc, #8]	; (14d8 <_ZN14USBDeviceClass6attachEv+0x30>)
    14ce:	601a      	str	r2, [r3, #0]
}
    14d0:	4770      	bx	lr
    14d2:	46c0      	nop			; (mov r8, r8)
    14d4:	200005e4 	.word	0x200005e4
    14d8:	200005dc 	.word	0x200005dc

000014dc <_ZN14USBDeviceClass10setAddressEm>:
{
    14dc:	b510      	push	{r4, lr}
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
    14de:	4a0f      	ldr	r2, [pc, #60]	; (151c <_ZN14USBDeviceClass10setAddressEm+0x40>)
    14e0:	6993      	ldr	r3, [r2, #24]
    14e2:	0b9b      	lsrs	r3, r3, #14
    14e4:	039b      	lsls	r3, r3, #14
    14e6:	6193      	str	r3, [r2, #24]
	inline void epBank1AckTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT(2); }
    14e8:	6813      	ldr	r3, [r2, #0]
    14ea:	2202      	movs	r2, #2
    14ec:	33ff      	adds	r3, #255	; 0xff
    14ee:	721a      	strb	r2, [r3, #8]
	inline void epBank1SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK1RDY = 1; }
    14f0:	7998      	ldrb	r0, [r3, #6]
    14f2:	3a82      	subs	r2, #130	; 0x82
    14f4:	4302      	orrs	r2, r0
    14f6:	719a      	strb	r2, [r3, #6]
	inline bool epBank1IsTransferComplete(ep_t ep)  { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.TRCPT1; }
    14f8:	7a1a      	ldrb	r2, [r3, #8]
	while (!usbd.epBank1IsTransferComplete(0)) {}
    14fa:	0792      	lsls	r2, r2, #30
    14fc:	d5fc      	bpl.n	14f8 <_ZN14USBDeviceClass10setAddressEm+0x1c>
	USB->DEVICE.DADD.bit.DADD = addr; // Address
    14fe:	247f      	movs	r4, #127	; 0x7f
    1500:	4a07      	ldr	r2, [pc, #28]	; (1520 <_ZN14USBDeviceClass10setAddressEm+0x44>)
    1502:	4021      	ands	r1, r4
    1504:	7a93      	ldrb	r3, [r2, #10]
    1506:	0008      	movs	r0, r1
    1508:	43a3      	bics	r3, r4
    150a:	0019      	movs	r1, r3
	USB->DEVICE.DADD.bit.ADDEN = 1; // Enable
    150c:	2380      	movs	r3, #128	; 0x80
	USB->DEVICE.DADD.bit.DADD = addr; // Address
    150e:	4301      	orrs	r1, r0
    1510:	7291      	strb	r1, [r2, #10]
	USB->DEVICE.DADD.bit.ADDEN = 1; // Enable
    1512:	7a91      	ldrb	r1, [r2, #10]
    1514:	425b      	negs	r3, r3
    1516:	430b      	orrs	r3, r1
    1518:	7293      	strb	r3, [r2, #10]
}
    151a:	bd10      	pop	{r4, pc}
    151c:	200005e4 	.word	0x200005e4
    1520:	41005000 	.word	0x41005000

00001524 <_ZN14USBDeviceClass25handleClassInterfaceSetupER8USBSetup>:
{
    1524:	b510      	push	{r4, lr}
    1526:	000c      	movs	r4, r1
	bool ret = PluggableUSB().setup(setup);
    1528:	f7ff fc8a 	bl	e40 <_Z12PluggableUSBv>
    152c:	0021      	movs	r1, r4
    152e:	f7ff fc3e 	bl	dae <_ZN13PluggableUSB_5setupER8USBSetup>
	if ( ret == false) {
    1532:	2800      	cmp	r0, #0
    1534:	d104      	bne.n	1540 <_ZN14USBDeviceClass25handleClassInterfaceSetupER8USBSetup+0x1c>
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
    1536:	4a03      	ldr	r2, [pc, #12]	; (1544 <_ZN14USBDeviceClass25handleClassInterfaceSetupER8USBSetup+0x20>)
    1538:	6993      	ldr	r3, [r2, #24]
    153a:	0b9b      	lsrs	r3, r3, #14
    153c:	039b      	lsls	r3, r3, #14
    153e:	6193      	str	r3, [r2, #24]
}
    1540:	bd10      	pop	{r4, pc}
    1542:	46c0      	nop			; (mov r8, r8)
    1544:	200005e4 	.word	0x200005e4

00001548 <_ZN14USBDeviceClass6initEPEmm>:
{
    1548:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    154a:	000d      	movs	r5, r1
	if (config == (USB_ENDPOINT_TYPE_INTERRUPT | USB_ENDPOINT_IN(0)))
    154c:	2a83      	cmp	r2, #131	; 0x83
    154e:	d119      	bne.n	1584 <_ZN14USBDeviceClass6initEPEmm+0x3c>
	inline void epBank1SetSize(ep_t ep, uint16_t size) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.SIZE = EP_PCKSIZE_SIZE(size); }
    1550:	b2cb      	uxtb	r3, r1
    1552:	4c39      	ldr	r4, [pc, #228]	; (1638 <_ZN14USBDeviceClass6initEPEmm+0xf0>)
    1554:	015a      	lsls	r2, r3, #5
    1556:	18a2      	adds	r2, r4, r2
    1558:	6991      	ldr	r1, [r2, #24]
    155a:	4838      	ldr	r0, [pc, #224]	; (163c <_ZN14USBDeviceClass6initEPEmm+0xf4>)
		usbd.epBank1SetAddress(ep, &udd_ep_in_cache_buffer[ep]);
    155c:	01ad      	lsls	r5, r5, #6
    155e:	4008      	ands	r0, r1
    1560:	21c0      	movs	r1, #192	; 0xc0
    1562:	0589      	lsls	r1, r1, #22
    1564:	4301      	orrs	r1, r0
    1566:	6191      	str	r1, [r2, #24]
    1568:	4935      	ldr	r1, [pc, #212]	; (1640 <_ZN14USBDeviceClass6initEPEmm+0xf8>)
	inline void epBank1SetType(ep_t ep, uint8_t type) { usb.DeviceEndpoint[ep].EPCFG.bit.EPTYPE1 = type; }
    156a:	6820      	ldr	r0, [r4, #0]
    156c:	194d      	adds	r5, r1, r5
    156e:	2170      	movs	r1, #112	; 0x70
    1570:	3308      	adds	r3, #8
	inline void epBank1SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[1].ADDR.reg = (uint32_t)addr; }
    1572:	6155      	str	r5, [r2, #20]
	inline void epBank1SetType(ep_t ep, uint8_t type) { usb.DeviceEndpoint[ep].EPCFG.bit.EPTYPE1 = type; }
    1574:	015b      	lsls	r3, r3, #5
    1576:	5c1a      	ldrb	r2, [r3, r0]
    1578:	438a      	bics	r2, r1
    157a:	0011      	movs	r1, r2
    157c:	2240      	movs	r2, #64	; 0x40
    157e:	430a      	orrs	r2, r1
    1580:	541a      	strb	r2, [r3, r0]
}
    1582:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	else if (config == (USB_ENDPOINT_TYPE_BULK | USB_ENDPOINT_OUT(0)))
    1584:	2a02      	cmp	r2, #2
    1586:	d152      	bne.n	162e <_ZN14USBDeviceClass6initEPEmm+0xe6>
		if (epHandlers[ep] != NULL) {
    1588:	4a2e      	ldr	r2, [pc, #184]	; (1644 <_ZN14USBDeviceClass6initEPEmm+0xfc>)
    158a:	008b      	lsls	r3, r1, #2
    158c:	5898      	ldr	r0, [r3, r2]
    158e:	2800      	cmp	r0, #0
    1590:	d002      	beq.n	1598 <_ZN14USBDeviceClass6initEPEmm+0x50>
			delete (DoubleBufferedEPOutHandler*)epHandlers[ep];
    1592:	6803      	ldr	r3, [r0, #0]
    1594:	695b      	ldr	r3, [r3, #20]
    1596:	4798      	blx	r3
		epHandlers[ep] = new DoubleBufferedEPOutHandler(usbd, ep);
    1598:	20da      	movs	r0, #218	; 0xda
    159a:	0040      	lsls	r0, r0, #1
    159c:	f000 fe52 	bl	2244 <_Znwj>
    memset( _aucBuffer, 0, N ) ;
    15a0:	2280      	movs	r2, #128	; 0x80
    15a2:	0004      	movs	r4, r0
		notify(false)
    15a4:	4e24      	ldr	r6, [pc, #144]	; (1638 <_ZN14USBDeviceClass6initEPEmm+0xf0>)
    15a6:	4b28      	ldr	r3, [pc, #160]	; (1648 <_ZN14USBDeviceClass6initEPEmm+0x100>)
    15a8:	6046      	str	r6, [r0, #4]
    15aa:	6003      	str	r3, [r0, #0]
    15ac:	0052      	lsls	r2, r2, #1
    15ae:	2100      	movs	r1, #0
    15b0:	3008      	adds	r0, #8
    15b2:	f001 f844 	bl	263e <memset>
  _iHead = 0;
    15b6:	0022      	movs	r2, r4
    15b8:	2300      	movs	r3, #0
    15ba:	32fc      	adds	r2, #252	; 0xfc
    15bc:	60d3      	str	r3, [r2, #12]
    15be:	6155      	str	r5, [r2, #20]
  _iTail = 0;
    15c0:	6113      	str	r3, [r2, #16]
    15c2:	6613      	str	r3, [r2, #96]	; 0x60
    15c4:	6193      	str	r3, [r2, #24]
    15c6:	61d3      	str	r3, [r2, #28]
    15c8:	6653      	str	r3, [r2, #100]	; 0x64
    15ca:	22b2      	movs	r2, #178	; 0xb2
    15cc:	0052      	lsls	r2, r2, #1
    15ce:	54a3      	strb	r3, [r4, r2]
    15d0:	3244      	adds	r2, #68	; 0x44
    15d2:	50a3      	str	r3, [r4, r2]
    15d4:	3204      	adds	r2, #4
    15d6:	50a3      	str	r3, [r4, r2]
    15d8:	3204      	adds	r2, #4
    15da:	54a3      	strb	r3, [r4, r2]
    15dc:	22b2      	movs	r2, #178	; 0xb2
    15de:	32ff      	adds	r2, #255	; 0xff
    15e0:	54a3      	strb	r3, [r4, r2]
	inline void epBank0SetSize(ep_t ep, uint16_t size) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.SIZE = EP_PCKSIZE_SIZE(size); }
    15e2:	b2ea      	uxtb	r2, r5
    15e4:	0150      	lsls	r0, r2, #5
    15e6:	1831      	adds	r1, r6, r0
    15e8:	688b      	ldr	r3, [r1, #8]
    15ea:	4f14      	ldr	r7, [pc, #80]	; (163c <_ZN14USBDeviceClass6initEPEmm+0xf4>)
	inline void epBank0SetType(ep_t ep, uint8_t type) { usb.DeviceEndpoint[ep].EPCFG.bit.EPTYPE0 = type; }
    15ec:	3208      	adds	r2, #8
	inline void epBank0SetSize(ep_t ep, uint16_t size) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.SIZE = EP_PCKSIZE_SIZE(size); }
    15ee:	401f      	ands	r7, r3
    15f0:	23c0      	movs	r3, #192	; 0xc0
    15f2:	059b      	lsls	r3, r3, #22
    15f4:	433b      	orrs	r3, r7
	inline void epBank0SetType(ep_t ep, uint8_t type) { usb.DeviceEndpoint[ep].EPCFG.bit.EPTYPE0 = type; }
    15f6:	2707      	movs	r7, #7
	inline void epBank0SetSize(ep_t ep, uint16_t size) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.SIZE = EP_PCKSIZE_SIZE(size); }
    15f8:	608b      	str	r3, [r1, #8]
	inline void epBank0SetType(ep_t ep, uint8_t type) { usb.DeviceEndpoint[ep].EPCFG.bit.EPTYPE0 = type; }
    15fa:	6833      	ldr	r3, [r6, #0]
    15fc:	0152      	lsls	r2, r2, #5
    15fe:	5cd6      	ldrb	r6, [r2, r3]
    1600:	00ad      	lsls	r5, r5, #2
    1602:	43be      	bics	r6, r7
    1604:	46b4      	mov	ip, r6
    1606:	2603      	movs	r6, #3
    1608:	4667      	mov	r7, ip
    160a:	433e      	orrs	r6, r7
    160c:	54d6      	strb	r6, [r2, r3]
		usbd.epBank0SetAddress(ep, const_cast<uint8_t *>(data0));
    160e:	0022      	movs	r2, r4
    1610:	321d      	adds	r2, #29
    1612:	32ff      	adds	r2, #255	; 0xff
	inline void epBank0SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[0].ADDR.reg = (uint32_t)addr; }
    1614:	604a      	str	r2, [r1, #4]
	inline void epBank0EnableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRCPT0 = 1; }
    1616:	2201      	movs	r2, #1
    1618:	181b      	adds	r3, r3, r0
    161a:	33ff      	adds	r3, #255	; 0xff
    161c:	7a99      	ldrb	r1, [r3, #10]
		release();
    161e:	0020      	movs	r0, r4
	inline void epBank0EnableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRCPT0 = 1; }
    1620:	430a      	orrs	r2, r1
    1622:	729a      	strb	r2, [r3, #10]
		release();
    1624:	f7ff fccc 	bl	fc0 <_ZN26DoubleBufferedEPOutHandler7releaseEv>
    1628:	4b06      	ldr	r3, [pc, #24]	; (1644 <_ZN14USBDeviceClass6initEPEmm+0xfc>)
    162a:	515c      	str	r4, [r3, r5]
    162c:	e7a9      	b.n	1582 <_ZN14USBDeviceClass6initEPEmm+0x3a>
    162e:	0011      	movs	r1, r2
    1630:	0028      	movs	r0, r5
    1632:	f7ff fc1d 	bl	e70 <_ZN14USBDeviceClass6initEPEmm.part.7>
}
    1636:	e7a4      	b.n	1582 <_ZN14USBDeviceClass6initEPEmm+0x3a>
    1638:	200005e4 	.word	0x200005e4
    163c:	8fffffff 	.word	0x8fffffff
    1640:	20000158 	.word	0x20000158
    1644:	20000130 	.word	0x20000130
    1648:	000028a0 	.word	0x000028a0

0000164c <_ZN14USBDeviceClass13initEndpointsEv>:
void USBDeviceClass::initEndpoints() {
    164c:	b570      	push	{r4, r5, r6, lr}
    164e:	0005      	movs	r5, r0
    1650:	2401      	movs	r4, #1
	for (uint8_t i = 1; (i < EP_ARRAY_SIZE) && (EndPoints[i] != 0); i++) {
    1652:	4b06      	ldr	r3, [pc, #24]	; (166c <_ZN14USBDeviceClass13initEndpointsEv+0x20>)
    1654:	00a2      	lsls	r2, r4, #2
    1656:	58d2      	ldr	r2, [r2, r3]
    1658:	2a00      	cmp	r2, #0
    165a:	d006      	beq.n	166a <_ZN14USBDeviceClass13initEndpointsEv+0x1e>
		initEP(i, EndPoints[i]);
    165c:	0021      	movs	r1, r4
    165e:	0028      	movs	r0, r5
    1660:	3401      	adds	r4, #1
    1662:	f7ff ff71 	bl	1548 <_ZN14USBDeviceClass6initEPEmm>
	for (uint8_t i = 1; (i < EP_ARRAY_SIZE) && (EndPoints[i] != 0); i++) {
    1666:	2c0a      	cmp	r4, #10
    1668:	d1f3      	bne.n	1652 <_ZN14USBDeviceClass13initEndpointsEv+0x6>
}
    166a:	bd70      	pop	{r4, r5, r6, pc}
    166c:	20000104 	.word	0x20000104

00001670 <_ZN14USBDeviceClass5clearEm>:
		usbd.epBank1AckTransferComplete(ep);
	}
}

void USBDeviceClass::clear(uint32_t ep) {
	usbd.epBank1SetAddress(ep, &udd_ep_in_cache_buffer[ep]);
    1670:	4b0b      	ldr	r3, [pc, #44]	; (16a0 <_ZN14USBDeviceClass5clearEm+0x30>)
	inline void epBank1SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[1].ADDR.reg = (uint32_t)addr; }
    1672:	b2ca      	uxtb	r2, r1
    1674:	480b      	ldr	r0, [pc, #44]	; (16a4 <_ZN14USBDeviceClass5clearEm+0x34>)
    1676:	0189      	lsls	r1, r1, #6
    1678:	1859      	adds	r1, r3, r1
    167a:	0153      	lsls	r3, r2, #5
    167c:	18c3      	adds	r3, r0, r3
    167e:	6159      	str	r1, [r3, #20]
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
    1680:	6999      	ldr	r1, [r3, #24]
	inline void epBank1AckTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT(2); }
    1682:	3208      	adds	r2, #8
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
    1684:	0b89      	lsrs	r1, r1, #14
    1686:	0389      	lsls	r1, r1, #14
    1688:	6199      	str	r1, [r3, #24]
	inline void epBank1AckTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT(2); }
    168a:	6803      	ldr	r3, [r0, #0]
    168c:	0152      	lsls	r2, r2, #5
    168e:	189a      	adds	r2, r3, r2
    1690:	2302      	movs	r3, #2
    1692:	71d3      	strb	r3, [r2, #7]
	inline void epBank1SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK1RDY = 1; }
    1694:	7951      	ldrb	r1, [r2, #5]
    1696:	3b82      	subs	r3, #130	; 0x82
    1698:	430b      	orrs	r3, r1
    169a:	7153      	strb	r3, [r2, #5]
	// Clear the transfer complete flag
	usbd.epBank1AckTransferComplete(ep);

	// RAM buffer is full, we can send data (IN)
	usbd.epBank1SetReady(ep);
}
    169c:	4770      	bx	lr
    169e:	46c0      	nop			; (mov r8, r8)
    16a0:	20000158 	.word	0x20000158
    16a4:	200005e4 	.word	0x200005e4

000016a8 <_ZN14USBDeviceClass9availableEm>:
}

// Number of bytes, assumes a rx endpoint
uint32_t USBDeviceClass::available(uint32_t ep)
{
	if (epHandlers[ep]) {
    16a8:	4b08      	ldr	r3, [pc, #32]	; (16cc <_ZN14USBDeviceClass9availableEm+0x24>)
    16aa:	008a      	lsls	r2, r1, #2
    16ac:	58d0      	ldr	r0, [r2, r3]
{
    16ae:	b510      	push	{r4, lr}
	if (epHandlers[ep]) {
    16b0:	2800      	cmp	r0, #0
    16b2:	d003      	beq.n	16bc <_ZN14USBDeviceClass9availableEm+0x14>
		return epHandlers[ep]->available();
    16b4:	6803      	ldr	r3, [r0, #0]
    16b6:	689b      	ldr	r3, [r3, #8]
    16b8:	4798      	blx	r3
	} else {
		return usbd.epBank0ByteCount(ep);
	}
}
    16ba:	bd10      	pop	{r4, pc}
	inline uint16_t epBank0ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT; }
    16bc:	b2c9      	uxtb	r1, r1
    16be:	4b04      	ldr	r3, [pc, #16]	; (16d0 <_ZN14USBDeviceClass9availableEm+0x28>)
    16c0:	0149      	lsls	r1, r1, #5
    16c2:	1859      	adds	r1, r3, r1
    16c4:	6888      	ldr	r0, [r1, #8]
    16c6:	0480      	lsls	r0, r0, #18
    16c8:	0c80      	lsrs	r0, r0, #18
		return usbd.epBank0ByteCount(ep);
    16ca:	e7f6      	b.n	16ba <_ZN14USBDeviceClass9availableEm+0x12>
    16cc:	20000130 	.word	0x20000130
    16d0:	200005e4 	.word	0x200005e4

000016d4 <_ZN14USBDeviceClass5flushEm>:
{
    16d4:	b510      	push	{r4, lr}
    16d6:	000c      	movs	r4, r1
	if (available(ep)) {
    16d8:	f7ff ffe6 	bl	16a8 <_ZN14USBDeviceClass9availableEm>
    16dc:	2800      	cmp	r0, #0
    16de:	d00c      	beq.n	16fa <_ZN14USBDeviceClass5flushEm+0x26>
	inline void epBank1SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK1RDY = 1; }
    16e0:	4b06      	ldr	r3, [pc, #24]	; (16fc <_ZN14USBDeviceClass5flushEm+0x28>)
    16e2:	b2e4      	uxtb	r4, r4
    16e4:	681b      	ldr	r3, [r3, #0]
    16e6:	3408      	adds	r4, #8
    16e8:	0164      	lsls	r4, r4, #5
    16ea:	191c      	adds	r4, r3, r4
    16ec:	2380      	movs	r3, #128	; 0x80
    16ee:	7962      	ldrb	r2, [r4, #5]
    16f0:	425b      	negs	r3, r3
    16f2:	4313      	orrs	r3, r2
    16f4:	7163      	strb	r3, [r4, #5]
	inline void epBank1AckTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT(2); }
    16f6:	2302      	movs	r3, #2
    16f8:	71e3      	strb	r3, [r4, #7]
}
    16fa:	bd10      	pop	{r4, pc}
    16fc:	200005e4 	.word	0x200005e4

00001700 <_ZN14USBDeviceClass4recvEmPvm>:

// Non Blocking receive
// Return number of bytes read
uint32_t USBDeviceClass::recv(uint32_t ep, void *_data, uint32_t len)
{
    1700:	b5f0      	push	{r4, r5, r6, r7, lr}
    1702:	001c      	movs	r4, r3
	if (!_usbConfiguration)
    1704:	4b30      	ldr	r3, [pc, #192]	; (17c8 <_ZN14USBDeviceClass4recvEmPvm+0xc8>)
{
    1706:	b085      	sub	sp, #20
	if (!_usbConfiguration)
    1708:	681b      	ldr	r3, [r3, #0]
{
    170a:	0007      	movs	r7, r0
    170c:	000d      	movs	r5, r1
    170e:	9202      	str	r2, [sp, #8]
	if (!_usbConfiguration)
    1710:	2b00      	cmp	r3, #0
    1712:	d056      	beq.n	17c2 <_ZN14USBDeviceClass4recvEmPvm+0xc2>
		return -1;

#ifdef PIN_LED_RXL
	if (rxLEDPulse == 0)
    1714:	4e2d      	ldr	r6, [pc, #180]	; (17cc <_ZN14USBDeviceClass4recvEmPvm+0xcc>)
    1716:	7831      	ldrb	r1, [r6, #0]
    1718:	b2c9      	uxtb	r1, r1
    171a:	2900      	cmp	r1, #0
    171c:	d102      	bne.n	1724 <_ZN14USBDeviceClass4recvEmPvm+0x24>
		digitalWrite(PIN_LED_RXL, LOW);
    171e:	2019      	movs	r0, #25
    1720:	f000 fcac 	bl	207c <digitalWrite>

	rxLEDPulse = TX_RX_LED_PULSE_MS;
    1724:	2364      	movs	r3, #100	; 0x64
    1726:	7033      	strb	r3, [r6, #0]
#endif

	if (epHandlers[ep]) {
    1728:	4b29      	ldr	r3, [pc, #164]	; (17d0 <_ZN14USBDeviceClass4recvEmPvm+0xd0>)
    172a:	00aa      	lsls	r2, r5, #2
    172c:	58d0      	ldr	r0, [r2, r3]
    172e:	2800      	cmp	r0, #0
    1730:	d008      	beq.n	1744 <_ZN14USBDeviceClass4recvEmPvm+0x44>
		return epHandlers[ep]->recv(_data, len);
    1732:	6803      	ldr	r3, [r0, #0]
    1734:	0022      	movs	r2, r4
    1736:	685b      	ldr	r3, [r3, #4]
    1738:	9902      	ldr	r1, [sp, #8]
    173a:	4798      	blx	r3
    173c:	0004      	movs	r4, r0
		// Enable Transfer complete 0 interrupt
		usbd.epBank0EnableTransferComplete(ep);
	}

	return len;
}
    173e:	0020      	movs	r0, r4
    1740:	b005      	add	sp, #20
    1742:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (available(ep) < len)
    1744:	0029      	movs	r1, r5
    1746:	0038      	movs	r0, r7
    1748:	f7ff ffae 	bl	16a8 <_ZN14USBDeviceClass9availableEm>
    174c:	4284      	cmp	r4, r0
    174e:	d904      	bls.n	175a <_ZN14USBDeviceClass4recvEmPvm+0x5a>
		len = available(ep);
    1750:	0029      	movs	r1, r5
    1752:	0038      	movs	r0, r7
    1754:	f7ff ffa8 	bl	16a8 <_ZN14USBDeviceClass9availableEm>
    1758:	0004      	movs	r4, r0
	inline void epBank0DisableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENCLR.bit.TRCPT0 = 1; }
    175a:	2101      	movs	r1, #1
	inline void epBank0SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = bc; }
    175c:	b2eb      	uxtb	r3, r5
    175e:	4e1d      	ldr	r6, [pc, #116]	; (17d4 <_ZN14USBDeviceClass4recvEmPvm+0xd4>)
    1760:	9303      	str	r3, [sp, #12]
    1762:	015b      	lsls	r3, r3, #5
    1764:	9301      	str	r3, [sp, #4]
    1766:	18f2      	adds	r2, r6, r3
    1768:	6893      	ldr	r3, [r2, #8]
    176a:	0b9b      	lsrs	r3, r3, #14
    176c:	039b      	lsls	r3, r3, #14
    176e:	6093      	str	r3, [r2, #8]
	inline void epBank0DisableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENCLR.bit.TRCPT0 = 1; }
    1770:	9a01      	ldr	r2, [sp, #4]
    1772:	6833      	ldr	r3, [r6, #0]
	memcpy(_data, udd_ep_out_cache_buffer[ep], len);
    1774:	9802      	ldr	r0, [sp, #8]
    1776:	189b      	adds	r3, r3, r2
    1778:	33ff      	adds	r3, #255	; 0xff
    177a:	7a5a      	ldrb	r2, [r3, #9]
    177c:	430a      	orrs	r2, r1
    177e:	4916      	ldr	r1, [pc, #88]	; (17d8 <_ZN14USBDeviceClass4recvEmPvm+0xd8>)
    1780:	725a      	strb	r2, [r3, #9]
    1782:	01ab      	lsls	r3, r5, #6
    1784:	18c9      	adds	r1, r1, r3
    1786:	0022      	movs	r2, r4
    1788:	f000 ff50 	bl	262c <memcpy>
	if (len && !available(ep)) {
    178c:	2c00      	cmp	r4, #0
    178e:	d0d6      	beq.n	173e <_ZN14USBDeviceClass4recvEmPvm+0x3e>
    1790:	0029      	movs	r1, r5
    1792:	0038      	movs	r0, r7
    1794:	f7ff ff88 	bl	16a8 <_ZN14USBDeviceClass9availableEm>
    1798:	2800      	cmp	r0, #0
    179a:	d1d0      	bne.n	173e <_ZN14USBDeviceClass4recvEmPvm+0x3e>
	inline void epBank0ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK0RDY = 1; }
    179c:	2140      	movs	r1, #64	; 0x40
    179e:	9b03      	ldr	r3, [sp, #12]
    17a0:	6832      	ldr	r2, [r6, #0]
    17a2:	3308      	adds	r3, #8
    17a4:	015b      	lsls	r3, r3, #5
    17a6:	18d3      	adds	r3, r2, r3
    17a8:	7918      	ldrb	r0, [r3, #4]
    17aa:	4301      	orrs	r1, r0
    17ac:	7119      	strb	r1, [r3, #4]
	inline void epBank0AckTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT(1); }
    17ae:	2101      	movs	r1, #1
    17b0:	71d9      	strb	r1, [r3, #7]
	inline void epBank0EnableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRCPT0 = 1; }
    17b2:	2101      	movs	r1, #1
    17b4:	9b01      	ldr	r3, [sp, #4]
    17b6:	18d3      	adds	r3, r2, r3
    17b8:	33ff      	adds	r3, #255	; 0xff
    17ba:	7a9a      	ldrb	r2, [r3, #10]
    17bc:	430a      	orrs	r2, r1
    17be:	729a      	strb	r2, [r3, #10]
    17c0:	e7bd      	b.n	173e <_ZN14USBDeviceClass4recvEmPvm+0x3e>
		return -1;
    17c2:	2401      	movs	r4, #1
    17c4:	4264      	negs	r4, r4
    17c6:	e7ba      	b.n	173e <_ZN14USBDeviceClass4recvEmPvm+0x3e>
    17c8:	200005dc 	.word	0x200005dc
    17cc:	2000014c 	.word	0x2000014c
    17d0:	20000130 	.word	0x20000130
    17d4:	200005e4 	.word	0x200005e4
    17d8:	20000318 	.word	0x20000318

000017dc <_ZN14USBDeviceClass4recvEm>:

// Recv 1 byte if ready
int USBDeviceClass::recv(uint32_t ep)
{
    17dc:	b513      	push	{r0, r1, r4, lr}
	uint8_t c;
	if (recv(ep, &c, 1) != 1) {
    17de:	466b      	mov	r3, sp
    17e0:	1ddc      	adds	r4, r3, #7
    17e2:	0022      	movs	r2, r4
    17e4:	2301      	movs	r3, #1
    17e6:	f7ff ff8b 	bl	1700 <_ZN14USBDeviceClass4recvEmPvm>
    17ea:	2801      	cmp	r0, #1
    17ec:	d101      	bne.n	17f2 <_ZN14USBDeviceClass4recvEm+0x16>
		return -1;
	} else {
		return c;
    17ee:	7820      	ldrb	r0, [r4, #0]
	}
}
    17f0:	bd16      	pop	{r1, r2, r4, pc}
		return -1;
    17f2:	2001      	movs	r0, #1
    17f4:	4240      	negs	r0, r0
    17f6:	e7fb      	b.n	17f0 <_ZN14USBDeviceClass4recvEm+0x14>

000017f8 <_ZN14USBDeviceClass14armRecvCtrlOUTEm>:

uint8_t USBDeviceClass::armRecvCtrlOUT(uint32_t ep)
{
    17f8:	b570      	push	{r4, r5, r6, lr}
	// Get endpoint configuration from setting register
	usbd.epBank0SetAddress(ep, &udd_ep_out_cache_buffer[ep]);
    17fa:	4b13      	ldr	r3, [pc, #76]	; (1848 <_ZN14USBDeviceClass14armRecvCtrlOUTEm+0x50>)
	inline void epBank0SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[0].ADDR.reg = (uint32_t)addr; }
    17fc:	b2cc      	uxtb	r4, r1
    17fe:	4a13      	ldr	r2, [pc, #76]	; (184c <_ZN14USBDeviceClass14armRecvCtrlOUTEm+0x54>)
    1800:	0160      	lsls	r0, r4, #5
    1802:	0189      	lsls	r1, r1, #6
    1804:	1859      	adds	r1, r3, r1
    1806:	1813      	adds	r3, r2, r0
    1808:	6059      	str	r1, [r3, #4]
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
    180a:	6899      	ldr	r1, [r3, #8]
    180c:	4d10      	ldr	r5, [pc, #64]	; (1850 <_ZN14USBDeviceClass14armRecvCtrlOUTEm+0x58>)
	inline void epBank0ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK0RDY = 1; }
    180e:	3408      	adds	r4, #8
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
    1810:	400d      	ands	r5, r1
    1812:	2180      	movs	r1, #128	; 0x80
    1814:	0349      	lsls	r1, r1, #13
    1816:	4329      	orrs	r1, r5
	inline void epBank0ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK0RDY = 1; }
    1818:	2540      	movs	r5, #64	; 0x40
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
    181a:	6099      	str	r1, [r3, #8]
	inline void epBank0SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = bc; }
    181c:	6899      	ldr	r1, [r3, #8]
    181e:	0b89      	lsrs	r1, r1, #14
    1820:	0389      	lsls	r1, r1, #14
    1822:	6099      	str	r1, [r3, #8]
	inline void epBank0ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK0RDY = 1; }
    1824:	6811      	ldr	r1, [r2, #0]
    1826:	0163      	lsls	r3, r4, #5
    1828:	18cb      	adds	r3, r1, r3
    182a:	791e      	ldrb	r6, [r3, #4]
    182c:	4335      	orrs	r5, r6
    182e:	711d      	strb	r5, [r3, #4]
	inline bool epBank0IsReady(ep_t ep)    { return usb.DeviceEndpoint[ep].EPSTATUS.bit.BK0RDY; }
    1830:	799d      	ldrb	r5, [r3, #6]
	usbd.epBank0SetByteCount(ep, 0);

	usbd.epBank0ResetReady(ep);

	// Wait OUT
	while (!usbd.epBank0IsReady(ep)) {}
    1832:	066d      	lsls	r5, r5, #25
    1834:	d5fc      	bpl.n	1830 <_ZN14USBDeviceClass14armRecvCtrlOUTEm+0x38>
	inline bool epBank0IsTransferComplete(ep_t ep)  { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.TRCPT0; }
    1836:	0164      	lsls	r4, r4, #5
    1838:	1909      	adds	r1, r1, r4
    183a:	79cb      	ldrb	r3, [r1, #7]
	while (!usbd.epBank0IsTransferComplete(ep)) {}
    183c:	07db      	lsls	r3, r3, #31
    183e:	d5fc      	bpl.n	183a <_ZN14USBDeviceClass14armRecvCtrlOUTEm+0x42>
	inline uint16_t epBank0ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT; }
    1840:	1812      	adds	r2, r2, r0
    1842:	6890      	ldr	r0, [r2, #8]
	return usbd.epBank0ByteCount(ep);
    1844:	b2c0      	uxtb	r0, r0
}
    1846:	bd70      	pop	{r4, r5, r6, pc}
    1848:	20000318 	.word	0x20000318
    184c:	200005e4 	.word	0x200005e4
    1850:	f0003fff 	.word	0xf0003fff

00001854 <_ZN14USBDeviceClass11recvControlEPvm>:
{
    1854:	b570      	push	{r4, r5, r6, lr}
    1856:	000d      	movs	r5, r1
	uint32_t read = armRecvCtrlOUT(0);
    1858:	2100      	movs	r1, #0
{
    185a:	0014      	movs	r4, r2
	uint32_t read = armRecvCtrlOUT(0);
    185c:	f7ff ffcc 	bl	17f8 <_ZN14USBDeviceClass14armRecvCtrlOUTEm>
    1860:	42a0      	cmp	r0, r4
    1862:	d900      	bls.n	1866 <_ZN14USBDeviceClass11recvControlEPvm+0x12>
    1864:	0020      	movs	r0, r4
	for (uint32_t i=0; i<len; i++) {
    1866:	2300      	movs	r3, #0
		data[i] = buffer[i];
    1868:	4903      	ldr	r1, [pc, #12]	; (1878 <_ZN14USBDeviceClass11recvControlEPvm+0x24>)
	for (uint32_t i=0; i<len; i++) {
    186a:	42a3      	cmp	r3, r4
    186c:	d003      	beq.n	1876 <_ZN14USBDeviceClass11recvControlEPvm+0x22>
		data[i] = buffer[i];
    186e:	5c5a      	ldrb	r2, [r3, r1]
    1870:	54ea      	strb	r2, [r5, r3]
	for (uint32_t i=0; i<len; i++) {
    1872:	3301      	adds	r3, #1
    1874:	e7f9      	b.n	186a <_ZN14USBDeviceClass11recvControlEPvm+0x16>
}
    1876:	bd70      	pop	{r4, r5, r6, pc}
    1878:	20000318 	.word	0x20000318

0000187c <_ZN14USBDeviceClass4sendEmPKvm>:
	0
};

// Blocking Send of data to an endpoint
uint32_t USBDeviceClass::send(uint32_t ep, const void *data, uint32_t len)
{
    187c:	b5f0      	push	{r4, r5, r6, r7, lr}
    187e:	001e      	movs	r6, r3
	uint32_t written = 0;
	uint32_t length = 0;

	if (!_usbConfiguration)
    1880:	4b3f      	ldr	r3, [pc, #252]	; (1980 <_ZN14USBDeviceClass4sendEmPKvm+0x104>)
{
    1882:	b085      	sub	sp, #20
	if (!_usbConfiguration)
    1884:	681b      	ldr	r3, [r3, #0]
{
    1886:	000f      	movs	r7, r1
    1888:	9201      	str	r2, [sp, #4]
	if (!_usbConfiguration)
    188a:	2b00      	cmp	r3, #0
    188c:	d03f      	beq.n	190e <_ZN14USBDeviceClass4sendEmPKvm+0x92>
		return -1;
	if (len > 16384)
    188e:	2380      	movs	r3, #128	; 0x80
    1890:	01db      	lsls	r3, r3, #7
    1892:	429e      	cmp	r6, r3
    1894:	d83b      	bhi.n	190e <_ZN14USBDeviceClass4sendEmPKvm+0x92>
		return -1;

#ifdef PIN_LED_TXL
	if (txLEDPulse == 0)
    1896:	4c3b      	ldr	r4, [pc, #236]	; (1984 <_ZN14USBDeviceClass4sendEmPKvm+0x108>)
    1898:	7821      	ldrb	r1, [r4, #0]
    189a:	b2c9      	uxtb	r1, r1
    189c:	2900      	cmp	r1, #0
    189e:	d102      	bne.n	18a6 <_ZN14USBDeviceClass4sendEmPKvm+0x2a>
		digitalWrite(PIN_LED_TXL, LOW);
    18a0:	201a      	movs	r0, #26
    18a2:	f000 fbeb 	bl	207c <digitalWrite>

	txLEDPulse = TX_RX_LED_PULSE_MS;
    18a6:	2364      	movs	r3, #100	; 0x64
	uint32_t written = 0;
    18a8:	2500      	movs	r5, #0
		} else {
			length = len;
		}

		/* memcopy could be safer in multi threaded environment */
		memcpy(&udd_ep_in_cache_buffer[ep], data, length);
    18aa:	4a37      	ldr	r2, [pc, #220]	; (1988 <_ZN14USBDeviceClass4sendEmPKvm+0x10c>)
	txLEDPulse = TX_RX_LED_PULSE_MS;
    18ac:	7023      	strb	r3, [r4, #0]
		memcpy(&udd_ep_in_cache_buffer[ep], data, length);
    18ae:	01bb      	lsls	r3, r7, #6
    18b0:	18d3      	adds	r3, r2, r3
    18b2:	9302      	str	r3, [sp, #8]
	while (len != 0)
    18b4:	2e00      	cmp	r6, #0
    18b6:	d02c      	beq.n	1912 <_ZN14USBDeviceClass4sendEmPKvm+0x96>
	inline bool epBank1IsReady(ep_t ep)    { return usb.DeviceEndpoint[ep].EPSTATUS.bit.BK1RDY; }
    18b8:	4b34      	ldr	r3, [pc, #208]	; (198c <_ZN14USBDeviceClass4sendEmPKvm+0x110>)
    18ba:	681b      	ldr	r3, [r3, #0]
    18bc:	9303      	str	r3, [sp, #12]
    18be:	23ff      	movs	r3, #255	; 0xff
    18c0:	403b      	ands	r3, r7
    18c2:	001c      	movs	r4, r3
    18c4:	9300      	str	r3, [sp, #0]
    18c6:	3408      	adds	r4, #8
    18c8:	9b03      	ldr	r3, [sp, #12]
    18ca:	0164      	lsls	r4, r4, #5
    18cc:	191c      	adds	r4, r3, r4
    18ce:	79a3      	ldrb	r3, [r4, #6]
    18d0:	09db      	lsrs	r3, r3, #7
		if (usbd.epBank1IsReady(ep)) {
    18d2:	d021      	beq.n	1918 <_ZN14USBDeviceClass4sendEmPKvm+0x9c>
			uint32_t timeout = microsecondsToClockCycles(TX_TIMEOUT_MS * 1000) / 23;
    18d4:	4b2e      	ldr	r3, [pc, #184]	; (1990 <_ZN14USBDeviceClass4sendEmPKvm+0x114>)
    18d6:	492f      	ldr	r1, [pc, #188]	; (1994 <_ZN14USBDeviceClass4sendEmPKvm+0x118>)
    18d8:	6818      	ldr	r0, [r3, #0]
    18da:	f000 fde3 	bl	24a4 <__udivsi3>
    18de:	4b2e      	ldr	r3, [pc, #184]	; (1998 <_ZN14USBDeviceClass4sendEmPKvm+0x11c>)
    18e0:	2117      	movs	r1, #23
    18e2:	4358      	muls	r0, r3
    18e4:	f000 fdde 	bl	24a4 <__udivsi3>
				if (LastTransmitTimedOut[ep] || timeout-- == 0) {
    18e8:	4b2c      	ldr	r3, [pc, #176]	; (199c <_ZN14USBDeviceClass4sendEmPKvm+0x120>)
	inline bool epBank1IsTransferComplete(ep_t ep)  { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.TRCPT1; }
    18ea:	79e2      	ldrb	r2, [r4, #7]
			while (!usbd.epBank1IsTransferComplete(ep)) {
    18ec:	0792      	lsls	r2, r2, #30
    18ee:	d413      	bmi.n	1918 <_ZN14USBDeviceClass4sendEmPKvm+0x9c>
				if (LastTransmitTimedOut[ep] || timeout-- == 0) {
    18f0:	5dda      	ldrb	r2, [r3, r7]
    18f2:	2a00      	cmp	r2, #0
    18f4:	d101      	bne.n	18fa <_ZN14USBDeviceClass4sendEmPKvm+0x7e>
    18f6:	3801      	subs	r0, #1
    18f8:	d2f7      	bcs.n	18ea <_ZN14USBDeviceClass4sendEmPKvm+0x6e>
					LastTransmitTimedOut[ep] = 1;
    18fa:	2201      	movs	r2, #1
    18fc:	55da      	strb	r2, [r3, r7]
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
    18fe:	9b00      	ldr	r3, [sp, #0]
    1900:	4a22      	ldr	r2, [pc, #136]	; (198c <_ZN14USBDeviceClass4sendEmPKvm+0x110>)
    1902:	015b      	lsls	r3, r3, #5
    1904:	18d3      	adds	r3, r2, r3
    1906:	699a      	ldr	r2, [r3, #24]
    1908:	0b92      	lsrs	r2, r2, #14
    190a:	0392      	lsls	r2, r2, #14
    190c:	619a      	str	r2, [r3, #24]
					return -1;
    190e:	2501      	movs	r5, #1
    1910:	426d      	negs	r5, r5
		written += length;
		len -= length;
		data = (char *)data + length;
	}
	return written;
}
    1912:	0028      	movs	r0, r5
    1914:	b005      	add	sp, #20
    1916:	bdf0      	pop	{r4, r5, r6, r7, pc}
		LastTransmitTimedOut[ep] = 0;
    1918:	2200      	movs	r2, #0
    191a:	4b20      	ldr	r3, [pc, #128]	; (199c <_ZN14USBDeviceClass4sendEmPKvm+0x120>)
    191c:	0034      	movs	r4, r6
    191e:	55da      	strb	r2, [r3, r7]
		if (len >= EPX_SIZE) {
    1920:	2e3f      	cmp	r6, #63	; 0x3f
    1922:	d909      	bls.n	1938 <_ZN14USBDeviceClass4sendEmPKvm+0xbc>
	inline void epBank1EnableAutoZLP(ep_t ep)  { EP[ep].DeviceDescBank[1].PCKSIZE.bit.AUTO_ZLP = 1; }
    1924:	9b00      	ldr	r3, [sp, #0]
			length = EPX_SIZE;
    1926:	2440      	movs	r4, #64	; 0x40
    1928:	015a      	lsls	r2, r3, #5
    192a:	4b18      	ldr	r3, [pc, #96]	; (198c <_ZN14USBDeviceClass4sendEmPKvm+0x110>)
    192c:	189b      	adds	r3, r3, r2
    192e:	2280      	movs	r2, #128	; 0x80
    1930:	6999      	ldr	r1, [r3, #24]
    1932:	0612      	lsls	r2, r2, #24
    1934:	430a      	orrs	r2, r1
    1936:	619a      	str	r2, [r3, #24]
		memcpy(&udd_ep_in_cache_buffer[ep], data, length);
    1938:	0022      	movs	r2, r4
    193a:	9901      	ldr	r1, [sp, #4]
    193c:	9802      	ldr	r0, [sp, #8]
    193e:	f000 fe75 	bl	262c <memcpy>
	inline void epBank1SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[1].ADDR.reg = (uint32_t)addr; }
    1942:	9b00      	ldr	r3, [sp, #0]
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
    1944:	04a1      	lsls	r1, r4, #18
	inline void epBank1SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[1].ADDR.reg = (uint32_t)addr; }
    1946:	015a      	lsls	r2, r3, #5
    1948:	4b10      	ldr	r3, [pc, #64]	; (198c <_ZN14USBDeviceClass4sendEmPKvm+0x110>)
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
    194a:	0c89      	lsrs	r1, r1, #18
	inline void epBank1SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[1].ADDR.reg = (uint32_t)addr; }
    194c:	189b      	adds	r3, r3, r2
    194e:	9a02      	ldr	r2, [sp, #8]
		written += length;
    1950:	192d      	adds	r5, r5, r4
    1952:	615a      	str	r2, [r3, #20]
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
    1954:	699a      	ldr	r2, [r3, #24]
		len -= length;
    1956:	1b36      	subs	r6, r6, r4
    1958:	0b92      	lsrs	r2, r2, #14
    195a:	0392      	lsls	r2, r2, #14
    195c:	430a      	orrs	r2, r1
    195e:	619a      	str	r2, [r3, #24]
	inline void epBank1AckTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT(2); }
    1960:	9b00      	ldr	r3, [sp, #0]
    1962:	9a03      	ldr	r2, [sp, #12]
    1964:	3308      	adds	r3, #8
    1966:	015b      	lsls	r3, r3, #5
    1968:	18d3      	adds	r3, r2, r3
    196a:	2202      	movs	r2, #2
    196c:	71da      	strb	r2, [r3, #7]
	inline void epBank1SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK1RDY = 1; }
    196e:	7959      	ldrb	r1, [r3, #5]
    1970:	3a82      	subs	r2, #130	; 0x82
    1972:	430a      	orrs	r2, r1
    1974:	715a      	strb	r2, [r3, #5]
		data = (char *)data + length;
    1976:	9b01      	ldr	r3, [sp, #4]
    1978:	191b      	adds	r3, r3, r4
    197a:	9301      	str	r3, [sp, #4]
	while (len != 0)
    197c:	e79a      	b.n	18b4 <_ZN14USBDeviceClass4sendEmPKvm+0x38>
    197e:	46c0      	nop			; (mov r8, r8)
    1980:	200005dc 	.word	0x200005dc
    1984:	2000014d 	.word	0x2000014d
    1988:	20000158 	.word	0x20000158
    198c:	200005e4 	.word	0x200005e4
    1990:	20000014 	.word	0x20000014
    1994:	000f4240 	.word	0x000f4240
    1998:	00011170 	.word	0x00011170
    199c:	2000014f 	.word	0x2000014f

000019a0 <_ZN14USBDeviceClass7armSendEmPKvm>:

uint32_t USBDeviceClass::armSend(uint32_t ep, const void* data, uint32_t len)
{
    19a0:	b570      	push	{r4, r5, r6, lr}
    19a2:	000d      	movs	r5, r1
    19a4:	001c      	movs	r4, r3
	memcpy(&udd_ep_in_cache_buffer[ep], data, len);
    19a6:	4e0d      	ldr	r6, [pc, #52]	; (19dc <_ZN14USBDeviceClass7armSendEmPKvm+0x3c>)
    19a8:	01ab      	lsls	r3, r5, #6
    19aa:	18f6      	adds	r6, r6, r3
{
    19ac:	0011      	movs	r1, r2
	memcpy(&udd_ep_in_cache_buffer[ep], data, len);
    19ae:	0030      	movs	r0, r6
    19b0:	0022      	movs	r2, r4
    19b2:	f000 fe3b 	bl	262c <memcpy>
	inline void epBank1SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[1].ADDR.reg = (uint32_t)addr; }
    19b6:	b2ed      	uxtb	r5, r5
    19b8:	4909      	ldr	r1, [pc, #36]	; (19e0 <_ZN14USBDeviceClass7armSendEmPKvm+0x40>)
    19ba:	016d      	lsls	r5, r5, #5
    19bc:	194d      	adds	r5, r1, r5
    19be:	616e      	str	r6, [r5, #20]
	inline void epBank1SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
    19c0:	69ab      	ldr	r3, [r5, #24]
    19c2:	4a08      	ldr	r2, [pc, #32]	; (19e4 <_ZN14USBDeviceClass7armSendEmPKvm+0x44>)
	usbd.epBank1SetAddress(ep, &udd_ep_in_cache_buffer[ep]);
	usbd.epBank1SetMultiPacketSize(ep, 0);
	usbd.epBank1SetByteCount(ep, len);

	return len;
}
    19c4:	0020      	movs	r0, r4
    19c6:	4013      	ands	r3, r2
    19c8:	61ab      	str	r3, [r5, #24]
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
    19ca:	69ab      	ldr	r3, [r5, #24]
    19cc:	04a2      	lsls	r2, r4, #18
    19ce:	0b9b      	lsrs	r3, r3, #14
    19d0:	0c92      	lsrs	r2, r2, #18
    19d2:	039b      	lsls	r3, r3, #14
    19d4:	4313      	orrs	r3, r2
    19d6:	61ab      	str	r3, [r5, #24]
    19d8:	bd70      	pop	{r4, r5, r6, pc}
    19da:	46c0      	nop			; (mov r8, r8)
    19dc:	20000158 	.word	0x20000158
    19e0:	200005e4 	.word	0x200005e4
    19e4:	f0003fff 	.word	0xf0003fff

000019e8 <_ZN14USBDeviceClass11sendControlEPKvm>:

uint32_t USBDeviceClass::sendControl(const void* _data, uint32_t len)
{
    19e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	const uint8_t *data = reinterpret_cast<const uint8_t *>(_data);
	uint32_t length = len;
	uint32_t sent = 0;
	uint32_t pos = 0;

	if (_dry_run == true)
    19ea:	4b10      	ldr	r3, [pc, #64]	; (1a2c <_ZN14USBDeviceClass11sendControlEPKvm+0x44>)
{
    19ec:	9001      	str	r0, [sp, #4]
	if (_dry_run == true)
    19ee:	781b      	ldrb	r3, [r3, #0]
{
    19f0:	000f      	movs	r7, r1
    19f2:	0015      	movs	r5, r2
	if (_dry_run == true)
    19f4:	2b00      	cmp	r3, #0
    19f6:	d10c      	bne.n	1a12 <_ZN14USBDeviceClass11sendControlEPKvm+0x2a>
		return length;

	if (_pack_message == true) {
    19f8:	4b0d      	ldr	r3, [pc, #52]	; (1a30 <_ZN14USBDeviceClass11sendControlEPKvm+0x48>)
    19fa:	0016      	movs	r6, r2
    19fc:	781c      	ldrb	r4, [r3, #0]
    19fe:	2c00      	cmp	r4, #0
    1a00:	d009      	beq.n	1a16 <_ZN14USBDeviceClass11sendControlEPKvm+0x2e>
		memcpy(&_pack_buffer[_pack_size], data, len);
    1a02:	4e0c      	ldr	r6, [pc, #48]	; (1a34 <_ZN14USBDeviceClass11sendControlEPKvm+0x4c>)
    1a04:	480c      	ldr	r0, [pc, #48]	; (1a38 <_ZN14USBDeviceClass11sendControlEPKvm+0x50>)
    1a06:	8834      	ldrh	r4, [r6, #0]
    1a08:	1900      	adds	r0, r0, r4
		_pack_size += len;
    1a0a:	1964      	adds	r4, r4, r5
		memcpy(&_pack_buffer[_pack_size], data, len);
    1a0c:	f000 fe0e 	bl	262c <memcpy>
		_pack_size += len;
    1a10:	8034      	strh	r4, [r6, #0]
		pos += sent;
		len -= sent;
 	}

	return length;
}
    1a12:	0028      	movs	r0, r5
    1a14:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 	while (len > 0)
    1a16:	2e00      	cmp	r6, #0
    1a18:	d0fb      	beq.n	1a12 <_ZN14USBDeviceClass11sendControlEPKvm+0x2a>
		sent = armSend(EP0, data + pos, len);
    1a1a:	193a      	adds	r2, r7, r4
    1a1c:	0033      	movs	r3, r6
    1a1e:	2100      	movs	r1, #0
    1a20:	9801      	ldr	r0, [sp, #4]
    1a22:	f7ff ffbd 	bl	19a0 <_ZN14USBDeviceClass7armSendEmPKvm>
		pos += sent;
    1a26:	1824      	adds	r4, r4, r0
		len -= sent;
    1a28:	1a36      	subs	r6, r6, r0
 	while (len > 0)
    1a2a:	e7f4      	b.n	1a16 <_ZN14USBDeviceClass11sendControlEPKvm+0x2e>
    1a2c:	200004d8 	.word	0x200004d8
    1a30:	200005d9 	.word	0x200005d9
    1a34:	200005da 	.word	0x200005da
    1a38:	200004d9 	.word	0x200004d9

00001a3c <_ZN14USBDeviceClass20sendStringDescriptorEPKhm>:
{
    1a3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1a3e:	000e      	movs	r6, r1
    1a40:	0015      	movs	r5, r2
		return false;
    1a42:	2700      	movs	r7, #0
	if (maxlen < 2)
    1a44:	2a01      	cmp	r2, #1
    1a46:	d927      	bls.n	1a98 <_ZN14USBDeviceClass20sendStringDescriptorEPKhm+0x5c>
	uint8_t* buffer = (uint8_t*)malloc(maxlen);
    1a48:	0010      	movs	r0, r2
    1a4a:	f000 fddb 	bl	2604 <malloc>
    1a4e:	0004      	movs	r4, r0
	buffer[0] = strlen((const char*)string) * 2 + 2;
    1a50:	0030      	movs	r0, r6
    1a52:	f000 feb7 	bl	27c4 <strlen>
    1a56:	3001      	adds	r0, #1
    1a58:	0040      	lsls	r0, r0, #1
	buffer[1] = 0x03;
    1a5a:	2303      	movs	r3, #3
	buffer[0] = strlen((const char*)string) * 2 + 2;
    1a5c:	7020      	strb	r0, [r4, #0]
	for (i = 2; i < maxlen && *string; i++) {
    1a5e:	2202      	movs	r2, #2
		buffer[i] = 0;
    1a60:	0038      	movs	r0, r7
	buffer[1] = 0x03;
    1a62:	7063      	strb	r3, [r4, #1]
	for (i = 2; i < maxlen && *string; i++) {
    1a64:	4295      	cmp	r5, r2
    1a66:	d90d      	bls.n	1a84 <_ZN14USBDeviceClass20sendStringDescriptorEPKhm+0x48>
    1a68:	7831      	ldrb	r1, [r6, #0]
    1a6a:	2900      	cmp	r1, #0
    1a6c:	d00a      	beq.n	1a84 <_ZN14USBDeviceClass20sendStringDescriptorEPKhm+0x48>
		buffer[i++] = *string++;
    1a6e:	1c53      	adds	r3, r2, #1
    1a70:	b2db      	uxtb	r3, r3
    1a72:	3601      	adds	r6, #1
    1a74:	54a1      	strb	r1, [r4, r2]
		if (i == maxlen) break;
    1a76:	429d      	cmp	r5, r3
    1a78:	d003      	beq.n	1a82 <_ZN14USBDeviceClass20sendStringDescriptorEPKhm+0x46>
	for (i = 2; i < maxlen && *string; i++) {
    1a7a:	3202      	adds	r2, #2
		buffer[i] = 0;
    1a7c:	54e0      	strb	r0, [r4, r3]
	for (i = 2; i < maxlen && *string; i++) {
    1a7e:	b2d2      	uxtb	r2, r2
    1a80:	e7f0      	b.n	1a64 <_ZN14USBDeviceClass20sendStringDescriptorEPKhm+0x28>
		buffer[i++] = *string++;
    1a82:	002a      	movs	r2, r5
	bool ret = USBDevice.sendControl(buffer, i);
    1a84:	0021      	movs	r1, r4
    1a86:	4805      	ldr	r0, [pc, #20]	; (1a9c <_ZN14USBDeviceClass20sendStringDescriptorEPKhm+0x60>)
    1a88:	f7ff ffae 	bl	19e8 <_ZN14USBDeviceClass11sendControlEPKvm>
    1a8c:	1e47      	subs	r7, r0, #1
    1a8e:	41b8      	sbcs	r0, r7
    1a90:	b2c7      	uxtb	r7, r0
	free(buffer);
    1a92:	0020      	movs	r0, r4
    1a94:	f000 fdc0 	bl	2618 <free>
}
    1a98:	0038      	movs	r0, r7
    1a9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1a9c:	2000012c 	.word	0x2000012c

00001aa0 <_ZN14USBDeviceClass17sendConfigurationEm>:
{
    1aa0:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint32_t total = 0;
    1aa2:	2700      	movs	r7, #0
	_dry_run = true;
    1aa4:	2601      	movs	r6, #1
{
    1aa6:	b087      	sub	sp, #28
	_dry_run = true;
    1aa8:	4b1e      	ldr	r3, [pc, #120]	; (1b24 <_ZN14USBDeviceClass17sendConfigurationEm+0x84>)
{
    1aaa:	9100      	str	r1, [sp, #0]
	uint8_t interfaces = SendInterfaces(&total);
    1aac:	a902      	add	r1, sp, #8
	_dry_run = true;
    1aae:	701e      	strb	r6, [r3, #0]
{
    1ab0:	0005      	movs	r5, r0
	uint32_t total = 0;
    1ab2:	9702      	str	r7, [sp, #8]
	uint8_t interfaces = SendInterfaces(&total);
    1ab4:	f7ff fc33 	bl	131e <_ZN14USBDeviceClass14SendInterfacesEPm>
	ConfigDescriptor config = D_CONFIG((uint16_t)(total + sizeof(ConfigDescriptor)), interfaces);
    1ab8:	ac03      	add	r4, sp, #12
	uint8_t interfaces = SendInterfaces(&total);
    1aba:	9001      	str	r0, [sp, #4]
	ConfigDescriptor config = D_CONFIG((uint16_t)(total + sizeof(ConfigDescriptor)), interfaces);
    1abc:	2209      	movs	r2, #9
    1abe:	0039      	movs	r1, r7
    1ac0:	0020      	movs	r0, r4
    1ac2:	f000 fdbc 	bl	263e <memset>
    1ac6:	2309      	movs	r3, #9
    1ac8:	7023      	strb	r3, [r4, #0]
    1aca:	2302      	movs	r3, #2
    1acc:	7063      	strb	r3, [r4, #1]
    1ace:	339e      	adds	r3, #158	; 0x9e
    1ad0:	71e3      	strb	r3, [r4, #7]
    1ad2:	335a      	adds	r3, #90	; 0x5a
    1ad4:	7223      	strb	r3, [r4, #8]
    1ad6:	9b02      	ldr	r3, [sp, #8]
    1ad8:	7166      	strb	r6, [r4, #5]
    1ada:	3309      	adds	r3, #9
    1adc:	8063      	strh	r3, [r4, #2]
    1ade:	466b      	mov	r3, sp
    1ae0:	791b      	ldrb	r3, [r3, #4]
    1ae2:	7123      	strb	r3, [r4, #4]
	_dry_run = false;
    1ae4:	4b0f      	ldr	r3, [pc, #60]	; (1b24 <_ZN14USBDeviceClass17sendConfigurationEm+0x84>)
    1ae6:	701f      	strb	r7, [r3, #0]
	if (maxlen == sizeof(ConfigDescriptor)) {
    1ae8:	9b00      	ldr	r3, [sp, #0]
    1aea:	2b09      	cmp	r3, #9
    1aec:	d107      	bne.n	1afe <_ZN14USBDeviceClass17sendConfigurationEm+0x5e>
		sendControl(&config, sizeof(ConfigDescriptor));
    1aee:	001a      	movs	r2, r3
    1af0:	0021      	movs	r1, r4
		sendControl(_pack_buffer, _pack_size);
    1af2:	0028      	movs	r0, r5
    1af4:	f7ff ff78 	bl	19e8 <_ZN14USBDeviceClass11sendControlEPKvm>
}
    1af8:	2001      	movs	r0, #1
    1afa:	b007      	add	sp, #28
    1afc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		_pack_message = true;
    1afe:	4b0a      	ldr	r3, [pc, #40]	; (1b28 <_ZN14USBDeviceClass17sendConfigurationEm+0x88>)
	sendControl(&config, sizeof(ConfigDescriptor));
    1b00:	2209      	movs	r2, #9
		_pack_message = true;
    1b02:	701e      	strb	r6, [r3, #0]
		_pack_size = 0;
    1b04:	4e09      	ldr	r6, [pc, #36]	; (1b2c <_ZN14USBDeviceClass17sendConfigurationEm+0x8c>)
	sendControl(&config, sizeof(ConfigDescriptor));
    1b06:	0021      	movs	r1, r4
    1b08:	0028      	movs	r0, r5
	total = 0;
    1b0a:	9702      	str	r7, [sp, #8]
		_pack_size = 0;
    1b0c:	8037      	strh	r7, [r6, #0]
	sendControl(&config, sizeof(ConfigDescriptor));
    1b0e:	f7ff ff6b 	bl	19e8 <_ZN14USBDeviceClass11sendControlEPKvm>
	SendInterfaces(&total);
    1b12:	a902      	add	r1, sp, #8
    1b14:	0028      	movs	r0, r5
    1b16:	f7ff fc02 	bl	131e <_ZN14USBDeviceClass14SendInterfacesEPm>
		_pack_message = false;
    1b1a:	4b03      	ldr	r3, [pc, #12]	; (1b28 <_ZN14USBDeviceClass17sendConfigurationEm+0x88>)
		sendControl(_pack_buffer, _pack_size);
    1b1c:	8832      	ldrh	r2, [r6, #0]
		_pack_message = false;
    1b1e:	701f      	strb	r7, [r3, #0]
		sendControl(_pack_buffer, _pack_size);
    1b20:	4903      	ldr	r1, [pc, #12]	; (1b30 <_ZN14USBDeviceClass17sendConfigurationEm+0x90>)
    1b22:	e7e6      	b.n	1af2 <_ZN14USBDeviceClass17sendConfigurationEm+0x52>
    1b24:	200004d8 	.word	0x200004d8
    1b28:	200005d9 	.word	0x200005d9
    1b2c:	200005da 	.word	0x200005da
    1b30:	200004d9 	.word	0x200004d9

00001b34 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup>:
{
    1b34:	b570      	push	{r4, r5, r6, lr}
	uint8_t t = setup.wValueH;
    1b36:	78ce      	ldrb	r6, [r1, #3]
{
    1b38:	b092      	sub	sp, #72	; 0x48
    1b3a:	0005      	movs	r5, r0
    1b3c:	000c      	movs	r4, r1
	if (t == USB_CONFIGURATION_DESCRIPTOR_TYPE)
    1b3e:	2e02      	cmp	r6, #2
    1b40:	d10b      	bne.n	1b5a <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x26>
		return USBDevice.sendConfiguration(setup.wLength);
    1b42:	798b      	ldrb	r3, [r1, #6]
    1b44:	79c9      	ldrb	r1, [r1, #7]
    1b46:	482e      	ldr	r0, [pc, #184]	; (1c00 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0xcc>)
    1b48:	0209      	lsls	r1, r1, #8
    1b4a:	4319      	orrs	r1, r3
    1b4c:	f7ff ffa8 	bl	1aa0 <_ZN14USBDeviceClass17sendConfigurationEm>
    1b50:	1e41      	subs	r1, r0, #1
    1b52:	4188      	sbcs	r0, r1
    1b54:	b2c0      	uxtb	r0, r0
}
    1b56:	b012      	add	sp, #72	; 0x48
    1b58:	bd70      	pop	{r4, r5, r6, pc}
	ret = PluggableUSB().getDescriptor(setup);
    1b5a:	f7ff f971 	bl	e40 <_Z12PluggableUSBv>
    1b5e:	0021      	movs	r1, r4
    1b60:	f7ff f902 	bl	d68 <_ZN13PluggableUSB_13getDescriptorER8USBSetup>
	if (ret != 0) {
    1b64:	2800      	cmp	r0, #0
    1b66:	d003      	beq.n	1b70 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x3c>
		return (ret > 0 ? true : false);
    1b68:	17c1      	asrs	r1, r0, #31
    1b6a:	1a08      	subs	r0, r1, r0
    1b6c:	0fc0      	lsrs	r0, r0, #31
    1b6e:	e7f2      	b.n	1b56 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x22>
	if (t == USB_DEVICE_DESCRIPTOR_TYPE)
    1b70:	2e01      	cmp	r6, #1
    1b72:	d10e      	bne.n	1b92 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x5e>
		if (setup.wLength == 8)
    1b74:	79e2      	ldrb	r2, [r4, #7]
    1b76:	79a3      	ldrb	r3, [r4, #6]
    1b78:	0212      	lsls	r2, r2, #8
    1b7a:	431a      	orrs	r2, r3
    1b7c:	4921      	ldr	r1, [pc, #132]	; (1c04 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0xd0>)
		if (*desc_addr > setup.wLength) {
    1b7e:	2a11      	cmp	r2, #17
    1b80:	dc3c      	bgt.n	1bfc <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0xc8>
			desc_length = setup.wLength;
    1b82:	b2d2      	uxtb	r2, r2
	if (desc_length == 0) {
    1b84:	2a00      	cmp	r2, #0
    1b86:	d039      	beq.n	1bfc <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0xc8>
	sendControl(desc_addr, desc_length);
    1b88:	0028      	movs	r0, r5
    1b8a:	f7ff ff2d 	bl	19e8 <_ZN14USBDeviceClass11sendControlEPKvm>
	return true;
    1b8e:	2001      	movs	r0, #1
    1b90:	e7e1      	b.n	1b56 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x22>
	else if (USB_STRING_DESCRIPTOR_TYPE == t)
    1b92:	2e03      	cmp	r6, #3
    1b94:	d1df      	bne.n	1b56 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x22>
		if (setup.wValueL == 0) {
    1b96:	78a3      	ldrb	r3, [r4, #2]
    1b98:	2b00      	cmp	r3, #0
    1b9a:	d028      	beq.n	1bee <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0xba>
		else if (setup.wValueL == IPRODUCT) {
    1b9c:	2b02      	cmp	r3, #2
    1b9e:	d108      	bne.n	1bb2 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x7e>
			return sendStringDescriptor(STRING_PRODUCT, setup.wLength);
    1ba0:	79e2      	ldrb	r2, [r4, #7]
    1ba2:	79a3      	ldrb	r3, [r4, #6]
    1ba4:	0212      	lsls	r2, r2, #8
    1ba6:	4918      	ldr	r1, [pc, #96]	; (1c08 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0xd4>)
    1ba8:	431a      	orrs	r2, r3
			return sendStringDescriptor(STRING_MANUFACTURER, setup.wLength);
    1baa:	0028      	movs	r0, r5
    1bac:	f7ff ff46 	bl	1a3c <_ZN14USBDeviceClass20sendStringDescriptorEPKhm>
    1bb0:	e7d1      	b.n	1b56 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x22>
		else if (setup.wValueL == IMANUFACTURER) {
    1bb2:	2b01      	cmp	r3, #1
    1bb4:	d105      	bne.n	1bc2 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x8e>
			return sendStringDescriptor(STRING_MANUFACTURER, setup.wLength);
    1bb6:	79e2      	ldrb	r2, [r4, #7]
    1bb8:	79a3      	ldrb	r3, [r4, #6]
    1bba:	0212      	lsls	r2, r2, #8
    1bbc:	431a      	orrs	r2, r3
    1bbe:	4913      	ldr	r1, [pc, #76]	; (1c0c <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0xd8>)
    1bc0:	e7f3      	b.n	1baa <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x76>
		else if (setup.wValueL == ISERIAL) {
    1bc2:	2b03      	cmp	r3, #3
    1bc4:	d1c7      	bne.n	1b56 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x22>
			memset(name, 0, sizeof(name));
    1bc6:	0001      	movs	r1, r0
    1bc8:	2241      	movs	r2, #65	; 0x41
    1bca:	a801      	add	r0, sp, #4
    1bcc:	f000 fd37 	bl	263e <memset>
			idx += PluggableUSB().getShortName(&name[idx]);
    1bd0:	f7ff f936 	bl	e40 <_Z12PluggableUSBv>
    1bd4:	a901      	add	r1, sp, #4
    1bd6:	f7ff f8d7 	bl	d88 <_ZN13PluggableUSB_12getShortNameEPc>
			if (idx > 0) {
    1bda:	2800      	cmp	r0, #0
    1bdc:	d005      	beq.n	1bea <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0xb6>
				return sendStringDescriptor((uint8_t*)name, setup.wLength);
    1bde:	79e2      	ldrb	r2, [r4, #7]
    1be0:	79a3      	ldrb	r3, [r4, #6]
    1be2:	0212      	lsls	r2, r2, #8
    1be4:	431a      	orrs	r2, r3
    1be6:	a901      	add	r1, sp, #4
    1be8:	e7df      	b.n	1baa <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x76>
		if (*desc_addr > setup.wLength) {
    1bea:	7803      	ldrb	r3, [r0, #0]
    1bec:	deff      	udf	#255	; 0xff
    1bee:	79e2      	ldrb	r2, [r4, #7]
    1bf0:	79a3      	ldrb	r3, [r4, #6]
    1bf2:	0212      	lsls	r2, r2, #8
    1bf4:	431a      	orrs	r2, r3
    1bf6:	4906      	ldr	r1, [pc, #24]	; (1c10 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0xdc>)
    1bf8:	2a03      	cmp	r2, #3
    1bfa:	ddc2      	ble.n	1b82 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x4e>
		desc_length = *desc_addr;
    1bfc:	780a      	ldrb	r2, [r1, #0]
    1bfe:	e7c3      	b.n	1b88 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x54>
    1c00:	2000012c 	.word	0x2000012c
    1c04:	000028da 	.word	0x000028da
    1c08:	000028bc 	.word	0x000028bc
    1c0c:	000028ce 	.word	0x000028ce
    1c10:	000028ca 	.word	0x000028ca

00001c14 <_ZN14USBDeviceClass7sendZlpEm>:
    1c14:	b2cb      	uxtb	r3, r1
    1c16:	4904      	ldr	r1, [pc, #16]	; (1c28 <_ZN14USBDeviceClass7sendZlpEm+0x14>)
    1c18:	015b      	lsls	r3, r3, #5
    1c1a:	18c9      	adds	r1, r1, r3
    1c1c:	698b      	ldr	r3, [r1, #24]
    1c1e:	0b9b      	lsrs	r3, r3, #14
    1c20:	039b      	lsls	r3, r3, #14
    1c22:	618b      	str	r3, [r1, #24]

void USBDeviceClass::sendZlp(uint32_t ep)
{
	// Set the byte count as zero
	usbd.epBank1SetByteCount(ep, 0);
}
    1c24:	4770      	bx	lr
    1c26:	46c0      	nop			; (mov r8, r8)
    1c28:	200005e4 	.word	0x200005e4

00001c2c <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup>:

bool USBDeviceClass::handleStandardSetup(USBSetup &setup)
{
    1c2c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    1c2e:	0005      	movs	r5, r0
	switch (setup.bRequest) {
    1c30:	7848      	ldrb	r0, [r1, #1]
{
    1c32:	000c      	movs	r4, r1
	switch (setup.bRequest) {
    1c34:	280b      	cmp	r0, #11
    1c36:	d811      	bhi.n	1c5c <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x30>
    1c38:	f000 fc2a 	bl	2490 <__gnu_thumb1_case_uqi>
    1c3c:	2e101d06 	.word	0x2e101d06
    1c40:	64484310 	.word	0x64484310
    1c44:	605d4f4c 	.word	0x605d4f4c
	case GET_STATUS:
		if (setup.bmRequestType == 0)  // device
    1c48:	7809      	ldrb	r1, [r1, #0]
    1c4a:	aa01      	add	r2, sp, #4
    1c4c:	2900      	cmp	r1, #0
    1c4e:	d107      	bne.n	1c60 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x34>
		{
			// Send the device status
			// TODO: Check current configuration for power mode (if device is configured)
			// TODO: Check if remote wake-up is enabled
			uint8_t buff[] = { 0, 0 };
			armSend(0, buff, 2);
    1c50:	2302      	movs	r3, #2
			uint8_t buff[] = { 0, 0 };
    1c52:	7011      	strb	r1, [r2, #0]
    1c54:	7051      	strb	r1, [r2, #1]
			armSend(0, buff, 2);
    1c56:	0028      	movs	r0, r5
    1c58:	f7ff fea2 	bl	19a0 <_ZN14USBDeviceClass7armSendEmPKvm>
			return true;
    1c5c:	2001      	movs	r0, #1

	default:
		return true;
	}
	return true;
}
    1c5e:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
			uint8_t buff[] = { 0, 0 };
    1c60:	2300      	movs	r3, #0
    1c62:	7013      	strb	r3, [r2, #0]
    1c64:	7053      	strb	r3, [r2, #1]
			if (isEndpointHalt == 1)
    1c66:	4b28      	ldr	r3, [pc, #160]	; (1d08 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0xdc>)
			if (isRemoteWakeUpEnabled == 1)
    1c68:	781b      	ldrb	r3, [r3, #0]
    1c6a:	2b01      	cmp	r3, #1
    1c6c:	d100      	bne.n	1c70 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x44>
				buff[0] = 1;
    1c6e:	7013      	strb	r3, [r2, #0]
			armSend(0, buff, 2);
    1c70:	2302      	movs	r3, #2
		armSend(0, (void*)&_usbSetInterface, 1);
    1c72:	2100      	movs	r1, #0
    1c74:	e7ef      	b.n	1c56 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x2a>
		if (setup.wValueL == 1) // DEVICEREMOTEWAKEUP
    1c76:	788a      	ldrb	r2, [r1, #2]
    1c78:	2300      	movs	r3, #0
    1c7a:	2a01      	cmp	r2, #1
    1c7c:	d104      	bne.n	1c88 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x5c>
			uint8_t buff[] = { 0, 0 };
    1c7e:	aa01      	add	r2, sp, #4
    1c80:	7013      	strb	r3, [r2, #0]
    1c82:	7053      	strb	r3, [r2, #1]
			if (isRemoteWakeUpEnabled == 1)
    1c84:	4b21      	ldr	r3, [pc, #132]	; (1d0c <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0xe0>)
    1c86:	e7ef      	b.n	1c68 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x3c>
			isEndpointHalt = 0;
    1c88:	4a1f      	ldr	r2, [pc, #124]	; (1d08 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0xdc>)
    1c8a:	7013      	strb	r3, [r2, #0]
    1c8c:	4a20      	ldr	r2, [pc, #128]	; (1d10 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0xe4>)
    1c8e:	6993      	ldr	r3, [r2, #24]
    1c90:	0b9b      	lsrs	r3, r3, #14
    1c92:	039b      	lsls	r3, r3, #14
    1c94:	6193      	str	r3, [r2, #24]
    1c96:	e7e1      	b.n	1c5c <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x30>
		if (setup.wValueL == 1) // DEVICEREMOTEWAKEUP
    1c98:	788c      	ldrb	r4, [r1, #2]
    1c9a:	2c01      	cmp	r4, #1
    1c9c:	d106      	bne.n	1cac <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x80>
			uint8_t buff[] = { 0 };
    1c9e:	2100      	movs	r1, #0
			isRemoteWakeUpEnabled = 1;
    1ca0:	4b1a      	ldr	r3, [pc, #104]	; (1d0c <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0xe0>)
			uint8_t buff[] = { 0 };
    1ca2:	aa01      	add	r2, sp, #4
			isRemoteWakeUpEnabled = 1;
    1ca4:	701c      	strb	r4, [r3, #0]
			uint8_t buff[] = { 0 };
    1ca6:	7011      	strb	r1, [r2, #0]
			armSend(0, buff, 1);
    1ca8:	0023      	movs	r3, r4
    1caa:	e7d4      	b.n	1c56 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x2a>
    1cac:	2001      	movs	r0, #1
		if (setup.wValueL == 0) // ENDPOINTHALT
    1cae:	2c00      	cmp	r4, #0
    1cb0:	d1d5      	bne.n	1c5e <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x32>
			isEndpointHalt = 1;
    1cb2:	4b15      	ldr	r3, [pc, #84]	; (1d08 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0xdc>)
    1cb4:	4a16      	ldr	r2, [pc, #88]	; (1d10 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0xe4>)
    1cb6:	7018      	strb	r0, [r3, #0]
    1cb8:	6993      	ldr	r3, [r2, #24]
    1cba:	0b9b      	lsrs	r3, r3, #14
    1cbc:	039b      	lsls	r3, r3, #14
    1cbe:	6193      	str	r3, [r2, #24]
			return true;
    1cc0:	e7cd      	b.n	1c5e <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x32>
		setAddress(setup.wValueL);
    1cc2:	7889      	ldrb	r1, [r1, #2]
    1cc4:	0028      	movs	r0, r5
    1cc6:	f7ff fc09 	bl	14dc <_ZN14USBDeviceClass10setAddressEm>
    1cca:	e7c7      	b.n	1c5c <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x30>
		return sendDescriptor(setup);
    1ccc:	0028      	movs	r0, r5
    1cce:	f7ff ff31 	bl	1b34 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup>
    1cd2:	e7c4      	b.n	1c5e <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x32>
		armSend(0, (void*)&_usbConfiguration, 1);
    1cd4:	2301      	movs	r3, #1
    1cd6:	4a0f      	ldr	r2, [pc, #60]	; (1d14 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0xe8>)
    1cd8:	e7cb      	b.n	1c72 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x46>
		if (REQUEST_DEVICE == (setup.bmRequestType & REQUEST_RECIPIENT)) {
    1cda:	780b      	ldrb	r3, [r1, #0]
			return false;
    1cdc:	2000      	movs	r0, #0
		if (REQUEST_DEVICE == (setup.bmRequestType & REQUEST_RECIPIENT)) {
    1cde:	06db      	lsls	r3, r3, #27
    1ce0:	d1bd      	bne.n	1c5e <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x32>
			initEndpoints();
    1ce2:	0028      	movs	r0, r5
    1ce4:	f7ff fcb2 	bl	164c <_ZN14USBDeviceClass13initEndpointsEv>
			_usbConfiguration = setup.wValueL;
    1ce8:	78a2      	ldrb	r2, [r4, #2]
    1cea:	4b0a      	ldr	r3, [pc, #40]	; (1d14 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0xe8>)
			SerialUSB.enableInterrupt();
    1cec:	480a      	ldr	r0, [pc, #40]	; (1d18 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0xec>)
			_usbConfiguration = setup.wValueL;
    1cee:	601a      	str	r2, [r3, #0]
			SerialUSB.enableInterrupt();
    1cf0:	f7ff f802 	bl	cf8 <_ZN7Serial_15enableInterruptEv>
    1cf4:	e7ca      	b.n	1c8c <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x60>
		armSend(0, (void*)&_usbSetInterface, 1);
    1cf6:	2301      	movs	r3, #1
    1cf8:	4a08      	ldr	r2, [pc, #32]	; (1d1c <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0xf0>)
    1cfa:	e7ba      	b.n	1c72 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x46>
		_usbSetInterface = setup.wValueL;
    1cfc:	788a      	ldrb	r2, [r1, #2]
    1cfe:	4b07      	ldr	r3, [pc, #28]	; (1d1c <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0xf0>)
    1d00:	601a      	str	r2, [r3, #0]
    1d02:	e7c3      	b.n	1c8c <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x60>
		return false;
    1d04:	2000      	movs	r0, #0
    1d06:	e7aa      	b.n	1c5e <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x32>
    1d08:	2000014e 	.word	0x2000014e
    1d0c:	20000156 	.word	0x20000156
    1d10:	200005e4 	.word	0x200005e4
    1d14:	200005dc 	.word	0x200005dc
    1d18:	200000c4 	.word	0x200000c4
    1d1c:	200005e0 	.word	0x200005e0

00001d20 <_ZN14USBDeviceClass10ISRHandlerEv>:

void USBDeviceClass::ISRHandler()
{
	if (_pack_message == true) {
    1d20:	4b4b      	ldr	r3, [pc, #300]	; (1e50 <_ZN14USBDeviceClass10ISRHandlerEv+0x130>)
{
    1d22:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (_pack_message == true) {
    1d24:	781e      	ldrb	r6, [r3, #0]
{
    1d26:	0005      	movs	r5, r0
	if (_pack_message == true) {
    1d28:	2e00      	cmp	r6, #0
    1d2a:	d000      	beq.n	1d2e <_ZN14USBDeviceClass10ISRHandlerEv+0xe>
    1d2c:	e080      	b.n	1e30 <_ZN14USBDeviceClass10ISRHandlerEv+0x110>
	inline bool isEndOfResetInterrupt()        { return usb.INTFLAG.bit.EORST; }
    1d2e:	4c49      	ldr	r4, [pc, #292]	; (1e54 <_ZN14USBDeviceClass10ISRHandlerEv+0x134>)
    1d30:	6823      	ldr	r3, [r4, #0]
    1d32:	8b9a      	ldrh	r2, [r3, #28]
		return;
	}

	// End-Of-Reset
	if (usbd.isEndOfResetInterrupt())
    1d34:	0712      	lsls	r2, r2, #28
    1d36:	d50d      	bpl.n	1d54 <_ZN14USBDeviceClass10ISRHandlerEv+0x34>
	inline void ackEndOfResetInterrupt()       { usb.INTFLAG.reg = USB_DEVICE_INTFLAG_EORST; }
    1d38:	2208      	movs	r2, #8
    1d3a:	0031      	movs	r1, r6
    1d3c:	839a      	strh	r2, [r3, #28]
    1d3e:	0030      	movs	r0, r6
    1d40:	f7ff f896 	bl	e70 <_ZN14USBDeviceClass6initEPEmm.part.7>
	inline void epBank0EnableSetupReceived(ep_t ep)    { usb.DeviceEndpoint[ep].EPINTENSET.bit.RXSTP = 1; }
    1d44:	2210      	movs	r2, #16
    1d46:	6823      	ldr	r3, [r4, #0]
    1d48:	33ff      	adds	r3, #255	; 0xff
    1d4a:	7a99      	ldrb	r1, [r3, #10]
    1d4c:	430a      	orrs	r2, r1
    1d4e:	729a      	strb	r2, [r3, #10]
		initEP(0, USB_ENDPOINT_TYPE_CONTROL);

		// Enable Setup-Received interrupt
		usbd.epBank0EnableSetupReceived(0);

		_usbConfiguration = 0;
    1d50:	4b41      	ldr	r3, [pc, #260]	; (1e58 <_ZN14USBDeviceClass10ISRHandlerEv+0x138>)
    1d52:	601e      	str	r6, [r3, #0]
	inline bool isStartOfFrameInterrupt()      { return usb.INTFLAG.bit.SOF; }
    1d54:	6823      	ldr	r3, [r4, #0]
    1d56:	8b9a      	ldrh	r2, [r3, #28]
	}

	// Start-Of-Frame
	if (usbd.isStartOfFrameInterrupt())
    1d58:	0752      	lsls	r2, r2, #29
    1d5a:	d51f      	bpl.n	1d9c <_ZN14USBDeviceClass10ISRHandlerEv+0x7c>
	inline void ackStartOfFrameInterrupt()     { usb.INTFLAG.reg = USB_DEVICE_INTFLAG_SOF; }
    1d5c:	2204      	movs	r2, #4
    1d5e:	839a      	strh	r2, [r3, #28]
	{
		usbd.ackStartOfFrameInterrupt();

		// check whether the one-shot period has elapsed.  if so, turn off the LED
#ifdef PIN_LED_TXL
		if (txLEDPulse > 0) {
    1d60:	4a3e      	ldr	r2, [pc, #248]	; (1e5c <_ZN14USBDeviceClass10ISRHandlerEv+0x13c>)
    1d62:	7813      	ldrb	r3, [r2, #0]
    1d64:	2b00      	cmp	r3, #0
    1d66:	d00a      	beq.n	1d7e <_ZN14USBDeviceClass10ISRHandlerEv+0x5e>
			txLEDPulse--;
    1d68:	7813      	ldrb	r3, [r2, #0]
    1d6a:	3b01      	subs	r3, #1
    1d6c:	b2db      	uxtb	r3, r3
    1d6e:	7013      	strb	r3, [r2, #0]
			if (txLEDPulse == 0)
    1d70:	7813      	ldrb	r3, [r2, #0]
    1d72:	2b00      	cmp	r3, #0
    1d74:	d103      	bne.n	1d7e <_ZN14USBDeviceClass10ISRHandlerEv+0x5e>
				digitalWrite(PIN_LED_TXL, HIGH);
    1d76:	2101      	movs	r1, #1
    1d78:	201a      	movs	r0, #26
    1d7a:	f000 f97f 	bl	207c <digitalWrite>
		}
#endif

#ifdef PIN_LED_RXL
		if (rxLEDPulse > 0) {
    1d7e:	4a38      	ldr	r2, [pc, #224]	; (1e60 <_ZN14USBDeviceClass10ISRHandlerEv+0x140>)
    1d80:	7813      	ldrb	r3, [r2, #0]
    1d82:	2b00      	cmp	r3, #0
    1d84:	d00a      	beq.n	1d9c <_ZN14USBDeviceClass10ISRHandlerEv+0x7c>
			rxLEDPulse--;
    1d86:	7813      	ldrb	r3, [r2, #0]
    1d88:	3b01      	subs	r3, #1
    1d8a:	b2db      	uxtb	r3, r3
    1d8c:	7013      	strb	r3, [r2, #0]
			if (rxLEDPulse == 0)
    1d8e:	7813      	ldrb	r3, [r2, #0]
    1d90:	2b00      	cmp	r3, #0
    1d92:	d103      	bne.n	1d9c <_ZN14USBDeviceClass10ISRHandlerEv+0x7c>
				digitalWrite(PIN_LED_RXL, HIGH);
    1d94:	2101      	movs	r1, #1
    1d96:	2019      	movs	r0, #25
    1d98:	f000 f970 	bl	207c <digitalWrite>
	inline bool epBank0IsStalled(ep_t ep)           { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.STALL0; }
    1d9c:	6823      	ldr	r3, [r4, #0]
    1d9e:	33ff      	adds	r3, #255	; 0xff
    1da0:	7a1a      	ldrb	r2, [r3, #8]
		}
#endif
	}

	/* Remove any stall requests for endpoint #0 */
	if (usbd.epBank0IsStalled(0)) { usbd.epBank0DisableStalled(0); }
    1da2:	0692      	lsls	r2, r2, #26
    1da4:	d503      	bpl.n	1dae <_ZN14USBDeviceClass10ISRHandlerEv+0x8e>
	inline void epBank0DisableStalled(ep_t ep)          { usb.DeviceEndpoint[ep].EPINTENCLR.bit.STALL0 = 1; }
    1da6:	2220      	movs	r2, #32
    1da8:	7a59      	ldrb	r1, [r3, #9]
    1daa:	430a      	orrs	r2, r1
    1dac:	725a      	strb	r2, [r3, #9]
	inline bool epBank0IsSetupReceived(ep_t ep)     { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.RXSTP; }
    1dae:	7a1a      	ldrb	r2, [r3, #8]

	// Endpoint 0 Received Setup interrupt
	if (usbd.epBank0IsSetupReceived(0))
    1db0:	06d2      	lsls	r2, r2, #27
    1db2:	d525      	bpl.n	1e00 <_ZN14USBDeviceClass10ISRHandlerEv+0xe0>
	{
		/* Retrieve received endpoint #0 data from buffer */
		USBSetup setup;
		memcpy(&setup, udd_ep_out_cache_buffer[0], sizeof(USBSetup));
    1db4:	4668      	mov	r0, sp
    1db6:	4a2b      	ldr	r2, [pc, #172]	; (1e64 <_ZN14USBDeviceClass10ISRHandlerEv+0x144>)
    1db8:	4669      	mov	r1, sp
    1dba:	cac0      	ldmia	r2!, {r6, r7}
    1dbc:	c0c0      	stmia	r0!, {r6, r7}
	inline void epBank0SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = bc; }
    1dbe:	68a2      	ldr	r2, [r4, #8]
    1dc0:	0b92      	lsrs	r2, r2, #14
    1dc2:	0392      	lsls	r2, r2, #14
    1dc4:	60a2      	str	r2, [r4, #8]
	inline void epBank0ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK0RDY = 1; }
    1dc6:	2240      	movs	r2, #64	; 0x40
    1dc8:	7958      	ldrb	r0, [r3, #5]
    1dca:	4302      	orrs	r2, r0
    1dcc:	715a      	strb	r2, [r3, #5]
		 */
		usbd.epBank0SetByteCount(0, 0);
		usbd.epBank0ResetReady(0);

		bool ok;
		if (REQUEST_STANDARD == (setup.bmRequestType & REQUEST_TYPE)) {
    1dce:	2360      	movs	r3, #96	; 0x60
    1dd0:	780a      	ldrb	r2, [r1, #0]
			// Standard Requests
			ok = handleStandardSetup(setup);
    1dd2:	0028      	movs	r0, r5
		if (REQUEST_STANDARD == (setup.bmRequestType & REQUEST_TYPE)) {
    1dd4:	421a      	tst	r2, r3
    1dd6:	d12c      	bne.n	1e32 <_ZN14USBDeviceClass10ISRHandlerEv+0x112>
			ok = handleStandardSetup(setup);
    1dd8:	f7ff ff28 	bl	1c2c <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup>
		} else {
			// Class Interface Requests
			ok = handleClassInterfaceSetup(setup);
		}

		if (ok) {
    1ddc:	2800      	cmp	r0, #0
    1dde:	d02b      	beq.n	1e38 <_ZN14USBDeviceClass10ISRHandlerEv+0x118>
	inline void epBank1SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK1RDY = 1; }
    1de0:	2280      	movs	r2, #128	; 0x80
    1de2:	6823      	ldr	r3, [r4, #0]
    1de4:	4252      	negs	r2, r2
    1de6:	33ff      	adds	r3, #255	; 0xff
    1de8:	7999      	ldrb	r1, [r3, #6]
    1dea:	430a      	orrs	r2, r1
	USB->DEVICE.DeviceEndpoint[ep].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_STALLRQ(2);
    1dec:	719a      	strb	r2, [r3, #6]
	inline bool epBank1IsStalled(ep_t ep)           { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.STALL1; }
    1dee:	6823      	ldr	r3, [r4, #0]
    1df0:	33ff      	adds	r3, #255	; 0xff
    1df2:	7a1a      	ldrb	r2, [r3, #8]
			usbd.epBank1SetReady(0);
		} else {
			stall(0);
		}

		if (usbd.epBank1IsStalled(0))
    1df4:	0652      	lsls	r2, r2, #25
    1df6:	d503      	bpl.n	1e00 <_ZN14USBDeviceClass10ISRHandlerEv+0xe0>
	inline void epBank1DisableStalled(ep_t ep)          { usb.DeviceEndpoint[ep].EPINTENCLR.bit.STALL1 = 1; }
    1df8:	2240      	movs	r2, #64	; 0x40
    1dfa:	7a59      	ldrb	r1, [r3, #9]
    1dfc:	430a      	orrs	r2, r1
    1dfe:	725a      	strb	r2, [r3, #9]
	inline void epAckPendingInterrupts(ep_t ep)     { usb.DeviceEndpoint[ep].EPINTFLAG.reg = 0x7F; }
    1e00:	267f      	movs	r6, #127	; 0x7f
			usbd.epBank1DisableStalled(0);
		}
	} // end Received Setup handler
	usbd.epAckPendingInterrupts(0);

	for (int ep = 1; ep < USB_EPT_NUM; ep++) {
    1e02:	2501      	movs	r5, #1
    1e04:	6823      	ldr	r3, [r4, #0]
    1e06:	33ff      	adds	r3, #255	; 0xff
    1e08:	721e      	strb	r6, [r3, #8]
	inline bool epHasPendingInterrupts(ep_t ep)     { return usb.DeviceEndpoint[ep].EPINTFLAG.reg != 0; }
    1e0a:	002f      	movs	r7, r5
    1e0c:	6823      	ldr	r3, [r4, #0]
    1e0e:	3708      	adds	r7, #8
    1e10:	017f      	lsls	r7, r7, #5
    1e12:	19db      	adds	r3, r3, r7
    1e14:	79db      	ldrb	r3, [r3, #7]
		// Endpoint Transfer Complete (0/1) Interrupt
		if (usbd.epHasPendingInterrupts(ep)) {
    1e16:	2b00      	cmp	r3, #0
    1e18:	d007      	beq.n	1e2a <_ZN14USBDeviceClass10ISRHandlerEv+0x10a>
			if (epHandlers[ep]) {
    1e1a:	4b13      	ldr	r3, [pc, #76]	; (1e68 <_ZN14USBDeviceClass10ISRHandlerEv+0x148>)
    1e1c:	00aa      	lsls	r2, r5, #2
    1e1e:	58d0      	ldr	r0, [r2, r3]
    1e20:	2800      	cmp	r0, #0
    1e22:	d00c      	beq.n	1e3e <_ZN14USBDeviceClass10ISRHandlerEv+0x11e>
				epHandlers[ep]->handleEndpoint();
    1e24:	6803      	ldr	r3, [r0, #0]
    1e26:	681b      	ldr	r3, [r3, #0]
    1e28:	4798      	blx	r3
	for (int ep = 1; ep < USB_EPT_NUM; ep++) {
    1e2a:	3501      	adds	r5, #1
    1e2c:	2d08      	cmp	r5, #8
    1e2e:	d1ec      	bne.n	1e0a <_ZN14USBDeviceClass10ISRHandlerEv+0xea>
				usbd.epAckPendingInterrupts(ep);
				#endif
			}
		}
	}
}
    1e30:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
			ok = handleClassInterfaceSetup(setup);
    1e32:	f7ff fb77 	bl	1524 <_ZN14USBDeviceClass25handleClassInterfaceSetupER8USBSetup>
    1e36:	e7d1      	b.n	1ddc <_ZN14USBDeviceClass10ISRHandlerEv+0xbc>
	USB->DEVICE.DeviceEndpoint[ep].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_STALLRQ(2);
    1e38:	2220      	movs	r2, #32
    1e3a:	4b0c      	ldr	r3, [pc, #48]	; (1e6c <_ZN14USBDeviceClass10ISRHandlerEv+0x14c>)
    1e3c:	e7d6      	b.n	1dec <_ZN14USBDeviceClass10ISRHandlerEv+0xcc>
				PluggableUSB().handleEndpoint(ep);
    1e3e:	f7fe ffff 	bl	e40 <_Z12PluggableUSBv>
    1e42:	0029      	movs	r1, r5
    1e44:	f7fe ffc3 	bl	dce <_ZN13PluggableUSB_14handleEndpointEi>
	inline void epAckPendingInterrupts(ep_t ep)     { usb.DeviceEndpoint[ep].EPINTFLAG.reg = 0x7F; }
    1e48:	6823      	ldr	r3, [r4, #0]
    1e4a:	19df      	adds	r7, r3, r7
    1e4c:	71fe      	strb	r6, [r7, #7]
    1e4e:	e7ec      	b.n	1e2a <_ZN14USBDeviceClass10ISRHandlerEv+0x10a>
    1e50:	200005d9 	.word	0x200005d9
    1e54:	200005e4 	.word	0x200005e4
    1e58:	200005dc 	.word	0x200005dc
    1e5c:	2000014d 	.word	0x2000014d
    1e60:	2000014c 	.word	0x2000014c
    1e64:	20000318 	.word	0x20000318
    1e68:	20000130 	.word	0x20000130
    1e6c:	410050ff 	.word	0x410050ff

00001e70 <UDD_Handler>:
extern "C" void UDD_Handler(void) {
    1e70:	b510      	push	{r4, lr}
	USBDevice.ISRHandler();
    1e72:	4802      	ldr	r0, [pc, #8]	; (1e7c <UDD_Handler+0xc>)
    1e74:	f7ff ff54 	bl	1d20 <_ZN14USBDeviceClass10ISRHandlerEv>
}
    1e78:	bd10      	pop	{r4, pc}
    1e7a:	46c0      	nop			; (mov r8, r8)
    1e7c:	2000012c 	.word	0x2000012c

00001e80 <_GLOBAL__sub_I_usbd>:
	USBDevice_SAMD21G18x() : usb(USB->DEVICE) {
    1e80:	4a01      	ldr	r2, [pc, #4]	; (1e88 <_GLOBAL__sub_I_usbd+0x8>)
    1e82:	4b02      	ldr	r3, [pc, #8]	; (1e8c <_GLOBAL__sub_I_usbd+0xc>)
    1e84:	601a      	str	r2, [r3, #0]
 * USB Device instance
 * -------------------
 */

// USBDevice class instance
USBDeviceClass USBDevice;
    1e86:	4770      	bx	lr
    1e88:	41005000 	.word	0x41005000
    1e8c:	200005e4 	.word	0x200005e4

00001e90 <init>:
 *   - During reset, all PORT lines are configured as inputs with input buffers, output buffers and pull disabled.
 */
void init( void )
{
  // Set Systick to 1ms interval, common to all Cortex-M variants
  if ( SysTick_Config( SystemCoreClock / 1000 ) )
    1e90:	21fa      	movs	r1, #250	; 0xfa
    1e92:	4b31      	ldr	r3, [pc, #196]	; (1f58 <init+0xc8>)
{
    1e94:	b510      	push	{r4, lr}
  if ( SysTick_Config( SystemCoreClock / 1000 ) )
    1e96:	6818      	ldr	r0, [r3, #0]
    1e98:	0089      	lsls	r1, r1, #2
    1e9a:	f000 fb03 	bl	24a4 <__udivsi3>
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
    1e9e:	4b2f      	ldr	r3, [pc, #188]	; (1f5c <init+0xcc>)
    1ea0:	3801      	subs	r0, #1
    1ea2:	4298      	cmp	r0, r3
    1ea4:	d856      	bhi.n	1f54 <init+0xc4>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
    1ea6:	492e      	ldr	r1, [pc, #184]	; (1f60 <init+0xd0>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    1ea8:	4a2e      	ldr	r2, [pc, #184]	; (1f64 <init+0xd4>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
    1eaa:	6048      	str	r0, [r1, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    1eac:	20c0      	movs	r0, #192	; 0xc0
    1eae:	6a13      	ldr	r3, [r2, #32]
    1eb0:	0600      	lsls	r0, r0, #24
    1eb2:	021b      	lsls	r3, r3, #8
    1eb4:	0a1b      	lsrs	r3, r3, #8
    1eb6:	4303      	orrs	r3, r0
    1eb8:	6213      	str	r3, [r2, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
    1eba:	2400      	movs	r4, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
    1ebc:	2307      	movs	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
    1ebe:	608c      	str	r4, [r1, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
    1ec0:	600b      	str	r3, [r1, #0]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    1ec2:	2180      	movs	r1, #128	; 0x80
    1ec4:	6a13      	ldr	r3, [r2, #32]
    1ec6:	0609      	lsls	r1, r1, #24
    1ec8:	021b      	lsls	r3, r3, #8
    1eca:	0a1b      	lsrs	r3, r3, #8
    1ecc:	430b      	orrs	r3, r1
    1ece:	6213      	str	r3, [r2, #32]
//
//  // Clock EIC for I/O interrupts
//  PM->APBAMASK.reg |= PM_APBAMASK_EIC ;

  // Clock SERCOM for Serial
  PM->APBCMASK.reg |= PM_APBCMASK_SERCOM0 | PM_APBCMASK_SERCOM1 | PM_APBCMASK_SERCOM2 | PM_APBCMASK_SERCOM3 | PM_APBCMASK_SERCOM4 | PM_APBCMASK_SERCOM5 ;
    1ed0:	22fc      	movs	r2, #252	; 0xfc
    1ed2:	4b25      	ldr	r3, [pc, #148]	; (1f68 <init+0xd8>)
    1ed4:	6a19      	ldr	r1, [r3, #32]
    1ed6:	430a      	orrs	r2, r1
    1ed8:	621a      	str	r2, [r3, #32]

  // Clock TC/TCC for Pulse and Analog
  PM->APBCMASK.reg |= PM_APBCMASK_TCC0 | PM_APBCMASK_TCC1 | PM_APBCMASK_TCC2 | PM_APBCMASK_TC3 | PM_APBCMASK_TC4 | PM_APBCMASK_TC5 ;
    1eda:	22fc      	movs	r2, #252	; 0xfc
    1edc:	6a19      	ldr	r1, [r3, #32]
    1ede:	0192      	lsls	r2, r2, #6
    1ee0:	430a      	orrs	r2, r1
    1ee2:	621a      	str	r2, [r3, #32]

  // Clock ADC/DAC for Analog
  PM->APBCMASK.reg |= PM_APBCMASK_ADC | PM_APBCMASK_DAC ;
    1ee4:	22a0      	movs	r2, #160	; 0xa0
    1ee6:	6a19      	ldr	r1, [r3, #32]
    1ee8:	02d2      	lsls	r2, r2, #11
    1eea:	430a      	orrs	r2, r1
    1eec:	621a      	str	r2, [r3, #32]
// However, it really lowers the power consumption by a factor of 20 in low power mode (0.03mA vs 0.6mA)
#ifndef VERY_LOW_POWER
  // Setup all pins (digital and analog) in INPUT mode (default is nothing)
  for (uint32_t ul = 0 ; ul < NUM_DIGITAL_PINS ; ul++ )
  {
    pinMode( ul, INPUT ) ;
    1eee:	0020      	movs	r0, r4
    1ef0:	2100      	movs	r1, #0
  for (uint32_t ul = 0 ; ul < NUM_DIGITAL_PINS ; ul++ )
    1ef2:	3401      	adds	r4, #1
    pinMode( ul, INPUT ) ;
    1ef4:	f000 f876 	bl	1fe4 <pinMode>
  for (uint32_t ul = 0 ; ul < NUM_DIGITAL_PINS ; ul++ )
    1ef8:	2c14      	cmp	r4, #20
    1efa:	d1f8      	bne.n	1eee <init+0x5e>
  }
#endif

  // Initialize Analog Controller
  // Setting clock
  while(GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY);
    1efc:	4b1b      	ldr	r3, [pc, #108]	; (1f6c <init+0xdc>)
    1efe:	001c      	movs	r4, r3
    1f00:	785a      	ldrb	r2, [r3, #1]
    1f02:	b252      	sxtb	r2, r2
    1f04:	2a00      	cmp	r2, #0
    1f06:	dbfb      	blt.n	1f00 <init+0x70>

  GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID( GCM_ADC ) | // Generic Clock ADC
    1f08:	4a19      	ldr	r2, [pc, #100]	; (1f70 <init+0xe0>)
    1f0a:	805a      	strh	r2, [r3, #2]
                      GCLK_CLKCTRL_GEN_GCLK0     | // Generic Clock Generator 0 is source
                      GCLK_CLKCTRL_CLKEN ;

  while( ADC->STATUS.bit.SYNCBUSY == 1 );          // Wait for synchronization of registers between the clock domains
    1f0c:	4b19      	ldr	r3, [pc, #100]	; (1f74 <init+0xe4>)
    1f0e:	001a      	movs	r2, r3
    1f10:	7e59      	ldrb	r1, [r3, #25]
    1f12:	09c9      	lsrs	r1, r1, #7
    1f14:	2901      	cmp	r1, #1
    1f16:	d0fb      	beq.n	1f10 <init+0x80>

  ADC->CTRLB.reg = ADC_CTRLB_PRESCALER_DIV512 |    // Divide Clock by 512.
    1f18:	21e4      	movs	r1, #228	; 0xe4
    1f1a:	00c9      	lsls	r1, r1, #3
    1f1c:	8099      	strh	r1, [r3, #4]
                   ADC_CTRLB_RESSEL_10BIT;         // 10 bits resolution as default

  ADC->SAMPCTRL.reg = 0x3f;                        // Set max Sampling Time Length
    1f1e:	213f      	movs	r1, #63	; 0x3f
    1f20:	70d9      	strb	r1, [r3, #3]

  while( ADC->STATUS.bit.SYNCBUSY == 1 );          // Wait for synchronization of registers between the clock domains
    1f22:	7e53      	ldrb	r3, [r2, #25]
    1f24:	09db      	lsrs	r3, r3, #7
    1f26:	2b01      	cmp	r3, #1
    1f28:	d0fb      	beq.n	1f22 <init+0x92>

  ADC->INPUTCTRL.reg = ADC_INPUTCTRL_MUXNEG_GND;   // No Negative input (Internal Ground)
    1f2a:	23c0      	movs	r3, #192	; 0xc0

  // Averaging (see datasheet table in AVGCTRL register description)
  ADC->AVGCTRL.reg = ADC_AVGCTRL_SAMPLENUM_1 |    // 1 sample only (no oversampling nor averaging)
    1f2c:	2000      	movs	r0, #0
  ADC->INPUTCTRL.reg = ADC_INPUTCTRL_MUXNEG_GND;   // No Negative input (Internal Ground)
    1f2e:	015b      	lsls	r3, r3, #5
    1f30:	6113      	str	r3, [r2, #16]
  ADC->AVGCTRL.reg = ADC_AVGCTRL_SAMPLENUM_1 |    // 1 sample only (no oversampling nor averaging)
    1f32:	7090      	strb	r0, [r2, #2]
                     ADC_AVGCTRL_ADJRES(0x0ul);   // Adjusting result by 0

  analogReference( AR_DEFAULT ) ; // Analog Reference is AREF pin (3.3v)
    1f34:	f000 f824 	bl	1f80 <analogReference>

  // Initialize DAC
  // Setting clock
  while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY );
    1f38:	7863      	ldrb	r3, [r4, #1]
    1f3a:	b25b      	sxtb	r3, r3
    1f3c:	2b00      	cmp	r3, #0
    1f3e:	dbfb      	blt.n	1f38 <init+0xa8>
  GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID( GCM_DAC ) | // Generic Clock ADC
    1f40:	4b0d      	ldr	r3, [pc, #52]	; (1f78 <init+0xe8>)
                      GCLK_CLKCTRL_GEN_GCLK0     | // Generic Clock Generator 0 is source
                      GCLK_CLKCTRL_CLKEN ;

  while ( DAC->STATUS.bit.SYNCBUSY == 1 ); // Wait for synchronization of registers between the clock domains
    1f42:	4a0e      	ldr	r2, [pc, #56]	; (1f7c <init+0xec>)
  GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID( GCM_DAC ) | // Generic Clock ADC
    1f44:	8063      	strh	r3, [r4, #2]
  while ( DAC->STATUS.bit.SYNCBUSY == 1 ); // Wait for synchronization of registers between the clock domains
    1f46:	79d3      	ldrb	r3, [r2, #7]
    1f48:	09db      	lsrs	r3, r3, #7
    1f4a:	2b01      	cmp	r3, #1
    1f4c:	d0fb      	beq.n	1f46 <init+0xb6>
  DAC->CTRLB.reg = DAC_CTRLB_REFSEL_AVCC | // Using the 3.3V reference
    1f4e:	2341      	movs	r3, #65	; 0x41
    1f50:	7053      	strb	r3, [r2, #1]
                   DAC_CTRLB_EOEN ;        // External Output Enable (Vout)
}
    1f52:	bd10      	pop	{r4, pc}
    1f54:	e7fe      	b.n	1f54 <init+0xc4>
    1f56:	46c0      	nop			; (mov r8, r8)
    1f58:	20000014 	.word	0x20000014
    1f5c:	00ffffff 	.word	0x00ffffff
    1f60:	e000e010 	.word	0xe000e010
    1f64:	e000ed00 	.word	0xe000ed00
    1f68:	40000400 	.word	0x40000400
    1f6c:	40000c00 	.word	0x40000c00
    1f70:	0000401e 	.word	0x0000401e
    1f74:	42004000 	.word	0x42004000
    1f78:	00004021 	.word	0x00004021
    1f7c:	42004800 	.word	0x42004800

00001f80 <analogReference>:
static int _writeResolution = 8;

// Wait for synchronization of registers between the clock domains
static __inline__ void syncADC() __attribute__((always_inline, unused));
static void syncADC() {
  while (ADC->STATUS.bit.SYNCBUSY == 1)
    1f80:	4a16      	ldr	r2, [pc, #88]	; (1fdc <analogReference+0x5c>)
 * External Reference should be between 1v and VDDANA-0.6v=2.7v
 *
 * Warning : On Arduino Zero board the input/output voltage for SAMD21G18 is 3.3 volts maximum
 */
void analogReference(eAnalogReference mode)
{
    1f82:	b500      	push	{lr}
    1f84:	0013      	movs	r3, r2
  while (ADC->STATUS.bit.SYNCBUSY == 1)
    1f86:	7e51      	ldrb	r1, [r2, #25]
    1f88:	09c9      	lsrs	r1, r1, #7
    1f8a:	2901      	cmp	r1, #1
    1f8c:	d0fb      	beq.n	1f86 <analogReference+0x6>
  syncADC();
  switch (mode)
    1f8e:	3801      	subs	r0, #1
    1f90:	2804      	cmp	r0, #4
    1f92:	d816      	bhi.n	1fc2 <analogReference+0x42>
      ADC->INPUTCTRL.bit.GAIN = ADC_INPUTCTRL_GAIN_1X_Val;      // Gain Factor Selection
      ADC->REFCTRL.bit.REFSEL = ADC_REFCTRL_REFSEL_INT1V_Val;   // 1.0V voltage reference
      break;

    case AR_INTERNAL1V65:
      ADC->INPUTCTRL.bit.GAIN = ADC_INPUTCTRL_GAIN_1X_Val;      // Gain Factor Selection
    1f94:	6919      	ldr	r1, [r3, #16]
    1f96:	4a12      	ldr	r2, [pc, #72]	; (1fe0 <analogReference+0x60>)
    1f98:	400a      	ands	r2, r1
      ADC->REFCTRL.bit.REFSEL = ADC_REFCTRL_REFSEL_INTVCC1_Val; // 1/2 VDDANA = 0.5* 3V3 = 1.65V
    1f9a:	210f      	movs	r1, #15
      ADC->INPUTCTRL.bit.GAIN = ADC_INPUTCTRL_GAIN_1X_Val;      // Gain Factor Selection
    1f9c:	611a      	str	r2, [r3, #16]
      ADC->REFCTRL.bit.REFSEL = ADC_REFCTRL_REFSEL_INTVCC1_Val; // 1/2 VDDANA = 0.5* 3V3 = 1.65V
    1f9e:	785a      	ldrb	r2, [r3, #1]
    1fa0:	438a      	bics	r2, r1
  switch (mode)
    1fa2:	f000 fa75 	bl	2490 <__gnu_thumb1_case_uqi>
    1fa6:	0803      	.short	0x0803
    1fa8:	0b06      	.short	0x0b06
    1faa:	03          	.byte	0x03
    1fab:	00          	.byte	0x00
      ADC->REFCTRL.bit.REFSEL = ADC_REFCTRL_REFSEL_INTVCC0_Val; // 1/1.48 VDDANA = 1/1.48* 3V3 = 2.2297
    1fac:	0011      	movs	r1, r2
    1fae:	2201      	movs	r2, #1
      ADC->REFCTRL.bit.REFSEL = ADC_REFCTRL_REFSEL_INTVCC1_Val; // 1/2 VDDANA = 0.5* 3V3 = 1.65V
    1fb0:	430a      	orrs	r2, r1
    1fb2:	705a      	strb	r2, [r3, #1]
    default:
      ADC->INPUTCTRL.bit.GAIN = ADC_INPUTCTRL_GAIN_DIV2_Val;
      ADC->REFCTRL.bit.REFSEL = ADC_REFCTRL_REFSEL_INTVCC1_Val; // 1/2 VDDANA = 0.5* 3V3 = 1.65V
      break;
  }
}
    1fb4:	bd00      	pop	{pc}
      ADC->REFCTRL.bit.REFSEL = ADC_REFCTRL_REFSEL_AREFA_Val;
    1fb6:	0011      	movs	r1, r2
    1fb8:	2203      	movs	r2, #3
    1fba:	e7f9      	b.n	1fb0 <analogReference+0x30>
      ADC->REFCTRL.bit.REFSEL = ADC_REFCTRL_REFSEL_INTVCC1_Val; // 1/2 VDDANA = 0.5* 3V3 = 1.65V
    1fbc:	0011      	movs	r1, r2
    1fbe:	2202      	movs	r2, #2
    1fc0:	e7f6      	b.n	1fb0 <analogReference+0x30>
      ADC->INPUTCTRL.bit.GAIN = ADC_INPUTCTRL_GAIN_DIV2_Val;
    1fc2:	23f0      	movs	r3, #240	; 0xf0
    1fc4:	6911      	ldr	r1, [r2, #16]
    1fc6:	051b      	lsls	r3, r3, #20
    1fc8:	430b      	orrs	r3, r1
      ADC->REFCTRL.bit.REFSEL = ADC_REFCTRL_REFSEL_INTVCC1_Val; // 1/2 VDDANA = 0.5* 3V3 = 1.65V
    1fca:	210f      	movs	r1, #15
      ADC->INPUTCTRL.bit.GAIN = ADC_INPUTCTRL_GAIN_DIV2_Val;
    1fcc:	6113      	str	r3, [r2, #16]
      ADC->REFCTRL.bit.REFSEL = ADC_REFCTRL_REFSEL_INTVCC1_Val; // 1/2 VDDANA = 0.5* 3V3 = 1.65V
    1fce:	7853      	ldrb	r3, [r2, #1]
    1fd0:	438b      	bics	r3, r1
    1fd2:	0019      	movs	r1, r3
    1fd4:	2302      	movs	r3, #2
    1fd6:	430b      	orrs	r3, r1
    1fd8:	7053      	strb	r3, [r2, #1]
}
    1fda:	e7eb      	b.n	1fb4 <analogReference+0x34>
    1fdc:	42004000 	.word	0x42004000
    1fe0:	f0ffffff 	.word	0xf0ffffff

00001fe4 <pinMode>:
#endif

void pinMode( uint32_t ulPin, uint32_t ulMode )
{
  // Handle the case the pin isn't usable as PIO
  if ( g_APinDescription[ulPin].ulPinType == PIO_NOT_A_PIN )
    1fe4:	2318      	movs	r3, #24
{
    1fe6:	b530      	push	{r4, r5, lr}
  if ( g_APinDescription[ulPin].ulPinType == PIO_NOT_A_PIN )
    1fe8:	001d      	movs	r5, r3
{
    1fea:	0004      	movs	r4, r0
  if ( g_APinDescription[ulPin].ulPinType == PIO_NOT_A_PIN )
    1fec:	4345      	muls	r5, r0
    1fee:	2008      	movs	r0, #8
    1ff0:	4a20      	ldr	r2, [pc, #128]	; (2074 <pinMode+0x90>)
    1ff2:	1955      	adds	r5, r2, r5
    1ff4:	5628      	ldrsb	r0, [r5, r0]
    1ff6:	3001      	adds	r0, #1
    1ff8:	d014      	beq.n	2024 <pinMode+0x40>
  {
    return ;
  }

  // Set pin mode according to chapter '22.6.3 I/O Pin Configuration'
  switch ( ulMode )
    1ffa:	2903      	cmp	r1, #3
    1ffc:	d812      	bhi.n	2024 <pinMode+0x40>
    1ffe:	0008      	movs	r0, r1
      PORT->Group[g_APinDescription[ulPin].ulPort].OUTSET.reg = (uint32_t)(1<<g_APinDescription[ulPin].ulPin) ;
    break ;

    case INPUT_PULLDOWN:
      // Set pin to input mode with pull-down resistor enabled
      PORT->Group[g_APinDescription[ulPin].ulPort].PINCFG[g_APinDescription[ulPin].ulPin].reg=(uint8_t)(PORT_PINCFG_INEN|PORT_PINCFG_PULLEN) ;
    2000:	4363      	muls	r3, r4
    2002:	56d1      	ldrsb	r1, [r2, r3]
    2004:	18d3      	adds	r3, r2, r3
  switch ( ulMode )
    2006:	f000 fa43 	bl	2490 <__gnu_thumb1_case_uqi>
    200a:	2802      	.short	0x2802
    200c:	1b0e      	.short	0x1b0e
      PORT->Group[g_APinDescription[ulPin].ulPort].PINCFG[g_APinDescription[ulPin].ulPin].reg=(uint8_t)(PORT_PINCFG_INEN) ;
    200e:	6858      	ldr	r0, [r3, #4]
    2010:	01cb      	lsls	r3, r1, #7
    2012:	2102      	movs	r1, #2
    2014:	4a18      	ldr	r2, [pc, #96]	; (2078 <pinMode+0x94>)
    2016:	189b      	adds	r3, r3, r2
    2018:	181a      	adds	r2, r3, r0
    201a:	3240      	adds	r2, #64	; 0x40
    201c:	7011      	strb	r1, [r2, #0]
      PORT->Group[g_APinDescription[ulPin].ulPort].DIRCLR.reg = (uint32_t)(1<<g_APinDescription[ulPin].ulPin) ;
    201e:	2201      	movs	r2, #1
    2020:	4082      	lsls	r2, r0
    2022:	605a      	str	r2, [r3, #4]

    default:
      // do nothing
    break ;
  }
}
    2024:	bd30      	pop	{r4, r5, pc}
      PORT->Group[g_APinDescription[ulPin].ulPort].PINCFG[g_APinDescription[ulPin].ulPin].reg=(uint8_t)(PORT_PINCFG_INEN|PORT_PINCFG_PULLEN) ;
    2026:	6858      	ldr	r0, [r3, #4]
    2028:	01cb      	lsls	r3, r1, #7
    202a:	2106      	movs	r1, #6
    202c:	4a12      	ldr	r2, [pc, #72]	; (2078 <pinMode+0x94>)
    202e:	189b      	adds	r3, r3, r2
    2030:	181a      	adds	r2, r3, r0
    2032:	3240      	adds	r2, #64	; 0x40
    2034:	7011      	strb	r1, [r2, #0]
      PORT->Group[g_APinDescription[ulPin].ulPort].DIRCLR.reg = (uint32_t)(1<<g_APinDescription[ulPin].ulPin) ;
    2036:	2201      	movs	r2, #1
    2038:	4082      	lsls	r2, r0
    203a:	605a      	str	r2, [r3, #4]
      PORT->Group[g_APinDescription[ulPin].ulPort].OUTSET.reg = (uint32_t)(1<<g_APinDescription[ulPin].ulPin) ;
    203c:	619a      	str	r2, [r3, #24]
    break ;
    203e:	e7f1      	b.n	2024 <pinMode+0x40>
      PORT->Group[g_APinDescription[ulPin].ulPort].PINCFG[g_APinDescription[ulPin].ulPin].reg=(uint8_t)(PORT_PINCFG_INEN|PORT_PINCFG_PULLEN) ;
    2040:	6858      	ldr	r0, [r3, #4]
    2042:	01cb      	lsls	r3, r1, #7
    2044:	2106      	movs	r1, #6
    2046:	4a0c      	ldr	r2, [pc, #48]	; (2078 <pinMode+0x94>)
    2048:	189b      	adds	r3, r3, r2
    204a:	181a      	adds	r2, r3, r0
    204c:	3240      	adds	r2, #64	; 0x40
    204e:	7011      	strb	r1, [r2, #0]
      PORT->Group[g_APinDescription[ulPin].ulPort].DIRCLR.reg = (uint32_t)(1<<g_APinDescription[ulPin].ulPin) ;
    2050:	2201      	movs	r2, #1
    2052:	4082      	lsls	r2, r0
    2054:	605a      	str	r2, [r3, #4]
      PORT->Group[g_APinDescription[ulPin].ulPort].OUTCLR.reg = (uint32_t)(1<<g_APinDescription[ulPin].ulPin) ;
    2056:	615a      	str	r2, [r3, #20]
    break ;
    2058:	e7e4      	b.n	2024 <pinMode+0x40>
      PORT->Group[g_APinDescription[ulPin].ulPort].PINCFG[g_APinDescription[ulPin].ulPin].reg=(uint8_t)(PORT_PINCFG_INEN) ;
    205a:	6858      	ldr	r0, [r3, #4]
    205c:	01cb      	lsls	r3, r1, #7
    205e:	2102      	movs	r1, #2
    2060:	4a05      	ldr	r2, [pc, #20]	; (2078 <pinMode+0x94>)
    2062:	189b      	adds	r3, r3, r2
    2064:	181a      	adds	r2, r3, r0
    2066:	3240      	adds	r2, #64	; 0x40
    2068:	7011      	strb	r1, [r2, #0]
      PORT->Group[g_APinDescription[ulPin].ulPort].DIRSET.reg = (uint32_t)(1<<g_APinDescription[ulPin].ulPin) ;
    206a:	2201      	movs	r2, #1
    206c:	4082      	lsls	r2, r0
    206e:	609a      	str	r2, [r3, #8]
    break ;
    2070:	e7d8      	b.n	2024 <pinMode+0x40>
    2072:	46c0      	nop			; (mov r8, r8)
    2074:	000028ec 	.word	0x000028ec
    2078:	41004400 	.word	0x41004400

0000207c <digitalWrite>:

void digitalWrite( uint32_t ulPin, uint32_t ulVal )
{
  // Handle the case the pin isn't usable as PIO
  if ( g_APinDescription[ulPin].ulPinType == PIO_NOT_A_PIN )
    207c:	2318      	movs	r3, #24
{
    207e:	b5f0      	push	{r4, r5, r6, r7, lr}
  if ( g_APinDescription[ulPin].ulPinType == PIO_NOT_A_PIN )
    2080:	2408      	movs	r4, #8
    2082:	4358      	muls	r0, r3
    2084:	4a11      	ldr	r2, [pc, #68]	; (20cc <digitalWrite+0x50>)
    2086:	1813      	adds	r3, r2, r0
    2088:	571c      	ldrsb	r4, [r3, r4]
    208a:	3401      	adds	r4, #1
    208c:	d01b      	beq.n	20c6 <digitalWrite+0x4a>
    return ;
  }

  EPortType port = g_APinDescription[ulPin].ulPort;
  uint32_t pin = g_APinDescription[ulPin].ulPin;
  uint32_t pinMask = (1ul << pin);
    208e:	2601      	movs	r6, #1
    2090:	0035      	movs	r5, r6
  uint32_t pin = g_APinDescription[ulPin].ulPin;
    2092:	685f      	ldr	r7, [r3, #4]

  if ( (PORT->Group[port].DIRSET.reg & pinMask) == 0 ) {
    2094:	5683      	ldrsb	r3, [r0, r2]
  uint32_t pinMask = (1ul << pin);
    2096:	40bd      	lsls	r5, r7
  if ( (PORT->Group[port].DIRSET.reg & pinMask) == 0 ) {
    2098:	4a0d      	ldr	r2, [pc, #52]	; (20d0 <digitalWrite+0x54>)
    209a:	01db      	lsls	r3, r3, #7
    209c:	189a      	adds	r2, r3, r2
    209e:	6890      	ldr	r0, [r2, #8]
    20a0:	4228      	tst	r0, r5
    20a2:	d10b      	bne.n	20bc <digitalWrite+0x40>
    // the pin is not an output, disable pull-up if val is LOW, otherwise enable pull-up
    PORT->Group[port].PINCFG[pin].bit.PULLEN = ((ulVal == LOW) ? 0 : 1) ;
    20a4:	000c      	movs	r4, r1
    20a6:	1e60      	subs	r0, r4, #1
    20a8:	4184      	sbcs	r4, r0
    20aa:	19d2      	adds	r2, r2, r7
    20ac:	3240      	adds	r2, #64	; 0x40
    20ae:	7810      	ldrb	r0, [r2, #0]
    20b0:	4034      	ands	r4, r6
    20b2:	3603      	adds	r6, #3
    20b4:	00a4      	lsls	r4, r4, #2
    20b6:	43b0      	bics	r0, r6
    20b8:	4320      	orrs	r0, r4
    20ba:	7010      	strb	r0, [r2, #0]
  }

  switch ( ulVal )
  {
    case LOW:
      PORT->Group[port].OUTCLR.reg = pinMask;
    20bc:	4a04      	ldr	r2, [pc, #16]	; (20d0 <digitalWrite+0x54>)
    20be:	189b      	adds	r3, r3, r2
  switch ( ulVal )
    20c0:	2900      	cmp	r1, #0
    20c2:	d101      	bne.n	20c8 <digitalWrite+0x4c>
      PORT->Group[port].OUTCLR.reg = pinMask;
    20c4:	615d      	str	r5, [r3, #20]
      PORT->Group[port].OUTSET.reg = pinMask;
    break ;
  }

  return ;
}
    20c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
      PORT->Group[port].OUTSET.reg = pinMask;
    20c8:	619d      	str	r5, [r3, #24]
    break ;
    20ca:	e7fc      	b.n	20c6 <digitalWrite+0x4a>
    20cc:	000028ec 	.word	0x000028ec
    20d0:	41004400 	.word	0x41004400

000020d4 <pinPeripheral>:

#include "Arduino.h"
#include "wiring_private.h"

int pinPeripheral( uint32_t ulPin, EPioType ulPeripheral )
{
    20d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    20d6:	0003      	movs	r3, r0
  // Handle the case the pin isn't usable as PIO
  if ( g_APinDescription[ulPin].ulPinType == PIO_NOT_A_PIN )
    20d8:	2018      	movs	r0, #24
    20da:	4358      	muls	r0, r3
    20dc:	4a2a      	ldr	r2, [pc, #168]	; (2188 <pinPeripheral+0xb4>)
    20de:	1810      	adds	r0, r2, r0
    20e0:	7a00      	ldrb	r0, [r0, #8]
    20e2:	b240      	sxtb	r0, r0
  {
    return -1 ;
    20e4:	0004      	movs	r4, r0
  if ( g_APinDescription[ulPin].ulPinType == PIO_NOT_A_PIN )
    20e6:	3001      	adds	r0, #1
    20e8:	d013      	beq.n	2112 <pinPeripheral+0x3e>
  }

  switch ( ulPeripheral )
    20ea:	1c48      	adds	r0, r1, #1
    case PIO_NOT_A_PIN:
      return -1l ;
    break ;
  }

  return 0l ;
    20ec:	2400      	movs	r4, #0
  switch ( ulPeripheral )
    20ee:	280c      	cmp	r0, #12
    20f0:	d80f      	bhi.n	2112 <pinPeripheral+0x3e>
    20f2:	f000 f9cd 	bl	2490 <__gnu_thumb1_case_uqi>
    20f6:	1c45      	.short	0x1c45
    20f8:	1c1c1c1c 	.word	0x1c1c1c1c
    20fc:	071c1c1c 	.word	0x071c1c1c
    2100:	0707      	.short	0x0707
    2102:	07          	.byte	0x07
    2103:	00          	.byte	0x00
      if ( ulPeripheral == PIO_INPUT )
    2104:	2909      	cmp	r1, #9
    2106:	d106      	bne.n	2116 <pinPeripheral+0x42>
        pinMode( ulPin, INPUT ) ;
    2108:	2100      	movs	r1, #0
          pinMode( ulPin, INPUT_PULLUP ) ;
    210a:	0018      	movs	r0, r3
    210c:	f7ff ff6a 	bl	1fe4 <pinMode>
  return 0l ;
    2110:	2400      	movs	r4, #0
}
    2112:	0020      	movs	r0, r4
    2114:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if ( ulPeripheral == PIO_INPUT_PULLUP )
    2116:	290a      	cmp	r1, #10
    2118:	d101      	bne.n	211e <pinPeripheral+0x4a>
          pinMode( ulPin, INPUT_PULLUP ) ;
    211a:	3908      	subs	r1, #8
    211c:	e7f5      	b.n	210a <pinPeripheral+0x36>
  return 0l ;
    211e:	2400      	movs	r4, #0
          if ( ulPeripheral == PIO_OUTPUT )
    2120:	290b      	cmp	r1, #11
    2122:	d1f6      	bne.n	2112 <pinPeripheral+0x3e>
            pinMode( ulPin, OUTPUT ) ;
    2124:	390a      	subs	r1, #10
    2126:	0018      	movs	r0, r3
    2128:	f7ff ff5c 	bl	1fe4 <pinMode>
    212c:	e7f1      	b.n	2112 <pinPeripheral+0x3e>
      if ( g_APinDescription[ulPin].ulPin & 1 ) // is pin odd?
    212e:	2018      	movs	r0, #24
    2130:	4343      	muls	r3, r0
    2132:	18d0      	adds	r0, r2, r3
    2134:	6846      	ldr	r6, [r0, #4]
    2136:	2501      	movs	r5, #1
    2138:	0034      	movs	r4, r6
    213a:	56d2      	ldrsb	r2, [r2, r3]
        temp = (PORT->Group[g_APinDescription[ulPin].ulPort].PMUX[g_APinDescription[ulPin].ulPin >> 1].reg) & PORT_PMUX_PMUXE( 0xF ) ;
    213c:	4813      	ldr	r0, [pc, #76]	; (218c <pinPeripheral+0xb8>)
    213e:	01d2      	lsls	r2, r2, #7
    2140:	1812      	adds	r2, r2, r0
    2142:	0873      	lsrs	r3, r6, #1
    2144:	18d3      	adds	r3, r2, r3
    2146:	3330      	adds	r3, #48	; 0x30
      if ( g_APinDescription[ulPin].ulPin & 1 ) // is pin odd?
    2148:	402c      	ands	r4, r5
        temp = (PORT->Group[g_APinDescription[ulPin].ulPort].PMUX[g_APinDescription[ulPin].ulPin >> 1].reg) & PORT_PMUX_PMUXE( 0xF ) ;
    214a:	7818      	ldrb	r0, [r3, #0]
      if ( g_APinDescription[ulPin].ulPin & 1 ) // is pin odd?
    214c:	2c00      	cmp	r4, #0
    214e:	d00b      	beq.n	2168 <pinPeripheral+0x94>
        PORT->Group[g_APinDescription[ulPin].ulPort].PMUX[g_APinDescription[ulPin].ulPin >> 1].reg = temp|PORT_PMUX_PMUXO( ulPeripheral ) ;
    2150:	240f      	movs	r4, #15
    2152:	0109      	lsls	r1, r1, #4
    2154:	4020      	ands	r0, r4
    2156:	4301      	orrs	r1, r0
    2158:	b2c9      	uxtb	r1, r1
        PORT->Group[g_APinDescription[ulPin].ulPort].PINCFG[g_APinDescription[ulPin].ulPin].reg |= PORT_PINCFG_PMUXEN ;
    215a:	1992      	adds	r2, r2, r6
        PORT->Group[g_APinDescription[ulPin].ulPort].PMUX[g_APinDescription[ulPin].ulPin >> 1].reg = temp|PORT_PMUX_PMUXO( ulPeripheral ) ;
    215c:	7019      	strb	r1, [r3, #0]
        PORT->Group[g_APinDescription[ulPin].ulPort].PINCFG[g_APinDescription[ulPin].ulPin].reg |= PORT_PINCFG_PMUXEN ;
    215e:	3240      	adds	r2, #64	; 0x40
    2160:	7813      	ldrb	r3, [r2, #0]
    2162:	431d      	orrs	r5, r3
    2164:	7015      	strb	r5, [r2, #0]
    2166:	e7d3      	b.n	2110 <pinPeripheral+0x3c>
        PORT->Group[g_APinDescription[ulPin].ulPort].PMUX[g_APinDescription[ulPin].ulPin >> 1].reg = temp|PORT_PMUX_PMUXE( ulPeripheral ) ;
    2168:	270f      	movs	r7, #15
    216a:	43b8      	bics	r0, r7
    216c:	4301      	orrs	r1, r0
        PORT->Group[g_APinDescription[ulPin].ulPort].PINCFG[g_APinDescription[ulPin].ulPin].reg |= PORT_PINCFG_PMUXEN ; // Enable port mux
    216e:	1992      	adds	r2, r2, r6
        PORT->Group[g_APinDescription[ulPin].ulPort].PMUX[g_APinDescription[ulPin].ulPin >> 1].reg = temp|PORT_PMUX_PMUXE( ulPeripheral ) ;
    2170:	b2c9      	uxtb	r1, r1
    2172:	7019      	strb	r1, [r3, #0]
        PORT->Group[g_APinDescription[ulPin].ulPort].PINCFG[g_APinDescription[ulPin].ulPin].reg |= PORT_PINCFG_PMUXEN ; // Enable port mux
    2174:	0013      	movs	r3, r2
    2176:	3340      	adds	r3, #64	; 0x40
    2178:	781a      	ldrb	r2, [r3, #0]
    217a:	4315      	orrs	r5, r2
    217c:	701d      	strb	r5, [r3, #0]
    217e:	e7c8      	b.n	2112 <pinPeripheral+0x3e>
      return -1l ;
    2180:	2401      	movs	r4, #1
    2182:	4264      	negs	r4, r4
    2184:	e7c5      	b.n	2112 <pinPeripheral+0x3e>
    2186:	46c0      	nop			; (mov r8, r8)
    2188:	000028ec 	.word	0x000028ec
    218c:	41004400 	.word	0x41004400

00002190 <SERCOM0_Handler>:
SERCOM sercom5( SERCOM5 ) ;

Uart Serial1( &sercom0, PIN_SERIAL1_RX, PIN_SERIAL1_TX, PAD_SERIAL1_RX, PAD_SERIAL1_TX ) ;
Uart Serial( &sercom5, PIN_SERIAL_RX, PIN_SERIAL_TX, PAD_SERIAL_RX, PAD_SERIAL_TX ) ;
void SERCOM0_Handler()
{
    2190:	b510      	push	{r4, lr}
  Serial1.IrqHandler();
    2192:	4802      	ldr	r0, [pc, #8]	; (219c <SERCOM0_Handler+0xc>)
    2194:	f7fe faff 	bl	796 <_ZN4Uart10IrqHandlerEv>
}
    2198:	bd10      	pop	{r4, pc}
    219a:	46c0      	nop			; (mov r8, r8)
    219c:	20000924 	.word	0x20000924

000021a0 <SERCOM5_Handler>:

void SERCOM5_Handler()
{
    21a0:	b510      	push	{r4, lr}
  Serial.IrqHandler();
    21a2:	4802      	ldr	r0, [pc, #8]	; (21ac <SERCOM5_Handler+0xc>)
    21a4:	f7fe faf7 	bl	796 <_ZN4Uart10IrqHandlerEv>
}
    21a8:	bd10      	pop	{r4, pc}
    21aa:	46c0      	nop			; (mov r8, r8)
    21ac:	200006e8 	.word	0x200006e8

000021b0 <_GLOBAL__sub_I_g_APinDescription>:
    21b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
Uart Serial1( &sercom0, PIN_SERIAL1_RX, PIN_SERIAL1_TX, PAD_SERIAL1_RX, PAD_SERIAL1_TX ) ;
    21b2:	2401      	movs	r4, #1
    21b4:	2603      	movs	r6, #3
SERCOM sercom0( SERCOM0 ) ;
    21b6:	4f15      	ldr	r7, [pc, #84]	; (220c <_GLOBAL__sub_I_g_APinDescription+0x5c>)
    21b8:	4915      	ldr	r1, [pc, #84]	; (2210 <_GLOBAL__sub_I_g_APinDescription+0x60>)
    21ba:	0038      	movs	r0, r7
    21bc:	f000 f85e 	bl	227c <_ZN6SERCOMC1EP6Sercom>
SERCOM sercom1( SERCOM1 ) ;
    21c0:	4914      	ldr	r1, [pc, #80]	; (2214 <_GLOBAL__sub_I_g_APinDescription+0x64>)
    21c2:	4815      	ldr	r0, [pc, #84]	; (2218 <_GLOBAL__sub_I_g_APinDescription+0x68>)
    21c4:	f000 f85a 	bl	227c <_ZN6SERCOMC1EP6Sercom>
SERCOM sercom2( SERCOM2 ) ;
    21c8:	4914      	ldr	r1, [pc, #80]	; (221c <_GLOBAL__sub_I_g_APinDescription+0x6c>)
    21ca:	4815      	ldr	r0, [pc, #84]	; (2220 <_GLOBAL__sub_I_g_APinDescription+0x70>)
    21cc:	f000 f856 	bl	227c <_ZN6SERCOMC1EP6Sercom>
SERCOM sercom3( SERCOM3 ) ;
    21d0:	4914      	ldr	r1, [pc, #80]	; (2224 <_GLOBAL__sub_I_g_APinDescription+0x74>)
    21d2:	4815      	ldr	r0, [pc, #84]	; (2228 <_GLOBAL__sub_I_g_APinDescription+0x78>)
    21d4:	f000 f852 	bl	227c <_ZN6SERCOMC1EP6Sercom>
SERCOM sercom4( SERCOM4 ) ;
    21d8:	4914      	ldr	r1, [pc, #80]	; (222c <_GLOBAL__sub_I_g_APinDescription+0x7c>)
    21da:	4815      	ldr	r0, [pc, #84]	; (2230 <_GLOBAL__sub_I_g_APinDescription+0x80>)
    21dc:	f000 f84e 	bl	227c <_ZN6SERCOMC1EP6Sercom>
SERCOM sercom5( SERCOM5 ) ;
    21e0:	4d14      	ldr	r5, [pc, #80]	; (2234 <_GLOBAL__sub_I_g_APinDescription+0x84>)
    21e2:	4915      	ldr	r1, [pc, #84]	; (2238 <_GLOBAL__sub_I_g_APinDescription+0x88>)
    21e4:	0028      	movs	r0, r5
    21e6:	f000 f849 	bl	227c <_ZN6SERCOMC1EP6Sercom>
Uart Serial1( &sercom0, PIN_SERIAL1_RX, PIN_SERIAL1_TX, PAD_SERIAL1_RX, PAD_SERIAL1_TX ) ;
    21ea:	0039      	movs	r1, r7
    21ec:	9600      	str	r6, [sp, #0]
    21ee:	0023      	movs	r3, r4
    21f0:	9401      	str	r4, [sp, #4]
    21f2:	2200      	movs	r2, #0
    21f4:	4811      	ldr	r0, [pc, #68]	; (223c <_GLOBAL__sub_I_g_APinDescription+0x8c>)
    21f6:	f7fe fa63 	bl	6c0 <_ZN4UartC1EP6SERCOMhh11SercomRXPad15SercomUartTXPad>
Uart Serial( &sercom5, PIN_SERIAL_RX, PIN_SERIAL_TX, PAD_SERIAL_RX, PAD_SERIAL_TX ) ;
    21fa:	9600      	str	r6, [sp, #0]
    21fc:	0029      	movs	r1, r5
    21fe:	9401      	str	r4, [sp, #4]
    2200:	231e      	movs	r3, #30
    2202:	221f      	movs	r2, #31
    2204:	480e      	ldr	r0, [pc, #56]	; (2240 <_GLOBAL__sub_I_g_APinDescription+0x90>)
    2206:	f7fe fa5b 	bl	6c0 <_ZN4UartC1EP6SERCOMhh11SercomRXPad15SercomUartTXPad>
}
    220a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    220c:	20000b60 	.word	0x20000b60
    2210:	42000800 	.word	0x42000800
    2214:	42000c00 	.word	0x42000c00
    2218:	20000b64 	.word	0x20000b64
    221c:	42001000 	.word	0x42001000
    2220:	20000b68 	.word	0x20000b68
    2224:	42001400 	.word	0x42001400
    2228:	20000b6c 	.word	0x20000b6c
    222c:	42001800 	.word	0x42001800
    2230:	20000b70 	.word	0x20000b70
    2234:	20000b74 	.word	0x20000b74
    2238:	42001c00 	.word	0x42001c00
    223c:	20000924 	.word	0x20000924
    2240:	200006e8 	.word	0x200006e8

00002244 <_Znwj>:
    2244:	b510      	push	{r4, lr}
    2246:	f000 f9dd 	bl	2604 <malloc>
    224a:	bd10      	pop	{r4, pc}

0000224c <_ZdlPv>:
    224c:	b510      	push	{r4, lr}
    224e:	f000 f9e3 	bl	2618 <free>
    2252:	bd10      	pop	{r4, pc}

00002254 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
    2254:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    2256:	0006      	movs	r6, r0
    2258:	000d      	movs	r5, r1
    225a:	000c      	movs	r4, r1
    225c:	188b      	adds	r3, r1, r2
    225e:	9301      	str	r3, [sp, #4]
  size_t n = 0;
  while (size--) {
    2260:	9b01      	ldr	r3, [sp, #4]
    2262:	1b67      	subs	r7, r4, r5
    2264:	429c      	cmp	r4, r3
    2266:	d007      	beq.n	2278 <_ZN5Print5writeEPKhj+0x24>
    if (write(*buffer++)) n++;
    2268:	6833      	ldr	r3, [r6, #0]
    226a:	7821      	ldrb	r1, [r4, #0]
    226c:	681b      	ldr	r3, [r3, #0]
    226e:	0030      	movs	r0, r6
    2270:	4798      	blx	r3
    2272:	3401      	adds	r4, #1
    2274:	2800      	cmp	r0, #0
    2276:	d1f3      	bne.n	2260 <_ZN5Print5writeEPKhj+0xc>
    else break;
  }
  return n;
}
    2278:	0038      	movs	r0, r7
    227a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

0000227c <_ZN6SERCOMC1EP6Sercom>:
#define WIRE_RISE_TIME_NANOSECONDS 125
#endif

SERCOM::SERCOM(Sercom* s)
{
  sercom = s;
    227c:	6001      	str	r1, [r0, #0]
}
    227e:	4770      	bx	lr

00002280 <_ZN6SERCOM9initFrameE18SercomUartCharSize15SercomDataOrder16SercomParityMode19SercomNumberStopBit>:
    sercom->USART.BAUD.FRAC.FP   = (baudTimes8 % 8);
    sercom->USART.BAUD.FRAC.BAUD = (baudTimes8 / 8);
  }
}
void SERCOM::initFrame(SercomUartCharSize charSize, SercomDataOrder dataOrder, SercomParityMode parityMode, SercomNumberStopBit nbStopBits)
{
    2280:	b5f0      	push	{r4, r5, r6, r7, lr}
    2282:	ac05      	add	r4, sp, #20
    2284:	7825      	ldrb	r5, [r4, #0]
  //Setting the CTRLA register
  sercom->USART.CTRLA.reg |=	SERCOM_USART_CTRLA_FORM( (parityMode == SERCOM_NO_PARITY ? 0 : 1) ) |
    2286:	6804      	ldr	r4, [r0, #0]
    2288:	1e98      	subs	r0, r3, #2
    228a:	1e47      	subs	r7, r0, #1
    228c:	41b8      	sbcs	r0, r7
                dataOrder << SERCOM_USART_CTRLA_DORD_Pos;
    228e:	6826      	ldr	r6, [r4, #0]
    2290:	0792      	lsls	r2, r2, #30
  sercom->USART.CTRLA.reg |=	SERCOM_USART_CTRLA_FORM( (parityMode == SERCOM_NO_PARITY ? 0 : 1) ) |
    2292:	0600      	lsls	r0, r0, #24
                dataOrder << SERCOM_USART_CTRLA_DORD_Pos;
    2294:	4332      	orrs	r2, r6
    2296:	4302      	orrs	r2, r0

  //Setting the CTRLB register
  sercom->USART.CTRLB.reg |=	SERCOM_USART_CTRLB_CHSIZE(charSize) |
    2298:	2007      	movs	r0, #7
  sercom->USART.CTRLA.reg |=	SERCOM_USART_CTRLA_FORM( (parityMode == SERCOM_NO_PARITY ? 0 : 1) ) |
    229a:	6022      	str	r2, [r4, #0]
  sercom->USART.CTRLB.reg |=	SERCOM_USART_CTRLB_CHSIZE(charSize) |
    229c:	4001      	ands	r1, r0
                nbStopBits << SERCOM_USART_CTRLB_SBMODE_Pos |
    229e:	01ad      	lsls	r5, r5, #6
                (parityMode == SERCOM_NO_PARITY ? 0 : parityMode) << SERCOM_USART_CTRLB_PMODE_Pos; //If no parity use default value
    22a0:	6862      	ldr	r2, [r4, #4]
    22a2:	4329      	orrs	r1, r5
    22a4:	2000      	movs	r0, #0
    22a6:	2b02      	cmp	r3, #2
    22a8:	d000      	beq.n	22ac <_ZN6SERCOM9initFrameE18SercomUartCharSize15SercomDataOrder16SercomParityMode19SercomNumberStopBit+0x2c>
    22aa:	0358      	lsls	r0, r3, #13
    22ac:	4311      	orrs	r1, r2
    22ae:	4301      	orrs	r1, r0
  sercom->USART.CTRLB.reg |=	SERCOM_USART_CTRLB_CHSIZE(charSize) |
    22b0:	6061      	str	r1, [r4, #4]
}
    22b2:	bdf0      	pop	{r4, r5, r6, r7, pc}

000022b4 <_ZN6SERCOM8initPadsE15SercomUartTXPad11SercomRXPad>:

void SERCOM::initPads(SercomUartTXPad txPad, SercomRXPad rxPad)
{
    22b4:	b510      	push	{r4, lr}
  //Setting the CTRLA register
  sercom->USART.CTRLA.reg |=	SERCOM_USART_CTRLA_TXPO(txPad) |
                SERCOM_USART_CTRLA_RXPO(rxPad);
    22b6:	24c0      	movs	r4, #192	; 0xc0
  sercom->USART.CTRLA.reg |=	SERCOM_USART_CTRLA_TXPO(txPad) |
    22b8:	6803      	ldr	r3, [r0, #0]
                SERCOM_USART_CTRLA_RXPO(rxPad);
    22ba:	03a4      	lsls	r4, r4, #14
    22bc:	6818      	ldr	r0, [r3, #0]
    22be:	0512      	lsls	r2, r2, #20
    22c0:	4022      	ands	r2, r4
    22c2:	4302      	orrs	r2, r0
  sercom->USART.CTRLA.reg |=	SERCOM_USART_CTRLA_TXPO(txPad) |
    22c4:	20c0      	movs	r0, #192	; 0xc0
    22c6:	0409      	lsls	r1, r1, #16
    22c8:	0280      	lsls	r0, r0, #10
    22ca:	4001      	ands	r1, r0
                SERCOM_USART_CTRLA_RXPO(rxPad);
    22cc:	4311      	orrs	r1, r2
  sercom->USART.CTRLA.reg |=	SERCOM_USART_CTRLA_TXPO(txPad) |
    22ce:	6019      	str	r1, [r3, #0]

  // Enable Transceiver and Receiver
  sercom->USART.CTRLB.reg |= SERCOM_USART_CTRLB_TXEN | SERCOM_USART_CTRLB_RXEN ;
    22d0:	685a      	ldr	r2, [r3, #4]
    22d2:	4310      	orrs	r0, r2
    22d4:	6058      	str	r0, [r3, #4]
}
    22d6:	bd10      	pop	{r4, pc}

000022d8 <_ZN6SERCOM9resetUARTEv>:

void SERCOM::resetUART()
{
  // Start the Software Reset
  sercom->USART.CTRLA.bit.SWRST = 1 ;
    22d8:	2201      	movs	r2, #1
    22da:	6803      	ldr	r3, [r0, #0]
    22dc:	6819      	ldr	r1, [r3, #0]
    22de:	430a      	orrs	r2, r1
    22e0:	601a      	str	r2, [r3, #0]

  while ( sercom->USART.CTRLA.bit.SWRST || sercom->USART.SYNCBUSY.bit.SWRST )
    22e2:	681a      	ldr	r2, [r3, #0]
    22e4:	07d2      	lsls	r2, r2, #31
    22e6:	d4fc      	bmi.n	22e2 <_ZN6SERCOM9resetUARTEv+0xa>
    22e8:	69da      	ldr	r2, [r3, #28]
    22ea:	07d2      	lsls	r2, r2, #31
    22ec:	d4f9      	bmi.n	22e2 <_ZN6SERCOM9resetUARTEv+0xa>
  {
    // Wait for both bits Software Reset from CTRLA and SYNCBUSY coming back to 0
  }
}
    22ee:	4770      	bx	lr

000022f0 <_ZN6SERCOM10enableUARTEv>:

void SERCOM::enableUART()
{
  //Setting  the enable bit to 1
  sercom->USART.CTRLA.bit.ENABLE = 0x1u;
    22f0:	2202      	movs	r2, #2
    22f2:	6803      	ldr	r3, [r0, #0]
    22f4:	6819      	ldr	r1, [r3, #0]
    22f6:	430a      	orrs	r2, r1
    22f8:	601a      	str	r2, [r3, #0]

  //Wait for then enable bit from SYNCBUSY is equal to 0;
  while(sercom->USART.SYNCBUSY.bit.ENABLE);
    22fa:	69da      	ldr	r2, [r3, #28]
    22fc:	0792      	lsls	r2, r2, #30
    22fe:	d4fc      	bmi.n	22fa <_ZN6SERCOM10enableUARTEv+0xa>
}
    2300:	4770      	bx	lr

00002302 <_ZN6SERCOM9flushUARTEv>:
}

bool SERCOM::isDataRegisterEmptyUART()
{
  //DRE : Data Register Empty
  return sercom->USART.INTFLAG.bit.DRE;
    2302:	6803      	ldr	r3, [r0, #0]
    2304:	7e1a      	ldrb	r2, [r3, #24]
  if(isDataRegisterEmptyUART())
    2306:	07d2      	lsls	r2, r2, #31
    2308:	d402      	bmi.n	2310 <_ZN6SERCOM9flushUARTEv+0xe>
  while(!sercom->USART.INTFLAG.bit.TXC);
    230a:	7e1a      	ldrb	r2, [r3, #24]
    230c:	0792      	lsls	r2, r2, #30
    230e:	d5fc      	bpl.n	230a <_ZN6SERCOM9flushUARTEv+0x8>
}
    2310:	4770      	bx	lr

00002312 <_ZN6SERCOM15clearStatusUARTEv>:
  sercom->USART.STATUS.reg = SERCOM_USART_STATUS_RESETVALUE;
    2312:	2200      	movs	r2, #0
    2314:	6803      	ldr	r3, [r0, #0]
    2316:	835a      	strh	r2, [r3, #26]
}
    2318:	4770      	bx	lr

0000231a <_ZN6SERCOM17availableDataUARTEv>:
  return sercom->USART.INTFLAG.bit.RXC;
    231a:	6803      	ldr	r3, [r0, #0]
    231c:	7e18      	ldrb	r0, [r3, #24]
    231e:	0740      	lsls	r0, r0, #29
    2320:	0fc0      	lsrs	r0, r0, #31
}
    2322:	4770      	bx	lr

00002324 <_ZN6SERCOM11isUARTErrorEv>:
  return sercom->USART.INTFLAG.bit.ERROR;
    2324:	6803      	ldr	r3, [r0, #0]
    2326:	7e18      	ldrb	r0, [r3, #24]
    2328:	09c0      	lsrs	r0, r0, #7
}
    232a:	4770      	bx	lr

0000232c <_ZN6SERCOM20acknowledgeUARTErrorEv>:
  sercom->USART.INTFLAG.bit.ERROR = 1;
    232c:	2380      	movs	r3, #128	; 0x80
    232e:	6802      	ldr	r2, [r0, #0]
    2330:	425b      	negs	r3, r3
    2332:	7e11      	ldrb	r1, [r2, #24]
    2334:	430b      	orrs	r3, r1
    2336:	7613      	strb	r3, [r2, #24]
}
    2338:	4770      	bx	lr

0000233a <_ZN6SERCOM16isFrameErrorUARTEv>:
  return sercom->USART.STATUS.bit.FERR;
    233a:	6803      	ldr	r3, [r0, #0]
    233c:	8b58      	ldrh	r0, [r3, #26]
    233e:	0780      	lsls	r0, r0, #30
    2340:	0fc0      	lsrs	r0, r0, #31
}
    2342:	4770      	bx	lr

00002344 <_ZN6SERCOM19clearFrameErrorUARTEv>:
  sercom->USART.STATUS.bit.FERR = 1;
    2344:	2302      	movs	r3, #2
    2346:	6802      	ldr	r2, [r0, #0]
    2348:	8b51      	ldrh	r1, [r2, #26]
    234a:	430b      	orrs	r3, r1
    234c:	8353      	strh	r3, [r2, #26]
}
    234e:	4770      	bx	lr

00002350 <_ZN6SERCOM23isDataRegisterEmptyUARTEv>:
  return sercom->USART.INTFLAG.bit.DRE;
    2350:	6803      	ldr	r3, [r0, #0]
    2352:	7e18      	ldrb	r0, [r3, #24]
    2354:	07c0      	lsls	r0, r0, #31
    2356:	0fc0      	lsrs	r0, r0, #31
}
    2358:	4770      	bx	lr

0000235a <_ZN6SERCOM12readDataUARTEv>:

uint8_t SERCOM::readDataUART()
{
  return sercom->USART.DATA.bit.DATA;
    235a:	6803      	ldr	r3, [r0, #0]
    235c:	8d18      	ldrh	r0, [r3, #40]	; 0x28
    235e:	b2c0      	uxtb	r0, r0
}
    2360:	4770      	bx	lr

00002362 <_ZN6SERCOM13writeDataUARTEh>:
  return sercom->USART.INTFLAG.bit.DRE;
    2362:	6803      	ldr	r3, [r0, #0]
    2364:	7e1a      	ldrb	r2, [r3, #24]

int SERCOM::writeDataUART(uint8_t data)
{
  // Wait for data register to be empty
  while(!isDataRegisterEmptyUART());
    2366:	07d2      	lsls	r2, r2, #31
    2368:	d5fc      	bpl.n	2364 <_ZN6SERCOM13writeDataUARTEh+0x2>

  //Put data into DATA register
  sercom->USART.DATA.reg = (uint16_t)data;
    236a:	b289      	uxth	r1, r1
  return 1;
}
    236c:	2001      	movs	r0, #1
  sercom->USART.DATA.reg = (uint16_t)data;
    236e:	8519      	strh	r1, [r3, #40]	; 0x28
}
    2370:	4770      	bx	lr

00002372 <_ZN6SERCOM36enableDataRegisterEmptyInterruptUARTEv>:

void SERCOM::enableDataRegisterEmptyInterruptUART()
{
  sercom->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
    2372:	2201      	movs	r2, #1
    2374:	6803      	ldr	r3, [r0, #0]
    2376:	759a      	strb	r2, [r3, #22]
}
    2378:	4770      	bx	lr

0000237a <_ZN6SERCOM37disableDataRegisterEmptyInterruptUARTEv>:

void SERCOM::disableDataRegisterEmptyInterruptUART()
{
  sercom->USART.INTENCLR.reg = SERCOM_USART_INTENCLR_DRE;
    237a:	2201      	movs	r2, #1
    237c:	6803      	ldr	r3, [r0, #0]
    237e:	751a      	strb	r2, [r3, #20]
}
    2380:	4770      	bx	lr
	...

00002384 <_ZN6SERCOM13initClockNVICEv>:
void SERCOM::initClockNVIC( void )
{
  uint8_t clockId = 0;
  IRQn_Type IdNvic=PendSV_IRQn ; // Dummy init to intercept potential error later

  if(sercom == SERCOM0)
    2384:	6803      	ldr	r3, [r0, #0]
    2386:	4a21      	ldr	r2, [pc, #132]	; (240c <_ZN6SERCOM13initClockNVICEv+0x88>)
{
    2388:	b530      	push	{r4, r5, lr}
  if(sercom == SERCOM0)
    238a:	4293      	cmp	r3, r2
    238c:	d011      	beq.n	23b2 <_ZN6SERCOM13initClockNVICEv+0x2e>
  {
    clockId = GCM_SERCOM0_CORE;
    IdNvic = SERCOM0_IRQn;
  }
  else if(sercom == SERCOM1)
    238e:	4a20      	ldr	r2, [pc, #128]	; (2410 <_ZN6SERCOM13initClockNVICEv+0x8c>)
    2390:	4293      	cmp	r3, r2
    2392:	d02f      	beq.n	23f4 <_ZN6SERCOM13initClockNVICEv+0x70>
  {
    clockId = GCM_SERCOM1_CORE;
    IdNvic = SERCOM1_IRQn;
  }
  else if(sercom == SERCOM2)
    2394:	4a1f      	ldr	r2, [pc, #124]	; (2414 <_ZN6SERCOM13initClockNVICEv+0x90>)
    2396:	4293      	cmp	r3, r2
    2398:	d02f      	beq.n	23fa <_ZN6SERCOM13initClockNVICEv+0x76>
  {
    clockId = GCM_SERCOM2_CORE;
    IdNvic = SERCOM2_IRQn;
  }
  else if(sercom == SERCOM3)
    239a:	4a1f      	ldr	r2, [pc, #124]	; (2418 <_ZN6SERCOM13initClockNVICEv+0x94>)
    239c:	4293      	cmp	r3, r2
    239e:	d02f      	beq.n	2400 <_ZN6SERCOM13initClockNVICEv+0x7c>
  {
    clockId = GCM_SERCOM3_CORE;
    IdNvic = SERCOM3_IRQn;
  }
  #if defined(SERCOM4)
  else if(sercom == SERCOM4)
    23a0:	4a1e      	ldr	r2, [pc, #120]	; (241c <_ZN6SERCOM13initClockNVICEv+0x98>)
    23a2:	4293      	cmp	r3, r2
    23a4:	d02f      	beq.n	2406 <_ZN6SERCOM13initClockNVICEv+0x82>
    clockId = GCM_SERCOM4_CORE;
    IdNvic = SERCOM4_IRQn;
  }
  #endif // SERCOM4
  #if defined(SERCOM5)
  else if(sercom == SERCOM5)
    23a6:	4a1e      	ldr	r2, [pc, #120]	; (2420 <_ZN6SERCOM13initClockNVICEv+0x9c>)
    23a8:	4293      	cmp	r3, r2
    23aa:	d122      	bne.n	23f2 <_ZN6SERCOM13initClockNVICEv+0x6e>
  {
    clockId = GCM_SERCOM5_CORE;
    IdNvic = SERCOM5_IRQn;
    23ac:	230e      	movs	r3, #14
    clockId = GCM_SERCOM5_CORE;
    23ae:	2219      	movs	r2, #25
    23b0:	e001      	b.n	23b6 <_ZN6SERCOM13initClockNVICEv+0x32>
    IdNvic = SERCOM0_IRQn;
    23b2:	2309      	movs	r3, #9
    clockId = GCM_SERCOM0_CORE;
    23b4:	2214      	movs	r2, #20
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    23b6:	2101      	movs	r1, #1
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    23b8:	2503      	movs	r5, #3
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    23ba:	4099      	lsls	r1, r3
    23bc:	4819      	ldr	r0, [pc, #100]	; (2424 <_ZN6SERCOM13initClockNVICEv+0xa0>)
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    23be:	24c0      	movs	r4, #192	; 0xc0
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    23c0:	6001      	str	r1, [r0, #0]
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    23c2:	0899      	lsrs	r1, r3, #2
    23c4:	402b      	ands	r3, r5
    23c6:	40ab      	lsls	r3, r5
    23c8:	35fc      	adds	r5, #252	; 0xfc
    23ca:	409d      	lsls	r5, r3
    23cc:	0089      	lsls	r1, r1, #2
    23ce:	1809      	adds	r1, r1, r0
    23d0:	00a4      	lsls	r4, r4, #2
    23d2:	5908      	ldr	r0, [r1, r4]
    23d4:	43a8      	bics	r0, r5
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
    23d6:	25c0      	movs	r5, #192	; 0xc0
    23d8:	409d      	lsls	r5, r3
    23da:	002b      	movs	r3, r5
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    23dc:	4303      	orrs	r3, r0
    23de:	510b      	str	r3, [r1, r4]
  NVIC_EnableIRQ(IdNvic);
  NVIC_SetPriority (IdNvic, SERCOM_NVIC_PRIORITY);  /* set Priority */

  //Setting clock
  GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID( clockId ) | // Generic Clock 0 (SERCOMx)
                      GCLK_CLKCTRL_GEN_GCLK0 | // Generic Clock Generator 0 is source
    23e0:	2380      	movs	r3, #128	; 0x80
    23e2:	01db      	lsls	r3, r3, #7
    23e4:	431a      	orrs	r2, r3
  GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID( clockId ) | // Generic Clock 0 (SERCOMx)
    23e6:	4b10      	ldr	r3, [pc, #64]	; (2428 <_ZN6SERCOM13initClockNVICEv+0xa4>)
    23e8:	805a      	strh	r2, [r3, #2]
                      GCLK_CLKCTRL_CLKEN ;

  while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY )
    23ea:	785a      	ldrb	r2, [r3, #1]
    23ec:	b252      	sxtb	r2, r2
    23ee:	2a00      	cmp	r2, #0
    23f0:	dbfb      	blt.n	23ea <_ZN6SERCOM13initClockNVICEv+0x66>
  {
    /* Wait for synchronization */
  }
}
    23f2:	bd30      	pop	{r4, r5, pc}
    IdNvic = SERCOM1_IRQn;
    23f4:	230a      	movs	r3, #10
    clockId = GCM_SERCOM1_CORE;
    23f6:	2215      	movs	r2, #21
    23f8:	e7dd      	b.n	23b6 <_ZN6SERCOM13initClockNVICEv+0x32>
    IdNvic = SERCOM2_IRQn;
    23fa:	230b      	movs	r3, #11
    clockId = GCM_SERCOM2_CORE;
    23fc:	2216      	movs	r2, #22
    23fe:	e7da      	b.n	23b6 <_ZN6SERCOM13initClockNVICEv+0x32>
    IdNvic = SERCOM3_IRQn;
    2400:	230c      	movs	r3, #12
    clockId = GCM_SERCOM3_CORE;
    2402:	2217      	movs	r2, #23
    2404:	e7d7      	b.n	23b6 <_ZN6SERCOM13initClockNVICEv+0x32>
    IdNvic = SERCOM4_IRQn;
    2406:	230d      	movs	r3, #13
    clockId = GCM_SERCOM4_CORE;
    2408:	2218      	movs	r2, #24
    240a:	e7d4      	b.n	23b6 <_ZN6SERCOM13initClockNVICEv+0x32>
    240c:	42000800 	.word	0x42000800
    2410:	42000c00 	.word	0x42000c00
    2414:	42001000 	.word	0x42001000
    2418:	42001400 	.word	0x42001400
    241c:	42001800 	.word	0x42001800
    2420:	42001c00 	.word	0x42001c00
    2424:	e000e100 	.word	0xe000e100
    2428:	40000c00 	.word	0x40000c00

0000242c <_ZN6SERCOM8initUARTE14SercomUartMode20SercomUartSampleRatem>:
{
    242c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    242e:	0004      	movs	r4, r0
    2430:	0016      	movs	r6, r2
    2432:	000f      	movs	r7, r1
    2434:	001d      	movs	r5, r3
  initClockNVIC();
    2436:	f7ff ffa5 	bl	2384 <_ZN6SERCOM13initClockNVICEv>
  resetUART();
    243a:	0020      	movs	r0, r4
    243c:	f7ff ff4c 	bl	22d8 <_ZN6SERCOM9resetUARTEv>
  sercom->USART.CTRLA.reg =	SERCOM_USART_CTRLA_MODE(mode) |
    2440:	221c      	movs	r2, #28
    2442:	00bb      	lsls	r3, r7, #2
    2444:	4013      	ands	r3, r2
                SERCOM_USART_CTRLA_SAMPR(sampleRate);
    2446:	0772      	lsls	r2, r6, #29
  sercom->USART.CTRLA.reg =	SERCOM_USART_CTRLA_MODE(mode) |
    2448:	6824      	ldr	r4, [r4, #0]
                SERCOM_USART_CTRLA_SAMPR(sampleRate);
    244a:	0c12      	lsrs	r2, r2, #16
  sercom->USART.CTRLA.reg =	SERCOM_USART_CTRLA_MODE(mode) |
    244c:	4313      	orrs	r3, r2
    244e:	6023      	str	r3, [r4, #0]
  sercom->USART.INTENSET.reg =	SERCOM_USART_INTENSET_RXC |  //Received complete
    2450:	2384      	movs	r3, #132	; 0x84
    2452:	75a3      	strb	r3, [r4, #22]
  if ( mode == UART_INT_CLOCK )
    2454:	2f01      	cmp	r7, #1
    2456:	d118      	bne.n	248a <_ZN6SERCOM8initUARTE14SercomUartMode20SercomUartSampleRatem+0x5e>
      sampleRateValue = 16;
    2458:	2110      	movs	r1, #16
    if (sampleRate == SAMPLE_RATE_x16) {
    245a:	2e01      	cmp	r6, #1
    245c:	d000      	beq.n	2460 <_ZN6SERCOM8initUARTE14SercomUartMode20SercomUartSampleRatem+0x34>
      sampleRateValue = 8;
    245e:	3908      	subs	r1, #8
    uint32_t baudTimes8 = (SystemCoreClock * 8) / (sampleRateValue * baudrate);
    2460:	4b0a      	ldr	r3, [pc, #40]	; (248c <_ZN6SERCOM8initUARTE14SercomUartMode20SercomUartSampleRatem+0x60>)
    2462:	4369      	muls	r1, r5
    2464:	6818      	ldr	r0, [r3, #0]
    2466:	00c0      	lsls	r0, r0, #3
    2468:	f000 f81c 	bl	24a4 <__udivsi3>
    sercom->USART.BAUD.FRAC.FP   = (baudTimes8 % 8);
    246c:	2207      	movs	r2, #7
    246e:	89a3      	ldrh	r3, [r4, #12]
    2470:	4002      	ands	r2, r0
    2472:	04db      	lsls	r3, r3, #19
    2474:	0352      	lsls	r2, r2, #13
    2476:	0cdb      	lsrs	r3, r3, #19
    2478:	4313      	orrs	r3, r2
    247a:	81a3      	strh	r3, [r4, #12]
    sercom->USART.BAUD.FRAC.BAUD = (baudTimes8 / 8);
    247c:	0403      	lsls	r3, r0, #16
    247e:	89a0      	ldrh	r0, [r4, #12]
    2480:	0cdb      	lsrs	r3, r3, #19
    2482:	0b40      	lsrs	r0, r0, #13
    2484:	0340      	lsls	r0, r0, #13
    2486:	4318      	orrs	r0, r3
    2488:	81a0      	strh	r0, [r4, #12]
}
    248a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    248c:	20000014 	.word	0x20000014

00002490 <__gnu_thumb1_case_uqi>:
    2490:	b402      	push	{r1}
    2492:	4671      	mov	r1, lr
    2494:	0849      	lsrs	r1, r1, #1
    2496:	0049      	lsls	r1, r1, #1
    2498:	5c09      	ldrb	r1, [r1, r0]
    249a:	0049      	lsls	r1, r1, #1
    249c:	448e      	add	lr, r1
    249e:	bc02      	pop	{r1}
    24a0:	4770      	bx	lr
    24a2:	46c0      	nop			; (mov r8, r8)

000024a4 <__udivsi3>:
    24a4:	2200      	movs	r2, #0
    24a6:	0843      	lsrs	r3, r0, #1
    24a8:	428b      	cmp	r3, r1
    24aa:	d374      	bcc.n	2596 <__udivsi3+0xf2>
    24ac:	0903      	lsrs	r3, r0, #4
    24ae:	428b      	cmp	r3, r1
    24b0:	d35f      	bcc.n	2572 <__udivsi3+0xce>
    24b2:	0a03      	lsrs	r3, r0, #8
    24b4:	428b      	cmp	r3, r1
    24b6:	d344      	bcc.n	2542 <__udivsi3+0x9e>
    24b8:	0b03      	lsrs	r3, r0, #12
    24ba:	428b      	cmp	r3, r1
    24bc:	d328      	bcc.n	2510 <__udivsi3+0x6c>
    24be:	0c03      	lsrs	r3, r0, #16
    24c0:	428b      	cmp	r3, r1
    24c2:	d30d      	bcc.n	24e0 <__udivsi3+0x3c>
    24c4:	22ff      	movs	r2, #255	; 0xff
    24c6:	0209      	lsls	r1, r1, #8
    24c8:	ba12      	rev	r2, r2
    24ca:	0c03      	lsrs	r3, r0, #16
    24cc:	428b      	cmp	r3, r1
    24ce:	d302      	bcc.n	24d6 <__udivsi3+0x32>
    24d0:	1212      	asrs	r2, r2, #8
    24d2:	0209      	lsls	r1, r1, #8
    24d4:	d065      	beq.n	25a2 <__udivsi3+0xfe>
    24d6:	0b03      	lsrs	r3, r0, #12
    24d8:	428b      	cmp	r3, r1
    24da:	d319      	bcc.n	2510 <__udivsi3+0x6c>
    24dc:	e000      	b.n	24e0 <__udivsi3+0x3c>
    24de:	0a09      	lsrs	r1, r1, #8
    24e0:	0bc3      	lsrs	r3, r0, #15
    24e2:	428b      	cmp	r3, r1
    24e4:	d301      	bcc.n	24ea <__udivsi3+0x46>
    24e6:	03cb      	lsls	r3, r1, #15
    24e8:	1ac0      	subs	r0, r0, r3
    24ea:	4152      	adcs	r2, r2
    24ec:	0b83      	lsrs	r3, r0, #14
    24ee:	428b      	cmp	r3, r1
    24f0:	d301      	bcc.n	24f6 <__udivsi3+0x52>
    24f2:	038b      	lsls	r3, r1, #14
    24f4:	1ac0      	subs	r0, r0, r3
    24f6:	4152      	adcs	r2, r2
    24f8:	0b43      	lsrs	r3, r0, #13
    24fa:	428b      	cmp	r3, r1
    24fc:	d301      	bcc.n	2502 <__udivsi3+0x5e>
    24fe:	034b      	lsls	r3, r1, #13
    2500:	1ac0      	subs	r0, r0, r3
    2502:	4152      	adcs	r2, r2
    2504:	0b03      	lsrs	r3, r0, #12
    2506:	428b      	cmp	r3, r1
    2508:	d301      	bcc.n	250e <__udivsi3+0x6a>
    250a:	030b      	lsls	r3, r1, #12
    250c:	1ac0      	subs	r0, r0, r3
    250e:	4152      	adcs	r2, r2
    2510:	0ac3      	lsrs	r3, r0, #11
    2512:	428b      	cmp	r3, r1
    2514:	d301      	bcc.n	251a <__udivsi3+0x76>
    2516:	02cb      	lsls	r3, r1, #11
    2518:	1ac0      	subs	r0, r0, r3
    251a:	4152      	adcs	r2, r2
    251c:	0a83      	lsrs	r3, r0, #10
    251e:	428b      	cmp	r3, r1
    2520:	d301      	bcc.n	2526 <__udivsi3+0x82>
    2522:	028b      	lsls	r3, r1, #10
    2524:	1ac0      	subs	r0, r0, r3
    2526:	4152      	adcs	r2, r2
    2528:	0a43      	lsrs	r3, r0, #9
    252a:	428b      	cmp	r3, r1
    252c:	d301      	bcc.n	2532 <__udivsi3+0x8e>
    252e:	024b      	lsls	r3, r1, #9
    2530:	1ac0      	subs	r0, r0, r3
    2532:	4152      	adcs	r2, r2
    2534:	0a03      	lsrs	r3, r0, #8
    2536:	428b      	cmp	r3, r1
    2538:	d301      	bcc.n	253e <__udivsi3+0x9a>
    253a:	020b      	lsls	r3, r1, #8
    253c:	1ac0      	subs	r0, r0, r3
    253e:	4152      	adcs	r2, r2
    2540:	d2cd      	bcs.n	24de <__udivsi3+0x3a>
    2542:	09c3      	lsrs	r3, r0, #7
    2544:	428b      	cmp	r3, r1
    2546:	d301      	bcc.n	254c <__udivsi3+0xa8>
    2548:	01cb      	lsls	r3, r1, #7
    254a:	1ac0      	subs	r0, r0, r3
    254c:	4152      	adcs	r2, r2
    254e:	0983      	lsrs	r3, r0, #6
    2550:	428b      	cmp	r3, r1
    2552:	d301      	bcc.n	2558 <__udivsi3+0xb4>
    2554:	018b      	lsls	r3, r1, #6
    2556:	1ac0      	subs	r0, r0, r3
    2558:	4152      	adcs	r2, r2
    255a:	0943      	lsrs	r3, r0, #5
    255c:	428b      	cmp	r3, r1
    255e:	d301      	bcc.n	2564 <__udivsi3+0xc0>
    2560:	014b      	lsls	r3, r1, #5
    2562:	1ac0      	subs	r0, r0, r3
    2564:	4152      	adcs	r2, r2
    2566:	0903      	lsrs	r3, r0, #4
    2568:	428b      	cmp	r3, r1
    256a:	d301      	bcc.n	2570 <__udivsi3+0xcc>
    256c:	010b      	lsls	r3, r1, #4
    256e:	1ac0      	subs	r0, r0, r3
    2570:	4152      	adcs	r2, r2
    2572:	08c3      	lsrs	r3, r0, #3
    2574:	428b      	cmp	r3, r1
    2576:	d301      	bcc.n	257c <__udivsi3+0xd8>
    2578:	00cb      	lsls	r3, r1, #3
    257a:	1ac0      	subs	r0, r0, r3
    257c:	4152      	adcs	r2, r2
    257e:	0883      	lsrs	r3, r0, #2
    2580:	428b      	cmp	r3, r1
    2582:	d301      	bcc.n	2588 <__udivsi3+0xe4>
    2584:	008b      	lsls	r3, r1, #2
    2586:	1ac0      	subs	r0, r0, r3
    2588:	4152      	adcs	r2, r2
    258a:	0843      	lsrs	r3, r0, #1
    258c:	428b      	cmp	r3, r1
    258e:	d301      	bcc.n	2594 <__udivsi3+0xf0>
    2590:	004b      	lsls	r3, r1, #1
    2592:	1ac0      	subs	r0, r0, r3
    2594:	4152      	adcs	r2, r2
    2596:	1a41      	subs	r1, r0, r1
    2598:	d200      	bcs.n	259c <__udivsi3+0xf8>
    259a:	4601      	mov	r1, r0
    259c:	4152      	adcs	r2, r2
    259e:	4610      	mov	r0, r2
    25a0:	4770      	bx	lr
    25a2:	e7ff      	b.n	25a4 <__udivsi3+0x100>
    25a4:	b501      	push	{r0, lr}
    25a6:	2000      	movs	r0, #0
    25a8:	f000 f806 	bl	25b8 <__aeabi_idiv0>
    25ac:	bd02      	pop	{r1, pc}
    25ae:	46c0      	nop			; (mov r8, r8)

000025b0 <__aeabi_uidivmod>:
    25b0:	2900      	cmp	r1, #0
    25b2:	d0f7      	beq.n	25a4 <__udivsi3+0x100>
    25b4:	e776      	b.n	24a4 <__udivsi3>
    25b6:	4770      	bx	lr

000025b8 <__aeabi_idiv0>:
    25b8:	4770      	bx	lr
    25ba:	46c0      	nop			; (mov r8, r8)

000025bc <__libc_init_array>:
    25bc:	b570      	push	{r4, r5, r6, lr}
    25be:	2600      	movs	r6, #0
    25c0:	4d0c      	ldr	r5, [pc, #48]	; (25f4 <__libc_init_array+0x38>)
    25c2:	4c0d      	ldr	r4, [pc, #52]	; (25f8 <__libc_init_array+0x3c>)
    25c4:	1b64      	subs	r4, r4, r5
    25c6:	10a4      	asrs	r4, r4, #2
    25c8:	42a6      	cmp	r6, r4
    25ca:	d109      	bne.n	25e0 <__libc_init_array+0x24>
    25cc:	2600      	movs	r6, #0
    25ce:	f000 f911 	bl	27f4 <_init>
    25d2:	4d0a      	ldr	r5, [pc, #40]	; (25fc <__libc_init_array+0x40>)
    25d4:	4c0a      	ldr	r4, [pc, #40]	; (2600 <__libc_init_array+0x44>)
    25d6:	1b64      	subs	r4, r4, r5
    25d8:	10a4      	asrs	r4, r4, #2
    25da:	42a6      	cmp	r6, r4
    25dc:	d105      	bne.n	25ea <__libc_init_array+0x2e>
    25de:	bd70      	pop	{r4, r5, r6, pc}
    25e0:	00b3      	lsls	r3, r6, #2
    25e2:	58eb      	ldr	r3, [r5, r3]
    25e4:	4798      	blx	r3
    25e6:	3601      	adds	r6, #1
    25e8:	e7ee      	b.n	25c8 <__libc_init_array+0xc>
    25ea:	00b3      	lsls	r3, r6, #2
    25ec:	58eb      	ldr	r3, [r5, r3]
    25ee:	4798      	blx	r3
    25f0:	3601      	adds	r6, #1
    25f2:	e7f2      	b.n	25da <__libc_init_array+0x1e>
    25f4:	2000007c 	.word	0x2000007c
    25f8:	2000007c 	.word	0x2000007c
    25fc:	2000007c 	.word	0x2000007c
    2600:	2000008c 	.word	0x2000008c

00002604 <malloc>:
    2604:	b510      	push	{r4, lr}
    2606:	4b03      	ldr	r3, [pc, #12]	; (2614 <malloc+0x10>)
    2608:	0001      	movs	r1, r0
    260a:	6818      	ldr	r0, [r3, #0]
    260c:	f000 f86a 	bl	26e4 <_malloc_r>
    2610:	bd10      	pop	{r4, pc}
    2612:	46c0      	nop			; (mov r8, r8)
    2614:	20000018 	.word	0x20000018

00002618 <free>:
    2618:	b510      	push	{r4, lr}
    261a:	4b03      	ldr	r3, [pc, #12]	; (2628 <free+0x10>)
    261c:	0001      	movs	r1, r0
    261e:	6818      	ldr	r0, [r3, #0]
    2620:	f000 f816 	bl	2650 <_free_r>
    2624:	bd10      	pop	{r4, pc}
    2626:	46c0      	nop			; (mov r8, r8)
    2628:	20000018 	.word	0x20000018

0000262c <memcpy>:
    262c:	2300      	movs	r3, #0
    262e:	b510      	push	{r4, lr}
    2630:	429a      	cmp	r2, r3
    2632:	d100      	bne.n	2636 <memcpy+0xa>
    2634:	bd10      	pop	{r4, pc}
    2636:	5ccc      	ldrb	r4, [r1, r3]
    2638:	54c4      	strb	r4, [r0, r3]
    263a:	3301      	adds	r3, #1
    263c:	e7f8      	b.n	2630 <memcpy+0x4>

0000263e <memset>:
    263e:	0003      	movs	r3, r0
    2640:	1882      	adds	r2, r0, r2
    2642:	4293      	cmp	r3, r2
    2644:	d100      	bne.n	2648 <memset+0xa>
    2646:	4770      	bx	lr
    2648:	7019      	strb	r1, [r3, #0]
    264a:	3301      	adds	r3, #1
    264c:	e7f9      	b.n	2642 <memset+0x4>
	...

00002650 <_free_r>:
    2650:	b570      	push	{r4, r5, r6, lr}
    2652:	0005      	movs	r5, r0
    2654:	2900      	cmp	r1, #0
    2656:	d010      	beq.n	267a <_free_r+0x2a>
    2658:	1f0c      	subs	r4, r1, #4
    265a:	6823      	ldr	r3, [r4, #0]
    265c:	2b00      	cmp	r3, #0
    265e:	da00      	bge.n	2662 <_free_r+0x12>
    2660:	18e4      	adds	r4, r4, r3
    2662:	0028      	movs	r0, r5
    2664:	f000 f8b5 	bl	27d2 <__malloc_lock>
    2668:	4a1d      	ldr	r2, [pc, #116]	; (26e0 <_free_r+0x90>)
    266a:	6813      	ldr	r3, [r2, #0]
    266c:	2b00      	cmp	r3, #0
    266e:	d105      	bne.n	267c <_free_r+0x2c>
    2670:	6063      	str	r3, [r4, #4]
    2672:	6014      	str	r4, [r2, #0]
    2674:	0028      	movs	r0, r5
    2676:	f000 f8ad 	bl	27d4 <__malloc_unlock>
    267a:	bd70      	pop	{r4, r5, r6, pc}
    267c:	42a3      	cmp	r3, r4
    267e:	d909      	bls.n	2694 <_free_r+0x44>
    2680:	6821      	ldr	r1, [r4, #0]
    2682:	1860      	adds	r0, r4, r1
    2684:	4283      	cmp	r3, r0
    2686:	d1f3      	bne.n	2670 <_free_r+0x20>
    2688:	6818      	ldr	r0, [r3, #0]
    268a:	685b      	ldr	r3, [r3, #4]
    268c:	1841      	adds	r1, r0, r1
    268e:	6021      	str	r1, [r4, #0]
    2690:	e7ee      	b.n	2670 <_free_r+0x20>
    2692:	0013      	movs	r3, r2
    2694:	685a      	ldr	r2, [r3, #4]
    2696:	2a00      	cmp	r2, #0
    2698:	d001      	beq.n	269e <_free_r+0x4e>
    269a:	42a2      	cmp	r2, r4
    269c:	d9f9      	bls.n	2692 <_free_r+0x42>
    269e:	6819      	ldr	r1, [r3, #0]
    26a0:	1858      	adds	r0, r3, r1
    26a2:	42a0      	cmp	r0, r4
    26a4:	d10b      	bne.n	26be <_free_r+0x6e>
    26a6:	6820      	ldr	r0, [r4, #0]
    26a8:	1809      	adds	r1, r1, r0
    26aa:	1858      	adds	r0, r3, r1
    26ac:	6019      	str	r1, [r3, #0]
    26ae:	4282      	cmp	r2, r0
    26b0:	d1e0      	bne.n	2674 <_free_r+0x24>
    26b2:	6810      	ldr	r0, [r2, #0]
    26b4:	6852      	ldr	r2, [r2, #4]
    26b6:	1841      	adds	r1, r0, r1
    26b8:	6019      	str	r1, [r3, #0]
    26ba:	605a      	str	r2, [r3, #4]
    26bc:	e7da      	b.n	2674 <_free_r+0x24>
    26be:	42a0      	cmp	r0, r4
    26c0:	d902      	bls.n	26c8 <_free_r+0x78>
    26c2:	230c      	movs	r3, #12
    26c4:	602b      	str	r3, [r5, #0]
    26c6:	e7d5      	b.n	2674 <_free_r+0x24>
    26c8:	6821      	ldr	r1, [r4, #0]
    26ca:	1860      	adds	r0, r4, r1
    26cc:	4282      	cmp	r2, r0
    26ce:	d103      	bne.n	26d8 <_free_r+0x88>
    26d0:	6810      	ldr	r0, [r2, #0]
    26d2:	6852      	ldr	r2, [r2, #4]
    26d4:	1841      	adds	r1, r0, r1
    26d6:	6021      	str	r1, [r4, #0]
    26d8:	6062      	str	r2, [r4, #4]
    26da:	605c      	str	r4, [r3, #4]
    26dc:	e7ca      	b.n	2674 <_free_r+0x24>
    26de:	46c0      	nop			; (mov r8, r8)
    26e0:	20000b78 	.word	0x20000b78

000026e4 <_malloc_r>:
    26e4:	2303      	movs	r3, #3
    26e6:	b570      	push	{r4, r5, r6, lr}
    26e8:	1ccd      	adds	r5, r1, #3
    26ea:	439d      	bics	r5, r3
    26ec:	3508      	adds	r5, #8
    26ee:	0006      	movs	r6, r0
    26f0:	2d0c      	cmp	r5, #12
    26f2:	d21e      	bcs.n	2732 <_malloc_r+0x4e>
    26f4:	250c      	movs	r5, #12
    26f6:	42a9      	cmp	r1, r5
    26f8:	d81d      	bhi.n	2736 <_malloc_r+0x52>
    26fa:	0030      	movs	r0, r6
    26fc:	f000 f869 	bl	27d2 <__malloc_lock>
    2700:	4a25      	ldr	r2, [pc, #148]	; (2798 <_malloc_r+0xb4>)
    2702:	6814      	ldr	r4, [r2, #0]
    2704:	0021      	movs	r1, r4
    2706:	2900      	cmp	r1, #0
    2708:	d119      	bne.n	273e <_malloc_r+0x5a>
    270a:	4c24      	ldr	r4, [pc, #144]	; (279c <_malloc_r+0xb8>)
    270c:	6823      	ldr	r3, [r4, #0]
    270e:	2b00      	cmp	r3, #0
    2710:	d103      	bne.n	271a <_malloc_r+0x36>
    2712:	0030      	movs	r0, r6
    2714:	f000 f844 	bl	27a0 <_sbrk_r>
    2718:	6020      	str	r0, [r4, #0]
    271a:	0029      	movs	r1, r5
    271c:	0030      	movs	r0, r6
    271e:	f000 f83f 	bl	27a0 <_sbrk_r>
    2722:	1c43      	adds	r3, r0, #1
    2724:	d12c      	bne.n	2780 <_malloc_r+0x9c>
    2726:	230c      	movs	r3, #12
    2728:	0030      	movs	r0, r6
    272a:	6033      	str	r3, [r6, #0]
    272c:	f000 f852 	bl	27d4 <__malloc_unlock>
    2730:	e003      	b.n	273a <_malloc_r+0x56>
    2732:	2d00      	cmp	r5, #0
    2734:	dadf      	bge.n	26f6 <_malloc_r+0x12>
    2736:	230c      	movs	r3, #12
    2738:	6033      	str	r3, [r6, #0]
    273a:	2000      	movs	r0, #0
    273c:	bd70      	pop	{r4, r5, r6, pc}
    273e:	680b      	ldr	r3, [r1, #0]
    2740:	1b5b      	subs	r3, r3, r5
    2742:	d41a      	bmi.n	277a <_malloc_r+0x96>
    2744:	2b0b      	cmp	r3, #11
    2746:	d903      	bls.n	2750 <_malloc_r+0x6c>
    2748:	600b      	str	r3, [r1, #0]
    274a:	18cc      	adds	r4, r1, r3
    274c:	6025      	str	r5, [r4, #0]
    274e:	e003      	b.n	2758 <_malloc_r+0x74>
    2750:	428c      	cmp	r4, r1
    2752:	d10e      	bne.n	2772 <_malloc_r+0x8e>
    2754:	6863      	ldr	r3, [r4, #4]
    2756:	6013      	str	r3, [r2, #0]
    2758:	0030      	movs	r0, r6
    275a:	f000 f83b 	bl	27d4 <__malloc_unlock>
    275e:	0020      	movs	r0, r4
    2760:	2207      	movs	r2, #7
    2762:	300b      	adds	r0, #11
    2764:	1d23      	adds	r3, r4, #4
    2766:	4390      	bics	r0, r2
    2768:	1ac3      	subs	r3, r0, r3
    276a:	d0e7      	beq.n	273c <_malloc_r+0x58>
    276c:	425a      	negs	r2, r3
    276e:	50e2      	str	r2, [r4, r3]
    2770:	e7e4      	b.n	273c <_malloc_r+0x58>
    2772:	684b      	ldr	r3, [r1, #4]
    2774:	6063      	str	r3, [r4, #4]
    2776:	000c      	movs	r4, r1
    2778:	e7ee      	b.n	2758 <_malloc_r+0x74>
    277a:	000c      	movs	r4, r1
    277c:	6849      	ldr	r1, [r1, #4]
    277e:	e7c2      	b.n	2706 <_malloc_r+0x22>
    2780:	2303      	movs	r3, #3
    2782:	1cc4      	adds	r4, r0, #3
    2784:	439c      	bics	r4, r3
    2786:	42a0      	cmp	r0, r4
    2788:	d0e0      	beq.n	274c <_malloc_r+0x68>
    278a:	1a21      	subs	r1, r4, r0
    278c:	0030      	movs	r0, r6
    278e:	f000 f807 	bl	27a0 <_sbrk_r>
    2792:	1c43      	adds	r3, r0, #1
    2794:	d1da      	bne.n	274c <_malloc_r+0x68>
    2796:	e7c6      	b.n	2726 <_malloc_r+0x42>
    2798:	20000b78 	.word	0x20000b78
    279c:	20000b7c 	.word	0x20000b7c

000027a0 <_sbrk_r>:
    27a0:	2300      	movs	r3, #0
    27a2:	b570      	push	{r4, r5, r6, lr}
    27a4:	4c06      	ldr	r4, [pc, #24]	; (27c0 <_sbrk_r+0x20>)
    27a6:	0005      	movs	r5, r0
    27a8:	0008      	movs	r0, r1
    27aa:	6023      	str	r3, [r4, #0]
    27ac:	f000 f814 	bl	27d8 <_sbrk>
    27b0:	1c43      	adds	r3, r0, #1
    27b2:	d103      	bne.n	27bc <_sbrk_r+0x1c>
    27b4:	6823      	ldr	r3, [r4, #0]
    27b6:	2b00      	cmp	r3, #0
    27b8:	d000      	beq.n	27bc <_sbrk_r+0x1c>
    27ba:	602b      	str	r3, [r5, #0]
    27bc:	bd70      	pop	{r4, r5, r6, pc}
    27be:	46c0      	nop			; (mov r8, r8)
    27c0:	20000b84 	.word	0x20000b84

000027c4 <strlen>:
    27c4:	2300      	movs	r3, #0
    27c6:	5cc2      	ldrb	r2, [r0, r3]
    27c8:	3301      	adds	r3, #1
    27ca:	2a00      	cmp	r2, #0
    27cc:	d1fb      	bne.n	27c6 <strlen+0x2>
    27ce:	1e58      	subs	r0, r3, #1
    27d0:	4770      	bx	lr

000027d2 <__malloc_lock>:
    27d2:	4770      	bx	lr

000027d4 <__malloc_unlock>:
    27d4:	4770      	bx	lr
	...

000027d8 <_sbrk>:
    27d8:	4a04      	ldr	r2, [pc, #16]	; (27ec <_sbrk+0x14>)
    27da:	6813      	ldr	r3, [r2, #0]
    27dc:	2b00      	cmp	r3, #0
    27de:	d003      	beq.n	27e8 <_sbrk+0x10>
    27e0:	1818      	adds	r0, r3, r0
    27e2:	6010      	str	r0, [r2, #0]
    27e4:	0018      	movs	r0, r3
    27e6:	4770      	bx	lr
    27e8:	4b01      	ldr	r3, [pc, #4]	; (27f0 <_sbrk+0x18>)
    27ea:	e7f9      	b.n	27e0 <_sbrk+0x8>
    27ec:	20000b80 	.word	0x20000b80
    27f0:	20000b88 	.word	0x20000b88

000027f4 <_init>:
    27f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    27f6:	46c0      	nop			; (mov r8, r8)
    27f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
    27fa:	bc08      	pop	{r3}
    27fc:	469e      	mov	lr, r3
    27fe:	4770      	bx	lr

00002800 <_fini>:
    2800:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2802:	46c0      	nop			; (mov r8, r8)
    2804:	bcf8      	pop	{r3, r4, r5, r6, r7}
    2806:	bc08      	pop	{r3}
    2808:	469e      	mov	lr, r3
    280a:	4770      	bx	lr

0000280c <_ZTV4Uart>:
	...
    2814:	0865 0000 2255 0000 078b 0000 0747 0000     e...U"......G...
    2824:	0761 0000 0919 0000 0529 0000 0519 0000     a.......).......
    2834:	05ad 0000 0543 0000 0515 0000               ....C.......

00002840 <_ZTV7Serial_>:
	...
    2848:	0a09 0000 0c49 0000 0a05 0000 0c2d 0000     ....I.......-...
    2858:	0c0d 0000 0c85 0000 0c69 0000 0c3b 0000     ........i...;...
    2868:	0a1d 0000 0965 0000 0b55 0000 099d 0000     ....e...U.......
    2878:	09f1 0000 fff0 ffff 0000 0000 0bfd 0000     ................
    2888:	0b45 0000 0969 0000 09f5 0000 09e1 0000     E...i...........

00002898 <_ZTV26DoubleBufferedEPOutHandler>:
	...
    28a0:	0ffd 0000 12b3 0000 129b 0000 1279 0000     ............y...
    28b0:	0e61 0000 0e63 0000 0f51 0000               a...c...Q...

000028bc <_ZL14STRING_PRODUCT>:
    28bc:	7241 7564 6e69 206f 655a 6f72 0000          Arduino Zero..

000028ca <_ZL15STRING_LANGUAGE>:
    28ca:	0304 0409                                   ....

000028ce <_ZL19STRING_MANUFACTURER>:
    28ce:	7241 7564 6e69 206f 4c4c 0043               Arduino LLC.

000028da <_ZL21USB_DeviceDescriptorB>:
    28da:	0112 0200 02ef 4001 2341 804d 0100 0201     .......@A#M.....
    28ea:	0103                                        ..

000028ec <g_APinDescription>:
    28ec:	0000 0000 000b 0000 0002 0000 0004 0000     ................
    28fc:	00ff ffff ffff 000b 0000 0000 000a 0000     ................
    290c:	0002 0000 0004 0000 00ff ffff ffff 000a     ................
    291c:	0000 0000 000e 0000 0008 0000 0004 0000     ................
    292c:	00ff ffff ffff 000e 0000 0000 0009 0000     ................
    293c:	0004 0000 001c 0000 00ff 0001 0001 0009     ................
    294c:	0000 0000 0008 0000 0004 0000 001c 0000     ................
    295c:	00ff 0000 0000 0010 0000 0000 000f 0000     ................
    296c:	0004 0000 001c 0000 00ff 0301 0301 000f     ................
    297c:	0000 0000 0014 0000 0005 0000 002c 0000     ............,...
    298c:	00ff 0002 0002 0004 0000 0000 0015 0000     ................
    299c:	0005 0000 002c 0000 00ff 0003 0003 0005     ....,...........
    29ac:	0000 0000 0006 0000 0004 0000 001c 0000     ................
    29bc:	00ff 0100 0100 0006 0000 0000 0007 0000     ................
    29cc:	0004 0000 001c 0000 00ff 0101 0101 0007     ................
    29dc:	0000 0000 0012 0000 0004 0000 001c 0000     ................
    29ec:	00ff 0300 0300 0002 0000 0000 0010 0000     ................
    29fc:	0004 0000 001c 0000 00ff 0200 0200 0000     ................
    2a0c:	0000 0000 0013 0000 0005 0000 002c 0000     ............,...
    2a1c:	00ff 0003 0003 0003 0000 0000 0011 0000     ................
    2a2c:	0004 0000 001c 0000 00ff 0201 0201 0001     ................
    2a3c:	0000 0000 0002 0000 0001 0000 0002 0000     ................
    2a4c:	0000 ffff ffff 0002 0001 0000 0008 0000     ................
    2a5c:	0001 0000 0018 0000 0002 0400 0400 0008     ................
    2a6c:	0001 0000 0009 0000 0001 0000 0018 0000     ................
    2a7c:	0003 0401 0401 0009 0000 0000 0004 0000     ................
    2a8c:	0001 0000 0000 0000 0004 ffff ffff 0004     ................
    2a9c:	0000 0000 0005 0000 0001 0000 0000 0000     ................
    2aac:	0005 ffff ffff 0005 0001 0000 0002 0000     ................
    2abc:	0001 0000 0000 0000 000a ffff ffff 0002     ................
    2acc:	0000 0000 0016 0000 0002 0000 0004 0000     ................
    2adc:	00ff ffff ffff 0006 0000 0000 0017 0000     ................
    2aec:	0002 0000 0004 0000 00ff ffff ffff 0007     ................
    2afc:	0000 0000 000c 0000 0003 0000 0004 0000     ................
    2b0c:	00ff ffff ffff 000c 0001 0000 000a 0000     ................
    2b1c:	0003 0000 0004 0000 00ff ffff ffff 000a     ................
    2b2c:	0001 0000 000b 0000 0003 0000 0004 0000     ................
    2b3c:	00ff ffff ffff 000b 0001 0000 0003 0000     ................
    2b4c:	000b 0000 0004 0000 00ff ffff ffff 00ff     ................
    2b5c:	0000 0000 001b 0000 000b 0000 0004 0000     ................
    2b6c:	00ff ffff ffff 00ff 0000 0000 001c 0000     ................
    2b7c:	0006 0000 0000 0000 00ff ffff ffff 00ff     ................
    2b8c:	0000 0000 0018 0000 0006 0000 0000 0000     ................
    2b9c:	00ff ffff ffff 00ff 0000 0000 0019 0000     ................
    2bac:	0006 0000 0000 0000 00ff ffff ffff 00ff     ................
    2bbc:	0001 0000 0016 0000 0003 0000 0000 0000     ................
    2bcc:	00ff ffff ffff 00ff 0001 0000 0017 0000     ................
    2bdc:	0003 0000 0000 0000 00ff ffff ffff 00ff     ................
    2bec:	0000 0000 0016 0000 0002 0000 0000 0000     ................
    2bfc:	00ff ffff ffff 00ff 0000 0000 0017 0000     ................
    2c0c:	0002 0000 0000 0000 00ff ffff ffff 00ff     ................
    2c1c:	0000 0000 0013 0000 0002 0000 0000 0000     ................
    2c2c:	00ff ffff ffff 00ff 0000 0000 0010 0000     ................
    2c3c:	0002 0000 0000 0000 00ff ffff ffff 00ff     ................
    2c4c:	0000 0000 0012 0000 0002 0000 0000 0000     ................
    2c5c:	00ff ffff ffff 00ff 0000 0000 0011 0000     ................
    2c6c:	0002 0000 0000 0000 00ff ffff ffff 00ff     ................
    2c7c:	0000 0000 000d 0000 0004 0000 000c 0000     ................
    2c8c:	00ff 0001 ffff 000d 0000 0000 0015 0000     ................
    2c9c:	0005 0000 000c 0000 00ff 0003 ffff 00ff     ................
    2cac:	0000 0000 0006 0000 0004 0000 000c 0000     ................
    2cbc:	00ff 0100 ffff 00ff 0000 0000 0007 0000     ................
    2ccc:	0004 0000 000c 0000 00ff 0101 ffff 00ff     ................
    2cdc:	0000 0000 0003 0000 0001 0000 0002 0000     ................
    2cec:	00ff ffff ffff 00ff 0000 0000 0002 0000     ................
    2cfc:	0001 0000 0002 0000 0014 ffff ffff 0002     ................
    2d0c:	0000 0000 001e 0000 0004 0000 0006 0000     ................
    2d1c:	00ff ffff 0100 000a 0000 0000 001f 0000     ................
    2d2c:	0004 0000 0006 0000 00ff ffff 0101 000b     ................

00002d3c <__EH_FRAME_BEGIN__>:
    2d3c:	0000 0000                                   ....
