
MultiSerial2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002da0  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000a0  20000000  00002da0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000ae8  200000a0  00002e40  000200a0  2**2
                  ALLOC
  3 .ARM.attributes 00000028  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY
  4 .comment      00000059  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY
  5 .debug_info   00054102  00000000  00000000  00020121  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00005f38  00000000  00000000  00074223  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_loc    000077d3  00000000  00000000  0007a15b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_aranges 00000910  00000000  00000000  0008192e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00001388  00000000  00000000  0008223e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_macro  0001fa5e  00000000  00000000  000835c6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000d220  00000000  00000000  000a3024  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00084c97  00000000  00000000  000b0244  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  000017f0  00000000  00000000  00134edc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:

void *operator new(size_t size) {
  return malloc(size);
}

void *operator new[](size_t size) {
       0:	00 80 00 20 cd 01 00 00 b5 01 00 00 b5 01 00 00     ... ............
	...
      2c:	b5 01 00 00 00 00 00 00 00 00 00 00 b5 01 00 00     ................
      3c:	21 02 00 00 b5 01 00 00 b5 01 00 00 b5 01 00 00     !...............
      4c:	b5 01 00 00 b5 01 00 00 b5 01 00 00 b5 01 00 00     ................
      5c:	b9 01 00 00 b5 01 00 00 0d 22 00 00 b5 01 00 00     ........."......
      6c:	b5 01 00 00 b5 01 00 00 b5 01 00 00 1d 22 00 00     ............."..
      7c:	b5 01 00 00 b5 01 00 00 b5 01 00 00 b5 01 00 00     ................
      8c:	b5 01 00 00 00 00 00 00 b5 01 00 00 b5 01 00 00     ................
      9c:	b5 01 00 00 b5 01 00 00 b5 01 00 00 b5 01 00 00     ................
      ac:	b5 01 00 00 00 00 00 00                             ........

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	200000a0 	.word	0x200000a0
      d4:	00000000 	.word	0x00000000
      d8:	00002d9c 	.word	0x00002d9c

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	200000a4 	.word	0x200000a4
     108:	00002d9c 	.word	0x00002d9c
     10c:	20000090 	.word	0x20000090
     110:	00000000 	.word	0x00000000

00000114 <setup>:

  This example code is in the public domain.
*/


void setup() {
     114:	b510      	push	{r4, lr}
  // initialize both serial ports:
  Serial.begin(9600);
     116:	2496      	movs	r4, #150	; 0x96
     118:	01a4      	lsls	r4, r4, #6
     11a:	0021      	movs	r1, r4
     11c:	4805      	ldr	r0, [pc, #20]	; (134 <setup+0x20>)
     11e:	f000 fa39 	bl	594 <_ZN4Uart5beginEm>
  Serial1.begin(9600);
     122:	0021      	movs	r1, r4
     124:	4804      	ldr	r0, [pc, #16]	; (138 <setup+0x24>)
     126:	f000 fa35 	bl	594 <_ZN4Uart5beginEm>
  SerialUSB.begin(9600);
     12a:	0021      	movs	r1, r4
     12c:	4803      	ldr	r0, [pc, #12]	; (13c <setup+0x28>)
     12e:	f000 fe39 	bl	da4 <_ZN7Serial_5beginEm>
}
     132:	bd10      	pop	{r4, pc}
     134:	200006e8 	.word	0x200006e8
     138:	20000924 	.word	0x20000924
     13c:	200000c4 	.word	0x200000c4

00000140 <loop>:

void loop() {
     140:	b570      	push	{r4, r5, r6, lr}
  // read from port 1, send to port 0:
  if (Serial1.available()) {
     142:	4c18      	ldr	r4, [pc, #96]	; (1a4 <loop+0x64>)
     144:	0020      	movs	r0, r4
     146:	f000 fb49 	bl	7dc <_ZN4Uart9availableEv>
     14a:	4d17      	ldr	r5, [pc, #92]	; (1a8 <loop+0x68>)
     14c:	2800      	cmp	r0, #0
     14e:	d006      	beq.n	15e <loop+0x1e>
    int inByte = Serial1.read();
     150:	0020      	movs	r0, r4
     152:	f000 fc1f 	bl	994 <_ZN4Uart4readEv>
    Serial.write(inByte);
     156:	b2c1      	uxtb	r1, r0
     158:	0028      	movs	r0, r5
     15a:	f000 fbc1 	bl	8e0 <_ZN4Uart5writeEh>
  }

  // read from port 0, send to port 1:
  if (Serial.available()) {
     15e:	0028      	movs	r0, r5
     160:	f000 fb3c 	bl	7dc <_ZN4Uart9availableEv>
     164:	2800      	cmp	r0, #0
     166:	d006      	beq.n	176 <loop+0x36>
    int inByte = Serial.read();
     168:	0028      	movs	r0, r5
     16a:	f000 fc13 	bl	994 <_ZN4Uart4readEv>
    Serial1.write(inByte);
     16e:	b2c1      	uxtb	r1, r0
     170:	0020      	movs	r0, r4
     172:	f000 fbb5 	bl	8e0 <_ZN4Uart5writeEh>
  }

  if (SerialUSB.available()) {
     176:	4c0d      	ldr	r4, [pc, #52]	; (1ac <loop+0x6c>)
     178:	0020      	movs	r0, r4
     17a:	f000 fd85 	bl	c88 <_ZN7Serial_9availableEv>
     17e:	2800      	cmp	r0, #0
     180:	d00e      	beq.n	1a0 <loop+0x60>
    int inByte = SerialUSB.read();
     182:	0020      	movs	r0, r4
     184:	f000 fdbc 	bl	d00 <_ZN7Serial_4readEv>
     188:	0005      	movs	r5, r0
    delay(100);
     18a:	2064      	movs	r0, #100	; 0x64
     18c:	f000 f886 	bl	29c <delay>
    SerialUSB.write(inByte);
     190:	b2e9      	uxtb	r1, r5
     192:	0020      	movs	r0, r4
     194:	f000 fc76 	bl	a84 <_ZN7Serial_5writeEh>
    SerialUSB.println("it works");
     198:	4905      	ldr	r1, [pc, #20]	; (1b0 <loop+0x70>)
     19a:	0020      	movs	r0, r4
     19c:	f000 f8f0 	bl	380 <_ZN5Print7printlnEPKc>
  }
}
     1a0:	bd70      	pop	{r4, r5, r6, pc}
     1a2:	46c0      	nop			; (mov r8, r8)
     1a4:	20000924 	.word	0x20000924
     1a8:	200006e8 	.word	0x200006e8
     1ac:	200000c4 	.word	0x200000c4
     1b0:	00002860 	.word	0x00002860

000001b4 <Dummy_Handler>:

/* Default empty handler */
void Dummy_Handler(void)
{
#if defined DEBUG
  __BKPT(3);
     1b4:	be03      	bkpt	0x0003
     1b6:	e7fe      	b.n	1b6 <Dummy_Handler+0x2>

000001b8 <USB_Handler>:

static void (*usb_isr)(void) = NULL;

void USB_Handler(void)
{
  if (usb_isr)
     1b8:	4b03      	ldr	r3, [pc, #12]	; (1c8 <USB_Handler+0x10>)
{
     1ba:	b510      	push	{r4, lr}
  if (usb_isr)
     1bc:	681b      	ldr	r3, [r3, #0]
     1be:	2b00      	cmp	r3, #0
     1c0:	d000      	beq.n	1c4 <USB_Handler+0xc>
    usb_isr();
     1c2:	4798      	blx	r3
}
     1c4:	bd10      	pop	{r4, pc}
     1c6:	46c0      	nop			; (mov r8, r8)
     1c8:	200000bc 	.word	0x200000bc

000001cc <Reset_Handler>:
{
     1cc:	b570      	push	{r4, r5, r6, lr}
  if ((&__data_start__ != &__data_end__) && (pSrc != pDest)) {
     1ce:	490f      	ldr	r1, [pc, #60]	; (20c <Reset_Handler+0x40>)
     1d0:	4c0f      	ldr	r4, [pc, #60]	; (210 <Reset_Handler+0x44>)
     1d2:	42a1      	cmp	r1, r4
     1d4:	d104      	bne.n	1e0 <Reset_Handler+0x14>
  SystemInit();
     1d6:	f000 f92b 	bl	430 <SystemInit>
  main();
     1da:	f000 f887 	bl	2ec <main>
     1de:	e7fe      	b.n	1de <Reset_Handler+0x12>
  if ((&__data_start__ != &__data_end__) && (pSrc != pDest)) {
     1e0:	4d0c      	ldr	r5, [pc, #48]	; (214 <Reset_Handler+0x48>)
     1e2:	2300      	movs	r3, #0
     1e4:	428d      	cmp	r5, r1
     1e6:	d0f6      	beq.n	1d6 <Reset_Handler+0xa>
     1e8:	18ca      	adds	r2, r1, r3
     1ea:	18e8      	adds	r0, r5, r3
    for (; pDest < &__data_end__; pDest++, pSrc++)
     1ec:	42a2      	cmp	r2, r4
     1ee:	d305      	bcc.n	1fc <Reset_Handler+0x30>
  if ((&__data_start__ != &__data_end__) && (pSrc != pDest)) {
     1f0:	4290      	cmp	r0, r2
     1f2:	d0f0      	beq.n	1d6 <Reset_Handler+0xa>
     1f4:	4b08      	ldr	r3, [pc, #32]	; (218 <Reset_Handler+0x4c>)
    for (pDest = &__bss_start__; pDest < &__bss_end__; pDest++)
     1f6:	4909      	ldr	r1, [pc, #36]	; (21c <Reset_Handler+0x50>)
      *pDest = 0;
     1f8:	2200      	movs	r2, #0
     1fa:	e004      	b.n	206 <Reset_Handler+0x3a>
      *pDest = *pSrc;
     1fc:	6800      	ldr	r0, [r0, #0]
     1fe:	3304      	adds	r3, #4
     200:	6010      	str	r0, [r2, #0]
     202:	e7f1      	b.n	1e8 <Reset_Handler+0x1c>
      *pDest = 0;
     204:	c304      	stmia	r3!, {r2}
    for (pDest = &__bss_start__; pDest < &__bss_end__; pDest++)
     206:	428b      	cmp	r3, r1
     208:	d3fc      	bcc.n	204 <Reset_Handler+0x38>
     20a:	e7e4      	b.n	1d6 <Reset_Handler+0xa>
     20c:	20000000 	.word	0x20000000
     210:	200000a0 	.word	0x200000a0
     214:	00002da0 	.word	0x00002da0
     218:	200000a0 	.word	0x200000a0
     21c:	20000b88 	.word	0x20000b88

00000220 <SysTick_Handler>:
{
     220:	b510      	push	{r4, lr}
  if (sysTickHook())
     222:	f000 f860 	bl	2e6 <sysTickHook>
     226:	2800      	cmp	r0, #0
     228:	d101      	bne.n	22e <SysTick_Handler+0xe>
  SysTick_DefaultHandler();
     22a:	f000 f851 	bl	2d0 <SysTick_DefaultHandler>
}
     22e:	bd10      	pop	{r4, pc}

00000230 <USB_SetHandler>:

void USB_SetHandler(void (*new_usb_isr)(void))
{
  usb_isr = new_usb_isr;
     230:	4b01      	ldr	r3, [pc, #4]	; (238 <USB_SetHandler+0x8>)
     232:	6018      	str	r0, [r3, #0]
}
     234:	4770      	bx	lr
     236:	46c0      	nop			; (mov r8, r8)
     238:	200000bc 	.word	0x200000bc

0000023c <micros>:
// Interrupt-compatible version of micros
// Theory: repeatedly take readings of SysTick counter, millis counter and SysTick interrupt pending flag.
// When it appears that millis counter and pending is stable and SysTick hasn't rolled over, use these
// values to calculate micros. If there is a pending SysTick, add one to the millis counter in the calculation.
unsigned long micros( void )
{
     23c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint32_t pend, pend2;
  uint32_t count, count2;

  ticks2  = SysTick->VAL;
  pend2   = !!(SCB->ICSR & SCB_ICSR_PENDSTSET_Msk)  ;
  count2  = _ulTickCount ;
     23e:	4813      	ldr	r0, [pc, #76]	; (28c <micros+0x50>)
  pend2   = !!(SCB->ICSR & SCB_ICSR_PENDSTSET_Msk)  ;
     240:	2201      	movs	r2, #1
  count2  = _ulTickCount ;
     242:	4684      	mov	ip, r0
  ticks2  = SysTick->VAL;
     244:	4912      	ldr	r1, [pc, #72]	; (290 <micros+0x54>)
  pend2   = !!(SCB->ICSR & SCB_ICSR_PENDSTSET_Msk)  ;
     246:	4c13      	ldr	r4, [pc, #76]	; (294 <micros+0x58>)
  ticks2  = SysTick->VAL;
     248:	688e      	ldr	r6, [r1, #8]
  pend2   = !!(SCB->ICSR & SCB_ICSR_PENDSTSET_Msk)  ;
     24a:	6863      	ldr	r3, [r4, #4]
  count2  = _ulTickCount ;
     24c:	6805      	ldr	r5, [r0, #0]
  pend2   = !!(SCB->ICSR & SCB_ICSR_PENDSTSET_Msk)  ;
     24e:	0e9b      	lsrs	r3, r3, #26
     250:	4013      	ands	r3, r2
  {
    ticks=ticks2;
    pend=pend2;
    count=count2;
    ticks2  = SysTick->VAL;
    pend2   = !!(SCB->ICSR & SCB_ICSR_PENDSTSET_Msk)  ;
     252:	9201      	str	r2, [sp, #4]
    ticks2  = SysTick->VAL;
     254:	6888      	ldr	r0, [r1, #8]
    pend2   = !!(SCB->ICSR & SCB_ICSR_PENDSTSET_Msk)  ;
     256:	6862      	ldr	r2, [r4, #4]
     258:	9f01      	ldr	r7, [sp, #4]
     25a:	0e92      	lsrs	r2, r2, #26
     25c:	403a      	ands	r2, r7
    count2  = _ulTickCount ;
     25e:	4667      	mov	r7, ip
     260:	683f      	ldr	r7, [r7, #0]
  } while ((pend != pend2) || (count != count2) || (ticks < ticks2));
     262:	4293      	cmp	r3, r2
     264:	d10e      	bne.n	284 <micros+0x48>
     266:	42bd      	cmp	r5, r7
     268:	d10c      	bne.n	284 <micros+0x48>
     26a:	4286      	cmp	r6, r0
     26c:	d30a      	bcc.n	284 <micros+0x48>

  return ((count+pend) * 1000) + (((SysTick->LOAD  - ticks)*(1048576/(VARIANT_MCK/1000000)))>>20) ;
     26e:	195b      	adds	r3, r3, r5
     270:	25fa      	movs	r5, #250	; 0xfa
     272:	6848      	ldr	r0, [r1, #4]
     274:	00ad      	lsls	r5, r5, #2
     276:	1b86      	subs	r6, r0, r6
     278:	4807      	ldr	r0, [pc, #28]	; (298 <micros+0x5c>)
     27a:	436b      	muls	r3, r5
     27c:	4370      	muls	r0, r6
     27e:	0d00      	lsrs	r0, r0, #20
     280:	18c0      	adds	r0, r0, r3
  // this is an optimization to turn a runtime division into two compile-time divisions and
  // a runtime multiplication and shift, saving a few cycles
}
     282:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
{
     284:	003d      	movs	r5, r7
     286:	0013      	movs	r3, r2
     288:	0006      	movs	r6, r0
     28a:	e7e3      	b.n	254 <micros+0x18>
     28c:	200000c0 	.word	0x200000c0
     290:	e000e010 	.word	0xe000e010
     294:	e000ed00 	.word	0xe000ed00
     298:	00005555 	.word	0x00005555

0000029c <delay>:

void delay( unsigned long ms )
{
     29c:	b570      	push	{r4, r5, r6, lr}
     29e:	1e04      	subs	r4, r0, #0
  if (ms == 0)
     2a0:	d010      	beq.n	2c4 <delay+0x28>
  {
    return;
  }

  uint32_t start = micros();
     2a2:	f7ff ffcb 	bl	23c <micros>
     2a6:	0005      	movs	r5, r0

  while (ms > 0)
  {
    yield();
     2a8:	f000 f81c 	bl	2e4 <yield>
    while (ms > 0 && (micros() - start) >= 1000)
     2ac:	f7ff ffc6 	bl	23c <micros>
     2b0:	4b05      	ldr	r3, [pc, #20]	; (2c8 <delay+0x2c>)
     2b2:	1b40      	subs	r0, r0, r5
     2b4:	4298      	cmp	r0, r3
     2b6:	d9f7      	bls.n	2a8 <delay+0xc>
    {
      ms--;
      start += 1000;
     2b8:	23fa      	movs	r3, #250	; 0xfa
      ms--;
     2ba:	3c01      	subs	r4, #1
      start += 1000;
     2bc:	009b      	lsls	r3, r3, #2
     2be:	18ed      	adds	r5, r5, r3
    while (ms > 0 && (micros() - start) >= 1000)
     2c0:	2c00      	cmp	r4, #0
     2c2:	d1f3      	bne.n	2ac <delay+0x10>
    }
  }
}
     2c4:	bd70      	pop	{r4, r5, r6, pc}
     2c6:	46c0      	nop			; (mov r8, r8)
     2c8:	000003e7 	.word	0x000003e7

000002cc <resetExternalChip>:

void initiateReset(int ms);
void tickReset();
void cancelReset();

 __attribute__ ((weak)) void resetExternalChip() {};
     2cc:	4770      	bx	lr
	...

000002d0 <SysTick_DefaultHandler>:

#include "Reset.h" // for tickReset()

void SysTick_DefaultHandler(void)
{
     2d0:	b510      	push	{r4, lr}
  // Increment tick count each ms
  _ulTickCount++;
     2d2:	4a03      	ldr	r2, [pc, #12]	; (2e0 <SysTick_DefaultHandler+0x10>)
     2d4:	6813      	ldr	r3, [r2, #0]
     2d6:	3301      	adds	r3, #1
     2d8:	6013      	str	r3, [r2, #0]
  tickReset();
     2da:	f000 f86d 	bl	3b8 <tickReset>
}
     2de:	bd10      	pop	{r4, pc}
     2e0:	200000c0 	.word	0x200000c0

000002e4 <yield>:
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
	// Empty
}
     2e4:	4770      	bx	lr

000002e6 <sysTickHook>:
 * handler provided by Arduino.
 */
static int __false() {
	// Return false
	return 0;
}
     2e6:	2000      	movs	r0, #0
     2e8:	4770      	bx	lr

000002ea <_Z11initVariantv>:
#include "Arduino.h"

// Weak empty variant initialization function.
// May be redefined by variant files.
void initVariant() __attribute__((weak));
void initVariant() { }
     2ea:	4770      	bx	lr

000002ec <main>:

/*
 * \brief Main entry point of Arduino application
 */
int main( void )
{
     2ec:	b510      	push	{r4, lr}
  init();
     2ee:	f001 fe0d 	bl	1f0c <init>

  __libc_init_array();
     2f2:	f002 f98d 	bl	2610 <__libc_init_array>

  initVariant();
     2f6:	f7ff fff8 	bl	2ea <_Z11initVariantv>

  delay(1);
     2fa:	2001      	movs	r0, #1
     2fc:	f7ff ffce 	bl	29c <delay>
#if defined(USBCON)
  USBDevice.init();
     300:	4c08      	ldr	r4, [pc, #32]	; (324 <main+0x38>)
     302:	0020      	movs	r0, r4
     304:	f001 f85a 	bl	13bc <_ZN14USBDeviceClass4initEv>
  USBDevice.attach();
     308:	0020      	movs	r0, r4
     30a:	f001 f90b 	bl	1524 <_ZN14USBDeviceClass6attachEv>
#endif

  setup();
     30e:	f7ff ff01 	bl	114 <setup>

  for (;;)
  {
    loop();
     312:	f7ff ff15 	bl	140 <loop>
    if (serialEventRun) serialEventRun();
     316:	4b04      	ldr	r3, [pc, #16]	; (328 <main+0x3c>)
     318:	2b00      	cmp	r3, #0
     31a:	d0fa      	beq.n	312 <main+0x26>
     31c:	e000      	b.n	320 <main+0x34>
     31e:	bf00      	nop
     320:	e7f7      	b.n	312 <main+0x26>
     322:	46c0      	nop			; (mov r8, r8)
     324:	2000012c 	.word	0x2000012c
     328:	00000000 	.word	0x00000000

0000032c <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
     32c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
     32e:	0006      	movs	r6, r0
     330:	000d      	movs	r5, r1
     332:	000c      	movs	r4, r1
     334:	188b      	adds	r3, r1, r2
     336:	9301      	str	r3, [sp, #4]
  size_t n = 0;
  while (size--) {
     338:	9b01      	ldr	r3, [sp, #4]
     33a:	1b67      	subs	r7, r4, r5
     33c:	429c      	cmp	r4, r3
     33e:	d007      	beq.n	350 <_ZN5Print5writeEPKhj+0x24>
    if (write(*buffer++)) n++;
     340:	6833      	ldr	r3, [r6, #0]
     342:	7821      	ldrb	r1, [r4, #0]
     344:	681b      	ldr	r3, [r3, #0]
     346:	0030      	movs	r0, r6
     348:	4798      	blx	r3
     34a:	3401      	adds	r4, #1
     34c:	2800      	cmp	r0, #0
     34e:	d1f3      	bne.n	338 <_ZN5Print5writeEPKhj+0xc>
    else break;
  }
  return n;
}
     350:	0038      	movs	r0, r7
     352:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

00000354 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
     354:	b570      	push	{r4, r5, r6, lr}
     356:	0005      	movs	r5, r0
     358:	000c      	movs	r4, r1
      if (str == NULL) return 0;
     35a:	1e08      	subs	r0, r1, #0
     35c:	d007      	beq.n	36e <_ZN5Print5writeEPKc+0x1a>
      return write((const uint8_t *)str, strlen(str));
     35e:	f002 fa5b 	bl	2818 <strlen>
     362:	682b      	ldr	r3, [r5, #0]
     364:	0002      	movs	r2, r0
     366:	685b      	ldr	r3, [r3, #4]
     368:	0021      	movs	r1, r4
     36a:	0028      	movs	r0, r5
     36c:	4798      	blx	r3
    }
     36e:	bd70      	pop	{r4, r5, r6, pc}

00000370 <_ZN5Print7printlnEv>:
{
  return x.printTo(*this);
}

size_t Print::println(void)
{
     370:	b510      	push	{r4, lr}
  return write("\r\n");
     372:	4902      	ldr	r1, [pc, #8]	; (37c <_ZN5Print7printlnEv+0xc>)
     374:	f7ff ffee 	bl	354 <_ZN5Print5writeEPKc>
}
     378:	bd10      	pop	{r4, pc}
     37a:	46c0      	nop			; (mov r8, r8)
     37c:	00002869 	.word	0x00002869

00000380 <_ZN5Print7printlnEPKc>:
  n += println();
  return n;
}

size_t Print::println(const char c[])
{
     380:	b570      	push	{r4, r5, r6, lr}
     382:	0004      	movs	r4, r0
  return write(str);
     384:	f7ff ffe6 	bl	354 <_ZN5Print5writeEPKc>
     388:	0005      	movs	r5, r0
  size_t n = print(c);
  n += println();
     38a:	0020      	movs	r0, r4
     38c:	f7ff fff0 	bl	370 <_ZN5Print7printlnEv>
     390:	1940      	adds	r0, r0, r5
  return n;
}
     392:	bd70      	pop	{r4, r5, r6, pc}

00000394 <initiateReset>:
	while (true);
}

static int ticks = -1;

void initiateReset(int _ticks) {
     394:	b510      	push	{r4, lr}
     396:	0004      	movs	r4, r0
	resetExternalChip();
     398:	f7ff ff98 	bl	2cc <resetExternalChip>
	ticks = _ticks;
     39c:	4b01      	ldr	r3, [pc, #4]	; (3a4 <initiateReset+0x10>)
     39e:	601c      	str	r4, [r3, #0]
}
     3a0:	bd10      	pop	{r4, pc}
     3a2:	46c0      	nop			; (mov r8, r8)
     3a4:	20000000 	.word	0x20000000

000003a8 <cancelReset>:

void cancelReset() {
	ticks = -1;
     3a8:	2201      	movs	r2, #1
     3aa:	4b02      	ldr	r3, [pc, #8]	; (3b4 <cancelReset+0xc>)
     3ac:	4252      	negs	r2, r2
     3ae:	601a      	str	r2, [r3, #0]
}
     3b0:	4770      	bx	lr
     3b2:	46c0      	nop			; (mov r8, r8)
     3b4:	20000000 	.word	0x20000000

000003b8 <tickReset>:

void tickReset() {
	if (ticks == -1)
     3b8:	4a16      	ldr	r2, [pc, #88]	; (414 <tickReset+0x5c>)
void tickReset() {
     3ba:	b510      	push	{r4, lr}
	if (ticks == -1)
     3bc:	6813      	ldr	r3, [r2, #0]
     3be:	1c59      	adds	r1, r3, #1
     3c0:	d027      	beq.n	412 <tickReset+0x5a>
		return;
	ticks--;
     3c2:	3b01      	subs	r3, #1
     3c4:	6013      	str	r3, [r2, #0]
	if (ticks == 0)
     3c6:	2b00      	cmp	r3, #0
     3c8:	d123      	bne.n	412 <tickReset+0x5a>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
     3ca:	b672      	cpsid	i
	if (APP_START < (0x200 + 4)) {
     3cc:	4b12      	ldr	r3, [pc, #72]	; (418 <tickReset+0x60>)
     3ce:	4a13      	ldr	r2, [pc, #76]	; (41c <tickReset+0x64>)
     3d0:	3304      	adds	r3, #4
     3d2:	4293      	cmp	r3, r2
     3d4:	d808      	bhi.n	3e8 <tickReset+0x30>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
     3d6:	f3bf 8f4f 	dsb	sy
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
     3da:	4a11      	ldr	r2, [pc, #68]	; (420 <tickReset+0x68>)
     3dc:	4b11      	ldr	r3, [pc, #68]	; (424 <tickReset+0x6c>)
     3de:	60da      	str	r2, [r3, #12]
     3e0:	f3bf 8f4f 	dsb	sy
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
     3e4:	46c0      	nop			; (mov r8, r8)
     3e6:	e7fd      	b.n	3e4 <tickReset+0x2c>
        return NVMCTRL->INTFLAG.reg & NVMCTRL_INTFLAG_READY;
     3e8:	4a0f      	ldr	r2, [pc, #60]	; (428 <tickReset+0x70>)
	while (!nvmReady())
     3ea:	2101      	movs	r1, #1
     3ec:	0010      	movs	r0, r2
        return NVMCTRL->INTFLAG.reg & NVMCTRL_INTFLAG_READY;
     3ee:	7d14      	ldrb	r4, [r2, #20]
	while (!nvmReady())
     3f0:	420c      	tst	r4, r1
     3f2:	d0fc      	beq.n	3ee <tickReset+0x36>
	NVMCTRL->STATUS.reg |= NVMCTRL_STATUS_MASK;
     3f4:	2120      	movs	r1, #32
     3f6:	8b14      	ldrh	r4, [r2, #24]
     3f8:	31ff      	adds	r1, #255	; 0xff
	NVMCTRL->ADDR.reg  = (uintptr_t)&NVM_MEMORY[APP_START / 4];
     3fa:	089b      	lsrs	r3, r3, #2
     3fc:	005b      	lsls	r3, r3, #1
	NVMCTRL->STATUS.reg |= NVMCTRL_STATUS_MASK;
     3fe:	4321      	orrs	r1, r4
     400:	8311      	strh	r1, [r2, #24]
	NVMCTRL->ADDR.reg  = (uintptr_t)&NVM_MEMORY[APP_START / 4];
     402:	61d3      	str	r3, [r2, #28]
	NVMCTRL->CTRLA.reg = NVMCTRL_CTRLA_CMD_ER | NVMCTRL_CTRLA_CMDEX_KEY;
     404:	4b09      	ldr	r3, [pc, #36]	; (42c <tickReset+0x74>)
     406:	8013      	strh	r3, [r2, #0]
	while (!nvmReady())
     408:	2301      	movs	r3, #1
        return NVMCTRL->INTFLAG.reg & NVMCTRL_INTFLAG_READY;
     40a:	7d02      	ldrb	r2, [r0, #20]
	while (!nvmReady())
     40c:	421a      	tst	r2, r3
     40e:	d0fc      	beq.n	40a <tickReset+0x52>
     410:	e7e1      	b.n	3d6 <tickReset+0x1e>
		banzai();
}
     412:	bd10      	pop	{r4, pc}
     414:	20000000 	.word	0x20000000
     418:	00000000 	.word	0x00000000
     41c:	00000203 	.word	0x00000203
     420:	05fa0004 	.word	0x05fa0004
     424:	e000ed00 	.word	0xe000ed00
     428:	41004000 	.word	0x41004000
     42c:	ffffa502 	.word	0xffffa502

00000430 <SystemInit>:
#define GENERIC_CLOCK_MULTIPLEXER_DFLL48M (0u)

void SystemInit( void )
{
  /* Set 1 Flash Wait State for 48MHz, cf tables 20.9 and 35.27 in SAMD21 Datasheet */
  NVMCTRL->CTRLB.bit.RWS = NVMCTRL_CTRLB_RWS_HALF_Val ;
     430:	221e      	movs	r2, #30
{
     432:	b570      	push	{r4, r5, r6, lr}
  NVMCTRL->CTRLB.bit.RWS = NVMCTRL_CTRLB_RWS_HALF_Val ;
     434:	4846      	ldr	r0, [pc, #280]	; (550 <SystemInit+0x120>)

  /* Turn on the digital interface clock */
  PM->APBAMASK.reg |= PM_APBAMASK_GCLK ;
     436:	4947      	ldr	r1, [pc, #284]	; (554 <SystemInit+0x124>)
  NVMCTRL->CTRLB.bit.RWS = NVMCTRL_CTRLB_RWS_HALF_Val ;
     438:	6843      	ldr	r3, [r0, #4]
     43a:	4393      	bics	r3, r2
     43c:	3a1c      	subs	r2, #28
     43e:	4313      	orrs	r3, r2
     440:	6043      	str	r3, [r0, #4]
  PM->APBAMASK.reg |= PM_APBAMASK_GCLK ;
     442:	2308      	movs	r3, #8
     444:	698c      	ldr	r4, [r1, #24]
     446:	4323      	orrs	r3, r4
     448:	618b      	str	r3, [r1, #24]
#else // has crystal

  /* ----------------------------------------------------------------------------------------------
   * 1) Enable XOSC32K clock (External on-board 32.768Hz oscillator)
   */
  SYSCTRL->XOSC32K.reg = SYSCTRL_XOSC32K_STARTUP( 0x6u ) | /* cf table 15.10 of product datasheet in chapter 15.8.6 */
     44a:	4c43      	ldr	r4, [pc, #268]	; (558 <SystemInit+0x128>)
     44c:	4b43      	ldr	r3, [pc, #268]	; (55c <SystemInit+0x12c>)
     44e:	829c      	strh	r4, [r3, #20]
                         SYSCTRL_XOSC32K_XTALEN | SYSCTRL_XOSC32K_EN32K ;
  SYSCTRL->XOSC32K.bit.ENABLE = 1 ; /* separate call, as described in chapter 15.6.3 */
     450:	8a9c      	ldrh	r4, [r3, #20]
     452:	4314      	orrs	r4, r2
     454:	829c      	strh	r4, [r3, #20]

  while ( (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_XOSC32KRDY) == 0 )
     456:	68dc      	ldr	r4, [r3, #12]
     458:	4214      	tst	r4, r2
     45a:	d0fc      	beq.n	456 <SystemInit+0x26>

  /* Software reset the module to ensure it is re-initialized correctly */
  /* Note: Due to synchronization, there is a delay from writing CTRL.SWRST until the reset is complete.
   * CTRL.SWRST and STATUS.SYNCBUSY will both be cleared when the reset is complete, as described in chapter 13.8.1
   */
  GCLK->CTRL.reg = GCLK_CTRL_SWRST ;
     45c:	2401      	movs	r4, #1
     45e:	4a40      	ldr	r2, [pc, #256]	; (560 <SystemInit+0x130>)
     460:	7014      	strb	r4, [r2, #0]

  while ( (GCLK->CTRL.reg & GCLK_CTRL_SWRST) && (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY) )
     462:	7815      	ldrb	r5, [r2, #0]
     464:	4225      	tst	r5, r4
     466:	d003      	beq.n	470 <SystemInit+0x40>
     468:	7855      	ldrb	r5, [r2, #1]
     46a:	b26d      	sxtb	r5, r5
     46c:	2d00      	cmp	r5, #0
     46e:	dbf8      	blt.n	462 <SystemInit+0x32>
  }

  /* ----------------------------------------------------------------------------------------------
   * 2) Put XOSC32K as source of Generic Clock Generator 1
   */
  GCLK->GENDIV.reg = GCLK_GENDIV_ID( GENERIC_CLOCK_GENERATOR_XOSC32K ) ; // Generic Clock Generator 1
     470:	2401      	movs	r4, #1
     472:	6094      	str	r4, [r2, #8]

  while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY )
     474:	7854      	ldrb	r4, [r2, #1]
     476:	b264      	sxtb	r4, r4
     478:	2c00      	cmp	r4, #0
     47a:	dbfb      	blt.n	474 <SystemInit+0x44>
  {
    /* Wait for synchronization */
  }

  /* Write Generic Clock Generator 1 configuration */
  GCLK->GENCTRL.reg = GCLK_GENCTRL_ID( GENERIC_CLOCK_GENERATOR_OSC32K ) | // Generic Clock Generator 1
     47c:	4c39      	ldr	r4, [pc, #228]	; (564 <SystemInit+0x134>)
     47e:	6054      	str	r4, [r2, #4]
                      GCLK_GENCTRL_SRC_XOSC32K | // Selected source is External 32KHz Oscillator
#endif
//                      GCLK_GENCTRL_OE | // Output clock to a pin for tests
                      GCLK_GENCTRL_GENEN ;

  while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY )
     480:	7854      	ldrb	r4, [r2, #1]
     482:	b264      	sxtb	r4, r4
     484:	2c00      	cmp	r4, #0
     486:	dbfb      	blt.n	480 <SystemInit+0x50>
  }

  /* ----------------------------------------------------------------------------------------------
   * 3) Put Generic Clock Generator 1 as source for Generic Clock Multiplexer 0 (DFLL48M reference)
   */
  GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID( GENERIC_CLOCK_MULTIPLEXER_DFLL48M ) | // Generic Clock Multiplexer 0
     488:	2482      	movs	r4, #130	; 0x82
     48a:	01e4      	lsls	r4, r4, #7
     48c:	8054      	strh	r4, [r2, #2]
                      GCLK_CLKCTRL_GEN_GCLK1 | // Generic Clock Generator 1 is source
                      GCLK_CLKCTRL_CLKEN ;

  while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY )
     48e:	7854      	ldrb	r4, [r2, #1]
     490:	b264      	sxtb	r4, r4
     492:	2c00      	cmp	r4, #0
     494:	dbfb      	blt.n	48e <SystemInit+0x5e>
   */

  /* DFLL Configuration in Closed Loop mode, cf product datasheet chapter 15.6.7.1 - Closed-Loop Operation */

  /* Remove the OnDemand mode, Bug http://avr32.icgroup.norway.atmel.com/bugzilla/show_bug.cgi?id=9905 */
  SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
     496:	2402      	movs	r4, #2
     498:	849c      	strh	r4, [r3, #36]	; 0x24

  while ( (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) == 0 )
     49a:	340e      	adds	r4, #14
     49c:	68dd      	ldr	r5, [r3, #12]
     49e:	4225      	tst	r5, r4
     4a0:	d0fc      	beq.n	49c <SystemInit+0x6c>
  {
    /* Wait for synchronization */
  }

  SYSCTRL->DFLLMUL.reg = SYSCTRL_DFLLMUL_CSTEP( 31 ) | // Coarse step is 31, half of the max value
     4a2:	4c31      	ldr	r4, [pc, #196]	; (568 <SystemInit+0x138>)
     4a4:	62dc      	str	r4, [r3, #44]	; 0x2c
                         SYSCTRL_DFLLMUL_FSTEP( 511 ) | // Fine step is 511, half of the max value
                         SYSCTRL_DFLLMUL_MUL( (VARIANT_MCK + VARIANT_MAINOSC/2) / VARIANT_MAINOSC ) ; // External 32KHz is the reference

  while ( (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) == 0 )
     4a6:	2410      	movs	r4, #16
     4a8:	68dd      	ldr	r5, [r3, #12]
     4aa:	4225      	tst	r5, r4
     4ac:	d0fc      	beq.n	4a8 <SystemInit+0x78>
  SYSCTRL->DFLLCTRL.reg |= SYSCTRL_DFLLCTRL_ENABLE ;

#else   // has crystal

  /* Write full configuration to DFLL control register */
  SYSCTRL->DFLLCTRL.reg |= SYSCTRL_DFLLCTRL_MODE | /* Enable the closed loop mode */
     4ae:	8c9d      	ldrh	r5, [r3, #36]	; 0x24
     4b0:	4c2e      	ldr	r4, [pc, #184]	; (56c <SystemInit+0x13c>)
     4b2:	432c      	orrs	r4, r5
     4b4:	849c      	strh	r4, [r3, #36]	; 0x24
                           SYSCTRL_DFLLCTRL_WAITLOCK |
                           SYSCTRL_DFLLCTRL_QLDIS ; /* Disable Quick lock */

  while ( (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) == 0 )
     4b6:	2410      	movs	r4, #16
     4b8:	68dd      	ldr	r5, [r3, #12]
     4ba:	4225      	tst	r5, r4
     4bc:	d0fc      	beq.n	4b8 <SystemInit+0x88>
  {
    /* Wait for synchronization */
  }

  /* Enable the DFLL */
  SYSCTRL->DFLLCTRL.reg |= SYSCTRL_DFLLCTRL_ENABLE ;
     4be:	2402      	movs	r4, #2
     4c0:	8c9d      	ldrh	r5, [r3, #36]	; 0x24

  while ( (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLLCKC) == 0 ||
     4c2:	2680      	movs	r6, #128	; 0x80
  SYSCTRL->DFLLCTRL.reg |= SYSCTRL_DFLLCTRL_ENABLE ;
     4c4:	432c      	orrs	r4, r5
     4c6:	849c      	strh	r4, [r3, #36]	; 0x24
          (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLLCKF) == 0 )
     4c8:	2440      	movs	r4, #64	; 0x40
  while ( (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLLCKC) == 0 ||
     4ca:	68dd      	ldr	r5, [r3, #12]
     4cc:	4235      	tst	r5, r6
     4ce:	d0fc      	beq.n	4ca <SystemInit+0x9a>
          (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLLCKF) == 0 )
     4d0:	68dd      	ldr	r5, [r3, #12]
  while ( (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLLCKC) == 0 ||
     4d2:	4225      	tst	r5, r4
     4d4:	d0f9      	beq.n	4ca <SystemInit+0x9a>
    /* Wait for locks flags */
  }

#endif

  while ( (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) == 0 )
     4d6:	2410      	movs	r4, #16
     4d8:	68dd      	ldr	r5, [r3, #12]
     4da:	4225      	tst	r5, r4
     4dc:	d0fc      	beq.n	4d8 <SystemInit+0xa8>
  }

  /* ----------------------------------------------------------------------------------------------
   * 5) Switch Generic Clock Generator 0 to DFLL48M. CPU will run at 48MHz.
   */
  GCLK->GENDIV.reg = GCLK_GENDIV_ID( GENERIC_CLOCK_GENERATOR_MAIN ) ; // Generic Clock Generator 0
     4de:	2400      	movs	r4, #0
     4e0:	6094      	str	r4, [r2, #8]

  while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY )
     4e2:	7854      	ldrb	r4, [r2, #1]
     4e4:	b264      	sxtb	r4, r4
     4e6:	2c00      	cmp	r4, #0
     4e8:	dbfb      	blt.n	4e2 <SystemInit+0xb2>
  {
    /* Wait for synchronization */
  }

  /* Write Generic Clock Generator 0 configuration */
  GCLK->GENCTRL.reg = GCLK_GENCTRL_ID( GENERIC_CLOCK_GENERATOR_MAIN ) | // Generic Clock Generator 0
     4ea:	4c21      	ldr	r4, [pc, #132]	; (570 <SystemInit+0x140>)
     4ec:	6054      	str	r4, [r2, #4]
                      GCLK_GENCTRL_SRC_DFLL48M | // Selected source is DFLL 48MHz
//                      GCLK_GENCTRL_OE | // Output clock to a pin for tests
                      GCLK_GENCTRL_IDC | // Set 50/50 duty cycle
                      GCLK_GENCTRL_GENEN ;

  while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY )
     4ee:	7854      	ldrb	r4, [r2, #1]
     4f0:	b264      	sxtb	r4, r4
     4f2:	2c00      	cmp	r4, #0
     4f4:	dbfb      	blt.n	4ee <SystemInit+0xbe>
  }

  /* ----------------------------------------------------------------------------------------------
   * 6) Modify PRESCaler value of OSC8M to have 8MHz
   */
  SYSCTRL->OSC8M.bit.PRESC = SYSCTRL_OSC8M_PRESC_0_Val ;  //CMSIS 4.5 changed the prescaler defines
     4f6:	6a1c      	ldr	r4, [r3, #32]
     4f8:	4d1e      	ldr	r5, [pc, #120]	; (574 <SystemInit+0x144>)
     4fa:	402c      	ands	r4, r5
  SYSCTRL->OSC8M.bit.ONDEMAND = 0 ;
     4fc:	2580      	movs	r5, #128	; 0x80
  SYSCTRL->OSC8M.bit.PRESC = SYSCTRL_OSC8M_PRESC_0_Val ;  //CMSIS 4.5 changed the prescaler defines
     4fe:	621c      	str	r4, [r3, #32]
  SYSCTRL->OSC8M.bit.ONDEMAND = 0 ;
     500:	6a1c      	ldr	r4, [r3, #32]
     502:	43ac      	bics	r4, r5
     504:	621c      	str	r4, [r3, #32]

  /* ----------------------------------------------------------------------------------------------
   * 7) Put OSC8M as source for Generic Clock Generator 3
   */
  GCLK->GENDIV.reg = GCLK_GENDIV_ID( GENERIC_CLOCK_GENERATOR_OSC8M ) ; // Generic Clock Generator 3
     506:	2303      	movs	r3, #3
     508:	6093      	str	r3, [r2, #8]

  /* Write Generic Clock Generator 3 configuration */
  GCLK->GENCTRL.reg = GCLK_GENCTRL_ID( GENERIC_CLOCK_GENERATOR_OSC8M ) | // Generic Clock Generator 3
     50a:	4b1b      	ldr	r3, [pc, #108]	; (578 <SystemInit+0x148>)
     50c:	6053      	str	r3, [r2, #4]
                      GCLK_GENCTRL_SRC_OSC8M | // Selected source is RC OSC 8MHz (already enabled at reset)
//                      GCLK_GENCTRL_OE | // Output clock to a pin for tests
                      GCLK_GENCTRL_GENEN ;

  while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY )
     50e:	7853      	ldrb	r3, [r2, #1]
     510:	b25b      	sxtb	r3, r3
     512:	2b00      	cmp	r3, #0
     514:	dbfb      	blt.n	50e <SystemInit+0xde>

  /*
   * Now that all system clocks are configured, we can set CPU and APBx BUS clocks.
   * There values are normally the one present after Reset.
   */
  PM->CPUSEL.reg  = PM_CPUSEL_CPUDIV_DIV1 ;
     516:	2300      	movs	r3, #0

  // ADC Linearity bits 4:0
  uint32_t linearity = (*((uint32_t *) ADC_FUSES_LINEARITY_0_ADDR) & ADC_FUSES_LINEARITY_0_Msk) >> ADC_FUSES_LINEARITY_0_Pos;

  // ADC Linearity bits 7:5
  linearity |= ((*((uint32_t *) ADC_FUSES_LINEARITY_1_ADDR) & ADC_FUSES_LINEARITY_1_Msk) >> ADC_FUSES_LINEARITY_1_Pos) << 5;
     518:	24ff      	movs	r4, #255	; 0xff
  PM->CPUSEL.reg  = PM_CPUSEL_CPUDIV_DIV1 ;
     51a:	720b      	strb	r3, [r1, #8]
  SystemCoreClock=VARIANT_MCK ;
     51c:	4a17      	ldr	r2, [pc, #92]	; (57c <SystemInit+0x14c>)
  PM->APBASEL.reg = PM_APBASEL_APBADIV_DIV1_Val ;
     51e:	724b      	strb	r3, [r1, #9]
  PM->APBBSEL.reg = PM_APBBSEL_APBBDIV_DIV1_Val ;
     520:	728b      	strb	r3, [r1, #10]
  PM->APBCSEL.reg = PM_APBCSEL_APBCDIV_DIV1_Val ;
     522:	72cb      	strb	r3, [r1, #11]
  SystemCoreClock=VARIANT_MCK ;
     524:	4b16      	ldr	r3, [pc, #88]	; (580 <SystemInit+0x150>)
     526:	601a      	str	r2, [r3, #0]
  uint32_t bias = (*((uint32_t *) ADC_FUSES_BIASCAL_ADDR) & ADC_FUSES_BIASCAL_Msk) >> ADC_FUSES_BIASCAL_Pos;
     528:	4b16      	ldr	r3, [pc, #88]	; (584 <SystemInit+0x154>)
  uint32_t linearity = (*((uint32_t *) ADC_FUSES_LINEARITY_0_ADDR) & ADC_FUSES_LINEARITY_0_Msk) >> ADC_FUSES_LINEARITY_0_Pos;
     52a:	4a17      	ldr	r2, [pc, #92]	; (588 <SystemInit+0x158>)
  uint32_t bias = (*((uint32_t *) ADC_FUSES_BIASCAL_ADDR) & ADC_FUSES_BIASCAL_Msk) >> ADC_FUSES_BIASCAL_Pos;
     52c:	681b      	ldr	r3, [r3, #0]
  uint32_t linearity = (*((uint32_t *) ADC_FUSES_LINEARITY_0_ADDR) & ADC_FUSES_LINEARITY_0_Msk) >> ADC_FUSES_LINEARITY_0_Pos;
     52e:	6811      	ldr	r1, [r2, #0]
  uint32_t bias = (*((uint32_t *) ADC_FUSES_BIASCAL_ADDR) & ADC_FUSES_BIASCAL_Msk) >> ADC_FUSES_BIASCAL_Pos;
     530:	069a      	lsls	r2, r3, #26
  linearity |= ((*((uint32_t *) ADC_FUSES_LINEARITY_1_ADDR) & ADC_FUSES_LINEARITY_1_Msk) >> ADC_FUSES_LINEARITY_1_Pos) << 5;
     532:	015b      	lsls	r3, r3, #5
  uint32_t linearity = (*((uint32_t *) ADC_FUSES_LINEARITY_0_ADDR) & ADC_FUSES_LINEARITY_0_Msk) >> ADC_FUSES_LINEARITY_0_Pos;
     534:	0ec9      	lsrs	r1, r1, #27
  linearity |= ((*((uint32_t *) ADC_FUSES_LINEARITY_1_ADDR) & ADC_FUSES_LINEARITY_1_Msk) >> ADC_FUSES_LINEARITY_1_Pos) << 5;
     536:	4023      	ands	r3, r4
  uint32_t bias = (*((uint32_t *) ADC_FUSES_BIASCAL_ADDR) & ADC_FUSES_BIASCAL_Msk) >> ADC_FUSES_BIASCAL_Pos;
     538:	0f52      	lsrs	r2, r2, #29

  ADC->CALIB.reg = ADC_CALIB_BIAS_CAL(bias) | ADC_CALIB_LINEARITY_CAL(linearity);
     53a:	0212      	lsls	r2, r2, #8
  linearity |= ((*((uint32_t *) ADC_FUSES_LINEARITY_1_ADDR) & ADC_FUSES_LINEARITY_1_Msk) >> ADC_FUSES_LINEARITY_1_Pos) << 5;
     53c:	430b      	orrs	r3, r1
  ADC->CALIB.reg = ADC_CALIB_BIAS_CAL(bias) | ADC_CALIB_LINEARITY_CAL(linearity);
     53e:	4313      	orrs	r3, r2
     540:	4a12      	ldr	r2, [pc, #72]	; (58c <SystemInit+0x15c>)
     542:	8513      	strh	r3, [r2, #40]	; 0x28

  /*
   * 9) Disable automatic NVM write operations
   */
  NVMCTRL->CTRLB.bit.MANW = 1;
     544:	2380      	movs	r3, #128	; 0x80
     546:	6842      	ldr	r2, [r0, #4]
     548:	4313      	orrs	r3, r2
     54a:	6043      	str	r3, [r0, #4]
}
     54c:	bd70      	pop	{r4, r5, r6, pc}
     54e:	46c0      	nop			; (mov r8, r8)
     550:	41004000 	.word	0x41004000
     554:	40000400 	.word	0x40000400
     558:	0000060c 	.word	0x0000060c
     55c:	40000800 	.word	0x40000800
     560:	40000c00 	.word	0x40000c00
     564:	00010501 	.word	0x00010501
     568:	7dff05b9 	.word	0x7dff05b9
     56c:	00000a04 	.word	0x00000a04
     570:	00030700 	.word	0x00030700
     574:	fffffcff 	.word	0xfffffcff
     578:	00010603 	.word	0x00010603
     57c:	02dc6c00 	.word	0x02dc6c00
     580:	20000014 	.word	0x20000014
     584:	00806024 	.word	0x00806024
     588:	00806020 	.word	0x00806020
     58c:	42004000 	.word	0x42004000

00000590 <_ZN4UartcvbEv>:
    size_t write(const uint8_t data);
    using Print::write; // pull in write(str) and write(buf, size) from Print

    void IrqHandler();

    operator bool() { return true; }
     590:	2001      	movs	r0, #1
     592:	4770      	bx	lr

00000594 <_ZN4Uart5beginEm>:
  uc_pinRTS = _pinRTS;
  uc_pinCTS = _pinCTS;
}

void Uart::begin(unsigned long baudrate)
{
     594:	b510      	push	{r4, lr}
  begin(baudrate, SERIAL_8N1);
     596:	6803      	ldr	r3, [r0, #0]
     598:	4a01      	ldr	r2, [pc, #4]	; (5a0 <_ZN4Uart5beginEm+0xc>)
     59a:	6a1b      	ldr	r3, [r3, #32]
     59c:	4798      	blx	r3
}
     59e:	bd10      	pop	{r4, pc}
     5a0:	00000413 	.word	0x00000413

000005a4 <_ZN4Uart4peekEv>:
}

template <int N>
int RingBufferN<N>::peek()
{
  if(_iTail == _iHead)
     5a4:	0003      	movs	r3, r0
     5a6:	33fc      	adds	r3, #252	; 0xfc
     5a8:	69d9      	ldr	r1, [r3, #28]
     5aa:	699a      	ldr	r2, [r3, #24]
     5ac:	4291      	cmp	r1, r2
     5ae:	d003      	beq.n	5b8 <_ZN4Uart4peekEv+0x14>
    return -1;

  return _aucBuffer[_iTail];
     5b0:	69db      	ldr	r3, [r3, #28]
     5b2:	18c0      	adds	r0, r0, r3
     5b4:	7d00      	ldrb	r0, [r0, #20]
}

int Uart::peek()
{
  return rxBuffer.peek();
}
     5b6:	4770      	bx	lr
    return -1;
     5b8:	2001      	movs	r0, #1
     5ba:	4240      	negs	r0, r0
  return rxBuffer.peek();
     5bc:	e7fb      	b.n	5b6 <_ZN4Uart4peekEv+0x12>

000005be <_ZN4Uart3endEv>:
{
     5be:	b510      	push	{r4, lr}
     5c0:	0004      	movs	r4, r0
  sercom->resetUART();
     5c2:	6900      	ldr	r0, [r0, #16]
     5c4:	f001 feb2 	bl	232c <_ZN6SERCOM9resetUARTEv>
  _iHead = 0;
     5c8:	0022      	movs	r2, r4
     5ca:	2300      	movs	r3, #0
     5cc:	32fc      	adds	r2, #252	; 0xfc
     5ce:	6193      	str	r3, [r2, #24]
  _iTail = 0;
     5d0:	61d3      	str	r3, [r2, #28]
  _iHead = 0;
     5d2:	2286      	movs	r2, #134	; 0x86
     5d4:	0092      	lsls	r2, r2, #2
     5d6:	18a4      	adds	r4, r4, r2
     5d8:	6063      	str	r3, [r4, #4]
  _iTail = 0;
     5da:	60a3      	str	r3, [r4, #8]
}
     5dc:	bd10      	pop	{r4, pc}

000005de <_ZN4Uart16extractNbStopBitEt>:
  return 1;
}

SercomNumberStopBit Uart::extractNbStopBit(uint16_t config)
{
  switch(config & HARDSER_STOP_BIT_MASK)
     5de:	20f0      	movs	r0, #240	; 0xf0
     5e0:	4001      	ands	r1, r0
  {
    case HARDSER_STOP_BIT_1:
    default:
      return SERCOM_STOP_BIT_1;
     5e2:	3930      	subs	r1, #48	; 0x30
     5e4:	4248      	negs	r0, r1
     5e6:	4148      	adcs	r0, r1

    case HARDSER_STOP_BIT_2:
      return SERCOM_STOP_BITS_2;
  }
}
     5e8:	4770      	bx	lr

000005ea <_ZN4Uart15extractCharSizeEt>:

SercomUartCharSize Uart::extractCharSize(uint16_t config)
{
  switch(config & HARDSER_DATA_MASK)
     5ea:	23f0      	movs	r3, #240	; 0xf0
     5ec:	011b      	lsls	r3, r3, #4
     5ee:	4019      	ands	r1, r3
     5f0:	2380      	movs	r3, #128	; 0x80
  {
    case HARDSER_DATA_5:
      return UART_CHAR_SIZE_5_BITS;

    case HARDSER_DATA_6:
      return UART_CHAR_SIZE_6_BITS;
     5f2:	2006      	movs	r0, #6
  switch(config & HARDSER_DATA_MASK)
     5f4:	009b      	lsls	r3, r3, #2
     5f6:	4299      	cmp	r1, r3
     5f8:	d00a      	beq.n	610 <_ZN4Uart15extractCharSizeEt+0x26>
     5fa:	3301      	adds	r3, #1
     5fc:	33ff      	adds	r3, #255	; 0xff

    case HARDSER_DATA_7:
      return UART_CHAR_SIZE_7_BITS;
     5fe:	3001      	adds	r0, #1
  switch(config & HARDSER_DATA_MASK)
     600:	4299      	cmp	r1, r3
     602:	d005      	beq.n	610 <_ZN4Uart15extractCharSizeEt+0x26>
     604:	2380      	movs	r3, #128	; 0x80
      return UART_CHAR_SIZE_5_BITS;
     606:	3802      	subs	r0, #2
  switch(config & HARDSER_DATA_MASK)
     608:	005b      	lsls	r3, r3, #1
     60a:	4299      	cmp	r1, r3
     60c:	d000      	beq.n	610 <_ZN4Uart15extractCharSizeEt+0x26>

    case HARDSER_DATA_8:
    default:
      return UART_CHAR_SIZE_8_BITS;
     60e:	2000      	movs	r0, #0

  }
}
     610:	4770      	bx	lr

00000612 <_ZN4Uart13extractParityEt>:

SercomParityMode Uart::extractParity(uint16_t config)
{
  switch(config & HARDSER_PARITY_MASK)
     612:	200f      	movs	r0, #15
     614:	4001      	ands	r1, r0
    case HARDSER_PARITY_NONE:
    default:
      return SERCOM_NO_PARITY;

    case HARDSER_PARITY_EVEN:
      return SERCOM_EVEN_PARITY;
     616:	2000      	movs	r0, #0
  switch(config & HARDSER_PARITY_MASK)
     618:	2901      	cmp	r1, #1
     61a:	d003      	beq.n	624 <_ZN4Uart13extractParityEt+0x12>
      return SERCOM_NO_PARITY;
     61c:	3902      	subs	r1, #2
     61e:	1e48      	subs	r0, r1, #1
     620:	4181      	sbcs	r1, r0
     622:	1c48      	adds	r0, r1, #1

    case HARDSER_PARITY_ODD:
      return SERCOM_ODD_PARITY;
  }
}
     624:	4770      	bx	lr
	...

00000628 <_ZN4Uart5beginEmt>:
  pinPeripheral(uc_pinRX, g_APinDescription[uc_pinRX].ulPinType);
     628:	2389      	movs	r3, #137	; 0x89
{
     62a:	b5f0      	push	{r4, r5, r6, r7, lr}
  pinPeripheral(uc_pinRX, g_APinDescription[uc_pinRX].ulPinType);
     62c:	2618      	movs	r6, #24
{
     62e:	b085      	sub	sp, #20
     630:	9102      	str	r1, [sp, #8]
  pinPeripheral(uc_pinRX, g_APinDescription[uc_pinRX].ulPinType);
     632:	009b      	lsls	r3, r3, #2
{
     634:	0004      	movs	r4, r0
  pinPeripheral(uc_pinRX, g_APinDescription[uc_pinRX].ulPinType);
     636:	5cc0      	ldrb	r0, [r0, r3]
     638:	0033      	movs	r3, r6
     63a:	2108      	movs	r1, #8
     63c:	4343      	muls	r3, r0
     63e:	4d32      	ldr	r5, [pc, #200]	; (708 <_ZN4Uart5beginEmt+0xe0>)
{
     640:	0017      	movs	r7, r2
  pinPeripheral(uc_pinRX, g_APinDescription[uc_pinRX].ulPinType);
     642:	18eb      	adds	r3, r5, r3
     644:	5659      	ldrsb	r1, [r3, r1]
     646:	f001 fd83 	bl	2150 <pinPeripheral>
  pinPeripheral(uc_pinTX, g_APinDescription[uc_pinTX].ulPinType);
     64a:	4b30      	ldr	r3, [pc, #192]	; (70c <_ZN4Uart5beginEmt+0xe4>)
     64c:	2108      	movs	r1, #8
     64e:	5ce0      	ldrb	r0, [r4, r3]
     650:	0033      	movs	r3, r6
     652:	4343      	muls	r3, r0
     654:	18eb      	adds	r3, r5, r3
     656:	5659      	ldrsb	r1, [r3, r1]
     658:	f001 fd7a 	bl	2150 <pinPeripheral>
  if (uc_padTX == UART_TX_RTS_CTS_PAD_0_2_3) { 
     65c:	4b2c      	ldr	r3, [pc, #176]	; (710 <_ZN4Uart5beginEmt+0xe8>)
     65e:	5ce2      	ldrb	r2, [r4, r3]
     660:	9303      	str	r3, [sp, #12]
     662:	2a02      	cmp	r2, #2
     664:	d109      	bne.n	67a <_ZN4Uart5beginEmt+0x52>
    if (uc_pinCTS != NO_CTS_PIN) {
     666:	3311      	adds	r3, #17
     668:	5ce0      	ldrb	r0, [r4, r3]
     66a:	28ff      	cmp	r0, #255	; 0xff
     66c:	d005      	beq.n	67a <_ZN4Uart5beginEmt+0x52>
      pinPeripheral(uc_pinCTS, g_APinDescription[uc_pinCTS].ulPinType);
     66e:	2108      	movs	r1, #8
     670:	4346      	muls	r6, r0
     672:	19ae      	adds	r6, r5, r6
     674:	5671      	ldrsb	r1, [r6, r1]
     676:	f001 fd6b 	bl	2150 <pinPeripheral>
  if (uc_pinRTS != NO_RTS_PIN) {
     67a:	268a      	movs	r6, #138	; 0x8a
     67c:	00b6      	lsls	r6, r6, #2
     67e:	5da0      	ldrb	r0, [r4, r6]
     680:	28ff      	cmp	r0, #255	; 0xff
     682:	d019      	beq.n	6b8 <_ZN4Uart5beginEmt+0x90>
    pinMode(uc_pinRTS, OUTPUT);
     684:	2101      	movs	r1, #1
     686:	f001 fceb 	bl	2060 <pinMode>
    EPortType rtsPort = g_APinDescription[uc_pinRTS].ulPort;
     68a:	2218      	movs	r2, #24
     68c:	5da3      	ldrb	r3, [r4, r6]
    pul_outsetRTS = &PORT->Group[rtsPort].OUTSET.reg;
     68e:	4921      	ldr	r1, [pc, #132]	; (714 <_ZN4Uart5beginEmt+0xec>)
    EPortType rtsPort = g_APinDescription[uc_pinRTS].ulPort;
     690:	435a      	muls	r2, r3
    pul_outsetRTS = &PORT->Group[rtsPort].OUTSET.reg;
     692:	56ab      	ldrsb	r3, [r5, r2]
    ul_pinMaskRTS = (1ul << g_APinDescription[uc_pinRTS].ulPin);
     694:	18ad      	adds	r5, r5, r2
    pul_outsetRTS = &PORT->Group[rtsPort].OUTSET.reg;
     696:	01db      	lsls	r3, r3, #7
     698:	1858      	adds	r0, r3, r1
     69a:	218b      	movs	r1, #139	; 0x8b
     69c:	0089      	lsls	r1, r1, #2
     69e:	5060      	str	r0, [r4, r1]
    pul_outclrRTS = &PORT->Group[rtsPort].OUTCLR.reg;
     6a0:	491d      	ldr	r1, [pc, #116]	; (718 <_ZN4Uart5beginEmt+0xf0>)
    ul_pinMaskRTS = (1ul << g_APinDescription[uc_pinRTS].ulPin);
     6a2:	2201      	movs	r2, #1
    pul_outclrRTS = &PORT->Group[rtsPort].OUTCLR.reg;
     6a4:	185b      	adds	r3, r3, r1
     6a6:	218c      	movs	r1, #140	; 0x8c
     6a8:	0089      	lsls	r1, r1, #2
     6aa:	5063      	str	r3, [r4, r1]
    ul_pinMaskRTS = (1ul << g_APinDescription[uc_pinRTS].ulPin);
     6ac:	6869      	ldr	r1, [r5, #4]
     6ae:	408a      	lsls	r2, r1
     6b0:	218d      	movs	r1, #141	; 0x8d
     6b2:	0089      	lsls	r1, r1, #2
     6b4:	5062      	str	r2, [r4, r1]
    *pul_outclrRTS = ul_pinMaskRTS;
     6b6:	601a      	str	r2, [r3, #0]
  sercom->initUART(UART_INT_CLOCK, SAMPLE_RATE_x16, baudrate);
     6b8:	2201      	movs	r2, #1
     6ba:	9b02      	ldr	r3, [sp, #8]
     6bc:	0011      	movs	r1, r2
     6be:	6920      	ldr	r0, [r4, #16]
     6c0:	f001 fede 	bl	2480 <_ZN6SERCOM8initUARTE14SercomUartMode20SercomUartSampleRatem>
  sercom->initFrame(extractCharSize(config), LSB_FIRST, extractParity(config), extractNbStopBit(config));
     6c4:	0039      	movs	r1, r7
     6c6:	0020      	movs	r0, r4
     6c8:	f7ff ff8f 	bl	5ea <_ZN4Uart15extractCharSizeEt>
     6cc:	0039      	movs	r1, r7
     6ce:	0005      	movs	r5, r0
     6d0:	0020      	movs	r0, r4
     6d2:	f7ff ff9e 	bl	612 <_ZN4Uart13extractParityEt>
     6d6:	0039      	movs	r1, r7
     6d8:	0006      	movs	r6, r0
     6da:	0020      	movs	r0, r4
     6dc:	f7ff ff7f 	bl	5de <_ZN4Uart16extractNbStopBitEt>
     6e0:	0033      	movs	r3, r6
     6e2:	9000      	str	r0, [sp, #0]
     6e4:	0029      	movs	r1, r5
     6e6:	6920      	ldr	r0, [r4, #16]
     6e8:	2201      	movs	r2, #1
     6ea:	f001 fdf3 	bl	22d4 <_ZN6SERCOM9initFrameE18SercomUartCharSize15SercomDataOrder16SercomParityMode19SercomNumberStopBit>
  sercom->initPads(uc_padTX, uc_padRX);
     6ee:	4b0b      	ldr	r3, [pc, #44]	; (71c <_ZN4Uart5beginEmt+0xf4>)
     6f0:	6920      	ldr	r0, [r4, #16]
     6f2:	5ce2      	ldrb	r2, [r4, r3]
     6f4:	9b03      	ldr	r3, [sp, #12]
     6f6:	5ce1      	ldrb	r1, [r4, r3]
     6f8:	f001 fe06 	bl	2308 <_ZN6SERCOM8initPadsE15SercomUartTXPad11SercomRXPad>
  sercom->enableUART();
     6fc:	6920      	ldr	r0, [r4, #16]
     6fe:	f001 fe21 	bl	2344 <_ZN6SERCOM10enableUARTEv>
}
     702:	b005      	add	sp, #20
     704:	bdf0      	pop	{r4, r5, r6, r7, pc}
     706:	46c0      	nop			; (mov r8, r8)
     708:	0000294c 	.word	0x0000294c
     70c:	00000225 	.word	0x00000225
     710:	00000227 	.word	0x00000227
     714:	41004418 	.word	0x41004418
     718:	41004414 	.word	0x41004414
     71c:	00000226 	.word	0x00000226

00000720 <_ZN11RingBufferNILi256EEC1Ev>:
    memset( _aucBuffer, 0, N ) ;
     720:	2280      	movs	r2, #128	; 0x80
RingBufferN<N>::RingBufferN( void )
     722:	b510      	push	{r4, lr}
     724:	0004      	movs	r4, r0
    memset( _aucBuffer, 0, N ) ;
     726:	0052      	lsls	r2, r2, #1
     728:	2100      	movs	r1, #0
     72a:	f001 ffb2 	bl	2692 <memset>
  _iHead = 0;
     72e:	0023      	movs	r3, r4
     730:	2200      	movs	r2, #0
     732:	33fc      	adds	r3, #252	; 0xfc
     734:	605a      	str	r2, [r3, #4]
}
     736:	0020      	movs	r0, r4
  _iTail = 0;
     738:	609a      	str	r2, [r3, #8]
}
     73a:	bd10      	pop	{r4, pc}

0000073c <_ZN4UartC1EP6SERCOMhh11SercomRXPad15SercomUartTXPad>:
Uart::Uart(SERCOM *_s, uint8_t _pinRX, uint8_t _pinTX, SercomRXPad _padRX, SercomUartTXPad _padTX) :
     73c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
     73e:	001d      	movs	r5, r3
     740:	ab08      	add	r3, sp, #32
     742:	781b      	ldrb	r3, [r3, #0]
     744:	0004      	movs	r4, r0
     746:	9300      	str	r3, [sp, #0]
     748:	ab09      	add	r3, sp, #36	; 0x24
     74a:	781b      	ldrb	r3, [r3, #0]
     74c:	0016      	movs	r6, r2
     74e:	9301      	str	r3, [sp, #4]
    Print() : write_error(0) {}
     750:	2300      	movs	r3, #0
     752:	6043      	str	r3, [r0, #4]
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
     754:	23fa      	movs	r3, #250	; 0xfa
     756:	009b      	lsls	r3, r3, #2
     758:	6083      	str	r3, [r0, #8]
Uart::Uart(SERCOM *_s, uint8_t _pinRX, uint8_t _pinTX, SercomRXPad _padRX, SercomUartTXPad _padTX, uint8_t _pinRTS, uint8_t _pinCTS)
     75a:	4b11      	ldr	r3, [pc, #68]	; (7a0 <_ZN4UartC1EP6SERCOMhh11SercomRXPad15SercomUartTXPad+0x64>)
Uart::Uart(SERCOM *_s, uint8_t _pinRX, uint8_t _pinTX, SercomRXPad _padRX, SercomUartTXPad _padTX) :
     75c:	000f      	movs	r7, r1
Uart::Uart(SERCOM *_s, uint8_t _pinRX, uint8_t _pinTX, SercomRXPad _padRX, SercomUartTXPad _padTX, uint8_t _pinRTS, uint8_t _pinCTS)
     75e:	3308      	adds	r3, #8
     760:	6003      	str	r3, [r0, #0]
     762:	3014      	adds	r0, #20
     764:	f7ff ffdc 	bl	720 <_ZN11RingBufferNILi256EEC1Ev>
     768:	0020      	movs	r0, r4
     76a:	301d      	adds	r0, #29
     76c:	30ff      	adds	r0, #255	; 0xff
     76e:	f7ff ffd7 	bl	720 <_ZN11RingBufferNILi256EEC1Ev>
  uc_pinRX = _pinRX;
     772:	2389      	movs	r3, #137	; 0x89
  uc_padRX = _padRX ;
     774:	466a      	mov	r2, sp
  uc_pinRX = _pinRX;
     776:	009b      	lsls	r3, r3, #2
  sercom = _s;
     778:	6127      	str	r7, [r4, #16]
  uc_pinRX = _pinRX;
     77a:	54e6      	strb	r6, [r4, r3]
  uc_pinTX = _pinTX;
     77c:	4b09      	ldr	r3, [pc, #36]	; (7a4 <_ZN4UartC1EP6SERCOMhh11SercomRXPad15SercomUartTXPad+0x68>)
  uc_padRX = _padRX ;
     77e:	7812      	ldrb	r2, [r2, #0]
  uc_pinTX = _pinTX;
     780:	54e5      	strb	r5, [r4, r3]
  uc_padRX = _padRX ;
     782:	4b09      	ldr	r3, [pc, #36]	; (7a8 <_ZN4UartC1EP6SERCOMhh11SercomRXPad15SercomUartTXPad+0x6c>)
}
     784:	0020      	movs	r0, r4
  uc_padRX = _padRX ;
     786:	54e2      	strb	r2, [r4, r3]
  uc_padTX = _padTX;
     788:	466a      	mov	r2, sp
     78a:	4b08      	ldr	r3, [pc, #32]	; (7ac <_ZN4UartC1EP6SERCOMhh11SercomRXPad15SercomUartTXPad+0x70>)
     78c:	7912      	ldrb	r2, [r2, #4]
     78e:	54e2      	strb	r2, [r4, r3]
  uc_pinRTS = _pinRTS;
     790:	228a      	movs	r2, #138	; 0x8a
     792:	3b29      	subs	r3, #41	; 0x29
     794:	3bff      	subs	r3, #255	; 0xff
     796:	0092      	lsls	r2, r2, #2
     798:	54a3      	strb	r3, [r4, r2]
  uc_pinCTS = _pinCTS;
     79a:	3210      	adds	r2, #16
     79c:	54a3      	strb	r3, [r4, r2]
}
     79e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
     7a0:	0000286c 	.word	0x0000286c
     7a4:	00000225 	.word	0x00000225
     7a8:	00000226 	.word	0x00000226
     7ac:	00000227 	.word	0x00000227

000007b0 <_ZN11RingBufferNILi256EE9availableEv>:
  int delta = _iHead - _iTail;
     7b0:	0003      	movs	r3, r0
     7b2:	33fc      	adds	r3, #252	; 0xfc
     7b4:	6858      	ldr	r0, [r3, #4]
     7b6:	689b      	ldr	r3, [r3, #8]
     7b8:	1ac0      	subs	r0, r0, r3
  if(delta < 0)
     7ba:	d501      	bpl.n	7c0 <_ZN11RingBufferNILi256EE9availableEv+0x10>
    return N + delta;
     7bc:	3001      	adds	r0, #1
     7be:	30ff      	adds	r0, #255	; 0xff
}
     7c0:	4770      	bx	lr

000007c2 <_ZN4Uart5flushEv>:
{
     7c2:	b510      	push	{r4, lr}
     7c4:	0004      	movs	r4, r0
  while(txBuffer.available()); // wait until TX buffer is empty
     7c6:	0020      	movs	r0, r4
     7c8:	301d      	adds	r0, #29
     7ca:	30ff      	adds	r0, #255	; 0xff
     7cc:	f7ff fff0 	bl	7b0 <_ZN11RingBufferNILi256EE9availableEv>
     7d0:	2800      	cmp	r0, #0
     7d2:	d1f8      	bne.n	7c6 <_ZN4Uart5flushEv+0x4>
  sercom->flushUART();
     7d4:	6920      	ldr	r0, [r4, #16]
     7d6:	f001 fdbe 	bl	2356 <_ZN6SERCOM9flushUARTEv>
}
     7da:	bd10      	pop	{r4, pc}

000007dc <_ZN4Uart9availableEv>:
{
     7dc:	b510      	push	{r4, lr}
  return rxBuffer.available();
     7de:	3014      	adds	r0, #20
     7e0:	f7ff ffe6 	bl	7b0 <_ZN11RingBufferNILi256EE9availableEv>
}
     7e4:	bd10      	pop	{r4, pc}

000007e6 <_ZN11RingBufferNILi256EE17availableForStoreEv>:
  if (_iHead >= _iTail)
     7e6:	0003      	movs	r3, r0
     7e8:	33fc      	adds	r3, #252	; 0xfc
     7ea:	6859      	ldr	r1, [r3, #4]
     7ec:	689a      	ldr	r2, [r3, #8]
     7ee:	4291      	cmp	r1, r2
     7f0:	db04      	blt.n	7fc <_ZN11RingBufferNILi256EE17availableForStoreEv+0x16>
    return N - 1 - _iHead + _iTail;
     7f2:	685a      	ldr	r2, [r3, #4]
     7f4:	6898      	ldr	r0, [r3, #8]
     7f6:	1a80      	subs	r0, r0, r2
     7f8:	30ff      	adds	r0, #255	; 0xff
}
     7fa:	4770      	bx	lr
    return _iTail - _iHead - 1;
     7fc:	6898      	ldr	r0, [r3, #8]
     7fe:	685b      	ldr	r3, [r3, #4]
     800:	1ac0      	subs	r0, r0, r3
     802:	3801      	subs	r0, #1
     804:	e7f9      	b.n	7fa <_ZN11RingBufferNILi256EE17availableForStoreEv+0x14>

00000806 <_ZN4Uart17availableForWriteEv>:
{
     806:	b510      	push	{r4, lr}
  return txBuffer.availableForStore();
     808:	301d      	adds	r0, #29
     80a:	30ff      	adds	r0, #255	; 0xff
     80c:	f7ff ffeb 	bl	7e6 <_ZN11RingBufferNILi256EE17availableForStoreEv>
}
     810:	bd10      	pop	{r4, pc}

00000812 <_ZN4Uart10IrqHandlerEv>:
{
     812:	b510      	push	{r4, lr}
     814:	0004      	movs	r4, r0
  if (sercom->isFrameErrorUART()) {
     816:	6900      	ldr	r0, [r0, #16]
     818:	f001 fdb9 	bl	238e <_ZN6SERCOM16isFrameErrorUARTEv>
     81c:	2800      	cmp	r0, #0
     81e:	d005      	beq.n	82c <_ZN4Uart10IrqHandlerEv+0x1a>
    sercom->readDataUART();
     820:	6920      	ldr	r0, [r4, #16]
     822:	f001 fdc4 	bl	23ae <_ZN6SERCOM12readDataUARTEv>
    sercom->clearFrameErrorUART();
     826:	6920      	ldr	r0, [r4, #16]
     828:	f001 fdb6 	bl	2398 <_ZN6SERCOM19clearFrameErrorUARTEv>
  if (sercom->availableDataUART()) {
     82c:	6920      	ldr	r0, [r4, #16]
     82e:	f001 fd9e 	bl	236e <_ZN6SERCOM17availableDataUARTEv>
     832:	2800      	cmp	r0, #0
     834:	d020      	beq.n	878 <_ZN4Uart10IrqHandlerEv+0x66>
    rxBuffer.store_char(sercom->readDataUART());
     836:	6920      	ldr	r0, [r4, #16]
     838:	f001 fdb9 	bl	23ae <_ZN6SERCOM12readDataUARTEv>
  int i = nextIndex(_iHead);
     83c:	0022      	movs	r2, r4
     83e:	32fc      	adds	r2, #252	; 0xfc
     840:	6993      	ldr	r3, [r2, #24]
  if ( i != _iTail )
     842:	69d1      	ldr	r1, [r2, #28]
}

template <int N>
int RingBufferN<N>::nextIndex(int index)
{
  return (uint32_t)(index + 1) % N;
     844:	3301      	adds	r3, #1
     846:	b2db      	uxtb	r3, r3
  if ( i != _iTail )
     848:	428b      	cmp	r3, r1
     84a:	d003      	beq.n	854 <_ZN4Uart10IrqHandlerEv+0x42>
    _aucBuffer[_iHead] = c ;
     84c:	6991      	ldr	r1, [r2, #24]
     84e:	1861      	adds	r1, r4, r1
     850:	7508      	strb	r0, [r1, #20]
    _iHead = i ;
     852:	6193      	str	r3, [r2, #24]
    if (uc_pinRTS != NO_RTS_PIN) {
     854:	238a      	movs	r3, #138	; 0x8a
     856:	009b      	lsls	r3, r3, #2
     858:	5ce3      	ldrb	r3, [r4, r3]
     85a:	2bff      	cmp	r3, #255	; 0xff
     85c:	d00c      	beq.n	878 <_ZN4Uart10IrqHandlerEv+0x66>
    rxBuffer.store_char(sercom->readDataUART());
     85e:	0020      	movs	r0, r4
     860:	3014      	adds	r0, #20
      if (rxBuffer.availableForStore() < RTS_RX_THRESHOLD) {
     862:	f7ff ffc0 	bl	7e6 <_ZN11RingBufferNILi256EE17availableForStoreEv>
     866:	2809      	cmp	r0, #9
     868:	dc06      	bgt.n	878 <_ZN4Uart10IrqHandlerEv+0x66>
        *pul_outsetRTS = ul_pinMaskRTS;
     86a:	238b      	movs	r3, #139	; 0x8b
     86c:	228d      	movs	r2, #141	; 0x8d
     86e:	009b      	lsls	r3, r3, #2
     870:	0092      	lsls	r2, r2, #2
     872:	58e3      	ldr	r3, [r4, r3]
     874:	58a2      	ldr	r2, [r4, r2]
     876:	601a      	str	r2, [r3, #0]
  if (sercom->isDataRegisterEmptyUART()) {
     878:	6920      	ldr	r0, [r4, #16]
     87a:	f001 fd93 	bl	23a4 <_ZN6SERCOM23isDataRegisterEmptyUARTEv>
     87e:	2800      	cmp	r0, #0
     880:	d01a      	beq.n	8b8 <_ZN4Uart10IrqHandlerEv+0xa6>
    if (txBuffer.available()) {
     882:	0020      	movs	r0, r4
     884:	301d      	adds	r0, #29
     886:	30ff      	adds	r0, #255	; 0xff
     888:	f7ff ff92 	bl	7b0 <_ZN11RingBufferNILi256EE9availableEv>
     88c:	2800      	cmp	r0, #0
     88e:	d022      	beq.n	8d6 <_ZN4Uart10IrqHandlerEv+0xc4>
  if(_iTail == _iHead)
     890:	2386      	movs	r3, #134	; 0x86
     892:	009b      	lsls	r3, r3, #2
     894:	18e3      	adds	r3, r4, r3
     896:	6899      	ldr	r1, [r3, #8]
     898:	685a      	ldr	r2, [r3, #4]
     89a:	4291      	cmp	r1, r2
     89c:	d018      	beq.n	8d0 <_ZN4Uart10IrqHandlerEv+0xbe>
  uint8_t value = _aucBuffer[_iTail];
     89e:	218e      	movs	r1, #142	; 0x8e
     8a0:	689a      	ldr	r2, [r3, #8]
     8a2:	0049      	lsls	r1, r1, #1
     8a4:	18a2      	adds	r2, r4, r2
     8a6:	5c51      	ldrb	r1, [r2, r1]
  _iTail = nextIndex(_iTail);
     8a8:	689a      	ldr	r2, [r3, #8]
  return (uint32_t)(index + 1) % N;
     8aa:	3201      	adds	r2, #1
     8ac:	b2d2      	uxtb	r2, r2
  _iTail = nextIndex(_iTail);
     8ae:	609a      	str	r2, [r3, #8]
      sercom->writeDataUART(data);
     8b0:	b2c9      	uxtb	r1, r1
     8b2:	6920      	ldr	r0, [r4, #16]
     8b4:	f001 fd7f 	bl	23b6 <_ZN6SERCOM13writeDataUARTEh>
  if (sercom->isUARTError()) {
     8b8:	6920      	ldr	r0, [r4, #16]
     8ba:	f001 fd5d 	bl	2378 <_ZN6SERCOM11isUARTErrorEv>
     8be:	2800      	cmp	r0, #0
     8c0:	d005      	beq.n	8ce <_ZN4Uart10IrqHandlerEv+0xbc>
    sercom->acknowledgeUARTError();
     8c2:	6920      	ldr	r0, [r4, #16]
     8c4:	f001 fd5c 	bl	2380 <_ZN6SERCOM20acknowledgeUARTErrorEv>
    sercom->clearStatusUART();
     8c8:	6920      	ldr	r0, [r4, #16]
     8ca:	f001 fd4c 	bl	2366 <_ZN6SERCOM15clearStatusUARTEv>
}
     8ce:	bd10      	pop	{r4, pc}
    return -1;
     8d0:	2101      	movs	r1, #1
     8d2:	4249      	negs	r1, r1
     8d4:	e7ec      	b.n	8b0 <_ZN4Uart10IrqHandlerEv+0x9e>
      sercom->disableDataRegisterEmptyInterruptUART();
     8d6:	6920      	ldr	r0, [r4, #16]
     8d8:	f001 fd79 	bl	23ce <_ZN6SERCOM37disableDataRegisterEmptyInterruptUARTEv>
     8dc:	e7ec      	b.n	8b8 <_ZN4Uart10IrqHandlerEv+0xa6>
	...

000008e0 <_ZN4Uart5writeEh>:
{
     8e0:	b570      	push	{r4, r5, r6, lr}
     8e2:	0004      	movs	r4, r0
  if (sercom->isDataRegisterEmptyUART() && txBuffer.available() == 0) {
     8e4:	6900      	ldr	r0, [r0, #16]
{
     8e6:	000d      	movs	r5, r1
  if (sercom->isDataRegisterEmptyUART() && txBuffer.available() == 0) {
     8e8:	f001 fd5c 	bl	23a4 <_ZN6SERCOM23isDataRegisterEmptyUARTEv>
     8ec:	2800      	cmp	r0, #0
     8ee:	d124      	bne.n	93a <_ZN4Uart5writeEh+0x5a>
  return (uint32_t)(index + 1) % N;
     8f0:	26ff      	movs	r6, #255	; 0xff
}

template <int N>
bool RingBufferN<N>::isFull()
{
  return (nextIndex(_iHead) == _iTail);
     8f2:	2386      	movs	r3, #134	; 0x86
     8f4:	009b      	lsls	r3, r3, #2
     8f6:	18e3      	adds	r3, r4, r3
     8f8:	685a      	ldr	r2, [r3, #4]
     8fa:	6899      	ldr	r1, [r3, #8]
  return (uint32_t)(index + 1) % N;
     8fc:	3201      	adds	r2, #1
     8fe:	4032      	ands	r2, r6
    while(txBuffer.isFull()) {
     900:	428a      	cmp	r2, r1
     902:	d12f      	bne.n	964 <_ZN4Uart5writeEh+0x84>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
     904:	f3ef 8310 	mrs	r3, PRIMASK
      if (interruptsEnabled) {
     908:	07db      	lsls	r3, r3, #31
     90a:	d40d      	bmi.n	928 <_ZN4Uart5writeEh+0x48>
        uint32_t exceptionNumber = (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk);
     90c:	4b1e      	ldr	r3, [pc, #120]	; (988 <_ZN4Uart5writeEh+0xa8>)
     90e:	685b      	ldr	r3, [r3, #4]
     910:	05db      	lsls	r3, r3, #23
     912:	0ddb      	lsrs	r3, r3, #23
        if (exceptionNumber == 0 ||
     914:	d0ed      	beq.n	8f2 <_ZN4Uart5writeEh+0x12>
              NVIC_GetPriority((IRQn_Type)(exceptionNumber - 16)) > SERCOM_NVIC_PRIORITY) {
     916:	3b10      	subs	r3, #16
     918:	b25b      	sxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
     91a:	2b00      	cmp	r3, #0
     91c:	db19      	blt.n	952 <_ZN4Uart5writeEh+0x72>
    return((uint32_t)(((NVIC->IP[ _IP_IDX(IRQn)] >> _BIT_SHIFT(IRQn) ) & (uint32_t)0xFFUL) >> (8U - __NVIC_PRIO_BITS)));
     91e:	089b      	lsrs	r3, r3, #2
     920:	33c0      	adds	r3, #192	; 0xc0
     922:	4a1a      	ldr	r2, [pc, #104]	; (98c <_ZN4Uart5writeEh+0xac>)
     924:	009b      	lsls	r3, r3, #2
     926:	589b      	ldr	r3, [r3, r2]
      if (sercom->isDataRegisterEmptyUART()) {
     928:	6920      	ldr	r0, [r4, #16]
     92a:	f001 fd3b 	bl	23a4 <_ZN6SERCOM23isDataRegisterEmptyUARTEv>
     92e:	2800      	cmp	r0, #0
     930:	d0df      	beq.n	8f2 <_ZN4Uart5writeEh+0x12>
        IrqHandler();
     932:	0020      	movs	r0, r4
     934:	f7ff ff6d 	bl	812 <_ZN4Uart10IrqHandlerEv>
     938:	e7db      	b.n	8f2 <_ZN4Uart5writeEh+0x12>
  if (sercom->isDataRegisterEmptyUART() && txBuffer.available() == 0) {
     93a:	0020      	movs	r0, r4
     93c:	301d      	adds	r0, #29
     93e:	30ff      	adds	r0, #255	; 0xff
     940:	f7ff ff36 	bl	7b0 <_ZN11RingBufferNILi256EE9availableEv>
     944:	2800      	cmp	r0, #0
     946:	d1d3      	bne.n	8f0 <_ZN4Uart5writeEh+0x10>
    sercom->writeDataUART(data);
     948:	0029      	movs	r1, r5
     94a:	6920      	ldr	r0, [r4, #16]
     94c:	f001 fd33 	bl	23b6 <_ZN6SERCOM13writeDataUARTEh>
  return 1;
     950:	e017      	b.n	982 <_ZN4Uart5writeEh+0xa2>
    return((uint32_t)(((SCB->SHP[_SHP_IDX(IRQn)] >> _BIT_SHIFT(IRQn) ) & (uint32_t)0xFFUL) >> (8U - __NVIC_PRIO_BITS)));
     952:	220f      	movs	r2, #15
     954:	4013      	ands	r3, r2
     956:	3b08      	subs	r3, #8
     958:	089b      	lsrs	r3, r3, #2
     95a:	4a0d      	ldr	r2, [pc, #52]	; (990 <_ZN4Uart5writeEh+0xb0>)
     95c:	009b      	lsls	r3, r3, #2
     95e:	189b      	adds	r3, r3, r2
     960:	681b      	ldr	r3, [r3, #0]
     962:	e7e1      	b.n	928 <_ZN4Uart5writeEh+0x48>
  int i = nextIndex(_iHead);
     964:	685a      	ldr	r2, [r3, #4]
  return (uint32_t)(index + 1) % N;
     966:	3201      	adds	r2, #1
     968:	4016      	ands	r6, r2
  if ( i != _iTail )
     96a:	689a      	ldr	r2, [r3, #8]
     96c:	4296      	cmp	r6, r2
     96e:	d005      	beq.n	97c <_ZN4Uart5writeEh+0x9c>
    _aucBuffer[_iHead] = c ;
     970:	218e      	movs	r1, #142	; 0x8e
     972:	685a      	ldr	r2, [r3, #4]
     974:	0049      	lsls	r1, r1, #1
     976:	18a2      	adds	r2, r4, r2
     978:	5455      	strb	r5, [r2, r1]
    _iHead = i ;
     97a:	605e      	str	r6, [r3, #4]
    sercom->enableDataRegisterEmptyInterruptUART();
     97c:	6920      	ldr	r0, [r4, #16]
     97e:	f001 fd22 	bl	23c6 <_ZN6SERCOM36enableDataRegisterEmptyInterruptUARTEv>
}
     982:	2001      	movs	r0, #1
     984:	bd70      	pop	{r4, r5, r6, pc}
     986:	46c0      	nop			; (mov r8, r8)
     988:	e000ed00 	.word	0xe000ed00
     98c:	e000e100 	.word	0xe000e100
     990:	e000ed1c 	.word	0xe000ed1c

00000994 <_ZN4Uart4readEv>:
  if(_iTail == _iHead)
     994:	0003      	movs	r3, r0
     996:	33fc      	adds	r3, #252	; 0xfc
     998:	69d9      	ldr	r1, [r3, #28]
     99a:	699a      	ldr	r2, [r3, #24]
{
     99c:	b570      	push	{r4, r5, r6, lr}
     99e:	0004      	movs	r4, r0
     9a0:	4291      	cmp	r1, r2
     9a2:	d01a      	beq.n	9da <_ZN4Uart4readEv+0x46>
  uint8_t value = _aucBuffer[_iTail];
     9a4:	69da      	ldr	r2, [r3, #28]
     9a6:	1882      	adds	r2, r0, r2
     9a8:	7d15      	ldrb	r5, [r2, #20]
  _iTail = nextIndex(_iTail);
     9aa:	69da      	ldr	r2, [r3, #28]
  return (uint32_t)(index + 1) % N;
     9ac:	3201      	adds	r2, #1
     9ae:	b2d2      	uxtb	r2, r2
  _iTail = nextIndex(_iTail);
     9b0:	61da      	str	r2, [r3, #28]
  if (uc_pinRTS != NO_RTS_PIN) {
     9b2:	238a      	movs	r3, #138	; 0x8a
     9b4:	009b      	lsls	r3, r3, #2
     9b6:	5ce3      	ldrb	r3, [r4, r3]
     9b8:	2bff      	cmp	r3, #255	; 0xff
     9ba:	d00c      	beq.n	9d6 <_ZN4Uart4readEv+0x42>
  int c = rxBuffer.read_char();
     9bc:	0020      	movs	r0, r4
     9be:	3014      	adds	r0, #20
    if (rxBuffer.availableForStore() > RTS_RX_THRESHOLD) {
     9c0:	f7ff ff11 	bl	7e6 <_ZN11RingBufferNILi256EE17availableForStoreEv>
     9c4:	280a      	cmp	r0, #10
     9c6:	dd06      	ble.n	9d6 <_ZN4Uart4readEv+0x42>
      *pul_outclrRTS = ul_pinMaskRTS;
     9c8:	238c      	movs	r3, #140	; 0x8c
     9ca:	228d      	movs	r2, #141	; 0x8d
     9cc:	009b      	lsls	r3, r3, #2
     9ce:	0092      	lsls	r2, r2, #2
     9d0:	58e3      	ldr	r3, [r4, r3]
     9d2:	58a2      	ldr	r2, [r4, r2]
     9d4:	601a      	str	r2, [r3, #0]
}
     9d6:	0028      	movs	r0, r5
     9d8:	bd70      	pop	{r4, r5, r6, pc}
    return -1;
     9da:	2501      	movs	r5, #1
     9dc:	426d      	negs	r5, r5
     9de:	e7e8      	b.n	9b2 <_ZN4Uart4readEv+0x1e>

000009e0 <_ZN7Serial_13getDescriptorER8USBSetup>:
}

int Serial_::getDescriptor(USBSetup& /* setup */)
{
	return 0;
}
     9e0:	2000      	movs	r0, #0
     9e2:	4770      	bx	lr

000009e4 <_ZThn16_N7Serial_13getDescriptorER8USBSetup>:
	};

protected:
    // Implementation of the PUSBListNode
    int getInterface(uint8_t* interfaceNum);
    int getDescriptor(USBSetup& setup);
     9e4:	b408      	push	{r3}
     9e6:	4b02      	ldr	r3, [pc, #8]	; (9f0 <_ZThn16_N7Serial_13getDescriptorER8USBSetup+0xc>)
     9e8:	469c      	mov	ip, r3
     9ea:	3810      	subs	r0, #16
     9ec:	bc08      	pop	{r3}
     9ee:	4760      	bx	ip
     9f0:	000009e1 	.word	0x000009e1

000009f4 <_ZL5utox8mPc>:

static void utox8(uint32_t val, char* s) {
     9f4:	b530      	push	{r4, r5, lr}
	for (int i = 0; i < 8; i++) {
		int d = val & 0XF;
     9f6:	250f      	movs	r5, #15
     9f8:	1dcb      	adds	r3, r1, #7
     9fa:	3901      	subs	r1, #1
     9fc:	0002      	movs	r2, r0
     9fe:	402a      	ands	r2, r5
		val = (val >> 4);

		s[7 - i] = d > 9 ? 'A' + d - 10 : '0' + d;
     a00:	0014      	movs	r4, r2
		val = (val >> 4);
     a02:	0900      	lsrs	r0, r0, #4
		s[7 - i] = d > 9 ? 'A' + d - 10 : '0' + d;
     a04:	3430      	adds	r4, #48	; 0x30
     a06:	2a09      	cmp	r2, #9
     a08:	dd01      	ble.n	a0e <_ZL5utox8mPc+0x1a>
     a0a:	3237      	adds	r2, #55	; 0x37
     a0c:	0014      	movs	r4, r2
     a0e:	701c      	strb	r4, [r3, #0]
     a10:	3b01      	subs	r3, #1
	for (int i = 0; i < 8; i++) {
     a12:	428b      	cmp	r3, r1
     a14:	d1f2      	bne.n	9fc <_ZL5utox8mPc+0x8>
	}
}
     a16:	bd30      	pop	{r4, r5, pc}

00000a18 <_ZN7Serial_12getShortNameEPc>:

uint8_t Serial_::getShortName(char* name) {
     a18:	b510      	push	{r4, lr}
     a1a:	000c      	movs	r4, r1
	#define SERIAL_NUMBER_WORD_0	*(volatile uint32_t*)(0x0080A00C)
	#define SERIAL_NUMBER_WORD_1	*(volatile uint32_t*)(0x0080A040)
	#define SERIAL_NUMBER_WORD_2	*(volatile uint32_t*)(0x0080A044)
	#define SERIAL_NUMBER_WORD_3	*(volatile uint32_t*)(0x0080A048)

	utox8(SERIAL_NUMBER_WORD_0, &name[0]);
     a1c:	4b0b      	ldr	r3, [pc, #44]	; (a4c <_ZN7Serial_12getShortNameEPc+0x34>)
     a1e:	6818      	ldr	r0, [r3, #0]
     a20:	f7ff ffe8 	bl	9f4 <_ZL5utox8mPc>
	utox8(SERIAL_NUMBER_WORD_1, &name[8]);
     a24:	0021      	movs	r1, r4
     a26:	4b0a      	ldr	r3, [pc, #40]	; (a50 <_ZN7Serial_12getShortNameEPc+0x38>)
     a28:	3108      	adds	r1, #8
     a2a:	6818      	ldr	r0, [r3, #0]
     a2c:	f7ff ffe2 	bl	9f4 <_ZL5utox8mPc>
	utox8(SERIAL_NUMBER_WORD_2, &name[16]);
     a30:	0021      	movs	r1, r4
     a32:	4b08      	ldr	r3, [pc, #32]	; (a54 <_ZN7Serial_12getShortNameEPc+0x3c>)
     a34:	3110      	adds	r1, #16
     a36:	6818      	ldr	r0, [r3, #0]
     a38:	f7ff ffdc 	bl	9f4 <_ZL5utox8mPc>
	utox8(SERIAL_NUMBER_WORD_3, &name[24]);
     a3c:	0021      	movs	r1, r4
     a3e:	4b06      	ldr	r3, [pc, #24]	; (a58 <_ZN7Serial_12getShortNameEPc+0x40>)
     a40:	3118      	adds	r1, #24
     a42:	6818      	ldr	r0, [r3, #0]
     a44:	f7ff ffd6 	bl	9f4 <_ZL5utox8mPc>
	return 32;
}
     a48:	2020      	movs	r0, #32
     a4a:	bd10      	pop	{r4, pc}
     a4c:	0080a00c 	.word	0x0080a00c
     a50:	0080a040 	.word	0x0080a040
     a54:	0080a044 	.word	0x0080a044
     a58:	0080a048 	.word	0x0080a048

00000a5c <_ZThn16_N7Serial_12getShortNameEPc>:
    bool setup(USBSetup& setup);
    uint8_t getShortName(char* name);
     a5c:	b408      	push	{r3}
     a5e:	4b02      	ldr	r3, [pc, #8]	; (a68 <_ZThn16_N7Serial_12getShortNameEPc+0xc>)
     a60:	469c      	mov	ip, r3
     a62:	3810      	subs	r0, #16
     a64:	bc08      	pop	{r3}
     a66:	4760      	bx	ip
     a68:	00000a19 	.word	0x00000a19

00000a6c <_ZN7Serial_14handleEndpointEi>:

void Serial_::handleEndpoint(int /* ep */) {
}
     a6c:	4770      	bx	lr
	...

00000a70 <_ZThn16_N7Serial_14handleEndpointEi>:
    void handleEndpoint(int ep);
     a70:	b408      	push	{r3}
     a72:	4b02      	ldr	r3, [pc, #8]	; (a7c <_ZThn16_N7Serial_14handleEndpointEi+0xc>)
     a74:	469c      	mov	ip, r3
     a76:	3810      	subs	r0, #16
     a78:	bc08      	pop	{r3}
     a7a:	4760      	bx	ip
     a7c:	00000a6d 	.word	0x00000a6d

00000a80 <_ZN7Serial_17availableForWriteEv>:
int Serial_::availableForWrite(void)
{
	// return the number of bytes left in the current bank,
	// always EP size - 1, because bank is flushed on every write
	return (EPX_SIZE - 1);
}
     a80:	203f      	movs	r0, #63	; 0x3f
     a82:	4770      	bx	lr

00000a84 <_ZN7Serial_5writeEh>:
		setWriteError();
		return 0;
	}
}

size_t Serial_::write(uint8_t c) {
     a84:	b513      	push	{r0, r1, r4, lr}
     a86:	466b      	mov	r3, sp
	return write(&c, 1);
     a88:	6802      	ldr	r2, [r0, #0]
size_t Serial_::write(uint8_t c) {
     a8a:	71d9      	strb	r1, [r3, #7]
     a8c:	3307      	adds	r3, #7
	return write(&c, 1);
     a8e:	6854      	ldr	r4, [r2, #4]
     a90:	0019      	movs	r1, r3
     a92:	2201      	movs	r2, #1
     a94:	47a0      	blx	r4
}
     a96:	bd16      	pop	{r1, r2, r4, pc}

00000a98 <_ZN7Serial_12getInterfaceEPh>:
{
     a98:	b5f0      	push	{r4, r5, r6, r7, lr}
	interfaceNum[0] += 2;	// uses 2
     a9a:	780b      	ldrb	r3, [r1, #0]
{
     a9c:	b095      	sub	sp, #84	; 0x54
	};
     a9e:	ac03      	add	r4, sp, #12
	interfaceNum[0] += 2;	// uses 2
     aa0:	3302      	adds	r3, #2
{
     aa2:	9001      	str	r0, [sp, #4]
	interfaceNum[0] += 2;	// uses 2
     aa4:	700b      	strb	r3, [r1, #0]
	};
     aa6:	2242      	movs	r2, #66	; 0x42
     aa8:	2100      	movs	r1, #0
     aaa:	0020      	movs	r0, r4
     aac:	f001 fdf1 	bl	2692 <memset>
     ab0:	2209      	movs	r2, #9
     ab2:	2504      	movs	r5, #4
     ab4:	7222      	strb	r2, [r4, #8]
     ab6:	2204      	movs	r2, #4
     ab8:	75a5      	strb	r5, [r4, #22]
     aba:	7262      	strb	r2, [r4, #9]
     abc:	2506      	movs	r5, #6
     abe:	2205      	movs	r2, #5
     ac0:	2024      	movs	r0, #36	; 0x24
     ac2:	ae02      	add	r6, sp, #8
     ac4:	7665      	strb	r5, [r4, #25]
     ac6:	7725      	strb	r5, [r4, #28]
     ac8:	1995      	adds	r5, r2, r6
     aca:	74a0      	strb	r0, [r4, #18]
     acc:	75e0      	strb	r0, [r4, #23]
     ace:	76e0      	strb	r0, [r4, #27]
     ad0:	77e8      	strb	r0, [r5, #31]
     ad2:	0030      	movs	r0, r6
     ad4:	2101      	movs	r1, #1
     ad6:	3006      	adds	r0, #6
     ad8:	77c1      	strb	r1, [r0, #31]
     ada:	0030      	movs	r0, r6
     adc:	3007      	adds	r0, #7
     ade:	77c1      	strb	r1, [r0, #31]
     ae0:	a804      	add	r0, sp, #16
     ae2:	77c1      	strb	r1, [r0, #31]
     ae4:	2009      	movs	r0, #9
     ae6:	7321      	strb	r1, [r4, #12]
     ae8:	7561      	strb	r1, [r4, #21]
     aea:	1980      	adds	r0, r0, r6
     aec:	3106      	adds	r1, #6
     aee:	77c1      	strb	r1, [r0, #31]
     af0:	200a      	movs	r0, #10
     af2:	1980      	adds	r0, r0, r6
     af4:	77c2      	strb	r2, [r0, #31]
     af6:	2003      	movs	r0, #3
     af8:	4684      	mov	ip, r0
     afa:	4665      	mov	r5, ip
     afc:	a805      	add	r0, sp, #20
     afe:	77c5      	strb	r5, [r0, #31]
     b00:	202e      	movs	r0, #46	; 0x2e
     b02:	2710      	movs	r7, #16
     b04:	1980      	adds	r0, r0, r6
     b06:	7007      	strb	r7, [r0, #0]
     b08:	202f      	movs	r0, #47	; 0x2f
     b0a:	2509      	movs	r5, #9
     b0c:	2308      	movs	r3, #8
     b0e:	1980      	adds	r0, r0, r6
     b10:	7005      	strb	r5, [r0, #0]
     b12:	2504      	movs	r5, #4
     b14:	7023      	strb	r3, [r4, #0]
     b16:	3303      	adds	r3, #3
     b18:	7063      	strb	r3, [r4, #1]
     b1a:	a80e      	add	r0, sp, #56	; 0x38
     b1c:	3b09      	subs	r3, #9
     b1e:	70e3      	strb	r3, [r4, #3]
     b20:	7123      	strb	r3, [r4, #4]
     b22:	7163      	strb	r3, [r4, #5]
     b24:	7363      	strb	r3, [r4, #13]
     b26:	73a3      	strb	r3, [r4, #14]
     b28:	7462      	strb	r2, [r4, #17]
     b2a:	7623      	strb	r3, [r4, #24]
     b2c:	76a2      	strb	r2, [r4, #26]
     b2e:	77e2      	strb	r2, [r4, #31]
     b30:	7527      	strb	r7, [r4, #20]
     b32:	8527      	strh	r7, [r4, #40]	; 0x28
     b34:	7005      	strb	r5, [r0, #0]
     b36:	2033      	movs	r0, #51	; 0x33
     b38:	0035      	movs	r5, r6
     b3a:	1980      	adds	r0, r0, r6
     b3c:	260a      	movs	r6, #10
     b3e:	7003      	strb	r3, [r0, #0]
     b40:	a80f      	add	r0, sp, #60	; 0x3c
     b42:	7006      	strb	r6, [r0, #0]
     b44:	a810      	add	r0, sp, #64	; 0x40
     b46:	7001      	strb	r1, [r0, #0]
     b48:	2039      	movs	r0, #57	; 0x39
     b4a:	1940      	adds	r0, r0, r5
     b4c:	7002      	strb	r2, [r0, #0]
     b4e:	203b      	movs	r0, #59	; 0x3b
     b50:	3635      	adds	r6, #53	; 0x35
     b52:	1976      	adds	r6, r6, r5
     b54:	7031      	strb	r1, [r6, #0]
     b56:	a912      	add	r1, sp, #72	; 0x48
     b58:	700a      	strb	r2, [r1, #0]
		D_ENDPOINT(USB_ENDPOINT_IN(CDC_ENDPOINT_ACM), USB_ENDPOINT_TYPE_INTERRUPT, 0x10, 0x10),
     b5a:	2180      	movs	r1, #128	; 0x80
	};
     b5c:	323d      	adds	r2, #61	; 0x3d
     b5e:	1940      	adds	r0, r0, r5
     b60:	1952      	adds	r2, r2, r5
     b62:	7003      	strb	r3, [r0, #0]
     b64:	7013      	strb	r3, [r2, #0]
     b66:	2040      	movs	r0, #64	; 0x40
     b68:	2200      	movs	r2, #0
		D_ENDPOINT(USB_ENDPOINT_IN(CDC_ENDPOINT_ACM), USB_ENDPOINT_TYPE_INTERRUPT, 0x10, 0x10),
     b6a:	4249      	negs	r1, r1
     b6c:	000e      	movs	r6, r1
	};
     b6e:	3341      	adds	r3, #65	; 0x41
     b70:	195b      	adds	r3, r3, r5
     b72:	7018      	strb	r0, [r3, #0]
     b74:	705a      	strb	r2, [r3, #1]
		D_IAD(pluggedInterface, 2, CDC_COMMUNICATION_INTERFACE_CLASS, CDC_ABSTRACT_CONTROL_MODEL, 0),
     b76:	9b01      	ldr	r3, [sp, #4]
	};
     b78:	8720      	strh	r0, [r4, #56]	; 0x38
		D_IAD(pluggedInterface, 2, CDC_COMMUNICATION_INTERFACE_CLASS, CDC_ABSTRACT_CONTROL_MODEL, 0),
     b7a:	7d1b      	ldrb	r3, [r3, #20]
		D_ENDPOINT(USB_ENDPOINT_IN(CDC_ENDPOINT_ACM), USB_ENDPOINT_TYPE_INTERRUPT, 0x10, 0x10),
     b7c:	9a01      	ldr	r2, [sp, #4]
	};
     b7e:	70a3      	strb	r3, [r4, #2]
     b80:	72a3      	strb	r3, [r4, #10]
     b82:	7763      	strb	r3, [r4, #29]
		D_CDCCS(CDC_UNION, CDC_ACM_INTERFACE, CDC_DATA_INTERFACE), // Communication interface is master, data interface is slave 0
     b84:	3301      	adds	r3, #1
     b86:	b2db      	uxtb	r3, r3
	};
     b88:	77a3      	strb	r3, [r4, #30]
		D_ENDPOINT(USB_ENDPOINT_IN(CDC_ENDPOINT_ACM), USB_ENDPOINT_TYPE_INTERRUPT, 0x10, 0x10),
     b8a:	7d52      	ldrb	r2, [r2, #21]
	};
     b8c:	3835      	subs	r0, #53	; 0x35
		D_ENDPOINT(USB_ENDPOINT_IN(CDC_ENDPOINT_ACM), USB_ENDPOINT_TYPE_INTERRUPT, 0x10, 0x10),
     b8e:	4316      	orrs	r6, r2
	};
     b90:	1940      	adds	r0, r0, r5
     b92:	77c6      	strb	r6, [r0, #31]
     b94:	2031      	movs	r0, #49	; 0x31
     b96:	1940      	adds	r0, r0, r5
     b98:	7003      	strb	r3, [r0, #0]
     b9a:	233a      	movs	r3, #58	; 0x3a
		D_ENDPOINT(USB_ENDPOINT_OUT(CDC_ENDPOINT_OUT), USB_ENDPOINT_TYPE_BULK, EPX_SIZE, 0),
     b9c:	1c50      	adds	r0, r2, #1
	};
     b9e:	195b      	adds	r3, r3, r5
     ba0:	7018      	strb	r0, [r3, #0]
     ba2:	2341      	movs	r3, #65	; 0x41
		D_ENDPOINT(USB_ENDPOINT_IN (CDC_ENDPOINT_IN), USB_ENDPOINT_TYPE_BULK, EPX_SIZE, 0)
     ba4:	3202      	adds	r2, #2
     ba6:	430a      	orrs	r2, r1
	};
     ba8:	195b      	adds	r3, r3, r5
     baa:	701a      	strb	r2, [r3, #0]
	return USBDevice.sendControl(&_cdcInterface, sizeof(_cdcInterface));
     bac:	0021      	movs	r1, r4
     bae:	2242      	movs	r2, #66	; 0x42
     bb0:	4802      	ldr	r0, [pc, #8]	; (bbc <_ZN7Serial_12getInterfaceEPh+0x124>)
     bb2:	f000 ff57 	bl	1a64 <_ZN14USBDeviceClass11sendControlEPKvm>
}
     bb6:	b015      	add	sp, #84	; 0x54
     bb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
     bba:	46c0      	nop			; (mov r8, r8)
     bbc:	2000012c 	.word	0x2000012c

00000bc0 <_ZThn16_N7Serial_12getInterfaceEPh>:
    int getInterface(uint8_t* interfaceNum);
     bc0:	b408      	push	{r3}
     bc2:	4b02      	ldr	r3, [pc, #8]	; (bcc <_ZThn16_N7Serial_12getInterfaceEPh+0xc>)
     bc4:	469c      	mov	ip, r3
     bc6:	3810      	subs	r0, #16
     bc8:	bc08      	pop	{r3}
     bca:	4760      	bx	ip
     bcc:	00000a99 	.word	0x00000a99

00000bd0 <_ZN7Serial_5setupER8USBSetup>:
{
     bd0:	b570      	push	{r4, r5, r6, lr}
	if (CDC_ACM_INTERFACE != i) {
     bd2:	790a      	ldrb	r2, [r1, #4]
     bd4:	7d03      	ldrb	r3, [r0, #20]
{
     bd6:	000c      	movs	r4, r1
		return false;
     bd8:	2500      	movs	r5, #0
	if (CDC_ACM_INTERFACE != i) {
     bda:	429a      	cmp	r2, r3
     bdc:	d10b      	bne.n	bf6 <_ZN7Serial_5setupER8USBSetup+0x26>
	uint8_t requestType = setup.bmRequestType;
     bde:	780b      	ldrb	r3, [r1, #0]
	uint8_t r = setup.bRequest;
     be0:	784e      	ldrb	r6, [r1, #1]
	if (requestType == REQUEST_DEVICETOHOST_CLASS_INTERFACE)
     be2:	2ba1      	cmp	r3, #161	; 0xa1
     be4:	d109      	bne.n	bfa <_ZN7Serial_5setupER8USBSetup+0x2a>
		if (r == CDC_GET_LINE_CODING)
     be6:	2e21      	cmp	r6, #33	; 0x21
     be8:	d105      	bne.n	bf6 <_ZN7Serial_5setupER8USBSetup+0x26>
			USBDevice.sendControl((void*)&_usbLineInfo, 7);
     bea:	2207      	movs	r2, #7
     bec:	491f      	ldr	r1, [pc, #124]	; (c6c <_ZN7Serial_5setupER8USBSetup+0x9c>)
     bee:	4820      	ldr	r0, [pc, #128]	; (c70 <_ZN7Serial_5setupER8USBSetup+0xa0>)
     bf0:	f000 ff38 	bl	1a64 <_ZN14USBDeviceClass11sendControlEPKvm>
			return true;
     bf4:	3501      	adds	r5, #1
}
     bf6:	0028      	movs	r0, r5
     bf8:	bd70      	pop	{r4, r5, r6, pc}
	if (requestType == REQUEST_HOSTTODEVICE_CLASS_INTERFACE)
     bfa:	2b21      	cmp	r3, #33	; 0x21
     bfc:	d1fb      	bne.n	bf6 <_ZN7Serial_5setupER8USBSetup+0x26>
		if (r == CDC_SET_LINE_CODING)
     bfe:	2e20      	cmp	r6, #32
     c00:	d119      	bne.n	c36 <_ZN7Serial_5setupER8USBSetup+0x66>
			USBDevice.recvControl((void*)&_usbLineInfo, 7);
     c02:	2207      	movs	r2, #7
     c04:	4919      	ldr	r1, [pc, #100]	; (c6c <_ZN7Serial_5setupER8USBSetup+0x9c>)
     c06:	481a      	ldr	r0, [pc, #104]	; (c70 <_ZN7Serial_5setupER8USBSetup+0xa0>)
     c08:	f000 fe62 	bl	18d0 <_ZN14USBDeviceClass11recvControlEPvm>
			if (_usbLineInfo.dwDTERate == 1200 && (_usbLineInfo.lineState & CDC_LINESTATE_DTR) == 0)
     c0c:	4b17      	ldr	r3, [pc, #92]	; (c6c <_ZN7Serial_5setupER8USBSetup+0x9c>)
     c0e:	781a      	ldrb	r2, [r3, #0]
     c10:	7859      	ldrb	r1, [r3, #1]
     c12:	0209      	lsls	r1, r1, #8
     c14:	4311      	orrs	r1, r2
     c16:	789a      	ldrb	r2, [r3, #2]
     c18:	0412      	lsls	r2, r2, #16
     c1a:	4311      	orrs	r1, r2
     c1c:	78da      	ldrb	r2, [r3, #3]
     c1e:	0612      	lsls	r2, r2, #24
     c20:	430a      	orrs	r2, r1
     c22:	2196      	movs	r1, #150	; 0x96
     c24:	00c9      	lsls	r1, r1, #3
     c26:	428a      	cmp	r2, r1
     c28:	d102      	bne.n	c30 <_ZN7Serial_5setupER8USBSetup+0x60>
     c2a:	79db      	ldrb	r3, [r3, #7]
     c2c:	07db      	lsls	r3, r3, #31
     c2e:	d508      	bpl.n	c42 <_ZN7Serial_5setupER8USBSetup+0x72>
				cancelReset();
     c30:	f7ff fbba 	bl	3a8 <cancelReset>
     c34:	e008      	b.n	c48 <_ZN7Serial_5setupER8USBSetup+0x78>
		if (r == CDC_SET_CONTROL_LINE_STATE)
     c36:	2e22      	cmp	r6, #34	; 0x22
     c38:	d10a      	bne.n	c50 <_ZN7Serial_5setupER8USBSetup+0x80>
			_usbLineInfo.lineState = setup.wValueL;
     c3a:	788a      	ldrb	r2, [r1, #2]
     c3c:	4b0b      	ldr	r3, [pc, #44]	; (c6c <_ZN7Serial_5setupER8USBSetup+0x9c>)
     c3e:	71da      	strb	r2, [r3, #7]
     c40:	e7e4      	b.n	c0c <_ZN7Serial_5setupER8USBSetup+0x3c>
				initiateReset(250);
     c42:	20fa      	movs	r0, #250	; 0xfa
     c44:	f7ff fba6 	bl	394 <initiateReset>
			USBDevice.sendZlp(0);
     c48:	2100      	movs	r1, #0
     c4a:	4809      	ldr	r0, [pc, #36]	; (c70 <_ZN7Serial_5setupER8USBSetup+0xa0>)
     c4c:	f001 f820 	bl	1c90 <_ZN14USBDeviceClass7sendZlpEm>
		return true;
     c50:	2501      	movs	r5, #1
		if (CDC_SEND_BREAK == r)
     c52:	2e23      	cmp	r6, #35	; 0x23
     c54:	d1cf      	bne.n	bf6 <_ZN7Serial_5setupER8USBSetup+0x26>
			breakValue = ((uint16_t)setup.wValueH << 8) | setup.wValueL;
     c56:	78e3      	ldrb	r3, [r4, #3]
     c58:	78a2      	ldrb	r2, [r4, #2]
     c5a:	021b      	lsls	r3, r3, #8
     c5c:	4313      	orrs	r3, r2
     c5e:	4a05      	ldr	r2, [pc, #20]	; (c74 <_ZN7Serial_5setupER8USBSetup+0xa4>)
			USBDevice.sendZlp(0);
     c60:	2100      	movs	r1, #0
     c62:	4803      	ldr	r0, [pc, #12]	; (c70 <_ZN7Serial_5setupER8USBSetup+0xa0>)
			breakValue = ((uint16_t)setup.wValueH << 8) | setup.wValueL;
     c64:	6013      	str	r3, [r2, #0]
			USBDevice.sendZlp(0);
     c66:	f001 f813 	bl	1c90 <_ZN14USBDeviceClass7sendZlpEm>
     c6a:	e7c4      	b.n	bf6 <_ZN7Serial_5setupER8USBSetup+0x26>
     c6c:	20000008 	.word	0x20000008
     c70:	2000012c 	.word	0x2000012c
     c74:	20000004 	.word	0x20000004

00000c78 <_ZThn16_N7Serial_5setupER8USBSetup>:
    bool setup(USBSetup& setup);
     c78:	b408      	push	{r3}
     c7a:	4b02      	ldr	r3, [pc, #8]	; (c84 <_ZThn16_N7Serial_5setupER8USBSetup+0xc>)
     c7c:	469c      	mov	ip, r3
     c7e:	3810      	subs	r0, #16
     c80:	bc08      	pop	{r3}
     c82:	4760      	bx	ip
     c84:	00000bd1 	.word	0x00000bd1

00000c88 <_ZN7Serial_9availableEv>:
{
     c88:	b510      	push	{r4, lr}
	return usb.available(CDC_ENDPOINT_OUT) + (_serialPeek != -1);
     c8a:	7d41      	ldrb	r1, [r0, #21]
     c8c:	6a00      	ldr	r0, [r0, #32]
     c8e:	3101      	adds	r1, #1
     c90:	f000 fd48 	bl	1724 <_ZN14USBDeviceClass9availableEm>
     c94:	4b03      	ldr	r3, [pc, #12]	; (ca4 <_ZN7Serial_9availableEv+0x1c>)
     c96:	681b      	ldr	r3, [r3, #0]
     c98:	3301      	adds	r3, #1
     c9a:	1e5a      	subs	r2, r3, #1
     c9c:	4193      	sbcs	r3, r2
     c9e:	1818      	adds	r0, r3, r0
}
     ca0:	bd10      	pop	{r4, pc}
     ca2:	46c0      	nop			; (mov r8, r8)
     ca4:	20000010 	.word	0x20000010

00000ca8 <_ZN7Serial_5flushEv>:
{
     ca8:	b510      	push	{r4, lr}
	usb.flush(CDC_ENDPOINT_IN);
     caa:	7d41      	ldrb	r1, [r0, #21]
     cac:	6a00      	ldr	r0, [r0, #32]
     cae:	3102      	adds	r1, #2
     cb0:	f000 fd4e 	bl	1750 <_ZN14USBDeviceClass5flushEm>
}
     cb4:	bd10      	pop	{r4, pc}

00000cb6 <_ZN7Serial_5clearEv>:
void Serial_::clear(void) {
     cb6:	b510      	push	{r4, lr}
	usb.clear(CDC_ENDPOINT_IN);
     cb8:	7d41      	ldrb	r1, [r0, #21]
     cba:	6a00      	ldr	r0, [r0, #32]
     cbc:	3102      	adds	r1, #2
     cbe:	f000 fd15 	bl	16ec <_ZN14USBDeviceClass5clearEm>
}
     cc2:	bd10      	pop	{r4, pc}

00000cc4 <_ZN7Serial_5writeEPKhj>:
{
     cc4:	b570      	push	{r4, r5, r6, lr}
     cc6:	000d      	movs	r5, r1
	uint32_t r = usb.send(CDC_ENDPOINT_IN, buffer, size);
     cc8:	7d41      	ldrb	r1, [r0, #21]
{
     cca:	0004      	movs	r4, r0
     ccc:	0013      	movs	r3, r2
	uint32_t r = usb.send(CDC_ENDPOINT_IN, buffer, size);
     cce:	3102      	adds	r1, #2
     cd0:	002a      	movs	r2, r5
     cd2:	6a00      	ldr	r0, [r0, #32]
     cd4:	f000 fe10 	bl	18f8 <_ZN14USBDeviceClass4sendEmPKvm>
	if (r > 0) {
     cd8:	2800      	cmp	r0, #0
     cda:	d101      	bne.n	ce0 <_ZN7Serial_5writeEPKhj+0x1c>
    void setWriteError(int err = 1) { write_error = err; }
     cdc:	2301      	movs	r3, #1
     cde:	6063      	str	r3, [r4, #4]
}
     ce0:	bd70      	pop	{r4, r5, r6, pc}
	...

00000ce4 <_ZN7Serial_4peekEv>:
{
     ce4:	b510      	push	{r4, lr}
	if (_serialPeek != -1)
     ce6:	4c05      	ldr	r4, [pc, #20]	; (cfc <_ZN7Serial_4peekEv+0x18>)
     ce8:	6823      	ldr	r3, [r4, #0]
     cea:	1c5a      	adds	r2, r3, #1
     cec:	d104      	bne.n	cf8 <_ZN7Serial_4peekEv+0x14>
	_serialPeek = read();
     cee:	6803      	ldr	r3, [r0, #0]
     cf0:	695b      	ldr	r3, [r3, #20]
     cf2:	4798      	blx	r3
     cf4:	0003      	movs	r3, r0
     cf6:	6020      	str	r0, [r4, #0]
}
     cf8:	0018      	movs	r0, r3
     cfa:	bd10      	pop	{r4, pc}
     cfc:	20000010 	.word	0x20000010

00000d00 <_ZN7Serial_4readEv>:
	if (_serialPeek != -1) {
     d00:	4a07      	ldr	r2, [pc, #28]	; (d20 <_ZN7Serial_4readEv+0x20>)
{
     d02:	0003      	movs	r3, r0
	if (_serialPeek != -1) {
     d04:	6810      	ldr	r0, [r2, #0]
{
     d06:	b510      	push	{r4, lr}
	if (_serialPeek != -1) {
     d08:	1c41      	adds	r1, r0, #1
     d0a:	d003      	beq.n	d14 <_ZN7Serial_4readEv+0x14>
		_serialPeek = -1;
     d0c:	2301      	movs	r3, #1
     d0e:	425b      	negs	r3, r3
     d10:	6013      	str	r3, [r2, #0]
}
     d12:	bd10      	pop	{r4, pc}
	return usb.recv(CDC_ENDPOINT_OUT);
     d14:	7d59      	ldrb	r1, [r3, #21]
     d16:	6a18      	ldr	r0, [r3, #32]
     d18:	3101      	adds	r1, #1
     d1a:	f000 fd9d 	bl	1858 <_ZN14USBDeviceClass4recvEm>
     d1e:	e7f8      	b.n	d12 <_ZN7Serial_4readEv+0x12>
     d20:	20000010 	.word	0x20000010

00000d24 <_ZN7Serial_C1ER14USBDeviceClass>:
     d24:	23fa      	movs	r3, #250	; 0xfa
     d26:	009b      	lsls	r3, r3, #2
Serial_::Serial_(USBDeviceClass &_usb) : PluggableUSBModule(3, 2, epType), usb(_usb), stalled(false)
     d28:	b570      	push	{r4, r5, r6, lr}
     d2a:	0004      	movs	r4, r0
     d2c:	6083      	str	r3, [r0, #8]
#if defined(USBCON)

class PluggableUSBModule {
public:
  PluggableUSBModule(uint8_t numEps, uint8_t numIfs, uint32_t *epType) :
    numEndpoints(numEps), numInterfaces(numIfs), endpointType(epType)
     d2e:	2303      	movs	r3, #3
     d30:	7583      	strb	r3, [r0, #22]
     d32:	0023      	movs	r3, r4
    Print() : write_error(0) {}
     d34:	2200      	movs	r2, #0
     d36:	3328      	adds	r3, #40	; 0x28
     d38:	6042      	str	r2, [r0, #4]
     d3a:	61a3      	str	r3, [r4, #24]
     d3c:	4b0c      	ldr	r3, [pc, #48]	; (d70 <_ZN7Serial_C1ER14USBDeviceClass+0x4c>)
     d3e:	2002      	movs	r0, #2
     d40:	001d      	movs	r5, r3
     d42:	3344      	adds	r3, #68	; 0x44
     d44:	6123      	str	r3, [r4, #16]
     d46:	3508      	adds	r5, #8
     d48:	1d63      	adds	r3, r4, #5
     d4a:	61e2      	str	r2, [r4, #28]
     d4c:	6025      	str	r5, [r4, #0]
     d4e:	6221      	str	r1, [r4, #32]
     d50:	75e0      	strb	r0, [r4, #23]
     d52:	77da      	strb	r2, [r3, #31]
  epType[0] = USB_ENDPOINT_TYPE_INTERRUPT | USB_ENDPOINT_IN(0);
     d54:	2383      	movs	r3, #131	; 0x83
     d56:	62a3      	str	r3, [r4, #40]	; 0x28
  epType[2] = USB_ENDPOINT_TYPE_BULK | USB_ENDPOINT_IN(0);
     d58:	3b01      	subs	r3, #1
     d5a:	6323      	str	r3, [r4, #48]	; 0x30
  epType[1] = USB_ENDPOINT_TYPE_BULK | USB_ENDPOINT_OUT(0);
     d5c:	62e0      	str	r0, [r4, #44]	; 0x2c
  PluggableUSB().plug(this);
     d5e:	f000 f8ad 	bl	ebc <_Z12PluggableUSBv>
Serial_::Serial_(USBDeviceClass &_usb) : PluggableUSBModule(3, 2, epType), usb(_usb), stalled(false)
     d62:	0021      	movs	r1, r4
     d64:	3110      	adds	r1, #16
  PluggableUSB().plug(this);
     d66:	f000 f87d 	bl	e64 <_ZN13PluggableUSB_4plugEP18PluggableUSBModule>
}
     d6a:	0020      	movs	r0, r4
     d6c:	bd70      	pop	{r4, r5, r6, pc}
     d6e:	46c0      	nop			; (mov r8, r8)
     d70:	000028a0 	.word	0x000028a0

00000d74 <_ZN7Serial_15enableInterruptEv>:
void Serial_::enableInterrupt() {
     d74:	b510      	push	{r4, lr}
	usbd.epBank1EnableTransferComplete(CDC_ENDPOINT_ACM);
     d76:	7d43      	ldrb	r3, [r0, #21]
	inline void epBank0EnableStalled(ep_t ep)          { usb.DeviceEndpoint[ep].EPINTENSET.bit.STALL0 = 1; }
	inline void epBank1EnableStalled(ep_t ep)          { usb.DeviceEndpoint[ep].EPINTENSET.bit.STALL1 = 1; }
	inline void epBank0EnableTransferFailed(ep_t ep)   { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRFAIL0 = 1; }
	inline void epBank1EnableTransferFailed(ep_t ep)   { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRFAIL1 = 1; }
	inline void epBank0EnableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRCPT0 = 1; }
	inline void epBank1EnableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRCPT1 = 1; }
     d78:	4a09      	ldr	r2, [pc, #36]	; (da0 <_ZN7Serial_15enableInterruptEv+0x2c>)
     d7a:	2002      	movs	r0, #2
     d7c:	0159      	lsls	r1, r3, #5
	usbd.epBank0EnableTransferComplete(CDC_ENDPOINT_OUT);
     d7e:	3301      	adds	r3, #1
     d80:	6812      	ldr	r2, [r2, #0]
	inline void epBank0EnableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRCPT0 = 1; }
     d82:	b2db      	uxtb	r3, r3
     d84:	015b      	lsls	r3, r3, #5
	inline void epBank1EnableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRCPT1 = 1; }
     d86:	1851      	adds	r1, r2, r1
	inline void epBank0EnableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRCPT0 = 1; }
     d88:	18d3      	adds	r3, r2, r3
     d8a:	2201      	movs	r2, #1
	inline void epBank1EnableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRCPT1 = 1; }
     d8c:	31ff      	adds	r1, #255	; 0xff
     d8e:	7a8c      	ldrb	r4, [r1, #10]
	inline void epBank0EnableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRCPT0 = 1; }
     d90:	33ff      	adds	r3, #255	; 0xff
	inline void epBank1EnableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRCPT1 = 1; }
     d92:	4320      	orrs	r0, r4
     d94:	7288      	strb	r0, [r1, #10]
	inline void epBank0EnableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRCPT0 = 1; }
     d96:	7a99      	ldrb	r1, [r3, #10]
     d98:	430a      	orrs	r2, r1
     d9a:	729a      	strb	r2, [r3, #10]
}
     d9c:	bd10      	pop	{r4, pc}
     d9e:	46c0      	nop			; (mov r8, r8)
     da0:	200005e4 	.word	0x200005e4

00000da4 <_ZN7Serial_5beginEm>:
}
     da4:	4770      	bx	lr
	...

00000da8 <_GLOBAL__sub_I__ZN7Serial_12getInterfaceEPh>:

bool Serial_::rts() {
	return ((_usbLineInfo.lineState & CDC_LINESTATE_RTS) == CDC_LINESTATE_RTS);
}

Serial_ SerialUSB(USBDevice);
     da8:	b510      	push	{r4, lr}
     daa:	4902      	ldr	r1, [pc, #8]	; (db4 <_GLOBAL__sub_I__ZN7Serial_12getInterfaceEPh+0xc>)
     dac:	4802      	ldr	r0, [pc, #8]	; (db8 <_GLOBAL__sub_I__ZN7Serial_12getInterfaceEPh+0x10>)
     dae:	f7ff ffb9 	bl	d24 <_ZN7Serial_C1ER14USBDeviceClass>
     db2:	bd10      	pop	{r4, pc}
     db4:	2000012c 	.word	0x2000012c
     db8:	200000c4 	.word	0x200000c4

00000dbc <_ZN13PluggableUSB_12getInterfaceEPh>:
#if defined(USBCON) && defined(PLUGGABLE_USB_ENABLED)

extern uint32_t EndPoints[];

int PluggableUSB_::getInterface(uint8_t* interfaceCount)
{
     dbc:	b570      	push	{r4, r5, r6, lr}
     dbe:	000e      	movs	r6, r1
	int sent = 0;
     dc0:	2500      	movs	r5, #0
	PluggableUSBModule* node;
	for (node = rootNode; node; node = node->next) {
     dc2:	6844      	ldr	r4, [r0, #4]
     dc4:	2c00      	cmp	r4, #0
     dc6:	d00b      	beq.n	de0 <_ZN13PluggableUSB_12getInterfaceEPh+0x24>
		int res = node->getInterface(interfaceCount);
     dc8:	6823      	ldr	r3, [r4, #0]
     dca:	0031      	movs	r1, r6
     dcc:	685b      	ldr	r3, [r3, #4]
     dce:	0020      	movs	r0, r4
     dd0:	4798      	blx	r3
		if (res < 0)
     dd2:	2800      	cmp	r0, #0
     dd4:	db02      	blt.n	ddc <_ZN13PluggableUSB_12getInterfaceEPh+0x20>
			return -1;
		sent += res;
     dd6:	182d      	adds	r5, r5, r0
	for (node = rootNode; node; node = node->next) {
     dd8:	68e4      	ldr	r4, [r4, #12]
     dda:	e7f3      	b.n	dc4 <_ZN13PluggableUSB_12getInterfaceEPh+0x8>
			return -1;
     ddc:	2501      	movs	r5, #1
     dde:	426d      	negs	r5, r5
	}
	return sent;
}
     de0:	0028      	movs	r0, r5
     de2:	bd70      	pop	{r4, r5, r6, pc}

00000de4 <_ZN13PluggableUSB_13getDescriptorER8USBSetup>:

int PluggableUSB_::getDescriptor(USBSetup& setup)
{
     de4:	b570      	push	{r4, r5, r6, lr}
     de6:	000d      	movs	r5, r1
	PluggableUSBModule* node;
	for (node = rootNode; node; node = node->next) {
     de8:	6844      	ldr	r4, [r0, #4]
     dea:	2c00      	cmp	r4, #0
     dec:	d008      	beq.n	e00 <_ZN13PluggableUSB_13getDescriptorER8USBSetup+0x1c>
		int ret = node->getDescriptor(setup);
     dee:	6823      	ldr	r3, [r4, #0]
     df0:	0029      	movs	r1, r5
     df2:	689b      	ldr	r3, [r3, #8]
     df4:	0020      	movs	r0, r4
     df6:	4798      	blx	r3
		// ret!=0 -> request has been processed
		if (ret)
     df8:	2800      	cmp	r0, #0
     dfa:	d102      	bne.n	e02 <_ZN13PluggableUSB_13getDescriptorER8USBSetup+0x1e>
	for (node = rootNode; node; node = node->next) {
     dfc:	68e4      	ldr	r4, [r4, #12]
     dfe:	e7f4      	b.n	dea <_ZN13PluggableUSB_13getDescriptorER8USBSetup+0x6>
			return ret;
	}
	return 0;
     e00:	0020      	movs	r0, r4
}
     e02:	bd70      	pop	{r4, r5, r6, pc}

00000e04 <_ZN13PluggableUSB_12getShortNameEPc>:

uint8_t PluggableUSB_::getShortName(char *iSerialNum)
{
     e04:	b570      	push	{r4, r5, r6, lr}
     e06:	000d      	movs	r5, r1
	PluggableUSBModule* node;
	uint8_t size = 0;
     e08:	2600      	movs	r6, #0
	for (node = rootNode; node; node = node->next) {
     e0a:	6844      	ldr	r4, [r0, #4]
     e0c:	2c00      	cmp	r4, #0
     e0e:	d009      	beq.n	e24 <_ZN13PluggableUSB_12getShortNameEPc+0x20>
		uint8_t len = node->getShortName(iSerialNum);
     e10:	6823      	ldr	r3, [r4, #0]
     e12:	0029      	movs	r1, r5
     e14:	0020      	movs	r0, r4
     e16:	691b      	ldr	r3, [r3, #16]
     e18:	4798      	blx	r3
		iSerialNum += len;
		size += len;
     e1a:	1836      	adds	r6, r6, r0
		iSerialNum += len;
     e1c:	182d      	adds	r5, r5, r0
		size += len;
     e1e:	b2f6      	uxtb	r6, r6
	for (node = rootNode; node; node = node->next) {
     e20:	68e4      	ldr	r4, [r4, #12]
     e22:	e7f3      	b.n	e0c <_ZN13PluggableUSB_12getShortNameEPc+0x8>
	}
	*iSerialNum = 0;
	return size;
}
     e24:	0030      	movs	r0, r6
	*iSerialNum = 0;
     e26:	702c      	strb	r4, [r5, #0]
}
     e28:	bd70      	pop	{r4, r5, r6, pc}

00000e2a <_ZN13PluggableUSB_5setupER8USBSetup>:

bool PluggableUSB_::setup(USBSetup& setup)
{
     e2a:	b570      	push	{r4, r5, r6, lr}
     e2c:	000d      	movs	r5, r1
	PluggableUSBModule* node;
	for (node = rootNode; node; node = node->next) {
     e2e:	6844      	ldr	r4, [r0, #4]
     e30:	2c00      	cmp	r4, #0
     e32:	d008      	beq.n	e46 <_ZN13PluggableUSB_5setupER8USBSetup+0x1c>
		if (node->setup(setup)) {
     e34:	6823      	ldr	r3, [r4, #0]
     e36:	0029      	movs	r1, r5
     e38:	681b      	ldr	r3, [r3, #0]
     e3a:	0020      	movs	r0, r4
     e3c:	4798      	blx	r3
     e3e:	2800      	cmp	r0, #0
     e40:	d102      	bne.n	e48 <_ZN13PluggableUSB_5setupER8USBSetup+0x1e>
	for (node = rootNode; node; node = node->next) {
     e42:	68e4      	ldr	r4, [r4, #12]
     e44:	e7f4      	b.n	e30 <_ZN13PluggableUSB_5setupER8USBSetup+0x6>
			return true;
		}
	}
	return false;
     e46:	0020      	movs	r0, r4
}
     e48:	bd70      	pop	{r4, r5, r6, pc}

00000e4a <_ZN13PluggableUSB_14handleEndpointEi>:

void PluggableUSB_::handleEndpoint(int ep)
{
     e4a:	b570      	push	{r4, r5, r6, lr}
     e4c:	000d      	movs	r5, r1
	PluggableUSBModule* node;
	for (node = rootNode; node; node = node->next) {
     e4e:	6844      	ldr	r4, [r0, #4]
     e50:	2c00      	cmp	r4, #0
     e52:	d006      	beq.n	e62 <_ZN13PluggableUSB_14handleEndpointEi+0x18>
		node->handleEndpoint(ep);
     e54:	6823      	ldr	r3, [r4, #0]
     e56:	0020      	movs	r0, r4
     e58:	68db      	ldr	r3, [r3, #12]
     e5a:	0029      	movs	r1, r5
     e5c:	4798      	blx	r3
	for (node = rootNode; node; node = node->next) {
     e5e:	68e4      	ldr	r4, [r4, #12]
     e60:	e7f6      	b.n	e50 <_ZN13PluggableUSB_14handleEndpointEi+0x6>
	}
}
     e62:	bd70      	pop	{r4, r5, r6, pc}

00000e64 <_ZN13PluggableUSB_4plugEP18PluggableUSBModule>:

bool PluggableUSB_::plug(PluggableUSBModule *node)
{
     e64:	b5f0      	push	{r4, r5, r6, r7, lr}
	if ((lastEp + node->numEndpoints) > USB_ENDPOINTS) {
     e66:	798c      	ldrb	r4, [r1, #6]
     e68:	7845      	ldrb	r5, [r0, #1]
{
     e6a:	0003      	movs	r3, r0
	if ((lastEp + node->numEndpoints) > USB_ENDPOINTS) {
     e6c:	192a      	adds	r2, r5, r4
		return false;
     e6e:	2000      	movs	r0, #0
	if ((lastEp + node->numEndpoints) > USB_ENDPOINTS) {
     e70:	2a07      	cmp	r2, #7
     e72:	dc1f      	bgt.n	eb4 <_ZN13PluggableUSB_4plugEP18PluggableUSBModule+0x50>
	}

	if (!rootNode) {
     e74:	685a      	ldr	r2, [r3, #4]
     e76:	4282      	cmp	r2, r0
     e78:	d116      	bne.n	ea8 <_ZN13PluggableUSB_4plugEP18PluggableUSBModule+0x44>
		rootNode = node;
     e7a:	6059      	str	r1, [r3, #4]
			current = current->next;
		}
		current->next = node;
	}

	node->pluggedInterface = lastIf;
     e7c:	781a      	ldrb	r2, [r3, #0]
	node->pluggedEndpoint = lastEp;
	lastIf += node->numInterfaces;
     e7e:	79c8      	ldrb	r0, [r1, #7]
	node->pluggedInterface = lastIf;
     e80:	710a      	strb	r2, [r1, #4]
	lastIf += node->numInterfaces;
     e82:	1812      	adds	r2, r2, r0
	node->pluggedEndpoint = lastEp;
     e84:	714d      	strb	r5, [r1, #5]
	lastIf += node->numInterfaces;
     e86:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < node->numEndpoints; i++) {
     e88:	2200      	movs	r2, #0
		EndPoints[lastEp] = node->endpointType[i];
     e8a:	4d0b      	ldr	r5, [pc, #44]	; (eb8 <_ZN13PluggableUSB_4plugEP18PluggableUSBModule+0x54>)
	for (uint8_t i = 0; i < node->numEndpoints; i++) {
     e8c:	4294      	cmp	r4, r2
     e8e:	dd10      	ble.n	eb2 <_ZN13PluggableUSB_4plugEP18PluggableUSBModule+0x4e>
		EndPoints[lastEp] = node->endpointType[i];
     e90:	688f      	ldr	r7, [r1, #8]
     e92:	7858      	ldrb	r0, [r3, #1]
     e94:	0096      	lsls	r6, r2, #2
     e96:	59f7      	ldr	r7, [r6, r7]
	for (uint8_t i = 0; i < node->numEndpoints; i++) {
     e98:	3201      	adds	r2, #1
		EndPoints[lastEp] = node->endpointType[i];
     e9a:	0086      	lsls	r6, r0, #2
		lastEp++;
     e9c:	3001      	adds	r0, #1
		EndPoints[lastEp] = node->endpointType[i];
     e9e:	5177      	str	r7, [r6, r5]
	for (uint8_t i = 0; i < node->numEndpoints; i++) {
     ea0:	b2d2      	uxtb	r2, r2
		lastEp++;
     ea2:	7058      	strb	r0, [r3, #1]
	for (uint8_t i = 0; i < node->numEndpoints; i++) {
     ea4:	e7f2      	b.n	e8c <_ZN13PluggableUSB_4plugEP18PluggableUSBModule+0x28>
     ea6:	0002      	movs	r2, r0
		while (current->next) {
     ea8:	68d0      	ldr	r0, [r2, #12]
     eaa:	2800      	cmp	r0, #0
     eac:	d1fb      	bne.n	ea6 <_ZN13PluggableUSB_4plugEP18PluggableUSBModule+0x42>
		current->next = node;
     eae:	60d1      	str	r1, [r2, #12]
     eb0:	e7e4      	b.n	e7c <_ZN13PluggableUSB_4plugEP18PluggableUSBModule+0x18>
	}
	return true;
     eb2:	2001      	movs	r0, #1
	// restart USB layer???
}
     eb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
     eb6:	46c0      	nop			; (mov r8, r8)
     eb8:	20000104 	.word	0x20000104

00000ebc <_Z12PluggableUSBv>:

PluggableUSB_& PluggableUSB()
{
	static PluggableUSB_ obj;
     ebc:	2201      	movs	r2, #1
     ebe:	4905      	ldr	r1, [pc, #20]	; (ed4 <_Z12PluggableUSBv+0x18>)
     ec0:	4805      	ldr	r0, [pc, #20]	; (ed8 <_Z12PluggableUSBv+0x1c>)
     ec2:	680b      	ldr	r3, [r1, #0]
     ec4:	4013      	ands	r3, r2
     ec6:	d103      	bne.n	ed0 <_Z12PluggableUSBv+0x14>
	return obj;
}

PluggableUSB_::PluggableUSB_() : lastIf(0), lastEp(1), rootNode(NULL)
     ec8:	7003      	strb	r3, [r0, #0]
     eca:	7042      	strb	r2, [r0, #1]
     ecc:	6043      	str	r3, [r0, #4]
	static PluggableUSB_ obj;
     ece:	600a      	str	r2, [r1, #0]
}
     ed0:	4770      	bx	lr
     ed2:	46c0      	nop			; (mov r8, r8)
     ed4:	200000f8 	.word	0x200000f8
     ed8:	200000fc 	.word	0x200000fc

00000edc <_ZN26DoubleBufferedEPOutHandlerD1Ev>:

		release();
	}

	virtual ~DoubleBufferedEPOutHandler() {
	}
     edc:	4770      	bx	lr

00000ede <_ZN26DoubleBufferedEPOutHandlerD0Ev>:
	virtual ~DoubleBufferedEPOutHandler() {
     ede:	b510      	push	{r4, lr}
     ee0:	0004      	movs	r4, r0
	}
     ee2:	f001 f9f1 	bl	22c8 <_ZdlPv>
     ee6:	0020      	movs	r0, r4
     ee8:	bd10      	pop	{r4, pc}
	...

00000eec <_ZN14USBDeviceClass6initEPEmm.part.7>:
	for (uint8_t i = 1; (i < EP_ARRAY_SIZE) && (EndPoints[i] != 0); i++) {
		initEP(i, EndPoints[i]);
	}
}

void USBDeviceClass::initEP(uint32_t ep, uint32_t config)
     eec:	b5f0      	push	{r4, r5, r6, r7, lr}
		if (epHandlers[ep] != NULL) {
			delete (DoubleBufferedEPOutHandler*)epHandlers[ep];
		}
		epHandlers[ep] = new DoubleBufferedEPOutHandler(usbd, ep);
	}
	else if (config == (USB_ENDPOINT_TYPE_BULK | USB_ENDPOINT_IN(0)))
     eee:	2982      	cmp	r1, #130	; 0x82
     ef0:	d119      	bne.n	f26 <_ZN14USBDeviceClass6initEPEmm.part.7+0x3a>
	inline void epBank1SetSize(ep_t ep, uint16_t size) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.SIZE = EP_PCKSIZE_SIZE(size); }
     ef2:	b2c3      	uxtb	r3, r0
     ef4:	4d29      	ldr	r5, [pc, #164]	; (f9c <_ZN14USBDeviceClass6initEPEmm.part.7+0xb0>)
     ef6:	015a      	lsls	r2, r3, #5
     ef8:	18aa      	adds	r2, r5, r2
     efa:	6991      	ldr	r1, [r2, #24]
     efc:	4c28      	ldr	r4, [pc, #160]	; (fa0 <_ZN14USBDeviceClass6initEPEmm.part.7+0xb4>)
	{
		usbd.epBank1SetSize(ep, 64);
		usbd.epBank1SetAddress(ep, &udd_ep_in_cache_buffer[ep]);
     efe:	0180      	lsls	r0, r0, #6
     f00:	400c      	ands	r4, r1
     f02:	21c0      	movs	r1, #192	; 0xc0
     f04:	0589      	lsls	r1, r1, #22
     f06:	4321      	orrs	r1, r4
     f08:	6191      	str	r1, [r2, #24]
     f0a:	4926      	ldr	r1, [pc, #152]	; (fa4 <_ZN14USBDeviceClass6initEPEmm.part.7+0xb8>)
	inline void epBank1SetType(ep_t ep, uint8_t type) { usb.DeviceEndpoint[ep].EPCFG.bit.EPTYPE1 = type; }
     f0c:	3308      	adds	r3, #8
     f0e:	1808      	adds	r0, r1, r0
     f10:	2170      	movs	r1, #112	; 0x70
	inline void epBank1SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[1].ADDR.reg = (uint32_t)addr; }
     f12:	6150      	str	r0, [r2, #20]
	inline void epBank1SetType(ep_t ep, uint8_t type) { usb.DeviceEndpoint[ep].EPCFG.bit.EPTYPE1 = type; }
     f14:	6828      	ldr	r0, [r5, #0]
     f16:	015b      	lsls	r3, r3, #5
     f18:	5c1a      	ldrb	r2, [r3, r0]
     f1a:	438a      	bics	r2, r1
     f1c:	0011      	movs	r1, r2
     f1e:	2230      	movs	r2, #48	; 0x30
     f20:	430a      	orrs	r2, r1
     f22:	541a      	strb	r2, [r3, r0]
		usbd.epBank1SetType(ep, 1); // CONTROL IN

		// Release OUT EP
		usbd.epReleaseOutBank0(ep, 64);
	}
}
     f24:	bdf0      	pop	{r4, r5, r6, r7, pc}
	else if (config == USB_ENDPOINT_TYPE_CONTROL)
     f26:	2900      	cmp	r1, #0
     f28:	d1fc      	bne.n	f24 <_ZN14USBDeviceClass6initEPEmm.part.7+0x38>
	inline void epBank0SetSize(ep_t ep, uint16_t size) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.SIZE = EP_PCKSIZE_SIZE(size); }
     f2a:	26c0      	movs	r6, #192	; 0xc0
     f2c:	b2c1      	uxtb	r1, r0
     f2e:	4c1b      	ldr	r4, [pc, #108]	; (f9c <_ZN14USBDeviceClass6initEPEmm.part.7+0xb0>)
     f30:	014b      	lsls	r3, r1, #5
     f32:	18e3      	adds	r3, r4, r3
     f34:	689a      	ldr	r2, [r3, #8]
     f36:	4d1a      	ldr	r5, [pc, #104]	; (fa0 <_ZN14USBDeviceClass6initEPEmm.part.7+0xb4>)
     f38:	05b6      	lsls	r6, r6, #22
     f3a:	402a      	ands	r2, r5
     f3c:	4332      	orrs	r2, r6
     f3e:	609a      	str	r2, [r3, #8]
		usbd.epBank0SetAddress(ep, &udd_ep_out_cache_buffer[ep]);
     f40:	4a19      	ldr	r2, [pc, #100]	; (fa8 <_ZN14USBDeviceClass6initEPEmm.part.7+0xbc>)
     f42:	0180      	lsls	r0, r0, #6
     f44:	1812      	adds	r2, r2, r0
	inline void epBank0SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[0].ADDR.reg = (uint32_t)addr; }
     f46:	605a      	str	r2, [r3, #4]
	inline void epBank0SetType(ep_t ep, uint8_t type) { usb.DeviceEndpoint[ep].EPCFG.bit.EPTYPE0 = type; }
     f48:	000a      	movs	r2, r1
     f4a:	2707      	movs	r7, #7
     f4c:	6824      	ldr	r4, [r4, #0]
     f4e:	3208      	adds	r2, #8
     f50:	0152      	lsls	r2, r2, #5
     f52:	5d11      	ldrb	r1, [r2, r4]
     f54:	43b9      	bics	r1, r7
     f56:	000f      	movs	r7, r1
     f58:	2101      	movs	r1, #1
     f5a:	4339      	orrs	r1, r7
     f5c:	5511      	strb	r1, [r2, r4]
	inline void epBank1SetSize(ep_t ep, uint16_t size) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.SIZE = EP_PCKSIZE_SIZE(size); }
     f5e:	699f      	ldr	r7, [r3, #24]
		usbd.epBank1SetAddress(ep, &udd_ep_in_cache_buffer[ep]);
     f60:	4910      	ldr	r1, [pc, #64]	; (fa4 <_ZN14USBDeviceClass6initEPEmm.part.7+0xb8>)
     f62:	403d      	ands	r5, r7
     f64:	1808      	adds	r0, r1, r0
     f66:	432e      	orrs	r6, r5
     f68:	619e      	str	r6, [r3, #24]
	inline void epBank1SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[1].ADDR.reg = (uint32_t)addr; }
     f6a:	6158      	str	r0, [r3, #20]
	inline void epBank1SetType(ep_t ep, uint8_t type) { usb.DeviceEndpoint[ep].EPCFG.bit.EPTYPE1 = type; }
     f6c:	2070      	movs	r0, #112	; 0x70
     f6e:	5d11      	ldrb	r1, [r2, r4]
     f70:	4381      	bics	r1, r0
     f72:	0008      	movs	r0, r1
     f74:	2110      	movs	r1, #16
     f76:	4301      	orrs	r1, r0
     f78:	5511      	strb	r1, [r2, r4]
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
     f7a:	6899      	ldr	r1, [r3, #8]
     f7c:	480b      	ldr	r0, [pc, #44]	; (fac <_ZN14USBDeviceClass6initEPEmm.part.7+0xc0>)
	inline void epBank0ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK0RDY = 1; }
     f7e:	18a2      	adds	r2, r4, r2
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
     f80:	4008      	ands	r0, r1
     f82:	2180      	movs	r1, #128	; 0x80
     f84:	0349      	lsls	r1, r1, #13
     f86:	4301      	orrs	r1, r0
     f88:	6099      	str	r1, [r3, #8]
	inline void epBank0SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = bc; }
     f8a:	6899      	ldr	r1, [r3, #8]
     f8c:	0b89      	lsrs	r1, r1, #14
     f8e:	0389      	lsls	r1, r1, #14
     f90:	6099      	str	r1, [r3, #8]
	inline void epBank0ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK0RDY = 1; }
     f92:	2340      	movs	r3, #64	; 0x40
     f94:	7911      	ldrb	r1, [r2, #4]
     f96:	430b      	orrs	r3, r1
     f98:	7113      	strb	r3, [r2, #4]
     f9a:	e7c3      	b.n	f24 <_ZN14USBDeviceClass6initEPEmm.part.7+0x38>
     f9c:	200005e4 	.word	0x200005e4
     fa0:	8fffffff 	.word	0x8fffffff
     fa4:	20000158 	.word	0x20000158
     fa8:	20000318 	.word	0x20000318
     fac:	f0003fff 	.word	0xf0003fff

00000fb0 <_ZN7__GuardC1Ev>:
     fb0:	f3ef 8310 	mrs	r3, PRIMASK
	__Guard() : primask(__get_PRIMASK()), loops(1) {
     fb4:	6003      	str	r3, [r0, #0]
     fb6:	2301      	movs	r3, #1
     fb8:	6043      	str	r3, [r0, #4]
  __ASM volatile ("cpsid i" : : : "memory");
     fba:	b672      	cpsid	i
	}
     fbc:	4770      	bx	lr

00000fbe <_ZN7__GuardD1Ev>:
		if (primask == 0) {
     fbe:	6803      	ldr	r3, [r0, #0]
     fc0:	2b00      	cmp	r3, #0
     fc2:	d102      	bne.n	fca <_ZN7__GuardD1Ev+0xc>
  __ASM volatile ("cpsie i" : : : "memory");
     fc4:	b662      	cpsie	i
  __ASM volatile ("isb 0xF":::"memory");
     fc6:	f3bf 8f6f 	isb	sy
	}
     fca:	4770      	bx	lr

00000fcc <_ZNK26DoubleBufferedEPOutHandler10_availableEv>:
			}
		}
		return i;
	}

	virtual uint32_t _available() const {
     fcc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
		if (current == 0) {
     fce:	0006      	movs	r6, r0
     fd0:	36fc      	adds	r6, #252	; 0xfc
     fd2:	69b3      	ldr	r3, [r6, #24]
	virtual uint32_t _available() const {
     fd4:	0004      	movs	r4, r0
		if (current == 0) {
     fd6:	2b00      	cmp	r3, #0
     fd8:	d118      	bne.n	100c <_ZNK26DoubleBufferedEPOutHandler10_availableEv+0x40>
			bool ready = ready0;
     fda:	27b2      	movs	r7, #178	; 0xb2
     fdc:	007f      	lsls	r7, r7, #1
     fde:	5dc5      	ldrb	r5, [r0, r7]
			synchronized {
     fe0:	4668      	mov	r0, sp
     fe2:	f7ff ffe5 	bl	fb0 <_ZN7__GuardC1Ev>
     fe6:	9b01      	ldr	r3, [sp, #4]
			bool ready = ready0;
     fe8:	b2ed      	uxtb	r5, r5
			synchronized {
     fea:	3b01      	subs	r3, #1
     fec:	d302      	bcc.n	ff4 <_ZNK26DoubleBufferedEPOutHandler10_availableEv+0x28>
				ready = ready0;
     fee:	5de5      	ldrb	r5, [r4, r7]
     ff0:	b2ed      	uxtb	r5, r5
     ff2:	e7fa      	b.n	fea <_ZNK26DoubleBufferedEPOutHandler10_availableEv+0x1e>
			synchronized {
     ff4:	4668      	mov	r0, sp
     ff6:	9301      	str	r3, [sp, #4]
     ff8:	f7ff ffe1 	bl	fbe <_ZN7__GuardD1Ev>
			}
			return ready ? (last0 - first0) : 0;
     ffc:	2d00      	cmp	r5, #0
     ffe:	d101      	bne.n	1004 <_ZNK26DoubleBufferedEPOutHandler10_availableEv+0x38>
    1000:	2000      	movs	r0, #0
			synchronized {
				ready = ready1;
			}
			return ready ? (last1 - first1) : 0;
		}
	}
    1002:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
			return ready ? (last0 - first0) : 0;
    1004:	6e70      	ldr	r0, [r6, #100]	; 0x64
    1006:	6e33      	ldr	r3, [r6, #96]	; 0x60
			return ready ? (last1 - first1) : 0;
    1008:	1ac0      	subs	r0, r0, r3
    100a:	e7fa      	b.n	1002 <_ZNK26DoubleBufferedEPOutHandler10_availableEv+0x36>
			synchronized {
    100c:	4668      	mov	r0, sp
    100e:	f7ff ffcf 	bl	fb0 <_ZN7__GuardC1Ev>
				ready = ready1;
    1012:	22d8      	movs	r2, #216	; 0xd8
			bool ready = false;
    1014:	2500      	movs	r5, #0
    1016:	9b01      	ldr	r3, [sp, #4]
				ready = ready1;
    1018:	0052      	lsls	r2, r2, #1
			synchronized {
    101a:	3b01      	subs	r3, #1
    101c:	d302      	bcc.n	1024 <_ZNK26DoubleBufferedEPOutHandler10_availableEv+0x58>
				ready = ready1;
    101e:	5ca5      	ldrb	r5, [r4, r2]
    1020:	b2ed      	uxtb	r5, r5
			synchronized {
    1022:	e7fa      	b.n	101a <_ZNK26DoubleBufferedEPOutHandler10_availableEv+0x4e>
    1024:	4668      	mov	r0, sp
    1026:	9301      	str	r3, [sp, #4]
    1028:	f7ff ffc9 	bl	fbe <_ZN7__GuardD1Ev>
			return ready ? (last1 - first1) : 0;
    102c:	2d00      	cmp	r5, #0
    102e:	d0e7      	beq.n	1000 <_ZNK26DoubleBufferedEPOutHandler10_availableEv+0x34>
    1030:	23d6      	movs	r3, #214	; 0xd6
    1032:	005b      	lsls	r3, r3, #1
    1034:	58e0      	ldr	r0, [r4, r3]
    1036:	3b04      	subs	r3, #4
    1038:	58e3      	ldr	r3, [r4, r3]
    103a:	e7e5      	b.n	1008 <_ZNK26DoubleBufferedEPOutHandler10_availableEv+0x3c>

0000103c <_ZN26DoubleBufferedEPOutHandler7releaseEv>:
	virtual int peek() {
		_recv();
		return _rx_buffer.peek();
	}

	void release() {
    103c:	b510      	push	{r4, lr}
		usbd.epReleaseOutBank0(ep, size);
    103e:	6844      	ldr	r4, [r0, #4]
    1040:	30fc      	adds	r0, #252	; 0xfc
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
    1042:	6943      	ldr	r3, [r0, #20]
    1044:	480b      	ldr	r0, [pc, #44]	; (1074 <_ZN26DoubleBufferedEPOutHandler7releaseEv+0x38>)
    1046:	b2db      	uxtb	r3, r3
    1048:	015a      	lsls	r2, r3, #5
    104a:	18a2      	adds	r2, r4, r2
    104c:	6891      	ldr	r1, [r2, #8]
	inline void epBank0ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK0RDY = 1; }
    104e:	3308      	adds	r3, #8
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
    1050:	4008      	ands	r0, r1
    1052:	2180      	movs	r1, #128	; 0x80
    1054:	0349      	lsls	r1, r1, #13
    1056:	4301      	orrs	r1, r0
    1058:	6091      	str	r1, [r2, #8]
	inline void epBank0SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = bc; }
    105a:	6891      	ldr	r1, [r2, #8]
	inline void epBank0ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK0RDY = 1; }
    105c:	015b      	lsls	r3, r3, #5
	inline void epBank0SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = bc; }
    105e:	0b89      	lsrs	r1, r1, #14
    1060:	0389      	lsls	r1, r1, #14
    1062:	6091      	str	r1, [r2, #8]
	inline void epBank0ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK0RDY = 1; }
    1064:	6822      	ldr	r2, [r4, #0]
    1066:	18d3      	adds	r3, r2, r3
    1068:	2240      	movs	r2, #64	; 0x40
    106a:	7919      	ldrb	r1, [r3, #4]
    106c:	430a      	orrs	r2, r1
    106e:	711a      	strb	r2, [r3, #4]
	}
    1070:	bd10      	pop	{r4, pc}
    1072:	46c0      	nop			; (mov r8, r8)
    1074:	f0003fff 	.word	0xf0003fff

00001078 <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv>:
	virtual void handleEndpoint()
    1078:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
		if (usbd.epBank0IsTransferComplete(ep))
    107a:	0005      	movs	r5, r0
    107c:	35fc      	adds	r5, #252	; 0xfc
	inline bool epBank0IsTransferComplete(ep_t ep)  { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.TRCPT0; }
    107e:	7d2b      	ldrb	r3, [r5, #20]
		if (usbd.epBank0IsTransferComplete(ep))
    1080:	6842      	ldr	r2, [r0, #4]
	inline bool epBank0IsTransferComplete(ep_t ep)  { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.TRCPT0; }
    1082:	0019      	movs	r1, r3
	virtual void handleEndpoint()
    1084:	0004      	movs	r4, r0
	inline bool epBank0IsTransferComplete(ep_t ep)  { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.TRCPT0; }
    1086:	3108      	adds	r1, #8
    1088:	6810      	ldr	r0, [r2, #0]
    108a:	0149      	lsls	r1, r1, #5
    108c:	1841      	adds	r1, r0, r1
    108e:	79c9      	ldrb	r1, [r1, #7]
		if (usbd.epBank0IsTransferComplete(ep))
    1090:	07c9      	lsls	r1, r1, #31
    1092:	d511      	bpl.n	10b8 <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0x40>
	inline uint16_t epBank0ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT; }
    1094:	015b      	lsls	r3, r3, #5
    1096:	18d2      	adds	r2, r2, r3
    1098:	6893      	ldr	r3, [r2, #8]
    109a:	049b      	lsls	r3, r3, #18
    109c:	0c9b      	lsrs	r3, r3, #18
			if (received == 0) {
    109e:	d10c      	bne.n	10ba <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0x42>
				release();
    10a0:	0020      	movs	r0, r4
    10a2:	f7ff ffcb 	bl	103c <_ZN26DoubleBufferedEPOutHandler7releaseEv>
	inline void epAckPendingInterrupts(ep_t ep)     { usb.DeviceEndpoint[ep].EPINTFLAG.reg = 0x7F; }
    10a6:	6863      	ldr	r3, [r4, #4]
    10a8:	681a      	ldr	r2, [r3, #0]
    10aa:	696b      	ldr	r3, [r5, #20]
    10ac:	b2db      	uxtb	r3, r3
    10ae:	3308      	adds	r3, #8
    10b0:	015b      	lsls	r3, r3, #5
    10b2:	18d3      	adds	r3, r2, r3
    10b4:	227f      	movs	r2, #127	; 0x7f
    10b6:	71da      	strb	r2, [r3, #7]
	}
    10b8:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
			} else if (incoming == 0) {
    10ba:	69e9      	ldr	r1, [r5, #28]
    10bc:	2900      	cmp	r1, #0
    10be:	d123      	bne.n	1108 <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0x90>
				last0 = received;
    10c0:	666b      	str	r3, [r5, #100]	; 0x64
				usbd.epBank0SetAddress(ep, const_cast<uint8_t *>(data1));
    10c2:	0023      	movs	r3, r4
				incoming = 1;
    10c4:	2601      	movs	r6, #1
				usbd.epBank0SetAddress(ep, const_cast<uint8_t *>(data1));
    10c6:	3369      	adds	r3, #105	; 0x69
    10c8:	33ff      	adds	r3, #255	; 0xff
				incoming = 1;
    10ca:	61ee      	str	r6, [r5, #28]
				synchronized {
    10cc:	4668      	mov	r0, sp
	inline void epBank0SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[0].ADDR.reg = (uint32_t)addr; }
    10ce:	6053      	str	r3, [r2, #4]
					ready0 = true;
    10d0:	27b2      	movs	r7, #178	; 0xb2
				synchronized {
    10d2:	f7ff ff6d 	bl	fb0 <_ZN7__GuardC1Ev>
					ready0 = true;
    10d6:	007f      	lsls	r7, r7, #1
					notify = ready1;
    10d8:	21b2      	movs	r1, #178	; 0xb2
    10da:	9b01      	ldr	r3, [sp, #4]
    10dc:	31ff      	adds	r1, #255	; 0xff
    10de:	3b01      	subs	r3, #1
				synchronized {
    10e0:	1c5a      	adds	r2, r3, #1
    10e2:	d038      	beq.n	1156 <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0xde>
					notify = ready1;
    10e4:	22d8      	movs	r2, #216	; 0xd8
					ready0 = true;
    10e6:	55e6      	strb	r6, [r4, r7]
					notify = ready1;
    10e8:	0052      	lsls	r2, r2, #1
    10ea:	5ca2      	ldrb	r2, [r4, r2]
    10ec:	1e58      	subs	r0, r3, #1
    10ee:	b2d2      	uxtb	r2, r2
    10f0:	5462      	strb	r2, [r4, r1]
					if (!notify) {
    10f2:	5c62      	ldrb	r2, [r4, r1]
    10f4:	4684      	mov	ip, r0
    10f6:	2a00      	cmp	r2, #0
    10f8:	d104      	bne.n	1104 <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0x8c>
						release();
    10fa:	0020      	movs	r0, r4
    10fc:	9301      	str	r3, [sp, #4]
    10fe:	f7ff ff9d 	bl	103c <_ZN26DoubleBufferedEPOutHandler7releaseEv>
    1102:	e7e9      	b.n	10d8 <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0x60>
    1104:	4663      	mov	r3, ip
    1106:	e7eb      	b.n	10e0 <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0x68>
				last1 = received;
    1108:	21d6      	movs	r1, #214	; 0xd6
    110a:	0049      	lsls	r1, r1, #1
    110c:	5063      	str	r3, [r4, r1]
				incoming = 0;
    110e:	2300      	movs	r3, #0
    1110:	61eb      	str	r3, [r5, #28]
				usbd.epBank0SetAddress(ep, const_cast<uint8_t *>(data0));
    1112:	0023      	movs	r3, r4
    1114:	331d      	adds	r3, #29
    1116:	33ff      	adds	r3, #255	; 0xff
	inline void epBank0SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[0].ADDR.reg = (uint32_t)addr; }
    1118:	6053      	str	r3, [r2, #4]
				synchronized {
    111a:	4668      	mov	r0, sp
					ready1 = true;
    111c:	26d8      	movs	r6, #216	; 0xd8
				synchronized {
    111e:	f7ff ff47 	bl	fb0 <_ZN7__GuardC1Ev>
					ready1 = true;
    1122:	2701      	movs	r7, #1
    1124:	0076      	lsls	r6, r6, #1
					notify = ready0;
    1126:	21b2      	movs	r1, #178	; 0xb2
    1128:	9b01      	ldr	r3, [sp, #4]
    112a:	31ff      	adds	r1, #255	; 0xff
    112c:	3b01      	subs	r3, #1
				synchronized {
    112e:	1c5a      	adds	r2, r3, #1
    1130:	d011      	beq.n	1156 <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0xde>
					notify = ready0;
    1132:	22b2      	movs	r2, #178	; 0xb2
					ready1 = true;
    1134:	55a7      	strb	r7, [r4, r6]
					notify = ready0;
    1136:	0052      	lsls	r2, r2, #1
    1138:	5ca2      	ldrb	r2, [r4, r2]
    113a:	1e58      	subs	r0, r3, #1
    113c:	b2d2      	uxtb	r2, r2
    113e:	5462      	strb	r2, [r4, r1]
					if (!notify) {
    1140:	5c62      	ldrb	r2, [r4, r1]
    1142:	4684      	mov	ip, r0
    1144:	2a00      	cmp	r2, #0
    1146:	d104      	bne.n	1152 <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0xda>
						release();
    1148:	0020      	movs	r0, r4
    114a:	9301      	str	r3, [sp, #4]
    114c:	f7ff ff76 	bl	103c <_ZN26DoubleBufferedEPOutHandler7releaseEv>
    1150:	e7e9      	b.n	1126 <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0xae>
    1152:	4663      	mov	r3, ip
    1154:	e7eb      	b.n	112e <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0xb6>
				synchronized {
    1156:	4668      	mov	r0, sp
    1158:	9301      	str	r3, [sp, #4]
    115a:	f7ff ff30 	bl	fbe <_ZN7__GuardD1Ev>
    115e:	e7a2      	b.n	10a6 <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0x2e>

00001160 <_ZN26DoubleBufferedEPOutHandler5_recvEv>:
	uint32_t _recv()
    1160:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    1162:	0005      	movs	r5, r0
		synchronized {
    1164:	4668      	mov	r0, sp
    1166:	002c      	movs	r4, r5
    1168:	f7ff ff22 	bl	fb0 <_ZN7__GuardC1Ev>
		uint32_t len = 0;
    116c:	2700      	movs	r7, #0
    return N - 1 - _iHead + _iTail;
    116e:	22ff      	movs	r2, #255	; 0xff
    1170:	9b01      	ldr	r3, [sp, #4]
    1172:	34fc      	adds	r4, #252	; 0xfc
		synchronized {
    1174:	3b01      	subs	r3, #1
    1176:	d30d      	bcc.n	1194 <_ZN26DoubleBufferedEPOutHandler5_recvEv+0x34>
  if (_iHead >= _iTail)
    1178:	68e0      	ldr	r0, [r4, #12]
    117a:	6921      	ldr	r1, [r4, #16]
    117c:	4288      	cmp	r0, r1
    117e:	db04      	blt.n	118a <_ZN26DoubleBufferedEPOutHandler5_recvEv+0x2a>
    return N - 1 - _iHead + _iTail;
    1180:	68e7      	ldr	r7, [r4, #12]
    1182:	6920      	ldr	r0, [r4, #16]
    1184:	1bd7      	subs	r7, r2, r7
    1186:	183f      	adds	r7, r7, r0
    1188:	e7f4      	b.n	1174 <_ZN26DoubleBufferedEPOutHandler5_recvEv+0x14>
    return _iTail - _iHead - 1;
    118a:	6927      	ldr	r7, [r4, #16]
    118c:	68e1      	ldr	r1, [r4, #12]
    118e:	1a7f      	subs	r7, r7, r1
    1190:	3f01      	subs	r7, #1
    1192:	e7ef      	b.n	1174 <_ZN26DoubleBufferedEPOutHandler5_recvEv+0x14>
    1194:	4668      	mov	r0, sp
    1196:	9301      	str	r3, [sp, #4]
    1198:	f7ff ff11 	bl	fbe <_ZN7__GuardD1Ev>
		if (current == 0) {
    119c:	69a3      	ldr	r3, [r4, #24]
			synchronized {
    119e:	4668      	mov	r0, sp
		if (current == 0) {
    11a0:	2b00      	cmp	r3, #0
    11a2:	d141      	bne.n	1228 <_ZN26DoubleBufferedEPOutHandler5_recvEv+0xc8>
			synchronized {
    11a4:	f7ff ff04 	bl	fb0 <_ZN7__GuardC1Ev>
				if (!ready0) {
    11a8:	21b2      	movs	r1, #178	; 0xb2
    11aa:	9b01      	ldr	r3, [sp, #4]
    11ac:	0049      	lsls	r1, r1, #1
    11ae:	3b01      	subs	r3, #1
			synchronized {
    11b0:	1c5a      	adds	r2, r3, #1
    11b2:	d00c      	beq.n	11ce <_ZN26DoubleBufferedEPOutHandler5_recvEv+0x6e>
				if (!ready0) {
    11b4:	5c6e      	ldrb	r6, [r5, r1]
    11b6:	1e5a      	subs	r2, r3, #1
    11b8:	b2f6      	uxtb	r6, r6
    11ba:	2e00      	cmp	r6, #0
    11bc:	d105      	bne.n	11ca <_ZN26DoubleBufferedEPOutHandler5_recvEv+0x6a>
				synchronized {
    11be:	4668      	mov	r0, sp
    11c0:	9301      	str	r3, [sp, #4]
    11c2:	f7ff fefc 	bl	fbe <_ZN7__GuardD1Ev>
	}
    11c6:	0030      	movs	r0, r6
    11c8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    11ca:	0013      	movs	r3, r2
    11cc:	e7f0      	b.n	11b0 <_ZN26DoubleBufferedEPOutHandler5_recvEv+0x50>
			synchronized {
    11ce:	4668      	mov	r0, sp
    11d0:	9301      	str	r3, [sp, #4]
		uint32_t i = 0;
    11d2:	2600      	movs	r6, #0
			synchronized {
    11d4:	f7ff fef3 	bl	fbe <_ZN7__GuardD1Ev>
  return (uint32_t)(index + 1) % N;
    11d8:	22ff      	movs	r2, #255	; 0xff
			for (; i<len && first0 < last0; i++) {
    11da:	42be      	cmp	r6, r7
    11dc:	d003      	beq.n	11e6 <_ZN26DoubleBufferedEPOutHandler5_recvEv+0x86>
    11de:	6e23      	ldr	r3, [r4, #96]	; 0x60
    11e0:	6e61      	ldr	r1, [r4, #100]	; 0x64
    11e2:	428b      	cmp	r3, r1
    11e4:	d360      	bcc.n	12a8 <_ZN26DoubleBufferedEPOutHandler5_recvEv+0x148>
			if (first0 == last0) {
    11e6:	6e63      	ldr	r3, [r4, #100]	; 0x64
    11e8:	6e22      	ldr	r2, [r4, #96]	; 0x60
    11ea:	429a      	cmp	r2, r3
    11ec:	d1eb      	bne.n	11c6 <_ZN26DoubleBufferedEPOutHandler5_recvEv+0x66>
				first0 = 0;
    11ee:	2300      	movs	r3, #0
    11f0:	6623      	str	r3, [r4, #96]	; 0x60
				current = 1;
    11f2:	3301      	adds	r3, #1
    11f4:	61a3      	str	r3, [r4, #24]
				synchronized {
    11f6:	4668      	mov	r0, sp
					ready0 = false;
    11f8:	24b2      	movs	r4, #178	; 0xb2
				synchronized {
    11fa:	f7ff fed9 	bl	fb0 <_ZN7__GuardC1Ev>
					ready0 = false;
    11fe:	0064      	lsls	r4, r4, #1
					if (notify) {
    1200:	22b2      	movs	r2, #178	; 0xb2
					ready0 = false;
    1202:	2100      	movs	r1, #0
    1204:	9b01      	ldr	r3, [sp, #4]
					if (notify) {
    1206:	32ff      	adds	r2, #255	; 0xff
    1208:	3b01      	subs	r3, #1
				synchronized {
    120a:	1c58      	adds	r0, r3, #1
    120c:	d0d7      	beq.n	11be <_ZN26DoubleBufferedEPOutHandler5_recvEv+0x5e>
					ready0 = false;
    120e:	5529      	strb	r1, [r5, r4]
					if (notify) {
    1210:	5ca8      	ldrb	r0, [r5, r2]
    1212:	1e5f      	subs	r7, r3, #1
    1214:	2800      	cmp	r0, #0
    1216:	d005      	beq.n	1224 <_ZN26DoubleBufferedEPOutHandler5_recvEv+0xc4>
						notify = false;
    1218:	54a9      	strb	r1, [r5, r2]
						release();
    121a:	0028      	movs	r0, r5
    121c:	9301      	str	r3, [sp, #4]
    121e:	f7ff ff0d 	bl	103c <_ZN26DoubleBufferedEPOutHandler7releaseEv>
    1222:	e7ed      	b.n	1200 <_ZN26DoubleBufferedEPOutHandler5_recvEv+0xa0>
    1224:	003b      	movs	r3, r7
    1226:	e7f0      	b.n	120a <_ZN26DoubleBufferedEPOutHandler5_recvEv+0xaa>
			synchronized {
    1228:	f7ff fec2 	bl	fb0 <_ZN7__GuardC1Ev>
				if (!ready1) {
    122c:	21d8      	movs	r1, #216	; 0xd8
    122e:	9b01      	ldr	r3, [sp, #4]
    1230:	0049      	lsls	r1, r1, #1
    1232:	3b01      	subs	r3, #1
			synchronized {
    1234:	1c5a      	adds	r2, r3, #1
    1236:	d006      	beq.n	1246 <_ZN26DoubleBufferedEPOutHandler5_recvEv+0xe6>
				if (!ready1) {
    1238:	5c6e      	ldrb	r6, [r5, r1]
    123a:	1e5a      	subs	r2, r3, #1
    123c:	b2f6      	uxtb	r6, r6
    123e:	2e00      	cmp	r6, #0
    1240:	d0bd      	beq.n	11be <_ZN26DoubleBufferedEPOutHandler5_recvEv+0x5e>
    1242:	0013      	movs	r3, r2
    1244:	e7f6      	b.n	1234 <_ZN26DoubleBufferedEPOutHandler5_recvEv+0xd4>
			synchronized {
    1246:	4668      	mov	r0, sp
    1248:	9301      	str	r3, [sp, #4]
    124a:	f7ff feb8 	bl	fbe <_ZN7__GuardD1Ev>
    124e:	22d4      	movs	r2, #212	; 0xd4
		uint32_t i = 0;
    1250:	2600      	movs	r6, #0
    1252:	0052      	lsls	r2, r2, #1
			for (; i<len && first1 < last1; i++) {
    1254:	42be      	cmp	r6, r7
    1256:	d005      	beq.n	1264 <_ZN26DoubleBufferedEPOutHandler5_recvEv+0x104>
    1258:	21d6      	movs	r1, #214	; 0xd6
    125a:	0049      	lsls	r1, r1, #1
    125c:	58ab      	ldr	r3, [r5, r2]
    125e:	5869      	ldr	r1, [r5, r1]
    1260:	428b      	cmp	r3, r1
    1262:	d332      	bcc.n	12ca <_ZN26DoubleBufferedEPOutHandler5_recvEv+0x16a>
			if (first1 == last1) {
    1264:	23d6      	movs	r3, #214	; 0xd6
    1266:	005b      	lsls	r3, r3, #1
    1268:	58eb      	ldr	r3, [r5, r3]
    126a:	58a9      	ldr	r1, [r5, r2]
    126c:	4299      	cmp	r1, r3
    126e:	d1aa      	bne.n	11c6 <_ZN26DoubleBufferedEPOutHandler5_recvEv+0x66>
				first1 = 0;
    1270:	2300      	movs	r3, #0
				synchronized {
    1272:	4668      	mov	r0, sp
				first1 = 0;
    1274:	50ab      	str	r3, [r5, r2]
				current = 0;
    1276:	61a3      	str	r3, [r4, #24]
					ready1 = false;
    1278:	24d8      	movs	r4, #216	; 0xd8
				synchronized {
    127a:	f7ff fe99 	bl	fb0 <_ZN7__GuardC1Ev>
					ready1 = false;
    127e:	0064      	lsls	r4, r4, #1
					if (notify) {
    1280:	22b2      	movs	r2, #178	; 0xb2
					ready1 = false;
    1282:	2100      	movs	r1, #0
    1284:	9b01      	ldr	r3, [sp, #4]
					if (notify) {
    1286:	32ff      	adds	r2, #255	; 0xff
    1288:	3b01      	subs	r3, #1
				synchronized {
    128a:	1c58      	adds	r0, r3, #1
    128c:	d097      	beq.n	11be <_ZN26DoubleBufferedEPOutHandler5_recvEv+0x5e>
					ready1 = false;
    128e:	5529      	strb	r1, [r5, r4]
					if (notify) {
    1290:	5ca8      	ldrb	r0, [r5, r2]
    1292:	1e5f      	subs	r7, r3, #1
    1294:	2800      	cmp	r0, #0
    1296:	d005      	beq.n	12a4 <_ZN26DoubleBufferedEPOutHandler5_recvEv+0x144>
						notify = false;
    1298:	54a9      	strb	r1, [r5, r2]
						release();
    129a:	0028      	movs	r0, r5
    129c:	9301      	str	r3, [sp, #4]
    129e:	f7ff fecd 	bl	103c <_ZN26DoubleBufferedEPOutHandler7releaseEv>
    12a2:	e7ed      	b.n	1280 <_ZN26DoubleBufferedEPOutHandler5_recvEv+0x120>
    12a4:	003b      	movs	r3, r7
    12a6:	e7f0      	b.n	128a <_ZN26DoubleBufferedEPOutHandler5_recvEv+0x12a>
				_rx_buffer.store_char(data0[first0++]);
    12a8:	1c59      	adds	r1, r3, #1
    12aa:	18eb      	adds	r3, r5, r3
    12ac:	33ff      	adds	r3, #255	; 0xff
    12ae:	6621      	str	r1, [r4, #96]	; 0x60
    12b0:	7f59      	ldrb	r1, [r3, #29]
  int i = nextIndex(_iHead);
    12b2:	68e3      	ldr	r3, [r4, #12]
  if ( i != _iTail )
    12b4:	6920      	ldr	r0, [r4, #16]
  return (uint32_t)(index + 1) % N;
    12b6:	3301      	adds	r3, #1
    12b8:	4013      	ands	r3, r2
  if ( i != _iTail )
    12ba:	4283      	cmp	r3, r0
    12bc:	d003      	beq.n	12c6 <_ZN26DoubleBufferedEPOutHandler5_recvEv+0x166>
    _aucBuffer[_iHead] = c ;
    12be:	68e0      	ldr	r0, [r4, #12]
    12c0:	1828      	adds	r0, r5, r0
    12c2:	7201      	strb	r1, [r0, #8]
    _iHead = i ;
    12c4:	60e3      	str	r3, [r4, #12]
			for (; i<len && first0 < last0; i++) {
    12c6:	3601      	adds	r6, #1
    12c8:	e787      	b.n	11da <_ZN26DoubleBufferedEPOutHandler5_recvEv+0x7a>
				_rx_buffer.store_char(data1[first1++]);
    12ca:	1c59      	adds	r1, r3, #1
    12cc:	50a9      	str	r1, [r5, r2]
  return (uint32_t)(index + 1) % N;
    12ce:	21ff      	movs	r1, #255	; 0xff
    12d0:	18eb      	adds	r3, r5, r3
    12d2:	3369      	adds	r3, #105	; 0x69
    12d4:	33ff      	adds	r3, #255	; 0xff
    12d6:	781b      	ldrb	r3, [r3, #0]
    12d8:	469c      	mov	ip, r3
  int i = nextIndex(_iHead);
    12da:	68e3      	ldr	r3, [r4, #12]
  return (uint32_t)(index + 1) % N;
    12dc:	3301      	adds	r3, #1
    12de:	400b      	ands	r3, r1
  if ( i != _iTail )
    12e0:	6921      	ldr	r1, [r4, #16]
    12e2:	428b      	cmp	r3, r1
    12e4:	d004      	beq.n	12f0 <_ZN26DoubleBufferedEPOutHandler5_recvEv+0x190>
    _aucBuffer[_iHead] = c ;
    12e6:	4660      	mov	r0, ip
    12e8:	68e1      	ldr	r1, [r4, #12]
    12ea:	1869      	adds	r1, r5, r1
    12ec:	7208      	strb	r0, [r1, #8]
    _iHead = i ;
    12ee:	60e3      	str	r3, [r4, #12]
			for (; i<len && first1 < last1; i++) {
    12f0:	3601      	adds	r6, #1
    12f2:	e7af      	b.n	1254 <_ZN26DoubleBufferedEPOutHandler5_recvEv+0xf4>

000012f4 <_ZN26DoubleBufferedEPOutHandler4peekEv>:
	virtual int peek() {
    12f4:	b510      	push	{r4, lr}
    12f6:	0004      	movs	r4, r0
		_recv();
    12f8:	f7ff ff32 	bl	1160 <_ZN26DoubleBufferedEPOutHandler5_recvEv>
  if(_iTail == _iHead)
    12fc:	0023      	movs	r3, r4
    12fe:	33fc      	adds	r3, #252	; 0xfc
    1300:	6919      	ldr	r1, [r3, #16]
    1302:	68da      	ldr	r2, [r3, #12]
    1304:	4291      	cmp	r1, r2
    1306:	d003      	beq.n	1310 <_ZN26DoubleBufferedEPOutHandler4peekEv+0x1c>
  return _aucBuffer[_iTail];
    1308:	691b      	ldr	r3, [r3, #16]
    130a:	18e4      	adds	r4, r4, r3
    130c:	7a20      	ldrb	r0, [r4, #8]
	}
    130e:	bd10      	pop	{r4, pc}
    return -1;
    1310:	2001      	movs	r0, #1
    1312:	4240      	negs	r0, r0
		return _rx_buffer.peek();
    1314:	e7fb      	b.n	130e <_ZN26DoubleBufferedEPOutHandler4peekEv+0x1a>

00001316 <_ZN26DoubleBufferedEPOutHandler9availableEv>:
	virtual uint32_t available() {
    1316:	b510      	push	{r4, lr}
    1318:	0004      	movs	r4, r0
  int delta = _iHead - _iTail;
    131a:	34fc      	adds	r4, #252	; 0xfc
		_recv();
    131c:	f7ff ff20 	bl	1160 <_ZN26DoubleBufferedEPOutHandler5_recvEv>
    1320:	68e0      	ldr	r0, [r4, #12]
    1322:	6923      	ldr	r3, [r4, #16]
    1324:	1ac0      	subs	r0, r0, r3
  if(delta < 0)
    1326:	d501      	bpl.n	132c <_ZN26DoubleBufferedEPOutHandler9availableEv+0x16>
    return N + delta;
    1328:	3001      	adds	r0, #1
    132a:	30ff      	adds	r0, #255	; 0xff
	}
    132c:	bd10      	pop	{r4, pc}

0000132e <_ZN26DoubleBufferedEPOutHandler4recvEPvm>:
	virtual uint32_t recv(void *_data, uint32_t len) {
    132e:	b5f0      	push	{r4, r5, r6, r7, lr}
    1330:	b085      	sub	sp, #20
    1332:	9201      	str	r2, [sp, #4]
    1334:	9100      	str	r1, [sp, #0]
    1336:	0005      	movs	r5, r0
		_recv();
    1338:	f7ff ff12 	bl	1160 <_ZN26DoubleBufferedEPOutHandler5_recvEv>
		synchronized {
    133c:	a802      	add	r0, sp, #8
    133e:	f7ff fe37 	bl	fb0 <_ZN7__GuardC1Ev>
    return -1;
    1342:	2001      	movs	r0, #1
		uint32_t i = 0;
    1344:	2400      	movs	r4, #0
  return (uint32_t)(index + 1) % N;
    1346:	26ff      	movs	r6, #255	; 0xff
    1348:	9a03      	ldr	r2, [sp, #12]
    return -1;
    134a:	4240      	negs	r0, r0
		synchronized {
    134c:	3a01      	subs	r2, #1
    134e:	d31d      	bcc.n	138c <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x5e>
  int delta = _iHead - _iTail;
    1350:	002b      	movs	r3, r5
    1352:	33fc      	adds	r3, #252	; 0xfc
			for (; i < len && _rx_buffer.available(); i++) {
    1354:	9901      	ldr	r1, [sp, #4]
    1356:	428c      	cmp	r4, r1
    1358:	d2f8      	bcs.n	134c <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x1e>
    135a:	68d9      	ldr	r1, [r3, #12]
    135c:	691f      	ldr	r7, [r3, #16]
    135e:	1bc9      	subs	r1, r1, r7
  if(delta < 0)
    1360:	d501      	bpl.n	1366 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x38>
    return N + delta;
    1362:	3101      	adds	r1, #1
    1364:	31ff      	adds	r1, #255	; 0xff
    1366:	2900      	cmp	r1, #0
    1368:	d0f0      	beq.n	134c <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x1e>
  if(_iTail == _iHead)
    136a:	6919      	ldr	r1, [r3, #16]
    136c:	68df      	ldr	r7, [r3, #12]
    136e:	468c      	mov	ip, r1
    return -1;
    1370:	0001      	movs	r1, r0
  if(_iTail == _iHead)
    1372:	45bc      	cmp	ip, r7
    1374:	d006      	beq.n	1384 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x56>
  uint8_t value = _aucBuffer[_iTail];
    1376:	6919      	ldr	r1, [r3, #16]
  _iTail = nextIndex(_iTail);
    1378:	691f      	ldr	r7, [r3, #16]
  uint8_t value = _aucBuffer[_iTail];
    137a:	1869      	adds	r1, r5, r1
  return (uint32_t)(index + 1) % N;
    137c:	3701      	adds	r7, #1
    137e:	4037      	ands	r7, r6
  uint8_t value = _aucBuffer[_iTail];
    1380:	7a09      	ldrb	r1, [r1, #8]
  _iTail = nextIndex(_iTail);
    1382:	611f      	str	r7, [r3, #16]
				data[i] = _rx_buffer.read_char();
    1384:	9f00      	ldr	r7, [sp, #0]
    1386:	5539      	strb	r1, [r7, r4]
			for (; i < len && _rx_buffer.available(); i++) {
    1388:	3401      	adds	r4, #1
    138a:	e7e3      	b.n	1354 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x26>
		synchronized {
    138c:	a802      	add	r0, sp, #8
    138e:	9203      	str	r2, [sp, #12]
    1390:	f7ff fe15 	bl	fbe <_ZN7__GuardD1Ev>
	}
    1394:	0020      	movs	r0, r4
    1396:	b005      	add	sp, #20
    1398:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000139a <_ZN14USBDeviceClass14SendInterfacesEPm>:
{
    139a:	b537      	push	{r0, r1, r2, r4, r5, lr}
	uint8_t interfaces = 0;
    139c:	466b      	mov	r3, sp
    139e:	1ddc      	adds	r4, r3, #7
    13a0:	2300      	movs	r3, #0
{
    13a2:	000d      	movs	r5, r1
	uint8_t interfaces = 0;
    13a4:	7023      	strb	r3, [r4, #0]
	total[0] += PluggableUSB().getInterface(&interfaces);
    13a6:	f7ff fd89 	bl	ebc <_Z12PluggableUSBv>
    13aa:	0021      	movs	r1, r4
    13ac:	f7ff fd06 	bl	dbc <_ZN13PluggableUSB_12getInterfaceEPh>
    13b0:	682b      	ldr	r3, [r5, #0]
    13b2:	1818      	adds	r0, r3, r0
    13b4:	6028      	str	r0, [r5, #0]
	return interfaces;
    13b6:	7820      	ldrb	r0, [r4, #0]
}
    13b8:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
	...

000013bc <_ZN14USBDeviceClass4initEv>:
{
    13bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	txLEDPulse = 0;
    13be:	2400      	movs	r4, #0
    13c0:	4b49      	ldr	r3, [pc, #292]	; (14e8 <_ZN14USBDeviceClass4initEv+0x12c>)
	pinMode(PIN_LED_TXL, OUTPUT);
    13c2:	2101      	movs	r1, #1
{
    13c4:	0005      	movs	r5, r0
	pinMode(PIN_LED_TXL, OUTPUT);
    13c6:	201a      	movs	r0, #26
	txLEDPulse = 0;
    13c8:	701c      	strb	r4, [r3, #0]
	pinMode(PIN_LED_TXL, OUTPUT);
    13ca:	f000 fe49 	bl	2060 <pinMode>
	digitalWrite(PIN_LED_TXL, HIGH);
    13ce:	2101      	movs	r1, #1
    13d0:	201a      	movs	r0, #26
    13d2:	f000 fe91 	bl	20f8 <digitalWrite>
	rxLEDPulse = 0;
    13d6:	4b45      	ldr	r3, [pc, #276]	; (14ec <_ZN14USBDeviceClass4initEv+0x130>)
	pinMode(PIN_LED_RXL, OUTPUT);
    13d8:	2101      	movs	r1, #1
    13da:	2019      	movs	r0, #25
	rxLEDPulse = 0;
    13dc:	701c      	strb	r4, [r3, #0]
	pinMode(PIN_LED_RXL, OUTPUT);
    13de:	f000 fe3f 	bl	2060 <pinMode>
	digitalWrite(PIN_LED_RXL, HIGH);
    13e2:	2101      	movs	r1, #1
    13e4:	2019      	movs	r0, #25
    13e6:	f000 fe87 	bl	20f8 <digitalWrite>
	PM->APBBMASK.reg |= PM_APBBMASK_USB;
    13ea:	2320      	movs	r3, #32
    13ec:	4a40      	ldr	r2, [pc, #256]	; (14f0 <_ZN14USBDeviceClass4initEv+0x134>)
	PORT->Group[0].PMUX[PIN_PA24G_USB_DM/2].reg &= ~(0xF << (4 * (PIN_PA24G_USB_DM & 0x01u)));
    13ee:	200f      	movs	r0, #15
	PM->APBBMASK.reg |= PM_APBBMASK_USB;
    13f0:	69d1      	ldr	r1, [r2, #28]
    13f2:	430b      	orrs	r3, r1
    13f4:	61d3      	str	r3, [r2, #28]
	PORT->Group[0].PINCFG[PIN_PA24G_USB_DM].bit.PMUXEN = 1;
    13f6:	2201      	movs	r2, #1
    13f8:	493e      	ldr	r1, [pc, #248]	; (14f4 <_ZN14USBDeviceClass4initEv+0x138>)
    13fa:	780b      	ldrb	r3, [r1, #0]
    13fc:	4313      	orrs	r3, r2
    13fe:	700b      	strb	r3, [r1, #0]
	PORT->Group[0].PMUX[PIN_PA24G_USB_DM/2].reg &= ~(0xF << (4 * (PIN_PA24G_USB_DM & 0x01u)));
    1400:	4b3d      	ldr	r3, [pc, #244]	; (14f8 <_ZN14USBDeviceClass4initEv+0x13c>)
    1402:	7819      	ldrb	r1, [r3, #0]
    1404:	4381      	bics	r1, r0
    1406:	7019      	strb	r1, [r3, #0]
	PORT->Group[0].PMUX[PIN_PA24G_USB_DM/2].reg |= MUX_PA24G_USB_DM << (4 * (PIN_PA24G_USB_DM & 0x01u));
    1408:	2106      	movs	r1, #6
    140a:	781c      	ldrb	r4, [r3, #0]
    140c:	4321      	orrs	r1, r4
    140e:	7019      	strb	r1, [r3, #0]
	PORT->Group[0].PINCFG[PIN_PA25G_USB_DP].bit.PMUXEN = 1;
    1410:	493a      	ldr	r1, [pc, #232]	; (14fc <_ZN14USBDeviceClass4initEv+0x140>)
    1412:	780c      	ldrb	r4, [r1, #0]
    1414:	4322      	orrs	r2, r4
    1416:	700a      	strb	r2, [r1, #0]
	PORT->Group[0].PMUX[PIN_PA25G_USB_DP/2].reg &= ~(0xF << (4 * (PIN_PA25G_USB_DP & 0x01u)));
    1418:	781a      	ldrb	r2, [r3, #0]
    141a:	4002      	ands	r2, r0
    141c:	701a      	strb	r2, [r3, #0]
	PORT->Group[0].PMUX[PIN_PA25G_USB_DP/2].reg |= MUX_PA25G_USB_DP << (4 * (PIN_PA25G_USB_DP & 0x01u));
    141e:	2260      	movs	r2, #96	; 0x60
    1420:	7819      	ldrb	r1, [r3, #0]
    1422:	430a      	orrs	r2, r1
    1424:	701a      	strb	r2, [r3, #0]
	GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(6)     | // Generic Clock Multiplexer 6
    1426:	4b36      	ldr	r3, [pc, #216]	; (1500 <_ZN14USBDeviceClass4initEv+0x144>)
    1428:	4a36      	ldr	r2, [pc, #216]	; (1504 <_ZN14USBDeviceClass4initEv+0x148>)
    142a:	805a      	strh	r2, [r3, #2]
	while (GCLK->STATUS.bit.SYNCBUSY)
    142c:	785f      	ldrb	r7, [r3, #1]
    142e:	09ff      	lsrs	r7, r7, #7
    1430:	d1fc      	bne.n	142c <_ZN14USBDeviceClass4initEv+0x70>
	USB_SetHandler(&UDD_Handler);
    1432:	4835      	ldr	r0, [pc, #212]	; (1508 <_ZN14USBDeviceClass4initEv+0x14c>)
    1434:	f7fe fefc 	bl	230 <USB_SetHandler>
	usb.CTRLA.bit.SWRST = 1;
    1438:	4e34      	ldr	r6, [pc, #208]	; (150c <_ZN14USBDeviceClass4initEv+0x150>)
    143a:	2301      	movs	r3, #1
    143c:	0030      	movs	r0, r6
    143e:	c810      	ldmia	r0!, {r4}
	memset(EP, 0, sizeof(EP));
    1440:	0039      	movs	r1, r7
	usb.CTRLA.bit.SWRST = 1;
    1442:	7822      	ldrb	r2, [r4, #0]
    1444:	4313      	orrs	r3, r2
	memset(EP, 0, sizeof(EP));
    1446:	2280      	movs	r2, #128	; 0x80
	usb.CTRLA.bit.SWRST = 1;
    1448:	7023      	strb	r3, [r4, #0]
	memset(EP, 0, sizeof(EP));
    144a:	0052      	lsls	r2, r2, #1
    144c:	f001 f921 	bl	2692 <memset>
	while (usb.SYNCBUSY.bit.SWRST) {}
    1450:	78a3      	ldrb	r3, [r4, #2]
    1452:	07db      	lsls	r3, r3, #31
    1454:	d4fc      	bmi.n	1450 <_ZN14USBDeviceClass4initEv+0x94>
	uint32_t pad_transn = (*pad_transn_p & USB_FUSES_TRANSN_Msk) >> USB_FUSES_TRANSN_Pos;
    1456:	201f      	movs	r0, #31
	usb.DESCADD.reg = (uint32_t)(&EP);
    1458:	3604      	adds	r6, #4
	uint32_t pad_transn = (*pad_transn_p & USB_FUSES_TRANSN_Msk) >> USB_FUSES_TRANSN_Pos;
    145a:	4b2d      	ldr	r3, [pc, #180]	; (1510 <_ZN14USBDeviceClass4initEv+0x154>)
	usb.DESCADD.reg = (uint32_t)(&EP);
    145c:	6266      	str	r6, [r4, #36]	; 0x24
	uint32_t pad_transn = (*pad_transn_p & USB_FUSES_TRANSN_Msk) >> USB_FUSES_TRANSN_Pos;
    145e:	681b      	ldr	r3, [r3, #0]
    1460:	0b5a      	lsrs	r2, r3, #13
	uint32_t pad_transp = (*pad_transp_p & USB_FUSES_TRANSP_Msk) >> USB_FUSES_TRANSP_Pos;
    1462:	0c99      	lsrs	r1, r3, #18
	uint32_t pad_trim   = (*pad_trim_p   & USB_FUSES_TRIM_Msk  ) >> USB_FUSES_TRIM_Pos;
    1464:	019b      	lsls	r3, r3, #6
	uint32_t pad_transn = (*pad_transn_p & USB_FUSES_TRANSN_Msk) >> USB_FUSES_TRANSN_Pos;
    1466:	4002      	ands	r2, r0
	uint32_t pad_transp = (*pad_transp_p & USB_FUSES_TRANSP_Msk) >> USB_FUSES_TRANSP_Pos;
    1468:	4001      	ands	r1, r0
	uint32_t pad_trim   = (*pad_trim_p   & USB_FUSES_TRIM_Msk  ) >> USB_FUSES_TRIM_Pos;
    146a:	0f5b      	lsrs	r3, r3, #29
	if (pad_transn == 0x1F)  // maximum value (31)
    146c:	4282      	cmp	r2, r0
    146e:	d100      	bne.n	1472 <_ZN14USBDeviceClass4initEv+0xb6>
		pad_transn = 5;
    1470:	2205      	movs	r2, #5
	if (pad_transp == 0x1F)  // maximum value (31)
    1472:	291f      	cmp	r1, #31
    1474:	d100      	bne.n	1478 <_ZN14USBDeviceClass4initEv+0xbc>
		pad_transp = 29;
    1476:	3902      	subs	r1, #2
	if (pad_trim == 0x7)     // maximum value (7)
    1478:	2b07      	cmp	r3, #7
    147a:	d100      	bne.n	147e <_ZN14USBDeviceClass4initEv+0xc2>
		pad_trim = 3;
    147c:	3b04      	subs	r3, #4
	usb.PADCAL.bit.TRANSN = pad_transn;
    147e:	8d26      	ldrh	r6, [r4, #40]	; 0x28
    1480:	4f24      	ldr	r7, [pc, #144]	; (1514 <_ZN14USBDeviceClass4initEv+0x158>)
    1482:	4002      	ands	r2, r0
    1484:	403e      	ands	r6, r7
    1486:	0192      	lsls	r2, r2, #6
    1488:	4332      	orrs	r2, r6
    148a:	8522      	strh	r2, [r4, #40]	; 0x28
	usb.PADCAL.bit.TRANSP = pad_transp;
    148c:	8d22      	ldrh	r2, [r4, #40]	; 0x28
    148e:	4001      	ands	r1, r0
    1490:	4382      	bics	r2, r0
    1492:	000e      	movs	r6, r1
    1494:	0011      	movs	r1, r2
    1496:	4331      	orrs	r1, r6
    1498:	8521      	strh	r1, [r4, #40]	; 0x28
	usb.PADCAL.bit.TRIM   = pad_trim;
    149a:	8d22      	ldrh	r2, [r4, #40]	; 0x28
    149c:	0319      	lsls	r1, r3, #12
    149e:	4b1e      	ldr	r3, [pc, #120]	; (1518 <_ZN14USBDeviceClass4initEv+0x15c>)
	SerialUSB.begin(0);
    14a0:	481e      	ldr	r0, [pc, #120]	; (151c <_ZN14USBDeviceClass4initEv+0x160>)
    14a2:	4013      	ands	r3, r2
	inline void setUSBDeviceMode() { usb.CTRLA.bit.MODE = USB_CTRLA_MODE_DEVICE_Val; }
    14a4:	227f      	movs	r2, #127	; 0x7f
	usb.PADCAL.bit.TRIM   = pad_trim;
    14a6:	430b      	orrs	r3, r1
    14a8:	8523      	strh	r3, [r4, #40]	; 0x28
	inline void setUSBDeviceMode() { usb.CTRLA.bit.MODE = USB_CTRLA_MODE_DEVICE_Val; }
    14aa:	7823      	ldrb	r3, [r4, #0]
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    14ac:	21c1      	movs	r1, #193	; 0xc1
    14ae:	4013      	ands	r3, r2
    14b0:	7023      	strb	r3, [r4, #0]
	inline void runInStandby()   { usb.CTRLA.bit.RUNSTDBY = 1; }
    14b2:	2304      	movs	r3, #4
    14b4:	7822      	ldrb	r2, [r4, #0]
    14b6:	0089      	lsls	r1, r1, #2
    14b8:	4313      	orrs	r3, r2
	inline void setFullSpeed()       { usb.CTRLB.bit.SPDCONF = USB_DEVICE_CTRLB_SPDCONF_FS_Val;   }
    14ba:	220c      	movs	r2, #12
	inline void runInStandby()   { usb.CTRLA.bit.RUNSTDBY = 1; }
    14bc:	7023      	strb	r3, [r4, #0]
	inline void setFullSpeed()       { usb.CTRLB.bit.SPDCONF = USB_DEVICE_CTRLB_SPDCONF_FS_Val;   }
    14be:	8923      	ldrh	r3, [r4, #8]
    14c0:	4393      	bics	r3, r2
    14c2:	4a17      	ldr	r2, [pc, #92]	; (1520 <_ZN14USBDeviceClass4initEv+0x164>)
    14c4:	8123      	strh	r3, [r4, #8]
    14c6:	5853      	ldr	r3, [r2, r1]
    14c8:	021b      	lsls	r3, r3, #8
    14ca:	0a1b      	lsrs	r3, r3, #8
    14cc:	5053      	str	r3, [r2, r1]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    14ce:	2380      	movs	r3, #128	; 0x80
    14d0:	6013      	str	r3, [r2, #0]
	inline void enable()  { usb.CTRLA.bit.ENABLE = 1; }
    14d2:	7822      	ldrb	r2, [r4, #0]
    14d4:	3b7e      	subs	r3, #126	; 0x7e
    14d6:	4313      	orrs	r3, r2
    14d8:	7023      	strb	r3, [r4, #0]
	initialized = true;
    14da:	2301      	movs	r3, #1
	SerialUSB.begin(0);
    14dc:	2100      	movs	r1, #0
	initialized = true;
    14de:	702b      	strb	r3, [r5, #0]
	SerialUSB.begin(0);
    14e0:	f7ff fc60 	bl	da4 <_ZN7Serial_5beginEm>
}
    14e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    14e6:	46c0      	nop			; (mov r8, r8)
    14e8:	2000014d 	.word	0x2000014d
    14ec:	2000014c 	.word	0x2000014c
    14f0:	40000400 	.word	0x40000400
    14f4:	41004458 	.word	0x41004458
    14f8:	4100443c 	.word	0x4100443c
    14fc:	41004459 	.word	0x41004459
    1500:	40000c00 	.word	0x40000c00
    1504:	00004006 	.word	0x00004006
    1508:	00001eed 	.word	0x00001eed
    150c:	200005e4 	.word	0x200005e4
    1510:	00806024 	.word	0x00806024
    1514:	fffff83f 	.word	0xfffff83f
    1518:	ffff8fff 	.word	0xffff8fff
    151c:	200000c4 	.word	0x200000c4
    1520:	e000e100 	.word	0xe000e100

00001524 <_ZN14USBDeviceClass6attachEv>:
	if (!initialized)
    1524:	7800      	ldrb	r0, [r0, #0]
    1526:	2800      	cmp	r0, #0
    1528:	d010      	beq.n	154c <_ZN14USBDeviceClass6attachEv+0x28>
	inline void attach() { usb.CTRLB.bit.DETACH = 0; }
    152a:	2101      	movs	r1, #1
    152c:	4b08      	ldr	r3, [pc, #32]	; (1550 <_ZN14USBDeviceClass6attachEv+0x2c>)
    152e:	681b      	ldr	r3, [r3, #0]
    1530:	891a      	ldrh	r2, [r3, #8]
    1532:	438a      	bics	r2, r1
    1534:	811a      	strh	r2, [r3, #8]
	inline void enableEndOfResetInterrupt()    { usb.INTENSET.bit.EORST = 1; }
    1536:	2208      	movs	r2, #8
    1538:	8b19      	ldrh	r1, [r3, #24]
    153a:	430a      	orrs	r2, r1
    153c:	831a      	strh	r2, [r3, #24]
	inline void enableStartOfFrameInterrupt()  { usb.INTENSET.bit.SOF = 1; }
    153e:	2204      	movs	r2, #4
    1540:	8b19      	ldrh	r1, [r3, #24]
    1542:	430a      	orrs	r2, r1
    1544:	831a      	strh	r2, [r3, #24]
	_usbConfiguration = 0;
    1546:	2200      	movs	r2, #0
    1548:	4b02      	ldr	r3, [pc, #8]	; (1554 <_ZN14USBDeviceClass6attachEv+0x30>)
    154a:	601a      	str	r2, [r3, #0]
}
    154c:	4770      	bx	lr
    154e:	46c0      	nop			; (mov r8, r8)
    1550:	200005e4 	.word	0x200005e4
    1554:	200005dc 	.word	0x200005dc

00001558 <_ZN14USBDeviceClass10setAddressEm>:
{
    1558:	b510      	push	{r4, lr}
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
    155a:	4a0f      	ldr	r2, [pc, #60]	; (1598 <_ZN14USBDeviceClass10setAddressEm+0x40>)
    155c:	6993      	ldr	r3, [r2, #24]
    155e:	0b9b      	lsrs	r3, r3, #14
    1560:	039b      	lsls	r3, r3, #14
    1562:	6193      	str	r3, [r2, #24]
	inline void epBank1AckTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT(2); }
    1564:	6813      	ldr	r3, [r2, #0]
    1566:	2202      	movs	r2, #2
    1568:	33ff      	adds	r3, #255	; 0xff
    156a:	721a      	strb	r2, [r3, #8]
	inline void epBank1SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK1RDY = 1; }
    156c:	7998      	ldrb	r0, [r3, #6]
    156e:	3a82      	subs	r2, #130	; 0x82
    1570:	4302      	orrs	r2, r0
    1572:	719a      	strb	r2, [r3, #6]
	inline bool epBank1IsTransferComplete(ep_t ep)  { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.TRCPT1; }
    1574:	7a1a      	ldrb	r2, [r3, #8]
	while (!usbd.epBank1IsTransferComplete(0)) {}
    1576:	0792      	lsls	r2, r2, #30
    1578:	d5fc      	bpl.n	1574 <_ZN14USBDeviceClass10setAddressEm+0x1c>
	USB->DEVICE.DADD.bit.DADD = addr; // Address
    157a:	247f      	movs	r4, #127	; 0x7f
    157c:	4a07      	ldr	r2, [pc, #28]	; (159c <_ZN14USBDeviceClass10setAddressEm+0x44>)
    157e:	4021      	ands	r1, r4
    1580:	7a93      	ldrb	r3, [r2, #10]
    1582:	0008      	movs	r0, r1
    1584:	43a3      	bics	r3, r4
    1586:	0019      	movs	r1, r3
	USB->DEVICE.DADD.bit.ADDEN = 1; // Enable
    1588:	2380      	movs	r3, #128	; 0x80
	USB->DEVICE.DADD.bit.DADD = addr; // Address
    158a:	4301      	orrs	r1, r0
    158c:	7291      	strb	r1, [r2, #10]
	USB->DEVICE.DADD.bit.ADDEN = 1; // Enable
    158e:	7a91      	ldrb	r1, [r2, #10]
    1590:	425b      	negs	r3, r3
    1592:	430b      	orrs	r3, r1
    1594:	7293      	strb	r3, [r2, #10]
}
    1596:	bd10      	pop	{r4, pc}
    1598:	200005e4 	.word	0x200005e4
    159c:	41005000 	.word	0x41005000

000015a0 <_ZN14USBDeviceClass25handleClassInterfaceSetupER8USBSetup>:
{
    15a0:	b510      	push	{r4, lr}
    15a2:	000c      	movs	r4, r1
	bool ret = PluggableUSB().setup(setup);
    15a4:	f7ff fc8a 	bl	ebc <_Z12PluggableUSBv>
    15a8:	0021      	movs	r1, r4
    15aa:	f7ff fc3e 	bl	e2a <_ZN13PluggableUSB_5setupER8USBSetup>
	if ( ret == false) {
    15ae:	2800      	cmp	r0, #0
    15b0:	d104      	bne.n	15bc <_ZN14USBDeviceClass25handleClassInterfaceSetupER8USBSetup+0x1c>
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
    15b2:	4a03      	ldr	r2, [pc, #12]	; (15c0 <_ZN14USBDeviceClass25handleClassInterfaceSetupER8USBSetup+0x20>)
    15b4:	6993      	ldr	r3, [r2, #24]
    15b6:	0b9b      	lsrs	r3, r3, #14
    15b8:	039b      	lsls	r3, r3, #14
    15ba:	6193      	str	r3, [r2, #24]
}
    15bc:	bd10      	pop	{r4, pc}
    15be:	46c0      	nop			; (mov r8, r8)
    15c0:	200005e4 	.word	0x200005e4

000015c4 <_ZN14USBDeviceClass6initEPEmm>:
{
    15c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    15c6:	000d      	movs	r5, r1
	if (config == (USB_ENDPOINT_TYPE_INTERRUPT | USB_ENDPOINT_IN(0)))
    15c8:	2a83      	cmp	r2, #131	; 0x83
    15ca:	d119      	bne.n	1600 <_ZN14USBDeviceClass6initEPEmm+0x3c>
	inline void epBank1SetSize(ep_t ep, uint16_t size) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.SIZE = EP_PCKSIZE_SIZE(size); }
    15cc:	b2cb      	uxtb	r3, r1
    15ce:	4c39      	ldr	r4, [pc, #228]	; (16b4 <_ZN14USBDeviceClass6initEPEmm+0xf0>)
    15d0:	015a      	lsls	r2, r3, #5
    15d2:	18a2      	adds	r2, r4, r2
    15d4:	6991      	ldr	r1, [r2, #24]
    15d6:	4838      	ldr	r0, [pc, #224]	; (16b8 <_ZN14USBDeviceClass6initEPEmm+0xf4>)
		usbd.epBank1SetAddress(ep, &udd_ep_in_cache_buffer[ep]);
    15d8:	01ad      	lsls	r5, r5, #6
    15da:	4008      	ands	r0, r1
    15dc:	21c0      	movs	r1, #192	; 0xc0
    15de:	0589      	lsls	r1, r1, #22
    15e0:	4301      	orrs	r1, r0
    15e2:	6191      	str	r1, [r2, #24]
    15e4:	4935      	ldr	r1, [pc, #212]	; (16bc <_ZN14USBDeviceClass6initEPEmm+0xf8>)
	inline void epBank1SetType(ep_t ep, uint8_t type) { usb.DeviceEndpoint[ep].EPCFG.bit.EPTYPE1 = type; }
    15e6:	6820      	ldr	r0, [r4, #0]
    15e8:	194d      	adds	r5, r1, r5
    15ea:	2170      	movs	r1, #112	; 0x70
    15ec:	3308      	adds	r3, #8
	inline void epBank1SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[1].ADDR.reg = (uint32_t)addr; }
    15ee:	6155      	str	r5, [r2, #20]
	inline void epBank1SetType(ep_t ep, uint8_t type) { usb.DeviceEndpoint[ep].EPCFG.bit.EPTYPE1 = type; }
    15f0:	015b      	lsls	r3, r3, #5
    15f2:	5c1a      	ldrb	r2, [r3, r0]
    15f4:	438a      	bics	r2, r1
    15f6:	0011      	movs	r1, r2
    15f8:	2240      	movs	r2, #64	; 0x40
    15fa:	430a      	orrs	r2, r1
    15fc:	541a      	strb	r2, [r3, r0]
}
    15fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	else if (config == (USB_ENDPOINT_TYPE_BULK | USB_ENDPOINT_OUT(0)))
    1600:	2a02      	cmp	r2, #2
    1602:	d152      	bne.n	16aa <_ZN14USBDeviceClass6initEPEmm+0xe6>
		if (epHandlers[ep] != NULL) {
    1604:	4a2e      	ldr	r2, [pc, #184]	; (16c0 <_ZN14USBDeviceClass6initEPEmm+0xfc>)
    1606:	008b      	lsls	r3, r1, #2
    1608:	5898      	ldr	r0, [r3, r2]
    160a:	2800      	cmp	r0, #0
    160c:	d002      	beq.n	1614 <_ZN14USBDeviceClass6initEPEmm+0x50>
			delete (DoubleBufferedEPOutHandler*)epHandlers[ep];
    160e:	6803      	ldr	r3, [r0, #0]
    1610:	695b      	ldr	r3, [r3, #20]
    1612:	4798      	blx	r3
		epHandlers[ep] = new DoubleBufferedEPOutHandler(usbd, ep);
    1614:	20da      	movs	r0, #218	; 0xda
    1616:	0040      	lsls	r0, r0, #1
    1618:	f000 fe52 	bl	22c0 <_Znwj>
    memset( _aucBuffer, 0, N ) ;
    161c:	2280      	movs	r2, #128	; 0x80
    161e:	0004      	movs	r4, r0
		notify(false)
    1620:	4e24      	ldr	r6, [pc, #144]	; (16b4 <_ZN14USBDeviceClass6initEPEmm+0xf0>)
    1622:	4b28      	ldr	r3, [pc, #160]	; (16c4 <_ZN14USBDeviceClass6initEPEmm+0x100>)
    1624:	6046      	str	r6, [r0, #4]
    1626:	6003      	str	r3, [r0, #0]
    1628:	0052      	lsls	r2, r2, #1
    162a:	2100      	movs	r1, #0
    162c:	3008      	adds	r0, #8
    162e:	f001 f830 	bl	2692 <memset>
  _iHead = 0;
    1632:	0022      	movs	r2, r4
    1634:	2300      	movs	r3, #0
    1636:	32fc      	adds	r2, #252	; 0xfc
    1638:	60d3      	str	r3, [r2, #12]
    163a:	6155      	str	r5, [r2, #20]
  _iTail = 0;
    163c:	6113      	str	r3, [r2, #16]
    163e:	6613      	str	r3, [r2, #96]	; 0x60
    1640:	6193      	str	r3, [r2, #24]
    1642:	61d3      	str	r3, [r2, #28]
    1644:	6653      	str	r3, [r2, #100]	; 0x64
    1646:	22b2      	movs	r2, #178	; 0xb2
    1648:	0052      	lsls	r2, r2, #1
    164a:	54a3      	strb	r3, [r4, r2]
    164c:	3244      	adds	r2, #68	; 0x44
    164e:	50a3      	str	r3, [r4, r2]
    1650:	3204      	adds	r2, #4
    1652:	50a3      	str	r3, [r4, r2]
    1654:	3204      	adds	r2, #4
    1656:	54a3      	strb	r3, [r4, r2]
    1658:	22b2      	movs	r2, #178	; 0xb2
    165a:	32ff      	adds	r2, #255	; 0xff
    165c:	54a3      	strb	r3, [r4, r2]
	inline void epBank0SetSize(ep_t ep, uint16_t size) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.SIZE = EP_PCKSIZE_SIZE(size); }
    165e:	b2ea      	uxtb	r2, r5
    1660:	0150      	lsls	r0, r2, #5
    1662:	1831      	adds	r1, r6, r0
    1664:	688b      	ldr	r3, [r1, #8]
    1666:	4f14      	ldr	r7, [pc, #80]	; (16b8 <_ZN14USBDeviceClass6initEPEmm+0xf4>)
	inline void epBank0SetType(ep_t ep, uint8_t type) { usb.DeviceEndpoint[ep].EPCFG.bit.EPTYPE0 = type; }
    1668:	3208      	adds	r2, #8
	inline void epBank0SetSize(ep_t ep, uint16_t size) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.SIZE = EP_PCKSIZE_SIZE(size); }
    166a:	401f      	ands	r7, r3
    166c:	23c0      	movs	r3, #192	; 0xc0
    166e:	059b      	lsls	r3, r3, #22
    1670:	433b      	orrs	r3, r7
	inline void epBank0SetType(ep_t ep, uint8_t type) { usb.DeviceEndpoint[ep].EPCFG.bit.EPTYPE0 = type; }
    1672:	2707      	movs	r7, #7
	inline void epBank0SetSize(ep_t ep, uint16_t size) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.SIZE = EP_PCKSIZE_SIZE(size); }
    1674:	608b      	str	r3, [r1, #8]
	inline void epBank0SetType(ep_t ep, uint8_t type) { usb.DeviceEndpoint[ep].EPCFG.bit.EPTYPE0 = type; }
    1676:	6833      	ldr	r3, [r6, #0]
    1678:	0152      	lsls	r2, r2, #5
    167a:	5cd6      	ldrb	r6, [r2, r3]
    167c:	00ad      	lsls	r5, r5, #2
    167e:	43be      	bics	r6, r7
    1680:	46b4      	mov	ip, r6
    1682:	2603      	movs	r6, #3
    1684:	4667      	mov	r7, ip
    1686:	433e      	orrs	r6, r7
    1688:	54d6      	strb	r6, [r2, r3]
		usbd.epBank0SetAddress(ep, const_cast<uint8_t *>(data0));
    168a:	0022      	movs	r2, r4
    168c:	321d      	adds	r2, #29
    168e:	32ff      	adds	r2, #255	; 0xff
	inline void epBank0SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[0].ADDR.reg = (uint32_t)addr; }
    1690:	604a      	str	r2, [r1, #4]
	inline void epBank0EnableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRCPT0 = 1; }
    1692:	2201      	movs	r2, #1
    1694:	181b      	adds	r3, r3, r0
    1696:	33ff      	adds	r3, #255	; 0xff
    1698:	7a99      	ldrb	r1, [r3, #10]
		release();
    169a:	0020      	movs	r0, r4
	inline void epBank0EnableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRCPT0 = 1; }
    169c:	430a      	orrs	r2, r1
    169e:	729a      	strb	r2, [r3, #10]
		release();
    16a0:	f7ff fccc 	bl	103c <_ZN26DoubleBufferedEPOutHandler7releaseEv>
    16a4:	4b06      	ldr	r3, [pc, #24]	; (16c0 <_ZN14USBDeviceClass6initEPEmm+0xfc>)
    16a6:	515c      	str	r4, [r3, r5]
    16a8:	e7a9      	b.n	15fe <_ZN14USBDeviceClass6initEPEmm+0x3a>
    16aa:	0011      	movs	r1, r2
    16ac:	0028      	movs	r0, r5
    16ae:	f7ff fc1d 	bl	eec <_ZN14USBDeviceClass6initEPEmm.part.7>
}
    16b2:	e7a4      	b.n	15fe <_ZN14USBDeviceClass6initEPEmm+0x3a>
    16b4:	200005e4 	.word	0x200005e4
    16b8:	8fffffff 	.word	0x8fffffff
    16bc:	20000158 	.word	0x20000158
    16c0:	20000130 	.word	0x20000130
    16c4:	00002900 	.word	0x00002900

000016c8 <_ZN14USBDeviceClass13initEndpointsEv>:
void USBDeviceClass::initEndpoints() {
    16c8:	b570      	push	{r4, r5, r6, lr}
    16ca:	0005      	movs	r5, r0
    16cc:	2401      	movs	r4, #1
	for (uint8_t i = 1; (i < EP_ARRAY_SIZE) && (EndPoints[i] != 0); i++) {
    16ce:	4b06      	ldr	r3, [pc, #24]	; (16e8 <_ZN14USBDeviceClass13initEndpointsEv+0x20>)
    16d0:	00a2      	lsls	r2, r4, #2
    16d2:	58d2      	ldr	r2, [r2, r3]
    16d4:	2a00      	cmp	r2, #0
    16d6:	d006      	beq.n	16e6 <_ZN14USBDeviceClass13initEndpointsEv+0x1e>
		initEP(i, EndPoints[i]);
    16d8:	0021      	movs	r1, r4
    16da:	0028      	movs	r0, r5
    16dc:	3401      	adds	r4, #1
    16de:	f7ff ff71 	bl	15c4 <_ZN14USBDeviceClass6initEPEmm>
	for (uint8_t i = 1; (i < EP_ARRAY_SIZE) && (EndPoints[i] != 0); i++) {
    16e2:	2c0a      	cmp	r4, #10
    16e4:	d1f3      	bne.n	16ce <_ZN14USBDeviceClass13initEndpointsEv+0x6>
}
    16e6:	bd70      	pop	{r4, r5, r6, pc}
    16e8:	20000104 	.word	0x20000104

000016ec <_ZN14USBDeviceClass5clearEm>:
		usbd.epBank1AckTransferComplete(ep);
	}
}

void USBDeviceClass::clear(uint32_t ep) {
	usbd.epBank1SetAddress(ep, &udd_ep_in_cache_buffer[ep]);
    16ec:	4b0b      	ldr	r3, [pc, #44]	; (171c <_ZN14USBDeviceClass5clearEm+0x30>)
	inline void epBank1SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[1].ADDR.reg = (uint32_t)addr; }
    16ee:	b2ca      	uxtb	r2, r1
    16f0:	480b      	ldr	r0, [pc, #44]	; (1720 <_ZN14USBDeviceClass5clearEm+0x34>)
    16f2:	0189      	lsls	r1, r1, #6
    16f4:	1859      	adds	r1, r3, r1
    16f6:	0153      	lsls	r3, r2, #5
    16f8:	18c3      	adds	r3, r0, r3
    16fa:	6159      	str	r1, [r3, #20]
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
    16fc:	6999      	ldr	r1, [r3, #24]
	inline void epBank1AckTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT(2); }
    16fe:	3208      	adds	r2, #8
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
    1700:	0b89      	lsrs	r1, r1, #14
    1702:	0389      	lsls	r1, r1, #14
    1704:	6199      	str	r1, [r3, #24]
	inline void epBank1AckTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT(2); }
    1706:	6803      	ldr	r3, [r0, #0]
    1708:	0152      	lsls	r2, r2, #5
    170a:	189a      	adds	r2, r3, r2
    170c:	2302      	movs	r3, #2
    170e:	71d3      	strb	r3, [r2, #7]
	inline void epBank1SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK1RDY = 1; }
    1710:	7951      	ldrb	r1, [r2, #5]
    1712:	3b82      	subs	r3, #130	; 0x82
    1714:	430b      	orrs	r3, r1
    1716:	7153      	strb	r3, [r2, #5]
	// Clear the transfer complete flag
	usbd.epBank1AckTransferComplete(ep);

	// RAM buffer is full, we can send data (IN)
	usbd.epBank1SetReady(ep);
}
    1718:	4770      	bx	lr
    171a:	46c0      	nop			; (mov r8, r8)
    171c:	20000158 	.word	0x20000158
    1720:	200005e4 	.word	0x200005e4

00001724 <_ZN14USBDeviceClass9availableEm>:
}

// Number of bytes, assumes a rx endpoint
uint32_t USBDeviceClass::available(uint32_t ep)
{
	if (epHandlers[ep]) {
    1724:	4b08      	ldr	r3, [pc, #32]	; (1748 <_ZN14USBDeviceClass9availableEm+0x24>)
    1726:	008a      	lsls	r2, r1, #2
    1728:	58d0      	ldr	r0, [r2, r3]
{
    172a:	b510      	push	{r4, lr}
	if (epHandlers[ep]) {
    172c:	2800      	cmp	r0, #0
    172e:	d003      	beq.n	1738 <_ZN14USBDeviceClass9availableEm+0x14>
		return epHandlers[ep]->available();
    1730:	6803      	ldr	r3, [r0, #0]
    1732:	689b      	ldr	r3, [r3, #8]
    1734:	4798      	blx	r3
	} else {
		return usbd.epBank0ByteCount(ep);
	}
}
    1736:	bd10      	pop	{r4, pc}
	inline uint16_t epBank0ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT; }
    1738:	b2c9      	uxtb	r1, r1
    173a:	4b04      	ldr	r3, [pc, #16]	; (174c <_ZN14USBDeviceClass9availableEm+0x28>)
    173c:	0149      	lsls	r1, r1, #5
    173e:	1859      	adds	r1, r3, r1
    1740:	6888      	ldr	r0, [r1, #8]
    1742:	0480      	lsls	r0, r0, #18
    1744:	0c80      	lsrs	r0, r0, #18
		return usbd.epBank0ByteCount(ep);
    1746:	e7f6      	b.n	1736 <_ZN14USBDeviceClass9availableEm+0x12>
    1748:	20000130 	.word	0x20000130
    174c:	200005e4 	.word	0x200005e4

00001750 <_ZN14USBDeviceClass5flushEm>:
{
    1750:	b510      	push	{r4, lr}
    1752:	000c      	movs	r4, r1
	if (available(ep)) {
    1754:	f7ff ffe6 	bl	1724 <_ZN14USBDeviceClass9availableEm>
    1758:	2800      	cmp	r0, #0
    175a:	d00c      	beq.n	1776 <_ZN14USBDeviceClass5flushEm+0x26>
	inline void epBank1SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK1RDY = 1; }
    175c:	4b06      	ldr	r3, [pc, #24]	; (1778 <_ZN14USBDeviceClass5flushEm+0x28>)
    175e:	b2e4      	uxtb	r4, r4
    1760:	681b      	ldr	r3, [r3, #0]
    1762:	3408      	adds	r4, #8
    1764:	0164      	lsls	r4, r4, #5
    1766:	191c      	adds	r4, r3, r4
    1768:	2380      	movs	r3, #128	; 0x80
    176a:	7962      	ldrb	r2, [r4, #5]
    176c:	425b      	negs	r3, r3
    176e:	4313      	orrs	r3, r2
    1770:	7163      	strb	r3, [r4, #5]
	inline void epBank1AckTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT(2); }
    1772:	2302      	movs	r3, #2
    1774:	71e3      	strb	r3, [r4, #7]
}
    1776:	bd10      	pop	{r4, pc}
    1778:	200005e4 	.word	0x200005e4

0000177c <_ZN14USBDeviceClass4recvEmPvm>:

// Non Blocking receive
// Return number of bytes read
uint32_t USBDeviceClass::recv(uint32_t ep, void *_data, uint32_t len)
{
    177c:	b5f0      	push	{r4, r5, r6, r7, lr}
    177e:	001c      	movs	r4, r3
	if (!_usbConfiguration)
    1780:	4b30      	ldr	r3, [pc, #192]	; (1844 <_ZN14USBDeviceClass4recvEmPvm+0xc8>)
{
    1782:	b085      	sub	sp, #20
	if (!_usbConfiguration)
    1784:	681b      	ldr	r3, [r3, #0]
{
    1786:	0007      	movs	r7, r0
    1788:	000d      	movs	r5, r1
    178a:	9202      	str	r2, [sp, #8]
	if (!_usbConfiguration)
    178c:	2b00      	cmp	r3, #0
    178e:	d056      	beq.n	183e <_ZN14USBDeviceClass4recvEmPvm+0xc2>
		return -1;

#ifdef PIN_LED_RXL
	if (rxLEDPulse == 0)
    1790:	4e2d      	ldr	r6, [pc, #180]	; (1848 <_ZN14USBDeviceClass4recvEmPvm+0xcc>)
    1792:	7831      	ldrb	r1, [r6, #0]
    1794:	b2c9      	uxtb	r1, r1
    1796:	2900      	cmp	r1, #0
    1798:	d102      	bne.n	17a0 <_ZN14USBDeviceClass4recvEmPvm+0x24>
		digitalWrite(PIN_LED_RXL, LOW);
    179a:	2019      	movs	r0, #25
    179c:	f000 fcac 	bl	20f8 <digitalWrite>

	rxLEDPulse = TX_RX_LED_PULSE_MS;
    17a0:	2364      	movs	r3, #100	; 0x64
    17a2:	7033      	strb	r3, [r6, #0]
#endif

	if (epHandlers[ep]) {
    17a4:	4b29      	ldr	r3, [pc, #164]	; (184c <_ZN14USBDeviceClass4recvEmPvm+0xd0>)
    17a6:	00aa      	lsls	r2, r5, #2
    17a8:	58d0      	ldr	r0, [r2, r3]
    17aa:	2800      	cmp	r0, #0
    17ac:	d008      	beq.n	17c0 <_ZN14USBDeviceClass4recvEmPvm+0x44>
		return epHandlers[ep]->recv(_data, len);
    17ae:	6803      	ldr	r3, [r0, #0]
    17b0:	0022      	movs	r2, r4
    17b2:	685b      	ldr	r3, [r3, #4]
    17b4:	9902      	ldr	r1, [sp, #8]
    17b6:	4798      	blx	r3
    17b8:	0004      	movs	r4, r0
		// Enable Transfer complete 0 interrupt
		usbd.epBank0EnableTransferComplete(ep);
	}

	return len;
}
    17ba:	0020      	movs	r0, r4
    17bc:	b005      	add	sp, #20
    17be:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (available(ep) < len)
    17c0:	0029      	movs	r1, r5
    17c2:	0038      	movs	r0, r7
    17c4:	f7ff ffae 	bl	1724 <_ZN14USBDeviceClass9availableEm>
    17c8:	4284      	cmp	r4, r0
    17ca:	d904      	bls.n	17d6 <_ZN14USBDeviceClass4recvEmPvm+0x5a>
		len = available(ep);
    17cc:	0029      	movs	r1, r5
    17ce:	0038      	movs	r0, r7
    17d0:	f7ff ffa8 	bl	1724 <_ZN14USBDeviceClass9availableEm>
    17d4:	0004      	movs	r4, r0
	inline void epBank0DisableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENCLR.bit.TRCPT0 = 1; }
    17d6:	2101      	movs	r1, #1
	inline void epBank0SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = bc; }
    17d8:	b2eb      	uxtb	r3, r5
    17da:	4e1d      	ldr	r6, [pc, #116]	; (1850 <_ZN14USBDeviceClass4recvEmPvm+0xd4>)
    17dc:	9303      	str	r3, [sp, #12]
    17de:	015b      	lsls	r3, r3, #5
    17e0:	9301      	str	r3, [sp, #4]
    17e2:	18f2      	adds	r2, r6, r3
    17e4:	6893      	ldr	r3, [r2, #8]
    17e6:	0b9b      	lsrs	r3, r3, #14
    17e8:	039b      	lsls	r3, r3, #14
    17ea:	6093      	str	r3, [r2, #8]
	inline void epBank0DisableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENCLR.bit.TRCPT0 = 1; }
    17ec:	9a01      	ldr	r2, [sp, #4]
    17ee:	6833      	ldr	r3, [r6, #0]
	memcpy(_data, udd_ep_out_cache_buffer[ep], len);
    17f0:	9802      	ldr	r0, [sp, #8]
    17f2:	189b      	adds	r3, r3, r2
    17f4:	33ff      	adds	r3, #255	; 0xff
    17f6:	7a5a      	ldrb	r2, [r3, #9]
    17f8:	430a      	orrs	r2, r1
    17fa:	4916      	ldr	r1, [pc, #88]	; (1854 <_ZN14USBDeviceClass4recvEmPvm+0xd8>)
    17fc:	725a      	strb	r2, [r3, #9]
    17fe:	01ab      	lsls	r3, r5, #6
    1800:	18c9      	adds	r1, r1, r3
    1802:	0022      	movs	r2, r4
    1804:	f000 ff3c 	bl	2680 <memcpy>
	if (len && !available(ep)) {
    1808:	2c00      	cmp	r4, #0
    180a:	d0d6      	beq.n	17ba <_ZN14USBDeviceClass4recvEmPvm+0x3e>
    180c:	0029      	movs	r1, r5
    180e:	0038      	movs	r0, r7
    1810:	f7ff ff88 	bl	1724 <_ZN14USBDeviceClass9availableEm>
    1814:	2800      	cmp	r0, #0
    1816:	d1d0      	bne.n	17ba <_ZN14USBDeviceClass4recvEmPvm+0x3e>
	inline void epBank0ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK0RDY = 1; }
    1818:	2140      	movs	r1, #64	; 0x40
    181a:	9b03      	ldr	r3, [sp, #12]
    181c:	6832      	ldr	r2, [r6, #0]
    181e:	3308      	adds	r3, #8
    1820:	015b      	lsls	r3, r3, #5
    1822:	18d3      	adds	r3, r2, r3
    1824:	7918      	ldrb	r0, [r3, #4]
    1826:	4301      	orrs	r1, r0
    1828:	7119      	strb	r1, [r3, #4]
	inline void epBank0AckTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT(1); }
    182a:	2101      	movs	r1, #1
    182c:	71d9      	strb	r1, [r3, #7]
	inline void epBank0EnableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRCPT0 = 1; }
    182e:	2101      	movs	r1, #1
    1830:	9b01      	ldr	r3, [sp, #4]
    1832:	18d3      	adds	r3, r2, r3
    1834:	33ff      	adds	r3, #255	; 0xff
    1836:	7a9a      	ldrb	r2, [r3, #10]
    1838:	430a      	orrs	r2, r1
    183a:	729a      	strb	r2, [r3, #10]
    183c:	e7bd      	b.n	17ba <_ZN14USBDeviceClass4recvEmPvm+0x3e>
		return -1;
    183e:	2401      	movs	r4, #1
    1840:	4264      	negs	r4, r4
    1842:	e7ba      	b.n	17ba <_ZN14USBDeviceClass4recvEmPvm+0x3e>
    1844:	200005dc 	.word	0x200005dc
    1848:	2000014c 	.word	0x2000014c
    184c:	20000130 	.word	0x20000130
    1850:	200005e4 	.word	0x200005e4
    1854:	20000318 	.word	0x20000318

00001858 <_ZN14USBDeviceClass4recvEm>:

// Recv 1 byte if ready
int USBDeviceClass::recv(uint32_t ep)
{
    1858:	b513      	push	{r0, r1, r4, lr}
	uint8_t c;
	if (recv(ep, &c, 1) != 1) {
    185a:	466b      	mov	r3, sp
    185c:	1ddc      	adds	r4, r3, #7
    185e:	0022      	movs	r2, r4
    1860:	2301      	movs	r3, #1
    1862:	f7ff ff8b 	bl	177c <_ZN14USBDeviceClass4recvEmPvm>
    1866:	2801      	cmp	r0, #1
    1868:	d101      	bne.n	186e <_ZN14USBDeviceClass4recvEm+0x16>
		return -1;
	} else {
		return c;
    186a:	7820      	ldrb	r0, [r4, #0]
	}
}
    186c:	bd16      	pop	{r1, r2, r4, pc}
		return -1;
    186e:	2001      	movs	r0, #1
    1870:	4240      	negs	r0, r0
    1872:	e7fb      	b.n	186c <_ZN14USBDeviceClass4recvEm+0x14>

00001874 <_ZN14USBDeviceClass14armRecvCtrlOUTEm>:

uint8_t USBDeviceClass::armRecvCtrlOUT(uint32_t ep)
{
    1874:	b570      	push	{r4, r5, r6, lr}
	// Get endpoint configuration from setting register
	usbd.epBank0SetAddress(ep, &udd_ep_out_cache_buffer[ep]);
    1876:	4b13      	ldr	r3, [pc, #76]	; (18c4 <_ZN14USBDeviceClass14armRecvCtrlOUTEm+0x50>)
	inline void epBank0SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[0].ADDR.reg = (uint32_t)addr; }
    1878:	b2cc      	uxtb	r4, r1
    187a:	4a13      	ldr	r2, [pc, #76]	; (18c8 <_ZN14USBDeviceClass14armRecvCtrlOUTEm+0x54>)
    187c:	0160      	lsls	r0, r4, #5
    187e:	0189      	lsls	r1, r1, #6
    1880:	1859      	adds	r1, r3, r1
    1882:	1813      	adds	r3, r2, r0
    1884:	6059      	str	r1, [r3, #4]
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
    1886:	6899      	ldr	r1, [r3, #8]
    1888:	4d10      	ldr	r5, [pc, #64]	; (18cc <_ZN14USBDeviceClass14armRecvCtrlOUTEm+0x58>)
	inline void epBank0ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK0RDY = 1; }
    188a:	3408      	adds	r4, #8
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
    188c:	400d      	ands	r5, r1
    188e:	2180      	movs	r1, #128	; 0x80
    1890:	0349      	lsls	r1, r1, #13
    1892:	4329      	orrs	r1, r5
	inline void epBank0ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK0RDY = 1; }
    1894:	2540      	movs	r5, #64	; 0x40
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
    1896:	6099      	str	r1, [r3, #8]
	inline void epBank0SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = bc; }
    1898:	6899      	ldr	r1, [r3, #8]
    189a:	0b89      	lsrs	r1, r1, #14
    189c:	0389      	lsls	r1, r1, #14
    189e:	6099      	str	r1, [r3, #8]
	inline void epBank0ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK0RDY = 1; }
    18a0:	6811      	ldr	r1, [r2, #0]
    18a2:	0163      	lsls	r3, r4, #5
    18a4:	18cb      	adds	r3, r1, r3
    18a6:	791e      	ldrb	r6, [r3, #4]
    18a8:	4335      	orrs	r5, r6
    18aa:	711d      	strb	r5, [r3, #4]
	inline bool epBank0IsReady(ep_t ep)    { return usb.DeviceEndpoint[ep].EPSTATUS.bit.BK0RDY; }
    18ac:	799d      	ldrb	r5, [r3, #6]
	usbd.epBank0SetByteCount(ep, 0);

	usbd.epBank0ResetReady(ep);

	// Wait OUT
	while (!usbd.epBank0IsReady(ep)) {}
    18ae:	066d      	lsls	r5, r5, #25
    18b0:	d5fc      	bpl.n	18ac <_ZN14USBDeviceClass14armRecvCtrlOUTEm+0x38>
	inline bool epBank0IsTransferComplete(ep_t ep)  { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.TRCPT0; }
    18b2:	0164      	lsls	r4, r4, #5
    18b4:	1909      	adds	r1, r1, r4
    18b6:	79cb      	ldrb	r3, [r1, #7]
	while (!usbd.epBank0IsTransferComplete(ep)) {}
    18b8:	07db      	lsls	r3, r3, #31
    18ba:	d5fc      	bpl.n	18b6 <_ZN14USBDeviceClass14armRecvCtrlOUTEm+0x42>
	inline uint16_t epBank0ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT; }
    18bc:	1812      	adds	r2, r2, r0
    18be:	6890      	ldr	r0, [r2, #8]
	return usbd.epBank0ByteCount(ep);
    18c0:	b2c0      	uxtb	r0, r0
}
    18c2:	bd70      	pop	{r4, r5, r6, pc}
    18c4:	20000318 	.word	0x20000318
    18c8:	200005e4 	.word	0x200005e4
    18cc:	f0003fff 	.word	0xf0003fff

000018d0 <_ZN14USBDeviceClass11recvControlEPvm>:
{
    18d0:	b570      	push	{r4, r5, r6, lr}
    18d2:	000d      	movs	r5, r1
	uint32_t read = armRecvCtrlOUT(0);
    18d4:	2100      	movs	r1, #0
{
    18d6:	0014      	movs	r4, r2
	uint32_t read = armRecvCtrlOUT(0);
    18d8:	f7ff ffcc 	bl	1874 <_ZN14USBDeviceClass14armRecvCtrlOUTEm>
    18dc:	42a0      	cmp	r0, r4
    18de:	d900      	bls.n	18e2 <_ZN14USBDeviceClass11recvControlEPvm+0x12>
    18e0:	0020      	movs	r0, r4
	for (uint32_t i=0; i<len; i++) {
    18e2:	2300      	movs	r3, #0
		data[i] = buffer[i];
    18e4:	4903      	ldr	r1, [pc, #12]	; (18f4 <_ZN14USBDeviceClass11recvControlEPvm+0x24>)
	for (uint32_t i=0; i<len; i++) {
    18e6:	42a3      	cmp	r3, r4
    18e8:	d003      	beq.n	18f2 <_ZN14USBDeviceClass11recvControlEPvm+0x22>
		data[i] = buffer[i];
    18ea:	5c5a      	ldrb	r2, [r3, r1]
    18ec:	54ea      	strb	r2, [r5, r3]
	for (uint32_t i=0; i<len; i++) {
    18ee:	3301      	adds	r3, #1
    18f0:	e7f9      	b.n	18e6 <_ZN14USBDeviceClass11recvControlEPvm+0x16>
}
    18f2:	bd70      	pop	{r4, r5, r6, pc}
    18f4:	20000318 	.word	0x20000318

000018f8 <_ZN14USBDeviceClass4sendEmPKvm>:
	0
};

// Blocking Send of data to an endpoint
uint32_t USBDeviceClass::send(uint32_t ep, const void *data, uint32_t len)
{
    18f8:	b5f0      	push	{r4, r5, r6, r7, lr}
    18fa:	001e      	movs	r6, r3
	uint32_t written = 0;
	uint32_t length = 0;

	if (!_usbConfiguration)
    18fc:	4b3f      	ldr	r3, [pc, #252]	; (19fc <_ZN14USBDeviceClass4sendEmPKvm+0x104>)
{
    18fe:	b085      	sub	sp, #20
	if (!_usbConfiguration)
    1900:	681b      	ldr	r3, [r3, #0]
{
    1902:	000f      	movs	r7, r1
    1904:	9201      	str	r2, [sp, #4]
	if (!_usbConfiguration)
    1906:	2b00      	cmp	r3, #0
    1908:	d03f      	beq.n	198a <_ZN14USBDeviceClass4sendEmPKvm+0x92>
		return -1;
	if (len > 16384)
    190a:	2380      	movs	r3, #128	; 0x80
    190c:	01db      	lsls	r3, r3, #7
    190e:	429e      	cmp	r6, r3
    1910:	d83b      	bhi.n	198a <_ZN14USBDeviceClass4sendEmPKvm+0x92>
		return -1;

#ifdef PIN_LED_TXL
	if (txLEDPulse == 0)
    1912:	4c3b      	ldr	r4, [pc, #236]	; (1a00 <_ZN14USBDeviceClass4sendEmPKvm+0x108>)
    1914:	7821      	ldrb	r1, [r4, #0]
    1916:	b2c9      	uxtb	r1, r1
    1918:	2900      	cmp	r1, #0
    191a:	d102      	bne.n	1922 <_ZN14USBDeviceClass4sendEmPKvm+0x2a>
		digitalWrite(PIN_LED_TXL, LOW);
    191c:	201a      	movs	r0, #26
    191e:	f000 fbeb 	bl	20f8 <digitalWrite>

	txLEDPulse = TX_RX_LED_PULSE_MS;
    1922:	2364      	movs	r3, #100	; 0x64
	uint32_t written = 0;
    1924:	2500      	movs	r5, #0
		} else {
			length = len;
		}

		/* memcopy could be safer in multi threaded environment */
		memcpy(&udd_ep_in_cache_buffer[ep], data, length);
    1926:	4a37      	ldr	r2, [pc, #220]	; (1a04 <_ZN14USBDeviceClass4sendEmPKvm+0x10c>)
	txLEDPulse = TX_RX_LED_PULSE_MS;
    1928:	7023      	strb	r3, [r4, #0]
		memcpy(&udd_ep_in_cache_buffer[ep], data, length);
    192a:	01bb      	lsls	r3, r7, #6
    192c:	18d3      	adds	r3, r2, r3
    192e:	9302      	str	r3, [sp, #8]
	while (len != 0)
    1930:	2e00      	cmp	r6, #0
    1932:	d02c      	beq.n	198e <_ZN14USBDeviceClass4sendEmPKvm+0x96>
	inline bool epBank1IsReady(ep_t ep)    { return usb.DeviceEndpoint[ep].EPSTATUS.bit.BK1RDY; }
    1934:	4b34      	ldr	r3, [pc, #208]	; (1a08 <_ZN14USBDeviceClass4sendEmPKvm+0x110>)
    1936:	681b      	ldr	r3, [r3, #0]
    1938:	9303      	str	r3, [sp, #12]
    193a:	23ff      	movs	r3, #255	; 0xff
    193c:	403b      	ands	r3, r7
    193e:	001c      	movs	r4, r3
    1940:	9300      	str	r3, [sp, #0]
    1942:	3408      	adds	r4, #8
    1944:	9b03      	ldr	r3, [sp, #12]
    1946:	0164      	lsls	r4, r4, #5
    1948:	191c      	adds	r4, r3, r4
    194a:	79a3      	ldrb	r3, [r4, #6]
    194c:	09db      	lsrs	r3, r3, #7
		if (usbd.epBank1IsReady(ep)) {
    194e:	d021      	beq.n	1994 <_ZN14USBDeviceClass4sendEmPKvm+0x9c>
			uint32_t timeout = microsecondsToClockCycles(TX_TIMEOUT_MS * 1000) / 23;
    1950:	4b2e      	ldr	r3, [pc, #184]	; (1a0c <_ZN14USBDeviceClass4sendEmPKvm+0x114>)
    1952:	492f      	ldr	r1, [pc, #188]	; (1a10 <_ZN14USBDeviceClass4sendEmPKvm+0x118>)
    1954:	6818      	ldr	r0, [r3, #0]
    1956:	f000 fdcf 	bl	24f8 <__udivsi3>
    195a:	4b2e      	ldr	r3, [pc, #184]	; (1a14 <_ZN14USBDeviceClass4sendEmPKvm+0x11c>)
    195c:	2117      	movs	r1, #23
    195e:	4358      	muls	r0, r3
    1960:	f000 fdca 	bl	24f8 <__udivsi3>
				if (LastTransmitTimedOut[ep] || timeout-- == 0) {
    1964:	4b2c      	ldr	r3, [pc, #176]	; (1a18 <_ZN14USBDeviceClass4sendEmPKvm+0x120>)
	inline bool epBank1IsTransferComplete(ep_t ep)  { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.TRCPT1; }
    1966:	79e2      	ldrb	r2, [r4, #7]
			while (!usbd.epBank1IsTransferComplete(ep)) {
    1968:	0792      	lsls	r2, r2, #30
    196a:	d413      	bmi.n	1994 <_ZN14USBDeviceClass4sendEmPKvm+0x9c>
				if (LastTransmitTimedOut[ep] || timeout-- == 0) {
    196c:	5dda      	ldrb	r2, [r3, r7]
    196e:	2a00      	cmp	r2, #0
    1970:	d101      	bne.n	1976 <_ZN14USBDeviceClass4sendEmPKvm+0x7e>
    1972:	3801      	subs	r0, #1
    1974:	d2f7      	bcs.n	1966 <_ZN14USBDeviceClass4sendEmPKvm+0x6e>
					LastTransmitTimedOut[ep] = 1;
    1976:	2201      	movs	r2, #1
    1978:	55da      	strb	r2, [r3, r7]
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
    197a:	9b00      	ldr	r3, [sp, #0]
    197c:	4a22      	ldr	r2, [pc, #136]	; (1a08 <_ZN14USBDeviceClass4sendEmPKvm+0x110>)
    197e:	015b      	lsls	r3, r3, #5
    1980:	18d3      	adds	r3, r2, r3
    1982:	699a      	ldr	r2, [r3, #24]
    1984:	0b92      	lsrs	r2, r2, #14
    1986:	0392      	lsls	r2, r2, #14
    1988:	619a      	str	r2, [r3, #24]
					return -1;
    198a:	2501      	movs	r5, #1
    198c:	426d      	negs	r5, r5
		written += length;
		len -= length;
		data = (char *)data + length;
	}
	return written;
}
    198e:	0028      	movs	r0, r5
    1990:	b005      	add	sp, #20
    1992:	bdf0      	pop	{r4, r5, r6, r7, pc}
		LastTransmitTimedOut[ep] = 0;
    1994:	2200      	movs	r2, #0
    1996:	4b20      	ldr	r3, [pc, #128]	; (1a18 <_ZN14USBDeviceClass4sendEmPKvm+0x120>)
    1998:	0034      	movs	r4, r6
    199a:	55da      	strb	r2, [r3, r7]
		if (len >= EPX_SIZE) {
    199c:	2e3f      	cmp	r6, #63	; 0x3f
    199e:	d909      	bls.n	19b4 <_ZN14USBDeviceClass4sendEmPKvm+0xbc>
	inline void epBank1EnableAutoZLP(ep_t ep)  { EP[ep].DeviceDescBank[1].PCKSIZE.bit.AUTO_ZLP = 1; }
    19a0:	9b00      	ldr	r3, [sp, #0]
			length = EPX_SIZE;
    19a2:	2440      	movs	r4, #64	; 0x40
    19a4:	015a      	lsls	r2, r3, #5
    19a6:	4b18      	ldr	r3, [pc, #96]	; (1a08 <_ZN14USBDeviceClass4sendEmPKvm+0x110>)
    19a8:	189b      	adds	r3, r3, r2
    19aa:	2280      	movs	r2, #128	; 0x80
    19ac:	6999      	ldr	r1, [r3, #24]
    19ae:	0612      	lsls	r2, r2, #24
    19b0:	430a      	orrs	r2, r1
    19b2:	619a      	str	r2, [r3, #24]
		memcpy(&udd_ep_in_cache_buffer[ep], data, length);
    19b4:	0022      	movs	r2, r4
    19b6:	9901      	ldr	r1, [sp, #4]
    19b8:	9802      	ldr	r0, [sp, #8]
    19ba:	f000 fe61 	bl	2680 <memcpy>
	inline void epBank1SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[1].ADDR.reg = (uint32_t)addr; }
    19be:	9b00      	ldr	r3, [sp, #0]
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
    19c0:	04a1      	lsls	r1, r4, #18
	inline void epBank1SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[1].ADDR.reg = (uint32_t)addr; }
    19c2:	015a      	lsls	r2, r3, #5
    19c4:	4b10      	ldr	r3, [pc, #64]	; (1a08 <_ZN14USBDeviceClass4sendEmPKvm+0x110>)
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
    19c6:	0c89      	lsrs	r1, r1, #18
	inline void epBank1SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[1].ADDR.reg = (uint32_t)addr; }
    19c8:	189b      	adds	r3, r3, r2
    19ca:	9a02      	ldr	r2, [sp, #8]
		written += length;
    19cc:	192d      	adds	r5, r5, r4
    19ce:	615a      	str	r2, [r3, #20]
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
    19d0:	699a      	ldr	r2, [r3, #24]
		len -= length;
    19d2:	1b36      	subs	r6, r6, r4
    19d4:	0b92      	lsrs	r2, r2, #14
    19d6:	0392      	lsls	r2, r2, #14
    19d8:	430a      	orrs	r2, r1
    19da:	619a      	str	r2, [r3, #24]
	inline void epBank1AckTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT(2); }
    19dc:	9b00      	ldr	r3, [sp, #0]
    19de:	9a03      	ldr	r2, [sp, #12]
    19e0:	3308      	adds	r3, #8
    19e2:	015b      	lsls	r3, r3, #5
    19e4:	18d3      	adds	r3, r2, r3
    19e6:	2202      	movs	r2, #2
    19e8:	71da      	strb	r2, [r3, #7]
	inline void epBank1SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK1RDY = 1; }
    19ea:	7959      	ldrb	r1, [r3, #5]
    19ec:	3a82      	subs	r2, #130	; 0x82
    19ee:	430a      	orrs	r2, r1
    19f0:	715a      	strb	r2, [r3, #5]
		data = (char *)data + length;
    19f2:	9b01      	ldr	r3, [sp, #4]
    19f4:	191b      	adds	r3, r3, r4
    19f6:	9301      	str	r3, [sp, #4]
	while (len != 0)
    19f8:	e79a      	b.n	1930 <_ZN14USBDeviceClass4sendEmPKvm+0x38>
    19fa:	46c0      	nop			; (mov r8, r8)
    19fc:	200005dc 	.word	0x200005dc
    1a00:	2000014d 	.word	0x2000014d
    1a04:	20000158 	.word	0x20000158
    1a08:	200005e4 	.word	0x200005e4
    1a0c:	20000014 	.word	0x20000014
    1a10:	000f4240 	.word	0x000f4240
    1a14:	00011170 	.word	0x00011170
    1a18:	2000014f 	.word	0x2000014f

00001a1c <_ZN14USBDeviceClass7armSendEmPKvm>:

uint32_t USBDeviceClass::armSend(uint32_t ep, const void* data, uint32_t len)
{
    1a1c:	b570      	push	{r4, r5, r6, lr}
    1a1e:	000d      	movs	r5, r1
    1a20:	001c      	movs	r4, r3
	memcpy(&udd_ep_in_cache_buffer[ep], data, len);
    1a22:	4e0d      	ldr	r6, [pc, #52]	; (1a58 <_ZN14USBDeviceClass7armSendEmPKvm+0x3c>)
    1a24:	01ab      	lsls	r3, r5, #6
    1a26:	18f6      	adds	r6, r6, r3
{
    1a28:	0011      	movs	r1, r2
	memcpy(&udd_ep_in_cache_buffer[ep], data, len);
    1a2a:	0030      	movs	r0, r6
    1a2c:	0022      	movs	r2, r4
    1a2e:	f000 fe27 	bl	2680 <memcpy>
	inline void epBank1SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[1].ADDR.reg = (uint32_t)addr; }
    1a32:	b2ed      	uxtb	r5, r5
    1a34:	4909      	ldr	r1, [pc, #36]	; (1a5c <_ZN14USBDeviceClass7armSendEmPKvm+0x40>)
    1a36:	016d      	lsls	r5, r5, #5
    1a38:	194d      	adds	r5, r1, r5
    1a3a:	616e      	str	r6, [r5, #20]
	inline void epBank1SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
    1a3c:	69ab      	ldr	r3, [r5, #24]
    1a3e:	4a08      	ldr	r2, [pc, #32]	; (1a60 <_ZN14USBDeviceClass7armSendEmPKvm+0x44>)
	usbd.epBank1SetAddress(ep, &udd_ep_in_cache_buffer[ep]);
	usbd.epBank1SetMultiPacketSize(ep, 0);
	usbd.epBank1SetByteCount(ep, len);

	return len;
}
    1a40:	0020      	movs	r0, r4
    1a42:	4013      	ands	r3, r2
    1a44:	61ab      	str	r3, [r5, #24]
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
    1a46:	69ab      	ldr	r3, [r5, #24]
    1a48:	04a2      	lsls	r2, r4, #18
    1a4a:	0b9b      	lsrs	r3, r3, #14
    1a4c:	0c92      	lsrs	r2, r2, #18
    1a4e:	039b      	lsls	r3, r3, #14
    1a50:	4313      	orrs	r3, r2
    1a52:	61ab      	str	r3, [r5, #24]
    1a54:	bd70      	pop	{r4, r5, r6, pc}
    1a56:	46c0      	nop			; (mov r8, r8)
    1a58:	20000158 	.word	0x20000158
    1a5c:	200005e4 	.word	0x200005e4
    1a60:	f0003fff 	.word	0xf0003fff

00001a64 <_ZN14USBDeviceClass11sendControlEPKvm>:

uint32_t USBDeviceClass::sendControl(const void* _data, uint32_t len)
{
    1a64:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	const uint8_t *data = reinterpret_cast<const uint8_t *>(_data);
	uint32_t length = len;
	uint32_t sent = 0;
	uint32_t pos = 0;

	if (_dry_run == true)
    1a66:	4b10      	ldr	r3, [pc, #64]	; (1aa8 <_ZN14USBDeviceClass11sendControlEPKvm+0x44>)
{
    1a68:	9001      	str	r0, [sp, #4]
	if (_dry_run == true)
    1a6a:	781b      	ldrb	r3, [r3, #0]
{
    1a6c:	000f      	movs	r7, r1
    1a6e:	0015      	movs	r5, r2
	if (_dry_run == true)
    1a70:	2b00      	cmp	r3, #0
    1a72:	d10c      	bne.n	1a8e <_ZN14USBDeviceClass11sendControlEPKvm+0x2a>
		return length;

	if (_pack_message == true) {
    1a74:	4b0d      	ldr	r3, [pc, #52]	; (1aac <_ZN14USBDeviceClass11sendControlEPKvm+0x48>)
    1a76:	0016      	movs	r6, r2
    1a78:	781c      	ldrb	r4, [r3, #0]
    1a7a:	2c00      	cmp	r4, #0
    1a7c:	d009      	beq.n	1a92 <_ZN14USBDeviceClass11sendControlEPKvm+0x2e>
		memcpy(&_pack_buffer[_pack_size], data, len);
    1a7e:	4e0c      	ldr	r6, [pc, #48]	; (1ab0 <_ZN14USBDeviceClass11sendControlEPKvm+0x4c>)
    1a80:	480c      	ldr	r0, [pc, #48]	; (1ab4 <_ZN14USBDeviceClass11sendControlEPKvm+0x50>)
    1a82:	8834      	ldrh	r4, [r6, #0]
    1a84:	1900      	adds	r0, r0, r4
		_pack_size += len;
    1a86:	1964      	adds	r4, r4, r5
		memcpy(&_pack_buffer[_pack_size], data, len);
    1a88:	f000 fdfa 	bl	2680 <memcpy>
		_pack_size += len;
    1a8c:	8034      	strh	r4, [r6, #0]
		pos += sent;
		len -= sent;
 	}

	return length;
}
    1a8e:	0028      	movs	r0, r5
    1a90:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 	while (len > 0)
    1a92:	2e00      	cmp	r6, #0
    1a94:	d0fb      	beq.n	1a8e <_ZN14USBDeviceClass11sendControlEPKvm+0x2a>
		sent = armSend(EP0, data + pos, len);
    1a96:	193a      	adds	r2, r7, r4
    1a98:	0033      	movs	r3, r6
    1a9a:	2100      	movs	r1, #0
    1a9c:	9801      	ldr	r0, [sp, #4]
    1a9e:	f7ff ffbd 	bl	1a1c <_ZN14USBDeviceClass7armSendEmPKvm>
		pos += sent;
    1aa2:	1824      	adds	r4, r4, r0
		len -= sent;
    1aa4:	1a36      	subs	r6, r6, r0
 	while (len > 0)
    1aa6:	e7f4      	b.n	1a92 <_ZN14USBDeviceClass11sendControlEPKvm+0x2e>
    1aa8:	200004d8 	.word	0x200004d8
    1aac:	200005d9 	.word	0x200005d9
    1ab0:	200005da 	.word	0x200005da
    1ab4:	200004d9 	.word	0x200004d9

00001ab8 <_ZN14USBDeviceClass20sendStringDescriptorEPKhm>:
{
    1ab8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1aba:	000e      	movs	r6, r1
    1abc:	0015      	movs	r5, r2
		return false;
    1abe:	2700      	movs	r7, #0
	if (maxlen < 2)
    1ac0:	2a01      	cmp	r2, #1
    1ac2:	d927      	bls.n	1b14 <_ZN14USBDeviceClass20sendStringDescriptorEPKhm+0x5c>
	uint8_t* buffer = (uint8_t*)malloc(maxlen);
    1ac4:	0010      	movs	r0, r2
    1ac6:	f000 fdc7 	bl	2658 <malloc>
    1aca:	0004      	movs	r4, r0
	buffer[0] = strlen((const char*)string) * 2 + 2;
    1acc:	0030      	movs	r0, r6
    1ace:	f000 fea3 	bl	2818 <strlen>
    1ad2:	3001      	adds	r0, #1
    1ad4:	0040      	lsls	r0, r0, #1
	buffer[1] = 0x03;
    1ad6:	2303      	movs	r3, #3
	buffer[0] = strlen((const char*)string) * 2 + 2;
    1ad8:	7020      	strb	r0, [r4, #0]
	for (i = 2; i < maxlen && *string; i++) {
    1ada:	2202      	movs	r2, #2
		buffer[i] = 0;
    1adc:	0038      	movs	r0, r7
	buffer[1] = 0x03;
    1ade:	7063      	strb	r3, [r4, #1]
	for (i = 2; i < maxlen && *string; i++) {
    1ae0:	4295      	cmp	r5, r2
    1ae2:	d90d      	bls.n	1b00 <_ZN14USBDeviceClass20sendStringDescriptorEPKhm+0x48>
    1ae4:	7831      	ldrb	r1, [r6, #0]
    1ae6:	2900      	cmp	r1, #0
    1ae8:	d00a      	beq.n	1b00 <_ZN14USBDeviceClass20sendStringDescriptorEPKhm+0x48>
		buffer[i++] = *string++;
    1aea:	1c53      	adds	r3, r2, #1
    1aec:	b2db      	uxtb	r3, r3
    1aee:	3601      	adds	r6, #1
    1af0:	54a1      	strb	r1, [r4, r2]
		if (i == maxlen) break;
    1af2:	429d      	cmp	r5, r3
    1af4:	d003      	beq.n	1afe <_ZN14USBDeviceClass20sendStringDescriptorEPKhm+0x46>
	for (i = 2; i < maxlen && *string; i++) {
    1af6:	3202      	adds	r2, #2
		buffer[i] = 0;
    1af8:	54e0      	strb	r0, [r4, r3]
	for (i = 2; i < maxlen && *string; i++) {
    1afa:	b2d2      	uxtb	r2, r2
    1afc:	e7f0      	b.n	1ae0 <_ZN14USBDeviceClass20sendStringDescriptorEPKhm+0x28>
		buffer[i++] = *string++;
    1afe:	002a      	movs	r2, r5
	bool ret = USBDevice.sendControl(buffer, i);
    1b00:	0021      	movs	r1, r4
    1b02:	4805      	ldr	r0, [pc, #20]	; (1b18 <_ZN14USBDeviceClass20sendStringDescriptorEPKhm+0x60>)
    1b04:	f7ff ffae 	bl	1a64 <_ZN14USBDeviceClass11sendControlEPKvm>
    1b08:	1e47      	subs	r7, r0, #1
    1b0a:	41b8      	sbcs	r0, r7
    1b0c:	b2c7      	uxtb	r7, r0
	free(buffer);
    1b0e:	0020      	movs	r0, r4
    1b10:	f000 fdac 	bl	266c <free>
}
    1b14:	0038      	movs	r0, r7
    1b16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1b18:	2000012c 	.word	0x2000012c

00001b1c <_ZN14USBDeviceClass17sendConfigurationEm>:
{
    1b1c:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint32_t total = 0;
    1b1e:	2700      	movs	r7, #0
	_dry_run = true;
    1b20:	2601      	movs	r6, #1
{
    1b22:	b087      	sub	sp, #28
	_dry_run = true;
    1b24:	4b1e      	ldr	r3, [pc, #120]	; (1ba0 <_ZN14USBDeviceClass17sendConfigurationEm+0x84>)
{
    1b26:	9100      	str	r1, [sp, #0]
	uint8_t interfaces = SendInterfaces(&total);
    1b28:	a902      	add	r1, sp, #8
	_dry_run = true;
    1b2a:	701e      	strb	r6, [r3, #0]
{
    1b2c:	0005      	movs	r5, r0
	uint32_t total = 0;
    1b2e:	9702      	str	r7, [sp, #8]
	uint8_t interfaces = SendInterfaces(&total);
    1b30:	f7ff fc33 	bl	139a <_ZN14USBDeviceClass14SendInterfacesEPm>
	ConfigDescriptor config = D_CONFIG((uint16_t)(total + sizeof(ConfigDescriptor)), interfaces);
    1b34:	ac03      	add	r4, sp, #12
	uint8_t interfaces = SendInterfaces(&total);
    1b36:	9001      	str	r0, [sp, #4]
	ConfigDescriptor config = D_CONFIG((uint16_t)(total + sizeof(ConfigDescriptor)), interfaces);
    1b38:	2209      	movs	r2, #9
    1b3a:	0039      	movs	r1, r7
    1b3c:	0020      	movs	r0, r4
    1b3e:	f000 fda8 	bl	2692 <memset>
    1b42:	2309      	movs	r3, #9
    1b44:	7023      	strb	r3, [r4, #0]
    1b46:	2302      	movs	r3, #2
    1b48:	7063      	strb	r3, [r4, #1]
    1b4a:	339e      	adds	r3, #158	; 0x9e
    1b4c:	71e3      	strb	r3, [r4, #7]
    1b4e:	335a      	adds	r3, #90	; 0x5a
    1b50:	7223      	strb	r3, [r4, #8]
    1b52:	9b02      	ldr	r3, [sp, #8]
    1b54:	7166      	strb	r6, [r4, #5]
    1b56:	3309      	adds	r3, #9
    1b58:	8063      	strh	r3, [r4, #2]
    1b5a:	466b      	mov	r3, sp
    1b5c:	791b      	ldrb	r3, [r3, #4]
    1b5e:	7123      	strb	r3, [r4, #4]
	_dry_run = false;
    1b60:	4b0f      	ldr	r3, [pc, #60]	; (1ba0 <_ZN14USBDeviceClass17sendConfigurationEm+0x84>)
    1b62:	701f      	strb	r7, [r3, #0]
	if (maxlen == sizeof(ConfigDescriptor)) {
    1b64:	9b00      	ldr	r3, [sp, #0]
    1b66:	2b09      	cmp	r3, #9
    1b68:	d107      	bne.n	1b7a <_ZN14USBDeviceClass17sendConfigurationEm+0x5e>
		sendControl(&config, sizeof(ConfigDescriptor));
    1b6a:	001a      	movs	r2, r3
    1b6c:	0021      	movs	r1, r4
		sendControl(_pack_buffer, _pack_size);
    1b6e:	0028      	movs	r0, r5
    1b70:	f7ff ff78 	bl	1a64 <_ZN14USBDeviceClass11sendControlEPKvm>
}
    1b74:	2001      	movs	r0, #1
    1b76:	b007      	add	sp, #28
    1b78:	bdf0      	pop	{r4, r5, r6, r7, pc}
		_pack_message = true;
    1b7a:	4b0a      	ldr	r3, [pc, #40]	; (1ba4 <_ZN14USBDeviceClass17sendConfigurationEm+0x88>)
	sendControl(&config, sizeof(ConfigDescriptor));
    1b7c:	2209      	movs	r2, #9
		_pack_message = true;
    1b7e:	701e      	strb	r6, [r3, #0]
		_pack_size = 0;
    1b80:	4e09      	ldr	r6, [pc, #36]	; (1ba8 <_ZN14USBDeviceClass17sendConfigurationEm+0x8c>)
	sendControl(&config, sizeof(ConfigDescriptor));
    1b82:	0021      	movs	r1, r4
    1b84:	0028      	movs	r0, r5
	total = 0;
    1b86:	9702      	str	r7, [sp, #8]
		_pack_size = 0;
    1b88:	8037      	strh	r7, [r6, #0]
	sendControl(&config, sizeof(ConfigDescriptor));
    1b8a:	f7ff ff6b 	bl	1a64 <_ZN14USBDeviceClass11sendControlEPKvm>
	SendInterfaces(&total);
    1b8e:	a902      	add	r1, sp, #8
    1b90:	0028      	movs	r0, r5
    1b92:	f7ff fc02 	bl	139a <_ZN14USBDeviceClass14SendInterfacesEPm>
		_pack_message = false;
    1b96:	4b03      	ldr	r3, [pc, #12]	; (1ba4 <_ZN14USBDeviceClass17sendConfigurationEm+0x88>)
		sendControl(_pack_buffer, _pack_size);
    1b98:	8832      	ldrh	r2, [r6, #0]
		_pack_message = false;
    1b9a:	701f      	strb	r7, [r3, #0]
		sendControl(_pack_buffer, _pack_size);
    1b9c:	4903      	ldr	r1, [pc, #12]	; (1bac <_ZN14USBDeviceClass17sendConfigurationEm+0x90>)
    1b9e:	e7e6      	b.n	1b6e <_ZN14USBDeviceClass17sendConfigurationEm+0x52>
    1ba0:	200004d8 	.word	0x200004d8
    1ba4:	200005d9 	.word	0x200005d9
    1ba8:	200005da 	.word	0x200005da
    1bac:	200004d9 	.word	0x200004d9

00001bb0 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup>:
{
    1bb0:	b570      	push	{r4, r5, r6, lr}
	uint8_t t = setup.wValueH;
    1bb2:	78ce      	ldrb	r6, [r1, #3]
{
    1bb4:	b092      	sub	sp, #72	; 0x48
    1bb6:	0005      	movs	r5, r0
    1bb8:	000c      	movs	r4, r1
	if (t == USB_CONFIGURATION_DESCRIPTOR_TYPE)
    1bba:	2e02      	cmp	r6, #2
    1bbc:	d10b      	bne.n	1bd6 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x26>
		return USBDevice.sendConfiguration(setup.wLength);
    1bbe:	798b      	ldrb	r3, [r1, #6]
    1bc0:	79c9      	ldrb	r1, [r1, #7]
    1bc2:	482e      	ldr	r0, [pc, #184]	; (1c7c <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0xcc>)
    1bc4:	0209      	lsls	r1, r1, #8
    1bc6:	4319      	orrs	r1, r3
    1bc8:	f7ff ffa8 	bl	1b1c <_ZN14USBDeviceClass17sendConfigurationEm>
    1bcc:	1e41      	subs	r1, r0, #1
    1bce:	4188      	sbcs	r0, r1
    1bd0:	b2c0      	uxtb	r0, r0
}
    1bd2:	b012      	add	sp, #72	; 0x48
    1bd4:	bd70      	pop	{r4, r5, r6, pc}
	ret = PluggableUSB().getDescriptor(setup);
    1bd6:	f7ff f971 	bl	ebc <_Z12PluggableUSBv>
    1bda:	0021      	movs	r1, r4
    1bdc:	f7ff f902 	bl	de4 <_ZN13PluggableUSB_13getDescriptorER8USBSetup>
	if (ret != 0) {
    1be0:	2800      	cmp	r0, #0
    1be2:	d003      	beq.n	1bec <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x3c>
		return (ret > 0 ? true : false);
    1be4:	17c1      	asrs	r1, r0, #31
    1be6:	1a08      	subs	r0, r1, r0
    1be8:	0fc0      	lsrs	r0, r0, #31
    1bea:	e7f2      	b.n	1bd2 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x22>
	if (t == USB_DEVICE_DESCRIPTOR_TYPE)
    1bec:	2e01      	cmp	r6, #1
    1bee:	d10e      	bne.n	1c0e <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x5e>
		if (setup.wLength == 8)
    1bf0:	79e2      	ldrb	r2, [r4, #7]
    1bf2:	79a3      	ldrb	r3, [r4, #6]
    1bf4:	0212      	lsls	r2, r2, #8
    1bf6:	431a      	orrs	r2, r3
    1bf8:	4921      	ldr	r1, [pc, #132]	; (1c80 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0xd0>)
		if (*desc_addr > setup.wLength) {
    1bfa:	2a11      	cmp	r2, #17
    1bfc:	dc3c      	bgt.n	1c78 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0xc8>
			desc_length = setup.wLength;
    1bfe:	b2d2      	uxtb	r2, r2
	if (desc_length == 0) {
    1c00:	2a00      	cmp	r2, #0
    1c02:	d039      	beq.n	1c78 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0xc8>
	sendControl(desc_addr, desc_length);
    1c04:	0028      	movs	r0, r5
    1c06:	f7ff ff2d 	bl	1a64 <_ZN14USBDeviceClass11sendControlEPKvm>
	return true;
    1c0a:	2001      	movs	r0, #1
    1c0c:	e7e1      	b.n	1bd2 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x22>
	else if (USB_STRING_DESCRIPTOR_TYPE == t)
    1c0e:	2e03      	cmp	r6, #3
    1c10:	d1df      	bne.n	1bd2 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x22>
		if (setup.wValueL == 0) {
    1c12:	78a3      	ldrb	r3, [r4, #2]
    1c14:	2b00      	cmp	r3, #0
    1c16:	d028      	beq.n	1c6a <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0xba>
		else if (setup.wValueL == IPRODUCT) {
    1c18:	2b02      	cmp	r3, #2
    1c1a:	d108      	bne.n	1c2e <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x7e>
			return sendStringDescriptor(STRING_PRODUCT, setup.wLength);
    1c1c:	79e2      	ldrb	r2, [r4, #7]
    1c1e:	79a3      	ldrb	r3, [r4, #6]
    1c20:	0212      	lsls	r2, r2, #8
    1c22:	4918      	ldr	r1, [pc, #96]	; (1c84 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0xd4>)
    1c24:	431a      	orrs	r2, r3
			return sendStringDescriptor(STRING_MANUFACTURER, setup.wLength);
    1c26:	0028      	movs	r0, r5
    1c28:	f7ff ff46 	bl	1ab8 <_ZN14USBDeviceClass20sendStringDescriptorEPKhm>
    1c2c:	e7d1      	b.n	1bd2 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x22>
		else if (setup.wValueL == IMANUFACTURER) {
    1c2e:	2b01      	cmp	r3, #1
    1c30:	d105      	bne.n	1c3e <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x8e>
			return sendStringDescriptor(STRING_MANUFACTURER, setup.wLength);
    1c32:	79e2      	ldrb	r2, [r4, #7]
    1c34:	79a3      	ldrb	r3, [r4, #6]
    1c36:	0212      	lsls	r2, r2, #8
    1c38:	431a      	orrs	r2, r3
    1c3a:	4913      	ldr	r1, [pc, #76]	; (1c88 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0xd8>)
    1c3c:	e7f3      	b.n	1c26 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x76>
		else if (setup.wValueL == ISERIAL) {
    1c3e:	2b03      	cmp	r3, #3
    1c40:	d1c7      	bne.n	1bd2 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x22>
			memset(name, 0, sizeof(name));
    1c42:	0001      	movs	r1, r0
    1c44:	2241      	movs	r2, #65	; 0x41
    1c46:	a801      	add	r0, sp, #4
    1c48:	f000 fd23 	bl	2692 <memset>
			idx += PluggableUSB().getShortName(&name[idx]);
    1c4c:	f7ff f936 	bl	ebc <_Z12PluggableUSBv>
    1c50:	a901      	add	r1, sp, #4
    1c52:	f7ff f8d7 	bl	e04 <_ZN13PluggableUSB_12getShortNameEPc>
			if (idx > 0) {
    1c56:	2800      	cmp	r0, #0
    1c58:	d005      	beq.n	1c66 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0xb6>
				return sendStringDescriptor((uint8_t*)name, setup.wLength);
    1c5a:	79e2      	ldrb	r2, [r4, #7]
    1c5c:	79a3      	ldrb	r3, [r4, #6]
    1c5e:	0212      	lsls	r2, r2, #8
    1c60:	431a      	orrs	r2, r3
    1c62:	a901      	add	r1, sp, #4
    1c64:	e7df      	b.n	1c26 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x76>
		if (*desc_addr > setup.wLength) {
    1c66:	7803      	ldrb	r3, [r0, #0]
    1c68:	deff      	udf	#255	; 0xff
    1c6a:	79e2      	ldrb	r2, [r4, #7]
    1c6c:	79a3      	ldrb	r3, [r4, #6]
    1c6e:	0212      	lsls	r2, r2, #8
    1c70:	431a      	orrs	r2, r3
    1c72:	4906      	ldr	r1, [pc, #24]	; (1c8c <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0xdc>)
    1c74:	2a03      	cmp	r2, #3
    1c76:	ddc2      	ble.n	1bfe <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x4e>
		desc_length = *desc_addr;
    1c78:	780a      	ldrb	r2, [r1, #0]
    1c7a:	e7c3      	b.n	1c04 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x54>
    1c7c:	2000012c 	.word	0x2000012c
    1c80:	0000293a 	.word	0x0000293a
    1c84:	0000291c 	.word	0x0000291c
    1c88:	0000292e 	.word	0x0000292e
    1c8c:	0000292a 	.word	0x0000292a

00001c90 <_ZN14USBDeviceClass7sendZlpEm>:
    1c90:	b2cb      	uxtb	r3, r1
    1c92:	4904      	ldr	r1, [pc, #16]	; (1ca4 <_ZN14USBDeviceClass7sendZlpEm+0x14>)
    1c94:	015b      	lsls	r3, r3, #5
    1c96:	18c9      	adds	r1, r1, r3
    1c98:	698b      	ldr	r3, [r1, #24]
    1c9a:	0b9b      	lsrs	r3, r3, #14
    1c9c:	039b      	lsls	r3, r3, #14
    1c9e:	618b      	str	r3, [r1, #24]

void USBDeviceClass::sendZlp(uint32_t ep)
{
	// Set the byte count as zero
	usbd.epBank1SetByteCount(ep, 0);
}
    1ca0:	4770      	bx	lr
    1ca2:	46c0      	nop			; (mov r8, r8)
    1ca4:	200005e4 	.word	0x200005e4

00001ca8 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup>:

bool USBDeviceClass::handleStandardSetup(USBSetup &setup)
{
    1ca8:	b537      	push	{r0, r1, r2, r4, r5, lr}
    1caa:	0005      	movs	r5, r0
	switch (setup.bRequest) {
    1cac:	7848      	ldrb	r0, [r1, #1]
{
    1cae:	000c      	movs	r4, r1
	switch (setup.bRequest) {
    1cb0:	280b      	cmp	r0, #11
    1cb2:	d811      	bhi.n	1cd8 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x30>
    1cb4:	f000 fc16 	bl	24e4 <__gnu_thumb1_case_uqi>
    1cb8:	2e101d06 	.word	0x2e101d06
    1cbc:	64484310 	.word	0x64484310
    1cc0:	605d4f4c 	.word	0x605d4f4c
	case GET_STATUS:
		if (setup.bmRequestType == 0)  // device
    1cc4:	7809      	ldrb	r1, [r1, #0]
    1cc6:	aa01      	add	r2, sp, #4
    1cc8:	2900      	cmp	r1, #0
    1cca:	d107      	bne.n	1cdc <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x34>
		{
			// Send the device status
			// TODO: Check current configuration for power mode (if device is configured)
			// TODO: Check if remote wake-up is enabled
			uint8_t buff[] = { 0, 0 };
			armSend(0, buff, 2);
    1ccc:	2302      	movs	r3, #2
			uint8_t buff[] = { 0, 0 };
    1cce:	7011      	strb	r1, [r2, #0]
    1cd0:	7051      	strb	r1, [r2, #1]
			armSend(0, buff, 2);
    1cd2:	0028      	movs	r0, r5
    1cd4:	f7ff fea2 	bl	1a1c <_ZN14USBDeviceClass7armSendEmPKvm>
			return true;
    1cd8:	2001      	movs	r0, #1

	default:
		return true;
	}
	return true;
}
    1cda:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
			uint8_t buff[] = { 0, 0 };
    1cdc:	2300      	movs	r3, #0
    1cde:	7013      	strb	r3, [r2, #0]
    1ce0:	7053      	strb	r3, [r2, #1]
			if (isEndpointHalt == 1)
    1ce2:	4b28      	ldr	r3, [pc, #160]	; (1d84 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0xdc>)
			if (isRemoteWakeUpEnabled == 1)
    1ce4:	781b      	ldrb	r3, [r3, #0]
    1ce6:	2b01      	cmp	r3, #1
    1ce8:	d100      	bne.n	1cec <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x44>
				buff[0] = 1;
    1cea:	7013      	strb	r3, [r2, #0]
			armSend(0, buff, 2);
    1cec:	2302      	movs	r3, #2
		armSend(0, (void*)&_usbSetInterface, 1);
    1cee:	2100      	movs	r1, #0
    1cf0:	e7ef      	b.n	1cd2 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x2a>
		if (setup.wValueL == 1) // DEVICEREMOTEWAKEUP
    1cf2:	788a      	ldrb	r2, [r1, #2]
    1cf4:	2300      	movs	r3, #0
    1cf6:	2a01      	cmp	r2, #1
    1cf8:	d104      	bne.n	1d04 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x5c>
			uint8_t buff[] = { 0, 0 };
    1cfa:	aa01      	add	r2, sp, #4
    1cfc:	7013      	strb	r3, [r2, #0]
    1cfe:	7053      	strb	r3, [r2, #1]
			if (isRemoteWakeUpEnabled == 1)
    1d00:	4b21      	ldr	r3, [pc, #132]	; (1d88 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0xe0>)
    1d02:	e7ef      	b.n	1ce4 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x3c>
			isEndpointHalt = 0;
    1d04:	4a1f      	ldr	r2, [pc, #124]	; (1d84 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0xdc>)
    1d06:	7013      	strb	r3, [r2, #0]
    1d08:	4a20      	ldr	r2, [pc, #128]	; (1d8c <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0xe4>)
    1d0a:	6993      	ldr	r3, [r2, #24]
    1d0c:	0b9b      	lsrs	r3, r3, #14
    1d0e:	039b      	lsls	r3, r3, #14
    1d10:	6193      	str	r3, [r2, #24]
    1d12:	e7e1      	b.n	1cd8 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x30>
		if (setup.wValueL == 1) // DEVICEREMOTEWAKEUP
    1d14:	788c      	ldrb	r4, [r1, #2]
    1d16:	2c01      	cmp	r4, #1
    1d18:	d106      	bne.n	1d28 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x80>
			uint8_t buff[] = { 0 };
    1d1a:	2100      	movs	r1, #0
			isRemoteWakeUpEnabled = 1;
    1d1c:	4b1a      	ldr	r3, [pc, #104]	; (1d88 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0xe0>)
			uint8_t buff[] = { 0 };
    1d1e:	aa01      	add	r2, sp, #4
			isRemoteWakeUpEnabled = 1;
    1d20:	701c      	strb	r4, [r3, #0]
			uint8_t buff[] = { 0 };
    1d22:	7011      	strb	r1, [r2, #0]
			armSend(0, buff, 1);
    1d24:	0023      	movs	r3, r4
    1d26:	e7d4      	b.n	1cd2 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x2a>
    1d28:	2001      	movs	r0, #1
		if (setup.wValueL == 0) // ENDPOINTHALT
    1d2a:	2c00      	cmp	r4, #0
    1d2c:	d1d5      	bne.n	1cda <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x32>
			isEndpointHalt = 1;
    1d2e:	4b15      	ldr	r3, [pc, #84]	; (1d84 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0xdc>)
    1d30:	4a16      	ldr	r2, [pc, #88]	; (1d8c <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0xe4>)
    1d32:	7018      	strb	r0, [r3, #0]
    1d34:	6993      	ldr	r3, [r2, #24]
    1d36:	0b9b      	lsrs	r3, r3, #14
    1d38:	039b      	lsls	r3, r3, #14
    1d3a:	6193      	str	r3, [r2, #24]
			return true;
    1d3c:	e7cd      	b.n	1cda <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x32>
		setAddress(setup.wValueL);
    1d3e:	7889      	ldrb	r1, [r1, #2]
    1d40:	0028      	movs	r0, r5
    1d42:	f7ff fc09 	bl	1558 <_ZN14USBDeviceClass10setAddressEm>
    1d46:	e7c7      	b.n	1cd8 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x30>
		return sendDescriptor(setup);
    1d48:	0028      	movs	r0, r5
    1d4a:	f7ff ff31 	bl	1bb0 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup>
    1d4e:	e7c4      	b.n	1cda <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x32>
		armSend(0, (void*)&_usbConfiguration, 1);
    1d50:	2301      	movs	r3, #1
    1d52:	4a0f      	ldr	r2, [pc, #60]	; (1d90 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0xe8>)
    1d54:	e7cb      	b.n	1cee <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x46>
		if (REQUEST_DEVICE == (setup.bmRequestType & REQUEST_RECIPIENT)) {
    1d56:	780b      	ldrb	r3, [r1, #0]
			return false;
    1d58:	2000      	movs	r0, #0
		if (REQUEST_DEVICE == (setup.bmRequestType & REQUEST_RECIPIENT)) {
    1d5a:	06db      	lsls	r3, r3, #27
    1d5c:	d1bd      	bne.n	1cda <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x32>
			initEndpoints();
    1d5e:	0028      	movs	r0, r5
    1d60:	f7ff fcb2 	bl	16c8 <_ZN14USBDeviceClass13initEndpointsEv>
			_usbConfiguration = setup.wValueL;
    1d64:	78a2      	ldrb	r2, [r4, #2]
    1d66:	4b0a      	ldr	r3, [pc, #40]	; (1d90 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0xe8>)
			SerialUSB.enableInterrupt();
    1d68:	480a      	ldr	r0, [pc, #40]	; (1d94 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0xec>)
			_usbConfiguration = setup.wValueL;
    1d6a:	601a      	str	r2, [r3, #0]
			SerialUSB.enableInterrupt();
    1d6c:	f7ff f802 	bl	d74 <_ZN7Serial_15enableInterruptEv>
    1d70:	e7ca      	b.n	1d08 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x60>
		armSend(0, (void*)&_usbSetInterface, 1);
    1d72:	2301      	movs	r3, #1
    1d74:	4a08      	ldr	r2, [pc, #32]	; (1d98 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0xf0>)
    1d76:	e7ba      	b.n	1cee <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x46>
		_usbSetInterface = setup.wValueL;
    1d78:	788a      	ldrb	r2, [r1, #2]
    1d7a:	4b07      	ldr	r3, [pc, #28]	; (1d98 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0xf0>)
    1d7c:	601a      	str	r2, [r3, #0]
    1d7e:	e7c3      	b.n	1d08 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x60>
		return false;
    1d80:	2000      	movs	r0, #0
    1d82:	e7aa      	b.n	1cda <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x32>
    1d84:	2000014e 	.word	0x2000014e
    1d88:	20000156 	.word	0x20000156
    1d8c:	200005e4 	.word	0x200005e4
    1d90:	200005dc 	.word	0x200005dc
    1d94:	200000c4 	.word	0x200000c4
    1d98:	200005e0 	.word	0x200005e0

00001d9c <_ZN14USBDeviceClass10ISRHandlerEv>:

void USBDeviceClass::ISRHandler()
{
	if (_pack_message == true) {
    1d9c:	4b4b      	ldr	r3, [pc, #300]	; (1ecc <_ZN14USBDeviceClass10ISRHandlerEv+0x130>)
{
    1d9e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (_pack_message == true) {
    1da0:	781e      	ldrb	r6, [r3, #0]
{
    1da2:	0005      	movs	r5, r0
	if (_pack_message == true) {
    1da4:	2e00      	cmp	r6, #0
    1da6:	d000      	beq.n	1daa <_ZN14USBDeviceClass10ISRHandlerEv+0xe>
    1da8:	e080      	b.n	1eac <_ZN14USBDeviceClass10ISRHandlerEv+0x110>
	inline bool isEndOfResetInterrupt()        { return usb.INTFLAG.bit.EORST; }
    1daa:	4c49      	ldr	r4, [pc, #292]	; (1ed0 <_ZN14USBDeviceClass10ISRHandlerEv+0x134>)
    1dac:	6823      	ldr	r3, [r4, #0]
    1dae:	8b9a      	ldrh	r2, [r3, #28]
		return;
	}

	// End-Of-Reset
	if (usbd.isEndOfResetInterrupt())
    1db0:	0712      	lsls	r2, r2, #28
    1db2:	d50d      	bpl.n	1dd0 <_ZN14USBDeviceClass10ISRHandlerEv+0x34>
	inline void ackEndOfResetInterrupt()       { usb.INTFLAG.reg = USB_DEVICE_INTFLAG_EORST; }
    1db4:	2208      	movs	r2, #8
    1db6:	0031      	movs	r1, r6
    1db8:	839a      	strh	r2, [r3, #28]
    1dba:	0030      	movs	r0, r6
    1dbc:	f7ff f896 	bl	eec <_ZN14USBDeviceClass6initEPEmm.part.7>
	inline void epBank0EnableSetupReceived(ep_t ep)    { usb.DeviceEndpoint[ep].EPINTENSET.bit.RXSTP = 1; }
    1dc0:	2210      	movs	r2, #16
    1dc2:	6823      	ldr	r3, [r4, #0]
    1dc4:	33ff      	adds	r3, #255	; 0xff
    1dc6:	7a99      	ldrb	r1, [r3, #10]
    1dc8:	430a      	orrs	r2, r1
    1dca:	729a      	strb	r2, [r3, #10]
		initEP(0, USB_ENDPOINT_TYPE_CONTROL);

		// Enable Setup-Received interrupt
		usbd.epBank0EnableSetupReceived(0);

		_usbConfiguration = 0;
    1dcc:	4b41      	ldr	r3, [pc, #260]	; (1ed4 <_ZN14USBDeviceClass10ISRHandlerEv+0x138>)
    1dce:	601e      	str	r6, [r3, #0]
	inline bool isStartOfFrameInterrupt()      { return usb.INTFLAG.bit.SOF; }
    1dd0:	6823      	ldr	r3, [r4, #0]
    1dd2:	8b9a      	ldrh	r2, [r3, #28]
	}

	// Start-Of-Frame
	if (usbd.isStartOfFrameInterrupt())
    1dd4:	0752      	lsls	r2, r2, #29
    1dd6:	d51f      	bpl.n	1e18 <_ZN14USBDeviceClass10ISRHandlerEv+0x7c>
	inline void ackStartOfFrameInterrupt()     { usb.INTFLAG.reg = USB_DEVICE_INTFLAG_SOF; }
    1dd8:	2204      	movs	r2, #4
    1dda:	839a      	strh	r2, [r3, #28]
	{
		usbd.ackStartOfFrameInterrupt();

		// check whether the one-shot period has elapsed.  if so, turn off the LED
#ifdef PIN_LED_TXL
		if (txLEDPulse > 0) {
    1ddc:	4a3e      	ldr	r2, [pc, #248]	; (1ed8 <_ZN14USBDeviceClass10ISRHandlerEv+0x13c>)
    1dde:	7813      	ldrb	r3, [r2, #0]
    1de0:	2b00      	cmp	r3, #0
    1de2:	d00a      	beq.n	1dfa <_ZN14USBDeviceClass10ISRHandlerEv+0x5e>
			txLEDPulse--;
    1de4:	7813      	ldrb	r3, [r2, #0]
    1de6:	3b01      	subs	r3, #1
    1de8:	b2db      	uxtb	r3, r3
    1dea:	7013      	strb	r3, [r2, #0]
			if (txLEDPulse == 0)
    1dec:	7813      	ldrb	r3, [r2, #0]
    1dee:	2b00      	cmp	r3, #0
    1df0:	d103      	bne.n	1dfa <_ZN14USBDeviceClass10ISRHandlerEv+0x5e>
				digitalWrite(PIN_LED_TXL, HIGH);
    1df2:	2101      	movs	r1, #1
    1df4:	201a      	movs	r0, #26
    1df6:	f000 f97f 	bl	20f8 <digitalWrite>
		}
#endif

#ifdef PIN_LED_RXL
		if (rxLEDPulse > 0) {
    1dfa:	4a38      	ldr	r2, [pc, #224]	; (1edc <_ZN14USBDeviceClass10ISRHandlerEv+0x140>)
    1dfc:	7813      	ldrb	r3, [r2, #0]
    1dfe:	2b00      	cmp	r3, #0
    1e00:	d00a      	beq.n	1e18 <_ZN14USBDeviceClass10ISRHandlerEv+0x7c>
			rxLEDPulse--;
    1e02:	7813      	ldrb	r3, [r2, #0]
    1e04:	3b01      	subs	r3, #1
    1e06:	b2db      	uxtb	r3, r3
    1e08:	7013      	strb	r3, [r2, #0]
			if (rxLEDPulse == 0)
    1e0a:	7813      	ldrb	r3, [r2, #0]
    1e0c:	2b00      	cmp	r3, #0
    1e0e:	d103      	bne.n	1e18 <_ZN14USBDeviceClass10ISRHandlerEv+0x7c>
				digitalWrite(PIN_LED_RXL, HIGH);
    1e10:	2101      	movs	r1, #1
    1e12:	2019      	movs	r0, #25
    1e14:	f000 f970 	bl	20f8 <digitalWrite>
	inline bool epBank0IsStalled(ep_t ep)           { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.STALL0; }
    1e18:	6823      	ldr	r3, [r4, #0]
    1e1a:	33ff      	adds	r3, #255	; 0xff
    1e1c:	7a1a      	ldrb	r2, [r3, #8]
		}
#endif
	}

	/* Remove any stall requests for endpoint #0 */
	if (usbd.epBank0IsStalled(0)) { usbd.epBank0DisableStalled(0); }
    1e1e:	0692      	lsls	r2, r2, #26
    1e20:	d503      	bpl.n	1e2a <_ZN14USBDeviceClass10ISRHandlerEv+0x8e>
	inline void epBank0DisableStalled(ep_t ep)          { usb.DeviceEndpoint[ep].EPINTENCLR.bit.STALL0 = 1; }
    1e22:	2220      	movs	r2, #32
    1e24:	7a59      	ldrb	r1, [r3, #9]
    1e26:	430a      	orrs	r2, r1
    1e28:	725a      	strb	r2, [r3, #9]
	inline bool epBank0IsSetupReceived(ep_t ep)     { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.RXSTP; }
    1e2a:	7a1a      	ldrb	r2, [r3, #8]

	// Endpoint 0 Received Setup interrupt
	if (usbd.epBank0IsSetupReceived(0))
    1e2c:	06d2      	lsls	r2, r2, #27
    1e2e:	d525      	bpl.n	1e7c <_ZN14USBDeviceClass10ISRHandlerEv+0xe0>
	{
		/* Retrieve received endpoint #0 data from buffer */
		USBSetup setup;
		memcpy(&setup, udd_ep_out_cache_buffer[0], sizeof(USBSetup));
    1e30:	4668      	mov	r0, sp
    1e32:	4a2b      	ldr	r2, [pc, #172]	; (1ee0 <_ZN14USBDeviceClass10ISRHandlerEv+0x144>)
    1e34:	4669      	mov	r1, sp
    1e36:	cac0      	ldmia	r2!, {r6, r7}
    1e38:	c0c0      	stmia	r0!, {r6, r7}
	inline void epBank0SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = bc; }
    1e3a:	68a2      	ldr	r2, [r4, #8]
    1e3c:	0b92      	lsrs	r2, r2, #14
    1e3e:	0392      	lsls	r2, r2, #14
    1e40:	60a2      	str	r2, [r4, #8]
	inline void epBank0ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK0RDY = 1; }
    1e42:	2240      	movs	r2, #64	; 0x40
    1e44:	7958      	ldrb	r0, [r3, #5]
    1e46:	4302      	orrs	r2, r0
    1e48:	715a      	strb	r2, [r3, #5]
		 */
		usbd.epBank0SetByteCount(0, 0);
		usbd.epBank0ResetReady(0);

		bool ok;
		if (REQUEST_STANDARD == (setup.bmRequestType & REQUEST_TYPE)) {
    1e4a:	2360      	movs	r3, #96	; 0x60
    1e4c:	780a      	ldrb	r2, [r1, #0]
			// Standard Requests
			ok = handleStandardSetup(setup);
    1e4e:	0028      	movs	r0, r5
		if (REQUEST_STANDARD == (setup.bmRequestType & REQUEST_TYPE)) {
    1e50:	421a      	tst	r2, r3
    1e52:	d12c      	bne.n	1eae <_ZN14USBDeviceClass10ISRHandlerEv+0x112>
			ok = handleStandardSetup(setup);
    1e54:	f7ff ff28 	bl	1ca8 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup>
		} else {
			// Class Interface Requests
			ok = handleClassInterfaceSetup(setup);
		}

		if (ok) {
    1e58:	2800      	cmp	r0, #0
    1e5a:	d02b      	beq.n	1eb4 <_ZN14USBDeviceClass10ISRHandlerEv+0x118>
	inline void epBank1SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK1RDY = 1; }
    1e5c:	2280      	movs	r2, #128	; 0x80
    1e5e:	6823      	ldr	r3, [r4, #0]
    1e60:	4252      	negs	r2, r2
    1e62:	33ff      	adds	r3, #255	; 0xff
    1e64:	7999      	ldrb	r1, [r3, #6]
    1e66:	430a      	orrs	r2, r1
	USB->DEVICE.DeviceEndpoint[ep].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_STALLRQ(2);
    1e68:	719a      	strb	r2, [r3, #6]
	inline bool epBank1IsStalled(ep_t ep)           { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.STALL1; }
    1e6a:	6823      	ldr	r3, [r4, #0]
    1e6c:	33ff      	adds	r3, #255	; 0xff
    1e6e:	7a1a      	ldrb	r2, [r3, #8]
			usbd.epBank1SetReady(0);
		} else {
			stall(0);
		}

		if (usbd.epBank1IsStalled(0))
    1e70:	0652      	lsls	r2, r2, #25
    1e72:	d503      	bpl.n	1e7c <_ZN14USBDeviceClass10ISRHandlerEv+0xe0>
	inline void epBank1DisableStalled(ep_t ep)          { usb.DeviceEndpoint[ep].EPINTENCLR.bit.STALL1 = 1; }
    1e74:	2240      	movs	r2, #64	; 0x40
    1e76:	7a59      	ldrb	r1, [r3, #9]
    1e78:	430a      	orrs	r2, r1
    1e7a:	725a      	strb	r2, [r3, #9]
	inline void epAckPendingInterrupts(ep_t ep)     { usb.DeviceEndpoint[ep].EPINTFLAG.reg = 0x7F; }
    1e7c:	267f      	movs	r6, #127	; 0x7f
			usbd.epBank1DisableStalled(0);
		}
	} // end Received Setup handler
	usbd.epAckPendingInterrupts(0);

	for (int ep = 1; ep < USB_EPT_NUM; ep++) {
    1e7e:	2501      	movs	r5, #1
    1e80:	6823      	ldr	r3, [r4, #0]
    1e82:	33ff      	adds	r3, #255	; 0xff
    1e84:	721e      	strb	r6, [r3, #8]
	inline bool epHasPendingInterrupts(ep_t ep)     { return usb.DeviceEndpoint[ep].EPINTFLAG.reg != 0; }
    1e86:	002f      	movs	r7, r5
    1e88:	6823      	ldr	r3, [r4, #0]
    1e8a:	3708      	adds	r7, #8
    1e8c:	017f      	lsls	r7, r7, #5
    1e8e:	19db      	adds	r3, r3, r7
    1e90:	79db      	ldrb	r3, [r3, #7]
		// Endpoint Transfer Complete (0/1) Interrupt
		if (usbd.epHasPendingInterrupts(ep)) {
    1e92:	2b00      	cmp	r3, #0
    1e94:	d007      	beq.n	1ea6 <_ZN14USBDeviceClass10ISRHandlerEv+0x10a>
			if (epHandlers[ep]) {
    1e96:	4b13      	ldr	r3, [pc, #76]	; (1ee4 <_ZN14USBDeviceClass10ISRHandlerEv+0x148>)
    1e98:	00aa      	lsls	r2, r5, #2
    1e9a:	58d0      	ldr	r0, [r2, r3]
    1e9c:	2800      	cmp	r0, #0
    1e9e:	d00c      	beq.n	1eba <_ZN14USBDeviceClass10ISRHandlerEv+0x11e>
				epHandlers[ep]->handleEndpoint();
    1ea0:	6803      	ldr	r3, [r0, #0]
    1ea2:	681b      	ldr	r3, [r3, #0]
    1ea4:	4798      	blx	r3
	for (int ep = 1; ep < USB_EPT_NUM; ep++) {
    1ea6:	3501      	adds	r5, #1
    1ea8:	2d08      	cmp	r5, #8
    1eaa:	d1ec      	bne.n	1e86 <_ZN14USBDeviceClass10ISRHandlerEv+0xea>
				usbd.epAckPendingInterrupts(ep);
				#endif
			}
		}
	}
}
    1eac:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
			ok = handleClassInterfaceSetup(setup);
    1eae:	f7ff fb77 	bl	15a0 <_ZN14USBDeviceClass25handleClassInterfaceSetupER8USBSetup>
    1eb2:	e7d1      	b.n	1e58 <_ZN14USBDeviceClass10ISRHandlerEv+0xbc>
	USB->DEVICE.DeviceEndpoint[ep].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_STALLRQ(2);
    1eb4:	2220      	movs	r2, #32
    1eb6:	4b0c      	ldr	r3, [pc, #48]	; (1ee8 <_ZN14USBDeviceClass10ISRHandlerEv+0x14c>)
    1eb8:	e7d6      	b.n	1e68 <_ZN14USBDeviceClass10ISRHandlerEv+0xcc>
				PluggableUSB().handleEndpoint(ep);
    1eba:	f7fe ffff 	bl	ebc <_Z12PluggableUSBv>
    1ebe:	0029      	movs	r1, r5
    1ec0:	f7fe ffc3 	bl	e4a <_ZN13PluggableUSB_14handleEndpointEi>
	inline void epAckPendingInterrupts(ep_t ep)     { usb.DeviceEndpoint[ep].EPINTFLAG.reg = 0x7F; }
    1ec4:	6823      	ldr	r3, [r4, #0]
    1ec6:	19df      	adds	r7, r3, r7
    1ec8:	71fe      	strb	r6, [r7, #7]
    1eca:	e7ec      	b.n	1ea6 <_ZN14USBDeviceClass10ISRHandlerEv+0x10a>
    1ecc:	200005d9 	.word	0x200005d9
    1ed0:	200005e4 	.word	0x200005e4
    1ed4:	200005dc 	.word	0x200005dc
    1ed8:	2000014d 	.word	0x2000014d
    1edc:	2000014c 	.word	0x2000014c
    1ee0:	20000318 	.word	0x20000318
    1ee4:	20000130 	.word	0x20000130
    1ee8:	410050ff 	.word	0x410050ff

00001eec <UDD_Handler>:
extern "C" void UDD_Handler(void) {
    1eec:	b510      	push	{r4, lr}
	USBDevice.ISRHandler();
    1eee:	4802      	ldr	r0, [pc, #8]	; (1ef8 <UDD_Handler+0xc>)
    1ef0:	f7ff ff54 	bl	1d9c <_ZN14USBDeviceClass10ISRHandlerEv>
}
    1ef4:	bd10      	pop	{r4, pc}
    1ef6:	46c0      	nop			; (mov r8, r8)
    1ef8:	2000012c 	.word	0x2000012c

00001efc <_GLOBAL__sub_I_usbd>:
	USBDevice_SAMD21G18x() : usb(USB->DEVICE) {
    1efc:	4a01      	ldr	r2, [pc, #4]	; (1f04 <_GLOBAL__sub_I_usbd+0x8>)
    1efe:	4b02      	ldr	r3, [pc, #8]	; (1f08 <_GLOBAL__sub_I_usbd+0xc>)
    1f00:	601a      	str	r2, [r3, #0]
 * USB Device instance
 * -------------------
 */

// USBDevice class instance
USBDeviceClass USBDevice;
    1f02:	4770      	bx	lr
    1f04:	41005000 	.word	0x41005000
    1f08:	200005e4 	.word	0x200005e4

00001f0c <init>:
 *   - During reset, all PORT lines are configured as inputs with input buffers, output buffers and pull disabled.
 */
void init( void )
{
  // Set Systick to 1ms interval, common to all Cortex-M variants
  if ( SysTick_Config( SystemCoreClock / 1000 ) )
    1f0c:	21fa      	movs	r1, #250	; 0xfa
    1f0e:	4b31      	ldr	r3, [pc, #196]	; (1fd4 <init+0xc8>)
{
    1f10:	b510      	push	{r4, lr}
  if ( SysTick_Config( SystemCoreClock / 1000 ) )
    1f12:	6818      	ldr	r0, [r3, #0]
    1f14:	0089      	lsls	r1, r1, #2
    1f16:	f000 faef 	bl	24f8 <__udivsi3>
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
    1f1a:	4b2f      	ldr	r3, [pc, #188]	; (1fd8 <init+0xcc>)
    1f1c:	3801      	subs	r0, #1
    1f1e:	4298      	cmp	r0, r3
    1f20:	d856      	bhi.n	1fd0 <init+0xc4>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
    1f22:	492e      	ldr	r1, [pc, #184]	; (1fdc <init+0xd0>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    1f24:	4a2e      	ldr	r2, [pc, #184]	; (1fe0 <init+0xd4>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
    1f26:	6048      	str	r0, [r1, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    1f28:	20c0      	movs	r0, #192	; 0xc0
    1f2a:	6a13      	ldr	r3, [r2, #32]
    1f2c:	0600      	lsls	r0, r0, #24
    1f2e:	021b      	lsls	r3, r3, #8
    1f30:	0a1b      	lsrs	r3, r3, #8
    1f32:	4303      	orrs	r3, r0
    1f34:	6213      	str	r3, [r2, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
    1f36:	2400      	movs	r4, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
    1f38:	2307      	movs	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
    1f3a:	608c      	str	r4, [r1, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
    1f3c:	600b      	str	r3, [r1, #0]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    1f3e:	2180      	movs	r1, #128	; 0x80
    1f40:	6a13      	ldr	r3, [r2, #32]
    1f42:	0609      	lsls	r1, r1, #24
    1f44:	021b      	lsls	r3, r3, #8
    1f46:	0a1b      	lsrs	r3, r3, #8
    1f48:	430b      	orrs	r3, r1
    1f4a:	6213      	str	r3, [r2, #32]
//
//  // Clock EIC for I/O interrupts
//  PM->APBAMASK.reg |= PM_APBAMASK_EIC ;

  // Clock SERCOM for Serial
  PM->APBCMASK.reg |= PM_APBCMASK_SERCOM0 | PM_APBCMASK_SERCOM1 | PM_APBCMASK_SERCOM2 | PM_APBCMASK_SERCOM3 | PM_APBCMASK_SERCOM4 | PM_APBCMASK_SERCOM5 ;
    1f4c:	22fc      	movs	r2, #252	; 0xfc
    1f4e:	4b25      	ldr	r3, [pc, #148]	; (1fe4 <init+0xd8>)
    1f50:	6a19      	ldr	r1, [r3, #32]
    1f52:	430a      	orrs	r2, r1
    1f54:	621a      	str	r2, [r3, #32]

  // Clock TC/TCC for Pulse and Analog
  PM->APBCMASK.reg |= PM_APBCMASK_TCC0 | PM_APBCMASK_TCC1 | PM_APBCMASK_TCC2 | PM_APBCMASK_TC3 | PM_APBCMASK_TC4 | PM_APBCMASK_TC5 ;
    1f56:	22fc      	movs	r2, #252	; 0xfc
    1f58:	6a19      	ldr	r1, [r3, #32]
    1f5a:	0192      	lsls	r2, r2, #6
    1f5c:	430a      	orrs	r2, r1
    1f5e:	621a      	str	r2, [r3, #32]

  // Clock ADC/DAC for Analog
  PM->APBCMASK.reg |= PM_APBCMASK_ADC | PM_APBCMASK_DAC ;
    1f60:	22a0      	movs	r2, #160	; 0xa0
    1f62:	6a19      	ldr	r1, [r3, #32]
    1f64:	02d2      	lsls	r2, r2, #11
    1f66:	430a      	orrs	r2, r1
    1f68:	621a      	str	r2, [r3, #32]
// However, it really lowers the power consumption by a factor of 20 in low power mode (0.03mA vs 0.6mA)
#ifndef VERY_LOW_POWER
  // Setup all pins (digital and analog) in INPUT mode (default is nothing)
  for (uint32_t ul = 0 ; ul < NUM_DIGITAL_PINS ; ul++ )
  {
    pinMode( ul, INPUT ) ;
    1f6a:	0020      	movs	r0, r4
    1f6c:	2100      	movs	r1, #0
  for (uint32_t ul = 0 ; ul < NUM_DIGITAL_PINS ; ul++ )
    1f6e:	3401      	adds	r4, #1
    pinMode( ul, INPUT ) ;
    1f70:	f000 f876 	bl	2060 <pinMode>
  for (uint32_t ul = 0 ; ul < NUM_DIGITAL_PINS ; ul++ )
    1f74:	2c14      	cmp	r4, #20
    1f76:	d1f8      	bne.n	1f6a <init+0x5e>
  }
#endif

  // Initialize Analog Controller
  // Setting clock
  while(GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY);
    1f78:	4b1b      	ldr	r3, [pc, #108]	; (1fe8 <init+0xdc>)
    1f7a:	001c      	movs	r4, r3
    1f7c:	785a      	ldrb	r2, [r3, #1]
    1f7e:	b252      	sxtb	r2, r2
    1f80:	2a00      	cmp	r2, #0
    1f82:	dbfb      	blt.n	1f7c <init+0x70>

  GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID( GCM_ADC ) | // Generic Clock ADC
    1f84:	4a19      	ldr	r2, [pc, #100]	; (1fec <init+0xe0>)
    1f86:	805a      	strh	r2, [r3, #2]
                      GCLK_CLKCTRL_GEN_GCLK0     | // Generic Clock Generator 0 is source
                      GCLK_CLKCTRL_CLKEN ;

  while( ADC->STATUS.bit.SYNCBUSY == 1 );          // Wait for synchronization of registers between the clock domains
    1f88:	4b19      	ldr	r3, [pc, #100]	; (1ff0 <init+0xe4>)
    1f8a:	001a      	movs	r2, r3
    1f8c:	7e59      	ldrb	r1, [r3, #25]
    1f8e:	09c9      	lsrs	r1, r1, #7
    1f90:	2901      	cmp	r1, #1
    1f92:	d0fb      	beq.n	1f8c <init+0x80>

  ADC->CTRLB.reg = ADC_CTRLB_PRESCALER_DIV512 |    // Divide Clock by 512.
    1f94:	21e4      	movs	r1, #228	; 0xe4
    1f96:	00c9      	lsls	r1, r1, #3
    1f98:	8099      	strh	r1, [r3, #4]
                   ADC_CTRLB_RESSEL_10BIT;         // 10 bits resolution as default

  ADC->SAMPCTRL.reg = 0x3f;                        // Set max Sampling Time Length
    1f9a:	213f      	movs	r1, #63	; 0x3f
    1f9c:	70d9      	strb	r1, [r3, #3]

  while( ADC->STATUS.bit.SYNCBUSY == 1 );          // Wait for synchronization of registers between the clock domains
    1f9e:	7e53      	ldrb	r3, [r2, #25]
    1fa0:	09db      	lsrs	r3, r3, #7
    1fa2:	2b01      	cmp	r3, #1
    1fa4:	d0fb      	beq.n	1f9e <init+0x92>

  ADC->INPUTCTRL.reg = ADC_INPUTCTRL_MUXNEG_GND;   // No Negative input (Internal Ground)
    1fa6:	23c0      	movs	r3, #192	; 0xc0

  // Averaging (see datasheet table in AVGCTRL register description)
  ADC->AVGCTRL.reg = ADC_AVGCTRL_SAMPLENUM_1 |    // 1 sample only (no oversampling nor averaging)
    1fa8:	2000      	movs	r0, #0
  ADC->INPUTCTRL.reg = ADC_INPUTCTRL_MUXNEG_GND;   // No Negative input (Internal Ground)
    1faa:	015b      	lsls	r3, r3, #5
    1fac:	6113      	str	r3, [r2, #16]
  ADC->AVGCTRL.reg = ADC_AVGCTRL_SAMPLENUM_1 |    // 1 sample only (no oversampling nor averaging)
    1fae:	7090      	strb	r0, [r2, #2]
                     ADC_AVGCTRL_ADJRES(0x0ul);   // Adjusting result by 0

  analogReference( AR_DEFAULT ) ; // Analog Reference is AREF pin (3.3v)
    1fb0:	f000 f824 	bl	1ffc <analogReference>

  // Initialize DAC
  // Setting clock
  while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY );
    1fb4:	7863      	ldrb	r3, [r4, #1]
    1fb6:	b25b      	sxtb	r3, r3
    1fb8:	2b00      	cmp	r3, #0
    1fba:	dbfb      	blt.n	1fb4 <init+0xa8>
  GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID( GCM_DAC ) | // Generic Clock ADC
    1fbc:	4b0d      	ldr	r3, [pc, #52]	; (1ff4 <init+0xe8>)
                      GCLK_CLKCTRL_GEN_GCLK0     | // Generic Clock Generator 0 is source
                      GCLK_CLKCTRL_CLKEN ;

  while ( DAC->STATUS.bit.SYNCBUSY == 1 ); // Wait for synchronization of registers between the clock domains
    1fbe:	4a0e      	ldr	r2, [pc, #56]	; (1ff8 <init+0xec>)
  GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID( GCM_DAC ) | // Generic Clock ADC
    1fc0:	8063      	strh	r3, [r4, #2]
  while ( DAC->STATUS.bit.SYNCBUSY == 1 ); // Wait for synchronization of registers between the clock domains
    1fc2:	79d3      	ldrb	r3, [r2, #7]
    1fc4:	09db      	lsrs	r3, r3, #7
    1fc6:	2b01      	cmp	r3, #1
    1fc8:	d0fb      	beq.n	1fc2 <init+0xb6>
  DAC->CTRLB.reg = DAC_CTRLB_REFSEL_AVCC | // Using the 3.3V reference
    1fca:	2341      	movs	r3, #65	; 0x41
    1fcc:	7053      	strb	r3, [r2, #1]
                   DAC_CTRLB_EOEN ;        // External Output Enable (Vout)
}
    1fce:	bd10      	pop	{r4, pc}
    1fd0:	e7fe      	b.n	1fd0 <init+0xc4>
    1fd2:	46c0      	nop			; (mov r8, r8)
    1fd4:	20000014 	.word	0x20000014
    1fd8:	00ffffff 	.word	0x00ffffff
    1fdc:	e000e010 	.word	0xe000e010
    1fe0:	e000ed00 	.word	0xe000ed00
    1fe4:	40000400 	.word	0x40000400
    1fe8:	40000c00 	.word	0x40000c00
    1fec:	0000401e 	.word	0x0000401e
    1ff0:	42004000 	.word	0x42004000
    1ff4:	00004021 	.word	0x00004021
    1ff8:	42004800 	.word	0x42004800

00001ffc <analogReference>:
static int _writeResolution = 8;

// Wait for synchronization of registers between the clock domains
static __inline__ void syncADC() __attribute__((always_inline, unused));
static void syncADC() {
  while (ADC->STATUS.bit.SYNCBUSY == 1)
    1ffc:	4a16      	ldr	r2, [pc, #88]	; (2058 <analogReference+0x5c>)
 * External Reference should be between 1v and VDDANA-0.6v=2.7v
 *
 * Warning : On Arduino Zero board the input/output voltage for SAMD21G18 is 3.3 volts maximum
 */
void analogReference(eAnalogReference mode)
{
    1ffe:	b500      	push	{lr}
    2000:	0013      	movs	r3, r2
  while (ADC->STATUS.bit.SYNCBUSY == 1)
    2002:	7e51      	ldrb	r1, [r2, #25]
    2004:	09c9      	lsrs	r1, r1, #7
    2006:	2901      	cmp	r1, #1
    2008:	d0fb      	beq.n	2002 <analogReference+0x6>
  syncADC();
  switch (mode)
    200a:	3801      	subs	r0, #1
    200c:	2804      	cmp	r0, #4
    200e:	d816      	bhi.n	203e <analogReference+0x42>
      ADC->INPUTCTRL.bit.GAIN = ADC_INPUTCTRL_GAIN_1X_Val;      // Gain Factor Selection
      ADC->REFCTRL.bit.REFSEL = ADC_REFCTRL_REFSEL_INT1V_Val;   // 1.0V voltage reference
      break;

    case AR_INTERNAL1V65:
      ADC->INPUTCTRL.bit.GAIN = ADC_INPUTCTRL_GAIN_1X_Val;      // Gain Factor Selection
    2010:	6919      	ldr	r1, [r3, #16]
    2012:	4a12      	ldr	r2, [pc, #72]	; (205c <analogReference+0x60>)
    2014:	400a      	ands	r2, r1
      ADC->REFCTRL.bit.REFSEL = ADC_REFCTRL_REFSEL_INTVCC1_Val; // 1/2 VDDANA = 0.5* 3V3 = 1.65V
    2016:	210f      	movs	r1, #15
      ADC->INPUTCTRL.bit.GAIN = ADC_INPUTCTRL_GAIN_1X_Val;      // Gain Factor Selection
    2018:	611a      	str	r2, [r3, #16]
      ADC->REFCTRL.bit.REFSEL = ADC_REFCTRL_REFSEL_INTVCC1_Val; // 1/2 VDDANA = 0.5* 3V3 = 1.65V
    201a:	785a      	ldrb	r2, [r3, #1]
    201c:	438a      	bics	r2, r1
  switch (mode)
    201e:	f000 fa61 	bl	24e4 <__gnu_thumb1_case_uqi>
    2022:	0803      	.short	0x0803
    2024:	0b06      	.short	0x0b06
    2026:	03          	.byte	0x03
    2027:	00          	.byte	0x00
      ADC->REFCTRL.bit.REFSEL = ADC_REFCTRL_REFSEL_INTVCC0_Val; // 1/1.48 VDDANA = 1/1.48* 3V3 = 2.2297
    2028:	0011      	movs	r1, r2
    202a:	2201      	movs	r2, #1
      ADC->REFCTRL.bit.REFSEL = ADC_REFCTRL_REFSEL_INTVCC1_Val; // 1/2 VDDANA = 0.5* 3V3 = 1.65V
    202c:	430a      	orrs	r2, r1
    202e:	705a      	strb	r2, [r3, #1]
    default:
      ADC->INPUTCTRL.bit.GAIN = ADC_INPUTCTRL_GAIN_DIV2_Val;
      ADC->REFCTRL.bit.REFSEL = ADC_REFCTRL_REFSEL_INTVCC1_Val; // 1/2 VDDANA = 0.5* 3V3 = 1.65V
      break;
  }
}
    2030:	bd00      	pop	{pc}
      ADC->REFCTRL.bit.REFSEL = ADC_REFCTRL_REFSEL_AREFA_Val;
    2032:	0011      	movs	r1, r2
    2034:	2203      	movs	r2, #3
    2036:	e7f9      	b.n	202c <analogReference+0x30>
      ADC->REFCTRL.bit.REFSEL = ADC_REFCTRL_REFSEL_INTVCC1_Val; // 1/2 VDDANA = 0.5* 3V3 = 1.65V
    2038:	0011      	movs	r1, r2
    203a:	2202      	movs	r2, #2
    203c:	e7f6      	b.n	202c <analogReference+0x30>
      ADC->INPUTCTRL.bit.GAIN = ADC_INPUTCTRL_GAIN_DIV2_Val;
    203e:	23f0      	movs	r3, #240	; 0xf0
    2040:	6911      	ldr	r1, [r2, #16]
    2042:	051b      	lsls	r3, r3, #20
    2044:	430b      	orrs	r3, r1
      ADC->REFCTRL.bit.REFSEL = ADC_REFCTRL_REFSEL_INTVCC1_Val; // 1/2 VDDANA = 0.5* 3V3 = 1.65V
    2046:	210f      	movs	r1, #15
      ADC->INPUTCTRL.bit.GAIN = ADC_INPUTCTRL_GAIN_DIV2_Val;
    2048:	6113      	str	r3, [r2, #16]
      ADC->REFCTRL.bit.REFSEL = ADC_REFCTRL_REFSEL_INTVCC1_Val; // 1/2 VDDANA = 0.5* 3V3 = 1.65V
    204a:	7853      	ldrb	r3, [r2, #1]
    204c:	438b      	bics	r3, r1
    204e:	0019      	movs	r1, r3
    2050:	2302      	movs	r3, #2
    2052:	430b      	orrs	r3, r1
    2054:	7053      	strb	r3, [r2, #1]
}
    2056:	e7eb      	b.n	2030 <analogReference+0x34>
    2058:	42004000 	.word	0x42004000
    205c:	f0ffffff 	.word	0xf0ffffff

00002060 <pinMode>:
#endif

void pinMode( uint32_t ulPin, uint32_t ulMode )
{
  // Handle the case the pin isn't usable as PIO
  if ( g_APinDescription[ulPin].ulPinType == PIO_NOT_A_PIN )
    2060:	2318      	movs	r3, #24
{
    2062:	b530      	push	{r4, r5, lr}
  if ( g_APinDescription[ulPin].ulPinType == PIO_NOT_A_PIN )
    2064:	001d      	movs	r5, r3
{
    2066:	0004      	movs	r4, r0
  if ( g_APinDescription[ulPin].ulPinType == PIO_NOT_A_PIN )
    2068:	4345      	muls	r5, r0
    206a:	2008      	movs	r0, #8
    206c:	4a20      	ldr	r2, [pc, #128]	; (20f0 <pinMode+0x90>)
    206e:	1955      	adds	r5, r2, r5
    2070:	5628      	ldrsb	r0, [r5, r0]
    2072:	3001      	adds	r0, #1
    2074:	d014      	beq.n	20a0 <pinMode+0x40>
  {
    return ;
  }

  // Set pin mode according to chapter '22.6.3 I/O Pin Configuration'
  switch ( ulMode )
    2076:	2903      	cmp	r1, #3
    2078:	d812      	bhi.n	20a0 <pinMode+0x40>
    207a:	0008      	movs	r0, r1
      PORT->Group[g_APinDescription[ulPin].ulPort].OUTSET.reg = (uint32_t)(1<<g_APinDescription[ulPin].ulPin) ;
    break ;

    case INPUT_PULLDOWN:
      // Set pin to input mode with pull-down resistor enabled
      PORT->Group[g_APinDescription[ulPin].ulPort].PINCFG[g_APinDescription[ulPin].ulPin].reg=(uint8_t)(PORT_PINCFG_INEN|PORT_PINCFG_PULLEN) ;
    207c:	4363      	muls	r3, r4
    207e:	56d1      	ldrsb	r1, [r2, r3]
    2080:	18d3      	adds	r3, r2, r3
  switch ( ulMode )
    2082:	f000 fa2f 	bl	24e4 <__gnu_thumb1_case_uqi>
    2086:	2802      	.short	0x2802
    2088:	1b0e      	.short	0x1b0e
      PORT->Group[g_APinDescription[ulPin].ulPort].PINCFG[g_APinDescription[ulPin].ulPin].reg=(uint8_t)(PORT_PINCFG_INEN) ;
    208a:	6858      	ldr	r0, [r3, #4]
    208c:	01cb      	lsls	r3, r1, #7
    208e:	2102      	movs	r1, #2
    2090:	4a18      	ldr	r2, [pc, #96]	; (20f4 <pinMode+0x94>)
    2092:	189b      	adds	r3, r3, r2
    2094:	181a      	adds	r2, r3, r0
    2096:	3240      	adds	r2, #64	; 0x40
    2098:	7011      	strb	r1, [r2, #0]
      PORT->Group[g_APinDescription[ulPin].ulPort].DIRCLR.reg = (uint32_t)(1<<g_APinDescription[ulPin].ulPin) ;
    209a:	2201      	movs	r2, #1
    209c:	4082      	lsls	r2, r0
    209e:	605a      	str	r2, [r3, #4]

    default:
      // do nothing
    break ;
  }
}
    20a0:	bd30      	pop	{r4, r5, pc}
      PORT->Group[g_APinDescription[ulPin].ulPort].PINCFG[g_APinDescription[ulPin].ulPin].reg=(uint8_t)(PORT_PINCFG_INEN|PORT_PINCFG_PULLEN) ;
    20a2:	6858      	ldr	r0, [r3, #4]
    20a4:	01cb      	lsls	r3, r1, #7
    20a6:	2106      	movs	r1, #6
    20a8:	4a12      	ldr	r2, [pc, #72]	; (20f4 <pinMode+0x94>)
    20aa:	189b      	adds	r3, r3, r2
    20ac:	181a      	adds	r2, r3, r0
    20ae:	3240      	adds	r2, #64	; 0x40
    20b0:	7011      	strb	r1, [r2, #0]
      PORT->Group[g_APinDescription[ulPin].ulPort].DIRCLR.reg = (uint32_t)(1<<g_APinDescription[ulPin].ulPin) ;
    20b2:	2201      	movs	r2, #1
    20b4:	4082      	lsls	r2, r0
    20b6:	605a      	str	r2, [r3, #4]
      PORT->Group[g_APinDescription[ulPin].ulPort].OUTSET.reg = (uint32_t)(1<<g_APinDescription[ulPin].ulPin) ;
    20b8:	619a      	str	r2, [r3, #24]
    break ;
    20ba:	e7f1      	b.n	20a0 <pinMode+0x40>
      PORT->Group[g_APinDescription[ulPin].ulPort].PINCFG[g_APinDescription[ulPin].ulPin].reg=(uint8_t)(PORT_PINCFG_INEN|PORT_PINCFG_PULLEN) ;
    20bc:	6858      	ldr	r0, [r3, #4]
    20be:	01cb      	lsls	r3, r1, #7
    20c0:	2106      	movs	r1, #6
    20c2:	4a0c      	ldr	r2, [pc, #48]	; (20f4 <pinMode+0x94>)
    20c4:	189b      	adds	r3, r3, r2
    20c6:	181a      	adds	r2, r3, r0
    20c8:	3240      	adds	r2, #64	; 0x40
    20ca:	7011      	strb	r1, [r2, #0]
      PORT->Group[g_APinDescription[ulPin].ulPort].DIRCLR.reg = (uint32_t)(1<<g_APinDescription[ulPin].ulPin) ;
    20cc:	2201      	movs	r2, #1
    20ce:	4082      	lsls	r2, r0
    20d0:	605a      	str	r2, [r3, #4]
      PORT->Group[g_APinDescription[ulPin].ulPort].OUTCLR.reg = (uint32_t)(1<<g_APinDescription[ulPin].ulPin) ;
    20d2:	615a      	str	r2, [r3, #20]
    break ;
    20d4:	e7e4      	b.n	20a0 <pinMode+0x40>
      PORT->Group[g_APinDescription[ulPin].ulPort].PINCFG[g_APinDescription[ulPin].ulPin].reg=(uint8_t)(PORT_PINCFG_INEN) ;
    20d6:	6858      	ldr	r0, [r3, #4]
    20d8:	01cb      	lsls	r3, r1, #7
    20da:	2102      	movs	r1, #2
    20dc:	4a05      	ldr	r2, [pc, #20]	; (20f4 <pinMode+0x94>)
    20de:	189b      	adds	r3, r3, r2
    20e0:	181a      	adds	r2, r3, r0
    20e2:	3240      	adds	r2, #64	; 0x40
    20e4:	7011      	strb	r1, [r2, #0]
      PORT->Group[g_APinDescription[ulPin].ulPort].DIRSET.reg = (uint32_t)(1<<g_APinDescription[ulPin].ulPin) ;
    20e6:	2201      	movs	r2, #1
    20e8:	4082      	lsls	r2, r0
    20ea:	609a      	str	r2, [r3, #8]
    break ;
    20ec:	e7d8      	b.n	20a0 <pinMode+0x40>
    20ee:	46c0      	nop			; (mov r8, r8)
    20f0:	0000294c 	.word	0x0000294c
    20f4:	41004400 	.word	0x41004400

000020f8 <digitalWrite>:

void digitalWrite( uint32_t ulPin, uint32_t ulVal )
{
  // Handle the case the pin isn't usable as PIO
  if ( g_APinDescription[ulPin].ulPinType == PIO_NOT_A_PIN )
    20f8:	2318      	movs	r3, #24
{
    20fa:	b5f0      	push	{r4, r5, r6, r7, lr}
  if ( g_APinDescription[ulPin].ulPinType == PIO_NOT_A_PIN )
    20fc:	2408      	movs	r4, #8
    20fe:	4358      	muls	r0, r3
    2100:	4a11      	ldr	r2, [pc, #68]	; (2148 <digitalWrite+0x50>)
    2102:	1813      	adds	r3, r2, r0
    2104:	571c      	ldrsb	r4, [r3, r4]
    2106:	3401      	adds	r4, #1
    2108:	d01b      	beq.n	2142 <digitalWrite+0x4a>
    return ;
  }

  EPortType port = g_APinDescription[ulPin].ulPort;
  uint32_t pin = g_APinDescription[ulPin].ulPin;
  uint32_t pinMask = (1ul << pin);
    210a:	2601      	movs	r6, #1
    210c:	0035      	movs	r5, r6
  uint32_t pin = g_APinDescription[ulPin].ulPin;
    210e:	685f      	ldr	r7, [r3, #4]

  if ( (PORT->Group[port].DIRSET.reg & pinMask) == 0 ) {
    2110:	5683      	ldrsb	r3, [r0, r2]
  uint32_t pinMask = (1ul << pin);
    2112:	40bd      	lsls	r5, r7
  if ( (PORT->Group[port].DIRSET.reg & pinMask) == 0 ) {
    2114:	4a0d      	ldr	r2, [pc, #52]	; (214c <digitalWrite+0x54>)
    2116:	01db      	lsls	r3, r3, #7
    2118:	189a      	adds	r2, r3, r2
    211a:	6890      	ldr	r0, [r2, #8]
    211c:	4228      	tst	r0, r5
    211e:	d10b      	bne.n	2138 <digitalWrite+0x40>
    // the pin is not an output, disable pull-up if val is LOW, otherwise enable pull-up
    PORT->Group[port].PINCFG[pin].bit.PULLEN = ((ulVal == LOW) ? 0 : 1) ;
    2120:	000c      	movs	r4, r1
    2122:	1e60      	subs	r0, r4, #1
    2124:	4184      	sbcs	r4, r0
    2126:	19d2      	adds	r2, r2, r7
    2128:	3240      	adds	r2, #64	; 0x40
    212a:	7810      	ldrb	r0, [r2, #0]
    212c:	4034      	ands	r4, r6
    212e:	3603      	adds	r6, #3
    2130:	00a4      	lsls	r4, r4, #2
    2132:	43b0      	bics	r0, r6
    2134:	4320      	orrs	r0, r4
    2136:	7010      	strb	r0, [r2, #0]
  }

  switch ( ulVal )
  {
    case LOW:
      PORT->Group[port].OUTCLR.reg = pinMask;
    2138:	4a04      	ldr	r2, [pc, #16]	; (214c <digitalWrite+0x54>)
    213a:	189b      	adds	r3, r3, r2
  switch ( ulVal )
    213c:	2900      	cmp	r1, #0
    213e:	d101      	bne.n	2144 <digitalWrite+0x4c>
      PORT->Group[port].OUTCLR.reg = pinMask;
    2140:	615d      	str	r5, [r3, #20]
      PORT->Group[port].OUTSET.reg = pinMask;
    break ;
  }

  return ;
}
    2142:	bdf0      	pop	{r4, r5, r6, r7, pc}
      PORT->Group[port].OUTSET.reg = pinMask;
    2144:	619d      	str	r5, [r3, #24]
    break ;
    2146:	e7fc      	b.n	2142 <digitalWrite+0x4a>
    2148:	0000294c 	.word	0x0000294c
    214c:	41004400 	.word	0x41004400

00002150 <pinPeripheral>:

#include "Arduino.h"
#include "wiring_private.h"

int pinPeripheral( uint32_t ulPin, EPioType ulPeripheral )
{
    2150:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2152:	0003      	movs	r3, r0
  // Handle the case the pin isn't usable as PIO
  if ( g_APinDescription[ulPin].ulPinType == PIO_NOT_A_PIN )
    2154:	2018      	movs	r0, #24
    2156:	4358      	muls	r0, r3
    2158:	4a2a      	ldr	r2, [pc, #168]	; (2204 <pinPeripheral+0xb4>)
    215a:	1810      	adds	r0, r2, r0
    215c:	7a00      	ldrb	r0, [r0, #8]
    215e:	b240      	sxtb	r0, r0
  {
    return -1 ;
    2160:	0004      	movs	r4, r0
  if ( g_APinDescription[ulPin].ulPinType == PIO_NOT_A_PIN )
    2162:	3001      	adds	r0, #1
    2164:	d013      	beq.n	218e <pinPeripheral+0x3e>
  }

  switch ( ulPeripheral )
    2166:	1c48      	adds	r0, r1, #1
    case PIO_NOT_A_PIN:
      return -1l ;
    break ;
  }

  return 0l ;
    2168:	2400      	movs	r4, #0
  switch ( ulPeripheral )
    216a:	280c      	cmp	r0, #12
    216c:	d80f      	bhi.n	218e <pinPeripheral+0x3e>
    216e:	f000 f9b9 	bl	24e4 <__gnu_thumb1_case_uqi>
    2172:	1c45      	.short	0x1c45
    2174:	1c1c1c1c 	.word	0x1c1c1c1c
    2178:	071c1c1c 	.word	0x071c1c1c
    217c:	0707      	.short	0x0707
    217e:	07          	.byte	0x07
    217f:	00          	.byte	0x00
      if ( ulPeripheral == PIO_INPUT )
    2180:	2909      	cmp	r1, #9
    2182:	d106      	bne.n	2192 <pinPeripheral+0x42>
        pinMode( ulPin, INPUT ) ;
    2184:	2100      	movs	r1, #0
          pinMode( ulPin, INPUT_PULLUP ) ;
    2186:	0018      	movs	r0, r3
    2188:	f7ff ff6a 	bl	2060 <pinMode>
  return 0l ;
    218c:	2400      	movs	r4, #0
}
    218e:	0020      	movs	r0, r4
    2190:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if ( ulPeripheral == PIO_INPUT_PULLUP )
    2192:	290a      	cmp	r1, #10
    2194:	d101      	bne.n	219a <pinPeripheral+0x4a>
          pinMode( ulPin, INPUT_PULLUP ) ;
    2196:	3908      	subs	r1, #8
    2198:	e7f5      	b.n	2186 <pinPeripheral+0x36>
  return 0l ;
    219a:	2400      	movs	r4, #0
          if ( ulPeripheral == PIO_OUTPUT )
    219c:	290b      	cmp	r1, #11
    219e:	d1f6      	bne.n	218e <pinPeripheral+0x3e>
            pinMode( ulPin, OUTPUT ) ;
    21a0:	390a      	subs	r1, #10
    21a2:	0018      	movs	r0, r3
    21a4:	f7ff ff5c 	bl	2060 <pinMode>
    21a8:	e7f1      	b.n	218e <pinPeripheral+0x3e>
      if ( g_APinDescription[ulPin].ulPin & 1 ) // is pin odd?
    21aa:	2018      	movs	r0, #24
    21ac:	4343      	muls	r3, r0
    21ae:	18d0      	adds	r0, r2, r3
    21b0:	6846      	ldr	r6, [r0, #4]
    21b2:	2501      	movs	r5, #1
    21b4:	0034      	movs	r4, r6
    21b6:	56d2      	ldrsb	r2, [r2, r3]
        temp = (PORT->Group[g_APinDescription[ulPin].ulPort].PMUX[g_APinDescription[ulPin].ulPin >> 1].reg) & PORT_PMUX_PMUXE( 0xF ) ;
    21b8:	4813      	ldr	r0, [pc, #76]	; (2208 <pinPeripheral+0xb8>)
    21ba:	01d2      	lsls	r2, r2, #7
    21bc:	1812      	adds	r2, r2, r0
    21be:	0873      	lsrs	r3, r6, #1
    21c0:	18d3      	adds	r3, r2, r3
    21c2:	3330      	adds	r3, #48	; 0x30
      if ( g_APinDescription[ulPin].ulPin & 1 ) // is pin odd?
    21c4:	402c      	ands	r4, r5
        temp = (PORT->Group[g_APinDescription[ulPin].ulPort].PMUX[g_APinDescription[ulPin].ulPin >> 1].reg) & PORT_PMUX_PMUXE( 0xF ) ;
    21c6:	7818      	ldrb	r0, [r3, #0]
      if ( g_APinDescription[ulPin].ulPin & 1 ) // is pin odd?
    21c8:	2c00      	cmp	r4, #0
    21ca:	d00b      	beq.n	21e4 <pinPeripheral+0x94>
        PORT->Group[g_APinDescription[ulPin].ulPort].PMUX[g_APinDescription[ulPin].ulPin >> 1].reg = temp|PORT_PMUX_PMUXO( ulPeripheral ) ;
    21cc:	240f      	movs	r4, #15
    21ce:	0109      	lsls	r1, r1, #4
    21d0:	4020      	ands	r0, r4
    21d2:	4301      	orrs	r1, r0
    21d4:	b2c9      	uxtb	r1, r1
        PORT->Group[g_APinDescription[ulPin].ulPort].PINCFG[g_APinDescription[ulPin].ulPin].reg |= PORT_PINCFG_PMUXEN ;
    21d6:	1992      	adds	r2, r2, r6
        PORT->Group[g_APinDescription[ulPin].ulPort].PMUX[g_APinDescription[ulPin].ulPin >> 1].reg = temp|PORT_PMUX_PMUXO( ulPeripheral ) ;
    21d8:	7019      	strb	r1, [r3, #0]
        PORT->Group[g_APinDescription[ulPin].ulPort].PINCFG[g_APinDescription[ulPin].ulPin].reg |= PORT_PINCFG_PMUXEN ;
    21da:	3240      	adds	r2, #64	; 0x40
    21dc:	7813      	ldrb	r3, [r2, #0]
    21de:	431d      	orrs	r5, r3
    21e0:	7015      	strb	r5, [r2, #0]
    21e2:	e7d3      	b.n	218c <pinPeripheral+0x3c>
        PORT->Group[g_APinDescription[ulPin].ulPort].PMUX[g_APinDescription[ulPin].ulPin >> 1].reg = temp|PORT_PMUX_PMUXE( ulPeripheral ) ;
    21e4:	270f      	movs	r7, #15
    21e6:	43b8      	bics	r0, r7
    21e8:	4301      	orrs	r1, r0
        PORT->Group[g_APinDescription[ulPin].ulPort].PINCFG[g_APinDescription[ulPin].ulPin].reg |= PORT_PINCFG_PMUXEN ; // Enable port mux
    21ea:	1992      	adds	r2, r2, r6
        PORT->Group[g_APinDescription[ulPin].ulPort].PMUX[g_APinDescription[ulPin].ulPin >> 1].reg = temp|PORT_PMUX_PMUXE( ulPeripheral ) ;
    21ec:	b2c9      	uxtb	r1, r1
    21ee:	7019      	strb	r1, [r3, #0]
        PORT->Group[g_APinDescription[ulPin].ulPort].PINCFG[g_APinDescription[ulPin].ulPin].reg |= PORT_PINCFG_PMUXEN ; // Enable port mux
    21f0:	0013      	movs	r3, r2
    21f2:	3340      	adds	r3, #64	; 0x40
    21f4:	781a      	ldrb	r2, [r3, #0]
    21f6:	4315      	orrs	r5, r2
    21f8:	701d      	strb	r5, [r3, #0]
    21fa:	e7c8      	b.n	218e <pinPeripheral+0x3e>
      return -1l ;
    21fc:	2401      	movs	r4, #1
    21fe:	4264      	negs	r4, r4
    2200:	e7c5      	b.n	218e <pinPeripheral+0x3e>
    2202:	46c0      	nop			; (mov r8, r8)
    2204:	0000294c 	.word	0x0000294c
    2208:	41004400 	.word	0x41004400

0000220c <SERCOM0_Handler>:
SERCOM sercom5( SERCOM5 ) ;

Uart Serial1( &sercom0, PIN_SERIAL1_RX, PIN_SERIAL1_TX, PAD_SERIAL1_RX, PAD_SERIAL1_TX ) ;
Uart Serial( &sercom5, PIN_SERIAL_RX, PIN_SERIAL_TX, PAD_SERIAL_RX, PAD_SERIAL_TX ) ;
void SERCOM0_Handler()
{
    220c:	b510      	push	{r4, lr}
  Serial1.IrqHandler();
    220e:	4802      	ldr	r0, [pc, #8]	; (2218 <SERCOM0_Handler+0xc>)
    2210:	f7fe faff 	bl	812 <_ZN4Uart10IrqHandlerEv>
}
    2214:	bd10      	pop	{r4, pc}
    2216:	46c0      	nop			; (mov r8, r8)
    2218:	20000924 	.word	0x20000924

0000221c <SERCOM5_Handler>:

void SERCOM5_Handler()
{
    221c:	b510      	push	{r4, lr}
  Serial.IrqHandler();
    221e:	4802      	ldr	r0, [pc, #8]	; (2228 <SERCOM5_Handler+0xc>)
    2220:	f7fe faf7 	bl	812 <_ZN4Uart10IrqHandlerEv>
}
    2224:	bd10      	pop	{r4, pc}
    2226:	46c0      	nop			; (mov r8, r8)
    2228:	200006e8 	.word	0x200006e8

0000222c <_GLOBAL__sub_I_g_APinDescription>:
    222c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
Uart Serial1( &sercom0, PIN_SERIAL1_RX, PIN_SERIAL1_TX, PAD_SERIAL1_RX, PAD_SERIAL1_TX ) ;
    222e:	2401      	movs	r4, #1
    2230:	2603      	movs	r6, #3
SERCOM sercom0( SERCOM0 ) ;
    2232:	4f15      	ldr	r7, [pc, #84]	; (2288 <_GLOBAL__sub_I_g_APinDescription+0x5c>)
    2234:	4915      	ldr	r1, [pc, #84]	; (228c <_GLOBAL__sub_I_g_APinDescription+0x60>)
    2236:	0038      	movs	r0, r7
    2238:	f000 f84a 	bl	22d0 <_ZN6SERCOMC1EP6Sercom>
SERCOM sercom1( SERCOM1 ) ;
    223c:	4914      	ldr	r1, [pc, #80]	; (2290 <_GLOBAL__sub_I_g_APinDescription+0x64>)
    223e:	4815      	ldr	r0, [pc, #84]	; (2294 <_GLOBAL__sub_I_g_APinDescription+0x68>)
    2240:	f000 f846 	bl	22d0 <_ZN6SERCOMC1EP6Sercom>
SERCOM sercom2( SERCOM2 ) ;
    2244:	4914      	ldr	r1, [pc, #80]	; (2298 <_GLOBAL__sub_I_g_APinDescription+0x6c>)
    2246:	4815      	ldr	r0, [pc, #84]	; (229c <_GLOBAL__sub_I_g_APinDescription+0x70>)
    2248:	f000 f842 	bl	22d0 <_ZN6SERCOMC1EP6Sercom>
SERCOM sercom3( SERCOM3 ) ;
    224c:	4914      	ldr	r1, [pc, #80]	; (22a0 <_GLOBAL__sub_I_g_APinDescription+0x74>)
    224e:	4815      	ldr	r0, [pc, #84]	; (22a4 <_GLOBAL__sub_I_g_APinDescription+0x78>)
    2250:	f000 f83e 	bl	22d0 <_ZN6SERCOMC1EP6Sercom>
SERCOM sercom4( SERCOM4 ) ;
    2254:	4914      	ldr	r1, [pc, #80]	; (22a8 <_GLOBAL__sub_I_g_APinDescription+0x7c>)
    2256:	4815      	ldr	r0, [pc, #84]	; (22ac <_GLOBAL__sub_I_g_APinDescription+0x80>)
    2258:	f000 f83a 	bl	22d0 <_ZN6SERCOMC1EP6Sercom>
SERCOM sercom5( SERCOM5 ) ;
    225c:	4d14      	ldr	r5, [pc, #80]	; (22b0 <_GLOBAL__sub_I_g_APinDescription+0x84>)
    225e:	4915      	ldr	r1, [pc, #84]	; (22b4 <_GLOBAL__sub_I_g_APinDescription+0x88>)
    2260:	0028      	movs	r0, r5
    2262:	f000 f835 	bl	22d0 <_ZN6SERCOMC1EP6Sercom>
Uart Serial1( &sercom0, PIN_SERIAL1_RX, PIN_SERIAL1_TX, PAD_SERIAL1_RX, PAD_SERIAL1_TX ) ;
    2266:	0039      	movs	r1, r7
    2268:	9600      	str	r6, [sp, #0]
    226a:	0023      	movs	r3, r4
    226c:	9401      	str	r4, [sp, #4]
    226e:	2200      	movs	r2, #0
    2270:	4811      	ldr	r0, [pc, #68]	; (22b8 <_GLOBAL__sub_I_g_APinDescription+0x8c>)
    2272:	f7fe fa63 	bl	73c <_ZN4UartC1EP6SERCOMhh11SercomRXPad15SercomUartTXPad>
Uart Serial( &sercom5, PIN_SERIAL_RX, PIN_SERIAL_TX, PAD_SERIAL_RX, PAD_SERIAL_TX ) ;
    2276:	9600      	str	r6, [sp, #0]
    2278:	0029      	movs	r1, r5
    227a:	9401      	str	r4, [sp, #4]
    227c:	231e      	movs	r3, #30
    227e:	221f      	movs	r2, #31
    2280:	480e      	ldr	r0, [pc, #56]	; (22bc <_GLOBAL__sub_I_g_APinDescription+0x90>)
    2282:	f7fe fa5b 	bl	73c <_ZN4UartC1EP6SERCOMhh11SercomRXPad15SercomUartTXPad>
}
    2286:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    2288:	20000b60 	.word	0x20000b60
    228c:	42000800 	.word	0x42000800
    2290:	42000c00 	.word	0x42000c00
    2294:	20000b64 	.word	0x20000b64
    2298:	42001000 	.word	0x42001000
    229c:	20000b68 	.word	0x20000b68
    22a0:	42001400 	.word	0x42001400
    22a4:	20000b6c 	.word	0x20000b6c
    22a8:	42001800 	.word	0x42001800
    22ac:	20000b70 	.word	0x20000b70
    22b0:	20000b74 	.word	0x20000b74
    22b4:	42001c00 	.word	0x42001c00
    22b8:	20000924 	.word	0x20000924
    22bc:	200006e8 	.word	0x200006e8

000022c0 <_Znwj>:
    22c0:	b510      	push	{r4, lr}
    22c2:	f000 f9c9 	bl	2658 <malloc>
    22c6:	bd10      	pop	{r4, pc}

000022c8 <_ZdlPv>:
    22c8:	b510      	push	{r4, lr}
    22ca:	f000 f9cf 	bl	266c <free>
    22ce:	bd10      	pop	{r4, pc}

000022d0 <_ZN6SERCOMC1EP6Sercom>:
#define WIRE_RISE_TIME_NANOSECONDS 125
#endif

SERCOM::SERCOM(Sercom* s)
{
  sercom = s;
    22d0:	6001      	str	r1, [r0, #0]
}
    22d2:	4770      	bx	lr

000022d4 <_ZN6SERCOM9initFrameE18SercomUartCharSize15SercomDataOrder16SercomParityMode19SercomNumberStopBit>:
    sercom->USART.BAUD.FRAC.FP   = (baudTimes8 % 8);
    sercom->USART.BAUD.FRAC.BAUD = (baudTimes8 / 8);
  }
}
void SERCOM::initFrame(SercomUartCharSize charSize, SercomDataOrder dataOrder, SercomParityMode parityMode, SercomNumberStopBit nbStopBits)
{
    22d4:	b5f0      	push	{r4, r5, r6, r7, lr}
    22d6:	ac05      	add	r4, sp, #20
    22d8:	7825      	ldrb	r5, [r4, #0]
  //Setting the CTRLA register
  sercom->USART.CTRLA.reg |=	SERCOM_USART_CTRLA_FORM( (parityMode == SERCOM_NO_PARITY ? 0 : 1) ) |
    22da:	6804      	ldr	r4, [r0, #0]
    22dc:	1e98      	subs	r0, r3, #2
    22de:	1e47      	subs	r7, r0, #1
    22e0:	41b8      	sbcs	r0, r7
                dataOrder << SERCOM_USART_CTRLA_DORD_Pos;
    22e2:	6826      	ldr	r6, [r4, #0]
    22e4:	0792      	lsls	r2, r2, #30
  sercom->USART.CTRLA.reg |=	SERCOM_USART_CTRLA_FORM( (parityMode == SERCOM_NO_PARITY ? 0 : 1) ) |
    22e6:	0600      	lsls	r0, r0, #24
                dataOrder << SERCOM_USART_CTRLA_DORD_Pos;
    22e8:	4332      	orrs	r2, r6
    22ea:	4302      	orrs	r2, r0

  //Setting the CTRLB register
  sercom->USART.CTRLB.reg |=	SERCOM_USART_CTRLB_CHSIZE(charSize) |
    22ec:	2007      	movs	r0, #7
  sercom->USART.CTRLA.reg |=	SERCOM_USART_CTRLA_FORM( (parityMode == SERCOM_NO_PARITY ? 0 : 1) ) |
    22ee:	6022      	str	r2, [r4, #0]
  sercom->USART.CTRLB.reg |=	SERCOM_USART_CTRLB_CHSIZE(charSize) |
    22f0:	4001      	ands	r1, r0
                nbStopBits << SERCOM_USART_CTRLB_SBMODE_Pos |
    22f2:	01ad      	lsls	r5, r5, #6
                (parityMode == SERCOM_NO_PARITY ? 0 : parityMode) << SERCOM_USART_CTRLB_PMODE_Pos; //If no parity use default value
    22f4:	6862      	ldr	r2, [r4, #4]
    22f6:	4329      	orrs	r1, r5
    22f8:	2000      	movs	r0, #0
    22fa:	2b02      	cmp	r3, #2
    22fc:	d000      	beq.n	2300 <_ZN6SERCOM9initFrameE18SercomUartCharSize15SercomDataOrder16SercomParityMode19SercomNumberStopBit+0x2c>
    22fe:	0358      	lsls	r0, r3, #13
    2300:	4311      	orrs	r1, r2
    2302:	4301      	orrs	r1, r0
  sercom->USART.CTRLB.reg |=	SERCOM_USART_CTRLB_CHSIZE(charSize) |
    2304:	6061      	str	r1, [r4, #4]
}
    2306:	bdf0      	pop	{r4, r5, r6, r7, pc}

00002308 <_ZN6SERCOM8initPadsE15SercomUartTXPad11SercomRXPad>:

void SERCOM::initPads(SercomUartTXPad txPad, SercomRXPad rxPad)
{
    2308:	b510      	push	{r4, lr}
  //Setting the CTRLA register
  sercom->USART.CTRLA.reg |=	SERCOM_USART_CTRLA_TXPO(txPad) |
                SERCOM_USART_CTRLA_RXPO(rxPad);
    230a:	24c0      	movs	r4, #192	; 0xc0
  sercom->USART.CTRLA.reg |=	SERCOM_USART_CTRLA_TXPO(txPad) |
    230c:	6803      	ldr	r3, [r0, #0]
                SERCOM_USART_CTRLA_RXPO(rxPad);
    230e:	03a4      	lsls	r4, r4, #14
    2310:	6818      	ldr	r0, [r3, #0]
    2312:	0512      	lsls	r2, r2, #20
    2314:	4022      	ands	r2, r4
    2316:	4302      	orrs	r2, r0
  sercom->USART.CTRLA.reg |=	SERCOM_USART_CTRLA_TXPO(txPad) |
    2318:	20c0      	movs	r0, #192	; 0xc0
    231a:	0409      	lsls	r1, r1, #16
    231c:	0280      	lsls	r0, r0, #10
    231e:	4001      	ands	r1, r0
                SERCOM_USART_CTRLA_RXPO(rxPad);
    2320:	4311      	orrs	r1, r2
  sercom->USART.CTRLA.reg |=	SERCOM_USART_CTRLA_TXPO(txPad) |
    2322:	6019      	str	r1, [r3, #0]

  // Enable Transceiver and Receiver
  sercom->USART.CTRLB.reg |= SERCOM_USART_CTRLB_TXEN | SERCOM_USART_CTRLB_RXEN ;
    2324:	685a      	ldr	r2, [r3, #4]
    2326:	4310      	orrs	r0, r2
    2328:	6058      	str	r0, [r3, #4]
}
    232a:	bd10      	pop	{r4, pc}

0000232c <_ZN6SERCOM9resetUARTEv>:

void SERCOM::resetUART()
{
  // Start the Software Reset
  sercom->USART.CTRLA.bit.SWRST = 1 ;
    232c:	2201      	movs	r2, #1
    232e:	6803      	ldr	r3, [r0, #0]
    2330:	6819      	ldr	r1, [r3, #0]
    2332:	430a      	orrs	r2, r1
    2334:	601a      	str	r2, [r3, #0]

  while ( sercom->USART.CTRLA.bit.SWRST || sercom->USART.SYNCBUSY.bit.SWRST )
    2336:	681a      	ldr	r2, [r3, #0]
    2338:	07d2      	lsls	r2, r2, #31
    233a:	d4fc      	bmi.n	2336 <_ZN6SERCOM9resetUARTEv+0xa>
    233c:	69da      	ldr	r2, [r3, #28]
    233e:	07d2      	lsls	r2, r2, #31
    2340:	d4f9      	bmi.n	2336 <_ZN6SERCOM9resetUARTEv+0xa>
  {
    // Wait for both bits Software Reset from CTRLA and SYNCBUSY coming back to 0
  }
}
    2342:	4770      	bx	lr

00002344 <_ZN6SERCOM10enableUARTEv>:

void SERCOM::enableUART()
{
  //Setting  the enable bit to 1
  sercom->USART.CTRLA.bit.ENABLE = 0x1u;
    2344:	2202      	movs	r2, #2
    2346:	6803      	ldr	r3, [r0, #0]
    2348:	6819      	ldr	r1, [r3, #0]
    234a:	430a      	orrs	r2, r1
    234c:	601a      	str	r2, [r3, #0]

  //Wait for then enable bit from SYNCBUSY is equal to 0;
  while(sercom->USART.SYNCBUSY.bit.ENABLE);
    234e:	69da      	ldr	r2, [r3, #28]
    2350:	0792      	lsls	r2, r2, #30
    2352:	d4fc      	bmi.n	234e <_ZN6SERCOM10enableUARTEv+0xa>
}
    2354:	4770      	bx	lr

00002356 <_ZN6SERCOM9flushUARTEv>:
}

bool SERCOM::isDataRegisterEmptyUART()
{
  //DRE : Data Register Empty
  return sercom->USART.INTFLAG.bit.DRE;
    2356:	6803      	ldr	r3, [r0, #0]
    2358:	7e1a      	ldrb	r2, [r3, #24]
  if(isDataRegisterEmptyUART())
    235a:	07d2      	lsls	r2, r2, #31
    235c:	d402      	bmi.n	2364 <_ZN6SERCOM9flushUARTEv+0xe>
  while(!sercom->USART.INTFLAG.bit.TXC);
    235e:	7e1a      	ldrb	r2, [r3, #24]
    2360:	0792      	lsls	r2, r2, #30
    2362:	d5fc      	bpl.n	235e <_ZN6SERCOM9flushUARTEv+0x8>
}
    2364:	4770      	bx	lr

00002366 <_ZN6SERCOM15clearStatusUARTEv>:
  sercom->USART.STATUS.reg = SERCOM_USART_STATUS_RESETVALUE;
    2366:	2200      	movs	r2, #0
    2368:	6803      	ldr	r3, [r0, #0]
    236a:	835a      	strh	r2, [r3, #26]
}
    236c:	4770      	bx	lr

0000236e <_ZN6SERCOM17availableDataUARTEv>:
  return sercom->USART.INTFLAG.bit.RXC;
    236e:	6803      	ldr	r3, [r0, #0]
    2370:	7e18      	ldrb	r0, [r3, #24]
    2372:	0740      	lsls	r0, r0, #29
    2374:	0fc0      	lsrs	r0, r0, #31
}
    2376:	4770      	bx	lr

00002378 <_ZN6SERCOM11isUARTErrorEv>:
  return sercom->USART.INTFLAG.bit.ERROR;
    2378:	6803      	ldr	r3, [r0, #0]
    237a:	7e18      	ldrb	r0, [r3, #24]
    237c:	09c0      	lsrs	r0, r0, #7
}
    237e:	4770      	bx	lr

00002380 <_ZN6SERCOM20acknowledgeUARTErrorEv>:
  sercom->USART.INTFLAG.bit.ERROR = 1;
    2380:	2380      	movs	r3, #128	; 0x80
    2382:	6802      	ldr	r2, [r0, #0]
    2384:	425b      	negs	r3, r3
    2386:	7e11      	ldrb	r1, [r2, #24]
    2388:	430b      	orrs	r3, r1
    238a:	7613      	strb	r3, [r2, #24]
}
    238c:	4770      	bx	lr

0000238e <_ZN6SERCOM16isFrameErrorUARTEv>:
  return sercom->USART.STATUS.bit.FERR;
    238e:	6803      	ldr	r3, [r0, #0]
    2390:	8b58      	ldrh	r0, [r3, #26]
    2392:	0780      	lsls	r0, r0, #30
    2394:	0fc0      	lsrs	r0, r0, #31
}
    2396:	4770      	bx	lr

00002398 <_ZN6SERCOM19clearFrameErrorUARTEv>:
  sercom->USART.STATUS.bit.FERR = 1;
    2398:	2302      	movs	r3, #2
    239a:	6802      	ldr	r2, [r0, #0]
    239c:	8b51      	ldrh	r1, [r2, #26]
    239e:	430b      	orrs	r3, r1
    23a0:	8353      	strh	r3, [r2, #26]
}
    23a2:	4770      	bx	lr

000023a4 <_ZN6SERCOM23isDataRegisterEmptyUARTEv>:
  return sercom->USART.INTFLAG.bit.DRE;
    23a4:	6803      	ldr	r3, [r0, #0]
    23a6:	7e18      	ldrb	r0, [r3, #24]
    23a8:	07c0      	lsls	r0, r0, #31
    23aa:	0fc0      	lsrs	r0, r0, #31
}
    23ac:	4770      	bx	lr

000023ae <_ZN6SERCOM12readDataUARTEv>:

uint8_t SERCOM::readDataUART()
{
  return sercom->USART.DATA.bit.DATA;
    23ae:	6803      	ldr	r3, [r0, #0]
    23b0:	8d18      	ldrh	r0, [r3, #40]	; 0x28
    23b2:	b2c0      	uxtb	r0, r0
}
    23b4:	4770      	bx	lr

000023b6 <_ZN6SERCOM13writeDataUARTEh>:
  return sercom->USART.INTFLAG.bit.DRE;
    23b6:	6803      	ldr	r3, [r0, #0]
    23b8:	7e1a      	ldrb	r2, [r3, #24]

int SERCOM::writeDataUART(uint8_t data)
{
  // Wait for data register to be empty
  while(!isDataRegisterEmptyUART());
    23ba:	07d2      	lsls	r2, r2, #31
    23bc:	d5fc      	bpl.n	23b8 <_ZN6SERCOM13writeDataUARTEh+0x2>

  //Put data into DATA register
  sercom->USART.DATA.reg = (uint16_t)data;
    23be:	b289      	uxth	r1, r1
  return 1;
}
    23c0:	2001      	movs	r0, #1
  sercom->USART.DATA.reg = (uint16_t)data;
    23c2:	8519      	strh	r1, [r3, #40]	; 0x28
}
    23c4:	4770      	bx	lr

000023c6 <_ZN6SERCOM36enableDataRegisterEmptyInterruptUARTEv>:

void SERCOM::enableDataRegisterEmptyInterruptUART()
{
  sercom->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
    23c6:	2201      	movs	r2, #1
    23c8:	6803      	ldr	r3, [r0, #0]
    23ca:	759a      	strb	r2, [r3, #22]
}
    23cc:	4770      	bx	lr

000023ce <_ZN6SERCOM37disableDataRegisterEmptyInterruptUARTEv>:

void SERCOM::disableDataRegisterEmptyInterruptUART()
{
  sercom->USART.INTENCLR.reg = SERCOM_USART_INTENCLR_DRE;
    23ce:	2201      	movs	r2, #1
    23d0:	6803      	ldr	r3, [r0, #0]
    23d2:	751a      	strb	r2, [r3, #20]
}
    23d4:	4770      	bx	lr
	...

000023d8 <_ZN6SERCOM13initClockNVICEv>:
void SERCOM::initClockNVIC( void )
{
  uint8_t clockId = 0;
  IRQn_Type IdNvic=PendSV_IRQn ; // Dummy init to intercept potential error later

  if(sercom == SERCOM0)
    23d8:	6803      	ldr	r3, [r0, #0]
    23da:	4a21      	ldr	r2, [pc, #132]	; (2460 <_ZN6SERCOM13initClockNVICEv+0x88>)
{
    23dc:	b530      	push	{r4, r5, lr}
  if(sercom == SERCOM0)
    23de:	4293      	cmp	r3, r2
    23e0:	d011      	beq.n	2406 <_ZN6SERCOM13initClockNVICEv+0x2e>
  {
    clockId = GCM_SERCOM0_CORE;
    IdNvic = SERCOM0_IRQn;
  }
  else if(sercom == SERCOM1)
    23e2:	4a20      	ldr	r2, [pc, #128]	; (2464 <_ZN6SERCOM13initClockNVICEv+0x8c>)
    23e4:	4293      	cmp	r3, r2
    23e6:	d02f      	beq.n	2448 <_ZN6SERCOM13initClockNVICEv+0x70>
  {
    clockId = GCM_SERCOM1_CORE;
    IdNvic = SERCOM1_IRQn;
  }
  else if(sercom == SERCOM2)
    23e8:	4a1f      	ldr	r2, [pc, #124]	; (2468 <_ZN6SERCOM13initClockNVICEv+0x90>)
    23ea:	4293      	cmp	r3, r2
    23ec:	d02f      	beq.n	244e <_ZN6SERCOM13initClockNVICEv+0x76>
  {
    clockId = GCM_SERCOM2_CORE;
    IdNvic = SERCOM2_IRQn;
  }
  else if(sercom == SERCOM3)
    23ee:	4a1f      	ldr	r2, [pc, #124]	; (246c <_ZN6SERCOM13initClockNVICEv+0x94>)
    23f0:	4293      	cmp	r3, r2
    23f2:	d02f      	beq.n	2454 <_ZN6SERCOM13initClockNVICEv+0x7c>
  {
    clockId = GCM_SERCOM3_CORE;
    IdNvic = SERCOM3_IRQn;
  }
  #if defined(SERCOM4)
  else if(sercom == SERCOM4)
    23f4:	4a1e      	ldr	r2, [pc, #120]	; (2470 <_ZN6SERCOM13initClockNVICEv+0x98>)
    23f6:	4293      	cmp	r3, r2
    23f8:	d02f      	beq.n	245a <_ZN6SERCOM13initClockNVICEv+0x82>
    clockId = GCM_SERCOM4_CORE;
    IdNvic = SERCOM4_IRQn;
  }
  #endif // SERCOM4
  #if defined(SERCOM5)
  else if(sercom == SERCOM5)
    23fa:	4a1e      	ldr	r2, [pc, #120]	; (2474 <_ZN6SERCOM13initClockNVICEv+0x9c>)
    23fc:	4293      	cmp	r3, r2
    23fe:	d122      	bne.n	2446 <_ZN6SERCOM13initClockNVICEv+0x6e>
  {
    clockId = GCM_SERCOM5_CORE;
    IdNvic = SERCOM5_IRQn;
    2400:	230e      	movs	r3, #14
    clockId = GCM_SERCOM5_CORE;
    2402:	2219      	movs	r2, #25
    2404:	e001      	b.n	240a <_ZN6SERCOM13initClockNVICEv+0x32>
    IdNvic = SERCOM0_IRQn;
    2406:	2309      	movs	r3, #9
    clockId = GCM_SERCOM0_CORE;
    2408:	2214      	movs	r2, #20
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    240a:	2101      	movs	r1, #1
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    240c:	2503      	movs	r5, #3
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    240e:	4099      	lsls	r1, r3
    2410:	4819      	ldr	r0, [pc, #100]	; (2478 <_ZN6SERCOM13initClockNVICEv+0xa0>)
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    2412:	24c0      	movs	r4, #192	; 0xc0
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2414:	6001      	str	r1, [r0, #0]
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    2416:	0899      	lsrs	r1, r3, #2
    2418:	402b      	ands	r3, r5
    241a:	40ab      	lsls	r3, r5
    241c:	35fc      	adds	r5, #252	; 0xfc
    241e:	409d      	lsls	r5, r3
    2420:	0089      	lsls	r1, r1, #2
    2422:	1809      	adds	r1, r1, r0
    2424:	00a4      	lsls	r4, r4, #2
    2426:	5908      	ldr	r0, [r1, r4]
    2428:	43a8      	bics	r0, r5
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
    242a:	25c0      	movs	r5, #192	; 0xc0
    242c:	409d      	lsls	r5, r3
    242e:	002b      	movs	r3, r5
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    2430:	4303      	orrs	r3, r0
    2432:	510b      	str	r3, [r1, r4]
  NVIC_EnableIRQ(IdNvic);
  NVIC_SetPriority (IdNvic, SERCOM_NVIC_PRIORITY);  /* set Priority */

  //Setting clock
  GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID( clockId ) | // Generic Clock 0 (SERCOMx)
                      GCLK_CLKCTRL_GEN_GCLK0 | // Generic Clock Generator 0 is source
    2434:	2380      	movs	r3, #128	; 0x80
    2436:	01db      	lsls	r3, r3, #7
    2438:	431a      	orrs	r2, r3
  GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID( clockId ) | // Generic Clock 0 (SERCOMx)
    243a:	4b10      	ldr	r3, [pc, #64]	; (247c <_ZN6SERCOM13initClockNVICEv+0xa4>)
    243c:	805a      	strh	r2, [r3, #2]
                      GCLK_CLKCTRL_CLKEN ;

  while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY )
    243e:	785a      	ldrb	r2, [r3, #1]
    2440:	b252      	sxtb	r2, r2
    2442:	2a00      	cmp	r2, #0
    2444:	dbfb      	blt.n	243e <_ZN6SERCOM13initClockNVICEv+0x66>
  {
    /* Wait for synchronization */
  }
}
    2446:	bd30      	pop	{r4, r5, pc}
    IdNvic = SERCOM1_IRQn;
    2448:	230a      	movs	r3, #10
    clockId = GCM_SERCOM1_CORE;
    244a:	2215      	movs	r2, #21
    244c:	e7dd      	b.n	240a <_ZN6SERCOM13initClockNVICEv+0x32>
    IdNvic = SERCOM2_IRQn;
    244e:	230b      	movs	r3, #11
    clockId = GCM_SERCOM2_CORE;
    2450:	2216      	movs	r2, #22
    2452:	e7da      	b.n	240a <_ZN6SERCOM13initClockNVICEv+0x32>
    IdNvic = SERCOM3_IRQn;
    2454:	230c      	movs	r3, #12
    clockId = GCM_SERCOM3_CORE;
    2456:	2217      	movs	r2, #23
    2458:	e7d7      	b.n	240a <_ZN6SERCOM13initClockNVICEv+0x32>
    IdNvic = SERCOM4_IRQn;
    245a:	230d      	movs	r3, #13
    clockId = GCM_SERCOM4_CORE;
    245c:	2218      	movs	r2, #24
    245e:	e7d4      	b.n	240a <_ZN6SERCOM13initClockNVICEv+0x32>
    2460:	42000800 	.word	0x42000800
    2464:	42000c00 	.word	0x42000c00
    2468:	42001000 	.word	0x42001000
    246c:	42001400 	.word	0x42001400
    2470:	42001800 	.word	0x42001800
    2474:	42001c00 	.word	0x42001c00
    2478:	e000e100 	.word	0xe000e100
    247c:	40000c00 	.word	0x40000c00

00002480 <_ZN6SERCOM8initUARTE14SercomUartMode20SercomUartSampleRatem>:
{
    2480:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2482:	0004      	movs	r4, r0
    2484:	0016      	movs	r6, r2
    2486:	000f      	movs	r7, r1
    2488:	001d      	movs	r5, r3
  initClockNVIC();
    248a:	f7ff ffa5 	bl	23d8 <_ZN6SERCOM13initClockNVICEv>
  resetUART();
    248e:	0020      	movs	r0, r4
    2490:	f7ff ff4c 	bl	232c <_ZN6SERCOM9resetUARTEv>
  sercom->USART.CTRLA.reg =	SERCOM_USART_CTRLA_MODE(mode) |
    2494:	221c      	movs	r2, #28
    2496:	00bb      	lsls	r3, r7, #2
    2498:	4013      	ands	r3, r2
                SERCOM_USART_CTRLA_SAMPR(sampleRate);
    249a:	0772      	lsls	r2, r6, #29
  sercom->USART.CTRLA.reg =	SERCOM_USART_CTRLA_MODE(mode) |
    249c:	6824      	ldr	r4, [r4, #0]
                SERCOM_USART_CTRLA_SAMPR(sampleRate);
    249e:	0c12      	lsrs	r2, r2, #16
  sercom->USART.CTRLA.reg =	SERCOM_USART_CTRLA_MODE(mode) |
    24a0:	4313      	orrs	r3, r2
    24a2:	6023      	str	r3, [r4, #0]
  sercom->USART.INTENSET.reg =	SERCOM_USART_INTENSET_RXC |  //Received complete
    24a4:	2384      	movs	r3, #132	; 0x84
    24a6:	75a3      	strb	r3, [r4, #22]
  if ( mode == UART_INT_CLOCK )
    24a8:	2f01      	cmp	r7, #1
    24aa:	d118      	bne.n	24de <_ZN6SERCOM8initUARTE14SercomUartMode20SercomUartSampleRatem+0x5e>
      sampleRateValue = 16;
    24ac:	2110      	movs	r1, #16
    if (sampleRate == SAMPLE_RATE_x16) {
    24ae:	2e01      	cmp	r6, #1
    24b0:	d000      	beq.n	24b4 <_ZN6SERCOM8initUARTE14SercomUartMode20SercomUartSampleRatem+0x34>
      sampleRateValue = 8;
    24b2:	3908      	subs	r1, #8
    uint32_t baudTimes8 = (SystemCoreClock * 8) / (sampleRateValue * baudrate);
    24b4:	4b0a      	ldr	r3, [pc, #40]	; (24e0 <_ZN6SERCOM8initUARTE14SercomUartMode20SercomUartSampleRatem+0x60>)
    24b6:	4369      	muls	r1, r5
    24b8:	6818      	ldr	r0, [r3, #0]
    24ba:	00c0      	lsls	r0, r0, #3
    24bc:	f000 f81c 	bl	24f8 <__udivsi3>
    sercom->USART.BAUD.FRAC.FP   = (baudTimes8 % 8);
    24c0:	2207      	movs	r2, #7
    24c2:	89a3      	ldrh	r3, [r4, #12]
    24c4:	4002      	ands	r2, r0
    24c6:	04db      	lsls	r3, r3, #19
    24c8:	0352      	lsls	r2, r2, #13
    24ca:	0cdb      	lsrs	r3, r3, #19
    24cc:	4313      	orrs	r3, r2
    24ce:	81a3      	strh	r3, [r4, #12]
    sercom->USART.BAUD.FRAC.BAUD = (baudTimes8 / 8);
    24d0:	0403      	lsls	r3, r0, #16
    24d2:	89a0      	ldrh	r0, [r4, #12]
    24d4:	0cdb      	lsrs	r3, r3, #19
    24d6:	0b40      	lsrs	r0, r0, #13
    24d8:	0340      	lsls	r0, r0, #13
    24da:	4318      	orrs	r0, r3
    24dc:	81a0      	strh	r0, [r4, #12]
}
    24de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    24e0:	20000014 	.word	0x20000014

000024e4 <__gnu_thumb1_case_uqi>:
    24e4:	b402      	push	{r1}
    24e6:	4671      	mov	r1, lr
    24e8:	0849      	lsrs	r1, r1, #1
    24ea:	0049      	lsls	r1, r1, #1
    24ec:	5c09      	ldrb	r1, [r1, r0]
    24ee:	0049      	lsls	r1, r1, #1
    24f0:	448e      	add	lr, r1
    24f2:	bc02      	pop	{r1}
    24f4:	4770      	bx	lr
    24f6:	46c0      	nop			; (mov r8, r8)

000024f8 <__udivsi3>:
    24f8:	2200      	movs	r2, #0
    24fa:	0843      	lsrs	r3, r0, #1
    24fc:	428b      	cmp	r3, r1
    24fe:	d374      	bcc.n	25ea <__udivsi3+0xf2>
    2500:	0903      	lsrs	r3, r0, #4
    2502:	428b      	cmp	r3, r1
    2504:	d35f      	bcc.n	25c6 <__udivsi3+0xce>
    2506:	0a03      	lsrs	r3, r0, #8
    2508:	428b      	cmp	r3, r1
    250a:	d344      	bcc.n	2596 <__udivsi3+0x9e>
    250c:	0b03      	lsrs	r3, r0, #12
    250e:	428b      	cmp	r3, r1
    2510:	d328      	bcc.n	2564 <__udivsi3+0x6c>
    2512:	0c03      	lsrs	r3, r0, #16
    2514:	428b      	cmp	r3, r1
    2516:	d30d      	bcc.n	2534 <__udivsi3+0x3c>
    2518:	22ff      	movs	r2, #255	; 0xff
    251a:	0209      	lsls	r1, r1, #8
    251c:	ba12      	rev	r2, r2
    251e:	0c03      	lsrs	r3, r0, #16
    2520:	428b      	cmp	r3, r1
    2522:	d302      	bcc.n	252a <__udivsi3+0x32>
    2524:	1212      	asrs	r2, r2, #8
    2526:	0209      	lsls	r1, r1, #8
    2528:	d065      	beq.n	25f6 <__udivsi3+0xfe>
    252a:	0b03      	lsrs	r3, r0, #12
    252c:	428b      	cmp	r3, r1
    252e:	d319      	bcc.n	2564 <__udivsi3+0x6c>
    2530:	e000      	b.n	2534 <__udivsi3+0x3c>
    2532:	0a09      	lsrs	r1, r1, #8
    2534:	0bc3      	lsrs	r3, r0, #15
    2536:	428b      	cmp	r3, r1
    2538:	d301      	bcc.n	253e <__udivsi3+0x46>
    253a:	03cb      	lsls	r3, r1, #15
    253c:	1ac0      	subs	r0, r0, r3
    253e:	4152      	adcs	r2, r2
    2540:	0b83      	lsrs	r3, r0, #14
    2542:	428b      	cmp	r3, r1
    2544:	d301      	bcc.n	254a <__udivsi3+0x52>
    2546:	038b      	lsls	r3, r1, #14
    2548:	1ac0      	subs	r0, r0, r3
    254a:	4152      	adcs	r2, r2
    254c:	0b43      	lsrs	r3, r0, #13
    254e:	428b      	cmp	r3, r1
    2550:	d301      	bcc.n	2556 <__udivsi3+0x5e>
    2552:	034b      	lsls	r3, r1, #13
    2554:	1ac0      	subs	r0, r0, r3
    2556:	4152      	adcs	r2, r2
    2558:	0b03      	lsrs	r3, r0, #12
    255a:	428b      	cmp	r3, r1
    255c:	d301      	bcc.n	2562 <__udivsi3+0x6a>
    255e:	030b      	lsls	r3, r1, #12
    2560:	1ac0      	subs	r0, r0, r3
    2562:	4152      	adcs	r2, r2
    2564:	0ac3      	lsrs	r3, r0, #11
    2566:	428b      	cmp	r3, r1
    2568:	d301      	bcc.n	256e <__udivsi3+0x76>
    256a:	02cb      	lsls	r3, r1, #11
    256c:	1ac0      	subs	r0, r0, r3
    256e:	4152      	adcs	r2, r2
    2570:	0a83      	lsrs	r3, r0, #10
    2572:	428b      	cmp	r3, r1
    2574:	d301      	bcc.n	257a <__udivsi3+0x82>
    2576:	028b      	lsls	r3, r1, #10
    2578:	1ac0      	subs	r0, r0, r3
    257a:	4152      	adcs	r2, r2
    257c:	0a43      	lsrs	r3, r0, #9
    257e:	428b      	cmp	r3, r1
    2580:	d301      	bcc.n	2586 <__udivsi3+0x8e>
    2582:	024b      	lsls	r3, r1, #9
    2584:	1ac0      	subs	r0, r0, r3
    2586:	4152      	adcs	r2, r2
    2588:	0a03      	lsrs	r3, r0, #8
    258a:	428b      	cmp	r3, r1
    258c:	d301      	bcc.n	2592 <__udivsi3+0x9a>
    258e:	020b      	lsls	r3, r1, #8
    2590:	1ac0      	subs	r0, r0, r3
    2592:	4152      	adcs	r2, r2
    2594:	d2cd      	bcs.n	2532 <__udivsi3+0x3a>
    2596:	09c3      	lsrs	r3, r0, #7
    2598:	428b      	cmp	r3, r1
    259a:	d301      	bcc.n	25a0 <__udivsi3+0xa8>
    259c:	01cb      	lsls	r3, r1, #7
    259e:	1ac0      	subs	r0, r0, r3
    25a0:	4152      	adcs	r2, r2
    25a2:	0983      	lsrs	r3, r0, #6
    25a4:	428b      	cmp	r3, r1
    25a6:	d301      	bcc.n	25ac <__udivsi3+0xb4>
    25a8:	018b      	lsls	r3, r1, #6
    25aa:	1ac0      	subs	r0, r0, r3
    25ac:	4152      	adcs	r2, r2
    25ae:	0943      	lsrs	r3, r0, #5
    25b0:	428b      	cmp	r3, r1
    25b2:	d301      	bcc.n	25b8 <__udivsi3+0xc0>
    25b4:	014b      	lsls	r3, r1, #5
    25b6:	1ac0      	subs	r0, r0, r3
    25b8:	4152      	adcs	r2, r2
    25ba:	0903      	lsrs	r3, r0, #4
    25bc:	428b      	cmp	r3, r1
    25be:	d301      	bcc.n	25c4 <__udivsi3+0xcc>
    25c0:	010b      	lsls	r3, r1, #4
    25c2:	1ac0      	subs	r0, r0, r3
    25c4:	4152      	adcs	r2, r2
    25c6:	08c3      	lsrs	r3, r0, #3
    25c8:	428b      	cmp	r3, r1
    25ca:	d301      	bcc.n	25d0 <__udivsi3+0xd8>
    25cc:	00cb      	lsls	r3, r1, #3
    25ce:	1ac0      	subs	r0, r0, r3
    25d0:	4152      	adcs	r2, r2
    25d2:	0883      	lsrs	r3, r0, #2
    25d4:	428b      	cmp	r3, r1
    25d6:	d301      	bcc.n	25dc <__udivsi3+0xe4>
    25d8:	008b      	lsls	r3, r1, #2
    25da:	1ac0      	subs	r0, r0, r3
    25dc:	4152      	adcs	r2, r2
    25de:	0843      	lsrs	r3, r0, #1
    25e0:	428b      	cmp	r3, r1
    25e2:	d301      	bcc.n	25e8 <__udivsi3+0xf0>
    25e4:	004b      	lsls	r3, r1, #1
    25e6:	1ac0      	subs	r0, r0, r3
    25e8:	4152      	adcs	r2, r2
    25ea:	1a41      	subs	r1, r0, r1
    25ec:	d200      	bcs.n	25f0 <__udivsi3+0xf8>
    25ee:	4601      	mov	r1, r0
    25f0:	4152      	adcs	r2, r2
    25f2:	4610      	mov	r0, r2
    25f4:	4770      	bx	lr
    25f6:	e7ff      	b.n	25f8 <__udivsi3+0x100>
    25f8:	b501      	push	{r0, lr}
    25fa:	2000      	movs	r0, #0
    25fc:	f000 f806 	bl	260c <__aeabi_idiv0>
    2600:	bd02      	pop	{r1, pc}
    2602:	46c0      	nop			; (mov r8, r8)

00002604 <__aeabi_uidivmod>:
    2604:	2900      	cmp	r1, #0
    2606:	d0f7      	beq.n	25f8 <__udivsi3+0x100>
    2608:	e776      	b.n	24f8 <__udivsi3>
    260a:	4770      	bx	lr

0000260c <__aeabi_idiv0>:
    260c:	4770      	bx	lr
    260e:	46c0      	nop			; (mov r8, r8)

00002610 <__libc_init_array>:
    2610:	b570      	push	{r4, r5, r6, lr}
    2612:	2600      	movs	r6, #0
    2614:	4d0c      	ldr	r5, [pc, #48]	; (2648 <__libc_init_array+0x38>)
    2616:	4c0d      	ldr	r4, [pc, #52]	; (264c <__libc_init_array+0x3c>)
    2618:	1b64      	subs	r4, r4, r5
    261a:	10a4      	asrs	r4, r4, #2
    261c:	42a6      	cmp	r6, r4
    261e:	d109      	bne.n	2634 <__libc_init_array+0x24>
    2620:	2600      	movs	r6, #0
    2622:	f000 f911 	bl	2848 <_init>
    2626:	4d0a      	ldr	r5, [pc, #40]	; (2650 <__libc_init_array+0x40>)
    2628:	4c0a      	ldr	r4, [pc, #40]	; (2654 <__libc_init_array+0x44>)
    262a:	1b64      	subs	r4, r4, r5
    262c:	10a4      	asrs	r4, r4, #2
    262e:	42a6      	cmp	r6, r4
    2630:	d105      	bne.n	263e <__libc_init_array+0x2e>
    2632:	bd70      	pop	{r4, r5, r6, pc}
    2634:	00b3      	lsls	r3, r6, #2
    2636:	58eb      	ldr	r3, [r5, r3]
    2638:	4798      	blx	r3
    263a:	3601      	adds	r6, #1
    263c:	e7ee      	b.n	261c <__libc_init_array+0xc>
    263e:	00b3      	lsls	r3, r6, #2
    2640:	58eb      	ldr	r3, [r5, r3]
    2642:	4798      	blx	r3
    2644:	3601      	adds	r6, #1
    2646:	e7f2      	b.n	262e <__libc_init_array+0x1e>
    2648:	2000007c 	.word	0x2000007c
    264c:	2000007c 	.word	0x2000007c
    2650:	2000007c 	.word	0x2000007c
    2654:	2000008c 	.word	0x2000008c

00002658 <malloc>:
    2658:	b510      	push	{r4, lr}
    265a:	4b03      	ldr	r3, [pc, #12]	; (2668 <malloc+0x10>)
    265c:	0001      	movs	r1, r0
    265e:	6818      	ldr	r0, [r3, #0]
    2660:	f000 f86a 	bl	2738 <_malloc_r>
    2664:	bd10      	pop	{r4, pc}
    2666:	46c0      	nop			; (mov r8, r8)
    2668:	20000018 	.word	0x20000018

0000266c <free>:
    266c:	b510      	push	{r4, lr}
    266e:	4b03      	ldr	r3, [pc, #12]	; (267c <free+0x10>)
    2670:	0001      	movs	r1, r0
    2672:	6818      	ldr	r0, [r3, #0]
    2674:	f000 f816 	bl	26a4 <_free_r>
    2678:	bd10      	pop	{r4, pc}
    267a:	46c0      	nop			; (mov r8, r8)
    267c:	20000018 	.word	0x20000018

00002680 <memcpy>:
    2680:	2300      	movs	r3, #0
    2682:	b510      	push	{r4, lr}
    2684:	429a      	cmp	r2, r3
    2686:	d100      	bne.n	268a <memcpy+0xa>
    2688:	bd10      	pop	{r4, pc}
    268a:	5ccc      	ldrb	r4, [r1, r3]
    268c:	54c4      	strb	r4, [r0, r3]
    268e:	3301      	adds	r3, #1
    2690:	e7f8      	b.n	2684 <memcpy+0x4>

00002692 <memset>:
    2692:	0003      	movs	r3, r0
    2694:	1882      	adds	r2, r0, r2
    2696:	4293      	cmp	r3, r2
    2698:	d100      	bne.n	269c <memset+0xa>
    269a:	4770      	bx	lr
    269c:	7019      	strb	r1, [r3, #0]
    269e:	3301      	adds	r3, #1
    26a0:	e7f9      	b.n	2696 <memset+0x4>
	...

000026a4 <_free_r>:
    26a4:	b570      	push	{r4, r5, r6, lr}
    26a6:	0005      	movs	r5, r0
    26a8:	2900      	cmp	r1, #0
    26aa:	d010      	beq.n	26ce <_free_r+0x2a>
    26ac:	1f0c      	subs	r4, r1, #4
    26ae:	6823      	ldr	r3, [r4, #0]
    26b0:	2b00      	cmp	r3, #0
    26b2:	da00      	bge.n	26b6 <_free_r+0x12>
    26b4:	18e4      	adds	r4, r4, r3
    26b6:	0028      	movs	r0, r5
    26b8:	f000 f8b5 	bl	2826 <__malloc_lock>
    26bc:	4a1d      	ldr	r2, [pc, #116]	; (2734 <_free_r+0x90>)
    26be:	6813      	ldr	r3, [r2, #0]
    26c0:	2b00      	cmp	r3, #0
    26c2:	d105      	bne.n	26d0 <_free_r+0x2c>
    26c4:	6063      	str	r3, [r4, #4]
    26c6:	6014      	str	r4, [r2, #0]
    26c8:	0028      	movs	r0, r5
    26ca:	f000 f8ad 	bl	2828 <__malloc_unlock>
    26ce:	bd70      	pop	{r4, r5, r6, pc}
    26d0:	42a3      	cmp	r3, r4
    26d2:	d909      	bls.n	26e8 <_free_r+0x44>
    26d4:	6821      	ldr	r1, [r4, #0]
    26d6:	1860      	adds	r0, r4, r1
    26d8:	4283      	cmp	r3, r0
    26da:	d1f3      	bne.n	26c4 <_free_r+0x20>
    26dc:	6818      	ldr	r0, [r3, #0]
    26de:	685b      	ldr	r3, [r3, #4]
    26e0:	1841      	adds	r1, r0, r1
    26e2:	6021      	str	r1, [r4, #0]
    26e4:	e7ee      	b.n	26c4 <_free_r+0x20>
    26e6:	0013      	movs	r3, r2
    26e8:	685a      	ldr	r2, [r3, #4]
    26ea:	2a00      	cmp	r2, #0
    26ec:	d001      	beq.n	26f2 <_free_r+0x4e>
    26ee:	42a2      	cmp	r2, r4
    26f0:	d9f9      	bls.n	26e6 <_free_r+0x42>
    26f2:	6819      	ldr	r1, [r3, #0]
    26f4:	1858      	adds	r0, r3, r1
    26f6:	42a0      	cmp	r0, r4
    26f8:	d10b      	bne.n	2712 <_free_r+0x6e>
    26fa:	6820      	ldr	r0, [r4, #0]
    26fc:	1809      	adds	r1, r1, r0
    26fe:	1858      	adds	r0, r3, r1
    2700:	6019      	str	r1, [r3, #0]
    2702:	4282      	cmp	r2, r0
    2704:	d1e0      	bne.n	26c8 <_free_r+0x24>
    2706:	6810      	ldr	r0, [r2, #0]
    2708:	6852      	ldr	r2, [r2, #4]
    270a:	1841      	adds	r1, r0, r1
    270c:	6019      	str	r1, [r3, #0]
    270e:	605a      	str	r2, [r3, #4]
    2710:	e7da      	b.n	26c8 <_free_r+0x24>
    2712:	42a0      	cmp	r0, r4
    2714:	d902      	bls.n	271c <_free_r+0x78>
    2716:	230c      	movs	r3, #12
    2718:	602b      	str	r3, [r5, #0]
    271a:	e7d5      	b.n	26c8 <_free_r+0x24>
    271c:	6821      	ldr	r1, [r4, #0]
    271e:	1860      	adds	r0, r4, r1
    2720:	4282      	cmp	r2, r0
    2722:	d103      	bne.n	272c <_free_r+0x88>
    2724:	6810      	ldr	r0, [r2, #0]
    2726:	6852      	ldr	r2, [r2, #4]
    2728:	1841      	adds	r1, r0, r1
    272a:	6021      	str	r1, [r4, #0]
    272c:	6062      	str	r2, [r4, #4]
    272e:	605c      	str	r4, [r3, #4]
    2730:	e7ca      	b.n	26c8 <_free_r+0x24>
    2732:	46c0      	nop			; (mov r8, r8)
    2734:	20000b78 	.word	0x20000b78

00002738 <_malloc_r>:
    2738:	2303      	movs	r3, #3
    273a:	b570      	push	{r4, r5, r6, lr}
    273c:	1ccd      	adds	r5, r1, #3
    273e:	439d      	bics	r5, r3
    2740:	3508      	adds	r5, #8
    2742:	0006      	movs	r6, r0
    2744:	2d0c      	cmp	r5, #12
    2746:	d21e      	bcs.n	2786 <_malloc_r+0x4e>
    2748:	250c      	movs	r5, #12
    274a:	42a9      	cmp	r1, r5
    274c:	d81d      	bhi.n	278a <_malloc_r+0x52>
    274e:	0030      	movs	r0, r6
    2750:	f000 f869 	bl	2826 <__malloc_lock>
    2754:	4a25      	ldr	r2, [pc, #148]	; (27ec <_malloc_r+0xb4>)
    2756:	6814      	ldr	r4, [r2, #0]
    2758:	0021      	movs	r1, r4
    275a:	2900      	cmp	r1, #0
    275c:	d119      	bne.n	2792 <_malloc_r+0x5a>
    275e:	4c24      	ldr	r4, [pc, #144]	; (27f0 <_malloc_r+0xb8>)
    2760:	6823      	ldr	r3, [r4, #0]
    2762:	2b00      	cmp	r3, #0
    2764:	d103      	bne.n	276e <_malloc_r+0x36>
    2766:	0030      	movs	r0, r6
    2768:	f000 f844 	bl	27f4 <_sbrk_r>
    276c:	6020      	str	r0, [r4, #0]
    276e:	0029      	movs	r1, r5
    2770:	0030      	movs	r0, r6
    2772:	f000 f83f 	bl	27f4 <_sbrk_r>
    2776:	1c43      	adds	r3, r0, #1
    2778:	d12c      	bne.n	27d4 <_malloc_r+0x9c>
    277a:	230c      	movs	r3, #12
    277c:	0030      	movs	r0, r6
    277e:	6033      	str	r3, [r6, #0]
    2780:	f000 f852 	bl	2828 <__malloc_unlock>
    2784:	e003      	b.n	278e <_malloc_r+0x56>
    2786:	2d00      	cmp	r5, #0
    2788:	dadf      	bge.n	274a <_malloc_r+0x12>
    278a:	230c      	movs	r3, #12
    278c:	6033      	str	r3, [r6, #0]
    278e:	2000      	movs	r0, #0
    2790:	bd70      	pop	{r4, r5, r6, pc}
    2792:	680b      	ldr	r3, [r1, #0]
    2794:	1b5b      	subs	r3, r3, r5
    2796:	d41a      	bmi.n	27ce <_malloc_r+0x96>
    2798:	2b0b      	cmp	r3, #11
    279a:	d903      	bls.n	27a4 <_malloc_r+0x6c>
    279c:	600b      	str	r3, [r1, #0]
    279e:	18cc      	adds	r4, r1, r3
    27a0:	6025      	str	r5, [r4, #0]
    27a2:	e003      	b.n	27ac <_malloc_r+0x74>
    27a4:	428c      	cmp	r4, r1
    27a6:	d10e      	bne.n	27c6 <_malloc_r+0x8e>
    27a8:	6863      	ldr	r3, [r4, #4]
    27aa:	6013      	str	r3, [r2, #0]
    27ac:	0030      	movs	r0, r6
    27ae:	f000 f83b 	bl	2828 <__malloc_unlock>
    27b2:	0020      	movs	r0, r4
    27b4:	2207      	movs	r2, #7
    27b6:	300b      	adds	r0, #11
    27b8:	1d23      	adds	r3, r4, #4
    27ba:	4390      	bics	r0, r2
    27bc:	1ac3      	subs	r3, r0, r3
    27be:	d0e7      	beq.n	2790 <_malloc_r+0x58>
    27c0:	425a      	negs	r2, r3
    27c2:	50e2      	str	r2, [r4, r3]
    27c4:	e7e4      	b.n	2790 <_malloc_r+0x58>
    27c6:	684b      	ldr	r3, [r1, #4]
    27c8:	6063      	str	r3, [r4, #4]
    27ca:	000c      	movs	r4, r1
    27cc:	e7ee      	b.n	27ac <_malloc_r+0x74>
    27ce:	000c      	movs	r4, r1
    27d0:	6849      	ldr	r1, [r1, #4]
    27d2:	e7c2      	b.n	275a <_malloc_r+0x22>
    27d4:	2303      	movs	r3, #3
    27d6:	1cc4      	adds	r4, r0, #3
    27d8:	439c      	bics	r4, r3
    27da:	42a0      	cmp	r0, r4
    27dc:	d0e0      	beq.n	27a0 <_malloc_r+0x68>
    27de:	1a21      	subs	r1, r4, r0
    27e0:	0030      	movs	r0, r6
    27e2:	f000 f807 	bl	27f4 <_sbrk_r>
    27e6:	1c43      	adds	r3, r0, #1
    27e8:	d1da      	bne.n	27a0 <_malloc_r+0x68>
    27ea:	e7c6      	b.n	277a <_malloc_r+0x42>
    27ec:	20000b78 	.word	0x20000b78
    27f0:	20000b7c 	.word	0x20000b7c

000027f4 <_sbrk_r>:
    27f4:	2300      	movs	r3, #0
    27f6:	b570      	push	{r4, r5, r6, lr}
    27f8:	4c06      	ldr	r4, [pc, #24]	; (2814 <_sbrk_r+0x20>)
    27fa:	0005      	movs	r5, r0
    27fc:	0008      	movs	r0, r1
    27fe:	6023      	str	r3, [r4, #0]
    2800:	f000 f814 	bl	282c <_sbrk>
    2804:	1c43      	adds	r3, r0, #1
    2806:	d103      	bne.n	2810 <_sbrk_r+0x1c>
    2808:	6823      	ldr	r3, [r4, #0]
    280a:	2b00      	cmp	r3, #0
    280c:	d000      	beq.n	2810 <_sbrk_r+0x1c>
    280e:	602b      	str	r3, [r5, #0]
    2810:	bd70      	pop	{r4, r5, r6, pc}
    2812:	46c0      	nop			; (mov r8, r8)
    2814:	20000b84 	.word	0x20000b84

00002818 <strlen>:
    2818:	2300      	movs	r3, #0
    281a:	5cc2      	ldrb	r2, [r0, r3]
    281c:	3301      	adds	r3, #1
    281e:	2a00      	cmp	r2, #0
    2820:	d1fb      	bne.n	281a <strlen+0x2>
    2822:	1e58      	subs	r0, r3, #1
    2824:	4770      	bx	lr

00002826 <__malloc_lock>:
    2826:	4770      	bx	lr

00002828 <__malloc_unlock>:
    2828:	4770      	bx	lr
	...

0000282c <_sbrk>:
    282c:	4a04      	ldr	r2, [pc, #16]	; (2840 <_sbrk+0x14>)
    282e:	6813      	ldr	r3, [r2, #0]
    2830:	2b00      	cmp	r3, #0
    2832:	d003      	beq.n	283c <_sbrk+0x10>
    2834:	1818      	adds	r0, r3, r0
    2836:	6010      	str	r0, [r2, #0]
    2838:	0018      	movs	r0, r3
    283a:	4770      	bx	lr
    283c:	4b01      	ldr	r3, [pc, #4]	; (2844 <_sbrk+0x18>)
    283e:	e7f9      	b.n	2834 <_sbrk+0x8>
    2840:	20000b80 	.word	0x20000b80
    2844:	20000b88 	.word	0x20000b88

00002848 <_init>:
    2848:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    284a:	46c0      	nop			; (mov r8, r8)
    284c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    284e:	bc08      	pop	{r3}
    2850:	469e      	mov	lr, r3
    2852:	4770      	bx	lr

00002854 <_fini>:
    2854:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2856:	46c0      	nop			; (mov r8, r8)
    2858:	bcf8      	pop	{r3, r4, r5, r6, r7}
    285a:	bc08      	pop	{r3}
    285c:	469e      	mov	lr, r3
    285e:	4770      	bx	lr
    2860:	77207469 	.word	0x77207469
    2864:	736b726f 	.word	0x736b726f
    2868:	00          	.byte	0x00
    2869:	0d          	.byte	0x0d
    286a:	000a      	.short	0x000a

0000286c <_ZTV4Uart>:
	...
    2874:	08e1 0000 032d 0000 0807 0000 07c3 0000     ....-...........
    2884:	07dd 0000 0995 0000 05a5 0000 0595 0000     ................
    2894:	0629 0000 05bf 0000 0591 0000               )...........

000028a0 <_ZTV7Serial_>:
	...
    28a8:	0a85 0000 0cc5 0000 0a81 0000 0ca9 0000     ................
    28b8:	0c89 0000 0d01 0000 0ce5 0000 0cb7 0000     ................
    28c8:	0a99 0000 09e1 0000 0bd1 0000 0a19 0000     ................
    28d8:	0a6d 0000 fff0 ffff 0000 0000 0c79 0000     m...........y...
    28e8:	0bc1 0000 09e5 0000 0a71 0000 0a5d 0000     ........q...]...

000028f8 <_ZTV26DoubleBufferedEPOutHandler>:
	...
    2900:	1079 0000 132f 0000 1317 0000 12f5 0000     y.../...........
    2910:	0edd 0000 0edf 0000 0fcd 0000               ............

0000291c <_ZL14STRING_PRODUCT>:
    291c:	7241 7564 6e69 206f 655a 6f72 0000          Arduino Zero..

0000292a <_ZL15STRING_LANGUAGE>:
    292a:	0304 0409                                   ....

0000292e <_ZL19STRING_MANUFACTURER>:
    292e:	7241 7564 6e69 206f 4c4c 0043               Arduino LLC.

0000293a <_ZL21USB_DeviceDescriptorB>:
    293a:	0112 0200 02ef 4001 2341 804d 0100 0201     .......@A#M.....
    294a:	0103                                        ..

0000294c <g_APinDescription>:
    294c:	0000 0000 000b 0000 0002 0000 0004 0000     ................
    295c:	00ff ffff ffff 000b 0000 0000 000a 0000     ................
    296c:	0002 0000 0004 0000 00ff ffff ffff 000a     ................
    297c:	0000 0000 000e 0000 0008 0000 0004 0000     ................
    298c:	00ff ffff ffff 000e 0000 0000 0009 0000     ................
    299c:	0004 0000 001c 0000 00ff 0001 0001 0009     ................
    29ac:	0000 0000 0008 0000 0004 0000 001c 0000     ................
    29bc:	00ff 0000 0000 0010 0000 0000 000f 0000     ................
    29cc:	0004 0000 001c 0000 00ff 0301 0301 000f     ................
    29dc:	0000 0000 0014 0000 0005 0000 002c 0000     ............,...
    29ec:	00ff 0002 0002 0004 0000 0000 0015 0000     ................
    29fc:	0005 0000 002c 0000 00ff 0003 0003 0005     ....,...........
    2a0c:	0000 0000 0006 0000 0004 0000 001c 0000     ................
    2a1c:	00ff 0100 0100 0006 0000 0000 0007 0000     ................
    2a2c:	0004 0000 001c 0000 00ff 0101 0101 0007     ................
    2a3c:	0000 0000 0012 0000 0004 0000 001c 0000     ................
    2a4c:	00ff 0300 0300 0002 0000 0000 0010 0000     ................
    2a5c:	0004 0000 001c 0000 00ff 0200 0200 0000     ................
    2a6c:	0000 0000 0013 0000 0005 0000 002c 0000     ............,...
    2a7c:	00ff 0003 0003 0003 0000 0000 0011 0000     ................
    2a8c:	0004 0000 001c 0000 00ff 0201 0201 0001     ................
    2a9c:	0000 0000 0002 0000 0001 0000 0002 0000     ................
    2aac:	0000 ffff ffff 0002 0001 0000 0008 0000     ................
    2abc:	0001 0000 0018 0000 0002 0400 0400 0008     ................
    2acc:	0001 0000 0009 0000 0001 0000 0018 0000     ................
    2adc:	0003 0401 0401 0009 0000 0000 0004 0000     ................
    2aec:	0001 0000 0000 0000 0004 ffff ffff 0004     ................
    2afc:	0000 0000 0005 0000 0001 0000 0000 0000     ................
    2b0c:	0005 ffff ffff 0005 0001 0000 0002 0000     ................
    2b1c:	0001 0000 0000 0000 000a ffff ffff 0002     ................
    2b2c:	0000 0000 0016 0000 0002 0000 0004 0000     ................
    2b3c:	00ff ffff ffff 0006 0000 0000 0017 0000     ................
    2b4c:	0002 0000 0004 0000 00ff ffff ffff 0007     ................
    2b5c:	0000 0000 000c 0000 0003 0000 0004 0000     ................
    2b6c:	00ff ffff ffff 000c 0001 0000 000a 0000     ................
    2b7c:	0003 0000 0004 0000 00ff ffff ffff 000a     ................
    2b8c:	0001 0000 000b 0000 0003 0000 0004 0000     ................
    2b9c:	00ff ffff ffff 000b 0001 0000 0003 0000     ................
    2bac:	000b 0000 0004 0000 00ff ffff ffff 00ff     ................
    2bbc:	0000 0000 001b 0000 000b 0000 0004 0000     ................
    2bcc:	00ff ffff ffff 00ff 0000 0000 001c 0000     ................
    2bdc:	0006 0000 0000 0000 00ff ffff ffff 00ff     ................
    2bec:	0000 0000 0018 0000 0006 0000 0000 0000     ................
    2bfc:	00ff ffff ffff 00ff 0000 0000 0019 0000     ................
    2c0c:	0006 0000 0000 0000 00ff ffff ffff 00ff     ................
    2c1c:	0001 0000 0016 0000 0003 0000 0000 0000     ................
    2c2c:	00ff ffff ffff 00ff 0001 0000 0017 0000     ................
    2c3c:	0003 0000 0000 0000 00ff ffff ffff 00ff     ................
    2c4c:	0000 0000 0016 0000 0002 0000 0000 0000     ................
    2c5c:	00ff ffff ffff 00ff 0000 0000 0017 0000     ................
    2c6c:	0002 0000 0000 0000 00ff ffff ffff 00ff     ................
    2c7c:	0000 0000 0013 0000 0002 0000 0000 0000     ................
    2c8c:	00ff ffff ffff 00ff 0000 0000 0010 0000     ................
    2c9c:	0002 0000 0000 0000 00ff ffff ffff 00ff     ................
    2cac:	0000 0000 0012 0000 0002 0000 0000 0000     ................
    2cbc:	00ff ffff ffff 00ff 0000 0000 0011 0000     ................
    2ccc:	0002 0000 0000 0000 00ff ffff ffff 00ff     ................
    2cdc:	0000 0000 000d 0000 0004 0000 000c 0000     ................
    2cec:	00ff 0001 ffff 000d 0000 0000 0015 0000     ................
    2cfc:	0005 0000 000c 0000 00ff 0003 ffff 00ff     ................
    2d0c:	0000 0000 0006 0000 0004 0000 000c 0000     ................
    2d1c:	00ff 0100 ffff 00ff 0000 0000 0007 0000     ................
    2d2c:	0004 0000 000c 0000 00ff 0101 ffff 00ff     ................
    2d3c:	0000 0000 0003 0000 0001 0000 0002 0000     ................
    2d4c:	00ff ffff ffff 00ff 0000 0000 0002 0000     ................
    2d5c:	0001 0000 0002 0000 0014 ffff ffff 0002     ................
    2d6c:	0000 0000 001e 0000 0004 0000 0006 0000     ................
    2d7c:	00ff ffff 0100 000a 0000 0000 001f 0000     ................
    2d8c:	0004 0000 0006 0000 00ff ffff 0101 000b     ................

00002d9c <__EH_FRAME_BEGIN__>:
    2d9c:	0000 0000                                   ....
