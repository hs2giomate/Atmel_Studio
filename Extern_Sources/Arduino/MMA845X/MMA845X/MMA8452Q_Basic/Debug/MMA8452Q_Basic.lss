
MMA8452Q_Basic.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00005a3c  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000a0  20000000  00005a3c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000d38  200000a0  00005adc  000200a0  2**2
                  ALLOC
  3 .ARM.attributes 00000028  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY
  4 .comment      00000059  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY
  5 .debug_info   00060ea0  00000000  00000000  00020121  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00006ec7  00000000  00000000  00080fc1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_loc    00008b88  00000000  00000000  00087e88  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_aranges 00000aa0  00000000  00000000  00090a10  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00001680  00000000  00000000  000914b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_macro  000208e3  00000000  00000000  00092b30  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000f120  00000000  00000000  000b3413  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00085677  00000000  00000000  000c2533  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00001f5c  00000000  00000000  00147bac  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:

void *operator new(size_t size) {
  return malloc(size);
}

void *operator new[](size_t size) {
       0:	00 80 00 20 5d 02 00 00 45 02 00 00 45 02 00 00     ... ]...E...E...
	...
      2c:	45 02 00 00 00 00 00 00 00 00 00 00 45 02 00 00     E...........E...
      3c:	b1 02 00 00 45 02 00 00 45 02 00 00 45 02 00 00     ....E...E...E...
      4c:	45 02 00 00 45 02 00 00 45 02 00 00 45 02 00 00     E...E...E...E...
      5c:	49 02 00 00 45 02 00 00 25 27 00 00 45 02 00 00     I...E...%'..E...
      6c:	45 02 00 00 fd 26 00 00 45 02 00 00 35 27 00 00     E....&..E...5'..
      7c:	45 02 00 00 45 02 00 00 45 02 00 00 45 02 00 00     E...E...E...E...
      8c:	45 02 00 00 00 00 00 00 45 02 00 00 45 02 00 00     E.......E...E...
      9c:	45 02 00 00 45 02 00 00 45 02 00 00 45 02 00 00     E...E...E...E...
      ac:	45 02 00 00 00 00 00 00                             E.......

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	200000a0 	.word	0x200000a0
      d4:	00000000 	.word	0x00000000
      d8:	00005a38 	.word	0x00005a38

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	200000a4 	.word	0x200000a4
     108:	00005a38 	.word	0x00005a38
     10c:	20000098 	.word	0x20000098
     110:	00000000 	.word	0x00000000

00000114 <setup>:
// The setup function simply starts serial and initializes the
//  accelerometer.
void setup()
{
 
  SerialUSB.begin(9600);
     114:	2196      	movs	r1, #150	; 0x96
{
     116:	b510      	push	{r4, lr}
  SerialUSB.begin(9600);
     118:	4c09      	ldr	r4, [pc, #36]	; (140 <setup+0x2c>)
     11a:	0189      	lsls	r1, r1, #6
     11c:	0020      	movs	r0, r4
     11e:	f000 fd63 	bl	be8 <_ZN7Serial_5beginEm>
  while (!SerialUSB) {
     122:	0020      	movs	r0, r4
     124:	f000 fd62 	bl	bec <_ZN7Serial_cvbEv>
     128:	2800      	cmp	r0, #0
     12a:	d0fa      	beq.n	122 <setup+0xe>
	  ; // wait for serial port to connect. Needed for native USB port only
  }
  SerialUSB.println("MMA8452Q Test Code!");
     12c:	4905      	ldr	r1, [pc, #20]	; (144 <setup+0x30>)
     12e:	0020      	movs	r0, r4
     130:	f000 f980 	bl	434 <_ZN5Print7printlnEPKc>
  // Choose your adventure! There are a few options when it comes
  // to initializing the MMA8452Q:
  //  1. Default init. This will set the accelerometer up
  //     with a full-scale range of +/-2g, and an output data rate
  //     of 800 Hz (fastest).
  accel.init();
     134:	2200      	movs	r2, #0
     136:	2102      	movs	r1, #2
     138:	4803      	ldr	r0, [pc, #12]	; (148 <setup+0x34>)
     13a:	f002 f87f 	bl	223c <_ZN8MMA8452Q4initE14MMA8452Q_Scale12MMA8452Q_ODR>
  //     data use one of the following options in the second param:
  //     ODR_800, ODR_400, ODR_200, ODR_100, ODR_50, ODR_12,
  //     ODR_6, or ODR_1. 
  //     Sets to 800, 400, 200, 100, 50, 12.5, 6.25, or 1.56 Hz.
  //accel.init(SCALE_8G, ODR_6);
}
     13e:	bd10      	pop	{r4, pc}
     140:	200000e0 	.word	0x200000e0
     144:	00005400 	.word	0x00005400
     148:	200000bc 	.word	0x200000bc

0000014c <_Z21printCalculatedAccelsv>:
// This function demonstrates how to use the accel.cx, accel.cy,
//  and accel.cz variables.
// Before using these variables you must call the accel.read()
//  function!
void printCalculatedAccels()
{ 
     14c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  SerialUSB.print(accel.cx, 3);
     14e:	4f16      	ldr	r7, [pc, #88]	; (1a8 <_Z21printCalculatedAccelsv+0x5c>)
     150:	2603      	movs	r6, #3
     152:	68f8      	ldr	r0, [r7, #12]
     154:	f004 ff9c 	bl	5090 <__aeabi_f2d>
     158:	4c14      	ldr	r4, [pc, #80]	; (1ac <_Z21printCalculatedAccelsv+0x60>)
     15a:	0002      	movs	r2, r0
     15c:	000b      	movs	r3, r1
     15e:	9600      	str	r6, [sp, #0]
     160:	0020      	movs	r0, r4
     162:	f000 fa57 	bl	614 <_ZN5Print5printEdi>
  SerialUSB.print("\t");
     166:	4d12      	ldr	r5, [pc, #72]	; (1b0 <_Z21printCalculatedAccelsv+0x64>)
     168:	0020      	movs	r0, r4
     16a:	0029      	movs	r1, r5
     16c:	f000 f950 	bl	410 <_ZN5Print5printEPKc>
  SerialUSB.print(accel.cy, 3);
     170:	6938      	ldr	r0, [r7, #16]
     172:	f004 ff8d 	bl	5090 <__aeabi_f2d>
     176:	9600      	str	r6, [sp, #0]
     178:	0002      	movs	r2, r0
     17a:	000b      	movs	r3, r1
     17c:	0020      	movs	r0, r4
     17e:	f000 fa49 	bl	614 <_ZN5Print5printEdi>
  SerialUSB.print("\t");
     182:	0029      	movs	r1, r5
     184:	0020      	movs	r0, r4
     186:	f000 f943 	bl	410 <_ZN5Print5printEPKc>
  SerialUSB.print(accel.cz, 3);
     18a:	6978      	ldr	r0, [r7, #20]
     18c:	f004 ff80 	bl	5090 <__aeabi_f2d>
     190:	9600      	str	r6, [sp, #0]
     192:	0002      	movs	r2, r0
     194:	000b      	movs	r3, r1
     196:	0020      	movs	r0, r4
     198:	f000 fa3c 	bl	614 <_ZN5Print5printEdi>
  SerialUSB.print("\t");
     19c:	0029      	movs	r1, r5
     19e:	0020      	movs	r0, r4
     1a0:	f000 f936 	bl	410 <_ZN5Print5printEPKc>
}
     1a4:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
     1a6:	46c0      	nop			; (mov r8, r8)
     1a8:	200000bc 	.word	0x200000bc
     1ac:	200000e0 	.word	0x200000e0
     1b0:	000053c0 	.word	0x000053c0

000001b4 <_Z16printOrientationv>:

// This function demonstrates how to use the accel.readPL()
// function, which reads the portrait/landscape status of the
// sensor.
void printOrientation()
{
     1b4:	b510      	push	{r4, lr}
  // accel.readPL() will return a byte containing information
  // about the orientation of the sensor. It will be either
  // PORTRAIT_U, PORTRAIT_D, LANDSCAPE_R, LANDSCAPE_L, or
  // LOCKOUT.
  byte pl = accel.readPL();
     1b6:	480d      	ldr	r0, [pc, #52]	; (1ec <_Z16printOrientationv+0x38>)
     1b8:	f002 f81b 	bl	21f2 <_ZN8MMA8452Q6readPLEv>
  switch (pl)
     1bc:	2802      	cmp	r0, #2
     1be:	d011      	beq.n	1e4 <_Z16printOrientationv+0x30>
     1c0:	d805      	bhi.n	1ce <_Z16printOrientationv+0x1a>
     1c2:	2800      	cmp	r0, #0
     1c4:	d00c      	beq.n	1e0 <_Z16printOrientationv+0x2c>
  {
  case PORTRAIT_U:
    SerialUSB.print("Portrait Up");
    break;
  case PORTRAIT_D:
    SerialUSB.print("Portrait Down");
     1c6:	490a      	ldr	r1, [pc, #40]	; (1f0 <_Z16printOrientationv+0x3c>)
  switch (pl)
     1c8:	2801      	cmp	r0, #1
     1ca:	d005      	beq.n	1d8 <_Z16printOrientationv+0x24>
    break;
  case LOCKOUT:
    SerialUSB.print("Flat");
    break;
  }
}
     1cc:	bd10      	pop	{r4, pc}
  switch (pl)
     1ce:	2803      	cmp	r0, #3
     1d0:	d00a      	beq.n	1e8 <_Z16printOrientationv+0x34>
    SerialUSB.print("Flat");
     1d2:	4908      	ldr	r1, [pc, #32]	; (1f4 <_Z16printOrientationv+0x40>)
  switch (pl)
     1d4:	2840      	cmp	r0, #64	; 0x40
     1d6:	d1f9      	bne.n	1cc <_Z16printOrientationv+0x18>
    SerialUSB.print("Flat");
     1d8:	4807      	ldr	r0, [pc, #28]	; (1f8 <_Z16printOrientationv+0x44>)
     1da:	f000 f919 	bl	410 <_ZN5Print5printEPKc>
}
     1de:	e7f5      	b.n	1cc <_Z16printOrientationv+0x18>
    SerialUSB.print("Portrait Up");
     1e0:	4906      	ldr	r1, [pc, #24]	; (1fc <_Z16printOrientationv+0x48>)
     1e2:	e7f9      	b.n	1d8 <_Z16printOrientationv+0x24>
    SerialUSB.print("Landscape Right");
     1e4:	4906      	ldr	r1, [pc, #24]	; (200 <_Z16printOrientationv+0x4c>)
     1e6:	e7f7      	b.n	1d8 <_Z16printOrientationv+0x24>
    SerialUSB.print("Landscape Left");
     1e8:	4906      	ldr	r1, [pc, #24]	; (204 <_Z16printOrientationv+0x50>)
     1ea:	e7f5      	b.n	1d8 <_Z16printOrientationv+0x24>
     1ec:	200000bc 	.word	0x200000bc
     1f0:	000053ce 	.word	0x000053ce
     1f4:	000053fb 	.word	0x000053fb
     1f8:	200000e0 	.word	0x200000e0
     1fc:	000053c2 	.word	0x000053c2
     200:	000053dc 	.word	0x000053dc
     204:	000053ec 	.word	0x000053ec

00000208 <loop>:
{
     208:	b510      	push	{r4, lr}
  if (accel.available())
     20a:	4c08      	ldr	r4, [pc, #32]	; (22c <loop+0x24>)
     20c:	0020      	movs	r0, r4
     20e:	f001 ffb5 	bl	217c <_ZN8MMA8452Q9availableEv>
     212:	2800      	cmp	r0, #0
     214:	d009      	beq.n	22a <loop+0x22>
    accel.read();
     216:	0020      	movs	r0, r4
     218:	f002 f864 	bl	22e4 <_ZN8MMA8452Q4readEv>
    printCalculatedAccels();
     21c:	f7ff ff96 	bl	14c <_Z21printCalculatedAccelsv>
    printOrientation();
     220:	f7ff ffc8 	bl	1b4 <_Z16printOrientationv>
    SerialUSB.println(); // Print new line every time.
     224:	4802      	ldr	r0, [pc, #8]	; (230 <loop+0x28>)
     226:	f000 f8fd 	bl	424 <_ZN5Print7printlnEv>
}
     22a:	bd10      	pop	{r4, pc}
     22c:	200000bc 	.word	0x200000bc
     230:	200000e0 	.word	0x200000e0

00000234 <_GLOBAL__sub_I_accel>:
}
     234:	b510      	push	{r4, lr}
MMA8452Q accel;
     236:	211d      	movs	r1, #29
     238:	4801      	ldr	r0, [pc, #4]	; (240 <_GLOBAL__sub_I_accel+0xc>)
     23a:	f001 ff1d 	bl	2078 <_ZN8MMA8452QC1Eh>
}
     23e:	bd10      	pop	{r4, pc}
     240:	200000bc 	.word	0x200000bc

00000244 <Dummy_Handler>:

/* Default empty handler */
void Dummy_Handler(void)
{
#if defined DEBUG
  __BKPT(3);
     244:	be03      	bkpt	0x0003
     246:	e7fe      	b.n	246 <Dummy_Handler+0x2>

00000248 <USB_Handler>:

static void (*usb_isr)(void) = NULL;

void USB_Handler(void)
{
  if (usb_isr)
     248:	4b03      	ldr	r3, [pc, #12]	; (258 <USB_Handler+0x10>)
{
     24a:	b510      	push	{r4, lr}
  if (usb_isr)
     24c:	681b      	ldr	r3, [r3, #0]
     24e:	2b00      	cmp	r3, #0
     250:	d000      	beq.n	254 <USB_Handler+0xc>
    usb_isr();
     252:	4798      	blx	r3
}
     254:	bd10      	pop	{r4, pc}
     256:	46c0      	nop			; (mov r8, r8)
     258:	200000d8 	.word	0x200000d8

0000025c <Reset_Handler>:
{
     25c:	b570      	push	{r4, r5, r6, lr}
  if ((&__data_start__ != &__data_end__) && (pSrc != pDest)) {
     25e:	490f      	ldr	r1, [pc, #60]	; (29c <Reset_Handler+0x40>)
     260:	4c0f      	ldr	r4, [pc, #60]	; (2a0 <Reset_Handler+0x44>)
     262:	42a1      	cmp	r1, r4
     264:	d104      	bne.n	270 <Reset_Handler+0x14>
  SystemInit();
     266:	f000 fa2d 	bl	6c4 <SystemInit>
  main();
     26a:	f000 f88d 	bl	388 <main>
     26e:	e7fe      	b.n	26e <Reset_Handler+0x12>
  if ((&__data_start__ != &__data_end__) && (pSrc != pDest)) {
     270:	4d0c      	ldr	r5, [pc, #48]	; (2a4 <Reset_Handler+0x48>)
     272:	2300      	movs	r3, #0
     274:	428d      	cmp	r5, r1
     276:	d0f6      	beq.n	266 <Reset_Handler+0xa>
     278:	18ca      	adds	r2, r1, r3
     27a:	18e8      	adds	r0, r5, r3
    for (; pDest < &__data_end__; pDest++, pSrc++)
     27c:	42a2      	cmp	r2, r4
     27e:	d305      	bcc.n	28c <Reset_Handler+0x30>
  if ((&__data_start__ != &__data_end__) && (pSrc != pDest)) {
     280:	4290      	cmp	r0, r2
     282:	d0f0      	beq.n	266 <Reset_Handler+0xa>
     284:	4b08      	ldr	r3, [pc, #32]	; (2a8 <Reset_Handler+0x4c>)
    for (pDest = &__bss_start__; pDest < &__bss_end__; pDest++)
     286:	4909      	ldr	r1, [pc, #36]	; (2ac <Reset_Handler+0x50>)
      *pDest = 0;
     288:	2200      	movs	r2, #0
     28a:	e004      	b.n	296 <Reset_Handler+0x3a>
      *pDest = *pSrc;
     28c:	6800      	ldr	r0, [r0, #0]
     28e:	3304      	adds	r3, #4
     290:	6010      	str	r0, [r2, #0]
     292:	e7f1      	b.n	278 <Reset_Handler+0x1c>
      *pDest = 0;
     294:	c304      	stmia	r3!, {r2}
    for (pDest = &__bss_start__; pDest < &__bss_end__; pDest++)
     296:	428b      	cmp	r3, r1
     298:	d3fc      	bcc.n	294 <Reset_Handler+0x38>
     29a:	e7e4      	b.n	266 <Reset_Handler+0xa>
     29c:	20000000 	.word	0x20000000
     2a0:	200000a0 	.word	0x200000a0
     2a4:	00005a3c 	.word	0x00005a3c
     2a8:	200000a0 	.word	0x200000a0
     2ac:	20000dd8 	.word	0x20000dd8

000002b0 <SysTick_Handler>:
{
     2b0:	b510      	push	{r4, lr}
  if (sysTickHook())
     2b2:	f000 f866 	bl	382 <sysTickHook>
     2b6:	2800      	cmp	r0, #0
     2b8:	d101      	bne.n	2be <SysTick_Handler+0xe>
  SysTick_DefaultHandler();
     2ba:	f000 f857 	bl	36c <SysTick_DefaultHandler>
}
     2be:	bd10      	pop	{r4, pc}

000002c0 <USB_SetHandler>:

void USB_SetHandler(void (*new_usb_isr)(void))
{
  usb_isr = new_usb_isr;
     2c0:	4b01      	ldr	r3, [pc, #4]	; (2c8 <USB_SetHandler+0x8>)
     2c2:	6018      	str	r0, [r3, #0]
}
     2c4:	4770      	bx	lr
     2c6:	46c0      	nop			; (mov r8, r8)
     2c8:	200000d8 	.word	0x200000d8

000002cc <millis>:
static volatile uint32_t _ulTickCount=0 ;

unsigned long millis( void )
{
// todo: ensure no interrupts
  return _ulTickCount ;
     2cc:	4b01      	ldr	r3, [pc, #4]	; (2d4 <millis+0x8>)
     2ce:	6818      	ldr	r0, [r3, #0]
}
     2d0:	4770      	bx	lr
     2d2:	46c0      	nop			; (mov r8, r8)
     2d4:	200000dc 	.word	0x200000dc

000002d8 <micros>:
// Interrupt-compatible version of micros
// Theory: repeatedly take readings of SysTick counter, millis counter and SysTick interrupt pending flag.
// When it appears that millis counter and pending is stable and SysTick hasn't rolled over, use these
// values to calculate micros. If there is a pending SysTick, add one to the millis counter in the calculation.
unsigned long micros( void )
{
     2d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint32_t pend, pend2;
  uint32_t count, count2;

  ticks2  = SysTick->VAL;
  pend2   = !!(SCB->ICSR & SCB_ICSR_PENDSTSET_Msk)  ;
  count2  = _ulTickCount ;
     2da:	4813      	ldr	r0, [pc, #76]	; (328 <micros+0x50>)
  pend2   = !!(SCB->ICSR & SCB_ICSR_PENDSTSET_Msk)  ;
     2dc:	2201      	movs	r2, #1
  count2  = _ulTickCount ;
     2de:	4684      	mov	ip, r0
  ticks2  = SysTick->VAL;
     2e0:	4912      	ldr	r1, [pc, #72]	; (32c <micros+0x54>)
  pend2   = !!(SCB->ICSR & SCB_ICSR_PENDSTSET_Msk)  ;
     2e2:	4c13      	ldr	r4, [pc, #76]	; (330 <micros+0x58>)
  ticks2  = SysTick->VAL;
     2e4:	688e      	ldr	r6, [r1, #8]
  pend2   = !!(SCB->ICSR & SCB_ICSR_PENDSTSET_Msk)  ;
     2e6:	6863      	ldr	r3, [r4, #4]
  count2  = _ulTickCount ;
     2e8:	6805      	ldr	r5, [r0, #0]
  pend2   = !!(SCB->ICSR & SCB_ICSR_PENDSTSET_Msk)  ;
     2ea:	0e9b      	lsrs	r3, r3, #26
     2ec:	4013      	ands	r3, r2
  {
    ticks=ticks2;
    pend=pend2;
    count=count2;
    ticks2  = SysTick->VAL;
    pend2   = !!(SCB->ICSR & SCB_ICSR_PENDSTSET_Msk)  ;
     2ee:	9201      	str	r2, [sp, #4]
    ticks2  = SysTick->VAL;
     2f0:	6888      	ldr	r0, [r1, #8]
    pend2   = !!(SCB->ICSR & SCB_ICSR_PENDSTSET_Msk)  ;
     2f2:	6862      	ldr	r2, [r4, #4]
     2f4:	9f01      	ldr	r7, [sp, #4]
     2f6:	0e92      	lsrs	r2, r2, #26
     2f8:	403a      	ands	r2, r7
    count2  = _ulTickCount ;
     2fa:	4667      	mov	r7, ip
     2fc:	683f      	ldr	r7, [r7, #0]
  } while ((pend != pend2) || (count != count2) || (ticks < ticks2));
     2fe:	4293      	cmp	r3, r2
     300:	d10e      	bne.n	320 <micros+0x48>
     302:	42bd      	cmp	r5, r7
     304:	d10c      	bne.n	320 <micros+0x48>
     306:	4286      	cmp	r6, r0
     308:	d30a      	bcc.n	320 <micros+0x48>

  return ((count+pend) * 1000) + (((SysTick->LOAD  - ticks)*(1048576/(VARIANT_MCK/1000000)))>>20) ;
     30a:	195b      	adds	r3, r3, r5
     30c:	25fa      	movs	r5, #250	; 0xfa
     30e:	6848      	ldr	r0, [r1, #4]
     310:	00ad      	lsls	r5, r5, #2
     312:	1b86      	subs	r6, r0, r6
     314:	4807      	ldr	r0, [pc, #28]	; (334 <micros+0x5c>)
     316:	436b      	muls	r3, r5
     318:	4370      	muls	r0, r6
     31a:	0d00      	lsrs	r0, r0, #20
     31c:	18c0      	adds	r0, r0, r3
  // this is an optimization to turn a runtime division into two compile-time divisions and
  // a runtime multiplication and shift, saving a few cycles
}
     31e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
{
     320:	003d      	movs	r5, r7
     322:	0013      	movs	r3, r2
     324:	0006      	movs	r6, r0
     326:	e7e3      	b.n	2f0 <micros+0x18>
     328:	200000dc 	.word	0x200000dc
     32c:	e000e010 	.word	0xe000e010
     330:	e000ed00 	.word	0xe000ed00
     334:	00005555 	.word	0x00005555

00000338 <delay>:

void delay( unsigned long ms )
{
     338:	b570      	push	{r4, r5, r6, lr}
     33a:	1e04      	subs	r4, r0, #0
  if (ms == 0)
     33c:	d010      	beq.n	360 <delay+0x28>
  {
    return;
  }

  uint32_t start = micros();
     33e:	f7ff ffcb 	bl	2d8 <micros>
     342:	0005      	movs	r5, r0

  while (ms > 0)
  {
    yield();
     344:	f000 f81c 	bl	380 <yield>
    while (ms > 0 && (micros() - start) >= 1000)
     348:	f7ff ffc6 	bl	2d8 <micros>
     34c:	4b05      	ldr	r3, [pc, #20]	; (364 <delay+0x2c>)
     34e:	1b40      	subs	r0, r0, r5
     350:	4298      	cmp	r0, r3
     352:	d9f7      	bls.n	344 <delay+0xc>
    {
      ms--;
      start += 1000;
     354:	23fa      	movs	r3, #250	; 0xfa
      ms--;
     356:	3c01      	subs	r4, #1
      start += 1000;
     358:	009b      	lsls	r3, r3, #2
     35a:	18ed      	adds	r5, r5, r3
    while (ms > 0 && (micros() - start) >= 1000)
     35c:	2c00      	cmp	r4, #0
     35e:	d1f3      	bne.n	348 <delay+0x10>
    }
  }
}
     360:	bd70      	pop	{r4, r5, r6, pc}
     362:	46c0      	nop			; (mov r8, r8)
     364:	000003e7 	.word	0x000003e7

00000368 <resetExternalChip>:

void initiateReset(int ms);
void tickReset();
void cancelReset();

 __attribute__ ((weak)) void resetExternalChip() {};
     368:	4770      	bx	lr
	...

0000036c <SysTick_DefaultHandler>:

#include "Reset.h" // for tickReset()

void SysTick_DefaultHandler(void)
{
     36c:	b510      	push	{r4, lr}
  // Increment tick count each ms
  _ulTickCount++;
     36e:	4a03      	ldr	r2, [pc, #12]	; (37c <SysTick_DefaultHandler+0x10>)
     370:	6813      	ldr	r3, [r2, #0]
     372:	3301      	adds	r3, #1
     374:	6013      	str	r3, [r2, #0]
  tickReset();
     376:	f000 f969 	bl	64c <tickReset>
}
     37a:	bd10      	pop	{r4, pc}
     37c:	200000dc 	.word	0x200000dc

00000380 <yield>:
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
	// Empty
}
     380:	4770      	bx	lr

00000382 <sysTickHook>:
 * handler provided by Arduino.
 */
static int __false() {
	// Return false
	return 0;
}
     382:	2000      	movs	r0, #0
     384:	4770      	bx	lr

00000386 <_Z11initVariantv>:
#include "Arduino.h"

// Weak empty variant initialization function.
// May be redefined by variant files.
void initVariant() __attribute__((weak));
void initVariant() { }
     386:	4770      	bx	lr

00000388 <main>:

/*
 * \brief Main entry point of Arduino application
 */
int main( void )
{
     388:	b510      	push	{r4, lr}
  init();
     38a:	f001 fcf5 	bl	1d78 <init>

  __libc_init_array();
     38e:	f004 feef 	bl	5170 <__libc_init_array>

  initVariant();
     392:	f7ff fff8 	bl	386 <_Z11initVariantv>

  delay(1);
     396:	2001      	movs	r0, #1
     398:	f7ff ffce 	bl	338 <delay>
#if defined(USBCON)
  USBDevice.init();
     39c:	4c08      	ldr	r4, [pc, #32]	; (3c0 <main+0x38>)
     39e:	0020      	movs	r0, r4
     3a0:	f000 ff42 	bl	1228 <_ZN14USBDeviceClass4initEv>
  USBDevice.attach();
     3a4:	0020      	movs	r0, r4
     3a6:	f000 fff3 	bl	1390 <_ZN14USBDeviceClass6attachEv>
#endif

  setup();
     3aa:	f7ff feb3 	bl	114 <setup>

  for (;;)
  {
    loop();
     3ae:	f7ff ff2b 	bl	208 <loop>
    if (serialEventRun) serialEventRun();
     3b2:	4b04      	ldr	r3, [pc, #16]	; (3c4 <main+0x3c>)
     3b4:	2b00      	cmp	r3, #0
     3b6:	d0fa      	beq.n	3ae <main+0x26>
     3b8:	e000      	b.n	3bc <main+0x34>
     3ba:	bf00      	nop
     3bc:	e7f7      	b.n	3ae <main+0x26>
     3be:	46c0      	nop			; (mov r8, r8)
     3c0:	20000148 	.word	0x20000148
     3c4:	00000000 	.word	0x00000000

000003c8 <_ZN5Print17availableForWriteEv>:
      return write((const uint8_t *)buffer, size);
    }

    // default to zero, meaning "a single write may block"
    // should be overriden by subclasses with buffering
    virtual int availableForWrite() { return 0; }
     3c8:	2000      	movs	r0, #0
     3ca:	4770      	bx	lr

000003cc <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
     3cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
     3ce:	0006      	movs	r6, r0
     3d0:	000d      	movs	r5, r1
     3d2:	000c      	movs	r4, r1
     3d4:	188b      	adds	r3, r1, r2
     3d6:	9301      	str	r3, [sp, #4]
  size_t n = 0;
  while (size--) {
     3d8:	9b01      	ldr	r3, [sp, #4]
     3da:	1b67      	subs	r7, r4, r5
     3dc:	429c      	cmp	r4, r3
     3de:	d007      	beq.n	3f0 <_ZN5Print5writeEPKhj+0x24>
    if (write(*buffer++)) n++;
     3e0:	6833      	ldr	r3, [r6, #0]
     3e2:	7821      	ldrb	r1, [r4, #0]
     3e4:	681b      	ldr	r3, [r3, #0]
     3e6:	0030      	movs	r0, r6
     3e8:	4798      	blx	r3
     3ea:	3401      	adds	r4, #1
     3ec:	2800      	cmp	r0, #0
     3ee:	d1f3      	bne.n	3d8 <_ZN5Print5writeEPKhj+0xc>
    else break;
  }
  return n;
}
     3f0:	0038      	movs	r0, r7
     3f2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

000003f4 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
     3f4:	b570      	push	{r4, r5, r6, lr}
     3f6:	0005      	movs	r5, r0
     3f8:	000c      	movs	r4, r1
      if (str == NULL) return 0;
     3fa:	1e08      	subs	r0, r1, #0
     3fc:	d007      	beq.n	40e <_ZN5Print5writeEPKc+0x1a>
      return write((const uint8_t *)str, strlen(str));
     3fe:	f004 ffbb 	bl	5378 <strlen>
     402:	682b      	ldr	r3, [r5, #0]
     404:	0002      	movs	r2, r0
     406:	685b      	ldr	r3, [r3, #4]
     408:	0021      	movs	r1, r4
     40a:	0028      	movs	r0, r5
     40c:	4798      	blx	r3
    }
     40e:	bd70      	pop	{r4, r5, r6, pc}

00000410 <_ZN5Print5printEPKc>:
{
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
     410:	b510      	push	{r4, lr}
  return write(str);
     412:	f7ff ffef 	bl	3f4 <_ZN5Print5writeEPKc>
}
     416:	bd10      	pop	{r4, pc}

00000418 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
     418:	b510      	push	{r4, lr}
  return write(c);
     41a:	6803      	ldr	r3, [r0, #0]
     41c:	681b      	ldr	r3, [r3, #0]
     41e:	4798      	blx	r3
}
     420:	bd10      	pop	{r4, pc}
	...

00000424 <_ZN5Print7printlnEv>:
{
  return x.printTo(*this);
}

size_t Print::println(void)
{
     424:	b510      	push	{r4, lr}
  return write("\r\n");
     426:	4902      	ldr	r1, [pc, #8]	; (430 <_ZN5Print7printlnEv+0xc>)
     428:	f7ff ffe4 	bl	3f4 <_ZN5Print5writeEPKc>
}
     42c:	bd10      	pop	{r4, pc}
     42e:	46c0      	nop			; (mov r8, r8)
     430:	00005420 	.word	0x00005420

00000434 <_ZN5Print7printlnEPKc>:
  n += println();
  return n;
}

size_t Print::println(const char c[])
{
     434:	b570      	push	{r4, r5, r6, lr}
     436:	0004      	movs	r4, r0
  return write(str);
     438:	f7ff ffdc 	bl	3f4 <_ZN5Print5writeEPKc>
     43c:	0005      	movs	r5, r0
  size_t n = print(c);
  n += println();
     43e:	0020      	movs	r0, r4
     440:	f7ff fff0 	bl	424 <_ZN5Print7printlnEv>
     444:	1940      	adds	r0, r0, r5
  return n;
}
     446:	bd70      	pop	{r4, r5, r6, pc}

00000448 <_ZN5Print11printNumberEmh>:
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base)
{
     448:	b5f0      	push	{r4, r5, r6, r7, lr}
     44a:	0016      	movs	r6, r2
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
     44c:	2200      	movs	r2, #0
{
     44e:	b08d      	sub	sp, #52	; 0x34
  *str = '\0';
     450:	ab02      	add	r3, sp, #8
     452:	3305      	adds	r3, #5
{
     454:	9001      	str	r0, [sp, #4]
     456:	000d      	movs	r5, r1
  *str = '\0';
     458:	77da      	strb	r2, [r3, #31]

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
     45a:	2e01      	cmp	r6, #1
     45c:	dc00      	bgt.n	460 <_ZN5Print11printNumberEmh+0x18>
     45e:	260a      	movs	r6, #10
     460:	ac0b      	add	r4, sp, #44	; 0x2c

  do {
    char c = n % base;
     462:	0028      	movs	r0, r5
     464:	0031      	movs	r1, r6
     466:	f002 fe95 	bl	3194 <__aeabi_uidivmod>
     46a:	000f      	movs	r7, r1
     46c:	b2cb      	uxtb	r3, r1
    n /= base;
     46e:	0028      	movs	r0, r5
     470:	0031      	movs	r1, r6
    char c = n % base;
     472:	9300      	str	r3, [sp, #0]
    n /= base;
     474:	f002 fe08 	bl	3088 <__udivsi3>

    *--str = c < 10 ? c + '0' : c + 'A' - 10;
     478:	b2fb      	uxtb	r3, r7
     47a:	3337      	adds	r3, #55	; 0x37
    n /= base;
     47c:	0005      	movs	r5, r0
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
     47e:	3c01      	subs	r4, #1
     480:	b2db      	uxtb	r3, r3
     482:	2f09      	cmp	r7, #9
     484:	d802      	bhi.n	48c <_ZN5Print11printNumberEmh+0x44>
     486:	9b00      	ldr	r3, [sp, #0]
     488:	3330      	adds	r3, #48	; 0x30
     48a:	b2db      	uxtb	r3, r3
     48c:	7023      	strb	r3, [r4, #0]
  } while(n);
     48e:	2d00      	cmp	r5, #0
     490:	d1e7      	bne.n	462 <_ZN5Print11printNumberEmh+0x1a>

  return write(str);
     492:	0021      	movs	r1, r4
     494:	9801      	ldr	r0, [sp, #4]
     496:	f7ff ffad 	bl	3f4 <_ZN5Print5writeEPKc>
}
     49a:	b00d      	add	sp, #52	; 0x34
     49c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000004a0 <_ZN5Print10printFloatEdh>:

size_t Print::printFloat(double number, uint8_t digits)
{
     4a0:	b5f0      	push	{r4, r5, r6, r7, lr}
     4a2:	001e      	movs	r6, r3
     4a4:	b085      	sub	sp, #20
     4a6:	ab0a      	add	r3, sp, #40	; 0x28
     4a8:	781b      	ldrb	r3, [r3, #0]
     4aa:	0005      	movs	r5, r0
     4ac:	9301      	str	r3, [sp, #4]
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isnan;
#else
  constexpr bool
  isnan(double __x)
  { return __builtin_isnan(__x); }
     4ae:	0010      	movs	r0, r2
     4b0:	0033      	movs	r3, r6
     4b2:	0031      	movs	r1, r6
     4b4:	0017      	movs	r7, r2
     4b6:	f004 fd5f 	bl	4f78 <__aeabi_dcmpun>
     4ba:	2800      	cmp	r0, #0
     4bc:	d07b      	beq.n	5b6 <_ZN5Print10printFloatEdh+0x116>
  return write(str);
     4be:	494d      	ldr	r1, [pc, #308]	; (5f4 <_ZN5Print10printFloatEdh+0x154>)
     4c0:	e090      	b.n	5e4 <_ZN5Print10printFloatEdh+0x144>
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
     4c2:	22e0      	movs	r2, #224	; 0xe0
     4c4:	4b4c      	ldr	r3, [pc, #304]	; (5f8 <_ZN5Print10printFloatEdh+0x158>)
     4c6:	0612      	lsls	r2, r2, #24
     4c8:	0038      	movs	r0, r7
     4ca:	0031      	movs	r1, r6
     4cc:	f002 fe92 	bl	31f4 <__aeabi_dcmpgt>
     4d0:	2800      	cmp	r0, #0
     4d2:	d001      	beq.n	4d8 <_ZN5Print10printFloatEdh+0x38>
  return write(str);
     4d4:	4949      	ldr	r1, [pc, #292]	; (5fc <_ZN5Print10printFloatEdh+0x15c>)
     4d6:	e085      	b.n	5e4 <_ZN5Print10printFloatEdh+0x144>
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
     4d8:	22e0      	movs	r2, #224	; 0xe0
     4da:	4b49      	ldr	r3, [pc, #292]	; (600 <_ZN5Print10printFloatEdh+0x160>)
     4dc:	0612      	lsls	r2, r2, #24
     4de:	0038      	movs	r0, r7
     4e0:	0031      	movs	r1, r6
     4e2:	f002 fe73 	bl	31cc <__aeabi_dcmplt>
     4e6:	2800      	cmp	r0, #0
     4e8:	d1f4      	bne.n	4d4 <_ZN5Print10printFloatEdh+0x34>

  // Handle negative numbers
  if (number < 0.0)
     4ea:	2200      	movs	r2, #0
     4ec:	2300      	movs	r3, #0
     4ee:	0038      	movs	r0, r7
     4f0:	0031      	movs	r1, r6
     4f2:	f002 fe6b 	bl	31cc <__aeabi_dcmplt>
     4f6:	2800      	cmp	r0, #0
     4f8:	d014      	beq.n	524 <_ZN5Print10printFloatEdh+0x84>
  {
     n += print('-');
     4fa:	212d      	movs	r1, #45	; 0x2d
     4fc:	0028      	movs	r0, r5
     4fe:	f7ff ff8b 	bl	418 <_ZN5Print5printEc>
     number = -number;
     502:	2380      	movs	r3, #128	; 0x80
     504:	061b      	lsls	r3, r3, #24
     n += print('-');
     506:	9002      	str	r0, [sp, #8]
     number = -number;
     508:	18f6      	adds	r6, r6, r3
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
     50a:	2400      	movs	r4, #0
  double rounding = 0.5;
     50c:	2000      	movs	r0, #0
     50e:	493d      	ldr	r1, [pc, #244]	; (604 <_ZN5Print10printFloatEdh+0x164>)
  for (uint8_t i=0; i<digits; ++i)
     510:	9b01      	ldr	r3, [sp, #4]
     512:	429c      	cmp	r4, r3
     514:	da08      	bge.n	528 <_ZN5Print10printFloatEdh+0x88>
    rounding /= 10.0;
     516:	2200      	movs	r2, #0
     518:	4b3b      	ldr	r3, [pc, #236]	; (608 <_ZN5Print10printFloatEdh+0x168>)
  for (uint8_t i=0; i<digits; ++i)
     51a:	3401      	adds	r4, #1
    rounding /= 10.0;
     51c:	f003 fb62 	bl	3be4 <__aeabi_ddiv>
  for (uint8_t i=0; i<digits; ++i)
     520:	b2e4      	uxtb	r4, r4
     522:	e7f5      	b.n	510 <_ZN5Print10printFloatEdh+0x70>
  size_t n = 0;
     524:	9002      	str	r0, [sp, #8]
     526:	e7f0      	b.n	50a <_ZN5Print10printFloatEdh+0x6a>

  number += rounding;
     528:	0033      	movs	r3, r6
     52a:	003a      	movs	r2, r7
     52c:	f003 f84a 	bl	35c4 <__aeabi_dadd>
     530:	000f      	movs	r7, r1
     532:	0006      	movs	r6, r0

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
     534:	f002 fe72 	bl	321c <__aeabi_d2uiz>
  else return printNumber(n, base);
     538:	220a      	movs	r2, #10
  unsigned long int_part = (unsigned long)number;
     53a:	9003      	str	r0, [sp, #12]
  else return printNumber(n, base);
     53c:	0001      	movs	r1, r0
     53e:	0028      	movs	r0, r5
     540:	f7ff ff82 	bl	448 <_ZN5Print11printNumberEmh>
  double remainder = number - (double)int_part;
  n += print(int_part);
     544:	9b02      	ldr	r3, [sp, #8]
     546:	18c4      	adds	r4, r0, r3

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
     548:	9b01      	ldr	r3, [sp, #4]
     54a:	2b00      	cmp	r3, #0
     54c:	d04e      	beq.n	5ec <_ZN5Print10printFloatEdh+0x14c>
  double remainder = number - (double)int_part;
     54e:	9803      	ldr	r0, [sp, #12]
     550:	f004 fd66 	bl	5020 <__aeabi_ui2d>
     554:	0002      	movs	r2, r0
     556:	000b      	movs	r3, r1
     558:	0030      	movs	r0, r6
     55a:	0039      	movs	r1, r7
     55c:	f004 f9f6 	bl	494c <__aeabi_dsub>
     560:	0006      	movs	r6, r0
     562:	000f      	movs	r7, r1
    n += print('.');
     564:	0028      	movs	r0, r5
     566:	212e      	movs	r1, #46	; 0x2e
     568:	f7ff ff56 	bl	418 <_ZN5Print5printEc>
     56c:	1824      	adds	r4, r4, r0
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
     56e:	9b01      	ldr	r3, [sp, #4]
     570:	2b00      	cmp	r3, #0
     572:	d03b      	beq.n	5ec <_ZN5Print10printFloatEdh+0x14c>
  {
    remainder *= 10.0;
     574:	4b24      	ldr	r3, [pc, #144]	; (608 <_ZN5Print10printFloatEdh+0x168>)
     576:	2200      	movs	r2, #0
     578:	0030      	movs	r0, r6
     57a:	0039      	movs	r1, r7
     57c:	f003 ff66 	bl	444c <__aeabi_dmul>
     580:	000f      	movs	r7, r1
     582:	0006      	movs	r6, r0
    unsigned int toPrint = (unsigned int)(remainder);
     584:	f002 fe4a 	bl	321c <__aeabi_d2uiz>
  else return printNumber(n, base);
     588:	220a      	movs	r2, #10
     58a:	0001      	movs	r1, r0
    unsigned int toPrint = (unsigned int)(remainder);
     58c:	9002      	str	r0, [sp, #8]
  else return printNumber(n, base);
     58e:	0028      	movs	r0, r5
     590:	f7ff ff5a 	bl	448 <_ZN5Print11printNumberEmh>
    n += print(toPrint);
     594:	1824      	adds	r4, r4, r0
    remainder -= toPrint;
     596:	9802      	ldr	r0, [sp, #8]
     598:	f004 fd42 	bl	5020 <__aeabi_ui2d>
     59c:	000b      	movs	r3, r1
     59e:	0002      	movs	r2, r0
     5a0:	0039      	movs	r1, r7
     5a2:	0030      	movs	r0, r6
     5a4:	f004 f9d2 	bl	494c <__aeabi_dsub>
     5a8:	9b01      	ldr	r3, [sp, #4]
     5aa:	0006      	movs	r6, r0
     5ac:	3b01      	subs	r3, #1
     5ae:	b2db      	uxtb	r3, r3
     5b0:	000f      	movs	r7, r1
     5b2:	9301      	str	r3, [sp, #4]
     5b4:	e7db      	b.n	56e <_ZN5Print10printFloatEdh+0xce>
  if (isinf(number)) return print("inf");
     5b6:	2201      	movs	r2, #1
  { return __builtin_isinf(__x); }
     5b8:	0074      	lsls	r4, r6, #1
     5ba:	0864      	lsrs	r4, r4, #1
     5bc:	4252      	negs	r2, r2
     5be:	4b13      	ldr	r3, [pc, #76]	; (60c <_ZN5Print10printFloatEdh+0x16c>)
     5c0:	0038      	movs	r0, r7
     5c2:	0021      	movs	r1, r4
     5c4:	f004 fcd8 	bl	4f78 <__aeabi_dcmpun>
     5c8:	2800      	cmp	r0, #0
     5ca:	d000      	beq.n	5ce <_ZN5Print10printFloatEdh+0x12e>
     5cc:	e779      	b.n	4c2 <_ZN5Print10printFloatEdh+0x22>
     5ce:	2201      	movs	r2, #1
     5d0:	4b0e      	ldr	r3, [pc, #56]	; (60c <_ZN5Print10printFloatEdh+0x16c>)
     5d2:	4252      	negs	r2, r2
     5d4:	0038      	movs	r0, r7
     5d6:	0021      	movs	r1, r4
     5d8:	f002 fe02 	bl	31e0 <__aeabi_dcmple>
     5dc:	2800      	cmp	r0, #0
     5de:	d000      	beq.n	5e2 <_ZN5Print10printFloatEdh+0x142>
     5e0:	e76f      	b.n	4c2 <_ZN5Print10printFloatEdh+0x22>
  return write(str);
     5e2:	490b      	ldr	r1, [pc, #44]	; (610 <_ZN5Print10printFloatEdh+0x170>)
     5e4:	0028      	movs	r0, r5
     5e6:	f7ff ff05 	bl	3f4 <_ZN5Print5writeEPKc>
     5ea:	0004      	movs	r4, r0
  }

  return n;
}
     5ec:	0020      	movs	r0, r4
     5ee:	b005      	add	sp, #20
     5f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
     5f2:	46c0      	nop			; (mov r8, r8)
     5f4:	0000541c 	.word	0x0000541c
     5f8:	41efffff 	.word	0x41efffff
     5fc:	00005418 	.word	0x00005418
     600:	c1efffff 	.word	0xc1efffff
     604:	3fe00000 	.word	0x3fe00000
     608:	40240000 	.word	0x40240000
     60c:	7fefffff 	.word	0x7fefffff
     610:	00005414 	.word	0x00005414

00000614 <_ZN5Print5printEdi>:
{
     614:	b537      	push	{r0, r1, r2, r4, r5, lr}
     616:	001d      	movs	r5, r3
  return printFloat(n, digits);
     618:	466b      	mov	r3, sp
     61a:	7e1b      	ldrb	r3, [r3, #24]
     61c:	9300      	str	r3, [sp, #0]
     61e:	002b      	movs	r3, r5
     620:	f7ff ff3e 	bl	4a0 <_ZN5Print10printFloatEdh>
}
     624:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
	...

00000628 <initiateReset>:
	while (true);
}

static int ticks = -1;

void initiateReset(int _ticks) {
     628:	b510      	push	{r4, lr}
     62a:	0004      	movs	r4, r0
	resetExternalChip();
     62c:	f7ff fe9c 	bl	368 <resetExternalChip>
	ticks = _ticks;
     630:	4b01      	ldr	r3, [pc, #4]	; (638 <initiateReset+0x10>)
     632:	601c      	str	r4, [r3, #0]
}
     634:	bd10      	pop	{r4, pc}
     636:	46c0      	nop			; (mov r8, r8)
     638:	20000000 	.word	0x20000000

0000063c <cancelReset>:

void cancelReset() {
	ticks = -1;
     63c:	2201      	movs	r2, #1
     63e:	4b02      	ldr	r3, [pc, #8]	; (648 <cancelReset+0xc>)
     640:	4252      	negs	r2, r2
     642:	601a      	str	r2, [r3, #0]
}
     644:	4770      	bx	lr
     646:	46c0      	nop			; (mov r8, r8)
     648:	20000000 	.word	0x20000000

0000064c <tickReset>:

void tickReset() {
	if (ticks == -1)
     64c:	4a16      	ldr	r2, [pc, #88]	; (6a8 <tickReset+0x5c>)
void tickReset() {
     64e:	b510      	push	{r4, lr}
	if (ticks == -1)
     650:	6813      	ldr	r3, [r2, #0]
     652:	1c59      	adds	r1, r3, #1
     654:	d027      	beq.n	6a6 <tickReset+0x5a>
		return;
	ticks--;
     656:	3b01      	subs	r3, #1
     658:	6013      	str	r3, [r2, #0]
	if (ticks == 0)
     65a:	2b00      	cmp	r3, #0
     65c:	d123      	bne.n	6a6 <tickReset+0x5a>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
     65e:	b672      	cpsid	i
	if (APP_START < (0x200 + 4)) {
     660:	4b12      	ldr	r3, [pc, #72]	; (6ac <tickReset+0x60>)
     662:	4a13      	ldr	r2, [pc, #76]	; (6b0 <tickReset+0x64>)
     664:	3304      	adds	r3, #4
     666:	4293      	cmp	r3, r2
     668:	d808      	bhi.n	67c <tickReset+0x30>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
     66a:	f3bf 8f4f 	dsb	sy
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
     66e:	4a11      	ldr	r2, [pc, #68]	; (6b4 <tickReset+0x68>)
     670:	4b11      	ldr	r3, [pc, #68]	; (6b8 <tickReset+0x6c>)
     672:	60da      	str	r2, [r3, #12]
     674:	f3bf 8f4f 	dsb	sy
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
     678:	46c0      	nop			; (mov r8, r8)
     67a:	e7fd      	b.n	678 <tickReset+0x2c>
        return NVMCTRL->INTFLAG.reg & NVMCTRL_INTFLAG_READY;
     67c:	4a0f      	ldr	r2, [pc, #60]	; (6bc <tickReset+0x70>)
	while (!nvmReady())
     67e:	2101      	movs	r1, #1
     680:	0010      	movs	r0, r2
        return NVMCTRL->INTFLAG.reg & NVMCTRL_INTFLAG_READY;
     682:	7d14      	ldrb	r4, [r2, #20]
	while (!nvmReady())
     684:	420c      	tst	r4, r1
     686:	d0fc      	beq.n	682 <tickReset+0x36>
	NVMCTRL->STATUS.reg |= NVMCTRL_STATUS_MASK;
     688:	2120      	movs	r1, #32
     68a:	8b14      	ldrh	r4, [r2, #24]
     68c:	31ff      	adds	r1, #255	; 0xff
	NVMCTRL->ADDR.reg  = (uintptr_t)&NVM_MEMORY[APP_START / 4];
     68e:	089b      	lsrs	r3, r3, #2
     690:	005b      	lsls	r3, r3, #1
	NVMCTRL->STATUS.reg |= NVMCTRL_STATUS_MASK;
     692:	4321      	orrs	r1, r4
     694:	8311      	strh	r1, [r2, #24]
	NVMCTRL->ADDR.reg  = (uintptr_t)&NVM_MEMORY[APP_START / 4];
     696:	61d3      	str	r3, [r2, #28]
	NVMCTRL->CTRLA.reg = NVMCTRL_CTRLA_CMD_ER | NVMCTRL_CTRLA_CMDEX_KEY;
     698:	4b09      	ldr	r3, [pc, #36]	; (6c0 <tickReset+0x74>)
     69a:	8013      	strh	r3, [r2, #0]
	while (!nvmReady())
     69c:	2301      	movs	r3, #1
        return NVMCTRL->INTFLAG.reg & NVMCTRL_INTFLAG_READY;
     69e:	7d02      	ldrb	r2, [r0, #20]
	while (!nvmReady())
     6a0:	421a      	tst	r2, r3
     6a2:	d0fc      	beq.n	69e <tickReset+0x52>
     6a4:	e7e1      	b.n	66a <tickReset+0x1e>
		banzai();
}
     6a6:	bd10      	pop	{r4, pc}
     6a8:	20000000 	.word	0x20000000
     6ac:	00000000 	.word	0x00000000
     6b0:	00000203 	.word	0x00000203
     6b4:	05fa0004 	.word	0x05fa0004
     6b8:	e000ed00 	.word	0xe000ed00
     6bc:	41004000 	.word	0x41004000
     6c0:	ffffa502 	.word	0xffffa502

000006c4 <SystemInit>:
#define GENERIC_CLOCK_MULTIPLEXER_DFLL48M (0u)

void SystemInit( void )
{
  /* Set 1 Flash Wait State for 48MHz, cf tables 20.9 and 35.27 in SAMD21 Datasheet */
  NVMCTRL->CTRLB.bit.RWS = NVMCTRL_CTRLB_RWS_HALF_Val ;
     6c4:	221e      	movs	r2, #30
{
     6c6:	b570      	push	{r4, r5, r6, lr}
  NVMCTRL->CTRLB.bit.RWS = NVMCTRL_CTRLB_RWS_HALF_Val ;
     6c8:	4846      	ldr	r0, [pc, #280]	; (7e4 <SystemInit+0x120>)

  /* Turn on the digital interface clock */
  PM->APBAMASK.reg |= PM_APBAMASK_GCLK ;
     6ca:	4947      	ldr	r1, [pc, #284]	; (7e8 <SystemInit+0x124>)
  NVMCTRL->CTRLB.bit.RWS = NVMCTRL_CTRLB_RWS_HALF_Val ;
     6cc:	6843      	ldr	r3, [r0, #4]
     6ce:	4393      	bics	r3, r2
     6d0:	3a1c      	subs	r2, #28
     6d2:	4313      	orrs	r3, r2
     6d4:	6043      	str	r3, [r0, #4]
  PM->APBAMASK.reg |= PM_APBAMASK_GCLK ;
     6d6:	2308      	movs	r3, #8
     6d8:	698c      	ldr	r4, [r1, #24]
     6da:	4323      	orrs	r3, r4
     6dc:	618b      	str	r3, [r1, #24]
#else // has crystal

  /* ----------------------------------------------------------------------------------------------
   * 1) Enable XOSC32K clock (External on-board 32.768Hz oscillator)
   */
  SYSCTRL->XOSC32K.reg = SYSCTRL_XOSC32K_STARTUP( 0x6u ) | /* cf table 15.10 of product datasheet in chapter 15.8.6 */
     6de:	4c43      	ldr	r4, [pc, #268]	; (7ec <SystemInit+0x128>)
     6e0:	4b43      	ldr	r3, [pc, #268]	; (7f0 <SystemInit+0x12c>)
     6e2:	829c      	strh	r4, [r3, #20]
                         SYSCTRL_XOSC32K_XTALEN | SYSCTRL_XOSC32K_EN32K ;
  SYSCTRL->XOSC32K.bit.ENABLE = 1 ; /* separate call, as described in chapter 15.6.3 */
     6e4:	8a9c      	ldrh	r4, [r3, #20]
     6e6:	4314      	orrs	r4, r2
     6e8:	829c      	strh	r4, [r3, #20]

  while ( (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_XOSC32KRDY) == 0 )
     6ea:	68dc      	ldr	r4, [r3, #12]
     6ec:	4214      	tst	r4, r2
     6ee:	d0fc      	beq.n	6ea <SystemInit+0x26>

  /* Software reset the module to ensure it is re-initialized correctly */
  /* Note: Due to synchronization, there is a delay from writing CTRL.SWRST until the reset is complete.
   * CTRL.SWRST and STATUS.SYNCBUSY will both be cleared when the reset is complete, as described in chapter 13.8.1
   */
  GCLK->CTRL.reg = GCLK_CTRL_SWRST ;
     6f0:	2401      	movs	r4, #1
     6f2:	4a40      	ldr	r2, [pc, #256]	; (7f4 <SystemInit+0x130>)
     6f4:	7014      	strb	r4, [r2, #0]

  while ( (GCLK->CTRL.reg & GCLK_CTRL_SWRST) && (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY) )
     6f6:	7815      	ldrb	r5, [r2, #0]
     6f8:	4225      	tst	r5, r4
     6fa:	d003      	beq.n	704 <SystemInit+0x40>
     6fc:	7855      	ldrb	r5, [r2, #1]
     6fe:	b26d      	sxtb	r5, r5
     700:	2d00      	cmp	r5, #0
     702:	dbf8      	blt.n	6f6 <SystemInit+0x32>
  }

  /* ----------------------------------------------------------------------------------------------
   * 2) Put XOSC32K as source of Generic Clock Generator 1
   */
  GCLK->GENDIV.reg = GCLK_GENDIV_ID( GENERIC_CLOCK_GENERATOR_XOSC32K ) ; // Generic Clock Generator 1
     704:	2401      	movs	r4, #1
     706:	6094      	str	r4, [r2, #8]

  while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY )
     708:	7854      	ldrb	r4, [r2, #1]
     70a:	b264      	sxtb	r4, r4
     70c:	2c00      	cmp	r4, #0
     70e:	dbfb      	blt.n	708 <SystemInit+0x44>
  {
    /* Wait for synchronization */
  }

  /* Write Generic Clock Generator 1 configuration */
  GCLK->GENCTRL.reg = GCLK_GENCTRL_ID( GENERIC_CLOCK_GENERATOR_OSC32K ) | // Generic Clock Generator 1
     710:	4c39      	ldr	r4, [pc, #228]	; (7f8 <SystemInit+0x134>)
     712:	6054      	str	r4, [r2, #4]
                      GCLK_GENCTRL_SRC_XOSC32K | // Selected source is External 32KHz Oscillator
#endif
//                      GCLK_GENCTRL_OE | // Output clock to a pin for tests
                      GCLK_GENCTRL_GENEN ;

  while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY )
     714:	7854      	ldrb	r4, [r2, #1]
     716:	b264      	sxtb	r4, r4
     718:	2c00      	cmp	r4, #0
     71a:	dbfb      	blt.n	714 <SystemInit+0x50>
  }

  /* ----------------------------------------------------------------------------------------------
   * 3) Put Generic Clock Generator 1 as source for Generic Clock Multiplexer 0 (DFLL48M reference)
   */
  GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID( GENERIC_CLOCK_MULTIPLEXER_DFLL48M ) | // Generic Clock Multiplexer 0
     71c:	2482      	movs	r4, #130	; 0x82
     71e:	01e4      	lsls	r4, r4, #7
     720:	8054      	strh	r4, [r2, #2]
                      GCLK_CLKCTRL_GEN_GCLK1 | // Generic Clock Generator 1 is source
                      GCLK_CLKCTRL_CLKEN ;

  while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY )
     722:	7854      	ldrb	r4, [r2, #1]
     724:	b264      	sxtb	r4, r4
     726:	2c00      	cmp	r4, #0
     728:	dbfb      	blt.n	722 <SystemInit+0x5e>
   */

  /* DFLL Configuration in Closed Loop mode, cf product datasheet chapter 15.6.7.1 - Closed-Loop Operation */

  /* Remove the OnDemand mode, Bug http://avr32.icgroup.norway.atmel.com/bugzilla/show_bug.cgi?id=9905 */
  SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
     72a:	2402      	movs	r4, #2
     72c:	849c      	strh	r4, [r3, #36]	; 0x24

  while ( (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) == 0 )
     72e:	340e      	adds	r4, #14
     730:	68dd      	ldr	r5, [r3, #12]
     732:	4225      	tst	r5, r4
     734:	d0fc      	beq.n	730 <SystemInit+0x6c>
  {
    /* Wait for synchronization */
  }

  SYSCTRL->DFLLMUL.reg = SYSCTRL_DFLLMUL_CSTEP( 31 ) | // Coarse step is 31, half of the max value
     736:	4c31      	ldr	r4, [pc, #196]	; (7fc <SystemInit+0x138>)
     738:	62dc      	str	r4, [r3, #44]	; 0x2c
                         SYSCTRL_DFLLMUL_FSTEP( 511 ) | // Fine step is 511, half of the max value
                         SYSCTRL_DFLLMUL_MUL( (VARIANT_MCK + VARIANT_MAINOSC/2) / VARIANT_MAINOSC ) ; // External 32KHz is the reference

  while ( (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) == 0 )
     73a:	2410      	movs	r4, #16
     73c:	68dd      	ldr	r5, [r3, #12]
     73e:	4225      	tst	r5, r4
     740:	d0fc      	beq.n	73c <SystemInit+0x78>
  SYSCTRL->DFLLCTRL.reg |= SYSCTRL_DFLLCTRL_ENABLE ;

#else   // has crystal

  /* Write full configuration to DFLL control register */
  SYSCTRL->DFLLCTRL.reg |= SYSCTRL_DFLLCTRL_MODE | /* Enable the closed loop mode */
     742:	8c9d      	ldrh	r5, [r3, #36]	; 0x24
     744:	4c2e      	ldr	r4, [pc, #184]	; (800 <SystemInit+0x13c>)
     746:	432c      	orrs	r4, r5
     748:	849c      	strh	r4, [r3, #36]	; 0x24
                           SYSCTRL_DFLLCTRL_WAITLOCK |
                           SYSCTRL_DFLLCTRL_QLDIS ; /* Disable Quick lock */

  while ( (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) == 0 )
     74a:	2410      	movs	r4, #16
     74c:	68dd      	ldr	r5, [r3, #12]
     74e:	4225      	tst	r5, r4
     750:	d0fc      	beq.n	74c <SystemInit+0x88>
  {
    /* Wait for synchronization */
  }

  /* Enable the DFLL */
  SYSCTRL->DFLLCTRL.reg |= SYSCTRL_DFLLCTRL_ENABLE ;
     752:	2402      	movs	r4, #2
     754:	8c9d      	ldrh	r5, [r3, #36]	; 0x24

  while ( (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLLCKC) == 0 ||
     756:	2680      	movs	r6, #128	; 0x80
  SYSCTRL->DFLLCTRL.reg |= SYSCTRL_DFLLCTRL_ENABLE ;
     758:	432c      	orrs	r4, r5
     75a:	849c      	strh	r4, [r3, #36]	; 0x24
          (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLLCKF) == 0 )
     75c:	2440      	movs	r4, #64	; 0x40
  while ( (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLLCKC) == 0 ||
     75e:	68dd      	ldr	r5, [r3, #12]
     760:	4235      	tst	r5, r6
     762:	d0fc      	beq.n	75e <SystemInit+0x9a>
          (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLLCKF) == 0 )
     764:	68dd      	ldr	r5, [r3, #12]
  while ( (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLLCKC) == 0 ||
     766:	4225      	tst	r5, r4
     768:	d0f9      	beq.n	75e <SystemInit+0x9a>
    /* Wait for locks flags */
  }

#endif

  while ( (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) == 0 )
     76a:	2410      	movs	r4, #16
     76c:	68dd      	ldr	r5, [r3, #12]
     76e:	4225      	tst	r5, r4
     770:	d0fc      	beq.n	76c <SystemInit+0xa8>
  }

  /* ----------------------------------------------------------------------------------------------
   * 5) Switch Generic Clock Generator 0 to DFLL48M. CPU will run at 48MHz.
   */
  GCLK->GENDIV.reg = GCLK_GENDIV_ID( GENERIC_CLOCK_GENERATOR_MAIN ) ; // Generic Clock Generator 0
     772:	2400      	movs	r4, #0
     774:	6094      	str	r4, [r2, #8]

  while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY )
     776:	7854      	ldrb	r4, [r2, #1]
     778:	b264      	sxtb	r4, r4
     77a:	2c00      	cmp	r4, #0
     77c:	dbfb      	blt.n	776 <SystemInit+0xb2>
  {
    /* Wait for synchronization */
  }

  /* Write Generic Clock Generator 0 configuration */
  GCLK->GENCTRL.reg = GCLK_GENCTRL_ID( GENERIC_CLOCK_GENERATOR_MAIN ) | // Generic Clock Generator 0
     77e:	4c21      	ldr	r4, [pc, #132]	; (804 <SystemInit+0x140>)
     780:	6054      	str	r4, [r2, #4]
                      GCLK_GENCTRL_SRC_DFLL48M | // Selected source is DFLL 48MHz
//                      GCLK_GENCTRL_OE | // Output clock to a pin for tests
                      GCLK_GENCTRL_IDC | // Set 50/50 duty cycle
                      GCLK_GENCTRL_GENEN ;

  while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY )
     782:	7854      	ldrb	r4, [r2, #1]
     784:	b264      	sxtb	r4, r4
     786:	2c00      	cmp	r4, #0
     788:	dbfb      	blt.n	782 <SystemInit+0xbe>
  }

  /* ----------------------------------------------------------------------------------------------
   * 6) Modify PRESCaler value of OSC8M to have 8MHz
   */
  SYSCTRL->OSC8M.bit.PRESC = SYSCTRL_OSC8M_PRESC_0_Val ;  //CMSIS 4.5 changed the prescaler defines
     78a:	6a1c      	ldr	r4, [r3, #32]
     78c:	4d1e      	ldr	r5, [pc, #120]	; (808 <SystemInit+0x144>)
     78e:	402c      	ands	r4, r5
  SYSCTRL->OSC8M.bit.ONDEMAND = 0 ;
     790:	2580      	movs	r5, #128	; 0x80
  SYSCTRL->OSC8M.bit.PRESC = SYSCTRL_OSC8M_PRESC_0_Val ;  //CMSIS 4.5 changed the prescaler defines
     792:	621c      	str	r4, [r3, #32]
  SYSCTRL->OSC8M.bit.ONDEMAND = 0 ;
     794:	6a1c      	ldr	r4, [r3, #32]
     796:	43ac      	bics	r4, r5
     798:	621c      	str	r4, [r3, #32]

  /* ----------------------------------------------------------------------------------------------
   * 7) Put OSC8M as source for Generic Clock Generator 3
   */
  GCLK->GENDIV.reg = GCLK_GENDIV_ID( GENERIC_CLOCK_GENERATOR_OSC8M ) ; // Generic Clock Generator 3
     79a:	2303      	movs	r3, #3
     79c:	6093      	str	r3, [r2, #8]

  /* Write Generic Clock Generator 3 configuration */
  GCLK->GENCTRL.reg = GCLK_GENCTRL_ID( GENERIC_CLOCK_GENERATOR_OSC8M ) | // Generic Clock Generator 3
     79e:	4b1b      	ldr	r3, [pc, #108]	; (80c <SystemInit+0x148>)
     7a0:	6053      	str	r3, [r2, #4]
                      GCLK_GENCTRL_SRC_OSC8M | // Selected source is RC OSC 8MHz (already enabled at reset)
//                      GCLK_GENCTRL_OE | // Output clock to a pin for tests
                      GCLK_GENCTRL_GENEN ;

  while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY )
     7a2:	7853      	ldrb	r3, [r2, #1]
     7a4:	b25b      	sxtb	r3, r3
     7a6:	2b00      	cmp	r3, #0
     7a8:	dbfb      	blt.n	7a2 <SystemInit+0xde>

  /*
   * Now that all system clocks are configured, we can set CPU and APBx BUS clocks.
   * There values are normally the one present after Reset.
   */
  PM->CPUSEL.reg  = PM_CPUSEL_CPUDIV_DIV1 ;
     7aa:	2300      	movs	r3, #0

  // ADC Linearity bits 4:0
  uint32_t linearity = (*((uint32_t *) ADC_FUSES_LINEARITY_0_ADDR) & ADC_FUSES_LINEARITY_0_Msk) >> ADC_FUSES_LINEARITY_0_Pos;

  // ADC Linearity bits 7:5
  linearity |= ((*((uint32_t *) ADC_FUSES_LINEARITY_1_ADDR) & ADC_FUSES_LINEARITY_1_Msk) >> ADC_FUSES_LINEARITY_1_Pos) << 5;
     7ac:	24ff      	movs	r4, #255	; 0xff
  PM->CPUSEL.reg  = PM_CPUSEL_CPUDIV_DIV1 ;
     7ae:	720b      	strb	r3, [r1, #8]
  SystemCoreClock=VARIANT_MCK ;
     7b0:	4a17      	ldr	r2, [pc, #92]	; (810 <SystemInit+0x14c>)
  PM->APBASEL.reg = PM_APBASEL_APBADIV_DIV1_Val ;
     7b2:	724b      	strb	r3, [r1, #9]
  PM->APBBSEL.reg = PM_APBBSEL_APBBDIV_DIV1_Val ;
     7b4:	728b      	strb	r3, [r1, #10]
  PM->APBCSEL.reg = PM_APBCSEL_APBCDIV_DIV1_Val ;
     7b6:	72cb      	strb	r3, [r1, #11]
  SystemCoreClock=VARIANT_MCK ;
     7b8:	4b16      	ldr	r3, [pc, #88]	; (814 <SystemInit+0x150>)
     7ba:	601a      	str	r2, [r3, #0]
  uint32_t bias = (*((uint32_t *) ADC_FUSES_BIASCAL_ADDR) & ADC_FUSES_BIASCAL_Msk) >> ADC_FUSES_BIASCAL_Pos;
     7bc:	4b16      	ldr	r3, [pc, #88]	; (818 <SystemInit+0x154>)
  uint32_t linearity = (*((uint32_t *) ADC_FUSES_LINEARITY_0_ADDR) & ADC_FUSES_LINEARITY_0_Msk) >> ADC_FUSES_LINEARITY_0_Pos;
     7be:	4a17      	ldr	r2, [pc, #92]	; (81c <SystemInit+0x158>)
  uint32_t bias = (*((uint32_t *) ADC_FUSES_BIASCAL_ADDR) & ADC_FUSES_BIASCAL_Msk) >> ADC_FUSES_BIASCAL_Pos;
     7c0:	681b      	ldr	r3, [r3, #0]
  uint32_t linearity = (*((uint32_t *) ADC_FUSES_LINEARITY_0_ADDR) & ADC_FUSES_LINEARITY_0_Msk) >> ADC_FUSES_LINEARITY_0_Pos;
     7c2:	6811      	ldr	r1, [r2, #0]
  uint32_t bias = (*((uint32_t *) ADC_FUSES_BIASCAL_ADDR) & ADC_FUSES_BIASCAL_Msk) >> ADC_FUSES_BIASCAL_Pos;
     7c4:	069a      	lsls	r2, r3, #26
  linearity |= ((*((uint32_t *) ADC_FUSES_LINEARITY_1_ADDR) & ADC_FUSES_LINEARITY_1_Msk) >> ADC_FUSES_LINEARITY_1_Pos) << 5;
     7c6:	015b      	lsls	r3, r3, #5
  uint32_t linearity = (*((uint32_t *) ADC_FUSES_LINEARITY_0_ADDR) & ADC_FUSES_LINEARITY_0_Msk) >> ADC_FUSES_LINEARITY_0_Pos;
     7c8:	0ec9      	lsrs	r1, r1, #27
  linearity |= ((*((uint32_t *) ADC_FUSES_LINEARITY_1_ADDR) & ADC_FUSES_LINEARITY_1_Msk) >> ADC_FUSES_LINEARITY_1_Pos) << 5;
     7ca:	4023      	ands	r3, r4
  uint32_t bias = (*((uint32_t *) ADC_FUSES_BIASCAL_ADDR) & ADC_FUSES_BIASCAL_Msk) >> ADC_FUSES_BIASCAL_Pos;
     7cc:	0f52      	lsrs	r2, r2, #29

  ADC->CALIB.reg = ADC_CALIB_BIAS_CAL(bias) | ADC_CALIB_LINEARITY_CAL(linearity);
     7ce:	0212      	lsls	r2, r2, #8
  linearity |= ((*((uint32_t *) ADC_FUSES_LINEARITY_1_ADDR) & ADC_FUSES_LINEARITY_1_Msk) >> ADC_FUSES_LINEARITY_1_Pos) << 5;
     7d0:	430b      	orrs	r3, r1
  ADC->CALIB.reg = ADC_CALIB_BIAS_CAL(bias) | ADC_CALIB_LINEARITY_CAL(linearity);
     7d2:	4313      	orrs	r3, r2
     7d4:	4a12      	ldr	r2, [pc, #72]	; (820 <SystemInit+0x15c>)
     7d6:	8513      	strh	r3, [r2, #40]	; 0x28

  /*
   * 9) Disable automatic NVM write operations
   */
  NVMCTRL->CTRLB.bit.MANW = 1;
     7d8:	2380      	movs	r3, #128	; 0x80
     7da:	6842      	ldr	r2, [r0, #4]
     7dc:	4313      	orrs	r3, r2
     7de:	6043      	str	r3, [r0, #4]
}
     7e0:	bd70      	pop	{r4, r5, r6, pc}
     7e2:	46c0      	nop			; (mov r8, r8)
     7e4:	41004000 	.word	0x41004000
     7e8:	40000400 	.word	0x40000400
     7ec:	0000060c 	.word	0x0000060c
     7f0:	40000800 	.word	0x40000800
     7f4:	40000c00 	.word	0x40000c00
     7f8:	00010501 	.word	0x00010501
     7fc:	7dff05b9 	.word	0x7dff05b9
     800:	00000a04 	.word	0x00000a04
     804:	00030700 	.word	0x00030700
     808:	fffffcff 	.word	0xfffffcff
     80c:	00010603 	.word	0x00010603
     810:	02dc6c00 	.word	0x02dc6c00
     814:	20000014 	.word	0x20000014
     818:	00806024 	.word	0x00806024
     81c:	00806020 	.word	0x00806020
     820:	42004000 	.word	0x42004000

00000824 <_ZN7Serial_13getDescriptorER8USBSetup>:
}

int Serial_::getDescriptor(USBSetup& /* setup */)
{
	return 0;
}
     824:	2000      	movs	r0, #0
     826:	4770      	bx	lr

00000828 <_ZThn16_N7Serial_13getDescriptorER8USBSetup>:
	};

protected:
    // Implementation of the PUSBListNode
    int getInterface(uint8_t* interfaceNum);
    int getDescriptor(USBSetup& setup);
     828:	b408      	push	{r3}
     82a:	4b02      	ldr	r3, [pc, #8]	; (834 <_ZThn16_N7Serial_13getDescriptorER8USBSetup+0xc>)
     82c:	469c      	mov	ip, r3
     82e:	3810      	subs	r0, #16
     830:	bc08      	pop	{r3}
     832:	4760      	bx	ip
     834:	00000825 	.word	0x00000825

00000838 <_ZL5utox8mPc>:

static void utox8(uint32_t val, char* s) {
     838:	b530      	push	{r4, r5, lr}
	for (int i = 0; i < 8; i++) {
		int d = val & 0XF;
     83a:	250f      	movs	r5, #15
     83c:	1dcb      	adds	r3, r1, #7
     83e:	3901      	subs	r1, #1
     840:	0002      	movs	r2, r0
     842:	402a      	ands	r2, r5
		val = (val >> 4);

		s[7 - i] = d > 9 ? 'A' + d - 10 : '0' + d;
     844:	0014      	movs	r4, r2
		val = (val >> 4);
     846:	0900      	lsrs	r0, r0, #4
		s[7 - i] = d > 9 ? 'A' + d - 10 : '0' + d;
     848:	3430      	adds	r4, #48	; 0x30
     84a:	2a09      	cmp	r2, #9
     84c:	dd01      	ble.n	852 <_ZL5utox8mPc+0x1a>
     84e:	3237      	adds	r2, #55	; 0x37
     850:	0014      	movs	r4, r2
     852:	701c      	strb	r4, [r3, #0]
     854:	3b01      	subs	r3, #1
	for (int i = 0; i < 8; i++) {
     856:	428b      	cmp	r3, r1
     858:	d1f2      	bne.n	840 <_ZL5utox8mPc+0x8>
	}
}
     85a:	bd30      	pop	{r4, r5, pc}

0000085c <_ZN7Serial_12getShortNameEPc>:

uint8_t Serial_::getShortName(char* name) {
     85c:	b510      	push	{r4, lr}
     85e:	000c      	movs	r4, r1
	#define SERIAL_NUMBER_WORD_0	*(volatile uint32_t*)(0x0080A00C)
	#define SERIAL_NUMBER_WORD_1	*(volatile uint32_t*)(0x0080A040)
	#define SERIAL_NUMBER_WORD_2	*(volatile uint32_t*)(0x0080A044)
	#define SERIAL_NUMBER_WORD_3	*(volatile uint32_t*)(0x0080A048)

	utox8(SERIAL_NUMBER_WORD_0, &name[0]);
     860:	4b0b      	ldr	r3, [pc, #44]	; (890 <_ZN7Serial_12getShortNameEPc+0x34>)
     862:	6818      	ldr	r0, [r3, #0]
     864:	f7ff ffe8 	bl	838 <_ZL5utox8mPc>
	utox8(SERIAL_NUMBER_WORD_1, &name[8]);
     868:	0021      	movs	r1, r4
     86a:	4b0a      	ldr	r3, [pc, #40]	; (894 <_ZN7Serial_12getShortNameEPc+0x38>)
     86c:	3108      	adds	r1, #8
     86e:	6818      	ldr	r0, [r3, #0]
     870:	f7ff ffe2 	bl	838 <_ZL5utox8mPc>
	utox8(SERIAL_NUMBER_WORD_2, &name[16]);
     874:	0021      	movs	r1, r4
     876:	4b08      	ldr	r3, [pc, #32]	; (898 <_ZN7Serial_12getShortNameEPc+0x3c>)
     878:	3110      	adds	r1, #16
     87a:	6818      	ldr	r0, [r3, #0]
     87c:	f7ff ffdc 	bl	838 <_ZL5utox8mPc>
	utox8(SERIAL_NUMBER_WORD_3, &name[24]);
     880:	0021      	movs	r1, r4
     882:	4b06      	ldr	r3, [pc, #24]	; (89c <_ZN7Serial_12getShortNameEPc+0x40>)
     884:	3118      	adds	r1, #24
     886:	6818      	ldr	r0, [r3, #0]
     888:	f7ff ffd6 	bl	838 <_ZL5utox8mPc>
	return 32;
}
     88c:	2020      	movs	r0, #32
     88e:	bd10      	pop	{r4, pc}
     890:	0080a00c 	.word	0x0080a00c
     894:	0080a040 	.word	0x0080a040
     898:	0080a044 	.word	0x0080a044
     89c:	0080a048 	.word	0x0080a048

000008a0 <_ZThn16_N7Serial_12getShortNameEPc>:
    bool setup(USBSetup& setup);
    uint8_t getShortName(char* name);
     8a0:	b408      	push	{r3}
     8a2:	4b02      	ldr	r3, [pc, #8]	; (8ac <_ZThn16_N7Serial_12getShortNameEPc+0xc>)
     8a4:	469c      	mov	ip, r3
     8a6:	3810      	subs	r0, #16
     8a8:	bc08      	pop	{r3}
     8aa:	4760      	bx	ip
     8ac:	0000085d 	.word	0x0000085d

000008b0 <_ZN7Serial_14handleEndpointEi>:

void Serial_::handleEndpoint(int /* ep */) {
}
     8b0:	4770      	bx	lr
	...

000008b4 <_ZThn16_N7Serial_14handleEndpointEi>:
    void handleEndpoint(int ep);
     8b4:	b408      	push	{r3}
     8b6:	4b02      	ldr	r3, [pc, #8]	; (8c0 <_ZThn16_N7Serial_14handleEndpointEi+0xc>)
     8b8:	469c      	mov	ip, r3
     8ba:	3810      	subs	r0, #16
     8bc:	bc08      	pop	{r3}
     8be:	4760      	bx	ip
     8c0:	000008b1 	.word	0x000008b1

000008c4 <_ZN7Serial_17availableForWriteEv>:
int Serial_::availableForWrite(void)
{
	// return the number of bytes left in the current bank,
	// always EP size - 1, because bank is flushed on every write
	return (EPX_SIZE - 1);
}
     8c4:	203f      	movs	r0, #63	; 0x3f
     8c6:	4770      	bx	lr

000008c8 <_ZN7Serial_5writeEh>:
		setWriteError();
		return 0;
	}
}

size_t Serial_::write(uint8_t c) {
     8c8:	b513      	push	{r0, r1, r4, lr}
     8ca:	466b      	mov	r3, sp
	return write(&c, 1);
     8cc:	6802      	ldr	r2, [r0, #0]
size_t Serial_::write(uint8_t c) {
     8ce:	71d9      	strb	r1, [r3, #7]
     8d0:	3307      	adds	r3, #7
	return write(&c, 1);
     8d2:	6854      	ldr	r4, [r2, #4]
     8d4:	0019      	movs	r1, r3
     8d6:	2201      	movs	r2, #1
     8d8:	47a0      	blx	r4
}
     8da:	bd16      	pop	{r1, r2, r4, pc}

000008dc <_ZN7Serial_12getInterfaceEPh>:
{
     8dc:	b5f0      	push	{r4, r5, r6, r7, lr}
	interfaceNum[0] += 2;	// uses 2
     8de:	780b      	ldrb	r3, [r1, #0]
{
     8e0:	b095      	sub	sp, #84	; 0x54
	};
     8e2:	ac03      	add	r4, sp, #12
	interfaceNum[0] += 2;	// uses 2
     8e4:	3302      	adds	r3, #2
{
     8e6:	9001      	str	r0, [sp, #4]
	interfaceNum[0] += 2;	// uses 2
     8e8:	700b      	strb	r3, [r1, #0]
	};
     8ea:	2242      	movs	r2, #66	; 0x42
     8ec:	2100      	movs	r1, #0
     8ee:	0020      	movs	r0, r4
     8f0:	f004 fc7f 	bl	51f2 <memset>
     8f4:	2209      	movs	r2, #9
     8f6:	2504      	movs	r5, #4
     8f8:	7222      	strb	r2, [r4, #8]
     8fa:	2204      	movs	r2, #4
     8fc:	75a5      	strb	r5, [r4, #22]
     8fe:	7262      	strb	r2, [r4, #9]
     900:	2506      	movs	r5, #6
     902:	2205      	movs	r2, #5
     904:	2024      	movs	r0, #36	; 0x24
     906:	ae02      	add	r6, sp, #8
     908:	7665      	strb	r5, [r4, #25]
     90a:	7725      	strb	r5, [r4, #28]
     90c:	1995      	adds	r5, r2, r6
     90e:	74a0      	strb	r0, [r4, #18]
     910:	75e0      	strb	r0, [r4, #23]
     912:	76e0      	strb	r0, [r4, #27]
     914:	77e8      	strb	r0, [r5, #31]
     916:	0030      	movs	r0, r6
     918:	2101      	movs	r1, #1
     91a:	3006      	adds	r0, #6
     91c:	77c1      	strb	r1, [r0, #31]
     91e:	0030      	movs	r0, r6
     920:	3007      	adds	r0, #7
     922:	77c1      	strb	r1, [r0, #31]
     924:	a804      	add	r0, sp, #16
     926:	77c1      	strb	r1, [r0, #31]
     928:	2009      	movs	r0, #9
     92a:	7321      	strb	r1, [r4, #12]
     92c:	7561      	strb	r1, [r4, #21]
     92e:	1980      	adds	r0, r0, r6
     930:	3106      	adds	r1, #6
     932:	77c1      	strb	r1, [r0, #31]
     934:	200a      	movs	r0, #10
     936:	1980      	adds	r0, r0, r6
     938:	77c2      	strb	r2, [r0, #31]
     93a:	2003      	movs	r0, #3
     93c:	4684      	mov	ip, r0
     93e:	4665      	mov	r5, ip
     940:	a805      	add	r0, sp, #20
     942:	77c5      	strb	r5, [r0, #31]
     944:	202e      	movs	r0, #46	; 0x2e
     946:	2710      	movs	r7, #16
     948:	1980      	adds	r0, r0, r6
     94a:	7007      	strb	r7, [r0, #0]
     94c:	202f      	movs	r0, #47	; 0x2f
     94e:	2509      	movs	r5, #9
     950:	2308      	movs	r3, #8
     952:	1980      	adds	r0, r0, r6
     954:	7005      	strb	r5, [r0, #0]
     956:	2504      	movs	r5, #4
     958:	7023      	strb	r3, [r4, #0]
     95a:	3303      	adds	r3, #3
     95c:	7063      	strb	r3, [r4, #1]
     95e:	a80e      	add	r0, sp, #56	; 0x38
     960:	3b09      	subs	r3, #9
     962:	70e3      	strb	r3, [r4, #3]
     964:	7123      	strb	r3, [r4, #4]
     966:	7163      	strb	r3, [r4, #5]
     968:	7363      	strb	r3, [r4, #13]
     96a:	73a3      	strb	r3, [r4, #14]
     96c:	7462      	strb	r2, [r4, #17]
     96e:	7623      	strb	r3, [r4, #24]
     970:	76a2      	strb	r2, [r4, #26]
     972:	77e2      	strb	r2, [r4, #31]
     974:	7527      	strb	r7, [r4, #20]
     976:	8527      	strh	r7, [r4, #40]	; 0x28
     978:	7005      	strb	r5, [r0, #0]
     97a:	2033      	movs	r0, #51	; 0x33
     97c:	0035      	movs	r5, r6
     97e:	1980      	adds	r0, r0, r6
     980:	260a      	movs	r6, #10
     982:	7003      	strb	r3, [r0, #0]
     984:	a80f      	add	r0, sp, #60	; 0x3c
     986:	7006      	strb	r6, [r0, #0]
     988:	a810      	add	r0, sp, #64	; 0x40
     98a:	7001      	strb	r1, [r0, #0]
     98c:	2039      	movs	r0, #57	; 0x39
     98e:	1940      	adds	r0, r0, r5
     990:	7002      	strb	r2, [r0, #0]
     992:	203b      	movs	r0, #59	; 0x3b
     994:	3635      	adds	r6, #53	; 0x35
     996:	1976      	adds	r6, r6, r5
     998:	7031      	strb	r1, [r6, #0]
     99a:	a912      	add	r1, sp, #72	; 0x48
     99c:	700a      	strb	r2, [r1, #0]
		D_ENDPOINT(USB_ENDPOINT_IN(CDC_ENDPOINT_ACM), USB_ENDPOINT_TYPE_INTERRUPT, 0x10, 0x10),
     99e:	2180      	movs	r1, #128	; 0x80
	};
     9a0:	323d      	adds	r2, #61	; 0x3d
     9a2:	1940      	adds	r0, r0, r5
     9a4:	1952      	adds	r2, r2, r5
     9a6:	7003      	strb	r3, [r0, #0]
     9a8:	7013      	strb	r3, [r2, #0]
     9aa:	2040      	movs	r0, #64	; 0x40
     9ac:	2200      	movs	r2, #0
		D_ENDPOINT(USB_ENDPOINT_IN(CDC_ENDPOINT_ACM), USB_ENDPOINT_TYPE_INTERRUPT, 0x10, 0x10),
     9ae:	4249      	negs	r1, r1
     9b0:	000e      	movs	r6, r1
	};
     9b2:	3341      	adds	r3, #65	; 0x41
     9b4:	195b      	adds	r3, r3, r5
     9b6:	7018      	strb	r0, [r3, #0]
     9b8:	705a      	strb	r2, [r3, #1]
		D_IAD(pluggedInterface, 2, CDC_COMMUNICATION_INTERFACE_CLASS, CDC_ABSTRACT_CONTROL_MODEL, 0),
     9ba:	9b01      	ldr	r3, [sp, #4]
	};
     9bc:	8720      	strh	r0, [r4, #56]	; 0x38
		D_IAD(pluggedInterface, 2, CDC_COMMUNICATION_INTERFACE_CLASS, CDC_ABSTRACT_CONTROL_MODEL, 0),
     9be:	7d1b      	ldrb	r3, [r3, #20]
		D_ENDPOINT(USB_ENDPOINT_IN(CDC_ENDPOINT_ACM), USB_ENDPOINT_TYPE_INTERRUPT, 0x10, 0x10),
     9c0:	9a01      	ldr	r2, [sp, #4]
	};
     9c2:	70a3      	strb	r3, [r4, #2]
     9c4:	72a3      	strb	r3, [r4, #10]
     9c6:	7763      	strb	r3, [r4, #29]
		D_CDCCS(CDC_UNION, CDC_ACM_INTERFACE, CDC_DATA_INTERFACE), // Communication interface is master, data interface is slave 0
     9c8:	3301      	adds	r3, #1
     9ca:	b2db      	uxtb	r3, r3
	};
     9cc:	77a3      	strb	r3, [r4, #30]
		D_ENDPOINT(USB_ENDPOINT_IN(CDC_ENDPOINT_ACM), USB_ENDPOINT_TYPE_INTERRUPT, 0x10, 0x10),
     9ce:	7d52      	ldrb	r2, [r2, #21]
	};
     9d0:	3835      	subs	r0, #53	; 0x35
		D_ENDPOINT(USB_ENDPOINT_IN(CDC_ENDPOINT_ACM), USB_ENDPOINT_TYPE_INTERRUPT, 0x10, 0x10),
     9d2:	4316      	orrs	r6, r2
	};
     9d4:	1940      	adds	r0, r0, r5
     9d6:	77c6      	strb	r6, [r0, #31]
     9d8:	2031      	movs	r0, #49	; 0x31
     9da:	1940      	adds	r0, r0, r5
     9dc:	7003      	strb	r3, [r0, #0]
     9de:	233a      	movs	r3, #58	; 0x3a
		D_ENDPOINT(USB_ENDPOINT_OUT(CDC_ENDPOINT_OUT), USB_ENDPOINT_TYPE_BULK, EPX_SIZE, 0),
     9e0:	1c50      	adds	r0, r2, #1
	};
     9e2:	195b      	adds	r3, r3, r5
     9e4:	7018      	strb	r0, [r3, #0]
     9e6:	2341      	movs	r3, #65	; 0x41
		D_ENDPOINT(USB_ENDPOINT_IN (CDC_ENDPOINT_IN), USB_ENDPOINT_TYPE_BULK, EPX_SIZE, 0)
     9e8:	3202      	adds	r2, #2
     9ea:	430a      	orrs	r2, r1
	};
     9ec:	195b      	adds	r3, r3, r5
     9ee:	701a      	strb	r2, [r3, #0]
	return USBDevice.sendControl(&_cdcInterface, sizeof(_cdcInterface));
     9f0:	0021      	movs	r1, r4
     9f2:	2242      	movs	r2, #66	; 0x42
     9f4:	4802      	ldr	r0, [pc, #8]	; (a00 <_ZN7Serial_12getInterfaceEPh+0x124>)
     9f6:	f000 ff6b 	bl	18d0 <_ZN14USBDeviceClass11sendControlEPKvm>
}
     9fa:	b015      	add	sp, #84	; 0x54
     9fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
     9fe:	46c0      	nop			; (mov r8, r8)
     a00:	20000148 	.word	0x20000148

00000a04 <_ZThn16_N7Serial_12getInterfaceEPh>:
    int getInterface(uint8_t* interfaceNum);
     a04:	b408      	push	{r3}
     a06:	4b02      	ldr	r3, [pc, #8]	; (a10 <_ZThn16_N7Serial_12getInterfaceEPh+0xc>)
     a08:	469c      	mov	ip, r3
     a0a:	3810      	subs	r0, #16
     a0c:	bc08      	pop	{r3}
     a0e:	4760      	bx	ip
     a10:	000008dd 	.word	0x000008dd

00000a14 <_ZN7Serial_5setupER8USBSetup>:
{
     a14:	b570      	push	{r4, r5, r6, lr}
	if (CDC_ACM_INTERFACE != i) {
     a16:	790a      	ldrb	r2, [r1, #4]
     a18:	7d03      	ldrb	r3, [r0, #20]
{
     a1a:	000c      	movs	r4, r1
		return false;
     a1c:	2500      	movs	r5, #0
	if (CDC_ACM_INTERFACE != i) {
     a1e:	429a      	cmp	r2, r3
     a20:	d10b      	bne.n	a3a <_ZN7Serial_5setupER8USBSetup+0x26>
	uint8_t requestType = setup.bmRequestType;
     a22:	780b      	ldrb	r3, [r1, #0]
	uint8_t r = setup.bRequest;
     a24:	784e      	ldrb	r6, [r1, #1]
	if (requestType == REQUEST_DEVICETOHOST_CLASS_INTERFACE)
     a26:	2ba1      	cmp	r3, #161	; 0xa1
     a28:	d109      	bne.n	a3e <_ZN7Serial_5setupER8USBSetup+0x2a>
		if (r == CDC_GET_LINE_CODING)
     a2a:	2e21      	cmp	r6, #33	; 0x21
     a2c:	d105      	bne.n	a3a <_ZN7Serial_5setupER8USBSetup+0x26>
			USBDevice.sendControl((void*)&_usbLineInfo, 7);
     a2e:	2207      	movs	r2, #7
     a30:	491f      	ldr	r1, [pc, #124]	; (ab0 <_ZN7Serial_5setupER8USBSetup+0x9c>)
     a32:	4820      	ldr	r0, [pc, #128]	; (ab4 <_ZN7Serial_5setupER8USBSetup+0xa0>)
     a34:	f000 ff4c 	bl	18d0 <_ZN14USBDeviceClass11sendControlEPKvm>
			return true;
     a38:	3501      	adds	r5, #1
}
     a3a:	0028      	movs	r0, r5
     a3c:	bd70      	pop	{r4, r5, r6, pc}
	if (requestType == REQUEST_HOSTTODEVICE_CLASS_INTERFACE)
     a3e:	2b21      	cmp	r3, #33	; 0x21
     a40:	d1fb      	bne.n	a3a <_ZN7Serial_5setupER8USBSetup+0x26>
		if (r == CDC_SET_LINE_CODING)
     a42:	2e20      	cmp	r6, #32
     a44:	d119      	bne.n	a7a <_ZN7Serial_5setupER8USBSetup+0x66>
			USBDevice.recvControl((void*)&_usbLineInfo, 7);
     a46:	2207      	movs	r2, #7
     a48:	4919      	ldr	r1, [pc, #100]	; (ab0 <_ZN7Serial_5setupER8USBSetup+0x9c>)
     a4a:	481a      	ldr	r0, [pc, #104]	; (ab4 <_ZN7Serial_5setupER8USBSetup+0xa0>)
     a4c:	f000 fe76 	bl	173c <_ZN14USBDeviceClass11recvControlEPvm>
			if (_usbLineInfo.dwDTERate == 1200 && (_usbLineInfo.lineState & CDC_LINESTATE_DTR) == 0)
     a50:	4b17      	ldr	r3, [pc, #92]	; (ab0 <_ZN7Serial_5setupER8USBSetup+0x9c>)
     a52:	781a      	ldrb	r2, [r3, #0]
     a54:	7859      	ldrb	r1, [r3, #1]
     a56:	0209      	lsls	r1, r1, #8
     a58:	4311      	orrs	r1, r2
     a5a:	789a      	ldrb	r2, [r3, #2]
     a5c:	0412      	lsls	r2, r2, #16
     a5e:	4311      	orrs	r1, r2
     a60:	78da      	ldrb	r2, [r3, #3]
     a62:	0612      	lsls	r2, r2, #24
     a64:	430a      	orrs	r2, r1
     a66:	2196      	movs	r1, #150	; 0x96
     a68:	00c9      	lsls	r1, r1, #3
     a6a:	428a      	cmp	r2, r1
     a6c:	d102      	bne.n	a74 <_ZN7Serial_5setupER8USBSetup+0x60>
     a6e:	79db      	ldrb	r3, [r3, #7]
     a70:	07db      	lsls	r3, r3, #31
     a72:	d508      	bpl.n	a86 <_ZN7Serial_5setupER8USBSetup+0x72>
				cancelReset();
     a74:	f7ff fde2 	bl	63c <cancelReset>
     a78:	e008      	b.n	a8c <_ZN7Serial_5setupER8USBSetup+0x78>
		if (r == CDC_SET_CONTROL_LINE_STATE)
     a7a:	2e22      	cmp	r6, #34	; 0x22
     a7c:	d10a      	bne.n	a94 <_ZN7Serial_5setupER8USBSetup+0x80>
			_usbLineInfo.lineState = setup.wValueL;
     a7e:	788a      	ldrb	r2, [r1, #2]
     a80:	4b0b      	ldr	r3, [pc, #44]	; (ab0 <_ZN7Serial_5setupER8USBSetup+0x9c>)
     a82:	71da      	strb	r2, [r3, #7]
     a84:	e7e4      	b.n	a50 <_ZN7Serial_5setupER8USBSetup+0x3c>
				initiateReset(250);
     a86:	20fa      	movs	r0, #250	; 0xfa
     a88:	f7ff fdce 	bl	628 <initiateReset>
			USBDevice.sendZlp(0);
     a8c:	2100      	movs	r1, #0
     a8e:	4809      	ldr	r0, [pc, #36]	; (ab4 <_ZN7Serial_5setupER8USBSetup+0xa0>)
     a90:	f001 f834 	bl	1afc <_ZN14USBDeviceClass7sendZlpEm>
		return true;
     a94:	2501      	movs	r5, #1
		if (CDC_SEND_BREAK == r)
     a96:	2e23      	cmp	r6, #35	; 0x23
     a98:	d1cf      	bne.n	a3a <_ZN7Serial_5setupER8USBSetup+0x26>
			breakValue = ((uint16_t)setup.wValueH << 8) | setup.wValueL;
     a9a:	78e3      	ldrb	r3, [r4, #3]
     a9c:	78a2      	ldrb	r2, [r4, #2]
     a9e:	021b      	lsls	r3, r3, #8
     aa0:	4313      	orrs	r3, r2
     aa2:	4a05      	ldr	r2, [pc, #20]	; (ab8 <_ZN7Serial_5setupER8USBSetup+0xa4>)
			USBDevice.sendZlp(0);
     aa4:	2100      	movs	r1, #0
     aa6:	4803      	ldr	r0, [pc, #12]	; (ab4 <_ZN7Serial_5setupER8USBSetup+0xa0>)
			breakValue = ((uint16_t)setup.wValueH << 8) | setup.wValueL;
     aa8:	6013      	str	r3, [r2, #0]
			USBDevice.sendZlp(0);
     aaa:	f001 f827 	bl	1afc <_ZN14USBDeviceClass7sendZlpEm>
     aae:	e7c4      	b.n	a3a <_ZN7Serial_5setupER8USBSetup+0x26>
     ab0:	20000008 	.word	0x20000008
     ab4:	20000148 	.word	0x20000148
     ab8:	20000004 	.word	0x20000004

00000abc <_ZThn16_N7Serial_5setupER8USBSetup>:
    bool setup(USBSetup& setup);
     abc:	b408      	push	{r3}
     abe:	4b02      	ldr	r3, [pc, #8]	; (ac8 <_ZThn16_N7Serial_5setupER8USBSetup+0xc>)
     ac0:	469c      	mov	ip, r3
     ac2:	3810      	subs	r0, #16
     ac4:	bc08      	pop	{r3}
     ac6:	4760      	bx	ip
     ac8:	00000a15 	.word	0x00000a15

00000acc <_ZN7Serial_9availableEv>:
{
     acc:	b510      	push	{r4, lr}
	return usb.available(CDC_ENDPOINT_OUT) + (_serialPeek != -1);
     ace:	7d41      	ldrb	r1, [r0, #21]
     ad0:	6a00      	ldr	r0, [r0, #32]
     ad2:	3101      	adds	r1, #1
     ad4:	f000 fd5c 	bl	1590 <_ZN14USBDeviceClass9availableEm>
     ad8:	4b03      	ldr	r3, [pc, #12]	; (ae8 <_ZN7Serial_9availableEv+0x1c>)
     ada:	681b      	ldr	r3, [r3, #0]
     adc:	3301      	adds	r3, #1
     ade:	1e5a      	subs	r2, r3, #1
     ae0:	4193      	sbcs	r3, r2
     ae2:	1818      	adds	r0, r3, r0
}
     ae4:	bd10      	pop	{r4, pc}
     ae6:	46c0      	nop			; (mov r8, r8)
     ae8:	20000010 	.word	0x20000010

00000aec <_ZN7Serial_5flushEv>:
{
     aec:	b510      	push	{r4, lr}
	usb.flush(CDC_ENDPOINT_IN);
     aee:	7d41      	ldrb	r1, [r0, #21]
     af0:	6a00      	ldr	r0, [r0, #32]
     af2:	3102      	adds	r1, #2
     af4:	f000 fd62 	bl	15bc <_ZN14USBDeviceClass5flushEm>
}
     af8:	bd10      	pop	{r4, pc}

00000afa <_ZN7Serial_5clearEv>:
void Serial_::clear(void) {
     afa:	b510      	push	{r4, lr}
	usb.clear(CDC_ENDPOINT_IN);
     afc:	7d41      	ldrb	r1, [r0, #21]
     afe:	6a00      	ldr	r0, [r0, #32]
     b00:	3102      	adds	r1, #2
     b02:	f000 fd29 	bl	1558 <_ZN14USBDeviceClass5clearEm>
}
     b06:	bd10      	pop	{r4, pc}

00000b08 <_ZN7Serial_5writeEPKhj>:
{
     b08:	b570      	push	{r4, r5, r6, lr}
     b0a:	000d      	movs	r5, r1
	uint32_t r = usb.send(CDC_ENDPOINT_IN, buffer, size);
     b0c:	7d41      	ldrb	r1, [r0, #21]
{
     b0e:	0004      	movs	r4, r0
     b10:	0013      	movs	r3, r2
	uint32_t r = usb.send(CDC_ENDPOINT_IN, buffer, size);
     b12:	3102      	adds	r1, #2
     b14:	002a      	movs	r2, r5
     b16:	6a00      	ldr	r0, [r0, #32]
     b18:	f000 fe24 	bl	1764 <_ZN14USBDeviceClass4sendEmPKvm>
	if (r > 0) {
     b1c:	2800      	cmp	r0, #0
     b1e:	d101      	bne.n	b24 <_ZN7Serial_5writeEPKhj+0x1c>
    void setWriteError(int err = 1) { write_error = err; }
     b20:	2301      	movs	r3, #1
     b22:	6063      	str	r3, [r4, #4]
}
     b24:	bd70      	pop	{r4, r5, r6, pc}
	...

00000b28 <_ZN7Serial_4peekEv>:
{
     b28:	b510      	push	{r4, lr}
	if (_serialPeek != -1)
     b2a:	4c05      	ldr	r4, [pc, #20]	; (b40 <_ZN7Serial_4peekEv+0x18>)
     b2c:	6823      	ldr	r3, [r4, #0]
     b2e:	1c5a      	adds	r2, r3, #1
     b30:	d104      	bne.n	b3c <_ZN7Serial_4peekEv+0x14>
	_serialPeek = read();
     b32:	6803      	ldr	r3, [r0, #0]
     b34:	695b      	ldr	r3, [r3, #20]
     b36:	4798      	blx	r3
     b38:	0003      	movs	r3, r0
     b3a:	6020      	str	r0, [r4, #0]
}
     b3c:	0018      	movs	r0, r3
     b3e:	bd10      	pop	{r4, pc}
     b40:	20000010 	.word	0x20000010

00000b44 <_ZN7Serial_4readEv>:
	if (_serialPeek != -1) {
     b44:	4a07      	ldr	r2, [pc, #28]	; (b64 <_ZN7Serial_4readEv+0x20>)
{
     b46:	0003      	movs	r3, r0
	if (_serialPeek != -1) {
     b48:	6810      	ldr	r0, [r2, #0]
{
     b4a:	b510      	push	{r4, lr}
	if (_serialPeek != -1) {
     b4c:	1c41      	adds	r1, r0, #1
     b4e:	d003      	beq.n	b58 <_ZN7Serial_4readEv+0x14>
		_serialPeek = -1;
     b50:	2301      	movs	r3, #1
     b52:	425b      	negs	r3, r3
     b54:	6013      	str	r3, [r2, #0]
}
     b56:	bd10      	pop	{r4, pc}
	return usb.recv(CDC_ENDPOINT_OUT);
     b58:	7d59      	ldrb	r1, [r3, #21]
     b5a:	6a18      	ldr	r0, [r3, #32]
     b5c:	3101      	adds	r1, #1
     b5e:	f000 fdb1 	bl	16c4 <_ZN14USBDeviceClass4recvEm>
     b62:	e7f8      	b.n	b56 <_ZN7Serial_4readEv+0x12>
     b64:	20000010 	.word	0x20000010

00000b68 <_ZN7Serial_C1ER14USBDeviceClass>:
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
     b68:	23fa      	movs	r3, #250	; 0xfa
     b6a:	009b      	lsls	r3, r3, #2
Serial_::Serial_(USBDeviceClass &_usb) : PluggableUSBModule(3, 2, epType), usb(_usb), stalled(false)
     b6c:	b570      	push	{r4, r5, r6, lr}
     b6e:	0004      	movs	r4, r0
     b70:	6083      	str	r3, [r0, #8]
#if defined(USBCON)

class PluggableUSBModule {
public:
  PluggableUSBModule(uint8_t numEps, uint8_t numIfs, uint32_t *epType) :
    numEndpoints(numEps), numInterfaces(numIfs), endpointType(epType)
     b72:	2303      	movs	r3, #3
     b74:	7583      	strb	r3, [r0, #22]
     b76:	0023      	movs	r3, r4
    Print() : write_error(0) {}
     b78:	2200      	movs	r2, #0
     b7a:	3328      	adds	r3, #40	; 0x28
     b7c:	6042      	str	r2, [r0, #4]
     b7e:	61a3      	str	r3, [r4, #24]
     b80:	4b0c      	ldr	r3, [pc, #48]	; (bb4 <_ZN7Serial_C1ER14USBDeviceClass+0x4c>)
     b82:	2002      	movs	r0, #2
     b84:	001d      	movs	r5, r3
     b86:	3344      	adds	r3, #68	; 0x44
     b88:	6123      	str	r3, [r4, #16]
     b8a:	3508      	adds	r5, #8
     b8c:	1d63      	adds	r3, r4, #5
     b8e:	61e2      	str	r2, [r4, #28]
     b90:	6025      	str	r5, [r4, #0]
     b92:	6221      	str	r1, [r4, #32]
     b94:	75e0      	strb	r0, [r4, #23]
     b96:	77da      	strb	r2, [r3, #31]
  epType[0] = USB_ENDPOINT_TYPE_INTERRUPT | USB_ENDPOINT_IN(0);
     b98:	2383      	movs	r3, #131	; 0x83
     b9a:	62a3      	str	r3, [r4, #40]	; 0x28
  epType[2] = USB_ENDPOINT_TYPE_BULK | USB_ENDPOINT_IN(0);
     b9c:	3b01      	subs	r3, #1
     b9e:	6323      	str	r3, [r4, #48]	; 0x30
  epType[1] = USB_ENDPOINT_TYPE_BULK | USB_ENDPOINT_OUT(0);
     ba0:	62e0      	str	r0, [r4, #44]	; 0x2c
  PluggableUSB().plug(this);
     ba2:	f000 f8c1 	bl	d28 <_Z12PluggableUSBv>
Serial_::Serial_(USBDeviceClass &_usb) : PluggableUSBModule(3, 2, epType), usb(_usb), stalled(false)
     ba6:	0021      	movs	r1, r4
     ba8:	3110      	adds	r1, #16
  PluggableUSB().plug(this);
     baa:	f000 f891 	bl	cd0 <_ZN13PluggableUSB_4plugEP18PluggableUSBModule>
}
     bae:	0020      	movs	r0, r4
     bb0:	bd70      	pop	{r4, r5, r6, pc}
     bb2:	46c0      	nop			; (mov r8, r8)
     bb4:	00005424 	.word	0x00005424

00000bb8 <_ZN7Serial_15enableInterruptEv>:
void Serial_::enableInterrupt() {
     bb8:	b510      	push	{r4, lr}
	usbd.epBank1EnableTransferComplete(CDC_ENDPOINT_ACM);
     bba:	7d43      	ldrb	r3, [r0, #21]
	inline void epBank0EnableStalled(ep_t ep)          { usb.DeviceEndpoint[ep].EPINTENSET.bit.STALL0 = 1; }
	inline void epBank1EnableStalled(ep_t ep)          { usb.DeviceEndpoint[ep].EPINTENSET.bit.STALL1 = 1; }
	inline void epBank0EnableTransferFailed(ep_t ep)   { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRFAIL0 = 1; }
	inline void epBank1EnableTransferFailed(ep_t ep)   { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRFAIL1 = 1; }
	inline void epBank0EnableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRCPT0 = 1; }
	inline void epBank1EnableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRCPT1 = 1; }
     bbc:	4a09      	ldr	r2, [pc, #36]	; (be4 <_ZN7Serial_15enableInterruptEv+0x2c>)
     bbe:	2002      	movs	r0, #2
     bc0:	0159      	lsls	r1, r3, #5
	usbd.epBank0EnableTransferComplete(CDC_ENDPOINT_OUT);
     bc2:	3301      	adds	r3, #1
     bc4:	6812      	ldr	r2, [r2, #0]
	inline void epBank0EnableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRCPT0 = 1; }
     bc6:	b2db      	uxtb	r3, r3
     bc8:	015b      	lsls	r3, r3, #5
	inline void epBank1EnableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRCPT1 = 1; }
     bca:	1851      	adds	r1, r2, r1
	inline void epBank0EnableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRCPT0 = 1; }
     bcc:	18d3      	adds	r3, r2, r3
     bce:	2201      	movs	r2, #1
	inline void epBank1EnableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRCPT1 = 1; }
     bd0:	31ff      	adds	r1, #255	; 0xff
     bd2:	7a8c      	ldrb	r4, [r1, #10]
	inline void epBank0EnableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRCPT0 = 1; }
     bd4:	33ff      	adds	r3, #255	; 0xff
	inline void epBank1EnableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRCPT1 = 1; }
     bd6:	4320      	orrs	r0, r4
     bd8:	7288      	strb	r0, [r1, #10]
	inline void epBank0EnableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRCPT0 = 1; }
     bda:	7a99      	ldrb	r1, [r3, #10]
     bdc:	430a      	orrs	r2, r1
     bde:	729a      	strb	r2, [r3, #10]
}
     be0:	bd10      	pop	{r4, pc}
     be2:	46c0      	nop			; (mov r8, r8)
     be4:	20000600 	.word	0x20000600

00000be8 <_ZN7Serial_5beginEm>:
}
     be8:	4770      	bx	lr
	...

00000bec <_ZN7Serial_cvbEv>:
// setup() before printing to ensure that an application on the host is
// actually ready to receive and display the data.
// We add a short delay before returning to fix a bug observed by Federico
// where the port is configured (lineState != 0) but not quite opened.
Serial_::operator bool()
{
     bec:	b510      	push	{r4, lr}
	// this is here to avoid spurious opening after upload
	if (millis() < 500)
     bee:	f7ff fb6d 	bl	2cc <millis>
     bf2:	23f4      	movs	r3, #244	; 0xf4
     bf4:	33ff      	adds	r3, #255	; 0xff
		return false;
     bf6:	2400      	movs	r4, #0
	if (millis() < 500)
     bf8:	4298      	cmp	r0, r3
     bfa:	d907      	bls.n	c0c <_ZN7Serial_cvbEv+0x20>

	bool result = false;

	if (_usbLineInfo.lineState > 0)
     bfc:	4b04      	ldr	r3, [pc, #16]	; (c10 <_ZN7Serial_cvbEv+0x24>)
	{
		result = true;
	}

	delay(10);
     bfe:	200a      	movs	r0, #10
	if (_usbLineInfo.lineState > 0)
     c00:	79dc      	ldrb	r4, [r3, #7]
     c02:	1e63      	subs	r3, r4, #1
     c04:	419c      	sbcs	r4, r3
     c06:	b2e4      	uxtb	r4, r4
	delay(10);
     c08:	f7ff fb96 	bl	338 <delay>
	return result;
}
     c0c:	0020      	movs	r0, r4
     c0e:	bd10      	pop	{r4, pc}
     c10:	20000008 	.word	0x20000008

00000c14 <_GLOBAL__sub_I__ZN7Serial_12getInterfaceEPh>:

bool Serial_::rts() {
	return ((_usbLineInfo.lineState & CDC_LINESTATE_RTS) == CDC_LINESTATE_RTS);
}

Serial_ SerialUSB(USBDevice);
     c14:	b510      	push	{r4, lr}
     c16:	4902      	ldr	r1, [pc, #8]	; (c20 <_GLOBAL__sub_I__ZN7Serial_12getInterfaceEPh+0xc>)
     c18:	4802      	ldr	r0, [pc, #8]	; (c24 <_GLOBAL__sub_I__ZN7Serial_12getInterfaceEPh+0x10>)
     c1a:	f7ff ffa5 	bl	b68 <_ZN7Serial_C1ER14USBDeviceClass>
     c1e:	bd10      	pop	{r4, pc}
     c20:	20000148 	.word	0x20000148
     c24:	200000e0 	.word	0x200000e0

00000c28 <_ZN13PluggableUSB_12getInterfaceEPh>:
#if defined(USBCON) && defined(PLUGGABLE_USB_ENABLED)

extern uint32_t EndPoints[];

int PluggableUSB_::getInterface(uint8_t* interfaceCount)
{
     c28:	b570      	push	{r4, r5, r6, lr}
     c2a:	000e      	movs	r6, r1
	int sent = 0;
     c2c:	2500      	movs	r5, #0
	PluggableUSBModule* node;
	for (node = rootNode; node; node = node->next) {
     c2e:	6844      	ldr	r4, [r0, #4]
     c30:	2c00      	cmp	r4, #0
     c32:	d00b      	beq.n	c4c <_ZN13PluggableUSB_12getInterfaceEPh+0x24>
		int res = node->getInterface(interfaceCount);
     c34:	6823      	ldr	r3, [r4, #0]
     c36:	0031      	movs	r1, r6
     c38:	685b      	ldr	r3, [r3, #4]
     c3a:	0020      	movs	r0, r4
     c3c:	4798      	blx	r3
		if (res < 0)
     c3e:	2800      	cmp	r0, #0
     c40:	db02      	blt.n	c48 <_ZN13PluggableUSB_12getInterfaceEPh+0x20>
			return -1;
		sent += res;
     c42:	182d      	adds	r5, r5, r0
	for (node = rootNode; node; node = node->next) {
     c44:	68e4      	ldr	r4, [r4, #12]
     c46:	e7f3      	b.n	c30 <_ZN13PluggableUSB_12getInterfaceEPh+0x8>
			return -1;
     c48:	2501      	movs	r5, #1
     c4a:	426d      	negs	r5, r5
	}
	return sent;
}
     c4c:	0028      	movs	r0, r5
     c4e:	bd70      	pop	{r4, r5, r6, pc}

00000c50 <_ZN13PluggableUSB_13getDescriptorER8USBSetup>:

int PluggableUSB_::getDescriptor(USBSetup& setup)
{
     c50:	b570      	push	{r4, r5, r6, lr}
     c52:	000d      	movs	r5, r1
	PluggableUSBModule* node;
	for (node = rootNode; node; node = node->next) {
     c54:	6844      	ldr	r4, [r0, #4]
     c56:	2c00      	cmp	r4, #0
     c58:	d008      	beq.n	c6c <_ZN13PluggableUSB_13getDescriptorER8USBSetup+0x1c>
		int ret = node->getDescriptor(setup);
     c5a:	6823      	ldr	r3, [r4, #0]
     c5c:	0029      	movs	r1, r5
     c5e:	689b      	ldr	r3, [r3, #8]
     c60:	0020      	movs	r0, r4
     c62:	4798      	blx	r3
		// ret!=0 -> request has been processed
		if (ret)
     c64:	2800      	cmp	r0, #0
     c66:	d102      	bne.n	c6e <_ZN13PluggableUSB_13getDescriptorER8USBSetup+0x1e>
	for (node = rootNode; node; node = node->next) {
     c68:	68e4      	ldr	r4, [r4, #12]
     c6a:	e7f4      	b.n	c56 <_ZN13PluggableUSB_13getDescriptorER8USBSetup+0x6>
			return ret;
	}
	return 0;
     c6c:	0020      	movs	r0, r4
}
     c6e:	bd70      	pop	{r4, r5, r6, pc}

00000c70 <_ZN13PluggableUSB_12getShortNameEPc>:

uint8_t PluggableUSB_::getShortName(char *iSerialNum)
{
     c70:	b570      	push	{r4, r5, r6, lr}
     c72:	000d      	movs	r5, r1
	PluggableUSBModule* node;
	uint8_t size = 0;
     c74:	2600      	movs	r6, #0
	for (node = rootNode; node; node = node->next) {
     c76:	6844      	ldr	r4, [r0, #4]
     c78:	2c00      	cmp	r4, #0
     c7a:	d009      	beq.n	c90 <_ZN13PluggableUSB_12getShortNameEPc+0x20>
		uint8_t len = node->getShortName(iSerialNum);
     c7c:	6823      	ldr	r3, [r4, #0]
     c7e:	0029      	movs	r1, r5
     c80:	0020      	movs	r0, r4
     c82:	691b      	ldr	r3, [r3, #16]
     c84:	4798      	blx	r3
		iSerialNum += len;
		size += len;
     c86:	1836      	adds	r6, r6, r0
		iSerialNum += len;
     c88:	182d      	adds	r5, r5, r0
		size += len;
     c8a:	b2f6      	uxtb	r6, r6
	for (node = rootNode; node; node = node->next) {
     c8c:	68e4      	ldr	r4, [r4, #12]
     c8e:	e7f3      	b.n	c78 <_ZN13PluggableUSB_12getShortNameEPc+0x8>
	}
	*iSerialNum = 0;
	return size;
}
     c90:	0030      	movs	r0, r6
	*iSerialNum = 0;
     c92:	702c      	strb	r4, [r5, #0]
}
     c94:	bd70      	pop	{r4, r5, r6, pc}

00000c96 <_ZN13PluggableUSB_5setupER8USBSetup>:

bool PluggableUSB_::setup(USBSetup& setup)
{
     c96:	b570      	push	{r4, r5, r6, lr}
     c98:	000d      	movs	r5, r1
	PluggableUSBModule* node;
	for (node = rootNode; node; node = node->next) {
     c9a:	6844      	ldr	r4, [r0, #4]
     c9c:	2c00      	cmp	r4, #0
     c9e:	d008      	beq.n	cb2 <_ZN13PluggableUSB_5setupER8USBSetup+0x1c>
		if (node->setup(setup)) {
     ca0:	6823      	ldr	r3, [r4, #0]
     ca2:	0029      	movs	r1, r5
     ca4:	681b      	ldr	r3, [r3, #0]
     ca6:	0020      	movs	r0, r4
     ca8:	4798      	blx	r3
     caa:	2800      	cmp	r0, #0
     cac:	d102      	bne.n	cb4 <_ZN13PluggableUSB_5setupER8USBSetup+0x1e>
	for (node = rootNode; node; node = node->next) {
     cae:	68e4      	ldr	r4, [r4, #12]
     cb0:	e7f4      	b.n	c9c <_ZN13PluggableUSB_5setupER8USBSetup+0x6>
			return true;
		}
	}
	return false;
     cb2:	0020      	movs	r0, r4
}
     cb4:	bd70      	pop	{r4, r5, r6, pc}

00000cb6 <_ZN13PluggableUSB_14handleEndpointEi>:

void PluggableUSB_::handleEndpoint(int ep)
{
     cb6:	b570      	push	{r4, r5, r6, lr}
     cb8:	000d      	movs	r5, r1
	PluggableUSBModule* node;
	for (node = rootNode; node; node = node->next) {
     cba:	6844      	ldr	r4, [r0, #4]
     cbc:	2c00      	cmp	r4, #0
     cbe:	d006      	beq.n	cce <_ZN13PluggableUSB_14handleEndpointEi+0x18>
		node->handleEndpoint(ep);
     cc0:	6823      	ldr	r3, [r4, #0]
     cc2:	0020      	movs	r0, r4
     cc4:	68db      	ldr	r3, [r3, #12]
     cc6:	0029      	movs	r1, r5
     cc8:	4798      	blx	r3
	for (node = rootNode; node; node = node->next) {
     cca:	68e4      	ldr	r4, [r4, #12]
     ccc:	e7f6      	b.n	cbc <_ZN13PluggableUSB_14handleEndpointEi+0x6>
	}
}
     cce:	bd70      	pop	{r4, r5, r6, pc}

00000cd0 <_ZN13PluggableUSB_4plugEP18PluggableUSBModule>:

bool PluggableUSB_::plug(PluggableUSBModule *node)
{
     cd0:	b5f0      	push	{r4, r5, r6, r7, lr}
	if ((lastEp + node->numEndpoints) > USB_ENDPOINTS) {
     cd2:	798c      	ldrb	r4, [r1, #6]
     cd4:	7845      	ldrb	r5, [r0, #1]
{
     cd6:	0003      	movs	r3, r0
	if ((lastEp + node->numEndpoints) > USB_ENDPOINTS) {
     cd8:	192a      	adds	r2, r5, r4
		return false;
     cda:	2000      	movs	r0, #0
	if ((lastEp + node->numEndpoints) > USB_ENDPOINTS) {
     cdc:	2a07      	cmp	r2, #7
     cde:	dc1f      	bgt.n	d20 <_ZN13PluggableUSB_4plugEP18PluggableUSBModule+0x50>
	}

	if (!rootNode) {
     ce0:	685a      	ldr	r2, [r3, #4]
     ce2:	4282      	cmp	r2, r0
     ce4:	d116      	bne.n	d14 <_ZN13PluggableUSB_4plugEP18PluggableUSBModule+0x44>
		rootNode = node;
     ce6:	6059      	str	r1, [r3, #4]
			current = current->next;
		}
		current->next = node;
	}

	node->pluggedInterface = lastIf;
     ce8:	781a      	ldrb	r2, [r3, #0]
	node->pluggedEndpoint = lastEp;
	lastIf += node->numInterfaces;
     cea:	79c8      	ldrb	r0, [r1, #7]
	node->pluggedInterface = lastIf;
     cec:	710a      	strb	r2, [r1, #4]
	lastIf += node->numInterfaces;
     cee:	1812      	adds	r2, r2, r0
	node->pluggedEndpoint = lastEp;
     cf0:	714d      	strb	r5, [r1, #5]
	lastIf += node->numInterfaces;
     cf2:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < node->numEndpoints; i++) {
     cf4:	2200      	movs	r2, #0
		EndPoints[lastEp] = node->endpointType[i];
     cf6:	4d0b      	ldr	r5, [pc, #44]	; (d24 <_ZN13PluggableUSB_4plugEP18PluggableUSBModule+0x54>)
	for (uint8_t i = 0; i < node->numEndpoints; i++) {
     cf8:	4294      	cmp	r4, r2
     cfa:	dd10      	ble.n	d1e <_ZN13PluggableUSB_4plugEP18PluggableUSBModule+0x4e>
		EndPoints[lastEp] = node->endpointType[i];
     cfc:	688f      	ldr	r7, [r1, #8]
     cfe:	7858      	ldrb	r0, [r3, #1]
     d00:	0096      	lsls	r6, r2, #2
     d02:	59f7      	ldr	r7, [r6, r7]
	for (uint8_t i = 0; i < node->numEndpoints; i++) {
     d04:	3201      	adds	r2, #1
		EndPoints[lastEp] = node->endpointType[i];
     d06:	0086      	lsls	r6, r0, #2
		lastEp++;
     d08:	3001      	adds	r0, #1
		EndPoints[lastEp] = node->endpointType[i];
     d0a:	5177      	str	r7, [r6, r5]
	for (uint8_t i = 0; i < node->numEndpoints; i++) {
     d0c:	b2d2      	uxtb	r2, r2
		lastEp++;
     d0e:	7058      	strb	r0, [r3, #1]
	for (uint8_t i = 0; i < node->numEndpoints; i++) {
     d10:	e7f2      	b.n	cf8 <_ZN13PluggableUSB_4plugEP18PluggableUSBModule+0x28>
     d12:	0002      	movs	r2, r0
		while (current->next) {
     d14:	68d0      	ldr	r0, [r2, #12]
     d16:	2800      	cmp	r0, #0
     d18:	d1fb      	bne.n	d12 <_ZN13PluggableUSB_4plugEP18PluggableUSBModule+0x42>
		current->next = node;
     d1a:	60d1      	str	r1, [r2, #12]
     d1c:	e7e4      	b.n	ce8 <_ZN13PluggableUSB_4plugEP18PluggableUSBModule+0x18>
	}
	return true;
     d1e:	2001      	movs	r0, #1
	// restart USB layer???
}
     d20:	bdf0      	pop	{r4, r5, r6, r7, pc}
     d22:	46c0      	nop			; (mov r8, r8)
     d24:	20000120 	.word	0x20000120

00000d28 <_Z12PluggableUSBv>:

PluggableUSB_& PluggableUSB()
{
	static PluggableUSB_ obj;
     d28:	2201      	movs	r2, #1
     d2a:	4905      	ldr	r1, [pc, #20]	; (d40 <_Z12PluggableUSBv+0x18>)
     d2c:	4805      	ldr	r0, [pc, #20]	; (d44 <_Z12PluggableUSBv+0x1c>)
     d2e:	680b      	ldr	r3, [r1, #0]
     d30:	4013      	ands	r3, r2
     d32:	d103      	bne.n	d3c <_Z12PluggableUSBv+0x14>
	return obj;
}

PluggableUSB_::PluggableUSB_() : lastIf(0), lastEp(1), rootNode(NULL)
     d34:	7003      	strb	r3, [r0, #0]
     d36:	7042      	strb	r2, [r0, #1]
     d38:	6043      	str	r3, [r0, #4]
	static PluggableUSB_ obj;
     d3a:	600a      	str	r2, [r1, #0]
}
     d3c:	4770      	bx	lr
     d3e:	46c0      	nop			; (mov r8, r8)
     d40:	20000114 	.word	0x20000114
     d44:	20000118 	.word	0x20000118

00000d48 <_ZN26DoubleBufferedEPOutHandlerD1Ev>:

		release();
	}

	virtual ~DoubleBufferedEPOutHandler() {
	}
     d48:	4770      	bx	lr

00000d4a <_ZN26DoubleBufferedEPOutHandlerD0Ev>:
	virtual ~DoubleBufferedEPOutHandler() {
     d4a:	b510      	push	{r4, lr}
     d4c:	0004      	movs	r4, r0
	}
     d4e:	f001 fd47 	bl	27e0 <_ZdlPv>
     d52:	0020      	movs	r0, r4
     d54:	bd10      	pop	{r4, pc}
	...

00000d58 <_ZN14USBDeviceClass6initEPEmm.part.7>:
	for (uint8_t i = 1; (i < EP_ARRAY_SIZE) && (EndPoints[i] != 0); i++) {
		initEP(i, EndPoints[i]);
	}
}

void USBDeviceClass::initEP(uint32_t ep, uint32_t config)
     d58:	b5f0      	push	{r4, r5, r6, r7, lr}
		if (epHandlers[ep] != NULL) {
			delete (DoubleBufferedEPOutHandler*)epHandlers[ep];
		}
		epHandlers[ep] = new DoubleBufferedEPOutHandler(usbd, ep);
	}
	else if (config == (USB_ENDPOINT_TYPE_BULK | USB_ENDPOINT_IN(0)))
     d5a:	2982      	cmp	r1, #130	; 0x82
     d5c:	d119      	bne.n	d92 <_ZN14USBDeviceClass6initEPEmm.part.7+0x3a>
	inline void epBank1SetSize(ep_t ep, uint16_t size) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.SIZE = EP_PCKSIZE_SIZE(size); }
     d5e:	b2c3      	uxtb	r3, r0
     d60:	4d29      	ldr	r5, [pc, #164]	; (e08 <_ZN14USBDeviceClass6initEPEmm.part.7+0xb0>)
     d62:	015a      	lsls	r2, r3, #5
     d64:	18aa      	adds	r2, r5, r2
     d66:	6991      	ldr	r1, [r2, #24]
     d68:	4c28      	ldr	r4, [pc, #160]	; (e0c <_ZN14USBDeviceClass6initEPEmm.part.7+0xb4>)
	{
		usbd.epBank1SetSize(ep, 64);
		usbd.epBank1SetAddress(ep, &udd_ep_in_cache_buffer[ep]);
     d6a:	0180      	lsls	r0, r0, #6
     d6c:	400c      	ands	r4, r1
     d6e:	21c0      	movs	r1, #192	; 0xc0
     d70:	0589      	lsls	r1, r1, #22
     d72:	4321      	orrs	r1, r4
     d74:	6191      	str	r1, [r2, #24]
     d76:	4926      	ldr	r1, [pc, #152]	; (e10 <_ZN14USBDeviceClass6initEPEmm.part.7+0xb8>)
	inline void epBank1SetType(ep_t ep, uint8_t type) { usb.DeviceEndpoint[ep].EPCFG.bit.EPTYPE1 = type; }
     d78:	3308      	adds	r3, #8
     d7a:	1808      	adds	r0, r1, r0
     d7c:	2170      	movs	r1, #112	; 0x70
	inline void epBank1SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[1].ADDR.reg = (uint32_t)addr; }
     d7e:	6150      	str	r0, [r2, #20]
	inline void epBank1SetType(ep_t ep, uint8_t type) { usb.DeviceEndpoint[ep].EPCFG.bit.EPTYPE1 = type; }
     d80:	6828      	ldr	r0, [r5, #0]
     d82:	015b      	lsls	r3, r3, #5
     d84:	5c1a      	ldrb	r2, [r3, r0]
     d86:	438a      	bics	r2, r1
     d88:	0011      	movs	r1, r2
     d8a:	2230      	movs	r2, #48	; 0x30
     d8c:	430a      	orrs	r2, r1
     d8e:	541a      	strb	r2, [r3, r0]
		usbd.epBank1SetType(ep, 1); // CONTROL IN

		// Release OUT EP
		usbd.epReleaseOutBank0(ep, 64);
	}
}
     d90:	bdf0      	pop	{r4, r5, r6, r7, pc}
	else if (config == USB_ENDPOINT_TYPE_CONTROL)
     d92:	2900      	cmp	r1, #0
     d94:	d1fc      	bne.n	d90 <_ZN14USBDeviceClass6initEPEmm.part.7+0x38>
	inline void epBank0SetSize(ep_t ep, uint16_t size) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.SIZE = EP_PCKSIZE_SIZE(size); }
     d96:	26c0      	movs	r6, #192	; 0xc0
     d98:	b2c1      	uxtb	r1, r0
     d9a:	4c1b      	ldr	r4, [pc, #108]	; (e08 <_ZN14USBDeviceClass6initEPEmm.part.7+0xb0>)
     d9c:	014b      	lsls	r3, r1, #5
     d9e:	18e3      	adds	r3, r4, r3
     da0:	689a      	ldr	r2, [r3, #8]
     da2:	4d1a      	ldr	r5, [pc, #104]	; (e0c <_ZN14USBDeviceClass6initEPEmm.part.7+0xb4>)
     da4:	05b6      	lsls	r6, r6, #22
     da6:	402a      	ands	r2, r5
     da8:	4332      	orrs	r2, r6
     daa:	609a      	str	r2, [r3, #8]
		usbd.epBank0SetAddress(ep, &udd_ep_out_cache_buffer[ep]);
     dac:	4a19      	ldr	r2, [pc, #100]	; (e14 <_ZN14USBDeviceClass6initEPEmm.part.7+0xbc>)
     dae:	0180      	lsls	r0, r0, #6
     db0:	1812      	adds	r2, r2, r0
	inline void epBank0SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[0].ADDR.reg = (uint32_t)addr; }
     db2:	605a      	str	r2, [r3, #4]
	inline void epBank0SetType(ep_t ep, uint8_t type) { usb.DeviceEndpoint[ep].EPCFG.bit.EPTYPE0 = type; }
     db4:	000a      	movs	r2, r1
     db6:	2707      	movs	r7, #7
     db8:	6824      	ldr	r4, [r4, #0]
     dba:	3208      	adds	r2, #8
     dbc:	0152      	lsls	r2, r2, #5
     dbe:	5d11      	ldrb	r1, [r2, r4]
     dc0:	43b9      	bics	r1, r7
     dc2:	000f      	movs	r7, r1
     dc4:	2101      	movs	r1, #1
     dc6:	4339      	orrs	r1, r7
     dc8:	5511      	strb	r1, [r2, r4]
	inline void epBank1SetSize(ep_t ep, uint16_t size) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.SIZE = EP_PCKSIZE_SIZE(size); }
     dca:	699f      	ldr	r7, [r3, #24]
		usbd.epBank1SetAddress(ep, &udd_ep_in_cache_buffer[ep]);
     dcc:	4910      	ldr	r1, [pc, #64]	; (e10 <_ZN14USBDeviceClass6initEPEmm.part.7+0xb8>)
     dce:	403d      	ands	r5, r7
     dd0:	1808      	adds	r0, r1, r0
     dd2:	432e      	orrs	r6, r5
     dd4:	619e      	str	r6, [r3, #24]
	inline void epBank1SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[1].ADDR.reg = (uint32_t)addr; }
     dd6:	6158      	str	r0, [r3, #20]
	inline void epBank1SetType(ep_t ep, uint8_t type) { usb.DeviceEndpoint[ep].EPCFG.bit.EPTYPE1 = type; }
     dd8:	2070      	movs	r0, #112	; 0x70
     dda:	5d11      	ldrb	r1, [r2, r4]
     ddc:	4381      	bics	r1, r0
     dde:	0008      	movs	r0, r1
     de0:	2110      	movs	r1, #16
     de2:	4301      	orrs	r1, r0
     de4:	5511      	strb	r1, [r2, r4]
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
     de6:	6899      	ldr	r1, [r3, #8]
     de8:	480b      	ldr	r0, [pc, #44]	; (e18 <_ZN14USBDeviceClass6initEPEmm.part.7+0xc0>)
	inline void epBank0ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK0RDY = 1; }
     dea:	18a2      	adds	r2, r4, r2
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
     dec:	4008      	ands	r0, r1
     dee:	2180      	movs	r1, #128	; 0x80
     df0:	0349      	lsls	r1, r1, #13
     df2:	4301      	orrs	r1, r0
     df4:	6099      	str	r1, [r3, #8]
	inline void epBank0SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = bc; }
     df6:	6899      	ldr	r1, [r3, #8]
     df8:	0b89      	lsrs	r1, r1, #14
     dfa:	0389      	lsls	r1, r1, #14
     dfc:	6099      	str	r1, [r3, #8]
	inline void epBank0ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK0RDY = 1; }
     dfe:	2340      	movs	r3, #64	; 0x40
     e00:	7911      	ldrb	r1, [r2, #4]
     e02:	430b      	orrs	r3, r1
     e04:	7113      	strb	r3, [r2, #4]
     e06:	e7c3      	b.n	d90 <_ZN14USBDeviceClass6initEPEmm.part.7+0x38>
     e08:	20000600 	.word	0x20000600
     e0c:	8fffffff 	.word	0x8fffffff
     e10:	20000174 	.word	0x20000174
     e14:	20000334 	.word	0x20000334
     e18:	f0003fff 	.word	0xf0003fff

00000e1c <_ZN7__GuardC1Ev>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
     e1c:	f3ef 8310 	mrs	r3, PRIMASK
	__Guard() : primask(__get_PRIMASK()), loops(1) {
     e20:	6003      	str	r3, [r0, #0]
     e22:	2301      	movs	r3, #1
     e24:	6043      	str	r3, [r0, #4]
  __ASM volatile ("cpsid i" : : : "memory");
     e26:	b672      	cpsid	i
	}
     e28:	4770      	bx	lr

00000e2a <_ZN7__GuardD1Ev>:
		if (primask == 0) {
     e2a:	6803      	ldr	r3, [r0, #0]
     e2c:	2b00      	cmp	r3, #0
     e2e:	d102      	bne.n	e36 <_ZN7__GuardD1Ev+0xc>
  __ASM volatile ("cpsie i" : : : "memory");
     e30:	b662      	cpsie	i
  __ASM volatile ("isb 0xF":::"memory");
     e32:	f3bf 8f6f 	isb	sy
	}
     e36:	4770      	bx	lr

00000e38 <_ZNK26DoubleBufferedEPOutHandler10_availableEv>:
			}
		}
		return i;
	}

	virtual uint32_t _available() const {
     e38:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
		if (current == 0) {
     e3a:	0006      	movs	r6, r0
     e3c:	36fc      	adds	r6, #252	; 0xfc
     e3e:	69b3      	ldr	r3, [r6, #24]
	virtual uint32_t _available() const {
     e40:	0004      	movs	r4, r0
		if (current == 0) {
     e42:	2b00      	cmp	r3, #0
     e44:	d118      	bne.n	e78 <_ZNK26DoubleBufferedEPOutHandler10_availableEv+0x40>
			bool ready = ready0;
     e46:	27b2      	movs	r7, #178	; 0xb2
     e48:	007f      	lsls	r7, r7, #1
     e4a:	5dc5      	ldrb	r5, [r0, r7]
			synchronized {
     e4c:	4668      	mov	r0, sp
     e4e:	f7ff ffe5 	bl	e1c <_ZN7__GuardC1Ev>
     e52:	9b01      	ldr	r3, [sp, #4]
			bool ready = ready0;
     e54:	b2ed      	uxtb	r5, r5
			synchronized {
     e56:	3b01      	subs	r3, #1
     e58:	d302      	bcc.n	e60 <_ZNK26DoubleBufferedEPOutHandler10_availableEv+0x28>
				ready = ready0;
     e5a:	5de5      	ldrb	r5, [r4, r7]
     e5c:	b2ed      	uxtb	r5, r5
     e5e:	e7fa      	b.n	e56 <_ZNK26DoubleBufferedEPOutHandler10_availableEv+0x1e>
			synchronized {
     e60:	4668      	mov	r0, sp
     e62:	9301      	str	r3, [sp, #4]
     e64:	f7ff ffe1 	bl	e2a <_ZN7__GuardD1Ev>
			}
			return ready ? (last0 - first0) : 0;
     e68:	2d00      	cmp	r5, #0
     e6a:	d101      	bne.n	e70 <_ZNK26DoubleBufferedEPOutHandler10_availableEv+0x38>
     e6c:	2000      	movs	r0, #0
			synchronized {
				ready = ready1;
			}
			return ready ? (last1 - first1) : 0;
		}
	}
     e6e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
			return ready ? (last0 - first0) : 0;
     e70:	6e70      	ldr	r0, [r6, #100]	; 0x64
     e72:	6e33      	ldr	r3, [r6, #96]	; 0x60
			return ready ? (last1 - first1) : 0;
     e74:	1ac0      	subs	r0, r0, r3
     e76:	e7fa      	b.n	e6e <_ZNK26DoubleBufferedEPOutHandler10_availableEv+0x36>
			synchronized {
     e78:	4668      	mov	r0, sp
     e7a:	f7ff ffcf 	bl	e1c <_ZN7__GuardC1Ev>
				ready = ready1;
     e7e:	22d8      	movs	r2, #216	; 0xd8
			bool ready = false;
     e80:	2500      	movs	r5, #0
     e82:	9b01      	ldr	r3, [sp, #4]
				ready = ready1;
     e84:	0052      	lsls	r2, r2, #1
			synchronized {
     e86:	3b01      	subs	r3, #1
     e88:	d302      	bcc.n	e90 <_ZNK26DoubleBufferedEPOutHandler10_availableEv+0x58>
				ready = ready1;
     e8a:	5ca5      	ldrb	r5, [r4, r2]
     e8c:	b2ed      	uxtb	r5, r5
			synchronized {
     e8e:	e7fa      	b.n	e86 <_ZNK26DoubleBufferedEPOutHandler10_availableEv+0x4e>
     e90:	4668      	mov	r0, sp
     e92:	9301      	str	r3, [sp, #4]
     e94:	f7ff ffc9 	bl	e2a <_ZN7__GuardD1Ev>
			return ready ? (last1 - first1) : 0;
     e98:	2d00      	cmp	r5, #0
     e9a:	d0e7      	beq.n	e6c <_ZNK26DoubleBufferedEPOutHandler10_availableEv+0x34>
     e9c:	23d6      	movs	r3, #214	; 0xd6
     e9e:	005b      	lsls	r3, r3, #1
     ea0:	58e0      	ldr	r0, [r4, r3]
     ea2:	3b04      	subs	r3, #4
     ea4:	58e3      	ldr	r3, [r4, r3]
     ea6:	e7e5      	b.n	e74 <_ZNK26DoubleBufferedEPOutHandler10_availableEv+0x3c>

00000ea8 <_ZN26DoubleBufferedEPOutHandler7releaseEv>:
	virtual int peek() {
		_recv();
		return _rx_buffer.peek();
	}

	void release() {
     ea8:	b510      	push	{r4, lr}
		usbd.epReleaseOutBank0(ep, size);
     eaa:	6844      	ldr	r4, [r0, #4]
     eac:	30fc      	adds	r0, #252	; 0xfc
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
     eae:	6943      	ldr	r3, [r0, #20]
     eb0:	480b      	ldr	r0, [pc, #44]	; (ee0 <_ZN26DoubleBufferedEPOutHandler7releaseEv+0x38>)
     eb2:	b2db      	uxtb	r3, r3
     eb4:	015a      	lsls	r2, r3, #5
     eb6:	18a2      	adds	r2, r4, r2
     eb8:	6891      	ldr	r1, [r2, #8]
	inline void epBank0ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK0RDY = 1; }
     eba:	3308      	adds	r3, #8
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
     ebc:	4008      	ands	r0, r1
     ebe:	2180      	movs	r1, #128	; 0x80
     ec0:	0349      	lsls	r1, r1, #13
     ec2:	4301      	orrs	r1, r0
     ec4:	6091      	str	r1, [r2, #8]
	inline void epBank0SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = bc; }
     ec6:	6891      	ldr	r1, [r2, #8]
	inline void epBank0ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK0RDY = 1; }
     ec8:	015b      	lsls	r3, r3, #5
	inline void epBank0SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = bc; }
     eca:	0b89      	lsrs	r1, r1, #14
     ecc:	0389      	lsls	r1, r1, #14
     ece:	6091      	str	r1, [r2, #8]
	inline void epBank0ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK0RDY = 1; }
     ed0:	6822      	ldr	r2, [r4, #0]
     ed2:	18d3      	adds	r3, r2, r3
     ed4:	2240      	movs	r2, #64	; 0x40
     ed6:	7919      	ldrb	r1, [r3, #4]
     ed8:	430a      	orrs	r2, r1
     eda:	711a      	strb	r2, [r3, #4]
	}
     edc:	bd10      	pop	{r4, pc}
     ede:	46c0      	nop			; (mov r8, r8)
     ee0:	f0003fff 	.word	0xf0003fff

00000ee4 <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv>:
	virtual void handleEndpoint()
     ee4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
		if (usbd.epBank0IsTransferComplete(ep))
     ee6:	0005      	movs	r5, r0
     ee8:	35fc      	adds	r5, #252	; 0xfc
	inline bool epBank0IsTransferComplete(ep_t ep)  { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.TRCPT0; }
     eea:	7d2b      	ldrb	r3, [r5, #20]
		if (usbd.epBank0IsTransferComplete(ep))
     eec:	6842      	ldr	r2, [r0, #4]
	inline bool epBank0IsTransferComplete(ep_t ep)  { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.TRCPT0; }
     eee:	0019      	movs	r1, r3
	virtual void handleEndpoint()
     ef0:	0004      	movs	r4, r0
	inline bool epBank0IsTransferComplete(ep_t ep)  { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.TRCPT0; }
     ef2:	3108      	adds	r1, #8
     ef4:	6810      	ldr	r0, [r2, #0]
     ef6:	0149      	lsls	r1, r1, #5
     ef8:	1841      	adds	r1, r0, r1
     efa:	79c9      	ldrb	r1, [r1, #7]
		if (usbd.epBank0IsTransferComplete(ep))
     efc:	07c9      	lsls	r1, r1, #31
     efe:	d511      	bpl.n	f24 <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0x40>
	inline uint16_t epBank0ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT; }
     f00:	015b      	lsls	r3, r3, #5
     f02:	18d2      	adds	r2, r2, r3
     f04:	6893      	ldr	r3, [r2, #8]
     f06:	049b      	lsls	r3, r3, #18
     f08:	0c9b      	lsrs	r3, r3, #18
			if (received == 0) {
     f0a:	d10c      	bne.n	f26 <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0x42>
				release();
     f0c:	0020      	movs	r0, r4
     f0e:	f7ff ffcb 	bl	ea8 <_ZN26DoubleBufferedEPOutHandler7releaseEv>
	inline void epAckPendingInterrupts(ep_t ep)     { usb.DeviceEndpoint[ep].EPINTFLAG.reg = 0x7F; }
     f12:	6863      	ldr	r3, [r4, #4]
     f14:	681a      	ldr	r2, [r3, #0]
     f16:	696b      	ldr	r3, [r5, #20]
     f18:	b2db      	uxtb	r3, r3
     f1a:	3308      	adds	r3, #8
     f1c:	015b      	lsls	r3, r3, #5
     f1e:	18d3      	adds	r3, r2, r3
     f20:	227f      	movs	r2, #127	; 0x7f
     f22:	71da      	strb	r2, [r3, #7]
	}
     f24:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
			} else if (incoming == 0) {
     f26:	69e9      	ldr	r1, [r5, #28]
     f28:	2900      	cmp	r1, #0
     f2a:	d123      	bne.n	f74 <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0x90>
				last0 = received;
     f2c:	666b      	str	r3, [r5, #100]	; 0x64
				usbd.epBank0SetAddress(ep, const_cast<uint8_t *>(data1));
     f2e:	0023      	movs	r3, r4
				incoming = 1;
     f30:	2601      	movs	r6, #1
				usbd.epBank0SetAddress(ep, const_cast<uint8_t *>(data1));
     f32:	3369      	adds	r3, #105	; 0x69
     f34:	33ff      	adds	r3, #255	; 0xff
				incoming = 1;
     f36:	61ee      	str	r6, [r5, #28]
				synchronized {
     f38:	4668      	mov	r0, sp
	inline void epBank0SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[0].ADDR.reg = (uint32_t)addr; }
     f3a:	6053      	str	r3, [r2, #4]
					ready0 = true;
     f3c:	27b2      	movs	r7, #178	; 0xb2
				synchronized {
     f3e:	f7ff ff6d 	bl	e1c <_ZN7__GuardC1Ev>
					ready0 = true;
     f42:	007f      	lsls	r7, r7, #1
					notify = ready1;
     f44:	21b2      	movs	r1, #178	; 0xb2
     f46:	9b01      	ldr	r3, [sp, #4]
     f48:	31ff      	adds	r1, #255	; 0xff
     f4a:	3b01      	subs	r3, #1
				synchronized {
     f4c:	1c5a      	adds	r2, r3, #1
     f4e:	d038      	beq.n	fc2 <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0xde>
					notify = ready1;
     f50:	22d8      	movs	r2, #216	; 0xd8
					ready0 = true;
     f52:	55e6      	strb	r6, [r4, r7]
					notify = ready1;
     f54:	0052      	lsls	r2, r2, #1
     f56:	5ca2      	ldrb	r2, [r4, r2]
     f58:	1e58      	subs	r0, r3, #1
     f5a:	b2d2      	uxtb	r2, r2
     f5c:	5462      	strb	r2, [r4, r1]
					if (!notify) {
     f5e:	5c62      	ldrb	r2, [r4, r1]
     f60:	4684      	mov	ip, r0
     f62:	2a00      	cmp	r2, #0
     f64:	d104      	bne.n	f70 <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0x8c>
						release();
     f66:	0020      	movs	r0, r4
     f68:	9301      	str	r3, [sp, #4]
     f6a:	f7ff ff9d 	bl	ea8 <_ZN26DoubleBufferedEPOutHandler7releaseEv>
     f6e:	e7e9      	b.n	f44 <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0x60>
     f70:	4663      	mov	r3, ip
     f72:	e7eb      	b.n	f4c <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0x68>
				last1 = received;
     f74:	21d6      	movs	r1, #214	; 0xd6
     f76:	0049      	lsls	r1, r1, #1
     f78:	5063      	str	r3, [r4, r1]
				incoming = 0;
     f7a:	2300      	movs	r3, #0
     f7c:	61eb      	str	r3, [r5, #28]
				usbd.epBank0SetAddress(ep, const_cast<uint8_t *>(data0));
     f7e:	0023      	movs	r3, r4
     f80:	331d      	adds	r3, #29
     f82:	33ff      	adds	r3, #255	; 0xff
	inline void epBank0SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[0].ADDR.reg = (uint32_t)addr; }
     f84:	6053      	str	r3, [r2, #4]
				synchronized {
     f86:	4668      	mov	r0, sp
					ready1 = true;
     f88:	26d8      	movs	r6, #216	; 0xd8
				synchronized {
     f8a:	f7ff ff47 	bl	e1c <_ZN7__GuardC1Ev>
					ready1 = true;
     f8e:	2701      	movs	r7, #1
     f90:	0076      	lsls	r6, r6, #1
					notify = ready0;
     f92:	21b2      	movs	r1, #178	; 0xb2
     f94:	9b01      	ldr	r3, [sp, #4]
     f96:	31ff      	adds	r1, #255	; 0xff
     f98:	3b01      	subs	r3, #1
				synchronized {
     f9a:	1c5a      	adds	r2, r3, #1
     f9c:	d011      	beq.n	fc2 <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0xde>
					notify = ready0;
     f9e:	22b2      	movs	r2, #178	; 0xb2
					ready1 = true;
     fa0:	55a7      	strb	r7, [r4, r6]
					notify = ready0;
     fa2:	0052      	lsls	r2, r2, #1
     fa4:	5ca2      	ldrb	r2, [r4, r2]
     fa6:	1e58      	subs	r0, r3, #1
     fa8:	b2d2      	uxtb	r2, r2
     faa:	5462      	strb	r2, [r4, r1]
					if (!notify) {
     fac:	5c62      	ldrb	r2, [r4, r1]
     fae:	4684      	mov	ip, r0
     fb0:	2a00      	cmp	r2, #0
     fb2:	d104      	bne.n	fbe <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0xda>
						release();
     fb4:	0020      	movs	r0, r4
     fb6:	9301      	str	r3, [sp, #4]
     fb8:	f7ff ff76 	bl	ea8 <_ZN26DoubleBufferedEPOutHandler7releaseEv>
     fbc:	e7e9      	b.n	f92 <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0xae>
     fbe:	4663      	mov	r3, ip
     fc0:	e7eb      	b.n	f9a <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0xb6>
				synchronized {
     fc2:	4668      	mov	r0, sp
     fc4:	9301      	str	r3, [sp, #4]
     fc6:	f7ff ff30 	bl	e2a <_ZN7__GuardD1Ev>
     fca:	e7a2      	b.n	f12 <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0x2e>

00000fcc <_ZN26DoubleBufferedEPOutHandler5_recvEv>:
	uint32_t _recv()
     fcc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
     fce:	0005      	movs	r5, r0
		synchronized {
     fd0:	4668      	mov	r0, sp
     fd2:	002c      	movs	r4, r5
     fd4:	f7ff ff22 	bl	e1c <_ZN7__GuardC1Ev>
		uint32_t len = 0;
     fd8:	2700      	movs	r7, #0

template <int N>
int RingBufferN<N>::availableForStore()
{
  if (_iHead >= _iTail)
    return N - 1 - _iHead + _iTail;
     fda:	22ff      	movs	r2, #255	; 0xff
     fdc:	9b01      	ldr	r3, [sp, #4]
     fde:	34fc      	adds	r4, #252	; 0xfc
		synchronized {
     fe0:	3b01      	subs	r3, #1
     fe2:	d30d      	bcc.n	1000 <_ZN26DoubleBufferedEPOutHandler5_recvEv+0x34>
  if (_iHead >= _iTail)
     fe4:	68e0      	ldr	r0, [r4, #12]
     fe6:	6921      	ldr	r1, [r4, #16]
     fe8:	4288      	cmp	r0, r1
     fea:	db04      	blt.n	ff6 <_ZN26DoubleBufferedEPOutHandler5_recvEv+0x2a>
    return N - 1 - _iHead + _iTail;
     fec:	68e7      	ldr	r7, [r4, #12]
     fee:	6920      	ldr	r0, [r4, #16]
     ff0:	1bd7      	subs	r7, r2, r7
     ff2:	183f      	adds	r7, r7, r0
     ff4:	e7f4      	b.n	fe0 <_ZN26DoubleBufferedEPOutHandler5_recvEv+0x14>
  else
    return _iTail - _iHead - 1;
     ff6:	6927      	ldr	r7, [r4, #16]
     ff8:	68e1      	ldr	r1, [r4, #12]
     ffa:	1a7f      	subs	r7, r7, r1
     ffc:	3f01      	subs	r7, #1
     ffe:	e7ef      	b.n	fe0 <_ZN26DoubleBufferedEPOutHandler5_recvEv+0x14>
    1000:	4668      	mov	r0, sp
    1002:	9301      	str	r3, [sp, #4]
    1004:	f7ff ff11 	bl	e2a <_ZN7__GuardD1Ev>
		if (current == 0) {
    1008:	69a3      	ldr	r3, [r4, #24]
			synchronized {
    100a:	4668      	mov	r0, sp
		if (current == 0) {
    100c:	2b00      	cmp	r3, #0
    100e:	d141      	bne.n	1094 <_ZN26DoubleBufferedEPOutHandler5_recvEv+0xc8>
			synchronized {
    1010:	f7ff ff04 	bl	e1c <_ZN7__GuardC1Ev>
				if (!ready0) {
    1014:	21b2      	movs	r1, #178	; 0xb2
    1016:	9b01      	ldr	r3, [sp, #4]
    1018:	0049      	lsls	r1, r1, #1
    101a:	3b01      	subs	r3, #1
			synchronized {
    101c:	1c5a      	adds	r2, r3, #1
    101e:	d00c      	beq.n	103a <_ZN26DoubleBufferedEPOutHandler5_recvEv+0x6e>
				if (!ready0) {
    1020:	5c6e      	ldrb	r6, [r5, r1]
    1022:	1e5a      	subs	r2, r3, #1
    1024:	b2f6      	uxtb	r6, r6
    1026:	2e00      	cmp	r6, #0
    1028:	d105      	bne.n	1036 <_ZN26DoubleBufferedEPOutHandler5_recvEv+0x6a>
				synchronized {
    102a:	4668      	mov	r0, sp
    102c:	9301      	str	r3, [sp, #4]
    102e:	f7ff fefc 	bl	e2a <_ZN7__GuardD1Ev>
	}
    1032:	0030      	movs	r0, r6
    1034:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    1036:	0013      	movs	r3, r2
    1038:	e7f0      	b.n	101c <_ZN26DoubleBufferedEPOutHandler5_recvEv+0x50>
			synchronized {
    103a:	4668      	mov	r0, sp
    103c:	9301      	str	r3, [sp, #4]
		uint32_t i = 0;
    103e:	2600      	movs	r6, #0
			synchronized {
    1040:	f7ff fef3 	bl	e2a <_ZN7__GuardD1Ev>
}

template <int N>
int RingBufferN<N>::nextIndex(int index)
{
  return (uint32_t)(index + 1) % N;
    1044:	22ff      	movs	r2, #255	; 0xff
			for (; i<len && first0 < last0; i++) {
    1046:	42be      	cmp	r6, r7
    1048:	d003      	beq.n	1052 <_ZN26DoubleBufferedEPOutHandler5_recvEv+0x86>
    104a:	6e23      	ldr	r3, [r4, #96]	; 0x60
    104c:	6e61      	ldr	r1, [r4, #100]	; 0x64
    104e:	428b      	cmp	r3, r1
    1050:	d360      	bcc.n	1114 <_ZN26DoubleBufferedEPOutHandler5_recvEv+0x148>
			if (first0 == last0) {
    1052:	6e63      	ldr	r3, [r4, #100]	; 0x64
    1054:	6e22      	ldr	r2, [r4, #96]	; 0x60
    1056:	429a      	cmp	r2, r3
    1058:	d1eb      	bne.n	1032 <_ZN26DoubleBufferedEPOutHandler5_recvEv+0x66>
				first0 = 0;
    105a:	2300      	movs	r3, #0
    105c:	6623      	str	r3, [r4, #96]	; 0x60
				current = 1;
    105e:	3301      	adds	r3, #1
    1060:	61a3      	str	r3, [r4, #24]
				synchronized {
    1062:	4668      	mov	r0, sp
					ready0 = false;
    1064:	24b2      	movs	r4, #178	; 0xb2
				synchronized {
    1066:	f7ff fed9 	bl	e1c <_ZN7__GuardC1Ev>
					ready0 = false;
    106a:	0064      	lsls	r4, r4, #1
					if (notify) {
    106c:	22b2      	movs	r2, #178	; 0xb2
					ready0 = false;
    106e:	2100      	movs	r1, #0
    1070:	9b01      	ldr	r3, [sp, #4]
					if (notify) {
    1072:	32ff      	adds	r2, #255	; 0xff
    1074:	3b01      	subs	r3, #1
				synchronized {
    1076:	1c58      	adds	r0, r3, #1
    1078:	d0d7      	beq.n	102a <_ZN26DoubleBufferedEPOutHandler5_recvEv+0x5e>
					ready0 = false;
    107a:	5529      	strb	r1, [r5, r4]
					if (notify) {
    107c:	5ca8      	ldrb	r0, [r5, r2]
    107e:	1e5f      	subs	r7, r3, #1
    1080:	2800      	cmp	r0, #0
    1082:	d005      	beq.n	1090 <_ZN26DoubleBufferedEPOutHandler5_recvEv+0xc4>
						notify = false;
    1084:	54a9      	strb	r1, [r5, r2]
						release();
    1086:	0028      	movs	r0, r5
    1088:	9301      	str	r3, [sp, #4]
    108a:	f7ff ff0d 	bl	ea8 <_ZN26DoubleBufferedEPOutHandler7releaseEv>
    108e:	e7ed      	b.n	106c <_ZN26DoubleBufferedEPOutHandler5_recvEv+0xa0>
    1090:	003b      	movs	r3, r7
    1092:	e7f0      	b.n	1076 <_ZN26DoubleBufferedEPOutHandler5_recvEv+0xaa>
			synchronized {
    1094:	f7ff fec2 	bl	e1c <_ZN7__GuardC1Ev>
				if (!ready1) {
    1098:	21d8      	movs	r1, #216	; 0xd8
    109a:	9b01      	ldr	r3, [sp, #4]
    109c:	0049      	lsls	r1, r1, #1
    109e:	3b01      	subs	r3, #1
			synchronized {
    10a0:	1c5a      	adds	r2, r3, #1
    10a2:	d006      	beq.n	10b2 <_ZN26DoubleBufferedEPOutHandler5_recvEv+0xe6>
				if (!ready1) {
    10a4:	5c6e      	ldrb	r6, [r5, r1]
    10a6:	1e5a      	subs	r2, r3, #1
    10a8:	b2f6      	uxtb	r6, r6
    10aa:	2e00      	cmp	r6, #0
    10ac:	d0bd      	beq.n	102a <_ZN26DoubleBufferedEPOutHandler5_recvEv+0x5e>
    10ae:	0013      	movs	r3, r2
    10b0:	e7f6      	b.n	10a0 <_ZN26DoubleBufferedEPOutHandler5_recvEv+0xd4>
			synchronized {
    10b2:	4668      	mov	r0, sp
    10b4:	9301      	str	r3, [sp, #4]
    10b6:	f7ff feb8 	bl	e2a <_ZN7__GuardD1Ev>
    10ba:	22d4      	movs	r2, #212	; 0xd4
		uint32_t i = 0;
    10bc:	2600      	movs	r6, #0
    10be:	0052      	lsls	r2, r2, #1
			for (; i<len && first1 < last1; i++) {
    10c0:	42be      	cmp	r6, r7
    10c2:	d005      	beq.n	10d0 <_ZN26DoubleBufferedEPOutHandler5_recvEv+0x104>
    10c4:	21d6      	movs	r1, #214	; 0xd6
    10c6:	0049      	lsls	r1, r1, #1
    10c8:	58ab      	ldr	r3, [r5, r2]
    10ca:	5869      	ldr	r1, [r5, r1]
    10cc:	428b      	cmp	r3, r1
    10ce:	d332      	bcc.n	1136 <_ZN26DoubleBufferedEPOutHandler5_recvEv+0x16a>
			if (first1 == last1) {
    10d0:	23d6      	movs	r3, #214	; 0xd6
    10d2:	005b      	lsls	r3, r3, #1
    10d4:	58eb      	ldr	r3, [r5, r3]
    10d6:	58a9      	ldr	r1, [r5, r2]
    10d8:	4299      	cmp	r1, r3
    10da:	d1aa      	bne.n	1032 <_ZN26DoubleBufferedEPOutHandler5_recvEv+0x66>
				first1 = 0;
    10dc:	2300      	movs	r3, #0
				synchronized {
    10de:	4668      	mov	r0, sp
				first1 = 0;
    10e0:	50ab      	str	r3, [r5, r2]
				current = 0;
    10e2:	61a3      	str	r3, [r4, #24]
					ready1 = false;
    10e4:	24d8      	movs	r4, #216	; 0xd8
				synchronized {
    10e6:	f7ff fe99 	bl	e1c <_ZN7__GuardC1Ev>
					ready1 = false;
    10ea:	0064      	lsls	r4, r4, #1
					if (notify) {
    10ec:	22b2      	movs	r2, #178	; 0xb2
					ready1 = false;
    10ee:	2100      	movs	r1, #0
    10f0:	9b01      	ldr	r3, [sp, #4]
					if (notify) {
    10f2:	32ff      	adds	r2, #255	; 0xff
    10f4:	3b01      	subs	r3, #1
				synchronized {
    10f6:	1c58      	adds	r0, r3, #1
    10f8:	d097      	beq.n	102a <_ZN26DoubleBufferedEPOutHandler5_recvEv+0x5e>
					ready1 = false;
    10fa:	5529      	strb	r1, [r5, r4]
					if (notify) {
    10fc:	5ca8      	ldrb	r0, [r5, r2]
    10fe:	1e5f      	subs	r7, r3, #1
    1100:	2800      	cmp	r0, #0
    1102:	d005      	beq.n	1110 <_ZN26DoubleBufferedEPOutHandler5_recvEv+0x144>
						notify = false;
    1104:	54a9      	strb	r1, [r5, r2]
						release();
    1106:	0028      	movs	r0, r5
    1108:	9301      	str	r3, [sp, #4]
    110a:	f7ff fecd 	bl	ea8 <_ZN26DoubleBufferedEPOutHandler7releaseEv>
    110e:	e7ed      	b.n	10ec <_ZN26DoubleBufferedEPOutHandler5_recvEv+0x120>
    1110:	003b      	movs	r3, r7
    1112:	e7f0      	b.n	10f6 <_ZN26DoubleBufferedEPOutHandler5_recvEv+0x12a>
				_rx_buffer.store_char(data0[first0++]);
    1114:	1c59      	adds	r1, r3, #1
    1116:	18eb      	adds	r3, r5, r3
    1118:	33ff      	adds	r3, #255	; 0xff
    111a:	6621      	str	r1, [r4, #96]	; 0x60
    111c:	7f59      	ldrb	r1, [r3, #29]
  int i = nextIndex(_iHead);
    111e:	68e3      	ldr	r3, [r4, #12]
  if ( i != _iTail )
    1120:	6920      	ldr	r0, [r4, #16]
  return (uint32_t)(index + 1) % N;
    1122:	3301      	adds	r3, #1
    1124:	4013      	ands	r3, r2
  if ( i != _iTail )
    1126:	4283      	cmp	r3, r0
    1128:	d003      	beq.n	1132 <_ZN26DoubleBufferedEPOutHandler5_recvEv+0x166>
    _aucBuffer[_iHead] = c ;
    112a:	68e0      	ldr	r0, [r4, #12]
    112c:	1828      	adds	r0, r5, r0
    112e:	7201      	strb	r1, [r0, #8]
    _iHead = i ;
    1130:	60e3      	str	r3, [r4, #12]
			for (; i<len && first0 < last0; i++) {
    1132:	3601      	adds	r6, #1
    1134:	e787      	b.n	1046 <_ZN26DoubleBufferedEPOutHandler5_recvEv+0x7a>
				_rx_buffer.store_char(data1[first1++]);
    1136:	1c59      	adds	r1, r3, #1
    1138:	50a9      	str	r1, [r5, r2]
  return (uint32_t)(index + 1) % N;
    113a:	21ff      	movs	r1, #255	; 0xff
    113c:	18eb      	adds	r3, r5, r3
    113e:	3369      	adds	r3, #105	; 0x69
    1140:	33ff      	adds	r3, #255	; 0xff
    1142:	781b      	ldrb	r3, [r3, #0]
    1144:	469c      	mov	ip, r3
  int i = nextIndex(_iHead);
    1146:	68e3      	ldr	r3, [r4, #12]
  return (uint32_t)(index + 1) % N;
    1148:	3301      	adds	r3, #1
    114a:	400b      	ands	r3, r1
  if ( i != _iTail )
    114c:	6921      	ldr	r1, [r4, #16]
    114e:	428b      	cmp	r3, r1
    1150:	d004      	beq.n	115c <_ZN26DoubleBufferedEPOutHandler5_recvEv+0x190>
    _aucBuffer[_iHead] = c ;
    1152:	4660      	mov	r0, ip
    1154:	68e1      	ldr	r1, [r4, #12]
    1156:	1869      	adds	r1, r5, r1
    1158:	7208      	strb	r0, [r1, #8]
    _iHead = i ;
    115a:	60e3      	str	r3, [r4, #12]
			for (; i<len && first1 < last1; i++) {
    115c:	3601      	adds	r6, #1
    115e:	e7af      	b.n	10c0 <_ZN26DoubleBufferedEPOutHandler5_recvEv+0xf4>

00001160 <_ZN26DoubleBufferedEPOutHandler4peekEv>:
	virtual int peek() {
    1160:	b510      	push	{r4, lr}
    1162:	0004      	movs	r4, r0
		_recv();
    1164:	f7ff ff32 	bl	fcc <_ZN26DoubleBufferedEPOutHandler5_recvEv>
  if(_iTail == _iHead)
    1168:	0023      	movs	r3, r4
    116a:	33fc      	adds	r3, #252	; 0xfc
    116c:	6919      	ldr	r1, [r3, #16]
    116e:	68da      	ldr	r2, [r3, #12]
    1170:	4291      	cmp	r1, r2
    1172:	d003      	beq.n	117c <_ZN26DoubleBufferedEPOutHandler4peekEv+0x1c>
  return _aucBuffer[_iTail];
    1174:	691b      	ldr	r3, [r3, #16]
    1176:	18e4      	adds	r4, r4, r3
    1178:	7a20      	ldrb	r0, [r4, #8]
	}
    117a:	bd10      	pop	{r4, pc}
    return -1;
    117c:	2001      	movs	r0, #1
    117e:	4240      	negs	r0, r0
		return _rx_buffer.peek();
    1180:	e7fb      	b.n	117a <_ZN26DoubleBufferedEPOutHandler4peekEv+0x1a>

00001182 <_ZN26DoubleBufferedEPOutHandler9availableEv>:
	virtual uint32_t available() {
    1182:	b510      	push	{r4, lr}
    1184:	0004      	movs	r4, r0
  int delta = _iHead - _iTail;
    1186:	34fc      	adds	r4, #252	; 0xfc
		_recv();
    1188:	f7ff ff20 	bl	fcc <_ZN26DoubleBufferedEPOutHandler5_recvEv>
    118c:	68e0      	ldr	r0, [r4, #12]
    118e:	6923      	ldr	r3, [r4, #16]
    1190:	1ac0      	subs	r0, r0, r3
  if(delta < 0)
    1192:	d501      	bpl.n	1198 <_ZN26DoubleBufferedEPOutHandler9availableEv+0x16>
    return N + delta;
    1194:	3001      	adds	r0, #1
    1196:	30ff      	adds	r0, #255	; 0xff
	}
    1198:	bd10      	pop	{r4, pc}

0000119a <_ZN26DoubleBufferedEPOutHandler4recvEPvm>:
	virtual uint32_t recv(void *_data, uint32_t len) {
    119a:	b5f0      	push	{r4, r5, r6, r7, lr}
    119c:	b085      	sub	sp, #20
    119e:	9201      	str	r2, [sp, #4]
    11a0:	9100      	str	r1, [sp, #0]
    11a2:	0005      	movs	r5, r0
		_recv();
    11a4:	f7ff ff12 	bl	fcc <_ZN26DoubleBufferedEPOutHandler5_recvEv>
		synchronized {
    11a8:	a802      	add	r0, sp, #8
    11aa:	f7ff fe37 	bl	e1c <_ZN7__GuardC1Ev>
    return -1;
    11ae:	2001      	movs	r0, #1
		uint32_t i = 0;
    11b0:	2400      	movs	r4, #0
  return (uint32_t)(index + 1) % N;
    11b2:	26ff      	movs	r6, #255	; 0xff
    11b4:	9a03      	ldr	r2, [sp, #12]
    return -1;
    11b6:	4240      	negs	r0, r0
		synchronized {
    11b8:	3a01      	subs	r2, #1
    11ba:	d31d      	bcc.n	11f8 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x5e>
  int delta = _iHead - _iTail;
    11bc:	002b      	movs	r3, r5
    11be:	33fc      	adds	r3, #252	; 0xfc
			for (; i < len && _rx_buffer.available(); i++) {
    11c0:	9901      	ldr	r1, [sp, #4]
    11c2:	428c      	cmp	r4, r1
    11c4:	d2f8      	bcs.n	11b8 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x1e>
    11c6:	68d9      	ldr	r1, [r3, #12]
    11c8:	691f      	ldr	r7, [r3, #16]
    11ca:	1bc9      	subs	r1, r1, r7
  if(delta < 0)
    11cc:	d501      	bpl.n	11d2 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x38>
    return N + delta;
    11ce:	3101      	adds	r1, #1
    11d0:	31ff      	adds	r1, #255	; 0xff
    11d2:	2900      	cmp	r1, #0
    11d4:	d0f0      	beq.n	11b8 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x1e>
  if(_iTail == _iHead)
    11d6:	6919      	ldr	r1, [r3, #16]
    11d8:	68df      	ldr	r7, [r3, #12]
    11da:	468c      	mov	ip, r1
    return -1;
    11dc:	0001      	movs	r1, r0
  if(_iTail == _iHead)
    11de:	45bc      	cmp	ip, r7
    11e0:	d006      	beq.n	11f0 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x56>
  uint8_t value = _aucBuffer[_iTail];
    11e2:	6919      	ldr	r1, [r3, #16]
  _iTail = nextIndex(_iTail);
    11e4:	691f      	ldr	r7, [r3, #16]
  uint8_t value = _aucBuffer[_iTail];
    11e6:	1869      	adds	r1, r5, r1
  return (uint32_t)(index + 1) % N;
    11e8:	3701      	adds	r7, #1
    11ea:	4037      	ands	r7, r6
  uint8_t value = _aucBuffer[_iTail];
    11ec:	7a09      	ldrb	r1, [r1, #8]
  _iTail = nextIndex(_iTail);
    11ee:	611f      	str	r7, [r3, #16]
				data[i] = _rx_buffer.read_char();
    11f0:	9f00      	ldr	r7, [sp, #0]
    11f2:	5539      	strb	r1, [r7, r4]
			for (; i < len && _rx_buffer.available(); i++) {
    11f4:	3401      	adds	r4, #1
    11f6:	e7e3      	b.n	11c0 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x26>
		synchronized {
    11f8:	a802      	add	r0, sp, #8
    11fa:	9203      	str	r2, [sp, #12]
    11fc:	f7ff fe15 	bl	e2a <_ZN7__GuardD1Ev>
	}
    1200:	0020      	movs	r0, r4
    1202:	b005      	add	sp, #20
    1204:	bdf0      	pop	{r4, r5, r6, r7, pc}

00001206 <_ZN14USBDeviceClass14SendInterfacesEPm>:
{
    1206:	b537      	push	{r0, r1, r2, r4, r5, lr}
	uint8_t interfaces = 0;
    1208:	466b      	mov	r3, sp
    120a:	1ddc      	adds	r4, r3, #7
    120c:	2300      	movs	r3, #0
{
    120e:	000d      	movs	r5, r1
	uint8_t interfaces = 0;
    1210:	7023      	strb	r3, [r4, #0]
	total[0] += PluggableUSB().getInterface(&interfaces);
    1212:	f7ff fd89 	bl	d28 <_Z12PluggableUSBv>
    1216:	0021      	movs	r1, r4
    1218:	f7ff fd06 	bl	c28 <_ZN13PluggableUSB_12getInterfaceEPh>
    121c:	682b      	ldr	r3, [r5, #0]
    121e:	1818      	adds	r0, r3, r0
    1220:	6028      	str	r0, [r5, #0]
	return interfaces;
    1222:	7820      	ldrb	r0, [r4, #0]
}
    1224:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
	...

00001228 <_ZN14USBDeviceClass4initEv>:
{
    1228:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	txLEDPulse = 0;
    122a:	2400      	movs	r4, #0
    122c:	4b49      	ldr	r3, [pc, #292]	; (1354 <_ZN14USBDeviceClass4initEv+0x12c>)
	pinMode(PIN_LED_TXL, OUTPUT);
    122e:	2101      	movs	r1, #1
{
    1230:	0005      	movs	r5, r0
	pinMode(PIN_LED_TXL, OUTPUT);
    1232:	201a      	movs	r0, #26
	txLEDPulse = 0;
    1234:	701c      	strb	r4, [r3, #0]
	pinMode(PIN_LED_TXL, OUTPUT);
    1236:	f000 fe49 	bl	1ecc <pinMode>
	digitalWrite(PIN_LED_TXL, HIGH);
    123a:	2101      	movs	r1, #1
    123c:	201a      	movs	r0, #26
    123e:	f000 fe91 	bl	1f64 <digitalWrite>
	rxLEDPulse = 0;
    1242:	4b45      	ldr	r3, [pc, #276]	; (1358 <_ZN14USBDeviceClass4initEv+0x130>)
	pinMode(PIN_LED_RXL, OUTPUT);
    1244:	2101      	movs	r1, #1
    1246:	2019      	movs	r0, #25
	rxLEDPulse = 0;
    1248:	701c      	strb	r4, [r3, #0]
	pinMode(PIN_LED_RXL, OUTPUT);
    124a:	f000 fe3f 	bl	1ecc <pinMode>
	digitalWrite(PIN_LED_RXL, HIGH);
    124e:	2101      	movs	r1, #1
    1250:	2019      	movs	r0, #25
    1252:	f000 fe87 	bl	1f64 <digitalWrite>
	PM->APBBMASK.reg |= PM_APBBMASK_USB;
    1256:	2320      	movs	r3, #32
    1258:	4a40      	ldr	r2, [pc, #256]	; (135c <_ZN14USBDeviceClass4initEv+0x134>)
	PORT->Group[0].PMUX[PIN_PA24G_USB_DM/2].reg &= ~(0xF << (4 * (PIN_PA24G_USB_DM & 0x01u)));
    125a:	200f      	movs	r0, #15
	PM->APBBMASK.reg |= PM_APBBMASK_USB;
    125c:	69d1      	ldr	r1, [r2, #28]
    125e:	430b      	orrs	r3, r1
    1260:	61d3      	str	r3, [r2, #28]
	PORT->Group[0].PINCFG[PIN_PA24G_USB_DM].bit.PMUXEN = 1;
    1262:	2201      	movs	r2, #1
    1264:	493e      	ldr	r1, [pc, #248]	; (1360 <_ZN14USBDeviceClass4initEv+0x138>)
    1266:	780b      	ldrb	r3, [r1, #0]
    1268:	4313      	orrs	r3, r2
    126a:	700b      	strb	r3, [r1, #0]
	PORT->Group[0].PMUX[PIN_PA24G_USB_DM/2].reg &= ~(0xF << (4 * (PIN_PA24G_USB_DM & 0x01u)));
    126c:	4b3d      	ldr	r3, [pc, #244]	; (1364 <_ZN14USBDeviceClass4initEv+0x13c>)
    126e:	7819      	ldrb	r1, [r3, #0]
    1270:	4381      	bics	r1, r0
    1272:	7019      	strb	r1, [r3, #0]
	PORT->Group[0].PMUX[PIN_PA24G_USB_DM/2].reg |= MUX_PA24G_USB_DM << (4 * (PIN_PA24G_USB_DM & 0x01u));
    1274:	2106      	movs	r1, #6
    1276:	781c      	ldrb	r4, [r3, #0]
    1278:	4321      	orrs	r1, r4
    127a:	7019      	strb	r1, [r3, #0]
	PORT->Group[0].PINCFG[PIN_PA25G_USB_DP].bit.PMUXEN = 1;
    127c:	493a      	ldr	r1, [pc, #232]	; (1368 <_ZN14USBDeviceClass4initEv+0x140>)
    127e:	780c      	ldrb	r4, [r1, #0]
    1280:	4322      	orrs	r2, r4
    1282:	700a      	strb	r2, [r1, #0]
	PORT->Group[0].PMUX[PIN_PA25G_USB_DP/2].reg &= ~(0xF << (4 * (PIN_PA25G_USB_DP & 0x01u)));
    1284:	781a      	ldrb	r2, [r3, #0]
    1286:	4002      	ands	r2, r0
    1288:	701a      	strb	r2, [r3, #0]
	PORT->Group[0].PMUX[PIN_PA25G_USB_DP/2].reg |= MUX_PA25G_USB_DP << (4 * (PIN_PA25G_USB_DP & 0x01u));
    128a:	2260      	movs	r2, #96	; 0x60
    128c:	7819      	ldrb	r1, [r3, #0]
    128e:	430a      	orrs	r2, r1
    1290:	701a      	strb	r2, [r3, #0]
	GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(6)     | // Generic Clock Multiplexer 6
    1292:	4b36      	ldr	r3, [pc, #216]	; (136c <_ZN14USBDeviceClass4initEv+0x144>)
    1294:	4a36      	ldr	r2, [pc, #216]	; (1370 <_ZN14USBDeviceClass4initEv+0x148>)
    1296:	805a      	strh	r2, [r3, #2]
	while (GCLK->STATUS.bit.SYNCBUSY)
    1298:	785f      	ldrb	r7, [r3, #1]
    129a:	09ff      	lsrs	r7, r7, #7
    129c:	d1fc      	bne.n	1298 <_ZN14USBDeviceClass4initEv+0x70>
	USB_SetHandler(&UDD_Handler);
    129e:	4835      	ldr	r0, [pc, #212]	; (1374 <_ZN14USBDeviceClass4initEv+0x14c>)
    12a0:	f7ff f80e 	bl	2c0 <USB_SetHandler>
	usb.CTRLA.bit.SWRST = 1;
    12a4:	4e34      	ldr	r6, [pc, #208]	; (1378 <_ZN14USBDeviceClass4initEv+0x150>)
    12a6:	2301      	movs	r3, #1
    12a8:	0030      	movs	r0, r6
    12aa:	c810      	ldmia	r0!, {r4}
	memset(EP, 0, sizeof(EP));
    12ac:	0039      	movs	r1, r7
	usb.CTRLA.bit.SWRST = 1;
    12ae:	7822      	ldrb	r2, [r4, #0]
    12b0:	4313      	orrs	r3, r2
	memset(EP, 0, sizeof(EP));
    12b2:	2280      	movs	r2, #128	; 0x80
	usb.CTRLA.bit.SWRST = 1;
    12b4:	7023      	strb	r3, [r4, #0]
	memset(EP, 0, sizeof(EP));
    12b6:	0052      	lsls	r2, r2, #1
    12b8:	f003 ff9b 	bl	51f2 <memset>
	while (usb.SYNCBUSY.bit.SWRST) {}
    12bc:	78a3      	ldrb	r3, [r4, #2]
    12be:	07db      	lsls	r3, r3, #31
    12c0:	d4fc      	bmi.n	12bc <_ZN14USBDeviceClass4initEv+0x94>
	uint32_t pad_transn = (*pad_transn_p & USB_FUSES_TRANSN_Msk) >> USB_FUSES_TRANSN_Pos;
    12c2:	201f      	movs	r0, #31
	usb.DESCADD.reg = (uint32_t)(&EP);
    12c4:	3604      	adds	r6, #4
	uint32_t pad_transn = (*pad_transn_p & USB_FUSES_TRANSN_Msk) >> USB_FUSES_TRANSN_Pos;
    12c6:	4b2d      	ldr	r3, [pc, #180]	; (137c <_ZN14USBDeviceClass4initEv+0x154>)
	usb.DESCADD.reg = (uint32_t)(&EP);
    12c8:	6266      	str	r6, [r4, #36]	; 0x24
	uint32_t pad_transn = (*pad_transn_p & USB_FUSES_TRANSN_Msk) >> USB_FUSES_TRANSN_Pos;
    12ca:	681b      	ldr	r3, [r3, #0]
    12cc:	0b5a      	lsrs	r2, r3, #13
	uint32_t pad_transp = (*pad_transp_p & USB_FUSES_TRANSP_Msk) >> USB_FUSES_TRANSP_Pos;
    12ce:	0c99      	lsrs	r1, r3, #18
	uint32_t pad_trim   = (*pad_trim_p   & USB_FUSES_TRIM_Msk  ) >> USB_FUSES_TRIM_Pos;
    12d0:	019b      	lsls	r3, r3, #6
	uint32_t pad_transn = (*pad_transn_p & USB_FUSES_TRANSN_Msk) >> USB_FUSES_TRANSN_Pos;
    12d2:	4002      	ands	r2, r0
	uint32_t pad_transp = (*pad_transp_p & USB_FUSES_TRANSP_Msk) >> USB_FUSES_TRANSP_Pos;
    12d4:	4001      	ands	r1, r0
	uint32_t pad_trim   = (*pad_trim_p   & USB_FUSES_TRIM_Msk  ) >> USB_FUSES_TRIM_Pos;
    12d6:	0f5b      	lsrs	r3, r3, #29
	if (pad_transn == 0x1F)  // maximum value (31)
    12d8:	4282      	cmp	r2, r0
    12da:	d100      	bne.n	12de <_ZN14USBDeviceClass4initEv+0xb6>
		pad_transn = 5;
    12dc:	2205      	movs	r2, #5
	if (pad_transp == 0x1F)  // maximum value (31)
    12de:	291f      	cmp	r1, #31
    12e0:	d100      	bne.n	12e4 <_ZN14USBDeviceClass4initEv+0xbc>
		pad_transp = 29;
    12e2:	3902      	subs	r1, #2
	if (pad_trim == 0x7)     // maximum value (7)
    12e4:	2b07      	cmp	r3, #7
    12e6:	d100      	bne.n	12ea <_ZN14USBDeviceClass4initEv+0xc2>
		pad_trim = 3;
    12e8:	3b04      	subs	r3, #4
	usb.PADCAL.bit.TRANSN = pad_transn;
    12ea:	8d26      	ldrh	r6, [r4, #40]	; 0x28
    12ec:	4f24      	ldr	r7, [pc, #144]	; (1380 <_ZN14USBDeviceClass4initEv+0x158>)
    12ee:	4002      	ands	r2, r0
    12f0:	403e      	ands	r6, r7
    12f2:	0192      	lsls	r2, r2, #6
    12f4:	4332      	orrs	r2, r6
    12f6:	8522      	strh	r2, [r4, #40]	; 0x28
	usb.PADCAL.bit.TRANSP = pad_transp;
    12f8:	8d22      	ldrh	r2, [r4, #40]	; 0x28
    12fa:	4001      	ands	r1, r0
    12fc:	4382      	bics	r2, r0
    12fe:	000e      	movs	r6, r1
    1300:	0011      	movs	r1, r2
    1302:	4331      	orrs	r1, r6
    1304:	8521      	strh	r1, [r4, #40]	; 0x28
	usb.PADCAL.bit.TRIM   = pad_trim;
    1306:	8d22      	ldrh	r2, [r4, #40]	; 0x28
    1308:	0319      	lsls	r1, r3, #12
    130a:	4b1e      	ldr	r3, [pc, #120]	; (1384 <_ZN14USBDeviceClass4initEv+0x15c>)
	SerialUSB.begin(0);
    130c:	481e      	ldr	r0, [pc, #120]	; (1388 <_ZN14USBDeviceClass4initEv+0x160>)
    130e:	4013      	ands	r3, r2
	inline void setUSBDeviceMode() { usb.CTRLA.bit.MODE = USB_CTRLA_MODE_DEVICE_Val; }
    1310:	227f      	movs	r2, #127	; 0x7f
	usb.PADCAL.bit.TRIM   = pad_trim;
    1312:	430b      	orrs	r3, r1
    1314:	8523      	strh	r3, [r4, #40]	; 0x28
	inline void setUSBDeviceMode() { usb.CTRLA.bit.MODE = USB_CTRLA_MODE_DEVICE_Val; }
    1316:	7823      	ldrb	r3, [r4, #0]
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    1318:	21c1      	movs	r1, #193	; 0xc1
    131a:	4013      	ands	r3, r2
    131c:	7023      	strb	r3, [r4, #0]
	inline void runInStandby()   { usb.CTRLA.bit.RUNSTDBY = 1; }
    131e:	2304      	movs	r3, #4
    1320:	7822      	ldrb	r2, [r4, #0]
    1322:	0089      	lsls	r1, r1, #2
    1324:	4313      	orrs	r3, r2
	inline void setFullSpeed()       { usb.CTRLB.bit.SPDCONF = USB_DEVICE_CTRLB_SPDCONF_FS_Val;   }
    1326:	220c      	movs	r2, #12
	inline void runInStandby()   { usb.CTRLA.bit.RUNSTDBY = 1; }
    1328:	7023      	strb	r3, [r4, #0]
	inline void setFullSpeed()       { usb.CTRLB.bit.SPDCONF = USB_DEVICE_CTRLB_SPDCONF_FS_Val;   }
    132a:	8923      	ldrh	r3, [r4, #8]
    132c:	4393      	bics	r3, r2
    132e:	4a17      	ldr	r2, [pc, #92]	; (138c <_ZN14USBDeviceClass4initEv+0x164>)
    1330:	8123      	strh	r3, [r4, #8]
    1332:	5853      	ldr	r3, [r2, r1]
    1334:	021b      	lsls	r3, r3, #8
    1336:	0a1b      	lsrs	r3, r3, #8
    1338:	5053      	str	r3, [r2, r1]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    133a:	2380      	movs	r3, #128	; 0x80
    133c:	6013      	str	r3, [r2, #0]
	inline void enable()  { usb.CTRLA.bit.ENABLE = 1; }
    133e:	7822      	ldrb	r2, [r4, #0]
    1340:	3b7e      	subs	r3, #126	; 0x7e
    1342:	4313      	orrs	r3, r2
    1344:	7023      	strb	r3, [r4, #0]
	initialized = true;
    1346:	2301      	movs	r3, #1
	SerialUSB.begin(0);
    1348:	2100      	movs	r1, #0
	initialized = true;
    134a:	702b      	strb	r3, [r5, #0]
	SerialUSB.begin(0);
    134c:	f7ff fc4c 	bl	be8 <_ZN7Serial_5beginEm>
}
    1350:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1352:	46c0      	nop			; (mov r8, r8)
    1354:	20000169 	.word	0x20000169
    1358:	20000168 	.word	0x20000168
    135c:	40000400 	.word	0x40000400
    1360:	41004458 	.word	0x41004458
    1364:	4100443c 	.word	0x4100443c
    1368:	41004459 	.word	0x41004459
    136c:	40000c00 	.word	0x40000c00
    1370:	00004006 	.word	0x00004006
    1374:	00001d59 	.word	0x00001d59
    1378:	20000600 	.word	0x20000600
    137c:	00806024 	.word	0x00806024
    1380:	fffff83f 	.word	0xfffff83f
    1384:	ffff8fff 	.word	0xffff8fff
    1388:	200000e0 	.word	0x200000e0
    138c:	e000e100 	.word	0xe000e100

00001390 <_ZN14USBDeviceClass6attachEv>:
	if (!initialized)
    1390:	7800      	ldrb	r0, [r0, #0]
    1392:	2800      	cmp	r0, #0
    1394:	d010      	beq.n	13b8 <_ZN14USBDeviceClass6attachEv+0x28>
	inline void attach() { usb.CTRLB.bit.DETACH = 0; }
    1396:	2101      	movs	r1, #1
    1398:	4b08      	ldr	r3, [pc, #32]	; (13bc <_ZN14USBDeviceClass6attachEv+0x2c>)
    139a:	681b      	ldr	r3, [r3, #0]
    139c:	891a      	ldrh	r2, [r3, #8]
    139e:	438a      	bics	r2, r1
    13a0:	811a      	strh	r2, [r3, #8]
	inline void enableEndOfResetInterrupt()    { usb.INTENSET.bit.EORST = 1; }
    13a2:	2208      	movs	r2, #8
    13a4:	8b19      	ldrh	r1, [r3, #24]
    13a6:	430a      	orrs	r2, r1
    13a8:	831a      	strh	r2, [r3, #24]
	inline void enableStartOfFrameInterrupt()  { usb.INTENSET.bit.SOF = 1; }
    13aa:	2204      	movs	r2, #4
    13ac:	8b19      	ldrh	r1, [r3, #24]
    13ae:	430a      	orrs	r2, r1
    13b0:	831a      	strh	r2, [r3, #24]
	_usbConfiguration = 0;
    13b2:	2200      	movs	r2, #0
    13b4:	4b02      	ldr	r3, [pc, #8]	; (13c0 <_ZN14USBDeviceClass6attachEv+0x30>)
    13b6:	601a      	str	r2, [r3, #0]
}
    13b8:	4770      	bx	lr
    13ba:	46c0      	nop			; (mov r8, r8)
    13bc:	20000600 	.word	0x20000600
    13c0:	200005f8 	.word	0x200005f8

000013c4 <_ZN14USBDeviceClass10setAddressEm>:
{
    13c4:	b510      	push	{r4, lr}
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
    13c6:	4a0f      	ldr	r2, [pc, #60]	; (1404 <_ZN14USBDeviceClass10setAddressEm+0x40>)
    13c8:	6993      	ldr	r3, [r2, #24]
    13ca:	0b9b      	lsrs	r3, r3, #14
    13cc:	039b      	lsls	r3, r3, #14
    13ce:	6193      	str	r3, [r2, #24]
	inline void epBank1AckTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT(2); }
    13d0:	6813      	ldr	r3, [r2, #0]
    13d2:	2202      	movs	r2, #2
    13d4:	33ff      	adds	r3, #255	; 0xff
    13d6:	721a      	strb	r2, [r3, #8]
	inline void epBank1SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK1RDY = 1; }
    13d8:	7998      	ldrb	r0, [r3, #6]
    13da:	3a82      	subs	r2, #130	; 0x82
    13dc:	4302      	orrs	r2, r0
    13de:	719a      	strb	r2, [r3, #6]
	inline bool epBank1IsTransferComplete(ep_t ep)  { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.TRCPT1; }
    13e0:	7a1a      	ldrb	r2, [r3, #8]
	while (!usbd.epBank1IsTransferComplete(0)) {}
    13e2:	0792      	lsls	r2, r2, #30
    13e4:	d5fc      	bpl.n	13e0 <_ZN14USBDeviceClass10setAddressEm+0x1c>
	USB->DEVICE.DADD.bit.DADD = addr; // Address
    13e6:	247f      	movs	r4, #127	; 0x7f
    13e8:	4a07      	ldr	r2, [pc, #28]	; (1408 <_ZN14USBDeviceClass10setAddressEm+0x44>)
    13ea:	4021      	ands	r1, r4
    13ec:	7a93      	ldrb	r3, [r2, #10]
    13ee:	0008      	movs	r0, r1
    13f0:	43a3      	bics	r3, r4
    13f2:	0019      	movs	r1, r3
	USB->DEVICE.DADD.bit.ADDEN = 1; // Enable
    13f4:	2380      	movs	r3, #128	; 0x80
	USB->DEVICE.DADD.bit.DADD = addr; // Address
    13f6:	4301      	orrs	r1, r0
    13f8:	7291      	strb	r1, [r2, #10]
	USB->DEVICE.DADD.bit.ADDEN = 1; // Enable
    13fa:	7a91      	ldrb	r1, [r2, #10]
    13fc:	425b      	negs	r3, r3
    13fe:	430b      	orrs	r3, r1
    1400:	7293      	strb	r3, [r2, #10]
}
    1402:	bd10      	pop	{r4, pc}
    1404:	20000600 	.word	0x20000600
    1408:	41005000 	.word	0x41005000

0000140c <_ZN14USBDeviceClass25handleClassInterfaceSetupER8USBSetup>:
{
    140c:	b510      	push	{r4, lr}
    140e:	000c      	movs	r4, r1
	bool ret = PluggableUSB().setup(setup);
    1410:	f7ff fc8a 	bl	d28 <_Z12PluggableUSBv>
    1414:	0021      	movs	r1, r4
    1416:	f7ff fc3e 	bl	c96 <_ZN13PluggableUSB_5setupER8USBSetup>
	if ( ret == false) {
    141a:	2800      	cmp	r0, #0
    141c:	d104      	bne.n	1428 <_ZN14USBDeviceClass25handleClassInterfaceSetupER8USBSetup+0x1c>
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
    141e:	4a03      	ldr	r2, [pc, #12]	; (142c <_ZN14USBDeviceClass25handleClassInterfaceSetupER8USBSetup+0x20>)
    1420:	6993      	ldr	r3, [r2, #24]
    1422:	0b9b      	lsrs	r3, r3, #14
    1424:	039b      	lsls	r3, r3, #14
    1426:	6193      	str	r3, [r2, #24]
}
    1428:	bd10      	pop	{r4, pc}
    142a:	46c0      	nop			; (mov r8, r8)
    142c:	20000600 	.word	0x20000600

00001430 <_ZN14USBDeviceClass6initEPEmm>:
{
    1430:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1432:	000d      	movs	r5, r1
	if (config == (USB_ENDPOINT_TYPE_INTERRUPT | USB_ENDPOINT_IN(0)))
    1434:	2a83      	cmp	r2, #131	; 0x83
    1436:	d119      	bne.n	146c <_ZN14USBDeviceClass6initEPEmm+0x3c>
	inline void epBank1SetSize(ep_t ep, uint16_t size) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.SIZE = EP_PCKSIZE_SIZE(size); }
    1438:	b2cb      	uxtb	r3, r1
    143a:	4c39      	ldr	r4, [pc, #228]	; (1520 <_ZN14USBDeviceClass6initEPEmm+0xf0>)
    143c:	015a      	lsls	r2, r3, #5
    143e:	18a2      	adds	r2, r4, r2
    1440:	6991      	ldr	r1, [r2, #24]
    1442:	4838      	ldr	r0, [pc, #224]	; (1524 <_ZN14USBDeviceClass6initEPEmm+0xf4>)
		usbd.epBank1SetAddress(ep, &udd_ep_in_cache_buffer[ep]);
    1444:	01ad      	lsls	r5, r5, #6
    1446:	4008      	ands	r0, r1
    1448:	21c0      	movs	r1, #192	; 0xc0
    144a:	0589      	lsls	r1, r1, #22
    144c:	4301      	orrs	r1, r0
    144e:	6191      	str	r1, [r2, #24]
    1450:	4935      	ldr	r1, [pc, #212]	; (1528 <_ZN14USBDeviceClass6initEPEmm+0xf8>)
	inline void epBank1SetType(ep_t ep, uint8_t type) { usb.DeviceEndpoint[ep].EPCFG.bit.EPTYPE1 = type; }
    1452:	6820      	ldr	r0, [r4, #0]
    1454:	194d      	adds	r5, r1, r5
    1456:	2170      	movs	r1, #112	; 0x70
    1458:	3308      	adds	r3, #8
	inline void epBank1SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[1].ADDR.reg = (uint32_t)addr; }
    145a:	6155      	str	r5, [r2, #20]
	inline void epBank1SetType(ep_t ep, uint8_t type) { usb.DeviceEndpoint[ep].EPCFG.bit.EPTYPE1 = type; }
    145c:	015b      	lsls	r3, r3, #5
    145e:	5c1a      	ldrb	r2, [r3, r0]
    1460:	438a      	bics	r2, r1
    1462:	0011      	movs	r1, r2
    1464:	2240      	movs	r2, #64	; 0x40
    1466:	430a      	orrs	r2, r1
    1468:	541a      	strb	r2, [r3, r0]
}
    146a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	else if (config == (USB_ENDPOINT_TYPE_BULK | USB_ENDPOINT_OUT(0)))
    146c:	2a02      	cmp	r2, #2
    146e:	d152      	bne.n	1516 <_ZN14USBDeviceClass6initEPEmm+0xe6>
		if (epHandlers[ep] != NULL) {
    1470:	4a2e      	ldr	r2, [pc, #184]	; (152c <_ZN14USBDeviceClass6initEPEmm+0xfc>)
    1472:	008b      	lsls	r3, r1, #2
    1474:	5898      	ldr	r0, [r3, r2]
    1476:	2800      	cmp	r0, #0
    1478:	d002      	beq.n	1480 <_ZN14USBDeviceClass6initEPEmm+0x50>
			delete (DoubleBufferedEPOutHandler*)epHandlers[ep];
    147a:	6803      	ldr	r3, [r0, #0]
    147c:	695b      	ldr	r3, [r3, #20]
    147e:	4798      	blx	r3
		epHandlers[ep] = new DoubleBufferedEPOutHandler(usbd, ep);
    1480:	20da      	movs	r0, #218	; 0xda
    1482:	0040      	lsls	r0, r0, #1
    1484:	f001 f9a8 	bl	27d8 <_Znwj>
    memset( _aucBuffer, 0, N ) ;
    1488:	2280      	movs	r2, #128	; 0x80
    148a:	0004      	movs	r4, r0
		notify(false)
    148c:	4e24      	ldr	r6, [pc, #144]	; (1520 <_ZN14USBDeviceClass6initEPEmm+0xf0>)
    148e:	4b28      	ldr	r3, [pc, #160]	; (1530 <_ZN14USBDeviceClass6initEPEmm+0x100>)
    1490:	6046      	str	r6, [r0, #4]
    1492:	6003      	str	r3, [r0, #0]
    1494:	0052      	lsls	r2, r2, #1
    1496:	2100      	movs	r1, #0
    1498:	3008      	adds	r0, #8
    149a:	f003 feaa 	bl	51f2 <memset>
  _iHead = 0;
    149e:	0022      	movs	r2, r4
    14a0:	2300      	movs	r3, #0
    14a2:	32fc      	adds	r2, #252	; 0xfc
    14a4:	60d3      	str	r3, [r2, #12]
    14a6:	6155      	str	r5, [r2, #20]
  _iTail = 0;
    14a8:	6113      	str	r3, [r2, #16]
    14aa:	6613      	str	r3, [r2, #96]	; 0x60
    14ac:	6193      	str	r3, [r2, #24]
    14ae:	61d3      	str	r3, [r2, #28]
    14b0:	6653      	str	r3, [r2, #100]	; 0x64
    14b2:	22b2      	movs	r2, #178	; 0xb2
    14b4:	0052      	lsls	r2, r2, #1
    14b6:	54a3      	strb	r3, [r4, r2]
    14b8:	3244      	adds	r2, #68	; 0x44
    14ba:	50a3      	str	r3, [r4, r2]
    14bc:	3204      	adds	r2, #4
    14be:	50a3      	str	r3, [r4, r2]
    14c0:	3204      	adds	r2, #4
    14c2:	54a3      	strb	r3, [r4, r2]
    14c4:	22b2      	movs	r2, #178	; 0xb2
    14c6:	32ff      	adds	r2, #255	; 0xff
    14c8:	54a3      	strb	r3, [r4, r2]
	inline void epBank0SetSize(ep_t ep, uint16_t size) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.SIZE = EP_PCKSIZE_SIZE(size); }
    14ca:	b2ea      	uxtb	r2, r5
    14cc:	0150      	lsls	r0, r2, #5
    14ce:	1831      	adds	r1, r6, r0
    14d0:	688b      	ldr	r3, [r1, #8]
    14d2:	4f14      	ldr	r7, [pc, #80]	; (1524 <_ZN14USBDeviceClass6initEPEmm+0xf4>)
	inline void epBank0SetType(ep_t ep, uint8_t type) { usb.DeviceEndpoint[ep].EPCFG.bit.EPTYPE0 = type; }
    14d4:	3208      	adds	r2, #8
	inline void epBank0SetSize(ep_t ep, uint16_t size) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.SIZE = EP_PCKSIZE_SIZE(size); }
    14d6:	401f      	ands	r7, r3
    14d8:	23c0      	movs	r3, #192	; 0xc0
    14da:	059b      	lsls	r3, r3, #22
    14dc:	433b      	orrs	r3, r7
	inline void epBank0SetType(ep_t ep, uint8_t type) { usb.DeviceEndpoint[ep].EPCFG.bit.EPTYPE0 = type; }
    14de:	2707      	movs	r7, #7
	inline void epBank0SetSize(ep_t ep, uint16_t size) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.SIZE = EP_PCKSIZE_SIZE(size); }
    14e0:	608b      	str	r3, [r1, #8]
	inline void epBank0SetType(ep_t ep, uint8_t type) { usb.DeviceEndpoint[ep].EPCFG.bit.EPTYPE0 = type; }
    14e2:	6833      	ldr	r3, [r6, #0]
    14e4:	0152      	lsls	r2, r2, #5
    14e6:	5cd6      	ldrb	r6, [r2, r3]
    14e8:	00ad      	lsls	r5, r5, #2
    14ea:	43be      	bics	r6, r7
    14ec:	46b4      	mov	ip, r6
    14ee:	2603      	movs	r6, #3
    14f0:	4667      	mov	r7, ip
    14f2:	433e      	orrs	r6, r7
    14f4:	54d6      	strb	r6, [r2, r3]
		usbd.epBank0SetAddress(ep, const_cast<uint8_t *>(data0));
    14f6:	0022      	movs	r2, r4
    14f8:	321d      	adds	r2, #29
    14fa:	32ff      	adds	r2, #255	; 0xff
	inline void epBank0SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[0].ADDR.reg = (uint32_t)addr; }
    14fc:	604a      	str	r2, [r1, #4]
	inline void epBank0EnableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRCPT0 = 1; }
    14fe:	2201      	movs	r2, #1
    1500:	181b      	adds	r3, r3, r0
    1502:	33ff      	adds	r3, #255	; 0xff
    1504:	7a99      	ldrb	r1, [r3, #10]
		release();
    1506:	0020      	movs	r0, r4
	inline void epBank0EnableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRCPT0 = 1; }
    1508:	430a      	orrs	r2, r1
    150a:	729a      	strb	r2, [r3, #10]
		release();
    150c:	f7ff fccc 	bl	ea8 <_ZN26DoubleBufferedEPOutHandler7releaseEv>
    1510:	4b06      	ldr	r3, [pc, #24]	; (152c <_ZN14USBDeviceClass6initEPEmm+0xfc>)
    1512:	515c      	str	r4, [r3, r5]
    1514:	e7a9      	b.n	146a <_ZN14USBDeviceClass6initEPEmm+0x3a>
    1516:	0011      	movs	r1, r2
    1518:	0028      	movs	r0, r5
    151a:	f7ff fc1d 	bl	d58 <_ZN14USBDeviceClass6initEPEmm.part.7>
}
    151e:	e7a4      	b.n	146a <_ZN14USBDeviceClass6initEPEmm+0x3a>
    1520:	20000600 	.word	0x20000600
    1524:	8fffffff 	.word	0x8fffffff
    1528:	20000174 	.word	0x20000174
    152c:	2000014c 	.word	0x2000014c
    1530:	00005484 	.word	0x00005484

00001534 <_ZN14USBDeviceClass13initEndpointsEv>:
void USBDeviceClass::initEndpoints() {
    1534:	b570      	push	{r4, r5, r6, lr}
    1536:	0005      	movs	r5, r0
    1538:	2401      	movs	r4, #1
	for (uint8_t i = 1; (i < EP_ARRAY_SIZE) && (EndPoints[i] != 0); i++) {
    153a:	4b06      	ldr	r3, [pc, #24]	; (1554 <_ZN14USBDeviceClass13initEndpointsEv+0x20>)
    153c:	00a2      	lsls	r2, r4, #2
    153e:	58d2      	ldr	r2, [r2, r3]
    1540:	2a00      	cmp	r2, #0
    1542:	d006      	beq.n	1552 <_ZN14USBDeviceClass13initEndpointsEv+0x1e>
		initEP(i, EndPoints[i]);
    1544:	0021      	movs	r1, r4
    1546:	0028      	movs	r0, r5
    1548:	3401      	adds	r4, #1
    154a:	f7ff ff71 	bl	1430 <_ZN14USBDeviceClass6initEPEmm>
	for (uint8_t i = 1; (i < EP_ARRAY_SIZE) && (EndPoints[i] != 0); i++) {
    154e:	2c0a      	cmp	r4, #10
    1550:	d1f3      	bne.n	153a <_ZN14USBDeviceClass13initEndpointsEv+0x6>
}
    1552:	bd70      	pop	{r4, r5, r6, pc}
    1554:	20000120 	.word	0x20000120

00001558 <_ZN14USBDeviceClass5clearEm>:
		usbd.epBank1AckTransferComplete(ep);
	}
}

void USBDeviceClass::clear(uint32_t ep) {
	usbd.epBank1SetAddress(ep, &udd_ep_in_cache_buffer[ep]);
    1558:	4b0b      	ldr	r3, [pc, #44]	; (1588 <_ZN14USBDeviceClass5clearEm+0x30>)
	inline void epBank1SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[1].ADDR.reg = (uint32_t)addr; }
    155a:	b2ca      	uxtb	r2, r1
    155c:	480b      	ldr	r0, [pc, #44]	; (158c <_ZN14USBDeviceClass5clearEm+0x34>)
    155e:	0189      	lsls	r1, r1, #6
    1560:	1859      	adds	r1, r3, r1
    1562:	0153      	lsls	r3, r2, #5
    1564:	18c3      	adds	r3, r0, r3
    1566:	6159      	str	r1, [r3, #20]
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
    1568:	6999      	ldr	r1, [r3, #24]
	inline void epBank1AckTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT(2); }
    156a:	3208      	adds	r2, #8
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
    156c:	0b89      	lsrs	r1, r1, #14
    156e:	0389      	lsls	r1, r1, #14
    1570:	6199      	str	r1, [r3, #24]
	inline void epBank1AckTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT(2); }
    1572:	6803      	ldr	r3, [r0, #0]
    1574:	0152      	lsls	r2, r2, #5
    1576:	189a      	adds	r2, r3, r2
    1578:	2302      	movs	r3, #2
    157a:	71d3      	strb	r3, [r2, #7]
	inline void epBank1SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK1RDY = 1; }
    157c:	7951      	ldrb	r1, [r2, #5]
    157e:	3b82      	subs	r3, #130	; 0x82
    1580:	430b      	orrs	r3, r1
    1582:	7153      	strb	r3, [r2, #5]
	// Clear the transfer complete flag
	usbd.epBank1AckTransferComplete(ep);

	// RAM buffer is full, we can send data (IN)
	usbd.epBank1SetReady(ep);
}
    1584:	4770      	bx	lr
    1586:	46c0      	nop			; (mov r8, r8)
    1588:	20000174 	.word	0x20000174
    158c:	20000600 	.word	0x20000600

00001590 <_ZN14USBDeviceClass9availableEm>:
}

// Number of bytes, assumes a rx endpoint
uint32_t USBDeviceClass::available(uint32_t ep)
{
	if (epHandlers[ep]) {
    1590:	4b08      	ldr	r3, [pc, #32]	; (15b4 <_ZN14USBDeviceClass9availableEm+0x24>)
    1592:	008a      	lsls	r2, r1, #2
    1594:	58d0      	ldr	r0, [r2, r3]
{
    1596:	b510      	push	{r4, lr}
	if (epHandlers[ep]) {
    1598:	2800      	cmp	r0, #0
    159a:	d003      	beq.n	15a4 <_ZN14USBDeviceClass9availableEm+0x14>
		return epHandlers[ep]->available();
    159c:	6803      	ldr	r3, [r0, #0]
    159e:	689b      	ldr	r3, [r3, #8]
    15a0:	4798      	blx	r3
	} else {
		return usbd.epBank0ByteCount(ep);
	}
}
    15a2:	bd10      	pop	{r4, pc}
	inline uint16_t epBank0ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT; }
    15a4:	b2c9      	uxtb	r1, r1
    15a6:	4b04      	ldr	r3, [pc, #16]	; (15b8 <_ZN14USBDeviceClass9availableEm+0x28>)
    15a8:	0149      	lsls	r1, r1, #5
    15aa:	1859      	adds	r1, r3, r1
    15ac:	6888      	ldr	r0, [r1, #8]
    15ae:	0480      	lsls	r0, r0, #18
    15b0:	0c80      	lsrs	r0, r0, #18
		return usbd.epBank0ByteCount(ep);
    15b2:	e7f6      	b.n	15a2 <_ZN14USBDeviceClass9availableEm+0x12>
    15b4:	2000014c 	.word	0x2000014c
    15b8:	20000600 	.word	0x20000600

000015bc <_ZN14USBDeviceClass5flushEm>:
{
    15bc:	b510      	push	{r4, lr}
    15be:	000c      	movs	r4, r1
	if (available(ep)) {
    15c0:	f7ff ffe6 	bl	1590 <_ZN14USBDeviceClass9availableEm>
    15c4:	2800      	cmp	r0, #0
    15c6:	d00c      	beq.n	15e2 <_ZN14USBDeviceClass5flushEm+0x26>
	inline void epBank1SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK1RDY = 1; }
    15c8:	4b06      	ldr	r3, [pc, #24]	; (15e4 <_ZN14USBDeviceClass5flushEm+0x28>)
    15ca:	b2e4      	uxtb	r4, r4
    15cc:	681b      	ldr	r3, [r3, #0]
    15ce:	3408      	adds	r4, #8
    15d0:	0164      	lsls	r4, r4, #5
    15d2:	191c      	adds	r4, r3, r4
    15d4:	2380      	movs	r3, #128	; 0x80
    15d6:	7962      	ldrb	r2, [r4, #5]
    15d8:	425b      	negs	r3, r3
    15da:	4313      	orrs	r3, r2
    15dc:	7163      	strb	r3, [r4, #5]
	inline void epBank1AckTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT(2); }
    15de:	2302      	movs	r3, #2
    15e0:	71e3      	strb	r3, [r4, #7]
}
    15e2:	bd10      	pop	{r4, pc}
    15e4:	20000600 	.word	0x20000600

000015e8 <_ZN14USBDeviceClass4recvEmPvm>:

// Non Blocking receive
// Return number of bytes read
uint32_t USBDeviceClass::recv(uint32_t ep, void *_data, uint32_t len)
{
    15e8:	b5f0      	push	{r4, r5, r6, r7, lr}
    15ea:	001c      	movs	r4, r3
	if (!_usbConfiguration)
    15ec:	4b30      	ldr	r3, [pc, #192]	; (16b0 <_ZN14USBDeviceClass4recvEmPvm+0xc8>)
{
    15ee:	b085      	sub	sp, #20
	if (!_usbConfiguration)
    15f0:	681b      	ldr	r3, [r3, #0]
{
    15f2:	0007      	movs	r7, r0
    15f4:	000d      	movs	r5, r1
    15f6:	9202      	str	r2, [sp, #8]
	if (!_usbConfiguration)
    15f8:	2b00      	cmp	r3, #0
    15fa:	d056      	beq.n	16aa <_ZN14USBDeviceClass4recvEmPvm+0xc2>
		return -1;

#ifdef PIN_LED_RXL
	if (rxLEDPulse == 0)
    15fc:	4e2d      	ldr	r6, [pc, #180]	; (16b4 <_ZN14USBDeviceClass4recvEmPvm+0xcc>)
    15fe:	7831      	ldrb	r1, [r6, #0]
    1600:	b2c9      	uxtb	r1, r1
    1602:	2900      	cmp	r1, #0
    1604:	d102      	bne.n	160c <_ZN14USBDeviceClass4recvEmPvm+0x24>
		digitalWrite(PIN_LED_RXL, LOW);
    1606:	2019      	movs	r0, #25
    1608:	f000 fcac 	bl	1f64 <digitalWrite>

	rxLEDPulse = TX_RX_LED_PULSE_MS;
    160c:	2364      	movs	r3, #100	; 0x64
    160e:	7033      	strb	r3, [r6, #0]
#endif

	if (epHandlers[ep]) {
    1610:	4b29      	ldr	r3, [pc, #164]	; (16b8 <_ZN14USBDeviceClass4recvEmPvm+0xd0>)
    1612:	00aa      	lsls	r2, r5, #2
    1614:	58d0      	ldr	r0, [r2, r3]
    1616:	2800      	cmp	r0, #0
    1618:	d008      	beq.n	162c <_ZN14USBDeviceClass4recvEmPvm+0x44>
		return epHandlers[ep]->recv(_data, len);
    161a:	6803      	ldr	r3, [r0, #0]
    161c:	0022      	movs	r2, r4
    161e:	685b      	ldr	r3, [r3, #4]
    1620:	9902      	ldr	r1, [sp, #8]
    1622:	4798      	blx	r3
    1624:	0004      	movs	r4, r0
		// Enable Transfer complete 0 interrupt
		usbd.epBank0EnableTransferComplete(ep);
	}

	return len;
}
    1626:	0020      	movs	r0, r4
    1628:	b005      	add	sp, #20
    162a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (available(ep) < len)
    162c:	0029      	movs	r1, r5
    162e:	0038      	movs	r0, r7
    1630:	f7ff ffae 	bl	1590 <_ZN14USBDeviceClass9availableEm>
    1634:	4284      	cmp	r4, r0
    1636:	d904      	bls.n	1642 <_ZN14USBDeviceClass4recvEmPvm+0x5a>
		len = available(ep);
    1638:	0029      	movs	r1, r5
    163a:	0038      	movs	r0, r7
    163c:	f7ff ffa8 	bl	1590 <_ZN14USBDeviceClass9availableEm>
    1640:	0004      	movs	r4, r0
	inline void epBank0DisableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENCLR.bit.TRCPT0 = 1; }
    1642:	2101      	movs	r1, #1
	inline void epBank0SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = bc; }
    1644:	b2eb      	uxtb	r3, r5
    1646:	4e1d      	ldr	r6, [pc, #116]	; (16bc <_ZN14USBDeviceClass4recvEmPvm+0xd4>)
    1648:	9303      	str	r3, [sp, #12]
    164a:	015b      	lsls	r3, r3, #5
    164c:	9301      	str	r3, [sp, #4]
    164e:	18f2      	adds	r2, r6, r3
    1650:	6893      	ldr	r3, [r2, #8]
    1652:	0b9b      	lsrs	r3, r3, #14
    1654:	039b      	lsls	r3, r3, #14
    1656:	6093      	str	r3, [r2, #8]
	inline void epBank0DisableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENCLR.bit.TRCPT0 = 1; }
    1658:	9a01      	ldr	r2, [sp, #4]
    165a:	6833      	ldr	r3, [r6, #0]
	memcpy(_data, udd_ep_out_cache_buffer[ep], len);
    165c:	9802      	ldr	r0, [sp, #8]
    165e:	189b      	adds	r3, r3, r2
    1660:	33ff      	adds	r3, #255	; 0xff
    1662:	7a5a      	ldrb	r2, [r3, #9]
    1664:	430a      	orrs	r2, r1
    1666:	4916      	ldr	r1, [pc, #88]	; (16c0 <_ZN14USBDeviceClass4recvEmPvm+0xd8>)
    1668:	725a      	strb	r2, [r3, #9]
    166a:	01ab      	lsls	r3, r5, #6
    166c:	18c9      	adds	r1, r1, r3
    166e:	0022      	movs	r2, r4
    1670:	f003 fdb6 	bl	51e0 <memcpy>
	if (len && !available(ep)) {
    1674:	2c00      	cmp	r4, #0
    1676:	d0d6      	beq.n	1626 <_ZN14USBDeviceClass4recvEmPvm+0x3e>
    1678:	0029      	movs	r1, r5
    167a:	0038      	movs	r0, r7
    167c:	f7ff ff88 	bl	1590 <_ZN14USBDeviceClass9availableEm>
    1680:	2800      	cmp	r0, #0
    1682:	d1d0      	bne.n	1626 <_ZN14USBDeviceClass4recvEmPvm+0x3e>
	inline void epBank0ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK0RDY = 1; }
    1684:	2140      	movs	r1, #64	; 0x40
    1686:	9b03      	ldr	r3, [sp, #12]
    1688:	6832      	ldr	r2, [r6, #0]
    168a:	3308      	adds	r3, #8
    168c:	015b      	lsls	r3, r3, #5
    168e:	18d3      	adds	r3, r2, r3
    1690:	7918      	ldrb	r0, [r3, #4]
    1692:	4301      	orrs	r1, r0
    1694:	7119      	strb	r1, [r3, #4]
	inline void epBank0AckTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT(1); }
    1696:	2101      	movs	r1, #1
    1698:	71d9      	strb	r1, [r3, #7]
	inline void epBank0EnableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRCPT0 = 1; }
    169a:	2101      	movs	r1, #1
    169c:	9b01      	ldr	r3, [sp, #4]
    169e:	18d3      	adds	r3, r2, r3
    16a0:	33ff      	adds	r3, #255	; 0xff
    16a2:	7a9a      	ldrb	r2, [r3, #10]
    16a4:	430a      	orrs	r2, r1
    16a6:	729a      	strb	r2, [r3, #10]
    16a8:	e7bd      	b.n	1626 <_ZN14USBDeviceClass4recvEmPvm+0x3e>
		return -1;
    16aa:	2401      	movs	r4, #1
    16ac:	4264      	negs	r4, r4
    16ae:	e7ba      	b.n	1626 <_ZN14USBDeviceClass4recvEmPvm+0x3e>
    16b0:	200005f8 	.word	0x200005f8
    16b4:	20000168 	.word	0x20000168
    16b8:	2000014c 	.word	0x2000014c
    16bc:	20000600 	.word	0x20000600
    16c0:	20000334 	.word	0x20000334

000016c4 <_ZN14USBDeviceClass4recvEm>:

// Recv 1 byte if ready
int USBDeviceClass::recv(uint32_t ep)
{
    16c4:	b513      	push	{r0, r1, r4, lr}
	uint8_t c;
	if (recv(ep, &c, 1) != 1) {
    16c6:	466b      	mov	r3, sp
    16c8:	1ddc      	adds	r4, r3, #7
    16ca:	0022      	movs	r2, r4
    16cc:	2301      	movs	r3, #1
    16ce:	f7ff ff8b 	bl	15e8 <_ZN14USBDeviceClass4recvEmPvm>
    16d2:	2801      	cmp	r0, #1
    16d4:	d101      	bne.n	16da <_ZN14USBDeviceClass4recvEm+0x16>
		return -1;
	} else {
		return c;
    16d6:	7820      	ldrb	r0, [r4, #0]
	}
}
    16d8:	bd16      	pop	{r1, r2, r4, pc}
		return -1;
    16da:	2001      	movs	r0, #1
    16dc:	4240      	negs	r0, r0
    16de:	e7fb      	b.n	16d8 <_ZN14USBDeviceClass4recvEm+0x14>

000016e0 <_ZN14USBDeviceClass14armRecvCtrlOUTEm>:

uint8_t USBDeviceClass::armRecvCtrlOUT(uint32_t ep)
{
    16e0:	b570      	push	{r4, r5, r6, lr}
	// Get endpoint configuration from setting register
	usbd.epBank0SetAddress(ep, &udd_ep_out_cache_buffer[ep]);
    16e2:	4b13      	ldr	r3, [pc, #76]	; (1730 <_ZN14USBDeviceClass14armRecvCtrlOUTEm+0x50>)
	inline void epBank0SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[0].ADDR.reg = (uint32_t)addr; }
    16e4:	b2cc      	uxtb	r4, r1
    16e6:	4a13      	ldr	r2, [pc, #76]	; (1734 <_ZN14USBDeviceClass14armRecvCtrlOUTEm+0x54>)
    16e8:	0160      	lsls	r0, r4, #5
    16ea:	0189      	lsls	r1, r1, #6
    16ec:	1859      	adds	r1, r3, r1
    16ee:	1813      	adds	r3, r2, r0
    16f0:	6059      	str	r1, [r3, #4]
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
    16f2:	6899      	ldr	r1, [r3, #8]
    16f4:	4d10      	ldr	r5, [pc, #64]	; (1738 <_ZN14USBDeviceClass14armRecvCtrlOUTEm+0x58>)
	inline void epBank0ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK0RDY = 1; }
    16f6:	3408      	adds	r4, #8
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
    16f8:	400d      	ands	r5, r1
    16fa:	2180      	movs	r1, #128	; 0x80
    16fc:	0349      	lsls	r1, r1, #13
    16fe:	4329      	orrs	r1, r5
	inline void epBank0ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK0RDY = 1; }
    1700:	2540      	movs	r5, #64	; 0x40
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
    1702:	6099      	str	r1, [r3, #8]
	inline void epBank0SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = bc; }
    1704:	6899      	ldr	r1, [r3, #8]
    1706:	0b89      	lsrs	r1, r1, #14
    1708:	0389      	lsls	r1, r1, #14
    170a:	6099      	str	r1, [r3, #8]
	inline void epBank0ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK0RDY = 1; }
    170c:	6811      	ldr	r1, [r2, #0]
    170e:	0163      	lsls	r3, r4, #5
    1710:	18cb      	adds	r3, r1, r3
    1712:	791e      	ldrb	r6, [r3, #4]
    1714:	4335      	orrs	r5, r6
    1716:	711d      	strb	r5, [r3, #4]
	inline bool epBank0IsReady(ep_t ep)    { return usb.DeviceEndpoint[ep].EPSTATUS.bit.BK0RDY; }
    1718:	799d      	ldrb	r5, [r3, #6]
	usbd.epBank0SetByteCount(ep, 0);

	usbd.epBank0ResetReady(ep);

	// Wait OUT
	while (!usbd.epBank0IsReady(ep)) {}
    171a:	066d      	lsls	r5, r5, #25
    171c:	d5fc      	bpl.n	1718 <_ZN14USBDeviceClass14armRecvCtrlOUTEm+0x38>
	inline bool epBank0IsTransferComplete(ep_t ep)  { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.TRCPT0; }
    171e:	0164      	lsls	r4, r4, #5
    1720:	1909      	adds	r1, r1, r4
    1722:	79cb      	ldrb	r3, [r1, #7]
	while (!usbd.epBank0IsTransferComplete(ep)) {}
    1724:	07db      	lsls	r3, r3, #31
    1726:	d5fc      	bpl.n	1722 <_ZN14USBDeviceClass14armRecvCtrlOUTEm+0x42>
	inline uint16_t epBank0ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT; }
    1728:	1812      	adds	r2, r2, r0
    172a:	6890      	ldr	r0, [r2, #8]
	return usbd.epBank0ByteCount(ep);
    172c:	b2c0      	uxtb	r0, r0
}
    172e:	bd70      	pop	{r4, r5, r6, pc}
    1730:	20000334 	.word	0x20000334
    1734:	20000600 	.word	0x20000600
    1738:	f0003fff 	.word	0xf0003fff

0000173c <_ZN14USBDeviceClass11recvControlEPvm>:
{
    173c:	b570      	push	{r4, r5, r6, lr}
    173e:	000d      	movs	r5, r1
	uint32_t read = armRecvCtrlOUT(0);
    1740:	2100      	movs	r1, #0
{
    1742:	0014      	movs	r4, r2
	uint32_t read = armRecvCtrlOUT(0);
    1744:	f7ff ffcc 	bl	16e0 <_ZN14USBDeviceClass14armRecvCtrlOUTEm>
    1748:	42a0      	cmp	r0, r4
    174a:	d900      	bls.n	174e <_ZN14USBDeviceClass11recvControlEPvm+0x12>
    174c:	0020      	movs	r0, r4
	for (uint32_t i=0; i<len; i++) {
    174e:	2300      	movs	r3, #0
		data[i] = buffer[i];
    1750:	4903      	ldr	r1, [pc, #12]	; (1760 <_ZN14USBDeviceClass11recvControlEPvm+0x24>)
	for (uint32_t i=0; i<len; i++) {
    1752:	42a3      	cmp	r3, r4
    1754:	d003      	beq.n	175e <_ZN14USBDeviceClass11recvControlEPvm+0x22>
		data[i] = buffer[i];
    1756:	5c5a      	ldrb	r2, [r3, r1]
    1758:	54ea      	strb	r2, [r5, r3]
	for (uint32_t i=0; i<len; i++) {
    175a:	3301      	adds	r3, #1
    175c:	e7f9      	b.n	1752 <_ZN14USBDeviceClass11recvControlEPvm+0x16>
}
    175e:	bd70      	pop	{r4, r5, r6, pc}
    1760:	20000334 	.word	0x20000334

00001764 <_ZN14USBDeviceClass4sendEmPKvm>:
	0
};

// Blocking Send of data to an endpoint
uint32_t USBDeviceClass::send(uint32_t ep, const void *data, uint32_t len)
{
    1764:	b5f0      	push	{r4, r5, r6, r7, lr}
    1766:	001e      	movs	r6, r3
	uint32_t written = 0;
	uint32_t length = 0;

	if (!_usbConfiguration)
    1768:	4b3f      	ldr	r3, [pc, #252]	; (1868 <_ZN14USBDeviceClass4sendEmPKvm+0x104>)
{
    176a:	b085      	sub	sp, #20
	if (!_usbConfiguration)
    176c:	681b      	ldr	r3, [r3, #0]
{
    176e:	000f      	movs	r7, r1
    1770:	9201      	str	r2, [sp, #4]
	if (!_usbConfiguration)
    1772:	2b00      	cmp	r3, #0
    1774:	d03f      	beq.n	17f6 <_ZN14USBDeviceClass4sendEmPKvm+0x92>
		return -1;
	if (len > 16384)
    1776:	2380      	movs	r3, #128	; 0x80
    1778:	01db      	lsls	r3, r3, #7
    177a:	429e      	cmp	r6, r3
    177c:	d83b      	bhi.n	17f6 <_ZN14USBDeviceClass4sendEmPKvm+0x92>
		return -1;

#ifdef PIN_LED_TXL
	if (txLEDPulse == 0)
    177e:	4c3b      	ldr	r4, [pc, #236]	; (186c <_ZN14USBDeviceClass4sendEmPKvm+0x108>)
    1780:	7821      	ldrb	r1, [r4, #0]
    1782:	b2c9      	uxtb	r1, r1
    1784:	2900      	cmp	r1, #0
    1786:	d102      	bne.n	178e <_ZN14USBDeviceClass4sendEmPKvm+0x2a>
		digitalWrite(PIN_LED_TXL, LOW);
    1788:	201a      	movs	r0, #26
    178a:	f000 fbeb 	bl	1f64 <digitalWrite>

	txLEDPulse = TX_RX_LED_PULSE_MS;
    178e:	2364      	movs	r3, #100	; 0x64
	uint32_t written = 0;
    1790:	2500      	movs	r5, #0
		} else {
			length = len;
		}

		/* memcopy could be safer in multi threaded environment */
		memcpy(&udd_ep_in_cache_buffer[ep], data, length);
    1792:	4a37      	ldr	r2, [pc, #220]	; (1870 <_ZN14USBDeviceClass4sendEmPKvm+0x10c>)
	txLEDPulse = TX_RX_LED_PULSE_MS;
    1794:	7023      	strb	r3, [r4, #0]
		memcpy(&udd_ep_in_cache_buffer[ep], data, length);
    1796:	01bb      	lsls	r3, r7, #6
    1798:	18d3      	adds	r3, r2, r3
    179a:	9302      	str	r3, [sp, #8]
	while (len != 0)
    179c:	2e00      	cmp	r6, #0
    179e:	d02c      	beq.n	17fa <_ZN14USBDeviceClass4sendEmPKvm+0x96>
	inline bool epBank1IsReady(ep_t ep)    { return usb.DeviceEndpoint[ep].EPSTATUS.bit.BK1RDY; }
    17a0:	4b34      	ldr	r3, [pc, #208]	; (1874 <_ZN14USBDeviceClass4sendEmPKvm+0x110>)
    17a2:	681b      	ldr	r3, [r3, #0]
    17a4:	9303      	str	r3, [sp, #12]
    17a6:	23ff      	movs	r3, #255	; 0xff
    17a8:	403b      	ands	r3, r7
    17aa:	001c      	movs	r4, r3
    17ac:	9300      	str	r3, [sp, #0]
    17ae:	3408      	adds	r4, #8
    17b0:	9b03      	ldr	r3, [sp, #12]
    17b2:	0164      	lsls	r4, r4, #5
    17b4:	191c      	adds	r4, r3, r4
    17b6:	79a3      	ldrb	r3, [r4, #6]
    17b8:	09db      	lsrs	r3, r3, #7
		if (usbd.epBank1IsReady(ep)) {
    17ba:	d021      	beq.n	1800 <_ZN14USBDeviceClass4sendEmPKvm+0x9c>
			uint32_t timeout = microsecondsToClockCycles(TX_TIMEOUT_MS * 1000) / 23;
    17bc:	4b2e      	ldr	r3, [pc, #184]	; (1878 <_ZN14USBDeviceClass4sendEmPKvm+0x114>)
    17be:	492f      	ldr	r1, [pc, #188]	; (187c <_ZN14USBDeviceClass4sendEmPKvm+0x118>)
    17c0:	6818      	ldr	r0, [r3, #0]
    17c2:	f001 fc61 	bl	3088 <__udivsi3>
    17c6:	4b2e      	ldr	r3, [pc, #184]	; (1880 <_ZN14USBDeviceClass4sendEmPKvm+0x11c>)
    17c8:	2117      	movs	r1, #23
    17ca:	4358      	muls	r0, r3
    17cc:	f001 fc5c 	bl	3088 <__udivsi3>
				if (LastTransmitTimedOut[ep] || timeout-- == 0) {
    17d0:	4b2c      	ldr	r3, [pc, #176]	; (1884 <_ZN14USBDeviceClass4sendEmPKvm+0x120>)
	inline bool epBank1IsTransferComplete(ep_t ep)  { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.TRCPT1; }
    17d2:	79e2      	ldrb	r2, [r4, #7]
			while (!usbd.epBank1IsTransferComplete(ep)) {
    17d4:	0792      	lsls	r2, r2, #30
    17d6:	d413      	bmi.n	1800 <_ZN14USBDeviceClass4sendEmPKvm+0x9c>
				if (LastTransmitTimedOut[ep] || timeout-- == 0) {
    17d8:	5dda      	ldrb	r2, [r3, r7]
    17da:	2a00      	cmp	r2, #0
    17dc:	d101      	bne.n	17e2 <_ZN14USBDeviceClass4sendEmPKvm+0x7e>
    17de:	3801      	subs	r0, #1
    17e0:	d2f7      	bcs.n	17d2 <_ZN14USBDeviceClass4sendEmPKvm+0x6e>
					LastTransmitTimedOut[ep] = 1;
    17e2:	2201      	movs	r2, #1
    17e4:	55da      	strb	r2, [r3, r7]
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
    17e6:	9b00      	ldr	r3, [sp, #0]
    17e8:	4a22      	ldr	r2, [pc, #136]	; (1874 <_ZN14USBDeviceClass4sendEmPKvm+0x110>)
    17ea:	015b      	lsls	r3, r3, #5
    17ec:	18d3      	adds	r3, r2, r3
    17ee:	699a      	ldr	r2, [r3, #24]
    17f0:	0b92      	lsrs	r2, r2, #14
    17f2:	0392      	lsls	r2, r2, #14
    17f4:	619a      	str	r2, [r3, #24]
					return -1;
    17f6:	2501      	movs	r5, #1
    17f8:	426d      	negs	r5, r5
		written += length;
		len -= length;
		data = (char *)data + length;
	}
	return written;
}
    17fa:	0028      	movs	r0, r5
    17fc:	b005      	add	sp, #20
    17fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
		LastTransmitTimedOut[ep] = 0;
    1800:	2200      	movs	r2, #0
    1802:	4b20      	ldr	r3, [pc, #128]	; (1884 <_ZN14USBDeviceClass4sendEmPKvm+0x120>)
    1804:	0034      	movs	r4, r6
    1806:	55da      	strb	r2, [r3, r7]
		if (len >= EPX_SIZE) {
    1808:	2e3f      	cmp	r6, #63	; 0x3f
    180a:	d909      	bls.n	1820 <_ZN14USBDeviceClass4sendEmPKvm+0xbc>
	inline void epBank1EnableAutoZLP(ep_t ep)  { EP[ep].DeviceDescBank[1].PCKSIZE.bit.AUTO_ZLP = 1; }
    180c:	9b00      	ldr	r3, [sp, #0]
			length = EPX_SIZE;
    180e:	2440      	movs	r4, #64	; 0x40
    1810:	015a      	lsls	r2, r3, #5
    1812:	4b18      	ldr	r3, [pc, #96]	; (1874 <_ZN14USBDeviceClass4sendEmPKvm+0x110>)
    1814:	189b      	adds	r3, r3, r2
    1816:	2280      	movs	r2, #128	; 0x80
    1818:	6999      	ldr	r1, [r3, #24]
    181a:	0612      	lsls	r2, r2, #24
    181c:	430a      	orrs	r2, r1
    181e:	619a      	str	r2, [r3, #24]
		memcpy(&udd_ep_in_cache_buffer[ep], data, length);
    1820:	0022      	movs	r2, r4
    1822:	9901      	ldr	r1, [sp, #4]
    1824:	9802      	ldr	r0, [sp, #8]
    1826:	f003 fcdb 	bl	51e0 <memcpy>
	inline void epBank1SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[1].ADDR.reg = (uint32_t)addr; }
    182a:	9b00      	ldr	r3, [sp, #0]
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
    182c:	04a1      	lsls	r1, r4, #18
	inline void epBank1SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[1].ADDR.reg = (uint32_t)addr; }
    182e:	015a      	lsls	r2, r3, #5
    1830:	4b10      	ldr	r3, [pc, #64]	; (1874 <_ZN14USBDeviceClass4sendEmPKvm+0x110>)
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
    1832:	0c89      	lsrs	r1, r1, #18
	inline void epBank1SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[1].ADDR.reg = (uint32_t)addr; }
    1834:	189b      	adds	r3, r3, r2
    1836:	9a02      	ldr	r2, [sp, #8]
		written += length;
    1838:	192d      	adds	r5, r5, r4
    183a:	615a      	str	r2, [r3, #20]
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
    183c:	699a      	ldr	r2, [r3, #24]
		len -= length;
    183e:	1b36      	subs	r6, r6, r4
    1840:	0b92      	lsrs	r2, r2, #14
    1842:	0392      	lsls	r2, r2, #14
    1844:	430a      	orrs	r2, r1
    1846:	619a      	str	r2, [r3, #24]
	inline void epBank1AckTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT(2); }
    1848:	9b00      	ldr	r3, [sp, #0]
    184a:	9a03      	ldr	r2, [sp, #12]
    184c:	3308      	adds	r3, #8
    184e:	015b      	lsls	r3, r3, #5
    1850:	18d3      	adds	r3, r2, r3
    1852:	2202      	movs	r2, #2
    1854:	71da      	strb	r2, [r3, #7]
	inline void epBank1SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK1RDY = 1; }
    1856:	7959      	ldrb	r1, [r3, #5]
    1858:	3a82      	subs	r2, #130	; 0x82
    185a:	430a      	orrs	r2, r1
    185c:	715a      	strb	r2, [r3, #5]
		data = (char *)data + length;
    185e:	9b01      	ldr	r3, [sp, #4]
    1860:	191b      	adds	r3, r3, r4
    1862:	9301      	str	r3, [sp, #4]
	while (len != 0)
    1864:	e79a      	b.n	179c <_ZN14USBDeviceClass4sendEmPKvm+0x38>
    1866:	46c0      	nop			; (mov r8, r8)
    1868:	200005f8 	.word	0x200005f8
    186c:	20000169 	.word	0x20000169
    1870:	20000174 	.word	0x20000174
    1874:	20000600 	.word	0x20000600
    1878:	20000014 	.word	0x20000014
    187c:	000f4240 	.word	0x000f4240
    1880:	00011170 	.word	0x00011170
    1884:	2000016b 	.word	0x2000016b

00001888 <_ZN14USBDeviceClass7armSendEmPKvm>:

uint32_t USBDeviceClass::armSend(uint32_t ep, const void* data, uint32_t len)
{
    1888:	b570      	push	{r4, r5, r6, lr}
    188a:	000d      	movs	r5, r1
    188c:	001c      	movs	r4, r3
	memcpy(&udd_ep_in_cache_buffer[ep], data, len);
    188e:	4e0d      	ldr	r6, [pc, #52]	; (18c4 <_ZN14USBDeviceClass7armSendEmPKvm+0x3c>)
    1890:	01ab      	lsls	r3, r5, #6
    1892:	18f6      	adds	r6, r6, r3
{
    1894:	0011      	movs	r1, r2
	memcpy(&udd_ep_in_cache_buffer[ep], data, len);
    1896:	0030      	movs	r0, r6
    1898:	0022      	movs	r2, r4
    189a:	f003 fca1 	bl	51e0 <memcpy>
	inline void epBank1SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[1].ADDR.reg = (uint32_t)addr; }
    189e:	b2ed      	uxtb	r5, r5
    18a0:	4909      	ldr	r1, [pc, #36]	; (18c8 <_ZN14USBDeviceClass7armSendEmPKvm+0x40>)
    18a2:	016d      	lsls	r5, r5, #5
    18a4:	194d      	adds	r5, r1, r5
    18a6:	616e      	str	r6, [r5, #20]
	inline void epBank1SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
    18a8:	69ab      	ldr	r3, [r5, #24]
    18aa:	4a08      	ldr	r2, [pc, #32]	; (18cc <_ZN14USBDeviceClass7armSendEmPKvm+0x44>)
	usbd.epBank1SetAddress(ep, &udd_ep_in_cache_buffer[ep]);
	usbd.epBank1SetMultiPacketSize(ep, 0);
	usbd.epBank1SetByteCount(ep, len);

	return len;
}
    18ac:	0020      	movs	r0, r4
    18ae:	4013      	ands	r3, r2
    18b0:	61ab      	str	r3, [r5, #24]
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
    18b2:	69ab      	ldr	r3, [r5, #24]
    18b4:	04a2      	lsls	r2, r4, #18
    18b6:	0b9b      	lsrs	r3, r3, #14
    18b8:	0c92      	lsrs	r2, r2, #18
    18ba:	039b      	lsls	r3, r3, #14
    18bc:	4313      	orrs	r3, r2
    18be:	61ab      	str	r3, [r5, #24]
    18c0:	bd70      	pop	{r4, r5, r6, pc}
    18c2:	46c0      	nop			; (mov r8, r8)
    18c4:	20000174 	.word	0x20000174
    18c8:	20000600 	.word	0x20000600
    18cc:	f0003fff 	.word	0xf0003fff

000018d0 <_ZN14USBDeviceClass11sendControlEPKvm>:

uint32_t USBDeviceClass::sendControl(const void* _data, uint32_t len)
{
    18d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	const uint8_t *data = reinterpret_cast<const uint8_t *>(_data);
	uint32_t length = len;
	uint32_t sent = 0;
	uint32_t pos = 0;

	if (_dry_run == true)
    18d2:	4b10      	ldr	r3, [pc, #64]	; (1914 <_ZN14USBDeviceClass11sendControlEPKvm+0x44>)
{
    18d4:	9001      	str	r0, [sp, #4]
	if (_dry_run == true)
    18d6:	781b      	ldrb	r3, [r3, #0]
{
    18d8:	000f      	movs	r7, r1
    18da:	0015      	movs	r5, r2
	if (_dry_run == true)
    18dc:	2b00      	cmp	r3, #0
    18de:	d10c      	bne.n	18fa <_ZN14USBDeviceClass11sendControlEPKvm+0x2a>
		return length;

	if (_pack_message == true) {
    18e0:	4b0d      	ldr	r3, [pc, #52]	; (1918 <_ZN14USBDeviceClass11sendControlEPKvm+0x48>)
    18e2:	0016      	movs	r6, r2
    18e4:	781c      	ldrb	r4, [r3, #0]
    18e6:	2c00      	cmp	r4, #0
    18e8:	d009      	beq.n	18fe <_ZN14USBDeviceClass11sendControlEPKvm+0x2e>
		memcpy(&_pack_buffer[_pack_size], data, len);
    18ea:	4e0c      	ldr	r6, [pc, #48]	; (191c <_ZN14USBDeviceClass11sendControlEPKvm+0x4c>)
    18ec:	480c      	ldr	r0, [pc, #48]	; (1920 <_ZN14USBDeviceClass11sendControlEPKvm+0x50>)
    18ee:	8834      	ldrh	r4, [r6, #0]
    18f0:	1900      	adds	r0, r0, r4
		_pack_size += len;
    18f2:	1964      	adds	r4, r4, r5
		memcpy(&_pack_buffer[_pack_size], data, len);
    18f4:	f003 fc74 	bl	51e0 <memcpy>
		_pack_size += len;
    18f8:	8034      	strh	r4, [r6, #0]
		pos += sent;
		len -= sent;
 	}

	return length;
}
    18fa:	0028      	movs	r0, r5
    18fc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 	while (len > 0)
    18fe:	2e00      	cmp	r6, #0
    1900:	d0fb      	beq.n	18fa <_ZN14USBDeviceClass11sendControlEPKvm+0x2a>
		sent = armSend(EP0, data + pos, len);
    1902:	193a      	adds	r2, r7, r4
    1904:	0033      	movs	r3, r6
    1906:	2100      	movs	r1, #0
    1908:	9801      	ldr	r0, [sp, #4]
    190a:	f7ff ffbd 	bl	1888 <_ZN14USBDeviceClass7armSendEmPKvm>
		pos += sent;
    190e:	1824      	adds	r4, r4, r0
		len -= sent;
    1910:	1a36      	subs	r6, r6, r0
 	while (len > 0)
    1912:	e7f4      	b.n	18fe <_ZN14USBDeviceClass11sendControlEPKvm+0x2e>
    1914:	200004f4 	.word	0x200004f4
    1918:	200005f5 	.word	0x200005f5
    191c:	200005f6 	.word	0x200005f6
    1920:	200004f5 	.word	0x200004f5

00001924 <_ZN14USBDeviceClass20sendStringDescriptorEPKhm>:
{
    1924:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1926:	000e      	movs	r6, r1
    1928:	0015      	movs	r5, r2
		return false;
    192a:	2700      	movs	r7, #0
	if (maxlen < 2)
    192c:	2a01      	cmp	r2, #1
    192e:	d927      	bls.n	1980 <_ZN14USBDeviceClass20sendStringDescriptorEPKhm+0x5c>
	uint8_t* buffer = (uint8_t*)malloc(maxlen);
    1930:	0010      	movs	r0, r2
    1932:	f003 fc41 	bl	51b8 <malloc>
    1936:	0004      	movs	r4, r0
	buffer[0] = strlen((const char*)string) * 2 + 2;
    1938:	0030      	movs	r0, r6
    193a:	f003 fd1d 	bl	5378 <strlen>
    193e:	3001      	adds	r0, #1
    1940:	0040      	lsls	r0, r0, #1
	buffer[1] = 0x03;
    1942:	2303      	movs	r3, #3
	buffer[0] = strlen((const char*)string) * 2 + 2;
    1944:	7020      	strb	r0, [r4, #0]
	for (i = 2; i < maxlen && *string; i++) {
    1946:	2202      	movs	r2, #2
		buffer[i] = 0;
    1948:	0038      	movs	r0, r7
	buffer[1] = 0x03;
    194a:	7063      	strb	r3, [r4, #1]
	for (i = 2; i < maxlen && *string; i++) {
    194c:	4295      	cmp	r5, r2
    194e:	d90d      	bls.n	196c <_ZN14USBDeviceClass20sendStringDescriptorEPKhm+0x48>
    1950:	7831      	ldrb	r1, [r6, #0]
    1952:	2900      	cmp	r1, #0
    1954:	d00a      	beq.n	196c <_ZN14USBDeviceClass20sendStringDescriptorEPKhm+0x48>
		buffer[i++] = *string++;
    1956:	1c53      	adds	r3, r2, #1
    1958:	b2db      	uxtb	r3, r3
    195a:	3601      	adds	r6, #1
    195c:	54a1      	strb	r1, [r4, r2]
		if (i == maxlen) break;
    195e:	429d      	cmp	r5, r3
    1960:	d003      	beq.n	196a <_ZN14USBDeviceClass20sendStringDescriptorEPKhm+0x46>
	for (i = 2; i < maxlen && *string; i++) {
    1962:	3202      	adds	r2, #2
		buffer[i] = 0;
    1964:	54e0      	strb	r0, [r4, r3]
	for (i = 2; i < maxlen && *string; i++) {
    1966:	b2d2      	uxtb	r2, r2
    1968:	e7f0      	b.n	194c <_ZN14USBDeviceClass20sendStringDescriptorEPKhm+0x28>
		buffer[i++] = *string++;
    196a:	002a      	movs	r2, r5
	bool ret = USBDevice.sendControl(buffer, i);
    196c:	0021      	movs	r1, r4
    196e:	4805      	ldr	r0, [pc, #20]	; (1984 <_ZN14USBDeviceClass20sendStringDescriptorEPKhm+0x60>)
    1970:	f7ff ffae 	bl	18d0 <_ZN14USBDeviceClass11sendControlEPKvm>
    1974:	1e47      	subs	r7, r0, #1
    1976:	41b8      	sbcs	r0, r7
    1978:	b2c7      	uxtb	r7, r0
	free(buffer);
    197a:	0020      	movs	r0, r4
    197c:	f003 fc26 	bl	51cc <free>
}
    1980:	0038      	movs	r0, r7
    1982:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1984:	20000148 	.word	0x20000148

00001988 <_ZN14USBDeviceClass17sendConfigurationEm>:
{
    1988:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint32_t total = 0;
    198a:	2700      	movs	r7, #0
	_dry_run = true;
    198c:	2601      	movs	r6, #1
{
    198e:	b087      	sub	sp, #28
	_dry_run = true;
    1990:	4b1e      	ldr	r3, [pc, #120]	; (1a0c <_ZN14USBDeviceClass17sendConfigurationEm+0x84>)
{
    1992:	9100      	str	r1, [sp, #0]
	uint8_t interfaces = SendInterfaces(&total);
    1994:	a902      	add	r1, sp, #8
	_dry_run = true;
    1996:	701e      	strb	r6, [r3, #0]
{
    1998:	0005      	movs	r5, r0
	uint32_t total = 0;
    199a:	9702      	str	r7, [sp, #8]
	uint8_t interfaces = SendInterfaces(&total);
    199c:	f7ff fc33 	bl	1206 <_ZN14USBDeviceClass14SendInterfacesEPm>
	ConfigDescriptor config = D_CONFIG((uint16_t)(total + sizeof(ConfigDescriptor)), interfaces);
    19a0:	ac03      	add	r4, sp, #12
	uint8_t interfaces = SendInterfaces(&total);
    19a2:	9001      	str	r0, [sp, #4]
	ConfigDescriptor config = D_CONFIG((uint16_t)(total + sizeof(ConfigDescriptor)), interfaces);
    19a4:	2209      	movs	r2, #9
    19a6:	0039      	movs	r1, r7
    19a8:	0020      	movs	r0, r4
    19aa:	f003 fc22 	bl	51f2 <memset>
    19ae:	2309      	movs	r3, #9
    19b0:	7023      	strb	r3, [r4, #0]
    19b2:	2302      	movs	r3, #2
    19b4:	7063      	strb	r3, [r4, #1]
    19b6:	339e      	adds	r3, #158	; 0x9e
    19b8:	71e3      	strb	r3, [r4, #7]
    19ba:	335a      	adds	r3, #90	; 0x5a
    19bc:	7223      	strb	r3, [r4, #8]
    19be:	9b02      	ldr	r3, [sp, #8]
    19c0:	7166      	strb	r6, [r4, #5]
    19c2:	3309      	adds	r3, #9
    19c4:	8063      	strh	r3, [r4, #2]
    19c6:	466b      	mov	r3, sp
    19c8:	791b      	ldrb	r3, [r3, #4]
    19ca:	7123      	strb	r3, [r4, #4]
	_dry_run = false;
    19cc:	4b0f      	ldr	r3, [pc, #60]	; (1a0c <_ZN14USBDeviceClass17sendConfigurationEm+0x84>)
    19ce:	701f      	strb	r7, [r3, #0]
	if (maxlen == sizeof(ConfigDescriptor)) {
    19d0:	9b00      	ldr	r3, [sp, #0]
    19d2:	2b09      	cmp	r3, #9
    19d4:	d107      	bne.n	19e6 <_ZN14USBDeviceClass17sendConfigurationEm+0x5e>
		sendControl(&config, sizeof(ConfigDescriptor));
    19d6:	001a      	movs	r2, r3
    19d8:	0021      	movs	r1, r4
		sendControl(_pack_buffer, _pack_size);
    19da:	0028      	movs	r0, r5
    19dc:	f7ff ff78 	bl	18d0 <_ZN14USBDeviceClass11sendControlEPKvm>
}
    19e0:	2001      	movs	r0, #1
    19e2:	b007      	add	sp, #28
    19e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		_pack_message = true;
    19e6:	4b0a      	ldr	r3, [pc, #40]	; (1a10 <_ZN14USBDeviceClass17sendConfigurationEm+0x88>)
	sendControl(&config, sizeof(ConfigDescriptor));
    19e8:	2209      	movs	r2, #9
		_pack_message = true;
    19ea:	701e      	strb	r6, [r3, #0]
		_pack_size = 0;
    19ec:	4e09      	ldr	r6, [pc, #36]	; (1a14 <_ZN14USBDeviceClass17sendConfigurationEm+0x8c>)
	sendControl(&config, sizeof(ConfigDescriptor));
    19ee:	0021      	movs	r1, r4
    19f0:	0028      	movs	r0, r5
	total = 0;
    19f2:	9702      	str	r7, [sp, #8]
		_pack_size = 0;
    19f4:	8037      	strh	r7, [r6, #0]
	sendControl(&config, sizeof(ConfigDescriptor));
    19f6:	f7ff ff6b 	bl	18d0 <_ZN14USBDeviceClass11sendControlEPKvm>
	SendInterfaces(&total);
    19fa:	a902      	add	r1, sp, #8
    19fc:	0028      	movs	r0, r5
    19fe:	f7ff fc02 	bl	1206 <_ZN14USBDeviceClass14SendInterfacesEPm>
		_pack_message = false;
    1a02:	4b03      	ldr	r3, [pc, #12]	; (1a10 <_ZN14USBDeviceClass17sendConfigurationEm+0x88>)
		sendControl(_pack_buffer, _pack_size);
    1a04:	8832      	ldrh	r2, [r6, #0]
		_pack_message = false;
    1a06:	701f      	strb	r7, [r3, #0]
		sendControl(_pack_buffer, _pack_size);
    1a08:	4903      	ldr	r1, [pc, #12]	; (1a18 <_ZN14USBDeviceClass17sendConfigurationEm+0x90>)
    1a0a:	e7e6      	b.n	19da <_ZN14USBDeviceClass17sendConfigurationEm+0x52>
    1a0c:	200004f4 	.word	0x200004f4
    1a10:	200005f5 	.word	0x200005f5
    1a14:	200005f6 	.word	0x200005f6
    1a18:	200004f5 	.word	0x200004f5

00001a1c <_ZN14USBDeviceClass14sendDescriptorER8USBSetup>:
{
    1a1c:	b570      	push	{r4, r5, r6, lr}
	uint8_t t = setup.wValueH;
    1a1e:	78ce      	ldrb	r6, [r1, #3]
{
    1a20:	b092      	sub	sp, #72	; 0x48
    1a22:	0005      	movs	r5, r0
    1a24:	000c      	movs	r4, r1
	if (t == USB_CONFIGURATION_DESCRIPTOR_TYPE)
    1a26:	2e02      	cmp	r6, #2
    1a28:	d10b      	bne.n	1a42 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x26>
		return USBDevice.sendConfiguration(setup.wLength);
    1a2a:	798b      	ldrb	r3, [r1, #6]
    1a2c:	79c9      	ldrb	r1, [r1, #7]
    1a2e:	482e      	ldr	r0, [pc, #184]	; (1ae8 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0xcc>)
    1a30:	0209      	lsls	r1, r1, #8
    1a32:	4319      	orrs	r1, r3
    1a34:	f7ff ffa8 	bl	1988 <_ZN14USBDeviceClass17sendConfigurationEm>
    1a38:	1e41      	subs	r1, r0, #1
    1a3a:	4188      	sbcs	r0, r1
    1a3c:	b2c0      	uxtb	r0, r0
}
    1a3e:	b012      	add	sp, #72	; 0x48
    1a40:	bd70      	pop	{r4, r5, r6, pc}
	ret = PluggableUSB().getDescriptor(setup);
    1a42:	f7ff f971 	bl	d28 <_Z12PluggableUSBv>
    1a46:	0021      	movs	r1, r4
    1a48:	f7ff f902 	bl	c50 <_ZN13PluggableUSB_13getDescriptorER8USBSetup>
	if (ret != 0) {
    1a4c:	2800      	cmp	r0, #0
    1a4e:	d003      	beq.n	1a58 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x3c>
		return (ret > 0 ? true : false);
    1a50:	17c1      	asrs	r1, r0, #31
    1a52:	1a08      	subs	r0, r1, r0
    1a54:	0fc0      	lsrs	r0, r0, #31
    1a56:	e7f2      	b.n	1a3e <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x22>
	if (t == USB_DEVICE_DESCRIPTOR_TYPE)
    1a58:	2e01      	cmp	r6, #1
    1a5a:	d10e      	bne.n	1a7a <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x5e>
		if (setup.wLength == 8)
    1a5c:	79e2      	ldrb	r2, [r4, #7]
    1a5e:	79a3      	ldrb	r3, [r4, #6]
    1a60:	0212      	lsls	r2, r2, #8
    1a62:	431a      	orrs	r2, r3
    1a64:	4921      	ldr	r1, [pc, #132]	; (1aec <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0xd0>)
		if (*desc_addr > setup.wLength) {
    1a66:	2a11      	cmp	r2, #17
    1a68:	dc3c      	bgt.n	1ae4 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0xc8>
			desc_length = setup.wLength;
    1a6a:	b2d2      	uxtb	r2, r2
	if (desc_length == 0) {
    1a6c:	2a00      	cmp	r2, #0
    1a6e:	d039      	beq.n	1ae4 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0xc8>
	sendControl(desc_addr, desc_length);
    1a70:	0028      	movs	r0, r5
    1a72:	f7ff ff2d 	bl	18d0 <_ZN14USBDeviceClass11sendControlEPKvm>
	return true;
    1a76:	2001      	movs	r0, #1
    1a78:	e7e1      	b.n	1a3e <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x22>
	else if (USB_STRING_DESCRIPTOR_TYPE == t)
    1a7a:	2e03      	cmp	r6, #3
    1a7c:	d1df      	bne.n	1a3e <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x22>
		if (setup.wValueL == 0) {
    1a7e:	78a3      	ldrb	r3, [r4, #2]
    1a80:	2b00      	cmp	r3, #0
    1a82:	d028      	beq.n	1ad6 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0xba>
		else if (setup.wValueL == IPRODUCT) {
    1a84:	2b02      	cmp	r3, #2
    1a86:	d108      	bne.n	1a9a <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x7e>
			return sendStringDescriptor(STRING_PRODUCT, setup.wLength);
    1a88:	79e2      	ldrb	r2, [r4, #7]
    1a8a:	79a3      	ldrb	r3, [r4, #6]
    1a8c:	0212      	lsls	r2, r2, #8
    1a8e:	4918      	ldr	r1, [pc, #96]	; (1af0 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0xd4>)
    1a90:	431a      	orrs	r2, r3
			return sendStringDescriptor(STRING_MANUFACTURER, setup.wLength);
    1a92:	0028      	movs	r0, r5
    1a94:	f7ff ff46 	bl	1924 <_ZN14USBDeviceClass20sendStringDescriptorEPKhm>
    1a98:	e7d1      	b.n	1a3e <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x22>
		else if (setup.wValueL == IMANUFACTURER) {
    1a9a:	2b01      	cmp	r3, #1
    1a9c:	d105      	bne.n	1aaa <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x8e>
			return sendStringDescriptor(STRING_MANUFACTURER, setup.wLength);
    1a9e:	79e2      	ldrb	r2, [r4, #7]
    1aa0:	79a3      	ldrb	r3, [r4, #6]
    1aa2:	0212      	lsls	r2, r2, #8
    1aa4:	431a      	orrs	r2, r3
    1aa6:	4913      	ldr	r1, [pc, #76]	; (1af4 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0xd8>)
    1aa8:	e7f3      	b.n	1a92 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x76>
		else if (setup.wValueL == ISERIAL) {
    1aaa:	2b03      	cmp	r3, #3
    1aac:	d1c7      	bne.n	1a3e <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x22>
			memset(name, 0, sizeof(name));
    1aae:	0001      	movs	r1, r0
    1ab0:	2241      	movs	r2, #65	; 0x41
    1ab2:	a801      	add	r0, sp, #4
    1ab4:	f003 fb9d 	bl	51f2 <memset>
			idx += PluggableUSB().getShortName(&name[idx]);
    1ab8:	f7ff f936 	bl	d28 <_Z12PluggableUSBv>
    1abc:	a901      	add	r1, sp, #4
    1abe:	f7ff f8d7 	bl	c70 <_ZN13PluggableUSB_12getShortNameEPc>
			if (idx > 0) {
    1ac2:	2800      	cmp	r0, #0
    1ac4:	d005      	beq.n	1ad2 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0xb6>
				return sendStringDescriptor((uint8_t*)name, setup.wLength);
    1ac6:	79e2      	ldrb	r2, [r4, #7]
    1ac8:	79a3      	ldrb	r3, [r4, #6]
    1aca:	0212      	lsls	r2, r2, #8
    1acc:	431a      	orrs	r2, r3
    1ace:	a901      	add	r1, sp, #4
    1ad0:	e7df      	b.n	1a92 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x76>
		if (*desc_addr > setup.wLength) {
    1ad2:	7803      	ldrb	r3, [r0, #0]
    1ad4:	deff      	udf	#255	; 0xff
    1ad6:	79e2      	ldrb	r2, [r4, #7]
    1ad8:	79a3      	ldrb	r3, [r4, #6]
    1ada:	0212      	lsls	r2, r2, #8
    1adc:	431a      	orrs	r2, r3
    1ade:	4906      	ldr	r1, [pc, #24]	; (1af8 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0xdc>)
    1ae0:	2a03      	cmp	r2, #3
    1ae2:	ddc2      	ble.n	1a6a <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x4e>
		desc_length = *desc_addr;
    1ae4:	780a      	ldrb	r2, [r1, #0]
    1ae6:	e7c3      	b.n	1a70 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x54>
    1ae8:	20000148 	.word	0x20000148
    1aec:	000054be 	.word	0x000054be
    1af0:	000054a0 	.word	0x000054a0
    1af4:	000054b2 	.word	0x000054b2
    1af8:	000054ae 	.word	0x000054ae

00001afc <_ZN14USBDeviceClass7sendZlpEm>:
    1afc:	b2cb      	uxtb	r3, r1
    1afe:	4904      	ldr	r1, [pc, #16]	; (1b10 <_ZN14USBDeviceClass7sendZlpEm+0x14>)
    1b00:	015b      	lsls	r3, r3, #5
    1b02:	18c9      	adds	r1, r1, r3
    1b04:	698b      	ldr	r3, [r1, #24]
    1b06:	0b9b      	lsrs	r3, r3, #14
    1b08:	039b      	lsls	r3, r3, #14
    1b0a:	618b      	str	r3, [r1, #24]

void USBDeviceClass::sendZlp(uint32_t ep)
{
	// Set the byte count as zero
	usbd.epBank1SetByteCount(ep, 0);
}
    1b0c:	4770      	bx	lr
    1b0e:	46c0      	nop			; (mov r8, r8)
    1b10:	20000600 	.word	0x20000600

00001b14 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup>:

bool USBDeviceClass::handleStandardSetup(USBSetup &setup)
{
    1b14:	b537      	push	{r0, r1, r2, r4, r5, lr}
    1b16:	0005      	movs	r5, r0
	switch (setup.bRequest) {
    1b18:	7848      	ldrb	r0, [r1, #1]
{
    1b1a:	000c      	movs	r4, r1
	switch (setup.bRequest) {
    1b1c:	280b      	cmp	r0, #11
    1b1e:	d811      	bhi.n	1b44 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x30>
    1b20:	f001 faa8 	bl	3074 <__gnu_thumb1_case_uqi>
    1b24:	2e101d06 	.word	0x2e101d06
    1b28:	64484310 	.word	0x64484310
    1b2c:	605d4f4c 	.word	0x605d4f4c
	case GET_STATUS:
		if (setup.bmRequestType == 0)  // device
    1b30:	7809      	ldrb	r1, [r1, #0]
    1b32:	aa01      	add	r2, sp, #4
    1b34:	2900      	cmp	r1, #0
    1b36:	d107      	bne.n	1b48 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x34>
		{
			// Send the device status
			// TODO: Check current configuration for power mode (if device is configured)
			// TODO: Check if remote wake-up is enabled
			uint8_t buff[] = { 0, 0 };
			armSend(0, buff, 2);
    1b38:	2302      	movs	r3, #2
			uint8_t buff[] = { 0, 0 };
    1b3a:	7011      	strb	r1, [r2, #0]
    1b3c:	7051      	strb	r1, [r2, #1]
			armSend(0, buff, 2);
    1b3e:	0028      	movs	r0, r5
    1b40:	f7ff fea2 	bl	1888 <_ZN14USBDeviceClass7armSendEmPKvm>
			return true;
    1b44:	2001      	movs	r0, #1

	default:
		return true;
	}
	return true;
}
    1b46:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
			uint8_t buff[] = { 0, 0 };
    1b48:	2300      	movs	r3, #0
    1b4a:	7013      	strb	r3, [r2, #0]
    1b4c:	7053      	strb	r3, [r2, #1]
			if (isEndpointHalt == 1)
    1b4e:	4b28      	ldr	r3, [pc, #160]	; (1bf0 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0xdc>)
			if (isRemoteWakeUpEnabled == 1)
    1b50:	781b      	ldrb	r3, [r3, #0]
    1b52:	2b01      	cmp	r3, #1
    1b54:	d100      	bne.n	1b58 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x44>
				buff[0] = 1;
    1b56:	7013      	strb	r3, [r2, #0]
			armSend(0, buff, 2);
    1b58:	2302      	movs	r3, #2
		armSend(0, (void*)&_usbSetInterface, 1);
    1b5a:	2100      	movs	r1, #0
    1b5c:	e7ef      	b.n	1b3e <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x2a>
		if (setup.wValueL == 1) // DEVICEREMOTEWAKEUP
    1b5e:	788a      	ldrb	r2, [r1, #2]
    1b60:	2300      	movs	r3, #0
    1b62:	2a01      	cmp	r2, #1
    1b64:	d104      	bne.n	1b70 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x5c>
			uint8_t buff[] = { 0, 0 };
    1b66:	aa01      	add	r2, sp, #4
    1b68:	7013      	strb	r3, [r2, #0]
    1b6a:	7053      	strb	r3, [r2, #1]
			if (isRemoteWakeUpEnabled == 1)
    1b6c:	4b21      	ldr	r3, [pc, #132]	; (1bf4 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0xe0>)
    1b6e:	e7ef      	b.n	1b50 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x3c>
			isEndpointHalt = 0;
    1b70:	4a1f      	ldr	r2, [pc, #124]	; (1bf0 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0xdc>)
    1b72:	7013      	strb	r3, [r2, #0]
    1b74:	4a20      	ldr	r2, [pc, #128]	; (1bf8 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0xe4>)
    1b76:	6993      	ldr	r3, [r2, #24]
    1b78:	0b9b      	lsrs	r3, r3, #14
    1b7a:	039b      	lsls	r3, r3, #14
    1b7c:	6193      	str	r3, [r2, #24]
    1b7e:	e7e1      	b.n	1b44 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x30>
		if (setup.wValueL == 1) // DEVICEREMOTEWAKEUP
    1b80:	788c      	ldrb	r4, [r1, #2]
    1b82:	2c01      	cmp	r4, #1
    1b84:	d106      	bne.n	1b94 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x80>
			uint8_t buff[] = { 0 };
    1b86:	2100      	movs	r1, #0
			isRemoteWakeUpEnabled = 1;
    1b88:	4b1a      	ldr	r3, [pc, #104]	; (1bf4 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0xe0>)
			uint8_t buff[] = { 0 };
    1b8a:	aa01      	add	r2, sp, #4
			isRemoteWakeUpEnabled = 1;
    1b8c:	701c      	strb	r4, [r3, #0]
			uint8_t buff[] = { 0 };
    1b8e:	7011      	strb	r1, [r2, #0]
			armSend(0, buff, 1);
    1b90:	0023      	movs	r3, r4
    1b92:	e7d4      	b.n	1b3e <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x2a>
    1b94:	2001      	movs	r0, #1
		if (setup.wValueL == 0) // ENDPOINTHALT
    1b96:	2c00      	cmp	r4, #0
    1b98:	d1d5      	bne.n	1b46 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x32>
			isEndpointHalt = 1;
    1b9a:	4b15      	ldr	r3, [pc, #84]	; (1bf0 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0xdc>)
    1b9c:	4a16      	ldr	r2, [pc, #88]	; (1bf8 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0xe4>)
    1b9e:	7018      	strb	r0, [r3, #0]
    1ba0:	6993      	ldr	r3, [r2, #24]
    1ba2:	0b9b      	lsrs	r3, r3, #14
    1ba4:	039b      	lsls	r3, r3, #14
    1ba6:	6193      	str	r3, [r2, #24]
			return true;
    1ba8:	e7cd      	b.n	1b46 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x32>
		setAddress(setup.wValueL);
    1baa:	7889      	ldrb	r1, [r1, #2]
    1bac:	0028      	movs	r0, r5
    1bae:	f7ff fc09 	bl	13c4 <_ZN14USBDeviceClass10setAddressEm>
    1bb2:	e7c7      	b.n	1b44 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x30>
		return sendDescriptor(setup);
    1bb4:	0028      	movs	r0, r5
    1bb6:	f7ff ff31 	bl	1a1c <_ZN14USBDeviceClass14sendDescriptorER8USBSetup>
    1bba:	e7c4      	b.n	1b46 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x32>
		armSend(0, (void*)&_usbConfiguration, 1);
    1bbc:	2301      	movs	r3, #1
    1bbe:	4a0f      	ldr	r2, [pc, #60]	; (1bfc <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0xe8>)
    1bc0:	e7cb      	b.n	1b5a <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x46>
		if (REQUEST_DEVICE == (setup.bmRequestType & REQUEST_RECIPIENT)) {
    1bc2:	780b      	ldrb	r3, [r1, #0]
			return false;
    1bc4:	2000      	movs	r0, #0
		if (REQUEST_DEVICE == (setup.bmRequestType & REQUEST_RECIPIENT)) {
    1bc6:	06db      	lsls	r3, r3, #27
    1bc8:	d1bd      	bne.n	1b46 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x32>
			initEndpoints();
    1bca:	0028      	movs	r0, r5
    1bcc:	f7ff fcb2 	bl	1534 <_ZN14USBDeviceClass13initEndpointsEv>
			_usbConfiguration = setup.wValueL;
    1bd0:	78a2      	ldrb	r2, [r4, #2]
    1bd2:	4b0a      	ldr	r3, [pc, #40]	; (1bfc <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0xe8>)
			SerialUSB.enableInterrupt();
    1bd4:	480a      	ldr	r0, [pc, #40]	; (1c00 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0xec>)
			_usbConfiguration = setup.wValueL;
    1bd6:	601a      	str	r2, [r3, #0]
			SerialUSB.enableInterrupt();
    1bd8:	f7fe ffee 	bl	bb8 <_ZN7Serial_15enableInterruptEv>
    1bdc:	e7ca      	b.n	1b74 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x60>
		armSend(0, (void*)&_usbSetInterface, 1);
    1bde:	2301      	movs	r3, #1
    1be0:	4a08      	ldr	r2, [pc, #32]	; (1c04 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0xf0>)
    1be2:	e7ba      	b.n	1b5a <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x46>
		_usbSetInterface = setup.wValueL;
    1be4:	788a      	ldrb	r2, [r1, #2]
    1be6:	4b07      	ldr	r3, [pc, #28]	; (1c04 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0xf0>)
    1be8:	601a      	str	r2, [r3, #0]
    1bea:	e7c3      	b.n	1b74 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x60>
		return false;
    1bec:	2000      	movs	r0, #0
    1bee:	e7aa      	b.n	1b46 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x32>
    1bf0:	2000016a 	.word	0x2000016a
    1bf4:	20000172 	.word	0x20000172
    1bf8:	20000600 	.word	0x20000600
    1bfc:	200005f8 	.word	0x200005f8
    1c00:	200000e0 	.word	0x200000e0
    1c04:	200005fc 	.word	0x200005fc

00001c08 <_ZN14USBDeviceClass10ISRHandlerEv>:

void USBDeviceClass::ISRHandler()
{
	if (_pack_message == true) {
    1c08:	4b4b      	ldr	r3, [pc, #300]	; (1d38 <_ZN14USBDeviceClass10ISRHandlerEv+0x130>)
{
    1c0a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (_pack_message == true) {
    1c0c:	781e      	ldrb	r6, [r3, #0]
{
    1c0e:	0005      	movs	r5, r0
	if (_pack_message == true) {
    1c10:	2e00      	cmp	r6, #0
    1c12:	d000      	beq.n	1c16 <_ZN14USBDeviceClass10ISRHandlerEv+0xe>
    1c14:	e080      	b.n	1d18 <_ZN14USBDeviceClass10ISRHandlerEv+0x110>
	inline bool isEndOfResetInterrupt()        { return usb.INTFLAG.bit.EORST; }
    1c16:	4c49      	ldr	r4, [pc, #292]	; (1d3c <_ZN14USBDeviceClass10ISRHandlerEv+0x134>)
    1c18:	6823      	ldr	r3, [r4, #0]
    1c1a:	8b9a      	ldrh	r2, [r3, #28]
		return;
	}

	// End-Of-Reset
	if (usbd.isEndOfResetInterrupt())
    1c1c:	0712      	lsls	r2, r2, #28
    1c1e:	d50d      	bpl.n	1c3c <_ZN14USBDeviceClass10ISRHandlerEv+0x34>
	inline void ackEndOfResetInterrupt()       { usb.INTFLAG.reg = USB_DEVICE_INTFLAG_EORST; }
    1c20:	2208      	movs	r2, #8
    1c22:	0031      	movs	r1, r6
    1c24:	839a      	strh	r2, [r3, #28]
    1c26:	0030      	movs	r0, r6
    1c28:	f7ff f896 	bl	d58 <_ZN14USBDeviceClass6initEPEmm.part.7>
	inline void epBank0EnableSetupReceived(ep_t ep)    { usb.DeviceEndpoint[ep].EPINTENSET.bit.RXSTP = 1; }
    1c2c:	2210      	movs	r2, #16
    1c2e:	6823      	ldr	r3, [r4, #0]
    1c30:	33ff      	adds	r3, #255	; 0xff
    1c32:	7a99      	ldrb	r1, [r3, #10]
    1c34:	430a      	orrs	r2, r1
    1c36:	729a      	strb	r2, [r3, #10]
		initEP(0, USB_ENDPOINT_TYPE_CONTROL);

		// Enable Setup-Received interrupt
		usbd.epBank0EnableSetupReceived(0);

		_usbConfiguration = 0;
    1c38:	4b41      	ldr	r3, [pc, #260]	; (1d40 <_ZN14USBDeviceClass10ISRHandlerEv+0x138>)
    1c3a:	601e      	str	r6, [r3, #0]
	inline bool isStartOfFrameInterrupt()      { return usb.INTFLAG.bit.SOF; }
    1c3c:	6823      	ldr	r3, [r4, #0]
    1c3e:	8b9a      	ldrh	r2, [r3, #28]
	}

	// Start-Of-Frame
	if (usbd.isStartOfFrameInterrupt())
    1c40:	0752      	lsls	r2, r2, #29
    1c42:	d51f      	bpl.n	1c84 <_ZN14USBDeviceClass10ISRHandlerEv+0x7c>
	inline void ackStartOfFrameInterrupt()     { usb.INTFLAG.reg = USB_DEVICE_INTFLAG_SOF; }
    1c44:	2204      	movs	r2, #4
    1c46:	839a      	strh	r2, [r3, #28]
	{
		usbd.ackStartOfFrameInterrupt();

		// check whether the one-shot period has elapsed.  if so, turn off the LED
#ifdef PIN_LED_TXL
		if (txLEDPulse > 0) {
    1c48:	4a3e      	ldr	r2, [pc, #248]	; (1d44 <_ZN14USBDeviceClass10ISRHandlerEv+0x13c>)
    1c4a:	7813      	ldrb	r3, [r2, #0]
    1c4c:	2b00      	cmp	r3, #0
    1c4e:	d00a      	beq.n	1c66 <_ZN14USBDeviceClass10ISRHandlerEv+0x5e>
			txLEDPulse--;
    1c50:	7813      	ldrb	r3, [r2, #0]
    1c52:	3b01      	subs	r3, #1
    1c54:	b2db      	uxtb	r3, r3
    1c56:	7013      	strb	r3, [r2, #0]
			if (txLEDPulse == 0)
    1c58:	7813      	ldrb	r3, [r2, #0]
    1c5a:	2b00      	cmp	r3, #0
    1c5c:	d103      	bne.n	1c66 <_ZN14USBDeviceClass10ISRHandlerEv+0x5e>
				digitalWrite(PIN_LED_TXL, HIGH);
    1c5e:	2101      	movs	r1, #1
    1c60:	201a      	movs	r0, #26
    1c62:	f000 f97f 	bl	1f64 <digitalWrite>
		}
#endif

#ifdef PIN_LED_RXL
		if (rxLEDPulse > 0) {
    1c66:	4a38      	ldr	r2, [pc, #224]	; (1d48 <_ZN14USBDeviceClass10ISRHandlerEv+0x140>)
    1c68:	7813      	ldrb	r3, [r2, #0]
    1c6a:	2b00      	cmp	r3, #0
    1c6c:	d00a      	beq.n	1c84 <_ZN14USBDeviceClass10ISRHandlerEv+0x7c>
			rxLEDPulse--;
    1c6e:	7813      	ldrb	r3, [r2, #0]
    1c70:	3b01      	subs	r3, #1
    1c72:	b2db      	uxtb	r3, r3
    1c74:	7013      	strb	r3, [r2, #0]
			if (rxLEDPulse == 0)
    1c76:	7813      	ldrb	r3, [r2, #0]
    1c78:	2b00      	cmp	r3, #0
    1c7a:	d103      	bne.n	1c84 <_ZN14USBDeviceClass10ISRHandlerEv+0x7c>
				digitalWrite(PIN_LED_RXL, HIGH);
    1c7c:	2101      	movs	r1, #1
    1c7e:	2019      	movs	r0, #25
    1c80:	f000 f970 	bl	1f64 <digitalWrite>
	inline bool epBank0IsStalled(ep_t ep)           { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.STALL0; }
    1c84:	6823      	ldr	r3, [r4, #0]
    1c86:	33ff      	adds	r3, #255	; 0xff
    1c88:	7a1a      	ldrb	r2, [r3, #8]
		}
#endif
	}

	/* Remove any stall requests for endpoint #0 */
	if (usbd.epBank0IsStalled(0)) { usbd.epBank0DisableStalled(0); }
    1c8a:	0692      	lsls	r2, r2, #26
    1c8c:	d503      	bpl.n	1c96 <_ZN14USBDeviceClass10ISRHandlerEv+0x8e>
	inline void epBank0DisableStalled(ep_t ep)          { usb.DeviceEndpoint[ep].EPINTENCLR.bit.STALL0 = 1; }
    1c8e:	2220      	movs	r2, #32
    1c90:	7a59      	ldrb	r1, [r3, #9]
    1c92:	430a      	orrs	r2, r1
    1c94:	725a      	strb	r2, [r3, #9]
	inline bool epBank0IsSetupReceived(ep_t ep)     { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.RXSTP; }
    1c96:	7a1a      	ldrb	r2, [r3, #8]

	// Endpoint 0 Received Setup interrupt
	if (usbd.epBank0IsSetupReceived(0))
    1c98:	06d2      	lsls	r2, r2, #27
    1c9a:	d525      	bpl.n	1ce8 <_ZN14USBDeviceClass10ISRHandlerEv+0xe0>
	{
		/* Retrieve received endpoint #0 data from buffer */
		USBSetup setup;
		memcpy(&setup, udd_ep_out_cache_buffer[0], sizeof(USBSetup));
    1c9c:	4668      	mov	r0, sp
    1c9e:	4a2b      	ldr	r2, [pc, #172]	; (1d4c <_ZN14USBDeviceClass10ISRHandlerEv+0x144>)
    1ca0:	4669      	mov	r1, sp
    1ca2:	cac0      	ldmia	r2!, {r6, r7}
    1ca4:	c0c0      	stmia	r0!, {r6, r7}
	inline void epBank0SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = bc; }
    1ca6:	68a2      	ldr	r2, [r4, #8]
    1ca8:	0b92      	lsrs	r2, r2, #14
    1caa:	0392      	lsls	r2, r2, #14
    1cac:	60a2      	str	r2, [r4, #8]
	inline void epBank0ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK0RDY = 1; }
    1cae:	2240      	movs	r2, #64	; 0x40
    1cb0:	7958      	ldrb	r0, [r3, #5]
    1cb2:	4302      	orrs	r2, r0
    1cb4:	715a      	strb	r2, [r3, #5]
		 */
		usbd.epBank0SetByteCount(0, 0);
		usbd.epBank0ResetReady(0);

		bool ok;
		if (REQUEST_STANDARD == (setup.bmRequestType & REQUEST_TYPE)) {
    1cb6:	2360      	movs	r3, #96	; 0x60
    1cb8:	780a      	ldrb	r2, [r1, #0]
			// Standard Requests
			ok = handleStandardSetup(setup);
    1cba:	0028      	movs	r0, r5
		if (REQUEST_STANDARD == (setup.bmRequestType & REQUEST_TYPE)) {
    1cbc:	421a      	tst	r2, r3
    1cbe:	d12c      	bne.n	1d1a <_ZN14USBDeviceClass10ISRHandlerEv+0x112>
			ok = handleStandardSetup(setup);
    1cc0:	f7ff ff28 	bl	1b14 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup>
		} else {
			// Class Interface Requests
			ok = handleClassInterfaceSetup(setup);
		}

		if (ok) {
    1cc4:	2800      	cmp	r0, #0
    1cc6:	d02b      	beq.n	1d20 <_ZN14USBDeviceClass10ISRHandlerEv+0x118>
	inline void epBank1SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK1RDY = 1; }
    1cc8:	2280      	movs	r2, #128	; 0x80
    1cca:	6823      	ldr	r3, [r4, #0]
    1ccc:	4252      	negs	r2, r2
    1cce:	33ff      	adds	r3, #255	; 0xff
    1cd0:	7999      	ldrb	r1, [r3, #6]
    1cd2:	430a      	orrs	r2, r1
	USB->DEVICE.DeviceEndpoint[ep].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_STALLRQ(2);
    1cd4:	719a      	strb	r2, [r3, #6]
	inline bool epBank1IsStalled(ep_t ep)           { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.STALL1; }
    1cd6:	6823      	ldr	r3, [r4, #0]
    1cd8:	33ff      	adds	r3, #255	; 0xff
    1cda:	7a1a      	ldrb	r2, [r3, #8]
			usbd.epBank1SetReady(0);
		} else {
			stall(0);
		}

		if (usbd.epBank1IsStalled(0))
    1cdc:	0652      	lsls	r2, r2, #25
    1cde:	d503      	bpl.n	1ce8 <_ZN14USBDeviceClass10ISRHandlerEv+0xe0>
	inline void epBank1DisableStalled(ep_t ep)          { usb.DeviceEndpoint[ep].EPINTENCLR.bit.STALL1 = 1; }
    1ce0:	2240      	movs	r2, #64	; 0x40
    1ce2:	7a59      	ldrb	r1, [r3, #9]
    1ce4:	430a      	orrs	r2, r1
    1ce6:	725a      	strb	r2, [r3, #9]
	inline void epAckPendingInterrupts(ep_t ep)     { usb.DeviceEndpoint[ep].EPINTFLAG.reg = 0x7F; }
    1ce8:	267f      	movs	r6, #127	; 0x7f
			usbd.epBank1DisableStalled(0);
		}
	} // end Received Setup handler
	usbd.epAckPendingInterrupts(0);

	for (int ep = 1; ep < USB_EPT_NUM; ep++) {
    1cea:	2501      	movs	r5, #1
    1cec:	6823      	ldr	r3, [r4, #0]
    1cee:	33ff      	adds	r3, #255	; 0xff
    1cf0:	721e      	strb	r6, [r3, #8]
	inline bool epHasPendingInterrupts(ep_t ep)     { return usb.DeviceEndpoint[ep].EPINTFLAG.reg != 0; }
    1cf2:	002f      	movs	r7, r5
    1cf4:	6823      	ldr	r3, [r4, #0]
    1cf6:	3708      	adds	r7, #8
    1cf8:	017f      	lsls	r7, r7, #5
    1cfa:	19db      	adds	r3, r3, r7
    1cfc:	79db      	ldrb	r3, [r3, #7]
		// Endpoint Transfer Complete (0/1) Interrupt
		if (usbd.epHasPendingInterrupts(ep)) {
    1cfe:	2b00      	cmp	r3, #0
    1d00:	d007      	beq.n	1d12 <_ZN14USBDeviceClass10ISRHandlerEv+0x10a>
			if (epHandlers[ep]) {
    1d02:	4b13      	ldr	r3, [pc, #76]	; (1d50 <_ZN14USBDeviceClass10ISRHandlerEv+0x148>)
    1d04:	00aa      	lsls	r2, r5, #2
    1d06:	58d0      	ldr	r0, [r2, r3]
    1d08:	2800      	cmp	r0, #0
    1d0a:	d00c      	beq.n	1d26 <_ZN14USBDeviceClass10ISRHandlerEv+0x11e>
				epHandlers[ep]->handleEndpoint();
    1d0c:	6803      	ldr	r3, [r0, #0]
    1d0e:	681b      	ldr	r3, [r3, #0]
    1d10:	4798      	blx	r3
	for (int ep = 1; ep < USB_EPT_NUM; ep++) {
    1d12:	3501      	adds	r5, #1
    1d14:	2d08      	cmp	r5, #8
    1d16:	d1ec      	bne.n	1cf2 <_ZN14USBDeviceClass10ISRHandlerEv+0xea>
				usbd.epAckPendingInterrupts(ep);
				#endif
			}
		}
	}
}
    1d18:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
			ok = handleClassInterfaceSetup(setup);
    1d1a:	f7ff fb77 	bl	140c <_ZN14USBDeviceClass25handleClassInterfaceSetupER8USBSetup>
    1d1e:	e7d1      	b.n	1cc4 <_ZN14USBDeviceClass10ISRHandlerEv+0xbc>
	USB->DEVICE.DeviceEndpoint[ep].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_STALLRQ(2);
    1d20:	2220      	movs	r2, #32
    1d22:	4b0c      	ldr	r3, [pc, #48]	; (1d54 <_ZN14USBDeviceClass10ISRHandlerEv+0x14c>)
    1d24:	e7d6      	b.n	1cd4 <_ZN14USBDeviceClass10ISRHandlerEv+0xcc>
				PluggableUSB().handleEndpoint(ep);
    1d26:	f7fe ffff 	bl	d28 <_Z12PluggableUSBv>
    1d2a:	0029      	movs	r1, r5
    1d2c:	f7fe ffc3 	bl	cb6 <_ZN13PluggableUSB_14handleEndpointEi>
	inline void epAckPendingInterrupts(ep_t ep)     { usb.DeviceEndpoint[ep].EPINTFLAG.reg = 0x7F; }
    1d30:	6823      	ldr	r3, [r4, #0]
    1d32:	19df      	adds	r7, r3, r7
    1d34:	71fe      	strb	r6, [r7, #7]
    1d36:	e7ec      	b.n	1d12 <_ZN14USBDeviceClass10ISRHandlerEv+0x10a>
    1d38:	200005f5 	.word	0x200005f5
    1d3c:	20000600 	.word	0x20000600
    1d40:	200005f8 	.word	0x200005f8
    1d44:	20000169 	.word	0x20000169
    1d48:	20000168 	.word	0x20000168
    1d4c:	20000334 	.word	0x20000334
    1d50:	2000014c 	.word	0x2000014c
    1d54:	410050ff 	.word	0x410050ff

00001d58 <UDD_Handler>:
extern "C" void UDD_Handler(void) {
    1d58:	b510      	push	{r4, lr}
	USBDevice.ISRHandler();
    1d5a:	4802      	ldr	r0, [pc, #8]	; (1d64 <UDD_Handler+0xc>)
    1d5c:	f7ff ff54 	bl	1c08 <_ZN14USBDeviceClass10ISRHandlerEv>
}
    1d60:	bd10      	pop	{r4, pc}
    1d62:	46c0      	nop			; (mov r8, r8)
    1d64:	20000148 	.word	0x20000148

00001d68 <_GLOBAL__sub_I_usbd>:
	USBDevice_SAMD21G18x() : usb(USB->DEVICE) {
    1d68:	4a01      	ldr	r2, [pc, #4]	; (1d70 <_GLOBAL__sub_I_usbd+0x8>)
    1d6a:	4b02      	ldr	r3, [pc, #8]	; (1d74 <_GLOBAL__sub_I_usbd+0xc>)
    1d6c:	601a      	str	r2, [r3, #0]
 * USB Device instance
 * -------------------
 */

// USBDevice class instance
USBDeviceClass USBDevice;
    1d6e:	4770      	bx	lr
    1d70:	41005000 	.word	0x41005000
    1d74:	20000600 	.word	0x20000600

00001d78 <init>:
 *   - During reset, all PORT lines are configured as inputs with input buffers, output buffers and pull disabled.
 */
void init( void )
{
  // Set Systick to 1ms interval, common to all Cortex-M variants
  if ( SysTick_Config( SystemCoreClock / 1000 ) )
    1d78:	21fa      	movs	r1, #250	; 0xfa
    1d7a:	4b31      	ldr	r3, [pc, #196]	; (1e40 <init+0xc8>)
{
    1d7c:	b510      	push	{r4, lr}
  if ( SysTick_Config( SystemCoreClock / 1000 ) )
    1d7e:	6818      	ldr	r0, [r3, #0]
    1d80:	0089      	lsls	r1, r1, #2
    1d82:	f001 f981 	bl	3088 <__udivsi3>
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
    1d86:	4b2f      	ldr	r3, [pc, #188]	; (1e44 <init+0xcc>)
    1d88:	3801      	subs	r0, #1
    1d8a:	4298      	cmp	r0, r3
    1d8c:	d856      	bhi.n	1e3c <init+0xc4>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
    1d8e:	492e      	ldr	r1, [pc, #184]	; (1e48 <init+0xd0>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    1d90:	4a2e      	ldr	r2, [pc, #184]	; (1e4c <init+0xd4>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
    1d92:	6048      	str	r0, [r1, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    1d94:	20c0      	movs	r0, #192	; 0xc0
    1d96:	6a13      	ldr	r3, [r2, #32]
    1d98:	0600      	lsls	r0, r0, #24
    1d9a:	021b      	lsls	r3, r3, #8
    1d9c:	0a1b      	lsrs	r3, r3, #8
    1d9e:	4303      	orrs	r3, r0
    1da0:	6213      	str	r3, [r2, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
    1da2:	2400      	movs	r4, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
    1da4:	2307      	movs	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
    1da6:	608c      	str	r4, [r1, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
    1da8:	600b      	str	r3, [r1, #0]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    1daa:	2180      	movs	r1, #128	; 0x80
    1dac:	6a13      	ldr	r3, [r2, #32]
    1dae:	0609      	lsls	r1, r1, #24
    1db0:	021b      	lsls	r3, r3, #8
    1db2:	0a1b      	lsrs	r3, r3, #8
    1db4:	430b      	orrs	r3, r1
    1db6:	6213      	str	r3, [r2, #32]
//
//  // Clock EIC for I/O interrupts
//  PM->APBAMASK.reg |= PM_APBAMASK_EIC ;

  // Clock SERCOM for Serial
  PM->APBCMASK.reg |= PM_APBCMASK_SERCOM0 | PM_APBCMASK_SERCOM1 | PM_APBCMASK_SERCOM2 | PM_APBCMASK_SERCOM3 | PM_APBCMASK_SERCOM4 | PM_APBCMASK_SERCOM5 ;
    1db8:	22fc      	movs	r2, #252	; 0xfc
    1dba:	4b25      	ldr	r3, [pc, #148]	; (1e50 <init+0xd8>)
    1dbc:	6a19      	ldr	r1, [r3, #32]
    1dbe:	430a      	orrs	r2, r1
    1dc0:	621a      	str	r2, [r3, #32]

  // Clock TC/TCC for Pulse and Analog
  PM->APBCMASK.reg |= PM_APBCMASK_TCC0 | PM_APBCMASK_TCC1 | PM_APBCMASK_TCC2 | PM_APBCMASK_TC3 | PM_APBCMASK_TC4 | PM_APBCMASK_TC5 ;
    1dc2:	22fc      	movs	r2, #252	; 0xfc
    1dc4:	6a19      	ldr	r1, [r3, #32]
    1dc6:	0192      	lsls	r2, r2, #6
    1dc8:	430a      	orrs	r2, r1
    1dca:	621a      	str	r2, [r3, #32]

  // Clock ADC/DAC for Analog
  PM->APBCMASK.reg |= PM_APBCMASK_ADC | PM_APBCMASK_DAC ;
    1dcc:	22a0      	movs	r2, #160	; 0xa0
    1dce:	6a19      	ldr	r1, [r3, #32]
    1dd0:	02d2      	lsls	r2, r2, #11
    1dd2:	430a      	orrs	r2, r1
    1dd4:	621a      	str	r2, [r3, #32]
// However, it really lowers the power consumption by a factor of 20 in low power mode (0.03mA vs 0.6mA)
#ifndef VERY_LOW_POWER
  // Setup all pins (digital and analog) in INPUT mode (default is nothing)
  for (uint32_t ul = 0 ; ul < NUM_DIGITAL_PINS ; ul++ )
  {
    pinMode( ul, INPUT ) ;
    1dd6:	0020      	movs	r0, r4
    1dd8:	2100      	movs	r1, #0
  for (uint32_t ul = 0 ; ul < NUM_DIGITAL_PINS ; ul++ )
    1dda:	3401      	adds	r4, #1
    pinMode( ul, INPUT ) ;
    1ddc:	f000 f876 	bl	1ecc <pinMode>
  for (uint32_t ul = 0 ; ul < NUM_DIGITAL_PINS ; ul++ )
    1de0:	2c14      	cmp	r4, #20
    1de2:	d1f8      	bne.n	1dd6 <init+0x5e>
  }
#endif

  // Initialize Analog Controller
  // Setting clock
  while(GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY);
    1de4:	4b1b      	ldr	r3, [pc, #108]	; (1e54 <init+0xdc>)
    1de6:	001c      	movs	r4, r3
    1de8:	785a      	ldrb	r2, [r3, #1]
    1dea:	b252      	sxtb	r2, r2
    1dec:	2a00      	cmp	r2, #0
    1dee:	dbfb      	blt.n	1de8 <init+0x70>

  GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID( GCM_ADC ) | // Generic Clock ADC
    1df0:	4a19      	ldr	r2, [pc, #100]	; (1e58 <init+0xe0>)
    1df2:	805a      	strh	r2, [r3, #2]
                      GCLK_CLKCTRL_GEN_GCLK0     | // Generic Clock Generator 0 is source
                      GCLK_CLKCTRL_CLKEN ;

  while( ADC->STATUS.bit.SYNCBUSY == 1 );          // Wait for synchronization of registers between the clock domains
    1df4:	4b19      	ldr	r3, [pc, #100]	; (1e5c <init+0xe4>)
    1df6:	001a      	movs	r2, r3
    1df8:	7e59      	ldrb	r1, [r3, #25]
    1dfa:	09c9      	lsrs	r1, r1, #7
    1dfc:	2901      	cmp	r1, #1
    1dfe:	d0fb      	beq.n	1df8 <init+0x80>

  ADC->CTRLB.reg = ADC_CTRLB_PRESCALER_DIV512 |    // Divide Clock by 512.
    1e00:	21e4      	movs	r1, #228	; 0xe4
    1e02:	00c9      	lsls	r1, r1, #3
    1e04:	8099      	strh	r1, [r3, #4]
                   ADC_CTRLB_RESSEL_10BIT;         // 10 bits resolution as default

  ADC->SAMPCTRL.reg = 0x3f;                        // Set max Sampling Time Length
    1e06:	213f      	movs	r1, #63	; 0x3f
    1e08:	70d9      	strb	r1, [r3, #3]

  while( ADC->STATUS.bit.SYNCBUSY == 1 );          // Wait for synchronization of registers between the clock domains
    1e0a:	7e53      	ldrb	r3, [r2, #25]
    1e0c:	09db      	lsrs	r3, r3, #7
    1e0e:	2b01      	cmp	r3, #1
    1e10:	d0fb      	beq.n	1e0a <init+0x92>

  ADC->INPUTCTRL.reg = ADC_INPUTCTRL_MUXNEG_GND;   // No Negative input (Internal Ground)
    1e12:	23c0      	movs	r3, #192	; 0xc0

  // Averaging (see datasheet table in AVGCTRL register description)
  ADC->AVGCTRL.reg = ADC_AVGCTRL_SAMPLENUM_1 |    // 1 sample only (no oversampling nor averaging)
    1e14:	2000      	movs	r0, #0
  ADC->INPUTCTRL.reg = ADC_INPUTCTRL_MUXNEG_GND;   // No Negative input (Internal Ground)
    1e16:	015b      	lsls	r3, r3, #5
    1e18:	6113      	str	r3, [r2, #16]
  ADC->AVGCTRL.reg = ADC_AVGCTRL_SAMPLENUM_1 |    // 1 sample only (no oversampling nor averaging)
    1e1a:	7090      	strb	r0, [r2, #2]
                     ADC_AVGCTRL_ADJRES(0x0ul);   // Adjusting result by 0

  analogReference( AR_DEFAULT ) ; // Analog Reference is AREF pin (3.3v)
    1e1c:	f000 f824 	bl	1e68 <analogReference>

  // Initialize DAC
  // Setting clock
  while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY );
    1e20:	7863      	ldrb	r3, [r4, #1]
    1e22:	b25b      	sxtb	r3, r3
    1e24:	2b00      	cmp	r3, #0
    1e26:	dbfb      	blt.n	1e20 <init+0xa8>
  GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID( GCM_DAC ) | // Generic Clock ADC
    1e28:	4b0d      	ldr	r3, [pc, #52]	; (1e60 <init+0xe8>)
                      GCLK_CLKCTRL_GEN_GCLK0     | // Generic Clock Generator 0 is source
                      GCLK_CLKCTRL_CLKEN ;

  while ( DAC->STATUS.bit.SYNCBUSY == 1 ); // Wait for synchronization of registers between the clock domains
    1e2a:	4a0e      	ldr	r2, [pc, #56]	; (1e64 <init+0xec>)
  GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID( GCM_DAC ) | // Generic Clock ADC
    1e2c:	8063      	strh	r3, [r4, #2]
  while ( DAC->STATUS.bit.SYNCBUSY == 1 ); // Wait for synchronization of registers between the clock domains
    1e2e:	79d3      	ldrb	r3, [r2, #7]
    1e30:	09db      	lsrs	r3, r3, #7
    1e32:	2b01      	cmp	r3, #1
    1e34:	d0fb      	beq.n	1e2e <init+0xb6>
  DAC->CTRLB.reg = DAC_CTRLB_REFSEL_AVCC | // Using the 3.3V reference
    1e36:	2341      	movs	r3, #65	; 0x41
    1e38:	7053      	strb	r3, [r2, #1]
                   DAC_CTRLB_EOEN ;        // External Output Enable (Vout)
}
    1e3a:	bd10      	pop	{r4, pc}
    1e3c:	e7fe      	b.n	1e3c <init+0xc4>
    1e3e:	46c0      	nop			; (mov r8, r8)
    1e40:	20000014 	.word	0x20000014
    1e44:	00ffffff 	.word	0x00ffffff
    1e48:	e000e010 	.word	0xe000e010
    1e4c:	e000ed00 	.word	0xe000ed00
    1e50:	40000400 	.word	0x40000400
    1e54:	40000c00 	.word	0x40000c00
    1e58:	0000401e 	.word	0x0000401e
    1e5c:	42004000 	.word	0x42004000
    1e60:	00004021 	.word	0x00004021
    1e64:	42004800 	.word	0x42004800

00001e68 <analogReference>:
static int _writeResolution = 8;

// Wait for synchronization of registers between the clock domains
static __inline__ void syncADC() __attribute__((always_inline, unused));
static void syncADC() {
  while (ADC->STATUS.bit.SYNCBUSY == 1)
    1e68:	4a16      	ldr	r2, [pc, #88]	; (1ec4 <analogReference+0x5c>)
 * External Reference should be between 1v and VDDANA-0.6v=2.7v
 *
 * Warning : On Arduino Zero board the input/output voltage for SAMD21G18 is 3.3 volts maximum
 */
void analogReference(eAnalogReference mode)
{
    1e6a:	b500      	push	{lr}
    1e6c:	0013      	movs	r3, r2
  while (ADC->STATUS.bit.SYNCBUSY == 1)
    1e6e:	7e51      	ldrb	r1, [r2, #25]
    1e70:	09c9      	lsrs	r1, r1, #7
    1e72:	2901      	cmp	r1, #1
    1e74:	d0fb      	beq.n	1e6e <analogReference+0x6>
  syncADC();
  switch (mode)
    1e76:	3801      	subs	r0, #1
    1e78:	2804      	cmp	r0, #4
    1e7a:	d816      	bhi.n	1eaa <analogReference+0x42>
      ADC->INPUTCTRL.bit.GAIN = ADC_INPUTCTRL_GAIN_1X_Val;      // Gain Factor Selection
      ADC->REFCTRL.bit.REFSEL = ADC_REFCTRL_REFSEL_INT1V_Val;   // 1.0V voltage reference
      break;

    case AR_INTERNAL1V65:
      ADC->INPUTCTRL.bit.GAIN = ADC_INPUTCTRL_GAIN_1X_Val;      // Gain Factor Selection
    1e7c:	6919      	ldr	r1, [r3, #16]
    1e7e:	4a12      	ldr	r2, [pc, #72]	; (1ec8 <analogReference+0x60>)
    1e80:	400a      	ands	r2, r1
      ADC->REFCTRL.bit.REFSEL = ADC_REFCTRL_REFSEL_INTVCC1_Val; // 1/2 VDDANA = 0.5* 3V3 = 1.65V
    1e82:	210f      	movs	r1, #15
      ADC->INPUTCTRL.bit.GAIN = ADC_INPUTCTRL_GAIN_1X_Val;      // Gain Factor Selection
    1e84:	611a      	str	r2, [r3, #16]
      ADC->REFCTRL.bit.REFSEL = ADC_REFCTRL_REFSEL_INTVCC1_Val; // 1/2 VDDANA = 0.5* 3V3 = 1.65V
    1e86:	785a      	ldrb	r2, [r3, #1]
    1e88:	438a      	bics	r2, r1
  switch (mode)
    1e8a:	f001 f8f3 	bl	3074 <__gnu_thumb1_case_uqi>
    1e8e:	0803      	.short	0x0803
    1e90:	0b06      	.short	0x0b06
    1e92:	03          	.byte	0x03
    1e93:	00          	.byte	0x00
      ADC->REFCTRL.bit.REFSEL = ADC_REFCTRL_REFSEL_INTVCC0_Val; // 1/1.48 VDDANA = 1/1.48* 3V3 = 2.2297
    1e94:	0011      	movs	r1, r2
    1e96:	2201      	movs	r2, #1
      ADC->REFCTRL.bit.REFSEL = ADC_REFCTRL_REFSEL_INTVCC1_Val; // 1/2 VDDANA = 0.5* 3V3 = 1.65V
    1e98:	430a      	orrs	r2, r1
    1e9a:	705a      	strb	r2, [r3, #1]
    default:
      ADC->INPUTCTRL.bit.GAIN = ADC_INPUTCTRL_GAIN_DIV2_Val;
      ADC->REFCTRL.bit.REFSEL = ADC_REFCTRL_REFSEL_INTVCC1_Val; // 1/2 VDDANA = 0.5* 3V3 = 1.65V
      break;
  }
}
    1e9c:	bd00      	pop	{pc}
      ADC->REFCTRL.bit.REFSEL = ADC_REFCTRL_REFSEL_AREFA_Val;
    1e9e:	0011      	movs	r1, r2
    1ea0:	2203      	movs	r2, #3
    1ea2:	e7f9      	b.n	1e98 <analogReference+0x30>
      ADC->REFCTRL.bit.REFSEL = ADC_REFCTRL_REFSEL_INTVCC1_Val; // 1/2 VDDANA = 0.5* 3V3 = 1.65V
    1ea4:	0011      	movs	r1, r2
    1ea6:	2202      	movs	r2, #2
    1ea8:	e7f6      	b.n	1e98 <analogReference+0x30>
      ADC->INPUTCTRL.bit.GAIN = ADC_INPUTCTRL_GAIN_DIV2_Val;
    1eaa:	23f0      	movs	r3, #240	; 0xf0
    1eac:	6911      	ldr	r1, [r2, #16]
    1eae:	051b      	lsls	r3, r3, #20
    1eb0:	430b      	orrs	r3, r1
      ADC->REFCTRL.bit.REFSEL = ADC_REFCTRL_REFSEL_INTVCC1_Val; // 1/2 VDDANA = 0.5* 3V3 = 1.65V
    1eb2:	210f      	movs	r1, #15
      ADC->INPUTCTRL.bit.GAIN = ADC_INPUTCTRL_GAIN_DIV2_Val;
    1eb4:	6113      	str	r3, [r2, #16]
      ADC->REFCTRL.bit.REFSEL = ADC_REFCTRL_REFSEL_INTVCC1_Val; // 1/2 VDDANA = 0.5* 3V3 = 1.65V
    1eb6:	7853      	ldrb	r3, [r2, #1]
    1eb8:	438b      	bics	r3, r1
    1eba:	0019      	movs	r1, r3
    1ebc:	2302      	movs	r3, #2
    1ebe:	430b      	orrs	r3, r1
    1ec0:	7053      	strb	r3, [r2, #1]
}
    1ec2:	e7eb      	b.n	1e9c <analogReference+0x34>
    1ec4:	42004000 	.word	0x42004000
    1ec8:	f0ffffff 	.word	0xf0ffffff

00001ecc <pinMode>:
#endif

void pinMode( uint32_t ulPin, uint32_t ulMode )
{
  // Handle the case the pin isn't usable as PIO
  if ( g_APinDescription[ulPin].ulPinType == PIO_NOT_A_PIN )
    1ecc:	2318      	movs	r3, #24
{
    1ece:	b530      	push	{r4, r5, lr}
  if ( g_APinDescription[ulPin].ulPinType == PIO_NOT_A_PIN )
    1ed0:	001d      	movs	r5, r3
{
    1ed2:	0004      	movs	r4, r0
  if ( g_APinDescription[ulPin].ulPinType == PIO_NOT_A_PIN )
    1ed4:	4345      	muls	r5, r0
    1ed6:	2008      	movs	r0, #8
    1ed8:	4a20      	ldr	r2, [pc, #128]	; (1f5c <pinMode+0x90>)
    1eda:	1955      	adds	r5, r2, r5
    1edc:	5628      	ldrsb	r0, [r5, r0]
    1ede:	3001      	adds	r0, #1
    1ee0:	d014      	beq.n	1f0c <pinMode+0x40>
  {
    return ;
  }

  // Set pin mode according to chapter '22.6.3 I/O Pin Configuration'
  switch ( ulMode )
    1ee2:	2903      	cmp	r1, #3
    1ee4:	d812      	bhi.n	1f0c <pinMode+0x40>
    1ee6:	0008      	movs	r0, r1
      PORT->Group[g_APinDescription[ulPin].ulPort].OUTSET.reg = (uint32_t)(1<<g_APinDescription[ulPin].ulPin) ;
    break ;

    case INPUT_PULLDOWN:
      // Set pin to input mode with pull-down resistor enabled
      PORT->Group[g_APinDescription[ulPin].ulPort].PINCFG[g_APinDescription[ulPin].ulPin].reg=(uint8_t)(PORT_PINCFG_INEN|PORT_PINCFG_PULLEN) ;
    1ee8:	4363      	muls	r3, r4
    1eea:	56d1      	ldrsb	r1, [r2, r3]
    1eec:	18d3      	adds	r3, r2, r3
  switch ( ulMode )
    1eee:	f001 f8c1 	bl	3074 <__gnu_thumb1_case_uqi>
    1ef2:	2802      	.short	0x2802
    1ef4:	1b0e      	.short	0x1b0e
      PORT->Group[g_APinDescription[ulPin].ulPort].PINCFG[g_APinDescription[ulPin].ulPin].reg=(uint8_t)(PORT_PINCFG_INEN) ;
    1ef6:	6858      	ldr	r0, [r3, #4]
    1ef8:	01cb      	lsls	r3, r1, #7
    1efa:	2102      	movs	r1, #2
    1efc:	4a18      	ldr	r2, [pc, #96]	; (1f60 <pinMode+0x94>)
    1efe:	189b      	adds	r3, r3, r2
    1f00:	181a      	adds	r2, r3, r0
    1f02:	3240      	adds	r2, #64	; 0x40
    1f04:	7011      	strb	r1, [r2, #0]
      PORT->Group[g_APinDescription[ulPin].ulPort].DIRCLR.reg = (uint32_t)(1<<g_APinDescription[ulPin].ulPin) ;
    1f06:	2201      	movs	r2, #1
    1f08:	4082      	lsls	r2, r0
    1f0a:	605a      	str	r2, [r3, #4]

    default:
      // do nothing
    break ;
  }
}
    1f0c:	bd30      	pop	{r4, r5, pc}
      PORT->Group[g_APinDescription[ulPin].ulPort].PINCFG[g_APinDescription[ulPin].ulPin].reg=(uint8_t)(PORT_PINCFG_INEN|PORT_PINCFG_PULLEN) ;
    1f0e:	6858      	ldr	r0, [r3, #4]
    1f10:	01cb      	lsls	r3, r1, #7
    1f12:	2106      	movs	r1, #6
    1f14:	4a12      	ldr	r2, [pc, #72]	; (1f60 <pinMode+0x94>)
    1f16:	189b      	adds	r3, r3, r2
    1f18:	181a      	adds	r2, r3, r0
    1f1a:	3240      	adds	r2, #64	; 0x40
    1f1c:	7011      	strb	r1, [r2, #0]
      PORT->Group[g_APinDescription[ulPin].ulPort].DIRCLR.reg = (uint32_t)(1<<g_APinDescription[ulPin].ulPin) ;
    1f1e:	2201      	movs	r2, #1
    1f20:	4082      	lsls	r2, r0
    1f22:	605a      	str	r2, [r3, #4]
      PORT->Group[g_APinDescription[ulPin].ulPort].OUTSET.reg = (uint32_t)(1<<g_APinDescription[ulPin].ulPin) ;
    1f24:	619a      	str	r2, [r3, #24]
    break ;
    1f26:	e7f1      	b.n	1f0c <pinMode+0x40>
      PORT->Group[g_APinDescription[ulPin].ulPort].PINCFG[g_APinDescription[ulPin].ulPin].reg=(uint8_t)(PORT_PINCFG_INEN|PORT_PINCFG_PULLEN) ;
    1f28:	6858      	ldr	r0, [r3, #4]
    1f2a:	01cb      	lsls	r3, r1, #7
    1f2c:	2106      	movs	r1, #6
    1f2e:	4a0c      	ldr	r2, [pc, #48]	; (1f60 <pinMode+0x94>)
    1f30:	189b      	adds	r3, r3, r2
    1f32:	181a      	adds	r2, r3, r0
    1f34:	3240      	adds	r2, #64	; 0x40
    1f36:	7011      	strb	r1, [r2, #0]
      PORT->Group[g_APinDescription[ulPin].ulPort].DIRCLR.reg = (uint32_t)(1<<g_APinDescription[ulPin].ulPin) ;
    1f38:	2201      	movs	r2, #1
    1f3a:	4082      	lsls	r2, r0
    1f3c:	605a      	str	r2, [r3, #4]
      PORT->Group[g_APinDescription[ulPin].ulPort].OUTCLR.reg = (uint32_t)(1<<g_APinDescription[ulPin].ulPin) ;
    1f3e:	615a      	str	r2, [r3, #20]
    break ;
    1f40:	e7e4      	b.n	1f0c <pinMode+0x40>
      PORT->Group[g_APinDescription[ulPin].ulPort].PINCFG[g_APinDescription[ulPin].ulPin].reg=(uint8_t)(PORT_PINCFG_INEN) ;
    1f42:	6858      	ldr	r0, [r3, #4]
    1f44:	01cb      	lsls	r3, r1, #7
    1f46:	2102      	movs	r1, #2
    1f48:	4a05      	ldr	r2, [pc, #20]	; (1f60 <pinMode+0x94>)
    1f4a:	189b      	adds	r3, r3, r2
    1f4c:	181a      	adds	r2, r3, r0
    1f4e:	3240      	adds	r2, #64	; 0x40
    1f50:	7011      	strb	r1, [r2, #0]
      PORT->Group[g_APinDescription[ulPin].ulPort].DIRSET.reg = (uint32_t)(1<<g_APinDescription[ulPin].ulPin) ;
    1f52:	2201      	movs	r2, #1
    1f54:	4082      	lsls	r2, r0
    1f56:	609a      	str	r2, [r3, #8]
    break ;
    1f58:	e7d8      	b.n	1f0c <pinMode+0x40>
    1f5a:	46c0      	nop			; (mov r8, r8)
    1f5c:	000054f4 	.word	0x000054f4
    1f60:	41004400 	.word	0x41004400

00001f64 <digitalWrite>:

void digitalWrite( uint32_t ulPin, uint32_t ulVal )
{
  // Handle the case the pin isn't usable as PIO
  if ( g_APinDescription[ulPin].ulPinType == PIO_NOT_A_PIN )
    1f64:	2318      	movs	r3, #24
{
    1f66:	b5f0      	push	{r4, r5, r6, r7, lr}
  if ( g_APinDescription[ulPin].ulPinType == PIO_NOT_A_PIN )
    1f68:	2408      	movs	r4, #8
    1f6a:	4358      	muls	r0, r3
    1f6c:	4a11      	ldr	r2, [pc, #68]	; (1fb4 <digitalWrite+0x50>)
    1f6e:	1813      	adds	r3, r2, r0
    1f70:	571c      	ldrsb	r4, [r3, r4]
    1f72:	3401      	adds	r4, #1
    1f74:	d01b      	beq.n	1fae <digitalWrite+0x4a>
    return ;
  }

  EPortType port = g_APinDescription[ulPin].ulPort;
  uint32_t pin = g_APinDescription[ulPin].ulPin;
  uint32_t pinMask = (1ul << pin);
    1f76:	2601      	movs	r6, #1
    1f78:	0035      	movs	r5, r6
  uint32_t pin = g_APinDescription[ulPin].ulPin;
    1f7a:	685f      	ldr	r7, [r3, #4]

  if ( (PORT->Group[port].DIRSET.reg & pinMask) == 0 ) {
    1f7c:	5683      	ldrsb	r3, [r0, r2]
  uint32_t pinMask = (1ul << pin);
    1f7e:	40bd      	lsls	r5, r7
  if ( (PORT->Group[port].DIRSET.reg & pinMask) == 0 ) {
    1f80:	4a0d      	ldr	r2, [pc, #52]	; (1fb8 <digitalWrite+0x54>)
    1f82:	01db      	lsls	r3, r3, #7
    1f84:	189a      	adds	r2, r3, r2
    1f86:	6890      	ldr	r0, [r2, #8]
    1f88:	4228      	tst	r0, r5
    1f8a:	d10b      	bne.n	1fa4 <digitalWrite+0x40>
    // the pin is not an output, disable pull-up if val is LOW, otherwise enable pull-up
    PORT->Group[port].PINCFG[pin].bit.PULLEN = ((ulVal == LOW) ? 0 : 1) ;
    1f8c:	000c      	movs	r4, r1
    1f8e:	1e60      	subs	r0, r4, #1
    1f90:	4184      	sbcs	r4, r0
    1f92:	19d2      	adds	r2, r2, r7
    1f94:	3240      	adds	r2, #64	; 0x40
    1f96:	7810      	ldrb	r0, [r2, #0]
    1f98:	4034      	ands	r4, r6
    1f9a:	3603      	adds	r6, #3
    1f9c:	00a4      	lsls	r4, r4, #2
    1f9e:	43b0      	bics	r0, r6
    1fa0:	4320      	orrs	r0, r4
    1fa2:	7010      	strb	r0, [r2, #0]
  }

  switch ( ulVal )
  {
    case LOW:
      PORT->Group[port].OUTCLR.reg = pinMask;
    1fa4:	4a04      	ldr	r2, [pc, #16]	; (1fb8 <digitalWrite+0x54>)
    1fa6:	189b      	adds	r3, r3, r2
  switch ( ulVal )
    1fa8:	2900      	cmp	r1, #0
    1faa:	d101      	bne.n	1fb0 <digitalWrite+0x4c>
      PORT->Group[port].OUTCLR.reg = pinMask;
    1fac:	615d      	str	r5, [r3, #20]
      PORT->Group[port].OUTSET.reg = pinMask;
    break ;
  }

  return ;
}
    1fae:	bdf0      	pop	{r4, r5, r6, r7, pc}
      PORT->Group[port].OUTSET.reg = pinMask;
    1fb0:	619d      	str	r5, [r3, #24]
    break ;
    1fb2:	e7fc      	b.n	1fae <digitalWrite+0x4a>
    1fb4:	000054f4 	.word	0x000054f4
    1fb8:	41004400 	.word	0x41004400

00001fbc <pinPeripheral>:

#include "Arduino.h"
#include "wiring_private.h"

int pinPeripheral( uint32_t ulPin, EPioType ulPeripheral )
{
    1fbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1fbe:	0003      	movs	r3, r0
  // Handle the case the pin isn't usable as PIO
  if ( g_APinDescription[ulPin].ulPinType == PIO_NOT_A_PIN )
    1fc0:	2018      	movs	r0, #24
    1fc2:	4358      	muls	r0, r3
    1fc4:	4a2a      	ldr	r2, [pc, #168]	; (2070 <pinPeripheral+0xb4>)
    1fc6:	1810      	adds	r0, r2, r0
    1fc8:	7a00      	ldrb	r0, [r0, #8]
    1fca:	b240      	sxtb	r0, r0
  {
    return -1 ;
    1fcc:	0004      	movs	r4, r0
  if ( g_APinDescription[ulPin].ulPinType == PIO_NOT_A_PIN )
    1fce:	3001      	adds	r0, #1
    1fd0:	d013      	beq.n	1ffa <pinPeripheral+0x3e>
  }

  switch ( ulPeripheral )
    1fd2:	1c48      	adds	r0, r1, #1
    case PIO_NOT_A_PIN:
      return -1l ;
    break ;
  }

  return 0l ;
    1fd4:	2400      	movs	r4, #0
  switch ( ulPeripheral )
    1fd6:	280c      	cmp	r0, #12
    1fd8:	d80f      	bhi.n	1ffa <pinPeripheral+0x3e>
    1fda:	f001 f84b 	bl	3074 <__gnu_thumb1_case_uqi>
    1fde:	1c45      	.short	0x1c45
    1fe0:	1c1c1c1c 	.word	0x1c1c1c1c
    1fe4:	071c1c1c 	.word	0x071c1c1c
    1fe8:	0707      	.short	0x0707
    1fea:	07          	.byte	0x07
    1feb:	00          	.byte	0x00
      if ( ulPeripheral == PIO_INPUT )
    1fec:	2909      	cmp	r1, #9
    1fee:	d106      	bne.n	1ffe <pinPeripheral+0x42>
        pinMode( ulPin, INPUT ) ;
    1ff0:	2100      	movs	r1, #0
          pinMode( ulPin, INPUT_PULLUP ) ;
    1ff2:	0018      	movs	r0, r3
    1ff4:	f7ff ff6a 	bl	1ecc <pinMode>
  return 0l ;
    1ff8:	2400      	movs	r4, #0
}
    1ffa:	0020      	movs	r0, r4
    1ffc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if ( ulPeripheral == PIO_INPUT_PULLUP )
    1ffe:	290a      	cmp	r1, #10
    2000:	d101      	bne.n	2006 <pinPeripheral+0x4a>
          pinMode( ulPin, INPUT_PULLUP ) ;
    2002:	3908      	subs	r1, #8
    2004:	e7f5      	b.n	1ff2 <pinPeripheral+0x36>
  return 0l ;
    2006:	2400      	movs	r4, #0
          if ( ulPeripheral == PIO_OUTPUT )
    2008:	290b      	cmp	r1, #11
    200a:	d1f6      	bne.n	1ffa <pinPeripheral+0x3e>
            pinMode( ulPin, OUTPUT ) ;
    200c:	390a      	subs	r1, #10
    200e:	0018      	movs	r0, r3
    2010:	f7ff ff5c 	bl	1ecc <pinMode>
    2014:	e7f1      	b.n	1ffa <pinPeripheral+0x3e>
      if ( g_APinDescription[ulPin].ulPin & 1 ) // is pin odd?
    2016:	2018      	movs	r0, #24
    2018:	4343      	muls	r3, r0
    201a:	18d0      	adds	r0, r2, r3
    201c:	6846      	ldr	r6, [r0, #4]
    201e:	2501      	movs	r5, #1
    2020:	0034      	movs	r4, r6
    2022:	56d2      	ldrsb	r2, [r2, r3]
        temp = (PORT->Group[g_APinDescription[ulPin].ulPort].PMUX[g_APinDescription[ulPin].ulPin >> 1].reg) & PORT_PMUX_PMUXE( 0xF ) ;
    2024:	4813      	ldr	r0, [pc, #76]	; (2074 <pinPeripheral+0xb8>)
    2026:	01d2      	lsls	r2, r2, #7
    2028:	1812      	adds	r2, r2, r0
    202a:	0873      	lsrs	r3, r6, #1
    202c:	18d3      	adds	r3, r2, r3
    202e:	3330      	adds	r3, #48	; 0x30
      if ( g_APinDescription[ulPin].ulPin & 1 ) // is pin odd?
    2030:	402c      	ands	r4, r5
        temp = (PORT->Group[g_APinDescription[ulPin].ulPort].PMUX[g_APinDescription[ulPin].ulPin >> 1].reg) & PORT_PMUX_PMUXE( 0xF ) ;
    2032:	7818      	ldrb	r0, [r3, #0]
      if ( g_APinDescription[ulPin].ulPin & 1 ) // is pin odd?
    2034:	2c00      	cmp	r4, #0
    2036:	d00b      	beq.n	2050 <pinPeripheral+0x94>
        PORT->Group[g_APinDescription[ulPin].ulPort].PMUX[g_APinDescription[ulPin].ulPin >> 1].reg = temp|PORT_PMUX_PMUXO( ulPeripheral ) ;
    2038:	240f      	movs	r4, #15
    203a:	0109      	lsls	r1, r1, #4
    203c:	4020      	ands	r0, r4
    203e:	4301      	orrs	r1, r0
    2040:	b2c9      	uxtb	r1, r1
        PORT->Group[g_APinDescription[ulPin].ulPort].PINCFG[g_APinDescription[ulPin].ulPin].reg |= PORT_PINCFG_PMUXEN ;
    2042:	1992      	adds	r2, r2, r6
        PORT->Group[g_APinDescription[ulPin].ulPort].PMUX[g_APinDescription[ulPin].ulPin >> 1].reg = temp|PORT_PMUX_PMUXO( ulPeripheral ) ;
    2044:	7019      	strb	r1, [r3, #0]
        PORT->Group[g_APinDescription[ulPin].ulPort].PINCFG[g_APinDescription[ulPin].ulPin].reg |= PORT_PINCFG_PMUXEN ;
    2046:	3240      	adds	r2, #64	; 0x40
    2048:	7813      	ldrb	r3, [r2, #0]
    204a:	431d      	orrs	r5, r3
    204c:	7015      	strb	r5, [r2, #0]
    204e:	e7d3      	b.n	1ff8 <pinPeripheral+0x3c>
        PORT->Group[g_APinDescription[ulPin].ulPort].PMUX[g_APinDescription[ulPin].ulPin >> 1].reg = temp|PORT_PMUX_PMUXE( ulPeripheral ) ;
    2050:	270f      	movs	r7, #15
    2052:	43b8      	bics	r0, r7
    2054:	4301      	orrs	r1, r0
        PORT->Group[g_APinDescription[ulPin].ulPort].PINCFG[g_APinDescription[ulPin].ulPin].reg |= PORT_PINCFG_PMUXEN ; // Enable port mux
    2056:	1992      	adds	r2, r2, r6
        PORT->Group[g_APinDescription[ulPin].ulPort].PMUX[g_APinDescription[ulPin].ulPin >> 1].reg = temp|PORT_PMUX_PMUXE( ulPeripheral ) ;
    2058:	b2c9      	uxtb	r1, r1
    205a:	7019      	strb	r1, [r3, #0]
        PORT->Group[g_APinDescription[ulPin].ulPort].PINCFG[g_APinDescription[ulPin].ulPin].reg |= PORT_PINCFG_PMUXEN ; // Enable port mux
    205c:	0013      	movs	r3, r2
    205e:	3340      	adds	r3, #64	; 0x40
    2060:	781a      	ldrb	r2, [r3, #0]
    2062:	4315      	orrs	r5, r2
    2064:	701d      	strb	r5, [r3, #0]
    2066:	e7c8      	b.n	1ffa <pinPeripheral+0x3e>
      return -1l ;
    2068:	2401      	movs	r4, #1
    206a:	4264      	negs	r4, r4
    206c:	e7c5      	b.n	1ffa <pinPeripheral+0x3e>
    206e:	46c0      	nop			; (mov r8, r8)
    2070:	000054f4 	.word	0x000054f4
    2074:	41004400 	.word	0x41004400

00002078 <_ZN8MMA8452QC1Eh>:
//   supplied address into a private variable for future use.
//   The variable addr should be either 0x1C or 0x1D, depending on which voltage
//   the SA0 pin is tied to (GND or 3.3V respectively).
MMA8452Q::MMA8452Q(byte addr)
{
	address = addr; // Store address into private variable
    2078:	7601      	strb	r1, [r0, #24]
}
    207a:	4770      	bx	lr

0000207c <_ZN8MMA8452Q14writeRegistersE17MMA8452Q_RegisterPhh>:

// WRITE MULTIPLE REGISTERS
//	Write an array of "len" bytes ("buffer"), starting at register "reg", and
//	auto-incrmenting to the next.
void MMA8452Q::writeRegisters(MMA8452Q_Register reg, byte *buffer, byte len)
{
    207c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    207e:	000d      	movs	r5, r1
    2080:	0016      	movs	r6, r2
	Wire.beginTransmission(address);
    2082:	4c0c      	ldr	r4, [pc, #48]	; (20b4 <_ZN8MMA8452Q14writeRegistersE17MMA8452Q_RegisterPhh+0x38>)
    2084:	7e01      	ldrb	r1, [r0, #24]
    2086:	0020      	movs	r0, r4
{
    2088:	001f      	movs	r7, r3
	Wire.beginTransmission(address);
    208a:	f000 f9e5 	bl	2458 <_ZN7TwoWire17beginTransmissionEh>
    void onRequest(void(*)(void));

    inline size_t write(unsigned long n) { return write((uint8_t)n); }
    inline size_t write(long n) { return write((uint8_t)n); }
    inline size_t write(unsigned int n) { return write((uint8_t)n); }
    inline size_t write(int n) { return write((uint8_t)n); }
    208e:	0029      	movs	r1, r5
    2090:	0020      	movs	r0, r4
    2092:	f000 fa3e 	bl	2512 <_ZN7TwoWire5writeEh>
    2096:	0035      	movs	r5, r6
	Wire.write(reg);
	for (int x = 0; x < len; x++)
    2098:	1bab      	subs	r3, r5, r6
    209a:	429f      	cmp	r7, r3
    209c:	dd05      	ble.n	20aa <_ZN8MMA8452Q14writeRegistersE17MMA8452Q_RegisterPhh+0x2e>
		Wire.write(buffer[x]);
    209e:	7829      	ldrb	r1, [r5, #0]
    20a0:	0020      	movs	r0, r4
    20a2:	f000 fa36 	bl	2512 <_ZN7TwoWire5writeEh>
    20a6:	3501      	adds	r5, #1
	for (int x = 0; x < len; x++)
    20a8:	e7f6      	b.n	2098 <_ZN8MMA8452Q14writeRegistersE17MMA8452Q_RegisterPhh+0x1c>
	Wire.endTransmission(); //Stop transmitting
    20aa:	0020      	movs	r0, r4
    20ac:	f000 fa8e 	bl	25cc <_ZN7TwoWire15endTransmissionEv>
}
    20b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    20b2:	46c0      	nop			; (mov r8, r8)
    20b4:	20000704 	.word	0x20000704

000020b8 <_ZN8MMA8452Q13writeRegisterE17MMA8452Q_Registerh>:
{
    20b8:	b507      	push	{r0, r1, r2, lr}
    20ba:	0013      	movs	r3, r2
    20bc:	466a      	mov	r2, sp
    20be:	3207      	adds	r2, #7
    20c0:	7013      	strb	r3, [r2, #0]
	writeRegisters(reg, &data, 1);
    20c2:	2301      	movs	r3, #1
    20c4:	f7ff ffda 	bl	207c <_ZN8MMA8452Q14writeRegistersE17MMA8452Q_RegisterPhh>
}
    20c8:	bd07      	pop	{r0, r1, r2, pc}

000020ca <_ZN8MMA8452Q8setupTapEhhh>:
{
    20ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	byte temp = 0;
    20cc:	2500      	movs	r5, #0
{
    20ce:	001e      	movs	r6, r3
	if (!(xThs & 0x80)) // If top bit ISN'T set
    20d0:	b24b      	sxtb	r3, r1
{
    20d2:	0004      	movs	r4, r0
    20d4:	0017      	movs	r7, r2
	if (!(xThs & 0x80)) // If top bit ISN'T set
    20d6:	42ab      	cmp	r3, r5
    20d8:	db04      	blt.n	20e4 <_ZN8MMA8452Q8setupTapEhhh+0x1a>
		writeRegister(PULSE_THSX, xThs);  // x thresh
    20da:	000a      	movs	r2, r1
    20dc:	2123      	movs	r1, #35	; 0x23
    20de:	f7ff ffeb 	bl	20b8 <_ZN8MMA8452Q13writeRegisterE17MMA8452Q_Registerh>
		temp |= 0x3; // Enable taps on x
    20e2:	3503      	adds	r5, #3
	if (!(yThs & 0x80))
    20e4:	b27b      	sxtb	r3, r7
    20e6:	2b00      	cmp	r3, #0
    20e8:	db06      	blt.n	20f8 <_ZN8MMA8452Q8setupTapEhhh+0x2e>
		temp |= 0xC; // Enable taps on y
    20ea:	230c      	movs	r3, #12
		writeRegister(PULSE_THSY, yThs);  // y thresh
    20ec:	003a      	movs	r2, r7
    20ee:	2124      	movs	r1, #36	; 0x24
    20f0:	0020      	movs	r0, r4
		temp |= 0xC; // Enable taps on y
    20f2:	431d      	orrs	r5, r3
		writeRegister(PULSE_THSY, yThs);  // y thresh
    20f4:	f7ff ffe0 	bl	20b8 <_ZN8MMA8452Q13writeRegisterE17MMA8452Q_Registerh>
	if (!(zThs & 0x80))
    20f8:	b273      	sxtb	r3, r6
    20fa:	2b00      	cmp	r3, #0
    20fc:	db06      	blt.n	210c <_ZN8MMA8452Q8setupTapEhhh+0x42>
		temp |= 0x30; // Enable taps on z
    20fe:	2330      	movs	r3, #48	; 0x30
		writeRegister(PULSE_THSZ, zThs);  // z thresh
    2100:	0032      	movs	r2, r6
    2102:	2125      	movs	r1, #37	; 0x25
    2104:	0020      	movs	r0, r4
		temp |= 0x30; // Enable taps on z
    2106:	431d      	orrs	r5, r3
		writeRegister(PULSE_THSZ, zThs);  // z thresh
    2108:	f7ff ffd6 	bl	20b8 <_ZN8MMA8452Q13writeRegisterE17MMA8452Q_Registerh>
	writeRegister(PULSE_CFG, temp | 0x40);
    210c:	2240      	movs	r2, #64	; 0x40
    210e:	0020      	movs	r0, r4
    2110:	432a      	orrs	r2, r5
    2112:	2121      	movs	r1, #33	; 0x21
    2114:	f7ff ffd0 	bl	20b8 <_ZN8MMA8452Q13writeRegisterE17MMA8452Q_Registerh>
	writeRegister(PULSE_TMLT, 0x30);  // 30ms time limit at 800Hz odr
    2118:	0020      	movs	r0, r4
    211a:	2230      	movs	r2, #48	; 0x30
    211c:	2126      	movs	r1, #38	; 0x26
    211e:	f7ff ffcb 	bl	20b8 <_ZN8MMA8452Q13writeRegisterE17MMA8452Q_Registerh>
	writeRegister(PULSE_LTCY, 0xA0);  // 200ms (at 800Hz odr) between taps min
    2122:	0020      	movs	r0, r4
    2124:	22a0      	movs	r2, #160	; 0xa0
    2126:	2127      	movs	r1, #39	; 0x27
    2128:	f7ff ffc6 	bl	20b8 <_ZN8MMA8452Q13writeRegisterE17MMA8452Q_Registerh>
	writeRegister(PULSE_WIND, 0xFF);  // 5. 318ms (max value) between taps max
    212c:	22ff      	movs	r2, #255	; 0xff
    212e:	2128      	movs	r1, #40	; 0x28
    2130:	0020      	movs	r0, r4
    2132:	f7ff ffc1 	bl	20b8 <_ZN8MMA8452Q13writeRegisterE17MMA8452Q_Registerh>
}
    2136:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00002138 <_ZN8MMA8452Q12readRegisterE17MMA8452Q_Register>:

// READ A SINGLE REGISTER
//	Read a byte from the MMA8452Q register "reg".
byte MMA8452Q::readRegister(MMA8452Q_Register reg)
{
    2138:	b570      	push	{r4, r5, r6, lr}
    213a:	000e      	movs	r6, r1
    213c:	0005      	movs	r5, r0
	Wire.beginTransmission(address);
    213e:	4c0e      	ldr	r4, [pc, #56]	; (2178 <_ZN8MMA8452Q12readRegisterE17MMA8452Q_Register+0x40>)
    2140:	7e01      	ldrb	r1, [r0, #24]
    2142:	0020      	movs	r0, r4
    2144:	f000 f988 	bl	2458 <_ZN7TwoWire17beginTransmissionEh>
    2148:	0031      	movs	r1, r6
    214a:	0020      	movs	r0, r4
    214c:	f000 f9e1 	bl	2512 <_ZN7TwoWire5writeEh>
	Wire.write(reg);
	Wire.endTransmission(false); //endTransmission but keep the connection active
    2150:	2100      	movs	r1, #0
    2152:	0020      	movs	r0, r4
    2154:	f000 fa02 	bl	255c <_ZN7TwoWire15endTransmissionEb>

	Wire.requestFrom(address, (byte) 1); //Ask for 1 byte, once done, bus is released by default
    2158:	7e29      	ldrb	r1, [r5, #24]
    215a:	2201      	movs	r2, #1
    215c:	0020      	movs	r0, r4
    215e:	f000 f9d3 	bl	2508 <_ZN7TwoWire11requestFromEhj>

	while(!Wire.available()) ; //Wait for the data to come back
    2162:	0020      	movs	r0, r4
    2164:	f000 f91e 	bl	23a4 <_ZN7TwoWire9availableEv>
    2168:	2800      	cmp	r0, #0
    216a:	d0fa      	beq.n	2162 <_ZN8MMA8452Q12readRegisterE17MMA8452Q_Register+0x2a>

	return Wire.read(); //Return this one byte
    216c:	0020      	movs	r0, r4
    216e:	f000 fa32 	bl	25d6 <_ZN7TwoWire4readEv>
    2172:	b2c0      	uxtb	r0, r0
}
    2174:	bd70      	pop	{r4, r5, r6, pc}
    2176:	46c0      	nop			; (mov r8, r8)
    2178:	20000704 	.word	0x20000704

0000217c <_ZN8MMA8452Q9availableEv>:
{
    217c:	b510      	push	{r4, lr}
	return (readRegister(STATUS) & 0x08) >> 3;
    217e:	2100      	movs	r1, #0
    2180:	f7ff ffda 	bl	2138 <_ZN8MMA8452Q12readRegisterE17MMA8452Q_Register>
    2184:	0700      	lsls	r0, r0, #28
    2186:	0fc0      	lsrs	r0, r0, #31
}
    2188:	bd10      	pop	{r4, pc}

0000218a <_ZN8MMA8452Q8setScaleE14MMA8452Q_Scale>:
{
    218a:	b570      	push	{r4, r5, r6, lr}
    218c:	000c      	movs	r4, r1
	byte cfg = readRegister(XYZ_DATA_CFG);
    218e:	210e      	movs	r1, #14
{
    2190:	0005      	movs	r5, r0
	byte cfg = readRegister(XYZ_DATA_CFG);
    2192:	f7ff ffd1 	bl	2138 <_ZN8MMA8452Q12readRegisterE17MMA8452Q_Register>
	cfg &= 0xFC; // Mask out scale bits
    2196:	2303      	movs	r3, #3
    2198:	0002      	movs	r2, r0
	cfg |= (fsr >> 2);  // Neat trick, see page 22. 00 = 2G, 01 = 4A, 10 = 8G
    219a:	10a4      	asrs	r4, r4, #2
	cfg &= 0xFC; // Mask out scale bits
    219c:	439a      	bics	r2, r3
	cfg |= (fsr >> 2);  // Neat trick, see page 22. 00 = 2G, 01 = 4A, 10 = 8G
    219e:	4322      	orrs	r2, r4
	writeRegister(XYZ_DATA_CFG, cfg);
    21a0:	0028      	movs	r0, r5
    21a2:	b2d2      	uxtb	r2, r2
    21a4:	210e      	movs	r1, #14
    21a6:	f7ff ff87 	bl	20b8 <_ZN8MMA8452Q13writeRegisterE17MMA8452Q_Registerh>
}
    21aa:	bd70      	pop	{r4, r5, r6, pc}

000021ac <_ZN8MMA8452Q6setODRE12MMA8452Q_ODR>:
{
    21ac:	b570      	push	{r4, r5, r6, lr}
    21ae:	000c      	movs	r4, r1
	byte ctrl = readRegister(CTRL_REG1);
    21b0:	212a      	movs	r1, #42	; 0x2a
{
    21b2:	0005      	movs	r5, r0
	byte ctrl = readRegister(CTRL_REG1);
    21b4:	f7ff ffc0 	bl	2138 <_ZN8MMA8452Q12readRegisterE17MMA8452Q_Register>
	ctrl &= 0xCF; // Mask out data rate bits
    21b8:	2330      	movs	r3, #48	; 0x30
    21ba:	0002      	movs	r2, r0
	ctrl |= (odr << 3);
    21bc:	00e4      	lsls	r4, r4, #3
	ctrl &= 0xCF; // Mask out data rate bits
    21be:	439a      	bics	r2, r3
	ctrl |= (odr << 3);
    21c0:	4322      	orrs	r2, r4
	writeRegister(CTRL_REG1, ctrl);
    21c2:	0028      	movs	r0, r5
    21c4:	b2d2      	uxtb	r2, r2
    21c6:	212a      	movs	r1, #42	; 0x2a
    21c8:	f7ff ff76 	bl	20b8 <_ZN8MMA8452Q13writeRegisterE17MMA8452Q_Registerh>
}
    21cc:	bd70      	pop	{r4, r5, r6, pc}

000021ce <_ZN8MMA8452Q7setupPLEv>:
{
    21ce:	b510      	push	{r4, lr}
	writeRegister(PL_CFG, readRegister(PL_CFG) | 0x40); // Set PL_EN (enable)
    21d0:	2111      	movs	r1, #17
{
    21d2:	0004      	movs	r4, r0
	writeRegister(PL_CFG, readRegister(PL_CFG) | 0x40); // Set PL_EN (enable)
    21d4:	f7ff ffb0 	bl	2138 <_ZN8MMA8452Q12readRegisterE17MMA8452Q_Register>
    21d8:	2240      	movs	r2, #64	; 0x40
    21da:	4302      	orrs	r2, r0
    21dc:	b2d2      	uxtb	r2, r2
    21de:	0020      	movs	r0, r4
    21e0:	2111      	movs	r1, #17
    21e2:	f7ff ff69 	bl	20b8 <_ZN8MMA8452Q13writeRegisterE17MMA8452Q_Registerh>
	writeRegister(PL_COUNT, 0x50);  // Debounce counter at 100ms (at 800 hz)
    21e6:	2250      	movs	r2, #80	; 0x50
    21e8:	2112      	movs	r1, #18
    21ea:	0020      	movs	r0, r4
    21ec:	f7ff ff64 	bl	20b8 <_ZN8MMA8452Q13writeRegisterE17MMA8452Q_Registerh>
}
    21f0:	bd10      	pop	{r4, pc}

000021f2 <_ZN8MMA8452Q6readPLEv>:
{
    21f2:	b510      	push	{r4, lr}
	byte plStat = readRegister(PL_STATUS);
    21f4:	2110      	movs	r1, #16
    21f6:	f7ff ff9f 	bl	2138 <_ZN8MMA8452Q12readRegisterE17MMA8452Q_Register>
		return LOCKOUT;
    21fa:	2340      	movs	r3, #64	; 0x40
	if (plStat & 0x40) // Z-tilt lockout
    21fc:	4218      	tst	r0, r3
    21fe:	d101      	bne.n	2204 <_ZN8MMA8452Q6readPLEv+0x12>
		return (plStat & 0x6) >> 1;
    2200:	0740      	lsls	r0, r0, #29
    2202:	0f83      	lsrs	r3, r0, #30
}
    2204:	0018      	movs	r0, r3
    2206:	bd10      	pop	{r4, pc}

00002208 <_ZN8MMA8452Q7standbyEv>:
{
    2208:	b510      	push	{r4, lr}
	byte c = readRegister(CTRL_REG1);
    220a:	212a      	movs	r1, #42	; 0x2a
{
    220c:	0004      	movs	r4, r0
	byte c = readRegister(CTRL_REG1);
    220e:	f7ff ff93 	bl	2138 <_ZN8MMA8452Q12readRegisterE17MMA8452Q_Register>
	writeRegister(CTRL_REG1, c & ~(0x01)); //Clear the active bit to go into standby
    2212:	22fe      	movs	r2, #254	; 0xfe
    2214:	212a      	movs	r1, #42	; 0x2a
    2216:	4002      	ands	r2, r0
    2218:	0020      	movs	r0, r4
    221a:	f7ff ff4d 	bl	20b8 <_ZN8MMA8452Q13writeRegisterE17MMA8452Q_Registerh>
}
    221e:	bd10      	pop	{r4, pc}

00002220 <_ZN8MMA8452Q6activeEv>:
{
    2220:	b510      	push	{r4, lr}
	byte c = readRegister(CTRL_REG1);
    2222:	212a      	movs	r1, #42	; 0x2a
{
    2224:	0004      	movs	r4, r0
	byte c = readRegister(CTRL_REG1);
    2226:	f7ff ff87 	bl	2138 <_ZN8MMA8452Q12readRegisterE17MMA8452Q_Register>
	writeRegister(CTRL_REG1, c | 0x01); //Set the active bit to begin detection
    222a:	2201      	movs	r2, #1
    222c:	4302      	orrs	r2, r0
    222e:	b2d2      	uxtb	r2, r2
    2230:	212a      	movs	r1, #42	; 0x2a
    2232:	0020      	movs	r0, r4
    2234:	f7ff ff40 	bl	20b8 <_ZN8MMA8452Q13writeRegisterE17MMA8452Q_Registerh>
}
    2238:	bd10      	pop	{r4, pc}
	...

0000223c <_ZN8MMA8452Q4initE14MMA8452Q_Scale12MMA8452Q_ODR>:
{
    223c:	b570      	push	{r4, r5, r6, lr}
    223e:	0004      	movs	r4, r0
	scale = fsr; // Haul fsr into our class variable, scale
    2240:	7641      	strb	r1, [r0, #25]
	Wire.begin(); // Initialize I2C
    2242:	4812      	ldr	r0, [pc, #72]	; (228c <_ZN8MMA8452Q4initE14MMA8452Q_Scale12MMA8452Q_ODR+0x50>)
{
    2244:	0015      	movs	r5, r2
	Wire.begin(); // Initialize I2C
    2246:	f000 f8e7 	bl	2418 <_ZN7TwoWire5beginEv>
	byte c = readRegister(WHO_AM_I);  // Read WHO_AM_I register
    224a:	210d      	movs	r1, #13
    224c:	0020      	movs	r0, r4
    224e:	f7ff ff73 	bl	2138 <_ZN8MMA8452Q12readRegisterE17MMA8452Q_Register>
		return 0;
    2252:	2300      	movs	r3, #0
	if (c != 0x2A) // WHO_AM_I should always be 0x2A
    2254:	282a      	cmp	r0, #42	; 0x2a
    2256:	d117      	bne.n	2288 <_ZN8MMA8452Q4initE14MMA8452Q_Scale12MMA8452Q_ODR+0x4c>
	standby();  // Must be in standby to change registers
    2258:	0020      	movs	r0, r4
    225a:	f7ff ffd5 	bl	2208 <_ZN8MMA8452Q7standbyEv>
	setScale(scale);  // Set up accelerometer scale
    225e:	7e61      	ldrb	r1, [r4, #25]
    2260:	0020      	movs	r0, r4
    2262:	f7ff ff92 	bl	218a <_ZN8MMA8452Q8setScaleE14MMA8452Q_Scale>
	setODR(odr);  // Set up output data rate
    2266:	0029      	movs	r1, r5
    2268:	0020      	movs	r0, r4
    226a:	f7ff ff9f 	bl	21ac <_ZN8MMA8452Q6setODRE12MMA8452Q_ODR>
	setupPL();  // Set up portrait/landscape detection
    226e:	0020      	movs	r0, r4
    2270:	f7ff ffad 	bl	21ce <_ZN8MMA8452Q7setupPLEv>
	setupTap(0x80, 0x80, 0x08); // Disable x, y, set z to 0.5g
    2274:	2280      	movs	r2, #128	; 0x80
    2276:	2308      	movs	r3, #8
    2278:	0011      	movs	r1, r2
    227a:	0020      	movs	r0, r4
    227c:	f7ff ff25 	bl	20ca <_ZN8MMA8452Q8setupTapEhhh>
	active();  // Set to active to start reading
    2280:	0020      	movs	r0, r4
    2282:	f7ff ffcd 	bl	2220 <_ZN8MMA8452Q6activeEv>
	return 1;
    2286:	2301      	movs	r3, #1
}
    2288:	0018      	movs	r0, r3
    228a:	bd70      	pop	{r4, r5, r6, pc}
    228c:	20000704 	.word	0x20000704

00002290 <_ZN8MMA8452Q13readRegistersE17MMA8452Q_RegisterPhh>:

// READ MULTIPLE REGISTERS
//	Read "len" bytes from the MMA8452Q, starting at register "reg". Bytes are stored
//	in "buffer" on exit.
void MMA8452Q::readRegisters(MMA8452Q_Register reg, byte *buffer, byte len)
{
    2290:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    2292:	000f      	movs	r7, r1
    2294:	001d      	movs	r5, r3
    2296:	0006      	movs	r6, r0
	Wire.beginTransmission(address);
    2298:	4c11      	ldr	r4, [pc, #68]	; (22e0 <_ZN8MMA8452Q13readRegistersE17MMA8452Q_RegisterPhh+0x50>)
{
    229a:	9201      	str	r2, [sp, #4]
	Wire.beginTransmission(address);
    229c:	7e01      	ldrb	r1, [r0, #24]
    229e:	0020      	movs	r0, r4
    22a0:	f000 f8da 	bl	2458 <_ZN7TwoWire17beginTransmissionEh>
    22a4:	0039      	movs	r1, r7
    22a6:	0020      	movs	r0, r4
    22a8:	f000 f933 	bl	2512 <_ZN7TwoWire5writeEh>
	Wire.write(reg);
	Wire.endTransmission(false); //endTransmission but keep the connection active
    22ac:	2100      	movs	r1, #0
    22ae:	0020      	movs	r0, r4
    22b0:	f000 f954 	bl	255c <_ZN7TwoWire15endTransmissionEb>

	Wire.requestFrom(address, len); //Ask for bytes, once done, bus is released by default
    22b4:	7e31      	ldrb	r1, [r6, #24]
    22b6:	002a      	movs	r2, r5
    22b8:	0020      	movs	r0, r4
    22ba:	f000 f925 	bl	2508 <_ZN7TwoWire11requestFromEhj>

	while(Wire.available() < len); //Hang out until we get the # of bytes we expect
    22be:	0020      	movs	r0, r4
    22c0:	f000 f870 	bl	23a4 <_ZN7TwoWire9availableEv>
    22c4:	42a8      	cmp	r0, r5
    22c6:	dbfa      	blt.n	22be <_ZN8MMA8452Q13readRegistersE17MMA8452Q_RegisterPhh+0x2e>
    22c8:	9e01      	ldr	r6, [sp, #4]
    22ca:	1975      	adds	r5, r6, r5

	for(int x = 0 ; x < len ; x++)
    22cc:	42ae      	cmp	r6, r5
    22ce:	d005      	beq.n	22dc <_ZN8MMA8452Q13readRegistersE17MMA8452Q_RegisterPhh+0x4c>
		buffer[x] = Wire.read();    
    22d0:	0020      	movs	r0, r4
    22d2:	f000 f980 	bl	25d6 <_ZN7TwoWire4readEv>
    22d6:	7030      	strb	r0, [r6, #0]
    22d8:	3601      	adds	r6, #1
	for(int x = 0 ; x < len ; x++)
    22da:	e7f7      	b.n	22cc <_ZN8MMA8452Q13readRegistersE17MMA8452Q_RegisterPhh+0x3c>
    22dc:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    22de:	46c0      	nop			; (mov r8, r8)
    22e0:	20000704 	.word	0x20000704

000022e4 <_ZN8MMA8452Q4readEv>:
{
    22e4:	b5f0      	push	{r4, r5, r6, r7, lr}
    22e6:	0004      	movs	r4, r0
    22e8:	b085      	sub	sp, #20
	readRegisters(OUT_X_MSB, rawData, 6);  // Read the six raw data registers into data array
    22ea:	aa02      	add	r2, sp, #8
    22ec:	2101      	movs	r1, #1
    22ee:	2306      	movs	r3, #6
    22f0:	f7ff ffce 	bl	2290 <_ZN8MMA8452Q13readRegistersE17MMA8452Q_RegisterPhh>
	x = (rawData[0]<<8 | rawData[1]) >> 4;
    22f4:	ab02      	add	r3, sp, #8
    22f6:	881e      	ldrh	r6, [r3, #0]
	y = (rawData[2]<<8 | rawData[3]) >> 4;
    22f8:	885d      	ldrh	r5, [r3, #2]
	z = (rawData[4]<<8 | rawData[5]) >> 4;
    22fa:	889b      	ldrh	r3, [r3, #4]
	x = (rawData[0]<<8 | rawData[1]) >> 4;
    22fc:	ba76      	rev16	r6, r6
	y = (rawData[2]<<8 | rawData[3]) >> 4;
    22fe:	ba6d      	rev16	r5, r5
	z = (rawData[4]<<8 | rawData[5]) >> 4;
    2300:	ba5b      	rev16	r3, r3
	x = (rawData[0]<<8 | rawData[1]) >> 4;
    2302:	b2b6      	uxth	r6, r6
	y = (rawData[2]<<8 | rawData[3]) >> 4;
    2304:	b2ad      	uxth	r5, r5
	z = (rawData[4]<<8 | rawData[5]) >> 4;
    2306:	b29b      	uxth	r3, r3
    2308:	111b      	asrs	r3, r3, #4
	x = (rawData[0]<<8 | rawData[1]) >> 4;
    230a:	1136      	asrs	r6, r6, #4
	y = (rawData[2]<<8 | rawData[3]) >> 4;
    230c:	112d      	asrs	r5, r5, #4
	z = (rawData[4]<<8 | rawData[5]) >> 4;
    230e:	60a3      	str	r3, [r4, #8]
	x = (rawData[0]<<8 | rawData[1]) >> 4;
    2310:	6026      	str	r6, [r4, #0]
	y = (rawData[2]<<8 | rawData[3]) >> 4;
    2312:	6065      	str	r5, [r4, #4]
	cx = (float) x / (float)(1<<11) * (float)(scale);
    2314:	7e60      	ldrb	r0, [r4, #25]
	z = (rawData[4]<<8 | rawData[5]) >> 4;
    2316:	9301      	str	r3, [sp, #4]
	cx = (float) x / (float)(1<<11) * (float)(scale);
    2318:	f001 f90e 	bl	3538 <__aeabi_ui2f>
    231c:	1c07      	adds	r7, r0, #0
    231e:	0030      	movs	r0, r6
    2320:	f001 f8ba 	bl	3498 <__aeabi_i2f>
    2324:	21e8      	movs	r1, #232	; 0xe8
    2326:	0589      	lsls	r1, r1, #22
    2328:	f000 ff96 	bl	3258 <__aeabi_fmul>
    232c:	1c39      	adds	r1, r7, #0
    232e:	f000 ff93 	bl	3258 <__aeabi_fmul>
    2332:	60e0      	str	r0, [r4, #12]
	cy = (float) y / (float)(1<<11) * (float)(scale);
    2334:	0028      	movs	r0, r5
    2336:	f001 f8af 	bl	3498 <__aeabi_i2f>
    233a:	21e8      	movs	r1, #232	; 0xe8
    233c:	0589      	lsls	r1, r1, #22
    233e:	f000 ff8b 	bl	3258 <__aeabi_fmul>
    2342:	1c39      	adds	r1, r7, #0
    2344:	f000 ff88 	bl	3258 <__aeabi_fmul>
    2348:	6120      	str	r0, [r4, #16]
	cz = (float) z / (float)(1<<11) * (float)(scale);
    234a:	9801      	ldr	r0, [sp, #4]
    234c:	f001 f8a4 	bl	3498 <__aeabi_i2f>
    2350:	21e8      	movs	r1, #232	; 0xe8
    2352:	0589      	lsls	r1, r1, #22
    2354:	f000 ff80 	bl	3258 <__aeabi_fmul>
    2358:	1c39      	adds	r1, r7, #0
    235a:	f000 ff7d 	bl	3258 <__aeabi_fmul>
    235e:	6160      	str	r0, [r4, #20]
}
    2360:	b005      	add	sp, #20
    2362:	bdf0      	pop	{r4, r5, r6, r7, pc}

00002364 <_ZN7TwoWire5writeEPKhj>:

  return 1 ;
}

size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
    2364:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2366:	0005      	movs	r5, r0
    2368:	000e      	movs	r6, r1
    236a:	0017      	movs	r7, r2
  //Try to store all data
  for(size_t i = 0; i < quantity; ++i)
    236c:	2400      	movs	r4, #0
    236e:	42bc      	cmp	r4, r7
    2370:	d008      	beq.n	2384 <_ZN7TwoWire5writeEPKhj+0x20>
  {
    //Return the number of data stored, when the buffer is full (if write return 0)
    if(!write(data[i]))
    2372:	682b      	ldr	r3, [r5, #0]
    2374:	5d31      	ldrb	r1, [r6, r4]
    2376:	681b      	ldr	r3, [r3, #0]
    2378:	0028      	movs	r0, r5
    237a:	4798      	blx	r3
    237c:	2800      	cmp	r0, #0
    237e:	d001      	beq.n	2384 <_ZN7TwoWire5writeEPKhj+0x20>
  for(size_t i = 0; i < quantity; ++i)
    2380:	3401      	adds	r4, #1
    2382:	e7f4      	b.n	236e <_ZN7TwoWire5writeEPKhj+0xa>
      return i;
  }

  //All data stored
  return quantity;
}
    2384:	0020      	movs	r0, r4
    2386:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00002388 <_ZN7TwoWire5flushEv>:

void TwoWire::flush(void)
{
  // Do nothing, use endTransmission(..) to force
  // data transfer.
}
    2388:	4770      	bx	lr

0000238a <_ZN7TwoWire4peekEv>:
  if(_iTail == _iHead)
    238a:	0003      	movs	r3, r0
    238c:	33fc      	adds	r3, #252	; 0xfc
    238e:	6a19      	ldr	r1, [r3, #32]
    2390:	69da      	ldr	r2, [r3, #28]
    2392:	4291      	cmp	r1, r2
    2394:	d003      	beq.n	239e <_ZN7TwoWire4peekEv+0x14>
  return _aucBuffer[_iTail];
    2396:	6a1b      	ldr	r3, [r3, #32]
    2398:	18c0      	adds	r0, r0, r3
    239a:	7e00      	ldrb	r0, [r0, #24]
}
    239c:	4770      	bx	lr
    return -1;
    239e:	2001      	movs	r0, #1
    23a0:	4240      	negs	r0, r0
  return rxBuffer.peek();
    23a2:	e7fb      	b.n	239c <_ZN7TwoWire4peekEv+0x12>

000023a4 <_ZN7TwoWire9availableEv>:
  int delta = _iHead - _iTail;
    23a4:	0003      	movs	r3, r0
    23a6:	33fc      	adds	r3, #252	; 0xfc
    23a8:	69d8      	ldr	r0, [r3, #28]
    23aa:	6a1b      	ldr	r3, [r3, #32]
    23ac:	1ac0      	subs	r0, r0, r3
  if(delta < 0)
    23ae:	d501      	bpl.n	23b4 <_ZN7TwoWire9availableEv+0x10>
    return N + delta;
    23b0:	3001      	adds	r0, #1
    23b2:	30ff      	adds	r0, #255	; 0xff
}
    23b4:	4770      	bx	lr
	...

000023b8 <_ZN7TwoWireC1EP6SERCOMhh>:
TwoWire::TwoWire(SERCOM * s, uint8_t pinSDA, uint8_t pinSCL)
    23b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    23ba:	9301      	str	r3, [sp, #4]
    23bc:	23fa      	movs	r3, #250	; 0xfa
    memset( _aucBuffer, 0, N ) ;
    23be:	2680      	movs	r6, #128	; 0x80
    23c0:	2500      	movs	r5, #0
    23c2:	0004      	movs	r4, r0
    23c4:	009b      	lsls	r3, r3, #2
    23c6:	6083      	str	r3, [r0, #8]
    23c8:	4b12      	ldr	r3, [pc, #72]	; (2414 <_ZN7TwoWireC1EP6SERCOMhh+0x5c>)
    23ca:	0076      	lsls	r6, r6, #1
    23cc:	3308      	adds	r3, #8
    23ce:	000f      	movs	r7, r1
    23d0:	6045      	str	r5, [r0, #4]
    23d2:	0029      	movs	r1, r5
    23d4:	9200      	str	r2, [sp, #0]
    23d6:	6003      	str	r3, [r0, #0]
    23d8:	0032      	movs	r2, r6
    23da:	3018      	adds	r0, #24
    23dc:	f002 ff09 	bl	51f2 <memset>
  _iHead = 0;
    23e0:	0023      	movs	r3, r4
    memset( _aucBuffer, 0, N ) ;
    23e2:	0020      	movs	r0, r4
  _iHead = 0;
    23e4:	33fc      	adds	r3, #252	; 0xfc
    memset( _aucBuffer, 0, N ) ;
    23e6:	3021      	adds	r0, #33	; 0x21
  _iHead = 0;
    23e8:	61dd      	str	r5, [r3, #28]
    memset( _aucBuffer, 0, N ) ;
    23ea:	0032      	movs	r2, r6
  _iTail = 0;
    23ec:	621d      	str	r5, [r3, #32]
    memset( _aucBuffer, 0, N ) ;
    23ee:	0029      	movs	r1, r5
    23f0:	30ff      	adds	r0, #255	; 0xff
    23f2:	f002 fefe 	bl	51f2 <memset>
  _iHead = 0;
    23f6:	2387      	movs	r3, #135	; 0x87
    23f8:	009b      	lsls	r3, r3, #2
    23fa:	18e3      	adds	r3, r4, r3
    23fc:	605d      	str	r5, [r3, #4]
  _iTail = 0;
    23fe:	609d      	str	r5, [r3, #8]
  this->_uc_pinSDA=pinSDA;
    2400:	466b      	mov	r3, sp
    2402:	781b      	ldrb	r3, [r3, #0]
  this->sercom = s;
    2404:	6127      	str	r7, [r4, #16]
  this->_uc_pinSDA=pinSDA;
    2406:	7523      	strb	r3, [r4, #20]
  this->_uc_pinSCL=pinSCL;
    2408:	466b      	mov	r3, sp
    240a:	791b      	ldrb	r3, [r3, #4]
  transmissionBegun = false;
    240c:	75a5      	strb	r5, [r4, #22]
}
    240e:	0020      	movs	r0, r4
  this->_uc_pinSCL=pinSCL;
    2410:	7563      	strb	r3, [r4, #21]
}
    2412:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    2414:	000054d0 	.word	0x000054d0

00002418 <_ZN7TwoWire5beginEv>:
void TwoWire::begin(void) {
    2418:	b570      	push	{r4, r5, r6, lr}
    241a:	0006      	movs	r6, r0
  pinPeripheral(_uc_pinSDA, g_APinDescription[_uc_pinSDA].ulPinType);
    241c:	2518      	movs	r5, #24
  sercom->initMasterWIRE(TWI_CLOCK);
    241e:	490c      	ldr	r1, [pc, #48]	; (2450 <_ZN7TwoWire5beginEv+0x38>)
    2420:	6900      	ldr	r0, [r0, #16]
    2422:	f000 fbd5 	bl	2bd0 <_ZN6SERCOM14initMasterWIREEm>
  sercom->enableWIRE();
    2426:	6930      	ldr	r0, [r6, #16]
    2428:	f000 fa6d 	bl	2906 <_ZN6SERCOM10enableWIREEv>
  pinPeripheral(_uc_pinSDA, g_APinDescription[_uc_pinSDA].ulPinType);
    242c:	002b      	movs	r3, r5
    242e:	2108      	movs	r1, #8
    2430:	7d30      	ldrb	r0, [r6, #20]
    2432:	4c08      	ldr	r4, [pc, #32]	; (2454 <_ZN7TwoWire5beginEv+0x3c>)
    2434:	4343      	muls	r3, r0
    2436:	18e3      	adds	r3, r4, r3
    2438:	5659      	ldrsb	r1, [r3, r1]
    243a:	f7ff fdbf 	bl	1fbc <pinPeripheral>
  pinPeripheral(_uc_pinSCL, g_APinDescription[_uc_pinSCL].ulPinType);
    243e:	2108      	movs	r1, #8
    2440:	7d70      	ldrb	r0, [r6, #21]
    2442:	4345      	muls	r5, r0
    2444:	1964      	adds	r4, r4, r5
    2446:	5661      	ldrsb	r1, [r4, r1]
    2448:	f7ff fdb8 	bl	1fbc <pinPeripheral>
}
    244c:	bd70      	pop	{r4, r5, r6, pc}
    244e:	46c0      	nop			; (mov r8, r8)
    2450:	000186a0 	.word	0x000186a0
    2454:	000054f4 	.word	0x000054f4

00002458 <_ZN7TwoWire17beginTransmissionEh>:
  txAddress = address;
    2458:	238a      	movs	r3, #138	; 0x8a
  _iHead = 0;
    245a:	2200      	movs	r2, #0
    245c:	009b      	lsls	r3, r3, #2
    245e:	54c1      	strb	r1, [r0, r3]
    2460:	3b0c      	subs	r3, #12
    2462:	18c3      	adds	r3, r0, r3
    2464:	605a      	str	r2, [r3, #4]
  _iTail = 0;
    2466:	609a      	str	r2, [r3, #8]
  transmissionBegun = true;
    2468:	2301      	movs	r3, #1
    246a:	7583      	strb	r3, [r0, #22]
}
    246c:	4770      	bx	lr

0000246e <_ZN11RingBufferNILi256EE10store_charEh>:
  int i = nextIndex(_iHead);
    246e:	0002      	movs	r2, r0
    2470:	32fc      	adds	r2, #252	; 0xfc
    2472:	6853      	ldr	r3, [r2, #4]
void RingBufferN<N>::store_char( uint8_t c )
    2474:	b510      	push	{r4, lr}
  return (uint32_t)(index + 1) % N;
    2476:	3301      	adds	r3, #1
  if ( i != _iTail )
    2478:	6894      	ldr	r4, [r2, #8]
  return (uint32_t)(index + 1) % N;
    247a:	b2db      	uxtb	r3, r3
  if ( i != _iTail )
    247c:	429c      	cmp	r4, r3
    247e:	d002      	beq.n	2486 <_ZN11RingBufferNILi256EE10store_charEh+0x18>
    _aucBuffer[_iHead] = c ;
    2480:	6854      	ldr	r4, [r2, #4]
    2482:	5501      	strb	r1, [r0, r4]
    _iHead = i ;
    2484:	6053      	str	r3, [r2, #4]
}
    2486:	bd10      	pop	{r4, pc}

00002488 <_ZN7TwoWire11requestFromEhjb>:
{
    2488:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    248a:	2400      	movs	r4, #0
    248c:	0005      	movs	r5, r0
    248e:	0017      	movs	r7, r2
    2490:	9301      	str	r3, [sp, #4]
    return 0;
    2492:	0020      	movs	r0, r4
  if(quantity == 0)
    2494:	42a2      	cmp	r2, r4
    2496:	d02e      	beq.n	24f6 <_ZN7TwoWire11requestFromEhjb+0x6e>
  _iHead = 0;
    2498:	002b      	movs	r3, r5
    249a:	33fc      	adds	r3, #252	; 0xfc
    249c:	61dc      	str	r4, [r3, #28]
  if(sercom->startTransmissionWIRE(address, WIRE_READ_FLAG))
    249e:	2201      	movs	r2, #1
  _iTail = 0;
    24a0:	621c      	str	r4, [r3, #32]
    24a2:	6928      	ldr	r0, [r5, #16]
    24a4:	f000 fa70 	bl	2988 <_ZN6SERCOM21startTransmissionWIREEh23SercomWireReadWriteFlag>
    24a8:	0006      	movs	r6, r0
    24aa:	42a0      	cmp	r0, r4
    24ac:	d022      	beq.n	24f4 <_ZN7TwoWire11requestFromEhjb+0x6c>
  rxBuffer.clear();
    24ae:	002b      	movs	r3, r5
    24b0:	3318      	adds	r3, #24
    24b2:	9300      	str	r3, [sp, #0]
    rxBuffer.store_char(sercom->readDataWIRE());
    24b4:	6928      	ldr	r0, [r5, #16]
    24b6:	f000 faf4 	bl	2aa2 <_ZN6SERCOM12readDataWIREEv>
    for (byteRead = 1; byteRead < quantity && (busOwner = sercom->isBusOwnerWIRE()); ++byteRead)
    24ba:	3401      	adds	r4, #1
    rxBuffer.store_char(sercom->readDataWIRE());
    24bc:	0001      	movs	r1, r0
    24be:	9800      	ldr	r0, [sp, #0]
    24c0:	f7ff ffd5 	bl	246e <_ZN11RingBufferNILi256EE10store_charEh>
    for (byteRead = 1; byteRead < quantity && (busOwner = sercom->isBusOwnerWIRE()); ++byteRead)
    24c4:	42bc      	cmp	r4, r7
    24c6:	d005      	beq.n	24d4 <_ZN7TwoWire11requestFromEhjb+0x4c>
    24c8:	6928      	ldr	r0, [r5, #16]
    24ca:	f000 fac8 	bl	2a5e <_ZN6SERCOM14isBusOwnerWIREEv>
    24ce:	2800      	cmp	r0, #0
    24d0:	d112      	bne.n	24f8 <_ZN7TwoWire11requestFromEhjb+0x70>
    24d2:	0006      	movs	r6, r0
    sercom->prepareNackBitWIRE();                           // Prepare NACK to stop slave transmission
    24d4:	6928      	ldr	r0, [r5, #16]
    24d6:	f000 fa29 	bl	292c <_ZN6SERCOM18prepareNackBitWIREEv>
    if (stopBit && busOwner)
    24da:	9b01      	ldr	r3, [sp, #4]
    24dc:	2b00      	cmp	r3, #0
    24de:	d103      	bne.n	24e8 <_ZN7TwoWire11requestFromEhjb+0x60>
    if (!busOwner)
    24e0:	2e00      	cmp	r6, #0
    24e2:	d107      	bne.n	24f4 <_ZN7TwoWire11requestFromEhjb+0x6c>
      byteRead--;   // because last read byte was garbage/invalid
    24e4:	3c01      	subs	r4, #1
    24e6:	e005      	b.n	24f4 <_ZN7TwoWire11requestFromEhjb+0x6c>
    if (stopBit && busOwner)
    24e8:	2e00      	cmp	r6, #0
    24ea:	d0fb      	beq.n	24e4 <_ZN7TwoWire11requestFromEhjb+0x5c>
      sercom->prepareCommandBitsWire(WIRE_MASTER_ACT_STOP);   // Send Stop unless arbitration was lost
    24ec:	2103      	movs	r1, #3
    24ee:	6928      	ldr	r0, [r5, #16]
    24f0:	f000 fa2e 	bl	2950 <_ZN6SERCOM22prepareCommandBitsWireEh>
  return byteRead;
    24f4:	b2e0      	uxtb	r0, r4
}
    24f6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      sercom->prepareAckBitWIRE();                          // Prepare Acknowledge
    24f8:	6928      	ldr	r0, [r5, #16]
    24fa:	f000 fa1f 	bl	293c <_ZN6SERCOM17prepareAckBitWIREEv>
      sercom->prepareCommandBitsWire(WIRE_MASTER_ACT_READ); // Prepare the ACK command for the slave
    24fe:	2102      	movs	r1, #2
    2500:	6928      	ldr	r0, [r5, #16]
    2502:	f000 fa25 	bl	2950 <_ZN6SERCOM22prepareCommandBitsWireEh>
    2506:	e7d5      	b.n	24b4 <_ZN7TwoWire11requestFromEhjb+0x2c>

00002508 <_ZN7TwoWire11requestFromEhj>:
{
    2508:	b510      	push	{r4, lr}
  return requestFrom(address, quantity, true);
    250a:	2301      	movs	r3, #1
    250c:	f7ff ffbc 	bl	2488 <_ZN7TwoWire11requestFromEhjb>
}
    2510:	bd10      	pop	{r4, pc}

00002512 <_ZN7TwoWire5writeEh>:
    return 0 ;
    2512:	2200      	movs	r2, #0
{
    2514:	b510      	push	{r4, lr}
  if ( !transmissionBegun || txBuffer.isFull() )
    2516:	7d83      	ldrb	r3, [r0, #22]
    2518:	4293      	cmp	r3, r2
    251a:	d00d      	beq.n	2538 <_ZN7TwoWire5writeEh+0x26>
}

template <int N>
bool RingBufferN<N>::isFull()
{
  return (nextIndex(_iHead) == _iTail);
    251c:	2387      	movs	r3, #135	; 0x87
    251e:	009b      	lsls	r3, r3, #2
    2520:	18c4      	adds	r4, r0, r3
    2522:	6863      	ldr	r3, [r4, #4]
    2524:	68a4      	ldr	r4, [r4, #8]
  return (uint32_t)(index + 1) % N;
    2526:	3301      	adds	r3, #1
    2528:	b2db      	uxtb	r3, r3
    252a:	42a3      	cmp	r3, r4
    252c:	d004      	beq.n	2538 <_ZN7TwoWire5writeEh+0x26>
  txBuffer.store_char( ucData ) ;
    252e:	3021      	adds	r0, #33	; 0x21
    2530:	30ff      	adds	r0, #255	; 0xff
    2532:	f7ff ff9c 	bl	246e <_ZN11RingBufferNILi256EE10store_charEh>
  return 1 ;
    2536:	2201      	movs	r2, #1
}
    2538:	0010      	movs	r0, r2
    253a:	bd10      	pop	{r4, pc}

0000253c <_ZN11RingBufferNILi256EE9read_charEv>:
  if(_iTail == _iHead)
    253c:	0003      	movs	r3, r0
    253e:	33fc      	adds	r3, #252	; 0xfc
    2540:	6899      	ldr	r1, [r3, #8]
    2542:	685a      	ldr	r2, [r3, #4]
    2544:	4291      	cmp	r1, r2
    2546:	d006      	beq.n	2556 <_ZN11RingBufferNILi256EE9read_charEv+0x1a>
  uint8_t value = _aucBuffer[_iTail];
    2548:	689a      	ldr	r2, [r3, #8]
    254a:	5c80      	ldrb	r0, [r0, r2]
  _iTail = nextIndex(_iTail);
    254c:	689a      	ldr	r2, [r3, #8]
  return (uint32_t)(index + 1) % N;
    254e:	3201      	adds	r2, #1
    2550:	b2d2      	uxtb	r2, r2
  _iTail = nextIndex(_iTail);
    2552:	609a      	str	r2, [r3, #8]
}
    2554:	4770      	bx	lr
    return -1;
    2556:	2001      	movs	r0, #1
    2558:	4240      	negs	r0, r0
    255a:	e7fb      	b.n	2554 <_ZN11RingBufferNILi256EE9read_charEv+0x18>

0000255c <_ZN7TwoWire15endTransmissionEb>:
  transmissionBegun = false ;
    255c:	2200      	movs	r2, #0
  if ( !sercom->startTransmissionWIRE( txAddress, WIRE_WRITE_FLAG ) )
    255e:	238a      	movs	r3, #138	; 0x8a
{
    2560:	b570      	push	{r4, r5, r6, lr}
  if ( !sercom->startTransmissionWIRE( txAddress, WIRE_WRITE_FLAG ) )
    2562:	009b      	lsls	r3, r3, #2
  transmissionBegun = false ;
    2564:	7582      	strb	r2, [r0, #22]
{
    2566:	0005      	movs	r5, r0
    2568:	000e      	movs	r6, r1
  if ( !sercom->startTransmissionWIRE( txAddress, WIRE_WRITE_FLAG ) )
    256a:	5cc1      	ldrb	r1, [r0, r3]
    256c:	6900      	ldr	r0, [r0, #16]
    256e:	f000 fa0b 	bl	2988 <_ZN6SERCOM21startTransmissionWIREEh23SercomWireReadWriteFlag>
    2572:	2800      	cmp	r0, #0
    2574:	d106      	bne.n	2584 <_ZN7TwoWire15endTransmissionEb+0x28>
    sercom->prepareCommandBitsWire(WIRE_MASTER_ACT_STOP);
    2576:	2103      	movs	r1, #3
    2578:	6928      	ldr	r0, [r5, #16]
    257a:	f000 f9e9 	bl	2950 <_ZN6SERCOM22prepareCommandBitsWireEh>
    return 2 ;  // Address error
    257e:	2402      	movs	r4, #2
}
    2580:	0020      	movs	r0, r4
    2582:	bd70      	pop	{r4, r5, r6, pc}
  int delta = _iHead - _iTail;
    2584:	2387      	movs	r3, #135	; 0x87
  while( txBuffer.available() )
    2586:	0028      	movs	r0, r5
    2588:	009b      	lsls	r3, r3, #2
    258a:	18ea      	adds	r2, r5, r3
    258c:	6853      	ldr	r3, [r2, #4]
    258e:	6894      	ldr	r4, [r2, #8]
    2590:	3021      	adds	r0, #33	; 0x21
    2592:	30ff      	adds	r0, #255	; 0xff
    2594:	1b1c      	subs	r4, r3, r4
  if(delta < 0)
    2596:	d501      	bpl.n	259c <_ZN7TwoWire15endTransmissionEb+0x40>
    return N + delta;
    2598:	3401      	adds	r4, #1
    259a:	34ff      	adds	r4, #255	; 0xff
    259c:	2c00      	cmp	r4, #0
    259e:	d00e      	beq.n	25be <_ZN7TwoWire15endTransmissionEb+0x62>
    if ( !sercom->sendDataMasterWIRE( txBuffer.read_char() ) )
    25a0:	692c      	ldr	r4, [r5, #16]
    25a2:	f7ff ffcb 	bl	253c <_ZN11RingBufferNILi256EE9read_charEv>
    25a6:	b2c1      	uxtb	r1, r0
    25a8:	0020      	movs	r0, r4
    25aa:	f000 fa2f 	bl	2a0c <_ZN6SERCOM18sendDataMasterWIREEh>
    25ae:	2800      	cmp	r0, #0
    25b0:	d1e8      	bne.n	2584 <_ZN7TwoWire15endTransmissionEb+0x28>
      sercom->prepareCommandBitsWire(WIRE_MASTER_ACT_STOP);
    25b2:	2103      	movs	r1, #3
    25b4:	6928      	ldr	r0, [r5, #16]
    25b6:	f000 f9cb 	bl	2950 <_ZN6SERCOM22prepareCommandBitsWireEh>
      return 3 ;  // Nack or error
    25ba:	2403      	movs	r4, #3
    25bc:	e7e0      	b.n	2580 <_ZN7TwoWire15endTransmissionEb+0x24>
  if (stopBit)
    25be:	2e00      	cmp	r6, #0
    25c0:	d0de      	beq.n	2580 <_ZN7TwoWire15endTransmissionEb+0x24>
    sercom->prepareCommandBitsWire(WIRE_MASTER_ACT_STOP);
    25c2:	2103      	movs	r1, #3
    25c4:	6928      	ldr	r0, [r5, #16]
    25c6:	f000 f9c3 	bl	2950 <_ZN6SERCOM22prepareCommandBitsWireEh>
    25ca:	e7d9      	b.n	2580 <_ZN7TwoWire15endTransmissionEb+0x24>

000025cc <_ZN7TwoWire15endTransmissionEv>:
{
    25cc:	b510      	push	{r4, lr}
  return endTransmission(true);
    25ce:	2101      	movs	r1, #1
    25d0:	f7ff ffc4 	bl	255c <_ZN7TwoWire15endTransmissionEb>
}
    25d4:	bd10      	pop	{r4, pc}

000025d6 <_ZN7TwoWire4readEv>:
{
    25d6:	b510      	push	{r4, lr}
  return rxBuffer.read_char();
    25d8:	3018      	adds	r0, #24
    25da:	f7ff ffaf 	bl	253c <_ZN11RingBufferNILi256EE9read_charEv>
}
    25de:	bd10      	pop	{r4, pc}

000025e0 <_ZN7TwoWire9onServiceEv>:
{
  onRequestCallback = function;
}

void TwoWire::onService(void)
{
    25e0:	b570      	push	{r4, r5, r6, lr}
    25e2:	0004      	movs	r4, r0
  if ( sercom->isSlaveWIRE() )
    25e4:	6900      	ldr	r0, [r0, #16]
    25e6:	f000 fa31 	bl	2a4c <_ZN6SERCOM11isSlaveWIREEv>
    25ea:	2800      	cmp	r0, #0
    25ec:	d028      	beq.n	2640 <_ZN7TwoWire9onServiceEv+0x60>
  {
    if(sercom->isStopDetectedWIRE() || 
    25ee:	6920      	ldr	r0, [r4, #16]
    25f0:	f000 fa43 	bl	2a7a <_ZN6SERCOM18isStopDetectedWIREEv>
    25f4:	2800      	cmp	r0, #0
    25f6:	d10e      	bne.n	2616 <_ZN7TwoWire9onServiceEv+0x36>
        (sercom->isAddressMatch() && sercom->isRestartDetectedWIRE() && !sercom->isMasterReadOperationWIRE())) //Stop or Restart detected
    25f8:	6920      	ldr	r0, [r4, #16]
    25fa:	f000 fa48 	bl	2a8e <_ZN6SERCOM14isAddressMatchEv>
    if(sercom->isStopDetectedWIRE() || 
    25fe:	2800      	cmp	r0, #0
    2600:	d055      	beq.n	26ae <_ZN7TwoWire9onServiceEv+0xce>
        (sercom->isAddressMatch() && sercom->isRestartDetectedWIRE() && !sercom->isMasterReadOperationWIRE())) //Stop or Restart detected
    2602:	6920      	ldr	r0, [r4, #16]
    2604:	f000 fa3e 	bl	2a84 <_ZN6SERCOM21isRestartDetectedWIREEv>
    2608:	2800      	cmp	r0, #0
    260a:	d050      	beq.n	26ae <_ZN7TwoWire9onServiceEv+0xce>
    260c:	6920      	ldr	r0, [r4, #16]
    260e:	f000 fa43 	bl	2a98 <_ZN6SERCOM25isMasterReadOperationWIREEv>
    2612:	2800      	cmp	r0, #0
    2614:	d14b      	bne.n	26ae <_ZN7TwoWire9onServiceEv+0xce>
    {
      sercom->prepareAckBitWIRE();
    2616:	6920      	ldr	r0, [r4, #16]
    2618:	f000 f990 	bl	293c <_ZN6SERCOM17prepareAckBitWIREEv>
      sercom->prepareCommandBitsWire(0x03);
    261c:	2103      	movs	r1, #3
    261e:	6920      	ldr	r0, [r4, #16]
    2620:	f000 f996 	bl	2950 <_ZN6SERCOM22prepareCommandBitsWireEh>

      //Calling onReceiveCallback, if exists
      if(onReceiveCallback)
    2624:	238c      	movs	r3, #140	; 0x8c
    2626:	009b      	lsls	r3, r3, #2
    2628:	58e5      	ldr	r5, [r4, r3]
    262a:	2d00      	cmp	r5, #0
    262c:	d004      	beq.n	2638 <_ZN7TwoWire9onServiceEv+0x58>
      {
        onReceiveCallback(available());
    262e:	6823      	ldr	r3, [r4, #0]
    2630:	0020      	movs	r0, r4
    2632:	691b      	ldr	r3, [r3, #16]
    2634:	4798      	blx	r3
    2636:	47a8      	blx	r5
  _iHead = 0;
    2638:	2300      	movs	r3, #0
    263a:	34fc      	adds	r4, #252	; 0xfc
    263c:	61e3      	str	r3, [r4, #28]
  _iTail = 0;
    263e:	6223      	str	r3, [r4, #32]

        sercom->prepareCommandBitsWire(0x03);
      }
    }
  }
}
    2640:	bd70      	pop	{r4, r5, r6, pc}
      sercom->prepareAckBitWIRE();
    2642:	6920      	ldr	r0, [r4, #16]
    2644:	f000 f97a 	bl	293c <_ZN6SERCOM17prepareAckBitWIREEv>
      sercom->prepareCommandBitsWire(0x03);
    2648:	6920      	ldr	r0, [r4, #16]
    264a:	2103      	movs	r1, #3
    264c:	f000 f980 	bl	2950 <_ZN6SERCOM22prepareCommandBitsWireEh>
      if(sercom->isMasterReadOperationWIRE()) //Is a request ?
    2650:	6920      	ldr	r0, [r4, #16]
    2652:	f000 fa21 	bl	2a98 <_ZN6SERCOM25isMasterReadOperationWIREEv>
    2656:	2800      	cmp	r0, #0
    2658:	d0f2      	beq.n	2640 <_ZN7TwoWire9onServiceEv+0x60>
  _iHead = 0;
    265a:	2387      	movs	r3, #135	; 0x87
    265c:	2200      	movs	r2, #0
    265e:	009b      	lsls	r3, r3, #2
    2660:	18e3      	adds	r3, r4, r3
    2662:	605a      	str	r2, [r3, #4]
  _iTail = 0;
    2664:	609a      	str	r2, [r3, #8]
        transmissionBegun = true;
    2666:	2301      	movs	r3, #1
    2668:	75a3      	strb	r3, [r4, #22]
        if(onRequestCallback)
    266a:	238b      	movs	r3, #139	; 0x8b
    266c:	009b      	lsls	r3, r3, #2
    266e:	58e3      	ldr	r3, [r4, r3]
    2670:	4293      	cmp	r3, r2
    2672:	d0e5      	beq.n	2640 <_ZN7TwoWire9onServiceEv+0x60>
          onRequestCallback();
    2674:	4798      	blx	r3
    2676:	e7e3      	b.n	2640 <_ZN7TwoWire9onServiceEv+0x60>
  return (nextIndex(_iHead) == _iTail);
    2678:	0022      	movs	r2, r4
    267a:	32fc      	adds	r2, #252	; 0xfc
    267c:	69d3      	ldr	r3, [r2, #28]
    267e:	6a12      	ldr	r2, [r2, #32]
  return (uint32_t)(index + 1) % N;
    2680:	3301      	adds	r3, #1
    2682:	b2db      	uxtb	r3, r3
          sercom->prepareNackBitWIRE(); 
    2684:	6920      	ldr	r0, [r4, #16]
        if (rxBuffer.isFull()) {
    2686:	4293      	cmp	r3, r2
    2688:	d106      	bne.n	2698 <_ZN7TwoWire9onServiceEv+0xb8>
          sercom->prepareNackBitWIRE(); 
    268a:	f000 f94f 	bl	292c <_ZN6SERCOM18prepareNackBitWIREEv>
        sercom->prepareCommandBitsWire(0x03);
    268e:	2103      	movs	r1, #3
    2690:	6920      	ldr	r0, [r4, #16]
    2692:	f000 f95d 	bl	2950 <_ZN6SERCOM22prepareCommandBitsWireEh>
}
    2696:	e7d3      	b.n	2640 <_ZN7TwoWire9onServiceEv+0x60>
          rxBuffer.store_char(sercom->readDataWIRE());
    2698:	f000 fa03 	bl	2aa2 <_ZN6SERCOM12readDataWIREEv>
    269c:	0001      	movs	r1, r0
    269e:	0020      	movs	r0, r4
    26a0:	3018      	adds	r0, #24
    26a2:	f7ff fee4 	bl	246e <_ZN11RingBufferNILi256EE10store_charEh>
          sercom->prepareAckBitWIRE(); 
    26a6:	6920      	ldr	r0, [r4, #16]
    26a8:	f000 f948 	bl	293c <_ZN6SERCOM17prepareAckBitWIREEv>
    26ac:	e7ef      	b.n	268e <_ZN7TwoWire9onServiceEv+0xae>
    else if(sercom->isAddressMatch())  //Address Match
    26ae:	6920      	ldr	r0, [r4, #16]
    26b0:	f000 f9ed 	bl	2a8e <_ZN6SERCOM14isAddressMatchEv>
    26b4:	2800      	cmp	r0, #0
    26b6:	d1c4      	bne.n	2642 <_ZN7TwoWire9onServiceEv+0x62>
    else if(sercom->isDataReadyWIRE())
    26b8:	6920      	ldr	r0, [r4, #16]
    26ba:	f000 f9d9 	bl	2a70 <_ZN6SERCOM15isDataReadyWIREEv>
    26be:	2800      	cmp	r0, #0
    26c0:	d0be      	beq.n	2640 <_ZN7TwoWire9onServiceEv+0x60>
      if (sercom->isMasterReadOperationWIRE())
    26c2:	6920      	ldr	r0, [r4, #16]
    26c4:	f000 f9e8 	bl	2a98 <_ZN6SERCOM25isMasterReadOperationWIREEv>
    26c8:	2800      	cmp	r0, #0
    26ca:	d0d5      	beq.n	2678 <_ZN7TwoWire9onServiceEv+0x98>
  int delta = _iHead - _iTail;
    26cc:	2387      	movs	r3, #135	; 0x87
    26ce:	009b      	lsls	r3, r3, #2
    26d0:	18e2      	adds	r2, r4, r3
    26d2:	6853      	ldr	r3, [r2, #4]
    26d4:	6892      	ldr	r2, [r2, #8]
    26d6:	1a9b      	subs	r3, r3, r2
  if(delta < 0)
    26d8:	d501      	bpl.n	26de <_ZN7TwoWire9onServiceEv+0xfe>
    return N + delta;
    26da:	3301      	adds	r3, #1
    26dc:	33ff      	adds	r3, #255	; 0xff
        uint8_t c = 0xff;
    26de:	21ff      	movs	r1, #255	; 0xff
        if( txBuffer.available() ) {
    26e0:	2b00      	cmp	r3, #0
    26e2:	d005      	beq.n	26f0 <_ZN7TwoWire9onServiceEv+0x110>
    26e4:	0020      	movs	r0, r4
    26e6:	3021      	adds	r0, #33	; 0x21
    26e8:	30ff      	adds	r0, #255	; 0xff
          c = txBuffer.read_char();
    26ea:	f7ff ff27 	bl	253c <_ZN11RingBufferNILi256EE9read_charEv>
    26ee:	b2c1      	uxtb	r1, r0
        transmissionBegun = sercom->sendDataSlaveWIRE(c);
    26f0:	6920      	ldr	r0, [r4, #16]
    26f2:	f000 f99d 	bl	2a30 <_ZN6SERCOM17sendDataSlaveWIREEh>
    26f6:	75a0      	strb	r0, [r4, #22]
    26f8:	e7a2      	b.n	2640 <_ZN7TwoWire9onServiceEv+0x60>
	...

000026fc <SERCOM3_Handler>:
    #define PERIPH_WIRE          sercom3
    #define WIRE_IT_HANDLER      SERCOM3_Handler
  #endif // PERIPH_WIRE
  TwoWire Wire(&PERIPH_WIRE, PIN_WIRE_SDA, PIN_WIRE_SCL);

  void WIRE_IT_HANDLER(void) {
    26fc:	b510      	push	{r4, lr}
    Wire.onService();
    26fe:	4802      	ldr	r0, [pc, #8]	; (2708 <SERCOM3_Handler+0xc>)
    2700:	f7ff ff6e 	bl	25e0 <_ZN7TwoWire9onServiceEv>
  }
    2704:	bd10      	pop	{r4, pc}
    2706:	46c0      	nop			; (mov r8, r8)
    2708:	20000704 	.word	0x20000704

0000270c <_GLOBAL__sub_I__ZN7TwoWireC2EP6SERCOMhh>:
    270c:	b510      	push	{r4, lr}
  TwoWire Wire(&PERIPH_WIRE, PIN_WIRE_SDA, PIN_WIRE_SCL);
    270e:	2315      	movs	r3, #21
    2710:	2214      	movs	r2, #20
    2712:	4902      	ldr	r1, [pc, #8]	; (271c <_GLOBAL__sub_I__ZN7TwoWireC2EP6SERCOMhh+0x10>)
    2714:	4802      	ldr	r0, [pc, #8]	; (2720 <_GLOBAL__sub_I__ZN7TwoWireC2EP6SERCOMhh+0x14>)
    2716:	f7ff fe4f 	bl	23b8 <_ZN7TwoWireC1EP6SERCOMhh>
  }
    271a:	bd10      	pop	{r4, pc}
    271c:	20000dbc 	.word	0x20000dbc
    2720:	20000704 	.word	0x20000704

00002724 <SERCOM0_Handler>:
SERCOM sercom5( SERCOM5 ) ;

Uart Serial1( &sercom0, PIN_SERIAL1_RX, PIN_SERIAL1_TX, PAD_SERIAL1_RX, PAD_SERIAL1_TX ) ;
Uart Serial( &sercom5, PIN_SERIAL_RX, PIN_SERIAL_TX, PAD_SERIAL_RX, PAD_SERIAL_TX ) ;
void SERCOM0_Handler()
{
    2724:	b510      	push	{r4, lr}
  Serial1.IrqHandler();
    2726:	4802      	ldr	r0, [pc, #8]	; (2730 <SERCOM0_Handler+0xc>)
    2728:	f000 fbbd 	bl	2ea6 <_ZN4Uart10IrqHandlerEv>
}
    272c:	bd10      	pop	{r4, pc}
    272e:	46c0      	nop			; (mov r8, r8)
    2730:	20000b74 	.word	0x20000b74

00002734 <SERCOM5_Handler>:

void SERCOM5_Handler()
{
    2734:	b510      	push	{r4, lr}
  Serial.IrqHandler();
    2736:	4802      	ldr	r0, [pc, #8]	; (2740 <SERCOM5_Handler+0xc>)
    2738:	f000 fbb5 	bl	2ea6 <_ZN4Uart10IrqHandlerEv>
}
    273c:	bd10      	pop	{r4, pc}
    273e:	46c0      	nop			; (mov r8, r8)
    2740:	20000938 	.word	0x20000938

00002744 <_GLOBAL__sub_I_g_APinDescription>:
    2744:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
Uart Serial1( &sercom0, PIN_SERIAL1_RX, PIN_SERIAL1_TX, PAD_SERIAL1_RX, PAD_SERIAL1_TX ) ;
    2746:	2401      	movs	r4, #1
    2748:	2603      	movs	r6, #3
SERCOM sercom0( SERCOM0 ) ;
    274a:	4f15      	ldr	r7, [pc, #84]	; (27a0 <_GLOBAL__sub_I_g_APinDescription+0x5c>)
    274c:	4915      	ldr	r1, [pc, #84]	; (27a4 <_GLOBAL__sub_I_g_APinDescription+0x60>)
    274e:	0038      	movs	r0, r7
    2750:	f000 f84a 	bl	27e8 <_ZN6SERCOMC1EP6Sercom>
SERCOM sercom1( SERCOM1 ) ;
    2754:	4914      	ldr	r1, [pc, #80]	; (27a8 <_GLOBAL__sub_I_g_APinDescription+0x64>)
    2756:	4815      	ldr	r0, [pc, #84]	; (27ac <_GLOBAL__sub_I_g_APinDescription+0x68>)
    2758:	f000 f846 	bl	27e8 <_ZN6SERCOMC1EP6Sercom>
SERCOM sercom2( SERCOM2 ) ;
    275c:	4914      	ldr	r1, [pc, #80]	; (27b0 <_GLOBAL__sub_I_g_APinDescription+0x6c>)
    275e:	4815      	ldr	r0, [pc, #84]	; (27b4 <_GLOBAL__sub_I_g_APinDescription+0x70>)
    2760:	f000 f842 	bl	27e8 <_ZN6SERCOMC1EP6Sercom>
SERCOM sercom3( SERCOM3 ) ;
    2764:	4914      	ldr	r1, [pc, #80]	; (27b8 <_GLOBAL__sub_I_g_APinDescription+0x74>)
    2766:	4815      	ldr	r0, [pc, #84]	; (27bc <_GLOBAL__sub_I_g_APinDescription+0x78>)
    2768:	f000 f83e 	bl	27e8 <_ZN6SERCOMC1EP6Sercom>
SERCOM sercom4( SERCOM4 ) ;
    276c:	4914      	ldr	r1, [pc, #80]	; (27c0 <_GLOBAL__sub_I_g_APinDescription+0x7c>)
    276e:	4815      	ldr	r0, [pc, #84]	; (27c4 <_GLOBAL__sub_I_g_APinDescription+0x80>)
    2770:	f000 f83a 	bl	27e8 <_ZN6SERCOMC1EP6Sercom>
SERCOM sercom5( SERCOM5 ) ;
    2774:	4d14      	ldr	r5, [pc, #80]	; (27c8 <_GLOBAL__sub_I_g_APinDescription+0x84>)
    2776:	4915      	ldr	r1, [pc, #84]	; (27cc <_GLOBAL__sub_I_g_APinDescription+0x88>)
    2778:	0028      	movs	r0, r5
    277a:	f000 f835 	bl	27e8 <_ZN6SERCOMC1EP6Sercom>
Uart Serial1( &sercom0, PIN_SERIAL1_RX, PIN_SERIAL1_TX, PAD_SERIAL1_RX, PAD_SERIAL1_TX ) ;
    277e:	0039      	movs	r1, r7
    2780:	9600      	str	r6, [sp, #0]
    2782:	0023      	movs	r3, r4
    2784:	9401      	str	r4, [sp, #4]
    2786:	2200      	movs	r2, #0
    2788:	4811      	ldr	r0, [pc, #68]	; (27d0 <_GLOBAL__sub_I_g_APinDescription+0x8c>)
    278a:	f000 fb21 	bl	2dd0 <_ZN4UartC1EP6SERCOMhh11SercomRXPad15SercomUartTXPad>
Uart Serial( &sercom5, PIN_SERIAL_RX, PIN_SERIAL_TX, PAD_SERIAL_RX, PAD_SERIAL_TX ) ;
    278e:	9600      	str	r6, [sp, #0]
    2790:	0029      	movs	r1, r5
    2792:	9401      	str	r4, [sp, #4]
    2794:	231e      	movs	r3, #30
    2796:	221f      	movs	r2, #31
    2798:	480e      	ldr	r0, [pc, #56]	; (27d4 <_GLOBAL__sub_I_g_APinDescription+0x90>)
    279a:	f000 fb19 	bl	2dd0 <_ZN4UartC1EP6SERCOMhh11SercomRXPad15SercomUartTXPad>
}
    279e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    27a0:	20000db0 	.word	0x20000db0
    27a4:	42000800 	.word	0x42000800
    27a8:	42000c00 	.word	0x42000c00
    27ac:	20000db4 	.word	0x20000db4
    27b0:	42001000 	.word	0x42001000
    27b4:	20000db8 	.word	0x20000db8
    27b8:	42001400 	.word	0x42001400
    27bc:	20000dbc 	.word	0x20000dbc
    27c0:	42001800 	.word	0x42001800
    27c4:	20000dc0 	.word	0x20000dc0
    27c8:	20000dc4 	.word	0x20000dc4
    27cc:	42001c00 	.word	0x42001c00
    27d0:	20000b74 	.word	0x20000b74
    27d4:	20000938 	.word	0x20000938

000027d8 <_Znwj>:
    27d8:	b510      	push	{r4, lr}
    27da:	f002 fced 	bl	51b8 <malloc>
    27de:	bd10      	pop	{r4, pc}

000027e0 <_ZdlPv>:
    27e0:	b510      	push	{r4, lr}
    27e2:	f002 fcf3 	bl	51cc <free>
    27e6:	bd10      	pop	{r4, pc}

000027e8 <_ZN6SERCOMC1EP6Sercom>:
#define WIRE_RISE_TIME_NANOSECONDS 125
#endif

SERCOM::SERCOM(Sercom* s)
{
  sercom = s;
    27e8:	6001      	str	r1, [r0, #0]
}
    27ea:	4770      	bx	lr

000027ec <_ZN6SERCOM9initFrameE18SercomUartCharSize15SercomDataOrder16SercomParityMode19SercomNumberStopBit>:
    sercom->USART.BAUD.FRAC.FP   = (baudTimes8 % 8);
    sercom->USART.BAUD.FRAC.BAUD = (baudTimes8 / 8);
  }
}
void SERCOM::initFrame(SercomUartCharSize charSize, SercomDataOrder dataOrder, SercomParityMode parityMode, SercomNumberStopBit nbStopBits)
{
    27ec:	b5f0      	push	{r4, r5, r6, r7, lr}
    27ee:	ac05      	add	r4, sp, #20
    27f0:	7825      	ldrb	r5, [r4, #0]
  //Setting the CTRLA register
  sercom->USART.CTRLA.reg |=	SERCOM_USART_CTRLA_FORM( (parityMode == SERCOM_NO_PARITY ? 0 : 1) ) |
    27f2:	6804      	ldr	r4, [r0, #0]
    27f4:	1e98      	subs	r0, r3, #2
    27f6:	1e47      	subs	r7, r0, #1
    27f8:	41b8      	sbcs	r0, r7
                dataOrder << SERCOM_USART_CTRLA_DORD_Pos;
    27fa:	6826      	ldr	r6, [r4, #0]
    27fc:	0792      	lsls	r2, r2, #30
  sercom->USART.CTRLA.reg |=	SERCOM_USART_CTRLA_FORM( (parityMode == SERCOM_NO_PARITY ? 0 : 1) ) |
    27fe:	0600      	lsls	r0, r0, #24
                dataOrder << SERCOM_USART_CTRLA_DORD_Pos;
    2800:	4332      	orrs	r2, r6
    2802:	4302      	orrs	r2, r0

  //Setting the CTRLB register
  sercom->USART.CTRLB.reg |=	SERCOM_USART_CTRLB_CHSIZE(charSize) |
    2804:	2007      	movs	r0, #7
  sercom->USART.CTRLA.reg |=	SERCOM_USART_CTRLA_FORM( (parityMode == SERCOM_NO_PARITY ? 0 : 1) ) |
    2806:	6022      	str	r2, [r4, #0]
  sercom->USART.CTRLB.reg |=	SERCOM_USART_CTRLB_CHSIZE(charSize) |
    2808:	4001      	ands	r1, r0
                nbStopBits << SERCOM_USART_CTRLB_SBMODE_Pos |
    280a:	01ad      	lsls	r5, r5, #6
                (parityMode == SERCOM_NO_PARITY ? 0 : parityMode) << SERCOM_USART_CTRLB_PMODE_Pos; //If no parity use default value
    280c:	6862      	ldr	r2, [r4, #4]
    280e:	4329      	orrs	r1, r5
    2810:	2000      	movs	r0, #0
    2812:	2b02      	cmp	r3, #2
    2814:	d000      	beq.n	2818 <_ZN6SERCOM9initFrameE18SercomUartCharSize15SercomDataOrder16SercomParityMode19SercomNumberStopBit+0x2c>
    2816:	0358      	lsls	r0, r3, #13
    2818:	4311      	orrs	r1, r2
    281a:	4301      	orrs	r1, r0
  sercom->USART.CTRLB.reg |=	SERCOM_USART_CTRLB_CHSIZE(charSize) |
    281c:	6061      	str	r1, [r4, #4]
}
    281e:	bdf0      	pop	{r4, r5, r6, r7, pc}

00002820 <_ZN6SERCOM8initPadsE15SercomUartTXPad11SercomRXPad>:

void SERCOM::initPads(SercomUartTXPad txPad, SercomRXPad rxPad)
{
    2820:	b510      	push	{r4, lr}
  //Setting the CTRLA register
  sercom->USART.CTRLA.reg |=	SERCOM_USART_CTRLA_TXPO(txPad) |
                SERCOM_USART_CTRLA_RXPO(rxPad);
    2822:	24c0      	movs	r4, #192	; 0xc0
  sercom->USART.CTRLA.reg |=	SERCOM_USART_CTRLA_TXPO(txPad) |
    2824:	6803      	ldr	r3, [r0, #0]
                SERCOM_USART_CTRLA_RXPO(rxPad);
    2826:	03a4      	lsls	r4, r4, #14
    2828:	6818      	ldr	r0, [r3, #0]
    282a:	0512      	lsls	r2, r2, #20
    282c:	4022      	ands	r2, r4
    282e:	4302      	orrs	r2, r0
  sercom->USART.CTRLA.reg |=	SERCOM_USART_CTRLA_TXPO(txPad) |
    2830:	20c0      	movs	r0, #192	; 0xc0
    2832:	0409      	lsls	r1, r1, #16
    2834:	0280      	lsls	r0, r0, #10
    2836:	4001      	ands	r1, r0
                SERCOM_USART_CTRLA_RXPO(rxPad);
    2838:	4311      	orrs	r1, r2
  sercom->USART.CTRLA.reg |=	SERCOM_USART_CTRLA_TXPO(txPad) |
    283a:	6019      	str	r1, [r3, #0]

  // Enable Transceiver and Receiver
  sercom->USART.CTRLB.reg |= SERCOM_USART_CTRLB_TXEN | SERCOM_USART_CTRLB_RXEN ;
    283c:	685a      	ldr	r2, [r3, #4]
    283e:	4310      	orrs	r0, r2
    2840:	6058      	str	r0, [r3, #4]
}
    2842:	bd10      	pop	{r4, pc}

00002844 <_ZN6SERCOM9resetUARTEv>:

void SERCOM::resetUART()
{
  // Start the Software Reset
  sercom->USART.CTRLA.bit.SWRST = 1 ;
    2844:	2201      	movs	r2, #1
    2846:	6803      	ldr	r3, [r0, #0]
    2848:	6819      	ldr	r1, [r3, #0]
    284a:	430a      	orrs	r2, r1
    284c:	601a      	str	r2, [r3, #0]

  while ( sercom->USART.CTRLA.bit.SWRST || sercom->USART.SYNCBUSY.bit.SWRST )
    284e:	681a      	ldr	r2, [r3, #0]
    2850:	07d2      	lsls	r2, r2, #31
    2852:	d4fc      	bmi.n	284e <_ZN6SERCOM9resetUARTEv+0xa>
    2854:	69da      	ldr	r2, [r3, #28]
    2856:	07d2      	lsls	r2, r2, #31
    2858:	d4f9      	bmi.n	284e <_ZN6SERCOM9resetUARTEv+0xa>
  {
    // Wait for both bits Software Reset from CTRLA and SYNCBUSY coming back to 0
  }
}
    285a:	4770      	bx	lr

0000285c <_ZN6SERCOM10enableUARTEv>:

void SERCOM::enableUART()
{
  //Setting  the enable bit to 1
  sercom->USART.CTRLA.bit.ENABLE = 0x1u;
    285c:	2202      	movs	r2, #2
    285e:	6803      	ldr	r3, [r0, #0]
    2860:	6819      	ldr	r1, [r3, #0]
    2862:	430a      	orrs	r2, r1
    2864:	601a      	str	r2, [r3, #0]

  //Wait for then enable bit from SYNCBUSY is equal to 0;
  while(sercom->USART.SYNCBUSY.bit.ENABLE);
    2866:	69da      	ldr	r2, [r3, #28]
    2868:	0792      	lsls	r2, r2, #30
    286a:	d4fc      	bmi.n	2866 <_ZN6SERCOM10enableUARTEv+0xa>
}
    286c:	4770      	bx	lr

0000286e <_ZN6SERCOM9flushUARTEv>:
}

bool SERCOM::isDataRegisterEmptyUART()
{
  //DRE : Data Register Empty
  return sercom->USART.INTFLAG.bit.DRE;
    286e:	6803      	ldr	r3, [r0, #0]
    2870:	7e1a      	ldrb	r2, [r3, #24]
  if(isDataRegisterEmptyUART())
    2872:	07d2      	lsls	r2, r2, #31
    2874:	d402      	bmi.n	287c <_ZN6SERCOM9flushUARTEv+0xe>
  while(!sercom->USART.INTFLAG.bit.TXC);
    2876:	7e1a      	ldrb	r2, [r3, #24]
    2878:	0792      	lsls	r2, r2, #30
    287a:	d5fc      	bpl.n	2876 <_ZN6SERCOM9flushUARTEv+0x8>
}
    287c:	4770      	bx	lr

0000287e <_ZN6SERCOM15clearStatusUARTEv>:
  sercom->USART.STATUS.reg = SERCOM_USART_STATUS_RESETVALUE;
    287e:	2200      	movs	r2, #0
    2880:	6803      	ldr	r3, [r0, #0]
    2882:	835a      	strh	r2, [r3, #26]
}
    2884:	4770      	bx	lr

00002886 <_ZN6SERCOM17availableDataUARTEv>:
  return sercom->USART.INTFLAG.bit.RXC;
    2886:	6803      	ldr	r3, [r0, #0]
    2888:	7e18      	ldrb	r0, [r3, #24]
    288a:	0740      	lsls	r0, r0, #29
    288c:	0fc0      	lsrs	r0, r0, #31
}
    288e:	4770      	bx	lr

00002890 <_ZN6SERCOM11isUARTErrorEv>:
  return sercom->USART.INTFLAG.bit.ERROR;
    2890:	6803      	ldr	r3, [r0, #0]
    2892:	7e18      	ldrb	r0, [r3, #24]
    2894:	09c0      	lsrs	r0, r0, #7
}
    2896:	4770      	bx	lr

00002898 <_ZN6SERCOM20acknowledgeUARTErrorEv>:
  sercom->USART.INTFLAG.bit.ERROR = 1;
    2898:	2380      	movs	r3, #128	; 0x80
    289a:	6802      	ldr	r2, [r0, #0]
    289c:	425b      	negs	r3, r3
    289e:	7e11      	ldrb	r1, [r2, #24]
    28a0:	430b      	orrs	r3, r1
    28a2:	7613      	strb	r3, [r2, #24]
}
    28a4:	4770      	bx	lr

000028a6 <_ZN6SERCOM16isFrameErrorUARTEv>:
  return sercom->USART.STATUS.bit.FERR;
    28a6:	6803      	ldr	r3, [r0, #0]
    28a8:	8b58      	ldrh	r0, [r3, #26]
    28aa:	0780      	lsls	r0, r0, #30
    28ac:	0fc0      	lsrs	r0, r0, #31
}
    28ae:	4770      	bx	lr

000028b0 <_ZN6SERCOM19clearFrameErrorUARTEv>:
  sercom->USART.STATUS.bit.FERR = 1;
    28b0:	2302      	movs	r3, #2
    28b2:	6802      	ldr	r2, [r0, #0]
    28b4:	8b51      	ldrh	r1, [r2, #26]
    28b6:	430b      	orrs	r3, r1
    28b8:	8353      	strh	r3, [r2, #26]
}
    28ba:	4770      	bx	lr

000028bc <_ZN6SERCOM23isDataRegisterEmptyUARTEv>:
  return sercom->USART.INTFLAG.bit.DRE;
    28bc:	6803      	ldr	r3, [r0, #0]
    28be:	7e18      	ldrb	r0, [r3, #24]
    28c0:	07c0      	lsls	r0, r0, #31
    28c2:	0fc0      	lsrs	r0, r0, #31
}
    28c4:	4770      	bx	lr

000028c6 <_ZN6SERCOM12readDataUARTEv>:

uint8_t SERCOM::readDataUART()
{
  return sercom->USART.DATA.bit.DATA;
    28c6:	6803      	ldr	r3, [r0, #0]
    28c8:	8d18      	ldrh	r0, [r3, #40]	; 0x28
    28ca:	b2c0      	uxtb	r0, r0
}
    28cc:	4770      	bx	lr

000028ce <_ZN6SERCOM13writeDataUARTEh>:
  return sercom->USART.INTFLAG.bit.DRE;
    28ce:	6803      	ldr	r3, [r0, #0]
    28d0:	7e1a      	ldrb	r2, [r3, #24]

int SERCOM::writeDataUART(uint8_t data)
{
  // Wait for data register to be empty
  while(!isDataRegisterEmptyUART());
    28d2:	07d2      	lsls	r2, r2, #31
    28d4:	d5fc      	bpl.n	28d0 <_ZN6SERCOM13writeDataUARTEh+0x2>

  //Put data into DATA register
  sercom->USART.DATA.reg = (uint16_t)data;
    28d6:	b289      	uxth	r1, r1
  return 1;
}
    28d8:	2001      	movs	r0, #1
  sercom->USART.DATA.reg = (uint16_t)data;
    28da:	8519      	strh	r1, [r3, #40]	; 0x28
}
    28dc:	4770      	bx	lr

000028de <_ZN6SERCOM36enableDataRegisterEmptyInterruptUARTEv>:

void SERCOM::enableDataRegisterEmptyInterruptUART()
{
  sercom->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
    28de:	2201      	movs	r2, #1
    28e0:	6803      	ldr	r3, [r0, #0]
    28e2:	759a      	strb	r2, [r3, #22]
}
    28e4:	4770      	bx	lr

000028e6 <_ZN6SERCOM37disableDataRegisterEmptyInterruptUARTEv>:

void SERCOM::disableDataRegisterEmptyInterruptUART()
{
  sercom->USART.INTENCLR.reg = SERCOM_USART_INTENCLR_DRE;
    28e6:	2201      	movs	r2, #1
    28e8:	6803      	ldr	r3, [r0, #0]
    28ea:	751a      	strb	r2, [r3, #20]
}
    28ec:	4770      	bx	lr

000028ee <_ZN6SERCOM9resetWIREEv>:
void SERCOM::resetWIRE()
{
  //I2CM OR I2CS, no matter SWRST is the same bit.

  //Setting the Software bit to 1
  sercom->I2CM.CTRLA.bit.SWRST = 1;
    28ee:	2201      	movs	r2, #1
    28f0:	6803      	ldr	r3, [r0, #0]
    28f2:	6819      	ldr	r1, [r3, #0]
    28f4:	430a      	orrs	r2, r1
    28f6:	601a      	str	r2, [r3, #0]

  //Wait both bits Software Reset from CTRLA and SYNCBUSY are equal to 0
  while(sercom->I2CM.CTRLA.bit.SWRST || sercom->I2CM.SYNCBUSY.bit.SWRST);
    28f8:	681a      	ldr	r2, [r3, #0]
    28fa:	07d2      	lsls	r2, r2, #31
    28fc:	d4fc      	bmi.n	28f8 <_ZN6SERCOM9resetWIREEv+0xa>
    28fe:	69da      	ldr	r2, [r3, #28]
    2900:	07d2      	lsls	r2, r2, #31
    2902:	d4f9      	bmi.n	28f8 <_ZN6SERCOM9resetWIREEv+0xa>
}
    2904:	4770      	bx	lr

00002906 <_ZN6SERCOM10enableWIREEv>:
void SERCOM::enableWIRE()
{
  // I2C Master and Slave modes share the ENABLE bit function.

  // Enable the I2C master mode
  sercom->I2CM.CTRLA.bit.ENABLE = 1 ;
    2906:	2202      	movs	r2, #2
    2908:	6803      	ldr	r3, [r0, #0]
    290a:	6819      	ldr	r1, [r3, #0]
    290c:	430a      	orrs	r2, r1
    290e:	601a      	str	r2, [r3, #0]

  while ( sercom->I2CM.SYNCBUSY.bit.ENABLE != 0 )
    2910:	69da      	ldr	r2, [r3, #28]
    2912:	0792      	lsls	r2, r2, #30
    2914:	d4fc      	bmi.n	2910 <_ZN6SERCOM10enableWIREEv+0xa>
  {
    // Waiting the enable bit from SYNCBUSY is equal to 0;
  }

  // Setting bus idle mode
  sercom->I2CM.STATUS.bit.BUSSTATE = 1 ;
    2916:	2130      	movs	r1, #48	; 0x30
    2918:	8b5a      	ldrh	r2, [r3, #26]
    291a:	438a      	bics	r2, r1
    291c:	0011      	movs	r1, r2
    291e:	2210      	movs	r2, #16
    2920:	430a      	orrs	r2, r1
    2922:	835a      	strh	r2, [r3, #26]

  while ( sercom->I2CM.SYNCBUSY.bit.SYSOP != 0 )
    2924:	69da      	ldr	r2, [r3, #28]
    2926:	0752      	lsls	r2, r2, #29
    2928:	d4fc      	bmi.n	2924 <_ZN6SERCOM10enableWIREEv+0x1e>
  {
    // Wait the SYSOP bit from SYNCBUSY coming back to 0
  }
}
    292a:	4770      	bx	lr

0000292c <_ZN6SERCOM18prepareNackBitWIREEv>:
  // Synchronous arithmetic baudrate
  sercom->I2CM.BAUD.bit.BAUD = SystemCoreClock / ( 2 * baudrate) - 5 - (((SystemCoreClock / 1000000) * WIRE_RISE_TIME_NANOSECONDS) / (2 * 1000));
}

void SERCOM::prepareNackBitWIRE( void )
{
    292c:	2380      	movs	r3, #128	; 0x80
    return true;
}

bool SERCOM::isMasterWIRE( void )
{
  return sercom->I2CS.CTRLA.bit.MODE == I2C_MASTER_OPERATION;
    292e:	6802      	ldr	r2, [r0, #0]
    2930:	02db      	lsls	r3, r3, #11
    2932:	6811      	ldr	r1, [r2, #0]
    sercom->I2CS.CTRLB.bit.ACKACT = 1;
    2934:	6851      	ldr	r1, [r2, #4]
    2936:	430b      	orrs	r3, r1
    2938:	6053      	str	r3, [r2, #4]
}
    293a:	4770      	bx	lr

0000293c <_ZN6SERCOM17prepareAckBitWIREEv>:
  return sercom->I2CS.CTRLA.bit.MODE == I2C_MASTER_OPERATION;
    293c:	6803      	ldr	r3, [r0, #0]
    293e:	4903      	ldr	r1, [pc, #12]	; (294c <_ZN6SERCOM17prepareAckBitWIREEv+0x10>)
    2940:	681a      	ldr	r2, [r3, #0]
    sercom->I2CS.CTRLB.bit.ACKACT = 0;
    2942:	685a      	ldr	r2, [r3, #4]
    2944:	400a      	ands	r2, r1
    2946:	605a      	str	r2, [r3, #4]
}
    2948:	4770      	bx	lr
    294a:	46c0      	nop			; (mov r8, r8)
    294c:	fffbffff 	.word	0xfffbffff

00002950 <_ZN6SERCOM22prepareCommandBitsWireEh>:
  return sercom->I2CS.CTRLA.bit.MODE == I2C_MASTER_OPERATION;
    2950:	6803      	ldr	r3, [r0, #0]
{
    2952:	b510      	push	{r4, lr}
  return sercom->I2CS.CTRLA.bit.MODE == I2C_MASTER_OPERATION;
    2954:	6818      	ldr	r0, [r3, #0]
    2956:	2203      	movs	r2, #3
    2958:	06c0      	lsls	r0, r0, #27
    295a:	0f40      	lsrs	r0, r0, #29
    295c:	4c09      	ldr	r4, [pc, #36]	; (2984 <_ZN6SERCOM22prepareCommandBitsWireEh+0x34>)
  if(isMasterWIRE()) {
    295e:	2805      	cmp	r0, #5
    2960:	d109      	bne.n	2976 <_ZN6SERCOM22prepareCommandBitsWireEh+0x26>
    sercom->I2CM.CTRLB.bit.CMD = cmd;
    2962:	6858      	ldr	r0, [r3, #4]
    2964:	4011      	ands	r1, r2
    2966:	0409      	lsls	r1, r1, #16
    2968:	4020      	ands	r0, r4
    296a:	4301      	orrs	r1, r0
    296c:	6059      	str	r1, [r3, #4]
    while(sercom->I2CM.SYNCBUSY.bit.SYSOP)
    296e:	69da      	ldr	r2, [r3, #28]
    2970:	0752      	lsls	r2, r2, #29
    2972:	d4fc      	bmi.n	296e <_ZN6SERCOM22prepareCommandBitsWireEh+0x1e>
}
    2974:	bd10      	pop	{r4, pc}
    sercom->I2CS.CTRLB.bit.CMD = cmd;
    2976:	6858      	ldr	r0, [r3, #4]
    2978:	4011      	ands	r1, r2
    297a:	0409      	lsls	r1, r1, #16
    297c:	4020      	ands	r0, r4
    297e:	4301      	orrs	r1, r0
    2980:	6059      	str	r1, [r3, #4]
}
    2982:	e7f7      	b.n	2974 <_ZN6SERCOM22prepareCommandBitsWireEh+0x24>
    2984:	fffcffff 	.word	0xfffcffff

00002988 <_ZN6SERCOM21startTransmissionWIREEh23SercomWireReadWriteFlag>:
{
    2988:	b570      	push	{r4, r5, r6, lr}
  return sercom->I2CM.STATUS.bit.BUSSTATE == WIRE_IDLE_STATE;
}

bool SERCOM::isBusOwnerWIRE( void )
{
  return sercom->I2CM.STATUS.bit.BUSSTATE == WIRE_OWNER_STATE;
    298a:	6803      	ldr	r3, [r0, #0]
{
    298c:	0004      	movs	r4, r0
  return sercom->I2CM.STATUS.bit.BUSSTATE == WIRE_OWNER_STATE;
    298e:	8b58      	ldrh	r0, [r3, #26]
    2990:	0680      	lsls	r0, r0, #26
    2992:	0f80      	lsrs	r0, r0, #30
  if(!isBusOwnerWIRE())
    2994:	2802      	cmp	r0, #2
    2996:	d00e      	beq.n	29b6 <_ZN6SERCOM21startTransmissionWIREEh23SercomWireReadWriteFlag+0x2e>
  return sercom->I2CM.STATUS.bit.ARBLOST == 1;
}

bool SERCOM::isBusBusyWIRE( void )
{
  return sercom->I2CM.STATUS.bit.BUSSTATE == WIRE_BUSY_STATE;
    2998:	8b5d      	ldrh	r5, [r3, #26]
      return false;
    299a:	2000      	movs	r0, #0
  return sercom->I2CM.STATUS.bit.BUSSTATE == WIRE_BUSY_STATE;
    299c:	06ad      	lsls	r5, r5, #26
    299e:	0fad      	lsrs	r5, r5, #30
    if( isBusBusyWIRE() || (isArbLostWIRE() && !isBusIdleWIRE()) )
    29a0:	2d03      	cmp	r5, #3
    29a2:	d032      	beq.n	2a0a <_ZN6SERCOM21startTransmissionWIREEh23SercomWireReadWriteFlag+0x82>
  return sercom->I2CM.STATUS.bit.ARBLOST == 1;
    29a4:	8b58      	ldrh	r0, [r3, #26]
    if( isBusBusyWIRE() || (isArbLostWIRE() && !isBusIdleWIRE()) )
    29a6:	0780      	lsls	r0, r0, #30
    29a8:	d505      	bpl.n	29b6 <_ZN6SERCOM21startTransmissionWIREEh23SercomWireReadWriteFlag+0x2e>
  return sercom->I2CM.STATUS.bit.BUSSTATE == WIRE_IDLE_STATE;
    29aa:	8b5d      	ldrh	r5, [r3, #26]
      return false;
    29ac:	2000      	movs	r0, #0
  return sercom->I2CM.STATUS.bit.BUSSTATE == WIRE_IDLE_STATE;
    29ae:	06ad      	lsls	r5, r5, #26
    29b0:	0fad      	lsrs	r5, r5, #30
    if( isBusBusyWIRE() || (isArbLostWIRE() && !isBusIdleWIRE()) )
    29b2:	2d01      	cmp	r5, #1
    29b4:	d129      	bne.n	2a0a <_ZN6SERCOM21startTransmissionWIREEh23SercomWireReadWriteFlag+0x82>
  sercom->I2CM.ADDR.bit.ADDR = address;
    29b6:	6a58      	ldr	r0, [r3, #36]	; 0x24
  address = (address << 0x1ul) | flag;
    29b8:	0049      	lsls	r1, r1, #1
    29ba:	4311      	orrs	r1, r2
  sercom->I2CM.ADDR.bit.ADDR = address;
    29bc:	0ac0      	lsrs	r0, r0, #11
  address = (address << 0x1ul) | flag;
    29be:	b2c9      	uxtb	r1, r1
  sercom->I2CM.ADDR.bit.ADDR = address;
    29c0:	02c0      	lsls	r0, r0, #11
    29c2:	4308      	orrs	r0, r1
    29c4:	6258      	str	r0, [r3, #36]	; 0x24
  if ( flag == WIRE_WRITE_FLAG ) // Write mode
    29c6:	2a00      	cmp	r2, #0
    29c8:	d113      	bne.n	29f2 <_ZN6SERCOM21startTransmissionWIREEh23SercomWireReadWriteFlag+0x6a>
    while( !sercom->I2CM.INTFLAG.bit.MB )
    29ca:	7e1a      	ldrb	r2, [r3, #24]
    29cc:	07d2      	lsls	r2, r2, #31
    29ce:	d5fc      	bpl.n	29ca <_ZN6SERCOM21startTransmissionWIREEh23SercomWireReadWriteFlag+0x42>
  return sercom->I2CM.STATUS.bit.BUSSTATE == WIRE_OWNER_STATE;
    29d0:	8b5b      	ldrh	r3, [r3, #26]
    29d2:	069b      	lsls	r3, r3, #26
    29d4:	0f9b      	lsrs	r3, r3, #30
    if(!isBusOwnerWIRE())
    29d6:	2b02      	cmp	r3, #2
    29d8:	d004      	beq.n	29e4 <_ZN6SERCOM21startTransmissionWIREEh23SercomWireReadWriteFlag+0x5c>
      startTransmissionWIRE(address >> 1, flag);
    29da:	0849      	lsrs	r1, r1, #1
    29dc:	2200      	movs	r2, #0
    29de:	0020      	movs	r0, r4
    29e0:	f7ff ffd2 	bl	2988 <_ZN6SERCOM21startTransmissionWIREEh23SercomWireReadWriteFlag>
  if(sercom->I2CM.STATUS.bit.RXNACK)
    29e4:	6823      	ldr	r3, [r4, #0]
    29e6:	8b58      	ldrh	r0, [r3, #26]
    29e8:	0740      	lsls	r0, r0, #29
    29ea:	0fc3      	lsrs	r3, r0, #31
    29ec:	2001      	movs	r0, #1
    29ee:	4058      	eors	r0, r3
    29f0:	e00b      	b.n	2a0a <_ZN6SERCOM21startTransmissionWIREEh23SercomWireReadWriteFlag+0x82>
    while( !sercom->I2CM.INTFLAG.bit.SB )
    29f2:	7e18      	ldrb	r0, [r3, #24]
    29f4:	0780      	lsls	r0, r0, #30
    29f6:	0fc0      	lsrs	r0, r0, #31
    29f8:	d1f4      	bne.n	29e4 <_ZN6SERCOM21startTransmissionWIREEh23SercomWireReadWriteFlag+0x5c>
        if (sercom->I2CM.INTFLAG.bit.MB) {
    29fa:	7e1a      	ldrb	r2, [r3, #24]
    29fc:	07d2      	lsls	r2, r2, #31
    29fe:	d5f8      	bpl.n	29f2 <_ZN6SERCOM21startTransmissionWIREEh23SercomWireReadWriteFlag+0x6a>
            sercom->I2CM.CTRLB.bit.CMD = 3; // Stop condition
    2a00:	22c0      	movs	r2, #192	; 0xc0
    2a02:	6859      	ldr	r1, [r3, #4]
    2a04:	0292      	lsls	r2, r2, #10
    2a06:	430a      	orrs	r2, r1
    2a08:	605a      	str	r2, [r3, #4]
}
    2a0a:	bd70      	pop	{r4, r5, r6, pc}

00002a0c <_ZN6SERCOM18sendDataMasterWIREEh>:
  sercom->I2CM.DATA.bit.DATA = data;
    2a0c:	6803      	ldr	r3, [r0, #0]
    2a0e:	001a      	movs	r2, r3
    2a10:	3228      	adds	r2, #40	; 0x28
    2a12:	7011      	strb	r1, [r2, #0]
  while(!sercom->I2CM.INTFLAG.bit.MB) {
    2a14:	7e18      	ldrb	r0, [r3, #24]
    2a16:	07c0      	lsls	r0, r0, #31
    2a18:	0fc0      	lsrs	r0, r0, #31
    2a1a:	d103      	bne.n	2a24 <_ZN6SERCOM18sendDataMasterWIREEh+0x18>
    if (sercom->I2CM.STATUS.bit.BUSERR) {
    2a1c:	8b5a      	ldrh	r2, [r3, #26]
    2a1e:	07d2      	lsls	r2, r2, #31
    2a20:	d5f8      	bpl.n	2a14 <_ZN6SERCOM18sendDataMasterWIREEh+0x8>
}
    2a22:	4770      	bx	lr
  if(sercom->I2CM.STATUS.bit.RXNACK)
    2a24:	8b58      	ldrh	r0, [r3, #26]
    2a26:	0740      	lsls	r0, r0, #29
    2a28:	0fc3      	lsrs	r3, r0, #31
    2a2a:	2001      	movs	r0, #1
    2a2c:	4058      	eors	r0, r3
    2a2e:	e7f8      	b.n	2a22 <_ZN6SERCOM18sendDataMasterWIREEh+0x16>

00002a30 <_ZN6SERCOM17sendDataSlaveWIREEh>:
  sercom->I2CS.DATA.bit.DATA = data;
    2a30:	6803      	ldr	r3, [r0, #0]
    return false;
    2a32:	2000      	movs	r0, #0
  sercom->I2CS.DATA.bit.DATA = data;
    2a34:	001a      	movs	r2, r3
    2a36:	3228      	adds	r2, #40	; 0x28
    2a38:	7011      	strb	r1, [r2, #0]
  if(!sercom->I2CS.INTFLAG.bit.DRDY || sercom->I2CS.STATUS.bit.RXNACK)
    2a3a:	7e1a      	ldrb	r2, [r3, #24]
    2a3c:	0752      	lsls	r2, r2, #29
    2a3e:	d504      	bpl.n	2a4a <_ZN6SERCOM17sendDataSlaveWIREEh+0x1a>
    2a40:	8b58      	ldrh	r0, [r3, #26]
    2a42:	2301      	movs	r3, #1
    2a44:	0740      	lsls	r0, r0, #29
    2a46:	0fc0      	lsrs	r0, r0, #31
    2a48:	4058      	eors	r0, r3
}
    2a4a:	4770      	bx	lr

00002a4c <_ZN6SERCOM11isSlaveWIREEv>:
  return sercom->I2CS.CTRLA.bit.MODE == I2C_SLAVE_OPERATION;
    2a4c:	6803      	ldr	r3, [r0, #0]
    2a4e:	6818      	ldr	r0, [r3, #0]
    2a50:	06c0      	lsls	r0, r0, #27
    2a52:	0f40      	lsrs	r0, r0, #29
    2a54:	3804      	subs	r0, #4
    2a56:	4243      	negs	r3, r0
    2a58:	4158      	adcs	r0, r3
    2a5a:	b2c0      	uxtb	r0, r0
}
    2a5c:	4770      	bx	lr

00002a5e <_ZN6SERCOM14isBusOwnerWIREEv>:
  return sercom->I2CM.STATUS.bit.BUSSTATE == WIRE_OWNER_STATE;
    2a5e:	6803      	ldr	r3, [r0, #0]
    2a60:	8b58      	ldrh	r0, [r3, #26]
    2a62:	0680      	lsls	r0, r0, #26
    2a64:	0f80      	lsrs	r0, r0, #30
    2a66:	3802      	subs	r0, #2
    2a68:	4243      	negs	r3, r0
    2a6a:	4158      	adcs	r0, r3
    2a6c:	b2c0      	uxtb	r0, r0
}
    2a6e:	4770      	bx	lr

00002a70 <_ZN6SERCOM15isDataReadyWIREEv>:
}

bool SERCOM::isDataReadyWIRE( void )
{
  return sercom->I2CS.INTFLAG.bit.DRDY;
    2a70:	6803      	ldr	r3, [r0, #0]
    2a72:	7e18      	ldrb	r0, [r3, #24]
    2a74:	0740      	lsls	r0, r0, #29
    2a76:	0fc0      	lsrs	r0, r0, #31
}
    2a78:	4770      	bx	lr

00002a7a <_ZN6SERCOM18isStopDetectedWIREEv>:

bool SERCOM::isStopDetectedWIRE( void )
{
  return sercom->I2CS.INTFLAG.bit.PREC;
    2a7a:	6803      	ldr	r3, [r0, #0]
    2a7c:	7e18      	ldrb	r0, [r3, #24]
    2a7e:	07c0      	lsls	r0, r0, #31
    2a80:	0fc0      	lsrs	r0, r0, #31
}
    2a82:	4770      	bx	lr

00002a84 <_ZN6SERCOM21isRestartDetectedWIREEv>:

bool SERCOM::isRestartDetectedWIRE( void )
{
  return sercom->I2CS.STATUS.bit.SR;
    2a84:	6803      	ldr	r3, [r0, #0]
    2a86:	8b58      	ldrh	r0, [r3, #26]
    2a88:	06c0      	lsls	r0, r0, #27
    2a8a:	0fc0      	lsrs	r0, r0, #31
}
    2a8c:	4770      	bx	lr

00002a8e <_ZN6SERCOM14isAddressMatchEv>:

bool SERCOM::isAddressMatch( void )
{
  return sercom->I2CS.INTFLAG.bit.AMATCH;
    2a8e:	6803      	ldr	r3, [r0, #0]
    2a90:	7e18      	ldrb	r0, [r3, #24]
    2a92:	0780      	lsls	r0, r0, #30
    2a94:	0fc0      	lsrs	r0, r0, #31
}
    2a96:	4770      	bx	lr

00002a98 <_ZN6SERCOM25isMasterReadOperationWIREEv>:

bool SERCOM::isMasterReadOperationWIRE( void )
{
  return sercom->I2CS.STATUS.bit.DIR;
    2a98:	6803      	ldr	r3, [r0, #0]
    2a9a:	8b58      	ldrh	r0, [r3, #26]
    2a9c:	0700      	lsls	r0, r0, #28
    2a9e:	0fc0      	lsrs	r0, r0, #31
}
    2aa0:	4770      	bx	lr

00002aa2 <_ZN6SERCOM12readDataWIREEv>:
  return sercom->I2CS.CTRLA.bit.MODE == I2C_MASTER_OPERATION;
    2aa2:	6803      	ldr	r3, [r0, #0]
    2aa4:	681a      	ldr	r2, [r3, #0]
    2aa6:	06d2      	lsls	r2, r2, #27
    2aa8:	0f52      	lsrs	r2, r2, #29
    return sercom->I2CS.INTFLAG.bit.DRDY;
}

uint8_t SERCOM::readDataWIRE( void )
{
  if(isMasterWIRE())
    2aaa:	2a05      	cmp	r2, #5
    2aac:	d105      	bne.n	2aba <_ZN6SERCOM12readDataWIREEv+0x18>
  {
    while( sercom->I2CM.INTFLAG.bit.SB == 0 && sercom->I2CM.INTFLAG.bit.MB == 0 )
    2aae:	7e1a      	ldrb	r2, [r3, #24]
    2ab0:	0792      	lsls	r2, r2, #30
    2ab2:	d402      	bmi.n	2aba <_ZN6SERCOM12readDataWIREEv+0x18>
    2ab4:	7e1a      	ldrb	r2, [r3, #24]
    2ab6:	07d2      	lsls	r2, r2, #31
    2ab8:	d5f9      	bpl.n	2aae <_ZN6SERCOM12readDataWIREEv+0xc>
    {
      // Waiting complete receive
    }

    return sercom->I2CM.DATA.bit.DATA ;
    2aba:	3328      	adds	r3, #40	; 0x28
    2abc:	7818      	ldrb	r0, [r3, #0]
    2abe:	b2c0      	uxtb	r0, r0
  }
  else
  {
    return sercom->I2CS.DATA.reg ;
  }
}
    2ac0:	4770      	bx	lr
	...

00002ac4 <_ZN6SERCOM13initClockNVICEv>:
void SERCOM::initClockNVIC( void )
{
  uint8_t clockId = 0;
  IRQn_Type IdNvic=PendSV_IRQn ; // Dummy init to intercept potential error later

  if(sercom == SERCOM0)
    2ac4:	6803      	ldr	r3, [r0, #0]
    2ac6:	4a21      	ldr	r2, [pc, #132]	; (2b4c <_ZN6SERCOM13initClockNVICEv+0x88>)
{
    2ac8:	b530      	push	{r4, r5, lr}
  if(sercom == SERCOM0)
    2aca:	4293      	cmp	r3, r2
    2acc:	d011      	beq.n	2af2 <_ZN6SERCOM13initClockNVICEv+0x2e>
  {
    clockId = GCM_SERCOM0_CORE;
    IdNvic = SERCOM0_IRQn;
  }
  else if(sercom == SERCOM1)
    2ace:	4a20      	ldr	r2, [pc, #128]	; (2b50 <_ZN6SERCOM13initClockNVICEv+0x8c>)
    2ad0:	4293      	cmp	r3, r2
    2ad2:	d02f      	beq.n	2b34 <_ZN6SERCOM13initClockNVICEv+0x70>
  {
    clockId = GCM_SERCOM1_CORE;
    IdNvic = SERCOM1_IRQn;
  }
  else if(sercom == SERCOM2)
    2ad4:	4a1f      	ldr	r2, [pc, #124]	; (2b54 <_ZN6SERCOM13initClockNVICEv+0x90>)
    2ad6:	4293      	cmp	r3, r2
    2ad8:	d02f      	beq.n	2b3a <_ZN6SERCOM13initClockNVICEv+0x76>
  {
    clockId = GCM_SERCOM2_CORE;
    IdNvic = SERCOM2_IRQn;
  }
  else if(sercom == SERCOM3)
    2ada:	4a1f      	ldr	r2, [pc, #124]	; (2b58 <_ZN6SERCOM13initClockNVICEv+0x94>)
    2adc:	4293      	cmp	r3, r2
    2ade:	d02f      	beq.n	2b40 <_ZN6SERCOM13initClockNVICEv+0x7c>
  {
    clockId = GCM_SERCOM3_CORE;
    IdNvic = SERCOM3_IRQn;
  }
  #if defined(SERCOM4)
  else if(sercom == SERCOM4)
    2ae0:	4a1e      	ldr	r2, [pc, #120]	; (2b5c <_ZN6SERCOM13initClockNVICEv+0x98>)
    2ae2:	4293      	cmp	r3, r2
    2ae4:	d02f      	beq.n	2b46 <_ZN6SERCOM13initClockNVICEv+0x82>
    clockId = GCM_SERCOM4_CORE;
    IdNvic = SERCOM4_IRQn;
  }
  #endif // SERCOM4
  #if defined(SERCOM5)
  else if(sercom == SERCOM5)
    2ae6:	4a1e      	ldr	r2, [pc, #120]	; (2b60 <_ZN6SERCOM13initClockNVICEv+0x9c>)
    2ae8:	4293      	cmp	r3, r2
    2aea:	d122      	bne.n	2b32 <_ZN6SERCOM13initClockNVICEv+0x6e>
  {
    clockId = GCM_SERCOM5_CORE;
    IdNvic = SERCOM5_IRQn;
    2aec:	230e      	movs	r3, #14
    clockId = GCM_SERCOM5_CORE;
    2aee:	2219      	movs	r2, #25
    2af0:	e001      	b.n	2af6 <_ZN6SERCOM13initClockNVICEv+0x32>
    IdNvic = SERCOM0_IRQn;
    2af2:	2309      	movs	r3, #9
    clockId = GCM_SERCOM0_CORE;
    2af4:	2214      	movs	r2, #20
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2af6:	2101      	movs	r1, #1
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    2af8:	2503      	movs	r5, #3
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2afa:	4099      	lsls	r1, r3
    2afc:	4819      	ldr	r0, [pc, #100]	; (2b64 <_ZN6SERCOM13initClockNVICEv+0xa0>)
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    2afe:	24c0      	movs	r4, #192	; 0xc0
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2b00:	6001      	str	r1, [r0, #0]
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    2b02:	0899      	lsrs	r1, r3, #2
    2b04:	402b      	ands	r3, r5
    2b06:	40ab      	lsls	r3, r5
    2b08:	35fc      	adds	r5, #252	; 0xfc
    2b0a:	409d      	lsls	r5, r3
    2b0c:	0089      	lsls	r1, r1, #2
    2b0e:	1809      	adds	r1, r1, r0
    2b10:	00a4      	lsls	r4, r4, #2
    2b12:	5908      	ldr	r0, [r1, r4]
    2b14:	43a8      	bics	r0, r5
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
    2b16:	25c0      	movs	r5, #192	; 0xc0
    2b18:	409d      	lsls	r5, r3
    2b1a:	002b      	movs	r3, r5
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    2b1c:	4303      	orrs	r3, r0
    2b1e:	510b      	str	r3, [r1, r4]
  NVIC_EnableIRQ(IdNvic);
  NVIC_SetPriority (IdNvic, SERCOM_NVIC_PRIORITY);  /* set Priority */

  //Setting clock
  GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID( clockId ) | // Generic Clock 0 (SERCOMx)
                      GCLK_CLKCTRL_GEN_GCLK0 | // Generic Clock Generator 0 is source
    2b20:	2380      	movs	r3, #128	; 0x80
    2b22:	01db      	lsls	r3, r3, #7
    2b24:	431a      	orrs	r2, r3
  GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID( clockId ) | // Generic Clock 0 (SERCOMx)
    2b26:	4b10      	ldr	r3, [pc, #64]	; (2b68 <_ZN6SERCOM13initClockNVICEv+0xa4>)
    2b28:	805a      	strh	r2, [r3, #2]
                      GCLK_CLKCTRL_CLKEN ;

  while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY )
    2b2a:	785a      	ldrb	r2, [r3, #1]
    2b2c:	b252      	sxtb	r2, r2
    2b2e:	2a00      	cmp	r2, #0
    2b30:	dbfb      	blt.n	2b2a <_ZN6SERCOM13initClockNVICEv+0x66>
  {
    /* Wait for synchronization */
  }
}
    2b32:	bd30      	pop	{r4, r5, pc}
    IdNvic = SERCOM1_IRQn;
    2b34:	230a      	movs	r3, #10
    clockId = GCM_SERCOM1_CORE;
    2b36:	2215      	movs	r2, #21
    2b38:	e7dd      	b.n	2af6 <_ZN6SERCOM13initClockNVICEv+0x32>
    IdNvic = SERCOM2_IRQn;
    2b3a:	230b      	movs	r3, #11
    clockId = GCM_SERCOM2_CORE;
    2b3c:	2216      	movs	r2, #22
    2b3e:	e7da      	b.n	2af6 <_ZN6SERCOM13initClockNVICEv+0x32>
    IdNvic = SERCOM3_IRQn;
    2b40:	230c      	movs	r3, #12
    clockId = GCM_SERCOM3_CORE;
    2b42:	2217      	movs	r2, #23
    2b44:	e7d7      	b.n	2af6 <_ZN6SERCOM13initClockNVICEv+0x32>
    IdNvic = SERCOM4_IRQn;
    2b46:	230d      	movs	r3, #13
    clockId = GCM_SERCOM4_CORE;
    2b48:	2218      	movs	r2, #24
    2b4a:	e7d4      	b.n	2af6 <_ZN6SERCOM13initClockNVICEv+0x32>
    2b4c:	42000800 	.word	0x42000800
    2b50:	42000c00 	.word	0x42000c00
    2b54:	42001000 	.word	0x42001000
    2b58:	42001400 	.word	0x42001400
    2b5c:	42001800 	.word	0x42001800
    2b60:	42001c00 	.word	0x42001c00
    2b64:	e000e100 	.word	0xe000e100
    2b68:	40000c00 	.word	0x40000c00

00002b6c <_ZN6SERCOM8initUARTE14SercomUartMode20SercomUartSampleRatem>:
{
    2b6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2b6e:	0004      	movs	r4, r0
    2b70:	0016      	movs	r6, r2
    2b72:	000f      	movs	r7, r1
    2b74:	001d      	movs	r5, r3
  initClockNVIC();
    2b76:	f7ff ffa5 	bl	2ac4 <_ZN6SERCOM13initClockNVICEv>
  resetUART();
    2b7a:	0020      	movs	r0, r4
    2b7c:	f7ff fe62 	bl	2844 <_ZN6SERCOM9resetUARTEv>
  sercom->USART.CTRLA.reg =	SERCOM_USART_CTRLA_MODE(mode) |
    2b80:	221c      	movs	r2, #28
    2b82:	00bb      	lsls	r3, r7, #2
    2b84:	4013      	ands	r3, r2
                SERCOM_USART_CTRLA_SAMPR(sampleRate);
    2b86:	0772      	lsls	r2, r6, #29
  sercom->USART.CTRLA.reg =	SERCOM_USART_CTRLA_MODE(mode) |
    2b88:	6824      	ldr	r4, [r4, #0]
                SERCOM_USART_CTRLA_SAMPR(sampleRate);
    2b8a:	0c12      	lsrs	r2, r2, #16
  sercom->USART.CTRLA.reg =	SERCOM_USART_CTRLA_MODE(mode) |
    2b8c:	4313      	orrs	r3, r2
    2b8e:	6023      	str	r3, [r4, #0]
  sercom->USART.INTENSET.reg =	SERCOM_USART_INTENSET_RXC |  //Received complete
    2b90:	2384      	movs	r3, #132	; 0x84
    2b92:	75a3      	strb	r3, [r4, #22]
  if ( mode == UART_INT_CLOCK )
    2b94:	2f01      	cmp	r7, #1
    2b96:	d118      	bne.n	2bca <_ZN6SERCOM8initUARTE14SercomUartMode20SercomUartSampleRatem+0x5e>
      sampleRateValue = 16;
    2b98:	2110      	movs	r1, #16
    if (sampleRate == SAMPLE_RATE_x16) {
    2b9a:	2e01      	cmp	r6, #1
    2b9c:	d000      	beq.n	2ba0 <_ZN6SERCOM8initUARTE14SercomUartMode20SercomUartSampleRatem+0x34>
      sampleRateValue = 8;
    2b9e:	3908      	subs	r1, #8
    uint32_t baudTimes8 = (SystemCoreClock * 8) / (sampleRateValue * baudrate);
    2ba0:	4b0a      	ldr	r3, [pc, #40]	; (2bcc <_ZN6SERCOM8initUARTE14SercomUartMode20SercomUartSampleRatem+0x60>)
    2ba2:	4369      	muls	r1, r5
    2ba4:	6818      	ldr	r0, [r3, #0]
    2ba6:	00c0      	lsls	r0, r0, #3
    2ba8:	f000 fa6e 	bl	3088 <__udivsi3>
    sercom->USART.BAUD.FRAC.FP   = (baudTimes8 % 8);
    2bac:	2207      	movs	r2, #7
    2bae:	89a3      	ldrh	r3, [r4, #12]
    2bb0:	4002      	ands	r2, r0
    2bb2:	04db      	lsls	r3, r3, #19
    2bb4:	0352      	lsls	r2, r2, #13
    2bb6:	0cdb      	lsrs	r3, r3, #19
    2bb8:	4313      	orrs	r3, r2
    2bba:	81a3      	strh	r3, [r4, #12]
    sercom->USART.BAUD.FRAC.BAUD = (baudTimes8 / 8);
    2bbc:	0403      	lsls	r3, r0, #16
    2bbe:	89a0      	ldrh	r0, [r4, #12]
    2bc0:	0cdb      	lsrs	r3, r3, #19
    2bc2:	0b40      	lsrs	r0, r0, #13
    2bc4:	0340      	lsls	r0, r0, #13
    2bc6:	4318      	orrs	r0, r3
    2bc8:	81a0      	strh	r0, [r4, #12]
}
    2bca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2bcc:	20000014 	.word	0x20000014

00002bd0 <_ZN6SERCOM14initMasterWIREEm>:
{
    2bd0:	b570      	push	{r4, r5, r6, lr}
    2bd2:	0005      	movs	r5, r0
    2bd4:	000c      	movs	r4, r1
  initClockNVIC() ;
    2bd6:	f7ff ff75 	bl	2ac4 <_ZN6SERCOM13initClockNVICEv>
  resetWIRE() ;
    2bda:	0028      	movs	r0, r5
    2bdc:	f7ff fe87 	bl	28ee <_ZN6SERCOM9resetWIREEv>
  sercom->I2CM.CTRLA.reg =  SERCOM_I2CM_CTRLA_MODE( I2C_MASTER_OPERATION )/* |
    2be0:	2314      	movs	r3, #20
    2be2:	682d      	ldr	r5, [r5, #0]
  sercom->I2CM.BAUD.bit.BAUD = SystemCoreClock / ( 2 * baudrate) - 5 - (((SystemCoreClock / 1000000) * WIRE_RISE_TIME_NANOSECONDS) / (2 * 1000));
    2be4:	0061      	lsls	r1, r4, #1
  sercom->I2CM.CTRLA.reg =  SERCOM_I2CM_CTRLA_MODE( I2C_MASTER_OPERATION )/* |
    2be6:	602b      	str	r3, [r5, #0]
  sercom->I2CM.BAUD.bit.BAUD = SystemCoreClock / ( 2 * baudrate) - 5 - (((SystemCoreClock / 1000000) * WIRE_RISE_TIME_NANOSECONDS) / (2 * 1000));
    2be8:	4b0c      	ldr	r3, [pc, #48]	; (2c1c <_ZN6SERCOM14initMasterWIREEm+0x4c>)
    2bea:	681e      	ldr	r6, [r3, #0]
    2bec:	0030      	movs	r0, r6
    2bee:	f000 fa4b 	bl	3088 <__udivsi3>
    2bf2:	490b      	ldr	r1, [pc, #44]	; (2c20 <_ZN6SERCOM14initMasterWIREEm+0x50>)
    2bf4:	0004      	movs	r4, r0
    2bf6:	0030      	movs	r0, r6
    2bf8:	f000 fa46 	bl	3088 <__udivsi3>
    2bfc:	237d      	movs	r3, #125	; 0x7d
    2bfe:	21fa      	movs	r1, #250	; 0xfa
    2c00:	4358      	muls	r0, r3
    2c02:	00c9      	lsls	r1, r1, #3
    2c04:	f000 fa40 	bl	3088 <__udivsi3>
    2c08:	23ff      	movs	r3, #255	; 0xff
    2c0a:	1a24      	subs	r4, r4, r0
    2c0c:	68e8      	ldr	r0, [r5, #12]
    2c0e:	3c05      	subs	r4, #5
    2c10:	401c      	ands	r4, r3
    2c12:	4398      	bics	r0, r3
    2c14:	4304      	orrs	r4, r0
    2c16:	60ec      	str	r4, [r5, #12]
}
    2c18:	bd70      	pop	{r4, r5, r6, pc}
    2c1a:	46c0      	nop			; (mov r8, r8)
    2c1c:	20000014 	.word	0x20000014
    2c20:	000f4240 	.word	0x000f4240

00002c24 <_ZN4UartcvbEv>:
    size_t write(const uint8_t data);
    using Print::write; // pull in write(str) and write(buf, size) from Print

    void IrqHandler();

    operator bool() { return true; }
    2c24:	2001      	movs	r0, #1
    2c26:	4770      	bx	lr

00002c28 <_ZN4Uart5beginEm>:
  uc_pinRTS = _pinRTS;
  uc_pinCTS = _pinCTS;
}

void Uart::begin(unsigned long baudrate)
{
    2c28:	b510      	push	{r4, lr}
  begin(baudrate, SERIAL_8N1);
    2c2a:	6803      	ldr	r3, [r0, #0]
    2c2c:	4a01      	ldr	r2, [pc, #4]	; (2c34 <_ZN4Uart5beginEm+0xc>)
    2c2e:	6a1b      	ldr	r3, [r3, #32]
    2c30:	4798      	blx	r3
}
    2c32:	bd10      	pop	{r4, pc}
    2c34:	00000413 	.word	0x00000413

00002c38 <_ZN4Uart4peekEv>:
  if(_iTail == _iHead)
    2c38:	0003      	movs	r3, r0
    2c3a:	33fc      	adds	r3, #252	; 0xfc
    2c3c:	69d9      	ldr	r1, [r3, #28]
    2c3e:	699a      	ldr	r2, [r3, #24]
    2c40:	4291      	cmp	r1, r2
    2c42:	d003      	beq.n	2c4c <_ZN4Uart4peekEv+0x14>
  return _aucBuffer[_iTail];
    2c44:	69db      	ldr	r3, [r3, #28]
    2c46:	18c0      	adds	r0, r0, r3
    2c48:	7d00      	ldrb	r0, [r0, #20]
}

int Uart::peek()
{
  return rxBuffer.peek();
}
    2c4a:	4770      	bx	lr
    return -1;
    2c4c:	2001      	movs	r0, #1
    2c4e:	4240      	negs	r0, r0
  return rxBuffer.peek();
    2c50:	e7fb      	b.n	2c4a <_ZN4Uart4peekEv+0x12>

00002c52 <_ZN4Uart3endEv>:
{
    2c52:	b510      	push	{r4, lr}
    2c54:	0004      	movs	r4, r0
  sercom->resetUART();
    2c56:	6900      	ldr	r0, [r0, #16]
    2c58:	f7ff fdf4 	bl	2844 <_ZN6SERCOM9resetUARTEv>
  _iHead = 0;
    2c5c:	0022      	movs	r2, r4
    2c5e:	2300      	movs	r3, #0
    2c60:	32fc      	adds	r2, #252	; 0xfc
    2c62:	6193      	str	r3, [r2, #24]
  _iTail = 0;
    2c64:	61d3      	str	r3, [r2, #28]
  _iHead = 0;
    2c66:	2286      	movs	r2, #134	; 0x86
    2c68:	0092      	lsls	r2, r2, #2
    2c6a:	18a4      	adds	r4, r4, r2
    2c6c:	6063      	str	r3, [r4, #4]
  _iTail = 0;
    2c6e:	60a3      	str	r3, [r4, #8]
}
    2c70:	bd10      	pop	{r4, pc}

00002c72 <_ZN4Uart16extractNbStopBitEt>:
  return 1;
}

SercomNumberStopBit Uart::extractNbStopBit(uint16_t config)
{
  switch(config & HARDSER_STOP_BIT_MASK)
    2c72:	20f0      	movs	r0, #240	; 0xf0
    2c74:	4001      	ands	r1, r0
  {
    case HARDSER_STOP_BIT_1:
    default:
      return SERCOM_STOP_BIT_1;
    2c76:	3930      	subs	r1, #48	; 0x30
    2c78:	4248      	negs	r0, r1
    2c7a:	4148      	adcs	r0, r1

    case HARDSER_STOP_BIT_2:
      return SERCOM_STOP_BITS_2;
  }
}
    2c7c:	4770      	bx	lr

00002c7e <_ZN4Uart15extractCharSizeEt>:

SercomUartCharSize Uart::extractCharSize(uint16_t config)
{
  switch(config & HARDSER_DATA_MASK)
    2c7e:	23f0      	movs	r3, #240	; 0xf0
    2c80:	011b      	lsls	r3, r3, #4
    2c82:	4019      	ands	r1, r3
    2c84:	2380      	movs	r3, #128	; 0x80
  {
    case HARDSER_DATA_5:
      return UART_CHAR_SIZE_5_BITS;

    case HARDSER_DATA_6:
      return UART_CHAR_SIZE_6_BITS;
    2c86:	2006      	movs	r0, #6
  switch(config & HARDSER_DATA_MASK)
    2c88:	009b      	lsls	r3, r3, #2
    2c8a:	4299      	cmp	r1, r3
    2c8c:	d00a      	beq.n	2ca4 <_ZN4Uart15extractCharSizeEt+0x26>
    2c8e:	3301      	adds	r3, #1
    2c90:	33ff      	adds	r3, #255	; 0xff

    case HARDSER_DATA_7:
      return UART_CHAR_SIZE_7_BITS;
    2c92:	3001      	adds	r0, #1
  switch(config & HARDSER_DATA_MASK)
    2c94:	4299      	cmp	r1, r3
    2c96:	d005      	beq.n	2ca4 <_ZN4Uart15extractCharSizeEt+0x26>
    2c98:	2380      	movs	r3, #128	; 0x80
      return UART_CHAR_SIZE_5_BITS;
    2c9a:	3802      	subs	r0, #2
  switch(config & HARDSER_DATA_MASK)
    2c9c:	005b      	lsls	r3, r3, #1
    2c9e:	4299      	cmp	r1, r3
    2ca0:	d000      	beq.n	2ca4 <_ZN4Uart15extractCharSizeEt+0x26>

    case HARDSER_DATA_8:
    default:
      return UART_CHAR_SIZE_8_BITS;
    2ca2:	2000      	movs	r0, #0

  }
}
    2ca4:	4770      	bx	lr

00002ca6 <_ZN4Uart13extractParityEt>:

SercomParityMode Uart::extractParity(uint16_t config)
{
  switch(config & HARDSER_PARITY_MASK)
    2ca6:	200f      	movs	r0, #15
    2ca8:	4001      	ands	r1, r0
    case HARDSER_PARITY_NONE:
    default:
      return SERCOM_NO_PARITY;

    case HARDSER_PARITY_EVEN:
      return SERCOM_EVEN_PARITY;
    2caa:	2000      	movs	r0, #0
  switch(config & HARDSER_PARITY_MASK)
    2cac:	2901      	cmp	r1, #1
    2cae:	d003      	beq.n	2cb8 <_ZN4Uart13extractParityEt+0x12>
      return SERCOM_NO_PARITY;
    2cb0:	3902      	subs	r1, #2
    2cb2:	1e48      	subs	r0, r1, #1
    2cb4:	4181      	sbcs	r1, r0
    2cb6:	1c48      	adds	r0, r1, #1

    case HARDSER_PARITY_ODD:
      return SERCOM_ODD_PARITY;
  }
}
    2cb8:	4770      	bx	lr
	...

00002cbc <_ZN4Uart5beginEmt>:
  pinPeripheral(uc_pinRX, g_APinDescription[uc_pinRX].ulPinType);
    2cbc:	2389      	movs	r3, #137	; 0x89
{
    2cbe:	b5f0      	push	{r4, r5, r6, r7, lr}
  pinPeripheral(uc_pinRX, g_APinDescription[uc_pinRX].ulPinType);
    2cc0:	2618      	movs	r6, #24
{
    2cc2:	b085      	sub	sp, #20
    2cc4:	9102      	str	r1, [sp, #8]
  pinPeripheral(uc_pinRX, g_APinDescription[uc_pinRX].ulPinType);
    2cc6:	009b      	lsls	r3, r3, #2
{
    2cc8:	0004      	movs	r4, r0
  pinPeripheral(uc_pinRX, g_APinDescription[uc_pinRX].ulPinType);
    2cca:	5cc0      	ldrb	r0, [r0, r3]
    2ccc:	0033      	movs	r3, r6
    2cce:	2108      	movs	r1, #8
    2cd0:	4343      	muls	r3, r0
    2cd2:	4d32      	ldr	r5, [pc, #200]	; (2d9c <_ZN4Uart5beginEmt+0xe0>)
{
    2cd4:	0017      	movs	r7, r2
  pinPeripheral(uc_pinRX, g_APinDescription[uc_pinRX].ulPinType);
    2cd6:	18eb      	adds	r3, r5, r3
    2cd8:	5659      	ldrsb	r1, [r3, r1]
    2cda:	f7ff f96f 	bl	1fbc <pinPeripheral>
  pinPeripheral(uc_pinTX, g_APinDescription[uc_pinTX].ulPinType);
    2cde:	4b30      	ldr	r3, [pc, #192]	; (2da0 <_ZN4Uart5beginEmt+0xe4>)
    2ce0:	2108      	movs	r1, #8
    2ce2:	5ce0      	ldrb	r0, [r4, r3]
    2ce4:	0033      	movs	r3, r6
    2ce6:	4343      	muls	r3, r0
    2ce8:	18eb      	adds	r3, r5, r3
    2cea:	5659      	ldrsb	r1, [r3, r1]
    2cec:	f7ff f966 	bl	1fbc <pinPeripheral>
  if (uc_padTX == UART_TX_RTS_CTS_PAD_0_2_3) { 
    2cf0:	4b2c      	ldr	r3, [pc, #176]	; (2da4 <_ZN4Uart5beginEmt+0xe8>)
    2cf2:	5ce2      	ldrb	r2, [r4, r3]
    2cf4:	9303      	str	r3, [sp, #12]
    2cf6:	2a02      	cmp	r2, #2
    2cf8:	d109      	bne.n	2d0e <_ZN4Uart5beginEmt+0x52>
    if (uc_pinCTS != NO_CTS_PIN) {
    2cfa:	3311      	adds	r3, #17
    2cfc:	5ce0      	ldrb	r0, [r4, r3]
    2cfe:	28ff      	cmp	r0, #255	; 0xff
    2d00:	d005      	beq.n	2d0e <_ZN4Uart5beginEmt+0x52>
      pinPeripheral(uc_pinCTS, g_APinDescription[uc_pinCTS].ulPinType);
    2d02:	2108      	movs	r1, #8
    2d04:	4346      	muls	r6, r0
    2d06:	19ae      	adds	r6, r5, r6
    2d08:	5671      	ldrsb	r1, [r6, r1]
    2d0a:	f7ff f957 	bl	1fbc <pinPeripheral>
  if (uc_pinRTS != NO_RTS_PIN) {
    2d0e:	268a      	movs	r6, #138	; 0x8a
    2d10:	00b6      	lsls	r6, r6, #2
    2d12:	5da0      	ldrb	r0, [r4, r6]
    2d14:	28ff      	cmp	r0, #255	; 0xff
    2d16:	d019      	beq.n	2d4c <_ZN4Uart5beginEmt+0x90>
    pinMode(uc_pinRTS, OUTPUT);
    2d18:	2101      	movs	r1, #1
    2d1a:	f7ff f8d7 	bl	1ecc <pinMode>
    EPortType rtsPort = g_APinDescription[uc_pinRTS].ulPort;
    2d1e:	2218      	movs	r2, #24
    2d20:	5da3      	ldrb	r3, [r4, r6]
    pul_outsetRTS = &PORT->Group[rtsPort].OUTSET.reg;
    2d22:	4921      	ldr	r1, [pc, #132]	; (2da8 <_ZN4Uart5beginEmt+0xec>)
    EPortType rtsPort = g_APinDescription[uc_pinRTS].ulPort;
    2d24:	435a      	muls	r2, r3
    pul_outsetRTS = &PORT->Group[rtsPort].OUTSET.reg;
    2d26:	56ab      	ldrsb	r3, [r5, r2]
    ul_pinMaskRTS = (1ul << g_APinDescription[uc_pinRTS].ulPin);
    2d28:	18ad      	adds	r5, r5, r2
    pul_outsetRTS = &PORT->Group[rtsPort].OUTSET.reg;
    2d2a:	01db      	lsls	r3, r3, #7
    2d2c:	1858      	adds	r0, r3, r1
    2d2e:	218b      	movs	r1, #139	; 0x8b
    2d30:	0089      	lsls	r1, r1, #2
    2d32:	5060      	str	r0, [r4, r1]
    pul_outclrRTS = &PORT->Group[rtsPort].OUTCLR.reg;
    2d34:	491d      	ldr	r1, [pc, #116]	; (2dac <_ZN4Uart5beginEmt+0xf0>)
    ul_pinMaskRTS = (1ul << g_APinDescription[uc_pinRTS].ulPin);
    2d36:	2201      	movs	r2, #1
    pul_outclrRTS = &PORT->Group[rtsPort].OUTCLR.reg;
    2d38:	185b      	adds	r3, r3, r1
    2d3a:	218c      	movs	r1, #140	; 0x8c
    2d3c:	0089      	lsls	r1, r1, #2
    2d3e:	5063      	str	r3, [r4, r1]
    ul_pinMaskRTS = (1ul << g_APinDescription[uc_pinRTS].ulPin);
    2d40:	6869      	ldr	r1, [r5, #4]
    2d42:	408a      	lsls	r2, r1
    2d44:	218d      	movs	r1, #141	; 0x8d
    2d46:	0089      	lsls	r1, r1, #2
    2d48:	5062      	str	r2, [r4, r1]
    *pul_outclrRTS = ul_pinMaskRTS;
    2d4a:	601a      	str	r2, [r3, #0]
  sercom->initUART(UART_INT_CLOCK, SAMPLE_RATE_x16, baudrate);
    2d4c:	2201      	movs	r2, #1
    2d4e:	9b02      	ldr	r3, [sp, #8]
    2d50:	0011      	movs	r1, r2
    2d52:	6920      	ldr	r0, [r4, #16]
    2d54:	f7ff ff0a 	bl	2b6c <_ZN6SERCOM8initUARTE14SercomUartMode20SercomUartSampleRatem>
  sercom->initFrame(extractCharSize(config), LSB_FIRST, extractParity(config), extractNbStopBit(config));
    2d58:	0039      	movs	r1, r7
    2d5a:	0020      	movs	r0, r4
    2d5c:	f7ff ff8f 	bl	2c7e <_ZN4Uart15extractCharSizeEt>
    2d60:	0039      	movs	r1, r7
    2d62:	0005      	movs	r5, r0
    2d64:	0020      	movs	r0, r4
    2d66:	f7ff ff9e 	bl	2ca6 <_ZN4Uart13extractParityEt>
    2d6a:	0039      	movs	r1, r7
    2d6c:	0006      	movs	r6, r0
    2d6e:	0020      	movs	r0, r4
    2d70:	f7ff ff7f 	bl	2c72 <_ZN4Uart16extractNbStopBitEt>
    2d74:	0033      	movs	r3, r6
    2d76:	9000      	str	r0, [sp, #0]
    2d78:	0029      	movs	r1, r5
    2d7a:	6920      	ldr	r0, [r4, #16]
    2d7c:	2201      	movs	r2, #1
    2d7e:	f7ff fd35 	bl	27ec <_ZN6SERCOM9initFrameE18SercomUartCharSize15SercomDataOrder16SercomParityMode19SercomNumberStopBit>
  sercom->initPads(uc_padTX, uc_padRX);
    2d82:	4b0b      	ldr	r3, [pc, #44]	; (2db0 <_ZN4Uart5beginEmt+0xf4>)
    2d84:	6920      	ldr	r0, [r4, #16]
    2d86:	5ce2      	ldrb	r2, [r4, r3]
    2d88:	9b03      	ldr	r3, [sp, #12]
    2d8a:	5ce1      	ldrb	r1, [r4, r3]
    2d8c:	f7ff fd48 	bl	2820 <_ZN6SERCOM8initPadsE15SercomUartTXPad11SercomRXPad>
  sercom->enableUART();
    2d90:	6920      	ldr	r0, [r4, #16]
    2d92:	f7ff fd63 	bl	285c <_ZN6SERCOM10enableUARTEv>
}
    2d96:	b005      	add	sp, #20
    2d98:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2d9a:	46c0      	nop			; (mov r8, r8)
    2d9c:	000054f4 	.word	0x000054f4
    2da0:	00000225 	.word	0x00000225
    2da4:	00000227 	.word	0x00000227
    2da8:	41004418 	.word	0x41004418
    2dac:	41004414 	.word	0x41004414
    2db0:	00000226 	.word	0x00000226

00002db4 <_ZN11RingBufferNILi256EEC1Ev>:
    memset( _aucBuffer, 0, N ) ;
    2db4:	2280      	movs	r2, #128	; 0x80
RingBufferN<N>::RingBufferN( void )
    2db6:	b510      	push	{r4, lr}
    2db8:	0004      	movs	r4, r0
    memset( _aucBuffer, 0, N ) ;
    2dba:	0052      	lsls	r2, r2, #1
    2dbc:	2100      	movs	r1, #0
    2dbe:	f002 fa18 	bl	51f2 <memset>
  _iHead = 0;
    2dc2:	0023      	movs	r3, r4
    2dc4:	2200      	movs	r2, #0
    2dc6:	33fc      	adds	r3, #252	; 0xfc
    2dc8:	605a      	str	r2, [r3, #4]
}
    2dca:	0020      	movs	r0, r4
  _iTail = 0;
    2dcc:	609a      	str	r2, [r3, #8]
}
    2dce:	bd10      	pop	{r4, pc}

00002dd0 <_ZN4UartC1EP6SERCOMhh11SercomRXPad15SercomUartTXPad>:
Uart::Uart(SERCOM *_s, uint8_t _pinRX, uint8_t _pinTX, SercomRXPad _padRX, SercomUartTXPad _padTX) :
    2dd0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    2dd2:	001d      	movs	r5, r3
    2dd4:	ab08      	add	r3, sp, #32
    2dd6:	781b      	ldrb	r3, [r3, #0]
    2dd8:	0004      	movs	r4, r0
    2dda:	9300      	str	r3, [sp, #0]
    2ddc:	ab09      	add	r3, sp, #36	; 0x24
    2dde:	781b      	ldrb	r3, [r3, #0]
    2de0:	0016      	movs	r6, r2
    2de2:	9301      	str	r3, [sp, #4]
    2de4:	2300      	movs	r3, #0
    2de6:	6043      	str	r3, [r0, #4]
    2de8:	23fa      	movs	r3, #250	; 0xfa
    2dea:	009b      	lsls	r3, r3, #2
    2dec:	6083      	str	r3, [r0, #8]
Uart::Uart(SERCOM *_s, uint8_t _pinRX, uint8_t _pinTX, SercomRXPad _padRX, SercomUartTXPad _padTX, uint8_t _pinRTS, uint8_t _pinCTS)
    2dee:	4b11      	ldr	r3, [pc, #68]	; (2e34 <_ZN4UartC1EP6SERCOMhh11SercomRXPad15SercomUartTXPad+0x64>)
Uart::Uart(SERCOM *_s, uint8_t _pinRX, uint8_t _pinTX, SercomRXPad _padRX, SercomUartTXPad _padTX) :
    2df0:	000f      	movs	r7, r1
Uart::Uart(SERCOM *_s, uint8_t _pinRX, uint8_t _pinTX, SercomRXPad _padRX, SercomUartTXPad _padTX, uint8_t _pinRTS, uint8_t _pinCTS)
    2df2:	3308      	adds	r3, #8
    2df4:	6003      	str	r3, [r0, #0]
    2df6:	3014      	adds	r0, #20
    2df8:	f7ff ffdc 	bl	2db4 <_ZN11RingBufferNILi256EEC1Ev>
    2dfc:	0020      	movs	r0, r4
    2dfe:	301d      	adds	r0, #29
    2e00:	30ff      	adds	r0, #255	; 0xff
    2e02:	f7ff ffd7 	bl	2db4 <_ZN11RingBufferNILi256EEC1Ev>
  uc_pinRX = _pinRX;
    2e06:	2389      	movs	r3, #137	; 0x89
  uc_padRX = _padRX ;
    2e08:	466a      	mov	r2, sp
  uc_pinRX = _pinRX;
    2e0a:	009b      	lsls	r3, r3, #2
  sercom = _s;
    2e0c:	6127      	str	r7, [r4, #16]
  uc_pinRX = _pinRX;
    2e0e:	54e6      	strb	r6, [r4, r3]
  uc_pinTX = _pinTX;
    2e10:	4b09      	ldr	r3, [pc, #36]	; (2e38 <_ZN4UartC1EP6SERCOMhh11SercomRXPad15SercomUartTXPad+0x68>)
  uc_padRX = _padRX ;
    2e12:	7812      	ldrb	r2, [r2, #0]
  uc_pinTX = _pinTX;
    2e14:	54e5      	strb	r5, [r4, r3]
  uc_padRX = _padRX ;
    2e16:	4b09      	ldr	r3, [pc, #36]	; (2e3c <_ZN4UartC1EP6SERCOMhh11SercomRXPad15SercomUartTXPad+0x6c>)
}
    2e18:	0020      	movs	r0, r4
  uc_padRX = _padRX ;
    2e1a:	54e2      	strb	r2, [r4, r3]
  uc_padTX = _padTX;
    2e1c:	466a      	mov	r2, sp
    2e1e:	4b08      	ldr	r3, [pc, #32]	; (2e40 <_ZN4UartC1EP6SERCOMhh11SercomRXPad15SercomUartTXPad+0x70>)
    2e20:	7912      	ldrb	r2, [r2, #4]
    2e22:	54e2      	strb	r2, [r4, r3]
  uc_pinRTS = _pinRTS;
    2e24:	228a      	movs	r2, #138	; 0x8a
    2e26:	3b29      	subs	r3, #41	; 0x29
    2e28:	3bff      	subs	r3, #255	; 0xff
    2e2a:	0092      	lsls	r2, r2, #2
    2e2c:	54a3      	strb	r3, [r4, r2]
  uc_pinCTS = _pinCTS;
    2e2e:	3210      	adds	r2, #16
    2e30:	54a3      	strb	r3, [r4, r2]
}
    2e32:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    2e34:	00005944 	.word	0x00005944
    2e38:	00000225 	.word	0x00000225
    2e3c:	00000226 	.word	0x00000226
    2e40:	00000227 	.word	0x00000227

00002e44 <_ZN11RingBufferNILi256EE9availableEv>:
  int delta = _iHead - _iTail;
    2e44:	0003      	movs	r3, r0
    2e46:	33fc      	adds	r3, #252	; 0xfc
    2e48:	6858      	ldr	r0, [r3, #4]
    2e4a:	689b      	ldr	r3, [r3, #8]
    2e4c:	1ac0      	subs	r0, r0, r3
  if(delta < 0)
    2e4e:	d501      	bpl.n	2e54 <_ZN11RingBufferNILi256EE9availableEv+0x10>
    return N + delta;
    2e50:	3001      	adds	r0, #1
    2e52:	30ff      	adds	r0, #255	; 0xff
}
    2e54:	4770      	bx	lr

00002e56 <_ZN4Uart5flushEv>:
{
    2e56:	b510      	push	{r4, lr}
    2e58:	0004      	movs	r4, r0
  while(txBuffer.available()); // wait until TX buffer is empty
    2e5a:	0020      	movs	r0, r4
    2e5c:	301d      	adds	r0, #29
    2e5e:	30ff      	adds	r0, #255	; 0xff
    2e60:	f7ff fff0 	bl	2e44 <_ZN11RingBufferNILi256EE9availableEv>
    2e64:	2800      	cmp	r0, #0
    2e66:	d1f8      	bne.n	2e5a <_ZN4Uart5flushEv+0x4>
  sercom->flushUART();
    2e68:	6920      	ldr	r0, [r4, #16]
    2e6a:	f7ff fd00 	bl	286e <_ZN6SERCOM9flushUARTEv>
}
    2e6e:	bd10      	pop	{r4, pc}

00002e70 <_ZN4Uart9availableEv>:
{
    2e70:	b510      	push	{r4, lr}
  return rxBuffer.available();
    2e72:	3014      	adds	r0, #20
    2e74:	f7ff ffe6 	bl	2e44 <_ZN11RingBufferNILi256EE9availableEv>
}
    2e78:	bd10      	pop	{r4, pc}

00002e7a <_ZN11RingBufferNILi256EE17availableForStoreEv>:
  if (_iHead >= _iTail)
    2e7a:	0003      	movs	r3, r0
    2e7c:	33fc      	adds	r3, #252	; 0xfc
    2e7e:	6859      	ldr	r1, [r3, #4]
    2e80:	689a      	ldr	r2, [r3, #8]
    2e82:	4291      	cmp	r1, r2
    2e84:	db04      	blt.n	2e90 <_ZN11RingBufferNILi256EE17availableForStoreEv+0x16>
    return N - 1 - _iHead + _iTail;
    2e86:	685a      	ldr	r2, [r3, #4]
    2e88:	6898      	ldr	r0, [r3, #8]
    2e8a:	1a80      	subs	r0, r0, r2
    2e8c:	30ff      	adds	r0, #255	; 0xff
}
    2e8e:	4770      	bx	lr
    return _iTail - _iHead - 1;
    2e90:	6898      	ldr	r0, [r3, #8]
    2e92:	685b      	ldr	r3, [r3, #4]
    2e94:	1ac0      	subs	r0, r0, r3
    2e96:	3801      	subs	r0, #1
    2e98:	e7f9      	b.n	2e8e <_ZN11RingBufferNILi256EE17availableForStoreEv+0x14>

00002e9a <_ZN4Uart17availableForWriteEv>:
{
    2e9a:	b510      	push	{r4, lr}
  return txBuffer.availableForStore();
    2e9c:	301d      	adds	r0, #29
    2e9e:	30ff      	adds	r0, #255	; 0xff
    2ea0:	f7ff ffeb 	bl	2e7a <_ZN11RingBufferNILi256EE17availableForStoreEv>
}
    2ea4:	bd10      	pop	{r4, pc}

00002ea6 <_ZN4Uart10IrqHandlerEv>:
{
    2ea6:	b510      	push	{r4, lr}
    2ea8:	0004      	movs	r4, r0
  if (sercom->isFrameErrorUART()) {
    2eaa:	6900      	ldr	r0, [r0, #16]
    2eac:	f7ff fcfb 	bl	28a6 <_ZN6SERCOM16isFrameErrorUARTEv>
    2eb0:	2800      	cmp	r0, #0
    2eb2:	d005      	beq.n	2ec0 <_ZN4Uart10IrqHandlerEv+0x1a>
    sercom->readDataUART();
    2eb4:	6920      	ldr	r0, [r4, #16]
    2eb6:	f7ff fd06 	bl	28c6 <_ZN6SERCOM12readDataUARTEv>
    sercom->clearFrameErrorUART();
    2eba:	6920      	ldr	r0, [r4, #16]
    2ebc:	f7ff fcf8 	bl	28b0 <_ZN6SERCOM19clearFrameErrorUARTEv>
  if (sercom->availableDataUART()) {
    2ec0:	6920      	ldr	r0, [r4, #16]
    2ec2:	f7ff fce0 	bl	2886 <_ZN6SERCOM17availableDataUARTEv>
    2ec6:	2800      	cmp	r0, #0
    2ec8:	d020      	beq.n	2f0c <_ZN4Uart10IrqHandlerEv+0x66>
    rxBuffer.store_char(sercom->readDataUART());
    2eca:	6920      	ldr	r0, [r4, #16]
    2ecc:	f7ff fcfb 	bl	28c6 <_ZN6SERCOM12readDataUARTEv>
  int i = nextIndex(_iHead);
    2ed0:	0022      	movs	r2, r4
    2ed2:	32fc      	adds	r2, #252	; 0xfc
    2ed4:	6993      	ldr	r3, [r2, #24]
  if ( i != _iTail )
    2ed6:	69d1      	ldr	r1, [r2, #28]
  return (uint32_t)(index + 1) % N;
    2ed8:	3301      	adds	r3, #1
    2eda:	b2db      	uxtb	r3, r3
  if ( i != _iTail )
    2edc:	428b      	cmp	r3, r1
    2ede:	d003      	beq.n	2ee8 <_ZN4Uart10IrqHandlerEv+0x42>
    _aucBuffer[_iHead] = c ;
    2ee0:	6991      	ldr	r1, [r2, #24]
    2ee2:	1861      	adds	r1, r4, r1
    2ee4:	7508      	strb	r0, [r1, #20]
    _iHead = i ;
    2ee6:	6193      	str	r3, [r2, #24]
    if (uc_pinRTS != NO_RTS_PIN) {
    2ee8:	238a      	movs	r3, #138	; 0x8a
    2eea:	009b      	lsls	r3, r3, #2
    2eec:	5ce3      	ldrb	r3, [r4, r3]
    2eee:	2bff      	cmp	r3, #255	; 0xff
    2ef0:	d00c      	beq.n	2f0c <_ZN4Uart10IrqHandlerEv+0x66>
    rxBuffer.store_char(sercom->readDataUART());
    2ef2:	0020      	movs	r0, r4
    2ef4:	3014      	adds	r0, #20
      if (rxBuffer.availableForStore() < RTS_RX_THRESHOLD) {
    2ef6:	f7ff ffc0 	bl	2e7a <_ZN11RingBufferNILi256EE17availableForStoreEv>
    2efa:	2809      	cmp	r0, #9
    2efc:	dc06      	bgt.n	2f0c <_ZN4Uart10IrqHandlerEv+0x66>
        *pul_outsetRTS = ul_pinMaskRTS;
    2efe:	238b      	movs	r3, #139	; 0x8b
    2f00:	228d      	movs	r2, #141	; 0x8d
    2f02:	009b      	lsls	r3, r3, #2
    2f04:	0092      	lsls	r2, r2, #2
    2f06:	58e3      	ldr	r3, [r4, r3]
    2f08:	58a2      	ldr	r2, [r4, r2]
    2f0a:	601a      	str	r2, [r3, #0]
  if (sercom->isDataRegisterEmptyUART()) {
    2f0c:	6920      	ldr	r0, [r4, #16]
    2f0e:	f7ff fcd5 	bl	28bc <_ZN6SERCOM23isDataRegisterEmptyUARTEv>
    2f12:	2800      	cmp	r0, #0
    2f14:	d01a      	beq.n	2f4c <_ZN4Uart10IrqHandlerEv+0xa6>
    if (txBuffer.available()) {
    2f16:	0020      	movs	r0, r4
    2f18:	301d      	adds	r0, #29
    2f1a:	30ff      	adds	r0, #255	; 0xff
    2f1c:	f7ff ff92 	bl	2e44 <_ZN11RingBufferNILi256EE9availableEv>
    2f20:	2800      	cmp	r0, #0
    2f22:	d022      	beq.n	2f6a <_ZN4Uart10IrqHandlerEv+0xc4>
  if(_iTail == _iHead)
    2f24:	2386      	movs	r3, #134	; 0x86
    2f26:	009b      	lsls	r3, r3, #2
    2f28:	18e3      	adds	r3, r4, r3
    2f2a:	6899      	ldr	r1, [r3, #8]
    2f2c:	685a      	ldr	r2, [r3, #4]
    2f2e:	4291      	cmp	r1, r2
    2f30:	d018      	beq.n	2f64 <_ZN4Uart10IrqHandlerEv+0xbe>
  uint8_t value = _aucBuffer[_iTail];
    2f32:	218e      	movs	r1, #142	; 0x8e
    2f34:	689a      	ldr	r2, [r3, #8]
    2f36:	0049      	lsls	r1, r1, #1
    2f38:	18a2      	adds	r2, r4, r2
    2f3a:	5c51      	ldrb	r1, [r2, r1]
  _iTail = nextIndex(_iTail);
    2f3c:	689a      	ldr	r2, [r3, #8]
  return (uint32_t)(index + 1) % N;
    2f3e:	3201      	adds	r2, #1
    2f40:	b2d2      	uxtb	r2, r2
  _iTail = nextIndex(_iTail);
    2f42:	609a      	str	r2, [r3, #8]
      sercom->writeDataUART(data);
    2f44:	b2c9      	uxtb	r1, r1
    2f46:	6920      	ldr	r0, [r4, #16]
    2f48:	f7ff fcc1 	bl	28ce <_ZN6SERCOM13writeDataUARTEh>
  if (sercom->isUARTError()) {
    2f4c:	6920      	ldr	r0, [r4, #16]
    2f4e:	f7ff fc9f 	bl	2890 <_ZN6SERCOM11isUARTErrorEv>
    2f52:	2800      	cmp	r0, #0
    2f54:	d005      	beq.n	2f62 <_ZN4Uart10IrqHandlerEv+0xbc>
    sercom->acknowledgeUARTError();
    2f56:	6920      	ldr	r0, [r4, #16]
    2f58:	f7ff fc9e 	bl	2898 <_ZN6SERCOM20acknowledgeUARTErrorEv>
    sercom->clearStatusUART();
    2f5c:	6920      	ldr	r0, [r4, #16]
    2f5e:	f7ff fc8e 	bl	287e <_ZN6SERCOM15clearStatusUARTEv>
}
    2f62:	bd10      	pop	{r4, pc}
    return -1;
    2f64:	2101      	movs	r1, #1
    2f66:	4249      	negs	r1, r1
    2f68:	e7ec      	b.n	2f44 <_ZN4Uart10IrqHandlerEv+0x9e>
      sercom->disableDataRegisterEmptyInterruptUART();
    2f6a:	6920      	ldr	r0, [r4, #16]
    2f6c:	f7ff fcbb 	bl	28e6 <_ZN6SERCOM37disableDataRegisterEmptyInterruptUARTEv>
    2f70:	e7ec      	b.n	2f4c <_ZN4Uart10IrqHandlerEv+0xa6>
	...

00002f74 <_ZN4Uart5writeEh>:
{
    2f74:	b570      	push	{r4, r5, r6, lr}
    2f76:	0004      	movs	r4, r0
  if (sercom->isDataRegisterEmptyUART() && txBuffer.available() == 0) {
    2f78:	6900      	ldr	r0, [r0, #16]
{
    2f7a:	000d      	movs	r5, r1
  if (sercom->isDataRegisterEmptyUART() && txBuffer.available() == 0) {
    2f7c:	f7ff fc9e 	bl	28bc <_ZN6SERCOM23isDataRegisterEmptyUARTEv>
    2f80:	2800      	cmp	r0, #0
    2f82:	d124      	bne.n	2fce <_ZN4Uart5writeEh+0x5a>
  return (uint32_t)(index + 1) % N;
    2f84:	26ff      	movs	r6, #255	; 0xff
  return (nextIndex(_iHead) == _iTail);
    2f86:	2386      	movs	r3, #134	; 0x86
    2f88:	009b      	lsls	r3, r3, #2
    2f8a:	18e3      	adds	r3, r4, r3
    2f8c:	685a      	ldr	r2, [r3, #4]
    2f8e:	6899      	ldr	r1, [r3, #8]
  return (uint32_t)(index + 1) % N;
    2f90:	3201      	adds	r2, #1
    2f92:	4032      	ands	r2, r6
    while(txBuffer.isFull()) {
    2f94:	428a      	cmp	r2, r1
    2f96:	d12f      	bne.n	2ff8 <_ZN4Uart5writeEh+0x84>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    2f98:	f3ef 8310 	mrs	r3, PRIMASK
      if (interruptsEnabled) {
    2f9c:	07db      	lsls	r3, r3, #31
    2f9e:	d40d      	bmi.n	2fbc <_ZN4Uart5writeEh+0x48>
        uint32_t exceptionNumber = (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk);
    2fa0:	4b1e      	ldr	r3, [pc, #120]	; (301c <_ZN4Uart5writeEh+0xa8>)
    2fa2:	685b      	ldr	r3, [r3, #4]
    2fa4:	05db      	lsls	r3, r3, #23
    2fa6:	0ddb      	lsrs	r3, r3, #23
        if (exceptionNumber == 0 ||
    2fa8:	d0ed      	beq.n	2f86 <_ZN4Uart5writeEh+0x12>
              NVIC_GetPriority((IRQn_Type)(exceptionNumber - 16)) > SERCOM_NVIC_PRIORITY) {
    2faa:	3b10      	subs	r3, #16
    2fac:	b25b      	sxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
    2fae:	2b00      	cmp	r3, #0
    2fb0:	db19      	blt.n	2fe6 <_ZN4Uart5writeEh+0x72>
    return((uint32_t)(((NVIC->IP[ _IP_IDX(IRQn)] >> _BIT_SHIFT(IRQn) ) & (uint32_t)0xFFUL) >> (8U - __NVIC_PRIO_BITS)));
    2fb2:	089b      	lsrs	r3, r3, #2
    2fb4:	33c0      	adds	r3, #192	; 0xc0
    2fb6:	4a1a      	ldr	r2, [pc, #104]	; (3020 <_ZN4Uart5writeEh+0xac>)
    2fb8:	009b      	lsls	r3, r3, #2
    2fba:	589b      	ldr	r3, [r3, r2]
      if (sercom->isDataRegisterEmptyUART()) {
    2fbc:	6920      	ldr	r0, [r4, #16]
    2fbe:	f7ff fc7d 	bl	28bc <_ZN6SERCOM23isDataRegisterEmptyUARTEv>
    2fc2:	2800      	cmp	r0, #0
    2fc4:	d0df      	beq.n	2f86 <_ZN4Uart5writeEh+0x12>
        IrqHandler();
    2fc6:	0020      	movs	r0, r4
    2fc8:	f7ff ff6d 	bl	2ea6 <_ZN4Uart10IrqHandlerEv>
    2fcc:	e7db      	b.n	2f86 <_ZN4Uart5writeEh+0x12>
  if (sercom->isDataRegisterEmptyUART() && txBuffer.available() == 0) {
    2fce:	0020      	movs	r0, r4
    2fd0:	301d      	adds	r0, #29
    2fd2:	30ff      	adds	r0, #255	; 0xff
    2fd4:	f7ff ff36 	bl	2e44 <_ZN11RingBufferNILi256EE9availableEv>
    2fd8:	2800      	cmp	r0, #0
    2fda:	d1d3      	bne.n	2f84 <_ZN4Uart5writeEh+0x10>
    sercom->writeDataUART(data);
    2fdc:	0029      	movs	r1, r5
    2fde:	6920      	ldr	r0, [r4, #16]
    2fe0:	f7ff fc75 	bl	28ce <_ZN6SERCOM13writeDataUARTEh>
  return 1;
    2fe4:	e017      	b.n	3016 <_ZN4Uart5writeEh+0xa2>
    return((uint32_t)(((SCB->SHP[_SHP_IDX(IRQn)] >> _BIT_SHIFT(IRQn) ) & (uint32_t)0xFFUL) >> (8U - __NVIC_PRIO_BITS)));
    2fe6:	220f      	movs	r2, #15
    2fe8:	4013      	ands	r3, r2
    2fea:	3b08      	subs	r3, #8
    2fec:	089b      	lsrs	r3, r3, #2
    2fee:	4a0d      	ldr	r2, [pc, #52]	; (3024 <_ZN4Uart5writeEh+0xb0>)
    2ff0:	009b      	lsls	r3, r3, #2
    2ff2:	189b      	adds	r3, r3, r2
    2ff4:	681b      	ldr	r3, [r3, #0]
    2ff6:	e7e1      	b.n	2fbc <_ZN4Uart5writeEh+0x48>
  int i = nextIndex(_iHead);
    2ff8:	685a      	ldr	r2, [r3, #4]
  return (uint32_t)(index + 1) % N;
    2ffa:	3201      	adds	r2, #1
    2ffc:	4016      	ands	r6, r2
  if ( i != _iTail )
    2ffe:	689a      	ldr	r2, [r3, #8]
    3000:	4296      	cmp	r6, r2
    3002:	d005      	beq.n	3010 <_ZN4Uart5writeEh+0x9c>
    _aucBuffer[_iHead] = c ;
    3004:	218e      	movs	r1, #142	; 0x8e
    3006:	685a      	ldr	r2, [r3, #4]
    3008:	0049      	lsls	r1, r1, #1
    300a:	18a2      	adds	r2, r4, r2
    300c:	5455      	strb	r5, [r2, r1]
    _iHead = i ;
    300e:	605e      	str	r6, [r3, #4]
    sercom->enableDataRegisterEmptyInterruptUART();
    3010:	6920      	ldr	r0, [r4, #16]
    3012:	f7ff fc64 	bl	28de <_ZN6SERCOM36enableDataRegisterEmptyInterruptUARTEv>
}
    3016:	2001      	movs	r0, #1
    3018:	bd70      	pop	{r4, r5, r6, pc}
    301a:	46c0      	nop			; (mov r8, r8)
    301c:	e000ed00 	.word	0xe000ed00
    3020:	e000e100 	.word	0xe000e100
    3024:	e000ed1c 	.word	0xe000ed1c

00003028 <_ZN4Uart4readEv>:
  if(_iTail == _iHead)
    3028:	0003      	movs	r3, r0
    302a:	33fc      	adds	r3, #252	; 0xfc
    302c:	69d9      	ldr	r1, [r3, #28]
    302e:	699a      	ldr	r2, [r3, #24]
{
    3030:	b570      	push	{r4, r5, r6, lr}
    3032:	0004      	movs	r4, r0
    3034:	4291      	cmp	r1, r2
    3036:	d01a      	beq.n	306e <_ZN4Uart4readEv+0x46>
  uint8_t value = _aucBuffer[_iTail];
    3038:	69da      	ldr	r2, [r3, #28]
    303a:	1882      	adds	r2, r0, r2
    303c:	7d15      	ldrb	r5, [r2, #20]
  _iTail = nextIndex(_iTail);
    303e:	69da      	ldr	r2, [r3, #28]
  return (uint32_t)(index + 1) % N;
    3040:	3201      	adds	r2, #1
    3042:	b2d2      	uxtb	r2, r2
  _iTail = nextIndex(_iTail);
    3044:	61da      	str	r2, [r3, #28]
  if (uc_pinRTS != NO_RTS_PIN) {
    3046:	238a      	movs	r3, #138	; 0x8a
    3048:	009b      	lsls	r3, r3, #2
    304a:	5ce3      	ldrb	r3, [r4, r3]
    304c:	2bff      	cmp	r3, #255	; 0xff
    304e:	d00c      	beq.n	306a <_ZN4Uart4readEv+0x42>
  int c = rxBuffer.read_char();
    3050:	0020      	movs	r0, r4
    3052:	3014      	adds	r0, #20
    if (rxBuffer.availableForStore() > RTS_RX_THRESHOLD) {
    3054:	f7ff ff11 	bl	2e7a <_ZN11RingBufferNILi256EE17availableForStoreEv>
    3058:	280a      	cmp	r0, #10
    305a:	dd06      	ble.n	306a <_ZN4Uart4readEv+0x42>
      *pul_outclrRTS = ul_pinMaskRTS;
    305c:	238c      	movs	r3, #140	; 0x8c
    305e:	228d      	movs	r2, #141	; 0x8d
    3060:	009b      	lsls	r3, r3, #2
    3062:	0092      	lsls	r2, r2, #2
    3064:	58e3      	ldr	r3, [r4, r3]
    3066:	58a2      	ldr	r2, [r4, r2]
    3068:	601a      	str	r2, [r3, #0]
}
    306a:	0028      	movs	r0, r5
    306c:	bd70      	pop	{r4, r5, r6, pc}
    return -1;
    306e:	2501      	movs	r5, #1
    3070:	426d      	negs	r5, r5
    3072:	e7e8      	b.n	3046 <_ZN4Uart4readEv+0x1e>

00003074 <__gnu_thumb1_case_uqi>:
    3074:	b402      	push	{r1}
    3076:	4671      	mov	r1, lr
    3078:	0849      	lsrs	r1, r1, #1
    307a:	0049      	lsls	r1, r1, #1
    307c:	5c09      	ldrb	r1, [r1, r0]
    307e:	0049      	lsls	r1, r1, #1
    3080:	448e      	add	lr, r1
    3082:	bc02      	pop	{r1}
    3084:	4770      	bx	lr
    3086:	46c0      	nop			; (mov r8, r8)

00003088 <__udivsi3>:
    3088:	2200      	movs	r2, #0
    308a:	0843      	lsrs	r3, r0, #1
    308c:	428b      	cmp	r3, r1
    308e:	d374      	bcc.n	317a <__udivsi3+0xf2>
    3090:	0903      	lsrs	r3, r0, #4
    3092:	428b      	cmp	r3, r1
    3094:	d35f      	bcc.n	3156 <__udivsi3+0xce>
    3096:	0a03      	lsrs	r3, r0, #8
    3098:	428b      	cmp	r3, r1
    309a:	d344      	bcc.n	3126 <__udivsi3+0x9e>
    309c:	0b03      	lsrs	r3, r0, #12
    309e:	428b      	cmp	r3, r1
    30a0:	d328      	bcc.n	30f4 <__udivsi3+0x6c>
    30a2:	0c03      	lsrs	r3, r0, #16
    30a4:	428b      	cmp	r3, r1
    30a6:	d30d      	bcc.n	30c4 <__udivsi3+0x3c>
    30a8:	22ff      	movs	r2, #255	; 0xff
    30aa:	0209      	lsls	r1, r1, #8
    30ac:	ba12      	rev	r2, r2
    30ae:	0c03      	lsrs	r3, r0, #16
    30b0:	428b      	cmp	r3, r1
    30b2:	d302      	bcc.n	30ba <__udivsi3+0x32>
    30b4:	1212      	asrs	r2, r2, #8
    30b6:	0209      	lsls	r1, r1, #8
    30b8:	d065      	beq.n	3186 <__udivsi3+0xfe>
    30ba:	0b03      	lsrs	r3, r0, #12
    30bc:	428b      	cmp	r3, r1
    30be:	d319      	bcc.n	30f4 <__udivsi3+0x6c>
    30c0:	e000      	b.n	30c4 <__udivsi3+0x3c>
    30c2:	0a09      	lsrs	r1, r1, #8
    30c4:	0bc3      	lsrs	r3, r0, #15
    30c6:	428b      	cmp	r3, r1
    30c8:	d301      	bcc.n	30ce <__udivsi3+0x46>
    30ca:	03cb      	lsls	r3, r1, #15
    30cc:	1ac0      	subs	r0, r0, r3
    30ce:	4152      	adcs	r2, r2
    30d0:	0b83      	lsrs	r3, r0, #14
    30d2:	428b      	cmp	r3, r1
    30d4:	d301      	bcc.n	30da <__udivsi3+0x52>
    30d6:	038b      	lsls	r3, r1, #14
    30d8:	1ac0      	subs	r0, r0, r3
    30da:	4152      	adcs	r2, r2
    30dc:	0b43      	lsrs	r3, r0, #13
    30de:	428b      	cmp	r3, r1
    30e0:	d301      	bcc.n	30e6 <__udivsi3+0x5e>
    30e2:	034b      	lsls	r3, r1, #13
    30e4:	1ac0      	subs	r0, r0, r3
    30e6:	4152      	adcs	r2, r2
    30e8:	0b03      	lsrs	r3, r0, #12
    30ea:	428b      	cmp	r3, r1
    30ec:	d301      	bcc.n	30f2 <__udivsi3+0x6a>
    30ee:	030b      	lsls	r3, r1, #12
    30f0:	1ac0      	subs	r0, r0, r3
    30f2:	4152      	adcs	r2, r2
    30f4:	0ac3      	lsrs	r3, r0, #11
    30f6:	428b      	cmp	r3, r1
    30f8:	d301      	bcc.n	30fe <__udivsi3+0x76>
    30fa:	02cb      	lsls	r3, r1, #11
    30fc:	1ac0      	subs	r0, r0, r3
    30fe:	4152      	adcs	r2, r2
    3100:	0a83      	lsrs	r3, r0, #10
    3102:	428b      	cmp	r3, r1
    3104:	d301      	bcc.n	310a <__udivsi3+0x82>
    3106:	028b      	lsls	r3, r1, #10
    3108:	1ac0      	subs	r0, r0, r3
    310a:	4152      	adcs	r2, r2
    310c:	0a43      	lsrs	r3, r0, #9
    310e:	428b      	cmp	r3, r1
    3110:	d301      	bcc.n	3116 <__udivsi3+0x8e>
    3112:	024b      	lsls	r3, r1, #9
    3114:	1ac0      	subs	r0, r0, r3
    3116:	4152      	adcs	r2, r2
    3118:	0a03      	lsrs	r3, r0, #8
    311a:	428b      	cmp	r3, r1
    311c:	d301      	bcc.n	3122 <__udivsi3+0x9a>
    311e:	020b      	lsls	r3, r1, #8
    3120:	1ac0      	subs	r0, r0, r3
    3122:	4152      	adcs	r2, r2
    3124:	d2cd      	bcs.n	30c2 <__udivsi3+0x3a>
    3126:	09c3      	lsrs	r3, r0, #7
    3128:	428b      	cmp	r3, r1
    312a:	d301      	bcc.n	3130 <__udivsi3+0xa8>
    312c:	01cb      	lsls	r3, r1, #7
    312e:	1ac0      	subs	r0, r0, r3
    3130:	4152      	adcs	r2, r2
    3132:	0983      	lsrs	r3, r0, #6
    3134:	428b      	cmp	r3, r1
    3136:	d301      	bcc.n	313c <__udivsi3+0xb4>
    3138:	018b      	lsls	r3, r1, #6
    313a:	1ac0      	subs	r0, r0, r3
    313c:	4152      	adcs	r2, r2
    313e:	0943      	lsrs	r3, r0, #5
    3140:	428b      	cmp	r3, r1
    3142:	d301      	bcc.n	3148 <__udivsi3+0xc0>
    3144:	014b      	lsls	r3, r1, #5
    3146:	1ac0      	subs	r0, r0, r3
    3148:	4152      	adcs	r2, r2
    314a:	0903      	lsrs	r3, r0, #4
    314c:	428b      	cmp	r3, r1
    314e:	d301      	bcc.n	3154 <__udivsi3+0xcc>
    3150:	010b      	lsls	r3, r1, #4
    3152:	1ac0      	subs	r0, r0, r3
    3154:	4152      	adcs	r2, r2
    3156:	08c3      	lsrs	r3, r0, #3
    3158:	428b      	cmp	r3, r1
    315a:	d301      	bcc.n	3160 <__udivsi3+0xd8>
    315c:	00cb      	lsls	r3, r1, #3
    315e:	1ac0      	subs	r0, r0, r3
    3160:	4152      	adcs	r2, r2
    3162:	0883      	lsrs	r3, r0, #2
    3164:	428b      	cmp	r3, r1
    3166:	d301      	bcc.n	316c <__udivsi3+0xe4>
    3168:	008b      	lsls	r3, r1, #2
    316a:	1ac0      	subs	r0, r0, r3
    316c:	4152      	adcs	r2, r2
    316e:	0843      	lsrs	r3, r0, #1
    3170:	428b      	cmp	r3, r1
    3172:	d301      	bcc.n	3178 <__udivsi3+0xf0>
    3174:	004b      	lsls	r3, r1, #1
    3176:	1ac0      	subs	r0, r0, r3
    3178:	4152      	adcs	r2, r2
    317a:	1a41      	subs	r1, r0, r1
    317c:	d200      	bcs.n	3180 <__udivsi3+0xf8>
    317e:	4601      	mov	r1, r0
    3180:	4152      	adcs	r2, r2
    3182:	4610      	mov	r0, r2
    3184:	4770      	bx	lr
    3186:	e7ff      	b.n	3188 <__udivsi3+0x100>
    3188:	b501      	push	{r0, lr}
    318a:	2000      	movs	r0, #0
    318c:	f000 f806 	bl	319c <__aeabi_idiv0>
    3190:	bd02      	pop	{r1, pc}
    3192:	46c0      	nop			; (mov r8, r8)

00003194 <__aeabi_uidivmod>:
    3194:	2900      	cmp	r1, #0
    3196:	d0f7      	beq.n	3188 <__udivsi3+0x100>
    3198:	e776      	b.n	3088 <__udivsi3>
    319a:	4770      	bx	lr

0000319c <__aeabi_idiv0>:
    319c:	4770      	bx	lr
    319e:	46c0      	nop			; (mov r8, r8)

000031a0 <__aeabi_cdrcmple>:
    31a0:	4684      	mov	ip, r0
    31a2:	1c10      	adds	r0, r2, #0
    31a4:	4662      	mov	r2, ip
    31a6:	468c      	mov	ip, r1
    31a8:	1c19      	adds	r1, r3, #0
    31aa:	4663      	mov	r3, ip
    31ac:	e000      	b.n	31b0 <__aeabi_cdcmpeq>
    31ae:	46c0      	nop			; (mov r8, r8)

000031b0 <__aeabi_cdcmpeq>:
    31b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    31b2:	f001 f8e9 	bl	4388 <__ledf2>
    31b6:	2800      	cmp	r0, #0
    31b8:	d401      	bmi.n	31be <__aeabi_cdcmpeq+0xe>
    31ba:	2100      	movs	r1, #0
    31bc:	42c8      	cmn	r0, r1
    31be:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

000031c0 <__aeabi_dcmpeq>:
    31c0:	b510      	push	{r4, lr}
    31c2:	f001 f843 	bl	424c <__eqdf2>
    31c6:	4240      	negs	r0, r0
    31c8:	3001      	adds	r0, #1
    31ca:	bd10      	pop	{r4, pc}

000031cc <__aeabi_dcmplt>:
    31cc:	b510      	push	{r4, lr}
    31ce:	f001 f8db 	bl	4388 <__ledf2>
    31d2:	2800      	cmp	r0, #0
    31d4:	db01      	blt.n	31da <__aeabi_dcmplt+0xe>
    31d6:	2000      	movs	r0, #0
    31d8:	bd10      	pop	{r4, pc}
    31da:	2001      	movs	r0, #1
    31dc:	bd10      	pop	{r4, pc}
    31de:	46c0      	nop			; (mov r8, r8)

000031e0 <__aeabi_dcmple>:
    31e0:	b510      	push	{r4, lr}
    31e2:	f001 f8d1 	bl	4388 <__ledf2>
    31e6:	2800      	cmp	r0, #0
    31e8:	dd01      	ble.n	31ee <__aeabi_dcmple+0xe>
    31ea:	2000      	movs	r0, #0
    31ec:	bd10      	pop	{r4, pc}
    31ee:	2001      	movs	r0, #1
    31f0:	bd10      	pop	{r4, pc}
    31f2:	46c0      	nop			; (mov r8, r8)

000031f4 <__aeabi_dcmpgt>:
    31f4:	b510      	push	{r4, lr}
    31f6:	f001 f863 	bl	42c0 <__gedf2>
    31fa:	2800      	cmp	r0, #0
    31fc:	dc01      	bgt.n	3202 <__aeabi_dcmpgt+0xe>
    31fe:	2000      	movs	r0, #0
    3200:	bd10      	pop	{r4, pc}
    3202:	2001      	movs	r0, #1
    3204:	bd10      	pop	{r4, pc}
    3206:	46c0      	nop			; (mov r8, r8)

00003208 <__aeabi_dcmpge>:
    3208:	b510      	push	{r4, lr}
    320a:	f001 f859 	bl	42c0 <__gedf2>
    320e:	2800      	cmp	r0, #0
    3210:	da01      	bge.n	3216 <__aeabi_dcmpge+0xe>
    3212:	2000      	movs	r0, #0
    3214:	bd10      	pop	{r4, pc}
    3216:	2001      	movs	r0, #1
    3218:	bd10      	pop	{r4, pc}
    321a:	46c0      	nop			; (mov r8, r8)

0000321c <__aeabi_d2uiz>:
    321c:	b570      	push	{r4, r5, r6, lr}
    321e:	2200      	movs	r2, #0
    3220:	4b0c      	ldr	r3, [pc, #48]	; (3254 <__aeabi_d2uiz+0x38>)
    3222:	0004      	movs	r4, r0
    3224:	000d      	movs	r5, r1
    3226:	f7ff ffef 	bl	3208 <__aeabi_dcmpge>
    322a:	2800      	cmp	r0, #0
    322c:	d104      	bne.n	3238 <__aeabi_d2uiz+0x1c>
    322e:	0020      	movs	r0, r4
    3230:	0029      	movs	r1, r5
    3232:	f001 fec1 	bl	4fb8 <__aeabi_d2iz>
    3236:	bd70      	pop	{r4, r5, r6, pc}
    3238:	4b06      	ldr	r3, [pc, #24]	; (3254 <__aeabi_d2uiz+0x38>)
    323a:	2200      	movs	r2, #0
    323c:	0020      	movs	r0, r4
    323e:	0029      	movs	r1, r5
    3240:	f001 fb84 	bl	494c <__aeabi_dsub>
    3244:	f001 feb8 	bl	4fb8 <__aeabi_d2iz>
    3248:	2380      	movs	r3, #128	; 0x80
    324a:	061b      	lsls	r3, r3, #24
    324c:	469c      	mov	ip, r3
    324e:	4460      	add	r0, ip
    3250:	e7f1      	b.n	3236 <__aeabi_d2uiz+0x1a>
    3252:	46c0      	nop			; (mov r8, r8)
    3254:	41e00000 	.word	0x41e00000

00003258 <__aeabi_fmul>:
    3258:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    325a:	4657      	mov	r7, sl
    325c:	464e      	mov	r6, r9
    325e:	4645      	mov	r5, r8
    3260:	46de      	mov	lr, fp
    3262:	b5e0      	push	{r5, r6, r7, lr}
    3264:	0247      	lsls	r7, r0, #9
    3266:	0046      	lsls	r6, r0, #1
    3268:	4688      	mov	r8, r1
    326a:	0a7f      	lsrs	r7, r7, #9
    326c:	0e36      	lsrs	r6, r6, #24
    326e:	0fc4      	lsrs	r4, r0, #31
    3270:	2e00      	cmp	r6, #0
    3272:	d047      	beq.n	3304 <__aeabi_fmul+0xac>
    3274:	2eff      	cmp	r6, #255	; 0xff
    3276:	d024      	beq.n	32c2 <__aeabi_fmul+0x6a>
    3278:	00fb      	lsls	r3, r7, #3
    327a:	2780      	movs	r7, #128	; 0x80
    327c:	04ff      	lsls	r7, r7, #19
    327e:	431f      	orrs	r7, r3
    3280:	2300      	movs	r3, #0
    3282:	4699      	mov	r9, r3
    3284:	469a      	mov	sl, r3
    3286:	3e7f      	subs	r6, #127	; 0x7f
    3288:	4643      	mov	r3, r8
    328a:	025d      	lsls	r5, r3, #9
    328c:	0058      	lsls	r0, r3, #1
    328e:	0fdb      	lsrs	r3, r3, #31
    3290:	0a6d      	lsrs	r5, r5, #9
    3292:	0e00      	lsrs	r0, r0, #24
    3294:	4698      	mov	r8, r3
    3296:	d043      	beq.n	3320 <__aeabi_fmul+0xc8>
    3298:	28ff      	cmp	r0, #255	; 0xff
    329a:	d03b      	beq.n	3314 <__aeabi_fmul+0xbc>
    329c:	00eb      	lsls	r3, r5, #3
    329e:	2580      	movs	r5, #128	; 0x80
    32a0:	2200      	movs	r2, #0
    32a2:	04ed      	lsls	r5, r5, #19
    32a4:	431d      	orrs	r5, r3
    32a6:	387f      	subs	r0, #127	; 0x7f
    32a8:	1836      	adds	r6, r6, r0
    32aa:	1c73      	adds	r3, r6, #1
    32ac:	4641      	mov	r1, r8
    32ae:	469b      	mov	fp, r3
    32b0:	464b      	mov	r3, r9
    32b2:	4061      	eors	r1, r4
    32b4:	4313      	orrs	r3, r2
    32b6:	2b0f      	cmp	r3, #15
    32b8:	d864      	bhi.n	3384 <__aeabi_fmul+0x12c>
    32ba:	4875      	ldr	r0, [pc, #468]	; (3490 <__aeabi_fmul+0x238>)
    32bc:	009b      	lsls	r3, r3, #2
    32be:	58c3      	ldr	r3, [r0, r3]
    32c0:	469f      	mov	pc, r3
    32c2:	2f00      	cmp	r7, #0
    32c4:	d142      	bne.n	334c <__aeabi_fmul+0xf4>
    32c6:	2308      	movs	r3, #8
    32c8:	4699      	mov	r9, r3
    32ca:	3b06      	subs	r3, #6
    32cc:	26ff      	movs	r6, #255	; 0xff
    32ce:	469a      	mov	sl, r3
    32d0:	e7da      	b.n	3288 <__aeabi_fmul+0x30>
    32d2:	4641      	mov	r1, r8
    32d4:	2a02      	cmp	r2, #2
    32d6:	d028      	beq.n	332a <__aeabi_fmul+0xd2>
    32d8:	2a03      	cmp	r2, #3
    32da:	d100      	bne.n	32de <__aeabi_fmul+0x86>
    32dc:	e0ce      	b.n	347c <__aeabi_fmul+0x224>
    32de:	2a01      	cmp	r2, #1
    32e0:	d000      	beq.n	32e4 <__aeabi_fmul+0x8c>
    32e2:	e0ac      	b.n	343e <__aeabi_fmul+0x1e6>
    32e4:	4011      	ands	r1, r2
    32e6:	2000      	movs	r0, #0
    32e8:	2200      	movs	r2, #0
    32ea:	b2cc      	uxtb	r4, r1
    32ec:	0240      	lsls	r0, r0, #9
    32ee:	05d2      	lsls	r2, r2, #23
    32f0:	0a40      	lsrs	r0, r0, #9
    32f2:	07e4      	lsls	r4, r4, #31
    32f4:	4310      	orrs	r0, r2
    32f6:	4320      	orrs	r0, r4
    32f8:	bc3c      	pop	{r2, r3, r4, r5}
    32fa:	4690      	mov	r8, r2
    32fc:	4699      	mov	r9, r3
    32fe:	46a2      	mov	sl, r4
    3300:	46ab      	mov	fp, r5
    3302:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3304:	2f00      	cmp	r7, #0
    3306:	d115      	bne.n	3334 <__aeabi_fmul+0xdc>
    3308:	2304      	movs	r3, #4
    330a:	4699      	mov	r9, r3
    330c:	3b03      	subs	r3, #3
    330e:	2600      	movs	r6, #0
    3310:	469a      	mov	sl, r3
    3312:	e7b9      	b.n	3288 <__aeabi_fmul+0x30>
    3314:	20ff      	movs	r0, #255	; 0xff
    3316:	2202      	movs	r2, #2
    3318:	2d00      	cmp	r5, #0
    331a:	d0c5      	beq.n	32a8 <__aeabi_fmul+0x50>
    331c:	2203      	movs	r2, #3
    331e:	e7c3      	b.n	32a8 <__aeabi_fmul+0x50>
    3320:	2d00      	cmp	r5, #0
    3322:	d119      	bne.n	3358 <__aeabi_fmul+0x100>
    3324:	2000      	movs	r0, #0
    3326:	2201      	movs	r2, #1
    3328:	e7be      	b.n	32a8 <__aeabi_fmul+0x50>
    332a:	2401      	movs	r4, #1
    332c:	22ff      	movs	r2, #255	; 0xff
    332e:	400c      	ands	r4, r1
    3330:	2000      	movs	r0, #0
    3332:	e7db      	b.n	32ec <__aeabi_fmul+0x94>
    3334:	0038      	movs	r0, r7
    3336:	f001 fefd 	bl	5134 <__clzsi2>
    333a:	2676      	movs	r6, #118	; 0x76
    333c:	1f43      	subs	r3, r0, #5
    333e:	409f      	lsls	r7, r3
    3340:	2300      	movs	r3, #0
    3342:	4276      	negs	r6, r6
    3344:	1a36      	subs	r6, r6, r0
    3346:	4699      	mov	r9, r3
    3348:	469a      	mov	sl, r3
    334a:	e79d      	b.n	3288 <__aeabi_fmul+0x30>
    334c:	230c      	movs	r3, #12
    334e:	4699      	mov	r9, r3
    3350:	3b09      	subs	r3, #9
    3352:	26ff      	movs	r6, #255	; 0xff
    3354:	469a      	mov	sl, r3
    3356:	e797      	b.n	3288 <__aeabi_fmul+0x30>
    3358:	0028      	movs	r0, r5
    335a:	f001 feeb 	bl	5134 <__clzsi2>
    335e:	1f43      	subs	r3, r0, #5
    3360:	409d      	lsls	r5, r3
    3362:	2376      	movs	r3, #118	; 0x76
    3364:	425b      	negs	r3, r3
    3366:	1a18      	subs	r0, r3, r0
    3368:	2200      	movs	r2, #0
    336a:	e79d      	b.n	32a8 <__aeabi_fmul+0x50>
    336c:	2080      	movs	r0, #128	; 0x80
    336e:	2400      	movs	r4, #0
    3370:	03c0      	lsls	r0, r0, #15
    3372:	22ff      	movs	r2, #255	; 0xff
    3374:	e7ba      	b.n	32ec <__aeabi_fmul+0x94>
    3376:	003d      	movs	r5, r7
    3378:	4652      	mov	r2, sl
    337a:	e7ab      	b.n	32d4 <__aeabi_fmul+0x7c>
    337c:	003d      	movs	r5, r7
    337e:	0021      	movs	r1, r4
    3380:	4652      	mov	r2, sl
    3382:	e7a7      	b.n	32d4 <__aeabi_fmul+0x7c>
    3384:	0c3b      	lsrs	r3, r7, #16
    3386:	469c      	mov	ip, r3
    3388:	042a      	lsls	r2, r5, #16
    338a:	0c12      	lsrs	r2, r2, #16
    338c:	0c2b      	lsrs	r3, r5, #16
    338e:	0014      	movs	r4, r2
    3390:	4660      	mov	r0, ip
    3392:	4665      	mov	r5, ip
    3394:	043f      	lsls	r7, r7, #16
    3396:	0c3f      	lsrs	r7, r7, #16
    3398:	437c      	muls	r4, r7
    339a:	4342      	muls	r2, r0
    339c:	435d      	muls	r5, r3
    339e:	437b      	muls	r3, r7
    33a0:	0c27      	lsrs	r7, r4, #16
    33a2:	189b      	adds	r3, r3, r2
    33a4:	18ff      	adds	r7, r7, r3
    33a6:	42ba      	cmp	r2, r7
    33a8:	d903      	bls.n	33b2 <__aeabi_fmul+0x15a>
    33aa:	2380      	movs	r3, #128	; 0x80
    33ac:	025b      	lsls	r3, r3, #9
    33ae:	469c      	mov	ip, r3
    33b0:	4465      	add	r5, ip
    33b2:	0424      	lsls	r4, r4, #16
    33b4:	043a      	lsls	r2, r7, #16
    33b6:	0c24      	lsrs	r4, r4, #16
    33b8:	1912      	adds	r2, r2, r4
    33ba:	0193      	lsls	r3, r2, #6
    33bc:	1e5c      	subs	r4, r3, #1
    33be:	41a3      	sbcs	r3, r4
    33c0:	0c3f      	lsrs	r7, r7, #16
    33c2:	0e92      	lsrs	r2, r2, #26
    33c4:	197d      	adds	r5, r7, r5
    33c6:	431a      	orrs	r2, r3
    33c8:	01ad      	lsls	r5, r5, #6
    33ca:	4315      	orrs	r5, r2
    33cc:	012b      	lsls	r3, r5, #4
    33ce:	d504      	bpl.n	33da <__aeabi_fmul+0x182>
    33d0:	2301      	movs	r3, #1
    33d2:	465e      	mov	r6, fp
    33d4:	086a      	lsrs	r2, r5, #1
    33d6:	401d      	ands	r5, r3
    33d8:	4315      	orrs	r5, r2
    33da:	0032      	movs	r2, r6
    33dc:	327f      	adds	r2, #127	; 0x7f
    33de:	2a00      	cmp	r2, #0
    33e0:	dd25      	ble.n	342e <__aeabi_fmul+0x1d6>
    33e2:	076b      	lsls	r3, r5, #29
    33e4:	d004      	beq.n	33f0 <__aeabi_fmul+0x198>
    33e6:	230f      	movs	r3, #15
    33e8:	402b      	ands	r3, r5
    33ea:	2b04      	cmp	r3, #4
    33ec:	d000      	beq.n	33f0 <__aeabi_fmul+0x198>
    33ee:	3504      	adds	r5, #4
    33f0:	012b      	lsls	r3, r5, #4
    33f2:	d503      	bpl.n	33fc <__aeabi_fmul+0x1a4>
    33f4:	0032      	movs	r2, r6
    33f6:	4b27      	ldr	r3, [pc, #156]	; (3494 <__aeabi_fmul+0x23c>)
    33f8:	3280      	adds	r2, #128	; 0x80
    33fa:	401d      	ands	r5, r3
    33fc:	2afe      	cmp	r2, #254	; 0xfe
    33fe:	dc94      	bgt.n	332a <__aeabi_fmul+0xd2>
    3400:	2401      	movs	r4, #1
    3402:	01a8      	lsls	r0, r5, #6
    3404:	0a40      	lsrs	r0, r0, #9
    3406:	b2d2      	uxtb	r2, r2
    3408:	400c      	ands	r4, r1
    340a:	e76f      	b.n	32ec <__aeabi_fmul+0x94>
    340c:	2080      	movs	r0, #128	; 0x80
    340e:	03c0      	lsls	r0, r0, #15
    3410:	4207      	tst	r7, r0
    3412:	d007      	beq.n	3424 <__aeabi_fmul+0x1cc>
    3414:	4205      	tst	r5, r0
    3416:	d105      	bne.n	3424 <__aeabi_fmul+0x1cc>
    3418:	4328      	orrs	r0, r5
    341a:	0240      	lsls	r0, r0, #9
    341c:	0a40      	lsrs	r0, r0, #9
    341e:	4644      	mov	r4, r8
    3420:	22ff      	movs	r2, #255	; 0xff
    3422:	e763      	b.n	32ec <__aeabi_fmul+0x94>
    3424:	4338      	orrs	r0, r7
    3426:	0240      	lsls	r0, r0, #9
    3428:	0a40      	lsrs	r0, r0, #9
    342a:	22ff      	movs	r2, #255	; 0xff
    342c:	e75e      	b.n	32ec <__aeabi_fmul+0x94>
    342e:	2401      	movs	r4, #1
    3430:	1aa3      	subs	r3, r4, r2
    3432:	2b1b      	cmp	r3, #27
    3434:	dd05      	ble.n	3442 <__aeabi_fmul+0x1ea>
    3436:	400c      	ands	r4, r1
    3438:	2200      	movs	r2, #0
    343a:	2000      	movs	r0, #0
    343c:	e756      	b.n	32ec <__aeabi_fmul+0x94>
    343e:	465e      	mov	r6, fp
    3440:	e7cb      	b.n	33da <__aeabi_fmul+0x182>
    3442:	002a      	movs	r2, r5
    3444:	2020      	movs	r0, #32
    3446:	40da      	lsrs	r2, r3
    3448:	1ac3      	subs	r3, r0, r3
    344a:	409d      	lsls	r5, r3
    344c:	002b      	movs	r3, r5
    344e:	1e5d      	subs	r5, r3, #1
    3450:	41ab      	sbcs	r3, r5
    3452:	4313      	orrs	r3, r2
    3454:	075a      	lsls	r2, r3, #29
    3456:	d004      	beq.n	3462 <__aeabi_fmul+0x20a>
    3458:	220f      	movs	r2, #15
    345a:	401a      	ands	r2, r3
    345c:	2a04      	cmp	r2, #4
    345e:	d000      	beq.n	3462 <__aeabi_fmul+0x20a>
    3460:	3304      	adds	r3, #4
    3462:	015a      	lsls	r2, r3, #5
    3464:	d504      	bpl.n	3470 <__aeabi_fmul+0x218>
    3466:	2401      	movs	r4, #1
    3468:	2201      	movs	r2, #1
    346a:	400c      	ands	r4, r1
    346c:	2000      	movs	r0, #0
    346e:	e73d      	b.n	32ec <__aeabi_fmul+0x94>
    3470:	2401      	movs	r4, #1
    3472:	019b      	lsls	r3, r3, #6
    3474:	0a58      	lsrs	r0, r3, #9
    3476:	400c      	ands	r4, r1
    3478:	2200      	movs	r2, #0
    347a:	e737      	b.n	32ec <__aeabi_fmul+0x94>
    347c:	2080      	movs	r0, #128	; 0x80
    347e:	2401      	movs	r4, #1
    3480:	03c0      	lsls	r0, r0, #15
    3482:	4328      	orrs	r0, r5
    3484:	0240      	lsls	r0, r0, #9
    3486:	0a40      	lsrs	r0, r0, #9
    3488:	400c      	ands	r4, r1
    348a:	22ff      	movs	r2, #255	; 0xff
    348c:	e72e      	b.n	32ec <__aeabi_fmul+0x94>
    348e:	46c0      	nop			; (mov r8, r8)
    3490:	00005978 	.word	0x00005978
    3494:	f7ffffff 	.word	0xf7ffffff

00003498 <__aeabi_i2f>:
    3498:	b570      	push	{r4, r5, r6, lr}
    349a:	2800      	cmp	r0, #0
    349c:	d030      	beq.n	3500 <__aeabi_i2f+0x68>
    349e:	17c3      	asrs	r3, r0, #31
    34a0:	18c4      	adds	r4, r0, r3
    34a2:	405c      	eors	r4, r3
    34a4:	0fc5      	lsrs	r5, r0, #31
    34a6:	0020      	movs	r0, r4
    34a8:	f001 fe44 	bl	5134 <__clzsi2>
    34ac:	239e      	movs	r3, #158	; 0x9e
    34ae:	1a1b      	subs	r3, r3, r0
    34b0:	2b96      	cmp	r3, #150	; 0x96
    34b2:	dc0d      	bgt.n	34d0 <__aeabi_i2f+0x38>
    34b4:	2296      	movs	r2, #150	; 0x96
    34b6:	1ad2      	subs	r2, r2, r3
    34b8:	4094      	lsls	r4, r2
    34ba:	002a      	movs	r2, r5
    34bc:	0264      	lsls	r4, r4, #9
    34be:	0a64      	lsrs	r4, r4, #9
    34c0:	b2db      	uxtb	r3, r3
    34c2:	0264      	lsls	r4, r4, #9
    34c4:	05db      	lsls	r3, r3, #23
    34c6:	0a60      	lsrs	r0, r4, #9
    34c8:	07d2      	lsls	r2, r2, #31
    34ca:	4318      	orrs	r0, r3
    34cc:	4310      	orrs	r0, r2
    34ce:	bd70      	pop	{r4, r5, r6, pc}
    34d0:	2b99      	cmp	r3, #153	; 0x99
    34d2:	dc19      	bgt.n	3508 <__aeabi_i2f+0x70>
    34d4:	2299      	movs	r2, #153	; 0x99
    34d6:	1ad2      	subs	r2, r2, r3
    34d8:	2a00      	cmp	r2, #0
    34da:	dd29      	ble.n	3530 <__aeabi_i2f+0x98>
    34dc:	4094      	lsls	r4, r2
    34de:	0022      	movs	r2, r4
    34e0:	4c14      	ldr	r4, [pc, #80]	; (3534 <__aeabi_i2f+0x9c>)
    34e2:	4014      	ands	r4, r2
    34e4:	0751      	lsls	r1, r2, #29
    34e6:	d004      	beq.n	34f2 <__aeabi_i2f+0x5a>
    34e8:	210f      	movs	r1, #15
    34ea:	400a      	ands	r2, r1
    34ec:	2a04      	cmp	r2, #4
    34ee:	d000      	beq.n	34f2 <__aeabi_i2f+0x5a>
    34f0:	3404      	adds	r4, #4
    34f2:	0162      	lsls	r2, r4, #5
    34f4:	d413      	bmi.n	351e <__aeabi_i2f+0x86>
    34f6:	01a4      	lsls	r4, r4, #6
    34f8:	0a64      	lsrs	r4, r4, #9
    34fa:	b2db      	uxtb	r3, r3
    34fc:	002a      	movs	r2, r5
    34fe:	e7e0      	b.n	34c2 <__aeabi_i2f+0x2a>
    3500:	2200      	movs	r2, #0
    3502:	2300      	movs	r3, #0
    3504:	2400      	movs	r4, #0
    3506:	e7dc      	b.n	34c2 <__aeabi_i2f+0x2a>
    3508:	2205      	movs	r2, #5
    350a:	0021      	movs	r1, r4
    350c:	1a12      	subs	r2, r2, r0
    350e:	40d1      	lsrs	r1, r2
    3510:	22b9      	movs	r2, #185	; 0xb9
    3512:	1ad2      	subs	r2, r2, r3
    3514:	4094      	lsls	r4, r2
    3516:	1e62      	subs	r2, r4, #1
    3518:	4194      	sbcs	r4, r2
    351a:	430c      	orrs	r4, r1
    351c:	e7da      	b.n	34d4 <__aeabi_i2f+0x3c>
    351e:	4b05      	ldr	r3, [pc, #20]	; (3534 <__aeabi_i2f+0x9c>)
    3520:	002a      	movs	r2, r5
    3522:	401c      	ands	r4, r3
    3524:	239f      	movs	r3, #159	; 0x9f
    3526:	01a4      	lsls	r4, r4, #6
    3528:	1a1b      	subs	r3, r3, r0
    352a:	0a64      	lsrs	r4, r4, #9
    352c:	b2db      	uxtb	r3, r3
    352e:	e7c8      	b.n	34c2 <__aeabi_i2f+0x2a>
    3530:	0022      	movs	r2, r4
    3532:	e7d5      	b.n	34e0 <__aeabi_i2f+0x48>
    3534:	fbffffff 	.word	0xfbffffff

00003538 <__aeabi_ui2f>:
    3538:	b510      	push	{r4, lr}
    353a:	1e04      	subs	r4, r0, #0
    353c:	d027      	beq.n	358e <__aeabi_ui2f+0x56>
    353e:	f001 fdf9 	bl	5134 <__clzsi2>
    3542:	239e      	movs	r3, #158	; 0x9e
    3544:	1a1b      	subs	r3, r3, r0
    3546:	2b96      	cmp	r3, #150	; 0x96
    3548:	dc0a      	bgt.n	3560 <__aeabi_ui2f+0x28>
    354a:	2296      	movs	r2, #150	; 0x96
    354c:	1ad2      	subs	r2, r2, r3
    354e:	4094      	lsls	r4, r2
    3550:	0264      	lsls	r4, r4, #9
    3552:	0a64      	lsrs	r4, r4, #9
    3554:	b2db      	uxtb	r3, r3
    3556:	0264      	lsls	r4, r4, #9
    3558:	05db      	lsls	r3, r3, #23
    355a:	0a60      	lsrs	r0, r4, #9
    355c:	4318      	orrs	r0, r3
    355e:	bd10      	pop	{r4, pc}
    3560:	2b99      	cmp	r3, #153	; 0x99
    3562:	dc17      	bgt.n	3594 <__aeabi_ui2f+0x5c>
    3564:	2299      	movs	r2, #153	; 0x99
    3566:	1ad2      	subs	r2, r2, r3
    3568:	2a00      	cmp	r2, #0
    356a:	dd27      	ble.n	35bc <__aeabi_ui2f+0x84>
    356c:	4094      	lsls	r4, r2
    356e:	0022      	movs	r2, r4
    3570:	4c13      	ldr	r4, [pc, #76]	; (35c0 <__aeabi_ui2f+0x88>)
    3572:	4014      	ands	r4, r2
    3574:	0751      	lsls	r1, r2, #29
    3576:	d004      	beq.n	3582 <__aeabi_ui2f+0x4a>
    3578:	210f      	movs	r1, #15
    357a:	400a      	ands	r2, r1
    357c:	2a04      	cmp	r2, #4
    357e:	d000      	beq.n	3582 <__aeabi_ui2f+0x4a>
    3580:	3404      	adds	r4, #4
    3582:	0162      	lsls	r2, r4, #5
    3584:	d412      	bmi.n	35ac <__aeabi_ui2f+0x74>
    3586:	01a4      	lsls	r4, r4, #6
    3588:	0a64      	lsrs	r4, r4, #9
    358a:	b2db      	uxtb	r3, r3
    358c:	e7e3      	b.n	3556 <__aeabi_ui2f+0x1e>
    358e:	2300      	movs	r3, #0
    3590:	2400      	movs	r4, #0
    3592:	e7e0      	b.n	3556 <__aeabi_ui2f+0x1e>
    3594:	22b9      	movs	r2, #185	; 0xb9
    3596:	0021      	movs	r1, r4
    3598:	1ad2      	subs	r2, r2, r3
    359a:	4091      	lsls	r1, r2
    359c:	000a      	movs	r2, r1
    359e:	1e51      	subs	r1, r2, #1
    35a0:	418a      	sbcs	r2, r1
    35a2:	2105      	movs	r1, #5
    35a4:	1a09      	subs	r1, r1, r0
    35a6:	40cc      	lsrs	r4, r1
    35a8:	4314      	orrs	r4, r2
    35aa:	e7db      	b.n	3564 <__aeabi_ui2f+0x2c>
    35ac:	4b04      	ldr	r3, [pc, #16]	; (35c0 <__aeabi_ui2f+0x88>)
    35ae:	401c      	ands	r4, r3
    35b0:	239f      	movs	r3, #159	; 0x9f
    35b2:	01a4      	lsls	r4, r4, #6
    35b4:	1a1b      	subs	r3, r3, r0
    35b6:	0a64      	lsrs	r4, r4, #9
    35b8:	b2db      	uxtb	r3, r3
    35ba:	e7cc      	b.n	3556 <__aeabi_ui2f+0x1e>
    35bc:	0022      	movs	r2, r4
    35be:	e7d7      	b.n	3570 <__aeabi_ui2f+0x38>
    35c0:	fbffffff 	.word	0xfbffffff

000035c4 <__aeabi_dadd>:
    35c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    35c6:	4645      	mov	r5, r8
    35c8:	46de      	mov	lr, fp
    35ca:	4657      	mov	r7, sl
    35cc:	464e      	mov	r6, r9
    35ce:	030c      	lsls	r4, r1, #12
    35d0:	b5e0      	push	{r5, r6, r7, lr}
    35d2:	004e      	lsls	r6, r1, #1
    35d4:	0fc9      	lsrs	r1, r1, #31
    35d6:	4688      	mov	r8, r1
    35d8:	000d      	movs	r5, r1
    35da:	0a61      	lsrs	r1, r4, #9
    35dc:	0f44      	lsrs	r4, r0, #29
    35de:	430c      	orrs	r4, r1
    35e0:	00c7      	lsls	r7, r0, #3
    35e2:	0319      	lsls	r1, r3, #12
    35e4:	0058      	lsls	r0, r3, #1
    35e6:	0fdb      	lsrs	r3, r3, #31
    35e8:	469b      	mov	fp, r3
    35ea:	0a4b      	lsrs	r3, r1, #9
    35ec:	0f51      	lsrs	r1, r2, #29
    35ee:	430b      	orrs	r3, r1
    35f0:	0d76      	lsrs	r6, r6, #21
    35f2:	0d40      	lsrs	r0, r0, #21
    35f4:	0019      	movs	r1, r3
    35f6:	00d2      	lsls	r2, r2, #3
    35f8:	45d8      	cmp	r8, fp
    35fa:	d100      	bne.n	35fe <__aeabi_dadd+0x3a>
    35fc:	e0ae      	b.n	375c <__aeabi_dadd+0x198>
    35fe:	1a35      	subs	r5, r6, r0
    3600:	2d00      	cmp	r5, #0
    3602:	dc00      	bgt.n	3606 <__aeabi_dadd+0x42>
    3604:	e0f6      	b.n	37f4 <__aeabi_dadd+0x230>
    3606:	2800      	cmp	r0, #0
    3608:	d10f      	bne.n	362a <__aeabi_dadd+0x66>
    360a:	4313      	orrs	r3, r2
    360c:	d100      	bne.n	3610 <__aeabi_dadd+0x4c>
    360e:	e0db      	b.n	37c8 <__aeabi_dadd+0x204>
    3610:	1e6b      	subs	r3, r5, #1
    3612:	2b00      	cmp	r3, #0
    3614:	d000      	beq.n	3618 <__aeabi_dadd+0x54>
    3616:	e137      	b.n	3888 <__aeabi_dadd+0x2c4>
    3618:	1aba      	subs	r2, r7, r2
    361a:	4297      	cmp	r7, r2
    361c:	41bf      	sbcs	r7, r7
    361e:	1a64      	subs	r4, r4, r1
    3620:	427f      	negs	r7, r7
    3622:	1be4      	subs	r4, r4, r7
    3624:	2601      	movs	r6, #1
    3626:	0017      	movs	r7, r2
    3628:	e024      	b.n	3674 <__aeabi_dadd+0xb0>
    362a:	4bc6      	ldr	r3, [pc, #792]	; (3944 <__aeabi_dadd+0x380>)
    362c:	429e      	cmp	r6, r3
    362e:	d04d      	beq.n	36cc <__aeabi_dadd+0x108>
    3630:	2380      	movs	r3, #128	; 0x80
    3632:	041b      	lsls	r3, r3, #16
    3634:	4319      	orrs	r1, r3
    3636:	2d38      	cmp	r5, #56	; 0x38
    3638:	dd00      	ble.n	363c <__aeabi_dadd+0x78>
    363a:	e107      	b.n	384c <__aeabi_dadd+0x288>
    363c:	2d1f      	cmp	r5, #31
    363e:	dd00      	ble.n	3642 <__aeabi_dadd+0x7e>
    3640:	e138      	b.n	38b4 <__aeabi_dadd+0x2f0>
    3642:	2020      	movs	r0, #32
    3644:	1b43      	subs	r3, r0, r5
    3646:	469a      	mov	sl, r3
    3648:	000b      	movs	r3, r1
    364a:	4650      	mov	r0, sl
    364c:	4083      	lsls	r3, r0
    364e:	4699      	mov	r9, r3
    3650:	0013      	movs	r3, r2
    3652:	4648      	mov	r0, r9
    3654:	40eb      	lsrs	r3, r5
    3656:	4318      	orrs	r0, r3
    3658:	0003      	movs	r3, r0
    365a:	4650      	mov	r0, sl
    365c:	4082      	lsls	r2, r0
    365e:	1e50      	subs	r0, r2, #1
    3660:	4182      	sbcs	r2, r0
    3662:	40e9      	lsrs	r1, r5
    3664:	431a      	orrs	r2, r3
    3666:	1aba      	subs	r2, r7, r2
    3668:	1a61      	subs	r1, r4, r1
    366a:	4297      	cmp	r7, r2
    366c:	41a4      	sbcs	r4, r4
    366e:	0017      	movs	r7, r2
    3670:	4264      	negs	r4, r4
    3672:	1b0c      	subs	r4, r1, r4
    3674:	0223      	lsls	r3, r4, #8
    3676:	d562      	bpl.n	373e <__aeabi_dadd+0x17a>
    3678:	0264      	lsls	r4, r4, #9
    367a:	0a65      	lsrs	r5, r4, #9
    367c:	2d00      	cmp	r5, #0
    367e:	d100      	bne.n	3682 <__aeabi_dadd+0xbe>
    3680:	e0df      	b.n	3842 <__aeabi_dadd+0x27e>
    3682:	0028      	movs	r0, r5
    3684:	f001 fd56 	bl	5134 <__clzsi2>
    3688:	0003      	movs	r3, r0
    368a:	3b08      	subs	r3, #8
    368c:	2b1f      	cmp	r3, #31
    368e:	dd00      	ble.n	3692 <__aeabi_dadd+0xce>
    3690:	e0d2      	b.n	3838 <__aeabi_dadd+0x274>
    3692:	2220      	movs	r2, #32
    3694:	003c      	movs	r4, r7
    3696:	1ad2      	subs	r2, r2, r3
    3698:	409d      	lsls	r5, r3
    369a:	40d4      	lsrs	r4, r2
    369c:	409f      	lsls	r7, r3
    369e:	4325      	orrs	r5, r4
    36a0:	429e      	cmp	r6, r3
    36a2:	dd00      	ble.n	36a6 <__aeabi_dadd+0xe2>
    36a4:	e0c4      	b.n	3830 <__aeabi_dadd+0x26c>
    36a6:	1b9e      	subs	r6, r3, r6
    36a8:	1c73      	adds	r3, r6, #1
    36aa:	2b1f      	cmp	r3, #31
    36ac:	dd00      	ble.n	36b0 <__aeabi_dadd+0xec>
    36ae:	e0f1      	b.n	3894 <__aeabi_dadd+0x2d0>
    36b0:	2220      	movs	r2, #32
    36b2:	0038      	movs	r0, r7
    36b4:	0029      	movs	r1, r5
    36b6:	1ad2      	subs	r2, r2, r3
    36b8:	40d8      	lsrs	r0, r3
    36ba:	4091      	lsls	r1, r2
    36bc:	4097      	lsls	r7, r2
    36be:	002c      	movs	r4, r5
    36c0:	4301      	orrs	r1, r0
    36c2:	1e78      	subs	r0, r7, #1
    36c4:	4187      	sbcs	r7, r0
    36c6:	40dc      	lsrs	r4, r3
    36c8:	2600      	movs	r6, #0
    36ca:	430f      	orrs	r7, r1
    36cc:	077b      	lsls	r3, r7, #29
    36ce:	d009      	beq.n	36e4 <__aeabi_dadd+0x120>
    36d0:	230f      	movs	r3, #15
    36d2:	403b      	ands	r3, r7
    36d4:	2b04      	cmp	r3, #4
    36d6:	d005      	beq.n	36e4 <__aeabi_dadd+0x120>
    36d8:	1d3b      	adds	r3, r7, #4
    36da:	42bb      	cmp	r3, r7
    36dc:	41bf      	sbcs	r7, r7
    36de:	427f      	negs	r7, r7
    36e0:	19e4      	adds	r4, r4, r7
    36e2:	001f      	movs	r7, r3
    36e4:	0223      	lsls	r3, r4, #8
    36e6:	d52c      	bpl.n	3742 <__aeabi_dadd+0x17e>
    36e8:	4b96      	ldr	r3, [pc, #600]	; (3944 <__aeabi_dadd+0x380>)
    36ea:	3601      	adds	r6, #1
    36ec:	429e      	cmp	r6, r3
    36ee:	d100      	bne.n	36f2 <__aeabi_dadd+0x12e>
    36f0:	e09a      	b.n	3828 <__aeabi_dadd+0x264>
    36f2:	4645      	mov	r5, r8
    36f4:	4b94      	ldr	r3, [pc, #592]	; (3948 <__aeabi_dadd+0x384>)
    36f6:	08ff      	lsrs	r7, r7, #3
    36f8:	401c      	ands	r4, r3
    36fa:	0760      	lsls	r0, r4, #29
    36fc:	0576      	lsls	r6, r6, #21
    36fe:	0264      	lsls	r4, r4, #9
    3700:	4307      	orrs	r7, r0
    3702:	0b24      	lsrs	r4, r4, #12
    3704:	0d76      	lsrs	r6, r6, #21
    3706:	2100      	movs	r1, #0
    3708:	0324      	lsls	r4, r4, #12
    370a:	0b23      	lsrs	r3, r4, #12
    370c:	0d0c      	lsrs	r4, r1, #20
    370e:	4a8f      	ldr	r2, [pc, #572]	; (394c <__aeabi_dadd+0x388>)
    3710:	0524      	lsls	r4, r4, #20
    3712:	431c      	orrs	r4, r3
    3714:	4014      	ands	r4, r2
    3716:	0533      	lsls	r3, r6, #20
    3718:	4323      	orrs	r3, r4
    371a:	005b      	lsls	r3, r3, #1
    371c:	07ed      	lsls	r5, r5, #31
    371e:	085b      	lsrs	r3, r3, #1
    3720:	432b      	orrs	r3, r5
    3722:	0038      	movs	r0, r7
    3724:	0019      	movs	r1, r3
    3726:	bc3c      	pop	{r2, r3, r4, r5}
    3728:	4690      	mov	r8, r2
    372a:	4699      	mov	r9, r3
    372c:	46a2      	mov	sl, r4
    372e:	46ab      	mov	fp, r5
    3730:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3732:	4664      	mov	r4, ip
    3734:	4304      	orrs	r4, r0
    3736:	d100      	bne.n	373a <__aeabi_dadd+0x176>
    3738:	e211      	b.n	3b5e <__aeabi_dadd+0x59a>
    373a:	0004      	movs	r4, r0
    373c:	4667      	mov	r7, ip
    373e:	077b      	lsls	r3, r7, #29
    3740:	d1c6      	bne.n	36d0 <__aeabi_dadd+0x10c>
    3742:	4645      	mov	r5, r8
    3744:	0760      	lsls	r0, r4, #29
    3746:	08ff      	lsrs	r7, r7, #3
    3748:	4307      	orrs	r7, r0
    374a:	08e4      	lsrs	r4, r4, #3
    374c:	4b7d      	ldr	r3, [pc, #500]	; (3944 <__aeabi_dadd+0x380>)
    374e:	429e      	cmp	r6, r3
    3750:	d030      	beq.n	37b4 <__aeabi_dadd+0x1f0>
    3752:	0324      	lsls	r4, r4, #12
    3754:	0576      	lsls	r6, r6, #21
    3756:	0b24      	lsrs	r4, r4, #12
    3758:	0d76      	lsrs	r6, r6, #21
    375a:	e7d4      	b.n	3706 <__aeabi_dadd+0x142>
    375c:	1a33      	subs	r3, r6, r0
    375e:	469a      	mov	sl, r3
    3760:	2b00      	cmp	r3, #0
    3762:	dd78      	ble.n	3856 <__aeabi_dadd+0x292>
    3764:	2800      	cmp	r0, #0
    3766:	d031      	beq.n	37cc <__aeabi_dadd+0x208>
    3768:	4876      	ldr	r0, [pc, #472]	; (3944 <__aeabi_dadd+0x380>)
    376a:	4286      	cmp	r6, r0
    376c:	d0ae      	beq.n	36cc <__aeabi_dadd+0x108>
    376e:	2080      	movs	r0, #128	; 0x80
    3770:	0400      	lsls	r0, r0, #16
    3772:	4301      	orrs	r1, r0
    3774:	4653      	mov	r3, sl
    3776:	2b38      	cmp	r3, #56	; 0x38
    3778:	dc00      	bgt.n	377c <__aeabi_dadd+0x1b8>
    377a:	e0e9      	b.n	3950 <__aeabi_dadd+0x38c>
    377c:	430a      	orrs	r2, r1
    377e:	1e51      	subs	r1, r2, #1
    3780:	418a      	sbcs	r2, r1
    3782:	2100      	movs	r1, #0
    3784:	19d2      	adds	r2, r2, r7
    3786:	42ba      	cmp	r2, r7
    3788:	41bf      	sbcs	r7, r7
    378a:	1909      	adds	r1, r1, r4
    378c:	427c      	negs	r4, r7
    378e:	0017      	movs	r7, r2
    3790:	190c      	adds	r4, r1, r4
    3792:	0223      	lsls	r3, r4, #8
    3794:	d5d3      	bpl.n	373e <__aeabi_dadd+0x17a>
    3796:	4b6b      	ldr	r3, [pc, #428]	; (3944 <__aeabi_dadd+0x380>)
    3798:	3601      	adds	r6, #1
    379a:	429e      	cmp	r6, r3
    379c:	d100      	bne.n	37a0 <__aeabi_dadd+0x1dc>
    379e:	e13a      	b.n	3a16 <__aeabi_dadd+0x452>
    37a0:	2001      	movs	r0, #1
    37a2:	4b69      	ldr	r3, [pc, #420]	; (3948 <__aeabi_dadd+0x384>)
    37a4:	401c      	ands	r4, r3
    37a6:	087b      	lsrs	r3, r7, #1
    37a8:	4007      	ands	r7, r0
    37aa:	431f      	orrs	r7, r3
    37ac:	07e0      	lsls	r0, r4, #31
    37ae:	4307      	orrs	r7, r0
    37b0:	0864      	lsrs	r4, r4, #1
    37b2:	e78b      	b.n	36cc <__aeabi_dadd+0x108>
    37b4:	0023      	movs	r3, r4
    37b6:	433b      	orrs	r3, r7
    37b8:	d100      	bne.n	37bc <__aeabi_dadd+0x1f8>
    37ba:	e1cb      	b.n	3b54 <__aeabi_dadd+0x590>
    37bc:	2280      	movs	r2, #128	; 0x80
    37be:	0312      	lsls	r2, r2, #12
    37c0:	4314      	orrs	r4, r2
    37c2:	0324      	lsls	r4, r4, #12
    37c4:	0b24      	lsrs	r4, r4, #12
    37c6:	e79e      	b.n	3706 <__aeabi_dadd+0x142>
    37c8:	002e      	movs	r6, r5
    37ca:	e77f      	b.n	36cc <__aeabi_dadd+0x108>
    37cc:	0008      	movs	r0, r1
    37ce:	4310      	orrs	r0, r2
    37d0:	d100      	bne.n	37d4 <__aeabi_dadd+0x210>
    37d2:	e0b4      	b.n	393e <__aeabi_dadd+0x37a>
    37d4:	1e58      	subs	r0, r3, #1
    37d6:	2800      	cmp	r0, #0
    37d8:	d000      	beq.n	37dc <__aeabi_dadd+0x218>
    37da:	e0de      	b.n	399a <__aeabi_dadd+0x3d6>
    37dc:	18ba      	adds	r2, r7, r2
    37de:	42ba      	cmp	r2, r7
    37e0:	419b      	sbcs	r3, r3
    37e2:	1864      	adds	r4, r4, r1
    37e4:	425b      	negs	r3, r3
    37e6:	18e4      	adds	r4, r4, r3
    37e8:	0017      	movs	r7, r2
    37ea:	2601      	movs	r6, #1
    37ec:	0223      	lsls	r3, r4, #8
    37ee:	d5a6      	bpl.n	373e <__aeabi_dadd+0x17a>
    37f0:	2602      	movs	r6, #2
    37f2:	e7d5      	b.n	37a0 <__aeabi_dadd+0x1dc>
    37f4:	2d00      	cmp	r5, #0
    37f6:	d16e      	bne.n	38d6 <__aeabi_dadd+0x312>
    37f8:	1c70      	adds	r0, r6, #1
    37fa:	0540      	lsls	r0, r0, #21
    37fc:	0d40      	lsrs	r0, r0, #21
    37fe:	2801      	cmp	r0, #1
    3800:	dc00      	bgt.n	3804 <__aeabi_dadd+0x240>
    3802:	e0f9      	b.n	39f8 <__aeabi_dadd+0x434>
    3804:	1ab8      	subs	r0, r7, r2
    3806:	4684      	mov	ip, r0
    3808:	4287      	cmp	r7, r0
    380a:	4180      	sbcs	r0, r0
    380c:	1ae5      	subs	r5, r4, r3
    380e:	4240      	negs	r0, r0
    3810:	1a2d      	subs	r5, r5, r0
    3812:	0228      	lsls	r0, r5, #8
    3814:	d400      	bmi.n	3818 <__aeabi_dadd+0x254>
    3816:	e089      	b.n	392c <__aeabi_dadd+0x368>
    3818:	1bd7      	subs	r7, r2, r7
    381a:	42ba      	cmp	r2, r7
    381c:	4192      	sbcs	r2, r2
    381e:	1b1c      	subs	r4, r3, r4
    3820:	4252      	negs	r2, r2
    3822:	1aa5      	subs	r5, r4, r2
    3824:	46d8      	mov	r8, fp
    3826:	e729      	b.n	367c <__aeabi_dadd+0xb8>
    3828:	4645      	mov	r5, r8
    382a:	2400      	movs	r4, #0
    382c:	2700      	movs	r7, #0
    382e:	e76a      	b.n	3706 <__aeabi_dadd+0x142>
    3830:	4c45      	ldr	r4, [pc, #276]	; (3948 <__aeabi_dadd+0x384>)
    3832:	1af6      	subs	r6, r6, r3
    3834:	402c      	ands	r4, r5
    3836:	e749      	b.n	36cc <__aeabi_dadd+0x108>
    3838:	003d      	movs	r5, r7
    383a:	3828      	subs	r0, #40	; 0x28
    383c:	4085      	lsls	r5, r0
    383e:	2700      	movs	r7, #0
    3840:	e72e      	b.n	36a0 <__aeabi_dadd+0xdc>
    3842:	0038      	movs	r0, r7
    3844:	f001 fc76 	bl	5134 <__clzsi2>
    3848:	3020      	adds	r0, #32
    384a:	e71d      	b.n	3688 <__aeabi_dadd+0xc4>
    384c:	430a      	orrs	r2, r1
    384e:	1e51      	subs	r1, r2, #1
    3850:	418a      	sbcs	r2, r1
    3852:	2100      	movs	r1, #0
    3854:	e707      	b.n	3666 <__aeabi_dadd+0xa2>
    3856:	2b00      	cmp	r3, #0
    3858:	d000      	beq.n	385c <__aeabi_dadd+0x298>
    385a:	e0f3      	b.n	3a44 <__aeabi_dadd+0x480>
    385c:	1c70      	adds	r0, r6, #1
    385e:	0543      	lsls	r3, r0, #21
    3860:	0d5b      	lsrs	r3, r3, #21
    3862:	2b01      	cmp	r3, #1
    3864:	dc00      	bgt.n	3868 <__aeabi_dadd+0x2a4>
    3866:	e0ad      	b.n	39c4 <__aeabi_dadd+0x400>
    3868:	4b36      	ldr	r3, [pc, #216]	; (3944 <__aeabi_dadd+0x380>)
    386a:	4298      	cmp	r0, r3
    386c:	d100      	bne.n	3870 <__aeabi_dadd+0x2ac>
    386e:	e0d1      	b.n	3a14 <__aeabi_dadd+0x450>
    3870:	18ba      	adds	r2, r7, r2
    3872:	42ba      	cmp	r2, r7
    3874:	41bf      	sbcs	r7, r7
    3876:	1864      	adds	r4, r4, r1
    3878:	427f      	negs	r7, r7
    387a:	19e4      	adds	r4, r4, r7
    387c:	07e7      	lsls	r7, r4, #31
    387e:	0852      	lsrs	r2, r2, #1
    3880:	4317      	orrs	r7, r2
    3882:	0864      	lsrs	r4, r4, #1
    3884:	0006      	movs	r6, r0
    3886:	e721      	b.n	36cc <__aeabi_dadd+0x108>
    3888:	482e      	ldr	r0, [pc, #184]	; (3944 <__aeabi_dadd+0x380>)
    388a:	4285      	cmp	r5, r0
    388c:	d100      	bne.n	3890 <__aeabi_dadd+0x2cc>
    388e:	e093      	b.n	39b8 <__aeabi_dadd+0x3f4>
    3890:	001d      	movs	r5, r3
    3892:	e6d0      	b.n	3636 <__aeabi_dadd+0x72>
    3894:	0029      	movs	r1, r5
    3896:	3e1f      	subs	r6, #31
    3898:	40f1      	lsrs	r1, r6
    389a:	2b20      	cmp	r3, #32
    389c:	d100      	bne.n	38a0 <__aeabi_dadd+0x2dc>
    389e:	e08d      	b.n	39bc <__aeabi_dadd+0x3f8>
    38a0:	2240      	movs	r2, #64	; 0x40
    38a2:	1ad3      	subs	r3, r2, r3
    38a4:	409d      	lsls	r5, r3
    38a6:	432f      	orrs	r7, r5
    38a8:	1e7d      	subs	r5, r7, #1
    38aa:	41af      	sbcs	r7, r5
    38ac:	2400      	movs	r4, #0
    38ae:	430f      	orrs	r7, r1
    38b0:	2600      	movs	r6, #0
    38b2:	e744      	b.n	373e <__aeabi_dadd+0x17a>
    38b4:	002b      	movs	r3, r5
    38b6:	0008      	movs	r0, r1
    38b8:	3b20      	subs	r3, #32
    38ba:	40d8      	lsrs	r0, r3
    38bc:	0003      	movs	r3, r0
    38be:	2d20      	cmp	r5, #32
    38c0:	d100      	bne.n	38c4 <__aeabi_dadd+0x300>
    38c2:	e07d      	b.n	39c0 <__aeabi_dadd+0x3fc>
    38c4:	2040      	movs	r0, #64	; 0x40
    38c6:	1b45      	subs	r5, r0, r5
    38c8:	40a9      	lsls	r1, r5
    38ca:	430a      	orrs	r2, r1
    38cc:	1e51      	subs	r1, r2, #1
    38ce:	418a      	sbcs	r2, r1
    38d0:	2100      	movs	r1, #0
    38d2:	431a      	orrs	r2, r3
    38d4:	e6c7      	b.n	3666 <__aeabi_dadd+0xa2>
    38d6:	2e00      	cmp	r6, #0
    38d8:	d050      	beq.n	397c <__aeabi_dadd+0x3b8>
    38da:	4e1a      	ldr	r6, [pc, #104]	; (3944 <__aeabi_dadd+0x380>)
    38dc:	42b0      	cmp	r0, r6
    38de:	d057      	beq.n	3990 <__aeabi_dadd+0x3cc>
    38e0:	2680      	movs	r6, #128	; 0x80
    38e2:	426b      	negs	r3, r5
    38e4:	4699      	mov	r9, r3
    38e6:	0436      	lsls	r6, r6, #16
    38e8:	4334      	orrs	r4, r6
    38ea:	464b      	mov	r3, r9
    38ec:	2b38      	cmp	r3, #56	; 0x38
    38ee:	dd00      	ble.n	38f2 <__aeabi_dadd+0x32e>
    38f0:	e0d6      	b.n	3aa0 <__aeabi_dadd+0x4dc>
    38f2:	2b1f      	cmp	r3, #31
    38f4:	dd00      	ble.n	38f8 <__aeabi_dadd+0x334>
    38f6:	e135      	b.n	3b64 <__aeabi_dadd+0x5a0>
    38f8:	2620      	movs	r6, #32
    38fa:	1af5      	subs	r5, r6, r3
    38fc:	0026      	movs	r6, r4
    38fe:	40ae      	lsls	r6, r5
    3900:	46b2      	mov	sl, r6
    3902:	003e      	movs	r6, r7
    3904:	40de      	lsrs	r6, r3
    3906:	46ac      	mov	ip, r5
    3908:	0035      	movs	r5, r6
    390a:	4656      	mov	r6, sl
    390c:	432e      	orrs	r6, r5
    390e:	4665      	mov	r5, ip
    3910:	40af      	lsls	r7, r5
    3912:	1e7d      	subs	r5, r7, #1
    3914:	41af      	sbcs	r7, r5
    3916:	40dc      	lsrs	r4, r3
    3918:	4337      	orrs	r7, r6
    391a:	1bd7      	subs	r7, r2, r7
    391c:	42ba      	cmp	r2, r7
    391e:	4192      	sbcs	r2, r2
    3920:	1b0c      	subs	r4, r1, r4
    3922:	4252      	negs	r2, r2
    3924:	1aa4      	subs	r4, r4, r2
    3926:	0006      	movs	r6, r0
    3928:	46d8      	mov	r8, fp
    392a:	e6a3      	b.n	3674 <__aeabi_dadd+0xb0>
    392c:	4664      	mov	r4, ip
    392e:	4667      	mov	r7, ip
    3930:	432c      	orrs	r4, r5
    3932:	d000      	beq.n	3936 <__aeabi_dadd+0x372>
    3934:	e6a2      	b.n	367c <__aeabi_dadd+0xb8>
    3936:	2500      	movs	r5, #0
    3938:	2600      	movs	r6, #0
    393a:	2700      	movs	r7, #0
    393c:	e706      	b.n	374c <__aeabi_dadd+0x188>
    393e:	001e      	movs	r6, r3
    3940:	e6c4      	b.n	36cc <__aeabi_dadd+0x108>
    3942:	46c0      	nop			; (mov r8, r8)
    3944:	000007ff 	.word	0x000007ff
    3948:	ff7fffff 	.word	0xff7fffff
    394c:	800fffff 	.word	0x800fffff
    3950:	2b1f      	cmp	r3, #31
    3952:	dc63      	bgt.n	3a1c <__aeabi_dadd+0x458>
    3954:	2020      	movs	r0, #32
    3956:	1ac3      	subs	r3, r0, r3
    3958:	0008      	movs	r0, r1
    395a:	4098      	lsls	r0, r3
    395c:	469c      	mov	ip, r3
    395e:	4683      	mov	fp, r0
    3960:	4653      	mov	r3, sl
    3962:	0010      	movs	r0, r2
    3964:	40d8      	lsrs	r0, r3
    3966:	0003      	movs	r3, r0
    3968:	4658      	mov	r0, fp
    396a:	4318      	orrs	r0, r3
    396c:	4663      	mov	r3, ip
    396e:	409a      	lsls	r2, r3
    3970:	1e53      	subs	r3, r2, #1
    3972:	419a      	sbcs	r2, r3
    3974:	4653      	mov	r3, sl
    3976:	4302      	orrs	r2, r0
    3978:	40d9      	lsrs	r1, r3
    397a:	e703      	b.n	3784 <__aeabi_dadd+0x1c0>
    397c:	0026      	movs	r6, r4
    397e:	433e      	orrs	r6, r7
    3980:	d006      	beq.n	3990 <__aeabi_dadd+0x3cc>
    3982:	43eb      	mvns	r3, r5
    3984:	4699      	mov	r9, r3
    3986:	2b00      	cmp	r3, #0
    3988:	d0c7      	beq.n	391a <__aeabi_dadd+0x356>
    398a:	4e94      	ldr	r6, [pc, #592]	; (3bdc <__aeabi_dadd+0x618>)
    398c:	42b0      	cmp	r0, r6
    398e:	d1ac      	bne.n	38ea <__aeabi_dadd+0x326>
    3990:	000c      	movs	r4, r1
    3992:	0017      	movs	r7, r2
    3994:	0006      	movs	r6, r0
    3996:	46d8      	mov	r8, fp
    3998:	e698      	b.n	36cc <__aeabi_dadd+0x108>
    399a:	4b90      	ldr	r3, [pc, #576]	; (3bdc <__aeabi_dadd+0x618>)
    399c:	459a      	cmp	sl, r3
    399e:	d00b      	beq.n	39b8 <__aeabi_dadd+0x3f4>
    39a0:	4682      	mov	sl, r0
    39a2:	e6e7      	b.n	3774 <__aeabi_dadd+0x1b0>
    39a4:	2800      	cmp	r0, #0
    39a6:	d000      	beq.n	39aa <__aeabi_dadd+0x3e6>
    39a8:	e09e      	b.n	3ae8 <__aeabi_dadd+0x524>
    39aa:	0018      	movs	r0, r3
    39ac:	4310      	orrs	r0, r2
    39ae:	d100      	bne.n	39b2 <__aeabi_dadd+0x3ee>
    39b0:	e0e9      	b.n	3b86 <__aeabi_dadd+0x5c2>
    39b2:	001c      	movs	r4, r3
    39b4:	0017      	movs	r7, r2
    39b6:	46d8      	mov	r8, fp
    39b8:	4e88      	ldr	r6, [pc, #544]	; (3bdc <__aeabi_dadd+0x618>)
    39ba:	e687      	b.n	36cc <__aeabi_dadd+0x108>
    39bc:	2500      	movs	r5, #0
    39be:	e772      	b.n	38a6 <__aeabi_dadd+0x2e2>
    39c0:	2100      	movs	r1, #0
    39c2:	e782      	b.n	38ca <__aeabi_dadd+0x306>
    39c4:	0023      	movs	r3, r4
    39c6:	433b      	orrs	r3, r7
    39c8:	2e00      	cmp	r6, #0
    39ca:	d000      	beq.n	39ce <__aeabi_dadd+0x40a>
    39cc:	e0ab      	b.n	3b26 <__aeabi_dadd+0x562>
    39ce:	2b00      	cmp	r3, #0
    39d0:	d100      	bne.n	39d4 <__aeabi_dadd+0x410>
    39d2:	e0e7      	b.n	3ba4 <__aeabi_dadd+0x5e0>
    39d4:	000b      	movs	r3, r1
    39d6:	4313      	orrs	r3, r2
    39d8:	d100      	bne.n	39dc <__aeabi_dadd+0x418>
    39da:	e677      	b.n	36cc <__aeabi_dadd+0x108>
    39dc:	18ba      	adds	r2, r7, r2
    39de:	42ba      	cmp	r2, r7
    39e0:	41bf      	sbcs	r7, r7
    39e2:	1864      	adds	r4, r4, r1
    39e4:	427f      	negs	r7, r7
    39e6:	19e4      	adds	r4, r4, r7
    39e8:	0223      	lsls	r3, r4, #8
    39ea:	d400      	bmi.n	39ee <__aeabi_dadd+0x42a>
    39ec:	e0f2      	b.n	3bd4 <__aeabi_dadd+0x610>
    39ee:	4b7c      	ldr	r3, [pc, #496]	; (3be0 <__aeabi_dadd+0x61c>)
    39f0:	0017      	movs	r7, r2
    39f2:	401c      	ands	r4, r3
    39f4:	0006      	movs	r6, r0
    39f6:	e669      	b.n	36cc <__aeabi_dadd+0x108>
    39f8:	0020      	movs	r0, r4
    39fa:	4338      	orrs	r0, r7
    39fc:	2e00      	cmp	r6, #0
    39fe:	d1d1      	bne.n	39a4 <__aeabi_dadd+0x3e0>
    3a00:	2800      	cmp	r0, #0
    3a02:	d15b      	bne.n	3abc <__aeabi_dadd+0x4f8>
    3a04:	001c      	movs	r4, r3
    3a06:	4314      	orrs	r4, r2
    3a08:	d100      	bne.n	3a0c <__aeabi_dadd+0x448>
    3a0a:	e0a8      	b.n	3b5e <__aeabi_dadd+0x59a>
    3a0c:	001c      	movs	r4, r3
    3a0e:	0017      	movs	r7, r2
    3a10:	46d8      	mov	r8, fp
    3a12:	e65b      	b.n	36cc <__aeabi_dadd+0x108>
    3a14:	0006      	movs	r6, r0
    3a16:	2400      	movs	r4, #0
    3a18:	2700      	movs	r7, #0
    3a1a:	e697      	b.n	374c <__aeabi_dadd+0x188>
    3a1c:	4650      	mov	r0, sl
    3a1e:	000b      	movs	r3, r1
    3a20:	3820      	subs	r0, #32
    3a22:	40c3      	lsrs	r3, r0
    3a24:	4699      	mov	r9, r3
    3a26:	4653      	mov	r3, sl
    3a28:	2b20      	cmp	r3, #32
    3a2a:	d100      	bne.n	3a2e <__aeabi_dadd+0x46a>
    3a2c:	e095      	b.n	3b5a <__aeabi_dadd+0x596>
    3a2e:	2340      	movs	r3, #64	; 0x40
    3a30:	4650      	mov	r0, sl
    3a32:	1a1b      	subs	r3, r3, r0
    3a34:	4099      	lsls	r1, r3
    3a36:	430a      	orrs	r2, r1
    3a38:	1e51      	subs	r1, r2, #1
    3a3a:	418a      	sbcs	r2, r1
    3a3c:	464b      	mov	r3, r9
    3a3e:	2100      	movs	r1, #0
    3a40:	431a      	orrs	r2, r3
    3a42:	e69f      	b.n	3784 <__aeabi_dadd+0x1c0>
    3a44:	2e00      	cmp	r6, #0
    3a46:	d130      	bne.n	3aaa <__aeabi_dadd+0x4e6>
    3a48:	0026      	movs	r6, r4
    3a4a:	433e      	orrs	r6, r7
    3a4c:	d067      	beq.n	3b1e <__aeabi_dadd+0x55a>
    3a4e:	43db      	mvns	r3, r3
    3a50:	469a      	mov	sl, r3
    3a52:	2b00      	cmp	r3, #0
    3a54:	d01c      	beq.n	3a90 <__aeabi_dadd+0x4cc>
    3a56:	4e61      	ldr	r6, [pc, #388]	; (3bdc <__aeabi_dadd+0x618>)
    3a58:	42b0      	cmp	r0, r6
    3a5a:	d060      	beq.n	3b1e <__aeabi_dadd+0x55a>
    3a5c:	4653      	mov	r3, sl
    3a5e:	2b38      	cmp	r3, #56	; 0x38
    3a60:	dd00      	ble.n	3a64 <__aeabi_dadd+0x4a0>
    3a62:	e096      	b.n	3b92 <__aeabi_dadd+0x5ce>
    3a64:	2b1f      	cmp	r3, #31
    3a66:	dd00      	ble.n	3a6a <__aeabi_dadd+0x4a6>
    3a68:	e09f      	b.n	3baa <__aeabi_dadd+0x5e6>
    3a6a:	2620      	movs	r6, #32
    3a6c:	1af3      	subs	r3, r6, r3
    3a6e:	0026      	movs	r6, r4
    3a70:	409e      	lsls	r6, r3
    3a72:	469c      	mov	ip, r3
    3a74:	46b3      	mov	fp, r6
    3a76:	4653      	mov	r3, sl
    3a78:	003e      	movs	r6, r7
    3a7a:	40de      	lsrs	r6, r3
    3a7c:	0033      	movs	r3, r6
    3a7e:	465e      	mov	r6, fp
    3a80:	431e      	orrs	r6, r3
    3a82:	4663      	mov	r3, ip
    3a84:	409f      	lsls	r7, r3
    3a86:	1e7b      	subs	r3, r7, #1
    3a88:	419f      	sbcs	r7, r3
    3a8a:	4653      	mov	r3, sl
    3a8c:	40dc      	lsrs	r4, r3
    3a8e:	4337      	orrs	r7, r6
    3a90:	18bf      	adds	r7, r7, r2
    3a92:	4297      	cmp	r7, r2
    3a94:	4192      	sbcs	r2, r2
    3a96:	1864      	adds	r4, r4, r1
    3a98:	4252      	negs	r2, r2
    3a9a:	18a4      	adds	r4, r4, r2
    3a9c:	0006      	movs	r6, r0
    3a9e:	e678      	b.n	3792 <__aeabi_dadd+0x1ce>
    3aa0:	4327      	orrs	r7, r4
    3aa2:	1e7c      	subs	r4, r7, #1
    3aa4:	41a7      	sbcs	r7, r4
    3aa6:	2400      	movs	r4, #0
    3aa8:	e737      	b.n	391a <__aeabi_dadd+0x356>
    3aaa:	4e4c      	ldr	r6, [pc, #304]	; (3bdc <__aeabi_dadd+0x618>)
    3aac:	42b0      	cmp	r0, r6
    3aae:	d036      	beq.n	3b1e <__aeabi_dadd+0x55a>
    3ab0:	2680      	movs	r6, #128	; 0x80
    3ab2:	425b      	negs	r3, r3
    3ab4:	0436      	lsls	r6, r6, #16
    3ab6:	469a      	mov	sl, r3
    3ab8:	4334      	orrs	r4, r6
    3aba:	e7cf      	b.n	3a5c <__aeabi_dadd+0x498>
    3abc:	0018      	movs	r0, r3
    3abe:	4310      	orrs	r0, r2
    3ac0:	d100      	bne.n	3ac4 <__aeabi_dadd+0x500>
    3ac2:	e603      	b.n	36cc <__aeabi_dadd+0x108>
    3ac4:	1ab8      	subs	r0, r7, r2
    3ac6:	4684      	mov	ip, r0
    3ac8:	4567      	cmp	r7, ip
    3aca:	41ad      	sbcs	r5, r5
    3acc:	1ae0      	subs	r0, r4, r3
    3ace:	426d      	negs	r5, r5
    3ad0:	1b40      	subs	r0, r0, r5
    3ad2:	0205      	lsls	r5, r0, #8
    3ad4:	d400      	bmi.n	3ad8 <__aeabi_dadd+0x514>
    3ad6:	e62c      	b.n	3732 <__aeabi_dadd+0x16e>
    3ad8:	1bd7      	subs	r7, r2, r7
    3ada:	42ba      	cmp	r2, r7
    3adc:	4192      	sbcs	r2, r2
    3ade:	1b1c      	subs	r4, r3, r4
    3ae0:	4252      	negs	r2, r2
    3ae2:	1aa4      	subs	r4, r4, r2
    3ae4:	46d8      	mov	r8, fp
    3ae6:	e5f1      	b.n	36cc <__aeabi_dadd+0x108>
    3ae8:	0018      	movs	r0, r3
    3aea:	4310      	orrs	r0, r2
    3aec:	d100      	bne.n	3af0 <__aeabi_dadd+0x52c>
    3aee:	e763      	b.n	39b8 <__aeabi_dadd+0x3f4>
    3af0:	08f8      	lsrs	r0, r7, #3
    3af2:	0767      	lsls	r7, r4, #29
    3af4:	4307      	orrs	r7, r0
    3af6:	2080      	movs	r0, #128	; 0x80
    3af8:	08e4      	lsrs	r4, r4, #3
    3afa:	0300      	lsls	r0, r0, #12
    3afc:	4204      	tst	r4, r0
    3afe:	d008      	beq.n	3b12 <__aeabi_dadd+0x54e>
    3b00:	08dd      	lsrs	r5, r3, #3
    3b02:	4205      	tst	r5, r0
    3b04:	d105      	bne.n	3b12 <__aeabi_dadd+0x54e>
    3b06:	08d2      	lsrs	r2, r2, #3
    3b08:	0759      	lsls	r1, r3, #29
    3b0a:	4311      	orrs	r1, r2
    3b0c:	000f      	movs	r7, r1
    3b0e:	002c      	movs	r4, r5
    3b10:	46d8      	mov	r8, fp
    3b12:	0f7b      	lsrs	r3, r7, #29
    3b14:	00e4      	lsls	r4, r4, #3
    3b16:	431c      	orrs	r4, r3
    3b18:	00ff      	lsls	r7, r7, #3
    3b1a:	4e30      	ldr	r6, [pc, #192]	; (3bdc <__aeabi_dadd+0x618>)
    3b1c:	e5d6      	b.n	36cc <__aeabi_dadd+0x108>
    3b1e:	000c      	movs	r4, r1
    3b20:	0017      	movs	r7, r2
    3b22:	0006      	movs	r6, r0
    3b24:	e5d2      	b.n	36cc <__aeabi_dadd+0x108>
    3b26:	2b00      	cmp	r3, #0
    3b28:	d038      	beq.n	3b9c <__aeabi_dadd+0x5d8>
    3b2a:	000b      	movs	r3, r1
    3b2c:	4313      	orrs	r3, r2
    3b2e:	d100      	bne.n	3b32 <__aeabi_dadd+0x56e>
    3b30:	e742      	b.n	39b8 <__aeabi_dadd+0x3f4>
    3b32:	08f8      	lsrs	r0, r7, #3
    3b34:	0767      	lsls	r7, r4, #29
    3b36:	4307      	orrs	r7, r0
    3b38:	2080      	movs	r0, #128	; 0x80
    3b3a:	08e4      	lsrs	r4, r4, #3
    3b3c:	0300      	lsls	r0, r0, #12
    3b3e:	4204      	tst	r4, r0
    3b40:	d0e7      	beq.n	3b12 <__aeabi_dadd+0x54e>
    3b42:	08cb      	lsrs	r3, r1, #3
    3b44:	4203      	tst	r3, r0
    3b46:	d1e4      	bne.n	3b12 <__aeabi_dadd+0x54e>
    3b48:	08d2      	lsrs	r2, r2, #3
    3b4a:	0749      	lsls	r1, r1, #29
    3b4c:	4311      	orrs	r1, r2
    3b4e:	000f      	movs	r7, r1
    3b50:	001c      	movs	r4, r3
    3b52:	e7de      	b.n	3b12 <__aeabi_dadd+0x54e>
    3b54:	2700      	movs	r7, #0
    3b56:	2400      	movs	r4, #0
    3b58:	e5d5      	b.n	3706 <__aeabi_dadd+0x142>
    3b5a:	2100      	movs	r1, #0
    3b5c:	e76b      	b.n	3a36 <__aeabi_dadd+0x472>
    3b5e:	2500      	movs	r5, #0
    3b60:	2700      	movs	r7, #0
    3b62:	e5f3      	b.n	374c <__aeabi_dadd+0x188>
    3b64:	464e      	mov	r6, r9
    3b66:	0025      	movs	r5, r4
    3b68:	3e20      	subs	r6, #32
    3b6a:	40f5      	lsrs	r5, r6
    3b6c:	464b      	mov	r3, r9
    3b6e:	002e      	movs	r6, r5
    3b70:	2b20      	cmp	r3, #32
    3b72:	d02d      	beq.n	3bd0 <__aeabi_dadd+0x60c>
    3b74:	2540      	movs	r5, #64	; 0x40
    3b76:	1aed      	subs	r5, r5, r3
    3b78:	40ac      	lsls	r4, r5
    3b7a:	4327      	orrs	r7, r4
    3b7c:	1e7c      	subs	r4, r7, #1
    3b7e:	41a7      	sbcs	r7, r4
    3b80:	2400      	movs	r4, #0
    3b82:	4337      	orrs	r7, r6
    3b84:	e6c9      	b.n	391a <__aeabi_dadd+0x356>
    3b86:	2480      	movs	r4, #128	; 0x80
    3b88:	2500      	movs	r5, #0
    3b8a:	0324      	lsls	r4, r4, #12
    3b8c:	4e13      	ldr	r6, [pc, #76]	; (3bdc <__aeabi_dadd+0x618>)
    3b8e:	2700      	movs	r7, #0
    3b90:	e5dc      	b.n	374c <__aeabi_dadd+0x188>
    3b92:	4327      	orrs	r7, r4
    3b94:	1e7c      	subs	r4, r7, #1
    3b96:	41a7      	sbcs	r7, r4
    3b98:	2400      	movs	r4, #0
    3b9a:	e779      	b.n	3a90 <__aeabi_dadd+0x4cc>
    3b9c:	000c      	movs	r4, r1
    3b9e:	0017      	movs	r7, r2
    3ba0:	4e0e      	ldr	r6, [pc, #56]	; (3bdc <__aeabi_dadd+0x618>)
    3ba2:	e593      	b.n	36cc <__aeabi_dadd+0x108>
    3ba4:	000c      	movs	r4, r1
    3ba6:	0017      	movs	r7, r2
    3ba8:	e590      	b.n	36cc <__aeabi_dadd+0x108>
    3baa:	4656      	mov	r6, sl
    3bac:	0023      	movs	r3, r4
    3bae:	3e20      	subs	r6, #32
    3bb0:	40f3      	lsrs	r3, r6
    3bb2:	4699      	mov	r9, r3
    3bb4:	4653      	mov	r3, sl
    3bb6:	2b20      	cmp	r3, #32
    3bb8:	d00e      	beq.n	3bd8 <__aeabi_dadd+0x614>
    3bba:	2340      	movs	r3, #64	; 0x40
    3bbc:	4656      	mov	r6, sl
    3bbe:	1b9b      	subs	r3, r3, r6
    3bc0:	409c      	lsls	r4, r3
    3bc2:	4327      	orrs	r7, r4
    3bc4:	1e7c      	subs	r4, r7, #1
    3bc6:	41a7      	sbcs	r7, r4
    3bc8:	464b      	mov	r3, r9
    3bca:	2400      	movs	r4, #0
    3bcc:	431f      	orrs	r7, r3
    3bce:	e75f      	b.n	3a90 <__aeabi_dadd+0x4cc>
    3bd0:	2400      	movs	r4, #0
    3bd2:	e7d2      	b.n	3b7a <__aeabi_dadd+0x5b6>
    3bd4:	0017      	movs	r7, r2
    3bd6:	e5b2      	b.n	373e <__aeabi_dadd+0x17a>
    3bd8:	2400      	movs	r4, #0
    3bda:	e7f2      	b.n	3bc2 <__aeabi_dadd+0x5fe>
    3bdc:	000007ff 	.word	0x000007ff
    3be0:	ff7fffff 	.word	0xff7fffff

00003be4 <__aeabi_ddiv>:
    3be4:	b5f0      	push	{r4, r5, r6, r7, lr}
    3be6:	4657      	mov	r7, sl
    3be8:	4645      	mov	r5, r8
    3bea:	46de      	mov	lr, fp
    3bec:	464e      	mov	r6, r9
    3bee:	b5e0      	push	{r5, r6, r7, lr}
    3bf0:	004c      	lsls	r4, r1, #1
    3bf2:	030e      	lsls	r6, r1, #12
    3bf4:	b087      	sub	sp, #28
    3bf6:	4683      	mov	fp, r0
    3bf8:	4692      	mov	sl, r2
    3bfa:	001d      	movs	r5, r3
    3bfc:	4680      	mov	r8, r0
    3bfe:	0b36      	lsrs	r6, r6, #12
    3c00:	0d64      	lsrs	r4, r4, #21
    3c02:	0fcf      	lsrs	r7, r1, #31
    3c04:	2c00      	cmp	r4, #0
    3c06:	d04f      	beq.n	3ca8 <__aeabi_ddiv+0xc4>
    3c08:	4b6f      	ldr	r3, [pc, #444]	; (3dc8 <__aeabi_ddiv+0x1e4>)
    3c0a:	429c      	cmp	r4, r3
    3c0c:	d035      	beq.n	3c7a <__aeabi_ddiv+0x96>
    3c0e:	2380      	movs	r3, #128	; 0x80
    3c10:	0f42      	lsrs	r2, r0, #29
    3c12:	041b      	lsls	r3, r3, #16
    3c14:	00f6      	lsls	r6, r6, #3
    3c16:	4313      	orrs	r3, r2
    3c18:	4333      	orrs	r3, r6
    3c1a:	4699      	mov	r9, r3
    3c1c:	00c3      	lsls	r3, r0, #3
    3c1e:	4698      	mov	r8, r3
    3c20:	4b6a      	ldr	r3, [pc, #424]	; (3dcc <__aeabi_ddiv+0x1e8>)
    3c22:	2600      	movs	r6, #0
    3c24:	469c      	mov	ip, r3
    3c26:	2300      	movs	r3, #0
    3c28:	4464      	add	r4, ip
    3c2a:	9303      	str	r3, [sp, #12]
    3c2c:	032b      	lsls	r3, r5, #12
    3c2e:	0b1b      	lsrs	r3, r3, #12
    3c30:	469b      	mov	fp, r3
    3c32:	006b      	lsls	r3, r5, #1
    3c34:	0fed      	lsrs	r5, r5, #31
    3c36:	4650      	mov	r0, sl
    3c38:	0d5b      	lsrs	r3, r3, #21
    3c3a:	9501      	str	r5, [sp, #4]
    3c3c:	d05e      	beq.n	3cfc <__aeabi_ddiv+0x118>
    3c3e:	4a62      	ldr	r2, [pc, #392]	; (3dc8 <__aeabi_ddiv+0x1e4>)
    3c40:	4293      	cmp	r3, r2
    3c42:	d053      	beq.n	3cec <__aeabi_ddiv+0x108>
    3c44:	465a      	mov	r2, fp
    3c46:	00d1      	lsls	r1, r2, #3
    3c48:	2280      	movs	r2, #128	; 0x80
    3c4a:	0f40      	lsrs	r0, r0, #29
    3c4c:	0412      	lsls	r2, r2, #16
    3c4e:	4302      	orrs	r2, r0
    3c50:	430a      	orrs	r2, r1
    3c52:	4693      	mov	fp, r2
    3c54:	4652      	mov	r2, sl
    3c56:	00d1      	lsls	r1, r2, #3
    3c58:	4a5c      	ldr	r2, [pc, #368]	; (3dcc <__aeabi_ddiv+0x1e8>)
    3c5a:	4694      	mov	ip, r2
    3c5c:	2200      	movs	r2, #0
    3c5e:	4463      	add	r3, ip
    3c60:	0038      	movs	r0, r7
    3c62:	4068      	eors	r0, r5
    3c64:	4684      	mov	ip, r0
    3c66:	9002      	str	r0, [sp, #8]
    3c68:	1ae4      	subs	r4, r4, r3
    3c6a:	4316      	orrs	r6, r2
    3c6c:	2e0f      	cmp	r6, #15
    3c6e:	d900      	bls.n	3c72 <__aeabi_ddiv+0x8e>
    3c70:	e0b4      	b.n	3ddc <__aeabi_ddiv+0x1f8>
    3c72:	4b57      	ldr	r3, [pc, #348]	; (3dd0 <__aeabi_ddiv+0x1ec>)
    3c74:	00b6      	lsls	r6, r6, #2
    3c76:	599b      	ldr	r3, [r3, r6]
    3c78:	469f      	mov	pc, r3
    3c7a:	0003      	movs	r3, r0
    3c7c:	4333      	orrs	r3, r6
    3c7e:	4699      	mov	r9, r3
    3c80:	d16c      	bne.n	3d5c <__aeabi_ddiv+0x178>
    3c82:	2300      	movs	r3, #0
    3c84:	4698      	mov	r8, r3
    3c86:	3302      	adds	r3, #2
    3c88:	2608      	movs	r6, #8
    3c8a:	9303      	str	r3, [sp, #12]
    3c8c:	e7ce      	b.n	3c2c <__aeabi_ddiv+0x48>
    3c8e:	46cb      	mov	fp, r9
    3c90:	4641      	mov	r1, r8
    3c92:	9a03      	ldr	r2, [sp, #12]
    3c94:	9701      	str	r7, [sp, #4]
    3c96:	2a02      	cmp	r2, #2
    3c98:	d165      	bne.n	3d66 <__aeabi_ddiv+0x182>
    3c9a:	9b01      	ldr	r3, [sp, #4]
    3c9c:	4c4a      	ldr	r4, [pc, #296]	; (3dc8 <__aeabi_ddiv+0x1e4>)
    3c9e:	469c      	mov	ip, r3
    3ca0:	2300      	movs	r3, #0
    3ca2:	2200      	movs	r2, #0
    3ca4:	4698      	mov	r8, r3
    3ca6:	e06b      	b.n	3d80 <__aeabi_ddiv+0x19c>
    3ca8:	0003      	movs	r3, r0
    3caa:	4333      	orrs	r3, r6
    3cac:	4699      	mov	r9, r3
    3cae:	d04e      	beq.n	3d4e <__aeabi_ddiv+0x16a>
    3cb0:	2e00      	cmp	r6, #0
    3cb2:	d100      	bne.n	3cb6 <__aeabi_ddiv+0xd2>
    3cb4:	e1bc      	b.n	4030 <__aeabi_ddiv+0x44c>
    3cb6:	0030      	movs	r0, r6
    3cb8:	f001 fa3c 	bl	5134 <__clzsi2>
    3cbc:	0003      	movs	r3, r0
    3cbe:	3b0b      	subs	r3, #11
    3cc0:	2b1c      	cmp	r3, #28
    3cc2:	dd00      	ble.n	3cc6 <__aeabi_ddiv+0xe2>
    3cc4:	e1ac      	b.n	4020 <__aeabi_ddiv+0x43c>
    3cc6:	221d      	movs	r2, #29
    3cc8:	1ad3      	subs	r3, r2, r3
    3cca:	465a      	mov	r2, fp
    3ccc:	0001      	movs	r1, r0
    3cce:	40da      	lsrs	r2, r3
    3cd0:	3908      	subs	r1, #8
    3cd2:	408e      	lsls	r6, r1
    3cd4:	0013      	movs	r3, r2
    3cd6:	4333      	orrs	r3, r6
    3cd8:	4699      	mov	r9, r3
    3cda:	465b      	mov	r3, fp
    3cdc:	408b      	lsls	r3, r1
    3cde:	4698      	mov	r8, r3
    3ce0:	2300      	movs	r3, #0
    3ce2:	4c3c      	ldr	r4, [pc, #240]	; (3dd4 <__aeabi_ddiv+0x1f0>)
    3ce4:	2600      	movs	r6, #0
    3ce6:	1a24      	subs	r4, r4, r0
    3ce8:	9303      	str	r3, [sp, #12]
    3cea:	e79f      	b.n	3c2c <__aeabi_ddiv+0x48>
    3cec:	4651      	mov	r1, sl
    3cee:	465a      	mov	r2, fp
    3cf0:	4311      	orrs	r1, r2
    3cf2:	d129      	bne.n	3d48 <__aeabi_ddiv+0x164>
    3cf4:	2200      	movs	r2, #0
    3cf6:	4693      	mov	fp, r2
    3cf8:	3202      	adds	r2, #2
    3cfa:	e7b1      	b.n	3c60 <__aeabi_ddiv+0x7c>
    3cfc:	4659      	mov	r1, fp
    3cfe:	4301      	orrs	r1, r0
    3d00:	d01e      	beq.n	3d40 <__aeabi_ddiv+0x15c>
    3d02:	465b      	mov	r3, fp
    3d04:	2b00      	cmp	r3, #0
    3d06:	d100      	bne.n	3d0a <__aeabi_ddiv+0x126>
    3d08:	e19e      	b.n	4048 <__aeabi_ddiv+0x464>
    3d0a:	4658      	mov	r0, fp
    3d0c:	f001 fa12 	bl	5134 <__clzsi2>
    3d10:	0003      	movs	r3, r0
    3d12:	3b0b      	subs	r3, #11
    3d14:	2b1c      	cmp	r3, #28
    3d16:	dd00      	ble.n	3d1a <__aeabi_ddiv+0x136>
    3d18:	e18f      	b.n	403a <__aeabi_ddiv+0x456>
    3d1a:	0002      	movs	r2, r0
    3d1c:	4659      	mov	r1, fp
    3d1e:	3a08      	subs	r2, #8
    3d20:	4091      	lsls	r1, r2
    3d22:	468b      	mov	fp, r1
    3d24:	211d      	movs	r1, #29
    3d26:	1acb      	subs	r3, r1, r3
    3d28:	4651      	mov	r1, sl
    3d2a:	40d9      	lsrs	r1, r3
    3d2c:	000b      	movs	r3, r1
    3d2e:	4659      	mov	r1, fp
    3d30:	430b      	orrs	r3, r1
    3d32:	4651      	mov	r1, sl
    3d34:	469b      	mov	fp, r3
    3d36:	4091      	lsls	r1, r2
    3d38:	4b26      	ldr	r3, [pc, #152]	; (3dd4 <__aeabi_ddiv+0x1f0>)
    3d3a:	2200      	movs	r2, #0
    3d3c:	1a1b      	subs	r3, r3, r0
    3d3e:	e78f      	b.n	3c60 <__aeabi_ddiv+0x7c>
    3d40:	2300      	movs	r3, #0
    3d42:	2201      	movs	r2, #1
    3d44:	469b      	mov	fp, r3
    3d46:	e78b      	b.n	3c60 <__aeabi_ddiv+0x7c>
    3d48:	4651      	mov	r1, sl
    3d4a:	2203      	movs	r2, #3
    3d4c:	e788      	b.n	3c60 <__aeabi_ddiv+0x7c>
    3d4e:	2300      	movs	r3, #0
    3d50:	4698      	mov	r8, r3
    3d52:	3301      	adds	r3, #1
    3d54:	2604      	movs	r6, #4
    3d56:	2400      	movs	r4, #0
    3d58:	9303      	str	r3, [sp, #12]
    3d5a:	e767      	b.n	3c2c <__aeabi_ddiv+0x48>
    3d5c:	2303      	movs	r3, #3
    3d5e:	46b1      	mov	r9, r6
    3d60:	9303      	str	r3, [sp, #12]
    3d62:	260c      	movs	r6, #12
    3d64:	e762      	b.n	3c2c <__aeabi_ddiv+0x48>
    3d66:	2a03      	cmp	r2, #3
    3d68:	d100      	bne.n	3d6c <__aeabi_ddiv+0x188>
    3d6a:	e25c      	b.n	4226 <__aeabi_ddiv+0x642>
    3d6c:	9b01      	ldr	r3, [sp, #4]
    3d6e:	2a01      	cmp	r2, #1
    3d70:	d000      	beq.n	3d74 <__aeabi_ddiv+0x190>
    3d72:	e1e4      	b.n	413e <__aeabi_ddiv+0x55a>
    3d74:	4013      	ands	r3, r2
    3d76:	469c      	mov	ip, r3
    3d78:	2300      	movs	r3, #0
    3d7a:	2400      	movs	r4, #0
    3d7c:	2200      	movs	r2, #0
    3d7e:	4698      	mov	r8, r3
    3d80:	2100      	movs	r1, #0
    3d82:	0312      	lsls	r2, r2, #12
    3d84:	0b13      	lsrs	r3, r2, #12
    3d86:	0d0a      	lsrs	r2, r1, #20
    3d88:	0512      	lsls	r2, r2, #20
    3d8a:	431a      	orrs	r2, r3
    3d8c:	0523      	lsls	r3, r4, #20
    3d8e:	4c12      	ldr	r4, [pc, #72]	; (3dd8 <__aeabi_ddiv+0x1f4>)
    3d90:	4640      	mov	r0, r8
    3d92:	4022      	ands	r2, r4
    3d94:	4313      	orrs	r3, r2
    3d96:	4662      	mov	r2, ip
    3d98:	005b      	lsls	r3, r3, #1
    3d9a:	07d2      	lsls	r2, r2, #31
    3d9c:	085b      	lsrs	r3, r3, #1
    3d9e:	4313      	orrs	r3, r2
    3da0:	0019      	movs	r1, r3
    3da2:	b007      	add	sp, #28
    3da4:	bc3c      	pop	{r2, r3, r4, r5}
    3da6:	4690      	mov	r8, r2
    3da8:	4699      	mov	r9, r3
    3daa:	46a2      	mov	sl, r4
    3dac:	46ab      	mov	fp, r5
    3dae:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3db0:	2300      	movs	r3, #0
    3db2:	2280      	movs	r2, #128	; 0x80
    3db4:	469c      	mov	ip, r3
    3db6:	0312      	lsls	r2, r2, #12
    3db8:	4698      	mov	r8, r3
    3dba:	4c03      	ldr	r4, [pc, #12]	; (3dc8 <__aeabi_ddiv+0x1e4>)
    3dbc:	e7e0      	b.n	3d80 <__aeabi_ddiv+0x19c>
    3dbe:	2300      	movs	r3, #0
    3dc0:	4c01      	ldr	r4, [pc, #4]	; (3dc8 <__aeabi_ddiv+0x1e4>)
    3dc2:	2200      	movs	r2, #0
    3dc4:	4698      	mov	r8, r3
    3dc6:	e7db      	b.n	3d80 <__aeabi_ddiv+0x19c>
    3dc8:	000007ff 	.word	0x000007ff
    3dcc:	fffffc01 	.word	0xfffffc01
    3dd0:	000059b8 	.word	0x000059b8
    3dd4:	fffffc0d 	.word	0xfffffc0d
    3dd8:	800fffff 	.word	0x800fffff
    3ddc:	45d9      	cmp	r9, fp
    3dde:	d900      	bls.n	3de2 <__aeabi_ddiv+0x1fe>
    3de0:	e139      	b.n	4056 <__aeabi_ddiv+0x472>
    3de2:	d100      	bne.n	3de6 <__aeabi_ddiv+0x202>
    3de4:	e134      	b.n	4050 <__aeabi_ddiv+0x46c>
    3de6:	2300      	movs	r3, #0
    3de8:	4646      	mov	r6, r8
    3dea:	464d      	mov	r5, r9
    3dec:	469a      	mov	sl, r3
    3dee:	3c01      	subs	r4, #1
    3df0:	465b      	mov	r3, fp
    3df2:	0e0a      	lsrs	r2, r1, #24
    3df4:	021b      	lsls	r3, r3, #8
    3df6:	431a      	orrs	r2, r3
    3df8:	020b      	lsls	r3, r1, #8
    3dfa:	0c17      	lsrs	r7, r2, #16
    3dfc:	9303      	str	r3, [sp, #12]
    3dfe:	0413      	lsls	r3, r2, #16
    3e00:	0c1b      	lsrs	r3, r3, #16
    3e02:	0039      	movs	r1, r7
    3e04:	0028      	movs	r0, r5
    3e06:	4690      	mov	r8, r2
    3e08:	9301      	str	r3, [sp, #4]
    3e0a:	f7ff f93d 	bl	3088 <__udivsi3>
    3e0e:	0002      	movs	r2, r0
    3e10:	9b01      	ldr	r3, [sp, #4]
    3e12:	4683      	mov	fp, r0
    3e14:	435a      	muls	r2, r3
    3e16:	0028      	movs	r0, r5
    3e18:	0039      	movs	r1, r7
    3e1a:	4691      	mov	r9, r2
    3e1c:	f7ff f9ba 	bl	3194 <__aeabi_uidivmod>
    3e20:	0c35      	lsrs	r5, r6, #16
    3e22:	0409      	lsls	r1, r1, #16
    3e24:	430d      	orrs	r5, r1
    3e26:	45a9      	cmp	r9, r5
    3e28:	d90d      	bls.n	3e46 <__aeabi_ddiv+0x262>
    3e2a:	465b      	mov	r3, fp
    3e2c:	4445      	add	r5, r8
    3e2e:	3b01      	subs	r3, #1
    3e30:	45a8      	cmp	r8, r5
    3e32:	d900      	bls.n	3e36 <__aeabi_ddiv+0x252>
    3e34:	e13a      	b.n	40ac <__aeabi_ddiv+0x4c8>
    3e36:	45a9      	cmp	r9, r5
    3e38:	d800      	bhi.n	3e3c <__aeabi_ddiv+0x258>
    3e3a:	e137      	b.n	40ac <__aeabi_ddiv+0x4c8>
    3e3c:	2302      	movs	r3, #2
    3e3e:	425b      	negs	r3, r3
    3e40:	469c      	mov	ip, r3
    3e42:	4445      	add	r5, r8
    3e44:	44e3      	add	fp, ip
    3e46:	464b      	mov	r3, r9
    3e48:	1aeb      	subs	r3, r5, r3
    3e4a:	0039      	movs	r1, r7
    3e4c:	0018      	movs	r0, r3
    3e4e:	9304      	str	r3, [sp, #16]
    3e50:	f7ff f91a 	bl	3088 <__udivsi3>
    3e54:	9b01      	ldr	r3, [sp, #4]
    3e56:	0005      	movs	r5, r0
    3e58:	4343      	muls	r3, r0
    3e5a:	0039      	movs	r1, r7
    3e5c:	9804      	ldr	r0, [sp, #16]
    3e5e:	4699      	mov	r9, r3
    3e60:	f7ff f998 	bl	3194 <__aeabi_uidivmod>
    3e64:	0433      	lsls	r3, r6, #16
    3e66:	0409      	lsls	r1, r1, #16
    3e68:	0c1b      	lsrs	r3, r3, #16
    3e6a:	430b      	orrs	r3, r1
    3e6c:	4599      	cmp	r9, r3
    3e6e:	d909      	bls.n	3e84 <__aeabi_ddiv+0x2a0>
    3e70:	4443      	add	r3, r8
    3e72:	1e6a      	subs	r2, r5, #1
    3e74:	4598      	cmp	r8, r3
    3e76:	d900      	bls.n	3e7a <__aeabi_ddiv+0x296>
    3e78:	e11a      	b.n	40b0 <__aeabi_ddiv+0x4cc>
    3e7a:	4599      	cmp	r9, r3
    3e7c:	d800      	bhi.n	3e80 <__aeabi_ddiv+0x29c>
    3e7e:	e117      	b.n	40b0 <__aeabi_ddiv+0x4cc>
    3e80:	3d02      	subs	r5, #2
    3e82:	4443      	add	r3, r8
    3e84:	464a      	mov	r2, r9
    3e86:	1a9b      	subs	r3, r3, r2
    3e88:	465a      	mov	r2, fp
    3e8a:	0412      	lsls	r2, r2, #16
    3e8c:	432a      	orrs	r2, r5
    3e8e:	9903      	ldr	r1, [sp, #12]
    3e90:	4693      	mov	fp, r2
    3e92:	0c10      	lsrs	r0, r2, #16
    3e94:	0c0a      	lsrs	r2, r1, #16
    3e96:	4691      	mov	r9, r2
    3e98:	0409      	lsls	r1, r1, #16
    3e9a:	465a      	mov	r2, fp
    3e9c:	0c09      	lsrs	r1, r1, #16
    3e9e:	464e      	mov	r6, r9
    3ea0:	000d      	movs	r5, r1
    3ea2:	0412      	lsls	r2, r2, #16
    3ea4:	0c12      	lsrs	r2, r2, #16
    3ea6:	4345      	muls	r5, r0
    3ea8:	9105      	str	r1, [sp, #20]
    3eaa:	4351      	muls	r1, r2
    3eac:	4372      	muls	r2, r6
    3eae:	4370      	muls	r0, r6
    3eb0:	1952      	adds	r2, r2, r5
    3eb2:	0c0e      	lsrs	r6, r1, #16
    3eb4:	18b2      	adds	r2, r6, r2
    3eb6:	4295      	cmp	r5, r2
    3eb8:	d903      	bls.n	3ec2 <__aeabi_ddiv+0x2de>
    3eba:	2580      	movs	r5, #128	; 0x80
    3ebc:	026d      	lsls	r5, r5, #9
    3ebe:	46ac      	mov	ip, r5
    3ec0:	4460      	add	r0, ip
    3ec2:	0c15      	lsrs	r5, r2, #16
    3ec4:	0409      	lsls	r1, r1, #16
    3ec6:	0412      	lsls	r2, r2, #16
    3ec8:	0c09      	lsrs	r1, r1, #16
    3eca:	1828      	adds	r0, r5, r0
    3ecc:	1852      	adds	r2, r2, r1
    3ece:	4283      	cmp	r3, r0
    3ed0:	d200      	bcs.n	3ed4 <__aeabi_ddiv+0x2f0>
    3ed2:	e0ce      	b.n	4072 <__aeabi_ddiv+0x48e>
    3ed4:	d100      	bne.n	3ed8 <__aeabi_ddiv+0x2f4>
    3ed6:	e0c8      	b.n	406a <__aeabi_ddiv+0x486>
    3ed8:	1a1d      	subs	r5, r3, r0
    3eda:	4653      	mov	r3, sl
    3edc:	1a9e      	subs	r6, r3, r2
    3ede:	45b2      	cmp	sl, r6
    3ee0:	4192      	sbcs	r2, r2
    3ee2:	4252      	negs	r2, r2
    3ee4:	1aab      	subs	r3, r5, r2
    3ee6:	469a      	mov	sl, r3
    3ee8:	4598      	cmp	r8, r3
    3eea:	d100      	bne.n	3eee <__aeabi_ddiv+0x30a>
    3eec:	e117      	b.n	411e <__aeabi_ddiv+0x53a>
    3eee:	0039      	movs	r1, r7
    3ef0:	0018      	movs	r0, r3
    3ef2:	f7ff f8c9 	bl	3088 <__udivsi3>
    3ef6:	9b01      	ldr	r3, [sp, #4]
    3ef8:	0005      	movs	r5, r0
    3efa:	4343      	muls	r3, r0
    3efc:	0039      	movs	r1, r7
    3efe:	4650      	mov	r0, sl
    3f00:	9304      	str	r3, [sp, #16]
    3f02:	f7ff f947 	bl	3194 <__aeabi_uidivmod>
    3f06:	9804      	ldr	r0, [sp, #16]
    3f08:	040b      	lsls	r3, r1, #16
    3f0a:	0c31      	lsrs	r1, r6, #16
    3f0c:	4319      	orrs	r1, r3
    3f0e:	4288      	cmp	r0, r1
    3f10:	d909      	bls.n	3f26 <__aeabi_ddiv+0x342>
    3f12:	4441      	add	r1, r8
    3f14:	1e6b      	subs	r3, r5, #1
    3f16:	4588      	cmp	r8, r1
    3f18:	d900      	bls.n	3f1c <__aeabi_ddiv+0x338>
    3f1a:	e107      	b.n	412c <__aeabi_ddiv+0x548>
    3f1c:	4288      	cmp	r0, r1
    3f1e:	d800      	bhi.n	3f22 <__aeabi_ddiv+0x33e>
    3f20:	e104      	b.n	412c <__aeabi_ddiv+0x548>
    3f22:	3d02      	subs	r5, #2
    3f24:	4441      	add	r1, r8
    3f26:	9b04      	ldr	r3, [sp, #16]
    3f28:	1acb      	subs	r3, r1, r3
    3f2a:	0018      	movs	r0, r3
    3f2c:	0039      	movs	r1, r7
    3f2e:	9304      	str	r3, [sp, #16]
    3f30:	f7ff f8aa 	bl	3088 <__udivsi3>
    3f34:	9b01      	ldr	r3, [sp, #4]
    3f36:	4682      	mov	sl, r0
    3f38:	4343      	muls	r3, r0
    3f3a:	0039      	movs	r1, r7
    3f3c:	9804      	ldr	r0, [sp, #16]
    3f3e:	9301      	str	r3, [sp, #4]
    3f40:	f7ff f928 	bl	3194 <__aeabi_uidivmod>
    3f44:	9801      	ldr	r0, [sp, #4]
    3f46:	040b      	lsls	r3, r1, #16
    3f48:	0431      	lsls	r1, r6, #16
    3f4a:	0c09      	lsrs	r1, r1, #16
    3f4c:	4319      	orrs	r1, r3
    3f4e:	4288      	cmp	r0, r1
    3f50:	d90d      	bls.n	3f6e <__aeabi_ddiv+0x38a>
    3f52:	4653      	mov	r3, sl
    3f54:	4441      	add	r1, r8
    3f56:	3b01      	subs	r3, #1
    3f58:	4588      	cmp	r8, r1
    3f5a:	d900      	bls.n	3f5e <__aeabi_ddiv+0x37a>
    3f5c:	e0e8      	b.n	4130 <__aeabi_ddiv+0x54c>
    3f5e:	4288      	cmp	r0, r1
    3f60:	d800      	bhi.n	3f64 <__aeabi_ddiv+0x380>
    3f62:	e0e5      	b.n	4130 <__aeabi_ddiv+0x54c>
    3f64:	2302      	movs	r3, #2
    3f66:	425b      	negs	r3, r3
    3f68:	469c      	mov	ip, r3
    3f6a:	4441      	add	r1, r8
    3f6c:	44e2      	add	sl, ip
    3f6e:	9b01      	ldr	r3, [sp, #4]
    3f70:	042d      	lsls	r5, r5, #16
    3f72:	1ace      	subs	r6, r1, r3
    3f74:	4651      	mov	r1, sl
    3f76:	4329      	orrs	r1, r5
    3f78:	9d05      	ldr	r5, [sp, #20]
    3f7a:	464f      	mov	r7, r9
    3f7c:	002a      	movs	r2, r5
    3f7e:	040b      	lsls	r3, r1, #16
    3f80:	0c08      	lsrs	r0, r1, #16
    3f82:	0c1b      	lsrs	r3, r3, #16
    3f84:	435a      	muls	r2, r3
    3f86:	4345      	muls	r5, r0
    3f88:	437b      	muls	r3, r7
    3f8a:	4378      	muls	r0, r7
    3f8c:	195b      	adds	r3, r3, r5
    3f8e:	0c17      	lsrs	r7, r2, #16
    3f90:	18fb      	adds	r3, r7, r3
    3f92:	429d      	cmp	r5, r3
    3f94:	d903      	bls.n	3f9e <__aeabi_ddiv+0x3ba>
    3f96:	2580      	movs	r5, #128	; 0x80
    3f98:	026d      	lsls	r5, r5, #9
    3f9a:	46ac      	mov	ip, r5
    3f9c:	4460      	add	r0, ip
    3f9e:	0c1d      	lsrs	r5, r3, #16
    3fa0:	0412      	lsls	r2, r2, #16
    3fa2:	041b      	lsls	r3, r3, #16
    3fa4:	0c12      	lsrs	r2, r2, #16
    3fa6:	1828      	adds	r0, r5, r0
    3fa8:	189b      	adds	r3, r3, r2
    3faa:	4286      	cmp	r6, r0
    3fac:	d200      	bcs.n	3fb0 <__aeabi_ddiv+0x3cc>
    3fae:	e093      	b.n	40d8 <__aeabi_ddiv+0x4f4>
    3fb0:	d100      	bne.n	3fb4 <__aeabi_ddiv+0x3d0>
    3fb2:	e08e      	b.n	40d2 <__aeabi_ddiv+0x4ee>
    3fb4:	2301      	movs	r3, #1
    3fb6:	4319      	orrs	r1, r3
    3fb8:	4ba0      	ldr	r3, [pc, #640]	; (423c <__aeabi_ddiv+0x658>)
    3fba:	18e3      	adds	r3, r4, r3
    3fbc:	2b00      	cmp	r3, #0
    3fbe:	dc00      	bgt.n	3fc2 <__aeabi_ddiv+0x3de>
    3fc0:	e099      	b.n	40f6 <__aeabi_ddiv+0x512>
    3fc2:	074a      	lsls	r2, r1, #29
    3fc4:	d000      	beq.n	3fc8 <__aeabi_ddiv+0x3e4>
    3fc6:	e09e      	b.n	4106 <__aeabi_ddiv+0x522>
    3fc8:	465a      	mov	r2, fp
    3fca:	01d2      	lsls	r2, r2, #7
    3fcc:	d506      	bpl.n	3fdc <__aeabi_ddiv+0x3f8>
    3fce:	465a      	mov	r2, fp
    3fd0:	4b9b      	ldr	r3, [pc, #620]	; (4240 <__aeabi_ddiv+0x65c>)
    3fd2:	401a      	ands	r2, r3
    3fd4:	2380      	movs	r3, #128	; 0x80
    3fd6:	4693      	mov	fp, r2
    3fd8:	00db      	lsls	r3, r3, #3
    3fda:	18e3      	adds	r3, r4, r3
    3fdc:	4a99      	ldr	r2, [pc, #612]	; (4244 <__aeabi_ddiv+0x660>)
    3fde:	4293      	cmp	r3, r2
    3fe0:	dd68      	ble.n	40b4 <__aeabi_ddiv+0x4d0>
    3fe2:	2301      	movs	r3, #1
    3fe4:	9a02      	ldr	r2, [sp, #8]
    3fe6:	4c98      	ldr	r4, [pc, #608]	; (4248 <__aeabi_ddiv+0x664>)
    3fe8:	401a      	ands	r2, r3
    3fea:	2300      	movs	r3, #0
    3fec:	4694      	mov	ip, r2
    3fee:	4698      	mov	r8, r3
    3ff0:	2200      	movs	r2, #0
    3ff2:	e6c5      	b.n	3d80 <__aeabi_ddiv+0x19c>
    3ff4:	2280      	movs	r2, #128	; 0x80
    3ff6:	464b      	mov	r3, r9
    3ff8:	0312      	lsls	r2, r2, #12
    3ffa:	4213      	tst	r3, r2
    3ffc:	d00a      	beq.n	4014 <__aeabi_ddiv+0x430>
    3ffe:	465b      	mov	r3, fp
    4000:	4213      	tst	r3, r2
    4002:	d106      	bne.n	4012 <__aeabi_ddiv+0x42e>
    4004:	431a      	orrs	r2, r3
    4006:	0312      	lsls	r2, r2, #12
    4008:	0b12      	lsrs	r2, r2, #12
    400a:	46ac      	mov	ip, r5
    400c:	4688      	mov	r8, r1
    400e:	4c8e      	ldr	r4, [pc, #568]	; (4248 <__aeabi_ddiv+0x664>)
    4010:	e6b6      	b.n	3d80 <__aeabi_ddiv+0x19c>
    4012:	464b      	mov	r3, r9
    4014:	431a      	orrs	r2, r3
    4016:	0312      	lsls	r2, r2, #12
    4018:	0b12      	lsrs	r2, r2, #12
    401a:	46bc      	mov	ip, r7
    401c:	4c8a      	ldr	r4, [pc, #552]	; (4248 <__aeabi_ddiv+0x664>)
    401e:	e6af      	b.n	3d80 <__aeabi_ddiv+0x19c>
    4020:	0003      	movs	r3, r0
    4022:	465a      	mov	r2, fp
    4024:	3b28      	subs	r3, #40	; 0x28
    4026:	409a      	lsls	r2, r3
    4028:	2300      	movs	r3, #0
    402a:	4691      	mov	r9, r2
    402c:	4698      	mov	r8, r3
    402e:	e657      	b.n	3ce0 <__aeabi_ddiv+0xfc>
    4030:	4658      	mov	r0, fp
    4032:	f001 f87f 	bl	5134 <__clzsi2>
    4036:	3020      	adds	r0, #32
    4038:	e640      	b.n	3cbc <__aeabi_ddiv+0xd8>
    403a:	0003      	movs	r3, r0
    403c:	4652      	mov	r2, sl
    403e:	3b28      	subs	r3, #40	; 0x28
    4040:	409a      	lsls	r2, r3
    4042:	2100      	movs	r1, #0
    4044:	4693      	mov	fp, r2
    4046:	e677      	b.n	3d38 <__aeabi_ddiv+0x154>
    4048:	f001 f874 	bl	5134 <__clzsi2>
    404c:	3020      	adds	r0, #32
    404e:	e65f      	b.n	3d10 <__aeabi_ddiv+0x12c>
    4050:	4588      	cmp	r8, r1
    4052:	d200      	bcs.n	4056 <__aeabi_ddiv+0x472>
    4054:	e6c7      	b.n	3de6 <__aeabi_ddiv+0x202>
    4056:	464b      	mov	r3, r9
    4058:	07de      	lsls	r6, r3, #31
    405a:	085d      	lsrs	r5, r3, #1
    405c:	4643      	mov	r3, r8
    405e:	085b      	lsrs	r3, r3, #1
    4060:	431e      	orrs	r6, r3
    4062:	4643      	mov	r3, r8
    4064:	07db      	lsls	r3, r3, #31
    4066:	469a      	mov	sl, r3
    4068:	e6c2      	b.n	3df0 <__aeabi_ddiv+0x20c>
    406a:	2500      	movs	r5, #0
    406c:	4592      	cmp	sl, r2
    406e:	d300      	bcc.n	4072 <__aeabi_ddiv+0x48e>
    4070:	e733      	b.n	3eda <__aeabi_ddiv+0x2f6>
    4072:	9e03      	ldr	r6, [sp, #12]
    4074:	4659      	mov	r1, fp
    4076:	46b4      	mov	ip, r6
    4078:	44e2      	add	sl, ip
    407a:	45b2      	cmp	sl, r6
    407c:	41ad      	sbcs	r5, r5
    407e:	426d      	negs	r5, r5
    4080:	4445      	add	r5, r8
    4082:	18eb      	adds	r3, r5, r3
    4084:	3901      	subs	r1, #1
    4086:	4598      	cmp	r8, r3
    4088:	d207      	bcs.n	409a <__aeabi_ddiv+0x4b6>
    408a:	4298      	cmp	r0, r3
    408c:	d900      	bls.n	4090 <__aeabi_ddiv+0x4ac>
    408e:	e07f      	b.n	4190 <__aeabi_ddiv+0x5ac>
    4090:	d100      	bne.n	4094 <__aeabi_ddiv+0x4b0>
    4092:	e0bc      	b.n	420e <__aeabi_ddiv+0x62a>
    4094:	1a1d      	subs	r5, r3, r0
    4096:	468b      	mov	fp, r1
    4098:	e71f      	b.n	3eda <__aeabi_ddiv+0x2f6>
    409a:	4598      	cmp	r8, r3
    409c:	d1fa      	bne.n	4094 <__aeabi_ddiv+0x4b0>
    409e:	9d03      	ldr	r5, [sp, #12]
    40a0:	4555      	cmp	r5, sl
    40a2:	d9f2      	bls.n	408a <__aeabi_ddiv+0x4a6>
    40a4:	4643      	mov	r3, r8
    40a6:	468b      	mov	fp, r1
    40a8:	1a1d      	subs	r5, r3, r0
    40aa:	e716      	b.n	3eda <__aeabi_ddiv+0x2f6>
    40ac:	469b      	mov	fp, r3
    40ae:	e6ca      	b.n	3e46 <__aeabi_ddiv+0x262>
    40b0:	0015      	movs	r5, r2
    40b2:	e6e7      	b.n	3e84 <__aeabi_ddiv+0x2a0>
    40b4:	465a      	mov	r2, fp
    40b6:	08c9      	lsrs	r1, r1, #3
    40b8:	0752      	lsls	r2, r2, #29
    40ba:	430a      	orrs	r2, r1
    40bc:	055b      	lsls	r3, r3, #21
    40be:	4690      	mov	r8, r2
    40c0:	0d5c      	lsrs	r4, r3, #21
    40c2:	465a      	mov	r2, fp
    40c4:	2301      	movs	r3, #1
    40c6:	9902      	ldr	r1, [sp, #8]
    40c8:	0252      	lsls	r2, r2, #9
    40ca:	4019      	ands	r1, r3
    40cc:	0b12      	lsrs	r2, r2, #12
    40ce:	468c      	mov	ip, r1
    40d0:	e656      	b.n	3d80 <__aeabi_ddiv+0x19c>
    40d2:	2b00      	cmp	r3, #0
    40d4:	d100      	bne.n	40d8 <__aeabi_ddiv+0x4f4>
    40d6:	e76f      	b.n	3fb8 <__aeabi_ddiv+0x3d4>
    40d8:	4446      	add	r6, r8
    40da:	1e4a      	subs	r2, r1, #1
    40dc:	45b0      	cmp	r8, r6
    40de:	d929      	bls.n	4134 <__aeabi_ddiv+0x550>
    40e0:	0011      	movs	r1, r2
    40e2:	4286      	cmp	r6, r0
    40e4:	d000      	beq.n	40e8 <__aeabi_ddiv+0x504>
    40e6:	e765      	b.n	3fb4 <__aeabi_ddiv+0x3d0>
    40e8:	9a03      	ldr	r2, [sp, #12]
    40ea:	4293      	cmp	r3, r2
    40ec:	d000      	beq.n	40f0 <__aeabi_ddiv+0x50c>
    40ee:	e761      	b.n	3fb4 <__aeabi_ddiv+0x3d0>
    40f0:	e762      	b.n	3fb8 <__aeabi_ddiv+0x3d4>
    40f2:	2101      	movs	r1, #1
    40f4:	4249      	negs	r1, r1
    40f6:	2001      	movs	r0, #1
    40f8:	1ac2      	subs	r2, r0, r3
    40fa:	2a38      	cmp	r2, #56	; 0x38
    40fc:	dd21      	ble.n	4142 <__aeabi_ddiv+0x55e>
    40fe:	9b02      	ldr	r3, [sp, #8]
    4100:	4003      	ands	r3, r0
    4102:	469c      	mov	ip, r3
    4104:	e638      	b.n	3d78 <__aeabi_ddiv+0x194>
    4106:	220f      	movs	r2, #15
    4108:	400a      	ands	r2, r1
    410a:	2a04      	cmp	r2, #4
    410c:	d100      	bne.n	4110 <__aeabi_ddiv+0x52c>
    410e:	e75b      	b.n	3fc8 <__aeabi_ddiv+0x3e4>
    4110:	000a      	movs	r2, r1
    4112:	1d11      	adds	r1, r2, #4
    4114:	4291      	cmp	r1, r2
    4116:	4192      	sbcs	r2, r2
    4118:	4252      	negs	r2, r2
    411a:	4493      	add	fp, r2
    411c:	e754      	b.n	3fc8 <__aeabi_ddiv+0x3e4>
    411e:	4b47      	ldr	r3, [pc, #284]	; (423c <__aeabi_ddiv+0x658>)
    4120:	18e3      	adds	r3, r4, r3
    4122:	2b00      	cmp	r3, #0
    4124:	dde5      	ble.n	40f2 <__aeabi_ddiv+0x50e>
    4126:	2201      	movs	r2, #1
    4128:	4252      	negs	r2, r2
    412a:	e7f2      	b.n	4112 <__aeabi_ddiv+0x52e>
    412c:	001d      	movs	r5, r3
    412e:	e6fa      	b.n	3f26 <__aeabi_ddiv+0x342>
    4130:	469a      	mov	sl, r3
    4132:	e71c      	b.n	3f6e <__aeabi_ddiv+0x38a>
    4134:	42b0      	cmp	r0, r6
    4136:	d839      	bhi.n	41ac <__aeabi_ddiv+0x5c8>
    4138:	d06e      	beq.n	4218 <__aeabi_ddiv+0x634>
    413a:	0011      	movs	r1, r2
    413c:	e73a      	b.n	3fb4 <__aeabi_ddiv+0x3d0>
    413e:	9302      	str	r3, [sp, #8]
    4140:	e73a      	b.n	3fb8 <__aeabi_ddiv+0x3d4>
    4142:	2a1f      	cmp	r2, #31
    4144:	dc3c      	bgt.n	41c0 <__aeabi_ddiv+0x5dc>
    4146:	2320      	movs	r3, #32
    4148:	1a9b      	subs	r3, r3, r2
    414a:	000c      	movs	r4, r1
    414c:	4658      	mov	r0, fp
    414e:	4099      	lsls	r1, r3
    4150:	4098      	lsls	r0, r3
    4152:	1e4b      	subs	r3, r1, #1
    4154:	4199      	sbcs	r1, r3
    4156:	465b      	mov	r3, fp
    4158:	40d4      	lsrs	r4, r2
    415a:	40d3      	lsrs	r3, r2
    415c:	4320      	orrs	r0, r4
    415e:	4308      	orrs	r0, r1
    4160:	001a      	movs	r2, r3
    4162:	0743      	lsls	r3, r0, #29
    4164:	d009      	beq.n	417a <__aeabi_ddiv+0x596>
    4166:	230f      	movs	r3, #15
    4168:	4003      	ands	r3, r0
    416a:	2b04      	cmp	r3, #4
    416c:	d005      	beq.n	417a <__aeabi_ddiv+0x596>
    416e:	0001      	movs	r1, r0
    4170:	1d08      	adds	r0, r1, #4
    4172:	4288      	cmp	r0, r1
    4174:	419b      	sbcs	r3, r3
    4176:	425b      	negs	r3, r3
    4178:	18d2      	adds	r2, r2, r3
    417a:	0213      	lsls	r3, r2, #8
    417c:	d53a      	bpl.n	41f4 <__aeabi_ddiv+0x610>
    417e:	2301      	movs	r3, #1
    4180:	9a02      	ldr	r2, [sp, #8]
    4182:	2401      	movs	r4, #1
    4184:	401a      	ands	r2, r3
    4186:	2300      	movs	r3, #0
    4188:	4694      	mov	ip, r2
    418a:	4698      	mov	r8, r3
    418c:	2200      	movs	r2, #0
    418e:	e5f7      	b.n	3d80 <__aeabi_ddiv+0x19c>
    4190:	2102      	movs	r1, #2
    4192:	4249      	negs	r1, r1
    4194:	468c      	mov	ip, r1
    4196:	9d03      	ldr	r5, [sp, #12]
    4198:	44e3      	add	fp, ip
    419a:	46ac      	mov	ip, r5
    419c:	44e2      	add	sl, ip
    419e:	45aa      	cmp	sl, r5
    41a0:	41ad      	sbcs	r5, r5
    41a2:	426d      	negs	r5, r5
    41a4:	4445      	add	r5, r8
    41a6:	18ed      	adds	r5, r5, r3
    41a8:	1a2d      	subs	r5, r5, r0
    41aa:	e696      	b.n	3eda <__aeabi_ddiv+0x2f6>
    41ac:	1e8a      	subs	r2, r1, #2
    41ae:	9903      	ldr	r1, [sp, #12]
    41b0:	004d      	lsls	r5, r1, #1
    41b2:	428d      	cmp	r5, r1
    41b4:	4189      	sbcs	r1, r1
    41b6:	4249      	negs	r1, r1
    41b8:	4441      	add	r1, r8
    41ba:	1876      	adds	r6, r6, r1
    41bc:	9503      	str	r5, [sp, #12]
    41be:	e78f      	b.n	40e0 <__aeabi_ddiv+0x4fc>
    41c0:	201f      	movs	r0, #31
    41c2:	4240      	negs	r0, r0
    41c4:	1ac3      	subs	r3, r0, r3
    41c6:	4658      	mov	r0, fp
    41c8:	40d8      	lsrs	r0, r3
    41ca:	0003      	movs	r3, r0
    41cc:	2a20      	cmp	r2, #32
    41ce:	d028      	beq.n	4222 <__aeabi_ddiv+0x63e>
    41d0:	2040      	movs	r0, #64	; 0x40
    41d2:	465d      	mov	r5, fp
    41d4:	1a82      	subs	r2, r0, r2
    41d6:	4095      	lsls	r5, r2
    41d8:	4329      	orrs	r1, r5
    41da:	1e4a      	subs	r2, r1, #1
    41dc:	4191      	sbcs	r1, r2
    41de:	4319      	orrs	r1, r3
    41e0:	2307      	movs	r3, #7
    41e2:	2200      	movs	r2, #0
    41e4:	400b      	ands	r3, r1
    41e6:	d009      	beq.n	41fc <__aeabi_ddiv+0x618>
    41e8:	230f      	movs	r3, #15
    41ea:	2200      	movs	r2, #0
    41ec:	400b      	ands	r3, r1
    41ee:	0008      	movs	r0, r1
    41f0:	2b04      	cmp	r3, #4
    41f2:	d1bd      	bne.n	4170 <__aeabi_ddiv+0x58c>
    41f4:	0001      	movs	r1, r0
    41f6:	0753      	lsls	r3, r2, #29
    41f8:	0252      	lsls	r2, r2, #9
    41fa:	0b12      	lsrs	r2, r2, #12
    41fc:	08c9      	lsrs	r1, r1, #3
    41fe:	4319      	orrs	r1, r3
    4200:	2301      	movs	r3, #1
    4202:	4688      	mov	r8, r1
    4204:	9902      	ldr	r1, [sp, #8]
    4206:	2400      	movs	r4, #0
    4208:	4019      	ands	r1, r3
    420a:	468c      	mov	ip, r1
    420c:	e5b8      	b.n	3d80 <__aeabi_ddiv+0x19c>
    420e:	4552      	cmp	r2, sl
    4210:	d8be      	bhi.n	4190 <__aeabi_ddiv+0x5ac>
    4212:	468b      	mov	fp, r1
    4214:	2500      	movs	r5, #0
    4216:	e660      	b.n	3eda <__aeabi_ddiv+0x2f6>
    4218:	9d03      	ldr	r5, [sp, #12]
    421a:	429d      	cmp	r5, r3
    421c:	d3c6      	bcc.n	41ac <__aeabi_ddiv+0x5c8>
    421e:	0011      	movs	r1, r2
    4220:	e762      	b.n	40e8 <__aeabi_ddiv+0x504>
    4222:	2500      	movs	r5, #0
    4224:	e7d8      	b.n	41d8 <__aeabi_ddiv+0x5f4>
    4226:	2280      	movs	r2, #128	; 0x80
    4228:	465b      	mov	r3, fp
    422a:	0312      	lsls	r2, r2, #12
    422c:	431a      	orrs	r2, r3
    422e:	9b01      	ldr	r3, [sp, #4]
    4230:	0312      	lsls	r2, r2, #12
    4232:	0b12      	lsrs	r2, r2, #12
    4234:	469c      	mov	ip, r3
    4236:	4688      	mov	r8, r1
    4238:	4c03      	ldr	r4, [pc, #12]	; (4248 <__aeabi_ddiv+0x664>)
    423a:	e5a1      	b.n	3d80 <__aeabi_ddiv+0x19c>
    423c:	000003ff 	.word	0x000003ff
    4240:	feffffff 	.word	0xfeffffff
    4244:	000007fe 	.word	0x000007fe
    4248:	000007ff 	.word	0x000007ff

0000424c <__eqdf2>:
    424c:	b5f0      	push	{r4, r5, r6, r7, lr}
    424e:	464f      	mov	r7, r9
    4250:	4646      	mov	r6, r8
    4252:	46d6      	mov	lr, sl
    4254:	005c      	lsls	r4, r3, #1
    4256:	b5c0      	push	{r6, r7, lr}
    4258:	031f      	lsls	r7, r3, #12
    425a:	0fdb      	lsrs	r3, r3, #31
    425c:	469a      	mov	sl, r3
    425e:	4b17      	ldr	r3, [pc, #92]	; (42bc <__eqdf2+0x70>)
    4260:	030e      	lsls	r6, r1, #12
    4262:	004d      	lsls	r5, r1, #1
    4264:	4684      	mov	ip, r0
    4266:	4680      	mov	r8, r0
    4268:	0b36      	lsrs	r6, r6, #12
    426a:	0d6d      	lsrs	r5, r5, #21
    426c:	0fc9      	lsrs	r1, r1, #31
    426e:	4691      	mov	r9, r2
    4270:	0b3f      	lsrs	r7, r7, #12
    4272:	0d64      	lsrs	r4, r4, #21
    4274:	2001      	movs	r0, #1
    4276:	429d      	cmp	r5, r3
    4278:	d008      	beq.n	428c <__eqdf2+0x40>
    427a:	429c      	cmp	r4, r3
    427c:	d001      	beq.n	4282 <__eqdf2+0x36>
    427e:	42a5      	cmp	r5, r4
    4280:	d00b      	beq.n	429a <__eqdf2+0x4e>
    4282:	bc1c      	pop	{r2, r3, r4}
    4284:	4690      	mov	r8, r2
    4286:	4699      	mov	r9, r3
    4288:	46a2      	mov	sl, r4
    428a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    428c:	4663      	mov	r3, ip
    428e:	4333      	orrs	r3, r6
    4290:	d1f7      	bne.n	4282 <__eqdf2+0x36>
    4292:	42ac      	cmp	r4, r5
    4294:	d1f5      	bne.n	4282 <__eqdf2+0x36>
    4296:	433a      	orrs	r2, r7
    4298:	d1f3      	bne.n	4282 <__eqdf2+0x36>
    429a:	2001      	movs	r0, #1
    429c:	42be      	cmp	r6, r7
    429e:	d1f0      	bne.n	4282 <__eqdf2+0x36>
    42a0:	45c8      	cmp	r8, r9
    42a2:	d1ee      	bne.n	4282 <__eqdf2+0x36>
    42a4:	4551      	cmp	r1, sl
    42a6:	d007      	beq.n	42b8 <__eqdf2+0x6c>
    42a8:	2d00      	cmp	r5, #0
    42aa:	d1ea      	bne.n	4282 <__eqdf2+0x36>
    42ac:	4663      	mov	r3, ip
    42ae:	431e      	orrs	r6, r3
    42b0:	0030      	movs	r0, r6
    42b2:	1e46      	subs	r6, r0, #1
    42b4:	41b0      	sbcs	r0, r6
    42b6:	e7e4      	b.n	4282 <__eqdf2+0x36>
    42b8:	2000      	movs	r0, #0
    42ba:	e7e2      	b.n	4282 <__eqdf2+0x36>
    42bc:	000007ff 	.word	0x000007ff

000042c0 <__gedf2>:
    42c0:	b5f0      	push	{r4, r5, r6, r7, lr}
    42c2:	4645      	mov	r5, r8
    42c4:	46de      	mov	lr, fp
    42c6:	4657      	mov	r7, sl
    42c8:	464e      	mov	r6, r9
    42ca:	b5e0      	push	{r5, r6, r7, lr}
    42cc:	031f      	lsls	r7, r3, #12
    42ce:	0b3d      	lsrs	r5, r7, #12
    42d0:	4f2c      	ldr	r7, [pc, #176]	; (4384 <__gedf2+0xc4>)
    42d2:	030e      	lsls	r6, r1, #12
    42d4:	004c      	lsls	r4, r1, #1
    42d6:	46ab      	mov	fp, r5
    42d8:	005d      	lsls	r5, r3, #1
    42da:	4684      	mov	ip, r0
    42dc:	0b36      	lsrs	r6, r6, #12
    42de:	0d64      	lsrs	r4, r4, #21
    42e0:	0fc9      	lsrs	r1, r1, #31
    42e2:	4690      	mov	r8, r2
    42e4:	0d6d      	lsrs	r5, r5, #21
    42e6:	0fdb      	lsrs	r3, r3, #31
    42e8:	42bc      	cmp	r4, r7
    42ea:	d02a      	beq.n	4342 <__gedf2+0x82>
    42ec:	4f25      	ldr	r7, [pc, #148]	; (4384 <__gedf2+0xc4>)
    42ee:	42bd      	cmp	r5, r7
    42f0:	d02d      	beq.n	434e <__gedf2+0x8e>
    42f2:	2c00      	cmp	r4, #0
    42f4:	d10f      	bne.n	4316 <__gedf2+0x56>
    42f6:	4330      	orrs	r0, r6
    42f8:	0007      	movs	r7, r0
    42fa:	4681      	mov	r9, r0
    42fc:	4278      	negs	r0, r7
    42fe:	4178      	adcs	r0, r7
    4300:	b2c0      	uxtb	r0, r0
    4302:	2d00      	cmp	r5, #0
    4304:	d117      	bne.n	4336 <__gedf2+0x76>
    4306:	465f      	mov	r7, fp
    4308:	433a      	orrs	r2, r7
    430a:	d114      	bne.n	4336 <__gedf2+0x76>
    430c:	464b      	mov	r3, r9
    430e:	2000      	movs	r0, #0
    4310:	2b00      	cmp	r3, #0
    4312:	d00a      	beq.n	432a <__gedf2+0x6a>
    4314:	e006      	b.n	4324 <__gedf2+0x64>
    4316:	2d00      	cmp	r5, #0
    4318:	d102      	bne.n	4320 <__gedf2+0x60>
    431a:	4658      	mov	r0, fp
    431c:	4302      	orrs	r2, r0
    431e:	d001      	beq.n	4324 <__gedf2+0x64>
    4320:	4299      	cmp	r1, r3
    4322:	d018      	beq.n	4356 <__gedf2+0x96>
    4324:	4248      	negs	r0, r1
    4326:	2101      	movs	r1, #1
    4328:	4308      	orrs	r0, r1
    432a:	bc3c      	pop	{r2, r3, r4, r5}
    432c:	4690      	mov	r8, r2
    432e:	4699      	mov	r9, r3
    4330:	46a2      	mov	sl, r4
    4332:	46ab      	mov	fp, r5
    4334:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4336:	2800      	cmp	r0, #0
    4338:	d0f2      	beq.n	4320 <__gedf2+0x60>
    433a:	2001      	movs	r0, #1
    433c:	3b01      	subs	r3, #1
    433e:	4318      	orrs	r0, r3
    4340:	e7f3      	b.n	432a <__gedf2+0x6a>
    4342:	0037      	movs	r7, r6
    4344:	4307      	orrs	r7, r0
    4346:	d0d1      	beq.n	42ec <__gedf2+0x2c>
    4348:	2002      	movs	r0, #2
    434a:	4240      	negs	r0, r0
    434c:	e7ed      	b.n	432a <__gedf2+0x6a>
    434e:	465f      	mov	r7, fp
    4350:	4317      	orrs	r7, r2
    4352:	d0ce      	beq.n	42f2 <__gedf2+0x32>
    4354:	e7f8      	b.n	4348 <__gedf2+0x88>
    4356:	42ac      	cmp	r4, r5
    4358:	dce4      	bgt.n	4324 <__gedf2+0x64>
    435a:	da03      	bge.n	4364 <__gedf2+0xa4>
    435c:	1e48      	subs	r0, r1, #1
    435e:	2101      	movs	r1, #1
    4360:	4308      	orrs	r0, r1
    4362:	e7e2      	b.n	432a <__gedf2+0x6a>
    4364:	455e      	cmp	r6, fp
    4366:	d8dd      	bhi.n	4324 <__gedf2+0x64>
    4368:	d006      	beq.n	4378 <__gedf2+0xb8>
    436a:	2000      	movs	r0, #0
    436c:	455e      	cmp	r6, fp
    436e:	d2dc      	bcs.n	432a <__gedf2+0x6a>
    4370:	2301      	movs	r3, #1
    4372:	1e48      	subs	r0, r1, #1
    4374:	4318      	orrs	r0, r3
    4376:	e7d8      	b.n	432a <__gedf2+0x6a>
    4378:	45c4      	cmp	ip, r8
    437a:	d8d3      	bhi.n	4324 <__gedf2+0x64>
    437c:	2000      	movs	r0, #0
    437e:	45c4      	cmp	ip, r8
    4380:	d3f6      	bcc.n	4370 <__gedf2+0xb0>
    4382:	e7d2      	b.n	432a <__gedf2+0x6a>
    4384:	000007ff 	.word	0x000007ff

00004388 <__ledf2>:
    4388:	b5f0      	push	{r4, r5, r6, r7, lr}
    438a:	464e      	mov	r6, r9
    438c:	4645      	mov	r5, r8
    438e:	46de      	mov	lr, fp
    4390:	4657      	mov	r7, sl
    4392:	005c      	lsls	r4, r3, #1
    4394:	b5e0      	push	{r5, r6, r7, lr}
    4396:	031f      	lsls	r7, r3, #12
    4398:	0fdb      	lsrs	r3, r3, #31
    439a:	4699      	mov	r9, r3
    439c:	4b2a      	ldr	r3, [pc, #168]	; (4448 <__ledf2+0xc0>)
    439e:	030e      	lsls	r6, r1, #12
    43a0:	004d      	lsls	r5, r1, #1
    43a2:	0fc9      	lsrs	r1, r1, #31
    43a4:	4684      	mov	ip, r0
    43a6:	0b36      	lsrs	r6, r6, #12
    43a8:	0d6d      	lsrs	r5, r5, #21
    43aa:	468b      	mov	fp, r1
    43ac:	4690      	mov	r8, r2
    43ae:	0b3f      	lsrs	r7, r7, #12
    43b0:	0d64      	lsrs	r4, r4, #21
    43b2:	429d      	cmp	r5, r3
    43b4:	d020      	beq.n	43f8 <__ledf2+0x70>
    43b6:	4b24      	ldr	r3, [pc, #144]	; (4448 <__ledf2+0xc0>)
    43b8:	429c      	cmp	r4, r3
    43ba:	d022      	beq.n	4402 <__ledf2+0x7a>
    43bc:	2d00      	cmp	r5, #0
    43be:	d112      	bne.n	43e6 <__ledf2+0x5e>
    43c0:	4330      	orrs	r0, r6
    43c2:	4243      	negs	r3, r0
    43c4:	4143      	adcs	r3, r0
    43c6:	b2db      	uxtb	r3, r3
    43c8:	2c00      	cmp	r4, #0
    43ca:	d01f      	beq.n	440c <__ledf2+0x84>
    43cc:	2b00      	cmp	r3, #0
    43ce:	d00c      	beq.n	43ea <__ledf2+0x62>
    43d0:	464b      	mov	r3, r9
    43d2:	2001      	movs	r0, #1
    43d4:	3b01      	subs	r3, #1
    43d6:	4303      	orrs	r3, r0
    43d8:	0018      	movs	r0, r3
    43da:	bc3c      	pop	{r2, r3, r4, r5}
    43dc:	4690      	mov	r8, r2
    43de:	4699      	mov	r9, r3
    43e0:	46a2      	mov	sl, r4
    43e2:	46ab      	mov	fp, r5
    43e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    43e6:	2c00      	cmp	r4, #0
    43e8:	d016      	beq.n	4418 <__ledf2+0x90>
    43ea:	45cb      	cmp	fp, r9
    43ec:	d017      	beq.n	441e <__ledf2+0x96>
    43ee:	465b      	mov	r3, fp
    43f0:	4259      	negs	r1, r3
    43f2:	2301      	movs	r3, #1
    43f4:	430b      	orrs	r3, r1
    43f6:	e7ef      	b.n	43d8 <__ledf2+0x50>
    43f8:	0031      	movs	r1, r6
    43fa:	2302      	movs	r3, #2
    43fc:	4301      	orrs	r1, r0
    43fe:	d1eb      	bne.n	43d8 <__ledf2+0x50>
    4400:	e7d9      	b.n	43b6 <__ledf2+0x2e>
    4402:	0039      	movs	r1, r7
    4404:	2302      	movs	r3, #2
    4406:	4311      	orrs	r1, r2
    4408:	d1e6      	bne.n	43d8 <__ledf2+0x50>
    440a:	e7d7      	b.n	43bc <__ledf2+0x34>
    440c:	433a      	orrs	r2, r7
    440e:	d1dd      	bne.n	43cc <__ledf2+0x44>
    4410:	2300      	movs	r3, #0
    4412:	2800      	cmp	r0, #0
    4414:	d0e0      	beq.n	43d8 <__ledf2+0x50>
    4416:	e7ea      	b.n	43ee <__ledf2+0x66>
    4418:	433a      	orrs	r2, r7
    441a:	d1e6      	bne.n	43ea <__ledf2+0x62>
    441c:	e7e7      	b.n	43ee <__ledf2+0x66>
    441e:	42a5      	cmp	r5, r4
    4420:	dce5      	bgt.n	43ee <__ledf2+0x66>
    4422:	db05      	blt.n	4430 <__ledf2+0xa8>
    4424:	42be      	cmp	r6, r7
    4426:	d8e2      	bhi.n	43ee <__ledf2+0x66>
    4428:	d007      	beq.n	443a <__ledf2+0xb2>
    442a:	2300      	movs	r3, #0
    442c:	42be      	cmp	r6, r7
    442e:	d2d3      	bcs.n	43d8 <__ledf2+0x50>
    4430:	4659      	mov	r1, fp
    4432:	2301      	movs	r3, #1
    4434:	3901      	subs	r1, #1
    4436:	430b      	orrs	r3, r1
    4438:	e7ce      	b.n	43d8 <__ledf2+0x50>
    443a:	45c4      	cmp	ip, r8
    443c:	d8d7      	bhi.n	43ee <__ledf2+0x66>
    443e:	2300      	movs	r3, #0
    4440:	45c4      	cmp	ip, r8
    4442:	d3f5      	bcc.n	4430 <__ledf2+0xa8>
    4444:	e7c8      	b.n	43d8 <__ledf2+0x50>
    4446:	46c0      	nop			; (mov r8, r8)
    4448:	000007ff 	.word	0x000007ff

0000444c <__aeabi_dmul>:
    444c:	b5f0      	push	{r4, r5, r6, r7, lr}
    444e:	4657      	mov	r7, sl
    4450:	4645      	mov	r5, r8
    4452:	46de      	mov	lr, fp
    4454:	464e      	mov	r6, r9
    4456:	b5e0      	push	{r5, r6, r7, lr}
    4458:	030c      	lsls	r4, r1, #12
    445a:	4698      	mov	r8, r3
    445c:	004e      	lsls	r6, r1, #1
    445e:	0b23      	lsrs	r3, r4, #12
    4460:	b087      	sub	sp, #28
    4462:	0007      	movs	r7, r0
    4464:	4692      	mov	sl, r2
    4466:	469b      	mov	fp, r3
    4468:	0d76      	lsrs	r6, r6, #21
    446a:	0fcd      	lsrs	r5, r1, #31
    446c:	2e00      	cmp	r6, #0
    446e:	d06b      	beq.n	4548 <__aeabi_dmul+0xfc>
    4470:	4b6d      	ldr	r3, [pc, #436]	; (4628 <__aeabi_dmul+0x1dc>)
    4472:	429e      	cmp	r6, r3
    4474:	d035      	beq.n	44e2 <__aeabi_dmul+0x96>
    4476:	2480      	movs	r4, #128	; 0x80
    4478:	465b      	mov	r3, fp
    447a:	0f42      	lsrs	r2, r0, #29
    447c:	0424      	lsls	r4, r4, #16
    447e:	00db      	lsls	r3, r3, #3
    4480:	4314      	orrs	r4, r2
    4482:	431c      	orrs	r4, r3
    4484:	00c3      	lsls	r3, r0, #3
    4486:	4699      	mov	r9, r3
    4488:	4b68      	ldr	r3, [pc, #416]	; (462c <__aeabi_dmul+0x1e0>)
    448a:	46a3      	mov	fp, r4
    448c:	469c      	mov	ip, r3
    448e:	2300      	movs	r3, #0
    4490:	2700      	movs	r7, #0
    4492:	4466      	add	r6, ip
    4494:	9302      	str	r3, [sp, #8]
    4496:	4643      	mov	r3, r8
    4498:	031c      	lsls	r4, r3, #12
    449a:	005a      	lsls	r2, r3, #1
    449c:	0fdb      	lsrs	r3, r3, #31
    449e:	4650      	mov	r0, sl
    44a0:	0b24      	lsrs	r4, r4, #12
    44a2:	0d52      	lsrs	r2, r2, #21
    44a4:	4698      	mov	r8, r3
    44a6:	d100      	bne.n	44aa <__aeabi_dmul+0x5e>
    44a8:	e076      	b.n	4598 <__aeabi_dmul+0x14c>
    44aa:	4b5f      	ldr	r3, [pc, #380]	; (4628 <__aeabi_dmul+0x1dc>)
    44ac:	429a      	cmp	r2, r3
    44ae:	d06d      	beq.n	458c <__aeabi_dmul+0x140>
    44b0:	2380      	movs	r3, #128	; 0x80
    44b2:	0f41      	lsrs	r1, r0, #29
    44b4:	041b      	lsls	r3, r3, #16
    44b6:	430b      	orrs	r3, r1
    44b8:	495c      	ldr	r1, [pc, #368]	; (462c <__aeabi_dmul+0x1e0>)
    44ba:	00e4      	lsls	r4, r4, #3
    44bc:	468c      	mov	ip, r1
    44be:	431c      	orrs	r4, r3
    44c0:	00c3      	lsls	r3, r0, #3
    44c2:	2000      	movs	r0, #0
    44c4:	4462      	add	r2, ip
    44c6:	4641      	mov	r1, r8
    44c8:	18b6      	adds	r6, r6, r2
    44ca:	4069      	eors	r1, r5
    44cc:	1c72      	adds	r2, r6, #1
    44ce:	9101      	str	r1, [sp, #4]
    44d0:	4694      	mov	ip, r2
    44d2:	4307      	orrs	r7, r0
    44d4:	2f0f      	cmp	r7, #15
    44d6:	d900      	bls.n	44da <__aeabi_dmul+0x8e>
    44d8:	e0b0      	b.n	463c <__aeabi_dmul+0x1f0>
    44da:	4a55      	ldr	r2, [pc, #340]	; (4630 <__aeabi_dmul+0x1e4>)
    44dc:	00bf      	lsls	r7, r7, #2
    44de:	59d2      	ldr	r2, [r2, r7]
    44e0:	4697      	mov	pc, r2
    44e2:	465b      	mov	r3, fp
    44e4:	4303      	orrs	r3, r0
    44e6:	4699      	mov	r9, r3
    44e8:	d000      	beq.n	44ec <__aeabi_dmul+0xa0>
    44ea:	e087      	b.n	45fc <__aeabi_dmul+0x1b0>
    44ec:	2300      	movs	r3, #0
    44ee:	469b      	mov	fp, r3
    44f0:	3302      	adds	r3, #2
    44f2:	2708      	movs	r7, #8
    44f4:	9302      	str	r3, [sp, #8]
    44f6:	e7ce      	b.n	4496 <__aeabi_dmul+0x4a>
    44f8:	4642      	mov	r2, r8
    44fa:	9201      	str	r2, [sp, #4]
    44fc:	2802      	cmp	r0, #2
    44fe:	d067      	beq.n	45d0 <__aeabi_dmul+0x184>
    4500:	2803      	cmp	r0, #3
    4502:	d100      	bne.n	4506 <__aeabi_dmul+0xba>
    4504:	e20e      	b.n	4924 <__aeabi_dmul+0x4d8>
    4506:	2801      	cmp	r0, #1
    4508:	d000      	beq.n	450c <__aeabi_dmul+0xc0>
    450a:	e162      	b.n	47d2 <__aeabi_dmul+0x386>
    450c:	2300      	movs	r3, #0
    450e:	2400      	movs	r4, #0
    4510:	2200      	movs	r2, #0
    4512:	4699      	mov	r9, r3
    4514:	9901      	ldr	r1, [sp, #4]
    4516:	4001      	ands	r1, r0
    4518:	b2cd      	uxtb	r5, r1
    451a:	2100      	movs	r1, #0
    451c:	0312      	lsls	r2, r2, #12
    451e:	0d0b      	lsrs	r3, r1, #20
    4520:	0b12      	lsrs	r2, r2, #12
    4522:	051b      	lsls	r3, r3, #20
    4524:	4313      	orrs	r3, r2
    4526:	4a43      	ldr	r2, [pc, #268]	; (4634 <__aeabi_dmul+0x1e8>)
    4528:	0524      	lsls	r4, r4, #20
    452a:	4013      	ands	r3, r2
    452c:	431c      	orrs	r4, r3
    452e:	0064      	lsls	r4, r4, #1
    4530:	07ed      	lsls	r5, r5, #31
    4532:	0864      	lsrs	r4, r4, #1
    4534:	432c      	orrs	r4, r5
    4536:	4648      	mov	r0, r9
    4538:	0021      	movs	r1, r4
    453a:	b007      	add	sp, #28
    453c:	bc3c      	pop	{r2, r3, r4, r5}
    453e:	4690      	mov	r8, r2
    4540:	4699      	mov	r9, r3
    4542:	46a2      	mov	sl, r4
    4544:	46ab      	mov	fp, r5
    4546:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4548:	4303      	orrs	r3, r0
    454a:	4699      	mov	r9, r3
    454c:	d04f      	beq.n	45ee <__aeabi_dmul+0x1a2>
    454e:	465b      	mov	r3, fp
    4550:	2b00      	cmp	r3, #0
    4552:	d100      	bne.n	4556 <__aeabi_dmul+0x10a>
    4554:	e189      	b.n	486a <__aeabi_dmul+0x41e>
    4556:	4658      	mov	r0, fp
    4558:	f000 fdec 	bl	5134 <__clzsi2>
    455c:	0003      	movs	r3, r0
    455e:	3b0b      	subs	r3, #11
    4560:	2b1c      	cmp	r3, #28
    4562:	dd00      	ble.n	4566 <__aeabi_dmul+0x11a>
    4564:	e17a      	b.n	485c <__aeabi_dmul+0x410>
    4566:	221d      	movs	r2, #29
    4568:	1ad3      	subs	r3, r2, r3
    456a:	003a      	movs	r2, r7
    456c:	0001      	movs	r1, r0
    456e:	465c      	mov	r4, fp
    4570:	40da      	lsrs	r2, r3
    4572:	3908      	subs	r1, #8
    4574:	408c      	lsls	r4, r1
    4576:	0013      	movs	r3, r2
    4578:	408f      	lsls	r7, r1
    457a:	4323      	orrs	r3, r4
    457c:	469b      	mov	fp, r3
    457e:	46b9      	mov	r9, r7
    4580:	2300      	movs	r3, #0
    4582:	4e2d      	ldr	r6, [pc, #180]	; (4638 <__aeabi_dmul+0x1ec>)
    4584:	2700      	movs	r7, #0
    4586:	1a36      	subs	r6, r6, r0
    4588:	9302      	str	r3, [sp, #8]
    458a:	e784      	b.n	4496 <__aeabi_dmul+0x4a>
    458c:	4653      	mov	r3, sl
    458e:	4323      	orrs	r3, r4
    4590:	d12a      	bne.n	45e8 <__aeabi_dmul+0x19c>
    4592:	2400      	movs	r4, #0
    4594:	2002      	movs	r0, #2
    4596:	e796      	b.n	44c6 <__aeabi_dmul+0x7a>
    4598:	4653      	mov	r3, sl
    459a:	4323      	orrs	r3, r4
    459c:	d020      	beq.n	45e0 <__aeabi_dmul+0x194>
    459e:	2c00      	cmp	r4, #0
    45a0:	d100      	bne.n	45a4 <__aeabi_dmul+0x158>
    45a2:	e157      	b.n	4854 <__aeabi_dmul+0x408>
    45a4:	0020      	movs	r0, r4
    45a6:	f000 fdc5 	bl	5134 <__clzsi2>
    45aa:	0003      	movs	r3, r0
    45ac:	3b0b      	subs	r3, #11
    45ae:	2b1c      	cmp	r3, #28
    45b0:	dd00      	ble.n	45b4 <__aeabi_dmul+0x168>
    45b2:	e149      	b.n	4848 <__aeabi_dmul+0x3fc>
    45b4:	211d      	movs	r1, #29
    45b6:	1acb      	subs	r3, r1, r3
    45b8:	4651      	mov	r1, sl
    45ba:	0002      	movs	r2, r0
    45bc:	40d9      	lsrs	r1, r3
    45be:	4653      	mov	r3, sl
    45c0:	3a08      	subs	r2, #8
    45c2:	4094      	lsls	r4, r2
    45c4:	4093      	lsls	r3, r2
    45c6:	430c      	orrs	r4, r1
    45c8:	4a1b      	ldr	r2, [pc, #108]	; (4638 <__aeabi_dmul+0x1ec>)
    45ca:	1a12      	subs	r2, r2, r0
    45cc:	2000      	movs	r0, #0
    45ce:	e77a      	b.n	44c6 <__aeabi_dmul+0x7a>
    45d0:	2501      	movs	r5, #1
    45d2:	9b01      	ldr	r3, [sp, #4]
    45d4:	4c14      	ldr	r4, [pc, #80]	; (4628 <__aeabi_dmul+0x1dc>)
    45d6:	401d      	ands	r5, r3
    45d8:	2300      	movs	r3, #0
    45da:	2200      	movs	r2, #0
    45dc:	4699      	mov	r9, r3
    45de:	e79c      	b.n	451a <__aeabi_dmul+0xce>
    45e0:	2400      	movs	r4, #0
    45e2:	2200      	movs	r2, #0
    45e4:	2001      	movs	r0, #1
    45e6:	e76e      	b.n	44c6 <__aeabi_dmul+0x7a>
    45e8:	4653      	mov	r3, sl
    45ea:	2003      	movs	r0, #3
    45ec:	e76b      	b.n	44c6 <__aeabi_dmul+0x7a>
    45ee:	2300      	movs	r3, #0
    45f0:	469b      	mov	fp, r3
    45f2:	3301      	adds	r3, #1
    45f4:	2704      	movs	r7, #4
    45f6:	2600      	movs	r6, #0
    45f8:	9302      	str	r3, [sp, #8]
    45fa:	e74c      	b.n	4496 <__aeabi_dmul+0x4a>
    45fc:	2303      	movs	r3, #3
    45fe:	4681      	mov	r9, r0
    4600:	270c      	movs	r7, #12
    4602:	9302      	str	r3, [sp, #8]
    4604:	e747      	b.n	4496 <__aeabi_dmul+0x4a>
    4606:	2280      	movs	r2, #128	; 0x80
    4608:	2300      	movs	r3, #0
    460a:	2500      	movs	r5, #0
    460c:	0312      	lsls	r2, r2, #12
    460e:	4699      	mov	r9, r3
    4610:	4c05      	ldr	r4, [pc, #20]	; (4628 <__aeabi_dmul+0x1dc>)
    4612:	e782      	b.n	451a <__aeabi_dmul+0xce>
    4614:	465c      	mov	r4, fp
    4616:	464b      	mov	r3, r9
    4618:	9802      	ldr	r0, [sp, #8]
    461a:	e76f      	b.n	44fc <__aeabi_dmul+0xb0>
    461c:	465c      	mov	r4, fp
    461e:	464b      	mov	r3, r9
    4620:	9501      	str	r5, [sp, #4]
    4622:	9802      	ldr	r0, [sp, #8]
    4624:	e76a      	b.n	44fc <__aeabi_dmul+0xb0>
    4626:	46c0      	nop			; (mov r8, r8)
    4628:	000007ff 	.word	0x000007ff
    462c:	fffffc01 	.word	0xfffffc01
    4630:	000059f8 	.word	0x000059f8
    4634:	800fffff 	.word	0x800fffff
    4638:	fffffc0d 	.word	0xfffffc0d
    463c:	464a      	mov	r2, r9
    463e:	4649      	mov	r1, r9
    4640:	0c17      	lsrs	r7, r2, #16
    4642:	0c1a      	lsrs	r2, r3, #16
    4644:	041b      	lsls	r3, r3, #16
    4646:	0c1b      	lsrs	r3, r3, #16
    4648:	0408      	lsls	r0, r1, #16
    464a:	0019      	movs	r1, r3
    464c:	0c00      	lsrs	r0, r0, #16
    464e:	4341      	muls	r1, r0
    4650:	0015      	movs	r5, r2
    4652:	4688      	mov	r8, r1
    4654:	0019      	movs	r1, r3
    4656:	437d      	muls	r5, r7
    4658:	4379      	muls	r1, r7
    465a:	9503      	str	r5, [sp, #12]
    465c:	4689      	mov	r9, r1
    465e:	0029      	movs	r1, r5
    4660:	0015      	movs	r5, r2
    4662:	4345      	muls	r5, r0
    4664:	444d      	add	r5, r9
    4666:	9502      	str	r5, [sp, #8]
    4668:	4645      	mov	r5, r8
    466a:	0c2d      	lsrs	r5, r5, #16
    466c:	46aa      	mov	sl, r5
    466e:	9d02      	ldr	r5, [sp, #8]
    4670:	4455      	add	r5, sl
    4672:	45a9      	cmp	r9, r5
    4674:	d906      	bls.n	4684 <__aeabi_dmul+0x238>
    4676:	468a      	mov	sl, r1
    4678:	2180      	movs	r1, #128	; 0x80
    467a:	0249      	lsls	r1, r1, #9
    467c:	4689      	mov	r9, r1
    467e:	44ca      	add	sl, r9
    4680:	4651      	mov	r1, sl
    4682:	9103      	str	r1, [sp, #12]
    4684:	0c29      	lsrs	r1, r5, #16
    4686:	9104      	str	r1, [sp, #16]
    4688:	4641      	mov	r1, r8
    468a:	0409      	lsls	r1, r1, #16
    468c:	042d      	lsls	r5, r5, #16
    468e:	0c09      	lsrs	r1, r1, #16
    4690:	4688      	mov	r8, r1
    4692:	0029      	movs	r1, r5
    4694:	0c25      	lsrs	r5, r4, #16
    4696:	0424      	lsls	r4, r4, #16
    4698:	4441      	add	r1, r8
    469a:	0c24      	lsrs	r4, r4, #16
    469c:	9105      	str	r1, [sp, #20]
    469e:	0021      	movs	r1, r4
    46a0:	4341      	muls	r1, r0
    46a2:	4688      	mov	r8, r1
    46a4:	0021      	movs	r1, r4
    46a6:	4379      	muls	r1, r7
    46a8:	468a      	mov	sl, r1
    46aa:	4368      	muls	r0, r5
    46ac:	4641      	mov	r1, r8
    46ae:	4450      	add	r0, sl
    46b0:	4681      	mov	r9, r0
    46b2:	0c08      	lsrs	r0, r1, #16
    46b4:	4448      	add	r0, r9
    46b6:	436f      	muls	r7, r5
    46b8:	4582      	cmp	sl, r0
    46ba:	d903      	bls.n	46c4 <__aeabi_dmul+0x278>
    46bc:	2180      	movs	r1, #128	; 0x80
    46be:	0249      	lsls	r1, r1, #9
    46c0:	4689      	mov	r9, r1
    46c2:	444f      	add	r7, r9
    46c4:	0c01      	lsrs	r1, r0, #16
    46c6:	4689      	mov	r9, r1
    46c8:	0039      	movs	r1, r7
    46ca:	4449      	add	r1, r9
    46cc:	9102      	str	r1, [sp, #8]
    46ce:	4641      	mov	r1, r8
    46d0:	040f      	lsls	r7, r1, #16
    46d2:	9904      	ldr	r1, [sp, #16]
    46d4:	0c3f      	lsrs	r7, r7, #16
    46d6:	4688      	mov	r8, r1
    46d8:	0400      	lsls	r0, r0, #16
    46da:	19c0      	adds	r0, r0, r7
    46dc:	4480      	add	r8, r0
    46de:	4641      	mov	r1, r8
    46e0:	9104      	str	r1, [sp, #16]
    46e2:	4659      	mov	r1, fp
    46e4:	0c0f      	lsrs	r7, r1, #16
    46e6:	0409      	lsls	r1, r1, #16
    46e8:	0c09      	lsrs	r1, r1, #16
    46ea:	4688      	mov	r8, r1
    46ec:	4359      	muls	r1, r3
    46ee:	468a      	mov	sl, r1
    46f0:	0039      	movs	r1, r7
    46f2:	4351      	muls	r1, r2
    46f4:	4689      	mov	r9, r1
    46f6:	4641      	mov	r1, r8
    46f8:	434a      	muls	r2, r1
    46fa:	4651      	mov	r1, sl
    46fc:	0c09      	lsrs	r1, r1, #16
    46fe:	468b      	mov	fp, r1
    4700:	437b      	muls	r3, r7
    4702:	18d2      	adds	r2, r2, r3
    4704:	445a      	add	r2, fp
    4706:	4293      	cmp	r3, r2
    4708:	d903      	bls.n	4712 <__aeabi_dmul+0x2c6>
    470a:	2380      	movs	r3, #128	; 0x80
    470c:	025b      	lsls	r3, r3, #9
    470e:	469b      	mov	fp, r3
    4710:	44d9      	add	r9, fp
    4712:	4651      	mov	r1, sl
    4714:	0409      	lsls	r1, r1, #16
    4716:	0c09      	lsrs	r1, r1, #16
    4718:	468a      	mov	sl, r1
    471a:	4641      	mov	r1, r8
    471c:	4361      	muls	r1, r4
    471e:	437c      	muls	r4, r7
    4720:	0c13      	lsrs	r3, r2, #16
    4722:	0412      	lsls	r2, r2, #16
    4724:	444b      	add	r3, r9
    4726:	4452      	add	r2, sl
    4728:	46a1      	mov	r9, r4
    472a:	468a      	mov	sl, r1
    472c:	003c      	movs	r4, r7
    472e:	4641      	mov	r1, r8
    4730:	436c      	muls	r4, r5
    4732:	434d      	muls	r5, r1
    4734:	4651      	mov	r1, sl
    4736:	444d      	add	r5, r9
    4738:	0c0f      	lsrs	r7, r1, #16
    473a:	197d      	adds	r5, r7, r5
    473c:	45a9      	cmp	r9, r5
    473e:	d903      	bls.n	4748 <__aeabi_dmul+0x2fc>
    4740:	2180      	movs	r1, #128	; 0x80
    4742:	0249      	lsls	r1, r1, #9
    4744:	4688      	mov	r8, r1
    4746:	4444      	add	r4, r8
    4748:	9f04      	ldr	r7, [sp, #16]
    474a:	9903      	ldr	r1, [sp, #12]
    474c:	46b8      	mov	r8, r7
    474e:	4441      	add	r1, r8
    4750:	468b      	mov	fp, r1
    4752:	4583      	cmp	fp, r0
    4754:	4180      	sbcs	r0, r0
    4756:	4241      	negs	r1, r0
    4758:	4688      	mov	r8, r1
    475a:	4651      	mov	r1, sl
    475c:	0408      	lsls	r0, r1, #16
    475e:	042f      	lsls	r7, r5, #16
    4760:	0c00      	lsrs	r0, r0, #16
    4762:	183f      	adds	r7, r7, r0
    4764:	4658      	mov	r0, fp
    4766:	9902      	ldr	r1, [sp, #8]
    4768:	1810      	adds	r0, r2, r0
    476a:	4689      	mov	r9, r1
    476c:	4290      	cmp	r0, r2
    476e:	4192      	sbcs	r2, r2
    4770:	444f      	add	r7, r9
    4772:	46ba      	mov	sl, r7
    4774:	4252      	negs	r2, r2
    4776:	4699      	mov	r9, r3
    4778:	4693      	mov	fp, r2
    477a:	44c2      	add	sl, r8
    477c:	44d1      	add	r9, sl
    477e:	44cb      	add	fp, r9
    4780:	428f      	cmp	r7, r1
    4782:	41bf      	sbcs	r7, r7
    4784:	45c2      	cmp	sl, r8
    4786:	4189      	sbcs	r1, r1
    4788:	4599      	cmp	r9, r3
    478a:	419b      	sbcs	r3, r3
    478c:	4593      	cmp	fp, r2
    478e:	4192      	sbcs	r2, r2
    4790:	427f      	negs	r7, r7
    4792:	4249      	negs	r1, r1
    4794:	0c2d      	lsrs	r5, r5, #16
    4796:	4252      	negs	r2, r2
    4798:	430f      	orrs	r7, r1
    479a:	425b      	negs	r3, r3
    479c:	4313      	orrs	r3, r2
    479e:	197f      	adds	r7, r7, r5
    47a0:	18ff      	adds	r7, r7, r3
    47a2:	465b      	mov	r3, fp
    47a4:	193c      	adds	r4, r7, r4
    47a6:	0ddb      	lsrs	r3, r3, #23
    47a8:	9a05      	ldr	r2, [sp, #20]
    47aa:	0264      	lsls	r4, r4, #9
    47ac:	431c      	orrs	r4, r3
    47ae:	0243      	lsls	r3, r0, #9
    47b0:	4313      	orrs	r3, r2
    47b2:	1e5d      	subs	r5, r3, #1
    47b4:	41ab      	sbcs	r3, r5
    47b6:	465a      	mov	r2, fp
    47b8:	0dc0      	lsrs	r0, r0, #23
    47ba:	4303      	orrs	r3, r0
    47bc:	0252      	lsls	r2, r2, #9
    47be:	4313      	orrs	r3, r2
    47c0:	01e2      	lsls	r2, r4, #7
    47c2:	d556      	bpl.n	4872 <__aeabi_dmul+0x426>
    47c4:	2001      	movs	r0, #1
    47c6:	085a      	lsrs	r2, r3, #1
    47c8:	4003      	ands	r3, r0
    47ca:	4313      	orrs	r3, r2
    47cc:	07e2      	lsls	r2, r4, #31
    47ce:	4313      	orrs	r3, r2
    47d0:	0864      	lsrs	r4, r4, #1
    47d2:	485a      	ldr	r0, [pc, #360]	; (493c <__aeabi_dmul+0x4f0>)
    47d4:	4460      	add	r0, ip
    47d6:	2800      	cmp	r0, #0
    47d8:	dd4d      	ble.n	4876 <__aeabi_dmul+0x42a>
    47da:	075a      	lsls	r2, r3, #29
    47dc:	d009      	beq.n	47f2 <__aeabi_dmul+0x3a6>
    47de:	220f      	movs	r2, #15
    47e0:	401a      	ands	r2, r3
    47e2:	2a04      	cmp	r2, #4
    47e4:	d005      	beq.n	47f2 <__aeabi_dmul+0x3a6>
    47e6:	1d1a      	adds	r2, r3, #4
    47e8:	429a      	cmp	r2, r3
    47ea:	419b      	sbcs	r3, r3
    47ec:	425b      	negs	r3, r3
    47ee:	18e4      	adds	r4, r4, r3
    47f0:	0013      	movs	r3, r2
    47f2:	01e2      	lsls	r2, r4, #7
    47f4:	d504      	bpl.n	4800 <__aeabi_dmul+0x3b4>
    47f6:	2080      	movs	r0, #128	; 0x80
    47f8:	4a51      	ldr	r2, [pc, #324]	; (4940 <__aeabi_dmul+0x4f4>)
    47fa:	00c0      	lsls	r0, r0, #3
    47fc:	4014      	ands	r4, r2
    47fe:	4460      	add	r0, ip
    4800:	4a50      	ldr	r2, [pc, #320]	; (4944 <__aeabi_dmul+0x4f8>)
    4802:	4290      	cmp	r0, r2
    4804:	dd00      	ble.n	4808 <__aeabi_dmul+0x3bc>
    4806:	e6e3      	b.n	45d0 <__aeabi_dmul+0x184>
    4808:	2501      	movs	r5, #1
    480a:	08db      	lsrs	r3, r3, #3
    480c:	0762      	lsls	r2, r4, #29
    480e:	431a      	orrs	r2, r3
    4810:	0264      	lsls	r4, r4, #9
    4812:	9b01      	ldr	r3, [sp, #4]
    4814:	4691      	mov	r9, r2
    4816:	0b22      	lsrs	r2, r4, #12
    4818:	0544      	lsls	r4, r0, #21
    481a:	0d64      	lsrs	r4, r4, #21
    481c:	401d      	ands	r5, r3
    481e:	e67c      	b.n	451a <__aeabi_dmul+0xce>
    4820:	2280      	movs	r2, #128	; 0x80
    4822:	4659      	mov	r1, fp
    4824:	0312      	lsls	r2, r2, #12
    4826:	4211      	tst	r1, r2
    4828:	d008      	beq.n	483c <__aeabi_dmul+0x3f0>
    482a:	4214      	tst	r4, r2
    482c:	d106      	bne.n	483c <__aeabi_dmul+0x3f0>
    482e:	4322      	orrs	r2, r4
    4830:	0312      	lsls	r2, r2, #12
    4832:	0b12      	lsrs	r2, r2, #12
    4834:	4645      	mov	r5, r8
    4836:	4699      	mov	r9, r3
    4838:	4c43      	ldr	r4, [pc, #268]	; (4948 <__aeabi_dmul+0x4fc>)
    483a:	e66e      	b.n	451a <__aeabi_dmul+0xce>
    483c:	465b      	mov	r3, fp
    483e:	431a      	orrs	r2, r3
    4840:	0312      	lsls	r2, r2, #12
    4842:	0b12      	lsrs	r2, r2, #12
    4844:	4c40      	ldr	r4, [pc, #256]	; (4948 <__aeabi_dmul+0x4fc>)
    4846:	e668      	b.n	451a <__aeabi_dmul+0xce>
    4848:	0003      	movs	r3, r0
    484a:	4654      	mov	r4, sl
    484c:	3b28      	subs	r3, #40	; 0x28
    484e:	409c      	lsls	r4, r3
    4850:	2300      	movs	r3, #0
    4852:	e6b9      	b.n	45c8 <__aeabi_dmul+0x17c>
    4854:	f000 fc6e 	bl	5134 <__clzsi2>
    4858:	3020      	adds	r0, #32
    485a:	e6a6      	b.n	45aa <__aeabi_dmul+0x15e>
    485c:	0003      	movs	r3, r0
    485e:	3b28      	subs	r3, #40	; 0x28
    4860:	409f      	lsls	r7, r3
    4862:	2300      	movs	r3, #0
    4864:	46bb      	mov	fp, r7
    4866:	4699      	mov	r9, r3
    4868:	e68a      	b.n	4580 <__aeabi_dmul+0x134>
    486a:	f000 fc63 	bl	5134 <__clzsi2>
    486e:	3020      	adds	r0, #32
    4870:	e674      	b.n	455c <__aeabi_dmul+0x110>
    4872:	46b4      	mov	ip, r6
    4874:	e7ad      	b.n	47d2 <__aeabi_dmul+0x386>
    4876:	2501      	movs	r5, #1
    4878:	1a2a      	subs	r2, r5, r0
    487a:	2a38      	cmp	r2, #56	; 0x38
    487c:	dd06      	ble.n	488c <__aeabi_dmul+0x440>
    487e:	9b01      	ldr	r3, [sp, #4]
    4880:	2400      	movs	r4, #0
    4882:	401d      	ands	r5, r3
    4884:	2300      	movs	r3, #0
    4886:	2200      	movs	r2, #0
    4888:	4699      	mov	r9, r3
    488a:	e646      	b.n	451a <__aeabi_dmul+0xce>
    488c:	2a1f      	cmp	r2, #31
    488e:	dc21      	bgt.n	48d4 <__aeabi_dmul+0x488>
    4890:	2520      	movs	r5, #32
    4892:	0020      	movs	r0, r4
    4894:	1aad      	subs	r5, r5, r2
    4896:	001e      	movs	r6, r3
    4898:	40ab      	lsls	r3, r5
    489a:	40a8      	lsls	r0, r5
    489c:	40d6      	lsrs	r6, r2
    489e:	1e5d      	subs	r5, r3, #1
    48a0:	41ab      	sbcs	r3, r5
    48a2:	4330      	orrs	r0, r6
    48a4:	4318      	orrs	r0, r3
    48a6:	40d4      	lsrs	r4, r2
    48a8:	0743      	lsls	r3, r0, #29
    48aa:	d009      	beq.n	48c0 <__aeabi_dmul+0x474>
    48ac:	230f      	movs	r3, #15
    48ae:	4003      	ands	r3, r0
    48b0:	2b04      	cmp	r3, #4
    48b2:	d005      	beq.n	48c0 <__aeabi_dmul+0x474>
    48b4:	0003      	movs	r3, r0
    48b6:	1d18      	adds	r0, r3, #4
    48b8:	4298      	cmp	r0, r3
    48ba:	419b      	sbcs	r3, r3
    48bc:	425b      	negs	r3, r3
    48be:	18e4      	adds	r4, r4, r3
    48c0:	0223      	lsls	r3, r4, #8
    48c2:	d521      	bpl.n	4908 <__aeabi_dmul+0x4bc>
    48c4:	2501      	movs	r5, #1
    48c6:	9b01      	ldr	r3, [sp, #4]
    48c8:	2401      	movs	r4, #1
    48ca:	401d      	ands	r5, r3
    48cc:	2300      	movs	r3, #0
    48ce:	2200      	movs	r2, #0
    48d0:	4699      	mov	r9, r3
    48d2:	e622      	b.n	451a <__aeabi_dmul+0xce>
    48d4:	251f      	movs	r5, #31
    48d6:	0021      	movs	r1, r4
    48d8:	426d      	negs	r5, r5
    48da:	1a28      	subs	r0, r5, r0
    48dc:	40c1      	lsrs	r1, r0
    48de:	0008      	movs	r0, r1
    48e0:	2a20      	cmp	r2, #32
    48e2:	d01d      	beq.n	4920 <__aeabi_dmul+0x4d4>
    48e4:	355f      	adds	r5, #95	; 0x5f
    48e6:	1aaa      	subs	r2, r5, r2
    48e8:	4094      	lsls	r4, r2
    48ea:	4323      	orrs	r3, r4
    48ec:	1e5c      	subs	r4, r3, #1
    48ee:	41a3      	sbcs	r3, r4
    48f0:	2507      	movs	r5, #7
    48f2:	4303      	orrs	r3, r0
    48f4:	401d      	ands	r5, r3
    48f6:	2200      	movs	r2, #0
    48f8:	2d00      	cmp	r5, #0
    48fa:	d009      	beq.n	4910 <__aeabi_dmul+0x4c4>
    48fc:	220f      	movs	r2, #15
    48fe:	2400      	movs	r4, #0
    4900:	401a      	ands	r2, r3
    4902:	0018      	movs	r0, r3
    4904:	2a04      	cmp	r2, #4
    4906:	d1d6      	bne.n	48b6 <__aeabi_dmul+0x46a>
    4908:	0003      	movs	r3, r0
    490a:	0765      	lsls	r5, r4, #29
    490c:	0264      	lsls	r4, r4, #9
    490e:	0b22      	lsrs	r2, r4, #12
    4910:	08db      	lsrs	r3, r3, #3
    4912:	432b      	orrs	r3, r5
    4914:	2501      	movs	r5, #1
    4916:	4699      	mov	r9, r3
    4918:	9b01      	ldr	r3, [sp, #4]
    491a:	2400      	movs	r4, #0
    491c:	401d      	ands	r5, r3
    491e:	e5fc      	b.n	451a <__aeabi_dmul+0xce>
    4920:	2400      	movs	r4, #0
    4922:	e7e2      	b.n	48ea <__aeabi_dmul+0x49e>
    4924:	2280      	movs	r2, #128	; 0x80
    4926:	2501      	movs	r5, #1
    4928:	0312      	lsls	r2, r2, #12
    492a:	4322      	orrs	r2, r4
    492c:	9901      	ldr	r1, [sp, #4]
    492e:	0312      	lsls	r2, r2, #12
    4930:	0b12      	lsrs	r2, r2, #12
    4932:	400d      	ands	r5, r1
    4934:	4699      	mov	r9, r3
    4936:	4c04      	ldr	r4, [pc, #16]	; (4948 <__aeabi_dmul+0x4fc>)
    4938:	e5ef      	b.n	451a <__aeabi_dmul+0xce>
    493a:	46c0      	nop			; (mov r8, r8)
    493c:	000003ff 	.word	0x000003ff
    4940:	feffffff 	.word	0xfeffffff
    4944:	000007fe 	.word	0x000007fe
    4948:	000007ff 	.word	0x000007ff

0000494c <__aeabi_dsub>:
    494c:	b5f0      	push	{r4, r5, r6, r7, lr}
    494e:	4646      	mov	r6, r8
    4950:	46d6      	mov	lr, sl
    4952:	464f      	mov	r7, r9
    4954:	030c      	lsls	r4, r1, #12
    4956:	b5c0      	push	{r6, r7, lr}
    4958:	0fcd      	lsrs	r5, r1, #31
    495a:	004e      	lsls	r6, r1, #1
    495c:	0a61      	lsrs	r1, r4, #9
    495e:	0f44      	lsrs	r4, r0, #29
    4960:	430c      	orrs	r4, r1
    4962:	00c1      	lsls	r1, r0, #3
    4964:	0058      	lsls	r0, r3, #1
    4966:	0d40      	lsrs	r0, r0, #21
    4968:	4684      	mov	ip, r0
    496a:	468a      	mov	sl, r1
    496c:	000f      	movs	r7, r1
    496e:	0319      	lsls	r1, r3, #12
    4970:	0f50      	lsrs	r0, r2, #29
    4972:	0a49      	lsrs	r1, r1, #9
    4974:	4301      	orrs	r1, r0
    4976:	48c6      	ldr	r0, [pc, #792]	; (4c90 <__aeabi_dsub+0x344>)
    4978:	0d76      	lsrs	r6, r6, #21
    497a:	46a8      	mov	r8, r5
    497c:	0fdb      	lsrs	r3, r3, #31
    497e:	00d2      	lsls	r2, r2, #3
    4980:	4584      	cmp	ip, r0
    4982:	d100      	bne.n	4986 <__aeabi_dsub+0x3a>
    4984:	e0d8      	b.n	4b38 <__aeabi_dsub+0x1ec>
    4986:	2001      	movs	r0, #1
    4988:	4043      	eors	r3, r0
    498a:	42ab      	cmp	r3, r5
    498c:	d100      	bne.n	4990 <__aeabi_dsub+0x44>
    498e:	e0a6      	b.n	4ade <__aeabi_dsub+0x192>
    4990:	4660      	mov	r0, ip
    4992:	1a35      	subs	r5, r6, r0
    4994:	2d00      	cmp	r5, #0
    4996:	dc00      	bgt.n	499a <__aeabi_dsub+0x4e>
    4998:	e105      	b.n	4ba6 <__aeabi_dsub+0x25a>
    499a:	2800      	cmp	r0, #0
    499c:	d110      	bne.n	49c0 <__aeabi_dsub+0x74>
    499e:	000b      	movs	r3, r1
    49a0:	4313      	orrs	r3, r2
    49a2:	d100      	bne.n	49a6 <__aeabi_dsub+0x5a>
    49a4:	e0d7      	b.n	4b56 <__aeabi_dsub+0x20a>
    49a6:	1e6b      	subs	r3, r5, #1
    49a8:	2b00      	cmp	r3, #0
    49aa:	d000      	beq.n	49ae <__aeabi_dsub+0x62>
    49ac:	e14b      	b.n	4c46 <__aeabi_dsub+0x2fa>
    49ae:	4653      	mov	r3, sl
    49b0:	1a9f      	subs	r7, r3, r2
    49b2:	45ba      	cmp	sl, r7
    49b4:	4180      	sbcs	r0, r0
    49b6:	1a64      	subs	r4, r4, r1
    49b8:	4240      	negs	r0, r0
    49ba:	1a24      	subs	r4, r4, r0
    49bc:	2601      	movs	r6, #1
    49be:	e01e      	b.n	49fe <__aeabi_dsub+0xb2>
    49c0:	4bb3      	ldr	r3, [pc, #716]	; (4c90 <__aeabi_dsub+0x344>)
    49c2:	429e      	cmp	r6, r3
    49c4:	d048      	beq.n	4a58 <__aeabi_dsub+0x10c>
    49c6:	2380      	movs	r3, #128	; 0x80
    49c8:	041b      	lsls	r3, r3, #16
    49ca:	4319      	orrs	r1, r3
    49cc:	2d38      	cmp	r5, #56	; 0x38
    49ce:	dd00      	ble.n	49d2 <__aeabi_dsub+0x86>
    49d0:	e119      	b.n	4c06 <__aeabi_dsub+0x2ba>
    49d2:	2d1f      	cmp	r5, #31
    49d4:	dd00      	ble.n	49d8 <__aeabi_dsub+0x8c>
    49d6:	e14c      	b.n	4c72 <__aeabi_dsub+0x326>
    49d8:	2320      	movs	r3, #32
    49da:	000f      	movs	r7, r1
    49dc:	1b5b      	subs	r3, r3, r5
    49de:	0010      	movs	r0, r2
    49e0:	409a      	lsls	r2, r3
    49e2:	409f      	lsls	r7, r3
    49e4:	40e8      	lsrs	r0, r5
    49e6:	1e53      	subs	r3, r2, #1
    49e8:	419a      	sbcs	r2, r3
    49ea:	40e9      	lsrs	r1, r5
    49ec:	4307      	orrs	r7, r0
    49ee:	4317      	orrs	r7, r2
    49f0:	4653      	mov	r3, sl
    49f2:	1bdf      	subs	r7, r3, r7
    49f4:	1a61      	subs	r1, r4, r1
    49f6:	45ba      	cmp	sl, r7
    49f8:	41a4      	sbcs	r4, r4
    49fa:	4264      	negs	r4, r4
    49fc:	1b0c      	subs	r4, r1, r4
    49fe:	0223      	lsls	r3, r4, #8
    4a00:	d400      	bmi.n	4a04 <__aeabi_dsub+0xb8>
    4a02:	e0c5      	b.n	4b90 <__aeabi_dsub+0x244>
    4a04:	0264      	lsls	r4, r4, #9
    4a06:	0a65      	lsrs	r5, r4, #9
    4a08:	2d00      	cmp	r5, #0
    4a0a:	d100      	bne.n	4a0e <__aeabi_dsub+0xc2>
    4a0c:	e0f6      	b.n	4bfc <__aeabi_dsub+0x2b0>
    4a0e:	0028      	movs	r0, r5
    4a10:	f000 fb90 	bl	5134 <__clzsi2>
    4a14:	0003      	movs	r3, r0
    4a16:	3b08      	subs	r3, #8
    4a18:	2b1f      	cmp	r3, #31
    4a1a:	dd00      	ble.n	4a1e <__aeabi_dsub+0xd2>
    4a1c:	e0e9      	b.n	4bf2 <__aeabi_dsub+0x2a6>
    4a1e:	2220      	movs	r2, #32
    4a20:	003c      	movs	r4, r7
    4a22:	1ad2      	subs	r2, r2, r3
    4a24:	409d      	lsls	r5, r3
    4a26:	40d4      	lsrs	r4, r2
    4a28:	409f      	lsls	r7, r3
    4a2a:	4325      	orrs	r5, r4
    4a2c:	429e      	cmp	r6, r3
    4a2e:	dd00      	ble.n	4a32 <__aeabi_dsub+0xe6>
    4a30:	e0db      	b.n	4bea <__aeabi_dsub+0x29e>
    4a32:	1b9e      	subs	r6, r3, r6
    4a34:	1c73      	adds	r3, r6, #1
    4a36:	2b1f      	cmp	r3, #31
    4a38:	dd00      	ble.n	4a3c <__aeabi_dsub+0xf0>
    4a3a:	e10a      	b.n	4c52 <__aeabi_dsub+0x306>
    4a3c:	2220      	movs	r2, #32
    4a3e:	0038      	movs	r0, r7
    4a40:	1ad2      	subs	r2, r2, r3
    4a42:	0029      	movs	r1, r5
    4a44:	4097      	lsls	r7, r2
    4a46:	002c      	movs	r4, r5
    4a48:	4091      	lsls	r1, r2
    4a4a:	40d8      	lsrs	r0, r3
    4a4c:	1e7a      	subs	r2, r7, #1
    4a4e:	4197      	sbcs	r7, r2
    4a50:	40dc      	lsrs	r4, r3
    4a52:	2600      	movs	r6, #0
    4a54:	4301      	orrs	r1, r0
    4a56:	430f      	orrs	r7, r1
    4a58:	077b      	lsls	r3, r7, #29
    4a5a:	d009      	beq.n	4a70 <__aeabi_dsub+0x124>
    4a5c:	230f      	movs	r3, #15
    4a5e:	403b      	ands	r3, r7
    4a60:	2b04      	cmp	r3, #4
    4a62:	d005      	beq.n	4a70 <__aeabi_dsub+0x124>
    4a64:	1d3b      	adds	r3, r7, #4
    4a66:	42bb      	cmp	r3, r7
    4a68:	41bf      	sbcs	r7, r7
    4a6a:	427f      	negs	r7, r7
    4a6c:	19e4      	adds	r4, r4, r7
    4a6e:	001f      	movs	r7, r3
    4a70:	0223      	lsls	r3, r4, #8
    4a72:	d525      	bpl.n	4ac0 <__aeabi_dsub+0x174>
    4a74:	4b86      	ldr	r3, [pc, #536]	; (4c90 <__aeabi_dsub+0x344>)
    4a76:	3601      	adds	r6, #1
    4a78:	429e      	cmp	r6, r3
    4a7a:	d100      	bne.n	4a7e <__aeabi_dsub+0x132>
    4a7c:	e0af      	b.n	4bde <__aeabi_dsub+0x292>
    4a7e:	4b85      	ldr	r3, [pc, #532]	; (4c94 <__aeabi_dsub+0x348>)
    4a80:	2501      	movs	r5, #1
    4a82:	401c      	ands	r4, r3
    4a84:	4643      	mov	r3, r8
    4a86:	0762      	lsls	r2, r4, #29
    4a88:	08ff      	lsrs	r7, r7, #3
    4a8a:	0264      	lsls	r4, r4, #9
    4a8c:	0576      	lsls	r6, r6, #21
    4a8e:	4317      	orrs	r7, r2
    4a90:	0b24      	lsrs	r4, r4, #12
    4a92:	0d76      	lsrs	r6, r6, #21
    4a94:	401d      	ands	r5, r3
    4a96:	2100      	movs	r1, #0
    4a98:	0324      	lsls	r4, r4, #12
    4a9a:	0b23      	lsrs	r3, r4, #12
    4a9c:	0d0c      	lsrs	r4, r1, #20
    4a9e:	4a7e      	ldr	r2, [pc, #504]	; (4c98 <__aeabi_dsub+0x34c>)
    4aa0:	0524      	lsls	r4, r4, #20
    4aa2:	431c      	orrs	r4, r3
    4aa4:	4014      	ands	r4, r2
    4aa6:	0533      	lsls	r3, r6, #20
    4aa8:	4323      	orrs	r3, r4
    4aaa:	005b      	lsls	r3, r3, #1
    4aac:	07ed      	lsls	r5, r5, #31
    4aae:	085b      	lsrs	r3, r3, #1
    4ab0:	432b      	orrs	r3, r5
    4ab2:	0038      	movs	r0, r7
    4ab4:	0019      	movs	r1, r3
    4ab6:	bc1c      	pop	{r2, r3, r4}
    4ab8:	4690      	mov	r8, r2
    4aba:	4699      	mov	r9, r3
    4abc:	46a2      	mov	sl, r4
    4abe:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4ac0:	2501      	movs	r5, #1
    4ac2:	4643      	mov	r3, r8
    4ac4:	0762      	lsls	r2, r4, #29
    4ac6:	08ff      	lsrs	r7, r7, #3
    4ac8:	4317      	orrs	r7, r2
    4aca:	08e4      	lsrs	r4, r4, #3
    4acc:	401d      	ands	r5, r3
    4ace:	4b70      	ldr	r3, [pc, #448]	; (4c90 <__aeabi_dsub+0x344>)
    4ad0:	429e      	cmp	r6, r3
    4ad2:	d036      	beq.n	4b42 <__aeabi_dsub+0x1f6>
    4ad4:	0324      	lsls	r4, r4, #12
    4ad6:	0576      	lsls	r6, r6, #21
    4ad8:	0b24      	lsrs	r4, r4, #12
    4ada:	0d76      	lsrs	r6, r6, #21
    4adc:	e7db      	b.n	4a96 <__aeabi_dsub+0x14a>
    4ade:	4663      	mov	r3, ip
    4ae0:	1af3      	subs	r3, r6, r3
    4ae2:	2b00      	cmp	r3, #0
    4ae4:	dc00      	bgt.n	4ae8 <__aeabi_dsub+0x19c>
    4ae6:	e094      	b.n	4c12 <__aeabi_dsub+0x2c6>
    4ae8:	4660      	mov	r0, ip
    4aea:	2800      	cmp	r0, #0
    4aec:	d035      	beq.n	4b5a <__aeabi_dsub+0x20e>
    4aee:	4868      	ldr	r0, [pc, #416]	; (4c90 <__aeabi_dsub+0x344>)
    4af0:	4286      	cmp	r6, r0
    4af2:	d0b1      	beq.n	4a58 <__aeabi_dsub+0x10c>
    4af4:	2780      	movs	r7, #128	; 0x80
    4af6:	043f      	lsls	r7, r7, #16
    4af8:	4339      	orrs	r1, r7
    4afa:	2b38      	cmp	r3, #56	; 0x38
    4afc:	dc00      	bgt.n	4b00 <__aeabi_dsub+0x1b4>
    4afe:	e0fd      	b.n	4cfc <__aeabi_dsub+0x3b0>
    4b00:	430a      	orrs	r2, r1
    4b02:	0017      	movs	r7, r2
    4b04:	2100      	movs	r1, #0
    4b06:	1e7a      	subs	r2, r7, #1
    4b08:	4197      	sbcs	r7, r2
    4b0a:	4457      	add	r7, sl
    4b0c:	4557      	cmp	r7, sl
    4b0e:	4180      	sbcs	r0, r0
    4b10:	1909      	adds	r1, r1, r4
    4b12:	4244      	negs	r4, r0
    4b14:	190c      	adds	r4, r1, r4
    4b16:	0223      	lsls	r3, r4, #8
    4b18:	d53a      	bpl.n	4b90 <__aeabi_dsub+0x244>
    4b1a:	4b5d      	ldr	r3, [pc, #372]	; (4c90 <__aeabi_dsub+0x344>)
    4b1c:	3601      	adds	r6, #1
    4b1e:	429e      	cmp	r6, r3
    4b20:	d100      	bne.n	4b24 <__aeabi_dsub+0x1d8>
    4b22:	e14b      	b.n	4dbc <__aeabi_dsub+0x470>
    4b24:	2201      	movs	r2, #1
    4b26:	4b5b      	ldr	r3, [pc, #364]	; (4c94 <__aeabi_dsub+0x348>)
    4b28:	401c      	ands	r4, r3
    4b2a:	087b      	lsrs	r3, r7, #1
    4b2c:	4017      	ands	r7, r2
    4b2e:	431f      	orrs	r7, r3
    4b30:	07e2      	lsls	r2, r4, #31
    4b32:	4317      	orrs	r7, r2
    4b34:	0864      	lsrs	r4, r4, #1
    4b36:	e78f      	b.n	4a58 <__aeabi_dsub+0x10c>
    4b38:	0008      	movs	r0, r1
    4b3a:	4310      	orrs	r0, r2
    4b3c:	d000      	beq.n	4b40 <__aeabi_dsub+0x1f4>
    4b3e:	e724      	b.n	498a <__aeabi_dsub+0x3e>
    4b40:	e721      	b.n	4986 <__aeabi_dsub+0x3a>
    4b42:	0023      	movs	r3, r4
    4b44:	433b      	orrs	r3, r7
    4b46:	d100      	bne.n	4b4a <__aeabi_dsub+0x1fe>
    4b48:	e1b9      	b.n	4ebe <__aeabi_dsub+0x572>
    4b4a:	2280      	movs	r2, #128	; 0x80
    4b4c:	0312      	lsls	r2, r2, #12
    4b4e:	4314      	orrs	r4, r2
    4b50:	0324      	lsls	r4, r4, #12
    4b52:	0b24      	lsrs	r4, r4, #12
    4b54:	e79f      	b.n	4a96 <__aeabi_dsub+0x14a>
    4b56:	002e      	movs	r6, r5
    4b58:	e77e      	b.n	4a58 <__aeabi_dsub+0x10c>
    4b5a:	0008      	movs	r0, r1
    4b5c:	4310      	orrs	r0, r2
    4b5e:	d100      	bne.n	4b62 <__aeabi_dsub+0x216>
    4b60:	e0ca      	b.n	4cf8 <__aeabi_dsub+0x3ac>
    4b62:	1e58      	subs	r0, r3, #1
    4b64:	4684      	mov	ip, r0
    4b66:	2800      	cmp	r0, #0
    4b68:	d000      	beq.n	4b6c <__aeabi_dsub+0x220>
    4b6a:	e0e7      	b.n	4d3c <__aeabi_dsub+0x3f0>
    4b6c:	4452      	add	r2, sl
    4b6e:	4552      	cmp	r2, sl
    4b70:	4180      	sbcs	r0, r0
    4b72:	1864      	adds	r4, r4, r1
    4b74:	4240      	negs	r0, r0
    4b76:	1824      	adds	r4, r4, r0
    4b78:	0017      	movs	r7, r2
    4b7a:	2601      	movs	r6, #1
    4b7c:	0223      	lsls	r3, r4, #8
    4b7e:	d507      	bpl.n	4b90 <__aeabi_dsub+0x244>
    4b80:	2602      	movs	r6, #2
    4b82:	e7cf      	b.n	4b24 <__aeabi_dsub+0x1d8>
    4b84:	4664      	mov	r4, ip
    4b86:	432c      	orrs	r4, r5
    4b88:	d100      	bne.n	4b8c <__aeabi_dsub+0x240>
    4b8a:	e1b3      	b.n	4ef4 <__aeabi_dsub+0x5a8>
    4b8c:	002c      	movs	r4, r5
    4b8e:	4667      	mov	r7, ip
    4b90:	077b      	lsls	r3, r7, #29
    4b92:	d000      	beq.n	4b96 <__aeabi_dsub+0x24a>
    4b94:	e762      	b.n	4a5c <__aeabi_dsub+0x110>
    4b96:	0763      	lsls	r3, r4, #29
    4b98:	08ff      	lsrs	r7, r7, #3
    4b9a:	431f      	orrs	r7, r3
    4b9c:	2501      	movs	r5, #1
    4b9e:	4643      	mov	r3, r8
    4ba0:	08e4      	lsrs	r4, r4, #3
    4ba2:	401d      	ands	r5, r3
    4ba4:	e793      	b.n	4ace <__aeabi_dsub+0x182>
    4ba6:	2d00      	cmp	r5, #0
    4ba8:	d178      	bne.n	4c9c <__aeabi_dsub+0x350>
    4baa:	1c75      	adds	r5, r6, #1
    4bac:	056d      	lsls	r5, r5, #21
    4bae:	0d6d      	lsrs	r5, r5, #21
    4bb0:	2d01      	cmp	r5, #1
    4bb2:	dc00      	bgt.n	4bb6 <__aeabi_dsub+0x26a>
    4bb4:	e0f2      	b.n	4d9c <__aeabi_dsub+0x450>
    4bb6:	4650      	mov	r0, sl
    4bb8:	1a80      	subs	r0, r0, r2
    4bba:	4582      	cmp	sl, r0
    4bbc:	41bf      	sbcs	r7, r7
    4bbe:	1a65      	subs	r5, r4, r1
    4bc0:	427f      	negs	r7, r7
    4bc2:	1bed      	subs	r5, r5, r7
    4bc4:	4684      	mov	ip, r0
    4bc6:	0228      	lsls	r0, r5, #8
    4bc8:	d400      	bmi.n	4bcc <__aeabi_dsub+0x280>
    4bca:	e08c      	b.n	4ce6 <__aeabi_dsub+0x39a>
    4bcc:	4650      	mov	r0, sl
    4bce:	1a17      	subs	r7, r2, r0
    4bd0:	42ba      	cmp	r2, r7
    4bd2:	4192      	sbcs	r2, r2
    4bd4:	1b0c      	subs	r4, r1, r4
    4bd6:	4255      	negs	r5, r2
    4bd8:	1b65      	subs	r5, r4, r5
    4bda:	4698      	mov	r8, r3
    4bdc:	e714      	b.n	4a08 <__aeabi_dsub+0xbc>
    4bde:	2501      	movs	r5, #1
    4be0:	4643      	mov	r3, r8
    4be2:	2400      	movs	r4, #0
    4be4:	401d      	ands	r5, r3
    4be6:	2700      	movs	r7, #0
    4be8:	e755      	b.n	4a96 <__aeabi_dsub+0x14a>
    4bea:	4c2a      	ldr	r4, [pc, #168]	; (4c94 <__aeabi_dsub+0x348>)
    4bec:	1af6      	subs	r6, r6, r3
    4bee:	402c      	ands	r4, r5
    4bf0:	e732      	b.n	4a58 <__aeabi_dsub+0x10c>
    4bf2:	003d      	movs	r5, r7
    4bf4:	3828      	subs	r0, #40	; 0x28
    4bf6:	4085      	lsls	r5, r0
    4bf8:	2700      	movs	r7, #0
    4bfa:	e717      	b.n	4a2c <__aeabi_dsub+0xe0>
    4bfc:	0038      	movs	r0, r7
    4bfe:	f000 fa99 	bl	5134 <__clzsi2>
    4c02:	3020      	adds	r0, #32
    4c04:	e706      	b.n	4a14 <__aeabi_dsub+0xc8>
    4c06:	430a      	orrs	r2, r1
    4c08:	0017      	movs	r7, r2
    4c0a:	2100      	movs	r1, #0
    4c0c:	1e7a      	subs	r2, r7, #1
    4c0e:	4197      	sbcs	r7, r2
    4c10:	e6ee      	b.n	49f0 <__aeabi_dsub+0xa4>
    4c12:	2b00      	cmp	r3, #0
    4c14:	d000      	beq.n	4c18 <__aeabi_dsub+0x2cc>
    4c16:	e0e5      	b.n	4de4 <__aeabi_dsub+0x498>
    4c18:	1c73      	adds	r3, r6, #1
    4c1a:	469c      	mov	ip, r3
    4c1c:	055b      	lsls	r3, r3, #21
    4c1e:	0d5b      	lsrs	r3, r3, #21
    4c20:	2b01      	cmp	r3, #1
    4c22:	dc00      	bgt.n	4c26 <__aeabi_dsub+0x2da>
    4c24:	e09f      	b.n	4d66 <__aeabi_dsub+0x41a>
    4c26:	4b1a      	ldr	r3, [pc, #104]	; (4c90 <__aeabi_dsub+0x344>)
    4c28:	459c      	cmp	ip, r3
    4c2a:	d100      	bne.n	4c2e <__aeabi_dsub+0x2e2>
    4c2c:	e0c5      	b.n	4dba <__aeabi_dsub+0x46e>
    4c2e:	4452      	add	r2, sl
    4c30:	4552      	cmp	r2, sl
    4c32:	4180      	sbcs	r0, r0
    4c34:	1864      	adds	r4, r4, r1
    4c36:	4240      	negs	r0, r0
    4c38:	1824      	adds	r4, r4, r0
    4c3a:	07e7      	lsls	r7, r4, #31
    4c3c:	0852      	lsrs	r2, r2, #1
    4c3e:	4317      	orrs	r7, r2
    4c40:	0864      	lsrs	r4, r4, #1
    4c42:	4666      	mov	r6, ip
    4c44:	e708      	b.n	4a58 <__aeabi_dsub+0x10c>
    4c46:	4812      	ldr	r0, [pc, #72]	; (4c90 <__aeabi_dsub+0x344>)
    4c48:	4285      	cmp	r5, r0
    4c4a:	d100      	bne.n	4c4e <__aeabi_dsub+0x302>
    4c4c:	e085      	b.n	4d5a <__aeabi_dsub+0x40e>
    4c4e:	001d      	movs	r5, r3
    4c50:	e6bc      	b.n	49cc <__aeabi_dsub+0x80>
    4c52:	0029      	movs	r1, r5
    4c54:	3e1f      	subs	r6, #31
    4c56:	40f1      	lsrs	r1, r6
    4c58:	2b20      	cmp	r3, #32
    4c5a:	d100      	bne.n	4c5e <__aeabi_dsub+0x312>
    4c5c:	e07f      	b.n	4d5e <__aeabi_dsub+0x412>
    4c5e:	2240      	movs	r2, #64	; 0x40
    4c60:	1ad3      	subs	r3, r2, r3
    4c62:	409d      	lsls	r5, r3
    4c64:	432f      	orrs	r7, r5
    4c66:	1e7d      	subs	r5, r7, #1
    4c68:	41af      	sbcs	r7, r5
    4c6a:	2400      	movs	r4, #0
    4c6c:	430f      	orrs	r7, r1
    4c6e:	2600      	movs	r6, #0
    4c70:	e78e      	b.n	4b90 <__aeabi_dsub+0x244>
    4c72:	002b      	movs	r3, r5
    4c74:	000f      	movs	r7, r1
    4c76:	3b20      	subs	r3, #32
    4c78:	40df      	lsrs	r7, r3
    4c7a:	2d20      	cmp	r5, #32
    4c7c:	d071      	beq.n	4d62 <__aeabi_dsub+0x416>
    4c7e:	2340      	movs	r3, #64	; 0x40
    4c80:	1b5d      	subs	r5, r3, r5
    4c82:	40a9      	lsls	r1, r5
    4c84:	430a      	orrs	r2, r1
    4c86:	1e51      	subs	r1, r2, #1
    4c88:	418a      	sbcs	r2, r1
    4c8a:	2100      	movs	r1, #0
    4c8c:	4317      	orrs	r7, r2
    4c8e:	e6af      	b.n	49f0 <__aeabi_dsub+0xa4>
    4c90:	000007ff 	.word	0x000007ff
    4c94:	ff7fffff 	.word	0xff7fffff
    4c98:	800fffff 	.word	0x800fffff
    4c9c:	2e00      	cmp	r6, #0
    4c9e:	d03e      	beq.n	4d1e <__aeabi_dsub+0x3d2>
    4ca0:	4eb3      	ldr	r6, [pc, #716]	; (4f70 <__aeabi_dsub+0x624>)
    4ca2:	45b4      	cmp	ip, r6
    4ca4:	d045      	beq.n	4d32 <__aeabi_dsub+0x3e6>
    4ca6:	2680      	movs	r6, #128	; 0x80
    4ca8:	0436      	lsls	r6, r6, #16
    4caa:	426d      	negs	r5, r5
    4cac:	4334      	orrs	r4, r6
    4cae:	2d38      	cmp	r5, #56	; 0x38
    4cb0:	dd00      	ble.n	4cb4 <__aeabi_dsub+0x368>
    4cb2:	e0a8      	b.n	4e06 <__aeabi_dsub+0x4ba>
    4cb4:	2d1f      	cmp	r5, #31
    4cb6:	dd00      	ble.n	4cba <__aeabi_dsub+0x36e>
    4cb8:	e11f      	b.n	4efa <__aeabi_dsub+0x5ae>
    4cba:	2620      	movs	r6, #32
    4cbc:	0027      	movs	r7, r4
    4cbe:	4650      	mov	r0, sl
    4cc0:	1b76      	subs	r6, r6, r5
    4cc2:	40b7      	lsls	r7, r6
    4cc4:	40e8      	lsrs	r0, r5
    4cc6:	4307      	orrs	r7, r0
    4cc8:	4650      	mov	r0, sl
    4cca:	40b0      	lsls	r0, r6
    4ccc:	1e46      	subs	r6, r0, #1
    4cce:	41b0      	sbcs	r0, r6
    4cd0:	40ec      	lsrs	r4, r5
    4cd2:	4338      	orrs	r0, r7
    4cd4:	1a17      	subs	r7, r2, r0
    4cd6:	42ba      	cmp	r2, r7
    4cd8:	4192      	sbcs	r2, r2
    4cda:	1b0c      	subs	r4, r1, r4
    4cdc:	4252      	negs	r2, r2
    4cde:	1aa4      	subs	r4, r4, r2
    4ce0:	4666      	mov	r6, ip
    4ce2:	4698      	mov	r8, r3
    4ce4:	e68b      	b.n	49fe <__aeabi_dsub+0xb2>
    4ce6:	4664      	mov	r4, ip
    4ce8:	4667      	mov	r7, ip
    4cea:	432c      	orrs	r4, r5
    4cec:	d000      	beq.n	4cf0 <__aeabi_dsub+0x3a4>
    4cee:	e68b      	b.n	4a08 <__aeabi_dsub+0xbc>
    4cf0:	2500      	movs	r5, #0
    4cf2:	2600      	movs	r6, #0
    4cf4:	2700      	movs	r7, #0
    4cf6:	e6ea      	b.n	4ace <__aeabi_dsub+0x182>
    4cf8:	001e      	movs	r6, r3
    4cfa:	e6ad      	b.n	4a58 <__aeabi_dsub+0x10c>
    4cfc:	2b1f      	cmp	r3, #31
    4cfe:	dc60      	bgt.n	4dc2 <__aeabi_dsub+0x476>
    4d00:	2720      	movs	r7, #32
    4d02:	1af8      	subs	r0, r7, r3
    4d04:	000f      	movs	r7, r1
    4d06:	4684      	mov	ip, r0
    4d08:	4087      	lsls	r7, r0
    4d0a:	0010      	movs	r0, r2
    4d0c:	40d8      	lsrs	r0, r3
    4d0e:	4307      	orrs	r7, r0
    4d10:	4660      	mov	r0, ip
    4d12:	4082      	lsls	r2, r0
    4d14:	1e50      	subs	r0, r2, #1
    4d16:	4182      	sbcs	r2, r0
    4d18:	40d9      	lsrs	r1, r3
    4d1a:	4317      	orrs	r7, r2
    4d1c:	e6f5      	b.n	4b0a <__aeabi_dsub+0x1be>
    4d1e:	0026      	movs	r6, r4
    4d20:	4650      	mov	r0, sl
    4d22:	4306      	orrs	r6, r0
    4d24:	d005      	beq.n	4d32 <__aeabi_dsub+0x3e6>
    4d26:	43ed      	mvns	r5, r5
    4d28:	2d00      	cmp	r5, #0
    4d2a:	d0d3      	beq.n	4cd4 <__aeabi_dsub+0x388>
    4d2c:	4e90      	ldr	r6, [pc, #576]	; (4f70 <__aeabi_dsub+0x624>)
    4d2e:	45b4      	cmp	ip, r6
    4d30:	d1bd      	bne.n	4cae <__aeabi_dsub+0x362>
    4d32:	000c      	movs	r4, r1
    4d34:	0017      	movs	r7, r2
    4d36:	4666      	mov	r6, ip
    4d38:	4698      	mov	r8, r3
    4d3a:	e68d      	b.n	4a58 <__aeabi_dsub+0x10c>
    4d3c:	488c      	ldr	r0, [pc, #560]	; (4f70 <__aeabi_dsub+0x624>)
    4d3e:	4283      	cmp	r3, r0
    4d40:	d00b      	beq.n	4d5a <__aeabi_dsub+0x40e>
    4d42:	4663      	mov	r3, ip
    4d44:	e6d9      	b.n	4afa <__aeabi_dsub+0x1ae>
    4d46:	2d00      	cmp	r5, #0
    4d48:	d000      	beq.n	4d4c <__aeabi_dsub+0x400>
    4d4a:	e096      	b.n	4e7a <__aeabi_dsub+0x52e>
    4d4c:	0008      	movs	r0, r1
    4d4e:	4310      	orrs	r0, r2
    4d50:	d100      	bne.n	4d54 <__aeabi_dsub+0x408>
    4d52:	e0e2      	b.n	4f1a <__aeabi_dsub+0x5ce>
    4d54:	000c      	movs	r4, r1
    4d56:	0017      	movs	r7, r2
    4d58:	4698      	mov	r8, r3
    4d5a:	4e85      	ldr	r6, [pc, #532]	; (4f70 <__aeabi_dsub+0x624>)
    4d5c:	e67c      	b.n	4a58 <__aeabi_dsub+0x10c>
    4d5e:	2500      	movs	r5, #0
    4d60:	e780      	b.n	4c64 <__aeabi_dsub+0x318>
    4d62:	2100      	movs	r1, #0
    4d64:	e78e      	b.n	4c84 <__aeabi_dsub+0x338>
    4d66:	0023      	movs	r3, r4
    4d68:	4650      	mov	r0, sl
    4d6a:	4303      	orrs	r3, r0
    4d6c:	2e00      	cmp	r6, #0
    4d6e:	d000      	beq.n	4d72 <__aeabi_dsub+0x426>
    4d70:	e0a8      	b.n	4ec4 <__aeabi_dsub+0x578>
    4d72:	2b00      	cmp	r3, #0
    4d74:	d100      	bne.n	4d78 <__aeabi_dsub+0x42c>
    4d76:	e0de      	b.n	4f36 <__aeabi_dsub+0x5ea>
    4d78:	000b      	movs	r3, r1
    4d7a:	4313      	orrs	r3, r2
    4d7c:	d100      	bne.n	4d80 <__aeabi_dsub+0x434>
    4d7e:	e66b      	b.n	4a58 <__aeabi_dsub+0x10c>
    4d80:	4452      	add	r2, sl
    4d82:	4552      	cmp	r2, sl
    4d84:	4180      	sbcs	r0, r0
    4d86:	1864      	adds	r4, r4, r1
    4d88:	4240      	negs	r0, r0
    4d8a:	1824      	adds	r4, r4, r0
    4d8c:	0017      	movs	r7, r2
    4d8e:	0223      	lsls	r3, r4, #8
    4d90:	d400      	bmi.n	4d94 <__aeabi_dsub+0x448>
    4d92:	e6fd      	b.n	4b90 <__aeabi_dsub+0x244>
    4d94:	4b77      	ldr	r3, [pc, #476]	; (4f74 <__aeabi_dsub+0x628>)
    4d96:	4666      	mov	r6, ip
    4d98:	401c      	ands	r4, r3
    4d9a:	e65d      	b.n	4a58 <__aeabi_dsub+0x10c>
    4d9c:	0025      	movs	r5, r4
    4d9e:	4650      	mov	r0, sl
    4da0:	4305      	orrs	r5, r0
    4da2:	2e00      	cmp	r6, #0
    4da4:	d1cf      	bne.n	4d46 <__aeabi_dsub+0x3fa>
    4da6:	2d00      	cmp	r5, #0
    4da8:	d14f      	bne.n	4e4a <__aeabi_dsub+0x4fe>
    4daa:	000c      	movs	r4, r1
    4dac:	4314      	orrs	r4, r2
    4dae:	d100      	bne.n	4db2 <__aeabi_dsub+0x466>
    4db0:	e0a0      	b.n	4ef4 <__aeabi_dsub+0x5a8>
    4db2:	000c      	movs	r4, r1
    4db4:	0017      	movs	r7, r2
    4db6:	4698      	mov	r8, r3
    4db8:	e64e      	b.n	4a58 <__aeabi_dsub+0x10c>
    4dba:	4666      	mov	r6, ip
    4dbc:	2400      	movs	r4, #0
    4dbe:	2700      	movs	r7, #0
    4dc0:	e685      	b.n	4ace <__aeabi_dsub+0x182>
    4dc2:	001f      	movs	r7, r3
    4dc4:	0008      	movs	r0, r1
    4dc6:	3f20      	subs	r7, #32
    4dc8:	40f8      	lsrs	r0, r7
    4dca:	0007      	movs	r7, r0
    4dcc:	2b20      	cmp	r3, #32
    4dce:	d100      	bne.n	4dd2 <__aeabi_dsub+0x486>
    4dd0:	e08e      	b.n	4ef0 <__aeabi_dsub+0x5a4>
    4dd2:	2040      	movs	r0, #64	; 0x40
    4dd4:	1ac3      	subs	r3, r0, r3
    4dd6:	4099      	lsls	r1, r3
    4dd8:	430a      	orrs	r2, r1
    4dda:	1e51      	subs	r1, r2, #1
    4ddc:	418a      	sbcs	r2, r1
    4dde:	2100      	movs	r1, #0
    4de0:	4317      	orrs	r7, r2
    4de2:	e692      	b.n	4b0a <__aeabi_dsub+0x1be>
    4de4:	2e00      	cmp	r6, #0
    4de6:	d114      	bne.n	4e12 <__aeabi_dsub+0x4c6>
    4de8:	0026      	movs	r6, r4
    4dea:	4650      	mov	r0, sl
    4dec:	4306      	orrs	r6, r0
    4dee:	d062      	beq.n	4eb6 <__aeabi_dsub+0x56a>
    4df0:	43db      	mvns	r3, r3
    4df2:	2b00      	cmp	r3, #0
    4df4:	d15c      	bne.n	4eb0 <__aeabi_dsub+0x564>
    4df6:	1887      	adds	r7, r0, r2
    4df8:	4297      	cmp	r7, r2
    4dfa:	4192      	sbcs	r2, r2
    4dfc:	1864      	adds	r4, r4, r1
    4dfe:	4252      	negs	r2, r2
    4e00:	18a4      	adds	r4, r4, r2
    4e02:	4666      	mov	r6, ip
    4e04:	e687      	b.n	4b16 <__aeabi_dsub+0x1ca>
    4e06:	4650      	mov	r0, sl
    4e08:	4320      	orrs	r0, r4
    4e0a:	1e44      	subs	r4, r0, #1
    4e0c:	41a0      	sbcs	r0, r4
    4e0e:	2400      	movs	r4, #0
    4e10:	e760      	b.n	4cd4 <__aeabi_dsub+0x388>
    4e12:	4e57      	ldr	r6, [pc, #348]	; (4f70 <__aeabi_dsub+0x624>)
    4e14:	45b4      	cmp	ip, r6
    4e16:	d04e      	beq.n	4eb6 <__aeabi_dsub+0x56a>
    4e18:	2680      	movs	r6, #128	; 0x80
    4e1a:	0436      	lsls	r6, r6, #16
    4e1c:	425b      	negs	r3, r3
    4e1e:	4334      	orrs	r4, r6
    4e20:	2b38      	cmp	r3, #56	; 0x38
    4e22:	dd00      	ble.n	4e26 <__aeabi_dsub+0x4da>
    4e24:	e07f      	b.n	4f26 <__aeabi_dsub+0x5da>
    4e26:	2b1f      	cmp	r3, #31
    4e28:	dd00      	ble.n	4e2c <__aeabi_dsub+0x4e0>
    4e2a:	e08b      	b.n	4f44 <__aeabi_dsub+0x5f8>
    4e2c:	2620      	movs	r6, #32
    4e2e:	0027      	movs	r7, r4
    4e30:	4650      	mov	r0, sl
    4e32:	1af6      	subs	r6, r6, r3
    4e34:	40b7      	lsls	r7, r6
    4e36:	40d8      	lsrs	r0, r3
    4e38:	4307      	orrs	r7, r0
    4e3a:	4650      	mov	r0, sl
    4e3c:	40b0      	lsls	r0, r6
    4e3e:	1e46      	subs	r6, r0, #1
    4e40:	41b0      	sbcs	r0, r6
    4e42:	4307      	orrs	r7, r0
    4e44:	40dc      	lsrs	r4, r3
    4e46:	18bf      	adds	r7, r7, r2
    4e48:	e7d6      	b.n	4df8 <__aeabi_dsub+0x4ac>
    4e4a:	000d      	movs	r5, r1
    4e4c:	4315      	orrs	r5, r2
    4e4e:	d100      	bne.n	4e52 <__aeabi_dsub+0x506>
    4e50:	e602      	b.n	4a58 <__aeabi_dsub+0x10c>
    4e52:	4650      	mov	r0, sl
    4e54:	1a80      	subs	r0, r0, r2
    4e56:	4582      	cmp	sl, r0
    4e58:	41bf      	sbcs	r7, r7
    4e5a:	1a65      	subs	r5, r4, r1
    4e5c:	427f      	negs	r7, r7
    4e5e:	1bed      	subs	r5, r5, r7
    4e60:	4684      	mov	ip, r0
    4e62:	0228      	lsls	r0, r5, #8
    4e64:	d400      	bmi.n	4e68 <__aeabi_dsub+0x51c>
    4e66:	e68d      	b.n	4b84 <__aeabi_dsub+0x238>
    4e68:	4650      	mov	r0, sl
    4e6a:	1a17      	subs	r7, r2, r0
    4e6c:	42ba      	cmp	r2, r7
    4e6e:	4192      	sbcs	r2, r2
    4e70:	1b0c      	subs	r4, r1, r4
    4e72:	4252      	negs	r2, r2
    4e74:	1aa4      	subs	r4, r4, r2
    4e76:	4698      	mov	r8, r3
    4e78:	e5ee      	b.n	4a58 <__aeabi_dsub+0x10c>
    4e7a:	000d      	movs	r5, r1
    4e7c:	4315      	orrs	r5, r2
    4e7e:	d100      	bne.n	4e82 <__aeabi_dsub+0x536>
    4e80:	e76b      	b.n	4d5a <__aeabi_dsub+0x40e>
    4e82:	4650      	mov	r0, sl
    4e84:	0767      	lsls	r7, r4, #29
    4e86:	08c0      	lsrs	r0, r0, #3
    4e88:	4307      	orrs	r7, r0
    4e8a:	2080      	movs	r0, #128	; 0x80
    4e8c:	08e4      	lsrs	r4, r4, #3
    4e8e:	0300      	lsls	r0, r0, #12
    4e90:	4204      	tst	r4, r0
    4e92:	d007      	beq.n	4ea4 <__aeabi_dsub+0x558>
    4e94:	08cd      	lsrs	r5, r1, #3
    4e96:	4205      	tst	r5, r0
    4e98:	d104      	bne.n	4ea4 <__aeabi_dsub+0x558>
    4e9a:	002c      	movs	r4, r5
    4e9c:	4698      	mov	r8, r3
    4e9e:	08d7      	lsrs	r7, r2, #3
    4ea0:	0749      	lsls	r1, r1, #29
    4ea2:	430f      	orrs	r7, r1
    4ea4:	0f7b      	lsrs	r3, r7, #29
    4ea6:	00e4      	lsls	r4, r4, #3
    4ea8:	431c      	orrs	r4, r3
    4eaa:	00ff      	lsls	r7, r7, #3
    4eac:	4e30      	ldr	r6, [pc, #192]	; (4f70 <__aeabi_dsub+0x624>)
    4eae:	e5d3      	b.n	4a58 <__aeabi_dsub+0x10c>
    4eb0:	4e2f      	ldr	r6, [pc, #188]	; (4f70 <__aeabi_dsub+0x624>)
    4eb2:	45b4      	cmp	ip, r6
    4eb4:	d1b4      	bne.n	4e20 <__aeabi_dsub+0x4d4>
    4eb6:	000c      	movs	r4, r1
    4eb8:	0017      	movs	r7, r2
    4eba:	4666      	mov	r6, ip
    4ebc:	e5cc      	b.n	4a58 <__aeabi_dsub+0x10c>
    4ebe:	2700      	movs	r7, #0
    4ec0:	2400      	movs	r4, #0
    4ec2:	e5e8      	b.n	4a96 <__aeabi_dsub+0x14a>
    4ec4:	2b00      	cmp	r3, #0
    4ec6:	d039      	beq.n	4f3c <__aeabi_dsub+0x5f0>
    4ec8:	000b      	movs	r3, r1
    4eca:	4313      	orrs	r3, r2
    4ecc:	d100      	bne.n	4ed0 <__aeabi_dsub+0x584>
    4ece:	e744      	b.n	4d5a <__aeabi_dsub+0x40e>
    4ed0:	08c0      	lsrs	r0, r0, #3
    4ed2:	0767      	lsls	r7, r4, #29
    4ed4:	4307      	orrs	r7, r0
    4ed6:	2080      	movs	r0, #128	; 0x80
    4ed8:	08e4      	lsrs	r4, r4, #3
    4eda:	0300      	lsls	r0, r0, #12
    4edc:	4204      	tst	r4, r0
    4ede:	d0e1      	beq.n	4ea4 <__aeabi_dsub+0x558>
    4ee0:	08cb      	lsrs	r3, r1, #3
    4ee2:	4203      	tst	r3, r0
    4ee4:	d1de      	bne.n	4ea4 <__aeabi_dsub+0x558>
    4ee6:	08d7      	lsrs	r7, r2, #3
    4ee8:	0749      	lsls	r1, r1, #29
    4eea:	430f      	orrs	r7, r1
    4eec:	001c      	movs	r4, r3
    4eee:	e7d9      	b.n	4ea4 <__aeabi_dsub+0x558>
    4ef0:	2100      	movs	r1, #0
    4ef2:	e771      	b.n	4dd8 <__aeabi_dsub+0x48c>
    4ef4:	2500      	movs	r5, #0
    4ef6:	2700      	movs	r7, #0
    4ef8:	e5e9      	b.n	4ace <__aeabi_dsub+0x182>
    4efa:	002e      	movs	r6, r5
    4efc:	0027      	movs	r7, r4
    4efe:	3e20      	subs	r6, #32
    4f00:	40f7      	lsrs	r7, r6
    4f02:	2d20      	cmp	r5, #32
    4f04:	d02f      	beq.n	4f66 <__aeabi_dsub+0x61a>
    4f06:	2640      	movs	r6, #64	; 0x40
    4f08:	1b75      	subs	r5, r6, r5
    4f0a:	40ac      	lsls	r4, r5
    4f0c:	4650      	mov	r0, sl
    4f0e:	4320      	orrs	r0, r4
    4f10:	1e44      	subs	r4, r0, #1
    4f12:	41a0      	sbcs	r0, r4
    4f14:	2400      	movs	r4, #0
    4f16:	4338      	orrs	r0, r7
    4f18:	e6dc      	b.n	4cd4 <__aeabi_dsub+0x388>
    4f1a:	2480      	movs	r4, #128	; 0x80
    4f1c:	2500      	movs	r5, #0
    4f1e:	0324      	lsls	r4, r4, #12
    4f20:	4e13      	ldr	r6, [pc, #76]	; (4f70 <__aeabi_dsub+0x624>)
    4f22:	2700      	movs	r7, #0
    4f24:	e5d3      	b.n	4ace <__aeabi_dsub+0x182>
    4f26:	4650      	mov	r0, sl
    4f28:	4320      	orrs	r0, r4
    4f2a:	0007      	movs	r7, r0
    4f2c:	1e78      	subs	r0, r7, #1
    4f2e:	4187      	sbcs	r7, r0
    4f30:	2400      	movs	r4, #0
    4f32:	18bf      	adds	r7, r7, r2
    4f34:	e760      	b.n	4df8 <__aeabi_dsub+0x4ac>
    4f36:	000c      	movs	r4, r1
    4f38:	0017      	movs	r7, r2
    4f3a:	e58d      	b.n	4a58 <__aeabi_dsub+0x10c>
    4f3c:	000c      	movs	r4, r1
    4f3e:	0017      	movs	r7, r2
    4f40:	4e0b      	ldr	r6, [pc, #44]	; (4f70 <__aeabi_dsub+0x624>)
    4f42:	e589      	b.n	4a58 <__aeabi_dsub+0x10c>
    4f44:	001e      	movs	r6, r3
    4f46:	0027      	movs	r7, r4
    4f48:	3e20      	subs	r6, #32
    4f4a:	40f7      	lsrs	r7, r6
    4f4c:	2b20      	cmp	r3, #32
    4f4e:	d00c      	beq.n	4f6a <__aeabi_dsub+0x61e>
    4f50:	2640      	movs	r6, #64	; 0x40
    4f52:	1af3      	subs	r3, r6, r3
    4f54:	409c      	lsls	r4, r3
    4f56:	4650      	mov	r0, sl
    4f58:	4320      	orrs	r0, r4
    4f5a:	1e44      	subs	r4, r0, #1
    4f5c:	41a0      	sbcs	r0, r4
    4f5e:	4307      	orrs	r7, r0
    4f60:	2400      	movs	r4, #0
    4f62:	18bf      	adds	r7, r7, r2
    4f64:	e748      	b.n	4df8 <__aeabi_dsub+0x4ac>
    4f66:	2400      	movs	r4, #0
    4f68:	e7d0      	b.n	4f0c <__aeabi_dsub+0x5c0>
    4f6a:	2400      	movs	r4, #0
    4f6c:	e7f3      	b.n	4f56 <__aeabi_dsub+0x60a>
    4f6e:	46c0      	nop			; (mov r8, r8)
    4f70:	000007ff 	.word	0x000007ff
    4f74:	ff7fffff 	.word	0xff7fffff

00004f78 <__aeabi_dcmpun>:
    4f78:	b570      	push	{r4, r5, r6, lr}
    4f7a:	4e0e      	ldr	r6, [pc, #56]	; (4fb4 <__aeabi_dcmpun+0x3c>)
    4f7c:	030d      	lsls	r5, r1, #12
    4f7e:	031c      	lsls	r4, r3, #12
    4f80:	0049      	lsls	r1, r1, #1
    4f82:	005b      	lsls	r3, r3, #1
    4f84:	0b2d      	lsrs	r5, r5, #12
    4f86:	0d49      	lsrs	r1, r1, #21
    4f88:	0b24      	lsrs	r4, r4, #12
    4f8a:	0d5b      	lsrs	r3, r3, #21
    4f8c:	42b1      	cmp	r1, r6
    4f8e:	d004      	beq.n	4f9a <__aeabi_dcmpun+0x22>
    4f90:	4908      	ldr	r1, [pc, #32]	; (4fb4 <__aeabi_dcmpun+0x3c>)
    4f92:	2000      	movs	r0, #0
    4f94:	428b      	cmp	r3, r1
    4f96:	d008      	beq.n	4faa <__aeabi_dcmpun+0x32>
    4f98:	bd70      	pop	{r4, r5, r6, pc}
    4f9a:	4305      	orrs	r5, r0
    4f9c:	2001      	movs	r0, #1
    4f9e:	2d00      	cmp	r5, #0
    4fa0:	d1fa      	bne.n	4f98 <__aeabi_dcmpun+0x20>
    4fa2:	4904      	ldr	r1, [pc, #16]	; (4fb4 <__aeabi_dcmpun+0x3c>)
    4fa4:	2000      	movs	r0, #0
    4fa6:	428b      	cmp	r3, r1
    4fa8:	d1f6      	bne.n	4f98 <__aeabi_dcmpun+0x20>
    4faa:	4314      	orrs	r4, r2
    4fac:	0020      	movs	r0, r4
    4fae:	1e44      	subs	r4, r0, #1
    4fb0:	41a0      	sbcs	r0, r4
    4fb2:	e7f1      	b.n	4f98 <__aeabi_dcmpun+0x20>
    4fb4:	000007ff 	.word	0x000007ff

00004fb8 <__aeabi_d2iz>:
    4fb8:	b530      	push	{r4, r5, lr}
    4fba:	4d13      	ldr	r5, [pc, #76]	; (5008 <__aeabi_d2iz+0x50>)
    4fbc:	030a      	lsls	r2, r1, #12
    4fbe:	004b      	lsls	r3, r1, #1
    4fc0:	0b12      	lsrs	r2, r2, #12
    4fc2:	0d5b      	lsrs	r3, r3, #21
    4fc4:	0fc9      	lsrs	r1, r1, #31
    4fc6:	2400      	movs	r4, #0
    4fc8:	42ab      	cmp	r3, r5
    4fca:	dd10      	ble.n	4fee <__aeabi_d2iz+0x36>
    4fcc:	4c0f      	ldr	r4, [pc, #60]	; (500c <__aeabi_d2iz+0x54>)
    4fce:	42a3      	cmp	r3, r4
    4fd0:	dc0f      	bgt.n	4ff2 <__aeabi_d2iz+0x3a>
    4fd2:	2480      	movs	r4, #128	; 0x80
    4fd4:	4d0e      	ldr	r5, [pc, #56]	; (5010 <__aeabi_d2iz+0x58>)
    4fd6:	0364      	lsls	r4, r4, #13
    4fd8:	4322      	orrs	r2, r4
    4fda:	1aed      	subs	r5, r5, r3
    4fdc:	2d1f      	cmp	r5, #31
    4fde:	dd0b      	ble.n	4ff8 <__aeabi_d2iz+0x40>
    4fe0:	480c      	ldr	r0, [pc, #48]	; (5014 <__aeabi_d2iz+0x5c>)
    4fe2:	1ac3      	subs	r3, r0, r3
    4fe4:	40da      	lsrs	r2, r3
    4fe6:	4254      	negs	r4, r2
    4fe8:	2900      	cmp	r1, #0
    4fea:	d100      	bne.n	4fee <__aeabi_d2iz+0x36>
    4fec:	0014      	movs	r4, r2
    4fee:	0020      	movs	r0, r4
    4ff0:	bd30      	pop	{r4, r5, pc}
    4ff2:	4b09      	ldr	r3, [pc, #36]	; (5018 <__aeabi_d2iz+0x60>)
    4ff4:	18cc      	adds	r4, r1, r3
    4ff6:	e7fa      	b.n	4fee <__aeabi_d2iz+0x36>
    4ff8:	4c08      	ldr	r4, [pc, #32]	; (501c <__aeabi_d2iz+0x64>)
    4ffa:	40e8      	lsrs	r0, r5
    4ffc:	46a4      	mov	ip, r4
    4ffe:	4463      	add	r3, ip
    5000:	409a      	lsls	r2, r3
    5002:	4302      	orrs	r2, r0
    5004:	e7ef      	b.n	4fe6 <__aeabi_d2iz+0x2e>
    5006:	46c0      	nop			; (mov r8, r8)
    5008:	000003fe 	.word	0x000003fe
    500c:	0000041d 	.word	0x0000041d
    5010:	00000433 	.word	0x00000433
    5014:	00000413 	.word	0x00000413
    5018:	7fffffff 	.word	0x7fffffff
    501c:	fffffbed 	.word	0xfffffbed

00005020 <__aeabi_ui2d>:
    5020:	b510      	push	{r4, lr}
    5022:	1e04      	subs	r4, r0, #0
    5024:	d028      	beq.n	5078 <__aeabi_ui2d+0x58>
    5026:	f000 f885 	bl	5134 <__clzsi2>
    502a:	4b15      	ldr	r3, [pc, #84]	; (5080 <__aeabi_ui2d+0x60>)
    502c:	4a15      	ldr	r2, [pc, #84]	; (5084 <__aeabi_ui2d+0x64>)
    502e:	1a1b      	subs	r3, r3, r0
    5030:	1ad2      	subs	r2, r2, r3
    5032:	2a1f      	cmp	r2, #31
    5034:	dd15      	ble.n	5062 <__aeabi_ui2d+0x42>
    5036:	4a14      	ldr	r2, [pc, #80]	; (5088 <__aeabi_ui2d+0x68>)
    5038:	1ad2      	subs	r2, r2, r3
    503a:	4094      	lsls	r4, r2
    503c:	2200      	movs	r2, #0
    503e:	0324      	lsls	r4, r4, #12
    5040:	055b      	lsls	r3, r3, #21
    5042:	0b24      	lsrs	r4, r4, #12
    5044:	0d5b      	lsrs	r3, r3, #21
    5046:	2100      	movs	r1, #0
    5048:	0010      	movs	r0, r2
    504a:	0324      	lsls	r4, r4, #12
    504c:	0d0a      	lsrs	r2, r1, #20
    504e:	0b24      	lsrs	r4, r4, #12
    5050:	0512      	lsls	r2, r2, #20
    5052:	4322      	orrs	r2, r4
    5054:	4c0d      	ldr	r4, [pc, #52]	; (508c <__aeabi_ui2d+0x6c>)
    5056:	051b      	lsls	r3, r3, #20
    5058:	4022      	ands	r2, r4
    505a:	4313      	orrs	r3, r2
    505c:	005b      	lsls	r3, r3, #1
    505e:	0859      	lsrs	r1, r3, #1
    5060:	bd10      	pop	{r4, pc}
    5062:	0021      	movs	r1, r4
    5064:	4091      	lsls	r1, r2
    5066:	000a      	movs	r2, r1
    5068:	210b      	movs	r1, #11
    506a:	1a08      	subs	r0, r1, r0
    506c:	40c4      	lsrs	r4, r0
    506e:	055b      	lsls	r3, r3, #21
    5070:	0324      	lsls	r4, r4, #12
    5072:	0b24      	lsrs	r4, r4, #12
    5074:	0d5b      	lsrs	r3, r3, #21
    5076:	e7e6      	b.n	5046 <__aeabi_ui2d+0x26>
    5078:	2300      	movs	r3, #0
    507a:	2400      	movs	r4, #0
    507c:	2200      	movs	r2, #0
    507e:	e7e2      	b.n	5046 <__aeabi_ui2d+0x26>
    5080:	0000041e 	.word	0x0000041e
    5084:	00000433 	.word	0x00000433
    5088:	00000413 	.word	0x00000413
    508c:	800fffff 	.word	0x800fffff

00005090 <__aeabi_f2d>:
    5090:	0041      	lsls	r1, r0, #1
    5092:	0e09      	lsrs	r1, r1, #24
    5094:	1c4b      	adds	r3, r1, #1
    5096:	b570      	push	{r4, r5, r6, lr}
    5098:	b2db      	uxtb	r3, r3
    509a:	0246      	lsls	r6, r0, #9
    509c:	0a75      	lsrs	r5, r6, #9
    509e:	0fc4      	lsrs	r4, r0, #31
    50a0:	2b01      	cmp	r3, #1
    50a2:	dd14      	ble.n	50ce <__aeabi_f2d+0x3e>
    50a4:	23e0      	movs	r3, #224	; 0xe0
    50a6:	009b      	lsls	r3, r3, #2
    50a8:	076d      	lsls	r5, r5, #29
    50aa:	0b36      	lsrs	r6, r6, #12
    50ac:	18cb      	adds	r3, r1, r3
    50ae:	2100      	movs	r1, #0
    50b0:	0d0a      	lsrs	r2, r1, #20
    50b2:	0028      	movs	r0, r5
    50b4:	0512      	lsls	r2, r2, #20
    50b6:	4d1c      	ldr	r5, [pc, #112]	; (5128 <__aeabi_f2d+0x98>)
    50b8:	4332      	orrs	r2, r6
    50ba:	055b      	lsls	r3, r3, #21
    50bc:	402a      	ands	r2, r5
    50be:	085b      	lsrs	r3, r3, #1
    50c0:	4313      	orrs	r3, r2
    50c2:	005b      	lsls	r3, r3, #1
    50c4:	07e4      	lsls	r4, r4, #31
    50c6:	085b      	lsrs	r3, r3, #1
    50c8:	4323      	orrs	r3, r4
    50ca:	0019      	movs	r1, r3
    50cc:	bd70      	pop	{r4, r5, r6, pc}
    50ce:	2900      	cmp	r1, #0
    50d0:	d114      	bne.n	50fc <__aeabi_f2d+0x6c>
    50d2:	2d00      	cmp	r5, #0
    50d4:	d01e      	beq.n	5114 <__aeabi_f2d+0x84>
    50d6:	0028      	movs	r0, r5
    50d8:	f000 f82c 	bl	5134 <__clzsi2>
    50dc:	280a      	cmp	r0, #10
    50de:	dc1c      	bgt.n	511a <__aeabi_f2d+0x8a>
    50e0:	230b      	movs	r3, #11
    50e2:	002a      	movs	r2, r5
    50e4:	1a1b      	subs	r3, r3, r0
    50e6:	40da      	lsrs	r2, r3
    50e8:	0003      	movs	r3, r0
    50ea:	3315      	adds	r3, #21
    50ec:	409d      	lsls	r5, r3
    50ee:	4b0f      	ldr	r3, [pc, #60]	; (512c <__aeabi_f2d+0x9c>)
    50f0:	0312      	lsls	r2, r2, #12
    50f2:	1a1b      	subs	r3, r3, r0
    50f4:	055b      	lsls	r3, r3, #21
    50f6:	0b16      	lsrs	r6, r2, #12
    50f8:	0d5b      	lsrs	r3, r3, #21
    50fa:	e7d8      	b.n	50ae <__aeabi_f2d+0x1e>
    50fc:	2d00      	cmp	r5, #0
    50fe:	d006      	beq.n	510e <__aeabi_f2d+0x7e>
    5100:	0b32      	lsrs	r2, r6, #12
    5102:	2680      	movs	r6, #128	; 0x80
    5104:	0336      	lsls	r6, r6, #12
    5106:	076d      	lsls	r5, r5, #29
    5108:	4316      	orrs	r6, r2
    510a:	4b09      	ldr	r3, [pc, #36]	; (5130 <__aeabi_f2d+0xa0>)
    510c:	e7cf      	b.n	50ae <__aeabi_f2d+0x1e>
    510e:	4b08      	ldr	r3, [pc, #32]	; (5130 <__aeabi_f2d+0xa0>)
    5110:	2600      	movs	r6, #0
    5112:	e7cc      	b.n	50ae <__aeabi_f2d+0x1e>
    5114:	2300      	movs	r3, #0
    5116:	2600      	movs	r6, #0
    5118:	e7c9      	b.n	50ae <__aeabi_f2d+0x1e>
    511a:	0003      	movs	r3, r0
    511c:	002a      	movs	r2, r5
    511e:	3b0b      	subs	r3, #11
    5120:	409a      	lsls	r2, r3
    5122:	2500      	movs	r5, #0
    5124:	e7e3      	b.n	50ee <__aeabi_f2d+0x5e>
    5126:	46c0      	nop			; (mov r8, r8)
    5128:	800fffff 	.word	0x800fffff
    512c:	00000389 	.word	0x00000389
    5130:	000007ff 	.word	0x000007ff

00005134 <__clzsi2>:
    5134:	211c      	movs	r1, #28
    5136:	2301      	movs	r3, #1
    5138:	041b      	lsls	r3, r3, #16
    513a:	4298      	cmp	r0, r3
    513c:	d301      	bcc.n	5142 <__clzsi2+0xe>
    513e:	0c00      	lsrs	r0, r0, #16
    5140:	3910      	subs	r1, #16
    5142:	0a1b      	lsrs	r3, r3, #8
    5144:	4298      	cmp	r0, r3
    5146:	d301      	bcc.n	514c <__clzsi2+0x18>
    5148:	0a00      	lsrs	r0, r0, #8
    514a:	3908      	subs	r1, #8
    514c:	091b      	lsrs	r3, r3, #4
    514e:	4298      	cmp	r0, r3
    5150:	d301      	bcc.n	5156 <__clzsi2+0x22>
    5152:	0900      	lsrs	r0, r0, #4
    5154:	3904      	subs	r1, #4
    5156:	a202      	add	r2, pc, #8	; (adr r2, 5160 <__clzsi2+0x2c>)
    5158:	5c10      	ldrb	r0, [r2, r0]
    515a:	1840      	adds	r0, r0, r1
    515c:	4770      	bx	lr
    515e:	46c0      	nop			; (mov r8, r8)
    5160:	02020304 	.word	0x02020304
    5164:	01010101 	.word	0x01010101
	...

00005170 <__libc_init_array>:
    5170:	b570      	push	{r4, r5, r6, lr}
    5172:	2600      	movs	r6, #0
    5174:	4d0c      	ldr	r5, [pc, #48]	; (51a8 <__libc_init_array+0x38>)
    5176:	4c0d      	ldr	r4, [pc, #52]	; (51ac <__libc_init_array+0x3c>)
    5178:	1b64      	subs	r4, r4, r5
    517a:	10a4      	asrs	r4, r4, #2
    517c:	42a6      	cmp	r6, r4
    517e:	d109      	bne.n	5194 <__libc_init_array+0x24>
    5180:	2600      	movs	r6, #0
    5182:	f000 f911 	bl	53a8 <_init>
    5186:	4d0a      	ldr	r5, [pc, #40]	; (51b0 <__libc_init_array+0x40>)
    5188:	4c0a      	ldr	r4, [pc, #40]	; (51b4 <__libc_init_array+0x44>)
    518a:	1b64      	subs	r4, r4, r5
    518c:	10a4      	asrs	r4, r4, #2
    518e:	42a6      	cmp	r6, r4
    5190:	d105      	bne.n	519e <__libc_init_array+0x2e>
    5192:	bd70      	pop	{r4, r5, r6, pc}
    5194:	00b3      	lsls	r3, r6, #2
    5196:	58eb      	ldr	r3, [r5, r3]
    5198:	4798      	blx	r3
    519a:	3601      	adds	r6, #1
    519c:	e7ee      	b.n	517c <__libc_init_array+0xc>
    519e:	00b3      	lsls	r3, r6, #2
    51a0:	58eb      	ldr	r3, [r5, r3]
    51a2:	4798      	blx	r3
    51a4:	3601      	adds	r6, #1
    51a6:	e7f2      	b.n	518e <__libc_init_array+0x1e>
    51a8:	2000007c 	.word	0x2000007c
    51ac:	2000007c 	.word	0x2000007c
    51b0:	2000007c 	.word	0x2000007c
    51b4:	20000094 	.word	0x20000094

000051b8 <malloc>:
    51b8:	b510      	push	{r4, lr}
    51ba:	4b03      	ldr	r3, [pc, #12]	; (51c8 <malloc+0x10>)
    51bc:	0001      	movs	r1, r0
    51be:	6818      	ldr	r0, [r3, #0]
    51c0:	f000 f86a 	bl	5298 <_malloc_r>
    51c4:	bd10      	pop	{r4, pc}
    51c6:	46c0      	nop			; (mov r8, r8)
    51c8:	20000018 	.word	0x20000018

000051cc <free>:
    51cc:	b510      	push	{r4, lr}
    51ce:	4b03      	ldr	r3, [pc, #12]	; (51dc <free+0x10>)
    51d0:	0001      	movs	r1, r0
    51d2:	6818      	ldr	r0, [r3, #0]
    51d4:	f000 f816 	bl	5204 <_free_r>
    51d8:	bd10      	pop	{r4, pc}
    51da:	46c0      	nop			; (mov r8, r8)
    51dc:	20000018 	.word	0x20000018

000051e0 <memcpy>:
    51e0:	2300      	movs	r3, #0
    51e2:	b510      	push	{r4, lr}
    51e4:	429a      	cmp	r2, r3
    51e6:	d100      	bne.n	51ea <memcpy+0xa>
    51e8:	bd10      	pop	{r4, pc}
    51ea:	5ccc      	ldrb	r4, [r1, r3]
    51ec:	54c4      	strb	r4, [r0, r3]
    51ee:	3301      	adds	r3, #1
    51f0:	e7f8      	b.n	51e4 <memcpy+0x4>

000051f2 <memset>:
    51f2:	0003      	movs	r3, r0
    51f4:	1882      	adds	r2, r0, r2
    51f6:	4293      	cmp	r3, r2
    51f8:	d100      	bne.n	51fc <memset+0xa>
    51fa:	4770      	bx	lr
    51fc:	7019      	strb	r1, [r3, #0]
    51fe:	3301      	adds	r3, #1
    5200:	e7f9      	b.n	51f6 <memset+0x4>
	...

00005204 <_free_r>:
    5204:	b570      	push	{r4, r5, r6, lr}
    5206:	0005      	movs	r5, r0
    5208:	2900      	cmp	r1, #0
    520a:	d010      	beq.n	522e <_free_r+0x2a>
    520c:	1f0c      	subs	r4, r1, #4
    520e:	6823      	ldr	r3, [r4, #0]
    5210:	2b00      	cmp	r3, #0
    5212:	da00      	bge.n	5216 <_free_r+0x12>
    5214:	18e4      	adds	r4, r4, r3
    5216:	0028      	movs	r0, r5
    5218:	f000 f8b5 	bl	5386 <__malloc_lock>
    521c:	4a1d      	ldr	r2, [pc, #116]	; (5294 <_free_r+0x90>)
    521e:	6813      	ldr	r3, [r2, #0]
    5220:	2b00      	cmp	r3, #0
    5222:	d105      	bne.n	5230 <_free_r+0x2c>
    5224:	6063      	str	r3, [r4, #4]
    5226:	6014      	str	r4, [r2, #0]
    5228:	0028      	movs	r0, r5
    522a:	f000 f8ad 	bl	5388 <__malloc_unlock>
    522e:	bd70      	pop	{r4, r5, r6, pc}
    5230:	42a3      	cmp	r3, r4
    5232:	d909      	bls.n	5248 <_free_r+0x44>
    5234:	6821      	ldr	r1, [r4, #0]
    5236:	1860      	adds	r0, r4, r1
    5238:	4283      	cmp	r3, r0
    523a:	d1f3      	bne.n	5224 <_free_r+0x20>
    523c:	6818      	ldr	r0, [r3, #0]
    523e:	685b      	ldr	r3, [r3, #4]
    5240:	1841      	adds	r1, r0, r1
    5242:	6021      	str	r1, [r4, #0]
    5244:	e7ee      	b.n	5224 <_free_r+0x20>
    5246:	0013      	movs	r3, r2
    5248:	685a      	ldr	r2, [r3, #4]
    524a:	2a00      	cmp	r2, #0
    524c:	d001      	beq.n	5252 <_free_r+0x4e>
    524e:	42a2      	cmp	r2, r4
    5250:	d9f9      	bls.n	5246 <_free_r+0x42>
    5252:	6819      	ldr	r1, [r3, #0]
    5254:	1858      	adds	r0, r3, r1
    5256:	42a0      	cmp	r0, r4
    5258:	d10b      	bne.n	5272 <_free_r+0x6e>
    525a:	6820      	ldr	r0, [r4, #0]
    525c:	1809      	adds	r1, r1, r0
    525e:	1858      	adds	r0, r3, r1
    5260:	6019      	str	r1, [r3, #0]
    5262:	4282      	cmp	r2, r0
    5264:	d1e0      	bne.n	5228 <_free_r+0x24>
    5266:	6810      	ldr	r0, [r2, #0]
    5268:	6852      	ldr	r2, [r2, #4]
    526a:	1841      	adds	r1, r0, r1
    526c:	6019      	str	r1, [r3, #0]
    526e:	605a      	str	r2, [r3, #4]
    5270:	e7da      	b.n	5228 <_free_r+0x24>
    5272:	42a0      	cmp	r0, r4
    5274:	d902      	bls.n	527c <_free_r+0x78>
    5276:	230c      	movs	r3, #12
    5278:	602b      	str	r3, [r5, #0]
    527a:	e7d5      	b.n	5228 <_free_r+0x24>
    527c:	6821      	ldr	r1, [r4, #0]
    527e:	1860      	adds	r0, r4, r1
    5280:	4282      	cmp	r2, r0
    5282:	d103      	bne.n	528c <_free_r+0x88>
    5284:	6810      	ldr	r0, [r2, #0]
    5286:	6852      	ldr	r2, [r2, #4]
    5288:	1841      	adds	r1, r0, r1
    528a:	6021      	str	r1, [r4, #0]
    528c:	6062      	str	r2, [r4, #4]
    528e:	605c      	str	r4, [r3, #4]
    5290:	e7ca      	b.n	5228 <_free_r+0x24>
    5292:	46c0      	nop			; (mov r8, r8)
    5294:	20000dc8 	.word	0x20000dc8

00005298 <_malloc_r>:
    5298:	2303      	movs	r3, #3
    529a:	b570      	push	{r4, r5, r6, lr}
    529c:	1ccd      	adds	r5, r1, #3
    529e:	439d      	bics	r5, r3
    52a0:	3508      	adds	r5, #8
    52a2:	0006      	movs	r6, r0
    52a4:	2d0c      	cmp	r5, #12
    52a6:	d21e      	bcs.n	52e6 <_malloc_r+0x4e>
    52a8:	250c      	movs	r5, #12
    52aa:	42a9      	cmp	r1, r5
    52ac:	d81d      	bhi.n	52ea <_malloc_r+0x52>
    52ae:	0030      	movs	r0, r6
    52b0:	f000 f869 	bl	5386 <__malloc_lock>
    52b4:	4a25      	ldr	r2, [pc, #148]	; (534c <_malloc_r+0xb4>)
    52b6:	6814      	ldr	r4, [r2, #0]
    52b8:	0021      	movs	r1, r4
    52ba:	2900      	cmp	r1, #0
    52bc:	d119      	bne.n	52f2 <_malloc_r+0x5a>
    52be:	4c24      	ldr	r4, [pc, #144]	; (5350 <_malloc_r+0xb8>)
    52c0:	6823      	ldr	r3, [r4, #0]
    52c2:	2b00      	cmp	r3, #0
    52c4:	d103      	bne.n	52ce <_malloc_r+0x36>
    52c6:	0030      	movs	r0, r6
    52c8:	f000 f844 	bl	5354 <_sbrk_r>
    52cc:	6020      	str	r0, [r4, #0]
    52ce:	0029      	movs	r1, r5
    52d0:	0030      	movs	r0, r6
    52d2:	f000 f83f 	bl	5354 <_sbrk_r>
    52d6:	1c43      	adds	r3, r0, #1
    52d8:	d12c      	bne.n	5334 <_malloc_r+0x9c>
    52da:	230c      	movs	r3, #12
    52dc:	0030      	movs	r0, r6
    52de:	6033      	str	r3, [r6, #0]
    52e0:	f000 f852 	bl	5388 <__malloc_unlock>
    52e4:	e003      	b.n	52ee <_malloc_r+0x56>
    52e6:	2d00      	cmp	r5, #0
    52e8:	dadf      	bge.n	52aa <_malloc_r+0x12>
    52ea:	230c      	movs	r3, #12
    52ec:	6033      	str	r3, [r6, #0]
    52ee:	2000      	movs	r0, #0
    52f0:	bd70      	pop	{r4, r5, r6, pc}
    52f2:	680b      	ldr	r3, [r1, #0]
    52f4:	1b5b      	subs	r3, r3, r5
    52f6:	d41a      	bmi.n	532e <_malloc_r+0x96>
    52f8:	2b0b      	cmp	r3, #11
    52fa:	d903      	bls.n	5304 <_malloc_r+0x6c>
    52fc:	600b      	str	r3, [r1, #0]
    52fe:	18cc      	adds	r4, r1, r3
    5300:	6025      	str	r5, [r4, #0]
    5302:	e003      	b.n	530c <_malloc_r+0x74>
    5304:	428c      	cmp	r4, r1
    5306:	d10e      	bne.n	5326 <_malloc_r+0x8e>
    5308:	6863      	ldr	r3, [r4, #4]
    530a:	6013      	str	r3, [r2, #0]
    530c:	0030      	movs	r0, r6
    530e:	f000 f83b 	bl	5388 <__malloc_unlock>
    5312:	0020      	movs	r0, r4
    5314:	2207      	movs	r2, #7
    5316:	300b      	adds	r0, #11
    5318:	1d23      	adds	r3, r4, #4
    531a:	4390      	bics	r0, r2
    531c:	1ac3      	subs	r3, r0, r3
    531e:	d0e7      	beq.n	52f0 <_malloc_r+0x58>
    5320:	425a      	negs	r2, r3
    5322:	50e2      	str	r2, [r4, r3]
    5324:	e7e4      	b.n	52f0 <_malloc_r+0x58>
    5326:	684b      	ldr	r3, [r1, #4]
    5328:	6063      	str	r3, [r4, #4]
    532a:	000c      	movs	r4, r1
    532c:	e7ee      	b.n	530c <_malloc_r+0x74>
    532e:	000c      	movs	r4, r1
    5330:	6849      	ldr	r1, [r1, #4]
    5332:	e7c2      	b.n	52ba <_malloc_r+0x22>
    5334:	2303      	movs	r3, #3
    5336:	1cc4      	adds	r4, r0, #3
    5338:	439c      	bics	r4, r3
    533a:	42a0      	cmp	r0, r4
    533c:	d0e0      	beq.n	5300 <_malloc_r+0x68>
    533e:	1a21      	subs	r1, r4, r0
    5340:	0030      	movs	r0, r6
    5342:	f000 f807 	bl	5354 <_sbrk_r>
    5346:	1c43      	adds	r3, r0, #1
    5348:	d1da      	bne.n	5300 <_malloc_r+0x68>
    534a:	e7c6      	b.n	52da <_malloc_r+0x42>
    534c:	20000dc8 	.word	0x20000dc8
    5350:	20000dcc 	.word	0x20000dcc

00005354 <_sbrk_r>:
    5354:	2300      	movs	r3, #0
    5356:	b570      	push	{r4, r5, r6, lr}
    5358:	4c06      	ldr	r4, [pc, #24]	; (5374 <_sbrk_r+0x20>)
    535a:	0005      	movs	r5, r0
    535c:	0008      	movs	r0, r1
    535e:	6023      	str	r3, [r4, #0]
    5360:	f000 f814 	bl	538c <_sbrk>
    5364:	1c43      	adds	r3, r0, #1
    5366:	d103      	bne.n	5370 <_sbrk_r+0x1c>
    5368:	6823      	ldr	r3, [r4, #0]
    536a:	2b00      	cmp	r3, #0
    536c:	d000      	beq.n	5370 <_sbrk_r+0x1c>
    536e:	602b      	str	r3, [r5, #0]
    5370:	bd70      	pop	{r4, r5, r6, pc}
    5372:	46c0      	nop			; (mov r8, r8)
    5374:	20000dd4 	.word	0x20000dd4

00005378 <strlen>:
    5378:	2300      	movs	r3, #0
    537a:	5cc2      	ldrb	r2, [r0, r3]
    537c:	3301      	adds	r3, #1
    537e:	2a00      	cmp	r2, #0
    5380:	d1fb      	bne.n	537a <strlen+0x2>
    5382:	1e58      	subs	r0, r3, #1
    5384:	4770      	bx	lr

00005386 <__malloc_lock>:
    5386:	4770      	bx	lr

00005388 <__malloc_unlock>:
    5388:	4770      	bx	lr
	...

0000538c <_sbrk>:
    538c:	4a04      	ldr	r2, [pc, #16]	; (53a0 <_sbrk+0x14>)
    538e:	6813      	ldr	r3, [r2, #0]
    5390:	2b00      	cmp	r3, #0
    5392:	d003      	beq.n	539c <_sbrk+0x10>
    5394:	1818      	adds	r0, r3, r0
    5396:	6010      	str	r0, [r2, #0]
    5398:	0018      	movs	r0, r3
    539a:	4770      	bx	lr
    539c:	4b01      	ldr	r3, [pc, #4]	; (53a4 <_sbrk+0x18>)
    539e:	e7f9      	b.n	5394 <_sbrk+0x8>
    53a0:	20000dd0 	.word	0x20000dd0
    53a4:	20000dd8 	.word	0x20000dd8

000053a8 <_init>:
    53a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    53aa:	46c0      	nop			; (mov r8, r8)
    53ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
    53ae:	bc08      	pop	{r3}
    53b0:	469e      	mov	lr, r3
    53b2:	4770      	bx	lr

000053b4 <_fini>:
    53b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    53b6:	46c0      	nop			; (mov r8, r8)
    53b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
    53ba:	bc08      	pop	{r3}
    53bc:	469e      	mov	lr, r3
    53be:	4770      	bx	lr
    53c0:	0009      	.short	0x0009
    53c2:	6f50      	.short	0x6f50
    53c4:	61727472 	.word	0x61727472
    53c8:	55207469 	.word	0x55207469
    53cc:	6f500070 	.word	0x6f500070
    53d0:	61727472 	.word	0x61727472
    53d4:	44207469 	.word	0x44207469
    53d8:	006e776f 	.word	0x006e776f
    53dc:	646e614c 	.word	0x646e614c
    53e0:	70616373 	.word	0x70616373
    53e4:	69522065 	.word	0x69522065
    53e8:	00746867 	.word	0x00746867
    53ec:	646e614c 	.word	0x646e614c
    53f0:	70616373 	.word	0x70616373
    53f4:	654c2065 	.word	0x654c2065
    53f8:	46007466 	.word	0x46007466
    53fc:	0074616c 	.word	0x0074616c
    5400:	38414d4d 	.word	0x38414d4d
    5404:	51323534 	.word	0x51323534
    5408:	73655420 	.word	0x73655420
    540c:	6f432074 	.word	0x6f432074
    5410:	00216564 	.word	0x00216564
    5414:	00666e69 	.word	0x00666e69
    5418:	0066766f 	.word	0x0066766f
    541c:	006e616e 	.word	0x006e616e
    5420:	00000a0d 	.word	0x00000a0d

00005424 <_ZTV7Serial_>:
	...
    542c:	000008c9 00000b09 000008c5 00000aed     ................
    543c:	00000acd 00000b45 00000b29 00000afb     ....E...).......
    544c:	000008dd 00000825 00000a15 0000085d     ....%.......]...
    545c:	000008b1 fffffff0 00000000 00000abd     ................
    546c:	00000a05 00000829 000008b5 000008a1     ....)...........

0000547c <_ZTV26DoubleBufferedEPOutHandler>:
	...
    5484:	00000ee5 0000119b 00001183 00001161     ............a...
    5494:	00000d49 00000d4b 00000e39              I...K...9...

000054a0 <_ZL14STRING_PRODUCT>:
    54a0:	75647241 206f6e69 6f72655a 03040000              Arduino Zero..

000054ae <_ZL15STRING_LANGUAGE>:
    54ae:	04090304                                ....

000054b2 <_ZL19STRING_MANUFACTURER>:
    54b2:	75647241 206f6e69 00434c4c              Arduino LLC.

000054be <_ZL21USB_DeviceDescriptorB>:
    54be:	02000112 400102ef 804d2341 02010100     .......@A#M.....
    54ce:	00000103                                         ..

000054d0 <_ZTV7TwoWire>:
	...
    54d8:	00002513 00002365 000003c9 00002389     .%..e#.......#..
    54e8:	000023a5 000025d7 0000238b              .#...%...#..

000054f4 <g_APinDescription>:
    54f4:	00000000 0000000b 00000002 00000004     ................
    5504:	ffff00ff 000bffff 00000000 0000000a     ................
    5514:	00000002 00000004 ffff00ff 000affff     ................
    5524:	00000000 0000000e 00000008 00000004     ................
    5534:	ffff00ff 000effff 00000000 00000009     ................
    5544:	00000004 0000001c 000100ff 00090001     ................
    5554:	00000000 00000008 00000004 0000001c     ................
    5564:	000000ff 00100000 00000000 0000000f     ................
    5574:	00000004 0000001c 030100ff 000f0301     ................
    5584:	00000000 00000014 00000005 0000002c     ............,...
    5594:	000200ff 00040002 00000000 00000015     ................
    55a4:	00000005 0000002c 000300ff 00050003     ....,...........
    55b4:	00000000 00000006 00000004 0000001c     ................
    55c4:	010000ff 00060100 00000000 00000007     ................
    55d4:	00000004 0000001c 010100ff 00070101     ................
    55e4:	00000000 00000012 00000004 0000001c     ................
    55f4:	030000ff 00020300 00000000 00000010     ................
    5604:	00000004 0000001c 020000ff 00000200     ................
    5614:	00000000 00000013 00000005 0000002c     ............,...
    5624:	000300ff 00030003 00000000 00000011     ................
    5634:	00000004 0000001c 020100ff 00010201     ................
    5644:	00000000 00000002 00000001 00000002     ................
    5654:	ffff0000 0002ffff 00000001 00000008     ................
    5664:	00000001 00000018 04000002 00080400     ................
    5674:	00000001 00000009 00000001 00000018     ................
    5684:	04010003 00090401 00000000 00000004     ................
    5694:	00000001 00000000 ffff0004 0004ffff     ................
    56a4:	00000000 00000005 00000001 00000000     ................
    56b4:	ffff0005 0005ffff 00000001 00000002     ................
    56c4:	00000001 00000000 ffff000a 0002ffff     ................
    56d4:	00000000 00000016 00000002 00000004     ................
    56e4:	ffff00ff 0006ffff 00000000 00000017     ................
    56f4:	00000002 00000004 ffff00ff 0007ffff     ................
    5704:	00000000 0000000c 00000003 00000004     ................
    5714:	ffff00ff 000cffff 00000001 0000000a     ................
    5724:	00000003 00000004 ffff00ff 000affff     ................
    5734:	00000001 0000000b 00000003 00000004     ................
    5744:	ffff00ff 000bffff 00000001 00000003     ................
    5754:	0000000b 00000004 ffff00ff 00ffffff     ................
    5764:	00000000 0000001b 0000000b 00000004     ................
    5774:	ffff00ff 00ffffff 00000000 0000001c     ................
    5784:	00000006 00000000 ffff00ff 00ffffff     ................
    5794:	00000000 00000018 00000006 00000000     ................
    57a4:	ffff00ff 00ffffff 00000000 00000019     ................
    57b4:	00000006 00000000 ffff00ff 00ffffff     ................
    57c4:	00000001 00000016 00000003 00000000     ................
    57d4:	ffff00ff 00ffffff 00000001 00000017     ................
    57e4:	00000003 00000000 ffff00ff 00ffffff     ................
    57f4:	00000000 00000016 00000002 00000000     ................
    5804:	ffff00ff 00ffffff 00000000 00000017     ................
    5814:	00000002 00000000 ffff00ff 00ffffff     ................
    5824:	00000000 00000013 00000002 00000000     ................
    5834:	ffff00ff 00ffffff 00000000 00000010     ................
    5844:	00000002 00000000 ffff00ff 00ffffff     ................
    5854:	00000000 00000012 00000002 00000000     ................
    5864:	ffff00ff 00ffffff 00000000 00000011     ................
    5874:	00000002 00000000 ffff00ff 00ffffff     ................
    5884:	00000000 0000000d 00000004 0000000c     ................
    5894:	000100ff 000dffff 00000000 00000015     ................
    58a4:	00000005 0000000c 000300ff 00ffffff     ................
    58b4:	00000000 00000006 00000004 0000000c     ................
    58c4:	010000ff 00ffffff 00000000 00000007     ................
    58d4:	00000004 0000000c 010100ff 00ffffff     ................
    58e4:	00000000 00000003 00000001 00000002     ................
    58f4:	ffff00ff 00ffffff 00000000 00000002     ................
    5904:	00000001 00000002 ffff0014 0002ffff     ................
    5914:	00000000 0000001e 00000004 00000006     ................
    5924:	ffff00ff 000a0100 00000000 0000001f     ................
    5934:	00000004 00000006 ffff00ff 000b0101     ................

00005944 <_ZTV4Uart>:
	...
    594c:	00002f75 000003cd 00002e9b 00002e57     u/..........W...
    595c:	00002e71 00003029 00002c39 00002c29     q...)0..9,..),..
    596c:	00002cbd 00002c53 00002c25 00003384     .,..S,..%,...3..
    597c:	000032d4 000032d4 000032d2 00003376     .2...2...2..v3..
    598c:	00003376 0000336c 000032d2 00003376     v3..l3...2..v3..
    599c:	0000336c 00003376 000032d2 0000337c     l3..v3...2..|3..
    59ac:	0000337c 0000337c 0000340c 00003ddc     |3..|3...4...=..
    59bc:	00003dbe 00003d78 00003c96 00003d78     .=..x=...<..x=..
    59cc:	00003db0 00003d78 00003c96 00003dbe     .=..x=...<...=..
    59dc:	00003dbe 00003db0 00003c96 00003c8e     .=...=...<...<..
    59ec:	00003c8e 00003c8e 00003ff4 0000463c     .<...<...?..<F..
    59fc:	000044fc 000044fc 000044f8 00004614     .D...D...D...F..
    5a0c:	00004614 00004606 000044f8 00004614     .F...F...D...F..
    5a1c:	00004606 00004614 000044f8 0000461c     .F...F...D...F..
    5a2c:	0000461c 0000461c 00004820              .F...F.. H..

00005a38 <__EH_FRAME_BEGIN__>:
    5a38:	00000000                                ....
